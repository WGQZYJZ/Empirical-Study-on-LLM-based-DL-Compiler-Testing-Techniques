import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_80 = relay.var("var_80", dtype = "bool", shape = (15, 1, 3))#candidate|80|(15, 1, 3)|var|bool
var_81 = relay.var("var_81", dtype = "bool", shape = (15, 16, 3))#candidate|81|(15, 16, 3)|var|bool
bop_82 = relay.logical_or(var_80.astype('bool'), var_81.astype('bool')) # shape=(15, 16, 3)
output = bop_82
output2 = bop_82
func_90 = relay.Function([var_80,var_81,], output)
mod['func_90'] = func_90
mod = relay.transform.InferType()(mod)
mutated_mod['func_90'] = func_90
mutated_mod = relay.transform.InferType()(mutated_mod)
func_90_call = mutated_mod.get_global_var('func_90')
var_92 = relay.var("var_92", dtype = "bool", shape = (15, 1, 3))#candidate|92|(15, 1, 3)|var|bool
var_93 = relay.var("var_93", dtype = "bool", shape = (15, 16, 3))#candidate|93|(15, 16, 3)|var|bool
call_91 = func_90_call(var_92,var_93,)
output = call_91
func_94 = relay.Function([var_92,var_93,], output)
mutated_mod['func_94'] = func_94
mutated_mod = relay.transform.InferType()(mutated_mod)
var_179 = relay.var("var_179", dtype = "float32", shape = (16, 12, 3))#candidate|179|(16, 12, 3)|var|float32
uop_180 = relay.atan(var_179.astype('float32')) # shape=(16, 12, 3)
var_182 = relay.var("var_182", dtype = "float32", shape = (16, 12, 3))#candidate|182|(16, 12, 3)|var|float32
bop_183 = relay.maximum(uop_180.astype('int32'), relay.reshape(var_182.astype('int32'), relay.shape_of(uop_180))) # shape=(16, 12, 3)
output = relay.Tuple([bop_183,])
output2 = relay.Tuple([bop_183,])
func_195 = relay.Function([var_179,var_182,], output)
mod['func_195'] = func_195
mod = relay.transform.InferType()(mod)
var_196 = relay.var("var_196", dtype = "float32", shape = (16, 12, 3))#candidate|196|(16, 12, 3)|var|float32
var_197 = relay.var("var_197", dtype = "float32", shape = (16, 12, 3))#candidate|197|(16, 12, 3)|var|float32
output = func_195(var_196,var_197,)
func_198 = relay.Function([var_196,var_197,], output)
mutated_mod['func_198'] = func_198
mutated_mod = relay.transform.InferType()(mutated_mod)
const_282 = relay.const([[[-5.945691,-8.874700,3.655959,8.455849,-4.998117,-0.707178,4.864479,1.482021,-1.740160,-4.987851],[5.264344,-2.432040,9.521825,4.879743,6.362621,-1.394659,7.005263,2.056124,-8.596329,5.605273],[-2.472955,-2.274962,-4.810655,0.217915,0.299375,-9.970565,-2.905973,-1.580770,-5.479525,4.078271],[-8.642581,4.545410,-9.277052,-5.840361,8.027980,-0.966746,5.507215,8.422494,-0.544147,-2.596489],[9.529571,-0.965655,8.442475,2.197237,2.257391,0.402708,-4.162045,7.512195,7.532716,2.583958],[3.217443,0.124541,-0.843928,7.199054,8.921100,6.685519,-9.906097,-5.999574,-0.669698,0.474001],[-6.711655,6.766422,-2.806616,-3.744987,-8.758285,-4.151501,9.961134,-1.243648,4.699798,-6.910399],[-2.206461,7.722248,-4.895301,-7.139215,1.288946,-1.493335,1.912688,-1.030029,-3.383408,1.295608],[-4.831764,-7.792568,9.760808,1.903741,-7.814188,7.055366,8.888073,2.222327,-6.889326,-9.910508],[-2.338549,-2.162045,-4.398650,1.732338,4.373533,0.654531,-0.732375,1.656395,3.445262,-4.283499],[-0.859788,-2.982893,-9.280425,7.158961,5.536347,-4.807624,-8.077985,1.053375,9.437597,8.947290]],[[-5.449752,-3.288804,4.749884,-8.400224,2.052380,-9.276936,7.546728,4.667238,0.624511,-1.520816],[1.211897,-9.394010,8.019001,-2.839132,-2.998577,1.823557,2.663421,6.049402,0.429427,3.664433],[3.772824,9.000263,-2.579174,-8.597733,8.386499,-4.932521,-1.796232,2.469579,1.847776,-7.581523],[9.297200,-9.009440,-7.123407,1.333849,1.946352,-4.176835,4.772385,9.756299,-9.492978,5.716548],[3.470073,-4.596982,-1.950719,0.323655,-5.629460,2.289217,-1.523179,-7.436355,9.718927,-1.913856],[-0.068725,2.308588,-0.459226,4.528076,5.285131,3.485823,-9.082029,-5.165014,3.577029,-6.224025],[3.624283,7.668678,1.941689,-1.830917,-0.956782,-4.843475,9.939420,-1.536687,-7.312023,5.366384],[-7.792356,-2.791191,-1.441894,2.056793,5.025245,2.810743,6.007389,-3.412937,-2.780542,1.343528],[1.300735,1.483134,-4.004594,2.841343,6.774380,-4.013940,2.829964,3.438525,7.998979,4.558815],[-7.709598,8.967030,2.660122,2.044887,7.561421,-3.491082,-3.666204,0.036081,4.329089,2.097504],[2.203623,-5.430010,6.196399,9.605449,-9.753618,9.273971,6.000848,-5.592392,-1.684080,8.233820]],[[2.226080,-7.668531,3.044631,-4.623499,-5.231704,-8.012419,1.284156,-0.907435,-3.078232,4.707658],[-4.228391,2.733486,0.326525,1.146261,3.929133,3.073577,-3.167550,-7.341601,-1.874502,1.464505],[5.550200,-1.913607,-8.474412,1.860481,-5.821083,-4.338829,3.423493,5.471566,8.307672,-0.556582],[4.789533,7.834687,7.813021,9.027139,-1.174028,6.969328,-4.448901,-4.722162,-1.592928,5.818569],[-6.938488,-5.267273,-5.093370,3.442039,-8.601104,-3.153671,6.163460,9.630784,-1.455785,-3.006437],[3.916563,-1.890463,-6.679701,0.946225,-6.897745,8.741072,-7.865846,-7.492297,3.344580,-2.006330],[0.989089,9.221371,7.567580,5.193417,-7.502502,-6.806101,5.965945,3.683519,-8.704183,0.671469],[-1.447852,2.415793,-4.793064,8.206519,7.940232,6.294181,-0.744479,-8.533120,4.488085,7.518225],[7.085994,-1.034810,-8.838977,-1.135025,-0.236872,9.969800,9.871364,5.638054,-9.505360,1.073857],[-2.360113,-6.090824,-4.123141,-2.830022,9.747105,7.969564,-5.104959,0.324826,5.919129,9.519841],[4.186430,-7.555888,4.364385,-7.940916,-5.737596,-3.364264,-1.200872,-6.863671,0.960597,5.810483]],[[-5.497678,6.627774,-9.985843,-1.121582,3.800581,7.683182,-5.730215,8.256031,2.693798,-2.158684],[2.815285,-4.552309,1.899689,-6.533942,-8.672292,4.997615,-7.426803,1.202319,-1.956537,4.472811],[2.959257,-1.831398,-1.837467,8.492523,-0.549497,-4.976191,-7.932259,2.262260,3.528953,-5.805577],[7.874098,-6.556874,1.214435,-8.149734,6.385490,2.016843,-7.108516,7.342045,3.923127,-8.831440],[-1.940513,5.598613,-2.012907,-8.061342,5.308102,5.721133,1.934979,-0.692956,9.923919,-9.417828],[-4.927282,3.201549,6.319663,-3.818981,8.380329,-4.952257,3.896068,1.313063,5.773331,8.901124],[-5.496272,0.378552,-3.392435,-7.014151,7.226439,3.609015,-4.673006,-3.932421,5.775298,-9.550907],[-9.605792,-3.007840,7.368168,5.698765,4.510593,6.583905,5.810631,3.153284,-6.614510,3.560767],[-3.592350,-7.237514,6.138431,8.189322,1.424909,9.955709,-5.894213,4.035732,1.988212,-2.052858],[2.664071,5.694369,2.653517,-1.072811,-7.311910,5.368913,-7.896141,-7.433816,-4.039975,-8.207331],[0.077550,1.365135,0.355011,7.135388,4.997197,-7.358427,7.159333,1.320381,-7.270091,2.797186]],[[8.834806,-7.543933,-0.484269,2.322859,-3.894927,-7.060194,-2.089823,5.234733,-2.488379,-2.468754],[6.313364,-8.095850,-9.050352,2.290025,8.923259,-4.880137,3.738966,8.281446,6.371298,-0.032351],[-5.028763,3.876187,6.849046,1.572194,-3.269654,5.599102,-9.183489,-3.029421,-3.573168,7.739468],[-6.845916,-9.174493,-9.757711,3.657131,6.976380,9.911711,-5.440352,-8.946196,-5.669343,1.149160],[8.360043,-7.765823,-4.060356,0.527118,-5.428932,2.172158,-1.039698,-2.971449,1.106699,-0.958730],[6.386498,-2.818654,-1.942969,0.327658,-2.571691,0.800446,-3.682714,8.160426,8.740318,6.591875],[-0.800824,-5.389219,-5.325809,0.926586,7.388058,-9.274337,-4.542696,-5.514113,9.898104,5.093685],[2.795346,-2.448628,-8.092135,-8.220738,-0.625652,1.569433,-8.648458,9.211573,-0.435517,-9.396062],[-7.749709,-0.404472,-5.926084,6.494929,9.163385,4.999283,-3.210804,-1.130892,-8.825723,-2.609077],[-8.326831,6.175026,0.122753,2.936994,1.569763,6.546918,8.804350,-5.610792,0.892756,6.367723],[-0.516357,3.180191,-8.910192,9.226784,-9.108156,8.635984,3.343488,-5.308399,4.731999,-0.555038]],[[8.512414,-5.654669,-9.923681,-0.339018,1.713379,-3.960580,1.309787,-1.644810,5.297858,-6.250689],[7.374073,-0.751924,-3.978366,3.280301,-4.599415,-8.470472,-7.284691,-8.112386,-3.137512,-3.107627],[6.926557,8.132148,-6.118089,-5.699106,-1.284479,6.347534,4.590951,-1.880492,-3.777668,1.600215],[-2.976650,8.907320,3.283012,6.588888,-0.378783,7.099934,-9.240588,-6.544958,-0.519954,-0.262563],[3.962033,-4.049895,3.513605,-6.309132,-6.143731,-5.579531,-2.648571,7.771899,-3.949089,3.341452],[-2.048212,-7.358963,3.262545,8.464474,4.223959,-0.145807,-3.323387,8.370604,-6.730168,0.499868],[-8.441190,6.389126,4.515647,-0.660049,0.908465,1.675971,-7.204395,-8.762153,-9.505150,7.613375],[0.111131,9.058310,-4.513101,9.797596,-0.283894,9.840427,-6.991076,3.962833,-4.819744,8.948423],[9.325688,8.658178,-7.317031,-5.640756,-3.375465,5.794151,5.564881,2.179680,8.561051,-1.659489],[3.991541,-7.629560,-0.003265,-5.555397,5.428801,-7.338316,-9.854644,-0.503478,9.726007,2.734991],[-6.275250,0.653166,6.984640,2.283538,0.488170,6.824868,-0.330533,4.122962,2.319756,3.207286]],[[8.109360,-9.948256,1.526457,6.425553,2.698037,-7.330163,6.147315,0.390025,-3.759728,5.831549],[4.975172,6.468503,5.187556,-5.770660,-8.864514,1.385502,-1.019209,4.664363,3.849863,-5.147966],[1.343054,-0.380543,6.030351,-7.003377,0.952159,3.754224,-6.236570,-7.636366,6.005400,-4.034316],[-6.523566,-3.613385,7.978900,-2.858785,-6.392162,4.853326,-6.837365,-1.514597,-4.866417,2.579555],[-5.001651,-6.961557,8.824988,-5.777285,8.680605,-1.898038,1.781390,-8.465483,-3.388976,4.482049],[-3.388744,7.790650,-4.030271,-8.028662,-1.793548,-6.601559,-6.376848,7.287818,0.342198,1.848411],[-3.588715,-1.927335,-1.680313,4.660744,-0.245301,4.762215,7.745246,7.312221,-7.397247,-7.239483],[4.448680,8.621052,9.955187,-9.531051,9.940089,-8.176267,5.351433,4.125695,9.816916,1.097296],[7.034488,-6.493209,3.672617,-6.222409,7.272793,-1.093581,-1.681916,1.638613,-6.308460,-8.349924],[3.045431,7.612893,-0.640663,-9.205308,2.889146,4.783159,-2.958762,-1.286570,3.277569,5.465720],[9.445404,4.286754,3.447265,-5.800185,-3.804271,2.881097,5.468536,7.936047,8.267193,3.849870]]], dtype = "float32")#candidate|282|(7, 11, 10)|const|float32
uop_283 = relay.sqrt(const_282.astype('float32')) # shape=(7, 11, 10)
output = relay.Tuple([uop_283,])
output2 = relay.Tuple([uop_283,])
func_286 = relay.Function([], output)
mod['func_286'] = func_286
mod = relay.transform.InferType()(mod)
mutated_mod['func_286'] = func_286
mutated_mod = relay.transform.InferType()(mutated_mod)
func_286_call = mutated_mod.get_global_var('func_286')
call_287 = func_286_call()
output = call_287
func_288 = relay.Function([], output)
mutated_mod['func_288'] = func_288
mutated_mod = relay.transform.InferType()(mutated_mod)
func_286_call = mod.get_global_var('func_286')
func_288_call = mutated_mod.get_global_var('func_288')
call_344 = relay.TupleGetItem(func_286_call(), 0)
call_345 = relay.TupleGetItem(func_288_call(), 0)
func_90_call = mod.get_global_var('func_90')
func_94_call = mutated_mod.get_global_var('func_94')
var_348 = relay.var("var_348", dtype = "bool", shape = (45,))#candidate|348|(45,)|var|bool
var_349 = relay.var("var_349", dtype = "bool", shape = (720, 1))#candidate|349|(720, 1)|var|bool
call_347 = func_90_call(relay.reshape(var_348.astype('bool'), [15, 1, 3]), relay.reshape(var_349.astype('bool'), [15, 16, 3]), )
call_350 = func_90_call(relay.reshape(var_348.astype('bool'), [15, 1, 3]), relay.reshape(var_349.astype('bool'), [15, 16, 3]), )
output = relay.Tuple([call_344,call_347,var_348,var_349,])
output2 = relay.Tuple([call_345,call_350,var_348,var_349,])
func_351 = relay.Function([var_348,var_349,], output)
mod['func_351'] = func_351
mod = relay.transform.InferType()(mod)
mutated_mod['func_351'] = func_351
mutated_mod = relay.transform.InferType()(mutated_mod)
func_351_call = mutated_mod.get_global_var('func_351')
var_353 = relay.var("var_353", dtype = "bool", shape = (45,))#candidate|353|(45,)|var|bool
var_354 = relay.var("var_354", dtype = "bool", shape = (720, 1))#candidate|354|(720, 1)|var|bool
call_352 = func_351_call(var_353,var_354,)
output = call_352
func_355 = relay.Function([var_353,var_354,], output)
mutated_mod['func_355'] = func_355
mutated_mod = relay.transform.InferType()(mutated_mod)
var_403 = relay.var("var_403", dtype = "float32", shape = (1, 5, 14))#candidate|403|(1, 5, 14)|var|float32
uop_404 = relay.sigmoid(var_403.astype('float32')) # shape=(1, 5, 14)
const_407 = relay.const([[[-2.828567,-1.376312,-5.727000,0.976828,-6.541292,4.874462,-5.890606,-0.818529,-7.766786,-0.235335,-9.562194,5.320734,1.566157,4.411454],[-5.588651,1.376531,7.145235,5.847946,7.243114,-7.810034,-8.352581,-6.622929,-6.454000,4.281039,4.973626,5.654200,1.144618,-8.090226],[7.512671,-0.877581,-0.094760,9.969322,-8.518758,-6.371056,3.639851,5.908009,-6.421535,5.161585,-5.224820,-2.939589,-2.328747,8.969309],[-8.965977,-8.674816,3.151219,-5.438660,-0.870776,7.447620,-1.593634,2.925165,-0.894158,2.727847,-4.117658,-7.998478,6.963615,-7.159997],[-5.501683,3.538361,1.032214,-0.972083,4.552135,9.203109,-6.153077,-3.423075,-1.229210,1.984006,-8.416887,2.977703,5.798744,2.768973]],[[-8.544463,-0.729582,-9.813226,-0.173249,-4.222213,-4.829534,2.942384,5.449400,2.303657,-3.411331,3.230246,-0.626911,3.823534,-1.420054],[5.448022,9.968512,8.899974,-1.353293,-7.845014,-9.253969,-8.688493,-4.051505,-0.072663,7.551114,5.587839,8.159986,5.802825,-4.831128],[9.472665,0.631776,-6.570023,9.225502,4.144242,3.646826,-5.065424,-0.736048,0.516767,-5.391892,-5.684809,5.797183,2.394727,3.050396],[-5.271885,1.785998,-0.606257,3.754893,-6.174335,4.009052,-2.979517,5.757454,-0.281921,4.918039,-5.033568,7.458281,-6.999206,-2.424738],[2.965565,-3.494734,2.978843,7.655607,6.548756,-0.778739,6.406933,8.314615,2.101418,-8.723870,-2.547470,1.155749,4.343641,5.861643]],[[5.402828,-1.126431,2.360434,-2.249508,-9.171666,5.931051,-8.557102,3.306390,5.037512,-8.628366,9.620572,-0.659722,-8.260391,-0.360706],[-7.501658,5.800298,5.246875,-5.248184,0.734229,0.317406,-0.655064,4.453865,2.899555,5.492290,6.515301,8.287000,-9.306527,-9.897717],[5.783114,9.172937,-2.869862,2.438912,-1.222430,2.137305,-4.438858,8.194490,0.311433,-9.861768,-4.204474,7.492414,1.363214,-0.302055],[-6.047464,-6.562346,-3.097281,9.936273,2.307282,-3.087888,-4.866372,6.762440,7.694818,2.712871,2.006069,5.442571,6.947119,2.129735],[4.128024,8.982821,-2.037865,0.197159,2.826201,7.401811,6.001479,-8.724796,9.177346,-5.735301,-3.361175,1.389969,3.717933,1.551121]],[[4.096220,0.595165,3.043647,-9.357606,4.250307,-4.590852,-1.060583,3.454714,7.119628,2.759382,5.799553,1.273143,-0.822636,8.508095],[3.219703,-3.551982,2.030673,5.019374,-3.298557,-5.110635,0.438890,-2.332783,-7.006704,3.248957,9.675593,7.207445,6.476996,0.657245],[2.292475,9.509381,3.042117,-7.057578,-4.319822,0.205106,4.802683,-3.461759,-8.206455,3.922982,-1.838334,6.538329,4.741786,-2.729106],[8.480077,-4.427150,-8.432400,-5.326764,-2.516910,-9.820016,-4.223174,7.541682,3.976152,0.782861,7.557655,-0.452660,6.893575,4.871804],[-4.927145,3.801864,6.657642,1.059487,-9.293209,-5.217576,-3.162086,7.044450,-3.515954,-0.996102,-3.415528,-6.751447,-6.765103,7.129902]],[[-4.011108,5.184410,-2.407809,-0.612729,-3.976273,5.986094,5.351803,8.452977,-2.342308,5.179855,-0.308760,-4.888337,5.613669,-9.766165],[9.821811,9.004560,-4.907466,6.559147,-9.347198,8.576839,4.339273,9.572573,-6.618761,-0.796218,5.203734,3.743169,9.712557,-2.744425],[-3.913306,3.883306,-3.204122,7.456437,8.942534,2.301118,0.094458,-8.726228,5.545122,1.801162,6.244259,-2.118388,1.805278,-9.175726],[6.574080,5.495775,6.851604,0.117739,-5.824964,-4.314297,7.189557,7.665219,-1.761937,6.973567,5.676447,5.599887,-6.914160,1.409647],[-6.943958,6.490548,-1.651743,3.878553,7.208694,8.637715,-7.142859,3.106956,9.807985,-1.531218,-4.122359,4.208068,-3.782092,-8.370987]],[[-5.945660,7.345847,7.804423,-6.028988,9.215337,3.895461,-4.762468,-8.338082,3.390159,5.808015,-0.069303,-0.818498,1.603672,-7.904997],[4.568176,6.111207,-9.952986,-7.216931,9.743463,4.727788,-2.173712,9.030390,5.516464,7.765747,3.070616,8.603791,-8.657932,-6.010403],[2.066964,-6.936693,-3.835909,-6.661920,-3.472342,-6.217540,4.757803,-2.959272,2.473857,2.522562,-8.158377,6.546119,0.734023,7.866262],[-3.091125,0.384100,9.453951,-4.224544,0.049472,-1.315445,2.231135,5.150256,1.458877,5.450124,8.261442,5.628178,3.099832,0.530763],[-0.516591,1.493171,3.468636,-0.005849,-9.433215,-7.731714,-0.834081,7.706126,2.846855,-3.730894,-9.835424,9.406482,-9.144483,2.306247]],[[1.030894,-1.160532,-3.475547,1.168258,6.826623,-7.043474,-7.211894,6.452567,8.261380,5.300678,-0.967642,7.953920,8.586209,-6.771161],[-9.870520,7.583671,5.158840,3.667925,6.908213,4.591231,-7.639294,-7.168859,-2.461706,1.556520,-6.252164,-2.424555,5.645894,-0.289795],[7.892157,-6.857811,-0.643210,5.998181,-4.141857,4.545935,7.424592,-5.385336,-3.637241,6.745566,-3.633101,9.228903,3.748103,8.749887],[2.012265,1.361941,8.998999,-4.627413,3.727678,2.590536,-8.853337,-0.225033,3.957015,-8.606113,6.680988,-0.674567,-1.674142,8.065039],[9.604604,-4.523201,-2.648953,7.861021,-5.294613,8.319576,-2.882325,1.406752,-4.589982,-4.092155,-8.317657,0.784158,-7.388111,5.123467]],[[5.007720,-3.288124,-9.472236,-7.636255,-7.962684,-4.031280,5.696480,1.749399,-9.689725,4.250837,-8.067924,-7.788570,-9.041141,-0.231577],[9.661482,2.091524,-6.649238,8.936576,3.482370,7.754349,-5.873147,-7.405845,-8.820050,2.829239,-0.530409,5.872752,-6.571988,7.257336],[6.602746,-3.769233,7.452179,-4.854604,2.601493,-5.669209,6.911903,3.255682,0.401633,2.680959,6.795606,-2.133463,2.834801,-0.356700],[3.680592,-9.098782,3.172938,1.079738,4.108859,7.605504,-4.634527,6.395822,2.680907,4.164458,-0.349818,-1.846521,6.145264,3.526322],[-8.092951,-5.912094,2.420690,0.530921,2.109942,1.229894,-7.494814,-1.715716,5.946998,-5.088351,-5.616380,6.814828,-1.796562,-2.525646]],[[0.256595,4.290018,2.221478,8.828590,-9.537052,4.317800,-2.696971,-1.859430,8.753366,4.087339,-7.246678,-1.501723,8.361911,0.728654],[8.362864,3.165676,8.233116,4.765975,-4.998318,2.416704,2.559225,4.597631,-2.972064,-5.416522,-3.047192,-0.641233,2.770119,7.014932],[-8.269634,-7.183445,-0.179624,-9.626306,-9.710057,-1.984113,9.977152,-5.395874,-6.283939,-5.101298,9.530709,6.371289,-9.005555,7.086530],[-0.337841,-7.916221,0.673908,-5.573890,-8.956475,-0.663062,-1.795922,3.874278,-4.542791,-6.977235,6.487409,5.741413,5.611097,-3.913416],[-8.707412,0.200251,-2.666231,-4.472304,3.301440,6.885161,2.498818,-6.140738,-4.635595,8.640189,2.288777,-4.956861,-0.224956,-1.980589]],[[-6.716785,5.860503,-5.471174,8.594625,-9.953726,-7.165984,-1.568010,5.367528,1.203604,-1.143798,-1.961408,7.476514,2.101766,-8.818243],[5.803636,-5.111154,-1.325351,6.248039,-5.257987,1.693555,-0.578527,-2.272155,-5.090826,-2.422421,-6.012005,8.284254,7.849394,-4.920650],[-7.326813,-7.772341,0.925330,0.963391,7.710549,-3.772666,9.081395,-2.650220,-8.807589,8.904982,3.967495,-8.174736,-6.884112,-8.136761],[-2.297265,-6.536894,9.471911,3.436889,5.031142,-6.517462,3.506572,4.656931,9.084321,-7.909186,-9.849034,-8.894125,3.684987,9.080156],[-7.920357,7.136294,4.313321,-1.500877,9.927203,5.452174,-0.692881,1.375567,0.472582,4.637687,-7.426122,-5.134130,8.135254,-6.970095]],[[2.538410,-5.223475,4.688054,6.668118,8.807035,-8.929842,5.103109,-0.054895,2.986772,3.868579,-7.084918,9.268013,-0.372246,6.797938],[-9.897262,-0.965030,-6.410676,-4.648624,5.017635,-4.396701,1.989866,9.080217,-6.793839,-0.697723,8.362821,-7.553324,-8.649389,-2.706728],[1.367449,-7.897103,-6.609002,-4.545624,9.499736,-5.096597,-6.610280,-7.799749,0.116914,-7.043399,0.655869,-6.159577,-6.644628,-5.066632],[-2.166805,7.136696,-9.248911,-8.201242,-4.986500,8.933743,8.838882,-1.861269,-6.014221,0.170008,-9.296707,-5.308491,-6.511362,-2.067824],[5.758748,-1.900066,-3.388012,-8.097299,0.945299,8.475831,7.942856,-2.130558,-2.711872,-4.937620,3.624173,4.766724,3.704297,0.724975]],[[-3.520513,-7.971894,-6.035620,6.304906,-2.113792,9.932723,-5.428713,3.074798,-0.308121,-5.839737,6.443214,7.349521,-2.965758,-0.156000],[-0.691404,-7.112397,-8.798581,4.326184,3.898032,2.793063,-9.073721,2.948142,8.752893,-6.695603,-2.913415,-2.793260,4.287575,-3.252520],[-9.345745,1.851657,-9.136192,2.905607,-2.806190,1.847664,-6.939513,1.731298,-0.267100,7.537347,3.840233,0.813893,8.441590,6.720617],[0.813558,-5.280599,3.319365,4.746604,6.421594,-4.400401,5.414614,8.925391,-4.757014,-9.865770,-8.380603,-8.627773,0.868581,8.632635],[2.341028,7.023688,3.174471,9.546025,2.296555,-2.194520,0.102242,-2.676109,3.753007,-4.501613,-1.625328,-5.178338,1.876995,-0.354108]],[[-9.639326,6.841538,0.096290,-2.697624,-6.744704,1.594102,-9.060257,1.677783,-6.660342,-8.237194,5.124334,0.942372,1.744723,-6.634345],[-3.466986,5.001332,6.300665,-6.977261,4.103403,0.831273,-5.111460,9.842258,-7.634472,2.160724,-3.511661,-4.328885,-5.031432,6.942398],[9.879077,-3.315976,7.184796,-7.075190,-4.845097,8.790325,-1.719037,-0.004926,4.789418,1.701026,-0.333061,-2.911126,4.610042,-6.426860],[-2.105013,0.371299,-5.608932,5.464190,-1.899615,-9.444412,-2.288290,-8.734096,-9.818168,-9.191962,2.759460,0.960817,-7.778688,-0.066499],[0.964718,7.376980,0.392460,5.583673,5.106117,7.501841,7.313708,-5.475271,7.929673,-0.701050,3.063796,1.027983,-4.013581,-9.273388]],[[-7.394374,-5.048161,-9.141529,1.361613,0.511745,0.611621,3.919990,-8.861920,-4.954810,-9.711350,1.062213,5.211883,0.205078,5.289005],[1.474114,-9.033260,0.957657,9.683307,9.992726,2.357457,-1.026860,5.783365,8.003572,-0.615533,-6.912295,5.176920,2.217694,7.713561],[4.056609,-3.887533,-6.877758,-0.832931,-5.041575,9.598947,-6.023864,-5.429178,8.519589,-0.134445,6.603548,-8.614810,4.374362,2.027409],[-5.787526,-6.574911,-4.130809,6.519698,8.005712,-2.659478,9.567221,3.029309,-6.106216,-0.241692,6.586406,-2.996873,6.146967,9.831613],[-8.558627,8.641986,2.376549,-4.837273,8.476983,-4.209639,5.084708,-9.016283,8.863535,-1.857447,9.578516,3.546404,7.726711,0.986253]]], dtype = "float32")#candidate|407|(14, 5, 14)|const|float32
bop_408 = relay.bitwise_or(uop_404.astype('int16'), const_407.astype('int16')) # shape=(14, 5, 14)
func_351_call = mod.get_global_var('func_351')
func_355_call = mutated_mod.get_global_var('func_355')
var_416 = relay.var("var_416", dtype = "bool", shape = (45,))#candidate|416|(45,)|var|bool
var_417 = relay.var("var_417", dtype = "bool", shape = (720,))#candidate|417|(720,)|var|bool
call_415 = relay.TupleGetItem(func_351_call(relay.reshape(var_416.astype('bool'), [45,]), relay.reshape(var_417.astype('bool'), [720, 1]), ), 3)
call_418 = relay.TupleGetItem(func_355_call(relay.reshape(var_416.astype('bool'), [45,]), relay.reshape(var_417.astype('bool'), [720, 1]), ), 3)
uop_425 = relay.sigmoid(const_407.astype('float64')) # shape=(14, 5, 14)
func_90_call = mod.get_global_var('func_90')
func_94_call = mutated_mod.get_global_var('func_94')
call_433 = func_90_call(relay.reshape(var_416.astype('bool'), [15, 1, 3]), relay.reshape(var_417.astype('bool'), [15, 16, 3]), )
call_434 = func_90_call(relay.reshape(var_416.astype('bool'), [15, 1, 3]), relay.reshape(var_417.astype('bool'), [15, 16, 3]), )
output = relay.Tuple([bop_408,call_415,var_416,var_417,uop_425,call_433,])
output2 = relay.Tuple([bop_408,call_418,var_416,var_417,uop_425,call_434,])
func_443 = relay.Function([var_403,var_416,var_417,], output)
mod['func_443'] = func_443
mod = relay.transform.InferType()(mod)
var_444 = relay.var("var_444", dtype = "float32", shape = (1, 5, 14))#candidate|444|(1, 5, 14)|var|float32
var_445 = relay.var("var_445", dtype = "bool", shape = (45,))#candidate|445|(45,)|var|bool
var_446 = relay.var("var_446", dtype = "bool", shape = (720,))#candidate|446|(720,)|var|bool
output = func_443(var_444,var_445,var_446,)
func_447 = relay.Function([var_444,var_445,var_446,], output)
mutated_mod['func_447'] = func_447
mutated_mod = relay.transform.InferType()(mutated_mod)
var_497 = relay.var("var_497", dtype = "float32", shape = (14, 16, 12))#candidate|497|(14, 16, 12)|var|float32
uop_498 = relay.asin(var_497.astype('float32')) # shape=(14, 16, 12)
func_195_call = mod.get_global_var('func_195')
func_198_call = mutated_mod.get_global_var('func_198')
var_502 = relay.var("var_502", dtype = "float32", shape = (576,))#candidate|502|(576,)|var|float32
call_501 = relay.TupleGetItem(func_195_call(relay.reshape(var_502.astype('float32'), [16, 12, 3]), relay.reshape(var_502.astype('float32'), [16, 12, 3]), ), 0)
call_503 = relay.TupleGetItem(func_198_call(relay.reshape(var_502.astype('float32'), [16, 12, 3]), relay.reshape(var_502.astype('float32'), [16, 12, 3]), ), 0)
output = relay.Tuple([uop_498,call_501,var_502,])
output2 = relay.Tuple([uop_498,call_503,var_502,])
func_513 = relay.Function([var_497,var_502,], output)
mod['func_513'] = func_513
mod = relay.transform.InferType()(mod)
mutated_mod['func_513'] = func_513
mutated_mod = relay.transform.InferType()(mutated_mod)
func_513_call = mutated_mod.get_global_var('func_513')
var_515 = relay.var("var_515", dtype = "float32", shape = (14, 16, 12))#candidate|515|(14, 16, 12)|var|float32
var_516 = relay.var("var_516", dtype = "float32", shape = (576,))#candidate|516|(576,)|var|float32
call_514 = func_513_call(var_515,var_516,)
output = call_514
func_517 = relay.Function([var_515,var_516,], output)
mutated_mod['func_517'] = func_517
mutated_mod = relay.transform.InferType()(mutated_mod)
func_286_call = mod.get_global_var('func_286')
func_288_call = mutated_mod.get_global_var('func_288')
call_546 = relay.TupleGetItem(func_286_call(), 0)
call_547 = relay.TupleGetItem(func_288_call(), 0)
var_557 = relay.var("var_557", dtype = "float32", shape = (7, 11, 10))#candidate|557|(7, 11, 10)|var|float32
bop_558 = relay.add(call_546.astype('uint8'), relay.reshape(var_557.astype('uint8'), relay.shape_of(call_546))) # shape=(7, 11, 10)
bop_561 = relay.add(call_547.astype('uint8'), relay.reshape(var_557.astype('uint8'), relay.shape_of(call_547))) # shape=(7, 11, 10)
uop_575 = relay.log2(bop_558.astype('float32')) # shape=(7, 11, 10)
uop_577 = relay.log2(bop_561.astype('float32')) # shape=(7, 11, 10)
bop_582 = relay.floor_divide(bop_558.astype('float64'), relay.reshape(uop_575.astype('float64'), relay.shape_of(bop_558))) # shape=(7, 11, 10)
bop_585 = relay.floor_divide(bop_561.astype('float64'), relay.reshape(uop_577.astype('float64'), relay.shape_of(bop_561))) # shape=(7, 11, 10)
func_286_call = mod.get_global_var('func_286')
func_288_call = mutated_mod.get_global_var('func_288')
call_588 = relay.TupleGetItem(func_286_call(), 0)
call_589 = relay.TupleGetItem(func_288_call(), 0)
uop_596 = relay.erf(bop_558.astype('float32')) # shape=(7, 11, 10)
uop_598 = relay.erf(bop_561.astype('float32')) # shape=(7, 11, 10)
func_513_call = mod.get_global_var('func_513')
func_517_call = mutated_mod.get_global_var('func_517')
const_600 = relay.const([[-1.985896,5.096446],[-1.172713,0.351793],[-4.581421,7.119479],[-9.152597,0.374724],[8.687000,9.763687],[-3.503804,6.897678],[2.708426,-8.715913],[-8.726827,-0.849661],[7.531965,-1.575225],[5.423654,-0.508999],[-6.402150,-5.206107],[8.458541,-8.880563],[-3.840960,-9.841429],[2.815692,3.113628],[-3.354242,-4.690048],[8.732019,4.742757],[-7.443811,-7.481015],[-5.654890,-4.648927],[-2.740249,4.576944],[-5.752708,-9.782345],[1.577038,8.071510],[-2.514676,5.770678],[-6.595414,0.976943],[-6.789572,4.190251],[6.072647,2.981581],[-5.364042,-6.747829],[-8.526978,3.529375],[6.488233,5.707960],[-3.606193,8.248808],[6.628348,6.741441],[-5.450458,7.945928],[7.974864,4.378035],[-9.833548,-5.074583],[-6.687008,7.704697],[-4.041676,8.108467],[-1.198869,-7.118417],[4.950343,-6.419870],[2.661898,2.892515],[-4.848820,-4.279956],[5.609906,-3.537358],[-4.605763,-4.534276],[9.380113,-0.492688],[-7.575368,7.664840],[-7.720688,5.712619],[5.250035,7.592903],[1.136770,-5.759933],[9.903549,-6.858093],[9.342489,1.237520],[2.210356,-9.587460],[0.987617,3.132488],[3.243611,5.381562],[-3.405051,3.958770],[-8.806973,-7.189229],[2.873476,8.015573],[-4.017605,2.047922],[3.771841,2.083283],[2.400200,6.135500],[-5.673307,-9.546024],[-1.397202,-7.879855],[8.331075,-8.961056],[-1.172169,4.966193],[-6.141113,-6.405289],[-4.003379,-3.036657],[-9.696564,3.563702],[6.636865,0.434555],[7.171535,4.328177],[6.262452,-6.575358],[-5.936284,-2.477730],[-7.349141,-7.819887],[-6.398261,4.774048],[2.582454,-3.007754],[1.278112,8.687738],[2.512793,1.739962],[-3.836037,-5.448809],[-5.778548,-1.307473],[0.332755,9.125228],[3.044210,-6.011479],[-9.251862,-9.132585],[8.614122,-0.898709],[-6.850191,-5.273554],[-1.783556,-2.013581],[-2.477912,-9.302478],[-4.690804,7.013374],[9.644285,7.196040],[8.660410,-9.871268],[8.810560,0.970684],[-6.989110,7.152312],[7.898536,-4.633234],[5.499146,-4.413000],[1.000542,-0.090024],[-3.833019,6.087182],[-0.404854,-1.823016],[1.888571,-9.215659],[8.702929,1.372647],[0.562675,1.350871],[-3.117443,-8.835054],[-1.252404,-7.443050],[2.204329,6.251420],[-7.417611,6.453687],[2.512645,-6.030510],[-4.299226,1.840239],[-1.962659,6.481246],[-6.952778,-0.768475],[-0.184909,-4.134613],[-9.739157,-6.244429],[-1.901586,3.891355],[6.721531,2.336839],[-6.072842,8.976555],[-2.047050,-9.689339],[2.536116,-6.262789],[-4.618089,1.765523],[3.921917,-7.614818],[-7.791395,8.023961],[-3.376194,5.298526],[3.144428,0.177472],[6.217607,1.274439],[7.956211,-1.849698],[2.532131,-7.673637],[-4.471959,1.201217],[-0.347230,2.683862],[-8.280731,5.225942],[2.263765,-7.801497],[1.656456,-8.954735],[-4.630671,8.274808],[6.519228,1.500199],[-5.014003,6.058341],[7.947114,4.356743],[-8.247712,-0.137996],[8.702699,1.151668],[-1.248005,-5.111935],[3.585486,-2.712280],[-5.527155,-1.116436],[-4.629603,-0.657564],[0.559944,3.774465],[-3.543946,-3.148899],[2.176343,-6.302037],[-9.887589,0.788492],[3.025980,9.157481],[-6.630630,0.581474],[3.176499,-8.213950],[9.039832,-7.503980],[-0.027051,2.076466],[-3.190237,8.928501],[-3.538259,9.020228],[-1.883812,4.428121],[-7.338169,-4.879962],[6.943284,4.996328],[3.291114,-4.511820],[-5.161052,-6.671183],[-2.129270,-0.322878],[2.152281,-0.940627],[6.955097,8.861524],[-0.633753,1.977350],[9.095942,0.281513],[8.983748,4.479312],[-1.157375,0.566879],[-8.967215,-7.619976],[2.021096,-0.964292],[-0.824824,-4.901892],[-9.879869,0.926211],[5.888801,7.316287],[5.458973,6.631494],[7.712715,6.621065],[-6.295649,-7.600242],[-8.538775,9.511131],[5.508492,2.229016],[-4.004630,6.968518],[3.708575,4.228155],[-4.266817,4.072040],[5.271787,-4.353515],[4.634666,-4.379598],[1.270615,-7.584292],[7.233639,2.186400],[9.405377,6.509775],[2.826397,-2.330983],[1.694417,1.365307],[-0.818776,5.444569],[4.484083,-8.708164],[-6.356191,-7.836646],[-0.149475,4.388931],[-5.293103,-8.250283],[1.069692,3.878320],[5.884101,3.510747],[7.172096,-3.703105],[8.162986,9.265739],[0.459758,5.214937],[-5.752372,2.048916],[3.356752,8.093528],[-5.056033,2.493858],[7.100253,-4.868749],[1.823287,5.184271],[-1.176576,-8.086365],[-6.720679,-1.699663],[-8.696160,1.383449],[7.269049,2.079240],[2.268249,-6.683286],[-2.744785,-5.964941],[-6.868886,-4.353189],[-6.512012,-0.644920],[5.695135,3.024370],[-5.247107,-0.396122],[9.356593,7.479492],[-7.595854,8.117417],[2.352595,7.968862],[-3.859922,5.535045],[-0.430346,-8.207538],[-7.250451,1.067600],[0.689984,9.780134],[-6.472311,-7.570504],[5.968537,-8.741946],[-4.080370,7.526361],[1.284982,-2.889950],[-0.418856,-4.314163],[2.895991,-4.103148],[5.681259,-6.433044],[-1.071641,-1.142637],[1.169142,-1.908179],[9.788550,-9.764955],[0.677571,7.659670],[1.716292,-5.220463],[-9.907003,-7.204913],[2.815881,9.557738],[9.353641,2.691219],[7.093345,-9.659459],[6.364882,1.576629],[-1.458646,-8.466156],[8.106463,-8.242935],[2.148655,7.569676],[-1.835198,-5.177152],[-9.659294,-2.216707],[5.171741,0.870235],[-8.122103,5.707129],[-0.007356,-4.092926],[-8.769400,-7.637521],[-4.111087,-0.595564],[6.970686,0.481712],[-7.069061,5.829065],[7.838126,-2.062256],[-7.828032,6.488331],[0.898515,-6.620904],[6.700069,-4.533619],[4.185154,-7.418105],[-6.838895,-8.351054],[-3.086623,8.650969],[2.434594,6.461994],[-1.147253,7.294492],[3.610239,2.970837],[8.582443,-3.847136],[-7.497117,-6.987094],[-0.863334,-2.102627],[-4.401225,-5.555217],[-8.251796,9.307512],[5.019993,2.229843],[-4.302504,-5.082544],[2.338108,-8.452179],[8.936277,-8.519034],[-4.893629,6.897017],[0.704175,5.095351],[-9.353663,-6.672894],[9.679688,-5.137602],[-8.992019,-5.832372],[-7.200370,-4.339863],[3.326613,-6.170887],[4.379538,-1.591189],[-2.058134,-9.617458],[6.142563,5.620419],[-8.035731,3.247843],[4.481370,-1.435650],[7.277813,-2.730361],[8.437070,2.125904],[6.267011,9.264126],[-6.389490,-7.545825],[1.043691,-7.262595],[-0.867883,2.526319],[5.328188,-1.292728],[-0.753370,-9.757457],[-7.211599,-7.772861],[7.694535,-7.016922],[5.756373,-8.226838],[5.772973,-8.892210],[2.475164,-2.508089],[-0.505937,-5.839575],[-0.467007,-9.915559],[7.971154,-0.721144],[7.899255,4.857142],[-0.470449,-4.220534],[2.036798,-1.619156],[7.441910,-3.843056],[7.071547,9.112293],[-8.783708,-3.154952],[-0.642204,3.672656],[5.789082,7.351350],[-3.774227,-1.989452],[-3.431560,7.964107],[1.273922,2.487003],[-4.301829,6.695977],[-1.320397,-5.008622],[4.217806,0.440102],[1.407952,4.681636],[-8.825821,-1.663294],[-6.048899,7.625467],[6.133241,-6.694833],[-9.259948,3.740559],[3.883941,2.994288],[2.769468,-2.679694],[-7.880897,3.814919],[9.737187,-0.783705],[3.249917,-3.841805],[2.547827,8.765914],[-6.310343,9.504072],[8.953693,-3.446466],[-3.920748,-1.934459],[1.053999,-0.327097],[-9.862820,7.709352],[-9.421358,9.738659],[-2.454765,4.841246],[3.956279,-5.431584],[4.906704,0.064010],[9.300280,4.680705],[4.275992,5.964738],[8.266483,-9.273902],[5.437899,4.496562],[3.098515,-2.773223],[-0.613478,-6.550422],[-5.602397,-4.151515],[-7.460452,-9.990191],[7.793372,2.498220],[8.451738,2.846267],[-2.562778,-9.701763],[1.506471,-6.900252],[-2.578447,9.446041],[-4.009907,-0.325846],[-9.591321,-1.709009],[-1.301073,-1.668718],[4.855701,-4.690257],[2.929598,6.102741],[9.454090,4.420660],[5.693094,-5.401151],[-2.001235,-2.929329],[0.698842,2.948396],[9.768737,-4.018279],[-7.917454,7.109350],[6.279173,-6.470601],[5.641367,-6.392183],[1.486306,-6.031837],[6.950144,-0.763741],[-4.989824,6.941651],[-8.607215,5.564785],[-5.488027,8.467381],[5.103122,-6.627472],[8.997140,2.485689],[-8.666607,6.035676],[4.119229,-4.399217],[-4.052449,2.025812],[-4.442375,-3.338444],[1.180360,-3.964489],[-8.439955,1.490261],[7.188490,-6.204414],[-7.395871,8.451028],[9.731273,5.552180],[-6.017036,-1.558163],[-8.478504,0.322886],[-1.039566,4.344033],[-6.227659,9.690099],[-1.398500,-2.762550],[6.273050,-6.557834],[-3.618773,-9.641570],[-9.564890,-3.050515],[-1.898536,-3.042223],[-7.714475,0.407711],[1.956087,7.654109],[-1.001003,-7.861662],[3.368444,-3.548809],[9.510430,-9.217663],[9.044988,-1.018161],[-9.044874,-2.792470],[8.472745,-8.421386],[2.789456,-4.602532],[-0.321382,-1.915815],[-6.501978,2.557851],[3.529281,-2.350511],[-7.813030,-0.886489],[-8.294941,-3.501089],[6.311644,5.663971],[2.049593,0.432086],[0.620698,0.585253],[2.066436,-3.768312],[0.312067,4.959315],[-0.754877,4.763960],[-3.211142,-9.799373],[-5.553136,-5.811940],[2.364461,-8.150762],[8.122428,5.967635],[7.356913,-4.225118],[-6.248661,3.439166],[0.748649,-1.441783],[-3.039323,-7.918094],[9.219619,4.043652],[6.575373,-0.676542],[7.892128,9.912379],[-0.479146,9.802632],[-8.474658,-4.887867],[5.402255,-1.630413],[-1.127565,-0.767193],[-9.906513,1.249934],[8.953162,-7.343142],[-3.519052,0.496229],[3.664899,-7.459693],[-9.022454,-8.593063],[-4.454707,9.389294],[-0.431654,-6.094921],[9.231113,0.116374],[7.723111,4.290098],[-9.932329,-2.483662],[-5.977310,-4.758578],[-3.313539,5.930915],[1.548954,6.714127],[-0.015330,9.511551],[-8.625574,2.792095],[-6.795971,-9.453028],[-8.362533,-3.635645],[3.481374,7.619766],[-5.470544,2.079111],[0.319076,6.155267],[-0.045326,-8.790800],[-5.986659,3.025307],[5.952538,-0.797331],[-5.367310,5.773502],[-9.106265,4.716066],[-4.230218,-2.374399],[-8.614291,-1.170127],[-6.054150,-3.992196],[-6.693538,-3.811810],[-6.452255,-2.916624],[-4.125206,5.249188],[5.478065,5.038188],[-1.523583,9.258385],[-4.638872,-5.009005],[1.828951,-7.607194],[-1.284951,1.684326],[1.448575,4.037399],[1.966482,9.765769],[-4.408221,-7.236062],[6.993692,-3.168417],[-2.061654,8.909155],[1.093313,-5.124633],[-7.422009,-2.079637],[5.967420,1.500321],[3.607681,4.932416],[-4.183232,4.426517],[4.551087,-5.499236],[4.198777,7.219978],[-8.829682,-3.150517],[-7.842737,4.705416],[7.007152,2.707955],[5.455027,7.226865],[-4.693498,8.067266],[5.446587,3.944607],[2.383349,-3.182808],[-6.005763,-7.716869],[-6.341233,-3.138435],[6.812792,5.142307],[-1.044845,-6.049662],[8.438308,-3.777897],[-4.986829,6.373378],[-7.938448,-5.453187],[-4.010894,0.969864],[-0.961557,-3.085782],[-8.424500,8.775937],[-0.293199,0.256741],[-8.866382,-6.593226],[1.631648,1.577830],[-6.924541,-6.845235],[7.036828,-8.742861],[4.719577,9.144346],[-6.681783,-1.868218],[-9.710147,-9.941623],[-2.163081,9.169411],[4.059978,-6.113149],[8.135535,-9.807421],[-0.039927,-8.147084],[-3.710885,-7.240795],[-8.085763,3.033432],[1.973668,-2.587421],[-3.333179,-8.989899],[-5.425184,7.726584],[9.981617,-9.344816],[1.400416,-1.427713],[9.019281,4.661283],[-4.363724,0.856549],[7.898746,7.800076],[-1.546226,1.328609],[-1.770200,3.182880],[6.902357,2.103887],[6.408949,3.911955],[-4.488052,-6.638733],[4.379424,1.658422],[3.018435,-8.413345],[-3.995445,4.534979],[7.945131,1.011335],[-7.724115,-9.288521],[9.883897,-1.336507],[-1.579330,0.880564],[-2.194393,-6.902376],[3.172248,3.494225],[8.338174,-0.086051],[4.730959,-6.943259],[-8.136102,-2.712097],[1.368438,-0.963348],[-1.037311,5.103282],[6.706953,-3.010936],[-1.304574,7.292724],[-9.401080,8.419372],[-9.143005,2.467251],[0.094096,1.628460],[9.638887,5.002240],[-7.357326,4.269827],[-3.272858,3.960534],[0.266793,5.225268],[2.061769,-0.199944],[0.800131,3.743195],[2.471217,2.754356],[-4.524302,-3.077230],[1.103891,-3.431499],[5.810168,-1.858242],[-3.858231,4.713983],[6.230120,-8.509620],[1.539457,5.842371],[-3.000607,8.663929],[5.318244,-6.137233],[9.322832,-0.411959],[-2.657620,-3.803236],[-5.369945,-2.510720],[3.490945,8.511641],[-0.453976,1.886635],[-7.171666,7.260084],[0.722317,-6.961970],[2.876954,-4.365404],[3.076958,3.633818],[-1.360163,6.999766],[5.983750,2.885998],[-0.283425,7.894328],[-0.635343,-8.758914],[4.817614,7.633850],[-7.629474,-5.149691],[1.832636,-0.694836],[2.566561,-0.113500],[-5.060177,-2.416850],[1.403909,-9.130360],[-4.975415,3.217281],[-4.040801,8.934134],[2.543349,-0.056026],[-1.616742,9.532186],[0.769318,-0.223240],[-8.935781,-5.015997],[8.021062,-7.668924],[8.258022,-9.396697],[-9.828492,-7.096274],[3.097291,1.994315],[7.439527,4.064628],[-3.788964,3.044430],[-0.224737,-7.311403],[-2.198192,7.181892],[2.875734,9.790819],[-7.577182,5.357594],[8.468825,7.651526],[7.861835,0.242974],[-5.593402,7.077343],[3.576646,0.658680],[-8.980382,-7.118161],[-2.418646,-4.872431],[1.687529,-2.782050],[4.151035,0.174035],[-0.011973,-5.976732],[9.538569,-4.511362],[-7.682230,-4.505107],[-4.895830,9.198751],[1.126489,3.999548],[-7.199627,1.719485],[6.489704,7.535393],[8.859653,1.788148],[-2.292208,-8.227913],[1.257527,3.856198],[-7.468215,-9.656305],[9.390893,9.666682],[9.980163,2.978366],[7.997664,-2.265767],[-3.939742,1.766993],[-1.234409,3.340272],[-6.240366,-0.491722],[-0.203220,7.052874],[1.148070,6.750428],[-4.178860,6.744411],[-8.679218,1.544633],[2.133696,-7.907700],[5.496339,-6.416003],[6.023758,-3.276264],[8.526332,0.296378],[7.947771,-4.297033],[-0.415749,1.148629],[-1.961364,7.188159],[5.531621,-8.830789],[-1.403307,3.900963],[3.110462,4.171260],[3.943293,-6.111156],[-5.542007,2.752353],[0.940732,-1.636221],[8.073627,-1.790560],[-5.631100,-3.304813],[-6.539365,-3.956595],[-2.383141,-8.935057],[1.427025,-3.049985],[-1.188643,8.219645],[-5.311607,-2.622580],[-8.638872,-2.173630],[-0.937938,-3.594640],[-4.964607,4.030421],[1.446873,7.783588],[1.354355,2.528886],[5.993978,4.703399],[7.794030,-9.434267],[5.618335,0.946859],[9.383827,-5.078543],[-3.844341,-0.269980],[3.766392,6.071789],[4.292655,-2.641709],[-3.534914,-7.850767],[5.344638,5.667852],[-3.095837,0.122951],[-8.077824,-7.999589],[-5.934817,-5.787902],[7.078792,1.214805],[-9.805269,4.805002],[2.943635,-8.683561],[-5.420908,6.368767],[-6.774729,-3.189057],[-6.505493,1.534414],[-8.405921,-5.489226],[-9.256043,5.844593],[8.476149,-4.001383],[0.940587,8.573821],[-5.744961,-6.048279],[-5.504208,-9.741111],[6.014786,-0.346603],[-6.079677,-4.181093],[6.081434,4.194666],[2.362197,5.002450],[9.072158,-2.351546],[0.404849,5.243611],[2.746735,-2.771482],[4.675401,2.186416],[4.906344,-1.183733],[3.541005,-5.191156],[8.516798,-9.389274],[-1.595863,0.982348],[0.765125,-6.811152],[-9.177289,-0.452820],[-9.852199,4.640236],[-0.566339,-0.532886],[-3.396823,9.310694],[3.976574,-0.930002],[-8.066623,-5.393904],[-2.073106,-8.255751],[3.754551,1.377447],[2.169845,-3.985948],[-8.233035,7.730301],[-0.564504,9.249881],[6.121233,-3.559838],[-3.189486,1.319583],[9.094969,-4.193260],[-7.572201,5.614806],[0.648500,3.613258],[4.380275,-6.632150],[5.909852,-4.190702],[3.888611,9.256249],[-7.442904,-1.789509],[-9.575915,8.991265],[1.243074,-0.471870],[4.932502,0.138272],[-8.895079,8.618731],[-9.199413,9.015522],[6.266481,2.213666],[8.651771,2.938597],[-1.044123,1.694688],[-4.722283,-7.831555],[-0.263189,3.477810],[4.197783,-0.752415],[6.806479,2.542684],[-0.213931,4.093497],[-3.267735,-7.383992],[9.030226,2.888593],[5.557573,1.745605],[-1.498758,4.894051],[-5.984545,-1.106706],[-7.503622,0.168493],[-7.259806,4.674986],[9.837808,-3.033524],[-1.498885,-3.566080],[0.519897,9.709597],[-7.949449,-1.677461],[9.028185,6.228321],[-2.193007,7.669462],[-9.595402,-5.822892],[5.587923,5.405279],[-1.528287,-2.136345],[7.389933,5.475577],[-6.448674,8.497981],[6.318661,7.374342],[-5.152565,-0.016596],[-7.744965,1.805227],[-8.760684,1.801648],[4.200364,-7.882178],[7.947852,-1.627869],[7.735325,1.166872],[1.132948,-8.106212],[-4.979007,4.648075],[-5.746384,4.418075],[1.092480,-1.956455],[-8.281476,5.819901],[-8.632071,2.356444],[-5.926834,-4.396128],[9.382385,0.931725],[5.645926,4.511079],[-0.602527,-5.728277],[-1.967939,3.168323],[-6.468834,4.722528],[-9.940737,-2.349091],[5.503313,-7.754762],[-6.717749,5.486004],[-9.788294,-4.634350],[3.306769,4.434041],[-6.794670,-5.673086],[4.699097,-3.949260],[3.636683,-0.095223],[-3.971673,7.627063],[-0.674232,4.070820],[-6.755870,1.687605],[8.872498,-8.790181],[0.486703,-8.477026],[2.784822,7.731434],[9.157205,-6.949950],[9.131060,-0.351084],[-0.195189,6.037360],[3.276019,6.620061],[-6.660117,-0.482797],[-6.709449,-3.764372],[-4.189776,8.360882],[0.723987,-9.134568],[-7.233794,-3.916723],[5.699521,4.438225],[-9.657479,-9.342120],[2.942388,1.332331],[-5.103608,8.012549],[2.164521,7.662265],[5.819156,0.969195],[3.520403,2.136445],[4.195937,6.618849],[-3.403976,-5.036535],[-0.420452,-1.515346],[-1.915313,3.082547],[6.484251,7.276897],[-2.412412,-6.400116],[8.961451,-7.268051],[1.611426,-7.941105],[7.023866,1.663472],[-5.611076,-8.700147],[-2.631525,-2.806131],[8.739939,-3.013491],[-1.596700,6.627799],[-6.925651,-9.435345],[4.846108,-5.416851],[-3.963912,0.555138],[-2.306921,7.278464],[-9.718215,8.432139],[-7.388388,7.858469],[7.482248,-0.175746],[1.831218,-2.248206],[3.240021,6.277481],[-4.144460,6.976076],[-9.258163,-2.423365],[3.284986,7.592271],[-7.695624,6.162878],[-5.307937,-2.020266],[-8.877333,-9.605899],[-2.577997,2.608043],[9.662257,-9.618034],[-8.459885,7.067415],[7.193835,5.595991],[1.867524,-6.787390],[-4.010640,1.386485],[3.815470,-1.220005],[-1.523912,9.462255],[-1.904319,7.121700],[-0.528013,8.245753],[0.493116,2.420996],[-9.148084,-5.904577],[-2.008505,0.437031],[-7.061227,5.439781],[-7.161643,9.809200],[-4.354389,5.051740],[7.020620,0.687843],[0.903423,-5.803584],[0.171751,1.740703],[-8.896690,1.477772],[-5.701741,7.517096],[7.274391,-3.997339],[7.158365,8.000262],[5.480949,-1.189959],[1.266787,-2.241939],[-7.809181,9.137837],[-3.550900,2.994756],[-8.371451,4.654481],[-2.791020,0.237432],[-6.995960,2.739466],[7.229450,6.360825],[-5.184420,9.529748],[9.782562,-9.232483],[-0.720516,8.570220],[-6.914364,-8.723563],[-0.270965,8.232532],[-6.809384,-1.317632],[6.486757,-0.177737],[-0.083484,6.212709],[5.686131,-5.377478],[-6.564296,-5.954943],[2.394365,5.439796],[8.842065,-8.461675],[-6.215182,-0.783990],[3.338634,9.565067],[-4.569295,2.422877],[3.573660,3.615674],[-6.504097,-2.841075],[-2.730208,7.339132],[-2.572916,4.765599],[-5.214159,1.573352],[-3.258725,-7.280755],[2.220600,-9.725119],[9.157535,-0.189017],[-2.510123,-4.683344],[-6.059841,8.397520],[7.417699,-4.934356],[0.066820,2.875376],[0.573903,-0.495823],[-3.054077,6.849583],[-9.975209,-6.415876],[-1.108384,3.804465],[-0.590987,2.078183],[-2.417719,-1.804660],[7.602511,8.961375],[-8.536187,4.566402],[-9.255886,2.608010],[-4.127190,-4.807477],[-3.187544,-2.681736],[2.187799,2.512463],[6.743810,-6.592822],[8.524624,-2.131142],[0.101871,-5.284395],[-5.793240,-2.791689],[9.206301,-6.140920],[-4.192257,7.329568],[7.503018,2.538594],[9.993990,-7.107693],[8.866238,-6.296633],[4.490630,-9.639242],[-0.488871,3.806866],[-1.225989,2.873407],[4.869764,1.078607],[-5.809665,4.579806],[-9.370218,4.082749],[2.939229,7.869250],[-5.653574,-8.095168],[-2.706556,1.082375],[2.561375,7.553514],[-4.617589,0.631340],[-5.593340,8.069368],[6.161043,-0.163658],[-4.145700,6.025984],[-7.072183,-4.446478],[-1.326541,-5.727488],[7.632650,-3.084206],[-5.926946,-0.976623],[-6.420343,5.184742],[-7.260711,-4.564768],[8.019483,-8.688653],[-4.242483,6.004457],[-9.612876,4.379327],[-0.954999,9.652476],[2.092807,-3.276263],[2.008445,-0.617338],[8.585104,6.436647],[2.725876,3.302230],[-4.861508,-2.595411],[-7.809078,4.361784],[7.959193,6.377340],[1.853597,-2.554539],[-3.959859,-9.231583],[3.972888,-3.135184],[-5.041953,8.861901],[9.008973,-5.820880],[-9.681872,-2.844726],[3.282611,9.299000],[-9.357646,-1.420403],[1.266636,7.438795],[-7.030066,0.111514],[-3.995532,-8.184954],[9.211469,-6.868730],[-1.700751,9.262300],[1.312617,2.041244],[9.547251,-4.017281],[-1.420593,5.417682],[5.925596,8.253277],[1.831182,9.267629],[-3.573343,-0.184726],[6.674084,-3.003339],[-8.574345,-2.990884],[4.908104,-9.324630],[-4.658222,5.559155],[5.884006,-5.123879],[1.439226,-4.855652],[1.854827,-9.867946],[7.366537,6.519703],[-0.691295,4.031576],[8.603887,-7.619588],[6.284664,-8.366079],[6.779754,-5.750782],[-5.217029,8.864816],[3.672258,-2.338562],[-3.392338,-3.577947],[-6.881917,-6.852628],[-3.181838,0.628294],[-3.719177,-8.536779],[-7.003696,7.710423],[-5.485683,-8.987778],[5.332981,-6.789384],[-6.508480,0.705266],[-9.182873,-7.333824],[5.160578,2.353147],[-5.770756,-2.587566],[-1.277817,2.227878],[7.858107,6.505840],[-7.983950,-6.525578],[9.931779,-7.626438],[-3.440640,-1.304861],[-9.264345,9.131221],[-2.754192,5.784367],[2.612539,9.835435],[-6.807017,-2.350991],[9.670768,-0.202719],[5.819589,1.039597],[6.784567,-9.524318],[7.824608,-4.814795],[-2.764277,-9.481217],[-7.916490,2.530135],[7.962791,-2.552139],[4.100829,1.307722],[-5.531757,7.114220],[-2.872715,-2.718288],[-9.277094,9.089099],[-3.337588,5.543163],[4.435531,8.228736],[4.406901,1.909489],[6.240351,7.268705],[-9.030484,8.761635],[-3.599887,2.090774],[-6.640825,-8.353076],[-0.722183,-1.113942],[-8.901576,8.922138],[9.014093,1.857743],[-2.849747,7.400281],[-8.074638,-1.417780],[4.870350,6.771626],[-7.177101,4.326494],[3.251569,-9.318750],[3.621799,-7.964372],[-0.965855,-3.217253],[-8.987726,2.777255],[-7.866938,-5.181224],[2.765095,-9.775179],[-9.127861,-2.260975],[-5.984255,5.602818],[8.648304,7.266103],[1.259382,-8.703807],[-4.977592,9.843321],[0.492908,6.021168],[-3.739443,-2.276886],[-3.932110,-5.026452],[6.798915,-1.206966],[-6.707954,9.636341],[1.905252,5.870171],[-3.325105,-0.103740],[-4.143620,9.599475],[-5.454534,0.535082],[-3.314618,-3.351967],[-5.682879,1.057679],[5.756621,9.032605],[-3.218797,-4.474370],[-6.372828,-1.210482],[4.220687,6.283849],[-7.103818,2.687099],[8.313490,8.427647],[9.379159,-2.402388],[9.035651,3.831533],[3.796327,-4.264034],[2.766493,8.375463],[-2.011364,-3.740545],[6.572798,2.341423],[-0.255709,-0.117002],[-6.980176,3.525706],[-2.368597,7.650579],[9.127662,-3.761397],[-6.630331,-9.973948],[1.763100,7.744059],[5.243853,-0.490212],[5.492640,5.254130],[-5.536755,5.147420],[7.788994,-5.736269],[-9.313544,9.180967],[-7.017757,8.954633],[5.437880,-7.176556],[3.793112,-9.940203],[5.924459,4.436037],[6.342170,-6.324962],[5.163249,-7.187883],[-5.273274,-3.478713],[-8.076354,5.911396],[8.584276,1.334874],[-1.594747,-4.011677],[2.805487,3.612112],[2.144067,3.467559],[9.836629,-9.155324],[1.028649,0.146401],[-1.204575,3.230407],[-2.449075,2.743108],[8.056845,-1.256434],[9.985379,2.210004],[8.847743,9.618131],[-2.419028,0.564602],[9.483116,-9.706951],[-0.866588,-6.681208],[9.349671,-4.999227],[-5.205270,8.454956],[-9.900735,-9.535101],[-1.671325,4.586875],[-8.993908,-6.369347],[8.981743,-4.745811],[-6.948009,-1.473170],[-9.326486,0.665271],[-1.797362,8.023611],[8.541886,-4.248765],[-7.451612,5.646664],[-7.257681,2.875609],[-8.085990,8.956217],[5.313016,-4.386871],[-5.951461,7.664207],[2.911272,-6.128405],[-3.210480,0.289289],[3.670386,9.327706],[-8.162289,-5.470070],[7.197421,1.293350],[-5.581202,-7.977791],[-2.807231,2.858330],[8.244009,3.846288],[7.212133,-5.147095],[-2.485827,8.211940],[4.172857,9.409753],[-6.978075,-3.844245],[8.213978,8.866559],[2.888769,-3.406334],[-5.689396,-6.406385],[-6.178190,-7.057815],[-6.254213,4.219946],[-0.720310,-2.613568],[1.357474,7.845537],[1.804546,-2.626412],[3.476662,-4.039628],[3.065330,-2.141129],[-5.150760,5.656094],[2.863286,-9.700660],[-9.842239,-8.484285],[1.735438,-6.822126],[-8.472966,-2.542823],[1.789565,7.336064],[-0.401750,4.765136],[-7.047111,1.368642],[7.909749,9.597403],[-3.872967,-8.925480],[0.034777,-4.246439],[2.293198,0.675831],[-2.431784,6.118716],[-6.708472,1.147326],[0.659412,-8.751533],[-4.401090,-2.898734],[-7.372795,-3.742282],[-0.690860,0.162478],[3.046825,-4.054151],[-7.794980,0.298981],[8.021583,7.036235],[3.334750,-6.666688],[6.045594,-3.658425],[-4.153042,6.623479],[-7.008871,1.522534],[-0.749887,-8.081748],[-2.331058,-4.117178],[-0.374723,-8.302998],[4.761623,-7.251209],[-0.742012,2.537586],[8.965587,4.874936],[-7.165553,9.367386],[8.336650,9.461362],[7.162953,0.461866],[-1.145311,8.000827],[2.919088,-7.511217],[4.638828,2.888590],[5.142505,9.043198],[-5.389038,-4.126695],[-0.531251,8.955762],[0.295389,2.981372],[-8.748180,-2.615722],[2.265639,-9.130921],[6.444948,9.305379],[1.208520,-4.853399],[9.344472,7.812871],[6.649990,-5.975297],[0.604939,5.210251],[5.270520,-3.048671],[9.706822,-3.071562],[-7.435929,-0.149969],[-9.133104,-9.637426],[-9.695142,-8.325034],[-8.629903,-6.515481],[-7.118363,3.291650],[-8.465821,-4.831365],[-1.672494,-7.541152],[8.556834,-5.940616],[2.101271,-6.875488],[-1.539935,8.116390],[6.105948,-8.835378],[0.482570,3.079682],[3.024258,-4.433017],[4.713141,5.184170],[1.855201,-7.812328],[4.428298,-2.361466],[2.628046,-8.052122],[9.905661,-7.998374],[8.510919,-5.124937],[3.400790,-3.592764],[7.371355,6.337226],[8.995756,-5.875885],[-4.923601,-6.939265],[9.968647,-2.309633],[2.719383,-9.355696],[-4.941781,0.776949],[1.828572,-3.014012],[-7.805705,4.597778],[0.387203,-5.047217],[-8.317884,4.001273],[4.931651,-8.071573],[-7.148727,1.605350],[6.223020,-7.270382],[1.305600,6.862829],[-4.927152,0.819394],[2.783831,-0.933530],[8.044773,6.797651],[0.753049,-7.740849],[-6.253626,2.254938],[5.830689,-7.209654],[-3.817573,-0.070509],[8.148341,-7.975997],[-9.650274,-4.615594],[-8.598278,-8.622813],[7.325373,5.254586],[5.834492,-0.579705],[-3.332778,-7.849507],[-6.696531,-6.094656],[-9.958830,-9.531689],[0.134560,3.367560],[1.692405,0.025101],[-0.833193,5.496824],[7.138347,-5.156161],[4.868999,8.428574],[-7.365937,9.317057],[-5.335192,4.544785],[5.898223,-8.551989],[-5.236435,-8.432545],[4.974720,9.673446],[7.487508,-3.546165],[-9.037574,2.584857],[0.406466,0.048574],[7.594137,-0.532201],[6.482613,-3.980448],[-7.574694,5.217393],[-3.925139,-6.754309],[1.344355,0.402001],[-3.743383,2.815817],[-7.509275,-4.339054],[4.191611,2.954484],[0.493100,3.700292],[1.276333,4.887760],[-4.536312,-5.235985],[-6.239009,6.004811],[-8.621060,-1.883308],[-4.957939,2.313370],[9.333402,-8.121393],[-5.730570,2.290599],[1.038507,-2.986820],[-8.494049,-1.852381],[-4.985198,1.985443],[3.053329,-2.105366],[9.552294,2.818071],[-0.880583,-7.567847],[-1.057281,4.683815],[-8.650245,-3.187833],[9.027763,-6.528234],[-5.504033,-3.217749],[6.417908,7.017435],[-3.822229,-8.307639],[2.124943,7.344170],[2.990185,7.351208],[-2.473646,-6.222435],[5.721177,2.553601],[3.788587,-0.202065],[-5.020287,-8.333222],[-8.485005,3.007163],[9.145990,-4.788935],[8.358571,-8.876069],[9.382762,-8.364363],[-3.539803,-2.283934],[-3.229370,-9.884090],[1.619910,9.924525],[-9.558144,5.075556],[-3.909968,3.859899],[-1.070133,-7.631666],[-0.686288,-0.832114],[-5.911594,6.492331],[3.502869,-6.388240],[8.829059,4.576974],[7.056933,5.163151],[-4.453546,-1.357365],[6.996524,-8.271830],[0.451071,4.344991],[-3.650984,9.251750],[-1.065851,3.526227],[-9.914803,2.277007],[5.257640,-8.726853],[-3.872552,-2.986559],[-1.830917,0.359118],[-5.673228,3.009708],[-2.687344,2.686056],[6.380240,6.471357],[-4.093526,1.633877],[-7.943972,-0.755284],[-6.694674,-8.833397],[-7.780582,1.187625],[2.409851,-8.918982],[4.375997,5.995908],[-9.473141,-9.780952],[1.906782,-6.578833],[-7.328884,-6.827787],[-9.497461,-4.206606],[1.643566,8.670859],[5.206883,-1.950050],[9.006853,5.300400],[-2.108951,-4.971819],[5.662459,-2.530949],[-8.918181,-3.653438],[0.687209,3.335360],[-2.449858,-9.992284],[-5.057840,9.893183],[-4.569660,-4.436930],[9.391524,-1.793480],[-4.541504,-1.551208],[0.338027,-6.323096],[3.134864,8.048622],[7.052582,4.032736],[-9.050160,9.816521],[0.107708,7.005324],[-9.495821,-2.711526],[2.091828,-0.223080],[0.778544,5.069801],[5.235445,5.875453],[2.519822,4.210069],[7.918959,-8.597365],[-2.965144,9.835926],[-3.693353,-2.865379],[-7.247415,-6.412702],[8.347191,-6.082830],[-3.362142,-9.957407],[2.961227,-7.279957],[-2.010603,-3.059057],[-3.284420,2.332714],[-0.738549,9.961729],[5.544713,-4.166443],[-2.349939,1.291380],[1.188431,-7.617250],[-8.920534,8.898251],[-5.656879,-9.934415],[-0.456922,6.249561],[2.521686,7.849519],[0.555688,-3.765031],[-5.746444,-7.396296],[-2.350152,6.366174],[0.961489,3.917165],[-2.405456,-3.166730],[-0.739652,0.600566],[1.881646,-2.860701],[5.289280,-5.200578],[-3.053401,-1.228227],[7.015543,4.893308],[-5.903026,9.507316],[-6.358368,8.100533],[-8.675102,-7.934733],[-0.540891,4.572947],[-6.344824,-9.953342],[2.619091,-1.568329],[-9.733377,5.003590],[7.665871,1.645963],[6.279672,-1.367541],[0.049730,-2.370753],[8.765834,-6.486124],[-0.159966,0.190624],[4.936425,-5.663057],[-2.852812,-7.904871],[8.533633,0.274904],[-2.336080,5.940795],[7.215059,-8.251590],[7.866127,-7.499009],[4.082369,2.789968],[-6.724802,-9.930106],[-5.961758,2.372384],[2.554097,0.736178],[2.833722,9.345558],[2.004771,8.395369],[-8.873124,9.643329],[-0.968349,-1.101265],[6.991918,3.727102],[-8.483585,5.999269],[-2.099066,-5.696350],[4.735786,6.605225],[-2.790208,-7.013861],[7.344928,-2.196320],[3.778395,1.415847],[-5.738193,6.270876],[8.541766,6.386149],[-3.050666,4.816970]], dtype = "float32")#candidate|600|(1344, 2)|const|float32
const_601 = relay.const([[3.672262,0.260250,-7.681259,6.734335,-1.411924,-1.990100,-9.750255,-5.826283],[-1.815450,-6.680023,3.127392,9.757841,-6.705382,-9.234777,3.054645,-4.490805],[0.651446,-5.708755,-7.883785,5.587405,4.086125,-6.543724,-2.489138,9.506867],[1.116723,-5.189299,4.819438,4.935889,3.955796,-2.622793,9.462936,5.689967],[-5.897227,-4.482151,-4.382021,-4.369541,-9.448901,8.485792,7.584421,1.765060],[9.787475,9.736203,1.093890,-3.521254,7.678811,4.741907,4.247897,2.409714],[5.464244,-7.917764,3.605802,6.791169,0.087608,-1.032991,7.908865,5.065769],[-7.101590,2.018407,3.229851,-6.673411,3.711325,-8.042167,-0.664718,-6.468874],[0.490861,3.278131,8.764342,-3.799702,-0.661718,9.353897,8.305712,-3.289581],[-8.398724,2.620472,1.680378,-7.498290,-7.570356,5.313772,-8.322946,-8.893287],[-6.709879,6.464723,-1.609687,-3.319086,-4.152494,-7.066383,1.180560,9.980214],[4.853907,3.426767,-4.144924,5.540943,-9.193286,-0.156067,-9.806317,0.211397],[-4.104119,5.236034,-9.287681,4.096628,0.743402,-5.620738,-7.420955,-8.393788],[9.676249,-0.781508,3.063519,-6.770150,-0.385666,0.216641,0.262708,8.071147],[1.963353,-3.034888,0.640383,-1.864900,6.066720,1.225501,0.200075,2.851983],[1.436923,-4.192824,8.763550,8.087171,8.871671,8.803489,3.352083,4.437073],[1.517133,-1.433018,5.981021,8.624248,-3.628096,5.251826,6.207529,-3.811528],[-4.688876,4.831603,9.316622,-8.681201,3.211563,9.860255,-9.628318,5.345001],[-6.469763,-6.076684,4.535447,-9.909223,-3.217725,1.925585,8.647935,7.072850],[-2.027626,4.034349,2.321359,7.066131,0.948978,7.744877,3.594700,7.809695],[-1.437713,0.633839,-2.796837,5.181908,7.730857,-5.093734,-2.543972,9.024664],[-8.944721,-4.871141,-6.360249,9.596395,-1.202246,3.513012,4.052654,6.171755],[6.761950,8.593249,4.992640,-4.538267,5.321723,5.080798,-4.018098,2.423850],[0.134898,-8.012220,2.613377,-6.832440,-6.361954,0.741221,-1.743560,-1.401699],[0.886203,5.443571,-3.194166,-0.309750,-8.215581,-4.843553,-6.654257,-9.826260],[6.527616,1.861663,-1.016931,8.718385,4.013123,-5.118478,3.263415,2.496475],[5.556910,7.302101,0.699887,7.773009,0.686269,-3.429287,3.723569,-5.470836],[-6.873967,0.073519,1.456247,4.132021,5.345427,-5.817104,-8.237196,-9.563382],[3.463502,-3.690384,9.551388,-3.699146,9.973403,-7.667655,4.052264,6.707578],[-9.201055,-0.877528,4.712858,-0.864742,-2.508049,-4.908425,3.438038,-6.404721],[-5.179473,5.058669,-0.337682,2.543697,-8.461729,6.792420,-8.696703,7.580748],[6.838999,-7.684546,-1.474361,-1.997460,3.443770,4.281854,0.965235,5.708873],[-6.616366,7.474478,2.396538,-4.834111,-9.088240,7.845960,7.771645,5.313076],[3.141578,9.566527,-7.082401,-8.314400,-9.662532,-8.655557,2.528649,-4.683232],[-9.284183,-5.779977,-9.705918,-5.589353,-9.916158,4.396028,-8.675356,8.702111],[-6.185860,7.869086,-8.382991,-2.949765,-0.541596,-0.135489,1.757635,4.589043],[-9.287249,8.972674,7.644435,9.547705,9.688734,3.987822,3.252941,4.916984],[5.078698,-7.510327,-0.028118,5.698804,-4.871968,-4.479450,-4.691160,8.568898],[-6.857993,9.187231,-1.406016,8.481905,8.743728,-2.201276,5.410141,-2.232860],[-4.185807,-4.612027,7.587231,9.490108,9.181762,3.384748,-9.913888,-7.838815],[5.119574,-7.468683,-7.523418,-7.449817,-2.451613,-7.544283,-4.468294,-0.410558],[-7.850000,-9.523793,-1.757022,5.325964,7.154268,9.449455,8.466537,-3.905408],[5.415408,1.921506,9.003765,6.429648,-8.100083,5.739088,-2.761044,7.318120],[0.805316,4.785337,-8.128059,5.524779,5.122251,6.275162,4.685402,-1.414841],[-7.568653,-5.551757,5.381577,2.916450,-9.671337,-7.458061,-4.016287,9.011959],[5.459092,-5.752169,7.015295,-7.801867,-4.940524,2.373149,1.134674,6.251258],[6.879679,5.209887,3.403021,-0.284533,-7.036916,7.838120,5.009128,-9.607770],[0.788111,-8.507279,-9.189875,0.305706,-0.940153,-7.319139,-3.035775,9.380889],[-8.689886,-3.555621,6.651516,4.664384,-0.867683,-1.034848,8.641740,-0.032939],[5.442192,7.955936,0.253266,5.818627,8.808747,-2.633000,8.768368,-6.111754],[-0.610314,6.098647,1.484100,7.663503,1.112698,1.151107,-8.864001,4.108873],[-2.929163,-0.822742,-8.467050,3.542744,9.409846,9.203305,0.240273,-0.791300],[8.551774,3.256776,-4.646283,-8.014112,5.512332,-5.570401,9.409524,8.291321],[-0.758478,-7.069197,0.503808,0.481370,8.772139,0.523574,-6.379412,-3.446980],[-1.943248,-6.918179,7.854024,-0.228330,4.965558,-9.018001,1.945071,-0.169435],[8.470087,-6.389462,6.738480,-9.740735,-3.525077,1.685958,0.860533,-1.812286],[-6.446619,0.079987,1.888627,-4.784246,-0.691730,-6.390601,-8.314354,-1.489088],[8.183032,1.620732,-6.118889,8.297969,9.442816,3.333337,-1.331788,-1.051200],[-3.488450,-8.091461,-9.285889,-3.445836,-8.510918,-5.110302,-8.190041,-9.968946],[1.935852,-6.397053,3.286816,-7.208833,-6.608254,-9.342075,-9.163241,3.995370],[-4.126125,-1.999736,-6.372056,9.630467,2.910275,-2.569781,-6.994439,9.575988],[-9.714791,6.145915,8.050022,-7.693285,5.556521,6.144853,-7.541475,5.403849],[-9.934559,4.130586,-9.737597,6.863807,-0.403300,3.360992,6.409253,-8.595207],[-6.939587,2.561136,5.566966,-2.384874,-9.886893,-1.376892,-1.832601,7.250549],[-5.782455,-2.455735,-1.444352,-0.826425,9.820554,3.287472,5.387458,-9.481375],[-0.612636,8.684040,8.876795,-0.586226,5.727945,-6.507111,-2.933233,0.412992],[-9.164646,-3.834122,8.717197,1.557113,-7.845948,9.082524,-8.718517,-7.652861],[-2.197732,0.432030,4.964770,5.161089,-5.993720,-8.595008,-5.564952,0.366230],[7.246116,2.545219,9.539529,1.500495,9.216595,9.072594,-5.287681,-3.246090],[6.654607,0.055812,-3.906067,-9.957493,-0.564436,9.029523,-0.198251,-6.845214],[-4.122432,-2.720683,-7.716946,-0.018182,0.585851,-4.242664,1.983626,-3.117775],[-1.751808,4.544933,-5.107211,0.962523,-2.004215,2.786592,-0.681244,8.288594]], dtype = "float32")#candidate|601|(72, 8)|const|float32
call_599 = relay.TupleGetItem(func_513_call(relay.reshape(const_600.astype('float32'), [14, 16, 12]), relay.reshape(const_601.astype('float32'), [576,]), ), 0)
call_602 = relay.TupleGetItem(func_517_call(relay.reshape(const_600.astype('float32'), [14, 16, 12]), relay.reshape(const_601.astype('float32'), [576,]), ), 0)
func_90_call = mod.get_global_var('func_90')
func_94_call = mutated_mod.get_global_var('func_94')
var_616 = relay.var("var_616", dtype = "bool", shape = (45,))#candidate|616|(45,)|var|bool
var_617 = relay.var("var_617", dtype = "bool", shape = (720,))#candidate|617|(720,)|var|bool
call_615 = func_90_call(relay.reshape(var_616.astype('bool'), [15, 1, 3]), relay.reshape(var_617.astype('bool'), [15, 16, 3]), )
call_618 = func_90_call(relay.reshape(var_616.astype('bool'), [15, 1, 3]), relay.reshape(var_617.astype('bool'), [15, 16, 3]), )
output = relay.Tuple([bop_582,call_588,uop_596,call_599,const_600,const_601,call_615,var_616,var_617,])
output2 = relay.Tuple([bop_585,call_589,uop_598,call_602,const_600,const_601,call_618,var_616,var_617,])
func_620 = relay.Function([var_557,var_616,var_617,], output)
mod['func_620'] = func_620
mod = relay.transform.InferType()(mod)
var_621 = relay.var("var_621", dtype = "float32", shape = (7, 11, 10))#candidate|621|(7, 11, 10)|var|float32
var_622 = relay.var("var_622", dtype = "bool", shape = (45,))#candidate|622|(45,)|var|bool
var_623 = relay.var("var_623", dtype = "bool", shape = (720,))#candidate|623|(720,)|var|bool
output = func_620(var_621,var_622,var_623,)
func_624 = relay.Function([var_621,var_622,var_623,], output)
mutated_mod['func_624'] = func_624
mutated_mod = relay.transform.InferType()(mutated_mod)
func_286_call = mod.get_global_var('func_286')
func_288_call = mutated_mod.get_global_var('func_288')
call_661 = relay.TupleGetItem(func_286_call(), 0)
call_662 = relay.TupleGetItem(func_288_call(), 0)
output = relay.Tuple([call_661,])
output2 = relay.Tuple([call_662,])
func_663 = relay.Function([], output)
mod['func_663'] = func_663
mod = relay.transform.InferType()(mod)
output = func_663()
func_664 = relay.Function([], output)
mutated_mod['func_664'] = func_664
mutated_mod = relay.transform.InferType()(mutated_mod)
const_720 = relay.const([[[-6.284155,-3.320057,-4.086419,1.972797,7.402988],[-6.051077,2.362202,8.791998,-3.465887,2.231859],[-3.659547,-2.152472,1.994605,-3.676177,9.366736],[-5.681245,3.730865,-2.157413,9.510228,2.527750],[-1.562757,0.538677,9.639936,-7.041364,4.334872]],[[-5.891241,7.548163,5.764527,-1.265356,-6.147669],[8.442964,6.354216,1.620570,-4.179165,-9.905773],[-7.299295,-2.997848,-2.705906,-6.375947,3.377620],[1.586541,7.002272,1.183558,6.143812,-8.401492],[5.220115,-0.838404,9.005020,-5.146237,2.635286]],[[4.327129,4.730277,0.350889,-2.218215,-4.580465],[1.833954,7.551404,2.692339,-2.279434,-4.946112],[-3.163043,-5.139388,6.137258,-3.056597,-7.834154],[-7.695144,0.398263,0.444266,2.125131,3.050859],[0.739274,9.079640,5.611969,8.875612,9.625236]]], dtype = "float64")#candidate|720|(3, 5, 5)|const|float64
uop_721 = relay.cos(const_720.astype('float64')) # shape=(3, 5, 5)
bop_725 = relay.bitwise_xor(uop_721.astype('int32'), relay.reshape(const_720.astype('int32'), relay.shape_of(uop_721))) # shape=(3, 5, 5)
bop_730 = relay.logical_or(const_720.astype('bool'), relay.reshape(bop_725.astype('bool'), relay.shape_of(const_720))) # shape=(3, 5, 5)
bop_735 = relay.bitwise_and(bop_725.astype('uint16'), relay.reshape(const_720.astype('uint16'), relay.shape_of(bop_725))) # shape=(3, 5, 5)
uop_753 = relay.atanh(uop_721.astype('float32')) # shape=(3, 5, 5)
uop_761 = relay.asin(uop_753.astype('float32')) # shape=(3, 5, 5)
bop_774 = relay.divide(uop_761.astype('float32'), relay.reshape(bop_730.astype('float32'), relay.shape_of(uop_761))) # shape=(3, 5, 5)
output = relay.Tuple([bop_735,bop_774,])
output2 = relay.Tuple([bop_735,bop_774,])
func_777 = relay.Function([], output)
mod['func_777'] = func_777
mod = relay.transform.InferType()(mod)
output = func_777()
func_778 = relay.Function([], output)
mutated_mod['func_778'] = func_778
mutated_mod = relay.transform.InferType()(mutated_mod)
func_777_call = mod.get_global_var('func_777')
func_778_call = mutated_mod.get_global_var('func_778')
call_844 = relay.TupleGetItem(func_777_call(), 0)
call_845 = relay.TupleGetItem(func_778_call(), 0)
output = call_844
output2 = call_845
func_849 = relay.Function([], output)
mod['func_849'] = func_849
mod = relay.transform.InferType()(mod)
output = func_849()
func_850 = relay.Function([], output)
mutated_mod['func_850'] = func_850
mutated_mod = relay.transform.InferType()(mutated_mod)
const_854 = relay.const([[[False,False,False,False,False,True,True,True]],[[False,True,True,False,True,True,True,True]],[[False,True,True,True,False,False,True,False]],[[True,False,False,True,False,True,True,False]],[[True,True,True,False,False,False,True,False]],[[False,True,False,True,False,True,False,False]],[[False,False,False,False,False,True,True,True]],[[True,True,False,True,False,True,False,True]],[[False,True,True,False,True,True,False,True]],[[False,False,True,False,False,True,True,False]],[[True,True,True,True,False,False,False,False]],[[True,False,True,True,True,True,False,True]],[[False,False,True,False,True,True,True,True]],[[False,False,True,False,False,False,False,True]],[[True,True,True,False,True,True,False,False]]], dtype = "bool")#candidate|854|(15, 1, 8)|const|bool
var_855 = relay.var("var_855", dtype = "bool", shape = (15, 7, 8))#candidate|855|(15, 7, 8)|var|bool
bop_856 = relay.logical_or(const_854.astype('bool'), var_855.astype('bool')) # shape=(15, 7, 8)
var_869 = relay.var("var_869", dtype = "bool", shape = (15, 7, 8))#candidate|869|(15, 7, 8)|var|bool
bop_870 = relay.greater(bop_856.astype('bool'), relay.reshape(var_869.astype('bool'), relay.shape_of(bop_856))) # shape=(15, 7, 8)
bop_876 = relay.logical_and(bop_856.astype('bool'), const_854.astype('bool')) # shape=(15, 7, 8)
uop_883 = relay.acosh(bop_856.astype('float32')) # shape=(15, 7, 8)
func_351_call = mod.get_global_var('func_351')
func_355_call = mutated_mod.get_global_var('func_355')
const_891 = relay.const([False,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,False,True,True,False,True,True,True,False,True,True,True,True,False,False,True,False,False,True,True,True,False,False,False,True,True,False,True,True,False], dtype = "bool")#candidate|891|(45,)|const|bool
var_892 = relay.var("var_892", dtype = "bool", shape = (2, 360))#candidate|892|(2, 360)|var|bool
call_890 = relay.TupleGetItem(func_351_call(relay.reshape(const_891.astype('bool'), [45,]), relay.reshape(var_892.astype('bool'), [720, 1]), ), 1)
call_893 = relay.TupleGetItem(func_355_call(relay.reshape(const_891.astype('bool'), [45,]), relay.reshape(var_892.astype('bool'), [720, 1]), ), 1)
uop_894 = relay.log(uop_883.astype('float64')) # shape=(15, 7, 8)
output = relay.Tuple([bop_870,bop_876,call_890,const_891,var_892,uop_894,])
output2 = relay.Tuple([bop_870,bop_876,call_893,const_891,var_892,uop_894,])
func_909 = relay.Function([var_855,var_869,var_892,], output)
mod['func_909'] = func_909
mod = relay.transform.InferType()(mod)
var_910 = relay.var("var_910", dtype = "bool", shape = (15, 7, 8))#candidate|910|(15, 7, 8)|var|bool
var_911 = relay.var("var_911", dtype = "bool", shape = (15, 7, 8))#candidate|911|(15, 7, 8)|var|bool
var_912 = relay.var("var_912", dtype = "bool", shape = (2, 360))#candidate|912|(2, 360)|var|bool
output = func_909(var_910,var_911,var_912,)
func_913 = relay.Function([var_910,var_911,var_912,], output)
mutated_mod['func_913'] = func_913
mutated_mod = relay.transform.InferType()(mutated_mod)
func_777_call = mod.get_global_var('func_777')
func_778_call = mutated_mod.get_global_var('func_778')
call_1038 = relay.TupleGetItem(func_777_call(), 1)
call_1039 = relay.TupleGetItem(func_778_call(), 1)
func_777_call = mod.get_global_var('func_777')
func_778_call = mutated_mod.get_global_var('func_778')
call_1054 = relay.TupleGetItem(func_777_call(), 0)
call_1055 = relay.TupleGetItem(func_778_call(), 0)
func_663_call = mod.get_global_var('func_663')
func_664_call = mutated_mod.get_global_var('func_664')
call_1057 = relay.TupleGetItem(func_663_call(), 0)
call_1058 = relay.TupleGetItem(func_664_call(), 0)
func_195_call = mod.get_global_var('func_195')
func_198_call = mutated_mod.get_global_var('func_198')
var_1064 = relay.var("var_1064", dtype = "float32", shape = (576,))#candidate|1064|(576,)|var|float32
call_1063 = relay.TupleGetItem(func_195_call(relay.reshape(var_1064.astype('float32'), [16, 12, 3]), relay.reshape(var_1064.astype('float32'), [16, 12, 3]), ), 0)
call_1065 = relay.TupleGetItem(func_198_call(relay.reshape(var_1064.astype('float32'), [16, 12, 3]), relay.reshape(var_1064.astype('float32'), [16, 12, 3]), ), 0)
func_909_call = mod.get_global_var('func_909')
func_913_call = mutated_mod.get_global_var('func_913')
const_1068 = relay.const([True,False,True,False,False,True,False,False,True,False,False,False,True,False,False,False,True,True,False,False,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,False,False,False,False,True,True,False,False,True,True,True,True,True,True,True,True,False,True,True,False,True,True,False,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,False,False,True,True,True,False,True,False,False,True,True,True,True,True,False,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,True,True,False,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,True,False,True,False,True,True,False,True,True,False,True,False,True,False,False,True,True,False,False,True,False,False,False,False,True,True,True,False,False,True,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,True,True,False,True,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,True,True,False,False,True,False,False,False,True,False,True,False,False,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,False,True,True,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,True,True,True,False,True,False,True,False,False,True,True,True,False,True,False,False,True,True,False,True,False,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,True,False,False,False,False,True,True,False,False,True,True,False,False,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,False,True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,True,False,False,False,True,True,True,True,False,True,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,True,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,True,False,True,False,False,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,False,False,False,True,False,True,True,True,False,False,True,True,False,False,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,False,True,False,True,True,False,False,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,False,False,True,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,False,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,False,False,True,True,False,True,False,True,True,False,True,False,True,True,True,False,True,False,True,True,False,True,True,True,False,True,False,True,False,True,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,False,False,False,False,True,True,False,False,False,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,False,False,False,False,True,False,True,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,True,True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,False,False,False,False,False,False,True], dtype = "bool")#candidate|1068|(840,)|const|bool
var_1069 = relay.var("var_1069", dtype = "bool", shape = (720,))#candidate|1069|(720,)|var|bool
call_1067 = relay.TupleGetItem(func_909_call(relay.reshape(const_1068.astype('bool'), [15, 7, 8]), relay.reshape(const_1068.astype('bool'), [15, 7, 8]), relay.reshape(var_1069.astype('bool'), [2, 360]), ), 1)
call_1070 = relay.TupleGetItem(func_913_call(relay.reshape(const_1068.astype('bool'), [15, 7, 8]), relay.reshape(const_1068.astype('bool'), [15, 7, 8]), relay.reshape(var_1069.astype('bool'), [2, 360]), ), 1)
func_351_call = mod.get_global_var('func_351')
func_355_call = mutated_mod.get_global_var('func_355')
const_1089 = relay.const([True,False,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,True,False,False,True,False,True,True,False,True,True,False,False,True,True,True,True,True,False,False,True,False,False,False,False,False], dtype = "bool")#candidate|1089|(45,)|const|bool
call_1088 = relay.TupleGetItem(func_351_call(relay.reshape(const_1089.astype('bool'), [45,]), relay.reshape(var_1069.astype('bool'), [720, 1]), ), 3)
call_1090 = relay.TupleGetItem(func_355_call(relay.reshape(const_1089.astype('bool'), [45,]), relay.reshape(var_1069.astype('bool'), [720, 1]), ), 3)
func_849_call = mod.get_global_var('func_849')
func_850_call = mutated_mod.get_global_var('func_850')
call_1092 = func_849_call()
call_1093 = func_849_call()
func_777_call = mod.get_global_var('func_777')
func_778_call = mutated_mod.get_global_var('func_778')
call_1097 = relay.TupleGetItem(func_777_call(), 0)
call_1098 = relay.TupleGetItem(func_778_call(), 0)
func_351_call = mod.get_global_var('func_351')
func_355_call = mutated_mod.get_global_var('func_355')
call_1108 = relay.TupleGetItem(func_351_call(relay.reshape(const_1089.astype('bool'), [45,]), relay.reshape(call_1088.astype('bool'), [720, 1]), ), 2)
call_1109 = relay.TupleGetItem(func_355_call(relay.reshape(const_1089.astype('bool'), [45,]), relay.reshape(call_1088.astype('bool'), [720, 1]), ), 2)
func_849_call = mod.get_global_var('func_849')
func_850_call = mutated_mod.get_global_var('func_850')
call_1115 = func_849_call()
call_1116 = func_849_call()
output = relay.Tuple([call_1038,call_1054,call_1057,call_1063,var_1064,call_1067,const_1068,var_1069,call_1088,const_1089,call_1092,call_1097,call_1108,call_1115,])
output2 = relay.Tuple([call_1039,call_1055,call_1058,call_1065,var_1064,call_1070,const_1068,var_1069,call_1090,const_1089,call_1093,call_1098,call_1109,call_1116,])
func_1120 = relay.Function([var_1064,var_1069,], output)
mod['func_1120'] = func_1120
mod = relay.transform.InferType()(mod)
mutated_mod['func_1120'] = func_1120
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1120_call = mutated_mod.get_global_var('func_1120')
var_1122 = relay.var("var_1122", dtype = "float32", shape = (576,))#candidate|1122|(576,)|var|float32
var_1123 = relay.var("var_1123", dtype = "bool", shape = (720,))#candidate|1123|(720,)|var|bool
call_1121 = func_1120_call(var_1122,var_1123,)
output = call_1121
func_1124 = relay.Function([var_1122,var_1123,], output)
mutated_mod['func_1124'] = func_1124
mutated_mod = relay.transform.InferType()(mutated_mod)
func_777_call = mod.get_global_var('func_777')
func_778_call = mutated_mod.get_global_var('func_778')
call_1211 = relay.TupleGetItem(func_777_call(), 1)
call_1212 = relay.TupleGetItem(func_778_call(), 1)
uop_1218 = relay.asinh(call_1211.astype('float64')) # shape=(3, 5, 5)
uop_1220 = relay.asinh(call_1212.astype('float64')) # shape=(3, 5, 5)
output = relay.Tuple([uop_1218,])
output2 = relay.Tuple([uop_1220,])
func_1221 = relay.Function([], output)
mod['func_1221'] = func_1221
mod = relay.transform.InferType()(mod)
mutated_mod['func_1221'] = func_1221
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1221_call = mutated_mod.get_global_var('func_1221')
call_1222 = func_1221_call()
output = call_1222
func_1223 = relay.Function([], output)
mutated_mod['func_1223'] = func_1223
mutated_mod = relay.transform.InferType()(mutated_mod)
func_777_call = mod.get_global_var('func_777')
func_778_call = mutated_mod.get_global_var('func_778')
call_1227 = relay.TupleGetItem(func_777_call(), 0)
call_1228 = relay.TupleGetItem(func_778_call(), 0)
uop_1229 = relay.cosh(call_1227.astype('float64')) # shape=(3, 5, 5)
uop_1231 = relay.cosh(call_1228.astype('float64')) # shape=(3, 5, 5)
bop_1236 = relay.maximum(call_1227.astype('uint32'), relay.reshape(uop_1229.astype('uint32'), relay.shape_of(call_1227))) # shape=(3, 5, 5)
bop_1239 = relay.maximum(call_1228.astype('uint32'), relay.reshape(uop_1231.astype('uint32'), relay.shape_of(call_1228))) # shape=(3, 5, 5)
func_351_call = mod.get_global_var('func_351')
func_355_call = mutated_mod.get_global_var('func_355')
const_1256 = relay.const([True,False,False,True,True,True,False,False,False,True,True,False,False,False,False,False,True,True,True,False,True,False,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,True,False,False,True,True,True], dtype = "bool")#candidate|1256|(45,)|const|bool
var_1257 = relay.var("var_1257", dtype = "bool", shape = (720,))#candidate|1257|(720,)|var|bool
call_1255 = relay.TupleGetItem(func_351_call(relay.reshape(const_1256.astype('bool'), [45,]), relay.reshape(var_1257.astype('bool'), [720, 1]), ), 2)
call_1258 = relay.TupleGetItem(func_355_call(relay.reshape(const_1256.astype('bool'), [45,]), relay.reshape(var_1257.astype('bool'), [720, 1]), ), 2)
output = relay.Tuple([bop_1236,call_1255,const_1256,var_1257,])
output2 = relay.Tuple([bop_1239,call_1258,const_1256,var_1257,])
func_1263 = relay.Function([var_1257,], output)
mod['func_1263'] = func_1263
mod = relay.transform.InferType()(mod)
mutated_mod['func_1263'] = func_1263
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1264 = relay.var("var_1264", dtype = "bool", shape = (720,))#candidate|1264|(720,)|var|bool
func_1263_call = mutated_mod.get_global_var('func_1263')
call_1265 = func_1263_call(var_1264)
output = call_1265
func_1266 = relay.Function([var_1264], output)
mutated_mod['func_1266'] = func_1266
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1366 = relay.const([[[-5,-4,5,9,-3,3,-5,-7,2,-6,-4,10,-4,-2,-4,-4],[3,1,10,-7,-10,4,-3,-8,10,4,6,8,8,4,-2,-2],[-10,2,4,-2,-2,-8,7,1,-3,-3,-3,-6,-1,-3,-1,-6],[10,3,-9,-8,1,-9,-3,8,-7,4,-2,-1,1,5,-10,6],[-1,4,2,-5,8,-3,-2,9,-4,1,3,8,-5,9,6,-3],[-2,10,-7,-9,7,-7,5,-10,9,4,3,-6,-6,2,-10,-2],[-4,-10,-7,7,3,5,-8,-6,8,8,1,-10,1,-3,-8,5]],[[7,-4,-6,-8,-3,-6,10,7,-3,1,-1,3,4,-2,10,8],[-5,-10,1,8,3,-6,-8,-4,8,-5,8,-10,3,-9,-1,10],[7,-5,-10,-2,-10,7,-1,-9,6,-9,-3,7,3,10,-2,10],[-2,8,1,-6,-10,7,6,4,1,6,-4,-1,-10,-3,-3,10],[1,9,9,10,-10,1,-4,-10,10,-10,-1,-3,4,-1,-10,-2],[10,2,-9,-1,9,9,-6,-10,-2,-1,1,-4,-2,2,8,3],[-7,1,7,-9,3,2,4,8,-2,1,-4,6,9,-8,-2,-9]],[[7,-7,10,-1,-3,-2,4,-4,-8,-10,7,-6,4,7,6,6],[-4,10,-10,-6,-5,-7,10,-5,-6,1,-1,-4,-3,-4,5,-4],[5,-4,6,-6,-10,-10,-6,-9,10,-8,6,-7,-10,-2,2,-5],[-10,10,9,-7,-2,-9,3,-3,-5,5,2,4,4,-9,2,1],[-1,9,10,-8,4,1,3,-10,4,4,9,7,4,10,-10,-7],[4,10,2,6,-5,-3,10,9,-1,7,-10,5,-2,7,6,2],[2,5,2,-1,-8,-3,10,-2,4,-2,6,8,10,2,1,-7]],[[-8,6,2,4,2,10,-1,4,4,10,5,9,-3,-3,-7,-5],[1,-4,9,-6,-7,-4,9,-4,7,-4,-1,-10,-6,-9,3,9],[-7,8,-10,8,1,8,1,-4,9,9,-4,6,-1,-4,-1,10],[-5,6,3,5,-6,-5,-6,-3,8,6,-2,2,7,10,9,8],[8,-1,5,-4,-10,8,-9,-2,-5,-9,-1,4,8,-6,6,3],[7,5,-10,3,-2,-8,1,8,-8,-7,-9,-7,-7,-4,-10,-6],[-2,8,-4,4,1,-4,3,2,-8,-2,-2,-4,5,-1,-6,9]]], dtype = "uint32")#candidate|1366|(4, 7, 16)|const|uint32
var_1367 = relay.var("var_1367", dtype = "uint32", shape = (4, 7, 16))#candidate|1367|(4, 7, 16)|var|uint32
bop_1368 = relay.right_shift(const_1366.astype('uint32'), relay.reshape(var_1367.astype('uint32'), relay.shape_of(const_1366))) # shape=(4, 7, 16)
output = relay.Tuple([bop_1368,])
output2 = relay.Tuple([bop_1368,])
func_1374 = relay.Function([var_1367,], output)
mod['func_1374'] = func_1374
mod = relay.transform.InferType()(mod)
var_1375 = relay.var("var_1375", dtype = "uint32", shape = (4, 7, 16))#candidate|1375|(4, 7, 16)|var|uint32
output = func_1374(var_1375)
func_1376 = relay.Function([var_1375], output)
mutated_mod['func_1376'] = func_1376
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1390 = relay.var("var_1390", dtype = "int8", shape = (9, 15, 4))#candidate|1390|(9, 15, 4)|var|int8
var_1391 = relay.var("var_1391", dtype = "int8", shape = (9, 15, 4))#candidate|1391|(9, 15, 4)|var|int8
bop_1392 = relay.bitwise_or(var_1390.astype('int8'), relay.reshape(var_1391.astype('int8'), relay.shape_of(var_1390))) # shape=(9, 15, 4)
bop_1400 = relay.left_shift(bop_1392.astype('int16'), relay.reshape(var_1391.astype('int16'), relay.shape_of(bop_1392))) # shape=(9, 15, 4)
func_1120_call = mod.get_global_var('func_1120')
func_1124_call = mutated_mod.get_global_var('func_1124')
const_1430 = relay.const([[-1.201801,2.960464,1.241643,-8.790462,-1.960859,8.474588,7.809733,-6.726667,-2.060589,-0.495816,4.745713,-3.974845,-1.692322,-8.892120,-6.903444,5.462013],[7.879205,-9.582722,8.937098,2.767098,-9.930445,6.650215,3.518442,3.269656,-7.563262,1.620781,2.902864,-7.537641,9.380401,-8.830555,-6.837419,6.649981],[-5.228718,-2.201166,-9.862967,-3.863812,4.069063,-8.905684,3.160861,-0.595656,-0.502805,-4.097281,0.764177,0.327386,7.783369,-9.345392,-5.540638,-9.178951],[0.329337,-8.998516,-6.807714,-6.060336,5.455449,-4.341300,-4.208953,-6.509001,-0.025551,3.864573,9.065653,-9.777348,-1.740684,-0.116141,-5.965005,-2.439998],[-5.024097,-3.871502,0.286631,-3.822775,5.988812,3.092273,4.329946,-3.398380,-6.999106,7.481888,7.348267,4.022420,-9.547027,-7.939855,-5.094643,1.280027],[0.179638,9.718919,-3.524134,2.830068,-3.731925,-8.889523,-2.171918,4.107310,-1.319532,-5.275877,-6.728395,8.671460,-2.771775,-6.127719,-8.422963,0.587057],[6.577946,-3.161666,-7.017924,7.228562,4.873949,-3.222948,3.627061,-1.670614,-2.984768,6.591495,-8.082622,9.647344,-6.086889,1.623502,2.926693,-1.545829],[5.286624,3.898293,8.846696,-6.695309,-7.937329,-2.977380,-7.947021,9.047929,-2.890809,-9.118160,0.520331,0.504323,8.495196,8.108790,8.697034,6.440648],[-0.031125,-0.547160,7.865049,-9.052685,0.861447,6.501705,-8.201200,-4.164986,6.066622,8.862742,-7.681851,-2.035812,-9.399321,1.335683,-4.477399,-8.042469],[9.918176,-7.159124,-3.073849,-2.588861,4.765578,4.678656,-2.028360,-8.076949,-4.391889,-4.070578,-5.845539,-2.856422,-3.772351,-9.762050,-5.196862,-8.533346],[0.337412,3.564792,5.255840,0.276145,4.684429,-9.128212,-9.883924,-5.815333,0.890567,-6.512860,3.620534,-6.226431,-2.411063,-2.646288,5.231970,-4.470559],[0.552727,-1.741335,2.341468,-6.238335,5.746764,-4.860942,3.215352,-7.664341,5.036805,5.171917,-6.961793,7.305306,-6.566474,2.872119,-1.410383,7.719750],[3.022083,-4.478890,1.687266,-7.000438,-7.040530,7.454306,4.757387,-0.941770,-2.301874,4.749923,1.391337,3.016412,4.238102,3.830020,-1.188800,1.041102],[9.402150,-1.381242,-1.364462,2.231004,6.124077,5.271775,-8.706659,6.283025,5.077824,1.721102,0.014732,-6.455250,-7.526489,-4.333942,-2.877965,-4.181704],[-6.549516,2.820236,7.544038,8.612771,1.890063,9.536806,-4.121455,-3.791337,-8.524216,-7.670172,-5.552195,-2.109395,-8.252143,3.033367,-4.314772,-8.497489],[-7.516784,-1.045582,-3.408946,-2.349603,-5.966196,-9.313100,-5.848168,-8.126488,-2.970270,1.623177,3.656967,3.114727,-2.350359,6.265407,4.283237,9.477944],[9.649926,4.460167,7.145974,3.204052,-1.917691,-3.279803,-4.223723,9.122990,3.666949,7.262756,-1.925097,7.740989,5.840535,1.223721,-8.622593,-5.842767],[-0.896683,-1.260418,3.542788,5.935352,8.601826,-1.295083,-2.060934,-6.754333,-7.890233,3.514644,6.673861,-8.403500,1.305175,3.347487,-7.341650,7.993043],[4.902174,2.035244,3.831060,-7.131881,-7.486371,-6.576231,-9.593456,2.870111,-9.158052,6.895006,9.671187,-2.198407,-0.480868,-5.658659,9.622472,8.467600],[6.910570,9.473331,-9.483469,2.157010,-2.607372,8.210151,2.415280,-0.421296,1.189771,5.893849,4.857865,1.141883,5.091487,-9.411488,7.221740,7.425051],[-9.363462,2.965759,3.928577,-1.888538,-6.327993,-1.480454,-9.238112,0.004885,9.407019,-3.649984,-8.843336,-2.233157,2.750085,-4.557710,-0.213729,-3.848576],[-6.806515,6.946038,-2.206273,-8.013747,-5.843347,-1.591412,8.626622,-6.256590,-4.598520,6.327127,4.793024,-3.537138,-9.028419,4.429160,3.038883,-7.460532],[-0.006088,3.509053,1.517602,7.080478,-0.228561,-8.829501,-4.131907,-1.707665,1.894850,1.055516,1.618671,6.620180,9.781652,7.293568,-5.479859,-4.295718],[7.662874,-4.763879,9.143217,-8.924781,2.320327,3.092286,-7.083980,6.425845,4.155478,-6.266831,-2.462711,1.302522,-1.714971,-6.207904,-6.293101,9.032235],[-9.519199,-3.624669,-4.601992,-2.564623,5.788122,1.135850,1.165378,4.767235,0.480520,-4.139709,2.497367,3.638138,-7.309051,1.213320,2.188573,-5.544795],[-3.556123,8.791649,-4.857115,-9.641643,-6.362619,6.603363,-8.161112,-6.751888,-0.481858,-6.665671,-2.638506,6.252751,6.934623,1.368969,-2.150530,0.007931],[-5.279410,5.160746,-9.819038,-2.891773,4.785620,-8.011690,-2.903471,7.946922,3.895992,2.067423,-0.498467,-0.704733,9.076902,-6.009480,-3.041233,-0.016298],[-3.441454,9.811862,2.597518,5.304791,8.750478,7.996820,8.409893,-1.299982,-5.693002,-6.155095,-8.452035,-9.989408,3.079773,2.410313,-3.693750,-9.050942],[1.527736,0.017328,-9.487153,7.592388,7.644128,8.037647,-3.575028,5.506024,3.316323,5.287239,8.317124,4.136551,-0.437788,-5.959354,-7.317112,8.213582],[-3.571518,5.185405,-2.708605,-2.799064,4.317777,-7.984637,1.543528,-2.481735,8.335409,-5.588787,7.451453,6.302433,5.015633,8.960002,6.676156,5.022413],[4.433865,-6.615948,-2.978064,3.042857,-3.306004,3.069071,-5.921937,9.717833,2.175148,-6.025415,2.178224,-9.452689,6.640336,2.567818,-4.821628,-8.430689],[5.344998,6.736879,6.336698,6.170274,-2.284002,1.873659,-0.508270,3.806737,-8.340762,-8.335015,1.360863,-3.052361,-8.074023,0.253162,6.995604,2.396063],[-5.698681,-9.726963,1.834325,-3.915888,-4.267596,-0.481758,-2.457478,-4.446962,3.792965,-6.633088,9.549427,2.676390,-9.298534,-3.572391,-7.710023,-6.877308],[1.589217,-0.292218,-6.027506,-0.070918,-9.619930,7.238837,-0.094511,-7.408479,9.776224,5.313202,9.889777,-6.913609,7.064080,1.398823,-7.548747,5.468666],[-9.461454,6.003089,-8.759074,0.021001,-0.582225,5.656221,-0.759836,0.032184,-7.685782,-4.213523,9.177435,-3.328409,-2.744093,5.771017,6.893110,-5.603299],[-6.209420,9.263667,2.137777,-2.988897,5.270443,5.306651,2.665956,5.126832,3.542940,6.563182,2.541053,0.848734,-0.251124,-0.445250,3.910813,9.346112]], dtype = "float32")#candidate|1430|(36, 16)|const|float32
var_1431 = relay.var("var_1431", dtype = "bool", shape = (12, 60))#candidate|1431|(12, 60)|var|bool
call_1429 = relay.TupleGetItem(func_1120_call(relay.reshape(const_1430.astype('float32'), [576,]), relay.reshape(var_1431.astype('bool'), [720,]), ), 4)
call_1432 = relay.TupleGetItem(func_1124_call(relay.reshape(const_1430.astype('float32'), [576,]), relay.reshape(var_1431.astype('bool'), [720,]), ), 4)
const_1433 = relay.const([[[4,-4,7,6],[3,4,-1,3],[-4,-10,8,-3],[-6,-5,-9,6],[8,4,9,-7],[-3,2,8,6],[10,2,1,-4],[2,2,4,-5],[-8,-10,-9,9],[2,8,1,-1],[9,-8,-1,-1],[-4,4,-1,-2],[10,-5,-1,-2],[8,-2,-3,-9],[-8,-5,1,-4]],[[9,3,-9,-8],[-7,1,-9,-2],[3,7,6,-10],[-5,5,-3,1],[7,3,-10,-6],[-5,-6,1,1],[-1,2,4,-4],[-9,5,8,-3],[1,-2,8,-10],[6,-5,-6,-3],[-5,-6,6,-10],[-9,-6,-10,-3],[-6,3,-4,5],[9,-6,-6,-3],[3,4,9,4]],[[-8,4,-1,8],[-1,-1,4,-4],[-6,9,1,-7],[-1,-4,2,8],[-10,7,-1,-1],[7,-9,8,3],[6,-7,6,-9],[-2,7,3,-3],[10,-6,-4,5],[-9,-2,8,10],[-1,-8,9,-2],[-2,-3,6,10],[6,9,3,3],[8,8,5,9],[2,-1,-7,-10]],[[-3,6,10,7],[1,8,-10,7],[-8,-6,-2,-9],[4,-5,-4,-10],[9,8,1,7],[-1,-8,-8,3],[-10,9,5,4],[7,-8,6,7],[3,7,1,8],[1,-5,8,2],[-8,-8,8,-10],[-5,3,-6,7],[8,-5,-9,2],[-8,-6,-6,4],[9,5,-8,-10]],[[3,2,-6,1],[4,2,1,-1],[3,-5,6,-1],[5,-2,-10,6],[8,3,9,-9],[-3,6,6,-3],[7,-8,-1,-9],[6,7,-6,9],[3,9,9,-4],[-10,4,-10,-5],[-7,1,1,-2],[3,-2,4,-4],[-5,-8,-10,5],[-5,-8,-8,-3],[5,2,-5,-4]],[[8,7,9,-9],[-6,-1,9,8],[6,10,-8,-10],[-6,10,9,-2],[-10,-10,-2,-5],[6,-5,-1,3],[-9,-3,4,2],[8,-5,-6,5],[-6,6,4,6],[-7,-8,-6,-8],[-2,3,-6,9],[-7,-2,-9,-8],[2,3,-7,-7],[-10,5,-6,2],[-5,5,8,-5]],[[8,7,-4,2],[-2,3,6,6],[-7,-3,-5,10],[-7,-1,-10,-1],[4,8,4,-4],[-9,-4,7,10],[-2,-6,7,6],[4,1,6,6],[8,9,-6,-6],[2,-7,-1,-4],[1,9,9,-9],[7,-8,-2,6],[-6,3,10,6],[-3,-2,9,9],[-5,7,-6,-6]],[[8,7,-8,-1],[-7,-6,-4,-8],[5,-3,-5,6],[1,-5,-10,1],[7,-8,-2,-7],[1,-6,8,-4],[-4,-9,9,1],[9,-6,-9,6],[6,8,3,5],[-1,-1,-6,1],[-3,-1,6,-10],[-9,3,-5,3],[3,7,7,9],[4,-8,-8,4],[-1,-4,8,1]],[[2,7,-3,7],[2,-9,8,8],[10,4,-6,9],[-3,4,9,-1],[1,6,-10,7],[9,-2,8,8],[-7,7,-9,3],[-1,5,4,9],[-8,9,-10,-10],[4,3,-4,-1],[-3,6,-5,6],[-8,4,-1,-7],[-9,-6,3,-5],[10,1,1,6],[-8,-6,3,-9]]], dtype = "int8")#candidate|1433|(9, 15, 4)|const|int8
bop_1434 = relay.equal(var_1391.astype('bool'), relay.reshape(const_1433.astype('bool'), relay.shape_of(var_1391))) # shape=(9, 15, 4)
func_195_call = mod.get_global_var('func_195')
func_198_call = mutated_mod.get_global_var('func_198')
call_1438 = relay.TupleGetItem(func_195_call(relay.reshape(call_1429.astype('float32'), [16, 12, 3]), relay.reshape(const_1430.astype('float32'), [16, 12, 3]), ), 0)
call_1439 = relay.TupleGetItem(func_198_call(relay.reshape(call_1429.astype('float32'), [16, 12, 3]), relay.reshape(const_1430.astype('float32'), [16, 12, 3]), ), 0)
output = relay.Tuple([bop_1400,call_1429,const_1430,var_1431,bop_1434,call_1438,])
output2 = relay.Tuple([bop_1400,call_1432,const_1430,var_1431,bop_1434,call_1439,])
func_1445 = relay.Function([var_1390,var_1391,var_1431,], output)
mod['func_1445'] = func_1445
mod = relay.transform.InferType()(mod)
var_1446 = relay.var("var_1446", dtype = "int8", shape = (9, 15, 4))#candidate|1446|(9, 15, 4)|var|int8
var_1447 = relay.var("var_1447", dtype = "int8", shape = (9, 15, 4))#candidate|1447|(9, 15, 4)|var|int8
var_1448 = relay.var("var_1448", dtype = "bool", shape = (12, 60))#candidate|1448|(12, 60)|var|bool
output = func_1445(var_1446,var_1447,var_1448,)
func_1449 = relay.Function([var_1446,var_1447,var_1448,], output)
mutated_mod['func_1449'] = func_1449
mutated_mod = relay.transform.InferType()(mutated_mod)
func_286_call = mod.get_global_var('func_286')
func_288_call = mutated_mod.get_global_var('func_288')
call_1476 = relay.TupleGetItem(func_286_call(), 0)
call_1477 = relay.TupleGetItem(func_288_call(), 0)
func_195_call = mod.get_global_var('func_195')
func_198_call = mutated_mod.get_global_var('func_198')
const_1486 = relay.const([[-5.976920,0.161720,5.564296,0.546507,-1.320547,-5.407151,-4.585390,1.993703],[-2.418396,5.449271,-4.856214,7.794967,0.798680,-7.797306,-4.942121,-2.583181],[-2.067314,-6.814519,-2.478776,-6.998429,-2.672535,-3.708065,4.375046,-4.701354],[2.457343,-8.733942,5.428357,-2.180448,-4.593328,-2.100638,-5.626413,7.507316],[-3.144825,-6.915574,-2.039922,9.949305,-4.122822,6.582581,-9.736856,1.513326],[-8.872025,5.046998,-2.385093,-7.015093,-5.097517,6.472376,2.082010,-6.247787],[-5.390469,-0.365822,9.639025,8.907359,5.461011,2.555269,-5.751190,-4.603912],[-6.348489,-1.160396,2.407190,-6.457746,0.230711,-2.628224,-5.394081,4.672855],[-1.190295,7.184936,4.479538,5.080946,-6.849675,-3.730303,0.519451,0.970694],[9.270026,-7.991661,-5.394567,-2.867011,-3.505087,-4.184932,1.013835,-9.054432],[-6.969061,9.730211,-6.972643,-9.534164,6.963821,-8.460652,8.545114,1.327074],[5.073305,-4.433029,-7.886138,-8.373894,3.924129,5.355545,-3.637981,-9.405180],[-1.136681,-8.396299,-7.475265,4.020105,-0.371657,1.391961,3.113845,-9.962217],[-8.720782,-4.624929,1.459486,-5.483107,0.624290,-9.698455,4.293087,-2.441798],[-9.927261,-0.110423,-4.193834,3.934661,1.422046,-6.240325,8.937515,-3.965823],[8.212853,-5.011167,4.072831,-2.075007,-1.206710,-3.700011,9.459392,0.389550],[8.148320,9.389144,2.435201,-2.776045,1.077125,8.123097,7.809508,-8.052434],[-4.302420,-5.702394,4.188041,7.687802,9.698451,1.348933,-0.081951,-5.757350],[4.299963,9.248775,-8.749360,3.681629,4.602936,-2.948420,-3.704346,6.387696],[1.741720,-4.457448,-8.344185,3.900948,6.258410,8.486187,1.276094,-8.666668],[0.584106,-5.329540,8.778281,8.689433,-3.992230,-5.526466,-1.747060,-5.014085],[7.632531,3.689990,-8.614836,7.885161,4.909631,2.947649,-1.932838,0.976658],[-9.225359,-7.055326,-8.401927,-3.236452,6.737017,4.805103,-5.530831,-7.116506],[5.471683,-5.496506,-6.571227,2.390319,-5.954595,-5.600303,-8.658548,-5.162449],[2.693051,0.339755,-5.708693,8.608235,-5.843525,5.858743,-4.895524,-1.630040],[8.938096,8.805192,-9.298653,-1.802534,5.848372,1.968859,-7.708324,-2.565966],[-5.948491,6.537576,9.596148,1.791242,-9.897154,1.693723,-8.808788,-6.944279],[-2.593882,4.552819,-1.755062,8.362324,-0.404412,-8.225503,-3.959918,9.910047],[-7.391200,8.681413,7.447746,4.468035,1.419996,-9.213522,-4.659251,-8.922073],[-4.466387,8.456099,4.792487,-7.363991,6.395591,-6.069036,-0.568168,5.017024],[2.058940,-5.229137,9.735923,-0.039260,-5.279667,-0.106258,8.233814,1.169959],[-5.892333,-6.267066,3.688495,6.352629,3.491076,-5.182904,5.563759,-4.451497],[-1.600591,4.258607,-0.235974,2.722091,-0.738586,0.899860,-9.203300,6.588534],[1.325503,-4.169434,2.996850,-2.891378,2.566079,-7.129969,-3.342084,9.520181],[9.486789,-8.027266,-7.863162,0.761408,1.051477,-7.453586,4.916504,-9.408608],[-3.468576,-2.493080,-1.158265,-8.538115,7.611349,4.746966,-6.884397,6.709791],[3.415057,7.431251,5.043221,7.958864,-4.557704,-4.551410,6.960905,-9.566030],[0.135784,6.669870,8.404637,6.827412,-7.544583,-9.817173,-1.771976,2.123903],[3.156598,5.282517,1.035964,7.624649,8.522271,5.995947,-2.324034,-3.001568],[-9.441367,-1.155180,6.906054,6.577429,-1.912765,-4.452666,1.229573,-1.061252],[6.792833,7.125353,-3.044128,-2.295335,-4.116829,1.357814,5.184449,-9.152189],[5.840891,-6.286870,-9.127527,9.136806,4.026422,2.905231,1.820849,-5.678231],[-0.413060,4.266915,-8.347843,-9.715612,9.225661,-0.575925,5.130289,4.749121],[7.740247,7.665022,9.379668,-9.177229,3.306690,2.480763,3.277568,2.746860],[3.607822,9.643407,-4.510615,-3.222883,4.874979,-6.147583,1.093469,1.046992],[4.713120,-4.908798,6.509656,-3.499109,0.063822,7.577852,5.276350,-1.148486],[6.847226,-9.940366,3.172918,-3.494433,6.188192,5.220773,-7.398944,6.258291],[9.308070,-3.612624,-0.069150,4.466369,-8.689700,8.075033,8.181882,-8.322081],[6.765916,-0.681869,3.014398,9.744610,-4.861362,0.429689,2.076424,-6.743522],[-7.207713,-3.991139,6.767273,-8.524897,-7.005640,0.596329,2.634301,0.021461],[6.650132,5.331849,-9.794113,0.666681,7.494293,4.274352,-4.347684,-1.475328],[-5.920964,8.530391,-2.946714,9.426524,5.287349,0.199436,-2.962904,9.901712],[-3.256041,-8.767616,9.834440,4.243205,-0.127110,-7.211509,7.723350,1.346751],[0.988250,7.446780,9.203273,-4.882045,-3.293583,4.196048,-3.856782,-9.190769],[-7.453331,0.919710,-6.064853,-6.080525,2.704530,6.962388,2.304726,-5.501182],[-8.708020,8.964987,-0.983208,-0.504099,0.868738,5.545888,3.006527,-9.784271],[-4.640187,3.578440,1.217394,8.639007,-7.688421,9.780328,-4.632223,-9.948496],[9.121103,-8.992367,-4.750364,-7.356887,-1.616596,5.730260,8.498460,9.859001],[-0.724445,6.198063,8.078509,-3.218042,0.992677,2.929945,-3.224937,-6.487068],[5.199711,3.336203,-6.993777,7.813317,-8.654179,-6.526608,5.463403,8.797643],[-5.141487,3.846994,-4.785645,-1.496105,7.521367,3.559393,2.819203,3.338335],[-6.560763,-5.646363,2.020404,3.913908,8.177367,6.470378,-5.299593,-9.025644],[7.750603,-1.227188,1.209617,-8.603403,-6.808068,-6.680387,2.658253,9.925047],[6.308318,-9.379279,6.520043,-8.361981,8.510134,7.532182,-0.333021,7.594608],[2.748965,5.403774,-5.103121,9.861180,5.522360,-5.470912,-5.513204,-1.594841],[-6.337289,-5.721226,9.499144,-0.785039,-8.849139,-7.402788,9.856112,8.754318],[6.606846,6.215363,-4.010590,-8.027797,5.345112,-7.550884,-3.642565,6.772043],[-3.700431,0.650027,-8.573679,-2.007993,3.341098,6.044168,-6.262340,-5.749509],[-9.145688,4.260680,-7.125534,-5.590544,8.061341,4.308818,-2.811953,-9.891054],[-1.958775,-8.391038,4.606334,-2.361460,8.038579,9.287282,-4.424603,1.380019],[2.745810,4.021715,-1.626044,7.833877,-8.716699,-6.370438,6.062426,5.416132],[-2.455567,-4.633062,4.132532,-3.223211,2.628790,-2.589970,1.738002,-6.326762]], dtype = "float32")#candidate|1486|(72, 8)|const|float32
call_1485 = relay.TupleGetItem(func_195_call(relay.reshape(const_1486.astype('float32'), [16, 12, 3]), relay.reshape(const_1486.astype('float32'), [16, 12, 3]), ), 0)
call_1487 = relay.TupleGetItem(func_198_call(relay.reshape(const_1486.astype('float32'), [16, 12, 3]), relay.reshape(const_1486.astype('float32'), [16, 12, 3]), ), 0)
output = relay.Tuple([call_1476,call_1485,const_1486,])
output2 = relay.Tuple([call_1477,call_1487,const_1486,])
func_1506 = relay.Function([], output)
mod['func_1506'] = func_1506
mod = relay.transform.InferType()(mod)
output = func_1506()
func_1507 = relay.Function([], output)
mutated_mod['func_1507'] = func_1507
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1506_call = mod.get_global_var('func_1506')
func_1507_call = mutated_mod.get_global_var('func_1507')
call_1537 = relay.TupleGetItem(func_1506_call(), 1)
call_1538 = relay.TupleGetItem(func_1507_call(), 1)
output = call_1537
output2 = call_1538
func_1539 = relay.Function([], output)
mod['func_1539'] = func_1539
mod = relay.transform.InferType()(mod)
mutated_mod['func_1539'] = func_1539
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1539_call = mutated_mod.get_global_var('func_1539')
call_1540 = func_1539_call()
output = call_1540
func_1541 = relay.Function([], output)
mutated_mod['func_1541'] = func_1541
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1542 = relay.var("var_1542", dtype = "float32", shape = (7, 6, 11))#candidate|1542|(7, 6, 11)|var|float32
uop_1543 = relay.tan(var_1542.astype('float32')) # shape=(7, 6, 11)
const_1549 = relay.const([[[-1.139058,-0.926209,9.740260,-8.532905,-9.279791,2.460795,-8.289534,-6.785322,2.977095,7.697403,2.858347],[-7.140647,3.868621,-0.810274,4.935799,9.299197,4.741588,-1.476728,-4.231403,0.895055,5.422987,8.116123],[6.423271,-3.211638,-0.838684,-4.707082,8.522098,5.016218,-0.975743,9.357075,4.274913,3.548051,-3.921528],[8.592686,-4.144951,2.968930,0.791162,7.620618,5.214149,2.512063,9.610612,6.468264,-0.108096,3.720602],[-0.107050,7.414452,-4.975568,-7.483130,-3.313546,4.119488,-1.764347,9.159274,7.190740,-9.277619,-8.142181],[-1.641754,3.976594,-4.905476,-6.365956,-1.339550,2.845574,-1.143145,-9.794996,-0.977796,8.568964,4.779390]],[[6.695632,7.674171,-5.104416,1.506435,-3.466777,-8.296151,9.391512,2.554013,7.341106,0.995119,9.362113],[-7.376814,-6.121172,5.005885,-8.231831,-7.347995,8.227844,-0.647234,4.760062,-0.291925,-0.060566,-4.857562],[-9.350257,7.465541,1.695934,-4.333527,7.325503,3.707916,1.846738,8.498333,5.351075,7.199319,3.032492],[-4.885401,3.826546,-4.281967,-8.460409,-3.583509,3.754216,-0.899799,-1.915876,8.593981,5.674927,3.952727],[1.593124,-3.282988,-6.203658,3.593679,3.486064,4.722895,7.731810,-4.878498,-3.559859,-5.055253,9.195433],[-5.731399,1.362120,0.452518,-8.997509,5.175327,4.737718,8.271930,-2.050691,3.732872,-3.139395,-4.786124]],[[5.852296,4.171181,6.698519,3.410992,-3.059912,-9.660616,0.970701,-3.748138,8.559077,-7.303257,8.534561],[-8.910056,-8.697407,-7.539931,-7.449843,-0.673815,9.124558,2.138569,6.714652,3.668252,7.421285,5.372031],[0.814546,-3.886899,-1.760364,4.614656,-0.727869,4.925173,-4.368483,-1.884034,-5.857484,-7.579130,-0.507261],[1.107981,-0.319815,-0.519200,-9.866778,-7.787267,9.643990,-1.117170,0.704027,-4.633783,-8.308104,5.465138],[6.208632,5.314569,-6.269928,5.011698,-9.473374,2.172920,-2.071222,-8.948748,2.425648,-2.188124,7.989676],[-6.976791,5.608952,1.087334,-3.845239,-4.620989,-6.825927,-0.659382,9.498369,4.375907,-1.516876,-6.532128]],[[-9.850522,9.252113,9.438040,2.993460,6.349179,-7.957841,-1.181512,-1.783399,-0.911621,-2.602335,-1.000174],[6.237943,-2.660949,8.507399,5.566138,9.652722,-1.686447,-9.131996,5.132853,5.489583,9.092667,1.665813],[5.733713,8.529124,-5.775013,-9.824072,-6.542596,-7.240543,-7.147441,9.998760,7.540054,-5.483756,7.241555],[0.557475,-1.742647,9.666312,-8.319200,5.804928,-8.690766,4.329782,-3.788479,-8.140900,-4.851994,6.222602],[-3.401314,-5.783911,-5.804253,-8.378673,0.305739,-7.605643,-6.799213,-2.129654,-1.508083,-5.867744,-6.486973],[1.126868,1.347636,3.984748,-4.284482,-1.259173,7.512321,-4.088052,7.199175,3.575374,-3.490761,-6.699923]],[[-6.011390,-5.348034,-0.697750,5.398255,-0.414364,4.273815,-3.894336,8.591957,-1.434469,-4.946840,7.293164],[6.854492,1.271971,1.919844,-6.760023,-9.554027,-1.162878,1.016954,4.383197,8.965182,6.077450,2.007416],[1.771126,-4.844831,-9.939769,6.261348,1.575483,6.750516,-0.226256,-2.066266,-0.973311,9.125949,9.518535],[-0.992401,4.689273,3.941776,-0.814302,6.185209,3.115695,2.902727,-1.128048,8.737881,6.610046,-5.840765],[-5.008785,-8.936454,1.669183,9.569298,-7.646699,3.589525,-9.992896,-0.434284,1.739021,-9.590592,0.322840],[-6.776121,8.079015,7.004518,-1.721426,-4.746623,5.091898,-2.146541,-4.073897,6.479725,2.047538,-4.882464]],[[3.657066,-6.430751,-4.123763,-2.575224,6.187596,0.463558,-4.103363,9.555228,-7.522165,1.796791,7.526307],[-8.425597,-5.385647,-3.834096,-3.314756,7.276140,-8.904449,-3.688833,-7.209376,-0.718904,-3.700920,-9.633261],[6.051141,0.379404,8.611543,7.765149,-3.512853,-4.528592,7.107063,-1.663220,-6.530778,-2.012167,-7.051294],[0.517771,4.481786,-8.613236,-5.047605,-2.651203,-7.986908,1.526059,8.870770,-7.266422,8.509488,-1.120934],[-6.709530,-5.860131,-9.762132,4.550573,-0.323352,8.630923,-6.278509,7.057098,2.867770,-6.777952,3.011166],[8.141868,-6.751352,9.378679,9.663754,5.251159,-9.432215,-3.610947,-8.250265,5.501314,-2.694362,-7.450942]],[[-0.404295,8.151103,6.946829,-3.276957,-3.746591,8.136960,7.576871,-9.453039,-2.612353,-7.917860,9.770079],[6.825460,-5.940320,-2.030675,-4.764623,-3.228256,-4.847015,-2.591201,8.128932,8.891926,-2.602753,9.142150],[5.638149,-0.672077,1.970976,-9.737872,5.431873,-2.100536,7.186628,6.803193,8.448964,-5.590194,1.325295],[7.141877,5.669918,-6.409377,-9.778201,-7.806814,3.222075,1.186620,0.259251,-2.319103,-5.280843,8.239788],[6.510533,1.104735,-5.084210,6.229571,-2.206877,-5.067612,0.838831,4.178161,-6.285132,3.655705,1.388907],[-9.730062,-9.189260,0.652728,9.148372,-7.462471,0.953844,8.265438,-5.492617,-5.283251,-5.959841,-8.771642]]], dtype = "float32")#candidate|1549|(7, 6, 11)|const|float32
bop_1550 = relay.mod(uop_1543.astype('float64'), relay.reshape(const_1549.astype('float64'), relay.shape_of(uop_1543))) # shape=(7, 6, 11)
func_849_call = mod.get_global_var('func_849')
func_850_call = mutated_mod.get_global_var('func_850')
call_1557 = func_849_call()
call_1558 = func_849_call()
uop_1559 = relay.sqrt(bop_1550.astype('float32')) # shape=(7, 6, 11)
output = relay.Tuple([call_1557,uop_1559,])
output2 = relay.Tuple([call_1558,uop_1559,])
func_1564 = relay.Function([var_1542,], output)
mod['func_1564'] = func_1564
mod = relay.transform.InferType()(mod)
mutated_mod['func_1564'] = func_1564
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1565 = relay.var("var_1565", dtype = "float32", shape = (7, 6, 11))#candidate|1565|(7, 6, 11)|var|float32
func_1564_call = mutated_mod.get_global_var('func_1564')
call_1566 = func_1564_call(var_1565)
output = call_1566
func_1567 = relay.Function([var_1565], output)
mutated_mod['func_1567'] = func_1567
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1506_call = mod.get_global_var('func_1506')
func_1507_call = mutated_mod.get_global_var('func_1507')
call_1574 = relay.TupleGetItem(func_1506_call(), 2)
call_1575 = relay.TupleGetItem(func_1507_call(), 2)
uop_1578 = relay.asinh(call_1574.astype('float64')) # shape=(72, 8)
uop_1580 = relay.asinh(call_1575.astype('float64')) # shape=(72, 8)
bop_1582 = relay.logical_and(uop_1578.astype('bool'), relay.reshape(call_1574.astype('bool'), relay.shape_of(uop_1578))) # shape=(72, 8)
bop_1585 = relay.logical_and(uop_1580.astype('bool'), relay.reshape(call_1575.astype('bool'), relay.shape_of(uop_1580))) # shape=(72, 8)
func_620_call = mod.get_global_var('func_620')
func_624_call = mutated_mod.get_global_var('func_624')
var_1611 = relay.var("var_1611", dtype = "float32", shape = (770,))#candidate|1611|(770,)|var|float32
var_1612 = relay.var("var_1612", dtype = "bool", shape = (45,))#candidate|1612|(45,)|var|bool
var_1613 = relay.var("var_1613", dtype = "bool", shape = (720,))#candidate|1613|(720,)|var|bool
call_1610 = relay.TupleGetItem(func_620_call(relay.reshape(var_1611.astype('float32'), [7, 11, 10]), relay.reshape(var_1612.astype('bool'), [45,]), relay.reshape(var_1613.astype('bool'), [720,]), ), 7)
call_1614 = relay.TupleGetItem(func_624_call(relay.reshape(var_1611.astype('float32'), [7, 11, 10]), relay.reshape(var_1612.astype('bool'), [45,]), relay.reshape(var_1613.astype('bool'), [720,]), ), 7)
output = relay.Tuple([bop_1582,call_1610,var_1611,var_1612,var_1613,])
output2 = relay.Tuple([bop_1585,call_1614,var_1611,var_1612,var_1613,])
func_1629 = relay.Function([var_1611,var_1612,var_1613,], output)
mod['func_1629'] = func_1629
mod = relay.transform.InferType()(mod)
mutated_mod['func_1629'] = func_1629
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1629_call = mutated_mod.get_global_var('func_1629')
var_1631 = relay.var("var_1631", dtype = "float32", shape = (770,))#candidate|1631|(770,)|var|float32
var_1632 = relay.var("var_1632", dtype = "bool", shape = (45,))#candidate|1632|(45,)|var|bool
var_1633 = relay.var("var_1633", dtype = "bool", shape = (720,))#candidate|1633|(720,)|var|bool
call_1630 = func_1629_call(var_1631,var_1632,var_1633,)
output = call_1630
func_1634 = relay.Function([var_1631,var_1632,var_1633,], output)
mutated_mod['func_1634'] = func_1634
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1658 = relay.var("var_1658", dtype = "bool", shape = ())#candidate|1658|()|var|bool
const_1659 = relay.const([[[True,True,False,True,True,False,True,False,False,True,True,False],[True,False,False,True,True,True,True,False,True,True,True,False],[True,True,True,False,True,False,False,True,True,True,False,False]],[[True,False,True,False,True,False,False,False,False,False,True,True],[True,True,True,False,False,True,False,False,False,False,False,False],[False,True,True,False,False,True,False,True,True,True,True,False]],[[True,False,False,True,False,False,False,False,True,False,False,True],[True,True,True,True,True,False,True,True,True,False,True,True],[False,False,False,True,True,False,False,True,False,False,False,False]],[[False,True,False,True,True,True,True,False,False,False,True,True],[False,True,False,True,True,False,False,True,False,True,True,True],[True,True,False,True,True,True,True,False,False,False,True,True]],[[True,False,True,True,True,False,False,True,True,False,True,True],[False,True,False,False,False,True,False,True,False,False,False,False],[True,False,False,True,False,True,False,True,False,True,False,True]],[[False,False,False,True,False,True,False,True,True,True,True,True],[False,True,True,True,False,True,True,True,True,True,True,True],[False,True,False,False,True,False,True,True,False,False,False,True]]], dtype = "bool")#candidate|1659|(6, 3, 12)|const|bool
bop_1660 = relay.logical_or(var_1658.astype('bool'), const_1659.astype('bool')) # shape=(6, 3, 12)
output = bop_1660
output2 = bop_1660
func_1669 = relay.Function([var_1658,], output)
mod['func_1669'] = func_1669
mod = relay.transform.InferType()(mod)
mutated_mod['func_1669'] = func_1669
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1670 = relay.var("var_1670", dtype = "bool", shape = ())#candidate|1670|()|var|bool
func_1669_call = mutated_mod.get_global_var('func_1669')
call_1671 = func_1669_call(var_1670)
output = call_1671
func_1672 = relay.Function([var_1670], output)
mutated_mod['func_1672'] = func_1672
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1506_call = mod.get_global_var('func_1506')
func_1507_call = mutated_mod.get_global_var('func_1507')
call_1691 = relay.TupleGetItem(func_1506_call(), 0)
call_1692 = relay.TupleGetItem(func_1507_call(), 0)
uop_1696 = relay.sigmoid(call_1691.astype('float64')) # shape=(7, 11, 10)
uop_1698 = relay.sigmoid(call_1692.astype('float64')) # shape=(7, 11, 10)
bop_1710 = relay.less(call_1691.astype('bool'), relay.reshape(uop_1696.astype('bool'), relay.shape_of(call_1691))) # shape=(7, 11, 10)
bop_1713 = relay.less(call_1692.astype('bool'), relay.reshape(uop_1698.astype('bool'), relay.shape_of(call_1692))) # shape=(7, 11, 10)
func_1120_call = mod.get_global_var('func_1120')
func_1124_call = mutated_mod.get_global_var('func_1124')
var_1720 = relay.var("var_1720", dtype = "float32", shape = (576,))#candidate|1720|(576,)|var|float32
const_1721 = relay.const([True,False,True,False,False,True,True,True,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,True,True,False,False,True,True,True,False,False,False,True,False,True,True,False,True,True,True,True,False,True,False,False,False,False,True,False,False,False,False,True,True,True,True,False,False,False,True,False,True,True,True,True,False,False,True,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,True,True,True,False,False,False,False,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,True,False,True,False,True,False,False,True,False,False,True,False,True,True,True,True,False,True,True,False,False,False,False,False,True,False,True,True,False,False,True,True,False,False,False,False,False,False,True,True,False,False,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,True,False,False,True,False,True,True,False,True,True,True,True,False,False,True,True,True,True,False,False,False,False,True,False,True,True,False,True,True,True,False,False,True,False,True,True,False,False,False,True,False,True,True,False,True,False,True,False,True,False,False,True,False,False,True,True,True,True,False,False,False,True,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,True,False,True,True,False,True,True,True,False,True,True,True,False,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,True,False,False,False,True,True,True,True,False,True,False,True,False,False,False,False,True,False,False,True,True,False,False,True,True,True,True,True,False,True,True,False,True,False,False,False,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,False,True,False,True,True,False,True,True,False,True,False,False,False,True,True,True,True,True,True,False,True,False,True,True,False,False,False,False,True,False,False,True,True,False,False,True,False,False,False,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,False,True,True,False,False,True,False,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,True,False,False,True,True,False,False,True,False,False,True,True,False,True,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,True,True,False,True,False,False,True,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,False,False,True,True,False,False,False,False,True,False,False,False,False,False,False,False,False,True,True,False,True,True,False,False,False,True,True,True,True,False,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,True,False,False,True,True,False,False,False,False,True,False,True,False,False,True,False,True,True,True,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,False,True,True,False,True,False,True,False,True,True,False,False,False,True,True,True,True,True,True,True,True,False,True,False,True,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,True,False,True,False,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,False,True], dtype = "bool")#candidate|1721|(720,)|const|bool
call_1719 = relay.TupleGetItem(func_1120_call(relay.reshape(var_1720.astype('float32'), [576,]), relay.reshape(const_1721.astype('bool'), [720,]), ), 8)
call_1722 = relay.TupleGetItem(func_1124_call(relay.reshape(var_1720.astype('float32'), [576,]), relay.reshape(const_1721.astype('bool'), [720,]), ), 8)
output = relay.Tuple([bop_1710,call_1719,var_1720,const_1721,])
output2 = relay.Tuple([bop_1713,call_1722,var_1720,const_1721,])
func_1724 = relay.Function([var_1720,], output)
mod['func_1724'] = func_1724
mod = relay.transform.InferType()(mod)
mutated_mod['func_1724'] = func_1724
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1725 = relay.var("var_1725", dtype = "float32", shape = (576,))#candidate|1725|(576,)|var|float32
func_1724_call = mutated_mod.get_global_var('func_1724')
call_1726 = func_1724_call(var_1725)
output = call_1726
func_1727 = relay.Function([var_1725], output)
mutated_mod['func_1727'] = func_1727
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1539_call = mod.get_global_var('func_1539')
func_1541_call = mutated_mod.get_global_var('func_1541')
call_1755 = func_1539_call()
call_1756 = func_1539_call()
output = call_1755
output2 = call_1756
func_1759 = relay.Function([], output)
mod['func_1759'] = func_1759
mod = relay.transform.InferType()(mod)
output = func_1759()
func_1760 = relay.Function([], output)
mutated_mod['func_1760'] = func_1760
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1221_call = mod.get_global_var('func_1221')
func_1223_call = mutated_mod.get_global_var('func_1223')
call_1798 = relay.TupleGetItem(func_1221_call(), 0)
call_1799 = relay.TupleGetItem(func_1223_call(), 0)
output = call_1798
output2 = call_1799
func_1800 = relay.Function([], output)
mod['func_1800'] = func_1800
mod = relay.transform.InferType()(mod)
output = func_1800()
func_1801 = relay.Function([], output)
mutated_mod['func_1801'] = func_1801
mutated_mod = relay.transform.InferType()(mutated_mod)
func_663_call = mod.get_global_var('func_663')
func_664_call = mutated_mod.get_global_var('func_664')
call_1840 = relay.TupleGetItem(func_663_call(), 0)
call_1841 = relay.TupleGetItem(func_664_call(), 0)
output = call_1840
output2 = call_1841
func_1849 = relay.Function([], output)
mod['func_1849'] = func_1849
mod = relay.transform.InferType()(mod)
mutated_mod['func_1849'] = func_1849
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1849_call = mutated_mod.get_global_var('func_1849')
call_1850 = func_1849_call()
output = call_1850
func_1851 = relay.Function([], output)
mutated_mod['func_1851'] = func_1851
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1759_call = mod.get_global_var('func_1759')
func_1760_call = mutated_mod.get_global_var('func_1760')
call_1991 = func_1759_call()
call_1992 = func_1759_call()
var_1995 = relay.var("var_1995", dtype = "int32", shape = (16, 12, 3))#candidate|1995|(16, 12, 3)|var|int32
bop_1996 = relay.divide(call_1991.astype('float32'), relay.reshape(var_1995.astype('float32'), relay.shape_of(call_1991))) # shape=(16, 12, 3)
bop_1999 = relay.divide(call_1992.astype('float32'), relay.reshape(var_1995.astype('float32'), relay.shape_of(call_1992))) # shape=(16, 12, 3)
output = bop_1996
output2 = bop_1999
func_2007 = relay.Function([var_1995,], output)
mod['func_2007'] = func_2007
mod = relay.transform.InferType()(mod)
var_2008 = relay.var("var_2008", dtype = "int32", shape = (16, 12, 3))#candidate|2008|(16, 12, 3)|var|int32
output = func_2007(var_2008)
func_2009 = relay.Function([var_2008], output)
mutated_mod['func_2009'] = func_2009
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1506_call = mod.get_global_var('func_1506')
func_1507_call = mutated_mod.get_global_var('func_1507')
call_2041 = relay.TupleGetItem(func_1506_call(), 0)
call_2042 = relay.TupleGetItem(func_1507_call(), 0)
output = call_2041
output2 = call_2042
func_2045 = relay.Function([], output)
mod['func_2045'] = func_2045
mod = relay.transform.InferType()(mod)
mutated_mod['func_2045'] = func_2045
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2045_call = mutated_mod.get_global_var('func_2045')
call_2046 = func_2045_call()
output = call_2046
func_2047 = relay.Function([], output)
mutated_mod['func_2047'] = func_2047
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1849_call = mod.get_global_var('func_1849')
func_1851_call = mutated_mod.get_global_var('func_1851')
call_2048 = func_1849_call()
call_2049 = func_1849_call()
var_2052 = relay.var("var_2052", dtype = "float32", shape = (7, 11, 10))#candidate|2052|(7, 11, 10)|var|float32
bop_2053 = relay.minimum(call_2048.astype('int8'), relay.reshape(var_2052.astype('int8'), relay.shape_of(call_2048))) # shape=(7, 11, 10)
bop_2056 = relay.minimum(call_2049.astype('int8'), relay.reshape(var_2052.astype('int8'), relay.shape_of(call_2049))) # shape=(7, 11, 10)
output = relay.Tuple([bop_2053,])
output2 = relay.Tuple([bop_2056,])
func_2057 = relay.Function([var_2052,], output)
mod['func_2057'] = func_2057
mod = relay.transform.InferType()(mod)
mutated_mod['func_2057'] = func_2057
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2058 = relay.var("var_2058", dtype = "float32", shape = (7, 11, 10))#candidate|2058|(7, 11, 10)|var|float32
func_2057_call = mutated_mod.get_global_var('func_2057')
call_2059 = func_2057_call(var_2058)
output = call_2059
func_2060 = relay.Function([var_2058], output)
mutated_mod['func_2060'] = func_2060
mutated_mod = relay.transform.InferType()(mutated_mod)
func_849_call = mod.get_global_var('func_849')
func_850_call = mutated_mod.get_global_var('func_850')
call_2094 = func_849_call()
call_2095 = func_849_call()
const_2097 = relay.const([[[7,10,-3,10,5],[4,-6,-4,1,-6],[7,6,-4,-9,-8],[1,-6,-9,-2,-10],[-9,-1,-1,-1,-2]],[[-1,4,2,-10,-7],[8,6,-10,3,-3],[7,7,-9,4,3],[5,-9,-1,7,2],[10,3,-5,10,-7]],[[1,7,3,-6,-3],[4,-5,7,6,7],[-9,9,4,6,-10],[-1,6,-8,-1,7],[5,4,-6,8,-6]]], dtype = "uint16")#candidate|2097|(3, 5, 5)|const|uint16
bop_2098 = relay.multiply(call_2094.astype('int16'), relay.reshape(const_2097.astype('int16'), relay.shape_of(call_2094))) # shape=(3, 5, 5)
bop_2101 = relay.multiply(call_2095.astype('int16'), relay.reshape(const_2097.astype('int16'), relay.shape_of(call_2095))) # shape=(3, 5, 5)
uop_2109 = relay.sinh(bop_2098.astype('float32')) # shape=(3, 5, 5)
uop_2111 = relay.sinh(bop_2101.astype('float32')) # shape=(3, 5, 5)
uop_2118 = relay.acos(bop_2098.astype('float64')) # shape=(3, 5, 5)
uop_2120 = relay.acos(bop_2101.astype('float64')) # shape=(3, 5, 5)
var_2132 = relay.var("var_2132", dtype = "float32", shape = (3, 5, 5))#candidate|2132|(3, 5, 5)|var|float32
bop_2133 = relay.bitwise_or(uop_2109.astype('uint16'), relay.reshape(var_2132.astype('uint16'), relay.shape_of(uop_2109))) # shape=(3, 5, 5)
bop_2136 = relay.bitwise_or(uop_2111.astype('uint16'), relay.reshape(var_2132.astype('uint16'), relay.shape_of(uop_2111))) # shape=(3, 5, 5)
func_1724_call = mod.get_global_var('func_1724')
func_1727_call = mutated_mod.get_global_var('func_1727')
var_2139 = relay.var("var_2139", dtype = "float32", shape = (576,))#candidate|2139|(576,)|var|float32
call_2138 = relay.TupleGetItem(func_1724_call(relay.reshape(var_2139.astype('float32'), [576,])), 3)
call_2140 = relay.TupleGetItem(func_1727_call(relay.reshape(var_2139.astype('float32'), [576,])), 3)
func_1120_call = mod.get_global_var('func_1120')
func_1124_call = mutated_mod.get_global_var('func_1124')
call_2154 = relay.TupleGetItem(func_1120_call(relay.reshape(var_2139.astype('float32'), [576,]), relay.reshape(call_2138.astype('bool'), [720,]), ), 6)
call_2155 = relay.TupleGetItem(func_1124_call(relay.reshape(var_2139.astype('float32'), [576,]), relay.reshape(call_2138.astype('bool'), [720,]), ), 6)
bop_2164 = relay.power(uop_2109.astype('float64'), relay.reshape(const_2097.astype('float64'), relay.shape_of(uop_2109))) # shape=(3, 5, 5)
bop_2167 = relay.power(uop_2111.astype('float64'), relay.reshape(const_2097.astype('float64'), relay.shape_of(uop_2111))) # shape=(3, 5, 5)
output = relay.Tuple([uop_2118,bop_2133,call_2138,var_2139,call_2154,bop_2164,])
output2 = relay.Tuple([uop_2120,bop_2136,call_2140,var_2139,call_2155,bop_2167,])
func_2168 = relay.Function([var_2132,var_2139,], output)
mod['func_2168'] = func_2168
mod = relay.transform.InferType()(mod)
mutated_mod['func_2168'] = func_2168
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2168_call = mutated_mod.get_global_var('func_2168')
var_2170 = relay.var("var_2170", dtype = "float32", shape = (3, 5, 5))#candidate|2170|(3, 5, 5)|var|float32
var_2171 = relay.var("var_2171", dtype = "float32", shape = (576,))#candidate|2171|(576,)|var|float32
call_2169 = func_2168_call(var_2170,var_2171,)
output = call_2169
func_2172 = relay.Function([var_2170,var_2171,], output)
mutated_mod['func_2172'] = func_2172
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1849_call = mod.get_global_var('func_1849')
func_1851_call = mutated_mod.get_global_var('func_1851')
call_2177 = func_1849_call()
call_2178 = func_1849_call()
output = relay.Tuple([call_2177,])
output2 = relay.Tuple([call_2178,])
func_2183 = relay.Function([], output)
mod['func_2183'] = func_2183
mod = relay.transform.InferType()(mod)
output = func_2183()
func_2184 = relay.Function([], output)
mutated_mod['func_2184'] = func_2184
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2246 = relay.var("var_2246", dtype = "float32", shape = (2, 5, 12))#candidate|2246|(2, 5, 12)|var|float32
uop_2247 = relay.exp(var_2246.astype('float32')) # shape=(2, 5, 12)
output = uop_2247
output2 = uop_2247
func_2257 = relay.Function([var_2246,], output)
mod['func_2257'] = func_2257
mod = relay.transform.InferType()(mod)
var_2258 = relay.var("var_2258", dtype = "float32", shape = (2, 5, 12))#candidate|2258|(2, 5, 12)|var|float32
output = func_2257(var_2258)
func_2259 = relay.Function([var_2258], output)
mutated_mod['func_2259'] = func_2259
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1759_call = mod.get_global_var('func_1759')
func_1760_call = mutated_mod.get_global_var('func_1760')
call_2288 = func_1759_call()
call_2289 = func_1759_call()
var_2292 = relay.var("var_2292", dtype = "int32", shape = (16, 12, 3))#candidate|2292|(16, 12, 3)|var|int32
bop_2293 = relay.logical_xor(call_2288.astype('uint64'), relay.reshape(var_2292.astype('uint64'), relay.shape_of(call_2288))) # shape=(16, 12, 3)
bop_2296 = relay.logical_xor(call_2289.astype('uint64'), relay.reshape(var_2292.astype('uint64'), relay.shape_of(call_2289))) # shape=(16, 12, 3)
output = bop_2293
output2 = bop_2296
func_2299 = relay.Function([var_2292,], output)
mod['func_2299'] = func_2299
mod = relay.transform.InferType()(mod)
mutated_mod['func_2299'] = func_2299
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2300 = relay.var("var_2300", dtype = "int32", shape = (16, 12, 3))#candidate|2300|(16, 12, 3)|var|int32
func_2299_call = mutated_mod.get_global_var('func_2299')
call_2301 = func_2299_call(var_2300)
output = call_2301
func_2302 = relay.Function([var_2300], output)
mutated_mod['func_2302'] = func_2302
mutated_mod = relay.transform.InferType()(mutated_mod)
func_663_call = mod.get_global_var('func_663')
func_664_call = mutated_mod.get_global_var('func_664')
call_2306 = relay.TupleGetItem(func_663_call(), 0)
call_2307 = relay.TupleGetItem(func_664_call(), 0)
func_2299_call = mod.get_global_var('func_2299')
func_2302_call = mutated_mod.get_global_var('func_2302')
const_2312 = relay.const([-6,-2,7,9,-4,-6,5,-1,-3,-1,-4,-1,1,-5,10,3,-9,4,-6,-10,2,-1,9,5,6,10,-10,9,10,4,-5,5,3,2,2,10,-9,2,-10,-10,5,-10,-3,-6,-2,3,9,-1,-9,2,6,-7,2,3,-8,-10,-2,-10,9,8,-8,9,8,2,5,-1,5,-8,-7,10,-5,-10,1,4,6,3,2,3,-4,-9,8,-1,-8,-1,1,2,-2,-5,-4,4,2,6,-9,-5,-4,3,-4,9,5,-7,-3,-4,-3,9,9,-7,-1,4,2,5,6,1,4,2,-2,-8,9,-10,-3,2,-2,-3,-2,7,6,1,1,2,4,7,-4,-2,8,-7,-5,-3,6,2,-10,-3,2,-8,9,-10,-5,-2,-1,2,-8,-10,-6,10,8,-3,4,9,-1,10,-9,5,-7,-3,-1,10,3,-4,7,-2,-9,-5,10,-8,-3,3,9,5,2,8,2,5,-2,-6,-5,3,-3,5,-4,-6,-1,8,4,-10,1,4,-6,1,-7,6,-5,-6,-7,4,5,-8,-9,-8,10,-3,-6,8,-3,-1,-8,-4,3,-3,-2,2,7,4,6,8,2,9,-6,9,6,4,4,-8,8,9,-8,-9,-3,-10,-7,-7,10,4,-2,9,-2,5,1,-4,3,-10,6,-6,2,-8,-4,7,-2,4,-5,-6,-6,-4,-4,-7,-4,10,4,-9,-1,5,-3,-3,-5,-2,2,9,9,-6,-6,10,7,9,3,10,-6,-1,-9,-5,3,-9,5,2,3,-5,-10,8,2,-1,-5,2,9,-10,10,-5,3,6,3,-10,-6,5,9,-5,1,9,-8,9,6,8,-5,7,-8,-5,-2,7,-1,4,-8,-4,-7,-6,4,2,5,6,-4,9,9,-1,1,9,-10,4,5,6,-1,-7,-8,-6,1,-2,-8,-5,4,-8,-3,7,-3,3,6,-8,-2,5,5,2,5,9,4,2,1,1,8,-1,-6,9,-4,3,1,5,-9,-2,-10,10,8,-9,2,6,7,-1,10,9,6,-9,9,-4,10,5,-10,5,8,6,-6,-10,-10,10,-10,3,10,-4,7,-7,6,10,-10,-2,10,8,10,1,-10,9,7,-7,-7,5,-1,-2,6,-2,6,-3,-4,2,-3,-6,-1,5,9,6,5,2,4,4,8,6,-10,10,-2,-7,-3,-9,8,-6,-8,-4,6,10,2,9,7,-3,6,10,4,-2,10,5,7,-6,-6,9,-8,1,2,9,-7,8,-4,1,8,6,9,8,3,-9,6,-10,-7,-6,10,10,-10,3,9,-3,-1,6,2,-4,-10,3,-10,-2,-3,6,8,5,4,-3,3,-9,6,-4,9,-3,-10,-5,-1,-9,-9,-10,-3,-4,-2,-2,-2,-9,8,7,3,6,-6,6,-2,-2,4,-8,6,5,-9,-4,10,1,9,7,6,5,-8,9,-8,1,-2,8,-10,-7,2,4,-7,1,-3,-7,-2,2,5,-10,-4,-6,9,-8,9,-2,9,10,-10,-3,9,-3,4,3], dtype = "int32")#candidate|2312|(576,)|const|int32
call_2311 = func_2299_call(relay.reshape(const_2312.astype('int32'), [16, 12, 3]))
call_2313 = func_2299_call(relay.reshape(const_2312.astype('int32'), [16, 12, 3]))
func_1374_call = mod.get_global_var('func_1374')
func_1376_call = mutated_mod.get_global_var('func_1376')
const_2328 = relay.const([-10,-5,4,6,-10,1,10,5,-5,7,-8,-1,6,-4,-2,-3,5,3,3,-3,4,-4,-2,-2,-7,-3,5,-3,-5,6,-3,-10,-4,-2,-2,-1,8,1,-4,9,3,-6,5,-1,-10,8,5,-4,2,-7,-2,1,2,2,-6,-7,4,-9,-5,-7,-9,-8,4,-3,-7,-1,7,-1,-5,-4,5,-9,-5,7,-1,4,-1,4,2,10,-6,-10,-2,-3,-3,7,10,-6,6,-6,-10,-9,-1,-6,8,6,-6,8,-7,-6,-10,10,-1,-7,-2,6,-3,4,-7,1,-4,-1,3,-10,-10,3,-9,10,-9,-9,-1,-4,-1,10,-7,-3,-8,-3,4,1,10,-4,5,9,2,-7,-2,-9,9,10,2,7,8,9,3,-5,-4,-2,-4,4,-10,1,2,-6,1,5,9,-1,5,-10,2,3,-4,-6,7,-6,-1,-8,9,1,8,-3,-1,-8,6,5,3,5,-3,6,3,5,-1,6,-7,-9,-7,5,-7,-4,-9,3,7,9,-1,9,9,5,-9,9,9,2,-10,-4,8,-2,-7,10,2,-3,8,-4,-8,-8,-1,-4,7,-6,10,6,8,-6,-2,6,-8,7,-10,5,-2,-6,10,-5,5,5,-1,-3,10,1,-8,6,-7,1,5,-7,9,-10,-5,-7,6,6,-5,-8,10,7,-8,3,-7,3,2,-9,-5,-1,5,1,-10,-1,-7,1,8,-3,-4,-10,-3,-5,2,6,-4,-8,-5,-10,-7,3,10,9,-2,4,1,7,8,-10,5,-10,3,7,10,-6,-10,8,2,10,4,-2,-2,10,2,-2,6,-5,1,-10,9,7,4,9,-5,-2,5,-3,-2,6,-2,10,-10,10,8,4,5,-9,7,7,-1,10,-10,2,5,-7,-6,-9,-5,-2,9,2,-5,5,3,3,-10,7,-5,3,8,-1,10,-3,-8,-7,8,1,2,-7,-9,-8,-5,-8,-5,4,-4,8,-4,-8,-3,-1,6,-6,9,5,8,-6,10,5,6,9,-6,-3,-7,5,6,2,-8,-2,6,7,-3,-4,7,-8,-1,-5,7,7,1,-5,8,8,-10,6,-10,-7,-6,-5,2,-7,2,10,-4,-3,-1,-9,-8,8,1,-1,5,-3,-10,-3,2,5,-6,5,-4,-2,-9,-5,-1,-4,-4,-1,-4,1,3,-6,6,8,6,1,-2,-6], dtype = "uint32")#candidate|2328|(448,)|const|uint32
call_2327 = relay.TupleGetItem(func_1374_call(relay.reshape(const_2328.astype('uint32'), [4, 7, 16])), 0)
call_2329 = relay.TupleGetItem(func_1376_call(relay.reshape(const_2328.astype('uint32'), [4, 7, 16])), 0)
func_909_call = mod.get_global_var('func_909')
func_913_call = mutated_mod.get_global_var('func_913')
var_2343 = relay.var("var_2343", dtype = "bool", shape = (840,))#candidate|2343|(840,)|var|bool
const_2344 = relay.const([True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,False,True,False,False,True,False,False,True,False,True,True,False,True,True,False,True,False,True,False,True,False,False,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,True,False,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,False,False,True,True,False,True,True,False,True,False,True,True,False,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True,True,False,True,False,True,True,True,True,False,True,False,True,False,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,True,False,False,True,False,True,False,False,False,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,False,False,True,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,False,True,True,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,False,False,False,True,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,False,False,False,False,True,True,True,False,True,True,True,False,True,False,False,True,False,True,False,True,True,True,True,False,True,False,False,False,True,True,False,True,False,True,True,True,False,False,False,True,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,True,True,True,True,True,True,True,False,False,True,False,False,False,False,True,True,False,True,True,True,False,True,True,False,True,False,False,True,True,True,True,True,True,False,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,False,False,True,True,True,True,False,False,True,True,True,True,True,False,False,True,False,False,True,False,True,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,True,False,True,False,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,False,True,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,False,False,False,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,True,True,True,True,False,True,False,True,False,True], dtype = "bool")#candidate|2344|(720,)|const|bool
call_2342 = relay.TupleGetItem(func_909_call(relay.reshape(var_2343.astype('bool'), [15, 7, 8]), relay.reshape(var_2343.astype('bool'), [15, 7, 8]), relay.reshape(const_2344.astype('bool'), [2, 360]), ), 0)
call_2345 = relay.TupleGetItem(func_913_call(relay.reshape(var_2343.astype('bool'), [15, 7, 8]), relay.reshape(var_2343.astype('bool'), [15, 7, 8]), relay.reshape(const_2344.astype('bool'), [2, 360]), ), 0)
func_1849_call = mod.get_global_var('func_1849')
func_1851_call = mutated_mod.get_global_var('func_1851')
call_2350 = func_1849_call()
call_2351 = func_1849_call()
output = relay.Tuple([call_2306,call_2311,const_2312,call_2327,const_2328,call_2342,var_2343,const_2344,call_2350,])
output2 = relay.Tuple([call_2307,call_2313,const_2312,call_2329,const_2328,call_2345,var_2343,const_2344,call_2351,])
func_2357 = relay.Function([var_2343,], output)
mod['func_2357'] = func_2357
mod = relay.transform.InferType()(mod)
mutated_mod['func_2357'] = func_2357
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2358 = relay.var("var_2358", dtype = "bool", shape = (840,))#candidate|2358|(840,)|var|bool
func_2357_call = mutated_mod.get_global_var('func_2357')
call_2359 = func_2357_call(var_2358)
output = call_2359
func_2360 = relay.Function([var_2358], output)
mutated_mod['func_2360'] = func_2360
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1506_call = mod.get_global_var('func_1506')
func_1507_call = mutated_mod.get_global_var('func_1507')
call_2362 = relay.TupleGetItem(func_1506_call(), 0)
call_2363 = relay.TupleGetItem(func_1507_call(), 0)
const_2369 = relay.const([[[3.026760,-4.229913,0.442728,-6.596247,-5.787068,7.558355,-3.926483,-1.634619,3.895962,4.492847],[2.104201,6.375462,3.153348,1.119309,0.120859,-2.590279,4.268697,4.334585,1.723024,-3.811356],[1.308356,7.834333,-3.486996,-9.577638,-5.752756,8.743765,-6.027081,6.160484,-2.800683,-8.105893],[3.541600,8.906683,7.663908,5.276598,-2.850571,-3.838900,-1.161478,7.446236,7.730731,-6.687137],[9.895560,-6.436346,-3.269725,0.998429,-6.047770,-6.927369,-7.454736,-1.303722,-2.969825,-7.694153],[0.662962,7.489657,1.984255,-1.793118,-9.385464,-8.908601,-1.582106,2.777185,-2.277579,-5.736424],[-3.374925,4.714058,-1.531495,-6.673397,6.438325,1.222376,-7.393935,-9.145672,-6.791481,-3.286864],[-1.110866,-3.479318,1.559353,9.753615,2.371658,-8.302619,1.274278,-7.397495,-5.445284,-9.352414],[-3.629603,-7.463674,-2.154453,-9.758620,-6.950826,-2.654517,2.342530,6.151174,-0.232113,-7.786543],[-2.857454,-4.635298,-9.858955,9.767538,9.287730,5.546570,-2.832484,-5.902768,-2.627607,8.906620],[-6.509380,2.655394,-6.516605,-2.145105,-3.724759,-1.588826,-7.719146,-9.829233,-2.831980,6.852089]],[[9.665020,0.433113,-2.612772,3.231906,-6.599372,4.279858,-9.376416,-4.966650,-8.412706,6.120037],[6.796429,5.725430,-7.458219,8.181936,-5.415070,4.925694,2.936407,3.581103,-9.836914,-5.324562],[8.283355,9.472434,8.863089,-5.669521,4.049648,-8.216128,-5.437598,-1.829897,7.852782,9.679659],[-6.889154,7.256313,3.310857,3.023594,8.487271,-2.084263,-5.567144,-2.825578,7.679689,1.354446],[2.544102,6.227732,6.023471,-7.832844,9.805086,-2.242432,-3.825784,8.875251,-1.301315,-6.306910],[0.997619,-7.897650,-4.461166,8.491600,-0.026270,-7.385159,-3.046620,5.832852,6.373539,-5.283176],[1.378391,-7.399620,-6.419092,4.090272,6.093600,2.430391,-3.011746,-0.779078,-6.648233,-8.290127],[-0.914259,-9.995347,-6.833628,-5.870424,-0.669324,0.667870,-3.113018,2.120614,1.313028,1.875317],[-8.199343,9.092821,6.957873,-8.178507,3.102599,-3.902681,3.444184,-7.389829,-4.676070,-5.064366],[1.079040,-2.774431,3.668223,4.665119,-2.097536,4.062959,6.165854,1.241246,-0.203524,-7.248152],[-3.842013,4.046639,-3.408164,5.533798,9.228211,4.872232,1.526581,-1.646732,6.738456,-9.295627]],[[-7.226604,1.621123,-0.854254,-7.778849,-7.005662,6.331941,3.036749,-7.861186,-4.240519,-1.373063],[5.611146,3.338846,6.170335,-9.254397,8.547230,-1.637915,-4.786738,5.604561,-9.772705,-5.550112],[-3.804604,4.684855,-7.859966,7.186195,-1.882077,-6.538803,6.593353,-3.795187,1.390950,-0.219289],[7.379339,8.412466,-1.738772,3.904912,-5.395059,7.511107,5.660263,9.725595,-9.859439,-1.648242],[-4.448264,1.959674,-3.894356,7.764738,-4.521141,-9.458984,-4.169001,1.095496,-2.424884,-6.960915],[-0.680667,-0.172569,-9.539450,-0.972793,-3.950655,3.348543,6.813594,8.979722,1.527652,-6.783129],[-1.003480,1.433790,-0.293271,9.283532,7.086948,9.602162,1.453263,9.334323,1.677936,-2.295561],[6.052795,8.911212,-7.669611,-7.768137,5.356658,2.190648,-7.700910,-2.482454,-1.192297,0.570886],[6.540119,2.666419,-4.530903,9.907607,-7.894326,-4.112279,2.005412,3.703959,-0.394415,3.066892],[-0.686834,7.374477,-9.328170,6.538759,2.497986,-6.290284,3.081970,1.681650,2.367795,-8.922693],[-3.335250,8.085132,-1.696466,-6.051282,-9.282557,-4.167332,-1.935768,3.124016,2.049097,9.302243]],[[-2.140221,-9.842986,-3.356878,1.509746,-5.591787,5.206704,-7.200380,-2.491377,5.557000,6.738350],[5.534050,-6.972119,9.613256,-3.641761,-8.026198,8.803764,6.090309,9.138445,3.002258,3.872910],[-8.275687,1.905280,5.206368,4.280917,-1.879188,2.233048,-1.103700,9.487932,2.308923,-8.584614],[-6.434530,-8.593429,2.679660,8.547644,0.067867,-4.007928,9.162948,-5.141633,-6.256960,-5.224203],[5.068465,-9.744303,1.687191,6.336119,9.742312,9.412911,-6.589343,2.154618,8.698977,-9.379262],[-6.032830,-4.732350,-3.661460,-2.956113,-3.293126,9.397099,-3.241170,3.193650,-4.218328,3.697699],[-3.964256,1.615761,-7.190046,6.844830,0.655905,-5.461017,-6.050909,5.152866,-9.501963,2.843509],[-8.668226,-2.220826,-6.380452,9.293062,-7.211209,-4.120476,1.011830,2.557292,8.676497,2.313964],[2.532514,-0.943905,-4.985503,-6.935111,5.680426,4.192723,6.583206,1.940331,7.266135,-4.164641],[3.663603,-5.348933,-8.954723,-7.768022,-8.931771,-2.963474,-2.710098,-5.324239,-9.892251,3.950450],[-6.406233,-1.887149,-7.300604,-7.166016,-0.228845,6.749353,3.618369,-0.515442,-5.416136,6.646655]],[[-5.861432,-3.963254,-8.305626,9.863910,9.259597,5.579227,3.291591,7.861519,0.224784,1.422324],[-5.000767,3.748785,-1.486256,1.309362,-5.442894,-5.815092,-6.271646,2.006508,7.464734,-5.894175],[0.738677,-6.367852,2.015549,-0.228080,5.975406,-9.653190,2.161377,-6.082999,3.167928,-3.354011],[-5.933768,-6.631589,2.140529,-2.636833,-6.702400,9.329659,-7.331844,-8.252981,-0.229789,-5.075795],[-6.476892,0.543055,-2.646689,8.314293,-4.809481,7.081936,-3.588868,9.140319,-6.941632,-0.770616],[-9.950308,-2.246293,-4.188722,-2.944839,-1.212187,-6.398892,0.709783,-2.834621,4.551880,5.076704],[8.275981,6.619409,-2.342744,0.303433,-3.457931,5.661272,3.115543,2.640346,-2.605786,-9.864241],[-1.886839,5.688757,7.930258,2.742878,-2.383606,-1.555074,0.133835,2.273823,-1.256473,-6.221025],[0.774211,-8.447905,-3.781451,-5.544727,4.418043,5.882950,7.148833,-8.151971,-1.766264,-7.967428],[-2.343691,-9.796578,-1.336835,-6.750549,-6.303869,1.524976,-3.942904,-8.695330,7.154283,-5.609969],[-1.272307,-0.430447,-4.332668,-6.160852,-3.782794,5.593390,2.104110,-6.446211,-6.623483,-7.750119]],[[-2.989074,-2.881841,4.004181,2.094171,4.084253,-0.594159,9.687868,2.935234,1.282030,-9.379988],[-2.398943,-1.089432,0.278833,6.905523,7.652405,-3.597997,0.854862,6.935850,1.308440,8.200803],[-5.112371,-2.349396,-7.666250,8.568668,7.562263,5.510008,-6.271771,2.905253,6.376830,9.825458],[6.012058,-3.465424,-3.964578,5.598700,-5.811890,-5.647917,-3.471298,-5.848821,-8.244928,-0.501989],[7.373039,-2.180136,-8.617646,4.161335,-6.410963,-4.305576,-5.587208,1.979915,-7.367831,-6.943821],[0.563046,1.095351,-5.949678,5.941634,-1.790141,-9.367140,4.278780,5.588953,9.961522,4.233658],[5.277359,1.207092,-3.850451,-6.185317,8.891098,1.225171,5.032868,7.920940,-7.375378,-0.133760],[-5.998760,-2.105692,9.617836,0.178397,-2.113990,3.589734,6.453741,9.436763,6.341983,-5.566707],[1.648311,4.273529,6.452740,-2.274747,9.377308,-3.129643,7.629596,-7.988790,-7.654059,1.619311],[-8.267826,-3.631249,1.879249,-5.230372,3.312199,-2.238719,-8.646968,8.029988,-4.376056,-6.270297],[-6.416473,2.938495,1.963013,6.907388,-3.093921,9.286461,0.457699,-5.687748,5.461643,4.237151]],[[8.585770,2.564069,9.644109,3.492919,-3.621948,-9.263214,-6.705082,1.846477,8.245264,9.452575],[7.761538,-0.219516,-9.496921,-7.748783,2.541868,-8.747505,4.307021,7.222437,-1.863966,-0.124740],[-0.693623,-6.356742,-2.620168,-1.773153,-2.675201,4.904432,-2.788357,-9.485454,-3.904104,5.902985],[-9.066863,2.387334,9.632927,-7.644894,9.309708,7.159813,4.016293,6.888463,9.559940,2.149157],[5.545365,2.726449,8.326139,6.258258,-4.008662,9.942995,-0.502097,-9.558349,2.864281,-4.222781],[9.545897,-2.028849,5.854949,2.319283,-4.026825,-0.937368,0.799142,7.341974,1.487506,5.798790],[4.191747,-8.808564,3.965334,-4.738782,2.606525,1.696165,-3.145236,-3.194425,3.120657,-9.164239],[-4.563433,-7.614951,-1.657687,-5.250471,-4.340078,-6.816886,9.813496,2.730590,5.419330,6.511184],[-5.747448,-7.736607,6.685876,-6.395174,-8.706244,-5.783124,3.976564,-6.985438,-7.741819,2.812706],[-3.469826,6.066182,-2.153813,-4.882688,-0.633652,0.719976,7.164976,2.944266,-5.409379,7.532587],[-8.591912,2.260457,-4.036805,2.898806,4.341370,9.721070,-0.460598,4.562194,-5.945530,5.289189]]], dtype = "float32")#candidate|2369|(7, 11, 10)|const|float32
bop_2370 = relay.divide(call_2362.astype('float32'), relay.reshape(const_2369.astype('float32'), relay.shape_of(call_2362))) # shape=(7, 11, 10)
bop_2373 = relay.divide(call_2363.astype('float32'), relay.reshape(const_2369.astype('float32'), relay.shape_of(call_2363))) # shape=(7, 11, 10)
func_1800_call = mod.get_global_var('func_1800')
func_1801_call = mutated_mod.get_global_var('func_1801')
call_2377 = func_1800_call()
call_2378 = func_1800_call()
output = relay.Tuple([bop_2370,call_2377,])
output2 = relay.Tuple([bop_2373,call_2378,])
func_2387 = relay.Function([], output)
mod['func_2387'] = func_2387
mod = relay.transform.InferType()(mod)
mutated_mod['func_2387'] = func_2387
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2387_call = mutated_mod.get_global_var('func_2387')
call_2388 = func_2387_call()
output = call_2388
func_2389 = relay.Function([], output)
mutated_mod['func_2389'] = func_2389
mutated_mod = relay.transform.InferType()(mutated_mod)
func_849_call = mod.get_global_var('func_849')
func_850_call = mutated_mod.get_global_var('func_850')
call_2426 = func_849_call()
call_2427 = func_849_call()
func_1849_call = mod.get_global_var('func_1849')
func_1851_call = mutated_mod.get_global_var('func_1851')
call_2444 = func_1849_call()
call_2445 = func_1849_call()
func_1506_call = mod.get_global_var('func_1506')
func_1507_call = mutated_mod.get_global_var('func_1507')
call_2454 = relay.TupleGetItem(func_1506_call(), 0)
call_2455 = relay.TupleGetItem(func_1507_call(), 0)
bop_2458 = relay.less_equal(call_2444.astype('bool'), relay.reshape(call_2454.astype('bool'), relay.shape_of(call_2444))) # shape=(7, 11, 10)
bop_2461 = relay.less_equal(call_2445.astype('bool'), relay.reshape(call_2455.astype('bool'), relay.shape_of(call_2445))) # shape=(7, 11, 10)
output = relay.Tuple([call_2426,bop_2458,])
output2 = relay.Tuple([call_2427,bop_2461,])
func_2474 = relay.Function([], output)
mod['func_2474'] = func_2474
mod = relay.transform.InferType()(mod)
mutated_mod['func_2474'] = func_2474
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2474_call = mutated_mod.get_global_var('func_2474')
call_2475 = func_2474_call()
output = call_2475
func_2476 = relay.Function([], output)
mutated_mod['func_2476'] = func_2476
mutated_mod = relay.transform.InferType()(mutated_mod)
func_777_call = mod.get_global_var('func_777')
func_778_call = mutated_mod.get_global_var('func_778')
call_2496 = relay.TupleGetItem(func_777_call(), 0)
call_2497 = relay.TupleGetItem(func_778_call(), 0)
uop_2510 = relay.log2(call_2496.astype('float32')) # shape=(3, 5, 5)
uop_2512 = relay.log2(call_2497.astype('float32')) # shape=(3, 5, 5)
func_620_call = mod.get_global_var('func_620')
func_624_call = mutated_mod.get_global_var('func_624')
const_2518 = relay.const([7.329945,-2.809613,2.112346,-1.892121,1.994832,6.194356,-2.647365,0.233298,5.973332,9.693511,-3.750930,-4.042786,-5.057551,-1.597683,9.931736,-8.122440,5.077607,0.160067,7.321989,6.636065,1.984116,-3.432249,8.173671,-4.480280,-1.473586,8.803501,2.148213,2.559070,-9.158578,-9.857126,4.094677,-9.566972,8.272066,4.035264,3.245531,4.088476,2.647342,-7.312338,-7.785614,-5.676444,-7.501112,0.283568,0.981373,-6.522507,-6.296386,1.950568,6.992400,-7.595582,-2.294895,2.230016,-8.727342,-0.423817,8.892840,-8.031755,-1.833583,-7.813979,-2.702666,-8.999855,-7.168563,-8.167302,5.863172,-5.500704,2.563555,6.430533,5.402333,-6.855890,-3.816204,6.509160,8.448735,1.020287,-2.082423,8.975602,7.465064,-6.891814,-2.990691,-6.739338,8.245943,-9.142018,3.968774,-6.328265,3.835924,0.950106,1.771626,5.103464,-2.010802,-9.235331,-6.900202,-0.274408,-4.255438,-7.827206,0.234308,-7.167403,6.392458,7.879146,3.459122,1.173296,-7.930954,-4.177548,-3.666546,6.305363,-3.610161,4.770406,4.041542,-4.413146,4.395687,-7.871080,8.419094,8.298138,5.483950,6.735807,-9.830500,3.757708,4.952129,-3.161887,0.367441,4.619594,-8.919953,0.106383,-2.331995,5.088967,-6.958699,-1.990378,-2.073007,-9.513376,-0.649955,-6.737034,0.566352,-7.746804,9.340849,-5.527089,-9.097396,-0.056185,-0.102371,-7.835598,0.572105,-2.707233,0.006990,9.063192,-1.392109,4.735616,-8.536756,7.664953,-2.760703,-2.432869,0.414275,-2.502553,-1.527780,-1.195665,-4.012192,3.762452,-2.460642,6.424013,-5.619632,9.203936,8.023083,-4.627721,1.365007,5.958885,5.784590,3.170947,-8.331932,-8.488499,3.778556,8.514542,4.753878,6.479414,4.652381,1.028807,-5.718320,-1.461382,8.112027,3.520391,8.499677,-3.045221,-0.124271,1.067888,-6.062829,-3.444680,-1.691305,5.493620,-2.806000,4.486844,-7.594335,-4.582641,6.505918,-4.266833,2.979527,7.146889,-1.728748,6.154907,-0.452394,7.160162,-7.053477,-2.138364,1.072162,-9.998559,-7.024912,9.616438,-7.004698,7.486699,7.701661,-8.907408,0.077538,6.962414,-4.396056,8.651507,0.568413,2.179143,-0.831504,-2.994659,4.580769,8.631606,-5.875353,-8.079347,-4.398022,-9.436313,3.878211,-3.238072,8.320208,-5.565728,-2.022222,-3.449162,-5.082438,0.550515,5.103701,9.633729,-8.766050,-3.985643,5.591627,7.780657,1.867034,0.707552,5.333066,2.096005,0.936597,-5.944570,6.290872,4.584332,-3.638379,-2.148227,-5.624933,-3.650107,1.060469,4.431578,-6.065068,-6.018388,4.911513,-5.785416,-9.157511,4.508938,-2.381150,7.350132,-2.836152,6.111352,-3.671980,-7.892186,8.706653,2.883277,1.839429,-8.533400,-7.431621,5.098601,-3.912214,-0.320861,-7.690267,2.926483,5.723400,-1.802678,1.140732,-6.277639,-2.413100,0.343503,2.561716,-9.848401,0.899672,-8.131772,9.481467,5.607987,-7.944003,-6.630260,7.805300,8.400478,0.411335,-6.342769,8.936738,-4.780931,3.726637,-8.038492,-3.505466,-7.489980,4.350248,8.287606,-8.532010,-0.460128,-2.192253,5.101390,-0.713845,-1.139771,3.053965,6.349562,3.691538,-0.578472,9.056003,-9.246837,4.511939,8.408632,1.774174,0.707291,-5.768914,-7.124103,6.071008,-1.009554,-4.238412,3.805999,-5.399354,8.828793,-9.484755,-1.453345,-9.236837,3.692776,4.646290,-7.613267,-7.252903,5.019529,1.107985,3.463777,3.251986,4.547275,3.063065,1.013482,9.163066,6.886935,-1.500926,0.538164,-0.392607,-8.603979,7.882249,1.828366,6.998958,-6.869816,-8.988997,6.827752,-4.816674,-3.077478,1.416830,0.217249,-8.056220,-8.690762,-3.105753,7.651913,-5.162027,2.156579,-3.489432,7.109617,7.863821,-0.687590,-1.085792,0.824093,-7.581625,-2.053562,-7.669248,-5.830751,-9.381251,7.657155,-0.794881,-5.431368,3.950566,7.078566,-2.716992,8.277837,-2.534207,1.797783,4.147654,2.492721,-1.511316,3.144430,6.080035,0.832122,-3.393067,8.825779,6.473018,8.189383,9.442519,-9.032163,-7.707372,6.500146,-9.568124,3.386059,8.854636,9.148106,-6.102192,-1.701562,4.496292,2.604900,5.590895,-8.892000,-8.902969,4.499827,-0.106954,3.257239,8.962158,-0.528769,-1.975837,4.312084,-5.272631,5.637967,2.324860,7.573441,-6.703940,-6.801124,0.169518,-1.296633,-2.779563,0.684288,-1.078620,3.342695,2.868173,2.816252,2.336048,2.413310,0.445605,-6.937067,5.421231,5.549815,7.054493,7.762970,3.215905,-5.786247,8.830826,-9.757427,4.092189,4.742400,5.029645,-7.552580,3.238214,0.047687,-4.413021,7.362773,9.005991,7.054299,-1.225534,5.117504,5.737804,5.177231,7.783919,-5.932718,-4.033706,5.440391,-3.786356,-2.580110,4.462629,-3.149937,-6.269426,1.889713,5.596439,-3.572102,8.903566,2.811954,5.827761,2.453637,-6.351191,4.670834,9.055962,1.756934,-6.824645,6.793857,7.943082,-8.010210,5.353544,3.607869,-6.877453,-5.224905,6.317802,-7.545168,7.505897,3.865823,8.667456,-4.612687,0.161555,-5.591143,3.060076,8.039411,-2.347818,-9.364666,-6.555170,-5.883985,1.162198,-1.094389,-8.019630,-6.877649,8.712358,1.386100,-5.034718,8.136573,3.363110,-2.054537,-5.112668,3.965927,3.252868,-6.759418,5.132736,-9.496165,-2.495928,6.216499,-3.967800,-5.851722,4.244664,-1.744304,0.823563,1.258455,-9.679695,8.087340,-8.431233,8.270484,6.962074,9.356766,-7.069441,0.817812,-6.655211,2.443655,-9.910758,-2.906489,0.709574,-3.122703,8.998594,-4.777238,0.956196,-0.292607,-2.004674,3.403023,0.094748,8.678949,-7.410650,-5.722072,4.563057,5.957807,1.874106,-8.738795,1.578089,1.242767,-0.522152,-0.996714,-7.635805,4.636686,-4.177933,-3.666026,7.529870,7.925616,-7.881223,6.972294,5.811856,-4.143264,-4.725704,7.258798,9.949585,-4.864825,-7.694018,7.354195,1.216332,-3.574035,2.038546,-4.239747,-5.197002,-1.145441,1.611900,-3.175174,8.074068,-4.020412,4.487145,6.050326,-3.541473,6.342097,-0.369041,4.303055,4.788550,2.427477,-2.838259,-5.741671,3.672855,-1.364535,-5.089603,7.089937,2.064205,9.985019,2.912722,5.605761,8.909963,0.861781,5.447901,7.046038,-9.244981,5.024092,-4.890555,4.736541,-2.583648,8.594241,-4.885172,-1.830213,-9.370471,0.735353,-7.168747,0.448000,8.313529,2.703279,-8.649818,2.503849,7.844542,8.815985,-5.994948,8.725975,-9.841054,3.357534,6.638541,-6.577934,-4.432851,-1.960003,-0.481107,-8.479117,-5.877260,-3.424218,-8.068315,2.167779,-2.900563,-9.996091,1.793743,-7.652935,-9.744790,-7.358551,6.743571,1.294075,-1.049536,1.089728,7.725041,-2.015393,2.223875,-4.767754,2.278599,-6.482013,3.766139,-6.868756,-1.019590,-2.355732,9.454170,1.153510,-4.898668,-6.768735,-7.810542,8.368809,3.976226,3.684735,1.214034,-7.581638,7.114775,-2.243767,1.425912,8.232722,9.257876,-0.896681,-2.504539,-5.100218,-2.832434,-0.365901,-0.215747,6.762897,2.014519,-6.724706,-8.973751,3.132890,1.732388,-0.446246,3.344052,5.799121,-2.611388,4.871234,6.778050,0.759579,-4.489112,-8.625040,0.345929,-9.162927,-4.807246,9.686502,8.992523,-4.215860,3.951256,-5.432480,-7.657904,6.445920,5.047412,2.817114,-2.379917,0.108748,-9.674445,4.390611,2.123869,5.051248,0.910149,-2.020015,9.898862,9.745299,-1.619495,0.225123,1.296605,4.868917,3.404822,2.247960,6.443189,-6.210625,-7.352612,5.243635,4.154983,9.479335,-6.471840,-5.558842,-7.648209,-3.517556,0.083259,2.394018,-0.972989,2.503869,-1.000535,-1.355921,6.184026,3.978375,-4.256673,6.684325,7.628851,-3.799423,9.902581,-0.387244,0.466069,-0.438324,-6.304450,1.448971,-5.718203,2.539693,-5.566735,-2.090090,-0.848529,7.798349,-0.332914,5.232474,-5.935747,3.484698,-3.278156,3.469642,-6.504776,-6.195796,-4.270028,-4.791251,-5.203283,8.608927,3.149274,5.920543,9.351467,-8.695981,1.867146,-1.276765,-2.102701,9.175543,2.454685,-8.283263,-7.861679,-9.078422,-7.232093,6.195060,-7.483303,6.859933,-9.897800,-9.854988], dtype = "float32")#candidate|2518|(770,)|const|float32
var_2519 = relay.var("var_2519", dtype = "bool", shape = (45,))#candidate|2519|(45,)|var|bool
var_2520 = relay.var("var_2520", dtype = "bool", shape = (720,))#candidate|2520|(720,)|var|bool
call_2517 = relay.TupleGetItem(func_620_call(relay.reshape(const_2518.astype('float32'), [7, 11, 10]), relay.reshape(var_2519.astype('bool'), [45,]), relay.reshape(var_2520.astype('bool'), [720,]), ), 6)
call_2521 = relay.TupleGetItem(func_624_call(relay.reshape(const_2518.astype('float32'), [7, 11, 10]), relay.reshape(var_2519.astype('bool'), [45,]), relay.reshape(var_2520.astype('bool'), [720,]), ), 6)
func_777_call = mod.get_global_var('func_777')
func_778_call = mutated_mod.get_global_var('func_778')
call_2524 = relay.TupleGetItem(func_777_call(), 0)
call_2525 = relay.TupleGetItem(func_778_call(), 0)
output = relay.Tuple([uop_2510,call_2517,const_2518,var_2519,var_2520,call_2524,])
output2 = relay.Tuple([uop_2512,call_2521,const_2518,var_2519,var_2520,call_2525,])
func_2528 = relay.Function([var_2519,var_2520,], output)
mod['func_2528'] = func_2528
mod = relay.transform.InferType()(mod)
var_2529 = relay.var("var_2529", dtype = "bool", shape = (45,))#candidate|2529|(45,)|var|bool
var_2530 = relay.var("var_2530", dtype = "bool", shape = (720,))#candidate|2530|(720,)|var|bool
output = func_2528(var_2529,var_2530,)
func_2531 = relay.Function([var_2529,var_2530,], output)
mutated_mod['func_2531'] = func_2531
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1221_call = mod.get_global_var('func_1221')
func_1223_call = mutated_mod.get_global_var('func_1223')
call_2583 = relay.TupleGetItem(func_1221_call(), 0)
call_2584 = relay.TupleGetItem(func_1223_call(), 0)
uop_2595 = relay.rsqrt(call_2583.astype('float32')) # shape=(3, 5, 5)
uop_2597 = relay.rsqrt(call_2584.astype('float32')) # shape=(3, 5, 5)
var_2608 = relay.var("var_2608", dtype = "float32", shape = (3, 5, 5))#candidate|2608|(3, 5, 5)|var|float32
bop_2609 = relay.minimum(uop_2595.astype('uint8'), relay.reshape(var_2608.astype('uint8'), relay.shape_of(uop_2595))) # shape=(3, 5, 5)
bop_2612 = relay.minimum(uop_2597.astype('uint8'), relay.reshape(var_2608.astype('uint8'), relay.shape_of(uop_2597))) # shape=(3, 5, 5)
func_1120_call = mod.get_global_var('func_1120')
func_1124_call = mutated_mod.get_global_var('func_1124')
var_2628 = relay.var("var_2628", dtype = "float32", shape = (576,))#candidate|2628|(576,)|var|float32
var_2629 = relay.var("var_2629", dtype = "bool", shape = (180, 4))#candidate|2629|(180, 4)|var|bool
call_2627 = relay.TupleGetItem(func_1120_call(relay.reshape(var_2628.astype('float32'), [576,]), relay.reshape(var_2629.astype('bool'), [720,]), ), 0)
call_2630 = relay.TupleGetItem(func_1124_call(relay.reshape(var_2628.astype('float32'), [576,]), relay.reshape(var_2629.astype('bool'), [720,]), ), 0)
bop_2665 = relay.greater(uop_2595.astype('bool'), relay.reshape(bop_2609.astype('bool'), relay.shape_of(uop_2595))) # shape=(3, 5, 5)
bop_2668 = relay.greater(uop_2597.astype('bool'), relay.reshape(bop_2612.astype('bool'), relay.shape_of(uop_2597))) # shape=(3, 5, 5)
func_1800_call = mod.get_global_var('func_1800')
func_1801_call = mutated_mod.get_global_var('func_1801')
call_2675 = func_1800_call()
call_2676 = func_1800_call()
func_1263_call = mod.get_global_var('func_1263')
func_1266_call = mutated_mod.get_global_var('func_1266')
call_2681 = relay.TupleGetItem(func_1263_call(relay.reshape(var_2629.astype('bool'), [720,])), 1)
call_2682 = relay.TupleGetItem(func_1266_call(relay.reshape(var_2629.astype('bool'), [720,])), 1)
output = relay.Tuple([call_2627,var_2628,var_2629,bop_2665,call_2675,call_2681,])
output2 = relay.Tuple([call_2630,var_2628,var_2629,bop_2668,call_2676,call_2682,])
func_2685 = relay.Function([var_2608,var_2628,var_2629,], output)
mod['func_2685'] = func_2685
mod = relay.transform.InferType()(mod)
var_2686 = relay.var("var_2686", dtype = "float32", shape = (3, 5, 5))#candidate|2686|(3, 5, 5)|var|float32
var_2687 = relay.var("var_2687", dtype = "float32", shape = (576,))#candidate|2687|(576,)|var|float32
var_2688 = relay.var("var_2688", dtype = "bool", shape = (180, 4))#candidate|2688|(180, 4)|var|bool
output = func_2685(var_2686,var_2687,var_2688,)
func_2689 = relay.Function([var_2686,var_2687,var_2688,], output)
mutated_mod['func_2689'] = func_2689
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2718 = relay.const([[[-2,-3,2,6,7,9,-3,6,-4,-5,-9,-3,8,2,4,7],[10,-4,2,-10,-10,-5,-8,10,-9,8,-8,3,-4,6,-8,-5],[5,-3,-9,-5,1,-5,2,10,2,1,10,-8,8,-4,6,-7]],[[1,7,-10,-1,2,-10,3,8,-10,7,-3,-6,-10,-9,2,-7],[-5,-4,-9,-8,3,9,-9,-1,-6,-1,-3,1,-9,-10,-6,5],[5,6,4,-7,3,-3,1,-1,10,7,9,7,-10,-1,5,-8]],[[5,4,-10,-8,-5,3,-3,-4,-6,-8,-10,-5,1,-7,-3,-9],[-8,10,2,-9,7,2,10,-6,-8,3,9,-8,-3,-9,9,5],[-10,3,2,-6,8,2,-5,-4,3,3,-5,-2,-6,-7,10,-2]],[[8,2,-9,-1,-6,5,-1,4,-8,6,8,4,-3,-10,-2,3],[10,-1,4,8,-7,1,5,4,2,7,-7,5,1,-3,10,4],[-3,-10,7,7,2,3,-5,9,6,9,-6,-5,2,1,-6,-1]]], dtype = "int64")#candidate|2718|(4, 3, 16)|const|int64
const_2719 = relay.const([[[-2,5,2,-2,-10,5,6,-3,1,-9,-1,-9,8,7,-3,2],[-9,-5,-3,-10,-4,2,-6,-5,2,4,-3,-4,-7,5,-5,-5],[1,5,-7,-10,-7,-4,-7,2,7,3,-10,-2,-9,7,5,-8]],[[4,-2,-6,5,-7,8,10,-3,5,6,4,-4,-9,7,-5,-10],[-6,-1,7,8,6,5,-8,-2,4,-10,-10,-1,7,10,-3,-10],[-3,3,-10,-3,9,-2,-6,-9,4,1,6,-10,-10,-5,-1,3]],[[-10,5,7,4,-7,2,1,-6,-3,-7,-10,1,9,4,3,-5],[4,-10,-1,-9,-1,2,4,-4,-8,9,-10,-10,8,-1,1,-1],[10,-6,-8,-7,-7,10,10,2,7,-6,2,7,7,-1,6,3]],[[-5,-4,5,-1,-2,-6,5,10,7,-2,-1,-9,9,-9,1,-10],[3,7,-7,2,9,4,4,-9,-10,-10,-10,-1,8,-3,-2,-3],[-6,2,-1,5,-2,8,-4,9,-8,7,9,-6,-6,3,-1,-2]]], dtype = "int64")#candidate|2719|(4, 3, 16)|const|int64
bop_2720 = relay.greater(const_2718.astype('bool'), relay.reshape(const_2719.astype('bool'), relay.shape_of(const_2718))) # shape=(4, 3, 16)
func_909_call = mod.get_global_var('func_909')
func_913_call = mutated_mod.get_global_var('func_913')
const_2727 = relay.const([True,True,False,False,False,False,False,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,False,True,False,False,False,True,True,True,True,True,True,True,True,False,False,False,True,True,True,False,False,False,False,False,True,True,False,False,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,False,True,False,False,False,False,False,False,True,True,True,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,False,False,False,False,True,False,True,False,True,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,False,False,True,False,False,True,True,True,True,True,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,True,False,True,True,False,False,True,True,True,True,True,False,False,False,True,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,False,True,False,True,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,True,True,True,True,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,False,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,False,False,True,False,False,True,True,False,True,True,False,True,True,True,False,False,True,True,True,True,False,True,False,False,True,False,True,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,False,True,True,False,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,True,False,False,True,True,True,False,True,True,False,True,False,False,False,True,False,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,True,False,False,False,False,True,False,True,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,False,True,True,True,True,False,True,True,True,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,True,True,False,True,True,False,False,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,False,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,True,True,False,True,True,False,True,False,False,False,False,False,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,True,True,True,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,True,True,True,True,True,False,True,True,True,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,True,False,True,True,True,True,False,True,False,False,True,False,False,False,True,False,True,False,True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,True,False,False,True,True,False,True,True,False,True,True,True,True,False,True,False,False,True,False,True,True,False,True,False,False,False,False,True,False,True,False,True,False,False,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,True,False,False,True,True,False,True,False,False,True,False,False,True,False,False,False,False,True,False,False,False,True,True,False,True,True,False,False,False,True,True,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,True,False,True,True,True,False,False,False], dtype = "bool")#candidate|2727|(840,)|const|bool
const_2728 = relay.const([False,False,False,False,False,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,False,True,True,True,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,True,True,True,False,False,False,True,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,False,False,False,True,True,False,False,True,True,True,False,False,True,False,True,False,True,False,False,False,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,True,True,False,False,True,False,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,True,False,True,True,True,True,False,True,True,True,False,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,False,False,False,False,True,False,True,True,True,False,False,True,True,True,True,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,False,True,False,False,False,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,False,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,True,True,True,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,True,True,True,True,True,False,False,False,False,True,True,True,False,False,False,True,False,False,False,False,False,False,True,True,False,True,False,False,True,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,False,False,False,True,False,False,False,True,True,False,True,True,False,False,True,True,False,False,True,True,True,False,True,True,False,False,False,False,True,True,True,True,True,False,False,False,False,False,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,False,True,True,False,True,True,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,False,True,False,True,True,True,False,False,False,False,True,False,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,True,True,False,False,True,False,True,False,False,False,False,False,True,False,False,False,False,True,False,False,False,True,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,True,False,False,True,False,False,False,False,False,False,True,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,False,True,False,True,False,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,True,True,False,True,True,False,True,False,False,False,False,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,False,True,False,False,True,False,True,True,True,False,False,False,True,False,True,True,False,False,False,True,True,True,True,True,True,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,True,False,False,False,False,True,True,False,False,True,True,True,True,True,True,False,False,False,False,True,False,True,False,True,False,True,True,False,True,False,True,False], dtype = "bool")#candidate|2728|(720,)|const|bool
call_2726 = relay.TupleGetItem(func_909_call(relay.reshape(const_2727.astype('bool'), [15, 7, 8]), relay.reshape(const_2727.astype('bool'), [15, 7, 8]), relay.reshape(const_2728.astype('bool'), [2, 360]), ), 0)
call_2729 = relay.TupleGetItem(func_913_call(relay.reshape(const_2727.astype('bool'), [15, 7, 8]), relay.reshape(const_2727.astype('bool'), [15, 7, 8]), relay.reshape(const_2728.astype('bool'), [2, 360]), ), 0)
output = relay.Tuple([bop_2720,call_2726,const_2727,const_2728,])
output2 = relay.Tuple([bop_2720,call_2729,const_2727,const_2728,])
func_2731 = relay.Function([], output)
mod['func_2731'] = func_2731
mod = relay.transform.InferType()(mod)
output = func_2731()
func_2732 = relay.Function([], output)
mutated_mod['func_2732'] = func_2732
mutated_mod = relay.transform.InferType()(mutated_mod)
func_849_call = mod.get_global_var('func_849')
func_850_call = mutated_mod.get_global_var('func_850')
call_2756 = func_849_call()
call_2757 = func_849_call()
func_1506_call = mod.get_global_var('func_1506')
func_1507_call = mutated_mod.get_global_var('func_1507')
call_2762 = relay.TupleGetItem(func_1506_call(), 0)
call_2763 = relay.TupleGetItem(func_1507_call(), 0)
var_2785 = relay.var("var_2785", dtype = "uint16", shape = (3, 5, 5))#candidate|2785|(3, 5, 5)|var|uint16
bop_2786 = relay.not_equal(call_2756.astype('bool'), relay.reshape(var_2785.astype('bool'), relay.shape_of(call_2756))) # shape=(3, 5, 5)
bop_2789 = relay.not_equal(call_2757.astype('bool'), relay.reshape(var_2785.astype('bool'), relay.shape_of(call_2757))) # shape=(3, 5, 5)
func_351_call = mod.get_global_var('func_351')
func_355_call = mutated_mod.get_global_var('func_355')
var_2794 = relay.var("var_2794", dtype = "bool", shape = (45, 1))#candidate|2794|(45, 1)|var|bool
var_2795 = relay.var("var_2795", dtype = "bool", shape = (1, 720))#candidate|2795|(1, 720)|var|bool
call_2793 = relay.TupleGetItem(func_351_call(relay.reshape(var_2794.astype('bool'), [45,]), relay.reshape(var_2795.astype('bool'), [720, 1]), ), 1)
call_2796 = relay.TupleGetItem(func_355_call(relay.reshape(var_2794.astype('bool'), [45,]), relay.reshape(var_2795.astype('bool'), [720, 1]), ), 1)
var_2800 = relay.var("var_2800", dtype = "bool", shape = (45, 1))#candidate|2800|(45, 1)|var|bool
bop_2801 = relay.logical_and(var_2794.astype('bool'), relay.reshape(var_2800.astype('bool'), relay.shape_of(var_2794))) # shape=(45, 1)
output = relay.Tuple([call_2762,bop_2786,call_2793,var_2795,bop_2801,])
output2 = relay.Tuple([call_2763,bop_2789,call_2796,var_2795,bop_2801,])
func_2810 = relay.Function([var_2785,var_2794,var_2795,var_2800,], output)
mod['func_2810'] = func_2810
mod = relay.transform.InferType()(mod)
mutated_mod['func_2810'] = func_2810
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2810_call = mutated_mod.get_global_var('func_2810')
var_2812 = relay.var("var_2812", dtype = "uint16", shape = (3, 5, 5))#candidate|2812|(3, 5, 5)|var|uint16
var_2813 = relay.var("var_2813", dtype = "bool", shape = (45, 1))#candidate|2813|(45, 1)|var|bool
var_2814 = relay.var("var_2814", dtype = "bool", shape = (1, 720))#candidate|2814|(1, 720)|var|bool
var_2815 = relay.var("var_2815", dtype = "bool", shape = (45, 1))#candidate|2815|(45, 1)|var|bool
call_2811 = func_2810_call(var_2812,var_2813,var_2814,var_2815,)
output = call_2811
func_2816 = relay.Function([var_2812,var_2813,var_2814,var_2815,], output)
mutated_mod['func_2816'] = func_2816
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2183_call = mod.get_global_var('func_2183')
func_2184_call = mutated_mod.get_global_var('func_2184')
call_2858 = relay.TupleGetItem(func_2183_call(), 0)
call_2859 = relay.TupleGetItem(func_2184_call(), 0)
func_2045_call = mod.get_global_var('func_2045')
func_2047_call = mutated_mod.get_global_var('func_2047')
call_2864 = func_2045_call()
call_2865 = func_2045_call()
func_2731_call = mod.get_global_var('func_2731')
func_2732_call = mutated_mod.get_global_var('func_2732')
call_2873 = relay.TupleGetItem(func_2731_call(), 0)
call_2874 = relay.TupleGetItem(func_2732_call(), 0)
func_1724_call = mod.get_global_var('func_1724')
func_1727_call = mutated_mod.get_global_var('func_1727')
const_2876 = relay.const([-2.915684,3.122297,-4.172058,-6.163978,3.165619,6.737288,-0.831463,1.490220,0.341144,6.841626,5.874458,3.585737,2.421586,-9.672459,0.814472,4.850906,-4.830561,6.490806,9.938616,7.140335,3.595382,7.445041,6.150440,-6.621455,9.508953,-1.856075,-4.394318,9.966910,-3.323807,4.045836,-1.271364,4.162459,8.540904,6.438694,-6.164350,6.097231,-2.738089,7.723928,4.425849,-8.468853,-9.488282,-4.543497,4.433807,-2.065635,4.231487,7.823546,-8.742301,0.660539,6.340391,0.509680,2.219796,-9.865760,0.507396,1.563969,7.127117,4.695575,-7.271263,8.739602,-6.832288,8.394728,6.552006,4.934772,7.098822,4.000693,-0.271123,4.395147,6.284812,8.282236,4.103421,-3.130690,-7.917021,-9.341782,7.096733,-8.270506,-3.358131,2.648299,-9.873612,8.496829,7.902766,7.078666,1.112947,1.873848,-6.679960,8.035490,-5.640497,-8.918856,-7.331573,9.695623,-6.587511,0.174073,-0.839637,-7.213419,8.155828,-1.942100,-5.844255,-9.633685,-8.584091,5.812080,-1.503394,0.017321,-3.403146,-7.818083,-0.604040,-2.259517,2.079378,8.479211,-3.212752,2.744396,-7.455745,2.920712,7.206627,-8.118155,2.319911,-2.067815,5.239919,-2.566934,4.900143,-4.279129,7.804017,1.468491,-1.805179,-3.112745,-8.548413,-9.160359,0.338281,-9.950465,-3.835023,9.914306,-0.849261,6.871325,4.680281,8.863993,-0.537621,-1.167072,-0.957311,4.864504,1.205602,7.024186,7.842321,-6.202942,7.369115,6.104341,7.969247,-2.184757,-9.397503,1.000257,0.426692,-0.468524,-4.443710,0.910178,-2.547064,3.425089,-3.829999,-8.927620,2.258038,1.612537,7.111811,-1.405974,7.191858,-0.553609,-4.112177,2.857057,-2.025409,-3.060293,-9.646499,4.222366,-0.317356,-0.661242,6.452836,-3.283320,3.355742,-3.830015,-9.989067,-7.725026,9.441514,7.413215,-3.362021,7.167825,-1.503760,-9.802254,-6.119308,-2.480104,-3.295683,3.467259,2.092334,-6.306537,1.946344,1.610095,7.114263,6.524419,-3.959973,6.115305,8.866450,3.014891,-8.972876,8.745112,6.413772,9.901173,-0.847959,8.334124,-3.821664,4.870675,-6.771525,0.773557,-3.382338,-3.996063,3.696706,1.463009,2.671836,-5.278317,-5.001083,-4.854170,0.558191,-5.136903,-8.536473,9.376838,8.095365,8.585979,6.525732,-5.720940,6.683676,-2.089728,-8.430552,-6.162599,-1.302002,4.410204,-1.869695,-3.825913,5.122326,8.517289,2.349959,-1.178428,0.168648,-4.165755,-0.534057,-3.317983,-5.293752,-2.405674,7.884852,-6.079266,0.758789,-4.013437,0.272224,-9.435856,9.726959,-1.060011,-5.990723,-9.385927,-6.913585,4.764030,8.282916,6.490133,-0.066954,-9.442728,-0.485378,-9.858968,-0.648009,7.107047,4.787813,-2.690412,9.780310,5.244435,6.332517,-5.695750,8.069128,-9.391198,4.821454,-9.272738,6.496526,9.524434,9.257929,0.641193,4.959478,8.124386,-7.453383,5.262489,-9.454410,-5.177604,-8.066734,-5.353048,-9.194816,-7.413353,-6.993064,9.245947,3.095670,6.696062,-7.856633,-5.244238,9.640904,1.130909,9.733484,0.004725,5.485194,8.674460,-9.598442,1.704021,-6.557807,2.785437,-8.440906,-5.060009,5.932703,-4.972579,9.268757,8.140912,-4.040966,-2.712684,-0.279371,-4.227895,6.737615,4.994606,9.806088,-0.284013,3.119507,-2.633221,0.082776,3.701919,-8.884112,-2.066926,1.462626,-1.164075,-9.748840,7.439913,-0.777517,3.746242,-6.597110,-0.894889,9.097724,5.629591,-9.562478,9.445398,3.773604,-7.537097,-9.410484,6.991519,7.813221,-6.159587,-7.127301,-4.397095,6.660258,6.397230,-2.077150,2.711232,-2.853363,-5.634990,-7.564382,-4.520983,5.308730,0.703049,-5.399152,7.668024,-7.110712,5.887307,8.023706,9.825311,1.902578,-2.400789,-9.434876,-8.111476,5.174589,9.176133,-4.219583,7.025494,9.280222,4.105720,2.039027,2.159573,-9.072264,-1.825440,-4.726514,-2.581300,-5.772573,3.501544,-6.331732,-7.510739,7.910185,0.276745,3.971049,6.473695,8.698838,-6.158311,5.964081,-8.296054,2.061293,9.277518,1.070371,7.573059,1.774962,-6.846201,-0.970054,4.682527,5.905785,8.836050,6.354998,1.434786,-8.076305,6.948945,5.584013,4.315933,-7.876163,-3.168160,4.797001,-1.522995,-8.672596,-1.916349,4.362266,-3.673557,6.704382,1.785732,-5.426733,6.951995,0.749768,-5.237872,6.463565,0.503659,5.868933,5.773611,1.753478,9.645612,-4.121525,8.029841,4.589101,-5.193365,4.036951,6.505372,-1.992316,-7.170569,5.342865,-1.442855,5.646563,-0.263246,9.031981,8.823906,5.543899,3.943566,-1.944307,6.158251,-9.669896,-2.419876,-6.188683,-0.726056,1.647898,-3.229229,7.627352,7.971927,-4.783644,6.805094,7.915767,-1.648072,8.810462,-2.642085,-3.872505,1.880895,-3.819192,1.179508,8.511276,5.833676,-9.243996,2.215760,3.923590,-2.536343,4.659095,1.558732,-6.608769,3.163346,0.718266,-8.098033,-2.136497,8.870283,9.769654,8.844990,-0.488021,3.510904,-3.234987,-0.317864,0.438737,8.832856,4.010431,9.945018,-7.581825,3.588298,1.185653,-4.637720,-3.450074,-1.781341,-0.116740,-3.045841,-8.070078,1.750688,2.225186,-0.385516,6.666416,9.871379,1.243968,-7.371880,0.505646,9.012965,0.119787,-7.501770,0.080096,-6.535950,-5.388097,-8.530804,-9.448974,1.697511,-8.712322,0.908703,7.485164,-0.188772,9.783154,4.556761,-1.271341,3.049402,-6.976064,0.909266,-4.776652,7.694618,1.547383,-6.007108,6.217155,5.059878,9.712123,6.349772,8.510568,5.259480,1.874100,2.887182,-4.826810,3.037239,9.224201,-6.931369,-5.892833,-0.881324,-5.544658,-5.128561,8.563587,9.040894,-9.157754,0.568945,-2.286186,-8.675612,9.547217,5.780047,8.845838,-0.255843,-0.582355,-3.547585,-0.698790,-0.726288,6.587628,3.318884,-7.555796,-7.009176,0.761801,-7.425830,-1.621609,1.007708,-9.175155,4.669993,-3.708005,-8.355571,5.504621,0.651562,-4.261005,-1.114013,-1.303372,-5.382584,-0.677317,4.314843,-4.963772,1.783083,0.748941,1.112693,4.352749,1.660941,-7.139869,-3.895526], dtype = "float32")#candidate|2876|(576,)|const|float32
call_2875 = relay.TupleGetItem(func_1724_call(relay.reshape(const_2876.astype('float32'), [576,])), 0)
call_2877 = relay.TupleGetItem(func_1727_call(relay.reshape(const_2876.astype('float32'), [576,])), 0)
output = relay.Tuple([call_2858,call_2864,call_2873,call_2875,const_2876,])
output2 = relay.Tuple([call_2859,call_2865,call_2874,call_2877,const_2876,])
func_2880 = relay.Function([], output)
mod['func_2880'] = func_2880
mod = relay.transform.InferType()(mod)
output = func_2880()
func_2881 = relay.Function([], output)
mutated_mod['func_2881'] = func_2881
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2183_call = mod.get_global_var('func_2183')
func_2184_call = mutated_mod.get_global_var('func_2184')
call_2905 = relay.TupleGetItem(func_2183_call(), 0)
call_2906 = relay.TupleGetItem(func_2184_call(), 0)
output = relay.Tuple([call_2905,])
output2 = relay.Tuple([call_2906,])
func_2907 = relay.Function([], output)
mod['func_2907'] = func_2907
mod = relay.transform.InferType()(mod)
output = func_2907()
func_2908 = relay.Function([], output)
mutated_mod['func_2908'] = func_2908
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1539_call = mod.get_global_var('func_1539')
func_1541_call = mutated_mod.get_global_var('func_1541')
call_2924 = func_1539_call()
call_2925 = func_1539_call()
output = call_2924
output2 = call_2925
func_2926 = relay.Function([], output)
mod['func_2926'] = func_2926
mod = relay.transform.InferType()(mod)
mutated_mod['func_2926'] = func_2926
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2926_call = mutated_mod.get_global_var('func_2926')
call_2927 = func_2926_call()
output = call_2927
func_2928 = relay.Function([], output)
mutated_mod['func_2928'] = func_2928
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2983 = relay.var("var_2983", dtype = "float32", shape = (13, 12, 11))#candidate|2983|(13, 12, 11)|var|float32
uop_2984 = relay.rsqrt(var_2983.astype('float32')) # shape=(13, 12, 11)
func_351_call = mod.get_global_var('func_351')
func_355_call = mutated_mod.get_global_var('func_355')
var_2990 = relay.var("var_2990", dtype = "bool", shape = (45,))#candidate|2990|(45,)|var|bool
var_2991 = relay.var("var_2991", dtype = "bool", shape = (720,))#candidate|2991|(720,)|var|bool
call_2989 = relay.TupleGetItem(func_351_call(relay.reshape(var_2990.astype('bool'), [45,]), relay.reshape(var_2991.astype('bool'), [720, 1]), ), 0)
call_2992 = relay.TupleGetItem(func_355_call(relay.reshape(var_2990.astype('bool'), [45,]), relay.reshape(var_2991.astype('bool'), [720, 1]), ), 0)
output = relay.Tuple([uop_2984,call_2989,var_2990,var_2991,])
output2 = relay.Tuple([uop_2984,call_2992,var_2990,var_2991,])
func_2995 = relay.Function([var_2983,var_2990,var_2991,], output)
mod['func_2995'] = func_2995
mod = relay.transform.InferType()(mod)
mutated_mod['func_2995'] = func_2995
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2995_call = mutated_mod.get_global_var('func_2995')
var_2997 = relay.var("var_2997", dtype = "float32", shape = (13, 12, 11))#candidate|2997|(13, 12, 11)|var|float32
var_2998 = relay.var("var_2998", dtype = "bool", shape = (45,))#candidate|2998|(45,)|var|bool
var_2999 = relay.var("var_2999", dtype = "bool", shape = (720,))#candidate|2999|(720,)|var|bool
call_2996 = func_2995_call(var_2997,var_2998,var_2999,)
output = call_2996
func_3000 = relay.Function([var_2997,var_2998,var_2999,], output)
mutated_mod['func_3000'] = func_3000
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2183_call = mod.get_global_var('func_2183')
func_2184_call = mutated_mod.get_global_var('func_2184')
call_3007 = relay.TupleGetItem(func_2183_call(), 0)
call_3008 = relay.TupleGetItem(func_2184_call(), 0)
const_3011 = relay.const([[[-3.347743,6.433060,-3.213097,-7.653244,0.616206,0.134783,6.077544,-9.070687,-5.001077,0.754074],[-9.955822,-9.037400,2.589374,6.697860,-8.470286,-5.193327,5.064733,7.472563,5.769211,-3.506285],[4.927096,0.686575,1.867293,-7.582281,0.300892,-1.820933,3.062701,0.972868,7.282936,-6.717871],[6.701738,-5.568232,-2.993424,-1.233910,7.073460,-1.068695,-4.548519,5.755761,2.697172,4.720786],[6.032605,6.116446,1.359170,9.457182,6.221552,-7.052538,-1.635939,-0.016417,-6.300871,-5.867257],[1.230357,-0.498111,3.135602,4.286372,6.319795,2.524364,-1.068376,8.648493,-1.044977,-5.944633],[3.040624,-5.313925,8.335863,-3.752074,-2.911479,7.997191,-1.919685,6.392048,-7.960890,-0.175649],[-3.742700,-8.812474,-0.170488,-9.260152,4.476252,5.088166,4.281690,-6.706446,-6.925791,-7.009912],[-7.356881,-6.203559,4.402154,-2.685659,6.774480,4.558525,-4.916449,-0.616099,3.859963,7.508878],[-8.858270,0.563884,0.737828,-4.679128,1.299170,-6.700432,5.188421,-0.738294,-4.426220,-7.554120],[8.631435,6.977929,0.240059,1.337270,-8.971950,5.434324,8.377514,-5.468560,4.493749,-5.683088]],[[6.283059,-9.397156,1.944826,8.661583,5.321334,8.027172,2.941493,-0.560750,9.074201,-5.540940],[2.200842,-4.503190,-6.219468,6.203649,8.631106,-0.826119,-4.749829,1.723730,4.879646,6.133499],[-4.913714,-4.746958,-7.937484,9.944920,-8.111751,3.156008,5.743073,-9.523299,9.166225,5.306139],[6.284749,4.743875,-2.925586,4.396135,-6.456931,-6.047683,-1.854826,-2.440664,-1.509998,-1.602447],[5.780022,-1.626673,0.846655,5.595464,-6.562120,4.250547,-2.474515,7.854648,-8.318058,6.339185],[1.230537,2.823822,-0.776711,-5.320296,3.615041,1.767701,7.160888,-8.497569,-9.649632,1.786315],[-4.675157,-4.536412,8.935185,-6.881721,-6.290215,-1.985722,3.283116,3.764621,-9.402710,-5.848755],[-1.364361,-8.725746,9.773376,-7.246933,-0.816678,-6.204879,9.360318,-2.448729,-8.966468,-8.226343],[-0.457559,1.834163,-5.313680,5.236135,-1.854708,6.965292,4.932749,-9.020269,-6.320532,-1.236335],[-7.760980,4.164645,4.909857,5.878726,-8.120317,-2.890666,-2.683659,6.521824,5.078927,3.311398],[-8.575523,-7.929441,8.331953,3.888066,-5.595862,-6.945477,-9.012264,-8.688569,3.841196,-9.747365]],[[2.340295,-2.661132,-1.092854,-2.154277,-9.099630,8.792290,-8.355098,-1.470055,1.876810,3.199921],[9.890491,-9.700705,-2.710705,6.799292,-2.331219,9.300388,8.611907,-3.771665,3.524200,0.266452],[-9.260817,9.550931,-5.767764,-7.342455,4.493619,5.755198,-7.821680,-5.355925,-7.750508,-1.328579],[3.716720,-6.254161,-4.839228,-1.139756,-6.387027,7.913836,0.055152,1.993541,9.896097,4.732941],[-9.556673,4.411012,-0.159958,7.517663,-6.802168,-6.331367,7.059070,-8.210040,5.967085,-7.954688],[-5.713511,-4.977171,-6.680605,3.715758,-1.441293,-0.650979,-3.165928,5.046591,9.982280,4.248239],[-5.282640,-6.469910,7.802103,2.026910,2.393523,-9.589463,-9.267601,8.580116,-6.910242,-4.843161],[9.176491,3.663649,-6.667211,4.601981,4.786917,3.555149,-5.008721,-8.606556,-9.402363,-8.298600],[8.655936,3.547453,1.313648,-2.090446,-1.280973,-8.390450,7.070254,2.051332,-6.412729,6.713632],[7.792856,-1.939415,-5.973053,4.748324,-8.658264,7.667478,-5.041310,8.415971,7.229760,-4.730983],[-1.848927,-5.265105,-6.251283,-8.588915,-5.277014,8.275984,-9.868180,4.947706,-5.967993,-9.027520]],[[-1.840866,-5.046386,-2.506236,-2.192117,3.756215,4.589983,-8.280816,0.025075,8.576364,5.728215],[3.869169,-4.422344,-9.089293,1.983559,-3.634207,-2.966168,6.451059,-3.764943,-5.193005,0.419444],[2.320514,-5.542014,-2.937760,-3.948650,1.840555,4.271035,-7.797740,-9.957955,9.903964,8.036447],[5.261351,-7.766791,-0.329145,2.927810,-1.188197,-9.857793,7.358612,3.131815,-7.192694,-8.367962],[9.651763,0.469444,2.554960,7.621913,9.064913,-2.796107,-0.326489,1.046937,2.150586,8.542799],[2.326442,5.426040,-7.298101,2.790546,4.771747,-6.866192,5.099312,-8.070905,-3.663060,-5.490670],[9.624637,-5.067897,8.463619,-6.109546,-4.074354,-7.209366,-6.516196,1.064127,-3.679611,3.464362],[-9.088193,7.651558,4.225318,-5.708589,3.935105,1.775462,6.715039,-7.251898,4.631423,-2.169406],[-7.533592,-0.837166,-1.302814,-6.984553,-6.813453,-9.777738,4.665387,-0.488975,-5.298590,-0.968923],[8.822009,-5.911025,-2.445442,-1.907548,2.465483,6.964003,8.189873,-0.710679,6.788875,8.608764],[7.451985,-4.903407,7.590933,3.254041,8.423773,2.825040,-5.265285,-2.044968,-8.760477,-0.728100]],[[9.662759,6.964118,1.462634,-9.901451,-4.732341,-1.881638,-2.293079,6.592553,-7.509194,0.856273],[-9.921949,-8.585251,-0.327413,9.242685,1.022613,-3.028923,-1.200402,-0.219896,-0.975829,-8.889856],[-3.681464,-6.649364,-4.786885,-4.349064,-5.246779,-5.735445,-2.950481,0.060339,5.875205,6.342844],[5.049705,5.658046,3.289403,9.896073,5.664107,9.699648,7.151923,-8.069808,2.053326,-9.057219],[-0.298775,-7.375473,6.811113,1.690694,9.698789,-1.479513,-6.410864,-7.245070,0.271264,1.584775],[0.697516,-7.934866,-0.378301,-6.801206,6.446616,-1.582638,-1.525916,-4.699716,-9.372598,-9.298010],[-1.096271,-1.421711,1.846363,-9.837909,9.855992,8.479488,-3.860288,1.262402,-9.274128,-1.403046],[-2.812746,3.236895,-5.606051,-4.931869,9.895113,-4.498475,3.520629,-4.947655,8.633611,6.115722],[2.713984,5.870920,-1.013509,-8.285765,9.023404,-8.647138,4.657061,-0.885799,2.220434,1.113776],[8.608467,-6.708043,-8.624644,6.575682,-9.100596,-1.483022,0.666598,2.579254,-1.095530,-1.169786],[6.616963,1.066485,-6.424564,-5.246735,8.186121,-1.942321,8.051729,5.056670,-9.367905,6.140692]],[[-5.012431,-2.588110,6.031655,6.919141,0.227590,6.971808,3.787447,-7.771256,-2.192141,8.978648],[-0.449222,4.188253,6.703413,2.941970,6.694974,-7.314509,2.770811,-7.366260,-9.769348,-6.261034],[7.341953,-1.155416,1.366650,0.074294,5.286726,1.954537,-2.614007,9.673953,2.849170,9.304925],[1.084769,-3.482648,-1.942294,-0.806847,9.095093,0.430561,-5.509987,1.169500,-0.290161,-8.754044],[8.044057,0.397700,-4.674372,5.761020,9.878137,-3.298663,-9.509375,4.399099,7.780982,-0.970899],[9.029445,-5.234484,6.429632,3.258362,-5.854713,-8.508840,3.158998,5.123512,-3.969336,0.182750],[-8.659885,1.596629,0.658001,2.484108,-8.552469,0.044694,3.194862,2.091075,5.900525,-9.665253],[-0.611293,2.441009,-9.272815,2.045754,-6.915422,5.241838,2.583747,8.521978,3.816976,4.920693],[-1.128374,7.858512,-1.933009,4.425924,5.403022,0.304187,-8.234677,2.110996,-6.613106,5.866961],[-6.762913,4.871962,1.384208,-5.684503,2.441470,-9.301708,-6.677348,-8.937470,0.630970,-5.325200],[0.831398,-8.525027,-5.407559,9.883735,8.819754,6.465728,9.194295,4.479071,-4.820554,6.050248]],[[9.206238,1.242656,-6.409900,7.160147,5.533613,-7.503372,0.794269,-1.309198,1.600740,-6.326627],[8.873221,-0.008505,-0.499337,1.228081,9.815905,7.504786,5.818320,-3.386776,-1.613393,8.487757],[4.895734,-6.199105,-3.168617,-8.396606,-0.191099,-7.406505,2.749531,-6.245897,-7.587769,-2.541154],[0.044128,6.115550,-8.577282,-3.265532,1.865462,8.098325,5.106193,1.127646,-2.923367,6.814527],[0.074995,-5.169617,-4.371874,-3.728719,4.968593,-4.475849,-7.343305,2.622424,0.615867,2.727294],[0.896152,3.984178,1.810917,-9.710446,4.961884,-1.147490,-0.629532,9.171549,-8.520160,3.398801],[-3.118998,-0.310062,4.582482,1.149696,4.800194,1.432964,1.090548,4.020997,-7.585615,0.673166],[-6.671942,-9.127185,-0.225378,9.902471,5.542966,-9.760854,8.037045,2.638743,-9.208442,5.577298],[5.373555,-5.846618,-7.160079,7.801602,-6.456484,-8.796980,1.283892,8.206572,-8.568790,-1.568469],[1.482472,8.368400,7.457833,-5.114729,4.914518,8.363118,-8.455553,-6.541865,2.924857,7.381187],[-3.335283,-7.302603,-1.986020,8.664143,2.257064,9.865484,7.647362,7.922383,8.398724,-7.432443]]], dtype = "float32")#candidate|3011|(7, 11, 10)|const|float32
bop_3012 = relay.logical_or(call_3007.astype('bool'), relay.reshape(const_3011.astype('bool'), relay.shape_of(call_3007))) # shape=(7, 11, 10)
bop_3015 = relay.logical_or(call_3008.astype('bool'), relay.reshape(const_3011.astype('bool'), relay.shape_of(call_3008))) # shape=(7, 11, 10)
output = relay.Tuple([bop_3012,])
output2 = relay.Tuple([bop_3015,])
func_3017 = relay.Function([], output)
mod['func_3017'] = func_3017
mod = relay.transform.InferType()(mod)
mutated_mod['func_3017'] = func_3017
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3017_call = mutated_mod.get_global_var('func_3017')
call_3018 = func_3017_call()
output = call_3018
func_3019 = relay.Function([], output)
mutated_mod['func_3019'] = func_3019
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2907_call = mod.get_global_var('func_2907')
func_2908_call = mutated_mod.get_global_var('func_2908')
call_3092 = relay.TupleGetItem(func_2907_call(), 0)
call_3093 = relay.TupleGetItem(func_2908_call(), 0)
func_195_call = mod.get_global_var('func_195')
func_198_call = mutated_mod.get_global_var('func_198')
var_3095 = relay.var("var_3095", dtype = "float32", shape = (576,))#candidate|3095|(576,)|var|float32
call_3094 = relay.TupleGetItem(func_195_call(relay.reshape(var_3095.astype('float32'), [16, 12, 3]), relay.reshape(var_3095.astype('float32'), [16, 12, 3]), ), 0)
call_3096 = relay.TupleGetItem(func_198_call(relay.reshape(var_3095.astype('float32'), [16, 12, 3]), relay.reshape(var_3095.astype('float32'), [16, 12, 3]), ), 0)
func_351_call = mod.get_global_var('func_351')
func_355_call = mutated_mod.get_global_var('func_355')
var_3104 = relay.var("var_3104", dtype = "bool", shape = (45,))#candidate|3104|(45,)|var|bool
var_3105 = relay.var("var_3105", dtype = "bool", shape = (720,))#candidate|3105|(720,)|var|bool
call_3103 = relay.TupleGetItem(func_351_call(relay.reshape(var_3104.astype('bool'), [45,]), relay.reshape(var_3105.astype('bool'), [720, 1]), ), 2)
call_3106 = relay.TupleGetItem(func_355_call(relay.reshape(var_3104.astype('bool'), [45,]), relay.reshape(var_3105.astype('bool'), [720, 1]), ), 2)
output = relay.Tuple([call_3092,call_3094,var_3095,call_3103,var_3104,var_3105,])
output2 = relay.Tuple([call_3093,call_3096,var_3095,call_3106,var_3104,var_3105,])
func_3113 = relay.Function([var_3095,var_3104,var_3105,], output)
mod['func_3113'] = func_3113
mod = relay.transform.InferType()(mod)
var_3114 = relay.var("var_3114", dtype = "float32", shape = (576,))#candidate|3114|(576,)|var|float32
var_3115 = relay.var("var_3115", dtype = "bool", shape = (45,))#candidate|3115|(45,)|var|bool
var_3116 = relay.var("var_3116", dtype = "bool", shape = (720,))#candidate|3116|(720,)|var|bool
output = func_3113(var_3114,var_3115,var_3116,)
func_3117 = relay.Function([var_3114,var_3115,var_3116,], output)
mutated_mod['func_3117'] = func_3117
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1221_call = mod.get_global_var('func_1221')
func_1223_call = mutated_mod.get_global_var('func_1223')
call_3131 = relay.TupleGetItem(func_1221_call(), 0)
call_3132 = relay.TupleGetItem(func_1223_call(), 0)
uop_3133 = relay.sin(call_3131.astype('float64')) # shape=(3, 5, 5)
uop_3135 = relay.sin(call_3132.astype('float64')) # shape=(3, 5, 5)
output = uop_3133
output2 = uop_3135
func_3141 = relay.Function([], output)
mod['func_3141'] = func_3141
mod = relay.transform.InferType()(mod)
mutated_mod['func_3141'] = func_3141
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3141_call = mutated_mod.get_global_var('func_3141')
call_3142 = func_3141_call()
output = call_3142
func_3143 = relay.Function([], output)
mutated_mod['func_3143'] = func_3143
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2731_call = mod.get_global_var('func_2731')
func_2732_call = mutated_mod.get_global_var('func_2732')
call_3149 = relay.TupleGetItem(func_2731_call(), 1)
call_3150 = relay.TupleGetItem(func_2732_call(), 1)
output = call_3149
output2 = call_3150
func_3156 = relay.Function([], output)
mod['func_3156'] = func_3156
mod = relay.transform.InferType()(mod)
output = func_3156()
func_3157 = relay.Function([], output)
mutated_mod['func_3157'] = func_3157
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1849_call = mod.get_global_var('func_1849')
func_1851_call = mutated_mod.get_global_var('func_1851')
call_3165 = func_1849_call()
call_3166 = func_1849_call()
output = relay.Tuple([call_3165,])
output2 = relay.Tuple([call_3166,])
func_3178 = relay.Function([], output)
mod['func_3178'] = func_3178
mod = relay.transform.InferType()(mod)
mutated_mod['func_3178'] = func_3178
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3178_call = mutated_mod.get_global_var('func_3178')
call_3179 = func_3178_call()
output = call_3179
func_3180 = relay.Function([], output)
mutated_mod['func_3180'] = func_3180
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3202 = relay.var("var_3202", dtype = "uint64", shape = (14, 2, 2))#candidate|3202|(14, 2, 2)|var|uint64
var_3203 = relay.var("var_3203", dtype = "uint64", shape = (14, 2, 2))#candidate|3203|(14, 2, 2)|var|uint64
bop_3204 = relay.greater_equal(var_3202.astype('bool'), relay.reshape(var_3203.astype('bool'), relay.shape_of(var_3202))) # shape=(14, 2, 2)
func_2907_call = mod.get_global_var('func_2907')
func_2908_call = mutated_mod.get_global_var('func_2908')
call_3207 = relay.TupleGetItem(func_2907_call(), 0)
call_3208 = relay.TupleGetItem(func_2908_call(), 0)
func_1564_call = mod.get_global_var('func_1564')
func_1567_call = mutated_mod.get_global_var('func_1567')
var_3213 = relay.var("var_3213", dtype = "float32", shape = (462,))#candidate|3213|(462,)|var|float32
call_3212 = relay.TupleGetItem(func_1564_call(relay.reshape(var_3213.astype('float32'), [7, 6, 11])), 0)
call_3214 = relay.TupleGetItem(func_1567_call(relay.reshape(var_3213.astype('float32'), [7, 6, 11])), 0)
var_3216 = relay.var("var_3216", dtype = "uint64", shape = (14, 2, 2))#candidate|3216|(14, 2, 2)|var|uint64
bop_3217 = relay.left_shift(var_3202.astype('int16'), relay.reshape(var_3216.astype('int16'), relay.shape_of(var_3202))) # shape=(14, 2, 2)
bop_3224 = relay.multiply(var_3202.astype('uint64'), relay.reshape(var_3216.astype('uint64'), relay.shape_of(var_3202))) # shape=(14, 2, 2)
output = relay.Tuple([bop_3204,call_3207,call_3212,var_3213,bop_3217,bop_3224,])
output2 = relay.Tuple([bop_3204,call_3208,call_3214,var_3213,bop_3217,bop_3224,])
func_3244 = relay.Function([var_3202,var_3203,var_3213,var_3216,], output)
mod['func_3244'] = func_3244
mod = relay.transform.InferType()(mod)
var_3245 = relay.var("var_3245", dtype = "uint64", shape = (14, 2, 2))#candidate|3245|(14, 2, 2)|var|uint64
var_3246 = relay.var("var_3246", dtype = "uint64", shape = (14, 2, 2))#candidate|3246|(14, 2, 2)|var|uint64
var_3247 = relay.var("var_3247", dtype = "float32", shape = (462,))#candidate|3247|(462,)|var|float32
var_3248 = relay.var("var_3248", dtype = "uint64", shape = (14, 2, 2))#candidate|3248|(14, 2, 2)|var|uint64
output = func_3244(var_3245,var_3246,var_3247,var_3248,)
func_3249 = relay.Function([var_3245,var_3246,var_3247,var_3248,], output)
mutated_mod['func_3249'] = func_3249
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2731_call = mod.get_global_var('func_2731')
func_2732_call = mutated_mod.get_global_var('func_2732')
call_3433 = relay.TupleGetItem(func_2731_call(), 0)
call_3434 = relay.TupleGetItem(func_2732_call(), 0)
output = relay.Tuple([call_3433,])
output2 = relay.Tuple([call_3434,])
func_3437 = relay.Function([], output)
mod['func_3437'] = func_3437
mod = relay.transform.InferType()(mod)
output = func_3437()
func_3438 = relay.Function([], output)
mutated_mod['func_3438'] = func_3438
mutated_mod = relay.transform.InferType()(mutated_mod)
func_849_call = mod.get_global_var('func_849')
func_850_call = mutated_mod.get_global_var('func_850')
call_3449 = func_849_call()
call_3450 = func_849_call()
output = call_3449
output2 = call_3450
func_3453 = relay.Function([], output)
mod['func_3453'] = func_3453
mod = relay.transform.InferType()(mod)
mutated_mod['func_3453'] = func_3453
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3453_call = mutated_mod.get_global_var('func_3453')
call_3454 = func_3453_call()
output = call_3454
func_3455 = relay.Function([], output)
mutated_mod['func_3455'] = func_3455
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3474 = relay.var("var_3474", dtype = "int64", shape = (2, 2, 10))#candidate|3474|(2, 2, 10)|var|int64
var_3475 = relay.var("var_3475", dtype = "int64", shape = (2, 2, 10))#candidate|3475|(2, 2, 10)|var|int64
bop_3476 = relay.left_shift(var_3474.astype('int64'), relay.reshape(var_3475.astype('int64'), relay.shape_of(var_3474))) # shape=(2, 2, 10)
uop_3479 = relay.erf(bop_3476.astype('float64')) # shape=(2, 2, 10)
output = relay.Tuple([uop_3479,])
output2 = relay.Tuple([uop_3479,])
func_3482 = relay.Function([var_3474,var_3475,], output)
mod['func_3482'] = func_3482
mod = relay.transform.InferType()(mod)
mutated_mod['func_3482'] = func_3482
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3482_call = mutated_mod.get_global_var('func_3482')
var_3484 = relay.var("var_3484", dtype = "int64", shape = (2, 2, 10))#candidate|3484|(2, 2, 10)|var|int64
var_3485 = relay.var("var_3485", dtype = "int64", shape = (2, 2, 10))#candidate|3485|(2, 2, 10)|var|int64
call_3483 = func_3482_call(var_3484,var_3485,)
output = call_3483
func_3486 = relay.Function([var_3484,var_3485,], output)
mutated_mod['func_3486'] = func_3486
mutated_mod = relay.transform.InferType()(mutated_mod)
func_286_call = mod.get_global_var('func_286')
func_288_call = mutated_mod.get_global_var('func_288')
call_3530 = relay.TupleGetItem(func_286_call(), 0)
call_3531 = relay.TupleGetItem(func_288_call(), 0)
func_3482_call = mod.get_global_var('func_3482')
func_3486_call = mutated_mod.get_global_var('func_3486')
const_3559 = relay.const([[-2,-2,-6,10,10,-8,-6,-9,-1,-9,8,6,5,4,7,-2,-4,-3,-7,-4,9,-7,-3,7,7,-3,-3,-10,8,6,3,6,4,-2,2,-7,-7,9,9,4]], dtype = "int64")#candidate|3559|(1, 40)|const|int64
call_3558 = relay.TupleGetItem(func_3482_call(relay.reshape(const_3559.astype('int64'), [2, 2, 10]), relay.reshape(const_3559.astype('int64'), [2, 2, 10]), ), 0)
call_3560 = relay.TupleGetItem(func_3486_call(relay.reshape(const_3559.astype('int64'), [2, 2, 10]), relay.reshape(const_3559.astype('int64'), [2, 2, 10]), ), 0)
output = relay.Tuple([call_3530,call_3558,const_3559,])
output2 = relay.Tuple([call_3531,call_3560,const_3559,])
func_3562 = relay.Function([], output)
mod['func_3562'] = func_3562
mod = relay.transform.InferType()(mod)
mutated_mod['func_3562'] = func_3562
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3562_call = mutated_mod.get_global_var('func_3562')
call_3563 = func_3562_call()
output = call_3563
func_3564 = relay.Function([], output)
mutated_mod['func_3564'] = func_3564
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3437_call = mod.get_global_var('func_3437')
func_3438_call = mutated_mod.get_global_var('func_3438')
call_3570 = relay.TupleGetItem(func_3437_call(), 0)
call_3571 = relay.TupleGetItem(func_3438_call(), 0)
uop_3573 = relay.rsqrt(call_3570.astype('float32')) # shape=(4, 3, 16)
uop_3575 = relay.rsqrt(call_3571.astype('float32')) # shape=(4, 3, 16)
func_2168_call = mod.get_global_var('func_2168')
func_2172_call = mutated_mod.get_global_var('func_2172')
const_3588 = relay.const([-2.560121,-9.411004,-9.509718,2.691690,-8.144095,-4.842239,-0.014471,5.775672,-0.516109,8.440546,-3.352730,0.429084,-2.423869,-4.010569,1.985813,3.286139,-9.300168,6.072220,5.653535,4.961440,-0.309697,-3.972142,-6.743917,-8.127848,-1.835403,-0.344728,-5.430639,-4.854426,-7.495912,-7.682272,7.856078,2.436370,2.148878,-6.461289,7.245054,3.474125,9.518044,0.885077,9.668885,6.991500,9.471757,-6.461046,4.688145,9.456364,-3.981862,1.038287,3.622494,0.335847,5.188026,1.688211,5.179290,-7.382289,-1.730232,-0.902557,-7.592386,-0.430325,0.058808,6.701504,4.289976,1.234675,-6.437231,2.226509,1.698618,5.130099,-6.371549,-2.710879,4.273339,0.303923,-2.415726,1.751597,6.823300,-5.110200,8.194156,6.173569,-0.887322], dtype = "float32")#candidate|3588|(75,)|const|float32
var_3589 = relay.var("var_3589", dtype = "float32", shape = (576,))#candidate|3589|(576,)|var|float32
call_3587 = relay.TupleGetItem(func_2168_call(relay.reshape(const_3588.astype('float32'), [3, 5, 5]), relay.reshape(var_3589.astype('float32'), [576,]), ), 0)
call_3590 = relay.TupleGetItem(func_2172_call(relay.reshape(const_3588.astype('float32'), [3, 5, 5]), relay.reshape(var_3589.astype('float32'), [576,]), ), 0)
bop_3598 = relay.logical_or(uop_3573.astype('bool'), relay.reshape(call_3570.astype('bool'), relay.shape_of(uop_3573))) # shape=(4, 3, 16)
bop_3601 = relay.logical_or(uop_3575.astype('bool'), relay.reshape(call_3571.astype('bool'), relay.shape_of(uop_3575))) # shape=(4, 3, 16)
bop_3606 = relay.mod(const_3588.astype('float32'), relay.reshape(call_3587.astype('float32'), relay.shape_of(const_3588))) # shape=(75,)
bop_3609 = relay.mod(const_3588.astype('float32'), relay.reshape(call_3590.astype('float32'), relay.shape_of(const_3588))) # shape=(75,)
output = relay.Tuple([var_3589,bop_3598,bop_3606,])
output2 = relay.Tuple([var_3589,bop_3601,bop_3609,])
func_3613 = relay.Function([var_3589,], output)
mod['func_3613'] = func_3613
mod = relay.transform.InferType()(mod)
mutated_mod['func_3613'] = func_3613
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3614 = relay.var("var_3614", dtype = "float32", shape = (576,))#candidate|3614|(576,)|var|float32
func_3613_call = mutated_mod.get_global_var('func_3613')
call_3615 = func_3613_call(var_3614)
output = call_3615
func_3616 = relay.Function([var_3614], output)
mutated_mod['func_3616'] = func_3616
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2907_call = mod.get_global_var('func_2907')
func_2908_call = mutated_mod.get_global_var('func_2908')
call_3628 = relay.TupleGetItem(func_2907_call(), 0)
call_3629 = relay.TupleGetItem(func_2908_call(), 0)
output = call_3628
output2 = call_3629
func_3635 = relay.Function([], output)
mod['func_3635'] = func_3635
mod = relay.transform.InferType()(mod)
mutated_mod['func_3635'] = func_3635
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3635_call = mutated_mod.get_global_var('func_3635')
call_3636 = func_3635_call()
output = call_3636
func_3637 = relay.Function([], output)
mutated_mod['func_3637'] = func_3637
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1506_call = mod.get_global_var('func_1506')
func_1507_call = mutated_mod.get_global_var('func_1507')
call_3641 = relay.TupleGetItem(func_1506_call(), 2)
call_3642 = relay.TupleGetItem(func_1507_call(), 2)
func_3178_call = mod.get_global_var('func_3178')
func_3180_call = mutated_mod.get_global_var('func_3180')
call_3651 = relay.TupleGetItem(func_3178_call(), 0)
call_3652 = relay.TupleGetItem(func_3180_call(), 0)
func_3613_call = mod.get_global_var('func_3613')
func_3616_call = mutated_mod.get_global_var('func_3616')
call_3653 = relay.TupleGetItem(func_3613_call(relay.reshape(call_3641.astype('float32'), [576,])), 2)
call_3654 = relay.TupleGetItem(func_3616_call(relay.reshape(call_3641.astype('float32'), [576,])), 2)
output = relay.Tuple([call_3641,call_3651,call_3653,])
output2 = relay.Tuple([call_3642,call_3652,call_3654,])
func_3657 = relay.Function([], output)
mod['func_3657'] = func_3657
mod = relay.transform.InferType()(mod)
output = func_3657()
func_3658 = relay.Function([], output)
mutated_mod['func_3658'] = func_3658
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3017_call = mod.get_global_var('func_3017')
func_3019_call = mutated_mod.get_global_var('func_3019')
call_3667 = relay.TupleGetItem(func_3017_call(), 0)
call_3668 = relay.TupleGetItem(func_3019_call(), 0)
output = call_3667
output2 = call_3668
func_3669 = relay.Function([], output)
mod['func_3669'] = func_3669
mod = relay.transform.InferType()(mod)
output = func_3669()
func_3670 = relay.Function([], output)
mutated_mod['func_3670'] = func_3670
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3635_call = mod.get_global_var('func_3635')
func_3637_call = mutated_mod.get_global_var('func_3637')
call_3695 = func_3635_call()
call_3696 = func_3635_call()
var_3699 = relay.var("var_3699", dtype = "float32", shape = (7, 11, 10))#candidate|3699|(7, 11, 10)|var|float32
bop_3700 = relay.multiply(call_3695.astype('int8'), relay.reshape(var_3699.astype('int8'), relay.shape_of(call_3695))) # shape=(7, 11, 10)
bop_3703 = relay.multiply(call_3696.astype('int8'), relay.reshape(var_3699.astype('int8'), relay.shape_of(call_3696))) # shape=(7, 11, 10)
uop_3705 = relay.asinh(var_3699.astype('float64')) # shape=(7, 11, 10)
output = relay.Tuple([bop_3700,uop_3705,])
output2 = relay.Tuple([bop_3703,uop_3705,])
func_3710 = relay.Function([var_3699,], output)
mod['func_3710'] = func_3710
mod = relay.transform.InferType()(mod)
var_3711 = relay.var("var_3711", dtype = "float32", shape = (7, 11, 10))#candidate|3711|(7, 11, 10)|var|float32
output = func_3710(var_3711)
func_3712 = relay.Function([var_3711], output)
mutated_mod['func_3712'] = func_3712
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3657_call = mod.get_global_var('func_3657')
func_3658_call = mutated_mod.get_global_var('func_3658')
call_3733 = relay.TupleGetItem(func_3657_call(), 2)
call_3734 = relay.TupleGetItem(func_3658_call(), 2)
func_90_call = mod.get_global_var('func_90')
func_94_call = mutated_mod.get_global_var('func_94')
var_3737 = relay.var("var_3737", dtype = "bool", shape = (1, 45))#candidate|3737|(1, 45)|var|bool
const_3738 = relay.const([[True,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,False,False,False,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,False,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,True,False,True,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,True,True,True,False,False,False,False,False,False,False,False,True,False,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,True,True,False,False,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,True,False,False,False,False,False,True,True,False,False,False,False,False,True,True],[False,True,False,False,True,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,True,False,False,True,True,False,False,True,True,True,False,False,True,False,True,True,True,False,True,False,False,False,True,False,False,False,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,False,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,True,False,False,True,False,False,False,False,False,True,False,False,True,False,False,True,False,False,True,True,False,False,True,True,False,False,True,True,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,True,False],[False,False,True,True,False,True,True,False,True,False,False,True,False,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,False,False,True,True,False,False,False,False,True,True,False,False,True,True,False,True,True,True,True,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,False,False,True,True,True,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,True,False,False,False,True,False,True,False,True,True,False,True,False,True,True,True,True,True,True,True,False,True,True,True,False],[False,False,True,False,False,False,True,False,True,True,True,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,False,True,True,False,False,False,True,True,False,False,False,False,False,False,True,False,True,True,True,False,False,True,True,False,True,False,False,True,False,False,False,False,True,False,False,True,False,False,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,False,False,False,False,True,False,False,True,True,True,True,False,True,True,False,False,True,True,False,False,False,True,True,False,True,False,False,False,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,False,True,True,False,False,False,True,True,False,False,False,False,True]], dtype = "bool")#candidate|3738|(4, 180)|const|bool
call_3736 = func_90_call(relay.reshape(var_3737.astype('bool'), [15, 1, 3]), relay.reshape(const_3738.astype('bool'), [15, 16, 3]), )
call_3739 = func_90_call(relay.reshape(var_3737.astype('bool'), [15, 1, 3]), relay.reshape(const_3738.astype('bool'), [15, 16, 3]), )
output = relay.Tuple([call_3733,call_3736,var_3737,const_3738,])
output2 = relay.Tuple([call_3734,call_3739,var_3737,const_3738,])
func_3759 = relay.Function([var_3737,], output)
mod['func_3759'] = func_3759
mod = relay.transform.InferType()(mod)
mutated_mod['func_3759'] = func_3759
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3760 = relay.var("var_3760", dtype = "bool", shape = (1, 45))#candidate|3760|(1, 45)|var|bool
func_3759_call = mutated_mod.get_global_var('func_3759')
call_3761 = func_3759_call(var_3760)
output = call_3761
func_3762 = relay.Function([var_3760], output)
mutated_mod['func_3762'] = func_3762
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3437_call = mod.get_global_var('func_3437')
func_3438_call = mutated_mod.get_global_var('func_3438')
call_3767 = relay.TupleGetItem(func_3437_call(), 0)
call_3768 = relay.TupleGetItem(func_3438_call(), 0)
uop_3780 = relay.acos(call_3767.astype('float64')) # shape=(4, 3, 16)
uop_3782 = relay.acos(call_3768.astype('float64')) # shape=(4, 3, 16)
func_1263_call = mod.get_global_var('func_1263')
func_1266_call = mutated_mod.get_global_var('func_1266')
var_3793 = relay.var("var_3793", dtype = "bool", shape = (720,))#candidate|3793|(720,)|var|bool
call_3792 = relay.TupleGetItem(func_1263_call(relay.reshape(var_3793.astype('bool'), [720,])), 3)
call_3794 = relay.TupleGetItem(func_1266_call(relay.reshape(var_3793.astype('bool'), [720,])), 3)
var_3807 = relay.var("var_3807", dtype = "float64", shape = (4, 3, 16))#candidate|3807|(4, 3, 16)|var|float64
bop_3808 = relay.floor_divide(uop_3780.astype('float32'), relay.reshape(var_3807.astype('float32'), relay.shape_of(uop_3780))) # shape=(4, 3, 16)
bop_3811 = relay.floor_divide(uop_3782.astype('float32'), relay.reshape(var_3807.astype('float32'), relay.shape_of(uop_3782))) # shape=(4, 3, 16)
var_3816 = relay.var("var_3816", dtype = "float64", shape = (4, 3, 16))#candidate|3816|(4, 3, 16)|var|float64
bop_3817 = relay.bitwise_xor(var_3807.astype('int64'), relay.reshape(var_3816.astype('int64'), relay.shape_of(var_3807))) # shape=(4, 3, 16)
output = relay.Tuple([call_3792,var_3793,bop_3808,bop_3817,])
output2 = relay.Tuple([call_3794,var_3793,bop_3811,bop_3817,])
func_3844 = relay.Function([var_3793,var_3807,var_3816,], output)
mod['func_3844'] = func_3844
mod = relay.transform.InferType()(mod)
mutated_mod['func_3844'] = func_3844
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3844_call = mutated_mod.get_global_var('func_3844')
var_3846 = relay.var("var_3846", dtype = "bool", shape = (720,))#candidate|3846|(720,)|var|bool
var_3847 = relay.var("var_3847", dtype = "float64", shape = (4, 3, 16))#candidate|3847|(4, 3, 16)|var|float64
var_3848 = relay.var("var_3848", dtype = "float64", shape = (4, 3, 16))#candidate|3848|(4, 3, 16)|var|float64
call_3845 = func_3844_call(var_3846,var_3847,var_3848,)
output = call_3845
func_3849 = relay.Function([var_3846,var_3847,var_3848,], output)
mutated_mod['func_3849'] = func_3849
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2926_call = mod.get_global_var('func_2926')
func_2928_call = mutated_mod.get_global_var('func_2928')
call_3865 = func_2926_call()
call_3866 = func_2926_call()
func_3759_call = mod.get_global_var('func_3759')
func_3762_call = mutated_mod.get_global_var('func_3762')
const_3872 = relay.const([False,False,False,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,False,True,False,False,False,False,True,True,False,True,True,False,False,True,True,False,False,True,True,False,True,True,True,True,True,True,True], dtype = "bool")#candidate|3872|(45,)|const|bool
call_3871 = relay.TupleGetItem(func_3759_call(relay.reshape(const_3872.astype('bool'), [1, 45])), 0)
call_3873 = relay.TupleGetItem(func_3762_call(relay.reshape(const_3872.astype('bool'), [1, 45])), 0)
output = relay.Tuple([call_3865,call_3871,const_3872,])
output2 = relay.Tuple([call_3866,call_3873,const_3872,])
func_3876 = relay.Function([], output)
mod['func_3876'] = func_3876
mod = relay.transform.InferType()(mod)
output = func_3876()
func_3877 = relay.Function([], output)
mutated_mod['func_3877'] = func_3877
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3437_call = mod.get_global_var('func_3437')
func_3438_call = mutated_mod.get_global_var('func_3438')
call_3886 = relay.TupleGetItem(func_3437_call(), 0)
call_3887 = relay.TupleGetItem(func_3438_call(), 0)
uop_3898 = relay.sinh(call_3886.astype('float64')) # shape=(4, 3, 16)
uop_3900 = relay.sinh(call_3887.astype('float64')) # shape=(4, 3, 16)
bop_3910 = relay.add(uop_3898.astype('float32'), relay.reshape(call_3886.astype('float32'), relay.shape_of(uop_3898))) # shape=(4, 3, 16)
bop_3913 = relay.add(uop_3900.astype('float32'), relay.reshape(call_3887.astype('float32'), relay.shape_of(uop_3900))) # shape=(4, 3, 16)
uop_3924 = relay.acosh(bop_3910.astype('float32')) # shape=(4, 3, 16)
uop_3926 = relay.acosh(bop_3913.astype('float32')) # shape=(4, 3, 16)
uop_3934 = relay.log(uop_3924.astype('float64')) # shape=(4, 3, 16)
uop_3936 = relay.log(uop_3926.astype('float64')) # shape=(4, 3, 16)
output = relay.Tuple([uop_3934,])
output2 = relay.Tuple([uop_3936,])
func_3941 = relay.Function([], output)
mod['func_3941'] = func_3941
mod = relay.transform.InferType()(mod)
mutated_mod['func_3941'] = func_3941
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3941_call = mutated_mod.get_global_var('func_3941')
call_3942 = func_3941_call()
output = call_3942
func_3943 = relay.Function([], output)
mutated_mod['func_3943'] = func_3943
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3965 = relay.var("var_3965", dtype = "float64", shape = (15, 11, 10))#candidate|3965|(15, 11, 10)|var|float64
uop_3966 = relay.cosh(var_3965.astype('float64')) # shape=(15, 11, 10)
uop_3973 = relay.sin(var_3965.astype('float32')) # shape=(15, 11, 10)
output = relay.Tuple([uop_3966,uop_3973,])
output2 = relay.Tuple([uop_3966,uop_3973,])
func_3975 = relay.Function([var_3965,], output)
mod['func_3975'] = func_3975
mod = relay.transform.InferType()(mod)
mutated_mod['func_3975'] = func_3975
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3976 = relay.var("var_3976", dtype = "float64", shape = (15, 11, 10))#candidate|3976|(15, 11, 10)|var|float64
func_3975_call = mutated_mod.get_global_var('func_3975')
call_3977 = func_3975_call(var_3976)
output = call_3977
func_3978 = relay.Function([var_3976], output)
mutated_mod['func_3978'] = func_3978
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4006 = relay.var("var_4006", dtype = "uint32", shape = (2, 6, 15))#candidate|4006|(2, 6, 15)|var|uint32
var_4007 = relay.var("var_4007", dtype = "uint32", shape = (2, 6, 15))#candidate|4007|(2, 6, 15)|var|uint32
bop_4008 = relay.less_equal(var_4006.astype('bool'), relay.reshape(var_4007.astype('bool'), relay.shape_of(var_4006))) # shape=(2, 6, 15)
uop_4012 = relay.log(bop_4008.astype('float32')) # shape=(2, 6, 15)
output = relay.Tuple([uop_4012,])
output2 = relay.Tuple([uop_4012,])
func_4018 = relay.Function([var_4006,var_4007,], output)
mod['func_4018'] = func_4018
mod = relay.transform.InferType()(mod)
mutated_mod['func_4018'] = func_4018
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4018_call = mutated_mod.get_global_var('func_4018')
var_4020 = relay.var("var_4020", dtype = "uint32", shape = (2, 6, 15))#candidate|4020|(2, 6, 15)|var|uint32
var_4021 = relay.var("var_4021", dtype = "uint32", shape = (2, 6, 15))#candidate|4021|(2, 6, 15)|var|uint32
call_4019 = func_4018_call(var_4020,var_4021,)
output = call_4019
func_4022 = relay.Function([var_4020,var_4021,], output)
mutated_mod['func_4022'] = func_4022
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1849_call = mod.get_global_var('func_1849')
func_1851_call = mutated_mod.get_global_var('func_1851')
call_4044 = func_1849_call()
call_4045 = func_1849_call()
output = relay.Tuple([call_4044,])
output2 = relay.Tuple([call_4045,])
func_4051 = relay.Function([], output)
mod['func_4051'] = func_4051
mod = relay.transform.InferType()(mod)
output = func_4051()
func_4052 = relay.Function([], output)
mutated_mod['func_4052'] = func_4052
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3156_call = mod.get_global_var('func_3156')
func_3157_call = mutated_mod.get_global_var('func_3157')
call_4073 = func_3156_call()
call_4074 = func_3156_call()
output = relay.Tuple([call_4073,])
output2 = relay.Tuple([call_4074,])
func_4077 = relay.Function([], output)
mod['func_4077'] = func_4077
mod = relay.transform.InferType()(mod)
mutated_mod['func_4077'] = func_4077
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4077_call = mutated_mod.get_global_var('func_4077')
call_4078 = func_4077_call()
output = call_4078
func_4079 = relay.Function([], output)
mutated_mod['func_4079'] = func_4079
mutated_mod = relay.transform.InferType()(mutated_mod)
func_663_call = mod.get_global_var('func_663')
func_664_call = mutated_mod.get_global_var('func_664')
call_4114 = relay.TupleGetItem(func_663_call(), 0)
call_4115 = relay.TupleGetItem(func_664_call(), 0)
var_4120 = relay.var("var_4120", dtype = "float32", shape = (7, 11, 10))#candidate|4120|(7, 11, 10)|var|float32
bop_4121 = relay.bitwise_xor(call_4114.astype('int64'), relay.reshape(var_4120.astype('int64'), relay.shape_of(call_4114))) # shape=(7, 11, 10)
bop_4124 = relay.bitwise_xor(call_4115.astype('int64'), relay.reshape(var_4120.astype('int64'), relay.shape_of(call_4115))) # shape=(7, 11, 10)
func_443_call = mod.get_global_var('func_443')
func_447_call = mutated_mod.get_global_var('func_447')
var_4132 = relay.var("var_4132", dtype = "float32", shape = (70,))#candidate|4132|(70,)|var|float32
const_4133 = relay.const([[False,False,True,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,True,True,False,False,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,False,True,False,True,True,False]], dtype = "bool")#candidate|4133|(1, 45)|const|bool
var_4134 = relay.var("var_4134", dtype = "bool", shape = (720,))#candidate|4134|(720,)|var|bool
call_4131 = relay.TupleGetItem(func_443_call(relay.reshape(var_4132.astype('float32'), [1, 5, 14]), relay.reshape(const_4133.astype('bool'), [45,]), relay.reshape(var_4134.astype('bool'), [720,]), ), 0)
call_4135 = relay.TupleGetItem(func_447_call(relay.reshape(var_4132.astype('float32'), [1, 5, 14]), relay.reshape(const_4133.astype('bool'), [45,]), relay.reshape(var_4134.astype('bool'), [720,]), ), 0)
output = relay.Tuple([bop_4121,call_4131,var_4132,const_4133,var_4134,])
output2 = relay.Tuple([bop_4124,call_4135,var_4132,const_4133,var_4134,])
func_4154 = relay.Function([var_4120,var_4132,var_4134,], output)
mod['func_4154'] = func_4154
mod = relay.transform.InferType()(mod)
mutated_mod['func_4154'] = func_4154
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4154_call = mutated_mod.get_global_var('func_4154')
var_4156 = relay.var("var_4156", dtype = "float32", shape = (7, 11, 10))#candidate|4156|(7, 11, 10)|var|float32
var_4157 = relay.var("var_4157", dtype = "float32", shape = (70,))#candidate|4157|(70,)|var|float32
var_4158 = relay.var("var_4158", dtype = "bool", shape = (720,))#candidate|4158|(720,)|var|bool
call_4155 = func_4154_call(var_4156,var_4157,var_4158,)
output = call_4155
func_4159 = relay.Function([var_4156,var_4157,var_4158,], output)
mutated_mod['func_4159'] = func_4159
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4163 = relay.var("var_4163", dtype = "int8", shape = (10, 4, 14))#candidate|4163|(10, 4, 14)|var|int8
var_4164 = relay.var("var_4164", dtype = "int8", shape = (10, 4, 14))#candidate|4164|(10, 4, 14)|var|int8
bop_4165 = relay.multiply(var_4163.astype('int8'), relay.reshape(var_4164.astype('int8'), relay.shape_of(var_4163))) # shape=(10, 4, 14)
output = relay.Tuple([bop_4165,])
output2 = relay.Tuple([bop_4165,])
func_4173 = relay.Function([var_4163,var_4164,], output)
mod['func_4173'] = func_4173
mod = relay.transform.InferType()(mod)
var_4174 = relay.var("var_4174", dtype = "int8", shape = (10, 4, 14))#candidate|4174|(10, 4, 14)|var|int8
var_4175 = relay.var("var_4175", dtype = "int8", shape = (10, 4, 14))#candidate|4175|(10, 4, 14)|var|int8
output = func_4173(var_4174,var_4175,)
func_4176 = relay.Function([var_4174,var_4175,], output)
mutated_mod['func_4176'] = func_4176
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3017_call = mod.get_global_var('func_3017')
func_3019_call = mutated_mod.get_global_var('func_3019')
call_4244 = relay.TupleGetItem(func_3017_call(), 0)
call_4245 = relay.TupleGetItem(func_3019_call(), 0)
var_4248 = relay.var("var_4248", dtype = "bool", shape = (7, 11, 10))#candidate|4248|(7, 11, 10)|var|bool
bop_4249 = relay.greater_equal(call_4244.astype('bool'), relay.reshape(var_4248.astype('bool'), relay.shape_of(call_4244))) # shape=(7, 11, 10)
bop_4252 = relay.greater_equal(call_4245.astype('bool'), relay.reshape(var_4248.astype('bool'), relay.shape_of(call_4245))) # shape=(7, 11, 10)
output = bop_4249
output2 = bop_4252
func_4272 = relay.Function([var_4248,], output)
mod['func_4272'] = func_4272
mod = relay.transform.InferType()(mod)
mutated_mod['func_4272'] = func_4272
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4273 = relay.var("var_4273", dtype = "bool", shape = (7, 11, 10))#candidate|4273|(7, 11, 10)|var|bool
func_4272_call = mutated_mod.get_global_var('func_4272')
call_4274 = func_4272_call(var_4273)
output = call_4274
func_4275 = relay.Function([var_4273], output)
mutated_mod['func_4275'] = func_4275
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4290 = relay.var("var_4290", dtype = "uint8", shape = (8, 14, 2))#candidate|4290|(8, 14, 2)|var|uint8
const_4291 = relay.const([[[6,5],[-9,5],[9,1],[6,-7],[4,-4],[5,5],[4,10],[4,4],[-7,8],[-9,5],[-4,-4],[-10,7],[-4,9],[2,3]],[[-3,-6],[4,-9],[-8,-6],[1,5],[-10,4],[-1,4],[-1,7],[8,3],[-4,8],[-10,10],[3,-5],[7,-10],[8,-7],[-6,-4]],[[-3,-2],[10,2],[-4,-3],[-7,-2],[-9,7],[-8,5],[4,5],[-2,-8],[-2,5],[8,8],[-8,-8],[-4,-9],[9,10],[-4,5]],[[6,1],[1,-4],[2,6],[7,-3],[5,-3],[-4,-3],[-8,-10],[10,4],[7,4],[5,-2],[-7,8],[-2,-2],[4,7],[8,1]],[[-5,-2],[-8,10],[2,-3],[4,-5],[-6,7],[-3,7],[4,5],[4,-10],[7,-3],[-8,10],[9,-6],[-1,-3],[3,-6],[-1,-6]],[[-7,-9],[-7,1],[10,-8],[-8,-10],[-4,-1],[-7,-3],[-6,-1],[-10,-4],[-7,9],[1,-7],[5,-3],[4,2],[-10,-2],[-9,1]],[[1,-2],[6,1],[8,-9],[-9,2],[-2,9],[-8,3],[-5,-7],[9,8],[8,3],[8,9],[-4,-7],[-5,-9],[3,2],[-10,-9]],[[9,7],[-4,7],[7,-7],[-6,2],[-7,4],[-5,-8],[10,10],[-4,-3],[5,-10],[-7,2],[-7,-10],[9,2],[9,9],[-9,-4]]], dtype = "uint8")#candidate|4291|(8, 14, 2)|const|uint8
bop_4292 = relay.maximum(var_4290.astype('uint8'), relay.reshape(const_4291.astype('uint8'), relay.shape_of(var_4290))) # shape=(8, 14, 2)
uop_4295 = relay.erf(const_4291.astype('float64')) # shape=(8, 14, 2)
output = relay.Tuple([bop_4292,uop_4295,])
output2 = relay.Tuple([bop_4292,uop_4295,])
func_4306 = relay.Function([var_4290,], output)
mod['func_4306'] = func_4306
mod = relay.transform.InferType()(mod)
mutated_mod['func_4306'] = func_4306
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4307 = relay.var("var_4307", dtype = "uint8", shape = (8, 14, 2))#candidate|4307|(8, 14, 2)|var|uint8
func_4306_call = mutated_mod.get_global_var('func_4306')
call_4308 = func_4306_call(var_4307)
output = call_4308
func_4309 = relay.Function([var_4307], output)
mutated_mod['func_4309'] = func_4309
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4311 = relay.var("var_4311", dtype = "float64", shape = (10, 13, 13))#candidate|4311|(10, 13, 13)|var|float64
uop_4312 = relay.sqrt(var_4311.astype('float64')) # shape=(10, 13, 13)
func_2299_call = mod.get_global_var('func_2299')
func_2302_call = mutated_mod.get_global_var('func_2302')
const_4315 = relay.const([5,-5,5,1,8,-10,7,-1,-7,-4,6,-7,9,-4,-10,-3,1,5,3,7,-3,8,-9,6,-2,10,8,1,-7,-2,-7,3,5,6,-4,-9,-4,-9,-8,8,7,7,9,3,-4,4,-2,-3,-5,-4,4,7,2,10,3,9,-7,-5,8,-2,-3,-8,-3,1,-10,6,10,-1,-9,2,8,-2,-10,3,3,2,2,-10,-9,-5,-7,2,-4,8,5,-5,-3,-9,-4,-1,-8,4,1,6,-6,-10,2,10,6,-9,-8,-3,3,-6,-4,3,-9,1,4,3,-10,5,-4,8,-1,-8,-3,-1,-1,-3,-5,-7,5,6,5,1,2,-7,-9,4,-6,-10,-1,7,-2,-7,7,1,1,-3,-7,-4,-10,-3,8,8,10,-2,3,-5,10,-1,-7,10,10,-6,10,7,-3,-9,-10,4,9,10,-5,-8,-8,-1,1,-3,-7,-7,-1,8,-5,-4,6,-4,3,-8,9,-1,-4,2,-6,-6,3,3,-8,-7,-8,9,-6,10,8,-8,-3,-6,3,-10,-2,-5,10,9,9,-4,-5,-2,5,-2,9,2,9,8,-3,-3,5,-9,6,-4,4,-3,-10,-1,8,-9,-1,8,8,-4,-4,-5,-6,5,-2,6,-8,4,5,-4,9,9,-4,-2,3,-3,-2,8,-1,-10,2,9,-7,8,10,-3,5,9,-9,2,-8,10,3,7,-1,-9,5,4,2,-1,6,-3,8,-2,4,10,1,1,-8,-10,-5,5,-8,1,-5,-6,8,1,1,2,9,5,-2,4,5,2,-4,2,-7,3,5,2,7,7,7,3,-1,-6,5,2,5,-1,-10,10,-8,-9,2,-6,5,9,3,7,-10,-7,-4,-8,5,-7,-4,2,10,5,-3,3,4,-9,5,3,1,-2,-2,-6,-2,2,10,8,-5,1,3,5,7,-6,-10,-10,10,-7,-2,9,-6,2,5,5,2,-10,-2,-4,-9,-3,-9,1,5,-4,-3,-5,-4,-6,-4,10,6,2,-5,9,7,4,-7,7,-2,-10,-4,5,-1,-4,9,2,-4,-3,3,2,6,-5,-10,4,1,-7,1,2,3,9,-10,7,-7,2,4,7,-1,-10,5,4,-10,-3,-5,2,-1,-7,-2,-4,7,-1,3,1,-2,-6,7,-3,3,7,-10,-3,2,1,-6,-4,-4,-6,-5,-2,7,2,-10,-10,-4,8,-8,5,2,-5,-5,-3,-6,-6,3,-5,-8,4,-5,-2,3,-3,2,4,-7,4,10,9,-4,6,-4,10,10,-1,-2,6,-4,10,-10,-10,3,-7,9,6,2,5,-3,-2,-10,-9,-8,8,5,-8,2,2,-1,-6,-6,6,-6,-7,-5,-3,-2,9,-9,-9,-5,-1,-4,10,-1,-6,1,-8,4,-6,-2,7,-3,-1,-3,9,9,5,-3,1,-3,5,-10,3,-6,-6,-7,-2,7,-3,8,-8,-1,2,-10,-2,-9,-1,7,6,10,-4,5,7,3,-2,-3,-10,5,-10,7,2,-8,9,-6,3,-7,4,6,5,3,-2], dtype = "int32")#candidate|4315|(576,)|const|int32
call_4314 = func_2299_call(relay.reshape(const_4315.astype('int32'), [16, 12, 3]))
call_4316 = func_2299_call(relay.reshape(const_4315.astype('int32'), [16, 12, 3]))
output = relay.Tuple([uop_4312,call_4314,const_4315,])
output2 = relay.Tuple([uop_4312,call_4316,const_4315,])
func_4332 = relay.Function([var_4311,], output)
mod['func_4332'] = func_4332
mod = relay.transform.InferType()(mod)
var_4333 = relay.var("var_4333", dtype = "float64", shape = (10, 13, 13))#candidate|4333|(10, 13, 13)|var|float64
output = func_4332(var_4333)
func_4334 = relay.Function([var_4333], output)
mutated_mod['func_4334'] = func_4334
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3635_call = mod.get_global_var('func_3635')
func_3637_call = mutated_mod.get_global_var('func_3637')
call_4336 = func_3635_call()
call_4337 = func_3635_call()
var_4344 = relay.var("var_4344", dtype = "float32", shape = (7, 11, 10))#candidate|4344|(7, 11, 10)|var|float32
bop_4345 = relay.logical_xor(call_4336.astype('int32'), relay.reshape(var_4344.astype('int32'), relay.shape_of(call_4336))) # shape=(7, 11, 10)
bop_4348 = relay.logical_xor(call_4337.astype('int32'), relay.reshape(var_4344.astype('int32'), relay.shape_of(call_4337))) # shape=(7, 11, 10)
func_195_call = mod.get_global_var('func_195')
func_198_call = mutated_mod.get_global_var('func_198')
var_4363 = relay.var("var_4363", dtype = "float32", shape = (576,))#candidate|4363|(576,)|var|float32
call_4362 = relay.TupleGetItem(func_195_call(relay.reshape(var_4363.astype('float32'), [16, 12, 3]), relay.reshape(var_4363.astype('float32'), [16, 12, 3]), ), 0)
call_4364 = relay.TupleGetItem(func_198_call(relay.reshape(var_4363.astype('float32'), [16, 12, 3]), relay.reshape(var_4363.astype('float32'), [16, 12, 3]), ), 0)
output = relay.Tuple([bop_4345,call_4362,var_4363,])
output2 = relay.Tuple([bop_4348,call_4364,var_4363,])
func_4380 = relay.Function([var_4344,var_4363,], output)
mod['func_4380'] = func_4380
mod = relay.transform.InferType()(mod)
var_4381 = relay.var("var_4381", dtype = "float32", shape = (7, 11, 10))#candidate|4381|(7, 11, 10)|var|float32
var_4382 = relay.var("var_4382", dtype = "float32", shape = (576,))#candidate|4382|(576,)|var|float32
output = func_4380(var_4381,var_4382,)
func_4383 = relay.Function([var_4381,var_4382,], output)
mutated_mod['func_4383'] = func_4383
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1539_call = mod.get_global_var('func_1539')
func_1541_call = mutated_mod.get_global_var('func_1541')
call_4441 = func_1539_call()
call_4442 = func_1539_call()
output = relay.Tuple([call_4441,])
output2 = relay.Tuple([call_4442,])
func_4443 = relay.Function([], output)
mod['func_4443'] = func_4443
mod = relay.transform.InferType()(mod)
output = func_4443()
func_4444 = relay.Function([], output)
mutated_mod['func_4444'] = func_4444
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3635_call = mod.get_global_var('func_3635')
func_3637_call = mutated_mod.get_global_var('func_3637')
call_4448 = func_3635_call()
call_4449 = func_3635_call()
func_3613_call = mod.get_global_var('func_3613')
func_3616_call = mutated_mod.get_global_var('func_3616')
const_4456 = relay.const([-8.183974,2.632747,0.550014,-4.182551,3.460536,-4.072359,0.313806,-0.369968,-8.512480,2.132955,0.738381,-0.579762,-3.223076,-5.606750,2.135927,-6.934824,-8.173398,9.660028,-0.684952,-7.268793,5.021413,-7.211523,-6.388882,1.637743,-5.243436,4.652836,1.321066,7.351893,-0.978964,5.048326,5.625799,4.946281,9.259239,-5.443388,3.302769,-2.986064,9.755787,7.712269,5.884143,-6.104446,-4.491358,5.635541,-3.615586,2.986951,-3.490013,-4.031377,-0.722904,4.577455,6.262531,-7.055913,-8.668464,2.351773,5.354721,-7.616950,3.308653,-6.888913,-9.022923,0.813632,-6.411278,4.092271,-5.061077,1.875650,-2.518388,-5.615714,-4.130763,-2.291287,7.856744,-8.848758,-1.813462,8.444712,6.765350,4.628706,1.460822,-5.401841,9.778760,-5.287477,-3.890197,2.247776,8.373802,-9.551480,-6.961260,-2.444689,-7.757629,-3.420515,6.596685,-5.529823,0.806804,-5.228406,7.328811,-9.634368,8.637555,-1.251874,-7.766946,-6.002985,4.112850,5.731332,3.674038,-9.102817,-5.131691,-3.154772,-7.648831,3.466761,0.480198,2.499351,-7.293529,6.445620,-7.374884,9.102810,9.505943,-6.871418,-8.581803,-6.345953,-8.841900,3.379962,2.977904,-0.322225,3.414273,1.984486,-6.111380,6.203580,4.617768,-7.667500,-0.453276,-7.476120,9.214320,-9.804519,5.432631,0.342402,1.210042,-0.833627,-2.210147,4.037340,-4.853141,-3.298974,9.041984,-7.997336,4.211529,-9.025661,-4.556965,0.914620,-5.924030,-9.184161,3.183239,7.699383,-5.005334,7.559693,-9.247673,-9.916136,-6.243294,7.158143,-7.611834,-3.298882,-7.238442,8.174396,6.142096,-2.427025,5.142779,9.644225,-1.953779,9.639468,2.951508,-3.413017,0.180870,-9.760196,3.646357,8.743800,6.319683,9.950170,4.721983,6.065777,-9.249525,-1.382679,-4.551160,-1.958998,-0.536379,7.707587,-2.655862,2.673617,7.622472,1.716194,-7.758349,-1.124212,-5.724600,3.933204,8.336294,6.317212,3.486986,6.283279,3.520295,-5.211272,4.926870,8.213517,4.847918,-9.983387,0.060130,-1.377450,-6.464707,3.549676,-2.493887,-3.072052,2.150354,3.613803,3.301793,-3.109698,-6.858477,-3.480334,5.827808,-8.017768,4.107084,5.726919,-5.308536,-4.639470,-8.739664,-8.294067,-1.975540,-3.685734,-1.397167,-0.750701,-9.972866,-4.007818,-3.554649,9.292370,6.230014,-5.264120,-3.759182,4.465884,7.858832,6.981327,6.745993,5.352805,7.593408,-0.261157,2.942398,4.272054,0.814571,4.873755,0.116678,8.192993,-4.221031,9.566329,5.473927,2.217754,-3.356168,1.218593,-7.345164,7.358856,-3.365393,7.049936,2.855245,-3.527222,5.998793,-7.037512,-0.152389,0.042366,3.450428,4.319245,7.795466,-1.062489,8.715041,4.679819,-8.545317,6.304828,-4.745339,-2.742621,-1.811736,0.680040,-2.972569,-3.304871,5.866625,8.684767,-1.957357,-7.634051,-8.291067,2.127050,-3.162115,2.469537,7.847373,7.308483,-1.812630,2.169407,-6.529911,-5.439105,-9.599448,1.240940,-2.998144,8.069170,3.832344,-6.386478,-8.678387,-4.431984,-1.154621,4.674375,-1.289023,-8.309796,-6.436163,1.429099,-1.399357,-6.583483,-8.384626,-2.443001,-2.718304,2.035133,4.220835,6.443790,5.880651,-1.337385,-7.058250,-6.366691,7.306719,4.487766,-7.151926,-2.005229,-2.055052,-5.521052,0.398967,6.481182,-0.630836,3.868439,-1.121888,5.485537,-7.169629,1.018880,4.539680,-8.470635,-7.289807,-6.314996,-3.996794,3.928245,6.998795,-2.453790,6.361906,2.610786,-8.101761,8.474543,7.151105,5.028836,6.413891,-5.259217,-3.256512,0.839986,-3.307613,4.413844,-2.706537,8.482324,-1.224590,-9.910017,9.307149,0.113970,8.705695,-1.611356,9.849315,-0.030039,2.191933,9.185723,1.747755,-6.793932,8.035728,0.730974,4.227771,3.907776,-9.817706,2.639245,2.682125,2.500764,1.654127,-7.674814,3.539632,2.336058,2.509338,-0.937086,8.908354,9.689607,8.560106,3.511179,0.359017,-8.699759,-3.595471,-1.489279,7.422596,-2.168436,8.670867,6.044674,-2.386711,1.244516,-4.649272,-6.566670,3.638306,-2.203384,-5.938310,5.340711,-3.460961,5.378731,9.966480,9.110465,-8.825883,0.376668,-6.226158,-4.963170,-5.756644,-6.490681,-5.979386,-1.998647,-2.609776,-5.978281,-8.007971,1.482398,8.988904,-9.677559,-8.536443,4.870083,6.322090,-5.261231,-4.469825,-9.024121,4.347403,6.727495,-1.028030,9.308766,-1.867824,9.892540,1.074838,7.500382,-9.773069,2.102296,3.049527,9.841115,7.127063,-8.972830,-6.963127,-8.464341,-1.264800,3.243797,-8.481335,0.696916,-8.765229,6.257715,4.402185,1.907447,-8.593769,-7.770935,9.125180,6.350502,-7.758031,-4.018065,-1.349129,-8.711407,-4.537559,1.123664,-1.697809,6.236481,-3.058810,-2.623425,-0.182090,3.731697,-3.209648,-8.908300,0.003677,-7.820284,-0.173517,-2.631544,-8.891335,8.247659,0.342911,6.705850,1.527677,-2.722547,0.009605,-0.368941,-5.743047,3.312431,7.936472,9.879815,7.438321,-5.962458,-6.637747,-7.810376,3.098471,-0.371096,4.049541,-4.600743,-9.879313,-4.581805,8.515785,2.385150,-5.810977,-0.746017,3.047304,-4.680478,-9.112594,-5.071230,0.979617,6.133467,-2.168751,5.585488,1.262278,-3.599559,6.529729,9.735531,0.687895,-7.087734,3.206970,-7.529477,-4.564355,9.425004,5.463648,-2.654327,1.358989,-0.566419,1.140675,7.299972,5.790910,-1.280581,-1.016538,-6.601148,1.941383,3.422492,8.735084,9.186338,-2.113873,-6.636812,-0.173995,-2.331401,-8.365198,5.891792,5.932434,-0.467066,-6.598193,8.960236,9.869317,0.170844,-1.157032,7.849138,-0.720879,-8.564665,-2.702886,-9.626891,7.843095,-3.494365,1.214577,9.955473,-5.373668,-8.195383,-5.916060,1.771730,8.434661,-6.261417,0.322652,9.981494,-3.093293,-4.510377,6.860586,6.788381,0.097377,-8.212297,7.751986,5.898119,-9.447088,7.236161,8.764463,-1.489118,3.288345,4.976306,-0.296991,-8.232287,-9.851922,4.593551,4.893770,-0.559317,-7.148235,-4.401352,-8.803073,4.337331,8.961273,7.017664,9.213341,6.207608], dtype = "float32")#candidate|4456|(576,)|const|float32
call_4455 = relay.TupleGetItem(func_3613_call(relay.reshape(const_4456.astype('float32'), [576,])), 0)
call_4457 = relay.TupleGetItem(func_3616_call(relay.reshape(const_4456.astype('float32'), [576,])), 0)
output = relay.Tuple([call_4448,call_4455,const_4456,])
output2 = relay.Tuple([call_4449,call_4457,const_4456,])
func_4462 = relay.Function([], output)
mod['func_4462'] = func_4462
mod = relay.transform.InferType()(mod)
mutated_mod['func_4462'] = func_4462
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4462_call = mutated_mod.get_global_var('func_4462')
call_4463 = func_4462_call()
output = call_4463
func_4464 = relay.Function([], output)
mutated_mod['func_4464'] = func_4464
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3657_call = mod.get_global_var('func_3657')
func_3658_call = mutated_mod.get_global_var('func_3658')
call_4486 = relay.TupleGetItem(func_3657_call(), 2)
call_4487 = relay.TupleGetItem(func_3658_call(), 2)
func_513_call = mod.get_global_var('func_513')
func_517_call = mutated_mod.get_global_var('func_517')
const_4494 = relay.const([[-0.065190,7.985424,5.095554,8.078753,3.283483,7.240880,-3.701793,-8.124017,1.848444,-0.367101,-0.297554,-7.929763,-8.505504,-3.392598,-2.823096,9.250835,-4.645875,-8.764758,-7.303958,7.382747,8.865660,5.925500,-9.493095,5.329443,0.234554,-9.445217,-1.075074,-2.796441,-3.381439,-4.204091,2.314395,-6.330399,-7.354776,-5.635842,-5.501455,-0.218171,-5.208944,5.072312,-5.616148,6.512476,4.770106,9.170206,-4.737142,-0.720920,-1.325347,0.876643,0.799477,0.079812,-7.189119,-2.706901,5.987520,-2.119825,8.318926,-1.253039,-5.537512,6.890551],[6.587780,-5.363098,2.308572,8.718693,8.992812,4.511389,-3.569839,-4.454790,-5.065616,7.153166,9.346723,-0.876024,-9.804134,-6.774194,-1.208963,-6.057708,-8.759489,4.004284,4.549090,7.589331,7.217353,4.451810,0.624390,-8.216347,1.981565,9.119643,-3.784699,7.628839,7.356257,5.497174,2.612240,7.734599,-9.698975,7.182822,8.334533,-9.946655,-4.812109,-2.763075,0.707505,3.540211,1.979027,-0.424701,-0.988297,-0.706662,6.551662,3.249767,0.283366,0.646524,2.092629,3.748228,8.698501,7.875453,-1.237170,-8.052474,5.020268,-2.677361],[-0.490244,-4.608903,-9.280219,-3.790156,-2.221862,-8.968190,5.966768,-6.147384,5.599905,0.177671,0.035472,-7.600793,8.600549,-0.505141,-1.379133,9.676036,3.695661,-1.423936,-2.944452,9.147712,-7.958276,-4.057740,9.864733,8.221442,-1.991130,-0.800766,1.064706,7.287694,0.566003,5.762411,-1.382674,-3.313765,-9.815599,9.579928,-8.829597,-1.228299,5.516131,-8.598360,1.861029,7.843900,-6.249630,5.675658,-0.456991,-8.033555,-2.143000,0.081256,-7.431684,-2.062861,-4.467849,6.645349,1.453229,-0.108883,-5.367623,4.160551,-7.583441,-6.371175],[-9.331041,-9.308867,-4.083758,-4.804503,6.000533,-5.217634,-8.701469,-1.156860,-5.860593,6.233854,5.864013,-9.039218,-4.894221,9.844737,-0.267933,5.434467,-5.154787,1.358927,2.654733,6.274566,-8.848747,-3.033935,9.761620,8.520561,7.503587,3.059717,-1.095924,-7.022409,9.359248,3.316547,6.159884,6.389718,1.368909,8.554539,-0.330160,0.267825,-2.272696,0.880078,-5.648008,4.223628,5.707383,7.873903,5.537601,-7.370058,1.578920,-8.857658,2.773987,-8.080800,8.415747,2.752449,9.844796,-4.832252,-1.193567,8.470346,-7.076117,-2.205682],[3.392817,-6.495609,-6.783275,3.145137,-9.848402,-9.396308,9.787519,-0.065130,-7.408387,1.899312,-0.479635,0.936908,0.734233,-9.477117,-7.668603,-5.173868,-2.690620,-7.735845,9.619060,-9.158532,3.098169,7.890894,-5.840048,3.318595,7.181498,-5.838592,-4.346451,5.660682,-2.743434,-6.880394,-3.661497,-3.298015,4.134670,3.109545,-6.790168,-1.671576,5.482666,9.754468,-6.486253,-1.853656,2.769269,6.920106,7.886573,7.780706,-6.520063,-9.228791,-2.149537,4.159168,4.935060,6.024944,6.398035,6.750735,8.414961,-3.321514,-0.532716,-8.860665],[9.018231,1.980418,-7.840378,-3.001459,-9.605851,8.086453,9.733018,-8.683968,-1.113837,-8.973392,-6.945322,-5.339195,-9.383656,3.769855,2.647752,-9.177116,4.045820,4.613499,1.791640,9.647602,-8.915785,-9.063679,7.570894,-1.595545,-8.809699,6.608789,0.219001,8.085800,-0.829133,-8.487084,-4.621464,-6.253930,-9.047445,0.569686,6.678645,-5.035327,0.004022,0.871674,4.863208,-9.316606,9.983977,-1.359694,0.963686,-9.211176,-6.328022,-3.575292,-3.630739,9.068691,-5.952138,-2.096306,8.122730,-2.869657,8.148098,1.239368,9.181526,4.581715],[-3.023407,4.882162,5.319945,4.260247,-2.952127,-8.223180,3.315396,-3.118151,-0.605977,7.399681,0.885844,-7.276392,-3.837054,4.365386,-1.688065,-8.963687,4.923686,-1.558476,6.501525,-6.196005,6.656344,-3.673854,-1.487902,2.921230,4.147335,-1.810761,-1.579099,-4.083868,7.059510,-0.657635,-7.476632,-3.385352,1.807784,-1.925901,-8.761885,-4.916153,7.557904,-5.470772,8.054515,-4.872349,1.108962,8.748893,3.840448,-3.942772,-6.160605,-7.161100,7.186976,-9.972325,-9.708145,1.128793,1.061687,-7.451797,5.246905,9.922748,-9.127939,9.161273],[-5.275551,2.136038,-4.238985,-0.754463,0.658230,3.534145,5.163882,8.314065,-2.609734,8.195352,-9.568488,-4.420480,-0.561047,3.376557,5.521397,-0.465188,2.210970,-4.052111,2.355214,-5.075794,5.149867,9.005589,4.596750,-1.190888,-1.427749,-0.758545,-8.640880,-8.347501,-5.466158,6.183000,-2.361891,2.827563,-8.220117,-8.267245,6.932407,-9.418448,-9.842472,8.596752,-3.527792,-2.175986,3.303704,1.361158,3.260663,6.344927,6.771226,-8.153788,-8.657913,-0.335193,6.530294,3.522238,3.163194,0.657754,5.019213,-2.160043,3.917119,-6.076982],[2.917192,-4.571159,0.005271,-2.181674,-0.698361,2.972138,-3.611386,9.179749,-2.656094,-2.644682,-4.353077,0.043282,6.039958,9.425946,-8.255164,3.581536,-2.087370,7.910205,3.164184,-7.151439,-8.805042,1.451121,3.120727,-6.621766,5.022312,-4.111235,-5.712399,2.728198,9.734613,-9.426772,0.863731,2.489932,1.551503,2.584061,-3.210471,8.379478,7.353215,3.691180,5.067392,-7.313729,7.050630,2.956547,5.300226,8.331588,5.855324,-0.367442,0.995447,-7.679058,-0.572241,-4.727758,-2.087578,8.191762,-2.652340,-5.936679,-7.275651,-2.157526],[3.822445,-6.003629,-2.303493,4.619190,9.645211,-9.466896,0.948096,-2.279848,6.485467,-3.838063,-8.476606,1.316283,3.659245,-8.032550,1.059625,3.680971,-5.731020,4.472987,4.087562,3.278453,-5.723251,1.923790,-9.174298,-1.502025,-8.970322,1.717798,-5.824720,8.012719,4.229756,-3.518778,-2.222199,4.968309,7.358909,-2.624677,-6.298681,5.258867,3.759657,-3.040484,-8.905231,1.419100,-1.587529,6.969002,-9.700096,-8.495706,6.226421,-0.422681,-5.642878,-7.023788,-9.722607,-5.234121,-4.383954,5.506135,-8.236018,-0.194034,-3.025561,-4.807032],[-4.593130,-6.156331,-2.445469,-7.531775,6.354152,-0.655936,3.874723,8.967767,9.855158,-9.494999,9.439981,0.986690,1.777715,5.833881,-7.379479,-9.366910,6.591517,1.439775,0.720876,5.949150,-2.583672,-5.843720,1.495328,0.843429,7.027247,-7.635662,6.571801,5.759955,6.966157,8.726675,-3.772178,1.974270,-0.642968,7.611802,-5.221352,-4.149314,-4.618044,-4.879437,-9.142992,-2.755569,6.324848,-1.502536,9.093757,-8.713268,-0.604594,-1.357728,6.289928,7.566972,-3.467398,-7.076815,0.520875,2.675856,9.477113,0.481074,5.841966,-1.658651],[4.523684,6.718873,-5.380230,5.084855,6.205264,0.694673,3.905885,-0.745654,0.338054,0.893174,3.427389,0.827196,-5.892309,-1.100248,-7.861161,7.727692,-8.314869,-0.218063,-5.987053,1.179078,8.004145,-7.229325,6.634983,-3.690815,2.291263,-1.304623,-7.855399,-0.049140,-9.046725,-7.543016,3.465334,-4.604389,8.109816,-5.254909,2.671964,0.888705,-9.183544,7.503616,1.457765,-4.226028,8.121897,9.994343,-1.943796,4.677508,0.128102,-7.554714,5.129917,-1.107713,8.281767,-2.411716,-4.428429,-3.179502,0.416400,5.155758,7.935341,-2.756698],[-6.395085,2.386092,4.901120,1.309102,-0.526857,6.794325,4.242482,-9.070389,-6.007775,4.213247,2.921653,4.056879,6.009314,5.842017,-3.918944,-5.344716,8.321990,-7.449366,-7.541098,7.895077,5.842676,-8.860845,-3.214929,1.197852,3.576756,-3.568684,-0.664196,0.038316,-5.069641,7.766757,-7.017263,5.850745,1.116262,-5.575424,9.316043,-5.736300,-8.916891,0.706086,-3.289641,7.081669,1.167933,-6.387983,1.879848,-5.407662,-5.823089,3.382266,1.155703,-9.036888,-0.818203,-8.504496,1.871581,-4.642661,5.042420,-7.238971,-2.966715,0.996810],[3.369196,-2.976161,5.961430,-8.898652,-6.789516,5.758068,-0.503880,-1.923374,-0.321292,7.265337,5.447873,-6.889538,3.911087,-4.594587,-6.309846,-6.557936,7.843713,4.675079,2.336114,-3.235339,2.696919,8.888706,-7.656584,-7.595199,-4.636983,-4.414216,9.267892,-0.314691,2.149881,-8.917807,-3.653921,-3.020789,1.860657,-8.457386,1.671941,-4.044410,-0.116217,6.491378,5.520173,-2.104935,3.534399,-4.122080,6.551205,9.615570,0.219171,-2.773198,-8.564566,-0.090642,-4.057822,-1.534577,8.021220,-1.309248,-4.627798,-7.141062,2.489216,8.233349],[4.027518,1.934980,-1.130732,-4.091509,4.790671,2.911372,8.291439,7.133570,2.396071,6.970332,2.993868,-2.018166,3.967119,4.202913,8.455097,4.008723,-3.619132,6.447952,-1.995494,7.591253,6.506409,9.334570,-3.131758,-3.701332,8.758114,-4.948454,-7.573742,-1.064011,-4.708974,-7.653677,4.016307,-3.386377,9.568520,-7.379726,6.931427,9.733216,7.569557,0.327998,8.247881,7.665593,-4.160294,7.079639,-3.937305,-2.991108,-6.478905,5.304332,8.966975,0.038643,4.741392,-9.575831,4.319514,6.103520,-7.825744,-6.338482,8.152761,-4.131277],[-0.160616,-9.517164,-1.221201,8.401050,4.046023,-2.913362,-0.114057,1.106879,7.940553,8.430573,3.434248,6.246351,3.957651,-1.958431,0.845894,-8.673777,-2.479335,0.434045,-8.154674,8.151745,1.826207,-3.840656,-4.179959,2.082615,2.962328,-0.837608,-2.758817,-4.618598,-7.238537,-2.907460,-0.932333,6.081770,8.768516,7.595377,6.850091,3.435296,-2.850371,-0.860530,-6.213224,-7.112237,-8.310905,-6.475900,5.783211,4.802422,8.801821,1.944673,-6.708458,7.643309,6.398007,1.320818,5.651879,2.082452,-0.765422,-7.063620,-0.049129,-0.816549],[-7.759592,8.673804,-2.300852,3.397148,-0.351327,6.586929,6.813958,-0.636601,2.720351,6.502647,-4.896144,-7.072962,-0.126381,6.555461,3.807065,-6.825628,2.084414,6.028888,-8.156524,1.859042,-2.964376,5.484781,2.458657,-7.392023,-3.971275,-1.012919,5.274764,1.790821,1.951273,-2.748553,9.128543,-8.492835,-0.109509,-3.854408,-9.123102,2.191410,-8.351966,-7.994634,-8.899597,-5.923389,-2.149934,9.540024,3.050654,-8.512289,-0.524653,2.793479,8.980479,-4.389654,-2.933371,-1.581757,-6.229387,7.110531,-9.830004,7.216978,-3.684423,2.607431],[-3.274100,-9.183348,-3.200341,-5.087146,2.764588,-8.757170,-4.371152,-4.474739,9.857316,7.624742,-6.787757,-5.134309,6.206180,9.253002,4.290224,-0.666451,-1.969564,0.307651,5.819265,6.735230,1.659218,9.203217,-9.935798,-2.418815,-6.638410,0.474322,-9.427637,-3.065598,0.218441,-6.536509,-6.066897,-5.245298,4.172319,1.466231,-1.873922,-6.985064,-9.921408,5.855351,7.574123,-4.601333,5.390623,0.084306,5.827617,2.866268,9.887289,4.782944,2.719393,-7.114957,3.948345,4.064574,-3.918665,-4.845729,-5.509940,9.166863,4.795613,6.542774],[-4.343464,4.896034,-7.809891,-0.595188,-7.053410,-4.170566,-8.079558,-8.782246,-8.899927,0.205365,4.315803,-3.402563,4.491093,-0.700305,9.606557,1.660497,-2.703758,-8.553065,-7.240661,-2.412679,-1.951656,-2.167954,-0.692729,2.301309,-1.210936,4.357714,-7.430059,6.971835,-8.509970,-3.520724,-6.771290,4.795110,-5.084793,7.027702,-6.401301,3.800264,-9.877459,8.265921,0.243950,-7.499702,8.519141,8.403062,0.077331,5.757280,-0.853452,8.937473,-8.128714,8.242478,-5.057680,1.640839,3.214286,-0.940505,-8.863588,-4.409258,-3.433172,6.085794],[-2.462663,9.874004,-0.506115,0.446314,-1.221344,0.957931,3.730609,-5.937866,6.967516,6.945181,-7.244265,8.109781,6.376910,-0.419356,-0.914297,-2.752820,8.170831,-5.002596,-5.125236,-0.706224,-7.118828,1.801746,3.982555,-2.240811,9.933192,3.119314,7.464520,-8.722166,-8.615874,-6.253364,2.008875,9.584040,-1.966478,-3.655534,-3.867298,8.028504,-7.266712,-7.243293,-7.415085,-1.214221,-8.926569,-5.156153,-2.902725,7.787520,1.301434,2.633145,-4.842134,0.264629,-2.374543,6.680078,6.687338,-9.297148,-9.736371,9.520425,3.586732,-4.818573],[5.097483,6.781336,-6.438284,-1.348240,-5.354177,-4.666985,-2.177990,5.334480,6.695720,8.861261,4.316611,-5.724407,6.478533,3.592232,9.231178,-9.745056,-6.818849,1.646212,-7.396755,-2.652964,3.814994,6.383367,4.120711,1.614596,-0.314714,9.440077,-2.930236,7.195999,0.511952,-3.411454,-6.077965,0.845969,-3.769230,7.021833,-4.644979,8.414346,-0.657283,8.751492,9.264496,-3.567559,-4.520472,1.474912,6.402905,-8.029445,6.088454,-1.545947,5.652824,-8.425471,-4.294486,3.562515,-4.205719,-4.018876,4.527096,-9.779262,-7.357576,-2.850999],[-4.373475,2.069189,-7.595052,-7.845038,-9.358117,-4.819625,-4.044608,6.424703,-1.668064,9.764717,4.959250,-2.179984,6.517438,2.281327,3.428898,-4.801680,-7.070410,-9.673713,4.924303,-1.619710,8.981984,-5.347335,-5.623343,-6.438494,-0.446801,3.748865,7.956736,-7.065118,-7.000562,4.564704,-7.990026,8.720871,3.188058,7.259089,-8.033643,7.795701,-6.073396,9.211675,0.423472,-8.174661,4.267955,-0.426393,9.741337,9.019311,-9.694595,8.535971,0.527633,5.786384,-5.435470,6.267370,6.177149,-7.498792,-7.472461,-8.644109,2.232319,0.833255],[-5.582431,-6.288506,2.572543,7.890737,-4.295411,-2.415195,9.287043,-0.594860,-6.269929,-4.029919,-4.671206,-7.987486,-4.134896,2.005038,9.421460,-1.989750,-6.745274,4.006691,-3.064993,7.226208,3.925014,-5.808566,-2.788577,0.781869,9.990439,-3.705010,-4.007232,-7.104435,8.939349,2.405088,7.968266,-3.862408,-4.436842,8.557361,-4.867713,9.338656,-8.050058,-6.167891,-5.581231,8.228077,5.612418,-1.432031,-0.846238,-2.465322,-5.426229,-2.714853,4.725721,4.291567,-9.082755,-9.131819,5.636351,8.279322,-4.272803,-0.764240,3.126424,-1.524581],[0.173304,-2.002156,2.737909,6.103599,-9.296876,0.927425,-2.922116,4.262122,4.769048,2.671556,9.137151,-6.884398,-1.118229,2.654508,4.075498,-4.664452,-7.933473,-6.832363,9.860371,9.729058,-4.157399,5.645440,7.229552,5.350444,1.016199,0.045740,4.465965,-8.875666,3.658454,2.548422,2.273779,8.924939,5.008103,5.126902,-2.996219,-9.460852,-6.309708,6.267585,3.668975,-5.943097,-6.884924,4.647306,-1.784929,0.714118,9.684274,-8.336598,0.576022,-1.529397,6.533952,1.674376,-0.142538,-0.479777,-3.834688,-3.674394,1.944720,-4.683539],[5.420500,5.964261,3.133798,6.702554,-7.390743,2.048594,3.252688,-5.228629,1.078072,-2.651884,4.263322,-1.118085,7.465663,2.828093,-9.447670,-0.112432,-1.321672,3.038587,-2.830680,-3.652202,-1.247689,-6.833275,-4.254029,-6.872177,0.817044,0.075150,-2.176339,-4.154590,9.375372,-4.841924,5.086838,3.714339,-7.171106,8.762479,0.566982,0.368337,4.906215,9.471395,-8.285297,4.790623,7.150277,0.020907,7.385553,6.787627,8.872225,-5.074474,-0.138371,-3.898409,-6.755808,3.436849,-3.762928,5.535334,6.659354,0.582125,-3.268926,6.516087],[2.356449,3.941429,-9.880390,3.177422,-7.114596,-8.266241,1.822007,-1.752296,-0.843927,7.888147,-3.410963,-0.418663,-9.523942,-7.683392,-1.926152,-8.364101,-1.046397,-7.006670,-4.368561,-3.938609,8.189441,6.130506,-3.708314,-6.498772,4.358087,2.948039,-0.533973,9.688274,1.637580,-0.308504,0.340570,1.420327,-9.786676,-1.667334,-7.651345,-9.705391,3.273247,-8.484844,4.511940,-3.551470,1.316331,-6.394541,3.462382,-3.583500,3.018205,6.841158,4.813729,-6.238287,-2.796761,-2.261962,-5.633479,3.782630,-9.070241,7.986238,-8.200063,-2.941970],[3.800639,-0.038543,9.583972,7.186800,6.422130,1.050698,6.253204,-6.420001,9.484248,-4.430325,1.211004,4.067482,-4.965242,2.351161,6.565298,-2.940155,1.356007,4.612780,8.139038,4.539327,1.685451,9.336970,7.818519,2.447311,-7.439574,-4.012782,9.612374,8.646348,-4.269482,-2.684267,-9.135260,-3.629511,5.126832,-5.782745,-7.477091,1.638636,4.808662,-3.323593,9.333884,2.225936,-8.037085,3.000985,3.409078,9.097296,-1.050853,7.040389,-7.371526,-2.187454,-1.419892,-3.975971,-2.785738,-5.058934,-3.687464,-4.190260,-9.607259,7.795864],[3.802894,-2.416158,9.203942,-6.821891,-3.130942,-9.741830,9.621400,-5.342553,-9.295014,-7.948234,1.934337,-5.992093,-4.557157,5.012608,-3.587146,6.844185,8.286804,-5.208434,3.756495,-8.096264,7.388629,-7.354887,1.094460,-5.785861,5.625147,1.855220,7.466463,-7.366444,-6.656269,5.195918,-2.828319,4.509210,-9.462043,-0.455071,-5.473850,9.954599,0.190683,9.101922,7.357117,-3.177251,-8.937865,1.604221,0.731042,3.511814,7.268270,-4.281399,2.099309,5.574544,-7.195094,2.665719,2.654285,-8.486315,-3.951609,0.868039,6.194878,-4.776512],[7.892884,9.796583,6.102242,7.058343,6.163573,-9.020339,2.387852,5.589374,0.904488,-0.133771,4.481290,-0.648578,-1.254775,0.469963,1.765226,-9.062016,0.253794,-9.006873,-2.614926,6.580753,2.169909,9.655221,-7.826391,-5.501163,4.833970,-1.559555,7.257427,0.697231,-9.442707,2.744024,-1.717301,1.597915,-8.649841,6.696028,9.543011,-9.673685,-4.691178,4.945214,-4.789406,6.276131,-5.404672,0.783643,-0.048996,-0.425125,1.358417,-3.337026,8.457776,-1.377870,1.555175,-8.548444,-7.324492,-9.586737,-7.833610,3.041204,5.318334,8.083012],[-1.946898,-1.368854,3.514764,-4.895906,-1.662290,-3.574882,-4.649094,3.538497,-8.310894,-2.287765,7.238079,-5.904208,-6.513525,-1.879878,-3.636036,1.035725,-8.974432,6.704626,-3.506877,0.671304,-5.551893,-6.752671,-4.414941,7.302725,-6.886059,9.805249,-5.387245,1.800350,-3.922237,-5.788805,1.458137,8.759285,0.453299,2.343244,-3.662384,2.799723,2.943626,4.226290,7.375184,-6.507147,-6.652549,2.110912,0.710893,9.432054,3.727487,-7.085010,-7.328313,-4.065072,-8.822719,4.330790,-2.778927,-8.614567,5.144984,1.632551,-1.236652,-2.592940],[-4.964715,9.007907,-5.019314,5.540269,-3.281085,9.878964,6.308905,2.038692,3.608392,0.229853,3.626217,3.485284,4.574318,5.920023,4.456378,3.634318,-8.393372,4.871021,9.525065,-1.518532,5.085467,-1.823508,9.069393,-7.219010,2.149120,7.261029,5.392115,1.422538,8.544402,-6.757398,-8.126802,-3.078489,-1.191414,6.637938,-3.093480,-3.777658,9.830601,1.078019,-4.553166,-9.255242,1.813705,-8.632398,-5.926214,7.647349,-5.165225,-1.072964,8.204597,5.816168,8.070413,-5.556968,-1.147736,0.802434,7.098385,1.897793,-0.768491,4.745127],[8.514218,2.106891,7.482331,3.341164,-6.711978,-3.743750,8.531866,-0.662133,3.728061,-6.635699,2.456668,4.059065,-3.032663,-9.414971,-3.548553,-8.581278,8.720455,-9.649401,1.705027,-7.284838,2.200957,8.085205,7.511217,1.168504,-7.124635,-7.817939,1.239113,3.994971,-8.613200,4.125383,6.096603,-6.637189,2.596439,-6.133472,1.079994,-9.956974,4.838772,8.612734,5.108441,3.436126,-5.873402,5.251848,-3.834400,-9.747551,-1.320995,9.425448,7.505001,-7.183985,-7.737622,8.487747,-0.040429,3.644746,-1.228758,-7.654170,6.600832,2.482859],[7.576555,-9.280372,8.458375,4.553394,-1.986181,-9.322937,-2.775398,-0.282445,3.699495,-2.583492,6.739154,9.786095,-3.800071,-5.073074,-2.486560,-1.556225,-5.017888,0.196361,1.608667,-2.659437,2.683641,8.077864,6.994276,3.420919,-9.639057,-8.687203,8.071016,0.854181,4.712531,4.051379,9.652502,-2.065279,-7.892414,-5.629461,-5.386662,7.123759,9.751328,7.165102,-8.060906,6.966149,7.599238,1.308446,6.249853,-6.960944,-4.943302,-3.031600,3.221983,3.354837,-9.552708,5.516054,-3.881503,9.138015,-8.633483,4.129392,9.504995,3.878222],[-6.180310,8.975766,8.626974,3.645639,1.185487,4.523896,-3.626627,1.188300,-2.185370,0.773888,1.239035,-0.405497,5.620650,3.901807,-4.734084,6.955286,5.079338,4.294364,0.130856,-8.394320,-4.755633,6.812385,-3.614020,-5.545353,-5.546960,-6.135047,-3.178762,4.435524,-9.617948,-6.604118,7.333799,8.029601,-5.305558,3.081730,5.083293,-6.780704,7.646995,-6.027452,-0.466563,2.347633,-4.663750,8.883425,-1.211215,9.653926,4.434775,-8.509094,2.808345,6.360099,-9.854368,0.962143,-8.593345,5.862282,-3.810387,4.764435,-9.707153,2.878686],[-8.988886,8.480581,6.103579,1.335326,-2.956703,5.668825,-6.891965,3.289353,6.387511,-9.959166,7.393679,3.922161,-9.363185,-0.586588,1.117942,9.740935,-6.180925,7.583184,4.744286,-7.273426,-1.047502,-1.908801,-4.249344,7.872233,-3.630066,8.023799,0.742740,0.754785,-6.382195,8.593393,2.271466,9.882546,2.650466,6.178858,-6.622516,2.130331,6.592475,2.158545,5.474879,4.405719,-0.174067,2.140449,-1.458200,6.660875,8.761652,-8.328908,-7.628987,-6.526856,-9.282406,-8.098145,-1.766162,8.572784,2.197282,2.206472,1.411376,7.978481],[-2.653546,-4.977914,9.141781,7.642694,-3.746739,-7.390084,2.793171,-3.557712,-0.399537,-1.417698,-6.759432,0.269289,-0.721114,7.609988,8.474816,-3.445681,4.335117,-6.933141,-6.835005,0.862419,-7.166249,1.608218,8.493160,2.239528,0.327745,-4.708309,-6.009035,5.408769,-0.882458,-2.795872,2.508889,5.109297,9.070742,-9.218325,4.579565,-4.948929,4.454591,-2.013367,-5.497631,-2.988789,5.058274,0.720909,-9.667979,9.345700,1.815197,1.445845,-4.751597,-5.240976,-1.158122,0.047336,-8.495123,2.314501,-1.485877,-6.296250,-5.986646,-5.426636],[2.400214,3.605867,-9.638628,4.430008,-9.112579,9.757210,6.999979,5.807848,-0.393297,-7.077707,-0.378104,-3.511348,8.758848,1.874033,1.811153,1.708663,-2.242387,1.410900,6.377915,-2.172978,1.467235,-4.197433,3.980972,-1.591548,0.122898,4.094186,1.204658,-1.308919,-2.221216,-9.101815,0.011409,6.649750,-3.020072,-8.417260,3.403082,5.877574,-4.173070,7.143905,8.516191,7.502960,-9.002907,2.947908,-9.506358,-1.949254,4.749745,7.880816,7.322714,-7.259219,3.280753,5.621670,-3.850752,5.853621,6.419816,-8.735534,-7.691417,3.061723],[-9.548170,-7.323317,-3.079094,-1.003439,4.140990,-1.852096,-2.460338,-5.287325,7.874868,-7.100656,5.652267,0.409008,-5.711393,1.338628,9.739120,-5.725218,6.857643,8.908337,8.315005,-7.907741,5.369109,7.010600,5.614132,1.452897,-8.804374,-1.001837,7.463262,-2.065147,-7.407417,-9.378698,-0.953357,3.400347,-9.931183,3.921652,-8.438773,-8.939129,-7.754572,4.211285,-5.148965,-0.769745,-9.696133,-0.432677,-4.912749,-5.463472,-7.433195,2.059874,4.365247,9.894977,6.870148,2.957047,-1.628979,9.889269,-4.569631,-0.357024,6.574596,0.328691],[-3.393037,0.901745,-6.092926,7.025506,-4.262870,9.669137,2.517097,8.286950,2.558312,1.622896,8.413644,-5.385461,9.852858,-7.294185,3.696694,3.975734,6.432124,5.264489,-3.923829,-7.529010,5.663323,-5.853924,-5.956764,5.957299,-5.744836,1.185483,7.201824,3.809208,7.893820,6.220996,6.754784,-5.635798,7.754713,-7.445011,-3.064527,-0.385735,-8.435916,-1.811837,7.194612,-8.916630,-3.025531,1.108636,9.792343,4.946131,-9.091382,-0.564795,0.655065,-8.208966,-4.230299,-9.205555,9.822247,-3.087564,8.861358,4.661990,-9.805997,-3.206832],[7.728667,-3.019464,5.706477,2.008216,-2.959073,7.525276,-6.167931,-3.852833,7.140921,9.760088,6.558069,-3.704498,2.993381,1.359104,-7.839547,-3.498963,3.106593,-0.913669,-2.583065,-6.212065,3.911770,-1.584389,5.021244,-1.521693,9.285874,-2.327419,3.704455,8.240852,-9.709343,-7.881066,1.569373,-5.811314,1.207112,0.182333,5.449815,-1.272973,7.735147,-5.351504,8.499277,8.547047,7.425730,-3.553351,9.110931,4.355073,-8.512771,-2.422952,-2.747058,7.916424,8.169301,-1.884726,-8.894338,-3.072042,5.238185,7.714812,4.641499,-6.537755],[-9.734457,-9.932559,-2.434168,8.732836,9.319447,-8.090043,-3.013277,-5.299763,-9.297397,-5.435218,3.681255,5.387421,-5.969521,-6.165874,0.865558,-1.742105,3.593587,5.686855,-4.978971,-0.167858,-8.009788,7.330654,-0.370152,3.166118,-6.568719,-0.339764,-0.487557,5.862948,-6.547818,-6.703656,-1.935638,8.549957,5.873936,8.197084,6.503129,-2.024129,3.467427,-3.488768,2.054101,-2.482552,-4.597113,9.348933,-1.116401,4.087893,-1.975550,7.502740,-4.302001,-4.200684,5.905851,6.616769,-2.731033,3.513176,1.410106,4.285082,5.141822,8.039140],[-0.268291,-8.315489,0.808712,2.577083,8.179251,-2.823796,3.468996,-5.729544,-4.631146,9.142025,2.518664,-4.925875,0.025224,4.802989,-7.823957,-3.937209,9.971176,1.095042,-6.338984,5.964489,7.079013,1.021544,-9.931284,-9.448351,0.419866,5.808353,-8.847507,9.342615,-6.848696,-0.533423,2.459507,5.532426,2.748842,6.478282,-9.663014,5.156486,-2.394704,-1.997911,-2.492877,-7.046300,2.841487,-7.219425,2.273398,5.331349,-3.300790,-3.795996,-3.029993,2.488677,2.367776,5.493454,6.782558,5.521644,2.547290,-4.470475,-8.044960,0.542872],[2.296058,1.431237,3.358615,-6.334601,-2.293514,-3.803995,-7.421279,-1.201357,-7.794934,5.137049,1.428227,-1.195033,1.003161,-9.833921,1.763736,8.432550,-1.456970,3.910033,0.400291,9.917725,2.073990,-2.265066,4.864175,0.950486,-0.397057,3.821772,0.827000,-5.804890,7.992927,4.204662,-6.062162,3.377595,4.772550,-9.729661,-6.376809,9.878000,7.137926,0.720399,-1.502039,3.885798,-5.687839,-1.825849,-3.151834,-7.922406,-5.782601,-5.111886,-6.173346,3.641087,-4.273448,-2.377918,5.669507,-6.688396,7.285680,-5.204995,-9.384165,-1.811908],[-1.034422,3.537271,2.004351,-2.880308,7.235663,-5.582198,-7.218147,2.565628,0.253466,2.243597,1.879512,-2.675764,-9.571955,3.146447,-8.148434,4.599143,-9.998006,4.593357,-7.240508,7.187513,-5.659618,0.978532,8.877343,5.738075,-7.999082,-6.036134,6.817641,-8.158238,9.869393,-7.540915,5.326933,-3.847472,-9.601369,4.629239,-2.329635,-0.968590,-9.246317,6.911392,3.173193,-4.514755,-6.379337,4.558095,5.547131,5.610079,9.562531,-1.247511,6.615202,1.091339,-2.120631,-1.741334,4.158627,6.304783,-8.333875,-3.012368,-3.399028,2.581811],[5.903265,-6.087111,-2.522316,1.411351,9.724195,-7.927241,-5.847865,9.885248,-2.067901,7.236011,-0.458704,8.676099,-5.467492,-5.866976,-8.041858,9.286076,4.947386,4.742473,4.995781,5.787029,-4.692648,4.340500,9.436264,-3.275328,-6.337742,-5.511866,-2.130517,9.405720,6.312998,3.005107,2.555097,9.441114,-8.040345,-5.030245,5.320987,6.840954,6.646183,-8.767273,2.425557,-0.442784,4.180705,-4.357833,-3.964594,-3.457183,-6.746221,0.446328,-3.591746,-6.470065,8.810395,-0.792604,-9.691219,3.890655,-8.705364,1.300633,-3.949588,5.161683],[-5.778848,7.334021,0.662538,-5.030148,-9.304843,5.424225,-6.484682,5.870024,-7.640853,-2.250264,5.250271,-2.914188,0.756923,9.857317,2.790000,3.327926,7.901113,-1.004169,-4.737702,-5.533948,-3.297548,7.710056,3.887721,4.007285,-6.402741,-3.128675,2.414257,4.750355,-4.359839,-7.745269,8.994457,0.436617,-6.735770,5.838002,-9.854107,4.859471,1.108321,7.772008,-4.679994,-0.458500,-5.310566,-9.220983,9.878727,1.963708,0.860092,3.088196,1.271191,2.928695,-4.255954,7.024913,-6.916765,-9.890494,2.859713,-2.747838,-5.884958,1.683329],[1.977826,-0.211175,7.572559,3.961608,8.825459,-7.316622,9.507372,-6.634242,-1.274681,5.465092,3.200711,6.278555,8.656826,-1.324051,-3.766952,1.229769,4.877064,7.032182,0.327482,0.226826,3.867986,6.552226,6.294560,2.011034,9.996886,-6.953597,-2.437426,-8.278678,0.370281,2.709712,-5.541183,-6.405089,-9.438852,-6.753674,-0.019673,-2.088807,9.160504,-4.665488,4.909425,9.421940,-5.976416,0.136986,0.338554,7.980021,-4.355603,-9.804190,9.686576,2.758845,-3.564814,8.149349,2.084568,6.108173,5.222189,-1.933517,5.759167,-4.804153],[9.280845,-1.919892,1.965632,-1.953802,-6.921515,-6.770661,2.148235,9.460554,7.409813,-5.126579,-1.797087,-6.822231,6.482022,-3.745360,-2.314412,2.156544,0.676117,-6.656509,1.749981,-3.434677,6.348820,4.691571,-8.934839,9.115100,7.037436,5.816210,8.118533,8.356968,-3.335399,8.096989,-6.286645,-6.677446,-4.723019,-2.256457,1.214146,5.751500,9.771121,2.098447,9.628180,-3.012975,-5.732985,-9.927384,8.184534,5.923681,4.807854,-3.654074,1.581421,7.765476,6.996616,2.668036,3.891928,8.272650,4.316393,-5.865518,3.097274,2.744290]], dtype = "float32")#candidate|4494|(48, 56)|const|float32
var_4495 = relay.var("var_4495", dtype = "float32", shape = (576,))#candidate|4495|(576,)|var|float32
call_4493 = relay.TupleGetItem(func_513_call(relay.reshape(const_4494.astype('float32'), [14, 16, 12]), relay.reshape(var_4495.astype('float32'), [576,]), ), 0)
call_4496 = relay.TupleGetItem(func_517_call(relay.reshape(const_4494.astype('float32'), [14, 16, 12]), relay.reshape(var_4495.astype('float32'), [576,]), ), 0)
func_1629_call = mod.get_global_var('func_1629')
func_1634_call = mutated_mod.get_global_var('func_1634')
var_4511 = relay.var("var_4511", dtype = "float32", shape = (770,))#candidate|4511|(770,)|var|float32
const_4512 = relay.const([False,True,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,True], dtype = "bool")#candidate|4512|(45,)|const|bool
const_4513 = relay.const([False,True,True,False,False,False,True,True,False,True,False,False,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,False,False,True,True,False,True,False,True,False,False,False,False,False,True,True,True,True,True,False,False,True,True,False,False,False,True,True,True,False,True,True,False,True,False,False,False,True,False,True,False,False,False,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,True,False,True,False,True,True,False,False,True,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,False,False,True,False,True,True,True,True,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,True,False,True,True,True,True,True,False,True,False,True,False,False,False,True,False,False,False,False,True,False,True,True,True,False,False,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,True,True,True,True,False,True,True,False,True,False,True,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,True,True,True,False,False,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,False,False,True,True,True,True,False,True,True,False,False,False,False,False,False,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,True,True,True,False,False,True,False,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,True,True,False,False,True,False,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,False,False,False,False,True,True,False,False,False,True,False,True,False,True,True,True,False,False,False,True,True,True,True,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,False,True,True,False,True,True,False,False,False,True,True,False,True,True,False,True,True,False,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,True,True,True,True,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,True,True,False,True,False,False,True,False,False,True,False,False,False,False,False,True,False,True,True,False,True,False,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,True,False,True,False,True,True,True,True,False,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,True,False,False,True,True,False,False,True,False,True,True,True,False,True,False,True,True,True,True,True,False,False,True,False,True,False,False,True,False,False,True,False,True,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,False,False,False,False,True,False,True,True,True,False,False,False,True,False,True,True,False,False,True,True,False,True,True,False,False,False,False,True,False,False,False,False,True,False,False,False,True,True,True,False,True,True,False], dtype = "bool")#candidate|4513|(720,)|const|bool
call_4510 = relay.TupleGetItem(func_1629_call(relay.reshape(var_4511.astype('float32'), [770,]), relay.reshape(const_4512.astype('bool'), [45,]), relay.reshape(const_4513.astype('bool'), [720,]), ), 4)
call_4514 = relay.TupleGetItem(func_1634_call(relay.reshape(var_4511.astype('float32'), [770,]), relay.reshape(const_4512.astype('bool'), [45,]), relay.reshape(const_4513.astype('bool'), [720,]), ), 4)
output = relay.Tuple([call_4486,call_4493,const_4494,var_4495,call_4510,var_4511,const_4512,const_4513,])
output2 = relay.Tuple([call_4487,call_4496,const_4494,var_4495,call_4514,var_4511,const_4512,const_4513,])
func_4515 = relay.Function([var_4495,var_4511,], output)
mod['func_4515'] = func_4515
mod = relay.transform.InferType()(mod)
var_4516 = relay.var("var_4516", dtype = "float32", shape = (576,))#candidate|4516|(576,)|var|float32
var_4517 = relay.var("var_4517", dtype = "float32", shape = (770,))#candidate|4517|(770,)|var|float32
output = func_4515(var_4516,var_4517,)
func_4518 = relay.Function([var_4516,var_4517,], output)
mutated_mod['func_4518'] = func_4518
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3657_call = mod.get_global_var('func_3657')
func_3658_call = mutated_mod.get_global_var('func_3658')
call_4571 = relay.TupleGetItem(func_3657_call(), 1)
call_4572 = relay.TupleGetItem(func_3658_call(), 1)
uop_4574 = relay.acosh(call_4571.astype('float64')) # shape=(7, 11, 10)
uop_4576 = relay.acosh(call_4572.astype('float64')) # shape=(7, 11, 10)
output = relay.Tuple([uop_4574,])
output2 = relay.Tuple([uop_4576,])
func_4580 = relay.Function([], output)
mod['func_4580'] = func_4580
mod = relay.transform.InferType()(mod)
output = func_4580()
func_4581 = relay.Function([], output)
mutated_mod['func_4581'] = func_4581
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4619 = relay.var("var_4619", dtype = "float64", shape = (12, 7, 10))#candidate|4619|(12, 7, 10)|var|float64
uop_4620 = relay.log2(var_4619.astype('float64')) # shape=(12, 7, 10)
func_286_call = mod.get_global_var('func_286')
func_288_call = mutated_mod.get_global_var('func_288')
call_4626 = relay.TupleGetItem(func_286_call(), 0)
call_4627 = relay.TupleGetItem(func_288_call(), 0)
func_2685_call = mod.get_global_var('func_2685')
func_2689_call = mutated_mod.get_global_var('func_2689')
const_4630 = relay.const([-0.566685,-3.411510,-3.625110,5.439691,-5.572044,-4.033871,6.885955,3.342307,-4.709648,5.419189,-9.936904,9.046148,-6.087888,3.271509,-2.083026,7.202562,1.481763,-8.352441,6.335111,-9.244333,-4.733310,9.868587,-7.049099,-1.690024,7.278189,3.036193,4.740107,7.987490,-4.517616,-1.871312,1.634540,-0.600803,3.426712,-1.181818,-0.844784,-5.013945,6.145897,-5.135847,2.883774,-3.993988,2.421771,-5.689631,-2.008974,-5.578979,-9.048529,-5.766662,-7.038047,1.570303,9.041019,-4.723328,-9.420544,-8.142946,-2.702815,2.750579,3.537495,-6.191417,3.262546,-0.279801,-3.567115,3.530377,3.753438,-3.682054,-7.243616,9.846845,9.818406,1.887603,9.414422,-2.449870,4.245980,2.066848,3.366451,1.964198,-2.487107,5.984156,-1.714902], dtype = "float32")#candidate|4630|(75,)|const|float32
var_4631 = relay.var("var_4631", dtype = "float32", shape = (144, 4))#candidate|4631|(144, 4)|var|float32
var_4632 = relay.var("var_4632", dtype = "bool", shape = (720,))#candidate|4632|(720,)|var|bool
call_4629 = relay.TupleGetItem(func_2685_call(relay.reshape(const_4630.astype('float32'), [3, 5, 5]), relay.reshape(var_4631.astype('float32'), [576,]), relay.reshape(var_4632.astype('bool'), [180, 4]), ), 3)
call_4633 = relay.TupleGetItem(func_2689_call(relay.reshape(const_4630.astype('float32'), [3, 5, 5]), relay.reshape(var_4631.astype('float32'), [576,]), relay.reshape(var_4632.astype('bool'), [180, 4]), ), 3)
bop_4634 = relay.logical_or(uop_4620.astype('bool'), relay.reshape(var_4619.astype('bool'), relay.shape_of(uop_4620))) # shape=(12, 7, 10)
output = relay.Tuple([call_4626,call_4629,const_4630,var_4631,var_4632,bop_4634,])
output2 = relay.Tuple([call_4627,call_4633,const_4630,var_4631,var_4632,bop_4634,])
func_4652 = relay.Function([var_4619,var_4631,var_4632,], output)
mod['func_4652'] = func_4652
mod = relay.transform.InferType()(mod)
mutated_mod['func_4652'] = func_4652
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4652_call = mutated_mod.get_global_var('func_4652')
var_4654 = relay.var("var_4654", dtype = "float64", shape = (12, 7, 10))#candidate|4654|(12, 7, 10)|var|float64
var_4655 = relay.var("var_4655", dtype = "float32", shape = (144, 4))#candidate|4655|(144, 4)|var|float32
var_4656 = relay.var("var_4656", dtype = "bool", shape = (720,))#candidate|4656|(720,)|var|bool
call_4653 = func_4652_call(var_4654,var_4655,var_4656,)
output = call_4653
func_4657 = relay.Function([var_4654,var_4655,var_4656,], output)
mutated_mod['func_4657'] = func_4657
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3178_call = mod.get_global_var('func_3178')
func_3180_call = mutated_mod.get_global_var('func_3180')
call_4665 = relay.TupleGetItem(func_3178_call(), 0)
call_4666 = relay.TupleGetItem(func_3180_call(), 0)
output = call_4665
output2 = call_4666
func_4689 = relay.Function([], output)
mod['func_4689'] = func_4689
mod = relay.transform.InferType()(mod)
mutated_mod['func_4689'] = func_4689
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4689_call = mutated_mod.get_global_var('func_4689')
call_4690 = func_4689_call()
output = call_4690
func_4691 = relay.Function([], output)
mutated_mod['func_4691'] = func_4691
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4713 = relay.var("var_4713", dtype = "float32", shape = (4, 10, 1))#candidate|4713|(4, 10, 1)|var|float32
uop_4714 = relay.rsqrt(var_4713.astype('float32')) # shape=(4, 10, 1)
bop_4724 = relay.multiply(uop_4714.astype('uint64'), relay.reshape(var_4713.astype('uint64'), relay.shape_of(uop_4714))) # shape=(4, 10, 1)
var_4737 = relay.var("var_4737", dtype = "float32", shape = (4, 10, 2))#candidate|4737|(4, 10, 2)|var|float32
bop_4738 = relay.bitwise_and(var_4713.astype('int32'), var_4737.astype('int32')) # shape=(4, 10, 2)
output = relay.Tuple([bop_4724,bop_4738,])
output2 = relay.Tuple([bop_4724,bop_4738,])
func_4741 = relay.Function([var_4713,var_4737,], output)
mod['func_4741'] = func_4741
mod = relay.transform.InferType()(mod)
var_4742 = relay.var("var_4742", dtype = "float32", shape = (4, 10, 1))#candidate|4742|(4, 10, 1)|var|float32
var_4743 = relay.var("var_4743", dtype = "float32", shape = (4, 10, 2))#candidate|4743|(4, 10, 2)|var|float32
output = func_4741(var_4742,var_4743,)
func_4744 = relay.Function([var_4742,var_4743,], output)
mutated_mod['func_4744'] = func_4744
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1759_call = mod.get_global_var('func_1759')
func_1760_call = mutated_mod.get_global_var('func_1760')
call_4746 = func_1759_call()
call_4747 = func_1759_call()
var_4750 = relay.var("var_4750", dtype = "int32", shape = (16, 12, 3))#candidate|4750|(16, 12, 3)|var|int32
bop_4751 = relay.left_shift(call_4746.astype('uint64'), relay.reshape(var_4750.astype('uint64'), relay.shape_of(call_4746))) # shape=(16, 12, 3)
bop_4754 = relay.left_shift(call_4747.astype('uint64'), relay.reshape(var_4750.astype('uint64'), relay.shape_of(call_4747))) # shape=(16, 12, 3)
uop_4769 = relay.log10(bop_4751.astype('float32')) # shape=(16, 12, 3)
uop_4771 = relay.log10(bop_4754.astype('float32')) # shape=(16, 12, 3)
bop_4778 = relay.not_equal(uop_4769.astype('bool'), relay.reshape(bop_4751.astype('bool'), relay.shape_of(uop_4769))) # shape=(16, 12, 3)
bop_4781 = relay.not_equal(uop_4771.astype('bool'), relay.reshape(bop_4754.astype('bool'), relay.shape_of(uop_4771))) # shape=(16, 12, 3)
bop_4787 = relay.logical_and(bop_4778.astype('bool'), relay.reshape(bop_4751.astype('bool'), relay.shape_of(bop_4778))) # shape=(16, 12, 3)
bop_4790 = relay.logical_and(bop_4781.astype('bool'), relay.reshape(bop_4754.astype('bool'), relay.shape_of(bop_4781))) # shape=(16, 12, 3)
output = relay.Tuple([bop_4787,])
output2 = relay.Tuple([bop_4790,])
func_4803 = relay.Function([var_4750,], output)
mod['func_4803'] = func_4803
mod = relay.transform.InferType()(mod)
var_4804 = relay.var("var_4804", dtype = "int32", shape = (16, 12, 3))#candidate|4804|(16, 12, 3)|var|int32
output = func_4803(var_4804)
func_4805 = relay.Function([var_4804], output)
mutated_mod['func_4805'] = func_4805
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1506_call = mod.get_global_var('func_1506')
func_1507_call = mutated_mod.get_global_var('func_1507')
call_4822 = relay.TupleGetItem(func_1506_call(), 0)
call_4823 = relay.TupleGetItem(func_1507_call(), 0)
func_3759_call = mod.get_global_var('func_3759')
func_3762_call = mutated_mod.get_global_var('func_3762')
var_4827 = relay.var("var_4827", dtype = "bool", shape = (45,))#candidate|4827|(45,)|var|bool
call_4826 = relay.TupleGetItem(func_3759_call(relay.reshape(var_4827.astype('bool'), [1, 45])), 0)
call_4828 = relay.TupleGetItem(func_3762_call(relay.reshape(var_4827.astype('bool'), [1, 45])), 0)
func_663_call = mod.get_global_var('func_663')
func_664_call = mutated_mod.get_global_var('func_664')
call_4845 = relay.TupleGetItem(func_663_call(), 0)
call_4846 = relay.TupleGetItem(func_664_call(), 0)
func_1759_call = mod.get_global_var('func_1759')
func_1760_call = mutated_mod.get_global_var('func_1760')
call_4866 = func_1759_call()
call_4867 = func_1759_call()
uop_4868 = relay.cosh(var_4827.astype('float64')) # shape=(45,)
output = relay.Tuple([call_4822,call_4826,call_4845,call_4866,uop_4868,])
output2 = relay.Tuple([call_4823,call_4828,call_4846,call_4867,uop_4868,])
func_4877 = relay.Function([var_4827,], output)
mod['func_4877'] = func_4877
mod = relay.transform.InferType()(mod)
var_4878 = relay.var("var_4878", dtype = "bool", shape = (45,))#candidate|4878|(45,)|var|bool
output = func_4877(var_4878)
func_4879 = relay.Function([var_4878], output)
mutated_mod['func_4879'] = func_4879
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3017_call = mod.get_global_var('func_3017')
func_3019_call = mutated_mod.get_global_var('func_3019')
call_4891 = relay.TupleGetItem(func_3017_call(), 0)
call_4892 = relay.TupleGetItem(func_3019_call(), 0)
output = relay.Tuple([call_4891,])
output2 = relay.Tuple([call_4892,])
func_4893 = relay.Function([], output)
mod['func_4893'] = func_4893
mod = relay.transform.InferType()(mod)
mutated_mod['func_4893'] = func_4893
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4893_call = mutated_mod.get_global_var('func_4893')
call_4894 = func_4893_call()
output = call_4894
func_4895 = relay.Function([], output)
mutated_mod['func_4895'] = func_4895
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3657_call = mod.get_global_var('func_3657')
func_3658_call = mutated_mod.get_global_var('func_3658')
call_5028 = relay.TupleGetItem(func_3657_call(), 1)
call_5029 = relay.TupleGetItem(func_3658_call(), 1)
uop_5035 = relay.log10(call_5028.astype('float32')) # shape=(7, 11, 10)
uop_5037 = relay.log10(call_5029.astype('float32')) # shape=(7, 11, 10)
output = uop_5035
output2 = uop_5037
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
