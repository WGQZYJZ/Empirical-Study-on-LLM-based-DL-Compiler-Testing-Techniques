==========mod==========
#[version = "0.0.5"]
def @func_4689() -> Tensor[(7, 11, 10), float32] {
  %0 = @func_3178() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %0.0
}

def @func_2528(%var_2519: Tensor[(45), bool], %var_2520: Tensor[(720), bool]) -> (Tensor[(3, 5, 5), float32], Tensor[(15, 16, 3), bool], Tensor[(770), float32], Tensor[(45), bool], Tensor[(720), bool], Tensor[(3, 5, 5), uint16]) {
  %1 = @func_777() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) */;
  %2 = %1.0;
  %3 = cast(%2, dtype="float32") /* ty=Tensor[(3, 5, 5), float32] */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %5 = cast(%var_2519, dtype="bool") /* ty=Tensor[(45), bool] */;
  %6 = cast(%var_2520, dtype="bool") /* ty=Tensor[(720), bool] */;
  %7 = reshape(%4, newshape=[7, 11, 10]) /* ty=Tensor[(7, 11, 10), float32] */;
  %8 = reshape(%5, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %9 = reshape(%6, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %10 = @func_620(%7, %8, %9) /* ty=(Tensor[(7, 11, 10), float64], Tensor[(7, 11, 10), float32], Tensor[(7, 11, 10), float32], Tensor[(14, 16, 12), float32], Tensor[(1344, 2), float32], Tensor[(72, 8), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720), bool]) */;
  %11 = @func_777() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) */;
  %12 = log2(%3) /* ty=Tensor[(3, 5, 5), float32] */;
  %13 = %10.6;
  %14 = %11.0;
  (%12, %13, meta[relay.Constant][0] /* ty=Tensor[(770), float32] */, %var_2519, %var_2520, %14)
}

def @main() -> Tensor[(7, 11, 10), float32] {
  %15 = @func_3657() /* ty=(Tensor[(72, 8), float32], Tensor[(7, 11, 10), float32], Tensor[(75), float32]) */;
  %16 = %15.1;
  %17 = cast(%16, dtype="float32") /* ty=Tensor[(7, 11, 10), float32] */;
  log10(%17) /* ty=Tensor[(7, 11, 10), float32] */
}

def @func_2183() -> (Tensor[(7, 11, 10), float32],) {
  %18 = @func_1849() /* ty=Tensor[(7, 11, 10), float32] */;
  (%18,)
}

def @func_4380(%var_4344: Tensor[(7, 11, 10), float32], %var_4363: Tensor[(576), float32]) -> (Tensor[(7, 11, 10), int32], Tensor[(16, 12, 3), int32], Tensor[(576), float32]) {
  %19 = @func_3635() /* ty=Tensor[(7, 11, 10), float32] */;
  %20 = cast(%var_4344, dtype="int32") /* ty=Tensor[(7, 11, 10), int32] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="int32") /* ty=Tensor[(7, 11, 10), int32] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %24 = cast(%var_4363, dtype="float32") /* ty=Tensor[(576), float32] */;
  %25 = cast(%var_4363, dtype="float32") /* ty=Tensor[(576), float32] */;
  %26 = reshape(%24, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %27 = reshape(%25, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %28 = @func_195(%26, %27) /* ty=(Tensor[(16, 12, 3), int32],) */;
  %29 = logical_xor(%22, %23) /* ty=Tensor[(7, 11, 10), int32] */;
  %30 = %28.0;
  (%29, %30, %var_4363)
}

def @func_4332(%var_4311: Tensor[(10, 13, 13), float64]) -> (Tensor[(10, 13, 13), float64], Tensor[(16, 12, 3), uint64], Tensor[(576), int32]) {
  %31 = cast(%var_4311, dtype="float64") /* ty=Tensor[(10, 13, 13), float64] */;
  %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
  %33 = reshape(%32, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), int32] */;
  %34 = sqrt(%31) /* ty=Tensor[(10, 13, 13), float64] */;
  %35 = @func_2299(%33) /* ty=Tensor[(16, 12, 3), uint64] */;
  (%34, %35, meta[relay.Constant][1] /* ty=Tensor[(576), int32] */)
}

def @func_3876() -> (Tensor[(16, 12, 3), int32], Tensor[(75), float32], Tensor[(45), bool]) {
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(45), bool] */, dtype="bool") /* ty=Tensor[(45), bool] */;
  %37 = reshape(%36, newshape=[1, 45]) /* ty=Tensor[(1, 45), bool] */;
  %38 = @func_3759(%37) /* ty=(Tensor[(75), float32], Tensor[(15, 16, 3), bool], Tensor[(1, 45), bool], Tensor[(4, 180), bool]) */;
  %39 = @func_2926() /* ty=Tensor[(16, 12, 3), int32] */;
  %40 = %38.0;
  (%39, %40, meta[relay.Constant][2] /* ty=Tensor[(45), bool] */)
}

def @func_4515(%var_4495: Tensor[(576), float32], %var_4511: Tensor[(770), float32]) -> (Tensor[(75), float32], Tensor[(14, 16, 12), float32], Tensor[(48, 56), float32], Tensor[(576), float32], Tensor[(720), bool], Tensor[(770), float32], Tensor[(45), bool], Tensor[(720), bool]) {
  %41 = @func_3657() /* ty=(Tensor[(72, 8), float32], Tensor[(7, 11, 10), float32], Tensor[(75), float32]) */;
  %42 = cast(meta[relay.Constant][3] /* ty=Tensor[(48, 56), float32] */, dtype="float32") /* ty=Tensor[(48, 56), float32] */;
  %43 = cast(%var_4495, dtype="float32") /* ty=Tensor[(576), float32] */;
  %44 = reshape(%42, newshape=[14, 16, 12]) /* ty=Tensor[(14, 16, 12), float32] */;
  %45 = reshape(%43, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %46 = @func_513(%44, %45) /* ty=(Tensor[(14, 16, 12), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32]) */;
  %47 = cast(%var_4511, dtype="float32") /* ty=Tensor[(770), float32] */;
  %48 = cast(meta[relay.Constant][4] /* ty=Tensor[(45), bool] */, dtype="bool") /* ty=Tensor[(45), bool] */;
  %49 = cast(meta[relay.Constant][5] /* ty=Tensor[(720), bool] */, dtype="bool") /* ty=Tensor[(720), bool] */;
  %50 = reshape(%47, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %51 = reshape(%48, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %52 = reshape(%49, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %53 = @func_1629(%50, %51, %52) /* ty=(Tensor[(72, 8), bool], Tensor[(45), bool], Tensor[(770), float32], Tensor[(45), bool], Tensor[(720), bool]) */;
  %54 = %41.2;
  %55 = %46.0;
  %56 = %53.4;
  (%54, %55, meta[relay.Constant][3] /* ty=Tensor[(48, 56), float32] */, %var_4495, %56, %var_4511, meta[relay.Constant][4] /* ty=Tensor[(45), bool] */, meta[relay.Constant][5] /* ty=Tensor[(720), bool] */)
}

def @func_620(%var_557: Tensor[(7, 11, 10), float32], %var_616: Tensor[(45), bool], %var_617: Tensor[(720), bool]) -> (Tensor[(7, 11, 10), float64], Tensor[(7, 11, 10), float32], Tensor[(7, 11, 10), float32], Tensor[(14, 16, 12), float32], Tensor[(1344, 2), float32], Tensor[(72, 8), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720), bool]) {
  %57 = @func_286() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %58 = %57.0;
  %59 = cast(%var_557, dtype="uint8") /* ty=Tensor[(7, 11, 10), uint8] */;
  %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
  %61 = cast(%58, dtype="uint8") /* ty=Tensor[(7, 11, 10), uint8] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %63 = add(%61, %62) /* ty=Tensor[(7, 11, 10), uint8] */;
  %64 = cast(%63, dtype="float32") /* ty=Tensor[(7, 11, 10), float32] */;
  %65 = log2(%64) /* ty=Tensor[(7, 11, 10), float32] */;
  %66 = cast(%65, dtype="float64") /* ty=Tensor[(7, 11, 10), float64] */;
  %67 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%63, dtype="float64") /* ty=Tensor[(7, 11, 10), float64] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %70 = @func_286() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %71 = cast(%63, dtype="float32") /* ty=Tensor[(7, 11, 10), float32] */;
  %72 = cast(meta[relay.Constant][6] /* ty=Tensor[(1344, 2), float32] */, dtype="float32") /* ty=Tensor[(1344, 2), float32] */;
  %73 = cast(meta[relay.Constant][7] /* ty=Tensor[(72, 8), float32] */, dtype="float32") /* ty=Tensor[(72, 8), float32] */;
  %74 = reshape(%72, newshape=[14, 16, 12]) /* ty=Tensor[(14, 16, 12), float32] */;
  %75 = reshape(%73, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %76 = @func_513(%74, %75) /* ty=(Tensor[(14, 16, 12), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32]) */;
  %77 = cast(%var_616, dtype="bool") /* ty=Tensor[(45), bool] */;
  %78 = cast(%var_617, dtype="bool") /* ty=Tensor[(720), bool] */;
  %79 = reshape(%77, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), bool] */;
  %80 = reshape(%78, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), bool] */;
  %81 = floor_divide(%68, %69) /* ty=Tensor[(7, 11, 10), float64] */;
  %82 = %70.0;
  %83 = erf(%71) /* ty=Tensor[(7, 11, 10), float32] */;
  %84 = %76.0;
  %85 = @func_90(%79, %80) /* ty=Tensor[(15, 16, 3), bool] */;
  (%81, %82, %83, %84, meta[relay.Constant][6] /* ty=Tensor[(1344, 2), float32] */, meta[relay.Constant][7] /* ty=Tensor[(72, 8), float32] */, %85, %var_616, %var_617)
}

def @func_4173(%var_4163: Tensor[(10, 4, 14), int8], %var_4164: Tensor[(10, 4, 14), int8]) -> (Tensor[(10, 4, 14), int8],) {
  %86 = cast(%var_4164, dtype="int8") /* ty=Tensor[(10, 4, 14), int8] */;
  %87 = shape_of(%var_4163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%var_4163, dtype="int8") /* ty=Tensor[(10, 4, 14), int8] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %90 = multiply(%88, %89) /* ty=Tensor[(10, 4, 14), int8] */;
  (%90,)
}

def @func_4306(%var_4290: Tensor[(8, 14, 2), uint8]) -> (Tensor[(8, 14, 2), uint8], Tensor[(8, 14, 2), float64]) {
  %91 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 14, 2), uint8] */, dtype="uint8") /* ty=Tensor[(8, 14, 2), uint8] */;
  %92 = shape_of(%var_4290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%var_4290, dtype="uint8") /* ty=Tensor[(8, 14, 2), uint8] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %95 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 14, 2), uint8] */, dtype="float64") /* ty=Tensor[(8, 14, 2), float64] */;
  %96 = maximum(%93, %94) /* ty=Tensor[(8, 14, 2), uint8] */;
  %97 = erf(%95) /* ty=Tensor[(8, 14, 2), float64] */;
  (%96, %97)
}

def @func_195(%var_179: Tensor[(16, 12, 3), float32], %var_182: Tensor[(16, 12, 3), float32]) -> (Tensor[(16, 12, 3), int32],) {
  %98 = cast(%var_179, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
  %99 = atan(%98) /* ty=Tensor[(16, 12, 3), float32] */;
  %100 = cast(%var_182, dtype="int32") /* ty=Tensor[(16, 12, 3), int32] */;
  %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%99, dtype="int32") /* ty=Tensor[(16, 12, 3), int32] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %104 = maximum(%102, %103) /* ty=Tensor[(16, 12, 3), int32] */;
  (%104,)
}

def @func_2007(%var_1995: Tensor[(16, 12, 3), int32]) -> Tensor[(16, 12, 3), float32] {
  %105 = @func_1759() /* ty=Tensor[(16, 12, 3), int32] */;
  %106 = cast(%var_1995, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
  %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%105, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%108, %109) /* ty=Tensor[(16, 12, 3), float32] */
}

def @func_3178() -> (Tensor[(7, 11, 10), float32],) {
  %110 = @func_1849() /* ty=Tensor[(7, 11, 10), float32] */;
  (%110,)
}

def @func_2474() -> (Tensor[(3, 5, 5), uint16], Tensor[(7, 11, 10), bool]) {
  %111 = @func_1849() /* ty=Tensor[(7, 11, 10), float32] */;
  %112 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
  %113 = %112.0;
  %114 = cast(%113, dtype="bool") /* ty=Tensor[(7, 11, 10), bool] */;
  %115 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%111, dtype="bool") /* ty=Tensor[(7, 11, 10), bool] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %118 = @func_849() /* ty=Tensor[(3, 5, 5), uint16] */;
  %119 = less_equal(%116, %117) /* ty=Tensor[(7, 11, 10), bool] */;
  (%118, %119)
}

def @func_777() -> (Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) {
  %120 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(3, 5, 5), float64] */;
  %121 = cos(%120) /* ty=Tensor[(3, 5, 5), float64] */;
  %122 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 5, 5), float64] */, dtype="int32") /* ty=Tensor[(3, 5, 5), int32] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="int32") /* ty=Tensor[(3, 5, 5), int32] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %126 = bitwise_xor(%124, %125) /* ty=Tensor[(3, 5, 5), int32] */;
  %127 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 5, 5), float64] */, dtype="uint16") /* ty=Tensor[(3, 5, 5), uint16] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%126, dtype="uint16") /* ty=Tensor[(3, 5, 5), uint16] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %131 = cast(%121, dtype="float32") /* ty=Tensor[(3, 5, 5), float32] */;
  %132 = atanh(%131) /* ty=Tensor[(3, 5, 5), float32] */;
  %133 = cast(%132, dtype="float32") /* ty=Tensor[(3, 5, 5), float32] */;
  %134 = asin(%133) /* ty=Tensor[(3, 5, 5), float32] */;
  %135 = cast(%126, dtype="bool") /* ty=Tensor[(3, 5, 5), bool] */;
  %136 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(3, 5, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 5, 5), float64] */, dtype="bool") /* ty=Tensor[(3, 5, 5), bool] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %139 = logical_or(%137, %138) /* ty=Tensor[(3, 5, 5), bool] */;
  %140 = cast(%139, dtype="float32") /* ty=Tensor[(3, 5, 5), float32] */;
  %141 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%134, dtype="float32") /* ty=Tensor[(3, 5, 5), float32] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %144 = bitwise_and(%129, %130) /* ty=Tensor[(3, 5, 5), uint16] */;
  %145 = divide(%142, %143) /* ty=Tensor[(3, 5, 5), float32] */;
  (%144, %145)
}

def @func_1724(%var_1720: Tensor[(576), float32]) -> (Tensor[(7, 11, 10), bool], Tensor[(720, 1), bool], Tensor[(576), float32], Tensor[(720), bool]) {
  %146 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
  %147 = %146.0;
  %148 = cast(%147, dtype="float64") /* ty=Tensor[(7, 11, 10), float64] */;
  %149 = sigmoid(%148) /* ty=Tensor[(7, 11, 10), float64] */;
  %150 = cast(%149, dtype="bool") /* ty=Tensor[(7, 11, 10), bool] */;
  %151 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%147, dtype="bool") /* ty=Tensor[(7, 11, 10), bool] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %154 = cast(%var_1720, dtype="float32") /* ty=Tensor[(576), float32] */;
  %155 = cast(meta[relay.Constant][10] /* ty=Tensor[(720), bool] */, dtype="bool") /* ty=Tensor[(720), bool] */;
  %156 = reshape(%154, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %157 = reshape(%155, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %158 = @func_1120(%156, %157) /* ty=(Tensor[(3, 5, 5), float32], Tensor[(3, 5, 5), uint16], Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), uint16], Tensor[(45), bool], Tensor[(3, 5, 5), uint16]) */;
  %159 = less(%152, %153) /* ty=Tensor[(7, 11, 10), bool] */;
  %160 = %158.8;
  (%159, %160, %var_1720, meta[relay.Constant][10] /* ty=Tensor[(720), bool] */)
}

def @func_3482(%var_3474: Tensor[(2, 2, 10), int64], %var_3475: Tensor[(2, 2, 10), int64]) -> (Tensor[(2, 2, 10), float64],) {
  %161 = cast(%var_3475, dtype="int64") /* ty=Tensor[(2, 2, 10), int64] */;
  %162 = shape_of(%var_3474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%var_3474, dtype="int64") /* ty=Tensor[(2, 2, 10), int64] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %165 = left_shift(%163, %164) /* ty=Tensor[(2, 2, 10), int64] */;
  %166 = cast(%165, dtype="float64") /* ty=Tensor[(2, 2, 10), float64] */;
  %167 = erf(%166) /* ty=Tensor[(2, 2, 10), float64] */;
  (%167,)
}

def @func_3710(%var_3699: Tensor[(7, 11, 10), float32]) -> (Tensor[(7, 11, 10), int8], Tensor[(7, 11, 10), float64]) {
  %168 = @func_3635() /* ty=Tensor[(7, 11, 10), float32] */;
  %169 = cast(%var_3699, dtype="int8") /* ty=Tensor[(7, 11, 10), int8] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="int8") /* ty=Tensor[(7, 11, 10), int8] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %173 = cast(%var_3699, dtype="float64") /* ty=Tensor[(7, 11, 10), float64] */;
  %174 = multiply(%171, %172) /* ty=Tensor[(7, 11, 10), int8] */;
  %175 = asinh(%173) /* ty=Tensor[(7, 11, 10), float64] */;
  (%174, %175)
}

def @func_1849() -> Tensor[(7, 11, 10), float32] {
  %176 = @func_663() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %176.0
}

def @func_3669() -> Tensor[(7, 11, 10), bool] {
  %177 = @func_3017() /* ty=(Tensor[(7, 11, 10), bool],) */;
  %177.0
}

def @func_3635() -> Tensor[(7, 11, 10), float32] {
  %178 = @func_2907() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %178.0
}

def @func_4893() -> (Tensor[(7, 11, 10), bool],) {
  %179 = @func_3017() /* ty=(Tensor[(7, 11, 10), bool],) */;
  %180 = %179.0;
  (%180,)
}

def @func_1564(%var_1542: Tensor[(7, 6, 11), float32]) -> (Tensor[(3, 5, 5), uint16], Tensor[(7, 6, 11), float32]) {
  %181 = cast(%var_1542, dtype="float32") /* ty=Tensor[(7, 6, 11), float32] */;
  %182 = tan(%181) /* ty=Tensor[(7, 6, 11), float32] */;
  %183 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 6, 11), float32] */, dtype="float64") /* ty=Tensor[(7, 6, 11), float64] */;
  %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%182, dtype="float64") /* ty=Tensor[(7, 6, 11), float64] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %187 = mod(%185, %186) /* ty=Tensor[(7, 6, 11), float64] */;
  %188 = cast(%187, dtype="float32") /* ty=Tensor[(7, 6, 11), float32] */;
  %189 = @func_849() /* ty=Tensor[(3, 5, 5), uint16] */;
  %190 = sqrt(%188) /* ty=Tensor[(7, 6, 11), float32] */;
  (%189, %190)
}

def @func_2995(%var_2983: Tensor[(13, 12, 11), float32], %var_2990: Tensor[(45), bool], %var_2991: Tensor[(720), bool]) -> (Tensor[(13, 12, 11), float32], Tensor[(7, 11, 10), float32], Tensor[(45), bool], Tensor[(720), bool]) {
  %191 = cast(%var_2983, dtype="float32") /* ty=Tensor[(13, 12, 11), float32] */;
  %192 = cast(%var_2990, dtype="bool") /* ty=Tensor[(45), bool] */;
  %193 = cast(%var_2991, dtype="bool") /* ty=Tensor[(720), bool] */;
  %194 = reshape(%192, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %195 = reshape(%193, newshape=[720, 1]) /* ty=Tensor[(720, 1), bool] */;
  %196 = @func_351(%194, %195) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) */;
  %197 = rsqrt(%191) /* ty=Tensor[(13, 12, 11), float32] */;
  %198 = %196.0;
  (%197, %198, %var_2990, %var_2991)
}

def @func_663() -> (Tensor[(7, 11, 10), float32],) {
  %199 = @func_286() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %200 = %199.0;
  (%200,)
}

def @func_3941() -> (Tensor[(4, 3, 16), float64],) {
  %201 = @func_3437() /* ty=(Tensor[(4, 3, 16), bool],) */;
  %202 = %201.0;
  %203 = cast(%202, dtype="float64") /* ty=Tensor[(4, 3, 16), float64] */;
  %204 = sinh(%203) /* ty=Tensor[(4, 3, 16), float64] */;
  %205 = cast(%202, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%204, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %209 = add(%207, %208) /* ty=Tensor[(4, 3, 16), float32] */;
  %210 = cast(%209, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %211 = acosh(%210) /* ty=Tensor[(4, 3, 16), float32] */;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(4, 3, 16), float64] */;
  %213 = log(%212) /* ty=Tensor[(4, 3, 16), float64] */;
  (%213,)
}

def @func_4741(%var_4713: Tensor[(4, 10, 1), float32], %var_4737: Tensor[(4, 10, 2), float32]) -> (Tensor[(4, 10, ?), uint64], Tensor[(4, 10, 2), int32]) {
  %214 = cast(%var_4713, dtype="float32") /* ty=Tensor[(4, 10, 1), float32] */;
  %215 = rsqrt(%214) /* ty=Tensor[(4, 10, 1), float32] */;
  %216 = cast(%var_4713, dtype="uint64") /* ty=Tensor[(4, 10, 1), uint64] */;
  %217 = shape_of(%215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%215, dtype="uint64") /* ty=Tensor[(4, 10, 1), uint64] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %220 = cast(%var_4713, dtype="int32") /* ty=Tensor[(4, 10, 1), int32] */;
  %221 = cast(%var_4737, dtype="int32") /* ty=Tensor[(4, 10, 2), int32] */;
  %222 = multiply(%218, %219) /* ty=Tensor[(4, 10, ?), uint64] */;
  %223 = bitwise_and(%220, %221) /* ty=Tensor[(4, 10, 2), int32] */;
  (%222, %223)
}

def @func_3156() -> Tensor[(15, 7, 8), bool] {
  %224 = @func_2731() /* ty=(Tensor[(4, 3, 16), bool], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool]) */;
  %224.1
}

def @func_1263(%var_1257: Tensor[(720), bool]) -> (Tensor[(3, 5, 5), uint32], Tensor[(45), bool], Tensor[(45), bool], Tensor[(720), bool]) {
  %225 = @func_777() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) */;
  %226 = %225.0;
  %227 = cast(%226, dtype="float64") /* ty=Tensor[(3, 5, 5), float64] */;
  %228 = cosh(%227) /* ty=Tensor[(3, 5, 5), float64] */;
  %229 = cast(%228, dtype="uint32") /* ty=Tensor[(3, 5, 5), uint32] */;
  %230 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%226, dtype="uint32") /* ty=Tensor[(3, 5, 5), uint32] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %233 = cast(meta[relay.Constant][12] /* ty=Tensor[(45), bool] */, dtype="bool") /* ty=Tensor[(45), bool] */;
  %234 = cast(%var_1257, dtype="bool") /* ty=Tensor[(720), bool] */;
  %235 = reshape(%233, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %236 = reshape(%234, newshape=[720, 1]) /* ty=Tensor[(720, 1), bool] */;
  %237 = @func_351(%235, %236) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) */;
  %238 = maximum(%231, %232) /* ty=Tensor[(3, 5, 5), uint32] */;
  %239 = %237.2;
  (%238, %239, meta[relay.Constant][12] /* ty=Tensor[(45), bool] */, %var_1257)
}

def @func_1669(%var_1658: bool) -> Tensor[(6, 3, 12), bool] {
  %240 = cast(%var_1658, dtype="bool") /* ty=bool */;
  %241 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 3, 12), bool] */, dtype="bool") /* ty=Tensor[(6, 3, 12), bool] */;
  logical_or(%240, %241) /* ty=Tensor[(6, 3, 12), bool] */
}

def @func_4272(%var_4248: Tensor[(7, 11, 10), bool]) -> Tensor[(7, 11, 10), bool] {
  %242 = @func_3017() /* ty=(Tensor[(7, 11, 10), bool],) */;
  %243 = %242.0;
  %244 = cast(%var_4248, dtype="bool") /* ty=Tensor[(7, 11, 10), bool] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="bool") /* ty=Tensor[(7, 11, 10), bool] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%246, %247) /* ty=Tensor[(7, 11, 10), bool] */
}

def @func_1445(%var_1390: Tensor[(9, 15, 4), int8], %var_1391: Tensor[(9, 15, 4), int8], %var_1431: Tensor[(12, 60), bool]) -> (Tensor[(9, 15, 4), int16], Tensor[(576), float32], Tensor[(36, 16), float32], Tensor[(12, 60), bool], Tensor[(9, 15, 4), bool], Tensor[(16, 12, 3), int32]) {
  %248 = cast(%var_1391, dtype="int8") /* ty=Tensor[(9, 15, 4), int8] */;
  %249 = shape_of(%var_1390, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%var_1390, dtype="int8") /* ty=Tensor[(9, 15, 4), int8] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %252 = bitwise_or(%250, %251) /* ty=Tensor[(9, 15, 4), int8] */;
  %253 = cast(%var_1391, dtype="int16") /* ty=Tensor[(9, 15, 4), int16] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%252, dtype="int16") /* ty=Tensor[(9, 15, 4), int16] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %257 = cast(meta[relay.Constant][14] /* ty=Tensor[(36, 16), float32] */, dtype="float32") /* ty=Tensor[(36, 16), float32] */;
  %258 = cast(%var_1431, dtype="bool") /* ty=Tensor[(12, 60), bool] */;
  %259 = reshape(%257, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %260 = reshape(%258, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %261 = @func_1120(%259, %260) /* ty=(Tensor[(3, 5, 5), float32], Tensor[(3, 5, 5), uint16], Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), uint16], Tensor[(45), bool], Tensor[(3, 5, 5), uint16]) */;
  %262 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 15, 4), int8] */, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  %263 = shape_of(%var_1391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%var_1391, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %266 = %261.4;
  %267 = cast(%266, dtype="float32") /* ty=Tensor[(576), float32] */;
  %268 = cast(meta[relay.Constant][14] /* ty=Tensor[(36, 16), float32] */, dtype="float32") /* ty=Tensor[(36, 16), float32] */;
  %269 = reshape(%267, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %270 = reshape(%268, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %271 = @func_195(%269, %270) /* ty=(Tensor[(16, 12, 3), int32],) */;
  %272 = left_shift(%255, %256) /* ty=Tensor[(9, 15, 4), int16] */;
  %273 = equal(%264, %265) /* ty=Tensor[(9, 15, 4), bool] */;
  %274 = %271.0;
  (%272, %266, meta[relay.Constant][14] /* ty=Tensor[(36, 16), float32] */, %var_1431, %273, %274)
}

def @func_4154(%var_4120: Tensor[(7, 11, 10), float32], %var_4132: Tensor[(70), float32], %var_4134: Tensor[(720), bool]) -> (Tensor[(7, 11, 10), int64], Tensor[(14, 5, 14), int16], Tensor[(70), float32], Tensor[(1, 45), bool], Tensor[(720), bool]) {
  %275 = @func_663() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %276 = %275.0;
  %277 = cast(%var_4120, dtype="int64") /* ty=Tensor[(7, 11, 10), int64] */;
  %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%276, dtype="int64") /* ty=Tensor[(7, 11, 10), int64] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %281 = cast(%var_4132, dtype="float32") /* ty=Tensor[(70), float32] */;
  %282 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 45), bool] */, dtype="bool") /* ty=Tensor[(1, 45), bool] */;
  %283 = cast(%var_4134, dtype="bool") /* ty=Tensor[(720), bool] */;
  %284 = reshape(%281, newshape=[1, 5, 14]) /* ty=Tensor[(1, 5, 14), float32] */;
  %285 = reshape(%282, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %286 = reshape(%283, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %287 = @func_443(%284, %285, %286) /* ty=(Tensor[(14, 5, 14), int16], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(720), bool], Tensor[(14, 5, 14), float64], Tensor[(15, 16, 3), bool]) */;
  %288 = bitwise_xor(%279, %280) /* ty=Tensor[(7, 11, 10), int64] */;
  %289 = %287.0;
  (%288, %289, %var_4132, meta[relay.Constant][16] /* ty=Tensor[(1, 45), bool] */, %var_4134)
}

def @func_4803(%var_4750: Tensor[(16, 12, 3), int32]) -> (Tensor[(16, 12, 3), bool],) {
  %290 = @func_1759() /* ty=Tensor[(16, 12, 3), int32] */;
  %291 = cast(%var_4750, dtype="uint64") /* ty=Tensor[(16, 12, 3), uint64] */;
  %292 = shape_of(%290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%290, dtype="uint64") /* ty=Tensor[(16, 12, 3), uint64] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %295 = left_shift(%293, %294) /* ty=Tensor[(16, 12, 3), uint64] */;
  %296 = cast(%295, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
  %297 = log10(%296) /* ty=Tensor[(16, 12, 3), float32] */;
  %298 = cast(%295, dtype="bool") /* ty=Tensor[(16, 12, 3), bool] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%297, dtype="bool") /* ty=Tensor[(16, 12, 3), bool] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %302 = not_equal(%300, %301) /* ty=Tensor[(16, 12, 3), bool] */;
  %303 = cast(%295, dtype="bool") /* ty=Tensor[(16, 12, 3), bool] */;
  %304 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%302, dtype="bool") /* ty=Tensor[(16, 12, 3), bool] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %307 = logical_and(%305, %306) /* ty=Tensor[(16, 12, 3), bool] */;
  (%307,)
}

def @func_4652(%var_4619: Tensor[(12, 7, 10), float64], %var_4631: Tensor[(144, 4), float32], %var_4632: Tensor[(720), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(3, 5, 5), bool], Tensor[(75), float32], Tensor[(144, 4), float32], Tensor[(720), bool], Tensor[(12, 7, 10), bool]) {
  %308 = @func_286() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %309 = cast(meta[relay.Constant][17] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %310 = cast(%var_4631, dtype="float32") /* ty=Tensor[(144, 4), float32] */;
  %311 = cast(%var_4632, dtype="bool") /* ty=Tensor[(720), bool] */;
  %312 = reshape(%309, newshape=[3, 5, 5]) /* ty=Tensor[(3, 5, 5), float32] */;
  %313 = reshape(%310, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %314 = reshape(%311, newshape=[180, 4]) /* ty=Tensor[(180, 4), bool] */;
  %315 = @func_2685(%312, %313, %314) /* ty=(Tensor[(3, 5, 5), float32], Tensor[(576), float32], Tensor[(180, 4), bool], Tensor[(3, 5, 5), bool], Tensor[(3, 5, 5), float64], Tensor[(45), bool]) */;
  %316 = cast(%var_4619, dtype="float64") /* ty=Tensor[(12, 7, 10), float64] */;
  %317 = log2(%316) /* ty=Tensor[(12, 7, 10), float64] */;
  %318 = cast(%var_4619, dtype="bool") /* ty=Tensor[(12, 7, 10), bool] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="bool") /* ty=Tensor[(12, 7, 10), bool] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %322 = %308.0;
  %323 = %315.3;
  %324 = logical_or(%320, %321) /* ty=Tensor[(12, 7, 10), bool] */;
  (%322, %323, meta[relay.Constant][17] /* ty=Tensor[(75), float32] */, %var_4631, %var_4632, %324)
}

def @func_4877(%var_4827: Tensor[(45), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(75), float32], Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(45), float64]) {
  %325 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
  %326 = cast(%var_4827, dtype="bool") /* ty=Tensor[(45), bool] */;
  %327 = reshape(%326, newshape=[1, 45]) /* ty=Tensor[(1, 45), bool] */;
  %328 = @func_3759(%327) /* ty=(Tensor[(75), float32], Tensor[(15, 16, 3), bool], Tensor[(1, 45), bool], Tensor[(4, 180), bool]) */;
  %329 = @func_663() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %330 = cast(%var_4827, dtype="float64") /* ty=Tensor[(45), float64] */;
  %331 = %325.0;
  %332 = %328.0;
  %333 = %329.0;
  %334 = @func_1759() /* ty=Tensor[(16, 12, 3), int32] */;
  %335 = cosh(%330) /* ty=Tensor[(45), float64] */;
  (%331, %332, %333, %334, %335)
}

def @func_3453() -> Tensor[(3, 5, 5), uint16] {
  @func_849() /* ty=Tensor[(3, 5, 5), uint16] */
}

def @func_2299(%var_2292: Tensor[(16, 12, 3), int32]) -> Tensor[(16, 12, 3), uint64] {
  %336 = @func_1759() /* ty=Tensor[(16, 12, 3), int32] */;
  %337 = cast(%var_2292, dtype="uint64") /* ty=Tensor[(16, 12, 3), uint64] */;
  %338 = shape_of(%336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%336, dtype="uint64") /* ty=Tensor[(16, 12, 3), uint64] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%339, %340) /* ty=Tensor[(16, 12, 3), uint64] */
}

def @func_2907() -> (Tensor[(7, 11, 10), float32],) {
  %341 = @func_2183() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %342 = %341.0;
  (%342,)
}

def @func_1629(%var_1611: Tensor[(770), float32], %var_1612: Tensor[(45), bool], %var_1613: Tensor[(720), bool]) -> (Tensor[(72, 8), bool], Tensor[(45), bool], Tensor[(770), float32], Tensor[(45), bool], Tensor[(720), bool]) {
  %343 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
  %344 = %343.2;
  %345 = cast(%344, dtype="float64") /* ty=Tensor[(72, 8), float64] */;
  %346 = asinh(%345) /* ty=Tensor[(72, 8), float64] */;
  %347 = cast(%344, dtype="bool") /* ty=Tensor[(72, 8), bool] */;
  %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(2), int32] */;
  %349 = cast(%346, dtype="bool") /* ty=Tensor[(72, 8), bool] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %351 = cast(%var_1611, dtype="float32") /* ty=Tensor[(770), float32] */;
  %352 = cast(%var_1612, dtype="bool") /* ty=Tensor[(45), bool] */;
  %353 = cast(%var_1613, dtype="bool") /* ty=Tensor[(720), bool] */;
  %354 = reshape(%351, newshape=[7, 11, 10]) /* ty=Tensor[(7, 11, 10), float32] */;
  %355 = reshape(%352, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %356 = reshape(%353, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %357 = @func_620(%354, %355, %356) /* ty=(Tensor[(7, 11, 10), float64], Tensor[(7, 11, 10), float32], Tensor[(7, 11, 10), float32], Tensor[(14, 16, 12), float32], Tensor[(1344, 2), float32], Tensor[(72, 8), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720), bool]) */;
  %358 = logical_and(%349, %350) /* ty=Tensor[(72, 8), bool] */;
  %359 = %357.7;
  (%358, %359, %var_1611, %var_1612, %var_1613)
}

def @func_1506() -> (Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) {
  %360 = @func_286() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %361 = cast(meta[relay.Constant][18] /* ty=Tensor[(72, 8), float32] */, dtype="float32") /* ty=Tensor[(72, 8), float32] */;
  %362 = cast(meta[relay.Constant][18] /* ty=Tensor[(72, 8), float32] */, dtype="float32") /* ty=Tensor[(72, 8), float32] */;
  %363 = reshape(%361, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %364 = reshape(%362, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %365 = @func_195(%363, %364) /* ty=(Tensor[(16, 12, 3), int32],) */;
  %366 = %360.0;
  %367 = %365.0;
  (%366, %367, meta[relay.Constant][18] /* ty=Tensor[(72, 8), float32] */)
}

def @func_1539() -> Tensor[(16, 12, 3), int32] {
  %368 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
  %368.1
}

def @func_849() -> Tensor[(3, 5, 5), uint16] {
  %369 = @func_777() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) */;
  %369.0
}

def @func_3562() -> (Tensor[(7, 11, 10), float32], Tensor[(2, 2, 10), float64], Tensor[(1, 40), int64]) {
  %370 = @func_286() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %371 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 40), int64] */, dtype="int64") /* ty=Tensor[(1, 40), int64] */;
  %372 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 40), int64] */, dtype="int64") /* ty=Tensor[(1, 40), int64] */;
  %373 = reshape(%371, newshape=[2, 2, 10]) /* ty=Tensor[(2, 2, 10), int64] */;
  %374 = reshape(%372, newshape=[2, 2, 10]) /* ty=Tensor[(2, 2, 10), int64] */;
  %375 = @func_3482(%373, %374) /* ty=(Tensor[(2, 2, 10), float64],) */;
  %376 = %370.0;
  %377 = %375.0;
  (%376, %377, meta[relay.Constant][19] /* ty=Tensor[(1, 40), int64] */)
}

def @func_1120(%var_1064: Tensor[(576), float32], %var_1069: Tensor[(720), bool]) -> (Tensor[(3, 5, 5), float32], Tensor[(3, 5, 5), uint16], Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), uint16], Tensor[(45), bool], Tensor[(3, 5, 5), uint16]) {
  %378 = @func_777() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) */;
  %379 = @func_777() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) */;
  %380 = @func_663() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %381 = cast(%var_1064, dtype="float32") /* ty=Tensor[(576), float32] */;
  %382 = cast(%var_1064, dtype="float32") /* ty=Tensor[(576), float32] */;
  %383 = reshape(%381, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %384 = reshape(%382, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %385 = @func_195(%383, %384) /* ty=(Tensor[(16, 12, 3), int32],) */;
  %386 = cast(meta[relay.Constant][20] /* ty=Tensor[(840), bool] */, dtype="bool") /* ty=Tensor[(840), bool] */;
  %387 = cast(meta[relay.Constant][20] /* ty=Tensor[(840), bool] */, dtype="bool") /* ty=Tensor[(840), bool] */;
  %388 = cast(%var_1069, dtype="bool") /* ty=Tensor[(720), bool] */;
  %389 = reshape(%386, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), bool] */;
  %390 = reshape(%387, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), bool] */;
  %391 = reshape(%388, newshape=[2, 360]) /* ty=Tensor[(2, 360), bool] */;
  %392 = @func_909(%389, %390, %391) /* ty=(Tensor[(15, 7, 8), bool], Tensor[(15, 7, 8), bool], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(2, 360), bool], Tensor[(15, 7, 8), float64]) */;
  %393 = cast(meta[relay.Constant][21] /* ty=Tensor[(45), bool] */, dtype="bool") /* ty=Tensor[(45), bool] */;
  %394 = cast(%var_1069, dtype="bool") /* ty=Tensor[(720), bool] */;
  %395 = reshape(%393, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %396 = reshape(%394, newshape=[720, 1]) /* ty=Tensor[(720, 1), bool] */;
  %397 = @func_351(%395, %396) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) */;
  %398 = @func_777() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) */;
  %399 = cast(meta[relay.Constant][21] /* ty=Tensor[(45), bool] */, dtype="bool") /* ty=Tensor[(45), bool] */;
  %400 = %397.3;
  %401 = cast(%400, dtype="bool") /* ty=Tensor[(720, 1), bool] */;
  %402 = reshape(%399, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %403 = reshape(%401, newshape=[720, 1]) /* ty=Tensor[(720, 1), bool] */;
  %404 = @func_351(%402, %403) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) */;
  %405 = %378.1;
  %406 = %379.0;
  %407 = %380.0;
  %408 = %385.0;
  %409 = %392.1;
  %410 = @func_849() /* ty=Tensor[(3, 5, 5), uint16] */;
  %411 = %398.0;
  %412 = %404.2;
  %413 = @func_849() /* ty=Tensor[(3, 5, 5), uint16] */;
  (%405, %406, %407, %408, %var_1064, %409, meta[relay.Constant][20] /* ty=Tensor[(840), bool] */, %var_1069, %400, meta[relay.Constant][21] /* ty=Tensor[(45), bool] */, %410, %411, %412, %413)
}

def @func_2057(%var_2052: Tensor[(7, 11, 10), float32]) -> (Tensor[(7, 11, 10), int8],) {
  %414 = @func_1849() /* ty=Tensor[(7, 11, 10), float32] */;
  %415 = cast(%var_2052, dtype="int8") /* ty=Tensor[(7, 11, 10), int8] */;
  %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%414, dtype="int8") /* ty=Tensor[(7, 11, 10), int8] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %419 = minimum(%417, %418) /* ty=Tensor[(7, 11, 10), int8] */;
  (%419,)
}

def @func_513(%var_497: Tensor[(14, 16, 12), float32], %var_502: Tensor[(576), float32]) -> (Tensor[(14, 16, 12), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32]) {
  %420 = cast(%var_497, dtype="float32") /* ty=Tensor[(14, 16, 12), float32] */;
  %421 = cast(%var_502, dtype="float32") /* ty=Tensor[(576), float32] */;
  %422 = cast(%var_502, dtype="float32") /* ty=Tensor[(576), float32] */;
  %423 = reshape(%421, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %424 = reshape(%422, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %425 = @func_195(%423, %424) /* ty=(Tensor[(16, 12, 3), int32],) */;
  %426 = asin(%420) /* ty=Tensor[(14, 16, 12), float32] */;
  %427 = %425.0;
  (%426, %427, %var_502)
}

def @func_3657() -> (Tensor[(72, 8), float32], Tensor[(7, 11, 10), float32], Tensor[(75), float32]) {
  %428 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
  %429 = @func_3178() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %430 = %428.2;
  %431 = cast(%430, dtype="float32") /* ty=Tensor[(72, 8), float32] */;
  %432 = reshape(%431, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %433 = @func_3613(%432) /* ty=(Tensor[(576), float32], Tensor[(4, 3, 16), bool], Tensor[(75), float32]) */;
  %434 = %429.0;
  %435 = %433.2;
  (%430, %434, %435)
}

def @func_286() -> (Tensor[(7, 11, 10), float32],) {
  %436 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 11, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 11, 10), float32] */;
  %437 = sqrt(%436) /* ty=Tensor[(7, 11, 10), float32] */;
  (%437,)
}

def @func_2357(%var_2343: Tensor[(840), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), uint64], Tensor[(576), int32], Tensor[(4, 7, 16), uint32], Tensor[(448), uint32], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool], Tensor[(7, 11, 10), float32]) {
  %438 = @func_663() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %439 = cast(meta[relay.Constant][23] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
  %440 = reshape(%439, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), int32] */;
  %441 = cast(meta[relay.Constant][24] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %442 = reshape(%441, newshape=[4, 7, 16]) /* ty=Tensor[(4, 7, 16), uint32] */;
  %443 = @func_1374(%442) /* ty=(Tensor[(4, 7, 16), uint32],) */;
  %444 = cast(%var_2343, dtype="bool") /* ty=Tensor[(840), bool] */;
  %445 = cast(%var_2343, dtype="bool") /* ty=Tensor[(840), bool] */;
  %446 = cast(meta[relay.Constant][25] /* ty=Tensor[(720), bool] */, dtype="bool") /* ty=Tensor[(720), bool] */;
  %447 = reshape(%444, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), bool] */;
  %448 = reshape(%445, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), bool] */;
  %449 = reshape(%446, newshape=[2, 360]) /* ty=Tensor[(2, 360), bool] */;
  %450 = @func_909(%447, %448, %449) /* ty=(Tensor[(15, 7, 8), bool], Tensor[(15, 7, 8), bool], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(2, 360), bool], Tensor[(15, 7, 8), float64]) */;
  %451 = %438.0;
  %452 = @func_2299(%440) /* ty=Tensor[(16, 12, 3), uint64] */;
  %453 = %443.0;
  %454 = %450.0;
  %455 = @func_1849() /* ty=Tensor[(7, 11, 10), float32] */;
  (%451, %452, meta[relay.Constant][23] /* ty=Tensor[(576), int32] */, %453, meta[relay.Constant][24] /* ty=Tensor[(448), uint32] */, %454, %var_2343, meta[relay.Constant][25] /* ty=Tensor[(720), bool] */, %455)
}

def @func_1800() -> Tensor[(3, 5, 5), float64] {
  %456 = @func_1221() /* ty=(Tensor[(3, 5, 5), float64],) */;
  %456.0
}

def @func_2045() -> Tensor[(7, 11, 10), float32] {
  %457 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
  %457.0
}

def @func_1221() -> (Tensor[(3, 5, 5), float64],) {
  %458 = @func_777() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) */;
  %459 = %458.1;
  %460 = cast(%459, dtype="float64") /* ty=Tensor[(3, 5, 5), float64] */;
  %461 = asinh(%460) /* ty=Tensor[(3, 5, 5), float64] */;
  (%461,)
}

def @func_3759(%var_3737: Tensor[(1, 45), bool]) -> (Tensor[(75), float32], Tensor[(15, 16, 3), bool], Tensor[(1, 45), bool], Tensor[(4, 180), bool]) {
  %462 = @func_3657() /* ty=(Tensor[(72, 8), float32], Tensor[(7, 11, 10), float32], Tensor[(75), float32]) */;
  %463 = cast(%var_3737, dtype="bool") /* ty=Tensor[(1, 45), bool] */;
  %464 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 180), bool] */, dtype="bool") /* ty=Tensor[(4, 180), bool] */;
  %465 = reshape(%463, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), bool] */;
  %466 = reshape(%464, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), bool] */;
  %467 = %462.2;
  %468 = @func_90(%465, %466) /* ty=Tensor[(15, 16, 3), bool] */;
  (%467, %468, %var_3737, meta[relay.Constant][26] /* ty=Tensor[(4, 180), bool] */)
}

def @func_2387() -> (Tensor[(7, 11, 10), float32], Tensor[(3, 5, 5), float64]) {
  %469 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
  %470 = %469.0;
  %471 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 11, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 11, 10), float32] */;
  %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%470, dtype="float32") /* ty=Tensor[(7, 11, 10), float32] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %475 = divide(%473, %474) /* ty=Tensor[(7, 11, 10), float32] */;
  %476 = @func_1800() /* ty=Tensor[(3, 5, 5), float64] */;
  (%475, %476)
}

def @func_2731() -> (Tensor[(4, 3, 16), bool], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool]) {
  %477 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 3, 16), int64] */, dtype="bool") /* ty=Tensor[(4, 3, 16), bool] */;
  %478 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(4, 3, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 3, 16), int64] */, dtype="bool") /* ty=Tensor[(4, 3, 16), bool] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %481 = cast(meta[relay.Constant][30] /* ty=Tensor[(840), bool] */, dtype="bool") /* ty=Tensor[(840), bool] */;
  %482 = cast(meta[relay.Constant][30] /* ty=Tensor[(840), bool] */, dtype="bool") /* ty=Tensor[(840), bool] */;
  %483 = cast(meta[relay.Constant][31] /* ty=Tensor[(720), bool] */, dtype="bool") /* ty=Tensor[(720), bool] */;
  %484 = reshape(%481, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), bool] */;
  %485 = reshape(%482, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), bool] */;
  %486 = reshape(%483, newshape=[2, 360]) /* ty=Tensor[(2, 360), bool] */;
  %487 = @func_909(%484, %485, %486) /* ty=(Tensor[(15, 7, 8), bool], Tensor[(15, 7, 8), bool], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(2, 360), bool], Tensor[(15, 7, 8), float64]) */;
  %488 = greater(%479, %480) /* ty=Tensor[(4, 3, 16), bool] */;
  %489 = %487.0;
  (%488, %489, meta[relay.Constant][30] /* ty=Tensor[(840), bool] */, meta[relay.Constant][31] /* ty=Tensor[(720), bool] */)
}

def @func_4051() -> (Tensor[(7, 11, 10), float32],) {
  %490 = @func_1849() /* ty=Tensor[(7, 11, 10), float32] */;
  (%490,)
}

def @func_4580() -> (Tensor[(7, 11, 10), float64],) {
  %491 = @func_3657() /* ty=(Tensor[(72, 8), float32], Tensor[(7, 11, 10), float32], Tensor[(75), float32]) */;
  %492 = %491.1;
  %493 = cast(%492, dtype="float64") /* ty=Tensor[(7, 11, 10), float64] */;
  %494 = acosh(%493) /* ty=Tensor[(7, 11, 10), float64] */;
  (%494,)
}

def @func_4077() -> (Tensor[(15, 7, 8), bool],) {
  %495 = @func_3156() /* ty=Tensor[(15, 7, 8), bool] */;
  (%495,)
}

def @func_3844(%var_3793: Tensor[(720), bool], %var_3807: Tensor[(4, 3, 16), float64], %var_3816: Tensor[(4, 3, 16), float64]) -> (Tensor[(720), bool], Tensor[(720), bool], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), int64]) {
  %496 = cast(%var_3793, dtype="bool") /* ty=Tensor[(720), bool] */;
  %497 = reshape(%496, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %498 = @func_1263(%497) /* ty=(Tensor[(3, 5, 5), uint32], Tensor[(45), bool], Tensor[(45), bool], Tensor[(720), bool]) */;
  %499 = @func_3437() /* ty=(Tensor[(4, 3, 16), bool],) */;
  %500 = %499.0;
  %501 = cast(%500, dtype="float64") /* ty=Tensor[(4, 3, 16), float64] */;
  %502 = acos(%501) /* ty=Tensor[(4, 3, 16), float64] */;
  %503 = cast(%var_3807, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %504 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%502, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %507 = cast(%var_3816, dtype="int64") /* ty=Tensor[(4, 3, 16), int64] */;
  %508 = shape_of(%var_3807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%var_3807, dtype="int64") /* ty=Tensor[(4, 3, 16), int64] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %511 = %498.3;
  %512 = floor_divide(%505, %506) /* ty=Tensor[(4, 3, 16), float32] */;
  %513 = bitwise_xor(%509, %510) /* ty=Tensor[(4, 3, 16), int64] */;
  (%511, %var_3793, %512, %513)
}

def @func_1374(%var_1367: Tensor[(4, 7, 16), uint32]) -> (Tensor[(4, 7, 16), uint32],) {
  %514 = cast(%var_1367, dtype="uint32") /* ty=Tensor[(4, 7, 16), uint32] */;
  %515 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(4, 7, 16), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 7, 16), uint32] */, dtype="uint32") /* ty=Tensor[(4, 7, 16), uint32] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %518 = right_shift(%516, %517) /* ty=Tensor[(4, 7, 16), uint32] */;
  (%518,)
}

def @func_443(%var_403: Tensor[(1, 5, 14), float32], %var_416: Tensor[(45), bool], %var_417: Tensor[(720), bool]) -> (Tensor[(14, 5, 14), int16], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(720), bool], Tensor[(14, 5, 14), float64], Tensor[(15, 16, 3), bool]) {
  %519 = cast(%var_403, dtype="float32") /* ty=Tensor[(1, 5, 14), float32] */;
  %520 = sigmoid(%519) /* ty=Tensor[(1, 5, 14), float32] */;
  %521 = cast(%520, dtype="int16") /* ty=Tensor[(1, 5, 14), int16] */;
  %522 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 5, 14), float32] */, dtype="int16") /* ty=Tensor[(14, 5, 14), int16] */;
  %523 = cast(%var_416, dtype="bool") /* ty=Tensor[(45), bool] */;
  %524 = cast(%var_417, dtype="bool") /* ty=Tensor[(720), bool] */;
  %525 = reshape(%523, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %526 = reshape(%524, newshape=[720, 1]) /* ty=Tensor[(720, 1), bool] */;
  %527 = @func_351(%525, %526) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) */;
  %528 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 5, 14), float32] */, dtype="float64") /* ty=Tensor[(14, 5, 14), float64] */;
  %529 = cast(%var_416, dtype="bool") /* ty=Tensor[(45), bool] */;
  %530 = cast(%var_417, dtype="bool") /* ty=Tensor[(720), bool] */;
  %531 = reshape(%529, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), bool] */;
  %532 = reshape(%530, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), bool] */;
  %533 = bitwise_or(%521, %522) /* ty=Tensor[(14, 5, 14), int16] */;
  %534 = %527.3;
  %535 = sigmoid(%528) /* ty=Tensor[(14, 5, 14), float64] */;
  %536 = @func_90(%531, %532) /* ty=Tensor[(15, 16, 3), bool] */;
  (%533, %534, %var_416, %var_417, %535, %536)
}

def @func_2810(%var_2785: Tensor[(3, 5, 5), uint16], %var_2794: Tensor[(45, 1), bool], %var_2795: Tensor[(1, 720), bool], %var_2800: Tensor[(45, 1), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(3, 5, 5), bool], Tensor[(15, 16, 3), bool], Tensor[(1, 720), bool], Tensor[(45, ?), bool]) {
  %537 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
  %538 = @func_849() /* ty=Tensor[(3, 5, 5), uint16] */;
  %539 = cast(%var_2785, dtype="bool") /* ty=Tensor[(3, 5, 5), bool] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="bool") /* ty=Tensor[(3, 5, 5), bool] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %543 = cast(%var_2794, dtype="bool") /* ty=Tensor[(45, 1), bool] */;
  %544 = cast(%var_2795, dtype="bool") /* ty=Tensor[(1, 720), bool] */;
  %545 = reshape(%543, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %546 = reshape(%544, newshape=[720, 1]) /* ty=Tensor[(720, 1), bool] */;
  %547 = @func_351(%545, %546) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) */;
  %548 = cast(%var_2800, dtype="bool") /* ty=Tensor[(45, 1), bool] */;
  %549 = shape_of(%var_2794, dtype="int32") /* ty=Tensor[(2), int32] */;
  %550 = cast(%var_2794, dtype="bool") /* ty=Tensor[(45, 1), bool] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %552 = %537.0;
  %553 = not_equal(%541, %542) /* ty=Tensor[(3, 5, 5), bool] */;
  %554 = %547.1;
  %555 = logical_and(%550, %551) /* ty=Tensor[(45, ?), bool] */;
  (%552, %553, %554, %var_2795, %555)
}

def @func_4018(%var_4006: Tensor[(2, 6, 15), uint32], %var_4007: Tensor[(2, 6, 15), uint32]) -> (Tensor[(2, 6, 15), float32],) {
  %556 = cast(%var_4007, dtype="bool") /* ty=Tensor[(2, 6, 15), bool] */;
  %557 = shape_of(%var_4006, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%var_4006, dtype="bool") /* ty=Tensor[(2, 6, 15), bool] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %560 = less_equal(%558, %559) /* ty=Tensor[(2, 6, 15), bool] */;
  %561 = cast(%560, dtype="float32") /* ty=Tensor[(2, 6, 15), float32] */;
  %562 = log(%561) /* ty=Tensor[(2, 6, 15), float32] */;
  (%562,)
}

def @func_2685(%var_2608: Tensor[(3, 5, 5), float32], %var_2628: Tensor[(576), float32], %var_2629: Tensor[(180, 4), bool]) -> (Tensor[(3, 5, 5), float32], Tensor[(576), float32], Tensor[(180, 4), bool], Tensor[(3, 5, 5), bool], Tensor[(3, 5, 5), float64], Tensor[(45), bool]) {
  %563 = cast(%var_2628, dtype="float32") /* ty=Tensor[(576), float32] */;
  %564 = cast(%var_2629, dtype="bool") /* ty=Tensor[(180, 4), bool] */;
  %565 = reshape(%563, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %566 = reshape(%564, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %567 = @func_1120(%565, %566) /* ty=(Tensor[(3, 5, 5), float32], Tensor[(3, 5, 5), uint16], Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), uint16], Tensor[(45), bool], Tensor[(3, 5, 5), uint16]) */;
  %568 = @func_1221() /* ty=(Tensor[(3, 5, 5), float64],) */;
  %569 = %568.0;
  %570 = cast(%569, dtype="float32") /* ty=Tensor[(3, 5, 5), float32] */;
  %571 = rsqrt(%570) /* ty=Tensor[(3, 5, 5), float32] */;
  %572 = cast(%var_2608, dtype="uint8") /* ty=Tensor[(3, 5, 5), uint8] */;
  %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%571, dtype="uint8") /* ty=Tensor[(3, 5, 5), uint8] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %576 = minimum(%574, %575) /* ty=Tensor[(3, 5, 5), uint8] */;
  %577 = cast(%576, dtype="bool") /* ty=Tensor[(3, 5, 5), bool] */;
  %578 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%571, dtype="bool") /* ty=Tensor[(3, 5, 5), bool] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %581 = cast(%var_2629, dtype="bool") /* ty=Tensor[(180, 4), bool] */;
  %582 = reshape(%581, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %583 = @func_1263(%582) /* ty=(Tensor[(3, 5, 5), uint32], Tensor[(45), bool], Tensor[(45), bool], Tensor[(720), bool]) */;
  %584 = %567.0;
  %585 = greater(%579, %580) /* ty=Tensor[(3, 5, 5), bool] */;
  %586 = @func_1800() /* ty=Tensor[(3, 5, 5), float64] */;
  %587 = %583.1;
  (%584, %var_2628, %var_2629, %585, %586, %587)
}

def @func_3141() -> Tensor[(3, 5, 5), float64] {
  %588 = @func_1221() /* ty=(Tensor[(3, 5, 5), float64],) */;
  %589 = %588.0;
  %590 = cast(%589, dtype="float64") /* ty=Tensor[(3, 5, 5), float64] */;
  sin(%590) /* ty=Tensor[(3, 5, 5), float64] */
}

def @func_3244(%var_3202: Tensor[(14, 2, 2), uint64], %var_3203: Tensor[(14, 2, 2), uint64], %var_3213: Tensor[(462), float32], %var_3216: Tensor[(14, 2, 2), uint64]) -> (Tensor[(14, 2, 2), bool], Tensor[(7, 11, 10), float32], Tensor[(3, 5, 5), uint16], Tensor[(462), float32], Tensor[(14, 2, 2), int16], Tensor[(14, 2, 2), uint64]) {
  %591 = cast(%var_3203, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
  %592 = shape_of(%var_3202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%var_3202, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %595 = @func_2907() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %596 = cast(%var_3213, dtype="float32") /* ty=Tensor[(462), float32] */;
  %597 = reshape(%596, newshape=[7, 6, 11]) /* ty=Tensor[(7, 6, 11), float32] */;
  %598 = @func_1564(%597) /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(7, 6, 11), float32]) */;
  %599 = cast(%var_3216, dtype="int16") /* ty=Tensor[(14, 2, 2), int16] */;
  %600 = shape_of(%var_3202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%var_3202, dtype="int16") /* ty=Tensor[(14, 2, 2), int16] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %603 = cast(%var_3216, dtype="uint64") /* ty=Tensor[(14, 2, 2), uint64] */;
  %604 = shape_of(%var_3202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(%var_3202, dtype="uint64") /* ty=Tensor[(14, 2, 2), uint64] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %607 = greater_equal(%593, %594) /* ty=Tensor[(14, 2, 2), bool] */;
  %608 = %595.0;
  %609 = %598.0;
  %610 = left_shift(%601, %602) /* ty=Tensor[(14, 2, 2), int16] */;
  %611 = multiply(%605, %606) /* ty=Tensor[(14, 2, 2), uint64] */;
  (%607, %608, %609, %var_3213, %610, %611)
}

def @func_3975(%var_3965: Tensor[(15, 11, 10), float64]) -> (Tensor[(15, 11, 10), float64], Tensor[(15, 11, 10), float32]) {
  %612 = cast(%var_3965, dtype="float64") /* ty=Tensor[(15, 11, 10), float64] */;
  %613 = cast(%var_3965, dtype="float32") /* ty=Tensor[(15, 11, 10), float32] */;
  %614 = cosh(%612) /* ty=Tensor[(15, 11, 10), float64] */;
  %615 = sin(%613) /* ty=Tensor[(15, 11, 10), float32] */;
  (%614, %615)
}

def @func_3017() -> (Tensor[(7, 11, 10), bool],) {
  %616 = @func_2183() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %617 = %616.0;
  %618 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 11, 10), float32] */, dtype="bool") /* ty=Tensor[(7, 11, 10), bool] */;
  %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%617, dtype="bool") /* ty=Tensor[(7, 11, 10), bool] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %622 = logical_or(%620, %621) /* ty=Tensor[(7, 11, 10), bool] */;
  (%622,)
}

def @func_90(%var_80: Tensor[(15, 1, 3), bool], %var_81: Tensor[(15, 16, 3), bool]) -> Tensor[(15, 16, 3), bool] {
  %623 = cast(%var_80, dtype="bool") /* ty=Tensor[(15, 1, 3), bool] */;
  %624 = cast(%var_81, dtype="bool") /* ty=Tensor[(15, 16, 3), bool] */;
  logical_or(%623, %624) /* ty=Tensor[(15, 16, 3), bool] */
}

def @func_2257(%var_2246: Tensor[(2, 5, 12), float32]) -> Tensor[(2, 5, 12), float32] {
  %625 = cast(%var_2246, dtype="float32") /* ty=Tensor[(2, 5, 12), float32] */;
  exp(%625) /* ty=Tensor[(2, 5, 12), float32] */
}

def @func_2926() -> Tensor[(16, 12, 3), int32] {
  @func_1539() /* ty=Tensor[(16, 12, 3), int32] */
}

def @func_3113(%var_3095: Tensor[(576), float32], %var_3104: Tensor[(45), bool], %var_3105: Tensor[(720), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32], Tensor[(45), bool], Tensor[(45), bool], Tensor[(720), bool]) {
  %626 = @func_2907() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %627 = cast(%var_3095, dtype="float32") /* ty=Tensor[(576), float32] */;
  %628 = cast(%var_3095, dtype="float32") /* ty=Tensor[(576), float32] */;
  %629 = reshape(%627, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %630 = reshape(%628, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %631 = @func_195(%629, %630) /* ty=(Tensor[(16, 12, 3), int32],) */;
  %632 = cast(%var_3104, dtype="bool") /* ty=Tensor[(45), bool] */;
  %633 = cast(%var_3105, dtype="bool") /* ty=Tensor[(720), bool] */;
  %634 = reshape(%632, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %635 = reshape(%633, newshape=[720, 1]) /* ty=Tensor[(720, 1), bool] */;
  %636 = @func_351(%634, %635) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) */;
  %637 = %626.0;
  %638 = %631.0;
  %639 = %636.2;
  (%637, %638, %var_3095, %639, %var_3104, %var_3105)
}

def @func_3613(%var_3589: Tensor[(576), float32]) -> (Tensor[(576), float32], Tensor[(4, 3, 16), bool], Tensor[(75), float32]) {
  %640 = @func_3437() /* ty=(Tensor[(4, 3, 16), bool],) */;
  %641 = %640.0;
  %642 = cast(%641, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %643 = rsqrt(%642) /* ty=Tensor[(4, 3, 16), float32] */;
  %644 = cast(%641, dtype="bool") /* ty=Tensor[(4, 3, 16), bool] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="bool") /* ty=Tensor[(4, 3, 16), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %648 = cast(meta[relay.Constant][35] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %649 = cast(%var_3589, dtype="float32") /* ty=Tensor[(576), float32] */;
  %650 = reshape(%648, newshape=[3, 5, 5]) /* ty=Tensor[(3, 5, 5), float32] */;
  %651 = reshape(%649, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %652 = @func_2168(%650, %651) /* ty=(Tensor[(3, 5, 5), float64], Tensor[(3, 5, 5), uint16], Tensor[(720), bool], Tensor[(576), float32], Tensor[(840), bool], Tensor[(3, 5, 5), float64]) */;
  %653 = %652.0;
  %654 = cast(%653, dtype="float32") /* ty=Tensor[(3, 5, 5), float32] */;
  %655 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(75), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %656 = cast(meta[relay.Constant][35] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?), float32] */;
  %658 = logical_or(%646, %647) /* ty=Tensor[(4, 3, 16), bool] */;
  %659 = mod(%656, %657) /* ty=Tensor[(75), float32] */;
  (%var_3589, %658, %659)
}

def @func_3437() -> (Tensor[(4, 3, 16), bool],) {
  %660 = @func_2731() /* ty=(Tensor[(4, 3, 16), bool], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool]) */;
  %661 = %660.0;
  (%661,)
}

def @func_1759() -> Tensor[(16, 12, 3), int32] {
  @func_1539() /* ty=Tensor[(16, 12, 3), int32] */
}

def @func_909(%var_855: Tensor[(15, 7, 8), bool], %var_869: Tensor[(15, 7, 8), bool], %var_892: Tensor[(2, 360), bool]) -> (Tensor[(15, 7, 8), bool], Tensor[(15, 7, 8), bool], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(2, 360), bool], Tensor[(15, 7, 8), float64]) {
  %662 = cast(meta[relay.Constant][36] /* ty=Tensor[(15, 1, 8), bool] */, dtype="bool") /* ty=Tensor[(15, 1, 8), bool] */;
  %663 = cast(%var_855, dtype="bool") /* ty=Tensor[(15, 7, 8), bool] */;
  %664 = logical_or(%662, %663) /* ty=Tensor[(15, 7, 8), bool] */;
  %665 = cast(%var_869, dtype="bool") /* ty=Tensor[(15, 7, 8), bool] */;
  %666 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%664, dtype="bool") /* ty=Tensor[(15, 7, 8), bool] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %669 = cast(%664, dtype="bool") /* ty=Tensor[(15, 7, 8), bool] */;
  %670 = cast(meta[relay.Constant][36] /* ty=Tensor[(15, 1, 8), bool] */, dtype="bool") /* ty=Tensor[(15, 1, 8), bool] */;
  %671 = cast(meta[relay.Constant][37] /* ty=Tensor[(45), bool] */, dtype="bool") /* ty=Tensor[(45), bool] */;
  %672 = cast(%var_892, dtype="bool") /* ty=Tensor[(2, 360), bool] */;
  %673 = reshape(%671, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %674 = reshape(%672, newshape=[720, 1]) /* ty=Tensor[(720, 1), bool] */;
  %675 = @func_351(%673, %674) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) */;
  %676 = cast(%664, dtype="float32") /* ty=Tensor[(15, 7, 8), float32] */;
  %677 = acosh(%676) /* ty=Tensor[(15, 7, 8), float32] */;
  %678 = cast(%677, dtype="float64") /* ty=Tensor[(15, 7, 8), float64] */;
  %679 = greater(%667, %668) /* ty=Tensor[(15, 7, 8), bool] */;
  %680 = logical_and(%669, %670) /* ty=Tensor[(15, 7, 8), bool] */;
  %681 = %675.1;
  %682 = log(%678) /* ty=Tensor[(15, 7, 8), float64] */;
  (%679, %680, %681, meta[relay.Constant][37] /* ty=Tensor[(45), bool] */, %var_892, %682)
}

def @func_4443() -> (Tensor[(16, 12, 3), int32],) {
  %683 = @func_1539() /* ty=Tensor[(16, 12, 3), int32] */;
  (%683,)
}

def @func_4462() -> (Tensor[(7, 11, 10), float32], Tensor[(576), float32], Tensor[(576), float32]) {
  %684 = cast(meta[relay.Constant][38] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %685 = reshape(%684, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %686 = @func_3613(%685) /* ty=(Tensor[(576), float32], Tensor[(4, 3, 16), bool], Tensor[(75), float32]) */;
  %687 = @func_3635() /* ty=Tensor[(7, 11, 10), float32] */;
  %688 = %686.0;
  (%687, %688, meta[relay.Constant][38] /* ty=Tensor[(576), float32] */)
}

def @func_2880() -> (Tensor[(7, 11, 10), float32], Tensor[(7, 11, 10), float32], Tensor[(4, 3, 16), bool], Tensor[(7, 11, 10), bool], Tensor[(576), float32]) {
  %689 = @func_2183() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %690 = @func_2731() /* ty=(Tensor[(4, 3, 16), bool], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool]) */;
  %691 = cast(meta[relay.Constant][39] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %692 = reshape(%691, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %693 = @func_1724(%692) /* ty=(Tensor[(7, 11, 10), bool], Tensor[(720, 1), bool], Tensor[(576), float32], Tensor[(720), bool]) */;
  %694 = %689.0;
  %695 = @func_2045() /* ty=Tensor[(7, 11, 10), float32] */;
  %696 = %690.0;
  %697 = %693.0;
  (%694, %695, %696, %697, meta[relay.Constant][39] /* ty=Tensor[(576), float32] */)
}

def @func_351(%var_348: Tensor[(45), bool], %var_349: Tensor[(720, 1), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) {
  %698 = @func_286() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %699 = cast(%var_348, dtype="bool") /* ty=Tensor[(45), bool] */;
  %700 = cast(%var_349, dtype="bool") /* ty=Tensor[(720, 1), bool] */;
  %701 = reshape(%699, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), bool] */;
  %702 = reshape(%700, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), bool] */;
  %703 = %698.0;
  %704 = @func_90(%701, %702) /* ty=Tensor[(15, 16, 3), bool] */;
  (%703, %704, %var_348, %var_349)
}

def @func_2168(%var_2132: Tensor[(3, 5, 5), float32], %var_2139: Tensor[(576), float32]) -> (Tensor[(3, 5, 5), float64], Tensor[(3, 5, 5), uint16], Tensor[(720), bool], Tensor[(576), float32], Tensor[(840), bool], Tensor[(3, 5, 5), float64]) {
  %705 = @func_849() /* ty=Tensor[(3, 5, 5), uint16] */;
  %706 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 5, 5), uint16] */, dtype="int16") /* ty=Tensor[(3, 5, 5), int16] */;
  %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%705, dtype="int16") /* ty=Tensor[(3, 5, 5), int16] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %710 = multiply(%708, %709) /* ty=Tensor[(3, 5, 5), int16] */;
  %711 = cast(%710, dtype="float64") /* ty=Tensor[(3, 5, 5), float64] */;
  %712 = cast(%710, dtype="float32") /* ty=Tensor[(3, 5, 5), float32] */;
  %713 = sinh(%712) /* ty=Tensor[(3, 5, 5), float32] */;
  %714 = cast(%var_2132, dtype="uint16") /* ty=Tensor[(3, 5, 5), uint16] */;
  %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%713, dtype="uint16") /* ty=Tensor[(3, 5, 5), uint16] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %718 = cast(%var_2139, dtype="float32") /* ty=Tensor[(576), float32] */;
  %719 = reshape(%718, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %720 = @func_1724(%719) /* ty=(Tensor[(7, 11, 10), bool], Tensor[(720, 1), bool], Tensor[(576), float32], Tensor[(720), bool]) */;
  %721 = cast(%var_2139, dtype="float32") /* ty=Tensor[(576), float32] */;
  %722 = %720.3;
  %723 = cast(%722, dtype="bool") /* ty=Tensor[(720), bool] */;
  %724 = reshape(%721, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %725 = reshape(%723, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %726 = @func_1120(%724, %725) /* ty=(Tensor[(3, 5, 5), float32], Tensor[(3, 5, 5), uint16], Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), uint16], Tensor[(45), bool], Tensor[(3, 5, 5), uint16]) */;
  %727 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 5, 5), uint16] */, dtype="float64") /* ty=Tensor[(3, 5, 5), float64] */;
  %728 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%713, dtype="float64") /* ty=Tensor[(3, 5, 5), float64] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %731 = acos(%711) /* ty=Tensor[(3, 5, 5), float64] */;
  %732 = bitwise_or(%716, %717) /* ty=Tensor[(3, 5, 5), uint16] */;
  %733 = %726.6;
  %734 = power(%729, %730) /* ty=Tensor[(3, 5, 5), float64] */;
  (%731, %732, %722, %var_2139, %733, %734)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4383(%var_4381: Tensor[(7, 11, 10), float32], %var_4382: Tensor[(576), float32]) -> (Tensor[(7, 11, 10), int32], Tensor[(16, 12, 3), int32], Tensor[(576), float32]) {
  %12 = fn (%var_4344: Tensor[(7, 11, 10), float32], %var_4363: Tensor[(576), float32]) -> (Tensor[(7, 11, 10), int32], Tensor[(16, 12, 3), int32], Tensor[(576), float32]) {
    %0 = @func_3635() /* ty=Tensor[(7, 11, 10), float32] */;
    %1 = cast(%var_4344, dtype="int32") /* ty=Tensor[(7, 11, 10), int32] */;
    %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(3), int32] */;
    %3 = cast(%0, dtype="int32") /* ty=Tensor[(7, 11, 10), int32] */;
    %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %5 = cast(%var_4363, dtype="float32") /* ty=Tensor[(576), float32] */;
    %6 = cast(%var_4363, dtype="float32") /* ty=Tensor[(576), float32] */;
    %7 = reshape(%5, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
    %8 = reshape(%6, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
    %9 = @func_195(%7, %8) /* ty=(Tensor[(16, 12, 3), int32],) */;
    %10 = logical_xor(%3, %4) /* ty=Tensor[(7, 11, 10), int32] */;
    %11 = %9.0;
    (%10, %11, %var_4363)
  };
  %12(%var_4381, %var_4382) /* ty=(Tensor[(7, 11, 10), int32], Tensor[(16, 12, 3), int32], Tensor[(576), float32]) */
}

def @func_3141() -> Tensor[(3, 5, 5), float64] {
  %13 = @func_1221() /* ty=(Tensor[(3, 5, 5), float64],) */;
  %14 = %13.0;
  %15 = cast(%14, dtype="float64") /* ty=Tensor[(3, 5, 5), float64] */;
  sin(%15) /* ty=Tensor[(3, 5, 5), float64] */
}

def @func_4079() -> (Tensor[(15, 7, 8), bool],) {
  @func_4077() /* ty=(Tensor[(15, 7, 8), bool],) */
}

def @func_1507() -> (Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) {
  %24 = fn () -> (Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) {
    %16 = @func_286() /* ty=(Tensor[(7, 11, 10), float32],) */;
    %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(72, 8), float32] */, dtype="float32") /* ty=Tensor[(72, 8), float32] */;
    %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(72, 8), float32] */, dtype="float32") /* ty=Tensor[(72, 8), float32] */;
    %19 = reshape(%17, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
    %20 = reshape(%18, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
    %21 = @func_195(%19, %20) /* ty=(Tensor[(16, 12, 3), int32],) */;
    %22 = %16.0;
    %23 = %21.0;
    (%22, %23, meta[relay.Constant][0] /* ty=Tensor[(72, 8), float32] */)
  };
  %24() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */
}

def @func_2476() -> (Tensor[(3, 5, 5), uint16], Tensor[(7, 11, 10), bool]) {
  @func_2474() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(7, 11, 10), bool]) */
}

def @func_3759(%var_3737: Tensor[(1, 45), bool]) -> (Tensor[(75), float32], Tensor[(15, 16, 3), bool], Tensor[(1, 45), bool], Tensor[(4, 180), bool]) {
  %25 = @func_3657() /* ty=(Tensor[(72, 8), float32], Tensor[(7, 11, 10), float32], Tensor[(75), float32]) */;
  %26 = cast(%var_3737, dtype="bool") /* ty=Tensor[(1, 45), bool] */;
  %27 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 180), bool] */, dtype="bool") /* ty=Tensor[(4, 180), bool] */;
  %28 = reshape(%26, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), bool] */;
  %29 = reshape(%27, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), bool] */;
  %30 = %25.2;
  %31 = @func_90(%28, %29) /* ty=Tensor[(15, 16, 3), bool] */;
  (%30, %31, %var_3737, meta[relay.Constant][1] /* ty=Tensor[(4, 180), bool] */)
}

def @func_3943() -> (Tensor[(4, 3, 16), float64],) {
  @func_3941() /* ty=(Tensor[(4, 3, 16), float64],) */
}

def @func_4895() -> (Tensor[(7, 11, 10), bool],) {
  @func_4893() /* ty=(Tensor[(7, 11, 10), bool],) */
}

def @func_4518(%var_4516: Tensor[(576), float32], %var_4517: Tensor[(770), float32]) -> (Tensor[(75), float32], Tensor[(14, 16, 12), float32], Tensor[(48, 56), float32], Tensor[(576), float32], Tensor[(720), bool], Tensor[(770), float32], Tensor[(45), bool], Tensor[(720), bool]) {
  %48 = fn (%var_4495: Tensor[(576), float32], %var_4511: Tensor[(770), float32]) -> (Tensor[(75), float32], Tensor[(14, 16, 12), float32], Tensor[(48, 56), float32], Tensor[(576), float32], Tensor[(720), bool], Tensor[(770), float32], Tensor[(45), bool], Tensor[(720), bool]) {
    %32 = @func_3657() /* ty=(Tensor[(72, 8), float32], Tensor[(7, 11, 10), float32], Tensor[(75), float32]) */;
    %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(48, 56), float32] */, dtype="float32") /* ty=Tensor[(48, 56), float32] */;
    %34 = cast(%var_4495, dtype="float32") /* ty=Tensor[(576), float32] */;
    %35 = reshape(%33, newshape=[14, 16, 12]) /* ty=Tensor[(14, 16, 12), float32] */;
    %36 = reshape(%34, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %37 = @func_513(%35, %36) /* ty=(Tensor[(14, 16, 12), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32]) */;
    %38 = cast(%var_4511, dtype="float32") /* ty=Tensor[(770), float32] */;
    %39 = cast(meta[relay.Constant][3] /* ty=Tensor[(45), bool] */, dtype="bool") /* ty=Tensor[(45), bool] */;
    %40 = cast(meta[relay.Constant][4] /* ty=Tensor[(720), bool] */, dtype="bool") /* ty=Tensor[(720), bool] */;
    %41 = reshape(%38, newshape=[770]) /* ty=Tensor[(770), float32] */;
    %42 = reshape(%39, newshape=[45]) /* ty=Tensor[(45), bool] */;
    %43 = reshape(%40, newshape=[720]) /* ty=Tensor[(720), bool] */;
    %44 = @func_1629(%41, %42, %43) /* ty=(Tensor[(72, 8), bool], Tensor[(45), bool], Tensor[(770), float32], Tensor[(45), bool], Tensor[(720), bool]) */;
    %45 = %32.2;
    %46 = %37.0;
    %47 = %44.4;
    (%45, %46, meta[relay.Constant][2] /* ty=Tensor[(48, 56), float32] */, %var_4495, %47, %var_4511, meta[relay.Constant][3] /* ty=Tensor[(45), bool] */, meta[relay.Constant][4] /* ty=Tensor[(720), bool] */)
  };
  %48(%var_4516, %var_4517) /* ty=(Tensor[(75), float32], Tensor[(14, 16, 12), float32], Tensor[(48, 56), float32], Tensor[(576), float32], Tensor[(720), bool], Tensor[(770), float32], Tensor[(45), bool], Tensor[(720), bool]) */
}

def @func_1223() -> (Tensor[(3, 5, 5), float64],) {
  @func_1221() /* ty=(Tensor[(3, 5, 5), float64],) */
}

def @func_3637() -> Tensor[(7, 11, 10), float32] {
  @func_3635() /* ty=Tensor[(7, 11, 10), float32] */
}

def @func_4691() -> Tensor[(7, 11, 10), float32] {
  @func_4689() /* ty=Tensor[(7, 11, 10), float32] */
}

def @func_3157() -> Tensor[(15, 7, 8), bool] {
  %50 = fn () -> Tensor[(15, 7, 8), bool] {
    %49 = @func_2731() /* ty=(Tensor[(4, 3, 16), bool], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool]) */;
    %49.1
  };
  %50() /* ty=Tensor[(15, 7, 8), bool] */
}

def @func_4879(%var_4878: Tensor[(45), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(75), float32], Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(45), float64]) {
  %62 = fn (%var_4827: Tensor[(45), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(75), float32], Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(45), float64]) {
    %51 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
    %52 = cast(%var_4827, dtype="bool") /* ty=Tensor[(45), bool] */;
    %53 = reshape(%52, newshape=[1, 45]) /* ty=Tensor[(1, 45), bool] */;
    %54 = @func_3759(%53) /* ty=(Tensor[(75), float32], Tensor[(15, 16, 3), bool], Tensor[(1, 45), bool], Tensor[(4, 180), bool]) */;
    %55 = @func_663() /* ty=(Tensor[(7, 11, 10), float32],) */;
    %56 = cast(%var_4827, dtype="float64") /* ty=Tensor[(45), float64] */;
    %57 = %51.0;
    %58 = %54.0;
    %59 = %55.0;
    %60 = @func_1759() /* ty=Tensor[(16, 12, 3), int32] */;
    %61 = cosh(%56) /* ty=Tensor[(45), float64] */;
    (%57, %58, %59, %60, %61)
  };
  %62(%var_4878) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(75), float32], Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(45), float64]) */
}

def @func_3117(%var_3114: Tensor[(576), float32], %var_3115: Tensor[(45), bool], %var_3116: Tensor[(720), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32], Tensor[(45), bool], Tensor[(45), bool], Tensor[(720), bool]) {
  %77 = fn (%var_3095: Tensor[(576), float32], %var_3104: Tensor[(45), bool], %var_3105: Tensor[(720), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32], Tensor[(45), bool], Tensor[(45), bool], Tensor[(720), bool]) {
    %63 = @func_2907() /* ty=(Tensor[(7, 11, 10), float32],) */;
    %64 = cast(%var_3095, dtype="float32") /* ty=Tensor[(576), float32] */;
    %65 = cast(%var_3095, dtype="float32") /* ty=Tensor[(576), float32] */;
    %66 = reshape(%64, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
    %67 = reshape(%65, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
    %68 = @func_195(%66, %67) /* ty=(Tensor[(16, 12, 3), int32],) */;
    %69 = cast(%var_3104, dtype="bool") /* ty=Tensor[(45), bool] */;
    %70 = cast(%var_3105, dtype="bool") /* ty=Tensor[(720), bool] */;
    %71 = reshape(%69, newshape=[45]) /* ty=Tensor[(45), bool] */;
    %72 = reshape(%70, newshape=[720, 1]) /* ty=Tensor[(720, 1), bool] */;
    %73 = @func_351(%71, %72) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) */;
    %74 = %63.0;
    %75 = %68.0;
    %76 = %73.2;
    (%74, %75, %var_3095, %76, %var_3104, %var_3105)
  };
  %77(%var_3114, %var_3115, %var_3116) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32], Tensor[(45), bool], Tensor[(45), bool], Tensor[(720), bool]) */
}

def @func_2816(%var_2812: Tensor[(3, 5, 5), uint16], %var_2813: Tensor[(45, 1), bool], %var_2814: Tensor[(1, 720), bool], %var_2815: Tensor[(45, 1), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(3, 5, 5), bool], Tensor[(15, 16, 3), bool], Tensor[(1, 720), bool], Tensor[(45, ?), bool]) {
  @func_2810(%var_2812, %var_2813, %var_2814, %var_2815) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(3, 5, 5), bool], Tensor[(15, 16, 3), bool], Tensor[(1, 720), bool], Tensor[(45, ?), bool]) */
}

def @func_2531(%var_2529: Tensor[(45), bool], %var_2530: Tensor[(720), bool]) -> (Tensor[(3, 5, 5), float32], Tensor[(15, 16, 3), bool], Tensor[(770), float32], Tensor[(45), bool], Tensor[(720), bool], Tensor[(3, 5, 5), uint16]) {
  %92 = fn (%var_2519: Tensor[(45), bool], %var_2520: Tensor[(720), bool]) -> (Tensor[(3, 5, 5), float32], Tensor[(15, 16, 3), bool], Tensor[(770), float32], Tensor[(45), bool], Tensor[(720), bool], Tensor[(3, 5, 5), uint16]) {
    %78 = @func_777() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) */;
    %79 = %78.0;
    %80 = cast(%79, dtype="float32") /* ty=Tensor[(3, 5, 5), float32] */;
    %81 = cast(meta[relay.Constant][5] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
    %82 = cast(%var_2519, dtype="bool") /* ty=Tensor[(45), bool] */;
    %83 = cast(%var_2520, dtype="bool") /* ty=Tensor[(720), bool] */;
    %84 = reshape(%81, newshape=[7, 11, 10]) /* ty=Tensor[(7, 11, 10), float32] */;
    %85 = reshape(%82, newshape=[45]) /* ty=Tensor[(45), bool] */;
    %86 = reshape(%83, newshape=[720]) /* ty=Tensor[(720), bool] */;
    %87 = @func_620(%84, %85, %86) /* ty=(Tensor[(7, 11, 10), float64], Tensor[(7, 11, 10), float32], Tensor[(7, 11, 10), float32], Tensor[(14, 16, 12), float32], Tensor[(1344, 2), float32], Tensor[(72, 8), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720), bool]) */;
    %88 = @func_777() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) */;
    %89 = log2(%80) /* ty=Tensor[(3, 5, 5), float32] */;
    %90 = %87.6;
    %91 = %88.0;
    (%89, %90, meta[relay.Constant][5] /* ty=Tensor[(770), float32] */, %var_2519, %var_2520, %91)
  };
  %92(%var_2529, %var_2530) /* ty=(Tensor[(3, 5, 5), float32], Tensor[(15, 16, 3), bool], Tensor[(770), float32], Tensor[(45), bool], Tensor[(720), bool], Tensor[(3, 5, 5), uint16]) */
}

def @func_355(%var_353: Tensor[(45), bool], %var_354: Tensor[(720, 1), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) {
  @func_351(%var_353, %var_354) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) */
}

def @func_2387() -> (Tensor[(7, 11, 10), float32], Tensor[(3, 5, 5), float64]) {
  %93 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
  %94 = %93.0;
  %95 = cast(meta[relay.Constant][6] /* ty=Tensor[(7, 11, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 11, 10), float32] */;
  %96 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%94, dtype="float32") /* ty=Tensor[(7, 11, 10), float32] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %99 = divide(%97, %98) /* ty=Tensor[(7, 11, 10), float32] */;
  %100 = @func_1800() /* ty=Tensor[(3, 5, 5), float64] */;
  (%99, %100)
}

def @func_4893() -> (Tensor[(7, 11, 10), bool],) {
  %101 = @func_3017() /* ty=(Tensor[(7, 11, 10), bool],) */;
  %102 = %101.0;
  (%102,)
}

def @func_1263(%var_1257: Tensor[(720), bool]) -> (Tensor[(3, 5, 5), uint32], Tensor[(45), bool], Tensor[(45), bool], Tensor[(720), bool]) {
  %103 = @func_777() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) */;
  %104 = %103.0;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(3, 5, 5), float64] */;
  %106 = cosh(%105) /* ty=Tensor[(3, 5, 5), float64] */;
  %107 = cast(%106, dtype="uint32") /* ty=Tensor[(3, 5, 5), uint32] */;
  %108 = shape_of(%104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%104, dtype="uint32") /* ty=Tensor[(3, 5, 5), uint32] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %111 = cast(meta[relay.Constant][7] /* ty=Tensor[(45), bool] */, dtype="bool") /* ty=Tensor[(45), bool] */;
  %112 = cast(%var_1257, dtype="bool") /* ty=Tensor[(720), bool] */;
  %113 = reshape(%111, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %114 = reshape(%112, newshape=[720, 1]) /* ty=Tensor[(720, 1), bool] */;
  %115 = @func_351(%113, %114) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) */;
  %116 = maximum(%109, %110) /* ty=Tensor[(3, 5, 5), uint32] */;
  %117 = %115.2;
  (%116, %117, meta[relay.Constant][7] /* ty=Tensor[(45), bool] */, %var_1257)
}

def @func_2047() -> Tensor[(7, 11, 10), float32] {
  @func_2045() /* ty=Tensor[(7, 11, 10), float32] */
}

def @func_2259(%var_2258: Tensor[(2, 5, 12), float32]) -> Tensor[(2, 5, 12), float32] {
  %119 = fn (%var_2246: Tensor[(2, 5, 12), float32]) -> Tensor[(2, 5, 12), float32] {
    %118 = cast(%var_2246, dtype="float32") /* ty=Tensor[(2, 5, 12), float32] */;
    exp(%118) /* ty=Tensor[(2, 5, 12), float32] */
  };
  %119(%var_2258) /* ty=Tensor[(2, 5, 12), float32] */
}

def @func_1724(%var_1720: Tensor[(576), float32]) -> (Tensor[(7, 11, 10), bool], Tensor[(720, 1), bool], Tensor[(576), float32], Tensor[(720), bool]) {
  %120 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
  %121 = %120.0;
  %122 = cast(%121, dtype="float64") /* ty=Tensor[(7, 11, 10), float64] */;
  %123 = sigmoid(%122) /* ty=Tensor[(7, 11, 10), float64] */;
  %124 = cast(%123, dtype="bool") /* ty=Tensor[(7, 11, 10), bool] */;
  %125 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%121, dtype="bool") /* ty=Tensor[(7, 11, 10), bool] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %128 = cast(%var_1720, dtype="float32") /* ty=Tensor[(576), float32] */;
  %129 = cast(meta[relay.Constant][8] /* ty=Tensor[(720), bool] */, dtype="bool") /* ty=Tensor[(720), bool] */;
  %130 = reshape(%128, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %131 = reshape(%129, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %132 = @func_1120(%130, %131) /* ty=(Tensor[(3, 5, 5), float32], Tensor[(3, 5, 5), uint16], Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), uint16], Tensor[(45), bool], Tensor[(3, 5, 5), uint16]) */;
  %133 = less(%126, %127) /* ty=Tensor[(7, 11, 10), bool] */;
  %134 = %132.8;
  (%133, %134, %var_1720, meta[relay.Constant][8] /* ty=Tensor[(720), bool] */)
}

def @func_4018(%var_4006: Tensor[(2, 6, 15), uint32], %var_4007: Tensor[(2, 6, 15), uint32]) -> (Tensor[(2, 6, 15), float32],) {
  %135 = cast(%var_4007, dtype="bool") /* ty=Tensor[(2, 6, 15), bool] */;
  %136 = shape_of(%var_4006, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%var_4006, dtype="bool") /* ty=Tensor[(2, 6, 15), bool] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %139 = less_equal(%137, %138) /* ty=Tensor[(2, 6, 15), bool] */;
  %140 = cast(%139, dtype="float32") /* ty=Tensor[(2, 6, 15), float32] */;
  %141 = log(%140) /* ty=Tensor[(2, 6, 15), float32] */;
  (%141,)
}

def @func_3438() -> (Tensor[(4, 3, 16), bool],) {
  %144 = fn () -> (Tensor[(4, 3, 16), bool],) {
    %142 = @func_2731() /* ty=(Tensor[(4, 3, 16), bool], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool]) */;
    %143 = %142.0;
    (%143,)
  };
  %144() /* ty=(Tensor[(4, 3, 16), bool],) */
}

def @func_3658() -> (Tensor[(72, 8), float32], Tensor[(7, 11, 10), float32], Tensor[(75), float32]) {
  %153 = fn () -> (Tensor[(72, 8), float32], Tensor[(7, 11, 10), float32], Tensor[(75), float32]) {
    %145 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
    %146 = @func_3178() /* ty=(Tensor[(7, 11, 10), float32],) */;
    %147 = %145.2;
    %148 = cast(%147, dtype="float32") /* ty=Tensor[(72, 8), float32] */;
    %149 = reshape(%148, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %150 = @func_3613(%149) /* ty=(Tensor[(576), float32], Tensor[(4, 3, 16), bool], Tensor[(75), float32]) */;
    %151 = %146.0;
    %152 = %150.2;
    (%147, %151, %152)
  };
  %153() /* ty=(Tensor[(72, 8), float32], Tensor[(7, 11, 10), float32], Tensor[(75), float32]) */
}

def @func_2172(%var_2170: Tensor[(3, 5, 5), float32], %var_2171: Tensor[(576), float32]) -> (Tensor[(3, 5, 5), float64], Tensor[(3, 5, 5), uint16], Tensor[(720), bool], Tensor[(576), float32], Tensor[(840), bool], Tensor[(3, 5, 5), float64]) {
  @func_2168(%var_2170, %var_2171) /* ty=(Tensor[(3, 5, 5), float64], Tensor[(3, 5, 5), uint16], Tensor[(720), bool], Tensor[(576), float32], Tensor[(840), bool], Tensor[(3, 5, 5), float64]) */
}

def @func_3941() -> (Tensor[(4, 3, 16), float64],) {
  %154 = @func_3437() /* ty=(Tensor[(4, 3, 16), bool],) */;
  %155 = %154.0;
  %156 = cast(%155, dtype="float64") /* ty=Tensor[(4, 3, 16), float64] */;
  %157 = sinh(%156) /* ty=Tensor[(4, 3, 16), float64] */;
  %158 = cast(%155, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%157, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %162 = add(%160, %161) /* ty=Tensor[(4, 3, 16), float32] */;
  %163 = cast(%162, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %164 = acosh(%163) /* ty=Tensor[(4, 3, 16), float32] */;
  %165 = cast(%164, dtype="float64") /* ty=Tensor[(4, 3, 16), float64] */;
  %166 = log(%165) /* ty=Tensor[(4, 3, 16), float64] */;
  (%166,)
}

def @func_2360(%var_2358: Tensor[(840), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), uint64], Tensor[(576), int32], Tensor[(4, 7, 16), uint32], Tensor[(448), uint32], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool], Tensor[(7, 11, 10), float32]) {
  @func_2357(%var_2358) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), uint64], Tensor[(576), int32], Tensor[(4, 7, 16), uint32], Tensor[(448), uint32], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool], Tensor[(7, 11, 10), float32]) */
}

def @func_4176(%var_4174: Tensor[(10, 4, 14), int8], %var_4175: Tensor[(10, 4, 14), int8]) -> (Tensor[(10, 4, 14), int8],) {
  %172 = fn (%var_4163: Tensor[(10, 4, 14), int8], %var_4164: Tensor[(10, 4, 14), int8]) -> (Tensor[(10, 4, 14), int8],) {
    %167 = cast(%var_4164, dtype="int8") /* ty=Tensor[(10, 4, 14), int8] */;
    %168 = shape_of(%var_4163, dtype="int32") /* ty=Tensor[(3), int32] */;
    %169 = cast(%var_4163, dtype="int8") /* ty=Tensor[(10, 4, 14), int8] */;
    %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %171 = multiply(%169, %170) /* ty=Tensor[(10, 4, 14), int8] */;
    (%171,)
  };
  %172(%var_4174, %var_4175) /* ty=(Tensor[(10, 4, 14), int8],) */
}

def @func_3613(%var_3589: Tensor[(576), float32]) -> (Tensor[(576), float32], Tensor[(4, 3, 16), bool], Tensor[(75), float32]) {
  %173 = @func_3437() /* ty=(Tensor[(4, 3, 16), bool],) */;
  %174 = %173.0;
  %175 = cast(%174, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %176 = rsqrt(%175) /* ty=Tensor[(4, 3, 16), float32] */;
  %177 = cast(%174, dtype="bool") /* ty=Tensor[(4, 3, 16), bool] */;
  %178 = shape_of(%176, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%176, dtype="bool") /* ty=Tensor[(4, 3, 16), bool] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %181 = cast(meta[relay.Constant][9] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %182 = cast(%var_3589, dtype="float32") /* ty=Tensor[(576), float32] */;
  %183 = reshape(%181, newshape=[3, 5, 5]) /* ty=Tensor[(3, 5, 5), float32] */;
  %184 = reshape(%182, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %185 = @func_2168(%183, %184) /* ty=(Tensor[(3, 5, 5), float64], Tensor[(3, 5, 5), uint16], Tensor[(720), bool], Tensor[(576), float32], Tensor[(840), bool], Tensor[(3, 5, 5), float64]) */;
  %186 = %185.0;
  %187 = cast(%186, dtype="float32") /* ty=Tensor[(3, 5, 5), float32] */;
  %188 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(75), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %189 = cast(meta[relay.Constant][9] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?), float32] */;
  %191 = logical_or(%179, %180) /* ty=Tensor[(4, 3, 16), bool] */;
  %192 = mod(%189, %190) /* ty=Tensor[(75), float32] */;
  (%var_3589, %191, %192)
}

def @func_3482(%var_3474: Tensor[(2, 2, 10), int64], %var_3475: Tensor[(2, 2, 10), int64]) -> (Tensor[(2, 2, 10), float64],) {
  %193 = cast(%var_3475, dtype="int64") /* ty=Tensor[(2, 2, 10), int64] */;
  %194 = shape_of(%var_3474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%var_3474, dtype="int64") /* ty=Tensor[(2, 2, 10), int64] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %197 = left_shift(%195, %196) /* ty=Tensor[(2, 2, 10), int64] */;
  %198 = cast(%197, dtype="float64") /* ty=Tensor[(2, 2, 10), float64] */;
  %199 = erf(%198) /* ty=Tensor[(2, 2, 10), float64] */;
  (%199,)
}

def @func_3017() -> (Tensor[(7, 11, 10), bool],) {
  %200 = @func_2183() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %201 = %200.0;
  %202 = cast(meta[relay.Constant][10] /* ty=Tensor[(7, 11, 10), float32] */, dtype="bool") /* ty=Tensor[(7, 11, 10), bool] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%201, dtype="bool") /* ty=Tensor[(7, 11, 10), bool] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %206 = logical_or(%204, %205) /* ty=Tensor[(7, 11, 10), bool] */;
  (%206,)
}

def @func_2810(%var_2785: Tensor[(3, 5, 5), uint16], %var_2794: Tensor[(45, 1), bool], %var_2795: Tensor[(1, 720), bool], %var_2800: Tensor[(45, 1), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(3, 5, 5), bool], Tensor[(15, 16, 3), bool], Tensor[(1, 720), bool], Tensor[(45, ?), bool]) {
  %207 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
  %208 = @func_849() /* ty=Tensor[(3, 5, 5), uint16] */;
  %209 = cast(%var_2785, dtype="bool") /* ty=Tensor[(3, 5, 5), bool] */;
  %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%208, dtype="bool") /* ty=Tensor[(3, 5, 5), bool] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %213 = cast(%var_2794, dtype="bool") /* ty=Tensor[(45, 1), bool] */;
  %214 = cast(%var_2795, dtype="bool") /* ty=Tensor[(1, 720), bool] */;
  %215 = reshape(%213, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %216 = reshape(%214, newshape=[720, 1]) /* ty=Tensor[(720, 1), bool] */;
  %217 = @func_351(%215, %216) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) */;
  %218 = cast(%var_2800, dtype="bool") /* ty=Tensor[(45, 1), bool] */;
  %219 = shape_of(%var_2794, dtype="int32") /* ty=Tensor[(2), int32] */;
  %220 = cast(%var_2794, dtype="bool") /* ty=Tensor[(45, 1), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %222 = %207.0;
  %223 = not_equal(%211, %212) /* ty=Tensor[(3, 5, 5), bool] */;
  %224 = %217.1;
  %225 = logical_and(%220, %221) /* ty=Tensor[(45, ?), bool] */;
  (%222, %223, %224, %var_2795, %225)
}

def @func_2045() -> Tensor[(7, 11, 10), float32] {
  %226 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
  %226.0
}

def @func_1449(%var_1446: Tensor[(9, 15, 4), int8], %var_1447: Tensor[(9, 15, 4), int8], %var_1448: Tensor[(12, 60), bool]) -> (Tensor[(9, 15, 4), int16], Tensor[(576), float32], Tensor[(36, 16), float32], Tensor[(12, 60), bool], Tensor[(9, 15, 4), bool], Tensor[(16, 12, 3), int32]) {
  %254 = fn (%var_1390: Tensor[(9, 15, 4), int8], %var_1391: Tensor[(9, 15, 4), int8], %var_1431: Tensor[(12, 60), bool]) -> (Tensor[(9, 15, 4), int16], Tensor[(576), float32], Tensor[(36, 16), float32], Tensor[(12, 60), bool], Tensor[(9, 15, 4), bool], Tensor[(16, 12, 3), int32]) {
    %227 = cast(%var_1391, dtype="int8") /* ty=Tensor[(9, 15, 4), int8] */;
    %228 = shape_of(%var_1390, dtype="int32") /* ty=Tensor[(3), int32] */;
    %229 = cast(%var_1390, dtype="int8") /* ty=Tensor[(9, 15, 4), int8] */;
    %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %231 = bitwise_or(%229, %230) /* ty=Tensor[(9, 15, 4), int8] */;
    %232 = cast(%var_1391, dtype="int16") /* ty=Tensor[(9, 15, 4), int16] */;
    %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
    %234 = cast(%231, dtype="int16") /* ty=Tensor[(9, 15, 4), int16] */;
    %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %236 = cast(meta[relay.Constant][11] /* ty=Tensor[(36, 16), float32] */, dtype="float32") /* ty=Tensor[(36, 16), float32] */;
    %237 = cast(%var_1431, dtype="bool") /* ty=Tensor[(12, 60), bool] */;
    %238 = reshape(%236, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %239 = reshape(%237, newshape=[720]) /* ty=Tensor[(720), bool] */;
    %240 = @func_1120(%238, %239) /* ty=(Tensor[(3, 5, 5), float32], Tensor[(3, 5, 5), uint16], Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), uint16], Tensor[(45), bool], Tensor[(3, 5, 5), uint16]) */;
    %241 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 15, 4), int8] */, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
    %242 = shape_of(%var_1391, dtype="int32") /* ty=Tensor[(3), int32] */;
    %243 = cast(%var_1391, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
    %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %245 = %240.4;
    %246 = cast(%245, dtype="float32") /* ty=Tensor[(576), float32] */;
    %247 = cast(meta[relay.Constant][11] /* ty=Tensor[(36, 16), float32] */, dtype="float32") /* ty=Tensor[(36, 16), float32] */;
    %248 = reshape(%246, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
    %249 = reshape(%247, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
    %250 = @func_195(%248, %249) /* ty=(Tensor[(16, 12, 3), int32],) */;
    %251 = left_shift(%234, %235) /* ty=Tensor[(9, 15, 4), int16] */;
    %252 = equal(%243, %244) /* ty=Tensor[(9, 15, 4), bool] */;
    %253 = %250.0;
    (%251, %245, meta[relay.Constant][11] /* ty=Tensor[(36, 16), float32] */, %var_1431, %252, %253)
  };
  %254(%var_1446, %var_1447, %var_1448) /* ty=(Tensor[(9, 15, 4), int16], Tensor[(576), float32], Tensor[(36, 16), float32], Tensor[(12, 60), bool], Tensor[(9, 15, 4), bool], Tensor[(16, 12, 3), int32]) */
}

def @func_664() -> (Tensor[(7, 11, 10), float32],) {
  %257 = fn () -> (Tensor[(7, 11, 10), float32],) {
    %255 = @func_286() /* ty=(Tensor[(7, 11, 10), float32],) */;
    %256 = %255.0;
    (%256,)
  };
  %257() /* ty=(Tensor[(7, 11, 10), float32],) */
}

def @func_286() -> (Tensor[(7, 11, 10), float32],) {
  %258 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 11, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 11, 10), float32] */;
  %259 = sqrt(%258) /* ty=Tensor[(7, 11, 10), float32] */;
  (%259,)
}

def @func_1672(%var_1670: bool) -> Tensor[(6, 3, 12), bool] {
  @func_1669(%var_1670) /* ty=Tensor[(6, 3, 12), bool] */
}

def @func_2689(%var_2686: Tensor[(3, 5, 5), float32], %var_2687: Tensor[(576), float32], %var_2688: Tensor[(180, 4), bool]) -> (Tensor[(3, 5, 5), float32], Tensor[(576), float32], Tensor[(180, 4), bool], Tensor[(3, 5, 5), bool], Tensor[(3, 5, 5), float64], Tensor[(45), bool]) {
  %285 = fn (%var_2608: Tensor[(3, 5, 5), float32], %var_2628: Tensor[(576), float32], %var_2629: Tensor[(180, 4), bool]) -> (Tensor[(3, 5, 5), float32], Tensor[(576), float32], Tensor[(180, 4), bool], Tensor[(3, 5, 5), bool], Tensor[(3, 5, 5), float64], Tensor[(45), bool]) {
    %260 = cast(%var_2628, dtype="float32") /* ty=Tensor[(576), float32] */;
    %261 = cast(%var_2629, dtype="bool") /* ty=Tensor[(180, 4), bool] */;
    %262 = reshape(%260, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %263 = reshape(%261, newshape=[720]) /* ty=Tensor[(720), bool] */;
    %264 = @func_1120(%262, %263) /* ty=(Tensor[(3, 5, 5), float32], Tensor[(3, 5, 5), uint16], Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), uint16], Tensor[(45), bool], Tensor[(3, 5, 5), uint16]) */;
    %265 = @func_1221() /* ty=(Tensor[(3, 5, 5), float64],) */;
    %266 = %265.0;
    %267 = cast(%266, dtype="float32") /* ty=Tensor[(3, 5, 5), float32] */;
    %268 = rsqrt(%267) /* ty=Tensor[(3, 5, 5), float32] */;
    %269 = cast(%var_2608, dtype="uint8") /* ty=Tensor[(3, 5, 5), uint8] */;
    %270 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
    %271 = cast(%268, dtype="uint8") /* ty=Tensor[(3, 5, 5), uint8] */;
    %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %273 = minimum(%271, %272) /* ty=Tensor[(3, 5, 5), uint8] */;
    %274 = cast(%273, dtype="bool") /* ty=Tensor[(3, 5, 5), bool] */;
    %275 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
    %276 = cast(%268, dtype="bool") /* ty=Tensor[(3, 5, 5), bool] */;
    %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %278 = cast(%var_2629, dtype="bool") /* ty=Tensor[(180, 4), bool] */;
    %279 = reshape(%278, newshape=[720]) /* ty=Tensor[(720), bool] */;
    %280 = @func_1263(%279) /* ty=(Tensor[(3, 5, 5), uint32], Tensor[(45), bool], Tensor[(45), bool], Tensor[(720), bool]) */;
    %281 = %264.0;
    %282 = greater(%276, %277) /* ty=Tensor[(3, 5, 5), bool] */;
    %283 = @func_1800() /* ty=Tensor[(3, 5, 5), float64] */;
    %284 = %280.1;
    (%281, %var_2628, %var_2629, %282, %283, %284)
  };
  %285(%var_2686, %var_2687, %var_2688) /* ty=(Tensor[(3, 5, 5), float32], Tensor[(576), float32], Tensor[(180, 4), bool], Tensor[(3, 5, 5), bool], Tensor[(3, 5, 5), float64], Tensor[(45), bool]) */
}

def @func_517(%var_515: Tensor[(14, 16, 12), float32], %var_516: Tensor[(576), float32]) -> (Tensor[(14, 16, 12), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32]) {
  @func_513(%var_515, %var_516) /* ty=(Tensor[(14, 16, 12), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32]) */
}

def @func_1634(%var_1631: Tensor[(770), float32], %var_1632: Tensor[(45), bool], %var_1633: Tensor[(720), bool]) -> (Tensor[(72, 8), bool], Tensor[(45), bool], Tensor[(770), float32], Tensor[(45), bool], Tensor[(720), bool]) {
  @func_1629(%var_1631, %var_1632, %var_1633) /* ty=(Tensor[(72, 8), bool], Tensor[(45), bool], Tensor[(770), float32], Tensor[(45), bool], Tensor[(720), bool]) */
}

def @func_2302(%var_2300: Tensor[(16, 12, 3), int32]) -> Tensor[(16, 12, 3), uint64] {
  @func_2299(%var_2300) /* ty=Tensor[(16, 12, 3), uint64] */
}

def @func_3486(%var_3484: Tensor[(2, 2, 10), int64], %var_3485: Tensor[(2, 2, 10), int64]) -> (Tensor[(2, 2, 10), float64],) {
  @func_3482(%var_3484, %var_3485) /* ty=(Tensor[(2, 2, 10), float64],) */
}

def @func_2474() -> (Tensor[(3, 5, 5), uint16], Tensor[(7, 11, 10), bool]) {
  %286 = @func_1849() /* ty=Tensor[(7, 11, 10), float32] */;
  %287 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
  %288 = %287.0;
  %289 = cast(%288, dtype="bool") /* ty=Tensor[(7, 11, 10), bool] */;
  %290 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%286, dtype="bool") /* ty=Tensor[(7, 11, 10), bool] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %293 = @func_849() /* ty=Tensor[(3, 5, 5), uint16] */;
  %294 = less_equal(%291, %292) /* ty=Tensor[(7, 11, 10), bool] */;
  (%293, %294)
}

def @func_778() -> (Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) {
  %321 = fn () -> (Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) {
    %295 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(3, 5, 5), float64] */;
    %296 = cos(%295) /* ty=Tensor[(3, 5, 5), float64] */;
    %297 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 5, 5), float64] */, dtype="int32") /* ty=Tensor[(3, 5, 5), int32] */;
    %298 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
    %299 = cast(%296, dtype="int32") /* ty=Tensor[(3, 5, 5), int32] */;
    %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %301 = bitwise_xor(%299, %300) /* ty=Tensor[(3, 5, 5), int32] */;
    %302 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 5, 5), float64] */, dtype="uint16") /* ty=Tensor[(3, 5, 5), uint16] */;
    %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
    %304 = cast(%301, dtype="uint16") /* ty=Tensor[(3, 5, 5), uint16] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %306 = cast(%296, dtype="float32") /* ty=Tensor[(3, 5, 5), float32] */;
    %307 = atanh(%306) /* ty=Tensor[(3, 5, 5), float32] */;
    %308 = cast(%307, dtype="float32") /* ty=Tensor[(3, 5, 5), float32] */;
    %309 = asin(%308) /* ty=Tensor[(3, 5, 5), float32] */;
    %310 = cast(%301, dtype="bool") /* ty=Tensor[(3, 5, 5), bool] */;
    %311 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(3, 5, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %312 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 5, 5), float64] */, dtype="bool") /* ty=Tensor[(3, 5, 5), bool] */;
    %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %314 = logical_or(%312, %313) /* ty=Tensor[(3, 5, 5), bool] */;
    %315 = cast(%314, dtype="float32") /* ty=Tensor[(3, 5, 5), float32] */;
    %316 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
    %317 = cast(%309, dtype="float32") /* ty=Tensor[(3, 5, 5), float32] */;
    %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %319 = bitwise_and(%304, %305) /* ty=Tensor[(3, 5, 5), uint16] */;
    %320 = divide(%317, %318) /* ty=Tensor[(3, 5, 5), float32] */;
    (%319, %320)
  };
  %321() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) */
}

def @func_513(%var_497: Tensor[(14, 16, 12), float32], %var_502: Tensor[(576), float32]) -> (Tensor[(14, 16, 12), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32]) {
  %322 = cast(%var_497, dtype="float32") /* ty=Tensor[(14, 16, 12), float32] */;
  %323 = cast(%var_502, dtype="float32") /* ty=Tensor[(576), float32] */;
  %324 = cast(%var_502, dtype="float32") /* ty=Tensor[(576), float32] */;
  %325 = reshape(%323, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %326 = reshape(%324, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %327 = @func_195(%325, %326) /* ty=(Tensor[(16, 12, 3), int32],) */;
  %328 = asin(%322) /* ty=Tensor[(14, 16, 12), float32] */;
  %329 = %327.0;
  (%328, %329, %var_502)
}

def @func_4154(%var_4120: Tensor[(7, 11, 10), float32], %var_4132: Tensor[(70), float32], %var_4134: Tensor[(720), bool]) -> (Tensor[(7, 11, 10), int64], Tensor[(14, 5, 14), int16], Tensor[(70), float32], Tensor[(1, 45), bool], Tensor[(720), bool]) {
  %330 = @func_663() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %331 = %330.0;
  %332 = cast(%var_4120, dtype="int64") /* ty=Tensor[(7, 11, 10), int64] */;
  %333 = shape_of(%331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%331, dtype="int64") /* ty=Tensor[(7, 11, 10), int64] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %336 = cast(%var_4132, dtype="float32") /* ty=Tensor[(70), float32] */;
  %337 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 45), bool] */, dtype="bool") /* ty=Tensor[(1, 45), bool] */;
  %338 = cast(%var_4134, dtype="bool") /* ty=Tensor[(720), bool] */;
  %339 = reshape(%336, newshape=[1, 5, 14]) /* ty=Tensor[(1, 5, 14), float32] */;
  %340 = reshape(%337, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %341 = reshape(%338, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %342 = @func_443(%339, %340, %341) /* ty=(Tensor[(14, 5, 14), int16], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(720), bool], Tensor[(14, 5, 14), float64], Tensor[(15, 16, 3), bool]) */;
  %343 = bitwise_xor(%334, %335) /* ty=Tensor[(7, 11, 10), int64] */;
  %344 = %342.0;
  (%343, %344, %var_4132, meta[relay.Constant][15] /* ty=Tensor[(1, 45), bool] */, %var_4134)
}

def @func_3453() -> Tensor[(3, 5, 5), uint16] {
  @func_849() /* ty=Tensor[(3, 5, 5), uint16] */
}

def @func_4334(%var_4333: Tensor[(10, 13, 13), float64]) -> (Tensor[(10, 13, 13), float64], Tensor[(16, 12, 3), uint64], Tensor[(576), int32]) {
  %350 = fn (%var_4311: Tensor[(10, 13, 13), float64]) -> (Tensor[(10, 13, 13), float64], Tensor[(16, 12, 3), uint64], Tensor[(576), int32]) {
    %345 = cast(%var_4311, dtype="float64") /* ty=Tensor[(10, 13, 13), float64] */;
    %346 = cast(meta[relay.Constant][16] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
    %347 = reshape(%346, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), int32] */;
    %348 = sqrt(%345) /* ty=Tensor[(10, 13, 13), float64] */;
    %349 = @func_2299(%347) /* ty=Tensor[(16, 12, 3), uint64] */;
    (%348, %349, meta[relay.Constant][16] /* ty=Tensor[(576), int32] */)
  };
  %350(%var_4333) /* ty=(Tensor[(10, 13, 13), float64], Tensor[(16, 12, 3), uint64], Tensor[(576), int32]) */
}

def @func_4652(%var_4619: Tensor[(12, 7, 10), float64], %var_4631: Tensor[(144, 4), float32], %var_4632: Tensor[(720), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(3, 5, 5), bool], Tensor[(75), float32], Tensor[(144, 4), float32], Tensor[(720), bool], Tensor[(12, 7, 10), bool]) {
  %351 = @func_286() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %352 = cast(meta[relay.Constant][17] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %353 = cast(%var_4631, dtype="float32") /* ty=Tensor[(144, 4), float32] */;
  %354 = cast(%var_4632, dtype="bool") /* ty=Tensor[(720), bool] */;
  %355 = reshape(%352, newshape=[3, 5, 5]) /* ty=Tensor[(3, 5, 5), float32] */;
  %356 = reshape(%353, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %357 = reshape(%354, newshape=[180, 4]) /* ty=Tensor[(180, 4), bool] */;
  %358 = @func_2685(%355, %356, %357) /* ty=(Tensor[(3, 5, 5), float32], Tensor[(576), float32], Tensor[(180, 4), bool], Tensor[(3, 5, 5), bool], Tensor[(3, 5, 5), float64], Tensor[(45), bool]) */;
  %359 = cast(%var_4619, dtype="float64") /* ty=Tensor[(12, 7, 10), float64] */;
  %360 = log2(%359) /* ty=Tensor[(12, 7, 10), float64] */;
  %361 = cast(%var_4619, dtype="bool") /* ty=Tensor[(12, 7, 10), bool] */;
  %362 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(%360, dtype="bool") /* ty=Tensor[(12, 7, 10), bool] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %365 = %351.0;
  %366 = %358.3;
  %367 = logical_or(%363, %364) /* ty=Tensor[(12, 7, 10), bool] */;
  (%365, %366, meta[relay.Constant][17] /* ty=Tensor[(75), float32] */, %var_4631, %var_4632, %367)
}

def @func_3616(%var_3614: Tensor[(576), float32]) -> (Tensor[(576), float32], Tensor[(4, 3, 16), bool], Tensor[(75), float32]) {
  @func_3613(%var_3614) /* ty=(Tensor[(576), float32], Tensor[(4, 3, 16), bool], Tensor[(75), float32]) */
}

def @func_2060(%var_2058: Tensor[(7, 11, 10), float32]) -> (Tensor[(7, 11, 10), int8],) {
  @func_2057(%var_2058) /* ty=(Tensor[(7, 11, 10), int8],) */
}

def @func_2732() -> (Tensor[(4, 3, 16), bool], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool]) {
  %381 = fn () -> (Tensor[(4, 3, 16), bool], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool]) {
    %368 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 3, 16), int64] */, dtype="bool") /* ty=Tensor[(4, 3, 16), bool] */;
    %369 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(4, 3, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %370 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 3, 16), int64] */, dtype="bool") /* ty=Tensor[(4, 3, 16), bool] */;
    %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %372 = cast(meta[relay.Constant][20] /* ty=Tensor[(840), bool] */, dtype="bool") /* ty=Tensor[(840), bool] */;
    %373 = cast(meta[relay.Constant][20] /* ty=Tensor[(840), bool] */, dtype="bool") /* ty=Tensor[(840), bool] */;
    %374 = cast(meta[relay.Constant][21] /* ty=Tensor[(720), bool] */, dtype="bool") /* ty=Tensor[(720), bool] */;
    %375 = reshape(%372, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), bool] */;
    %376 = reshape(%373, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), bool] */;
    %377 = reshape(%374, newshape=[2, 360]) /* ty=Tensor[(2, 360), bool] */;
    %378 = @func_909(%375, %376, %377) /* ty=(Tensor[(15, 7, 8), bool], Tensor[(15, 7, 8), bool], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(2, 360), bool], Tensor[(15, 7, 8), float64]) */;
    %379 = greater(%370, %371) /* ty=Tensor[(4, 3, 16), bool] */;
    %380 = %378.0;
    (%379, %380, meta[relay.Constant][20] /* ty=Tensor[(840), bool] */, meta[relay.Constant][21] /* ty=Tensor[(720), bool] */)
  };
  %381() /* ty=(Tensor[(4, 3, 16), bool], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool]) */
}

def @func_4581() -> (Tensor[(7, 11, 10), float64],) {
  %386 = fn () -> (Tensor[(7, 11, 10), float64],) {
    %382 = @func_3657() /* ty=(Tensor[(72, 8), float32], Tensor[(7, 11, 10), float32], Tensor[(75), float32]) */;
    %383 = %382.1;
    %384 = cast(%383, dtype="float64") /* ty=Tensor[(7, 11, 10), float64] */;
    %385 = acosh(%384) /* ty=Tensor[(7, 11, 10), float64] */;
    (%385,)
  };
  %386() /* ty=(Tensor[(7, 11, 10), float64],) */
}

def @func_2168(%var_2132: Tensor[(3, 5, 5), float32], %var_2139: Tensor[(576), float32]) -> (Tensor[(3, 5, 5), float64], Tensor[(3, 5, 5), uint16], Tensor[(720), bool], Tensor[(576), float32], Tensor[(840), bool], Tensor[(3, 5, 5), float64]) {
  %387 = @func_849() /* ty=Tensor[(3, 5, 5), uint16] */;
  %388 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 5, 5), uint16] */, dtype="int16") /* ty=Tensor[(3, 5, 5), int16] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="int16") /* ty=Tensor[(3, 5, 5), int16] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %392 = multiply(%390, %391) /* ty=Tensor[(3, 5, 5), int16] */;
  %393 = cast(%392, dtype="float64") /* ty=Tensor[(3, 5, 5), float64] */;
  %394 = cast(%392, dtype="float32") /* ty=Tensor[(3, 5, 5), float32] */;
  %395 = sinh(%394) /* ty=Tensor[(3, 5, 5), float32] */;
  %396 = cast(%var_2132, dtype="uint16") /* ty=Tensor[(3, 5, 5), uint16] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%395, dtype="uint16") /* ty=Tensor[(3, 5, 5), uint16] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %400 = cast(%var_2139, dtype="float32") /* ty=Tensor[(576), float32] */;
  %401 = reshape(%400, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %402 = @func_1724(%401) /* ty=(Tensor[(7, 11, 10), bool], Tensor[(720, 1), bool], Tensor[(576), float32], Tensor[(720), bool]) */;
  %403 = cast(%var_2139, dtype="float32") /* ty=Tensor[(576), float32] */;
  %404 = %402.3;
  %405 = cast(%404, dtype="bool") /* ty=Tensor[(720), bool] */;
  %406 = reshape(%403, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %407 = reshape(%405, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %408 = @func_1120(%406, %407) /* ty=(Tensor[(3, 5, 5), float32], Tensor[(3, 5, 5), uint16], Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), uint16], Tensor[(45), bool], Tensor[(3, 5, 5), uint16]) */;
  %409 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 5, 5), uint16] */, dtype="float64") /* ty=Tensor[(3, 5, 5), float64] */;
  %410 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%395, dtype="float64") /* ty=Tensor[(3, 5, 5), float64] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %413 = acos(%393) /* ty=Tensor[(3, 5, 5), float64] */;
  %414 = bitwise_or(%398, %399) /* ty=Tensor[(3, 5, 5), uint16] */;
  %415 = %408.6;
  %416 = power(%411, %412) /* ty=Tensor[(3, 5, 5), float64] */;
  (%413, %414, %404, %var_2139, %415, %416)
}

def @func_3455() -> Tensor[(3, 5, 5), uint16] {
  @func_3453() /* ty=Tensor[(3, 5, 5), uint16] */
}

def @func_3877() -> (Tensor[(16, 12, 3), int32], Tensor[(75), float32], Tensor[(45), bool]) {
  %422 = fn () -> (Tensor[(16, 12, 3), int32], Tensor[(75), float32], Tensor[(45), bool]) {
    %417 = cast(meta[relay.Constant][23] /* ty=Tensor[(45), bool] */, dtype="bool") /* ty=Tensor[(45), bool] */;
    %418 = reshape(%417, newshape=[1, 45]) /* ty=Tensor[(1, 45), bool] */;
    %419 = @func_3759(%418) /* ty=(Tensor[(75), float32], Tensor[(15, 16, 3), bool], Tensor[(1, 45), bool], Tensor[(4, 180), bool]) */;
    %420 = @func_2926() /* ty=Tensor[(16, 12, 3), int32] */;
    %421 = %419.0;
    (%420, %421, meta[relay.Constant][23] /* ty=Tensor[(45), bool] */)
  };
  %422() /* ty=(Tensor[(16, 12, 3), int32], Tensor[(75), float32], Tensor[(45), bool]) */
}

def @func_4657(%var_4654: Tensor[(12, 7, 10), float64], %var_4655: Tensor[(144, 4), float32], %var_4656: Tensor[(720), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(3, 5, 5), bool], Tensor[(75), float32], Tensor[(144, 4), float32], Tensor[(720), bool], Tensor[(12, 7, 10), bool]) {
  @func_4652(%var_4654, %var_4655, %var_4656) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(3, 5, 5), bool], Tensor[(75), float32], Tensor[(144, 4), float32], Tensor[(720), bool], Tensor[(12, 7, 10), bool]) */
}

def @func_4272(%var_4248: Tensor[(7, 11, 10), bool]) -> Tensor[(7, 11, 10), bool] {
  %423 = @func_3017() /* ty=(Tensor[(7, 11, 10), bool],) */;
  %424 = %423.0;
  %425 = cast(%var_4248, dtype="bool") /* ty=Tensor[(7, 11, 10), bool] */;
  %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%424, dtype="bool") /* ty=Tensor[(7, 11, 10), bool] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%427, %428) /* ty=Tensor[(7, 11, 10), bool] */
}

def @func_1541() -> Tensor[(16, 12, 3), int32] {
  @func_1539() /* ty=Tensor[(16, 12, 3), int32] */
}

def @func_1629(%var_1611: Tensor[(770), float32], %var_1612: Tensor[(45), bool], %var_1613: Tensor[(720), bool]) -> (Tensor[(72, 8), bool], Tensor[(45), bool], Tensor[(770), float32], Tensor[(45), bool], Tensor[(720), bool]) {
  %429 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
  %430 = %429.2;
  %431 = cast(%430, dtype="float64") /* ty=Tensor[(72, 8), float64] */;
  %432 = asinh(%431) /* ty=Tensor[(72, 8), float64] */;
  %433 = cast(%430, dtype="bool") /* ty=Tensor[(72, 8), bool] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(2), int32] */;
  %435 = cast(%432, dtype="bool") /* ty=Tensor[(72, 8), bool] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %437 = cast(%var_1611, dtype="float32") /* ty=Tensor[(770), float32] */;
  %438 = cast(%var_1612, dtype="bool") /* ty=Tensor[(45), bool] */;
  %439 = cast(%var_1613, dtype="bool") /* ty=Tensor[(720), bool] */;
  %440 = reshape(%437, newshape=[7, 11, 10]) /* ty=Tensor[(7, 11, 10), float32] */;
  %441 = reshape(%438, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %442 = reshape(%439, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %443 = @func_620(%440, %441, %442) /* ty=(Tensor[(7, 11, 10), float64], Tensor[(7, 11, 10), float32], Tensor[(7, 11, 10), float32], Tensor[(14, 16, 12), float32], Tensor[(1344, 2), float32], Tensor[(72, 8), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720), bool]) */;
  %444 = logical_and(%435, %436) /* ty=Tensor[(72, 8), bool] */;
  %445 = %443.7;
  (%444, %445, %var_1611, %var_1612, %var_1613)
}

def @func_2389() -> (Tensor[(7, 11, 10), float32], Tensor[(3, 5, 5), float64]) {
  @func_2387() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(3, 5, 5), float64]) */
}

def @func_3564() -> (Tensor[(7, 11, 10), float32], Tensor[(2, 2, 10), float64], Tensor[(1, 40), int64]) {
  @func_3562() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(2, 2, 10), float64], Tensor[(1, 40), int64]) */
}

def @func_4444() -> (Tensor[(16, 12, 3), int32],) {
  %447 = fn () -> (Tensor[(16, 12, 3), int32],) {
    %446 = @func_1539() /* ty=Tensor[(16, 12, 3), int32] */;
    (%446,)
  };
  %447() /* ty=(Tensor[(16, 12, 3), int32],) */
}

def @func_94(%var_92: Tensor[(15, 1, 3), bool], %var_93: Tensor[(15, 16, 3), bool]) -> Tensor[(15, 16, 3), bool] {
  @func_90(%var_92, %var_93) /* ty=Tensor[(15, 16, 3), bool] */
}

def @func_3975(%var_3965: Tensor[(15, 11, 10), float64]) -> (Tensor[(15, 11, 10), float64], Tensor[(15, 11, 10), float32]) {
  %448 = cast(%var_3965, dtype="float64") /* ty=Tensor[(15, 11, 10), float64] */;
  %449 = cast(%var_3965, dtype="float32") /* ty=Tensor[(15, 11, 10), float32] */;
  %450 = cosh(%448) /* ty=Tensor[(15, 11, 10), float64] */;
  %451 = sin(%449) /* ty=Tensor[(15, 11, 10), float32] */;
  (%450, %451)
}

def @func_351(%var_348: Tensor[(45), bool], %var_349: Tensor[(720, 1), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) {
  %452 = @func_286() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %453 = cast(%var_348, dtype="bool") /* ty=Tensor[(45), bool] */;
  %454 = cast(%var_349, dtype="bool") /* ty=Tensor[(720, 1), bool] */;
  %455 = reshape(%453, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), bool] */;
  %456 = reshape(%454, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), bool] */;
  %457 = %452.0;
  %458 = @func_90(%455, %456) /* ty=Tensor[(15, 16, 3), bool] */;
  (%457, %458, %var_348, %var_349)
}

def @func_3844(%var_3793: Tensor[(720), bool], %var_3807: Tensor[(4, 3, 16), float64], %var_3816: Tensor[(4, 3, 16), float64]) -> (Tensor[(720), bool], Tensor[(720), bool], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), int64]) {
  %459 = cast(%var_3793, dtype="bool") /* ty=Tensor[(720), bool] */;
  %460 = reshape(%459, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %461 = @func_1263(%460) /* ty=(Tensor[(3, 5, 5), uint32], Tensor[(45), bool], Tensor[(45), bool], Tensor[(720), bool]) */;
  %462 = @func_3437() /* ty=(Tensor[(4, 3, 16), bool],) */;
  %463 = %462.0;
  %464 = cast(%463, dtype="float64") /* ty=Tensor[(4, 3, 16), float64] */;
  %465 = acos(%464) /* ty=Tensor[(4, 3, 16), float64] */;
  %466 = cast(%var_3807, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%465, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %470 = cast(%var_3816, dtype="int64") /* ty=Tensor[(4, 3, 16), int64] */;
  %471 = shape_of(%var_3807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%var_3807, dtype="int64") /* ty=Tensor[(4, 3, 16), int64] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %474 = %461.3;
  %475 = floor_divide(%468, %469) /* ty=Tensor[(4, 3, 16), float32] */;
  %476 = bitwise_xor(%472, %473) /* ty=Tensor[(4, 3, 16), int64] */;
  (%474, %var_3793, %475, %476)
}

def @func_4052() -> (Tensor[(7, 11, 10), float32],) {
  %478 = fn () -> (Tensor[(7, 11, 10), float32],) {
    %477 = @func_1849() /* ty=Tensor[(7, 11, 10), float32] */;
    (%477,)
  };
  %478() /* ty=(Tensor[(7, 11, 10), float32],) */
}

def @func_4464() -> (Tensor[(7, 11, 10), float32], Tensor[(576), float32], Tensor[(576), float32]) {
  @func_4462() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(576), float32], Tensor[(576), float32]) */
}

def @func_3180() -> (Tensor[(7, 11, 10), float32],) {
  @func_3178() /* ty=(Tensor[(7, 11, 10), float32],) */
}

def @func_1266(%var_1264: Tensor[(720), bool]) -> (Tensor[(3, 5, 5), uint32], Tensor[(45), bool], Tensor[(45), bool], Tensor[(720), bool]) {
  @func_1263(%var_1264) /* ty=(Tensor[(3, 5, 5), uint32], Tensor[(45), bool], Tensor[(45), bool], Tensor[(720), bool]) */
}

def @func_2009(%var_2008: Tensor[(16, 12, 3), int32]) -> Tensor[(16, 12, 3), float32] {
  %484 = fn (%var_1995: Tensor[(16, 12, 3), int32]) -> Tensor[(16, 12, 3), float32] {
    %479 = @func_1759() /* ty=Tensor[(16, 12, 3), int32] */;
    %480 = cast(%var_1995, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
    %481 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
    %482 = cast(%479, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
    %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%482, %483) /* ty=Tensor[(16, 12, 3), float32] */
  };
  %484(%var_2008) /* ty=Tensor[(16, 12, 3), float32] */
}

def @func_4077() -> (Tensor[(15, 7, 8), bool],) {
  %485 = @func_3156() /* ty=Tensor[(15, 7, 8), bool] */;
  (%485,)
}

def @func_3712(%var_3711: Tensor[(7, 11, 10), float32]) -> (Tensor[(7, 11, 10), int8], Tensor[(7, 11, 10), float64]) {
  %494 = fn (%var_3699: Tensor[(7, 11, 10), float32]) -> (Tensor[(7, 11, 10), int8], Tensor[(7, 11, 10), float64]) {
    %486 = @func_3635() /* ty=Tensor[(7, 11, 10), float32] */;
    %487 = cast(%var_3699, dtype="int8") /* ty=Tensor[(7, 11, 10), int8] */;
    %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
    %489 = cast(%486, dtype="int8") /* ty=Tensor[(7, 11, 10), int8] */;
    %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %491 = cast(%var_3699, dtype="float64") /* ty=Tensor[(7, 11, 10), float64] */;
    %492 = multiply(%489, %490) /* ty=Tensor[(7, 11, 10), int8] */;
    %493 = asinh(%491) /* ty=Tensor[(7, 11, 10), float64] */;
    (%492, %493)
  };
  %494(%var_3711) /* ty=(Tensor[(7, 11, 10), int8], Tensor[(7, 11, 10), float64]) */
}

def @func_3249(%var_3245: Tensor[(14, 2, 2), uint64], %var_3246: Tensor[(14, 2, 2), uint64], %var_3247: Tensor[(462), float32], %var_3248: Tensor[(14, 2, 2), uint64]) -> (Tensor[(14, 2, 2), bool], Tensor[(7, 11, 10), float32], Tensor[(3, 5, 5), uint16], Tensor[(462), float32], Tensor[(14, 2, 2), int16], Tensor[(14, 2, 2), uint64]) {
  %516 = fn (%var_3202: Tensor[(14, 2, 2), uint64], %var_3203: Tensor[(14, 2, 2), uint64], %var_3213: Tensor[(462), float32], %var_3216: Tensor[(14, 2, 2), uint64]) -> (Tensor[(14, 2, 2), bool], Tensor[(7, 11, 10), float32], Tensor[(3, 5, 5), uint16], Tensor[(462), float32], Tensor[(14, 2, 2), int16], Tensor[(14, 2, 2), uint64]) {
    %495 = cast(%var_3203, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
    %496 = shape_of(%var_3202, dtype="int32") /* ty=Tensor[(3), int32] */;
    %497 = cast(%var_3202, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
    %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %499 = @func_2907() /* ty=(Tensor[(7, 11, 10), float32],) */;
    %500 = cast(%var_3213, dtype="float32") /* ty=Tensor[(462), float32] */;
    %501 = reshape(%500, newshape=[7, 6, 11]) /* ty=Tensor[(7, 6, 11), float32] */;
    %502 = @func_1564(%501) /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(7, 6, 11), float32]) */;
    %503 = cast(%var_3216, dtype="int16") /* ty=Tensor[(14, 2, 2), int16] */;
    %504 = shape_of(%var_3202, dtype="int32") /* ty=Tensor[(3), int32] */;
    %505 = cast(%var_3202, dtype="int16") /* ty=Tensor[(14, 2, 2), int16] */;
    %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %507 = cast(%var_3216, dtype="uint64") /* ty=Tensor[(14, 2, 2), uint64] */;
    %508 = shape_of(%var_3202, dtype="int32") /* ty=Tensor[(3), int32] */;
    %509 = cast(%var_3202, dtype="uint64") /* ty=Tensor[(14, 2, 2), uint64] */;
    %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %511 = greater_equal(%497, %498) /* ty=Tensor[(14, 2, 2), bool] */;
    %512 = %499.0;
    %513 = %502.0;
    %514 = left_shift(%505, %506) /* ty=Tensor[(14, 2, 2), int16] */;
    %515 = multiply(%509, %510) /* ty=Tensor[(14, 2, 2), uint64] */;
    (%511, %512, %513, %var_3213, %514, %515)
  };
  %516(%var_3245, %var_3246, %var_3247, %var_3248) /* ty=(Tensor[(14, 2, 2), bool], Tensor[(7, 11, 10), float32], Tensor[(3, 5, 5), uint16], Tensor[(462), float32], Tensor[(14, 2, 2), int16], Tensor[(14, 2, 2), uint64]) */
}

def @func_3978(%var_3976: Tensor[(15, 11, 10), float64]) -> (Tensor[(15, 11, 10), float64], Tensor[(15, 11, 10), float32]) {
  @func_3975(%var_3976) /* ty=(Tensor[(15, 11, 10), float64], Tensor[(15, 11, 10), float32]) */
}

def @func_2926() -> Tensor[(16, 12, 3), int32] {
  @func_1539() /* ty=Tensor[(16, 12, 3), int32] */
}

def @func_1669(%var_1658: bool) -> Tensor[(6, 3, 12), bool] {
  %517 = cast(%var_1658, dtype="bool") /* ty=bool */;
  %518 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 3, 12), bool] */, dtype="bool") /* ty=Tensor[(6, 3, 12), bool] */;
  logical_or(%517, %518) /* ty=Tensor[(6, 3, 12), bool] */
}

def @func_1760() -> Tensor[(16, 12, 3), int32] {
  %519 = fn () -> Tensor[(16, 12, 3), int32] {
    @func_1539() /* ty=Tensor[(16, 12, 3), int32] */
  };
  %519() /* ty=Tensor[(16, 12, 3), int32] */
}

def @func_1801() -> Tensor[(3, 5, 5), float64] {
  %521 = fn () -> Tensor[(3, 5, 5), float64] {
    %520 = @func_1221() /* ty=(Tensor[(3, 5, 5), float64],) */;
    %520.0
  };
  %521() /* ty=Tensor[(3, 5, 5), float64] */
}

def @func_1851() -> Tensor[(7, 11, 10), float32] {
  @func_1849() /* ty=Tensor[(7, 11, 10), float32] */
}

def @func_4805(%var_4804: Tensor[(16, 12, 3), int32]) -> (Tensor[(16, 12, 3), bool],) {
  %540 = fn (%var_4750: Tensor[(16, 12, 3), int32]) -> (Tensor[(16, 12, 3), bool],) {
    %522 = @func_1759() /* ty=Tensor[(16, 12, 3), int32] */;
    %523 = cast(%var_4750, dtype="uint64") /* ty=Tensor[(16, 12, 3), uint64] */;
    %524 = shape_of(%522, dtype="int32") /* ty=Tensor[(3), int32] */;
    %525 = cast(%522, dtype="uint64") /* ty=Tensor[(16, 12, 3), uint64] */;
    %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %527 = left_shift(%525, %526) /* ty=Tensor[(16, 12, 3), uint64] */;
    %528 = cast(%527, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
    %529 = log10(%528) /* ty=Tensor[(16, 12, 3), float32] */;
    %530 = cast(%527, dtype="bool") /* ty=Tensor[(16, 12, 3), bool] */;
    %531 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
    %532 = cast(%529, dtype="bool") /* ty=Tensor[(16, 12, 3), bool] */;
    %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %534 = not_equal(%532, %533) /* ty=Tensor[(16, 12, 3), bool] */;
    %535 = cast(%527, dtype="bool") /* ty=Tensor[(16, 12, 3), bool] */;
    %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
    %537 = cast(%534, dtype="bool") /* ty=Tensor[(16, 12, 3), bool] */;
    %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %539 = logical_and(%537, %538) /* ty=Tensor[(16, 12, 3), bool] */;
    (%539,)
  };
  %540(%var_4804) /* ty=(Tensor[(16, 12, 3), bool],) */
}

def @func_3178() -> (Tensor[(7, 11, 10), float32],) {
  %541 = @func_1849() /* ty=Tensor[(7, 11, 10), float32] */;
  (%541,)
}

def @func_3849(%var_3846: Tensor[(720), bool], %var_3847: Tensor[(4, 3, 16), float64], %var_3848: Tensor[(4, 3, 16), float64]) -> (Tensor[(720), bool], Tensor[(720), bool], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), int64]) {
  @func_3844(%var_3846, %var_3847, %var_3848) /* ty=(Tensor[(720), bool], Tensor[(720), bool], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), int64]) */
}

def @func_1221() -> (Tensor[(3, 5, 5), float64],) {
  %542 = @func_777() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) */;
  %543 = %542.1;
  %544 = cast(%543, dtype="float64") /* ty=Tensor[(3, 5, 5), float64] */;
  %545 = asinh(%544) /* ty=Tensor[(3, 5, 5), float64] */;
  (%545,)
}

def @func_1567(%var_1565: Tensor[(7, 6, 11), float32]) -> (Tensor[(3, 5, 5), uint16], Tensor[(7, 6, 11), float32]) {
  @func_1564(%var_1565) /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(7, 6, 11), float32]) */
}

def @func_4689() -> Tensor[(7, 11, 10), float32] {
  %546 = @func_3178() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %546.0
}

def @func_3670() -> Tensor[(7, 11, 10), bool] {
  %548 = fn () -> Tensor[(7, 11, 10), bool] {
    %547 = @func_3017() /* ty=(Tensor[(7, 11, 10), bool],) */;
    %547.0
  };
  %548() /* ty=Tensor[(7, 11, 10), bool] */
}

def @func_4022(%var_4020: Tensor[(2, 6, 15), uint32], %var_4021: Tensor[(2, 6, 15), uint32]) -> (Tensor[(2, 6, 15), float32],) {
  @func_4018(%var_4020, %var_4021) /* ty=(Tensor[(2, 6, 15), float32],) */
}

def @func_4744(%var_4742: Tensor[(4, 10, 1), float32], %var_4743: Tensor[(4, 10, 2), float32]) -> (Tensor[(4, 10, ?), uint64], Tensor[(4, 10, 2), int32]) {
  %559 = fn (%var_4713: Tensor[(4, 10, 1), float32], %var_4737: Tensor[(4, 10, 2), float32]) -> (Tensor[(4, 10, ?), uint64], Tensor[(4, 10, 2), int32]) {
    %549 = cast(%var_4713, dtype="float32") /* ty=Tensor[(4, 10, 1), float32] */;
    %550 = rsqrt(%549) /* ty=Tensor[(4, 10, 1), float32] */;
    %551 = cast(%var_4713, dtype="uint64") /* ty=Tensor[(4, 10, 1), uint64] */;
    %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
    %553 = cast(%550, dtype="uint64") /* ty=Tensor[(4, 10, 1), uint64] */;
    %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %555 = cast(%var_4713, dtype="int32") /* ty=Tensor[(4, 10, 1), int32] */;
    %556 = cast(%var_4737, dtype="int32") /* ty=Tensor[(4, 10, 2), int32] */;
    %557 = multiply(%553, %554) /* ty=Tensor[(4, 10, ?), uint64] */;
    %558 = bitwise_and(%555, %556) /* ty=Tensor[(4, 10, 2), int32] */;
    (%557, %558)
  };
  %559(%var_4742, %var_4743) /* ty=(Tensor[(4, 10, ?), uint64], Tensor[(4, 10, 2), int32]) */
}

def @func_2881() -> (Tensor[(7, 11, 10), float32], Tensor[(7, 11, 10), float32], Tensor[(4, 3, 16), bool], Tensor[(7, 11, 10), bool], Tensor[(576), float32]) {
  %569 = fn () -> (Tensor[(7, 11, 10), float32], Tensor[(7, 11, 10), float32], Tensor[(4, 3, 16), bool], Tensor[(7, 11, 10), bool], Tensor[(576), float32]) {
    %560 = @func_2183() /* ty=(Tensor[(7, 11, 10), float32],) */;
    %561 = @func_2731() /* ty=(Tensor[(4, 3, 16), bool], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool]) */;
    %562 = cast(meta[relay.Constant][25] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
    %563 = reshape(%562, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %564 = @func_1724(%563) /* ty=(Tensor[(7, 11, 10), bool], Tensor[(720, 1), bool], Tensor[(576), float32], Tensor[(720), bool]) */;
    %565 = %560.0;
    %566 = @func_2045() /* ty=Tensor[(7, 11, 10), float32] */;
    %567 = %561.0;
    %568 = %564.0;
    (%565, %566, %567, %568, meta[relay.Constant][25] /* ty=Tensor[(576), float32] */)
  };
  %569() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(7, 11, 10), float32], Tensor[(4, 3, 16), bool], Tensor[(7, 11, 10), bool], Tensor[(576), float32]) */
}

def @func_2357(%var_2343: Tensor[(840), bool]) -> (Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), uint64], Tensor[(576), int32], Tensor[(4, 7, 16), uint32], Tensor[(448), uint32], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool], Tensor[(7, 11, 10), float32]) {
  %570 = @func_663() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %571 = cast(meta[relay.Constant][26] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
  %572 = reshape(%571, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), int32] */;
  %573 = cast(meta[relay.Constant][27] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %574 = reshape(%573, newshape=[4, 7, 16]) /* ty=Tensor[(4, 7, 16), uint32] */;
  %575 = @func_1374(%574) /* ty=(Tensor[(4, 7, 16), uint32],) */;
  %576 = cast(%var_2343, dtype="bool") /* ty=Tensor[(840), bool] */;
  %577 = cast(%var_2343, dtype="bool") /* ty=Tensor[(840), bool] */;
  %578 = cast(meta[relay.Constant][28] /* ty=Tensor[(720), bool] */, dtype="bool") /* ty=Tensor[(720), bool] */;
  %579 = reshape(%576, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), bool] */;
  %580 = reshape(%577, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), bool] */;
  %581 = reshape(%578, newshape=[2, 360]) /* ty=Tensor[(2, 360), bool] */;
  %582 = @func_909(%579, %580, %581) /* ty=(Tensor[(15, 7, 8), bool], Tensor[(15, 7, 8), bool], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(2, 360), bool], Tensor[(15, 7, 8), float64]) */;
  %583 = %570.0;
  %584 = @func_2299(%572) /* ty=Tensor[(16, 12, 3), uint64] */;
  %585 = %575.0;
  %586 = %582.0;
  %587 = @func_1849() /* ty=Tensor[(7, 11, 10), float32] */;
  (%583, %584, meta[relay.Constant][26] /* ty=Tensor[(576), int32] */, %585, meta[relay.Constant][27] /* ty=Tensor[(448), uint32] */, %586, %var_2343, meta[relay.Constant][28] /* ty=Tensor[(720), bool] */, %587)
}

def @func_2995(%var_2983: Tensor[(13, 12, 11), float32], %var_2990: Tensor[(45), bool], %var_2991: Tensor[(720), bool]) -> (Tensor[(13, 12, 11), float32], Tensor[(7, 11, 10), float32], Tensor[(45), bool], Tensor[(720), bool]) {
  %588 = cast(%var_2983, dtype="float32") /* ty=Tensor[(13, 12, 11), float32] */;
  %589 = cast(%var_2990, dtype="bool") /* ty=Tensor[(45), bool] */;
  %590 = cast(%var_2991, dtype="bool") /* ty=Tensor[(720), bool] */;
  %591 = reshape(%589, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %592 = reshape(%590, newshape=[720, 1]) /* ty=Tensor[(720, 1), bool] */;
  %593 = @func_351(%591, %592) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) */;
  %594 = rsqrt(%588) /* ty=Tensor[(13, 12, 11), float32] */;
  %595 = %593.0;
  (%594, %595, %var_2990, %var_2991)
}

def @main() -> Tensor[(7, 11, 10), float32] {
  %596 = @func_3658() /* ty=(Tensor[(72, 8), float32], Tensor[(7, 11, 10), float32], Tensor[(75), float32]) */;
  %597 = %596.1;
  %598 = cast(%597, dtype="float32") /* ty=Tensor[(7, 11, 10), float32] */;
  log10(%598) /* ty=Tensor[(7, 11, 10), float32] */
}

def @func_3000(%var_2997: Tensor[(13, 12, 11), float32], %var_2998: Tensor[(45), bool], %var_2999: Tensor[(720), bool]) -> (Tensor[(13, 12, 11), float32], Tensor[(7, 11, 10), float32], Tensor[(45), bool], Tensor[(720), bool]) {
  @func_2995(%var_2997, %var_2998, %var_2999) /* ty=(Tensor[(13, 12, 11), float32], Tensor[(7, 11, 10), float32], Tensor[(45), bool], Tensor[(720), bool]) */
}

def @func_288() -> (Tensor[(7, 11, 10), float32],) {
  @func_286() /* ty=(Tensor[(7, 11, 10), float32],) */
}

def @func_3762(%var_3760: Tensor[(1, 45), bool]) -> (Tensor[(75), float32], Tensor[(15, 16, 3), bool], Tensor[(1, 45), bool], Tensor[(4, 180), bool]) {
  @func_3759(%var_3760) /* ty=(Tensor[(75), float32], Tensor[(15, 16, 3), bool], Tensor[(1, 45), bool], Tensor[(4, 180), bool]) */
}

def @func_4275(%var_4273: Tensor[(7, 11, 10), bool]) -> Tensor[(7, 11, 10), bool] {
  @func_4272(%var_4273) /* ty=Tensor[(7, 11, 10), bool] */
}

def @func_4306(%var_4290: Tensor[(8, 14, 2), uint8]) -> (Tensor[(8, 14, 2), uint8], Tensor[(8, 14, 2), float64]) {
  %599 = cast(meta[relay.Constant][29] /* ty=Tensor[(8, 14, 2), uint8] */, dtype="uint8") /* ty=Tensor[(8, 14, 2), uint8] */;
  %600 = shape_of(%var_4290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%var_4290, dtype="uint8") /* ty=Tensor[(8, 14, 2), uint8] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %603 = cast(meta[relay.Constant][29] /* ty=Tensor[(8, 14, 2), uint8] */, dtype="float64") /* ty=Tensor[(8, 14, 2), float64] */;
  %604 = maximum(%601, %602) /* ty=Tensor[(8, 14, 2), uint8] */;
  %605 = erf(%603) /* ty=Tensor[(8, 14, 2), float64] */;
  (%604, %605)
}

def @func_1124(%var_1122: Tensor[(576), float32], %var_1123: Tensor[(720), bool]) -> (Tensor[(3, 5, 5), float32], Tensor[(3, 5, 5), uint16], Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), uint16], Tensor[(45), bool], Tensor[(3, 5, 5), uint16]) {
  @func_1120(%var_1122, %var_1123) /* ty=(Tensor[(3, 5, 5), float32], Tensor[(3, 5, 5), uint16], Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), uint16], Tensor[(45), bool], Tensor[(3, 5, 5), uint16]) */
}

def @func_3143() -> Tensor[(3, 5, 5), float64] {
  @func_3141() /* ty=Tensor[(3, 5, 5), float64] */
}

def @func_3635() -> Tensor[(7, 11, 10), float32] {
  %606 = @func_2907() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %606.0
}

def @func_1539() -> Tensor[(16, 12, 3), int32] {
  %607 = @func_1506() /* ty=(Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(72, 8), float32]) */;
  %607.1
}

def @func_4462() -> (Tensor[(7, 11, 10), float32], Tensor[(576), float32], Tensor[(576), float32]) {
  %608 = cast(meta[relay.Constant][30] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %609 = reshape(%608, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %610 = @func_3613(%609) /* ty=(Tensor[(576), float32], Tensor[(4, 3, 16), bool], Tensor[(75), float32]) */;
  %611 = @func_3635() /* ty=Tensor[(7, 11, 10), float32] */;
  %612 = %610.0;
  (%611, %612, meta[relay.Constant][30] /* ty=Tensor[(576), float32] */)
}

def @func_90(%var_80: Tensor[(15, 1, 3), bool], %var_81: Tensor[(15, 16, 3), bool]) -> Tensor[(15, 16, 3), bool] {
  %613 = cast(%var_80, dtype="bool") /* ty=Tensor[(15, 1, 3), bool] */;
  %614 = cast(%var_81, dtype="bool") /* ty=Tensor[(15, 16, 3), bool] */;
  logical_or(%613, %614) /* ty=Tensor[(15, 16, 3), bool] */
}

def @func_624(%var_621: Tensor[(7, 11, 10), float32], %var_622: Tensor[(45), bool], %var_623: Tensor[(720), bool]) -> (Tensor[(7, 11, 10), float64], Tensor[(7, 11, 10), float32], Tensor[(7, 11, 10), float32], Tensor[(14, 16, 12), float32], Tensor[(1344, 2), float32], Tensor[(72, 8), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720), bool]) {
  %644 = fn (%var_557: Tensor[(7, 11, 10), float32], %var_616: Tensor[(45), bool], %var_617: Tensor[(720), bool]) -> (Tensor[(7, 11, 10), float64], Tensor[(7, 11, 10), float32], Tensor[(7, 11, 10), float32], Tensor[(14, 16, 12), float32], Tensor[(1344, 2), float32], Tensor[(72, 8), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720), bool]) {
    %615 = @func_286() /* ty=(Tensor[(7, 11, 10), float32],) */;
    %616 = %615.0;
    %617 = cast(%var_557, dtype="uint8") /* ty=Tensor[(7, 11, 10), uint8] */;
    %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
    %619 = cast(%616, dtype="uint8") /* ty=Tensor[(7, 11, 10), uint8] */;
    %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %621 = add(%619, %620) /* ty=Tensor[(7, 11, 10), uint8] */;
    %622 = cast(%621, dtype="float32") /* ty=Tensor[(7, 11, 10), float32] */;
    %623 = log2(%622) /* ty=Tensor[(7, 11, 10), float32] */;
    %624 = cast(%623, dtype="float64") /* ty=Tensor[(7, 11, 10), float64] */;
    %625 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
    %626 = cast(%621, dtype="float64") /* ty=Tensor[(7, 11, 10), float64] */;
    %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %628 = @func_286() /* ty=(Tensor[(7, 11, 10), float32],) */;
    %629 = cast(%621, dtype="float32") /* ty=Tensor[(7, 11, 10), float32] */;
    %630 = cast(meta[relay.Constant][31] /* ty=Tensor[(1344, 2), float32] */, dtype="float32") /* ty=Tensor[(1344, 2), float32] */;
    %631 = cast(meta[relay.Constant][32] /* ty=Tensor[(72, 8), float32] */, dtype="float32") /* ty=Tensor[(72, 8), float32] */;
    %632 = reshape(%630, newshape=[14, 16, 12]) /* ty=Tensor[(14, 16, 12), float32] */;
    %633 = reshape(%631, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %634 = @func_513(%632, %633) /* ty=(Tensor[(14, 16, 12), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32]) */;
    %635 = cast(%var_616, dtype="bool") /* ty=Tensor[(45), bool] */;
    %636 = cast(%var_617, dtype="bool") /* ty=Tensor[(720), bool] */;
    %637 = reshape(%635, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), bool] */;
    %638 = reshape(%636, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), bool] */;
    %639 = floor_divide(%626, %627) /* ty=Tensor[(7, 11, 10), float64] */;
    %640 = %628.0;
    %641 = erf(%629) /* ty=Tensor[(7, 11, 10), float32] */;
    %642 = %634.0;
    %643 = @func_90(%637, %638) /* ty=Tensor[(15, 16, 3), bool] */;
    (%639, %640, %641, %642, meta[relay.Constant][31] /* ty=Tensor[(1344, 2), float32] */, meta[relay.Constant][32] /* ty=Tensor[(72, 8), float32] */, %643, %var_616, %var_617)
  };
  %644(%var_621, %var_622, %var_623) /* ty=(Tensor[(7, 11, 10), float64], Tensor[(7, 11, 10), float32], Tensor[(7, 11, 10), float32], Tensor[(14, 16, 12), float32], Tensor[(1344, 2), float32], Tensor[(72, 8), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720), bool]) */
}

def @func_913(%var_910: Tensor[(15, 7, 8), bool], %var_911: Tensor[(15, 7, 8), bool], %var_912: Tensor[(2, 360), bool]) -> (Tensor[(15, 7, 8), bool], Tensor[(15, 7, 8), bool], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(2, 360), bool], Tensor[(15, 7, 8), float64]) {
  %666 = fn (%var_855: Tensor[(15, 7, 8), bool], %var_869: Tensor[(15, 7, 8), bool], %var_892: Tensor[(2, 360), bool]) -> (Tensor[(15, 7, 8), bool], Tensor[(15, 7, 8), bool], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(2, 360), bool], Tensor[(15, 7, 8), float64]) {
    %645 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 1, 8), bool] */, dtype="bool") /* ty=Tensor[(15, 1, 8), bool] */;
    %646 = cast(%var_855, dtype="bool") /* ty=Tensor[(15, 7, 8), bool] */;
    %647 = logical_or(%645, %646) /* ty=Tensor[(15, 7, 8), bool] */;
    %648 = cast(%var_869, dtype="bool") /* ty=Tensor[(15, 7, 8), bool] */;
    %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
    %650 = cast(%647, dtype="bool") /* ty=Tensor[(15, 7, 8), bool] */;
    %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %652 = cast(%647, dtype="bool") /* ty=Tensor[(15, 7, 8), bool] */;
    %653 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 1, 8), bool] */, dtype="bool") /* ty=Tensor[(15, 1, 8), bool] */;
    %654 = cast(meta[relay.Constant][34] /* ty=Tensor[(45), bool] */, dtype="bool") /* ty=Tensor[(45), bool] */;
    %655 = cast(%var_892, dtype="bool") /* ty=Tensor[(2, 360), bool] */;
    %656 = reshape(%654, newshape=[45]) /* ty=Tensor[(45), bool] */;
    %657 = reshape(%655, newshape=[720, 1]) /* ty=Tensor[(720, 1), bool] */;
    %658 = @func_351(%656, %657) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) */;
    %659 = cast(%647, dtype="float32") /* ty=Tensor[(15, 7, 8), float32] */;
    %660 = acosh(%659) /* ty=Tensor[(15, 7, 8), float32] */;
    %661 = cast(%660, dtype="float64") /* ty=Tensor[(15, 7, 8), float64] */;
    %662 = greater(%650, %651) /* ty=Tensor[(15, 7, 8), bool] */;
    %663 = logical_and(%652, %653) /* ty=Tensor[(15, 7, 8), bool] */;
    %664 = %658.1;
    %665 = log(%661) /* ty=Tensor[(15, 7, 8), float64] */;
    (%662, %663, %664, meta[relay.Constant][34] /* ty=Tensor[(45), bool] */, %var_892, %665)
  };
  %666(%var_910, %var_911, %var_912) /* ty=(Tensor[(15, 7, 8), bool], Tensor[(15, 7, 8), bool], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(2, 360), bool], Tensor[(15, 7, 8), float64]) */
}

def @func_447(%var_444: Tensor[(1, 5, 14), float32], %var_445: Tensor[(45), bool], %var_446: Tensor[(720), bool]) -> (Tensor[(14, 5, 14), int16], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(720), bool], Tensor[(14, 5, 14), float64], Tensor[(15, 16, 3), bool]) {
  %685 = fn (%var_403: Tensor[(1, 5, 14), float32], %var_416: Tensor[(45), bool], %var_417: Tensor[(720), bool]) -> (Tensor[(14, 5, 14), int16], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(720), bool], Tensor[(14, 5, 14), float64], Tensor[(15, 16, 3), bool]) {
    %667 = cast(%var_403, dtype="float32") /* ty=Tensor[(1, 5, 14), float32] */;
    %668 = sigmoid(%667) /* ty=Tensor[(1, 5, 14), float32] */;
    %669 = cast(%668, dtype="int16") /* ty=Tensor[(1, 5, 14), int16] */;
    %670 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 5, 14), float32] */, dtype="int16") /* ty=Tensor[(14, 5, 14), int16] */;
    %671 = cast(%var_416, dtype="bool") /* ty=Tensor[(45), bool] */;
    %672 = cast(%var_417, dtype="bool") /* ty=Tensor[(720), bool] */;
    %673 = reshape(%671, newshape=[45]) /* ty=Tensor[(45), bool] */;
    %674 = reshape(%672, newshape=[720, 1]) /* ty=Tensor[(720, 1), bool] */;
    %675 = @func_351(%673, %674) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) */;
    %676 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 5, 14), float32] */, dtype="float64") /* ty=Tensor[(14, 5, 14), float64] */;
    %677 = cast(%var_416, dtype="bool") /* ty=Tensor[(45), bool] */;
    %678 = cast(%var_417, dtype="bool") /* ty=Tensor[(720), bool] */;
    %679 = reshape(%677, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), bool] */;
    %680 = reshape(%678, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), bool] */;
    %681 = bitwise_or(%669, %670) /* ty=Tensor[(14, 5, 14), int16] */;
    %682 = %675.3;
    %683 = sigmoid(%676) /* ty=Tensor[(14, 5, 14), float64] */;
    %684 = @func_90(%679, %680) /* ty=Tensor[(15, 16, 3), bool] */;
    (%681, %682, %var_416, %var_417, %683, %684)
  };
  %685(%var_444, %var_445, %var_446) /* ty=(Tensor[(14, 5, 14), int16], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(720), bool], Tensor[(14, 5, 14), float64], Tensor[(15, 16, 3), bool]) */
}

def @func_3019() -> (Tensor[(7, 11, 10), bool],) {
  @func_3017() /* ty=(Tensor[(7, 11, 10), bool],) */
}

def @func_1727(%var_1725: Tensor[(576), float32]) -> (Tensor[(7, 11, 10), bool], Tensor[(720, 1), bool], Tensor[(576), float32], Tensor[(720), bool]) {
  @func_1724(%var_1725) /* ty=(Tensor[(7, 11, 10), bool], Tensor[(720, 1), bool], Tensor[(576), float32], Tensor[(720), bool]) */
}

def @func_1120(%var_1064: Tensor[(576), float32], %var_1069: Tensor[(720), bool]) -> (Tensor[(3, 5, 5), float32], Tensor[(3, 5, 5), uint16], Tensor[(7, 11, 10), float32], Tensor[(16, 12, 3), int32], Tensor[(576), float32], Tensor[(15, 7, 8), bool], Tensor[(840), bool], Tensor[(720), bool], Tensor[(720, 1), bool], Tensor[(45), bool], Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), uint16], Tensor[(45), bool], Tensor[(3, 5, 5), uint16]) {
  %686 = @func_777() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) */;
  %687 = @func_777() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) */;
  %688 = @func_663() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %689 = cast(%var_1064, dtype="float32") /* ty=Tensor[(576), float32] */;
  %690 = cast(%var_1064, dtype="float32") /* ty=Tensor[(576), float32] */;
  %691 = reshape(%689, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %692 = reshape(%690, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float32] */;
  %693 = @func_195(%691, %692) /* ty=(Tensor[(16, 12, 3), int32],) */;
  %694 = cast(meta[relay.Constant][36] /* ty=Tensor[(840), bool] */, dtype="bool") /* ty=Tensor[(840), bool] */;
  %695 = cast(meta[relay.Constant][36] /* ty=Tensor[(840), bool] */, dtype="bool") /* ty=Tensor[(840), bool] */;
  %696 = cast(%var_1069, dtype="bool") /* ty=Tensor[(720), bool] */;
  %697 = reshape(%694, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), bool] */;
  %698 = reshape(%695, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), bool] */;
  %699 = reshape(%696, newshape=[2, 360]) /* ty=Tensor[(2, 360), bool] */;
  %700 = @func_909(%697, %698, %699) /* ty=(Tensor[(15, 7, 8), bool], Tensor[(15, 7, 8), bool], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(2, 360), bool], Tensor[(15, 7, 8), float64]) */;
  %701 = cast(meta[relay.Constant][37] /* ty=Tensor[(45), bool] */, dtype="bool") /* ty=Tensor[(45), bool] */;
  %702 = cast(%var_1069, dtype="bool") /* ty=Tensor[(720), bool] */;
  %703 = reshape(%701, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %704 = reshape(%702, newshape=[720, 1]) /* ty=Tensor[(720, 1), bool] */;
  %705 = @func_351(%703, %704) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) */;
  %706 = @func_777() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) */;
  %707 = cast(meta[relay.Constant][37] /* ty=Tensor[(45), bool] */, dtype="bool") /* ty=Tensor[(45), bool] */;
  %708 = %705.3;
  %709 = cast(%708, dtype="bool") /* ty=Tensor[(720, 1), bool] */;
  %710 = reshape(%707, newshape=[45]) /* ty=Tensor[(45), bool] */;
  %711 = reshape(%709, newshape=[720, 1]) /* ty=Tensor[(720, 1), bool] */;
  %712 = @func_351(%710, %711) /* ty=(Tensor[(7, 11, 10), float32], Tensor[(15, 16, 3), bool], Tensor[(45), bool], Tensor[(720, 1), bool]) */;
  %713 = %686.1;
  %714 = %687.0;
  %715 = %688.0;
  %716 = %693.0;
  %717 = %700.1;
  %718 = @func_849() /* ty=Tensor[(3, 5, 5), uint16] */;
  %719 = %706.0;
  %720 = %712.2;
  %721 = @func_849() /* ty=Tensor[(3, 5, 5), uint16] */;
  (%713, %714, %715, %716, %var_1064, %717, meta[relay.Constant][36] /* ty=Tensor[(840), bool] */, %var_1069, %708, meta[relay.Constant][37] /* ty=Tensor[(45), bool] */, %718, %719, %720, %721)
}

def @func_850() -> Tensor[(3, 5, 5), uint16] {
  %723 = fn () -> Tensor[(3, 5, 5), uint16] {
    %722 = @func_777() /* ty=(Tensor[(3, 5, 5), uint16], Tensor[(3, 5, 5), float32]) */;
    %722.0
  };
  %723() /* ty=Tensor[(3, 5, 5), uint16] */
}

def @func_1564(%var_1542: Tensor[(7, 6, 11), float32]) -> (Tensor[(3, 5, 5), uint16], Tensor[(7, 6, 11), float32]) {
  %724 = cast(%var_1542, dtype="float32") /* ty=Tensor[(7, 6, 11), float32] */;
  %725 = tan(%724) /* ty=Tensor[(7, 6, 11), float32] */;
  %726 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 6, 11), float32] */, dtype="float64") /* ty=Tensor[(7, 6, 11), float64] */;
  %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%725, dtype="float64") /* ty=Tensor[(7, 6, 11), float64] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %730 = mod(%728, %729) /* ty=Tensor[(7, 6, 11), float64] */;
  %731 = cast(%730, dtype="float32") /* ty=Tensor[(7, 6, 11), float32] */;
  %732 = @func_849() /* ty=Tensor[(3, 5, 5), uint16] */;
  %733 = sqrt(%731) /* ty=Tensor[(7, 6, 11), float32] */;
  (%732, %733)
}

def @func_2299(%var_2292: Tensor[(16, 12, 3), int32]) -> Tensor[(16, 12, 3), uint64] {
  %734 = @func_1759() /* ty=Tensor[(16, 12, 3), int32] */;
  %735 = cast(%var_2292, dtype="uint64") /* ty=Tensor[(16, 12, 3), uint64] */;
  %736 = shape_of(%734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%734, dtype="uint64") /* ty=Tensor[(16, 12, 3), uint64] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%737, %738) /* ty=Tensor[(16, 12, 3), uint64] */
}

def @func_2057(%var_2052: Tensor[(7, 11, 10), float32]) -> (Tensor[(7, 11, 10), int8],) {
  %739 = @func_1849() /* ty=Tensor[(7, 11, 10), float32] */;
  %740 = cast(%var_2052, dtype="int8") /* ty=Tensor[(7, 11, 10), int8] */;
  %741 = shape_of(%739, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%739, dtype="int8") /* ty=Tensor[(7, 11, 10), int8] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %744 = minimum(%742, %743) /* ty=Tensor[(7, 11, 10), int8] */;
  (%744,)
}

def @func_3562() -> (Tensor[(7, 11, 10), float32], Tensor[(2, 2, 10), float64], Tensor[(1, 40), int64]) {
  %745 = @func_286() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %746 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 40), int64] */, dtype="int64") /* ty=Tensor[(1, 40), int64] */;
  %747 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 40), int64] */, dtype="int64") /* ty=Tensor[(1, 40), int64] */;
  %748 = reshape(%746, newshape=[2, 2, 10]) /* ty=Tensor[(2, 2, 10), int64] */;
  %749 = reshape(%747, newshape=[2, 2, 10]) /* ty=Tensor[(2, 2, 10), int64] */;
  %750 = @func_3482(%748, %749) /* ty=(Tensor[(2, 2, 10), float64],) */;
  %751 = %745.0;
  %752 = %750.0;
  (%751, %752, meta[relay.Constant][39] /* ty=Tensor[(1, 40), int64] */)
}

def @func_1376(%var_1375: Tensor[(4, 7, 16), uint32]) -> (Tensor[(4, 7, 16), uint32],) {
  %758 = fn (%var_1367: Tensor[(4, 7, 16), uint32]) -> (Tensor[(4, 7, 16), uint32],) {
    %753 = cast(%var_1367, dtype="uint32") /* ty=Tensor[(4, 7, 16), uint32] */;
    %754 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(4, 7, 16), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %755 = cast(meta[relay.Constant][40] /* ty=Tensor[(4, 7, 16), uint32] */, dtype="uint32") /* ty=Tensor[(4, 7, 16), uint32] */;
    %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %757 = right_shift(%755, %756) /* ty=Tensor[(4, 7, 16), uint32] */;
    (%757,)
  };
  %758(%var_1375) /* ty=(Tensor[(4, 7, 16), uint32],) */
}

def @func_2908() -> (Tensor[(7, 11, 10), float32],) {
  %761 = fn () -> (Tensor[(7, 11, 10), float32],) {
    %759 = @func_2183() /* ty=(Tensor[(7, 11, 10), float32],) */;
    %760 = %759.0;
    (%760,)
  };
  %761() /* ty=(Tensor[(7, 11, 10), float32],) */
}

def @func_4159(%var_4156: Tensor[(7, 11, 10), float32], %var_4157: Tensor[(70), float32], %var_4158: Tensor[(720), bool]) -> (Tensor[(7, 11, 10), int64], Tensor[(14, 5, 14), int16], Tensor[(70), float32], Tensor[(1, 45), bool], Tensor[(720), bool]) {
  @func_4154(%var_4156, %var_4157, %var_4158) /* ty=(Tensor[(7, 11, 10), int64], Tensor[(14, 5, 14), int16], Tensor[(70), float32], Tensor[(1, 45), bool], Tensor[(720), bool]) */
}

def @func_2184() -> (Tensor[(7, 11, 10), float32],) {
  %763 = fn () -> (Tensor[(7, 11, 10), float32],) {
    %762 = @func_1849() /* ty=Tensor[(7, 11, 10), float32] */;
    (%762,)
  };
  %763() /* ty=(Tensor[(7, 11, 10), float32],) */
}

def @func_1849() -> Tensor[(7, 11, 10), float32] {
  %764 = @func_663() /* ty=(Tensor[(7, 11, 10), float32],) */;
  %764.0
}

def @func_198(%var_196: Tensor[(16, 12, 3), float32], %var_197: Tensor[(16, 12, 3), float32]) -> (Tensor[(16, 12, 3), int32],) {
  %772 = fn (%var_179: Tensor[(16, 12, 3), float32], %var_182: Tensor[(16, 12, 3), float32]) -> (Tensor[(16, 12, 3), int32],) {
    %765 = cast(%var_179, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
    %766 = atan(%765) /* ty=Tensor[(16, 12, 3), float32] */;
    %767 = cast(%var_182, dtype="int32") /* ty=Tensor[(16, 12, 3), int32] */;
    %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
    %769 = cast(%766, dtype="int32") /* ty=Tensor[(16, 12, 3), int32] */;
    %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %771 = maximum(%769, %770) /* ty=Tensor[(16, 12, 3), int32] */;
    (%771,)
  };
  %772(%var_196, %var_197) /* ty=(Tensor[(16, 12, 3), int32],) */
}

def @func_4309(%var_4307: Tensor[(8, 14, 2), uint8]) -> (Tensor[(8, 14, 2), uint8], Tensor[(8, 14, 2), float64]) {
  @func_4306(%var_4307) /* ty=(Tensor[(8, 14, 2), uint8], Tensor[(8, 14, 2), float64]) */
}

def @func_2928() -> Tensor[(16, 12, 3), int32] {
  @func_2926() /* ty=Tensor[(16, 12, 3), int32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen22/build/output.py", line 1804, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:44:37] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

