==========mod==========
#[version = "0.0.5"]
def @func_14657() -> (Tensor[(6, 16, 13), float32],) {
  %0 = @func_13439() /* ty=Tensor[(6, 16, 13), float32] */;
  (%0,)
}

def @func_10066() -> (Tensor[(6, 16, 13), float32],) {
  %1 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %2 = %1.0;
  (%2,)
}

def @func_8701(%var_8698: Tensor[(48), float32]) -> (Tensor[(2340), float64], Tensor[(48, 1), float32], Tensor[(128), float64], Tensor[(728), float64], Tensor[(48), float32]) {
  %3 = @func_7666() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %6 = cast(%var_8698, dtype="float32") /* ty=Tensor[(48), float32] */;
  %7 = reshape(%4, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %8 = reshape(%5, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %9 = reshape(%6, newshape=[48, 1]) /* ty=Tensor[(48, 1), float32] */;
  %10 = @func_8681(%7, %8, %9) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(14, 52), float64], Tensor[(48, 1), float32], Tensor[(12, 4, 728), float32]) */;
  %11 = %3.2;
  %12 = %10.4;
  (%11, %12, meta[relay.Constant][0] /* ty=Tensor[(128), float64] */, meta[relay.Constant][1] /* ty=Tensor[(728), float64] */, %var_8698)
}

def @func_3423(%var_3413: Tensor[(7, 7, 12), float64]) -> Tensor[(7, 7, 12), float64] {
  %13 = cast(%var_3413, dtype="float64") /* ty=Tensor[(7, 7, 12), float64] */;
  rsqrt(%13) /* ty=Tensor[(7, 7, 12), float64] */
}

def @func_11680(%var_11666: Tensor[(3, 2, 13), float32]) -> (Tensor[(3, 2, 13), float32],) {
  %14 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 2, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 2, 13), float32] */;
  %15 = shape_of(%var_11666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%var_11666, dtype="float32") /* ty=Tensor[(3, 2, 13), float32] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %18 = mod(%16, %17) /* ty=Tensor[(3, 2, 13), float32] */;
  (%18,)
}

def @func_7942(%var_7904: Tensor[(128), float64], %var_7918: Tensor[(1, 728), float64], %var_7919: Tensor[(1452), int16]) -> (Tensor[(16, 9, 12), uint32], Tensor[(1728), float64], Tensor[(128), float64], Tensor[(15, 9, 12), uint64], Tensor[(1620), uint64], Tensor[(128), float64], Tensor[(1, 728), float64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(2, 9, 1), float32], Tensor[(728), float64], Tensor[(2, 9, 135), int32]) {
  %19 = cast(meta[relay.Constant][3] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %20 = cast(%var_7904, dtype="float64") /* ty=Tensor[(128), float64] */;
  %21 = reshape(%19, newshape=[16, 9, 12]) /* ty=Tensor[(16, 9, 12), float64] */;
  %22 = reshape(%20, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %23 = @func_5640(%21, %22) /* ty=(Tensor[(?, 9, 12), bool], Tensor[(16, 9, 12), uint32], Tensor[(5, 16, 1), uint32], Tensor[(80), uint32], Tensor[(128), float64]) */;
  %24 = cast(meta[relay.Constant][4] /* ty=Tensor[(135), uint64] */, dtype="uint64") /* ty=Tensor[(135), uint64] */;
  %25 = cast(meta[relay.Constant][5] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %26 = reshape(%24, newshape=[15, 9, 1]) /* ty=Tensor[(15, 9, 1), uint64] */;
  %27 = reshape(%25, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), uint64] */;
  %28 = cast(%var_7918, dtype="float64") /* ty=Tensor[(1, 728), float64] */;
  %29 = cast(%var_7919, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %30 = cast(meta[relay.Constant][6] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
  %31 = reshape(%28, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %32 = reshape(%29, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
  %33 = reshape(%30, newshape=[8]) /* ty=Tensor[(8), int8] */;
  %34 = @func_7570(%31, %32, %33) /* ty=(Tensor[(728), uint64], Tensor[(128), float64], Tensor[(1452), int16], Tensor[(8), int8]) */;
  %35 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 9, 1), float64] */, dtype="float64") /* ty=Tensor[(2, 9, 1), float64] */;
  %36 = rsqrt(%35) /* ty=Tensor[(2, 9, 1), float64] */;
  %37 = cast(%36, dtype="float32") /* ty=Tensor[(2, 9, 1), float32] */;
  %38 = @func_7853() /* ty=(Tensor[(728), float64],) */;
  %39 = cast(meta[relay.Constant][4] /* ty=Tensor[(135), uint64] */, dtype="int32") /* ty=Tensor[(135), int32] */;
  %40 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 9, 1), float64] */, dtype="int32") /* ty=Tensor[(2, 9, 1), int32] */;
  %41 = %23.1;
  %42 = @func_301(%26, %27) /* ty=Tensor[(15, 9, 12), uint64] */;
  %43 = %34.1;
  %44 = asin(%37) /* ty=Tensor[(2, 9, 1), float32] */;
  %45 = %38.0;
  %46 = multiply(%39, %40) /* ty=Tensor[(2, 9, 135), int32] */;
  (%41, meta[relay.Constant][3] /* ty=Tensor[(1728), float64] */, %var_7904, %42, meta[relay.Constant][5] /* ty=Tensor[(1620), uint64] */, %43, %var_7918, %var_7919, meta[relay.Constant][6] /* ty=Tensor[(8), int8] */, %44, %45, %46)
}

def @func_9833() -> Tensor[(728), float64] {
  %47 = @func_7853() /* ty=(Tensor[(728), float64],) */;
  %47.0
}

def @func_10714() -> (Tensor[(2340), float64],) {
  %48 = @func_10389() /* ty=Tensor[(2340), float64] */;
  (%48,)
}

def @func_2823(%var_2804: Tensor[(3, 11, 10), uint8]) -> (Tensor[(3, 11, 10), uint8], Tensor[(3, 11, 10), bool]) {
  %49 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 11, 10), uint8] */, dtype="uint8") /* ty=Tensor[(3, 11, 10), uint8] */;
  %50 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(3, 11, 10), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 11, 10), uint8] */, dtype="uint8") /* ty=Tensor[(3, 11, 10), uint8] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %53 = cast(%var_2804, dtype="bool") /* ty=Tensor[(3, 11, 10), bool] */;
  %54 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(3, 11, 10), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 11, 10), uint8] */, dtype="bool") /* ty=Tensor[(3, 11, 10), bool] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %57 = subtract(%51, %52) /* ty=Tensor[(3, 11, 10), uint8] */;
  %58 = not_equal(%55, %56) /* ty=Tensor[(3, 11, 10), bool] */;
  (%57, %58)
}

def @func_8614(%var_8526: Tensor[(48), float32], %var_8539: Tensor[(896), uint32], %var_8568: Tensor[(128), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(12, 4, ?), float64], Tensor[(896), uint32], Tensor[(896), uint32], Tensor[(8, 4, 4), float64], Tensor[(12, 4, 128), bool], Tensor[(2, 10, 15), int8], int8, Tensor[(6, 16, 13), bool], Tensor[(728), float64]) {
  %59 = @func_6482() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %60 = cast(%var_8526, dtype="float32") /* ty=Tensor[(48), float32] */;
  %61 = reshape(%60, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float32] */;
  %62 = @func_5146(%61) /* ty=Tensor[(12, 4, 1), float32] */;
  %63 = cast(%var_8526, dtype="float64") /* ty=Tensor[(48), float64] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="float64") /* ty=Tensor[(12, 4, 1), float64] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %67 = cast(%var_8539, dtype="uint32") /* ty=Tensor[(896), uint32] */;
  %68 = reshape(%67, newshape=[896]) /* ty=Tensor[(896), uint32] */;
  %69 = @func_4459(%68) /* ty=(Tensor[(9, 8, 7), int8], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(8, 1), int8], Tensor[(896), uint32], Tensor[(1, 1452), int16], Tensor[(13, 16, 3), int16]) */;
  %70 = cast(%var_8568, dtype="float64") /* ty=Tensor[(128), float64] */;
  %71 = reshape(%70, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %72 = @func_7588(%71) /* ty=(Tensor[(728), float64], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
  %73 = cast(%62, dtype="bool") /* ty=Tensor[(12, 4, 1), bool] */;
  %74 = cast(%var_8568, dtype="bool") /* ty=Tensor[(128), bool] */;
  %75 = cast(meta[relay.Constant][10] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %76 = reshape(%75, newshape=[]) /* ty=int8 */;
  %77 = @func_8385(%76) /* ty=(Tensor[(2, 10, 15), int8],) */;
  %78 = cast(meta[relay.Constant][11] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %79 = reshape(%78, newshape=[14, 52]) /* ty=Tensor[(14, 52), float64] */;
  %80 = @func_6647(%79) /* ty=(Tensor[(6, 16, 13), bool], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(14, 52), float64]) */;
  %81 = %59.0;
  %82 = floor_mod(%65, %66) /* ty=Tensor[(12, 4, ?), float64] */;
  %83 = %69.4;
  %84 = %72.1;
  %85 = greater_equal(%73, %74) /* ty=Tensor[(12, 4, 128), bool] */;
  %86 = %77.0;
  %87 = %80.0;
  (%81, %82, %83, %var_8539, %84, %85, %86, meta[relay.Constant][10] /* ty=int8 */, %87, meta[relay.Constant][11] /* ty=Tensor[(728), float64] */)
}

def @func_11169() -> (Tensor[(6, 16, 13), float32],) {
  %88 = @func_10143() /* ty=Tensor[(6, 16, 13), float32] */;
  (%88,)
}

def @func_9722() -> (Tensor[(728), float64], Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) {
  %89 = @func_9129() /* ty=(Tensor[(728), float64],) */;
  %90 = @func_7328() /* ty=(Tensor[(728), float64],) */;
  %91 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %92 = %89.0;
  %93 = %90.0;
  %94 = %91.0;
  %95 = @func_9528() /* ty=Tensor[(6, 16, 13), float32] */;
  (%92, %93, %94, %95)
}

def @func_12829() -> Tensor[(6, 16, 13), float32] {
  %96 = @func_10909() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) */;
  %96.0
}

def @func_10143() -> Tensor[(6, 16, 13), float32] {
  %97 = @func_10066() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %97.0
}

def @func_9896(%var_9887: Tensor[(728), float64]) -> Tensor[(728), float64] {
  %98 = @func_9722() /* ty=(Tensor[(728), float64], Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
  %99 = %98.1;
  %100 = cast(%var_9887, dtype="float64") /* ty=Tensor[(728), float64] */;
  %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(1), int32] */;
  %102 = cast(%99, dtype="float64") /* ty=Tensor[(728), float64] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?), float64] */;
  floor_mod(%102, %103) /* ty=Tensor[(728), float64] */
}

def @func_10698(%var_10683: Tensor[(12, 15, 12), float32], %var_10684: Tensor[(12, 15, 12), float32]) -> (Tensor[(12, 15, 12), float32], Tensor[(8, 624), uint32], Tensor[(104), int8]) {
  %104 = cast(%var_10684, dtype="float32") /* ty=Tensor[(12, 15, 12), float32] */;
  %105 = shape_of(%var_10683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%var_10683, dtype="float32") /* ty=Tensor[(12, 15, 12), float32] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %108 = cast(meta[relay.Constant][12] /* ty=Tensor[(104), int8] */, dtype="int8") /* ty=Tensor[(104), int8] */;
  %109 = reshape(%108, newshape=[104]) /* ty=Tensor[(104), int8] */;
  %110 = @func_7500(%109) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(8, 78), int16], Tensor[(104), int8], Tensor[(8, 624), uint32]) */;
  %111 = floor_mod(%106, %107) /* ty=Tensor[(12, 15, 12), float32] */;
  %112 = %110.4;
  (%111, %112, meta[relay.Constant][12] /* ty=Tensor[(104), int8] */)
}

def @func_2608(%var_2605: Tensor[(16, 3, 3), float64]) -> Tensor[(16, 3, 3), float64] {
  %113 = cast(%var_2605, dtype="float64") /* ty=Tensor[(16, 3, 3), float64] */;
  cos(%113) /* ty=Tensor[(16, 3, 3), float64] */
}

def @func_12877() -> (Tensor[(728), float64], Tensor[(10, 16, 4), float32], Tensor[(20, 32), float32]) {
  %114 = @func_11621() /* ty=(Tensor[(728), float64],) */;
  %115 = cast(meta[relay.Constant][13] /* ty=Tensor[(20, 32), float32] */, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
  %116 = reshape(%115, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float32] */;
  %117 = @func_3977(%116) /* ty=(Tensor[(10, 16, 4), float32], Tensor[(15, 14, 3), float32], Tensor[(630, 1), float32]) */;
  %118 = %114.0;
  %119 = %117.0;
  (%118, %119, meta[relay.Constant][13] /* ty=Tensor[(20, 32), float32] */)
}

def @func_8213() -> Tensor[(12, 13, 15), float64] {
  %120 = @func_7666() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) */;
  %120.1
}

def @func_7236(%var_7216: Tensor[(630), float32]) -> (Tensor[(6, 16, 13), float32], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(6, 16, 13), float32]) {
  %121 = @func_6864() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %122 = cast(%var_7216, dtype="float32") /* ty=Tensor[(630), float32] */;
  %123 = cast(%var_7216, dtype="float32") /* ty=Tensor[(630), float32] */;
  %124 = reshape(%122, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), float32] */;
  %125 = reshape(%123, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), float32] */;
  %126 = @func_3337(%124, %125) /* ty=(Tensor[(14, 9, 5), float32],) */;
  %127 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %128 = %121.0;
  %129 = %126.0;
  %130 = %127.0;
  (%128, %129, %var_7216, %130)
}

def @func_13615(%var_13565: Tensor[(144), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(16, 3, 3), float64], Tensor[(144), float64], Tensor[(20, 32), float32], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(728), float64], Tensor[(728), float64], Tensor[(728), uint64], Tensor[(1452), int16], Tensor[(2, 4), int8]) {
  %131 = @func_11000() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %132 = cast(%var_13565, dtype="float64") /* ty=Tensor[(144), float64] */;
  %133 = reshape(%132, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), float64] */;
  %134 = cast(meta[relay.Constant][14] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %135 = cast(meta[relay.Constant][15] /* ty=Tensor[(896), uint32] */, dtype="uint32") /* ty=Tensor[(896), uint32] */;
  %136 = reshape(%134, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %137 = reshape(%135, newshape=[896]) /* ty=Tensor[(896), uint32] */;
  %138 = @func_9064(%136, %137) /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), bool], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(128), float64], Tensor[(5, 66), uint8], Tensor[(20, 32), float32], Tensor[(2340), float64]) */;
  %139 = cast(meta[relay.Constant][14] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %140 = reshape(%139, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %141 = @func_11770(%140) /* ty=(Tensor[(728), float64], Tensor[(20, 32), float32], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(80), uint32], Tensor[(128), float64]) */;
  %142 = cast(meta[relay.Constant][16] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %143 = reshape(%142, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %144 = @func_10584(%143) /* ty=(Tensor[(728), float64], Tensor[(8, 7, 13), float64]) */;
  %145 = cast(meta[relay.Constant][16] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %146 = cast(meta[relay.Constant][17] /* ty=Tensor[(1452), int16] */, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %147 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 4), int8] */, dtype="int8") /* ty=Tensor[(2, 4), int8] */;
  %148 = reshape(%145, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %149 = reshape(%146, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
  %150 = reshape(%147, newshape=[8]) /* ty=Tensor[(8), int8] */;
  %151 = @func_7570(%148, %149, %150) /* ty=(Tensor[(728), uint64], Tensor[(128), float64], Tensor[(1452), int16], Tensor[(8), int8]) */;
  %152 = %131.0;
  %153 = @func_2608(%133) /* ty=Tensor[(16, 3, 3), float64] */;
  %154 = %138.7;
  %155 = %141.6;
  %156 = %144.0;
  %157 = %151.0;
  (%152, %153, %var_13565, %154, meta[relay.Constant][14] /* ty=Tensor[(48), float32] */, meta[relay.Constant][15] /* ty=Tensor[(896), uint32] */, %155, %156, meta[relay.Constant][16] /* ty=Tensor[(728), float64] */, %157, meta[relay.Constant][17] /* ty=Tensor[(1452), int16] */, meta[relay.Constant][18] /* ty=Tensor[(2, 4), int8] */)
}

def @func_12299() -> (Tensor[(1, 324), uint32],) {
  %158 = @func_9350() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(1, 324), uint32], Tensor[(728), float64], Tensor[(728), float64]) */;
  %159 = %158.2;
  (%159,)
}

def @func_11000() -> (Tensor[(6, 16, 13), float32],) {
  %160 = @func_6864() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %161 = %160.0;
  (%161,)
}

def @func_3977(%var_3964: Tensor[(10, 16, 4), float32]) -> (Tensor[(10, 16, 4), float32], Tensor[(15, 14, 3), float32], Tensor[(630, 1), float32]) {
  %162 = cast(%var_3964, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
  %163 = cast(meta[relay.Constant][19] /* ty=Tensor[(630, 1), float32] */, dtype="float32") /* ty=Tensor[(630, 1), float32] */;
  %164 = reshape(%163, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), float32] */;
  %165 = sin(%162) /* ty=Tensor[(10, 16, 4), float32] */;
  %166 = @func_1855(%164) /* ty=Tensor[(15, 14, 3), float32] */;
  (%165, %166, meta[relay.Constant][19] /* ty=Tensor[(630, 1), float32] */)
}

def @func_5146(%var_5137: Tensor[(12, 4, 1), float32]) -> Tensor[(12, 4, 1), float32] {
  %167 = cast(-9.72282f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %168 = cast(%var_5137, dtype="float32") /* ty=Tensor[(12, 4, 1), float32] */;
  floor_divide(%167, %168) /* ty=Tensor[(12, 4, 1), float32] */
}

def @func_6543() -> Tensor[(6, 16, 13), float32] {
  %169 = @func_6482() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %169.0
}

def @func_10494() -> (Tensor[(728), float64],) {
  %170 = @func_8513() /* ty=(Tensor[(728), float64],) */;
  %171 = %170.0;
  (%171,)
}

def @func_6941() -> (Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) {
  %172 = cast(meta[relay.Constant][20] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %173 = reshape(%172, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float64] */;
  %174 = @func_6543() /* ty=Tensor[(6, 16, 13), float32] */;
  %175 = @func_1915(%173) /* ty=Tensor[(8, 7, 13), float64] */;
  (%174, %175, meta[relay.Constant][20] /* ty=Tensor[(728), float64] */)
}

def @func_9388() -> (Tensor[(6, 16, 13), float32],) {
  %176 = @func_9289() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %177 = %176.0;
  (%177,)
}

def @func_10319() -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), bool]) {
  %178 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %179 = %178.0;
  %180 = cast(%179, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %181 = reshape(%180, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), float32] */;
  %182 = @func_9965(%181) /* ty=(Tensor[(6, 16, 13), bool],) */;
  %183 = %182.0;
  (%179, %183)
}

def @func_10584(%var_10570: Tensor[(728), float64]) -> (Tensor[(728), float64], Tensor[(8, 7, 13), float64]) {
  %184 = @func_9350() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(1, 324), uint32], Tensor[(728), float64], Tensor[(728), float64]) */;
  %185 = %184.3;
  %186 = cast(%var_10570, dtype="float64") /* ty=Tensor[(728), float64] */;
  %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(1), int32] */;
  %188 = cast(%185, dtype="float64") /* ty=Tensor[(728), float64] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?), float64] */;
  %190 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %191 = power(%188, %189) /* ty=Tensor[(728), float64] */;
  %192 = %190.1;
  (%191, %192)
}

def @func_14560(%var_14529: int64, %var_14530: Tensor[(13, 1, 15), int64]) -> (Tensor[(13, 1, 15), int64], Tensor[(896), bool], Tensor[(630), float32]) {
  %193 = cast(%var_14529, dtype="int64") /* ty=int64 */;
  %194 = cast(%var_14530, dtype="int64") /* ty=Tensor[(13, 1, 15), int64] */;
  %195 = @func_10977() /* ty=(Tensor[(630), float32], Tensor[(15, 14, 3), float32]) */;
  %196 = maximum(%193, %194) /* ty=Tensor[(13, 1, 15), int64] */;
  %197 = @func_13281() /* ty=Tensor[(896), bool] */;
  %198 = %195.0;
  (%196, %197, %198)
}

def @func_11742() -> Tensor[(6, 16, 13), float32] {
  %199 = @func_11279() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
  %199.1
}

def @func_9666(%var_9589: Tensor[(4, 12), float32], %var_9590: Tensor[(224, 4), uint32], %var_9629: Tensor[(330), uint8], %var_9630: Tensor[(10, 64), float32], %var_9646: Tensor[(16, 8), float64], %var_9647: Tensor[(728), float64], %var_9648: Tensor[(1452), int16]) -> (Tensor[(12, 1, 2), float32], Tensor[(12, 1, 2), bool], Tensor[(2340), float64], Tensor[(4, 12), float32], Tensor[(2340), float64], Tensor[(6, 16, 13), float32], Tensor[(224, 4), bool], Tensor[(630, 1), float32], Tensor[(330), uint8], Tensor[(10, 64), float32], Tensor[(2, 9, 135), int32], Tensor[(16, 8), float64], Tensor[(728), float64], Tensor[(1452), int16]) {
  %200 = cast(-8.10665f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %201 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 1, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 1, 2), float32] */;
  %202 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 1, 2), float32] */, dtype="bool") /* ty=Tensor[(12, 1, 2), bool] */;
  %203 = cast(-8.10665f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %204 = cast(%var_9589, dtype="float32") /* ty=Tensor[(4, 12), float32] */;
  %205 = cast(%var_9590, dtype="uint32") /* ty=Tensor[(224, 4), uint32] */;
  %206 = reshape(%204, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %207 = reshape(%205, newshape=[896]) /* ty=Tensor[(896), uint32] */;
  %208 = @func_9064(%206, %207) /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), bool], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(128), float64], Tensor[(5, 66), uint8], Tensor[(20, 32), float32], Tensor[(2340), float64]) */;
  %209 = @func_7666() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) */;
  %210 = @func_9350() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(1, 324), uint32], Tensor[(728), float64], Tensor[(728), float64]) */;
  %211 = cast(%var_9590, dtype="bool") /* ty=Tensor[(224, 4), bool] */;
  %212 = cast(-8.10665f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %213 = %210.0;
  %214 = cast(%213, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %215 = cast(%var_9629, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %216 = cast(%var_9630, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
  %217 = reshape(%214, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), float32] */;
  %218 = reshape(%215, newshape=[330]) /* ty=Tensor[(330), uint8] */;
  %219 = reshape(%216, newshape=[20, 32]) /* ty=Tensor[(20, 32), float32] */;
  %220 = @func_6797(%217, %218, %219) /* ty=(Tensor[(6, 16, 13), float64], Tensor[(6, 16, 13), float32], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(3, 11, 10), uint8], Tensor[(330), uint8], Tensor[(630, 1), float32], Tensor[(20, 32), bool]) */;
  %221 = cast(%var_9646, dtype="float64") /* ty=Tensor[(16, 8), float64] */;
  %222 = cast(%var_9647, dtype="float64") /* ty=Tensor[(728), float64] */;
  %223 = cast(%var_9648, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %224 = reshape(%221, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %225 = reshape(%222, newshape=[1, 728]) /* ty=Tensor[(1, 728), float64] */;
  %226 = reshape(%223, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
  %227 = @func_7942(%224, %225, %226) /* ty=(Tensor[(16, 9, 12), uint32], Tensor[(1728), float64], Tensor[(128), float64], Tensor[(15, 9, 12), uint64], Tensor[(1620), uint64], Tensor[(128), float64], Tensor[(1, 728), float64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(2, 9, 1), float32], Tensor[(728), float64], Tensor[(2, 9, 135), int32]) */;
  %228 = divide(%200, %201) /* ty=Tensor[(12, 1, 2), float32] */;
  %229 = less(%202, %203) /* ty=Tensor[(12, 1, 2), bool] */;
  %230 = %208.8;
  %231 = %209.2;
  %232 = logical_and(%211, %212) /* ty=Tensor[(224, 4), bool] */;
  %233 = %220.6;
  %234 = %227.11;
  (%228, %229, %230, %var_9589, %231, %213, %232, %233, %var_9629, %var_9630, %234, %var_9646, %var_9647, %var_9648)
}

def @func_13085() -> (Tensor[(896), uint8],) {
  %235 = @func_10909() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) */;
  %236 = %235.2;
  %237 = cast(meta[relay.Constant][22] /* ty=Tensor[(896), uint32] */, dtype="uint8") /* ty=Tensor[(896), uint8] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(1), int32] */;
  %239 = cast(%236, dtype="uint8") /* ty=Tensor[(896), uint8] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %241 = bitwise_xor(%239, %240) /* ty=Tensor[(896), uint8] */;
  (%241,)
}

def @func_14438(%var_14410: Tensor[(108), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(2340), float64], Tensor[(3, 3, 12), float64], Tensor[(108), float64]) {
  %242 = @func_6482() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %243 = @func_11359() /* ty=(Tensor[(2340), float64], Tensor[(6, 16, 13), float32]) */;
  %244 = cast(%var_14410, dtype="float64") /* ty=Tensor[(108), float64] */;
  %245 = reshape(%244, newshape=[3, 3, 12]) /* ty=Tensor[(3, 3, 12), float64] */;
  %246 = @func_3549(%245) /* ty=(Tensor[(3, 3, 12), float64],) */;
  %247 = %242.0;
  %248 = %243.0;
  %249 = %246.0;
  (%247, %248, %249, %var_14410)
}

def @func_3337(%var_3323: Tensor[(14, 9, 5), float32], %var_3324: Tensor[(14, 9, 5), float32]) -> (Tensor[(14, 9, 5), float32],) {
  %250 = cast(%var_3324, dtype="float32") /* ty=Tensor[(14, 9, 5), float32] */;
  %251 = shape_of(%var_3323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(%var_3323, dtype="float32") /* ty=Tensor[(14, 9, 5), float32] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %254 = power(%252, %253) /* ty=Tensor[(14, 9, 5), float32] */;
  (%254,)
}

def @func_9255(%var_9236: Tensor[(104), int8]) -> (Tensor[(728), float64], Tensor[(728), float64], Tensor[(8), int8], Tensor[(1452), int16], Tensor[(104), int8], Tensor[(1620), uint64]) {
  %255 = @func_8513() /* ty=(Tensor[(728), float64],) */;
  %256 = @func_7328() /* ty=(Tensor[(728), float64],) */;
  %257 = cast(meta[relay.Constant][23] /* ty=Tensor[(1452), int16] */, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %258 = cast(%var_9236, dtype="int8") /* ty=Tensor[(104), int8] */;
  %259 = cast(meta[relay.Constant][24] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %260 = reshape(%257, newshape=[1452, 1]) /* ty=Tensor[(1452, 1), int16] */;
  %261 = reshape(%258, newshape=[104]) /* ty=Tensor[(104), int8] */;
  %262 = reshape(%259, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %263 = @func_7075(%260, %261, %262) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(2, 4, 13), bool], Tensor[(1452, 1), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64], Tensor[(6, 16, 13), float32]) */;
  %264 = %255.0;
  %265 = %256.0;
  %266 = %263.4;
  (%264, %265, %266, meta[relay.Constant][23] /* ty=Tensor[(1452), int16] */, %var_9236, meta[relay.Constant][24] /* ty=Tensor[(1620), uint64] */)
}

def @func_15218(%var_15193: Tensor[(704), float64], %var_15213: Tensor[(630), float32]) -> (Tensor[(6, 16, 13), bool], Tensor[(16, 11, 4), float64], Tensor[(704), float64], Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(14, 9, 5), float32], Tensor[(630), float32]) {
  %267 = @func_12890() /* ty=(Tensor[(6, 16, 13), bool],) */;
  %268 = cast(%var_15193, dtype="float64") /* ty=Tensor[(704), float64] */;
  %269 = reshape(%268, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), float64] */;
  %270 = @func_7328() /* ty=(Tensor[(728), float64],) */;
  %271 = @func_14383() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
  %272 = cast(%var_15213, dtype="float32") /* ty=Tensor[(630), float32] */;
  %273 = reshape(%272, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %274 = @func_7236(%273) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(6, 16, 13), float32]) */;
  %275 = %267.0;
  %276 = @func_5728(%269) /* ty=Tensor[(16, 11, 4), float64] */;
  %277 = %270.0;
  %278 = %271.1;
  %279 = %274.1;
  (%275, %276, %var_15193, %277, %278, %279, %var_15213)
}

def @func_14383() -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) {
  %280 = @func_11376() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %281 = @func_11279() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
  %282 = %280.0;
  %283 = %281.0;
  (%282, %283)
}

def @func_15776() -> (Tensor[(128), float64], Tensor[(8, 7, 13), float64]) {
  %284 = @func_12348() /* ty=(Tensor[(128), float64],) */;
  %285 = %284.0;
  %286 = @func_10925() /* ty=Tensor[(8, 7, 13), float64] */;
  (%285, %286)
}

def @func_8821() -> Tensor[(728), float64] {
  %287 = @func_8513() /* ty=(Tensor[(728), float64],) */;
  %288 = %287.0;
  %289 = cast(%288, dtype="float64") /* ty=Tensor[(728), float64] */;
  asinh(%289) /* ty=Tensor[(728), float64] */
}

def @func_2133(%var_2064: Tensor[(9, 6, 6), uint32], %var_2065: Tensor[(9, 6, 6), uint32], %var_2096: Tensor[(728), float64], %var_2114: Tensor[(9, 6, 6), float32]) -> (Tensor[(8, 7, 13), float64], Tensor[(728), float64], Tensor[(8, 7, 13), float64], Tensor[(9, 6, 6), float64], Tensor[(9, 6, 6), float32]) {
  %290 = cast(%var_2096, dtype="float64") /* ty=Tensor[(728), float64] */;
  %291 = reshape(%290, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float64] */;
  %292 = @func_1915(%291) /* ty=Tensor[(8, 7, 13), float64] */;
  %293 = cast(%292, dtype="float64") /* ty=Tensor[(8, 7, 13), float64] */;
  %294 = reshape(%293, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float64] */;
  %295 = cast(%var_2065, dtype="uint32") /* ty=Tensor[(9, 6, 6), uint32] */;
  %296 = shape_of(%var_2064, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%var_2064, dtype="uint32") /* ty=Tensor[(9, 6, 6), uint32] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %299 = logical_xor(%297, %298) /* ty=Tensor[(9, 6, 6), uint32] */;
  %300 = cast(%299, dtype="float32") /* ty=Tensor[(9, 6, 6), float32] */;
  %301 = shape_of(%var_2065, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%var_2065, dtype="float32") /* ty=Tensor[(9, 6, 6), float32] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %304 = divide(%302, %303) /* ty=Tensor[(9, 6, 6), float32] */;
  %305 = cast(%var_2114, dtype="float64") /* ty=Tensor[(9, 6, 6), float64] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%304, dtype="float64") /* ty=Tensor[(9, 6, 6), float64] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %309 = cast(%var_2064, dtype="float32") /* ty=Tensor[(9, 6, 6), float32] */;
  %310 = @func_1915(%294) /* ty=Tensor[(8, 7, 13), float64] */;
  %311 = mod(%307, %308) /* ty=Tensor[(9, 6, 6), float64] */;
  %312 = acosh(%309) /* ty=Tensor[(9, 6, 6), float32] */;
  (%292, %var_2096, %310, %311, %312)
}

def @func_7853() -> (Tensor[(728), float64],) {
  %313 = @func_7373() /* ty=(Tensor[(728), float64],) */;
  %314 = %313.0;
  (%314,)
}

def @func_1855(%var_1834: Tensor[(15, 14, 3), float32]) -> Tensor[(15, 14, 3), float32] {
  %315 = cast(%var_1834, dtype="float32") /* ty=Tensor[(15, 14, 3), float32] */;
  sqrt(%315) /* ty=Tensor[(15, 14, 3), float32] */
}

def @func_10828(%var_10799: Tensor[(416), uint64], %var_10800: Tensor[(1452), int16], %var_10815: Tensor[(1728), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(16, 3, 3), float64], Tensor[(144), float64], Tensor[(1620), uint64], Tensor[(416), uint64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(80), uint32], Tensor[(1728), float64], Tensor[(128), float64]) {
  %316 = @func_9289() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %317 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %318 = cast(meta[relay.Constant][25] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %319 = reshape(%318, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), float64] */;
  %320 = cast(%var_10799, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %321 = cast(%var_10799, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %322 = cast(%var_10800, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %323 = cast(meta[relay.Constant][26] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
  %324 = reshape(%320, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %325 = reshape(%321, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %326 = reshape(%322, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
  %327 = reshape(%323, newshape=[8]) /* ty=Tensor[(8), int8] */;
  %328 = @func_3942(%324, %325, %326, %327) /* ty=(Tensor[(16, 13, 2), uint64], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(2, 4, 13), bool], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64]) */;
  %329 = cast(%var_10815, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %330 = cast(meta[relay.Constant][27] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %331 = reshape(%329, newshape=[16, 9, 12]) /* ty=Tensor[(16, 9, 12), float64] */;
  %332 = reshape(%330, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %333 = @func_5640(%331, %332) /* ty=(Tensor[(?, 9, 12), bool], Tensor[(16, 9, 12), uint32], Tensor[(5, 16, 1), uint32], Tensor[(80), uint32], Tensor[(128), float64]) */;
  %334 = %316.0;
  %335 = %317.0;
  %336 = @func_2608(%319) /* ty=Tensor[(16, 3, 3), float64] */;
  %337 = %328.7;
  %338 = %333.3;
  (%334, %335, %336, meta[relay.Constant][25] /* ty=Tensor[(144), float64] */, %337, %var_10799, %var_10800, meta[relay.Constant][26] /* ty=Tensor[(8), int8] */, %338, %var_10815, meta[relay.Constant][27] /* ty=Tensor[(128), float64] */)
}

def @func_6482() -> (Tensor[(6, 16, 13), float32],) {
  %339 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %340 = %339.0;
  (%340,)
}

def @func_12593() -> Tensor[(728), float64] {
  %341 = @func_9129() /* ty=(Tensor[(728), float64],) */;
  %341.0
}

def @func_13819(%var_13792: Tensor[(1452, 1), int16], %var_13793: Tensor[(8), int8], %var_13801: Tensor[(10, 63), float32]) -> (Tensor[(1, 324), uint32], Tensor[(1452), int16], Tensor[(728), float64], Tensor[(416), uint64], Tensor[(1452, 1), int16], Tensor[(8), int8], Tensor[(104), bool], Tensor[(15, 14, 3), float32], Tensor[(10, 63), float32], Tensor[(728), float64]) {
  %342 = @func_12299() /* ty=(Tensor[(1, 324), uint32],) */;
  %343 = cast(meta[relay.Constant][28] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %344 = cast(meta[relay.Constant][29] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %345 = cast(%var_13792, dtype="int16") /* ty=Tensor[(1452, 1), int16] */;
  %346 = cast(%var_13793, dtype="int8") /* ty=Tensor[(8), int8] */;
  %347 = cast(meta[relay.Constant][30] /* ty=Tensor[(104), bool] */, dtype="bool") /* ty=Tensor[(104), bool] */;
  %348 = reshape(%343, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %349 = reshape(%344, newshape=[2, 208]) /* ty=Tensor[(2, 208), uint64] */;
  %350 = reshape(%345, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
  %351 = reshape(%346, newshape=[8]) /* ty=Tensor[(8), int8] */;
  %352 = reshape(%347, newshape=[2, 4, 13]) /* ty=Tensor[(2, 4, 13), bool] */;
  %353 = @func_7012(%348, %349, %350, %351, %352) /* ty=(Tensor[(728), float32], Tensor[(2, 208), uint64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(2, 4, 13), bool]) */;
  %354 = cast(%var_13801, dtype="float32") /* ty=Tensor[(10, 63), float32] */;
  %355 = reshape(%354, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), float32] */;
  %356 = %342.0;
  %357 = %353.2;
  %358 = @func_1855(%355) /* ty=Tensor[(15, 14, 3), float32] */;
  %359 = @func_12085() /* ty=Tensor[(728), float64] */;
  (%356, %357, meta[relay.Constant][28] /* ty=Tensor[(728), float64] */, meta[relay.Constant][29] /* ty=Tensor[(416), uint64] */, %var_13792, %var_13793, meta[relay.Constant][30] /* ty=Tensor[(104), bool] */, %358, %var_13801, %359)
}

def @func_15473() -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) {
  %360 = @func_8792() /* ty=Tensor[(6, 16, 13), float32] */;
  %361 = @func_13475() /* ty=Tensor[(6, 16, 13), float32] */;
  (%360, %361)
}

def @func_11376() -> (Tensor[(6, 16, 13), float32],) {
  %362 = @func_10864() /* ty=Tensor[(6, 16, 13), float32] */;
  (%362,)
}

def @func_14159() -> Tensor[(6, 16, 13), float32] {
  @func_10864() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_6647(%var_6644: Tensor[(14, 52), float64]) -> (Tensor[(6, 16, 13), bool], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(14, 52), float64]) {
  %363 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %364 = %363.0;
  %365 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 16, 13), float32] */, dtype="uint32") /* ty=Tensor[(6, 16, 13), uint32] */;
  %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%364, dtype="uint32") /* ty=Tensor[(6, 16, 13), uint32] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %369 = add(%367, %368) /* ty=Tensor[(6, 16, 13), uint32] */;
  %370 = cast(%364, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
  %371 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%369, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %374 = cast(%369, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %375 = asinh(%374) /* ty=Tensor[(6, 16, 13), float32] */;
  %376 = cast(%375, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %377 = cast(%var_6644, dtype="float64") /* ty=Tensor[(14, 52), float64] */;
  %378 = reshape(%377, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float64] */;
  %379 = logical_and(%372, %373) /* ty=Tensor[(6, 16, 13), bool] */;
  %380 = acosh(%376) /* ty=Tensor[(6, 16, 13), float32] */;
  %381 = @func_1915(%378) /* ty=Tensor[(8, 7, 13), float64] */;
  (%379, %380, %381, %var_6644)
}

def @func_2236(%var_2225: Tensor[(8, 4, 4), float64]) -> (Tensor[(8, 4, 4), float64],) {
  %382 = cast(%var_2225, dtype="float64") /* ty=Tensor[(8, 4, 4), float64] */;
  %383 = exp(%382) /* ty=Tensor[(8, 4, 4), float64] */;
  (%383,)
}

def @func_10647() -> Tensor[(728), float64] {
  %384 = @func_7853() /* ty=(Tensor[(728), float64],) */;
  %384.0
}

def @func_4515(%var_4510: Tensor[(15, 9, 4), float64]) -> (Tensor[(15, 9, 4), float64],) {
  %385 = cast(%var_4510, dtype="float64") /* ty=Tensor[(15, 9, 4), float64] */;
  %386 = cos(%385) /* ty=Tensor[(15, 9, 4), float64] */;
  (%386,)
}

def @func_11499(%var_11465: Tensor[(330), uint8]) -> (Tensor[(6, 16, 13), float32], Tensor[(3, 11, 10), bool], Tensor[(330), uint8]) {
  %387 = @func_6864() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %388 = cast(%var_11465, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %389 = reshape(%388, newshape=[3, 11, 10]) /* ty=Tensor[(3, 11, 10), uint8] */;
  %390 = @func_2823(%389) /* ty=(Tensor[(3, 11, 10), uint8], Tensor[(3, 11, 10), bool]) */;
  %391 = %387.0;
  %392 = %390.1;
  (%391, %392, %var_11465)
}

def @func_9289() -> (Tensor[(6, 16, 13), float32],) {
  %393 = @func_8792() /* ty=Tensor[(6, 16, 13), float32] */;
  (%393,)
}

def @func_12972(%var_12963: Tensor[(8, 4, 4), float64]) -> (Tensor[(8, 4, 4), uint16],) {
  %394 = @func_10083() /* ty=(Tensor[(4, 2, 9), bool], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
  %395 = %394.1;
  %396 = cast(%var_12963, dtype="uint16") /* ty=Tensor[(8, 4, 4), uint16] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%395, dtype="uint16") /* ty=Tensor[(8, 4, 4), uint16] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %400 = left_shift(%398, %399) /* ty=Tensor[(8, 4, 4), uint16] */;
  (%400,)
}

def @func_15067(%var_15035: Tensor[(1, 11, 4), float64]) -> (Tensor[(728), float64], Tensor[(?, 11, 4), uint64]) {
  %401 = @func_12323() /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), float32]) */;
  %402 = cast(%var_15035, dtype="float64") /* ty=Tensor[(1, 11, 4), float64] */;
  %403 = tan(%402) /* ty=Tensor[(1, 11, 4), float64] */;
  %404 = cast(%var_15035, dtype="uint64") /* ty=Tensor[(1, 11, 4), uint64] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%403, dtype="uint64") /* ty=Tensor[(1, 11, 4), uint64] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %408 = %401.0;
  %409 = bitwise_and(%406, %407) /* ty=Tensor[(?, 11, 4), uint64] */;
  (%408, %409)
}

def @func_11621() -> (Tensor[(728), float64],) {
  %410 = @func_8513() /* ty=(Tensor[(728), float64],) */;
  %411 = %410.0;
  (%411,)
}

def @func_15704() -> (Tensor[(728), float64], Tensor[(6, 16, 13), float32]) {
  %412 = @func_7373() /* ty=(Tensor[(728), float64],) */;
  %413 = %412.0;
  %414 = @func_9528() /* ty=Tensor[(6, 16, 13), float32] */;
  (%413, %414)
}

def @func_8735() -> Tensor[(728), float64] {
  %415 = @func_7328() /* ty=(Tensor[(728), float64],) */;
  %415.0
}

def @func_10083() -> (Tensor[(4, 2, 9), bool], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) {
  %416 = @func_7892() /* ty=(Tensor[(2340), float64], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(4, 2, 9), bool], int32) */;
  %417 = cast(meta[relay.Constant][32] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %418 = reshape(%417, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), float64] */;
  %419 = @func_2236(%418) /* ty=(Tensor[(8, 4, 4), float64],) */;
  %420 = %416.3;
  %421 = %419.0;
  (%420, %421, meta[relay.Constant][32] /* ty=Tensor[(128), float64] */)
}

def @func_13456() -> Tensor[(10, 16, 4), float32] {
  %422 = @func_12877() /* ty=(Tensor[(728), float64], Tensor[(10, 16, 4), float32], Tensor[(20, 32), float32]) */;
  %422.1
}

def @func_12767() -> (Tensor[(6, 16, 13), float32], Tensor[(128), float64], Tensor[(128), float64], Tensor[(728), float64], Tensor[(1, 48), float32]) {
  %423 = @func_11982() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(1, 324), uint32], Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
  %424 = %423.2;
  %425 = cast(%424, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %426 = cast(meta[relay.Constant][33] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %427 = cast(meta[relay.Constant][34] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %428 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 48), float32] */, dtype="float32") /* ty=Tensor[(1, 48), float32] */;
  %429 = reshape(%426, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %430 = reshape(%427, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %431 = reshape(%428, newshape=[48, 1]) /* ty=Tensor[(48, 1), float32] */;
  %432 = @func_8681(%429, %430, %431) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(14, 52), float64], Tensor[(48, 1), float32], Tensor[(12, 4, 728), float32]) */;
  %433 = atanh(%425) /* ty=Tensor[(6, 16, 13), float32] */;
  %434 = %432.2;
  (%433, %434, meta[relay.Constant][33] /* ty=Tensor[(128), float64] */, meta[relay.Constant][34] /* ty=Tensor[(728), float64] */, meta[relay.Constant][35] /* ty=Tensor[(1, 48), float32] */)
}

def @func_8681(%var_8624: Tensor[(128), float64], %var_8635: Tensor[(728), float64], %var_8647: Tensor[(48, 1), float32]) -> (Tensor[(6, 16, 13), float32], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(14, 52), float64], Tensor[(48, 1), float32], Tensor[(12, 4, 728), float32]) {
  %435 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %436 = cast(%var_8624, dtype="float64") /* ty=Tensor[(128), float64] */;
  %437 = reshape(%436, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %438 = @func_7588(%437) /* ty=(Tensor[(728), float64], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
  %439 = cast(%var_8635, dtype="float64") /* ty=Tensor[(728), float64] */;
  %440 = reshape(%439, newshape=[14, 52]) /* ty=Tensor[(14, 52), float64] */;
  %441 = @func_6647(%440) /* ty=(Tensor[(6, 16, 13), bool], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(14, 52), float64]) */;
  %442 = cast(%var_8647, dtype="float32") /* ty=Tensor[(48, 1), float32] */;
  %443 = reshape(%442, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float32] */;
  %444 = @func_5146(%443) /* ty=Tensor[(12, 4, 1), float32] */;
  %445 = cast(%444, dtype="float64") /* ty=Tensor[(12, 4, 1), float64] */;
  %446 = erf(%445) /* ty=Tensor[(12, 4, 1), float64] */;
  %447 = cast(%446, dtype="float32") /* ty=Tensor[(12, 4, 1), float32] */;
  %448 = cast(%var_8635, dtype="float32") /* ty=Tensor[(728), float32] */;
  %449 = %435.0;
  %450 = %438.1;
  %451 = %441.3;
  %452 = power(%447, %448) /* ty=Tensor[(12, 4, 728), float32] */;
  (%449, %450, %var_8624, %451, %var_8647, %452)
}

def @func_13018() -> (Tensor[(2340), float64],) {
  %453 = @func_10714() /* ty=(Tensor[(2340), float64],) */;
  %454 = %453.0;
  (%454,)
}

def @func_13968(%var_13940: Tensor[(1728), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(16, 9, 12), uint32], Tensor[(1728), float64], Tensor[(128), float64], Tensor[(128), float64]) {
  %455 = cast(%var_13940, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %456 = cast(meta[relay.Constant][36] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %457 = reshape(%455, newshape=[16, 9, 12]) /* ty=Tensor[(16, 9, 12), float64] */;
  %458 = reshape(%456, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %459 = @func_5640(%457, %458) /* ty=(Tensor[(?, 9, 12), bool], Tensor[(16, 9, 12), uint32], Tensor[(5, 16, 1), uint32], Tensor[(80), uint32], Tensor[(128), float64]) */;
  %460 = cast(meta[relay.Constant][36] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %461 = reshape(%460, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %462 = @func_10338(%461) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(128), float64], Tensor[(128), float64]) */;
  %463 = @func_11310() /* ty=Tensor[(6, 16, 13), float32] */;
  %464 = %459.1;
  %465 = %462.2;
  (%463, %464, %var_13940, meta[relay.Constant][36] /* ty=Tensor[(128), float64] */, %465)
}

def @func_7588(%var_7586: Tensor[(128), float64]) -> (Tensor[(728), float64], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) {
  %466 = @func_7373() /* ty=(Tensor[(728), float64],) */;
  %467 = cast(%var_7586, dtype="float64") /* ty=Tensor[(128), float64] */;
  %468 = reshape(%467, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), float64] */;
  %469 = @func_2236(%468) /* ty=(Tensor[(8, 4, 4), float64],) */;
  %470 = %466.0;
  %471 = %469.0;
  (%470, %471, %var_7586)
}

def @func_14486() -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(144), float64]) {
  %472 = @func_9289() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %473 = cast(meta[relay.Constant][37] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %474 = reshape(%473, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %475 = @func_13615(%474) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(16, 3, 3), float64], Tensor[(144), float64], Tensor[(20, 32), float32], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(728), float64], Tensor[(728), float64], Tensor[(728), uint64], Tensor[(1452), int16], Tensor[(2, 4), int8]) */;
  %476 = %472.0;
  %477 = %475.0;
  (%476, %477, meta[relay.Constant][37] /* ty=Tensor[(144), float64] */)
}

def @main(%var_15808: Tensor[(1, 624), int16]) -> (Tensor[(1, 48), float32], Tensor[(13, 16, 3), int16], Tensor[(1, 624), float32], Tensor[(1, 624), float32]) {
  %478 = @func_15653() /* ty=(Tensor[(1, 48), float32], Tensor[(6, 16, 13), float32]) */;
  %479 = cast(%var_15808, dtype="int16") /* ty=Tensor[(1, 624), int16] */;
  %480 = cast(%var_15808, dtype="int16") /* ty=Tensor[(1, 624), int16] */;
  %481 = reshape(%479, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %482 = reshape(%480, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %483 = @func_355(%481, %482) /* ty=(Tensor[(13, 16, 3), int16],) */;
  %484 = cast(%var_15808, dtype="float32") /* ty=Tensor[(1, 624), float32] */;
  %485 = cast(%var_15808, dtype="float32") /* ty=Tensor[(1, 624), float32] */;
  %486 = %478.0;
  %487 = %483.0;
  %488 = sigmoid(%484) /* ty=Tensor[(1, 624), float32] */;
  %489 = cosh(%485) /* ty=Tensor[(1, 624), float32] */;
  (%486, %487, %488, %489)
}

def @func_9965(%var_9951: Tensor[(6, 16, 13), float32]) -> (Tensor[(6, 16, 13), bool],) {
  %490 = @func_8792() /* ty=Tensor[(6, 16, 13), float32] */;
  %491 = cast(%var_9951, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %495 = equal(%493, %494) /* ty=Tensor[(6, 16, 13), bool] */;
  (%495,)
}

def @func_11733() -> (Tensor[(728), float64],) {
  %496 = @func_11621() /* ty=(Tensor[(728), float64],) */;
  %497 = %496.0;
  (%497,)
}

def @func_11568(%var_11552: Tensor[(8, 7, 13), float64], %var_11562: Tensor[(8, 7, 13), bool]) -> Tensor[(8, 7, 13), bool] {
  %498 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %499 = %498.1;
  %500 = cast(%var_11552, dtype="bool") /* ty=Tensor[(8, 7, 13), bool] */;
  %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%499, dtype="bool") /* ty=Tensor[(8, 7, 13), bool] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %504 = greater(%502, %503) /* ty=Tensor[(8, 7, 13), bool] */;
  %505 = cast(%var_11562, dtype="bool") /* ty=Tensor[(8, 7, 13), bool] */;
  %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%504, dtype="bool") /* ty=Tensor[(8, 7, 13), bool] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%507, %508) /* ty=Tensor[(8, 7, 13), bool] */
}

def @func_11259() -> (Tensor[(630), float32],) {
  %509 = @func_8720() /* ty=Tensor[(630), float32] */;
  (%509,)
}

def @func_8350(%var_8334: Tensor[(728), float64]) -> (Tensor[(12, 13, 15), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) {
  %510 = @func_8213() /* ty=Tensor[(12, 13, 15), float64] */;
  %511 = cast(%510, dtype="float32") /* ty=Tensor[(12, 13, 15), float32] */;
  %512 = cast(%var_8334, dtype="float64") /* ty=Tensor[(728), float64] */;
  %513 = reshape(%512, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float64] */;
  %514 = atanh(%511) /* ty=Tensor[(12, 13, 15), float32] */;
  %515 = @func_1915(%513) /* ty=Tensor[(8, 7, 13), float64] */;
  (%514, %515, %var_8334)
}

def @func_15178() -> (Tensor[(15, 14, 3), float32], Tensor[(728), float64]) {
  %516 = @func_10977() /* ty=(Tensor[(630), float32], Tensor[(15, 14, 3), float32]) */;
  %517 = %516.1;
  %518 = @func_9833() /* ty=Tensor[(728), float64] */;
  (%517, %518)
}

def @func_15565() -> (Tensor[(728), float64],) {
  %519 = @func_12419() /* ty=Tensor[(728), float64] */;
  (%519,)
}

def @func_9350() -> (Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(1, 324), uint32], Tensor[(728), float64], Tensor[(728), float64]) {
  %520 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %521 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 324), uint32] */, dtype="uint32") /* ty=Tensor[(1, 324), uint32] */;
  %522 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 324), uint32] */, dtype="uint32") /* ty=Tensor[(1, 324), uint32] */;
  %523 = cast(meta[relay.Constant][39] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %524 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 324), uint32] */, dtype="float32") /* ty=Tensor[(1, 324), float32] */;
  %525 = reshape(%521, newshape=[9, 6, 6]) /* ty=Tensor[(9, 6, 6), uint32] */;
  %526 = reshape(%522, newshape=[9, 6, 6]) /* ty=Tensor[(9, 6, 6), uint32] */;
  %527 = reshape(%523, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %528 = reshape(%524, newshape=[9, 6, 6]) /* ty=Tensor[(9, 6, 6), float32] */;
  %529 = @func_2133(%525, %526, %527, %528) /* ty=(Tensor[(8, 7, 13), float64], Tensor[(728), float64], Tensor[(8, 7, 13), float64], Tensor[(9, 6, 6), float64], Tensor[(9, 6, 6), float32]) */;
  %530 = @func_7853() /* ty=(Tensor[(728), float64],) */;
  %531 = %520.0;
  %532 = %529.2;
  %533 = %530.0;
  (%531, %532, meta[relay.Constant][38] /* ty=Tensor[(1, 324), uint32] */, meta[relay.Constant][39] /* ty=Tensor[(728), float64] */, %533)
}

def @func_6864() -> (Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) {
  %534 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %535 = cast(meta[relay.Constant][40] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %536 = reshape(%535, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float64] */;
  %537 = %534.0;
  %538 = @func_1915(%536) /* ty=Tensor[(8, 7, 13), float64] */;
  (%537, %538, meta[relay.Constant][40] /* ty=Tensor[(728), float64] */)
}

def @func_12890() -> (Tensor[(6, 16, 13), bool],) {
  %539 = @func_10319() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), bool]) */;
  %540 = %539.1;
  (%540,)
}

def @func_14053() -> Tensor[(6, 16, 13), float32] {
  %541 = @func_11279() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
  %541.0
}

def @func_10303(%var_10268: Tensor[(135), uint64], %var_10297: Tensor[(6, 16, 13), float32]) -> (Tensor[(896), uint32], Tensor[(896), uint32], Tensor[(728), float64], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(8, 4, 4), float64], Tensor[(6, 16, 13), int64]) {
  %542 = cast(meta[relay.Constant][41] /* ty=Tensor[(896), uint32] */, dtype="uint32") /* ty=Tensor[(896), uint32] */;
  %543 = reshape(%542, newshape=[896]) /* ty=Tensor[(896), uint32] */;
  %544 = @func_7722(%543) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) */;
  %545 = @func_7328() /* ty=(Tensor[(728), float64],) */;
  %546 = cast(%var_10268, dtype="uint64") /* ty=Tensor[(135), uint64] */;
  %547 = reshape(%546, newshape=[135]) /* ty=Tensor[(135), uint64] */;
  %548 = @func_8927(%547) /* ty=(Tensor[(630), float32], Tensor[(6, 16, 13), float32], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(6, 16, 13), float32]) */;
  %549 = @func_10083() /* ty=(Tensor[(4, 2, 9), bool], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
  %550 = @func_9528() /* ty=Tensor[(6, 16, 13), float32] */;
  %551 = cast(%var_10297, dtype="int64") /* ty=Tensor[(6, 16, 13), int64] */;
  %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%550, dtype="int64") /* ty=Tensor[(6, 16, 13), int64] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %555 = %544.2;
  %556 = %545.0;
  %557 = %548.2;
  %558 = %549.1;
  %559 = bitwise_and(%553, %554) /* ty=Tensor[(6, 16, 13), int64] */;
  (%555, meta[relay.Constant][41] /* ty=Tensor[(896), uint32] */, %556, %557, %var_10268, %558, %559)
}

def @func_5640(%var_5625: Tensor[(16, 9, 12), float64], %var_5637: Tensor[(128), float64]) -> (Tensor[(?, 9, 12), bool], Tensor[(16, 9, 12), uint32], Tensor[(5, 16, 1), uint32], Tensor[(80), uint32], Tensor[(128), float64]) {
  %560 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %561 = log10(%560) /* ty=Tensor[(1, 9, 12), float64] */;
  %562 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%561, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %566 = divide(%564, %565) /* ty=Tensor[(?, 9, 12), float64] */;
  %567 = cast(%566, dtype="bool") /* ty=Tensor[(?, 9, 12), bool] */;
  %568 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(1, 9, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %569 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 9, 12), float64] */, dtype="bool") /* ty=Tensor[(1, 9, 12), bool] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %571 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 9, 12), float64] */, dtype="uint32") /* ty=Tensor[(1, 9, 12), uint32] */;
  %572 = cast(%var_5625, dtype="uint32") /* ty=Tensor[(16, 9, 12), uint32] */;
  %573 = cast(meta[relay.Constant][43] /* ty=Tensor[(80), uint32] */, dtype="uint32") /* ty=Tensor[(80), uint32] */;
  %574 = cast(%var_5637, dtype="float64") /* ty=Tensor[(128), float64] */;
  %575 = reshape(%573, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), uint32] */;
  %576 = reshape(%574, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %577 = @func_4195(%575, %576) /* ty=(Tensor[(5, 16, 1), uint32], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
  %578 = not_equal(%569, %570) /* ty=Tensor[(?, 9, 12), bool] */;
  %579 = logical_xor(%571, %572) /* ty=Tensor[(16, 9, 12), uint32] */;
  %580 = %577.0;
  (%578, %579, %580, meta[relay.Constant][43] /* ty=Tensor[(80), uint32] */, %var_5637)
}

def @func_14513() -> Tensor[(728), float64] {
  %581 = @func_12151() /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), float32]) */;
  %582 = %581.0;
  %583 = cast(%582, dtype="float64") /* ty=Tensor[(728), float64] */;
  acos(%583) /* ty=Tensor[(728), float64] */
}

def @func_7308(%var_7295: Tensor[(1452), int16], %var_7296: Tensor[(8), int8]) -> (Tensor[(8, 7, 13), float32], Tensor[(128), float64], Tensor[(416), uint64], Tensor[(1452), int16], Tensor[(8), int8]) {
  %584 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %585 = %584.1;
  %586 = cast(%585, dtype="float32") /* ty=Tensor[(8, 7, 13), float32] */;
  %587 = cast(meta[relay.Constant][44] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %588 = cast(meta[relay.Constant][44] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %589 = cast(%var_7295, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %590 = cast(%var_7296, dtype="int8") /* ty=Tensor[(8), int8] */;
  %591 = reshape(%587, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %592 = reshape(%588, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %593 = reshape(%589, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
  %594 = reshape(%590, newshape=[8]) /* ty=Tensor[(8), int8] */;
  %595 = @func_3942(%591, %592, %593, %594) /* ty=(Tensor[(16, 13, 2), uint64], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(2, 4, 13), bool], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64]) */;
  %596 = atanh(%586) /* ty=Tensor[(8, 7, 13), float32] */;
  %597 = %595.2;
  (%596, %597, meta[relay.Constant][44] /* ty=Tensor[(416), uint64] */, %var_7295, %var_7296)
}

def @func_7722(%var_7716: Tensor[(896), uint32]) -> (Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) {
  %598 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %599 = cast(%var_7716, dtype="uint32") /* ty=Tensor[(896), uint32] */;
  %600 = reshape(%599, newshape=[896]) /* ty=Tensor[(896), uint32] */;
  %601 = @func_4459(%600) /* ty=(Tensor[(9, 8, 7), int8], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(8, 1), int8], Tensor[(896), uint32], Tensor[(1, 1452), int16], Tensor[(13, 16, 3), int16]) */;
  %602 = %598.0;
  %603 = %601.0;
  (%602, %603, %var_7716)
}

def @func_12043(%var_12032: Tensor[(1, 13, 11), float32]) -> (Tensor[(1, 13, 11), float32], Tensor[(728), float64], Tensor[(6, 16, 13), float32]) {
  %604 = cast(%var_12032, dtype="float32") /* ty=Tensor[(1, 13, 11), float32] */;
  %605 = @func_8513() /* ty=(Tensor[(728), float64],) */;
  %606 = @func_10471() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(728), float64]) */;
  %607 = atanh(%604) /* ty=Tensor[(1, 13, 11), float32] */;
  %608 = %605.0;
  %609 = %606.0;
  (%607, %608, %609)
}

def @func_8170(%var_8133: Tensor[(728), float64], %var_8144: Tensor[(128), float64]) -> (Tensor[(728), bool], Tensor[(128), float64], Tensor[(1728), float64], Tensor[(128), float64], Tensor[(13, 16, 3), int16], Tensor[(624), int16]) {
  %610 = @func_7853() /* ty=(Tensor[(728), float64],) */;
  %611 = %610.0;
  %612 = cast(%var_8133, dtype="bool") /* ty=Tensor[(728), bool] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(1), int32] */;
  %614 = cast(%611, dtype="bool") /* ty=Tensor[(728), bool] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?), bool] */;
  %616 = cast(meta[relay.Constant][45] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %617 = cast(%var_8144, dtype="float64") /* ty=Tensor[(128), float64] */;
  %618 = reshape(%616, newshape=[16, 9, 12]) /* ty=Tensor[(16, 9, 12), float64] */;
  %619 = reshape(%617, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %620 = @func_5640(%618, %619) /* ty=(Tensor[(?, 9, 12), bool], Tensor[(16, 9, 12), uint32], Tensor[(5, 16, 1), uint32], Tensor[(80), uint32], Tensor[(128), float64]) */;
  %621 = cast(meta[relay.Constant][46] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %622 = cast(meta[relay.Constant][46] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %623 = reshape(%621, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %624 = reshape(%622, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %625 = @func_355(%623, %624) /* ty=(Tensor[(13, 16, 3), int16],) */;
  %626 = logical_and(%614, %615) /* ty=Tensor[(728), bool] */;
  %627 = %620.4;
  %628 = %625.0;
  (%626, %627, meta[relay.Constant][45] /* ty=Tensor[(1728), float64] */, %var_8144, %628, meta[relay.Constant][46] /* ty=Tensor[(624), int16] */)
}

def @func_10925() -> Tensor[(8, 7, 13), float64] {
  %629 = @func_9350() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(1, 324), uint32], Tensor[(728), float64], Tensor[(728), float64]) */;
  %629.1
}

def @func_8385(%var_8378: int8) -> (Tensor[(2, 10, 15), int8],) {
  %630 = cast(%var_8378, dtype="int8") /* ty=int8 */;
  %631 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 10, 15), int8] */, dtype="int8") /* ty=Tensor[(2, 10, 15), int8] */;
  %632 = left_shift(%630, %631) /* ty=Tensor[(2, 10, 15), int8] */;
  (%632,)
}

def @func_8720() -> Tensor[(630), float32] {
  %633 = @func_8493() /* ty=(Tensor[(630), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %633.0
}

def @func_7373() -> (Tensor[(728), float64],) {
  %634 = @func_7328() /* ty=(Tensor[(728), float64],) */;
  %635 = %634.0;
  (%635,)
}

def @func_4195(%var_4185: Tensor[(5, 16, 1), uint32], %var_4192: Tensor[(128), float64]) -> (Tensor[(5, 16, 1), uint32], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) {
  %636 = cast(meta[relay.Constant][48] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %637 = cast(%var_4185, dtype="uint32") /* ty=Tensor[(5, 16, 1), uint32] */;
  %638 = cast(%var_4192, dtype="float64") /* ty=Tensor[(128), float64] */;
  %639 = reshape(%638, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), float64] */;
  %640 = @func_2236(%639) /* ty=(Tensor[(8, 4, 4), float64],) */;
  %641 = bitwise_or(%636, %637) /* ty=Tensor[(5, 16, 1), uint32] */;
  %642 = %640.0;
  (%641, %642, %var_4192)
}

def @func_9561(%var_9550: Tensor[(728), float64]) -> (Tensor[(728), int16],) {
  %643 = @func_7853() /* ty=(Tensor[(728), float64],) */;
  %644 = %643.0;
  %645 = cast(%var_9550, dtype="int16") /* ty=Tensor[(728), int16] */;
  %646 = shape_of(%644, dtype="int32") /* ty=Tensor[(1), int32] */;
  %647 = cast(%644, dtype="int16") /* ty=Tensor[(728), int16] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?), int16] */;
  %649 = left_shift(%647, %648) /* ty=Tensor[(728), int16] */;
  (%649,)
}

def @func_12382() -> (Tensor[(6, 16, 13), float32],) {
  %650 = @func_11742() /* ty=Tensor[(6, 16, 13), float32] */;
  (%650,)
}

def @func_13848() -> (Tensor[(6, 16, 13), float32],) {
  %651 = @func_6482() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %652 = %651.0;
  (%652,)
}

def @func_1046(%var_1000: Tensor[(12, 11, 11), int16], %var_1001: Tensor[(12, 11, 11), int16], %var_1017: Tensor[(8), int8], %var_1018: Tensor[(104), int8], %var_1024: Tensor[(1620), uint64]) -> (Tensor[(12, 11, 11), int16], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(13, 16, 3), int16], Tensor[(2, 4, 13), bool], Tensor[(8), int8], Tensor[(104), int8], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(13, 16, 3), int16]) {
  %653 = cast(%var_1001, dtype="int16") /* ty=Tensor[(12, 11, 11), int16] */;
  %654 = shape_of(%var_1000, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%var_1000, dtype="int16") /* ty=Tensor[(12, 11, 11), int16] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %657 = cast(meta[relay.Constant][49] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %658 = cast(meta[relay.Constant][49] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %659 = reshape(%657, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %660 = reshape(%658, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %661 = @func_355(%659, %660) /* ty=(Tensor[(13, 16, 3), int16],) */;
  %662 = cast(meta[relay.Constant][49] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %663 = cast(meta[relay.Constant][49] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %664 = reshape(%662, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %665 = reshape(%663, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %666 = @func_355(%664, %665) /* ty=(Tensor[(13, 16, 3), int16],) */;
  %667 = cast(%var_1017, dtype="int8") /* ty=Tensor[(8), int8] */;
  %668 = cast(%var_1018, dtype="int8") /* ty=Tensor[(104), int8] */;
  %669 = %661.0;
  %670 = cast(%669, dtype="int16") /* ty=Tensor[(13, 16, 3), int16] */;
  %671 = reshape(%667, newshape=[2, 4, 1]) /* ty=Tensor[(2, 4, 1), int8] */;
  %672 = reshape(%668, newshape=[2, 4, 13]) /* ty=Tensor[(2, 4, 13), int8] */;
  %673 = reshape(%670, newshape=[8, 78]) /* ty=Tensor[(8, 78), int16] */;
  %674 = @func_613(%671, %672, %673) /* ty=(Tensor[(2, 4, 13), bool], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(540, 3), uint64], Tensor[(15, 9, 12), uint64], Tensor[(15, 9, 12), uint64], Tensor[(13, 16, 3), int16], Tensor[(8, 78), int16]) */;
  %675 = cast(meta[relay.Constant][50] /* ty=Tensor[(135), uint64] */, dtype="uint64") /* ty=Tensor[(135), uint64] */;
  %676 = cast(%var_1024, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %677 = reshape(%675, newshape=[15, 9, 1]) /* ty=Tensor[(15, 9, 1), uint64] */;
  %678 = reshape(%676, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), uint64] */;
  %679 = %666.0;
  %680 = cast(%679, dtype="int16") /* ty=Tensor[(13, 16, 3), int16] */;
  %681 = cast(%669, dtype="int16") /* ty=Tensor[(13, 16, 3), int16] */;
  %682 = reshape(%680, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %683 = reshape(%681, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %684 = @func_355(%682, %683) /* ty=(Tensor[(13, 16, 3), int16],) */;
  %685 = subtract(%655, %656) /* ty=Tensor[(12, 11, 11), int16] */;
  %686 = %674.0;
  %687 = @func_301(%677, %678) /* ty=Tensor[(15, 9, 12), uint64] */;
  %688 = %684.0;
  (%685, %669, meta[relay.Constant][49] /* ty=Tensor[(624), int16] */, %679, %686, %var_1017, %var_1018, %687, meta[relay.Constant][50] /* ty=Tensor[(135), uint64] */, %var_1024, %688)
}

def @func_10338(%var_10334: Tensor[(128), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(128), float64], Tensor[(128), float64]) {
  %689 = @func_6482() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %690 = cast(%var_10334, dtype="float64") /* ty=Tensor[(128), float64] */;
  %691 = reshape(%690, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %692 = @func_7588(%691) /* ty=(Tensor[(728), float64], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
  %693 = %689.0;
  %694 = %692.2;
  (%693, %694, %var_10334)
}

def @func_15338() -> (Tensor[(6, 16, 13), float32], Tensor[(728), float64], Tensor[(728), float64], Tensor[(728), float64], Tensor[(728), float64], Tensor[(630), float32], Tensor[(1, 324), uint32]) {
  %695 = @func_7373() /* ty=(Tensor[(728), float64],) */;
  %696 = @func_11259() /* ty=(Tensor[(630), float32],) */;
  %697 = @func_12299() /* ty=(Tensor[(1, 324), uint32],) */;
  %698 = @func_14827() /* ty=Tensor[(6, 16, 13), float32] */;
  %699 = %695.0;
  %700 = @func_12593() /* ty=Tensor[(728), float64] */;
  %701 = @func_8821() /* ty=Tensor[(728), float64] */;
  %702 = @func_9833() /* ty=Tensor[(728), float64] */;
  %703 = %696.0;
  %704 = %697.0;
  (%698, %699, %700, %701, %702, %703, %704)
}

def @func_13328() -> (Tensor[(14, 9, 5), float32],) {
  %705 = @func_7892() /* ty=(Tensor[(2340), float64], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(4, 2, 9), bool], int32) */;
  %706 = %705.1;
  (%706,)
}

def @func_3851(%var_3781: Tensor[(16, 8, 7), uint32], %var_3806: Tensor[(1452), int16]) -> (Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(16, 3, 3), float64], Tensor[(144, 1), float64], Tensor[(16, 8, 7), bool], Tensor[(13, 16, 3), int16], Tensor[(1452), int16], Tensor[(8, 1), int8], Tensor[(104), int8], Tensor[(1620), uint64], Tensor[(540, 3), uint64], Tensor[(1620), uint64]) {
  %707 = cast(meta[relay.Constant][51] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %708 = cast(meta[relay.Constant][51] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %709 = reshape(%707, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), float32] */;
  %710 = reshape(%708, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), float32] */;
  %711 = @func_3337(%709, %710) /* ty=(Tensor[(14, 9, 5), float32],) */;
  %712 = cast(meta[relay.Constant][52] /* ty=Tensor[(144, 1), float64] */, dtype="float64") /* ty=Tensor[(144, 1), float64] */;
  %713 = reshape(%712, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), float64] */;
  %714 = cast(%var_3781, dtype="float32") /* ty=Tensor[(16, 8, 7), float32] */;
  %715 = sqrt(%714) /* ty=Tensor[(16, 8, 7), float32] */;
  %716 = cast(meta[relay.Constant][53] /* ty=Tensor[(16, 8, 7), uint32] */, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
  %717 = shape_of(%var_3781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %718 = cast(%var_3781, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %720 = greater_equal(%718, %719) /* ty=Tensor[(16, 8, 7), bool] */;
  %721 = cast(%720, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
  %722 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%715, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %725 = cast(%var_3806, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %726 = cast(%var_3806, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %727 = cast(meta[relay.Constant][54] /* ty=Tensor[(8, 1), int8] */, dtype="int8") /* ty=Tensor[(8, 1), int8] */;
  %728 = cast(meta[relay.Constant][55] /* ty=Tensor[(104), int8] */, dtype="int8") /* ty=Tensor[(104), int8] */;
  %729 = cast(meta[relay.Constant][56] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %730 = reshape(%725, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int16] */;
  %731 = reshape(%726, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int16] */;
  %732 = reshape(%727, newshape=[8]) /* ty=Tensor[(8), int8] */;
  %733 = reshape(%728, newshape=[104]) /* ty=Tensor[(104), int8] */;
  %734 = reshape(%729, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %735 = @func_1046(%730, %731, %732, %733, %734) /* ty=(Tensor[(12, 11, 11), int16], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(13, 16, 3), int16], Tensor[(2, 4, 13), bool], Tensor[(8), int8], Tensor[(104), int8], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(13, 16, 3), int16]) */;
  %736 = cast(meta[relay.Constant][54] /* ty=Tensor[(8, 1), int8] */, dtype="int8") /* ty=Tensor[(8, 1), int8] */;
  %737 = cast(meta[relay.Constant][55] /* ty=Tensor[(104), int8] */, dtype="int8") /* ty=Tensor[(104), int8] */;
  %738 = %735.10;
  %739 = cast(%738, dtype="int16") /* ty=Tensor[(13, 16, 3), int16] */;
  %740 = reshape(%736, newshape=[2, 4, 1]) /* ty=Tensor[(2, 4, 1), int8] */;
  %741 = reshape(%737, newshape=[2, 4, 13]) /* ty=Tensor[(2, 4, 13), int8] */;
  %742 = reshape(%739, newshape=[8, 78]) /* ty=Tensor[(8, 78), int16] */;
  %743 = @func_613(%740, %741, %742) /* ty=(Tensor[(2, 4, 13), bool], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(540, 3), uint64], Tensor[(15, 9, 12), uint64], Tensor[(15, 9, 12), uint64], Tensor[(13, 16, 3), int16], Tensor[(8, 78), int16]) */;
  %744 = cast(%var_3806, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %745 = cast(%var_3806, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %746 = cast(meta[relay.Constant][54] /* ty=Tensor[(8, 1), int8] */, dtype="int8") /* ty=Tensor[(8, 1), int8] */;
  %747 = cast(meta[relay.Constant][55] /* ty=Tensor[(104), int8] */, dtype="int8") /* ty=Tensor[(104), int8] */;
  %748 = cast(meta[relay.Constant][56] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %749 = reshape(%744, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int16] */;
  %750 = reshape(%745, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int16] */;
  %751 = reshape(%746, newshape=[8]) /* ty=Tensor[(8), int8] */;
  %752 = reshape(%747, newshape=[104]) /* ty=Tensor[(104), int8] */;
  %753 = reshape(%748, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %754 = @func_1046(%749, %750, %751, %752, %753) /* ty=(Tensor[(12, 11, 11), int16], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(13, 16, 3), int16], Tensor[(2, 4, 13), bool], Tensor[(8), int8], Tensor[(104), int8], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(13, 16, 3), int16]) */;
  %755 = %711.0;
  %756 = @func_2608(%713) /* ty=Tensor[(16, 3, 3), float64] */;
  %757 = less(%723, %724) /* ty=Tensor[(16, 8, 7), bool] */;
  %758 = %743.3;
  %759 = %754.9;
  (%755, meta[relay.Constant][51] /* ty=Tensor[(630), float32] */, %756, meta[relay.Constant][52] /* ty=Tensor[(144, 1), float64] */, %757, %738, %var_3806, meta[relay.Constant][54] /* ty=Tensor[(8, 1), int8] */, meta[relay.Constant][55] /* ty=Tensor[(104), int8] */, meta[relay.Constant][56] /* ty=Tensor[(1620), uint64] */, %758, %759)
}

def @func_14354() -> (Tensor[(6, 16, 13), float32], Tensor[(14, 9, 5), float32]) {
  %760 = @func_11279() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
  %761 = @func_13328() /* ty=(Tensor[(14, 9, 5), float32],) */;
  %762 = %760.1;
  %763 = %761.0;
  (%762, %763)
}

def @func_12151() -> (Tensor[(728), float64], Tensor[(6, 16, 13), float32]) {
  %764 = @func_8821() /* ty=Tensor[(728), float64] */;
  %765 = @func_8792() /* ty=Tensor[(6, 16, 13), float32] */;
  (%764, %765)
}

def @func_12201(%var_12180: Tensor[(896), uint32], %var_12196: Tensor[(128), float64]) -> (Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(896), uint32], Tensor[(728), float64], Tensor[(128), float64]) {
  %766 = @func_7328() /* ty=(Tensor[(728), float64],) */;
  %767 = cast(%var_12180, dtype="uint32") /* ty=Tensor[(896), uint32] */;
  %768 = reshape(%767, newshape=[896]) /* ty=Tensor[(896), uint32] */;
  %769 = @func_7722(%768) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) */;
  %770 = cast(%var_12196, dtype="float64") /* ty=Tensor[(128), float64] */;
  %771 = reshape(%770, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %772 = @func_7588(%771) /* ty=(Tensor[(728), float64], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
  %773 = %766.0;
  %774 = %769.0;
  %775 = %772.0;
  (%773, %774, %var_12180, %775, %var_12196)
}

def @func_12803() -> (Tensor[(12, 13, 15), float64],) {
  %776 = @func_8213() /* ty=Tensor[(12, 13, 15), float64] */;
  (%776,)
}

def @func_7075(%var_7061: Tensor[(1452, 1), int16], %var_7063: Tensor[(104), int8], %var_7064: Tensor[(1620), uint64]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(2, 4, 13), bool], Tensor[(1452, 1), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64], Tensor[(6, 16, 13), float32]) {
  %777 = @func_6482() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %778 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %779 = cast(%var_7061, dtype="int16") /* ty=Tensor[(1452, 1), int16] */;
  %780 = cast(%var_7061, dtype="int16") /* ty=Tensor[(1452, 1), int16] */;
  %781 = cast(meta[relay.Constant][57] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
  %782 = cast(%var_7063, dtype="int8") /* ty=Tensor[(104), int8] */;
  %783 = cast(%var_7064, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %784 = reshape(%779, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int16] */;
  %785 = reshape(%780, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int16] */;
  %786 = reshape(%781, newshape=[8]) /* ty=Tensor[(8), int8] */;
  %787 = reshape(%782, newshape=[104]) /* ty=Tensor[(104), int8] */;
  %788 = reshape(%783, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %789 = @func_1046(%784, %785, %786, %787, %788) /* ty=(Tensor[(12, 11, 11), int16], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(13, 16, 3), int16], Tensor[(2, 4, 13), bool], Tensor[(8), int8], Tensor[(104), int8], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(13, 16, 3), int16]) */;
  %790 = %777.0;
  %791 = %778.0;
  %792 = %789.4;
  %793 = @func_6543() /* ty=Tensor[(6, 16, 13), float32] */;
  (%790, %791, %792, %var_7061, meta[relay.Constant][57] /* ty=Tensor[(8), int8] */, %var_7063, %var_7064, %793)
}

def @func_7788(%var_7759: Tensor[(630), float32]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(630), float32], Tensor[(13, 16, 3), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(624), int16]) {
  %794 = @func_6864() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %795 = @func_7373() /* ty=(Tensor[(728), float64],) */;
  %796 = cast(%var_7759, dtype="float32") /* ty=Tensor[(630), float32] */;
  %797 = reshape(%796, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %798 = @func_7236(%797) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(6, 16, 13), float32]) */;
  %799 = cast(meta[relay.Constant][58] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
  %800 = cast(meta[relay.Constant][59] /* ty=Tensor[(104), int8] */, dtype="int8") /* ty=Tensor[(104), int8] */;
  %801 = cast(meta[relay.Constant][60] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %802 = reshape(%799, newshape=[2, 4, 1]) /* ty=Tensor[(2, 4, 1), int8] */;
  %803 = reshape(%800, newshape=[2, 4, 13]) /* ty=Tensor[(2, 4, 13), int8] */;
  %804 = reshape(%801, newshape=[8, 78]) /* ty=Tensor[(8, 78), int16] */;
  %805 = @func_613(%802, %803, %804) /* ty=(Tensor[(2, 4, 13), bool], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(540, 3), uint64], Tensor[(15, 9, 12), uint64], Tensor[(15, 9, 12), uint64], Tensor[(13, 16, 3), int16], Tensor[(8, 78), int16]) */;
  %806 = %794.0;
  %807 = @func_6543() /* ty=Tensor[(6, 16, 13), float32] */;
  %808 = %795.0;
  %809 = %798.3;
  %810 = %805.6;
  (%806, %807, %808, %809, %var_7759, %810, meta[relay.Constant][58] /* ty=Tensor[(8), int8] */, meta[relay.Constant][59] /* ty=Tensor[(104), int8] */, meta[relay.Constant][60] /* ty=Tensor[(624), int16] */)
}

def @func_10389() -> Tensor[(2340), float64] {
  %811 = @func_7666() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) */;
  %811.2
}

def @func_14827() -> Tensor[(6, 16, 13), float32] {
  @func_10864() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_5728(%var_5721: Tensor[(16, 11, 4), float64]) -> Tensor[(16, 11, 4), float64] {
  %812 = cast(%var_5721, dtype="float64") /* ty=Tensor[(16, 11, 4), float64] */;
  sqrt(%812) /* ty=Tensor[(16, 11, 4), float64] */
}

def @func_7426(%var_7411: Tensor[(14, 64), uint32]) -> (Tensor[(6, 16, 13), float32], Tensor[(14, 64), uint32], Tensor[(9, 8, 7), float64]) {
  %813 = @func_6864() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %814 = cast(%var_7411, dtype="uint32") /* ty=Tensor[(14, 64), uint32] */;
  %815 = reshape(%814, newshape=[896]) /* ty=Tensor[(896), uint32] */;
  %816 = @func_4459(%815) /* ty=(Tensor[(9, 8, 7), int8], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(8, 1), int8], Tensor[(896), uint32], Tensor[(1, 1452), int16], Tensor[(13, 16, 3), int16]) */;
  %817 = %816.0;
  %818 = cast(%817, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
  %819 = %813.0;
  %820 = sin(%818) /* ty=Tensor[(9, 8, 7), float64] */;
  (%819, %var_7411, %820)
}

def @func_7892() -> (Tensor[(2340), float64], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(4, 2, 9), bool], int32) {
  %821 = @func_7666() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) */;
  %822 = cast(meta[relay.Constant][61] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %823 = cast(meta[relay.Constant][61] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %824 = reshape(%822, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), float32] */;
  %825 = reshape(%823, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), float32] */;
  %826 = @func_3337(%824, %825) /* ty=(Tensor[(14, 9, 5), float32],) */;
  %827 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %828 = reshape(%827, newshape=[]) /* ty=int32 */;
  %829 = %821.2;
  %830 = %826.0;
  %831 = @func_2473(%828) /* ty=Tensor[(4, 2, 9), bool] */;
  (%829, %830, meta[relay.Constant][61] /* ty=Tensor[(630), float32] */, %831, -2 /* ty=int32 */)
}

def @func_9528() -> Tensor[(6, 16, 13), float32] {
  %832 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %832.0
}

def @func_14985(%var_14979: Tensor[(11, 5, 9), float64]) -> Tensor[(11, 5, 9), float64] {
  %833 = cast(%var_14979, dtype="float64") /* ty=Tensor[(11, 5, 9), float64] */;
  cos(%833) /* ty=Tensor[(11, 5, 9), float64] */
}

def @func_13504(%var_13494: Tensor[(6, 16, 13), float32]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), bool], Tensor[(10, 16, 4), float32]) {
  %834 = @func_7666() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) */;
  %835 = %834.0;
  %836 = cast(%835, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %837 = cast(%var_13494, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
  %838 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(%835, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %841 = acos(%836) /* ty=Tensor[(6, 16, 13), float32] */;
  %842 = logical_or(%839, %840) /* ty=Tensor[(6, 16, 13), bool] */;
  %843 = @func_13456() /* ty=Tensor[(10, 16, 4), float32] */;
  (%841, %842, %843)
}

def @func_8881() -> (Tensor[(6, 16, 13), float32], Tensor[(728), float64], Tensor[(128), float64], Tensor[(4, 2, 9), bool], int32) {
  %844 = cast(meta[relay.Constant][62] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %845 = reshape(%844, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %846 = @func_7588(%845) /* ty=(Tensor[(728), float64], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
  %847 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %848 = reshape(%847, newshape=[]) /* ty=int32 */;
  %849 = @func_6543() /* ty=Tensor[(6, 16, 13), float32] */;
  %850 = %846.0;
  %851 = @func_2473(%848) /* ty=Tensor[(4, 2, 9), bool] */;
  (%849, %850, meta[relay.Constant][62] /* ty=Tensor[(128), float64] */, %851, 7 /* ty=int32 */)
}

def @func_13112(%var_13098: Tensor[(14, 6, 15), bool], %var_13099: Tensor[(14, 6, 15), bool]) -> (Tensor[(8, 7, 13), float64], Tensor[(728), float64], Tensor[(14, 6, 15), float32]) {
  %852 = cast(meta[relay.Constant][63] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %853 = reshape(%852, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %854 = @func_10584(%853) /* ty=(Tensor[(728), float64], Tensor[(8, 7, 13), float64]) */;
  %855 = cast(%var_13099, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
  %856 = shape_of(%var_13098, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%var_13098, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %859 = logical_or(%857, %858) /* ty=Tensor[(14, 6, 15), bool] */;
  %860 = cast(%859, dtype="float32") /* ty=Tensor[(14, 6, 15), float32] */;
  %861 = %854.1;
  %862 = sinh(%860) /* ty=Tensor[(14, 6, 15), float32] */;
  (%861, meta[relay.Constant][63] /* ty=Tensor[(728), float64] */, %862)
}

def @func_11693(%var_11684: Tensor[(3, 7, 1), float64]) -> (Tensor[(3, 7, 1), float64],) {
  %863 = cast(%var_11684, dtype="float64") /* ty=Tensor[(3, 7, 1), float64] */;
  %864 = acos(%863) /* ty=Tensor[(3, 7, 1), float64] */;
  (%864,)
}

def @func_11853() -> (Tensor[(728), float64],) {
  %865 = @func_7853() /* ty=(Tensor[(728), float64],) */;
  %866 = %865.0;
  (%866,)
}

def @func_7500(%var_7470: Tensor[(104), int8]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(8, 78), int16], Tensor[(104), int8], Tensor[(8, 624), uint32]) {
  %867 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %868 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %869 = cast(meta[relay.Constant][64] /* ty=Tensor[(8, 1), int8] */, dtype="int8") /* ty=Tensor[(8, 1), int8] */;
  %870 = cast(%var_7470, dtype="int8") /* ty=Tensor[(104), int8] */;
  %871 = cast(meta[relay.Constant][65] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %872 = reshape(%869, newshape=[2, 4, 1]) /* ty=Tensor[(2, 4, 1), int8] */;
  %873 = reshape(%870, newshape=[2, 4, 13]) /* ty=Tensor[(2, 4, 13), int8] */;
  %874 = reshape(%871, newshape=[8, 78]) /* ty=Tensor[(8, 78), int16] */;
  %875 = @func_613(%872, %873, %874) /* ty=(Tensor[(2, 4, 13), bool], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(540, 3), uint64], Tensor[(15, 9, 12), uint64], Tensor[(15, 9, 12), uint64], Tensor[(13, 16, 3), int16], Tensor[(8, 78), int16]) */;
  %876 = cast(meta[relay.Constant][65] /* ty=Tensor[(624), int16] */, dtype="uint32") /* ty=Tensor[(624), uint32] */;
  %877 = cast(meta[relay.Constant][64] /* ty=Tensor[(8, 1), int8] */, dtype="uint32") /* ty=Tensor[(8, 1), uint32] */;
  %878 = %867.0;
  %879 = %868.0;
  %880 = %875.7;
  %881 = bitwise_or(%876, %877) /* ty=Tensor[(8, 624), uint32] */;
  (%878, %879, %880, %var_7470, %881)
}

def @func_6454() -> (Tensor[(6, 16, 13), float32],) {
  %882 = cast(meta[relay.Constant][66] /* ty=Tensor[(6, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(6, 16, 13), float64] */;
  %883 = log10(%882) /* ty=Tensor[(6, 16, 13), float64] */;
  %884 = cast(meta[relay.Constant][67] /* ty=Tensor[(6, 16, 13), float64] */, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %885 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %886 = cast(%883, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %888 = floor_mod(%886, %887) /* ty=Tensor[(6, 16, 13), float32] */;
  (%888,)
}

def @func_11359() -> (Tensor[(2340), float64], Tensor[(6, 16, 13), float32]) {
  %889 = @func_10389() /* ty=Tensor[(2340), float64] */;
  %890 = @func_11310() /* ty=Tensor[(6, 16, 13), float32] */;
  (%889, %890)
}

def @func_9129() -> (Tensor[(728), float64],) {
  %891 = @func_7853() /* ty=(Tensor[(728), float64],) */;
  %892 = %891.0;
  (%892,)
}

def @func_12622() -> Tensor[(728), float64] {
  %893 = @func_7853() /* ty=(Tensor[(728), float64],) */;
  %893.0
}

def @func_10909() -> (Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) {
  %894 = @func_9289() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %895 = cast(meta[relay.Constant][68] /* ty=Tensor[(896), uint32] */, dtype="uint32") /* ty=Tensor[(896), uint32] */;
  %896 = reshape(%895, newshape=[896]) /* ty=Tensor[(896), uint32] */;
  %897 = @func_7722(%896) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) */;
  %898 = %894.0;
  %899 = %897.1;
  (%898, %899, meta[relay.Constant][68] /* ty=Tensor[(896), uint32] */)
}

def @func_4459(%var_4441: Tensor[(896), uint32]) -> (Tensor[(9, 8, 7), int8], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(8, 1), int8], Tensor[(896), uint32], Tensor[(1, 1452), int16], Tensor[(13, 16, 3), int16]) {
  %900 = cast(meta[relay.Constant][70] /* ty=Tensor[(9, 8, 7), int8] */, dtype="int8") /* ty=Tensor[(9, 8, 7), int8] */;
  %901 = shape_of(meta[relay.Constant][69] /* ty=Tensor[(9, 8, 7), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %902 = cast(meta[relay.Constant][69] /* ty=Tensor[(9, 8, 7), int8] */, dtype="int8") /* ty=Tensor[(9, 8, 7), int8] */;
  %903 = dyn.reshape(%900, %901, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %904 = cast(meta[relay.Constant][71] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %905 = cast(meta[relay.Constant][71] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %906 = reshape(%904, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %907 = reshape(%905, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %908 = @func_355(%906, %907) /* ty=(Tensor[(13, 16, 3), int16],) */;
  %909 = cast(%var_4441, dtype="uint32") /* ty=Tensor[(896), uint32] */;
  %910 = cast(meta[relay.Constant][72] /* ty=Tensor[(1, 1452), int16] */, dtype="int16") /* ty=Tensor[(1, 1452), int16] */;
  %911 = reshape(%909, newshape=[16, 8, 7]) /* ty=Tensor[(16, 8, 7), uint32] */;
  %912 = reshape(%910, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
  %913 = @func_3851(%911, %912) /* ty=(Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(16, 3, 3), float64], Tensor[(144, 1), float64], Tensor[(16, 8, 7), bool], Tensor[(13, 16, 3), int16], Tensor[(1452), int16], Tensor[(8, 1), int8], Tensor[(104), int8], Tensor[(1620), uint64], Tensor[(540, 3), uint64], Tensor[(1620), uint64]) */;
  %914 = %908.0;
  %915 = cast(%914, dtype="int16") /* ty=Tensor[(13, 16, 3), int16] */;
  %916 = cast(meta[relay.Constant][71] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %917 = reshape(%915, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %918 = reshape(%916, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %919 = @func_355(%917, %918) /* ty=(Tensor[(13, 16, 3), int16],) */;
  %920 = subtract(%902, %903) /* ty=Tensor[(9, 8, 7), int8] */;
  %921 = %913.7;
  %922 = %919.0;
  (%920, %914, meta[relay.Constant][71] /* ty=Tensor[(624), int16] */, %921, %var_4441, meta[relay.Constant][72] /* ty=Tensor[(1, 1452), int16] */, %922)
}

def @func_1915(%var_1912: Tensor[(8, 7, 13), float64]) -> Tensor[(8, 7, 13), float64] {
  %923 = cast(%var_1912, dtype="float64") /* ty=Tensor[(8, 7, 13), float64] */;
  acos(%923) /* ty=Tensor[(8, 7, 13), float64] */
}

def @func_11310() -> Tensor[(6, 16, 13), float32] {
  @func_8792() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_11770(%var_11752: Tensor[(48), float32]) -> (Tensor[(728), float64], Tensor[(20, 32), float32], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(80), uint32], Tensor[(128), float64]) {
  %924 = @func_7373() /* ty=(Tensor[(728), float64],) */;
  %925 = cast(%var_11752, dtype="float32") /* ty=Tensor[(48), float32] */;
  %926 = cast(meta[relay.Constant][73] /* ty=Tensor[(896), uint32] */, dtype="uint32") /* ty=Tensor[(896), uint32] */;
  %927 = reshape(%925, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %928 = reshape(%926, newshape=[896]) /* ty=Tensor[(896), uint32] */;
  %929 = @func_9064(%927, %928) /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), bool], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(128), float64], Tensor[(5, 66), uint8], Tensor[(20, 32), float32], Tensor[(2340), float64]) */;
  %930 = cast(meta[relay.Constant][74] /* ty=Tensor[(80), uint32] */, dtype="uint32") /* ty=Tensor[(80), uint32] */;
  %931 = cast(meta[relay.Constant][75] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %932 = reshape(%930, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), uint32] */;
  %933 = reshape(%931, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %934 = @func_4195(%932, %933) /* ty=(Tensor[(5, 16, 1), uint32], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
  %935 = %924.0;
  %936 = %929.7;
  %937 = %934.2;
  (%935, %936, %var_11752, meta[relay.Constant][73] /* ty=Tensor[(896), uint32] */, %937, meta[relay.Constant][74] /* ty=Tensor[(80), uint32] */, meta[relay.Constant][75] /* ty=Tensor[(128), float64] */)
}

def @func_8513() -> (Tensor[(728), float64],) {
  %938 = @func_7328() /* ty=(Tensor[(728), float64],) */;
  %939 = %938.0;
  (%939,)
}

def @func_14637() -> (Tensor[(728), float64], Tensor[(14, 52), float64]) {
  %940 = @func_12895() /* ty=(Tensor[(728), float64],) */;
  %941 = %940.0;
  %942 = cast(%941, dtype="float64") /* ty=Tensor[(728), float64] */;
  %943 = reshape(%942, newshape=[14, 52]) /* ty=Tensor[(14, 52), float64] */;
  %944 = @func_6647(%943) /* ty=(Tensor[(6, 16, 13), bool], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(14, 52), float64]) */;
  %945 = %944.3;
  (%941, %945)
}

def @func_8262(%var_8247: Tensor[(108), float64]) -> (Tensor[(728), float64], Tensor[(3, 3, 12), float64], Tensor[(108), float64]) {
  %946 = @func_7853() /* ty=(Tensor[(728), float64],) */;
  %947 = cast(%var_8247, dtype="float64") /* ty=Tensor[(108), float64] */;
  %948 = reshape(%947, newshape=[3, 3, 12]) /* ty=Tensor[(3, 3, 12), float64] */;
  %949 = @func_3549(%948) /* ty=(Tensor[(3, 3, 12), float64],) */;
  %950 = %946.0;
  %951 = %949.0;
  (%950, %951, %var_8247)
}

def @func_11879(%var_11873: Tensor[(2, 7, 6), float64]) -> Tensor[(2, 7, 6), bool] {
  %952 = cast(meta[relay.Constant][76] /* ty=Tensor[(2, 7, 6), float64] */, dtype="float64") /* ty=Tensor[(2, 7, 6), float64] */;
  %953 = cos(%952) /* ty=Tensor[(2, 7, 6), float64] */;
  %954 = cast(%var_11873, dtype="bool") /* ty=Tensor[(2, 7, 6), bool] */;
  %955 = shape_of(%953, dtype="int32") /* ty=Tensor[(3), int32] */;
  %956 = cast(%953, dtype="bool") /* ty=Tensor[(2, 7, 6), bool] */;
  %957 = dyn.reshape(%954, %955, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%956, %957) /* ty=Tensor[(2, 7, 6), bool] */
}

def @func_2473(%var_2455: int32) -> Tensor[(4, 2, 9), bool] {
  %958 = cast(%var_2455, dtype="bool") /* ty=bool */;
  %959 = cast(meta[relay.Constant][77] /* ty=Tensor[(4, 2, 9), int32] */, dtype="bool") /* ty=Tensor[(4, 2, 9), bool] */;
  greater(%958, %959) /* ty=Tensor[(4, 2, 9), bool] */
}

def @func_7090(%var_7084: Tensor[(12, 13, 15), float64]) -> (Tensor[(12, 13, 15), float64],) {
  %960 = cast(%var_7084, dtype="float64") /* ty=Tensor[(12, 13, 15), float64] */;
  %961 = log10(%960) /* ty=Tensor[(12, 13, 15), float64] */;
  (%961,)
}

def @func_13281() -> Tensor[(896), bool] {
  %962 = @func_13007() /* ty=(Tensor[(896), uint32],) */;
  %963 = %962.0;
  %964 = cast(meta[relay.Constant][78] /* ty=Tensor[(896), uint32] */, dtype="bool") /* ty=Tensor[(896), bool] */;
  %965 = shape_of(%963, dtype="int32") /* ty=Tensor[(1), int32] */;
  %966 = cast(%963, dtype="bool") /* ty=Tensor[(896), bool] */;
  %967 = dyn.reshape(%964, %965, newshape=[]) /* ty=Tensor[(?), bool] */;
  greater(%966, %967) /* ty=Tensor[(896), bool] */
}

def @func_13007() -> (Tensor[(896), uint32],) {
  %968 = @func_10909() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) */;
  %969 = %968.2;
  (%969,)
}

def @func_8927(%var_8916: Tensor[(135), uint64]) -> (Tensor[(630), float32], Tensor[(6, 16, 13), float32], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(6, 16, 13), float32]) {
  %970 = @func_7892() /* ty=(Tensor[(2340), float64], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(4, 2, 9), bool], int32) */;
  %971 = cast(%var_8916, dtype="uint64") /* ty=Tensor[(135), uint64] */;
  %972 = cast(meta[relay.Constant][79] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %973 = reshape(%971, newshape=[15, 9, 1]) /* ty=Tensor[(15, 9, 1), uint64] */;
  %974 = reshape(%972, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), uint64] */;
  %975 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %976 = %970.2;
  %977 = @func_6543() /* ty=Tensor[(6, 16, 13), float32] */;
  %978 = @func_301(%973, %974) /* ty=Tensor[(15, 9, 12), uint64] */;
  %979 = %975.0;
  (%976, %977, %978, %var_8916, meta[relay.Constant][79] /* ty=Tensor[(1620), uint64] */, %979)
}

def @func_13439() -> Tensor[(6, 16, 13), float32] {
  %980 = @func_11982() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(1, 324), uint32], Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
  %980.3
}

def @func_12419() -> Tensor[(728), float64] {
  %981 = @func_11733() /* ty=(Tensor[(728), float64],) */;
  %981.0
}

def @func_13176(%var_13158: Tensor[(728), float64]) -> (Tensor[(6, 16, 13), bool], Tensor[(728), uint64], Tensor[(6, 16, 13), float32]) {
  %982 = @func_12890() /* ty=(Tensor[(6, 16, 13), bool],) */;
  %983 = @func_10647() /* ty=Tensor[(728), float64] */;
  %984 = cast(%var_13158, dtype="uint64") /* ty=Tensor[(728), uint64] */;
  %985 = shape_of(%983, dtype="int32") /* ty=Tensor[(1), int32] */;
  %986 = cast(%983, dtype="uint64") /* ty=Tensor[(728), uint64] */;
  %987 = dyn.reshape(%984, %985, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %988 = %982.0;
  %989 = add(%986, %987) /* ty=Tensor[(728), uint64] */;
  %990 = @func_11310() /* ty=Tensor[(6, 16, 13), float32] */;
  (%988, %989, %990)
}

def @func_8300(%var_8276: Tensor[(588), float64], %var_8279: Tensor[(728), float64], %var_8281: Tensor[(2340), float64]) -> (Tensor[(7, 7, 12), float64], Tensor[(588), float64], Tensor[(728), float64], Tensor[(2340), bool], Tensor[(6, 16, 13), uint8]) {
  %991 = cast(%var_8276, dtype="float64") /* ty=Tensor[(588), float64] */;
  %992 = reshape(%991, newshape=[7, 7, 12]) /* ty=Tensor[(7, 7, 12), float64] */;
  %993 = @func_7666() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) */;
  %994 = %993.2;
  %995 = cast(%var_8281, dtype="bool") /* ty=Tensor[(2340), bool] */;
  %996 = shape_of(%994, dtype="int32") /* ty=Tensor[(1), int32] */;
  %997 = cast(%994, dtype="bool") /* ty=Tensor[(2340), bool] */;
  %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?), bool] */;
  %999 = cast(%var_8279, dtype="float64") /* ty=Tensor[(728), float64] */;
  %1000 = reshape(%999, newshape=[14, 52]) /* ty=Tensor[(14, 52), float64] */;
  %1001 = @func_6647(%1000) /* ty=(Tensor[(6, 16, 13), bool], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(14, 52), float64]) */;
  %1002 = %1001.0;
  %1003 = cast(meta[relay.Constant][80] /* ty=Tensor[(6, 16, 13), bool] */, dtype="uint8") /* ty=Tensor[(6, 16, 13), uint8] */;
  %1004 = shape_of(%1002, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1005 = cast(%1002, dtype="uint8") /* ty=Tensor[(6, 16, 13), uint8] */;
  %1006 = dyn.reshape(%1003, %1004, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1007 = @func_3423(%992) /* ty=Tensor[(7, 7, 12), float64] */;
  %1008 = logical_or(%997, %998) /* ty=Tensor[(2340), bool] */;
  %1009 = bitwise_xor(%1005, %1006) /* ty=Tensor[(6, 16, 13), uint8] */;
  (%1007, %var_8276, %var_8279, %1008, %1009)
}

def @func_11982() -> (Tensor[(6, 16, 13), float32], Tensor[(1, 324), uint32], Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) {
  %1010 = @func_10066() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %1011 = @func_9350() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(1, 324), uint32], Tensor[(728), float64], Tensor[(728), float64]) */;
  %1012 = @func_11310() /* ty=Tensor[(6, 16, 13), float32] */;
  %1013 = cast(%1012, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %1014 = %1010.0;
  %1015 = %1011.2;
  %1016 = @func_10143() /* ty=Tensor[(6, 16, 13), float32] */;
  %1017 = sinh(%1013) /* ty=Tensor[(6, 16, 13), float32] */;
  (%1014, %1015, %1016, %1017)
}

def @func_7012(%var_6983: Tensor[(728), float64], %var_6994: Tensor[(2, 208), uint64], %var_6995: Tensor[(1452), int16], %var_6996: Tensor[(8), int8], %var_7002: Tensor[(2, 4, 13), bool]) -> (Tensor[(728), float32], Tensor[(2, 208), uint64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(2, 4, 13), bool]) {
  %1018 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %1019 = %1018.2;
  %1020 = cast(%var_6983, dtype="float32") /* ty=Tensor[(728), float32] */;
  %1021 = shape_of(%1019, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1022 = cast(%1019, dtype="float32") /* ty=Tensor[(728), float32] */;
  %1023 = dyn.reshape(%1020, %1021, newshape=[]) /* ty=Tensor[(?), float32] */;
  %1024 = cast(%var_6994, dtype="uint64") /* ty=Tensor[(2, 208), uint64] */;
  %1025 = cast(%var_6994, dtype="uint64") /* ty=Tensor[(2, 208), uint64] */;
  %1026 = cast(%var_6995, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %1027 = cast(%var_6996, dtype="int8") /* ty=Tensor[(8), int8] */;
  %1028 = reshape(%1024, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %1029 = reshape(%1025, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %1030 = reshape(%1026, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
  %1031 = reshape(%1027, newshape=[8]) /* ty=Tensor[(8), int8] */;
  %1032 = @func_3942(%1028, %1029, %1030, %1031) /* ty=(Tensor[(16, 13, 2), uint64], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(2, 4, 13), bool], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64]) */;
  %1033 = %1032.3;
  %1034 = cast(%var_7002, dtype="bool") /* ty=Tensor[(2, 4, 13), bool] */;
  %1035 = shape_of(%1033, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1036 = cast(%1033, dtype="bool") /* ty=Tensor[(2, 4, 13), bool] */;
  %1037 = dyn.reshape(%1034, %1035, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1038 = divide(%1022, %1023) /* ty=Tensor[(728), float32] */;
  %1039 = not_equal(%1036, %1037) /* ty=Tensor[(2, 4, 13), bool] */;
  (%1038, %var_6994, %var_6995, %var_6996, %1039)
}

def @func_7328() -> (Tensor[(728), float64],) {
  %1040 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %1041 = %1040.2;
  (%1041,)
}

def @func_7666() -> (Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) {
  %1042 = cast(meta[relay.Constant][81] /* ty=Tensor[(2340), float64] */, dtype="float64") /* ty=Tensor[(2340), float64] */;
  %1043 = reshape(%1042, newshape=[12, 13, 15]) /* ty=Tensor[(12, 13, 15), float64] */;
  %1044 = @func_7090(%1043) /* ty=(Tensor[(12, 13, 15), float64],) */;
  %1045 = @func_6543() /* ty=Tensor[(6, 16, 13), float32] */;
  %1046 = %1044.0;
  (%1045, %1046, meta[relay.Constant][81] /* ty=Tensor[(2340), float64] */)
}

def @func_13475() -> Tensor[(6, 16, 13), float32] {
  @func_13439() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_6797(%var_6714: Tensor[(6, 16, 13), float32], %var_6775: Tensor[(330), uint8], %var_6793: Tensor[(20, 32), float32]) -> (Tensor[(6, 16, 13), float64], Tensor[(6, 16, 13), float32], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(3, 11, 10), uint8], Tensor[(330), uint8], Tensor[(630, 1), float32], Tensor[(20, 32), bool]) {
  %1047 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %1048 = %1047.0;
  %1049 = cast(%var_6714, dtype="float64") /* ty=Tensor[(6, 16, 13), float64] */;
  %1050 = shape_of(%1048, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1051 = cast(%1048, dtype="float64") /* ty=Tensor[(6, 16, 13), float64] */;
  %1052 = dyn.reshape(%1049, %1050, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1053 = cast(%1048, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %1054 = cast(meta[relay.Constant][82] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %1055 = reshape(%1054, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), float64] */;
  %1056 = @func_2236(%1055) /* ty=(Tensor[(8, 4, 4), float64],) */;
  %1057 = cast(%var_6775, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %1058 = reshape(%1057, newshape=[3, 11, 10]) /* ty=Tensor[(3, 11, 10), uint8] */;
  %1059 = @func_2823(%1058) /* ty=(Tensor[(3, 11, 10), uint8], Tensor[(3, 11, 10), bool]) */;
  %1060 = cast(meta[relay.Constant][83] /* ty=Tensor[(20, 32), float32] */, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
  %1061 = reshape(%1060, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float32] */;
  %1062 = @func_3977(%1061) /* ty=(Tensor[(10, 16, 4), float32], Tensor[(15, 14, 3), float32], Tensor[(630, 1), float32]) */;
  %1063 = cast(%var_6793, dtype="bool") /* ty=Tensor[(20, 32), bool] */;
  %1064 = shape_of(meta[relay.Constant][83] /* ty=Tensor[(20, 32), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1065 = cast(meta[relay.Constant][83] /* ty=Tensor[(20, 32), float32] */, dtype="bool") /* ty=Tensor[(20, 32), bool] */;
  %1066 = dyn.reshape(%1063, %1064, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1067 = mod(%1051, %1052) /* ty=Tensor[(6, 16, 13), float64] */;
  %1068 = log2(%1053) /* ty=Tensor[(6, 16, 13), float32] */;
  %1069 = %1056.0;
  %1070 = %1059.0;
  %1071 = %1062.2;
  %1072 = less(%1065, %1066) /* ty=Tensor[(20, 32), bool] */;
  (%1067, %1068, %1069, meta[relay.Constant][82] /* ty=Tensor[(128), float64] */, %1070, %var_6775, %1071, %1072)
}

def @func_10471() -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(728), float64]) {
  %1073 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %1074 = cast(meta[relay.Constant][84] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %1075 = reshape(%1074, newshape=[14, 52]) /* ty=Tensor[(14, 52), float64] */;
  %1076 = @func_6647(%1075) /* ty=(Tensor[(6, 16, 13), bool], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(14, 52), float64]) */;
  %1077 = %1073.0;
  %1078 = %1076.1;
  (%1077, %1078, meta[relay.Constant][84] /* ty=Tensor[(728), float64] */)
}

def @func_10592() -> Tensor[(7, 8, 7), float32] {
  %1079 = cast(meta[relay.Constant][85] /* ty=Tensor[(7, 8, 7), float32] */, dtype="float32") /* ty=Tensor[(7, 8, 7), float32] */;
  exp(%1079) /* ty=Tensor[(7, 8, 7), float32] */
}

def @func_11518() -> (Tensor[(728), float64],) {
  %1080 = @func_8821() /* ty=Tensor[(728), float64] */;
  (%1080,)
}

def @func_12348() -> (Tensor[(128), float64],) {
  %1081 = @func_8881() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(728), float64], Tensor[(128), float64], Tensor[(4, 2, 9), bool], int32) */;
  %1082 = %1081.2;
  (%1082,)
}

def @func_14295() -> (Tensor[(6, 16, 13), float32],) {
  %1083 = @func_12323() /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), float32]) */;
  %1084 = %1083.1;
  (%1084,)
}

def @func_301(%var_281: Tensor[(15, 9, 1), uint64], %var_282: Tensor[(15, 9, 12), uint64]) -> Tensor[(15, 9, 12), uint64] {
  %1085 = cast(%var_281, dtype="uint64") /* ty=Tensor[(15, 9, 1), uint64] */;
  %1086 = cast(%var_282, dtype="uint64") /* ty=Tensor[(15, 9, 12), uint64] */;
  bitwise_or(%1085, %1086) /* ty=Tensor[(15, 9, 12), uint64] */
}

def @func_10373(%var_10367: Tensor[(48), float32]) -> (Tensor[(728), float64], Tensor[(12, 4, 1), float32], Tensor[(48), float32]) {
  %1087 = @func_9129() /* ty=(Tensor[(728), float64],) */;
  %1088 = cast(%var_10367, dtype="float32") /* ty=Tensor[(48), float32] */;
  %1089 = reshape(%1088, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float32] */;
  %1090 = %1087.0;
  %1091 = @func_5146(%1089) /* ty=Tensor[(12, 4, 1), float32] */;
  (%1090, %1091, %var_10367)
}

def @func_7570(%var_7556: Tensor[(728), float64], %var_7565: Tensor[(1452), int16], %var_7566: Tensor[(8), int8]) -> (Tensor[(728), uint64], Tensor[(128), float64], Tensor[(1452), int16], Tensor[(8), int8]) {
  %1092 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %1093 = %1092.2;
  %1094 = cast(%var_7556, dtype="uint64") /* ty=Tensor[(728), uint64] */;
  %1095 = shape_of(%1093, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1096 = cast(%1093, dtype="uint64") /* ty=Tensor[(728), uint64] */;
  %1097 = dyn.reshape(%1094, %1095, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %1098 = cast(%var_7565, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %1099 = cast(%var_7566, dtype="int8") /* ty=Tensor[(8), int8] */;
  %1100 = reshape(%1098, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
  %1101 = reshape(%1099, newshape=[8]) /* ty=Tensor[(8), int8] */;
  %1102 = @func_7308(%1100, %1101) /* ty=(Tensor[(8, 7, 13), float32], Tensor[(128), float64], Tensor[(416), uint64], Tensor[(1452), int16], Tensor[(8), int8]) */;
  %1103 = maximum(%1096, %1097) /* ty=Tensor[(728), uint64] */;
  %1104 = %1102.1;
  (%1103, %1104, %var_7565, %var_7566)
}

def @func_13883() -> (Tensor[(728), float64], Tensor[(728), float64]) {
  %1105 = @func_11621() /* ty=(Tensor[(728), float64],) */;
  %1106 = @func_12085() /* ty=Tensor[(728), float64] */;
  %1107 = %1105.0;
  (%1106, %1107)
}

def @func_15410(%var_15360: Tensor[(4, 104), uint64], %var_15361: Tensor[(1452), int16]) -> (Tensor[(3, 2, 13), float32], Tensor[(78), float32], Tensor[(104), int8], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), uint16], Tensor[(4, 104), float32], Tensor[(6, 16, 13), float32]) {
  %1108 = cast(meta[relay.Constant][86] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %1109 = reshape(%1108, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float32] */;
  %1110 = @func_11680(%1109) /* ty=(Tensor[(3, 2, 13), float32],) */;
  %1111 = cast(%var_15360, dtype="uint64") /* ty=Tensor[(4, 104), uint64] */;
  %1112 = cast(%var_15360, dtype="uint64") /* ty=Tensor[(4, 104), uint64] */;
  %1113 = cast(%var_15361, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %1114 = cast(meta[relay.Constant][87] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
  %1115 = reshape(%1111, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %1116 = reshape(%1112, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %1117 = reshape(%1113, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
  %1118 = reshape(%1114, newshape=[8]) /* ty=Tensor[(8), int8] */;
  %1119 = @func_3942(%1115, %1116, %1117, %1118) /* ty=(Tensor[(16, 13, 2), uint64], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(2, 4, 13), bool], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64]) */;
  %1120 = @func_10925() /* ty=Tensor[(8, 7, 13), float64] */;
  %1121 = cast(meta[relay.Constant][88] /* ty=Tensor[(8, 7, 13), float64] */, dtype="uint16") /* ty=Tensor[(8, 7, 13), uint16] */;
  %1122 = shape_of(%1120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1123 = cast(%1120, dtype="uint16") /* ty=Tensor[(8, 7, 13), uint16] */;
  %1124 = dyn.reshape(%1121, %1122, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1125 = cast(%var_15360, dtype="float32") /* ty=Tensor[(4, 104), float32] */;
  %1126 = @func_9289() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %1127 = %1110.0;
  %1128 = %1119.6;
  %1129 = @func_14827() /* ty=Tensor[(6, 16, 13), float32] */;
  %1130 = subtract(%1123, %1124) /* ty=Tensor[(8, 7, 13), uint16] */;
  %1131 = sqrt(%1125) /* ty=Tensor[(4, 104), float32] */;
  %1132 = %1126.0;
  (%1127, meta[relay.Constant][86] /* ty=Tensor[(78), float32] */, %1128, %var_15361, meta[relay.Constant][87] /* ty=Tensor[(8), int8] */, %1129, %1130, %1131, %1132)
}

def @func_355(%var_340: Tensor[(13, 16, 3), int16], %var_341: Tensor[(13, 16, 3), int16]) -> (Tensor[(13, 16, 3), int16],) {
  %1133 = cast(%var_341, dtype="int16") /* ty=Tensor[(13, 16, 3), int16] */;
  %1134 = shape_of(%var_340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1135 = cast(%var_340, dtype="int16") /* ty=Tensor[(13, 16, 3), int16] */;
  %1136 = dyn.reshape(%1133, %1134, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1137 = left_shift(%1135, %1136) /* ty=Tensor[(13, 16, 3), int16] */;
  (%1137,)
}

def @func_12323() -> (Tensor[(728), float64], Tensor[(6, 16, 13), float32]) {
  %1138 = @func_8821() /* ty=Tensor[(728), float64] */;
  %1139 = @func_8792() /* ty=Tensor[(6, 16, 13), float32] */;
  (%1138, %1139)
}

def @func_613(%var_563: Tensor[(2, 4, 1), int8], %var_564: Tensor[(2, 4, 13), int8], %var_603: Tensor[(8, 78), int16]) -> (Tensor[(2, 4, 13), bool], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(540, 3), uint64], Tensor[(15, 9, 12), uint64], Tensor[(15, 9, 12), uint64], Tensor[(13, 16, 3), int16], Tensor[(8, 78), int16]) {
  %1140 = cast(%var_563, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
  %1141 = cast(%var_564, dtype="bool") /* ty=Tensor[(2, 4, 13), bool] */;
  %1142 = cast(meta[relay.Constant][89] /* ty=Tensor[(135), uint64] */, dtype="uint64") /* ty=Tensor[(135), uint64] */;
  %1143 = cast(meta[relay.Constant][90] /* ty=Tensor[(540, 3), uint64] */, dtype="uint64") /* ty=Tensor[(540, 3), uint64] */;
  %1144 = reshape(%1142, newshape=[15, 9, 1]) /* ty=Tensor[(15, 9, 1), uint64] */;
  %1145 = reshape(%1143, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), uint64] */;
  %1146 = cast(meta[relay.Constant][89] /* ty=Tensor[(135), uint64] */, dtype="uint64") /* ty=Tensor[(135), uint64] */;
  %1147 = @func_301(%1144, %1145) /* ty=Tensor[(15, 9, 12), uint64] */;
  %1148 = cast(%1147, dtype="uint64") /* ty=Tensor[(15, 9, 12), uint64] */;
  %1149 = reshape(%1146, newshape=[15, 9, 1]) /* ty=Tensor[(15, 9, 1), uint64] */;
  %1150 = reshape(%1148, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), uint64] */;
  %1151 = cast(meta[relay.Constant][89] /* ty=Tensor[(135), uint64] */, dtype="uint64") /* ty=Tensor[(135), uint64] */;
  %1152 = cast(%1147, dtype="uint64") /* ty=Tensor[(15, 9, 12), uint64] */;
  %1153 = reshape(%1151, newshape=[15, 9, 1]) /* ty=Tensor[(15, 9, 1), uint64] */;
  %1154 = reshape(%1152, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), uint64] */;
  %1155 = cast(%var_603, dtype="int16") /* ty=Tensor[(8, 78), int16] */;
  %1156 = cast(%var_603, dtype="int16") /* ty=Tensor[(8, 78), int16] */;
  %1157 = reshape(%1155, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %1158 = reshape(%1156, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %1159 = @func_355(%1157, %1158) /* ty=(Tensor[(13, 16, 3), int16],) */;
  %1160 = greater_equal(%1140, %1141) /* ty=Tensor[(2, 4, 13), bool] */;
  %1161 = @func_301(%1149, %1150) /* ty=Tensor[(15, 9, 12), uint64] */;
  %1162 = @func_301(%1153, %1154) /* ty=Tensor[(15, 9, 12), uint64] */;
  %1163 = %1159.0;
  (%1160, %1147, meta[relay.Constant][89] /* ty=Tensor[(135), uint64] */, meta[relay.Constant][90] /* ty=Tensor[(540, 3), uint64] */, %1161, %1162, %1163, %var_603)
}

def @func_10245() -> Tensor[(6, 16, 13), float32] {
  @func_8792() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_8792() -> Tensor[(6, 16, 13), float32] {
  %1164 = @func_6482() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %1164.0
}

def @func_15653() -> (Tensor[(1, 48), float32], Tensor[(6, 16, 13), float32]) {
  %1165 = @func_12767() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(128), float64], Tensor[(128), float64], Tensor[(728), float64], Tensor[(1, 48), float32]) */;
  %1166 = @func_14383() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
  %1167 = %1165.4;
  %1168 = %1166.1;
  (%1167, %1168)
}

def @func_10977() -> (Tensor[(630), float32], Tensor[(15, 14, 3), float32]) {
  %1169 = @func_8720() /* ty=Tensor[(630), float32] */;
  %1170 = cast(%1169, dtype="float32") /* ty=Tensor[(630), float32] */;
  %1171 = reshape(%1170, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), float32] */;
  %1172 = @func_1855(%1171) /* ty=Tensor[(15, 14, 3), float32] */;
  (%1169, %1172)
}

def @func_9475(%var_9425: Tensor[(728), float64], %var_9458: Tensor[(2340, 1), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(1452), int16], Tensor[(728), float64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(12, 13, 15), float64], Tensor[(2340, 728), int16]) {
  %1173 = @func_9388() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %1174 = cast(%var_9425, dtype="float64") /* ty=Tensor[(728), float64] */;
  %1175 = cast(meta[relay.Constant][91] /* ty=Tensor[(1452), int16] */, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %1176 = cast(meta[relay.Constant][92] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
  %1177 = reshape(%1174, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %1178 = reshape(%1175, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
  %1179 = reshape(%1176, newshape=[8]) /* ty=Tensor[(8), int8] */;
  %1180 = @func_7570(%1177, %1178, %1179) /* ty=(Tensor[(728), uint64], Tensor[(128), float64], Tensor[(1452), int16], Tensor[(8), int8]) */;
  %1181 = cast(%var_9458, dtype="float64") /* ty=Tensor[(2340, 1), float64] */;
  %1182 = reshape(%1181, newshape=[12, 13, 15]) /* ty=Tensor[(12, 13, 15), float64] */;
  %1183 = @func_7090(%1182) /* ty=(Tensor[(12, 13, 15), float64],) */;
  %1184 = @func_8881() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(728), float64], Tensor[(128), float64], Tensor[(4, 2, 9), bool], int32) */;
  %1185 = %1184.1;
  %1186 = cast(%1185, dtype="int16") /* ty=Tensor[(728), int16] */;
  %1187 = cast(%var_9458, dtype="int16") /* ty=Tensor[(2340, 1), int16] */;
  %1188 = %1173.0;
  %1189 = %1180.2;
  %1190 = %1183.0;
  %1191 = logical_xor(%1186, %1187) /* ty=Tensor[(2340, 728), int16] */;
  (%1188, %1189, %var_9425, meta[relay.Constant][91] /* ty=Tensor[(1452), int16] */, meta[relay.Constant][92] /* ty=Tensor[(8), int8] */, %1190, %1191)
}

def @func_3942(%var_3910: Tensor[(16, 13, 2), uint64], %var_3911: Tensor[(16, 13, 2), uint64], %var_3933: Tensor[(1452), int16], %var_3934: Tensor[(8), int8]) -> (Tensor[(16, 13, 2), uint64], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(2, 4, 13), bool], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64]) {
  %1192 = cast(%var_3911, dtype="uint64") /* ty=Tensor[(16, 13, 2), uint64] */;
  %1193 = shape_of(%var_3910, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1194 = cast(%var_3910, dtype="uint64") /* ty=Tensor[(16, 13, 2), uint64] */;
  %1195 = dyn.reshape(%1192, %1193, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1196 = cast(meta[relay.Constant][93] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %1197 = reshape(%1196, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), float64] */;
  %1198 = @func_2236(%1197) /* ty=(Tensor[(8, 4, 4), float64],) */;
  %1199 = cast(%var_3933, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %1200 = cast(%var_3933, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %1201 = cast(%var_3934, dtype="int8") /* ty=Tensor[(8), int8] */;
  %1202 = cast(meta[relay.Constant][94] /* ty=Tensor[(104), int8] */, dtype="int8") /* ty=Tensor[(104), int8] */;
  %1203 = cast(meta[relay.Constant][95] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %1204 = reshape(%1199, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int16] */;
  %1205 = reshape(%1200, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int16] */;
  %1206 = reshape(%1201, newshape=[8]) /* ty=Tensor[(8), int8] */;
  %1207 = reshape(%1202, newshape=[104]) /* ty=Tensor[(104), int8] */;
  %1208 = reshape(%1203, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %1209 = @func_1046(%1204, %1205, %1206, %1207, %1208) /* ty=(Tensor[(12, 11, 11), int16], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(13, 16, 3), int16], Tensor[(2, 4, 13), bool], Tensor[(8), int8], Tensor[(104), int8], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(13, 16, 3), int16]) */;
  %1210 = left_shift(%1194, %1195) /* ty=Tensor[(16, 13, 2), uint64] */;
  %1211 = %1198.0;
  %1212 = %1209.4;
  (%1210, %1211, meta[relay.Constant][93] /* ty=Tensor[(128), float64] */, %1212, %var_3933, %var_3934, meta[relay.Constant][94] /* ty=Tensor[(104), int8] */, meta[relay.Constant][95] /* ty=Tensor[(1620), uint64] */)
}

def @func_14086() -> Tensor[(896), bool] {
  @func_13281() /* ty=Tensor[(896), bool] */
}

def @func_8493() -> (Tensor[(630), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) {
  %1213 = @func_7892() /* ty=(Tensor[(2340), float64], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(4, 2, 9), bool], int32) */;
  %1214 = cast(meta[relay.Constant][96] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %1215 = reshape(%1214, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float64] */;
  %1216 = %1213.2;
  %1217 = @func_1915(%1215) /* ty=Tensor[(8, 7, 13), float64] */;
  (%1216, %1217, meta[relay.Constant][96] /* ty=Tensor[(728), float64] */)
}

def @func_12895() -> (Tensor[(728), float64],) {
  %1218 = @func_7373() /* ty=(Tensor[(728), float64],) */;
  %1219 = %1218.0;
  (%1219,)
}

def @func_13241(%var_13238: Tensor[(112, 8), uint32]) -> (Tensor[(6, 16, 13), float64], Tensor[(8, 1), int8], Tensor[(112, 8), uint32]) {
  %1220 = @func_9388() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %1221 = %1220.0;
  %1222 = cast(%1221, dtype="float64") /* ty=Tensor[(6, 16, 13), float64] */;
  %1223 = cast(%var_13238, dtype="uint32") /* ty=Tensor[(112, 8), uint32] */;
  %1224 = reshape(%1223, newshape=[896]) /* ty=Tensor[(896), uint32] */;
  %1225 = @func_4459(%1224) /* ty=(Tensor[(9, 8, 7), int8], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(8, 1), int8], Tensor[(896), uint32], Tensor[(1, 1452), int16], Tensor[(13, 16, 3), int16]) */;
  %1226 = tan(%1222) /* ty=Tensor[(6, 16, 13), float64] */;
  %1227 = %1225.3;
  (%1226, %1227, %var_13238)
}

def @func_9064(%var_9032: Tensor[(48), float32], %var_9033: Tensor[(896), uint32]) -> (Tensor[(728), float64], Tensor[(6, 16, 13), bool], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(128), float64], Tensor[(5, 66), uint8], Tensor[(20, 32), float32], Tensor[(2340), float64]) {
  %1228 = @func_8513() /* ty=(Tensor[(728), float64],) */;
  %1229 = cast(%var_9032, dtype="float32") /* ty=Tensor[(48), float32] */;
  %1230 = cast(%var_9033, dtype="uint32") /* ty=Tensor[(896), uint32] */;
  %1231 = cast(meta[relay.Constant][97] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %1232 = reshape(%1229, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %1233 = reshape(%1230, newshape=[896]) /* ty=Tensor[(896), uint32] */;
  %1234 = reshape(%1231, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %1235 = @func_8614(%1232, %1233, %1234) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 4, ?), float64], Tensor[(896), uint32], Tensor[(896), uint32], Tensor[(8, 4, 4), float64], Tensor[(12, 4, 128), bool], Tensor[(2, 10, 15), int8], int8, Tensor[(6, 16, 13), bool], Tensor[(728), float64]) */;
  %1236 = %1235.8;
  %1237 = cast(%1236, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %1238 = cast(meta[relay.Constant][98] /* ty=Tensor[(5, 66), uint8] */, dtype="uint8") /* ty=Tensor[(5, 66), uint8] */;
  %1239 = cast(meta[relay.Constant][99] /* ty=Tensor[(20, 32), float32] */, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
  %1240 = reshape(%1237, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), float32] */;
  %1241 = reshape(%1238, newshape=[330]) /* ty=Tensor[(330), uint8] */;
  %1242 = reshape(%1239, newshape=[20, 32]) /* ty=Tensor[(20, 32), float32] */;
  %1243 = @func_6797(%1240, %1241, %1242) /* ty=(Tensor[(6, 16, 13), float64], Tensor[(6, 16, 13), float32], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(3, 11, 10), uint8], Tensor[(330), uint8], Tensor[(630, 1), float32], Tensor[(20, 32), bool]) */;
  %1244 = @func_7892() /* ty=(Tensor[(2340), float64], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(4, 2, 9), bool], int32) */;
  %1245 = %1228.0;
  %1246 = %1243.3;
  %1247 = %1244.0;
  (%1245, %1236, %var_9032, %var_9033, meta[relay.Constant][97] /* ty=Tensor[(128), float64] */, %1246, meta[relay.Constant][98] /* ty=Tensor[(5, 66), uint8] */, meta[relay.Constant][99] /* ty=Tensor[(20, 32), float32] */, %1247)
}

def @func_3549(%var_3545: Tensor[(3, 3, 12), float64]) -> (Tensor[(3, 3, 12), float64],) {
  %1248 = cast(%var_3545, dtype="float64") /* ty=Tensor[(3, 3, 12), float64] */;
  %1249 = cos(%1248) /* ty=Tensor[(3, 3, 12), float64] */;
  (%1249,)
}

def @func_12085() -> Tensor[(728), float64] {
  @func_10647() /* ty=Tensor[(728), float64] */
}

def @func_12394(%var_12389: Tensor[(6, 11, 15), uint16], %var_12390: Tensor[(6, 11, 15), uint16]) -> (Tensor[(6, 11, 15), bool],) {
  %1250 = cast(%var_12390, dtype="bool") /* ty=Tensor[(6, 11, 15), bool] */;
  %1251 = shape_of(%var_12389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1252 = cast(%var_12389, dtype="bool") /* ty=Tensor[(6, 11, 15), bool] */;
  %1253 = dyn.reshape(%1250, %1251, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1254 = not_equal(%1252, %1253) /* ty=Tensor[(6, 11, 15), bool] */;
  (%1254,)
}

def @func_14221() -> (Tensor[(630), float32], Tensor[(728), float64]) {
  %1255 = @func_6864() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %1256 = @func_8720() /* ty=Tensor[(630), float32] */;
  %1257 = %1255.2;
  (%1256, %1257)
}

def @func_15604() -> (Tensor[(728), float64],) {
  %1258 = @func_14513() /* ty=Tensor[(728), float64] */;
  (%1258,)
}

def @func_10864() -> Tensor[(6, 16, 13), float32] {
  %1259 = @func_9350() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(1, 324), uint32], Tensor[(728), float64], Tensor[(728), float64]) */;
  %1259.0
}

def @func_15268(%var_15263: Tensor[(2340), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) {
  %1260 = @func_12323() /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), float32]) */;
  %1261 = @func_12382() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %1262 = cast(%var_15263, dtype="float64") /* ty=Tensor[(2340), float64] */;
  %1263 = reshape(%1262, newshape=[12, 13, 15]) /* ty=Tensor[(12, 13, 15), float64] */;
  %1264 = @func_7090(%1263) /* ty=(Tensor[(12, 13, 15), float64],) */;
  %1265 = %1260.1;
  %1266 = %1261.0;
  %1267 = %1264.0;
  (%1265, %1266, %1267, %var_15263)
}

def @func_13754() -> (Tensor[(728), float64],) {
  %1268 = @func_12622() /* ty=Tensor[(728), float64] */;
  (%1268,)
}

def @func_8105(%var_8090: Tensor[(1728), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(16, 9, 12), uint32], Tensor[(1728), float64], Tensor[(128), float64]) {
  %1269 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %1270 = cast(%var_8090, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %1271 = cast(meta[relay.Constant][100] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %1272 = reshape(%1270, newshape=[16, 9, 12]) /* ty=Tensor[(16, 9, 12), float64] */;
  %1273 = reshape(%1271, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %1274 = @func_5640(%1272, %1273) /* ty=(Tensor[(?, 9, 12), bool], Tensor[(16, 9, 12), uint32], Tensor[(5, 16, 1), uint32], Tensor[(80), uint32], Tensor[(128), float64]) */;
  %1275 = %1269.0;
  %1276 = %1274.1;
  (%1275, %1276, %var_8090, meta[relay.Constant][100] /* ty=Tensor[(128), float64] */)
}

def @func_11279() -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) {
  %1277 = @func_10245() /* ty=Tensor[(6, 16, 13), float32] */;
  %1278 = @func_9528() /* ty=Tensor[(6, 16, 13), float32] */;
  (%1277, %1278)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_10587(%var_10585: Tensor[(728), float64]) -> (Tensor[(728), float64], Tensor[(8, 7, 13), float64]) {
  @func_10584(%var_10585) /* ty=(Tensor[(728), float64], Tensor[(8, 7, 13), float64]) */
}

def @func_9530() -> Tensor[(6, 16, 13), float32] {
  @func_9528() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_10496() -> (Tensor[(728), float64],) {
  @func_10494() /* ty=(Tensor[(728), float64],) */
}

def @func_14827() -> Tensor[(6, 16, 13), float32] {
  @func_10864() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_11170() -> (Tensor[(6, 16, 13), float32],) {
  %1 = fn () -> (Tensor[(6, 16, 13), float32],) {
    %0 = @func_10143() /* ty=Tensor[(6, 16, 13), float32] */;
    (%0,)
  };
  %1() /* ty=(Tensor[(6, 16, 13), float32],) */
}

def @func_5640(%var_5625: Tensor[(16, 9, 12), float64], %var_5637: Tensor[(128), float64]) -> (Tensor[(?, 9, 12), bool], Tensor[(16, 9, 12), uint32], Tensor[(5, 16, 1), uint32], Tensor[(80), uint32], Tensor[(128), float64]) {
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %3 = log10(%2) /* ty=Tensor[(1, 9, 12), float64] */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %5 = shape_of(%3, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(%3, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %8 = divide(%6, %7) /* ty=Tensor[(?, 9, 12), float64] */;
  %9 = cast(%8, dtype="bool") /* ty=Tensor[(?, 9, 12), bool] */;
  %10 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(1, 9, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 9, 12), float64] */, dtype="bool") /* ty=Tensor[(1, 9, 12), bool] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 9, 12), float64] */, dtype="uint32") /* ty=Tensor[(1, 9, 12), uint32] */;
  %14 = cast(%var_5625, dtype="uint32") /* ty=Tensor[(16, 9, 12), uint32] */;
  %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(80), uint32] */, dtype="uint32") /* ty=Tensor[(80), uint32] */;
  %16 = cast(%var_5637, dtype="float64") /* ty=Tensor[(128), float64] */;
  %17 = reshape(%15, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), uint32] */;
  %18 = reshape(%16, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %19 = @func_4195(%17, %18) /* ty=(Tensor[(5, 16, 1), uint32], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
  %20 = not_equal(%11, %12) /* ty=Tensor[(?, 9, 12), bool] */;
  %21 = logical_xor(%13, %14) /* ty=Tensor[(16, 9, 12), uint32] */;
  %22 = %19.0;
  (%20, %21, %22, meta[relay.Constant][1] /* ty=Tensor[(80), uint32] */, %var_5637)
}

def @func_4199(%var_4197: Tensor[(5, 16, 1), uint32], %var_4198: Tensor[(128), float64]) -> (Tensor[(5, 16, 1), uint32], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) {
  @func_4195(%var_4197, %var_4198) /* ty=(Tensor[(5, 16, 1), uint32], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */
}

def @func_14639() -> (Tensor[(728), float64], Tensor[(14, 52), float64]) {
  @func_14637() /* ty=(Tensor[(728), float64], Tensor[(14, 52), float64]) */
}

def @func_15218(%var_15193: Tensor[(704), float64], %var_15213: Tensor[(630), float32]) -> (Tensor[(6, 16, 13), bool], Tensor[(16, 11, 4), float64], Tensor[(704), float64], Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(14, 9, 5), float32], Tensor[(630), float32]) {
  %23 = @func_12890() /* ty=(Tensor[(6, 16, 13), bool],) */;
  %24 = cast(%var_15193, dtype="float64") /* ty=Tensor[(704), float64] */;
  %25 = reshape(%24, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), float64] */;
  %26 = @func_7328() /* ty=(Tensor[(728), float64],) */;
  %27 = @func_14383() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
  %28 = cast(%var_15213, dtype="float32") /* ty=Tensor[(630), float32] */;
  %29 = reshape(%28, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %30 = @func_7236(%29) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(6, 16, 13), float32]) */;
  %31 = %23.0;
  %32 = @func_5728(%25) /* ty=Tensor[(16, 11, 4), float64] */;
  %33 = %26.0;
  %34 = %27.1;
  %35 = %30.1;
  (%31, %32, %var_15193, %33, %34, %35, %var_15213)
}

def @func_8703(%var_8702: Tensor[(48), float32]) -> (Tensor[(2340), float64], Tensor[(48, 1), float32], Tensor[(128), float64], Tensor[(728), float64], Tensor[(48), float32]) {
  %46 = fn (%var_8698: Tensor[(48), float32]) -> (Tensor[(2340), float64], Tensor[(48, 1), float32], Tensor[(128), float64], Tensor[(728), float64], Tensor[(48), float32]) {
    %36 = @func_7666() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) */;
    %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
    %38 = cast(meta[relay.Constant][3] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %39 = cast(%var_8698, dtype="float32") /* ty=Tensor[(48), float32] */;
    %40 = reshape(%37, newshape=[128]) /* ty=Tensor[(128), float64] */;
    %41 = reshape(%38, newshape=[728]) /* ty=Tensor[(728), float64] */;
    %42 = reshape(%39, newshape=[48, 1]) /* ty=Tensor[(48, 1), float32] */;
    %43 = @func_8681(%40, %41, %42) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(14, 52), float64], Tensor[(48, 1), float32], Tensor[(12, 4, 728), float32]) */;
    %44 = %36.2;
    %45 = %43.4;
    (%44, %45, meta[relay.Constant][2] /* ty=Tensor[(128), float64] */, meta[relay.Constant][3] /* ty=Tensor[(728), float64] */, %var_8698)
  };
  %46(%var_8702) /* ty=(Tensor[(2340), float64], Tensor[(48, 1), float32], Tensor[(128), float64], Tensor[(728), float64], Tensor[(48), float32]) */
}

def @func_8930(%var_8928: Tensor[(135), uint64]) -> (Tensor[(630), float32], Tensor[(6, 16, 13), float32], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(6, 16, 13), float32]) {
  @func_8927(%var_8928) /* ty=(Tensor[(630), float32], Tensor[(6, 16, 13), float32], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(6, 16, 13), float32]) */
}

def @func_11312() -> Tensor[(6, 16, 13), float32] {
  @func_11310() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_6545() -> Tensor[(6, 16, 13), float32] {
  @func_6543() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_6802(%var_6799: Tensor[(6, 16, 13), float32], %var_6800: Tensor[(330), uint8], %var_6801: Tensor[(20, 32), float32]) -> (Tensor[(6, 16, 13), float64], Tensor[(6, 16, 13), float32], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(3, 11, 10), uint8], Tensor[(330), uint8], Tensor[(630, 1), float32], Tensor[(20, 32), bool]) {
  @func_6797(%var_6799, %var_6800, %var_6801) /* ty=(Tensor[(6, 16, 13), float64], Tensor[(6, 16, 13), float32], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(3, 11, 10), uint8], Tensor[(330), uint8], Tensor[(630, 1), float32], Tensor[(20, 32), bool]) */
}

def @func_9351() -> (Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(1, 324), uint32], Tensor[(728), float64], Tensor[(728), float64]) {
  %61 = fn () -> (Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(1, 324), uint32], Tensor[(728), float64], Tensor[(728), float64]) {
    %47 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %48 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 324), uint32] */, dtype="uint32") /* ty=Tensor[(1, 324), uint32] */;
    %49 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 324), uint32] */, dtype="uint32") /* ty=Tensor[(1, 324), uint32] */;
    %50 = cast(meta[relay.Constant][5] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %51 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 324), uint32] */, dtype="float32") /* ty=Tensor[(1, 324), float32] */;
    %52 = reshape(%48, newshape=[9, 6, 6]) /* ty=Tensor[(9, 6, 6), uint32] */;
    %53 = reshape(%49, newshape=[9, 6, 6]) /* ty=Tensor[(9, 6, 6), uint32] */;
    %54 = reshape(%50, newshape=[728]) /* ty=Tensor[(728), float64] */;
    %55 = reshape(%51, newshape=[9, 6, 6]) /* ty=Tensor[(9, 6, 6), float32] */;
    %56 = @func_2133(%52, %53, %54, %55) /* ty=(Tensor[(8, 7, 13), float64], Tensor[(728), float64], Tensor[(8, 7, 13), float64], Tensor[(9, 6, 6), float64], Tensor[(9, 6, 6), float32]) */;
    %57 = @func_7853() /* ty=(Tensor[(728), float64],) */;
    %58 = %47.0;
    %59 = %56.2;
    %60 = %57.0;
    (%58, %59, meta[relay.Constant][4] /* ty=Tensor[(1, 324), uint32] */, meta[relay.Constant][5] /* ty=Tensor[(728), float64] */, %60)
  };
  %61() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(1, 324), uint32], Tensor[(728), float64], Tensor[(728), float64]) */
}

def @func_12323() -> (Tensor[(728), float64], Tensor[(6, 16, 13), float32]) {
  %62 = @func_8821() /* ty=Tensor[(728), float64] */;
  %63 = @func_8792() /* ty=Tensor[(6, 16, 13), float32] */;
  (%62, %63)
}

def @func_9833() -> Tensor[(728), float64] {
  %64 = @func_7853() /* ty=(Tensor[(728), float64],) */;
  %64.0
}

def @func_14160() -> Tensor[(6, 16, 13), float32] {
  %65 = fn () -> Tensor[(6, 16, 13), float32] {
    @func_10864() /* ty=Tensor[(6, 16, 13), float32] */
  };
  %65() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_8881() -> (Tensor[(6, 16, 13), float32], Tensor[(728), float64], Tensor[(128), float64], Tensor[(4, 2, 9), bool], int32) {
  %66 = cast(meta[relay.Constant][6] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %67 = reshape(%66, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %68 = @func_7588(%67) /* ty=(Tensor[(728), float64], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
  %69 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %70 = reshape(%69, newshape=[]) /* ty=int32 */;
  %71 = @func_6543() /* ty=Tensor[(6, 16, 13), float32] */;
  %72 = %68.0;
  %73 = @func_2473(%70) /* ty=Tensor[(4, 2, 9), bool] */;
  (%71, %72, meta[relay.Constant][6] /* ty=Tensor[(128), float64] */, %73, 7 /* ty=int32 */)
}

def @func_9291() -> (Tensor[(6, 16, 13), float32],) {
  @func_9289() /* ty=(Tensor[(6, 16, 13), float32],) */
}

def @func_15414(%var_15412: Tensor[(4, 104), uint64], %var_15413: Tensor[(1452), int16]) -> (Tensor[(3, 2, 13), float32], Tensor[(78), float32], Tensor[(104), int8], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), uint16], Tensor[(4, 104), float32], Tensor[(6, 16, 13), float32]) {
  @func_15410(%var_15412, %var_15413) /* ty=(Tensor[(3, 2, 13), float32], Tensor[(78), float32], Tensor[(104), int8], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), uint16], Tensor[(4, 104), float32], Tensor[(6, 16, 13), float32]) */
}

def @func_6942() -> (Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) {
  %78 = fn () -> (Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) {
    %74 = cast(meta[relay.Constant][7] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %75 = reshape(%74, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float64] */;
    %76 = @func_6543() /* ty=Tensor[(6, 16, 13), float32] */;
    %77 = @func_1915(%75) /* ty=Tensor[(8, 7, 13), float64] */;
    (%76, %77, meta[relay.Constant][7] /* ty=Tensor[(728), float64] */)
  };
  %78() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */
}

def @func_5730(%var_5729: Tensor[(16, 11, 4), float64]) -> Tensor[(16, 11, 4), float64] {
  %80 = fn (%var_5721: Tensor[(16, 11, 4), float64]) -> Tensor[(16, 11, 4), float64] {
    %79 = cast(%var_5721, dtype="float64") /* ty=Tensor[(16, 11, 4), float64] */;
    sqrt(%79) /* ty=Tensor[(16, 11, 4), float64] */
  };
  %80(%var_5729) /* ty=Tensor[(16, 11, 4), float64] */
}

def @func_8214() -> Tensor[(12, 13, 15), float64] {
  %82 = fn () -> Tensor[(12, 13, 15), float64] {
    %81 = @func_7666() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) */;
    %81.1
  };
  %82() /* ty=Tensor[(12, 13, 15), float64] */
}

def @func_13968(%var_13940: Tensor[(1728), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(16, 9, 12), uint32], Tensor[(1728), float64], Tensor[(128), float64], Tensor[(128), float64]) {
  %83 = cast(%var_13940, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %84 = cast(meta[relay.Constant][8] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %85 = reshape(%83, newshape=[16, 9, 12]) /* ty=Tensor[(16, 9, 12), float64] */;
  %86 = reshape(%84, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %87 = @func_5640(%85, %86) /* ty=(Tensor[(?, 9, 12), bool], Tensor[(16, 9, 12), uint32], Tensor[(5, 16, 1), uint32], Tensor[(80), uint32], Tensor[(128), float64]) */;
  %88 = cast(meta[relay.Constant][8] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %89 = reshape(%88, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %90 = @func_10338(%89) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(128), float64], Tensor[(128), float64]) */;
  %91 = @func_11310() /* ty=Tensor[(6, 16, 13), float32] */;
  %92 = %87.1;
  %93 = %90.2;
  (%91, %92, %var_13940, meta[relay.Constant][8] /* ty=Tensor[(128), float64] */, %93)
}

def @func_8822() -> Tensor[(728), float64] {
  %97 = fn () -> Tensor[(728), float64] {
    %94 = @func_8513() /* ty=(Tensor[(728), float64],) */;
    %95 = %94.0;
    %96 = cast(%95, dtype="float64") /* ty=Tensor[(728), float64] */;
    asinh(%96) /* ty=Tensor[(728), float64] */
  };
  %97() /* ty=Tensor[(728), float64] */
}

def @func_14055() -> Tensor[(6, 16, 13), float32] {
  @func_14053() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_12153() -> (Tensor[(728), float64], Tensor[(6, 16, 13), float32]) {
  @func_12151() /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), float32]) */
}

def @func_10594() -> Tensor[(7, 8, 7), float32] {
  @func_10592() /* ty=Tensor[(7, 8, 7), float32] */
}

def @func_10494() -> (Tensor[(728), float64],) {
  %98 = @func_8513() /* ty=(Tensor[(728), float64],) */;
  %99 = %98.0;
  (%99,)
}

def @func_2475(%var_2474: int32) -> Tensor[(4, 2, 9), bool] {
  %102 = fn (%var_2455: int32) -> Tensor[(4, 2, 9), bool] {
    %100 = cast(%var_2455, dtype="bool") /* ty=bool */;
    %101 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 2, 9), int32] */, dtype="bool") /* ty=Tensor[(4, 2, 9), bool] */;
    greater(%100, %101) /* ty=Tensor[(4, 2, 9), bool] */
  };
  %102(%var_2474) /* ty=Tensor[(4, 2, 9), bool] */
}

def @func_10592() -> Tensor[(7, 8, 7), float32] {
  %103 = cast(meta[relay.Constant][10] /* ty=Tensor[(7, 8, 7), float32] */, dtype="float32") /* ty=Tensor[(7, 8, 7), float32] */;
  exp(%103) /* ty=Tensor[(7, 8, 7), float32] */
}

def @func_7854() -> (Tensor[(728), float64],) {
  %106 = fn () -> (Tensor[(728), float64],) {
    %104 = @func_7373() /* ty=(Tensor[(728), float64],) */;
    %105 = %104.0;
    (%105,)
  };
  %106() /* ty=(Tensor[(728), float64],) */
}

def @func_304(%var_302: Tensor[(15, 9, 1), uint64], %var_303: Tensor[(15, 9, 12), uint64]) -> Tensor[(15, 9, 12), uint64] {
  %109 = fn (%var_281: Tensor[(15, 9, 1), uint64], %var_282: Tensor[(15, 9, 12), uint64]) -> Tensor[(15, 9, 12), uint64] {
    %107 = cast(%var_281, dtype="uint64") /* ty=Tensor[(15, 9, 1), uint64] */;
    %108 = cast(%var_282, dtype="uint64") /* ty=Tensor[(15, 9, 12), uint64] */;
    bitwise_or(%107, %108) /* ty=Tensor[(15, 9, 12), uint64] */
  };
  %109(%var_302, %var_303) /* ty=Tensor[(15, 9, 12), uint64] */
}

def @func_8619(%var_8616: Tensor[(48), float32], %var_8617: Tensor[(896), uint32], %var_8618: Tensor[(128), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(12, 4, ?), float64], Tensor[(896), uint32], Tensor[(896), uint32], Tensor[(8, 4, 4), float64], Tensor[(12, 4, 128), bool], Tensor[(2, 10, 15), int8], int8, Tensor[(6, 16, 13), bool], Tensor[(728), float64]) {
  @func_8614(%var_8616, %var_8617, %var_8618) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 4, ?), float64], Tensor[(896), uint32], Tensor[(896), uint32], Tensor[(8, 4, 4), float64], Tensor[(12, 4, 128), bool], Tensor[(2, 10, 15), int8], int8, Tensor[(6, 16, 13), bool], Tensor[(728), float64]) */
}

def @func_11360() -> (Tensor[(2340), float64], Tensor[(6, 16, 13), float32]) {
  %112 = fn () -> (Tensor[(2340), float64], Tensor[(6, 16, 13), float32]) {
    %110 = @func_10389() /* ty=Tensor[(2340), float64] */;
    %111 = @func_11310() /* ty=Tensor[(6, 16, 13), float32] */;
    (%110, %111)
  };
  %112() /* ty=(Tensor[(2340), float64], Tensor[(6, 16, 13), float32]) */
}

def @func_10306(%var_10304: Tensor[(135), uint64], %var_10305: Tensor[(6, 16, 13), float32]) -> (Tensor[(896), uint32], Tensor[(896), uint32], Tensor[(728), float64], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(8, 4, 4), float64], Tensor[(6, 16, 13), int64]) {
  %131 = fn (%var_10268: Tensor[(135), uint64], %var_10297: Tensor[(6, 16, 13), float32]) -> (Tensor[(896), uint32], Tensor[(896), uint32], Tensor[(728), float64], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(8, 4, 4), float64], Tensor[(6, 16, 13), int64]) {
    %113 = cast(meta[relay.Constant][11] /* ty=Tensor[(896), uint32] */, dtype="uint32") /* ty=Tensor[(896), uint32] */;
    %114 = reshape(%113, newshape=[896]) /* ty=Tensor[(896), uint32] */;
    %115 = @func_7722(%114) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) */;
    %116 = @func_7328() /* ty=(Tensor[(728), float64],) */;
    %117 = cast(%var_10268, dtype="uint64") /* ty=Tensor[(135), uint64] */;
    %118 = reshape(%117, newshape=[135]) /* ty=Tensor[(135), uint64] */;
    %119 = @func_8927(%118) /* ty=(Tensor[(630), float32], Tensor[(6, 16, 13), float32], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(6, 16, 13), float32]) */;
    %120 = @func_10083() /* ty=(Tensor[(4, 2, 9), bool], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
    %121 = @func_9528() /* ty=Tensor[(6, 16, 13), float32] */;
    %122 = cast(%var_10297, dtype="int64") /* ty=Tensor[(6, 16, 13), int64] */;
    %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
    %124 = cast(%121, dtype="int64") /* ty=Tensor[(6, 16, 13), int64] */;
    %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %126 = %115.2;
    %127 = %116.0;
    %128 = %119.2;
    %129 = %120.1;
    %130 = bitwise_and(%124, %125) /* ty=Tensor[(6, 16, 13), int64] */;
    (%126, meta[relay.Constant][11] /* ty=Tensor[(896), uint32] */, %127, %128, %var_10268, %129, %130)
  };
  %131(%var_10304, %var_10305) /* ty=(Tensor[(896), uint32], Tensor[(896), uint32], Tensor[(728), float64], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(8, 4, 4), float64], Tensor[(6, 16, 13), int64]) */
}

def @func_6649(%var_6648: Tensor[(14, 52), float64]) -> (Tensor[(6, 16, 13), bool], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(14, 52), float64]) {
  %151 = fn (%var_6644: Tensor[(14, 52), float64]) -> (Tensor[(6, 16, 13), bool], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(14, 52), float64]) {
    %132 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %133 = %132.0;
    %134 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 16, 13), float32] */, dtype="uint32") /* ty=Tensor[(6, 16, 13), uint32] */;
    %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
    %136 = cast(%133, dtype="uint32") /* ty=Tensor[(6, 16, 13), uint32] */;
    %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %138 = add(%136, %137) /* ty=Tensor[(6, 16, 13), uint32] */;
    %139 = cast(%133, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
    %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
    %141 = cast(%138, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
    %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %143 = cast(%138, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
    %144 = asinh(%143) /* ty=Tensor[(6, 16, 13), float32] */;
    %145 = cast(%144, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
    %146 = cast(%var_6644, dtype="float64") /* ty=Tensor[(14, 52), float64] */;
    %147 = reshape(%146, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float64] */;
    %148 = logical_and(%141, %142) /* ty=Tensor[(6, 16, 13), bool] */;
    %149 = acosh(%145) /* ty=Tensor[(6, 16, 13), float32] */;
    %150 = @func_1915(%147) /* ty=Tensor[(8, 7, 13), float64] */;
    (%148, %149, %150, %var_6644)
  };
  %151(%var_6648) /* ty=(Tensor[(6, 16, 13), bool], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(14, 52), float64]) */
}

def @func_13755() -> (Tensor[(728), float64],) {
  %153 = fn () -> (Tensor[(728), float64],) {
    %152 = @func_12622() /* ty=Tensor[(728), float64] */;
    (%152,)
  };
  %153() /* ty=(Tensor[(728), float64],) */
}

def @func_8350(%var_8334: Tensor[(728), float64]) -> (Tensor[(12, 13, 15), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) {
  %154 = @func_8213() /* ty=Tensor[(12, 13, 15), float64] */;
  %155 = cast(%154, dtype="float32") /* ty=Tensor[(12, 13, 15), float32] */;
  %156 = cast(%var_8334, dtype="float64") /* ty=Tensor[(728), float64] */;
  %157 = reshape(%156, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float64] */;
  %158 = atanh(%155) /* ty=Tensor[(12, 13, 15), float32] */;
  %159 = @func_1915(%157) /* ty=Tensor[(8, 7, 13), float64] */;
  (%158, %159, %var_8334)
}

def @func_9389() -> (Tensor[(6, 16, 13), float32],) {
  %162 = fn () -> (Tensor[(6, 16, 13), float32],) {
    %160 = @func_9289() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %161 = %160.0;
    (%161,)
  };
  %162() /* ty=(Tensor[(6, 16, 13), float32],) */
}

def @func_9896(%var_9887: Tensor[(728), float64]) -> Tensor[(728), float64] {
  %163 = @func_9722() /* ty=(Tensor[(728), float64], Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
  %164 = %163.1;
  %165 = cast(%var_9887, dtype="float64") /* ty=Tensor[(728), float64] */;
  %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(1), int32] */;
  %167 = cast(%164, dtype="float64") /* ty=Tensor[(728), float64] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?), float64] */;
  floor_mod(%167, %168) /* ty=Tensor[(728), float64] */
}

def @func_12767() -> (Tensor[(6, 16, 13), float32], Tensor[(128), float64], Tensor[(128), float64], Tensor[(728), float64], Tensor[(1, 48), float32]) {
  %169 = @func_11982() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(1, 324), uint32], Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
  %170 = %169.2;
  %171 = cast(%170, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %172 = cast(meta[relay.Constant][13] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %173 = cast(meta[relay.Constant][14] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %174 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 48), float32] */, dtype="float32") /* ty=Tensor[(1, 48), float32] */;
  %175 = reshape(%172, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %176 = reshape(%173, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %177 = reshape(%174, newshape=[48, 1]) /* ty=Tensor[(48, 1), float32] */;
  %178 = @func_8681(%175, %176, %177) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(14, 52), float64], Tensor[(48, 1), float32], Tensor[(12, 4, 728), float32]) */;
  %179 = atanh(%171) /* ty=Tensor[(6, 16, 13), float32] */;
  %180 = %178.2;
  (%179, %180, meta[relay.Constant][13] /* ty=Tensor[(128), float64] */, meta[relay.Constant][14] /* ty=Tensor[(728), float64] */, meta[relay.Constant][15] /* ty=Tensor[(1, 48), float32] */)
}

def @func_15271(%var_15269: Tensor[(2340), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) {
  @func_15268(%var_15269) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) */
}

def @func_5644(%var_5642: Tensor[(16, 9, 12), float64], %var_5643: Tensor[(128), float64]) -> (Tensor[(?, 9, 12), bool], Tensor[(16, 9, 12), uint32], Tensor[(5, 16, 1), uint32], Tensor[(80), uint32], Tensor[(128), float64]) {
  @func_5640(%var_5642, %var_5643) /* ty=(Tensor[(?, 9, 12), bool], Tensor[(16, 9, 12), uint32], Tensor[(5, 16, 1), uint32], Tensor[(80), uint32], Tensor[(128), float64]) */
}

def @func_358(%var_356: Tensor[(13, 16, 3), int16], %var_357: Tensor[(13, 16, 3), int16]) -> (Tensor[(13, 16, 3), int16],) {
  %186 = fn (%var_340: Tensor[(13, 16, 3), int16], %var_341: Tensor[(13, 16, 3), int16]) -> (Tensor[(13, 16, 3), int16],) {
    %181 = cast(%var_341, dtype="int16") /* ty=Tensor[(13, 16, 3), int16] */;
    %182 = shape_of(%var_340, dtype="int32") /* ty=Tensor[(3), int32] */;
    %183 = cast(%var_340, dtype="int16") /* ty=Tensor[(13, 16, 3), int16] */;
    %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %185 = left_shift(%183, %184) /* ty=Tensor[(13, 16, 3), int16] */;
    (%185,)
  };
  %186(%var_356, %var_357) /* ty=(Tensor[(13, 16, 3), int16],) */
}

def @func_11001() -> (Tensor[(6, 16, 13), float32],) {
  %189 = fn () -> (Tensor[(6, 16, 13), float32],) {
    %187 = @func_6864() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
    %188 = %187.0;
    (%188,)
  };
  %189() /* ty=(Tensor[(6, 16, 13), float32],) */
}

def @func_13971(%var_13969: Tensor[(1728), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(16, 9, 12), uint32], Tensor[(1728), float64], Tensor[(128), float64], Tensor[(128), float64]) {
  @func_13968(%var_13969) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(16, 9, 12), uint32], Tensor[(1728), float64], Tensor[(128), float64], Tensor[(128), float64]) */
}

def @func_11310() -> Tensor[(6, 16, 13), float32] {
  @func_8792() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_12046(%var_12044: Tensor[(1, 13, 11), float32]) -> (Tensor[(1, 13, 11), float32], Tensor[(728), float64], Tensor[(6, 16, 13), float32]) {
  @func_12043(%var_12044) /* ty=(Tensor[(1, 13, 11), float32], Tensor[(728), float64], Tensor[(6, 16, 13), float32]) */
}

def @func_10832(%var_10829: Tensor[(416), uint64], %var_10830: Tensor[(1452), int16], %var_10831: Tensor[(1728), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(16, 3, 3), float64], Tensor[(144), float64], Tensor[(1620), uint64], Tensor[(416), uint64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(80), uint32], Tensor[(1728), float64], Tensor[(128), float64]) {
  %213 = fn (%var_10799: Tensor[(416), uint64], %var_10800: Tensor[(1452), int16], %var_10815: Tensor[(1728), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(16, 3, 3), float64], Tensor[(144), float64], Tensor[(1620), uint64], Tensor[(416), uint64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(80), uint32], Tensor[(1728), float64], Tensor[(128), float64]) {
    %190 = @func_9289() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %191 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %192 = cast(meta[relay.Constant][16] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
    %193 = reshape(%192, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), float64] */;
    %194 = cast(%var_10799, dtype="uint64") /* ty=Tensor[(416), uint64] */;
    %195 = cast(%var_10799, dtype="uint64") /* ty=Tensor[(416), uint64] */;
    %196 = cast(%var_10800, dtype="int16") /* ty=Tensor[(1452), int16] */;
    %197 = cast(meta[relay.Constant][17] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
    %198 = reshape(%194, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
    %199 = reshape(%195, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
    %200 = reshape(%196, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
    %201 = reshape(%197, newshape=[8]) /* ty=Tensor[(8), int8] */;
    %202 = @func_3942(%198, %199, %200, %201) /* ty=(Tensor[(16, 13, 2), uint64], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(2, 4, 13), bool], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64]) */;
    %203 = cast(%var_10815, dtype="float64") /* ty=Tensor[(1728), float64] */;
    %204 = cast(meta[relay.Constant][18] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
    %205 = reshape(%203, newshape=[16, 9, 12]) /* ty=Tensor[(16, 9, 12), float64] */;
    %206 = reshape(%204, newshape=[128]) /* ty=Tensor[(128), float64] */;
    %207 = @func_5640(%205, %206) /* ty=(Tensor[(?, 9, 12), bool], Tensor[(16, 9, 12), uint32], Tensor[(5, 16, 1), uint32], Tensor[(80), uint32], Tensor[(128), float64]) */;
    %208 = %190.0;
    %209 = %191.0;
    %210 = @func_2608(%193) /* ty=Tensor[(16, 3, 3), float64] */;
    %211 = %202.7;
    %212 = %207.3;
    (%208, %209, %210, meta[relay.Constant][16] /* ty=Tensor[(144), float64] */, %211, %var_10799, %var_10800, meta[relay.Constant][17] /* ty=Tensor[(8), int8] */, %212, %var_10815, meta[relay.Constant][18] /* ty=Tensor[(128), float64] */)
  };
  %213(%var_10829, %var_10830, %var_10831) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(16, 3, 3), float64], Tensor[(144), float64], Tensor[(1620), uint64], Tensor[(416), uint64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(80), uint32], Tensor[(1728), float64], Tensor[(128), float64]) */
}

def @func_14985(%var_14979: Tensor[(11, 5, 9), float64]) -> Tensor[(11, 5, 9), float64] {
  %214 = cast(%var_14979, dtype="float64") /* ty=Tensor[(11, 5, 9), float64] */;
  cos(%214) /* ty=Tensor[(11, 5, 9), float64] */
}

def @func_6543() -> Tensor[(6, 16, 13), float32] {
  %215 = @func_6482() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %215.0
}

def @func_14383() -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) {
  %216 = @func_11376() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %217 = @func_11279() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
  %218 = %216.0;
  %219 = %217.0;
  (%218, %219)
}

def @func_7239(%var_7237: Tensor[(630), float32]) -> (Tensor[(6, 16, 13), float32], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(6, 16, 13), float32]) {
  @func_7236(%var_7237) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(6, 16, 13), float32]) */
}

def @func_15567() -> (Tensor[(728), float64],) {
  @func_15565() /* ty=(Tensor[(728), float64],) */
}

def @func_14988(%var_14986: Tensor[(11, 5, 9), float64]) -> Tensor[(11, 5, 9), float64] {
  @func_14985(%var_14986) /* ty=Tensor[(11, 5, 9), float64] */
}

def @func_13281() -> Tensor[(896), bool] {
  %220 = @func_13007() /* ty=(Tensor[(896), uint32],) */;
  %221 = %220.0;
  %222 = cast(meta[relay.Constant][19] /* ty=Tensor[(896), uint32] */, dtype="bool") /* ty=Tensor[(896), bool] */;
  %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(1), int32] */;
  %224 = cast(%221, dtype="bool") /* ty=Tensor[(896), bool] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?), bool] */;
  greater(%224, %225) /* ty=Tensor[(896), bool] */
}

def @func_3425(%var_3424: Tensor[(7, 7, 12), float64]) -> Tensor[(7, 7, 12), float64] {
  %227 = fn (%var_3413: Tensor[(7, 7, 12), float64]) -> Tensor[(7, 7, 12), float64] {
    %226 = cast(%var_3413, dtype="float64") /* ty=Tensor[(7, 7, 12), float64] */;
    rsqrt(%226) /* ty=Tensor[(7, 7, 12), float64] */
  };
  %227(%var_3424) /* ty=Tensor[(7, 7, 12), float64] */
}

def @func_11499(%var_11465: Tensor[(330), uint8]) -> (Tensor[(6, 16, 13), float32], Tensor[(3, 11, 10), bool], Tensor[(330), uint8]) {
  %228 = @func_6864() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %229 = cast(%var_11465, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %230 = reshape(%229, newshape=[3, 11, 10]) /* ty=Tensor[(3, 11, 10), uint8] */;
  %231 = @func_2823(%230) /* ty=(Tensor[(3, 11, 10), uint8], Tensor[(3, 11, 10), bool]) */;
  %232 = %228.0;
  %233 = %231.1;
  (%232, %233, %var_11465)
}

def @func_14441(%var_14439: Tensor[(108), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(2340), float64], Tensor[(3, 3, 12), float64], Tensor[(108), float64]) {
  @func_14438(%var_14439) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(2340), float64], Tensor[(3, 3, 12), float64], Tensor[(108), float64]) */
}

def @func_10715() -> (Tensor[(2340), float64],) {
  %235 = fn () -> (Tensor[(2340), float64],) {
    %234 = @func_10389() /* ty=Tensor[(2340), float64] */;
    (%234,)
  };
  %235() /* ty=(Tensor[(2340), float64],) */
}

def @func_12891() -> (Tensor[(6, 16, 13), bool],) {
  %238 = fn () -> (Tensor[(6, 16, 13), bool],) {
    %236 = @func_10319() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), bool]) */;
    %237 = %236.1;
    (%237,)
  };
  %238() /* ty=(Tensor[(6, 16, 13), bool],) */
}

def @func_11520() -> (Tensor[(728), float64],) {
  @func_11518() /* ty=(Tensor[(728), float64],) */
}

def @func_15605() -> (Tensor[(728), float64],) {
  %240 = fn () -> (Tensor[(728), float64],) {
    %239 = @func_14513() /* ty=Tensor[(728), float64] */;
    (%239,)
  };
  %240() /* ty=(Tensor[(728), float64],) */
}

def @func_2238(%var_2237: Tensor[(8, 4, 4), float64]) -> (Tensor[(8, 4, 4), float64],) {
  %243 = fn (%var_2225: Tensor[(8, 4, 4), float64]) -> (Tensor[(8, 4, 4), float64],) {
    %241 = cast(%var_2225, dtype="float64") /* ty=Tensor[(8, 4, 4), float64] */;
    %242 = exp(%241) /* ty=Tensor[(8, 4, 4), float64] */;
    (%242,)
  };
  %243(%var_2237) /* ty=(Tensor[(8, 4, 4), float64],) */
}

def @func_14295() -> (Tensor[(6, 16, 13), float32],) {
  %244 = @func_12323() /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), float32]) */;
  %245 = %244.1;
  (%245,)
}

def @func_1053(%var_1048: Tensor[(12, 11, 11), int16], %var_1049: Tensor[(12, 11, 11), int16], %var_1050: Tensor[(8), int8], %var_1051: Tensor[(104), int8], %var_1052: Tensor[(1620), uint64]) -> (Tensor[(12, 11, 11), int16], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(13, 16, 3), int16], Tensor[(2, 4, 13), bool], Tensor[(8), int8], Tensor[(104), int8], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(13, 16, 3), int16]) {
  @func_1046(%var_1048, %var_1049, %var_1050, %var_1051, %var_1052) /* ty=(Tensor[(12, 11, 11), int16], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(13, 16, 3), int16], Tensor[(2, 4, 13), bool], Tensor[(8), int8], Tensor[(104), int8], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(13, 16, 3), int16]) */
}

def @func_9899(%var_9897: Tensor[(728), float64]) -> Tensor[(728), float64] {
  @func_9896(%var_9897) /* ty=Tensor[(728), float64] */
}

def @func_14223() -> (Tensor[(630), float32], Tensor[(728), float64]) {
  @func_14221() /* ty=(Tensor[(630), float32], Tensor[(728), float64]) */
}

def @func_12085() -> Tensor[(728), float64] {
  @func_10647() /* ty=Tensor[(728), float64] */
}

def @func_14221() -> (Tensor[(630), float32], Tensor[(728), float64]) {
  %246 = @func_6864() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %247 = @func_8720() /* ty=Tensor[(630), float32] */;
  %248 = %246.2;
  (%247, %248)
}

def @func_6454() -> (Tensor[(6, 16, 13), float32],) {
  %249 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(6, 16, 13), float64] */;
  %250 = log10(%249) /* ty=Tensor[(6, 16, 13), float64] */;
  %251 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 16, 13), float64] */, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%250, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %255 = floor_mod(%253, %254) /* ty=Tensor[(6, 16, 13), float32] */;
  (%255,)
}

def @func_10066() -> (Tensor[(6, 16, 13), float32],) {
  %256 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %257 = %256.0;
  (%257,)
}

def @func_13823(%var_13820: Tensor[(1452, 1), int16], %var_13821: Tensor[(8), int8], %var_13822: Tensor[(10, 63), float32]) -> (Tensor[(1, 324), uint32], Tensor[(1452), int16], Tensor[(728), float64], Tensor[(416), uint64], Tensor[(1452, 1), int16], Tensor[(8), int8], Tensor[(104), bool], Tensor[(15, 14, 3), float32], Tensor[(10, 63), float32], Tensor[(728), float64]) {
  %276 = fn (%var_13792: Tensor[(1452, 1), int16], %var_13793: Tensor[(8), int8], %var_13801: Tensor[(10, 63), float32]) -> (Tensor[(1, 324), uint32], Tensor[(1452), int16], Tensor[(728), float64], Tensor[(416), uint64], Tensor[(1452, 1), int16], Tensor[(8), int8], Tensor[(104), bool], Tensor[(15, 14, 3), float32], Tensor[(10, 63), float32], Tensor[(728), float64]) {
    %258 = @func_12299() /* ty=(Tensor[(1, 324), uint32],) */;
    %259 = cast(meta[relay.Constant][22] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %260 = cast(meta[relay.Constant][23] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
    %261 = cast(%var_13792, dtype="int16") /* ty=Tensor[(1452, 1), int16] */;
    %262 = cast(%var_13793, dtype="int8") /* ty=Tensor[(8), int8] */;
    %263 = cast(meta[relay.Constant][24] /* ty=Tensor[(104), bool] */, dtype="bool") /* ty=Tensor[(104), bool] */;
    %264 = reshape(%259, newshape=[728]) /* ty=Tensor[(728), float64] */;
    %265 = reshape(%260, newshape=[2, 208]) /* ty=Tensor[(2, 208), uint64] */;
    %266 = reshape(%261, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
    %267 = reshape(%262, newshape=[8]) /* ty=Tensor[(8), int8] */;
    %268 = reshape(%263, newshape=[2, 4, 13]) /* ty=Tensor[(2, 4, 13), bool] */;
    %269 = @func_7012(%264, %265, %266, %267, %268) /* ty=(Tensor[(728), float32], Tensor[(2, 208), uint64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(2, 4, 13), bool]) */;
    %270 = cast(%var_13801, dtype="float32") /* ty=Tensor[(10, 63), float32] */;
    %271 = reshape(%270, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), float32] */;
    %272 = %258.0;
    %273 = %269.2;
    %274 = @func_1855(%271) /* ty=Tensor[(15, 14, 3), float32] */;
    %275 = @func_12085() /* ty=Tensor[(728), float64] */;
    (%272, %273, meta[relay.Constant][22] /* ty=Tensor[(728), float64] */, meta[relay.Constant][23] /* ty=Tensor[(416), uint64] */, %var_13792, %var_13793, meta[relay.Constant][24] /* ty=Tensor[(104), bool] */, %274, %var_13801, %275)
  };
  %276(%var_13820, %var_13821, %var_13822) /* ty=(Tensor[(1, 324), uint32], Tensor[(1452), int16], Tensor[(728), float64], Tensor[(416), uint64], Tensor[(1452, 1), int16], Tensor[(8), int8], Tensor[(104), bool], Tensor[(15, 14, 3), float32], Tensor[(10, 63), float32], Tensor[(728), float64]) */
}

def @func_6865() -> (Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) {
  %282 = fn () -> (Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) {
    %277 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %278 = cast(meta[relay.Constant][25] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %279 = reshape(%278, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float64] */;
    %280 = %277.0;
    %281 = @func_1915(%279) /* ty=Tensor[(8, 7, 13), float64] */;
    (%280, %281, meta[relay.Constant][25] /* ty=Tensor[(728), float64] */)
  };
  %282() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */
}

def @func_14385() -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) {
  @func_14383() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */
}

def @func_7375() -> (Tensor[(728), float64],) {
  @func_7373() /* ty=(Tensor[(728), float64],) */
}

def @func_7329() -> (Tensor[(728), float64],) {
  %285 = fn () -> (Tensor[(728), float64],) {
    %283 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
    %284 = %283.2;
    (%284,)
  };
  %285() /* ty=(Tensor[(728), float64],) */
}

def @func_10927() -> Tensor[(8, 7, 13), float64] {
  @func_10925() /* ty=Tensor[(8, 7, 13), float64] */
}

def @func_14297() -> (Tensor[(6, 16, 13), float32],) {
  @func_14295() /* ty=(Tensor[(6, 16, 13), float32],) */
}

def @func_15778() -> (Tensor[(128), float64], Tensor[(8, 7, 13), float64]) {
  @func_15776() /* ty=(Tensor[(128), float64], Tensor[(8, 7, 13), float64]) */
}

def @func_11734() -> (Tensor[(728), float64],) {
  %288 = fn () -> (Tensor[(728), float64],) {
    %286 = @func_11621() /* ty=(Tensor[(728), float64],) */;
    %287 = %286.0;
    (%287,)
  };
  %288() /* ty=(Tensor[(728), float64],) */
}

def @func_15410(%var_15360: Tensor[(4, 104), uint64], %var_15361: Tensor[(1452), int16]) -> (Tensor[(3, 2, 13), float32], Tensor[(78), float32], Tensor[(104), int8], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), uint16], Tensor[(4, 104), float32], Tensor[(6, 16, 13), float32]) {
  %289 = cast(meta[relay.Constant][26] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %290 = reshape(%289, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float32] */;
  %291 = @func_11680(%290) /* ty=(Tensor[(3, 2, 13), float32],) */;
  %292 = cast(%var_15360, dtype="uint64") /* ty=Tensor[(4, 104), uint64] */;
  %293 = cast(%var_15360, dtype="uint64") /* ty=Tensor[(4, 104), uint64] */;
  %294 = cast(%var_15361, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %295 = cast(meta[relay.Constant][27] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
  %296 = reshape(%292, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %297 = reshape(%293, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %298 = reshape(%294, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
  %299 = reshape(%295, newshape=[8]) /* ty=Tensor[(8), int8] */;
  %300 = @func_3942(%296, %297, %298, %299) /* ty=(Tensor[(16, 13, 2), uint64], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(2, 4, 13), bool], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64]) */;
  %301 = @func_10925() /* ty=Tensor[(8, 7, 13), float64] */;
  %302 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 7, 13), float64] */, dtype="uint16") /* ty=Tensor[(8, 7, 13), uint16] */;
  %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%301, dtype="uint16") /* ty=Tensor[(8, 7, 13), uint16] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %306 = cast(%var_15360, dtype="float32") /* ty=Tensor[(4, 104), float32] */;
  %307 = @func_9289() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %308 = %291.0;
  %309 = %300.6;
  %310 = @func_14827() /* ty=Tensor[(6, 16, 13), float32] */;
  %311 = subtract(%304, %305) /* ty=Tensor[(8, 7, 13), uint16] */;
  %312 = sqrt(%306) /* ty=Tensor[(4, 104), float32] */;
  %313 = %307.0;
  (%308, meta[relay.Constant][26] /* ty=Tensor[(78), float32] */, %309, %var_15361, meta[relay.Constant][27] /* ty=Tensor[(8), int8] */, %310, %311, %312, %313)
}

def @func_3340(%var_3338: Tensor[(14, 9, 5), float32], %var_3339: Tensor[(14, 9, 5), float32]) -> (Tensor[(14, 9, 5), float32],) {
  %319 = fn (%var_3323: Tensor[(14, 9, 5), float32], %var_3324: Tensor[(14, 9, 5), float32]) -> (Tensor[(14, 9, 5), float32],) {
    %314 = cast(%var_3324, dtype="float32") /* ty=Tensor[(14, 9, 5), float32] */;
    %315 = shape_of(%var_3323, dtype="int32") /* ty=Tensor[(3), int32] */;
    %316 = cast(%var_3323, dtype="float32") /* ty=Tensor[(14, 9, 5), float32] */;
    %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %318 = power(%316, %317) /* ty=Tensor[(14, 9, 5), float32] */;
    (%318,)
  };
  %319(%var_3338, %var_3339) /* ty=(Tensor[(14, 9, 5), float32],) */
}

def @func_2610(%var_2609: Tensor[(16, 3, 3), float64]) -> Tensor[(16, 3, 3), float64] {
  %321 = fn (%var_2605: Tensor[(16, 3, 3), float64]) -> Tensor[(16, 3, 3), float64] {
    %320 = cast(%var_2605, dtype="float64") /* ty=Tensor[(16, 3, 3), float64] */;
    cos(%320) /* ty=Tensor[(16, 3, 3), float64] */
  };
  %321(%var_2609) /* ty=Tensor[(16, 3, 3), float64] */
}

def @func_11518() -> (Tensor[(728), float64],) {
  %322 = @func_8821() /* ty=Tensor[(728), float64] */;
  (%322,)
}

def @func_12382() -> (Tensor[(6, 16, 13), float32],) {
  %323 = @func_11742() /* ty=Tensor[(6, 16, 13), float32] */;
  (%323,)
}

def @func_2823(%var_2804: Tensor[(3, 11, 10), uint8]) -> (Tensor[(3, 11, 10), uint8], Tensor[(3, 11, 10), bool]) {
  %324 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 11, 10), uint8] */, dtype="uint8") /* ty=Tensor[(3, 11, 10), uint8] */;
  %325 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(3, 11, 10), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 11, 10), uint8] */, dtype="uint8") /* ty=Tensor[(3, 11, 10), uint8] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %328 = cast(%var_2804, dtype="bool") /* ty=Tensor[(3, 11, 10), bool] */;
  %329 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(3, 11, 10), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 11, 10), uint8] */, dtype="bool") /* ty=Tensor[(3, 11, 10), bool] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %332 = subtract(%326, %327) /* ty=Tensor[(3, 11, 10), uint8] */;
  %333 = not_equal(%330, %331) /* ty=Tensor[(3, 11, 10), bool] */;
  (%332, %333)
}

def @func_8385(%var_8378: int8) -> (Tensor[(2, 10, 15), int8],) {
  %334 = cast(%var_8378, dtype="int8") /* ty=int8 */;
  %335 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 10, 15), int8] */, dtype="int8") /* ty=Tensor[(2, 10, 15), int8] */;
  %336 = left_shift(%334, %335) /* ty=Tensor[(2, 10, 15), int8] */;
  (%336,)
}

def @func_11502(%var_11500: Tensor[(330), uint8]) -> (Tensor[(6, 16, 13), float32], Tensor[(3, 11, 10), bool], Tensor[(330), uint8]) {
  @func_11499(%var_11500) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(3, 11, 10), bool], Tensor[(330), uint8]) */
}

def @func_14438(%var_14410: Tensor[(108), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(2340), float64], Tensor[(3, 3, 12), float64], Tensor[(108), float64]) {
  %337 = @func_6482() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %338 = @func_11359() /* ty=(Tensor[(2340), float64], Tensor[(6, 16, 13), float32]) */;
  %339 = cast(%var_14410, dtype="float64") /* ty=Tensor[(108), float64] */;
  %340 = reshape(%339, newshape=[3, 3, 12]) /* ty=Tensor[(3, 3, 12), float64] */;
  %341 = @func_3549(%340) /* ty=(Tensor[(3, 3, 12), float64],) */;
  %342 = %337.0;
  %343 = %338.0;
  %344 = %341.0;
  (%342, %343, %344, %var_14410)
}

def @func_12349() -> (Tensor[(128), float64],) {
  %347 = fn () -> (Tensor[(128), float64],) {
    %345 = @func_8881() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(728), float64], Tensor[(128), float64], Tensor[(4, 2, 9), bool], int32) */;
    %346 = %345.2;
    (%346,)
  };
  %347() /* ty=(Tensor[(128), float64],) */
}

def @func_7590(%var_7589: Tensor[(128), float64]) -> (Tensor[(728), float64], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) {
  %354 = fn (%var_7586: Tensor[(128), float64]) -> (Tensor[(728), float64], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) {
    %348 = @func_7373() /* ty=(Tensor[(728), float64],) */;
    %349 = cast(%var_7586, dtype="float64") /* ty=Tensor[(128), float64] */;
    %350 = reshape(%349, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), float64] */;
    %351 = @func_2236(%350) /* ty=(Tensor[(8, 4, 4), float64],) */;
    %352 = %348.0;
    %353 = %351.0;
    (%352, %353, %var_7586)
  };
  %354(%var_7589) /* ty=(Tensor[(728), float64], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */
}

def @func_10648() -> Tensor[(728), float64] {
  %356 = fn () -> Tensor[(728), float64] {
    %355 = @func_7853() /* ty=(Tensor[(728), float64],) */;
    %355.0
  };
  %356() /* ty=Tensor[(728), float64] */
}

def @func_12594() -> Tensor[(728), float64] {
  %358 = fn () -> Tensor[(728), float64] {
    %357 = @func_9129() /* ty=(Tensor[(728), float64],) */;
    %357.0
  };
  %358() /* ty=Tensor[(728), float64] */
}

def @func_12974(%var_12973: Tensor[(8, 4, 4), float64]) -> (Tensor[(8, 4, 4), uint16],) {
  %366 = fn (%var_12963: Tensor[(8, 4, 4), float64]) -> (Tensor[(8, 4, 4), uint16],) {
    %359 = @func_10083() /* ty=(Tensor[(4, 2, 9), bool], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
    %360 = %359.1;
    %361 = cast(%var_12963, dtype="uint16") /* ty=Tensor[(8, 4, 4), uint16] */;
    %362 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
    %363 = cast(%360, dtype="uint16") /* ty=Tensor[(8, 4, 4), uint16] */;
    %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %365 = left_shift(%363, %364) /* ty=Tensor[(8, 4, 4), uint16] */;
    (%365,)
  };
  %366(%var_12973) /* ty=(Tensor[(8, 4, 4), uint16],) */
}

def @func_13458() -> Tensor[(10, 16, 4), float32] {
  @func_13456() /* ty=Tensor[(10, 16, 4), float32] */
}

def @func_617(%var_614: Tensor[(2, 4, 1), int8], %var_615: Tensor[(2, 4, 13), int8], %var_616: Tensor[(8, 78), int16]) -> (Tensor[(2, 4, 13), bool], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(540, 3), uint64], Tensor[(15, 9, 12), uint64], Tensor[(15, 9, 12), uint64], Tensor[(13, 16, 3), int16], Tensor[(8, 78), int16]) {
  %391 = fn (%var_563: Tensor[(2, 4, 1), int8], %var_564: Tensor[(2, 4, 13), int8], %var_603: Tensor[(8, 78), int16]) -> (Tensor[(2, 4, 13), bool], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(540, 3), uint64], Tensor[(15, 9, 12), uint64], Tensor[(15, 9, 12), uint64], Tensor[(13, 16, 3), int16], Tensor[(8, 78), int16]) {
    %367 = cast(%var_563, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
    %368 = cast(%var_564, dtype="bool") /* ty=Tensor[(2, 4, 13), bool] */;
    %369 = cast(meta[relay.Constant][32] /* ty=Tensor[(135), uint64] */, dtype="uint64") /* ty=Tensor[(135), uint64] */;
    %370 = cast(meta[relay.Constant][33] /* ty=Tensor[(540, 3), uint64] */, dtype="uint64") /* ty=Tensor[(540, 3), uint64] */;
    %371 = reshape(%369, newshape=[15, 9, 1]) /* ty=Tensor[(15, 9, 1), uint64] */;
    %372 = reshape(%370, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), uint64] */;
    %373 = cast(meta[relay.Constant][32] /* ty=Tensor[(135), uint64] */, dtype="uint64") /* ty=Tensor[(135), uint64] */;
    %374 = @func_301(%371, %372) /* ty=Tensor[(15, 9, 12), uint64] */;
    %375 = cast(%374, dtype="uint64") /* ty=Tensor[(15, 9, 12), uint64] */;
    %376 = reshape(%373, newshape=[15, 9, 1]) /* ty=Tensor[(15, 9, 1), uint64] */;
    %377 = reshape(%375, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), uint64] */;
    %378 = cast(meta[relay.Constant][32] /* ty=Tensor[(135), uint64] */, dtype="uint64") /* ty=Tensor[(135), uint64] */;
    %379 = cast(%374, dtype="uint64") /* ty=Tensor[(15, 9, 12), uint64] */;
    %380 = reshape(%378, newshape=[15, 9, 1]) /* ty=Tensor[(15, 9, 1), uint64] */;
    %381 = reshape(%379, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), uint64] */;
    %382 = cast(%var_603, dtype="int16") /* ty=Tensor[(8, 78), int16] */;
    %383 = cast(%var_603, dtype="int16") /* ty=Tensor[(8, 78), int16] */;
    %384 = reshape(%382, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
    %385 = reshape(%383, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
    %386 = @func_355(%384, %385) /* ty=(Tensor[(13, 16, 3), int16],) */;
    %387 = greater_equal(%367, %368) /* ty=Tensor[(2, 4, 13), bool] */;
    %388 = @func_301(%376, %377) /* ty=Tensor[(15, 9, 12), uint64] */;
    %389 = @func_301(%380, %381) /* ty=Tensor[(15, 9, 12), uint64] */;
    %390 = %386.0;
    (%387, %374, meta[relay.Constant][32] /* ty=Tensor[(135), uint64] */, meta[relay.Constant][33] /* ty=Tensor[(540, 3), uint64] */, %388, %389, %390, %var_603)
  };
  %391(%var_614, %var_615, %var_616) /* ty=(Tensor[(2, 4, 13), bool], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(540, 3), uint64], Tensor[(15, 9, 12), uint64], Tensor[(15, 9, 12), uint64], Tensor[(13, 16, 3), int16], Tensor[(8, 78), int16]) */
}

def @func_15179() -> (Tensor[(15, 14, 3), float32], Tensor[(728), float64]) {
  %395 = fn () -> (Tensor[(15, 14, 3), float32], Tensor[(728), float64]) {
    %392 = @func_10977() /* ty=(Tensor[(630), float32], Tensor[(15, 14, 3), float32]) */;
    %393 = %392.1;
    %394 = @func_9833() /* ty=Tensor[(728), float64] */;
    (%393, %394)
  };
  %395() /* ty=(Tensor[(15, 14, 3), float32], Tensor[(728), float64]) */
}

def @main(%var_15808: Tensor[(1, 624), int16]) -> (Tensor[(1, 48), float32], Tensor[(13, 16, 3), int16], Tensor[(1, 624), float32], Tensor[(1, 624), float32]) {
  %396 = @func_15654() /* ty=(Tensor[(1, 48), float32], Tensor[(6, 16, 13), float32]) */;
  %397 = cast(%var_15808, dtype="int16") /* ty=Tensor[(1, 624), int16] */;
  %398 = cast(%var_15808, dtype="int16") /* ty=Tensor[(1, 624), int16] */;
  %399 = reshape(%397, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %400 = reshape(%398, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %401 = @func_358(%399, %400) /* ty=(Tensor[(13, 16, 3), int16],) */;
  %402 = cast(%var_15808, dtype="float32") /* ty=Tensor[(1, 624), float32] */;
  %403 = cast(%var_15808, dtype="float32") /* ty=Tensor[(1, 624), float32] */;
  %404 = %396.0;
  %405 = %401.0;
  %406 = sigmoid(%402) /* ty=Tensor[(1, 624), float32] */;
  %407 = cosh(%403) /* ty=Tensor[(1, 624), float32] */;
  (%404, %405, %406, %407)
}

def @func_14560(%var_14529: int64, %var_14530: Tensor[(13, 1, 15), int64]) -> (Tensor[(13, 1, 15), int64], Tensor[(896), bool], Tensor[(630), float32]) {
  %408 = cast(%var_14529, dtype="int64") /* ty=int64 */;
  %409 = cast(%var_14530, dtype="int64") /* ty=Tensor[(13, 1, 15), int64] */;
  %410 = @func_10977() /* ty=(Tensor[(630), float32], Tensor[(15, 14, 3), float32]) */;
  %411 = maximum(%408, %409) /* ty=Tensor[(13, 1, 15), int64] */;
  %412 = @func_13281() /* ty=Tensor[(896), bool] */;
  %413 = %410.0;
  (%411, %412, %413)
}

def @func_10389() -> Tensor[(2340), float64] {
  %414 = @func_7666() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) */;
  %414.2
}

def @func_14657() -> (Tensor[(6, 16, 13), float32],) {
  %415 = @func_13439() /* ty=Tensor[(6, 16, 13), float32] */;
  (%415,)
}

def @func_9722() -> (Tensor[(728), float64], Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) {
  %416 = @func_9129() /* ty=(Tensor[(728), float64],) */;
  %417 = @func_7328() /* ty=(Tensor[(728), float64],) */;
  %418 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %419 = %416.0;
  %420 = %417.0;
  %421 = %418.0;
  %422 = @func_9528() /* ty=Tensor[(6, 16, 13), float32] */;
  (%419, %420, %421, %422)
}

def @func_3551(%var_3550: Tensor[(3, 3, 12), float64]) -> (Tensor[(3, 3, 12), float64],) {
  %425 = fn (%var_3545: Tensor[(3, 3, 12), float64]) -> (Tensor[(3, 3, 12), float64],) {
    %423 = cast(%var_3545, dtype="float64") /* ty=Tensor[(3, 3, 12), float64] */;
    %424 = cos(%423) /* ty=Tensor[(3, 3, 12), float64] */;
    (%424,)
  };
  %425(%var_3550) /* ty=(Tensor[(3, 3, 12), float64],) */
}

def @func_8388(%var_8386: int8) -> (Tensor[(2, 10, 15), int8],) {
  @func_8385(%var_8386) /* ty=(Tensor[(2, 10, 15), int8],) */
}

def @func_7308(%var_7295: Tensor[(1452), int16], %var_7296: Tensor[(8), int8]) -> (Tensor[(8, 7, 13), float32], Tensor[(128), float64], Tensor[(416), uint64], Tensor[(1452), int16], Tensor[(8), int8]) {
  %426 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %427 = %426.1;
  %428 = cast(%427, dtype="float32") /* ty=Tensor[(8, 7, 13), float32] */;
  %429 = cast(meta[relay.Constant][34] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %430 = cast(meta[relay.Constant][34] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %431 = cast(%var_7295, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %432 = cast(%var_7296, dtype="int8") /* ty=Tensor[(8), int8] */;
  %433 = reshape(%429, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %434 = reshape(%430, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %435 = reshape(%431, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
  %436 = reshape(%432, newshape=[8]) /* ty=Tensor[(8), int8] */;
  %437 = @func_3942(%433, %434, %435, %436) /* ty=(Tensor[(16, 13, 2), uint64], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(2, 4, 13), bool], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64]) */;
  %438 = atanh(%428) /* ty=Tensor[(8, 7, 13), float32] */;
  %439 = %437.2;
  (%438, %439, meta[relay.Constant][34] /* ty=Tensor[(416), uint64] */, %var_7295, %var_7296)
}

def @func_8353(%var_8351: Tensor[(728), float64]) -> (Tensor[(12, 13, 15), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) {
  @func_8350(%var_8351) /* ty=(Tensor[(12, 13, 15), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */
}

def @func_10320() -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), bool]) {
  %446 = fn () -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), bool]) {
    %440 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
    %441 = %440.0;
    %442 = cast(%441, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
    %443 = reshape(%442, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), float32] */;
    %444 = @func_9965(%443) /* ty=(Tensor[(6, 16, 13), bool],) */;
    %445 = %444.0;
    (%441, %445)
  };
  %446() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), bool]) */
}

def @func_13179(%var_13177: Tensor[(728), float64]) -> (Tensor[(6, 16, 13), bool], Tensor[(728), uint64], Tensor[(6, 16, 13), float32]) {
  @func_13176(%var_13177) /* ty=(Tensor[(6, 16, 13), bool], Tensor[(728), uint64], Tensor[(6, 16, 13), float32]) */
}

def @func_7312(%var_7310: Tensor[(1452), int16], %var_7311: Tensor[(8), int8]) -> (Tensor[(8, 7, 13), float32], Tensor[(128), float64], Tensor[(416), uint64], Tensor[(1452), int16], Tensor[(8), int8]) {
  @func_7308(%var_7310, %var_7311) /* ty=(Tensor[(8, 7, 13), float32], Tensor[(128), float64], Tensor[(416), uint64], Tensor[(1452), int16], Tensor[(8), int8]) */
}

def @func_7373() -> (Tensor[(728), float64],) {
  %447 = @func_7328() /* ty=(Tensor[(728), float64],) */;
  %448 = %447.0;
  (%448,)
}

def @func_8515() -> (Tensor[(728), float64],) {
  @func_8513() /* ty=(Tensor[(728), float64],) */
}

def @func_9258(%var_9256: Tensor[(104), int8]) -> (Tensor[(728), float64], Tensor[(728), float64], Tensor[(8), int8], Tensor[(1452), int16], Tensor[(104), int8], Tensor[(1620), uint64]) {
  @func_9255(%var_9256) /* ty=(Tensor[(728), float64], Tensor[(728), float64], Tensor[(8), int8], Tensor[(1452), int16], Tensor[(104), int8], Tensor[(1620), uint64]) */
}

def @func_1857(%var_1856: Tensor[(15, 14, 3), float32]) -> Tensor[(15, 14, 3), float32] {
  %450 = fn (%var_1834: Tensor[(15, 14, 3), float32]) -> Tensor[(15, 14, 3), float32] {
    %449 = cast(%var_1834, dtype="float32") /* ty=Tensor[(15, 14, 3), float32] */;
    sqrt(%449) /* ty=Tensor[(15, 14, 3), float32] */
  };
  %450(%var_1856) /* ty=Tensor[(15, 14, 3), float32] */
}

def @func_9563(%var_9562: Tensor[(728), float64]) -> (Tensor[(728), int16],) {
  %458 = fn (%var_9550: Tensor[(728), float64]) -> (Tensor[(728), int16],) {
    %451 = @func_7853() /* ty=(Tensor[(728), float64],) */;
    %452 = %451.0;
    %453 = cast(%var_9550, dtype="int16") /* ty=Tensor[(728), int16] */;
    %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(1), int32] */;
    %455 = cast(%452, dtype="int16") /* ty=Tensor[(728), int16] */;
    %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?), int16] */;
    %457 = left_shift(%455, %456) /* ty=Tensor[(728), int16] */;
    (%457,)
  };
  %458(%var_9562) /* ty=(Tensor[(728), int16],) */
}

def @func_9835() -> Tensor[(728), float64] {
  @func_9833() /* ty=Tensor[(728), float64] */
}

def @func_12204(%var_12202: Tensor[(896), uint32], %var_12203: Tensor[(128), float64]) -> (Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(896), uint32], Tensor[(728), float64], Tensor[(128), float64]) {
  %469 = fn (%var_12180: Tensor[(896), uint32], %var_12196: Tensor[(128), float64]) -> (Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(896), uint32], Tensor[(728), float64], Tensor[(128), float64]) {
    %459 = @func_7328() /* ty=(Tensor[(728), float64],) */;
    %460 = cast(%var_12180, dtype="uint32") /* ty=Tensor[(896), uint32] */;
    %461 = reshape(%460, newshape=[896]) /* ty=Tensor[(896), uint32] */;
    %462 = @func_7722(%461) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) */;
    %463 = cast(%var_12196, dtype="float64") /* ty=Tensor[(128), float64] */;
    %464 = reshape(%463, newshape=[128]) /* ty=Tensor[(128), float64] */;
    %465 = @func_7588(%464) /* ty=(Tensor[(728), float64], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
    %466 = %459.0;
    %467 = %462.0;
    %468 = %465.0;
    (%466, %467, %var_12180, %468, %var_12196)
  };
  %469(%var_12202, %var_12203) /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(896), uint32], Tensor[(728), float64], Tensor[(128), float64]) */
}

def @func_12151() -> (Tensor[(728), float64], Tensor[(6, 16, 13), float32]) {
  %470 = @func_8821() /* ty=Tensor[(728), float64] */;
  %471 = @func_8792() /* ty=Tensor[(6, 16, 13), float32] */;
  (%470, %471)
}

def @func_13019() -> (Tensor[(2340), float64],) {
  %474 = fn () -> (Tensor[(2340), float64],) {
    %472 = @func_10714() /* ty=(Tensor[(2340), float64],) */;
    %473 = %472.0;
    (%473,)
  };
  %474() /* ty=(Tensor[(2340), float64],) */
}

def @func_1917(%var_1916: Tensor[(8, 7, 13), float64]) -> Tensor[(8, 7, 13), float64] {
  %476 = fn (%var_1912: Tensor[(8, 7, 13), float64]) -> Tensor[(8, 7, 13), float64] {
    %475 = cast(%var_1912, dtype="float64") /* ty=Tensor[(8, 7, 13), float64] */;
    acos(%475) /* ty=Tensor[(8, 7, 13), float64] */
  };
  %476(%var_1916) /* ty=Tensor[(8, 7, 13), float64] */
}

def @func_10068() -> (Tensor[(6, 16, 13), float32],) {
  @func_10066() /* ty=(Tensor[(6, 16, 13), float32],) */
}

def @func_4515(%var_4510: Tensor[(15, 9, 4), float64]) -> (Tensor[(15, 9, 4), float64],) {
  %477 = cast(%var_4510, dtype="float64") /* ty=Tensor[(15, 9, 4), float64] */;
  %478 = cos(%477) /* ty=Tensor[(15, 9, 4), float64] */;
  (%478,)
}

def @func_13086() -> (Tensor[(896), uint8],) {
  %486 = fn () -> (Tensor[(896), uint8],) {
    %479 = @func_10909() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) */;
    %480 = %479.2;
    %481 = cast(meta[relay.Constant][35] /* ty=Tensor[(896), uint32] */, dtype="uint8") /* ty=Tensor[(896), uint8] */;
    %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(1), int32] */;
    %483 = cast(%480, dtype="uint8") /* ty=Tensor[(896), uint8] */;
    %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %485 = bitwise_xor(%483, %484) /* ty=Tensor[(896), uint8] */;
    (%485,)
  };
  %486() /* ty=(Tensor[(896), uint8],) */
}

def @func_7946(%var_7943: Tensor[(128), float64], %var_7944: Tensor[(1, 728), float64], %var_7945: Tensor[(1452), int16]) -> (Tensor[(16, 9, 12), uint32], Tensor[(1728), float64], Tensor[(128), float64], Tensor[(15, 9, 12), uint64], Tensor[(1620), uint64], Tensor[(128), float64], Tensor[(1, 728), float64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(2, 9, 1), float32], Tensor[(728), float64], Tensor[(2, 9, 135), int32]) {
  %515 = fn (%var_7904: Tensor[(128), float64], %var_7918: Tensor[(1, 728), float64], %var_7919: Tensor[(1452), int16]) -> (Tensor[(16, 9, 12), uint32], Tensor[(1728), float64], Tensor[(128), float64], Tensor[(15, 9, 12), uint64], Tensor[(1620), uint64], Tensor[(128), float64], Tensor[(1, 728), float64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(2, 9, 1), float32], Tensor[(728), float64], Tensor[(2, 9, 135), int32]) {
    %487 = cast(meta[relay.Constant][36] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
    %488 = cast(%var_7904, dtype="float64") /* ty=Tensor[(128), float64] */;
    %489 = reshape(%487, newshape=[16, 9, 12]) /* ty=Tensor[(16, 9, 12), float64] */;
    %490 = reshape(%488, newshape=[128]) /* ty=Tensor[(128), float64] */;
    %491 = @func_5640(%489, %490) /* ty=(Tensor[(?, 9, 12), bool], Tensor[(16, 9, 12), uint32], Tensor[(5, 16, 1), uint32], Tensor[(80), uint32], Tensor[(128), float64]) */;
    %492 = cast(meta[relay.Constant][37] /* ty=Tensor[(135), uint64] */, dtype="uint64") /* ty=Tensor[(135), uint64] */;
    %493 = cast(meta[relay.Constant][38] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
    %494 = reshape(%492, newshape=[15, 9, 1]) /* ty=Tensor[(15, 9, 1), uint64] */;
    %495 = reshape(%493, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), uint64] */;
    %496 = cast(%var_7918, dtype="float64") /* ty=Tensor[(1, 728), float64] */;
    %497 = cast(%var_7919, dtype="int16") /* ty=Tensor[(1452), int16] */;
    %498 = cast(meta[relay.Constant][39] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
    %499 = reshape(%496, newshape=[728]) /* ty=Tensor[(728), float64] */;
    %500 = reshape(%497, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
    %501 = reshape(%498, newshape=[8]) /* ty=Tensor[(8), int8] */;
    %502 = @func_7570(%499, %500, %501) /* ty=(Tensor[(728), uint64], Tensor[(128), float64], Tensor[(1452), int16], Tensor[(8), int8]) */;
    %503 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 9, 1), float64] */, dtype="float64") /* ty=Tensor[(2, 9, 1), float64] */;
    %504 = rsqrt(%503) /* ty=Tensor[(2, 9, 1), float64] */;
    %505 = cast(%504, dtype="float32") /* ty=Tensor[(2, 9, 1), float32] */;
    %506 = @func_7853() /* ty=(Tensor[(728), float64],) */;
    %507 = cast(meta[relay.Constant][37] /* ty=Tensor[(135), uint64] */, dtype="int32") /* ty=Tensor[(135), int32] */;
    %508 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 9, 1), float64] */, dtype="int32") /* ty=Tensor[(2, 9, 1), int32] */;
    %509 = %491.1;
    %510 = @func_301(%494, %495) /* ty=Tensor[(15, 9, 12), uint64] */;
    %511 = %502.1;
    %512 = asin(%505) /* ty=Tensor[(2, 9, 1), float32] */;
    %513 = %506.0;
    %514 = multiply(%507, %508) /* ty=Tensor[(2, 9, 135), int32] */;
    (%509, meta[relay.Constant][36] /* ty=Tensor[(1728), float64] */, %var_7904, %510, meta[relay.Constant][38] /* ty=Tensor[(1620), uint64] */, %511, %var_7918, %var_7919, meta[relay.Constant][39] /* ty=Tensor[(8), int8] */, %512, %513, %514)
  };
  %515(%var_7943, %var_7944, %var_7945) /* ty=(Tensor[(16, 9, 12), uint32], Tensor[(1728), float64], Tensor[(128), float64], Tensor[(15, 9, 12), uint64], Tensor[(1620), uint64], Tensor[(128), float64], Tensor[(1, 728), float64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(2, 9, 1), float32], Tensor[(728), float64], Tensor[(2, 9, 135), int32]) */
}

def @func_7667() -> (Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) {
  %521 = fn () -> (Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) {
    %516 = cast(meta[relay.Constant][41] /* ty=Tensor[(2340), float64] */, dtype="float64") /* ty=Tensor[(2340), float64] */;
    %517 = reshape(%516, newshape=[12, 13, 15]) /* ty=Tensor[(12, 13, 15), float64] */;
    %518 = @func_7090(%517) /* ty=(Tensor[(12, 13, 15), float64],) */;
    %519 = @func_6543() /* ty=Tensor[(6, 16, 13), float32] */;
    %520 = %518.0;
    (%519, %520, meta[relay.Constant][41] /* ty=Tensor[(2340), float64] */)
  };
  %521() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) */
}

def @func_10085() -> (Tensor[(4, 2, 9), bool], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) {
  @func_10083() /* ty=(Tensor[(4, 2, 9), bool], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */
}

def @func_14053() -> Tensor[(6, 16, 13), float32] {
  %522 = @func_11279() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
  %522.0
}

def @func_1046(%var_1000: Tensor[(12, 11, 11), int16], %var_1001: Tensor[(12, 11, 11), int16], %var_1017: Tensor[(8), int8], %var_1018: Tensor[(104), int8], %var_1024: Tensor[(1620), uint64]) -> (Tensor[(12, 11, 11), int16], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(13, 16, 3), int16], Tensor[(2, 4, 13), bool], Tensor[(8), int8], Tensor[(104), int8], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(13, 16, 3), int16]) {
  %523 = cast(%var_1001, dtype="int16") /* ty=Tensor[(12, 11, 11), int16] */;
  %524 = shape_of(%var_1000, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%var_1000, dtype="int16") /* ty=Tensor[(12, 11, 11), int16] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %527 = cast(meta[relay.Constant][42] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %528 = cast(meta[relay.Constant][42] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %529 = reshape(%527, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %530 = reshape(%528, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %531 = @func_355(%529, %530) /* ty=(Tensor[(13, 16, 3), int16],) */;
  %532 = cast(meta[relay.Constant][42] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %533 = cast(meta[relay.Constant][42] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %534 = reshape(%532, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %535 = reshape(%533, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %536 = @func_355(%534, %535) /* ty=(Tensor[(13, 16, 3), int16],) */;
  %537 = cast(%var_1017, dtype="int8") /* ty=Tensor[(8), int8] */;
  %538 = cast(%var_1018, dtype="int8") /* ty=Tensor[(104), int8] */;
  %539 = %531.0;
  %540 = cast(%539, dtype="int16") /* ty=Tensor[(13, 16, 3), int16] */;
  %541 = reshape(%537, newshape=[2, 4, 1]) /* ty=Tensor[(2, 4, 1), int8] */;
  %542 = reshape(%538, newshape=[2, 4, 13]) /* ty=Tensor[(2, 4, 13), int8] */;
  %543 = reshape(%540, newshape=[8, 78]) /* ty=Tensor[(8, 78), int16] */;
  %544 = @func_613(%541, %542, %543) /* ty=(Tensor[(2, 4, 13), bool], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(540, 3), uint64], Tensor[(15, 9, 12), uint64], Tensor[(15, 9, 12), uint64], Tensor[(13, 16, 3), int16], Tensor[(8, 78), int16]) */;
  %545 = cast(meta[relay.Constant][43] /* ty=Tensor[(135), uint64] */, dtype="uint64") /* ty=Tensor[(135), uint64] */;
  %546 = cast(%var_1024, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %547 = reshape(%545, newshape=[15, 9, 1]) /* ty=Tensor[(15, 9, 1), uint64] */;
  %548 = reshape(%546, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), uint64] */;
  %549 = %536.0;
  %550 = cast(%549, dtype="int16") /* ty=Tensor[(13, 16, 3), int16] */;
  %551 = cast(%539, dtype="int16") /* ty=Tensor[(13, 16, 3), int16] */;
  %552 = reshape(%550, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %553 = reshape(%551, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %554 = @func_355(%552, %553) /* ty=(Tensor[(13, 16, 3), int16],) */;
  %555 = subtract(%525, %526) /* ty=Tensor[(12, 11, 11), int16] */;
  %556 = %544.0;
  %557 = @func_301(%547, %548) /* ty=Tensor[(15, 9, 12), uint64] */;
  %558 = %554.0;
  (%555, %539, meta[relay.Constant][42] /* ty=Tensor[(624), int16] */, %549, %556, %var_1017, %var_1018, %557, meta[relay.Constant][43] /* ty=Tensor[(135), uint64] */, %var_1024, %558)
}

def @func_14086() -> Tensor[(896), bool] {
  @func_13281() /* ty=Tensor[(896), bool] */
}

def @func_12830() -> Tensor[(6, 16, 13), float32] {
  %560 = fn () -> Tensor[(6, 16, 13), float32] {
    %559 = @func_10909() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) */;
    %559.0
  };
  %560() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_15069(%var_15068: Tensor[(1, 11, 4), float64]) -> (Tensor[(728), float64], Tensor[(?, 11, 4), uint64]) {
  %570 = fn (%var_15035: Tensor[(1, 11, 4), float64]) -> (Tensor[(728), float64], Tensor[(?, 11, 4), uint64]) {
    %561 = @func_12323() /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), float32]) */;
    %562 = cast(%var_15035, dtype="float64") /* ty=Tensor[(1, 11, 4), float64] */;
    %563 = tan(%562) /* ty=Tensor[(1, 11, 4), float64] */;
    %564 = cast(%var_15035, dtype="uint64") /* ty=Tensor[(1, 11, 4), uint64] */;
    %565 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
    %566 = cast(%563, dtype="uint64") /* ty=Tensor[(1, 11, 4), uint64] */;
    %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %568 = %561.0;
    %569 = bitwise_and(%566, %567) /* ty=Tensor[(?, 11, 4), uint64] */;
    (%568, %569)
  };
  %570(%var_15068) /* ty=(Tensor[(728), float64], Tensor[(?, 11, 4), uint64]) */
}

def @func_11279() -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) {
  %571 = @func_10245() /* ty=Tensor[(6, 16, 13), float32] */;
  %572 = @func_9528() /* ty=Tensor[(6, 16, 13), float32] */;
  (%571, %572)
}

def @func_7503(%var_7501: Tensor[(104), int8]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(8, 78), int16], Tensor[(104), int8], Tensor[(8, 624), uint32]) {
  @func_7500(%var_7501) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(8, 78), int16], Tensor[(104), int8], Tensor[(8, 624), uint32]) */
}

def @func_6456() -> (Tensor[(6, 16, 13), float32],) {
  @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */
}

def @func_11682(%var_11681: Tensor[(3, 2, 13), float32]) -> (Tensor[(3, 2, 13), float32],) {
  %578 = fn (%var_11666: Tensor[(3, 2, 13), float32]) -> (Tensor[(3, 2, 13), float32],) {
    %573 = cast(meta[relay.Constant][44] /* ty=Tensor[(3, 2, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 2, 13), float32] */;
    %574 = shape_of(%var_11666, dtype="int32") /* ty=Tensor[(3), int32] */;
    %575 = cast(%var_11666, dtype="float32") /* ty=Tensor[(3, 2, 13), float32] */;
    %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %577 = mod(%575, %576) /* ty=Tensor[(3, 2, 13), float32] */;
    (%577,)
  };
  %578(%var_11681) /* ty=(Tensor[(3, 2, 13), float32],) */
}

def @func_11854() -> (Tensor[(728), float64],) {
  %581 = fn () -> (Tensor[(728), float64],) {
    %579 = @func_7853() /* ty=(Tensor[(728), float64],) */;
    %580 = %579.0;
    (%580,)
  };
  %581() /* ty=(Tensor[(728), float64],) */
}

def @func_11772(%var_11771: Tensor[(48), float32]) -> (Tensor[(728), float64], Tensor[(20, 32), float32], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(80), uint32], Tensor[(128), float64]) {
  %596 = fn (%var_11752: Tensor[(48), float32]) -> (Tensor[(728), float64], Tensor[(20, 32), float32], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(80), uint32], Tensor[(128), float64]) {
    %582 = @func_7373() /* ty=(Tensor[(728), float64],) */;
    %583 = cast(%var_11752, dtype="float32") /* ty=Tensor[(48), float32] */;
    %584 = cast(meta[relay.Constant][45] /* ty=Tensor[(896), uint32] */, dtype="uint32") /* ty=Tensor[(896), uint32] */;
    %585 = reshape(%583, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %586 = reshape(%584, newshape=[896]) /* ty=Tensor[(896), uint32] */;
    %587 = @func_9064(%585, %586) /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), bool], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(128), float64], Tensor[(5, 66), uint8], Tensor[(20, 32), float32], Tensor[(2340), float64]) */;
    %588 = cast(meta[relay.Constant][46] /* ty=Tensor[(80), uint32] */, dtype="uint32") /* ty=Tensor[(80), uint32] */;
    %589 = cast(meta[relay.Constant][47] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
    %590 = reshape(%588, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), uint32] */;
    %591 = reshape(%589, newshape=[128]) /* ty=Tensor[(128), float64] */;
    %592 = @func_4195(%590, %591) /* ty=(Tensor[(5, 16, 1), uint32], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
    %593 = %582.0;
    %594 = %587.7;
    %595 = %592.2;
    (%593, %594, %var_11752, meta[relay.Constant][45] /* ty=Tensor[(896), uint32] */, %595, meta[relay.Constant][46] /* ty=Tensor[(80), uint32] */, meta[relay.Constant][47] /* ty=Tensor[(128), float64] */)
  };
  %596(%var_11771) /* ty=(Tensor[(728), float64], Tensor[(20, 32), float32], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(80), uint32], Tensor[(128), float64]) */
}

def @func_11881(%var_11880: Tensor[(2, 7, 6), float64]) -> Tensor[(2, 7, 6), bool] {
  %603 = fn (%var_11873: Tensor[(2, 7, 6), float64]) -> Tensor[(2, 7, 6), bool] {
    %597 = cast(meta[relay.Constant][48] /* ty=Tensor[(2, 7, 6), float64] */, dtype="float64") /* ty=Tensor[(2, 7, 6), float64] */;
    %598 = cos(%597) /* ty=Tensor[(2, 7, 6), float64] */;
    %599 = cast(%var_11873, dtype="bool") /* ty=Tensor[(2, 7, 6), bool] */;
    %600 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
    %601 = cast(%598, dtype="bool") /* ty=Tensor[(2, 7, 6), bool] */;
    %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%601, %602) /* ty=Tensor[(2, 7, 6), bool] */
  };
  %603(%var_11880) /* ty=Tensor[(2, 7, 6), bool] */
}

def @func_8883() -> (Tensor[(6, 16, 13), float32], Tensor[(728), float64], Tensor[(128), float64], Tensor[(4, 2, 9), bool], int32) {
  @func_8881() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(728), float64], Tensor[(128), float64], Tensor[(4, 2, 9), bool], int32) */
}

def @func_11260() -> (Tensor[(630), float32],) {
  %605 = fn () -> (Tensor[(630), float32],) {
    %604 = @func_8720() /* ty=Tensor[(630), float32] */;
    (%604,)
  };
  %605() /* ty=(Tensor[(630), float32],) */
}

def @func_13441() -> Tensor[(6, 16, 13), float32] {
  @func_13439() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_9528() -> Tensor[(6, 16, 13), float32] {
  %606 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %606.0
}

def @func_13849() -> (Tensor[(6, 16, 13), float32],) {
  %609 = fn () -> (Tensor[(6, 16, 13), float32],) {
    %607 = @func_6482() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %608 = %607.0;
    (%608,)
  };
  %609() /* ty=(Tensor[(6, 16, 13), float32],) */
}

def @func_15565() -> (Tensor[(728), float64],) {
  %610 = @func_12419() /* ty=Tensor[(728), float64] */;
  (%610,)
}

def @func_11281() -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) {
  @func_11279() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */
}

def @func_7236(%var_7216: Tensor[(630), float32]) -> (Tensor[(6, 16, 13), float32], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(6, 16, 13), float32]) {
  %611 = @func_6864() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %612 = cast(%var_7216, dtype="float32") /* ty=Tensor[(630), float32] */;
  %613 = cast(%var_7216, dtype="float32") /* ty=Tensor[(630), float32] */;
  %614 = reshape(%612, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), float32] */;
  %615 = reshape(%613, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), float32] */;
  %616 = @func_3337(%614, %615) /* ty=(Tensor[(14, 9, 5), float32],) */;
  %617 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %618 = %611.0;
  %619 = %616.0;
  %620 = %617.0;
  (%618, %619, %var_7216, %620)
}

def @func_8170(%var_8133: Tensor[(728), float64], %var_8144: Tensor[(128), float64]) -> (Tensor[(728), bool], Tensor[(128), float64], Tensor[(1728), float64], Tensor[(128), float64], Tensor[(13, 16, 3), int16], Tensor[(624), int16]) {
  %621 = @func_7853() /* ty=(Tensor[(728), float64],) */;
  %622 = %621.0;
  %623 = cast(%var_8133, dtype="bool") /* ty=Tensor[(728), bool] */;
  %624 = shape_of(%622, dtype="int32") /* ty=Tensor[(1), int32] */;
  %625 = cast(%622, dtype="bool") /* ty=Tensor[(728), bool] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?), bool] */;
  %627 = cast(meta[relay.Constant][49] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %628 = cast(%var_8144, dtype="float64") /* ty=Tensor[(128), float64] */;
  %629 = reshape(%627, newshape=[16, 9, 12]) /* ty=Tensor[(16, 9, 12), float64] */;
  %630 = reshape(%628, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %631 = @func_5640(%629, %630) /* ty=(Tensor[(?, 9, 12), bool], Tensor[(16, 9, 12), uint32], Tensor[(5, 16, 1), uint32], Tensor[(80), uint32], Tensor[(128), float64]) */;
  %632 = cast(meta[relay.Constant][50] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %633 = cast(meta[relay.Constant][50] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %634 = reshape(%632, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %635 = reshape(%633, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
  %636 = @func_355(%634, %635) /* ty=(Tensor[(13, 16, 3), int16],) */;
  %637 = logical_and(%625, %626) /* ty=Tensor[(728), bool] */;
  %638 = %631.4;
  %639 = %636.0;
  (%637, %638, meta[relay.Constant][49] /* ty=Tensor[(1728), float64] */, %var_8144, %639, meta[relay.Constant][50] /* ty=Tensor[(624), int16] */)
}

def @func_9724() -> (Tensor[(728), float64], Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) {
  @func_9722() /* ty=(Tensor[(728), float64], Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */
}

def @func_10702(%var_10700: Tensor[(12, 15, 12), float32], %var_10701: Tensor[(12, 15, 12), float32]) -> (Tensor[(12, 15, 12), float32], Tensor[(8, 624), uint32], Tensor[(104), int8]) {
  @func_10698(%var_10700, %var_10701) /* ty=(Tensor[(12, 15, 12), float32], Tensor[(8, 624), uint32], Tensor[(104), int8]) */
}

def @func_7079(%var_7076: Tensor[(1452, 1), int16], %var_7077: Tensor[(104), int8], %var_7078: Tensor[(1620), uint64]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(2, 4, 13), bool], Tensor[(1452, 1), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64], Tensor[(6, 16, 13), float32]) {
  %657 = fn (%var_7061: Tensor[(1452, 1), int16], %var_7063: Tensor[(104), int8], %var_7064: Tensor[(1620), uint64]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(2, 4, 13), bool], Tensor[(1452, 1), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64], Tensor[(6, 16, 13), float32]) {
    %640 = @func_6482() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %641 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
    %642 = cast(%var_7061, dtype="int16") /* ty=Tensor[(1452, 1), int16] */;
    %643 = cast(%var_7061, dtype="int16") /* ty=Tensor[(1452, 1), int16] */;
    %644 = cast(meta[relay.Constant][51] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
    %645 = cast(%var_7063, dtype="int8") /* ty=Tensor[(104), int8] */;
    %646 = cast(%var_7064, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
    %647 = reshape(%642, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int16] */;
    %648 = reshape(%643, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int16] */;
    %649 = reshape(%644, newshape=[8]) /* ty=Tensor[(8), int8] */;
    %650 = reshape(%645, newshape=[104]) /* ty=Tensor[(104), int8] */;
    %651 = reshape(%646, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
    %652 = @func_1046(%647, %648, %649, %650, %651) /* ty=(Tensor[(12, 11, 11), int16], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(13, 16, 3), int16], Tensor[(2, 4, 13), bool], Tensor[(8), int8], Tensor[(104), int8], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(13, 16, 3), int16]) */;
    %653 = %640.0;
    %654 = %641.0;
    %655 = %652.4;
    %656 = @func_6543() /* ty=Tensor[(6, 16, 13), float32] */;
    (%653, %654, %655, %var_7061, meta[relay.Constant][51] /* ty=Tensor[(8), int8] */, %var_7063, %var_7064, %656)
  };
  %657(%var_7076, %var_7077, %var_7078) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(2, 4, 13), bool], Tensor[(1452, 1), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64], Tensor[(6, 16, 13), float32]) */
}

def @func_11622() -> (Tensor[(728), float64],) {
  %660 = fn () -> (Tensor[(728), float64],) {
    %658 = @func_8513() /* ty=(Tensor[(728), float64],) */;
    %659 = %658.0;
    (%659,)
  };
  %660() /* ty=(Tensor[(728), float64],) */
}

def @func_11568(%var_11552: Tensor[(8, 7, 13), float64], %var_11562: Tensor[(8, 7, 13), bool]) -> Tensor[(8, 7, 13), bool] {
  %661 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %662 = %661.1;
  %663 = cast(%var_11552, dtype="bool") /* ty=Tensor[(8, 7, 13), bool] */;
  %664 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %665 = cast(%662, dtype="bool") /* ty=Tensor[(8, 7, 13), bool] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %667 = greater(%665, %666) /* ty=Tensor[(8, 7, 13), bool] */;
  %668 = cast(%var_11562, dtype="bool") /* ty=Tensor[(8, 7, 13), bool] */;
  %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%667, dtype="bool") /* ty=Tensor[(8, 7, 13), bool] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%670, %671) /* ty=Tensor[(8, 7, 13), bool] */
}

def @func_14356() -> (Tensor[(6, 16, 13), float32], Tensor[(14, 9, 5), float32]) {
  @func_14354() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(14, 9, 5), float32]) */
}

def @func_7574(%var_7571: Tensor[(728), float64], %var_7572: Tensor[(1452), int16], %var_7573: Tensor[(8), int8]) -> (Tensor[(728), uint64], Tensor[(128), float64], Tensor[(1452), int16], Tensor[(8), int8]) {
  %685 = fn (%var_7556: Tensor[(728), float64], %var_7565: Tensor[(1452), int16], %var_7566: Tensor[(8), int8]) -> (Tensor[(728), uint64], Tensor[(128), float64], Tensor[(1452), int16], Tensor[(8), int8]) {
    %672 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
    %673 = %672.2;
    %674 = cast(%var_7556, dtype="uint64") /* ty=Tensor[(728), uint64] */;
    %675 = shape_of(%673, dtype="int32") /* ty=Tensor[(1), int32] */;
    %676 = cast(%673, dtype="uint64") /* ty=Tensor[(728), uint64] */;
    %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %678 = cast(%var_7565, dtype="int16") /* ty=Tensor[(1452), int16] */;
    %679 = cast(%var_7566, dtype="int8") /* ty=Tensor[(8), int8] */;
    %680 = reshape(%678, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
    %681 = reshape(%679, newshape=[8]) /* ty=Tensor[(8), int8] */;
    %682 = @func_7308(%680, %681) /* ty=(Tensor[(8, 7, 13), float32], Tensor[(128), float64], Tensor[(416), uint64], Tensor[(1452), int16], Tensor[(8), int8]) */;
    %683 = maximum(%676, %677) /* ty=Tensor[(728), uint64] */;
    %684 = %682.1;
    (%683, %684, %var_7565, %var_7566)
  };
  %685(%var_7571, %var_7572, %var_7573) /* ty=(Tensor[(728), uint64], Tensor[(128), float64], Tensor[(1452), int16], Tensor[(8), int8]) */
}

def @func_12087() -> Tensor[(728), float64] {
  @func_12085() /* ty=Tensor[(728), float64] */
}

def @func_4461(%var_4460: Tensor[(896), uint32]) -> (Tensor[(9, 8, 7), int8], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(8, 1), int8], Tensor[(896), uint32], Tensor[(1, 1452), int16], Tensor[(13, 16, 3), int16]) {
  %709 = fn (%var_4441: Tensor[(896), uint32]) -> (Tensor[(9, 8, 7), int8], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(8, 1), int8], Tensor[(896), uint32], Tensor[(1, 1452), int16], Tensor[(13, 16, 3), int16]) {
    %686 = cast(meta[relay.Constant][53] /* ty=Tensor[(9, 8, 7), int8] */, dtype="int8") /* ty=Tensor[(9, 8, 7), int8] */;
    %687 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(9, 8, 7), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %688 = cast(meta[relay.Constant][52] /* ty=Tensor[(9, 8, 7), int8] */, dtype="int8") /* ty=Tensor[(9, 8, 7), int8] */;
    %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %690 = cast(meta[relay.Constant][54] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
    %691 = cast(meta[relay.Constant][54] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
    %692 = reshape(%690, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
    %693 = reshape(%691, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
    %694 = @func_355(%692, %693) /* ty=(Tensor[(13, 16, 3), int16],) */;
    %695 = cast(%var_4441, dtype="uint32") /* ty=Tensor[(896), uint32] */;
    %696 = cast(meta[relay.Constant][55] /* ty=Tensor[(1, 1452), int16] */, dtype="int16") /* ty=Tensor[(1, 1452), int16] */;
    %697 = reshape(%695, newshape=[16, 8, 7]) /* ty=Tensor[(16, 8, 7), uint32] */;
    %698 = reshape(%696, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
    %699 = @func_3851(%697, %698) /* ty=(Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(16, 3, 3), float64], Tensor[(144, 1), float64], Tensor[(16, 8, 7), bool], Tensor[(13, 16, 3), int16], Tensor[(1452), int16], Tensor[(8, 1), int8], Tensor[(104), int8], Tensor[(1620), uint64], Tensor[(540, 3), uint64], Tensor[(1620), uint64]) */;
    %700 = %694.0;
    %701 = cast(%700, dtype="int16") /* ty=Tensor[(13, 16, 3), int16] */;
    %702 = cast(meta[relay.Constant][54] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
    %703 = reshape(%701, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
    %704 = reshape(%702, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int16] */;
    %705 = @func_355(%703, %704) /* ty=(Tensor[(13, 16, 3), int16],) */;
    %706 = subtract(%688, %689) /* ty=Tensor[(9, 8, 7), int8] */;
    %707 = %699.7;
    %708 = %705.0;
    (%706, %700, meta[relay.Constant][54] /* ty=Tensor[(624), int16] */, %707, %var_4441, meta[relay.Constant][55] /* ty=Tensor[(1, 1452), int16] */, %708)
  };
  %709(%var_4460) /* ty=(Tensor[(9, 8, 7), int8], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(8, 1), int8], Tensor[(896), uint32], Tensor[(1, 1452), int16], Tensor[(13, 16, 3), int16]) */
}

def @func_6484() -> (Tensor[(6, 16, 13), float32],) {
  @func_6482() /* ty=(Tensor[(6, 16, 13), float32],) */
}

def @func_11982() -> (Tensor[(6, 16, 13), float32], Tensor[(1, 324), uint32], Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) {
  %710 = @func_10066() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %711 = @func_9350() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(1, 324), uint32], Tensor[(728), float64], Tensor[(728), float64]) */;
  %712 = @func_11310() /* ty=Tensor[(6, 16, 13), float32] */;
  %713 = cast(%712, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %714 = %710.0;
  %715 = %711.2;
  %716 = @func_10143() /* ty=Tensor[(6, 16, 13), float32] */;
  %717 = sinh(%713) /* ty=Tensor[(6, 16, 13), float32] */;
  (%714, %715, %716, %717)
}

def @func_7893() -> (Tensor[(2340), float64], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(4, 2, 9), bool], int32) {
  %729 = fn () -> (Tensor[(2340), float64], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(4, 2, 9), bool], int32) {
    %718 = @func_7666() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) */;
    %719 = cast(meta[relay.Constant][56] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
    %720 = cast(meta[relay.Constant][56] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
    %721 = reshape(%719, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), float32] */;
    %722 = reshape(%720, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), float32] */;
    %723 = @func_3337(%721, %722) /* ty=(Tensor[(14, 9, 5), float32],) */;
    %724 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %725 = reshape(%724, newshape=[]) /* ty=int32 */;
    %726 = %718.2;
    %727 = %723.0;
    %728 = @func_2473(%725) /* ty=Tensor[(4, 2, 9), bool] */;
    (%726, %727, meta[relay.Constant][56] /* ty=Tensor[(630), float32] */, %728, -2 /* ty=int32 */)
  };
  %729() /* ty=(Tensor[(2340), float64], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(4, 2, 9), bool], int32) */
}

def @func_9674(%var_9667: Tensor[(4, 12), float32], %var_9668: Tensor[(224, 4), uint32], %var_9669: Tensor[(330), uint8], %var_9670: Tensor[(10, 64), float32], %var_9671: Tensor[(16, 8), float64], %var_9672: Tensor[(728), float64], %var_9673: Tensor[(1452), int16]) -> (Tensor[(12, 1, 2), float32], Tensor[(12, 1, 2), bool], Tensor[(2340), float64], Tensor[(4, 12), float32], Tensor[(2340), float64], Tensor[(6, 16, 13), float32], Tensor[(224, 4), bool], Tensor[(630, 1), float32], Tensor[(330), uint8], Tensor[(10, 64), float32], Tensor[(2, 9, 135), int32], Tensor[(16, 8), float64], Tensor[(728), float64], Tensor[(1452), int16]) {
  %765 = fn (%var_9589: Tensor[(4, 12), float32], %var_9590: Tensor[(224, 4), uint32], %var_9629: Tensor[(330), uint8], %var_9630: Tensor[(10, 64), float32], %var_9646: Tensor[(16, 8), float64], %var_9647: Tensor[(728), float64], %var_9648: Tensor[(1452), int16]) -> (Tensor[(12, 1, 2), float32], Tensor[(12, 1, 2), bool], Tensor[(2340), float64], Tensor[(4, 12), float32], Tensor[(2340), float64], Tensor[(6, 16, 13), float32], Tensor[(224, 4), bool], Tensor[(630, 1), float32], Tensor[(330), uint8], Tensor[(10, 64), float32], Tensor[(2, 9, 135), int32], Tensor[(16, 8), float64], Tensor[(728), float64], Tensor[(1452), int16]) {
    %730 = cast(-8.10665f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %731 = cast(meta[relay.Constant][57] /* ty=Tensor[(12, 1, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 1, 2), float32] */;
    %732 = cast(meta[relay.Constant][57] /* ty=Tensor[(12, 1, 2), float32] */, dtype="bool") /* ty=Tensor[(12, 1, 2), bool] */;
    %733 = cast(-8.10665f /* ty=float32 */, dtype="bool") /* ty=bool */;
    %734 = cast(%var_9589, dtype="float32") /* ty=Tensor[(4, 12), float32] */;
    %735 = cast(%var_9590, dtype="uint32") /* ty=Tensor[(224, 4), uint32] */;
    %736 = reshape(%734, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %737 = reshape(%735, newshape=[896]) /* ty=Tensor[(896), uint32] */;
    %738 = @func_9064(%736, %737) /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), bool], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(128), float64], Tensor[(5, 66), uint8], Tensor[(20, 32), float32], Tensor[(2340), float64]) */;
    %739 = @func_7666() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) */;
    %740 = @func_9350() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(1, 324), uint32], Tensor[(728), float64], Tensor[(728), float64]) */;
    %741 = cast(%var_9590, dtype="bool") /* ty=Tensor[(224, 4), bool] */;
    %742 = cast(-8.10665f /* ty=float32 */, dtype="bool") /* ty=bool */;
    %743 = %740.0;
    %744 = cast(%743, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
    %745 = cast(%var_9629, dtype="uint8") /* ty=Tensor[(330), uint8] */;
    %746 = cast(%var_9630, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
    %747 = reshape(%744, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), float32] */;
    %748 = reshape(%745, newshape=[330]) /* ty=Tensor[(330), uint8] */;
    %749 = reshape(%746, newshape=[20, 32]) /* ty=Tensor[(20, 32), float32] */;
    %750 = @func_6797(%747, %748, %749) /* ty=(Tensor[(6, 16, 13), float64], Tensor[(6, 16, 13), float32], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(3, 11, 10), uint8], Tensor[(330), uint8], Tensor[(630, 1), float32], Tensor[(20, 32), bool]) */;
    %751 = cast(%var_9646, dtype="float64") /* ty=Tensor[(16, 8), float64] */;
    %752 = cast(%var_9647, dtype="float64") /* ty=Tensor[(728), float64] */;
    %753 = cast(%var_9648, dtype="int16") /* ty=Tensor[(1452), int16] */;
    %754 = reshape(%751, newshape=[128]) /* ty=Tensor[(128), float64] */;
    %755 = reshape(%752, newshape=[1, 728]) /* ty=Tensor[(1, 728), float64] */;
    %756 = reshape(%753, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
    %757 = @func_7942(%754, %755, %756) /* ty=(Tensor[(16, 9, 12), uint32], Tensor[(1728), float64], Tensor[(128), float64], Tensor[(15, 9, 12), uint64], Tensor[(1620), uint64], Tensor[(128), float64], Tensor[(1, 728), float64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(2, 9, 1), float32], Tensor[(728), float64], Tensor[(2, 9, 135), int32]) */;
    %758 = divide(%730, %731) /* ty=Tensor[(12, 1, 2), float32] */;
    %759 = less(%732, %733) /* ty=Tensor[(12, 1, 2), bool] */;
    %760 = %738.8;
    %761 = %739.2;
    %762 = logical_and(%741, %742) /* ty=Tensor[(224, 4), bool] */;
    %763 = %750.6;
    %764 = %757.11;
    (%758, %759, %760, %var_9589, %761, %743, %762, %763, %var_9629, %var_9630, %764, %var_9646, %var_9647, %var_9648)
  };
  %765(%var_9667, %var_9668, %var_9669, %var_9670, %var_9671, %var_9672, %var_9673) /* ty=(Tensor[(12, 1, 2), float32], Tensor[(12, 1, 2), bool], Tensor[(2340), float64], Tensor[(4, 12), float32], Tensor[(2340), float64], Tensor[(6, 16, 13), float32], Tensor[(224, 4), bool], Tensor[(630, 1), float32], Tensor[(330), uint8], Tensor[(10, 64), float32], Tensor[(2, 9, 135), int32], Tensor[(16, 8), float64], Tensor[(728), float64], Tensor[(1452), int16]) */
}

def @func_15473() -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) {
  %766 = @func_8792() /* ty=Tensor[(6, 16, 13), float32] */;
  %767 = @func_13475() /* ty=Tensor[(6, 16, 13), float32] */;
  (%766, %767)
}

def @func_8493() -> (Tensor[(630), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) {
  %768 = @func_7892() /* ty=(Tensor[(2340), float64], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(4, 2, 9), bool], int32) */;
  %769 = cast(meta[relay.Constant][58] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %770 = reshape(%769, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float64] */;
  %771 = %768.2;
  %772 = @func_1915(%770) /* ty=Tensor[(8, 7, 13), float64] */;
  (%771, %772, meta[relay.Constant][58] /* ty=Tensor[(728), float64] */)
}

def @func_7018(%var_7013: Tensor[(728), float64], %var_7014: Tensor[(2, 208), uint64], %var_7015: Tensor[(1452), int16], %var_7016: Tensor[(8), int8], %var_7017: Tensor[(2, 4, 13), bool]) -> (Tensor[(728), float32], Tensor[(2, 208), uint64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(2, 4, 13), bool]) {
  %795 = fn (%var_6983: Tensor[(728), float64], %var_6994: Tensor[(2, 208), uint64], %var_6995: Tensor[(1452), int16], %var_6996: Tensor[(8), int8], %var_7002: Tensor[(2, 4, 13), bool]) -> (Tensor[(728), float32], Tensor[(2, 208), uint64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(2, 4, 13), bool]) {
    %773 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
    %774 = %773.2;
    %775 = cast(%var_6983, dtype="float32") /* ty=Tensor[(728), float32] */;
    %776 = shape_of(%774, dtype="int32") /* ty=Tensor[(1), int32] */;
    %777 = cast(%774, dtype="float32") /* ty=Tensor[(728), float32] */;
    %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?), float32] */;
    %779 = cast(%var_6994, dtype="uint64") /* ty=Tensor[(2, 208), uint64] */;
    %780 = cast(%var_6994, dtype="uint64") /* ty=Tensor[(2, 208), uint64] */;
    %781 = cast(%var_6995, dtype="int16") /* ty=Tensor[(1452), int16] */;
    %782 = cast(%var_6996, dtype="int8") /* ty=Tensor[(8), int8] */;
    %783 = reshape(%779, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
    %784 = reshape(%780, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
    %785 = reshape(%781, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
    %786 = reshape(%782, newshape=[8]) /* ty=Tensor[(8), int8] */;
    %787 = @func_3942(%783, %784, %785, %786) /* ty=(Tensor[(16, 13, 2), uint64], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(2, 4, 13), bool], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64]) */;
    %788 = %787.3;
    %789 = cast(%var_7002, dtype="bool") /* ty=Tensor[(2, 4, 13), bool] */;
    %790 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
    %791 = cast(%788, dtype="bool") /* ty=Tensor[(2, 4, 13), bool] */;
    %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %793 = divide(%777, %778) /* ty=Tensor[(728), float32] */;
    %794 = not_equal(%791, %792) /* ty=Tensor[(2, 4, 13), bool] */;
    (%793, %var_6994, %var_6995, %var_6996, %794)
  };
  %795(%var_7013, %var_7014, %var_7015, %var_7016, %var_7017) /* ty=(Tensor[(728), float32], Tensor[(2, 208), uint64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(2, 4, 13), bool]) */
}

def @func_13008() -> (Tensor[(896), uint32],) {
  %798 = fn () -> (Tensor[(896), uint32],) {
    %796 = @func_10909() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) */;
    %797 = %796.2;
    (%797,)
  };
  %798() /* ty=(Tensor[(896), uint32],) */
}

def @func_3855(%var_3853: Tensor[(16, 8, 7), uint32], %var_3854: Tensor[(1452), int16]) -> (Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(16, 3, 3), float64], Tensor[(144, 1), float64], Tensor[(16, 8, 7), bool], Tensor[(13, 16, 3), int16], Tensor[(1452), int16], Tensor[(8, 1), int8], Tensor[(104), int8], Tensor[(1620), uint64], Tensor[(540, 3), uint64], Tensor[(1620), uint64]) {
  @func_3851(%var_3853, %var_3854) /* ty=(Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(16, 3, 3), float64], Tensor[(144, 1), float64], Tensor[(16, 8, 7), bool], Tensor[(13, 16, 3), int16], Tensor[(1452), int16], Tensor[(8, 1), int8], Tensor[(104), int8], Tensor[(1620), uint64], Tensor[(540, 3), uint64], Tensor[(1620), uint64]) */
}

def @func_2138(%var_2134: Tensor[(9, 6, 6), uint32], %var_2135: Tensor[(9, 6, 6), uint32], %var_2136: Tensor[(728), float64], %var_2137: Tensor[(9, 6, 6), float32]) -> (Tensor[(8, 7, 13), float64], Tensor[(728), float64], Tensor[(8, 7, 13), float64], Tensor[(9, 6, 6), float64], Tensor[(9, 6, 6), float32]) {
  %822 = fn (%var_2064: Tensor[(9, 6, 6), uint32], %var_2065: Tensor[(9, 6, 6), uint32], %var_2096: Tensor[(728), float64], %var_2114: Tensor[(9, 6, 6), float32]) -> (Tensor[(8, 7, 13), float64], Tensor[(728), float64], Tensor[(8, 7, 13), float64], Tensor[(9, 6, 6), float64], Tensor[(9, 6, 6), float32]) {
    %799 = cast(%var_2096, dtype="float64") /* ty=Tensor[(728), float64] */;
    %800 = reshape(%799, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float64] */;
    %801 = @func_1915(%800) /* ty=Tensor[(8, 7, 13), float64] */;
    %802 = cast(%801, dtype="float64") /* ty=Tensor[(8, 7, 13), float64] */;
    %803 = reshape(%802, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float64] */;
    %804 = cast(%var_2065, dtype="uint32") /* ty=Tensor[(9, 6, 6), uint32] */;
    %805 = shape_of(%var_2064, dtype="int32") /* ty=Tensor[(3), int32] */;
    %806 = cast(%var_2064, dtype="uint32") /* ty=Tensor[(9, 6, 6), uint32] */;
    %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %808 = logical_xor(%806, %807) /* ty=Tensor[(9, 6, 6), uint32] */;
    %809 = cast(%808, dtype="float32") /* ty=Tensor[(9, 6, 6), float32] */;
    %810 = shape_of(%var_2065, dtype="int32") /* ty=Tensor[(3), int32] */;
    %811 = cast(%var_2065, dtype="float32") /* ty=Tensor[(9, 6, 6), float32] */;
    %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %813 = divide(%811, %812) /* ty=Tensor[(9, 6, 6), float32] */;
    %814 = cast(%var_2114, dtype="float64") /* ty=Tensor[(9, 6, 6), float64] */;
    %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(3), int32] */;
    %816 = cast(%813, dtype="float64") /* ty=Tensor[(9, 6, 6), float64] */;
    %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %818 = cast(%var_2064, dtype="float32") /* ty=Tensor[(9, 6, 6), float32] */;
    %819 = @func_1915(%803) /* ty=Tensor[(8, 7, 13), float64] */;
    %820 = mod(%816, %817) /* ty=Tensor[(9, 6, 6), float64] */;
    %821 = acosh(%818) /* ty=Tensor[(9, 6, 6), float32] */;
    (%801, %var_2096, %819, %820, %821)
  };
  %822(%var_2134, %var_2135, %var_2136, %var_2137) /* ty=(Tensor[(8, 7, 13), float64], Tensor[(728), float64], Tensor[(8, 7, 13), float64], Tensor[(9, 6, 6), float64], Tensor[(9, 6, 6), float32]) */
}

def @func_10698(%var_10683: Tensor[(12, 15, 12), float32], %var_10684: Tensor[(12, 15, 12), float32]) -> (Tensor[(12, 15, 12), float32], Tensor[(8, 624), uint32], Tensor[(104), int8]) {
  %823 = cast(%var_10684, dtype="float32") /* ty=Tensor[(12, 15, 12), float32] */;
  %824 = shape_of(%var_10683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%var_10683, dtype="float32") /* ty=Tensor[(12, 15, 12), float32] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %827 = cast(meta[relay.Constant][59] /* ty=Tensor[(104), int8] */, dtype="int8") /* ty=Tensor[(104), int8] */;
  %828 = reshape(%827, newshape=[104]) /* ty=Tensor[(104), int8] */;
  %829 = @func_7500(%828) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(8, 78), int16], Tensor[(104), int8], Tensor[(8, 624), uint32]) */;
  %830 = floor_mod(%825, %826) /* ty=Tensor[(12, 15, 12), float32] */;
  %831 = %829.4;
  (%830, %831, meta[relay.Constant][59] /* ty=Tensor[(104), int8] */)
}

def @func_13617(%var_13616: Tensor[(144), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(16, 3, 3), float64], Tensor[(144), float64], Tensor[(20, 32), float32], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(728), float64], Tensor[(728), float64], Tensor[(728), uint64], Tensor[(1452), int16], Tensor[(2, 4), int8]) {
  %859 = fn (%var_13565: Tensor[(144), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(16, 3, 3), float64], Tensor[(144), float64], Tensor[(20, 32), float32], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(728), float64], Tensor[(728), float64], Tensor[(728), uint64], Tensor[(1452), int16], Tensor[(2, 4), int8]) {
    %832 = @func_11000() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %833 = cast(%var_13565, dtype="float64") /* ty=Tensor[(144), float64] */;
    %834 = reshape(%833, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), float64] */;
    %835 = cast(meta[relay.Constant][60] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %836 = cast(meta[relay.Constant][61] /* ty=Tensor[(896), uint32] */, dtype="uint32") /* ty=Tensor[(896), uint32] */;
    %837 = reshape(%835, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %838 = reshape(%836, newshape=[896]) /* ty=Tensor[(896), uint32] */;
    %839 = @func_9064(%837, %838) /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), bool], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(128), float64], Tensor[(5, 66), uint8], Tensor[(20, 32), float32], Tensor[(2340), float64]) */;
    %840 = cast(meta[relay.Constant][60] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %841 = reshape(%840, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %842 = @func_11770(%841) /* ty=(Tensor[(728), float64], Tensor[(20, 32), float32], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(80), uint32], Tensor[(128), float64]) */;
    %843 = cast(meta[relay.Constant][62] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %844 = reshape(%843, newshape=[728]) /* ty=Tensor[(728), float64] */;
    %845 = @func_10584(%844) /* ty=(Tensor[(728), float64], Tensor[(8, 7, 13), float64]) */;
    %846 = cast(meta[relay.Constant][62] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %847 = cast(meta[relay.Constant][63] /* ty=Tensor[(1452), int16] */, dtype="int16") /* ty=Tensor[(1452), int16] */;
    %848 = cast(meta[relay.Constant][64] /* ty=Tensor[(2, 4), int8] */, dtype="int8") /* ty=Tensor[(2, 4), int8] */;
    %849 = reshape(%846, newshape=[728]) /* ty=Tensor[(728), float64] */;
    %850 = reshape(%847, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
    %851 = reshape(%848, newshape=[8]) /* ty=Tensor[(8), int8] */;
    %852 = @func_7570(%849, %850, %851) /* ty=(Tensor[(728), uint64], Tensor[(128), float64], Tensor[(1452), int16], Tensor[(8), int8]) */;
    %853 = %832.0;
    %854 = @func_2608(%834) /* ty=Tensor[(16, 3, 3), float64] */;
    %855 = %839.7;
    %856 = %842.6;
    %857 = %845.0;
    %858 = %852.0;
    (%853, %854, %var_13565, %855, meta[relay.Constant][60] /* ty=Tensor[(48), float32] */, meta[relay.Constant][61] /* ty=Tensor[(896), uint32] */, %856, %857, meta[relay.Constant][62] /* ty=Tensor[(728), float64] */, %858, meta[relay.Constant][63] /* ty=Tensor[(1452), int16] */, meta[relay.Constant][64] /* ty=Tensor[(2, 4), int8] */)
  };
  %859(%var_13616) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(16, 3, 3), float64], Tensor[(144), float64], Tensor[(20, 32), float32], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(728), float64], Tensor[(728), float64], Tensor[(728), uint64], Tensor[(1452), int16], Tensor[(2, 4), int8]) */
}

def @func_8736() -> Tensor[(728), float64] {
  %861 = fn () -> Tensor[(728), float64] {
    %860 = @func_7328() /* ty=(Tensor[(728), float64],) */;
    %860.0
  };
  %861() /* ty=Tensor[(728), float64] */
}

def @func_9965(%var_9951: Tensor[(6, 16, 13), float32]) -> (Tensor[(6, 16, 13), bool],) {
  %862 = @func_8792() /* ty=Tensor[(6, 16, 13), float32] */;
  %863 = cast(%var_9951, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
  %864 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%862, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %867 = equal(%865, %866) /* ty=Tensor[(6, 16, 13), bool] */;
  (%867,)
}

def @func_13504(%var_13494: Tensor[(6, 16, 13), float32]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), bool], Tensor[(10, 16, 4), float32]) {
  %868 = @func_7666() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) */;
  %869 = %868.0;
  %870 = cast(%869, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %871 = cast(%var_13494, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
  %872 = shape_of(%869, dtype="int32") /* ty=Tensor[(3), int32] */;
  %873 = cast(%869, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %875 = acos(%870) /* ty=Tensor[(6, 16, 13), float32] */;
  %876 = logical_or(%873, %874) /* ty=Tensor[(6, 16, 13), bool] */;
  %877 = @func_13456() /* ty=Tensor[(10, 16, 4), float32] */;
  (%875, %876, %877)
}

def @func_13116(%var_13114: Tensor[(14, 6, 15), bool], %var_13115: Tensor[(14, 6, 15), bool]) -> (Tensor[(8, 7, 13), float64], Tensor[(728), float64], Tensor[(14, 6, 15), float32]) {
  @func_13112(%var_13114, %var_13115) /* ty=(Tensor[(8, 7, 13), float64], Tensor[(728), float64], Tensor[(14, 6, 15), float32]) */
}

def @func_15776() -> (Tensor[(128), float64], Tensor[(8, 7, 13), float64]) {
  %878 = @func_12348() /* ty=(Tensor[(128), float64],) */;
  %879 = %878.0;
  %880 = @func_10925() /* ty=Tensor[(8, 7, 13), float64] */;
  (%879, %880)
}

def @func_10472() -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(728), float64]) {
  %887 = fn () -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(728), float64]) {
    %881 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %882 = cast(meta[relay.Constant][65] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %883 = reshape(%882, newshape=[14, 52]) /* ty=Tensor[(14, 52), float64] */;
    %884 = @func_6647(%883) /* ty=(Tensor[(6, 16, 13), bool], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(14, 52), float64]) */;
    %885 = %881.0;
    %886 = %884.1;
    (%885, %886, meta[relay.Constant][65] /* ty=Tensor[(728), float64] */)
  };
  %887() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(728), float64]) */
}

def @func_14487() -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(144), float64]) {
  %894 = fn () -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(144), float64]) {
    %888 = @func_9289() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %889 = cast(meta[relay.Constant][66] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
    %890 = reshape(%889, newshape=[144]) /* ty=Tensor[(144), float64] */;
    %891 = @func_13615(%890) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(16, 3, 3), float64], Tensor[(144), float64], Tensor[(20, 32), float32], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(728), float64], Tensor[(728), float64], Tensor[(728), uint64], Tensor[(1452), int16], Tensor[(2, 4), int8]) */;
    %892 = %888.0;
    %893 = %891.0;
    (%892, %893, meta[relay.Constant][66] /* ty=Tensor[(144), float64] */)
  };
  %894() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(144), float64]) */
}

def @func_9255(%var_9236: Tensor[(104), int8]) -> (Tensor[(728), float64], Tensor[(728), float64], Tensor[(8), int8], Tensor[(1452), int16], Tensor[(104), int8], Tensor[(1620), uint64]) {
  %895 = @func_8513() /* ty=(Tensor[(728), float64],) */;
  %896 = @func_7328() /* ty=(Tensor[(728), float64],) */;
  %897 = cast(meta[relay.Constant][67] /* ty=Tensor[(1452), int16] */, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %898 = cast(%var_9236, dtype="int8") /* ty=Tensor[(104), int8] */;
  %899 = cast(meta[relay.Constant][68] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %900 = reshape(%897, newshape=[1452, 1]) /* ty=Tensor[(1452, 1), int16] */;
  %901 = reshape(%898, newshape=[104]) /* ty=Tensor[(104), int8] */;
  %902 = reshape(%899, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %903 = @func_7075(%900, %901, %902) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(2, 4, 13), bool], Tensor[(1452, 1), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64], Tensor[(6, 16, 13), float32]) */;
  %904 = %895.0;
  %905 = %896.0;
  %906 = %903.4;
  (%904, %905, %906, meta[relay.Constant][67] /* ty=Tensor[(1452), int16] */, %var_9236, meta[relay.Constant][68] /* ty=Tensor[(1620), uint64] */)
}

def @func_8793() -> Tensor[(6, 16, 13), float32] {
  %908 = fn () -> Tensor[(6, 16, 13), float32] {
    %907 = @func_6482() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %907.0
  };
  %908() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_5148(%var_5147: Tensor[(12, 4, 1), float32]) -> Tensor[(12, 4, 1), float32] {
  %911 = fn (%var_5137: Tensor[(12, 4, 1), float32]) -> Tensor[(12, 4, 1), float32] {
    %909 = cast(-9.72282f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %910 = cast(%var_5137, dtype="float32") /* ty=Tensor[(12, 4, 1), float32] */;
    floor_divide(%909, %910) /* ty=Tensor[(12, 4, 1), float32] */
  };
  %911(%var_5147) /* ty=Tensor[(12, 4, 1), float32] */
}

def @func_14564(%var_14562: int64, %var_14563: Tensor[(13, 1, 15), int64]) -> (Tensor[(13, 1, 15), int64], Tensor[(896), bool], Tensor[(630), float32]) {
  @func_14560(%var_14562, %var_14563) /* ty=(Tensor[(13, 1, 15), int64], Tensor[(896), bool], Tensor[(630), float32]) */
}

def @func_15706() -> (Tensor[(728), float64], Tensor[(6, 16, 13), float32]) {
  @func_15704() /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), float32]) */
}

def @func_8174(%var_8172: Tensor[(728), float64], %var_8173: Tensor[(128), float64]) -> (Tensor[(728), bool], Tensor[(128), float64], Tensor[(1728), float64], Tensor[(128), float64], Tensor[(13, 16, 3), int16], Tensor[(624), int16]) {
  @func_8170(%var_8172, %var_8173) /* ty=(Tensor[(728), bool], Tensor[(128), float64], Tensor[(1728), float64], Tensor[(128), float64], Tensor[(13, 16, 3), int16], Tensor[(624), int16]) */
}

def @func_9289() -> (Tensor[(6, 16, 13), float32],) {
  %912 = @func_8792() /* ty=Tensor[(6, 16, 13), float32] */;
  (%912,)
}

def @func_7500(%var_7470: Tensor[(104), int8]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(8, 78), int16], Tensor[(104), int8], Tensor[(8, 624), uint32]) {
  %913 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %914 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %915 = cast(meta[relay.Constant][69] /* ty=Tensor[(8, 1), int8] */, dtype="int8") /* ty=Tensor[(8, 1), int8] */;
  %916 = cast(%var_7470, dtype="int8") /* ty=Tensor[(104), int8] */;
  %917 = cast(meta[relay.Constant][70] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %918 = reshape(%915, newshape=[2, 4, 1]) /* ty=Tensor[(2, 4, 1), int8] */;
  %919 = reshape(%916, newshape=[2, 4, 13]) /* ty=Tensor[(2, 4, 13), int8] */;
  %920 = reshape(%917, newshape=[8, 78]) /* ty=Tensor[(8, 78), int16] */;
  %921 = @func_613(%918, %919, %920) /* ty=(Tensor[(2, 4, 13), bool], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(540, 3), uint64], Tensor[(15, 9, 12), uint64], Tensor[(15, 9, 12), uint64], Tensor[(13, 16, 3), int16], Tensor[(8, 78), int16]) */;
  %922 = cast(meta[relay.Constant][70] /* ty=Tensor[(624), int16] */, dtype="uint32") /* ty=Tensor[(624), uint32] */;
  %923 = cast(meta[relay.Constant][69] /* ty=Tensor[(8, 1), int8] */, dtype="uint32") /* ty=Tensor[(8, 1), uint32] */;
  %924 = %913.0;
  %925 = %914.0;
  %926 = %921.7;
  %927 = bitwise_or(%922, %923) /* ty=Tensor[(8, 624), uint32] */;
  (%924, %925, %926, %var_7470, %927)
}

def @func_13112(%var_13098: Tensor[(14, 6, 15), bool], %var_13099: Tensor[(14, 6, 15), bool]) -> (Tensor[(8, 7, 13), float64], Tensor[(728), float64], Tensor[(14, 6, 15), float32]) {
  %928 = cast(meta[relay.Constant][71] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %929 = reshape(%928, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %930 = @func_10584(%929) /* ty=(Tensor[(728), float64], Tensor[(8, 7, 13), float64]) */;
  %931 = cast(%var_13099, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
  %932 = shape_of(%var_13098, dtype="int32") /* ty=Tensor[(3), int32] */;
  %933 = cast(%var_13098, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
  %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %935 = logical_or(%933, %934) /* ty=Tensor[(14, 6, 15), bool] */;
  %936 = cast(%935, dtype="float32") /* ty=Tensor[(14, 6, 15), float32] */;
  %937 = %930.1;
  %938 = sinh(%936) /* ty=Tensor[(14, 6, 15), float32] */;
  (%937, meta[relay.Constant][71] /* ty=Tensor[(728), float64] */, %938)
}

def @func_14513() -> Tensor[(728), float64] {
  %939 = @func_12151() /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), float32]) */;
  %940 = %939.0;
  %941 = cast(%940, dtype="float64") /* ty=Tensor[(728), float64] */;
  acos(%941) /* ty=Tensor[(728), float64] */
}

def @func_9478(%var_9476: Tensor[(728), float64], %var_9477: Tensor[(2340, 1), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(1452), int16], Tensor[(728), float64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(12, 13, 15), float64], Tensor[(2340, 728), int16]) {
  %961 = fn (%var_9425: Tensor[(728), float64], %var_9458: Tensor[(2340, 1), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(1452), int16], Tensor[(728), float64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(12, 13, 15), float64], Tensor[(2340, 728), int16]) {
    %942 = @func_9388() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %943 = cast(%var_9425, dtype="float64") /* ty=Tensor[(728), float64] */;
    %944 = cast(meta[relay.Constant][72] /* ty=Tensor[(1452), int16] */, dtype="int16") /* ty=Tensor[(1452), int16] */;
    %945 = cast(meta[relay.Constant][73] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
    %946 = reshape(%943, newshape=[728]) /* ty=Tensor[(728), float64] */;
    %947 = reshape(%944, newshape=[1452]) /* ty=Tensor[(1452), int16] */;
    %948 = reshape(%945, newshape=[8]) /* ty=Tensor[(8), int8] */;
    %949 = @func_7570(%946, %947, %948) /* ty=(Tensor[(728), uint64], Tensor[(128), float64], Tensor[(1452), int16], Tensor[(8), int8]) */;
    %950 = cast(%var_9458, dtype="float64") /* ty=Tensor[(2340, 1), float64] */;
    %951 = reshape(%950, newshape=[12, 13, 15]) /* ty=Tensor[(12, 13, 15), float64] */;
    %952 = @func_7090(%951) /* ty=(Tensor[(12, 13, 15), float64],) */;
    %953 = @func_8881() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(728), float64], Tensor[(128), float64], Tensor[(4, 2, 9), bool], int32) */;
    %954 = %953.1;
    %955 = cast(%954, dtype="int16") /* ty=Tensor[(728), int16] */;
    %956 = cast(%var_9458, dtype="int16") /* ty=Tensor[(2340, 1), int16] */;
    %957 = %942.0;
    %958 = %949.2;
    %959 = %952.0;
    %960 = logical_xor(%955, %956) /* ty=Tensor[(2340, 728), int16] */;
    (%957, %958, %var_9425, meta[relay.Constant][72] /* ty=Tensor[(1452), int16] */, meta[relay.Constant][73] /* ty=Tensor[(8), int8] */, %959, %960)
  };
  %961(%var_9476, %var_9477) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(1452), int16], Tensor[(728), float64], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(12, 13, 15), float64], Tensor[(2340, 728), int16]) */
}

def @func_7790(%var_7789: Tensor[(630), float32]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(630), float32], Tensor[(13, 16, 3), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(624), int16]) {
  %979 = fn (%var_7759: Tensor[(630), float32]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(630), float32], Tensor[(13, 16, 3), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(624), int16]) {
    %962 = @func_6864() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
    %963 = @func_7373() /* ty=(Tensor[(728), float64],) */;
    %964 = cast(%var_7759, dtype="float32") /* ty=Tensor[(630), float32] */;
    %965 = reshape(%964, newshape=[630]) /* ty=Tensor[(630), float32] */;
    %966 = @func_7236(%965) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(6, 16, 13), float32]) */;
    %967 = cast(meta[relay.Constant][74] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
    %968 = cast(meta[relay.Constant][75] /* ty=Tensor[(104), int8] */, dtype="int8") /* ty=Tensor[(104), int8] */;
    %969 = cast(meta[relay.Constant][76] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
    %970 = reshape(%967, newshape=[2, 4, 1]) /* ty=Tensor[(2, 4, 1), int8] */;
    %971 = reshape(%968, newshape=[2, 4, 13]) /* ty=Tensor[(2, 4, 13), int8] */;
    %972 = reshape(%969, newshape=[8, 78]) /* ty=Tensor[(8, 78), int16] */;
    %973 = @func_613(%970, %971, %972) /* ty=(Tensor[(2, 4, 13), bool], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(540, 3), uint64], Tensor[(15, 9, 12), uint64], Tensor[(15, 9, 12), uint64], Tensor[(13, 16, 3), int16], Tensor[(8, 78), int16]) */;
    %974 = %962.0;
    %975 = @func_6543() /* ty=Tensor[(6, 16, 13), float32] */;
    %976 = %963.0;
    %977 = %966.3;
    %978 = %973.6;
    (%974, %975, %976, %977, %var_7759, %978, meta[relay.Constant][74] /* ty=Tensor[(8), int8] */, meta[relay.Constant][75] /* ty=Tensor[(104), int8] */, meta[relay.Constant][76] /* ty=Tensor[(624), int16] */)
  };
  %979(%var_7789) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(630), float32], Tensor[(13, 16, 3), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(624), int16]) */
}

def @func_8721() -> Tensor[(630), float32] {
  %981 = fn () -> Tensor[(630), float32] {
    %980 = @func_8493() /* ty=(Tensor[(630), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
    %980.0
  };
  %981() /* ty=Tensor[(630), float32] */
}

def @func_10925() -> Tensor[(8, 7, 13), float64] {
  %982 = @func_9350() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(1, 324), uint32], Tensor[(728), float64], Tensor[(728), float64]) */;
  %982.1
}

def @func_11377() -> (Tensor[(6, 16, 13), float32],) {
  %984 = fn () -> (Tensor[(6, 16, 13), float32],) {
    %983 = @func_10864() /* ty=Tensor[(6, 16, 13), float32] */;
    (%983,)
  };
  %984() /* ty=(Tensor[(6, 16, 13), float32],) */
}

def @func_13507(%var_13505: Tensor[(6, 16, 13), float32]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), bool], Tensor[(10, 16, 4), float32]) {
  @func_13504(%var_13505) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), bool], Tensor[(10, 16, 4), float32]) */
}

def @func_9968(%var_9966: Tensor[(6, 16, 13), float32]) -> (Tensor[(6, 16, 13), bool],) {
  @func_9965(%var_9966) /* ty=(Tensor[(6, 16, 13), bool],) */
}

def @func_14515() -> Tensor[(728), float64] {
  @func_14513() /* ty=Tensor[(728), float64] */
}

def @func_11572(%var_11570: Tensor[(8, 7, 13), float64], %var_11571: Tensor[(8, 7, 13), bool]) -> Tensor[(8, 7, 13), bool] {
  @func_11568(%var_11570, %var_11571) /* ty=Tensor[(8, 7, 13), bool] */
}

def @func_10083() -> (Tensor[(4, 2, 9), bool], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) {
  %985 = @func_7892() /* ty=(Tensor[(2340), float64], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(4, 2, 9), bool], int32) */;
  %986 = cast(meta[relay.Constant][77] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %987 = reshape(%986, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), float64] */;
  %988 = @func_2236(%987) /* ty=(Tensor[(8, 4, 4), float64],) */;
  %989 = %985.3;
  %990 = %988.0;
  (%989, %990, meta[relay.Constant][77] /* ty=Tensor[(128), float64] */)
}

def @func_10375(%var_10374: Tensor[(48), float32]) -> (Tensor[(728), float64], Tensor[(12, 4, 1), float32], Tensor[(48), float32]) {
  %996 = fn (%var_10367: Tensor[(48), float32]) -> (Tensor[(728), float64], Tensor[(12, 4, 1), float32], Tensor[(48), float32]) {
    %991 = @func_9129() /* ty=(Tensor[(728), float64],) */;
    %992 = cast(%var_10367, dtype="float32") /* ty=Tensor[(48), float32] */;
    %993 = reshape(%992, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float32] */;
    %994 = %991.0;
    %995 = @func_5146(%993) /* ty=Tensor[(12, 4, 1), float32] */;
    (%994, %995, %var_10367)
  };
  %996(%var_10374) /* ty=(Tensor[(728), float64], Tensor[(12, 4, 1), float32], Tensor[(48), float32]) */
}

def @func_7090(%var_7084: Tensor[(12, 13, 15), float64]) -> (Tensor[(12, 13, 15), float64],) {
  %997 = cast(%var_7084, dtype="float64") /* ty=Tensor[(12, 13, 15), float64] */;
  %998 = log10(%997) /* ty=Tensor[(12, 13, 15), float64] */;
  (%998,)
}

def @func_13283() -> Tensor[(896), bool] {
  @func_13281() /* ty=Tensor[(896), bool] */
}

def @func_10340(%var_10339: Tensor[(128), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(128), float64], Tensor[(128), float64]) {
  %1005 = fn (%var_10334: Tensor[(128), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(128), float64], Tensor[(128), float64]) {
    %999 = @func_6482() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %1000 = cast(%var_10334, dtype="float64") /* ty=Tensor[(128), float64] */;
    %1001 = reshape(%1000, newshape=[128]) /* ty=Tensor[(128), float64] */;
    %1002 = @func_7588(%1001) /* ty=(Tensor[(728), float64], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
    %1003 = %999.0;
    %1004 = %1002.2;
    (%1003, %1004, %var_10334)
  };
  %1005(%var_10339) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(128), float64], Tensor[(128), float64]) */
}

def @func_10977() -> (Tensor[(630), float32], Tensor[(15, 14, 3), float32]) {
  %1006 = @func_8720() /* ty=Tensor[(630), float32] */;
  %1007 = cast(%1006, dtype="float32") /* ty=Tensor[(630), float32] */;
  %1008 = reshape(%1007, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), float32] */;
  %1009 = @func_1855(%1008) /* ty=Tensor[(15, 14, 3), float32] */;
  (%1006, %1009)
}

def @func_15222(%var_15220: Tensor[(704), float64], %var_15221: Tensor[(630), float32]) -> (Tensor[(6, 16, 13), bool], Tensor[(16, 11, 4), float64], Tensor[(704), float64], Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(14, 9, 5), float32], Tensor[(630), float32]) {
  @func_15218(%var_15220, %var_15221) /* ty=(Tensor[(6, 16, 13), bool], Tensor[(16, 11, 4), float64], Tensor[(704), float64], Tensor[(728), float64], Tensor[(6, 16, 13), float32], Tensor[(14, 9, 5), float32], Tensor[(630), float32]) */
}

def @func_11984() -> (Tensor[(6, 16, 13), float32], Tensor[(1, 324), uint32], Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) {
  @func_11982() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(1, 324), uint32], Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */
}

def @func_13476() -> Tensor[(6, 16, 13), float32] {
  %1010 = fn () -> Tensor[(6, 16, 13), float32] {
    @func_13439() /* ty=Tensor[(6, 16, 13), float32] */
  };
  %1010() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_15704() -> (Tensor[(728), float64], Tensor[(6, 16, 13), float32]) {
  %1011 = @func_7373() /* ty=(Tensor[(728), float64],) */;
  %1012 = %1011.0;
  %1013 = @func_9528() /* ty=Tensor[(6, 16, 13), float32] */;
  (%1012, %1013)
}

def @func_15475() -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) {
  @func_15473() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */
}

def @func_12300() -> (Tensor[(1, 324), uint32],) {
  %1016 = fn () -> (Tensor[(1, 324), uint32],) {
    %1014 = @func_9350() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(1, 324), uint32], Tensor[(728), float64], Tensor[(728), float64]) */;
    %1015 = %1014.2;
    (%1015,)
  };
  %1016() /* ty=(Tensor[(1, 324), uint32],) */
}

def @func_8495() -> (Tensor[(630), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) {
  @func_8493() /* ty=(Tensor[(630), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */
}

def @func_15340() -> (Tensor[(6, 16, 13), float32], Tensor[(728), float64], Tensor[(728), float64], Tensor[(728), float64], Tensor[(728), float64], Tensor[(630), float32], Tensor[(1, 324), uint32]) {
  @func_15338() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(728), float64], Tensor[(728), float64], Tensor[(728), float64], Tensor[(728), float64], Tensor[(630), float32], Tensor[(1, 324), uint32]) */
}

def @func_15654() -> (Tensor[(1, 48), float32], Tensor[(6, 16, 13), float32]) {
  %1021 = fn () -> (Tensor[(1, 48), float32], Tensor[(6, 16, 13), float32]) {
    %1017 = @func_12767() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(128), float64], Tensor[(128), float64], Tensor[(728), float64], Tensor[(1, 48), float32]) */;
    %1018 = @func_14383() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
    %1019 = %1017.4;
    %1020 = %1018.1;
    (%1019, %1020)
  };
  %1021() /* ty=(Tensor[(1, 48), float32], Tensor[(6, 16, 13), float32]) */
}

def @func_8264(%var_8263: Tensor[(108), float64]) -> (Tensor[(728), float64], Tensor[(3, 3, 12), float64], Tensor[(108), float64]) {
  %1028 = fn (%var_8247: Tensor[(108), float64]) -> (Tensor[(728), float64], Tensor[(3, 3, 12), float64], Tensor[(108), float64]) {
    %1022 = @func_7853() /* ty=(Tensor[(728), float64],) */;
    %1023 = cast(%var_8247, dtype="float64") /* ty=Tensor[(108), float64] */;
    %1024 = reshape(%1023, newshape=[3, 3, 12]) /* ty=Tensor[(3, 3, 12), float64] */;
    %1025 = @func_3549(%1024) /* ty=(Tensor[(3, 3, 12), float64],) */;
    %1026 = %1022.0;
    %1027 = %1025.0;
    (%1026, %1027, %var_8247)
  };
  %1028(%var_8263) /* ty=(Tensor[(728), float64], Tensor[(3, 3, 12), float64], Tensor[(108), float64]) */
}

def @func_12804() -> (Tensor[(12, 13, 15), float64],) {
  %1030 = fn () -> (Tensor[(12, 13, 15), float64],) {
    %1029 = @func_8213() /* ty=Tensor[(12, 13, 15), float64] */;
    (%1029,)
  };
  %1030() /* ty=(Tensor[(12, 13, 15), float64],) */
}

def @func_11743() -> Tensor[(6, 16, 13), float32] {
  %1032 = fn () -> Tensor[(6, 16, 13), float32] {
    %1031 = @func_11279() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
    %1031.1
  };
  %1032() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_12897() -> (Tensor[(728), float64],) {
  @func_12895() /* ty=(Tensor[(728), float64],) */
}

def @func_2826(%var_2824: Tensor[(3, 11, 10), uint8]) -> (Tensor[(3, 11, 10), uint8], Tensor[(3, 11, 10), bool]) {
  @func_2823(%var_2824) /* ty=(Tensor[(3, 11, 10), uint8], Tensor[(3, 11, 10), bool]) */
}

def @func_12043(%var_12032: Tensor[(1, 13, 11), float32]) -> (Tensor[(1, 13, 11), float32], Tensor[(728), float64], Tensor[(6, 16, 13), float32]) {
  %1033 = cast(%var_12032, dtype="float32") /* ty=Tensor[(1, 13, 11), float32] */;
  %1034 = @func_8513() /* ty=(Tensor[(728), float64],) */;
  %1035 = @func_10471() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(728), float64]) */;
  %1036 = atanh(%1033) /* ty=Tensor[(1, 13, 11), float32] */;
  %1037 = %1034.0;
  %1038 = %1035.0;
  (%1036, %1037, %1038)
}

def @func_13884() -> (Tensor[(728), float64], Tensor[(728), float64]) {
  %1042 = fn () -> (Tensor[(728), float64], Tensor[(728), float64]) {
    %1039 = @func_11621() /* ty=(Tensor[(728), float64],) */;
    %1040 = @func_12085() /* ty=Tensor[(728), float64] */;
    %1041 = %1039.0;
    (%1040, %1041)
  };
  %1042() /* ty=(Tensor[(728), float64], Tensor[(728), float64]) */
}

def @func_13439() -> Tensor[(6, 16, 13), float32] {
  %1043 = @func_11982() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(1, 324), uint32], Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
  %1043.3
}

def @func_12384() -> (Tensor[(6, 16, 13), float32],) {
  @func_12382() /* ty=(Tensor[(6, 16, 13), float32],) */
}

def @func_8685(%var_8682: Tensor[(128), float64], %var_8683: Tensor[(728), float64], %var_8684: Tensor[(48, 1), float32]) -> (Tensor[(6, 16, 13), float32], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(14, 52), float64], Tensor[(48, 1), float32], Tensor[(12, 4, 728), float32]) {
  %1062 = fn (%var_8624: Tensor[(128), float64], %var_8635: Tensor[(728), float64], %var_8647: Tensor[(48, 1), float32]) -> (Tensor[(6, 16, 13), float32], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(14, 52), float64], Tensor[(48, 1), float32], Tensor[(12, 4, 728), float32]) {
    %1044 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %1045 = cast(%var_8624, dtype="float64") /* ty=Tensor[(128), float64] */;
    %1046 = reshape(%1045, newshape=[128]) /* ty=Tensor[(128), float64] */;
    %1047 = @func_7588(%1046) /* ty=(Tensor[(728), float64], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
    %1048 = cast(%var_8635, dtype="float64") /* ty=Tensor[(728), float64] */;
    %1049 = reshape(%1048, newshape=[14, 52]) /* ty=Tensor[(14, 52), float64] */;
    %1050 = @func_6647(%1049) /* ty=(Tensor[(6, 16, 13), bool], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(14, 52), float64]) */;
    %1051 = cast(%var_8647, dtype="float32") /* ty=Tensor[(48, 1), float32] */;
    %1052 = reshape(%1051, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float32] */;
    %1053 = @func_5146(%1052) /* ty=Tensor[(12, 4, 1), float32] */;
    %1054 = cast(%1053, dtype="float64") /* ty=Tensor[(12, 4, 1), float64] */;
    %1055 = erf(%1054) /* ty=Tensor[(12, 4, 1), float64] */;
    %1056 = cast(%1055, dtype="float32") /* ty=Tensor[(12, 4, 1), float32] */;
    %1057 = cast(%var_8635, dtype="float32") /* ty=Tensor[(728), float32] */;
    %1058 = %1044.0;
    %1059 = %1047.1;
    %1060 = %1050.3;
    %1061 = power(%1056, %1057) /* ty=Tensor[(12, 4, 728), float32] */;
    (%1058, %1059, %var_8624, %1060, %var_8647, %1061)
  };
  %1062(%var_8682, %var_8683, %var_8684) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(14, 52), float64], Tensor[(48, 1), float32], Tensor[(12, 4, 728), float32]) */
}

def @func_10391() -> Tensor[(2340), float64] {
  @func_10389() /* ty=Tensor[(2340), float64] */
}

def @func_12421() -> Tensor[(728), float64] {
  @func_12419() /* ty=Tensor[(728), float64] */
}

def @func_3947(%var_3943: Tensor[(16, 13, 2), uint64], %var_3944: Tensor[(16, 13, 2), uint64], %var_3945: Tensor[(1452), int16], %var_3946: Tensor[(8), int8]) -> (Tensor[(16, 13, 2), uint64], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(2, 4, 13), bool], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64]) {
  %1084 = fn (%var_3910: Tensor[(16, 13, 2), uint64], %var_3911: Tensor[(16, 13, 2), uint64], %var_3933: Tensor[(1452), int16], %var_3934: Tensor[(8), int8]) -> (Tensor[(16, 13, 2), uint64], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(2, 4, 13), bool], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64]) {
    %1063 = cast(%var_3911, dtype="uint64") /* ty=Tensor[(16, 13, 2), uint64] */;
    %1064 = shape_of(%var_3910, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1065 = cast(%var_3910, dtype="uint64") /* ty=Tensor[(16, 13, 2), uint64] */;
    %1066 = dyn.reshape(%1063, %1064, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1067 = cast(meta[relay.Constant][78] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
    %1068 = reshape(%1067, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), float64] */;
    %1069 = @func_2236(%1068) /* ty=(Tensor[(8, 4, 4), float64],) */;
    %1070 = cast(%var_3933, dtype="int16") /* ty=Tensor[(1452), int16] */;
    %1071 = cast(%var_3933, dtype="int16") /* ty=Tensor[(1452), int16] */;
    %1072 = cast(%var_3934, dtype="int8") /* ty=Tensor[(8), int8] */;
    %1073 = cast(meta[relay.Constant][79] /* ty=Tensor[(104), int8] */, dtype="int8") /* ty=Tensor[(104), int8] */;
    %1074 = cast(meta[relay.Constant][80] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
    %1075 = reshape(%1070, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int16] */;
    %1076 = reshape(%1071, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int16] */;
    %1077 = reshape(%1072, newshape=[8]) /* ty=Tensor[(8), int8] */;
    %1078 = reshape(%1073, newshape=[104]) /* ty=Tensor[(104), int8] */;
    %1079 = reshape(%1074, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
    %1080 = @func_1046(%1075, %1076, %1077, %1078, %1079) /* ty=(Tensor[(12, 11, 11), int16], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(13, 16, 3), int16], Tensor[(2, 4, 13), bool], Tensor[(8), int8], Tensor[(104), int8], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(13, 16, 3), int16]) */;
    %1081 = left_shift(%1065, %1066) /* ty=Tensor[(16, 13, 2), uint64] */;
    %1082 = %1069.0;
    %1083 = %1080.4;
    (%1081, %1082, meta[relay.Constant][78] /* ty=Tensor[(128), float64] */, %1083, %var_3933, %var_3934, meta[relay.Constant][79] /* ty=Tensor[(104), int8] */, meta[relay.Constant][80] /* ty=Tensor[(1620), uint64] */)
  };
  %1084(%var_3943, %var_3944, %var_3945, %var_3946) /* ty=(Tensor[(16, 13, 2), uint64], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(2, 4, 13), bool], Tensor[(1452), int16], Tensor[(8), int8], Tensor[(104), int8], Tensor[(1620), uint64]) */
}

def @func_13329() -> (Tensor[(14, 9, 5), float32],) {
  %1087 = fn () -> (Tensor[(14, 9, 5), float32],) {
    %1085 = @func_7892() /* ty=(Tensor[(2340), float64], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(4, 2, 9), bool], int32) */;
    %1086 = %1085.1;
    (%1086,)
  };
  %1087() /* ty=(Tensor[(14, 9, 5), float32],) */
}

def @func_3851(%var_3781: Tensor[(16, 8, 7), uint32], %var_3806: Tensor[(1452), int16]) -> (Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(16, 3, 3), float64], Tensor[(144, 1), float64], Tensor[(16, 8, 7), bool], Tensor[(13, 16, 3), int16], Tensor[(1452), int16], Tensor[(8, 1), int8], Tensor[(104), int8], Tensor[(1620), uint64], Tensor[(540, 3), uint64], Tensor[(1620), uint64]) {
  %1088 = cast(meta[relay.Constant][81] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %1089 = cast(meta[relay.Constant][81] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %1090 = reshape(%1088, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), float32] */;
  %1091 = reshape(%1089, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), float32] */;
  %1092 = @func_3337(%1090, %1091) /* ty=(Tensor[(14, 9, 5), float32],) */;
  %1093 = cast(meta[relay.Constant][82] /* ty=Tensor[(144, 1), float64] */, dtype="float64") /* ty=Tensor[(144, 1), float64] */;
  %1094 = reshape(%1093, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), float64] */;
  %1095 = cast(%var_3781, dtype="float32") /* ty=Tensor[(16, 8, 7), float32] */;
  %1096 = sqrt(%1095) /* ty=Tensor[(16, 8, 7), float32] */;
  %1097 = cast(meta[relay.Constant][83] /* ty=Tensor[(16, 8, 7), uint32] */, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
  %1098 = shape_of(%var_3781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1099 = cast(%var_3781, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
  %1100 = dyn.reshape(%1097, %1098, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1101 = greater_equal(%1099, %1100) /* ty=Tensor[(16, 8, 7), bool] */;
  %1102 = cast(%1101, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
  %1103 = shape_of(%1096, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1104 = cast(%1096, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
  %1105 = dyn.reshape(%1102, %1103, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1106 = cast(%var_3806, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %1107 = cast(%var_3806, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %1108 = cast(meta[relay.Constant][84] /* ty=Tensor[(8, 1), int8] */, dtype="int8") /* ty=Tensor[(8, 1), int8] */;
  %1109 = cast(meta[relay.Constant][85] /* ty=Tensor[(104), int8] */, dtype="int8") /* ty=Tensor[(104), int8] */;
  %1110 = cast(meta[relay.Constant][86] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %1111 = reshape(%1106, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int16] */;
  %1112 = reshape(%1107, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int16] */;
  %1113 = reshape(%1108, newshape=[8]) /* ty=Tensor[(8), int8] */;
  %1114 = reshape(%1109, newshape=[104]) /* ty=Tensor[(104), int8] */;
  %1115 = reshape(%1110, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %1116 = @func_1046(%1111, %1112, %1113, %1114, %1115) /* ty=(Tensor[(12, 11, 11), int16], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(13, 16, 3), int16], Tensor[(2, 4, 13), bool], Tensor[(8), int8], Tensor[(104), int8], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(13, 16, 3), int16]) */;
  %1117 = cast(meta[relay.Constant][84] /* ty=Tensor[(8, 1), int8] */, dtype="int8") /* ty=Tensor[(8, 1), int8] */;
  %1118 = cast(meta[relay.Constant][85] /* ty=Tensor[(104), int8] */, dtype="int8") /* ty=Tensor[(104), int8] */;
  %1119 = %1116.10;
  %1120 = cast(%1119, dtype="int16") /* ty=Tensor[(13, 16, 3), int16] */;
  %1121 = reshape(%1117, newshape=[2, 4, 1]) /* ty=Tensor[(2, 4, 1), int8] */;
  %1122 = reshape(%1118, newshape=[2, 4, 13]) /* ty=Tensor[(2, 4, 13), int8] */;
  %1123 = reshape(%1120, newshape=[8, 78]) /* ty=Tensor[(8, 78), int16] */;
  %1124 = @func_613(%1121, %1122, %1123) /* ty=(Tensor[(2, 4, 13), bool], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(540, 3), uint64], Tensor[(15, 9, 12), uint64], Tensor[(15, 9, 12), uint64], Tensor[(13, 16, 3), int16], Tensor[(8, 78), int16]) */;
  %1125 = cast(%var_3806, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %1126 = cast(%var_3806, dtype="int16") /* ty=Tensor[(1452), int16] */;
  %1127 = cast(meta[relay.Constant][84] /* ty=Tensor[(8, 1), int8] */, dtype="int8") /* ty=Tensor[(8, 1), int8] */;
  %1128 = cast(meta[relay.Constant][85] /* ty=Tensor[(104), int8] */, dtype="int8") /* ty=Tensor[(104), int8] */;
  %1129 = cast(meta[relay.Constant][86] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %1130 = reshape(%1125, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int16] */;
  %1131 = reshape(%1126, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), int16] */;
  %1132 = reshape(%1127, newshape=[8]) /* ty=Tensor[(8), int8] */;
  %1133 = reshape(%1128, newshape=[104]) /* ty=Tensor[(104), int8] */;
  %1134 = reshape(%1129, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %1135 = @func_1046(%1130, %1131, %1132, %1133, %1134) /* ty=(Tensor[(12, 11, 11), int16], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(13, 16, 3), int16], Tensor[(2, 4, 13), bool], Tensor[(8), int8], Tensor[(104), int8], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(13, 16, 3), int16]) */;
  %1136 = %1092.0;
  %1137 = @func_2608(%1094) /* ty=Tensor[(16, 3, 3), float64] */;
  %1138 = less(%1104, %1105) /* ty=Tensor[(16, 8, 7), bool] */;
  %1139 = %1124.3;
  %1140 = %1135.9;
  (%1136, meta[relay.Constant][81] /* ty=Tensor[(630), float32] */, %1137, meta[relay.Constant][82] /* ty=Tensor[(144, 1), float64] */, %1138, %1119, %var_3806, meta[relay.Constant][84] /* ty=Tensor[(8, 1), int8] */, meta[relay.Constant][85] /* ty=Tensor[(104), int8] */, meta[relay.Constant][86] /* ty=Tensor[(1620), uint64] */, %1139, %1140)
}

def @func_8107(%var_8106: Tensor[(1728), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(16, 9, 12), uint32], Tensor[(1728), float64], Tensor[(128), float64]) {
  %1149 = fn (%var_8090: Tensor[(1728), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(16, 9, 12), uint32], Tensor[(1728), float64], Tensor[(128), float64]) {
    %1141 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %1142 = cast(%var_8090, dtype="float64") /* ty=Tensor[(1728), float64] */;
    %1143 = cast(meta[relay.Constant][87] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
    %1144 = reshape(%1142, newshape=[16, 9, 12]) /* ty=Tensor[(16, 9, 12), float64] */;
    %1145 = reshape(%1143, newshape=[128]) /* ty=Tensor[(128), float64] */;
    %1146 = @func_5640(%1144, %1145) /* ty=(Tensor[(?, 9, 12), bool], Tensor[(16, 9, 12), uint32], Tensor[(5, 16, 1), uint32], Tensor[(80), uint32], Tensor[(128), float64]) */;
    %1147 = %1141.0;
    %1148 = %1146.1;
    (%1147, %1148, %var_8090, meta[relay.Constant][87] /* ty=Tensor[(128), float64] */)
  };
  %1149(%var_8106) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(16, 9, 12), uint32], Tensor[(1728), float64], Tensor[(128), float64]) */
}

def @func_13243(%var_13242: Tensor[(112, 8), uint32]) -> (Tensor[(6, 16, 13), float64], Tensor[(8, 1), int8], Tensor[(112, 8), uint32]) {
  %1158 = fn (%var_13238: Tensor[(112, 8), uint32]) -> (Tensor[(6, 16, 13), float64], Tensor[(8, 1), int8], Tensor[(112, 8), uint32]) {
    %1150 = @func_9388() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %1151 = %1150.0;
    %1152 = cast(%1151, dtype="float64") /* ty=Tensor[(6, 16, 13), float64] */;
    %1153 = cast(%var_13238, dtype="uint32") /* ty=Tensor[(112, 8), uint32] */;
    %1154 = reshape(%1153, newshape=[896]) /* ty=Tensor[(896), uint32] */;
    %1155 = @func_4459(%1154) /* ty=(Tensor[(9, 8, 7), int8], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(8, 1), int8], Tensor[(896), uint32], Tensor[(1, 1452), int16], Tensor[(13, 16, 3), int16]) */;
    %1156 = tan(%1152) /* ty=Tensor[(6, 16, 13), float64] */;
    %1157 = %1155.3;
    (%1156, %1157, %var_13238)
  };
  %1158(%var_13242) /* ty=(Tensor[(6, 16, 13), float64], Tensor[(8, 1), int8], Tensor[(112, 8), uint32]) */
}

def @func_4518(%var_4516: Tensor[(15, 9, 4), float64]) -> (Tensor[(15, 9, 4), float64],) {
  @func_4515(%var_4516) /* ty=(Tensor[(15, 9, 4), float64],) */
}

def @func_14088() -> Tensor[(896), bool] {
  @func_14086() /* ty=Tensor[(896), bool] */
}

def @func_10246() -> Tensor[(6, 16, 13), float32] {
  %1159 = fn () -> Tensor[(6, 16, 13), float32] {
    @func_8792() /* ty=Tensor[(6, 16, 13), float32] */
  };
  %1159() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_8304(%var_8301: Tensor[(588), float64], %var_8302: Tensor[(728), float64], %var_8303: Tensor[(2340), float64]) -> (Tensor[(7, 7, 12), float64], Tensor[(588), float64], Tensor[(728), float64], Tensor[(2340), bool], Tensor[(6, 16, 13), uint8]) {
  %1179 = fn (%var_8276: Tensor[(588), float64], %var_8279: Tensor[(728), float64], %var_8281: Tensor[(2340), float64]) -> (Tensor[(7, 7, 12), float64], Tensor[(588), float64], Tensor[(728), float64], Tensor[(2340), bool], Tensor[(6, 16, 13), uint8]) {
    %1160 = cast(%var_8276, dtype="float64") /* ty=Tensor[(588), float64] */;
    %1161 = reshape(%1160, newshape=[7, 7, 12]) /* ty=Tensor[(7, 7, 12), float64] */;
    %1162 = @func_7666() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) */;
    %1163 = %1162.2;
    %1164 = cast(%var_8281, dtype="bool") /* ty=Tensor[(2340), bool] */;
    %1165 = shape_of(%1163, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1166 = cast(%1163, dtype="bool") /* ty=Tensor[(2340), bool] */;
    %1167 = dyn.reshape(%1164, %1165, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1168 = cast(%var_8279, dtype="float64") /* ty=Tensor[(728), float64] */;
    %1169 = reshape(%1168, newshape=[14, 52]) /* ty=Tensor[(14, 52), float64] */;
    %1170 = @func_6647(%1169) /* ty=(Tensor[(6, 16, 13), bool], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(14, 52), float64]) */;
    %1171 = %1170.0;
    %1172 = cast(meta[relay.Constant][88] /* ty=Tensor[(6, 16, 13), bool] */, dtype="uint8") /* ty=Tensor[(6, 16, 13), uint8] */;
    %1173 = shape_of(%1171, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1174 = cast(%1171, dtype="uint8") /* ty=Tensor[(6, 16, 13), uint8] */;
    %1175 = dyn.reshape(%1172, %1173, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %1176 = @func_3423(%1161) /* ty=Tensor[(7, 7, 12), float64] */;
    %1177 = logical_or(%1166, %1167) /* ty=Tensor[(2340), bool] */;
    %1178 = bitwise_xor(%1174, %1175) /* ty=Tensor[(6, 16, 13), uint8] */;
    (%1176, %var_8276, %var_8279, %1177, %1178)
  };
  %1179(%var_8301, %var_8302, %var_8303) /* ty=(Tensor[(7, 7, 12), float64], Tensor[(588), float64], Tensor[(728), float64], Tensor[(2340), bool], Tensor[(6, 16, 13), uint8]) */
}

def @func_3977(%var_3964: Tensor[(10, 16, 4), float32]) -> (Tensor[(10, 16, 4), float32], Tensor[(15, 14, 3), float32], Tensor[(630, 1), float32]) {
  %1180 = cast(%var_3964, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
  %1181 = cast(meta[relay.Constant][89] /* ty=Tensor[(630, 1), float32] */, dtype="float32") /* ty=Tensor[(630, 1), float32] */;
  %1182 = reshape(%1181, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), float32] */;
  %1183 = sin(%1180) /* ty=Tensor[(10, 16, 4), float32] */;
  %1184 = @func_1855(%1182) /* ty=Tensor[(15, 14, 3), float32] */;
  (%1183, %1184, meta[relay.Constant][89] /* ty=Tensor[(630, 1), float32] */)
}

def @func_9130() -> (Tensor[(728), float64],) {
  %1187 = fn () -> (Tensor[(728), float64],) {
    %1185 = @func_7853() /* ty=(Tensor[(728), float64],) */;
    %1186 = %1185.0;
    (%1186,)
  };
  %1187() /* ty=(Tensor[(728), float64],) */
}

def @func_3980(%var_3978: Tensor[(10, 16, 4), float32]) -> (Tensor[(10, 16, 4), float32], Tensor[(15, 14, 3), float32], Tensor[(630, 1), float32]) {
  @func_3977(%var_3978) /* ty=(Tensor[(10, 16, 4), float32], Tensor[(15, 14, 3), float32], Tensor[(630, 1), float32]) */
}

def @func_10910() -> (Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) {
  %1194 = fn () -> (Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) {
    %1188 = @func_9289() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %1189 = cast(meta[relay.Constant][90] /* ty=Tensor[(896), uint32] */, dtype="uint32") /* ty=Tensor[(896), uint32] */;
    %1190 = reshape(%1189, newshape=[896]) /* ty=Tensor[(896), uint32] */;
    %1191 = @func_7722(%1190) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) */;
    %1192 = %1188.0;
    %1193 = %1191.1;
    (%1192, %1193, meta[relay.Constant][90] /* ty=Tensor[(896), uint32] */)
  };
  %1194() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) */
}

def @func_7093(%var_7091: Tensor[(12, 13, 15), float64]) -> (Tensor[(12, 13, 15), float64],) {
  @func_7090(%var_7091) /* ty=(Tensor[(12, 13, 15), float64],) */
}

def @func_6797(%var_6714: Tensor[(6, 16, 13), float32], %var_6775: Tensor[(330), uint8], %var_6793: Tensor[(20, 32), float32]) -> (Tensor[(6, 16, 13), float64], Tensor[(6, 16, 13), float32], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(3, 11, 10), uint8], Tensor[(330), uint8], Tensor[(630, 1), float32], Tensor[(20, 32), bool]) {
  %1195 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %1196 = %1195.0;
  %1197 = cast(%var_6714, dtype="float64") /* ty=Tensor[(6, 16, 13), float64] */;
  %1198 = shape_of(%1196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1199 = cast(%1196, dtype="float64") /* ty=Tensor[(6, 16, 13), float64] */;
  %1200 = dyn.reshape(%1197, %1198, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1201 = cast(%1196, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %1202 = cast(meta[relay.Constant][91] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %1203 = reshape(%1202, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), float64] */;
  %1204 = @func_2236(%1203) /* ty=(Tensor[(8, 4, 4), float64],) */;
  %1205 = cast(%var_6775, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %1206 = reshape(%1205, newshape=[3, 11, 10]) /* ty=Tensor[(3, 11, 10), uint8] */;
  %1207 = @func_2823(%1206) /* ty=(Tensor[(3, 11, 10), uint8], Tensor[(3, 11, 10), bool]) */;
  %1208 = cast(meta[relay.Constant][92] /* ty=Tensor[(20, 32), float32] */, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
  %1209 = reshape(%1208, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float32] */;
  %1210 = @func_3977(%1209) /* ty=(Tensor[(10, 16, 4), float32], Tensor[(15, 14, 3), float32], Tensor[(630, 1), float32]) */;
  %1211 = cast(%var_6793, dtype="bool") /* ty=Tensor[(20, 32), bool] */;
  %1212 = shape_of(meta[relay.Constant][92] /* ty=Tensor[(20, 32), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1213 = cast(meta[relay.Constant][92] /* ty=Tensor[(20, 32), float32] */, dtype="bool") /* ty=Tensor[(20, 32), bool] */;
  %1214 = dyn.reshape(%1211, %1212, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1215 = mod(%1199, %1200) /* ty=Tensor[(6, 16, 13), float64] */;
  %1216 = log2(%1201) /* ty=Tensor[(6, 16, 13), float32] */;
  %1217 = %1204.0;
  %1218 = %1207.0;
  %1219 = %1210.2;
  %1220 = less(%1213, %1214) /* ty=Tensor[(20, 32), bool] */;
  (%1215, %1216, %1217, meta[relay.Constant][91] /* ty=Tensor[(128), float64] */, %1218, %var_6775, %1219, %1220)
}

def @func_14637() -> (Tensor[(728), float64], Tensor[(14, 52), float64]) {
  %1221 = @func_12895() /* ty=(Tensor[(728), float64],) */;
  %1222 = %1221.0;
  %1223 = cast(%1222, dtype="float64") /* ty=Tensor[(728), float64] */;
  %1224 = reshape(%1223, newshape=[14, 52]) /* ty=Tensor[(14, 52), float64] */;
  %1225 = @func_6647(%1224) /* ty=(Tensor[(6, 16, 13), bool], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(14, 52), float64]) */;
  %1226 = %1225.3;
  (%1222, %1226)
}

def @func_14354() -> (Tensor[(6, 16, 13), float32], Tensor[(14, 9, 5), float32]) {
  %1227 = @func_11279() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32]) */;
  %1228 = @func_13328() /* ty=(Tensor[(14, 9, 5), float32],) */;
  %1229 = %1227.1;
  %1230 = %1228.0;
  (%1229, %1230)
}

def @func_6482() -> (Tensor[(6, 16, 13), float32],) {
  %1231 = @func_6454() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %1232 = %1231.0;
  (%1232,)
}

def @func_8927(%var_8916: Tensor[(135), uint64]) -> (Tensor[(630), float32], Tensor[(6, 16, 13), float32], Tensor[(15, 9, 12), uint64], Tensor[(135), uint64], Tensor[(1620), uint64], Tensor[(6, 16, 13), float32]) {
  %1233 = @func_7892() /* ty=(Tensor[(2340), float64], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(4, 2, 9), bool], int32) */;
  %1234 = cast(%var_8916, dtype="uint64") /* ty=Tensor[(135), uint64] */;
  %1235 = cast(meta[relay.Constant][93] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %1236 = reshape(%1234, newshape=[15, 9, 1]) /* ty=Tensor[(15, 9, 1), uint64] */;
  %1237 = reshape(%1235, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), uint64] */;
  %1238 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %1239 = %1233.2;
  %1240 = @func_6543() /* ty=Tensor[(6, 16, 13), float32] */;
  %1241 = @func_301(%1236, %1237) /* ty=Tensor[(15, 9, 12), uint64] */;
  %1242 = %1238.0;
  (%1239, %1240, %1241, %var_8916, meta[relay.Constant][93] /* ty=Tensor[(1620), uint64] */, %1242)
}

def @func_7724(%var_7723: Tensor[(896), uint32]) -> (Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) {
  %1249 = fn (%var_7716: Tensor[(896), uint32]) -> (Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) {
    %1243 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
    %1244 = cast(%var_7716, dtype="uint32") /* ty=Tensor[(896), uint32] */;
    %1245 = reshape(%1244, newshape=[896]) /* ty=Tensor[(896), uint32] */;
    %1246 = @func_4459(%1245) /* ty=(Tensor[(9, 8, 7), int8], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(8, 1), int8], Tensor[(896), uint32], Tensor[(1, 1452), int16], Tensor[(13, 16, 3), int16]) */;
    %1247 = %1243.0;
    %1248 = %1246.0;
    (%1247, %1248, %var_7716)
  };
  %1249(%var_7723) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(9, 8, 7), int8], Tensor[(896), uint32]) */
}

def @func_14829() -> Tensor[(6, 16, 13), float32] {
  @func_14827() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_10979() -> (Tensor[(630), float32], Tensor[(15, 14, 3), float32]) {
  @func_10977() /* ty=(Tensor[(630), float32], Tensor[(15, 14, 3), float32]) */
}

def @func_12878() -> (Tensor[(728), float64], Tensor[(10, 16, 4), float32], Tensor[(20, 32), float32]) {
  %1256 = fn () -> (Tensor[(728), float64], Tensor[(10, 16, 4), float32], Tensor[(20, 32), float32]) {
    %1250 = @func_11621() /* ty=(Tensor[(728), float64],) */;
    %1251 = cast(meta[relay.Constant][94] /* ty=Tensor[(20, 32), float32] */, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
    %1252 = reshape(%1251, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float32] */;
    %1253 = @func_3977(%1252) /* ty=(Tensor[(10, 16, 4), float32], Tensor[(15, 14, 3), float32], Tensor[(630, 1), float32]) */;
    %1254 = %1250.0;
    %1255 = %1253.0;
    (%1254, %1255, meta[relay.Constant][94] /* ty=Tensor[(20, 32), float32] */)
  };
  %1256() /* ty=(Tensor[(728), float64], Tensor[(10, 16, 4), float32], Tensor[(20, 32), float32]) */
}

def @func_13456() -> Tensor[(10, 16, 4), float32] {
  %1257 = @func_12877() /* ty=(Tensor[(728), float64], Tensor[(10, 16, 4), float32], Tensor[(20, 32), float32]) */;
  %1257.1
}

def @func_12769() -> (Tensor[(6, 16, 13), float32], Tensor[(128), float64], Tensor[(128), float64], Tensor[(728), float64], Tensor[(1, 48), float32]) {
  @func_12767() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(128), float64], Tensor[(128), float64], Tensor[(728), float64], Tensor[(1, 48), float32]) */
}

def @func_15268(%var_15263: Tensor[(2340), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(6, 16, 13), float32], Tensor[(12, 13, 15), float64], Tensor[(2340), float64]) {
  %1258 = @func_12323() /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), float32]) */;
  %1259 = @func_12382() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %1260 = cast(%var_15263, dtype="float64") /* ty=Tensor[(2340), float64] */;
  %1261 = reshape(%1260, newshape=[12, 13, 15]) /* ty=Tensor[(12, 13, 15), float64] */;
  %1262 = @func_7090(%1261) /* ty=(Tensor[(12, 13, 15), float64],) */;
  %1263 = %1258.1;
  %1264 = %1259.0;
  %1265 = %1262.0;
  (%1263, %1264, %1265, %var_15263)
}

def @func_10144() -> Tensor[(6, 16, 13), float32] {
  %1267 = fn () -> Tensor[(6, 16, 13), float32] {
    %1266 = @func_10066() /* ty=(Tensor[(6, 16, 13), float32],) */;
    %1266.0
  };
  %1267() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_4195(%var_4185: Tensor[(5, 16, 1), uint32], %var_4192: Tensor[(128), float64]) -> (Tensor[(5, 16, 1), uint32], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) {
  %1268 = cast(meta[relay.Constant][95] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %1269 = cast(%var_4185, dtype="uint32") /* ty=Tensor[(5, 16, 1), uint32] */;
  %1270 = cast(%var_4192, dtype="float64") /* ty=Tensor[(128), float64] */;
  %1271 = reshape(%1270, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), float64] */;
  %1272 = @func_2236(%1271) /* ty=(Tensor[(8, 4, 4), float64],) */;
  %1273 = bitwise_or(%1268, %1269) /* ty=Tensor[(5, 16, 1), uint32] */;
  %1274 = %1272.0;
  (%1273, %1274, %var_4192)
}

def @func_14659() -> (Tensor[(6, 16, 13), float32],) {
  @func_14657() /* ty=(Tensor[(6, 16, 13), float32],) */
}

def @func_10865() -> Tensor[(6, 16, 13), float32] {
  %1276 = fn () -> Tensor[(6, 16, 13), float32] {
    %1275 = @func_9350() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(1, 324), uint32], Tensor[(728), float64], Tensor[(728), float64]) */;
    %1275.0
  };
  %1276() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_12397(%var_12395: Tensor[(6, 11, 15), uint16], %var_12396: Tensor[(6, 11, 15), uint16]) -> (Tensor[(6, 11, 15), bool],) {
  %1282 = fn (%var_12389: Tensor[(6, 11, 15), uint16], %var_12390: Tensor[(6, 11, 15), uint16]) -> (Tensor[(6, 11, 15), bool],) {
    %1277 = cast(%var_12390, dtype="bool") /* ty=Tensor[(6, 11, 15), bool] */;
    %1278 = shape_of(%var_12389, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1279 = cast(%var_12389, dtype="bool") /* ty=Tensor[(6, 11, 15), bool] */;
    %1280 = dyn.reshape(%1277, %1278, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1281 = not_equal(%1279, %1280) /* ty=Tensor[(6, 11, 15), bool] */;
    (%1281,)
  };
  %1282(%var_12395, %var_12396) /* ty=(Tensor[(6, 11, 15), bool],) */
}

def @func_7426(%var_7411: Tensor[(14, 64), uint32]) -> (Tensor[(6, 16, 13), float32], Tensor[(14, 64), uint32], Tensor[(9, 8, 7), float64]) {
  %1283 = @func_6864() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %1284 = cast(%var_7411, dtype="uint32") /* ty=Tensor[(14, 64), uint32] */;
  %1285 = reshape(%1284, newshape=[896]) /* ty=Tensor[(896), uint32] */;
  %1286 = @func_4459(%1285) /* ty=(Tensor[(9, 8, 7), int8], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(8, 1), int8], Tensor[(896), uint32], Tensor[(1, 1452), int16], Tensor[(13, 16, 3), int16]) */;
  %1287 = %1286.0;
  %1288 = cast(%1287, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
  %1289 = %1283.0;
  %1290 = sin(%1288) /* ty=Tensor[(9, 8, 7), float64] */;
  (%1289, %var_7411, %1290)
}

def @func_12623() -> Tensor[(728), float64] {
  %1292 = fn () -> Tensor[(728), float64] {
    %1291 = @func_7853() /* ty=(Tensor[(728), float64],) */;
    %1291.0
  };
  %1292() /* ty=Tensor[(728), float64] */
}

def @func_15338() -> (Tensor[(6, 16, 13), float32], Tensor[(728), float64], Tensor[(728), float64], Tensor[(728), float64], Tensor[(728), float64], Tensor[(630), float32], Tensor[(1, 324), uint32]) {
  %1293 = @func_7373() /* ty=(Tensor[(728), float64],) */;
  %1294 = @func_11259() /* ty=(Tensor[(630), float32],) */;
  %1295 = @func_12299() /* ty=(Tensor[(1, 324), uint32],) */;
  %1296 = @func_14827() /* ty=Tensor[(6, 16, 13), float32] */;
  %1297 = %1293.0;
  %1298 = @func_12593() /* ty=Tensor[(728), float64] */;
  %1299 = @func_8821() /* ty=Tensor[(728), float64] */;
  %1300 = @func_9833() /* ty=Tensor[(728), float64] */;
  %1301 = %1294.0;
  %1302 = %1295.0;
  (%1296, %1297, %1298, %1299, %1300, %1301, %1302)
}

def @func_12419() -> Tensor[(728), float64] {
  %1303 = @func_11733() /* ty=(Tensor[(728), float64],) */;
  %1303.0
}

def @func_9067(%var_9065: Tensor[(48), float32], %var_9066: Tensor[(896), uint32]) -> (Tensor[(728), float64], Tensor[(6, 16, 13), bool], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(128), float64], Tensor[(5, 66), uint8], Tensor[(20, 32), float32], Tensor[(2340), float64]) {
  %1324 = fn (%var_9032: Tensor[(48), float32], %var_9033: Tensor[(896), uint32]) -> (Tensor[(728), float64], Tensor[(6, 16, 13), bool], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(128), float64], Tensor[(5, 66), uint8], Tensor[(20, 32), float32], Tensor[(2340), float64]) {
    %1304 = @func_8513() /* ty=(Tensor[(728), float64],) */;
    %1305 = cast(%var_9032, dtype="float32") /* ty=Tensor[(48), float32] */;
    %1306 = cast(%var_9033, dtype="uint32") /* ty=Tensor[(896), uint32] */;
    %1307 = cast(meta[relay.Constant][96] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
    %1308 = reshape(%1305, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %1309 = reshape(%1306, newshape=[896]) /* ty=Tensor[(896), uint32] */;
    %1310 = reshape(%1307, newshape=[128]) /* ty=Tensor[(128), float64] */;
    %1311 = @func_8614(%1308, %1309, %1310) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(12, 4, ?), float64], Tensor[(896), uint32], Tensor[(896), uint32], Tensor[(8, 4, 4), float64], Tensor[(12, 4, 128), bool], Tensor[(2, 10, 15), int8], int8, Tensor[(6, 16, 13), bool], Tensor[(728), float64]) */;
    %1312 = %1311.8;
    %1313 = cast(%1312, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
    %1314 = cast(meta[relay.Constant][97] /* ty=Tensor[(5, 66), uint8] */, dtype="uint8") /* ty=Tensor[(5, 66), uint8] */;
    %1315 = cast(meta[relay.Constant][98] /* ty=Tensor[(20, 32), float32] */, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
    %1316 = reshape(%1313, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), float32] */;
    %1317 = reshape(%1314, newshape=[330]) /* ty=Tensor[(330), uint8] */;
    %1318 = reshape(%1315, newshape=[20, 32]) /* ty=Tensor[(20, 32), float32] */;
    %1319 = @func_6797(%1316, %1317, %1318) /* ty=(Tensor[(6, 16, 13), float64], Tensor[(6, 16, 13), float32], Tensor[(8, 4, 4), float64], Tensor[(128), float64], Tensor[(3, 11, 10), uint8], Tensor[(330), uint8], Tensor[(630, 1), float32], Tensor[(20, 32), bool]) */;
    %1320 = @func_7892() /* ty=(Tensor[(2340), float64], Tensor[(14, 9, 5), float32], Tensor[(630), float32], Tensor[(4, 2, 9), bool], int32) */;
    %1321 = %1304.0;
    %1322 = %1319.3;
    %1323 = %1320.0;
    (%1321, %1312, %var_9032, %var_9033, meta[relay.Constant][96] /* ty=Tensor[(128), float64] */, %1322, meta[relay.Constant][97] /* ty=Tensor[(5, 66), uint8] */, meta[relay.Constant][98] /* ty=Tensor[(20, 32), float32] */, %1323)
  };
  %1324(%var_9065, %var_9066) /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), bool], Tensor[(48), float32], Tensor[(896), uint32], Tensor[(128), float64], Tensor[(128), float64], Tensor[(5, 66), uint8], Tensor[(20, 32), float32], Tensor[(2340), float64]) */
}

def @func_11695(%var_11694: Tensor[(3, 7, 1), float64]) -> (Tensor[(3, 7, 1), float64],) {
  %1327 = fn (%var_11684: Tensor[(3, 7, 1), float64]) -> (Tensor[(3, 7, 1), float64],) {
    %1325 = cast(%var_11684, dtype="float64") /* ty=Tensor[(3, 7, 1), float64] */;
    %1326 = acos(%1325) /* ty=Tensor[(3, 7, 1), float64] */;
    (%1326,)
  };
  %1327(%var_11694) /* ty=(Tensor[(3, 7, 1), float64],) */
}

def @func_7429(%var_7427: Tensor[(14, 64), uint32]) -> (Tensor[(6, 16, 13), float32], Tensor[(14, 64), uint32], Tensor[(9, 8, 7), float64]) {
  @func_7426(%var_7427) /* ty=(Tensor[(6, 16, 13), float32], Tensor[(14, 64), uint32], Tensor[(9, 8, 7), float64]) */
}

def @func_10584(%var_10570: Tensor[(728), float64]) -> (Tensor[(728), float64], Tensor[(8, 7, 13), float64]) {
  %1328 = @func_9350() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(1, 324), uint32], Tensor[(728), float64], Tensor[(728), float64]) */;
  %1329 = %1328.3;
  %1330 = cast(%var_10570, dtype="float64") /* ty=Tensor[(728), float64] */;
  %1331 = shape_of(%1329, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1332 = cast(%1329, dtype="float64") /* ty=Tensor[(728), float64] */;
  %1333 = dyn.reshape(%1330, %1331, newshape=[]) /* ty=Tensor[(?), float64] */;
  %1334 = @func_6941() /* ty=(Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %1335 = power(%1332, %1333) /* ty=Tensor[(728), float64] */;
  %1336 = %1334.1;
  (%1335, %1336)
}

def @func_12895() -> (Tensor[(728), float64],) {
  %1337 = @func_7373() /* ty=(Tensor[(728), float64],) */;
  %1338 = %1337.0;
  (%1338,)
}

def @func_8614(%var_8526: Tensor[(48), float32], %var_8539: Tensor[(896), uint32], %var_8568: Tensor[(128), float64]) -> (Tensor[(6, 16, 13), float32], Tensor[(12, 4, ?), float64], Tensor[(896), uint32], Tensor[(896), uint32], Tensor[(8, 4, 4), float64], Tensor[(12, 4, 128), bool], Tensor[(2, 10, 15), int8], int8, Tensor[(6, 16, 13), bool], Tensor[(728), float64]) {
  %1339 = @func_6482() /* ty=(Tensor[(6, 16, 13), float32],) */;
  %1340 = cast(%var_8526, dtype="float32") /* ty=Tensor[(48), float32] */;
  %1341 = reshape(%1340, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float32] */;
  %1342 = @func_5146(%1341) /* ty=Tensor[(12, 4, 1), float32] */;
  %1343 = cast(%var_8526, dtype="float64") /* ty=Tensor[(48), float64] */;
  %1344 = shape_of(%1342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1345 = cast(%1342, dtype="float64") /* ty=Tensor[(12, 4, 1), float64] */;
  %1346 = dyn.reshape(%1343, %1344, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1347 = cast(%var_8539, dtype="uint32") /* ty=Tensor[(896), uint32] */;
  %1348 = reshape(%1347, newshape=[896]) /* ty=Tensor[(896), uint32] */;
  %1349 = @func_4459(%1348) /* ty=(Tensor[(9, 8, 7), int8], Tensor[(13, 16, 3), int16], Tensor[(624), int16], Tensor[(8, 1), int8], Tensor[(896), uint32], Tensor[(1, 1452), int16], Tensor[(13, 16, 3), int16]) */;
  %1350 = cast(%var_8568, dtype="float64") /* ty=Tensor[(128), float64] */;
  %1351 = reshape(%1350, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %1352 = @func_7588(%1351) /* ty=(Tensor[(728), float64], Tensor[(8, 4, 4), float64], Tensor[(128), float64]) */;
  %1353 = cast(%1342, dtype="bool") /* ty=Tensor[(12, 4, 1), bool] */;
  %1354 = cast(%var_8568, dtype="bool") /* ty=Tensor[(128), bool] */;
  %1355 = cast(meta[relay.Constant][99] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %1356 = reshape(%1355, newshape=[]) /* ty=int8 */;
  %1357 = @func_8385(%1356) /* ty=(Tensor[(2, 10, 15), int8],) */;
  %1358 = cast(meta[relay.Constant][100] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %1359 = reshape(%1358, newshape=[14, 52]) /* ty=Tensor[(14, 52), float64] */;
  %1360 = @func_6647(%1359) /* ty=(Tensor[(6, 16, 13), bool], Tensor[(6, 16, 13), float32], Tensor[(8, 7, 13), float64], Tensor[(14, 52), float64]) */;
  %1361 = %1339.0;
  %1362 = floor_mod(%1345, %1346) /* ty=Tensor[(12, 4, ?), float64] */;
  %1363 = %1349.4;
  %1364 = %1352.1;
  %1365 = greater_equal(%1353, %1354) /* ty=Tensor[(12, 4, 128), bool] */;
  %1366 = %1357.0;
  %1367 = %1360.0;
  (%1361, %1362, %1363, %var_8539, %1364, %1365, %1366, meta[relay.Constant][99] /* ty=int8 */, %1367, meta[relay.Constant][100] /* ty=Tensor[(728), float64] */)
}

def @func_13176(%var_13158: Tensor[(728), float64]) -> (Tensor[(6, 16, 13), bool], Tensor[(728), uint64], Tensor[(6, 16, 13), float32]) {
  %1368 = @func_12890() /* ty=(Tensor[(6, 16, 13), bool],) */;
  %1369 = @func_10647() /* ty=Tensor[(728), float64] */;
  %1370 = cast(%var_13158, dtype="uint64") /* ty=Tensor[(728), uint64] */;
  %1371 = shape_of(%1369, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1372 = cast(%1369, dtype="uint64") /* ty=Tensor[(728), uint64] */;
  %1373 = dyn.reshape(%1370, %1371, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %1374 = %1368.0;
  %1375 = add(%1372, %1373) /* ty=Tensor[(728), uint64] */;
  %1376 = @func_11310() /* ty=Tensor[(6, 16, 13), float32] */;
  (%1374, %1375, %1376)
}

def @func_8513() -> (Tensor[(728), float64],) {
  %1377 = @func_7328() /* ty=(Tensor[(728), float64],) */;
  %1378 = %1377.0;
  (%1378,)
}

def @func_12325() -> (Tensor[(728), float64], Tensor[(6, 16, 13), float32]) {
  @func_12323() /* ty=(Tensor[(728), float64], Tensor[(6, 16, 13), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen787/build/output.py", line 3812, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:12:32] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

