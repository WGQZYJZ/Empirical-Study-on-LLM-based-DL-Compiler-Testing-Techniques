==========mod==========
#[version = "0.0.5"]
def @func_3614(%var_3599: Tensor[(280), int16]) -> (Tensor[(10, 12, 15), float64], Tensor[(7, 4, 10), int16], Tensor[(280), int16], Tensor[(1638), float64], Tensor[(7, 6), float32], Tensor[(1144), float32], Tensor[(468), float32], Tensor[(273), int8]) {
  %0 = @func_2851() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %1 = cast(%var_3599, dtype="int16") /* ty=Tensor[(280), int16] */;
  %2 = reshape(%1, newshape=[7, 4, 10]) /* ty=Tensor[(7, 4, 10), int16] */;
  %3 = @func_2207(%2) /* ty=(Tensor[(7, 4, 10), int16],) */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 6), float32] */;
  %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %6 = cast(meta[relay.Constant][2] /* ty=Tensor[(468), float32] */, dtype="float32") /* ty=Tensor[(468), float32] */;
  %7 = cast(meta[relay.Constant][3] /* ty=Tensor[(273), int8] */, dtype="int8") /* ty=Tensor[(273), int8] */;
  %8 = reshape(%4, newshape=[14, 3]) /* ty=Tensor[(14, 3), float32] */;
  %9 = reshape(%5, newshape=[1144]) /* ty=Tensor[(1144), float32] */;
  %10 = reshape(%6, newshape=[468]) /* ty=Tensor[(468), float32] */;
  %11 = reshape(%7, newshape=[273]) /* ty=Tensor[(273), int8] */;
  %12 = @func_1942(%8, %9, %10, %11) /* ty=(Tensor[(1638), float64], Tensor[(1144), float32], Tensor[(1638), float64], Tensor[(14, 3), bool], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16], Tensor[(12, 13, 3), float32], Tensor[(468), float32], Tensor[(5, 10, 10), int16], Tensor[(600), bool], Tensor[(539), float32], Tensor[(1638), float64], Tensor[(273), int8]) */;
  %13 = %0.0;
  %14 = %3.0;
  %15 = %12.12;
  (%13, %14, %var_3599, %15, meta[relay.Constant][0] /* ty=Tensor[(7, 6), float32] */, meta[relay.Constant][1] /* ty=Tensor[(1144), float32] */, meta[relay.Constant][2] /* ty=Tensor[(468), float32] */, meta[relay.Constant][3] /* ty=Tensor[(273), int8] */)
}

def @func_5382(%var_5369: Tensor[(500), int16]) -> (Tensor[(10, 12, 15), float64], Tensor[(539), float32], Tensor[(539), float32], Tensor[(500), int16], Tensor[(3, 13, 7), int8]) {
  %16 = @func_2958() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %17 = %16.0;
  %18 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 12, 15), float64] */, dtype="int16") /* ty=Tensor[(10, 12, 15), int16] */;
  %19 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%17, dtype="int16") /* ty=Tensor[(10, 12, 15), int16] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %22 = logical_xor(%20, %21) /* ty=Tensor[(10, 12, 15), int16] */;
  %23 = cast(%22, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
  %24 = cast(meta[relay.Constant][5] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %25 = cast(%var_5369, dtype="int16") /* ty=Tensor[(500), int16] */;
  %26 = reshape(%24, newshape=[539]) /* ty=Tensor[(539), float32] */;
  %27 = reshape(%25, newshape=[500]) /* ty=Tensor[(500), int16] */;
  %28 = @func_3345(%26, %27) /* ty=(Tensor[(10, 12, 15), float64], Tensor[(539), float32], Tensor[(500), int16], Tensor[(5, 10, 10), int64]) */;
  %29 = %28.1;
  %30 = cast(%29, dtype="float32") /* ty=Tensor[(539), float32] */;
  %31 = cast(%var_5369, dtype="int16") /* ty=Tensor[(500), int16] */;
  %32 = reshape(%30, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %33 = reshape(%31, newshape=[500]) /* ty=Tensor[(500), int16] */;
  %34 = @func_847(%32, %33) /* ty=(Tensor[(11, 7, 7), float32], Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) */;
  %35 = cos(%23) /* ty=Tensor[(10, 12, 15), float64] */;
  %36 = %34.1;
  (%35, %29, meta[relay.Constant][5] /* ty=Tensor[(539), float32] */, %var_5369, %36)
}

def @func_1587(%var_1506: Tensor[(9, 11, 8), uint32], %var_1507: Tensor[(9, 11, 8), uint32], %var_1516: Tensor[(1638), float64], %var_1543: int64, %var_1554: Tensor[(1024), bool], %var_1555: Tensor[(1144), float32]) -> (Tensor[(9, 11, 8), uint32], Tensor[(2), int64], Tensor[(13, 21), int8], Tensor[(1638), float64], Tensor[(1, 2), bool], Tensor[(9, 11, 8), float64], Tensor[(1144), float32], Tensor[(1024), bool], Tensor[(1144), float32], Tensor[(3, 13, 7), uint8]) {
  %37 = cast(%var_1507, dtype="uint32") /* ty=Tensor[(9, 11, 8), uint32] */;
  %38 = shape_of(%var_1506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%var_1506, dtype="uint32") /* ty=Tensor[(9, 11, 8), uint32] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %41 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 21), int8] */, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %42 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 21), int8] */, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %43 = cast(%var_1516, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %44 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 21), int8] */, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %45 = reshape(%41, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %46 = reshape(%42, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %47 = reshape(%43, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %48 = reshape(%44, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %49 = @func_213(%45, %46, %47, %48) /* ty=(Tensor[(3, 13, 7), int8], Tensor[(1, 2), int64], Tensor[(2), int64], Tensor[(1638), float64], Tensor[(3, 13, 7), bool], Tensor[(14, 9, 13), uint32]) */;
  %50 = cast(%var_1543, dtype="int64") /* ty=int64 */;
  %51 = %49.2;
  %52 = cast(%51, dtype="int64") /* ty=Tensor[(2), int64] */;
  %53 = reshape(%50, newshape=[]) /* ty=int64 */;
  %54 = reshape(%52, newshape=[1, 2]) /* ty=Tensor[(1, 2), int64] */;
  %55 = @func_132(%53, %54) /* ty=(Tensor[(1, 2), int64], Tensor[(1, 2), bool]) */;
  %56 = cast(%var_1506, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
  %57 = exp(%56) /* ty=Tensor[(9, 11, 8), float64] */;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
  %59 = cast(%var_1554, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %60 = cast(%var_1554, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %61 = cast(%var_1555, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %62 = reshape(%59, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), bool] */;
  %63 = reshape(%60, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), bool] */;
  %64 = reshape(%61, newshape=[1144]) /* ty=Tensor[(1144), float32] */;
  %65 = @func_999(%62, %63, %64) /* ty=(Tensor[(8, 8, 16), bool], Tensor[(13, 8, 11), float32], Tensor[(1144), float32], Tensor[(1638, 1), float64]) */;
  %66 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 21), int8] */, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %67 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 21), int8] */, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %68 = cast(%var_1516, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %69 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 21), int8] */, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %70 = reshape(%66, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %71 = reshape(%67, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %72 = reshape(%68, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %73 = reshape(%69, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %74 = @func_213(%70, %71, %72, %73) /* ty=(Tensor[(3, 13, 7), int8], Tensor[(1, 2), int64], Tensor[(2), int64], Tensor[(1638), float64], Tensor[(3, 13, 7), bool], Tensor[(14, 9, 13), uint32]) */;
  %75 = %74.4;
  %76 = cast(%75, dtype="uint8") /* ty=Tensor[(3, 13, 7), uint8] */;
  %77 = cast(%var_1543, dtype="uint8") /* ty=uint8 */;
  %78 = bitwise_or(%39, %40) /* ty=Tensor[(9, 11, 8), uint32] */;
  %79 = %55.1;
  %80 = acosh(%58) /* ty=Tensor[(9, 11, 8), float64] */;
  %81 = %65.2;
  %82 = add(%76, %77) /* ty=Tensor[(3, 13, 7), uint8] */;
  (%78, %51, meta[relay.Constant][6] /* ty=Tensor[(13, 21), int8] */, %var_1516, %79, %80, %81, %var_1554, %var_1555, %82)
}

def @func_4591(%var_4521: Tensor[(10, 12, 15), float64], %var_4553: int64) -> (Tensor[(10, 12, 15), int32], Tensor[(10, 12, 15), float32], int64, Tensor[(600), bool], Tensor[(539, 1), float32], Tensor[(500), int16], int64, Tensor[(1144), float32], Tensor[(10, 12, 15), bool], Tensor[(1024), bool], Tensor[(1176), float32], Tensor[(10, 12, 15), float64]) {
  %83 = @func_3476() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %84 = %83.0;
  %85 = cast(%var_4521, dtype="int32") /* ty=Tensor[(10, 12, 15), int32] */;
  %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%84, dtype="int32") /* ty=Tensor[(10, 12, 15), int32] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %89 = cast(%var_4521, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
  %90 = cast(meta[relay.Constant][7] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
  %91 = cast(meta[relay.Constant][7] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
  %92 = cast(meta[relay.Constant][8] /* ty=Tensor[(539, 1), float32] */, dtype="float32") /* ty=Tensor[(539, 1), float32] */;
  %93 = cast(meta[relay.Constant][9] /* ty=Tensor[(500), int16] */, dtype="int16") /* ty=Tensor[(500), int16] */;
  %94 = cast(%var_4553, dtype="int64") /* ty=int64 */;
  %95 = cast(meta[relay.Constant][10] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %96 = reshape(%90, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), bool] */;
  %97 = reshape(%91, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), bool] */;
  %98 = reshape(%92, newshape=[539, 1]) /* ty=Tensor[(539, 1), float32] */;
  %99 = reshape(%93, newshape=[500]) /* ty=Tensor[(500), int16] */;
  %100 = reshape(%94, newshape=[]) /* ty=int64 */;
  %101 = reshape(%95, newshape=[11, 104]) /* ty=Tensor[(11, 104), float32] */;
  %102 = @func_1767(%96, %97, %98, %99, %100, %101) /* ty=(Tensor[(5, 10, 10), int16], Tensor[(539, 1), float32], Tensor[(500), int16], Tensor[(13, 21), int8], Tensor[(792), uint32], Tensor[(1, 1638), float64], int64, Tensor[(1024), bool], Tensor[(11, 104), float32], Tensor[(14, 9, 13), uint32], Tensor[(15, 4, 10), float32], Tensor[(13, 8, 11), float32]) */;
  %103 = cast(meta[relay.Constant][11] /* ty=Tensor[(1024), bool] */, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %104 = reshape(%103, newshape=[1024]) /* ty=Tensor[(1024), bool] */;
  %105 = @func_2778(%104) /* ty=(Tensor[(10, 12, 15), bool], Tensor[(1638, 1), float64], Tensor[(1144), float32], Tensor[(1024), float32]) */;
  %106 = @func_3476() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %107 = bitwise_xor(%87, %88) /* ty=Tensor[(10, 12, 15), int32] */;
  %108 = asin(%89) /* ty=Tensor[(10, 12, 15), float32] */;
  %109 = %102.6;
  %110 = %105.0;
  %111 = @func_3863() /* ty=Tensor[(1176), float32] */;
  %112 = %106.0;
  (%107, %108, %109, meta[relay.Constant][7] /* ty=Tensor[(600), bool] */, meta[relay.Constant][8] /* ty=Tensor[(539, 1), float32] */, meta[relay.Constant][9] /* ty=Tensor[(500), int16] */, %var_4553, meta[relay.Constant][10] /* ty=Tensor[(1144), float32] */, %110, meta[relay.Constant][11] /* ty=Tensor[(1024), bool] */, %111, %112)
}

def @func_5494(%var_5438: Tensor[(1144), float32], %var_5439: Tensor[(468), float32], %var_5440: Tensor[(273, 1), int8], %var_5480: int16) -> (Tensor[(10, 12, 15), float64], Tensor[(5, 10, 10), int16], Tensor[(1144), float32], Tensor[(273, 468), uint32], Tensor[(273, 42), int8], Tensor[(16, 14, 2), float64], int16, Tensor[(448), float32]) {
  %113 = @func_2958() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %114 = cast(meta[relay.Constant][12] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %115 = cast(%var_5438, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %116 = cast(%var_5439, dtype="float32") /* ty=Tensor[(468), float32] */;
  %117 = cast(%var_5440, dtype="int8") /* ty=Tensor[(273, 1), int8] */;
  %118 = reshape(%114, newshape=[14, 3]) /* ty=Tensor[(14, 3), float32] */;
  %119 = reshape(%115, newshape=[1144]) /* ty=Tensor[(1144), float32] */;
  %120 = reshape(%116, newshape=[468]) /* ty=Tensor[(468), float32] */;
  %121 = reshape(%117, newshape=[273]) /* ty=Tensor[(273), int8] */;
  %122 = @func_1942(%118, %119, %120, %121) /* ty=(Tensor[(1638), float64], Tensor[(1144), float32], Tensor[(1638), float64], Tensor[(14, 3), bool], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16], Tensor[(12, 13, 3), float32], Tensor[(468), float32], Tensor[(5, 10, 10), int16], Tensor[(600), bool], Tensor[(539), float32], Tensor[(1638), float64], Tensor[(273), int8]) */;
  %123 = cast(%var_5439, dtype="uint32") /* ty=Tensor[(468), uint32] */;
  %124 = cast(%var_5440, dtype="uint32") /* ty=Tensor[(273, 1), uint32] */;
  %125 = cast(meta[relay.Constant][12] /* ty=Tensor[(42), float32] */, dtype="int8") /* ty=Tensor[(42), int8] */;
  %126 = cast(%var_5440, dtype="int8") /* ty=Tensor[(273, 1), int8] */;
  %127 = cast(meta[relay.Constant][13] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %128 = cast(%var_5480, dtype="int16") /* ty=int16 */;
  %129 = %122.9;
  %130 = cast(%129, dtype="int16") /* ty=Tensor[(5, 10, 10), int16] */;
  %131 = reshape(%127, newshape=[16, 14, 2]) /* ty=Tensor[(16, 14, 2), float64] */;
  %132 = reshape(%128, newshape=[]) /* ty=int16 */;
  %133 = reshape(%130, newshape=[5, 100]) /* ty=Tensor[(5, 100), int16] */;
  %134 = @func_891(%131, %132, %133) /* ty=(Tensor[(16, 14, 2), bool], Tensor[(16, 14, 2), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(5, 100), int16]) */;
  %135 = cast(meta[relay.Constant][13] /* ty=Tensor[(448), float64] */, dtype="float32") /* ty=Tensor[(448), float32] */;
  %136 = %113.0;
  %137 = left_shift(%123, %124) /* ty=Tensor[(273, 468), uint32] */;
  %138 = logical_xor(%125, %126) /* ty=Tensor[(273, 42), int8] */;
  %139 = %134.1;
  %140 = acosh(%135) /* ty=Tensor[(448), float32] */;
  (%136, %129, %var_5438, %137, %138, %139, %var_5480, %140)
}

def @func_3102(%var_3091: Tensor[(4, 13, 12), uint32]) -> (Tensor[(4, 13, 12), uint32],) {
  %141 = cast(meta[relay.Constant][14] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %142 = cast(%var_3091, dtype="uint32") /* ty=Tensor[(4, 13, 12), uint32] */;
  %143 = bitwise_or(%141, %142) /* ty=Tensor[(4, 13, 12), uint32] */;
  (%143,)
}

def @func_5340() -> (Tensor[(10, 12, 15), float32],) {
  %144 = @func_4845() /* ty=(Tensor[(10, 12, 15), float32], Tensor[(10, 12, 15), float32]) */;
  %145 = %144.1;
  (%145,)
}

def @main(%var_6135: Tensor[(539), float32]) -> (Tensor[(3, 13, 7), int8], Tensor[(539), float32], Tensor[(500), int16], Tensor[(7, 4, 10), int16], Tensor[(280, 1176), uint32]) {
  %146 = cast(%var_6135, dtype="float32") /* ty=Tensor[(539), float32] */;
  %147 = cast(meta[relay.Constant][15] /* ty=Tensor[(500), int16] */, dtype="int16") /* ty=Tensor[(500), int16] */;
  %148 = reshape(%146, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %149 = reshape(%147, newshape=[500]) /* ty=Tensor[(500), int16] */;
  %150 = @func_847(%148, %149) /* ty=(Tensor[(11, 7, 7), float32], Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) */;
  %151 = cast(meta[relay.Constant][16] /* ty=Tensor[(280, 1), int16] */, dtype="int16") /* ty=Tensor[(280, 1), int16] */;
  %152 = reshape(%151, newshape=[7, 4, 10]) /* ty=Tensor[(7, 4, 10), int16] */;
  %153 = @func_2207(%152) /* ty=(Tensor[(7, 4, 10), int16],) */;
  %154 = @func_2995() /* ty=Tensor[(1176), float32] */;
  %155 = cast(%154, dtype="uint32") /* ty=Tensor[(1176), uint32] */;
  %156 = cast(meta[relay.Constant][16] /* ty=Tensor[(280, 1), int16] */, dtype="uint32") /* ty=Tensor[(280, 1), uint32] */;
  %157 = %150.1;
  %158 = %153.0;
  %159 = right_shift(%155, %156) /* ty=Tensor[(280, 1176), uint32] */;
  (%157, %var_6135, meta[relay.Constant][15] /* ty=Tensor[(500), int16] */, %158, %159)
}

def @func_5956(%var_5951: Tensor[(1144), float32]) -> (Tensor[(1176), float32], Tensor[(13, 8, 11), float32], Tensor[(1024), bool], Tensor[(1144), float32]) {
  %160 = cast(meta[relay.Constant][17] /* ty=Tensor[(1024), bool] */, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %161 = cast(meta[relay.Constant][17] /* ty=Tensor[(1024), bool] */, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %162 = cast(%var_5951, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %163 = reshape(%160, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), bool] */;
  %164 = reshape(%161, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), bool] */;
  %165 = reshape(%162, newshape=[1144]) /* ty=Tensor[(1144), float32] */;
  %166 = @func_999(%163, %164, %165) /* ty=(Tensor[(8, 8, 16), bool], Tensor[(13, 8, 11), float32], Tensor[(1144), float32], Tensor[(1638, 1), float64]) */;
  %167 = @func_2995() /* ty=Tensor[(1176), float32] */;
  %168 = %166.1;
  (%167, %168, meta[relay.Constant][17] /* ty=Tensor[(1024), bool] */, %var_5951)
}

def @func_5176(%var_5102: Tensor[(280), int16], %var_5146: Tensor[(1, 1144), float32]) -> (Tensor[(10, 12, 15), bool], Tensor[(1638), float64], Tensor[(280), int16], Tensor[(7, 14, 12), bool], Tensor[(468), float32], Tensor[(48), float64], Tensor[(?, 1144), uint64]) {
  %169 = @func_3248() /* ty=(Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool]) */;
  %170 = @func_2904() /* ty=(Tensor[(10, 12, 15), bool], Tensor[(7, 14, 12), bool], Tensor[(1176), float32]) */;
  %171 = cast(meta[relay.Constant][19] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %172 = reshape(%171, newshape=[8, 6, 1]) /* ty=Tensor[(8, 6, 1), float64] */;
  %173 = @func_1291(%172) /* ty=(Tensor[(8, 6, 1), float64], Tensor[(14, 117), float64], Tensor[(468), float32], Tensor[(1638), float64]) */;
  %174 = cast(meta[relay.Constant][18] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %175 = cast(meta[relay.Constant][18] /* ty=Tensor[(1638), float64] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %176 = cast(%var_5102, dtype="int16") /* ty=Tensor[(280), int16] */;
  %177 = reshape(%174, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %178 = reshape(%175, newshape=[1638]) /* ty=Tensor[(1638), float32] */;
  %179 = reshape(%176, newshape=[280]) /* ty=Tensor[(280), int16] */;
  %180 = @func_3549(%177, %178, %179) /* ty=(Tensor[(10, 12, 15), bool], Tensor[(13, 8, 11), float32], Tensor[(1, 1144), float32], Tensor[(10, 12, 15), float64], Tensor[(13, 11, 14), bool], Tensor[(2002, 1), float32], Tensor[(1638), int64], Tensor[(7, 4, 10), int16], Tensor[(280), int16]) */;
  %181 = %180.2;
  %182 = cast(%var_5146, dtype="uint8") /* ty=Tensor[(1, 1144), uint8] */;
  %183 = shape_of(%181, dtype="int32") /* ty=Tensor[(2), int32] */;
  %184 = cast(%181, dtype="uint8") /* ty=Tensor[(1, 1144), uint8] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %186 = right_shift(%184, %185) /* ty=Tensor[(?, 1144), uint8] */;
  %187 = cast(%181, dtype="uint64") /* ty=Tensor[(1, 1144), uint64] */;
  %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(2), int32] */;
  %189 = cast(%186, dtype="uint64") /* ty=Tensor[(?, 1144), uint64] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %191 = %169.1;
  %192 = %170.1;
  %193 = %173.2;
  %194 = maximum(%189, %190) /* ty=Tensor[(?, 1144), uint64] */;
  (%191, meta[relay.Constant][18] /* ty=Tensor[(1638), float64] */, %var_5102, %192, %193, meta[relay.Constant][19] /* ty=Tensor[(48), float64] */, %194)
}

def @func_5347() -> (Tensor[(10, 12, 15), bool],) {
  %195 = @func_4663() /* ty=(Tensor[(4, 7, 13), bool], Tensor[(4, 7, 13), float32], Tensor[(10, 12, 15), bool]) */;
  %196 = %195.2;
  (%196,)
}

def @func_1942(%var_1885: Tensor[(14, 3), float32], %var_1892: Tensor[(1144), float32], %var_1924: Tensor[(468), float32], %var_1938: Tensor[(273), int8]) -> (Tensor[(1638), float64], Tensor[(1144), float32], Tensor[(1638), float64], Tensor[(14, 3), bool], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16], Tensor[(12, 13, 3), float32], Tensor[(468), float32], Tensor[(5, 10, 10), int16], Tensor[(600), bool], Tensor[(539), float32], Tensor[(1638), float64], Tensor[(273), int8]) {
  %197 = cast(%var_1892, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %198 = cast(meta[relay.Constant][20] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %199 = reshape(%197, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), float32] */;
  %200 = reshape(%198, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %201 = @func_422(%199, %200) /* ty=(Tensor[(13, 8, 11), float32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64]) */;
  %202 = cast(%var_1885, dtype="float32") /* ty=Tensor[(14, 3), float32] */;
  %203 = acos(%202) /* ty=Tensor[(14, 3), float32] */;
  %204 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 3), float32] */, dtype="bool") /* ty=Tensor[(14, 3), bool] */;
  %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(2), int32] */;
  %206 = cast(%203, dtype="bool") /* ty=Tensor[(14, 3), bool] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %208 = cast(meta[relay.Constant][22] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %209 = cast(meta[relay.Constant][23] /* ty=Tensor[(500), int16] */, dtype="int16") /* ty=Tensor[(500), int16] */;
  %210 = reshape(%208, newshape=[]) /* ty=int16 */;
  %211 = reshape(%209, newshape=[5, 10, 10]) /* ty=Tensor[(5, 10, 10), int16] */;
  %212 = cast(%var_1924, dtype="float32") /* ty=Tensor[(468), float32] */;
  %213 = cast(meta[relay.Constant][20] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %214 = reshape(%212, newshape=[12, 13, 3]) /* ty=Tensor[(12, 13, 3), float32] */;
  %215 = reshape(%213, newshape=[14, 117]) /* ty=Tensor[(14, 117), float64] */;
  %216 = @func_551(%214, %215) /* ty=(Tensor[(12, 13, 3), float32], Tensor[(14, 9, 13), uint16], Tensor[(14, 117), float64]) */;
  %217 = cast(meta[relay.Constant][24] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
  %218 = cast(meta[relay.Constant][24] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
  %219 = cast(meta[relay.Constant][25] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %220 = cast(meta[relay.Constant][23] /* ty=Tensor[(500), int16] */, dtype="int16") /* ty=Tensor[(500), int16] */;
  %221 = cast(meta[relay.Constant][22] /* ty=int16 */, dtype="int64") /* ty=int64 */;
  %222 = cast(%var_1892, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %223 = reshape(%217, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), bool] */;
  %224 = reshape(%218, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), bool] */;
  %225 = reshape(%219, newshape=[539, 1]) /* ty=Tensor[(539, 1), float32] */;
  %226 = reshape(%220, newshape=[500]) /* ty=Tensor[(500), int16] */;
  %227 = reshape(%221, newshape=[]) /* ty=int64 */;
  %228 = reshape(%222, newshape=[11, 104]) /* ty=Tensor[(11, 104), float32] */;
  %229 = @func_1767(%223, %224, %225, %226, %227, %228) /* ty=(Tensor[(5, 10, 10), int16], Tensor[(539, 1), float32], Tensor[(500), int16], Tensor[(13, 21), int8], Tensor[(792), uint32], Tensor[(1, 1638), float64], int64, Tensor[(1024), bool], Tensor[(11, 104), float32], Tensor[(14, 9, 13), uint32], Tensor[(15, 4, 10), float32], Tensor[(13, 8, 11), float32]) */;
  %230 = cast(%var_1938, dtype="int8") /* ty=Tensor[(273), int8] */;
  %231 = cast(%var_1938, dtype="int8") /* ty=Tensor[(273), int8] */;
  %232 = cast(meta[relay.Constant][20] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %233 = cast(%var_1938, dtype="int8") /* ty=Tensor[(273), int8] */;
  %234 = reshape(%230, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %235 = reshape(%231, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %236 = reshape(%232, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %237 = reshape(%233, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %238 = @func_213(%234, %235, %236, %237) /* ty=(Tensor[(3, 13, 7), int8], Tensor[(1, 2), int64], Tensor[(2), int64], Tensor[(1638), float64], Tensor[(3, 13, 7), bool], Tensor[(14, 9, 13), uint32]) */;
  %239 = %201.2;
  %240 = greater_equal(%206, %207) /* ty=Tensor[(14, 3), bool] */;
  %241 = @func_679(%210, %211) /* ty=Tensor[(5, 10, 10), int16] */;
  %242 = %216.0;
  %243 = %229.0;
  %244 = %238.3;
  (%239, %var_1892, meta[relay.Constant][20] /* ty=Tensor[(1638), float64] */, %240, %241, meta[relay.Constant][22] /* ty=int16 */, meta[relay.Constant][23] /* ty=Tensor[(500), int16] */, %242, %var_1924, %243, meta[relay.Constant][24] /* ty=Tensor[(600), bool] */, meta[relay.Constant][25] /* ty=Tensor[(539), float32] */, %244, %var_1938)
}

def @func_3190(%var_3159: Tensor[(5, 56), int16], %var_3180: Tensor[(1638), float64]) -> (Tensor[(10, 12, 15), float64], Tensor[(7, 4, 10), int16], Tensor[(4, 13, 12), uint32], Tensor[(624), uint32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64], Tensor[(5, 56), float64]) {
  %245 = @func_2958() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %246 = cast(%var_3159, dtype="int16") /* ty=Tensor[(5, 56), int16] */;
  %247 = reshape(%246, newshape=[7, 4, 10]) /* ty=Tensor[(7, 4, 10), int16] */;
  %248 = @func_2207(%247) /* ty=(Tensor[(7, 4, 10), int16],) */;
  %249 = cast(meta[relay.Constant][26] /* ty=Tensor[(624), uint32] */, dtype="uint32") /* ty=Tensor[(624), uint32] */;
  %250 = reshape(%249, newshape=[4, 13, 12]) /* ty=Tensor[(4, 13, 12), uint32] */;
  %251 = @func_3102(%250) /* ty=(Tensor[(4, 13, 12), uint32],) */;
  %252 = cast(%var_3180, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %253 = cast(%var_3180, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %254 = reshape(%252, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %255 = reshape(%253, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %256 = cast(%var_3159, dtype="float32") /* ty=Tensor[(5, 56), float32] */;
  %257 = sigmoid(%256) /* ty=Tensor[(5, 56), float32] */;
  %258 = cast(%257, dtype="float64") /* ty=Tensor[(5, 56), float64] */;
  %259 = %245.0;
  %260 = %248.0;
  %261 = %251.0;
  %262 = @func_47(%254, %255) /* ty=Tensor[(14, 9, 13), uint16] */;
  %263 = sin(%258) /* ty=Tensor[(5, 56), float64] */;
  (%259, %260, %261, meta[relay.Constant][26] /* ty=Tensor[(624), uint32] */, %262, %var_3180, %263)
}

def @func_213(%var_147: Tensor[(3, 13, 7), int8], %var_148: Tensor[(3, 13, 7), int8], %var_187: Tensor[(1638), float64], %var_194: Tensor[(3, 13, 7), int8]) -> (Tensor[(3, 13, 7), int8], Tensor[(1, 2), int64], Tensor[(2), int64], Tensor[(1638), float64], Tensor[(3, 13, 7), bool], Tensor[(14, 9, 13), uint32]) {
  %264 = cast(%var_148, dtype="int8") /* ty=Tensor[(3, 13, 7), int8] */;
  %265 = shape_of(%var_147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%var_147, dtype="int8") /* ty=Tensor[(3, 13, 7), int8] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %268 = cast(-2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %269 = cast(meta[relay.Constant][27] /* ty=Tensor[(2), int64] */, dtype="int64") /* ty=Tensor[(2), int64] */;
  %270 = reshape(%268, newshape=[]) /* ty=int64 */;
  %271 = reshape(%269, newshape=[1, 2]) /* ty=Tensor[(1, 2), int64] */;
  %272 = @func_132(%270, %271) /* ty=(Tensor[(1, 2), int64], Tensor[(1, 2), bool]) */;
  %273 = cast(%var_194, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
  %274 = shape_of(%var_148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %275 = cast(%var_148, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %277 = cast(%var_187, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %278 = cast(%var_187, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %279 = reshape(%277, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %280 = reshape(%278, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %281 = @func_47(%279, %280) /* ty=Tensor[(14, 9, 13), uint16] */;
  %282 = cast(-2 /* ty=int64 */, dtype="uint32") /* ty=uint32 */;
  %283 = cast(%281, dtype="uint32") /* ty=Tensor[(14, 9, 13), uint32] */;
  %284 = logical_xor(%266, %267) /* ty=Tensor[(3, 13, 7), int8] */;
  %285 = %272.0;
  %286 = equal(%275, %276) /* ty=Tensor[(3, 13, 7), bool] */;
  %287 = left_shift(%282, %283) /* ty=Tensor[(14, 9, 13), uint32] */;
  (%284, %285, meta[relay.Constant][27] /* ty=Tensor[(2), int64] */, %var_187, %286, %287)
}

def @func_4137(%var_4099: Tensor[(64), uint64], %var_4101: Tensor[(224, 4), uint64], %var_4103: Tensor[(1176), float32], %var_4116: int16, %var_4117: Tensor[(500), int16]) -> (Tensor[(10, 12, 15), float64], Tensor[(1176), float64], Tensor[(10, 16, 4), float64], Tensor[(64), uint64], Tensor[(640), uint64], Tensor[(224, 4), uint64], Tensor[(1176), int64], Tensor[(1176), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) {
  %288 = @func_2851() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %289 = @func_3714() /* ty=(Tensor[(1176), float32], Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), float64], Tensor[(1176), float32], Tensor[(10, 12, 15), float64]) */;
  %290 = %289.0;
  %291 = cast(%290, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %292 = cast(%var_4099, dtype="uint64") /* ty=Tensor[(64), uint64] */;
  %293 = cast(meta[relay.Constant][28] /* ty=Tensor[(640), uint64] */, dtype="uint64") /* ty=Tensor[(640), uint64] */;
  %294 = cast(%var_4101, dtype="uint64") /* ty=Tensor[(224, 4), uint64] */;
  %295 = reshape(%292, newshape=[1, 16, 4]) /* ty=Tensor[(1, 16, 4), uint64] */;
  %296 = reshape(%293, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint64] */;
  %297 = reshape(%294, newshape=[14, 16, 4]) /* ty=Tensor[(14, 16, 4), uint64] */;
  %298 = @func_1086(%295, %296, %297) /* ty=(Tensor[(10, 16, 4), uint64], Tensor[(14, 16, 4), bool], Tensor[(10, 16, 4), float64], Tensor[(10, 16, 4), float32]) */;
  %299 = cast(%var_4103, dtype="int64") /* ty=Tensor[(1176), int64] */;
  %300 = shape_of(%290, dtype="int32") /* ty=Tensor[(1), int32] */;
  %301 = cast(%290, dtype="int64") /* ty=Tensor[(1176), int64] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?), int64] */;
  %303 = cast(%290, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %304 = asin(%303) /* ty=Tensor[(1176), float32] */;
  %305 = cast(%var_4103, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(1), int32] */;
  %307 = cast(%304, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?), float64] */;
  %309 = cast(%var_4116, dtype="int16") /* ty=int16 */;
  %310 = cast(%var_4117, dtype="int16") /* ty=Tensor[(500), int16] */;
  %311 = reshape(%309, newshape=[]) /* ty=int16 */;
  %312 = reshape(%310, newshape=[5, 10, 10]) /* ty=Tensor[(5, 10, 10), int16] */;
  %313 = %288.0;
  %314 = asinh(%291) /* ty=Tensor[(1176), float64] */;
  %315 = %298.2;
  %316 = multiply(%301, %302) /* ty=Tensor[(1176), int64] */;
  %317 = floor_divide(%307, %308) /* ty=Tensor[(1176), float64] */;
  %318 = @func_679(%311, %312) /* ty=Tensor[(5, 10, 10), int16] */;
  (%313, %314, %315, %var_4099, meta[relay.Constant][28] /* ty=Tensor[(640), uint64] */, %var_4101, %316, %317, %318, %var_4116, %var_4117)
}

def @func_3345(%var_3317: Tensor[(539), float32], %var_3318: Tensor[(500), int16]) -> (Tensor[(10, 12, 15), float64], Tensor[(539), float32], Tensor[(500), int16], Tensor[(5, 10, 10), int64]) {
  %319 = @func_2958() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %320 = %319.0;
  %321 = cast(%320, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
  %322 = sqrt(%321) /* ty=Tensor[(10, 12, 15), float32] */;
  %323 = cast(%320, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
  %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%322, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %327 = cast(%var_3317, dtype="float32") /* ty=Tensor[(539), float32] */;
  %328 = cast(%var_3318, dtype="int16") /* ty=Tensor[(500), int16] */;
  %329 = reshape(%327, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %330 = reshape(%328, newshape=[500]) /* ty=Tensor[(500), int16] */;
  %331 = @func_847(%329, %330) /* ty=(Tensor[(11, 7, 7), float32], Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) */;
  %332 = %331.4;
  %333 = cast(%332, dtype="float32") /* ty=Tensor[(5, 10, 10), float32] */;
  %334 = sigmoid(%333) /* ty=Tensor[(5, 10, 10), float32] */;
  %335 = cast(%332, dtype="int64") /* ty=Tensor[(5, 10, 10), int64] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%334, dtype="int64") /* ty=Tensor[(5, 10, 10), int64] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %339 = divide(%325, %326) /* ty=Tensor[(10, 12, 15), float64] */;
  %340 = bitwise_and(%337, %338) /* ty=Tensor[(5, 10, 10), int64] */;
  (%339, %var_3317, %var_3318, %340)
}

def @func_6057(%var_6036: Tensor[(14, 12, 16), float32]) -> (Tensor[(14, 12, 16), int64],) {
  %341 = cast(%var_6036, dtype="float32") /* ty=Tensor[(14, 12, 16), float32] */;
  %342 = tan(%341) /* ty=Tensor[(14, 12, 16), float32] */;
  %343 = cast(%var_6036, dtype="int64") /* ty=Tensor[(14, 12, 16), int64] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%342, dtype="int64") /* ty=Tensor[(14, 12, 16), int64] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %347 = add(%345, %346) /* ty=Tensor[(14, 12, 16), int64] */;
  (%347,)
}

def @func_847(%var_817: Tensor[(11, 7, 7), float32], %var_830: Tensor[(500), int16]) -> (Tensor[(11, 7, 7), float32], Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) {
  %348 = cast(%var_817, dtype="float32") /* ty=Tensor[(11, 7, 7), float32] */;
  %349 = cast(meta[relay.Constant][29] /* ty=Tensor[(273), int8] */, dtype="int8") /* ty=Tensor[(273), int8] */;
  %350 = cast(meta[relay.Constant][29] /* ty=Tensor[(273), int8] */, dtype="int8") /* ty=Tensor[(273), int8] */;
  %351 = cast(meta[relay.Constant][30] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %352 = cast(meta[relay.Constant][29] /* ty=Tensor[(273), int8] */, dtype="int8") /* ty=Tensor[(273), int8] */;
  %353 = reshape(%349, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %354 = reshape(%350, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %355 = reshape(%351, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %356 = reshape(%352, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %357 = @func_213(%353, %354, %355, %356) /* ty=(Tensor[(3, 13, 7), int8], Tensor[(1, 2), int64], Tensor[(2), int64], Tensor[(1638), float64], Tensor[(3, 13, 7), bool], Tensor[(14, 9, 13), uint32]) */;
  %358 = cast(meta[relay.Constant][31] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %359 = cast(%var_830, dtype="int16") /* ty=Tensor[(500), int16] */;
  %360 = reshape(%358, newshape=[]) /* ty=int16 */;
  %361 = reshape(%359, newshape=[5, 10, 10]) /* ty=Tensor[(5, 10, 10), int16] */;
  %362 = asinh(%348) /* ty=Tensor[(11, 7, 7), float32] */;
  %363 = %357.0;
  %364 = @func_679(%360, %361) /* ty=Tensor[(5, 10, 10), int16] */;
  (%362, %363, meta[relay.Constant][29] /* ty=Tensor[(273), int8] */, meta[relay.Constant][30] /* ty=Tensor[(1638), float64] */, %364, meta[relay.Constant][31] /* ty=int16 */, %var_830)
}

def @func_4504() -> (Tensor[(1176), float32], Tensor[(15, 1, 9), float32], Tensor[(3, 45), float32]) {
  %365 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 45), float32] */, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
  %366 = reshape(%365, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
  %367 = @func_3863() /* ty=Tensor[(1176), float32] */;
  %368 = @func_2629(%366) /* ty=Tensor[(15, 1, 9), float32] */;
  (%367, %368, meta[relay.Constant][32] /* ty=Tensor[(3, 45), float32] */)
}

def @func_3636() -> Tensor[(1176), float32] {
  @func_2995() /* ty=Tensor[(1176), float32] */
}

def @func_4390(%var_4351: Tensor[(7, 4, 2), float64], %var_4361: Tensor[(539), float32]) -> (Tensor[(7, 4, 2), float64], Tensor[(539, 1), float32], Tensor[(1, 600), bool], Tensor[(539), float32], Tensor[(1, 500), int16], int64, Tensor[(1144), float32]) {
  %369 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 4, 2), float64] */, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
  %370 = shape_of(%var_4351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%var_4351, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %373 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 600), bool] */, dtype="bool") /* ty=Tensor[(1, 600), bool] */;
  %374 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 600), bool] */, dtype="bool") /* ty=Tensor[(1, 600), bool] */;
  %375 = cast(%var_4361, dtype="float32") /* ty=Tensor[(539), float32] */;
  %376 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 500), int16] */, dtype="int16") /* ty=Tensor[(1, 500), int16] */;
  %377 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %378 = cast(meta[relay.Constant][36] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %379 = reshape(%373, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), bool] */;
  %380 = reshape(%374, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), bool] */;
  %381 = reshape(%375, newshape=[539, 1]) /* ty=Tensor[(539, 1), float32] */;
  %382 = reshape(%376, newshape=[500]) /* ty=Tensor[(500), int16] */;
  %383 = reshape(%377, newshape=[]) /* ty=int64 */;
  %384 = reshape(%378, newshape=[11, 104]) /* ty=Tensor[(11, 104), float32] */;
  %385 = @func_1767(%379, %380, %381, %382, %383, %384) /* ty=(Tensor[(5, 10, 10), int16], Tensor[(539, 1), float32], Tensor[(500), int16], Tensor[(13, 21), int8], Tensor[(792), uint32], Tensor[(1, 1638), float64], int64, Tensor[(1024), bool], Tensor[(11, 104), float32], Tensor[(14, 9, 13), uint32], Tensor[(15, 4, 10), float32], Tensor[(13, 8, 11), float32]) */;
  %386 = subtract(%371, %372) /* ty=Tensor[(7, 4, 2), float64] */;
  %387 = %385.1;
  (%386, %387, meta[relay.Constant][34] /* ty=Tensor[(1, 600), bool] */, %var_4361, meta[relay.Constant][35] /* ty=Tensor[(1, 500), int16] */, -6 /* ty=int64 */, meta[relay.Constant][36] /* ty=Tensor[(1144), float32] */)
}

def @func_3476() -> (Tensor[(10, 12, 15), float64],) {
  %388 = @func_2958() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %389 = %388.0;
  (%389,)
}

def @func_6001() -> (Tensor[(10, 12, 15), bool], Tensor[(7, 15, 3), float64], Tensor[(315), float64]) {
  %390 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
  %391 = cast(meta[relay.Constant][37] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %392 = cast(meta[relay.Constant][37] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %393 = reshape(%391, newshape=[7, 15, 3]) /* ty=Tensor[(7, 15, 3), float64] */;
  %394 = reshape(%392, newshape=[7, 15, 3]) /* ty=Tensor[(7, 15, 3), float64] */;
  %395 = %390.0;
  %396 = @func_4866(%393, %394) /* ty=Tensor[(7, 15, 3), float64] */;
  (%395, %396, meta[relay.Constant][37] /* ty=Tensor[(315), float64] */)
}

def @func_551(%var_545: Tensor[(12, 13, 3), float32], %var_549: Tensor[(14, 117), float64]) -> (Tensor[(12, 13, 3), float32], Tensor[(14, 9, 13), uint16], Tensor[(14, 117), float64]) {
  %397 = cast(%var_545, dtype="float32") /* ty=Tensor[(12, 13, 3), float32] */;
  %398 = cast(%var_549, dtype="float64") /* ty=Tensor[(14, 117), float64] */;
  %399 = cast(%var_549, dtype="float64") /* ty=Tensor[(14, 117), float64] */;
  %400 = reshape(%398, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %401 = reshape(%399, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %402 = cosh(%397) /* ty=Tensor[(12, 13, 3), float32] */;
  %403 = @func_47(%400, %401) /* ty=Tensor[(14, 9, 13), uint16] */;
  (%402, %403, %var_549)
}

def @func_1086(%var_1064: Tensor[(1, 16, 4), uint64], %var_1065: Tensor[(10, 16, 4), uint64], %var_1069: Tensor[(14, 16, 4), uint64]) -> (Tensor[(10, 16, 4), uint64], Tensor[(14, 16, 4), bool], Tensor[(10, 16, 4), float64], Tensor[(10, 16, 4), float32]) {
  %404 = cast(%var_1064, dtype="uint64") /* ty=Tensor[(1, 16, 4), uint64] */;
  %405 = cast(%var_1065, dtype="uint64") /* ty=Tensor[(10, 16, 4), uint64] */;
  %406 = cast(%var_1064, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %407 = cast(%var_1069, dtype="bool") /* ty=Tensor[(14, 16, 4), bool] */;
  %408 = cast(%var_1065, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
  %409 = exp(%408) /* ty=Tensor[(10, 16, 4), float32] */;
  %410 = cast(%409, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
  %411 = cast(%409, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
  %412 = right_shift(%404, %405) /* ty=Tensor[(10, 16, 4), uint64] */;
  %413 = equal(%406, %407) /* ty=Tensor[(14, 16, 4), bool] */;
  %414 = sinh(%410) /* ty=Tensor[(10, 16, 4), float64] */;
  %415 = log10(%411) /* ty=Tensor[(10, 16, 4), float32] */;
  (%412, %413, %414, %415)
}

def @func_5304() -> Tensor[(1176), float32] {
  %416 = @func_5271() /* ty=(Tensor[(1176), float32],) */;
  %416.0
}

def @func_4845() -> (Tensor[(10, 12, 15), float32], Tensor[(10, 12, 15), float32]) {
  %417 = @func_3248() /* ty=(Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool]) */;
  %418 = %417.0;
  %419 = cast(%418, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
  %420 = log10(%419) /* ty=Tensor[(10, 12, 15), float32] */;
  %421 = cast(%420, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
  %422 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%418, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %425 = cast(%420, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
  %426 = power(%423, %424) /* ty=Tensor[(10, 12, 15), float32] */;
  %427 = acos(%425) /* ty=Tensor[(10, 12, 15), float32] */;
  (%426, %427)
}

def @func_132(%var_115: int64, %var_116: Tensor[(1, 2), int64]) -> (Tensor[(1, 2), int64], Tensor[(1, 2), bool]) {
  %428 = cast(%var_115, dtype="int64") /* ty=int64 */;
  %429 = cast(%var_116, dtype="int64") /* ty=Tensor[(1, 2), int64] */;
  %430 = cast(%var_116, dtype="bool") /* ty=Tensor[(1, 2), bool] */;
  %431 = cast(%var_115, dtype="bool") /* ty=bool */;
  %432 = subtract(%428, %429) /* ty=Tensor[(1, 2), int64] */;
  %433 = less_equal(%430, %431) /* ty=Tensor[(1, 2), bool] */;
  (%432, %433)
}

def @func_4739(%var_4730: int64) -> (Tensor[(10, 12, 15), float64], Tensor[(1, 2), bool], int64, Tensor[(2), int64]) {
  %434 = @func_3248() /* ty=(Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool]) */;
  %435 = cast(%var_4730, dtype="int64") /* ty=int64 */;
  %436 = cast(meta[relay.Constant][38] /* ty=Tensor[(2), int64] */, dtype="int64") /* ty=Tensor[(2), int64] */;
  %437 = reshape(%435, newshape=[]) /* ty=int64 */;
  %438 = reshape(%436, newshape=[1, 2]) /* ty=Tensor[(1, 2), int64] */;
  %439 = @func_132(%437, %438) /* ty=(Tensor[(1, 2), int64], Tensor[(1, 2), bool]) */;
  %440 = %434.0;
  %441 = %439.1;
  (%440, %441, %var_4730, meta[relay.Constant][38] /* ty=Tensor[(2), int64] */)
}

def @func_4779() -> Tensor[(1176), float32] {
  %442 = @func_4427() /* ty=(Tensor[(1176), float32],) */;
  %442.0
}

def @func_4701() -> Tensor[(1176), float32] {
  %443 = @func_4427() /* ty=(Tensor[(1176), float32],) */;
  %443.0
}

def @func_1767(%var_1693: Tensor[(15, 4, 10), bool], %var_1694: Tensor[(15, 4, 10), bool], %var_1707: Tensor[(539, 1), float32], %var_1708: Tensor[(500), int16], %var_1714: int64, %var_1716: Tensor[(11, 104), float32]) -> (Tensor[(5, 10, 10), int16], Tensor[(539, 1), float32], Tensor[(500), int16], Tensor[(13, 21), int8], Tensor[(792), uint32], Tensor[(1, 1638), float64], int64, Tensor[(1024), bool], Tensor[(11, 104), float32], Tensor[(14, 9, 13), uint32], Tensor[(15, 4, 10), float32], Tensor[(13, 8, 11), float32]) {
  %444 = cast(%var_1707, dtype="float32") /* ty=Tensor[(539, 1), float32] */;
  %445 = cast(%var_1708, dtype="int16") /* ty=Tensor[(500), int16] */;
  %446 = reshape(%444, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %447 = reshape(%445, newshape=[500]) /* ty=Tensor[(500), int16] */;
  %448 = @func_847(%446, %447) /* ty=(Tensor[(11, 7, 7), float32], Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) */;
  %449 = cast(meta[relay.Constant][39] /* ty=Tensor[(792), uint32] */, dtype="uint32") /* ty=Tensor[(792), uint32] */;
  %450 = cast(meta[relay.Constant][39] /* ty=Tensor[(792), uint32] */, dtype="uint32") /* ty=Tensor[(792), uint32] */;
  %451 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 1638), float64] */, dtype="float64") /* ty=Tensor[(1, 1638), float64] */;
  %452 = cast(%var_1714, dtype="int64") /* ty=int64 */;
  %453 = cast(meta[relay.Constant][41] /* ty=Tensor[(1024), bool] */, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %454 = cast(%var_1716, dtype="float32") /* ty=Tensor[(11, 104), float32] */;
  %455 = reshape(%449, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), uint32] */;
  %456 = reshape(%450, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), uint32] */;
  %457 = reshape(%451, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %458 = reshape(%452, newshape=[]) /* ty=int64 */;
  %459 = reshape(%453, newshape=[1024]) /* ty=Tensor[(1024), bool] */;
  %460 = reshape(%454, newshape=[1144]) /* ty=Tensor[(1144), float32] */;
  %461 = @func_1587(%455, %456, %457, %458, %459, %460) /* ty=(Tensor[(9, 11, 8), uint32], Tensor[(2), int64], Tensor[(13, 21), int8], Tensor[(1638), float64], Tensor[(1, 2), bool], Tensor[(9, 11, 8), float64], Tensor[(1144), float32], Tensor[(1024), bool], Tensor[(1144), float32], Tensor[(3, 13, 7), uint8]) */;
  %462 = %461.2;
  %463 = cast(%462, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %464 = cast(%462, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %465 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 1638), float64] */, dtype="float64") /* ty=Tensor[(1, 1638), float64] */;
  %466 = cast(%462, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %467 = reshape(%463, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %468 = reshape(%464, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %469 = reshape(%465, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %470 = reshape(%466, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %471 = @func_213(%467, %468, %469, %470) /* ty=(Tensor[(3, 13, 7), int8], Tensor[(1, 2), int64], Tensor[(2), int64], Tensor[(1638), float64], Tensor[(3, 13, 7), bool], Tensor[(14, 9, 13), uint32]) */;
  %472 = cast(%var_1694, dtype="bool") /* ty=Tensor[(15, 4, 10), bool] */;
  %473 = shape_of(%var_1693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%var_1693, dtype="bool") /* ty=Tensor[(15, 4, 10), bool] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %476 = logical_or(%474, %475) /* ty=Tensor[(15, 4, 10), bool] */;
  %477 = cast(%var_1693, dtype="float32") /* ty=Tensor[(15, 4, 10), float32] */;
  %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%476, dtype="float32") /* ty=Tensor[(15, 4, 10), float32] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %481 = cast(%var_1716, dtype="float32") /* ty=Tensor[(11, 104), float32] */;
  %482 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 1638), float64] */, dtype="float64") /* ty=Tensor[(1, 1638), float64] */;
  %483 = reshape(%481, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), float32] */;
  %484 = reshape(%482, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %485 = @func_422(%483, %484) /* ty=(Tensor[(13, 8, 11), float32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64]) */;
  %486 = %448.4;
  %487 = %471.5;
  %488 = floor_divide(%479, %480) /* ty=Tensor[(15, 4, 10), float32] */;
  %489 = %485.0;
  (%486, %var_1707, %var_1708, %462, meta[relay.Constant][39] /* ty=Tensor[(792), uint32] */, meta[relay.Constant][40] /* ty=Tensor[(1, 1638), float64] */, %var_1714, meta[relay.Constant][41] /* ty=Tensor[(1024), bool] */, %var_1716, %487, %488, %489)
}

def @func_5321() -> (Tensor[(10, 12, 15), bool],) {
  %490 = @func_3248() /* ty=(Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool]) */;
  %491 = %490.1;
  (%491,)
}

def @func_4663() -> (Tensor[(4, 7, 13), bool], Tensor[(4, 7, 13), float32], Tensor[(10, 12, 15), bool]) {
  %492 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 7, 13), uint8] */, dtype="bool") /* ty=Tensor[(4, 7, 13), bool] */;
  %493 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(4, 7, 13), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 7, 13), uint8] */, dtype="bool") /* ty=Tensor[(4, 7, 13), bool] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %496 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 7, 13), uint8] */, dtype="float32") /* ty=Tensor[(4, 7, 13), float32] */;
  %497 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
  %498 = not_equal(%494, %495) /* ty=Tensor[(4, 7, 13), bool] */;
  %499 = asinh(%496) /* ty=Tensor[(4, 7, 13), float32] */;
  %500 = %497.0;
  (%498, %499, %500)
}

def @func_2679(%var_2646: Tensor[(16, 10, 3), float32], %var_2655: Tensor[(468, 1), float32], %var_2656: Tensor[(1638), float64], %var_2665: int16, %var_2666: Tensor[(500), int16], %var_2674: Tensor[(2, 224), float64]) -> (Tensor[(16, 10, 3), float32], Tensor[(14, 117), float64], Tensor[(468, 1), float32], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16], Tensor[(16, 14, 2), bool], Tensor[(2, 224), float64]) {
  %501 = cast(%var_2646, dtype="float32") /* ty=Tensor[(16, 10, 3), float32] */;
  %502 = cast(%var_2655, dtype="float32") /* ty=Tensor[(468, 1), float32] */;
  %503 = cast(%var_2656, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %504 = reshape(%502, newshape=[12, 13, 3]) /* ty=Tensor[(12, 13, 3), float32] */;
  %505 = reshape(%503, newshape=[14, 117]) /* ty=Tensor[(14, 117), float64] */;
  %506 = @func_551(%504, %505) /* ty=(Tensor[(12, 13, 3), float32], Tensor[(14, 9, 13), uint16], Tensor[(14, 117), float64]) */;
  %507 = cast(%var_2665, dtype="int16") /* ty=int16 */;
  %508 = cast(%var_2666, dtype="int16") /* ty=Tensor[(500), int16] */;
  %509 = reshape(%507, newshape=[]) /* ty=int16 */;
  %510 = reshape(%508, newshape=[5, 10, 10]) /* ty=Tensor[(5, 10, 10), int16] */;
  %511 = cast(%var_2674, dtype="float64") /* ty=Tensor[(2, 224), float64] */;
  %512 = cast(%var_2665, dtype="int16") /* ty=int16 */;
  %513 = cast(%var_2666, dtype="int16") /* ty=Tensor[(500), int16] */;
  %514 = reshape(%511, newshape=[16, 14, 2]) /* ty=Tensor[(16, 14, 2), float64] */;
  %515 = reshape(%512, newshape=[]) /* ty=int16 */;
  %516 = reshape(%513, newshape=[5, 100]) /* ty=Tensor[(5, 100), int16] */;
  %517 = @func_891(%514, %515, %516) /* ty=(Tensor[(16, 14, 2), bool], Tensor[(16, 14, 2), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(5, 100), int16]) */;
  %518 = cosh(%501) /* ty=Tensor[(16, 10, 3), float32] */;
  %519 = %506.2;
  %520 = @func_679(%509, %510) /* ty=Tensor[(5, 10, 10), int16] */;
  %521 = %517.0;
  (%518, %519, %var_2655, %var_2656, %520, %var_2665, %var_2666, %521, %var_2674)
}

def @func_5271() -> (Tensor[(1176), float32],) {
  %522 = @func_2995() /* ty=Tensor[(1176), float32] */;
  %523 = cast(%522, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %524 = erf(%523) /* ty=Tensor[(1176), float32] */;
  (%524,)
}

def @func_5731(%var_5711: Tensor[(1638), float64]) -> (Tensor[(1176), float32], Tensor[(13, 8, 11), float32], Tensor[(1144), float32], Tensor[(1638), float64], Tensor[(7, 15, 3), float64], Tensor[(315), float64]) {
  %525 = cast(meta[relay.Constant][44] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %526 = cast(%var_5711, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %527 = reshape(%525, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), float32] */;
  %528 = reshape(%526, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %529 = @func_422(%527, %528) /* ty=(Tensor[(13, 8, 11), float32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64]) */;
  %530 = cast(meta[relay.Constant][45] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %531 = cast(meta[relay.Constant][45] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %532 = reshape(%530, newshape=[7, 15, 3]) /* ty=Tensor[(7, 15, 3), float64] */;
  %533 = reshape(%531, newshape=[7, 15, 3]) /* ty=Tensor[(7, 15, 3), float64] */;
  %534 = @func_5304() /* ty=Tensor[(1176), float32] */;
  %535 = %529.0;
  %536 = @func_4866(%532, %533) /* ty=Tensor[(7, 15, 3), float64] */;
  (%534, %535, meta[relay.Constant][44] /* ty=Tensor[(1144), float32] */, %var_5711, %536, meta[relay.Constant][45] /* ty=Tensor[(315), float64] */)
}

def @func_2719() -> (Tensor[(10, 12, 15), bool],) {
  %537 = cast(meta[relay.Constant][47] /* ty=Tensor[(10, 12, 15), int8] */, dtype="bool") /* ty=Tensor[(10, 12, 15), bool] */;
  %538 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(10, 12, 15), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 12, 15), int8] */, dtype="bool") /* ty=Tensor[(10, 12, 15), bool] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %541 = greater_equal(%539, %540) /* ty=Tensor[(10, 12, 15), bool] */;
  (%541,)
}

def @func_1040(%var_1017: Tensor[(13, 11, 14), float32], %var_1028: Tensor[(13, 11, 14), float32]) -> (Tensor[(13, 11, 14), bool],) {
  %542 = cast(%var_1017, dtype="float32") /* ty=Tensor[(13, 11, 14), float32] */;
  %543 = asinh(%542) /* ty=Tensor[(13, 11, 14), float32] */;
  %544 = cast(%var_1028, dtype="bool") /* ty=Tensor[(13, 11, 14), bool] */;
  %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%543, dtype="bool") /* ty=Tensor[(13, 11, 14), bool] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %548 = logical_and(%546, %547) /* ty=Tensor[(13, 11, 14), bool] */;
  (%548,)
}

def @func_2778(%var_2755: Tensor[(1024), bool]) -> (Tensor[(10, 12, 15), bool], Tensor[(1638, 1), float64], Tensor[(1144), float32], Tensor[(1024), float32]) {
  %549 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
  %550 = cast(%var_2755, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %551 = cast(%var_2755, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %552 = cast(meta[relay.Constant][48] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %553 = reshape(%550, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), bool] */;
  %554 = reshape(%551, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), bool] */;
  %555 = reshape(%552, newshape=[1144]) /* ty=Tensor[(1144), float32] */;
  %556 = @func_999(%553, %554, %555) /* ty=(Tensor[(8, 8, 16), bool], Tensor[(13, 8, 11), float32], Tensor[(1144), float32], Tensor[(1638, 1), float64]) */;
  %557 = cast(%var_2755, dtype="float32") /* ty=Tensor[(1024), float32] */;
  %558 = %549.0;
  %559 = %556.3;
  %560 = tan(%557) /* ty=Tensor[(1024), float32] */;
  (%558, %559, meta[relay.Constant][48] /* ty=Tensor[(1144), float32] */, %560)
}

def @func_2995() -> Tensor[(1176), float32] {
  %561 = @func_2904() /* ty=(Tensor[(10, 12, 15), bool], Tensor[(7, 14, 12), bool], Tensor[(1176), float32]) */;
  %561.2
}

def @func_3248() -> (Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool]) {
  %562 = @func_2958() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %563 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
  %564 = %562.0;
  %565 = %563.0;
  (%564, %565)
}

def @func_5397(%var_5390: Tensor[(48), float64], %var_5392: Tensor[(8, 7, 14), float64]) -> (Tensor[(1638), float64], Tensor[(48), float64], Tensor[(8, 7, 14), uint8]) {
  %566 = cast(%var_5390, dtype="float64") /* ty=Tensor[(48), float64] */;
  %567 = reshape(%566, newshape=[8, 6, 1]) /* ty=Tensor[(8, 6, 1), float64] */;
  %568 = @func_1291(%567) /* ty=(Tensor[(8, 6, 1), float64], Tensor[(14, 117), float64], Tensor[(468), float32], Tensor[(1638), float64]) */;
  %569 = cast(meta[relay.Constant][49] /* ty=Tensor[(8, 7, 14), float64] */, dtype="float64") /* ty=Tensor[(8, 7, 14), float64] */;
  %570 = acos(%569) /* ty=Tensor[(8, 7, 14), float64] */;
  %571 = cast(%var_5392, dtype="uint8") /* ty=Tensor[(8, 7, 14), uint8] */;
  %572 = shape_of(%570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%570, dtype="uint8") /* ty=Tensor[(8, 7, 14), uint8] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %575 = %568.3;
  %576 = subtract(%573, %574) /* ty=Tensor[(8, 7, 14), uint8] */;
  (%575, %var_5390, %576)
}

def @func_3944(%var_3886: Tensor[(156), bool], %var_3887: Tensor[(448), float64], %var_3888: int16, %var_3928: Tensor[(539), float32], %var_3935: Tensor[(48), float64]) -> (Tensor[(1176), uint16], Tensor[(156), bool], Tensor[(448), float64], int16, Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool], Tensor[(1638), float64], Tensor[(539), float32], Tensor[(468), float32], Tensor[(48), float64], Tensor[(500), float32]) {
  %577 = @func_3863() /* ty=Tensor[(1176), float32] */;
  %578 = cast(meta[relay.Constant][50] /* ty=Tensor[(1176), float32] */, dtype="uint16") /* ty=Tensor[(1176), uint16] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(1), int32] */;
  %580 = cast(%577, dtype="uint16") /* ty=Tensor[(1176), uint16] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %582 = @func_2851() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %583 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
  %584 = cast(%var_3928, dtype="float32") /* ty=Tensor[(539), float32] */;
  %585 = cast(%var_3886, dtype="bool") /* ty=Tensor[(156), bool] */;
  %586 = cast(%var_3886, dtype="bool") /* ty=Tensor[(156), bool] */;
  %587 = cast(%var_3887, dtype="float64") /* ty=Tensor[(448), float64] */;
  %588 = cast(%var_3888, dtype="int16") /* ty=int16 */;
  %589 = reshape(%585, newshape=[6, 13, 2]) /* ty=Tensor[(6, 13, 2), bool] */;
  %590 = reshape(%586, newshape=[6, 13, 2]) /* ty=Tensor[(6, 13, 2), bool] */;
  %591 = reshape(%587, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %592 = reshape(%588, newshape=[]) /* ty=int16 */;
  %593 = @func_3755(%589, %590, %591, %592) /* ty=(Tensor[(6, 13, 2), bool], Tensor[(6, 13, 2), float64], Tensor[(16, 14, 2), bool], Tensor[(448), float64], int16, Tensor[(500), int16]) */;
  %594 = %593.5;
  %595 = cast(%594, dtype="float64") /* ty=Tensor[(500), float64] */;
  %596 = acos(%595) /* ty=Tensor[(500), float64] */;
  %597 = cast(%596, dtype="int16") /* ty=Tensor[(500), int16] */;
  %598 = reshape(%584, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %599 = reshape(%597, newshape=[500]) /* ty=Tensor[(500), int16] */;
  %600 = @func_847(%598, %599) /* ty=(Tensor[(11, 7, 7), float32], Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) */;
  %601 = cast(%var_3935, dtype="float64") /* ty=Tensor[(48), float64] */;
  %602 = reshape(%601, newshape=[8, 6, 1]) /* ty=Tensor[(8, 6, 1), float64] */;
  %603 = @func_1291(%602) /* ty=(Tensor[(8, 6, 1), float64], Tensor[(14, 117), float64], Tensor[(468), float32], Tensor[(1638), float64]) */;
  %604 = cast(%596, dtype="float32") /* ty=Tensor[(500), float32] */;
  %605 = right_shift(%580, %581) /* ty=Tensor[(1176), uint16] */;
  %606 = %582.0;
  %607 = %583.0;
  %608 = %600.3;
  %609 = %603.2;
  %610 = rsqrt(%604) /* ty=Tensor[(500), float32] */;
  (%605, %var_3886, %var_3887, %var_3888, %606, %607, %608, %var_3928, %609, %var_3935, %610)
}

def @func_4427() -> (Tensor[(1176), float32],) {
  %611 = @func_3636() /* ty=Tensor[(1176), float32] */;
  (%611,)
}

def @func_5228(%var_5216: Tensor[(280), int16]) -> (Tensor[(1176), float32], Tensor[(280), int16], Tensor[(1638), float64], Tensor[(280), int16]) {
  %612 = @func_4427() /* ty=(Tensor[(1176), float32],) */;
  %613 = cast(meta[relay.Constant][51] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %614 = cast(meta[relay.Constant][51] /* ty=Tensor[(1638), float64] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %615 = cast(%var_5216, dtype="int16") /* ty=Tensor[(280), int16] */;
  %616 = reshape(%613, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %617 = reshape(%614, newshape=[1638]) /* ty=Tensor[(1638), float32] */;
  %618 = reshape(%615, newshape=[280]) /* ty=Tensor[(280), int16] */;
  %619 = @func_3549(%616, %617, %618) /* ty=(Tensor[(10, 12, 15), bool], Tensor[(13, 8, 11), float32], Tensor[(1, 1144), float32], Tensor[(10, 12, 15), float64], Tensor[(13, 11, 14), bool], Tensor[(2002, 1), float32], Tensor[(1638), int64], Tensor[(7, 4, 10), int16], Tensor[(280), int16]) */;
  %620 = %612.0;
  %621 = %619.8;
  (%620, %621, meta[relay.Constant][51] /* ty=Tensor[(1638), float64] */, %var_5216)
}

def @func_5590() -> (Tensor[(1176), float32],) {
  %622 = @func_2904() /* ty=(Tensor[(10, 12, 15), bool], Tensor[(7, 14, 12), bool], Tensor[(1176), float32]) */;
  %623 = %622.2;
  (%623,)
}

def @func_3863() -> Tensor[(1176), float32] {
  @func_3636() /* ty=Tensor[(1176), float32] */
}

def @func_5668(%var_5604: Tensor[(14, 3, 10), float32], %var_5605: Tensor[(14, 3, 10), float32], %var_5617: Tensor[(14, 3, 10), float32], %var_5623: Tensor[(14, 3, 10), float32], %var_5644: Tensor[(156), bool], %var_5646: int16) -> (Tensor[(14, 3, 10), int8], Tensor[(14, 3, 10), int32], Tensor[(156), bool], Tensor[(448), float64], int16, Tensor[(16, 14, 2), float32], Tensor[(14, 3, 10), float64]) {
  %624 = cast(%var_5623, dtype="int8") /* ty=Tensor[(14, 3, 10), int8] */;
  %625 = shape_of(%var_5604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%var_5604, dtype="int8") /* ty=Tensor[(14, 3, 10), int8] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %628 = cast(%var_5617, dtype="bool") /* ty=Tensor[(14, 3, 10), bool] */;
  %629 = shape_of(%var_5604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%var_5604, dtype="bool") /* ty=Tensor[(14, 3, 10), bool] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %632 = less_equal(%630, %631) /* ty=Tensor[(14, 3, 10), bool] */;
  %633 = cast(%var_5623, dtype="int32") /* ty=Tensor[(14, 3, 10), int32] */;
  %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%632, dtype="int32") /* ty=Tensor[(14, 3, 10), int32] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %637 = cast(%var_5644, dtype="bool") /* ty=Tensor[(156), bool] */;
  %638 = cast(%var_5644, dtype="bool") /* ty=Tensor[(156), bool] */;
  %639 = cast(meta[relay.Constant][52] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %640 = cast(%var_5646, dtype="int16") /* ty=int16 */;
  %641 = reshape(%637, newshape=[6, 13, 2]) /* ty=Tensor[(6, 13, 2), bool] */;
  %642 = reshape(%638, newshape=[6, 13, 2]) /* ty=Tensor[(6, 13, 2), bool] */;
  %643 = reshape(%639, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %644 = reshape(%640, newshape=[]) /* ty=int16 */;
  %645 = @func_3755(%641, %642, %643, %644) /* ty=(Tensor[(6, 13, 2), bool], Tensor[(6, 13, 2), float64], Tensor[(16, 14, 2), bool], Tensor[(448), float64], int16, Tensor[(500), int16]) */;
  %646 = %645.2;
  %647 = cast(%646, dtype="float32") /* ty=Tensor[(16, 14, 2), float32] */;
  %648 = cast(%var_5605, dtype="float32") /* ty=Tensor[(14, 3, 10), float32] */;
  %649 = shape_of(%var_5604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%var_5604, dtype="float32") /* ty=Tensor[(14, 3, 10), float32] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %652 = divide(%650, %651) /* ty=Tensor[(14, 3, 10), float32] */;
  %653 = cast(%632, dtype="float64") /* ty=Tensor[(14, 3, 10), float64] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%652, dtype="float64") /* ty=Tensor[(14, 3, 10), float64] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %657 = subtract(%626, %627) /* ty=Tensor[(14, 3, 10), int8] */;
  %658 = multiply(%635, %636) /* ty=Tensor[(14, 3, 10), int32] */;
  %659 = rsqrt(%647) /* ty=Tensor[(16, 14, 2), float32] */;
  %660 = minimum(%655, %656) /* ty=Tensor[(14, 3, 10), float64] */;
  (%657, %658, %var_5644, meta[relay.Constant][52] /* ty=Tensor[(448), float64] */, %var_5646, %659, %660)
}

def @func_5929(%var_5876: Tensor[(7, 234), float64], %var_5896: Tensor[(792), uint32], %var_5899: Tensor[(1144), float32], %var_5907: Tensor[(3, 52), bool], %var_5909: Tensor[(539), float32], %var_5910: Tensor[(48), float64]) -> (Tensor[(10, 12, 15), bool], Tensor[(7, 234), float64], Tensor[(280), int16], Tensor[(10, 12, 15), float64], Tensor[(1, 2), bool], Tensor[(792), uint32], int64, Tensor[(1024), bool], Tensor[(1144), float32], Tensor[(10, 12, 15), int8], Tensor[(448), float64], Tensor[(3, 52), bool], Tensor[(448), float64], Tensor[(539), float32], Tensor[(48), float64]) {
  %661 = cast(%var_5876, dtype="float64") /* ty=Tensor[(7, 234), float64] */;
  %662 = cast(%var_5876, dtype="float32") /* ty=Tensor[(7, 234), float32] */;
  %663 = cast(meta[relay.Constant][53] /* ty=Tensor[(280), int16] */, dtype="int16") /* ty=Tensor[(280), int16] */;
  %664 = reshape(%661, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %665 = reshape(%662, newshape=[1638]) /* ty=Tensor[(1638), float32] */;
  %666 = reshape(%663, newshape=[280]) /* ty=Tensor[(280), int16] */;
  %667 = @func_3549(%664, %665, %666) /* ty=(Tensor[(10, 12, 15), bool], Tensor[(13, 8, 11), float32], Tensor[(1, 1144), float32], Tensor[(10, 12, 15), float64], Tensor[(13, 11, 14), bool], Tensor[(2002, 1), float32], Tensor[(1638), int64], Tensor[(7, 4, 10), int16], Tensor[(280), int16]) */;
  %668 = @func_3476() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %669 = %668.0;
  %670 = cast(meta[relay.Constant][54] /* ty=Tensor[(10, 12, 15), float64] */, dtype="uint8") /* ty=Tensor[(10, 12, 15), uint8] */;
  %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%669, dtype="uint8") /* ty=Tensor[(10, 12, 15), uint8] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %674 = minimum(%672, %673) /* ty=Tensor[(10, 12, 15), uint8] */;
  %675 = cast(%674, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
  %676 = rsqrt(%675) /* ty=Tensor[(10, 12, 15), float64] */;
  %677 = cast(%676, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
  %678 = cast(%var_5896, dtype="uint32") /* ty=Tensor[(792), uint32] */;
  %679 = cast(%var_5896, dtype="uint32") /* ty=Tensor[(792), uint32] */;
  %680 = cast(%var_5876, dtype="float64") /* ty=Tensor[(7, 234), float64] */;
  %681 = cast(4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %682 = cast(meta[relay.Constant][55] /* ty=Tensor[(1024), bool] */, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %683 = cast(%var_5899, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %684 = reshape(%678, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), uint32] */;
  %685 = reshape(%679, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), uint32] */;
  %686 = reshape(%680, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %687 = reshape(%681, newshape=[]) /* ty=int64 */;
  %688 = reshape(%682, newshape=[1024]) /* ty=Tensor[(1024), bool] */;
  %689 = reshape(%683, newshape=[1144]) /* ty=Tensor[(1144), float32] */;
  %690 = @func_1587(%684, %685, %686, %687, %688, %689) /* ty=(Tensor[(9, 11, 8), uint32], Tensor[(2), int64], Tensor[(13, 21), int8], Tensor[(1638), float64], Tensor[(1, 2), bool], Tensor[(9, 11, 8), float64], Tensor[(1144), float32], Tensor[(1024), bool], Tensor[(1144), float32], Tensor[(3, 13, 7), uint8]) */;
  %691 = cast(%669, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
  %692 = log(%691) /* ty=Tensor[(10, 12, 15), float32] */;
  %693 = cast(meta[relay.Constant][56] /* ty=Tensor[(10, 12, 15), float32] */, dtype="int8") /* ty=Tensor[(10, 12, 15), int8] */;
  %694 = shape_of(%692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%692, dtype="int8") /* ty=Tensor[(10, 12, 15), int8] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %697 = cast(%var_5907, dtype="bool") /* ty=Tensor[(3, 52), bool] */;
  %698 = cast(meta[relay.Constant][57] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %699 = cast(4 /* ty=int64 */, dtype="int16") /* ty=int16 */;
  %700 = cast(%var_5909, dtype="float32") /* ty=Tensor[(539), float32] */;
  %701 = cast(%var_5910, dtype="float64") /* ty=Tensor[(48), float64] */;
  %702 = reshape(%697, newshape=[156]) /* ty=Tensor[(156), bool] */;
  %703 = reshape(%698, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %704 = reshape(%699, newshape=[]) /* ty=int16 */;
  %705 = reshape(%700, newshape=[539]) /* ty=Tensor[(539), float32] */;
  %706 = reshape(%701, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %707 = @func_3944(%702, %703, %704, %705, %706) /* ty=(Tensor[(1176), uint16], Tensor[(156), bool], Tensor[(448), float64], int16, Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool], Tensor[(1638), float64], Tensor[(539), float32], Tensor[(468), float32], Tensor[(48), float64], Tensor[(500), float32]) */;
  %708 = %667.0;
  %709 = sigmoid(%677) /* ty=Tensor[(10, 12, 15), float64] */;
  %710 = %690.4;
  %711 = maximum(%695, %696) /* ty=Tensor[(10, 12, 15), int8] */;
  %712 = %707.2;
  (%708, %var_5876, meta[relay.Constant][53] /* ty=Tensor[(280), int16] */, %709, %710, %var_5896, 4 /* ty=int64 */, meta[relay.Constant][55] /* ty=Tensor[(1024), bool] */, %var_5899, %711, %712, %var_5907, meta[relay.Constant][57] /* ty=Tensor[(448), float64] */, %var_5909, %var_5910)
}

def @func_2119(%var_2106: Tensor[(12, 12, 12), uint8]) -> Tensor[(12, 12, 12), bool] {
  %713 = cast(%var_2106, dtype="bool") /* ty=Tensor[(12, 12, 12), bool] */;
  %714 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(12, 12, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(meta[relay.Constant][58] /* ty=Tensor[(12, 12, 12), uint8] */, dtype="bool") /* ty=Tensor[(12, 12, 12), bool] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%715, %716) /* ty=Tensor[(12, 12, 12), bool] */
}

def @func_1291(%var_1280: Tensor[(8, 6, 1), float64]) -> (Tensor[(8, 6, 1), float64], Tensor[(14, 117), float64], Tensor[(468), float32], Tensor[(1638), float64]) {
  %717 = cast(%var_1280, dtype="float64") /* ty=Tensor[(8, 6, 1), float64] */;
  %718 = cast(meta[relay.Constant][59] /* ty=Tensor[(468), float32] */, dtype="float32") /* ty=Tensor[(468), float32] */;
  %719 = cast(meta[relay.Constant][60] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %720 = reshape(%718, newshape=[12, 13, 3]) /* ty=Tensor[(12, 13, 3), float32] */;
  %721 = reshape(%719, newshape=[14, 117]) /* ty=Tensor[(14, 117), float64] */;
  %722 = @func_551(%720, %721) /* ty=(Tensor[(12, 13, 3), float32], Tensor[(14, 9, 13), uint16], Tensor[(14, 117), float64]) */;
  %723 = log2(%717) /* ty=Tensor[(8, 6, 1), float64] */;
  %724 = %722.2;
  (%723, %724, meta[relay.Constant][59] /* ty=Tensor[(468), float32] */, meta[relay.Constant][60] /* ty=Tensor[(1638), float64] */)
}

def @func_3420(%var_3403: int16) -> (Tensor[(1176), float32], Tensor[(16, 14, 2), float64], Tensor[(448), float64], int16, Tensor[(500), int16]) {
  %725 = cast(meta[relay.Constant][61] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %726 = cast(%var_3403, dtype="int16") /* ty=int16 */;
  %727 = cast(meta[relay.Constant][62] /* ty=Tensor[(500), int16] */, dtype="int16") /* ty=Tensor[(500), int16] */;
  %728 = reshape(%725, newshape=[16, 14, 2]) /* ty=Tensor[(16, 14, 2), float64] */;
  %729 = reshape(%726, newshape=[]) /* ty=int16 */;
  %730 = reshape(%727, newshape=[5, 100]) /* ty=Tensor[(5, 100), int16] */;
  %731 = @func_891(%728, %729, %730) /* ty=(Tensor[(16, 14, 2), bool], Tensor[(16, 14, 2), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(5, 100), int16]) */;
  %732 = @func_2995() /* ty=Tensor[(1176), float32] */;
  %733 = %731.1;
  (%732, %733, meta[relay.Constant][61] /* ty=Tensor[(448), float64] */, %var_3403, meta[relay.Constant][62] /* ty=Tensor[(500), int16] */)
}

def @func_4713() -> (Tensor[(1176), float32],) {
  %734 = @func_4427() /* ty=(Tensor[(1176), float32],) */;
  %735 = %734.0;
  (%735,)
}

def @func_4866(%var_4856: Tensor[(7, 15, 3), float64], %var_4857: Tensor[(7, 15, 3), float64]) -> Tensor[(7, 15, 3), float64] {
  %736 = cast(%var_4857, dtype="float64") /* ty=Tensor[(7, 15, 3), float64] */;
  %737 = shape_of(%var_4856, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%var_4856, dtype="float64") /* ty=Tensor[(7, 15, 3), float64] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  subtract(%738, %739) /* ty=Tensor[(7, 15, 3), float64] */
}

def @func_2851() -> (Tensor[(10, 12, 15), float64],) {
  %740 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
  %741 = %740.0;
  %742 = cast(%741, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
  %743 = log2(%742) /* ty=Tensor[(10, 12, 15), float64] */;
  %744 = cast(meta[relay.Constant][63] /* ty=Tensor[(10, 12, 15), float64] */, dtype="bool") /* ty=Tensor[(10, 12, 15), bool] */;
  %745 = shape_of(%743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %746 = cast(%743, dtype="bool") /* ty=Tensor[(10, 12, 15), bool] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %748 = equal(%746, %747) /* ty=Tensor[(10, 12, 15), bool] */;
  %749 = cast(%748, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
  %750 = cosh(%749) /* ty=Tensor[(10, 12, 15), float64] */;
  (%750,)
}

def @func_3549(%var_3494: Tensor[(1638), float64], %var_3525: Tensor[(1638), float32], %var_3546: Tensor[(280), int16]) -> (Tensor[(10, 12, 15), bool], Tensor[(13, 8, 11), float32], Tensor[(1, 1144), float32], Tensor[(10, 12, 15), float64], Tensor[(13, 11, 14), bool], Tensor[(2002, 1), float32], Tensor[(1638), int64], Tensor[(7, 4, 10), int16], Tensor[(280), int16]) {
  %751 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
  %752 = cast(meta[relay.Constant][64] /* ty=Tensor[(1, 1144), float32] */, dtype="float32") /* ty=Tensor[(1, 1144), float32] */;
  %753 = cast(%var_3494, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %754 = reshape(%752, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), float32] */;
  %755 = reshape(%753, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %756 = @func_422(%754, %755) /* ty=(Tensor[(13, 8, 11), float32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64]) */;
  %757 = @func_2851() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %758 = cast(meta[relay.Constant][65] /* ty=Tensor[(2002, 1), float32] */, dtype="float32") /* ty=Tensor[(2002, 1), float32] */;
  %759 = cast(meta[relay.Constant][65] /* ty=Tensor[(2002, 1), float32] */, dtype="float32") /* ty=Tensor[(2002, 1), float32] */;
  %760 = reshape(%758, newshape=[13, 11, 14]) /* ty=Tensor[(13, 11, 14), float32] */;
  %761 = reshape(%759, newshape=[13, 11, 14]) /* ty=Tensor[(13, 11, 14), float32] */;
  %762 = @func_1040(%760, %761) /* ty=(Tensor[(13, 11, 14), bool],) */;
  %763 = cast(%var_3494, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %764 = asinh(%763) /* ty=Tensor[(1638), float32] */;
  %765 = cast(%var_3525, dtype="bool") /* ty=Tensor[(1638), bool] */;
  %766 = shape_of(%764, dtype="int32") /* ty=Tensor[(1), int32] */;
  %767 = cast(%764, dtype="bool") /* ty=Tensor[(1638), bool] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?), bool] */;
  %769 = logical_and(%767, %768) /* ty=Tensor[(1638), bool] */;
  %770 = cast(%764, dtype="int64") /* ty=Tensor[(1638), int64] */;
  %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(1), int32] */;
  %772 = cast(%769, dtype="int64") /* ty=Tensor[(1638), int64] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?), int64] */;
  %774 = cast(%var_3546, dtype="int16") /* ty=Tensor[(280), int16] */;
  %775 = reshape(%774, newshape=[7, 4, 10]) /* ty=Tensor[(7, 4, 10), int16] */;
  %776 = @func_2207(%775) /* ty=(Tensor[(7, 4, 10), int16],) */;
  %777 = %751.0;
  %778 = %756.0;
  %779 = %757.0;
  %780 = %762.0;
  %781 = bitwise_or(%772, %773) /* ty=Tensor[(1638), int64] */;
  %782 = %776.0;
  (%777, %778, meta[relay.Constant][64] /* ty=Tensor[(1, 1144), float32] */, %779, %780, meta[relay.Constant][65] /* ty=Tensor[(2002, 1), float32] */, %781, %782, %var_3546)
}

def @func_3755(%var_3734: Tensor[(6, 13, 2), bool], %var_3735: Tensor[(6, 13, 2), bool], %var_3748: Tensor[(448), float64], %var_3749: int16) -> (Tensor[(6, 13, 2), bool], Tensor[(6, 13, 2), float64], Tensor[(16, 14, 2), bool], Tensor[(448), float64], int16, Tensor[(500), int16]) {
  %783 = cast(%var_3735, dtype="bool") /* ty=Tensor[(6, 13, 2), bool] */;
  %784 = shape_of(%var_3734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%var_3734, dtype="bool") /* ty=Tensor[(6, 13, 2), bool] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %787 = cast(%var_3735, dtype="float64") /* ty=Tensor[(6, 13, 2), float64] */;
  %788 = cast(%var_3748, dtype="float64") /* ty=Tensor[(448), float64] */;
  %789 = cast(%var_3749, dtype="int16") /* ty=int16 */;
  %790 = cast(meta[relay.Constant][66] /* ty=Tensor[(500), int16] */, dtype="int16") /* ty=Tensor[(500), int16] */;
  %791 = reshape(%788, newshape=[16, 14, 2]) /* ty=Tensor[(16, 14, 2), float64] */;
  %792 = reshape(%789, newshape=[]) /* ty=int16 */;
  %793 = reshape(%790, newshape=[5, 100]) /* ty=Tensor[(5, 100), int16] */;
  %794 = @func_891(%791, %792, %793) /* ty=(Tensor[(16, 14, 2), bool], Tensor[(16, 14, 2), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(5, 100), int16]) */;
  %795 = logical_and(%785, %786) /* ty=Tensor[(6, 13, 2), bool] */;
  %796 = tan(%787) /* ty=Tensor[(6, 13, 2), float64] */;
  %797 = %794.0;
  (%795, %796, %797, %var_3748, %var_3749, meta[relay.Constant][66] /* ty=Tensor[(500), int16] */)
}

def @func_3714() -> (Tensor[(1176), float32], Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), float64], Tensor[(1176), float32], Tensor[(10, 12, 15), float64]) {
  %798 = @func_2904() /* ty=(Tensor[(10, 12, 15), bool], Tensor[(7, 14, 12), bool], Tensor[(1176), float32]) */;
  %799 = @func_2958() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %800 = @func_3476() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %801 = @func_3248() /* ty=(Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool]) */;
  %802 = %798.2;
  %803 = %799.0;
  %804 = %800.0;
  %805 = @func_2995() /* ty=Tensor[(1176), float32] */;
  %806 = %801.0;
  (%802, %803, %804, %805, %806)
}

def @func_2958() -> (Tensor[(10, 12, 15), float64],) {
  %807 = @func_2851() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %808 = %807.0;
  (%808,)
}

def @func_2904() -> (Tensor[(10, 12, 15), bool], Tensor[(7, 14, 12), bool], Tensor[(1176), float32]) {
  %809 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
  %810 = cast(meta[relay.Constant][67] /* ty=Tensor[(1176), float32] */, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %811 = reshape(%810, newshape=[7, 14, 12]) /* ty=Tensor[(7, 14, 12), float32] */;
  %812 = %809.0;
  %813 = @func_2011(%811) /* ty=Tensor[(7, 14, 12), bool] */;
  (%812, %813, meta[relay.Constant][67] /* ty=Tensor[(1176), float32] */)
}

def @func_679(%var_659: int16, %var_660: Tensor[(5, 10, 10), int16]) -> Tensor[(5, 10, 10), int16] {
  %814 = cast(%var_659, dtype="int16") /* ty=int16 */;
  %815 = cast(%var_660, dtype="int16") /* ty=Tensor[(5, 10, 10), int16] */;
  multiply(%814, %815) /* ty=Tensor[(5, 10, 10), int16] */
}

def @func_2629(%var_2625: Tensor[(15, 1, 9), float32]) -> Tensor[(15, 1, 9), float32] {
  %816 = cast(%var_2625, dtype="float32") /* ty=Tensor[(15, 1, 9), float32] */;
  log10(%816) /* ty=Tensor[(15, 1, 9), float32] */
}

def @func_1136(%var_1117: Tensor[(2, 3, 9), int16], %var_1127: Tensor[(273), int8], %var_1128: Tensor[(546, 3), float64]) -> (Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(546, 3), float64], Tensor[(2, 3, 9), float32]) {
  %817 = cast(%var_1127, dtype="int8") /* ty=Tensor[(273), int8] */;
  %818 = cast(%var_1127, dtype="int8") /* ty=Tensor[(273), int8] */;
  %819 = cast(%var_1128, dtype="float64") /* ty=Tensor[(546, 3), float64] */;
  %820 = cast(%var_1127, dtype="int8") /* ty=Tensor[(273), int8] */;
  %821 = reshape(%817, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %822 = reshape(%818, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %823 = reshape(%819, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %824 = reshape(%820, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %825 = @func_213(%821, %822, %823, %824) /* ty=(Tensor[(3, 13, 7), int8], Tensor[(1, 2), int64], Tensor[(2), int64], Tensor[(1638), float64], Tensor[(3, 13, 7), bool], Tensor[(14, 9, 13), uint32]) */;
  %826 = cast(meta[relay.Constant][68] /* ty=Tensor[(2, 1, 9), int16] */, dtype="int16") /* ty=Tensor[(2, 1, 9), int16] */;
  %827 = cast(%var_1117, dtype="int16") /* ty=Tensor[(2, 3, 9), int16] */;
  %828 = left_shift(%826, %827) /* ty=Tensor[(2, 3, 9), int16] */;
  %829 = cast(%828, dtype="float32") /* ty=Tensor[(2, 3, 9), float32] */;
  %830 = %825.0;
  %831 = sqrt(%829) /* ty=Tensor[(2, 3, 9), float32] */;
  (%830, %var_1127, %var_1128, %831)
}

def @func_5823(%var_5778: Tensor[(15, 10, 4), uint8], %var_5779: Tensor[(15, 10, 4), uint8], %var_5799: Tensor[(64), uint64], %var_5801: Tensor[(896), uint64]) -> (Tensor[(15, 10, 4), bool], Tensor[(10, 12, 15), float32], Tensor[(15, 10, 4), float64], Tensor[(10, 16, 4), float64], Tensor[(64), uint64], Tensor[(2, 320), uint64], Tensor[(896), uint64], Tensor[(10, 12, 15), float64], Tensor[(1638), float64], Tensor[(280), int16]) {
  %832 = cast(%var_5779, dtype="bool") /* ty=Tensor[(15, 10, 4), bool] */;
  %833 = shape_of(%var_5778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %834 = cast(%var_5778, dtype="bool") /* ty=Tensor[(15, 10, 4), bool] */;
  %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %836 = @func_5340() /* ty=(Tensor[(10, 12, 15), float32],) */;
  %837 = cast(%var_5779, dtype="float64") /* ty=Tensor[(15, 10, 4), float64] */;
  %838 = cast(%var_5799, dtype="uint64") /* ty=Tensor[(64), uint64] */;
  %839 = cast(meta[relay.Constant][69] /* ty=Tensor[(2, 320), uint64] */, dtype="uint64") /* ty=Tensor[(2, 320), uint64] */;
  %840 = cast(%var_5801, dtype="uint64") /* ty=Tensor[(896), uint64] */;
  %841 = reshape(%838, newshape=[1, 16, 4]) /* ty=Tensor[(1, 16, 4), uint64] */;
  %842 = reshape(%839, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint64] */;
  %843 = reshape(%840, newshape=[14, 16, 4]) /* ty=Tensor[(14, 16, 4), uint64] */;
  %844 = @func_1086(%841, %842, %843) /* ty=(Tensor[(10, 16, 4), uint64], Tensor[(14, 16, 4), bool], Tensor[(10, 16, 4), float64], Tensor[(10, 16, 4), float32]) */;
  %845 = cast(meta[relay.Constant][70] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %846 = cast(meta[relay.Constant][70] /* ty=Tensor[(1638), float64] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %847 = cast(meta[relay.Constant][71] /* ty=Tensor[(280), int16] */, dtype="int16") /* ty=Tensor[(280), int16] */;
  %848 = reshape(%845, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %849 = reshape(%846, newshape=[1638]) /* ty=Tensor[(1638), float32] */;
  %850 = reshape(%847, newshape=[280]) /* ty=Tensor[(280), int16] */;
  %851 = @func_3549(%848, %849, %850) /* ty=(Tensor[(10, 12, 15), bool], Tensor[(13, 8, 11), float32], Tensor[(1, 1144), float32], Tensor[(10, 12, 15), float64], Tensor[(13, 11, 14), bool], Tensor[(2002, 1), float32], Tensor[(1638), int64], Tensor[(7, 4, 10), int16], Tensor[(280), int16]) */;
  %852 = greater_equal(%834, %835) /* ty=Tensor[(15, 10, 4), bool] */;
  %853 = %836.0;
  %854 = log10(%837) /* ty=Tensor[(15, 10, 4), float64] */;
  %855 = %844.2;
  %856 = %851.3;
  (%852, %853, %854, %855, %var_5799, meta[relay.Constant][69] /* ty=Tensor[(2, 320), uint64] */, %var_5801, %856, meta[relay.Constant][70] /* ty=Tensor[(1638), float64] */, meta[relay.Constant][71] /* ty=Tensor[(280), int16] */)
}

def @func_4326(%var_4259: Tensor[(10, 12, 15), bool], %var_4272: Tensor[(896), uint64], %var_4273: Tensor[(1176), float32], %var_4274: int16, %var_4292: Tensor[(280), int16]) -> (Tensor[(10, 12, 15), bool], Tensor[(640), uint64], Tensor[(4, 16), uint64], Tensor[(896), uint64], Tensor[(1176), float32], int16, Tensor[(250, 2), int16], Tensor[(7, 4, 10), int16], Tensor[(280), int16], Tensor[(1176), int64], Tensor[(10, 12, 15), float32]) {
  %857 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
  %858 = %857.0;
  %859 = cast(%var_4259, dtype="bool") /* ty=Tensor[(10, 12, 15), bool] */;
  %860 = shape_of(%858, dtype="int32") /* ty=Tensor[(3), int32] */;
  %861 = cast(%858, dtype="bool") /* ty=Tensor[(10, 12, 15), bool] */;
  %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %863 = cast(meta[relay.Constant][72] /* ty=Tensor[(4, 16), uint64] */, dtype="uint64") /* ty=Tensor[(4, 16), uint64] */;
  %864 = cast(%var_4272, dtype="uint64") /* ty=Tensor[(896), uint64] */;
  %865 = cast(%var_4273, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %866 = cast(%var_4274, dtype="int16") /* ty=int16 */;
  %867 = cast(meta[relay.Constant][73] /* ty=Tensor[(250, 2), int16] */, dtype="int16") /* ty=Tensor[(250, 2), int16] */;
  %868 = reshape(%863, newshape=[64]) /* ty=Tensor[(64), uint64] */;
  %869 = reshape(%864, newshape=[224, 4]) /* ty=Tensor[(224, 4), uint64] */;
  %870 = reshape(%865, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
  %871 = reshape(%866, newshape=[]) /* ty=int16 */;
  %872 = reshape(%867, newshape=[500]) /* ty=Tensor[(500), int16] */;
  %873 = @func_4137(%868, %869, %870, %871, %872) /* ty=(Tensor[(10, 12, 15), float64], Tensor[(1176), float64], Tensor[(10, 16, 4), float64], Tensor[(64), uint64], Tensor[(640), uint64], Tensor[(224, 4), uint64], Tensor[(1176), int64], Tensor[(1176), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) */;
  %874 = cast(%var_4292, dtype="int16") /* ty=Tensor[(280), int16] */;
  %875 = reshape(%874, newshape=[7, 4, 10]) /* ty=Tensor[(7, 4, 10), int16] */;
  %876 = @func_2207(%875) /* ty=(Tensor[(7, 4, 10), int16],) */;
  %877 = cast(meta[relay.Constant][72] /* ty=Tensor[(4, 16), uint64] */, dtype="uint64") /* ty=Tensor[(4, 16), uint64] */;
  %878 = cast(%var_4272, dtype="uint64") /* ty=Tensor[(896), uint64] */;
  %879 = cast(%var_4273, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %880 = cast(%var_4274, dtype="int16") /* ty=int16 */;
  %881 = cast(meta[relay.Constant][73] /* ty=Tensor[(250, 2), int16] */, dtype="int16") /* ty=Tensor[(250, 2), int16] */;
  %882 = reshape(%877, newshape=[64]) /* ty=Tensor[(64), uint64] */;
  %883 = reshape(%878, newshape=[224, 4]) /* ty=Tensor[(224, 4), uint64] */;
  %884 = reshape(%879, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
  %885 = reshape(%880, newshape=[]) /* ty=int16 */;
  %886 = reshape(%881, newshape=[500]) /* ty=Tensor[(500), int16] */;
  %887 = @func_4137(%882, %883, %884, %885, %886) /* ty=(Tensor[(10, 12, 15), float64], Tensor[(1176), float64], Tensor[(10, 16, 4), float64], Tensor[(64), uint64], Tensor[(640), uint64], Tensor[(224, 4), uint64], Tensor[(1176), int64], Tensor[(1176), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) */;
  %888 = cast(%var_4259, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
  %889 = atanh(%888) /* ty=Tensor[(10, 12, 15), float32] */;
  %890 = cast(%889, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
  %891 = logical_or(%861, %862) /* ty=Tensor[(10, 12, 15), bool] */;
  %892 = %873.4;
  %893 = %876.0;
  %894 = %887.6;
  %895 = sin(%890) /* ty=Tensor[(10, 12, 15), float32] */;
  (%891, %892, meta[relay.Constant][72] /* ty=Tensor[(4, 16), uint64] */, %var_4272, %var_4273, %var_4274, meta[relay.Constant][73] /* ty=Tensor[(250, 2), int16] */, %893, %var_4292, %894, %895)
}

def @func_422(%var_413: Tensor[(13, 8, 11), float32], %var_418: Tensor[(1638), float64]) -> (Tensor[(13, 8, 11), float32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64]) {
  %896 = cast(%var_413, dtype="float32") /* ty=Tensor[(13, 8, 11), float32] */;
  %897 = cast(%var_418, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %898 = cast(%var_418, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %899 = reshape(%897, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %900 = reshape(%898, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %901 = rsqrt(%896) /* ty=Tensor[(13, 8, 11), float32] */;
  %902 = @func_47(%899, %900) /* ty=Tensor[(14, 9, 13), uint16] */;
  (%901, %902, %var_418)
}

def @func_999(%var_969: Tensor[(8, 8, 16), bool], %var_970: Tensor[(8, 8, 16), bool], %var_977: Tensor[(1144), float32]) -> (Tensor[(8, 8, 16), bool], Tensor[(13, 8, 11), float32], Tensor[(1144), float32], Tensor[(1638, 1), float64]) {
  %903 = cast(%var_970, dtype="bool") /* ty=Tensor[(8, 8, 16), bool] */;
  %904 = shape_of(%var_969, dtype="int32") /* ty=Tensor[(3), int32] */;
  %905 = cast(%var_969, dtype="bool") /* ty=Tensor[(8, 8, 16), bool] */;
  %906 = dyn.reshape(%903, %904, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %907 = cast(%var_977, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %908 = cast(meta[relay.Constant][74] /* ty=Tensor[(1638, 1), float64] */, dtype="float64") /* ty=Tensor[(1638, 1), float64] */;
  %909 = reshape(%907, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), float32] */;
  %910 = reshape(%908, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %911 = @func_422(%909, %910) /* ty=(Tensor[(13, 8, 11), float32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64]) */;
  %912 = logical_or(%905, %906) /* ty=Tensor[(8, 8, 16), bool] */;
  %913 = %911.0;
  (%912, %913, %var_977, meta[relay.Constant][74] /* ty=Tensor[(1638, 1), float64] */)
}

def @func_6034() -> (Tensor[(10, 12, 15), float32],) {
  %914 = @func_4845() /* ty=(Tensor[(10, 12, 15), float32], Tensor[(10, 12, 15), float32]) */;
  %915 = %914.0;
  %916 = cast(%915, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
  %917 = tan(%916) /* ty=Tensor[(10, 12, 15), float32] */;
  (%917,)
}

def @func_2011(%var_2007: Tensor[(7, 14, 12), float32]) -> Tensor[(7, 14, 12), bool] {
  %918 = cast(%var_2007, dtype="bool") /* ty=Tensor[(7, 14, 12), bool] */;
  %919 = shape_of(meta[relay.Constant][75] /* ty=Tensor[(7, 14, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %920 = cast(meta[relay.Constant][75] /* ty=Tensor[(7, 14, 12), float32] */, dtype="bool") /* ty=Tensor[(7, 14, 12), bool] */;
  %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%920, %921) /* ty=Tensor[(7, 14, 12), bool] */
}

def @func_891(%var_872: Tensor[(16, 14, 2), float64], %var_884: int16, %var_885: Tensor[(5, 100), int16]) -> (Tensor[(16, 14, 2), bool], Tensor[(16, 14, 2), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(5, 100), int16]) {
  %922 = cast(%var_872, dtype="bool") /* ty=Tensor[(16, 14, 2), bool] */;
  %923 = shape_of(meta[relay.Constant][76] /* ty=Tensor[(16, 14, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %924 = cast(meta[relay.Constant][76] /* ty=Tensor[(16, 14, 2), float64] */, dtype="bool") /* ty=Tensor[(16, 14, 2), bool] */;
  %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %926 = cast(%var_872, dtype="float64") /* ty=Tensor[(16, 14, 2), float64] */;
  %927 = cast(%var_884, dtype="int16") /* ty=int16 */;
  %928 = cast(%var_885, dtype="int16") /* ty=Tensor[(5, 100), int16] */;
  %929 = reshape(%927, newshape=[]) /* ty=int16 */;
  %930 = reshape(%928, newshape=[5, 10, 10]) /* ty=Tensor[(5, 10, 10), int16] */;
  %931 = greater(%924, %925) /* ty=Tensor[(16, 14, 2), bool] */;
  %932 = sigmoid(%926) /* ty=Tensor[(16, 14, 2), float64] */;
  %933 = @func_679(%929, %930) /* ty=Tensor[(5, 10, 10), int16] */;
  (%931, %932, %933, %var_884, %var_885)
}

def @func_2207(%var_2198: Tensor[(7, 4, 10), int16]) -> (Tensor[(7, 4, 10), int16],) {
  %934 = cast(meta[relay.Constant][77] /* ty=Tensor[(7, 4, 10), int16] */, dtype="int16") /* ty=Tensor[(7, 4, 10), int16] */;
  %935 = shape_of(%var_2198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %936 = cast(%var_2198, dtype="int16") /* ty=Tensor[(7, 4, 10), int16] */;
  %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %938 = maximum(%936, %937) /* ty=Tensor[(7, 4, 10), int16] */;
  (%938,)
}

def @func_47(%var_4: Tensor[(14, 9, 13), float64], %var_5: Tensor[(14, 9, 13), float64]) -> Tensor[(14, 9, 13), uint16] {
  %939 = cast(%var_5, dtype="float64") /* ty=Tensor[(14, 9, 13), float64] */;
  %940 = shape_of(%var_4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %941 = cast(%var_4, dtype="float64") /* ty=Tensor[(14, 9, 13), float64] */;
  %942 = dyn.reshape(%939, %940, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %943 = divide(%941, %942) /* ty=Tensor[(14, 9, 13), float64] */;
  %944 = cast(%943, dtype="uint16") /* ty=Tensor[(14, 9, 13), uint16] */;
  %945 = shape_of(%var_4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %946 = cast(%var_4, dtype="uint16") /* ty=Tensor[(14, 9, 13), uint16] */;
  %947 = dyn.reshape(%944, %945, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%946, %947) /* ty=Tensor[(14, 9, 13), uint16] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5958(%var_5957: Tensor[(1144), float32]) -> (Tensor[(1176), float32], Tensor[(13, 8, 11), float32], Tensor[(1024), bool], Tensor[(1144), float32]) {
  %9 = fn (%var_5951: Tensor[(1144), float32]) -> (Tensor[(1176), float32], Tensor[(13, 8, 11), float32], Tensor[(1024), bool], Tensor[(1144), float32]) {
    %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(1024), bool] */, dtype="bool") /* ty=Tensor[(1024), bool] */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(1024), bool] */, dtype="bool") /* ty=Tensor[(1024), bool] */;
    %2 = cast(%var_5951, dtype="float32") /* ty=Tensor[(1144), float32] */;
    %3 = reshape(%0, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), bool] */;
    %4 = reshape(%1, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), bool] */;
    %5 = reshape(%2, newshape=[1144]) /* ty=Tensor[(1144), float32] */;
    %6 = @func_999(%3, %4, %5) /* ty=(Tensor[(8, 8, 16), bool], Tensor[(13, 8, 11), float32], Tensor[(1144), float32], Tensor[(1638, 1), float64]) */;
    %7 = @func_2995() /* ty=Tensor[(1176), float32] */;
    %8 = %6.1;
    (%7, %8, meta[relay.Constant][0] /* ty=Tensor[(1024), bool] */, %var_5951)
  };
  %9(%var_5957) /* ty=(Tensor[(1176), float32], Tensor[(13, 8, 11), float32], Tensor[(1024), bool], Tensor[(1144), float32]) */
}

def @func_4845() -> (Tensor[(10, 12, 15), float32], Tensor[(10, 12, 15), float32]) {
  %10 = @func_3248() /* ty=(Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool]) */;
  %11 = %10.0;
  %12 = cast(%11, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
  %13 = log10(%12) /* ty=Tensor[(10, 12, 15), float32] */;
  %14 = cast(%13, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
  %15 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%11, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %18 = cast(%13, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
  %19 = power(%16, %17) /* ty=Tensor[(10, 12, 15), float32] */;
  %20 = acos(%18) /* ty=Tensor[(10, 12, 15), float32] */;
  (%19, %20)
}

def @func_1086(%var_1064: Tensor[(1, 16, 4), uint64], %var_1065: Tensor[(10, 16, 4), uint64], %var_1069: Tensor[(14, 16, 4), uint64]) -> (Tensor[(10, 16, 4), uint64], Tensor[(14, 16, 4), bool], Tensor[(10, 16, 4), float64], Tensor[(10, 16, 4), float32]) {
  %21 = cast(%var_1064, dtype="uint64") /* ty=Tensor[(1, 16, 4), uint64] */;
  %22 = cast(%var_1065, dtype="uint64") /* ty=Tensor[(10, 16, 4), uint64] */;
  %23 = cast(%var_1064, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %24 = cast(%var_1069, dtype="bool") /* ty=Tensor[(14, 16, 4), bool] */;
  %25 = cast(%var_1065, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
  %26 = exp(%25) /* ty=Tensor[(10, 16, 4), float32] */;
  %27 = cast(%26, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
  %28 = cast(%26, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
  %29 = right_shift(%21, %22) /* ty=Tensor[(10, 16, 4), uint64] */;
  %30 = equal(%23, %24) /* ty=Tensor[(14, 16, 4), bool] */;
  %31 = sinh(%27) /* ty=Tensor[(10, 16, 4), float64] */;
  %32 = log10(%28) /* ty=Tensor[(10, 16, 4), float32] */;
  (%29, %30, %31, %32)
}

def @func_4595(%var_4593: Tensor[(10, 12, 15), float64], %var_4594: int64) -> (Tensor[(10, 12, 15), int32], Tensor[(10, 12, 15), float32], int64, Tensor[(600), bool], Tensor[(539, 1), float32], Tensor[(500), int16], int64, Tensor[(1144), float32], Tensor[(10, 12, 15), bool], Tensor[(1024), bool], Tensor[(1176), float32], Tensor[(10, 12, 15), float64]) {
  @func_4591(%var_4593, %var_4594) /* ty=(Tensor[(10, 12, 15), int32], Tensor[(10, 12, 15), float32], int64, Tensor[(600), bool], Tensor[(539, 1), float32], Tensor[(500), int16], int64, Tensor[(1144), float32], Tensor[(10, 12, 15), bool], Tensor[(1024), bool], Tensor[(1176), float32], Tensor[(10, 12, 15), float64]) */
}

def @func_2851() -> (Tensor[(10, 12, 15), float64],) {
  %33 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
  %34 = %33.0;
  %35 = cast(%34, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
  %36 = log2(%35) /* ty=Tensor[(10, 12, 15), float64] */;
  %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 12, 15), float64] */, dtype="bool") /* ty=Tensor[(10, 12, 15), bool] */;
  %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%36, dtype="bool") /* ty=Tensor[(10, 12, 15), bool] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %41 = equal(%39, %40) /* ty=Tensor[(10, 12, 15), bool] */;
  %42 = cast(%41, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
  %43 = cosh(%42) /* ty=Tensor[(10, 12, 15), float64] */;
  (%43,)
}

def @func_1140(%var_1137: Tensor[(2, 3, 9), int16], %var_1138: Tensor[(273), int8], %var_1139: Tensor[(546, 3), float64]) -> (Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(546, 3), float64], Tensor[(2, 3, 9), float32]) {
  %59 = fn (%var_1117: Tensor[(2, 3, 9), int16], %var_1127: Tensor[(273), int8], %var_1128: Tensor[(546, 3), float64]) -> (Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(546, 3), float64], Tensor[(2, 3, 9), float32]) {
    %44 = cast(%var_1127, dtype="int8") /* ty=Tensor[(273), int8] */;
    %45 = cast(%var_1127, dtype="int8") /* ty=Tensor[(273), int8] */;
    %46 = cast(%var_1128, dtype="float64") /* ty=Tensor[(546, 3), float64] */;
    %47 = cast(%var_1127, dtype="int8") /* ty=Tensor[(273), int8] */;
    %48 = reshape(%44, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
    %49 = reshape(%45, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
    %50 = reshape(%46, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
    %51 = reshape(%47, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
    %52 = @func_213(%48, %49, %50, %51) /* ty=(Tensor[(3, 13, 7), int8], Tensor[(1, 2), int64], Tensor[(2), int64], Tensor[(1638), float64], Tensor[(3, 13, 7), bool], Tensor[(14, 9, 13), uint32]) */;
    %53 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 1, 9), int16] */, dtype="int16") /* ty=Tensor[(2, 1, 9), int16] */;
    %54 = cast(%var_1117, dtype="int16") /* ty=Tensor[(2, 3, 9), int16] */;
    %55 = left_shift(%53, %54) /* ty=Tensor[(2, 3, 9), int16] */;
    %56 = cast(%55, dtype="float32") /* ty=Tensor[(2, 3, 9), float32] */;
    %57 = %52.0;
    %58 = sqrt(%56) /* ty=Tensor[(2, 3, 9), float32] */;
    (%57, %var_1127, %var_1128, %58)
  };
  %59(%var_1137, %var_1138, %var_1139) /* ty=(Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(546, 3), float64], Tensor[(2, 3, 9), float32]) */
}

def @func_2719() -> (Tensor[(10, 12, 15), bool],) {
  %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 12, 15), int8] */, dtype="bool") /* ty=Tensor[(10, 12, 15), bool] */;
  %61 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(10, 12, 15), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 12, 15), int8] */, dtype="bool") /* ty=Tensor[(10, 12, 15), bool] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %64 = greater_equal(%62, %63) /* ty=Tensor[(10, 12, 15), bool] */;
  (%64,)
}

def @func_4780() -> Tensor[(1176), float32] {
  %66 = fn () -> Tensor[(1176), float32] {
    %65 = @func_4427() /* ty=(Tensor[(1176), float32],) */;
    %65.0
  };
  %66() /* ty=Tensor[(1176), float32] */
}

def @func_5828(%var_5824: Tensor[(15, 10, 4), uint8], %var_5825: Tensor[(15, 10, 4), uint8], %var_5826: Tensor[(64), uint64], %var_5827: Tensor[(896), uint64]) -> (Tensor[(15, 10, 4), bool], Tensor[(10, 12, 15), float32], Tensor[(15, 10, 4), float64], Tensor[(10, 16, 4), float64], Tensor[(64), uint64], Tensor[(2, 320), uint64], Tensor[(896), uint64], Tensor[(10, 12, 15), float64], Tensor[(1638), float64], Tensor[(280), int16]) {
  %92 = fn (%var_5778: Tensor[(15, 10, 4), uint8], %var_5779: Tensor[(15, 10, 4), uint8], %var_5799: Tensor[(64), uint64], %var_5801: Tensor[(896), uint64]) -> (Tensor[(15, 10, 4), bool], Tensor[(10, 12, 15), float32], Tensor[(15, 10, 4), float64], Tensor[(10, 16, 4), float64], Tensor[(64), uint64], Tensor[(2, 320), uint64], Tensor[(896), uint64], Tensor[(10, 12, 15), float64], Tensor[(1638), float64], Tensor[(280), int16]) {
    %67 = cast(%var_5779, dtype="bool") /* ty=Tensor[(15, 10, 4), bool] */;
    %68 = shape_of(%var_5778, dtype="int32") /* ty=Tensor[(3), int32] */;
    %69 = cast(%var_5778, dtype="bool") /* ty=Tensor[(15, 10, 4), bool] */;
    %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %71 = @func_5340() /* ty=(Tensor[(10, 12, 15), float32],) */;
    %72 = cast(%var_5779, dtype="float64") /* ty=Tensor[(15, 10, 4), float64] */;
    %73 = cast(%var_5799, dtype="uint64") /* ty=Tensor[(64), uint64] */;
    %74 = cast(meta[relay.Constant][5] /* ty=Tensor[(2, 320), uint64] */, dtype="uint64") /* ty=Tensor[(2, 320), uint64] */;
    %75 = cast(%var_5801, dtype="uint64") /* ty=Tensor[(896), uint64] */;
    %76 = reshape(%73, newshape=[1, 16, 4]) /* ty=Tensor[(1, 16, 4), uint64] */;
    %77 = reshape(%74, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint64] */;
    %78 = reshape(%75, newshape=[14, 16, 4]) /* ty=Tensor[(14, 16, 4), uint64] */;
    %79 = @func_1086(%76, %77, %78) /* ty=(Tensor[(10, 16, 4), uint64], Tensor[(14, 16, 4), bool], Tensor[(10, 16, 4), float64], Tensor[(10, 16, 4), float32]) */;
    %80 = cast(meta[relay.Constant][6] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %81 = cast(meta[relay.Constant][6] /* ty=Tensor[(1638), float64] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
    %82 = cast(meta[relay.Constant][7] /* ty=Tensor[(280), int16] */, dtype="int16") /* ty=Tensor[(280), int16] */;
    %83 = reshape(%80, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
    %84 = reshape(%81, newshape=[1638]) /* ty=Tensor[(1638), float32] */;
    %85 = reshape(%82, newshape=[280]) /* ty=Tensor[(280), int16] */;
    %86 = @func_3549(%83, %84, %85) /* ty=(Tensor[(10, 12, 15), bool], Tensor[(13, 8, 11), float32], Tensor[(1, 1144), float32], Tensor[(10, 12, 15), float64], Tensor[(13, 11, 14), bool], Tensor[(2002, 1), float32], Tensor[(1638), int64], Tensor[(7, 4, 10), int16], Tensor[(280), int16]) */;
    %87 = greater_equal(%69, %70) /* ty=Tensor[(15, 10, 4), bool] */;
    %88 = %71.0;
    %89 = log10(%72) /* ty=Tensor[(15, 10, 4), float64] */;
    %90 = %79.2;
    %91 = %86.3;
    (%87, %88, %89, %90, %var_5799, meta[relay.Constant][5] /* ty=Tensor[(2, 320), uint64] */, %var_5801, %91, meta[relay.Constant][6] /* ty=Tensor[(1638), float64] */, meta[relay.Constant][7] /* ty=Tensor[(280), int16] */)
  };
  %92(%var_5824, %var_5825, %var_5826, %var_5827) /* ty=(Tensor[(15, 10, 4), bool], Tensor[(10, 12, 15), float32], Tensor[(15, 10, 4), float64], Tensor[(10, 16, 4), float64], Tensor[(64), uint64], Tensor[(2, 320), uint64], Tensor[(896), uint64], Tensor[(10, 12, 15), float64], Tensor[(1638), float64], Tensor[(280), int16]) */
}

def @func_2781(%var_2779: Tensor[(1024), bool]) -> (Tensor[(10, 12, 15), bool], Tensor[(1638, 1), float64], Tensor[(1144), float32], Tensor[(1024), float32]) {
  @func_2778(%var_2779) /* ty=(Tensor[(10, 12, 15), bool], Tensor[(1638, 1), float64], Tensor[(1144), float32], Tensor[(1024), float32]) */
}

def @func_2778(%var_2755: Tensor[(1024), bool]) -> (Tensor[(10, 12, 15), bool], Tensor[(1638, 1), float64], Tensor[(1144), float32], Tensor[(1024), float32]) {
  %93 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
  %94 = cast(%var_2755, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %95 = cast(%var_2755, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %96 = cast(meta[relay.Constant][8] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %97 = reshape(%94, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), bool] */;
  %98 = reshape(%95, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), bool] */;
  %99 = reshape(%96, newshape=[1144]) /* ty=Tensor[(1144), float32] */;
  %100 = @func_999(%97, %98, %99) /* ty=(Tensor[(8, 8, 16), bool], Tensor[(13, 8, 11), float32], Tensor[(1144), float32], Tensor[(1638, 1), float64]) */;
  %101 = cast(%var_2755, dtype="float32") /* ty=Tensor[(1024), float32] */;
  %102 = %93.0;
  %103 = %100.3;
  %104 = tan(%101) /* ty=Tensor[(1024), float32] */;
  (%102, %103, meta[relay.Constant][8] /* ty=Tensor[(1144), float32] */, %104)
}

def @func_1587(%var_1506: Tensor[(9, 11, 8), uint32], %var_1507: Tensor[(9, 11, 8), uint32], %var_1516: Tensor[(1638), float64], %var_1543: int64, %var_1554: Tensor[(1024), bool], %var_1555: Tensor[(1144), float32]) -> (Tensor[(9, 11, 8), uint32], Tensor[(2), int64], Tensor[(13, 21), int8], Tensor[(1638), float64], Tensor[(1, 2), bool], Tensor[(9, 11, 8), float64], Tensor[(1144), float32], Tensor[(1024), bool], Tensor[(1144), float32], Tensor[(3, 13, 7), uint8]) {
  %105 = cast(%var_1507, dtype="uint32") /* ty=Tensor[(9, 11, 8), uint32] */;
  %106 = shape_of(%var_1506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_1506, dtype="uint32") /* ty=Tensor[(9, 11, 8), uint32] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %109 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 21), int8] */, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %110 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 21), int8] */, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %111 = cast(%var_1516, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %112 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 21), int8] */, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %113 = reshape(%109, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %114 = reshape(%110, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %115 = reshape(%111, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %116 = reshape(%112, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %117 = @func_213(%113, %114, %115, %116) /* ty=(Tensor[(3, 13, 7), int8], Tensor[(1, 2), int64], Tensor[(2), int64], Tensor[(1638), float64], Tensor[(3, 13, 7), bool], Tensor[(14, 9, 13), uint32]) */;
  %118 = cast(%var_1543, dtype="int64") /* ty=int64 */;
  %119 = %117.2;
  %120 = cast(%119, dtype="int64") /* ty=Tensor[(2), int64] */;
  %121 = reshape(%118, newshape=[]) /* ty=int64 */;
  %122 = reshape(%120, newshape=[1, 2]) /* ty=Tensor[(1, 2), int64] */;
  %123 = @func_132(%121, %122) /* ty=(Tensor[(1, 2), int64], Tensor[(1, 2), bool]) */;
  %124 = cast(%var_1506, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
  %125 = exp(%124) /* ty=Tensor[(9, 11, 8), float64] */;
  %126 = cast(%125, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
  %127 = cast(%var_1554, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %128 = cast(%var_1554, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %129 = cast(%var_1555, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %130 = reshape(%127, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), bool] */;
  %131 = reshape(%128, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), bool] */;
  %132 = reshape(%129, newshape=[1144]) /* ty=Tensor[(1144), float32] */;
  %133 = @func_999(%130, %131, %132) /* ty=(Tensor[(8, 8, 16), bool], Tensor[(13, 8, 11), float32], Tensor[(1144), float32], Tensor[(1638, 1), float64]) */;
  %134 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 21), int8] */, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %135 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 21), int8] */, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %136 = cast(%var_1516, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %137 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 21), int8] */, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %138 = reshape(%134, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %139 = reshape(%135, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %140 = reshape(%136, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %141 = reshape(%137, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %142 = @func_213(%138, %139, %140, %141) /* ty=(Tensor[(3, 13, 7), int8], Tensor[(1, 2), int64], Tensor[(2), int64], Tensor[(1638), float64], Tensor[(3, 13, 7), bool], Tensor[(14, 9, 13), uint32]) */;
  %143 = %142.4;
  %144 = cast(%143, dtype="uint8") /* ty=Tensor[(3, 13, 7), uint8] */;
  %145 = cast(%var_1543, dtype="uint8") /* ty=uint8 */;
  %146 = bitwise_or(%107, %108) /* ty=Tensor[(9, 11, 8), uint32] */;
  %147 = %123.1;
  %148 = acosh(%126) /* ty=Tensor[(9, 11, 8), float64] */;
  %149 = %133.2;
  %150 = add(%144, %145) /* ty=Tensor[(3, 13, 7), uint8] */;
  (%146, %119, meta[relay.Constant][9] /* ty=Tensor[(13, 21), int8] */, %var_1516, %147, %148, %149, %var_1554, %var_1555, %150)
}

def @func_2209(%var_2208: Tensor[(7, 4, 10), int16]) -> (Tensor[(7, 4, 10), int16],) {
  %156 = fn (%var_2198: Tensor[(7, 4, 10), int16]) -> (Tensor[(7, 4, 10), int16],) {
    %151 = cast(meta[relay.Constant][10] /* ty=Tensor[(7, 4, 10), int16] */, dtype="int16") /* ty=Tensor[(7, 4, 10), int16] */;
    %152 = shape_of(%var_2198, dtype="int32") /* ty=Tensor[(3), int32] */;
    %153 = cast(%var_2198, dtype="int16") /* ty=Tensor[(7, 4, 10), int16] */;
    %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %155 = maximum(%153, %154) /* ty=Tensor[(7, 4, 10), int16] */;
    (%155,)
  };
  %156(%var_2208) /* ty=(Tensor[(7, 4, 10), int16],) */
}

def @func_1291(%var_1280: Tensor[(8, 6, 1), float64]) -> (Tensor[(8, 6, 1), float64], Tensor[(14, 117), float64], Tensor[(468), float32], Tensor[(1638), float64]) {
  %157 = cast(%var_1280, dtype="float64") /* ty=Tensor[(8, 6, 1), float64] */;
  %158 = cast(meta[relay.Constant][11] /* ty=Tensor[(468), float32] */, dtype="float32") /* ty=Tensor[(468), float32] */;
  %159 = cast(meta[relay.Constant][12] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %160 = reshape(%158, newshape=[12, 13, 3]) /* ty=Tensor[(12, 13, 3), float32] */;
  %161 = reshape(%159, newshape=[14, 117]) /* ty=Tensor[(14, 117), float64] */;
  %162 = @func_551(%160, %161) /* ty=(Tensor[(12, 13, 3), float32], Tensor[(14, 9, 13), uint16], Tensor[(14, 117), float64]) */;
  %163 = log2(%157) /* ty=Tensor[(8, 6, 1), float64] */;
  %164 = %162.2;
  (%163, %164, meta[relay.Constant][11] /* ty=Tensor[(468), float32] */, meta[relay.Constant][12] /* ty=Tensor[(1638), float64] */)
}

def @func_3249() -> (Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool]) {
  %169 = fn () -> (Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool]) {
    %165 = @func_2958() /* ty=(Tensor[(10, 12, 15), float64],) */;
    %166 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
    %167 = %165.0;
    %168 = %166.0;
    (%167, %168)
  };
  %169() /* ty=(Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool]) */
}

def @func_4326(%var_4259: Tensor[(10, 12, 15), bool], %var_4272: Tensor[(896), uint64], %var_4273: Tensor[(1176), float32], %var_4274: int16, %var_4292: Tensor[(280), int16]) -> (Tensor[(10, 12, 15), bool], Tensor[(640), uint64], Tensor[(4, 16), uint64], Tensor[(896), uint64], Tensor[(1176), float32], int16, Tensor[(250, 2), int16], Tensor[(7, 4, 10), int16], Tensor[(280), int16], Tensor[(1176), int64], Tensor[(10, 12, 15), float32]) {
  %170 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
  %171 = %170.0;
  %172 = cast(%var_4259, dtype="bool") /* ty=Tensor[(10, 12, 15), bool] */;
  %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%171, dtype="bool") /* ty=Tensor[(10, 12, 15), bool] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %176 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 16), uint64] */, dtype="uint64") /* ty=Tensor[(4, 16), uint64] */;
  %177 = cast(%var_4272, dtype="uint64") /* ty=Tensor[(896), uint64] */;
  %178 = cast(%var_4273, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %179 = cast(%var_4274, dtype="int16") /* ty=int16 */;
  %180 = cast(meta[relay.Constant][14] /* ty=Tensor[(250, 2), int16] */, dtype="int16") /* ty=Tensor[(250, 2), int16] */;
  %181 = reshape(%176, newshape=[64]) /* ty=Tensor[(64), uint64] */;
  %182 = reshape(%177, newshape=[224, 4]) /* ty=Tensor[(224, 4), uint64] */;
  %183 = reshape(%178, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
  %184 = reshape(%179, newshape=[]) /* ty=int16 */;
  %185 = reshape(%180, newshape=[500]) /* ty=Tensor[(500), int16] */;
  %186 = @func_4137(%181, %182, %183, %184, %185) /* ty=(Tensor[(10, 12, 15), float64], Tensor[(1176), float64], Tensor[(10, 16, 4), float64], Tensor[(64), uint64], Tensor[(640), uint64], Tensor[(224, 4), uint64], Tensor[(1176), int64], Tensor[(1176), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) */;
  %187 = cast(%var_4292, dtype="int16") /* ty=Tensor[(280), int16] */;
  %188 = reshape(%187, newshape=[7, 4, 10]) /* ty=Tensor[(7, 4, 10), int16] */;
  %189 = @func_2207(%188) /* ty=(Tensor[(7, 4, 10), int16],) */;
  %190 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 16), uint64] */, dtype="uint64") /* ty=Tensor[(4, 16), uint64] */;
  %191 = cast(%var_4272, dtype="uint64") /* ty=Tensor[(896), uint64] */;
  %192 = cast(%var_4273, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %193 = cast(%var_4274, dtype="int16") /* ty=int16 */;
  %194 = cast(meta[relay.Constant][14] /* ty=Tensor[(250, 2), int16] */, dtype="int16") /* ty=Tensor[(250, 2), int16] */;
  %195 = reshape(%190, newshape=[64]) /* ty=Tensor[(64), uint64] */;
  %196 = reshape(%191, newshape=[224, 4]) /* ty=Tensor[(224, 4), uint64] */;
  %197 = reshape(%192, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
  %198 = reshape(%193, newshape=[]) /* ty=int16 */;
  %199 = reshape(%194, newshape=[500]) /* ty=Tensor[(500), int16] */;
  %200 = @func_4137(%195, %196, %197, %198, %199) /* ty=(Tensor[(10, 12, 15), float64], Tensor[(1176), float64], Tensor[(10, 16, 4), float64], Tensor[(64), uint64], Tensor[(640), uint64], Tensor[(224, 4), uint64], Tensor[(1176), int64], Tensor[(1176), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) */;
  %201 = cast(%var_4259, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
  %202 = atanh(%201) /* ty=Tensor[(10, 12, 15), float32] */;
  %203 = cast(%202, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
  %204 = logical_or(%174, %175) /* ty=Tensor[(10, 12, 15), bool] */;
  %205 = %186.4;
  %206 = %189.0;
  %207 = %200.6;
  %208 = sin(%203) /* ty=Tensor[(10, 12, 15), float32] */;
  (%204, %205, meta[relay.Constant][13] /* ty=Tensor[(4, 16), uint64] */, %var_4272, %var_4273, %var_4274, meta[relay.Constant][14] /* ty=Tensor[(250, 2), int16] */, %206, %var_4292, %207, %208)
}

def @func_136(%var_134: int64, %var_135: Tensor[(1, 2), int64]) -> (Tensor[(1, 2), int64], Tensor[(1, 2), bool]) {
  @func_132(%var_134, %var_135) /* ty=(Tensor[(1, 2), int64], Tensor[(1, 2), bool]) */
}

def @func_2687(%var_2681: Tensor[(16, 10, 3), float32], %var_2682: Tensor[(468, 1), float32], %var_2683: Tensor[(1638), float64], %var_2684: int16, %var_2685: Tensor[(500), int16], %var_2686: Tensor[(2, 224), float64]) -> (Tensor[(16, 10, 3), float32], Tensor[(14, 117), float64], Tensor[(468, 1), float32], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16], Tensor[(16, 14, 2), bool], Tensor[(2, 224), float64]) {
  @func_2679(%var_2681, %var_2682, %var_2683, %var_2684, %var_2685, %var_2686) /* ty=(Tensor[(16, 10, 3), float32], Tensor[(14, 117), float64], Tensor[(468, 1), float32], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16], Tensor[(16, 14, 2), bool], Tensor[(2, 224), float64]) */
}

def @func_5176(%var_5102: Tensor[(280), int16], %var_5146: Tensor[(1, 1144), float32]) -> (Tensor[(10, 12, 15), bool], Tensor[(1638), float64], Tensor[(280), int16], Tensor[(7, 14, 12), bool], Tensor[(468), float32], Tensor[(48), float64], Tensor[(?, 1144), uint64]) {
  %209 = @func_3248() /* ty=(Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool]) */;
  %210 = @func_2904() /* ty=(Tensor[(10, 12, 15), bool], Tensor[(7, 14, 12), bool], Tensor[(1176), float32]) */;
  %211 = cast(meta[relay.Constant][16] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %212 = reshape(%211, newshape=[8, 6, 1]) /* ty=Tensor[(8, 6, 1), float64] */;
  %213 = @func_1291(%212) /* ty=(Tensor[(8, 6, 1), float64], Tensor[(14, 117), float64], Tensor[(468), float32], Tensor[(1638), float64]) */;
  %214 = cast(meta[relay.Constant][15] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %215 = cast(meta[relay.Constant][15] /* ty=Tensor[(1638), float64] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %216 = cast(%var_5102, dtype="int16") /* ty=Tensor[(280), int16] */;
  %217 = reshape(%214, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %218 = reshape(%215, newshape=[1638]) /* ty=Tensor[(1638), float32] */;
  %219 = reshape(%216, newshape=[280]) /* ty=Tensor[(280), int16] */;
  %220 = @func_3549(%217, %218, %219) /* ty=(Tensor[(10, 12, 15), bool], Tensor[(13, 8, 11), float32], Tensor[(1, 1144), float32], Tensor[(10, 12, 15), float64], Tensor[(13, 11, 14), bool], Tensor[(2002, 1), float32], Tensor[(1638), int64], Tensor[(7, 4, 10), int16], Tensor[(280), int16]) */;
  %221 = %220.2;
  %222 = cast(%var_5146, dtype="uint8") /* ty=Tensor[(1, 1144), uint8] */;
  %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(2), int32] */;
  %224 = cast(%221, dtype="uint8") /* ty=Tensor[(1, 1144), uint8] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %226 = right_shift(%224, %225) /* ty=Tensor[(?, 1144), uint8] */;
  %227 = cast(%221, dtype="uint64") /* ty=Tensor[(1, 1144), uint64] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(2), int32] */;
  %229 = cast(%226, dtype="uint64") /* ty=Tensor[(?, 1144), uint64] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %231 = %209.1;
  %232 = %210.1;
  %233 = %213.2;
  %234 = maximum(%229, %230) /* ty=Tensor[(?, 1144), uint64] */;
  (%231, meta[relay.Constant][15] /* ty=Tensor[(1638), float64] */, %var_5102, %232, %233, meta[relay.Constant][16] /* ty=Tensor[(48), float64] */, %234)
}

def @func_5231(%var_5229: Tensor[(280), int16]) -> (Tensor[(1176), float32], Tensor[(280), int16], Tensor[(1638), float64], Tensor[(280), int16]) {
  @func_5228(%var_5229) /* ty=(Tensor[(1176), float32], Tensor[(280), int16], Tensor[(1638), float64], Tensor[(280), int16]) */
}

def @func_1091(%var_1088: Tensor[(1, 16, 4), uint64], %var_1089: Tensor[(10, 16, 4), uint64], %var_1090: Tensor[(14, 16, 4), uint64]) -> (Tensor[(10, 16, 4), uint64], Tensor[(14, 16, 4), bool], Tensor[(10, 16, 4), float64], Tensor[(10, 16, 4), float32]) {
  @func_1086(%var_1088, %var_1089, %var_1090) /* ty=(Tensor[(10, 16, 4), uint64], Tensor[(14, 16, 4), bool], Tensor[(10, 16, 4), float64], Tensor[(10, 16, 4), float32]) */
}

def @func_4702() -> Tensor[(1176), float32] {
  %236 = fn () -> Tensor[(1176), float32] {
    %235 = @func_4427() /* ty=(Tensor[(1176), float32],) */;
    %235.0
  };
  %236() /* ty=Tensor[(1176), float32] */
}

def @func_3616(%var_3615: Tensor[(280), int16]) -> (Tensor[(10, 12, 15), float64], Tensor[(7, 4, 10), int16], Tensor[(280), int16], Tensor[(1638), float64], Tensor[(7, 6), float32], Tensor[(1144), float32], Tensor[(468), float32], Tensor[(273), int8]) {
  %253 = fn (%var_3599: Tensor[(280), int16]) -> (Tensor[(10, 12, 15), float64], Tensor[(7, 4, 10), int16], Tensor[(280), int16], Tensor[(1638), float64], Tensor[(7, 6), float32], Tensor[(1144), float32], Tensor[(468), float32], Tensor[(273), int8]) {
    %237 = @func_2851() /* ty=(Tensor[(10, 12, 15), float64],) */;
    %238 = cast(%var_3599, dtype="int16") /* ty=Tensor[(280), int16] */;
    %239 = reshape(%238, newshape=[7, 4, 10]) /* ty=Tensor[(7, 4, 10), int16] */;
    %240 = @func_2207(%239) /* ty=(Tensor[(7, 4, 10), int16],) */;
    %241 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 6), float32] */;
    %242 = cast(meta[relay.Constant][18] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
    %243 = cast(meta[relay.Constant][19] /* ty=Tensor[(468), float32] */, dtype="float32") /* ty=Tensor[(468), float32] */;
    %244 = cast(meta[relay.Constant][20] /* ty=Tensor[(273), int8] */, dtype="int8") /* ty=Tensor[(273), int8] */;
    %245 = reshape(%241, newshape=[14, 3]) /* ty=Tensor[(14, 3), float32] */;
    %246 = reshape(%242, newshape=[1144]) /* ty=Tensor[(1144), float32] */;
    %247 = reshape(%243, newshape=[468]) /* ty=Tensor[(468), float32] */;
    %248 = reshape(%244, newshape=[273]) /* ty=Tensor[(273), int8] */;
    %249 = @func_1942(%245, %246, %247, %248) /* ty=(Tensor[(1638), float64], Tensor[(1144), float32], Tensor[(1638), float64], Tensor[(14, 3), bool], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16], Tensor[(12, 13, 3), float32], Tensor[(468), float32], Tensor[(5, 10, 10), int16], Tensor[(600), bool], Tensor[(539), float32], Tensor[(1638), float64], Tensor[(273), int8]) */;
    %250 = %237.0;
    %251 = %240.0;
    %252 = %249.12;
    (%250, %251, %var_3599, %252, meta[relay.Constant][17] /* ty=Tensor[(7, 6), float32] */, meta[relay.Constant][18] /* ty=Tensor[(1144), float32] */, meta[relay.Constant][19] /* ty=Tensor[(468), float32] */, meta[relay.Constant][20] /* ty=Tensor[(273), int8] */)
  };
  %253(%var_3615) /* ty=(Tensor[(10, 12, 15), float64], Tensor[(7, 4, 10), int16], Tensor[(280), int16], Tensor[(1638), float64], Tensor[(7, 6), float32], Tensor[(1144), float32], Tensor[(468), float32], Tensor[(273), int8]) */
}

def @func_1947(%var_1943: Tensor[(14, 3), float32], %var_1944: Tensor[(1144), float32], %var_1945: Tensor[(468), float32], %var_1946: Tensor[(273), int8]) -> (Tensor[(1638), float64], Tensor[(1144), float32], Tensor[(1638), float64], Tensor[(14, 3), bool], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16], Tensor[(12, 13, 3), float32], Tensor[(468), float32], Tensor[(5, 10, 10), int16], Tensor[(600), bool], Tensor[(539), float32], Tensor[(1638), float64], Tensor[(273), int8]) {
  %302 = fn (%var_1885: Tensor[(14, 3), float32], %var_1892: Tensor[(1144), float32], %var_1924: Tensor[(468), float32], %var_1938: Tensor[(273), int8]) -> (Tensor[(1638), float64], Tensor[(1144), float32], Tensor[(1638), float64], Tensor[(14, 3), bool], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16], Tensor[(12, 13, 3), float32], Tensor[(468), float32], Tensor[(5, 10, 10), int16], Tensor[(600), bool], Tensor[(539), float32], Tensor[(1638), float64], Tensor[(273), int8]) {
    %254 = cast(%var_1892, dtype="float32") /* ty=Tensor[(1144), float32] */;
    %255 = cast(meta[relay.Constant][21] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %256 = reshape(%254, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), float32] */;
    %257 = reshape(%255, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
    %258 = @func_422(%256, %257) /* ty=(Tensor[(13, 8, 11), float32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64]) */;
    %259 = cast(%var_1885, dtype="float32") /* ty=Tensor[(14, 3), float32] */;
    %260 = acos(%259) /* ty=Tensor[(14, 3), float32] */;
    %261 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 3), float32] */, dtype="bool") /* ty=Tensor[(14, 3), bool] */;
    %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(2), int32] */;
    %263 = cast(%260, dtype="bool") /* ty=Tensor[(14, 3), bool] */;
    %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %265 = cast(meta[relay.Constant][23] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %266 = cast(meta[relay.Constant][24] /* ty=Tensor[(500), int16] */, dtype="int16") /* ty=Tensor[(500), int16] */;
    %267 = reshape(%265, newshape=[]) /* ty=int16 */;
    %268 = reshape(%266, newshape=[5, 10, 10]) /* ty=Tensor[(5, 10, 10), int16] */;
    %269 = cast(%var_1924, dtype="float32") /* ty=Tensor[(468), float32] */;
    %270 = cast(meta[relay.Constant][21] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %271 = reshape(%269, newshape=[12, 13, 3]) /* ty=Tensor[(12, 13, 3), float32] */;
    %272 = reshape(%270, newshape=[14, 117]) /* ty=Tensor[(14, 117), float64] */;
    %273 = @func_551(%271, %272) /* ty=(Tensor[(12, 13, 3), float32], Tensor[(14, 9, 13), uint16], Tensor[(14, 117), float64]) */;
    %274 = cast(meta[relay.Constant][25] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
    %275 = cast(meta[relay.Constant][25] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
    %276 = cast(meta[relay.Constant][26] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
    %277 = cast(meta[relay.Constant][24] /* ty=Tensor[(500), int16] */, dtype="int16") /* ty=Tensor[(500), int16] */;
    %278 = cast(meta[relay.Constant][23] /* ty=int16 */, dtype="int64") /* ty=int64 */;
    %279 = cast(%var_1892, dtype="float32") /* ty=Tensor[(1144), float32] */;
    %280 = reshape(%274, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), bool] */;
    %281 = reshape(%275, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), bool] */;
    %282 = reshape(%276, newshape=[539, 1]) /* ty=Tensor[(539, 1), float32] */;
    %283 = reshape(%277, newshape=[500]) /* ty=Tensor[(500), int16] */;
    %284 = reshape(%278, newshape=[]) /* ty=int64 */;
    %285 = reshape(%279, newshape=[11, 104]) /* ty=Tensor[(11, 104), float32] */;
    %286 = @func_1767(%280, %281, %282, %283, %284, %285) /* ty=(Tensor[(5, 10, 10), int16], Tensor[(539, 1), float32], Tensor[(500), int16], Tensor[(13, 21), int8], Tensor[(792), uint32], Tensor[(1, 1638), float64], int64, Tensor[(1024), bool], Tensor[(11, 104), float32], Tensor[(14, 9, 13), uint32], Tensor[(15, 4, 10), float32], Tensor[(13, 8, 11), float32]) */;
    %287 = cast(%var_1938, dtype="int8") /* ty=Tensor[(273), int8] */;
    %288 = cast(%var_1938, dtype="int8") /* ty=Tensor[(273), int8] */;
    %289 = cast(meta[relay.Constant][21] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %290 = cast(%var_1938, dtype="int8") /* ty=Tensor[(273), int8] */;
    %291 = reshape(%287, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
    %292 = reshape(%288, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
    %293 = reshape(%289, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
    %294 = reshape(%290, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
    %295 = @func_213(%291, %292, %293, %294) /* ty=(Tensor[(3, 13, 7), int8], Tensor[(1, 2), int64], Tensor[(2), int64], Tensor[(1638), float64], Tensor[(3, 13, 7), bool], Tensor[(14, 9, 13), uint32]) */;
    %296 = %258.2;
    %297 = greater_equal(%263, %264) /* ty=Tensor[(14, 3), bool] */;
    %298 = @func_679(%267, %268) /* ty=Tensor[(5, 10, 10), int16] */;
    %299 = %273.0;
    %300 = %286.0;
    %301 = %295.3;
    (%296, %var_1892, meta[relay.Constant][21] /* ty=Tensor[(1638), float64] */, %297, %298, meta[relay.Constant][23] /* ty=int16 */, meta[relay.Constant][24] /* ty=Tensor[(500), int16] */, %299, %var_1924, %300, meta[relay.Constant][25] /* ty=Tensor[(600), bool] */, meta[relay.Constant][26] /* ty=Tensor[(539), float32] */, %301, %var_1938)
  };
  %302(%var_1943, %var_1944, %var_1945, %var_1946) /* ty=(Tensor[(1638), float64], Tensor[(1144), float32], Tensor[(1638), float64], Tensor[(14, 3), bool], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16], Tensor[(12, 13, 3), float32], Tensor[(468), float32], Tensor[(5, 10, 10), int16], Tensor[(600), bool], Tensor[(539), float32], Tensor[(1638), float64], Tensor[(273), int8]) */
}

def @func_5384(%var_5383: Tensor[(500), int16]) -> (Tensor[(10, 12, 15), float64], Tensor[(539), float32], Tensor[(539), float32], Tensor[(500), int16], Tensor[(3, 13, 7), int8]) {
  %324 = fn (%var_5369: Tensor[(500), int16]) -> (Tensor[(10, 12, 15), float64], Tensor[(539), float32], Tensor[(539), float32], Tensor[(500), int16], Tensor[(3, 13, 7), int8]) {
    %303 = @func_2958() /* ty=(Tensor[(10, 12, 15), float64],) */;
    %304 = %303.0;
    %305 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 12, 15), float64] */, dtype="int16") /* ty=Tensor[(10, 12, 15), int16] */;
    %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
    %307 = cast(%304, dtype="int16") /* ty=Tensor[(10, 12, 15), int16] */;
    %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %309 = logical_xor(%307, %308) /* ty=Tensor[(10, 12, 15), int16] */;
    %310 = cast(%309, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
    %311 = cast(meta[relay.Constant][28] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
    %312 = cast(%var_5369, dtype="int16") /* ty=Tensor[(500), int16] */;
    %313 = reshape(%311, newshape=[539]) /* ty=Tensor[(539), float32] */;
    %314 = reshape(%312, newshape=[500]) /* ty=Tensor[(500), int16] */;
    %315 = @func_3345(%313, %314) /* ty=(Tensor[(10, 12, 15), float64], Tensor[(539), float32], Tensor[(500), int16], Tensor[(5, 10, 10), int64]) */;
    %316 = %315.1;
    %317 = cast(%316, dtype="float32") /* ty=Tensor[(539), float32] */;
    %318 = cast(%var_5369, dtype="int16") /* ty=Tensor[(500), int16] */;
    %319 = reshape(%317, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
    %320 = reshape(%318, newshape=[500]) /* ty=Tensor[(500), int16] */;
    %321 = @func_847(%319, %320) /* ty=(Tensor[(11, 7, 7), float32], Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) */;
    %322 = cos(%310) /* ty=Tensor[(10, 12, 15), float64] */;
    %323 = %321.1;
    (%322, %316, meta[relay.Constant][28] /* ty=Tensor[(539), float32] */, %var_5369, %323)
  };
  %324(%var_5383) /* ty=(Tensor[(10, 12, 15), float64], Tensor[(539), float32], Tensor[(539), float32], Tensor[(500), int16], Tensor[(3, 13, 7), int8]) */
}

def @func_50(%var_48: Tensor[(14, 9, 13), float64], %var_49: Tensor[(14, 9, 13), float64]) -> Tensor[(14, 9, 13), uint16] {
  %334 = fn (%var_4: Tensor[(14, 9, 13), float64], %var_5: Tensor[(14, 9, 13), float64]) -> Tensor[(14, 9, 13), uint16] {
    %325 = cast(%var_5, dtype="float64") /* ty=Tensor[(14, 9, 13), float64] */;
    %326 = shape_of(%var_4, dtype="int32") /* ty=Tensor[(3), int32] */;
    %327 = cast(%var_4, dtype="float64") /* ty=Tensor[(14, 9, 13), float64] */;
    %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %329 = divide(%327, %328) /* ty=Tensor[(14, 9, 13), float64] */;
    %330 = cast(%329, dtype="uint16") /* ty=Tensor[(14, 9, 13), uint16] */;
    %331 = shape_of(%var_4, dtype="int32") /* ty=Tensor[(3), int32] */;
    %332 = cast(%var_4, dtype="uint16") /* ty=Tensor[(14, 9, 13), uint16] */;
    %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    bitwise_or(%332, %333) /* ty=Tensor[(14, 9, 13), uint16] */
  };
  %334(%var_48, %var_49) /* ty=Tensor[(14, 9, 13), uint16] */
}

def @func_1767(%var_1693: Tensor[(15, 4, 10), bool], %var_1694: Tensor[(15, 4, 10), bool], %var_1707: Tensor[(539, 1), float32], %var_1708: Tensor[(500), int16], %var_1714: int64, %var_1716: Tensor[(11, 104), float32]) -> (Tensor[(5, 10, 10), int16], Tensor[(539, 1), float32], Tensor[(500), int16], Tensor[(13, 21), int8], Tensor[(792), uint32], Tensor[(1, 1638), float64], int64, Tensor[(1024), bool], Tensor[(11, 104), float32], Tensor[(14, 9, 13), uint32], Tensor[(15, 4, 10), float32], Tensor[(13, 8, 11), float32]) {
  %335 = cast(%var_1707, dtype="float32") /* ty=Tensor[(539, 1), float32] */;
  %336 = cast(%var_1708, dtype="int16") /* ty=Tensor[(500), int16] */;
  %337 = reshape(%335, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %338 = reshape(%336, newshape=[500]) /* ty=Tensor[(500), int16] */;
  %339 = @func_847(%337, %338) /* ty=(Tensor[(11, 7, 7), float32], Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) */;
  %340 = cast(meta[relay.Constant][29] /* ty=Tensor[(792), uint32] */, dtype="uint32") /* ty=Tensor[(792), uint32] */;
  %341 = cast(meta[relay.Constant][29] /* ty=Tensor[(792), uint32] */, dtype="uint32") /* ty=Tensor[(792), uint32] */;
  %342 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 1638), float64] */, dtype="float64") /* ty=Tensor[(1, 1638), float64] */;
  %343 = cast(%var_1714, dtype="int64") /* ty=int64 */;
  %344 = cast(meta[relay.Constant][31] /* ty=Tensor[(1024), bool] */, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %345 = cast(%var_1716, dtype="float32") /* ty=Tensor[(11, 104), float32] */;
  %346 = reshape(%340, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), uint32] */;
  %347 = reshape(%341, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), uint32] */;
  %348 = reshape(%342, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %349 = reshape(%343, newshape=[]) /* ty=int64 */;
  %350 = reshape(%344, newshape=[1024]) /* ty=Tensor[(1024), bool] */;
  %351 = reshape(%345, newshape=[1144]) /* ty=Tensor[(1144), float32] */;
  %352 = @func_1587(%346, %347, %348, %349, %350, %351) /* ty=(Tensor[(9, 11, 8), uint32], Tensor[(2), int64], Tensor[(13, 21), int8], Tensor[(1638), float64], Tensor[(1, 2), bool], Tensor[(9, 11, 8), float64], Tensor[(1144), float32], Tensor[(1024), bool], Tensor[(1144), float32], Tensor[(3, 13, 7), uint8]) */;
  %353 = %352.2;
  %354 = cast(%353, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %355 = cast(%353, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %356 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 1638), float64] */, dtype="float64") /* ty=Tensor[(1, 1638), float64] */;
  %357 = cast(%353, dtype="int8") /* ty=Tensor[(13, 21), int8] */;
  %358 = reshape(%354, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %359 = reshape(%355, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %360 = reshape(%356, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %361 = reshape(%357, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
  %362 = @func_213(%358, %359, %360, %361) /* ty=(Tensor[(3, 13, 7), int8], Tensor[(1, 2), int64], Tensor[(2), int64], Tensor[(1638), float64], Tensor[(3, 13, 7), bool], Tensor[(14, 9, 13), uint32]) */;
  %363 = cast(%var_1694, dtype="bool") /* ty=Tensor[(15, 4, 10), bool] */;
  %364 = shape_of(%var_1693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%var_1693, dtype="bool") /* ty=Tensor[(15, 4, 10), bool] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %367 = logical_or(%365, %366) /* ty=Tensor[(15, 4, 10), bool] */;
  %368 = cast(%var_1693, dtype="float32") /* ty=Tensor[(15, 4, 10), float32] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%367, dtype="float32") /* ty=Tensor[(15, 4, 10), float32] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %372 = cast(%var_1716, dtype="float32") /* ty=Tensor[(11, 104), float32] */;
  %373 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 1638), float64] */, dtype="float64") /* ty=Tensor[(1, 1638), float64] */;
  %374 = reshape(%372, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), float32] */;
  %375 = reshape(%373, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %376 = @func_422(%374, %375) /* ty=(Tensor[(13, 8, 11), float32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64]) */;
  %377 = %339.4;
  %378 = %362.5;
  %379 = floor_divide(%370, %371) /* ty=Tensor[(15, 4, 10), float32] */;
  %380 = %376.0;
  (%377, %var_1707, %var_1708, %353, meta[relay.Constant][29] /* ty=Tensor[(792), uint32] */, meta[relay.Constant][30] /* ty=Tensor[(1, 1638), float64] */, %var_1714, meta[relay.Constant][31] /* ty=Tensor[(1024), bool] */, %var_1716, %378, %379, %380)
}

def @func_5228(%var_5216: Tensor[(280), int16]) -> (Tensor[(1176), float32], Tensor[(280), int16], Tensor[(1638), float64], Tensor[(280), int16]) {
  %381 = @func_4427() /* ty=(Tensor[(1176), float32],) */;
  %382 = cast(meta[relay.Constant][32] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %383 = cast(meta[relay.Constant][32] /* ty=Tensor[(1638), float64] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %384 = cast(%var_5216, dtype="int16") /* ty=Tensor[(280), int16] */;
  %385 = reshape(%382, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %386 = reshape(%383, newshape=[1638]) /* ty=Tensor[(1638), float32] */;
  %387 = reshape(%384, newshape=[280]) /* ty=Tensor[(280), int16] */;
  %388 = @func_3549(%385, %386, %387) /* ty=(Tensor[(10, 12, 15), bool], Tensor[(13, 8, 11), float32], Tensor[(1, 1144), float32], Tensor[(10, 12, 15), float64], Tensor[(13, 11, 14), bool], Tensor[(2002, 1), float32], Tensor[(1638), int64], Tensor[(7, 4, 10), int16], Tensor[(280), int16]) */;
  %389 = %381.0;
  %390 = %388.8;
  (%389, %390, meta[relay.Constant][32] /* ty=Tensor[(1638), float64] */, %var_5216)
}

def @func_6001() -> (Tensor[(10, 12, 15), bool], Tensor[(7, 15, 3), float64], Tensor[(315), float64]) {
  %391 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
  %392 = cast(meta[relay.Constant][33] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %393 = cast(meta[relay.Constant][33] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %394 = reshape(%392, newshape=[7, 15, 3]) /* ty=Tensor[(7, 15, 3), float64] */;
  %395 = reshape(%393, newshape=[7, 15, 3]) /* ty=Tensor[(7, 15, 3), float64] */;
  %396 = %391.0;
  %397 = @func_4866(%394, %395) /* ty=Tensor[(7, 15, 3), float64] */;
  (%396, %397, meta[relay.Constant][33] /* ty=Tensor[(315), float64] */)
}

def @main(%var_6135: Tensor[(539), float32]) -> (Tensor[(3, 13, 7), int8], Tensor[(539), float32], Tensor[(500), int16], Tensor[(7, 4, 10), int16], Tensor[(280, 1176), uint32]) {
  %398 = cast(%var_6135, dtype="float32") /* ty=Tensor[(539), float32] */;
  %399 = cast(meta[relay.Constant][34] /* ty=Tensor[(500), int16] */, dtype="int16") /* ty=Tensor[(500), int16] */;
  %400 = reshape(%398, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %401 = reshape(%399, newshape=[500]) /* ty=Tensor[(500), int16] */;
  %402 = @func_850(%400, %401) /* ty=(Tensor[(11, 7, 7), float32], Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) */;
  %403 = cast(meta[relay.Constant][35] /* ty=Tensor[(280, 1), int16] */, dtype="int16") /* ty=Tensor[(280, 1), int16] */;
  %404 = reshape(%403, newshape=[7, 4, 10]) /* ty=Tensor[(7, 4, 10), int16] */;
  %405 = @func_2209(%404) /* ty=(Tensor[(7, 4, 10), int16],) */;
  %406 = @func_2995() /* ty=Tensor[(1176), float32] */;
  %407 = cast(%406, dtype="uint32") /* ty=Tensor[(1176), uint32] */;
  %408 = cast(meta[relay.Constant][35] /* ty=Tensor[(280, 1), int16] */, dtype="uint32") /* ty=Tensor[(280, 1), uint32] */;
  %409 = %402.1;
  %410 = %405.0;
  %411 = right_shift(%407, %408) /* ty=Tensor[(280, 1176), uint32] */;
  (%409, %var_6135, meta[relay.Constant][34] /* ty=Tensor[(500), int16] */, %410, %411)
}

def @func_2958() -> (Tensor[(10, 12, 15), float64],) {
  %412 = @func_2851() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %413 = %412.0;
  (%413,)
}

def @func_5347() -> (Tensor[(10, 12, 15), bool],) {
  %414 = @func_4663() /* ty=(Tensor[(4, 7, 13), bool], Tensor[(4, 7, 13), float32], Tensor[(10, 12, 15), bool]) */;
  %415 = %414.2;
  (%415,)
}

def @func_6059(%var_6058: Tensor[(14, 12, 16), float32]) -> (Tensor[(14, 12, 16), int64],) {
  %423 = fn (%var_6036: Tensor[(14, 12, 16), float32]) -> (Tensor[(14, 12, 16), int64],) {
    %416 = cast(%var_6036, dtype="float32") /* ty=Tensor[(14, 12, 16), float32] */;
    %417 = tan(%416) /* ty=Tensor[(14, 12, 16), float32] */;
    %418 = cast(%var_6036, dtype="int64") /* ty=Tensor[(14, 12, 16), int64] */;
    %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
    %420 = cast(%417, dtype="int64") /* ty=Tensor[(14, 12, 16), int64] */;
    %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %422 = add(%420, %421) /* ty=Tensor[(14, 12, 16), int64] */;
    (%422,)
  };
  %423(%var_6058) /* ty=(Tensor[(14, 12, 16), int64],) */
}

def @func_1775(%var_1769: Tensor[(15, 4, 10), bool], %var_1770: Tensor[(15, 4, 10), bool], %var_1771: Tensor[(539, 1), float32], %var_1772: Tensor[(500), int16], %var_1773: int64, %var_1774: Tensor[(11, 104), float32]) -> (Tensor[(5, 10, 10), int16], Tensor[(539, 1), float32], Tensor[(500), int16], Tensor[(13, 21), int8], Tensor[(792), uint32], Tensor[(1, 1638), float64], int64, Tensor[(1024), bool], Tensor[(11, 104), float32], Tensor[(14, 9, 13), uint32], Tensor[(15, 4, 10), float32], Tensor[(13, 8, 11), float32]) {
  @func_1767(%var_1769, %var_1770, %var_1771, %var_1772, %var_1773, %var_1774) /* ty=(Tensor[(5, 10, 10), int16], Tensor[(539, 1), float32], Tensor[(500), int16], Tensor[(13, 21), int8], Tensor[(792), uint32], Tensor[(1, 1638), float64], int64, Tensor[(1024), bool], Tensor[(11, 104), float32], Tensor[(14, 9, 13), uint32], Tensor[(15, 4, 10), float32], Tensor[(13, 8, 11), float32]) */
}

def @func_2721() -> (Tensor[(10, 12, 15), bool],) {
  @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */
}

def @func_3864() -> Tensor[(1176), float32] {
  %424 = fn () -> Tensor[(1176), float32] {
    @func_3636() /* ty=Tensor[(1176), float32] */
  };
  %424() /* ty=Tensor[(1176), float32] */
}

def @func_3190(%var_3159: Tensor[(5, 56), int16], %var_3180: Tensor[(1638), float64]) -> (Tensor[(10, 12, 15), float64], Tensor[(7, 4, 10), int16], Tensor[(4, 13, 12), uint32], Tensor[(624), uint32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64], Tensor[(5, 56), float64]) {
  %425 = @func_2958() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %426 = cast(%var_3159, dtype="int16") /* ty=Tensor[(5, 56), int16] */;
  %427 = reshape(%426, newshape=[7, 4, 10]) /* ty=Tensor[(7, 4, 10), int16] */;
  %428 = @func_2207(%427) /* ty=(Tensor[(7, 4, 10), int16],) */;
  %429 = cast(meta[relay.Constant][36] /* ty=Tensor[(624), uint32] */, dtype="uint32") /* ty=Tensor[(624), uint32] */;
  %430 = reshape(%429, newshape=[4, 13, 12]) /* ty=Tensor[(4, 13, 12), uint32] */;
  %431 = @func_3102(%430) /* ty=(Tensor[(4, 13, 12), uint32],) */;
  %432 = cast(%var_3180, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %433 = cast(%var_3180, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %434 = reshape(%432, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %435 = reshape(%433, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %436 = cast(%var_3159, dtype="float32") /* ty=Tensor[(5, 56), float32] */;
  %437 = sigmoid(%436) /* ty=Tensor[(5, 56), float32] */;
  %438 = cast(%437, dtype="float64") /* ty=Tensor[(5, 56), float64] */;
  %439 = %425.0;
  %440 = %428.0;
  %441 = %431.0;
  %442 = @func_47(%434, %435) /* ty=Tensor[(14, 9, 13), uint16] */;
  %443 = sin(%438) /* ty=Tensor[(5, 56), float64] */;
  (%439, %440, %441, meta[relay.Constant][36] /* ty=Tensor[(624), uint32] */, %442, %var_3180, %443)
}

def @func_2011(%var_2007: Tensor[(7, 14, 12), float32]) -> Tensor[(7, 14, 12), bool] {
  %444 = cast(%var_2007, dtype="bool") /* ty=Tensor[(7, 14, 12), bool] */;
  %445 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(7, 14, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 14, 12), float32] */, dtype="bool") /* ty=Tensor[(7, 14, 12), bool] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%446, %447) /* ty=Tensor[(7, 14, 12), bool] */
}

def @func_4137(%var_4099: Tensor[(64), uint64], %var_4101: Tensor[(224, 4), uint64], %var_4103: Tensor[(1176), float32], %var_4116: int16, %var_4117: Tensor[(500), int16]) -> (Tensor[(10, 12, 15), float64], Tensor[(1176), float64], Tensor[(10, 16, 4), float64], Tensor[(64), uint64], Tensor[(640), uint64], Tensor[(224, 4), uint64], Tensor[(1176), int64], Tensor[(1176), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) {
  %448 = @func_2851() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %449 = @func_3714() /* ty=(Tensor[(1176), float32], Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), float64], Tensor[(1176), float32], Tensor[(10, 12, 15), float64]) */;
  %450 = %449.0;
  %451 = cast(%450, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %452 = cast(%var_4099, dtype="uint64") /* ty=Tensor[(64), uint64] */;
  %453 = cast(meta[relay.Constant][38] /* ty=Tensor[(640), uint64] */, dtype="uint64") /* ty=Tensor[(640), uint64] */;
  %454 = cast(%var_4101, dtype="uint64") /* ty=Tensor[(224, 4), uint64] */;
  %455 = reshape(%452, newshape=[1, 16, 4]) /* ty=Tensor[(1, 16, 4), uint64] */;
  %456 = reshape(%453, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint64] */;
  %457 = reshape(%454, newshape=[14, 16, 4]) /* ty=Tensor[(14, 16, 4), uint64] */;
  %458 = @func_1086(%455, %456, %457) /* ty=(Tensor[(10, 16, 4), uint64], Tensor[(14, 16, 4), bool], Tensor[(10, 16, 4), float64], Tensor[(10, 16, 4), float32]) */;
  %459 = cast(%var_4103, dtype="int64") /* ty=Tensor[(1176), int64] */;
  %460 = shape_of(%450, dtype="int32") /* ty=Tensor[(1), int32] */;
  %461 = cast(%450, dtype="int64") /* ty=Tensor[(1176), int64] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?), int64] */;
  %463 = cast(%450, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %464 = asin(%463) /* ty=Tensor[(1176), float32] */;
  %465 = cast(%var_4103, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(1), int32] */;
  %467 = cast(%464, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?), float64] */;
  %469 = cast(%var_4116, dtype="int16") /* ty=int16 */;
  %470 = cast(%var_4117, dtype="int16") /* ty=Tensor[(500), int16] */;
  %471 = reshape(%469, newshape=[]) /* ty=int16 */;
  %472 = reshape(%470, newshape=[5, 10, 10]) /* ty=Tensor[(5, 10, 10), int16] */;
  %473 = %448.0;
  %474 = asinh(%451) /* ty=Tensor[(1176), float64] */;
  %475 = %458.2;
  %476 = multiply(%461, %462) /* ty=Tensor[(1176), int64] */;
  %477 = floor_divide(%467, %468) /* ty=Tensor[(1176), float64] */;
  %478 = @func_679(%471, %472) /* ty=Tensor[(5, 10, 10), int16] */;
  (%473, %474, %475, %var_4099, meta[relay.Constant][38] /* ty=Tensor[(640), uint64] */, %var_4101, %476, %477, %478, %var_4116, %var_4117)
}

def @func_5397(%var_5390: Tensor[(48), float64], %var_5392: Tensor[(8, 7, 14), float64]) -> (Tensor[(1638), float64], Tensor[(48), float64], Tensor[(8, 7, 14), uint8]) {
  %479 = cast(%var_5390, dtype="float64") /* ty=Tensor[(48), float64] */;
  %480 = reshape(%479, newshape=[8, 6, 1]) /* ty=Tensor[(8, 6, 1), float64] */;
  %481 = @func_1291(%480) /* ty=(Tensor[(8, 6, 1), float64], Tensor[(14, 117), float64], Tensor[(468), float32], Tensor[(1638), float64]) */;
  %482 = cast(meta[relay.Constant][39] /* ty=Tensor[(8, 7, 14), float64] */, dtype="float64") /* ty=Tensor[(8, 7, 14), float64] */;
  %483 = acos(%482) /* ty=Tensor[(8, 7, 14), float64] */;
  %484 = cast(%var_5392, dtype="uint8") /* ty=Tensor[(8, 7, 14), uint8] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%483, dtype="uint8") /* ty=Tensor[(8, 7, 14), uint8] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %488 = %481.3;
  %489 = subtract(%486, %487) /* ty=Tensor[(8, 7, 14), uint8] */;
  (%488, %var_5390, %489)
}

def @func_1595(%var_1589: Tensor[(9, 11, 8), uint32], %var_1590: Tensor[(9, 11, 8), uint32], %var_1591: Tensor[(1638), float64], %var_1592: int64, %var_1593: Tensor[(1024), bool], %var_1594: Tensor[(1144), float32]) -> (Tensor[(9, 11, 8), uint32], Tensor[(2), int64], Tensor[(13, 21), int8], Tensor[(1638), float64], Tensor[(1, 2), bool], Tensor[(9, 11, 8), float64], Tensor[(1144), float32], Tensor[(1024), bool], Tensor[(1144), float32], Tensor[(3, 13, 7), uint8]) {
  @func_1587(%var_1589, %var_1590, %var_1591, %var_1592, %var_1593, %var_1594) /* ty=(Tensor[(9, 11, 8), uint32], Tensor[(2), int64], Tensor[(13, 21), int8], Tensor[(1638), float64], Tensor[(1, 2), bool], Tensor[(9, 11, 8), float64], Tensor[(1144), float32], Tensor[(1024), bool], Tensor[(1144), float32], Tensor[(3, 13, 7), uint8]) */
}

def @func_2996() -> Tensor[(1176), float32] {
  %491 = fn () -> Tensor[(1176), float32] {
    %490 = @func_2904() /* ty=(Tensor[(10, 12, 15), bool], Tensor[(7, 14, 12), bool], Tensor[(1176), float32]) */;
    %490.2
  };
  %491() /* ty=Tensor[(1176), float32] */
}

def @func_2014(%var_2012: Tensor[(7, 14, 12), float32]) -> Tensor[(7, 14, 12), bool] {
  @func_2011(%var_2012) /* ty=Tensor[(7, 14, 12), bool] */
}

def @func_5401(%var_5399: Tensor[(48), float64], %var_5400: Tensor[(8, 7, 14), float64]) -> (Tensor[(1638), float64], Tensor[(48), float64], Tensor[(8, 7, 14), uint8]) {
  @func_5397(%var_5399, %var_5400) /* ty=(Tensor[(1638), float64], Tensor[(48), float64], Tensor[(8, 7, 14), uint8]) */
}

def @func_4739(%var_4730: int64) -> (Tensor[(10, 12, 15), float64], Tensor[(1, 2), bool], int64, Tensor[(2), int64]) {
  %492 = @func_3248() /* ty=(Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool]) */;
  %493 = cast(%var_4730, dtype="int64") /* ty=int64 */;
  %494 = cast(meta[relay.Constant][40] /* ty=Tensor[(2), int64] */, dtype="int64") /* ty=Tensor[(2), int64] */;
  %495 = reshape(%493, newshape=[]) /* ty=int64 */;
  %496 = reshape(%494, newshape=[1, 2]) /* ty=Tensor[(1, 2), int64] */;
  %497 = @func_132(%495, %496) /* ty=(Tensor[(1, 2), int64], Tensor[(1, 2), bool]) */;
  %498 = %492.0;
  %499 = %497.1;
  (%498, %499, %var_4730, meta[relay.Constant][40] /* ty=Tensor[(2), int64] */)
}

def @func_4505() -> (Tensor[(1176), float32], Tensor[(15, 1, 9), float32], Tensor[(3, 45), float32]) {
  %504 = fn () -> (Tensor[(1176), float32], Tensor[(15, 1, 9), float32], Tensor[(3, 45), float32]) {
    %500 = cast(meta[relay.Constant][41] /* ty=Tensor[(3, 45), float32] */, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
    %501 = reshape(%500, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
    %502 = @func_3863() /* ty=Tensor[(1176), float32] */;
    %503 = @func_2629(%501) /* ty=Tensor[(15, 1, 9), float32] */;
    (%502, %503, meta[relay.Constant][41] /* ty=Tensor[(3, 45), float32] */)
  };
  %504() /* ty=(Tensor[(1176), float32], Tensor[(15, 1, 9), float32], Tensor[(3, 45), float32]) */
}

def @func_4713() -> (Tensor[(1176), float32],) {
  %505 = @func_4427() /* ty=(Tensor[(1176), float32],) */;
  %506 = %505.0;
  (%506,)
}

def @func_5668(%var_5604: Tensor[(14, 3, 10), float32], %var_5605: Tensor[(14, 3, 10), float32], %var_5617: Tensor[(14, 3, 10), float32], %var_5623: Tensor[(14, 3, 10), float32], %var_5644: Tensor[(156), bool], %var_5646: int16) -> (Tensor[(14, 3, 10), int8], Tensor[(14, 3, 10), int32], Tensor[(156), bool], Tensor[(448), float64], int16, Tensor[(16, 14, 2), float32], Tensor[(14, 3, 10), float64]) {
  %507 = cast(%var_5623, dtype="int8") /* ty=Tensor[(14, 3, 10), int8] */;
  %508 = shape_of(%var_5604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%var_5604, dtype="int8") /* ty=Tensor[(14, 3, 10), int8] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %511 = cast(%var_5617, dtype="bool") /* ty=Tensor[(14, 3, 10), bool] */;
  %512 = shape_of(%var_5604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%var_5604, dtype="bool") /* ty=Tensor[(14, 3, 10), bool] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %515 = less_equal(%513, %514) /* ty=Tensor[(14, 3, 10), bool] */;
  %516 = cast(%var_5623, dtype="int32") /* ty=Tensor[(14, 3, 10), int32] */;
  %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%515, dtype="int32") /* ty=Tensor[(14, 3, 10), int32] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %520 = cast(%var_5644, dtype="bool") /* ty=Tensor[(156), bool] */;
  %521 = cast(%var_5644, dtype="bool") /* ty=Tensor[(156), bool] */;
  %522 = cast(meta[relay.Constant][42] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %523 = cast(%var_5646, dtype="int16") /* ty=int16 */;
  %524 = reshape(%520, newshape=[6, 13, 2]) /* ty=Tensor[(6, 13, 2), bool] */;
  %525 = reshape(%521, newshape=[6, 13, 2]) /* ty=Tensor[(6, 13, 2), bool] */;
  %526 = reshape(%522, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %527 = reshape(%523, newshape=[]) /* ty=int16 */;
  %528 = @func_3755(%524, %525, %526, %527) /* ty=(Tensor[(6, 13, 2), bool], Tensor[(6, 13, 2), float64], Tensor[(16, 14, 2), bool], Tensor[(448), float64], int16, Tensor[(500), int16]) */;
  %529 = %528.2;
  %530 = cast(%529, dtype="float32") /* ty=Tensor[(16, 14, 2), float32] */;
  %531 = cast(%var_5605, dtype="float32") /* ty=Tensor[(14, 3, 10), float32] */;
  %532 = shape_of(%var_5604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%var_5604, dtype="float32") /* ty=Tensor[(14, 3, 10), float32] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %535 = divide(%533, %534) /* ty=Tensor[(14, 3, 10), float32] */;
  %536 = cast(%515, dtype="float64") /* ty=Tensor[(14, 3, 10), float64] */;
  %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%535, dtype="float64") /* ty=Tensor[(14, 3, 10), float64] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %540 = subtract(%509, %510) /* ty=Tensor[(14, 3, 10), int8] */;
  %541 = multiply(%518, %519) /* ty=Tensor[(14, 3, 10), int32] */;
  %542 = rsqrt(%530) /* ty=Tensor[(16, 14, 2), float32] */;
  %543 = minimum(%538, %539) /* ty=Tensor[(14, 3, 10), float64] */;
  (%540, %541, %var_5644, meta[relay.Constant][42] /* ty=Tensor[(448), float64] */, %var_5646, %542, %543)
}

def @func_5676(%var_5670: Tensor[(14, 3, 10), float32], %var_5671: Tensor[(14, 3, 10), float32], %var_5672: Tensor[(14, 3, 10), float32], %var_5673: Tensor[(14, 3, 10), float32], %var_5674: Tensor[(156), bool], %var_5675: int16) -> (Tensor[(14, 3, 10), int8], Tensor[(14, 3, 10), int32], Tensor[(156), bool], Tensor[(448), float64], int16, Tensor[(16, 14, 2), float32], Tensor[(14, 3, 10), float64]) {
  @func_5668(%var_5670, %var_5671, %var_5672, %var_5673, %var_5674, %var_5675) /* ty=(Tensor[(14, 3, 10), int8], Tensor[(14, 3, 10), int32], Tensor[(156), bool], Tensor[(448), float64], int16, Tensor[(16, 14, 2), float32], Tensor[(14, 3, 10), float64]) */
}

def @func_5494(%var_5438: Tensor[(1144), float32], %var_5439: Tensor[(468), float32], %var_5440: Tensor[(273, 1), int8], %var_5480: int16) -> (Tensor[(10, 12, 15), float64], Tensor[(5, 10, 10), int16], Tensor[(1144), float32], Tensor[(273, 468), uint32], Tensor[(273, 42), int8], Tensor[(16, 14, 2), float64], int16, Tensor[(448), float32]) {
  %544 = @func_2958() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %545 = cast(meta[relay.Constant][43] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %546 = cast(%var_5438, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %547 = cast(%var_5439, dtype="float32") /* ty=Tensor[(468), float32] */;
  %548 = cast(%var_5440, dtype="int8") /* ty=Tensor[(273, 1), int8] */;
  %549 = reshape(%545, newshape=[14, 3]) /* ty=Tensor[(14, 3), float32] */;
  %550 = reshape(%546, newshape=[1144]) /* ty=Tensor[(1144), float32] */;
  %551 = reshape(%547, newshape=[468]) /* ty=Tensor[(468), float32] */;
  %552 = reshape(%548, newshape=[273]) /* ty=Tensor[(273), int8] */;
  %553 = @func_1942(%549, %550, %551, %552) /* ty=(Tensor[(1638), float64], Tensor[(1144), float32], Tensor[(1638), float64], Tensor[(14, 3), bool], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16], Tensor[(12, 13, 3), float32], Tensor[(468), float32], Tensor[(5, 10, 10), int16], Tensor[(600), bool], Tensor[(539), float32], Tensor[(1638), float64], Tensor[(273), int8]) */;
  %554 = cast(%var_5439, dtype="uint32") /* ty=Tensor[(468), uint32] */;
  %555 = cast(%var_5440, dtype="uint32") /* ty=Tensor[(273, 1), uint32] */;
  %556 = cast(meta[relay.Constant][43] /* ty=Tensor[(42), float32] */, dtype="int8") /* ty=Tensor[(42), int8] */;
  %557 = cast(%var_5440, dtype="int8") /* ty=Tensor[(273, 1), int8] */;
  %558 = cast(meta[relay.Constant][44] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %559 = cast(%var_5480, dtype="int16") /* ty=int16 */;
  %560 = %553.9;
  %561 = cast(%560, dtype="int16") /* ty=Tensor[(5, 10, 10), int16] */;
  %562 = reshape(%558, newshape=[16, 14, 2]) /* ty=Tensor[(16, 14, 2), float64] */;
  %563 = reshape(%559, newshape=[]) /* ty=int16 */;
  %564 = reshape(%561, newshape=[5, 100]) /* ty=Tensor[(5, 100), int16] */;
  %565 = @func_891(%562, %563, %564) /* ty=(Tensor[(16, 14, 2), bool], Tensor[(16, 14, 2), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(5, 100), int16]) */;
  %566 = cast(meta[relay.Constant][44] /* ty=Tensor[(448), float64] */, dtype="float32") /* ty=Tensor[(448), float32] */;
  %567 = %544.0;
  %568 = left_shift(%554, %555) /* ty=Tensor[(273, 468), uint32] */;
  %569 = logical_xor(%556, %557) /* ty=Tensor[(273, 42), int8] */;
  %570 = %565.1;
  %571 = acosh(%566) /* ty=Tensor[(448), float32] */;
  (%567, %560, %var_5438, %568, %569, %570, %var_5480, %571)
}

def @func_2853() -> (Tensor[(10, 12, 15), float64],) {
  @func_2851() /* ty=(Tensor[(10, 12, 15), float64],) */
}

def @func_3637() -> Tensor[(1176), float32] {
  %572 = fn () -> Tensor[(1176), float32] {
    @func_2995() /* ty=Tensor[(1176), float32] */
  };
  %572() /* ty=Tensor[(1176), float32] */
}

def @func_3420(%var_3403: int16) -> (Tensor[(1176), float32], Tensor[(16, 14, 2), float64], Tensor[(448), float64], int16, Tensor[(500), int16]) {
  %573 = cast(meta[relay.Constant][45] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %574 = cast(%var_3403, dtype="int16") /* ty=int16 */;
  %575 = cast(meta[relay.Constant][46] /* ty=Tensor[(500), int16] */, dtype="int16") /* ty=Tensor[(500), int16] */;
  %576 = reshape(%573, newshape=[16, 14, 2]) /* ty=Tensor[(16, 14, 2), float64] */;
  %577 = reshape(%574, newshape=[]) /* ty=int16 */;
  %578 = reshape(%575, newshape=[5, 100]) /* ty=Tensor[(5, 100), int16] */;
  %579 = @func_891(%576, %577, %578) /* ty=(Tensor[(16, 14, 2), bool], Tensor[(16, 14, 2), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(5, 100), int16]) */;
  %580 = @func_2995() /* ty=Tensor[(1176), float32] */;
  %581 = %579.1;
  (%580, %581, meta[relay.Constant][45] /* ty=Tensor[(448), float64] */, %var_3403, meta[relay.Constant][46] /* ty=Tensor[(500), int16] */)
}

def @func_3476() -> (Tensor[(10, 12, 15), float64],) {
  %582 = @func_2958() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %583 = %582.0;
  (%583,)
}

def @func_5341() -> (Tensor[(10, 12, 15), float32],) {
  %586 = fn () -> (Tensor[(10, 12, 15), float32],) {
    %584 = @func_4845() /* ty=(Tensor[(10, 12, 15), float32], Tensor[(10, 12, 15), float32]) */;
    %585 = %584.1;
    (%585,)
  };
  %586() /* ty=(Tensor[(10, 12, 15), float32],) */
}

def @func_4394(%var_4392: Tensor[(7, 4, 2), float64], %var_4393: Tensor[(539), float32]) -> (Tensor[(7, 4, 2), float64], Tensor[(539, 1), float32], Tensor[(1, 600), bool], Tensor[(539), float32], Tensor[(1, 500), int16], int64, Tensor[(1144), float32]) {
  @func_4390(%var_4392, %var_4393) /* ty=(Tensor[(7, 4, 2), float64], Tensor[(539, 1), float32], Tensor[(1, 600), bool], Tensor[(539), float32], Tensor[(1, 500), int16], int64, Tensor[(1144), float32]) */
}

def @func_3755(%var_3734: Tensor[(6, 13, 2), bool], %var_3735: Tensor[(6, 13, 2), bool], %var_3748: Tensor[(448), float64], %var_3749: int16) -> (Tensor[(6, 13, 2), bool], Tensor[(6, 13, 2), float64], Tensor[(16, 14, 2), bool], Tensor[(448), float64], int16, Tensor[(500), int16]) {
  %587 = cast(%var_3735, dtype="bool") /* ty=Tensor[(6, 13, 2), bool] */;
  %588 = shape_of(%var_3734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%var_3734, dtype="bool") /* ty=Tensor[(6, 13, 2), bool] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %591 = cast(%var_3735, dtype="float64") /* ty=Tensor[(6, 13, 2), float64] */;
  %592 = cast(%var_3748, dtype="float64") /* ty=Tensor[(448), float64] */;
  %593 = cast(%var_3749, dtype="int16") /* ty=int16 */;
  %594 = cast(meta[relay.Constant][47] /* ty=Tensor[(500), int16] */, dtype="int16") /* ty=Tensor[(500), int16] */;
  %595 = reshape(%592, newshape=[16, 14, 2]) /* ty=Tensor[(16, 14, 2), float64] */;
  %596 = reshape(%593, newshape=[]) /* ty=int16 */;
  %597 = reshape(%594, newshape=[5, 100]) /* ty=Tensor[(5, 100), int16] */;
  %598 = @func_891(%595, %596, %597) /* ty=(Tensor[(16, 14, 2), bool], Tensor[(16, 14, 2), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(5, 100), int16]) */;
  %599 = logical_and(%589, %590) /* ty=Tensor[(6, 13, 2), bool] */;
  %600 = tan(%591) /* ty=Tensor[(6, 13, 2), float64] */;
  %601 = %598.0;
  (%599, %600, %601, %var_3748, %var_3749, meta[relay.Constant][47] /* ty=Tensor[(500), int16] */)
}

def @func_2905() -> (Tensor[(10, 12, 15), bool], Tensor[(7, 14, 12), bool], Tensor[(1176), float32]) {
  %607 = fn () -> (Tensor[(10, 12, 15), bool], Tensor[(7, 14, 12), bool], Tensor[(1176), float32]) {
    %602 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
    %603 = cast(meta[relay.Constant][48] /* ty=Tensor[(1176), float32] */, dtype="float32") /* ty=Tensor[(1176), float32] */;
    %604 = reshape(%603, newshape=[7, 14, 12]) /* ty=Tensor[(7, 14, 12), float32] */;
    %605 = %602.0;
    %606 = @func_2011(%604) /* ty=Tensor[(7, 14, 12), bool] */;
    (%605, %606, meta[relay.Constant][48] /* ty=Tensor[(1176), float32] */)
  };
  %607() /* ty=(Tensor[(10, 12, 15), bool], Tensor[(7, 14, 12), bool], Tensor[(1176), float32]) */
}

def @func_3761(%var_3757: Tensor[(6, 13, 2), bool], %var_3758: Tensor[(6, 13, 2), bool], %var_3759: Tensor[(448), float64], %var_3760: int16) -> (Tensor[(6, 13, 2), bool], Tensor[(6, 13, 2), float64], Tensor[(16, 14, 2), bool], Tensor[(448), float64], int16, Tensor[(500), int16]) {
  @func_3755(%var_3757, %var_3758, %var_3759, %var_3760) /* ty=(Tensor[(6, 13, 2), bool], Tensor[(6, 13, 2), float64], Tensor[(16, 14, 2), bool], Tensor[(448), float64], int16, Tensor[(500), int16]) */
}

def @func_2122(%var_2120: Tensor[(12, 12, 12), uint8]) -> Tensor[(12, 12, 12), bool] {
  @func_2119(%var_2120) /* ty=Tensor[(12, 12, 12), bool] */
}

def @func_3478() -> (Tensor[(10, 12, 15), float64],) {
  @func_3476() /* ty=(Tensor[(10, 12, 15), float64],) */
}

def @func_132(%var_115: int64, %var_116: Tensor[(1, 2), int64]) -> (Tensor[(1, 2), int64], Tensor[(1, 2), bool]) {
  %608 = cast(%var_115, dtype="int64") /* ty=int64 */;
  %609 = cast(%var_116, dtype="int64") /* ty=Tensor[(1, 2), int64] */;
  %610 = cast(%var_116, dtype="bool") /* ty=Tensor[(1, 2), bool] */;
  %611 = cast(%var_115, dtype="bool") /* ty=bool */;
  %612 = subtract(%608, %609) /* ty=Tensor[(1, 2), int64] */;
  %613 = less_equal(%610, %611) /* ty=Tensor[(1, 2), bool] */;
  (%612, %613)
}

def @func_4742(%var_4740: int64) -> (Tensor[(10, 12, 15), float64], Tensor[(1, 2), bool], int64, Tensor[(2), int64]) {
  @func_4739(%var_4740) /* ty=(Tensor[(10, 12, 15), float64], Tensor[(1, 2), bool], int64, Tensor[(2), int64]) */
}

def @func_850(%var_848: Tensor[(11, 7, 7), float32], %var_849: Tensor[(500), int16]) -> (Tensor[(11, 7, 7), float32], Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) {
  %631 = fn (%var_817: Tensor[(11, 7, 7), float32], %var_830: Tensor[(500), int16]) -> (Tensor[(11, 7, 7), float32], Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) {
    %614 = cast(%var_817, dtype="float32") /* ty=Tensor[(11, 7, 7), float32] */;
    %615 = cast(meta[relay.Constant][49] /* ty=Tensor[(273), int8] */, dtype="int8") /* ty=Tensor[(273), int8] */;
    %616 = cast(meta[relay.Constant][49] /* ty=Tensor[(273), int8] */, dtype="int8") /* ty=Tensor[(273), int8] */;
    %617 = cast(meta[relay.Constant][50] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %618 = cast(meta[relay.Constant][49] /* ty=Tensor[(273), int8] */, dtype="int8") /* ty=Tensor[(273), int8] */;
    %619 = reshape(%615, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
    %620 = reshape(%616, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
    %621 = reshape(%617, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
    %622 = reshape(%618, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), int8] */;
    %623 = @func_213(%619, %620, %621, %622) /* ty=(Tensor[(3, 13, 7), int8], Tensor[(1, 2), int64], Tensor[(2), int64], Tensor[(1638), float64], Tensor[(3, 13, 7), bool], Tensor[(14, 9, 13), uint32]) */;
    %624 = cast(meta[relay.Constant][51] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %625 = cast(%var_830, dtype="int16") /* ty=Tensor[(500), int16] */;
    %626 = reshape(%624, newshape=[]) /* ty=int16 */;
    %627 = reshape(%625, newshape=[5, 10, 10]) /* ty=Tensor[(5, 10, 10), int16] */;
    %628 = asinh(%614) /* ty=Tensor[(11, 7, 7), float32] */;
    %629 = %623.0;
    %630 = @func_679(%626, %627) /* ty=Tensor[(5, 10, 10), int16] */;
    (%628, %629, meta[relay.Constant][49] /* ty=Tensor[(273), int8] */, meta[relay.Constant][50] /* ty=Tensor[(1638), float64] */, %630, meta[relay.Constant][51] /* ty=int16 */, %var_830)
  };
  %631(%var_848, %var_849) /* ty=(Tensor[(11, 7, 7), float32], Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) */
}

def @func_5180(%var_5178: Tensor[(280), int16], %var_5179: Tensor[(1, 1144), float32]) -> (Tensor[(10, 12, 15), bool], Tensor[(1638), float64], Tensor[(280), int16], Tensor[(7, 14, 12), bool], Tensor[(468), float32], Tensor[(48), float64], Tensor[(?, 1144), uint64]) {
  @func_5176(%var_5178, %var_5179) /* ty=(Tensor[(10, 12, 15), bool], Tensor[(1638), float64], Tensor[(280), int16], Tensor[(7, 14, 12), bool], Tensor[(468), float32], Tensor[(48), float64], Tensor[(?, 1144), uint64]) */
}

def @func_3549(%var_3494: Tensor[(1638), float64], %var_3525: Tensor[(1638), float32], %var_3546: Tensor[(280), int16]) -> (Tensor[(10, 12, 15), bool], Tensor[(13, 8, 11), float32], Tensor[(1, 1144), float32], Tensor[(10, 12, 15), float64], Tensor[(13, 11, 14), bool], Tensor[(2002, 1), float32], Tensor[(1638), int64], Tensor[(7, 4, 10), int16], Tensor[(280), int16]) {
  %632 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
  %633 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 1144), float32] */, dtype="float32") /* ty=Tensor[(1, 1144), float32] */;
  %634 = cast(%var_3494, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %635 = reshape(%633, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), float32] */;
  %636 = reshape(%634, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %637 = @func_422(%635, %636) /* ty=(Tensor[(13, 8, 11), float32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64]) */;
  %638 = @func_2851() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %639 = cast(meta[relay.Constant][53] /* ty=Tensor[(2002, 1), float32] */, dtype="float32") /* ty=Tensor[(2002, 1), float32] */;
  %640 = cast(meta[relay.Constant][53] /* ty=Tensor[(2002, 1), float32] */, dtype="float32") /* ty=Tensor[(2002, 1), float32] */;
  %641 = reshape(%639, newshape=[13, 11, 14]) /* ty=Tensor[(13, 11, 14), float32] */;
  %642 = reshape(%640, newshape=[13, 11, 14]) /* ty=Tensor[(13, 11, 14), float32] */;
  %643 = @func_1040(%641, %642) /* ty=(Tensor[(13, 11, 14), bool],) */;
  %644 = cast(%var_3494, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %645 = asinh(%644) /* ty=Tensor[(1638), float32] */;
  %646 = cast(%var_3525, dtype="bool") /* ty=Tensor[(1638), bool] */;
  %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(1), int32] */;
  %648 = cast(%645, dtype="bool") /* ty=Tensor[(1638), bool] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?), bool] */;
  %650 = logical_and(%648, %649) /* ty=Tensor[(1638), bool] */;
  %651 = cast(%645, dtype="int64") /* ty=Tensor[(1638), int64] */;
  %652 = shape_of(%650, dtype="int32") /* ty=Tensor[(1), int32] */;
  %653 = cast(%650, dtype="int64") /* ty=Tensor[(1638), int64] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?), int64] */;
  %655 = cast(%var_3546, dtype="int16") /* ty=Tensor[(280), int16] */;
  %656 = reshape(%655, newshape=[7, 4, 10]) /* ty=Tensor[(7, 4, 10), int16] */;
  %657 = @func_2207(%656) /* ty=(Tensor[(7, 4, 10), int16],) */;
  %658 = %632.0;
  %659 = %637.0;
  %660 = %638.0;
  %661 = %643.0;
  %662 = bitwise_or(%653, %654) /* ty=Tensor[(1638), int64] */;
  %663 = %657.0;
  (%658, %659, meta[relay.Constant][52] /* ty=Tensor[(1, 1144), float32] */, %660, %661, meta[relay.Constant][53] /* ty=Tensor[(2002, 1), float32] */, %662, %663, %var_3546)
}

def @func_5304() -> Tensor[(1176), float32] {
  %664 = @func_5271() /* ty=(Tensor[(1176), float32],) */;
  %664.0
}

def @func_3423(%var_3421: int16) -> (Tensor[(1176), float32], Tensor[(16, 14, 2), float64], Tensor[(448), float64], int16, Tensor[(500), int16]) {
  @func_3420(%var_3421) /* ty=(Tensor[(1176), float32], Tensor[(16, 14, 2), float64], Tensor[(448), float64], int16, Tensor[(500), int16]) */
}

def @func_4715() -> (Tensor[(1176), float32],) {
  @func_4713() /* ty=(Tensor[(1176), float32],) */
}

def @func_425(%var_423: Tensor[(13, 8, 11), float32], %var_424: Tensor[(1638), float64]) -> (Tensor[(13, 8, 11), float32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64]) {
  %672 = fn (%var_413: Tensor[(13, 8, 11), float32], %var_418: Tensor[(1638), float64]) -> (Tensor[(13, 8, 11), float32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64]) {
    %665 = cast(%var_413, dtype="float32") /* ty=Tensor[(13, 8, 11), float32] */;
    %666 = cast(%var_418, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %667 = cast(%var_418, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %668 = reshape(%666, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
    %669 = reshape(%667, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
    %670 = rsqrt(%665) /* ty=Tensor[(13, 8, 11), float32] */;
    %671 = @func_47(%668, %669) /* ty=Tensor[(14, 9, 13), uint16] */;
    (%670, %671, %var_418)
  };
  %672(%var_423, %var_424) /* ty=(Tensor[(13, 8, 11), float32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64]) */
}

def @func_2679(%var_2646: Tensor[(16, 10, 3), float32], %var_2655: Tensor[(468, 1), float32], %var_2656: Tensor[(1638), float64], %var_2665: int16, %var_2666: Tensor[(500), int16], %var_2674: Tensor[(2, 224), float64]) -> (Tensor[(16, 10, 3), float32], Tensor[(14, 117), float64], Tensor[(468, 1), float32], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16], Tensor[(16, 14, 2), bool], Tensor[(2, 224), float64]) {
  %673 = cast(%var_2646, dtype="float32") /* ty=Tensor[(16, 10, 3), float32] */;
  %674 = cast(%var_2655, dtype="float32") /* ty=Tensor[(468, 1), float32] */;
  %675 = cast(%var_2656, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %676 = reshape(%674, newshape=[12, 13, 3]) /* ty=Tensor[(12, 13, 3), float32] */;
  %677 = reshape(%675, newshape=[14, 117]) /* ty=Tensor[(14, 117), float64] */;
  %678 = @func_551(%676, %677) /* ty=(Tensor[(12, 13, 3), float32], Tensor[(14, 9, 13), uint16], Tensor[(14, 117), float64]) */;
  %679 = cast(%var_2665, dtype="int16") /* ty=int16 */;
  %680 = cast(%var_2666, dtype="int16") /* ty=Tensor[(500), int16] */;
  %681 = reshape(%679, newshape=[]) /* ty=int16 */;
  %682 = reshape(%680, newshape=[5, 10, 10]) /* ty=Tensor[(5, 10, 10), int16] */;
  %683 = cast(%var_2674, dtype="float64") /* ty=Tensor[(2, 224), float64] */;
  %684 = cast(%var_2665, dtype="int16") /* ty=int16 */;
  %685 = cast(%var_2666, dtype="int16") /* ty=Tensor[(500), int16] */;
  %686 = reshape(%683, newshape=[16, 14, 2]) /* ty=Tensor[(16, 14, 2), float64] */;
  %687 = reshape(%684, newshape=[]) /* ty=int16 */;
  %688 = reshape(%685, newshape=[5, 100]) /* ty=Tensor[(5, 100), int16] */;
  %689 = @func_891(%686, %687, %688) /* ty=(Tensor[(16, 14, 2), bool], Tensor[(16, 14, 2), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(5, 100), int16]) */;
  %690 = cosh(%673) /* ty=Tensor[(16, 10, 3), float32] */;
  %691 = %678.2;
  %692 = @func_679(%681, %682) /* ty=Tensor[(5, 10, 10), int16] */;
  %693 = %689.0;
  (%690, %691, %var_2655, %var_2656, %692, %var_2665, %var_2666, %693, %var_2674)
}

def @func_4144(%var_4139: Tensor[(64), uint64], %var_4140: Tensor[(224, 4), uint64], %var_4141: Tensor[(1176), float32], %var_4142: int16, %var_4143: Tensor[(500), int16]) -> (Tensor[(10, 12, 15), float64], Tensor[(1176), float64], Tensor[(10, 16, 4), float64], Tensor[(64), uint64], Tensor[(640), uint64], Tensor[(224, 4), uint64], Tensor[(1176), int64], Tensor[(1176), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) {
  @func_4137(%var_4139, %var_4140, %var_4141, %var_4142, %var_4143) /* ty=(Tensor[(10, 12, 15), float64], Tensor[(1176), float64], Tensor[(10, 16, 4), float64], Tensor[(64), uint64], Tensor[(640), uint64], Tensor[(224, 4), uint64], Tensor[(1176), int64], Tensor[(1176), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) */
}

def @func_4847() -> (Tensor[(10, 12, 15), float32], Tensor[(10, 12, 15), float32]) {
  @func_4845() /* ty=(Tensor[(10, 12, 15), float32], Tensor[(10, 12, 15), float32]) */
}

def @func_218(%var_214: Tensor[(3, 13, 7), int8], %var_215: Tensor[(3, 13, 7), int8], %var_216: Tensor[(1638), float64], %var_217: Tensor[(3, 13, 7), int8]) -> (Tensor[(3, 13, 7), int8], Tensor[(1, 2), int64], Tensor[(2), int64], Tensor[(1638), float64], Tensor[(3, 13, 7), bool], Tensor[(14, 9, 13), uint32]) {
  %718 = fn (%var_147: Tensor[(3, 13, 7), int8], %var_148: Tensor[(3, 13, 7), int8], %var_187: Tensor[(1638), float64], %var_194: Tensor[(3, 13, 7), int8]) -> (Tensor[(3, 13, 7), int8], Tensor[(1, 2), int64], Tensor[(2), int64], Tensor[(1638), float64], Tensor[(3, 13, 7), bool], Tensor[(14, 9, 13), uint32]) {
    %694 = cast(%var_148, dtype="int8") /* ty=Tensor[(3, 13, 7), int8] */;
    %695 = shape_of(%var_147, dtype="int32") /* ty=Tensor[(3), int32] */;
    %696 = cast(%var_147, dtype="int8") /* ty=Tensor[(3, 13, 7), int8] */;
    %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %698 = cast(-2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %699 = cast(meta[relay.Constant][54] /* ty=Tensor[(2), int64] */, dtype="int64") /* ty=Tensor[(2), int64] */;
    %700 = reshape(%698, newshape=[]) /* ty=int64 */;
    %701 = reshape(%699, newshape=[1, 2]) /* ty=Tensor[(1, 2), int64] */;
    %702 = @func_132(%700, %701) /* ty=(Tensor[(1, 2), int64], Tensor[(1, 2), bool]) */;
    %703 = cast(%var_194, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
    %704 = shape_of(%var_148, dtype="int32") /* ty=Tensor[(3), int32] */;
    %705 = cast(%var_148, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
    %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %707 = cast(%var_187, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %708 = cast(%var_187, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %709 = reshape(%707, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
    %710 = reshape(%708, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
    %711 = @func_47(%709, %710) /* ty=Tensor[(14, 9, 13), uint16] */;
    %712 = cast(-2 /* ty=int64 */, dtype="uint32") /* ty=uint32 */;
    %713 = cast(%711, dtype="uint32") /* ty=Tensor[(14, 9, 13), uint32] */;
    %714 = logical_xor(%696, %697) /* ty=Tensor[(3, 13, 7), int8] */;
    %715 = %702.0;
    %716 = equal(%705, %706) /* ty=Tensor[(3, 13, 7), bool] */;
    %717 = left_shift(%712, %713) /* ty=Tensor[(14, 9, 13), uint32] */;
    (%714, %715, meta[relay.Constant][54] /* ty=Tensor[(2), int64] */, %var_187, %716, %717)
  };
  %718(%var_214, %var_215, %var_216, %var_217) /* ty=(Tensor[(3, 13, 7), int8], Tensor[(1, 2), int64], Tensor[(2), int64], Tensor[(1638), float64], Tensor[(3, 13, 7), bool], Tensor[(14, 9, 13), uint32]) */
}

def @func_4390(%var_4351: Tensor[(7, 4, 2), float64], %var_4361: Tensor[(539), float32]) -> (Tensor[(7, 4, 2), float64], Tensor[(539, 1), float32], Tensor[(1, 600), bool], Tensor[(539), float32], Tensor[(1, 500), int16], int64, Tensor[(1144), float32]) {
  %719 = cast(meta[relay.Constant][55] /* ty=Tensor[(7, 4, 2), float64] */, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
  %720 = shape_of(%var_4351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%var_4351, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %723 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 600), bool] */, dtype="bool") /* ty=Tensor[(1, 600), bool] */;
  %724 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 600), bool] */, dtype="bool") /* ty=Tensor[(1, 600), bool] */;
  %725 = cast(%var_4361, dtype="float32") /* ty=Tensor[(539), float32] */;
  %726 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 500), int16] */, dtype="int16") /* ty=Tensor[(1, 500), int16] */;
  %727 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %728 = cast(meta[relay.Constant][58] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %729 = reshape(%723, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), bool] */;
  %730 = reshape(%724, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), bool] */;
  %731 = reshape(%725, newshape=[539, 1]) /* ty=Tensor[(539, 1), float32] */;
  %732 = reshape(%726, newshape=[500]) /* ty=Tensor[(500), int16] */;
  %733 = reshape(%727, newshape=[]) /* ty=int64 */;
  %734 = reshape(%728, newshape=[11, 104]) /* ty=Tensor[(11, 104), float32] */;
  %735 = @func_1767(%729, %730, %731, %732, %733, %734) /* ty=(Tensor[(5, 10, 10), int16], Tensor[(539, 1), float32], Tensor[(500), int16], Tensor[(13, 21), int8], Tensor[(792), uint32], Tensor[(1, 1638), float64], int64, Tensor[(1024), bool], Tensor[(11, 104), float32], Tensor[(14, 9, 13), uint32], Tensor[(15, 4, 10), float32], Tensor[(13, 8, 11), float32]) */;
  %736 = subtract(%721, %722) /* ty=Tensor[(7, 4, 2), float64] */;
  %737 = %735.1;
  (%736, %737, meta[relay.Constant][56] /* ty=Tensor[(1, 600), bool] */, %var_4361, meta[relay.Constant][57] /* ty=Tensor[(1, 500), int16] */, -6 /* ty=int64 */, meta[relay.Constant][58] /* ty=Tensor[(1144), float32] */)
}

def @func_5590() -> (Tensor[(1176), float32],) {
  %738 = @func_2904() /* ty=(Tensor[(10, 12, 15), bool], Tensor[(7, 14, 12), bool], Tensor[(1176), float32]) */;
  %739 = %738.2;
  (%739,)
}

def @func_3194(%var_3192: Tensor[(5, 56), int16], %var_3193: Tensor[(1638), float64]) -> (Tensor[(10, 12, 15), float64], Tensor[(7, 4, 10), int16], Tensor[(4, 13, 12), uint32], Tensor[(624), uint32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64], Tensor[(5, 56), float64]) {
  @func_3190(%var_3192, %var_3193) /* ty=(Tensor[(10, 12, 15), float64], Tensor[(7, 4, 10), int16], Tensor[(4, 13, 12), uint32], Tensor[(624), uint32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64], Tensor[(5, 56), float64]) */
}

def @func_4428() -> (Tensor[(1176), float32],) {
  %741 = fn () -> (Tensor[(1176), float32],) {
    %740 = @func_3636() /* ty=Tensor[(1176), float32] */;
    (%740,)
  };
  %741() /* ty=(Tensor[(1176), float32],) */
}

def @func_2119(%var_2106: Tensor[(12, 12, 12), uint8]) -> Tensor[(12, 12, 12), bool] {
  %742 = cast(%var_2106, dtype="bool") /* ty=Tensor[(12, 12, 12), bool] */;
  %743 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(12, 12, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(meta[relay.Constant][59] /* ty=Tensor[(12, 12, 12), uint8] */, dtype="bool") /* ty=Tensor[(12, 12, 12), bool] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%744, %745) /* ty=Tensor[(12, 12, 12), bool] */
}

def @func_682(%var_680: int16, %var_681: Tensor[(5, 10, 10), int16]) -> Tensor[(5, 10, 10), int16] {
  %748 = fn (%var_659: int16, %var_660: Tensor[(5, 10, 10), int16]) -> Tensor[(5, 10, 10), int16] {
    %746 = cast(%var_659, dtype="int16") /* ty=int16 */;
    %747 = cast(%var_660, dtype="int16") /* ty=Tensor[(5, 10, 10), int16] */;
    multiply(%746, %747) /* ty=Tensor[(5, 10, 10), int16] */
  };
  %748(%var_680, %var_681) /* ty=Tensor[(5, 10, 10), int16] */
}

def @func_1003(%var_1000: Tensor[(8, 8, 16), bool], %var_1001: Tensor[(8, 8, 16), bool], %var_1002: Tensor[(1144), float32]) -> (Tensor[(8, 8, 16), bool], Tensor[(13, 8, 11), float32], Tensor[(1144), float32], Tensor[(1638, 1), float64]) {
  %760 = fn (%var_969: Tensor[(8, 8, 16), bool], %var_970: Tensor[(8, 8, 16), bool], %var_977: Tensor[(1144), float32]) -> (Tensor[(8, 8, 16), bool], Tensor[(13, 8, 11), float32], Tensor[(1144), float32], Tensor[(1638, 1), float64]) {
    %749 = cast(%var_970, dtype="bool") /* ty=Tensor[(8, 8, 16), bool] */;
    %750 = shape_of(%var_969, dtype="int32") /* ty=Tensor[(3), int32] */;
    %751 = cast(%var_969, dtype="bool") /* ty=Tensor[(8, 8, 16), bool] */;
    %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %753 = cast(%var_977, dtype="float32") /* ty=Tensor[(1144), float32] */;
    %754 = cast(meta[relay.Constant][60] /* ty=Tensor[(1638, 1), float64] */, dtype="float64") /* ty=Tensor[(1638, 1), float64] */;
    %755 = reshape(%753, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), float32] */;
    %756 = reshape(%754, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
    %757 = @func_422(%755, %756) /* ty=(Tensor[(13, 8, 11), float32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64]) */;
    %758 = logical_or(%751, %752) /* ty=Tensor[(8, 8, 16), bool] */;
    %759 = %757.0;
    (%758, %759, %var_977, meta[relay.Constant][60] /* ty=Tensor[(1638, 1), float64] */)
  };
  %760(%var_1000, %var_1001, %var_1002) /* ty=(Tensor[(8, 8, 16), bool], Tensor[(13, 8, 11), float32], Tensor[(1144), float32], Tensor[(1638, 1), float64]) */
}

def @func_2629(%var_2625: Tensor[(15, 1, 9), float32]) -> Tensor[(15, 1, 9), float32] {
  %761 = cast(%var_2625, dtype="float32") /* ty=Tensor[(15, 1, 9), float32] */;
  log10(%761) /* ty=Tensor[(15, 1, 9), float32] */
}

def @func_2632(%var_2630: Tensor[(15, 1, 9), float32]) -> Tensor[(15, 1, 9), float32] {
  @func_2629(%var_2630) /* ty=Tensor[(15, 1, 9), float32] */
}

def @func_5500(%var_5496: Tensor[(1144), float32], %var_5497: Tensor[(468), float32], %var_5498: Tensor[(273, 1), int8], %var_5499: int16) -> (Tensor[(10, 12, 15), float64], Tensor[(5, 10, 10), int16], Tensor[(1144), float32], Tensor[(273, 468), uint32], Tensor[(273, 42), int8], Tensor[(16, 14, 2), float64], int16, Tensor[(448), float32]) {
  @func_5494(%var_5496, %var_5497, %var_5498, %var_5499) /* ty=(Tensor[(10, 12, 15), float64], Tensor[(5, 10, 10), int16], Tensor[(1144), float32], Tensor[(273, 468), uint32], Tensor[(273, 42), int8], Tensor[(16, 14, 2), float64], int16, Tensor[(448), float32]) */
}

def @func_4333(%var_4328: Tensor[(10, 12, 15), bool], %var_4329: Tensor[(896), uint64], %var_4330: Tensor[(1176), float32], %var_4331: int16, %var_4332: Tensor[(280), int16]) -> (Tensor[(10, 12, 15), bool], Tensor[(640), uint64], Tensor[(4, 16), uint64], Tensor[(896), uint64], Tensor[(1176), float32], int16, Tensor[(250, 2), int16], Tensor[(7, 4, 10), int16], Tensor[(280), int16], Tensor[(1176), int64], Tensor[(10, 12, 15), float32]) {
  @func_4326(%var_4328, %var_4329, %var_4330, %var_4331, %var_4332) /* ty=(Tensor[(10, 12, 15), bool], Tensor[(640), uint64], Tensor[(4, 16), uint64], Tensor[(896), uint64], Tensor[(1176), float32], int16, Tensor[(250, 2), int16], Tensor[(7, 4, 10), int16], Tensor[(280), int16], Tensor[(1176), int64], Tensor[(10, 12, 15), float32]) */
}

def @func_3554(%var_3551: Tensor[(1638), float64], %var_3552: Tensor[(1638), float32], %var_3553: Tensor[(280), int16]) -> (Tensor[(10, 12, 15), bool], Tensor[(13, 8, 11), float32], Tensor[(1, 1144), float32], Tensor[(10, 12, 15), float64], Tensor[(13, 11, 14), bool], Tensor[(2002, 1), float32], Tensor[(1638), int64], Tensor[(7, 4, 10), int16], Tensor[(280), int16]) {
  @func_3549(%var_3551, %var_3552, %var_3553) /* ty=(Tensor[(10, 12, 15), bool], Tensor[(13, 8, 11), float32], Tensor[(1, 1144), float32], Tensor[(10, 12, 15), float64], Tensor[(13, 11, 14), bool], Tensor[(2002, 1), float32], Tensor[(1638), int64], Tensor[(7, 4, 10), int16], Tensor[(280), int16]) */
}

def @func_4591(%var_4521: Tensor[(10, 12, 15), float64], %var_4553: int64) -> (Tensor[(10, 12, 15), int32], Tensor[(10, 12, 15), float32], int64, Tensor[(600), bool], Tensor[(539, 1), float32], Tensor[(500), int16], int64, Tensor[(1144), float32], Tensor[(10, 12, 15), bool], Tensor[(1024), bool], Tensor[(1176), float32], Tensor[(10, 12, 15), float64]) {
  %762 = @func_3476() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %763 = %762.0;
  %764 = cast(%var_4521, dtype="int32") /* ty=Tensor[(10, 12, 15), int32] */;
  %765 = shape_of(%763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(%763, dtype="int32") /* ty=Tensor[(10, 12, 15), int32] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %768 = cast(%var_4521, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
  %769 = cast(meta[relay.Constant][61] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
  %770 = cast(meta[relay.Constant][61] /* ty=Tensor[(600), bool] */, dtype="bool") /* ty=Tensor[(600), bool] */;
  %771 = cast(meta[relay.Constant][62] /* ty=Tensor[(539, 1), float32] */, dtype="float32") /* ty=Tensor[(539, 1), float32] */;
  %772 = cast(meta[relay.Constant][63] /* ty=Tensor[(500), int16] */, dtype="int16") /* ty=Tensor[(500), int16] */;
  %773 = cast(%var_4553, dtype="int64") /* ty=int64 */;
  %774 = cast(meta[relay.Constant][64] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %775 = reshape(%769, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), bool] */;
  %776 = reshape(%770, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), bool] */;
  %777 = reshape(%771, newshape=[539, 1]) /* ty=Tensor[(539, 1), float32] */;
  %778 = reshape(%772, newshape=[500]) /* ty=Tensor[(500), int16] */;
  %779 = reshape(%773, newshape=[]) /* ty=int64 */;
  %780 = reshape(%774, newshape=[11, 104]) /* ty=Tensor[(11, 104), float32] */;
  %781 = @func_1767(%775, %776, %777, %778, %779, %780) /* ty=(Tensor[(5, 10, 10), int16], Tensor[(539, 1), float32], Tensor[(500), int16], Tensor[(13, 21), int8], Tensor[(792), uint32], Tensor[(1, 1638), float64], int64, Tensor[(1024), bool], Tensor[(11, 104), float32], Tensor[(14, 9, 13), uint32], Tensor[(15, 4, 10), float32], Tensor[(13, 8, 11), float32]) */;
  %782 = cast(meta[relay.Constant][65] /* ty=Tensor[(1024), bool] */, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %783 = reshape(%782, newshape=[1024]) /* ty=Tensor[(1024), bool] */;
  %784 = @func_2778(%783) /* ty=(Tensor[(10, 12, 15), bool], Tensor[(1638, 1), float64], Tensor[(1144), float32], Tensor[(1024), float32]) */;
  %785 = @func_3476() /* ty=(Tensor[(10, 12, 15), float64],) */;
  %786 = bitwise_xor(%766, %767) /* ty=Tensor[(10, 12, 15), int32] */;
  %787 = asin(%768) /* ty=Tensor[(10, 12, 15), float32] */;
  %788 = %781.6;
  %789 = %784.0;
  %790 = @func_3863() /* ty=Tensor[(1176), float32] */;
  %791 = %785.0;
  (%786, %787, %788, meta[relay.Constant][61] /* ty=Tensor[(600), bool] */, meta[relay.Constant][62] /* ty=Tensor[(539, 1), float32] */, meta[relay.Constant][63] /* ty=Tensor[(500), int16] */, %var_4553, meta[relay.Constant][64] /* ty=Tensor[(1144), float32] */, %789, meta[relay.Constant][65] /* ty=Tensor[(1024), bool] */, %790, %791)
}

def @func_5306() -> Tensor[(1176), float32] {
  @func_5304() /* ty=Tensor[(1176), float32] */
}

def @func_3950(%var_3945: Tensor[(156), bool], %var_3946: Tensor[(448), float64], %var_3947: int16, %var_3948: Tensor[(539), float32], %var_3949: Tensor[(48), float64]) -> (Tensor[(1176), uint16], Tensor[(156), bool], Tensor[(448), float64], int16, Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool], Tensor[(1638), float64], Tensor[(539), float32], Tensor[(468), float32], Tensor[(48), float64], Tensor[(500), float32]) {
  %826 = fn (%var_3886: Tensor[(156), bool], %var_3887: Tensor[(448), float64], %var_3888: int16, %var_3928: Tensor[(539), float32], %var_3935: Tensor[(48), float64]) -> (Tensor[(1176), uint16], Tensor[(156), bool], Tensor[(448), float64], int16, Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool], Tensor[(1638), float64], Tensor[(539), float32], Tensor[(468), float32], Tensor[(48), float64], Tensor[(500), float32]) {
    %792 = @func_3863() /* ty=Tensor[(1176), float32] */;
    %793 = cast(meta[relay.Constant][66] /* ty=Tensor[(1176), float32] */, dtype="uint16") /* ty=Tensor[(1176), uint16] */;
    %794 = shape_of(%792, dtype="int32") /* ty=Tensor[(1), int32] */;
    %795 = cast(%792, dtype="uint16") /* ty=Tensor[(1176), uint16] */;
    %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %797 = @func_2851() /* ty=(Tensor[(10, 12, 15), float64],) */;
    %798 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
    %799 = cast(%var_3928, dtype="float32") /* ty=Tensor[(539), float32] */;
    %800 = cast(%var_3886, dtype="bool") /* ty=Tensor[(156), bool] */;
    %801 = cast(%var_3886, dtype="bool") /* ty=Tensor[(156), bool] */;
    %802 = cast(%var_3887, dtype="float64") /* ty=Tensor[(448), float64] */;
    %803 = cast(%var_3888, dtype="int16") /* ty=int16 */;
    %804 = reshape(%800, newshape=[6, 13, 2]) /* ty=Tensor[(6, 13, 2), bool] */;
    %805 = reshape(%801, newshape=[6, 13, 2]) /* ty=Tensor[(6, 13, 2), bool] */;
    %806 = reshape(%802, newshape=[448]) /* ty=Tensor[(448), float64] */;
    %807 = reshape(%803, newshape=[]) /* ty=int16 */;
    %808 = @func_3755(%804, %805, %806, %807) /* ty=(Tensor[(6, 13, 2), bool], Tensor[(6, 13, 2), float64], Tensor[(16, 14, 2), bool], Tensor[(448), float64], int16, Tensor[(500), int16]) */;
    %809 = %808.5;
    %810 = cast(%809, dtype="float64") /* ty=Tensor[(500), float64] */;
    %811 = acos(%810) /* ty=Tensor[(500), float64] */;
    %812 = cast(%811, dtype="int16") /* ty=Tensor[(500), int16] */;
    %813 = reshape(%799, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
    %814 = reshape(%812, newshape=[500]) /* ty=Tensor[(500), int16] */;
    %815 = @func_847(%813, %814) /* ty=(Tensor[(11, 7, 7), float32], Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) */;
    %816 = cast(%var_3935, dtype="float64") /* ty=Tensor[(48), float64] */;
    %817 = reshape(%816, newshape=[8, 6, 1]) /* ty=Tensor[(8, 6, 1), float64] */;
    %818 = @func_1291(%817) /* ty=(Tensor[(8, 6, 1), float64], Tensor[(14, 117), float64], Tensor[(468), float32], Tensor[(1638), float64]) */;
    %819 = cast(%811, dtype="float32") /* ty=Tensor[(500), float32] */;
    %820 = right_shift(%795, %796) /* ty=Tensor[(1176), uint16] */;
    %821 = %797.0;
    %822 = %798.0;
    %823 = %815.3;
    %824 = %818.2;
    %825 = rsqrt(%819) /* ty=Tensor[(500), float32] */;
    (%820, %var_3886, %var_3887, %var_3888, %821, %822, %823, %var_3928, %824, %var_3935, %825)
  };
  %826(%var_3945, %var_3946, %var_3947, %var_3948, %var_3949) /* ty=(Tensor[(1176), uint16], Tensor[(156), bool], Tensor[(448), float64], int16, Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool], Tensor[(1638), float64], Tensor[(539), float32], Tensor[(468), float32], Tensor[(48), float64], Tensor[(500), float32]) */
}

def @func_5349() -> (Tensor[(10, 12, 15), bool],) {
  @func_5347() /* ty=(Tensor[(10, 12, 15), bool],) */
}

def @func_5592() -> (Tensor[(1176), float32],) {
  @func_5590() /* ty=(Tensor[(1176), float32],) */
}

def @func_895(%var_892: Tensor[(16, 14, 2), float64], %var_893: int16, %var_894: Tensor[(5, 100), int16]) -> (Tensor[(16, 14, 2), bool], Tensor[(16, 14, 2), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(5, 100), int16]) {
  %839 = fn (%var_872: Tensor[(16, 14, 2), float64], %var_884: int16, %var_885: Tensor[(5, 100), int16]) -> (Tensor[(16, 14, 2), bool], Tensor[(16, 14, 2), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(5, 100), int16]) {
    %827 = cast(%var_872, dtype="bool") /* ty=Tensor[(16, 14, 2), bool] */;
    %828 = shape_of(meta[relay.Constant][67] /* ty=Tensor[(16, 14, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %829 = cast(meta[relay.Constant][67] /* ty=Tensor[(16, 14, 2), float64] */, dtype="bool") /* ty=Tensor[(16, 14, 2), bool] */;
    %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %831 = cast(%var_872, dtype="float64") /* ty=Tensor[(16, 14, 2), float64] */;
    %832 = cast(%var_884, dtype="int16") /* ty=int16 */;
    %833 = cast(%var_885, dtype="int16") /* ty=Tensor[(5, 100), int16] */;
    %834 = reshape(%832, newshape=[]) /* ty=int16 */;
    %835 = reshape(%833, newshape=[5, 10, 10]) /* ty=Tensor[(5, 10, 10), int16] */;
    %836 = greater(%829, %830) /* ty=Tensor[(16, 14, 2), bool] */;
    %837 = sigmoid(%831) /* ty=Tensor[(16, 14, 2), float64] */;
    %838 = @func_679(%834, %835) /* ty=Tensor[(5, 10, 10), int16] */;
    (%836, %837, %838, %var_884, %var_885)
  };
  %839(%var_892, %var_893, %var_894) /* ty=(Tensor[(16, 14, 2), bool], Tensor[(16, 14, 2), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(5, 100), int16]) */
}

def @func_4664() -> (Tensor[(4, 7, 13), bool], Tensor[(4, 7, 13), float32], Tensor[(10, 12, 15), bool]) {
  %849 = fn () -> (Tensor[(4, 7, 13), bool], Tensor[(4, 7, 13), float32], Tensor[(10, 12, 15), bool]) {
    %840 = cast(meta[relay.Constant][69] /* ty=Tensor[(4, 7, 13), uint8] */, dtype="bool") /* ty=Tensor[(4, 7, 13), bool] */;
    %841 = shape_of(meta[relay.Constant][68] /* ty=Tensor[(4, 7, 13), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %842 = cast(meta[relay.Constant][68] /* ty=Tensor[(4, 7, 13), uint8] */, dtype="bool") /* ty=Tensor[(4, 7, 13), bool] */;
    %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %844 = cast(meta[relay.Constant][68] /* ty=Tensor[(4, 7, 13), uint8] */, dtype="float32") /* ty=Tensor[(4, 7, 13), float32] */;
    %845 = @func_2719() /* ty=(Tensor[(10, 12, 15), bool],) */;
    %846 = not_equal(%842, %843) /* ty=Tensor[(4, 7, 13), bool] */;
    %847 = asinh(%844) /* ty=Tensor[(4, 7, 13), float32] */;
    %848 = %845.0;
    (%846, %847, %848)
  };
  %849() /* ty=(Tensor[(4, 7, 13), bool], Tensor[(4, 7, 13), float32], Tensor[(10, 12, 15), bool]) */
}

def @func_5322() -> (Tensor[(10, 12, 15), bool],) {
  %852 = fn () -> (Tensor[(10, 12, 15), bool],) {
    %850 = @func_3248() /* ty=(Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool]) */;
    %851 = %850.1;
    (%851,)
  };
  %852() /* ty=(Tensor[(10, 12, 15), bool],) */
}

def @func_5733(%var_5732: Tensor[(1638), float64]) -> (Tensor[(1176), float32], Tensor[(13, 8, 11), float32], Tensor[(1144), float32], Tensor[(1638), float64], Tensor[(7, 15, 3), float64], Tensor[(315), float64]) {
  %865 = fn (%var_5711: Tensor[(1638), float64]) -> (Tensor[(1176), float32], Tensor[(13, 8, 11), float32], Tensor[(1144), float32], Tensor[(1638), float64], Tensor[(7, 15, 3), float64], Tensor[(315), float64]) {
    %853 = cast(meta[relay.Constant][70] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
    %854 = cast(%var_5711, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %855 = reshape(%853, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), float32] */;
    %856 = reshape(%854, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
    %857 = @func_422(%855, %856) /* ty=(Tensor[(13, 8, 11), float32], Tensor[(14, 9, 13), uint16], Tensor[(1638), float64]) */;
    %858 = cast(meta[relay.Constant][71] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
    %859 = cast(meta[relay.Constant][71] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
    %860 = reshape(%858, newshape=[7, 15, 3]) /* ty=Tensor[(7, 15, 3), float64] */;
    %861 = reshape(%859, newshape=[7, 15, 3]) /* ty=Tensor[(7, 15, 3), float64] */;
    %862 = @func_5304() /* ty=Tensor[(1176), float32] */;
    %863 = %857.0;
    %864 = @func_4866(%860, %861) /* ty=Tensor[(7, 15, 3), float64] */;
    (%862, %863, meta[relay.Constant][70] /* ty=Tensor[(1144), float32] */, %var_5711, %864, meta[relay.Constant][71] /* ty=Tensor[(315), float64] */)
  };
  %865(%var_5732) /* ty=(Tensor[(1176), float32], Tensor[(13, 8, 11), float32], Tensor[(1144), float32], Tensor[(1638), float64], Tensor[(7, 15, 3), float64], Tensor[(315), float64]) */
}

def @func_3715() -> (Tensor[(1176), float32], Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), float64], Tensor[(1176), float32], Tensor[(10, 12, 15), float64]) {
  %875 = fn () -> (Tensor[(1176), float32], Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), float64], Tensor[(1176), float32], Tensor[(10, 12, 15), float64]) {
    %866 = @func_2904() /* ty=(Tensor[(10, 12, 15), bool], Tensor[(7, 14, 12), bool], Tensor[(1176), float32]) */;
    %867 = @func_2958() /* ty=(Tensor[(10, 12, 15), float64],) */;
    %868 = @func_3476() /* ty=(Tensor[(10, 12, 15), float64],) */;
    %869 = @func_3248() /* ty=(Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool]) */;
    %870 = %866.2;
    %871 = %867.0;
    %872 = %868.0;
    %873 = @func_2995() /* ty=Tensor[(1176), float32] */;
    %874 = %869.0;
    (%870, %871, %872, %873, %874)
  };
  %875() /* ty=(Tensor[(1176), float32], Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), float64], Tensor[(1176), float32], Tensor[(10, 12, 15), float64]) */
}

def @func_5936(%var_5930: Tensor[(7, 234), float64], %var_5931: Tensor[(792), uint32], %var_5932: Tensor[(1144), float32], %var_5933: Tensor[(3, 52), bool], %var_5934: Tensor[(539), float32], %var_5935: Tensor[(48), float64]) -> (Tensor[(10, 12, 15), bool], Tensor[(7, 234), float64], Tensor[(280), int16], Tensor[(10, 12, 15), float64], Tensor[(1, 2), bool], Tensor[(792), uint32], int64, Tensor[(1024), bool], Tensor[(1144), float32], Tensor[(10, 12, 15), int8], Tensor[(448), float64], Tensor[(3, 52), bool], Tensor[(448), float64], Tensor[(539), float32], Tensor[(48), float64]) {
  %928 = fn (%var_5876: Tensor[(7, 234), float64], %var_5896: Tensor[(792), uint32], %var_5899: Tensor[(1144), float32], %var_5907: Tensor[(3, 52), bool], %var_5909: Tensor[(539), float32], %var_5910: Tensor[(48), float64]) -> (Tensor[(10, 12, 15), bool], Tensor[(7, 234), float64], Tensor[(280), int16], Tensor[(10, 12, 15), float64], Tensor[(1, 2), bool], Tensor[(792), uint32], int64, Tensor[(1024), bool], Tensor[(1144), float32], Tensor[(10, 12, 15), int8], Tensor[(448), float64], Tensor[(3, 52), bool], Tensor[(448), float64], Tensor[(539), float32], Tensor[(48), float64]) {
    %876 = cast(%var_5876, dtype="float64") /* ty=Tensor[(7, 234), float64] */;
    %877 = cast(%var_5876, dtype="float32") /* ty=Tensor[(7, 234), float32] */;
    %878 = cast(meta[relay.Constant][72] /* ty=Tensor[(280), int16] */, dtype="int16") /* ty=Tensor[(280), int16] */;
    %879 = reshape(%876, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
    %880 = reshape(%877, newshape=[1638]) /* ty=Tensor[(1638), float32] */;
    %881 = reshape(%878, newshape=[280]) /* ty=Tensor[(280), int16] */;
    %882 = @func_3549(%879, %880, %881) /* ty=(Tensor[(10, 12, 15), bool], Tensor[(13, 8, 11), float32], Tensor[(1, 1144), float32], Tensor[(10, 12, 15), float64], Tensor[(13, 11, 14), bool], Tensor[(2002, 1), float32], Tensor[(1638), int64], Tensor[(7, 4, 10), int16], Tensor[(280), int16]) */;
    %883 = @func_3476() /* ty=(Tensor[(10, 12, 15), float64],) */;
    %884 = %883.0;
    %885 = cast(meta[relay.Constant][73] /* ty=Tensor[(10, 12, 15), float64] */, dtype="uint8") /* ty=Tensor[(10, 12, 15), uint8] */;
    %886 = shape_of(%884, dtype="int32") /* ty=Tensor[(3), int32] */;
    %887 = cast(%884, dtype="uint8") /* ty=Tensor[(10, 12, 15), uint8] */;
    %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %889 = minimum(%887, %888) /* ty=Tensor[(10, 12, 15), uint8] */;
    %890 = cast(%889, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
    %891 = rsqrt(%890) /* ty=Tensor[(10, 12, 15), float64] */;
    %892 = cast(%891, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
    %893 = cast(%var_5896, dtype="uint32") /* ty=Tensor[(792), uint32] */;
    %894 = cast(%var_5896, dtype="uint32") /* ty=Tensor[(792), uint32] */;
    %895 = cast(%var_5876, dtype="float64") /* ty=Tensor[(7, 234), float64] */;
    %896 = cast(4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %897 = cast(meta[relay.Constant][74] /* ty=Tensor[(1024), bool] */, dtype="bool") /* ty=Tensor[(1024), bool] */;
    %898 = cast(%var_5899, dtype="float32") /* ty=Tensor[(1144), float32] */;
    %899 = reshape(%893, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), uint32] */;
    %900 = reshape(%894, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), uint32] */;
    %901 = reshape(%895, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
    %902 = reshape(%896, newshape=[]) /* ty=int64 */;
    %903 = reshape(%897, newshape=[1024]) /* ty=Tensor[(1024), bool] */;
    %904 = reshape(%898, newshape=[1144]) /* ty=Tensor[(1144), float32] */;
    %905 = @func_1587(%899, %900, %901, %902, %903, %904) /* ty=(Tensor[(9, 11, 8), uint32], Tensor[(2), int64], Tensor[(13, 21), int8], Tensor[(1638), float64], Tensor[(1, 2), bool], Tensor[(9, 11, 8), float64], Tensor[(1144), float32], Tensor[(1024), bool], Tensor[(1144), float32], Tensor[(3, 13, 7), uint8]) */;
    %906 = cast(%884, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
    %907 = log(%906) /* ty=Tensor[(10, 12, 15), float32] */;
    %908 = cast(meta[relay.Constant][75] /* ty=Tensor[(10, 12, 15), float32] */, dtype="int8") /* ty=Tensor[(10, 12, 15), int8] */;
    %909 = shape_of(%907, dtype="int32") /* ty=Tensor[(3), int32] */;
    %910 = cast(%907, dtype="int8") /* ty=Tensor[(10, 12, 15), int8] */;
    %911 = dyn.reshape(%908, %909, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %912 = cast(%var_5907, dtype="bool") /* ty=Tensor[(3, 52), bool] */;
    %913 = cast(meta[relay.Constant][76] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
    %914 = cast(4 /* ty=int64 */, dtype="int16") /* ty=int16 */;
    %915 = cast(%var_5909, dtype="float32") /* ty=Tensor[(539), float32] */;
    %916 = cast(%var_5910, dtype="float64") /* ty=Tensor[(48), float64] */;
    %917 = reshape(%912, newshape=[156]) /* ty=Tensor[(156), bool] */;
    %918 = reshape(%913, newshape=[448]) /* ty=Tensor[(448), float64] */;
    %919 = reshape(%914, newshape=[]) /* ty=int16 */;
    %920 = reshape(%915, newshape=[539]) /* ty=Tensor[(539), float32] */;
    %921 = reshape(%916, newshape=[48]) /* ty=Tensor[(48), float64] */;
    %922 = @func_3944(%917, %918, %919, %920, %921) /* ty=(Tensor[(1176), uint16], Tensor[(156), bool], Tensor[(448), float64], int16, Tensor[(10, 12, 15), float64], Tensor[(10, 12, 15), bool], Tensor[(1638), float64], Tensor[(539), float32], Tensor[(468), float32], Tensor[(48), float64], Tensor[(500), float32]) */;
    %923 = %882.0;
    %924 = sigmoid(%892) /* ty=Tensor[(10, 12, 15), float64] */;
    %925 = %905.4;
    %926 = maximum(%910, %911) /* ty=Tensor[(10, 12, 15), int8] */;
    %927 = %922.2;
    (%923, %var_5876, meta[relay.Constant][72] /* ty=Tensor[(280), int16] */, %924, %925, %var_5896, 4 /* ty=int64 */, meta[relay.Constant][74] /* ty=Tensor[(1024), bool] */, %var_5899, %926, %927, %var_5907, meta[relay.Constant][76] /* ty=Tensor[(448), float64] */, %var_5909, %var_5910)
  };
  %928(%var_5930, %var_5931, %var_5932, %var_5933, %var_5934, %var_5935) /* ty=(Tensor[(10, 12, 15), bool], Tensor[(7, 234), float64], Tensor[(280), int16], Tensor[(10, 12, 15), float64], Tensor[(1, 2), bool], Tensor[(792), uint32], int64, Tensor[(1024), bool], Tensor[(1144), float32], Tensor[(10, 12, 15), int8], Tensor[(448), float64], Tensor[(3, 52), bool], Tensor[(448), float64], Tensor[(539), float32], Tensor[(48), float64]) */
}

def @func_554(%var_552: Tensor[(12, 13, 3), float32], %var_553: Tensor[(14, 117), float64]) -> (Tensor[(12, 13, 3), float32], Tensor[(14, 9, 13), uint16], Tensor[(14, 117), float64]) {
  %936 = fn (%var_545: Tensor[(12, 13, 3), float32], %var_549: Tensor[(14, 117), float64]) -> (Tensor[(12, 13, 3), float32], Tensor[(14, 9, 13), uint16], Tensor[(14, 117), float64]) {
    %929 = cast(%var_545, dtype="float32") /* ty=Tensor[(12, 13, 3), float32] */;
    %930 = cast(%var_549, dtype="float64") /* ty=Tensor[(14, 117), float64] */;
    %931 = cast(%var_549, dtype="float64") /* ty=Tensor[(14, 117), float64] */;
    %932 = reshape(%930, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
    %933 = reshape(%931, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
    %934 = cosh(%929) /* ty=Tensor[(12, 13, 3), float32] */;
    %935 = @func_47(%932, %933) /* ty=Tensor[(14, 9, 13), uint16] */;
    (%934, %935, %var_549)
  };
  %936(%var_552, %var_553) /* ty=(Tensor[(12, 13, 3), float32], Tensor[(14, 9, 13), uint16], Tensor[(14, 117), float64]) */
}

def @func_2960() -> (Tensor[(10, 12, 15), float64],) {
  @func_2958() /* ty=(Tensor[(10, 12, 15), float64],) */
}

def @func_3104(%var_3103: Tensor[(4, 13, 12), uint32]) -> (Tensor[(4, 13, 12), uint32],) {
  %940 = fn (%var_3091: Tensor[(4, 13, 12), uint32]) -> (Tensor[(4, 13, 12), uint32],) {
    %937 = cast(meta[relay.Constant][77] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %938 = cast(%var_3091, dtype="uint32") /* ty=Tensor[(4, 13, 12), uint32] */;
    %939 = bitwise_or(%937, %938) /* ty=Tensor[(4, 13, 12), uint32] */;
    (%939,)
  };
  %940(%var_3103) /* ty=(Tensor[(4, 13, 12), uint32],) */
}

def @func_1043(%var_1041: Tensor[(13, 11, 14), float32], %var_1042: Tensor[(13, 11, 14), float32]) -> (Tensor[(13, 11, 14), bool],) {
  %948 = fn (%var_1017: Tensor[(13, 11, 14), float32], %var_1028: Tensor[(13, 11, 14), float32]) -> (Tensor[(13, 11, 14), bool],) {
    %941 = cast(%var_1017, dtype="float32") /* ty=Tensor[(13, 11, 14), float32] */;
    %942 = asinh(%941) /* ty=Tensor[(13, 11, 14), float32] */;
    %943 = cast(%var_1028, dtype="bool") /* ty=Tensor[(13, 11, 14), bool] */;
    %944 = shape_of(%942, dtype="int32") /* ty=Tensor[(3), int32] */;
    %945 = cast(%942, dtype="bool") /* ty=Tensor[(13, 11, 14), bool] */;
    %946 = dyn.reshape(%943, %944, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %947 = logical_and(%945, %946) /* ty=Tensor[(13, 11, 14), bool] */;
    (%947,)
  };
  %948(%var_1041, %var_1042) /* ty=(Tensor[(13, 11, 14), bool],) */
}

def @func_6003() -> (Tensor[(10, 12, 15), bool], Tensor[(7, 15, 3), float64], Tensor[(315), float64]) {
  @func_6001() /* ty=(Tensor[(10, 12, 15), bool], Tensor[(7, 15, 3), float64], Tensor[(315), float64]) */
}

def @func_3348(%var_3346: Tensor[(539), float32], %var_3347: Tensor[(500), int16]) -> (Tensor[(10, 12, 15), float64], Tensor[(539), float32], Tensor[(500), int16], Tensor[(5, 10, 10), int64]) {
  %971 = fn (%var_3317: Tensor[(539), float32], %var_3318: Tensor[(500), int16]) -> (Tensor[(10, 12, 15), float64], Tensor[(539), float32], Tensor[(500), int16], Tensor[(5, 10, 10), int64]) {
    %949 = @func_2958() /* ty=(Tensor[(10, 12, 15), float64],) */;
    %950 = %949.0;
    %951 = cast(%950, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
    %952 = sqrt(%951) /* ty=Tensor[(10, 12, 15), float32] */;
    %953 = cast(%950, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
    %954 = shape_of(%952, dtype="int32") /* ty=Tensor[(3), int32] */;
    %955 = cast(%952, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
    %956 = dyn.reshape(%953, %954, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %957 = cast(%var_3317, dtype="float32") /* ty=Tensor[(539), float32] */;
    %958 = cast(%var_3318, dtype="int16") /* ty=Tensor[(500), int16] */;
    %959 = reshape(%957, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
    %960 = reshape(%958, newshape=[500]) /* ty=Tensor[(500), int16] */;
    %961 = @func_847(%959, %960) /* ty=(Tensor[(11, 7, 7), float32], Tensor[(3, 13, 7), int8], Tensor[(273), int8], Tensor[(1638), float64], Tensor[(5, 10, 10), int16], int16, Tensor[(500), int16]) */;
    %962 = %961.4;
    %963 = cast(%962, dtype="float32") /* ty=Tensor[(5, 10, 10), float32] */;
    %964 = sigmoid(%963) /* ty=Tensor[(5, 10, 10), float32] */;
    %965 = cast(%962, dtype="int64") /* ty=Tensor[(5, 10, 10), int64] */;
    %966 = shape_of(%964, dtype="int32") /* ty=Tensor[(3), int32] */;
    %967 = cast(%964, dtype="int64") /* ty=Tensor[(5, 10, 10), int64] */;
    %968 = dyn.reshape(%965, %966, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %969 = divide(%955, %956) /* ty=Tensor[(10, 12, 15), float64] */;
    %970 = bitwise_and(%967, %968) /* ty=Tensor[(5, 10, 10), int64] */;
    (%969, %var_3317, %var_3318, %970)
  };
  %971(%var_3346, %var_3347) /* ty=(Tensor[(10, 12, 15), float64], Tensor[(539), float32], Tensor[(500), int16], Tensor[(5, 10, 10), int64]) */
}

def @func_5272() -> (Tensor[(1176), float32],) {
  %975 = fn () -> (Tensor[(1176), float32],) {
    %972 = @func_2995() /* ty=Tensor[(1176), float32] */;
    %973 = cast(%972, dtype="float32") /* ty=Tensor[(1176), float32] */;
    %974 = erf(%973) /* ty=Tensor[(1176), float32] */;
    (%974,)
  };
  %975() /* ty=(Tensor[(1176), float32],) */
}

def @func_4869(%var_4867: Tensor[(7, 15, 3), float64], %var_4868: Tensor[(7, 15, 3), float64]) -> Tensor[(7, 15, 3), float64] {
  %980 = fn (%var_4856: Tensor[(7, 15, 3), float64], %var_4857: Tensor[(7, 15, 3), float64]) -> Tensor[(7, 15, 3), float64] {
    %976 = cast(%var_4857, dtype="float64") /* ty=Tensor[(7, 15, 3), float64] */;
    %977 = shape_of(%var_4856, dtype="int32") /* ty=Tensor[(3), int32] */;
    %978 = cast(%var_4856, dtype="float64") /* ty=Tensor[(7, 15, 3), float64] */;
    %979 = dyn.reshape(%976, %977, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    subtract(%978, %979) /* ty=Tensor[(7, 15, 3), float64] */
  };
  %980(%var_4867, %var_4868) /* ty=Tensor[(7, 15, 3), float64] */
}

def @func_1294(%var_1292: Tensor[(8, 6, 1), float64]) -> (Tensor[(8, 6, 1), float64], Tensor[(14, 117), float64], Tensor[(468), float32], Tensor[(1638), float64]) {
  @func_1291(%var_1292) /* ty=(Tensor[(8, 6, 1), float64], Tensor[(14, 117), float64], Tensor[(468), float32], Tensor[(1638), float64]) */
}

def @func_6035() -> (Tensor[(10, 12, 15), float32],) {
  %985 = fn () -> (Tensor[(10, 12, 15), float32],) {
    %981 = @func_4845() /* ty=(Tensor[(10, 12, 15), float32], Tensor[(10, 12, 15), float32]) */;
    %982 = %981.0;
    %983 = cast(%982, dtype="float32") /* ty=Tensor[(10, 12, 15), float32] */;
    %984 = tan(%983) /* ty=Tensor[(10, 12, 15), float32] */;
    (%984,)
  };
  %985() /* ty=(Tensor[(10, 12, 15), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen48/build/output.py", line 1780, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:46:20] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

