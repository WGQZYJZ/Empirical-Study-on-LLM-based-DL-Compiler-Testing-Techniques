import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_174 = relay.var("var_174", dtype = "int64", shape = (13, 13, 15))#candidate|174|(13, 13, 15)|var|int64
const_175 = relay.const([[[-5,3,5,-9,-5,-9,-8,6,6,-7,9,5,9,9,-7],[9,-1,7,2,-1,9,-6,6,-10,-1,-1,-4,-8,-8,-9],[3,-10,-2,-4,-3,3,-7,-10,3,3,-6,6,1,-4,-1],[5,-3,-10,-1,1,-1,5,-3,9,2,2,8,-9,2,-9],[8,-8,-10,6,-5,3,-1,-4,-3,2,6,-5,-4,5,-8],[10,8,-9,-8,-10,-3,-9,-3,-1,-5,-2,-1,-7,-1,-2],[7,-7,1,5,-2,-4,-8,-9,7,7,-7,5,6,-2,6],[-8,-5,10,-10,7,10,8,4,10,1,5,8,5,-2,1],[-10,-1,-3,-3,7,-6,3,6,-3,-1,6,2,4,8,-6],[-5,9,3,6,6,8,-10,-7,-10,-7,-5,-5,-8,4,-6],[-6,-7,7,-6,8,8,-3,-8,-9,3,9,8,4,-4,2],[9,3,1,-7,-4,-9,4,-3,2,-3,7,-2,-8,8,7],[4,-8,-3,10,5,7,-8,-6,5,4,-3,-10,3,3,9]],[[-3,-7,3,-9,-2,-9,-6,1,-10,10,-6,3,1,-3,-9],[-8,9,-1,-7,-5,5,-9,-1,-5,-1,-2,-9,3,3,8],[-2,2,10,-4,-4,-8,-3,1,9,6,10,-5,5,1,-5],[9,5,-9,-7,-2,1,1,6,9,-6,5,3,7,1,-5],[6,4,-5,6,5,2,-9,4,-3,-3,8,-6,-10,-10,-10],[-7,-8,10,5,7,8,-10,2,-4,-6,5,7,-6,4,-9],[-10,-3,-9,-6,-8,8,10,-5,-1,9,-8,-1,6,3,3],[4,-10,4,7,8,2,-3,4,-5,7,-4,8,1,3,6],[7,1,-5,9,-6,-1,-2,1,4,-1,-1,7,10,-5,-1],[-3,1,8,-3,-1,-3,-7,9,-1,5,-4,-8,-8,-7,5],[6,-8,2,-2,-2,-3,-5,10,-10,7,-4,4,1,2,6],[8,3,-6,2,1,-1,7,-7,-10,-7,-4,7,2,-9,8],[2,-5,1,-2,-1,7,9,8,2,-5,-6,-9,-5,10,7]],[[-9,-5,-4,10,-1,10,3,-3,-7,10,3,1,8,5,1],[-10,-1,-9,-1,-10,9,10,1,-2,8,10,-9,-5,10,7],[-6,-4,-1,-9,-1,5,-10,2,10,-10,8,-2,-5,-4,-1],[-4,9,1,2,-2,-2,5,-2,3,-10,10,5,7,-1,2],[-5,6,-8,-3,10,3,2,1,-4,-6,7,6,-10,-1,5],[2,4,3,-6,2,2,5,5,8,2,6,3,-3,-5,3],[-10,8,-4,5,7,-5,5,1,-8,7,-4,-1,-5,10,-9],[-7,-8,6,-8,-4,-10,-2,-1,-3,1,-10,5,9,-6,-9],[2,7,-1,-3,-3,3,-8,-6,-5,7,-1,10,8,7,10],[10,-9,3,-7,-10,7,-2,6,3,9,9,9,-9,3,-3],[-9,7,8,-10,8,5,-3,10,9,5,5,9,5,1,3],[1,6,9,-7,9,3,3,-3,7,6,9,8,-5,7,1],[1,1,9,1,3,5,6,-1,-1,-2,-2,10,10,-1,1]],[[-8,-5,10,-10,-1,-3,-8,4,-7,-10,4,1,-2,-9,-9],[-6,-5,-5,-4,-5,2,3,6,-1,-2,3,3,-10,-4,-9],[-1,9,5,-8,3,-7,-3,4,6,2,4,-6,9,3,6],[6,8,-1,1,3,-5,6,-1,-7,6,6,7,9,9,1],[6,1,5,7,3,10,10,-8,-8,7,6,-4,-7,-1,4],[10,-1,4,-2,4,10,-5,-1,3,-8,1,-8,-5,7,9],[-7,-3,-1,6,9,1,3,-2,-9,-4,-9,-10,-2,-10,-10],[2,2,-10,6,8,-6,-5,-7,5,-3,-2,8,9,-7,-10],[-10,8,10,4,-2,1,1,8,4,3,-4,2,-7,1,10],[10,-4,1,-6,1,-5,-7,8,-4,1,-2,2,-7,2,2],[-9,-1,3,-8,7,7,2,10,-9,4,2,3,7,5,-9],[-1,-9,1,6,-9,9,-5,-7,-2,-1,-6,-2,9,10,9],[8,8,-6,-9,8,-5,3,-9,5,9,-10,9,6,1,1]],[[-5,-2,8,4,8,5,-1,3,3,5,-8,-8,7,6,-10],[-8,5,10,7,1,5,1,8,-8,-4,4,-8,-8,6,2],[10,-3,-7,-10,-8,-2,-9,-3,-6,10,3,-3,-6,-5,6],[8,-7,-3,-5,-1,-4,-10,-3,-1,-3,9,5,-7,3,-3],[9,-7,2,3,2,4,4,-10,4,-3,4,-3,6,-10,-3],[-9,2,-1,5,6,5,-3,4,5,9,-7,2,2,1,8],[-2,-6,-3,3,-8,-3,-8,1,4,-2,-4,5,-10,-5,-8],[-2,-9,7,7,8,-8,10,1,-10,7,-7,-4,10,-9,2],[7,-8,-4,6,4,7,-7,9,-10,3,4,10,-4,9,-5],[-3,-9,-7,-5,-6,-9,2,-2,3,2,9,8,4,-2,-7],[6,-9,10,-9,1,3,-8,5,6,2,-4,3,-2,5,-10],[1,4,-2,-8,-7,-6,-8,-7,-4,10,2,9,-7,-2,5],[9,-7,-7,-5,-2,5,-7,2,-5,9,-6,-1,-4,-6,-3]],[[8,8,-4,6,2,-6,-6,10,-6,-8,-2,4,7,-2,-6],[-3,-8,2,6,3,-8,4,9,3,1,-10,4,-6,6,4],[-4,8,8,6,-10,1,-8,-1,9,4,-5,-2,-10,2,6],[-10,4,4,2,7,9,-9,3,1,5,-1,-2,1,-3,10],[2,-2,1,-10,6,-4,-7,9,4,1,7,-2,-9,1,-10],[3,-2,-10,-1,-6,10,-1,3,-7,1,-8,4,-7,7,-4],[10,8,-2,-5,-1,-1,8,-9,1,-8,6,3,8,-2,8],[1,-3,10,-1,10,3,-4,5,-4,1,-1,7,-8,1,-1],[8,-9,-3,10,-1,6,4,-6,5,-5,1,-7,9,-7,-7],[-1,10,-10,6,-7,-10,2,-2,3,10,6,-4,-4,-8,3],[-9,2,2,-10,-2,9,9,6,-2,1,-6,7,-9,1,2],[-3,-8,-8,-9,-3,7,-2,3,-10,-6,-1,7,2,-7,-1],[9,-9,1,9,8,-10,4,-3,-10,4,-5,10,-10,-8,-7]],[[7,-5,5,6,5,-8,10,6,8,10,4,6,-7,-8,5],[-6,-1,1,-8,-10,10,7,-9,-7,9,-9,-3,8,-1,-5],[-2,-9,3,-9,-6,3,6,-7,-2,-9,2,-3,3,4,-8],[10,-1,2,-8,2,-7,-1,-4,-7,-3,-7,-4,-9,-4,3],[-2,-1,-2,5,-4,-6,-4,4,-5,6,7,4,-6,2,-8],[3,8,2,-8,3,-8,3,-8,-9,9,-3,-9,-10,4,8],[-7,-1,-6,6,-2,8,-10,1,9,10,-7,4,4,2,8],[-9,10,1,-4,4,7,-5,2,-4,-8,-8,-7,-1,-8,8],[-5,-10,-6,-5,-9,-6,10,3,9,-4,10,-2,-6,-10,7],[2,-3,-7,5,-9,10,1,9,3,-1,-5,-8,-10,9,3],[-7,8,-9,-9,6,9,3,7,5,-10,-6,7,-9,2,-8],[3,-10,-3,5,-3,2,-10,-5,-9,-6,7,3,6,3,-1],[3,-6,5,1,-3,-3,-10,2,-8,6,-9,6,8,-5,9]],[[4,9,4,9,-4,-2,9,-7,-7,-3,1,-5,5,10,-4],[5,-3,-8,-8,2,1,-8,8,-3,-2,-8,-10,9,-6,-5],[-8,-10,5,-7,7,5,-7,-10,6,-10,4,1,-2,-9,-1],[-9,-3,1,-7,10,-10,-3,6,2,9,-2,1,-6,6,-1],[8,-6,-1,10,5,-3,7,-2,9,8,-7,2,-6,10,4],[8,3,4,1,1,7,3,-10,-6,-10,-9,-5,-6,9,-2],[9,-4,6,-4,3,-6,-1,-4,-5,-8,-7,3,-7,-4,7],[9,9,-6,-3,-3,8,-9,-8,10,5,8,4,-5,-10,-7],[-8,1,-10,-2,1,-9,5,-10,1,6,-7,-10,-6,3,-6],[1,9,-3,10,3,-3,10,10,-2,-9,9,-3,-8,3,-2],[-4,-5,6,-3,3,8,6,-3,10,-9,4,-5,-6,3,-4],[10,-10,2,-3,4,9,-10,-4,3,-8,2,-2,-6,-2,10],[8,6,5,5,3,1,-3,-6,6,10,-4,6,1,-6,3]],[[-3,-6,-8,-8,-6,-4,10,-2,4,-8,1,-9,7,9,7],[9,-2,8,5,-6,-9,-10,8,7,-7,8,-6,5,7,9],[5,-3,-3,10,8,-9,-4,8,-8,-6,10,4,-9,9,2],[-9,6,-7,-2,8,-1,-9,-5,-9,-9,-9,8,-5,2,-4],[-2,5,-6,8,9,10,-3,7,5,3,2,3,7,7,-3],[-6,-6,4,5,-10,2,-6,-8,-4,-10,6,-9,2,-8,7],[-1,-8,-6,-9,-8,7,8,4,-6,-10,5,6,7,-2,-8],[8,-2,8,-9,-10,7,-7,-9,-2,7,-9,8,-8,7,9],[9,-7,-2,-10,6,-9,7,8,5,1,2,8,-7,-4,-8],[-2,-8,9,-5,-2,1,4,7,4,-3,-6,6,6,10,-10],[3,-7,-10,-1,-7,8,6,8,7,5,-6,7,-5,-5,-3],[5,-6,6,-1,3,-2,8,6,-1,-7,-2,-7,4,2,-1],[6,-10,10,-8,-5,-9,-5,-4,4,-3,2,-5,-2,3,10]],[[-8,9,9,-6,-10,-10,-7,-9,-6,-6,5,2,-7,3,-10],[-5,1,6,5,7,-2,-6,9,-2,8,4,6,-7,2,-6],[-3,1,-4,4,-1,-5,-5,4,6,-1,-5,-10,-2,-5,-7],[7,1,3,-6,-5,7,4,2,-8,-5,3,-7,-1,1,3],[9,7,-9,7,9,-4,5,8,7,4,-6,-2,-3,2,-2],[-2,-5,3,1,-1,4,-5,-5,-4,1,-2,8,-2,8,-5],[-8,-1,7,-7,6,9,3,-8,-8,-1,-4,-6,9,-3,1],[-7,-6,2,-4,4,-6,9,8,10,-2,5,-5,10,10,-3],[3,7,-2,-5,-7,8,3,-5,-7,-6,-7,6,-1,-8,-10],[-1,-2,-4,-9,-1,-9,2,-6,-10,-5,1,7,-5,-4,1],[-3,6,-3,8,-9,-10,7,10,-2,-4,9,8,5,-6,6],[10,2,-5,-6,8,-3,6,2,-1,10,-9,5,7,-1,-6],[2,8,-3,8,-7,7,-5,-10,-2,-9,-10,-3,6,-2,3]],[[-7,7,-9,-8,2,-3,7,-3,-3,10,9,-10,3,-10,-6],[5,10,-9,-2,5,-2,2,-6,-8,2,-1,-8,-1,9,-7],[6,10,-6,4,4,4,8,7,3,-3,3,-5,-4,-1,-10],[2,2,2,9,-6,5,-10,5,9,3,2,5,-7,6,6],[6,-1,-7,6,1,8,-1,-3,8,-6,-1,8,-6,6,5],[-7,7,-9,3,2,-7,-1,1,-7,-3,1,-1,-1,8,-10],[-9,-3,-5,5,-8,-1,7,5,4,-8,-7,5,2,7,-5],[-10,-4,-3,5,-6,-4,10,-8,9,9,3,8,3,3,-9],[-7,-3,2,-9,-5,-4,1,-10,10,-3,9,-6,3,9,1],[4,-7,-8,-4,-9,-1,8,6,-3,9,7,3,9,5,1],[5,4,2,-2,1,5,-4,-6,-1,9,8,-10,-9,8,-4],[-8,6,-3,-5,5,8,-8,3,3,4,3,-7,-2,9,-10],[10,-6,-1,-5,5,2,9,4,-3,-7,-8,-8,3,-1,1]],[[9,-1,-8,-3,-9,-4,-2,1,7,4,1,-4,6,1,10],[-1,5,-4,-4,-7,-5,-4,-4,-4,8,-4,-9,10,-6,7],[6,4,9,6,5,6,4,9,-4,-10,-9,3,-5,-7,5],[6,1,-3,-10,-4,2,-6,-2,6,-6,-10,1,6,8,6],[7,-5,3,-1,-8,-9,6,7,-10,8,9,2,-1,5,-2],[-3,4,9,7,-10,4,-5,3,-2,5,1,-8,-6,-3,-8],[-4,6,-10,-3,3,-10,-1,1,7,10,-1,-7,-4,-8,4],[2,9,-3,-2,-6,10,-4,-2,-8,8,2,9,-10,2,9],[-8,-3,-8,-5,-5,-7,-8,-9,-8,1,4,-9,5,-5,-9],[-5,7,3,-6,-8,-1,9,8,10,-6,-5,-4,-5,-4,-6],[-7,10,-10,-1,-3,-9,-6,6,8,-3,8,-5,10,1,-10],[-7,-9,1,1,-6,-1,-1,-5,2,-4,6,-2,-4,8,-6],[-4,5,1,-3,-6,-9,5,-5,-8,2,3,-3,8,7,3]],[[-6,8,2,-7,-4,-5,-1,4,1,-4,-5,2,2,-5,7],[2,-7,-5,10,4,-5,8,9,4,5,10,7,-7,-1,-7],[10,-4,-10,6,2,-3,-8,5,-4,-5,6,-8,-9,-3,-7],[1,-10,6,5,-9,1,6,-4,9,9,-6,1,-10,-8,3],[3,-3,-2,-2,-1,5,-4,5,1,7,-8,-5,-8,-1,7],[-2,-1,-3,5,9,-8,-10,-5,-2,9,-6,-4,-5,-7,-9],[-2,5,7,8,3,8,4,-4,2,-7,7,7,-6,6,-1],[-8,-7,8,-2,3,-4,7,-10,-6,10,3,-7,-3,-3,6],[5,6,-6,-7,3,-4,-3,-6,5,-3,-7,2,-7,7,-3],[5,-5,-1,7,9,-8,-8,5,3,-6,-5,-5,7,2,-5],[6,-5,10,4,-6,7,8,-6,-9,-5,7,10,-4,5,10],[3,7,7,-5,-5,7,-4,9,-10,-9,5,-4,8,-1,-6],[-3,7,6,-7,6,-2,6,-10,6,-5,-6,10,7,-9,-1]]], dtype = "int64")#candidate|175|(13, 13, 15)|const|int64
bop_176 = relay.greater_equal(var_174.astype('bool'), relay.reshape(const_175.astype('bool'), relay.shape_of(var_174))) # shape=(13, 13, 15)
uop_182 = relay.rsqrt(var_174.astype('float64')) # shape=(13, 13, 15)
output = relay.Tuple([bop_176,uop_182,])
output2 = relay.Tuple([bop_176,uop_182,])
func_186 = relay.Function([var_174,], output)
mod['func_186'] = func_186
mod = relay.transform.InferType()(mod)
mutated_mod['func_186'] = func_186
mutated_mod = relay.transform.InferType()(mutated_mod)
var_187 = relay.var("var_187", dtype = "int64", shape = (13, 13, 15))#candidate|187|(13, 13, 15)|var|int64
func_186_call = mutated_mod.get_global_var('func_186')
call_188 = func_186_call(var_187)
output = call_188
func_189 = relay.Function([var_187], output)
mutated_mod['func_189'] = func_189
mutated_mod = relay.transform.InferType()(mutated_mod)
const_298 = relay.const(6, dtype = "uint8")#candidate|298|()|const|uint8
var_299 = relay.var("var_299", dtype = "uint8", shape = (8, 5, 14))#candidate|299|(8, 5, 14)|var|uint8
bop_300 = relay.equal(const_298.astype('bool'), var_299.astype('bool')) # shape=(8, 5, 14)
output = bop_300
output2 = bop_300
func_303 = relay.Function([var_299,], output)
mod['func_303'] = func_303
mod = relay.transform.InferType()(mod)
mutated_mod['func_303'] = func_303
mutated_mod = relay.transform.InferType()(mutated_mod)
var_304 = relay.var("var_304", dtype = "uint8", shape = (8, 5, 14))#candidate|304|(8, 5, 14)|var|uint8
func_303_call = mutated_mod.get_global_var('func_303')
call_305 = func_303_call(var_304)
output = call_305
func_306 = relay.Function([var_304], output)
mutated_mod['func_306'] = func_306
mutated_mod = relay.transform.InferType()(mutated_mod)
var_419 = relay.var("var_419", dtype = "float64", shape = (1, 12, 1))#candidate|419|(1, 12, 1)|var|float64
uop_420 = relay.acosh(var_419.astype('float64')) # shape=(1, 12, 1)
func_303_call = mod.get_global_var('func_303')
func_306_call = mutated_mod.get_global_var('func_306')
var_433 = relay.var("var_433", dtype = "uint8", shape = (560,))#candidate|433|(560,)|var|uint8
call_432 = func_303_call(relay.reshape(var_433.astype('uint8'), [8, 5, 14]))
call_434 = func_303_call(relay.reshape(var_433.astype('uint8'), [8, 5, 14]))
func_303_call = mod.get_global_var('func_303')
func_306_call = mutated_mod.get_global_var('func_306')
call_437 = func_303_call(relay.reshape(call_432.astype('uint8'), [8, 5, 14]))
call_438 = func_303_call(relay.reshape(call_432.astype('uint8'), [8, 5, 14]))
output = relay.Tuple([uop_420,call_432,var_433,call_437,])
output2 = relay.Tuple([uop_420,call_434,var_433,call_438,])
func_440 = relay.Function([var_419,var_433,], output)
mod['func_440'] = func_440
mod = relay.transform.InferType()(mod)
mutated_mod['func_440'] = func_440
mutated_mod = relay.transform.InferType()(mutated_mod)
func_440_call = mutated_mod.get_global_var('func_440')
var_442 = relay.var("var_442", dtype = "float64", shape = (1, 12, 1))#candidate|442|(1, 12, 1)|var|float64
var_443 = relay.var("var_443", dtype = "uint8", shape = (560,))#candidate|443|(560,)|var|uint8
call_441 = func_440_call(var_442,var_443,)
output = call_441
func_444 = relay.Function([var_442,var_443,], output)
mutated_mod['func_444'] = func_444
mutated_mod = relay.transform.InferType()(mutated_mod)
var_536 = relay.var("var_536", dtype = "float32", shape = (15, 9, 8))#candidate|536|(15, 9, 8)|var|float32
uop_537 = relay.atanh(var_536.astype('float32')) # shape=(15, 9, 8)
func_440_call = mod.get_global_var('func_440')
func_444_call = mutated_mod.get_global_var('func_444')
var_540 = relay.var("var_540", dtype = "float64", shape = (12,))#candidate|540|(12,)|var|float64
const_541 = relay.const([-5,1,-10,-10,7,-10,6,9,-9,-5,-8,-9,8,-5,-7,7,-9,-1,-1,8,4,-2,-5,-2,-7,9,7,4,-7,2,-1,5,7,1,-8,7,4,2,-2,6,-1,-7,-2,-6,1,-2,-6,4,-4,3,-3,3,2,9,-10,-3,9,-1,-2,7,-2,-6,5,-2,-7,10,-7,-9,8,3,4,-1,8,5,9,-1,-2,-3,-9,7,-2,-5,-10,6,-6,-8,-4,5,-2,-10,-2,-6,-10,-3,-4,6,-5,-4,7,3,-8,-4,-1,-6,1,8,9,-10,-2,1,-1,-3,7,-1,7,8,6,-10,2,2,2,-7,-3,-3,9,-3,8,-9,3,-9,-6,8,10,-3,-5,-6,-6,-9,1,5,5,-2,-6,-10,-1,-9,-10,10,-6,2,7,-10,2,-1,-3,-7,-6,5,-10,-1,6,7,-9,-5,2,-8,-5,4,-8,-4,-3,1,-10,1,1,-8,-2,-4,3,-7,7,6,2,1,4,2,6,9,2,-5,-2,4,9,-6,-7,9,-6,6,-4,-9,2,-10,-9,-6,8,7,-4,5,-9,10,-2,2,6,8,-4,-10,2,-9,-8,-3,-6,-6,3,6,2,10,4,4,9,-10,2,-1,10,5,-3,-4,-1,9,-4,6,10,-4,9,2,1,-10,2,7,-9,9,3,1,8,5,-7,-9,-10,-9,2,-4,-3,-6,-6,-6,7,9,1,-1,-1,2,-1,5,6,10,-5,-3,-1,-1,3,-3,3,10,3,-4,10,-4,-8,2,-3,4,-9,4,5,6,-5,8,-9,1,-10,6,-10,2,-9,4,9,10,4,-5,-1,6,-9,1,5,-2,8,6,10,8,2,-1,-9,-8,-5,1,-5,-2,-3,4,7,-2,6,5,-6,5,-6,-1,-5,7,4,-8,6,5,2,-7,7,-6,-9,-7,5,-5,8,5,6,3,-1,-1,10,-8,7,-3,-7,5,3,3,6,8,-5,-7,-4,-3,3,6,3,-8,-1,5,4,-6,-6,5,-8,-5,-4,5,5,5,-5,-1,-4,9,2,5,-5,-10,-1,-2,6,1,-10,-1,4,2,8,-8,-4,10,-8,-1,8,-4,6,8,-3,-5,-3,7,2,-9,-5,-3,-1,-5,9,-3,-7,6,3,7,-10,9,9,-5,5,9,8,-9,4,9,9,-10,9,10,-9,9,1,7,4,-9,5,-9,2,3,1,1,3,6,7,-3,-5,8,-10,4,-6,-3,2,5,1,10,-7,1,2,2,-5,8,9,6,2,3,4,10,-9,8,2,-3,-10,-8,4,-2,7,9,-9,-5,-6,10,6,5,-6,7,-2,-6,7,-5,-4,-1,10,-6,6,9,-10,1,-10,5,-1,5,-5,8,-4,2,-1,-8,-5,-7,6,5,4,5,-4,1,3,1,-6,7,-1,8,5,2,-2,3,6,7,-5,5,1,7,3,-1,6,-6,8,-8,4,3,10,8,-3,7,7,9,9,3], dtype = "uint8")#candidate|541|(560,)|const|uint8
call_539 = relay.TupleGetItem(func_440_call(relay.reshape(var_540.astype('float64'), [1, 12, 1]), relay.reshape(const_541.astype('uint8'), [560,]), ), 3)
call_542 = relay.TupleGetItem(func_444_call(relay.reshape(var_540.astype('float64'), [1, 12, 1]), relay.reshape(const_541.astype('uint8'), [560,]), ), 3)
bop_552 = relay.left_shift(var_536.astype('int16'), relay.reshape(uop_537.astype('int16'), relay.shape_of(var_536))) # shape=(15, 9, 8)
bop_559 = relay.less_equal(uop_537.astype('bool'), relay.reshape(var_536.astype('bool'), relay.shape_of(uop_537))) # shape=(15, 9, 8)
output = relay.Tuple([call_539,var_540,const_541,bop_552,bop_559,])
output2 = relay.Tuple([call_542,var_540,const_541,bop_552,bop_559,])
func_564 = relay.Function([var_536,var_540,], output)
mod['func_564'] = func_564
mod = relay.transform.InferType()(mod)
var_565 = relay.var("var_565", dtype = "float32", shape = (15, 9, 8))#candidate|565|(15, 9, 8)|var|float32
var_566 = relay.var("var_566", dtype = "float64", shape = (12,))#candidate|566|(12,)|var|float64
output = func_564(var_565,var_566,)
func_567 = relay.Function([var_565,var_566,], output)
mutated_mod['func_567'] = func_567
mutated_mod = relay.transform.InferType()(mutated_mod)
var_699 = relay.var("var_699", dtype = "uint32", shape = ())#candidate|699|()|var|uint32
var_700 = relay.var("var_700", dtype = "uint32", shape = (14, 1))#candidate|700|(14, 1)|var|uint32
bop_701 = relay.less(var_699.astype('bool'), var_700.astype('bool')) # shape=(14, 1)
output = relay.Tuple([bop_701,])
output2 = relay.Tuple([bop_701,])
func_725 = relay.Function([var_699,var_700,], output)
mod['func_725'] = func_725
mod = relay.transform.InferType()(mod)
mutated_mod['func_725'] = func_725
mutated_mod = relay.transform.InferType()(mutated_mod)
func_725_call = mutated_mod.get_global_var('func_725')
var_727 = relay.var("var_727", dtype = "uint32", shape = ())#candidate|727|()|var|uint32
var_728 = relay.var("var_728", dtype = "uint32", shape = (14, 1))#candidate|728|(14, 1)|var|uint32
call_726 = func_725_call(var_727,var_728,)
output = call_726
func_729 = relay.Function([var_727,var_728,], output)
mutated_mod['func_729'] = func_729
mutated_mod = relay.transform.InferType()(mutated_mod)
var_800 = relay.var("var_800", dtype = "uint32", shape = (1, 2, 8))#candidate|800|(1, 2, 8)|var|uint32
const_801 = relay.const([[[9,2,-10,-8,10,-6,-7,-6],[-7,-4,3,5,10,6,7,-2]]], dtype = "uint32")#candidate|801|(1, 2, 8)|const|uint32
bop_802 = relay.add(var_800.astype('uint32'), relay.reshape(const_801.astype('uint32'), relay.shape_of(var_800))) # shape=(1, 2, 8)
output = relay.Tuple([bop_802,])
output2 = relay.Tuple([bop_802,])
func_805 = relay.Function([var_800,], output)
mod['func_805'] = func_805
mod = relay.transform.InferType()(mod)
mutated_mod['func_805'] = func_805
mutated_mod = relay.transform.InferType()(mutated_mod)
var_806 = relay.var("var_806", dtype = "uint32", shape = (1, 2, 8))#candidate|806|(1, 2, 8)|var|uint32
func_805_call = mutated_mod.get_global_var('func_805')
call_807 = func_805_call(var_806)
output = call_807
func_808 = relay.Function([var_806], output)
mutated_mod['func_808'] = func_808
mutated_mod = relay.transform.InferType()(mutated_mod)
var_883 = relay.var("var_883", dtype = "uint32", shape = (11, 14, 11))#candidate|883|(11, 14, 11)|var|uint32
var_884 = relay.var("var_884", dtype = "uint32", shape = (11, 14, 11))#candidate|884|(11, 14, 11)|var|uint32
bop_885 = relay.bitwise_xor(var_883.astype('uint32'), relay.reshape(var_884.astype('uint32'), relay.shape_of(var_883))) # shape=(11, 14, 11)
uop_888 = relay.erf(bop_885.astype('float32')) # shape=(11, 14, 11)
output = relay.Tuple([uop_888,])
output2 = relay.Tuple([uop_888,])
func_896 = relay.Function([var_883,var_884,], output)
mod['func_896'] = func_896
mod = relay.transform.InferType()(mod)
var_897 = relay.var("var_897", dtype = "uint32", shape = (11, 14, 11))#candidate|897|(11, 14, 11)|var|uint32
var_898 = relay.var("var_898", dtype = "uint32", shape = (11, 14, 11))#candidate|898|(11, 14, 11)|var|uint32
output = func_896(var_897,var_898,)
func_899 = relay.Function([var_897,var_898,], output)
mutated_mod['func_899'] = func_899
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1476 = relay.var("var_1476", dtype = "float64", shape = (3, 9, 16))#candidate|1476|(3, 9, 16)|var|float64
uop_1477 = relay.atanh(var_1476.astype('float64')) # shape=(3, 9, 16)
uop_1479 = relay.asinh(uop_1477.astype('float32')) # shape=(3, 9, 16)
output = relay.Tuple([uop_1479,])
output2 = relay.Tuple([uop_1479,])
func_1484 = relay.Function([var_1476,], output)
mod['func_1484'] = func_1484
mod = relay.transform.InferType()(mod)
mutated_mod['func_1484'] = func_1484
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1485 = relay.var("var_1485", dtype = "float64", shape = (3, 9, 16))#candidate|1485|(3, 9, 16)|var|float64
func_1484_call = mutated_mod.get_global_var('func_1484')
call_1486 = func_1484_call(var_1485)
output = call_1486
func_1487 = relay.Function([var_1485], output)
mutated_mod['func_1487'] = func_1487
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1699 = relay.var("var_1699", dtype = "float64", shape = ())#candidate|1699|()|var|float64
var_1700 = relay.var("var_1700", dtype = "float64", shape = (16, 6, 16))#candidate|1700|(16, 6, 16)|var|float64
bop_1701 = relay.floor_divide(var_1699.astype('float64'), var_1700.astype('float64')) # shape=(16, 6, 16)
output = bop_1701
output2 = bop_1701
func_1729 = relay.Function([var_1699,var_1700,], output)
mod['func_1729'] = func_1729
mod = relay.transform.InferType()(mod)
var_1730 = relay.var("var_1730", dtype = "float64", shape = ())#candidate|1730|()|var|float64
var_1731 = relay.var("var_1731", dtype = "float64", shape = (16, 6, 16))#candidate|1731|(16, 6, 16)|var|float64
output = func_1729(var_1730,var_1731,)
func_1732 = relay.Function([var_1730,var_1731,], output)
mutated_mod['func_1732'] = func_1732
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2152 = relay.var("var_2152", dtype = "float32", shape = ())#candidate|2152|()|var|float32
var_2153 = relay.var("var_2153", dtype = "float32", shape = (14, 3, 9))#candidate|2153|(14, 3, 9)|var|float32
bop_2154 = relay.power(var_2152.astype('float32'), var_2153.astype('float32')) # shape=(14, 3, 9)
output = bop_2154
output2 = bop_2154
func_2157 = relay.Function([var_2152,var_2153,], output)
mod['func_2157'] = func_2157
mod = relay.transform.InferType()(mod)
mutated_mod['func_2157'] = func_2157
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2157_call = mutated_mod.get_global_var('func_2157')
var_2159 = relay.var("var_2159", dtype = "float32", shape = ())#candidate|2159|()|var|float32
var_2160 = relay.var("var_2160", dtype = "float32", shape = (14, 3, 9))#candidate|2160|(14, 3, 9)|var|float32
call_2158 = func_2157_call(var_2159,var_2160,)
output = call_2158
func_2161 = relay.Function([var_2159,var_2160,], output)
mutated_mod['func_2161'] = func_2161
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2307 = relay.var("var_2307", dtype = "uint16", shape = (5, 2, 3))#candidate|2307|(5, 2, 3)|var|uint16
var_2308 = relay.var("var_2308", dtype = "uint16", shape = (5, 2, 3))#candidate|2308|(5, 2, 3)|var|uint16
bop_2309 = relay.multiply(var_2307.astype('uint16'), relay.reshape(var_2308.astype('uint16'), relay.shape_of(var_2307))) # shape=(5, 2, 3)
uop_2312 = relay.exp(var_2307.astype('float64')) # shape=(5, 2, 3)
output = relay.Tuple([bop_2309,uop_2312,])
output2 = relay.Tuple([bop_2309,uop_2312,])
func_2314 = relay.Function([var_2307,var_2308,], output)
mod['func_2314'] = func_2314
mod = relay.transform.InferType()(mod)
var_2315 = relay.var("var_2315", dtype = "uint16", shape = (5, 2, 3))#candidate|2315|(5, 2, 3)|var|uint16
var_2316 = relay.var("var_2316", dtype = "uint16", shape = (5, 2, 3))#candidate|2316|(5, 2, 3)|var|uint16
output = func_2314(var_2315,var_2316,)
func_2317 = relay.Function([var_2315,var_2316,], output)
mutated_mod['func_2317'] = func_2317
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2347 = relay.var("var_2347", dtype = "uint64", shape = (5, 15, 14))#candidate|2347|(5, 15, 14)|var|uint64
var_2348 = relay.var("var_2348", dtype = "uint64", shape = (5, 15, 14))#candidate|2348|(5, 15, 14)|var|uint64
bop_2349 = relay.bitwise_xor(var_2347.astype('uint64'), relay.reshape(var_2348.astype('uint64'), relay.shape_of(var_2347))) # shape=(5, 15, 14)
output = relay.Tuple([bop_2349,])
output2 = relay.Tuple([bop_2349,])
func_2357 = relay.Function([var_2347,var_2348,], output)
mod['func_2357'] = func_2357
mod = relay.transform.InferType()(mod)
mutated_mod['func_2357'] = func_2357
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2357_call = mutated_mod.get_global_var('func_2357')
var_2359 = relay.var("var_2359", dtype = "uint64", shape = (5, 15, 14))#candidate|2359|(5, 15, 14)|var|uint64
var_2360 = relay.var("var_2360", dtype = "uint64", shape = (5, 15, 14))#candidate|2360|(5, 15, 14)|var|uint64
call_2358 = func_2357_call(var_2359,var_2360,)
output = call_2358
func_2361 = relay.Function([var_2359,var_2360,], output)
mutated_mod['func_2361'] = func_2361
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2366 = relay.var("var_2366", dtype = "float64", shape = (12, 2, 14))#candidate|2366|(12, 2, 14)|var|float64
uop_2367 = relay.atan(var_2366.astype('float64')) # shape=(12, 2, 14)
func_564_call = mod.get_global_var('func_564')
func_567_call = mutated_mod.get_global_var('func_567')
const_2375 = relay.const([-4.720422,-7.484733,8.673541,-6.455612,-7.739836,-4.368176,-0.338515,-7.324728,-4.591126,9.394137,6.275350,-0.463991,0.208753,2.491743,-6.288293,4.600757,-4.735506,-0.016335,7.966153,8.220331,-5.399967,-7.290033,-6.788978,9.460824,-7.523591,-4.687871,-7.473927,6.479550,-8.744084,-1.023788,1.720827,3.231589,8.484902,7.093373,-8.148864,-8.229443,3.396538,4.056137,-0.777069,-1.970145,-2.788844,-1.238237,5.312343,-3.563706,-8.456319,3.371472,-3.959680,4.880156,-8.222545,5.342877,6.356984,-5.278916,-1.234233,-6.369253,-9.243251,4.884982,-3.014158,0.350007,7.174155,8.985466,-1.668618,-8.559563,1.862370,-7.817162,-7.192601,-2.156288,-3.624196,-3.770359,-5.227443,4.380771,1.165743,0.713337,-1.654595,-7.959364,4.761573,9.690248,-7.949469,-2.676772,3.533985,9.418311,-6.528784,-7.544845,-7.092160,-4.944822,7.728861,8.634819,-8.903656,-0.748350,4.734253,7.264549,-8.744431,-0.897834,-9.753232,-0.221544,-2.650156,3.084110,0.633455,6.049216,0.051543,8.027749,0.106543,6.866855,2.421444,-9.756697,-8.376446,3.188562,-3.644402,3.168842,2.821873,-8.612694,-3.768415,-8.018164,5.027410,3.727072,2.418572,-5.197906,-2.272911,3.894905,4.837086,-2.259352,9.049750,8.812605,-8.768145,-3.218236,-2.909413,1.067086,-5.726287,4.379843,8.824142,-5.230040,1.384875,1.954473,4.621626,2.947849,-1.480103,-0.869906,-1.413815,4.762557,1.334617,-2.009428,-3.845425,-1.872412,1.848575,4.014904,-0.319201,-1.412000,-9.736060,4.658837,-4.762779,-4.872876,5.929273,-1.387378,-4.181148,-7.069524,3.342104,-0.937436,-9.507648,-0.383738,-8.360181,-6.073875,-0.284357,-9.943280,-4.642718,-0.420959,-5.439397,0.593496,3.149465,4.649133,7.735591,0.443564,-2.238239,-2.703382,-8.741861,6.948675,-6.679739,-4.039117,-5.044420,3.711859,-3.429160,8.151795,8.890097,-7.736646,-0.387283,-0.698168,1.627598,-7.158532,8.005943,-6.968833,4.142248,-7.878646,9.360014,-4.154869,6.633700,-0.091169,9.401809,6.694931,-4.075112,-3.662186,5.755828,-5.298263,-8.155715,6.550667,-8.142272,-4.564030,4.095640,5.202740,9.525584,-6.881350,-6.394608,-5.207024,-7.374645,-6.335306,-6.920985,9.507465,0.381917,-2.886940,-2.759845,-6.371449,-2.777582,-0.032979,9.804336,-3.081451,-8.736910,-4.874206,-0.094982,-3.606857,-1.098637,3.525764,0.432706,-9.789679,9.786725,3.324954,-9.676671,-8.242975,-8.017276,-4.057896,-9.128847,-7.993938,7.935087,5.701544,9.978876,-3.105448,-4.871159,-3.323990,-0.007886,5.922269,-8.344018,9.027978,-0.316269,5.182544,7.290101,-2.482577,-5.576430,-6.104101,3.002993,2.391714,6.601006,-5.243168,-6.206284,-5.736876,-3.812400,-0.198757,-0.405241,4.492445,8.257572,4.049243,3.865133,-5.737082,-7.687895,5.247538,0.311134,-3.851529,2.176687,-3.042064,-2.622000,-5.661597,-0.818312,8.875833,5.840673,2.775907,8.243443,5.227578,2.077760,-3.262250,-4.004156,4.555745,4.162878,-2.317451,0.367193,-2.218884,9.860241,-7.541876,7.739601,-4.727178,-2.897093,0.957637,-3.023829,-1.213002,-2.571408,2.999891,5.447816,-7.109784,0.666423,8.853122,-2.920805,-9.254809,-5.414317,7.582202,-6.650755,-2.043678,-5.863598,-1.285095,-1.898424,-1.131213,8.431561,0.855160,-8.113698,5.871728,6.129121,-2.438443,-6.370695,1.319582,6.079305,-1.968526,4.928503,9.856958,-6.163561,-4.294086,-0.662485,-5.381942,7.143968,-4.415968,4.535971,7.485081,-0.815753,-3.453049,-0.160870,-2.655915,4.136709,7.399144,9.329926,-4.193187,-0.286349,1.308643,9.478859,-9.703723,3.304379,-7.332766,1.449669,7.041942,-0.821335,-5.915539,-3.584861,-2.916398,-5.517009,-1.089750,-6.643120,1.015965,5.935477,-0.420010,-1.446360,6.677579,1.681310,4.082562,5.911724,3.324338,-0.002867,-1.430648,-8.930092,-4.199966,-1.258880,-3.477773,7.530227,4.802339,-3.082633,9.248815,7.615795,7.274241,0.359996,7.522957,6.960852,-5.697285,-1.430553,-5.779201,4.039769,0.659732,1.710544,8.374906,-2.915701,-2.016951,-6.708551,7.267829,-7.328072,-8.569964,1.977948,3.153059,-4.082709,9.610746,-5.128819,9.002074,-9.002388,-1.661729,4.714395,7.296059,-4.769195,-5.792020,5.610801,-2.271173,-2.118552,1.117570,-4.980900,3.575231,-9.862892,-9.246513,-1.356890,2.190238,-8.214886,0.346951,7.529462,9.391856,-6.375076,-6.366080,-5.601791,3.251879,2.643923,-5.742223,3.062451,2.885311,-5.966226,9.064219,7.557412,-3.992830,-2.808159,3.357797,-5.657534,8.051998,4.813544,-2.072555,8.975462,-1.193439,5.757012,-2.048761,-3.713948,-4.439014,1.365184,-3.629899,-9.484392,6.892649,-3.894723,-9.751568,3.531197,0.505886,2.156634,-4.117273,5.176625,-2.378956,-9.134533,-0.081412,-5.118631,4.444164,-9.187678,-0.663721,-5.313288,4.547244,9.341774,5.676599,5.116310,1.269141,8.999986,2.127036,-0.660348,4.780975,3.864563,-4.709505,-6.053343,7.578810,1.701317,-4.924572,9.525587,-2.964995,6.192000,-9.118594,-3.804590,-0.521470,0.198276,-0.224266,2.048013,-3.885045,3.159701,-9.065308,4.504740,-2.464240,7.902397,-9.195699,-3.793155,7.287695,6.077035,5.526361,0.779833,0.157741,4.089904,7.307022,8.659846,0.976435,-4.821350,-7.157669,-2.014352,-9.181890,8.239721,-1.773457,1.475199,-3.985654,8.894995,-6.038865,4.068993,-3.046983,1.646886,1.918879,2.644188,-5.968246,-3.910096,5.893236,1.445207,-4.158013,8.850360,2.451651,9.650958,3.003092,3.522103,7.262878,6.883283,2.884324,5.159062,7.725559,-1.968520,-2.694690,-1.789388,9.966367,1.350290,8.266019,-1.575183,8.262110,-0.136323,3.549263,-9.141550,-1.833625,-9.108371,9.309365,-1.337186,-0.929263,-2.762589,4.596122,1.792724,-5.495529,-3.902234,5.528686,-8.286072,-9.189408,6.494823,-1.101128,8.163069,1.641048,3.631631,8.207337,6.698790,-3.823407,5.417497,-8.092901,-7.900955,3.824803,-2.189409,3.465416,-5.252594,1.777944,5.516773,6.024512,-8.985042,-5.427488,3.395863,8.454809,-9.490661,-8.868208,2.023549,-0.704309,-7.898921,2.583238,-3.788069,4.087844,-4.536765,-6.014460,6.105830,-8.262145,-0.197126,4.111352,2.273829,-3.277717,-0.176246,0.987222,5.372812,5.217490,0.559826,4.750647,1.094935,-3.496097,1.844132,-6.987192,3.411054,0.667048,9.518313,5.831826,6.787240,-9.858309,2.315846,-3.172295,1.484138,-3.380158,-3.471791,-6.665403,-2.580618,4.811833,8.190501,-6.364120,2.981112,-5.977871,-2.273439,6.153183,2.879297,7.615352,5.052605,-4.591383,8.126262,8.657161,-3.763360,-6.437449,6.945849,-4.085573,4.737134,7.283664,-6.354516,4.047416,3.303241,8.361451,3.669649,8.868988,-1.750410,5.427620,-4.441315,4.164658,1.577582,-9.203157,8.326735,0.316591,7.399196,5.377594,5.814641,8.009504,0.779577,2.099339,0.667381,9.423178,-6.092864,-1.698096,-7.625372,0.280750,1.600722,-3.697774,0.915951,1.837745,-7.768439,-2.207175,5.257098,-7.031741,-0.372772,3.671307,1.576065,4.479745,-3.287115,-7.268952,6.555006,-2.977192,1.273295,-0.094344,-0.476013,-7.056717,-2.198135,-5.047032,-9.113092,5.793196,3.830999,-1.814553,5.702022,-4.652659,8.442655,-6.864429,4.962915,0.362961,2.668105,3.513361,3.709923,-9.033122,-9.564240,-1.745430,-2.533095,-6.596084,-2.036035,-1.118870,-1.641458,1.068644,9.076845,2.081042,-5.628531,-0.965333,-5.405101,-6.286160,2.196060,7.360318,9.105220,-8.250695,6.422281,7.432452,0.887057,-9.794067,6.725877,-0.704624,0.399440,7.219125,-6.606702,-2.083331,1.217343,6.016240,9.465917,-4.688219,-3.857515,-2.720093,6.819996,1.724293,8.828328,7.790635,-5.034255,-6.062940,5.723335,8.021972,9.458084,-3.259620,-6.675767,3.201888,-6.100733,7.962339,-1.441111,3.218507,9.546042,-5.731900,-8.207944,2.841642,4.176608,-7.706325,0.630065,4.390296,0.872606,7.074379,8.560306,-6.079604,3.574795,-8.043229,3.454158,2.074300,-6.688406,-5.044502,1.144297,7.717082,4.680761,8.724323,-0.438843,0.631995,-5.513888,1.304967,2.082238,-5.330988,0.005044,-4.559863,-0.446015,-2.296919,5.973374,5.828372,-5.592176,-7.538827,-7.638947,9.945193,-5.003574,3.067386,7.584543,-9.433711,-2.087389,7.657562,7.814165,-7.618835,-6.672656,-5.579707,1.821944,-1.150761,9.575112,7.038236,7.742062,-8.620669,0.089269,-3.227464,-0.831604,2.317746,7.804101,6.426532,-1.013291,-1.622025,-1.035735,7.936601,-9.033226,5.389691,-2.355913,-2.301952,3.344544,5.662957,-6.537370,-7.443834,-0.806778,1.365500,-7.424663,-5.262162,-4.723205,8.282184,6.435016,4.972342,3.279206,1.905506,0.282440,4.156741,-7.941598,-4.754095,-9.290738,-3.853900,-9.691931,5.054036,-7.360978,-2.214940,-3.324316,4.479758,-4.172293,-4.845737,6.669012,0.532010,7.580024,-7.288101,4.374225,-3.799501,6.489197,-2.802066,-5.937286,-5.995086,9.396114,2.900213,3.995665,1.098332,5.672163,4.427817,-9.009726,-1.064072,4.439010,4.137338,3.184656,-1.779256,-2.352571,-3.511556,-8.044854,3.157859,9.537960,-1.120016,5.580268,-3.556841,7.478877,-1.050180,-9.733304,7.999457,2.757354,-3.877112,-8.172086,6.914067,2.021781,6.740566,-1.079441,6.642240,5.124984,-7.928410,-7.663859,-8.560940,-3.391223,8.571850,1.365107,-1.652667,9.933287,4.103818,-8.959354,3.649679,-9.383502,5.350736,0.065368,6.009084,-4.792698,-9.678892,-3.190336,-0.407259,1.653754,-1.656199,-4.077941,1.625220,8.676213,4.582398,7.386645,-9.900000,4.819106,-7.522721,-7.557007,-1.457584,-5.939803,3.669818,3.865899,2.682329,1.609127,0.169843,9.570236,-2.960124,1.520742,-4.087282,-2.508893,-8.607627,-0.405381,-5.737027,-5.048517,-0.175678,3.631753,-9.921509,2.349435,4.325955,1.803729,8.160908,3.900237,5.249646,8.345724,5.114845,-7.598210,-4.161986,6.167543,-0.782114,4.176562,-3.615439,-5.827195,2.797853,-3.466787,7.103920,1.859724,-3.057146,-3.760436,5.006758,3.705452,6.452069,-4.949906,1.940424,-6.564891,-4.858561,-6.098907,6.580605,7.897854,-3.680321,1.027954,0.137297,-3.509772,-6.509697,2.359654,2.619949,-7.788358,7.327924,-6.477082,-5.092816,-8.069302,-2.065668,8.824707,3.443548,-3.813629,2.518567,1.068449,-8.569173,-3.814131,-4.452189,-5.929884,2.821462,-9.959569,3.268285,8.509134,-3.811474,-0.282284,-4.164847,-2.290383,-0.308008,0.958801,-0.236938,-9.622367,0.746636,2.260522,8.690376,3.291373,3.265176,9.167916,-8.405756,-0.924047,-3.950620,0.125439,4.733898,-3.130306,-4.988922,7.199677,3.827627,4.010180,-0.915782,-5.267380,-9.672042,-6.091986,-9.780743,-2.056972,-1.731103,5.530424,-6.786288,1.462457,-7.100044,5.042105,-5.055715,4.290870,4.595702,-8.231188,-0.531694,9.725439,-6.967590,-9.356396,4.383060,5.803912,3.269667,-9.568255,5.885823,2.545805,0.433283,-2.611522,9.761737,8.050444,-1.640595,4.143458,4.666812,5.544049,-2.018849,-2.988883,-3.061956,-6.820099,-2.913744,1.564382,-3.600867,8.659514,-8.411079,2.480070,0.226672,-9.952613,-4.777922,-7.471233,-5.440826,9.608875,8.378666,-5.162842,9.507245,-9.150142,3.745417,2.861860,-1.143777,7.214682,-1.850387,9.875124,-3.432430], dtype = "float32")#candidate|2375|(1080,)|const|float32
const_2376 = relay.const([-9.207079,2.013200,-3.670927,2.768718,3.131309,8.445400,-1.159079,3.833293,9.215238,-3.190358,-3.374534,3.714790], dtype = "float64")#candidate|2376|(12,)|const|float64
call_2374 = relay.TupleGetItem(func_564_call(relay.reshape(const_2375.astype('float32'), [15, 9, 8]), relay.reshape(const_2376.astype('float64'), [12,]), ), 1)
call_2377 = relay.TupleGetItem(func_567_call(relay.reshape(const_2375.astype('float32'), [15, 9, 8]), relay.reshape(const_2376.astype('float64'), [12,]), ), 1)
func_2157_call = mod.get_global_var('func_2157')
func_2161_call = mutated_mod.get_global_var('func_2161')
const_2380 = relay.const(-3.765754, dtype = "float32")#candidate|2380|()|const|float32
const_2381 = relay.const([-6.232301,9.907147,-4.813150,-2.754386,7.689768,0.829094,-2.929042,0.868108,-6.699401,4.347506,-9.253274,-9.273915,5.618893,1.475299,5.249871,1.110371,4.403431,-0.884883,0.710983,0.156410,9.265883,5.781087,8.747045,-0.135843,4.503843,-8.461765,-8.366952,8.602916,4.035159,-4.950572,-6.680142,-2.527916,-2.767811,2.621231,6.692878,-1.185785,1.560869,1.017372,-5.241256,-5.088260,7.822881,-3.631777,5.417640,1.817100,-2.449593,5.312413,9.269030,-9.884673,-1.372944,3.301476,-4.614396,-5.881078,-7.060683,0.181051,-7.167713,-6.429594,-0.822045,6.020074,-7.474088,-0.390435,-0.628047,3.614656,8.726269,-3.864430,9.804868,-5.622760,0.071065,9.388659,-5.433257,6.190096,-3.591632,-7.046176,-0.807780,-8.467184,-1.607279,4.458118,-8.255241,-0.745560,-4.153438,4.729079,1.770183,9.618305,0.651027,-5.544494,2.821165,-2.628775,7.389272,-1.192716,-7.603891,-4.896105,1.398476,7.334285,3.292213,-5.446325,-4.839344,1.001877,7.033401,3.711161,-3.621077,-8.352498,8.987437,2.603966,2.538258,-2.316806,1.620811,-1.316791,-2.719101,-4.618075,3.919486,4.454554,0.913071,8.173734,0.988510,8.511483,-6.826190,-9.829977,-7.689773,-9.575022,3.273486,8.960441,-2.467362,-1.227799,8.546859,-5.566271,8.932978,5.087202,-2.309875,7.754226,0.844324,2.733889,-9.400567,4.904819,-2.291082,-5.999752,-9.168332,-0.649227,0.026767,5.656760,7.260987,0.616084,2.535532,4.143353,-5.421873,1.458601,7.651161,2.269207,-7.799108,-9.380516,3.875345,2.542949,-8.882000,-9.552520,-3.113403,6.008649,6.966412,-6.153629,3.863915,-3.358896,-8.162323,2.614336,3.435916,8.143100,1.826138,-4.893982,-6.051021,-8.228350,7.468665,-5.839747,-9.816698,2.256545,-8.196245,-4.187707,-8.663100,7.555321,-8.644978,-6.420030,-4.441566,-9.475388,-6.272419,-7.618934,-9.781217,8.288235,3.533618,9.204713,9.445087,0.065907,-4.329793,6.800145,-8.706920,9.408826,3.676309,-5.385572,7.471761,0.495015,8.196693,-2.629937,-8.284185,5.257574,8.191028,1.488174,-1.289578,-1.740586,-0.430102,8.231801,6.680352,-9.754441,-2.553722,-3.550684,6.528067,9.287739,3.222034,-6.692331,-7.905055,8.562570,-2.222815,-8.705902,0.877529,1.830403,6.577425,-0.251440,4.481809,9.732573,-8.268355,4.644231,-1.375669,-3.955299,-1.377983,9.382313,9.133829,-0.390112,-4.005703,-3.554986,7.373993,5.830377,-4.099492,0.456401,-2.312079,5.439967,-9.252659,-8.840736,-2.292191,-2.042030,0.916681,6.279500,-0.059778,-6.359110,-7.279237,-6.176712,-0.233919,-4.603440,-1.191240,-5.655114,7.224064,7.618798,-3.536151,-0.030819,-5.787260,9.717423,-6.914483,-3.853240,-2.681847,6.685333,1.327516,0.441963,-7.865003,-9.359675,8.467623,9.574994,8.492211,4.865234,3.985045,-1.707070,-2.766103,9.872736,-8.522921,-7.338420,8.744729,6.837743,3.060972,-5.974467,0.119976,-9.342202,-2.310262,6.448321,-7.737547,7.168129,-2.833452,-7.582980,-8.074218,5.505337,6.068358,6.433663,-7.916808,-3.290087,2.805447,4.784124,3.857352,-9.793369,4.972525,9.532898,-9.352066,2.283642,-3.691153,2.213384,-3.584400,1.621391,-6.067162,-9.851036,-8.482557,5.143756,5.922030,-0.599368,-1.767093,-2.204588,-2.634619,-7.448461,8.999278,7.327092,9.971760,-3.651061,6.081943,4.580243,-6.433040,-0.717345,-9.912481,1.092906,-8.793075,3.668390,-2.515221,7.574689,5.930237,5.561239,7.559780,6.253603,9.238386,-6.639390,2.777946,4.179751,7.834693,-5.697608,4.787858,-2.101395,2.020206,-5.065642,4.365674,-6.112677,5.994840,1.621293,-7.480521,3.114722,-7.508232,3.519989,-5.551308,-9.610533,-8.613307,7.479962,-8.245823,-8.740881,7.902838,0.894647,-2.712313,-3.514827,6.107226,-6.867682,-0.745972,5.428123,-5.522193,-9.459766,8.420721,-6.960082,-5.130525,1.244796,2.242448,-6.363260,9.566520,-4.632295,-7.336670,2.821430], dtype = "float32")#candidate|2381|(378,)|const|float32
call_2379 = func_2157_call(relay.reshape(const_2380.astype('float32'), []), relay.reshape(const_2381.astype('float32'), [14, 3, 9]), )
call_2382 = func_2157_call(relay.reshape(const_2380.astype('float32'), []), relay.reshape(const_2381.astype('float32'), [14, 3, 9]), )
func_725_call = mod.get_global_var('func_725')
func_729_call = mutated_mod.get_global_var('func_729')
const_2384 = relay.const([3,-3,-6,2,-3,-2,4,1,-1,7,8,4,-4,9], dtype = "uint32")#candidate|2384|(14,)|const|uint32
call_2383 = relay.TupleGetItem(func_725_call(relay.reshape(const_2380.astype('uint32'), []), relay.reshape(const_2384.astype('uint32'), [14, 1]), ), 0)
call_2385 = relay.TupleGetItem(func_729_call(relay.reshape(const_2380.astype('uint32'), []), relay.reshape(const_2384.astype('uint32'), [14, 1]), ), 0)
output = relay.Tuple([uop_2367,call_2374,const_2375,const_2376,call_2379,const_2380,const_2381,call_2383,const_2384,])
output2 = relay.Tuple([uop_2367,call_2377,const_2375,const_2376,call_2382,const_2380,const_2381,call_2385,const_2384,])
func_2386 = relay.Function([var_2366,], output)
mod['func_2386'] = func_2386
mod = relay.transform.InferType()(mod)
var_2387 = relay.var("var_2387", dtype = "float64", shape = (12, 2, 14))#candidate|2387|(12, 2, 14)|var|float64
output = func_2386(var_2387)
func_2388 = relay.Function([var_2387], output)
mutated_mod['func_2388'] = func_2388
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2432 = relay.var("var_2432", dtype = "float64", shape = (3, 9, 5))#candidate|2432|(3, 9, 5)|var|float64
uop_2433 = relay.tan(var_2432.astype('float64')) # shape=(3, 9, 5)
func_2157_call = mod.get_global_var('func_2157')
func_2161_call = mutated_mod.get_global_var('func_2161')
const_2440 = relay.const(-7.166460, dtype = "float32")#candidate|2440|()|const|float32
var_2441 = relay.var("var_2441", dtype = "float32", shape = (378,))#candidate|2441|(378,)|var|float32
call_2439 = func_2157_call(relay.reshape(const_2440.astype('float32'), []), relay.reshape(var_2441.astype('float32'), [14, 3, 9]), )
call_2442 = func_2157_call(relay.reshape(const_2440.astype('float32'), []), relay.reshape(var_2441.astype('float32'), [14, 3, 9]), )
func_186_call = mod.get_global_var('func_186')
func_189_call = mutated_mod.get_global_var('func_189')
const_2455 = relay.const([8,4,-1,2,-4,7,6,-4,-5,1,-6,9,-9,4,-6,2,2,-7,-6,-4,-1,-4,-5,9,7,-1,8,8,9,-7,-10,8,-4,-6,-5,3,-5,4,-5,1,4,4,-2,-9,8,-3,-4,-2,-5,1,3,5,-10,8,-3,-9,9,-8,8,1,5,4,-6,-10,-7,2,-2,7,-7,7,-2,-4,10,3,1,-3,9,-8,6,-7,-6,4,-5,1,-6,1,-7,-2,-8,4,-10,-6,6,5,1,-6,2,-8,-1,-8,-7,4,3,-10,2,10,5,-2,-1,5,-10,2,3,10,9,10,6,-10,1,-1,8,-4,1,-5,2,6,-3,5,-8,-9,-2,3,-6,-10,-6,9,-4,6,8,10,3,5,6,-1,4,1,2,7,-6,-4,-7,6,-7,-1,-6,-6,-8,-3,10,7,6,1,2,6,4,10,-5,5,1,-9,-6,3,6,8,-2,2,-3,-7,-3,-4,-3,8,-3,9,10,10,-3,-10,1,-8,3,2,-5,4,4,-4,-4,-6,-9,10,3,5,-3,8,5,6,6,-7,-10,10,8,-10,8,9,1,5,9,1,-7,5,-4,1,10,-2,8,4,-6,8,8,-1,5,4,-10,-6,-5,10,-4,1,8,6,-7,-1,3,-9,5,4,10,5,-3,6,4,7,-8,1,4,-3,6,-4,-3,3,-4,9,-5,1,-5,-5,-6,6,1,-1,3,-5,-6,-1,3,7,1,1,-2,3,1,8,-2,-1,-10,-9,-6,3,5,-3,7,6,-7,5,9,-7,-8,10,-9,-3,3,3,6,1,1,-10,3,-8,2,10,-1,-2,3,-9,2,3,-5,7,4,5,-2,-4,2,7,-7,-3,-3,-9,8,-1,1,-10,-10,-8,-4,10,7,-1,7,-2,5,3,2,-6,-2,-5,-1,-7,-9,-3,-7,9,8,4,-7,10,-2,2,6,8,-7,1,7,6,3,1,4,-6,1,10,4,10,4,4,1,10,-5,5,6,-10,-3,-9,-10,-1,-4,-8,10,6,1,-6,4,-10,4,10,7,9,10,10,4,10,-4,-8,-8,10,6,4,9,-8,-9,5,10,-9,3,-10,-1,-6,-1,-1,9,-8,5,-5,-6,-9,3,3,7,2,9,8,-4,-7,9,4,9,-4,-4,1,2,-4,-6,-8,9,5,-4,2,-9,5,-8,5,2,2,-8,7,4,7,-10,-3,5,-9,-2,8,-1,-1,-1,4,8,1,-8,-8,-10,2,-1,1,2,-4,-2,-8,-5,-1,7,-2,-3,1,-1,-4,7,5,1,-4,7,-9,-2,1,8,-8,9,-10,-4,2,3,8,-3,5,-8,-9,1,-3,7,-2,6,-1,-9,5,-5,9,-6,5,-2,7,3,5,6,-7,-2,9,1,4,5,3,10,-8,-3,-8,-7,-4,-9,-4,-7,-7,4,-6,9,4,1,4,1,6,6,6,-8,-4,9,3,3,-4,7,-9,-2,-10,8,2,7,3,5,7,-10,-2,2,-7,-5,-9,3,-1,-1,-7,7,10,1,-7,1,-10,6,-1,5,-3,-9,7,2,-6,-8,-2,4,9,3,2,10,6,3,-8,7,1,6,7,-5,-9,-6,10,-2,7,-4,1,10,2,7,2,-1,-10,-10,-3,10,9,-4,9,-5,1,-5,3,-2,-1,-5,2,7,-3,9,-1,9,-8,-9,6,3,-3,-2,8,-3,10,1,4,-6,-4,-4,-7,-6,-3,-1,-9,8,7,-10,3,-3,1,-7,-3,-3,-9,5,-9,10,-6,-3,-7,8,-3,10,-2,-9,8,-8,-8,-9,8,-2,5,-9,4,5,-4,-7,3,-3,2,-8,7,-3,-6,5,-8,-1,10,5,3,-7,-5,6,-4,1,-2,-6,4,5,6,6,-6,7,10,-9,-4,-1,-1,-6,-7,-10,-7,-9,10,3,-3,-9,7,-6,10,1,2,-10,1,9,-5,9,9,-3,2,-2,4,-6,9,-9,7,-10,3,3,10,-4,-3,4,-10,9,-2,9,-4,10,-8,2,-10,6,6,5,-3,8,-1,10,-9,5,1,7,10,-1,-6,-6,7,10,-5,-9,6,-6,2,-10,4,2,1,3,7,-2,8,1,-1,-9,6,5,-7,-10,-7,-10,6,-8,-1,8,4,-5,7,-8,-7,-5,6,6,2,-2,6,2,4,-9,-1,-5,9,9,-5,4,-3,6,10,-3,-10,1,-7,-10,-3,7,7,10,3,-2,8,2,-5,-3,2,7,-10,-10,3,7,-8,-1,8,1,-3,-10,8,-4,-2,-10,-2,-8,9,-9,-5,-10,5,-8,-5,2,9,-10,-6,2,1,4,-10,8,-10,4,5,8,7,3,-4,-3,9,-2,10,-4,-7,-4,3,-8,9,10,-6,-6,-6,-7,3,5,-3,-8,-2,-4,5,10,2,-2,-2,6,3,-2,-2,1,-9,9,3,5,-4,-8,6,6,6,10,-2,-5,-10,-4,-6,-10,-1,-6,-10,2,9,2,8,5,8,3,2,5,-6,4,5,-6,-5,-3,-3,-7,-4,10,-9,-7,10,6,-7,4,1,-5,4,-3,6,-3,2,3,-3,8,-6,8,5,8,5,7,-1,-2,-6,7,-2,2,2,-10,8,6,4,-10,6,-5,1,6,-4,1,3,3,8,-9,-1,-7,8,-3,-5,-3,4,-1,8,8,-6,-4,-7,-6,4,-7,-6,-6,-8,-7,5,-4,-8,3,-2,9,-10,-9,-2,1,-10,-3,-5,-1,9,3,-7,-10,-4,10,3,-6,-4,9,-9,2,-1,8,-3,6,-6,-3,-8,8,5,9,-1,1,9,-1,-10,-10,7,6,8,9,1,-8,6,-2,-6,-1,6,-2,1,3,-6,4,-4,3,-2,-5,6,-3,-9,-5,6,4,9,-4,1,4,4,-3,8,-8,10,-3,-7,3,3,-1,-6,-8,-10,5,-4,9,7,-6,-7,3,-10,-8,-5,10,-8,5,-5,9,7,-5,1,9,-7,2,9,-3,-2,-3,1,4,-4,3,2,-5,6,-10,-7,6,3,-5,-3,-3,-1,-1,2,4,-4,7,1,-7,-5,5,-7,3,-8,4,9,6,6,4,3,-5,-5,5,8,4,-8,-3,-9,-4,-7,8,-8,7,4,-3,7,3,4,-9,-7,-6,-1,1,7,7,-6,1,-9,-7,8,-9,-7,9,10,4,3,6,8,2,-3,-9,-3,-2,-7,-7,-8,-1,1,-6,2,-2,-9,6,4,-3,8,5,-4,-6,-5,-7,-1,9,2,5,-7,-8,-5,-4,-4,-9,2,-6,10,-7,-6,9,-7,-3,4,-3,-7,7,-7,5,1,6,8,10,-3,-5,3,10,2,7,1,7,2,2,-9,1,-8,3,-6,-6,-10,-9,4,-3,3,4,-1,-4,9,10,-2,5,-7,-8,1,-3,-4,4,-4,-6,-6,-10,3,9,9,-9,-2,5,-3,2,6,3,-8,7,1,-6,8,-5,2,-3,3,4,-6,-5,-1,-3,10,6,-2,-9,-8,1,3,-9,9,-7,-5,10,-1,10,-1,8,10,9,-7,-6,-5,3,4,4,3,10,2,9,6,-5,4,-8,7,6,-8,-1,1,1,-7,1,-6,-9,-10,4,-10,2,-4,8,-8,5,9,8,-3,3,4,9,-4,10,7,-9,3,-2,-2,6,7,7,-1,-5,-6,4,4,-1,2,-2,3,5,-3,-3,-7,6,-2,1,-9,-8,5,-6,5,-7,9,7,1,10,-1,10,1,4,-2,-9,-9,6,10,3,1,4,9,4,3,5,-6,-4,4,4,-2,7,-1,7,6,7,-2,-9,-4,3,6,3,-5,-1,-2,-5,8,-8,-6,10,-5,-9,-8,9,1,9,-10,-1,7,5,9,-6,3,-5,8,-3,2,1,-2,2,-2,1,5,-8,6,-6,5,-1,5,-9,1,6,-6,3,-7,1,10,-1,4,9,-3,4,-6,-8,10,4,1,-5,6,5,7,-3,8,3,-5,3,-9,8,1,-6,5,-4,-9,5,1,9,6,6,-9,-7,3,-4,6,-8,10,-9,4,-3,-4,-10,-6,4,2,5,9,8,1,-4,4,5,-6,8,10,4,-10,1,-3,8,-5,1,-7,7,8,7,1,-7,8,6,-9,-4,-5,4,9,5,9,9,-4,-5,6,-6,6,4,1,4,10,-8,2,-3,8,-7,6,4,-2,2,-3,-5,-4,-2,10,-4,3,-7,7,-6,-10,1,-8,-5,4,-8,-6,3,-5,4,3,6,-1,9,-5,-3,9,-2,-9,-7,4,7,10,9,-8,-9,-2,-7,9,3,2,-10,9,7,-9,-10,-8,3,10,-3,7,-9,8,4,-1,-5,2,-5,-7,3,-5,-9,2,2,5,10,7,3,-5,-7,3,-1,-7,-9,7,8,-5,-6,8,8,-3,-7,8,-10,-6,-9,-8,7,-9,8,10,-9,-5,-3,2,10,2,6,7,2,2,6,6,-7,-2,10,-3,7,1,-4,-1,-8,2,-2,-1,-6,-10,5,6,8,7,9,6,-1,-8,-1,9,-2,3,-4,2,9,2,5,-6,-7,-4,4,-4,8,7,-1,-7,1,-8,-6,3,-10,7,-3,2,-5,-8,-6,-1,-4,-2,-9,7,10,-3,8,10,-2,-5,2,-7,-6,6,-7,6,7,6,8,-6,-3,-7,-6,8,5,-3,3,-6,4,2,-8,5,-10,-1,-8,-9,7,-1,4,-1,5,8,5,-8,3,-4,-10,-8,10,1,8,9,5,-8,-7,7,-6,-1,-8,-2,9,-4,5,-1,1,2,-1,5,-1,4,6,2,-8,-3,-10,-9,-2,-1,-3,1,4,3,4,-3,5,-5,-1,-2,-7,-7,-1,7,-7,2,1,-6,-7,-10,9,8,-3,4,7,4,1,3,8,-7,8,-9,-1,4,3,2,9,7,-2,-7,5,5,5,-7,-7,9,2,-4,2,4,6,-1,-6,9,7,7,7,9,-9,6,1,-3,5,9,-7,-5,6,8,-2,10,-2,5,-10,-5,1,6,9,6,-7,9,5,-7,-10,5,-3,-3,-3,-8,3,5,-5,3,-10,-5,-3,3,10,10,-6,-4,-1,3,5,10,-3,1,6,1,4,-5,10,-4,-7,-10,1,-1,1,10,-5,6,-3,-7,1,-7,2,10,9,4,-10,10,-8,-6,4,7,-4,9,-9,10,-4,3,-8,-10,8,-4,8,-10,2,-9,9,8,-10,5,-3,7,2,5,-4,-7,-1,-1,-3,-7,-6,-3,-4,-10,-10,-2,-2,2,9,-1,6,-5,9,6,-4,8,3,5,-4,10,2,9,-10,-7,10,-2,-6,-3,-3,-6,6,-9,7,4,10,5,7,7,7,-8,2,5,-9,4,9,-10,-5,-6,2,-2,-6,-6,3,2,-7,-6,2,-10,10,-2,-5,-6,1,1,-1,-6,3,2,5,-5,2,-3,3,-5,7,-3,-2,-1,2,6,8,-2,4,-7,8,9,-5,6,6,-10,1,-3,6,-7,9,-4,5,-8,-10,8,-8,9,9,-9,7,8,-7,-4,-7,1,-4,1,-1,-10,5,-10,-5,4,4,-1,-7,10,9,8,5,-10,-6,-2,-3,9,-10,-10,-8,1,10,-1,-10,-4,7,5,-1,2,-9,4,5,-9,-2,10,-3,-10,-2,3,-3,2,-9,1,5,7,6,-5,5,-5,-3,5,-7,-3,5,4,-3,8,-5,-1,-10,4,10,-8,3,1,10,4,-10,-10,-2,-5,-1,4,1,4,-4,9,8,-10,-1,-9,-7,-2,-9,-6,-5,4,3,1,5,-7,-4,2,4,-4,-3,9,7,10,2,-7,-6,-4,-10,5,10,4,-10,7,8,-2,8,2,-1,-1,6,-1,-10,-3,7,6,2,3,-6,-10,4,7,1,9,-2,6,-8,-2,9,-9,-5,-6,-2,-1,-9,-3,2,7,9,-7,6,-1,-8,5,8,8,6,10,-2,8,-3,6,-3,9,1,-5,9,1,6,-9,-9,-8,8,7,-1,1,10,-9,2,-6,-6,-8,-6,-4,-7,9,-7,-5,6,-7,6,1,7,8,-8,10,7,8,-1,8,-5,-5,5,-1,1,8,-6,-3,8,2,-8,-1,10,-10,2,-8,4,-9,-5,-10,8,4,-8,9,-10,4,-3,5,-4,4,-1,-5,10,-4,4,-9,-1,-10,-10,6,10,-10,-7,-6,-7,9,5,-5,-7,7,-2,-6,9,-1,-5,-1,-7,7,3,4,-4,-10,-6,5,3,-7,-10,7,10,-2,-4,-9,-1,2,-10,6,1,6,-2,-1,4,-1,2,6,5,-9,1,8,4,8,8,1,-3,-9,5,1,9,-6,9,2,-9,10,1,-2,10,1,5,1,9,2,-7,5,-6,-6,-10,6,1,1,-6,9,2,-7,-1,4,6,4,-10,1,10,10,8,-1,-4,3,5,7,1,8,-10,-2,10,-2,-6,8,-10,8,-4,9,3,-9,3,8,10,5,-8,-8,4,-1,-3,-8,7,1,7,3,-3,6,8,7,2,10,1,-10,-10,-9,2,-5,3,4,9,8,8,5,2,6,6,-5,7,-3,-10,1,-10,-3,-6,3,-4,5,-8,10,2,5,-5,6,8,9,2,10,-8,-4,-9,8,-9,7,-3,7,-4,-5,3,-1,1,-6,9,2,8,2,3,3,2,9,-9,-1,1,2,-5,4,2,-6,6,10,6,-5,1,10,10,-7,8,-9,-1,-2,1,-2,-5,-6,10], dtype = "int64")#candidate|2455|(2535,)|const|int64
call_2454 = relay.TupleGetItem(func_186_call(relay.reshape(const_2455.astype('int64'), [13, 13, 15])), 1)
call_2456 = relay.TupleGetItem(func_189_call(relay.reshape(const_2455.astype('int64'), [13, 13, 15])), 1)
var_2458 = relay.var("var_2458", dtype = "float64", shape = (3, 9, 5))#candidate|2458|(3, 9, 5)|var|float64
bop_2459 = relay.equal(uop_2433.astype('bool'), relay.reshape(var_2458.astype('bool'), relay.shape_of(uop_2433))) # shape=(3, 9, 5)
output = relay.Tuple([call_2439,const_2440,var_2441,call_2454,const_2455,bop_2459,])
output2 = relay.Tuple([call_2442,const_2440,var_2441,call_2456,const_2455,bop_2459,])
func_2462 = relay.Function([var_2432,var_2441,var_2458,], output)
mod['func_2462'] = func_2462
mod = relay.transform.InferType()(mod)
var_2463 = relay.var("var_2463", dtype = "float64", shape = (3, 9, 5))#candidate|2463|(3, 9, 5)|var|float64
var_2464 = relay.var("var_2464", dtype = "float32", shape = (378,))#candidate|2464|(378,)|var|float32
var_2465 = relay.var("var_2465", dtype = "float64", shape = (3, 9, 5))#candidate|2465|(3, 9, 5)|var|float64
output = func_2462(var_2463,var_2464,var_2465,)
func_2466 = relay.Function([var_2463,var_2464,var_2465,], output)
mutated_mod['func_2466'] = func_2466
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2571 = relay.var("var_2571", dtype = "float64", shape = (9, 7, 12))#candidate|2571|(9, 7, 12)|var|float64
uop_2572 = relay.rsqrt(var_2571.astype('float64')) # shape=(9, 7, 12)
bop_2578 = relay.bitwise_xor(uop_2572.astype('uint8'), relay.reshape(var_2571.astype('uint8'), relay.shape_of(uop_2572))) # shape=(9, 7, 12)
output = bop_2578
output2 = bop_2578
func_2585 = relay.Function([var_2571,], output)
mod['func_2585'] = func_2585
mod = relay.transform.InferType()(mod)
var_2586 = relay.var("var_2586", dtype = "float64", shape = (9, 7, 12))#candidate|2586|(9, 7, 12)|var|float64
output = func_2585(var_2586)
func_2587 = relay.Function([var_2586], output)
mutated_mod['func_2587'] = func_2587
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2679 = relay.var("var_2679", dtype = "float32", shape = (4, 7, 3))#candidate|2679|(4, 7, 3)|var|float32
var_2680 = relay.var("var_2680", dtype = "float32", shape = (4, 7, 3))#candidate|2680|(4, 7, 3)|var|float32
bop_2681 = relay.greater(var_2679.astype('bool'), relay.reshape(var_2680.astype('bool'), relay.shape_of(var_2679))) # shape=(4, 7, 3)
func_2386_call = mod.get_global_var('func_2386')
func_2388_call = mutated_mod.get_global_var('func_2388')
var_2694 = relay.var("var_2694", dtype = "float64", shape = (336,))#candidate|2694|(336,)|var|float64
call_2693 = relay.TupleGetItem(func_2386_call(relay.reshape(var_2694.astype('float64'), [12, 2, 14])), 1)
call_2695 = relay.TupleGetItem(func_2388_call(relay.reshape(var_2694.astype('float64'), [12, 2, 14])), 1)
func_2386_call = mod.get_global_var('func_2386')
func_2388_call = mutated_mod.get_global_var('func_2388')
call_2727 = relay.TupleGetItem(func_2386_call(relay.reshape(var_2694.astype('float64'), [12, 2, 14])), 5)
call_2728 = relay.TupleGetItem(func_2388_call(relay.reshape(var_2694.astype('float64'), [12, 2, 14])), 5)
func_2157_call = mod.get_global_var('func_2157')
func_2161_call = mutated_mod.get_global_var('func_2161')
var_2730 = relay.var("var_2730", dtype = "float32", shape = (378,))#candidate|2730|(378,)|var|float32
call_2729 = func_2157_call(relay.reshape(call_2727.astype('float32'), []), relay.reshape(var_2730.astype('float32'), [14, 3, 9]), )
call_2731 = func_2157_call(relay.reshape(call_2727.astype('float32'), []), relay.reshape(var_2730.astype('float32'), [14, 3, 9]), )
uop_2759 = relay.rsqrt(var_2680.astype('float32')) # shape=(4, 7, 3)
bop_2763 = relay.bitwise_or(uop_2759.astype('int32'), relay.reshape(var_2680.astype('int32'), relay.shape_of(uop_2759))) # shape=(4, 7, 3)
func_2386_call = mod.get_global_var('func_2386')
func_2388_call = mutated_mod.get_global_var('func_2388')
call_2769 = relay.TupleGetItem(func_2386_call(relay.reshape(var_2694.astype('float64'), [12, 2, 14])), 4)
call_2770 = relay.TupleGetItem(func_2388_call(relay.reshape(var_2694.astype('float64'), [12, 2, 14])), 4)
func_186_call = mod.get_global_var('func_186')
func_189_call = mutated_mod.get_global_var('func_189')
var_2772 = relay.var("var_2772", dtype = "int64", shape = (2535,))#candidate|2772|(2535,)|var|int64
call_2771 = relay.TupleGetItem(func_186_call(relay.reshape(var_2772.astype('int64'), [13, 13, 15])), 1)
call_2773 = relay.TupleGetItem(func_189_call(relay.reshape(var_2772.astype('int64'), [13, 13, 15])), 1)
func_2386_call = mod.get_global_var('func_2386')
func_2388_call = mutated_mod.get_global_var('func_2388')
call_2777 = relay.TupleGetItem(func_2386_call(relay.reshape(var_2694.astype('float64'), [12, 2, 14])), 7)
call_2778 = relay.TupleGetItem(func_2388_call(relay.reshape(var_2694.astype('float64'), [12, 2, 14])), 7)
func_805_call = mod.get_global_var('func_805')
func_808_call = mutated_mod.get_global_var('func_808')
var_2787 = relay.var("var_2787", dtype = "uint32", shape = (16,))#candidate|2787|(16,)|var|uint32
call_2786 = relay.TupleGetItem(func_805_call(relay.reshape(var_2787.astype('uint32'), [1, 2, 8])), 0)
call_2788 = relay.TupleGetItem(func_808_call(relay.reshape(var_2787.astype('uint32'), [1, 2, 8])), 0)
output = relay.Tuple([bop_2681,call_2693,var_2694,call_2727,call_2729,var_2730,bop_2763,call_2769,call_2771,var_2772,call_2777,call_2786,var_2787,])
output2 = relay.Tuple([bop_2681,call_2695,var_2694,call_2728,call_2731,var_2730,bop_2763,call_2770,call_2773,var_2772,call_2778,call_2788,var_2787,])
func_2800 = relay.Function([var_2679,var_2680,var_2694,var_2730,var_2772,var_2787,], output)
mod['func_2800'] = func_2800
mod = relay.transform.InferType()(mod)
mutated_mod['func_2800'] = func_2800
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2800_call = mutated_mod.get_global_var('func_2800')
var_2802 = relay.var("var_2802", dtype = "float32", shape = (4, 7, 3))#candidate|2802|(4, 7, 3)|var|float32
var_2803 = relay.var("var_2803", dtype = "float32", shape = (4, 7, 3))#candidate|2803|(4, 7, 3)|var|float32
var_2804 = relay.var("var_2804", dtype = "float64", shape = (336,))#candidate|2804|(336,)|var|float64
var_2805 = relay.var("var_2805", dtype = "float32", shape = (378,))#candidate|2805|(378,)|var|float32
var_2806 = relay.var("var_2806", dtype = "int64", shape = (2535,))#candidate|2806|(2535,)|var|int64
var_2807 = relay.var("var_2807", dtype = "uint32", shape = (16,))#candidate|2807|(16,)|var|uint32
call_2801 = func_2800_call(var_2802,var_2803,var_2804,var_2805,var_2806,var_2807,)
output = call_2801
func_2808 = relay.Function([var_2802,var_2803,var_2804,var_2805,var_2806,var_2807,], output)
mutated_mod['func_2808'] = func_2808
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3091 = relay.var("var_3091", dtype = "float32", shape = (12, 12, 14))#candidate|3091|(12, 12, 14)|var|float32
uop_3092 = relay.log2(var_3091.astype('float32')) # shape=(12, 12, 14)
output = relay.Tuple([uop_3092,])
output2 = relay.Tuple([uop_3092,])
func_3104 = relay.Function([var_3091,], output)
mod['func_3104'] = func_3104
mod = relay.transform.InferType()(mod)
mutated_mod['func_3104'] = func_3104
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3105 = relay.var("var_3105", dtype = "float32", shape = (12, 12, 14))#candidate|3105|(12, 12, 14)|var|float32
func_3104_call = mutated_mod.get_global_var('func_3104')
call_3106 = func_3104_call(var_3105)
output = call_3106
func_3107 = relay.Function([var_3105], output)
mutated_mod['func_3107'] = func_3107
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3411 = relay.var("var_3411", dtype = "float32", shape = (14, 4, 15))#candidate|3411|(14, 4, 15)|var|float32
uop_3412 = relay.exp(var_3411.astype('float32')) # shape=(14, 4, 15)
output = uop_3412
output2 = uop_3412
func_3438 = relay.Function([var_3411,], output)
mod['func_3438'] = func_3438
mod = relay.transform.InferType()(mod)
mutated_mod['func_3438'] = func_3438
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3439 = relay.var("var_3439", dtype = "float32", shape = (14, 4, 15))#candidate|3439|(14, 4, 15)|var|float32
func_3438_call = mutated_mod.get_global_var('func_3438')
call_3440 = func_3438_call(var_3439)
output = call_3440
func_3441 = relay.Function([var_3439], output)
mutated_mod['func_3441'] = func_3441
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3543 = relay.var("var_3543", dtype = "float32", shape = (1, 12, 13))#candidate|3543|(1, 12, 13)|var|float32
uop_3544 = relay.exp(var_3543.astype('float32')) # shape=(1, 12, 13)
output = relay.Tuple([uop_3544,])
output2 = relay.Tuple([uop_3544,])
func_3547 = relay.Function([var_3543,], output)
mod['func_3547'] = func_3547
mod = relay.transform.InferType()(mod)
mutated_mod['func_3547'] = func_3547
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3548 = relay.var("var_3548", dtype = "float32", shape = (1, 12, 13))#candidate|3548|(1, 12, 13)|var|float32
func_3547_call = mutated_mod.get_global_var('func_3547')
call_3549 = func_3547_call(var_3548)
output = call_3549
func_3550 = relay.Function([var_3548], output)
mutated_mod['func_3550'] = func_3550
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3590 = relay.var("var_3590", dtype = "float32", shape = (9, 16, 7))#candidate|3590|(9, 16, 7)|var|float32
uop_3591 = relay.asin(var_3590.astype('float32')) # shape=(9, 16, 7)
var_3594 = relay.var("var_3594", dtype = "float32", shape = (9, 16, 7))#candidate|3594|(9, 16, 7)|var|float32
bop_3595 = relay.floor_mod(uop_3591.astype('float64'), relay.reshape(var_3594.astype('float64'), relay.shape_of(uop_3591))) # shape=(9, 16, 7)
func_2585_call = mod.get_global_var('func_2585')
func_2587_call = mutated_mod.get_global_var('func_2587')
var_3605 = relay.var("var_3605", dtype = "float64", shape = (756,))#candidate|3605|(756,)|var|float64
call_3604 = func_2585_call(relay.reshape(var_3605.astype('float64'), [9, 7, 12]))
call_3606 = func_2585_call(relay.reshape(var_3605.astype('float64'), [9, 7, 12]))
func_2462_call = mod.get_global_var('func_2462')
func_2466_call = mutated_mod.get_global_var('func_2466')
var_3613 = relay.var("var_3613", dtype = "float64", shape = (135,))#candidate|3613|(135,)|var|float64
const_3614 = relay.const([[-8.065228,-6.910755,3.917493,-6.398332,-0.929489,-8.462280,-9.397190,3.505404,-1.512546],[-5.163255,6.791799,7.693784,6.532901,-7.057443,4.283447,-1.487582,-0.558885,-6.009428],[4.090795,6.732690,4.358543,3.522610,-1.233719,3.764416,-3.812417,6.366393,-3.970532],[4.468083,4.137295,0.803471,2.700156,-7.552150,-7.307021,9.800315,4.115578,-9.870754],[-1.736369,-9.234373,-5.792874,-2.036618,8.973402,-0.545846,-0.729072,-7.469517,0.336262],[-6.756717,1.396870,1.674927,-5.370481,5.455406,2.152090,-8.120860,2.845416,-9.512616],[3.723014,9.013817,-3.281878,-7.703320,4.909626,-9.005998,0.782881,9.271569,8.264057],[-0.971932,6.511094,-1.655836,0.245314,7.786140,8.279882,-6.217783,-7.686410,-7.638006],[-5.148602,4.335267,2.633330,-2.666932,-8.295531,6.266343,-7.651150,2.369008,1.431302],[-6.124343,6.286134,5.796287,8.039243,5.998958,0.207211,-8.459706,-4.802880,-4.453743],[9.765202,-9.349113,-3.648769,-7.599678,-4.617871,3.064937,4.228012,-6.307203,1.224799],[5.424812,-9.675600,-2.730936,-6.556265,9.101939,-3.065299,-7.562838,-5.183052,6.284957],[-1.559560,-7.844718,-7.633025,-4.228819,6.041408,-7.953989,6.794412,-2.387996,-2.432184],[0.158080,9.287157,8.629575,-5.082234,-9.084211,8.199448,-8.552430,9.682959,-6.433817],[-3.714735,4.594123,7.209537,-6.529601,5.246146,-8.094254,6.740581,0.941536,-2.636637],[-3.541891,-5.540129,-3.919409,-9.618879,-7.436068,9.699337,1.804017,7.281773,1.506228],[-9.998908,0.419105,-3.013667,2.287309,-6.397166,2.305968,-1.526145,3.209129,-2.789067],[-9.514701,-4.788211,-8.363103,1.107757,9.328659,-2.172409,0.052696,-8.888186,-1.528605],[4.381683,-7.111401,-6.634420,-4.979653,1.688057,-8.462292,7.633311,4.168738,0.167042],[3.555898,1.081314,7.654768,-8.164588,0.537759,-3.586893,7.818975,1.028920,4.461250],[4.220493,-0.858966,0.890313,-8.579106,0.374569,5.954868,6.463637,4.734390,4.619731],[-7.049169,-3.563943,1.999871,-3.375154,-0.434531,-4.781596,8.525426,1.300642,4.204481],[-7.842690,-4.419285,0.202973,-6.092409,-2.163289,4.634765,3.472040,8.785448,2.380637],[-7.301485,-9.250586,-6.947883,-6.503572,-0.329162,0.359452,-6.113542,-5.708641,-4.403325],[-8.079620,-3.341282,-3.842343,4.795229,-2.763205,9.753168,6.298418,3.585427,-2.255787],[-3.473652,7.297096,2.828535,-9.926548,0.232848,-7.050574,-3.651520,-0.904945,4.747637],[8.130236,-1.985095,-3.346674,8.115367,4.839097,1.064761,-4.565887,-2.590268,-4.229793],[8.632630,-2.068955,4.367031,-0.792201,9.633444,1.945538,8.828701,1.122658,-3.533706],[-1.836245,2.452460,-3.449101,1.943893,6.799401,-6.046892,8.140543,-4.458365,-7.730732],[-6.753533,-5.259655,-1.126028,5.708523,-8.344878,3.848783,-2.101408,-0.627852,-2.863533],[-1.089632,-7.867736,8.100588,6.683521,-0.937692,-0.918571,-0.094359,6.123839,6.670199],[-9.229361,1.390792,0.378751,5.919117,-2.561818,-6.896358,-6.954214,2.987182,-3.612731],[7.219851,0.705999,5.703009,7.406362,2.501725,-9.883598,-9.324401,3.660808,7.053914],[-1.432919,-4.174615,8.723904,3.515399,1.864504,-4.595202,-4.372167,1.693428,7.547640],[3.535354,-6.907594,7.916830,5.745057,6.815518,9.542105,-0.866369,7.519097,0.042366],[1.198770,-8.351218,2.169376,-2.002592,7.559636,0.342604,-6.292835,2.084848,2.197358],[-0.495434,-2.856706,5.392618,-8.928277,9.449007,-1.481634,-6.696605,-6.364879,-4.702625],[9.879755,9.745859,5.650271,8.543446,1.720316,-9.098064,1.469514,-3.141084,9.808678],[-9.209667,2.639156,3.188728,-1.427548,7.611384,0.665392,-4.385275,-3.904024,6.869701],[-2.808166,9.378382,6.892527,0.690152,-6.796633,-5.327525,7.852104,-7.523875,-1.639628],[3.881976,6.894112,2.936172,-9.881050,-8.661777,1.774755,-5.832325,-9.385000,-9.936772],[-3.839726,1.000077,9.199056,-4.474257,-1.739881,6.723997,-7.152100,8.937203,7.967927]], dtype = "float32")#candidate|3614|(42, 9)|const|float32
call_3612 = relay.TupleGetItem(func_2462_call(relay.reshape(var_3613.astype('float64'), [3, 9, 5]), relay.reshape(const_3614.astype('float32'), [378,]), relay.reshape(var_3613.astype('float64'), [3, 9, 5]), ), 3)
call_3615 = relay.TupleGetItem(func_2466_call(relay.reshape(var_3613.astype('float64'), [3, 9, 5]), relay.reshape(const_3614.astype('float32'), [378,]), relay.reshape(var_3613.astype('float64'), [3, 9, 5]), ), 3)
func_2585_call = mod.get_global_var('func_2585')
func_2587_call = mutated_mod.get_global_var('func_2587')
call_3621 = func_2585_call(relay.reshape(var_3605.astype('float64'), [9, 7, 12]))
call_3622 = func_2585_call(relay.reshape(var_3605.astype('float64'), [9, 7, 12]))
var_3626 = relay.var("var_3626", dtype = "float32", shape = (9, 16, 7))#candidate|3626|(9, 16, 7)|var|float32
bop_3627 = relay.mod(uop_3591.astype('float64'), relay.reshape(var_3626.astype('float64'), relay.shape_of(uop_3591))) # shape=(9, 16, 7)
func_3547_call = mod.get_global_var('func_3547')
func_3550_call = mutated_mod.get_global_var('func_3550')
var_3642 = relay.var("var_3642", dtype = "float32", shape = (156,))#candidate|3642|(156,)|var|float32
call_3641 = relay.TupleGetItem(func_3547_call(relay.reshape(var_3642.astype('float32'), [1, 12, 13])), 0)
call_3643 = relay.TupleGetItem(func_3550_call(relay.reshape(var_3642.astype('float32'), [1, 12, 13])), 0)
output = relay.Tuple([bop_3595,call_3604,var_3605,call_3612,var_3613,const_3614,call_3621,bop_3627,call_3641,var_3642,])
output2 = relay.Tuple([bop_3595,call_3606,var_3605,call_3615,var_3613,const_3614,call_3622,bop_3627,call_3643,var_3642,])
func_3656 = relay.Function([var_3590,var_3594,var_3605,var_3613,var_3626,var_3642,], output)
mod['func_3656'] = func_3656
mod = relay.transform.InferType()(mod)
mutated_mod['func_3656'] = func_3656
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3656_call = mutated_mod.get_global_var('func_3656')
var_3658 = relay.var("var_3658", dtype = "float32", shape = (9, 16, 7))#candidate|3658|(9, 16, 7)|var|float32
var_3659 = relay.var("var_3659", dtype = "float32", shape = (9, 16, 7))#candidate|3659|(9, 16, 7)|var|float32
var_3660 = relay.var("var_3660", dtype = "float64", shape = (756,))#candidate|3660|(756,)|var|float64
var_3661 = relay.var("var_3661", dtype = "float64", shape = (135,))#candidate|3661|(135,)|var|float64
var_3662 = relay.var("var_3662", dtype = "float32", shape = (9, 16, 7))#candidate|3662|(9, 16, 7)|var|float32
var_3663 = relay.var("var_3663", dtype = "float32", shape = (156,))#candidate|3663|(156,)|var|float32
call_3657 = func_3656_call(var_3658,var_3659,var_3660,var_3661,var_3662,var_3663,)
output = call_3657
func_3664 = relay.Function([var_3658,var_3659,var_3660,var_3661,var_3662,var_3663,], output)
mutated_mod['func_3664'] = func_3664
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4202 = relay.var("var_4202", dtype = "uint32", shape = (7, 10, 8))#candidate|4202|(7, 10, 8)|var|uint32
var_4203 = relay.var("var_4203", dtype = "uint32", shape = (7, 10, 8))#candidate|4203|(7, 10, 8)|var|uint32
bop_4204 = relay.add(var_4202.astype('uint32'), relay.reshape(var_4203.astype('uint32'), relay.shape_of(var_4202))) # shape=(7, 10, 8)
uop_4211 = relay.log10(var_4202.astype('float32')) # shape=(7, 10, 8)
bop_4217 = relay.logical_and(bop_4204.astype('bool'), relay.reshape(uop_4211.astype('bool'), relay.shape_of(bop_4204))) # shape=(7, 10, 8)
uop_4222 = relay.rsqrt(var_4203.astype('float64')) # shape=(7, 10, 8)
output = relay.Tuple([bop_4217,uop_4222,])
output2 = relay.Tuple([bop_4217,uop_4222,])
func_4232 = relay.Function([var_4202,var_4203,], output)
mod['func_4232'] = func_4232
mod = relay.transform.InferType()(mod)
var_4233 = relay.var("var_4233", dtype = "uint32", shape = (7, 10, 8))#candidate|4233|(7, 10, 8)|var|uint32
var_4234 = relay.var("var_4234", dtype = "uint32", shape = (7, 10, 8))#candidate|4234|(7, 10, 8)|var|uint32
output = func_4232(var_4233,var_4234,)
func_4235 = relay.Function([var_4233,var_4234,], output)
mutated_mod['func_4235'] = func_4235
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4237 = relay.const([[[-2,-10,-2,-9,7,-4,-9,-1,8,-2,1],[-4,-5,1,3,-1,3,-9,2,-3,-6,-3],[8,2,4,-8,4,-7,8,-5,4,-7,7],[-3,-2,2,-5,-2,9,-10,10,1,10,2],[-3,-1,3,7,-4,1,-9,5,-7,7,-3],[-10,-5,-6,6,4,-5,10,5,-1,8,-8],[-4,8,-1,7,2,-6,8,-1,-10,-6,4],[-4,-1,-9,-7,-5,1,4,8,6,1,-6]],[[-2,3,-4,8,5,6,-8,-7,5,8,5],[7,-5,3,5,-5,6,10,7,7,-1,-1],[9,4,2,-9,-5,-2,9,4,-7,-2,7],[5,9,9,7,9,-10,10,-6,-10,-5,-9],[10,-10,-4,-1,4,6,-8,-5,7,-10,8],[8,1,5,2,2,-1,2,5,-6,-1,-4],[9,3,3,2,5,5,10,4,4,-8,2],[-10,-3,-8,1,3,-9,-8,4,-4,-2,7]],[[-7,-7,-10,-5,5,9,-4,-4,7,6,6],[8,4,10,-1,9,9,8,-9,2,-10,3],[8,-10,-5,-2,-2,2,2,-1,9,10,4],[-9,-3,-8,-2,1,-6,-4,9,3,-6,-7],[-5,3,8,5,-1,6,5,-1,5,-6,10],[2,-6,1,10,-10,8,-2,-7,10,-9,-6],[-2,-1,6,8,7,-7,6,5,-8,2,10],[-2,-9,7,-9,-2,7,-8,1,10,7,-1]],[[7,-9,-10,-1,-3,7,5,7,6,-7,-3],[9,10,-3,9,7,9,3,7,2,-6,9],[5,-7,7,8,-10,5,-6,-6,2,3,1],[3,-7,-5,5,6,2,-3,-9,3,7,9],[6,-10,-9,10,-8,-8,-7,10,9,-2,-1],[-1,7,2,-2,9,6,-6,4,-7,-8,-9],[-7,9,-7,6,7,2,3,-9,-5,-3,-10],[8,-7,-10,7,4,-10,-10,3,7,-3,-3]],[[3,1,10,8,7,8,10,-10,7,3,-4],[-6,-8,6,-2,-10,-1,-2,9,3,-8,7],[-8,5,1,-3,-10,2,4,1,-9,2,4],[-10,-5,-6,-3,1,1,7,5,-7,-10,2],[10,-9,-4,8,-6,10,1,-6,-10,8,-4],[-3,6,3,10,-10,-9,-9,10,5,-6,-9],[1,-3,-2,-2,5,-5,-5,5,-4,-6,-3],[-9,2,1,7,7,3,8,-1,2,-4,-5]],[[3,-6,4,-1,-9,-4,-2,-9,4,8,-5],[5,-7,-10,-1,-1,4,3,-1,8,3,-1],[6,-4,5,10,-8,-4,9,7,-10,6,8],[-3,-4,-9,3,-3,-7,9,-1,-1,-3,6],[-10,4,5,-3,1,-2,-9,3,-8,-10,5],[8,-10,5,-8,7,-5,-10,-3,3,-1,1],[5,-1,-2,9,-4,-1,10,10,-8,5,-8],[-6,-10,-4,-4,-10,-1,-4,-5,8,4,6]],[[7,1,2,1,-3,-2,-5,-3,-3,10,7],[7,-8,1,-4,5,2,-9,2,-8,-4,-5],[9,8,2,-6,-1,-8,5,1,6,-3,2],[5,-1,-8,-3,5,-2,2,2,-2,10,-4],[-3,6,-2,8,-2,-9,-5,-7,-1,-8,5],[8,7,-10,4,-4,10,-6,9,-8,6,4],[-4,10,3,-10,-8,-8,10,4,4,1,-5],[6,-1,-7,-10,8,3,-1,6,7,-10,8]],[[2,6,-9,-8,3,10,-8,1,-9,-4,-7],[-9,6,6,8,8,8,-6,10,-3,9,9],[2,5,-8,-6,-4,9,-10,6,1,-9,-9],[-5,-2,3,4,9,1,9,-5,-6,9,-8],[8,-6,7,7,-4,-4,3,-8,-1,-2,2],[-2,6,5,1,6,-9,-10,10,4,-2,-8],[8,-3,-2,-1,-8,-3,-9,2,4,-1,10],[9,9,-6,2,9,10,10,6,-8,4,-3]],[[-2,5,2,-8,7,6,3,-10,-6,6,8],[-1,7,3,1,-4,-10,10,5,8,-5,10],[6,4,7,-9,-8,-3,10,-6,-9,-5,-9],[3,-2,8,5,7,9,3,-3,-5,3,-4],[2,-5,10,4,-6,7,-7,-7,-4,4,-8],[-1,1,10,2,8,-5,8,6,7,8,10],[-9,-8,3,-8,8,10,5,-3,5,4,-6],[-5,4,-4,8,-8,3,1,7,-7,-1,4]]], dtype = "uint64")#candidate|4237|(9, 8, 11)|const|uint64
var_4238 = relay.var("var_4238", dtype = "uint64", shape = (9, 8, 11))#candidate|4238|(9, 8, 11)|var|uint64
bop_4239 = relay.equal(const_4237.astype('bool'), relay.reshape(var_4238.astype('bool'), relay.shape_of(const_4237))) # shape=(9, 8, 11)
func_2585_call = mod.get_global_var('func_2585')
func_2587_call = mutated_mod.get_global_var('func_2587')
const_4244 = relay.const([6.846823,8.343715,-9.587672,-1.185226,5.777249,8.541416,8.709969,5.110821,6.657351,-1.085333,-5.585864,9.898508,-5.783432,-3.658635,-6.497820,-8.113449,6.661848,-2.472231,-8.727059,-7.884070,-7.435184,-6.475318,7.047274,-8.555200,-6.167797,-0.917756,5.167363,-6.294382,-9.719581,-5.251705,-9.194153,7.058105,-9.657225,1.001750,-6.276601,-3.961105,6.203183,4.463666,1.894469,7.191456,-5.538936,-3.829296,6.581126,1.384224,7.817203,8.496597,-0.642311,1.140660,-2.375976,2.521681,-9.869683,8.974339,7.113489,-5.782494,-6.648697,-1.558251,9.828125,-8.339636,8.844738,8.761872,8.852315,0.064893,9.689274,-0.359310,3.261657,-2.611709,-5.330423,-0.743547,-8.696937,-0.820136,-7.280885,6.953345,5.283857,6.856655,1.353665,9.477599,9.271842,-9.756178,7.288101,-6.161183,0.172956,-1.354943,-1.901904,1.472954,5.917703,9.575711,-7.319052,5.908528,-5.924036,-7.694913,1.338223,8.365504,-9.944321,6.117238,-4.544492,8.102305,7.614361,3.720436,-6.150623,-7.688985,-2.634827,7.811474,0.926514,-0.655485,3.081930,0.715201,-6.940743,8.402381,9.733611,-8.164940,-5.587187,6.712563,0.509487,8.892580,6.968057,0.228889,6.593342,-4.889395,-2.018540,6.519913,7.788069,-8.320416,1.704915,2.953563,7.612021,-7.339738,3.183953,0.202870,9.596733,-4.828291,-2.415538,-9.976796,-3.115584,-7.634442,-7.267984,4.805862,0.350384,1.156141,0.618365,4.652877,2.266220,3.259256,9.943925,8.449588,7.440909,6.475632,-7.873366,-7.454876,-2.306215,4.231986,-1.682632,-7.165059,-8.319261,-1.316772,-3.368812,-0.309258,2.013759,-8.592805,-5.355859,8.700226,6.183658,-0.551418,8.273862,2.732202,7.411023,-1.239999,3.188154,4.427669,-2.380723,3.336965,2.407529,-5.259458,6.894122,1.061840,0.043992,-2.450715,6.153806,-3.504655,3.840503,-6.075194,-8.748177,-2.785374,-2.875605,3.920490,4.725208,7.843801,7.680230,0.251933,9.606232,-9.189862,-1.563725,9.197383,3.142458,-4.130990,6.171061,-8.238173,9.919230,6.110662,-0.134542,-1.181863,-9.947538,4.556109,-9.038969,-4.522682,0.538460,-7.580869,6.285421,-0.454851,4.001255,7.623575,2.671328,-9.374042,-5.342753,-8.417188,-3.512537,-0.162236,5.773731,-6.627439,4.026477,7.158024,-7.296783,-5.022691,8.662638,-9.405636,2.791655,-9.926463,2.639997,9.084867,-6.523698,0.331475,-6.725153,4.844357,4.114582,4.468992,3.987102,3.193933,-2.557288,6.735570,-5.781814,-9.567271,-7.947842,7.860331,6.836392,0.887564,-5.158514,5.816598,0.759093,-8.474856,-9.614777,0.602098,-7.928820,2.244179,-3.098277,2.079509,5.709768,-5.316495,-6.774598,4.426366,-6.024944,6.287738,5.852473,1.968975,-3.181825,5.868322,-0.588679,-1.579762,-3.688605,7.021972,-5.295176,6.689275,0.298031,6.973713,2.971526,0.238508,-8.955165,4.195412,8.340631,-0.121372,-4.767167,9.382100,-8.528214,-4.685201,0.823277,6.991300,-7.901353,8.469631,-3.143392,3.684144,-8.631338,4.741728,9.675946,-5.963491,5.273376,-1.679064,4.582149,-1.746183,7.529871,-5.291223,6.137950,2.032040,-2.218614,6.360581,8.771518,9.230535,1.744387,-7.792905,8.573422,-6.883045,0.421677,-3.243903,-5.486233,-9.849800,7.609877,-7.176507,-1.754987,-7.620859,3.609697,4.039536,-9.937015,-2.902108,1.209756,0.581187,9.164625,-7.543862,-2.938997,7.029105,6.512895,5.213360,-4.684474,6.368422,4.039669,-9.853948,2.867409,3.523435,-3.405489,-7.991631,6.264825,-7.735140,6.188653,7.471869,2.344026,-8.573130,2.252716,-2.195031,7.119545,-9.670370,4.421210,2.981088,2.025774,8.336816,-5.644046,6.555179,3.662285,7.997056,-6.441835,-3.873759,1.224731,5.687179,-6.201690,8.030961,4.424082,-3.111722,-1.036021,-9.222157,1.080515,7.626870,4.510712,0.136115,-6.466711,6.918088,2.167969,-9.265945,-2.418950,3.562551,7.998194,-5.862428,3.271019,-0.505563,6.841410,9.636820,-3.145505,-8.043485,0.824192,-6.952421,-9.064903,4.044039,7.402301,6.237709,7.676276,5.165974,1.255094,4.563795,-7.028973,-9.230687,-0.284406,-9.372729,-9.516737,-1.323491,-7.864101,1.540113,-3.651061,7.323905,-8.350631,8.858514,9.116080,7.988988,6.456997,9.045173,-0.445034,8.361158,6.927763,7.771449,-2.513250,-1.369218,-3.109569,-5.197885,-1.415277,-6.964273,-9.933470,-9.567005,-8.502227,-1.657805,-4.681725,-4.568806,9.108378,-8.882779,9.763530,-1.655816,1.030699,5.859185,-5.035377,1.699741,8.094695,9.974397,2.350411,0.086921,3.225117,6.691964,-0.089364,-9.512831,3.987348,-6.911882,-6.238350,2.256357,2.549317,4.542934,-6.922662,-2.814769,2.798555,2.837898,6.751859,-3.797037,-6.484134,7.581937,3.764384,-3.217302,-0.372659,-1.151386,1.813692,-7.265199,-8.424845,-4.995702,-5.105416,-3.924282,-5.153093,7.610592,-2.491688,2.011253,7.363862,3.284426,-5.279285,-7.995930,9.441159,-8.338322,-5.410016,5.787718,-1.376441,1.852525,5.141649,-9.962255,1.717615,0.533798,-3.892136,-6.742786,6.750326,-4.414212,2.833600,-7.391509,3.293437,8.180914,-7.583047,-8.358795,-9.972735,3.561798,5.718762,4.032844,8.993625,9.958996,0.071818,-4.777271,9.637817,4.012201,9.682886,2.000019,-6.335734,-1.754847,-7.555438,2.492093,-0.460867,-5.854337,0.072174,-5.237091,-8.270824,-8.705911,1.973770,9.162345,4.174849,4.527292,-8.687839,-9.209577,5.655112,5.033880,0.475434,-6.202235,-6.067209,-9.571526,-8.677314,-1.745378,-2.755850,6.334846,8.771223,-5.028236,3.580313,3.644704,1.412395,-5.392838,-6.317759,-1.820231,-0.473745,9.058031,2.013000,-1.322169,-9.900106,-3.277472,4.883380,-8.372189,-8.539977,-6.025535,-3.585910,-6.996847,1.363979,-0.884426,-9.042897,3.676488,4.164127,7.639711,-8.033262,1.534686,1.982812,6.966585,8.759185,1.093777,6.753864,9.137798,-1.942762,4.967026,-2.735228,2.139612,-6.459486,8.262539,-5.651677,-6.314511,1.543664,7.569424,9.677155,0.121696,4.699500,9.404252,-1.563505,-3.094392,-6.667796,-3.677768,-7.411302,8.665491,8.528868,-2.502626,-0.309709,-6.249032,-9.908439,-6.082109,2.153311,-3.907969,-8.524065,7.761958,-2.537396,0.354029,0.511804,4.350814,-8.061578,-5.288460,-2.341831,3.821294,4.187937,-0.122463,8.267997,4.402158,-9.564667,9.229078,0.402561,-5.115175,9.451276,-8.615425,9.395319,-1.052246,8.114683,9.472440,0.699502,-2.734877,7.937289,3.035520,3.657745,6.921449,-6.412575,-6.769344,6.442922,-7.542794,3.274199,8.592239,-0.649914,-2.566564,-1.028831,6.711479,-0.549172,-5.802894,-5.584541,-8.468873,-3.185418,-5.380187,4.481768,4.521561,2.155585,1.151370,-8.963741,3.684259,-6.591276,-1.583401,-5.009955,-4.308610,2.158752,-9.597189,-5.493362,3.443987,-3.594231,-5.440980,3.855137,-6.127747,1.690707,6.236271,-4.659972,-6.441068,-7.751403,5.621529,0.712966,4.121856,-2.373390,-6.112472,-3.985501,8.304299,0.779871,-2.693451,8.376803,4.099928,-5.940710,9.709079,-7.129423,9.454561,-3.445306,2.787914,0.959749,0.963250,-0.196485,-6.604837,2.002354,7.763755,1.582900,7.417573,-7.924623,3.657417,1.261587,4.851056,4.982081,-2.040287,6.523306,6.530062,-0.694777,-5.370004,-5.808933,-9.087500,-5.474398,1.555035,4.659328,1.662339,6.683271,6.796779,0.460130,-2.247935,3.662627,-3.446866,-7.230816,8.633360,-4.391470,0.267970,8.039566,9.543572,0.627513,1.095661,1.733917,-0.688858,-0.773895,-9.021362,-7.158536,-3.297021,0.158948,-6.305432,-7.176870,6.676539,0.558810,5.249810,-5.232588,1.974515,4.175195,-4.061393,4.994128,-4.255011,-6.806185,2.828225,1.611053,2.431990,-0.697383,5.385393,3.552986,-2.688447,7.329324,7.892542,-4.226916,-8.550378,-7.728205,-1.708739,0.051058,4.387952,9.785249,4.741602,-0.130748,-5.694166,-2.222968,1.217367], dtype = "float64")#candidate|4244|(756,)|const|float64
call_4243 = func_2585_call(relay.reshape(const_4244.astype('float64'), [9, 7, 12]))
call_4245 = func_2585_call(relay.reshape(const_4244.astype('float64'), [9, 7, 12]))
output = relay.Tuple([bop_4239,call_4243,const_4244,])
output2 = relay.Tuple([bop_4239,call_4245,const_4244,])
func_4254 = relay.Function([var_4238,], output)
mod['func_4254'] = func_4254
mod = relay.transform.InferType()(mod)
mutated_mod['func_4254'] = func_4254
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4255 = relay.var("var_4255", dtype = "uint64", shape = (9, 8, 11))#candidate|4255|(9, 8, 11)|var|uint64
func_4254_call = mutated_mod.get_global_var('func_4254')
call_4256 = func_4254_call(var_4255)
output = call_4256
func_4257 = relay.Function([var_4255], output)
mutated_mod['func_4257'] = func_4257
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4455 = relay.var("var_4455", dtype = "float64", shape = (2, 1, 16))#candidate|4455|(2, 1, 16)|var|float64
var_4456 = relay.var("var_4456", dtype = "float64", shape = (2, 5, 16))#candidate|4456|(2, 5, 16)|var|float64
bop_4457 = relay.multiply(var_4455.astype('float64'), var_4456.astype('float64')) # shape=(2, 5, 16)
output = relay.Tuple([bop_4457,])
output2 = relay.Tuple([bop_4457,])
func_4484 = relay.Function([var_4455,var_4456,], output)
mod['func_4484'] = func_4484
mod = relay.transform.InferType()(mod)
var_4485 = relay.var("var_4485", dtype = "float64", shape = (2, 1, 16))#candidate|4485|(2, 1, 16)|var|float64
var_4486 = relay.var("var_4486", dtype = "float64", shape = (2, 5, 16))#candidate|4486|(2, 5, 16)|var|float64
output = func_4484(var_4485,var_4486,)
func_4487 = relay.Function([var_4485,var_4486,], output)
mutated_mod['func_4487'] = func_4487
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4596 = relay.var("var_4596", dtype = "float64", shape = (2, 10, 13))#candidate|4596|(2, 10, 13)|var|float64
uop_4597 = relay.cosh(var_4596.astype('float64')) # shape=(2, 10, 13)
output = uop_4597
output2 = uop_4597
func_4601 = relay.Function([var_4596,], output)
mod['func_4601'] = func_4601
mod = relay.transform.InferType()(mod)
var_4602 = relay.var("var_4602", dtype = "float64", shape = (2, 10, 13))#candidate|4602|(2, 10, 13)|var|float64
output = func_4601(var_4602)
func_4603 = relay.Function([var_4602], output)
mutated_mod['func_4603'] = func_4603
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4655 = relay.var("var_4655", dtype = "float32", shape = (11, 9, 2))#candidate|4655|(11, 9, 2)|var|float32
uop_4656 = relay.sinh(var_4655.astype('float32')) # shape=(11, 9, 2)
func_3438_call = mod.get_global_var('func_3438')
func_3441_call = mutated_mod.get_global_var('func_3441')
const_4673 = relay.const([-7.676633,-9.600948,-4.012570,-2.628357,-2.290540,-9.806833,0.830827,-0.777336,-0.043768,-9.049726,-6.892865,6.589761,6.785349,-3.578627,-5.648229,7.392997,7.399398,-4.368324,4.298394,-5.986042,6.288521,7.022559,-0.646140,5.249945,-2.944363,6.533796,-0.834250,-8.861361,-5.562824,-2.268054,-3.219447,8.015069,-4.933915,0.733436,-9.123722,6.973403,-4.412245,-5.331224,-1.286668,9.512880,-4.282397,-1.259248,4.079103,-0.001151,9.351127,-0.238151,-7.626395,6.956148,9.651174,-0.199097,-4.954433,-0.168670,-0.817897,2.515663,-7.410281,6.366215,3.738026,-5.696576,-2.751131,-3.881346,3.369071,6.224195,9.948761,-1.471443,2.659228,-3.091476,-3.110116,-6.884868,-0.530933,-8.537185,-2.102134,0.816240,9.737902,-8.855191,-8.029870,9.548957,7.790550,4.835669,1.893428,6.154837,-2.658993,-9.663855,-9.565434,8.780328,-5.087884,-5.611013,1.750468,-6.246554,2.505005,-1.641085,5.458565,7.492453,-8.175026,3.899691,2.796121,-3.091408,4.083751,-0.402658,2.697303,-2.853492,9.385516,-6.792346,-6.634921,3.705692,8.533140,8.221424,6.758791,5.546802,2.200964,9.063944,4.450076,-0.020411,-0.475897,9.899273,-4.999585,0.886171,-5.373504,-6.907821,-7.307144,-8.137977,7.461498,3.766062,-6.660408,-1.616057,2.621704,-2.975103,8.837602,7.983198,-0.718607,4.670652,-8.550034,-8.130266,-9.520127,6.860577,0.640774,-5.210556,0.860477,5.337830,-9.599492,7.497462,-9.911793,-7.199187,-4.529697,8.626417,-2.039006,7.354253,-9.186117,9.325788,-3.305928,2.840085,-1.216200,-1.475820,7.811835,-2.553407,6.420735,-7.690169,9.232623,4.073267,-5.800843,-9.413518,1.610469,-2.882249,-0.698238,-1.946506,-8.489851,-1.187676,2.229466,7.403289,-3.811398,-6.536602,3.465036,8.066104,-1.525717,8.043739,-7.884526,3.249619,6.019980,9.835287,-1.588798,4.315653,5.537575,8.021157,-1.943445,-3.223387,-1.105557,2.034241,2.626942,8.372221,0.050554,-5.444163,-2.966487,-8.815089,8.741037,5.998538,1.964817,1.312348,-3.290777,-5.041797,6.785687,-5.710656,1.071118,1.194090,-0.541971,-8.551823,2.297726,7.616053,9.508168,-0.711573,7.931551,-1.949152,-7.433635,-1.058032,-0.379096,5.762327,9.993417,-5.801036,0.998779,6.627383,-5.610357,-6.444529,-2.294274,3.362473,6.245107,5.888209,-9.120589,0.449599,1.987911,2.064501,-9.548699,9.835312,-7.758926,8.346059,2.424176,-7.423935,-9.215530,-2.258991,-3.197519,-0.741118,6.455331,6.433832,3.431193,-0.108805,-1.426236,1.202667,-5.282700,-8.360230,-3.899240,7.546651,-1.435958,2.230667,-5.999688,0.298013,4.085094,-2.622919,7.312865,-8.389876,-0.681768,3.207177,6.532584,-8.876025,9.400279,-3.098052,-9.187325,-3.666150,0.871792,4.034615,3.239137,2.924522,5.248270,6.129325,1.529142,6.964460,-1.082076,-9.284826,9.006953,6.985214,0.146876,-3.888192,1.879067,-0.463467,-6.627842,-5.640252,-5.000634,0.999395,1.145099,1.179049,-7.652372,6.217055,5.450689,-4.202468,-6.665614,-6.137901,-2.128096,5.379248,1.096860,-6.533201,4.123275,8.179700,-4.993298,2.720621,2.181729,-4.266664,-9.582034,-6.599119,8.337333,-2.059137,-7.024256,6.951840,-4.713003,2.007859,-2.186033,5.613062,-0.237937,-7.774618,2.239477,9.910754,-0.041516,1.077180,3.352036,-3.438134,-5.004839,-0.684288,1.693874,8.809259,-1.816715,8.174883,2.022529,-0.508637,1.919984,-9.847064,0.427404,1.790430,-8.936001,-6.991232,-5.498512,-4.429130,5.395602,-9.938543,9.575716,-9.231104,-4.555046,-2.283160,4.177337,1.567552,7.712243,7.387037,9.009161,-4.585629,1.259004,0.267116,-7.743031,5.765627,-6.109375,-2.569765,7.268708,3.304543,9.533240,4.030684,4.822074,7.233447,6.790539,6.284508,-0.387844,-0.056292,-8.483355,4.884902,5.944744,-9.929709,-3.652575,7.252935,-9.640387,8.902025,2.796886,-3.090859,-7.214766,6.849568,-7.121284,-1.982187,8.738005,8.616733,2.784769,-7.689037,6.989391,-7.774237,4.502870,0.561772,6.226003,6.325205,-2.363488,2.669959,-4.732900,-5.086398,2.252459,8.957684,3.937419,-9.668903,4.882043,2.285778,2.123760,5.409510,-5.521856,-4.546044,5.576682,-6.627288,0.145229,-6.640759,-3.482937,8.229658,-7.961177,-8.846966,1.001065,-1.100062,0.213247,7.161606,4.112591,-7.260642,0.084941,2.480298,-2.346765,-6.076304,4.724603,4.987350,9.781386,9.497584,5.561837,5.061051,-6.252639,-6.629493,-2.431576,2.497690,-7.696887,7.327772,-1.591091,-7.834699,-1.799745,9.121263,-5.425810,6.181930,6.966796,4.334714,9.507516,9.912129,-8.705451,9.942077,3.152885,-5.929867,-5.851283,6.847113,7.433913,-6.860843,9.407691,3.551322,-3.718261,5.109011,-8.047549,8.543322,-9.178180,7.603708,-7.324836,0.190133,8.886328,5.193805,5.587843,3.518995,-5.806449,-5.740729,9.207275,1.420131,-8.363919,8.434845,8.477006,-9.458651,0.590016,-5.770590,9.402532,9.885844,-6.622179,-5.151771,6.926397,-6.158019,1.701788,7.666552,-4.104941,6.149169,-5.705892,0.176041,7.799507,5.225625,-8.568133,-1.548381,0.467456,-1.397649,-0.496891,9.825607,-0.373025,5.284589,-1.813270,-0.393516,-0.773240,9.293897,-7.143112,-4.187747,0.925026,-0.084257,-9.870972,3.798082,-2.978082,2.654921,-2.478423,7.155037,-9.590520,1.327325,7.545004,0.180757,3.521767,-4.311495,-7.054094,2.995693,-5.912964,7.283667,-2.704647,-3.090791,-6.521443,2.835946,-3.545608,-5.898583,7.095889,0.195295,6.967672,-7.430262,-6.631954,8.038496,-7.717667,-2.037008,-0.774415,1.591064,-6.581669,-7.429194,1.870758,5.619824,-9.428647,-4.839444,5.378313,-1.114843,-3.626684,1.999709,-4.261702,9.921057,1.043698,0.715850,4.339517,-7.025287,7.751203,5.875953,-2.161786,-3.850097,-2.710306,7.931378,2.216698,-0.433143,-7.062837,-2.279701,-2.292748,4.622641,4.157500,-3.983072,0.017328,-7.902975,6.875164,5.251363,-4.767282,-6.143446,-7.434695,8.804864,4.321694,-6.723795,4.527939,-9.022104,-3.403667,-2.356057,7.322685,4.298022,4.893202,4.845916,6.944183,9.174811,-8.227078,-2.175763,7.015501,-5.203541,8.859032,-5.912451,0.538498,5.324576,3.210058,9.047378,-3.629278,9.045764,-0.098538,-8.953293,-7.937979,-1.541431,2.574668,2.312545,-8.259896,2.146024,-2.984149,-6.390576,0.091954,-9.686000,3.953561,3.199664,-2.360395,-9.799622,0.492803,-8.656278,-5.361221,-1.612297,8.184273,-7.964800,-4.282665,0.397088,2.141902,-4.425854,4.852178,7.047553,9.847897,-0.548643,-6.353439,-3.440301,2.501914,5.075652,6.102884,2.786136,7.103730,-9.182102,-8.536910,0.360411,-8.596073,-2.739541,-8.459962,-4.507004,-7.716760,8.919618,9.894431,-9.196468,-2.605275,-6.960364,9.736240,-7.161871,2.574513,-8.943149,-4.635472,-7.096873,-0.260315,8.699365,-4.369036,-2.472058,-1.083264,9.817089,3.710310,4.131854,4.013284,-0.689361,7.849839,-5.784891,3.550438,-2.200599,-0.818768,-6.931557,2.436492,2.683951,-2.517027,-1.705466,2.926197,-8.417850,3.088975,-7.164738,-3.007914,-8.243289,8.447836,-9.044244,4.301580,-8.508852,4.068764,-2.210296,-7.325045,7.469673,2.905928,-8.871519,8.063573,-5.489820,-9.116193,-2.909616,8.494404,-4.266758,9.825916,1.349203,-0.313758,-9.307332,8.255690,-8.143241,-7.731595,-8.417016,-5.909938,-4.389094,3.530736,-2.755772,6.783496,-0.983854,7.293151,8.231798,-8.366181,-7.197306,-7.691753,-5.599131,5.306162,-5.286051,-1.802140,-9.079831,9.275414,2.233094,7.127308,-1.645601,-8.101600,2.301851,0.840143,-9.995553,6.938203,-6.925270,7.624046,3.814807,-5.723655,-6.176383,-5.437912,8.116241,8.999971,2.510988,-3.689260,7.688054,-3.039257,2.337675,8.365308,1.020390,-0.008408,-5.027411,7.297294,-3.968916,4.821218,-9.576400,7.985331,9.827609,-9.953709,2.610178,-7.606450,5.586343,9.572492,8.239969,-1.396080,-7.618138,-2.441784,-8.895804,-1.217220,0.171075,0.007012,-8.368596,7.912770,9.792524,-9.557417,9.581382,2.656206,5.629697,2.324362,1.445559,-9.993018,-4.604932,2.465864,-9.880031,3.272792,9.907451,8.647826,-3.054374,-9.045802,2.028481,-1.961079,8.148069,6.401393,1.144209,4.603291,3.637313,-8.999733,8.026390,-2.605762,0.639808,5.506267,7.424772,-8.053374,-2.841489,5.725959,3.860605,-8.102138,-0.655960,-0.120549,-1.603794,-8.797654,7.716769,5.617648,-8.393022,-1.300610,4.128673,8.166697,-9.142069,-0.112124,-4.510148,-4.048491,-1.495072,-5.371833,5.957683,-6.202438,1.934618,3.587693,5.757724,9.102248,-7.402259,3.132307,5.945534,-1.077914,1.620338,-9.021959,0.946748,6.342734,8.612102,-7.910670,-1.301309,-5.298846,0.759916,-2.954211,-7.874585,3.310996,8.647450], dtype = "float32")#candidate|4673|(840,)|const|float32
call_4672 = func_3438_call(relay.reshape(const_4673.astype('float32'), [14, 4, 15]))
call_4674 = func_3438_call(relay.reshape(const_4673.astype('float32'), [14, 4, 15]))
func_3104_call = mod.get_global_var('func_3104')
func_3107_call = mutated_mod.get_global_var('func_3107')
var_4676 = relay.var("var_4676", dtype = "float32", shape = (2016, 1))#candidate|4676|(2016, 1)|var|float32
call_4675 = relay.TupleGetItem(func_3104_call(relay.reshape(var_4676.astype('float32'), [12, 12, 14])), 0)
call_4677 = relay.TupleGetItem(func_3107_call(relay.reshape(var_4676.astype('float32'), [12, 12, 14])), 0)
output = relay.Tuple([uop_4656,call_4672,const_4673,call_4675,var_4676,])
output2 = relay.Tuple([uop_4656,call_4674,const_4673,call_4677,var_4676,])
func_4702 = relay.Function([var_4655,var_4676,], output)
mod['func_4702'] = func_4702
mod = relay.transform.InferType()(mod)
var_4703 = relay.var("var_4703", dtype = "float32", shape = (11, 9, 2))#candidate|4703|(11, 9, 2)|var|float32
var_4704 = relay.var("var_4704", dtype = "float32", shape = (2016, 1))#candidate|4704|(2016, 1)|var|float32
output = func_4702(var_4703,var_4704,)
func_4705 = relay.Function([var_4703,var_4704,], output)
mutated_mod['func_4705'] = func_4705
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4821 = relay.var("var_4821", dtype = "float64", shape = (4, 2, 9))#candidate|4821|(4, 2, 9)|var|float64
uop_4822 = relay.log10(var_4821.astype('float64')) # shape=(4, 2, 9)
output = uop_4822
output2 = uop_4822
func_4824 = relay.Function([var_4821,], output)
mod['func_4824'] = func_4824
mod = relay.transform.InferType()(mod)
var_4825 = relay.var("var_4825", dtype = "float64", shape = (4, 2, 9))#candidate|4825|(4, 2, 9)|var|float64
output = func_4824(var_4825)
func_4826 = relay.Function([var_4825], output)
mutated_mod['func_4826'] = func_4826
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4886 = relay.const(-2.500365, dtype = "float32")#candidate|4886|()|const|float32
const_4887 = relay.const([[[-8.386707,4.010584,1.869673,-7.316215,8.535087,-4.215208,-5.965495,-0.114145],[-1.530410,-1.838501,8.550348,0.606629,3.961146,-6.360653,5.928290,7.547694],[-2.364710,-3.561419,-2.595439,-7.831831,4.593622,5.871686,3.180118,6.872984],[-3.670901,0.132575,-6.099948,-2.834449,-3.713449,2.814086,-8.547562,-9.937250],[7.963411,-8.865040,0.300454,-2.002481,9.661312,-1.520003,4.951164,-5.294748],[0.890872,2.732332,3.712890,7.816559,-7.391543,2.303544,-4.837421,-2.371614],[9.376625,0.523374,2.347636,2.855753,8.423274,-2.189711,3.636077,-3.344187],[-6.355478,-6.042419,6.263350,3.405722,-1.345131,-5.116548,-5.827310,-5.777476],[7.180898,-6.178403,4.900486,-5.944029,3.522094,-4.927881,4.612461,8.258768],[-1.407857,1.561093,-3.169080,-2.715702,-6.563179,5.867465,7.531756,-2.471299],[3.357613,5.252326,-7.627131,6.760886,-0.634777,-9.293886,4.903459,7.581374],[5.804442,8.689210,-9.483427,-2.487309,0.502133,3.577465,7.420752,1.482453],[3.279550,-1.859963,-5.962917,0.889439,4.484956,1.982217,-4.383633,-8.720081],[6.700911,2.675161,0.368854,-8.572512,5.913177,1.290288,4.831715,5.275984],[-1.839251,-1.208724,4.366750,9.858168,0.357366,7.892238,-0.212278,0.672807],[-6.337808,7.772547,-7.777388,-2.550402,6.552829,0.797380,-3.682092,1.639008]]], dtype = "float32")#candidate|4887|(1, 16, 8)|const|float32
bop_4888 = relay.not_equal(const_4886.astype('bool'), const_4887.astype('bool')) # shape=(1, 16, 8)
output = bop_4888
output2 = bop_4888
func_4894 = relay.Function([], output)
mod['func_4894'] = func_4894
mod = relay.transform.InferType()(mod)
output = func_4894()
func_4895 = relay.Function([], output)
mutated_mod['func_4895'] = func_4895
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4894_call = mod.get_global_var('func_4894')
func_4895_call = mutated_mod.get_global_var('func_4895')
call_4927 = func_4894_call()
call_4928 = func_4894_call()
output = relay.Tuple([call_4927,])
output2 = relay.Tuple([call_4928,])
func_4943 = relay.Function([], output)
mod['func_4943'] = func_4943
mod = relay.transform.InferType()(mod)
mutated_mod['func_4943'] = func_4943
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4943_call = mutated_mod.get_global_var('func_4943')
call_4944 = func_4943_call()
output = call_4944
func_4945 = relay.Function([], output)
mutated_mod['func_4945'] = func_4945
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4943_call = mod.get_global_var('func_4943')
func_4945_call = mutated_mod.get_global_var('func_4945')
call_4951 = relay.TupleGetItem(func_4943_call(), 0)
call_4952 = relay.TupleGetItem(func_4945_call(), 0)
var_4955 = relay.var("var_4955", dtype = "bool", shape = (12, 16, 8))#candidate|4955|(12, 16, 8)|var|bool
bop_4956 = relay.left_shift(call_4951.astype('int64'), var_4955.astype('int64')) # shape=(12, 16, 8)
bop_4959 = relay.left_shift(call_4952.astype('int64'), var_4955.astype('int64')) # shape=(12, 16, 8)
output = relay.Tuple([bop_4956,])
output2 = relay.Tuple([bop_4959,])
func_4967 = relay.Function([var_4955,], output)
mod['func_4967'] = func_4967
mod = relay.transform.InferType()(mod)
mutated_mod['func_4967'] = func_4967
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4968 = relay.var("var_4968", dtype = "bool", shape = (12, 16, 8))#candidate|4968|(12, 16, 8)|var|bool
func_4967_call = mutated_mod.get_global_var('func_4967')
call_4969 = func_4967_call(var_4968)
output = call_4969
func_4970 = relay.Function([var_4968], output)
mutated_mod['func_4970'] = func_4970
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4894_call = mod.get_global_var('func_4894')
func_4895_call = mutated_mod.get_global_var('func_4895')
call_5027 = func_4894_call()
call_5028 = func_4894_call()
uop_5029 = relay.exp(call_5027.astype('float32')) # shape=(1, 16, 8)
uop_5031 = relay.exp(call_5028.astype('float32')) # shape=(1, 16, 8)
uop_5048 = relay.sinh(uop_5029.astype('float64')) # shape=(1, 16, 8)
uop_5050 = relay.sinh(uop_5031.astype('float64')) # shape=(1, 16, 8)
uop_5072 = relay.log2(uop_5048.astype('float64')) # shape=(1, 16, 8)
uop_5074 = relay.log2(uop_5050.astype('float64')) # shape=(1, 16, 8)
bop_5087 = relay.less_equal(uop_5072.astype('bool'), relay.reshape(uop_5048.astype('bool'), relay.shape_of(uop_5072))) # shape=(1, 16, 8)
bop_5090 = relay.less_equal(uop_5074.astype('bool'), relay.reshape(uop_5050.astype('bool'), relay.shape_of(uop_5074))) # shape=(1, 16, 8)
var_5118 = relay.var("var_5118", dtype = "float64", shape = (15, 16, 8))#candidate|5118|(15, 16, 8)|var|float64
bop_5119 = relay.mod(uop_5072.astype('float32'), var_5118.astype('float32')) # shape=(15, 16, 8)
bop_5122 = relay.mod(uop_5074.astype('float32'), var_5118.astype('float32')) # shape=(15, 16, 8)
bop_5129 = relay.less(uop_5048.astype('bool'), bop_5119.astype('bool')) # shape=(15, 16, 8)
bop_5132 = relay.less(uop_5050.astype('bool'), bop_5122.astype('bool')) # shape=(15, 16, 8)
func_4484_call = mod.get_global_var('func_4484')
func_4487_call = mutated_mod.get_global_var('func_4487')
var_5137 = relay.var("var_5137", dtype = "float64", shape = (32,))#candidate|5137|(32,)|var|float64
const_5138 = relay.const([[6.306910,8.777223,-0.990156,-4.549018,-8.057426,-7.467529,-2.237397,4.914013,7.334040,8.525598,-3.106816,2.322548,-0.278678,-5.796297,9.775150,-4.711122,-6.400350,1.661725,-1.613137,-4.691152],[5.483209,-4.852434,1.058603,-8.609935,2.709471,-7.545615,-8.327328,5.332234,-8.058168,8.709834,5.449277,-7.259086,2.921266,-8.928302,-6.049858,-7.959157,-2.678444,0.767173,-9.784010,-3.603747],[5.977721,-3.820307,-8.848323,7.189137,3.775757,-2.868500,-0.133727,-9.299123,-7.480200,7.277593,-8.139337,-3.648627,-2.925034,-5.719582,1.987472,4.293571,9.032882,-1.870175,6.965041,-0.890316],[-8.805164,-2.899315,-6.234487,8.689614,1.666123,0.975584,-5.865598,-7.445748,0.897906,-4.903648,7.618938,-0.384290,5.754877,-7.111023,-6.702942,8.152032,2.722550,4.818053,8.957663,-9.368380],[2.047229,-8.677772,4.840424,-9.913379,0.810142,-3.838190,-8.353174,1.261174,8.619032,6.177060,-7.513930,5.743522,-1.458371,0.157208,5.412083,-1.217951,8.238604,-4.866343,-6.697386,-6.102264],[9.759034,-8.706532,0.369065,3.188024,-1.570604,-2.137557,-2.275253,-1.865328,-5.080712,-5.588654,-9.276715,-6.529000,0.620729,-1.075001,6.127703,3.513897,1.707547,7.322432,8.376198,-6.391240],[7.319599,-6.551039,-4.702293,-7.584069,3.743154,-1.934595,7.076961,1.070725,2.138514,-9.623157,-7.012197,-4.377321,-4.714189,-2.515035,-3.037510,0.522164,9.719394,1.555544,-2.119808,-7.856251],[-9.274500,2.944898,4.038886,-4.223391,2.469933,-5.522073,-0.317921,1.197779,-5.289548,-7.759836,-9.646415,-3.492264,-8.784980,6.513160,0.804945,-7.588348,-1.497999,7.253267,-4.777671,2.170260]], dtype = "float64")#candidate|5138|(8, 20)|const|float64
call_5136 = relay.TupleGetItem(func_4484_call(relay.reshape(var_5137.astype('float64'), [2, 1, 16]), relay.reshape(const_5138.astype('float64'), [2, 5, 16]), ), 0)
call_5139 = relay.TupleGetItem(func_4487_call(relay.reshape(var_5137.astype('float64'), [2, 1, 16]), relay.reshape(const_5138.astype('float64'), [2, 5, 16]), ), 0)
func_564_call = mod.get_global_var('func_564')
func_567_call = mutated_mod.get_global_var('func_567')
var_5142 = relay.var("var_5142", dtype = "float32", shape = (1080,))#candidate|5142|(1080,)|var|float32
const_5143 = relay.const([-8.651661,-2.044156,1.445391,-1.455240,4.444095,-0.394338,-5.573417,-3.384943,-5.226153,-0.937281,0.241808,5.454605], dtype = "float64")#candidate|5143|(12,)|const|float64
call_5141 = relay.TupleGetItem(func_564_call(relay.reshape(var_5142.astype('float32'), [15, 9, 8]), relay.reshape(const_5143.astype('float64'), [12,]), ), 2)
call_5144 = relay.TupleGetItem(func_567_call(relay.reshape(var_5142.astype('float32'), [15, 9, 8]), relay.reshape(const_5143.astype('float64'), [12,]), ), 2)
func_186_call = mod.get_global_var('func_186')
func_189_call = mutated_mod.get_global_var('func_189')
const_5147 = relay.const([-7,-2,10,1,-7,-3,-7,-9,2,-4,6,7,8,-6,-3,4,-9,10,-10,-9,-3,-5,-3,7,-6,-6,-4,10,1,8,-7,5,9,-5,-8,5,9,2,-2,-7,2,3,-6,-10,10,-2,8,-3,3,-5,4,-2,8,7,5,-10,-7,4,5,10,-2,10,-10,-7,1,-1,2,8,-9,3,8,2,-6,9,-10,5,-3,-2,-8,-5,-2,5,-2,-7,-7,5,-4,1,3,1,10,5,-1,-6,7,9,8,7,-7,8,-5,-1,10,-10,5,6,7,9,-8,8,-6,7,1,3,6,-5,-6,3,10,1,-5,1,8,-10,6,-4,-9,8,2,-9,5,-3,-10,-1,10,-8,-8,-4,10,7,-6,-8,-9,-4,-10,-1,-8,-7,9,-1,-1,3,-7,-10,-5,-2,-5,5,-7,-4,3,-3,10,-9,10,-9,6,-2,10,-1,6,-5,6,-4,-10,-1,6,4,-3,-6,-1,-6,6,4,-8,1,8,7,-6,6,-3,-9,-10,4,5,6,6,5,-10,10,-5,3,6,7,3,8,-2,-5,-1,6,1,-2,-4,9,-9,1,9,-7,-6,-9,-2,6,-5,6,2,-1,-6,9,3,5,8,-4,-1,-4,-7,-9,9,1,-6,1,1,-10,7,8,-9,10,8,-6,6,10,-4,-10,-4,-8,-10,-8,-3,9,-10,-1,-9,-8,-6,-7,-8,-4,6,5,5,-8,-4,-5,7,-8,2,-7,10,-7,2,7,-3,-10,4,-6,-1,-3,3,2,3,-8,-9,3,10,6,-8,-4,5,-7,-1,8,-7,5,-1,3,-6,7,6,5,-4,10,3,10,-7,-6,9,-10,-5,10,1,7,4,3,8,8,6,-3,-1,6,1,8,-4,-8,-1,-4,-2,10,-9,-8,10,8,-3,4,5,3,1,-5,10,-5,-2,5,-4,-1,-9,-9,-4,-6,1,2,1,-3,7,-9,-1,-9,-7,-10,1,-3,10,-9,2,-3,7,-8,-1,3,9,6,-8,7,-9,-6,8,-1,5,5,7,-10,-3,5,1,1,-9,2,-2,-3,-5,1,2,6,-2,-5,-10,3,7,-7,-5,-10,5,-2,-10,10,-5,3,-3,-7,1,-3,-8,6,4,6,2,-2,6,4,10,-5,4,-4,-8,-1,-2,-2,1,-8,1,-4,7,-10,1,-3,9,-4,6,10,-9,-5,-5,3,-4,3,-4,8,3,6,-3,5,-7,-5,-6,-8,-7,-8,-9,10,-4,1,-10,-1,9,8,-8,-2,-1,9,3,4,8,4,-5,-3,9,-6,4,-3,7,-5,-4,2,-7,5,-6,-9,3,4,-10,-6,2,8,-1,9,6,-7,-4,-8,-9,8,-3,2,2,5,-4,1,-5,1,3,8,-5,-10,3,9,-10,-7,-6,9,6,10,-7,3,-1,9,-4,1,-1,10,8,4,-6,9,2,10,3,6,-10,-3,-3,4,1,-1,-6,-8,8,-2,-5,-8,10,2,7,-7,-9,9,5,1,9,-10,-3,-9,2,-7,4,-1,3,-10,-3,7,-7,4,-10,-10,7,3,-10,-2,4,7,-5,2,6,-6,1,3,-2,2,3,10,-3,1,5,-4,-3,7,-3,-3,5,8,-7,-5,-7,2,10,2,-4,9,-6,-8,-5,-6,8,-5,-1,10,-3,6,6,2,9,-1,8,-10,-2,5,5,-4,-3,5,-4,-9,-2,9,-2,-3,-8,3,4,-4,2,-2,3,2,-8,7,4,1,2,1,2,6,-10,-7,2,9,-1,3,-10,9,3,-2,-3,-10,-2,10,9,-5,6,-1,1,4,-4,5,3,-4,9,3,6,6,8,-3,5,4,-7,-2,9,-10,5,9,-1,-6,8,2,-5,-3,6,8,3,3,-10,-8,-10,-2,-6,-5,-3,-7,2,-4,-8,2,4,-7,3,-4,-4,-2,3,-9,2,-7,-7,-5,-4,10,7,-9,-1,5,-6,-6,3,5,1,-6,10,-7,10,7,-10,-9,8,-5,2,-2,-1,9,8,2,7,-10,3,-3,-9,8,-9,6,5,-4,-3,7,7,-10,9,-2,-1,-1,-2,-7,7,2,-2,-1,2,-4,-4,-3,-7,3,6,-10,2,3,-8,-8,-8,10,9,-7,-9,-9,3,3,4,6,5,-9,1,-2,-2,5,9,10,-1,2,-1,4,-1,-6,4,7,9,-6,-7,1,-7,1,-4,-5,-9,4,7,4,4,5,1,5,9,2,10,-9,-10,2,-1,-8,5,10,7,-10,-1,8,6,-4,7,-4,9,-3,-2,-2,5,3,9,1,-7,-8,-3,-2,2,-7,10,-5,5,-8,6,-1,-10,-8,-10,-7,-10,-5,1,-4,-3,-3,2,-2,7,-3,-9,-1,-1,-8,-10,5,-9,-2,10,-5,-9,-6,6,10,-9,8,9,7,-10,8,9,9,6,8,9,8,4,1,-3,5,5,-10,-5,-2,-3,7,4,9,7,-7,-3,-6,-1,6,9,-8,7,9,-6,-4,-1,-10,-7,6,-10,-4,-10,-9,9,-6,9,5,3,-7,-4,9,-4,-4,-10,6,-5,-3,1,5,9,2,-5,-5,10,-7,-3,-4,5,-7,-8,5,3,8,9,-6,5,10,5,-8,7,1,-2,-8,-3,-2,-10,-4,-4,-9,-6,-3,4,-10,-1,4,-4,10,2,-10,5,-5,8,7,2,7,10,-8,5,3,-4,4,6,3,3,2,-5,2,8,9,5,7,-6,-10,-3,-5,-2,5,4,-3,-1,-5,-5,4,-6,3,-7,-7,-7,3,9,-7,10,8,-9,-9,7,-9,-10,-8,-5,8,-3,-4,1,8,-9,3,-6,3,2,-8,-5,3,-9,4,2,-6,4,-7,1,-6,-2,-10,-2,6,5,4,2,-7,-10,4,2,1,4,-2,-3,5,-9,-4,8,-4,-5,-4,8,5,-4,-2,-3,-4,-10,1,-5,7,-3,-5,-2,-5,7,-1,5,-5,-8,-7,1,-7,-8,-2,-5,8,-1,-9,2,-7,5,6,-5,7,7,4,5,-8,-8,-7,1,-10,-6,5,-3,9,-2,6,-3,3,-8,9,-6,8,9,-6,-9,-3,3,5,2,-4,8,-4,-4,2,-3,7,9,-1,1,9,4,-8,-1,5,-8,10,10,6,2,-5,-10,2,10,-8,-3,-4,8,-5,7,-2,10,1,-7,-3,-5,-4,3,-4,1,5,-10,2,10,-7,-9,2,-3,7,-9,9,-1,9,-8,8,-9,-5,3,-7,7,2,2,-3,-8,-5,5,1,6,9,-4,-5,-1,10,-10,-8,2,10,5,-9,8,-8,-9,-8,-10,8,5,7,-4,9,-5,-10,5,10,-5,-3,-4,-5,-1,-7,9,2,-9,-7,7,8,3,8,-7,-9,9,7,-2,-8,5,-1,1,6,4,6,1,5,1,3,-2,-2,4,-4,-2,-9,-8,-1,8,2,3,5,-1,10,-4,1,3,8,-3,-4,-7,-1,-5,-7,-2,-7,8,-10,4,2,-1,7,6,-3,-8,-5,-2,-1,1,-2,-6,9,-4,-2,9,8,6,-5,-1,-3,-7,-7,7,8,5,-2,-10,6,7,2,-1,-7,-10,-3,-3,3,7,9,-7,3,-6,4,5,1,7,10,-8,8,9,8,-8,-10,-10,-10,-5,-8,9,10,-3,5,-6,1,-2,-9,-10,3,-9,-6,3,5,-8,-10,6,-10,10,-2,-2,10,4,7,8,6,2,-6,6,2,6,-3,-3,-3,10,-1,10,10,-3,-10,6,10,-5,-4,8,9,9,8,4,-7,9,-1,-9,3,-8,3,-8,-2,7,-4,-2,-1,-4,3,10,-6,-7,-10,-6,8,-7,-7,-2,-5,-7,-8,-3,-9,7,7,-3,-6,8,7,-10,-9,6,9,-5,8,5,-10,-2,7,5,7,-7,-10,-1,-2,-2,8,-4,-5,-1,-2,7,-7,5,10,-10,-7,2,-5,-4,5,-5,-5,10,-10,1,9,6,-8,-2,8,-7,-2,-4,-3,-1,6,3,-6,1,2,-8,1,9,-4,10,-4,10,-6,-10,-3,-1,-8,2,5,-10,5,-10,-3,-6,1,-10,2,10,4,-1,4,10,6,5,-3,-10,6,-3,-2,-7,-6,7,-9,-10,-10,2,2,-3,-1,-2,5,3,4,2,6,9,8,-3,-5,-10,3,7,1,8,10,8,-1,-9,-6,3,10,-7,-7,3,-3,-7,2,-6,3,7,-1,1,6,9,8,-4,-1,7,1,-10,-1,-5,-10,-10,-4,-8,-1,-8,-8,-9,-8,-7,3,-9,-1,1,7,-9,-6,1,5,6,10,-3,1,-5,6,-10,-3,5,9,10,-3,-6,-5,8,8,-7,8,-7,3,-7,-3,8,-7,1,-1,5,-7,3,-6,3,-5,-2,-2,3,10,-2,9,8,5,4,-10,7,10,1,-1,1,7,-10,-2,-4,-2,-7,8,-9,-7,-6,1,-6,3,6,6,-9,-3,-1,1,9,-2,6,-2,-1,-7,-7,10,1,3,-7,-7,9,7,-4,5,-4,10,5,5,2,-4,-2,2,-10,-1,1,5,-7,-2,-3,-6,2,-8,-9,-6,7,-2,4,2,-9,1,2,-2,8,-2,10,9,4,-10,2,-8,6,6,3,4,-1,-2,10,-2,7,-1,-1,-9,-10,2,5,-1,-9,10,4,-4,10,-10,9,1,9,2,-2,7,-10,-4,-10,-7,-1,-10,3,-4,9,5,9,3,6,7,6,2,4,2,-2,-2,-6,-1,-8,3,-10,-5,-2,6,6,10,9,10,9,-5,1,-5,10,7,1,-5,-8,-2,1,-2,1,-10,3,4,-2,-4,-6,1,5,4,-7,8,1,8,8,-10,-4,-1,-10,1,-4,6,-6,-6,4,8,10,9,-6,5,10,4,6,1,10,10,6,4,3,-4,1,-10,-8,4,9,9,-5,-1,6,-10,3,10,8,-3,3,9,1,-7,-10,4,-10,-9,4,7,2,-8,-7,-4,2,5,-5,1,6,5,-1,-5,2,6,-4,9,10,8,-8,2,10,-7,-6,2,-8,-5,-8,10,4,9,8,-1,7,-6,4,5,9,-10,2,-4,1,-9,-2,10,-2,-4,-8,9,-6,10,-6,5,-7,-10,-9,9,-6,8,7,3,-10,2,-4,1,9,-2,-6,-10,-4,-6,-5,-2,5,-10,-9,-2,2,6,6,-9,-1,-7,10,4,8,-6,4,7,-7,10,1,-4,7,-2,7,7,2,5,-3,-3,-8,7,6,-1,-2,8,4,-8,-4,-3,2,9,4,-4,-4,10,-8,3,-1,-9,-5,6,-1,-10,7,-5,5,-2,1,-6,5,-8,4,-8,-6,-8,6,-2,-2,-1,8,-9,4,-2,7,10,5,-6,-9,-4,3,-8,7,5,4,10,6,5,-9,4,6,-10,2,-1,-4,8,8,8,5,7,-3,-3,6,-10,-6,3,-8,4,2,-3,-2,-6,6,-8,-9,-2,3,3,3,4,-6,1,1,8,-1,-10,3,-5,-1,-1,9,-5,1,2,9,-5,-3,3,-4,-7,-1,9,-6,2,-7,-8,-10,-9,-10,9,4,-6,-2,3,9,10,9,-5,-6,-2,4,9,4,-7,8,-6,1,3,3,9,6,-4,-3,-9,6,1,-1,3,10,-10,7,-3,9,2,-2,4,4,-2,-4,3,-2,9,-5,-9,-4,3,6,-10,4,5,-4,-1,-6,3,-3,2,-1,9,5,10,8,9,-1,-8,-10,8,-3,-10,3,-9,-10,-2,-3,-6,2,6,-1,-3,-3,-5,6,-8,-4,8,-4,4,9,6,8,10,9,-9,10,-3,4,7,3,1,-4,5,-7,3,-6,7,2,-3,3,1,5,-8,4,-3,1,-6,-2,-4,-1,-6,-5,-10,-10,7,-6,-7,-2,2,-2,-5,-8,9,-4,-10,9,4,8,-2,9,-4,-8,8,7,6,-4,2,1,-1,-6,2,6,1,1,2,3,-7,-6,10,4,3,-6,9,10,-4,10,4,-3,-7,10,-6,-7,1,9,-9,7,10,-8,-3,-8,5,-5,1,-5,2,-2,-6,3,-4,-1,5,4,-3,6,-3,5,10,8,-9,4,8,-2,-4,-4,-7,-1,2,10,10,-3,8,-4,9,-4,6,-2,3,-9,-8,5,-7,-8,2,6,1,8,5,-2,5,-3,-3,3,8,2,6,-1,-4,4,6,1,-9,-1,-2,-1,10,-5,-8,10,4,-1,-1,-5,-3,4,-1,9,5,-4,-4,3,-10,8,9,-5,-9,-3,-1,7,9,3,6,8,1,-8,9,-8,10,-7,3,-3,-8,-3,7,3,1,4,10,-9,-5,6,8,3,10,-8,3,5,10,-2,-10,-2,3,-8,-9,-3,-4,2,-7,-2,6,1,-1,-1,-6,7,8,-5,-5,-3,10,3,-9,7,-10,2,-1,5,7,3,7,-9,9,-5,9,-1,7,4,-8,9,-2,-4,-2,-4,-5,4,7,6,-9,10,-2,-6,4,-3,5,-2,3,-1,-7,7,2,-3,-7,4,-1,-4,5,1,2,-4,8,-3,4,-7,8,2,-7,8,-5,10,7,10,-3,-1,-5,-1,3,-3,7,7,-3,-5,3,6,6,-5,-9,-4,5,7,-2,-2,-10,1,4,3,6,-2,1,-8,-2,-9,7,-3,-3,-2,-7,-10,-1,6,-7,-5,-7,2,2,5,3,7,9,2,-2,-7,-9,8,5,5,5,5,-6,-9,8,-6,-8,-3,-5,-9,7,6,2,-6,-1,9,3,-7,-10,1,10,1,10,-5], dtype = "int64")#candidate|5147|(2535,)|const|int64
call_5146 = relay.TupleGetItem(func_186_call(relay.reshape(const_5147.astype('int64'), [13, 13, 15])), 1)
call_5148 = relay.TupleGetItem(func_189_call(relay.reshape(const_5147.astype('int64'), [13, 13, 15])), 1)
func_2462_call = mod.get_global_var('func_2462')
func_2466_call = mutated_mod.get_global_var('func_2466')
const_5172 = relay.const([[-9.391078,-5.332192,-5.911635,4.976489,6.068472,-4.176060,-2.653719,3.734162,-1.453652,2.177918,-5.685408,-9.420040,1.771869,-3.817440,-3.138353,-3.833317,3.216545,-1.825500,8.894213,-5.967471,3.585928,9.744108,-5.807661,-1.531030,3.386942,1.002583,1.183816,-2.939508,6.830768,5.631286,-9.498160,-1.403951,-3.058739,2.505260,6.983131,-0.623881,7.567162,-8.767795,-0.305258,-5.082207,-8.346046,1.537640,5.185418,-6.161773,-3.337025],[3.379374,5.985176,-6.459662,-3.276936,-0.639421,0.448467,-5.940175,-3.252564,-5.168490,8.655007,-1.124882,8.303610,-5.986133,7.621824,0.110900,-2.557540,3.706239,9.833481,8.109669,2.645507,8.598594,-8.154838,0.750437,-5.723717,2.551351,-1.663991,2.195017,6.183285,9.725869,-6.184754,-1.921136,9.494609,-2.536394,0.655666,-2.930583,4.399246,-3.142306,-5.778786,-5.401330,2.831307,-2.028239,3.307975,7.224488,4.003492,-6.912084],[-7.112512,-2.295795,-8.262310,-5.395036,-5.255208,-4.964577,-4.415499,4.473139,1.887505,6.915153,8.286463,-4.827811,6.245059,2.596167,-6.535680,-9.586645,-5.868153,-1.090897,2.436490,9.290451,-5.952706,-1.186483,-5.047425,3.550128,5.832822,-7.353137,-7.965688,-5.701480,7.280586,1.345932,9.693829,-7.603742,-6.878288,-6.252370,4.944719,-5.524119,5.565620,-9.066209,-0.455864,7.519399,-5.380597,3.208584,5.680493,-8.881289,3.553623]], dtype = "float64")#candidate|5172|(3, 45)|const|float64
var_5173 = relay.var("var_5173", dtype = "float32", shape = (378,))#candidate|5173|(378,)|var|float32
call_5171 = relay.TupleGetItem(func_2462_call(relay.reshape(const_5172.astype('float64'), [3, 9, 5]), relay.reshape(var_5173.astype('float32'), [378,]), relay.reshape(const_5172.astype('float64'), [3, 9, 5]), ), 1)
call_5174 = relay.TupleGetItem(func_2466_call(relay.reshape(const_5172.astype('float64'), [3, 9, 5]), relay.reshape(var_5173.astype('float32'), [378,]), relay.reshape(const_5172.astype('float64'), [3, 9, 5]), ), 1)
output = relay.Tuple([bop_5087,bop_5129,call_5136,var_5137,const_5138,call_5141,var_5142,const_5143,call_5146,const_5147,call_5171,const_5172,var_5173,])
output2 = relay.Tuple([bop_5090,bop_5132,call_5139,var_5137,const_5138,call_5144,var_5142,const_5143,call_5148,const_5147,call_5174,const_5172,var_5173,])
func_5175 = relay.Function([var_5118,var_5137,var_5142,var_5173,], output)
mod['func_5175'] = func_5175
mod = relay.transform.InferType()(mod)
mutated_mod['func_5175'] = func_5175
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5175_call = mutated_mod.get_global_var('func_5175')
var_5177 = relay.var("var_5177", dtype = "float64", shape = (15, 16, 8))#candidate|5177|(15, 16, 8)|var|float64
var_5178 = relay.var("var_5178", dtype = "float64", shape = (32,))#candidate|5178|(32,)|var|float64
var_5179 = relay.var("var_5179", dtype = "float32", shape = (1080,))#candidate|5179|(1080,)|var|float32
var_5180 = relay.var("var_5180", dtype = "float32", shape = (378,))#candidate|5180|(378,)|var|float32
call_5176 = func_5175_call(var_5177,var_5178,var_5179,var_5180,)
output = call_5176
func_5181 = relay.Function([var_5177,var_5178,var_5179,var_5180,], output)
mutated_mod['func_5181'] = func_5181
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4943_call = mod.get_global_var('func_4943')
func_4945_call = mutated_mod.get_global_var('func_4945')
call_5198 = relay.TupleGetItem(func_4943_call(), 0)
call_5199 = relay.TupleGetItem(func_4945_call(), 0)
output = relay.Tuple([call_5198,])
output2 = relay.Tuple([call_5199,])
func_5217 = relay.Function([], output)
mod['func_5217'] = func_5217
mod = relay.transform.InferType()(mod)
mutated_mod['func_5217'] = func_5217
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5217_call = mutated_mod.get_global_var('func_5217')
call_5218 = func_5217_call()
output = call_5218
func_5219 = relay.Function([], output)
mutated_mod['func_5219'] = func_5219
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5217_call = mod.get_global_var('func_5217')
func_5219_call = mutated_mod.get_global_var('func_5219')
call_5287 = relay.TupleGetItem(func_5217_call(), 0)
call_5288 = relay.TupleGetItem(func_5219_call(), 0)
output = call_5287
output2 = call_5288
func_5295 = relay.Function([], output)
mod['func_5295'] = func_5295
mod = relay.transform.InferType()(mod)
output = func_5295()
func_5296 = relay.Function([], output)
mutated_mod['func_5296'] = func_5296
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5306 = relay.var("var_5306", dtype = "float32", shape = (2, 11, 11))#candidate|5306|(2, 11, 11)|var|float32
uop_5307 = relay.sin(var_5306.astype('float32')) # shape=(2, 11, 11)
output = uop_5307
output2 = uop_5307
func_5313 = relay.Function([var_5306,], output)
mod['func_5313'] = func_5313
mod = relay.transform.InferType()(mod)
var_5314 = relay.var("var_5314", dtype = "float32", shape = (2, 11, 11))#candidate|5314|(2, 11, 11)|var|float32
output = func_5313(var_5314)
func_5315 = relay.Function([var_5314], output)
mutated_mod['func_5315'] = func_5315
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5217_call = mod.get_global_var('func_5217')
func_5219_call = mutated_mod.get_global_var('func_5219')
call_5383 = relay.TupleGetItem(func_5217_call(), 0)
call_5384 = relay.TupleGetItem(func_5219_call(), 0)
var_5389 = relay.var("var_5389", dtype = "bool", shape = (16, 16, 8))#candidate|5389|(16, 16, 8)|var|bool
bop_5390 = relay.multiply(call_5383.astype('float64'), var_5389.astype('float64')) # shape=(16, 16, 8)
bop_5393 = relay.multiply(call_5384.astype('float64'), var_5389.astype('float64')) # shape=(16, 16, 8)
func_4824_call = mod.get_global_var('func_4824')
func_4826_call = mutated_mod.get_global_var('func_4826')
var_5400 = relay.var("var_5400", dtype = "float64", shape = (72,))#candidate|5400|(72,)|var|float64
call_5399 = func_4824_call(relay.reshape(var_5400.astype('float64'), [4, 2, 9]))
call_5401 = func_4824_call(relay.reshape(var_5400.astype('float64'), [4, 2, 9]))
output = relay.Tuple([bop_5390,call_5399,var_5400,])
output2 = relay.Tuple([bop_5393,call_5401,var_5400,])
func_5408 = relay.Function([var_5389,var_5400,], output)
mod['func_5408'] = func_5408
mod = relay.transform.InferType()(mod)
mutated_mod['func_5408'] = func_5408
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5408_call = mutated_mod.get_global_var('func_5408')
var_5410 = relay.var("var_5410", dtype = "bool", shape = (16, 16, 8))#candidate|5410|(16, 16, 8)|var|bool
var_5411 = relay.var("var_5411", dtype = "float64", shape = (72,))#candidate|5411|(72,)|var|float64
call_5409 = func_5408_call(var_5410,var_5411,)
output = call_5409
func_5412 = relay.Function([var_5410,var_5411,], output)
mutated_mod['func_5412'] = func_5412
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4943_call = mod.get_global_var('func_4943')
func_4945_call = mutated_mod.get_global_var('func_4945')
call_5534 = relay.TupleGetItem(func_4943_call(), 0)
call_5535 = relay.TupleGetItem(func_4945_call(), 0)
func_3438_call = mod.get_global_var('func_3438')
func_3441_call = mutated_mod.get_global_var('func_3441')
var_5540 = relay.var("var_5540", dtype = "float32", shape = (840,))#candidate|5540|(840,)|var|float32
call_5539 = func_3438_call(relay.reshape(var_5540.astype('float32'), [14, 4, 15]))
call_5541 = func_3438_call(relay.reshape(var_5540.astype('float32'), [14, 4, 15]))
func_725_call = mod.get_global_var('func_725')
func_729_call = mutated_mod.get_global_var('func_729')
const_5551 = relay.const(-2, dtype = "uint32")#candidate|5551|()|const|uint32
var_5552 = relay.var("var_5552", dtype = "uint32", shape = (14,))#candidate|5552|(14,)|var|uint32
call_5550 = relay.TupleGetItem(func_725_call(relay.reshape(const_5551.astype('uint32'), []), relay.reshape(var_5552.astype('uint32'), [14, 1]), ), 0)
call_5553 = relay.TupleGetItem(func_729_call(relay.reshape(const_5551.astype('uint32'), []), relay.reshape(var_5552.astype('uint32'), [14, 1]), ), 0)
output = relay.Tuple([call_5534,call_5539,var_5540,call_5550,const_5551,var_5552,])
output2 = relay.Tuple([call_5535,call_5541,var_5540,call_5553,const_5551,var_5552,])
func_5561 = relay.Function([var_5540,var_5552,], output)
mod['func_5561'] = func_5561
mod = relay.transform.InferType()(mod)
var_5562 = relay.var("var_5562", dtype = "float32", shape = (840,))#candidate|5562|(840,)|var|float32
var_5563 = relay.var("var_5563", dtype = "uint32", shape = (14,))#candidate|5563|(14,)|var|uint32
output = func_5561(var_5562,var_5563,)
func_5564 = relay.Function([var_5562,var_5563,], output)
mutated_mod['func_5564'] = func_5564
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4894_call = mod.get_global_var('func_4894')
func_4895_call = mutated_mod.get_global_var('func_4895')
call_5606 = func_4894_call()
call_5607 = func_4894_call()
output = call_5606
output2 = call_5607
func_5612 = relay.Function([], output)
mod['func_5612'] = func_5612
mod = relay.transform.InferType()(mod)
output = func_5612()
func_5613 = relay.Function([], output)
mutated_mod['func_5613'] = func_5613
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4943_call = mod.get_global_var('func_4943')
func_4945_call = mutated_mod.get_global_var('func_4945')
call_5632 = relay.TupleGetItem(func_4943_call(), 0)
call_5633 = relay.TupleGetItem(func_4945_call(), 0)
output = call_5632
output2 = call_5633
func_5639 = relay.Function([], output)
mod['func_5639'] = func_5639
mod = relay.transform.InferType()(mod)
output = func_5639()
func_5640 = relay.Function([], output)
mutated_mod['func_5640'] = func_5640
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5639_call = mod.get_global_var('func_5639')
func_5640_call = mutated_mod.get_global_var('func_5640')
call_5646 = func_5639_call()
call_5647 = func_5639_call()
output = call_5646
output2 = call_5647
func_5657 = relay.Function([], output)
mod['func_5657'] = func_5657
mod = relay.transform.InferType()(mod)
output = func_5657()
func_5658 = relay.Function([], output)
mutated_mod['func_5658'] = func_5658
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5657_call = mod.get_global_var('func_5657')
func_5658_call = mutated_mod.get_global_var('func_5658')
call_5664 = func_5657_call()
call_5665 = func_5657_call()
uop_5675 = relay.asin(call_5664.astype('float32')) # shape=(1, 16, 8)
uop_5677 = relay.asin(call_5665.astype('float32')) # shape=(1, 16, 8)
bop_5682 = relay.bitwise_and(uop_5675.astype('int16'), relay.reshape(call_5664.astype('int16'), relay.shape_of(uop_5675))) # shape=(1, 16, 8)
bop_5685 = relay.bitwise_and(uop_5677.astype('int16'), relay.reshape(call_5665.astype('int16'), relay.shape_of(uop_5677))) # shape=(1, 16, 8)
func_186_call = mod.get_global_var('func_186')
func_189_call = mutated_mod.get_global_var('func_189')
const_5691 = relay.const([-10,-5,4,-2,6,8,-2,-6,-5,-6,10,10,2,-10,-3,-3,1,6,3,-8,-7,8,7,2,9,-9,-8,1,-8,-10,-7,-6,10,4,1,2,-2,-9,6,-1,3,-4,-8,2,-7,6,3,4,5,7,-2,6,-3,3,8,2,1,-2,-2,-6,7,3,-6,-5,5,-7,-5,10,-9,7,4,-1,-7,7,-7,8,-7,-8,-10,-3,7,3,-4,1,-8,3,8,-9,6,4,-9,9,-5,-8,-10,-9,1,-10,-7,-10,-9,-8,-6,-2,3,8,-6,7,-6,6,5,4,1,5,-6,4,-8,2,7,8,10,3,3,-7,4,4,1,7,5,-10,7,-6,-6,10,-4,5,-2,-10,-8,-5,-2,-4,-8,-7,-3,4,2,-4,10,-2,-2,-10,5,3,-7,-6,7,4,-10,-6,9,-2,2,7,-2,8,-8,-10,8,-6,2,-4,3,2,-10,-6,-10,7,-8,4,7,-6,10,-8,1,-1,-6,-10,6,2,-2,-4,1,-2,10,-1,-8,2,2,4,3,-6,4,-8,8,6,-2,-2,-2,2,-10,8,9,-6,9,-6,-7,1,-6,4,1,-6,10,6,4,-5,2,-4,3,-3,2,-5,2,2,7,6,6,2,9,8,-7,-10,6,1,-6,4,-6,8,-4,-9,-8,8,-6,10,8,1,-2,-8,4,10,6,9,4,3,8,7,-5,-10,5,6,-9,-3,-7,9,-10,3,-4,9,8,6,-4,-3,-9,-9,2,-10,-2,2,-1,3,2,9,-8,6,2,3,-6,-6,1,9,-1,-6,3,-6,-1,-8,-7,-10,5,1,9,-5,2,2,-7,9,-2,-4,-3,9,-9,6,4,-1,4,-8,5,10,7,3,2,3,-4,-1,7,-10,7,-4,-2,1,6,10,5,1,3,7,3,-1,6,6,2,-2,10,1,9,-7,-3,8,-9,1,2,-7,-5,4,10,5,-5,-2,-10,-6,-7,6,2,-8,-5,-10,5,4,6,1,7,10,2,-7,-5,3,-8,1,-5,10,6,-6,9,-2,7,1,-1,6,-2,-6,-7,-10,10,-6,8,6,10,-6,-2,-4,-4,-5,-7,-6,5,8,3,-1,-7,1,-7,-1,8,5,-8,3,5,6,-8,-1,-6,-8,-6,3,6,-9,10,-9,9,-10,-3,10,-10,2,-9,-2,-3,-4,-7,-10,-1,-7,1,1,10,-1,-4,-4,7,4,-10,-1,-5,10,3,7,3,5,10,7,7,4,9,10,4,4,-8,-5,-3,5,8,-10,-5,-6,2,6,9,3,-8,6,6,-5,8,-7,8,-6,5,-9,2,-7,7,4,-3,-6,1,-4,5,-1,-1,3,-2,8,-5,-10,-2,-1,-8,7,-3,4,-8,-1,8,-5,2,-2,6,-2,9,-8,-8,-2,-4,-10,3,-1,2,3,3,3,-7,-10,5,4,3,-4,2,7,-4,-3,1,-9,3,5,1,1,-10,-1,-2,-10,-8,8,-10,-4,-4,-3,-10,-7,4,8,9,1,10,-6,-8,9,-1,-4,2,7,-6,10,-1,-10,1,10,9,1,3,4,-4,-7,-10,5,-2,9,-3,5,-7,8,-3,10,-10,-3,-10,6,2,10,4,-7,10,-6,2,-4,4,-9,-10,1,3,3,-3,-9,2,-10,-7,-5,-10,7,-10,-4,-4,-5,3,-2,-10,-2,-6,1,-10,-6,-7,-1,4,2,8,-10,9,7,-1,-10,6,7,3,-1,10,-10,-10,7,-9,-8,5,1,3,-7,7,-5,-1,6,-10,-9,-4,-9,-9,6,5,9,2,-3,-8,-9,-2,-9,-7,-9,3,9,-6,-2,5,7,2,10,-3,-8,5,-7,4,-10,-2,9,-8,3,-9,10,-2,5,-10,9,8,-6,7,-10,1,3,10,9,2,-1,-8,8,8,6,-8,1,4,-9,-3,3,8,9,10,7,1,-5,-10,9,-6,-4,-9,10,-4,-6,5,-3,7,-4,-10,-1,10,-10,-10,-6,3,1,-7,-7,10,-10,-5,10,4,1,7,-5,-7,-7,3,3,7,7,-7,-7,-8,-1,-1,-6,-9,9,8,-4,8,-2,-7,6,-9,8,-7,-2,-3,7,6,-6,-2,-8,8,5,-5,6,10,-6,7,6,2,-9,8,6,3,6,9,-4,-8,-3,-6,5,-3,6,8,3,7,-2,2,-1,-3,8,3,-9,3,-5,10,-4,2,2,9,9,-9,-2,-10,4,2,-5,8,-7,3,7,-4,8,-10,-8,-6,-6,10,6,3,-3,-3,-9,2,1,9,-1,-2,3,-9,-2,9,-10,10,-1,7,7,4,-3,3,4,-4,9,3,-8,4,-7,-10,4,-4,-2,-2,-1,4,-3,-7,-10,-1,9,-10,6,8,9,-2,-7,-1,-7,5,-7,1,-5,8,-1,4,-3,-6,-10,-6,-2,3,7,8,5,2,-2,6,9,-5,-1,10,-5,4,-3,-4,1,6,-3,1,-8,4,4,-7,1,5,3,7,6,-3,4,-7,9,4,-8,10,8,3,-3,6,6,-6,-1,-7,8,7,1,8,7,-2,9,-8,5,8,6,1,-9,9,4,6,-7,-4,7,10,8,-9,-3,3,-10,5,-6,6,-5,-5,2,-1,-4,-9,10,7,1,-2,-2,-2,5,6,6,-7,6,10,-3,9,7,-10,-9,-3,-2,-5,-2,-5,-6,2,-3,-5,-1,9,7,5,7,-8,-4,-9,10,1,10,-2,-8,-8,-3,2,-7,10,-8,-5,2,-3,8,3,5,3,1,-2,10,-10,3,9,-10,2,-5,6,4,-2,-1,-2,8,-2,1,-7,-3,5,8,6,4,7,8,-7,-3,5,-7,-2,2,-3,9,-5,-9,-8,4,-5,3,10,-5,4,-9,2,5,10,-8,-4,4,-1,10,10,-5,-6,4,2,4,-7,-4,-8,3,-10,-2,-9,-4,1,-10,-9,3,5,-3,7,2,10,-5,9,-8,-10,-3,-9,9,-2,1,8,-9,3,10,9,6,-2,-2,6,9,-10,-6,9,9,6,5,3,-7,-5,-6,2,6,2,4,7,5,6,-8,-7,-8,-6,9,6,8,4,6,8,8,1,10,-7,-5,6,-10,10,-10,-3,-10,4,2,3,-3,-1,3,-5,10,-9,5,-6,-2,4,-3,-10,8,10,-3,-10,-6,-9,3,-3,6,-7,9,7,-10,-3,10,7,-9,-7,-3,-9,8,-9,2,5,8,-10,-5,-8,7,-1,5,4,8,8,-8,10,5,-8,-3,-8,5,8,4,-7,9,6,6,10,1,5,5,7,7,10,8,-3,-5,-3,8,7,-5,-1,-5,7,9,9,-9,5,-4,6,-2,-5,9,-3,7,4,5,5,8,-7,-7,-2,-3,-2,3,-8,-8,-9,2,-4,4,-1,5,10,-1,10,-3,4,-1,-4,-6,-7,-7,1,-2,8,-5,4,8,-3,1,7,-8,-4,9,3,-2,10,-1,-1,-8,-9,-2,2,7,9,1,-5,-10,7,-7,-7,-5,10,-9,-8,-4,9,10,-5,7,6,-1,6,-8,-1,5,5,6,-5,10,2,-8,9,-10,-6,10,4,1,-3,3,5,3,-8,-7,5,-6,-9,-8,4,-5,-7,-2,-6,-1,3,4,-1,-8,-9,-4,2,9,-6,-2,-5,1,-1,2,-6,-10,-6,7,-3,-8,1,7,2,5,-5,10,-3,3,-6,3,6,10,-8,-1,3,-5,3,-6,-10,-5,-5,4,-6,1,-1,-3,-8,1,2,-8,1,-7,-5,-9,5,9,-9,-9,-9,-8,-7,-7,5,-2,10,-10,-3,-7,-4,-5,-2,-9,7,-9,-8,-9,9,-9,-4,9,-1,8,8,6,4,10,-6,-9,9,-3,7,4,-8,8,4,-7,-6,10,-10,7,10,10,-8,-10,8,-6,5,-9,-2,4,-6,-2,-6,8,1,-10,5,-6,10,2,1,-3,7,-9,10,-7,-6,9,-3,8,4,-4,5,-6,8,-4,-5,7,-10,-2,-2,7,8,-10,4,-7,-3,1,-3,-4,4,-1,-3,-4,-5,-3,5,-4,7,6,-9,4,-1,1,-2,4,1,9,-4,-8,7,-5,-3,-7,-3,4,3,-6,-2,10,-10,-10,-10,8,1,-2,-9,-3,7,3,-3,6,4,2,-8,10,9,-2,10,-4,6,-9,4,-7,4,-5,-8,4,-4,8,1,2,9,-10,2,7,-1,-2,10,9,1,2,-6,3,-5,2,8,-7,-7,-3,-2,-8,-9,-9,2,-5,-2,4,5,8,6,-7,5,1,-2,1,-9,8,-9,-8,-3,-6,2,-2,5,7,9,8,-10,6,-7,8,5,-3,3,7,-8,10,3,7,2,-3,-9,-7,-2,-1,-9,5,6,-10,3,4,2,-1,8,5,3,-2,-9,-9,1,1,2,-6,6,-7,7,10,9,-4,-1,-6,-9,7,9,-8,-8,4,5,-8,8,-1,9,4,-7,5,-1,4,-3,-7,-7,-5,-6,-6,-1,-3,2,-5,7,10,-2,-2,8,-1,5,3,5,-10,9,1,2,10,-7,-6,-6,8,1,-1,6,-8,-1,6,1,6,-1,9,-10,9,7,4,4,-1,4,4,5,-10,4,-2,-1,4,-5,7,-3,-7,-6,4,-4,2,9,5,-9,2,-10,-8,-3,5,5,-5,10,1,-2,-3,1,4,3,-8,6,-6,2,-9,4,5,6,10,-2,2,-5,2,-4,10,8,2,7,10,1,4,-3,-7,-9,-5,-7,4,-3,1,-5,-7,-8,6,-4,-5,-8,-10,-10,-10,-5,9,-3,5,-1,5,9,8,-10,5,1,-9,-2,9,-8,-10,-5,7,4,-6,-10,3,-5,-9,3,9,5,-2,8,9,-10,1,10,3,-1,2,-4,-1,6,-3,5,5,-9,6,-8,-5,6,6,-5,-9,-10,6,-6,2,-10,-10,-7,6,2,5,-9,-10,8,8,-5,-8,9,-10,4,6,-8,-8,1,-3,7,5,-8,-10,3,10,6,4,3,-2,-7,-8,5,2,-1,1,2,-2,2,-7,-10,2,4,-3,1,3,-4,-3,-6,-4,-7,-4,10,-9,8,7,4,7,-5,-6,-8,2,-9,-8,9,3,7,-7,1,-9,-4,10,6,-10,8,5,3,5,-6,9,6,-3,7,-10,-8,1,7,-3,-7,-2,-9,10,-8,-5,9,-10,-4,-8,7,-1,-8,10,-2,-6,6,-5,-9,-6,-1,1,-5,-4,8,-9,-1,9,-5,-5,-1,-7,3,9,-8,-8,6,-8,2,9,6,-4,-2,-8,-1,-3,6,-9,-5,-10,7,-1,-7,3,3,-1,4,7,8,3,10,4,-8,-6,5,-6,-2,-5,-6,-10,2,9,5,-2,-3,4,2,1,3,5,-1,-10,7,-4,4,1,3,2,6,-5,-10,4,9,2,-1,1,7,7,-5,-7,2,4,10,7,1,-6,-1,3,-6,-5,9,10,-7,9,7,2,-6,7,4,3,-6,-6,-9,-8,-3,1,8,9,-8,9,6,5,8,7,7,-7,7,3,-2,1,5,9,-3,9,9,-9,9,-5,9,7,2,-1,9,6,-5,9,9,3,8,-7,2,-10,-1,6,-8,6,-10,10,-10,-1,5,7,9,8,-4,2,3,6,10,-2,6,-10,-4,6,-7,3,6,-6,1,-2,-10,-10,-8,-7,-8,-7,-6,1,-5,7,3,-6,1,-3,7,-7,10,10,-4,6,-5,-8,-8,-2,-7,7,-9,8,4,-2,9,-7,-9,-8,-3,6,-9,-10,3,-2,-1,10,-1,-1,4,-7,5,5,-1,8,9,-4,8,5,-6,-4,5,8,-4,4,-2,-2,-3,2,10,-1,-4,7,-1,-7,-1,-3,-7,-4,-7,1,-9,8,-2,7,-10,2,3,8,-4,-10,-6,-1,3,-5,6,-2,1,-9,8,-4,4,4,5,-3,7,-4,-6,9,4,10,2,-7,1,5,-1,10,4,5,6,-10,1,7,9,-7,-9,-3,10,-3,5,4,8,-3,8,4,8,-8,-8,-6,-10,-9,9,-2,-3,4,5,-6,-2,7,-1,-3,-5,-5,5,-9,4,7,-2,-6,4,-5,-6,1,-1,7,7,10,10,-4,-7,-3,9,-6,-7,-5,2,7,10,5,6,5,3,-5,1,1,10,-2,-2,-1,-1,-1,6,-1,7,2,-10,-7,2,-8,-1,2,-3,-4,5,7,2,8,-5,6,7,-5,5,-3,-4,-10,10,-10,-8,-9,8,8,-3,9,7,9,-5,4,6,7,-8,7,-10,-2,-9,-3,6,-8,8,-6,7,3,-2,2,-2,-8,-5,-10,-9,-7,-3,9,10,10,-7,4,-4,5,-4,3,-5,8,-3,-7,1,5,2,5,1,3,4,1,-6,3,1,-6,7,6,-2,-4,-7,-7,3,3,7,-2,-3,8,-9,-9,-9,7,-1,-5,8,-6,-10,-3,6,7,-2,-6,-3,-4,7,3,8,-1,-4,2,8,6,4,3,7,-5,10,-8,8,-3,7,3,7,4,10,5,7,-8,-5,1,10,3,-9,-2,4,2,-3,-7,-6,-4,-9,6,4,-7,4,1,5,-3,6,1,-3,9,5,8,7,2,5,-3,4,6,-9,-4,-2,1,4,-9,-5,3,-4,-3,-5,8,3,-6,1,-4,10,9,7,-3,-5,8,-9,-10,-3,6,10,-7,5,-9,-7,9,3,3,-1,2,7,6,4,10,10,7,-10,-2,-10,-3,4,-6,1,8,6,-8,2], dtype = "int64")#candidate|5691|(2535,)|const|int64
call_5690 = relay.TupleGetItem(func_186_call(relay.reshape(const_5691.astype('int64'), [13, 13, 15])), 0)
call_5692 = relay.TupleGetItem(func_189_call(relay.reshape(const_5691.astype('int64'), [13, 13, 15])), 0)
func_896_call = mod.get_global_var('func_896')
func_899_call = mutated_mod.get_global_var('func_899')
const_5697 = relay.const([2,-5,8,3,8,2,-7,7,-1,7,-4,5,1,6,-3,-2,-8,2,-3,-5,-3,4,9,-7,10,-2,-3,6,10,10,8,10,1,9,7,4,-10,7,-10,10,8,-6,-9,-5,-6,-4,-8,-10,6,-4,-7,2,7,-7,-6,4,-10,-5,5,-10,4,5,10,-5,-9,9,7,3,3,-8,-8,-2,-5,7,-6,10,1,-6,-3,7,-7,-7,-10,-8,-2,-9,-1,7,10,7,-1,8,2,-4,2,-8,10,5,8,2,-2,-10,-3,-10,-3,9,-5,7,-10,4,-6,4,2,7,-5,-1,1,-3,-10,-7,1,6,-4,3,8,7,2,10,-3,3,8,-8,-5,3,-3,8,-8,-9,-1,-6,10,3,-7,5,1,-9,-3,-8,-5,6,5,1,10,6,2,10,-7,5,7,-3,1,-9,-6,-5,-10,-10,-6,-8,1,-8,10,-9,3,3,6,-10,8,1,6,7,-6,-3,-8,-9,-7,-5,4,-3,6,9,-4,8,10,-7,3,4,-3,-4,-8,-1,7,-3,8,10,-4,7,-9,9,2,8,2,-7,-1,-7,3,5,3,-2,5,-6,-2,6,-6,3,-1,-5,4,-9,4,-3,3,6,-9,-7,-2,-3,6,8,-4,-1,-1,-1,8,-10,-5,9,3,4,-6,6,5,-4,9,-2,2,-2,-8,8,3,8,10,-8,3,-7,-4,-8,-4,-10,6,-10,5,-5,-2,-1,-2,-5,-8,-7,4,3,9,-6,6,8,8,-4,9,-8,-2,-6,-9,7,3,-10,2,-4,5,-5,-6,4,-2,-10,8,2,6,6,-8,-5,-1,-7,-8,-1,10,5,1,-3,2,2,1,1,3,-3,4,-3,4,-5,10,7,-4,-8,-6,7,-4,7,4,-3,7,9,5,-6,9,-1,-7,-1,-3,-5,-9,4,-3,1,10,4,1,1,-5,-4,6,3,4,-4,2,5,-2,-9,1,-2,-5,10,-2,-1,-8,1,-10,9,10,-10,-3,-8,-5,1,6,-9,-2,6,-2,2,1,5,-10,7,8,-4,4,7,8,7,1,-6,5,-8,-8,8,-4,3,9,-3,7,1,1,1,6,-3,4,-2,1,7,-10,1,9,-7,-3,-7,-2,-2,-6,2,10,9,-5,2,-2,-7,5,-8,3,-3,10,9,-8,-2,-3,-4,-10,-9,-5,2,2,-10,9,-1,5,-9,4,6,-6,-4,-3,-5,3,-9,-9,-8,2,9,-7,-2,-4,7,8,10,2,-6,-4,9,5,8,2,-4,-5,6,3,4,8,5,-5,-1,-1,-3,7,4,3,-5,-9,7,-6,-6,10,6,1,5,10,-2,-2,8,8,-1,-6,-4,-9,-1,-6,2,6,6,-3,3,9,-6,2,-8,6,9,-6,-6,-6,8,3,9,-1,-5,8,-10,5,5,8,8,-3,-5,-10,1,-8,-9,10,10,-5,-6,5,1,1,-7,-1,2,-2,10,8,9,4,-6,-7,6,1,6,-9,8,-3,9,-10,6,8,3,1,3,-1,10,5,-10,9,4,3,9,7,-9,-1,-8,-5,6,-4,-1,-7,-2,8,-1,-8,-6,9,10,-5,2,8,-6,2,8,10,8,2,-10,-2,9,7,4,3,1,-2,6,2,2,-4,9,-4,1,-9,-8,1,-4,5,4,3,-7,-8,-7,-5,-6,1,-4,4,-1,-4,5,-8,-4,8,-10,1,8,-8,-10,1,-3,1,7,3,-10,7,-2,8,-8,6,-7,-5,6,7,-8,6,-3,1,4,-10,-8,-2,1,-10,6,9,3,-10,7,9,-10,-9,1,4,1,-2,10,3,3,2,-7,7,-3,3,6,5,6,-10,-3,2,8,-3,9,-2,7,-4,-5,8,-9,9,-2,1,10,3,-8,5,1,4,4,-2,10,-9,8,4,-8,-3,1,6,-7,-5,8,-9,-10,8,-9,-8,10,-5,-3,-4,-3,-1,10,8,-6,2,-4,2,-8,-1,5,-5,5,1,-10,-10,3,9,-9,-3,-9,9,-10,9,-3,4,-10,-3,10,4,3,2,7,1,8,1,3,-3,2,10,2,5,2,8,4,-1,-8,-4,6,-3,1,4,-3,-6,8,-10,9,-4,-3,-2,-6,7,10,1,7,2,7,2,2,-4,-4,-5,-10,-2,3,4,-1,-5,10,-6,-1,7,-6,-7,6,1,8,1,-6,2,10,-1,7,-1,4,-6,-8,3,1,-4,-1,-5,2,-6,-10,8,-6,-1,4,10,1,-3,8,-5,-5,-5,6,7,7,-8,4,9,6,-3,-1,-10,-10,3,8,8,-7,-2,-5,4,-4,1,10,-10,-9,9,-9,-4,2,6,5,5,-6,-6,-8,3,5,-2,3,3,6,-1,3,-3,-1,6,4,8,2,3,6,-4,9,8,-1,-3,5,3,9,4,6,8,5,1,1,9,-9,10,2,-1,1,9,8,-5,-7,-9,-10,4,4,-3,9,-4,-5,-8,4,-10,-5,-2,-1,2,-7,3,-9,-1,2,7,5,4,8,7,-1,-9,-5,9,-10,-6,-3,4,-7,4,8,5,-3,-3,8,2,-8,8,-4,1,-10,-2,-9,-7,-9,8,-2,-1,9,-3,6,10,6,9,-7,-5,9,-3,2,-7,-1,-2,-7,6,-9,-4,-4,-8,2,-2,10,-9,-3,-9,2,-9,8,-4,4,-10,-10,-7,9,-7,-5,-4,-4,-5,-5,5,-10,-10,6,5,5,3,2,-2,-9,3,-7,8,2,-10,10,4,-2,8,8,7,9,-1,-4,-1,1,7,-3,-9,10,1,7,-8,10,4,-1,5,5,-2,-8,-1,9,7,5,-8,-5,5,-4,8,2,6,-7,5,7,-2,-10,-4,-5,2,6,6,-9,-3,5,9,-7,3,7,7,-5,7,-6,-4,-1,-10,6,-8,7,8,-7,9,3,8,-10,-2,-6,10,-1,2,3,-10,-7,2,10,-4,-8,-10,7,-10,5,-9,2,-6,4,-6,-9,5,-5,-8,8,3,-8,-6,-3,1,-8,-10,10,7,3,2,-10,-7,-6,3,10,-10,8,-3,-2,-10,5,-5,7,10,5,-3,-8,1,7,8,9,6,-3,10,-1,10,-2,10,6,1,-3,6,7,5,-3,-3,-10,2,8,-1,-4,-7,-7,-8,-9,2,-3,3,-8,-4,-1,1,-6,5,7,-6,-8,-7,-2,-7,4,-2,8,9,-4,-6,1,-4,-2,-2,-8,8,-3,-2,2,5,9,-4,-3,-2,5,-9,7,5,6,-6,8,-10,-1,-4,-2,-8,6,-7,-5,3,-8,6,8,5,-9,-8,-7,5,-1,-2,10,3,3,5,10,8,2,1,5,6,9,2,2,-5,-8,5,8,-4,-7,-9,-6,-3,10,10,2,-3,10,8,-3,-5,9,-1,-8,-9,3,-2,-4,-9,2,4,-3,-6,10,-5,6,-8,-9,-3,-3,4,10,-6,4,1,-3,2,9,1,2,6,5,3,2,-5,-10,-10,-6,7,2,-5,-2,-2,-5,-4,-10,-6,-4,-1,7,-9,6,9,10,3,3,-8,5,8,5,-10,2,-2,-5,3,10,10,5,-9,3,-6,9,3,-6,-7,-5,-5,-3,5,1,-9,-10,-8,-8,10,6,10,-10,1,-6,-6,-5,9,-10,-5,2,2,3,-9,-5,-4,4,10,7,-9,-2,-5,6,5,8,-6,4,-2,-8,-7,9,5,5,7,-9,-8,-1,-5,7,-4,-10,5,8,10,-10,8,10,3,1,9,6,10,-10,-8,-7,-6,-5,-10,10,-9,-10,-10,-2,-8,-2,-2,6,-8,9,7,-2,-2,4,8,-5,-6,5,7,-6,-10,-4,7,-6,-8,4,-8,8,1,-3,10,7,-5,10,10,7,-4,-4,-2,-7,3,8,8,-3,-2,10,-6,-5,-1,-3,1,-1,-10,8,-5,-4,8,4,-10,5,-5,3,5,-4,-3,7,4,10,5,10,3,-10,6,7,1,9,10,-9,9,1,-8,-5,8,-10,1,5,-4,5,7,7,5,-5,-7,9,-10,6,-9,-2,-6,2,-2,3,1,5,3,7,-9,2,1,-2,2,-8,-10,-1,-5,-6,-1,-5,1,2,6,-2,6,-9,-5,-5,-8,9,-5,6,3,-1,3,7,-9,-7,-10,8,-1,10,-7,-3,2,-6,-2,9,4,-10,-7,2,7,9,-6,-3,5,5,10,8,1,9,6,-9,-9,9,9,1,1,-3,-8,-6,-10,4,10,-10,-6,6,-6,-4,5,2,-7,10,-3,-6,9,-2,6,7,-8,7,-7,-7,8,-9,-9,1,-3,3,-3,-7,-5,-1,6,5,8,-1,-6,7,2,-1,8,6,-2,-7,9,9,-6,-5,2,-8,3,-3,-8,5,8,-10,9,-8,-6,-5,-1,-1,9,-9,5,9,-5,-8,-7,-2,10,-1,-1,-9,-4,-3,1,1,-9,10,6,-1,6,-3,-2,-7,-10,-3,-7,-7,7,7,-4,-9,-7,-7,2,5,7,8,4,4,-4,-4], dtype = "uint32")#candidate|5697|(1694,)|const|uint32
call_5696 = relay.TupleGetItem(func_896_call(relay.reshape(const_5697.astype('uint32'), [11, 14, 11]), relay.reshape(const_5697.astype('uint32'), [11, 14, 11]), ), 0)
call_5698 = relay.TupleGetItem(func_899_call(relay.reshape(const_5697.astype('uint32'), [11, 14, 11]), relay.reshape(const_5697.astype('uint32'), [11, 14, 11]), ), 0)
output = relay.Tuple([bop_5682,call_5690,const_5691,call_5696,const_5697,])
output2 = relay.Tuple([bop_5685,call_5692,const_5691,call_5698,const_5697,])
func_5703 = relay.Function([], output)
mod['func_5703'] = func_5703
mod = relay.transform.InferType()(mod)
mutated_mod['func_5703'] = func_5703
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5703_call = mutated_mod.get_global_var('func_5703')
call_5704 = func_5703_call()
output = call_5704
func_5705 = relay.Function([], output)
mutated_mod['func_5705'] = func_5705
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5706 = relay.var("var_5706", dtype = "uint64", shape = (6, 15, 6))#candidate|5706|(6, 15, 6)|var|uint64
var_5707 = relay.var("var_5707", dtype = "uint64", shape = (6, 15, 6))#candidate|5707|(6, 15, 6)|var|uint64
bop_5708 = relay.multiply(var_5706.astype('uint64'), relay.reshape(var_5707.astype('uint64'), relay.shape_of(var_5706))) # shape=(6, 15, 6)
func_5313_call = mod.get_global_var('func_5313')
func_5315_call = mutated_mod.get_global_var('func_5315')
var_5718 = relay.var("var_5718", dtype = "float32", shape = (242,))#candidate|5718|(242,)|var|float32
call_5717 = func_5313_call(relay.reshape(var_5718.astype('float32'), [2, 11, 11]))
call_5719 = func_5313_call(relay.reshape(var_5718.astype('float32'), [2, 11, 11]))
output = relay.Tuple([bop_5708,call_5717,var_5718,])
output2 = relay.Tuple([bop_5708,call_5719,var_5718,])
func_5740 = relay.Function([var_5706,var_5707,var_5718,], output)
mod['func_5740'] = func_5740
mod = relay.transform.InferType()(mod)
mutated_mod['func_5740'] = func_5740
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5740_call = mutated_mod.get_global_var('func_5740')
var_5742 = relay.var("var_5742", dtype = "uint64", shape = (6, 15, 6))#candidate|5742|(6, 15, 6)|var|uint64
var_5743 = relay.var("var_5743", dtype = "uint64", shape = (6, 15, 6))#candidate|5743|(6, 15, 6)|var|uint64
var_5744 = relay.var("var_5744", dtype = "float32", shape = (242,))#candidate|5744|(242,)|var|float32
call_5741 = func_5740_call(var_5742,var_5743,var_5744,)
output = call_5741
func_5745 = relay.Function([var_5742,var_5743,var_5744,], output)
mutated_mod['func_5745'] = func_5745
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5787 = relay.var("var_5787", dtype = "float64", shape = (13, 1))#candidate|5787|(13, 1)|var|float64
uop_5788 = relay.acos(var_5787.astype('float64')) # shape=(13, 1)
output = uop_5788
output2 = uop_5788
func_5804 = relay.Function([var_5787,], output)
mod['func_5804'] = func_5804
mod = relay.transform.InferType()(mod)
var_5805 = relay.var("var_5805", dtype = "float64", shape = (13, 1))#candidate|5805|(13, 1)|var|float64
output = func_5804(var_5805)
func_5806 = relay.Function([var_5805], output)
mutated_mod['func_5806'] = func_5806
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5295_call = mod.get_global_var('func_5295')
func_5296_call = mutated_mod.get_global_var('func_5296')
call_5833 = func_5295_call()
call_5834 = func_5295_call()
output = relay.Tuple([call_5833,])
output2 = relay.Tuple([call_5834,])
func_5844 = relay.Function([], output)
mod['func_5844'] = func_5844
mod = relay.transform.InferType()(mod)
mutated_mod['func_5844'] = func_5844
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5844_call = mutated_mod.get_global_var('func_5844')
call_5845 = func_5844_call()
output = call_5845
func_5846 = relay.Function([], output)
mutated_mod['func_5846'] = func_5846
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4894_call = mod.get_global_var('func_4894')
func_4895_call = mutated_mod.get_global_var('func_4895')
call_5856 = func_4894_call()
call_5857 = func_4894_call()
output = relay.Tuple([call_5856,])
output2 = relay.Tuple([call_5857,])
func_5860 = relay.Function([], output)
mod['func_5860'] = func_5860
mod = relay.transform.InferType()(mod)
output = func_5860()
func_5861 = relay.Function([], output)
mutated_mod['func_5861'] = func_5861
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4943_call = mod.get_global_var('func_4943')
func_4945_call = mutated_mod.get_global_var('func_4945')
call_5866 = relay.TupleGetItem(func_4943_call(), 0)
call_5867 = relay.TupleGetItem(func_4945_call(), 0)
output = call_5866
output2 = call_5867
func_5888 = relay.Function([], output)
mod['func_5888'] = func_5888
mod = relay.transform.InferType()(mod)
output = func_5888()
func_5889 = relay.Function([], output)
mutated_mod['func_5889'] = func_5889
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5657_call = mod.get_global_var('func_5657')
func_5658_call = mutated_mod.get_global_var('func_5658')
call_5924 = func_5657_call()
call_5925 = func_5657_call()
var_5927 = relay.var("var_5927", dtype = "bool", shape = (15, 16, 8))#candidate|5927|(15, 16, 8)|var|bool
bop_5928 = relay.logical_or(call_5924.astype('bool'), var_5927.astype('bool')) # shape=(15, 16, 8)
bop_5931 = relay.logical_or(call_5925.astype('bool'), var_5927.astype('bool')) # shape=(15, 16, 8)
output = bop_5928
output2 = bop_5931
func_5936 = relay.Function([var_5927,], output)
mod['func_5936'] = func_5936
mod = relay.transform.InferType()(mod)
var_5937 = relay.var("var_5937", dtype = "bool", shape = (15, 16, 8))#candidate|5937|(15, 16, 8)|var|bool
output = func_5936(var_5937)
func_5938 = relay.Function([var_5937], output)
mutated_mod['func_5938'] = func_5938
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5657_call = mod.get_global_var('func_5657')
func_5658_call = mutated_mod.get_global_var('func_5658')
call_5981 = func_5657_call()
call_5982 = func_5657_call()
output = relay.Tuple([call_5981,])
output2 = relay.Tuple([call_5982,])
func_5994 = relay.Function([], output)
mod['func_5994'] = func_5994
mod = relay.transform.InferType()(mod)
mutated_mod['func_5994'] = func_5994
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5994_call = mutated_mod.get_global_var('func_5994')
call_5995 = func_5994_call()
output = call_5995
func_5996 = relay.Function([], output)
mutated_mod['func_5996'] = func_5996
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5657_call = mod.get_global_var('func_5657')
func_5658_call = mutated_mod.get_global_var('func_5658')
call_6004 = func_5657_call()
call_6005 = func_5657_call()
func_1729_call = mod.get_global_var('func_1729')
func_1732_call = mutated_mod.get_global_var('func_1732')
const_6012 = relay.const(2.259248, dtype = "float64")#candidate|6012|()|const|float64
const_6013 = relay.const([-7.537575,-5.900923,-1.505485,8.334052,-3.351145,-3.116294,8.111716,4.114711,-4.121180,-4.919204,-5.012359,8.346151,-5.995420,5.246603,-4.318669,-0.358660,-2.126260,-2.901707,-5.316518,-0.425457,0.741332,3.312692,-3.633322,4.048853,-9.852283,-2.484930,-3.616734,-3.963408,-9.791134,-3.981461,3.234837,2.734732,1.507738,-3.423743,0.498140,-6.864880,2.569981,8.797535,-3.861441,-3.417605,-6.652164,8.816731,-6.947210,-6.796440,-1.987718,-0.726731,5.315314,6.528069,1.050076,-4.901972,5.765193,4.709094,-4.620974,-7.626452,0.219965,0.011393,6.611271,-7.162650,8.302265,2.941348,5.368368,4.156610,1.579483,7.992522,9.382895,-9.852682,-4.665054,2.555256,-0.837246,-5.814163,1.658751,-0.803046,-6.205297,-1.372221,4.756898,0.900586,1.233727,8.054313,-6.481311,7.376462,9.058399,-4.093992,6.572901,-6.418330,3.325280,-1.971315,8.053868,3.772299,7.836300,1.067493,7.058125,-1.426299,2.891131,-4.972516,-0.809504,5.567937,7.175590,-1.352760,-9.578447,-3.944476,8.694610,-0.148474,4.887377,-4.485182,7.004472,3.243148,7.377622,-9.569714,-0.936821,-2.850745,-8.194300,-0.511967,1.434374,9.373036,0.438043,6.184249,-8.406383,9.523248,6.367716,-6.133312,2.401023,-9.487235,7.109126,-1.771533,3.473746,9.624484,-7.855652,5.827193,-8.355527,9.956058,-0.161363,-4.175469,-4.682974,7.249522,9.497262,4.388433,5.070210,6.858674,-3.915065,-4.104663,-3.974742,0.650061,7.932274,-1.241578,5.958447,-2.762146,-1.657930,-1.104510,-3.745629,0.060836,-9.013016,1.180601,-5.271845,-7.018338,-8.905129,-2.575126,-5.368114,4.079313,-1.460492,8.412872,-3.960806,3.677631,-9.935677,2.822936,7.394002,7.379418,7.415630,-5.941653,4.046387,-4.063712,8.267210,4.099334,7.779218,-4.020695,-3.742919,4.238214,7.639991,-1.101070,9.659601,-2.676031,-2.028266,-3.250558,-6.741928,7.335583,7.738653,1.523565,-0.107858,4.924477,-8.999560,7.033199,9.995690,5.110002,7.632490,0.418893,9.702312,-2.379637,2.745144,-4.701194,1.682928,4.390858,1.487358,9.152521,9.705482,7.234715,-1.021205,8.804864,-8.865885,-8.722628,-9.813881,-8.292981,-6.479639,5.752106,6.633697,1.646114,9.312840,4.202455,-4.715590,-9.437332,3.713824,9.739916,-9.087115,-3.299568,9.689724,-9.498397,-7.598011,0.719553,8.726329,-9.419910,-1.175528,4.648515,-5.643236,9.368991,-3.526805,8.419381,5.773101,5.672431,5.641670,-6.236912,5.313873,-2.161671,1.747737,-6.897764,-1.145092,6.240371,-9.297297,-9.800343,-7.758033,8.287234,7.141110,-6.024468,1.483499,-7.144827,6.116156,9.208408,3.234908,-6.023774,-1.071533,-0.498079,4.935301,9.160878,-0.615508,2.932633,8.625537,8.755768,5.628710,-5.549426,-6.451646,4.652750,7.100015,-7.627106,-9.139817,-2.505080,9.182663,7.680876,-9.194022,-1.856638,-4.527763,4.311228,1.387083,-3.088629,2.944971,5.123344,5.715725,2.404152,-3.927034,4.887712,0.464357,2.817473,-9.656328,4.086163,3.424188,-1.181966,5.653594,-0.204294,-2.751197,2.305496,5.156702,8.943180,2.829113,1.487652,-6.035577,-4.120444,-7.044698,-1.553017,-1.547252,-6.708290,-0.998399,2.186049,-5.417918,-0.048713,-8.244724,-5.292360,-1.551999,-8.027510,4.798637,4.818334,5.402716,4.086825,7.594247,-2.064085,0.051049,-1.248851,8.889768,-9.834984,0.015128,1.865357,-0.114968,9.218258,1.951048,1.788062,0.014187,1.955394,-1.910131,5.336806,-5.008543,-1.451965,-2.494857,1.060170,-8.603631,3.454861,-6.702263,-3.146928,5.945803,-3.710272,2.512248,9.815175,-1.135347,3.313805,5.030301,7.724242,8.200444,5.523737,-8.162570,7.816967,-7.127870,-5.607217,9.716383,-4.509660,-9.372182,-3.130243,-0.934607,-4.127959,-3.819798,6.460325,-5.421265,2.351017,-1.419784,9.368312,-1.601987,-4.430327,-9.704811,0.281167,7.265554,-6.683798,-7.730550,4.336407,-1.452294,-3.707433,-9.183878,-3.861938,-2.274773,-2.005657,-6.867771,7.742944,-9.740208,-6.843288,-0.497710,0.974207,7.680210,1.882115,-1.562467,-6.922931,-7.434564,1.209984,-5.459238,-5.661955,4.208815,-6.878804,-9.066315,-0.119214,7.032296,2.013721,6.670049,7.402291,-1.738655,-6.313431,1.300495,0.911956,2.195526,-6.152204,-7.281691,-2.805141,1.064582,-0.058238,-9.927182,1.788899,1.447580,5.438566,8.622672,4.527639,3.294627,-0.362238,-5.476692,1.563086,-0.365492,0.911203,-4.189259,-7.419721,-3.115568,3.006185,-1.555996,-4.780816,-1.948427,-7.560548,-1.373865,8.877657,3.515232,0.332316,-5.870873,-6.416998,-2.633040,3.703994,6.096885,6.381893,-7.178777,3.834247,0.697780,-7.105340,4.039409,4.707826,-6.851933,-9.499439,-2.595481,2.089870,-5.664215,3.028883,-2.034473,7.181286,-1.565849,1.585354,8.867855,1.890626,9.758759,-6.885380,-1.123597,-6.581981,5.755181,3.884525,-1.943472,-9.423578,-8.125110,-8.634219,-9.985832,-4.872784,-8.222520,-6.903511,-6.040844,-4.720827,7.702263,7.626509,-6.527349,1.311282,-8.116295,7.753585,3.019069,6.834997,4.177627,-5.810014,4.657560,-3.308810,2.162918,2.062670,7.303433,6.370030,9.196148,-8.336116,-2.336862,2.550153,-3.447906,-9.886359,-5.800163,4.391441,2.883273,1.892702,5.003521,-4.638890,-5.332805,-7.014821,5.978375,7.630432,-4.375854,-8.652889,5.276572,3.908744,-0.813665,9.125692,8.259076,-6.260905,1.401403,0.578999,6.391088,2.020196,-3.151901,7.597706,7.265699,-4.737124,6.289948,-4.663906,-3.444357,-8.217090,6.429488,8.199077,6.000580,6.700485,1.698631,0.428035,-2.464063,5.095131,-2.986681,-9.873488,6.921139,-3.433557,8.744345,4.949980,-9.334197,-1.245827,5.918780,1.194532,4.140705,2.266541,5.650911,-5.389966,7.592086,-4.411862,-5.655569,0.127036,4.841560,-9.784491,7.733739,-5.627424,-3.351946,7.306221,-9.088277,-2.195606,-1.870424,0.219608,-0.827259,9.878933,2.606959,2.128163,5.366980,5.887345,-3.271539,2.886367,3.486441,-1.284146,1.895916,4.755152,-4.260395,1.671852,-6.138209,-1.315966,-0.043000,-0.027713,-4.253050,-4.640371,8.179051,-7.667555,5.570154,0.359890,-1.268451,-6.661906,3.776299,0.698212,1.513727,-6.995243,4.713111,-6.386338,3.735774,4.391597,7.667653,1.657461,7.777981,-0.886522,0.210131,9.802145,3.177931,6.030149,-3.386794,-0.712044,-2.079588,9.627055,-8.101866,7.456129,-7.995585,2.834646,-8.259842,-9.099811,-6.357595,6.987875,-8.693344,6.172247,-8.634032,8.531894,-0.028167,2.041706,-6.321026,-6.536701,-7.061200,-9.582295,9.522647,-3.891946,-0.857793,4.948474,-2.646856,5.585370,-6.751226,-4.257156,4.312006,0.712760,-3.168577,-3.363193,8.447777,3.863316,4.383012,-8.357620,4.400681,-6.083121,-0.025403,-8.653513,-2.385778,7.060774,7.394155,-7.191078,1.491917,-6.460577,-8.965188,6.900782,1.789421,7.402843,-2.969169,0.377963,1.411632,-6.721724,-0.236387,-8.465315,-7.897337,2.690202,8.747986,-8.411494,3.456754,-3.471005,-6.977431,3.714494,-8.457857,-3.427107,-3.113283,-3.759938,9.059880,1.857199,-2.148564,2.520919,-6.693112,-1.517906,-6.853112,-7.818717,6.102169,3.361444,-6.234164,2.024666,7.504648,-8.590059,-7.192785,1.344752,1.886975,1.666462,-0.826790,-3.534466,9.752256,3.501597,5.818038,0.492426,-5.392535,-6.007975,8.028088,-5.880167,9.825659,-5.076061,3.522696,-4.756146,7.755602,-0.267023,-1.231975,-5.132165,6.616224,5.692360,4.732973,2.347292,7.397515,9.898952,-4.506761,7.637299,-3.727556,2.246152,-2.538789,-5.441099,1.219898,8.202303,1.410592,9.066256,0.549725,6.731796,2.262461,2.769080,6.975691,7.697484,-7.347858,9.803258,-4.566491,-9.493036,-4.788550,-9.289780,-6.535647,5.065731,1.329135,-4.025900,4.470684,-4.836267,0.433116,0.023359,-2.016185,-7.197355,-1.638847,7.492605,-8.637086,2.292967,-4.351728,-8.618961,2.402438,-0.609413,-2.770896,-4.820623,-4.947169,-1.109176,-3.753091,-5.884759,-8.654094,0.250210,9.137090,3.476785,-0.461739,-4.290708,9.749112,4.891050,8.799514,9.512601,1.869698,9.675136,-7.548787,3.668867,-8.450975,6.290100,-7.776381,6.069411,6.468749,2.142519,5.861639,-9.802101,-3.950107,2.923020,6.125392,2.199565,-7.397423,0.455155,-5.561449,3.706098,-5.668461,2.369785,7.065091,-1.796211,0.324358,2.037918,-7.020729,1.491608,8.913170,-0.702048,-2.134528,9.853566,-3.214394,3.175720,1.624842,7.368201,-7.125019,-2.369798,2.189339,-3.323692,-4.338670,1.076452,-6.517108,0.341127,-5.698605,-9.364889,4.997199,0.208279,-5.133071,-7.808608,-9.909748,-5.433531,-7.838816,-5.436836,2.022501,2.438673,-3.555687,-0.543585,4.702107,8.772351,8.135309,-7.942315,0.528808,2.006044,9.227981,-9.938332,8.605466,-8.584021,0.777951,-5.951591,0.686418,9.704503,-0.187122,-9.517462,6.682601,5.825778,-4.083360,-9.601214,-3.787125,1.034888,4.931619,6.631247,-6.491655,3.787872,-0.724746,4.183919,0.550060,-6.433810,-7.254545,1.478884,-3.993421,0.355877,8.974362,-6.793121,6.480563,6.032063,2.673150,6.190949,-0.779354,-2.633170,-9.870552,-3.062888,-8.688447,-8.313406,-8.957422,-2.135699,-4.464061,4.951964,8.080758,3.890119,9.053727,-2.835044,4.975440,6.981732,-5.856348,3.293098,8.202403,-3.491703,-4.954892,-9.695674,-3.179032,4.910802,-1.924933,-4.449143,-5.060245,-7.082518,-3.504704,6.225320,2.094155,7.275006,-0.569603,-3.733328,7.459967,6.664680,7.691046,-8.295131,-1.447117,2.842153,-7.708425,8.321844,3.010192,-2.662466,-5.017194,-3.606155,-1.830968,9.599154,-9.875091,-9.374176,-2.933792,9.089404,-3.350524,9.539370,0.040681,2.859761,4.931978,-5.052512,5.524669,-1.651102,-6.946673,3.000500,6.605757,3.281379,-7.516673,6.438286,4.774579,5.880232,-4.943625,7.939562,9.904216,3.300753,4.626867,2.292878,-8.979215,-6.327743,-7.158173,-6.100837,-3.528612,6.049398,5.974882,8.043355,1.265583,-4.470075,2.864589,6.622293,8.557392,1.485199,1.228038,5.226724,3.239015,-8.031683,8.824722,0.413562,6.889986,-7.137845,2.957005,4.884074,-0.413013,-0.187357,7.070656,-7.627004,-6.927201,1.031636,2.290995,8.093098,-0.777923,-6.311470,-9.221621,9.954018,8.201893,4.458954,2.694050,7.637585,-1.008504,-2.225450,-8.927688,-1.294369,-6.830418,-6.317103,-1.045390,-3.078118,6.119744,-8.295470,-4.290137,6.850610,-8.703900,-5.701570,-1.942491,7.631512,2.433341,-7.836327,5.141000,-8.982339,1.102001,6.096774,7.969968,-2.896816,-6.643404,-9.558660,8.446248,-8.707466,-9.894320,6.086758,6.548609,-5.394656,-5.476295,-6.711496,3.186234,-2.629802,1.689474,9.278502,1.767476,0.022454,-7.101900,6.098210,-3.131908,2.103207,-1.422131,3.776890,-4.005275,6.178698,-1.831239,-0.890505,-2.734358,-9.468566,-9.859549,-0.019199,-2.368446,9.558161,-3.756311,-3.962228,2.213796,4.910912,-3.963542,8.135522,-0.622618,-1.978912,-1.606335,9.581993,2.500861,-4.927941,1.741729,6.226743,-2.648661,-9.227306,8.443602,8.414135,5.507618,1.925530,0.154012,-2.479156,3.934390,5.443343,8.616473,-4.200727,-0.418194,-4.507767,-2.995400,7.700934,-6.133415,7.771207,-6.696992,-7.072523,1.574000,-9.245550,-0.717432,6.354636,5.590631,9.371809,3.060588,8.892366,-8.404629,9.946506,2.567903,-4.992665,-8.518288,-1.500890,-2.645912,-5.848808,-1.162891,6.779780,9.139173,-0.985904,8.378630,1.249077,7.734035,-5.283057,-7.645745,-2.541491,1.517026,-8.928922,-0.652613,-5.745414,3.967984,9.262031,6.826854,0.507570,4.692660,3.543734,4.115301,7.715407,7.705965,4.478100,3.201011,-5.851820,-9.778684,-4.922918,5.042556,8.660427,-7.123935,-2.157979,0.723596,-5.558841,1.426776,8.147295,2.729400,4.877369,1.439792,-4.980320,6.379788,9.054071,9.745347,-7.731061,-6.349132,-3.770354,-2.301046,6.354336,-7.930326,-3.738155,4.133971,-7.178644,-9.914618,-7.144931,-5.997190,-3.926412,4.353141,4.259459,-7.441552,2.347091,-8.496128,3.255739,-2.113655,-7.971083,-1.390997,-0.627060,3.202176,-7.130521,-7.221063,8.654478,-7.638323,-3.137388,0.734218,-5.626873,-6.694751,-5.091387,3.066021,6.218757,-3.809025,-2.382284,6.494821,0.015704,-8.972556,-1.607261,-5.834753,3.703769,-4.698428,-8.867640,-1.114606,8.251929,-2.472678,7.057006,4.644601,7.244287,-7.508048,-7.440494,-9.694959,-5.450552,-7.242005,9.928412,-9.057791,5.067673,0.770649,-2.409807,-4.152497,-2.617141,-7.379145,0.731616,-4.492206,9.065817,-9.671439,-6.865258,3.453276,0.522733,-4.442888,-3.984971,-4.108887,4.530940,8.719566,8.610787,4.635066,-6.954907,0.289968,8.796781,-6.331290,-6.619385,-6.924799,8.458906,-1.698001,8.895059,-3.140676,1.535515,0.134586,-2.193433,0.861433,1.667021,3.325932,-9.291343,4.531662,-9.930585,-9.115402,-1.740152,-4.739338,5.867228,4.335680,6.695354,-1.569848,-5.609610,7.697918,1.387262,-1.051139,3.889809,-6.478582,-7.820242,7.564467,-7.937284,7.088391,-0.514769,-8.594901,-1.439205,0.438251,5.778505,7.442854,3.954804,-3.223667,5.995361,1.576616,-4.431068,-3.233623,8.450424,-1.893678,7.208505,3.023972,8.495153,1.110613,1.256690,9.712654,0.283349,-5.469593,9.891764,7.551135,2.372361,1.084547,-2.568688,-3.202073,5.077140,1.484354,-4.885097,-9.395229,3.338514,-3.695586,-6.662631,0.700150,-5.104449,5.654850,1.134628,-6.234680,9.984485,-2.593557,2.057130,-4.589307,7.869619,9.454232,-4.751179,5.973147,-6.585797,-7.691120,6.523395,-0.218202,7.129401,9.747455,-0.796389,7.518583,3.049789,3.939406,-0.716400,1.295316,-8.473727,9.260827,9.853498,-7.657210,-0.213363,-4.930864,-8.918107,3.818073,-9.492357,-2.845217,-5.948369,7.588231,-8.995713,-0.126459,-4.963319,-0.045397,8.749197,9.936883,7.926202,-7.340416,-3.089561,9.335141,8.937919,-4.311286,-8.335330,-7.850407,-6.090450,-6.489577,-0.508038,6.818906,2.089378,4.415036,7.245386,4.052082,-2.983482,7.174053,-3.896015,-2.720760,0.856553,-4.920793,2.805954,3.396172,-6.280863,-0.543541,-1.627444,2.850877,-3.792270,-3.189441,4.287463,-4.360956,3.556530,-6.691697,-9.875377,3.602781,7.328143,0.509341,-5.999678,-4.544302,1.276938,-4.680543,-1.092367,9.113809,-6.907154,-5.088427,6.640183,-2.950646,-7.509423,-2.014656,1.960329,0.803394,0.720327,3.017996,1.983627,-0.894796,6.623006,-7.125193,-5.237793,-5.319403,-6.851989,-4.713216,9.203508,-1.594269,6.075149,-8.147627,3.178274,7.422934,6.490583,-1.254413,-4.814844,4.478366,9.690059,2.193576,2.249395,1.821113,6.409722,4.383302,-9.878351,-6.150359,-2.288165,-2.540258,-0.648692,8.636890,-5.396703,-8.616947,-5.602596,-5.782295,-2.497213,-6.669891,2.226203,6.167196,9.204510,8.399287,-3.834584,-0.176742,8.423289,-6.974554,-0.177730,5.756544,-7.313208,-7.581841,3.964762,-6.874961,-1.338149,0.324426,-7.060929,-4.111397,6.564312,7.896241,-6.095100,-6.285332,-6.312333,6.142114,-2.923620,-0.386901,3.404427,-4.700352,0.317886,-1.904527,6.813850,-7.986326,-4.909530,2.606096,-9.478538,7.868965,-3.206927,-0.845718,1.721127,-8.423941,-5.273419,-7.104385,8.005337,-7.800171,5.325968,-2.649363,-9.319441,1.046866,-4.630464,-1.079129,8.363660,1.481614,-4.256217,1.453365,5.351443,7.949799,-8.648887,4.295914,-6.985549,-7.602103,-6.997363,-7.414039,1.372965,2.097202,6.810468,9.946486,-0.872066,-8.836326,-5.572907,-7.905697,7.184554,-4.119838,8.881370,8.342239,5.259400,0.371823,9.823507,7.181774,0.563959,-8.947612,-3.828516,-6.269972,-3.690006,0.640684,-0.117011,-9.801189,-7.232628,1.261566,5.927469,3.351818,-1.767006,-1.589779,9.260697,7.765933,8.589301,4.914745,7.737337,-3.426928,-6.009711,-5.644354,2.943820,4.433849,7.584075,9.034195,9.322882,-0.129690,6.556926,3.102104,-2.524775,-7.193714,-7.678160,0.248369,9.459904,4.067008,-5.007696,-9.178721,6.345876], dtype = "float64")#candidate|6013|(1536,)|const|float64
call_6011 = func_1729_call(relay.reshape(const_6012.astype('float64'), []), relay.reshape(const_6013.astype('float64'), [16, 6, 16]), )
call_6014 = func_1729_call(relay.reshape(const_6012.astype('float64'), []), relay.reshape(const_6013.astype('float64'), [16, 6, 16]), )
output = relay.Tuple([call_6004,call_6011,const_6012,const_6013,])
output2 = relay.Tuple([call_6005,call_6014,const_6012,const_6013,])
func_6020 = relay.Function([], output)
mod['func_6020'] = func_6020
mod = relay.transform.InferType()(mod)
output = func_6020()
func_6021 = relay.Function([], output)
mutated_mod['func_6021'] = func_6021
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5639_call = mod.get_global_var('func_5639')
func_5640_call = mutated_mod.get_global_var('func_5640')
call_6022 = func_5639_call()
call_6023 = func_5639_call()
func_4967_call = mod.get_global_var('func_4967')
func_4970_call = mutated_mod.get_global_var('func_4970')
const_6030 = relay.const([True,False,True,False,True,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,False,False,True,False,True,True,False,True,False,True,False,False,True,False,False,False,True,True,True,True,True,True,False,False,False,True,True,False,True,False,False,True,False,True,False,False,False,False,True,True,True,True,True,False,True,True,False,False,False,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,False,True,False,True,True,True,False,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,True,True,True,False,False,True,False,True,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,True,False,True,False,False,True,True,True,True,False,False,False,False,True,True,False,True,True,False,True,False,True,False,True,False,True,True,False,True,True,True,False,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,False,False,False,True,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,False,False,False,False,True,False,False,True,False,False,True,True,False,True,True,True,True,True,True,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,False,False,False,True,False,True,False,True,True,True,False,False,False,False,False,False,False,False,False,True,True,True,True,True,True,True,True,True,True,True,False,True,True,False,False,False,False,False,True,True,True,True,True,False,True,True,False,True,True,False,True,False,True,False,True,False,True,False,True,False,True,True,False,False,True,False,False,True,True,True,False,False,True,True,False,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,True,False,True,True,True,False,False,True,True,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,True,True,True,False,True,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,False,False,False,False,True,False,False,False,True,True,True,False,True,False,False,True,True,False,False,False,True,True,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,True,False,True,True,False,False,True,True,True,True,True,True,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,True,False,False,False,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,False,True,False,False,False,True,False,False,False,False,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,False,False,False,True,False,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,False,True,False,True,False,True,False,True,True,False,False,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,True,True,False,True,True,False,False,False,True,False,True,True,True,False,True,True,True,True,False,True,True,True,True,False,True,True,False,True,True,False,False,True,True,False,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,False,False,True,False,True,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,False,True,False,False,True,False,False,True,True,False,False,False,False,False,True,False,True,True,True,True,True,False,True,True,False,False,True,True,True,True,False,False,True,False,False,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,False,True,False,True,False,False,True,False,True,True,True,True,True,False,True,True,True,True,False,True,False,False,True,True,False,False,False,False,True,False,False,True,True,False,False,False,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,False,False,True,False,False,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,False,False,True,False,True,True,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,True,True,False,True,True,True,True,True,False,False,True,True,True,True,False,False,False,True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,True,True,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,False,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,True,True,False,True,False,False,True,True,False,False,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,True,False,False,False,True,True,True,False,True,False,False,False,True,False,False,False,False,False,True,True,True,True,False,True,True,False,True,False,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,True,False,True,True,False,True,False,True,False,True,True,True,False,True,True,True,True,False,False,True,True,False,True,True,False,False,True,True,False,False,True,True,True,False,False,True,True,False,True,True,False,False,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,True,False,True,False,True,False,False,False,True,False,False,False,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,False,True,True,True,True,False,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,True,False,False,False,False,False,True,True,True,True,False,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,True,True,True,False,False,False,False,True,True,True,True,True,False,True,True,True,False,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,False,True,True,False,True,True,False,True,False,True,True,True,False,False,True,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,True,False,False,False,False,False,True,True,True,True,False,False,True,False,True,False,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,True,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,True,True,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False], dtype = "bool")#candidate|6030|(1536,)|const|bool
call_6029 = relay.TupleGetItem(func_4967_call(relay.reshape(const_6030.astype('bool'), [12, 16, 8])), 0)
call_6031 = relay.TupleGetItem(func_4970_call(relay.reshape(const_6030.astype('bool'), [12, 16, 8])), 0)
func_2386_call = mod.get_global_var('func_2386')
func_2388_call = mutated_mod.get_global_var('func_2388')
const_6036 = relay.const([-2.632502,-9.314962,9.043858,1.432472,9.916719,9.828603,6.309522,5.941421,-6.773100,7.653660,2.469863,9.875708,0.280816,-9.387057,8.819426,3.275663,-1.942065,-8.724405,-5.444117,4.689283,-8.754183,-6.030838,6.850815,2.765538,-7.715016,-5.856745,-0.071414,6.136944,7.834953,-5.898123,6.922117,-7.461340,2.530599,4.455360,-3.451074,1.526466,-6.908349,-6.441857,-3.251516,3.774254,-4.235329,-2.248696,6.728036,2.490910,4.588821,0.076467,6.378320,-0.392332,-8.637590,-3.488155,4.116555,-1.784216,-8.307652,6.894953,-3.677823,0.917866,-9.213471,-8.242156,4.272314,7.836519,7.462214,5.011370,-8.765737,-2.038770,-0.950787,-5.149360,-8.135477,9.924468,4.546247,3.948788,6.797677,3.526417,-0.426008,1.358606,9.057599,9.923062,1.202743,7.140161,-5.091136,-6.258542,8.839422,-1.317870,6.210532,-7.827706,-7.413698,1.347029,-1.564061,-1.673137,-1.290125,8.494277,-4.439553,-2.619153,6.638321,6.290275,2.620330,-4.205908,-3.932853,9.734279,-7.770611,8.970828,8.538963,-8.605999,9.754030,6.183665,-2.407110,9.974293,6.454636,-1.141175,3.230191,-0.500938,-0.731974,5.763245,-5.071464,-5.830139,-9.637979,8.990813,-2.311649,-7.085495,-7.886701,4.320385,-4.420666,0.752599,5.107411,-0.524050,-8.342294,2.492856,-4.113393,9.083987,0.471335,0.624980,0.529540,-7.596238,1.882588,2.740568,-9.491896,-6.490847,4.095449,-3.948084,-3.970897,-2.460079,4.300647,4.607404,-9.903360,-8.350446,-0.068094,-2.184953,9.632366,-2.372323,8.138037,-4.242215,-2.190510,-5.242212,5.122249,-6.610800,7.243070,-6.726225,8.723120,-3.073591,-6.411240,3.191955,9.561033,3.292502,-8.089842,5.498110,9.075556,3.863323,-4.535997,-8.962111,-1.483581,6.546677,0.952442,1.026219,9.528080,-5.284146,-8.145329,2.565951,9.831170,-6.238047,-8.733024,9.761965,-8.021688,3.571024,-0.358146,-0.051857,6.897488,1.743031,4.668922,9.347673,-6.985629,-6.290351,5.477031,-4.802084,-5.092754,6.138928,-6.128329,7.632914,1.162515,-8.346716,-0.489474,4.648971,-6.340614,-8.422704,7.499145,6.516348,1.627129,-6.808425,8.452914,-6.890188,-6.900820,-6.326423,-2.955470,9.049287,-0.132807,-7.777994,-3.966797,-7.384322,-1.073453,-8.460131,-3.922479,3.892603,8.862106,0.420230,0.168241,7.442175,4.294620,-2.806255,9.568953,3.353162,3.407458,-5.142662,9.416149,5.570271,1.332879,1.228231,5.205335,0.012106,6.618655,0.692299,-7.187055,-6.609589,-3.749292,-4.227985,-9.067085,0.785997,7.406431,1.881874,5.114999,-8.273345,-1.720758,-2.527744,-7.560800,-3.871044,-4.893209,-6.520055,-3.408160,-1.458951,-0.408242,-8.154600,0.268645,-7.610929,5.289017,6.622540,-2.385621,5.366961,-3.879871,-6.412641,-3.573410,-0.568916,-8.919908,1.812148,4.888350,3.155999,-2.170991,-0.975617,-9.736883,-2.957935,-0.441814,-6.279726,9.981318,3.813292,9.097695,5.896302,-6.699198,0.529895,-5.213623,-8.130396,-5.233634,4.875445,1.128729,-1.702555,4.457480,-7.146380,7.423541,-9.347003,-9.031138,-8.077929,-5.662017,0.655023,2.479022,9.144946,-6.247294,4.566477,-9.788694,9.753641,-5.642835,4.138506,4.316084,6.507576,-2.420387,3.613819,3.041025,-9.016525,1.617952,-4.824925,-2.014168,6.831940,9.795828,-0.948437,7.999555,-7.743999,1.646171,3.382620,2.909364,9.897880,3.638706,-8.605949,-8.635198,-5.248751,3.927925,-9.661181,-1.211893,-4.248140,-2.610467,3.610821,-0.596159,9.636151], dtype = "float64")#candidate|6036|(336,)|const|float64
call_6035 = relay.TupleGetItem(func_2386_call(relay.reshape(const_6036.astype('float64'), [12, 2, 14])), 7)
call_6037 = relay.TupleGetItem(func_2388_call(relay.reshape(const_6036.astype('float64'), [12, 2, 14])), 7)
const_6039 = relay.const([[[1,-10,4,-10,-1,6,-5,2],[-5,-7,-6,10,-1,-1,4,7],[-6,10,6,7,-9,1,-5,7],[-7,6,5,3,6,-5,6,8],[10,-1,7,2,-2,-2,-5,-8],[-3,10,-10,-6,-8,7,-2,7],[-2,-8,8,-7,-2,7,9,-4],[8,10,8,4,-6,10,-5,-2],[5,8,-10,4,-7,1,-6,6],[-8,4,4,-2,9,2,6,3],[-4,7,-9,5,-3,9,1,5],[-6,7,-7,2,-8,-1,8,8],[-6,-5,-7,2,7,9,-9,-9],[-1,6,-7,5,-3,-2,10,-3],[8,-5,8,-4,9,3,8,-4],[2,9,10,-5,-8,-6,-10,7]],[[6,-2,9,9,9,-7,-8,6],[-3,-9,8,-6,2,7,10,7],[-7,-2,5,4,5,-1,-2,-5],[3,-8,8,7,3,-2,-7,-8],[-8,-9,-2,-6,-4,-2,-5,3],[-10,9,4,-10,8,-1,10,7],[10,10,-1,-2,5,-3,-2,-10],[-7,2,3,-8,5,5,-9,-3],[10,-4,4,-6,-10,9,7,-6],[-8,-6,2,1,-3,3,1,-4],[3,-2,2,4,-8,3,4,-8],[8,3,-7,-9,3,6,-10,-4],[6,8,3,1,-8,-5,-6,5],[6,-5,-2,-7,6,8,-2,9],[-8,8,-2,3,3,-2,-10,4],[5,-2,4,4,1,-8,-6,-10]],[[5,-6,-7,8,-6,1,-9,3],[-4,3,-2,-10,10,-7,4,-3],[-5,7,-9,-4,-7,-10,-9,10],[-7,1,-9,4,8,8,-9,4],[-1,8,8,-4,8,-9,8,-10],[4,4,-4,-5,-10,-6,-5,2],[1,-7,-5,-4,-4,10,4,-6],[-1,2,-1,-8,1,9,-4,3],[5,6,10,3,-5,-5,-2,9],[-3,1,-9,4,-2,-5,8,-4],[7,-10,-2,-10,-5,7,-10,-1],[7,-7,-2,8,8,2,3,-6],[8,7,1,6,-4,5,9,-7],[9,-5,-6,5,-6,9,-3,-10],[-5,10,4,-3,-8,4,-4,6],[-6,-4,-3,8,6,-9,-4,-1]],[[-3,6,8,10,10,5,-7,-9],[3,-7,2,8,-5,-6,-5,10],[7,-7,-7,-1,3,3,9,2],[3,8,7,1,2,-2,4,7],[8,-6,-3,4,-5,5,-6,5],[6,-7,1,4,-7,2,-8,3],[-3,3,-8,-1,3,-6,-2,-2],[-8,1,9,5,-4,7,6,-8],[-3,-4,-1,3,-2,4,-3,2],[5,9,1,-10,-10,6,1,4],[6,-4,-6,10,-7,10,3,9],[5,4,3,10,-4,-1,10,-8],[7,5,8,-9,-4,-5,3,6],[6,-6,5,6,2,-2,-5,3],[2,-3,-7,-5,5,9,8,6],[5,-6,-9,8,8,-8,-2,-4]],[[10,3,2,-8,2,5,-3,7],[-4,-6,3,-6,6,5,4,-10],[-7,-2,5,-5,7,8,-10,6],[7,-9,-8,3,-7,-1,8,-5],[-8,-3,7,1,-8,4,5,-4],[-5,-1,5,8,2,5,3,-4],[-7,6,-7,-9,-6,-2,2,3],[8,10,-8,7,10,-10,4,-3],[-1,6,-6,2,6,2,2,7],[9,-3,-8,9,-4,10,-2,-8],[4,2,7,-1,-8,2,10,9],[-9,-10,-3,-4,7,5,-8,4],[-7,3,10,8,1,-7,-1,2],[-9,8,9,-8,-7,8,6,-9],[-10,-8,8,-8,5,-10,2,-6],[-2,2,6,2,5,-9,3,5]],[[-2,-4,8,-9,-7,-9,1,-9],[-10,6,1,1,9,-8,-10,8],[5,-4,5,-5,-2,-1,-10,8],[1,7,-4,-9,-10,7,-1,4],[8,10,3,8,-10,10,9,-1],[2,2,8,-8,8,10,10,-5],[6,-4,1,-6,-10,2,-4,2],[2,-1,5,9,-3,-5,7,-3],[-7,1,8,-10,4,10,2,-2],[-5,-5,2,-6,-6,-10,-2,5],[-10,7,2,8,9,3,-9,-6],[-10,9,-8,9,-5,-7,1,-6],[6,9,-3,5,-7,3,-5,-2],[-3,-9,5,5,4,-9,-1,6],[-10,-7,-3,5,3,8,9,5],[1,3,1,-8,-9,1,-3,7]],[[-5,-8,-1,10,3,3,8,-3],[3,4,3,2,2,2,-2,1],[-7,8,2,-1,-6,6,-4,10],[7,5,10,4,1,-7,6,4],[9,-1,-10,5,-7,-9,-1,10],[4,2,1,8,-1,-8,-5,2],[4,6,-4,-1,3,1,8,-4],[7,8,1,3,-3,10,-1,1],[-6,1,-7,2,-10,-5,-6,-1],[-6,-2,-7,8,-6,-5,3,-4],[4,-10,8,4,-6,-8,-10,7],[10,-1,-6,4,-9,1,-8,10],[2,6,3,2,8,4,-1,-2],[-2,-9,-1,-10,-3,-2,-6,4],[4,10,9,-7,-1,3,-1,4],[-7,10,5,10,-1,-10,7,-8]],[[5,8,-1,-9,5,-6,-6,-10],[3,-2,-1,8,-7,2,-4,4],[-10,1,7,-6,1,-1,-2,9],[10,-6,6,-5,-2,-4,7,4],[-10,9,-7,2,-6,-5,3,-6],[7,-3,5,5,-5,4,9,-9],[4,-8,10,-7,2,-7,-7,-7],[-4,-7,-8,-6,1,3,7,9],[-10,10,-9,-8,-10,6,-5,-2],[-1,8,1,-2,-4,-4,-9,-2],[-2,-8,-1,1,-9,-7,-8,-5],[-7,-10,-7,-3,-9,3,2,4],[-10,-4,-1,10,-2,6,7,-2],[-4,-5,7,5,-6,2,4,3],[-10,-4,-4,1,-3,-9,-8,-7],[3,7,-1,-4,1,-7,3,10]],[[9,-4,-8,10,-4,2,-7,-8],[10,-10,8,-7,1,-5,-4,-10],[10,-5,-1,-10,1,8,-2,8],[-2,2,-4,10,-5,-10,3,-1],[3,9,-8,-8,-2,8,-3,-7],[-7,-6,10,-8,2,-1,7,-5],[-7,-4,-5,5,-1,3,-1,8],[9,-1,-1,-3,7,7,7,4],[-10,10,-3,5,8,-7,-10,9],[2,-10,8,-5,7,-9,-7,8],[-3,3,1,-1,9,10,-4,9],[-8,8,-2,1,8,2,10,3],[8,1,-5,10,10,-3,10,2],[-1,-4,-7,10,2,1,4,7],[-9,1,1,-7,-3,5,2,-1],[-10,-6,9,-10,-10,5,4,-7]],[[-10,-8,2,-2,-6,10,4,1],[-8,1,-4,8,-4,9,-5,-1],[-5,-6,4,5,4,-10,-7,-6],[-7,-2,-10,7,1,1,2,-1],[-3,-5,-6,9,-6,-10,-9,9],[3,-8,-2,-6,1,-1,3,2],[-8,5,7,-5,4,-9,-2,-2],[2,8,7,8,-5,-10,10,4],[-9,3,-6,3,4,4,2,2],[6,-7,6,-10,4,-9,4,-2],[4,-2,-4,10,-7,-3,-10,3],[7,-8,9,3,-2,8,6,2],[7,-8,-9,8,-3,-6,-8,-9],[-1,7,7,-3,-4,6,3,10],[1,1,-8,-5,2,4,-10,-6],[-9,1,4,-8,7,8,1,-9]],[[8,10,1,-7,-7,-6,5,10],[-6,2,6,-10,-4,-4,8,7],[3,2,-5,8,1,10,5,-9],[-2,-3,-3,-1,1,3,-9,5],[-10,-8,5,10,2,-3,-10,8],[-5,10,1,-6,7,4,-10,9],[-6,-6,7,-9,7,-5,-4,9],[-1,-7,2,-7,-3,-6,9,-4],[6,-6,-7,1,-8,-1,7,-2],[-10,-3,4,-3,2,-1,-7,-6],[4,-6,-8,5,1,-8,7,-9],[1,-9,-3,-4,-2,-5,-10,1],[-2,7,4,-6,7,7,6,-10],[9,3,-2,6,2,4,-10,-5],[2,2,3,4,4,5,7,-6],[-7,-8,-8,4,4,3,2,4]],[[-10,-1,6,5,7,9,-7,2],[-6,2,3,-5,1,8,-5,-7],[-1,-10,-6,-9,6,8,-3,-7],[1,4,-3,-8,6,-8,-10,-8],[5,-10,-4,5,6,-5,-6,-9],[-10,-8,3,-9,-1,2,2,-4],[9,-10,-2,-4,2,7,-2,4],[1,-6,9,-5,-2,2,8,-5],[-10,1,1,10,7,-1,4,-2],[9,-9,-5,9,-3,3,6,10],[2,10,9,7,7,-6,3,-8],[-7,-1,1,-10,-10,8,1,-4],[1,6,-3,-5,-1,1,-8,8],[-6,-8,8,5,-10,-6,3,2],[3,6,-1,6,2,5,8,7],[-2,-3,4,-8,1,5,-3,9]]], dtype = "int64")#candidate|6039|(12, 16, 8)|const|int64
bop_6040 = relay.right_shift(call_6029.astype('int32'), relay.reshape(const_6039.astype('int32'), relay.shape_of(call_6029))) # shape=(12, 16, 8)
bop_6043 = relay.right_shift(call_6031.astype('int32'), relay.reshape(const_6039.astype('int32'), relay.shape_of(call_6031))) # shape=(12, 16, 8)
func_6020_call = mod.get_global_var('func_6020')
func_6021_call = mutated_mod.get_global_var('func_6021')
call_6052 = relay.TupleGetItem(func_6020_call(), 0)
call_6053 = relay.TupleGetItem(func_6021_call(), 0)
func_5561_call = mod.get_global_var('func_5561')
func_5564_call = mutated_mod.get_global_var('func_5564')
const_6056 = relay.const([1.152063,-0.167546,-0.194476,3.973492,9.727175,5.134094,-9.348654,-3.967956,5.367836,2.007358,9.331654,0.709932,6.570792,4.553194,-2.500370,3.881165,7.554799,7.011986,-0.243020,5.852647,0.650011,4.846073,-7.541278,8.908555,3.630497,7.902345,-3.971511,-2.194645,-7.756512,5.483257,-4.482597,-1.546767,-7.933381,3.596501,-7.916018,5.624724,-7.514894,9.260103,-6.400244,-2.824018,8.442037,8.341985,6.070479,-2.210092,5.789299,-6.197550,-6.112324,3.808633,-7.101389,4.759534,8.294868,6.717160,3.939080,-3.002851,4.999713,5.518477,-7.680003,5.098154,-8.833031,4.917556,8.468336,6.055102,-7.843765,-9.802837,-2.885015,5.072031,-7.441245,8.746252,4.645329,-9.139688,-7.433316,-6.560947,-9.070894,-0.141507,0.965846,-8.227289,3.469343,-1.581185,-6.360779,3.020550,1.530666,-5.052690,7.941072,1.889203,1.631160,3.489809,-8.356555,-9.855312,1.806188,2.986231,2.118944,0.912837,-5.185689,-8.062685,7.690355,4.225848,9.652063,-0.740546,5.283479,1.161444,3.779378,-6.671469,-6.983653,-2.956513,-3.372505,-7.807039,8.798482,-4.682038,-2.812398,-9.630357,-2.276569,-8.071236,6.989425,-2.649068,-6.253139,4.102418,2.856481,6.550712,1.581947,4.445695,-0.573535,4.246367,-6.737127,6.041423,-2.967957,-6.218445,3.612871,-7.148384,4.062826,6.120379,3.009096,-6.979997,-6.027620,-2.500969,1.831085,0.408609,-5.212295,-4.195503,7.171180,8.930445,2.071971,-6.768733,-5.831307,-6.536040,-9.418589,5.116012,-9.102336,-1.968436,-1.332536,-2.469291,-3.355545,7.027996,-1.815941,2.425999,0.168147,-7.294790,-5.901842,1.925066,7.261996,8.655279,3.769888,6.557993,-1.138340,-8.198824,3.922822,-1.266029,8.303534,-2.862053,8.126537,6.536103,-8.691012,-2.926427,-7.176402,1.328362,8.343656,5.605089,3.920017,-9.752965,-2.220913,-0.745669,-8.100599,-2.843611,-6.973996,3.280706,-0.203363,-5.961327,-8.784666,-4.085175,-9.111117,8.288620,-7.462373,-7.810159,8.687247,9.530680,-0.745717,5.906698,-5.866747,-8.073838,-6.381888,9.490234,-7.490817,0.999683,-3.476570,4.855836,3.776840,-9.778280,-6.882056,-2.607613,2.835394,6.781821,4.509776,-2.242742,-9.112042,8.909911,9.552565,-4.781415,-0.369110,-2.748979,8.841261,-5.552790,-8.175373,-1.532302,9.024347,8.652502,-7.811708,-0.746279,7.116600,7.614380,2.637968,5.373623,8.685058,-1.892509,1.085515,-8.646543,2.833339,-8.854418,1.236702,-6.208361,5.254576,-0.619027,-3.765633,0.509842,7.585495,-2.145928,4.085449,9.343294,0.792532,2.125548,1.844003,4.099258,-9.624226,-9.224889,-3.435711,-8.474089,-4.476556,7.836891,-1.743919,5.123682,2.658772,-8.701316,6.697006,-3.790458,-2.475931,7.685958,3.042372,-8.691717,-0.987336,-1.581582,1.421474,-2.295907,1.346084,-0.034714,3.862755,9.842032,2.860064,4.130282,-5.396697,8.389666,5.063056,-7.582160,0.606017,-0.536054,5.372397,-8.617476,-1.949388,0.148830,-6.825163,7.354893,7.796895,2.004088,-6.616425,8.675869,-3.225580,6.226473,8.410219,-8.854020,-1.341900,6.346785,3.237973,-8.973936,-0.128771,6.804594,-1.361689,-4.534081,-7.412485,-3.977741,8.528412,6.059721,9.333229,3.636830,-0.144444,4.599443,4.371403,-4.815489,0.635928,-0.322444,-0.255153,-3.880059,-6.952515,-0.391545,-6.128516,4.154841,-2.900431,7.494374,-9.471536,9.425410,8.361027,1.542767,7.309194,7.314210,1.245325,-1.328920,-0.118314,-0.404032,-7.607566,8.942007,7.343336,-3.164114,2.049761,7.174470,-7.383990,-7.858919,-7.607836,-4.850955,3.045594,-8.340382,6.404862,7.406922,3.469767,-7.218620,-9.785738,5.729777,0.838000,-0.470560,4.083733,-6.625243,-1.929574,7.273139,-0.832056,-7.455701,-4.158105,-5.279864,7.125137,1.323457,3.215550,-2.631512,7.593920,-9.891981,3.637977,4.002010,-4.037013,8.031790,-6.284391,5.396901,-2.093215,-4.158808,-5.922917,6.608429,-9.282711,7.604781,-4.120599,-2.982968,1.985897,-7.370711,9.002374,6.163530,2.251369,-9.342631,-3.776883,8.286009,3.466017,5.605689,-3.665142,1.770711,2.057063,3.425343,2.492148,8.740934,-5.208824,1.191107,0.090639,5.373133,7.156332,-0.794463,-1.924575,0.675332,7.225189,4.570271,2.949544,5.656485,1.487928,-3.498440,-1.417079,3.869196,-8.495772,-9.974318,-9.782578,-7.243059,2.709474,2.532508,-6.296204,6.945002,5.910422,-4.958177,4.777651,4.876679,-8.091946,8.522899,7.676555,8.674240,-0.084324,8.842963,7.059707,-2.174460,-1.877151,-6.895399,-6.266017,-3.214460,3.959045,-6.485193,-5.159117,4.131641,-1.246976,6.649599,-2.052692,2.398930,-2.378269,3.316012,-2.907693,-9.674535,3.481559,-3.533006,-8.421444,5.077491,1.370004,8.783727,0.321312,-8.023656,2.533340,7.188506,-7.526251,-9.025933,2.658354,-8.933771,-0.656891,-5.847863,-5.905974,8.293999,7.924324,-3.302606,0.543893,0.233098,-9.215503,-0.979707,3.251663,9.484980,-6.574558,1.138980,3.536246,7.700278,-1.098181,8.225122,-5.909925,-5.566032,9.807475,-1.393145,-4.937966,5.365225,2.142142,-9.756775,1.136580,-6.084034,-7.529352,0.405721,-7.959003,6.234167,-8.059176,4.949851,2.999536,8.964899,-2.337912,9.032376,6.307511,7.511457,-0.089891,4.313179,-2.896640,0.465382,2.453469,-2.274379,-9.174342,7.966358,3.498085,9.663299,-7.857517,0.423523,0.228429,5.409833,-9.301948,6.302611,-1.933326,-7.859233,9.077129,2.037063,4.046810,-9.628196,6.723094,-9.612477,-6.532676,-3.659580,-1.900618,6.679025,-3.631067,-0.359332,7.871563,-1.478436,2.983296,-5.590993,-1.433936,6.822183,-8.289334,0.322361,4.886755,-0.859895,-9.296571,-9.116218,-0.052482,-8.412253,-2.889364,6.992507,-3.711285,-1.764211,0.025689,-0.135588,-0.570601,6.405690,7.612535,8.005363,-6.627490,-7.666730,-1.933529,-4.707350,-7.938604,5.253976,1.967686,5.990606,-2.854369,1.611877,-7.130896,-2.179325,-8.646213,9.903712,-8.968880,-4.513766,-9.779838,0.846067,-4.458540,-3.902526,-5.704474,5.807247,-5.370941,-9.479805,-4.439456,-3.528067,3.861689,-9.480006,-2.889339,-3.512284,-4.359346,-9.843350,1.685485,8.277521,4.251346,8.463119,5.206036,7.701761,0.927833,3.756952,-1.916050,-5.788076,-3.949034,3.059170,9.531727,9.168898,-0.820212,-3.682106,-6.054815,3.705047,6.251935,9.273883,-4.941932,3.450440,-2.130364,8.237993,-7.884263,4.011126,-0.378382,-1.768206,-7.845157,9.792186,4.735929,-2.464419,1.774711,3.146564,-6.324676,-5.082962,7.513934,-0.482011,-6.370486,-8.132831,-7.029759,9.747418,-6.056170,-5.085824,5.784407,-8.488872,5.144425,-6.469953,-8.945218,-2.046659,8.463101,3.438360,-0.936542,-6.384615,-5.595233,1.040764,-7.634958,3.266106,-0.241660,2.861950,-5.951810,-0.982325,5.587773,-3.048784,-3.203345,-5.102201,7.693994,3.305912,-7.451315,-5.656662,-0.792558,2.833320,-1.006360,-0.485626,-2.974635,5.415774,6.995777,-5.444642,-5.121864,-7.079245,7.706603,-0.350113,4.098487,-1.865550,-3.195068,-3.675573,1.909234,2.948822,-7.189972,-3.388762,-1.189149,9.822291,-8.864061,-3.841498,2.474627,0.517899,1.617740,7.610304,6.844383,-9.223163,6.214056,4.000495,-1.839059,-7.384991,-7.276274,1.042797,-8.218033,-2.738854,2.442601,-2.502694,6.522071,4.900727,6.244762,0.341216,2.820797,-7.915417,-4.154111,1.967105,7.582781,-1.239059,-8.012502,-6.663478,-8.664914,5.279344,1.396086,-5.144663,-4.051184,4.032437,7.295939,-7.719977,6.406715,9.175415,-9.218264,-4.740513,-7.211297,5.128441,9.501501,-8.010714,-4.732057,3.586513,7.724444,4.756549,5.002856,9.828275,9.764151,9.247070,4.070310,4.537340,6.349848,1.895335,-3.256949,3.991149,-4.215088,4.482350,6.979821,-7.637743,2.823712,-7.260691,-0.706935,4.529622,-2.808761,-5.191683,8.952406,9.826607,-0.323155,-8.330618,-6.636990,-7.072476,7.782556,6.355545,-2.484656,7.281058,0.830198,-1.790410,-3.254683,-8.817740,7.050743,-0.975476,-9.390623,3.451469,-5.512481,3.167062,1.759056,6.857077,8.626483,-3.083835,-4.977095,1.387782,0.046784,7.191037,8.055987,-7.974032,0.424443,1.241739,1.979008,-3.701899,4.539098,-9.352200,8.119546,4.973794,-9.696179,-1.002131,-1.365444,8.353046,5.918876,9.242023,-9.180256,0.487388,-7.772720,5.863702,-7.528135,5.403608,2.225454,-8.323054,8.348417,8.531016,9.652728,-6.311049,-3.508730,-8.276348,-4.978436,-4.687563,9.894301,-3.874460,5.164970,3.928462,4.702639,9.121909,-4.435839,4.286884,7.191567,-3.873317,-5.145464,-8.450582,-9.877388,3.733281,-9.596793,6.406029,5.732733,1.302872,7.300262,-4.586423,8.242767,3.878652,-3.984560,8.362606,4.664541,-7.440764,-4.198455,-5.213336], dtype = "float32")#candidate|6056|(840,)|const|float32
call_6055 = relay.TupleGetItem(func_5561_call(relay.reshape(const_6056.astype('float32'), [840,]), relay.reshape(call_6035.astype('uint32'), [14,]), ), 0)
call_6057 = relay.TupleGetItem(func_5564_call(relay.reshape(const_6056.astype('float32'), [840,]), relay.reshape(call_6035.astype('uint32'), [14,]), ), 0)
func_5408_call = mod.get_global_var('func_5408')
func_5412_call = mutated_mod.get_global_var('func_5412')
const_6059 = relay.const([True,True,True,True,True,True,False,True,True,True,True,False,True,True,True,True,True,True,True,False,False,True,True,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,False,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,False,False,False,True,True,False,True,False,False,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,False,True,False,False,True,False,False,False,False,True,True,False,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,True,True,True,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,False,False,False,True,True,True,False,False,True,False,True,True,False,False,False,True,False,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,True,False,False,False,False,False,True,True,True,False,False,True,False,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,False,True,True,False,True,True,False,True,False,True,False,True,True,True,False,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,False,False,False,True,True,False,True,False,True,True,True,False,False,False,False,False,False,True,True,True,True,False,False,False,True,False,False,True,True,True,True,True,True,False,False,True,False,False,True,True,True,False,True,True,True,True,True,True,True,False,False,False,True,False,False,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,False,False,False,True,False,True,False,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,False,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,False,True,False,True,True,False,False,False,True,True,False,True,True,False,False,False,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,True,True,False,False,False,False,False,True,True,True,True,True,False,True,True,False,False,False,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,True,False,False,True,False,True,False,False,False,True,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,False,True,False,False,True,True,False,False,False,False,False,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,False,False,True,True,False,False,False,False,True,False,True,True,False,True,True,True,True,False,False,False,True,False,False,True,True,False,False,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,False,True,False,True,True,False,True,True,False,True,True,False,False,False,False,True,True,False,True,True,False,True,False,False,True,True,True,True,False,True,True,False,False,True,True,True,True,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,False,True,True,False,True,False,False,True,True,False,True,True,True,True,False,False,False,False,True,True,False,True,True,True,True,False,False,True,True,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,False,True,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,False,True,False,False,True,False,True,True,True,False,False,True,True,False,True,False,False,False,True,False,False,False,True,False,True,False,False,False,True,True,False,True,False,False,True,True,True,False,True,False,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,True,False,False,False,True,True,False,False,False,False,True,False,False,True,True,True,False,True,True,False,False,True,True,True,True,False,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,True,True,False,False,True,True,True,False,False,True,False,True,False,True,True,False,True,False,False,True,False,True,True,False,False,True,True,True,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,False,True,True,False,True,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True,False,False,True,False,True,True,False,False,False,True,False,False,True,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,False,True,True,True,False,True,True,False,False,True,False,False,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,False,True,False,True,True,False,True,False,False,False,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,True,False,True,False,False,True,False,True,True,True,True,False,False,True,False,True,True,False,False,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,False,False,True,False,True,False,False,False,True,False,True,True,True,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,False,True,False,False,False,False,False,True,False,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,True,False,True,True,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,True,False,True,True,False,False,False,False,True,False,False,False,True,True,False,True,True,True,True,False,True,True,True,False,True,True,True,False,True,True,True,False,True,True,True,True,True,True,False,False,True,False,False,False,True,True,True,True,False,True,True,True,False,False,True,True,True,True,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,True,True,False,False,True,True,False,False,False,False,False,False,True,True,True,False,False,True,False,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,True,True,False,True,True,False,True,False,True,False,True,False,False,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,False,True,False,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,True,False,False,True,True,True,False,False,False,True,False,False,True,True,False,False,True,False,False,False,True,False,False,True,True,True,True,True,True,True,True,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,True,True,True,True,True,True,False,True,True,False,False,True,False,True,True,True,False,True,True,True,True,False,False,False,False,True,False,True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,False,True,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,False,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,True,True,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,False,False,False,True,False,False,True,False,True,False,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,False,True,True,True,True,False,False,False,True,True,True,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,False,False,True,False,True,True,True,False,False,False,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,False,False,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,True,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,True,True,False,True,False,True,False,True,False,True,False,False,False,False,False,True,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,True,False,True,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,False,False,True,True,False,False,True,True,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,True,True,False,True,False,True,True,True,True,True,False,False,True,False,False,False,True,False,False,True,True,False,False,False,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,False,False,True,True,True,True,True,False,True,True,True,False,True,True,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,False,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,True,True,False,True,True,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,True,False,False,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,True,False,True,True,True,True,False,True,True,False,True], dtype = "bool")#candidate|6059|(2048,)|const|bool
const_6060 = relay.const([-1.511509,-5.652441,5.091181,5.946277,1.038490,9.088896,9.667924,-3.223171,2.288333,7.707723,8.054275,-3.978658,1.536661,6.933084,5.160598,8.372194,3.071954,6.519059,-1.562549,1.813775,-4.931213,-9.086870,-4.211554,-8.785047,-4.148687,4.569298,2.248001,-7.376154,-7.007548,0.002436,3.920499,4.982196,-1.986134,2.581739,0.606300,-4.508486,1.260414,0.655646,7.753871,-6.781168,-2.619838,7.534718,9.695586,-9.085210,1.119977,7.381894,-2.897824,7.725239,9.103335,5.192498,1.401966,0.141800,-5.599802,-1.510321,-2.213749,0.527525,-4.995253,-2.782564,-7.267099,-7.140722,-0.335884,4.127571,-9.606037,-7.992126,0.680761,2.516870,6.747200,-7.405811,0.491165,-2.317450,0.447717,-1.022164], dtype = "float64")#candidate|6060|(72,)|const|float64
call_6058 = relay.TupleGetItem(func_5408_call(relay.reshape(const_6059.astype('bool'), [16, 16, 8]), relay.reshape(const_6060.astype('float64'), [72,]), ), 0)
call_6061 = relay.TupleGetItem(func_5412_call(relay.reshape(const_6059.astype('bool'), [16, 16, 8]), relay.reshape(const_6060.astype('float64'), [72,]), ), 0)
func_2314_call = mod.get_global_var('func_2314')
func_2317_call = mutated_mod.get_global_var('func_2317')
const_6065 = relay.const([1,9,-7,2,-8,9,-9,-2,-2,-3,-8,-2,-6,3,7,2,7,6,8,-6,-4,-2,-7,7,-5,-8,-7,-2,-7,4], dtype = "uint16")#candidate|6065|(30,)|const|uint16
call_6064 = relay.TupleGetItem(func_2314_call(relay.reshape(const_6065.astype('uint16'), [5, 2, 3]), relay.reshape(const_6065.astype('uint16'), [5, 2, 3]), ), 0)
call_6066 = relay.TupleGetItem(func_2317_call(relay.reshape(const_6065.astype('uint16'), [5, 2, 3]), relay.reshape(const_6065.astype('uint16'), [5, 2, 3]), ), 0)
output = relay.Tuple([call_6022,const_6030,call_6035,const_6036,bop_6040,call_6052,call_6055,const_6056,call_6058,const_6059,const_6060,call_6064,const_6065,])
output2 = relay.Tuple([call_6023,const_6030,call_6037,const_6036,bop_6043,call_6053,call_6057,const_6056,call_6061,const_6059,const_6060,call_6066,const_6065,])
func_6071 = relay.Function([], output)
mod['func_6071'] = func_6071
mod = relay.transform.InferType()(mod)
mutated_mod['func_6071'] = func_6071
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6071_call = mutated_mod.get_global_var('func_6071')
call_6072 = func_6071_call()
output = call_6072
func_6073 = relay.Function([], output)
mutated_mod['func_6073'] = func_6073
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5860_call = mod.get_global_var('func_5860')
func_5861_call = mutated_mod.get_global_var('func_5861')
call_6172 = relay.TupleGetItem(func_5860_call(), 0)
call_6173 = relay.TupleGetItem(func_5861_call(), 0)
var_6175 = relay.var("var_6175", dtype = "bool", shape = (1, 16, 8))#candidate|6175|(1, 16, 8)|var|bool
bop_6176 = relay.multiply(call_6172.astype('int64'), relay.reshape(var_6175.astype('int64'), relay.shape_of(call_6172))) # shape=(1, 16, 8)
bop_6179 = relay.multiply(call_6173.astype('int64'), relay.reshape(var_6175.astype('int64'), relay.shape_of(call_6173))) # shape=(1, 16, 8)
bop_6181 = relay.mod(bop_6176.astype('float64'), relay.reshape(var_6175.astype('float64'), relay.shape_of(bop_6176))) # shape=(1, 16, 8)
bop_6184 = relay.mod(bop_6179.astype('float64'), relay.reshape(var_6175.astype('float64'), relay.shape_of(bop_6179))) # shape=(1, 16, 8)
bop_6190 = relay.right_shift(bop_6176.astype('int8'), relay.reshape(bop_6181.astype('int8'), relay.shape_of(bop_6176))) # shape=(1, 16, 8)
bop_6193 = relay.right_shift(bop_6179.astype('int8'), relay.reshape(bop_6184.astype('int8'), relay.shape_of(bop_6179))) # shape=(1, 16, 8)
output = bop_6190
output2 = bop_6193
func_6199 = relay.Function([var_6175,], output)
mod['func_6199'] = func_6199
mod = relay.transform.InferType()(mod)
mutated_mod['func_6199'] = func_6199
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6200 = relay.var("var_6200", dtype = "bool", shape = (1, 16, 8))#candidate|6200|(1, 16, 8)|var|bool
func_6199_call = mutated_mod.get_global_var('func_6199')
call_6201 = func_6199_call(var_6200)
output = call_6201
func_6202 = relay.Function([var_6200], output)
mutated_mod['func_6202'] = func_6202
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5295_call = mod.get_global_var('func_5295')
func_5296_call = mutated_mod.get_global_var('func_5296')
call_6220 = func_5295_call()
call_6221 = func_5295_call()
var_6224 = relay.var("var_6224", dtype = "bool", shape = (14, 16, 8))#candidate|6224|(14, 16, 8)|var|bool
bop_6225 = relay.logical_xor(call_6220.astype('uint16'), var_6224.astype('uint16')) # shape=(14, 16, 8)
bop_6228 = relay.logical_xor(call_6221.astype('uint16'), var_6224.astype('uint16')) # shape=(14, 16, 8)
output = bop_6225
output2 = bop_6228
func_6231 = relay.Function([var_6224,], output)
mod['func_6231'] = func_6231
mod = relay.transform.InferType()(mod)
var_6232 = relay.var("var_6232", dtype = "bool", shape = (14, 16, 8))#candidate|6232|(14, 16, 8)|var|bool
output = func_6231(var_6232)
func_6233 = relay.Function([var_6232], output)
mutated_mod['func_6233'] = func_6233
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5295_call = mod.get_global_var('func_5295')
func_5296_call = mutated_mod.get_global_var('func_5296')
call_6237 = func_5295_call()
call_6238 = func_5295_call()
output = relay.Tuple([call_6237,])
output2 = relay.Tuple([call_6238,])
func_6239 = relay.Function([], output)
mod['func_6239'] = func_6239
mod = relay.transform.InferType()(mod)
output = func_6239()
func_6240 = relay.Function([], output)
mutated_mod['func_6240'] = func_6240
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5860_call = mod.get_global_var('func_5860')
func_5861_call = mutated_mod.get_global_var('func_5861')
call_6258 = relay.TupleGetItem(func_5860_call(), 0)
call_6259 = relay.TupleGetItem(func_5861_call(), 0)
output = call_6258
output2 = call_6259
func_6261 = relay.Function([], output)
mod['func_6261'] = func_6261
mod = relay.transform.InferType()(mod)
output = func_6261()
func_6262 = relay.Function([], output)
mutated_mod['func_6262'] = func_6262
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5657_call = mod.get_global_var('func_5657')
func_5658_call = mutated_mod.get_global_var('func_5658')
call_6291 = func_5657_call()
call_6292 = func_5657_call()
output = relay.Tuple([call_6291,])
output2 = relay.Tuple([call_6292,])
func_6293 = relay.Function([], output)
mod['func_6293'] = func_6293
mod = relay.transform.InferType()(mod)
mutated_mod['func_6293'] = func_6293
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6293_call = mutated_mod.get_global_var('func_6293')
call_6294 = func_6293_call()
output = call_6294
func_6295 = relay.Function([], output)
mutated_mod['func_6295'] = func_6295
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5888_call = mod.get_global_var('func_5888')
func_5889_call = mutated_mod.get_global_var('func_5889')
call_6302 = func_5888_call()
call_6303 = func_5888_call()
output = call_6302
output2 = call_6303
func_6304 = relay.Function([], output)
mod['func_6304'] = func_6304
mod = relay.transform.InferType()(mod)
output = func_6304()
func_6305 = relay.Function([], output)
mutated_mod['func_6305'] = func_6305
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5844_call = mod.get_global_var('func_5844')
func_5846_call = mutated_mod.get_global_var('func_5846')
call_6319 = relay.TupleGetItem(func_5844_call(), 0)
call_6320 = relay.TupleGetItem(func_5846_call(), 0)
output = call_6319
output2 = call_6320
func_6331 = relay.Function([], output)
mod['func_6331'] = func_6331
mod = relay.transform.InferType()(mod)
mutated_mod['func_6331'] = func_6331
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6331_call = mutated_mod.get_global_var('func_6331')
call_6332 = func_6331_call()
output = call_6332
func_6333 = relay.Function([], output)
mutated_mod['func_6333'] = func_6333
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6239_call = mod.get_global_var('func_6239')
func_6240_call = mutated_mod.get_global_var('func_6240')
call_6365 = relay.TupleGetItem(func_6239_call(), 0)
call_6366 = relay.TupleGetItem(func_6240_call(), 0)
func_805_call = mod.get_global_var('func_805')
func_808_call = mutated_mod.get_global_var('func_808')
var_6376 = relay.var("var_6376", dtype = "uint32", shape = (16,))#candidate|6376|(16,)|var|uint32
call_6375 = relay.TupleGetItem(func_805_call(relay.reshape(var_6376.astype('uint32'), [1, 2, 8])), 0)
call_6377 = relay.TupleGetItem(func_808_call(relay.reshape(var_6376.astype('uint32'), [1, 2, 8])), 0)
uop_6397 = relay.atan(call_6375.astype('float64')) # shape=(1, 2, 8)
uop_6399 = relay.atan(call_6377.astype('float64')) # shape=(1, 2, 8)
output = relay.Tuple([call_6365,var_6376,uop_6397,])
output2 = relay.Tuple([call_6366,var_6376,uop_6399,])
func_6401 = relay.Function([var_6376,], output)
mod['func_6401'] = func_6401
mod = relay.transform.InferType()(mod)
var_6402 = relay.var("var_6402", dtype = "uint32", shape = (16,))#candidate|6402|(16,)|var|uint32
output = func_6401(var_6402)
func_6403 = relay.Function([var_6402], output)
mutated_mod['func_6403'] = func_6403
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6304_call = mod.get_global_var('func_6304')
func_6305_call = mutated_mod.get_global_var('func_6305')
call_6472 = func_6304_call()
call_6473 = func_6304_call()
output = call_6472
output2 = call_6473
func_6474 = relay.Function([], output)
mod['func_6474'] = func_6474
mod = relay.transform.InferType()(mod)
mutated_mod['func_6474'] = func_6474
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6474_call = mutated_mod.get_global_var('func_6474')
call_6475 = func_6474_call()
output = call_6475
func_6476 = relay.Function([], output)
mutated_mod['func_6476'] = func_6476
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6239_call = mod.get_global_var('func_6239')
func_6240_call = mutated_mod.get_global_var('func_6240')
call_6501 = relay.TupleGetItem(func_6239_call(), 0)
call_6502 = relay.TupleGetItem(func_6240_call(), 0)
uop_6505 = relay.tan(call_6501.astype('float64')) # shape=(1, 16, 8)
uop_6507 = relay.tan(call_6502.astype('float64')) # shape=(1, 16, 8)
func_5408_call = mod.get_global_var('func_5408')
func_5412_call = mutated_mod.get_global_var('func_5412')
var_6515 = relay.var("var_6515", dtype = "bool", shape = (2048,))#candidate|6515|(2048,)|var|bool
const_6516 = relay.const([[-3.115524,-6.661505],[8.035692,-1.522609],[-5.434372,1.112784],[0.324614,1.303820],[-9.391814,6.776277],[-1.888771,2.077134],[-5.792763,7.762494],[8.976067,-8.142041],[9.572462,-6.332826],[-5.520817,3.261890],[7.975901,-3.435062],[-7.487094,-5.366669],[5.976364,4.916741],[2.206039,3.681780],[0.593205,5.264639],[8.716442,-8.194646],[-8.340687,0.751907],[5.943272,8.082408],[-6.309517,5.492864],[2.231656,8.763872],[-6.211005,8.855857],[7.996186,4.420018],[0.374304,2.229194],[-1.896549,6.293953],[-4.290069,0.848192],[3.684185,0.183890],[-7.286571,-7.460749],[-6.090651,-5.255685],[1.369600,-2.771880],[-0.007828,0.829263],[-3.301267,1.245834],[4.632165,7.262313],[6.276520,1.163614],[-0.156413,-1.556235],[-8.523621,-3.558696],[-9.619402,3.851840]], dtype = "float64")#candidate|6516|(36, 2)|const|float64
call_6514 = relay.TupleGetItem(func_5408_call(relay.reshape(var_6515.astype('bool'), [16, 16, 8]), relay.reshape(const_6516.astype('float64'), [72,]), ), 1)
call_6517 = relay.TupleGetItem(func_5412_call(relay.reshape(var_6515.astype('bool'), [16, 16, 8]), relay.reshape(const_6516.astype('float64'), [72,]), ), 1)
func_2800_call = mod.get_global_var('func_2800')
func_2808_call = mutated_mod.get_global_var('func_2808')
var_6520 = relay.var("var_6520", dtype = "float32", shape = (84, 1))#candidate|6520|(84, 1)|var|float32
var_6521 = relay.var("var_6521", dtype = "float64", shape = (336,))#candidate|6521|(336,)|var|float64
const_6522 = relay.const([[-9.007523],[-9.049110],[-7.111667],[-4.037249],[-2.984076],[-6.370969],[2.473765],[4.680490],[7.285206],[-1.507953],[-1.555154],[5.819894],[-5.262578],[-5.650908],[-5.257896],[6.695185],[-1.732796],[-4.453804],[4.240703],[6.437273],[4.309493],[-9.825838],[-1.750280],[3.290435],[1.261240],[-1.374268],[-3.470883],[2.633356],[-6.826448],[7.423964],[-6.919851],[-8.486768],[-9.190274],[8.871340],[8.146611],[-8.890038],[1.295027],[9.493168],[-9.648205],[5.412386],[4.243287],[7.582874],[4.985095],[-4.901101],[-2.655727],[1.978568],[-4.956765],[7.248465],[-6.485455],[-0.564921],[8.356853],[-2.976848],[2.314571],[-9.949871],[-9.779593],[9.166277],[0.683579],[5.518740],[6.949518],[5.824534],[9.160005],[6.712114],[-9.142026],[0.567633],[9.139710],[-3.899406],[-0.345668],[2.392818],[7.218640],[4.850820],[-8.132451],[7.588254],[8.587932],[-2.292384],[-2.063798],[-0.194908],[-2.765147],[5.044247],[-3.856097],[3.782433],[1.163286],[-9.909663],[4.084891],[7.403539],[4.744754],[-1.953048],[-3.459408],[1.089631],[8.320821],[-5.613179],[8.297465],[0.570679],[-9.802212],[-9.233986],[9.168916],[3.535877],[-7.468394],[-9.466109],[1.234357],[-8.762399],[-3.379127],[-7.171200],[-6.457919],[-9.500565],[-8.789024],[7.958634],[7.030327],[4.375646],[7.181178],[-6.637007],[-5.541097],[0.517665],[6.550653],[-1.090676],[-9.628279],[1.878137],[1.472308],[6.706012],[-6.867706],[4.038611],[-8.272963],[-2.384335],[-9.144204],[-2.264524],[-3.131937],[-8.234103],[-3.991257],[8.902073],[-2.798231],[-1.141371],[-1.958717],[0.779870],[-8.956276],[6.135552],[8.795076],[1.504955],[9.729231],[1.004676],[6.842115],[0.149712],[1.730214],[-8.955608],[-1.271572],[5.222738],[0.749893],[8.445897],[-0.600214],[-5.818672],[8.592166],[4.985077],[-9.852324],[-1.703033],[-7.773319],[8.075815],[1.867059],[2.484219],[6.193893],[-7.523375],[6.154066],[-9.146994],[-7.257750],[-3.856520],[-1.569640],[1.277249],[-4.901973],[-5.841591],[8.665996],[-2.959146],[0.586296],[4.476776],[2.036411],[3.102520],[4.848062],[-9.567278],[4.398321],[4.830588],[-5.377731],[-5.036041],[-0.040337],[-7.061822],[-4.988638],[-9.997929],[8.525304],[-4.581475],[-2.284234],[-5.423597],[-5.870861],[-7.025644],[0.790682],[9.094329],[1.003760],[-7.678557],[-7.491297],[7.612392],[-3.268100],[-0.448664],[-3.519824],[-7.481049],[4.978183],[-1.643523],[4.634640],[0.077274],[-0.949936],[0.407938],[-0.544568],[3.987681],[0.346711],[6.752803],[-3.170791],[5.709777],[-7.508779],[-9.961932],[-3.598925],[7.390480],[7.618540],[7.883462],[-1.571976],[-3.500632],[5.218263],[-6.905643],[-0.700306],[2.533454],[-7.367196],[-5.099349],[5.492647],[7.330336],[6.372554],[7.722525],[6.090921],[9.516241],[-8.585390],[9.921373],[-9.916412],[-3.761096],[0.729296],[2.200185],[-8.690470],[9.260357],[-6.823516],[9.423576],[3.283776],[8.749559],[-4.002967],[-1.168803],[3.742743],[-7.608019],[1.170680],[-0.287915],[-2.286833],[3.348265],[-0.222185],[3.905992],[8.192792],[5.057919],[-8.853457],[-4.554344],[5.796401],[-2.675445],[-4.172570],[2.918581],[2.156352],[3.301032],[3.750276],[-8.568937],[-9.061254],[3.330264],[-8.723702],[6.759497],[-7.119024],[9.373623],[-9.256269],[-2.062027],[-0.801290],[2.752030],[-7.222879],[-4.810405],[8.786719],[-5.974498],[-2.538029],[-6.104854],[-4.609595],[3.717365],[-4.472994],[-7.326583],[1.531364],[-6.541190],[2.289991],[8.411447],[4.544987],[-6.794235],[-5.079546],[7.689539],[8.277846],[-2.890023],[-0.154018],[-6.093843],[8.945637],[-1.373094],[8.018779],[-9.901073],[-5.472715],[-7.306720],[0.032805],[1.168464],[-5.610638],[-0.517276],[2.955696],[-2.878243],[7.014606],[-3.065802],[8.282905],[-4.720259],[-5.820797],[5.554909],[-1.858443],[-6.901101],[-3.531543],[-3.859055],[-0.183898],[-5.893313],[-2.221130],[9.911383],[9.032582],[-1.477924],[7.134792],[-2.083272],[3.459824],[6.811550],[2.639411],[3.107716],[-1.152039],[8.628140],[-0.381845],[-3.243419],[2.613522],[-6.149555],[-7.165714],[1.846163],[1.255786],[-2.591491],[-2.585142],[-6.068312],[-5.724273],[3.314481],[-2.204560],[5.060852],[-6.485899],[7.997423],[-2.656088],[-8.885691],[-1.489739],[6.882280],[-2.552669],[-2.832997],[-8.907059],[-8.078392],[-6.604435],[7.461504],[-2.752396],[-6.218523],[2.280684],[1.321197],[-0.899032],[6.153126],[7.586416],[9.070019],[-1.617830],[-1.589882],[3.024213],[-8.904567],[0.158285],[8.273411],[7.590866],[-2.792080],[0.633531],[-6.555740],[-9.984010],[9.812861]], dtype = "float32")#candidate|6522|(378, 1)|const|float32
var_6523 = relay.var("var_6523", dtype = "int64", shape = (2535,))#candidate|6523|(2535,)|var|int64
var_6524 = relay.var("var_6524", dtype = "uint32", shape = (1, 16))#candidate|6524|(1, 16)|var|uint32
call_6519 = relay.TupleGetItem(func_2800_call(relay.reshape(var_6520.astype('float32'), [4, 7, 3]), relay.reshape(var_6520.astype('float32'), [4, 7, 3]), relay.reshape(var_6521.astype('float64'), [336,]), relay.reshape(const_6522.astype('float32'), [378,]), relay.reshape(var_6523.astype('int64'), [2535,]), relay.reshape(var_6524.astype('uint32'), [16,]), ), 4)
call_6525 = relay.TupleGetItem(func_2808_call(relay.reshape(var_6520.astype('float32'), [4, 7, 3]), relay.reshape(var_6520.astype('float32'), [4, 7, 3]), relay.reshape(var_6521.astype('float64'), [336,]), relay.reshape(const_6522.astype('float32'), [378,]), relay.reshape(var_6523.astype('int64'), [2535,]), relay.reshape(var_6524.astype('uint32'), [16,]), ), 4)
var_6529 = relay.var("var_6529", dtype = "float64", shape = (4, 16, 8))#candidate|6529|(4, 16, 8)|var|float64
bop_6530 = relay.multiply(uop_6505.astype('int64'), var_6529.astype('int64')) # shape=(4, 16, 8)
bop_6533 = relay.multiply(uop_6507.astype('int64'), var_6529.astype('int64')) # shape=(4, 16, 8)
output = relay.Tuple([call_6514,var_6515,const_6516,call_6519,var_6520,var_6521,const_6522,var_6523,var_6524,bop_6530,])
output2 = relay.Tuple([call_6517,var_6515,const_6516,call_6525,var_6520,var_6521,const_6522,var_6523,var_6524,bop_6533,])
func_6536 = relay.Function([var_6515,var_6520,var_6521,var_6523,var_6524,var_6529,], output)
mod['func_6536'] = func_6536
mod = relay.transform.InferType()(mod)
var_6537 = relay.var("var_6537", dtype = "bool", shape = (2048,))#candidate|6537|(2048,)|var|bool
var_6538 = relay.var("var_6538", dtype = "float32", shape = (84, 1))#candidate|6538|(84, 1)|var|float32
var_6539 = relay.var("var_6539", dtype = "float64", shape = (336,))#candidate|6539|(336,)|var|float64
var_6540 = relay.var("var_6540", dtype = "int64", shape = (2535,))#candidate|6540|(2535,)|var|int64
var_6541 = relay.var("var_6541", dtype = "uint32", shape = (1, 16))#candidate|6541|(1, 16)|var|uint32
var_6542 = relay.var("var_6542", dtype = "float64", shape = (4, 16, 8))#candidate|6542|(4, 16, 8)|var|float64
output = func_6536(var_6537,var_6538,var_6539,var_6540,var_6541,var_6542,)
func_6543 = relay.Function([var_6537,var_6538,var_6539,var_6540,var_6541,var_6542,], output)
mutated_mod['func_6543'] = func_6543
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6545 = relay.var("var_6545", dtype = "int16", shape = (12, 10, 7))#candidate|6545|(12, 10, 7)|var|int16
var_6546 = relay.var("var_6546", dtype = "int16", shape = (12, 10, 7))#candidate|6546|(12, 10, 7)|var|int16
bop_6547 = relay.not_equal(var_6545.astype('bool'), relay.reshape(var_6546.astype('bool'), relay.shape_of(var_6545))) # shape=(12, 10, 7)
bop_6552 = relay.power(var_6546.astype('float32'), relay.reshape(var_6545.astype('float32'), relay.shape_of(var_6546))) # shape=(12, 10, 7)
bop_6557 = relay.floor_divide(bop_6552.astype('float32'), relay.reshape(bop_6547.astype('float32'), relay.shape_of(bop_6552))) # shape=(12, 10, 7)
uop_6566 = relay.exp(bop_6557.astype('float32')) # shape=(12, 10, 7)
output = uop_6566
output2 = uop_6566
func_6581 = relay.Function([var_6545,var_6546,], output)
mod['func_6581'] = func_6581
mod = relay.transform.InferType()(mod)
var_6582 = relay.var("var_6582", dtype = "int16", shape = (12, 10, 7))#candidate|6582|(12, 10, 7)|var|int16
var_6583 = relay.var("var_6583", dtype = "int16", shape = (12, 10, 7))#candidate|6583|(12, 10, 7)|var|int16
output = func_6581(var_6582,var_6583,)
func_6584 = relay.Function([var_6582,var_6583,], output)
mutated_mod['func_6584'] = func_6584
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5703_call = mod.get_global_var('func_5703')
func_5705_call = mutated_mod.get_global_var('func_5705')
call_6609 = relay.TupleGetItem(func_5703_call(), 1)
call_6610 = relay.TupleGetItem(func_5705_call(), 1)
func_5703_call = mod.get_global_var('func_5703')
func_5705_call = mutated_mod.get_global_var('func_5705')
call_6612 = relay.TupleGetItem(func_5703_call(), 1)
call_6613 = relay.TupleGetItem(func_5705_call(), 1)
output = relay.Tuple([call_6609,call_6612,])
output2 = relay.Tuple([call_6610,call_6613,])
func_6615 = relay.Function([], output)
mod['func_6615'] = func_6615
mod = relay.transform.InferType()(mod)
output = func_6615()
func_6616 = relay.Function([], output)
mutated_mod['func_6616'] = func_6616
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6071_call = mod.get_global_var('func_6071')
func_6073_call = mutated_mod.get_global_var('func_6073')
call_6630 = relay.TupleGetItem(func_6071_call(), 7)
call_6631 = relay.TupleGetItem(func_6073_call(), 7)
output = relay.Tuple([call_6630,])
output2 = relay.Tuple([call_6631,])
func_6667 = relay.Function([], output)
mod['func_6667'] = func_6667
mod = relay.transform.InferType()(mod)
mutated_mod['func_6667'] = func_6667
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6667_call = mutated_mod.get_global_var('func_6667')
call_6668 = func_6667_call()
output = call_6668
func_6669 = relay.Function([], output)
mutated_mod['func_6669'] = func_6669
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5703_call = mod.get_global_var('func_5703')
func_5705_call = mutated_mod.get_global_var('func_5705')
call_6684 = relay.TupleGetItem(func_5703_call(), 2)
call_6685 = relay.TupleGetItem(func_5705_call(), 2)
output = relay.Tuple([call_6684,])
output2 = relay.Tuple([call_6685,])
func_6695 = relay.Function([], output)
mod['func_6695'] = func_6695
mod = relay.transform.InferType()(mod)
output = func_6695()
func_6696 = relay.Function([], output)
mutated_mod['func_6696'] = func_6696
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5860_call = mod.get_global_var('func_5860')
func_5861_call = mutated_mod.get_global_var('func_5861')
call_6751 = relay.TupleGetItem(func_5860_call(), 0)
call_6752 = relay.TupleGetItem(func_5861_call(), 0)
uop_6761 = relay.log10(call_6751.astype('float64')) # shape=(1, 16, 8)
uop_6763 = relay.log10(call_6752.astype('float64')) # shape=(1, 16, 8)
output = uop_6761
output2 = uop_6763
func_6768 = relay.Function([], output)
mod['func_6768'] = func_6768
mod = relay.transform.InferType()(mod)
mutated_mod['func_6768'] = func_6768
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6768_call = mutated_mod.get_global_var('func_6768')
call_6769 = func_6768_call()
output = call_6769
func_6770 = relay.Function([], output)
mutated_mod['func_6770'] = func_6770
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6778 = relay.var("var_6778", dtype = "float32", shape = (16, 9, 15))#candidate|6778|(16, 9, 15)|var|float32
uop_6779 = relay.exp(var_6778.astype('float32')) # shape=(16, 9, 15)
output = uop_6779
output2 = uop_6779
func_6785 = relay.Function([var_6778,], output)
mod['func_6785'] = func_6785
mod = relay.transform.InferType()(mod)
var_6786 = relay.var("var_6786", dtype = "float32", shape = (16, 9, 15))#candidate|6786|(16, 9, 15)|var|float32
output = func_6785(var_6786)
func_6787 = relay.Function([var_6786], output)
mutated_mod['func_6787'] = func_6787
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6808 = relay.var("var_6808", dtype = "float64", shape = (6, 10, 3))#candidate|6808|(6, 10, 3)|var|float64
uop_6809 = relay.atan(var_6808.astype('float64')) # shape=(6, 10, 3)
bop_6812 = relay.floor_mod(var_6808.astype('float64'), relay.reshape(uop_6809.astype('float64'), relay.shape_of(var_6808))) # shape=(6, 10, 3)
func_186_call = mod.get_global_var('func_186')
func_189_call = mutated_mod.get_global_var('func_189')
const_6816 = relay.const([[-4,-9,1,-9,10,5,-10,-6,-1,5,-8,-6,-2,10,8],[10,-9,5,4,2,-6,1,-1,3,5,1,-1,-8,-1,10],[4,-5,6,6,4,5,-7,7,5,-2,-8,-2,2,-5,-8],[-4,3,-9,9,-1,5,4,4,10,3,-10,6,1,3,3],[-1,6,-8,4,-2,2,-3,-7,-10,-6,10,-6,-9,-4,-5],[6,8,9,-8,-5,8,-6,-6,7,2,2,1,-6,-7,5],[-1,-9,4,5,2,10,9,-10,1,-2,-3,2,-4,-6,-3],[4,-3,-3,4,-9,-7,-6,-5,1,6,-8,10,4,-10,-5],[-3,-7,6,3,9,6,-1,2,1,-3,-1,-7,-2,-4,-1],[-7,2,1,5,7,8,-10,6,-6,-7,7,1,-8,-6,5],[-3,-2,-6,2,8,5,-1,-4,9,7,2,-8,9,-6,-10],[2,5,10,-6,-5,2,-10,-7,1,6,-5,-3,1,-9,-6],[-2,-4,-2,-10,-7,-5,-7,1,1,3,9,8,-3,5,-8],[2,-9,8,-1,4,-5,4,-5,-7,6,-6,8,-10,-2,4],[3,-1,2,-6,10,-10,8,-7,10,1,-2,4,8,-2,6],[2,1,4,5,-8,-9,-9,6,-1,-10,6,-7,3,-2,-8],[10,-2,5,8,-7,6,7,-4,-3,-1,7,-4,-8,4,1],[-10,3,-4,9,8,-10,-1,-2,-2,-2,-8,2,7,-7,10],[4,9,-4,-6,6,-9,10,5,-7,-7,-2,9,-6,-4,7],[3,7,-7,-6,6,-8,-10,4,-10,-2,9,-3,10,5,4],[-9,3,8,9,-4,-8,9,-1,-3,6,-10,-1,-5,4,-6],[-2,-5,3,7,-7,-6,-3,5,9,-5,-3,-2,-7,9,7],[-10,-2,-3,10,8,1,4,-8,6,-5,2,5,6,1,5],[-3,-4,-2,2,9,9,4,3,-10,-9,1,7,-5,8,-8],[-1,-8,8,6,-9,-9,-6,-2,3,10,-9,3,-7,-6,-4],[7,-7,-2,4,2,2,4,4,-9,-7,9,9,1,10,-10],[4,-2,2,-6,2,2,9,4,-1,10,-1,6,-3,-8,4],[9,-5,9,-3,-4,2,10,1,7,-6,-1,-6,-1,-4,3],[-6,6,-1,1,-7,-10,-2,-10,-4,-6,-4,1,6,10,-10],[-7,-5,-10,-7,2,-5,-3,-3,-9,-2,1,-5,-7,-4,-2],[1,-3,-2,3,-5,5,9,6,-3,-1,3,10,-4,-9,-3],[5,2,-10,-10,-6,-10,-4,9,1,8,-4,3,8,-10,-8],[-10,8,-8,6,3,-4,3,2,-9,-3,-4,-7,-10,6,2],[6,4,1,2,3,-1,8,6,-5,2,3,4,5,-5,-5],[-5,-8,-5,-3,8,4,-3,-3,-4,-8,-6,-4,-1,4,2],[-2,2,-5,10,-6,4,-8,-4,-9,-1,7,-6,-8,2,2],[5,10,-5,-4,5,-3,-2,7,4,-8,-3,-4,8,7,-6],[-5,-4,-8,-1,1,-6,6,-5,-6,1,6,9,-2,-2,10],[-7,-8,-1,7,3,-8,2,7,-9,8,6,-3,-2,3,-5],[1,-9,2,-9,2,10,-9,5,10,8,3,2,1,2,-7],[9,8,10,8,10,-1,1,3,-7,-2,-2,9,3,-9,3],[10,5,10,8,7,7,10,-8,-7,-9,10,-6,-7,-8,-1],[-2,1,-9,-5,8,-6,-9,-6,-1,-4,2,2,-2,4,-5],[10,-6,-9,3,-3,-5,7,-5,-5,-4,9,-4,3,-1,-7],[-1,-6,-8,-3,8,-2,-5,8,-2,8,-1,-3,7,-10,-2],[-5,-4,10,-7,-2,7,9,-3,-1,2,-4,-6,10,2,2],[-9,-6,9,2,7,2,-10,-5,9,-9,-7,6,9,-9,-5],[6,9,6,6,-5,-4,6,-9,8,-8,9,-1,1,10,-2],[2,-1,-9,-10,-7,-7,-5,6,5,9,10,-1,4,10,1],[-3,1,5,-2,-5,1,1,-7,9,10,7,8,10,9,8],[-3,2,-4,6,-3,7,2,-1,7,-5,8,7,-10,-7,-9],[9,-5,-8,10,-9,4,7,5,9,8,7,5,-1,2,-2],[-5,5,-3,-1,8,4,-5,9,8,2,-9,-1,4,9,-10],[-9,1,-6,-8,7,-8,-7,3,5,-2,-7,-5,-7,-10,6],[-5,-8,-8,3,3,1,3,8,-2,7,-9,6,5,-6,-8],[-9,-7,3,3,-1,-8,-10,10,8,3,7,2,-10,7,-5],[8,9,-3,3,2,2,8,-2,-2,-10,6,8,1,6,-4],[2,-7,7,7,5,6,1,3,-2,-4,1,2,-7,-9,-10],[5,3,6,3,-2,3,10,-1,7,-10,-6,10,-2,10,1],[-2,-3,-2,9,-4,-6,8,-3,8,2,1,-9,-5,-10,-2],[-6,-1,3,10,7,-2,1,8,9,-3,2,-1,5,-3,3],[-7,-2,-10,10,-7,-3,1,-9,7,-2,10,-4,-6,9,5],[-7,-2,1,-5,1,-9,1,8,8,9,-6,6,2,-9,5],[4,6,-2,10,-9,7,7,9,-7,3,-9,-7,-8,-8,1],[-3,-3,2,8,-3,5,7,8,-7,3,3,8,-6,10,-5],[5,-5,-7,-6,-9,1,8,5,-2,-5,4,-8,7,-1,5],[-7,4,-1,-8,-3,5,-2,10,3,4,10,3,10,-9,6],[-7,-6,-4,1,3,3,-7,-5,4,2,5,6,7,9,-9],[2,7,-6,-7,4,-10,-2,-4,6,4,-6,10,-4,-9,5],[-7,3,-6,-8,5,-5,-1,-2,1,-2,5,-1,-1,-4,-9],[6,7,-3,-10,6,-2,-10,7,7,9,-4,-9,-1,-1,1],[-5,9,8,-3,-2,4,1,9,4,-7,-9,-1,-5,9,9],[-9,8,-4,-9,-5,-9,6,-2,9,5,1,8,-2,-6,10],[-2,-2,4,-9,5,3,2,4,-6,-10,-1,-3,-4,-4,6],[8,3,-10,-5,2,-2,4,6,-8,4,-3,2,6,3,-8],[3,8,-7,-5,-5,4,3,1,-9,4,-10,10,7,8,5],[-10,4,-8,-6,5,1,-1,9,-6,5,-2,8,-5,-10,-4],[10,5,4,5,6,3,1,-2,10,-9,-7,-9,4,2,8],[-9,2,2,-9,7,-9,3,-6,10,-2,-10,1,5,-5,1],[3,-2,6,-10,-3,10,-9,1,9,-3,10,9,-5,9,9],[3,-10,6,1,2,-5,5,7,-9,-7,5,-8,-9,1,2],[7,-2,10,-4,-8,-4,-9,6,5,10,10,9,4,-10,7],[-4,7,3,8,10,-2,-8,5,6,-3,-4,-6,2,5,2],[4,-8,4,8,-9,-7,-5,1,-10,10,5,-6,-8,-10,10],[5,-8,7,-4,-3,5,5,4,10,5,7,5,-1,-2,8],[-3,-8,-7,4,-1,-6,8,6,9,3,-5,6,-4,5,-7],[9,-7,4,3,-5,6,1,-5,3,-1,8,9,-8,-10,-10],[-7,9,-10,-7,-1,-9,6,-9,5,2,2,-3,-3,-5,-5],[2,-6,7,-3,10,7,-1,7,1,-5,9,-7,8,7,-5],[-8,6,7,9,6,-4,-9,5,6,-10,-2,-8,-3,-9,10],[5,-10,-2,-4,6,2,-4,-4,7,-6,-5,-7,-7,9,-3],[1,-7,-8,-5,9,2,-1,2,-5,9,7,-10,-7,7,5],[7,9,-5,2,-9,3,-2,-8,-10,-3,-6,3,5,5,7],[3,5,7,-10,4,-10,9,-9,-6,1,2,-10,-3,4,-8],[-7,-5,4,4,1,-3,3,2,-10,5,-10,9,1,-6,8],[-5,6,9,2,-5,-9,3,-10,-8,-5,-2,-9,6,10,4],[-7,-7,9,-4,7,-1,8,2,10,8,10,-4,-10,-8,4],[2,-9,6,-5,8,-10,10,-4,7,2,-3,7,3,8,10],[1,3,1,9,-10,7,9,-9,2,9,1,-8,9,-8,1],[9,9,6,-1,-5,-4,-2,-2,8,-7,7,10,8,7,4],[-3,-1,-7,2,4,1,-10,10,4,-5,6,-2,-9,4,6],[5,-3,2,5,-9,1,-6,-5,-2,-6,-1,-1,7,-3,8],[-10,-1,-1,-2,8,5,3,2,-8,6,-1,6,-10,-4,3],[6,-4,8,-1,10,-4,-1,-6,5,-5,-10,8,2,9,4],[-5,7,9,-5,-8,10,-1,10,-3,-3,-4,9,-1,3,-5],[3,-7,-1,8,7,-2,9,-9,3,2,2,-1,1,10,-1],[10,6,6,4,-3,1,9,1,7,-7,9,8,-10,3,10],[4,-10,9,-8,-2,-3,8,-3,9,-2,10,6,5,-4,6],[4,5,-10,4,7,-1,-8,-4,10,10,10,5,-7,-3,-9],[-8,9,-9,-8,-9,8,7,10,9,-5,-2,-9,2,-9,9],[-4,-3,10,3,6,5,1,3,5,1,-9,6,4,-5,3],[-3,1,-9,9,-1,2,-2,-9,-4,5,8,-10,5,2,-7],[4,-1,5,7,10,10,5,-6,-6,-3,-8,8,-5,2,-1],[-4,8,-3,3,-6,10,-6,-9,-3,5,-8,7,2,7,3],[2,6,-1,10,8,9,-3,7,1,7,-6,-8,-10,-8,4],[-4,7,6,-8,-1,6,8,-7,9,5,-4,10,-5,-4,-7],[4,-7,-3,10,3,10,3,9,3,10,6,10,-9,8,1],[4,-7,8,-7,-3,-10,-10,-1,7,-8,3,-2,-2,1,4],[5,5,10,4,-2,10,10,-8,-10,6,-1,-4,3,2,5],[-3,-6,4,4,5,-3,-1,-6,3,-2,-8,7,6,9,3],[5,-6,-6,9,8,-9,3,-3,7,-7,-4,-3,-8,-2,-6],[2,-3,-2,-9,-1,9,8,-8,-10,-9,-7,3,-6,7,-7],[3,6,-10,-4,-3,5,-5,-1,6,-1,8,7,-7,4,1],[9,-3,-1,-5,-1,2,-8,1,-3,3,-1,1,4,-3,2],[-2,-1,7,-5,8,1,-1,8,-2,-10,-4,-6,1,3,-10],[1,7,4,-5,-6,-6,5,-8,1,6,5,-2,-7,2,-10],[-4,-4,-2,-4,-9,2,-1,-3,1,-1,5,7,6,2,-3],[-2,-3,9,-7,2,7,-1,10,7,8,-8,-3,-2,-10,-9],[-5,1,9,3,7,4,-3,2,9,-5,-9,-1,10,3,8],[-3,5,2,8,-4,5,10,-2,-1,4,-9,-1,-5,-4,2],[-10,-6,1,-3,-3,3,-2,4,-5,-5,1,4,-6,4,7],[3,-3,6,-5,2,-3,-6,7,-1,6,-3,-9,10,4,-7],[-2,-10,-7,8,5,-4,4,-5,1,-3,-1,-4,3,-6,-10],[10,3,-4,6,6,1,-10,-9,7,-1,7,-9,2,6,9],[-3,5,-8,-8,-4,-6,4,9,-2,-3,9,7,-2,-7,9],[4,2,-1,10,-5,-6,9,-10,5,-7,7,10,-3,2,-1],[-6,6,4,-10,-7,-1,7,-4,10,-9,8,4,-9,-2,-7],[-2,8,2,-5,10,-7,-4,-3,-3,8,2,7,3,3,5],[-8,4,6,10,6,5,1,10,-10,8,5,3,6,-6,-1],[10,1,-9,-9,10,1,1,-5,-7,-3,10,-3,-10,8,9],[-8,-1,2,-7,1,8,-3,3,9,-2,2,-10,4,5,5],[-5,4,3,-8,-9,-10,-8,-6,-10,8,7,3,-7,7,-2],[8,7,-3,-10,-5,-7,-5,-7,-5,-6,-6,-5,10,7,-5],[-2,-4,3,-1,6,1,10,-8,7,-3,-6,-3,9,2,3],[-5,-10,-3,-6,-7,2,-8,4,-1,-9,3,3,-8,-1,8],[-10,10,2,5,10,2,10,6,6,-6,-2,-2,-6,9,3],[-3,10,4,-7,-10,1,-8,-2,6,2,4,-2,10,9,7],[-7,-6,6,-9,-7,1,-2,8,5,-1,7,-2,-2,-6,2],[-2,6,7,5,4,-6,-9,-5,-2,4,-7,7,-9,2,9],[-1,-4,-6,-6,9,-5,6,-3,3,-9,-9,8,-8,4,-4],[-7,-3,-9,-3,1,8,7,10,-5,5,9,-2,1,-8,3],[9,7,10,2,3,-3,7,-7,10,-9,-5,3,9,-1,-9],[7,2,-2,9,6,-5,-5,9,-1,-3,7,1,7,-2,-5],[3,-10,5,9,-6,-10,-4,-7,-6,-3,7,8,10,7,4],[-6,3,3,-10,4,7,-8,8,5,2,-4,10,10,-7,-3],[-7,9,-4,8,5,9,5,-5,5,-6,8,7,-9,-7,3],[7,-6,2,1,4,-3,9,4,-8,2,5,1,5,10,8],[1,-5,-2,-6,6,-10,-7,-4,1,-2,-7,2,-1,-10,10],[-8,3,-7,-10,-9,-5,5,6,-4,5,-1,-3,10,1,-8],[-8,-1,10,8,-10,-6,6,8,-3,10,-10,-8,-3,8,-10],[2,-5,-1,-10,4,-5,-5,-2,-2,5,2,-2,-8,-1,-6],[7,1,2,6,2,-2,-10,8,9,-6,-4,2,3,9,-10],[-6,-7,-8,10,1,-4,9,-9,6,8,4,2,-8,-6,8],[-3,3,-3,1,3,-3,6,-10,10,-2,-10,10,2,9,-4],[4,-3,-9,7,10,-3,-8,-7,-5,6,5,6,2,-3,6],[9,-7,8,-1,-6,-5,-5,10,-3,1,2,7,-3,-6,9],[-6,-5,-3,8,7,2,-5,-9,9,9,1,-5,-9,-9,-7],[-10,-9,5,-7,-5,-7,10,-5,6,-1,3,-6,2,9,2],[-4,-8,-7,-4,-3,3,-7,1,-2,-6,-2,6,-9,3,2]], dtype = "int64")#candidate|6816|(169, 15)|const|int64
call_6815 = relay.TupleGetItem(func_186_call(relay.reshape(const_6816.astype('int64'), [13, 13, 15])), 1)
call_6817 = relay.TupleGetItem(func_189_call(relay.reshape(const_6816.astype('int64'), [13, 13, 15])), 1)
func_2386_call = mod.get_global_var('func_2386')
func_2388_call = mutated_mod.get_global_var('func_2388')
var_6819 = relay.var("var_6819", dtype = "float64", shape = (336,))#candidate|6819|(336,)|var|float64
call_6818 = relay.TupleGetItem(func_2386_call(relay.reshape(var_6819.astype('float64'), [12, 2, 14])), 1)
call_6820 = relay.TupleGetItem(func_2388_call(relay.reshape(var_6819.astype('float64'), [12, 2, 14])), 1)
func_6304_call = mod.get_global_var('func_6304')
func_6305_call = mutated_mod.get_global_var('func_6305')
call_6825 = func_6304_call()
call_6826 = func_6304_call()
var_6828 = relay.var("var_6828", dtype = "float64", shape = (6, 10, 3))#candidate|6828|(6, 10, 3)|var|float64
bop_6829 = relay.logical_or(var_6808.astype('bool'), relay.reshape(var_6828.astype('bool'), relay.shape_of(var_6808))) # shape=(6, 10, 3)
output = relay.Tuple([bop_6812,call_6815,const_6816,call_6818,var_6819,call_6825,bop_6829,])
output2 = relay.Tuple([bop_6812,call_6817,const_6816,call_6820,var_6819,call_6826,bop_6829,])
func_6832 = relay.Function([var_6808,var_6819,var_6828,], output)
mod['func_6832'] = func_6832
mod = relay.transform.InferType()(mod)
var_6833 = relay.var("var_6833", dtype = "float64", shape = (6, 10, 3))#candidate|6833|(6, 10, 3)|var|float64
var_6834 = relay.var("var_6834", dtype = "float64", shape = (336,))#candidate|6834|(336,)|var|float64
var_6835 = relay.var("var_6835", dtype = "float64", shape = (6, 10, 3))#candidate|6835|(6, 10, 3)|var|float64
output = func_6832(var_6833,var_6834,var_6835,)
func_6836 = relay.Function([var_6833,var_6834,var_6835,], output)
mutated_mod['func_6836'] = func_6836
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5703_call = mod.get_global_var('func_5703')
func_5705_call = mutated_mod.get_global_var('func_5705')
call_6846 = relay.TupleGetItem(func_5703_call(), 1)
call_6847 = relay.TupleGetItem(func_5705_call(), 1)
uop_6848 = relay.sinh(call_6846.astype('float64')) # shape=(13, 13, 15)
uop_6850 = relay.sinh(call_6847.astype('float64')) # shape=(13, 13, 15)
output = relay.Tuple([uop_6848,])
output2 = relay.Tuple([uop_6850,])
func_6860 = relay.Function([], output)
mod['func_6860'] = func_6860
mod = relay.transform.InferType()(mod)
output = func_6860()
func_6861 = relay.Function([], output)
mutated_mod['func_6861'] = func_6861
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6971 = relay.var("var_6971", dtype = "int64", shape = (9, 14, 10))#candidate|6971|(9, 14, 10)|var|int64
var_6972 = relay.var("var_6972", dtype = "int64", shape = (9, 14, 10))#candidate|6972|(9, 14, 10)|var|int64
bop_6973 = relay.bitwise_or(var_6971.astype('int64'), relay.reshape(var_6972.astype('int64'), relay.shape_of(var_6971))) # shape=(9, 14, 10)
output = relay.Tuple([bop_6973,])
output2 = relay.Tuple([bop_6973,])
func_6977 = relay.Function([var_6971,var_6972,], output)
mod['func_6977'] = func_6977
mod = relay.transform.InferType()(mod)
var_6978 = relay.var("var_6978", dtype = "int64", shape = (9, 14, 10))#candidate|6978|(9, 14, 10)|var|int64
var_6979 = relay.var("var_6979", dtype = "int64", shape = (9, 14, 10))#candidate|6979|(9, 14, 10)|var|int64
output = func_6977(var_6978,var_6979,)
func_6980 = relay.Function([var_6978,var_6979,], output)
mutated_mod['func_6980'] = func_6980
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5657_call = mod.get_global_var('func_5657')
func_5658_call = mutated_mod.get_global_var('func_5658')
call_7013 = func_5657_call()
call_7014 = func_5657_call()
func_725_call = mod.get_global_var('func_725')
func_729_call = mutated_mod.get_global_var('func_729')
const_7019 = relay.const(9, dtype = "uint32")#candidate|7019|()|const|uint32
const_7020 = relay.const([-8,-9,-1,8,-2,-4,2,-7,7,5,1,1,-2,-9], dtype = "uint32")#candidate|7020|(14,)|const|uint32
call_7018 = relay.TupleGetItem(func_725_call(relay.reshape(const_7019.astype('uint32'), []), relay.reshape(const_7020.astype('uint32'), [14, 1]), ), 0)
call_7021 = relay.TupleGetItem(func_729_call(relay.reshape(const_7019.astype('uint32'), []), relay.reshape(const_7020.astype('uint32'), [14, 1]), ), 0)
func_3656_call = mod.get_global_var('func_3656')
func_3664_call = mutated_mod.get_global_var('func_3664')
const_7046 = relay.const([-2.524101,-2.008232,2.908691,-1.152277,8.035212,8.372227,4.520322,0.143510,-7.147759,-5.736460,7.581201,-4.807216,-6.420605,5.356426,6.406570,3.477635,5.352446,6.334956,3.411811,-5.665350,7.123740,-5.368573,6.267051,-6.204457,2.496528,-3.796840,5.339165,-0.789575,-8.647559,-6.969318,-5.153001,2.110537,1.975074,-8.202220,-5.777972,6.237830,-4.383171,2.451129,-9.683633,8.297620,-8.751459,-6.674922,-8.811912,9.741008,-4.123492,-4.325776,6.885651,-2.734487,-0.023251,0.011168,9.298093,7.154079,-0.838682,-4.710847,-6.471305,-3.828106,5.982927,8.809619,1.570806,-0.614773,-7.896535,7.286471,-3.860446,-4.878256,-8.658836,-2.708531,1.921698,-7.810622,-8.414448,-1.213365,-4.087653,0.083177,3.553594,-0.624422,7.259805,-0.898376,6.582555,7.002809,5.346490,0.774168,8.005120,4.374227,4.568884,-2.733534,-1.266351,-5.245326,7.010140,-9.102211,-5.132070,-9.740977,6.959746,1.298736,-6.036556,7.591923,0.515803,3.805870,-5.384610,9.423165,-0.253870,8.006235,-8.080068,-6.981254,0.868766,-0.067528,7.503398,9.659955,1.563098,3.725397,0.362591,6.683409,5.491259,0.593933,7.970456,0.731020,-1.328474,1.475939,6.279916,-5.698675,-7.642383,-7.413382,3.720698,7.997803,2.719141,-0.940017,8.524528,9.878982,9.493595,-5.287393,2.085977,-3.060211,-5.967423,-8.077436,3.035396,-6.779296,8.787858,2.164225,-2.111594,0.122984,-6.687063,-1.843341,3.730118,-2.461207,-5.718445,1.809125,2.366242,9.412168,2.378953,8.908251,-8.914437,1.129980,-8.545731,2.727320,0.113571,-1.443708,-4.646805,1.374712,-0.588473,-7.953950,-8.324027,-5.602270,-7.303479,6.510720,3.219333,-0.031295,-6.809022,4.297761,3.678279,1.610767,2.955625,-2.922399,-2.566724,0.578301,0.482719,0.531484,-1.505525,6.541615,9.517241,-7.979571,0.051845,-4.542378,-5.287128,3.111056,-9.174177,-4.962628,-3.993896,-1.204708,-7.197532,-6.382254,1.651317,5.022490,9.706173,-9.594011,1.292448,-9.020342,-5.409570,-7.391265,-8.220451,-6.854804,-3.502215,3.802199,8.010686,5.348207,5.911640,7.466183,9.675511,-7.920336,-4.069720,4.981592,-5.860602,-0.865563,6.592987,1.329180,-0.433006,-4.343475,0.695034,-1.849671,2.750659,-2.685851,5.282851,-8.571724,3.545237,0.537400,9.845879,6.328931,-2.423697,-1.723142,9.796438,-2.567529,3.278137,-7.206164,-0.463774,9.595831,9.669670,-3.991822,-1.135668,3.829123,-8.473596,0.266442,-8.297996,7.122762,-9.953099,-2.254811,7.661668,-1.274597,3.511117,4.883825,6.892748,-8.630361,0.873557,5.858861,7.062444,8.362640,1.989245,9.019261,8.892817,4.131808,6.165288,4.328464,-6.532459,0.836024,5.514607,9.339918,-4.511236,1.651553,-0.732994,9.084268,0.752714,9.433824,3.374798,-2.384763,0.753459,-5.417920,3.246582,-3.531355,7.949275,-8.001008,-6.767879,3.132770,0.575582,-5.789867,2.966079,5.349403,-4.405900,-6.441652,0.827608,3.084762,-2.113569,3.920269,5.557690,4.743405,-6.223704,6.900425,9.608860,6.815542,0.846890,-7.590800,2.273849,-9.502902,7.324819,0.247964,9.559373,4.864490,-0.639717,-4.979139,-3.275738,9.737969,0.336459,-1.856152,8.297676,3.243305,5.510147,-8.038727,6.951460,6.571137,5.237267,2.925271,2.060205,-7.641210,-9.650350,1.682291,-8.221785,0.059235,-9.146461,-1.460307,4.837841,-1.076021,4.035595,2.506238,8.115413,7.775354,4.085369,-3.205666,-0.801299,-1.921930,2.846934,1.694238,-9.238702,7.714067,-5.482852,8.249961,9.635099,9.178872,-3.544567,6.561105,9.904712,-0.863363,7.491290,6.127441,9.200014,-6.432668,0.784807,-5.900702,-3.596714,-0.841881,9.461773,-8.883377,-7.904930,9.442598,-8.704866,-1.749879,-4.790197,-0.713167,2.500937,6.419420,-9.274233,2.926551,2.183097,0.049867,5.948948,3.912242,6.168120,7.779708,3.320687,-4.062490,1.665768,8.264990,6.831100,-1.726480,0.138157,1.318617,5.284427,2.644329,-1.218231,6.759227,4.269092,-0.653183,-8.056974,-2.793390,3.354932,-8.843713,2.333322,-4.632539,0.905414,-2.288814,-9.284108,-8.363021,-3.627300,-0.406522,0.486694,5.231253,-3.365274,9.134331,9.156751,-5.334600,2.257134,-2.330230,-4.212965,6.043446,9.532764,-5.905528,-6.890413,2.542741,6.267585,2.531770,3.838277,0.277884,6.377671,7.457361,-4.434281,1.237146,-7.692784,-7.721079,-9.046163,-3.796956,5.450672,8.818059,-0.278115,6.726284,-5.018492,-1.654628,8.336981,-8.501932,-4.956351,6.281258,5.750235,-4.607539,-2.355357,8.032065,9.425678,-6.596006,-1.070831,-6.742267,9.829918,-4.225053,-7.208487,4.101453,-8.529638,-1.939686,3.743861,6.545131,-0.108236,-7.440333,4.865401,1.886009,-0.260238,1.518521,7.453652,2.904983,5.822001,9.615993,-6.506540,4.451573,-8.597199,1.834924,-9.669687,-8.871263,3.565061,7.963186,-7.034608,5.132629,6.477772,-8.529152,-4.672905,0.259007,5.135560,9.304471,2.973075,7.063892,6.551315,-7.753559,2.495687,-6.292926,3.873384,6.847761,3.064104,-9.475725,-9.418070,0.955966,-3.790170,-6.557165,1.145643,9.535911,6.345476,-7.004917,-5.801395,-8.400978,-6.088121,-3.086989,-2.987626,8.562496,-7.932305,-7.994112,-6.046018,5.433832,-1.638999,0.135377,8.991871,1.866017,9.986917,2.020955,-9.016001,9.203528,6.583373,-9.393352,-5.561379,4.155746,-3.549400,9.083119,8.236807,1.265327,-8.305527,-7.545851,-3.020298,-3.746966,6.321361,7.438897,3.505255,-3.061255,-1.193169,1.203901,1.048855,6.643553,-5.633275,-4.300056,0.596106,-8.810443,-3.597020,5.162041,-5.064325,-0.501351,-7.417327,9.841190,9.222277,-9.251914,-5.204800,-2.980784,-1.770736,4.789774,-3.921617,-7.771825,-7.245866,7.970345,8.941732,3.117318,7.549671,-5.008334,7.187308,2.762160,5.403892,-6.628319,2.021477,9.018639,-6.560755,1.565559,0.938628,-3.902429,-5.297119,-3.566019,-9.278052,5.505038,-2.956707,5.376553,9.226014,-9.767932,-5.340129,-2.353514,5.338623,7.386169,2.194453,-5.207818,9.132056,-6.794857,-2.653216,4.427049,-8.719032,-4.893517,-2.058854,-8.180845,6.219709,8.110241,9.600678,4.759304,3.700657,-0.617594,0.011340,4.754285,8.867537,-4.575278,1.370555,-2.808977,-1.544477,-8.904434,0.404999,-6.432126,7.483363,-2.576115,-8.803006,8.473346,6.086972,-2.554486,-7.449292,1.475363,6.685482,5.799104,2.809430,-1.444691,8.763590,5.060374,6.500236,7.064524,7.628153,4.145594,5.576736,1.483053,-9.222030,-6.673589,-4.432819,-9.986757,8.310488,-7.543549,6.242316,9.475267,1.613135,7.431924,-1.586538,4.733600,5.749126,7.816978,0.202475,7.566094,-8.044953,-4.775568,9.018728,-9.932885,-2.339310,6.818966,4.886486,-7.742964,6.058005,9.821232,-2.436400,9.561441,8.399846,3.721980,-0.226193,-4.963238,-3.742730,5.163045,3.638939,-3.408601,-3.265122,-4.758697,-5.607035,-7.878100,-6.611922,-7.348188,-6.296777,-2.003405,-5.065165,-0.543591,-3.708523,-5.722981,4.188241,-2.152685,6.001975,-7.963061,6.354566,-3.315704,-5.678024,8.923506,-6.787666,0.564650,-8.171286,6.844828,6.177099,9.200157,-6.235466,-9.269211,4.982584,8.606548,-1.584399,-5.368848,-8.389066,2.367430,9.806485,7.634172,-3.008643,-9.893564,7.966350,-4.754279,7.970825,-0.990665,6.379753,6.606009,-1.482175,6.135331,-8.630299,-5.694414,-1.804673,3.959887,-9.104125,-5.730883,-5.555063,3.590941,-6.549692,-7.935726,8.222380,1.140779,-1.976666,3.229853,4.035127,7.159526,-7.092246,-2.420914,3.322169,-1.605677,3.050785,8.331885,8.943059,6.586284,-3.228358,5.754505,-6.786997,-9.322615,8.387450,2.922762,-7.816423,4.369581,-8.464036,-3.223583,0.556661,-9.974190,1.147762,-5.078241,-5.343585,-4.469504,-4.023449,5.575095,-2.435824,9.156706,5.681066,4.844695,3.230328,5.710315,-7.895511,8.774072,-7.483889,-9.404972,9.091701,5.218549,-5.995074,-2.882297,2.719870,-9.330240,3.137114,-9.675474,-3.017988,5.096467,-5.846202,-6.691066,-9.163168,-2.419686,1.849931,-5.506948,-2.139991,-9.257775,9.648409,4.764883,-2.317268,-8.849191,1.682802,0.551173,-2.720091,4.422011,8.656179,-4.907491,8.803363,-2.723445,8.869302,-0.505847,-7.794898,8.963531,0.104298,0.986906,-2.945873,-0.642101,-7.836895,5.214503,-1.139160,8.510313,-3.931768,3.349433,-2.607741,-9.960796,-8.153094,1.288357,-1.563521,-4.815486,3.668931,2.498799,7.357418,4.471156,0.891406,7.522431,1.276946,4.785638,-6.863026,-6.299163,1.854863,-0.796577,6.246266,-8.885652,-0.184664,4.695843,-9.226971,1.669910,-3.130782,6.788549,-7.009975,2.400339,1.131933,1.283268,9.000680,6.273384,9.682363,-1.006037,0.799143,-4.413743,8.285320,-3.084629,-1.559383,-6.290120,-4.393893,5.273970,-2.585447,3.453950,6.405205,2.141409,-9.636726,3.208222,-6.014910,-1.260074,3.555717,-3.540152,-1.590111,-3.407662,-8.266711,-4.821847,7.921461,6.898677,-4.968682,7.261375,-8.463682,7.517839,9.310540,-8.188457,-9.790241,-6.047652,8.843906,0.923982,0.273821,-4.345548,-3.283234,-1.425205,-9.104166,3.389475,-1.223685,6.444384,3.298181,9.428598,0.638270,-6.329865,-2.579716,0.986084,7.104338,-4.016217,8.504737,8.888991,4.481517,9.193117,2.365288,-0.683001,1.154555,-4.982124,-4.075213,-7.379269,2.246894,-7.508118,8.383810,6.333355,-6.948100,7.785136,1.539102,7.016939,-4.133435,-9.609838,5.327405,-4.895821,-3.634621,1.196144,-1.623823,7.887163,-6.151569,-4.511308,1.741887,6.340598,0.380101,1.169760,5.542053,9.695831,6.280294,5.220876,-7.320353,-3.540201,5.276697,-1.115988,7.668817,6.825054,9.106120,3.428037,-9.087590,-2.733460,9.202467,-2.020555,-5.174992,-3.534209,3.946153,-0.566524,8.342777,9.827266,-9.644909,5.225389,5.542859,5.140669,-5.724637,8.461516,9.992475,-9.798555,-7.333828,2.438590,-2.949954,-4.136129,-9.453681,6.163077,0.485364,-1.854016,-5.483167,0.156184,-3.760415,-3.988619,3.227264,1.366929,9.343578,1.116610,-5.578990,-8.038484,5.602700,0.129210,7.618734,5.740606,0.672629,-7.300125,4.256239,0.589360,6.850948,-0.613628,7.903949,4.679345,0.668395,-0.462511,-4.321781,-8.234768,-2.187349,5.045212,9.453272,-5.719033,-1.932852,-2.286728,5.580036,7.971767,-0.442264,5.019343,-8.286757,-0.177859,-8.195576,8.993302,-8.833090,-5.088324,9.514084,-3.589974,-8.140324,2.207471,-3.431484,6.538125,4.605221,-5.139716,-8.757635,-7.296842], dtype = "float32")#candidate|7046|(1008,)|const|float32
const_7047 = relay.const([9.810433,-3.555904,-0.803677,6.529894,-0.046613,-2.763541,-0.915849,-0.550948,-0.389599,1.346465,8.349279,-7.463846,-1.645688,-3.325878,6.124456,-7.385519,9.272409,-2.791194,9.763159,4.877936,-8.881535,0.177503,-1.444951,-3.362965,-0.457814,8.182117,1.836281,7.596612,-7.191131,7.118107,3.161722,6.812296,7.456857,5.493291,5.279464,-4.805654,-8.079360,1.396395,5.807720,6.964704,3.419773,1.572428,-5.237955,-6.156901,5.031183,4.164158,4.414249,1.692857,-0.572084,1.925483,5.810387,8.085457,-8.173762,-6.900301,-8.708161,1.613552,-7.328057,2.116159,0.402232,-4.029863,6.005444,0.955501,-5.997018,2.696937,7.341145,-1.091666,7.957458,-4.293300,-9.308912,6.034376,-5.617934,-0.222019,-2.583577,-8.264571,9.834278,-3.580269,-8.572819,-4.032154,-2.350355,5.070069,-9.432705,8.817105,-8.530104,6.534122,-3.389444,5.592720,6.465520,-1.931904,4.243880,3.086160,1.162633,-8.222287,-9.420894,-1.971730,-9.243881,-3.631643,7.398514,-8.320731,-9.875003,1.619127,3.717216,7.892641,-9.915179,-8.825464,-2.114321,9.834686,6.243781,2.588654,-5.361686,-1.075179,-8.483361,7.207331,-8.984911,0.391418,-4.569021,-1.216061,5.870595,-1.675136,1.245448,-3.027496,8.547457,1.517138,1.676845,-7.791644,-6.465581,-5.067204,9.151935,-2.211775,-7.547839,-7.654886,-8.216440,-7.590978,5.234665,-7.938040,0.098371,-1.040987,-0.692750,0.129778,9.604832,3.935988,-7.318559,-3.644559,6.662713,-1.493330,-7.388016,-9.776174,3.161306,-6.757429,-4.634361,5.341411,3.864760,-8.903345,7.079883,7.072564,5.870940,-4.457658,4.228610,4.749504,8.643863,-8.686076,7.282556,2.088326,1.283296,5.917368,-2.234694,5.987126,-3.948320,1.958220,4.986978,-2.203516,9.111233,-1.654881,3.835172,6.304980,9.528881,-7.135936,3.462177,1.871202,-5.286052,-2.665550,4.521044,-9.593636,4.165444,8.356676,3.538613,3.207945,-5.332633,9.886765,3.088146,6.864674,-8.711723,9.651001,0.910186,-3.354421,9.820590,-0.007393,-5.422973,8.794979,-8.426893,-2.152862,-6.701128,-2.939384,4.208783,9.140868,-3.176940,-3.506277,-5.520448,-3.537794,-4.069523,9.123424,1.319028,9.936117,3.472906,2.429046,8.497051,9.624207,0.211392,3.985540,6.462046,-0.792356,8.533287,-6.549368,-9.636099,5.730716,2.877058,6.797788,-7.897085,-3.116664,3.136276,5.779835,8.182391,-7.730348,-0.241850,7.618794,-5.799755,0.911883,-9.340067,-0.756957,3.760271,-6.651931,-8.917826,8.003529,-4.794792,-1.735808,-8.485537,-4.110379,-8.102956,-8.407334,-2.581540,-3.542304,7.072992,-2.365015,0.310855,0.693750,-2.872940,2.751013,7.556380,5.693996,-2.550974,0.909674,2.001870,-0.354517,-0.451662,-0.560414,6.891873,-8.314968,6.087700,-8.684762,9.388697,6.475645,8.405443,-8.220687,8.548817,-2.003457,-8.259916,-8.994727,-9.367686,9.265076,-8.194861,7.992178,5.058925,-2.471709,1.892200,7.429174,-5.173953,-0.283194,-1.804902,-6.094705,4.949347,6.953323,-9.388070,4.662667,1.130644,-6.354203,8.442098,8.677538,0.386047,0.685263,-3.942157,8.048744,5.346493,6.200288,-4.851070,9.790772,-5.154011,7.015443,5.542547,1.861960,-8.364786,-3.400210,-2.830065,-3.944432,7.254860,-2.974922,-9.085816,5.809582,9.180406,9.027594,-1.795390,9.147870,-9.328130,-3.986571,-4.948900,-3.981079,1.188311,-7.143493,-1.677447,5.560614,-6.245074,3.132351,9.425177,-7.387171,4.448395,-9.569827,-1.108380,1.509198,8.508476,-3.254856,8.223648,-5.068157,7.830179,-4.833284,3.972964,-5.883677,4.784444,-7.520820,-5.087551,-4.375297,9.160909,9.030770,-0.178769,-4.102098,-1.110389,8.905487,5.140672,-9.350647,-3.393052,-8.325982,-2.355573,3.310635,-1.011189,-2.597988,-1.143720,5.740868,-9.402371,-0.225867,5.059653,-9.416956,5.260749,9.275486,4.781996,-6.971966,5.692595,4.067286,1.285919,6.233650,-4.143781,-8.186258,-3.490790,-7.045495,-0.245457,-1.129118,0.201077,-1.292710,-8.656814,1.383478,3.146685,-5.675507,-4.899607,1.882593,-9.351357,-6.296453,-8.770097,-5.850864,-2.302164,2.737156,2.782072,-9.685792,-9.502980,3.659319,-2.570063,-9.745874,-8.320090,-3.592188,-4.496033,-4.420678,1.397513,-7.349992,2.750123,-1.626914,4.084931,5.525452,1.916434,-3.543778,-8.937538,5.618634,-8.918360,-0.091329,-1.705123,-3.586634,-5.882161,7.304149,9.168669,-8.280538,-7.613818,-3.143905,-7.569028,-6.686842,2.659651,-8.968729,9.511381,-3.133503,1.427816,-5.035962,-4.140200,4.769737,-9.627881,-3.096706,-2.607058,-4.931719,3.146984,-1.403314,-7.626151,-8.798889,9.306085,3.626481,-0.291029,4.876188,9.683861,6.683308,-3.819795,-4.557379,1.878063,-8.869721,1.627476,4.441836,7.218692,7.590353,-4.313226,4.203621,-5.126252,-1.086809,-4.185934,-2.614796,-3.538300,6.284270,-4.142684,3.544046,-2.826143,5.794745,-4.946202,6.661032,7.279194,-6.126253,-3.455550,9.411739,-3.247322,6.439385,2.483665,-1.225757,9.223702,-5.510642,-3.081505,9.723206,6.522217,-9.331256,4.387647,1.042735,-0.983097,5.285749,2.989643,7.463773,-3.037760,2.924634,9.702222,6.115080,6.119403,-0.122419,1.960304,7.637327,9.461746,7.340183,1.946163,9.659256,-9.359487,-9.422295,6.535620,4.498258,-9.240134,-7.629786,5.621833,-9.458885,8.509992,-6.241752,-5.556780,-5.028205,0.985096,6.962376,-7.321881,2.879679,5.789839,5.205362,6.937073,-2.586428,7.980665,5.886943,8.493306,8.224333,4.655333,5.515471,5.378574,2.892816,3.853011,7.955220,3.545250,-6.683440,-5.134658,2.825828,4.614189,0.709480,-1.836752,5.996386,-6.068727,2.852870,-3.989302,-8.278604,-1.357974,-2.424806,-7.483778,9.192165,-6.082055,-8.556470,7.565606,8.354142,0.265865,4.074875,6.312910,0.276402,-5.573068,3.480632,-0.003444,-9.354403,6.304871,-2.787860,2.460800,5.987627,-1.299312,-2.901533,-7.662059,-1.896813,9.244296,0.977456,-1.611251,-1.545025,0.861412,1.353749,1.416553,-1.430014,-8.488413,-1.165539,5.824838,-2.442038,1.604455,1.798413,-4.633115,-6.720018,-0.384167,-6.600999,-1.240922,1.622877,2.909567,4.322422,-5.902233,7.899190,2.709339,-9.008570,-7.855442,-9.269877,-9.168664,3.235963,3.052299,-9.159255,5.028417,-9.358520,0.850518,-3.313957,-2.098126,-6.552715,9.681552,8.896837,1.098924,5.333051,-9.819245,-8.096092,-3.291659,5.309571,6.783987,0.894260,1.838544,-0.152247,0.746705,4.152000,9.658304,-3.484291,3.856498,5.774834,-2.815786,-9.914167,-3.088633,2.808260,-0.454887,-5.693354,-8.409052,8.645946,1.412473,-8.610471,-6.725290,-1.392873,5.978352,-6.845325,-3.195659,-5.468614,1.708609,-9.946689,4.298358,-2.955160,-2.136597,1.181135,-1.328064,-1.623759,-1.480236,-8.338596,-3.617880,-0.548108,6.106279,7.651007,-0.467505,-6.657474,-9.987778,7.242827,-2.487796,-9.898688,-9.545961,1.537564,-0.628204,-0.220669,9.976465,7.965164,3.805568,1.978027,-6.889246,8.124289,-2.216326,-8.930422,-0.708783,-3.220903,4.103096,9.014553,-9.962864,-9.218263,2.288788,-1.431330,5.189430,-6.375512,3.469617,-3.180198,-2.050393,9.223645,3.177527,-8.004683,0.635492,8.099585,0.637876,2.719237,8.774723,-8.295350,-0.495577,8.165726,-5.603369,3.123498,-8.518413,9.743673,0.809023,3.157976,3.121913,-0.039185,5.865255,6.303074,-8.171675,-7.023454,3.960394,-6.719426,6.108614,4.813215,-6.743858,-8.611977,-9.984966,3.920902,-7.884424,9.531662,-1.130894,-5.028581,3.684611,-3.931507,-4.879271,1.060638,0.606159,-0.438683,-6.071632,-2.335335,-2.842690,3.671707,5.520257,-0.218857,6.292753,2.528225,0.207335,7.101131,6.568018,-2.324857,6.569852,1.915706,-4.563792,7.726995,-2.642173,1.323630,-2.713838,6.246120,6.388892,4.701719,3.534293,5.113183,2.607116,6.551355,-2.467240,-4.930120], dtype = "float64")#candidate|7047|(756,)|const|float64
var_7048 = relay.var("var_7048", dtype = "float64", shape = (135,))#candidate|7048|(135,)|var|float64
const_7049 = relay.const([[9.482051,-3.422302,2.624946,5.288126],[-0.813099,5.432782,-8.826861,7.152088],[0.076421,-1.146587,0.038694,-0.109363],[-1.247613,-9.334168,-0.880788,-7.956363],[4.653396,-9.714643,-8.886650,2.028401],[-3.898092,-4.596091,-1.414789,-4.448429],[-1.604559,2.390038,-1.620123,-4.197767],[0.203966,4.982674,-8.570573,1.800044],[3.961397,-7.707986,0.886519,-7.474102],[3.321541,-2.028557,-7.317200,1.828038],[4.215953,6.826466,-1.472668,6.822265],[-3.362974,2.209929,-7.056561,-7.256312],[-8.955058,3.587950,3.533648,-9.367427],[2.432079,-2.069398,0.013114,-6.791211],[-0.995973,-9.370554,4.630833,-4.040620],[-6.711179,-6.565058,-6.592852,-0.588703],[-6.658713,-3.865393,-2.841890,-1.965469],[-4.837698,0.338393,-0.687357,-9.627825],[6.339327,9.477969,-7.730324,9.924108],[0.316774,4.278642,-1.358258,-2.217497],[-5.724076,-8.186772,2.436443,-1.429647],[8.871729,8.813696,1.663497,-6.288327],[-7.803392,0.354948,1.500514,-3.241186],[1.829393,-6.791388,6.223234,-7.198446],[-0.398232,-6.561908,8.956668,6.044406],[8.879990,-6.059869,-5.273496,6.098405],[-6.378986,-0.295851,5.846470,-4.052023],[-3.628556,3.359701,4.584608,4.591183],[-0.602218,-1.904544,-6.320312,3.987377],[-3.995294,-3.770478,-2.951557,-9.638916],[7.873172,9.768845,6.554207,8.966623],[-8.411208,2.911359,-1.892417,4.630451],[0.594746,-5.514710,3.434192,9.544532],[2.784814,2.157491,3.053252,-4.331450],[-2.921761,-6.393404,2.648107,6.180602],[-9.321321,1.199307,-9.071412,4.828488],[-6.956192,7.382321,6.623919,-8.381380],[7.528755,3.666409,4.667854,1.997843],[8.578307,0.386341,0.696336,-3.526801]], dtype = "float32")#candidate|7049|(39, 4)|const|float32
call_7045 = relay.TupleGetItem(func_3656_call(relay.reshape(const_7046.astype('float32'), [9, 16, 7]), relay.reshape(const_7046.astype('float32'), [9, 16, 7]), relay.reshape(const_7047.astype('float64'), [756,]), relay.reshape(var_7048.astype('float64'), [135,]), relay.reshape(const_7046.astype('float32'), [9, 16, 7]), relay.reshape(const_7049.astype('float32'), [156,]), ), 6)
call_7050 = relay.TupleGetItem(func_3664_call(relay.reshape(const_7046.astype('float32'), [9, 16, 7]), relay.reshape(const_7046.astype('float32'), [9, 16, 7]), relay.reshape(const_7047.astype('float64'), [756,]), relay.reshape(var_7048.astype('float64'), [135,]), relay.reshape(const_7046.astype('float32'), [9, 16, 7]), relay.reshape(const_7049.astype('float32'), [156,]), ), 6)
output = relay.Tuple([call_7013,call_7018,const_7019,const_7020,call_7045,const_7046,const_7047,var_7048,const_7049,])
output2 = relay.Tuple([call_7014,call_7021,const_7019,const_7020,call_7050,const_7046,const_7047,var_7048,const_7049,])
func_7060 = relay.Function([var_7048,], output)
mod['func_7060'] = func_7060
mod = relay.transform.InferType()(mod)
mutated_mod['func_7060'] = func_7060
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7061 = relay.var("var_7061", dtype = "float64", shape = (135,))#candidate|7061|(135,)|var|float64
func_7060_call = mutated_mod.get_global_var('func_7060')
call_7062 = func_7060_call(var_7061)
output = call_7062
func_7063 = relay.Function([var_7061], output)
mutated_mod['func_7063'] = func_7063
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5295_call = mod.get_global_var('func_5295')
func_5296_call = mutated_mod.get_global_var('func_5296')
call_7120 = func_5295_call()
call_7121 = func_5295_call()
output = call_7120
output2 = call_7121
func_7124 = relay.Function([], output)
mod['func_7124'] = func_7124
mod = relay.transform.InferType()(mod)
mutated_mod['func_7124'] = func_7124
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7124_call = mutated_mod.get_global_var('func_7124')
call_7125 = func_7124_call()
output = call_7125
func_7126 = relay.Function([], output)
mutated_mod['func_7126'] = func_7126
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6331_call = mod.get_global_var('func_6331')
func_6333_call = mutated_mod.get_global_var('func_6333')
call_7147 = func_6331_call()
call_7148 = func_6331_call()
output = relay.Tuple([call_7147,])
output2 = relay.Tuple([call_7148,])
func_7151 = relay.Function([], output)
mod['func_7151'] = func_7151
mod = relay.transform.InferType()(mod)
mutated_mod['func_7151'] = func_7151
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7151_call = mutated_mod.get_global_var('func_7151')
call_7152 = func_7151_call()
output = call_7152
func_7153 = relay.Function([], output)
mutated_mod['func_7153'] = func_7153
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6695_call = mod.get_global_var('func_6695')
func_6696_call = mutated_mod.get_global_var('func_6696')
call_7222 = relay.TupleGetItem(func_6695_call(), 0)
call_7223 = relay.TupleGetItem(func_6696_call(), 0)
output = call_7222
output2 = call_7223
func_7227 = relay.Function([], output)
mod['func_7227'] = func_7227
mod = relay.transform.InferType()(mod)
mutated_mod['func_7227'] = func_7227
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7227_call = mutated_mod.get_global_var('func_7227')
call_7228 = func_7227_call()
output = call_7228
func_7229 = relay.Function([], output)
mutated_mod['func_7229'] = func_7229
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6304_call = mod.get_global_var('func_6304')
func_6305_call = mutated_mod.get_global_var('func_6305')
call_7260 = func_6304_call()
call_7261 = func_6304_call()
func_6261_call = mod.get_global_var('func_6261')
func_6262_call = mutated_mod.get_global_var('func_6262')
call_7266 = func_6261_call()
call_7267 = func_6261_call()
output = relay.Tuple([call_7260,call_7266,])
output2 = relay.Tuple([call_7261,call_7267,])
func_7278 = relay.Function([], output)
mod['func_7278'] = func_7278
mod = relay.transform.InferType()(mod)
mutated_mod['func_7278'] = func_7278
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7278_call = mutated_mod.get_global_var('func_7278')
call_7279 = func_7278_call()
output = call_7279
func_7280 = relay.Function([], output)
mutated_mod['func_7280'] = func_7280
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6474_call = mod.get_global_var('func_6474')
func_6476_call = mutated_mod.get_global_var('func_6476')
call_7363 = func_6474_call()
call_7364 = func_6474_call()
output = relay.Tuple([call_7363,])
output2 = relay.Tuple([call_7364,])
func_7367 = relay.Function([], output)
mod['func_7367'] = func_7367
mod = relay.transform.InferType()(mod)
mutated_mod['func_7367'] = func_7367
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7367_call = mutated_mod.get_global_var('func_7367')
call_7368 = func_7367_call()
output = call_7368
func_7369 = relay.Function([], output)
mutated_mod['func_7369'] = func_7369
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6615_call = mod.get_global_var('func_6615')
func_6616_call = mutated_mod.get_global_var('func_6616')
call_7370 = relay.TupleGetItem(func_6615_call(), 0)
call_7371 = relay.TupleGetItem(func_6616_call(), 0)
output = call_7370
output2 = call_7371
func_7372 = relay.Function([], output)
mod['func_7372'] = func_7372
mod = relay.transform.InferType()(mod)
mutated_mod['func_7372'] = func_7372
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7372_call = mutated_mod.get_global_var('func_7372')
call_7373 = func_7372_call()
output = call_7373
func_7374 = relay.Function([], output)
mutated_mod['func_7374'] = func_7374
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6768_call = mod.get_global_var('func_6768')
func_6770_call = mutated_mod.get_global_var('func_6770')
call_7396 = func_6768_call()
call_7397 = func_6768_call()
func_7227_call = mod.get_global_var('func_7227')
func_7229_call = mutated_mod.get_global_var('func_7229')
call_7402 = func_7227_call()
call_7403 = func_7227_call()
func_4894_call = mod.get_global_var('func_4894')
func_4895_call = mutated_mod.get_global_var('func_4895')
call_7404 = func_4894_call()
call_7405 = func_4894_call()
func_805_call = mod.get_global_var('func_805')
func_808_call = mutated_mod.get_global_var('func_808')
var_7413 = relay.var("var_7413", dtype = "uint32", shape = (16,))#candidate|7413|(16,)|var|uint32
call_7412 = relay.TupleGetItem(func_805_call(relay.reshape(var_7413.astype('uint32'), [1, 2, 8])), 0)
call_7414 = relay.TupleGetItem(func_808_call(relay.reshape(var_7413.astype('uint32'), [1, 2, 8])), 0)
output = relay.Tuple([call_7396,call_7402,call_7404,call_7412,var_7413,])
output2 = relay.Tuple([call_7397,call_7403,call_7405,call_7414,var_7413,])
func_7427 = relay.Function([var_7413,], output)
mod['func_7427'] = func_7427
mod = relay.transform.InferType()(mod)
mutated_mod['func_7427'] = func_7427
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7428 = relay.var("var_7428", dtype = "uint32", shape = (16,))#candidate|7428|(16,)|var|uint32
func_7427_call = mutated_mod.get_global_var('func_7427')
call_7429 = func_7427_call(var_7428)
output = call_7429
func_7430 = relay.Function([var_7428], output)
mutated_mod['func_7430'] = func_7430
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5639_call = mod.get_global_var('func_5639')
func_5640_call = mutated_mod.get_global_var('func_5640')
call_7503 = func_5639_call()
call_7504 = func_5639_call()
func_1484_call = mod.get_global_var('func_1484')
func_1487_call = mutated_mod.get_global_var('func_1487')
var_7507 = relay.var("var_7507", dtype = "float64", shape = (432,))#candidate|7507|(432,)|var|float64
call_7506 = relay.TupleGetItem(func_1484_call(relay.reshape(var_7507.astype('float64'), [3, 9, 16])), 0)
call_7508 = relay.TupleGetItem(func_1487_call(relay.reshape(var_7507.astype('float64'), [3, 9, 16])), 0)
output = relay.Tuple([call_7503,call_7506,var_7507,])
output2 = relay.Tuple([call_7504,call_7508,var_7507,])
func_7537 = relay.Function([var_7507,], output)
mod['func_7537'] = func_7537
mod = relay.transform.InferType()(mod)
mutated_mod['func_7537'] = func_7537
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7538 = relay.var("var_7538", dtype = "float64", shape = (432,))#candidate|7538|(432,)|var|float64
func_7537_call = mutated_mod.get_global_var('func_7537')
call_7539 = func_7537_call(var_7538)
output = call_7539
func_7540 = relay.Function([var_7538], output)
mutated_mod['func_7540'] = func_7540
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6615_call = mod.get_global_var('func_6615')
func_6616_call = mutated_mod.get_global_var('func_6616')
call_7609 = relay.TupleGetItem(func_6615_call(), 0)
call_7610 = relay.TupleGetItem(func_6616_call(), 0)
func_5804_call = mod.get_global_var('func_5804')
func_5806_call = mutated_mod.get_global_var('func_5806')
const_7618 = relay.const([6.273723,-8.377356,-9.753477,-6.655141,-8.996187,-7.830923,-7.234922,-8.997831,-7.815952,-8.793464,4.370072,1.401614,7.579349], dtype = "float64")#candidate|7618|(13,)|const|float64
call_7617 = func_5804_call(relay.reshape(const_7618.astype('float64'), [13, 1]))
call_7619 = func_5804_call(relay.reshape(const_7618.astype('float64'), [13, 1]))
output = relay.Tuple([call_7609,call_7617,const_7618,])
output2 = relay.Tuple([call_7610,call_7619,const_7618,])
func_7624 = relay.Function([], output)
mod['func_7624'] = func_7624
mod = relay.transform.InferType()(mod)
mutated_mod['func_7624'] = func_7624
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7624_call = mutated_mod.get_global_var('func_7624')
call_7625 = func_7624_call()
output = call_7625
func_7626 = relay.Function([], output)
mutated_mod['func_7626'] = func_7626
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5657_call = mod.get_global_var('func_5657')
func_5658_call = mutated_mod.get_global_var('func_5658')
call_7635 = func_5657_call()
call_7636 = func_5657_call()
func_5703_call = mod.get_global_var('func_5703')
func_5705_call = mutated_mod.get_global_var('func_5705')
call_7648 = relay.TupleGetItem(func_5703_call(), 0)
call_7649 = relay.TupleGetItem(func_5705_call(), 0)
func_4254_call = mod.get_global_var('func_4254')
func_4257_call = mutated_mod.get_global_var('func_4257')
var_7652 = relay.var("var_7652", dtype = "uint64", shape = (12, 66))#candidate|7652|(12, 66)|var|uint64
call_7651 = relay.TupleGetItem(func_4254_call(relay.reshape(var_7652.astype('uint64'), [9, 8, 11])), 2)
call_7653 = relay.TupleGetItem(func_4257_call(relay.reshape(var_7652.astype('uint64'), [9, 8, 11])), 2)
func_6231_call = mod.get_global_var('func_6231')
func_6233_call = mutated_mod.get_global_var('func_6233')
const_7669 = relay.const([True,True,True,False,True,False,False,False,True,True,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,False,False,True,False,False,False,False,False,False,True,True,True,False,True,False,False,True,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,True,True,False,True,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,True,True,False,True,False,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,False,False,True,False,False,False,False,True,True,True,False,False,False,False,False,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True,True,True,True,True,False,True,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,True,True,False,True,False,True,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,False,False,False,True,False,False,True,False,True,False,True,True,False,False,False,False,False,True,False,False,True,False,False,False,False,False,True,True,False,False,False,False,False,False,True,True,False,False,True,True,True,False,True,True,False,True,True,True,True,False,True,False,False,False,False,False,False,True,True,False,True,False,True,True,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,True,True,False,False,False,True,True,False,True,False,True,False,True,True,True,True,False,False,True,True,True,True,False,False,False,True,False,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,False,False,True,False,True,True,True,False,True,True,False,False,True,False,False,False,False,True,False,True,True,True,True,True,False,False,False,True,True,True,True,False,True,True,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True,False,True,False,False,True,True,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,True,False,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,True,False,True,False,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,False,False,False,False,True,True,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,False,True,False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,False,False,False,True,True,False,False,True,False,True,False,False,True,True,False,True,False,False,False,False,False,True,True,True,True,True,False,True,False,False,True,False,False,True,True,True,False,False,False,False,True,True,False,True,False,False,False,False,True,False,True,True,True,False,True,True,False,True,False,False,True,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,False,True,True,True,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,True,True,False,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,False,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,False,False,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,False,True,False,True,True,False,False,False,True,False,False,True,False,False,True,False,False,False,False,False,True,True,False,False,True,True,False,True,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,True,False,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,True,False,False,True,False,True,True,False,True,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,False,False,False,True,False,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,False,False,False,False,False,False,True,True,True,False,True,False,True,True,True,True,False,True,False,False,False,True,True,False,False,True,False,False,True,True,False,True,True,True,False,True,True,True,True,True,False,False,True,True,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,False,True,True,True,False,True,True,True,False,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True,True,False,False,True,False,True,False,True,False,False,False,True,False,True,False,False,False,True,False,False,False,False,True,False,True,False,False,False,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,False,True,False,False,True,False,True,True,False,False,True,False,False,True,True,False,False,False,True,True,True,False,True,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,False,False,False,True,False,False,False,False,True,False,False,False,True,True,True,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,True,True,True,True,True,True,True,True,True,False,True,False,False,False,True,False,False,False,False,False,True,True,False,False,True,False,False,False,False,True,True,True,True,False,True,False,True,False,True,True,True,False,True,True,False,False,True,True,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,True,False,False,True,True,True,True,True,False,False,False,True,True,False,True,True,True,True,True,False,False,False,True,True,False,True,True,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,False,False,False,True,True,True,False,True,False,True,False,False,True,True,False,False,True,True,True,True,True,False,True,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,True,True,True,False,False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,False,False,False,True,True,True,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,False,False,False,False,False,False,False,False,False,True,True,True,False,True,True,False,True,True,False,False,True,True,False,False,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,False,True,False,False,False,True,False,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,False,True,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,False,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,True,True,True,False,False,False,True,False,False,False,False,True,True,True,False,True,False,False,True,True,True,True,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,True,False,True,True,True,True,True,True,True,True,False,True,True,False,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,True,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,False,True,True,False,True,True,True,True,True,False,False,True,False,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,True,False,False,True,False,True,True,False,False,True,True,True,False,True,False,True,True,False,True,True,True,False,True,True], dtype = "bool")#candidate|7669|(1792,)|const|bool
call_7668 = func_6231_call(relay.reshape(const_7669.astype('bool'), [14, 16, 8]))
call_7670 = func_6231_call(relay.reshape(const_7669.astype('bool'), [14, 16, 8]))
bop_7673 = relay.floor_mod(call_7635.astype('float32'), relay.reshape(call_7648.astype('float32'), relay.shape_of(call_7635))) # shape=(1, 16, 8)
bop_7676 = relay.floor_mod(call_7636.astype('float32'), relay.reshape(call_7649.astype('float32'), relay.shape_of(call_7636))) # shape=(1, 16, 8)
var_7686 = relay.var("var_7686", dtype = "uint64", shape = (12, 66))#candidate|7686|(12, 66)|var|uint64
bop_7687 = relay.less(var_7652.astype('bool'), relay.reshape(var_7686.astype('bool'), relay.shape_of(var_7652))) # shape=(12, 66)
output = relay.Tuple([call_7651,call_7668,const_7669,bop_7673,bop_7687,])
output2 = relay.Tuple([call_7653,call_7670,const_7669,bop_7676,bop_7687,])
func_7691 = relay.Function([var_7652,var_7686,], output)
mod['func_7691'] = func_7691
mod = relay.transform.InferType()(mod)
var_7692 = relay.var("var_7692", dtype = "uint64", shape = (12, 66))#candidate|7692|(12, 66)|var|uint64
var_7693 = relay.var("var_7693", dtype = "uint64", shape = (12, 66))#candidate|7693|(12, 66)|var|uint64
output = func_7691(var_7692,var_7693,)
func_7694 = relay.Function([var_7692,var_7693,], output)
mutated_mod['func_7694'] = func_7694
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7278_call = mod.get_global_var('func_7278')
func_7280_call = mutated_mod.get_global_var('func_7280')
call_7707 = relay.TupleGetItem(func_7278_call(), 1)
call_7708 = relay.TupleGetItem(func_7280_call(), 1)
output = call_7707
output2 = call_7708
func_7716 = relay.Function([], output)
mod['func_7716'] = func_7716
mod = relay.transform.InferType()(mod)
output = func_7716()
func_7717 = relay.Function([], output)
mutated_mod['func_7717'] = func_7717
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7808 = relay.var("var_7808", dtype = "float32", shape = (15, 4, 13))#candidate|7808|(15, 4, 13)|var|float32
uop_7809 = relay.acos(var_7808.astype('float32')) # shape=(15, 4, 13)
output = relay.Tuple([uop_7809,])
output2 = relay.Tuple([uop_7809,])
func_7813 = relay.Function([var_7808,], output)
mod['func_7813'] = func_7813
mod = relay.transform.InferType()(mod)
var_7814 = relay.var("var_7814", dtype = "float32", shape = (15, 4, 13))#candidate|7814|(15, 4, 13)|var|float32
output = func_7813(var_7814)
func_7815 = relay.Function([var_7814], output)
mutated_mod['func_7815'] = func_7815
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6474_call = mod.get_global_var('func_6474')
func_6476_call = mutated_mod.get_global_var('func_6476')
call_7866 = func_6474_call()
call_7867 = func_6474_call()
func_2462_call = mod.get_global_var('func_2462')
func_2466_call = mutated_mod.get_global_var('func_2466')
const_7883 = relay.const([4.496447,-5.273787,-9.192380,0.622838,6.516301,-7.877681,-9.516560,8.311715,2.560242,0.338596,-2.431130,9.913075,-3.680133,-7.063777,-4.245645,-3.715846,-5.762518,-9.258766,-0.730615,-1.349407,4.203136,6.628953,-5.466866,8.291805,-0.808337,-8.508040,1.272471,0.190627,6.058777,8.201905,-7.060925,6.097528,-5.641331,9.705126,-7.784738,8.703961,-3.634814,2.116738,7.135534,-8.262231,-8.319950,-8.559719,4.207659,7.110699,4.386303,-8.914073,-5.643300,-3.416246,9.270262,7.903668,-8.781716,2.567737,8.183539,8.655424,-5.748501,-9.987873,-8.051317,-2.467443,-0.298431,-4.798048,2.186587,7.345885,4.985533,-1.574856,5.944466,-0.222735,-5.971316,-0.359451,-9.611719,3.562295,-2.822742,6.024988,-2.970276,-3.763552,4.855897,0.647902,8.220096,-9.075470,-1.123016,8.543684,-0.590037,0.431233,9.651228,-3.883284,7.752129,-3.009316,5.161022,2.774800,-3.796621,-5.416359,-7.259686,-5.688284,-2.004103,-9.756866,9.362270,-3.661025,8.383802,2.012956,-1.786506,3.392760,0.740328,7.584216,6.841616,-2.250598,-9.604101,-5.800683,-4.226838,-1.275914,1.481899,-5.962862,-5.302004,4.963313,-9.260291,-3.749543,-1.072555,4.710981,-5.927378,7.306969,5.173136,0.059174,-4.394144,-8.916188,-3.382929,-3.468269,-3.593406,-6.767817,9.165930,-0.158757,-9.879058,-1.537167,-5.970738,-2.762072,-7.498950,5.065925,-6.363023], dtype = "float64")#candidate|7883|(135,)|const|float64
const_7884 = relay.const([2.043533,-8.768913,-4.293731,-3.700786,6.825027,-2.562779,-3.354884,0.822859,-0.319565,-0.123500,-6.959792,-8.180091,-3.734880,-6.111847,0.709914,8.288769,5.445307,-5.574042,-8.450617,-3.860116,5.652701,-4.009599,-9.849163,-7.915701,1.296011,5.099476,-3.398154,1.692411,-1.235193,-1.133367,-0.914476,4.295433,-8.986794,-2.120857,-5.295382,-4.491160,0.489140,1.154986,-7.427325,-9.484794,-5.072214,6.284596,0.617317,4.872721,-0.738110,-4.640644,-8.601384,-2.464543,2.639999,8.598765,-5.085969,4.936127,-8.815484,8.740659,9.001219,7.371841,4.935348,-1.005787,5.784850,3.829106,7.023799,5.628753,9.842985,-6.253541,-5.455001,-5.076645,-7.933706,-0.015780,9.049613,8.424423,-6.422425,-3.094172,-2.610887,-7.673250,8.640172,5.313699,7.563162,-8.206851,9.695391,-3.748487,-9.351731,-9.176597,-7.747068,-3.029061,-4.601648,-9.551664,-9.220253,-9.120194,6.070985,-8.051060,-6.145764,-5.925558,-2.177828,-7.599375,2.675414,3.646097,-1.569314,-4.565465,3.861312,-5.473353,8.507510,-7.121678,8.731906,-8.221238,3.193051,1.155561,-2.632393,-0.703687,-9.864888,-2.771958,8.286209,-2.088171,7.137111,-3.931988,6.119162,-4.004227,-6.942250,-6.033832,-4.357374,-4.285522,0.537582,0.793795,3.318379,3.532772,0.344545,-4.616444,9.661333,-9.107604,3.768036,5.309118,5.271621,0.243153,-0.658879,9.477959,-3.276727,4.695732,-4.007892,-8.286757,-0.719106,3.744597,3.782854,-0.966517,-6.239030,-2.132687,0.630431,-0.952296,9.796674,-9.931459,2.813857,-1.735836,-6.182176,-9.493031,7.471124,-3.674480,-1.306719,5.325014,5.173241,-6.544900,-5.493605,-4.531675,7.230542,-3.114529,-6.346973,-5.783998,-7.671700,-2.151611,-8.969405,6.551261,1.346133,0.506635,-4.869842,2.878836,-7.811197,1.074915,-8.405394,9.101625,7.647670,6.099896,-1.378083,9.191845,-0.851508,2.911879,-5.693210,-1.589984,9.343128,7.127318,-3.883835,0.484277,9.744276,9.059945,-8.890442,7.853345,-2.817570,-6.316960,-9.525939,-7.433990,5.725739,-7.976237,-9.029932,6.776151,-6.227277,0.303179,5.179965,-4.555213,-1.663157,3.362918,-7.705095,-2.777164,5.947715,5.708446,-5.521067,-3.300995,-7.505777,-5.295680,-0.110691,-6.227693,-6.487992,9.358789,-0.796335,-4.154460,-6.656262,-2.060336,-2.857535,9.403652,8.352695,-5.386228,-0.387458,7.775382,2.296008,-5.518382,1.551824,-0.606653,-4.854152,2.182452,8.706763,4.009236,0.502970,-3.374515,-5.099033,1.170465,1.409126,-8.624757,0.706280,-1.363811,4.722712,-1.007894,9.069042,-9.707246,-2.365717,-6.581975,-8.788271,8.805800,7.366540,1.649179,-0.935848,7.804549,-9.793950,3.742757,1.399029,-6.771629,-1.669368,8.659445,-1.952916,-4.741495,-6.827588,-0.650020,-5.739631,-7.695950,-5.866465,-7.147219,3.773977,-2.685648,3.536184,4.374194,9.416161,0.504185,-3.935634,5.737483,-1.520506,8.864061,-2.645129,5.954692,-7.615123,2.274019,-9.657616,6.819788,8.772665,7.087715,6.146489,-0.855342,9.125002,2.590200,-9.093384,-3.665238,-7.193165,0.315937,4.148006,1.065809,8.465883,-1.583754,-0.285825,0.574178,9.850992,-1.834378,4.793949,1.133215,-3.161999,-8.092524,6.840144,-0.045140,-9.583621,9.596955,-7.281742,1.435531,0.833461,2.273019,0.324413,8.036288,-9.015589,-9.262880,-6.485392,-0.342380,-2.812757,-2.527039,7.922970,8.793342,-3.891046,1.518317,0.107296,-9.239292,0.122878,7.208854,-3.375777,4.093058,-8.217713,-5.479369,-1.533184,-0.710475,5.029566,-5.774581,1.376222,4.983454,-0.749306,-8.901901,7.364976,-0.107647,0.367810,-7.213287,1.593736,-4.085963,6.720912,-1.368053,8.484380,-2.521039,1.137750,9.294464,-5.952579,3.260774,8.997306,-8.184663,-7.357222,2.133739,-0.401138,-5.980240,-5.340800,-4.133191,2.291390,6.249726,8.963644,-3.534793,-8.673784,8.158210,-9.128868,-6.052279,-7.580714,-5.638171,6.133125,-4.392323], dtype = "float32")#candidate|7884|(378,)|const|float32
call_7882 = relay.TupleGetItem(func_2462_call(relay.reshape(const_7883.astype('float64'), [3, 9, 5]), relay.reshape(const_7884.astype('float32'), [378,]), relay.reshape(const_7883.astype('float64'), [3, 9, 5]), ), 4)
call_7885 = relay.TupleGetItem(func_2466_call(relay.reshape(const_7883.astype('float64'), [3, 9, 5]), relay.reshape(const_7884.astype('float32'), [378,]), relay.reshape(const_7883.astype('float64'), [3, 9, 5]), ), 4)
func_5657_call = mod.get_global_var('func_5657')
func_5658_call = mutated_mod.get_global_var('func_5658')
call_7887 = func_5657_call()
call_7888 = func_5657_call()
uop_7897 = relay.atan(call_7887.astype('float64')) # shape=(1, 16, 8)
uop_7899 = relay.atan(call_7888.astype('float64')) # shape=(1, 16, 8)
uop_7903 = relay.asinh(uop_7897.astype('float32')) # shape=(1, 16, 8)
uop_7905 = relay.asinh(uop_7899.astype('float32')) # shape=(1, 16, 8)
func_6199_call = mod.get_global_var('func_6199')
func_6202_call = mutated_mod.get_global_var('func_6202')
call_7914 = func_6199_call(relay.reshape(call_7866.astype('bool'), [1, 16, 8]))
call_7915 = func_6199_call(relay.reshape(call_7866.astype('bool'), [1, 16, 8]))
bop_7927 = relay.floor_divide(uop_7897.astype('float32'), relay.reshape(call_7866.astype('float32'), relay.shape_of(uop_7897))) # shape=(1, 16, 8)
bop_7930 = relay.floor_divide(uop_7899.astype('float32'), relay.reshape(call_7867.astype('float32'), relay.shape_of(uop_7899))) # shape=(1, 16, 8)
output = relay.Tuple([call_7882,const_7883,const_7884,uop_7903,call_7914,bop_7927,])
output2 = relay.Tuple([call_7885,const_7883,const_7884,uop_7905,call_7915,bop_7930,])
func_7932 = relay.Function([], output)
mod['func_7932'] = func_7932
mod = relay.transform.InferType()(mod)
mutated_mod['func_7932'] = func_7932
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7932_call = mutated_mod.get_global_var('func_7932')
call_7933 = func_7932_call()
output = call_7933
func_7934 = relay.Function([], output)
mutated_mod['func_7934'] = func_7934
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7124_call = mod.get_global_var('func_7124')
func_7126_call = mutated_mod.get_global_var('func_7126')
call_7967 = func_7124_call()
call_7968 = func_7124_call()
func_6304_call = mod.get_global_var('func_6304')
func_6305_call = mutated_mod.get_global_var('func_6305')
call_7970 = func_6304_call()
call_7971 = func_6304_call()
output = relay.Tuple([call_7967,call_7970,])
output2 = relay.Tuple([call_7968,call_7971,])
func_7989 = relay.Function([], output)
mod['func_7989'] = func_7989
mod = relay.transform.InferType()(mod)
mutated_mod['func_7989'] = func_7989
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7989_call = mutated_mod.get_global_var('func_7989')
call_7990 = func_7989_call()
output = call_7990
func_7991 = relay.Function([], output)
mutated_mod['func_7991'] = func_7991
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6331_call = mod.get_global_var('func_6331')
func_6333_call = mutated_mod.get_global_var('func_6333')
call_7992 = func_6331_call()
call_7993 = func_6331_call()
func_6977_call = mod.get_global_var('func_6977')
func_6980_call = mutated_mod.get_global_var('func_6980')
const_7997 = relay.const([-3,-7,-3,4,9,-7,8,-7,-7,7,10,2,3,-4,-3,4,-2,-5,-3,-2,2,3,5,4,-7,-7,-4,6,8,-10,8,7,6,-3,-10,9,-6,-2,2,-4,-1,-5,-9,-4,8,-10,-7,-8,-10,10,-8,1,-3,5,-3,6,10,-10,-4,-8,6,1,-8,6,2,7,5,3,5,7,7,-3,-7,-9,-5,3,6,7,-5,-1,7,6,-10,-1,-7,4,-2,-2,-9,-9,-8,8,-8,-10,-5,1,-1,-5,-4,-7,-5,-4,7,7,8,10,2,-2,10,5,-2,-9,-1,-5,1,5,-10,-4,-6,-3,-10,-10,1,-3,3,8,6,10,10,-4,5,8,10,-2,-6,3,-8,-8,-7,9,3,-7,3,-8,-1,5,-2,3,6,10,-10,9,8,-4,2,-4,1,4,9,6,-2,7,-5,-8,6,4,-3,-4,10,-5,-3,7,-2,-7,-1,-10,5,1,-10,2,8,-3,-9,-3,9,3,-9,-6,-9,2,6,-7,1,-3,-8,8,3,9,10,-2,2,-1,-6,-1,-9,-7,5,8,-3,-1,-5,6,-2,-9,9,-1,7,-3,8,7,7,2,1,1,10,2,-3,-5,-5,7,-8,-4,-2,-9,3,10,2,-5,4,7,-8,-9,-7,-5,-1,-6,-3,-3,9,7,-7,-3,1,-4,-4,8,9,-2,-4,-1,-9,3,9,-9,7,2,5,5,-5,-2,9,10,1,-6,-1,1,6,-2,-9,5,8,-10,-5,10,3,9,-4,-1,3,2,-6,3,-5,5,7,10,9,8,-6,-4,-10,2,-1,9,-2,-7,-1,10,-5,-2,7,8,3,-10,2,-7,-4,-6,-3,1,3,-4,6,2,1,4,5,3,-7,4,-4,2,9,-7,3,10,3,10,-9,5,-6,7,-10,-7,3,6,4,7,8,-8,1,-6,-1,6,-1,-10,-9,-6,9,-7,7,-10,-3,-4,1,1,9,6,6,-2,4,-1,8,3,-3,10,4,-2,-6,-8,-10,1,-6,1,-1,-8,4,-8,-1,2,1,-5,-1,-10,3,6,-6,-1,3,4,-5,-9,-4,-3,-7,-8,-6,-1,-7,-6,10,-4,-10,-9,-8,-7,5,-4,-2,-1,-2,5,-1,-9,-9,1,-8,6,-9,-2,-7,-2,6,1,-2,7,3,-6,-10,5,9,-9,-8,-8,7,5,-1,-6,10,-5,10,-8,3,7,8,-1,7,-7,-4,-3,-5,4,-5,2,-6,10,6,10,2,3,1,-9,5,-5,-1,9,-9,1,-1,-9,-10,6,-9,-7,6,-10,-7,5,-5,10,-1,1,2,-3,-6,2,3,4,-4,2,-5,7,3,4,4,-5,5,-4,9,1,-10,-1,-3,-5,-8,-9,1,-4,1,2,4,-2,-3,-7,2,10,-3,6,-8,4,-8,-8,10,5,2,9,-5,6,-5,-2,10,-10,-5,-10,-7,-8,9,8,-9,-1,10,-6,10,5,-4,-4,-1,1,3,8,8,-7,-5,6,-7,7,-8,-2,-7,-4,8,-7,-2,-4,2,5,9,4,-8,-9,9,10,-1,6,1,-8,7,7,-6,4,-4,-7,-2,8,3,-3,-3,2,9,-9,9,1,-7,-5,1,10,-10,-10,-9,-2,-6,-5,-2,-3,4,-3,-1,6,3,10,5,-9,8,9,10,8,-8,4,-9,-1,1,3,-8,-2,4,-5,4,6,-5,-9,-6,-2,-1,6,-5,2,-3,-10,6,10,-3,-9,-10,9,9,2,-9,4,1,2,7,4,1,-8,5,6,-4,-5,1,-10,3,8,6,-4,1,7,-1,9,6,-8,-7,8,-1,-6,6,5,-1,5,-6,-8,-6,5,5,-9,3,-1,6,-4,2,-1,7,2,-10,7,6,3,8,9,-3,-6,8,7,-7,-2,10,-9,-1,8,8,7,9,-3,-9,-2,-1,-9,6,-4,8,1,-9,-8,3,-2,-9,2,1,7,-8,-2,-9,-7,-8,7,-6,3,-3,6,5,5,-8,-4,-2,9,-1,-8,-2,5,-5,6,-3,7,-2,-1,2,2,3,-9,8,7,-8,10,-2,-2,7,10,-8,5,-1,-6,-2,-3,6,-2,-9,-2,5,-9,-6,6,10,5,-3,8,7,-7,4,-6,3,3,-8,-8,-8,2,7,-9,-3,5,-5,2,-6,-2,10,-1,7,-4,10,10,9,5,-9,3,9,10,10,9,-10,8,-1,2,2,5,-7,3,-8,-4,-3,10,6,7,1,-3,8,-4,10,-7,3,-6,10,6,6,-6,6,10,-8,-7,-4,4,2,1,4,-6,-1,-7,10,8,5,6,1,-5,-4,10,3,-9,9,-8,-9,10,-7,-2,10,4,3,-7,5,-5,-4,-6,-8,5,7,2,10,-8,9,-3,-10,-6,-6,-1,-5,-9,-1,10,-3,7,-10,8,1,6,-5,-8,-7,-10,-7,5,7,-5,-10,8,-1,3,-3,1,6,3,8,8,8,-10,1,1,9,8,2,-7,10,4,1,-7,-3,-2,-4,6,-10,-8,-2,-1,-4,4,-5,-7,-1,8,6,-10,-8,2,3,-3,-4,6,-10,9,-3,8,-2,-3,-7,4,8,4,6,-7,4,4,1,-6,-4,-4,5,-7,8,9,-10,-1,-9,-4,3,-6,1,6,7,-4,-4,1,2,-6,7,8,-10,-8,5,4,5,-6,-9,10,-4,-8,-5,-10,7,7,-3,5,-5,-2,7,10,-3,10,-9,-7,-7,1,-4,-10,9,8,4,5,8,-10,3,-9,-6,-8,9,8,-10,9,2,-8,-9,-2,10,10,7,3,10,6,-8,1,-10,5,-7,-6,4,-9,8,5,3,4,-5,-9,8,1,10,5,-10,-9,-5,-6,-9,-1,8,-7,-1,-10,9,-3,5,-4,5,-6,-8,-2,2,-1,2,-9,9,-9,6,-9,9,1,6,-10,5,-6,10,5,5,-2,1,5,-5,2,-4,-6,1,-8,3,7,-5,-10,-10,-7,-2,-10,-10,4,-1,-7,-7,1,-10,-4,8,-10,4,-8,-6,9,-5,2,-8,-1,5,4,-2,-8,4,7,3,7,-7,4,-1,1,6,3,2,-2,3,6,3,-8,-8,-10,-2,10,3,3,1,-2,-9,-10,7,7,8,-5,-9,-7,-8,8,6,-9,6,-3,-6,-5,-7,6,-6,6,-6,6,-4,2,2,9,-10,6,-10,4,-3,-3,-5,-4,1,9,-1,-1,-10,6,-3,-1,-5,10,6,-3,4,-9,4,1,5,1,3,-10,6,-4,-3,3,-1,-5,-10,6,-4,-2,8,2,-3,9,6,8,5,3,8,8,-3,-8,9,7,-9,-2,2,2,6,3,1,5,5,6,4,-7,-6,9], dtype = "int64")#candidate|7997|(1260,)|const|int64
call_7996 = relay.TupleGetItem(func_6977_call(relay.reshape(const_7997.astype('int64'), [9, 14, 10]), relay.reshape(const_7997.astype('int64'), [9, 14, 10]), ), 0)
call_7998 = relay.TupleGetItem(func_6980_call(relay.reshape(const_7997.astype('int64'), [9, 14, 10]), relay.reshape(const_7997.astype('int64'), [9, 14, 10]), ), 0)
output = relay.Tuple([call_7992,call_7996,const_7997,])
output2 = relay.Tuple([call_7993,call_7998,const_7997,])
func_8000 = relay.Function([], output)
mod['func_8000'] = func_8000
mod = relay.transform.InferType()(mod)
output = func_8000()
func_8001 = relay.Function([], output)
mutated_mod['func_8001'] = func_8001
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5888_call = mod.get_global_var('func_5888')
func_5889_call = mutated_mod.get_global_var('func_5889')
call_8020 = func_5888_call()
call_8021 = func_5888_call()
func_2585_call = mod.get_global_var('func_2585')
func_2587_call = mutated_mod.get_global_var('func_2587')
var_8031 = relay.var("var_8031", dtype = "float64", shape = (756,))#candidate|8031|(756,)|var|float64
call_8030 = func_2585_call(relay.reshape(var_8031.astype('float64'), [9, 7, 12]))
call_8032 = func_2585_call(relay.reshape(var_8031.astype('float64'), [9, 7, 12]))
bop_8036 = relay.power(var_8031.astype('float64'), relay.reshape(call_8030.astype('float64'), relay.shape_of(var_8031))) # shape=(756,)
bop_8039 = relay.power(var_8031.astype('float64'), relay.reshape(call_8032.astype('float64'), relay.shape_of(var_8031))) # shape=(756,)
func_3104_call = mod.get_global_var('func_3104')
func_3107_call = mutated_mod.get_global_var('func_3107')
var_8055 = relay.var("var_8055", dtype = "float32", shape = (2016,))#candidate|8055|(2016,)|var|float32
call_8054 = relay.TupleGetItem(func_3104_call(relay.reshape(var_8055.astype('float32'), [12, 12, 14])), 0)
call_8056 = relay.TupleGetItem(func_3107_call(relay.reshape(var_8055.astype('float32'), [12, 12, 14])), 0)
func_2462_call = mod.get_global_var('func_2462')
func_2466_call = mutated_mod.get_global_var('func_2466')
const_8077 = relay.const([-6.590643,9.543838,-1.061746,2.992787,-7.257847,-9.770270,-8.179215,-8.819615,-6.895977,6.947985,-5.985797,-4.895860,-5.767583,-9.184351,-3.488633,-8.546874,9.249329,-0.656708,-2.624334,0.296188,9.951158,6.466377,-8.573529,1.255221,-5.655807,-7.904402,-2.775710,7.632250,9.906322,9.220208,0.779857,-0.825940,9.646720,-3.877013,-4.862736,8.488644,-4.991130,-7.875329,-0.955992,1.743191,-9.691867,0.583760,-9.974476,6.189984,-6.778320,5.661856,6.480783,-3.668304,-4.883170,-7.839739,-4.003471,1.007816,-4.505679,3.015700,9.736850,-7.996238,0.235962,-9.227451,-0.159881,0.855407,-1.852799,-5.541851,-2.470561,3.574899,-2.829127,-4.827913,7.702476,6.209548,4.621090,-4.748082,5.743442,-0.569291,-2.338352,8.079027,1.397931,0.816261,7.336128,5.249419,-8.829758,7.825121,-1.743775,-4.018559,4.033340,-5.660466,-0.919867,6.934572,5.749807,-1.157372,-0.551333,-2.194289,-6.039536,-4.052515,1.551502,-7.585384,-6.391248,-1.782696,2.501964,-6.531339,-7.200868,5.198047,2.800054,2.660833,-2.070771,-4.049047,4.603136,-4.212645,-7.697516,1.733426,-6.910918,4.645344,4.273385,-7.730775,-3.413540,7.101977,4.591398,-2.832055,8.982000,0.029137,2.317226,2.019695,-8.492122,7.409008,-4.135553,-7.913760,-2.456008,2.343872,-3.656068,-1.718624,-7.958126,3.556377,-9.781297,-3.952588,3.875058,4.136877,7.865112], dtype = "float64")#candidate|8077|(135,)|const|float64
const_8078 = relay.const([-9.177906,-5.359193,-0.876888,-8.851659,-3.378084,2.617001,-4.188223,2.602714,1.991541,3.517654,8.261833,6.440592,0.210912,4.598115,-0.050078,4.709881,-6.069847,-2.364298,-6.572314,-8.298331,3.055336,2.106053,1.638562,3.706861,-4.176439,-1.997092,-8.754188,9.321135,-2.461409,-1.863035,3.982907,6.950858,0.535832,-4.526659,0.836490,1.360428,5.881627,-4.836054,9.955604,3.248110,-9.684858,7.884876,-5.594114,-3.434087,-8.779523,9.549906,1.893827,1.310754,-9.561972,-5.431003,9.510311,-9.793419,6.608223,3.825697,9.873599,-7.632205,4.690915,-0.414731,-7.682952,-5.706973,7.662446,-9.357173,0.780290,-2.951416,-1.345243,1.394606,-2.041623,-2.706834,-6.372118,-1.460093,-8.650603,6.264051,-5.514628,1.115757,-4.106919,9.986297,-8.158113,-4.800354,-0.546370,4.542512,-6.474600,-0.146516,1.859447,-5.277765,-7.747447,0.719157,9.479511,-7.456046,-4.124784,5.380405,-9.474013,-8.768838,-9.837096,-0.514569,3.272952,1.823017,-3.168626,-9.086896,-9.696369,1.443677,5.267542,-6.256393,3.239272,3.573777,-3.538883,-9.941061,9.489706,8.341674,-8.177699,-7.948655,-4.777339,9.060662,7.419031,-2.917566,-2.970025,1.549886,-4.244770,-2.980235,-1.721519,2.594644,-2.043251,3.952507,-0.893515,-0.842430,-7.145779,0.080084,-5.082909,1.140411,-5.174167,-0.410637,1.459926,6.980405,9.031145,7.068681,3.842141,-2.882308,5.282011,9.976134,1.535186,-5.568579,6.156746,-9.563855,-7.512149,3.236888,9.508157,4.262889,1.785214,-6.206739,-0.308693,3.794519,-9.779226,-8.999369,2.230180,3.269715,0.182584,5.580383,9.283254,-2.022272,7.961316,5.517355,8.294203,-3.787724,9.172110,1.878414,-2.130048,9.950807,1.512542,-2.744549,5.545745,0.868839,2.269194,3.571064,-0.406958,-8.107929,-4.980303,-6.087656,-2.306056,-6.544435,5.062387,-9.875234,-8.655803,-3.429550,6.917144,4.892600,-4.679516,1.430038,5.339014,6.412709,-4.299210,3.923251,6.504299,3.378384,-5.555396,4.831484,3.648488,-2.798859,7.049733,0.089031,6.646143,8.815924,9.212285,-7.641338,-2.473865,-6.717317,6.723131,7.506281,7.291116,0.635870,-2.632744,7.852019,-8.997488,-2.662118,-0.483999,-1.988564,-4.103396,-2.057831,-4.767567,-9.655455,-8.001612,9.705805,-1.346455,-5.569175,3.249253,-2.781137,-6.083092,-1.592295,3.568593,-4.458349,-2.269266,6.131389,-8.736620,3.894908,-0.662094,7.902024,-5.679393,0.209427,8.573129,0.273689,5.892956,9.924766,9.603209,-5.397951,-4.391403,7.210513,7.958770,6.539887,-9.524314,-0.735001,-7.376613,1.946983,-0.866252,4.677505,-8.986504,8.010200,-0.427923,3.780140,-1.590213,-4.882516,-7.958302,2.054495,6.213370,9.248559,3.628409,-8.814616,-1.235782,4.469147,-4.330045,-8.147275,2.345638,-4.678554,-5.987441,4.920417,3.732540,1.099278,6.643873,6.060189,8.189033,-6.181531,-0.042008,-3.990477,-9.506502,-9.186241,2.740594,1.789927,-2.899717,-6.121608,6.893391,4.732104,-3.568086,-9.286991,6.372895,-2.032415,8.573988,-9.841526,4.040583,-1.874165,-3.109921,2.711613,5.622781,-5.913782,-2.128205,5.470669,-5.727447,0.404062,1.380491,9.497955,3.923160,-5.675160,-7.391736,9.435669,8.028905,-4.657750,-1.824768,4.771516,-5.921846,1.816832,8.754523,5.435597,8.837339,-9.338212,-3.738085,9.241700,8.807214,-5.149694,-6.318818,3.986307,2.324110,8.372887,1.315847,-9.367322,-6.858713,5.668882,-4.494731,-6.489411,2.453600,-7.971254,-0.823268,1.483582,0.607436,9.121319,8.132767,-6.786455,-1.444294,-2.306105,-7.705755,-8.962980,-9.715977,-4.118466,-6.324476,-7.283685,7.775499,8.939934,3.607941,5.784996,6.732178,-3.489658,-3.718741,2.424333,0.694505,-1.974382,-8.266574,-0.910887,-9.397578,3.345543,4.131942,-6.833439,4.409240,-3.513940,6.942671,4.560604,1.938207,7.536251,-2.912397,-2.137627,9.900075,-3.511951,6.166688,-1.864362], dtype = "float32")#candidate|8078|(378,)|const|float32
call_8076 = relay.TupleGetItem(func_2462_call(relay.reshape(const_8077.astype('float64'), [3, 9, 5]), relay.reshape(const_8078.astype('float32'), [378,]), relay.reshape(const_8077.astype('float64'), [3, 9, 5]), ), 0)
call_8079 = relay.TupleGetItem(func_2466_call(relay.reshape(const_8077.astype('float64'), [3, 9, 5]), relay.reshape(const_8078.astype('float32'), [378,]), relay.reshape(const_8077.astype('float64'), [3, 9, 5]), ), 0)
func_896_call = mod.get_global_var('func_896')
func_899_call = mutated_mod.get_global_var('func_899')
var_8090 = relay.var("var_8090", dtype = "uint32", shape = (11, 154))#candidate|8090|(11, 154)|var|uint32
call_8089 = relay.TupleGetItem(func_896_call(relay.reshape(var_8090.astype('uint32'), [11, 14, 11]), relay.reshape(var_8090.astype('uint32'), [11, 14, 11]), ), 0)
call_8091 = relay.TupleGetItem(func_899_call(relay.reshape(var_8090.astype('uint32'), [11, 14, 11]), relay.reshape(var_8090.astype('uint32'), [11, 14, 11]), ), 0)
bop_8106 = relay.floor_mod(call_8054.astype('float64'), relay.reshape(var_8055.astype('float64'), relay.shape_of(call_8054))) # shape=(12, 12, 14)
bop_8109 = relay.floor_mod(call_8056.astype('float64'), relay.reshape(var_8055.astype('float64'), relay.shape_of(call_8056))) # shape=(12, 12, 14)
output = relay.Tuple([call_8020,bop_8036,call_8076,const_8077,const_8078,call_8089,var_8090,bop_8106,])
output2 = relay.Tuple([call_8021,bop_8039,call_8079,const_8077,const_8078,call_8091,var_8090,bop_8109,])
func_8120 = relay.Function([var_8031,var_8055,var_8090,], output)
mod['func_8120'] = func_8120
mod = relay.transform.InferType()(mod)
var_8121 = relay.var("var_8121", dtype = "float64", shape = (756,))#candidate|8121|(756,)|var|float64
var_8122 = relay.var("var_8122", dtype = "float32", shape = (2016,))#candidate|8122|(2016,)|var|float32
var_8123 = relay.var("var_8123", dtype = "uint32", shape = (11, 154))#candidate|8123|(11, 154)|var|uint32
output = func_8120(var_8121,var_8122,var_8123,)
func_8124 = relay.Function([var_8121,var_8122,var_8123,], output)
mutated_mod['func_8124'] = func_8124
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4943_call = mod.get_global_var('func_4943')
func_4945_call = mutated_mod.get_global_var('func_4945')
call_8156 = relay.TupleGetItem(func_4943_call(), 0)
call_8157 = relay.TupleGetItem(func_4945_call(), 0)
output = relay.Tuple([call_8156,])
output2 = relay.Tuple([call_8157,])
func_8158 = relay.Function([], output)
mod['func_8158'] = func_8158
mod = relay.transform.InferType()(mod)
mutated_mod['func_8158'] = func_8158
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8158_call = mutated_mod.get_global_var('func_8158')
call_8159 = func_8158_call()
output = call_8159
func_8160 = relay.Function([], output)
mutated_mod['func_8160'] = func_8160
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6239_call = mod.get_global_var('func_6239')
func_6240_call = mutated_mod.get_global_var('func_6240')
call_8182 = relay.TupleGetItem(func_6239_call(), 0)
call_8183 = relay.TupleGetItem(func_6240_call(), 0)
output = call_8182
output2 = call_8183
func_8184 = relay.Function([], output)
mod['func_8184'] = func_8184
mod = relay.transform.InferType()(mod)
mutated_mod['func_8184'] = func_8184
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8184_call = mutated_mod.get_global_var('func_8184')
call_8185 = func_8184_call()
output = call_8185
func_8186 = relay.Function([], output)
mutated_mod['func_8186'] = func_8186
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6331_call = mod.get_global_var('func_6331')
func_6333_call = mutated_mod.get_global_var('func_6333')
call_8199 = func_6331_call()
call_8200 = func_6331_call()
output = call_8199
output2 = call_8200
func_8226 = relay.Function([], output)
mod['func_8226'] = func_8226
mod = relay.transform.InferType()(mod)
output = func_8226()
func_8227 = relay.Function([], output)
mutated_mod['func_8227'] = func_8227
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7124_call = mod.get_global_var('func_7124')
func_7126_call = mutated_mod.get_global_var('func_7126')
call_8276 = func_7124_call()
call_8277 = func_7124_call()
func_5175_call = mod.get_global_var('func_5175')
func_5181_call = mutated_mod.get_global_var('func_5181')
const_8279 = relay.const([-1.621829,-8.965800,2.010887,-2.477372,6.500936,-6.303331,-6.122413,9.871603,-8.659322,1.793434,-0.245087,-5.051084,5.591987,6.114703,0.013877,-1.147583,-5.115630,0.685616,-0.177777,8.867169,3.212408,-4.232632,-7.861987,6.394285,1.405375,0.497381,-8.819062,1.438444,-8.037753,-7.157794,5.033487,4.485473,-2.722938,1.858008,3.472996,-4.419673,6.461891,-9.635685,4.207072,-5.342322,-6.841857,-5.809073,7.278284,3.083294,-5.555178,-9.815053,-4.843588,-7.390308,-0.865342,-7.552068,-4.491044,-8.790277,7.833382,6.169656,-7.556392,3.995322,8.867372,1.982596,6.420342,8.098519,3.975349,-8.424648,9.901426,-0.628889,-9.691881,0.710027,5.571122,-4.392872,-4.671797,7.621163,-8.977194,-6.102992,-4.740878,-5.322833,-4.839787,-2.500958,7.715009,0.755286,7.685688,-0.447219,-3.252609,-4.080475,-0.050451,-9.716633,-9.390981,5.366104,5.517904,-4.302087,-0.145151,8.500345,-9.944220,-6.088517,-1.350551,3.980441,0.573673,-3.307181,2.826622,4.477489,2.454357,2.935186,-6.638913,-8.152166,-1.481436,5.153926,-8.291468,3.322123,-7.359775,-8.883157,2.451676,-6.701123,-1.633121,3.621789,6.375461,8.860419,-4.052267,-5.652740,7.407153,-5.787333,-6.583990,-4.186684,1.774269,2.334648,7.952255,-0.390626,5.495413,1.847393,7.985753,-4.890533,-8.469528,-2.184885,-8.787410,2.060909,9.966668,7.417379,2.976346,-3.292316,6.365754,5.610315,-5.616494,1.930872,-6.299190,8.732410,6.393433,2.011442,8.596484,5.248738,-4.935444,4.426598,-6.274418,8.623566,4.315813,-5.424382,-2.827687,6.974037,-4.493992,-5.158205,-2.771139,-2.042516,5.162408,4.508498,2.320255,-1.972128,5.483013,-4.418080,-9.298833,3.178913,0.511416,-5.477786,0.145171,-9.637804,0.696982,9.147733,-4.389617,9.872519,0.122083,-3.964826,1.584539,-7.731363,2.215441,6.271818,7.604436,3.531315,-4.298070,-3.144299,9.850209,8.520641,8.363725,-8.940965,3.227864,-8.758587,-2.731163,5.159566,2.882600,-8.120783,-7.734396,4.305869,8.966980,6.824942,-8.899353,4.059709,-9.851487,-0.884938,9.160263,-1.197270,4.061377,6.407150,2.810896,9.375888,7.246742,7.649245,1.756656,1.189597,8.054719,7.717855,-5.242298,-3.416701,3.800693,-5.872605,4.398132,8.270741,0.699190,3.821033,-9.388273,-9.896394,-4.387287,6.319166,-2.228182,-8.855729,8.820120,0.223947,5.906863,4.215924,6.059595,4.958017,-7.260924,7.713780,-1.789398,-1.296624,1.108500,-6.753068,1.676289,-7.968701,-4.598609,3.634799,-5.365487,2.125628,-3.999420,-4.037798,-8.391882,8.305251,0.140332,9.990755,7.279266,-7.831315,-3.479306,-6.980008,-8.338138,5.014491,-3.108895,9.242786,9.029679,-7.237695,7.062324,4.626787,-4.238214,-6.952227,7.659235,7.337536,6.139989,-7.121545,-1.970854,2.457348,3.526169,0.412121,-0.730798,-5.990365,9.317276,0.668705,4.096500,8.138550,3.238894,5.933648,0.651823,3.157058,-6.177061,-1.885901,1.572682,-8.752734,-5.857469,-8.620251,-9.025070,-8.778337,6.124884,-3.169723,8.899166,-5.652937,7.171331,1.931271,0.619724,6.643556,-6.302770,-6.790116,-8.038075,-8.104355,1.085659,5.531571,6.710941,8.407601,0.870282,-4.702657,1.896410,-8.116839,-5.562007,3.583389,-7.823756,-4.862644,-2.496060,-2.916925,5.394033,1.362622,6.462097,-0.821181,7.992468,9.107259,7.360600,0.689541,5.048164,0.973167,3.370765,0.409320,7.504658,1.501362,-5.003358,-1.520402,-8.970472,-9.067883,-3.168539,9.757227,1.823863,2.483398,-4.531698,0.082269,-4.064588,3.747140,-8.328017,0.957255,-5.037980,8.049246,5.364840,-8.336040,-5.175022,8.283159,6.508890,-9.762737,-1.900232,0.279421,-0.230700,-1.884873,4.437451,-3.401543,-3.342187,-3.491775,-5.168731,1.605956,8.467370,-0.797851,7.364404,5.688630,-9.988398,4.958053,6.646081,9.707687,5.079847,-0.860864,7.936640,-3.907679,-6.134356,7.322344,4.408566,-7.531698,-8.736794,-1.731776,2.498397,3.844400,3.749150,-3.571744,0.106395,-9.453355,9.115949,-3.964605,5.822435,-1.232533,2.302456,5.878707,-4.042673,8.713277,-4.759957,-7.535247,7.989847,2.926760,-0.656168,7.572402,0.909830,4.941474,-0.369739,2.911384,-0.459482,-4.226593,9.086784,-1.360796,1.910957,3.388399,1.603384,6.381958,0.258070,9.317377,-7.037572,1.109455,-5.647435,-3.074446,-3.330698,2.675604,9.089389,-4.413267,3.056047,7.363450,7.799126,-6.543769,-5.650840,7.293361,-5.451656,-3.758409,-1.359756,-0.525734,-0.997625,8.991639,-5.292039,0.831582,-2.643231,4.526055,9.570876,7.765163,8.746827,2.982926,7.526531,5.112152,-7.677592,2.397798,7.728673,4.049010,-0.141638,2.497461,0.298785,6.018650,-8.640382,4.398361,6.859788,-0.819494,-2.577132,-4.055096,9.633075,6.356443,5.338206,-6.460994,-9.755729,-1.899544,-7.141959,-0.975624,2.191148,-5.830424,-5.335535,6.736690,-5.555704,-4.330441,8.482898,-3.994194,-5.271019,-7.841247,-0.385671,-3.865255,4.066990,-4.168471,-1.118402,0.390631,-6.385954,-9.270972,-2.248947,-9.964687,6.168787,3.220675,4.931135,1.650656,-4.765605,-7.525735,-7.360943,9.576337,9.835323,-5.200809,-3.532021,4.716359,8.646944,9.333640,9.251090,-8.113849,-7.654731,-5.026148,1.012602,3.132253,7.433120,3.762466,8.825993,9.126216,-1.154244,-3.633424,-8.421857,2.177967,2.189177,1.831336,-2.944102,-7.735849,8.232290,-2.827335,-8.979158,-0.154190,3.145799,-0.443891,3.235215,-6.068755,4.682417,-4.962040,-1.511804,3.829879,4.196980,3.948953,-2.071346,-7.034689,-7.632862,-6.026510,6.677686,-5.101973,-0.707873,0.700460,3.634095,6.473548,-5.313323,-6.510823,9.571375,2.925336,-3.929086,-8.110398,-0.838121,-8.921608,-6.252254,2.554250,-0.280725,-5.245460,-4.284778,-5.348268,9.708455,-9.094832,5.009036,1.942053,-7.255615,0.023548,3.136823,5.496985,2.965706,-1.144934,8.850887,5.263651,5.319494,-5.764178,1.144081,5.698255,9.788833,-2.424000,-4.683682,8.111199,-5.855800,8.489641,6.998593,7.093585,0.429992,-3.709523,-6.500761,-1.393775,8.737329,9.141199,0.093289,-5.887820,2.455367,2.579268,-0.403964,-3.602726,-2.314984,-7.162442,2.817323,-9.876513,1.142806,1.578869,-9.550431,7.611828,-1.354571,-2.105883,-4.171794,-9.917516,6.420201,3.160543,0.515976,8.501736,-3.695132,1.652066,2.499289,-1.657622,-9.288502,-6.920937,6.429279,-4.396921,4.077616,9.910038,0.646736,9.257963,5.143272,-5.283627,-7.798575,-7.579968,0.587992,-4.766219,5.056391,2.217347,-9.861219,-5.619244,-2.567348,-5.064013,6.385727,6.602147,4.939136,-6.602034,1.828414,6.990659,-7.771085,-6.165221,6.404625,-6.639756,0.019329,-0.490333,-1.434197,1.703293,-0.859438,-8.360101,0.068479,-1.382559,-0.204604,-3.312197,-5.427598,7.734421,9.382591,-6.630864,4.339128,-3.298211,4.226455,-3.952966,7.415797,-3.345777,9.785721,-1.878577,-9.924539,-5.449966,8.101335,-9.809154,-4.465619,-4.618539,-9.074310,6.054700,1.028323,-5.604314,-5.577203,-8.255420,5.134265,2.567542,2.934345,6.121186,9.550021,-5.262493,-2.359080,-5.047130,9.174890,6.872627,4.553304,5.440171,-8.343351,4.482601,-1.012813,-5.054222,-8.822369,3.847454,0.743430,4.191090,-8.414127,4.734736,1.503966,5.116107,-0.069007,-1.099471,7.204551,8.454962,0.098135,4.475565,-9.843763,2.065368,4.079509,7.284794,-0.393092,4.210886,-0.762676,3.053233,-8.864328,-9.249319,2.112033,7.894496,-3.589010,-5.201549,8.368176,-9.074180,-3.343499,9.146335,-4.241360,-1.999641,6.299135,5.483987,2.137443,9.174067,1.585564,-2.573786,-7.395999,-3.706037,-5.513447,3.512351,-4.170427,-3.101572,6.314892,-5.479624,-0.655149,-2.083756,6.498219,1.335903,7.260100,-6.307762,2.813338,1.189704,-0.785571,-3.928324,8.047161,0.015939,6.876755,-1.491389,1.399918,-0.022772,9.641776,4.129802,-9.840103,0.536988,-7.107397,2.611398,2.575653,3.274197,-5.485505,-0.029243,9.025498,9.457714,6.468530,-7.105494,-6.677218,-2.773360,4.471538,-9.119885,7.737609,3.133896,-5.595605,1.614009,-0.178384,4.187984,-0.874111,-4.467047,0.933735,8.558214,8.996786,3.631352,-8.437467,3.469453,-5.416169,-7.813149,-7.887474,6.192631,-2.680203,-0.468039,4.912366,7.301013,1.437802,-8.447871,6.505617,-6.841395,3.313480,-2.585886,5.067728,5.148908,-4.381703,4.542253,-2.201272,2.523503,8.819173,2.443054,5.363242,8.837650,-6.610857,-5.309906,6.646827,-6.386410,-1.309799,-5.813224,-4.618128,5.484237,4.062453,2.171110,1.791762,-7.335467,-7.425204,-6.326054,-2.965298,8.774956,3.848288,-9.967711,-9.296922,4.048456,-6.207921,-8.839335,0.182173,2.172638,4.822901,-8.665651,9.255365,0.797208,-8.627852,9.681299,5.825720,0.490818,-0.379195,7.469146,-9.988505,-6.638673,8.810190,-3.278334,-2.307697,6.416315,-5.412107,8.269993,7.971241,-0.764831,-2.343461,-9.545933,-8.125538,-2.424315,-6.002794,4.604577,-5.634726,6.466322,-2.394169,-7.422196,5.698716,-0.843655,-5.580910,1.045429,4.771708,7.507115,4.127096,7.328943,-5.805480,8.473914,-8.011397,7.225928,-8.862708,-4.670038,-6.386538,4.913677,-8.507917,-4.493465,5.059180,-6.699715,4.205785,-3.763921,-1.697878,-7.224370,2.659656,7.499649,-7.860192,-5.466927,7.079315,3.203670,-8.011248,0.211737,4.594812,6.185043,6.662586,3.823514,8.774125,5.119077,5.462151,-9.312427,0.349096,-8.520255,8.127664,-1.870587,6.756674,-5.377507,6.052596,2.974839,8.546480,9.420674,-5.106274,7.422397,7.012126,4.728388,-1.666729,3.966437,8.290290,1.241812,3.821243,1.585240,-3.543410,-4.003212,8.826224,-9.596443,-7.779560,3.201848,-5.608066,-8.268074,-9.643181,-4.673681,-1.280567,-3.037269,-5.985824,-3.071623,-5.993886,-1.549358,7.390444,-5.556963,-6.259149,-5.928194,-9.740558,-3.439552,-1.998941,-9.289061,-5.903827,-5.786421,2.166459,9.216462,-5.142851,7.779237,9.006998,0.684458,-1.210055,-3.982489,-8.322227,2.816194,-1.040539,9.559941,-1.476731,6.088263,1.412590,2.755704,4.868818,-0.353556,-3.772322,-5.753547,8.910214,2.457294,0.916413,3.785078,-7.869881,-1.276245,-9.151618,8.130104,-8.247707,4.472415,-4.480517,-9.103530,6.699453,-1.411395,-8.507107,-3.808055,-3.271015,4.812051,0.826087,-8.462827,5.089821,-7.204321,-0.890617,-9.168497,1.501073,-5.518050,5.847289,7.399715,4.229604,-3.598169,-4.073544,-2.765838,-7.549368,-7.711400,-5.295669,3.300053,8.835809,5.597821,-2.324131,-2.165346,1.155715,3.273927,2.881273,-8.679929,-9.300022,-2.415202,6.143428,-9.857678,-0.290868,7.556071,9.856936,-3.729229,-9.099478,-0.469518,-8.524113,-6.168740,-0.403074,-5.307630,-3.741915,-8.842025,8.172470,8.880194,4.258900,4.485170,-7.707777,-3.185220,0.932673,4.616911,-9.789573,-0.894565,-0.826195,2.662278,6.601975,9.764753,-3.667010,-7.415337,-0.583223,-4.428391,0.963518,-5.006809,-9.978796,8.494478,8.226961,8.717991,1.204385,-3.027645,1.080775,-2.959053,1.734554,-5.541620,6.387992,-4.120972,7.317778,-9.897681,-3.779723,-6.764372,5.894541,-2.056049,-1.206301,8.898650,-1.049230,-2.361546,8.399512,-9.090830,-5.308390,-3.082397,0.575010,5.622804,2.293298,-0.268862,-9.690756,-6.246440,-0.747435,3.078511,-0.749179,-7.362195,-6.927399,-0.362126,9.075172,9.938738,-1.656654,-3.698294,-5.212600,-0.529416,0.084680,1.093378,3.467788,2.439473,-4.866039,6.582562,2.826602,1.835794,-6.023939,1.448932,-4.253183,9.089977,-6.260496,6.813908,8.404616,-3.845883,-1.610221,2.413325,0.958268,8.223390,1.448971,2.447506,2.869738,-5.565671,-3.230767,4.071460,-2.992663,4.539159,-3.190574,7.380284,-5.218676,-3.615814,0.667815,2.611910,9.650303,0.208561,5.144164,1.176589,7.206415,-2.231533,-2.416808,1.383374,-8.722175,5.025743,2.193363,-5.134377,7.249139,-4.715393,-4.884879,0.585459,-6.426791,-8.409534,6.671676,-4.451696,-4.040946,2.922181,4.542988,8.719253,4.605645,-7.123340,-9.673302,7.156054,-1.208233,-1.323596,0.666106,-3.033096,-4.607131,8.277244,-1.379407,3.241047,-7.452646,3.866692,1.473581,3.462245,-1.456606,3.073786,-5.078123,-2.174882,-8.300793,-3.686164,-0.743197,4.621686,1.925808,9.488969,0.431936,-2.223305,4.401045,9.353222,8.207299,2.530447,-9.248458,-9.594129,4.222018,0.028846,3.446839,6.378061,-1.099348,6.873797,4.162462,-8.587766,9.426256,-6.793696,-1.160172,3.458960,-2.884668,0.963368,5.924388,-0.751080,-9.408780,-5.812481,6.730152,-4.190154,-9.339411,1.034628,-6.918127,-9.079057,9.369868,-0.288407,-1.267457,9.564290,-8.665498,-6.513102,-1.207284,4.702444,-1.028815,-1.847015,7.140773,-5.674680,-8.516913,-1.077329,6.459022,-8.307458,1.260990,-5.558644,-7.644846,5.590896,0.714950,-0.681111,-7.265390,-3.786196,7.122609,-7.096188,7.794364,7.194815,-6.997970,-0.616058,-4.591761,-5.924419,2.424784,-3.356101,-2.497586,5.021392,3.989092,5.039724,3.085791,-7.485623,1.886517,3.901002,8.238842,-8.237628,-2.129531,6.041587,-1.257332,9.668823,7.948832,9.114054,4.685249,9.683901,9.633828,-0.464523,-8.208198,7.996285,5.966496,7.826069,0.892799,-8.478510,-2.593656,5.352067,-6.851342,0.508148,-3.770647,7.588017,1.083995,-7.240936,-1.758566,4.108879,9.877642,-5.919281,6.591946,-3.898930,6.797077,9.137781,-0.136945,-9.036006,1.181577,-5.787904,8.245025,5.784925,-0.967571,8.359480,-7.124324,-2.680648,5.617333,-5.989054,-9.105765,-1.643737,8.314715,6.430420,-7.890393,-4.450863,9.366559,8.666375,3.861884,2.160355,-7.807567,-5.951964,3.756721,-2.144967,8.814814,-7.942184,9.299708,5.747054,-7.608389,5.464014,6.877124,-0.871457,-9.632289,9.241830,-4.509000,-6.875819,3.215013,9.022888,5.914800,6.184249,-5.472031,-8.863441,-7.367652,-0.087905,-0.132631,6.713083,-7.126176,3.817209,6.077762,-1.378835,6.154514,-8.787125,7.869516,-6.826282,-2.467007,1.262287,6.969191,-0.445221,0.744606,-2.582960,-8.862063,1.569090,7.809465,-4.707357,2.877629,-1.029492,8.093062,0.208094,-8.390435,3.283292,-0.186017,0.380274,-2.711921,6.671135,-2.481307,6.994442,-4.927554,7.754577,8.062736,-0.354739,-7.270910,-4.572722,-6.804150,-8.931155,9.408063,5.897710,-6.085191,8.387648,-7.328174,6.911536,-0.063590,-5.771274,8.865983,-3.172776,1.812240,-6.647747,8.230802,9.787114,-6.372072,-2.927479,0.497337,9.858522,-3.170064,-8.325349,-7.516674,7.603767,-9.504579,4.029527,-8.509176,4.566460,-6.756217,7.891592,-5.883725,6.975636,5.184770,-0.355818,3.393783,-2.178737,-5.650344,9.017225,-6.032791,4.176890,-4.618359,8.757736,-1.114421,-4.741244,-0.283765,-3.969516,-9.508626,9.911301,9.989162,-3.802605,-3.408985,-1.994572,7.352724,3.181951,-6.827852,-1.369337,2.541247,3.294603,-4.621197,-3.663146,-1.136531,6.120699,2.911993,-3.600210,-0.626275,0.324259,3.330595,6.662763,0.526743,3.855255,7.863079,-4.016494,0.100784,-1.176684,5.574201,-7.050171,4.619258,-7.599421,-3.005735,8.188007,9.094667,7.785888,-4.118253,8.580780,7.492795,-4.626367,8.722438,2.685750,-8.927548,-5.384559,9.283725,3.263974,5.290937,2.776201,-9.696375,-8.280150,3.701660,4.613089,1.690255,-3.208324,7.039190,1.061279,4.270136,9.382461,3.842597,-7.552761,-2.015461,6.031378,8.665203,4.373306,-8.962813,-0.812692,-8.483662,4.243578,-5.823258,-2.341302,-3.156824,-1.091927,8.000772,-1.192730,-7.491048,7.729176,-0.069362,-2.305559,1.477818,-5.213187,9.608131,3.393147,-9.990688,2.501604,-4.645455,-9.162500,-9.044916,7.408194,-3.365701,-8.925277,-2.358447,0.820307,-7.275864,-6.896049,5.499887,9.519786,8.629406,-0.555596,-7.604351,1.319692,-4.149856,2.339309,-6.230842,-1.151953,-7.465302,1.850817,-9.144951,-8.981693,-6.845249,-5.093225,6.335079,4.283640,-8.949401,-5.142190,9.138365,-8.078666,6.420771,-1.795802,-1.890188,-2.049593,8.998827,9.669636,-9.351705,6.527417,-1.875161,-9.840071,1.970538,4.413816,-9.298654,-4.062099,2.448280,4.442969,5.154904,-2.305497,-9.588748,-0.484746,6.857077,5.538509,8.177598,-4.615452,-1.917793,3.877483,-5.626920,0.018908,-6.741444,1.718178,-6.439082,-6.281331,-3.605827,3.361696,7.405800,3.685177,7.074253,-0.796821,6.268558,3.818669,-6.296592,9.784052,1.029554,0.877735,9.468515,2.000364,0.912763,4.574621,-2.383752,-6.484895,-0.082472,-4.958340,-3.518276,3.966217,-7.232122,9.511626,8.552079,1.043297,0.385554,6.028511,2.203950,5.576521,-4.701740,0.479684,6.286903,2.610163,6.918144,-4.359740,-5.876510,1.175295,-2.329959,9.996298,6.878023,-0.569826,3.149903,3.628780,-7.352109,0.814258,8.350046,0.197760,-2.811749,8.456671,7.447941,6.726177,0.615320,-0.265232,6.790798,0.752539,-5.282569,-7.040025,5.434055,5.341939,-3.562781,2.255376,8.093558,-6.048717,2.892918,4.424412,0.289497,-2.999492,3.475502,-0.463495,1.774037,3.525909,1.445306,4.373327,-4.268702,-4.571999,-6.643273,-4.812528,2.311499,5.151213,-2.842674,2.072587,-3.276511,-8.769886,-2.680875,-6.079737,4.655096,1.384943,4.482919,1.747881,8.282019,-8.413458,1.035333,9.822488,-2.523718,4.114831,0.566992,-0.614263,3.001039,7.892938,-4.533272,8.886630,-5.105725,-8.098244,2.764385,9.977389,-0.215146,-5.472318,-9.697043,-5.156675,1.460986,-2.932323,-1.175908,-4.283103,3.624428,7.635058,5.809875,3.126029,2.131391,-4.475410,-9.735690,-8.754249,9.873502,-9.046108,-1.382582,-6.431383,5.555062,1.265472,-7.657200,1.089581,7.063871,2.301531,3.633309,-3.305606,-2.963094,8.160962,-4.361184,8.367367,4.247262,-0.224345,-4.723676,8.214250,7.218618,9.277819,-8.398227,8.439460,7.322565,-4.427877,-8.098517,-8.435310,7.722326,1.825391,9.930396,-7.504120,-3.608326,-6.757909,9.777633,-5.187707,-7.949633,-5.950685,-1.284483,7.378263,-4.307871,-9.415239,-8.301947,-4.516610,9.595168,-2.066085,-4.781514,9.267362,9.459203,-1.410431,6.325968,2.991738,-6.316732,-1.009616,7.508625,9.246895,7.847270,-7.301589,-5.263616,-9.547454,-3.624604,-6.323626,2.652193,-4.260161,5.386953,4.865948,6.032384,7.045498,1.170467,8.040709,9.754596,-5.695932,-0.968964,-9.908892,1.105034,-3.790437,9.085390,5.992458,-8.643130,6.040389,-7.058241,-0.409650,5.469637,6.693665,2.267797,-8.022268,3.467314,-6.989085,8.042641,-3.111462,5.503214,2.693635,6.105269,8.226660,-3.638050,-9.630694,3.223647,-7.706314,-9.529433,7.894652,-6.758235,-0.127944,8.640188,-8.463455,2.500456,2.431508,2.036723,-7.613073,7.733888,5.898721,-6.146206,-1.729265,-9.686800,6.407739,8.066497,1.171735,-9.184363,3.233605,-7.099028,-4.823155,1.137999,-7.424275,-4.529857,4.842301,-0.178292,7.338851,-9.979439,-5.683865,8.537015,2.599809,8.543269,-0.267035,-4.593425,1.069662,4.910077,7.413818,7.526149,-9.284314,-6.074738,-3.477326,-2.706583,3.384912,4.223572,5.926411,5.416926,2.195717,4.021514,-5.196627,-8.420109,-4.059839,-1.818339,-7.720463,0.911311,1.987650,-9.179607,-3.677308,-0.484094,-4.450110,-4.565759,-0.453000,-5.957215,-4.032636,0.572542,-8.018050,-0.858675,-5.439356,-6.157559,-9.998664,2.164425,7.362524,6.067122,-5.433600,1.090446,-4.864874,-4.422662,-9.957494,-1.848792,4.148865,7.420904,8.144477,-1.956405,-4.643355,-3.515081,1.841154,5.461704,-0.584786,-9.734320,-3.681273,8.673241,5.564898,4.550298,-8.046550,-9.898800,8.343560,5.295193,3.617119,-9.389506,-7.188117,8.267449,-6.249398,-6.787390,9.017006,6.201900,2.809455,-0.406723,9.552530,-1.574464,-8.169677,4.092194,-2.958510,-5.878587,-2.721636,-7.682867,-5.404819,-2.460533,-6.456708,5.305961,-1.899772,4.886263,0.387387,-4.499452,5.145596,-0.429714,-4.052370,0.907842,4.431280,-2.708360,1.742154,-1.106075,-3.897227], dtype = "float64")#candidate|8279|(1920,)|const|float64
var_8280 = relay.var("var_8280", dtype = "float64", shape = (32,))#candidate|8280|(32,)|var|float64
const_8281 = relay.const([-2.176540,-9.568400,4.873708,3.643924,8.395671,5.584342,-6.159001,0.440918,-8.181132,7.744417,-7.021794,-1.710099,-9.163487,-1.181283,9.948541,-5.029461,-0.795710,-3.423578,-8.267317,3.537278,1.475898,6.073305,0.724842,0.220826,6.247759,2.948344,-7.248600,-7.010183,-5.682209,-4.736937,-7.476717,4.713539,-6.702165,-4.055980,7.732939,-2.461712,-5.180087,-8.579889,-4.438136,-3.227303,5.540510,6.002231,3.770473,-2.906891,-3.976673,4.815105,-8.543033,8.067637,-0.697122,7.993694,-8.688811,3.883597,7.739742,-6.141395,7.464097,5.997040,-8.339784,-1.052924,5.160780,8.553996,-2.269509,-7.222909,2.936370,5.818228,-9.021331,5.593174,-3.329929,0.905484,0.592581,-4.717942,-1.155389,4.651439,-4.174188,-5.818713,-5.087200,-5.637863,-3.418660,4.831163,-4.137241,-4.803350,-5.236903,3.210814,-7.380436,-3.313904,6.111747,-4.907714,8.405127,-3.689218,5.670798,7.113963,3.112408,-0.760057,-8.588020,8.208614,-0.551436,9.281558,-4.126410,-5.816951,-8.689036,-4.627489,7.564361,9.171093,-5.421984,-4.951841,9.522487,0.376868,8.610997,-3.673983,-8.146690,6.201982,2.048307,4.811142,0.439633,-1.788566,-4.105857,7.631235,7.596204,-2.228045,0.226621,-1.182479,-5.930534,7.118928,7.835800,-4.504651,0.886971,4.038194,-2.322099,-2.053165,-3.153754,9.378812,9.363770,-3.890489,-6.819517,-5.272480,3.458195,-4.809803,7.343727,-6.700834,2.033032,-4.856561,-6.528990,-5.919447,-3.842261,-8.207633,6.321381,0.002438,8.920074,-2.968306,8.863649,3.289773,7.534170,-5.159409,3.824199,5.501096,1.578086,2.461683,0.182652,4.095959,5.355438,-9.641659,0.231595,6.461063,6.206440,-7.013802,3.989614,-3.399238,4.591135,5.941078,1.908780,-3.345417,-9.454731,-6.240406,8.936569,5.947755,1.139296,7.824714,9.970361,1.203758,-1.696231,4.360769,6.409198,-0.577483,8.731759,9.623748,9.391463,4.797330,-6.892024,6.040905,1.581381,-2.675730,5.478637,-9.953182,-3.117826,7.446304,1.843015,-2.587293,-0.829297,-8.087075,-7.543709,-1.597690,1.798119,5.389651,4.465299,4.398478,8.973818,-4.345576,2.138767,-0.897086,-3.960698,2.789340,-4.737117,9.410868,-6.525608,-5.912363,7.326303,-8.519720,1.928466,-2.795382,7.437906,2.582487,6.958319,5.906428,-1.812597,1.248293,4.871176,7.881697,-0.422577,9.335966,-1.626292,-8.242577,-1.986207,-5.184586,-9.152318,3.642966,-8.364433,7.451498,-3.443775,-6.415241,-4.349056,2.267716,-0.179402,2.401622,2.616363,-2.465403,7.263792,-5.467181,6.942651,0.776575,3.227840,5.020252,0.766678,-8.770744,3.640120,0.179640,-2.466678,-8.553831,4.851991,1.116378,-0.158845,-0.082591,-1.092232,4.556981,6.753525,-9.975726,3.076733,-6.565827,-8.149297,-4.480009,6.599539,4.124994,9.908488,2.003593,3.750930,9.818925,-8.862779,8.606683,-2.675859,-1.199030,2.420038,7.998434,4.366186,-9.189998,-3.647408,5.072597,-3.834582,0.510574,-4.796482,-6.904971,9.555340,3.031963,2.173338,0.020058,-5.485547,0.781625,-9.678103,-4.474589,-4.974484,9.267958,-8.726602,-5.185403,4.900559,-3.718301,-2.940252,6.221089,-0.579091,6.413499,-5.574172,-4.980195,0.173903,-7.704725,-4.342563,8.940059,4.060432,0.536112,5.631107,-5.136948,6.974255,4.790021,6.457413,5.395843,1.081021,4.248244,8.904728,-0.864716,0.258009,-0.808505,-9.559739,-9.116250,-1.051289,8.501499,-8.841366,-0.309082,-5.254454,9.619060,2.270140,1.806779,-8.378220,-9.729171,-0.790353,-6.204292,6.672250,2.584991,-2.702464,-9.633265,9.249539,-6.611101,0.661963,7.122221,-8.472970,-6.243391,-1.824695,8.230394,-5.935455,-0.011384,-3.989345,6.597704,-4.082692,0.041945,-6.019743,4.466534,0.113505,2.911946,6.555516,-3.690522,-0.932951,5.867934,8.875991,3.044465,-7.888054,-6.216495,-2.239953,-5.823789,6.261336,8.877742,8.142751,8.301798,-9.342325,-5.397469,-2.916272,-0.809476,7.150531,9.514548,-9.668899,-3.489580,-6.269441,1.176433,-4.747452,9.918335,-2.768711,-0.802239,-7.791092,-8.565190,-7.601632,-6.296151,-4.436857,9.449721,-8.310602,-2.290657,8.047771,0.839593,1.536357,-7.662570,-1.744349,5.725678,-4.456528,0.210880,-1.373448,-9.178049,-8.260329,1.420703,3.453652,-8.166635,1.864692,-0.349281,7.042027,-7.826841,-0.786733,8.439878,3.856066,9.984367,-4.339667,-8.693175,5.242124,9.327208,2.876719,-0.983767,-0.557865,-6.281168,6.419975,-1.501394,-7.805658,1.813968,-3.328544,8.863591,-2.873757,0.652908,3.622620,2.455137,-3.990781,-7.381377,2.493950,-2.526578,3.819042,9.371692,3.398912,-7.820849,-4.174707,0.253470,-5.691075,-1.224061,2.384262,2.938372,2.742765,2.650563,4.763093,2.670937,-9.663614,-1.367992,-8.552225,-8.703525,-2.332805,4.247577,9.037277,1.752700,-5.436792,-9.946724,3.152418,-2.903729,-8.313162,6.867248,-7.735743,-6.773993,-6.051268,-4.083549,-6.953159,4.341535,8.133752,7.354578,7.020479,-1.862273,5.307703,7.274016,-6.240767,3.613601,-6.034015,8.756096,-5.828906,3.253358,-6.192328,9.256119,4.916740,2.801467,-8.391576,0.977183,5.122733,2.140788,-7.461323,-8.376078,-9.799484,9.745033,-4.618806,7.959324,-7.931153,6.947826,8.460991,1.911661,6.373916,2.223107,2.996083,3.942263,9.699181,0.191070,-7.126586,-6.908067,-3.503580,5.382662,-6.495272,4.814085,3.210429,-7.701431,5.693740,1.920329,-7.882707,-1.601871,8.785405,5.811500,-3.711665,-0.618630,-2.727380,-9.891526,-4.131611,7.211200,-5.608841,9.620492,2.130877,-5.767782,9.799975,-4.217175,7.215779,-5.740135,-3.492579,7.331929,-0.239083,6.338649,-7.243735,7.767447,2.062163,-5.658699,3.818675,-5.404599,7.888624,-9.202089,-6.479107,-8.544347,8.101388,4.475560,-9.501249,1.116174,-8.028730,3.053732,-4.897360,-8.823383,8.660142,2.004586,-7.276683,-7.081355,5.963018,4.734083,0.714675,0.828167,-6.936953,-0.479521,6.588912,1.454371,4.593433,-2.214523,-7.873124,4.518365,7.652071,-6.266011,-4.432198,1.714660,7.960943,-9.242381,7.701546,-0.266888,-2.204875,-7.349866,-3.591447,8.375057,6.376982,7.094153,-9.107980,4.547143,2.459700,-7.612182,-3.346902,9.342250,-9.007283,-7.982168,5.998036,8.100828,-0.390700,1.556291,7.814668,-7.458880,7.062817,-8.997247,-7.438988,9.736805,-1.321842,-4.650181,-2.089623,-9.847790,6.142581,-4.926488,3.780370,-1.637784,5.064782,-4.590882,-1.089862,7.840271,-1.619090,-7.957614,-6.154646,3.234787,3.173253,5.151239,7.816983,-6.681393,1.557208,-5.440563,-3.006532,-9.027757,-2.778451,-5.445722,9.314790,-4.463879,-1.656009,-3.856494,3.418268,9.541703,6.379484,-0.622137,-7.466189,7.260202,6.260465,4.327987,-7.290991,0.813513,-9.407519,-3.713431,-5.081837,-4.615845,3.827094,8.266053,-5.990539,8.298350,6.491857,-7.055655,-7.516646,2.948384,1.678935,9.838023,-8.458576,7.399817,-6.734538,-8.320752,-8.856690,7.755965,-1.538306,-4.826775,0.449107,-9.027242,8.975853,9.907276,2.164759,4.889941,4.273227,-3.041815,-0.997221,-4.922423,4.338598,2.831507,7.527550,0.056910,7.577266,-3.837519,2.563711,5.523264,-9.969025,-7.595527,-5.444898,-0.187745,-5.764586,2.625009,-4.026708,-6.815383,1.899683,-3.859375,-5.537648,-2.593295,3.463144,5.925656,6.134310,-3.852598,6.964114,3.420961,-0.572244,2.660901,7.929329,7.119013,-9.782131,0.390520,0.418225,2.251231,-9.101856,1.257970,-7.806120,-9.461589,-4.338809,8.995848,-0.345839,1.252547,1.088988,1.026551,6.529500,-8.928867,-2.121074,7.575487,1.140584,-6.586659,-3.147305,-7.245450,-6.573616,7.285756,1.992460,-1.346288,5.259557,-4.219330,-0.072341,4.501077,9.471326,2.009071,-4.980954,4.271117,3.522204,5.788919,-2.170082,5.498804,-1.581461,9.011717,6.702253,2.079106,5.140581,6.357780,-7.780343,1.925705,4.796882,6.645085,-3.064416,4.846924,-2.953986,2.451419,-8.470144,0.178301,2.447304,-8.924118,-4.476425,-4.764741,-0.950850,0.160222,-7.949197,-2.377680,-5.262325,5.341716,-3.916937,-6.279651,2.219342,7.932457,-6.027663,4.194519,3.067615,1.977971,1.573771,8.117421,0.448288,-0.443814,-6.502612,7.467461,4.319126,2.224690,-9.592638,-7.493393,8.657379,7.822451,9.644119,-5.555968,4.467203,-0.356824,5.480050,-7.030878,8.509182,-6.786407,4.971036,-4.248621,4.480609,-6.710949,3.173689,7.474645,7.027694,4.977541,6.669393,4.012837,1.158414,-4.939832,-6.479075,8.291614,1.375548,0.415001,-9.414572,3.765951,4.095122,8.781949,6.472773,7.236914,0.275042,0.047080,-6.536695,4.005048,-9.237754,-3.452127,-4.749261,-2.136116,-5.906550,-5.201131,9.802477,-3.250809,-9.241395,-2.771201,-3.198984,-9.414711,-1.224991,8.886484,-6.002871,-4.627122,-7.196137,4.122739,-4.236927,-9.767147,4.518953,6.895033,1.450248,9.968483,8.498889,3.643014,-7.919890,-5.475052,2.646072,7.825447,-4.949948,-6.603791,4.649635,-0.475358,-2.000930,-5.867347,9.455808,-9.836158,4.784209,-7.821513,7.066614,-0.486517,3.764469,-8.263627,-3.317331,0.723819,6.755490,9.326353,0.628493,2.260303,8.892116,-0.247923,0.196280,6.350823,-9.947413,-2.930813,7.567020,5.726958,5.114490,6.229260,-6.772751,-9.031298,-8.477395,-8.189107,1.997472,9.516650,4.830659,-6.094413,6.462909,9.185484,3.409609,1.131675,-0.728727,-3.401699,2.866269,-9.328809,-6.023713,6.038651,-0.142087,-7.090921,6.001788,-6.044142,4.240241,-5.597505,-5.718978,3.004854,7.907272,-7.795061,7.025496,6.531058,-6.744727,-8.689543,-9.307448,-2.652137,7.387645,7.201811,-1.359214,0.879846,-4.387608,-9.846705,2.174173,-0.213207,5.253104,7.216392,8.318817,3.287493,-2.612854,-5.997884,8.042868,5.474303,-1.580438,-3.057153,3.667295,-4.990826,9.224015,-3.523876,-9.875871,7.047606,-5.755603,6.105127,4.117756,6.079199,-5.614507,-3.558439,-6.692896,0.849082,-7.078928,-6.148948,5.083523,7.380531,1.621692,-6.007062,4.729426,3.470644,-9.543065,5.047098,8.227432,3.194573,9.171457,-9.453114,5.204194,-4.788484,2.953353,6.715967,8.167022,9.384273,9.297329,4.372467,5.200944,-9.856298,8.089471,9.627487,-4.826077,-4.022028,-9.792291,-0.187593,-5.174642,-7.833621,5.455863,4.355506,-3.377845,0.052556,-5.512899,-3.430311,-6.164105,1.928172,6.251826,-5.194627,7.401310,0.066398,0.663731,6.447938,-3.394800,1.095801,-1.514818,-5.771588,3.533987,-7.004418,-6.851785,7.324818,7.227687,-9.022319,1.131761,-2.528212,-6.231658,5.733738,1.248037,3.552576,-8.458745,1.633727,4.645988,5.822075,-7.209033,-6.252586,0.982236,0.615799,-7.559943,9.989963,-6.388416,-6.913724,9.392894,5.701605,4.377519,-9.190776,3.300197,-9.347384,7.953639,-4.938091,6.854707,3.477268,-3.278957,7.059682,-6.934381,5.755072,-0.825824,1.920694,9.446818,9.572062,-6.420427,-3.093372,1.999953,-4.053561,-0.277443,-1.701457,-3.089091,-9.296146,-0.266164,1.238957,-4.005540,-7.029527,4.812487,-7.883350,-8.931330,9.519186,7.694621,-5.454985,-2.598421,-7.255158,6.621529,-0.176526,-5.388645,7.390093,-1.240980,1.786433,0.835019,7.987758,-6.562768,7.831788,8.190764,9.541877], dtype = "float32")#candidate|8281|(1080,)|const|float32
var_8282 = relay.var("var_8282", dtype = "float32", shape = (378,))#candidate|8282|(378,)|var|float32
call_8278 = relay.TupleGetItem(func_5175_call(relay.reshape(const_8279.astype('float64'), [15, 16, 8]), relay.reshape(var_8280.astype('float64'), [32,]), relay.reshape(const_8281.astype('float32'), [1080,]), relay.reshape(var_8282.astype('float32'), [378,]), ), 1)
call_8283 = relay.TupleGetItem(func_5181_call(relay.reshape(const_8279.astype('float64'), [15, 16, 8]), relay.reshape(var_8280.astype('float64'), [32,]), relay.reshape(const_8281.astype('float32'), [1080,]), relay.reshape(var_8282.astype('float32'), [378,]), ), 1)
bop_8303 = relay.equal(call_8276.astype('bool'), call_8278.astype('bool')) # shape=(15, 16, 8)
bop_8306 = relay.equal(call_8277.astype('bool'), call_8283.astype('bool')) # shape=(15, 16, 8)
output = relay.Tuple([const_8279,var_8280,const_8281,var_8282,bop_8303,])
output2 = relay.Tuple([const_8279,var_8280,const_8281,var_8282,bop_8306,])
func_8329 = relay.Function([var_8280,var_8282,], output)
mod['func_8329'] = func_8329
mod = relay.transform.InferType()(mod)
var_8330 = relay.var("var_8330", dtype = "float64", shape = (32,))#candidate|8330|(32,)|var|float64
var_8331 = relay.var("var_8331", dtype = "float32", shape = (378,))#candidate|8331|(378,)|var|float32
output = func_8329(var_8330,var_8331,)
func_8332 = relay.Function([var_8330,var_8331,], output)
mutated_mod['func_8332'] = func_8332
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8184_call = mod.get_global_var('func_8184')
func_8186_call = mutated_mod.get_global_var('func_8186')
call_8375 = func_8184_call()
call_8376 = func_8184_call()
const_8378 = relay.const([[[False,False,False,True,True,True,False,False],[False,False,True,True,True,False,False,True],[False,True,False,False,False,True,False,True],[False,True,True,True,False,False,False,False],[True,False,True,False,False,True,False,False],[False,True,False,True,False,False,True,False],[True,True,True,True,False,True,False,False],[False,True,False,False,False,False,True,True],[False,False,True,False,False,True,True,False],[False,True,True,False,True,False,True,False],[True,False,True,False,True,True,False,False],[True,False,False,True,False,True,False,True],[False,True,True,False,False,False,False,False],[True,True,True,False,False,False,False,True],[False,True,True,True,True,False,True,False],[False,False,True,True,True,True,False,True]],[[False,True,True,False,False,True,False,True],[True,True,False,True,True,False,False,True],[False,False,True,True,False,False,True,False],[False,False,True,False,True,True,True,True],[True,True,True,True,False,True,False,True],[True,False,False,False,True,True,False,True],[True,True,False,True,True,True,True,False],[True,True,False,False,False,True,True,True],[False,False,False,True,True,True,False,False],[True,True,True,False,False,True,True,True],[False,True,False,True,False,True,True,True],[False,True,True,True,True,False,False,True],[False,True,False,False,False,True,False,True],[False,True,False,False,False,True,True,False],[True,True,False,True,False,True,True,True],[True,False,False,False,True,False,True,True]],[[True,False,True,True,True,False,True,True],[True,True,True,False,False,False,False,True],[True,False,True,True,False,False,False,True],[False,False,True,True,True,False,True,False],[False,False,False,True,False,True,False,False],[False,True,False,False,True,False,False,False],[True,True,False,True,True,False,False,True],[True,True,True,False,True,False,False,False],[False,False,True,True,True,False,True,True],[True,True,False,True,True,False,True,False],[True,True,True,False,False,True,True,True],[False,False,True,False,False,True,False,True],[False,True,False,True,True,True,True,True],[False,True,False,True,True,True,False,False],[True,True,False,True,True,True,False,True],[False,True,True,False,False,True,True,False]],[[True,True,False,False,False,True,True,False],[False,True,False,True,True,False,True,False],[True,True,True,False,False,True,False,False],[False,True,True,False,True,False,True,False],[False,True,False,False,False,False,True,False],[True,True,True,False,True,False,False,False],[True,True,True,True,False,True,False,False],[False,True,True,True,True,False,True,True],[True,False,False,True,False,True,True,True],[False,False,False,True,False,False,True,True],[False,False,False,False,True,False,True,False],[True,False,True,True,False,True,False,True],[True,False,False,True,True,True,False,True],[True,False,False,True,True,False,False,True],[False,False,True,False,True,False,False,False],[False,True,True,False,False,False,True,True]]], dtype = "bool")#candidate|8378|(4, 16, 8)|const|bool
bop_8379 = relay.right_shift(call_8375.astype('int8'), const_8378.astype('int8')) # shape=(4, 16, 8)
bop_8382 = relay.right_shift(call_8376.astype('int8'), const_8378.astype('int8')) # shape=(4, 16, 8)
output = relay.Tuple([bop_8379,])
output2 = relay.Tuple([bop_8382,])
func_8397 = relay.Function([], output)
mod['func_8397'] = func_8397
mod = relay.transform.InferType()(mod)
output = func_8397()
func_8398 = relay.Function([], output)
mutated_mod['func_8398'] = func_8398
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6331_call = mod.get_global_var('func_6331')
func_6333_call = mutated_mod.get_global_var('func_6333')
call_8436 = func_6331_call()
call_8437 = func_6331_call()
func_7060_call = mod.get_global_var('func_7060')
func_7063_call = mutated_mod.get_global_var('func_7063')
var_8439 = relay.var("var_8439", dtype = "float64", shape = (3, 45))#candidate|8439|(3, 45)|var|float64
call_8438 = relay.TupleGetItem(func_7060_call(relay.reshape(var_8439.astype('float64'), [135,])), 6)
call_8440 = relay.TupleGetItem(func_7063_call(relay.reshape(var_8439.astype('float64'), [135,])), 6)
var_8444 = relay.var("var_8444", dtype = "float64", shape = (3, 45))#candidate|8444|(3, 45)|var|float64
bop_8445 = relay.divide(var_8439.astype('float64'), relay.reshape(var_8444.astype('float64'), relay.shape_of(var_8439))) # shape=(3, 45)
output = relay.Tuple([call_8436,call_8438,bop_8445,])
output2 = relay.Tuple([call_8437,call_8440,bop_8445,])
func_8464 = relay.Function([var_8439,var_8444,], output)
mod['func_8464'] = func_8464
mod = relay.transform.InferType()(mod)
var_8465 = relay.var("var_8465", dtype = "float64", shape = (3, 45))#candidate|8465|(3, 45)|var|float64
var_8466 = relay.var("var_8466", dtype = "float64", shape = (3, 45))#candidate|8466|(3, 45)|var|float64
output = func_8464(var_8465,var_8466,)
func_8467 = relay.Function([var_8465,var_8466,], output)
mutated_mod['func_8467'] = func_8467
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6667_call = mod.get_global_var('func_6667')
func_6669_call = mutated_mod.get_global_var('func_6669')
call_8496 = relay.TupleGetItem(func_6667_call(), 0)
call_8497 = relay.TupleGetItem(func_6669_call(), 0)
output = relay.Tuple([call_8496,])
output2 = relay.Tuple([call_8497,])
func_8505 = relay.Function([], output)
mod['func_8505'] = func_8505
mod = relay.transform.InferType()(mod)
mutated_mod['func_8505'] = func_8505
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8505_call = mutated_mod.get_global_var('func_8505')
call_8506 = func_8505_call()
output = call_8506
func_8507 = relay.Function([], output)
mutated_mod['func_8507'] = func_8507
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7624_call = mod.get_global_var('func_7624')
func_7626_call = mutated_mod.get_global_var('func_7626')
call_8528 = relay.TupleGetItem(func_7624_call(), 1)
call_8529 = relay.TupleGetItem(func_7626_call(), 1)
output = relay.Tuple([call_8528,])
output2 = relay.Tuple([call_8529,])
func_8551 = relay.Function([], output)
mod['func_8551'] = func_8551
mod = relay.transform.InferType()(mod)
output = func_8551()
func_8552 = relay.Function([], output)
mutated_mod['func_8552'] = func_8552
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8558 = relay.var("var_8558", dtype = "bool", shape = (11, 8, 6))#candidate|8558|(11, 8, 6)|var|bool
var_8559 = relay.var("var_8559", dtype = "bool", shape = (11, 8, 6))#candidate|8559|(11, 8, 6)|var|bool
bop_8560 = relay.logical_and(var_8558.astype('bool'), relay.reshape(var_8559.astype('bool'), relay.shape_of(var_8558))) # shape=(11, 8, 6)
func_6667_call = mod.get_global_var('func_6667')
func_6669_call = mutated_mod.get_global_var('func_6669')
call_8568 = relay.TupleGetItem(func_6667_call(), 0)
call_8569 = relay.TupleGetItem(func_6669_call(), 0)
func_7278_call = mod.get_global_var('func_7278')
func_7280_call = mutated_mod.get_global_var('func_7280')
call_8572 = relay.TupleGetItem(func_7278_call(), 0)
call_8573 = relay.TupleGetItem(func_7280_call(), 0)
func_5844_call = mod.get_global_var('func_5844')
func_5846_call = mutated_mod.get_global_var('func_5846')
call_8582 = relay.TupleGetItem(func_5844_call(), 0)
call_8583 = relay.TupleGetItem(func_5846_call(), 0)
bop_8588 = relay.subtract(call_8582.astype('float32'), relay.reshape(call_8572.astype('float32'), relay.shape_of(call_8582))) # shape=(1, 16, 8)
bop_8591 = relay.subtract(call_8583.astype('float32'), relay.reshape(call_8573.astype('float32'), relay.shape_of(call_8583))) # shape=(1, 16, 8)
const_8594 = relay.const([[[True,True,True,True,False,False],[False,True,True,True,False,False],[False,False,False,False,True,True],[True,False,False,True,True,False],[True,True,True,True,True,False],[True,True,False,False,False,False],[False,False,True,True,True,True],[True,False,False,False,False,True]],[[True,True,True,True,False,False],[True,True,True,True,False,True],[True,True,False,True,True,False],[False,False,False,True,True,False],[True,True,False,True,True,False],[False,False,True,True,True,False],[True,False,True,False,True,False],[True,True,True,True,False,True]],[[True,False,True,False,False,False],[False,True,True,False,False,False],[False,False,False,True,True,True],[True,False,False,True,False,True],[True,False,False,False,True,True],[True,True,True,False,True,True],[True,True,False,False,True,False],[True,True,False,True,False,True]],[[True,False,True,True,True,False],[False,False,False,True,False,True],[False,False,False,True,False,True],[True,True,False,True,False,True],[False,True,False,False,False,True],[False,True,True,True,False,False],[True,True,False,True,False,False],[True,False,False,True,True,True]],[[True,False,False,True,False,False],[True,False,True,True,False,False],[False,False,True,True,False,False],[True,True,True,True,True,True],[False,False,True,False,True,False],[True,False,True,False,False,True],[False,True,True,False,False,True],[False,True,False,True,False,False]],[[True,False,True,False,True,False],[True,True,False,False,False,False],[True,True,False,False,True,False],[True,False,True,False,False,False],[True,False,True,True,True,True],[True,True,True,True,True,True],[True,True,False,False,True,False],[False,False,False,False,False,True]],[[True,True,True,False,True,True],[False,True,True,True,False,True],[True,False,False,False,True,True],[True,False,False,False,False,False],[False,False,False,False,True,True],[False,False,False,True,False,False],[True,True,True,False,False,True],[True,True,True,True,False,False]],[[True,True,True,True,True,True],[True,False,False,False,False,True],[True,False,True,True,False,True],[True,True,False,False,True,True],[False,True,False,True,False,False],[False,True,False,True,True,True],[False,False,True,False,False,False],[True,True,False,False,True,False]],[[False,False,True,False,True,True],[True,True,False,False,False,False],[False,False,False,False,True,True],[False,False,True,True,False,False],[True,False,True,False,False,False],[False,False,True,False,True,False],[True,False,True,True,False,True],[True,True,False,True,True,True]],[[False,True,True,False,True,False],[False,False,False,True,False,False],[False,True,True,True,True,False],[True,False,False,False,True,True],[True,False,False,True,False,True],[True,False,True,False,False,False],[False,False,False,False,False,True],[True,False,False,False,True,True]],[[False,False,True,False,False,False],[True,True,False,True,True,False],[True,False,True,False,False,True],[False,True,False,False,True,False],[True,False,False,True,False,True],[False,False,True,True,True,True],[True,False,False,False,False,True],[False,True,True,True,True,False]]], dtype = "bool")#candidate|8594|(11, 8, 6)|const|bool
bop_8595 = relay.logical_xor(bop_8560.astype('uint64'), relay.reshape(const_8594.astype('uint64'), relay.shape_of(bop_8560))) # shape=(11, 8, 6)
output = relay.Tuple([call_8568,bop_8588,bop_8595,])
output2 = relay.Tuple([call_8569,bop_8591,bop_8595,])
func_8605 = relay.Function([var_8558,var_8559,], output)
mod['func_8605'] = func_8605
mod = relay.transform.InferType()(mod)
mutated_mod['func_8605'] = func_8605
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8605_call = mutated_mod.get_global_var('func_8605')
var_8607 = relay.var("var_8607", dtype = "bool", shape = (11, 8, 6))#candidate|8607|(11, 8, 6)|var|bool
var_8608 = relay.var("var_8608", dtype = "bool", shape = (11, 8, 6))#candidate|8608|(11, 8, 6)|var|bool
call_8606 = func_8605_call(var_8607,var_8608,)
output = call_8606
func_8609 = relay.Function([var_8607,var_8608,], output)
mutated_mod['func_8609'] = func_8609
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7151_call = mod.get_global_var('func_7151')
func_7153_call = mutated_mod.get_global_var('func_7153')
call_8621 = relay.TupleGetItem(func_7151_call(), 0)
call_8622 = relay.TupleGetItem(func_7153_call(), 0)
func_4894_call = mod.get_global_var('func_4894')
func_4895_call = mutated_mod.get_global_var('func_4895')
call_8625 = func_4894_call()
call_8626 = func_4894_call()
func_2585_call = mod.get_global_var('func_2585')
func_2587_call = mutated_mod.get_global_var('func_2587')
var_8633 = relay.var("var_8633", dtype = "float64", shape = (756,))#candidate|8633|(756,)|var|float64
call_8632 = func_2585_call(relay.reshape(var_8633.astype('float64'), [9, 7, 12]))
call_8634 = func_2585_call(relay.reshape(var_8633.astype('float64'), [9, 7, 12]))
output = relay.Tuple([call_8621,call_8625,call_8632,var_8633,])
output2 = relay.Tuple([call_8622,call_8626,call_8634,var_8633,])
func_8635 = relay.Function([var_8633,], output)
mod['func_8635'] = func_8635
mod = relay.transform.InferType()(mod)
mutated_mod['func_8635'] = func_8635
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8636 = relay.var("var_8636", dtype = "float64", shape = (756,))#candidate|8636|(756,)|var|float64
func_8635_call = mutated_mod.get_global_var('func_8635')
call_8637 = func_8635_call(var_8636)
output = call_8637
func_8638 = relay.Function([var_8636], output)
mutated_mod['func_8638'] = func_8638
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5295_call = mod.get_global_var('func_5295')
func_5296_call = mutated_mod.get_global_var('func_5296')
call_8683 = func_5295_call()
call_8684 = func_5295_call()
var_8689 = relay.var("var_8689", dtype = "bool", shape = (12, 16, 8))#candidate|8689|(12, 16, 8)|var|bool
bop_8690 = relay.not_equal(call_8683.astype('bool'), var_8689.astype('bool')) # shape=(12, 16, 8)
bop_8693 = relay.not_equal(call_8684.astype('bool'), var_8689.astype('bool')) # shape=(12, 16, 8)
func_4943_call = mod.get_global_var('func_4943')
func_4945_call = mutated_mod.get_global_var('func_4945')
call_8694 = relay.TupleGetItem(func_4943_call(), 0)
call_8695 = relay.TupleGetItem(func_4945_call(), 0)
bop_8697 = relay.logical_or(bop_8690.astype('bool'), call_8694.astype('bool')) # shape=(12, 16, 8)
bop_8700 = relay.logical_or(bop_8693.astype('bool'), call_8695.astype('bool')) # shape=(12, 16, 8)
func_6231_call = mod.get_global_var('func_6231')
func_6233_call = mutated_mod.get_global_var('func_6233')
const_8707 = relay.const([[False,True,False,True,True,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,True,False,False,True,True,False,False,False,True,True,True,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,True,True,False,False,True,False,True,True,True,True,True,True,False,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,True,True,False,False,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,False,True,False,False,True,True,True,True,True,True,False,False,False,True,True,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,False,True,False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,True,False,False,False,False,True,True,True,False,True,False,True,False,False,True,False,True,True,True,True,False,True,False,False,False,False,False,False,True,True,True,True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,True,True,False,True,False,False,False,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,True,False,True,False,False,False,True,True,True,False,False,True,True,True,False,False,False,False,False,True,True,True,False,False,False,False,False,False,True,True,False,False,False,True,False,False,False,True,True,True,False,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,True,True,True,True,True,False,True,True,True,False,True,True,True,False,True,True,False,False,True,True,True,False,False,False,False,True,True,False,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,True,True,True,False,True,False,True,False,False,False,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,True,True,True,False,True,True,True,False,True,False,True,False,False,False,False,False,True,False,False,False,True,True,True,False,False,True,False,False,True,False,True,False,True,False,False,True,False,True,True,True,True,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,True,True,False,False,True,True,False,False,True,False,True,False,True,False,False,True,True,False,True,True,False,False,True,True,False,False,True,False,True,False,True,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,True,True,True,False,False,False,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,False,True,True,False,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,False,False,False,False,False,True,False,False,True,False,False,False,True,True,False,True,True,True,False,True,True,False,False,False,True,False,True,False,True,False,True,True,False,False,True,False,True,True,False,True,False,True,True,True,False,True,False,True,True,False,True,False,True,True,True,False,True,False,False,False,False,False,True,False,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,True,True,True,False,False,True,False,False,True,False,True,True,False,True,True,True,False,True,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,True,False,False,False,False,False,True,True,True,True,False,False,False,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,False,False,True,True,False,True,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,False,False,True,True,False,True,False,True,False,True,True,True,False,False,True,True,False,True,True,True,False,False,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,True,False,False,False,False,False,False,True,True,True,False,True,False,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,False,True,True,True],[True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,False,True,False,True,True,False,False,True,True,False,True,False,False,True,True,False,False,False,True,False,False,True,False,False,False,False,False,True,True,False,False,True,True,False,False,False,False,False,False,False,False,True,False,True,False,False,True,False,False,False,False,False,False,True,False,False,True,True,True,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,False,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,True,True,True,False,True,False,False,True,True,False,False,True,True,False,False,True,False,True,False,False,False,False,False,True,True,False,False,True,True,False,False,False,True,False,True,False,False,True,True,False,False,False,True,True,False,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,False,False,True,False,False,False,False,True,False,True,False,True,True,False,True,False,False,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,False,False,True,False,True,True,False,True,False,True,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,False,False,True,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,False,False,False,False,True,False,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,True,True,False,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,True,True,False,False,True,True,True,True,True,False,False,True,True,True,False,True,False,False,False,True,True,False,True,False,False,True,True,True,True,True,True,False,False,True,False,True,False,True,True,False,True,True,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,False,True,True,True,False,True,True,True,True,True,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,False,False,False,True,True,False,False,True,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,True,False,True,False,True,True,False,True,True,False,True,True,True,True,True,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,False,True,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,True,True,True,False,False,True,True,False,False,True,True,True,True,False,True,False,True,True,False,False,True,True,False,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,False,False,True,True,False,False,True,True,True,False,True,False,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,True,True,False,False,False,False,True,True,False,True,True,False,False,True,True,False,False,False,True,True,True,False,False,True,False,False,False,True,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,True,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,False,False,True,True,False,True,True,True,False,True,False,True,False,False,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,True,False,False,True,True,True,True,True,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,True,False,True,True,True,False,True,True,True,True,True,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,False,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,True,True,True,True,False,True,True,False,False,False,True,False,False,False,True,True,False,False,True,False,False,True,False,False,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,False]], dtype = "bool")#candidate|8707|(2, 896)|const|bool
call_8706 = func_6231_call(relay.reshape(const_8707.astype('bool'), [14, 16, 8]))
call_8708 = func_6231_call(relay.reshape(const_8707.astype('bool'), [14, 16, 8]))
uop_8715 = relay.log2(var_8689.astype('float32')) # shape=(12, 16, 8)
var_8730 = relay.var("var_8730", dtype = "float32", shape = (12, 16, 8))#candidate|8730|(12, 16, 8)|var|float32
bop_8731 = relay.maximum(uop_8715.astype('int8'), relay.reshape(var_8730.astype('int8'), relay.shape_of(uop_8715))) # shape=(12, 16, 8)
func_6667_call = mod.get_global_var('func_6667')
func_6669_call = mutated_mod.get_global_var('func_6669')
call_8744 = relay.TupleGetItem(func_6667_call(), 0)
call_8745 = relay.TupleGetItem(func_6669_call(), 0)
output = relay.Tuple([bop_8697,call_8706,const_8707,bop_8731,call_8744,])
output2 = relay.Tuple([bop_8700,call_8708,const_8707,bop_8731,call_8745,])
func_8751 = relay.Function([var_8689,var_8730,], output)
mod['func_8751'] = func_8751
mod = relay.transform.InferType()(mod)
mutated_mod['func_8751'] = func_8751
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8751_call = mutated_mod.get_global_var('func_8751')
var_8753 = relay.var("var_8753", dtype = "bool", shape = (12, 16, 8))#candidate|8753|(12, 16, 8)|var|bool
var_8754 = relay.var("var_8754", dtype = "float32", shape = (12, 16, 8))#candidate|8754|(12, 16, 8)|var|float32
call_8752 = func_8751_call(var_8753,var_8754,)
output = call_8752
func_8755 = relay.Function([var_8753,var_8754,], output)
mutated_mod['func_8755'] = func_8755
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5994_call = mod.get_global_var('func_5994')
func_5996_call = mutated_mod.get_global_var('func_5996')
call_8769 = relay.TupleGetItem(func_5994_call(), 0)
call_8770 = relay.TupleGetItem(func_5996_call(), 0)
output = relay.Tuple([call_8769,])
output2 = relay.Tuple([call_8770,])
func_8773 = relay.Function([], output)
mod['func_8773'] = func_8773
mod = relay.transform.InferType()(mod)
mutated_mod['func_8773'] = func_8773
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8773_call = mutated_mod.get_global_var('func_8773')
call_8774 = func_8773_call()
output = call_8774
func_8775 = relay.Function([], output)
mutated_mod['func_8775'] = func_8775
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6695_call = mod.get_global_var('func_6695')
func_6696_call = mutated_mod.get_global_var('func_6696')
call_8788 = relay.TupleGetItem(func_6695_call(), 0)
call_8789 = relay.TupleGetItem(func_6696_call(), 0)
var_8797 = relay.var("var_8797", dtype = "int64", shape = (2535,))#candidate|8797|(2535,)|var|int64
bop_8798 = relay.logical_or(call_8788.astype('bool'), relay.reshape(var_8797.astype('bool'), relay.shape_of(call_8788))) # shape=(2535,)
bop_8801 = relay.logical_or(call_8789.astype('bool'), relay.reshape(var_8797.astype('bool'), relay.shape_of(call_8789))) # shape=(2535,)
output = bop_8798
output2 = bop_8801
func_8811 = relay.Function([var_8797,], output)
mod['func_8811'] = func_8811
mod = relay.transform.InferType()(mod)
mutated_mod['func_8811'] = func_8811
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8812 = relay.var("var_8812", dtype = "int64", shape = (2535,))#candidate|8812|(2535,)|var|int64
func_8811_call = mutated_mod.get_global_var('func_8811')
call_8813 = func_8811_call(var_8812)
output = call_8813
func_8814 = relay.Function([var_8812], output)
mutated_mod['func_8814'] = func_8814
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6667_call = mod.get_global_var('func_6667')
func_6669_call = mutated_mod.get_global_var('func_6669')
call_8849 = relay.TupleGetItem(func_6667_call(), 0)
call_8850 = relay.TupleGetItem(func_6669_call(), 0)
output = call_8849
output2 = call_8850
func_8851 = relay.Function([], output)
mod['func_8851'] = func_8851
mod = relay.transform.InferType()(mod)
output = func_8851()
func_8852 = relay.Function([], output)
mutated_mod['func_8852'] = func_8852
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8226_call = mod.get_global_var('func_8226')
func_8227_call = mutated_mod.get_global_var('func_8227')
call_8860 = func_8226_call()
call_8861 = func_8226_call()
output = relay.Tuple([call_8860,])
output2 = relay.Tuple([call_8861,])
func_8866 = relay.Function([], output)
mod['func_8866'] = func_8866
mod = relay.transform.InferType()(mod)
output = func_8866()
func_8867 = relay.Function([], output)
mutated_mod['func_8867'] = func_8867
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8773_call = mod.get_global_var('func_8773')
func_8775_call = mutated_mod.get_global_var('func_8775')
call_8895 = relay.TupleGetItem(func_8773_call(), 0)
call_8896 = relay.TupleGetItem(func_8775_call(), 0)
output = relay.Tuple([call_8895,])
output2 = relay.Tuple([call_8896,])
func_8900 = relay.Function([], output)
mod['func_8900'] = func_8900
mod = relay.transform.InferType()(mod)
output = func_8900()
func_8901 = relay.Function([], output)
mutated_mod['func_8901'] = func_8901
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8900_call = mod.get_global_var('func_8900')
func_8901_call = mutated_mod.get_global_var('func_8901')
call_8912 = relay.TupleGetItem(func_8900_call(), 0)
call_8913 = relay.TupleGetItem(func_8901_call(), 0)
var_8922 = relay.var("var_8922", dtype = "bool", shape = (10, 16, 8))#candidate|8922|(10, 16, 8)|var|bool
bop_8923 = relay.multiply(call_8912.astype('int16'), var_8922.astype('int16')) # shape=(10, 16, 8)
bop_8926 = relay.multiply(call_8913.astype('int16'), var_8922.astype('int16')) # shape=(10, 16, 8)
func_5561_call = mod.get_global_var('func_5561')
func_5564_call = mutated_mod.get_global_var('func_5564')
const_8929 = relay.const([-7.684915,-7.884595,5.733268,4.508260,-2.239922,1.385567,-4.101914,-4.451708,-9.074808,-2.875157,8.402042,3.396567,-7.235126,5.291603,0.218583,4.881505,-6.460432,-7.986396,-5.572139,-0.094636,-8.977149,-8.474522,7.636707,7.369473,9.024621,9.544415,-6.704859,0.876355,9.780715,-3.496976,-1.942228,-9.028403,4.986076,-4.215909,-5.770337,1.356730,9.545230,0.793759,-6.899235,-6.930571,-9.063426,-1.961531,-6.472933,-9.012403,-7.574720,-3.775821,-8.641029,9.654599,0.766242,5.263215,-6.904415,7.508112,1.084236,-8.397420,6.518513,9.149773,-2.019038,-2.960128,-8.345735,-7.578009,6.425892,4.519160,7.256522,-7.705787,-4.839212,-2.509210,-7.769317,-9.885548,6.637040,2.701006,8.336548,-6.355108,1.033583,8.823780,5.721288,-2.866949,-3.970040,0.893871,5.566432,3.483067,2.361179,-1.102083,3.092184,9.752553,-4.925629,2.838698,-8.333120,6.782208,5.603133,2.461292,1.951120,4.999115,1.451136,6.395467,-4.562833,-7.942118,1.698298,9.316048,-0.343123,9.219684,-2.060728,-5.738452,-2.051164,-4.386688,-8.779520,6.131709,4.023457,-8.623399,1.609061,8.780652,-0.619107,9.513443,6.731204,-7.100692,-0.270682,-7.671291,-8.633778,2.161126,-2.332463,-7.034429,7.940781,-8.305833,9.051780,7.664855,9.716919,-3.373520,-6.408492,3.073097,3.061613,7.132768,6.206633,-4.572546,3.449178,-8.610124,3.271488,-3.051247,-5.074425,1.009703,2.531853,-8.618396,-2.351050,-4.743893,6.494576,-2.116481,5.539661,-7.525585,0.538674,2.837793,-5.723307,-6.945481,-0.571121,-7.014905,-8.857457,-7.624102,-0.584750,-1.419272,-5.640253,0.571500,-8.835060,-2.891386,-8.866873,-4.899151,2.518969,-2.799016,9.061223,1.077797,1.403618,0.209757,4.476657,-6.977372,-6.909730,-7.139184,7.162004,-4.862090,9.700068,-0.884991,5.555498,6.182135,-7.590391,-1.999671,5.023031,8.274220,7.554288,-3.505877,2.186869,-7.327519,1.862243,-9.176743,7.475902,-2.223650,3.557917,-0.459634,3.342323,0.556951,6.380660,8.351473,4.871261,8.654284,8.498575,4.550697,-5.949925,8.426181,3.697507,5.487785,-4.683205,5.963355,-7.416117,2.813508,-7.341035,8.475380,-7.447011,-1.291383,3.711675,6.278930,9.025915,8.310331,-7.406665,3.277157,-9.612915,-8.553803,-5.323985,-1.532772,7.995008,-6.643601,-6.596606,2.321262,-5.192062,-5.858416,-3.819963,4.558446,7.085714,6.892948,0.909668,2.597783,6.873495,-9.284841,2.226503,-4.081172,-9.171159,-7.734434,-0.727593,-8.538127,5.627350,4.260437,-4.090539,9.186632,4.949213,3.926581,5.566313,1.200835,2.082145,-1.967335,-3.478996,1.630751,5.403382,-6.938591,-7.132371,1.366164,4.394622,1.867783,3.483702,1.892073,1.613646,7.837957,8.121988,-9.992768,-1.433148,-2.367360,1.338462,-0.931711,8.558793,2.953355,6.609425,-2.180780,6.150796,-9.934486,-5.005603,1.581392,-4.126862,5.139688,5.279991,-5.477683,-8.012601,5.587516,4.582608,9.514510,-6.574339,-4.476610,2.430630,-3.847974,-4.849684,7.270560,9.353161,-1.388138,3.217280,2.476557,2.058448,-1.533550,-5.235439,-1.978576,4.844992,1.433962,-7.297929,2.097704,-3.068882,-1.155052,-1.118109,8.762042,-9.630936,-9.773955,9.675548,6.788307,9.589181,5.532499,0.751964,3.642798,9.155770,-4.860850,-2.707512,8.833947,7.988611,1.296986,9.617205,9.225181,0.226409,2.222573,-9.317306,0.293922,-9.031353,0.607717,-4.723037,1.868553,0.349073,9.553406,9.177293,-0.307245,-4.361622,2.450218,1.131653,-9.844730,-5.558718,9.829478,-6.643581,-8.251191,4.078996,-5.871592,5.412575,9.262723,7.833523,-7.334141,6.812155,3.248732,0.463178,1.877388,-2.467849,0.204577,8.017257,8.509027,5.155825,1.887273,1.989239,3.882750,8.610825,-2.231650,6.479328,9.776470,4.382254,0.714707,8.253022,2.844672,-3.244104,-9.662290,-2.831710,5.979663,-0.434222,-8.363431,-7.197984,-6.209001,2.484308,-3.507826,8.828430,7.777828,-4.335495,8.902612,-3.867089,2.935974,0.670240,-0.915951,9.436988,-8.251934,-8.735524,-0.756615,-5.426550,-8.065916,8.151514,-1.828743,8.697280,9.047131,-7.452184,3.322889,-3.601763,5.798131,7.208733,5.527715,5.291189,-5.527258,-0.105840,-8.251346,2.168403,-2.520601,5.374292,8.632681,3.709048,8.524897,-6.541658,-9.194868,9.342769,-9.044637,2.367699,-7.058316,3.261417,3.481642,8.986501,-3.467959,-7.817788,0.399584,-7.029563,-5.988018,0.808852,2.743571,0.808988,-0.154483,-3.547012,7.089673,-7.957287,-6.868783,-9.409183,-8.541087,-0.946183,-8.991932,6.731269,-6.191576,-8.632939,8.102943,-8.304286,7.504474,-9.758569,4.120785,8.573576,9.593872,-7.451099,9.987577,3.388112,-7.391228,2.896641,-4.255777,-4.843280,-6.396945,-2.756803,-8.763225,-0.283122,-2.772886,-7.682864,0.876643,-5.207092,4.463059,1.080109,3.654583,-3.725893,-2.090727,-9.349246,8.982117,6.391199,1.309978,4.842551,5.269289,-6.947154,8.750934,7.002919,-2.829604,9.707993,-9.298785,-8.162185,9.799950,4.229742,-5.546925,-0.367053,-1.611363,0.544459,0.766007,8.512239,1.692263,-6.759596,-8.256945,3.612958,0.559397,7.000263,9.688372,6.927094,-6.339418,-9.800968,-8.352546,-4.906411,1.577994,0.203693,9.651145,7.203262,-5.204089,2.204099,5.390549,9.237804,6.253728,-7.455919,-7.420555,4.430583,-5.578864,-6.269087,-4.921769,0.690759,-9.084930,7.417700,5.621472,-6.853207,-9.647326,4.632924,2.006380,2.630675,2.769241,3.231156,8.964574,-4.170260,8.798882,7.684628,-1.410450,0.013168,0.205000,-4.420756,0.314561,-0.105022,-1.764596,5.814306,-0.454175,-5.171255,-9.605206,9.315800,-1.825355,1.326346,-3.197400,0.479420,8.751151,-1.853310,3.194468,5.224029,9.707839,6.500365,4.805432,3.922609,8.327166,5.759249,-5.422908,7.711816,0.304670,-1.823662,2.360851,-8.535068,-7.171484,7.305124,9.558621,-5.457008,-0.394791,-5.418838,-2.200680,0.953798,5.042026,8.137927,-6.170267,-7.387543,1.364157,9.330728,-6.041683,8.033235,-4.625980,4.827015,8.635961,0.903105,9.268954,-1.669269,0.836880,9.196335,-4.074989,-0.933808,3.579171,-6.089829,0.826273,-0.529842,5.466823,-3.838038,-6.871170,8.746427,9.782105,-5.680583,-8.289366,-0.989028,-2.252758,-6.795955,-1.892077,6.794791,0.913228,-4.207000,-1.940589,7.131417,-3.513370,5.717987,3.408921,8.061369,9.894866,3.291617,-8.367232,-3.092500,1.744402,0.081351,1.409663,9.285695,1.992925,-1.775829,-2.277263,8.888194,4.165527,-2.459988,-2.630142,-6.820251,2.030122,4.382828,9.137426,-4.306617,3.320535,4.734895,2.464954,6.975366,-8.458699,-9.453899,6.184558,-7.612718,-3.701356,5.290951,-2.345284,2.319098,4.077007,8.973880,-9.704560,2.262758,8.468219,-5.349343,-5.865839,6.865690,4.632706,6.206240,-9.973316,-0.647996,-9.623027,5.242119,2.910811,-0.425213,2.738556,3.774311,-7.357061,8.345953,3.010304,-6.933100,-3.123311,0.271142,2.680953,-3.781939,-4.590709,-2.726070,2.127602,2.829898,-7.303197,7.194817,3.982963,1.313742,-7.817112,6.574296,7.015962,0.879488,-9.261274,9.463920,7.243048,8.865139,-5.877370,3.069080,5.099933,-5.840646,-9.189230,0.104377,2.816949,5.487331,-1.243924,7.687549,-6.307958,8.561383,6.662395,-9.018580,-0.562883,-8.614688,-5.967287,-4.154807,-4.817364,1.724257,5.113179,-1.289047,-9.087143,-9.673978,6.087435,-8.697802,-6.378493,-1.871280,-8.481207,-9.344223,-5.478245,-6.472731,-8.733760,-3.452897,3.363339,-7.906071,-6.876632,8.153796,-2.762545,0.986299,-6.336766,-9.439745,2.676327,-1.870101,4.012137,9.600072,-8.897829,-0.693804,-2.193189,5.074669,2.778413,-0.546096,7.761941,-8.533500,7.046411,7.053452,1.561442,-7.100434,-6.064937,-8.588967,-3.274752,9.129722,1.117104,0.424181,-0.075028,-5.808564,-5.882839,9.867476,-4.502892,-8.488801,-0.531191,1.338183,3.291363,-6.944586,8.369226,9.002745,-1.865239,-9.541450,5.173325,-3.806748,-1.560836,5.179592,3.290052,-1.316469,-2.651200,-6.226139,-8.931149,-6.504241,8.098647,9.980643,1.016639,-4.156759,6.454623,-0.401361,9.349657,-3.832488,6.050579,-0.520723,5.127368,-5.820246,6.292135,-5.968830,1.516619,8.964446,0.538918,1.577067,-2.631833,9.573696,-7.530314,-3.536085,-9.215313,8.795902,-3.062093,-3.919135,8.497448,7.579829,1.369275,-6.375218,-3.583084,-3.393228,7.884558,-3.088375,3.489214,0.315441,8.410101,3.285400,2.960785,0.593107,7.133235,9.986344,2.990002,7.041302,-5.303174,3.576038,-3.035856,-1.276574,1.894619,9.166309,-2.673061,-9.878398,-2.611789,1.955172,-6.636554,0.726235,8.299049,-0.287945,6.083105,9.452970,-1.284416,-2.060737,-8.061075], dtype = "float32")#candidate|8929|(840,)|const|float32
var_8930 = relay.var("var_8930", dtype = "uint32", shape = (14,))#candidate|8930|(14,)|var|uint32
call_8928 = relay.TupleGetItem(func_5561_call(relay.reshape(const_8929.astype('float32'), [840,]), relay.reshape(var_8930.astype('uint32'), [14,]), ), 0)
call_8931 = relay.TupleGetItem(func_5564_call(relay.reshape(const_8929.astype('float32'), [840,]), relay.reshape(var_8930.astype('uint32'), [14,]), ), 0)
bop_8932 = relay.subtract(call_8912.astype('uint16'), var_8922.astype('uint16')) # shape=(10, 16, 8)
bop_8935 = relay.subtract(call_8913.astype('uint16'), var_8922.astype('uint16')) # shape=(10, 16, 8)
bop_8936 = relay.bitwise_or(bop_8932.astype('uint8'), relay.reshape(bop_8923.astype('uint8'), relay.shape_of(bop_8932))) # shape=(10, 16, 8)
bop_8939 = relay.bitwise_or(bop_8935.astype('uint8'), relay.reshape(bop_8926.astype('uint8'), relay.shape_of(bop_8935))) # shape=(10, 16, 8)
output = relay.Tuple([call_8928,const_8929,var_8930,bop_8936,])
output2 = relay.Tuple([call_8931,const_8929,var_8930,bop_8939,])
func_8941 = relay.Function([var_8922,var_8930,], output)
mod['func_8941'] = func_8941
mod = relay.transform.InferType()(mod)
mutated_mod['func_8941'] = func_8941
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8941_call = mutated_mod.get_global_var('func_8941')
var_8943 = relay.var("var_8943", dtype = "bool", shape = (10, 16, 8))#candidate|8943|(10, 16, 8)|var|bool
var_8944 = relay.var("var_8944", dtype = "uint32", shape = (14,))#candidate|8944|(14,)|var|uint32
call_8942 = func_8941_call(var_8943,var_8944,)
output = call_8942
func_8945 = relay.Function([var_8943,var_8944,], output)
mutated_mod['func_8945'] = func_8945
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9031 = relay.var("var_9031", dtype = "float32", shape = (7, 8, 3))#candidate|9031|(7, 8, 3)|var|float32
uop_9032 = relay.cosh(var_9031.astype('float32')) # shape=(7, 8, 3)
bop_9043 = relay.add(uop_9032.astype('int16'), relay.reshape(var_9031.astype('int16'), relay.shape_of(uop_9032))) # shape=(7, 8, 3)
func_8900_call = mod.get_global_var('func_8900')
func_8901_call = mutated_mod.get_global_var('func_8901')
call_9051 = relay.TupleGetItem(func_8900_call(), 0)
call_9052 = relay.TupleGetItem(func_8901_call(), 0)
func_5804_call = mod.get_global_var('func_5804')
func_5806_call = mutated_mod.get_global_var('func_5806')
const_9058 = relay.const([[5.955703],[-8.272404],[-1.342216],[-4.588626],[-6.856909],[-0.187748],[-6.046024],[0.669365],[-2.649465],[-8.742974],[4.803324],[-8.073254],[5.716678]], dtype = "float64")#candidate|9058|(13, 1)|const|float64
call_9057 = func_5804_call(relay.reshape(const_9058.astype('float64'), [13, 1]))
call_9059 = func_5804_call(relay.reshape(const_9058.astype('float64'), [13, 1]))
func_8605_call = mod.get_global_var('func_8605')
func_8609_call = mutated_mod.get_global_var('func_8609')
const_9078 = relay.const([False,True,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,False,False,True,True,True,True,False,True,True,True,True,True,True,False,False,True,False,True,False,False,True,True,True,True,False,False,False,False,False,True,False,False,True,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,False,True,False,True,False,False,True,True,False,True,True,False,True,True,True,True,True,False,True,True,True,True,False,False,False,False,False,False,False,True,True,False,True,True,True,True,True,True,False,False,False,True,False,False,True,True,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,False,False,False,False,True,False,False,False,True,True,False,False,False,False,False,False,True,True,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,False,True,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,False,False,False,False,False,True,False,False,False,True,True,False,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,False,False,True,False,True,True,True,True,True,False,True,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,True,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,True,True,True,True,True,False,False,True,False,True,False,False,False,False,False,True,False,False,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,True,True,True,False,True,True,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,True,True,True,False,True,True,False,False,True,True,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,False,True,False,False,False,False,True,True,False,True,False,True,True,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,True,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,True,False,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,True,True,True,True,False,False,True,False,True,False,True,True,True,False,False,True,False,True,False,True,True,True,True,True,True], dtype = "bool")#candidate|9078|(528,)|const|bool
call_9077 = relay.TupleGetItem(func_8605_call(relay.reshape(const_9078.astype('bool'), [11, 8, 6]), relay.reshape(const_9078.astype('bool'), [11, 8, 6]), ), 1)
call_9079 = relay.TupleGetItem(func_8609_call(relay.reshape(const_9078.astype('bool'), [11, 8, 6]), relay.reshape(const_9078.astype('bool'), [11, 8, 6]), ), 1)
func_7716_call = mod.get_global_var('func_7716')
func_7717_call = mutated_mod.get_global_var('func_7717')
call_9084 = func_7716_call()
call_9085 = func_7716_call()
output = relay.Tuple([bop_9043,call_9051,call_9057,const_9058,call_9077,const_9078,call_9084,])
output2 = relay.Tuple([bop_9043,call_9052,call_9059,const_9058,call_9079,const_9078,call_9085,])
func_9093 = relay.Function([var_9031,], output)
mod['func_9093'] = func_9093
mod = relay.transform.InferType()(mod)
mutated_mod['func_9093'] = func_9093
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9094 = relay.var("var_9094", dtype = "float32", shape = (7, 8, 3))#candidate|9094|(7, 8, 3)|var|float32
func_9093_call = mutated_mod.get_global_var('func_9093')
call_9095 = func_9093_call(var_9094)
output = call_9095
func_9096 = relay.Function([var_9094], output)
mutated_mod['func_9096'] = func_9096
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8158_call = mod.get_global_var('func_8158')
func_8160_call = mutated_mod.get_global_var('func_8160')
call_9123 = relay.TupleGetItem(func_8158_call(), 0)
call_9124 = relay.TupleGetItem(func_8160_call(), 0)
func_6231_call = mod.get_global_var('func_6231')
func_6233_call = mutated_mod.get_global_var('func_6233')
var_9157 = relay.var("var_9157", dtype = "bool", shape = (1792,))#candidate|9157|(1792,)|var|bool
call_9156 = func_6231_call(relay.reshape(var_9157.astype('bool'), [14, 16, 8]))
call_9158 = func_6231_call(relay.reshape(var_9157.astype('bool'), [14, 16, 8]))
output = relay.Tuple([call_9123,call_9156,var_9157,])
output2 = relay.Tuple([call_9124,call_9158,var_9157,])
func_9159 = relay.Function([var_9157,], output)
mod['func_9159'] = func_9159
mod = relay.transform.InferType()(mod)
mutated_mod['func_9159'] = func_9159
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9160 = relay.var("var_9160", dtype = "bool", shape = (1792,))#candidate|9160|(1792,)|var|bool
func_9159_call = mutated_mod.get_global_var('func_9159')
call_9161 = func_9159_call(var_9160)
output = call_9161
func_9162 = relay.Function([var_9160], output)
mutated_mod['func_9162'] = func_9162
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7716_call = mod.get_global_var('func_7716')
func_7717_call = mutated_mod.get_global_var('func_7717')
call_9164 = func_7716_call()
call_9165 = func_7716_call()
output = call_9164
output2 = call_9165
func_9182 = relay.Function([], output)
mod['func_9182'] = func_9182
mod = relay.transform.InferType()(mod)
output = func_9182()
func_9183 = relay.Function([], output)
mutated_mod['func_9183'] = func_9183
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7624_call = mod.get_global_var('func_7624')
func_7626_call = mutated_mod.get_global_var('func_7626')
call_9209 = relay.TupleGetItem(func_7624_call(), 0)
call_9210 = relay.TupleGetItem(func_7626_call(), 0)
output = call_9209
output2 = call_9210
func_9214 = relay.Function([], output)
mod['func_9214'] = func_9214
mod = relay.transform.InferType()(mod)
output = func_9214()
func_9215 = relay.Function([], output)
mutated_mod['func_9215'] = func_9215
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8900_call = mod.get_global_var('func_8900')
func_8901_call = mutated_mod.get_global_var('func_8901')
call_9229 = relay.TupleGetItem(func_8900_call(), 0)
call_9230 = relay.TupleGetItem(func_8901_call(), 0)
output = call_9229
output2 = call_9230
func_9243 = relay.Function([], output)
mod['func_9243'] = func_9243
mod = relay.transform.InferType()(mod)
mutated_mod['func_9243'] = func_9243
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9243_call = mutated_mod.get_global_var('func_9243')
call_9244 = func_9243_call()
output = call_9244
func_9245 = relay.Function([], output)
mutated_mod['func_9245'] = func_9245
mutated_mod = relay.transform.InferType()(mutated_mod)
const_9276 = relay.const([[[7.126459,9.582657,2.748183,-1.658325,-8.305855,-2.083927,-0.337109,-1.799641,-6.305966,-4.189323,-2.323217,-7.515562,9.560325,9.344448,-9.433319],[9.998261,6.100364,9.391878,4.047696,2.991604,4.938501,7.618812,-8.951430,-9.146255,-4.445624,4.717874,6.446734,-1.358495,7.992122,-7.122416],[8.212495,0.773106,-0.158944,6.991178,-3.634457,4.640250,-7.444931,-7.668476,-4.365442,0.954546,5.060248,9.082873,9.659550,7.529727,-0.232046],[-1.223289,-2.539146,-2.960628,8.397664,-4.088385,9.873643,6.139445,-5.260918,-3.547555,-0.784956,4.607945,-8.597601,2.689741,7.090072,8.617398],[-1.451781,3.929913,0.267894,1.924509,0.330985,2.549937,4.975649,9.440743,-3.483421,-1.427164,3.884949,-9.217383,8.087401,1.777732,8.997287],[-2.975841,6.335195,-2.371879,6.066997,3.655630,5.633308,4.108635,6.685369,-2.837015,-6.623535,-2.606770,5.165676,-0.271324,-6.344888,4.257826],[-7.113920,3.426288,6.580094,-3.217473,2.126947,6.370823,-7.338633,0.193807,4.295202,9.288134,3.122284,-5.358742,7.986742,8.759866,-1.494846],[2.976778,-2.643295,-0.686132,-0.760104,-0.050489,-7.871701,-9.730166,0.710895,-5.270963,3.821747,-9.051578,-8.286901,0.532062,4.981016,4.964474],[6.252879,-1.054302,-6.118754,3.780204,-5.245587,-9.191243,-7.045710,2.351575,2.681841,-4.550808,-7.135474,5.105309,6.222783,-8.335573,7.476380]]], dtype = "float32")#candidate|9276|(1, 9, 15)|const|float32
uop_9277 = relay.cosh(const_9276.astype('float32')) # shape=(1, 9, 15)
output = relay.Tuple([uop_9277,])
output2 = relay.Tuple([uop_9277,])
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
