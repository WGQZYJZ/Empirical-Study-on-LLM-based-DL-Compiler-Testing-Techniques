==========mod==========
#[version = "0.0.5"]
def @func_4601(%var_4596: Tensor[(2, 10, 13), float64]) -> Tensor[(2, 10, 13), float64] {
  %0 = cast(%var_4596, dtype="float64") /* ty=Tensor[(2, 10, 13), float64] */;
  cosh(%0) /* ty=Tensor[(2, 10, 13), float64] */
}

def @func_8158() -> (Tensor[(1, 16, 8), bool],) {
  %1 = @func_4943() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %2 = %1.0;
  (%2,)
}

def @func_5612() -> Tensor[(1, 16, 8), bool] {
  @func_4894() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_2157(%var_2152: float32, %var_2153: Tensor[(14, 3, 9), float32]) -> Tensor[(14, 3, 9), float32] {
  %3 = cast(%var_2152, dtype="float32") /* ty=float32 */;
  %4 = cast(%var_2153, dtype="float32") /* ty=Tensor[(14, 3, 9), float32] */;
  power(%3, %4) /* ty=Tensor[(14, 3, 9), float32] */
}

def @func_2357(%var_2347: Tensor[(5, 15, 14), uint64], %var_2348: Tensor[(5, 15, 14), uint64]) -> (Tensor[(5, 15, 14), uint64],) {
  %5 = cast(%var_2348, dtype="uint64") /* ty=Tensor[(5, 15, 14), uint64] */;
  %6 = shape_of(%var_2347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_2347, dtype="uint64") /* ty=Tensor[(5, 15, 14), uint64] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %9 = bitwise_xor(%7, %8) /* ty=Tensor[(5, 15, 14), uint64] */;
  (%9,)
}

def @func_2386(%var_2366: Tensor[(12, 2, 14), float64]) -> (Tensor[(12, 2, 14), float64], Tensor[(12), float64], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(14, 1), bool], Tensor[(14), uint32]) {
  %10 = cast(%var_2366, dtype="float64") /* ty=Tensor[(12, 2, 14), float64] */;
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %13 = reshape(%11, newshape=[15, 9, 8]) /* ty=Tensor[(15, 9, 8), float32] */;
  %14 = reshape(%12, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %15 = @func_564(%13, %14) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(12), float64], Tensor[(560), uint8], Tensor[(15, 9, 8), int16], Tensor[(15, 9, 8), bool]) */;
  %16 = cast(-3.76575f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %18 = reshape(%16, newshape=[]) /* ty=float32 */;
  %19 = reshape(%17, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), float32] */;
  %20 = cast(-3.76575f /* ty=float32 */, dtype="uint32") /* ty=uint32 */;
  %21 = cast(meta[relay.Constant][3] /* ty=Tensor[(14), uint32] */, dtype="uint32") /* ty=Tensor[(14), uint32] */;
  %22 = reshape(%20, newshape=[]) /* ty=uint32 */;
  %23 = reshape(%21, newshape=[14, 1]) /* ty=Tensor[(14, 1), uint32] */;
  %24 = @func_725(%22, %23) /* ty=(Tensor[(14, 1), bool],) */;
  %25 = atan(%10) /* ty=Tensor[(12, 2, 14), float64] */;
  %26 = %15.1;
  %27 = @func_2157(%18, %19) /* ty=Tensor[(14, 3, 9), float32] */;
  %28 = %24.0;
  (%25, %26, meta[relay.Constant][0] /* ty=Tensor[(1080), float32] */, meta[relay.Constant][1] /* ty=Tensor[(12), float64] */, %27, -3.76575f /* ty=float32 */, meta[relay.Constant][2] /* ty=Tensor[(378), float32] */, %28, meta[relay.Constant][3] /* ty=Tensor[(14), uint32] */)
}

def @func_8184() -> Tensor[(1, 16, 8), bool] {
  %29 = @func_6239() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %29.0
}

def @func_5703() -> (Tensor[(?, 16, 8), int16], Tensor[(13, 13, 15), bool], Tensor[(2535), int64], Tensor[(11, 14, 11), float32], Tensor[(1694), uint32]) {
  %30 = @func_5657() /* ty=Tensor[(1, 16, 8), bool] */;
  %31 = cast(%30, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
  %32 = asin(%31) /* ty=Tensor[(1, 16, 8), float32] */;
  %33 = cast(%30, dtype="int16") /* ty=Tensor[(1, 16, 8), int16] */;
  %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%32, dtype="int16") /* ty=Tensor[(1, 16, 8), int16] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %37 = cast(meta[relay.Constant][4] /* ty=Tensor[(2535), int64] */, dtype="int64") /* ty=Tensor[(2535), int64] */;
  %38 = reshape(%37, newshape=[13, 13, 15]) /* ty=Tensor[(13, 13, 15), int64] */;
  %39 = @func_186(%38) /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), float64]) */;
  %40 = cast(meta[relay.Constant][5] /* ty=Tensor[(1694), uint32] */, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %41 = cast(meta[relay.Constant][5] /* ty=Tensor[(1694), uint32] */, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %42 = reshape(%40, newshape=[11, 14, 11]) /* ty=Tensor[(11, 14, 11), uint32] */;
  %43 = reshape(%41, newshape=[11, 14, 11]) /* ty=Tensor[(11, 14, 11), uint32] */;
  %44 = @func_896(%42, %43) /* ty=(Tensor[(11, 14, 11), float32],) */;
  %45 = bitwise_and(%35, %36) /* ty=Tensor[(?, 16, 8), int16] */;
  %46 = %39.0;
  %47 = %44.0;
  (%45, %46, meta[relay.Constant][4] /* ty=Tensor[(2535), int64] */, %47, meta[relay.Constant][5] /* ty=Tensor[(1694), uint32] */)
}

def @func_6020() -> (Tensor[(1, 16, 8), bool], Tensor[(16, 6, 16), float64], float64, Tensor[(1536), float64]) {
  %48 = cast(2.25925f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %49 = cast(meta[relay.Constant][6] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %50 = reshape(%48, newshape=[]) /* ty=float64 */;
  %51 = reshape(%49, newshape=[16, 6, 16]) /* ty=Tensor[(16, 6, 16), float64] */;
  %52 = @func_5657() /* ty=Tensor[(1, 16, 8), bool] */;
  %53 = @func_1729(%50, %51) /* ty=Tensor[(16, 6, 16), float64] */;
  (%52, %53, 2.25925f64 /* ty=float64 */, meta[relay.Constant][6] /* ty=Tensor[(1536), float64] */)
}

def @func_8811(%var_8797: Tensor[(2535), int64]) -> Tensor[(2535), bool] {
  %54 = @func_6695() /* ty=(Tensor[(2535), int64],) */;
  %55 = %54.0;
  %56 = cast(%var_8797, dtype="bool") /* ty=Tensor[(2535), bool] */;
  %57 = shape_of(%55, dtype="int32") /* ty=Tensor[(1), int32] */;
  %58 = cast(%55, dtype="bool") /* ty=Tensor[(2535), bool] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_or(%58, %59) /* ty=Tensor[(2535), bool] */
}

def @func_5175(%var_5118: Tensor[(15, 16, 8), float64], %var_5137: Tensor[(32), float64], %var_5142: Tensor[(1080), float32], %var_5173: Tensor[(378), float32]) -> (Tensor[(?, 16, 8), bool], Tensor[(15, 16, 8), bool], Tensor[(2, 5, 16), float64], Tensor[(32), float64], Tensor[(8, 20), float64], Tensor[(560), uint8], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], float32, Tensor[(3, 45), float64], Tensor[(378), float32]) {
  %60 = @func_4894() /* ty=Tensor[(1, 16, 8), bool] */;
  %61 = cast(%60, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
  %62 = exp(%61) /* ty=Tensor[(1, 16, 8), float32] */;
  %63 = cast(%62, dtype="float64") /* ty=Tensor[(1, 16, 8), float64] */;
  %64 = sinh(%63) /* ty=Tensor[(1, 16, 8), float64] */;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(1, 16, 8), float64] */;
  %66 = log2(%65) /* ty=Tensor[(1, 16, 8), float64] */;
  %67 = cast(%64, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%66, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %71 = cast(%66, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
  %72 = cast(%var_5118, dtype="float32") /* ty=Tensor[(15, 16, 8), float32] */;
  %73 = mod(%71, %72) /* ty=Tensor[(15, 16, 8), float32] */;
  %74 = cast(%64, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
  %75 = cast(%73, dtype="bool") /* ty=Tensor[(15, 16, 8), bool] */;
  %76 = cast(%var_5137, dtype="float64") /* ty=Tensor[(32), float64] */;
  %77 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 20), float64] */, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
  %78 = reshape(%76, newshape=[2, 1, 16]) /* ty=Tensor[(2, 1, 16), float64] */;
  %79 = reshape(%77, newshape=[2, 5, 16]) /* ty=Tensor[(2, 5, 16), float64] */;
  %80 = @func_4484(%78, %79) /* ty=(Tensor[(2, 5, 16), float64],) */;
  %81 = cast(%var_5142, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %82 = cast(meta[relay.Constant][8] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %83 = reshape(%81, newshape=[15, 9, 8]) /* ty=Tensor[(15, 9, 8), float32] */;
  %84 = reshape(%82, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %85 = @func_564(%83, %84) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(12), float64], Tensor[(560), uint8], Tensor[(15, 9, 8), int16], Tensor[(15, 9, 8), bool]) */;
  %86 = cast(meta[relay.Constant][9] /* ty=Tensor[(2535), int64] */, dtype="int64") /* ty=Tensor[(2535), int64] */;
  %87 = reshape(%86, newshape=[13, 13, 15]) /* ty=Tensor[(13, 13, 15), int64] */;
  %88 = @func_186(%87) /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), float64]) */;
  %89 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 45), float64] */, dtype="float64") /* ty=Tensor[(3, 45), float64] */;
  %90 = cast(%var_5173, dtype="float32") /* ty=Tensor[(378), float32] */;
  %91 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 45), float64] */, dtype="float64") /* ty=Tensor[(3, 45), float64] */;
  %92 = reshape(%89, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float64] */;
  %93 = reshape(%90, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %94 = reshape(%91, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float64] */;
  %95 = @func_2462(%92, %93, %94) /* ty=(Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(3, 9, 5), bool]) */;
  %96 = less_equal(%69, %70) /* ty=Tensor[(?, 16, 8), bool] */;
  %97 = less(%74, %75) /* ty=Tensor[(15, 16, 8), bool] */;
  %98 = %80.0;
  %99 = %85.2;
  %100 = %88.1;
  %101 = %95.1;
  (%96, %97, %98, %var_5137, meta[relay.Constant][7] /* ty=Tensor[(8, 20), float64] */, %99, %var_5142, meta[relay.Constant][8] /* ty=Tensor[(12), float64] */, %100, meta[relay.Constant][9] /* ty=Tensor[(2535), int64] */, %101, meta[relay.Constant][10] /* ty=Tensor[(3, 45), float64] */, %var_5173)
}

def @func_4943() -> (Tensor[(1, 16, 8), bool],) {
  %102 = @func_4894() /* ty=Tensor[(1, 16, 8), bool] */;
  (%102,)
}

def @func_303(%var_299: Tensor[(8, 5, 14), uint8]) -> Tensor[(8, 5, 14), bool] {
  %103 = cast(meta[relay.Constant][11] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %104 = cast(%var_299, dtype="bool") /* ty=Tensor[(8, 5, 14), bool] */;
  equal(%103, %104) /* ty=Tensor[(8, 5, 14), bool] */
}

def @func_3104(%var_3091: Tensor[(12, 12, 14), float32]) -> (Tensor[(12, 12, 14), float32],) {
  %105 = cast(%var_3091, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
  %106 = log2(%105) /* ty=Tensor[(12, 12, 14), float32] */;
  (%106,)
}

def @func_8941(%var_8922: Tensor[(10, 16, 8), bool], %var_8930: Tensor[(14), uint32]) -> (Tensor[(1, 16, 8), bool], Tensor[(840), float32], Tensor[(14), uint32], Tensor[(10, 16, 8), uint8]) {
  %107 = cast(meta[relay.Constant][12] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %108 = cast(%var_8930, dtype="uint32") /* ty=Tensor[(14), uint32] */;
  %109 = reshape(%107, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %110 = reshape(%108, newshape=[14]) /* ty=Tensor[(14), uint32] */;
  %111 = @func_5561(%109, %110) /* ty=(Tensor[(1, 16, 8), bool], Tensor[(14, 4, 15), float32], Tensor[(840), float32], Tensor[(14, 1), bool], uint32, Tensor[(14), uint32]) */;
  %112 = @func_8900() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %113 = %112.0;
  %114 = cast(%113, dtype="uint16") /* ty=Tensor[(1, 16, 8), uint16] */;
  %115 = cast(%var_8922, dtype="uint16") /* ty=Tensor[(10, 16, 8), uint16] */;
  %116 = subtract(%114, %115) /* ty=Tensor[(10, 16, 8), uint16] */;
  %117 = cast(%113, dtype="int16") /* ty=Tensor[(1, 16, 8), int16] */;
  %118 = cast(%var_8922, dtype="int16") /* ty=Tensor[(10, 16, 8), int16] */;
  %119 = multiply(%117, %118) /* ty=Tensor[(10, 16, 8), int16] */;
  %120 = cast(%119, dtype="uint8") /* ty=Tensor[(10, 16, 8), uint8] */;
  %121 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%116, dtype="uint8") /* ty=Tensor[(10, 16, 8), uint8] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %124 = %111.0;
  %125 = bitwise_or(%122, %123) /* ty=Tensor[(10, 16, 8), uint8] */;
  (%124, meta[relay.Constant][12] /* ty=Tensor[(840), float32] */, %var_8930, %125)
}

def @func_8773() -> (Tensor[(1, 16, 8), bool],) {
  %126 = @func_5994() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %127 = %126.0;
  (%127,)
}

def @func_6695() -> (Tensor[(2535), int64],) {
  %128 = @func_5703() /* ty=(Tensor[(?, 16, 8), int16], Tensor[(13, 13, 15), bool], Tensor[(2535), int64], Tensor[(11, 14, 11), float32], Tensor[(1694), uint32]) */;
  %129 = %128.2;
  (%129,)
}

def @func_6231(%var_6224: Tensor[(14, 16, 8), bool]) -> Tensor[(14, 16, 8), uint16] {
  %130 = @func_5295() /* ty=Tensor[(1, 16, 8), bool] */;
  %131 = cast(%130, dtype="uint16") /* ty=Tensor[(1, 16, 8), uint16] */;
  %132 = cast(%var_6224, dtype="uint16") /* ty=Tensor[(14, 16, 8), uint16] */;
  logical_xor(%131, %132) /* ty=Tensor[(14, 16, 8), uint16] */
}

def @func_9182() -> Tensor[(1, 16, 8), bool] {
  @func_7716() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_6293() -> (Tensor[(1, 16, 8), bool],) {
  %133 = @func_5657() /* ty=Tensor[(1, 16, 8), bool] */;
  (%133,)
}

def @func_6667() -> (Tensor[(840), float32],) {
  %134 = @func_6071() /* ty=(Tensor[(1, 16, 8), bool], Tensor[(1536), bool], Tensor[(14, 1), bool], Tensor[(336), float64], Tensor[(12, 16, 8), int32], Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool], Tensor[(840), float32], Tensor[(16, 16, 8), float64], Tensor[(2048), bool], Tensor[(72), float64], Tensor[(5, 2, 3), uint16], Tensor[(30), uint16]) */;
  %135 = %134.7;
  (%135,)
}

def @func_4824(%var_4821: Tensor[(4, 2, 9), float64]) -> Tensor[(4, 2, 9), float64] {
  %136 = cast(%var_4821, dtype="float64") /* ty=Tensor[(4, 2, 9), float64] */;
  log10(%136) /* ty=Tensor[(4, 2, 9), float64] */
}

def @func_6615() -> (Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), bool]) {
  %137 = @func_5703() /* ty=(Tensor[(?, 16, 8), int16], Tensor[(13, 13, 15), bool], Tensor[(2535), int64], Tensor[(11, 14, 11), float32], Tensor[(1694), uint32]) */;
  %138 = @func_5703() /* ty=(Tensor[(?, 16, 8), int16], Tensor[(13, 13, 15), bool], Tensor[(2535), int64], Tensor[(11, 14, 11), float32], Tensor[(1694), uint32]) */;
  %139 = %137.1;
  %140 = %138.1;
  (%139, %140)
}

def @func_6536(%var_6515: Tensor[(2048), bool], %var_6520: Tensor[(84, 1), float32], %var_6521: Tensor[(336), float64], %var_6523: Tensor[(2535), int64], %var_6524: Tensor[(1, 16), uint32], %var_6529: Tensor[(4, 16, 8), float64]) -> (Tensor[(4, 2, 9), float64], Tensor[(2048), bool], Tensor[(36, 2), float64], Tensor[(14, 3, 9), float32], Tensor[(84, 1), float32], Tensor[(336), float64], Tensor[(378, 1), float32], Tensor[(2535), int64], Tensor[(1, 16), uint32], Tensor[(4, 16, 8), int64]) {
  %141 = cast(%var_6515, dtype="bool") /* ty=Tensor[(2048), bool] */;
  %142 = cast(meta[relay.Constant][13] /* ty=Tensor[(36, 2), float64] */, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
  %143 = reshape(%141, newshape=[16, 16, 8]) /* ty=Tensor[(16, 16, 8), bool] */;
  %144 = reshape(%142, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %145 = @func_5408(%143, %144) /* ty=(Tensor[(16, 16, 8), float64], Tensor[(4, 2, 9), float64], Tensor[(72), float64]) */;
  %146 = cast(%var_6520, dtype="float32") /* ty=Tensor[(84, 1), float32] */;
  %147 = cast(%var_6520, dtype="float32") /* ty=Tensor[(84, 1), float32] */;
  %148 = cast(%var_6521, dtype="float64") /* ty=Tensor[(336), float64] */;
  %149 = cast(meta[relay.Constant][14] /* ty=Tensor[(378, 1), float32] */, dtype="float32") /* ty=Tensor[(378, 1), float32] */;
  %150 = cast(%var_6523, dtype="int64") /* ty=Tensor[(2535), int64] */;
  %151 = cast(%var_6524, dtype="uint32") /* ty=Tensor[(1, 16), uint32] */;
  %152 = reshape(%146, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), float32] */;
  %153 = reshape(%147, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), float32] */;
  %154 = reshape(%148, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %155 = reshape(%149, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %156 = reshape(%150, newshape=[2535]) /* ty=Tensor[(2535), int64] */;
  %157 = reshape(%151, newshape=[16]) /* ty=Tensor[(16), uint32] */;
  %158 = @func_2800(%152, %153, %154, %155, %156, %157) /* ty=(Tensor[(4, 7, 3), bool], Tensor[(12), float64], Tensor[(336), float64], float32, Tensor[(14, 3, 9), float32], Tensor[(378), float32], Tensor[(4, 7, 3), int32], Tensor[(14, 3, 9), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(14, 1), bool], Tensor[(?, 2, 8), uint32], Tensor[(16), uint32]) */;
  %159 = @func_6239() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %160 = %159.0;
  %161 = cast(%160, dtype="float64") /* ty=Tensor[(1, 16, 8), float64] */;
  %162 = tan(%161) /* ty=Tensor[(1, 16, 8), float64] */;
  %163 = cast(%162, dtype="int64") /* ty=Tensor[(1, 16, 8), int64] */;
  %164 = cast(%var_6529, dtype="int64") /* ty=Tensor[(4, 16, 8), int64] */;
  %165 = %145.1;
  %166 = %158.4;
  %167 = multiply(%163, %164) /* ty=Tensor[(4, 16, 8), int64] */;
  (%165, %var_6515, meta[relay.Constant][13] /* ty=Tensor[(36, 2), float64] */, %166, %var_6520, %var_6521, meta[relay.Constant][14] /* ty=Tensor[(378, 1), float32] */, %var_6523, %var_6524, %167)
}

def @func_7124() -> Tensor[(1, 16, 8), bool] {
  @func_5295() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_5657() -> Tensor[(1, 16, 8), bool] {
  @func_5639() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_7691(%var_7652: Tensor[(12, 66), uint64], %var_7686: Tensor[(12, 66), uint64]) -> (Tensor[(756), float64], Tensor[(14, 16, 8), uint16], Tensor[(1792), bool], Tensor[(?, 16, 8), float32], Tensor[(12, 66), bool]) {
  %168 = cast(%var_7652, dtype="uint64") /* ty=Tensor[(12, 66), uint64] */;
  %169 = reshape(%168, newshape=[9, 8, 11]) /* ty=Tensor[(9, 8, 11), uint64] */;
  %170 = @func_4254(%169) /* ty=(Tensor[(9, 8, 11), bool], Tensor[(9, 7, 12), uint8], Tensor[(756), float64]) */;
  %171 = cast(meta[relay.Constant][15] /* ty=Tensor[(1792), bool] */, dtype="bool") /* ty=Tensor[(1792), bool] */;
  %172 = reshape(%171, newshape=[14, 16, 8]) /* ty=Tensor[(14, 16, 8), bool] */;
  %173 = @func_5657() /* ty=Tensor[(1, 16, 8), bool] */;
  %174 = @func_5703() /* ty=(Tensor[(?, 16, 8), int16], Tensor[(13, 13, 15), bool], Tensor[(2535), int64], Tensor[(11, 14, 11), float32], Tensor[(1694), uint32]) */;
  %175 = %174.0;
  %176 = cast(%175, dtype="float32") /* ty=Tensor[(?, 16, 8), float32] */;
  %177 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(%173, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %180 = cast(%var_7686, dtype="bool") /* ty=Tensor[(12, 66), bool] */;
  %181 = shape_of(%var_7652, dtype="int32") /* ty=Tensor[(2), int32] */;
  %182 = cast(%var_7652, dtype="bool") /* ty=Tensor[(12, 66), bool] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %184 = %170.2;
  %185 = @func_6231(%172) /* ty=Tensor[(14, 16, 8), uint16] */;
  %186 = floor_mod(%178, %179) /* ty=Tensor[(?, 16, 8), float32] */;
  %187 = less(%182, %183) /* ty=Tensor[(12, 66), bool] */;
  (%184, %185, meta[relay.Constant][15] /* ty=Tensor[(1792), bool] */, %186, %187)
}

def @func_8605(%var_8558: Tensor[(11, 8, 6), bool], %var_8559: Tensor[(11, 8, 6), bool]) -> (Tensor[(840), float32], Tensor[(?, 16, 8), float32], Tensor[(11, 8, 6), uint64]) {
  %188 = @func_6667() /* ty=(Tensor[(840), float32],) */;
  %189 = @func_5844() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %190 = %189.0;
  %191 = @func_7278() /* ty=(Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool]) */;
  %192 = %191.0;
  %193 = cast(%192, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
  %194 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%190, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %197 = cast(%var_8559, dtype="bool") /* ty=Tensor[(11, 8, 6), bool] */;
  %198 = shape_of(%var_8558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%var_8558, dtype="bool") /* ty=Tensor[(11, 8, 6), bool] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %201 = logical_and(%199, %200) /* ty=Tensor[(11, 8, 6), bool] */;
  %202 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 8, 6), bool] */, dtype="uint64") /* ty=Tensor[(11, 8, 6), uint64] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%201, dtype="uint64") /* ty=Tensor[(11, 8, 6), uint64] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %206 = %188.0;
  %207 = subtract(%195, %196) /* ty=Tensor[(?, 16, 8), float32] */;
  %208 = logical_xor(%204, %205) /* ty=Tensor[(11, 8, 6), uint64] */;
  (%206, %207, %208)
}

def @func_8120(%var_8031: Tensor[(756), float64], %var_8055: Tensor[(2016), float32], %var_8090: Tensor[(11, 154), uint32]) -> (Tensor[(1, 16, 8), bool], Tensor[(756), float64], Tensor[(14, 3, 9), float32], Tensor[(135), float64], Tensor[(378), float32], Tensor[(11, 14, 11), float32], Tensor[(11, 154), uint32], Tensor[(12, 12, 14), float64]) {
  %209 = cast(%var_8031, dtype="float64") /* ty=Tensor[(756), float64] */;
  %210 = reshape(%209, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float64] */;
  %211 = @func_2585(%210) /* ty=Tensor[(9, 7, 12), uint8] */;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(9, 7, 12), float64] */;
  %213 = shape_of(%var_8031, dtype="int32") /* ty=Tensor[(1), int32] */;
  %214 = cast(%var_8031, dtype="float64") /* ty=Tensor[(756), float64] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?), float64] */;
  %216 = cast(meta[relay.Constant][17] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %217 = cast(meta[relay.Constant][18] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %218 = cast(meta[relay.Constant][17] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %219 = reshape(%216, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float64] */;
  %220 = reshape(%217, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %221 = reshape(%218, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float64] */;
  %222 = @func_2462(%219, %220, %221) /* ty=(Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(3, 9, 5), bool]) */;
  %223 = cast(%var_8090, dtype="uint32") /* ty=Tensor[(11, 154), uint32] */;
  %224 = cast(%var_8090, dtype="uint32") /* ty=Tensor[(11, 154), uint32] */;
  %225 = reshape(%223, newshape=[11, 14, 11]) /* ty=Tensor[(11, 14, 11), uint32] */;
  %226 = reshape(%224, newshape=[11, 14, 11]) /* ty=Tensor[(11, 14, 11), uint32] */;
  %227 = @func_896(%225, %226) /* ty=(Tensor[(11, 14, 11), float32],) */;
  %228 = cast(%var_8055, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %229 = reshape(%228, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), float32] */;
  %230 = @func_3104(%229) /* ty=(Tensor[(12, 12, 14), float32],) */;
  %231 = %230.0;
  %232 = cast(%var_8055, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%231, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %236 = @func_5888() /* ty=Tensor[(1, 16, 8), bool] */;
  %237 = power(%214, %215) /* ty=Tensor[(756), float64] */;
  %238 = %222.0;
  %239 = %227.0;
  %240 = floor_mod(%234, %235) /* ty=Tensor[(12, 12, 14), float64] */;
  (%236, %237, %238, meta[relay.Constant][17] /* ty=Tensor[(135), float64] */, meta[relay.Constant][18] /* ty=Tensor[(378), float32] */, %239, %var_8090, %240)
}

def @func_1484(%var_1476: Tensor[(3, 9, 16), float64]) -> (Tensor[(3, 9, 16), float32],) {
  %241 = cast(%var_1476, dtype="float64") /* ty=Tensor[(3, 9, 16), float64] */;
  %242 = atanh(%241) /* ty=Tensor[(3, 9, 16), float64] */;
  %243 = cast(%242, dtype="float32") /* ty=Tensor[(3, 9, 16), float32] */;
  %244 = asinh(%243) /* ty=Tensor[(3, 9, 16), float32] */;
  (%244,)
}

def @func_5804(%var_5787: Tensor[(13, 1), float64]) -> Tensor[(13, 1), float64] {
  %245 = cast(%var_5787, dtype="float64") /* ty=Tensor[(13, 1), float64] */;
  acos(%245) /* ty=Tensor[(13, 1), float64] */
}

def @func_440(%var_419: Tensor[(1, 12, 1), float64], %var_433: Tensor[(560), uint8]) -> (Tensor[(1, 12, 1), float64], Tensor[(8, 5, 14), bool], Tensor[(560), uint8], Tensor[(8, 5, 14), bool]) {
  %246 = cast(%var_419, dtype="float64") /* ty=Tensor[(1, 12, 1), float64] */;
  %247 = cast(%var_433, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %248 = reshape(%247, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint8] */;
  %249 = @func_303(%248) /* ty=Tensor[(8, 5, 14), bool] */;
  %250 = cast(%249, dtype="uint8") /* ty=Tensor[(8, 5, 14), uint8] */;
  %251 = reshape(%250, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint8] */;
  %252 = acosh(%246) /* ty=Tensor[(1, 12, 1), float64] */;
  %253 = @func_303(%251) /* ty=Tensor[(8, 5, 14), bool] */;
  (%252, %249, %var_433, %253)
}

def @func_8851() -> Tensor[(840), float32] {
  %254 = @func_6667() /* ty=(Tensor[(840), float32],) */;
  %254.0
}

def @func_7278() -> (Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool]) {
  %255 = @func_6304() /* ty=Tensor[(1, 16, 8), bool] */;
  %256 = @func_6261() /* ty=Tensor[(1, 16, 8), bool] */;
  (%255, %256)
}

def @func_7367() -> (Tensor[(1, 16, 8), bool],) {
  %257 = @func_6474() /* ty=Tensor[(1, 16, 8), bool] */;
  (%257,)
}

def @func_186(%var_174: Tensor[(13, 13, 15), int64]) -> (Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), float64]) {
  %258 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 13, 15), int64] */, dtype="bool") /* ty=Tensor[(13, 13, 15), bool] */;
  %259 = shape_of(%var_174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%var_174, dtype="bool") /* ty=Tensor[(13, 13, 15), bool] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %262 = cast(%var_174, dtype="float64") /* ty=Tensor[(13, 13, 15), float64] */;
  %263 = greater_equal(%260, %261) /* ty=Tensor[(13, 13, 15), bool] */;
  %264 = rsqrt(%262) /* ty=Tensor[(13, 13, 15), float64] */;
  (%263, %264)
}

def @func_8900() -> (Tensor[(1, 16, 8), bool],) {
  %265 = @func_8773() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %266 = %265.0;
  (%266,)
}

def @func_5994() -> (Tensor[(1, 16, 8), bool],) {
  %267 = @func_5657() /* ty=Tensor[(1, 16, 8), bool] */;
  (%267,)
}

def @func_8464(%var_8439: Tensor[(3, 45), float64], %var_8444: Tensor[(3, 45), float64]) -> (Tensor[(1, 16, 8), bool], Tensor[(756), float64], Tensor[(3, 45), float64]) {
  %268 = cast(%var_8439, dtype="float64") /* ty=Tensor[(3, 45), float64] */;
  %269 = reshape(%268, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %270 = @func_7060(%269) /* ty=(Tensor[(1, 16, 8), bool], Tensor[(14, 1), bool], uint32, Tensor[(14), uint32], Tensor[(9, 7, 12), uint8], Tensor[(1008), float32], Tensor[(756), float64], Tensor[(135), float64], Tensor[(39, 4), float32]) */;
  %271 = cast(%var_8444, dtype="float64") /* ty=Tensor[(3, 45), float64] */;
  %272 = shape_of(%var_8439, dtype="int32") /* ty=Tensor[(2), int32] */;
  %273 = cast(%var_8439, dtype="float64") /* ty=Tensor[(3, 45), float64] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %275 = @func_6331() /* ty=Tensor[(1, 16, 8), bool] */;
  %276 = %270.6;
  %277 = divide(%273, %274) /* ty=Tensor[(3, 45), float64] */;
  (%275, %276, %277)
}

def @func_4702(%var_4655: Tensor[(11, 9, 2), float32], %var_4676: Tensor[(2016, 1), float32]) -> (Tensor[(11, 9, 2), float32], Tensor[(14, 4, 15), float32], Tensor[(840), float32], Tensor[(12, 12, 14), float32], Tensor[(2016, 1), float32]) {
  %278 = cast(%var_4655, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
  %279 = cast(meta[relay.Constant][20] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %280 = reshape(%279, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float32] */;
  %281 = cast(%var_4676, dtype="float32") /* ty=Tensor[(2016, 1), float32] */;
  %282 = reshape(%281, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), float32] */;
  %283 = @func_3104(%282) /* ty=(Tensor[(12, 12, 14), float32],) */;
  %284 = sinh(%278) /* ty=Tensor[(11, 9, 2), float32] */;
  %285 = @func_3438(%280) /* ty=Tensor[(14, 4, 15), float32] */;
  %286 = %283.0;
  (%284, %285, meta[relay.Constant][20] /* ty=Tensor[(840), float32] */, %286, %var_4676)
}

def @func_2462(%var_2432: Tensor[(3, 9, 5), float64], %var_2441: Tensor[(378), float32], %var_2458: Tensor[(3, 9, 5), float64]) -> (Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(3, 9, 5), bool]) {
  %287 = cast(-7.16646f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %288 = cast(%var_2441, dtype="float32") /* ty=Tensor[(378), float32] */;
  %289 = reshape(%287, newshape=[]) /* ty=float32 */;
  %290 = reshape(%288, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), float32] */;
  %291 = cast(meta[relay.Constant][21] /* ty=Tensor[(2535), int64] */, dtype="int64") /* ty=Tensor[(2535), int64] */;
  %292 = reshape(%291, newshape=[13, 13, 15]) /* ty=Tensor[(13, 13, 15), int64] */;
  %293 = @func_186(%292) /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), float64]) */;
  %294 = cast(%var_2432, dtype="float64") /* ty=Tensor[(3, 9, 5), float64] */;
  %295 = tan(%294) /* ty=Tensor[(3, 9, 5), float64] */;
  %296 = cast(%var_2458, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
  %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%295, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %300 = @func_2157(%289, %290) /* ty=Tensor[(14, 3, 9), float32] */;
  %301 = %293.1;
  %302 = equal(%298, %299) /* ty=Tensor[(3, 9, 5), bool] */;
  (%300, -7.16646f /* ty=float32 */, %var_2441, %301, meta[relay.Constant][21] /* ty=Tensor[(2535), int64] */, %302)
}

def @func_4484(%var_4455: Tensor[(2, 1, 16), float64], %var_4456: Tensor[(2, 5, 16), float64]) -> (Tensor[(2, 5, 16), float64],) {
  %303 = cast(%var_4455, dtype="float64") /* ty=Tensor[(2, 1, 16), float64] */;
  %304 = cast(%var_4456, dtype="float64") /* ty=Tensor[(2, 5, 16), float64] */;
  %305 = multiply(%303, %304) /* ty=Tensor[(2, 5, 16), float64] */;
  (%305,)
}

def @func_6860() -> (Tensor[(13, 13, 15), float64],) {
  %306 = @func_5703() /* ty=(Tensor[(?, 16, 8), int16], Tensor[(13, 13, 15), bool], Tensor[(2535), int64], Tensor[(11, 14, 11), float32], Tensor[(1694), uint32]) */;
  %307 = %306.1;
  %308 = cast(%307, dtype="float64") /* ty=Tensor[(13, 13, 15), float64] */;
  %309 = sinh(%308) /* ty=Tensor[(13, 13, 15), float64] */;
  (%309,)
}

def @func_5408(%var_5389: Tensor[(16, 16, 8), bool], %var_5400: Tensor[(72), float64]) -> (Tensor[(16, 16, 8), float64], Tensor[(4, 2, 9), float64], Tensor[(72), float64]) {
  %310 = @func_5217() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %311 = %310.0;
  %312 = cast(%311, dtype="float64") /* ty=Tensor[(1, 16, 8), float64] */;
  %313 = cast(%var_5389, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
  %314 = cast(%var_5400, dtype="float64") /* ty=Tensor[(72), float64] */;
  %315 = reshape(%314, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %316 = multiply(%312, %313) /* ty=Tensor[(16, 16, 8), float64] */;
  %317 = @func_4824(%315) /* ty=Tensor[(4, 2, 9), float64] */;
  (%316, %317, %var_5400)
}

def @func_2800(%var_2679: Tensor[(4, 7, 3), float32], %var_2680: Tensor[(4, 7, 3), float32], %var_2694: Tensor[(336), float64], %var_2730: Tensor[(378), float32], %var_2772: Tensor[(2535), int64], %var_2787: Tensor[(16), uint32]) -> (Tensor[(4, 7, 3), bool], Tensor[(12), float64], Tensor[(336), float64], float32, Tensor[(14, 3, 9), float32], Tensor[(378), float32], Tensor[(4, 7, 3), int32], Tensor[(14, 3, 9), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(14, 1), bool], Tensor[(?, 2, 8), uint32], Tensor[(16), uint32]) {
  %318 = cast(%var_2680, dtype="bool") /* ty=Tensor[(4, 7, 3), bool] */;
  %319 = shape_of(%var_2679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%var_2679, dtype="bool") /* ty=Tensor[(4, 7, 3), bool] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %322 = cast(%var_2694, dtype="float64") /* ty=Tensor[(336), float64] */;
  %323 = reshape(%322, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), float64] */;
  %324 = @func_2386(%323) /* ty=(Tensor[(12, 2, 14), float64], Tensor[(12), float64], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(14, 1), bool], Tensor[(14), uint32]) */;
  %325 = cast(%var_2694, dtype="float64") /* ty=Tensor[(336), float64] */;
  %326 = reshape(%325, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), float64] */;
  %327 = @func_2386(%326) /* ty=(Tensor[(12, 2, 14), float64], Tensor[(12), float64], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(14, 1), bool], Tensor[(14), uint32]) */;
  %328 = %327.5;
  %329 = cast(%328, dtype="float32") /* ty=float32 */;
  %330 = cast(%var_2730, dtype="float32") /* ty=Tensor[(378), float32] */;
  %331 = reshape(%329, newshape=[]) /* ty=float32 */;
  %332 = reshape(%330, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), float32] */;
  %333 = cast(%var_2680, dtype="float32") /* ty=Tensor[(4, 7, 3), float32] */;
  %334 = rsqrt(%333) /* ty=Tensor[(4, 7, 3), float32] */;
  %335 = cast(%var_2680, dtype="int32") /* ty=Tensor[(4, 7, 3), int32] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%334, dtype="int32") /* ty=Tensor[(4, 7, 3), int32] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %339 = cast(%var_2694, dtype="float64") /* ty=Tensor[(336), float64] */;
  %340 = reshape(%339, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), float64] */;
  %341 = @func_2386(%340) /* ty=(Tensor[(12, 2, 14), float64], Tensor[(12), float64], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(14, 1), bool], Tensor[(14), uint32]) */;
  %342 = cast(%var_2772, dtype="int64") /* ty=Tensor[(2535), int64] */;
  %343 = reshape(%342, newshape=[13, 13, 15]) /* ty=Tensor[(13, 13, 15), int64] */;
  %344 = @func_186(%343) /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), float64]) */;
  %345 = cast(%var_2694, dtype="float64") /* ty=Tensor[(336), float64] */;
  %346 = reshape(%345, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), float64] */;
  %347 = @func_2386(%346) /* ty=(Tensor[(12, 2, 14), float64], Tensor[(12), float64], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(14, 1), bool], Tensor[(14), uint32]) */;
  %348 = cast(%var_2787, dtype="uint32") /* ty=Tensor[(16), uint32] */;
  %349 = reshape(%348, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), uint32] */;
  %350 = @func_805(%349) /* ty=(Tensor[(?, 2, 8), uint32],) */;
  %351 = greater(%320, %321) /* ty=Tensor[(4, 7, 3), bool] */;
  %352 = %324.1;
  %353 = @func_2157(%331, %332) /* ty=Tensor[(14, 3, 9), float32] */;
  %354 = bitwise_or(%337, %338) /* ty=Tensor[(4, 7, 3), int32] */;
  %355 = %341.4;
  %356 = %344.1;
  %357 = %347.7;
  %358 = %350.0;
  (%351, %352, %var_2694, %328, %353, %var_2730, %354, %355, %356, %var_2772, %357, %358, %var_2787)
}

def @func_7537(%var_7507: Tensor[(432), float64]) -> (Tensor[(1, 16, 8), bool], Tensor[(3, 9, 16), float32], Tensor[(432), float64]) {
  %359 = cast(%var_7507, dtype="float64") /* ty=Tensor[(432), float64] */;
  %360 = reshape(%359, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), float64] */;
  %361 = @func_1484(%360) /* ty=(Tensor[(3, 9, 16), float32],) */;
  %362 = @func_5639() /* ty=Tensor[(1, 16, 8), bool] */;
  %363 = %361.0;
  (%362, %363, %var_7507)
}

def @func_8551() -> (Tensor[(13, 1), float64],) {
  %364 = @func_7624() /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 1), float64], Tensor[(13), float64]) */;
  %365 = %364.1;
  (%365,)
}

def @func_5295() -> Tensor[(1, 16, 8), bool] {
  %366 = @func_5217() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %366.0
}

def @func_5860() -> (Tensor[(1, 16, 8), bool],) {
  %367 = @func_4894() /* ty=Tensor[(1, 16, 8), bool] */;
  (%367,)
}

def @func_9243() -> Tensor[(1, 16, 8), bool] {
  %368 = @func_8900() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %368.0
}

def @func_1729(%var_1699: float64, %var_1700: Tensor[(16, 6, 16), float64]) -> Tensor[(16, 6, 16), float64] {
  %369 = cast(%var_1699, dtype="float64") /* ty=float64 */;
  %370 = cast(%var_1700, dtype="float64") /* ty=Tensor[(16, 6, 16), float64] */;
  floor_divide(%369, %370) /* ty=Tensor[(16, 6, 16), float64] */
}

def @func_6239() -> (Tensor[(1, 16, 8), bool],) {
  %371 = @func_5295() /* ty=Tensor[(1, 16, 8), bool] */;
  (%371,)
}

def @func_725(%var_699: uint32, %var_700: Tensor[(14, 1), uint32]) -> (Tensor[(14, 1), bool],) {
  %372 = cast(%var_699, dtype="bool") /* ty=bool */;
  %373 = cast(%var_700, dtype="bool") /* ty=Tensor[(14, 1), bool] */;
  %374 = less(%372, %373) /* ty=Tensor[(14, 1), bool] */;
  (%374,)
}

def @func_4232(%var_4202: Tensor[(7, 10, 8), uint32], %var_4203: Tensor[(7, 10, 8), uint32]) -> (Tensor[(7, 10, 8), bool], Tensor[(7, 10, 8), float64]) {
  %375 = cast(%var_4203, dtype="uint32") /* ty=Tensor[(7, 10, 8), uint32] */;
  %376 = shape_of(%var_4202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%var_4202, dtype="uint32") /* ty=Tensor[(7, 10, 8), uint32] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %379 = add(%377, %378) /* ty=Tensor[(7, 10, 8), uint32] */;
  %380 = cast(%var_4202, dtype="float32") /* ty=Tensor[(7, 10, 8), float32] */;
  %381 = log10(%380) /* ty=Tensor[(7, 10, 8), float32] */;
  %382 = cast(%381, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
  %383 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%379, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %386 = cast(%var_4203, dtype="float64") /* ty=Tensor[(7, 10, 8), float64] */;
  %387 = logical_and(%384, %385) /* ty=Tensor[(7, 10, 8), bool] */;
  %388 = rsqrt(%386) /* ty=Tensor[(7, 10, 8), float64] */;
  (%387, %388)
}

def @func_6768() -> Tensor[(1, 16, 8), float64] {
  %389 = @func_5860() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %390 = %389.0;
  %391 = cast(%390, dtype="float64") /* ty=Tensor[(1, 16, 8), float64] */;
  log10(%391) /* ty=Tensor[(1, 16, 8), float64] */
}

def @func_7716() -> Tensor[(1, 16, 8), bool] {
  %392 = @func_7278() /* ty=(Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool]) */;
  %392.1
}

def @func_7372() -> Tensor[(13, 13, 15), bool] {
  %393 = @func_6615() /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), bool]) */;
  %393.0
}

def @func_8751(%var_8689: Tensor[(12, 16, 8), bool], %var_8730: Tensor[(12, 16, 8), float32]) -> (Tensor[(12, 16, 8), bool], Tensor[(14, 16, 8), uint16], Tensor[(2, 896), bool], Tensor[(12, 16, 8), int8], Tensor[(840), float32]) {
  %394 = @func_5295() /* ty=Tensor[(1, 16, 8), bool] */;
  %395 = cast(%394, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
  %396 = cast(%var_8689, dtype="bool") /* ty=Tensor[(12, 16, 8), bool] */;
  %397 = not_equal(%395, %396) /* ty=Tensor[(12, 16, 8), bool] */;
  %398 = @func_4943() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %399 = %398.0;
  %400 = cast(%397, dtype="bool") /* ty=Tensor[(12, 16, 8), bool] */;
  %401 = cast(%399, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
  %402 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 896), bool] */, dtype="bool") /* ty=Tensor[(2, 896), bool] */;
  %403 = reshape(%402, newshape=[14, 16, 8]) /* ty=Tensor[(14, 16, 8), bool] */;
  %404 = cast(%var_8689, dtype="float32") /* ty=Tensor[(12, 16, 8), float32] */;
  %405 = log2(%404) /* ty=Tensor[(12, 16, 8), float32] */;
  %406 = cast(%var_8730, dtype="int8") /* ty=Tensor[(12, 16, 8), int8] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%405, dtype="int8") /* ty=Tensor[(12, 16, 8), int8] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %410 = @func_6667() /* ty=(Tensor[(840), float32],) */;
  %411 = logical_or(%400, %401) /* ty=Tensor[(12, 16, 8), bool] */;
  %412 = @func_6231(%403) /* ty=Tensor[(14, 16, 8), uint16] */;
  %413 = maximum(%408, %409) /* ty=Tensor[(12, 16, 8), int8] */;
  %414 = %410.0;
  (%411, %412, meta[relay.Constant][22] /* ty=Tensor[(2, 896), bool] */, %413, %414)
}

def @func_9093(%var_9031: Tensor[(7, 8, 3), float32]) -> (Tensor[(7, 8, 3), int16], Tensor[(1, 16, 8), bool], Tensor[(13, 1), float64], Tensor[(13, 1), float64], Tensor[(?, 16, 8), float32], Tensor[(528), bool], Tensor[(1, 16, 8), bool]) {
  %415 = cast(%var_9031, dtype="float32") /* ty=Tensor[(7, 8, 3), float32] */;
  %416 = cosh(%415) /* ty=Tensor[(7, 8, 3), float32] */;
  %417 = cast(%var_9031, dtype="int16") /* ty=Tensor[(7, 8, 3), int16] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%416, dtype="int16") /* ty=Tensor[(7, 8, 3), int16] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %421 = @func_8900() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %422 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 1), float64] */, dtype="float64") /* ty=Tensor[(13, 1), float64] */;
  %423 = reshape(%422, newshape=[13, 1]) /* ty=Tensor[(13, 1), float64] */;
  %424 = cast(meta[relay.Constant][24] /* ty=Tensor[(528), bool] */, dtype="bool") /* ty=Tensor[(528), bool] */;
  %425 = cast(meta[relay.Constant][24] /* ty=Tensor[(528), bool] */, dtype="bool") /* ty=Tensor[(528), bool] */;
  %426 = reshape(%424, newshape=[11, 8, 6]) /* ty=Tensor[(11, 8, 6), bool] */;
  %427 = reshape(%425, newshape=[11, 8, 6]) /* ty=Tensor[(11, 8, 6), bool] */;
  %428 = @func_8605(%426, %427) /* ty=(Tensor[(840), float32], Tensor[(?, 16, 8), float32], Tensor[(11, 8, 6), uint64]) */;
  %429 = add(%419, %420) /* ty=Tensor[(7, 8, 3), int16] */;
  %430 = %421.0;
  %431 = @func_5804(%423) /* ty=Tensor[(13, 1), float64] */;
  %432 = %428.1;
  %433 = @func_7716() /* ty=Tensor[(1, 16, 8), bool] */;
  (%429, %430, %431, meta[relay.Constant][23] /* ty=Tensor[(13, 1), float64] */, %432, meta[relay.Constant][24] /* ty=Tensor[(528), bool] */, %433)
}

def @func_5936(%var_5927: Tensor[(15, 16, 8), bool]) -> Tensor[(15, 16, 8), bool] {
  %434 = @func_5657() /* ty=Tensor[(1, 16, 8), bool] */;
  %435 = cast(%434, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
  %436 = cast(%var_5927, dtype="bool") /* ty=Tensor[(15, 16, 8), bool] */;
  logical_or(%435, %436) /* ty=Tensor[(15, 16, 8), bool] */
}

def @func_4254(%var_4238: Tensor[(9, 8, 11), uint64]) -> (Tensor[(9, 8, 11), bool], Tensor[(9, 7, 12), uint8], Tensor[(756), float64]) {
  %437 = cast(%var_4238, dtype="bool") /* ty=Tensor[(9, 8, 11), bool] */;
  %438 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(9, 8, 11), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 8, 11), uint64] */, dtype="bool") /* ty=Tensor[(9, 8, 11), bool] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %441 = cast(meta[relay.Constant][26] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %442 = reshape(%441, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float64] */;
  %443 = equal(%439, %440) /* ty=Tensor[(9, 8, 11), bool] */;
  %444 = @func_2585(%442) /* ty=Tensor[(9, 7, 12), uint8] */;
  (%443, %444, meta[relay.Constant][26] /* ty=Tensor[(756), float64] */)
}

def @func_7989() -> (Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool]) {
  %445 = @func_7124() /* ty=Tensor[(1, 16, 8), bool] */;
  %446 = @func_6304() /* ty=Tensor[(1, 16, 8), bool] */;
  (%445, %446)
}

def @func_8329(%var_8280: Tensor[(32), float64], %var_8282: Tensor[(378), float32]) -> (Tensor[(1920), float64], Tensor[(32), float64], Tensor[(1080), float32], Tensor[(378), float32], Tensor[(15, 16, 8), bool]) {
  %447 = @func_7124() /* ty=Tensor[(1, 16, 8), bool] */;
  %448 = cast(meta[relay.Constant][27] /* ty=Tensor[(1920), float64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %449 = cast(%var_8280, dtype="float64") /* ty=Tensor[(32), float64] */;
  %450 = cast(meta[relay.Constant][28] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %451 = cast(%var_8282, dtype="float32") /* ty=Tensor[(378), float32] */;
  %452 = reshape(%448, newshape=[15, 16, 8]) /* ty=Tensor[(15, 16, 8), float64] */;
  %453 = reshape(%449, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %454 = reshape(%450, newshape=[1080]) /* ty=Tensor[(1080), float32] */;
  %455 = reshape(%451, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %456 = @func_5175(%452, %453, %454, %455) /* ty=(Tensor[(?, 16, 8), bool], Tensor[(15, 16, 8), bool], Tensor[(2, 5, 16), float64], Tensor[(32), float64], Tensor[(8, 20), float64], Tensor[(560), uint8], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], float32, Tensor[(3, 45), float64], Tensor[(378), float32]) */;
  %457 = %456.1;
  %458 = cast(%447, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
  %459 = cast(%457, dtype="bool") /* ty=Tensor[(15, 16, 8), bool] */;
  %460 = equal(%458, %459) /* ty=Tensor[(15, 16, 8), bool] */;
  (meta[relay.Constant][27] /* ty=Tensor[(1920), float64] */, %var_8280, meta[relay.Constant][28] /* ty=Tensor[(1080), float32] */, %var_8282, %460)
}

def @func_7932() -> (Tensor[(2535), int64], Tensor[(135), float64], Tensor[(378), float32], Tensor[(1, 16, 8), float32], Tensor[(?, 16, 8), int8], Tensor[(?, 16, 8), float32]) {
  %461 = cast(meta[relay.Constant][29] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %462 = cast(meta[relay.Constant][30] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %463 = cast(meta[relay.Constant][29] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %464 = reshape(%461, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float64] */;
  %465 = reshape(%462, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %466 = reshape(%463, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float64] */;
  %467 = @func_2462(%464, %465, %466) /* ty=(Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(3, 9, 5), bool]) */;
  %468 = @func_5657() /* ty=Tensor[(1, 16, 8), bool] */;
  %469 = cast(%468, dtype="float64") /* ty=Tensor[(1, 16, 8), float64] */;
  %470 = atan(%469) /* ty=Tensor[(1, 16, 8), float64] */;
  %471 = cast(%470, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
  %472 = @func_6474() /* ty=Tensor[(1, 16, 8), bool] */;
  %473 = cast(%472, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
  %474 = reshape(%473, newshape=[1, 16, 8]) /* ty=Tensor[(1, 16, 8), bool] */;
  %475 = cast(%472, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
  %476 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%470, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %479 = %467.4;
  %480 = asinh(%471) /* ty=Tensor[(1, 16, 8), float32] */;
  %481 = @func_6199(%474) /* ty=Tensor[(?, 16, 8), int8] */;
  %482 = floor_divide(%477, %478) /* ty=Tensor[(?, 16, 8), float32] */;
  (%479, meta[relay.Constant][29] /* ty=Tensor[(135), float64] */, meta[relay.Constant][30] /* ty=Tensor[(378), float32] */, %480, %481, %482)
}

def @func_9214() -> Tensor[(13, 13, 15), bool] {
  %483 = @func_7624() /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 1), float64], Tensor[(13), float64]) */;
  %483.0
}

def @func_7227() -> Tensor[(2535), int64] {
  %484 = @func_6695() /* ty=(Tensor[(2535), int64],) */;
  %484.0
}

def @func_6474() -> Tensor[(1, 16, 8), bool] {
  @func_6304() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_3547(%var_3543: Tensor[(1, 12, 13), float32]) -> (Tensor[(1, 12, 13), float32],) {
  %485 = cast(%var_3543, dtype="float32") /* ty=Tensor[(1, 12, 13), float32] */;
  %486 = exp(%485) /* ty=Tensor[(1, 12, 13), float32] */;
  (%486,)
}

def @func_4967(%var_4955: Tensor[(12, 16, 8), bool]) -> (Tensor[(12, 16, 8), int64],) {
  %487 = @func_4943() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %488 = %487.0;
  %489 = cast(%488, dtype="int64") /* ty=Tensor[(1, 16, 8), int64] */;
  %490 = cast(%var_4955, dtype="int64") /* ty=Tensor[(12, 16, 8), int64] */;
  %491 = left_shift(%489, %490) /* ty=Tensor[(12, 16, 8), int64] */;
  (%491,)
}

def @func_9159(%var_9157: Tensor[(1792), bool]) -> (Tensor[(1, 16, 8), bool], Tensor[(14, 16, 8), uint16], Tensor[(1792), bool]) {
  %492 = @func_8158() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %493 = cast(%var_9157, dtype="bool") /* ty=Tensor[(1792), bool] */;
  %494 = reshape(%493, newshape=[14, 16, 8]) /* ty=Tensor[(14, 16, 8), bool] */;
  %495 = %492.0;
  %496 = @func_6231(%494) /* ty=Tensor[(14, 16, 8), uint16] */;
  (%495, %496, %var_9157)
}

def @func_6304() -> Tensor[(1, 16, 8), bool] {
  @func_5888() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_8226() -> Tensor[(1, 16, 8), bool] {
  @func_6331() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_5217() -> (Tensor[(1, 16, 8), bool],) {
  %497 = @func_4943() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %498 = %497.0;
  (%498,)
}

def @func_8397() -> (Tensor[(4, 16, 8), int8],) {
  %499 = @func_8184() /* ty=Tensor[(1, 16, 8), bool] */;
  %500 = cast(%499, dtype="int8") /* ty=Tensor[(1, 16, 8), int8] */;
  %501 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 16, 8), bool] */, dtype="int8") /* ty=Tensor[(4, 16, 8), int8] */;
  %502 = right_shift(%500, %501) /* ty=Tensor[(4, 16, 8), int8] */;
  (%502,)
}

def @func_5844() -> (Tensor[(1, 16, 8), bool],) {
  %503 = @func_5295() /* ty=Tensor[(1, 16, 8), bool] */;
  (%503,)
}

def @func_4894() -> Tensor[(1, 16, 8), bool] {
  %504 = cast(-2.50037f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %505 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 16, 8), float32] */, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
  not_equal(%504, %505) /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_6401(%var_6376: Tensor[(16), uint32]) -> (Tensor[(1, 16, 8), bool], Tensor[(16), uint32], Tensor[(?, 2, 8), float64]) {
  %506 = @func_6239() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %507 = cast(%var_6376, dtype="uint32") /* ty=Tensor[(16), uint32] */;
  %508 = reshape(%507, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), uint32] */;
  %509 = @func_805(%508) /* ty=(Tensor[(?, 2, 8), uint32],) */;
  %510 = %509.0;
  %511 = cast(%510, dtype="float64") /* ty=Tensor[(?, 2, 8), float64] */;
  %512 = %506.0;
  %513 = atan(%511) /* ty=Tensor[(?, 2, 8), float64] */;
  (%512, %var_6376, %513)
}

def @func_5888() -> Tensor[(1, 16, 8), bool] {
  %514 = @func_4943() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %514.0
}

def @func_7427(%var_7413: Tensor[(16), uint32]) -> (Tensor[(1, 16, 8), float64], Tensor[(2535), int64], Tensor[(1, 16, 8), bool], Tensor[(?, 2, 8), uint32], Tensor[(16), uint32]) {
  %515 = cast(%var_7413, dtype="uint32") /* ty=Tensor[(16), uint32] */;
  %516 = reshape(%515, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), uint32] */;
  %517 = @func_805(%516) /* ty=(Tensor[(?, 2, 8), uint32],) */;
  %518 = @func_6768() /* ty=Tensor[(1, 16, 8), float64] */;
  %519 = @func_7227() /* ty=Tensor[(2535), int64] */;
  %520 = @func_4894() /* ty=Tensor[(1, 16, 8), bool] */;
  %521 = %517.0;
  (%518, %519, %520, %521, %var_7413)
}

def @func_8866() -> (Tensor[(1, 16, 8), bool],) {
  %522 = @func_8226() /* ty=Tensor[(1, 16, 8), bool] */;
  (%522,)
}

def @func_564(%var_536: Tensor[(15, 9, 8), float32], %var_540: Tensor[(12), float64]) -> (Tensor[(8, 5, 14), bool], Tensor[(12), float64], Tensor[(560), uint8], Tensor[(15, 9, 8), int16], Tensor[(15, 9, 8), bool]) {
  %523 = cast(%var_540, dtype="float64") /* ty=Tensor[(12), float64] */;
  %524 = cast(meta[relay.Constant][33] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %525 = reshape(%523, newshape=[1, 12, 1]) /* ty=Tensor[(1, 12, 1), float64] */;
  %526 = reshape(%524, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %527 = @func_440(%525, %526) /* ty=(Tensor[(1, 12, 1), float64], Tensor[(8, 5, 14), bool], Tensor[(560), uint8], Tensor[(8, 5, 14), bool]) */;
  %528 = cast(%var_536, dtype="float32") /* ty=Tensor[(15, 9, 8), float32] */;
  %529 = atanh(%528) /* ty=Tensor[(15, 9, 8), float32] */;
  %530 = cast(%529, dtype="int16") /* ty=Tensor[(15, 9, 8), int16] */;
  %531 = shape_of(%var_536, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%var_536, dtype="int16") /* ty=Tensor[(15, 9, 8), int16] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %534 = cast(%var_536, dtype="bool") /* ty=Tensor[(15, 9, 8), bool] */;
  %535 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%529, dtype="bool") /* ty=Tensor[(15, 9, 8), bool] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %538 = %527.3;
  %539 = left_shift(%532, %533) /* ty=Tensor[(15, 9, 8), int16] */;
  %540 = less_equal(%536, %537) /* ty=Tensor[(15, 9, 8), bool] */;
  (%538, %var_540, meta[relay.Constant][33] /* ty=Tensor[(560), uint8] */, %539, %540)
}

def @func_6977(%var_6971: Tensor[(9, 14, 10), int64], %var_6972: Tensor[(9, 14, 10), int64]) -> (Tensor[(9, 14, 10), int64],) {
  %541 = cast(%var_6972, dtype="int64") /* ty=Tensor[(9, 14, 10), int64] */;
  %542 = shape_of(%var_6971, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%var_6971, dtype="int64") /* ty=Tensor[(9, 14, 10), int64] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %545 = bitwise_or(%543, %544) /* ty=Tensor[(9, 14, 10), int64] */;
  (%545,)
}

def @func_7813(%var_7808: Tensor[(15, 4, 13), float32]) -> (Tensor[(15, 4, 13), float32],) {
  %546 = cast(%var_7808, dtype="float32") /* ty=Tensor[(15, 4, 13), float32] */;
  %547 = acos(%546) /* ty=Tensor[(15, 4, 13), float32] */;
  (%547,)
}

def @func_2585(%var_2571: Tensor[(9, 7, 12), float64]) -> Tensor[(9, 7, 12), uint8] {
  %548 = cast(%var_2571, dtype="float64") /* ty=Tensor[(9, 7, 12), float64] */;
  %549 = rsqrt(%548) /* ty=Tensor[(9, 7, 12), float64] */;
  %550 = cast(%var_2571, dtype="uint8") /* ty=Tensor[(9, 7, 12), uint8] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%549, dtype="uint8") /* ty=Tensor[(9, 7, 12), uint8] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%552, %553) /* ty=Tensor[(9, 7, 12), uint8] */
}

def @func_6832(%var_6808: Tensor[(6, 10, 3), float64], %var_6819: Tensor[(336), float64], %var_6828: Tensor[(6, 10, 3), float64]) -> (Tensor[(6, 10, 3), float64], Tensor[(13, 13, 15), float64], Tensor[(169, 15), int64], Tensor[(12), float64], Tensor[(336), float64], Tensor[(1, 16, 8), bool], Tensor[(6, 10, 3), bool]) {
  %554 = cast(%var_6808, dtype="float64") /* ty=Tensor[(6, 10, 3), float64] */;
  %555 = atan(%554) /* ty=Tensor[(6, 10, 3), float64] */;
  %556 = cast(%555, dtype="float64") /* ty=Tensor[(6, 10, 3), float64] */;
  %557 = shape_of(%var_6808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%var_6808, dtype="float64") /* ty=Tensor[(6, 10, 3), float64] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %560 = cast(meta[relay.Constant][34] /* ty=Tensor[(169, 15), int64] */, dtype="int64") /* ty=Tensor[(169, 15), int64] */;
  %561 = reshape(%560, newshape=[13, 13, 15]) /* ty=Tensor[(13, 13, 15), int64] */;
  %562 = @func_186(%561) /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), float64]) */;
  %563 = cast(%var_6819, dtype="float64") /* ty=Tensor[(336), float64] */;
  %564 = reshape(%563, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), float64] */;
  %565 = @func_2386(%564) /* ty=(Tensor[(12, 2, 14), float64], Tensor[(12), float64], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(14, 1), bool], Tensor[(14), uint32]) */;
  %566 = cast(%var_6828, dtype="bool") /* ty=Tensor[(6, 10, 3), bool] */;
  %567 = shape_of(%var_6808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%var_6808, dtype="bool") /* ty=Tensor[(6, 10, 3), bool] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %570 = floor_mod(%558, %559) /* ty=Tensor[(6, 10, 3), float64] */;
  %571 = %562.1;
  %572 = %565.1;
  %573 = @func_6304() /* ty=Tensor[(1, 16, 8), bool] */;
  %574 = logical_or(%568, %569) /* ty=Tensor[(6, 10, 3), bool] */;
  (%570, %571, meta[relay.Constant][34] /* ty=Tensor[(169, 15), int64] */, %572, %var_6819, %573, %574)
}

def @func_8635(%var_8633: Tensor[(756), float64]) -> (Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool], Tensor[(9, 7, 12), uint8], Tensor[(756), float64]) {
  %575 = @func_7151() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %576 = cast(%var_8633, dtype="float64") /* ty=Tensor[(756), float64] */;
  %577 = reshape(%576, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float64] */;
  %578 = %575.0;
  %579 = @func_4894() /* ty=Tensor[(1, 16, 8), bool] */;
  %580 = @func_2585(%577) /* ty=Tensor[(9, 7, 12), uint8] */;
  (%578, %579, %580, %var_8633)
}

def @func_896(%var_883: Tensor[(11, 14, 11), uint32], %var_884: Tensor[(11, 14, 11), uint32]) -> (Tensor[(11, 14, 11), float32],) {
  %581 = cast(%var_884, dtype="uint32") /* ty=Tensor[(11, 14, 11), uint32] */;
  %582 = shape_of(%var_883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%var_883, dtype="uint32") /* ty=Tensor[(11, 14, 11), uint32] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %585 = bitwise_xor(%583, %584) /* ty=Tensor[(11, 14, 11), uint32] */;
  %586 = cast(%585, dtype="float32") /* ty=Tensor[(11, 14, 11), float32] */;
  %587 = erf(%586) /* ty=Tensor[(11, 14, 11), float32] */;
  (%587,)
}

def @func_8000() -> (Tensor[(1, 16, 8), bool], Tensor[(9, 14, 10), int64], Tensor[(1260), int64]) {
  %588 = cast(meta[relay.Constant][35] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %589 = cast(meta[relay.Constant][35] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %590 = reshape(%588, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int64] */;
  %591 = reshape(%589, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int64] */;
  %592 = @func_6977(%590, %591) /* ty=(Tensor[(9, 14, 10), int64],) */;
  %593 = @func_6331() /* ty=Tensor[(1, 16, 8), bool] */;
  %594 = %592.0;
  (%593, %594, meta[relay.Constant][35] /* ty=Tensor[(1260), int64] */)
}

def @func_6071() -> (Tensor[(1, 16, 8), bool], Tensor[(1536), bool], Tensor[(14, 1), bool], Tensor[(336), float64], Tensor[(12, 16, 8), int32], Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool], Tensor[(840), float32], Tensor[(16, 16, 8), float64], Tensor[(2048), bool], Tensor[(72), float64], Tensor[(5, 2, 3), uint16], Tensor[(30), uint16]) {
  %595 = cast(meta[relay.Constant][37] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %596 = reshape(%595, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), float64] */;
  %597 = @func_2386(%596) /* ty=(Tensor[(12, 2, 14), float64], Tensor[(12), float64], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(14, 1), bool], Tensor[(14), uint32]) */;
  %598 = cast(meta[relay.Constant][36] /* ty=Tensor[(1536), bool] */, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %599 = reshape(%598, newshape=[12, 16, 8]) /* ty=Tensor[(12, 16, 8), bool] */;
  %600 = @func_4967(%599) /* ty=(Tensor[(12, 16, 8), int64],) */;
  %601 = %600.0;
  %602 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 16, 8), int64] */, dtype="int32") /* ty=Tensor[(12, 16, 8), int32] */;
  %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%601, dtype="int32") /* ty=Tensor[(12, 16, 8), int32] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %606 = @func_6020() /* ty=(Tensor[(1, 16, 8), bool], Tensor[(16, 6, 16), float64], float64, Tensor[(1536), float64]) */;
  %607 = cast(meta[relay.Constant][39] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %608 = %597.7;
  %609 = cast(%608, dtype="uint32") /* ty=Tensor[(14, 1), uint32] */;
  %610 = reshape(%607, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %611 = reshape(%609, newshape=[14]) /* ty=Tensor[(14), uint32] */;
  %612 = @func_5561(%610, %611) /* ty=(Tensor[(1, 16, 8), bool], Tensor[(14, 4, 15), float32], Tensor[(840), float32], Tensor[(14, 1), bool], uint32, Tensor[(14), uint32]) */;
  %613 = cast(meta[relay.Constant][40] /* ty=Tensor[(2048), bool] */, dtype="bool") /* ty=Tensor[(2048), bool] */;
  %614 = cast(meta[relay.Constant][41] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %615 = reshape(%613, newshape=[16, 16, 8]) /* ty=Tensor[(16, 16, 8), bool] */;
  %616 = reshape(%614, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %617 = @func_5408(%615, %616) /* ty=(Tensor[(16, 16, 8), float64], Tensor[(4, 2, 9), float64], Tensor[(72), float64]) */;
  %618 = cast(meta[relay.Constant][42] /* ty=Tensor[(30), uint16] */, dtype="uint16") /* ty=Tensor[(30), uint16] */;
  %619 = cast(meta[relay.Constant][42] /* ty=Tensor[(30), uint16] */, dtype="uint16") /* ty=Tensor[(30), uint16] */;
  %620 = reshape(%618, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), uint16] */;
  %621 = reshape(%619, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), uint16] */;
  %622 = @func_2314(%620, %621) /* ty=(Tensor[(5, 2, 3), uint16], Tensor[(5, 2, 3), float64]) */;
  %623 = @func_5639() /* ty=Tensor[(1, 16, 8), bool] */;
  %624 = right_shift(%604, %605) /* ty=Tensor[(12, 16, 8), int32] */;
  %625 = %606.0;
  %626 = %612.0;
  %627 = %617.0;
  %628 = %622.0;
  (%623, meta[relay.Constant][36] /* ty=Tensor[(1536), bool] */, %608, meta[relay.Constant][37] /* ty=Tensor[(336), float64] */, %624, %625, %626, meta[relay.Constant][39] /* ty=Tensor[(840), float32] */, %627, meta[relay.Constant][40] /* ty=Tensor[(2048), bool] */, meta[relay.Constant][41] /* ty=Tensor[(72), float64] */, %628, meta[relay.Constant][42] /* ty=Tensor[(30), uint16] */)
}

def @func_2314(%var_2307: Tensor[(5, 2, 3), uint16], %var_2308: Tensor[(5, 2, 3), uint16]) -> (Tensor[(5, 2, 3), uint16], Tensor[(5, 2, 3), float64]) {
  %629 = cast(%var_2308, dtype="uint16") /* ty=Tensor[(5, 2, 3), uint16] */;
  %630 = shape_of(%var_2307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%var_2307, dtype="uint16") /* ty=Tensor[(5, 2, 3), uint16] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %633 = cast(%var_2307, dtype="float64") /* ty=Tensor[(5, 2, 3), float64] */;
  %634 = multiply(%631, %632) /* ty=Tensor[(5, 2, 3), uint16] */;
  %635 = exp(%633) /* ty=Tensor[(5, 2, 3), float64] */;
  (%634, %635)
}

def @func_3438(%var_3411: Tensor[(14, 4, 15), float32]) -> Tensor[(14, 4, 15), float32] {
  %636 = cast(%var_3411, dtype="float32") /* ty=Tensor[(14, 4, 15), float32] */;
  exp(%636) /* ty=Tensor[(14, 4, 15), float32] */
}

def @main() -> (Tensor[(1, 9, 15), float32],) {
  %637 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 9, 15), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 15), float32] */;
  %638 = cosh(%637) /* ty=Tensor[(1, 9, 15), float32] */;
  (%638,)
}

def @func_3656(%var_3590: Tensor[(9, 16, 7), float32], %var_3594: Tensor[(9, 16, 7), float32], %var_3605: Tensor[(756), float64], %var_3613: Tensor[(135), float64], %var_3626: Tensor[(9, 16, 7), float32], %var_3642: Tensor[(156), float32]) -> (Tensor[(9, 16, 7), float64], Tensor[(9, 7, 12), uint8], Tensor[(756), float64], Tensor[(13, 13, 15), float64], Tensor[(135), float64], Tensor[(42, 9), float32], Tensor[(9, 7, 12), uint8], Tensor[(9, 16, 7), float64], Tensor[(1, 12, 13), float32], Tensor[(156), float32]) {
  %639 = cast(%var_3590, dtype="float32") /* ty=Tensor[(9, 16, 7), float32] */;
  %640 = asin(%639) /* ty=Tensor[(9, 16, 7), float32] */;
  %641 = cast(%var_3594, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
  %642 = shape_of(%640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%640, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %645 = cast(%var_3605, dtype="float64") /* ty=Tensor[(756), float64] */;
  %646 = reshape(%645, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float64] */;
  %647 = cast(%var_3613, dtype="float64") /* ty=Tensor[(135), float64] */;
  %648 = cast(meta[relay.Constant][44] /* ty=Tensor[(42, 9), float32] */, dtype="float32") /* ty=Tensor[(42, 9), float32] */;
  %649 = cast(%var_3613, dtype="float64") /* ty=Tensor[(135), float64] */;
  %650 = reshape(%647, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float64] */;
  %651 = reshape(%648, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %652 = reshape(%649, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float64] */;
  %653 = @func_2462(%650, %651, %652) /* ty=(Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(3, 9, 5), bool]) */;
  %654 = cast(%var_3605, dtype="float64") /* ty=Tensor[(756), float64] */;
  %655 = reshape(%654, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float64] */;
  %656 = cast(%var_3626, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
  %657 = shape_of(%640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%640, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %660 = cast(%var_3642, dtype="float32") /* ty=Tensor[(156), float32] */;
  %661 = reshape(%660, newshape=[1, 12, 13]) /* ty=Tensor[(1, 12, 13), float32] */;
  %662 = @func_3547(%661) /* ty=(Tensor[(1, 12, 13), float32],) */;
  %663 = floor_mod(%643, %644) /* ty=Tensor[(9, 16, 7), float64] */;
  %664 = @func_2585(%646) /* ty=Tensor[(9, 7, 12), uint8] */;
  %665 = %653.3;
  %666 = @func_2585(%655) /* ty=Tensor[(9, 7, 12), uint8] */;
  %667 = mod(%658, %659) /* ty=Tensor[(9, 16, 7), float64] */;
  %668 = %662.0;
  (%663, %664, %var_3605, %665, %var_3613, meta[relay.Constant][44] /* ty=Tensor[(42, 9), float32] */, %666, %667, %668, %var_3642)
}

def @func_8505() -> (Tensor[(840), float32],) {
  %669 = @func_6667() /* ty=(Tensor[(840), float32],) */;
  %670 = %669.0;
  (%670,)
}

def @func_7060(%var_7048: Tensor[(135), float64]) -> (Tensor[(1, 16, 8), bool], Tensor[(14, 1), bool], uint32, Tensor[(14), uint32], Tensor[(9, 7, 12), uint8], Tensor[(1008), float32], Tensor[(756), float64], Tensor[(135), float64], Tensor[(39, 4), float32]) {
  %671 = cast(meta[relay.Constant][45] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %672 = cast(meta[relay.Constant][46] /* ty=Tensor[(14), uint32] */, dtype="uint32") /* ty=Tensor[(14), uint32] */;
  %673 = reshape(%671, newshape=[]) /* ty=uint32 */;
  %674 = reshape(%672, newshape=[14, 1]) /* ty=Tensor[(14, 1), uint32] */;
  %675 = @func_725(%673, %674) /* ty=(Tensor[(14, 1), bool],) */;
  %676 = cast(meta[relay.Constant][47] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %677 = cast(meta[relay.Constant][47] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %678 = cast(meta[relay.Constant][48] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %679 = cast(%var_7048, dtype="float64") /* ty=Tensor[(135), float64] */;
  %680 = cast(meta[relay.Constant][47] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %681 = cast(meta[relay.Constant][49] /* ty=Tensor[(39, 4), float32] */, dtype="float32") /* ty=Tensor[(39, 4), float32] */;
  %682 = reshape(%676, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), float32] */;
  %683 = reshape(%677, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), float32] */;
  %684 = reshape(%678, newshape=[756]) /* ty=Tensor[(756), float64] */;
  %685 = reshape(%679, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %686 = reshape(%680, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), float32] */;
  %687 = reshape(%681, newshape=[156]) /* ty=Tensor[(156), float32] */;
  %688 = @func_3656(%682, %683, %684, %685, %686, %687) /* ty=(Tensor[(9, 16, 7), float64], Tensor[(9, 7, 12), uint8], Tensor[(756), float64], Tensor[(13, 13, 15), float64], Tensor[(135), float64], Tensor[(42, 9), float32], Tensor[(9, 7, 12), uint8], Tensor[(9, 16, 7), float64], Tensor[(1, 12, 13), float32], Tensor[(156), float32]) */;
  %689 = @func_5657() /* ty=Tensor[(1, 16, 8), bool] */;
  %690 = %675.0;
  %691 = %688.6;
  (%689, %690, meta[relay.Constant][45] /* ty=uint32 */, meta[relay.Constant][46] /* ty=Tensor[(14), uint32] */, %691, meta[relay.Constant][47] /* ty=Tensor[(1008), float32] */, meta[relay.Constant][48] /* ty=Tensor[(756), float64] */, %var_7048, meta[relay.Constant][49] /* ty=Tensor[(39, 4), float32] */)
}

def @func_805(%var_800: Tensor[(1, 2, 8), uint32]) -> (Tensor[(?, 2, 8), uint32],) {
  %692 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 2, 8), uint32] */, dtype="uint32") /* ty=Tensor[(1, 2, 8), uint32] */;
  %693 = shape_of(%var_800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%var_800, dtype="uint32") /* ty=Tensor[(1, 2, 8), uint32] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %696 = add(%694, %695) /* ty=Tensor[(?, 2, 8), uint32] */;
  (%696,)
}

def @func_5313(%var_5306: Tensor[(2, 11, 11), float32]) -> Tensor[(2, 11, 11), float32] {
  %697 = cast(%var_5306, dtype="float32") /* ty=Tensor[(2, 11, 11), float32] */;
  sin(%697) /* ty=Tensor[(2, 11, 11), float32] */
}

def @func_6785(%var_6778: Tensor[(16, 9, 15), float32]) -> Tensor[(16, 9, 15), float32] {
  %698 = cast(%var_6778, dtype="float32") /* ty=Tensor[(16, 9, 15), float32] */;
  exp(%698) /* ty=Tensor[(16, 9, 15), float32] */
}

def @func_5740(%var_5706: Tensor[(6, 15, 6), uint64], %var_5707: Tensor[(6, 15, 6), uint64], %var_5718: Tensor[(242), float32]) -> (Tensor[(6, 15, 6), uint64], Tensor[(2, 11, 11), float32], Tensor[(242), float32]) {
  %699 = cast(%var_5707, dtype="uint64") /* ty=Tensor[(6, 15, 6), uint64] */;
  %700 = shape_of(%var_5706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%var_5706, dtype="uint64") /* ty=Tensor[(6, 15, 6), uint64] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %703 = cast(%var_5718, dtype="float32") /* ty=Tensor[(242), float32] */;
  %704 = reshape(%703, newshape=[2, 11, 11]) /* ty=Tensor[(2, 11, 11), float32] */;
  %705 = multiply(%701, %702) /* ty=Tensor[(6, 15, 6), uint64] */;
  %706 = @func_5313(%704) /* ty=Tensor[(2, 11, 11), float32] */;
  (%705, %706, %var_5718)
}

def @func_6261() -> Tensor[(1, 16, 8), bool] {
  %707 = @func_5860() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %707.0
}

def @func_5561(%var_5540: Tensor[(840), float32], %var_5552: Tensor[(14), uint32]) -> (Tensor[(1, 16, 8), bool], Tensor[(14, 4, 15), float32], Tensor[(840), float32], Tensor[(14, 1), bool], uint32, Tensor[(14), uint32]) {
  %708 = @func_4943() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %709 = cast(%var_5540, dtype="float32") /* ty=Tensor[(840), float32] */;
  %710 = reshape(%709, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float32] */;
  %711 = cast(meta[relay.Constant][51] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %712 = cast(%var_5552, dtype="uint32") /* ty=Tensor[(14), uint32] */;
  %713 = reshape(%711, newshape=[]) /* ty=uint32 */;
  %714 = reshape(%712, newshape=[14, 1]) /* ty=Tensor[(14, 1), uint32] */;
  %715 = @func_725(%713, %714) /* ty=(Tensor[(14, 1), bool],) */;
  %716 = %708.0;
  %717 = @func_3438(%710) /* ty=Tensor[(14, 4, 15), float32] */;
  %718 = %715.0;
  (%716, %717, %var_5540, %718, meta[relay.Constant][51] /* ty=uint32 */, %var_5552)
}

def @func_6199(%var_6175: Tensor[(1, 16, 8), bool]) -> Tensor[(?, 16, 8), int8] {
  %719 = @func_5860() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %720 = %719.0;
  %721 = cast(%var_6175, dtype="int64") /* ty=Tensor[(1, 16, 8), int64] */;
  %722 = shape_of(%720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%720, dtype="int64") /* ty=Tensor[(1, 16, 8), int64] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %725 = multiply(%723, %724) /* ty=Tensor[(?, 16, 8), int64] */;
  %726 = cast(%var_6175, dtype="float64") /* ty=Tensor[(1, 16, 8), float64] */;
  %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%725, dtype="float64") /* ty=Tensor[(?, 16, 8), float64] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %730 = mod(%728, %729) /* ty=Tensor[(?, 16, 8), float64] */;
  %731 = cast(%730, dtype="int8") /* ty=Tensor[(?, 16, 8), int8] */;
  %732 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%725, dtype="int8") /* ty=Tensor[(?, 16, 8), int8] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  right_shift(%733, %734) /* ty=Tensor[(?, 16, 8), int8] */
}

def @func_7151() -> (Tensor[(1, 16, 8), bool],) {
  %735 = @func_6331() /* ty=Tensor[(1, 16, 8), bool] */;
  (%735,)
}

def @func_7624() -> (Tensor[(13, 13, 15), bool], Tensor[(13, 1), float64], Tensor[(13), float64]) {
  %736 = @func_6615() /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), bool]) */;
  %737 = cast(meta[relay.Constant][52] /* ty=Tensor[(13), float64] */, dtype="float64") /* ty=Tensor[(13), float64] */;
  %738 = reshape(%737, newshape=[13, 1]) /* ty=Tensor[(13, 1), float64] */;
  %739 = %736.0;
  %740 = @func_5804(%738) /* ty=Tensor[(13, 1), float64] */;
  (%739, %740, meta[relay.Constant][52] /* ty=Tensor[(13), float64] */)
}

def @func_6581(%var_6545: Tensor[(12, 10, 7), int16], %var_6546: Tensor[(12, 10, 7), int16]) -> Tensor[(12, 10, 7), float32] {
  %741 = cast(%var_6545, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
  %742 = shape_of(%var_6546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%var_6546, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %745 = power(%743, %744) /* ty=Tensor[(12, 10, 7), float32] */;
  %746 = cast(%var_6546, dtype="bool") /* ty=Tensor[(12, 10, 7), bool] */;
  %747 = shape_of(%var_6545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%var_6545, dtype="bool") /* ty=Tensor[(12, 10, 7), bool] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %750 = not_equal(%748, %749) /* ty=Tensor[(12, 10, 7), bool] */;
  %751 = cast(%750, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
  %752 = shape_of(%745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%745, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %755 = floor_divide(%753, %754) /* ty=Tensor[(12, 10, 7), float32] */;
  %756 = cast(%755, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
  exp(%756) /* ty=Tensor[(12, 10, 7), float32] */
}

def @func_5639() -> Tensor[(1, 16, 8), bool] {
  %757 = @func_4943() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %757.0
}

def @func_6331() -> Tensor[(1, 16, 8), bool] {
  %758 = @func_5844() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %758.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6021() -> (Tensor[(1, 16, 8), bool], Tensor[(16, 6, 16), float64], float64, Tensor[(1536), float64]) {
  %6 = fn () -> (Tensor[(1, 16, 8), bool], Tensor[(16, 6, 16), float64], float64, Tensor[(1536), float64]) {
    %0 = cast(2.25925f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
    %2 = reshape(%0, newshape=[]) /* ty=float64 */;
    %3 = reshape(%1, newshape=[16, 6, 16]) /* ty=Tensor[(16, 6, 16), float64] */;
    %4 = @func_5657() /* ty=Tensor[(1, 16, 8), bool] */;
    %5 = @func_1729(%2, %3) /* ty=Tensor[(16, 6, 16), float64] */;
    (%4, %5, 2.25925f64 /* ty=float64 */, meta[relay.Constant][0] /* ty=Tensor[(1536), float64] */)
  };
  %6() /* ty=(Tensor[(1, 16, 8), bool], Tensor[(16, 6, 16), float64], float64, Tensor[(1536), float64]) */
}

def @func_2466(%var_2463: Tensor[(3, 9, 5), float64], %var_2464: Tensor[(378), float32], %var_2465: Tensor[(3, 9, 5), float64]) -> (Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(3, 9, 5), bool]) {
  %23 = fn (%var_2432: Tensor[(3, 9, 5), float64], %var_2441: Tensor[(378), float32], %var_2458: Tensor[(3, 9, 5), float64]) -> (Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(3, 9, 5), bool]) {
    %7 = cast(-7.16646f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %8 = cast(%var_2441, dtype="float32") /* ty=Tensor[(378), float32] */;
    %9 = reshape(%7, newshape=[]) /* ty=float32 */;
    %10 = reshape(%8, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), float32] */;
    %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(2535), int64] */, dtype="int64") /* ty=Tensor[(2535), int64] */;
    %12 = reshape(%11, newshape=[13, 13, 15]) /* ty=Tensor[(13, 13, 15), int64] */;
    %13 = @func_186(%12) /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), float64]) */;
    %14 = cast(%var_2432, dtype="float64") /* ty=Tensor[(3, 9, 5), float64] */;
    %15 = tan(%14) /* ty=Tensor[(3, 9, 5), float64] */;
    %16 = cast(%var_2458, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
    %17 = shape_of(%15, dtype="int32") /* ty=Tensor[(3), int32] */;
    %18 = cast(%15, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
    %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %20 = @func_2157(%9, %10) /* ty=Tensor[(14, 3, 9), float32] */;
    %21 = %13.1;
    %22 = equal(%18, %19) /* ty=Tensor[(3, 9, 5), bool] */;
    (%20, -7.16646f /* ty=float32 */, %var_2441, %21, meta[relay.Constant][1] /* ty=Tensor[(2535), int64] */, %22)
  };
  %23(%var_2463, %var_2464, %var_2465) /* ty=(Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(3, 9, 5), bool]) */
}

def @func_6476() -> Tensor[(1, 16, 8), bool] {
  @func_6474() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_8945(%var_8943: Tensor[(10, 16, 8), bool], %var_8944: Tensor[(14), uint32]) -> (Tensor[(1, 16, 8), bool], Tensor[(840), float32], Tensor[(14), uint32], Tensor[(10, 16, 8), uint8]) {
  @func_8941(%var_8943, %var_8944) /* ty=(Tensor[(1, 16, 8), bool], Tensor[(840), float32], Tensor[(14), uint32], Tensor[(10, 16, 8), uint8]) */
}

def @func_8773() -> (Tensor[(1, 16, 8), bool],) {
  %24 = @func_5994() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %25 = %24.0;
  (%25,)
}

def @func_2361(%var_2359: Tensor[(5, 15, 14), uint64], %var_2360: Tensor[(5, 15, 14), uint64]) -> (Tensor[(5, 15, 14), uint64],) {
  @func_2357(%var_2359, %var_2360) /* ty=(Tensor[(5, 15, 14), uint64],) */
}

def @func_8124(%var_8121: Tensor[(756), float64], %var_8122: Tensor[(2016), float32], %var_8123: Tensor[(11, 154), uint32]) -> (Tensor[(1, 16, 8), bool], Tensor[(756), float64], Tensor[(14, 3, 9), float32], Tensor[(135), float64], Tensor[(378), float32], Tensor[(11, 14, 11), float32], Tensor[(11, 154), uint32], Tensor[(12, 12, 14), float64]) {
  %58 = fn (%var_8031: Tensor[(756), float64], %var_8055: Tensor[(2016), float32], %var_8090: Tensor[(11, 154), uint32]) -> (Tensor[(1, 16, 8), bool], Tensor[(756), float64], Tensor[(14, 3, 9), float32], Tensor[(135), float64], Tensor[(378), float32], Tensor[(11, 14, 11), float32], Tensor[(11, 154), uint32], Tensor[(12, 12, 14), float64]) {
    %26 = cast(%var_8031, dtype="float64") /* ty=Tensor[(756), float64] */;
    %27 = reshape(%26, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float64] */;
    %28 = @func_2585(%27) /* ty=Tensor[(9, 7, 12), uint8] */;
    %29 = cast(%28, dtype="float64") /* ty=Tensor[(9, 7, 12), float64] */;
    %30 = shape_of(%var_8031, dtype="int32") /* ty=Tensor[(1), int32] */;
    %31 = cast(%var_8031, dtype="float64") /* ty=Tensor[(756), float64] */;
    %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?), float64] */;
    %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
    %34 = cast(meta[relay.Constant][3] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %35 = cast(meta[relay.Constant][2] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
    %36 = reshape(%33, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float64] */;
    %37 = reshape(%34, newshape=[378]) /* ty=Tensor[(378), float32] */;
    %38 = reshape(%35, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float64] */;
    %39 = @func_2462(%36, %37, %38) /* ty=(Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(3, 9, 5), bool]) */;
    %40 = cast(%var_8090, dtype="uint32") /* ty=Tensor[(11, 154), uint32] */;
    %41 = cast(%var_8090, dtype="uint32") /* ty=Tensor[(11, 154), uint32] */;
    %42 = reshape(%40, newshape=[11, 14, 11]) /* ty=Tensor[(11, 14, 11), uint32] */;
    %43 = reshape(%41, newshape=[11, 14, 11]) /* ty=Tensor[(11, 14, 11), uint32] */;
    %44 = @func_896(%42, %43) /* ty=(Tensor[(11, 14, 11), float32],) */;
    %45 = cast(%var_8055, dtype="float32") /* ty=Tensor[(2016), float32] */;
    %46 = reshape(%45, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), float32] */;
    %47 = @func_3104(%46) /* ty=(Tensor[(12, 12, 14), float32],) */;
    %48 = %47.0;
    %49 = cast(%var_8055, dtype="float64") /* ty=Tensor[(2016), float64] */;
    %50 = shape_of(%48, dtype="int32") /* ty=Tensor[(3), int32] */;
    %51 = cast(%48, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
    %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %53 = @func_5888() /* ty=Tensor[(1, 16, 8), bool] */;
    %54 = power(%31, %32) /* ty=Tensor[(756), float64] */;
    %55 = %39.0;
    %56 = %44.0;
    %57 = floor_mod(%51, %52) /* ty=Tensor[(12, 12, 14), float64] */;
    (%53, %54, %55, meta[relay.Constant][2] /* ty=Tensor[(135), float64] */, meta[relay.Constant][3] /* ty=Tensor[(378), float32] */, %56, %var_8090, %57)
  };
  %58(%var_8121, %var_8122, %var_8123) /* ty=(Tensor[(1, 16, 8), bool], Tensor[(756), float64], Tensor[(14, 3, 9), float32], Tensor[(135), float64], Tensor[(378), float32], Tensor[(11, 14, 11), float32], Tensor[(11, 154), uint32], Tensor[(12, 12, 14), float64]) */
}

def @func_4257(%var_4255: Tensor[(9, 8, 11), uint64]) -> (Tensor[(9, 8, 11), bool], Tensor[(9, 7, 12), uint8], Tensor[(756), float64]) {
  @func_4254(%var_4255) /* ty=(Tensor[(9, 8, 11), bool], Tensor[(9, 7, 12), uint8], Tensor[(756), float64]) */
}

def @func_5175(%var_5118: Tensor[(15, 16, 8), float64], %var_5137: Tensor[(32), float64], %var_5142: Tensor[(1080), float32], %var_5173: Tensor[(378), float32]) -> (Tensor[(?, 16, 8), bool], Tensor[(15, 16, 8), bool], Tensor[(2, 5, 16), float64], Tensor[(32), float64], Tensor[(8, 20), float64], Tensor[(560), uint8], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], float32, Tensor[(3, 45), float64], Tensor[(378), float32]) {
  %59 = @func_4894() /* ty=Tensor[(1, 16, 8), bool] */;
  %60 = cast(%59, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
  %61 = exp(%60) /* ty=Tensor[(1, 16, 8), float32] */;
  %62 = cast(%61, dtype="float64") /* ty=Tensor[(1, 16, 8), float64] */;
  %63 = sinh(%62) /* ty=Tensor[(1, 16, 8), float64] */;
  %64 = cast(%63, dtype="float64") /* ty=Tensor[(1, 16, 8), float64] */;
  %65 = log2(%64) /* ty=Tensor[(1, 16, 8), float64] */;
  %66 = cast(%63, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
  %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%65, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %70 = cast(%65, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
  %71 = cast(%var_5118, dtype="float32") /* ty=Tensor[(15, 16, 8), float32] */;
  %72 = mod(%70, %71) /* ty=Tensor[(15, 16, 8), float32] */;
  %73 = cast(%63, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
  %74 = cast(%72, dtype="bool") /* ty=Tensor[(15, 16, 8), bool] */;
  %75 = cast(%var_5137, dtype="float64") /* ty=Tensor[(32), float64] */;
  %76 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 20), float64] */, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
  %77 = reshape(%75, newshape=[2, 1, 16]) /* ty=Tensor[(2, 1, 16), float64] */;
  %78 = reshape(%76, newshape=[2, 5, 16]) /* ty=Tensor[(2, 5, 16), float64] */;
  %79 = @func_4484(%77, %78) /* ty=(Tensor[(2, 5, 16), float64],) */;
  %80 = cast(%var_5142, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %81 = cast(meta[relay.Constant][5] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %82 = reshape(%80, newshape=[15, 9, 8]) /* ty=Tensor[(15, 9, 8), float32] */;
  %83 = reshape(%81, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %84 = @func_564(%82, %83) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(12), float64], Tensor[(560), uint8], Tensor[(15, 9, 8), int16], Tensor[(15, 9, 8), bool]) */;
  %85 = cast(meta[relay.Constant][6] /* ty=Tensor[(2535), int64] */, dtype="int64") /* ty=Tensor[(2535), int64] */;
  %86 = reshape(%85, newshape=[13, 13, 15]) /* ty=Tensor[(13, 13, 15), int64] */;
  %87 = @func_186(%86) /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), float64]) */;
  %88 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 45), float64] */, dtype="float64") /* ty=Tensor[(3, 45), float64] */;
  %89 = cast(%var_5173, dtype="float32") /* ty=Tensor[(378), float32] */;
  %90 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 45), float64] */, dtype="float64") /* ty=Tensor[(3, 45), float64] */;
  %91 = reshape(%88, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float64] */;
  %92 = reshape(%89, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %93 = reshape(%90, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float64] */;
  %94 = @func_2462(%91, %92, %93) /* ty=(Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(3, 9, 5), bool]) */;
  %95 = less_equal(%68, %69) /* ty=Tensor[(?, 16, 8), bool] */;
  %96 = less(%73, %74) /* ty=Tensor[(15, 16, 8), bool] */;
  %97 = %79.0;
  %98 = %84.2;
  %99 = %87.1;
  %100 = %94.1;
  (%95, %96, %97, %var_5137, meta[relay.Constant][4] /* ty=Tensor[(8, 20), float64] */, %98, %var_5142, meta[relay.Constant][5] /* ty=Tensor[(12), float64] */, %99, meta[relay.Constant][6] /* ty=Tensor[(2535), int64] */, %100, meta[relay.Constant][7] /* ty=Tensor[(3, 45), float64] */, %var_5173)
}

def @func_7694(%var_7692: Tensor[(12, 66), uint64], %var_7693: Tensor[(12, 66), uint64]) -> (Tensor[(756), float64], Tensor[(14, 16, 8), uint16], Tensor[(1792), bool], Tensor[(?, 16, 8), float32], Tensor[(12, 66), bool]) {
  %121 = fn (%var_7652: Tensor[(12, 66), uint64], %var_7686: Tensor[(12, 66), uint64]) -> (Tensor[(756), float64], Tensor[(14, 16, 8), uint16], Tensor[(1792), bool], Tensor[(?, 16, 8), float32], Tensor[(12, 66), bool]) {
    %101 = cast(%var_7652, dtype="uint64") /* ty=Tensor[(12, 66), uint64] */;
    %102 = reshape(%101, newshape=[9, 8, 11]) /* ty=Tensor[(9, 8, 11), uint64] */;
    %103 = @func_4254(%102) /* ty=(Tensor[(9, 8, 11), bool], Tensor[(9, 7, 12), uint8], Tensor[(756), float64]) */;
    %104 = cast(meta[relay.Constant][8] /* ty=Tensor[(1792), bool] */, dtype="bool") /* ty=Tensor[(1792), bool] */;
    %105 = reshape(%104, newshape=[14, 16, 8]) /* ty=Tensor[(14, 16, 8), bool] */;
    %106 = @func_5657() /* ty=Tensor[(1, 16, 8), bool] */;
    %107 = @func_5703() /* ty=(Tensor[(?, 16, 8), int16], Tensor[(13, 13, 15), bool], Tensor[(2535), int64], Tensor[(11, 14, 11), float32], Tensor[(1694), uint32]) */;
    %108 = %107.0;
    %109 = cast(%108, dtype="float32") /* ty=Tensor[(?, 16, 8), float32] */;
    %110 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
    %111 = cast(%106, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
    %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %113 = cast(%var_7686, dtype="bool") /* ty=Tensor[(12, 66), bool] */;
    %114 = shape_of(%var_7652, dtype="int32") /* ty=Tensor[(2), int32] */;
    %115 = cast(%var_7652, dtype="bool") /* ty=Tensor[(12, 66), bool] */;
    %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %117 = %103.2;
    %118 = @func_6231(%105) /* ty=Tensor[(14, 16, 8), uint16] */;
    %119 = floor_mod(%111, %112) /* ty=Tensor[(?, 16, 8), float32] */;
    %120 = less(%115, %116) /* ty=Tensor[(12, 66), bool] */;
    (%117, %118, meta[relay.Constant][8] /* ty=Tensor[(1792), bool] */, %119, %120)
  };
  %121(%var_7692, %var_7693) /* ty=(Tensor[(756), float64], Tensor[(14, 16, 8), uint16], Tensor[(1792), bool], Tensor[(?, 16, 8), float32], Tensor[(12, 66), bool]) */
}

def @func_5219() -> (Tensor[(1, 16, 8), bool],) {
  @func_5217() /* ty=(Tensor[(1, 16, 8), bool],) */
}

def @func_7427(%var_7413: Tensor[(16), uint32]) -> (Tensor[(1, 16, 8), float64], Tensor[(2535), int64], Tensor[(1, 16, 8), bool], Tensor[(?, 2, 8), uint32], Tensor[(16), uint32]) {
  %122 = cast(%var_7413, dtype="uint32") /* ty=Tensor[(16), uint32] */;
  %123 = reshape(%122, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), uint32] */;
  %124 = @func_805(%123) /* ty=(Tensor[(?, 2, 8), uint32],) */;
  %125 = @func_6768() /* ty=Tensor[(1, 16, 8), float64] */;
  %126 = @func_7227() /* ty=Tensor[(2535), int64] */;
  %127 = @func_4894() /* ty=Tensor[(1, 16, 8), bool] */;
  %128 = %124.0;
  (%125, %126, %127, %128, %var_7413)
}

def @func_6836(%var_6833: Tensor[(6, 10, 3), float64], %var_6834: Tensor[(336), float64], %var_6835: Tensor[(6, 10, 3), float64]) -> (Tensor[(6, 10, 3), float64], Tensor[(13, 13, 15), float64], Tensor[(169, 15), int64], Tensor[(12), float64], Tensor[(336), float64], Tensor[(1, 16, 8), bool], Tensor[(6, 10, 3), bool]) {
  %150 = fn (%var_6808: Tensor[(6, 10, 3), float64], %var_6819: Tensor[(336), float64], %var_6828: Tensor[(6, 10, 3), float64]) -> (Tensor[(6, 10, 3), float64], Tensor[(13, 13, 15), float64], Tensor[(169, 15), int64], Tensor[(12), float64], Tensor[(336), float64], Tensor[(1, 16, 8), bool], Tensor[(6, 10, 3), bool]) {
    %129 = cast(%var_6808, dtype="float64") /* ty=Tensor[(6, 10, 3), float64] */;
    %130 = atan(%129) /* ty=Tensor[(6, 10, 3), float64] */;
    %131 = cast(%130, dtype="float64") /* ty=Tensor[(6, 10, 3), float64] */;
    %132 = shape_of(%var_6808, dtype="int32") /* ty=Tensor[(3), int32] */;
    %133 = cast(%var_6808, dtype="float64") /* ty=Tensor[(6, 10, 3), float64] */;
    %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %135 = cast(meta[relay.Constant][9] /* ty=Tensor[(169, 15), int64] */, dtype="int64") /* ty=Tensor[(169, 15), int64] */;
    %136 = reshape(%135, newshape=[13, 13, 15]) /* ty=Tensor[(13, 13, 15), int64] */;
    %137 = @func_186(%136) /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), float64]) */;
    %138 = cast(%var_6819, dtype="float64") /* ty=Tensor[(336), float64] */;
    %139 = reshape(%138, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), float64] */;
    %140 = @func_2386(%139) /* ty=(Tensor[(12, 2, 14), float64], Tensor[(12), float64], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(14, 1), bool], Tensor[(14), uint32]) */;
    %141 = cast(%var_6828, dtype="bool") /* ty=Tensor[(6, 10, 3), bool] */;
    %142 = shape_of(%var_6808, dtype="int32") /* ty=Tensor[(3), int32] */;
    %143 = cast(%var_6808, dtype="bool") /* ty=Tensor[(6, 10, 3), bool] */;
    %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %145 = floor_mod(%133, %134) /* ty=Tensor[(6, 10, 3), float64] */;
    %146 = %137.1;
    %147 = %140.1;
    %148 = @func_6304() /* ty=Tensor[(1, 16, 8), bool] */;
    %149 = logical_or(%143, %144) /* ty=Tensor[(6, 10, 3), bool] */;
    (%145, %146, meta[relay.Constant][9] /* ty=Tensor[(169, 15), int64] */, %147, %var_6819, %148, %149)
  };
  %150(%var_6833, %var_6834, %var_6835) /* ty=(Tensor[(6, 10, 3), float64], Tensor[(13, 13, 15), float64], Tensor[(169, 15), int64], Tensor[(12), float64], Tensor[(336), float64], Tensor[(1, 16, 8), bool], Tensor[(6, 10, 3), bool]) */
}

def @func_7060(%var_7048: Tensor[(135), float64]) -> (Tensor[(1, 16, 8), bool], Tensor[(14, 1), bool], uint32, Tensor[(14), uint32], Tensor[(9, 7, 12), uint8], Tensor[(1008), float32], Tensor[(756), float64], Tensor[(135), float64], Tensor[(39, 4), float32]) {
  %151 = cast(meta[relay.Constant][10] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %152 = cast(meta[relay.Constant][11] /* ty=Tensor[(14), uint32] */, dtype="uint32") /* ty=Tensor[(14), uint32] */;
  %153 = reshape(%151, newshape=[]) /* ty=uint32 */;
  %154 = reshape(%152, newshape=[14, 1]) /* ty=Tensor[(14, 1), uint32] */;
  %155 = @func_725(%153, %154) /* ty=(Tensor[(14, 1), bool],) */;
  %156 = cast(meta[relay.Constant][12] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %157 = cast(meta[relay.Constant][12] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %158 = cast(meta[relay.Constant][13] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %159 = cast(%var_7048, dtype="float64") /* ty=Tensor[(135), float64] */;
  %160 = cast(meta[relay.Constant][12] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %161 = cast(meta[relay.Constant][14] /* ty=Tensor[(39, 4), float32] */, dtype="float32") /* ty=Tensor[(39, 4), float32] */;
  %162 = reshape(%156, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), float32] */;
  %163 = reshape(%157, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), float32] */;
  %164 = reshape(%158, newshape=[756]) /* ty=Tensor[(756), float64] */;
  %165 = reshape(%159, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %166 = reshape(%160, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), float32] */;
  %167 = reshape(%161, newshape=[156]) /* ty=Tensor[(156), float32] */;
  %168 = @func_3656(%162, %163, %164, %165, %166, %167) /* ty=(Tensor[(9, 16, 7), float64], Tensor[(9, 7, 12), uint8], Tensor[(756), float64], Tensor[(13, 13, 15), float64], Tensor[(135), float64], Tensor[(42, 9), float32], Tensor[(9, 7, 12), uint8], Tensor[(9, 16, 7), float64], Tensor[(1, 12, 13), float32], Tensor[(156), float32]) */;
  %169 = @func_5657() /* ty=Tensor[(1, 16, 8), bool] */;
  %170 = %155.0;
  %171 = %168.6;
  (%169, %170, meta[relay.Constant][10] /* ty=uint32 */, meta[relay.Constant][11] /* ty=Tensor[(14), uint32] */, %171, meta[relay.Constant][12] /* ty=Tensor[(1008), float32] */, meta[relay.Constant][13] /* ty=Tensor[(756), float64] */, %var_7048, meta[relay.Constant][14] /* ty=Tensor[(39, 4), float32] */)
}

def @func_3656(%var_3590: Tensor[(9, 16, 7), float32], %var_3594: Tensor[(9, 16, 7), float32], %var_3605: Tensor[(756), float64], %var_3613: Tensor[(135), float64], %var_3626: Tensor[(9, 16, 7), float32], %var_3642: Tensor[(156), float32]) -> (Tensor[(9, 16, 7), float64], Tensor[(9, 7, 12), uint8], Tensor[(756), float64], Tensor[(13, 13, 15), float64], Tensor[(135), float64], Tensor[(42, 9), float32], Tensor[(9, 7, 12), uint8], Tensor[(9, 16, 7), float64], Tensor[(1, 12, 13), float32], Tensor[(156), float32]) {
  %172 = cast(%var_3590, dtype="float32") /* ty=Tensor[(9, 16, 7), float32] */;
  %173 = asin(%172) /* ty=Tensor[(9, 16, 7), float32] */;
  %174 = cast(%var_3594, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
  %175 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%173, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %178 = cast(%var_3605, dtype="float64") /* ty=Tensor[(756), float64] */;
  %179 = reshape(%178, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float64] */;
  %180 = cast(%var_3613, dtype="float64") /* ty=Tensor[(135), float64] */;
  %181 = cast(meta[relay.Constant][15] /* ty=Tensor[(42, 9), float32] */, dtype="float32") /* ty=Tensor[(42, 9), float32] */;
  %182 = cast(%var_3613, dtype="float64") /* ty=Tensor[(135), float64] */;
  %183 = reshape(%180, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float64] */;
  %184 = reshape(%181, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %185 = reshape(%182, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float64] */;
  %186 = @func_2462(%183, %184, %185) /* ty=(Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(3, 9, 5), bool]) */;
  %187 = cast(%var_3605, dtype="float64") /* ty=Tensor[(756), float64] */;
  %188 = reshape(%187, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float64] */;
  %189 = cast(%var_3626, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
  %190 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%173, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %193 = cast(%var_3642, dtype="float32") /* ty=Tensor[(156), float32] */;
  %194 = reshape(%193, newshape=[1, 12, 13]) /* ty=Tensor[(1, 12, 13), float32] */;
  %195 = @func_3547(%194) /* ty=(Tensor[(1, 12, 13), float32],) */;
  %196 = floor_mod(%176, %177) /* ty=Tensor[(9, 16, 7), float64] */;
  %197 = @func_2585(%179) /* ty=Tensor[(9, 7, 12), uint8] */;
  %198 = %186.3;
  %199 = @func_2585(%188) /* ty=Tensor[(9, 7, 12), uint8] */;
  %200 = mod(%191, %192) /* ty=Tensor[(9, 16, 7), float64] */;
  %201 = %195.0;
  (%196, %197, %var_3605, %198, %var_3613, meta[relay.Constant][15] /* ty=Tensor[(42, 9), float32] */, %199, %200, %201, %var_3642)
}

def @func_6861() -> (Tensor[(13, 13, 15), float64],) {
  %206 = fn () -> (Tensor[(13, 13, 15), float64],) {
    %202 = @func_5703() /* ty=(Tensor[(?, 16, 8), int16], Tensor[(13, 13, 15), bool], Tensor[(2535), int64], Tensor[(11, 14, 11), float32], Tensor[(1694), uint32]) */;
    %203 = %202.1;
    %204 = cast(%203, dtype="float64") /* ty=Tensor[(13, 13, 15), float64] */;
    %205 = sinh(%204) /* ty=Tensor[(13, 13, 15), float64] */;
    (%205,)
  };
  %206() /* ty=(Tensor[(13, 13, 15), float64],) */
}

def @func_7280() -> (Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool]) {
  @func_7278() /* ty=(Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool]) */
}

def @func_5296() -> Tensor[(1, 16, 8), bool] {
  %208 = fn () -> Tensor[(1, 16, 8), bool] {
    %207 = @func_5217() /* ty=(Tensor[(1, 16, 8), bool],) */;
    %207.0
  };
  %208() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_8638(%var_8636: Tensor[(756), float64]) -> (Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool], Tensor[(9, 7, 12), uint8], Tensor[(756), float64]) {
  @func_8635(%var_8636) /* ty=(Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool], Tensor[(9, 7, 12), uint8], Tensor[(756), float64]) */
}

def @func_9096(%var_9094: Tensor[(7, 8, 3), float32]) -> (Tensor[(7, 8, 3), int16], Tensor[(1, 16, 8), bool], Tensor[(13, 1), float64], Tensor[(13, 1), float64], Tensor[(?, 16, 8), float32], Tensor[(528), bool], Tensor[(1, 16, 8), bool]) {
  @func_9093(%var_9094) /* ty=(Tensor[(7, 8, 3), int16], Tensor[(1, 16, 8), bool], Tensor[(13, 1), float64], Tensor[(13, 1), float64], Tensor[(?, 16, 8), float32], Tensor[(528), bool], Tensor[(1, 16, 8), bool]) */
}

def @func_8605(%var_8558: Tensor[(11, 8, 6), bool], %var_8559: Tensor[(11, 8, 6), bool]) -> (Tensor[(840), float32], Tensor[(?, 16, 8), float32], Tensor[(11, 8, 6), uint64]) {
  %209 = @func_6667() /* ty=(Tensor[(840), float32],) */;
  %210 = @func_5844() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %211 = %210.0;
  %212 = @func_7278() /* ty=(Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool]) */;
  %213 = %212.0;
  %214 = cast(%213, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
  %215 = shape_of(%211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%211, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %218 = cast(%var_8559, dtype="bool") /* ty=Tensor[(11, 8, 6), bool] */;
  %219 = shape_of(%var_8558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%var_8558, dtype="bool") /* ty=Tensor[(11, 8, 6), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %222 = logical_and(%220, %221) /* ty=Tensor[(11, 8, 6), bool] */;
  %223 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 8, 6), bool] */, dtype="uint64") /* ty=Tensor[(11, 8, 6), uint64] */;
  %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%222, dtype="uint64") /* ty=Tensor[(11, 8, 6), uint64] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %227 = %209.0;
  %228 = subtract(%216, %217) /* ty=Tensor[(?, 16, 8), float32] */;
  %229 = logical_xor(%225, %226) /* ty=Tensor[(11, 8, 6), uint64] */;
  (%227, %228, %229)
}

def @func_7278() -> (Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool]) {
  %230 = @func_6304() /* ty=Tensor[(1, 16, 8), bool] */;
  %231 = @func_6261() /* ty=Tensor[(1, 16, 8), bool] */;
  (%230, %231)
}

def @func_8901() -> (Tensor[(1, 16, 8), bool],) {
  %234 = fn () -> (Tensor[(1, 16, 8), bool],) {
    %232 = @func_8773() /* ty=(Tensor[(1, 16, 8), bool],) */;
    %233 = %232.0;
    (%233,)
  };
  %234() /* ty=(Tensor[(1, 16, 8), bool],) */
}

def @func_8467(%var_8465: Tensor[(3, 45), float64], %var_8466: Tensor[(3, 45), float64]) -> (Tensor[(1, 16, 8), bool], Tensor[(756), float64], Tensor[(3, 45), float64]) {
  %245 = fn (%var_8439: Tensor[(3, 45), float64], %var_8444: Tensor[(3, 45), float64]) -> (Tensor[(1, 16, 8), bool], Tensor[(756), float64], Tensor[(3, 45), float64]) {
    %235 = cast(%var_8439, dtype="float64") /* ty=Tensor[(3, 45), float64] */;
    %236 = reshape(%235, newshape=[135]) /* ty=Tensor[(135), float64] */;
    %237 = @func_7060(%236) /* ty=(Tensor[(1, 16, 8), bool], Tensor[(14, 1), bool], uint32, Tensor[(14), uint32], Tensor[(9, 7, 12), uint8], Tensor[(1008), float32], Tensor[(756), float64], Tensor[(135), float64], Tensor[(39, 4), float32]) */;
    %238 = cast(%var_8444, dtype="float64") /* ty=Tensor[(3, 45), float64] */;
    %239 = shape_of(%var_8439, dtype="int32") /* ty=Tensor[(2), int32] */;
    %240 = cast(%var_8439, dtype="float64") /* ty=Tensor[(3, 45), float64] */;
    %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %242 = @func_6331() /* ty=Tensor[(1, 16, 8), bool] */;
    %243 = %237.6;
    %244 = divide(%240, %241) /* ty=Tensor[(3, 45), float64] */;
    (%242, %243, %244)
  };
  %245(%var_8465, %var_8466) /* ty=(Tensor[(1, 16, 8), bool], Tensor[(756), float64], Tensor[(3, 45), float64]) */
}

def @func_1484(%var_1476: Tensor[(3, 9, 16), float64]) -> (Tensor[(3, 9, 16), float32],) {
  %246 = cast(%var_1476, dtype="float64") /* ty=Tensor[(3, 9, 16), float64] */;
  %247 = atanh(%246) /* ty=Tensor[(3, 9, 16), float64] */;
  %248 = cast(%247, dtype="float32") /* ty=Tensor[(3, 9, 16), float32] */;
  %249 = asinh(%248) /* ty=Tensor[(3, 9, 16), float32] */;
  (%249,)
}

def @func_444(%var_442: Tensor[(1, 12, 1), float64], %var_443: Tensor[(560), uint8]) -> (Tensor[(1, 12, 1), float64], Tensor[(8, 5, 14), bool], Tensor[(560), uint8], Tensor[(8, 5, 14), bool]) {
  @func_440(%var_442, %var_443) /* ty=(Tensor[(1, 12, 1), float64], Tensor[(8, 5, 14), bool], Tensor[(560), uint8], Tensor[(8, 5, 14), bool]) */
}

def @func_8160() -> (Tensor[(1, 16, 8), bool],) {
  @func_8158() /* ty=(Tensor[(1, 16, 8), bool],) */
}

def @func_3438(%var_3411: Tensor[(14, 4, 15), float32]) -> Tensor[(14, 4, 15), float32] {
  %250 = cast(%var_3411, dtype="float32") /* ty=Tensor[(14, 4, 15), float32] */;
  exp(%250) /* ty=Tensor[(14, 4, 15), float32] */
}

def @func_2161(%var_2159: float32, %var_2160: Tensor[(14, 3, 9), float32]) -> Tensor[(14, 3, 9), float32] {
  @func_2157(%var_2159, %var_2160) /* ty=Tensor[(14, 3, 9), float32] */
}

def @func_6233(%var_6232: Tensor[(14, 16, 8), bool]) -> Tensor[(14, 16, 8), uint16] {
  %254 = fn (%var_6224: Tensor[(14, 16, 8), bool]) -> Tensor[(14, 16, 8), uint16] {
    %251 = @func_5295() /* ty=Tensor[(1, 16, 8), bool] */;
    %252 = cast(%251, dtype="uint16") /* ty=Tensor[(1, 16, 8), uint16] */;
    %253 = cast(%var_6224, dtype="uint16") /* ty=Tensor[(14, 16, 8), uint16] */;
    logical_xor(%252, %253) /* ty=Tensor[(14, 16, 8), uint16] */
  };
  %254(%var_6232) /* ty=Tensor[(14, 16, 8), uint16] */
}

def @func_7126() -> Tensor[(1, 16, 8), bool] {
  @func_7124() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_7815(%var_7814: Tensor[(15, 4, 13), float32]) -> (Tensor[(15, 4, 13), float32],) {
  %257 = fn (%var_7808: Tensor[(15, 4, 13), float32]) -> (Tensor[(15, 4, 13), float32],) {
    %255 = cast(%var_7808, dtype="float32") /* ty=Tensor[(15, 4, 13), float32] */;
    %256 = acos(%255) /* ty=Tensor[(15, 4, 13), float32] */;
    (%256,)
  };
  %257(%var_7814) /* ty=(Tensor[(15, 4, 13), float32],) */
}

def @func_6240() -> (Tensor[(1, 16, 8), bool],) {
  %259 = fn () -> (Tensor[(1, 16, 8), bool],) {
    %258 = @func_5295() /* ty=Tensor[(1, 16, 8), bool] */;
    (%258,)
  };
  %259() /* ty=(Tensor[(1, 16, 8), bool],) */
}

def @func_5938(%var_5937: Tensor[(15, 16, 8), bool]) -> Tensor[(15, 16, 8), bool] {
  %263 = fn (%var_5927: Tensor[(15, 16, 8), bool]) -> Tensor[(15, 16, 8), bool] {
    %260 = @func_5657() /* ty=Tensor[(1, 16, 8), bool] */;
    %261 = cast(%260, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
    %262 = cast(%var_5927, dtype="bool") /* ty=Tensor[(15, 16, 8), bool] */;
    logical_or(%261, %262) /* ty=Tensor[(15, 16, 8), bool] */
  };
  %263(%var_5937) /* ty=Tensor[(15, 16, 8), bool] */
}

def @func_6696() -> (Tensor[(2535), int64],) {
  %266 = fn () -> (Tensor[(2535), int64],) {
    %264 = @func_5703() /* ty=(Tensor[(?, 16, 8), int16], Tensor[(13, 13, 15), bool], Tensor[(2535), int64], Tensor[(11, 14, 11), float32], Tensor[(1694), uint32]) */;
    %265 = %264.2;
    (%265,)
  };
  %266() /* ty=(Tensor[(2535), int64],) */
}

def @func_6071() -> (Tensor[(1, 16, 8), bool], Tensor[(1536), bool], Tensor[(14, 1), bool], Tensor[(336), float64], Tensor[(12, 16, 8), int32], Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool], Tensor[(840), float32], Tensor[(16, 16, 8), float64], Tensor[(2048), bool], Tensor[(72), float64], Tensor[(5, 2, 3), uint16], Tensor[(30), uint16]) {
  %267 = cast(meta[relay.Constant][18] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %268 = reshape(%267, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), float64] */;
  %269 = @func_2386(%268) /* ty=(Tensor[(12, 2, 14), float64], Tensor[(12), float64], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(14, 1), bool], Tensor[(14), uint32]) */;
  %270 = cast(meta[relay.Constant][17] /* ty=Tensor[(1536), bool] */, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %271 = reshape(%270, newshape=[12, 16, 8]) /* ty=Tensor[(12, 16, 8), bool] */;
  %272 = @func_4967(%271) /* ty=(Tensor[(12, 16, 8), int64],) */;
  %273 = %272.0;
  %274 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 16, 8), int64] */, dtype="int32") /* ty=Tensor[(12, 16, 8), int32] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%273, dtype="int32") /* ty=Tensor[(12, 16, 8), int32] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %278 = @func_6020() /* ty=(Tensor[(1, 16, 8), bool], Tensor[(16, 6, 16), float64], float64, Tensor[(1536), float64]) */;
  %279 = cast(meta[relay.Constant][20] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %280 = %269.7;
  %281 = cast(%280, dtype="uint32") /* ty=Tensor[(14, 1), uint32] */;
  %282 = reshape(%279, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %283 = reshape(%281, newshape=[14]) /* ty=Tensor[(14), uint32] */;
  %284 = @func_5561(%282, %283) /* ty=(Tensor[(1, 16, 8), bool], Tensor[(14, 4, 15), float32], Tensor[(840), float32], Tensor[(14, 1), bool], uint32, Tensor[(14), uint32]) */;
  %285 = cast(meta[relay.Constant][21] /* ty=Tensor[(2048), bool] */, dtype="bool") /* ty=Tensor[(2048), bool] */;
  %286 = cast(meta[relay.Constant][22] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %287 = reshape(%285, newshape=[16, 16, 8]) /* ty=Tensor[(16, 16, 8), bool] */;
  %288 = reshape(%286, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %289 = @func_5408(%287, %288) /* ty=(Tensor[(16, 16, 8), float64], Tensor[(4, 2, 9), float64], Tensor[(72), float64]) */;
  %290 = cast(meta[relay.Constant][23] /* ty=Tensor[(30), uint16] */, dtype="uint16") /* ty=Tensor[(30), uint16] */;
  %291 = cast(meta[relay.Constant][23] /* ty=Tensor[(30), uint16] */, dtype="uint16") /* ty=Tensor[(30), uint16] */;
  %292 = reshape(%290, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), uint16] */;
  %293 = reshape(%291, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), uint16] */;
  %294 = @func_2314(%292, %293) /* ty=(Tensor[(5, 2, 3), uint16], Tensor[(5, 2, 3), float64]) */;
  %295 = @func_5639() /* ty=Tensor[(1, 16, 8), bool] */;
  %296 = right_shift(%276, %277) /* ty=Tensor[(12, 16, 8), int32] */;
  %297 = %278.0;
  %298 = %284.0;
  %299 = %289.0;
  %300 = %294.0;
  (%295, meta[relay.Constant][17] /* ty=Tensor[(1536), bool] */, %280, meta[relay.Constant][18] /* ty=Tensor[(336), float64] */, %296, %297, %298, meta[relay.Constant][20] /* ty=Tensor[(840), float32] */, %299, meta[relay.Constant][21] /* ty=Tensor[(2048), bool] */, meta[relay.Constant][22] /* ty=Tensor[(72), float64] */, %300, meta[relay.Constant][23] /* ty=Tensor[(30), uint16] */)
}

def @func_7717() -> Tensor[(1, 16, 8), bool] {
  %302 = fn () -> Tensor[(1, 16, 8), bool] {
    %301 = @func_7278() /* ty=(Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool]) */;
    %301.1
  };
  %302() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_5613() -> Tensor[(1, 16, 8), bool] {
  %303 = fn () -> Tensor[(1, 16, 8), bool] {
    @func_4894() /* ty=Tensor[(1, 16, 8), bool] */
  };
  %303() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_8001() -> (Tensor[(1, 16, 8), bool], Tensor[(9, 14, 10), int64], Tensor[(1260), int64]) {
  %311 = fn () -> (Tensor[(1, 16, 8), bool], Tensor[(9, 14, 10), int64], Tensor[(1260), int64]) {
    %304 = cast(meta[relay.Constant][24] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
    %305 = cast(meta[relay.Constant][24] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
    %306 = reshape(%304, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int64] */;
    %307 = reshape(%305, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int64] */;
    %308 = @func_6977(%306, %307) /* ty=(Tensor[(9, 14, 10), int64],) */;
    %309 = @func_6331() /* ty=Tensor[(1, 16, 8), bool] */;
    %310 = %308.0;
    (%309, %310, meta[relay.Constant][24] /* ty=Tensor[(1260), int64] */)
  };
  %311() /* ty=(Tensor[(1, 16, 8), bool], Tensor[(9, 14, 10), int64], Tensor[(1260), int64]) */
}

def @func_9183() -> Tensor[(1, 16, 8), bool] {
  %312 = fn () -> Tensor[(1, 16, 8), bool] {
    @func_7716() /* ty=Tensor[(1, 16, 8), bool] */
  };
  %312() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_3441(%var_3439: Tensor[(14, 4, 15), float32]) -> Tensor[(14, 4, 15), float32] {
  @func_3438(%var_3439) /* ty=Tensor[(14, 4, 15), float32] */
}

def @func_2388(%var_2387: Tensor[(12, 2, 14), float64]) -> (Tensor[(12, 2, 14), float64], Tensor[(12), float64], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(14, 1), bool], Tensor[(14), uint32]) {
  %332 = fn (%var_2366: Tensor[(12, 2, 14), float64]) -> (Tensor[(12, 2, 14), float64], Tensor[(12), float64], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(14, 1), bool], Tensor[(14), uint32]) {
    %313 = cast(%var_2366, dtype="float64") /* ty=Tensor[(12, 2, 14), float64] */;
    %314 = cast(meta[relay.Constant][25] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %315 = cast(meta[relay.Constant][26] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
    %316 = reshape(%314, newshape=[15, 9, 8]) /* ty=Tensor[(15, 9, 8), float32] */;
    %317 = reshape(%315, newshape=[12]) /* ty=Tensor[(12), float64] */;
    %318 = @func_564(%316, %317) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(12), float64], Tensor[(560), uint8], Tensor[(15, 9, 8), int16], Tensor[(15, 9, 8), bool]) */;
    %319 = cast(-3.76575f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %320 = cast(meta[relay.Constant][27] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %321 = reshape(%319, newshape=[]) /* ty=float32 */;
    %322 = reshape(%320, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), float32] */;
    %323 = cast(-3.76575f /* ty=float32 */, dtype="uint32") /* ty=uint32 */;
    %324 = cast(meta[relay.Constant][28] /* ty=Tensor[(14), uint32] */, dtype="uint32") /* ty=Tensor[(14), uint32] */;
    %325 = reshape(%323, newshape=[]) /* ty=uint32 */;
    %326 = reshape(%324, newshape=[14, 1]) /* ty=Tensor[(14, 1), uint32] */;
    %327 = @func_725(%325, %326) /* ty=(Tensor[(14, 1), bool],) */;
    %328 = atan(%313) /* ty=Tensor[(12, 2, 14), float64] */;
    %329 = %318.1;
    %330 = @func_2157(%321, %322) /* ty=Tensor[(14, 3, 9), float32] */;
    %331 = %327.0;
    (%328, %329, meta[relay.Constant][25] /* ty=Tensor[(1080), float32] */, meta[relay.Constant][26] /* ty=Tensor[(12), float64] */, %330, -3.76575f /* ty=float32 */, meta[relay.Constant][27] /* ty=Tensor[(378), float32] */, %331, meta[relay.Constant][28] /* ty=Tensor[(14), uint32] */)
  };
  %332(%var_2387) /* ty=(Tensor[(12, 2, 14), float64], Tensor[(12), float64], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(14, 1), bool], Tensor[(14), uint32]) */
}

def @func_4970(%var_4968: Tensor[(12, 16, 8), bool]) -> (Tensor[(12, 16, 8), int64],) {
  @func_4967(%var_4968) /* ty=(Tensor[(12, 16, 8), int64],) */
}

def @func_8852() -> Tensor[(840), float32] {
  %334 = fn () -> Tensor[(840), float32] {
    %333 = @func_6667() /* ty=(Tensor[(840), float32],) */;
    %333.0
  };
  %334() /* ty=Tensor[(840), float32] */
}

def @func_3550(%var_3548: Tensor[(1, 12, 13), float32]) -> (Tensor[(1, 12, 13), float32],) {
  @func_3547(%var_3548) /* ty=(Tensor[(1, 12, 13), float32],) */
}

def @func_7624() -> (Tensor[(13, 13, 15), bool], Tensor[(13, 1), float64], Tensor[(13), float64]) {
  %335 = @func_6615() /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), bool]) */;
  %336 = cast(meta[relay.Constant][29] /* ty=Tensor[(13), float64] */, dtype="float64") /* ty=Tensor[(13), float64] */;
  %337 = reshape(%336, newshape=[13, 1]) /* ty=Tensor[(13, 1), float64] */;
  %338 = %335.0;
  %339 = @func_5804(%337) /* ty=Tensor[(13, 1), float64] */;
  (%338, %339, meta[relay.Constant][29] /* ty=Tensor[(13), float64] */)
}

def @func_729(%var_727: uint32, %var_728: Tensor[(14, 1), uint32]) -> (Tensor[(14, 1), bool],) {
  @func_725(%var_727, %var_728) /* ty=(Tensor[(14, 1), bool],) */
}

def @func_8635(%var_8633: Tensor[(756), float64]) -> (Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool], Tensor[(9, 7, 12), uint8], Tensor[(756), float64]) {
  %340 = @func_7151() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %341 = cast(%var_8633, dtype="float64") /* ty=Tensor[(756), float64] */;
  %342 = reshape(%341, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float64] */;
  %343 = %340.0;
  %344 = @func_4894() /* ty=Tensor[(1, 16, 8), bool] */;
  %345 = @func_2585(%342) /* ty=Tensor[(9, 7, 12), uint8] */;
  (%343, %344, %345, %var_8633)
}

def @func_6980(%var_6978: Tensor[(9, 14, 10), int64], %var_6979: Tensor[(9, 14, 10), int64]) -> (Tensor[(9, 14, 10), int64],) {
  %351 = fn (%var_6971: Tensor[(9, 14, 10), int64], %var_6972: Tensor[(9, 14, 10), int64]) -> (Tensor[(9, 14, 10), int64],) {
    %346 = cast(%var_6972, dtype="int64") /* ty=Tensor[(9, 14, 10), int64] */;
    %347 = shape_of(%var_6971, dtype="int32") /* ty=Tensor[(3), int32] */;
    %348 = cast(%var_6971, dtype="int64") /* ty=Tensor[(9, 14, 10), int64] */;
    %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %350 = bitwise_or(%348, %349) /* ty=Tensor[(9, 14, 10), int64] */;
    (%350,)
  };
  %351(%var_6978, %var_6979) /* ty=(Tensor[(9, 14, 10), int64],) */
}

def @func_6584(%var_6582: Tensor[(12, 10, 7), int16], %var_6583: Tensor[(12, 10, 7), int16]) -> Tensor[(12, 10, 7), float32] {
  %368 = fn (%var_6545: Tensor[(12, 10, 7), int16], %var_6546: Tensor[(12, 10, 7), int16]) -> Tensor[(12, 10, 7), float32] {
    %352 = cast(%var_6545, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
    %353 = shape_of(%var_6546, dtype="int32") /* ty=Tensor[(3), int32] */;
    %354 = cast(%var_6546, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
    %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %356 = power(%354, %355) /* ty=Tensor[(12, 10, 7), float32] */;
    %357 = cast(%var_6546, dtype="bool") /* ty=Tensor[(12, 10, 7), bool] */;
    %358 = shape_of(%var_6545, dtype="int32") /* ty=Tensor[(3), int32] */;
    %359 = cast(%var_6545, dtype="bool") /* ty=Tensor[(12, 10, 7), bool] */;
    %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %361 = not_equal(%359, %360) /* ty=Tensor[(12, 10, 7), bool] */;
    %362 = cast(%361, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
    %363 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
    %364 = cast(%356, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
    %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %366 = floor_divide(%364, %365) /* ty=Tensor[(12, 10, 7), float32] */;
    %367 = cast(%366, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
    exp(%367) /* ty=Tensor[(12, 10, 7), float32] */
  };
  %368(%var_6582, %var_6583) /* ty=Tensor[(12, 10, 7), float32] */
}

def @func_9159(%var_9157: Tensor[(1792), bool]) -> (Tensor[(1, 16, 8), bool], Tensor[(14, 16, 8), uint16], Tensor[(1792), bool]) {
  %369 = @func_8158() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %370 = cast(%var_9157, dtype="bool") /* ty=Tensor[(1792), bool] */;
  %371 = reshape(%370, newshape=[14, 16, 8]) /* ty=Tensor[(14, 16, 8), bool] */;
  %372 = %369.0;
  %373 = @func_6231(%371) /* ty=Tensor[(14, 16, 8), uint16] */;
  (%372, %373, %var_9157)
}

def @func_8186() -> Tensor[(1, 16, 8), bool] {
  @func_8184() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_8332(%var_8330: Tensor[(32), float64], %var_8331: Tensor[(378), float32]) -> (Tensor[(1920), float64], Tensor[(32), float64], Tensor[(1080), float32], Tensor[(378), float32], Tensor[(15, 16, 8), bool]) {
  %388 = fn (%var_8280: Tensor[(32), float64], %var_8282: Tensor[(378), float32]) -> (Tensor[(1920), float64], Tensor[(32), float64], Tensor[(1080), float32], Tensor[(378), float32], Tensor[(15, 16, 8), bool]) {
    %374 = @func_7124() /* ty=Tensor[(1, 16, 8), bool] */;
    %375 = cast(meta[relay.Constant][30] /* ty=Tensor[(1920), float64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
    %376 = cast(%var_8280, dtype="float64") /* ty=Tensor[(32), float64] */;
    %377 = cast(meta[relay.Constant][31] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %378 = cast(%var_8282, dtype="float32") /* ty=Tensor[(378), float32] */;
    %379 = reshape(%375, newshape=[15, 16, 8]) /* ty=Tensor[(15, 16, 8), float64] */;
    %380 = reshape(%376, newshape=[32]) /* ty=Tensor[(32), float64] */;
    %381 = reshape(%377, newshape=[1080]) /* ty=Tensor[(1080), float32] */;
    %382 = reshape(%378, newshape=[378]) /* ty=Tensor[(378), float32] */;
    %383 = @func_5175(%379, %380, %381, %382) /* ty=(Tensor[(?, 16, 8), bool], Tensor[(15, 16, 8), bool], Tensor[(2, 5, 16), float64], Tensor[(32), float64], Tensor[(8, 20), float64], Tensor[(560), uint8], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], float32, Tensor[(3, 45), float64], Tensor[(378), float32]) */;
    %384 = %383.1;
    %385 = cast(%374, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
    %386 = cast(%384, dtype="bool") /* ty=Tensor[(15, 16, 8), bool] */;
    %387 = equal(%385, %386) /* ty=Tensor[(15, 16, 8), bool] */;
    (meta[relay.Constant][30] /* ty=Tensor[(1920), float64] */, %var_8280, meta[relay.Constant][31] /* ty=Tensor[(1080), float32] */, %var_8282, %387)
  };
  %388(%var_8330, %var_8331) /* ty=(Tensor[(1920), float64], Tensor[(32), float64], Tensor[(1080), float32], Tensor[(378), float32], Tensor[(15, 16, 8), bool]) */
}

def @func_8751(%var_8689: Tensor[(12, 16, 8), bool], %var_8730: Tensor[(12, 16, 8), float32]) -> (Tensor[(12, 16, 8), bool], Tensor[(14, 16, 8), uint16], Tensor[(2, 896), bool], Tensor[(12, 16, 8), int8], Tensor[(840), float32]) {
  %389 = @func_5295() /* ty=Tensor[(1, 16, 8), bool] */;
  %390 = cast(%389, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
  %391 = cast(%var_8689, dtype="bool") /* ty=Tensor[(12, 16, 8), bool] */;
  %392 = not_equal(%390, %391) /* ty=Tensor[(12, 16, 8), bool] */;
  %393 = @func_4943() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %394 = %393.0;
  %395 = cast(%392, dtype="bool") /* ty=Tensor[(12, 16, 8), bool] */;
  %396 = cast(%394, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
  %397 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 896), bool] */, dtype="bool") /* ty=Tensor[(2, 896), bool] */;
  %398 = reshape(%397, newshape=[14, 16, 8]) /* ty=Tensor[(14, 16, 8), bool] */;
  %399 = cast(%var_8689, dtype="float32") /* ty=Tensor[(12, 16, 8), float32] */;
  %400 = log2(%399) /* ty=Tensor[(12, 16, 8), float32] */;
  %401 = cast(%var_8730, dtype="int8") /* ty=Tensor[(12, 16, 8), int8] */;
  %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%400, dtype="int8") /* ty=Tensor[(12, 16, 8), int8] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %405 = @func_6667() /* ty=(Tensor[(840), float32],) */;
  %406 = logical_or(%395, %396) /* ty=Tensor[(12, 16, 8), bool] */;
  %407 = @func_6231(%398) /* ty=Tensor[(14, 16, 8), uint16] */;
  %408 = maximum(%403, %404) /* ty=Tensor[(12, 16, 8), int8] */;
  %409 = %405.0;
  (%406, %407, meta[relay.Constant][32] /* ty=Tensor[(2, 896), bool] */, %408, %409)
}

def @func_8158() -> (Tensor[(1, 16, 8), bool],) {
  %410 = @func_4943() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %411 = %410.0;
  (%411,)
}

def @func_8398() -> (Tensor[(4, 16, 8), int8],) {
  %416 = fn () -> (Tensor[(4, 16, 8), int8],) {
    %412 = @func_8184() /* ty=Tensor[(1, 16, 8), bool] */;
    %413 = cast(%412, dtype="int8") /* ty=Tensor[(1, 16, 8), int8] */;
    %414 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 16, 8), bool] */, dtype="int8") /* ty=Tensor[(4, 16, 8), int8] */;
    %415 = right_shift(%413, %414) /* ty=Tensor[(4, 16, 8), int8] */;
    (%415,)
  };
  %416() /* ty=(Tensor[(4, 16, 8), int8],) */
}

def @func_5844() -> (Tensor[(1, 16, 8), bool],) {
  %417 = @func_5295() /* ty=Tensor[(1, 16, 8), bool] */;
  (%417,)
}

def @func_7537(%var_7507: Tensor[(432), float64]) -> (Tensor[(1, 16, 8), bool], Tensor[(3, 9, 16), float32], Tensor[(432), float64]) {
  %418 = cast(%var_7507, dtype="float64") /* ty=Tensor[(432), float64] */;
  %419 = reshape(%418, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), float64] */;
  %420 = @func_1484(%419) /* ty=(Tensor[(3, 9, 16), float32],) */;
  %421 = @func_5639() /* ty=Tensor[(1, 16, 8), bool] */;
  %422 = %420.0;
  (%421, %422, %var_7507)
}

def @func_899(%var_897: Tensor[(11, 14, 11), uint32], %var_898: Tensor[(11, 14, 11), uint32]) -> (Tensor[(11, 14, 11), float32],) {
  %430 = fn (%var_883: Tensor[(11, 14, 11), uint32], %var_884: Tensor[(11, 14, 11), uint32]) -> (Tensor[(11, 14, 11), float32],) {
    %423 = cast(%var_884, dtype="uint32") /* ty=Tensor[(11, 14, 11), uint32] */;
    %424 = shape_of(%var_883, dtype="int32") /* ty=Tensor[(3), int32] */;
    %425 = cast(%var_883, dtype="uint32") /* ty=Tensor[(11, 14, 11), uint32] */;
    %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %427 = bitwise_xor(%425, %426) /* ty=Tensor[(11, 14, 11), uint32] */;
    %428 = cast(%427, dtype="float32") /* ty=Tensor[(11, 14, 11), float32] */;
    %429 = erf(%428) /* ty=Tensor[(11, 14, 11), float32] */;
    (%429,)
  };
  %430(%var_897, %var_898) /* ty=(Tensor[(11, 14, 11), float32],) */
}

def @func_7991() -> (Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool]) {
  @func_7989() /* ty=(Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool]) */
}

def @func_8227() -> Tensor[(1, 16, 8), bool] {
  %431 = fn () -> Tensor[(1, 16, 8), bool] {
    @func_6331() /* ty=Tensor[(1, 16, 8), bool] */
  };
  %431() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_5740(%var_5706: Tensor[(6, 15, 6), uint64], %var_5707: Tensor[(6, 15, 6), uint64], %var_5718: Tensor[(242), float32]) -> (Tensor[(6, 15, 6), uint64], Tensor[(2, 11, 11), float32], Tensor[(242), float32]) {
  %432 = cast(%var_5707, dtype="uint64") /* ty=Tensor[(6, 15, 6), uint64] */;
  %433 = shape_of(%var_5706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%var_5706, dtype="uint64") /* ty=Tensor[(6, 15, 6), uint64] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %436 = cast(%var_5718, dtype="float32") /* ty=Tensor[(242), float32] */;
  %437 = reshape(%436, newshape=[2, 11, 11]) /* ty=Tensor[(2, 11, 11), float32] */;
  %438 = multiply(%434, %435) /* ty=Tensor[(6, 15, 6), uint64] */;
  %439 = @func_5313(%437) /* ty=Tensor[(2, 11, 11), float32] */;
  (%438, %439, %var_5718)
}

def @func_7374() -> Tensor[(13, 13, 15), bool] {
  @func_7372() /* ty=Tensor[(13, 13, 15), bool] */
}

def @func_8184() -> Tensor[(1, 16, 8), bool] {
  %440 = @func_6239() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %440.0
}

def @func_567(%var_565: Tensor[(15, 9, 8), float32], %var_566: Tensor[(12), float64]) -> (Tensor[(8, 5, 14), bool], Tensor[(12), float64], Tensor[(560), uint8], Tensor[(15, 9, 8), int16], Tensor[(15, 9, 8), bool]) {
  %459 = fn (%var_536: Tensor[(15, 9, 8), float32], %var_540: Tensor[(12), float64]) -> (Tensor[(8, 5, 14), bool], Tensor[(12), float64], Tensor[(560), uint8], Tensor[(15, 9, 8), int16], Tensor[(15, 9, 8), bool]) {
    %441 = cast(%var_540, dtype="float64") /* ty=Tensor[(12), float64] */;
    %442 = cast(meta[relay.Constant][34] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
    %443 = reshape(%441, newshape=[1, 12, 1]) /* ty=Tensor[(1, 12, 1), float64] */;
    %444 = reshape(%442, newshape=[560]) /* ty=Tensor[(560), uint8] */;
    %445 = @func_440(%443, %444) /* ty=(Tensor[(1, 12, 1), float64], Tensor[(8, 5, 14), bool], Tensor[(560), uint8], Tensor[(8, 5, 14), bool]) */;
    %446 = cast(%var_536, dtype="float32") /* ty=Tensor[(15, 9, 8), float32] */;
    %447 = atanh(%446) /* ty=Tensor[(15, 9, 8), float32] */;
    %448 = cast(%447, dtype="int16") /* ty=Tensor[(15, 9, 8), int16] */;
    %449 = shape_of(%var_536, dtype="int32") /* ty=Tensor[(3), int32] */;
    %450 = cast(%var_536, dtype="int16") /* ty=Tensor[(15, 9, 8), int16] */;
    %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %452 = cast(%var_536, dtype="bool") /* ty=Tensor[(15, 9, 8), bool] */;
    %453 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
    %454 = cast(%447, dtype="bool") /* ty=Tensor[(15, 9, 8), bool] */;
    %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %456 = %445.3;
    %457 = left_shift(%450, %451) /* ty=Tensor[(15, 9, 8), int16] */;
    %458 = less_equal(%454, %455) /* ty=Tensor[(15, 9, 8), bool] */;
    (%456, %var_540, meta[relay.Constant][34] /* ty=Tensor[(560), uint8] */, %457, %458)
  };
  %459(%var_565, %var_566) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(12), float64], Tensor[(560), uint8], Tensor[(15, 9, 8), int16], Tensor[(15, 9, 8), bool]) */
}

def @func_7372() -> Tensor[(13, 13, 15), bool] {
  %460 = @func_6615() /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), bool]) */;
  %460.0
}

def @func_6787(%var_6786: Tensor[(16, 9, 15), float32]) -> Tensor[(16, 9, 15), float32] {
  %462 = fn (%var_6778: Tensor[(16, 9, 15), float32]) -> Tensor[(16, 9, 15), float32] {
    %461 = cast(%var_6778, dtype="float32") /* ty=Tensor[(16, 9, 15), float32] */;
    exp(%461) /* ty=Tensor[(16, 9, 15), float32] */
  };
  %462(%var_6786) /* ty=Tensor[(16, 9, 15), float32] */
}

def @func_4967(%var_4955: Tensor[(12, 16, 8), bool]) -> (Tensor[(12, 16, 8), int64],) {
  %463 = @func_4943() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %464 = %463.0;
  %465 = cast(%464, dtype="int64") /* ty=Tensor[(1, 16, 8), int64] */;
  %466 = cast(%var_4955, dtype="int64") /* ty=Tensor[(12, 16, 8), int64] */;
  %467 = left_shift(%465, %466) /* ty=Tensor[(12, 16, 8), int64] */;
  (%467,)
}

def @func_6199(%var_6175: Tensor[(1, 16, 8), bool]) -> Tensor[(?, 16, 8), int8] {
  %468 = @func_5860() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %469 = %468.0;
  %470 = cast(%var_6175, dtype="int64") /* ty=Tensor[(1, 16, 8), int64] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="int64") /* ty=Tensor[(1, 16, 8), int64] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %474 = multiply(%472, %473) /* ty=Tensor[(?, 16, 8), int64] */;
  %475 = cast(%var_6175, dtype="float64") /* ty=Tensor[(1, 16, 8), float64] */;
  %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%474, dtype="float64") /* ty=Tensor[(?, 16, 8), float64] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %479 = mod(%477, %478) /* ty=Tensor[(?, 16, 8), float64] */;
  %480 = cast(%479, dtype="int8") /* ty=Tensor[(?, 16, 8), int8] */;
  %481 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%474, dtype="int8") /* ty=Tensor[(?, 16, 8), int8] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  right_shift(%482, %483) /* ty=Tensor[(?, 16, 8), int8] */
}

def @func_9215() -> Tensor[(13, 13, 15), bool] {
  %485 = fn () -> Tensor[(13, 13, 15), bool] {
    %484 = @func_7624() /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 1), float64], Tensor[(13), float64]) */;
    %484.0
  };
  %485() /* ty=Tensor[(13, 13, 15), bool] */
}

def @main() -> (Tensor[(1, 9, 15), float32],) {
  %486 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 9, 15), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 15), float32] */;
  %487 = cosh(%486) /* ty=Tensor[(1, 9, 15), float32] */;
  (%487,)
}

def @func_6616() -> (Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), bool]) {
  %492 = fn () -> (Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), bool]) {
    %488 = @func_5703() /* ty=(Tensor[(?, 16, 8), int16], Tensor[(13, 13, 15), bool], Tensor[(2535), int64], Tensor[(11, 14, 11), float32], Tensor[(1694), uint32]) */;
    %489 = @func_5703() /* ty=(Tensor[(?, 16, 8), int16], Tensor[(13, 13, 15), bool], Tensor[(2535), int64], Tensor[(11, 14, 11), float32], Tensor[(1694), uint32]) */;
    %490 = %488.1;
    %491 = %489.1;
    (%490, %491)
  };
  %492() /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), bool]) */
}

def @func_4705(%var_4703: Tensor[(11, 9, 2), float32], %var_4704: Tensor[(2016, 1), float32]) -> (Tensor[(11, 9, 2), float32], Tensor[(14, 4, 15), float32], Tensor[(840), float32], Tensor[(12, 12, 14), float32], Tensor[(2016, 1), float32]) {
  %502 = fn (%var_4655: Tensor[(11, 9, 2), float32], %var_4676: Tensor[(2016, 1), float32]) -> (Tensor[(11, 9, 2), float32], Tensor[(14, 4, 15), float32], Tensor[(840), float32], Tensor[(12, 12, 14), float32], Tensor[(2016, 1), float32]) {
    %493 = cast(%var_4655, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
    %494 = cast(meta[relay.Constant][36] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
    %495 = reshape(%494, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float32] */;
    %496 = cast(%var_4676, dtype="float32") /* ty=Tensor[(2016, 1), float32] */;
    %497 = reshape(%496, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), float32] */;
    %498 = @func_3104(%497) /* ty=(Tensor[(12, 12, 14), float32],) */;
    %499 = sinh(%493) /* ty=Tensor[(11, 9, 2), float32] */;
    %500 = @func_3438(%495) /* ty=Tensor[(14, 4, 15), float32] */;
    %501 = %498.0;
    (%499, %500, meta[relay.Constant][36] /* ty=Tensor[(840), float32] */, %501, %var_4676)
  };
  %502(%var_4703, %var_4704) /* ty=(Tensor[(11, 9, 2), float32], Tensor[(14, 4, 15), float32], Tensor[(840), float32], Tensor[(12, 12, 14), float32], Tensor[(2016, 1), float32]) */
}

def @func_4943() -> (Tensor[(1, 16, 8), bool],) {
  %503 = @func_4894() /* ty=Tensor[(1, 16, 8), bool] */;
  (%503,)
}

def @func_7151() -> (Tensor[(1, 16, 8), bool],) {
  %504 = @func_6331() /* ty=Tensor[(1, 16, 8), bool] */;
  (%504,)
}

def @func_808(%var_806: Tensor[(1, 2, 8), uint32]) -> (Tensor[(?, 2, 8), uint32],) {
  @func_805(%var_806) /* ty=(Tensor[(?, 2, 8), uint32],) */
}

def @func_5217() -> (Tensor[(1, 16, 8), bool],) {
  %505 = @func_4943() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %506 = %505.0;
  (%506,)
}

def @func_7153() -> (Tensor[(1, 16, 8), bool],) {
  @func_7151() /* ty=(Tensor[(1, 16, 8), bool],) */
}

def @func_3107(%var_3105: Tensor[(12, 12, 14), float32]) -> (Tensor[(12, 12, 14), float32],) {
  @func_3104(%var_3105) /* ty=(Tensor[(12, 12, 14), float32],) */
}

def @func_7229() -> Tensor[(2535), int64] {
  @func_7227() /* ty=Tensor[(2535), int64] */
}

def @func_4487(%var_4485: Tensor[(2, 1, 16), float64], %var_4486: Tensor[(2, 5, 16), float64]) -> (Tensor[(2, 5, 16), float64],) {
  %510 = fn (%var_4455: Tensor[(2, 1, 16), float64], %var_4456: Tensor[(2, 5, 16), float64]) -> (Tensor[(2, 5, 16), float64],) {
    %507 = cast(%var_4455, dtype="float64") /* ty=Tensor[(2, 1, 16), float64] */;
    %508 = cast(%var_4456, dtype="float64") /* ty=Tensor[(2, 5, 16), float64] */;
    %509 = multiply(%507, %508) /* ty=Tensor[(2, 5, 16), float64] */;
    (%509,)
  };
  %510(%var_4485, %var_4486) /* ty=(Tensor[(2, 5, 16), float64],) */
}

def @func_5315(%var_5314: Tensor[(2, 11, 11), float32]) -> Tensor[(2, 11, 11), float32] {
  %512 = fn (%var_5306: Tensor[(2, 11, 11), float32]) -> Tensor[(2, 11, 11), float32] {
    %511 = cast(%var_5306, dtype="float32") /* ty=Tensor[(2, 11, 11), float32] */;
    sin(%511) /* ty=Tensor[(2, 11, 11), float32] */
  };
  %512(%var_5314) /* ty=Tensor[(2, 11, 11), float32] */
}

def @func_7124() -> Tensor[(1, 16, 8), bool] {
  @func_5295() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_7626() -> (Tensor[(13, 13, 15), bool], Tensor[(13, 1), float64], Tensor[(13), float64]) {
  @func_7624() /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 1), float64], Tensor[(13), float64]) */
}

def @func_2317(%var_2315: Tensor[(5, 2, 3), uint16], %var_2316: Tensor[(5, 2, 3), uint16]) -> (Tensor[(5, 2, 3), uint16], Tensor[(5, 2, 3), float64]) {
  %520 = fn (%var_2307: Tensor[(5, 2, 3), uint16], %var_2308: Tensor[(5, 2, 3), uint16]) -> (Tensor[(5, 2, 3), uint16], Tensor[(5, 2, 3), float64]) {
    %513 = cast(%var_2308, dtype="uint16") /* ty=Tensor[(5, 2, 3), uint16] */;
    %514 = shape_of(%var_2307, dtype="int32") /* ty=Tensor[(3), int32] */;
    %515 = cast(%var_2307, dtype="uint16") /* ty=Tensor[(5, 2, 3), uint16] */;
    %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %517 = cast(%var_2307, dtype="float64") /* ty=Tensor[(5, 2, 3), float64] */;
    %518 = multiply(%515, %516) /* ty=Tensor[(5, 2, 3), uint16] */;
    %519 = exp(%517) /* ty=Tensor[(5, 2, 3), float64] */;
    (%518, %519)
  };
  %520(%var_2315, %var_2316) /* ty=(Tensor[(5, 2, 3), uint16], Tensor[(5, 2, 3), float64]) */
}

def @func_6474() -> Tensor[(1, 16, 8), bool] {
  @func_6304() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_6667() -> (Tensor[(840), float32],) {
  %521 = @func_6071() /* ty=(Tensor[(1, 16, 8), bool], Tensor[(1536), bool], Tensor[(14, 1), bool], Tensor[(336), float64], Tensor[(12, 16, 8), int32], Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool], Tensor[(840), float32], Tensor[(16, 16, 8), float64], Tensor[(2048), bool], Tensor[(72), float64], Tensor[(5, 2, 3), uint16], Tensor[(30), uint16]) */;
  %522 = %521.7;
  (%522,)
}

def @func_5408(%var_5389: Tensor[(16, 16, 8), bool], %var_5400: Tensor[(72), float64]) -> (Tensor[(16, 16, 8), float64], Tensor[(4, 2, 9), float64], Tensor[(72), float64]) {
  %523 = @func_5217() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %524 = %523.0;
  %525 = cast(%524, dtype="float64") /* ty=Tensor[(1, 16, 8), float64] */;
  %526 = cast(%var_5389, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
  %527 = cast(%var_5400, dtype="float64") /* ty=Tensor[(72), float64] */;
  %528 = reshape(%527, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %529 = multiply(%525, %526) /* ty=Tensor[(16, 16, 8), float64] */;
  %530 = @func_4824(%528) /* ty=Tensor[(4, 2, 9), float64] */;
  (%529, %530, %var_5400)
}

def @func_7932() -> (Tensor[(2535), int64], Tensor[(135), float64], Tensor[(378), float32], Tensor[(1, 16, 8), float32], Tensor[(?, 16, 8), int8], Tensor[(?, 16, 8), float32]) {
  %531 = cast(meta[relay.Constant][37] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %532 = cast(meta[relay.Constant][38] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %533 = cast(meta[relay.Constant][37] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %534 = reshape(%531, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float64] */;
  %535 = reshape(%532, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %536 = reshape(%533, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float64] */;
  %537 = @func_2462(%534, %535, %536) /* ty=(Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(3, 9, 5), bool]) */;
  %538 = @func_5657() /* ty=Tensor[(1, 16, 8), bool] */;
  %539 = cast(%538, dtype="float64") /* ty=Tensor[(1, 16, 8), float64] */;
  %540 = atan(%539) /* ty=Tensor[(1, 16, 8), float64] */;
  %541 = cast(%540, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
  %542 = @func_6474() /* ty=Tensor[(1, 16, 8), bool] */;
  %543 = cast(%542, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
  %544 = reshape(%543, newshape=[1, 16, 8]) /* ty=Tensor[(1, 16, 8), bool] */;
  %545 = cast(%542, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
  %546 = shape_of(%540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%540, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %549 = %537.4;
  %550 = asinh(%541) /* ty=Tensor[(1, 16, 8), float32] */;
  %551 = @func_6199(%544) /* ty=Tensor[(?, 16, 8), int8] */;
  %552 = floor_divide(%547, %548) /* ty=Tensor[(?, 16, 8), float32] */;
  (%549, meta[relay.Constant][37] /* ty=Tensor[(135), float64] */, meta[relay.Constant][38] /* ty=Tensor[(378), float32] */, %550, %551, %552)
}

def @func_5640() -> Tensor[(1, 16, 8), bool] {
  %554 = fn () -> Tensor[(1, 16, 8), bool] {
    %553 = @func_4943() /* ty=(Tensor[(1, 16, 8), bool],) */;
    %553.0
  };
  %554() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_5994() -> (Tensor[(1, 16, 8), bool],) {
  %555 = @func_5657() /* ty=Tensor[(1, 16, 8), bool] */;
  (%555,)
}

def @func_6073() -> (Tensor[(1, 16, 8), bool], Tensor[(1536), bool], Tensor[(14, 1), bool], Tensor[(336), float64], Tensor[(12, 16, 8), int32], Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool], Tensor[(840), float32], Tensor[(16, 16, 8), float64], Tensor[(2048), bool], Tensor[(72), float64], Tensor[(5, 2, 3), uint16], Tensor[(30), uint16]) {
  @func_6071() /* ty=(Tensor[(1, 16, 8), bool], Tensor[(1536), bool], Tensor[(14, 1), bool], Tensor[(336), float64], Tensor[(12, 16, 8), int32], Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool], Tensor[(840), float32], Tensor[(16, 16, 8), float64], Tensor[(2048), bool], Tensor[(72), float64], Tensor[(5, 2, 3), uint16], Tensor[(30), uint16]) */
}

def @func_4254(%var_4238: Tensor[(9, 8, 11), uint64]) -> (Tensor[(9, 8, 11), bool], Tensor[(9, 7, 12), uint8], Tensor[(756), float64]) {
  %556 = cast(%var_4238, dtype="bool") /* ty=Tensor[(9, 8, 11), bool] */;
  %557 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(9, 8, 11), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(meta[relay.Constant][39] /* ty=Tensor[(9, 8, 11), uint64] */, dtype="bool") /* ty=Tensor[(9, 8, 11), bool] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %560 = cast(meta[relay.Constant][40] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %561 = reshape(%560, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float64] */;
  %562 = equal(%558, %559) /* ty=Tensor[(9, 8, 11), bool] */;
  %563 = @func_2585(%561) /* ty=Tensor[(9, 7, 12), uint8] */;
  (%562, %563, meta[relay.Constant][40] /* ty=Tensor[(756), float64] */)
}

def @func_4826(%var_4825: Tensor[(4, 2, 9), float64]) -> Tensor[(4, 2, 9), float64] {
  %565 = fn (%var_4821: Tensor[(4, 2, 9), float64]) -> Tensor[(4, 2, 9), float64] {
    %564 = cast(%var_4821, dtype="float64") /* ty=Tensor[(4, 2, 9), float64] */;
    log10(%564) /* ty=Tensor[(4, 2, 9), float64] */
  };
  %565(%var_4825) /* ty=Tensor[(4, 2, 9), float64] */
}

def @func_5412(%var_5410: Tensor[(16, 16, 8), bool], %var_5411: Tensor[(72), float64]) -> (Tensor[(16, 16, 8), float64], Tensor[(4, 2, 9), float64], Tensor[(72), float64]) {
  @func_5408(%var_5410, %var_5411) /* ty=(Tensor[(16, 16, 8), float64], Tensor[(4, 2, 9), float64], Tensor[(72), float64]) */
}

def @func_9245() -> Tensor[(1, 16, 8), bool] {
  @func_9243() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_7063(%var_7061: Tensor[(135), float64]) -> (Tensor[(1, 16, 8), bool], Tensor[(14, 1), bool], uint32, Tensor[(14), uint32], Tensor[(9, 7, 12), uint8], Tensor[(1008), float32], Tensor[(756), float64], Tensor[(135), float64], Tensor[(39, 4), float32]) {
  @func_7060(%var_7061) /* ty=(Tensor[(1, 16, 8), bool], Tensor[(14, 1), bool], uint32, Tensor[(14), uint32], Tensor[(9, 7, 12), uint8], Tensor[(1008), float32], Tensor[(756), float64], Tensor[(135), float64], Tensor[(39, 4), float32]) */
}

def @func_7989() -> (Tensor[(1, 16, 8), bool], Tensor[(1, 16, 8), bool]) {
  %566 = @func_7124() /* ty=Tensor[(1, 16, 8), bool] */;
  %567 = @func_6304() /* ty=Tensor[(1, 16, 8), bool] */;
  (%566, %567)
}

def @func_189(%var_187: Tensor[(13, 13, 15), int64]) -> (Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), float64]) {
  @func_186(%var_187) /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), float64]) */
}

def @func_6262() -> Tensor[(1, 16, 8), bool] {
  %569 = fn () -> Tensor[(1, 16, 8), bool] {
    %568 = @func_5860() /* ty=(Tensor[(1, 16, 8), bool],) */;
    %568.0
  };
  %569() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_186(%var_174: Tensor[(13, 13, 15), int64]) -> (Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), float64]) {
  %570 = cast(meta[relay.Constant][41] /* ty=Tensor[(13, 13, 15), int64] */, dtype="bool") /* ty=Tensor[(13, 13, 15), bool] */;
  %571 = shape_of(%var_174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%var_174, dtype="bool") /* ty=Tensor[(13, 13, 15), bool] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %574 = cast(%var_174, dtype="float64") /* ty=Tensor[(13, 13, 15), float64] */;
  %575 = greater_equal(%572, %573) /* ty=Tensor[(13, 13, 15), bool] */;
  %576 = rsqrt(%574) /* ty=Tensor[(13, 13, 15), float64] */;
  (%575, %576)
}

def @func_5703() -> (Tensor[(?, 16, 8), int16], Tensor[(13, 13, 15), bool], Tensor[(2535), int64], Tensor[(11, 14, 11), float32], Tensor[(1694), uint32]) {
  %577 = @func_5657() /* ty=Tensor[(1, 16, 8), bool] */;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(1, 16, 8), float32] */;
  %579 = asin(%578) /* ty=Tensor[(1, 16, 8), float32] */;
  %580 = cast(%577, dtype="int16") /* ty=Tensor[(1, 16, 8), int16] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%579, dtype="int16") /* ty=Tensor[(1, 16, 8), int16] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %584 = cast(meta[relay.Constant][42] /* ty=Tensor[(2535), int64] */, dtype="int64") /* ty=Tensor[(2535), int64] */;
  %585 = reshape(%584, newshape=[13, 13, 15]) /* ty=Tensor[(13, 13, 15), int64] */;
  %586 = @func_186(%585) /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), float64]) */;
  %587 = cast(meta[relay.Constant][43] /* ty=Tensor[(1694), uint32] */, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %588 = cast(meta[relay.Constant][43] /* ty=Tensor[(1694), uint32] */, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %589 = reshape(%587, newshape=[11, 14, 11]) /* ty=Tensor[(11, 14, 11), uint32] */;
  %590 = reshape(%588, newshape=[11, 14, 11]) /* ty=Tensor[(11, 14, 11), uint32] */;
  %591 = @func_896(%589, %590) /* ty=(Tensor[(11, 14, 11), float32],) */;
  %592 = bitwise_and(%582, %583) /* ty=Tensor[(?, 16, 8), int16] */;
  %593 = %586.0;
  %594 = %591.0;
  (%592, %593, meta[relay.Constant][42] /* ty=Tensor[(2535), int64] */, %594, meta[relay.Constant][43] /* ty=Tensor[(1694), uint32] */)
}

def @func_6669() -> (Tensor[(840), float32],) {
  @func_6667() /* ty=(Tensor[(840), float32],) */
}

def @func_4895() -> Tensor[(1, 16, 8), bool] {
  %597 = fn () -> Tensor[(1, 16, 8), bool] {
    %595 = cast(-2.50037f /* ty=float32 */, dtype="bool") /* ty=bool */;
    %596 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 16, 8), float32] */, dtype="bool") /* ty=Tensor[(1, 16, 8), bool] */;
    not_equal(%595, %596) /* ty=Tensor[(1, 16, 8), bool] */
  };
  %597() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_8552() -> (Tensor[(13, 1), float64],) {
  %600 = fn () -> (Tensor[(13, 1), float64],) {
    %598 = @func_7624() /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 1), float64], Tensor[(13), float64]) */;
    %599 = %598.1;
    (%599,)
  };
  %600() /* ty=(Tensor[(13, 1), float64],) */
}

def @func_2357(%var_2347: Tensor[(5, 15, 14), uint64], %var_2348: Tensor[(5, 15, 14), uint64]) -> (Tensor[(5, 15, 14), uint64],) {
  %601 = cast(%var_2348, dtype="uint64") /* ty=Tensor[(5, 15, 14), uint64] */;
  %602 = shape_of(%var_2347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%var_2347, dtype="uint64") /* ty=Tensor[(5, 15, 14), uint64] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %605 = bitwise_xor(%603, %604) /* ty=Tensor[(5, 15, 14), uint64] */;
  (%605,)
}

def @func_9093(%var_9031: Tensor[(7, 8, 3), float32]) -> (Tensor[(7, 8, 3), int16], Tensor[(1, 16, 8), bool], Tensor[(13, 1), float64], Tensor[(13, 1), float64], Tensor[(?, 16, 8), float32], Tensor[(528), bool], Tensor[(1, 16, 8), bool]) {
  %606 = cast(%var_9031, dtype="float32") /* ty=Tensor[(7, 8, 3), float32] */;
  %607 = cosh(%606) /* ty=Tensor[(7, 8, 3), float32] */;
  %608 = cast(%var_9031, dtype="int16") /* ty=Tensor[(7, 8, 3), int16] */;
  %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%607, dtype="int16") /* ty=Tensor[(7, 8, 3), int16] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %612 = @func_8900() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %613 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 1), float64] */, dtype="float64") /* ty=Tensor[(13, 1), float64] */;
  %614 = reshape(%613, newshape=[13, 1]) /* ty=Tensor[(13, 1), float64] */;
  %615 = cast(meta[relay.Constant][46] /* ty=Tensor[(528), bool] */, dtype="bool") /* ty=Tensor[(528), bool] */;
  %616 = cast(meta[relay.Constant][46] /* ty=Tensor[(528), bool] */, dtype="bool") /* ty=Tensor[(528), bool] */;
  %617 = reshape(%615, newshape=[11, 8, 6]) /* ty=Tensor[(11, 8, 6), bool] */;
  %618 = reshape(%616, newshape=[11, 8, 6]) /* ty=Tensor[(11, 8, 6), bool] */;
  %619 = @func_8605(%617, %618) /* ty=(Tensor[(840), float32], Tensor[(?, 16, 8), float32], Tensor[(11, 8, 6), uint64]) */;
  %620 = add(%610, %611) /* ty=Tensor[(7, 8, 3), int16] */;
  %621 = %612.0;
  %622 = @func_5804(%614) /* ty=Tensor[(13, 1), float64] */;
  %623 = %619.1;
  %624 = @func_7716() /* ty=Tensor[(1, 16, 8), bool] */;
  (%620, %621, %622, meta[relay.Constant][45] /* ty=Tensor[(13, 1), float64] */, %623, meta[relay.Constant][46] /* ty=Tensor[(528), bool] */, %624)
}

def @func_5806(%var_5805: Tensor[(13, 1), float64]) -> Tensor[(13, 1), float64] {
  %626 = fn (%var_5787: Tensor[(13, 1), float64]) -> Tensor[(13, 1), float64] {
    %625 = cast(%var_5787, dtype="float64") /* ty=Tensor[(13, 1), float64] */;
    acos(%625) /* ty=Tensor[(13, 1), float64] */
  };
  %626(%var_5805) /* ty=Tensor[(13, 1), float64] */
}

def @func_5996() -> (Tensor[(1, 16, 8), bool],) {
  @func_5994() /* ty=(Tensor[(1, 16, 8), bool],) */
}

def @func_1732(%var_1730: float64, %var_1731: Tensor[(16, 6, 16), float64]) -> Tensor[(16, 6, 16), float64] {
  %629 = fn (%var_1699: float64, %var_1700: Tensor[(16, 6, 16), float64]) -> Tensor[(16, 6, 16), float64] {
    %627 = cast(%var_1699, dtype="float64") /* ty=float64 */;
    %628 = cast(%var_1700, dtype="float64") /* ty=Tensor[(16, 6, 16), float64] */;
    floor_divide(%627, %628) /* ty=Tensor[(16, 6, 16), float64] */
  };
  %629(%var_1730, %var_1731) /* ty=Tensor[(16, 6, 16), float64] */
}

def @func_2808(%var_2802: Tensor[(4, 7, 3), float32], %var_2803: Tensor[(4, 7, 3), float32], %var_2804: Tensor[(336), float64], %var_2805: Tensor[(378), float32], %var_2806: Tensor[(2535), int64], %var_2807: Tensor[(16), uint32]) -> (Tensor[(4, 7, 3), bool], Tensor[(12), float64], Tensor[(336), float64], float32, Tensor[(14, 3, 9), float32], Tensor[(378), float32], Tensor[(4, 7, 3), int32], Tensor[(14, 3, 9), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(14, 1), bool], Tensor[(?, 2, 8), uint32], Tensor[(16), uint32]) {
  @func_2800(%var_2802, %var_2803, %var_2804, %var_2805, %var_2806, %var_2807) /* ty=(Tensor[(4, 7, 3), bool], Tensor[(12), float64], Tensor[(336), float64], float32, Tensor[(14, 3, 9), float32], Tensor[(378), float32], Tensor[(4, 7, 3), int32], Tensor[(14, 3, 9), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(14, 1), bool], Tensor[(?, 2, 8), uint32], Tensor[(16), uint32]) */
}

def @func_4603(%var_4602: Tensor[(2, 10, 13), float64]) -> Tensor[(2, 10, 13), float64] {
  %631 = fn (%var_4596: Tensor[(2, 10, 13), float64]) -> Tensor[(2, 10, 13), float64] {
    %630 = cast(%var_4596, dtype="float64") /* ty=Tensor[(2, 10, 13), float64] */;
    cosh(%630) /* ty=Tensor[(2, 10, 13), float64] */
  };
  %631(%var_4602) /* ty=Tensor[(2, 10, 13), float64] */
}

def @func_6293() -> (Tensor[(1, 16, 8), bool],) {
  %632 = @func_5657() /* ty=Tensor[(1, 16, 8), bool] */;
  (%632,)
}

def @func_9162(%var_9160: Tensor[(1792), bool]) -> (Tensor[(1, 16, 8), bool], Tensor[(14, 16, 8), uint16], Tensor[(1792), bool]) {
  @func_9159(%var_9160) /* ty=(Tensor[(1, 16, 8), bool], Tensor[(14, 16, 8), uint16], Tensor[(1792), bool]) */
}

def @func_5861() -> (Tensor[(1, 16, 8), bool],) {
  %634 = fn () -> (Tensor[(1, 16, 8), bool],) {
    %633 = @func_4894() /* ty=Tensor[(1, 16, 8), bool] */;
    (%633,)
  };
  %634() /* ty=(Tensor[(1, 16, 8), bool],) */
}

def @func_5658() -> Tensor[(1, 16, 8), bool] {
  %635 = fn () -> Tensor[(1, 16, 8), bool] {
    @func_5639() /* ty=Tensor[(1, 16, 8), bool] */
  };
  %635() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_8941(%var_8922: Tensor[(10, 16, 8), bool], %var_8930: Tensor[(14), uint32]) -> (Tensor[(1, 16, 8), bool], Tensor[(840), float32], Tensor[(14), uint32], Tensor[(10, 16, 8), uint8]) {
  %636 = cast(meta[relay.Constant][47] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %637 = cast(%var_8930, dtype="uint32") /* ty=Tensor[(14), uint32] */;
  %638 = reshape(%636, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %639 = reshape(%637, newshape=[14]) /* ty=Tensor[(14), uint32] */;
  %640 = @func_5561(%638, %639) /* ty=(Tensor[(1, 16, 8), bool], Tensor[(14, 4, 15), float32], Tensor[(840), float32], Tensor[(14, 1), bool], uint32, Tensor[(14), uint32]) */;
  %641 = @func_8900() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %642 = %641.0;
  %643 = cast(%642, dtype="uint16") /* ty=Tensor[(1, 16, 8), uint16] */;
  %644 = cast(%var_8922, dtype="uint16") /* ty=Tensor[(10, 16, 8), uint16] */;
  %645 = subtract(%643, %644) /* ty=Tensor[(10, 16, 8), uint16] */;
  %646 = cast(%642, dtype="int16") /* ty=Tensor[(1, 16, 8), int16] */;
  %647 = cast(%var_8922, dtype="int16") /* ty=Tensor[(10, 16, 8), int16] */;
  %648 = multiply(%646, %647) /* ty=Tensor[(10, 16, 8), int16] */;
  %649 = cast(%648, dtype="uint8") /* ty=Tensor[(10, 16, 8), uint8] */;
  %650 = shape_of(%645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%645, dtype="uint8") /* ty=Tensor[(10, 16, 8), uint8] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %653 = %640.0;
  %654 = bitwise_or(%651, %652) /* ty=Tensor[(10, 16, 8), uint8] */;
  (%653, meta[relay.Constant][47] /* ty=Tensor[(840), float32] */, %var_8930, %654)
}

def @func_5564(%var_5562: Tensor[(840), float32], %var_5563: Tensor[(14), uint32]) -> (Tensor[(1, 16, 8), bool], Tensor[(14, 4, 15), float32], Tensor[(840), float32], Tensor[(14, 1), bool], uint32, Tensor[(14), uint32]) {
  %666 = fn (%var_5540: Tensor[(840), float32], %var_5552: Tensor[(14), uint32]) -> (Tensor[(1, 16, 8), bool], Tensor[(14, 4, 15), float32], Tensor[(840), float32], Tensor[(14, 1), bool], uint32, Tensor[(14), uint32]) {
    %655 = @func_4943() /* ty=(Tensor[(1, 16, 8), bool],) */;
    %656 = cast(%var_5540, dtype="float32") /* ty=Tensor[(840), float32] */;
    %657 = reshape(%656, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float32] */;
    %658 = cast(meta[relay.Constant][48] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %659 = cast(%var_5552, dtype="uint32") /* ty=Tensor[(14), uint32] */;
    %660 = reshape(%658, newshape=[]) /* ty=uint32 */;
    %661 = reshape(%659, newshape=[14, 1]) /* ty=Tensor[(14, 1), uint32] */;
    %662 = @func_725(%660, %661) /* ty=(Tensor[(14, 1), bool],) */;
    %663 = %655.0;
    %664 = @func_3438(%657) /* ty=Tensor[(14, 4, 15), float32] */;
    %665 = %662.0;
    (%663, %664, %var_5540, %665, meta[relay.Constant][48] /* ty=uint32 */, %var_5552)
  };
  %666(%var_5562, %var_5563) /* ty=(Tensor[(1, 16, 8), bool], Tensor[(14, 4, 15), float32], Tensor[(840), float32], Tensor[(14, 1), bool], uint32, Tensor[(14), uint32]) */
}

def @func_7430(%var_7428: Tensor[(16), uint32]) -> (Tensor[(1, 16, 8), float64], Tensor[(2535), int64], Tensor[(1, 16, 8), bool], Tensor[(?, 2, 8), uint32], Tensor[(16), uint32]) {
  @func_7427(%var_7428) /* ty=(Tensor[(1, 16, 8), float64], Tensor[(2535), int64], Tensor[(1, 16, 8), bool], Tensor[(?, 2, 8), uint32], Tensor[(16), uint32]) */
}

def @func_3104(%var_3091: Tensor[(12, 12, 14), float32]) -> (Tensor[(12, 12, 14), float32],) {
  %667 = cast(%var_3091, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
  %668 = log2(%667) /* ty=Tensor[(12, 12, 14), float32] */;
  (%668,)
}

def @func_4945() -> (Tensor[(1, 16, 8), bool],) {
  @func_4943() /* ty=(Tensor[(1, 16, 8), bool],) */
}

def @func_8505() -> (Tensor[(840), float32],) {
  %669 = @func_6667() /* ty=(Tensor[(840), float32],) */;
  %670 = %669.0;
  (%670,)
}

def @func_725(%var_699: uint32, %var_700: Tensor[(14, 1), uint32]) -> (Tensor[(14, 1), bool],) {
  %671 = cast(%var_699, dtype="bool") /* ty=bool */;
  %672 = cast(%var_700, dtype="bool") /* ty=Tensor[(14, 1), bool] */;
  %673 = less(%671, %672) /* ty=Tensor[(14, 1), bool] */;
  (%673,)
}

def @func_9243() -> Tensor[(1, 16, 8), bool] {
  %674 = @func_8900() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %674.0
}

def @func_6543(%var_6537: Tensor[(2048), bool], %var_6538: Tensor[(84, 1), float32], %var_6539: Tensor[(336), float64], %var_6540: Tensor[(2535), int64], %var_6541: Tensor[(1, 16), uint32], %var_6542: Tensor[(4, 16, 8), float64]) -> (Tensor[(4, 2, 9), float64], Tensor[(2048), bool], Tensor[(36, 2), float64], Tensor[(14, 3, 9), float32], Tensor[(84, 1), float32], Tensor[(336), float64], Tensor[(378, 1), float32], Tensor[(2535), int64], Tensor[(1, 16), uint32], Tensor[(4, 16, 8), int64]) {
  %702 = fn (%var_6515: Tensor[(2048), bool], %var_6520: Tensor[(84, 1), float32], %var_6521: Tensor[(336), float64], %var_6523: Tensor[(2535), int64], %var_6524: Tensor[(1, 16), uint32], %var_6529: Tensor[(4, 16, 8), float64]) -> (Tensor[(4, 2, 9), float64], Tensor[(2048), bool], Tensor[(36, 2), float64], Tensor[(14, 3, 9), float32], Tensor[(84, 1), float32], Tensor[(336), float64], Tensor[(378, 1), float32], Tensor[(2535), int64], Tensor[(1, 16), uint32], Tensor[(4, 16, 8), int64]) {
    %675 = cast(%var_6515, dtype="bool") /* ty=Tensor[(2048), bool] */;
    %676 = cast(meta[relay.Constant][49] /* ty=Tensor[(36, 2), float64] */, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
    %677 = reshape(%675, newshape=[16, 16, 8]) /* ty=Tensor[(16, 16, 8), bool] */;
    %678 = reshape(%676, newshape=[72]) /* ty=Tensor[(72), float64] */;
    %679 = @func_5408(%677, %678) /* ty=(Tensor[(16, 16, 8), float64], Tensor[(4, 2, 9), float64], Tensor[(72), float64]) */;
    %680 = cast(%var_6520, dtype="float32") /* ty=Tensor[(84, 1), float32] */;
    %681 = cast(%var_6520, dtype="float32") /* ty=Tensor[(84, 1), float32] */;
    %682 = cast(%var_6521, dtype="float64") /* ty=Tensor[(336), float64] */;
    %683 = cast(meta[relay.Constant][50] /* ty=Tensor[(378, 1), float32] */, dtype="float32") /* ty=Tensor[(378, 1), float32] */;
    %684 = cast(%var_6523, dtype="int64") /* ty=Tensor[(2535), int64] */;
    %685 = cast(%var_6524, dtype="uint32") /* ty=Tensor[(1, 16), uint32] */;
    %686 = reshape(%680, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), float32] */;
    %687 = reshape(%681, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), float32] */;
    %688 = reshape(%682, newshape=[336]) /* ty=Tensor[(336), float64] */;
    %689 = reshape(%683, newshape=[378]) /* ty=Tensor[(378), float32] */;
    %690 = reshape(%684, newshape=[2535]) /* ty=Tensor[(2535), int64] */;
    %691 = reshape(%685, newshape=[16]) /* ty=Tensor[(16), uint32] */;
    %692 = @func_2800(%686, %687, %688, %689, %690, %691) /* ty=(Tensor[(4, 7, 3), bool], Tensor[(12), float64], Tensor[(336), float64], float32, Tensor[(14, 3, 9), float32], Tensor[(378), float32], Tensor[(4, 7, 3), int32], Tensor[(14, 3, 9), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(14, 1), bool], Tensor[(?, 2, 8), uint32], Tensor[(16), uint32]) */;
    %693 = @func_6239() /* ty=(Tensor[(1, 16, 8), bool],) */;
    %694 = %693.0;
    %695 = cast(%694, dtype="float64") /* ty=Tensor[(1, 16, 8), float64] */;
    %696 = tan(%695) /* ty=Tensor[(1, 16, 8), float64] */;
    %697 = cast(%696, dtype="int64") /* ty=Tensor[(1, 16, 8), int64] */;
    %698 = cast(%var_6529, dtype="int64") /* ty=Tensor[(4, 16, 8), int64] */;
    %699 = %679.1;
    %700 = %692.4;
    %701 = multiply(%697, %698) /* ty=Tensor[(4, 16, 8), int64] */;
    (%699, %var_6515, meta[relay.Constant][49] /* ty=Tensor[(36, 2), float64] */, %700, %var_6520, %var_6521, meta[relay.Constant][50] /* ty=Tensor[(378, 1), float32] */, %var_6523, %var_6524, %701)
  };
  %702(%var_6537, %var_6538, %var_6539, %var_6540, %var_6541, %var_6542) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(2048), bool], Tensor[(36, 2), float64], Tensor[(14, 3, 9), float32], Tensor[(84, 1), float32], Tensor[(336), float64], Tensor[(378, 1), float32], Tensor[(2535), int64], Tensor[(1, 16), uint32], Tensor[(4, 16, 8), int64]) */
}

def @func_306(%var_304: Tensor[(8, 5, 14), uint8]) -> Tensor[(8, 5, 14), bool] {
  @func_303(%var_304) /* ty=Tensor[(8, 5, 14), bool] */
}

def @func_6295() -> (Tensor[(1, 16, 8), bool],) {
  @func_6293() /* ty=(Tensor[(1, 16, 8), bool],) */
}

def @func_1487(%var_1485: Tensor[(3, 9, 16), float64]) -> (Tensor[(3, 9, 16), float32],) {
  @func_1484(%var_1485) /* ty=(Tensor[(3, 9, 16), float32],) */
}

def @func_4235(%var_4233: Tensor[(7, 10, 8), uint32], %var_4234: Tensor[(7, 10, 8), uint32]) -> (Tensor[(7, 10, 8), bool], Tensor[(7, 10, 8), float64]) {
  %717 = fn (%var_4202: Tensor[(7, 10, 8), uint32], %var_4203: Tensor[(7, 10, 8), uint32]) -> (Tensor[(7, 10, 8), bool], Tensor[(7, 10, 8), float64]) {
    %703 = cast(%var_4203, dtype="uint32") /* ty=Tensor[(7, 10, 8), uint32] */;
    %704 = shape_of(%var_4202, dtype="int32") /* ty=Tensor[(3), int32] */;
    %705 = cast(%var_4202, dtype="uint32") /* ty=Tensor[(7, 10, 8), uint32] */;
    %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %707 = add(%705, %706) /* ty=Tensor[(7, 10, 8), uint32] */;
    %708 = cast(%var_4202, dtype="float32") /* ty=Tensor[(7, 10, 8), float32] */;
    %709 = log10(%708) /* ty=Tensor[(7, 10, 8), float32] */;
    %710 = cast(%709, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
    %711 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
    %712 = cast(%707, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
    %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %714 = cast(%var_4203, dtype="float64") /* ty=Tensor[(7, 10, 8), float64] */;
    %715 = logical_and(%712, %713) /* ty=Tensor[(7, 10, 8), bool] */;
    %716 = rsqrt(%714) /* ty=Tensor[(7, 10, 8), float64] */;
    (%715, %716)
  };
  %717(%var_4233, %var_4234) /* ty=(Tensor[(7, 10, 8), bool], Tensor[(7, 10, 8), float64]) */
}

def @func_6331() -> Tensor[(1, 16, 8), bool] {
  %718 = @func_5844() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %718.0
}

def @func_8775() -> (Tensor[(1, 16, 8), bool],) {
  @func_8773() /* ty=(Tensor[(1, 16, 8), bool],) */
}

def @func_8811(%var_8797: Tensor[(2535), int64]) -> Tensor[(2535), bool] {
  %719 = @func_6695() /* ty=(Tensor[(2535), int64],) */;
  %720 = %719.0;
  %721 = cast(%var_8797, dtype="bool") /* ty=Tensor[(2535), bool] */;
  %722 = shape_of(%720, dtype="int32") /* ty=Tensor[(1), int32] */;
  %723 = cast(%720, dtype="bool") /* ty=Tensor[(2535), bool] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_or(%723, %724) /* ty=Tensor[(2535), bool] */
}

def @func_7367() -> (Tensor[(1, 16, 8), bool],) {
  %725 = @func_6474() /* ty=Tensor[(1, 16, 8), bool] */;
  (%725,)
}

def @func_6403(%var_6402: Tensor[(16), uint32]) -> (Tensor[(1, 16, 8), bool], Tensor[(16), uint32], Tensor[(?, 2, 8), float64]) {
  %734 = fn (%var_6376: Tensor[(16), uint32]) -> (Tensor[(1, 16, 8), bool], Tensor[(16), uint32], Tensor[(?, 2, 8), float64]) {
    %726 = @func_6239() /* ty=(Tensor[(1, 16, 8), bool],) */;
    %727 = cast(%var_6376, dtype="uint32") /* ty=Tensor[(16), uint32] */;
    %728 = reshape(%727, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), uint32] */;
    %729 = @func_805(%728) /* ty=(Tensor[(?, 2, 8), uint32],) */;
    %730 = %729.0;
    %731 = cast(%730, dtype="float64") /* ty=Tensor[(?, 2, 8), float64] */;
    %732 = %726.0;
    %733 = atan(%731) /* ty=Tensor[(?, 2, 8), float64] */;
    (%732, %var_6376, %733)
  };
  %734(%var_6402) /* ty=(Tensor[(1, 16, 8), bool], Tensor[(16), uint32], Tensor[(?, 2, 8), float64]) */
}

def @func_6770() -> Tensor[(1, 16, 8), float64] {
  @func_6768() /* ty=Tensor[(1, 16, 8), float64] */
}

def @func_8814(%var_8812: Tensor[(2535), int64]) -> Tensor[(2535), bool] {
  @func_8811(%var_8812) /* ty=Tensor[(2535), bool] */
}

def @func_5705() -> (Tensor[(?, 16, 8), int16], Tensor[(13, 13, 15), bool], Tensor[(2535), int64], Tensor[(11, 14, 11), float32], Tensor[(1694), uint32]) {
  @func_5703() /* ty=(Tensor[(?, 16, 8), int16], Tensor[(13, 13, 15), bool], Tensor[(2535), int64], Tensor[(11, 14, 11), float32], Tensor[(1694), uint32]) */
}

def @func_5745(%var_5742: Tensor[(6, 15, 6), uint64], %var_5743: Tensor[(6, 15, 6), uint64], %var_5744: Tensor[(242), float32]) -> (Tensor[(6, 15, 6), uint64], Tensor[(2, 11, 11), float32], Tensor[(242), float32]) {
  @func_5740(%var_5742, %var_5743, %var_5744) /* ty=(Tensor[(6, 15, 6), uint64], Tensor[(2, 11, 11), float32], Tensor[(242), float32]) */
}

def @func_6305() -> Tensor[(1, 16, 8), bool] {
  %735 = fn () -> Tensor[(1, 16, 8), bool] {
    @func_5888() /* ty=Tensor[(1, 16, 8), bool] */
  };
  %735() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_440(%var_419: Tensor[(1, 12, 1), float64], %var_433: Tensor[(560), uint8]) -> (Tensor[(1, 12, 1), float64], Tensor[(8, 5, 14), bool], Tensor[(560), uint8], Tensor[(8, 5, 14), bool]) {
  %736 = cast(%var_419, dtype="float64") /* ty=Tensor[(1, 12, 1), float64] */;
  %737 = cast(%var_433, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %738 = reshape(%737, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint8] */;
  %739 = @func_303(%738) /* ty=Tensor[(8, 5, 14), bool] */;
  %740 = cast(%739, dtype="uint8") /* ty=Tensor[(8, 5, 14), uint8] */;
  %741 = reshape(%740, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint8] */;
  %742 = acosh(%736) /* ty=Tensor[(1, 12, 1), float64] */;
  %743 = @func_303(%741) /* ty=Tensor[(8, 5, 14), bool] */;
  (%742, %739, %var_433, %743)
}

def @func_7934() -> (Tensor[(2535), int64], Tensor[(135), float64], Tensor[(378), float32], Tensor[(1, 16, 8), float32], Tensor[(?, 16, 8), int8], Tensor[(?, 16, 8), float32]) {
  @func_7932() /* ty=(Tensor[(2535), int64], Tensor[(135), float64], Tensor[(378), float32], Tensor[(1, 16, 8), float32], Tensor[(?, 16, 8), int8], Tensor[(?, 16, 8), float32]) */
}

def @func_7369() -> (Tensor[(1, 16, 8), bool],) {
  @func_7367() /* ty=(Tensor[(1, 16, 8), bool],) */
}

def @func_2157(%var_2152: float32, %var_2153: Tensor[(14, 3, 9), float32]) -> Tensor[(14, 3, 9), float32] {
  %744 = cast(%var_2152, dtype="float32") /* ty=float32 */;
  %745 = cast(%var_2153, dtype="float32") /* ty=Tensor[(14, 3, 9), float32] */;
  power(%744, %745) /* ty=Tensor[(14, 3, 9), float32] */
}

def @func_3664(%var_3658: Tensor[(9, 16, 7), float32], %var_3659: Tensor[(9, 16, 7), float32], %var_3660: Tensor[(756), float64], %var_3661: Tensor[(135), float64], %var_3662: Tensor[(9, 16, 7), float32], %var_3663: Tensor[(156), float32]) -> (Tensor[(9, 16, 7), float64], Tensor[(9, 7, 12), uint8], Tensor[(756), float64], Tensor[(13, 13, 15), float64], Tensor[(135), float64], Tensor[(42, 9), float32], Tensor[(9, 7, 12), uint8], Tensor[(9, 16, 7), float64], Tensor[(1, 12, 13), float32], Tensor[(156), float32]) {
  @func_3656(%var_3658, %var_3659, %var_3660, %var_3661, %var_3662, %var_3663) /* ty=(Tensor[(9, 16, 7), float64], Tensor[(9, 7, 12), uint8], Tensor[(756), float64], Tensor[(13, 13, 15), float64], Tensor[(135), float64], Tensor[(42, 9), float32], Tensor[(9, 7, 12), uint8], Tensor[(9, 16, 7), float64], Tensor[(1, 12, 13), float32], Tensor[(156), float32]) */
}

def @func_805(%var_800: Tensor[(1, 2, 8), uint32]) -> (Tensor[(?, 2, 8), uint32],) {
  %746 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 2, 8), uint32] */, dtype="uint32") /* ty=Tensor[(1, 2, 8), uint32] */;
  %747 = shape_of(%var_800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%var_800, dtype="uint32") /* ty=Tensor[(1, 2, 8), uint32] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %750 = add(%748, %749) /* ty=Tensor[(?, 2, 8), uint32] */;
  (%750,)
}

def @func_8867() -> (Tensor[(1, 16, 8), bool],) {
  %752 = fn () -> (Tensor[(1, 16, 8), bool],) {
    %751 = @func_8226() /* ty=Tensor[(1, 16, 8), bool] */;
    (%751,)
  };
  %752() /* ty=(Tensor[(1, 16, 8), bool],) */
}

def @func_8507() -> (Tensor[(840), float32],) {
  @func_8505() /* ty=(Tensor[(840), float32],) */
}

def @func_3547(%var_3543: Tensor[(1, 12, 13), float32]) -> (Tensor[(1, 12, 13), float32],) {
  %753 = cast(%var_3543, dtype="float32") /* ty=Tensor[(1, 12, 13), float32] */;
  %754 = exp(%753) /* ty=Tensor[(1, 12, 13), float32] */;
  (%754,)
}

def @func_6333() -> Tensor[(1, 16, 8), bool] {
  @func_6331() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_7540(%var_7538: Tensor[(432), float64]) -> (Tensor[(1, 16, 8), bool], Tensor[(3, 9, 16), float32], Tensor[(432), float64]) {
  @func_7537(%var_7538) /* ty=(Tensor[(1, 16, 8), bool], Tensor[(3, 9, 16), float32], Tensor[(432), float64]) */
}

def @func_6768() -> Tensor[(1, 16, 8), float64] {
  %755 = @func_5860() /* ty=(Tensor[(1, 16, 8), bool],) */;
  %756 = %755.0;
  %757 = cast(%756, dtype="float64") /* ty=Tensor[(1, 16, 8), float64] */;
  log10(%757) /* ty=Tensor[(1, 16, 8), float64] */
}

def @func_8609(%var_8607: Tensor[(11, 8, 6), bool], %var_8608: Tensor[(11, 8, 6), bool]) -> (Tensor[(840), float32], Tensor[(?, 16, 8), float32], Tensor[(11, 8, 6), uint64]) {
  @func_8605(%var_8607, %var_8608) /* ty=(Tensor[(840), float32], Tensor[(?, 16, 8), float32], Tensor[(11, 8, 6), uint64]) */
}

def @func_8755(%var_8753: Tensor[(12, 16, 8), bool], %var_8754: Tensor[(12, 16, 8), float32]) -> (Tensor[(12, 16, 8), bool], Tensor[(14, 16, 8), uint16], Tensor[(2, 896), bool], Tensor[(12, 16, 8), int8], Tensor[(840), float32]) {
  @func_8751(%var_8753, %var_8754) /* ty=(Tensor[(12, 16, 8), bool], Tensor[(14, 16, 8), uint16], Tensor[(2, 896), bool], Tensor[(12, 16, 8), int8], Tensor[(840), float32]) */
}

def @func_6202(%var_6200: Tensor[(1, 16, 8), bool]) -> Tensor[(?, 16, 8), int8] {
  @func_6199(%var_6200) /* ty=Tensor[(?, 16, 8), int8] */
}

def @func_303(%var_299: Tensor[(8, 5, 14), uint8]) -> Tensor[(8, 5, 14), bool] {
  %758 = cast(meta[relay.Constant][52] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %759 = cast(%var_299, dtype="bool") /* ty=Tensor[(8, 5, 14), bool] */;
  equal(%758, %759) /* ty=Tensor[(8, 5, 14), bool] */
}

def @func_5846() -> (Tensor[(1, 16, 8), bool],) {
  @func_5844() /* ty=(Tensor[(1, 16, 8), bool],) */
}

def @func_2587(%var_2586: Tensor[(9, 7, 12), float64]) -> Tensor[(9, 7, 12), uint8] {
  %766 = fn (%var_2571: Tensor[(9, 7, 12), float64]) -> Tensor[(9, 7, 12), uint8] {
    %760 = cast(%var_2571, dtype="float64") /* ty=Tensor[(9, 7, 12), float64] */;
    %761 = rsqrt(%760) /* ty=Tensor[(9, 7, 12), float64] */;
    %762 = cast(%var_2571, dtype="uint8") /* ty=Tensor[(9, 7, 12), uint8] */;
    %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
    %764 = cast(%761, dtype="uint8") /* ty=Tensor[(9, 7, 12), uint8] */;
    %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    bitwise_xor(%764, %765) /* ty=Tensor[(9, 7, 12), uint8] */
  };
  %766(%var_2586) /* ty=Tensor[(9, 7, 12), uint8] */
}

def @func_5889() -> Tensor[(1, 16, 8), bool] {
  %768 = fn () -> Tensor[(1, 16, 8), bool] {
    %767 = @func_4943() /* ty=(Tensor[(1, 16, 8), bool],) */;
    %767.0
  };
  %768() /* ty=Tensor[(1, 16, 8), bool] */
}

def @func_2800(%var_2679: Tensor[(4, 7, 3), float32], %var_2680: Tensor[(4, 7, 3), float32], %var_2694: Tensor[(336), float64], %var_2730: Tensor[(378), float32], %var_2772: Tensor[(2535), int64], %var_2787: Tensor[(16), uint32]) -> (Tensor[(4, 7, 3), bool], Tensor[(12), float64], Tensor[(336), float64], float32, Tensor[(14, 3, 9), float32], Tensor[(378), float32], Tensor[(4, 7, 3), int32], Tensor[(14, 3, 9), float32], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], Tensor[(14, 1), bool], Tensor[(?, 2, 8), uint32], Tensor[(16), uint32]) {
  %769 = cast(%var_2680, dtype="bool") /* ty=Tensor[(4, 7, 3), bool] */;
  %770 = shape_of(%var_2679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%var_2679, dtype="bool") /* ty=Tensor[(4, 7, 3), bool] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %773 = cast(%var_2694, dtype="float64") /* ty=Tensor[(336), float64] */;
  %774 = reshape(%773, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), float64] */;
  %775 = @func_2386(%774) /* ty=(Tensor[(12, 2, 14), float64], Tensor[(12), float64], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(14, 1), bool], Tensor[(14), uint32]) */;
  %776 = cast(%var_2694, dtype="float64") /* ty=Tensor[(336), float64] */;
  %777 = reshape(%776, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), float64] */;
  %778 = @func_2386(%777) /* ty=(Tensor[(12, 2, 14), float64], Tensor[(12), float64], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(14, 1), bool], Tensor[(14), uint32]) */;
  %779 = %778.5;
  %780 = cast(%779, dtype="float32") /* ty=float32 */;
  %781 = cast(%var_2730, dtype="float32") /* ty=Tensor[(378), float32] */;
  %782 = reshape(%780, newshape=[]) /* ty=float32 */;
  %783 = reshape(%781, newshape=[14, 3, 9]) /* ty=Tensor[(14, 3, 9), float32] */;
  %784 = cast(%var_2680, dtype="float32") /* ty=Tensor[(4, 7, 3), float32] */;
  %785 = rsqrt(%784) /* ty=Tensor[(4, 7, 3), float32] */;
  %786 = cast(%var_2680, dtype="int32") /* ty=Tensor[(4, 7, 3), int32] */;
  %787 = shape_of(%785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%785, dtype="int32") /* ty=Tensor[(4, 7, 3), int32] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %790 = cast(%var_2694, dtype="float64") /* ty=Tensor[(336), float64] */;
  %791 = reshape(%790, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), float64] */;
  %792 = @func_2386(%791) /* ty=(Tensor[(12, 2, 14), float64], Tensor[(12), float64], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(14, 1), bool], Tensor[(14), uint32]) */;
  %793 = cast(%var_2772, dtype="int64") /* ty=Tensor[(2535), int64] */;
  %794 = reshape(%793, newshape=[13, 13, 15]) /* ty=Tensor[(13, 13, 15), int64] */;
  %795 = @func_186(%794) /* ty=(Tensor[(13, 13, 15), bool], Tensor[(13, 13, 15), float64]) */;
  %796 = cast(%var_2694, dtype="float64") /* ty=Tensor[(336), float64] */;
  %797 = reshape(%796, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), float64] */;
  %798 = @func_2386(%797) /* ty=(Tensor[(12, 2, 14), float64], Tensor[(12), float64], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(14, 3, 9), float32], float32, Tensor[(378), float32], Tensor[(14, 1), bool], Tensor[(14), uint32]) */;
  %799 = cast(%var_2787, dtype="uint32") /* ty=Tensor[(16), uint32] */;
  %800 = reshape(%799, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), uint32] */;
  %801 = @func_805(%800) /* ty=(Tensor[(?, 2, 8), uint32],) */;
  %802 = greater(%771, %772) /* ty=Tensor[(4, 7, 3), bool] */;
  %803 = %775.1;
  %804 = @func_2157(%782, %783) /* ty=Tensor[(14, 3, 9), float32] */;
  %805 = bitwise_or(%788, %789) /* ty=Tensor[(4, 7, 3), int32] */;
  %806 = %792.4;
  %807 = %795.1;
  %808 = %798.7;
  %809 = %801.0;
  (%802, %803, %var_2694, %779, %804, %var_2730, %805, %806, %807, %var_2772, %808, %809, %var_2787)
}

def @func_7227() -> Tensor[(2535), int64] {
  %810 = @func_6695() /* ty=(Tensor[(2535), int64],) */;
  %810.0
}

def @func_5181(%var_5177: Tensor[(15, 16, 8), float64], %var_5178: Tensor[(32), float64], %var_5179: Tensor[(1080), float32], %var_5180: Tensor[(378), float32]) -> (Tensor[(?, 16, 8), bool], Tensor[(15, 16, 8), bool], Tensor[(2, 5, 16), float64], Tensor[(32), float64], Tensor[(8, 20), float64], Tensor[(560), uint8], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], float32, Tensor[(3, 45), float64], Tensor[(378), float32]) {
  @func_5175(%var_5177, %var_5178, %var_5179, %var_5180) /* ty=(Tensor[(?, 16, 8), bool], Tensor[(15, 16, 8), bool], Tensor[(2, 5, 16), float64], Tensor[(32), float64], Tensor[(8, 20), float64], Tensor[(560), uint8], Tensor[(1080), float32], Tensor[(12), float64], Tensor[(13, 13, 15), float64], Tensor[(2535), int64], float32, Tensor[(3, 45), float64], Tensor[(378), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen311/build/output.py:2197: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen311/build/output.py:2202: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen311/build/output.py:2231: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen311/build/output.py:2236: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen311/build/output.py:2241: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen311/build/output.py:2246: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='cuda')

===================================
#[version = "0.0.5"]
type GradCell[T] {
  Raw(T),
  One(fn () -> T),
  Zero(fn () -> T),
}

def @AddGradCell[T](%add: fn (T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  %0 = (%l, %r);
  match (%0) {
    (Zero(_), _) => {
      %r
    },
    (_, Zero(_)) => {
      %l
    },
    _ => {
      %1 = match (%l) {
        Raw(%x: T) => {
          %x
        },
        One(%x1: fn () -> T) => {
          %x1() /* ty=T */
        },
        Zero(%x2: fn () -> T) => {
          %x2() /* ty=T */
        },
      };
      %2 = match (%r) {
        Raw(%x3: T) => {
          %x3
        },
        One(%x4: fn () -> T) => {
          %x4() /* ty=T */
        },
        Zero(%x5: fn () -> T) => {
          %x5() /* ty=T */
        },
      };
      %3 = %add(%1, %2) /* ty=T */;
      Raw(%3) /* ty=GradCell[T] */
    },
  }
}

def @main() -> ((Tensor[(1, 9, 15), float32],), ()) {
  %4 = (meta[relay.Constant][0] /* ty=Tensor[(1, 9, 15), float32] */,);
  %5 = ();
  (%4, %5)
}

def @MultiplyGradCell[T](%multiply: fn (T, T) -> T, %l1: GradCell[T], %r1: GradCell[T]) -> GradCell[T] {
  %6 = (%l1, %r1);
  match (%6) {
    (Zero(_), _) => {
      %l1
    },
    (_, Zero(_)) => {
      %r1
    },
    (One(_), _) => {
      %r1
    },
    (_, One(_)) => {
      %l1
    },
    _ => {
      %7 = match (%l1) {
        Raw(%x6: T) => {
          %x6
        },
        One(%x7: fn () -> T) => {
          %x7() /* ty=T */
        },
        Zero(%x8: fn () -> T) => {
          %x8() /* ty=T */
        },
      };
      %8 = match (%r1) {
        Raw(%x9: T) => {
          %x9
        },
        One(%x10: fn () -> T) => {
          %x10() /* ty=T */
        },
        Zero(%x11: fn () -> T) => {
          %x11() /* ty=T */
        },
      };
      %9 = %multiply(%7, %8) /* ty=T */;
      Raw(%9) /* ty=GradCell[T] */
    },
  }
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  match (%g) {
    Raw(%x12: T) => {
      %x12
    },
    One(%x13: fn () -> T) => {
      %x13() /* ty=T */
    },
    Zero(%x14: fn () -> T) => {
      %x14() /* ty=T */
    },
  }
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
