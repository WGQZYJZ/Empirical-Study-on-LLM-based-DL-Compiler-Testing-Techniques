==========mod==========
#[version = "0.0.5"]
def @func_7302(%var_7275: Tensor[(224), float64], %var_7276: Tensor[(98), float32]) -> (Tensor[(10, 9, 6), float32], Tensor[(2, 112), float64], Tensor[(224), float64], Tensor[(98), float64], Tensor[(180), uint16], Tensor[(840), float32], Tensor[(10, 9, 6), float32]) {
  %0 = cast(%var_7275, dtype="float64") /* ty=Tensor[(224), float64] */;
  %1 = cast(%var_7276, dtype="float32") /* ty=Tensor[(98), float32] */;
  %2 = reshape(%0, newshape=[2, 112]) /* ty=Tensor[(2, 112), float64] */;
  %3 = reshape(%1, newshape=[98]) /* ty=Tensor[(98), float32] */;
  %4 = @func_7180(%2, %3) /* ty=(Tensor[(10, 9, 6), float64], Tensor[(1, 14, 7), float32], Tensor[(2, 112), float64], Tensor[(98), float32], Tensor[(13, 11, 3), uint16], Tensor[(13, 11, 3), int64]) */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(98), float32] */, dtype="float64") /* ty=Tensor[(98), float64] */;
  %6 = shape_of(%var_7276, dtype="int32") /* ty=Tensor[(1), int32] */;
  %7 = cast(%var_7276, dtype="float64") /* ty=Tensor[(98), float64] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?), float64] */;
  %9 = @func_4984() /* ty=Tensor[(10, 9, 6), float32] */;
  %10 = cast(%9, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  %11 = reshape(%10, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float64] */;
  %12 = @func_3122(%11) /* ty=(Tensor[(10, 9, 6), bool], Tensor[(180), uint16]) */;
  %13 = @func_5815() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32], Tensor[(840), float32]) */;
  %14 = @func_3571() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) */;
  %15 = %4.2;
  %16 = power(%7, %8) /* ty=Tensor[(98), float64] */;
  %17 = %12.1;
  %18 = %13.2;
  %19 = %14.0;
  (%9, %15, %var_7275, %16, %17, %18, %19)
}

def @func_1847() -> Tensor[(10, 9, 6), float32] {
  %20 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %20.0
}

def @func_7757(%var_7743: Tensor[(4, 1, 16), int64], %var_7744: Tensor[(4, 16, 16), int64]) -> Tensor[(4, 16, 16), bool] {
  %21 = cast(%var_7743, dtype="bool") /* ty=Tensor[(4, 1, 16), bool] */;
  %22 = cast(%var_7744, dtype="bool") /* ty=Tensor[(4, 16, 16), bool] */;
  equal(%21, %22) /* ty=Tensor[(4, 16, 16), bool] */
}

def @func_4733() -> (Tensor[(10, 9, 6), float32],) {
  %23 = @func_3672() /* ty=Tensor[(10, 9, 6), float32] */;
  (%23,)
}

def @func_5854(%var_5845: Tensor[(10, 9, 6), float64]) -> Tensor[(10, 9, 6), int8] {
  %24 = @func_3246() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %25 = %24.0;
  %26 = cast(%var_5845, dtype="int8") /* ty=Tensor[(10, 9, 6), int8] */;
  %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%25, dtype="int8") /* ty=Tensor[(10, 9, 6), int8] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  subtract(%28, %29) /* ty=Tensor[(10, 9, 6), int8] */
}

def @func_2334() -> (Tensor[(14, 16, 12), float32], Tensor[(10, 2, 15), float64], Tensor[(300), float64], Tensor[(10, 9, 6), bool], Tensor[(540), float32], Tensor[(4, 2, 10), float64], Tensor[(80), float32], Tensor[(14, 16, 12), float64]) {
  %30 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 16, 12), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 12), float32] */;
  %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %32 = reshape(%31, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %33 = @func_714(%32) /* ty=(Tensor[(10, 2, 15), float64],) */;
  %34 = cast(meta[relay.Constant][3] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
  %35 = reshape(%34, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
  %36 = @func_1833(%35) /* ty=(Tensor[(10, 9, 6), bool],) */;
  %37 = cast(meta[relay.Constant][4] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %38 = cast(meta[relay.Constant][4] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %39 = reshape(%37, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %40 = reshape(%38, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %41 = @func_774(%39, %40) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(4, 2, 10), float64]) */;
  %42 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 16, 12), float32] */, dtype="float64") /* ty=Tensor[(14, 16, 12), float64] */;
  %43 = cosh(%30) /* ty=Tensor[(14, 16, 12), float32] */;
  %44 = %33.0;
  %45 = %36.0;
  %46 = %41.1;
  %47 = acosh(%42) /* ty=Tensor[(14, 16, 12), float64] */;
  (%43, %44, meta[relay.Constant][2] /* ty=Tensor[(300), float64] */, %45, meta[relay.Constant][3] /* ty=Tensor[(540), float32] */, %46, meta[relay.Constant][4] /* ty=Tensor[(80), float32] */, %47)
}

def @func_6973() -> (Tensor[(10, 9, 6), float32],) {
  %48 = @func_6683() /* ty=Tensor[(10, 9, 6), float32] */;
  (%48,)
}

def @func_244(%var_213: Tensor[(6, 4, 13), float32], %var_229: uint16) -> (Tensor[(6, 4, 13), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) {
  %49 = cast(%var_213, dtype="float32") /* ty=Tensor[(6, 4, 13), float32] */;
  %50 = cast(%var_229, dtype="uint16") /* ty=uint16 */;
  %51 = cast(meta[relay.Constant][5] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %52 = reshape(%50, newshape=[]) /* ty=uint16 */;
  %53 = reshape(%51, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), uint16] */;
  %54 = @func_75(%52, %53) /* ty=(Tensor[(4, 3, 15), uint16],) */;
  %55 = log(%49) /* ty=Tensor[(6, 4, 13), float32] */;
  %56 = %54.0;
  (%55, %56, %var_229, meta[relay.Constant][5] /* ty=Tensor[(180), uint16] */)
}

def @func_5815() -> (Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32], Tensor[(840), float32]) {
  %57 = cast(meta[relay.Constant][6] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %58 = reshape(%57, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %59 = @func_4340(%58) /* ty=(Tensor[(10, 9, 6), float32], Tensor[(168), int32], int8, Tensor[(784, 2), int8], Tensor[(840), float32]) */;
  %60 = @func_5390() /* ty=Tensor[(10, 9, 6), float64] */;
  %61 = %59.0;
  (%60, %61, meta[relay.Constant][6] /* ty=Tensor[(840), float32] */)
}

def @func_1767(%var_1754: Tensor[(2, 40), float32]) -> (Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), int8], Tensor[(2, 40), float32]) {
  %62 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %63 = cast(%var_1754, dtype="float32") /* ty=Tensor[(2, 40), float32] */;
  %64 = cast(%var_1754, dtype="float32") /* ty=Tensor[(2, 40), float32] */;
  %65 = reshape(%63, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %66 = reshape(%64, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %67 = @func_774(%65, %66) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(4, 2, 10), float64]) */;
  %68 = %62.0;
  %69 = %67.0;
  (%68, %69, %var_1754)
}

def @func_7595() -> (Tensor[(10, 9, 6), float32],) {
  %70 = @func_2783() /* ty=Tensor[(10, 9, 6), float32] */;
  (%70,)
}

def @func_8247() -> Tensor[(10, 9, 6), float64] {
  %71 = @func_7486() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) */;
  %71.2
}

def @func_1005(%var_960: Tensor[(8, 2, 10), bool], %var_961: Tensor[(8, 2, 10), bool]) -> (Tensor[(8, 2, 10), uint8], Tensor[(8, 2, 10), int8]) {
  %72 = cast(%var_961, dtype="bool") /* ty=Tensor[(8, 2, 10), bool] */;
  %73 = shape_of(%var_960, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%var_960, dtype="bool") /* ty=Tensor[(8, 2, 10), bool] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %76 = logical_or(%74, %75) /* ty=Tensor[(8, 2, 10), bool] */;
  %77 = cast(%var_960, dtype="uint8") /* ty=Tensor[(8, 2, 10), uint8] */;
  %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%76, dtype="uint8") /* ty=Tensor[(8, 2, 10), uint8] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %81 = cast(%var_960, dtype="int64") /* ty=Tensor[(8, 2, 10), int64] */;
  %82 = shape_of(%var_961, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%var_961, dtype="int64") /* ty=Tensor[(8, 2, 10), int64] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %85 = multiply(%83, %84) /* ty=Tensor[(8, 2, 10), int64] */;
  %86 = cast(%85, dtype="float64") /* ty=Tensor[(8, 2, 10), float64] */;
  %87 = acos(%86) /* ty=Tensor[(8, 2, 10), float64] */;
  %88 = cast(%87, dtype="int8") /* ty=Tensor[(8, 2, 10), int8] */;
  %89 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%85, dtype="int8") /* ty=Tensor[(8, 2, 10), int8] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %92 = left_shift(%79, %80) /* ty=Tensor[(8, 2, 10), uint8] */;
  %93 = bitwise_and(%90, %91) /* ty=Tensor[(8, 2, 10), int8] */;
  (%92, %93)
}

def @func_4774(%var_4749: int64, %var_4750: Tensor[(5, 2, 13), int64], %var_4757: Tensor[(540), float32]) -> (Tensor[(5, 2, 13), bool], Tensor[(10, 9, 6), bool], Tensor[(540), float32]) {
  %94 = cast(%var_4749, dtype="bool") /* ty=bool */;
  %95 = cast(%var_4750, dtype="bool") /* ty=Tensor[(5, 2, 13), bool] */;
  %96 = cast(%var_4757, dtype="float32") /* ty=Tensor[(540), float32] */;
  %97 = reshape(%96, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
  %98 = greater_equal(%94, %95) /* ty=Tensor[(5, 2, 13), bool] */;
  %99 = @func_3486(%97) /* ty=Tensor[(10, 9, 6), bool] */;
  (%98, %99, %var_4757)
}

def @func_2813(%var_2787: Tensor[(4, 15, 13), uint64]) -> (Tensor[(4, 15, 13), bool], Tensor[(4, 2, 10), float64]) {
  %100 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 15, 13), uint64] */, dtype="bool") /* ty=Tensor[(4, 15, 13), bool] */;
  %101 = shape_of(%var_2787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%var_2787, dtype="bool") /* ty=Tensor[(4, 15, 13), bool] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %104 = @func_2334() /* ty=(Tensor[(14, 16, 12), float32], Tensor[(10, 2, 15), float64], Tensor[(300), float64], Tensor[(10, 9, 6), bool], Tensor[(540), float32], Tensor[(4, 2, 10), float64], Tensor[(80), float32], Tensor[(14, 16, 12), float64]) */;
  %105 = equal(%102, %103) /* ty=Tensor[(4, 15, 13), bool] */;
  %106 = %104.5;
  (%105, %106)
}

def @func_5133() -> (Tensor[(10, 9, 6), float32],) {
  %107 = @func_4212() /* ty=Tensor[(10, 9, 6), float32] */;
  (%107,)
}

def @func_6740(%var_6692: Tensor[(312), float32]) -> (Tensor[(4, 2, 10), float64], Tensor[(7, 12, 2), bool], Tensor[(840), float32], Tensor[(312), float32]) {
  %108 = @func_4620() /* ty=(Tensor[(4, 2, 10), float64],) */;
  %109 = cast(meta[relay.Constant][8] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %110 = cast(%var_6692, dtype="float32") /* ty=Tensor[(312), float32] */;
  %111 = reshape(%109, newshape=[15, 4, 14]) /* ty=Tensor[(15, 4, 14), float32] */;
  %112 = reshape(%110, newshape=[312]) /* ty=Tensor[(312), float32] */;
  %113 = @func_1179(%111, %112) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(20, 4), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16], Tensor[(7, 12, 2), bool], Tensor[(168), int32], Tensor[(4, 3, 15), uint16], Tensor[(312), float32], Tensor[(15, 4, 14), float32]) */;
  %114 = %108.0;
  %115 = %113.5;
  (%114, %115, meta[relay.Constant][8] /* ty=Tensor[(840), float32] */, %var_6692)
}

def @func_3184(%var_3126: Tensor[(13, 6, 4), float64], %var_3146: Tensor[(13, 6, 4), float64], %var_3171: Tensor[(780, 1), uint64], %var_3177: Tensor[(13, 6, 4), float64]) -> (Tensor[(312), float32], Tensor[(540), float32], Tensor[(840), float32], Tensor[(13, 4, 8), uint64], Tensor[(416), float64], Tensor[(13, 6, 4), bool], Tensor[(4, 2, 10), float64], Tensor[(780, 1), uint64], Tensor[(13, 6, 4), uint16]) {
  %116 = cast(meta[relay.Constant][9] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
  %117 = cast(meta[relay.Constant][9] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
  %118 = cast(meta[relay.Constant][10] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %119 = cast(%var_3126, dtype="float32") /* ty=Tensor[(13, 6, 4), float32] */;
  %120 = reshape(%116, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
  %121 = reshape(%117, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
  %122 = reshape(%118, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %123 = reshape(%119, newshape=[312]) /* ty=Tensor[(312), float32] */;
  %124 = @func_2487(%120, %121, %122, %123) /* ty=(Tensor[(10, 9, 6), int16], Tensor[(10, 9, 6), uint32], Tensor[(180), uint16], Tensor[(840), float32], Tensor[(312), float32]) */;
  %125 = cast(meta[relay.Constant][11] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
  %126 = cast(meta[relay.Constant][11] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
  %127 = reshape(%125, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), float64] */;
  %128 = reshape(%126, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), float64] */;
  %129 = @func_1781(%127, %128) /* ty=(Tensor[(13, 4, 8), float64], Tensor[(13, 4, 8), uint64]) */;
  %130 = cast(%var_3146, dtype="bool") /* ty=Tensor[(13, 6, 4), bool] */;
  %131 = shape_of(%var_3126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%var_3126, dtype="bool") /* ty=Tensor[(13, 6, 4), bool] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %134 = cast(%var_3171, dtype="uint64") /* ty=Tensor[(780, 1), uint64] */;
  %135 = reshape(%134, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), uint64] */;
  %136 = @func_2813(%135) /* ty=(Tensor[(4, 15, 13), bool], Tensor[(4, 2, 10), float64]) */;
  %137 = cast(%var_3126, dtype="float64") /* ty=Tensor[(13, 6, 4), float64] */;
  %138 = acos(%137) /* ty=Tensor[(13, 6, 4), float64] */;
  %139 = cast(%var_3177, dtype="uint16") /* ty=Tensor[(13, 6, 4), uint16] */;
  %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%138, dtype="uint16") /* ty=Tensor[(13, 6, 4), uint16] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %143 = %124.4;
  %144 = %129.1;
  %145 = greater(%132, %133) /* ty=Tensor[(13, 6, 4), bool] */;
  %146 = %136.1;
  %147 = left_shift(%141, %142) /* ty=Tensor[(13, 6, 4), uint16] */;
  (%143, meta[relay.Constant][9] /* ty=Tensor[(540), float32] */, meta[relay.Constant][10] /* ty=Tensor[(840), float32] */, %144, meta[relay.Constant][11] /* ty=Tensor[(416), float64] */, %145, %146, %var_3171, %147)
}

def @func_5894(%var_5882: Tensor[(312), float32], %var_5886: Tensor[(2, 784), int8]) -> (Tensor[(10, 9, 6), float32], uint16, Tensor[(312), float32], uint16, Tensor[(10, 9, 6), float64], Tensor[(2, 784), int8], Tensor[(420, 2), float32]) {
  %148 = cast(%var_5882, dtype="float32") /* ty=Tensor[(312), float32] */;
  %149 = cast(meta[relay.Constant][12] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %150 = reshape(%148, newshape=[6, 4, 13]) /* ty=Tensor[(6, 4, 13), float32] */;
  %151 = reshape(%149, newshape=[]) /* ty=uint16 */;
  %152 = @func_244(%150, %151) /* ty=(Tensor[(6, 4, 13), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) */;
  %153 = cast(meta[relay.Constant][12] /* ty=uint16 */, dtype="int8") /* ty=int8 */;
  %154 = cast(%var_5886, dtype="int8") /* ty=Tensor[(2, 784), int8] */;
  %155 = cast(meta[relay.Constant][13] /* ty=Tensor[(420, 2), float32] */, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
  %156 = reshape(%153, newshape=[]) /* ty=int8 */;
  %157 = reshape(%154, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), int8] */;
  %158 = reshape(%155, newshape=[12, 70]) /* ty=Tensor[(12, 70), float32] */;
  %159 = @func_2900(%156, %157, %158) /* ty=(Tensor[(8, 14, 14), int8], Tensor[(10, 9, 6), float64], Tensor[(168), int32], Tensor[(12, 70), float32], Tensor[(312), float32]) */;
  %160 = @func_1847() /* ty=Tensor[(10, 9, 6), float32] */;
  %161 = %152.2;
  %162 = %159.1;
  (%160, %161, %var_5882, meta[relay.Constant][12] /* ty=uint16 */, %162, %var_5886, meta[relay.Constant][13] /* ty=Tensor[(420, 2), float32] */)
}

def @func_7436() -> (Tensor[(10, 9, 6), float32], Tensor[(14, 16, 12), float64]) {
  %163 = @func_5937() /* ty=(Tensor[(14, 16, 12), float64],) */;
  %164 = @func_4984() /* ty=Tensor[(10, 9, 6), float32] */;
  %165 = %163.0;
  (%164, %165)
}

def @func_774(%var_752: Tensor[(4, 2, 10), float32], %var_764: Tensor[(4, 2, 10), float32]) -> (Tensor[(4, 2, 10), int8], Tensor[(4, 2, 10), float64]) {
  %166 = cast(%var_752, dtype="float32") /* ty=Tensor[(4, 2, 10), float32] */;
  %167 = rsqrt(%166) /* ty=Tensor[(4, 2, 10), float32] */;
  %168 = cast(%var_752, dtype="int8") /* ty=Tensor[(4, 2, 10), int8] */;
  %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%167, dtype="int8") /* ty=Tensor[(4, 2, 10), int8] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %172 = cast(%var_764, dtype="float64") /* ty=Tensor[(4, 2, 10), float64] */;
  %173 = shape_of(%var_752, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%var_752, dtype="float64") /* ty=Tensor[(4, 2, 10), float64] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %176 = minimum(%170, %171) /* ty=Tensor[(4, 2, 10), int8] */;
  %177 = power(%174, %175) /* ty=Tensor[(4, 2, 10), float64] */;
  (%176, %177)
}

def @func_6912(%var_6894: Tensor[(15, 8, 8), float32], %var_6903: Tensor[(15, 8, 8), float32]) -> (Tensor[(15, 8, 8), bool],) {
  %178 = cast(%var_6894, dtype="float32") /* ty=Tensor[(15, 8, 8), float32] */;
  %179 = log2(%178) /* ty=Tensor[(15, 8, 8), float32] */;
  %180 = cast(%var_6903, dtype="bool") /* ty=Tensor[(15, 8, 8), bool] */;
  %181 = shape_of(%179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %182 = cast(%179, dtype="bool") /* ty=Tensor[(15, 8, 8), bool] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %184 = less_equal(%182, %183) /* ty=Tensor[(15, 8, 8), bool] */;
  (%184,)
}

def @func_8422() -> (Tensor[(12, 15, 2), bool], Tensor[(4, 2, 10), float64]) {
  %185 = @func_4678() /* ty=(Tensor[(12, 15, 2), bool],) */;
  %186 = @func_4620() /* ty=(Tensor[(4, 2, 10), float64],) */;
  %187 = %185.0;
  %188 = %186.0;
  (%187, %188)
}

def @func_7020() -> Tensor[(10, 9, 6), float64] {
  %189 = @func_2733() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %189.0
}

def @func_5202(%var_5191: Tensor[(10, 9, 6), float32]) -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), uint16]) {
  %190 = @func_4507() /* ty=Tensor[(10, 9, 6), float32] */;
  %191 = cast(%190, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %192 = reshape(%191, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
  %193 = cast(%var_5191, dtype="uint16") /* ty=Tensor[(10, 9, 6), uint16] */;
  %194 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%190, dtype="uint16") /* ty=Tensor[(10, 9, 6), uint16] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %197 = @func_3672() /* ty=Tensor[(10, 9, 6), float32] */;
  %198 = @func_2260(%192) /* ty=Tensor[(10, 9, 6), float64] */;
  %199 = add(%195, %196) /* ty=Tensor[(10, 9, 6), uint16] */;
  (%197, %198, %199)
}

def @func_8219() -> Tensor[(10, 9, 6), float32] {
  %200 = @func_3340() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %200.0
}

def @func_3901() -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), bool], Tensor[(10, 9, 6), bool]) {
  %201 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %202 = %201.0;
  %203 = cast(%202, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %204 = reshape(%203, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
  %205 = @func_1833(%204) /* ty=(Tensor[(10, 9, 6), bool],) */;
  %206 = %205.0;
  %207 = cast(%206, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %208 = reshape(%207, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
  %209 = @func_3486(%208) /* ty=Tensor[(10, 9, 6), bool] */;
  (%202, %206, %209)
}

def @func_6418() -> (Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float64]) {
  %210 = @func_2171() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), uint64], Tensor[(416), float64]) */;
  %211 = @func_5659() /* ty=Tensor[(13, 4, 8), float64] */;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(13, 4, 8), float64] */;
  %213 = %210.0;
  %214 = asin(%212) /* ty=Tensor[(13, 4, 8), float64] */;
  (%213, %214)
}

def @func_2679(%var_2655: Tensor[(300), float64]) -> Tensor[(300), int16] {
  %215 = @func_2334() /* ty=(Tensor[(14, 16, 12), float32], Tensor[(10, 2, 15), float64], Tensor[(300), float64], Tensor[(10, 9, 6), bool], Tensor[(540), float32], Tensor[(4, 2, 10), float64], Tensor[(80), float32], Tensor[(14, 16, 12), float64]) */;
  %216 = %215.2;
  %217 = cast(%var_2655, dtype="int16") /* ty=Tensor[(300), int16] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(1), int32] */;
  %219 = cast(%216, dtype="int16") /* ty=Tensor[(300), int16] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?), int16] */;
  logical_xor(%219, %220) /* ty=Tensor[(300), int16] */
}

def @func_1673(%var_1659: Tensor[(9, 11, 6), float32]) -> (Tensor[(9, 11, 6), float32],) {
  %221 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 11, 6), float32] */, dtype="float32") /* ty=Tensor[(9, 11, 6), float32] */;
  %222 = shape_of(%var_1659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%var_1659, dtype="float32") /* ty=Tensor[(9, 11, 6), float32] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %225 = floor_divide(%223, %224) /* ty=Tensor[(9, 11, 6), float32] */;
  (%225,)
}

def @func_5549(%var_5501: Tensor[(7, 14, 9), float64], %var_5509: Tensor[(540), float32]) -> (Tensor[(10, 9, 6), float64], Tensor[(540), float32], Tensor[(7, 14, 9), int8], Tensor[(10, 9, 6), bool], Tensor[(10, 9, 6), float32]) {
  %226 = cast(%var_5509, dtype="float32") /* ty=Tensor[(540), float32] */;
  %227 = reshape(%226, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
  %228 = cast(%var_5501, dtype="float64") /* ty=Tensor[(7, 14, 9), float64] */;
  %229 = atanh(%228) /* ty=Tensor[(7, 14, 9), float64] */;
  %230 = cast(%229, dtype="float32") /* ty=Tensor[(7, 14, 9), float32] */;
  %231 = log2(%230) /* ty=Tensor[(7, 14, 9), float32] */;
  %232 = cast(%231, dtype="int8") /* ty=Tensor[(7, 14, 9), int8] */;
  %233 = shape_of(%229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%229, dtype="int8") /* ty=Tensor[(7, 14, 9), int8] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %236 = cast(%var_5509, dtype="float32") /* ty=Tensor[(540), float32] */;
  %237 = reshape(%236, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
  %238 = @func_4733() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %239 = @func_2260(%227) /* ty=Tensor[(10, 9, 6), float64] */;
  %240 = logical_xor(%234, %235) /* ty=Tensor[(7, 14, 9), int8] */;
  %241 = @func_3486(%237) /* ty=Tensor[(10, 9, 6), bool] */;
  %242 = %238.0;
  (%239, %var_5509, %240, %241, %242)
}

def @func_3340() -> (Tensor[(10, 9, 6), float32],) {
  %243 = @func_2783() /* ty=Tensor[(10, 9, 6), float32] */;
  (%243,)
}

def @func_2209() -> Tensor[(10, 9, 6), float64] {
  %244 = @func_1993() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %244.0
}

def @func_6119() -> (Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), float64]) {
  %245 = @func_3427() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(20, 4), float32], Tensor[(10, 9, 6), bool]) */;
  %246 = @func_5923() /* ty=Tensor[(10, 9, 6), float32] */;
  %247 = %245.1;
  (%246, %247)
}

def @func_4709() -> (Tensor[(4, 2, 10), float64],) {
  %248 = @func_3427() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(20, 4), float32], Tensor[(10, 9, 6), bool]) */;
  %249 = %248.1;
  (%249,)
}

def @func_3068(%var_3043: int32) -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32], Tensor[(7, 12, 2), bool], int32, Tensor[(3, 56), int32], Tensor[(10, 9, 6), float64], Tensor[(4, 3, 15), uint16], Tensor[(180), uint16]) {
  %250 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %251 = cast(%var_3043, dtype="int32") /* ty=int32 */;
  %252 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 56), int32] */, dtype="int32") /* ty=Tensor[(3, 56), int32] */;
  %253 = reshape(%251, newshape=[]) /* ty=int32 */;
  %254 = reshape(%252, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int32] */;
  %255 = @func_703(%253, %254) /* ty=(Tensor[(7, 12, 2), bool],) */;
  %256 = @func_2979() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32]) */;
  %257 = %256.0;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %259 = sqrt(%258) /* ty=Tensor[(10, 9, 6), float32] */;
  %260 = cast(%259, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  %261 = cast(%var_3043, dtype="uint16") /* ty=uint16 */;
  %262 = cast(meta[relay.Constant][16] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %263 = reshape(%261, newshape=[]) /* ty=uint16 */;
  %264 = reshape(%262, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), uint16] */;
  %265 = @func_75(%263, %264) /* ty=(Tensor[(4, 3, 15), uint16],) */;
  %266 = %250.0;
  %267 = @func_2551() /* ty=Tensor[(10, 9, 6), float32] */;
  %268 = %255.0;
  %269 = log2(%260) /* ty=Tensor[(10, 9, 6), float64] */;
  %270 = %265.0;
  (%266, %267, %268, %var_3043, meta[relay.Constant][15] /* ty=Tensor[(3, 56), int32] */, %269, %270, meta[relay.Constant][16] /* ty=Tensor[(180), uint16] */)
}

def @func_3788() -> Tensor[(10, 9, 6), float64] {
  @func_2695() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_7201() -> Tensor[(10, 9, 6), float32] {
  %271 = @func_3923() /* ty=(uint16, Tensor[(10, 9, 6), float32]) */;
  %271.1
}

def @func_7357() -> (Tensor[(7, 2, 7), bool], Tensor[(7, 2, 7), float32]) {
  %272 = @func_3825() /* ty=Tensor[(7, 2, 7), uint32] */;
  %273 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 2, 7), uint32] */, dtype="bool") /* ty=Tensor[(7, 2, 7), bool] */;
  %274 = shape_of(%272, dtype="int32") /* ty=Tensor[(3), int32] */;
  %275 = cast(%272, dtype="bool") /* ty=Tensor[(7, 2, 7), bool] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %277 = cast(%272, dtype="float32") /* ty=Tensor[(7, 2, 7), float32] */;
  %278 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(7, 2, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 2, 7), uint32] */, dtype="float32") /* ty=Tensor[(7, 2, 7), float32] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %281 = logical_or(%275, %276) /* ty=Tensor[(7, 2, 7), bool] */;
  %282 = floor_mod(%279, %280) /* ty=Tensor[(7, 2, 7), float32] */;
  (%281, %282)
}

def @func_6889(%var_6876: Tensor[(24), float64]) -> (uint16, Tensor[(1, 7), int16], Tensor[(24), float64]) {
  %283 = @func_3923() /* ty=(uint16, Tensor[(10, 9, 6), float32]) */;
  %284 = cast(%var_6876, dtype="float64") /* ty=Tensor[(24), float64] */;
  %285 = reshape(%284, newshape=[4, 1, 6]) /* ty=Tensor[(4, 1, 6), float64] */;
  %286 = @func_4861(%285) /* ty=(Tensor[(4, ?, 6), int64], Tensor[(5, 7, 14), int16], Tensor[(1, 7), int16]) */;
  %287 = %283.0;
  %288 = %286.2;
  (%287, %288, %var_6876)
}

def @func_1179(%var_1080: Tensor[(15, 4, 14), float32], %var_1132: Tensor[(312), float32]) -> (Tensor[(4, 2, 10), int8], Tensor[(20, 4), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16], Tensor[(7, 12, 2), bool], Tensor[(168), int32], Tensor[(4, 3, 15), uint16], Tensor[(312), float32], Tensor[(15, 4, 14), float32]) {
  %289 = cast(meta[relay.Constant][18] /* ty=Tensor[(20, 4), float32] */, dtype="float32") /* ty=Tensor[(20, 4), float32] */;
  %290 = cast(meta[relay.Constant][18] /* ty=Tensor[(20, 4), float32] */, dtype="float32") /* ty=Tensor[(20, 4), float32] */;
  %291 = reshape(%289, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %292 = reshape(%290, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %293 = @func_774(%291, %292) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(4, 2, 10), float64]) */;
  %294 = cast(meta[relay.Constant][19] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %295 = cast(meta[relay.Constant][20] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %296 = reshape(%294, newshape=[]) /* ty=uint16 */;
  %297 = reshape(%295, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), uint16] */;
  %298 = @func_75(%296, %297) /* ty=(Tensor[(4, 3, 15), uint16],) */;
  %299 = cast(meta[relay.Constant][19] /* ty=uint16 */, dtype="int32") /* ty=int32 */;
  %300 = cast(meta[relay.Constant][21] /* ty=Tensor[(168), int32] */, dtype="int32") /* ty=Tensor[(168), int32] */;
  %301 = reshape(%299, newshape=[]) /* ty=int32 */;
  %302 = reshape(%300, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int32] */;
  %303 = @func_703(%301, %302) /* ty=(Tensor[(7, 12, 2), bool],) */;
  %304 = cast(%var_1132, dtype="float32") /* ty=Tensor[(312), float32] */;
  %305 = cast(meta[relay.Constant][19] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %306 = reshape(%304, newshape=[6, 4, 13]) /* ty=Tensor[(6, 4, 13), float32] */;
  %307 = reshape(%305, newshape=[]) /* ty=uint16 */;
  %308 = @func_244(%306, %307) /* ty=(Tensor[(6, 4, 13), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) */;
  %309 = cast(%var_1080, dtype="float32") /* ty=Tensor[(15, 4, 14), float32] */;
  %310 = asinh(%309) /* ty=Tensor[(15, 4, 14), float32] */;
  %311 = cast(%310, dtype="float64") /* ty=Tensor[(15, 4, 14), float64] */;
  %312 = sqrt(%311) /* ty=Tensor[(15, 4, 14), float64] */;
  %313 = cast(%312, dtype="float64") /* ty=Tensor[(15, 4, 14), float64] */;
  %314 = tan(%313) /* ty=Tensor[(15, 4, 14), float64] */;
  %315 = cast(%var_1080, dtype="uint64") /* ty=Tensor[(15, 4, 14), uint64] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="uint64") /* ty=Tensor[(15, 4, 14), uint64] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %319 = multiply(%317, %318) /* ty=Tensor[(15, 4, 14), uint64] */;
  %320 = cast(%310, dtype="int32") /* ty=Tensor[(15, 4, 14), int32] */;
  %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%319, dtype="int32") /* ty=Tensor[(15, 4, 14), int32] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %324 = left_shift(%322, %323) /* ty=Tensor[(15, 4, 14), int32] */;
  %325 = cast(%324, dtype="float32") /* ty=Tensor[(15, 4, 14), float32] */;
  %326 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %327 = cast(%312, dtype="float32") /* ty=Tensor[(15, 4, 14), float32] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %329 = %293.0;
  %330 = %298.0;
  %331 = %303.0;
  %332 = %308.1;
  %333 = divide(%327, %328) /* ty=Tensor[(15, 4, 14), float32] */;
  (%329, meta[relay.Constant][18] /* ty=Tensor[(20, 4), float32] */, %330, meta[relay.Constant][19] /* ty=uint16 */, meta[relay.Constant][20] /* ty=Tensor[(180), uint16] */, %331, meta[relay.Constant][21] /* ty=Tensor[(168), int32] */, %332, %var_1132, %333)
}

def @func_8061() -> (Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32]) {
  %334 = @func_5753() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float64], Tensor[(10, 9, 6), bool]) */;
  %335 = %334.0;
  %336 = @func_4507() /* ty=Tensor[(10, 9, 6), float32] */;
  (%335, %336)
}

def @func_2733() -> (Tensor[(10, 9, 6), float64],) {
  %337 = @func_1847() /* ty=Tensor[(10, 9, 6), float32] */;
  %338 = cast(%337, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  %339 = sinh(%338) /* ty=Tensor[(10, 9, 6), float64] */;
  (%339,)
}

def @func_5998() -> Tensor[(10, 9, 6), float64] {
  @func_2209() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_5923() -> Tensor[(10, 9, 6), float32] {
  @func_2551() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_5712() -> (Tensor[(10, 9, 6), float32],) {
  %340 = @func_3941() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %341 = %340.0;
  (%341,)
}

def @func_8510() -> (Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float32]) {
  %342 = @func_7524() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %343 = @func_5659() /* ty=Tensor[(13, 4, 8), float64] */;
  %344 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 4, 8), float64] */, dtype="float32") /* ty=Tensor[(13, 4, 8), float32] */;
  %345 = shape_of(%343, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%343, dtype="float32") /* ty=Tensor[(13, 4, 8), float32] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %348 = %342.0;
  %349 = mod(%346, %347) /* ty=Tensor[(13, 4, 8), float32] */;
  (%348, %349)
}

def @func_4212() -> Tensor[(10, 9, 6), float32] {
  @func_1847() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_4285(%var_4247: Tensor[(10, 9, 6), float32], %var_4277: Tensor[(312), float32], %var_4278: uint16) -> (Tensor[(10, 9, 6), uint64], uint16, Tensor[(312), float32], uint16, Tensor[(10, 9, 6), float32]) {
  %350 = @func_4212() /* ty=Tensor[(10, 9, 6), float32] */;
  %351 = cast(%var_4247, dtype="uint64") /* ty=Tensor[(10, 9, 6), uint64] */;
  %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%350, dtype="uint64") /* ty=Tensor[(10, 9, 6), uint64] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %355 = cast(%var_4277, dtype="float32") /* ty=Tensor[(312), float32] */;
  %356 = cast(%var_4278, dtype="uint16") /* ty=uint16 */;
  %357 = reshape(%355, newshape=[6, 4, 13]) /* ty=Tensor[(6, 4, 13), float32] */;
  %358 = reshape(%356, newshape=[]) /* ty=uint16 */;
  %359 = @func_244(%357, %358) /* ty=(Tensor[(6, 4, 13), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) */;
  %360 = left_shift(%353, %354) /* ty=Tensor[(10, 9, 6), uint64] */;
  %361 = %359.2;
  %362 = @func_3672() /* ty=Tensor[(10, 9, 6), float32] */;
  (%360, %361, %var_4277, %var_4278, %362)
}

def @func_4678() -> (Tensor[(12, 15, 2), bool],) {
  %363 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 15, 2), float64] */;
  %364 = acosh(%363) /* ty=Tensor[(12, 15, 2), float64] */;
  %365 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 15, 2), float64] */, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
  %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%364, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %369 = logical_or(%367, %368) /* ty=Tensor[(12, 15, 2), bool] */;
  (%369,)
}

def @func_2260(%var_2241: Tensor[(10, 9, 6), float32]) -> Tensor[(10, 9, 6), float64] {
  %370 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %371 = %370.0;
  %372 = cast(%var_2241, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%371, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%374, %375) /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_5023() -> (Tensor[(4, 2, 10), bool],) {
  %376 = @func_4709() /* ty=(Tensor[(4, 2, 10), float64],) */;
  %377 = %376.0;
  %378 = cast(%377, dtype="float64") /* ty=Tensor[(4, 2, 10), float64] */;
  %379 = sqrt(%378) /* ty=Tensor[(4, 2, 10), float64] */;
  %380 = cast(%377, dtype="bool") /* ty=Tensor[(4, 2, 10), bool] */;
  %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%379, dtype="bool") /* ty=Tensor[(4, 2, 10), bool] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %384 = greater_equal(%382, %383) /* ty=Tensor[(4, 2, 10), bool] */;
  (%384,)
}

def @func_3387() -> (Tensor[(10, 9, 6), float32],) {
  %385 = @func_2783() /* ty=Tensor[(10, 9, 6), float32] */;
  (%385,)
}

def @func_4189() -> Tensor[(10, 9, 6), float64] {
  @func_2695() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_6777(%var_6769: int32) -> (Tensor[(13, 4, 8), float32], Tensor[(10, 9, 6), float64], Tensor[(180), uint16], int32) {
  %386 = @func_6493() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(13, 4, 8), float32]) */;
  %387 = @func_5753() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float64], Tensor[(10, 9, 6), bool]) */;
  %388 = cast(%var_6769, dtype="int32") /* ty=int32 */;
  %389 = reshape(%388, newshape=[]) /* ty=int32 */;
  %390 = @func_3068(%389) /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32], Tensor[(7, 12, 2), bool], int32, Tensor[(3, 56), int32], Tensor[(10, 9, 6), float64], Tensor[(4, 3, 15), uint16], Tensor[(180), uint16]) */;
  %391 = %386.2;
  %392 = %387.0;
  %393 = %390.7;
  (%391, %392, %393, %var_6769)
}

def @func_2019(%var_2014: Tensor[(10, 9, 6), float64]) -> Tensor[(10, 9, 6), bool] {
  %394 = @func_1993() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %395 = %394.0;
  %396 = cast(%var_2014, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%395, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%398, %399) /* ty=Tensor[(10, 9, 6), bool] */
}

def @func_7642() -> Tensor[(10, 9, 6), bool] {
  %400 = @func_5753() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float64], Tensor[(10, 9, 6), bool]) */;
  %400.2
}

def @func_6683() -> Tensor[(10, 9, 6), float32] {
  %401 = @func_3387() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %401.0
}

def @func_8180(%var_8147: Tensor[(16, 10), bool]) -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64], Tensor[(8, 2, 10), int8], Tensor[(16, 10), bool]) {
  %402 = @func_2979() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32]) */;
  %403 = %402.1;
  %404 = cast(%403, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %405 = reshape(%404, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
  %406 = cast(%var_8147, dtype="bool") /* ty=Tensor[(16, 10), bool] */;
  %407 = cast(%var_8147, dtype="bool") /* ty=Tensor[(16, 10), bool] */;
  %408 = reshape(%406, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %409 = reshape(%407, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %410 = @func_1005(%408, %409) /* ty=(Tensor[(8, 2, 10), uint8], Tensor[(8, 2, 10), int8]) */;
  %411 = @func_5998() /* ty=Tensor[(10, 9, 6), float64] */;
  %412 = @func_2260(%405) /* ty=Tensor[(10, 9, 6), float64] */;
  %413 = @func_3710() /* ty=Tensor[(10, 9, 6), float32] */;
  %414 = @func_2209() /* ty=Tensor[(10, 9, 6), float64] */;
  %415 = %410.1;
  (%403, %411, %412, %413, %414, %415, %var_8147)
}

def @func_5659() -> Tensor[(13, 4, 8), float64] {
  %416 = @func_2171() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), uint64], Tensor[(416), float64]) */;
  %417 = %416.1;
  %418 = cast(%417, dtype="float64") /* ty=Tensor[(13, 4, 8), float64] */;
  atan(%418) /* ty=Tensor[(13, 4, 8), float64] */
}

def @func_6655(%var_6597: Tensor[(2, 16, 7), float64], %var_6615: Tensor[(98), float32]) -> (Tensor[(2, 16, 7), float64], Tensor[(2, 16, 7), float64], Tensor[(1, 14, 7), float32], Tensor[(98), float32], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) {
  %419 = cast(%var_6597, dtype="float64") /* ty=Tensor[(2, 16, 7), float64] */;
  %420 = cast(%var_6597, dtype="float64") /* ty=Tensor[(2, 16, 7), float64] */;
  %421 = cast(%var_6615, dtype="float32") /* ty=Tensor[(98), float32] */;
  %422 = reshape(%421, newshape=[1, 14, 7]) /* ty=Tensor[(1, 14, 7), float32] */;
  %423 = @func_4036(%422) /* ty=(Tensor[(1, 14, 7), float32],) */;
  %424 = sinh(%419) /* ty=Tensor[(2, 16, 7), float64] */;
  %425 = cos(%420) /* ty=Tensor[(2, 16, 7), float64] */;
  %426 = %423.0;
  %427 = @func_2783() /* ty=Tensor[(10, 9, 6), float32] */;
  %428 = @func_5998() /* ty=Tensor[(10, 9, 6), float64] */;
  (%424, %425, %426, %var_6615, %427, %428)
}

def @func_3223(%var_3211: Tensor[(11, 3, 14), uint8], %var_3212: Tensor[(11, 3, 14), uint8]) -> (Tensor[(11, 3, 14), uint8],) {
  %429 = cast(%var_3212, dtype="uint8") /* ty=Tensor[(11, 3, 14), uint8] */;
  %430 = shape_of(%var_3211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%var_3211, dtype="uint8") /* ty=Tensor[(11, 3, 14), uint8] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %433 = logical_xor(%431, %432) /* ty=Tensor[(11, 3, 14), uint8] */;
  (%433,)
}

def @func_3710() -> Tensor[(10, 9, 6), float32] {
  %434 = @func_3387() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %434.0
}

def @func_4080(%var_4073: Tensor[(1, 7, 1), int16]) -> Tensor[(5, 7, 14), int16] {
  %435 = cast(%var_4073, dtype="int16") /* ty=Tensor[(1, 7, 1), int16] */;
  %436 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 7, 14), int16] */, dtype="int16") /* ty=Tensor[(5, 7, 14), int16] */;
  maximum(%435, %436) /* ty=Tensor[(5, 7, 14), int16] */
}

def @func_4431() -> Tensor[(10, 9, 6), float64] {
  %437 = @func_3340() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %438 = %437.0;
  %439 = cast(%438, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  asinh(%439) /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_4507() -> Tensor[(10, 9, 6), float32] {
  %440 = @func_3788() /* ty=Tensor[(10, 9, 6), float64] */;
  %441 = cast(%440, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  sin(%441) /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_5279(%var_5255: uint16) -> (Tensor[(10, 9, 6), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32]) {
  %442 = cast(%var_5255, dtype="uint16") /* ty=uint16 */;
  %443 = cast(meta[relay.Constant][25] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %444 = reshape(%442, newshape=[]) /* ty=uint16 */;
  %445 = reshape(%443, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), uint16] */;
  %446 = @func_75(%444, %445) /* ty=(Tensor[(4, 3, 15), uint16],) */;
  %447 = @func_4507() /* ty=Tensor[(10, 9, 6), float32] */;
  %448 = %446.0;
  %449 = @func_2209() /* ty=Tensor[(10, 9, 6), float64] */;
  %450 = @func_4984() /* ty=Tensor[(10, 9, 6), float32] */;
  (%447, %448, %var_5255, meta[relay.Constant][25] /* ty=Tensor[(180), uint16] */, %449, %450)
}

def @func_2053() -> (Tensor[(10, 9, 6), float64],) {
  %451 = @func_1993() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %452 = %451.0;
  (%452,)
}

def @func_5937() -> (Tensor[(14, 16, 12), float64],) {
  %453 = @func_2334() /* ty=(Tensor[(14, 16, 12), float32], Tensor[(10, 2, 15), float64], Tensor[(300), float64], Tensor[(10, 9, 6), bool], Tensor[(540), float32], Tensor[(4, 2, 10), float64], Tensor[(80), float32], Tensor[(14, 16, 12), float64]) */;
  %454 = %453.7;
  (%454,)
}

def @func_7991() -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32]) {
  %455 = @func_2979() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32]) */;
  %456 = %455.0;
  %457 = @func_2551() /* ty=Tensor[(10, 9, 6), float32] */;
  (%456, %457)
}

def @func_6331(%var_6316: Tensor[(4, 2, 10), float64]) -> (Tensor[(4, 2, 10), bool], Tensor[(4, 2, 10), float64]) {
  %458 = @func_4620() /* ty=(Tensor[(4, 2, 10), float64],) */;
  %459 = %458.0;
  %460 = cast(%var_6316, dtype="bool") /* ty=Tensor[(4, 2, 10), bool] */;
  %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%459, dtype="bool") /* ty=Tensor[(4, 2, 10), bool] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %464 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 2, 10), float64] */, dtype="float64") /* ty=Tensor[(4, 2, 10), float64] */;
  %465 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%459, dtype="float64") /* ty=Tensor[(4, 2, 10), float64] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %468 = less_equal(%462, %463) /* ty=Tensor[(4, 2, 10), bool] */;
  %469 = mod(%466, %467) /* ty=Tensor[(4, 2, 10), float64] */;
  (%468, %469)
}

def @func_5753() -> (Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float64], Tensor[(10, 9, 6), bool]) {
  %470 = @func_5390() /* ty=Tensor[(10, 9, 6), float64] */;
  %471 = cast(%470, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %472 = reshape(%471, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
  %473 = @func_1833(%472) /* ty=(Tensor[(10, 9, 6), bool],) */;
  %474 = @func_5659() /* ty=Tensor[(13, 4, 8), float64] */;
  %475 = %473.0;
  (%470, %474, %475)
}

def @func_2779() -> (Tensor[(2, 3, 11), float64],) {
  %476 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 3, 11), float32] */, dtype="float32") /* ty=Tensor[(2, 3, 11), float32] */;
  %477 = acos(%476) /* ty=Tensor[(2, 3, 11), float32] */;
  %478 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 3, 11), float32] */, dtype="float64") /* ty=Tensor[(2, 3, 11), float64] */;
  %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%477, dtype="float64") /* ty=Tensor[(2, 3, 11), float64] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %482 = floor_mod(%480, %481) /* ty=Tensor[(2, 3, 11), float64] */;
  (%482,)
}

def @func_3486(%var_3478: Tensor[(10, 9, 6), float32]) -> Tensor[(10, 9, 6), bool] {
  %483 = @func_2783() /* ty=Tensor[(10, 9, 6), float32] */;
  %484 = cast(%var_3478, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%483, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%486, %487) /* ty=Tensor[(10, 9, 6), bool] */
}

def @func_1601(%var_1594: Tensor[(6, 9, 11), float64]) -> Tensor[(6, 9, 11), float64] {
  %488 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 9, 11), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %489 = shape_of(%var_1594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%var_1594, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  maximum(%490, %491) /* ty=Tensor[(6, 9, 11), float64] */
}

def @func_4571() -> (Tensor[(13, 11, 3), float64], Tensor[(10, 9, 6), float32]) {
  %492 = @func_3686() /* ty=(Tensor[(13, 11, 3), bool],) */;
  %493 = %492.0;
  %494 = cast(%493, dtype="float64") /* ty=Tensor[(13, 11, 3), float64] */;
  %495 = atanh(%494) /* ty=Tensor[(13, 11, 3), float64] */;
  %496 = @func_1847() /* ty=Tensor[(10, 9, 6), float32] */;
  (%495, %496)
}

def @func_2839() -> (Tensor[(10, 9, 6), float64], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) {
  %497 = @func_1993() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %498 = cast(meta[relay.Constant][30] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %499 = cast(meta[relay.Constant][31] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %500 = reshape(%498, newshape=[]) /* ty=uint16 */;
  %501 = reshape(%499, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), uint16] */;
  %502 = @func_75(%500, %501) /* ty=(Tensor[(4, 3, 15), uint16],) */;
  %503 = %497.0;
  %504 = %502.0;
  (%503, %504, meta[relay.Constant][30] /* ty=uint16 */, meta[relay.Constant][31] /* ty=Tensor[(180), uint16] */)
}

def @func_7874() -> (Tensor[(10, 9, 6), bool],) {
  %505 = @func_3901() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), bool], Tensor[(10, 9, 6), bool]) */;
  %506 = %505.2;
  (%506,)
}

def @func_6963() -> (Tensor[(4, 2, 10), float64], Tensor[(10, 9, 6), float32]) {
  %507 = @func_4620() /* ty=(Tensor[(4, 2, 10), float64],) */;
  %508 = @func_3387() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %509 = %507.0;
  %510 = %508.0;
  (%509, %510)
}

def @func_6857() -> (Tensor[(10, 9, 6), int64], Tensor[(10, 9, 6), float64]) {
  %511 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %512 = %511.0;
  %513 = @func_2551() /* ty=Tensor[(10, 9, 6), float32] */;
  %514 = cast(%513, dtype="int64") /* ty=Tensor[(10, 9, 6), int64] */;
  %515 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%512, dtype="int64") /* ty=Tensor[(10, 9, 6), int64] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %518 = @func_2053() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %519 = bitwise_xor(%516, %517) /* ty=Tensor[(10, 9, 6), int64] */;
  %520 = %518.0;
  (%519, %520)
}

def @func_6162(%var_6156: Tensor[(11, 15, 6), uint32], %var_6157: Tensor[(11, 15, 6), uint32]) -> Tensor[(11, 15, 6), bool] {
  %521 = cast(%var_6157, dtype="bool") /* ty=Tensor[(11, 15, 6), bool] */;
  %522 = shape_of(%var_6156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(%var_6156, dtype="bool") /* ty=Tensor[(11, 15, 6), bool] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%523, %524) /* ty=Tensor[(11, 15, 6), bool] */
}

def @func_7415() -> Tensor[(10, 9, 6), float32] {
  %525 = @func_5133() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %525.0
}

def @func_2171() -> (Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), uint64], Tensor[(416), float64]) {
  %526 = @func_1847() /* ty=Tensor[(10, 9, 6), float32] */;
  %527 = cast(%526, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  %528 = cast(meta[relay.Constant][32] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
  %529 = cast(meta[relay.Constant][32] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
  %530 = reshape(%528, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), float64] */;
  %531 = reshape(%529, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), float64] */;
  %532 = @func_1781(%530, %531) /* ty=(Tensor[(13, 4, 8), float64], Tensor[(13, 4, 8), uint64]) */;
  %533 = erf(%527) /* ty=Tensor[(10, 9, 6), float64] */;
  %534 = %532.1;
  (%533, %534, meta[relay.Constant][32] /* ty=Tensor[(416), float64] */)
}

def @func_4492(%var_4487: Tensor[(160), bool]) -> (Tensor[(10, 9, 6), float64], Tensor[(8, 2, 10), int8], Tensor[(160), bool]) {
  %535 = @func_1993() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %536 = cast(%var_4487, dtype="bool") /* ty=Tensor[(160), bool] */;
  %537 = cast(%var_4487, dtype="bool") /* ty=Tensor[(160), bool] */;
  %538 = reshape(%536, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %539 = reshape(%537, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %540 = @func_1005(%538, %539) /* ty=(Tensor[(8, 2, 10), uint8], Tensor[(8, 2, 10), int8]) */;
  %541 = %535.0;
  %542 = %540.1;
  (%541, %542, %var_4487)
}

def @func_7716() -> Tensor[(10, 9, 6), float32] {
  %543 = @func_5356() /* ty=(uint16, Tensor[(10, 9, 6), float32]) */;
  %543.1
}

def @func_3839() -> Tensor[(10, 9, 6), float32] {
  %544 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %544.0
}

def @func_7524() -> (Tensor[(10, 9, 6), float64],) {
  %545 = @func_6493() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(13, 4, 8), float32]) */;
  %546 = %545.0;
  (%546,)
}

def @func_4910(%var_4891: Tensor[(160), bool], %var_4903: Tensor[(15, 3, 14), uint16]) -> (Tensor[(7, 2, 7), uint32], Tensor[(8, 2, 10), uint8], Tensor[(160), bool], Tensor[(10, 9, 6), float64], Tensor[(15, 3, 14), bool]) {
  %547 = cast(%var_4891, dtype="bool") /* ty=Tensor[(160), bool] */;
  %548 = cast(%var_4891, dtype="bool") /* ty=Tensor[(160), bool] */;
  %549 = reshape(%547, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %550 = reshape(%548, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %551 = @func_1005(%549, %550) /* ty=(Tensor[(8, 2, 10), uint8], Tensor[(8, 2, 10), int8]) */;
  %552 = @func_3923() /* ty=(uint16, Tensor[(10, 9, 6), float32]) */;
  %553 = %552.0;
  %554 = cast(%553, dtype="bool") /* ty=bool */;
  %555 = cast(%var_4903, dtype="bool") /* ty=Tensor[(15, 3, 14), bool] */;
  %556 = @func_3825() /* ty=Tensor[(7, 2, 7), uint32] */;
  %557 = %551.0;
  %558 = @func_3788() /* ty=Tensor[(10, 9, 6), float64] */;
  %559 = logical_or(%554, %555) /* ty=Tensor[(15, 3, 14), bool] */;
  (%556, %557, %var_4891, %558, %559)
}

def @func_1737() -> (Tensor[(10, 9, 6), float32],) {
  %560 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %561 = log(%560) /* ty=Tensor[(10, 9, 6), float32] */;
  (%561,)
}

def @func_3739(%var_3720: Tensor[(1, 6, 5), float32], %var_3734: Tensor[(594), float32]) -> (Tensor[(8, 6, 5), float32], Tensor[(8, 6, 5), int8], Tensor[(9, 11, 6), float32], Tensor[(594), float32]) {
  %562 = cast(%var_3720, dtype="float32") /* ty=Tensor[(1, 6, 5), float32] */;
  %563 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 6, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 6, 5), float32] */;
  %564 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 6, 5), float32] */, dtype="int8") /* ty=Tensor[(8, 6, 5), int8] */;
  %565 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(8, 6, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 6, 5), float32] */, dtype="int8") /* ty=Tensor[(8, 6, 5), int8] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %568 = cast(%var_3734, dtype="float32") /* ty=Tensor[(594), float32] */;
  %569 = reshape(%568, newshape=[9, 11, 6]) /* ty=Tensor[(9, 11, 6), float32] */;
  %570 = @func_1673(%569) /* ty=(Tensor[(9, 11, 6), float32],) */;
  %571 = power(%562, %563) /* ty=Tensor[(8, 6, 5), float32] */;
  %572 = maximum(%566, %567) /* ty=Tensor[(8, 6, 5), int8] */;
  %573 = %570.0;
  (%571, %572, %573, %var_3734)
}

def @func_5483() -> (Tensor[(10, 9, 6), float64],) {
  %574 = @func_2171() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), uint64], Tensor[(416), float64]) */;
  %575 = %574.0;
  (%575,)
}

def @main(%var_8712: Tensor[(9, 8, 6), float32]) -> Tensor[(9, 8, 6), float32] {
  %576 = cast(%var_8712, dtype="float32") /* ty=Tensor[(9, 8, 6), float32] */;
  acos(%576) /* ty=Tensor[(9, 8, 6), float32] */
}

def @func_6369() -> Tensor[(10, 9, 6), float64] {
  @func_3788() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_3571() -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) {
  %577 = @func_3340() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %578 = @func_2733() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %579 = %578.0;
  %580 = cast(%579, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %581 = cosh(%580) /* ty=Tensor[(10, 9, 6), float32] */;
  %582 = cast(%581, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  %583 = %577.0;
  %584 = atan(%582) /* ty=Tensor[(10, 9, 6), float64] */;
  (%583, %584)
}

def @func_5390() -> Tensor[(10, 9, 6), float64] {
  %585 = @func_3246() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %586 = %585.0;
  %587 = cast(%586, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  acos(%587) /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_8195() -> (Tensor[(10, 9, 6), float64],) {
  %588 = @func_2695() /* ty=Tensor[(10, 9, 6), float64] */;
  (%588,)
}

def @func_5063() -> (Tensor[(10, 9, 6), float32],) {
  %589 = @func_3672() /* ty=Tensor[(10, 9, 6), float32] */;
  (%589,)
}

def @func_3686() -> (Tensor[(13, 11, 3), bool],) {
  %590 = cast(-5.81703f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %591 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 11, 3), float64] */, dtype="bool") /* ty=Tensor[(13, 11, 3), bool] */;
  %592 = less_equal(%590, %591) /* ty=Tensor[(13, 11, 3), bool] */;
  (%592,)
}

def @func_7940() -> (Tensor[(10, 9, 6), float64],) {
  %593 = @func_7524() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %594 = %593.0;
  (%594,)
}

def @func_3246() -> (Tensor[(10, 9, 6), float64],) {
  %595 = @func_2733() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %596 = %595.0;
  (%596,)
}

def @func_1833(%var_1826: Tensor[(10, 9, 6), float32]) -> (Tensor[(10, 9, 6), bool],) {
  %597 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %598 = %597.0;
  %599 = cast(%var_1826, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
  %600 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%598, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %603 = equal(%601, %602) /* ty=Tensor[(10, 9, 6), bool] */;
  (%603,)
}

def @func_3672() -> Tensor[(10, 9, 6), float32] {
  @func_2783() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_2594(%var_2591: Tensor[(416, 1), float64]) -> (Tensor[(10, 9, 6), float64], Tensor[(10, 2, 15), float64], Tensor[(300), float64], Tensor[(13, 4, 8), float64], Tensor[(416, 1), float64]) {
  %604 = @func_1993() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %605 = cast(meta[relay.Constant][37] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %606 = reshape(%605, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %607 = @func_714(%606) /* ty=(Tensor[(10, 2, 15), float64],) */;
  %608 = cast(%var_2591, dtype="float64") /* ty=Tensor[(416, 1), float64] */;
  %609 = cast(%var_2591, dtype="float64") /* ty=Tensor[(416, 1), float64] */;
  %610 = reshape(%608, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), float64] */;
  %611 = reshape(%609, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), float64] */;
  %612 = @func_1781(%610, %611) /* ty=(Tensor[(13, 4, 8), float64], Tensor[(13, 4, 8), uint64]) */;
  %613 = %604.0;
  %614 = %607.0;
  %615 = %612.0;
  (%613, %614, meta[relay.Constant][37] /* ty=Tensor[(300), float64] */, %615, %var_2591)
}

def @func_3474() -> (Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), float64], Tensor[(780), uint64]) {
  %616 = @func_3387() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %617 = cast(meta[relay.Constant][38] /* ty=Tensor[(780), uint64] */, dtype="uint64") /* ty=Tensor[(780), uint64] */;
  %618 = reshape(%617, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), uint64] */;
  %619 = @func_2813(%618) /* ty=(Tensor[(4, 15, 13), bool], Tensor[(4, 2, 10), float64]) */;
  %620 = %616.0;
  %621 = %619.1;
  (%620, %621, meta[relay.Constant][38] /* ty=Tensor[(780), uint64] */)
}

def @func_4466(%var_4458: int32, %var_4459: Tensor[(168), int32]) -> (Tensor[(10, 9, 6), float64], Tensor[(7, 12, 2), bool], int32, Tensor[(168), int32]) {
  %622 = cast(%var_4458, dtype="int32") /* ty=int32 */;
  %623 = cast(%var_4459, dtype="int32") /* ty=Tensor[(168), int32] */;
  %624 = reshape(%622, newshape=[]) /* ty=int32 */;
  %625 = reshape(%623, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int32] */;
  %626 = @func_703(%624, %625) /* ty=(Tensor[(7, 12, 2), bool],) */;
  %627 = @func_2209() /* ty=Tensor[(10, 9, 6), float64] */;
  %628 = %626.0;
  (%627, %628, %var_4458, %var_4459)
}

def @func_7822(%var_7809: int32, %var_7810: Tensor[(168), int32]) -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32], Tensor[(7, 12, 2), bool], int32, Tensor[(168), int32], Tensor[(10, 9, 6), float64]) {
  %629 = @func_3571() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) */;
  %630 = @func_3571() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) */;
  %631 = cast(%var_7809, dtype="int32") /* ty=int32 */;
  %632 = cast(%var_7810, dtype="int32") /* ty=Tensor[(168), int32] */;
  %633 = reshape(%631, newshape=[]) /* ty=int32 */;
  %634 = reshape(%632, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int32] */;
  %635 = @func_703(%633, %634) /* ty=(Tensor[(7, 12, 2), bool],) */;
  %636 = @func_3427() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(20, 4), float32], Tensor[(10, 9, 6), bool]) */;
  %637 = %629.0;
  %638 = %630.0;
  %639 = %635.0;
  %640 = %636.0;
  (%637, %638, %639, %var_7809, %var_7810, %640)
}

def @func_1781(%var_1771: Tensor[(13, 4, 8), float64], %var_1772: Tensor[(13, 4, 8), float64]) -> (Tensor[(13, 4, 8), float64], Tensor[(13, 4, 8), uint64]) {
  %641 = cast(%var_1772, dtype="float64") /* ty=Tensor[(13, 4, 8), float64] */;
  %642 = shape_of(%var_1771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%var_1771, dtype="float64") /* ty=Tensor[(13, 4, 8), float64] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %645 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 4, 8), float64] */, dtype="uint64") /* ty=Tensor[(13, 4, 8), uint64] */;
  %646 = shape_of(%var_1772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(%var_1772, dtype="uint64") /* ty=Tensor[(13, 4, 8), uint64] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %649 = subtract(%643, %644) /* ty=Tensor[(13, 4, 8), float64] */;
  %650 = logical_xor(%647, %648) /* ty=Tensor[(13, 4, 8), uint64] */;
  (%649, %650)
}

def @func_8614(%var_8568: Tensor[(10, 9, 6), float64]) -> (Tensor[(10, 9, 6), uint8], Tensor[(10, 9, 6), bool], Tensor[(10, 9, 6), float32]) {
  %651 = @func_5778() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %652 = %651.0;
  %653 = cast(%var_8568, dtype="uint8") /* ty=Tensor[(10, 9, 6), uint8] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%652, dtype="uint8") /* ty=Tensor[(10, 9, 6), uint8] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %657 = cast(%652, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  %658 = reshape(%657, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float64] */;
  %659 = logical_xor(%655, %656) /* ty=Tensor[(10, 9, 6), uint8] */;
  %660 = @func_2019(%658) /* ty=Tensor[(10, 9, 6), bool] */;
  %661 = @func_6683() /* ty=Tensor[(10, 9, 6), float32] */;
  (%659, %660, %661)
}

def @func_75(%var_70: uint16, %var_71: Tensor[(4, 3, 15), uint16]) -> (Tensor[(4, 3, 15), uint16],) {
  %662 = cast(%var_70, dtype="uint16") /* ty=uint16 */;
  %663 = cast(%var_71, dtype="uint16") /* ty=Tensor[(4, 3, 15), uint16] */;
  %664 = right_shift(%662, %663) /* ty=Tensor[(4, 3, 15), uint16] */;
  (%664,)
}

def @func_3427() -> (Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(20, 4), float32], Tensor[(10, 9, 6), bool]) {
  %665 = @func_2733() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %666 = cast(meta[relay.Constant][40] /* ty=Tensor[(20, 4), float32] */, dtype="float32") /* ty=Tensor[(20, 4), float32] */;
  %667 = cast(meta[relay.Constant][40] /* ty=Tensor[(20, 4), float32] */, dtype="float32") /* ty=Tensor[(20, 4), float32] */;
  %668 = reshape(%666, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %669 = reshape(%667, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %670 = @func_774(%668, %669) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(4, 2, 10), float64]) */;
  %671 = %665.0;
  %672 = cast(%671, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %673 = reshape(%672, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
  %674 = @func_2260(%673) /* ty=Tensor[(10, 9, 6), float64] */;
  %675 = @func_3340() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %676 = %675.0;
  %677 = cast(%676, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
  %678 = shape_of(%674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%674, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %681 = %670.1;
  %682 = greater_equal(%679, %680) /* ty=Tensor[(10, 9, 6), bool] */;
  (%671, %681, meta[relay.Constant][40] /* ty=Tensor[(20, 4), float32] */, %682)
}

def @func_3923() -> (uint16, Tensor[(10, 9, 6), float32]) {
  %683 = @func_2839() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) */;
  %684 = @func_3387() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %685 = %683.2;
  %686 = %684.0;
  (%685, %686)
}

def @func_1993() -> (Tensor[(10, 9, 6), float64],) {
  %687 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %688 = %687.0;
  %689 = cast(meta[relay.Constant][41] /* ty=Tensor[(10, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %690 = shape_of(%688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%688, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %693 = mod(%691, %692) /* ty=Tensor[(10, 9, 6), float32] */;
  %694 = cast(%693, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  %695 = log10(%694) /* ty=Tensor[(10, 9, 6), float64] */;
  %696 = cast(%695, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  %697 = asin(%696) /* ty=Tensor[(10, 9, 6), float64] */;
  (%697,)
}

def @func_5733() -> (Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32]) {
  %698 = @func_3571() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) */;
  %699 = @func_3571() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) */;
  %700 = %698.1;
  %701 = %699.0;
  (%700, %701)
}

def @func_2783() -> Tensor[(10, 9, 6), float32] {
  @func_1847() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_7106() -> (Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(4, 15, 13), bool], Tensor[(780), uint64], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), bool]) {
  %702 = @func_6418() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float64]) */;
  %703 = @func_5712() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %704 = @func_2171() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), uint64], Tensor[(416), float64]) */;
  %705 = @func_6963() /* ty=(Tensor[(4, 2, 10), float64], Tensor[(10, 9, 6), float32]) */;
  %706 = cast(meta[relay.Constant][42] /* ty=Tensor[(780), uint64] */, dtype="uint64") /* ty=Tensor[(780), uint64] */;
  %707 = reshape(%706, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), uint64] */;
  %708 = @func_2813(%707) /* ty=(Tensor[(4, 15, 13), bool], Tensor[(4, 2, 10), float64]) */;
  %709 = @func_5815() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32], Tensor[(840), float32]) */;
  %710 = @func_3901() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), bool], Tensor[(10, 9, 6), bool]) */;
  %711 = %702.0;
  %712 = @func_3788() /* ty=Tensor[(10, 9, 6), float64] */;
  %713 = %703.0;
  %714 = %704.0;
  %715 = %705.0;
  %716 = %708.0;
  %717 = %709.0;
  %718 = @func_6369() /* ty=Tensor[(10, 9, 6), float64] */;
  %719 = %710.2;
  (%711, %712, %713, %714, %715, %716, meta[relay.Constant][42] /* ty=Tensor[(780), uint64] */, %717, %718, %719)
}

def @func_3825() -> Tensor[(7, 2, 7), uint32] {
  %720 = cast(meta[relay.Constant][44] /* ty=Tensor[(7, 2, 7), uint32] */, dtype="uint32") /* ty=Tensor[(7, 2, 7), uint32] */;
  %721 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(7, 2, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(meta[relay.Constant][43] /* ty=Tensor[(7, 2, 7), uint32] */, dtype="uint32") /* ty=Tensor[(7, 2, 7), uint32] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  multiply(%722, %723) /* ty=Tensor[(7, 2, 7), uint32] */
}

def @func_2487(%var_2431: Tensor[(10, 9, 6), float32], %var_2449: Tensor[(10, 9, 6), float32], %var_2455: Tensor[(840), float32], %var_2456: Tensor[(312), float32]) -> (Tensor[(10, 9, 6), int16], Tensor[(10, 9, 6), uint32], Tensor[(180), uint16], Tensor[(840), float32], Tensor[(312), float32]) {
  %724 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %725 = %724.0;
  %726 = cast(%var_2431, dtype="int16") /* ty=Tensor[(10, 9, 6), int16] */;
  %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%725, dtype="int16") /* ty=Tensor[(10, 9, 6), int16] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %730 = cast(%var_2449, dtype="uint32") /* ty=Tensor[(10, 9, 6), uint32] */;
  %731 = shape_of(%var_2431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%var_2431, dtype="uint32") /* ty=Tensor[(10, 9, 6), uint32] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %734 = cast(%var_2455, dtype="float32") /* ty=Tensor[(840), float32] */;
  %735 = cast(%var_2456, dtype="float32") /* ty=Tensor[(312), float32] */;
  %736 = reshape(%734, newshape=[15, 4, 14]) /* ty=Tensor[(15, 4, 14), float32] */;
  %737 = reshape(%735, newshape=[312]) /* ty=Tensor[(312), float32] */;
  %738 = @func_1179(%736, %737) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(20, 4), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16], Tensor[(7, 12, 2), bool], Tensor[(168), int32], Tensor[(4, 3, 15), uint16], Tensor[(312), float32], Tensor[(15, 4, 14), float32]) */;
  %739 = bitwise_or(%728, %729) /* ty=Tensor[(10, 9, 6), int16] */;
  %740 = right_shift(%732, %733) /* ty=Tensor[(10, 9, 6), uint32] */;
  %741 = %738.4;
  (%739, %740, %741, %var_2455, %var_2456)
}

def @func_4340(%var_4331: Tensor[(840), float32]) -> (Tensor[(10, 9, 6), float32], Tensor[(168), int32], int8, Tensor[(784, 2), int8], Tensor[(840), float32]) {
  %742 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %743 = cast(meta[relay.Constant][45] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %744 = cast(meta[relay.Constant][46] /* ty=Tensor[(784, 2), int8] */, dtype="int8") /* ty=Tensor[(784, 2), int8] */;
  %745 = cast(%var_4331, dtype="float32") /* ty=Tensor[(840), float32] */;
  %746 = reshape(%743, newshape=[]) /* ty=int8 */;
  %747 = reshape(%744, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), int8] */;
  %748 = reshape(%745, newshape=[12, 70]) /* ty=Tensor[(12, 70), float32] */;
  %749 = @func_2900(%746, %747, %748) /* ty=(Tensor[(8, 14, 14), int8], Tensor[(10, 9, 6), float64], Tensor[(168), int32], Tensor[(12, 70), float32], Tensor[(312), float32]) */;
  %750 = %742.0;
  %751 = %749.2;
  (%750, %751, meta[relay.Constant][45] /* ty=int8 */, meta[relay.Constant][46] /* ty=Tensor[(784, 2), int8] */, %var_4331)
}

def @func_4036(%var_4024: Tensor[(1, 14, 7), float32]) -> (Tensor[(1, 14, 7), float32],) {
  %752 = cast(%var_4024, dtype="float32") /* ty=Tensor[(1, 14, 7), float32] */;
  %753 = atan(%752) /* ty=Tensor[(1, 14, 7), float32] */;
  (%753,)
}

def @func_2979() -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32]) {
  %754 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %755 = @func_2551() /* ty=Tensor[(10, 9, 6), float32] */;
  %756 = %754.0;
  (%755, %756)
}

def @func_7180(%var_7152: Tensor[(2, 112), float64], %var_7153: Tensor[(98), float32]) -> (Tensor[(10, 9, 6), float64], Tensor[(1, 14, 7), float32], Tensor[(2, 112), float64], Tensor[(98), float32], Tensor[(13, 11, 3), uint16], Tensor[(13, 11, 3), int64]) {
  %757 = @func_5733() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32]) */;
  %758 = cast(%var_7152, dtype="float64") /* ty=Tensor[(2, 112), float64] */;
  %759 = cast(%var_7153, dtype="float32") /* ty=Tensor[(98), float32] */;
  %760 = reshape(%758, newshape=[2, 16, 7]) /* ty=Tensor[(2, 16, 7), float64] */;
  %761 = reshape(%759, newshape=[98]) /* ty=Tensor[(98), float32] */;
  %762 = @func_6655(%760, %761) /* ty=(Tensor[(2, 16, 7), float64], Tensor[(2, 16, 7), float64], Tensor[(1, 14, 7), float32], Tensor[(98), float32], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) */;
  %763 = @func_4571() /* ty=(Tensor[(13, 11, 3), float64], Tensor[(10, 9, 6), float32]) */;
  %764 = %763.0;
  %765 = cast(%764, dtype="float64") /* ty=Tensor[(13, 11, 3), float64] */;
  %766 = sqrt(%765) /* ty=Tensor[(13, 11, 3), float64] */;
  %767 = cast(%766, dtype="float64") /* ty=Tensor[(13, 11, 3), float64] */;
  %768 = log(%767) /* ty=Tensor[(13, 11, 3), float64] */;
  %769 = cast(%768, dtype="uint16") /* ty=Tensor[(13, 11, 3), uint16] */;
  %770 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%766, dtype="uint16") /* ty=Tensor[(13, 11, 3), uint16] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %773 = cast(%766, dtype="int64") /* ty=Tensor[(13, 11, 3), int64] */;
  %774 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%768, dtype="int64") /* ty=Tensor[(13, 11, 3), int64] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %777 = %757.0;
  %778 = %762.2;
  %779 = left_shift(%771, %772) /* ty=Tensor[(13, 11, 3), uint16] */;
  %780 = bitwise_xor(%775, %776) /* ty=Tensor[(13, 11, 3), int64] */;
  (%777, %778, %var_7152, %var_7153, %779, %780)
}

def @func_714(%var_709: Tensor[(10, 2, 15), float64]) -> (Tensor[(10, 2, 15), float64],) {
  %781 = cast(%var_709, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
  %782 = sqrt(%781) /* ty=Tensor[(10, 2, 15), float64] */;
  (%782,)
}

def @func_703(%var_693: int32, %var_694: Tensor[(7, 12, 2), int32]) -> (Tensor[(7, 12, 2), bool],) {
  %783 = cast(%var_693, dtype="bool") /* ty=bool */;
  %784 = cast(%var_694, dtype="bool") /* ty=Tensor[(7, 12, 2), bool] */;
  %785 = equal(%783, %784) /* ty=Tensor[(7, 12, 2), bool] */;
  (%785,)
}

def @func_6493() -> (Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(13, 4, 8), float32]) {
  %786 = @func_6119() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), float64]) */;
  %787 = @func_5659() /* ty=Tensor[(13, 4, 8), float64] */;
  %788 = cast(%787, dtype="float32") /* ty=Tensor[(13, 4, 8), float32] */;
  %789 = @func_3788() /* ty=Tensor[(10, 9, 6), float64] */;
  %790 = %786.1;
  %791 = acosh(%788) /* ty=Tensor[(13, 4, 8), float32] */;
  (%789, %790, %791)
}

def @func_6526(%var_6505: int32) -> (Tensor[(10, 9, 6), float32], Tensor[(168), int32], int32, Tensor[(168), int32]) {
  %792 = @func_5063() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %793 = cast(%var_6505, dtype="int32") /* ty=int32 */;
  %794 = cast(meta[relay.Constant][47] /* ty=Tensor[(168), int32] */, dtype="int32") /* ty=Tensor[(168), int32] */;
  %795 = reshape(%793, newshape=[]) /* ty=int32 */;
  %796 = reshape(%794, newshape=[168]) /* ty=Tensor[(168), int32] */;
  %797 = @func_4466(%795, %796) /* ty=(Tensor[(10, 9, 6), float64], Tensor[(7, 12, 2), bool], int32, Tensor[(168), int32]) */;
  %798 = %792.0;
  %799 = %797.3;
  (%798, %799, %var_6505, meta[relay.Constant][47] /* ty=Tensor[(168), int32] */)
}

def @func_3777(%var_3762: Tensor[(462), uint8]) -> (Tensor[(13, 11, 3), bool], Tensor[(10, 9, 6), float64], Tensor[(11, 3, 14), uint8], Tensor[(462), float64]) {
  %800 = @func_3686() /* ty=(Tensor[(13, 11, 3), bool],) */;
  %801 = cast(%var_3762, dtype="uint8") /* ty=Tensor[(462), uint8] */;
  %802 = cast(%var_3762, dtype="uint8") /* ty=Tensor[(462), uint8] */;
  %803 = reshape(%801, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint8] */;
  %804 = reshape(%802, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint8] */;
  %805 = @func_3223(%803, %804) /* ty=(Tensor[(11, 3, 14), uint8],) */;
  %806 = cast(%var_3762, dtype="float64") /* ty=Tensor[(462), float64] */;
  %807 = %800.0;
  %808 = @func_2209() /* ty=Tensor[(10, 9, 6), float64] */;
  %809 = %805.0;
  %810 = log2(%806) /* ty=Tensor[(462), float64] */;
  (%807, %808, %809, %810)
}

def @func_7687() -> Tensor[(4, 2, 10), float64] {
  %811 = @func_4709() /* ty=(Tensor[(4, 2, 10), float64],) */;
  %811.0
}

def @func_3122(%var_3098: Tensor[(10, 9, 6), float64]) -> (Tensor[(10, 9, 6), bool], Tensor[(180), uint16]) {
  %812 = @func_2053() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %813 = %812.0;
  %814 = cast(%var_3098, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
  %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%813, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %818 = @func_2839() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) */;
  %819 = less_equal(%816, %817) /* ty=Tensor[(10, 9, 6), bool] */;
  %820 = %818.3;
  (%819, %820)
}

def @func_4620() -> (Tensor[(4, 2, 10), float64],) {
  %821 = @func_3427() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(20, 4), float32], Tensor[(10, 9, 6), bool]) */;
  %822 = %821.1;
  %823 = cast(%822, dtype="float64") /* ty=Tensor[(4, 2, 10), float64] */;
  %824 = log10(%823) /* ty=Tensor[(4, 2, 10), float64] */;
  (%824,)
}

def @func_2900(%var_2864: int8, %var_2865: Tensor[(8, 14, 14), int8], %var_2888: Tensor[(12, 70), float32]) -> (Tensor[(8, 14, 14), int8], Tensor[(10, 9, 6), float64], Tensor[(168), int32], Tensor[(12, 70), float32], Tensor[(312), float32]) {
  %825 = cast(%var_2864, dtype="int8") /* ty=int8 */;
  %826 = cast(%var_2865, dtype="int8") /* ty=Tensor[(8, 14, 14), int8] */;
  %827 = @func_2733() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %828 = cast(%var_2888, dtype="float32") /* ty=Tensor[(12, 70), float32] */;
  %829 = cast(meta[relay.Constant][48] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %830 = reshape(%828, newshape=[15, 4, 14]) /* ty=Tensor[(15, 4, 14), float32] */;
  %831 = reshape(%829, newshape=[312]) /* ty=Tensor[(312), float32] */;
  %832 = @func_1179(%830, %831) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(20, 4), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16], Tensor[(7, 12, 2), bool], Tensor[(168), int32], Tensor[(4, 3, 15), uint16], Tensor[(312), float32], Tensor[(15, 4, 14), float32]) */;
  %833 = bitwise_xor(%825, %826) /* ty=Tensor[(8, 14, 14), int8] */;
  %834 = %827.0;
  %835 = %832.6;
  (%833, %834, %835, %var_2888, meta[relay.Constant][48] /* ty=Tensor[(312), float32] */)
}

def @func_3941() -> (Tensor[(10, 9, 6), float32],) {
  %836 = @func_2979() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32]) */;
  %837 = %836.1;
  (%837,)
}

def @func_4984() -> Tensor[(10, 9, 6), float32] {
  %838 = @func_3340() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %838.0
}

def @func_5778() -> (Tensor[(10, 9, 6), float64],) {
  %839 = @func_2733() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %840 = %839.0;
  (%840,)
}

def @func_2695() -> Tensor[(10, 9, 6), float64] {
  @func_2209() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_7486() -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) {
  %841 = @func_6973() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %842 = @func_6493() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(13, 4, 8), float32]) */;
  %843 = %841.0;
  %844 = @func_3672() /* ty=Tensor[(10, 9, 6), float32] */;
  %845 = %842.0;
  (%843, %844, %845)
}

def @func_2108(%var_2091: Tensor[(80), float32]) -> (Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), int8], Tensor[(80), float32]) {
  %846 = cast(%var_2091, dtype="float32") /* ty=Tensor[(80), float32] */;
  %847 = cast(%var_2091, dtype="float32") /* ty=Tensor[(80), float32] */;
  %848 = reshape(%846, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %849 = reshape(%847, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %850 = @func_774(%848, %849) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(4, 2, 10), float64]) */;
  %851 = @func_1847() /* ty=Tensor[(10, 9, 6), float32] */;
  %852 = %850.0;
  (%851, %852, %var_2091)
}

def @func_5356() -> (uint16, Tensor[(10, 9, 6), float32]) {
  %853 = @func_3923() /* ty=(uint16, Tensor[(10, 9, 6), float32]) */;
  %854 = %853.0;
  %855 = @func_2783() /* ty=Tensor[(10, 9, 6), float32] */;
  (%854, %855)
}

def @func_8075() -> (Tensor[(10, 9, 6), float64],) {
  %856 = @func_1993() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %857 = %856.0;
  %858 = cast(%857, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  %859 = rsqrt(%858) /* ty=Tensor[(10, 9, 6), float64] */;
  (%859,)
}

def @func_2551() -> Tensor[(10, 9, 6), float32] {
  @func_1847() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_4861(%var_4847: Tensor[(4, 1, 6), float64]) -> (Tensor[(4, ?, 6), int64], Tensor[(5, 7, 14), int16], Tensor[(1, 7), int16]) {
  %860 = cast(%var_4847, dtype="float64") /* ty=Tensor[(4, 1, 6), float64] */;
  %861 = atanh(%860) /* ty=Tensor[(4, 1, 6), float64] */;
  %862 = cast(%861, dtype="int64") /* ty=Tensor[(4, 1, 6), int64] */;
  %863 = shape_of(%var_4847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(%var_4847, dtype="int64") /* ty=Tensor[(4, 1, 6), int64] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %866 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 7), int16] */, dtype="int16") /* ty=Tensor[(1, 7), int16] */;
  %867 = reshape(%866, newshape=[1, 7, 1]) /* ty=Tensor[(1, 7, 1), int16] */;
  %868 = bitwise_and(%864, %865) /* ty=Tensor[(4, ?, 6), int64] */;
  %869 = @func_4080(%867) /* ty=Tensor[(5, 7, 14), int16] */;
  (%868, %869, meta[relay.Constant][49] /* ty=Tensor[(1, 7), int16] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2260(%var_2241: Tensor[(10, 9, 6), float32]) -> Tensor[(10, 9, 6), float64] {
  %0 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %1 = %0.0;
  %2 = cast(%var_2241, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%4, %5) /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_6370() -> Tensor[(10, 9, 6), float64] {
  %6 = fn () -> Tensor[(10, 9, 6), float64] {
    @func_3788() /* ty=Tensor[(10, 9, 6), float64] */
  };
  %6() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_1009(%var_1007: Tensor[(8, 2, 10), bool], %var_1008: Tensor[(8, 2, 10), bool]) -> (Tensor[(8, 2, 10), uint8], Tensor[(8, 2, 10), int8]) {
  @func_1005(%var_1007, %var_1008) /* ty=(Tensor[(8, 2, 10), uint8], Tensor[(8, 2, 10), int8]) */
}

def @func_1994() -> (Tensor[(10, 9, 6), float64],) {
  %18 = fn () -> (Tensor[(10, 9, 6), float64],) {
    %7 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
    %8 = %7.0;
    %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
    %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
    %11 = cast(%8, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
    %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %13 = mod(%11, %12) /* ty=Tensor[(10, 9, 6), float32] */;
    %14 = cast(%13, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
    %15 = log10(%14) /* ty=Tensor[(10, 9, 6), float64] */;
    %16 = cast(%15, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
    %17 = asin(%16) /* ty=Tensor[(10, 9, 6), float64] */;
    (%17,)
  };
  %18() /* ty=(Tensor[(10, 9, 6), float64],) */
}

def @func_1005(%var_960: Tensor[(8, 2, 10), bool], %var_961: Tensor[(8, 2, 10), bool]) -> (Tensor[(8, 2, 10), uint8], Tensor[(8, 2, 10), int8]) {
  %19 = cast(%var_961, dtype="bool") /* ty=Tensor[(8, 2, 10), bool] */;
  %20 = shape_of(%var_960, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%var_960, dtype="bool") /* ty=Tensor[(8, 2, 10), bool] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %23 = logical_or(%21, %22) /* ty=Tensor[(8, 2, 10), bool] */;
  %24 = cast(%var_960, dtype="uint8") /* ty=Tensor[(8, 2, 10), uint8] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%23, dtype="uint8") /* ty=Tensor[(8, 2, 10), uint8] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %28 = cast(%var_960, dtype="int64") /* ty=Tensor[(8, 2, 10), int64] */;
  %29 = shape_of(%var_961, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%var_961, dtype="int64") /* ty=Tensor[(8, 2, 10), int64] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %32 = multiply(%30, %31) /* ty=Tensor[(8, 2, 10), int64] */;
  %33 = cast(%32, dtype="float64") /* ty=Tensor[(8, 2, 10), float64] */;
  %34 = acos(%33) /* ty=Tensor[(8, 2, 10), float64] */;
  %35 = cast(%34, dtype="int8") /* ty=Tensor[(8, 2, 10), int8] */;
  %36 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%32, dtype="int8") /* ty=Tensor[(8, 2, 10), int8] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %39 = left_shift(%26, %27) /* ty=Tensor[(8, 2, 10), uint8] */;
  %40 = bitwise_and(%37, %38) /* ty=Tensor[(8, 2, 10), int8] */;
  (%39, %40)
}

def @func_6779(%var_6778: int32) -> (Tensor[(13, 4, 8), float32], Tensor[(10, 9, 6), float64], Tensor[(180), uint16], int32) {
  %49 = fn (%var_6769: int32) -> (Tensor[(13, 4, 8), float32], Tensor[(10, 9, 6), float64], Tensor[(180), uint16], int32) {
    %41 = @func_6493() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(13, 4, 8), float32]) */;
    %42 = @func_5753() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float64], Tensor[(10, 9, 6), bool]) */;
    %43 = cast(%var_6769, dtype="int32") /* ty=int32 */;
    %44 = reshape(%43, newshape=[]) /* ty=int32 */;
    %45 = @func_3068(%44) /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32], Tensor[(7, 12, 2), bool], int32, Tensor[(3, 56), int32], Tensor[(10, 9, 6), float64], Tensor[(4, 3, 15), uint16], Tensor[(180), uint16]) */;
    %46 = %41.2;
    %47 = %42.0;
    %48 = %45.7;
    (%46, %47, %48, %var_6769)
  };
  %49(%var_6778) /* ty=(Tensor[(13, 4, 8), float32], Tensor[(10, 9, 6), float64], Tensor[(180), uint16], int32) */
}

def @func_7357() -> (Tensor[(7, 2, 7), bool], Tensor[(7, 2, 7), float32]) {
  %50 = @func_3825() /* ty=Tensor[(7, 2, 7), uint32] */;
  %51 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 2, 7), uint32] */, dtype="bool") /* ty=Tensor[(7, 2, 7), bool] */;
  %52 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%50, dtype="bool") /* ty=Tensor[(7, 2, 7), bool] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %55 = cast(%50, dtype="float32") /* ty=Tensor[(7, 2, 7), float32] */;
  %56 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(7, 2, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 2, 7), uint32] */, dtype="float32") /* ty=Tensor[(7, 2, 7), float32] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %59 = logical_or(%53, %54) /* ty=Tensor[(7, 2, 7), bool] */;
  %60 = floor_mod(%57, %58) /* ty=Tensor[(7, 2, 7), float32] */;
  (%59, %60)
}

def @func_707(%var_705: int32, %var_706: Tensor[(7, 12, 2), int32]) -> (Tensor[(7, 12, 2), bool],) {
  @func_703(%var_705, %var_706) /* ty=(Tensor[(7, 12, 2), bool],) */
}

def @func_5025() -> (Tensor[(4, 2, 10), bool],) {
  @func_5023() /* ty=(Tensor[(4, 2, 10), bool],) */
}

def @func_3388() -> (Tensor[(10, 9, 6), float32],) {
  %62 = fn () -> (Tensor[(10, 9, 6), float32],) {
    %61 = @func_2783() /* ty=Tensor[(10, 9, 6), float32] */;
    (%61,)
  };
  %62() /* ty=(Tensor[(10, 9, 6), float32],) */
}

def @func_2019(%var_2014: Tensor[(10, 9, 6), float64]) -> Tensor[(10, 9, 6), bool] {
  %63 = @func_1993() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %64 = %63.0;
  %65 = cast(%var_2014, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%64, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%67, %68) /* ty=Tensor[(10, 9, 6), bool] */
}

def @func_5998() -> Tensor[(10, 9, 6), float64] {
  @func_2209() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_7302(%var_7275: Tensor[(224), float64], %var_7276: Tensor[(98), float32]) -> (Tensor[(10, 9, 6), float32], Tensor[(2, 112), float64], Tensor[(224), float64], Tensor[(98), float64], Tensor[(180), uint16], Tensor[(840), float32], Tensor[(10, 9, 6), float32]) {
  %69 = cast(%var_7275, dtype="float64") /* ty=Tensor[(224), float64] */;
  %70 = cast(%var_7276, dtype="float32") /* ty=Tensor[(98), float32] */;
  %71 = reshape(%69, newshape=[2, 112]) /* ty=Tensor[(2, 112), float64] */;
  %72 = reshape(%70, newshape=[98]) /* ty=Tensor[(98), float32] */;
  %73 = @func_7180(%71, %72) /* ty=(Tensor[(10, 9, 6), float64], Tensor[(1, 14, 7), float32], Tensor[(2, 112), float64], Tensor[(98), float32], Tensor[(13, 11, 3), uint16], Tensor[(13, 11, 3), int64]) */;
  %74 = cast(meta[relay.Constant][2] /* ty=Tensor[(98), float32] */, dtype="float64") /* ty=Tensor[(98), float64] */;
  %75 = shape_of(%var_7276, dtype="int32") /* ty=Tensor[(1), int32] */;
  %76 = cast(%var_7276, dtype="float64") /* ty=Tensor[(98), float64] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?), float64] */;
  %78 = @func_4984() /* ty=Tensor[(10, 9, 6), float32] */;
  %79 = cast(%78, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  %80 = reshape(%79, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float64] */;
  %81 = @func_3122(%80) /* ty=(Tensor[(10, 9, 6), bool], Tensor[(180), uint16]) */;
  %82 = @func_5815() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32], Tensor[(840), float32]) */;
  %83 = @func_3571() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) */;
  %84 = %73.2;
  %85 = power(%76, %77) /* ty=Tensor[(98), float64] */;
  %86 = %81.1;
  %87 = %82.2;
  %88 = %83.0;
  (%78, %84, %var_7275, %85, %86, %87, %88)
}

def @func_3826() -> Tensor[(7, 2, 7), uint32] {
  %93 = fn () -> Tensor[(7, 2, 7), uint32] {
    %89 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 2, 7), uint32] */, dtype="uint32") /* ty=Tensor[(7, 2, 7), uint32] */;
    %90 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(7, 2, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %91 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 2, 7), uint32] */, dtype="uint32") /* ty=Tensor[(7, 2, 7), uint32] */;
    %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    multiply(%91, %92) /* ty=Tensor[(7, 2, 7), uint32] */
  };
  %93() /* ty=Tensor[(7, 2, 7), uint32] */
}

def @func_2110(%var_2109: Tensor[(80), float32]) -> (Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), int8], Tensor[(80), float32]) {
  %101 = fn (%var_2091: Tensor[(80), float32]) -> (Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), int8], Tensor[(80), float32]) {
    %94 = cast(%var_2091, dtype="float32") /* ty=Tensor[(80), float32] */;
    %95 = cast(%var_2091, dtype="float32") /* ty=Tensor[(80), float32] */;
    %96 = reshape(%94, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
    %97 = reshape(%95, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
    %98 = @func_774(%96, %97) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(4, 2, 10), float64]) */;
    %99 = @func_1847() /* ty=Tensor[(10, 9, 6), float32] */;
    %100 = %98.0;
    (%99, %100, %var_2091)
  };
  %101(%var_2109) /* ty=(Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), int8], Tensor[(80), float32]) */
}

def @func_4189() -> Tensor[(10, 9, 6), float64] {
  @func_2695() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_7203() -> Tensor[(10, 9, 6), float32] {
  @func_7201() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_6915(%var_6913: Tensor[(15, 8, 8), float32], %var_6914: Tensor[(15, 8, 8), float32]) -> (Tensor[(15, 8, 8), bool],) {
  %109 = fn (%var_6894: Tensor[(15, 8, 8), float32], %var_6903: Tensor[(15, 8, 8), float32]) -> (Tensor[(15, 8, 8), bool],) {
    %102 = cast(%var_6894, dtype="float32") /* ty=Tensor[(15, 8, 8), float32] */;
    %103 = log2(%102) /* ty=Tensor[(15, 8, 8), float32] */;
    %104 = cast(%var_6903, dtype="bool") /* ty=Tensor[(15, 8, 8), bool] */;
    %105 = shape_of(%103, dtype="int32") /* ty=Tensor[(3), int32] */;
    %106 = cast(%103, dtype="bool") /* ty=Tensor[(15, 8, 8), bool] */;
    %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %108 = less_equal(%106, %107) /* ty=Tensor[(15, 8, 8), bool] */;
    (%108,)
  };
  %109(%var_6913, %var_6914) /* ty=(Tensor[(15, 8, 8), bool],) */
}

def @func_6743(%var_6741: Tensor[(312), float32]) -> (Tensor[(4, 2, 10), float64], Tensor[(7, 12, 2), bool], Tensor[(840), float32], Tensor[(312), float32]) {
  @func_6740(%var_6741) /* ty=(Tensor[(4, 2, 10), float64], Tensor[(7, 12, 2), bool], Tensor[(840), float32], Tensor[(312), float32]) */
}

def @func_8076() -> (Tensor[(10, 9, 6), float64],) {
  %114 = fn () -> (Tensor[(10, 9, 6), float64],) {
    %110 = @func_1993() /* ty=(Tensor[(10, 9, 6), float64],) */;
    %111 = %110.0;
    %112 = cast(%111, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
    %113 = rsqrt(%112) /* ty=Tensor[(10, 9, 6), float64] */;
    (%113,)
  };
  %114() /* ty=(Tensor[(10, 9, 6), float64],) */
}

def @func_1183(%var_1181: Tensor[(15, 4, 14), float32], %var_1182: Tensor[(312), float32]) -> (Tensor[(4, 2, 10), int8], Tensor[(20, 4), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16], Tensor[(7, 12, 2), bool], Tensor[(168), int32], Tensor[(4, 3, 15), uint16], Tensor[(312), float32], Tensor[(15, 4, 14), float32]) {
  @func_1179(%var_1181, %var_1182) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(20, 4), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16], Tensor[(7, 12, 2), bool], Tensor[(168), int32], Tensor[(4, 3, 15), uint16], Tensor[(312), float32], Tensor[(15, 4, 14), float32]) */
}

def @func_4340(%var_4331: Tensor[(840), float32]) -> (Tensor[(10, 9, 6), float32], Tensor[(168), int32], int8, Tensor[(784, 2), int8], Tensor[(840), float32]) {
  %115 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %116 = cast(meta[relay.Constant][5] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %117 = cast(meta[relay.Constant][6] /* ty=Tensor[(784, 2), int8] */, dtype="int8") /* ty=Tensor[(784, 2), int8] */;
  %118 = cast(%var_4331, dtype="float32") /* ty=Tensor[(840), float32] */;
  %119 = reshape(%116, newshape=[]) /* ty=int8 */;
  %120 = reshape(%117, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), int8] */;
  %121 = reshape(%118, newshape=[12, 70]) /* ty=Tensor[(12, 70), float32] */;
  %122 = @func_2900(%119, %120, %121) /* ty=(Tensor[(8, 14, 14), int8], Tensor[(10, 9, 6), float64], Tensor[(168), int32], Tensor[(12, 70), float32], Tensor[(312), float32]) */;
  %123 = %115.0;
  %124 = %122.2;
  (%123, %124, meta[relay.Constant][5] /* ty=int8 */, meta[relay.Constant][6] /* ty=Tensor[(784, 2), int8] */, %var_4331)
}

def @func_4986() -> Tensor[(10, 9, 6), float32] {
  @func_4984() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_7687() -> Tensor[(4, 2, 10), float64] {
  %125 = @func_4709() /* ty=(Tensor[(4, 2, 10), float64],) */;
  %125.0
}

def @func_7822(%var_7809: int32, %var_7810: Tensor[(168), int32]) -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32], Tensor[(7, 12, 2), bool], int32, Tensor[(168), int32], Tensor[(10, 9, 6), float64]) {
  %126 = @func_3571() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) */;
  %127 = @func_3571() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) */;
  %128 = cast(%var_7809, dtype="int32") /* ty=int32 */;
  %129 = cast(%var_7810, dtype="int32") /* ty=Tensor[(168), int32] */;
  %130 = reshape(%128, newshape=[]) /* ty=int32 */;
  %131 = reshape(%129, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int32] */;
  %132 = @func_703(%130, %131) /* ty=(Tensor[(7, 12, 2), bool],) */;
  %133 = @func_3427() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(20, 4), float32], Tensor[(10, 9, 6), bool]) */;
  %134 = %126.0;
  %135 = %127.0;
  %136 = %132.0;
  %137 = %133.0;
  (%134, %135, %136, %var_7809, %var_7810, %137)
}

def @func_1675(%var_1674: Tensor[(9, 11, 6), float32]) -> (Tensor[(9, 11, 6), float32],) {
  %143 = fn (%var_1659: Tensor[(9, 11, 6), float32]) -> (Tensor[(9, 11, 6), float32],) {
    %138 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 11, 6), float32] */, dtype="float32") /* ty=Tensor[(9, 11, 6), float32] */;
    %139 = shape_of(%var_1659, dtype="int32") /* ty=Tensor[(3), int32] */;
    %140 = cast(%var_1659, dtype="float32") /* ty=Tensor[(9, 11, 6), float32] */;
    %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %142 = floor_divide(%140, %141) /* ty=Tensor[(9, 11, 6), float32] */;
    (%142,)
  };
  %143(%var_1674) /* ty=(Tensor[(9, 11, 6), float32],) */
}

def @func_2211() -> Tensor[(10, 9, 6), float64] {
  @func_2209() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_4214() -> Tensor[(10, 9, 6), float32] {
  @func_4212() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_7717() -> Tensor[(10, 9, 6), float32] {
  %145 = fn () -> Tensor[(10, 9, 6), float32] {
    %144 = @func_5356() /* ty=(uint16, Tensor[(10, 9, 6), float32]) */;
    %144.1
  };
  %145() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_3488(%var_3487: Tensor[(10, 9, 6), float32]) -> Tensor[(10, 9, 6), bool] {
  %151 = fn (%var_3478: Tensor[(10, 9, 6), float32]) -> Tensor[(10, 9, 6), bool] {
    %146 = @func_2783() /* ty=Tensor[(10, 9, 6), float32] */;
    %147 = cast(%var_3478, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
    %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
    %149 = cast(%146, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
    %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%149, %150) /* ty=Tensor[(10, 9, 6), bool] */
  };
  %151(%var_3487) /* ty=Tensor[(10, 9, 6), bool] */
}

def @func_7436() -> (Tensor[(10, 9, 6), float32], Tensor[(14, 16, 12), float64]) {
  %152 = @func_5937() /* ty=(Tensor[(14, 16, 12), float64],) */;
  %153 = @func_4984() /* ty=Tensor[(10, 9, 6), float32] */;
  %154 = %152.0;
  (%153, %154)
}

def @main(%var_8712: Tensor[(9, 8, 6), float32]) -> Tensor[(9, 8, 6), float32] {
  %155 = cast(%var_8712, dtype="float32") /* ty=Tensor[(9, 8, 6), float32] */;
  acos(%155) /* ty=Tensor[(9, 8, 6), float32] */
}

def @func_3571() -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) {
  %156 = @func_3340() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %157 = @func_2733() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %158 = %157.0;
  %159 = cast(%158, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %160 = cosh(%159) /* ty=Tensor[(10, 9, 6), float32] */;
  %161 = cast(%160, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  %162 = %156.0;
  %163 = atan(%161) /* ty=Tensor[(10, 9, 6), float64] */;
  (%162, %163)
}

def @func_7826(%var_7824: int32, %var_7825: Tensor[(168), int32]) -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32], Tensor[(7, 12, 2), bool], int32, Tensor[(168), int32], Tensor[(10, 9, 6), float64]) {
  @func_7822(%var_7824, %var_7825) /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32], Tensor[(7, 12, 2), bool], int32, Tensor[(168), int32], Tensor[(10, 9, 6), float64]) */
}

def @func_2841() -> (Tensor[(10, 9, 6), float64], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) {
  @func_2839() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) */
}

def @func_6165(%var_6163: Tensor[(11, 15, 6), uint32], %var_6164: Tensor[(11, 15, 6), uint32]) -> Tensor[(11, 15, 6), bool] {
  %168 = fn (%var_6156: Tensor[(11, 15, 6), uint32], %var_6157: Tensor[(11, 15, 6), uint32]) -> Tensor[(11, 15, 6), bool] {
    %164 = cast(%var_6157, dtype="bool") /* ty=Tensor[(11, 15, 6), bool] */;
    %165 = shape_of(%var_6156, dtype="int32") /* ty=Tensor[(3), int32] */;
    %166 = cast(%var_6156, dtype="bool") /* ty=Tensor[(11, 15, 6), bool] */;
    %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%166, %167) /* ty=Tensor[(11, 15, 6), bool] */
  };
  %168(%var_6163, %var_6164) /* ty=Tensor[(11, 15, 6), bool] */
}

def @func_6529(%var_6527: int32) -> (Tensor[(10, 9, 6), float32], Tensor[(168), int32], int32, Tensor[(168), int32]) {
  @func_6526(%var_6527) /* ty=(Tensor[(10, 9, 6), float32], Tensor[(168), int32], int32, Tensor[(168), int32]) */
}

def @func_8247() -> Tensor[(10, 9, 6), float64] {
  %169 = @func_7486() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) */;
  %169.2
}

def @func_2336() -> (Tensor[(14, 16, 12), float32], Tensor[(10, 2, 15), float64], Tensor[(300), float64], Tensor[(10, 9, 6), bool], Tensor[(540), float32], Tensor[(4, 2, 10), float64], Tensor[(80), float32], Tensor[(14, 16, 12), float64]) {
  @func_2334() /* ty=(Tensor[(14, 16, 12), float32], Tensor[(10, 2, 15), float64], Tensor[(300), float64], Tensor[(10, 9, 6), bool], Tensor[(540), float32], Tensor[(4, 2, 10), float64], Tensor[(80), float32], Tensor[(14, 16, 12), float64]) */
}

def @func_1179(%var_1080: Tensor[(15, 4, 14), float32], %var_1132: Tensor[(312), float32]) -> (Tensor[(4, 2, 10), int8], Tensor[(20, 4), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16], Tensor[(7, 12, 2), bool], Tensor[(168), int32], Tensor[(4, 3, 15), uint16], Tensor[(312), float32], Tensor[(15, 4, 14), float32]) {
  %170 = cast(meta[relay.Constant][8] /* ty=Tensor[(20, 4), float32] */, dtype="float32") /* ty=Tensor[(20, 4), float32] */;
  %171 = cast(meta[relay.Constant][8] /* ty=Tensor[(20, 4), float32] */, dtype="float32") /* ty=Tensor[(20, 4), float32] */;
  %172 = reshape(%170, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %173 = reshape(%171, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %174 = @func_774(%172, %173) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(4, 2, 10), float64]) */;
  %175 = cast(meta[relay.Constant][9] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %176 = cast(meta[relay.Constant][10] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %177 = reshape(%175, newshape=[]) /* ty=uint16 */;
  %178 = reshape(%176, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), uint16] */;
  %179 = @func_75(%177, %178) /* ty=(Tensor[(4, 3, 15), uint16],) */;
  %180 = cast(meta[relay.Constant][9] /* ty=uint16 */, dtype="int32") /* ty=int32 */;
  %181 = cast(meta[relay.Constant][11] /* ty=Tensor[(168), int32] */, dtype="int32") /* ty=Tensor[(168), int32] */;
  %182 = reshape(%180, newshape=[]) /* ty=int32 */;
  %183 = reshape(%181, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int32] */;
  %184 = @func_703(%182, %183) /* ty=(Tensor[(7, 12, 2), bool],) */;
  %185 = cast(%var_1132, dtype="float32") /* ty=Tensor[(312), float32] */;
  %186 = cast(meta[relay.Constant][9] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %187 = reshape(%185, newshape=[6, 4, 13]) /* ty=Tensor[(6, 4, 13), float32] */;
  %188 = reshape(%186, newshape=[]) /* ty=uint16 */;
  %189 = @func_244(%187, %188) /* ty=(Tensor[(6, 4, 13), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) */;
  %190 = cast(%var_1080, dtype="float32") /* ty=Tensor[(15, 4, 14), float32] */;
  %191 = asinh(%190) /* ty=Tensor[(15, 4, 14), float32] */;
  %192 = cast(%191, dtype="float64") /* ty=Tensor[(15, 4, 14), float64] */;
  %193 = sqrt(%192) /* ty=Tensor[(15, 4, 14), float64] */;
  %194 = cast(%193, dtype="float64") /* ty=Tensor[(15, 4, 14), float64] */;
  %195 = tan(%194) /* ty=Tensor[(15, 4, 14), float64] */;
  %196 = cast(%var_1080, dtype="uint64") /* ty=Tensor[(15, 4, 14), uint64] */;
  %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%195, dtype="uint64") /* ty=Tensor[(15, 4, 14), uint64] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %200 = multiply(%198, %199) /* ty=Tensor[(15, 4, 14), uint64] */;
  %201 = cast(%191, dtype="int32") /* ty=Tensor[(15, 4, 14), int32] */;
  %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%200, dtype="int32") /* ty=Tensor[(15, 4, 14), int32] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %205 = left_shift(%203, %204) /* ty=Tensor[(15, 4, 14), int32] */;
  %206 = cast(%205, dtype="float32") /* ty=Tensor[(15, 4, 14), float32] */;
  %207 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%193, dtype="float32") /* ty=Tensor[(15, 4, 14), float32] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %210 = %174.0;
  %211 = %179.0;
  %212 = %184.0;
  %213 = %189.1;
  %214 = divide(%208, %209) /* ty=Tensor[(15, 4, 14), float32] */;
  (%210, meta[relay.Constant][8] /* ty=Tensor[(20, 4), float32] */, %211, meta[relay.Constant][9] /* ty=uint16 */, meta[relay.Constant][10] /* ty=Tensor[(180), uint16] */, %212, meta[relay.Constant][11] /* ty=Tensor[(168), int32] */, %213, %var_1132, %214)
}

def @func_2735() -> (Tensor[(10, 9, 6), float64],) {
  @func_2733() /* ty=(Tensor[(10, 9, 6), float64],) */
}

def @func_5816() -> (Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32], Tensor[(840), float32]) {
  %220 = fn () -> (Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32], Tensor[(840), float32]) {
    %215 = cast(meta[relay.Constant][12] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
    %216 = reshape(%215, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %217 = @func_4340(%216) /* ty=(Tensor[(10, 9, 6), float32], Tensor[(168), int32], int8, Tensor[(784, 2), int8], Tensor[(840), float32]) */;
    %218 = @func_5390() /* ty=Tensor[(10, 9, 6), float64] */;
    %219 = %217.0;
    (%218, %219, meta[relay.Constant][12] /* ty=Tensor[(840), float32] */)
  };
  %220() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32], Tensor[(840), float32]) */
}

def @func_717(%var_715: Tensor[(10, 2, 15), float64]) -> (Tensor[(10, 2, 15), float64],) {
  @func_714(%var_715) /* ty=(Tensor[(10, 2, 15), float64],) */
}

def @func_3340() -> (Tensor[(10, 9, 6), float32],) {
  %221 = @func_2783() /* ty=Tensor[(10, 9, 6), float32] */;
  (%221,)
}

def @func_6120() -> (Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), float64]) {
  %225 = fn () -> (Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), float64]) {
    %222 = @func_3427() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(20, 4), float32], Tensor[(10, 9, 6), bool]) */;
    %223 = @func_5923() /* ty=Tensor[(10, 9, 6), float32] */;
    %224 = %222.1;
    (%223, %224)
  };
  %225() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), float64]) */
}

def @func_6973() -> (Tensor[(10, 9, 6), float32],) {
  %226 = @func_6683() /* ty=Tensor[(10, 9, 6), float32] */;
  (%226,)
}

def @func_2594(%var_2591: Tensor[(416, 1), float64]) -> (Tensor[(10, 9, 6), float64], Tensor[(10, 2, 15), float64], Tensor[(300), float64], Tensor[(13, 4, 8), float64], Tensor[(416, 1), float64]) {
  %227 = @func_1993() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %228 = cast(meta[relay.Constant][13] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %229 = reshape(%228, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %230 = @func_714(%229) /* ty=(Tensor[(10, 2, 15), float64],) */;
  %231 = cast(%var_2591, dtype="float64") /* ty=Tensor[(416, 1), float64] */;
  %232 = cast(%var_2591, dtype="float64") /* ty=Tensor[(416, 1), float64] */;
  %233 = reshape(%231, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), float64] */;
  %234 = reshape(%232, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), float64] */;
  %235 = @func_1781(%233, %234) /* ty=(Tensor[(13, 4, 8), float64], Tensor[(13, 4, 8), uint64]) */;
  %236 = %227.0;
  %237 = %230.0;
  %238 = %235.0;
  (%236, %237, meta[relay.Constant][13] /* ty=Tensor[(300), float64] */, %238, %var_2591)
}

def @func_4734() -> (Tensor[(10, 9, 6), float32],) {
  %240 = fn () -> (Tensor[(10, 9, 6), float32],) {
    %239 = @func_3672() /* ty=Tensor[(10, 9, 6), float32] */;
    (%239,)
  };
  %240() /* ty=(Tensor[(10, 9, 6), float32],) */
}

def @func_3573() -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) {
  @func_3571() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) */
}

def @func_7022() -> Tensor[(10, 9, 6), float64] {
  @func_7020() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_7525() -> (Tensor[(10, 9, 6), float64],) {
  %243 = fn () -> (Tensor[(10, 9, 6), float64],) {
    %241 = @func_6493() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(13, 4, 8), float32]) */;
    %242 = %241.0;
    (%242,)
  };
  %243() /* ty=(Tensor[(10, 9, 6), float64],) */
}

def @func_2334() -> (Tensor[(14, 16, 12), float32], Tensor[(10, 2, 15), float64], Tensor[(300), float64], Tensor[(10, 9, 6), bool], Tensor[(540), float32], Tensor[(4, 2, 10), float64], Tensor[(80), float32], Tensor[(14, 16, 12), float64]) {
  %244 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 16, 12), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 12), float32] */;
  %245 = cast(meta[relay.Constant][15] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %246 = reshape(%245, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %247 = @func_714(%246) /* ty=(Tensor[(10, 2, 15), float64],) */;
  %248 = cast(meta[relay.Constant][16] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
  %249 = reshape(%248, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
  %250 = @func_1833(%249) /* ty=(Tensor[(10, 9, 6), bool],) */;
  %251 = cast(meta[relay.Constant][17] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %252 = cast(meta[relay.Constant][17] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %253 = reshape(%251, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %254 = reshape(%252, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %255 = @func_774(%253, %254) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(4, 2, 10), float64]) */;
  %256 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 16, 12), float32] */, dtype="float64") /* ty=Tensor[(14, 16, 12), float64] */;
  %257 = cosh(%244) /* ty=Tensor[(14, 16, 12), float32] */;
  %258 = %247.0;
  %259 = %250.0;
  %260 = %255.1;
  %261 = acosh(%256) /* ty=Tensor[(14, 16, 12), float64] */;
  (%257, %258, meta[relay.Constant][15] /* ty=Tensor[(300), float64] */, %259, meta[relay.Constant][16] /* ty=Tensor[(540), float32] */, %260, meta[relay.Constant][17] /* ty=Tensor[(80), float32] */, %261)
}

def @func_5735() -> (Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32]) {
  @func_5733() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32]) */
}

def @func_5358() -> (uint16, Tensor[(10, 9, 6), float32]) {
  @func_5356() /* ty=(uint16, Tensor[(10, 9, 6), float32]) */
}

def @func_703(%var_693: int32, %var_694: Tensor[(7, 12, 2), int32]) -> (Tensor[(7, 12, 2), bool],) {
  %262 = cast(%var_693, dtype="bool") /* ty=bool */;
  %263 = cast(%var_694, dtype="bool") /* ty=Tensor[(7, 12, 2), bool] */;
  %264 = equal(%262, %263) /* ty=Tensor[(7, 12, 2), bool] */;
  (%264,)
}

def @func_6858() -> (Tensor[(10, 9, 6), int64], Tensor[(10, 9, 6), float64]) {
  %275 = fn () -> (Tensor[(10, 9, 6), int64], Tensor[(10, 9, 6), float64]) {
    %265 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
    %266 = %265.0;
    %267 = @func_2551() /* ty=Tensor[(10, 9, 6), float32] */;
    %268 = cast(%267, dtype="int64") /* ty=Tensor[(10, 9, 6), int64] */;
    %269 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
    %270 = cast(%266, dtype="int64") /* ty=Tensor[(10, 9, 6), int64] */;
    %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %272 = @func_2053() /* ty=(Tensor[(10, 9, 6), float64],) */;
    %273 = bitwise_xor(%270, %271) /* ty=Tensor[(10, 9, 6), int64] */;
    %274 = %272.0;
    (%273, %274)
  };
  %275() /* ty=(Tensor[(10, 9, 6), int64], Tensor[(10, 9, 6), float64]) */
}

def @func_2263(%var_2261: Tensor[(10, 9, 6), float32]) -> Tensor[(10, 9, 6), float64] {
  @func_2260(%var_2261) /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_2492(%var_2488: Tensor[(10, 9, 6), float32], %var_2489: Tensor[(10, 9, 6), float32], %var_2490: Tensor[(840), float32], %var_2491: Tensor[(312), float32]) -> (Tensor[(10, 9, 6), int16], Tensor[(10, 9, 6), uint32], Tensor[(180), uint16], Tensor[(840), float32], Tensor[(312), float32]) {
  %294 = fn (%var_2431: Tensor[(10, 9, 6), float32], %var_2449: Tensor[(10, 9, 6), float32], %var_2455: Tensor[(840), float32], %var_2456: Tensor[(312), float32]) -> (Tensor[(10, 9, 6), int16], Tensor[(10, 9, 6), uint32], Tensor[(180), uint16], Tensor[(840), float32], Tensor[(312), float32]) {
    %276 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
    %277 = %276.0;
    %278 = cast(%var_2431, dtype="int16") /* ty=Tensor[(10, 9, 6), int16] */;
    %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(3), int32] */;
    %280 = cast(%277, dtype="int16") /* ty=Tensor[(10, 9, 6), int16] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %282 = cast(%var_2449, dtype="uint32") /* ty=Tensor[(10, 9, 6), uint32] */;
    %283 = shape_of(%var_2431, dtype="int32") /* ty=Tensor[(3), int32] */;
    %284 = cast(%var_2431, dtype="uint32") /* ty=Tensor[(10, 9, 6), uint32] */;
    %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %286 = cast(%var_2455, dtype="float32") /* ty=Tensor[(840), float32] */;
    %287 = cast(%var_2456, dtype="float32") /* ty=Tensor[(312), float32] */;
    %288 = reshape(%286, newshape=[15, 4, 14]) /* ty=Tensor[(15, 4, 14), float32] */;
    %289 = reshape(%287, newshape=[312]) /* ty=Tensor[(312), float32] */;
    %290 = @func_1179(%288, %289) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(20, 4), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16], Tensor[(7, 12, 2), bool], Tensor[(168), int32], Tensor[(4, 3, 15), uint16], Tensor[(312), float32], Tensor[(15, 4, 14), float32]) */;
    %291 = bitwise_or(%280, %281) /* ty=Tensor[(10, 9, 6), int16] */;
    %292 = right_shift(%284, %285) /* ty=Tensor[(10, 9, 6), uint32] */;
    %293 = %290.4;
    (%291, %292, %293, %var_2455, %var_2456)
  };
  %294(%var_2488, %var_2489, %var_2490, %var_2491) /* ty=(Tensor[(10, 9, 6), int16], Tensor[(10, 9, 6), uint32], Tensor[(180), uint16], Tensor[(840), float32], Tensor[(312), float32]) */
}

def @func_3672() -> Tensor[(10, 9, 6), float32] {
  @func_2783() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_5204(%var_5203: Tensor[(10, 9, 6), float32]) -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), uint16]) {
  %305 = fn (%var_5191: Tensor[(10, 9, 6), float32]) -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), uint16]) {
    %295 = @func_4507() /* ty=Tensor[(10, 9, 6), float32] */;
    %296 = cast(%295, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
    %297 = reshape(%296, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
    %298 = cast(%var_5191, dtype="uint16") /* ty=Tensor[(10, 9, 6), uint16] */;
    %299 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
    %300 = cast(%295, dtype="uint16") /* ty=Tensor[(10, 9, 6), uint16] */;
    %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %302 = @func_3672() /* ty=Tensor[(10, 9, 6), float32] */;
    %303 = @func_2260(%297) /* ty=Tensor[(10, 9, 6), float64] */;
    %304 = add(%300, %301) /* ty=Tensor[(10, 9, 6), uint16] */;
    (%302, %303, %304)
  };
  %305(%var_5203) /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), uint16]) */
}

def @func_1836(%var_1834: Tensor[(10, 9, 6), float32]) -> (Tensor[(10, 9, 6), bool],) {
  @func_1833(%var_1834) /* ty=(Tensor[(10, 9, 6), bool],) */
}

def @func_6659(%var_6657: Tensor[(2, 16, 7), float64], %var_6658: Tensor[(98), float32]) -> (Tensor[(2, 16, 7), float64], Tensor[(2, 16, 7), float64], Tensor[(1, 14, 7), float32], Tensor[(98), float32], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) {
  @func_6655(%var_6657, %var_6658) /* ty=(Tensor[(2, 16, 7), float64], Tensor[(2, 16, 7), float64], Tensor[(1, 14, 7), float32], Tensor[(98), float32], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) */
}

def @func_2172() -> (Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), uint64], Tensor[(416), float64]) {
  %315 = fn () -> (Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), uint64], Tensor[(416), float64]) {
    %306 = @func_1847() /* ty=Tensor[(10, 9, 6), float32] */;
    %307 = cast(%306, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
    %308 = cast(meta[relay.Constant][18] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
    %309 = cast(meta[relay.Constant][18] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
    %310 = reshape(%308, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), float64] */;
    %311 = reshape(%309, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), float64] */;
    %312 = @func_1781(%310, %311) /* ty=(Tensor[(13, 4, 8), float64], Tensor[(13, 4, 8), uint64]) */;
    %313 = erf(%307) /* ty=Tensor[(10, 9, 6), float64] */;
    %314 = %312.1;
    (%313, %314, meta[relay.Constant][18] /* ty=Tensor[(416), float64] */)
  };
  %315() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), uint64], Tensor[(416), float64]) */
}

def @func_6740(%var_6692: Tensor[(312), float32]) -> (Tensor[(4, 2, 10), float64], Tensor[(7, 12, 2), bool], Tensor[(840), float32], Tensor[(312), float32]) {
  %316 = @func_4620() /* ty=(Tensor[(4, 2, 10), float64],) */;
  %317 = cast(meta[relay.Constant][19] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %318 = cast(%var_6692, dtype="float32") /* ty=Tensor[(312), float32] */;
  %319 = reshape(%317, newshape=[15, 4, 14]) /* ty=Tensor[(15, 4, 14), float32] */;
  %320 = reshape(%318, newshape=[312]) /* ty=Tensor[(312), float32] */;
  %321 = @func_1179(%319, %320) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(20, 4), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16], Tensor[(7, 12, 2), bool], Tensor[(168), int32], Tensor[(4, 3, 15), uint16], Tensor[(312), float32], Tensor[(15, 4, 14), float32]) */;
  %322 = %316.0;
  %323 = %321.5;
  (%322, %323, meta[relay.Constant][19] /* ty=Tensor[(840), float32] */, %var_6692)
}

def @func_3189(%var_3185: Tensor[(13, 6, 4), float64], %var_3186: Tensor[(13, 6, 4), float64], %var_3187: Tensor[(780, 1), uint64], %var_3188: Tensor[(13, 6, 4), float64]) -> (Tensor[(312), float32], Tensor[(540), float32], Tensor[(840), float32], Tensor[(13, 4, 8), uint64], Tensor[(416), float64], Tensor[(13, 6, 4), bool], Tensor[(4, 2, 10), float64], Tensor[(780, 1), uint64], Tensor[(13, 6, 4), uint16]) {
  %356 = fn (%var_3126: Tensor[(13, 6, 4), float64], %var_3146: Tensor[(13, 6, 4), float64], %var_3171: Tensor[(780, 1), uint64], %var_3177: Tensor[(13, 6, 4), float64]) -> (Tensor[(312), float32], Tensor[(540), float32], Tensor[(840), float32], Tensor[(13, 4, 8), uint64], Tensor[(416), float64], Tensor[(13, 6, 4), bool], Tensor[(4, 2, 10), float64], Tensor[(780, 1), uint64], Tensor[(13, 6, 4), uint16]) {
    %324 = cast(meta[relay.Constant][20] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
    %325 = cast(meta[relay.Constant][20] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
    %326 = cast(meta[relay.Constant][21] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
    %327 = cast(%var_3126, dtype="float32") /* ty=Tensor[(13, 6, 4), float32] */;
    %328 = reshape(%324, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
    %329 = reshape(%325, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
    %330 = reshape(%326, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %331 = reshape(%327, newshape=[312]) /* ty=Tensor[(312), float32] */;
    %332 = @func_2487(%328, %329, %330, %331) /* ty=(Tensor[(10, 9, 6), int16], Tensor[(10, 9, 6), uint32], Tensor[(180), uint16], Tensor[(840), float32], Tensor[(312), float32]) */;
    %333 = cast(meta[relay.Constant][22] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
    %334 = cast(meta[relay.Constant][22] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
    %335 = reshape(%333, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), float64] */;
    %336 = reshape(%334, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), float64] */;
    %337 = @func_1781(%335, %336) /* ty=(Tensor[(13, 4, 8), float64], Tensor[(13, 4, 8), uint64]) */;
    %338 = cast(%var_3146, dtype="bool") /* ty=Tensor[(13, 6, 4), bool] */;
    %339 = shape_of(%var_3126, dtype="int32") /* ty=Tensor[(3), int32] */;
    %340 = cast(%var_3126, dtype="bool") /* ty=Tensor[(13, 6, 4), bool] */;
    %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %342 = cast(%var_3171, dtype="uint64") /* ty=Tensor[(780, 1), uint64] */;
    %343 = reshape(%342, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), uint64] */;
    %344 = @func_2813(%343) /* ty=(Tensor[(4, 15, 13), bool], Tensor[(4, 2, 10), float64]) */;
    %345 = cast(%var_3126, dtype="float64") /* ty=Tensor[(13, 6, 4), float64] */;
    %346 = acos(%345) /* ty=Tensor[(13, 6, 4), float64] */;
    %347 = cast(%var_3177, dtype="uint16") /* ty=Tensor[(13, 6, 4), uint16] */;
    %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
    %349 = cast(%346, dtype="uint16") /* ty=Tensor[(13, 6, 4), uint16] */;
    %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %351 = %332.4;
    %352 = %337.1;
    %353 = greater(%340, %341) /* ty=Tensor[(13, 6, 4), bool] */;
    %354 = %344.1;
    %355 = left_shift(%349, %350) /* ty=Tensor[(13, 6, 4), uint16] */;
    (%351, meta[relay.Constant][20] /* ty=Tensor[(540), float32] */, meta[relay.Constant][21] /* ty=Tensor[(840), float32] */, %352, meta[relay.Constant][22] /* ty=Tensor[(416), float64] */, %353, %354, %var_3171, %355)
  };
  %356(%var_3185, %var_3186, %var_3187, %var_3188) /* ty=(Tensor[(312), float32], Tensor[(540), float32], Tensor[(840), float32], Tensor[(13, 4, 8), uint64], Tensor[(416), float64], Tensor[(13, 6, 4), bool], Tensor[(4, 2, 10), float64], Tensor[(780, 1), uint64], Tensor[(13, 6, 4), uint16]) */
}

def @func_1769(%var_1768: Tensor[(2, 40), float32]) -> (Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), int8], Tensor[(2, 40), float32]) {
  %365 = fn (%var_1754: Tensor[(2, 40), float32]) -> (Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), int8], Tensor[(2, 40), float32]) {
    %357 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
    %358 = cast(%var_1754, dtype="float32") /* ty=Tensor[(2, 40), float32] */;
    %359 = cast(%var_1754, dtype="float32") /* ty=Tensor[(2, 40), float32] */;
    %360 = reshape(%358, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
    %361 = reshape(%359, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
    %362 = @func_774(%360, %361) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(4, 2, 10), float64]) */;
    %363 = %357.0;
    %364 = %362.0;
    (%363, %364, %var_1754)
  };
  %365(%var_1768) /* ty=(Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), int8], Tensor[(2, 40), float32]) */
}

def @func_3941() -> (Tensor[(10, 9, 6), float32],) {
  %366 = @func_2979() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32]) */;
  %367 = %366.1;
  (%367,)
}

def @func_4914(%var_4912: Tensor[(160), bool], %var_4913: Tensor[(15, 3, 14), uint16]) -> (Tensor[(7, 2, 7), uint32], Tensor[(8, 2, 10), uint8], Tensor[(160), bool], Tensor[(10, 9, 6), float64], Tensor[(15, 3, 14), bool]) {
  @func_4910(%var_4912, %var_4913) /* ty=(Tensor[(7, 2, 7), uint32], Tensor[(8, 2, 10), uint8], Tensor[(160), bool], Tensor[(10, 9, 6), float64], Tensor[(15, 3, 14), bool]) */
}

def @func_5937() -> (Tensor[(14, 16, 12), float64],) {
  %368 = @func_2334() /* ty=(Tensor[(14, 16, 12), float32], Tensor[(10, 2, 15), float64], Tensor[(300), float64], Tensor[(10, 9, 6), bool], Tensor[(540), float32], Tensor[(4, 2, 10), float64], Tensor[(80), float32], Tensor[(14, 16, 12), float64]) */;
  %369 = %368.7;
  (%369,)
}

def @func_8180(%var_8147: Tensor[(16, 10), bool]) -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64], Tensor[(8, 2, 10), int8], Tensor[(16, 10), bool]) {
  %370 = @func_2979() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32]) */;
  %371 = %370.1;
  %372 = cast(%371, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %373 = reshape(%372, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
  %374 = cast(%var_8147, dtype="bool") /* ty=Tensor[(16, 10), bool] */;
  %375 = cast(%var_8147, dtype="bool") /* ty=Tensor[(16, 10), bool] */;
  %376 = reshape(%374, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %377 = reshape(%375, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %378 = @func_1005(%376, %377) /* ty=(Tensor[(8, 2, 10), uint8], Tensor[(8, 2, 10), int8]) */;
  %379 = @func_5998() /* ty=Tensor[(10, 9, 6), float64] */;
  %380 = @func_2260(%373) /* ty=Tensor[(10, 9, 6), float64] */;
  %381 = @func_3710() /* ty=Tensor[(10, 9, 6), float32] */;
  %382 = @func_2209() /* ty=Tensor[(10, 9, 6), float64] */;
  %383 = %378.1;
  (%371, %379, %380, %381, %382, %383, %var_8147)
}

def @func_7020() -> Tensor[(10, 9, 6), float64] {
  %384 = @func_2733() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %384.0
}

def @func_8249() -> Tensor[(10, 9, 6), float64] {
  @func_8247() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_2839() -> (Tensor[(10, 9, 6), float64], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) {
  %385 = @func_1993() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %386 = cast(meta[relay.Constant][23] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %387 = cast(meta[relay.Constant][24] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %388 = reshape(%386, newshape=[]) /* ty=uint16 */;
  %389 = reshape(%387, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), uint16] */;
  %390 = @func_75(%388, %389) /* ty=(Tensor[(4, 3, 15), uint16],) */;
  %391 = %385.0;
  %392 = %390.0;
  (%391, %392, meta[relay.Constant][23] /* ty=uint16 */, meta[relay.Constant][24] /* ty=Tensor[(180), uint16] */)
}

def @func_4431() -> Tensor[(10, 9, 6), float64] {
  %393 = @func_3340() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %394 = %393.0;
  %395 = cast(%394, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  asinh(%395) /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_7597() -> (Tensor[(10, 9, 6), float32],) {
  @func_7595() /* ty=(Tensor[(10, 9, 6), float32],) */
}

def @func_79(%var_77: uint16, %var_78: Tensor[(4, 3, 15), uint16]) -> (Tensor[(4, 3, 15), uint16],) {
  @func_75(%var_77, %var_78) /* ty=(Tensor[(4, 3, 15), uint16],) */
}

def @func_4285(%var_4247: Tensor[(10, 9, 6), float32], %var_4277: Tensor[(312), float32], %var_4278: uint16) -> (Tensor[(10, 9, 6), uint64], uint16, Tensor[(312), float32], uint16, Tensor[(10, 9, 6), float32]) {
  %396 = @func_4212() /* ty=Tensor[(10, 9, 6), float32] */;
  %397 = cast(%var_4247, dtype="uint64") /* ty=Tensor[(10, 9, 6), uint64] */;
  %398 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%396, dtype="uint64") /* ty=Tensor[(10, 9, 6), uint64] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %401 = cast(%var_4277, dtype="float32") /* ty=Tensor[(312), float32] */;
  %402 = cast(%var_4278, dtype="uint16") /* ty=uint16 */;
  %403 = reshape(%401, newshape=[6, 4, 13]) /* ty=Tensor[(6, 4, 13), float32] */;
  %404 = reshape(%402, newshape=[]) /* ty=uint16 */;
  %405 = @func_244(%403, %404) /* ty=(Tensor[(6, 4, 13), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) */;
  %406 = left_shift(%399, %400) /* ty=Tensor[(10, 9, 6), uint64] */;
  %407 = %405.2;
  %408 = @func_3672() /* ty=Tensor[(10, 9, 6), float32] */;
  (%406, %407, %var_4277, %var_4278, %408)
}

def @func_4861(%var_4847: Tensor[(4, 1, 6), float64]) -> (Tensor[(4, ?, 6), int64], Tensor[(5, 7, 14), int16], Tensor[(1, 7), int16]) {
  %409 = cast(%var_4847, dtype="float64") /* ty=Tensor[(4, 1, 6), float64] */;
  %410 = atanh(%409) /* ty=Tensor[(4, 1, 6), float64] */;
  %411 = cast(%410, dtype="int64") /* ty=Tensor[(4, 1, 6), int64] */;
  %412 = shape_of(%var_4847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%var_4847, dtype="int64") /* ty=Tensor[(4, 1, 6), int64] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %415 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 7), int16] */, dtype="int16") /* ty=Tensor[(1, 7), int16] */;
  %416 = reshape(%415, newshape=[1, 7, 1]) /* ty=Tensor[(1, 7, 1), int16] */;
  %417 = bitwise_and(%413, %414) /* ty=Tensor[(4, ?, 6), int64] */;
  %418 = @func_4080(%416) /* ty=Tensor[(5, 7, 14), int16] */;
  (%417, %418, meta[relay.Constant][25] /* ty=Tensor[(1, 7), int16] */)
}

def @func_1785(%var_1783: Tensor[(13, 4, 8), float64], %var_1784: Tensor[(13, 4, 8), float64]) -> (Tensor[(13, 4, 8), float64], Tensor[(13, 4, 8), uint64]) {
  @func_1781(%var_1783, %var_1784) /* ty=(Tensor[(13, 4, 8), float64], Tensor[(13, 4, 8), uint64]) */
}

def @func_5356() -> (uint16, Tensor[(10, 9, 6), float32]) {
  %419 = @func_3923() /* ty=(uint16, Tensor[(10, 9, 6), float32]) */;
  %420 = %419.0;
  %421 = @func_2783() /* ty=Tensor[(10, 9, 6), float32] */;
  (%420, %421)
}

def @func_4710() -> (Tensor[(4, 2, 10), float64],) {
  %424 = fn () -> (Tensor[(4, 2, 10), float64],) {
    %422 = @func_3427() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(20, 4), float32], Tensor[(10, 9, 6), bool]) */;
    %423 = %422.1;
    (%423,)
  };
  %424() /* ty=(Tensor[(4, 2, 10), float64],) */
}

def @func_3427() -> (Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(20, 4), float32], Tensor[(10, 9, 6), bool]) {
  %425 = @func_2733() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %426 = cast(meta[relay.Constant][26] /* ty=Tensor[(20, 4), float32] */, dtype="float32") /* ty=Tensor[(20, 4), float32] */;
  %427 = cast(meta[relay.Constant][26] /* ty=Tensor[(20, 4), float32] */, dtype="float32") /* ty=Tensor[(20, 4), float32] */;
  %428 = reshape(%426, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %429 = reshape(%427, newshape=[4, 2, 10]) /* ty=Tensor[(4, 2, 10), float32] */;
  %430 = @func_774(%428, %429) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(4, 2, 10), float64]) */;
  %431 = %425.0;
  %432 = cast(%431, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %433 = reshape(%432, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
  %434 = @func_2260(%433) /* ty=Tensor[(10, 9, 6), float64] */;
  %435 = @func_3340() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %436 = %435.0;
  %437 = cast(%436, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
  %438 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%434, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %441 = %430.1;
  %442 = greater_equal(%439, %440) /* ty=Tensor[(10, 9, 6), bool] */;
  (%431, %441, meta[relay.Constant][26] /* ty=Tensor[(20, 4), float32] */, %442)
}

def @func_5897(%var_5895: Tensor[(312), float32], %var_5896: Tensor[(2, 784), int8]) -> (Tensor[(10, 9, 6), float32], uint16, Tensor[(312), float32], uint16, Tensor[(10, 9, 6), float64], Tensor[(2, 784), int8], Tensor[(420, 2), float32]) {
  %458 = fn (%var_5882: Tensor[(312), float32], %var_5886: Tensor[(2, 784), int8]) -> (Tensor[(10, 9, 6), float32], uint16, Tensor[(312), float32], uint16, Tensor[(10, 9, 6), float64], Tensor[(2, 784), int8], Tensor[(420, 2), float32]) {
    %443 = cast(%var_5882, dtype="float32") /* ty=Tensor[(312), float32] */;
    %444 = cast(meta[relay.Constant][27] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %445 = reshape(%443, newshape=[6, 4, 13]) /* ty=Tensor[(6, 4, 13), float32] */;
    %446 = reshape(%444, newshape=[]) /* ty=uint16 */;
    %447 = @func_244(%445, %446) /* ty=(Tensor[(6, 4, 13), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) */;
    %448 = cast(meta[relay.Constant][27] /* ty=uint16 */, dtype="int8") /* ty=int8 */;
    %449 = cast(%var_5886, dtype="int8") /* ty=Tensor[(2, 784), int8] */;
    %450 = cast(meta[relay.Constant][28] /* ty=Tensor[(420, 2), float32] */, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
    %451 = reshape(%448, newshape=[]) /* ty=int8 */;
    %452 = reshape(%449, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), int8] */;
    %453 = reshape(%450, newshape=[12, 70]) /* ty=Tensor[(12, 70), float32] */;
    %454 = @func_2900(%451, %452, %453) /* ty=(Tensor[(8, 14, 14), int8], Tensor[(10, 9, 6), float64], Tensor[(168), int32], Tensor[(12, 70), float32], Tensor[(312), float32]) */;
    %455 = @func_1847() /* ty=Tensor[(10, 9, 6), float32] */;
    %456 = %447.2;
    %457 = %454.1;
    (%455, %456, %var_5882, meta[relay.Constant][27] /* ty=uint16 */, %457, %var_5886, meta[relay.Constant][28] /* ty=Tensor[(420, 2), float32] */)
  };
  %458(%var_5895, %var_5896) /* ty=(Tensor[(10, 9, 6), float32], uint16, Tensor[(312), float32], uint16, Tensor[(10, 9, 6), float64], Tensor[(2, 784), int8], Tensor[(420, 2), float32]) */
}

def @func_4469(%var_4467: int32, %var_4468: Tensor[(168), int32]) -> (Tensor[(10, 9, 6), float64], Tensor[(7, 12, 2), bool], int32, Tensor[(168), int32]) {
  %466 = fn (%var_4458: int32, %var_4459: Tensor[(168), int32]) -> (Tensor[(10, 9, 6), float64], Tensor[(7, 12, 2), bool], int32, Tensor[(168), int32]) {
    %459 = cast(%var_4458, dtype="int32") /* ty=int32 */;
    %460 = cast(%var_4459, dtype="int32") /* ty=Tensor[(168), int32] */;
    %461 = reshape(%459, newshape=[]) /* ty=int32 */;
    %462 = reshape(%460, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int32] */;
    %463 = @func_703(%461, %462) /* ty=(Tensor[(7, 12, 2), bool],) */;
    %464 = @func_2209() /* ty=Tensor[(10, 9, 6), float64] */;
    %465 = %463.0;
    (%464, %465, %var_4458, %var_4459)
  };
  %466(%var_4467, %var_4468) /* ty=(Tensor[(10, 9, 6), float64], Tensor[(7, 12, 2), bool], int32, Tensor[(168), int32]) */
}

def @func_8063() -> (Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32]) {
  @func_8061() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32]) */
}

def @func_3124(%var_3123: Tensor[(10, 9, 6), float64]) -> (Tensor[(10, 9, 6), bool], Tensor[(180), uint16]) {
  %476 = fn (%var_3098: Tensor[(10, 9, 6), float64]) -> (Tensor[(10, 9, 6), bool], Tensor[(180), uint16]) {
    %467 = @func_2053() /* ty=(Tensor[(10, 9, 6), float64],) */;
    %468 = %467.0;
    %469 = cast(%var_3098, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
    %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(3), int32] */;
    %471 = cast(%468, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
    %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %473 = @func_2839() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) */;
    %474 = less_equal(%471, %472) /* ty=Tensor[(10, 9, 6), bool] */;
    %475 = %473.3;
    (%474, %475)
  };
  %476(%var_3123) /* ty=(Tensor[(10, 9, 6), bool], Tensor[(180), uint16]) */
}

def @func_1738() -> (Tensor[(10, 9, 6), float32],) {
  %479 = fn () -> (Tensor[(10, 9, 6), float32],) {
    %477 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
    %478 = log(%477) /* ty=Tensor[(10, 9, 6), float32] */;
    (%478,)
  };
  %479() /* ty=(Tensor[(10, 9, 6), float32],) */
}

def @func_1847() -> Tensor[(10, 9, 6), float32] {
  %480 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %480.0
}

def @func_8183(%var_8181: Tensor[(16, 10), bool]) -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64], Tensor[(8, 2, 10), int8], Tensor[(16, 10), bool]) {
  @func_8180(%var_8181) /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64], Tensor[(8, 2, 10), int8], Tensor[(16, 10), bool]) */
}

def @func_3743(%var_3741: Tensor[(1, 6, 5), float32], %var_3742: Tensor[(594), float32]) -> (Tensor[(8, 6, 5), float32], Tensor[(8, 6, 5), int8], Tensor[(9, 11, 6), float32], Tensor[(594), float32]) {
  @func_3739(%var_3741, %var_3742) /* ty=(Tensor[(8, 6, 5), float32], Tensor[(8, 6, 5), int8], Tensor[(9, 11, 6), float32], Tensor[(594), float32]) */
}

def @func_5856(%var_5855: Tensor[(10, 9, 6), float64]) -> Tensor[(10, 9, 6), int8] {
  %487 = fn (%var_5845: Tensor[(10, 9, 6), float64]) -> Tensor[(10, 9, 6), int8] {
    %481 = @func_3246() /* ty=(Tensor[(10, 9, 6), float64],) */;
    %482 = %481.0;
    %483 = cast(%var_5845, dtype="int8") /* ty=Tensor[(10, 9, 6), int8] */;
    %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
    %485 = cast(%482, dtype="int8") /* ty=Tensor[(10, 9, 6), int8] */;
    %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    subtract(%485, %486) /* ty=Tensor[(10, 9, 6), int8] */
  };
  %487(%var_5855) /* ty=Tensor[(10, 9, 6), int8] */
}

def @func_2780() -> (Tensor[(2, 3, 11), float64],) {
  %495 = fn () -> (Tensor[(2, 3, 11), float64],) {
    %488 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 3, 11), float32] */, dtype="float32") /* ty=Tensor[(2, 3, 11), float32] */;
    %489 = acos(%488) /* ty=Tensor[(2, 3, 11), float32] */;
    %490 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 3, 11), float32] */, dtype="float64") /* ty=Tensor[(2, 3, 11), float64] */;
    %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
    %492 = cast(%489, dtype="float64") /* ty=Tensor[(2, 3, 11), float64] */;
    %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %494 = floor_mod(%492, %493) /* ty=Tensor[(2, 3, 11), float64] */;
    (%494,)
  };
  %495() /* ty=(Tensor[(2, 3, 11), float64],) */
}

def @func_3788() -> Tensor[(10, 9, 6), float64] {
  @func_2695() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_1849() -> Tensor[(10, 9, 6), float32] {
  @func_1847() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_5391() -> Tensor[(10, 9, 6), float64] {
  %499 = fn () -> Tensor[(10, 9, 6), float64] {
    %496 = @func_3246() /* ty=(Tensor[(10, 9, 6), float64],) */;
    %497 = %496.0;
    %498 = cast(%497, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
    acos(%498) /* ty=Tensor[(10, 9, 6), float64] */
  };
  %499() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_4191() -> Tensor[(10, 9, 6), float64] {
  @func_4189() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_4507() -> Tensor[(10, 9, 6), float32] {
  %500 = @func_3788() /* ty=Tensor[(10, 9, 6), float64] */;
  %501 = cast(%500, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  sin(%501) /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_2813(%var_2787: Tensor[(4, 15, 13), uint64]) -> (Tensor[(4, 15, 13), bool], Tensor[(4, 2, 10), float64]) {
  %502 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 15, 13), uint64] */, dtype="bool") /* ty=Tensor[(4, 15, 13), bool] */;
  %503 = shape_of(%var_2787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%var_2787, dtype="bool") /* ty=Tensor[(4, 15, 13), bool] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %506 = @func_2334() /* ty=(Tensor[(14, 16, 12), float32], Tensor[(10, 2, 15), float64], Tensor[(300), float64], Tensor[(10, 9, 6), bool], Tensor[(540), float32], Tensor[(4, 2, 10), float64], Tensor[(80), float32], Tensor[(14, 16, 12), float64]) */;
  %507 = equal(%504, %505) /* ty=Tensor[(4, 15, 13), bool] */;
  %508 = %506.5;
  (%507, %508)
}

def @func_4082(%var_4081: Tensor[(1, 7, 1), int16]) -> Tensor[(5, 7, 14), int16] {
  %511 = fn (%var_4073: Tensor[(1, 7, 1), int16]) -> Tensor[(5, 7, 14), int16] {
    %509 = cast(%var_4073, dtype="int16") /* ty=Tensor[(1, 7, 1), int16] */;
    %510 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 7, 14), int16] */, dtype="int16") /* ty=Tensor[(5, 7, 14), int16] */;
    maximum(%509, %510) /* ty=Tensor[(5, 7, 14), int16] */
  };
  %511(%var_4081) /* ty=Tensor[(5, 7, 14), int16] */
}

def @func_7993() -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32]) {
  @func_7991() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32]) */
}

def @func_5753() -> (Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float64], Tensor[(10, 9, 6), bool]) {
  %512 = @func_5390() /* ty=Tensor[(10, 9, 6), float64] */;
  %513 = cast(%512, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %514 = reshape(%513, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
  %515 = @func_1833(%514) /* ty=(Tensor[(10, 9, 6), bool],) */;
  %516 = @func_5659() /* ty=Tensor[(13, 4, 8), float64] */;
  %517 = %515.0;
  (%512, %516, %517)
}

def @func_5778() -> (Tensor[(10, 9, 6), float64],) {
  %518 = @func_2733() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %519 = %518.0;
  (%519,)
}

def @func_1603(%var_1602: Tensor[(6, 9, 11), float64]) -> Tensor[(6, 9, 11), float64] {
  %524 = fn (%var_1594: Tensor[(6, 9, 11), float64]) -> Tensor[(6, 9, 11), float64] {
    %520 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 9, 11), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
    %521 = shape_of(%var_1594, dtype="int32") /* ty=Tensor[(3), int32] */;
    %522 = cast(%var_1594, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
    %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    maximum(%522, %523) /* ty=Tensor[(6, 9, 11), float64] */
  };
  %524(%var_1602) /* ty=Tensor[(6, 9, 11), float64] */
}

def @func_4433() -> Tensor[(10, 9, 6), float64] {
  @func_4431() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_7201() -> Tensor[(10, 9, 6), float32] {
  %525 = @func_3923() /* ty=(uint16, Tensor[(10, 9, 6), float32]) */;
  %525.1
}

def @func_8511() -> (Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float32]) {
  %534 = fn () -> (Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float32]) {
    %526 = @func_7524() /* ty=(Tensor[(10, 9, 6), float64],) */;
    %527 = @func_5659() /* ty=Tensor[(13, 4, 8), float64] */;
    %528 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 4, 8), float64] */, dtype="float32") /* ty=Tensor[(13, 4, 8), float32] */;
    %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
    %530 = cast(%527, dtype="float32") /* ty=Tensor[(13, 4, 8), float32] */;
    %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %532 = %526.0;
    %533 = mod(%530, %531) /* ty=Tensor[(13, 4, 8), float32] */;
    (%532, %533)
  };
  %534() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float32]) */
}

def @func_4679() -> (Tensor[(12, 15, 2), bool],) {
  %542 = fn () -> (Tensor[(12, 15, 2), bool],) {
    %535 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 15, 2), float64] */;
    %536 = acosh(%535) /* ty=Tensor[(12, 15, 2), float64] */;
    %537 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 15, 2), float64] */, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
    %538 = shape_of(%536, dtype="int32") /* ty=Tensor[(3), int32] */;
    %539 = cast(%536, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
    %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %541 = logical_or(%539, %540) /* ty=Tensor[(12, 15, 2), bool] */;
    (%541,)
  };
  %542() /* ty=(Tensor[(12, 15, 2), bool],) */
}

def @func_6420() -> (Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float64]) {
  @func_6418() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float64]) */
}

def @func_6493() -> (Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(13, 4, 8), float32]) {
  %543 = @func_6119() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), float64]) */;
  %544 = @func_5659() /* ty=Tensor[(13, 4, 8), float64] */;
  %545 = cast(%544, dtype="float32") /* ty=Tensor[(13, 4, 8), float32] */;
  %546 = @func_3788() /* ty=Tensor[(10, 9, 6), float64] */;
  %547 = %543.1;
  %548 = acosh(%545) /* ty=Tensor[(13, 4, 8), float32] */;
  (%546, %547, %548)
}

def @func_3223(%var_3211: Tensor[(11, 3, 14), uint8], %var_3212: Tensor[(11, 3, 14), uint8]) -> (Tensor[(11, 3, 14), uint8],) {
  %549 = cast(%var_3212, dtype="uint8") /* ty=Tensor[(11, 3, 14), uint8] */;
  %550 = shape_of(%var_3211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%var_3211, dtype="uint8") /* ty=Tensor[(11, 3, 14), uint8] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %553 = logical_xor(%551, %552) /* ty=Tensor[(11, 3, 14), uint8] */;
  (%553,)
}

def @func_3779(%var_3778: Tensor[(462), uint8]) -> (Tensor[(13, 11, 3), bool], Tensor[(10, 9, 6), float64], Tensor[(11, 3, 14), uint8], Tensor[(462), float64]) {
  %565 = fn (%var_3762: Tensor[(462), uint8]) -> (Tensor[(13, 11, 3), bool], Tensor[(10, 9, 6), float64], Tensor[(11, 3, 14), uint8], Tensor[(462), float64]) {
    %554 = @func_3686() /* ty=(Tensor[(13, 11, 3), bool],) */;
    %555 = cast(%var_3762, dtype="uint8") /* ty=Tensor[(462), uint8] */;
    %556 = cast(%var_3762, dtype="uint8") /* ty=Tensor[(462), uint8] */;
    %557 = reshape(%555, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint8] */;
    %558 = reshape(%556, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint8] */;
    %559 = @func_3223(%557, %558) /* ty=(Tensor[(11, 3, 14), uint8],) */;
    %560 = cast(%var_3762, dtype="float64") /* ty=Tensor[(462), float64] */;
    %561 = %554.0;
    %562 = @func_2209() /* ty=Tensor[(10, 9, 6), float64] */;
    %563 = %559.0;
    %564 = log2(%560) /* ty=Tensor[(462), float64] */;
    (%561, %562, %563, %564)
  };
  %565(%var_3778) /* ty=(Tensor[(13, 11, 3), bool], Tensor[(10, 9, 6), float64], Tensor[(11, 3, 14), uint8], Tensor[(462), float64]) */
}

def @func_8196() -> (Tensor[(10, 9, 6), float64],) {
  %567 = fn () -> (Tensor[(10, 9, 6), float64],) {
    %566 = @func_2695() /* ty=Tensor[(10, 9, 6), float64] */;
    (%566,)
  };
  %567() /* ty=(Tensor[(10, 9, 6), float64],) */
}

def @func_4572() -> (Tensor[(13, 11, 3), float64], Tensor[(10, 9, 6), float32]) {
  %573 = fn () -> (Tensor[(13, 11, 3), float64], Tensor[(10, 9, 6), float32]) {
    %568 = @func_3686() /* ty=(Tensor[(13, 11, 3), bool],) */;
    %569 = %568.0;
    %570 = cast(%569, dtype="float64") /* ty=Tensor[(13, 11, 3), float64] */;
    %571 = atanh(%570) /* ty=Tensor[(13, 11, 3), float64] */;
    %572 = @func_1847() /* ty=Tensor[(10, 9, 6), float32] */;
    (%571, %572)
  };
  %573() /* ty=(Tensor[(13, 11, 3), float64], Tensor[(10, 9, 6), float32]) */
}

def @func_3739(%var_3720: Tensor[(1, 6, 5), float32], %var_3734: Tensor[(594), float32]) -> (Tensor[(8, 6, 5), float32], Tensor[(8, 6, 5), int8], Tensor[(9, 11, 6), float32], Tensor[(594), float32]) {
  %574 = cast(%var_3720, dtype="float32") /* ty=Tensor[(1, 6, 5), float32] */;
  %575 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 6, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 6, 5), float32] */;
  %576 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 6, 5), float32] */, dtype="int8") /* ty=Tensor[(8, 6, 5), int8] */;
  %577 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(8, 6, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 6, 5), float32] */, dtype="int8") /* ty=Tensor[(8, 6, 5), int8] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %580 = cast(%var_3734, dtype="float32") /* ty=Tensor[(594), float32] */;
  %581 = reshape(%580, newshape=[9, 11, 6]) /* ty=Tensor[(9, 11, 6), float32] */;
  %582 = @func_1673(%581) /* ty=(Tensor[(9, 11, 6), float32],) */;
  %583 = power(%574, %575) /* ty=Tensor[(8, 6, 5), float32] */;
  %584 = maximum(%578, %579) /* ty=Tensor[(8, 6, 5), int8] */;
  %585 = %582.0;
  (%583, %584, %585, %var_3734)
}

def @func_7359() -> (Tensor[(7, 2, 7), bool], Tensor[(7, 2, 7), float32]) {
  @func_7357() /* ty=(Tensor[(7, 2, 7), bool], Tensor[(7, 2, 7), float32]) */
}

def @func_5552(%var_5550: Tensor[(7, 14, 9), float64], %var_5551: Tensor[(540), float32]) -> (Tensor[(10, 9, 6), float64], Tensor[(540), float32], Tensor[(7, 14, 9), int8], Tensor[(10, 9, 6), bool], Tensor[(10, 9, 6), float32]) {
  %603 = fn (%var_5501: Tensor[(7, 14, 9), float64], %var_5509: Tensor[(540), float32]) -> (Tensor[(10, 9, 6), float64], Tensor[(540), float32], Tensor[(7, 14, 9), int8], Tensor[(10, 9, 6), bool], Tensor[(10, 9, 6), float32]) {
    %586 = cast(%var_5509, dtype="float32") /* ty=Tensor[(540), float32] */;
    %587 = reshape(%586, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
    %588 = cast(%var_5501, dtype="float64") /* ty=Tensor[(7, 14, 9), float64] */;
    %589 = atanh(%588) /* ty=Tensor[(7, 14, 9), float64] */;
    %590 = cast(%589, dtype="float32") /* ty=Tensor[(7, 14, 9), float32] */;
    %591 = log2(%590) /* ty=Tensor[(7, 14, 9), float32] */;
    %592 = cast(%591, dtype="int8") /* ty=Tensor[(7, 14, 9), int8] */;
    %593 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
    %594 = cast(%589, dtype="int8") /* ty=Tensor[(7, 14, 9), int8] */;
    %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %596 = cast(%var_5509, dtype="float32") /* ty=Tensor[(540), float32] */;
    %597 = reshape(%596, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
    %598 = @func_4733() /* ty=(Tensor[(10, 9, 6), float32],) */;
    %599 = @func_2260(%587) /* ty=Tensor[(10, 9, 6), float64] */;
    %600 = logical_xor(%594, %595) /* ty=Tensor[(7, 14, 9), int8] */;
    %601 = @func_3486(%597) /* ty=Tensor[(10, 9, 6), bool] */;
    %602 = %598.0;
    (%599, %var_5509, %600, %601, %602)
  };
  %603(%var_5550, %var_5551) /* ty=(Tensor[(10, 9, 6), float64], Tensor[(540), float32], Tensor[(7, 14, 9), int8], Tensor[(10, 9, 6), bool], Tensor[(10, 9, 6), float32]) */
}

def @func_2784() -> Tensor[(10, 9, 6), float32] {
  %604 = fn () -> Tensor[(10, 9, 6), float32] {
    @func_1847() /* ty=Tensor[(10, 9, 6), float32] */
  };
  %604() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_6495() -> (Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(13, 4, 8), float32]) {
  @func_6493() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(13, 4, 8), float32]) */
}

def @func_4039(%var_4037: Tensor[(1, 14, 7), float32]) -> (Tensor[(1, 14, 7), float32],) {
  @func_4036(%var_4037) /* ty=(Tensor[(1, 14, 7), float32],) */
}

def @func_2979() -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32]) {
  %605 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %606 = @func_2551() /* ty=Tensor[(10, 9, 6), float32] */;
  %607 = %605.0;
  (%606, %607)
}

def @func_7689() -> Tensor[(4, 2, 10), float64] {
  @func_7687() /* ty=Tensor[(4, 2, 10), float64] */
}

def @func_2551() -> Tensor[(10, 9, 6), float32] {
  @func_1847() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_3475() -> (Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), float64], Tensor[(780), uint64]) {
  %614 = fn () -> (Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), float64], Tensor[(780), uint64]) {
    %608 = @func_3387() /* ty=(Tensor[(10, 9, 6), float32],) */;
    %609 = cast(meta[relay.Constant][39] /* ty=Tensor[(780), uint64] */, dtype="uint64") /* ty=Tensor[(780), uint64] */;
    %610 = reshape(%609, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), uint64] */;
    %611 = @func_2813(%610) /* ty=(Tensor[(4, 15, 13), bool], Tensor[(4, 2, 10), float64]) */;
    %612 = %608.0;
    %613 = %611.1;
    (%612, %613, meta[relay.Constant][39] /* ty=Tensor[(780), uint64] */)
  };
  %614() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(4, 2, 10), float64], Tensor[(780), uint64]) */
}

def @func_2733() -> (Tensor[(10, 9, 6), float64],) {
  %615 = @func_1847() /* ty=Tensor[(10, 9, 6), float32] */;
  %616 = cast(%615, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
  %617 = sinh(%616) /* ty=Tensor[(10, 9, 6), float64] */;
  (%617,)
}

def @func_3943() -> (Tensor[(10, 9, 6), float32],) {
  @func_3941() /* ty=(Tensor[(10, 9, 6), float32],) */
}

def @func_5484() -> (Tensor[(10, 9, 6), float64],) {
  %620 = fn () -> (Tensor[(10, 9, 6), float64],) {
    %618 = @func_2171() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), uint64], Tensor[(416), float64]) */;
    %619 = %618.0;
    (%619,)
  };
  %620() /* ty=(Tensor[(10, 9, 6), float64],) */
}

def @func_6975() -> (Tensor[(10, 9, 6), float32],) {
  @func_6973() /* ty=(Tensor[(10, 9, 6), float32],) */
}

def @func_3070(%var_3069: int32) -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32], Tensor[(7, 12, 2), bool], int32, Tensor[(3, 56), int32], Tensor[(10, 9, 6), float64], Tensor[(4, 3, 15), uint16], Tensor[(180), uint16]) {
  %642 = fn (%var_3043: int32) -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32], Tensor[(7, 12, 2), bool], int32, Tensor[(3, 56), int32], Tensor[(10, 9, 6), float64], Tensor[(4, 3, 15), uint16], Tensor[(180), uint16]) {
    %621 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
    %622 = cast(%var_3043, dtype="int32") /* ty=int32 */;
    %623 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 56), int32] */, dtype="int32") /* ty=Tensor[(3, 56), int32] */;
    %624 = reshape(%622, newshape=[]) /* ty=int32 */;
    %625 = reshape(%623, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int32] */;
    %626 = @func_703(%624, %625) /* ty=(Tensor[(7, 12, 2), bool],) */;
    %627 = @func_2979() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32]) */;
    %628 = %627.0;
    %629 = cast(%628, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
    %630 = sqrt(%629) /* ty=Tensor[(10, 9, 6), float32] */;
    %631 = cast(%630, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
    %632 = cast(%var_3043, dtype="uint16") /* ty=uint16 */;
    %633 = cast(meta[relay.Constant][41] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %634 = reshape(%632, newshape=[]) /* ty=uint16 */;
    %635 = reshape(%633, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), uint16] */;
    %636 = @func_75(%634, %635) /* ty=(Tensor[(4, 3, 15), uint16],) */;
    %637 = %621.0;
    %638 = @func_2551() /* ty=Tensor[(10, 9, 6), float32] */;
    %639 = %626.0;
    %640 = log2(%631) /* ty=Tensor[(10, 9, 6), float64] */;
    %641 = %636.0;
    (%637, %638, %639, %var_3043, meta[relay.Constant][40] /* ty=Tensor[(3, 56), int32] */, %640, %641, meta[relay.Constant][41] /* ty=Tensor[(180), uint16] */)
  };
  %642(%var_3069) /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32], Tensor[(7, 12, 2), bool], int32, Tensor[(3, 56), int32], Tensor[(10, 9, 6), float64], Tensor[(4, 3, 15), uint16], Tensor[(180), uint16]) */
}

def @func_3674() -> Tensor[(10, 9, 6), float32] {
  @func_3672() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_4509() -> Tensor[(10, 9, 6), float32] {
  @func_4507() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_7643() -> Tensor[(10, 9, 6), bool] {
  %644 = fn () -> Tensor[(10, 9, 6), bool] {
    %643 = @func_5753() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float64], Tensor[(10, 9, 6), bool]) */;
    %643.2
  };
  %644() /* ty=Tensor[(10, 9, 6), bool] */
}

def @func_4910(%var_4891: Tensor[(160), bool], %var_4903: Tensor[(15, 3, 14), uint16]) -> (Tensor[(7, 2, 7), uint32], Tensor[(8, 2, 10), uint8], Tensor[(160), bool], Tensor[(10, 9, 6), float64], Tensor[(15, 3, 14), bool]) {
  %645 = cast(%var_4891, dtype="bool") /* ty=Tensor[(160), bool] */;
  %646 = cast(%var_4891, dtype="bool") /* ty=Tensor[(160), bool] */;
  %647 = reshape(%645, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %648 = reshape(%646, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %649 = @func_1005(%647, %648) /* ty=(Tensor[(8, 2, 10), uint8], Tensor[(8, 2, 10), int8]) */;
  %650 = @func_3923() /* ty=(uint16, Tensor[(10, 9, 6), float32]) */;
  %651 = %650.0;
  %652 = cast(%651, dtype="bool") /* ty=bool */;
  %653 = cast(%var_4903, dtype="bool") /* ty=Tensor[(15, 3, 14), bool] */;
  %654 = @func_3825() /* ty=Tensor[(7, 2, 7), uint32] */;
  %655 = %649.0;
  %656 = @func_3788() /* ty=Tensor[(10, 9, 6), float64] */;
  %657 = logical_or(%652, %653) /* ty=Tensor[(15, 3, 14), bool] */;
  (%654, %655, %var_4891, %656, %657)
}

def @func_3342() -> (Tensor[(10, 9, 6), float32],) {
  @func_3340() /* ty=(Tensor[(10, 9, 6), float32],) */
}

def @func_1833(%var_1826: Tensor[(10, 9, 6), float32]) -> (Tensor[(10, 9, 6), bool],) {
  %658 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %659 = %658.0;
  %660 = cast(%var_1826, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
  %661 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%659, dtype="bool") /* ty=Tensor[(10, 9, 6), bool] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %664 = equal(%662, %663) /* ty=Tensor[(10, 9, 6), bool] */;
  (%664,)
}

def @func_5023() -> (Tensor[(4, 2, 10), bool],) {
  %665 = @func_4709() /* ty=(Tensor[(4, 2, 10), float64],) */;
  %666 = %665.0;
  %667 = cast(%666, dtype="float64") /* ty=Tensor[(4, 2, 10), float64] */;
  %668 = sqrt(%667) /* ty=Tensor[(4, 2, 10), float64] */;
  %669 = cast(%666, dtype="bool") /* ty=Tensor[(4, 2, 10), bool] */;
  %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%668, dtype="bool") /* ty=Tensor[(4, 2, 10), bool] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %673 = greater_equal(%671, %672) /* ty=Tensor[(4, 2, 10), bool] */;
  (%673,)
}

def @func_7487() -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) {
  %679 = fn () -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) {
    %674 = @func_6973() /* ty=(Tensor[(10, 9, 6), float32],) */;
    %675 = @func_6493() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(13, 4, 8), float32]) */;
    %676 = %674.0;
    %677 = @func_3672() /* ty=Tensor[(10, 9, 6), float32] */;
    %678 = %675.0;
    (%676, %677, %678)
  };
  %679() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) */
}

def @func_2597(%var_2595: Tensor[(416, 1), float64]) -> (Tensor[(10, 9, 6), float64], Tensor[(10, 2, 15), float64], Tensor[(300), float64], Tensor[(13, 4, 8), float64], Tensor[(416, 1), float64]) {
  @func_2594(%var_2595) /* ty=(Tensor[(10, 9, 6), float64], Tensor[(10, 2, 15), float64], Tensor[(300), float64], Tensor[(13, 4, 8), float64], Tensor[(416, 1), float64]) */
}

def @func_3710() -> Tensor[(10, 9, 6), float32] {
  %680 = @func_3387() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %680.0
}

def @func_2681(%var_2680: Tensor[(300), float64]) -> Tensor[(300), int16] {
  %687 = fn (%var_2655: Tensor[(300), float64]) -> Tensor[(300), int16] {
    %681 = @func_2334() /* ty=(Tensor[(14, 16, 12), float32], Tensor[(10, 2, 15), float64], Tensor[(300), float64], Tensor[(10, 9, 6), bool], Tensor[(540), float32], Tensor[(4, 2, 10), float64], Tensor[(80), float32], Tensor[(14, 16, 12), float64]) */;
    %682 = %681.2;
    %683 = cast(%var_2655, dtype="int16") /* ty=Tensor[(300), int16] */;
    %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(1), int32] */;
    %685 = cast(%682, dtype="int16") /* ty=Tensor[(300), int16] */;
    %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?), int16] */;
    logical_xor(%685, %686) /* ty=Tensor[(300), int16] */
  };
  %687(%var_2680) /* ty=Tensor[(300), int16] */
}

def @func_2981() -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32]) {
  @func_2979() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32]) */
}

def @func_75(%var_70: uint16, %var_71: Tensor[(4, 3, 15), uint16]) -> (Tensor[(4, 3, 15), uint16],) {
  %688 = cast(%var_70, dtype="uint16") /* ty=uint16 */;
  %689 = cast(%var_71, dtype="uint16") /* ty=Tensor[(4, 3, 15), uint16] */;
  %690 = right_shift(%688, %689) /* ty=Tensor[(4, 3, 15), uint16] */;
  (%690,)
}

def @func_3227(%var_3225: Tensor[(11, 3, 14), uint8], %var_3226: Tensor[(11, 3, 14), uint8]) -> (Tensor[(11, 3, 14), uint8],) {
  @func_3223(%var_3225, %var_3226) /* ty=(Tensor[(11, 3, 14), uint8],) */
}

def @func_4036(%var_4024: Tensor[(1, 14, 7), float32]) -> (Tensor[(1, 14, 7), float32],) {
  %691 = cast(%var_4024, dtype="float32") /* ty=Tensor[(1, 14, 7), float32] */;
  %692 = atan(%691) /* ty=Tensor[(1, 14, 7), float32] */;
  (%692,)
}

def @func_5282(%var_5280: uint16) -> (Tensor[(10, 9, 6), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32]) {
  @func_5279(%var_5280) /* ty=(Tensor[(10, 9, 6), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32]) */
}

def @func_5713() -> (Tensor[(10, 9, 6), float32],) {
  %695 = fn () -> (Tensor[(10, 9, 6), float32],) {
    %693 = @func_3941() /* ty=(Tensor[(10, 9, 6), float32],) */;
    %694 = %693.0;
    (%694,)
  };
  %695() /* ty=(Tensor[(10, 9, 6), float32],) */
}

def @func_2553() -> Tensor[(10, 9, 6), float32] {
  @func_2551() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_5924() -> Tensor[(10, 9, 6), float32] {
  %696 = fn () -> Tensor[(10, 9, 6), float32] {
    @func_2551() /* ty=Tensor[(10, 9, 6), float32] */
  };
  %696() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_6684() -> Tensor[(10, 9, 6), float32] {
  %698 = fn () -> Tensor[(10, 9, 6), float32] {
    %697 = @func_3387() /* ty=(Tensor[(10, 9, 6), float32],) */;
    %697.0
  };
  %698() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_2054() -> (Tensor[(10, 9, 6), float64],) {
  %701 = fn () -> (Tensor[(10, 9, 6), float64],) {
    %699 = @func_1993() /* ty=(Tensor[(10, 9, 6), float64],) */;
    %700 = %699.0;
    (%700,)
  };
  %701() /* ty=(Tensor[(10, 9, 6), float64],) */
}

def @func_3687() -> (Tensor[(13, 11, 3), bool],) {
  %705 = fn () -> (Tensor[(13, 11, 3), bool],) {
    %702 = cast(-5.81703f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
    %703 = cast(meta[relay.Constant][42] /* ty=Tensor[(13, 11, 3), float64] */, dtype="bool") /* ty=Tensor[(13, 11, 3), bool] */;
    %704 = less_equal(%702, %703) /* ty=Tensor[(13, 11, 3), bool] */;
    (%704,)
  };
  %705() /* ty=(Tensor[(13, 11, 3), bool],) */
}

def @func_5733() -> (Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32]) {
  %706 = @func_3571() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) */;
  %707 = @func_3571() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) */;
  %708 = %706.1;
  %709 = %707.0;
  (%708, %709)
}

def @func_4864(%var_4862: Tensor[(4, 1, 6), float64]) -> (Tensor[(4, ?, 6), int64], Tensor[(5, 7, 14), int16], Tensor[(1, 7), int16]) {
  @func_4861(%var_4862) /* ty=(Tensor[(4, ?, 6), int64], Tensor[(5, 7, 14), int16], Tensor[(1, 7), int16]) */
}

def @func_4984() -> Tensor[(10, 9, 6), float32] {
  %710 = @func_3340() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %710.0
}

def @func_6526(%var_6505: int32) -> (Tensor[(10, 9, 6), float32], Tensor[(168), int32], int32, Tensor[(168), int32]) {
  %711 = @func_5063() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %712 = cast(%var_6505, dtype="int32") /* ty=int32 */;
  %713 = cast(meta[relay.Constant][43] /* ty=Tensor[(168), int32] */, dtype="int32") /* ty=Tensor[(168), int32] */;
  %714 = reshape(%712, newshape=[]) /* ty=int32 */;
  %715 = reshape(%713, newshape=[168]) /* ty=Tensor[(168), int32] */;
  %716 = @func_4466(%714, %715) /* ty=(Tensor[(10, 9, 6), float64], Tensor[(7, 12, 2), bool], int32, Tensor[(168), int32]) */;
  %717 = %711.0;
  %718 = %716.3;
  (%717, %718, %var_6505, meta[relay.Constant][43] /* ty=Tensor[(168), int32] */)
}

def @func_3839() -> Tensor[(10, 9, 6), float32] {
  %719 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %719.0
}

def @func_2209() -> Tensor[(10, 9, 6), float64] {
  %720 = @func_1993() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %720.0
}

def @func_2816(%var_2814: Tensor[(4, 15, 13), uint64]) -> (Tensor[(4, 15, 13), bool], Tensor[(4, 2, 10), float64]) {
  @func_2813(%var_2814) /* ty=(Tensor[(4, 15, 13), bool], Tensor[(4, 2, 10), float64]) */
}

def @func_5065() -> (Tensor[(10, 9, 6), float32],) {
  @func_5063() /* ty=(Tensor[(10, 9, 6), float32],) */
}

def @func_777(%var_775: Tensor[(4, 2, 10), float32], %var_776: Tensor[(4, 2, 10), float32]) -> (Tensor[(4, 2, 10), int8], Tensor[(4, 2, 10), float64]) {
  %733 = fn (%var_752: Tensor[(4, 2, 10), float32], %var_764: Tensor[(4, 2, 10), float32]) -> (Tensor[(4, 2, 10), int8], Tensor[(4, 2, 10), float64]) {
    %721 = cast(%var_752, dtype="float32") /* ty=Tensor[(4, 2, 10), float32] */;
    %722 = rsqrt(%721) /* ty=Tensor[(4, 2, 10), float32] */;
    %723 = cast(%var_752, dtype="int8") /* ty=Tensor[(4, 2, 10), int8] */;
    %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(3), int32] */;
    %725 = cast(%722, dtype="int8") /* ty=Tensor[(4, 2, 10), int8] */;
    %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %727 = cast(%var_764, dtype="float64") /* ty=Tensor[(4, 2, 10), float64] */;
    %728 = shape_of(%var_752, dtype="int32") /* ty=Tensor[(3), int32] */;
    %729 = cast(%var_752, dtype="float64") /* ty=Tensor[(4, 2, 10), float64] */;
    %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %731 = minimum(%725, %726) /* ty=Tensor[(4, 2, 10), int8] */;
    %732 = power(%729, %730) /* ty=Tensor[(4, 2, 10), float64] */;
    (%731, %732)
  };
  %733(%var_775, %var_776) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(4, 2, 10), float64]) */
}

def @func_3429() -> (Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(20, 4), float32], Tensor[(10, 9, 6), bool]) {
  @func_3427() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(20, 4), float32], Tensor[(10, 9, 6), bool]) */
}

def @func_2695() -> Tensor[(10, 9, 6), float64] {
  @func_2209() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_6000() -> Tensor[(10, 9, 6), float64] {
  @func_5998() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_5780() -> (Tensor[(10, 9, 6), float64],) {
  @func_5778() /* ty=(Tensor[(10, 9, 6), float64],) */
}

def @func_2022(%var_2020: Tensor[(10, 9, 6), float64]) -> Tensor[(10, 9, 6), bool] {
  @func_2019(%var_2020) /* ty=Tensor[(10, 9, 6), bool] */
}

def @func_3841() -> Tensor[(10, 9, 6), float32] {
  @func_3839() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_7106() -> (Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(4, 15, 13), bool], Tensor[(780), uint64], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), bool]) {
  %734 = @func_6418() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float64]) */;
  %735 = @func_5712() /* ty=(Tensor[(10, 9, 6), float32],) */;
  %736 = @func_2171() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), uint64], Tensor[(416), float64]) */;
  %737 = @func_6963() /* ty=(Tensor[(4, 2, 10), float64], Tensor[(10, 9, 6), float32]) */;
  %738 = cast(meta[relay.Constant][44] /* ty=Tensor[(780), uint64] */, dtype="uint64") /* ty=Tensor[(780), uint64] */;
  %739 = reshape(%738, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), uint64] */;
  %740 = @func_2813(%739) /* ty=(Tensor[(4, 15, 13), bool], Tensor[(4, 2, 10), float64]) */;
  %741 = @func_5815() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32], Tensor[(840), float32]) */;
  %742 = @func_3901() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), bool], Tensor[(10, 9, 6), bool]) */;
  %743 = %734.0;
  %744 = @func_3788() /* ty=Tensor[(10, 9, 6), float64] */;
  %745 = %735.0;
  %746 = %736.0;
  %747 = %737.0;
  %748 = %740.0;
  %749 = %741.0;
  %750 = @func_6369() /* ty=Tensor[(10, 9, 6), float64] */;
  %751 = %742.2;
  (%743, %744, %745, %746, %747, %748, meta[relay.Constant][44] /* ty=Tensor[(780), uint64] */, %749, %750, %751)
}

def @func_7438() -> (Tensor[(10, 9, 6), float32], Tensor[(14, 16, 12), float64]) {
  @func_7436() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(14, 16, 12), float64]) */
}

def @func_7108() -> (Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(4, 15, 13), bool], Tensor[(780), uint64], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), bool]) {
  @func_7106() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(4, 15, 13), bool], Tensor[(780), uint64], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), bool]) */
}

def @func_6418() -> (Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float64]) {
  %752 = @func_2171() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), uint64], Tensor[(416), float64]) */;
  %753 = @func_5659() /* ty=Tensor[(13, 4, 8), float64] */;
  %754 = cast(%753, dtype="float64") /* ty=Tensor[(13, 4, 8), float64] */;
  %755 = %752.0;
  %756 = asin(%754) /* ty=Tensor[(13, 4, 8), float64] */;
  (%755, %756)
}

def @func_7595() -> (Tensor[(10, 9, 6), float32],) {
  %757 = @func_2783() /* ty=Tensor[(10, 9, 6), float32] */;
  (%757,)
}

def @func_6655(%var_6597: Tensor[(2, 16, 7), float64], %var_6615: Tensor[(98), float32]) -> (Tensor[(2, 16, 7), float64], Tensor[(2, 16, 7), float64], Tensor[(1, 14, 7), float32], Tensor[(98), float32], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) {
  %758 = cast(%var_6597, dtype="float64") /* ty=Tensor[(2, 16, 7), float64] */;
  %759 = cast(%var_6597, dtype="float64") /* ty=Tensor[(2, 16, 7), float64] */;
  %760 = cast(%var_6615, dtype="float32") /* ty=Tensor[(98), float32] */;
  %761 = reshape(%760, newshape=[1, 14, 7]) /* ty=Tensor[(1, 14, 7), float32] */;
  %762 = @func_4036(%761) /* ty=(Tensor[(1, 14, 7), float32],) */;
  %763 = sinh(%758) /* ty=Tensor[(2, 16, 7), float64] */;
  %764 = cos(%759) /* ty=Tensor[(2, 16, 7), float64] */;
  %765 = %762.0;
  %766 = @func_2783() /* ty=Tensor[(10, 9, 6), float32] */;
  %767 = @func_5998() /* ty=Tensor[(10, 9, 6), float64] */;
  (%763, %764, %765, %var_6615, %766, %767)
}

def @func_5134() -> (Tensor[(10, 9, 6), float32],) {
  %769 = fn () -> (Tensor[(10, 9, 6), float32],) {
    %768 = @func_4212() /* ty=Tensor[(10, 9, 6), float32] */;
    (%768,)
  };
  %769() /* ty=(Tensor[(10, 9, 6), float32],) */
}

def @func_8220() -> Tensor[(10, 9, 6), float32] {
  %771 = fn () -> Tensor[(10, 9, 6), float32] {
    %770 = @func_3340() /* ty=(Tensor[(10, 9, 6), float32],) */;
    %770.0
  };
  %771() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_7306(%var_7304: Tensor[(224), float64], %var_7305: Tensor[(98), float32]) -> (Tensor[(10, 9, 6), float32], Tensor[(2, 112), float64], Tensor[(224), float64], Tensor[(98), float64], Tensor[(180), uint16], Tensor[(840), float32], Tensor[(10, 9, 6), float32]) {
  @func_7302(%var_7304, %var_7305) /* ty=(Tensor[(10, 9, 6), float32], Tensor[(2, 112), float64], Tensor[(224), float64], Tensor[(98), float64], Tensor[(180), uint16], Tensor[(840), float32], Tensor[(10, 9, 6), float32]) */
}

def @func_714(%var_709: Tensor[(10, 2, 15), float64]) -> (Tensor[(10, 2, 15), float64],) {
  %772 = cast(%var_709, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
  %773 = sqrt(%772) /* ty=Tensor[(10, 2, 15), float64] */;
  (%773,)
}

def @func_7991() -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32]) {
  %774 = @func_2979() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float32]) */;
  %775 = %774.0;
  %776 = @func_2551() /* ty=Tensor[(10, 9, 6), float32] */;
  (%775, %776)
}

def @func_5063() -> (Tensor[(10, 9, 6), float32],) {
  %777 = @func_3672() /* ty=Tensor[(10, 9, 6), float32] */;
  (%777,)
}

def @func_2905(%var_2902: int8, %var_2903: Tensor[(8, 14, 14), int8], %var_2904: Tensor[(12, 70), float32]) -> (Tensor[(8, 14, 14), int8], Tensor[(10, 9, 6), float64], Tensor[(168), int32], Tensor[(12, 70), float32], Tensor[(312), float32]) {
  @func_2900(%var_2902, %var_2903, %var_2904) /* ty=(Tensor[(8, 14, 14), int8], Tensor[(10, 9, 6), float64], Tensor[(168), int32], Tensor[(12, 70), float32], Tensor[(312), float32]) */
}

def @func_3924() -> (uint16, Tensor[(10, 9, 6), float32]) {
  %782 = fn () -> (uint16, Tensor[(10, 9, 6), float32]) {
    %778 = @func_2839() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) */;
    %779 = @func_3387() /* ty=(Tensor[(10, 9, 6), float32],) */;
    %780 = %778.2;
    %781 = %779.0;
    (%780, %781)
  };
  %782() /* ty=(uint16, Tensor[(10, 9, 6), float32]) */
}

def @func_3790() -> Tensor[(10, 9, 6), float64] {
  @func_3788() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_4212() -> Tensor[(10, 9, 6), float32] {
  @func_1847() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_4343(%var_4341: Tensor[(840), float32]) -> (Tensor[(10, 9, 6), float32], Tensor[(168), int32], int8, Tensor[(784, 2), int8], Tensor[(840), float32]) {
  @func_4340(%var_4341) /* ty=(Tensor[(10, 9, 6), float32], Tensor[(168), int32], int8, Tensor[(784, 2), int8], Tensor[(840), float32]) */
}

def @func_8061() -> (Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32]) {
  %783 = @func_5753() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float64], Tensor[(10, 9, 6), bool]) */;
  %784 = %783.0;
  %785 = @func_4507() /* ty=Tensor[(10, 9, 6), float32] */;
  (%784, %785)
}

def @func_4495(%var_4493: Tensor[(160), bool]) -> (Tensor[(10, 9, 6), float64], Tensor[(8, 2, 10), int8], Tensor[(160), bool]) {
  @func_4492(%var_4493) /* ty=(Tensor[(10, 9, 6), float64], Tensor[(8, 2, 10), int8], Tensor[(160), bool]) */
}

def @func_8423() -> (Tensor[(12, 15, 2), bool], Tensor[(4, 2, 10), float64]) {
  %790 = fn () -> (Tensor[(12, 15, 2), bool], Tensor[(4, 2, 10), float64]) {
    %786 = @func_4678() /* ty=(Tensor[(12, 15, 2), bool],) */;
    %787 = @func_4620() /* ty=(Tensor[(4, 2, 10), float64],) */;
    %788 = %786.0;
    %789 = %787.0;
    (%788, %789)
  };
  %790() /* ty=(Tensor[(12, 15, 2), bool], Tensor[(4, 2, 10), float64]) */
}

def @func_3712() -> Tensor[(10, 9, 6), float32] {
  @func_3710() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_7180(%var_7152: Tensor[(2, 112), float64], %var_7153: Tensor[(98), float32]) -> (Tensor[(10, 9, 6), float64], Tensor[(1, 14, 7), float32], Tensor[(2, 112), float64], Tensor[(98), float32], Tensor[(13, 11, 3), uint16], Tensor[(13, 11, 3), int64]) {
  %791 = @func_5733() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32]) */;
  %792 = cast(%var_7152, dtype="float64") /* ty=Tensor[(2, 112), float64] */;
  %793 = cast(%var_7153, dtype="float32") /* ty=Tensor[(98), float32] */;
  %794 = reshape(%792, newshape=[2, 16, 7]) /* ty=Tensor[(2, 16, 7), float64] */;
  %795 = reshape(%793, newshape=[98]) /* ty=Tensor[(98), float32] */;
  %796 = @func_6655(%794, %795) /* ty=(Tensor[(2, 16, 7), float64], Tensor[(2, 16, 7), float64], Tensor[(1, 14, 7), float32], Tensor[(98), float32], Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), float64]) */;
  %797 = @func_4571() /* ty=(Tensor[(13, 11, 3), float64], Tensor[(10, 9, 6), float32]) */;
  %798 = %797.0;
  %799 = cast(%798, dtype="float64") /* ty=Tensor[(13, 11, 3), float64] */;
  %800 = sqrt(%799) /* ty=Tensor[(13, 11, 3), float64] */;
  %801 = cast(%800, dtype="float64") /* ty=Tensor[(13, 11, 3), float64] */;
  %802 = log(%801) /* ty=Tensor[(13, 11, 3), float64] */;
  %803 = cast(%802, dtype="uint16") /* ty=Tensor[(13, 11, 3), uint16] */;
  %804 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(%800, dtype="uint16") /* ty=Tensor[(13, 11, 3), uint16] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %807 = cast(%800, dtype="int64") /* ty=Tensor[(13, 11, 3), int64] */;
  %808 = shape_of(%802, dtype="int32") /* ty=Tensor[(3), int32] */;
  %809 = cast(%802, dtype="int64") /* ty=Tensor[(13, 11, 3), int64] */;
  %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %811 = %791.0;
  %812 = %796.2;
  %813 = left_shift(%805, %806) /* ty=Tensor[(13, 11, 3), uint16] */;
  %814 = bitwise_xor(%809, %810) /* ty=Tensor[(13, 11, 3), int64] */;
  (%811, %812, %var_7152, %var_7153, %813, %814)
}

def @func_247(%var_245: Tensor[(6, 4, 13), float32], %var_246: uint16) -> (Tensor[(6, 4, 13), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) {
  %823 = fn (%var_213: Tensor[(6, 4, 13), float32], %var_229: uint16) -> (Tensor[(6, 4, 13), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) {
    %815 = cast(%var_213, dtype="float32") /* ty=Tensor[(6, 4, 13), float32] */;
    %816 = cast(%var_229, dtype="uint16") /* ty=uint16 */;
    %817 = cast(meta[relay.Constant][45] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %818 = reshape(%816, newshape=[]) /* ty=uint16 */;
    %819 = reshape(%817, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), uint16] */;
    %820 = @func_75(%818, %819) /* ty=(Tensor[(4, 3, 15), uint16],) */;
    %821 = log(%815) /* ty=Tensor[(6, 4, 13), float32] */;
    %822 = %820.0;
    (%821, %822, %var_229, meta[relay.Constant][45] /* ty=Tensor[(180), uint16] */)
  };
  %823(%var_245, %var_246) /* ty=(Tensor[(6, 4, 13), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16]) */
}

def @func_7941() -> (Tensor[(10, 9, 6), float64],) {
  %826 = fn () -> (Tensor[(10, 9, 6), float64],) {
    %824 = @func_7524() /* ty=(Tensor[(10, 9, 6), float64],) */;
    %825 = %824.0;
    (%825,)
  };
  %826() /* ty=(Tensor[(10, 9, 6), float64],) */
}

def @func_1781(%var_1771: Tensor[(13, 4, 8), float64], %var_1772: Tensor[(13, 4, 8), float64]) -> (Tensor[(13, 4, 8), float64], Tensor[(13, 4, 8), uint64]) {
  %827 = cast(%var_1772, dtype="float64") /* ty=Tensor[(13, 4, 8), float64] */;
  %828 = shape_of(%var_1771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(%var_1771, dtype="float64") /* ty=Tensor[(13, 4, 8), float64] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %831 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 4, 8), float64] */, dtype="uint64") /* ty=Tensor[(13, 4, 8), uint64] */;
  %832 = shape_of(%var_1772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %833 = cast(%var_1772, dtype="uint64") /* ty=Tensor[(13, 4, 8), uint64] */;
  %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %835 = subtract(%829, %830) /* ty=Tensor[(13, 4, 8), float64] */;
  %836 = logical_xor(%833, %834) /* ty=Tensor[(13, 4, 8), uint64] */;
  (%835, %836)
}

def @func_4621() -> (Tensor[(4, 2, 10), float64],) {
  %841 = fn () -> (Tensor[(4, 2, 10), float64],) {
    %837 = @func_3427() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(4, 2, 10), float64], Tensor[(20, 4), float32], Tensor[(10, 9, 6), bool]) */;
    %838 = %837.1;
    %839 = cast(%838, dtype="float64") /* ty=Tensor[(4, 2, 10), float64] */;
    %840 = log10(%839) /* ty=Tensor[(4, 2, 10), float64] */;
    (%840,)
  };
  %841() /* ty=(Tensor[(4, 2, 10), float64],) */
}

def @func_2900(%var_2864: int8, %var_2865: Tensor[(8, 14, 14), int8], %var_2888: Tensor[(12, 70), float32]) -> (Tensor[(8, 14, 14), int8], Tensor[(10, 9, 6), float64], Tensor[(168), int32], Tensor[(12, 70), float32], Tensor[(312), float32]) {
  %842 = cast(%var_2864, dtype="int8") /* ty=int8 */;
  %843 = cast(%var_2865, dtype="int8") /* ty=Tensor[(8, 14, 14), int8] */;
  %844 = @func_2733() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %845 = cast(%var_2888, dtype="float32") /* ty=Tensor[(12, 70), float32] */;
  %846 = cast(meta[relay.Constant][47] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %847 = reshape(%845, newshape=[15, 4, 14]) /* ty=Tensor[(15, 4, 14), float32] */;
  %848 = reshape(%846, newshape=[312]) /* ty=Tensor[(312), float32] */;
  %849 = @func_1179(%847, %848) /* ty=(Tensor[(4, 2, 10), int8], Tensor[(20, 4), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16], Tensor[(7, 12, 2), bool], Tensor[(168), int32], Tensor[(4, 3, 15), uint16], Tensor[(312), float32], Tensor[(15, 4, 14), float32]) */;
  %850 = bitwise_xor(%842, %843) /* ty=Tensor[(8, 14, 14), int8] */;
  %851 = %844.0;
  %852 = %849.6;
  (%850, %851, %852, %var_2888, meta[relay.Constant][47] /* ty=Tensor[(312), float32] */)
}

def @func_2697() -> Tensor[(10, 9, 6), float64] {
  @func_2695() /* ty=Tensor[(10, 9, 6), float64] */
}

def @func_5660() -> Tensor[(13, 4, 8), float64] {
  %856 = fn () -> Tensor[(13, 4, 8), float64] {
    %853 = @func_2171() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), uint64], Tensor[(416), float64]) */;
    %854 = %853.1;
    %855 = cast(%854, dtype="float64") /* ty=Tensor[(13, 4, 8), float64] */;
    atan(%855) /* ty=Tensor[(13, 4, 8), float64] */
  };
  %856() /* ty=Tensor[(13, 4, 8), float64] */
}

def @func_7760(%var_7758: Tensor[(4, 1, 16), int64], %var_7759: Tensor[(4, 16, 16), int64]) -> Tensor[(4, 16, 16), bool] {
  %859 = fn (%var_7743: Tensor[(4, 1, 16), int64], %var_7744: Tensor[(4, 16, 16), int64]) -> Tensor[(4, 16, 16), bool] {
    %857 = cast(%var_7743, dtype="bool") /* ty=Tensor[(4, 1, 16), bool] */;
    %858 = cast(%var_7744, dtype="bool") /* ty=Tensor[(4, 16, 16), bool] */;
    equal(%857, %858) /* ty=Tensor[(4, 16, 16), bool] */
  };
  %859(%var_7758, %var_7759) /* ty=Tensor[(4, 16, 16), bool] */
}

def @func_4492(%var_4487: Tensor[(160), bool]) -> (Tensor[(10, 9, 6), float64], Tensor[(8, 2, 10), int8], Tensor[(160), bool]) {
  %860 = @func_1993() /* ty=(Tensor[(10, 9, 6), float64],) */;
  %861 = cast(%var_4487, dtype="bool") /* ty=Tensor[(160), bool] */;
  %862 = cast(%var_4487, dtype="bool") /* ty=Tensor[(160), bool] */;
  %863 = reshape(%861, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %864 = reshape(%862, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %865 = @func_1005(%863, %864) /* ty=(Tensor[(8, 2, 10), uint8], Tensor[(8, 2, 10), int8]) */;
  %866 = %860.0;
  %867 = %865.1;
  (%866, %867, %var_4487)
}

def @func_7416() -> Tensor[(10, 9, 6), float32] {
  %869 = fn () -> Tensor[(10, 9, 6), float32] {
    %868 = @func_5133() /* ty=(Tensor[(10, 9, 6), float32],) */;
    %868.0
  };
  %869() /* ty=Tensor[(10, 9, 6), float32] */
}

def @func_5755() -> (Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float64], Tensor[(10, 9, 6), bool]) {
  @func_5753() /* ty=(Tensor[(10, 9, 6), float64], Tensor[(13, 4, 8), float64], Tensor[(10, 9, 6), bool]) */
}

def @func_7184(%var_7182: Tensor[(2, 112), float64], %var_7183: Tensor[(98), float32]) -> (Tensor[(10, 9, 6), float64], Tensor[(1, 14, 7), float32], Tensor[(2, 112), float64], Tensor[(98), float32], Tensor[(13, 11, 3), uint16], Tensor[(13, 11, 3), int64]) {
  @func_7180(%var_7182, %var_7183) /* ty=(Tensor[(10, 9, 6), float64], Tensor[(1, 14, 7), float32], Tensor[(2, 112), float64], Tensor[(98), float32], Tensor[(13, 11, 3), uint16], Tensor[(13, 11, 3), int64]) */
}

def @func_3902() -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), bool], Tensor[(10, 9, 6), bool]) {
  %879 = fn () -> (Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), bool], Tensor[(10, 9, 6), bool]) {
    %870 = @func_1737() /* ty=(Tensor[(10, 9, 6), float32],) */;
    %871 = %870.0;
    %872 = cast(%871, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
    %873 = reshape(%872, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
    %874 = @func_1833(%873) /* ty=(Tensor[(10, 9, 6), bool],) */;
    %875 = %874.0;
    %876 = cast(%875, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
    %877 = reshape(%876, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
    %878 = @func_3486(%877) /* ty=Tensor[(10, 9, 6), bool] */;
    (%871, %875, %878)
  };
  %879() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), bool], Tensor[(10, 9, 6), bool]) */
}

def @func_6892(%var_6890: Tensor[(24), float64]) -> (uint16, Tensor[(1, 7), int16], Tensor[(24), float64]) {
  @func_6889(%var_6890) /* ty=(uint16, Tensor[(1, 7), int16], Tensor[(24), float64]) */
}

def @func_4778(%var_4775: int64, %var_4776: Tensor[(5, 2, 13), int64], %var_4777: Tensor[(540), float32]) -> (Tensor[(5, 2, 13), bool], Tensor[(10, 9, 6), bool], Tensor[(540), float32]) {
  %886 = fn (%var_4749: int64, %var_4750: Tensor[(5, 2, 13), int64], %var_4757: Tensor[(540), float32]) -> (Tensor[(5, 2, 13), bool], Tensor[(10, 9, 6), bool], Tensor[(540), float32]) {
    %880 = cast(%var_4749, dtype="bool") /* ty=bool */;
    %881 = cast(%var_4750, dtype="bool") /* ty=Tensor[(5, 2, 13), bool] */;
    %882 = cast(%var_4757, dtype="float32") /* ty=Tensor[(540), float32] */;
    %883 = reshape(%882, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float32] */;
    %884 = greater_equal(%880, %881) /* ty=Tensor[(5, 2, 13), bool] */;
    %885 = @func_3486(%883) /* ty=Tensor[(10, 9, 6), bool] */;
    (%884, %885, %var_4757)
  };
  %886(%var_4775, %var_4776, %var_4777) /* ty=(Tensor[(5, 2, 13), bool], Tensor[(10, 9, 6), bool], Tensor[(540), float32]) */
}

def @func_5279(%var_5255: uint16) -> (Tensor[(10, 9, 6), float32], Tensor[(4, 3, 15), uint16], uint16, Tensor[(180), uint16], Tensor[(10, 9, 6), float64], Tensor[(10, 9, 6), float32]) {
  %887 = cast(%var_5255, dtype="uint16") /* ty=uint16 */;
  %888 = cast(meta[relay.Constant][48] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %889 = reshape(%887, newshape=[]) /* ty=uint16 */;
  %890 = reshape(%888, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), uint16] */;
  %891 = @func_75(%889, %890) /* ty=(Tensor[(4, 3, 15), uint16],) */;
  %892 = @func_4507() /* ty=Tensor[(10, 9, 6), float32] */;
  %893 = %891.0;
  %894 = @func_2209() /* ty=Tensor[(10, 9, 6), float64] */;
  %895 = @func_4984() /* ty=Tensor[(10, 9, 6), float32] */;
  (%892, %893, %var_5255, meta[relay.Constant][48] /* ty=Tensor[(180), uint16] */, %894, %895)
}

def @func_8616(%var_8615: Tensor[(10, 9, 6), float64]) -> (Tensor[(10, 9, 6), uint8], Tensor[(10, 9, 6), bool], Tensor[(10, 9, 6), float32]) {
  %907 = fn (%var_8568: Tensor[(10, 9, 6), float64]) -> (Tensor[(10, 9, 6), uint8], Tensor[(10, 9, 6), bool], Tensor[(10, 9, 6), float32]) {
    %896 = @func_5778() /* ty=(Tensor[(10, 9, 6), float64],) */;
    %897 = %896.0;
    %898 = cast(%var_8568, dtype="uint8") /* ty=Tensor[(10, 9, 6), uint8] */;
    %899 = shape_of(%897, dtype="int32") /* ty=Tensor[(3), int32] */;
    %900 = cast(%897, dtype="uint8") /* ty=Tensor[(10, 9, 6), uint8] */;
    %901 = dyn.reshape(%898, %899, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %902 = cast(%897, dtype="float64") /* ty=Tensor[(10, 9, 6), float64] */;
    %903 = reshape(%902, newshape=[10, 9, 6]) /* ty=Tensor[(10, 9, 6), float64] */;
    %904 = logical_xor(%900, %901) /* ty=Tensor[(10, 9, 6), uint8] */;
    %905 = @func_2019(%903) /* ty=Tensor[(10, 9, 6), bool] */;
    %906 = @func_6683() /* ty=Tensor[(10, 9, 6), float32] */;
    (%904, %905, %906)
  };
  %907(%var_8615) /* ty=(Tensor[(10, 9, 6), uint8], Tensor[(10, 9, 6), bool], Tensor[(10, 9, 6), float32]) */
}

def @func_6964() -> (Tensor[(4, 2, 10), float64], Tensor[(10, 9, 6), float32]) {
  %912 = fn () -> (Tensor[(4, 2, 10), float64], Tensor[(10, 9, 6), float32]) {
    %908 = @func_4620() /* ty=(Tensor[(4, 2, 10), float64],) */;
    %909 = @func_3387() /* ty=(Tensor[(10, 9, 6), float32],) */;
    %910 = %908.0;
    %911 = %909.0;
    (%910, %911)
  };
  %912() /* ty=(Tensor[(4, 2, 10), float64], Tensor[(10, 9, 6), float32]) */
}

def @func_7874() -> (Tensor[(10, 9, 6), bool],) {
  %913 = @func_3901() /* ty=(Tensor[(10, 9, 6), float32], Tensor[(10, 9, 6), bool], Tensor[(10, 9, 6), bool]) */;
  %914 = %913.2;
  (%914,)
}

def @func_7876() -> (Tensor[(10, 9, 6), bool],) {
  @func_7874() /* ty=(Tensor[(10, 9, 6), bool],) */
}

def @func_4290(%var_4287: Tensor[(10, 9, 6), float32], %var_4288: Tensor[(312), float32], %var_4289: uint16) -> (Tensor[(10, 9, 6), uint64], uint16, Tensor[(312), float32], uint16, Tensor[(10, 9, 6), float32]) {
  @func_4285(%var_4287, %var_4288, %var_4289) /* ty=(Tensor[(10, 9, 6), uint64], uint16, Tensor[(312), float32], uint16, Tensor[(10, 9, 6), float32]) */
}

def @func_6333(%var_6332: Tensor[(4, 2, 10), float64]) -> (Tensor[(4, 2, 10), bool], Tensor[(4, 2, 10), float64]) {
  %927 = fn (%var_6316: Tensor[(4, 2, 10), float64]) -> (Tensor[(4, 2, 10), bool], Tensor[(4, 2, 10), float64]) {
    %915 = @func_4620() /* ty=(Tensor[(4, 2, 10), float64],) */;
    %916 = %915.0;
    %917 = cast(%var_6316, dtype="bool") /* ty=Tensor[(4, 2, 10), bool] */;
    %918 = shape_of(%916, dtype="int32") /* ty=Tensor[(3), int32] */;
    %919 = cast(%916, dtype="bool") /* ty=Tensor[(4, 2, 10), bool] */;
    %920 = dyn.reshape(%917, %918, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %921 = cast(meta[relay.Constant][49] /* ty=Tensor[(4, 2, 10), float64] */, dtype="float64") /* ty=Tensor[(4, 2, 10), float64] */;
    %922 = shape_of(%916, dtype="int32") /* ty=Tensor[(3), int32] */;
    %923 = cast(%916, dtype="float64") /* ty=Tensor[(4, 2, 10), float64] */;
    %924 = dyn.reshape(%921, %922, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %925 = less_equal(%919, %920) /* ty=Tensor[(4, 2, 10), bool] */;
    %926 = mod(%923, %924) /* ty=Tensor[(4, 2, 10), float64] */;
    (%925, %926)
  };
  %927(%var_6332) /* ty=(Tensor[(4, 2, 10), bool], Tensor[(4, 2, 10), float64]) */
}

def @func_3247() -> (Tensor[(10, 9, 6), float64],) {
  %930 = fn () -> (Tensor[(10, 9, 6), float64],) {
    %928 = @func_2733() /* ty=(Tensor[(10, 9, 6), float64],) */;
    %929 = %928.0;
    (%929,)
  };
  %930() /* ty=(Tensor[(10, 9, 6), float64],) */
}

def @func_6889(%var_6876: Tensor[(24), float64]) -> (uint16, Tensor[(1, 7), int16], Tensor[(24), float64]) {
  %931 = @func_3923() /* ty=(uint16, Tensor[(10, 9, 6), float32]) */;
  %932 = cast(%var_6876, dtype="float64") /* ty=Tensor[(24), float64] */;
  %933 = reshape(%932, newshape=[4, 1, 6]) /* ty=Tensor[(4, 1, 6), float64] */;
  %934 = @func_4861(%933) /* ty=(Tensor[(4, ?, 6), int64], Tensor[(5, 7, 14), int16], Tensor[(1, 7), int16]) */;
  %935 = %931.0;
  %936 = %934.2;
  (%935, %936, %var_6876)
}

def @func_5939() -> (Tensor[(14, 16, 12), float64],) {
  @func_5937() /* ty=(Tensor[(14, 16, 12), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen190/build/output.py:2806: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen190/build/output.py", line 2811, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(432) tvmgen_default_fused_acos_kernel0(float* __restrict__ T_acos, float* __restrict__ placeholder) {
  T_acos[(((int)threadIdx.x))] = acosf(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

