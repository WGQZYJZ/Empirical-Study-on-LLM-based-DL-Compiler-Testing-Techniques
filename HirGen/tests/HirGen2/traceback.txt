==========mod==========
#[version = "0.0.5"]
def @func_3781(%var_3760: Tensor[(6, 6, 14), float64]) -> (Tensor[(6, 6, 14), bool], Tensor[(264), int8]) {
  %0 = @func_1620() /* ty=(Tensor[(630), int32], Tensor[(6, 1, 14), float64]) */;
  %1 = %0.1;
  %2 = cast(%1, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %3 = cast(%var_3760, dtype="bool") /* ty=Tensor[(6, 6, 14), bool] */;
  %4 = @func_2523() /* ty=(Tensor[(630), int32], Tensor[(264), int8], Tensor[(264), int8]) */;
  %5 = logical_and(%2, %3) /* ty=Tensor[(6, 6, 14), bool] */;
  %6 = %4.1;
  (%5, %6)
}

def @func_4373() -> (Tensor[(6, 1, 14), float64], Tensor[(4, 6, 11), float32], Tensor[(1, 7, 4), float64]) {
  %7 = @func_1361() /* ty=(Tensor[(6, 1, 14), float64],) */;
  %8 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
  %9 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
  %10 = %7.0;
  %11 = %8.1;
  %12 = %9.0;
  (%10, %11, %12)
}

def @func_2581() -> (Tensor[(7, 9, 10), uint16], Tensor[(264), int8], Tensor[(6, ?, 14), bool], Tensor[(630, 1), float64], Tensor[(8, 16), uint32], uint32, Tensor[(128), uint32]) {
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(630, 1), float64] */, dtype="float64") /* ty=Tensor[(630, 1), float64] */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %15 = reshape(%13, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), float64] */;
  %16 = reshape(%14, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %17 = @func_1688(%15, %16) /* ty=(Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), uint16], Tensor[(7, 9, 10), float64]) */;
  %18 = @func_1361() /* ty=(Tensor[(6, 1, 14), float64],) */;
  %19 = %18.0;
  %20 = cast(%19, dtype="float64") /* ty=Tensor[(6, 1, 14), float64] */;
  %21 = atan(%20) /* ty=Tensor[(6, 1, 14), float64] */;
  %22 = cast(%19, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%21, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %26 = cast(meta[relay.Constant][0] /* ty=Tensor[(630, 1), float64] */, dtype="float64") /* ty=Tensor[(630, 1), float64] */;
  %27 = cast(meta[relay.Constant][2] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %28 = cast(meta[relay.Constant][3] /* ty=Tensor[(128), uint32] */, dtype="uint32") /* ty=Tensor[(128), uint32] */;
  %29 = reshape(%27, newshape=[]) /* ty=uint32 */;
  %30 = reshape(%28, newshape=[8, 16]) /* ty=Tensor[(8, 16), uint32] */;
  %31 = %17.2;
  %32 = less(%24, %25) /* ty=Tensor[(6, ?, 14), bool] */;
  %33 = atanh(%26) /* ty=Tensor[(630, 1), float64] */;
  %34 = @func_2261(%29, %30) /* ty=Tensor[(8, 16), uint32] */;
  (%31, meta[relay.Constant][1] /* ty=Tensor[(264), int8] */, %32, %33, %34, meta[relay.Constant][2] /* ty=uint32 */, meta[relay.Constant][3] /* ty=Tensor[(128), uint32] */)
}

def @func_3660(%var_3577: Tensor[(13, 15, 16), int64], %var_3595: Tensor[(1, 297), float32], %var_3596: Tensor[(1, 264), int8], %var_3603: Tensor[(14, 14, 5), bool], %var_3614: int32, %var_3645: Tensor[(143), int8], %var_3646: Tensor[(1573), int8]) -> (Tensor[(13, 15, 16), float64], Tensor[(980), bool], Tensor[(3, 11, 9), int16], Tensor[(1, 297), float32], Tensor[(1, 264), int8], Tensor[(4, 6, 11), float32], int32, Tensor[(630), int32], Tensor[(14, 14, 5), float32], Tensor[(6, 1, 14), float64], Tensor[(13, 15, 16), bool], Tensor[(12, 7, 4), int32], Tensor[(336), float64], Tensor[(11, 13, 11), uint8], Tensor[(143), int8], Tensor[(1573), int8], Tensor[(4, 9, 14), float32], Tensor[(504), uint16]) {
  %35 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 15, 16), int64] */, dtype="int64") /* ty=Tensor[(13, 15, 16), int64] */;
  %36 = shape_of(%var_3577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%var_3577, dtype="int64") /* ty=Tensor[(13, 15, 16), int64] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %39 = bitwise_xor(%37, %38) /* ty=Tensor[(13, 15, 16), int64] */;
  %40 = cast(%39, dtype="float64") /* ty=Tensor[(13, 15, 16), float64] */;
  %41 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(13, 15, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 15, 16), int64] */, dtype="float64") /* ty=Tensor[(13, 15, 16), float64] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %44 = cast(%var_3595, dtype="float32") /* ty=Tensor[(1, 297), float32] */;
  %45 = cast(%var_3596, dtype="int8") /* ty=Tensor[(1, 264), int8] */;
  %46 = reshape(%44, newshape=[3, 11, 9]) /* ty=Tensor[(3, 11, 9), float32] */;
  %47 = reshape(%45, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %48 = @func_893(%46, %47) /* ty=(Tensor[(3, 11, 9), int16], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(3, 11, 9), float32]) */;
  %49 = cast(%var_3614, dtype="int32") /* ty=int32 */;
  %50 = cast(meta[relay.Constant][6] /* ty=Tensor[(630), int32] */, dtype="int32") /* ty=Tensor[(630), int32] */;
  %51 = cast(%var_3596, dtype="int8") /* ty=Tensor[(1, 264), int8] */;
  %52 = reshape(%49, newshape=[]) /* ty=int32 */;
  %53 = reshape(%50, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
  %54 = reshape(%51, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %55 = @func_423(%52, %53, %54) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
  %56 = cast(meta[relay.Constant][5] /* ty=Tensor[(980), bool] */, dtype="bool") /* ty=Tensor[(980), bool] */;
  %57 = reshape(%56, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), bool] */;
  %58 = @func_2600(%57) /* ty=(Tensor[(14, 14, 5), bool],) */;
  %59 = %58.0;
  %60 = cast(%var_3603, dtype="int64") /* ty=Tensor[(14, 14, 5), int64] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="int64") /* ty=Tensor[(14, 14, 5), int64] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %64 = bitwise_and(%62, %63) /* ty=Tensor[(14, 14, 5), int64] */;
  %65 = cast(%64, dtype="float32") /* ty=Tensor[(14, 14, 5), float32] */;
  %66 = @func_1361() /* ty=(Tensor[(6, 1, 14), float64],) */;
  %67 = cast(%var_3577, dtype="float64") /* ty=Tensor[(13, 15, 16), float64] */;
  %68 = atan(%67) /* ty=Tensor[(13, 15, 16), float64] */;
  %69 = cast(%68, dtype="bool") /* ty=Tensor[(13, 15, 16), bool] */;
  %70 = shape_of(%39, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%39, dtype="bool") /* ty=Tensor[(13, 15, 16), bool] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %73 = cast(meta[relay.Constant][7] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %74 = reshape(%73, newshape=[12, 7, 4]) /* ty=Tensor[(12, 7, 4), float64] */;
  %75 = cast(%var_3645, dtype="int8") /* ty=Tensor[(143), int8] */;
  %76 = cast(%var_3646, dtype="int8") /* ty=Tensor[(1573), int8] */;
  %77 = cast(%var_3645, dtype="int8") /* ty=Tensor[(143), int8] */;
  %78 = reshape(%75, newshape=[143]) /* ty=Tensor[(143), int8] */;
  %79 = reshape(%76, newshape=[1573]) /* ty=Tensor[(1573), int8] */;
  %80 = reshape(%77, newshape=[143]) /* ty=Tensor[(143), int8] */;
  %81 = @func_1012(%78, %79, %80) /* ty=(Tensor[(4, 6, 11), int8], Tensor[(143), int16], Tensor[(1, 7, 4), float32], Tensor[(?, 7, 4), bool], Tensor[(11, 13, 11), uint8]) */;
  %82 = cast(meta[relay.Constant][8] /* ty=Tensor[(504), uint16] */, dtype="uint16") /* ty=Tensor[(504), uint16] */;
  %83 = cast(meta[relay.Constant][8] /* ty=Tensor[(504), uint16] */, dtype="uint16") /* ty=Tensor[(504), uint16] */;
  %84 = reshape(%82, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), uint16] */;
  %85 = reshape(%83, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), uint16] */;
  %86 = @func_1174(%84, %85) /* ty=(Tensor[(4, 9, 14), uint16], Tensor[(4, 9, 14), float64], Tensor[(4, 9, 14), float32], Tensor[(630), float64]) */;
  %87 = power(%42, %43) /* ty=Tensor[(13, 15, 16), float64] */;
  %88 = %48.0;
  %89 = %55.3;
  %90 = log10(%65) /* ty=Tensor[(14, 14, 5), float32] */;
  %91 = %66.0;
  %92 = logical_and(%71, %72) /* ty=Tensor[(13, 15, 16), bool] */;
  %93 = @func_1286(%74) /* ty=Tensor[(12, 7, 4), int32] */;
  %94 = %81.4;
  %95 = %86.2;
  (%87, meta[relay.Constant][5] /* ty=Tensor[(980), bool] */, %88, %var_3595, %var_3596, %89, %var_3614, meta[relay.Constant][6] /* ty=Tensor[(630), int32] */, %90, %91, %92, %93, meta[relay.Constant][7] /* ty=Tensor[(336), float64] */, %94, %var_3645, %var_3646, %95, meta[relay.Constant][8] /* ty=Tensor[(504), uint16] */)
}

def @func_1714(%var_1706: Tensor[(6, 2, 14), float64]) -> Tensor[(6, 2, 14), bool] {
  %96 = @func_1361() /* ty=(Tensor[(6, 1, 14), float64],) */;
  %97 = %96.0;
  %98 = cast(%97, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %99 = cast(%var_1706, dtype="bool") /* ty=Tensor[(6, 2, 14), bool] */;
  logical_or(%98, %99) /* ty=Tensor[(6, 2, 14), bool] */
}

def @func_3877() -> Tensor[(630), int32] {
  %100 = @func_3315() /* ty=(Tensor[(630), int32],) */;
  %100.0
}

def @func_533(%var_485: Tensor[(11, 13, 1), int8], %var_486: Tensor[(11, 13, 11), int8]) -> (Tensor[(11, 13, 11), bool], Tensor[(11, 13, 11), int32]) {
  %101 = cast(%var_485, dtype="bool") /* ty=Tensor[(11, 13, 1), bool] */;
  %102 = cast(%var_486, dtype="bool") /* ty=Tensor[(11, 13, 11), bool] */;
  %103 = cast(%var_486, dtype="uint32") /* ty=Tensor[(11, 13, 11), uint32] */;
  %104 = cast(%var_485, dtype="uint32") /* ty=Tensor[(11, 13, 1), uint32] */;
  %105 = left_shift(%103, %104) /* ty=Tensor[(11, 13, 11), uint32] */;
  %106 = cast(%105, dtype="int32") /* ty=Tensor[(11, 13, 11), int32] */;
  %107 = cast(%var_485, dtype="int32") /* ty=Tensor[(11, 13, 1), int32] */;
  %108 = less(%101, %102) /* ty=Tensor[(11, 13, 11), bool] */;
  %109 = bitwise_or(%106, %107) /* ty=Tensor[(11, 13, 11), int32] */;
  (%108, %109)
}

def @func_1620() -> (Tensor[(630), int32], Tensor[(6, 1, 14), float64]) {
  %110 = @func_1355() /* ty=(Tensor[(630), int32],) */;
  %111 = @func_1361() /* ty=(Tensor[(6, 1, 14), float64],) */;
  %112 = %110.0;
  %113 = %111.0;
  (%112, %113)
}

def @func_3934(%var_3921: Tensor[(9, 14, 10), int64], %var_3922: Tensor[(9, 14, 10), int64]) -> (Tensor[(9, 14, 10), bool], Tensor[(6, 6, 14), bool], Tensor[(504), float64], Tensor[(9, 14, 10), float32]) {
  %114 = cast(%var_3922, dtype="bool") /* ty=Tensor[(9, 14, 10), bool] */;
  %115 = shape_of(%var_3921, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%var_3921, dtype="bool") /* ty=Tensor[(9, 14, 10), bool] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %118 = cast(meta[relay.Constant][9] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %119 = reshape(%118, newshape=[6, 6, 14]) /* ty=Tensor[(6, 6, 14), float64] */;
  %120 = @func_3781(%119) /* ty=(Tensor[(6, 6, 14), bool], Tensor[(264), int8]) */;
  %121 = cast(%var_3922, dtype="float32") /* ty=Tensor[(9, 14, 10), float32] */;
  %122 = greater_equal(%116, %117) /* ty=Tensor[(9, 14, 10), bool] */;
  %123 = %120.0;
  %124 = cosh(%121) /* ty=Tensor[(9, 14, 10), float32] */;
  (%122, %123, meta[relay.Constant][9] /* ty=Tensor[(504), float64] */, %124)
}

def @func_1688(%var_1663: Tensor[(7, 9, 10), float64], %var_1673: Tensor[(264), int8]) -> (Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), uint16], Tensor[(7, 9, 10), float64]) {
  %125 = cast(%var_1673, dtype="int8") /* ty=Tensor[(264), int8] */;
  %126 = reshape(%125, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
  %127 = @func_244(%126) /* ty=(Tensor[(4, 6, 11), int8],) */;
  %128 = @func_1370() /* ty=(Tensor[(7, 9, 10), float64],) */;
  %129 = %128.0;
  %130 = cast(%var_1663, dtype="uint16") /* ty=Tensor[(7, 9, 10), uint16] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%129, dtype="uint16") /* ty=Tensor[(7, 9, 10), uint16] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %134 = cast(%var_1663, dtype="float32") /* ty=Tensor[(7, 9, 10), float32] */;
  %135 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%129, dtype="float32") /* ty=Tensor[(7, 9, 10), float32] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %138 = floor_mod(%136, %137) /* ty=Tensor[(7, 9, 10), float32] */;
  %139 = cast(%138, dtype="float64") /* ty=Tensor[(7, 9, 10), float64] */;
  %140 = %127.0;
  %141 = bitwise_xor(%132, %133) /* ty=Tensor[(7, 9, 10), uint16] */;
  %142 = sigmoid(%139) /* ty=Tensor[(7, 9, 10), float64] */;
  (%140, %var_1673, %141, %142)
}

def @func_2811() -> Tensor[(4, 6, 11), int8] {
  %143 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
  %143.1
}

def @func_839() -> (Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) {
  %144 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 7, 4), float64] */, dtype="float64") /* ty=Tensor[(1, 7, 4), float64] */;
  %145 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %146 = cast(meta[relay.Constant][11] /* ty=Tensor[(630), int32] */, dtype="int32") /* ty=Tensor[(630), int32] */;
  %147 = cast(meta[relay.Constant][12] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %148 = reshape(%145, newshape=[]) /* ty=int32 */;
  %149 = reshape(%146, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
  %150 = reshape(%147, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %151 = @func_423(%148, %149, %150) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
  %152 = exp(%144) /* ty=Tensor[(1, 7, 4), float64] */;
  %153 = %151.4;
  (%152, %153, 6 /* ty=int32 */, meta[relay.Constant][11] /* ty=Tensor[(630), int32] */, meta[relay.Constant][12] /* ty=Tensor[(264), int8] */)
}

def @func_4322(%var_4297: Tensor[(264), int8], %var_4306: Tensor[(297), float32]) -> (Tensor[(264), int64], Tensor[(264), int8], Tensor[(297), float32], Tensor[(6, 1, 14), float64]) {
  %154 = @func_3690() /* ty=(Tensor[(264), int8],) */;
  %155 = %154.0;
  %156 = cast(%var_4297, dtype="int64") /* ty=Tensor[(264), int64] */;
  %157 = shape_of(%155, dtype="int32") /* ty=Tensor[(1), int32] */;
  %158 = cast(%155, dtype="int64") /* ty=Tensor[(264), int64] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?), int64] */;
  %160 = cast(%var_4306, dtype="float32") /* ty=Tensor[(297), float32] */;
  %161 = cast(%155, dtype="int8") /* ty=Tensor[(264), int8] */;
  %162 = reshape(%160, newshape=[3, 11, 9]) /* ty=Tensor[(3, 11, 9), float32] */;
  %163 = reshape(%161, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %164 = @func_893(%162, %163) /* ty=(Tensor[(3, 11, 9), int16], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(3, 11, 9), float32]) */;
  %165 = subtract(%158, %159) /* ty=Tensor[(264), int64] */;
  %166 = %164.2;
  %167 = @func_1319() /* ty=Tensor[(6, 1, 14), float64] */;
  (%165, %166, %var_4306, %167)
}

def @func_3748(%var_3718: Tensor[(16, 4, 4), bool]) -> (Tensor[(16, 4, 4), bool], Tensor[(16, 4, 4), uint64]) {
  %168 = cast(%var_3718, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
  %169 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(16, 4, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 4, 4), bool] */, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %172 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 4, 4), bool] */, dtype="float32") /* ty=Tensor[(16, 4, 4), float32] */;
  %173 = shape_of(%var_3718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%var_3718, dtype="float32") /* ty=Tensor[(16, 4, 4), float32] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %176 = mod(%174, %175) /* ty=Tensor[(16, 4, 4), float32] */;
  %177 = cast(%176, dtype="uint64") /* ty=Tensor[(16, 4, 4), uint64] */;
  %178 = shape_of(%var_3718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%var_3718, dtype="uint64") /* ty=Tensor[(16, 4, 4), uint64] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %181 = logical_and(%170, %171) /* ty=Tensor[(16, 4, 4), bool] */;
  %182 = bitwise_xor(%179, %180) /* ty=Tensor[(16, 4, 4), uint64] */;
  (%181, %182)
}

def @func_1012(%var_965: Tensor[(143), int8], %var_966: Tensor[(1573), int8], %var_970: Tensor[(143), int8]) -> (Tensor[(4, 6, 11), int8], Tensor[(143), int16], Tensor[(1, 7, 4), float32], Tensor[(?, 7, 4), bool], Tensor[(11, 13, 11), uint8]) {
  %183 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
  %184 = cast(%var_970, dtype="int16") /* ty=Tensor[(143), int16] */;
  %185 = shape_of(%var_965, dtype="int32") /* ty=Tensor[(1), int32] */;
  %186 = cast(%var_965, dtype="int16") /* ty=Tensor[(143), int16] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?), int16] */;
  %188 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
  %189 = %188.0;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(1, 7, 4), float32] */;
  %191 = cast(%189, dtype="float64") /* ty=Tensor[(1, 7, 4), float64] */;
  %192 = sinh(%191) /* ty=Tensor[(1, 7, 4), float64] */;
  %193 = cast(%189, dtype="bool") /* ty=Tensor[(1, 7, 4), bool] */;
  %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%192, dtype="bool") /* ty=Tensor[(1, 7, 4), bool] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %197 = cast(%var_965, dtype="int8") /* ty=Tensor[(143), int8] */;
  %198 = cast(%var_966, dtype="int8") /* ty=Tensor[(1573), int8] */;
  %199 = reshape(%197, newshape=[11, 13, 1]) /* ty=Tensor[(11, 13, 1), int8] */;
  %200 = reshape(%198, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), int8] */;
  %201 = @func_533(%199, %200) /* ty=(Tensor[(11, 13, 11), bool], Tensor[(11, 13, 11), int32]) */;
  %202 = %201.0;
  %203 = cast(%var_966, dtype="uint8") /* ty=Tensor[(1573), uint8] */;
  %204 = shape_of(%202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%202, dtype="uint8") /* ty=Tensor[(11, 13, 11), uint8] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %207 = %183.1;
  %208 = multiply(%186, %187) /* ty=Tensor[(143), int16] */;
  %209 = erf(%190) /* ty=Tensor[(1, 7, 4), float32] */;
  %210 = logical_and(%195, %196) /* ty=Tensor[(?, 7, 4), bool] */;
  %211 = subtract(%205, %206) /* ty=Tensor[(11, 13, 11), uint8] */;
  (%207, %208, %209, %210, %211)
}

def @func_3474() -> Tensor[(630), int32] {
  %212 = @func_1259() /* ty=(Tensor[(630), int32],) */;
  %212.0
}

def @func_244(%var_231: Tensor[(4, 6, 11), int8]) -> (Tensor[(4, 6, 11), int8],) {
  %213 = cast(meta[relay.Constant][14] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %214 = cast(%var_231, dtype="int8") /* ty=Tensor[(4, 6, 11), int8] */;
  %215 = bitwise_or(%213, %214) /* ty=Tensor[(4, 6, 11), int8] */;
  (%215,)
}

def @func_2600(%var_2593: Tensor[(14, 14, 5), bool]) -> (Tensor[(14, 14, 5), bool],) {
  %216 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 14, 5), bool] */, dtype="bool") /* ty=Tensor[(14, 14, 5), bool] */;
  %217 = shape_of(%var_2593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%var_2593, dtype="bool") /* ty=Tensor[(14, 14, 5), bool] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %220 = logical_or(%218, %219) /* ty=Tensor[(14, 14, 5), bool] */;
  (%220,)
}

def @func_1771(%var_1752: Tensor[(11, 8, 9), float32], %var_1765: Tensor[(630), float64]) -> (Tensor[(11, 8, 9), float32], Tensor[(7, 9, 10), float64], Tensor[(630), float64], Tensor[(264), int8], Tensor[(4, 6, 11), int8]) {
  %221 = cast(%var_1752, dtype="float32") /* ty=Tensor[(11, 8, 9), float32] */;
  %222 = cast(%var_1765, dtype="float64") /* ty=Tensor[(630), float64] */;
  %223 = cast(meta[relay.Constant][16] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %224 = reshape(%222, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), float64] */;
  %225 = reshape(%223, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %226 = @func_1688(%224, %225) /* ty=(Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), uint16], Tensor[(7, 9, 10), float64]) */;
  %227 = cast(meta[relay.Constant][16] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %228 = reshape(%227, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %229 = @func_1253(%228) /* ty=(Tensor[(?, 7, 4), float32], Tensor[(?, 7, 4), int16], Tensor[(?, 7, 4), float32], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) */;
  %230 = asinh(%221) /* ty=Tensor[(11, 8, 9), float32] */;
  %231 = %226.3;
  %232 = %229.3;
  (%230, %231, %var_1765, meta[relay.Constant][16] /* ty=Tensor[(264), int8] */, %232)
}

def @func_4259() -> (Tensor[(16, 6, 4), float32],) {
  %233 = @func_3230() /* ty=(Tensor[(264), int8], Tensor[(630), float32], Tensor[(16, 6, 4), float32], Tensor[(7, 9, 10), uint16], Tensor[(4, 9, 14), float32], Tensor[(504), uint16], Tensor[(4, 14, 13), int16], Tensor[(728), int16]) */;
  %234 = %233.2;
  (%234,)
}

def @func_1983(%var_1937: Tensor[(336), float64], %var_1948: Tensor[(264), int8], %var_1949: Tensor[(143), int8], %var_1963: int32, %var_1972: Tensor[(792), float32]) -> (Tensor[(630), int32], Tensor[(12, 7, 4), int32], Tensor[(336), float64], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(143), int8], Tensor[(7, 9, 10), uint8], int32, Tensor[(7, 9, 10), bool], Tensor[(11, 8, 9), float32], Tensor[(792), float32]) {
  %235 = @func_1259() /* ty=(Tensor[(630), int32],) */;
  %236 = cast(%var_1937, dtype="float64") /* ty=Tensor[(336), float64] */;
  %237 = reshape(%236, newshape=[12, 7, 4]) /* ty=Tensor[(12, 7, 4), float64] */;
  %238 = cast(%var_1948, dtype="int8") /* ty=Tensor[(264), int8] */;
  %239 = cast(%var_1949, dtype="int8") /* ty=Tensor[(143), int8] */;
  %240 = reshape(%238, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %241 = reshape(%239, newshape=[1, 143]) /* ty=Tensor[(1, 143), int8] */;
  %242 = @func_1529(%240, %241) /* ty=(Tensor[(630), int32], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), float64], Tensor[(1, 7, 4), float32], Tensor[(1, 143), int8], Tensor[(1573), int8], Tensor[(7, 9, 10), float64], Tensor[(297), float32], Tensor[(297), float64], Tensor[(11, 13, 11), int32]) */;
  %243 = cast(%var_1963, dtype="int32") /* ty=int32 */;
  %244 = %235.0;
  %245 = cast(%244, dtype="int32") /* ty=Tensor[(630), int32] */;
  %246 = cast(%var_1948, dtype="int8") /* ty=Tensor[(264), int8] */;
  %247 = reshape(%243, newshape=[]) /* ty=int32 */;
  %248 = reshape(%245, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
  %249 = reshape(%246, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %250 = @func_423(%247, %248, %249) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
  %251 = cast(%var_1963, dtype="int32") /* ty=int32 */;
  %252 = cast(%244, dtype="int32") /* ty=Tensor[(630), int32] */;
  %253 = %242.1;
  %254 = cast(%253, dtype="int8") /* ty=Tensor[(4, 6, 11), int8] */;
  %255 = reshape(%251, newshape=[]) /* ty=int32 */;
  %256 = reshape(%252, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
  %257 = reshape(%254, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %258 = @func_423(%255, %256, %257) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
  %259 = cast(%var_1972, dtype="float32") /* ty=Tensor[(792), float32] */;
  %260 = %258.0;
  %261 = cast(%260, dtype="float64") /* ty=Tensor[(7, 9, 10), float64] */;
  %262 = reshape(%259, newshape=[11, 8, 9]) /* ty=Tensor[(11, 8, 9), float32] */;
  %263 = reshape(%261, newshape=[630]) /* ty=Tensor[(630), float64] */;
  %264 = @func_1771(%262, %263) /* ty=(Tensor[(11, 8, 9), float32], Tensor[(7, 9, 10), float64], Tensor[(630), float64], Tensor[(264), int8], Tensor[(4, 6, 11), int8]) */;
  %265 = @func_1286(%237) /* ty=Tensor[(12, 7, 4), int32] */;
  %266 = %250.1;
  %267 = %264.0;
  (%244, %265, %var_1937, %253, %var_1948, %var_1949, %266, %var_1963, %260, %267, %var_1972)
}

def @func_3842() -> (Tensor[(264), int8],) {
  %268 = @func_3033() /* ty=(Tensor[(264), int8], Tensor[(9, 4, 15), float64], Tensor[(18, 30), float64]) */;
  %269 = %268.0;
  (%269,)
}

def @func_4024(%var_3988: Tensor[(6, 16, 12), uint32], %var_3989: Tensor[(6, 16, 12), uint32]) -> (Tensor[(6, 16, 12), uint32], Tensor[(264), int8]) {
  %270 = cast(%var_3989, dtype="uint32") /* ty=Tensor[(6, 16, 12), uint32] */;
  %271 = shape_of(%var_3988, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%var_3988, dtype="uint32") /* ty=Tensor[(6, 16, 12), uint32] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %274 = multiply(%272, %273) /* ty=Tensor[(6, 16, 12), uint32] */;
  %275 = @func_3823() /* ty=Tensor[(264), int8] */;
  (%274, %275)
}

def @func_2174(%var_2144: Tensor[(14, 4, 4), float64], %var_2145: Tensor[(14, 4, 4), float64]) -> (Tensor[(14, 4, 4), uint32],) {
  %276 = cast(%var_2145, dtype="float64") /* ty=Tensor[(14, 4, 4), float64] */;
  %277 = shape_of(%var_2144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%var_2144, dtype="float64") /* ty=Tensor[(14, 4, 4), float64] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %280 = divide(%278, %279) /* ty=Tensor[(14, 4, 4), float64] */;
  %281 = cast(%280, dtype="uint32") /* ty=Tensor[(14, 4, 4), uint32] */;
  %282 = shape_of(%var_2144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%var_2144, dtype="uint32") /* ty=Tensor[(14, 4, 4), uint32] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %285 = bitwise_or(%283, %284) /* ty=Tensor[(14, 4, 4), uint32] */;
  (%285,)
}

def @func_1545(%var_1535: Tensor[(9, 4, 15), float64], %var_1536: Tensor[(9, 4, 15), float64]) -> (Tensor[(9, 4, 15), float64],) {
  %286 = cast(%var_1536, dtype="float64") /* ty=Tensor[(9, 4, 15), float64] */;
  %287 = shape_of(%var_1535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%var_1535, dtype="float64") /* ty=Tensor[(9, 4, 15), float64] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %290 = multiply(%288, %289) /* ty=Tensor[(9, 4, 15), float64] */;
  (%290,)
}

def @func_2643(%var_2622: Tensor[(4, 14, 13), int16], %var_2623: Tensor[(4, 14, 13), int16]) -> (Tensor[(4, 14, 13), int16],) {
  %291 = cast(%var_2623, dtype="int16") /* ty=Tensor[(4, 14, 13), int16] */;
  %292 = shape_of(%var_2622, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%var_2622, dtype="int16") /* ty=Tensor[(4, 14, 13), int16] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %295 = multiply(%293, %294) /* ty=Tensor[(4, 14, 13), int16] */;
  (%295,)
}

def @func_3033() -> (Tensor[(264), int8], Tensor[(9, 4, 15), float64], Tensor[(18, 30), float64]) {
  %296 = @func_1112() /* ty=(Tensor[(7, 9, 10), float64], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) */;
  %297 = cast(meta[relay.Constant][17] /* ty=Tensor[(18, 30), float64] */, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %298 = cast(meta[relay.Constant][17] /* ty=Tensor[(18, 30), float64] */, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %299 = reshape(%297, newshape=[9, 4, 15]) /* ty=Tensor[(9, 4, 15), float64] */;
  %300 = reshape(%298, newshape=[9, 4, 15]) /* ty=Tensor[(9, 4, 15), float64] */;
  %301 = @func_1545(%299, %300) /* ty=(Tensor[(9, 4, 15), float64],) */;
  %302 = %296.2;
  %303 = %301.0;
  (%302, %303, meta[relay.Constant][17] /* ty=Tensor[(18, 30), float64] */)
}

def @func_4183(%var_4158: Tensor[(264), int8], %var_4162: Tensor[(16, 6, 4), float32]) -> (Tensor[(1, 7, 4), float64], Tensor[(264), int8], Tensor[(16, 6, 4), float64], Tensor[(504, 1), float64], Tensor[(630), int32], Tensor[(6, 6, 14), float64]) {
  %304 = cast(%var_4158, dtype="int8") /* ty=Tensor[(264), int8] */;
  %305 = reshape(%304, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %306 = @func_3416(%305) /* ty=(Tensor[(1, 7, 4), float64], Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), bool]) */;
  %307 = @func_2204() /* ty=Tensor[(16, 6, 4), float32] */;
  %308 = cast(%var_4162, dtype="float64") /* ty=Tensor[(16, 6, 4), float64] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%307, dtype="float64") /* ty=Tensor[(16, 6, 4), float64] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %312 = cast(meta[relay.Constant][18] /* ty=Tensor[(504, 1), float64] */, dtype="float64") /* ty=Tensor[(504, 1), float64] */;
  %313 = reshape(%312, newshape=[6, 6, 14]) /* ty=Tensor[(6, 6, 14), float64] */;
  %314 = @func_3781(%313) /* ty=(Tensor[(6, 6, 14), bool], Tensor[(264), int8]) */;
  %315 = %314.0;
  %316 = cast(%315, dtype="float64") /* ty=Tensor[(6, 6, 14), float64] */;
  %317 = %306.0;
  %318 = mod(%310, %311) /* ty=Tensor[(16, 6, 4), float64] */;
  %319 = @func_3877() /* ty=Tensor[(630), int32] */;
  %320 = sqrt(%316) /* ty=Tensor[(6, 6, 14), float64] */;
  (%317, %var_4158, %318, meta[relay.Constant][18] /* ty=Tensor[(504, 1), float64] */, %319, %320)
}

def @func_2261(%var_2248: uint32, %var_2249: Tensor[(8, 16), uint32]) -> Tensor[(8, 16), uint32] {
  %321 = cast(%var_2248, dtype="uint32") /* ty=uint32 */;
  %322 = cast(%var_2249, dtype="uint32") /* ty=Tensor[(8, 16), uint32] */;
  maximum(%321, %322) /* ty=Tensor[(8, 16), uint32] */
}

def @func_1529(%var_1444: Tensor[(264), int8], %var_1479: Tensor[(1, 143), int8]) -> (Tensor[(630), int32], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), float64], Tensor[(1, 7, 4), float32], Tensor[(1, 143), int8], Tensor[(1573), int8], Tensor[(7, 9, 10), float64], Tensor[(297), float32], Tensor[(297), float64], Tensor[(11, 13, 11), int32]) {
  %323 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
  %324 = cast(meta[relay.Constant][19] /* ty=Tensor[(297), float32] */, dtype="float32") /* ty=Tensor[(297), float32] */;
  %325 = cast(%var_1444, dtype="int8") /* ty=Tensor[(264), int8] */;
  %326 = reshape(%324, newshape=[3, 11, 9]) /* ty=Tensor[(3, 11, 9), float32] */;
  %327 = reshape(%325, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %328 = @func_893(%326, %327) /* ty=(Tensor[(3, 11, 9), int16], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(3, 11, 9), float32]) */;
  %329 = @func_1370() /* ty=(Tensor[(7, 9, 10), float64],) */;
  %330 = cast(%var_1479, dtype="int8") /* ty=Tensor[(1, 143), int8] */;
  %331 = cast(meta[relay.Constant][20] /* ty=Tensor[(1573), int8] */, dtype="int8") /* ty=Tensor[(1573), int8] */;
  %332 = cast(%var_1479, dtype="int8") /* ty=Tensor[(1, 143), int8] */;
  %333 = reshape(%330, newshape=[143]) /* ty=Tensor[(143), int8] */;
  %334 = reshape(%331, newshape=[1573]) /* ty=Tensor[(1573), int8] */;
  %335 = reshape(%332, newshape=[143]) /* ty=Tensor[(143), int8] */;
  %336 = @func_1012(%333, %334, %335) /* ty=(Tensor[(4, 6, 11), int8], Tensor[(143), int16], Tensor[(1, 7, 4), float32], Tensor[(?, 7, 4), bool], Tensor[(11, 13, 11), uint8]) */;
  %337 = @func_1370() /* ty=(Tensor[(7, 9, 10), float64],) */;
  %338 = cast(meta[relay.Constant][19] /* ty=Tensor[(297), float32] */, dtype="float32") /* ty=Tensor[(297), float32] */;
  %339 = atan(%338) /* ty=Tensor[(297), float32] */;
  %340 = cast(%339, dtype="float32") /* ty=Tensor[(297), float32] */;
  %341 = cast(%339, dtype="float64") /* ty=Tensor[(297), float64] */;
  %342 = cast(%var_1479, dtype="int8") /* ty=Tensor[(1, 143), int8] */;
  %343 = cast(meta[relay.Constant][20] /* ty=Tensor[(1573), int8] */, dtype="int8") /* ty=Tensor[(1573), int8] */;
  %344 = reshape(%342, newshape=[11, 13, 1]) /* ty=Tensor[(11, 13, 1), int8] */;
  %345 = reshape(%343, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), int8] */;
  %346 = @func_533(%344, %345) /* ty=(Tensor[(11, 13, 11), bool], Tensor[(11, 13, 11), int32]) */;
  %347 = %323.3;
  %348 = %328.1;
  %349 = %329.0;
  %350 = %336.2;
  %351 = %337.0;
  %352 = asin(%340) /* ty=Tensor[(297), float32] */;
  %353 = acosh(%341) /* ty=Tensor[(297), float64] */;
  %354 = %346.1;
  (%347, %348, %var_1444, %349, %350, %var_1479, meta[relay.Constant][20] /* ty=Tensor[(1573), int8] */, %351, %352, %353, %354)
}

def @func_1253(%var_1246: Tensor[(264), int8]) -> (Tensor[(?, 7, 4), float32], Tensor[(?, 7, 4), int16], Tensor[(?, 7, 4), float32], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) {
  %355 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
  %356 = %355.5;
  %357 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 7, 4), bool] */, dtype="float32") /* ty=Tensor[(1, 7, 4), float32] */;
  %358 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%356, dtype="float32") /* ty=Tensor[(?, 7, 4), float32] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %361 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 7, 4), bool] */, dtype="float64") /* ty=Tensor[(1, 7, 4), float64] */;
  %362 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(%356, dtype="float64") /* ty=Tensor[(?, 7, 4), float64] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %365 = maximum(%363, %364) /* ty=Tensor[(?, 7, 4), float64] */;
  %366 = cast(%365, dtype="float32") /* ty=Tensor[(?, 7, 4), float32] */;
  %367 = sqrt(%366) /* ty=Tensor[(?, 7, 4), float32] */;
  %368 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 7, 4), bool] */, dtype="int16") /* ty=Tensor[(1, 7, 4), int16] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%367, dtype="int16") /* ty=Tensor[(?, 7, 4), int16] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %372 = cast(%367, dtype="float32") /* ty=Tensor[(?, 7, 4), float32] */;
  %373 = cast(%var_1246, dtype="int8") /* ty=Tensor[(264), int8] */;
  %374 = reshape(%373, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
  %375 = @func_244(%374) /* ty=(Tensor[(4, 6, 11), int8],) */;
  %376 = mod(%359, %360) /* ty=Tensor[(?, 7, 4), float32] */;
  %377 = multiply(%370, %371) /* ty=Tensor[(?, 7, 4), int16] */;
  %378 = rsqrt(%372) /* ty=Tensor[(?, 7, 4), float32] */;
  %379 = %375.0;
  (%376, %377, %378, %379, %var_1246)
}

def @func_1647(%var_1639: int32) -> (Tensor[(6, 1, 14), float64], Tensor[(264), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) {
  %380 = cast(%var_1639, dtype="int32") /* ty=int32 */;
  %381 = cast(meta[relay.Constant][22] /* ty=Tensor[(630), int32] */, dtype="int32") /* ty=Tensor[(630), int32] */;
  %382 = cast(meta[relay.Constant][23] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %383 = reshape(%380, newshape=[]) /* ty=int32 */;
  %384 = reshape(%381, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
  %385 = reshape(%382, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %386 = @func_423(%383, %384, %385) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
  %387 = @func_1319() /* ty=Tensor[(6, 1, 14), float64] */;
  %388 = %386.2;
  (%387, %388, %var_1639, meta[relay.Constant][22] /* ty=Tensor[(630), int32] */, meta[relay.Constant][23] /* ty=Tensor[(264), int8] */)
}

def @main(%var_4427: Tensor[(16, 8, 15), int8], %var_4444: Tensor[(16, 8, 15), int8]) -> (Tensor[(16, 8, 15), int8], Tensor[(16, 8, 15), bool]) {
  %389 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 8, 15), int8] */, dtype="int8") /* ty=Tensor[(16, 8, 15), int8] */;
  %390 = shape_of(%var_4427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%var_4427, dtype="int8") /* ty=Tensor[(16, 8, 15), int8] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %393 = cast(%var_4444, dtype="bool") /* ty=Tensor[(16, 8, 15), bool] */;
  %394 = shape_of(%var_4427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%var_4427, dtype="bool") /* ty=Tensor[(16, 8, 15), bool] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %397 = bitwise_and(%391, %392) /* ty=Tensor[(16, 8, 15), int8] */;
  %398 = equal(%395, %396) /* ty=Tensor[(16, 8, 15), bool] */;
  (%397, %398)
}

def @func_3416(%var_3392: Tensor[(264), int8]) -> (Tensor[(1, 7, 4), float64], Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), bool]) {
  %399 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
  %400 = %399.0;
  %401 = cast(%400, dtype="float64") /* ty=Tensor[(1, 7, 4), float64] */;
  %402 = cast(%400, dtype="float64") /* ty=Tensor[(1, 7, 4), float64] */;
  %403 = cast(%var_3392, dtype="int8") /* ty=Tensor[(264), int8] */;
  %404 = reshape(%403, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
  %405 = @func_244(%404) /* ty=(Tensor[(4, 6, 11), int8],) */;
  %406 = %405.0;
  %407 = cast(%var_3392, dtype="bool") /* ty=Tensor[(264), bool] */;
  %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%406, dtype="bool") /* ty=Tensor[(4, 6, 11), bool] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %411 = sin(%401) /* ty=Tensor[(1, 7, 4), float64] */;
  %412 = log(%402) /* ty=Tensor[(1, 7, 4), float64] */;
  %413 = equal(%409, %410) /* ty=Tensor[(4, 6, 11), bool] */;
  (%411, %412, %413)
}

def @func_1286(%var_1281: Tensor[(12, 7, 4), float64]) -> Tensor[(12, 7, 4), int32] {
  %414 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
  %415 = %414.0;
  %416 = cast(%415, dtype="int32") /* ty=Tensor[(1, 7, 4), int32] */;
  %417 = cast(%var_1281, dtype="int32") /* ty=Tensor[(12, 7, 4), int32] */;
  left_shift(%416, %417) /* ty=Tensor[(12, 7, 4), int32] */
}

def @func_3807(%var_3788: Tensor[(11, 8, 1), int32], %var_3789: Tensor[(11, 8, 3), int32]) -> (Tensor[(11, 8, 3), int32], Tensor[(6, 2, 14), bool], Tensor[(168), float64]) {
  %418 = cast(%var_3788, dtype="int32") /* ty=Tensor[(11, 8, 1), int32] */;
  %419 = cast(%var_3789, dtype="int32") /* ty=Tensor[(11, 8, 3), int32] */;
  %420 = cast(meta[relay.Constant][25] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %421 = reshape(%420, newshape=[6, 2, 14]) /* ty=Tensor[(6, 2, 14), float64] */;
  %422 = multiply(%418, %419) /* ty=Tensor[(11, 8, 3), int32] */;
  %423 = @func_1714(%421) /* ty=Tensor[(6, 2, 14), bool] */;
  (%422, %423, meta[relay.Constant][25] /* ty=Tensor[(168), float64] */)
}

def @func_1829(%var_1806: Tensor[(168), float64]) -> (Tensor[(143), int8], Tensor[(6, 2, 14), bool], Tensor[(168), float64], int32) {
  %424 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
  %425 = cast(%var_1806, dtype="float64") /* ty=Tensor[(168), float64] */;
  %426 = reshape(%425, newshape=[6, 2, 14]) /* ty=Tensor[(6, 2, 14), float64] */;
  %427 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
  %428 = %424.6;
  %429 = @func_1714(%426) /* ty=Tensor[(6, 2, 14), bool] */;
  %430 = %427.2;
  (%428, %429, %var_1806, %430)
}

def @func_2766(%var_2752: Tensor[(7, 9, 10), float64]) -> (Tensor[(7, 9, 10), bool], int32) {
  %431 = @func_2724() /* ty=Tensor[(7, 9, 10), float64] */;
  %432 = cast(%var_2752, dtype="bool") /* ty=Tensor[(7, 9, 10), bool] */;
  %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%431, dtype="bool") /* ty=Tensor[(7, 9, 10), bool] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %436 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
  %437 = greater(%434, %435) /* ty=Tensor[(7, 9, 10), bool] */;
  %438 = %436.2;
  (%437, %438)
}

def @func_3137(%var_3086: Tensor[(6, 14, 12), float32], %var_3107: Tensor[(6, 14, 12), float32], %var_3117: Tensor[(128), uint32]) -> (Tensor[(4, 14, 13), int16], Tensor[(728), int16], Tensor[(6, 14, 12), bool], Tensor[(6, 14, 12), float32], Tensor[(8, 16), uint32], uint32, Tensor[(128), uint32], Tensor[(14, 4, 4), uint32], Tensor[(224, 1), float64], Tensor[(6, 14, 12), float32], int32) {
  %439 = cast(meta[relay.Constant][26] /* ty=Tensor[(728), int16] */, dtype="int16") /* ty=Tensor[(728), int16] */;
  %440 = cast(meta[relay.Constant][26] /* ty=Tensor[(728), int16] */, dtype="int16") /* ty=Tensor[(728), int16] */;
  %441 = reshape(%439, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), int16] */;
  %442 = reshape(%440, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), int16] */;
  %443 = @func_2643(%441, %442) /* ty=(Tensor[(4, 14, 13), int16],) */;
  %444 = cast(%var_3086, dtype="float32") /* ty=Tensor[(6, 14, 12), float32] */;
  %445 = atan(%444) /* ty=Tensor[(6, 14, 12), float32] */;
  %446 = cast(%var_3107, dtype="bool") /* ty=Tensor[(6, 14, 12), bool] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%445, dtype="bool") /* ty=Tensor[(6, 14, 12), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %450 = cast(%var_3086, dtype="float32") /* ty=Tensor[(6, 14, 12), float32] */;
  %451 = cast(meta[relay.Constant][27] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %452 = cast(%var_3117, dtype="uint32") /* ty=Tensor[(128), uint32] */;
  %453 = reshape(%451, newshape=[]) /* ty=uint32 */;
  %454 = reshape(%452, newshape=[8, 16]) /* ty=Tensor[(8, 16), uint32] */;
  %455 = cast(meta[relay.Constant][28] /* ty=Tensor[(224, 1), float64] */, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %456 = cast(meta[relay.Constant][28] /* ty=Tensor[(224, 1), float64] */, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %457 = reshape(%455, newshape=[14, 4, 4]) /* ty=Tensor[(14, 4, 4), float64] */;
  %458 = reshape(%456, newshape=[14, 4, 4]) /* ty=Tensor[(14, 4, 4), float64] */;
  %459 = @func_2174(%457, %458) /* ty=(Tensor[(14, 4, 4), uint32],) */;
  %460 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 14, 12), float32] */, dtype="int32") /* ty=Tensor[(6, 14, 12), int32] */;
  %461 = shape_of(%var_3086, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%var_3086, dtype="int32") /* ty=Tensor[(6, 14, 12), int32] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %464 = bitwise_and(%462, %463) /* ty=Tensor[(6, 14, 12), int32] */;
  %465 = cast(%464, dtype="float32") /* ty=Tensor[(6, 14, 12), float32] */;
  %466 = erf(%465) /* ty=Tensor[(6, 14, 12), float32] */;
  %467 = cast(%466, dtype="float32") /* ty=Tensor[(6, 14, 12), float32] */;
  %468 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
  %469 = %443.0;
  %470 = equal(%448, %449) /* ty=Tensor[(6, 14, 12), bool] */;
  %471 = sigmoid(%450) /* ty=Tensor[(6, 14, 12), float32] */;
  %472 = @func_2261(%453, %454) /* ty=Tensor[(8, 16), uint32] */;
  %473 = %459.0;
  %474 = sinh(%467) /* ty=Tensor[(6, 14, 12), float32] */;
  %475 = %468.2;
  (%469, meta[relay.Constant][26] /* ty=Tensor[(728), int16] */, %470, %471, %472, meta[relay.Constant][27] /* ty=uint32 */, %var_3117, %473, meta[relay.Constant][28] /* ty=Tensor[(224, 1), float64] */, %474, %475)
}

def @func_1355() -> (Tensor[(630), int32],) {
  %476 = @func_1259() /* ty=(Tensor[(630), int32],) */;
  %477 = %476.0;
  (%477,)
}

def @func_2099(%var_2073: Tensor[(143), int8]) -> (Tensor[(264), bool], Tensor[(6, 1, 14), float64], Tensor[(7, 9, 10), float64], Tensor[(630), float64], Tensor[(7, 9, 10), float64], Tensor[(143), int8]) {
  %478 = @func_1112() /* ty=(Tensor[(7, 9, 10), float64], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) */;
  %479 = %478.2;
  %480 = cast(meta[relay.Constant][30] /* ty=Tensor[(264), int8] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %481 = shape_of(%479, dtype="int32") /* ty=Tensor[(1), int32] */;
  %482 = cast(%479, dtype="bool") /* ty=Tensor[(264), bool] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?), bool] */;
  %484 = @func_1620() /* ty=(Tensor[(630), int32], Tensor[(6, 1, 14), float64]) */;
  %485 = cast(meta[relay.Constant][31] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
  %486 = less(%482, %483) /* ty=Tensor[(264), bool] */;
  %487 = cast(%486, dtype="int8") /* ty=Tensor[(264), int8] */;
  %488 = reshape(%485, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), float64] */;
  %489 = reshape(%487, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %490 = @func_1688(%488, %489) /* ty=(Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), uint16], Tensor[(7, 9, 10), float64]) */;
  %491 = cast(%479, dtype="int8") /* ty=Tensor[(264), int8] */;
  %492 = cast(%var_2073, dtype="int8") /* ty=Tensor[(143), int8] */;
  %493 = reshape(%491, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %494 = reshape(%492, newshape=[1, 143]) /* ty=Tensor[(1, 143), int8] */;
  %495 = @func_1529(%493, %494) /* ty=(Tensor[(630), int32], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), float64], Tensor[(1, 7, 4), float32], Tensor[(1, 143), int8], Tensor[(1573), int8], Tensor[(7, 9, 10), float64], Tensor[(297), float32], Tensor[(297), float64], Tensor[(11, 13, 11), int32]) */;
  %496 = %484.1;
  %497 = %490.3;
  %498 = %495.7;
  (%486, %496, %497, meta[relay.Constant][31] /* ty=Tensor[(630), float64] */, %498, %var_2073)
}

def @func_2889(%var_2885: Tensor[(264), int8]) -> (Tensor[(16, 6, 4), float32], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) {
  %499 = @func_2204() /* ty=Tensor[(16, 6, 4), float32] */;
  %500 = cast(%499, dtype="float32") /* ty=Tensor[(16, 6, 4), float32] */;
  %501 = cast(%var_2885, dtype="int8") /* ty=Tensor[(264), int8] */;
  %502 = reshape(%501, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
  %503 = @func_244(%502) /* ty=(Tensor[(4, 6, 11), int8],) */;
  %504 = acos(%500) /* ty=Tensor[(16, 6, 4), float32] */;
  %505 = %503.0;
  (%504, %505, %var_2885)
}

def @func_1112() -> (Tensor[(7, 9, 10), float64], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) {
  %506 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
  %507 = %506.4;
  %508 = cast(%507, dtype="float64") /* ty=Tensor[(7, 9, 10), float64] */;
  %509 = cast(meta[relay.Constant][32] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %510 = reshape(%509, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
  %511 = @func_244(%510) /* ty=(Tensor[(4, 6, 11), int8],) */;
  %512 = acos(%508) /* ty=Tensor[(7, 9, 10), float64] */;
  %513 = %511.0;
  (%512, %513, meta[relay.Constant][32] /* ty=Tensor[(264), int8] */)
}

def @func_3074() -> Tensor[(264), int8] {
  %514 = @func_2581() /* ty=(Tensor[(7, 9, 10), uint16], Tensor[(264), int8], Tensor[(6, ?, 14), bool], Tensor[(630, 1), float64], Tensor[(8, 16), uint32], uint32, Tensor[(128), uint32]) */;
  %514.1
}

def @func_3690() -> (Tensor[(264), int8],) {
  %515 = @func_3230() /* ty=(Tensor[(264), int8], Tensor[(630), float32], Tensor[(16, 6, 4), float32], Tensor[(7, 9, 10), uint16], Tensor[(4, 9, 14), float32], Tensor[(504), uint16], Tensor[(4, 14, 13), int16], Tensor[(728), int16]) */;
  %516 = %515.0;
  (%516,)
}

def @func_893(%var_857: Tensor[(3, 11, 9), float32], %var_879: Tensor[(264), int8]) -> (Tensor[(3, 11, 9), int16], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(3, 11, 9), float32]) {
  %517 = cast(%var_857, dtype="float32") /* ty=Tensor[(3, 11, 9), float32] */;
  %518 = log(%517) /* ty=Tensor[(3, 11, 9), float32] */;
  %519 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 11, 9), float32] */, dtype="int16") /* ty=Tensor[(3, 11, 9), int16] */;
  %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%518, dtype="int16") /* ty=Tensor[(3, 11, 9), int16] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %523 = cast(%var_879, dtype="int8") /* ty=Tensor[(264), int8] */;
  %524 = reshape(%523, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
  %525 = @func_244(%524) /* ty=(Tensor[(4, 6, 11), int8],) */;
  %526 = cast(%var_857, dtype="float32") /* ty=Tensor[(3, 11, 9), float32] */;
  %527 = add(%521, %522) /* ty=Tensor[(3, 11, 9), int16] */;
  %528 = %525.0;
  %529 = log10(%526) /* ty=Tensor[(3, 11, 9), float32] */;
  (%527, %528, %var_879, %529)
}

def @func_2973(%var_2939: Tensor[(6, 44), int8]) -> (Tensor[(6, 1, 14), float64], Tensor[(264), float32], Tensor[(6, 44), float32]) {
  %530 = cast(%var_2939, dtype="int8") /* ty=Tensor[(6, 44), int8] */;
  %531 = reshape(%530, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %532 = @func_1871(%531) /* ty=(Tensor[(7, 9, 10), float64], Tensor[(264), int8], Tensor[(33, 9), bool]) */;
  %533 = %532.1;
  %534 = cast(meta[relay.Constant][34] /* ty=Tensor[(264), int8] */, dtype="float32") /* ty=Tensor[(264), float32] */;
  %535 = shape_of(%533, dtype="int32") /* ty=Tensor[(1), int32] */;
  %536 = cast(%533, dtype="float32") /* ty=Tensor[(264), float32] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?), float32] */;
  %538 = cast(%var_2939, dtype="float32") /* ty=Tensor[(6, 44), float32] */;
  %539 = erf(%538) /* ty=Tensor[(6, 44), float32] */;
  %540 = cast(meta[relay.Constant][34] /* ty=Tensor[(264), int8] */, dtype="float32") /* ty=Tensor[(264), float32] */;
  %541 = shape_of(%539, dtype="int32") /* ty=Tensor[(2), int32] */;
  %542 = cast(%539, dtype="float32") /* ty=Tensor[(6, 44), float32] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %544 = @func_1319() /* ty=Tensor[(6, 1, 14), float64] */;
  %545 = floor_divide(%536, %537) /* ty=Tensor[(264), float32] */;
  %546 = power(%542, %543) /* ty=Tensor[(6, 44), float32] */;
  (%544, %545, %546)
}

def @func_2243(%var_2231: Tensor[(16, 14, 12), float64]) -> (Tensor[(16, 14, 12), float32],) {
  %547 = cast(%var_2231, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
  %548 = sinh(%547) /* ty=Tensor[(16, 14, 12), float64] */;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(16, 14, 12), float32] */;
  %550 = sigmoid(%549) /* ty=Tensor[(16, 14, 12), float32] */;
  (%550,)
}

def @func_1319() -> Tensor[(6, 1, 14), float64] {
  %551 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 1, 14), float64] */, dtype="float64") /* ty=Tensor[(6, 1, 14), float64] */;
  acos(%551) /* ty=Tensor[(6, 1, 14), float64] */
}

def @func_1083() -> (Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) {
  %552 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
  %553 = %552.3;
  %554 = cast(%553, dtype="float64") /* ty=Tensor[(630), float64] */;
  %555 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %556 = erf(%554) /* ty=Tensor[(630), float64] */;
  %557 = cast(%556, dtype="int32") /* ty=Tensor[(630), int32] */;
  %558 = cast(meta[relay.Constant][36] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %559 = reshape(%555, newshape=[]) /* ty=int32 */;
  %560 = reshape(%557, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
  %561 = reshape(%558, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %562 = @func_423(%559, %560, %561) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
  %563 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %564 = cast(%556, dtype="int32") /* ty=Tensor[(630), int32] */;
  %565 = %562.3;
  %566 = cast(%565, dtype="int8") /* ty=Tensor[(4, 6, 11), int8] */;
  %567 = reshape(%563, newshape=[]) /* ty=int32 */;
  %568 = reshape(%564, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
  %569 = reshape(%566, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %570 = @func_423(%567, %568, %569) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
  %571 = cast(meta[relay.Constant][37] /* ty=Tensor[(143), int8] */, dtype="int8") /* ty=Tensor[(143), int8] */;
  %572 = cast(meta[relay.Constant][38] /* ty=Tensor[(1573), int8] */, dtype="int8") /* ty=Tensor[(1573), int8] */;
  %573 = cast(meta[relay.Constant][37] /* ty=Tensor[(143), int8] */, dtype="int8") /* ty=Tensor[(143), int8] */;
  %574 = reshape(%571, newshape=[143]) /* ty=Tensor[(143), int8] */;
  %575 = reshape(%572, newshape=[1573]) /* ty=Tensor[(1573), int8] */;
  %576 = reshape(%573, newshape=[143]) /* ty=Tensor[(143), int8] */;
  %577 = @func_1012(%574, %575, %576) /* ty=(Tensor[(4, 6, 11), int8], Tensor[(143), int16], Tensor[(1, 7, 4), float32], Tensor[(?, 7, 4), bool], Tensor[(11, 13, 11), uint8]) */;
  %578 = %570.0;
  %579 = %577.3;
  (%556, %565, 6 /* ty=int32 */, meta[relay.Constant][36] /* ty=Tensor[(264), int8] */, %578, %579, meta[relay.Constant][37] /* ty=Tensor[(143), int8] */, meta[relay.Constant][38] /* ty=Tensor[(1573), int8] */)
}

def @func_4074() -> (Tensor[(1573), int8],) {
  %580 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
  %581 = %580.7;
  (%581,)
}

def @func_1370() -> (Tensor[(7, 9, 10), float64],) {
  %582 = @func_1112() /* ty=(Tensor[(7, 9, 10), float64], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) */;
  %583 = %582.0;
  (%583,)
}

def @func_2523() -> (Tensor[(630), int32], Tensor[(264), int8], Tensor[(264), int8]) {
  %584 = @func_1620() /* ty=(Tensor[(630), int32], Tensor[(6, 1, 14), float64]) */;
  %585 = cast(meta[relay.Constant][39] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %586 = reshape(%585, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %587 = @func_1871(%586) /* ty=(Tensor[(7, 9, 10), float64], Tensor[(264), int8], Tensor[(33, 9), bool]) */;
  %588 = %584.0;
  %589 = %587.1;
  (%588, %589, meta[relay.Constant][39] /* ty=Tensor[(264), int8] */)
}

def @func_1361() -> (Tensor[(6, 1, 14), float64],) {
  %590 = @func_1319() /* ty=Tensor[(6, 1, 14), float64] */;
  (%590,)
}

def @func_3230() -> (Tensor[(264), int8], Tensor[(630), float32], Tensor[(16, 6, 4), float32], Tensor[(7, 9, 10), uint16], Tensor[(4, 9, 14), float32], Tensor[(504), uint16], Tensor[(4, 14, 13), int16], Tensor[(728), int16]) {
  %591 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
  %592 = @func_1620() /* ty=(Tensor[(630), int32], Tensor[(6, 1, 14), float64]) */;
  %593 = %592.0;
  %594 = cast(%593, dtype="float32") /* ty=Tensor[(630), float32] */;
  %595 = @func_2581() /* ty=(Tensor[(7, 9, 10), uint16], Tensor[(264), int8], Tensor[(6, ?, 14), bool], Tensor[(630, 1), float64], Tensor[(8, 16), uint32], uint32, Tensor[(128), uint32]) */;
  %596 = cast(meta[relay.Constant][40] /* ty=Tensor[(504), uint16] */, dtype="uint16") /* ty=Tensor[(504), uint16] */;
  %597 = cast(meta[relay.Constant][40] /* ty=Tensor[(504), uint16] */, dtype="uint16") /* ty=Tensor[(504), uint16] */;
  %598 = reshape(%596, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), uint16] */;
  %599 = reshape(%597, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), uint16] */;
  %600 = @func_1174(%598, %599) /* ty=(Tensor[(4, 9, 14), uint16], Tensor[(4, 9, 14), float64], Tensor[(4, 9, 14), float32], Tensor[(630), float64]) */;
  %601 = cast(meta[relay.Constant][41] /* ty=Tensor[(728), int16] */, dtype="int16") /* ty=Tensor[(728), int16] */;
  %602 = cast(meta[relay.Constant][41] /* ty=Tensor[(728), int16] */, dtype="int16") /* ty=Tensor[(728), int16] */;
  %603 = reshape(%601, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), int16] */;
  %604 = reshape(%602, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), int16] */;
  %605 = @func_2643(%603, %604) /* ty=(Tensor[(4, 14, 13), int16],) */;
  %606 = %591.3;
  %607 = sinh(%594) /* ty=Tensor[(630), float32] */;
  %608 = @func_2204() /* ty=Tensor[(16, 6, 4), float32] */;
  %609 = %595.0;
  %610 = %600.2;
  %611 = %605.0;
  (%606, %607, %608, %609, %610, meta[relay.Constant][40] /* ty=Tensor[(504), uint16] */, %611, meta[relay.Constant][41] /* ty=Tensor[(728), int16] */)
}

def @func_1871(%var_1865: Tensor[(264), int8]) -> (Tensor[(7, 9, 10), float64], Tensor[(264), int8], Tensor[(33, 9), bool]) {
  %612 = cast(meta[relay.Constant][42] /* ty=Tensor[(33, 9), float32] */, dtype="float32") /* ty=Tensor[(33, 9), float32] */;
  %613 = cast(%var_1865, dtype="int8") /* ty=Tensor[(264), int8] */;
  %614 = reshape(%612, newshape=[3, 11, 9]) /* ty=Tensor[(3, 11, 9), float32] */;
  %615 = reshape(%613, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %616 = @func_893(%614, %615) /* ty=(Tensor[(3, 11, 9), int16], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(3, 11, 9), float32]) */;
  %617 = %616.3;
  %618 = cast(%617, dtype="bool") /* ty=Tensor[(3, 11, 9), bool] */;
  %619 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(33, 9), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %620 = cast(meta[relay.Constant][42] /* ty=Tensor[(33, 9), float32] */, dtype="bool") /* ty=Tensor[(33, 9), bool] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %622 = @func_1859() /* ty=Tensor[(7, 9, 10), float64] */;
  %623 = equal(%620, %621) /* ty=Tensor[(33, 9), bool] */;
  (%622, %var_1865, %623)
}

def @func_423(%var_380: int32, %var_381: Tensor[(7, 9, 10), int32], %var_399: Tensor[(264), int8]) -> (Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) {
  %624 = cast(%var_380, dtype="bool") /* ty=bool */;
  %625 = cast(%var_381, dtype="bool") /* ty=Tensor[(7, 9, 10), bool] */;
  %626 = cast(%var_381, dtype="uint8") /* ty=Tensor[(7, 9, 10), uint8] */;
  %627 = cast(%var_380, dtype="uint8") /* ty=uint8 */;
  %628 = cast(%var_399, dtype="int8") /* ty=Tensor[(264), int8] */;
  %629 = reshape(%628, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
  %630 = @func_244(%629) /* ty=(Tensor[(4, 6, 11), int8],) */;
  %631 = %630.0;
  %632 = cast(%631, dtype="float32") /* ty=Tensor[(4, 6, 11), float32] */;
  %633 = acosh(%632) /* ty=Tensor[(4, 6, 11), float32] */;
  %634 = cast(%633, dtype="int8") /* ty=Tensor[(4, 6, 11), int8] */;
  %635 = reshape(%634, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
  %636 = @func_244(%635) /* ty=(Tensor[(4, 6, 11), int8],) */;
  %637 = cast(%var_381, dtype="float32") /* ty=Tensor[(7, 9, 10), float32] */;
  %638 = less(%624, %625) /* ty=Tensor[(7, 9, 10), bool] */;
  %639 = maximum(%626, %627) /* ty=Tensor[(7, 9, 10), uint8] */;
  %640 = %636.0;
  %641 = asin(%637) /* ty=Tensor[(7, 9, 10), float32] */;
  (%638, %639, %var_399, %633, %640, %641)
}

def @func_1259() -> (Tensor[(630), int32],) {
  %642 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
  %643 = %642.3;
  (%643,)
}

def @func_3315() -> (Tensor[(630), int32],) {
  %644 = @func_1620() /* ty=(Tensor[(630), int32], Tensor[(6, 1, 14), float64]) */;
  %645 = %644.0;
  (%645,)
}

def @func_3548() -> (Tensor[(7, 9, 10), float64], Tensor[(1573), int8], Tensor[(4, 6, 11), int8]) {
  %646 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
  %647 = cast(meta[relay.Constant][43] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %648 = reshape(%647, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
  %649 = @func_244(%648) /* ty=(Tensor[(4, 6, 11), int8],) */;
  %650 = %649.0;
  %651 = cast(%650, dtype="float64") /* ty=Tensor[(4, 6, 11), float64] */;
  %652 = sinh(%651) /* ty=Tensor[(4, 6, 11), float64] */;
  %653 = cast(meta[relay.Constant][43] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%652, dtype="int8") /* ty=Tensor[(4, 6, 11), int8] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %657 = @func_2724() /* ty=Tensor[(7, 9, 10), float64] */;
  %658 = %646.7;
  %659 = left_shift(%655, %656) /* ty=Tensor[(4, 6, 11), int8] */;
  (%657, %658, %659)
}

def @func_2389(%var_2288: Tensor[(6, 9, 14), float64], %var_2316: Tensor[(143), int8], %var_2343: Tensor[(168), float64], %var_2383: int32, %var_2385: Tensor[(264), int8]) -> (Tensor[(11, 13, 11), bool], Tensor[(143), int8], Tensor[(1573), int8], Tensor[(6, ?, 14), bool], Tensor[(6, 2, 14), bool], Tensor[(168), float64], Tensor[(11, 13, 11), int32], Tensor[(168), float64], Tensor[(6, 9, 14), bool], Tensor[(4, 6, 11), float32], int32, Tensor[(210, 3), int32], Tensor[(264), int8]) {
  %660 = cast(%var_2316, dtype="int8") /* ty=Tensor[(143), int8] */;
  %661 = cast(meta[relay.Constant][44] /* ty=Tensor[(1573), int8] */, dtype="int8") /* ty=Tensor[(1573), int8] */;
  %662 = reshape(%660, newshape=[11, 13, 1]) /* ty=Tensor[(11, 13, 1), int8] */;
  %663 = reshape(%661, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), int8] */;
  %664 = @func_533(%662, %663) /* ty=(Tensor[(11, 13, 11), bool], Tensor[(11, 13, 11), int32]) */;
  %665 = @func_1319() /* ty=Tensor[(6, 1, 14), float64] */;
  %666 = cast(%665, dtype="float64") /* ty=Tensor[(6, 1, 14), float64] */;
  %667 = cosh(%666) /* ty=Tensor[(6, 1, 14), float64] */;
  %668 = cast(%665, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%667, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %672 = cast(%var_2343, dtype="float64") /* ty=Tensor[(168), float64] */;
  %673 = reshape(%672, newshape=[6, 2, 14]) /* ty=Tensor[(6, 2, 14), float64] */;
  %674 = cast(%var_2316, dtype="int8") /* ty=Tensor[(143), int8] */;
  %675 = %664.0;
  %676 = cast(%675, dtype="int8") /* ty=Tensor[(11, 13, 11), int8] */;
  %677 = reshape(%674, newshape=[11, 13, 1]) /* ty=Tensor[(11, 13, 1), int8] */;
  %678 = reshape(%676, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), int8] */;
  %679 = @func_533(%677, %678) /* ty=(Tensor[(11, 13, 11), bool], Tensor[(11, 13, 11), int32]) */;
  %680 = @func_1714(%673) /* ty=Tensor[(6, 2, 14), bool] */;
  %681 = cast(%680, dtype="float64") /* ty=Tensor[(6, 2, 14), float64] */;
  %682 = reshape(%681, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %683 = @func_1829(%682) /* ty=(Tensor[(143), int8], Tensor[(6, 2, 14), bool], Tensor[(168), float64], int32) */;
  %684 = cast(%667, dtype="float64") /* ty=Tensor[(6, 1, 14), float64] */;
  %685 = cos(%684) /* ty=Tensor[(6, 1, 14), float64] */;
  %686 = cast(%665, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %687 = cast(%var_2288, dtype="bool") /* ty=Tensor[(6, 9, 14), bool] */;
  %688 = equal(%686, %687) /* ty=Tensor[(6, 9, 14), bool] */;
  %689 = cast(%685, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %690 = cast(%688, dtype="bool") /* ty=Tensor[(6, 9, 14), bool] */;
  %691 = logical_and(%689, %690) /* ty=Tensor[(6, 9, 14), bool] */;
  %692 = cast(%691, dtype="float64") /* ty=Tensor[(6, 9, 14), float64] */;
  %693 = asinh(%692) /* ty=Tensor[(6, 9, 14), float64] */;
  %694 = cast(%667, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %695 = cast(%693, dtype="bool") /* ty=Tensor[(6, 9, 14), bool] */;
  %696 = cast(%var_2383, dtype="int32") /* ty=int32 */;
  %697 = cast(meta[relay.Constant][45] /* ty=Tensor[(210, 3), int32] */, dtype="int32") /* ty=Tensor[(210, 3), int32] */;
  %698 = cast(%var_2385, dtype="int8") /* ty=Tensor[(264), int8] */;
  %699 = reshape(%696, newshape=[]) /* ty=int32 */;
  %700 = reshape(%697, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
  %701 = reshape(%698, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %702 = @func_423(%699, %700, %701) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
  %703 = logical_and(%670, %671) /* ty=Tensor[(6, ?, 14), bool] */;
  %704 = %679.1;
  %705 = %683.2;
  %706 = logical_or(%694, %695) /* ty=Tensor[(6, 9, 14), bool] */;
  %707 = %702.3;
  (%675, %var_2316, meta[relay.Constant][44] /* ty=Tensor[(1573), int8] */, %703, %680, %var_2343, %704, %705, %706, %707, %var_2383, meta[relay.Constant][45] /* ty=Tensor[(210, 3), int32] */, %var_2385)
}

def @func_1859() -> Tensor[(7, 9, 10), float64] {
  %708 = @func_1370() /* ty=(Tensor[(7, 9, 10), float64],) */;
  %708.0
}

def @func_2724() -> Tensor[(7, 9, 10), float64] {
  %709 = @func_1370() /* ty=(Tensor[(7, 9, 10), float64],) */;
  %709.0
}

def @func_2204() -> Tensor[(16, 6, 4), float32] {
  %710 = cast(meta[relay.Constant][46] /* ty=Tensor[(16, 6, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 6, 4), float32] */;
  asinh(%710) /* ty=Tensor[(16, 6, 4), float32] */
}

def @func_3565() -> (Tensor[(630), int32],) {
  %711 = @func_2523() /* ty=(Tensor[(630), int32], Tensor[(264), int8], Tensor[(264), int8]) */;
  %712 = %711.0;
  (%712,)
}

def @func_4141() -> (Tensor[(630), int32],) {
  %713 = @func_1620() /* ty=(Tensor[(630), int32], Tensor[(6, 1, 14), float64]) */;
  %714 = %713.0;
  (%714,)
}

def @func_3459(%var_3432: Tensor[(4, 11, 2), float32], %var_3453: Tensor[(132, 2), int8]) -> (Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(?, 7, 4), int16], Tensor[(132, 2), int8]) {
  %715 = cast(%var_3432, dtype="float32") /* ty=Tensor[(4, 11, 2), float32] */;
  %716 = cos(%715) /* ty=Tensor[(4, 11, 2), float32] */;
  %717 = cast(%var_3432, dtype="bool") /* ty=Tensor[(4, 11, 2), bool] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%716, dtype="bool") /* ty=Tensor[(4, 11, 2), bool] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %721 = cast(%var_3432, dtype="float64") /* ty=Tensor[(4, 11, 2), float64] */;
  %722 = cast(%var_3453, dtype="int8") /* ty=Tensor[(132, 2), int8] */;
  %723 = reshape(%722, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %724 = @func_1253(%723) /* ty=(Tensor[(?, 7, 4), float32], Tensor[(?, 7, 4), int16], Tensor[(?, 7, 4), float32], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) */;
  %725 = not_equal(%719, %720) /* ty=Tensor[(4, 11, 2), bool] */;
  %726 = sinh(%721) /* ty=Tensor[(4, 11, 2), float64] */;
  %727 = %724.1;
  (%725, %726, %727, %var_3453)
}

def @func_3823() -> Tensor[(264), int8] {
  @func_3074() /* ty=Tensor[(264), int8] */
}

def @func_1174(%var_1123: Tensor[(4, 9, 14), uint16], %var_1124: Tensor[(4, 9, 14), uint16]) -> (Tensor[(4, 9, 14), uint16], Tensor[(4, 9, 14), float64], Tensor[(4, 9, 14), float32], Tensor[(630), float64]) {
  %728 = cast(%var_1124, dtype="uint16") /* ty=Tensor[(4, 9, 14), uint16] */;
  %729 = shape_of(%var_1123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(%var_1123, dtype="uint16") /* ty=Tensor[(4, 9, 14), uint16] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %732 = cast(%var_1123, dtype="float32") /* ty=Tensor[(4, 9, 14), float32] */;
  %733 = cosh(%732) /* ty=Tensor[(4, 9, 14), float32] */;
  %734 = cast(%733, dtype="float64") /* ty=Tensor[(4, 9, 14), float64] */;
  %735 = cast(%var_1123, dtype="float32") /* ty=Tensor[(4, 9, 14), float32] */;
  %736 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
  %737 = bitwise_or(%730, %731) /* ty=Tensor[(4, 9, 14), uint16] */;
  %738 = log10(%734) /* ty=Tensor[(4, 9, 14), float64] */;
  %739 = atan(%735) /* ty=Tensor[(4, 9, 14), float32] */;
  %740 = %736.0;
  (%737, %738, %739, %740)
}

def @func_3976(%var_3959: Tensor[(630), int32]) -> (Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(264), int8], int32, Tensor[(630), int32], Tensor[(264), int8], Tensor[(4, 6, 11), int8]) {
  %741 = @func_2811() /* ty=Tensor[(4, 6, 11), int8] */;
  %742 = cast(%741, dtype="float32") /* ty=Tensor[(4, 6, 11), float32] */;
  %743 = erf(%742) /* ty=Tensor[(4, 6, 11), float32] */;
  %744 = cast(%743, dtype="int8") /* ty=Tensor[(4, 6, 11), int8] */;
  %745 = reshape(%744, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
  %746 = @func_244(%745) /* ty=(Tensor[(4, 6, 11), int8],) */;
  %747 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %748 = cast(%var_3959, dtype="int32") /* ty=Tensor[(630), int32] */;
  %749 = cast(%741, dtype="int8") /* ty=Tensor[(4, 6, 11), int8] */;
  %750 = reshape(%747, newshape=[]) /* ty=int32 */;
  %751 = reshape(%748, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
  %752 = reshape(%749, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %753 = @func_423(%750, %751, %752) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
  %754 = %746.0;
  %755 = %753.2;
  %756 = @func_3823() /* ty=Tensor[(264), int8] */;
  %757 = @func_2811() /* ty=Tensor[(4, 6, 11), int8] */;
  (%743, %754, %755, -2 /* ty=int32 */, %var_3959, %756, %757)
}

def @func_4422() -> (Tensor[(8, 16), uint32], Tensor[(4, 6, 11), float64]) {
  %758 = @func_2581() /* ty=(Tensor[(7, 9, 10), uint16], Tensor[(264), int8], Tensor[(6, ?, 14), bool], Tensor[(630, 1), float64], Tensor[(8, 16), uint32], uint32, Tensor[(128), uint32]) */;
  %759 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
  %760 = %759.1;
  %761 = cast(%760, dtype="float64") /* ty=Tensor[(4, 6, 11), float64] */;
  %762 = %758.4;
  %763 = tan(%761) /* ty=Tensor[(4, 6, 11), float64] */;
  (%762, %763)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4373() -> (Tensor[(6, 1, 14), float64], Tensor[(4, 6, 11), float32], Tensor[(1, 7, 4), float64]) {
  %0 = @func_1361() /* ty=(Tensor[(6, 1, 14), float64],) */;
  %1 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
  %2 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
  %3 = %0.0;
  %4 = %1.1;
  %5 = %2.0;
  (%3, %4, %5)
}

def @func_2389(%var_2288: Tensor[(6, 9, 14), float64], %var_2316: Tensor[(143), int8], %var_2343: Tensor[(168), float64], %var_2383: int32, %var_2385: Tensor[(264), int8]) -> (Tensor[(11, 13, 11), bool], Tensor[(143), int8], Tensor[(1573), int8], Tensor[(6, ?, 14), bool], Tensor[(6, 2, 14), bool], Tensor[(168), float64], Tensor[(11, 13, 11), int32], Tensor[(168), float64], Tensor[(6, 9, 14), bool], Tensor[(4, 6, 11), float32], int32, Tensor[(210, 3), int32], Tensor[(264), int8]) {
  %6 = cast(%var_2316, dtype="int8") /* ty=Tensor[(143), int8] */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(1573), int8] */, dtype="int8") /* ty=Tensor[(1573), int8] */;
  %8 = reshape(%6, newshape=[11, 13, 1]) /* ty=Tensor[(11, 13, 1), int8] */;
  %9 = reshape(%7, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), int8] */;
  %10 = @func_533(%8, %9) /* ty=(Tensor[(11, 13, 11), bool], Tensor[(11, 13, 11), int32]) */;
  %11 = @func_1319() /* ty=Tensor[(6, 1, 14), float64] */;
  %12 = cast(%11, dtype="float64") /* ty=Tensor[(6, 1, 14), float64] */;
  %13 = cosh(%12) /* ty=Tensor[(6, 1, 14), float64] */;
  %14 = cast(%11, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %18 = cast(%var_2343, dtype="float64") /* ty=Tensor[(168), float64] */;
  %19 = reshape(%18, newshape=[6, 2, 14]) /* ty=Tensor[(6, 2, 14), float64] */;
  %20 = cast(%var_2316, dtype="int8") /* ty=Tensor[(143), int8] */;
  %21 = %10.0;
  %22 = cast(%21, dtype="int8") /* ty=Tensor[(11, 13, 11), int8] */;
  %23 = reshape(%20, newshape=[11, 13, 1]) /* ty=Tensor[(11, 13, 1), int8] */;
  %24 = reshape(%22, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), int8] */;
  %25 = @func_533(%23, %24) /* ty=(Tensor[(11, 13, 11), bool], Tensor[(11, 13, 11), int32]) */;
  %26 = @func_1714(%19) /* ty=Tensor[(6, 2, 14), bool] */;
  %27 = cast(%26, dtype="float64") /* ty=Tensor[(6, 2, 14), float64] */;
  %28 = reshape(%27, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %29 = @func_1829(%28) /* ty=(Tensor[(143), int8], Tensor[(6, 2, 14), bool], Tensor[(168), float64], int32) */;
  %30 = cast(%13, dtype="float64") /* ty=Tensor[(6, 1, 14), float64] */;
  %31 = cos(%30) /* ty=Tensor[(6, 1, 14), float64] */;
  %32 = cast(%11, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %33 = cast(%var_2288, dtype="bool") /* ty=Tensor[(6, 9, 14), bool] */;
  %34 = equal(%32, %33) /* ty=Tensor[(6, 9, 14), bool] */;
  %35 = cast(%31, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %36 = cast(%34, dtype="bool") /* ty=Tensor[(6, 9, 14), bool] */;
  %37 = logical_and(%35, %36) /* ty=Tensor[(6, 9, 14), bool] */;
  %38 = cast(%37, dtype="float64") /* ty=Tensor[(6, 9, 14), float64] */;
  %39 = asinh(%38) /* ty=Tensor[(6, 9, 14), float64] */;
  %40 = cast(%13, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %41 = cast(%39, dtype="bool") /* ty=Tensor[(6, 9, 14), bool] */;
  %42 = cast(%var_2383, dtype="int32") /* ty=int32 */;
  %43 = cast(meta[relay.Constant][1] /* ty=Tensor[(210, 3), int32] */, dtype="int32") /* ty=Tensor[(210, 3), int32] */;
  %44 = cast(%var_2385, dtype="int8") /* ty=Tensor[(264), int8] */;
  %45 = reshape(%42, newshape=[]) /* ty=int32 */;
  %46 = reshape(%43, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
  %47 = reshape(%44, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %48 = @func_423(%45, %46, %47) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
  %49 = logical_and(%16, %17) /* ty=Tensor[(6, ?, 14), bool] */;
  %50 = %25.1;
  %51 = %29.2;
  %52 = logical_or(%40, %41) /* ty=Tensor[(6, 9, 14), bool] */;
  %53 = %48.3;
  (%21, %var_2316, meta[relay.Constant][0] /* ty=Tensor[(1573), int8] */, %49, %26, %var_2343, %50, %51, %52, %53, %var_2383, meta[relay.Constant][1] /* ty=Tensor[(210, 3), int32] */, %var_2385)
}

def @func_3567() -> (Tensor[(630), int32],) {
  @func_3565() /* ty=(Tensor[(630), int32],) */
}

def @func_1533(%var_1531: Tensor[(264), int8], %var_1532: Tensor[(1, 143), int8]) -> (Tensor[(630), int32], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), float64], Tensor[(1, 7, 4), float32], Tensor[(1, 143), int8], Tensor[(1573), int8], Tensor[(7, 9, 10), float64], Tensor[(297), float32], Tensor[(297), float64], Tensor[(11, 13, 11), int32]) {
  @func_1529(%var_1531, %var_1532) /* ty=(Tensor[(630), int32], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), float64], Tensor[(1, 7, 4), float32], Tensor[(1, 143), int8], Tensor[(1573), int8], Tensor[(7, 9, 10), float64], Tensor[(297), float32], Tensor[(297), float64], Tensor[(11, 13, 11), int32]) */
}

def @func_1649(%var_1648: int32) -> (Tensor[(6, 1, 14), float64], Tensor[(264), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) {
  %63 = fn (%var_1639: int32) -> (Tensor[(6, 1, 14), float64], Tensor[(264), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) {
    %54 = cast(%var_1639, dtype="int32") /* ty=int32 */;
    %55 = cast(meta[relay.Constant][2] /* ty=Tensor[(630), int32] */, dtype="int32") /* ty=Tensor[(630), int32] */;
    %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
    %57 = reshape(%54, newshape=[]) /* ty=int32 */;
    %58 = reshape(%55, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
    %59 = reshape(%56, newshape=[264]) /* ty=Tensor[(264), int8] */;
    %60 = @func_423(%57, %58, %59) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
    %61 = @func_1319() /* ty=Tensor[(6, 1, 14), float64] */;
    %62 = %60.2;
    (%61, %62, %var_1639, meta[relay.Constant][2] /* ty=Tensor[(630), int32] */, meta[relay.Constant][3] /* ty=Tensor[(264), int8] */)
  };
  %63(%var_1648) /* ty=(Tensor[(6, 1, 14), float64], Tensor[(264), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */
}

def @func_3231() -> (Tensor[(264), int8], Tensor[(630), float32], Tensor[(16, 6, 4), float32], Tensor[(7, 9, 10), uint16], Tensor[(4, 9, 14), float32], Tensor[(504), uint16], Tensor[(4, 14, 13), int16], Tensor[(728), int16]) {
  %85 = fn () -> (Tensor[(264), int8], Tensor[(630), float32], Tensor[(16, 6, 4), float32], Tensor[(7, 9, 10), uint16], Tensor[(4, 9, 14), float32], Tensor[(504), uint16], Tensor[(4, 14, 13), int16], Tensor[(728), int16]) {
    %64 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
    %65 = @func_1620() /* ty=(Tensor[(630), int32], Tensor[(6, 1, 14), float64]) */;
    %66 = %65.0;
    %67 = cast(%66, dtype="float32") /* ty=Tensor[(630), float32] */;
    %68 = @func_2581() /* ty=(Tensor[(7, 9, 10), uint16], Tensor[(264), int8], Tensor[(6, ?, 14), bool], Tensor[(630, 1), float64], Tensor[(8, 16), uint32], uint32, Tensor[(128), uint32]) */;
    %69 = cast(meta[relay.Constant][4] /* ty=Tensor[(504), uint16] */, dtype="uint16") /* ty=Tensor[(504), uint16] */;
    %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(504), uint16] */, dtype="uint16") /* ty=Tensor[(504), uint16] */;
    %71 = reshape(%69, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), uint16] */;
    %72 = reshape(%70, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), uint16] */;
    %73 = @func_1174(%71, %72) /* ty=(Tensor[(4, 9, 14), uint16], Tensor[(4, 9, 14), float64], Tensor[(4, 9, 14), float32], Tensor[(630), float64]) */;
    %74 = cast(meta[relay.Constant][5] /* ty=Tensor[(728), int16] */, dtype="int16") /* ty=Tensor[(728), int16] */;
    %75 = cast(meta[relay.Constant][5] /* ty=Tensor[(728), int16] */, dtype="int16") /* ty=Tensor[(728), int16] */;
    %76 = reshape(%74, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), int16] */;
    %77 = reshape(%75, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), int16] */;
    %78 = @func_2643(%76, %77) /* ty=(Tensor[(4, 14, 13), int16],) */;
    %79 = %64.3;
    %80 = sinh(%67) /* ty=Tensor[(630), float32] */;
    %81 = @func_2204() /* ty=Tensor[(16, 6, 4), float32] */;
    %82 = %68.0;
    %83 = %73.2;
    %84 = %78.0;
    (%79, %80, %81, %82, %83, meta[relay.Constant][4] /* ty=Tensor[(504), uint16] */, %84, meta[relay.Constant][5] /* ty=Tensor[(728), int16] */)
  };
  %85() /* ty=(Tensor[(264), int8], Tensor[(630), float32], Tensor[(16, 6, 4), float32], Tensor[(7, 9, 10), uint16], Tensor[(4, 9, 14), float32], Tensor[(504), uint16], Tensor[(4, 14, 13), int16], Tensor[(728), int16]) */
}

def @func_3843() -> (Tensor[(264), int8],) {
  %88 = fn () -> (Tensor[(264), int8],) {
    %86 = @func_3033() /* ty=(Tensor[(264), int8], Tensor[(9, 4, 15), float64], Tensor[(18, 30), float64]) */;
    %87 = %86.0;
    (%87,)
  };
  %88() /* ty=(Tensor[(264), int8],) */
}

def @func_1260() -> (Tensor[(630), int32],) {
  %91 = fn () -> (Tensor[(630), int32],) {
    %89 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
    %90 = %89.3;
    (%90,)
  };
  %91() /* ty=(Tensor[(630), int32],) */
}

def @func_1620() -> (Tensor[(630), int32], Tensor[(6, 1, 14), float64]) {
  %92 = @func_1355() /* ty=(Tensor[(630), int32],) */;
  %93 = @func_1361() /* ty=(Tensor[(6, 1, 14), float64],) */;
  %94 = %92.0;
  %95 = %93.0;
  (%94, %95)
}

def @func_246(%var_245: Tensor[(4, 6, 11), int8]) -> (Tensor[(4, 6, 11), int8],) {
  %99 = fn (%var_231: Tensor[(4, 6, 11), int8]) -> (Tensor[(4, 6, 11), int8],) {
    %96 = cast(meta[relay.Constant][6] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %97 = cast(%var_231, dtype="int8") /* ty=Tensor[(4, 6, 11), int8] */;
    %98 = bitwise_or(%96, %97) /* ty=Tensor[(4, 6, 11), int8] */;
    (%98,)
  };
  %99(%var_245) /* ty=(Tensor[(4, 6, 11), int8],) */
}

def @func_3141(%var_3138: Tensor[(6, 14, 12), float32], %var_3139: Tensor[(6, 14, 12), float32], %var_3140: Tensor[(128), uint32]) -> (Tensor[(4, 14, 13), int16], Tensor[(728), int16], Tensor[(6, 14, 12), bool], Tensor[(6, 14, 12), float32], Tensor[(8, 16), uint32], uint32, Tensor[(128), uint32], Tensor[(14, 4, 4), uint32], Tensor[(224, 1), float64], Tensor[(6, 14, 12), float32], int32) {
  %137 = fn (%var_3086: Tensor[(6, 14, 12), float32], %var_3107: Tensor[(6, 14, 12), float32], %var_3117: Tensor[(128), uint32]) -> (Tensor[(4, 14, 13), int16], Tensor[(728), int16], Tensor[(6, 14, 12), bool], Tensor[(6, 14, 12), float32], Tensor[(8, 16), uint32], uint32, Tensor[(128), uint32], Tensor[(14, 4, 4), uint32], Tensor[(224, 1), float64], Tensor[(6, 14, 12), float32], int32) {
    %100 = cast(meta[relay.Constant][7] /* ty=Tensor[(728), int16] */, dtype="int16") /* ty=Tensor[(728), int16] */;
    %101 = cast(meta[relay.Constant][7] /* ty=Tensor[(728), int16] */, dtype="int16") /* ty=Tensor[(728), int16] */;
    %102 = reshape(%100, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), int16] */;
    %103 = reshape(%101, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), int16] */;
    %104 = @func_2643(%102, %103) /* ty=(Tensor[(4, 14, 13), int16],) */;
    %105 = cast(%var_3086, dtype="float32") /* ty=Tensor[(6, 14, 12), float32] */;
    %106 = atan(%105) /* ty=Tensor[(6, 14, 12), float32] */;
    %107 = cast(%var_3107, dtype="bool") /* ty=Tensor[(6, 14, 12), bool] */;
    %108 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
    %109 = cast(%106, dtype="bool") /* ty=Tensor[(6, 14, 12), bool] */;
    %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %111 = cast(%var_3086, dtype="float32") /* ty=Tensor[(6, 14, 12), float32] */;
    %112 = cast(meta[relay.Constant][8] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %113 = cast(%var_3117, dtype="uint32") /* ty=Tensor[(128), uint32] */;
    %114 = reshape(%112, newshape=[]) /* ty=uint32 */;
    %115 = reshape(%113, newshape=[8, 16]) /* ty=Tensor[(8, 16), uint32] */;
    %116 = cast(meta[relay.Constant][9] /* ty=Tensor[(224, 1), float64] */, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
    %117 = cast(meta[relay.Constant][9] /* ty=Tensor[(224, 1), float64] */, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
    %118 = reshape(%116, newshape=[14, 4, 4]) /* ty=Tensor[(14, 4, 4), float64] */;
    %119 = reshape(%117, newshape=[14, 4, 4]) /* ty=Tensor[(14, 4, 4), float64] */;
    %120 = @func_2174(%118, %119) /* ty=(Tensor[(14, 4, 4), uint32],) */;
    %121 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 14, 12), float32] */, dtype="int32") /* ty=Tensor[(6, 14, 12), int32] */;
    %122 = shape_of(%var_3086, dtype="int32") /* ty=Tensor[(3), int32] */;
    %123 = cast(%var_3086, dtype="int32") /* ty=Tensor[(6, 14, 12), int32] */;
    %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %125 = bitwise_and(%123, %124) /* ty=Tensor[(6, 14, 12), int32] */;
    %126 = cast(%125, dtype="float32") /* ty=Tensor[(6, 14, 12), float32] */;
    %127 = erf(%126) /* ty=Tensor[(6, 14, 12), float32] */;
    %128 = cast(%127, dtype="float32") /* ty=Tensor[(6, 14, 12), float32] */;
    %129 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
    %130 = %104.0;
    %131 = equal(%109, %110) /* ty=Tensor[(6, 14, 12), bool] */;
    %132 = sigmoid(%111) /* ty=Tensor[(6, 14, 12), float32] */;
    %133 = @func_2261(%114, %115) /* ty=Tensor[(8, 16), uint32] */;
    %134 = %120.0;
    %135 = sinh(%128) /* ty=Tensor[(6, 14, 12), float32] */;
    %136 = %129.2;
    (%130, meta[relay.Constant][7] /* ty=Tensor[(728), int16] */, %131, %132, %133, meta[relay.Constant][8] /* ty=uint32 */, %var_3117, %134, meta[relay.Constant][9] /* ty=Tensor[(224, 1), float64] */, %135, %136)
  };
  %137(%var_3138, %var_3139, %var_3140) /* ty=(Tensor[(4, 14, 13), int16], Tensor[(728), int16], Tensor[(6, 14, 12), bool], Tensor[(6, 14, 12), float32], Tensor[(8, 16), uint32], uint32, Tensor[(128), uint32], Tensor[(14, 4, 4), uint32], Tensor[(224, 1), float64], Tensor[(6, 14, 12), float32], int32) */
}

def @func_3878() -> Tensor[(630), int32] {
  %139 = fn () -> Tensor[(630), int32] {
    %138 = @func_3315() /* ty=(Tensor[(630), int32],) */;
    %138.0
  };
  %139() /* ty=Tensor[(630), int32] */
}

def @func_3033() -> (Tensor[(264), int8], Tensor[(9, 4, 15), float64], Tensor[(18, 30), float64]) {
  %140 = @func_1112() /* ty=(Tensor[(7, 9, 10), float64], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) */;
  %141 = cast(meta[relay.Constant][11] /* ty=Tensor[(18, 30), float64] */, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %142 = cast(meta[relay.Constant][11] /* ty=Tensor[(18, 30), float64] */, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %143 = reshape(%141, newshape=[9, 4, 15]) /* ty=Tensor[(9, 4, 15), float64] */;
  %144 = reshape(%142, newshape=[9, 4, 15]) /* ty=Tensor[(9, 4, 15), float64] */;
  %145 = @func_1545(%143, %144) /* ty=(Tensor[(9, 4, 15), float64],) */;
  %146 = %140.2;
  %147 = %145.0;
  (%146, %147, meta[relay.Constant][11] /* ty=Tensor[(18, 30), float64] */)
}

def @func_3550() -> (Tensor[(7, 9, 10), float64], Tensor[(1573), int8], Tensor[(4, 6, 11), int8]) {
  @func_3548() /* ty=(Tensor[(7, 9, 10), float64], Tensor[(1573), int8], Tensor[(4, 6, 11), int8]) */
}

def @func_1363() -> (Tensor[(6, 1, 14), float64],) {
  @func_1361() /* ty=(Tensor[(6, 1, 14), float64],) */
}

def @func_537(%var_535: Tensor[(11, 13, 1), int8], %var_536: Tensor[(11, 13, 11), int8]) -> (Tensor[(11, 13, 11), bool], Tensor[(11, 13, 11), int32]) {
  @func_533(%var_535, %var_536) /* ty=(Tensor[(11, 13, 11), bool], Tensor[(11, 13, 11), int32]) */
}

def @func_2264(%var_2262: uint32, %var_2263: Tensor[(8, 16), uint32]) -> Tensor[(8, 16), uint32] {
  %150 = fn (%var_2248: uint32, %var_2249: Tensor[(8, 16), uint32]) -> Tensor[(8, 16), uint32] {
    %148 = cast(%var_2248, dtype="uint32") /* ty=uint32 */;
    %149 = cast(%var_2249, dtype="uint32") /* ty=Tensor[(8, 16), uint32] */;
    maximum(%148, %149) /* ty=Tensor[(8, 16), uint32] */
  };
  %150(%var_2262, %var_2263) /* ty=Tensor[(8, 16), uint32] */
}

def @func_3548() -> (Tensor[(7, 9, 10), float64], Tensor[(1573), int8], Tensor[(4, 6, 11), int8]) {
  %151 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
  %152 = cast(meta[relay.Constant][12] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %153 = reshape(%152, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
  %154 = @func_244(%153) /* ty=(Tensor[(4, 6, 11), int8],) */;
  %155 = %154.0;
  %156 = cast(%155, dtype="float64") /* ty=Tensor[(4, 6, 11), float64] */;
  %157 = sinh(%156) /* ty=Tensor[(4, 6, 11), float64] */;
  %158 = cast(meta[relay.Constant][12] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%157, dtype="int8") /* ty=Tensor[(4, 6, 11), int8] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %162 = @func_2724() /* ty=Tensor[(7, 9, 10), float64] */;
  %163 = %151.7;
  %164 = left_shift(%160, %161) /* ty=Tensor[(4, 6, 11), int8] */;
  (%162, %163, %164)
}

def @func_1860() -> Tensor[(7, 9, 10), float64] {
  %166 = fn () -> Tensor[(7, 9, 10), float64] {
    %165 = @func_1370() /* ty=(Tensor[(7, 9, 10), float64],) */;
    %165.0
  };
  %166() /* ty=Tensor[(7, 9, 10), float64] */
}

def @func_2177(%var_2175: Tensor[(14, 4, 4), float64], %var_2176: Tensor[(14, 4, 4), float64]) -> (Tensor[(14, 4, 4), uint32],) {
  %177 = fn (%var_2144: Tensor[(14, 4, 4), float64], %var_2145: Tensor[(14, 4, 4), float64]) -> (Tensor[(14, 4, 4), uint32],) {
    %167 = cast(%var_2145, dtype="float64") /* ty=Tensor[(14, 4, 4), float64] */;
    %168 = shape_of(%var_2144, dtype="int32") /* ty=Tensor[(3), int32] */;
    %169 = cast(%var_2144, dtype="float64") /* ty=Tensor[(14, 4, 4), float64] */;
    %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %171 = divide(%169, %170) /* ty=Tensor[(14, 4, 4), float64] */;
    %172 = cast(%171, dtype="uint32") /* ty=Tensor[(14, 4, 4), uint32] */;
    %173 = shape_of(%var_2144, dtype="int32") /* ty=Tensor[(3), int32] */;
    %174 = cast(%var_2144, dtype="uint32") /* ty=Tensor[(14, 4, 4), uint32] */;
    %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %176 = bitwise_or(%174, %175) /* ty=Tensor[(14, 4, 4), uint32] */;
    (%176,)
  };
  %177(%var_2175, %var_2176) /* ty=(Tensor[(14, 4, 4), uint32],) */
}

def @func_3934(%var_3921: Tensor[(9, 14, 10), int64], %var_3922: Tensor[(9, 14, 10), int64]) -> (Tensor[(9, 14, 10), bool], Tensor[(6, 6, 14), bool], Tensor[(504), float64], Tensor[(9, 14, 10), float32]) {
  %178 = cast(%var_3922, dtype="bool") /* ty=Tensor[(9, 14, 10), bool] */;
  %179 = shape_of(%var_3921, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%var_3921, dtype="bool") /* ty=Tensor[(9, 14, 10), bool] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %182 = cast(meta[relay.Constant][13] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %183 = reshape(%182, newshape=[6, 6, 14]) /* ty=Tensor[(6, 6, 14), float64] */;
  %184 = @func_3781(%183) /* ty=(Tensor[(6, 6, 14), bool], Tensor[(264), int8]) */;
  %185 = cast(%var_3922, dtype="float32") /* ty=Tensor[(9, 14, 10), float32] */;
  %186 = greater_equal(%180, %181) /* ty=Tensor[(9, 14, 10), bool] */;
  %187 = %184.0;
  %188 = cosh(%185) /* ty=Tensor[(9, 14, 10), float32] */;
  (%186, %187, meta[relay.Constant][13] /* ty=Tensor[(504), float64] */, %188)
}

def @func_2646(%var_2644: Tensor[(4, 14, 13), int16], %var_2645: Tensor[(4, 14, 13), int16]) -> (Tensor[(4, 14, 13), int16],) {
  %194 = fn (%var_2622: Tensor[(4, 14, 13), int16], %var_2623: Tensor[(4, 14, 13), int16]) -> (Tensor[(4, 14, 13), int16],) {
    %189 = cast(%var_2623, dtype="int16") /* ty=Tensor[(4, 14, 13), int16] */;
    %190 = shape_of(%var_2622, dtype="int32") /* ty=Tensor[(3), int32] */;
    %191 = cast(%var_2622, dtype="int16") /* ty=Tensor[(4, 14, 13), int16] */;
    %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %193 = multiply(%191, %192) /* ty=Tensor[(4, 14, 13), int16] */;
    (%193,)
  };
  %194(%var_2644, %var_2645) /* ty=(Tensor[(4, 14, 13), int16],) */
}

def @func_1371() -> (Tensor[(7, 9, 10), float64],) {
  %197 = fn () -> (Tensor[(7, 9, 10), float64],) {
    %195 = @func_1112() /* ty=(Tensor[(7, 9, 10), float64], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) */;
    %196 = %195.0;
    (%196,)
  };
  %197() /* ty=(Tensor[(7, 9, 10), float64],) */
}

def @func_839() -> (Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) {
  %198 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 7, 4), float64] */, dtype="float64") /* ty=Tensor[(1, 7, 4), float64] */;
  %199 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %200 = cast(meta[relay.Constant][15] /* ty=Tensor[(630), int32] */, dtype="int32") /* ty=Tensor[(630), int32] */;
  %201 = cast(meta[relay.Constant][16] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %202 = reshape(%199, newshape=[]) /* ty=int32 */;
  %203 = reshape(%200, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
  %204 = reshape(%201, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %205 = @func_423(%202, %203, %204) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
  %206 = exp(%198) /* ty=Tensor[(1, 7, 4), float64] */;
  %207 = %205.4;
  (%206, %207, 6 /* ty=int32 */, meta[relay.Constant][15] /* ty=Tensor[(630), int32] */, meta[relay.Constant][16] /* ty=Tensor[(264), int8] */)
}

def @func_1529(%var_1444: Tensor[(264), int8], %var_1479: Tensor[(1, 143), int8]) -> (Tensor[(630), int32], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), float64], Tensor[(1, 7, 4), float32], Tensor[(1, 143), int8], Tensor[(1573), int8], Tensor[(7, 9, 10), float64], Tensor[(297), float32], Tensor[(297), float64], Tensor[(11, 13, 11), int32]) {
  %208 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
  %209 = cast(meta[relay.Constant][17] /* ty=Tensor[(297), float32] */, dtype="float32") /* ty=Tensor[(297), float32] */;
  %210 = cast(%var_1444, dtype="int8") /* ty=Tensor[(264), int8] */;
  %211 = reshape(%209, newshape=[3, 11, 9]) /* ty=Tensor[(3, 11, 9), float32] */;
  %212 = reshape(%210, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %213 = @func_893(%211, %212) /* ty=(Tensor[(3, 11, 9), int16], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(3, 11, 9), float32]) */;
  %214 = @func_1370() /* ty=(Tensor[(7, 9, 10), float64],) */;
  %215 = cast(%var_1479, dtype="int8") /* ty=Tensor[(1, 143), int8] */;
  %216 = cast(meta[relay.Constant][18] /* ty=Tensor[(1573), int8] */, dtype="int8") /* ty=Tensor[(1573), int8] */;
  %217 = cast(%var_1479, dtype="int8") /* ty=Tensor[(1, 143), int8] */;
  %218 = reshape(%215, newshape=[143]) /* ty=Tensor[(143), int8] */;
  %219 = reshape(%216, newshape=[1573]) /* ty=Tensor[(1573), int8] */;
  %220 = reshape(%217, newshape=[143]) /* ty=Tensor[(143), int8] */;
  %221 = @func_1012(%218, %219, %220) /* ty=(Tensor[(4, 6, 11), int8], Tensor[(143), int16], Tensor[(1, 7, 4), float32], Tensor[(?, 7, 4), bool], Tensor[(11, 13, 11), uint8]) */;
  %222 = @func_1370() /* ty=(Tensor[(7, 9, 10), float64],) */;
  %223 = cast(meta[relay.Constant][17] /* ty=Tensor[(297), float32] */, dtype="float32") /* ty=Tensor[(297), float32] */;
  %224 = atan(%223) /* ty=Tensor[(297), float32] */;
  %225 = cast(%224, dtype="float32") /* ty=Tensor[(297), float32] */;
  %226 = cast(%224, dtype="float64") /* ty=Tensor[(297), float64] */;
  %227 = cast(%var_1479, dtype="int8") /* ty=Tensor[(1, 143), int8] */;
  %228 = cast(meta[relay.Constant][18] /* ty=Tensor[(1573), int8] */, dtype="int8") /* ty=Tensor[(1573), int8] */;
  %229 = reshape(%227, newshape=[11, 13, 1]) /* ty=Tensor[(11, 13, 1), int8] */;
  %230 = reshape(%228, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), int8] */;
  %231 = @func_533(%229, %230) /* ty=(Tensor[(11, 13, 11), bool], Tensor[(11, 13, 11), int32]) */;
  %232 = %208.3;
  %233 = %213.1;
  %234 = %214.0;
  %235 = %221.2;
  %236 = %222.0;
  %237 = asin(%225) /* ty=Tensor[(297), float32] */;
  %238 = acosh(%226) /* ty=Tensor[(297), float64] */;
  %239 = %231.1;
  (%232, %233, %var_1444, %234, %235, %var_1479, meta[relay.Constant][18] /* ty=Tensor[(1573), int8] */, %236, %237, %238, %239)
}

def @func_2206() -> Tensor[(16, 6, 4), float32] {
  @func_2204() /* ty=Tensor[(16, 6, 4), float32] */
}

def @func_3938(%var_3936: Tensor[(9, 14, 10), int64], %var_3937: Tensor[(9, 14, 10), int64]) -> (Tensor[(9, 14, 10), bool], Tensor[(6, 6, 14), bool], Tensor[(504), float64], Tensor[(9, 14, 10), float32]) {
  @func_3934(%var_3936, %var_3937) /* ty=(Tensor[(9, 14, 10), bool], Tensor[(6, 6, 14), bool], Tensor[(504), float64], Tensor[(9, 14, 10), float32]) */
}

def @func_4143() -> (Tensor[(630), int32],) {
  @func_4141() /* ty=(Tensor[(630), int32],) */
}

def @func_2768(%var_2767: Tensor[(7, 9, 10), float64]) -> (Tensor[(7, 9, 10), bool], int32) {
  %248 = fn (%var_2752: Tensor[(7, 9, 10), float64]) -> (Tensor[(7, 9, 10), bool], int32) {
    %240 = @func_2724() /* ty=Tensor[(7, 9, 10), float64] */;
    %241 = cast(%var_2752, dtype="bool") /* ty=Tensor[(7, 9, 10), bool] */;
    %242 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
    %243 = cast(%240, dtype="bool") /* ty=Tensor[(7, 9, 10), bool] */;
    %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %245 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
    %246 = greater(%243, %244) /* ty=Tensor[(7, 9, 10), bool] */;
    %247 = %245.2;
    (%246, %247)
  };
  %248(%var_2767) /* ty=(Tensor[(7, 9, 10), bool], int32) */
}

def @func_4423() -> (Tensor[(8, 16), uint32], Tensor[(4, 6, 11), float64]) {
  %255 = fn () -> (Tensor[(8, 16), uint32], Tensor[(4, 6, 11), float64]) {
    %249 = @func_2581() /* ty=(Tensor[(7, 9, 10), uint16], Tensor[(264), int8], Tensor[(6, ?, 14), bool], Tensor[(630, 1), float64], Tensor[(8, 16), uint32], uint32, Tensor[(128), uint32]) */;
    %250 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
    %251 = %250.1;
    %252 = cast(%251, dtype="float64") /* ty=Tensor[(4, 6, 11), float64] */;
    %253 = %249.4;
    %254 = tan(%252) /* ty=Tensor[(4, 6, 11), float64] */;
    (%253, %254)
  };
  %255() /* ty=(Tensor[(8, 16), uint32], Tensor[(4, 6, 11), float64]) */
}

def @func_3074() -> Tensor[(264), int8] {
  %256 = @func_2581() /* ty=(Tensor[(7, 9, 10), uint16], Tensor[(264), int8], Tensor[(6, ?, 14), bool], Tensor[(630, 1), float64], Tensor[(8, 16), uint32], uint32, Tensor[(128), uint32]) */;
  %256.1
}

def @func_1691(%var_1689: Tensor[(7, 9, 10), float64], %var_1690: Tensor[(264), int8]) -> (Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), uint16], Tensor[(7, 9, 10), float64]) {
  %275 = fn (%var_1663: Tensor[(7, 9, 10), float64], %var_1673: Tensor[(264), int8]) -> (Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), uint16], Tensor[(7, 9, 10), float64]) {
    %257 = cast(%var_1673, dtype="int8") /* ty=Tensor[(264), int8] */;
    %258 = reshape(%257, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
    %259 = @func_244(%258) /* ty=(Tensor[(4, 6, 11), int8],) */;
    %260 = @func_1370() /* ty=(Tensor[(7, 9, 10), float64],) */;
    %261 = %260.0;
    %262 = cast(%var_1663, dtype="uint16") /* ty=Tensor[(7, 9, 10), uint16] */;
    %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
    %264 = cast(%261, dtype="uint16") /* ty=Tensor[(7, 9, 10), uint16] */;
    %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %266 = cast(%var_1663, dtype="float32") /* ty=Tensor[(7, 9, 10), float32] */;
    %267 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
    %268 = cast(%261, dtype="float32") /* ty=Tensor[(7, 9, 10), float32] */;
    %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %270 = floor_mod(%268, %269) /* ty=Tensor[(7, 9, 10), float32] */;
    %271 = cast(%270, dtype="float64") /* ty=Tensor[(7, 9, 10), float64] */;
    %272 = %259.0;
    %273 = bitwise_xor(%264, %265) /* ty=Tensor[(7, 9, 10), uint16] */;
    %274 = sigmoid(%271) /* ty=Tensor[(7, 9, 10), float64] */;
    (%272, %var_1673, %273, %274)
  };
  %275(%var_1689, %var_1690) /* ty=(Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), uint16], Tensor[(7, 9, 10), float64]) */
}

def @func_2396(%var_2391: Tensor[(6, 9, 14), float64], %var_2392: Tensor[(143), int8], %var_2393: Tensor[(168), float64], %var_2394: int32, %var_2395: Tensor[(264), int8]) -> (Tensor[(11, 13, 11), bool], Tensor[(143), int8], Tensor[(1573), int8], Tensor[(6, ?, 14), bool], Tensor[(6, 2, 14), bool], Tensor[(168), float64], Tensor[(11, 13, 11), int32], Tensor[(168), float64], Tensor[(6, 9, 14), bool], Tensor[(4, 6, 11), float32], int32, Tensor[(210, 3), int32], Tensor[(264), int8]) {
  @func_2389(%var_2391, %var_2392, %var_2393, %var_2394, %var_2395) /* ty=(Tensor[(11, 13, 11), bool], Tensor[(143), int8], Tensor[(1573), int8], Tensor[(6, ?, 14), bool], Tensor[(6, 2, 14), bool], Tensor[(168), float64], Tensor[(11, 13, 11), int32], Tensor[(168), float64], Tensor[(6, 9, 14), bool], Tensor[(4, 6, 11), float32], int32, Tensor[(210, 3), int32], Tensor[(264), int8]) */
}

def @func_2102(%var_2100: Tensor[(143), int8]) -> (Tensor[(264), bool], Tensor[(6, 1, 14), float64], Tensor[(7, 9, 10), float64], Tensor[(630), float64], Tensor[(7, 9, 10), float64], Tensor[(143), int8]) {
  @func_2099(%var_2100) /* ty=(Tensor[(264), bool], Tensor[(6, 1, 14), float64], Tensor[(7, 9, 10), float64], Tensor[(630), float64], Tensor[(7, 9, 10), float64], Tensor[(143), int8]) */
}

def @func_1112() -> (Tensor[(7, 9, 10), float64], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) {
  %276 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
  %277 = %276.4;
  %278 = cast(%277, dtype="float64") /* ty=Tensor[(7, 9, 10), float64] */;
  %279 = cast(meta[relay.Constant][19] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %280 = reshape(%279, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
  %281 = @func_244(%280) /* ty=(Tensor[(4, 6, 11), int8],) */;
  %282 = acos(%278) /* ty=Tensor[(7, 9, 10), float64] */;
  %283 = %281.0;
  (%282, %283, meta[relay.Constant][19] /* ty=Tensor[(264), int8] */)
}

def @func_2525() -> (Tensor[(630), int32], Tensor[(264), int8], Tensor[(264), int8]) {
  @func_2523() /* ty=(Tensor[(630), int32], Tensor[(264), int8], Tensor[(264), int8]) */
}

def @func_3459(%var_3432: Tensor[(4, 11, 2), float32], %var_3453: Tensor[(132, 2), int8]) -> (Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(?, 7, 4), int16], Tensor[(132, 2), int8]) {
  %284 = cast(%var_3432, dtype="float32") /* ty=Tensor[(4, 11, 2), float32] */;
  %285 = cos(%284) /* ty=Tensor[(4, 11, 2), float32] */;
  %286 = cast(%var_3432, dtype="bool") /* ty=Tensor[(4, 11, 2), bool] */;
  %287 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%285, dtype="bool") /* ty=Tensor[(4, 11, 2), bool] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %290 = cast(%var_3432, dtype="float64") /* ty=Tensor[(4, 11, 2), float64] */;
  %291 = cast(%var_3453, dtype="int8") /* ty=Tensor[(132, 2), int8] */;
  %292 = reshape(%291, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %293 = @func_1253(%292) /* ty=(Tensor[(?, 7, 4), float32], Tensor[(?, 7, 4), int16], Tensor[(?, 7, 4), float32], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) */;
  %294 = not_equal(%288, %289) /* ty=Tensor[(4, 11, 2), bool] */;
  %295 = sinh(%290) /* ty=Tensor[(4, 11, 2), float64] */;
  %296 = %293.1;
  (%294, %295, %296, %var_3453)
}

def @func_3751(%var_3749: Tensor[(16, 4, 4), bool]) -> (Tensor[(16, 4, 4), bool], Tensor[(16, 4, 4), uint64]) {
  @func_3748(%var_3749) /* ty=(Tensor[(16, 4, 4), bool], Tensor[(16, 4, 4), uint64]) */
}

def @func_1361() -> (Tensor[(6, 1, 14), float64],) {
  %297 = @func_1319() /* ty=Tensor[(6, 1, 14), float64] */;
  (%297,)
}

def @func_1771(%var_1752: Tensor[(11, 8, 9), float32], %var_1765: Tensor[(630), float64]) -> (Tensor[(11, 8, 9), float32], Tensor[(7, 9, 10), float64], Tensor[(630), float64], Tensor[(264), int8], Tensor[(4, 6, 11), int8]) {
  %298 = cast(%var_1752, dtype="float32") /* ty=Tensor[(11, 8, 9), float32] */;
  %299 = cast(%var_1765, dtype="float64") /* ty=Tensor[(630), float64] */;
  %300 = cast(meta[relay.Constant][20] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %301 = reshape(%299, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), float64] */;
  %302 = reshape(%300, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %303 = @func_1688(%301, %302) /* ty=(Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), uint16], Tensor[(7, 9, 10), float64]) */;
  %304 = cast(meta[relay.Constant][20] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %305 = reshape(%304, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %306 = @func_1253(%305) /* ty=(Tensor[(?, 7, 4), float32], Tensor[(?, 7, 4), int16], Tensor[(?, 7, 4), float32], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) */;
  %307 = asinh(%298) /* ty=Tensor[(11, 8, 9), float32] */;
  %308 = %303.3;
  %309 = %306.3;
  (%307, %308, %var_1765, meta[relay.Constant][20] /* ty=Tensor[(264), int8] */, %309)
}

def @func_3824() -> Tensor[(264), int8] {
  %310 = fn () -> Tensor[(264), int8] {
    @func_3074() /* ty=Tensor[(264), int8] */
  };
  %310() /* ty=Tensor[(264), int8] */
}

def @func_2725() -> Tensor[(7, 9, 10), float64] {
  %312 = fn () -> Tensor[(7, 9, 10), float64] {
    %311 = @func_1370() /* ty=(Tensor[(7, 9, 10), float64],) */;
    %311.0
  };
  %312() /* ty=Tensor[(7, 9, 10), float64] */
}

def @func_3978(%var_3977: Tensor[(630), int32]) -> (Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(264), int8], int32, Tensor[(630), int32], Tensor[(264), int8], Tensor[(4, 6, 11), int8]) {
  %330 = fn (%var_3959: Tensor[(630), int32]) -> (Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(264), int8], int32, Tensor[(630), int32], Tensor[(264), int8], Tensor[(4, 6, 11), int8]) {
    %313 = @func_2811() /* ty=Tensor[(4, 6, 11), int8] */;
    %314 = cast(%313, dtype="float32") /* ty=Tensor[(4, 6, 11), float32] */;
    %315 = erf(%314) /* ty=Tensor[(4, 6, 11), float32] */;
    %316 = cast(%315, dtype="int8") /* ty=Tensor[(4, 6, 11), int8] */;
    %317 = reshape(%316, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
    %318 = @func_244(%317) /* ty=(Tensor[(4, 6, 11), int8],) */;
    %319 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %320 = cast(%var_3959, dtype="int32") /* ty=Tensor[(630), int32] */;
    %321 = cast(%313, dtype="int8") /* ty=Tensor[(4, 6, 11), int8] */;
    %322 = reshape(%319, newshape=[]) /* ty=int32 */;
    %323 = reshape(%320, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
    %324 = reshape(%321, newshape=[264]) /* ty=Tensor[(264), int8] */;
    %325 = @func_423(%322, %323, %324) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
    %326 = %318.0;
    %327 = %325.2;
    %328 = @func_3823() /* ty=Tensor[(264), int8] */;
    %329 = @func_2811() /* ty=Tensor[(4, 6, 11), int8] */;
    (%315, %326, %327, -2 /* ty=int32 */, %var_3959, %328, %329)
  };
  %330(%var_3977) /* ty=(Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(264), int8], int32, Tensor[(630), int32], Tensor[(264), int8], Tensor[(4, 6, 11), int8]) */
}

def @func_1085() -> (Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) {
  @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */
}

def @func_1832(%var_1830: Tensor[(168), float64]) -> (Tensor[(143), int8], Tensor[(6, 2, 14), bool], Tensor[(168), float64], int32) {
  @func_1829(%var_1830) /* ty=(Tensor[(143), int8], Tensor[(6, 2, 14), bool], Tensor[(168), float64], int32) */
}

def @func_1320() -> Tensor[(6, 1, 14), float64] {
  %332 = fn () -> Tensor[(6, 1, 14), float64] {
    %331 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 1, 14), float64] */, dtype="float64") /* ty=Tensor[(6, 1, 14), float64] */;
    acos(%331) /* ty=Tensor[(6, 1, 14), float64] */
  };
  %332() /* ty=Tensor[(6, 1, 14), float64] */
}

def @func_1548(%var_1546: Tensor[(9, 4, 15), float64], %var_1547: Tensor[(9, 4, 15), float64]) -> (Tensor[(9, 4, 15), float64],) {
  %338 = fn (%var_1535: Tensor[(9, 4, 15), float64], %var_1536: Tensor[(9, 4, 15), float64]) -> (Tensor[(9, 4, 15), float64],) {
    %333 = cast(%var_1536, dtype="float64") /* ty=Tensor[(9, 4, 15), float64] */;
    %334 = shape_of(%var_1535, dtype="int32") /* ty=Tensor[(3), int32] */;
    %335 = cast(%var_1535, dtype="float64") /* ty=Tensor[(9, 4, 15), float64] */;
    %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %337 = multiply(%335, %336) /* ty=Tensor[(9, 4, 15), float64] */;
    (%337,)
  };
  %338(%var_1546, %var_1547) /* ty=(Tensor[(9, 4, 15), float64],) */
}

def @func_841() -> (Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) {
  @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */
}

def @func_1289(%var_1287: Tensor[(12, 7, 4), float64]) -> Tensor[(12, 7, 4), int32] {
  @func_1286(%var_1287) /* ty=Tensor[(12, 7, 4), int32] */
}

def @func_2813() -> Tensor[(4, 6, 11), int8] {
  @func_2811() /* ty=Tensor[(4, 6, 11), int8] */
}

def @func_3035() -> (Tensor[(264), int8], Tensor[(9, 4, 15), float64], Tensor[(18, 30), float64]) {
  @func_3033() /* ty=(Tensor[(264), int8], Tensor[(9, 4, 15), float64], Tensor[(18, 30), float64]) */
}

def @func_2975(%var_2974: Tensor[(6, 44), int8]) -> (Tensor[(6, 1, 14), float64], Tensor[(264), float32], Tensor[(6, 44), float32]) {
  %356 = fn (%var_2939: Tensor[(6, 44), int8]) -> (Tensor[(6, 1, 14), float64], Tensor[(264), float32], Tensor[(6, 44), float32]) {
    %339 = cast(%var_2939, dtype="int8") /* ty=Tensor[(6, 44), int8] */;
    %340 = reshape(%339, newshape=[264]) /* ty=Tensor[(264), int8] */;
    %341 = @func_1871(%340) /* ty=(Tensor[(7, 9, 10), float64], Tensor[(264), int8], Tensor[(33, 9), bool]) */;
    %342 = %341.1;
    %343 = cast(meta[relay.Constant][22] /* ty=Tensor[(264), int8] */, dtype="float32") /* ty=Tensor[(264), float32] */;
    %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(1), int32] */;
    %345 = cast(%342, dtype="float32") /* ty=Tensor[(264), float32] */;
    %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?), float32] */;
    %347 = cast(%var_2939, dtype="float32") /* ty=Tensor[(6, 44), float32] */;
    %348 = erf(%347) /* ty=Tensor[(6, 44), float32] */;
    %349 = cast(meta[relay.Constant][22] /* ty=Tensor[(264), int8] */, dtype="float32") /* ty=Tensor[(264), float32] */;
    %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(2), int32] */;
    %351 = cast(%348, dtype="float32") /* ty=Tensor[(6, 44), float32] */;
    %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %353 = @func_1319() /* ty=Tensor[(6, 1, 14), float64] */;
    %354 = floor_divide(%345, %346) /* ty=Tensor[(264), float32] */;
    %355 = power(%351, %352) /* ty=Tensor[(6, 44), float32] */;
    (%353, %354, %355)
  };
  %356(%var_2974) /* ty=(Tensor[(6, 1, 14), float64], Tensor[(264), float32], Tensor[(6, 44), float32]) */
}

def @func_1286(%var_1281: Tensor[(12, 7, 4), float64]) -> Tensor[(12, 7, 4), int32] {
  %357 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
  %358 = %357.0;
  %359 = cast(%358, dtype="int32") /* ty=Tensor[(1, 7, 4), int32] */;
  %360 = cast(%var_1281, dtype="int32") /* ty=Tensor[(12, 7, 4), int32] */;
  left_shift(%359, %360) /* ty=Tensor[(12, 7, 4), int32] */
}

def @func_4028(%var_4026: Tensor[(6, 16, 12), uint32], %var_4027: Tensor[(6, 16, 12), uint32]) -> (Tensor[(6, 16, 12), uint32], Tensor[(264), int8]) {
  @func_4024(%var_4026, %var_4027) /* ty=(Tensor[(6, 16, 12), uint32], Tensor[(264), int8]) */
}

def @func_4075() -> (Tensor[(1573), int8],) {
  %363 = fn () -> (Tensor[(1573), int8],) {
    %361 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
    %362 = %361.7;
    (%362,)
  };
  %363() /* ty=(Tensor[(1573), int8],) */
}

def @func_4322(%var_4297: Tensor[(264), int8], %var_4306: Tensor[(297), float32]) -> (Tensor[(264), int64], Tensor[(264), int8], Tensor[(297), float32], Tensor[(6, 1, 14), float64]) {
  %364 = @func_3690() /* ty=(Tensor[(264), int8],) */;
  %365 = %364.0;
  %366 = cast(%var_4297, dtype="int64") /* ty=Tensor[(264), int64] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(1), int32] */;
  %368 = cast(%365, dtype="int64") /* ty=Tensor[(264), int64] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?), int64] */;
  %370 = cast(%var_4306, dtype="float32") /* ty=Tensor[(297), float32] */;
  %371 = cast(%365, dtype="int8") /* ty=Tensor[(264), int8] */;
  %372 = reshape(%370, newshape=[3, 11, 9]) /* ty=Tensor[(3, 11, 9), float32] */;
  %373 = reshape(%371, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %374 = @func_893(%372, %373) /* ty=(Tensor[(3, 11, 9), int16], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(3, 11, 9), float32]) */;
  %375 = subtract(%368, %369) /* ty=Tensor[(264), int64] */;
  %376 = %374.2;
  %377 = @func_1319() /* ty=Tensor[(6, 1, 14), float64] */;
  (%375, %376, %var_4306, %377)
}

def @func_4326(%var_4324: Tensor[(264), int8], %var_4325: Tensor[(297), float32]) -> (Tensor[(264), int64], Tensor[(264), int8], Tensor[(297), float32], Tensor[(6, 1, 14), float64]) {
  @func_4322(%var_4324, %var_4325) /* ty=(Tensor[(264), int64], Tensor[(264), int8], Tensor[(297), float32], Tensor[(6, 1, 14), float64]) */
}

def @func_3475() -> Tensor[(630), int32] {
  %379 = fn () -> Tensor[(630), int32] {
    %378 = @func_1259() /* ty=(Tensor[(630), int32],) */;
    %378.0
  };
  %379() /* ty=Tensor[(630), int32] */
}

def @func_3565() -> (Tensor[(630), int32],) {
  %380 = @func_2523() /* ty=(Tensor[(630), int32], Tensor[(264), int8], Tensor[(264), int8]) */;
  %381 = %380.0;
  (%381,)
}

def @func_1356() -> (Tensor[(630), int32],) {
  %384 = fn () -> (Tensor[(630), int32],) {
    %382 = @func_1259() /* ty=(Tensor[(630), int32],) */;
    %383 = %382.0;
    (%383,)
  };
  %384() /* ty=(Tensor[(630), int32],) */
}

def @func_4375() -> (Tensor[(6, 1, 14), float64], Tensor[(4, 6, 11), float32], Tensor[(1, 7, 4), float64]) {
  @func_4373() /* ty=(Tensor[(6, 1, 14), float64], Tensor[(4, 6, 11), float32], Tensor[(1, 7, 4), float64]) */
}

def @func_1716(%var_1715: Tensor[(6, 2, 14), float64]) -> Tensor[(6, 2, 14), bool] {
  %389 = fn (%var_1706: Tensor[(6, 2, 14), float64]) -> Tensor[(6, 2, 14), bool] {
    %385 = @func_1361() /* ty=(Tensor[(6, 1, 14), float64],) */;
    %386 = %385.0;
    %387 = cast(%386, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
    %388 = cast(%var_1706, dtype="bool") /* ty=Tensor[(6, 2, 14), bool] */;
    logical_or(%387, %388) /* ty=Tensor[(6, 2, 14), bool] */
  };
  %389(%var_1715) /* ty=Tensor[(6, 2, 14), bool] */
}

def @func_3781(%var_3760: Tensor[(6, 6, 14), float64]) -> (Tensor[(6, 6, 14), bool], Tensor[(264), int8]) {
  %390 = @func_1620() /* ty=(Tensor[(630), int32], Tensor[(6, 1, 14), float64]) */;
  %391 = %390.1;
  %392 = cast(%391, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %393 = cast(%var_3760, dtype="bool") /* ty=Tensor[(6, 6, 14), bool] */;
  %394 = @func_2523() /* ty=(Tensor[(630), int32], Tensor[(264), int8], Tensor[(264), int8]) */;
  %395 = logical_and(%392, %393) /* ty=Tensor[(6, 6, 14), bool] */;
  %396 = %394.1;
  (%395, %396)
}

def @func_1989(%var_1984: Tensor[(336), float64], %var_1985: Tensor[(264), int8], %var_1986: Tensor[(143), int8], %var_1987: int32, %var_1988: Tensor[(792), float32]) -> (Tensor[(630), int32], Tensor[(12, 7, 4), int32], Tensor[(336), float64], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(143), int8], Tensor[(7, 9, 10), uint8], int32, Tensor[(7, 9, 10), bool], Tensor[(11, 8, 9), float32], Tensor[(792), float32]) {
  %430 = fn (%var_1937: Tensor[(336), float64], %var_1948: Tensor[(264), int8], %var_1949: Tensor[(143), int8], %var_1963: int32, %var_1972: Tensor[(792), float32]) -> (Tensor[(630), int32], Tensor[(12, 7, 4), int32], Tensor[(336), float64], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(143), int8], Tensor[(7, 9, 10), uint8], int32, Tensor[(7, 9, 10), bool], Tensor[(11, 8, 9), float32], Tensor[(792), float32]) {
    %397 = @func_1259() /* ty=(Tensor[(630), int32],) */;
    %398 = cast(%var_1937, dtype="float64") /* ty=Tensor[(336), float64] */;
    %399 = reshape(%398, newshape=[12, 7, 4]) /* ty=Tensor[(12, 7, 4), float64] */;
    %400 = cast(%var_1948, dtype="int8") /* ty=Tensor[(264), int8] */;
    %401 = cast(%var_1949, dtype="int8") /* ty=Tensor[(143), int8] */;
    %402 = reshape(%400, newshape=[264]) /* ty=Tensor[(264), int8] */;
    %403 = reshape(%401, newshape=[1, 143]) /* ty=Tensor[(1, 143), int8] */;
    %404 = @func_1529(%402, %403) /* ty=(Tensor[(630), int32], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), float64], Tensor[(1, 7, 4), float32], Tensor[(1, 143), int8], Tensor[(1573), int8], Tensor[(7, 9, 10), float64], Tensor[(297), float32], Tensor[(297), float64], Tensor[(11, 13, 11), int32]) */;
    %405 = cast(%var_1963, dtype="int32") /* ty=int32 */;
    %406 = %397.0;
    %407 = cast(%406, dtype="int32") /* ty=Tensor[(630), int32] */;
    %408 = cast(%var_1948, dtype="int8") /* ty=Tensor[(264), int8] */;
    %409 = reshape(%405, newshape=[]) /* ty=int32 */;
    %410 = reshape(%407, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
    %411 = reshape(%408, newshape=[264]) /* ty=Tensor[(264), int8] */;
    %412 = @func_423(%409, %410, %411) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
    %413 = cast(%var_1963, dtype="int32") /* ty=int32 */;
    %414 = cast(%406, dtype="int32") /* ty=Tensor[(630), int32] */;
    %415 = %404.1;
    %416 = cast(%415, dtype="int8") /* ty=Tensor[(4, 6, 11), int8] */;
    %417 = reshape(%413, newshape=[]) /* ty=int32 */;
    %418 = reshape(%414, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
    %419 = reshape(%416, newshape=[264]) /* ty=Tensor[(264), int8] */;
    %420 = @func_423(%417, %418, %419) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
    %421 = cast(%var_1972, dtype="float32") /* ty=Tensor[(792), float32] */;
    %422 = %420.0;
    %423 = cast(%422, dtype="float64") /* ty=Tensor[(7, 9, 10), float64] */;
    %424 = reshape(%421, newshape=[11, 8, 9]) /* ty=Tensor[(11, 8, 9), float32] */;
    %425 = reshape(%423, newshape=[630]) /* ty=Tensor[(630), float64] */;
    %426 = @func_1771(%424, %425) /* ty=(Tensor[(11, 8, 9), float32], Tensor[(7, 9, 10), float64], Tensor[(630), float64], Tensor[(264), int8], Tensor[(4, 6, 11), int8]) */;
    %427 = @func_1286(%399) /* ty=Tensor[(12, 7, 4), int32] */;
    %428 = %412.1;
    %429 = %426.0;
    (%406, %427, %var_1937, %415, %var_1948, %var_1949, %428, %var_1963, %422, %429, %var_1972)
  };
  %430(%var_1984, %var_1985, %var_1986, %var_1987, %var_1988) /* ty=(Tensor[(630), int32], Tensor[(12, 7, 4), int32], Tensor[(336), float64], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(143), int8], Tensor[(7, 9, 10), uint8], int32, Tensor[(7, 9, 10), bool], Tensor[(11, 8, 9), float32], Tensor[(792), float32]) */
}

def @func_1174(%var_1123: Tensor[(4, 9, 14), uint16], %var_1124: Tensor[(4, 9, 14), uint16]) -> (Tensor[(4, 9, 14), uint16], Tensor[(4, 9, 14), float64], Tensor[(4, 9, 14), float32], Tensor[(630), float64]) {
  %431 = cast(%var_1124, dtype="uint16") /* ty=Tensor[(4, 9, 14), uint16] */;
  %432 = shape_of(%var_1123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%var_1123, dtype="uint16") /* ty=Tensor[(4, 9, 14), uint16] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %435 = cast(%var_1123, dtype="float32") /* ty=Tensor[(4, 9, 14), float32] */;
  %436 = cosh(%435) /* ty=Tensor[(4, 9, 14), float32] */;
  %437 = cast(%436, dtype="float64") /* ty=Tensor[(4, 9, 14), float64] */;
  %438 = cast(%var_1123, dtype="float32") /* ty=Tensor[(4, 9, 14), float32] */;
  %439 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
  %440 = bitwise_or(%433, %434) /* ty=Tensor[(4, 9, 14), uint16] */;
  %441 = log10(%437) /* ty=Tensor[(4, 9, 14), float64] */;
  %442 = atan(%438) /* ty=Tensor[(4, 9, 14), float32] */;
  %443 = %439.0;
  (%440, %441, %442, %443)
}

def @func_2099(%var_2073: Tensor[(143), int8]) -> (Tensor[(264), bool], Tensor[(6, 1, 14), float64], Tensor[(7, 9, 10), float64], Tensor[(630), float64], Tensor[(7, 9, 10), float64], Tensor[(143), int8]) {
  %444 = @func_1112() /* ty=(Tensor[(7, 9, 10), float64], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) */;
  %445 = %444.2;
  %446 = cast(meta[relay.Constant][23] /* ty=Tensor[(264), int8] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(1), int32] */;
  %448 = cast(%445, dtype="bool") /* ty=Tensor[(264), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?), bool] */;
  %450 = @func_1620() /* ty=(Tensor[(630), int32], Tensor[(6, 1, 14), float64]) */;
  %451 = cast(meta[relay.Constant][24] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
  %452 = less(%448, %449) /* ty=Tensor[(264), bool] */;
  %453 = cast(%452, dtype="int8") /* ty=Tensor[(264), int8] */;
  %454 = reshape(%451, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), float64] */;
  %455 = reshape(%453, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %456 = @func_1688(%454, %455) /* ty=(Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), uint16], Tensor[(7, 9, 10), float64]) */;
  %457 = cast(%445, dtype="int8") /* ty=Tensor[(264), int8] */;
  %458 = cast(%var_2073, dtype="int8") /* ty=Tensor[(143), int8] */;
  %459 = reshape(%457, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %460 = reshape(%458, newshape=[1, 143]) /* ty=Tensor[(1, 143), int8] */;
  %461 = @func_1529(%459, %460) /* ty=(Tensor[(630), int32], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), float64], Tensor[(1, 7, 4), float32], Tensor[(1, 143), int8], Tensor[(1573), int8], Tensor[(7, 9, 10), float64], Tensor[(297), float32], Tensor[(297), float64], Tensor[(11, 13, 11), int32]) */;
  %462 = %450.1;
  %463 = %456.3;
  %464 = %461.7;
  (%452, %462, %463, meta[relay.Constant][24] /* ty=Tensor[(630), float64] */, %464, %var_2073)
}

def @func_423(%var_380: int32, %var_381: Tensor[(7, 9, 10), int32], %var_399: Tensor[(264), int8]) -> (Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) {
  %465 = cast(%var_380, dtype="bool") /* ty=bool */;
  %466 = cast(%var_381, dtype="bool") /* ty=Tensor[(7, 9, 10), bool] */;
  %467 = cast(%var_381, dtype="uint8") /* ty=Tensor[(7, 9, 10), uint8] */;
  %468 = cast(%var_380, dtype="uint8") /* ty=uint8 */;
  %469 = cast(%var_399, dtype="int8") /* ty=Tensor[(264), int8] */;
  %470 = reshape(%469, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
  %471 = @func_244(%470) /* ty=(Tensor[(4, 6, 11), int8],) */;
  %472 = %471.0;
  %473 = cast(%472, dtype="float32") /* ty=Tensor[(4, 6, 11), float32] */;
  %474 = acosh(%473) /* ty=Tensor[(4, 6, 11), float32] */;
  %475 = cast(%474, dtype="int8") /* ty=Tensor[(4, 6, 11), int8] */;
  %476 = reshape(%475, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
  %477 = @func_244(%476) /* ty=(Tensor[(4, 6, 11), int8],) */;
  %478 = cast(%var_381, dtype="float32") /* ty=Tensor[(7, 9, 10), float32] */;
  %479 = less(%465, %466) /* ty=Tensor[(7, 9, 10), bool] */;
  %480 = maximum(%467, %468) /* ty=Tensor[(7, 9, 10), uint8] */;
  %481 = %477.0;
  %482 = asin(%478) /* ty=Tensor[(7, 9, 10), float32] */;
  (%479, %480, %var_399, %474, %481, %482)
}

def @func_893(%var_857: Tensor[(3, 11, 9), float32], %var_879: Tensor[(264), int8]) -> (Tensor[(3, 11, 9), int16], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(3, 11, 9), float32]) {
  %483 = cast(%var_857, dtype="float32") /* ty=Tensor[(3, 11, 9), float32] */;
  %484 = log(%483) /* ty=Tensor[(3, 11, 9), float32] */;
  %485 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 11, 9), float32] */, dtype="int16") /* ty=Tensor[(3, 11, 9), int16] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="int16") /* ty=Tensor[(3, 11, 9), int16] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %489 = cast(%var_879, dtype="int8") /* ty=Tensor[(264), int8] */;
  %490 = reshape(%489, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
  %491 = @func_244(%490) /* ty=(Tensor[(4, 6, 11), int8],) */;
  %492 = cast(%var_857, dtype="float32") /* ty=Tensor[(3, 11, 9), float32] */;
  %493 = add(%487, %488) /* ty=Tensor[(3, 11, 9), int16] */;
  %494 = %491.0;
  %495 = log10(%492) /* ty=Tensor[(3, 11, 9), float32] */;
  (%493, %494, %var_879, %495)
}

def @func_1622() -> (Tensor[(630), int32], Tensor[(6, 1, 14), float64]) {
  @func_1620() /* ty=(Tensor[(630), int32], Tensor[(6, 1, 14), float64]) */
}

def @func_4187(%var_4185: Tensor[(264), int8], %var_4186: Tensor[(16, 6, 4), float32]) -> (Tensor[(1, 7, 4), float64], Tensor[(264), int8], Tensor[(16, 6, 4), float64], Tensor[(504, 1), float64], Tensor[(630), int32], Tensor[(6, 6, 14), float64]) {
  @func_4183(%var_4185, %var_4186) /* ty=(Tensor[(1, 7, 4), float64], Tensor[(264), int8], Tensor[(16, 6, 4), float64], Tensor[(504, 1), float64], Tensor[(630), int32], Tensor[(6, 6, 14), float64]) */
}

def @func_1178(%var_1176: Tensor[(4, 9, 14), uint16], %var_1177: Tensor[(4, 9, 14), uint16]) -> (Tensor[(4, 9, 14), uint16], Tensor[(4, 9, 14), float64], Tensor[(4, 9, 14), float32], Tensor[(630), float64]) {
  @func_1174(%var_1176, %var_1177) /* ty=(Tensor[(4, 9, 14), uint16], Tensor[(4, 9, 14), float64], Tensor[(4, 9, 14), float32], Tensor[(630), float64]) */
}

def @func_3690() -> (Tensor[(264), int8],) {
  %496 = @func_3230() /* ty=(Tensor[(264), int8], Tensor[(630), float32], Tensor[(16, 6, 4), float32], Tensor[(7, 9, 10), uint16], Tensor[(4, 9, 14), float32], Tensor[(504), uint16], Tensor[(4, 14, 13), int16], Tensor[(728), int16]) */;
  %497 = %496.0;
  (%497,)
}

def @func_3463(%var_3461: Tensor[(4, 11, 2), float32], %var_3462: Tensor[(132, 2), int8]) -> (Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(?, 7, 4), int16], Tensor[(132, 2), int8]) {
  @func_3459(%var_3461, %var_3462) /* ty=(Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(?, 7, 4), int16], Tensor[(132, 2), int8]) */
}

def @func_3316() -> (Tensor[(630), int32],) {
  %500 = fn () -> (Tensor[(630), int32],) {
    %498 = @func_1620() /* ty=(Tensor[(630), int32], Tensor[(6, 1, 14), float64]) */;
    %499 = %498.0;
    (%499,)
  };
  %500() /* ty=(Tensor[(630), int32],) */
}

def @func_1016(%var_1013: Tensor[(143), int8], %var_1014: Tensor[(1573), int8], %var_1015: Tensor[(143), int8]) -> (Tensor[(4, 6, 11), int8], Tensor[(143), int16], Tensor[(1, 7, 4), float32], Tensor[(?, 7, 4), bool], Tensor[(11, 13, 11), uint8]) {
  %530 = fn (%var_965: Tensor[(143), int8], %var_966: Tensor[(1573), int8], %var_970: Tensor[(143), int8]) -> (Tensor[(4, 6, 11), int8], Tensor[(143), int16], Tensor[(1, 7, 4), float32], Tensor[(?, 7, 4), bool], Tensor[(11, 13, 11), uint8]) {
    %501 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
    %502 = cast(%var_970, dtype="int16") /* ty=Tensor[(143), int16] */;
    %503 = shape_of(%var_965, dtype="int32") /* ty=Tensor[(1), int32] */;
    %504 = cast(%var_965, dtype="int16") /* ty=Tensor[(143), int16] */;
    %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?), int16] */;
    %506 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
    %507 = %506.0;
    %508 = cast(%507, dtype="float32") /* ty=Tensor[(1, 7, 4), float32] */;
    %509 = cast(%507, dtype="float64") /* ty=Tensor[(1, 7, 4), float64] */;
    %510 = sinh(%509) /* ty=Tensor[(1, 7, 4), float64] */;
    %511 = cast(%507, dtype="bool") /* ty=Tensor[(1, 7, 4), bool] */;
    %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
    %513 = cast(%510, dtype="bool") /* ty=Tensor[(1, 7, 4), bool] */;
    %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %515 = cast(%var_965, dtype="int8") /* ty=Tensor[(143), int8] */;
    %516 = cast(%var_966, dtype="int8") /* ty=Tensor[(1573), int8] */;
    %517 = reshape(%515, newshape=[11, 13, 1]) /* ty=Tensor[(11, 13, 1), int8] */;
    %518 = reshape(%516, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), int8] */;
    %519 = @func_533(%517, %518) /* ty=(Tensor[(11, 13, 11), bool], Tensor[(11, 13, 11), int32]) */;
    %520 = %519.0;
    %521 = cast(%var_966, dtype="uint8") /* ty=Tensor[(1573), uint8] */;
    %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(3), int32] */;
    %523 = cast(%520, dtype="uint8") /* ty=Tensor[(11, 13, 11), uint8] */;
    %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %525 = %501.1;
    %526 = multiply(%504, %505) /* ty=Tensor[(143), int16] */;
    %527 = erf(%508) /* ty=Tensor[(1, 7, 4), float32] */;
    %528 = logical_and(%513, %514) /* ty=Tensor[(?, 7, 4), bool] */;
    %529 = subtract(%523, %524) /* ty=Tensor[(11, 13, 11), uint8] */;
    (%525, %526, %527, %528, %529)
  };
  %530(%var_1013, %var_1014, %var_1015) /* ty=(Tensor[(4, 6, 11), int8], Tensor[(143), int16], Tensor[(1, 7, 4), float32], Tensor[(?, 7, 4), bool], Tensor[(11, 13, 11), uint8]) */
}

def @func_1083() -> (Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) {
  %531 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
  %532 = %531.3;
  %533 = cast(%532, dtype="float64") /* ty=Tensor[(630), float64] */;
  %534 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %535 = erf(%533) /* ty=Tensor[(630), float64] */;
  %536 = cast(%535, dtype="int32") /* ty=Tensor[(630), int32] */;
  %537 = cast(meta[relay.Constant][26] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %538 = reshape(%534, newshape=[]) /* ty=int32 */;
  %539 = reshape(%536, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
  %540 = reshape(%537, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %541 = @func_423(%538, %539, %540) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
  %542 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %543 = cast(%535, dtype="int32") /* ty=Tensor[(630), int32] */;
  %544 = %541.3;
  %545 = cast(%544, dtype="int8") /* ty=Tensor[(4, 6, 11), int8] */;
  %546 = reshape(%542, newshape=[]) /* ty=int32 */;
  %547 = reshape(%543, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
  %548 = reshape(%545, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %549 = @func_423(%546, %547, %548) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
  %550 = cast(meta[relay.Constant][27] /* ty=Tensor[(143), int8] */, dtype="int8") /* ty=Tensor[(143), int8] */;
  %551 = cast(meta[relay.Constant][28] /* ty=Tensor[(1573), int8] */, dtype="int8") /* ty=Tensor[(1573), int8] */;
  %552 = cast(meta[relay.Constant][27] /* ty=Tensor[(143), int8] */, dtype="int8") /* ty=Tensor[(143), int8] */;
  %553 = reshape(%550, newshape=[143]) /* ty=Tensor[(143), int8] */;
  %554 = reshape(%551, newshape=[1573]) /* ty=Tensor[(1573), int8] */;
  %555 = reshape(%552, newshape=[143]) /* ty=Tensor[(143), int8] */;
  %556 = @func_1012(%553, %554, %555) /* ty=(Tensor[(4, 6, 11), int8], Tensor[(143), int16], Tensor[(1, 7, 4), float32], Tensor[(?, 7, 4), bool], Tensor[(11, 13, 11), uint8]) */;
  %557 = %549.0;
  %558 = %556.3;
  (%535, %544, 6 /* ty=int32 */, meta[relay.Constant][26] /* ty=Tensor[(264), int8] */, %557, %558, meta[relay.Constant][27] /* ty=Tensor[(143), int8] */, meta[relay.Constant][28] /* ty=Tensor[(1573), int8] */)
}

def @func_2246(%var_2244: Tensor[(16, 14, 12), float64]) -> (Tensor[(16, 14, 12), float32],) {
  @func_2243(%var_2244) /* ty=(Tensor[(16, 14, 12), float32],) */
}

def @func_2204() -> Tensor[(16, 6, 4), float32] {
  %559 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 6, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 6, 4), float32] */;
  asinh(%559) /* ty=Tensor[(16, 6, 4), float32] */
}

def @func_2523() -> (Tensor[(630), int32], Tensor[(264), int8], Tensor[(264), int8]) {
  %560 = @func_1620() /* ty=(Tensor[(630), int32], Tensor[(6, 1, 14), float64]) */;
  %561 = cast(meta[relay.Constant][30] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %562 = reshape(%561, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %563 = @func_1871(%562) /* ty=(Tensor[(7, 9, 10), float64], Tensor[(264), int8], Tensor[(33, 9), bool]) */;
  %564 = %560.0;
  %565 = %563.1;
  (%564, %565, meta[relay.Constant][30] /* ty=Tensor[(264), int8] */)
}

def @func_3076() -> Tensor[(264), int8] {
  @func_3074() /* ty=Tensor[(264), int8] */
}

def @func_2583() -> (Tensor[(7, 9, 10), uint16], Tensor[(264), int8], Tensor[(6, ?, 14), bool], Tensor[(630, 1), float64], Tensor[(8, 16), uint32], uint32, Tensor[(128), uint32]) {
  @func_2581() /* ty=(Tensor[(7, 9, 10), uint16], Tensor[(264), int8], Tensor[(6, ?, 14), bool], Tensor[(630, 1), float64], Tensor[(8, 16), uint32], uint32, Tensor[(128), uint32]) */
}

def @func_2581() -> (Tensor[(7, 9, 10), uint16], Tensor[(264), int8], Tensor[(6, ?, 14), bool], Tensor[(630, 1), float64], Tensor[(8, 16), uint32], uint32, Tensor[(128), uint32]) {
  %566 = cast(meta[relay.Constant][31] /* ty=Tensor[(630, 1), float64] */, dtype="float64") /* ty=Tensor[(630, 1), float64] */;
  %567 = cast(meta[relay.Constant][32] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %568 = reshape(%566, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), float64] */;
  %569 = reshape(%567, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %570 = @func_1688(%568, %569) /* ty=(Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(7, 9, 10), uint16], Tensor[(7, 9, 10), float64]) */;
  %571 = @func_1361() /* ty=(Tensor[(6, 1, 14), float64],) */;
  %572 = %571.0;
  %573 = cast(%572, dtype="float64") /* ty=Tensor[(6, 1, 14), float64] */;
  %574 = atan(%573) /* ty=Tensor[(6, 1, 14), float64] */;
  %575 = cast(%572, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%574, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %579 = cast(meta[relay.Constant][31] /* ty=Tensor[(630, 1), float64] */, dtype="float64") /* ty=Tensor[(630, 1), float64] */;
  %580 = cast(meta[relay.Constant][33] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %581 = cast(meta[relay.Constant][34] /* ty=Tensor[(128), uint32] */, dtype="uint32") /* ty=Tensor[(128), uint32] */;
  %582 = reshape(%580, newshape=[]) /* ty=uint32 */;
  %583 = reshape(%581, newshape=[8, 16]) /* ty=Tensor[(8, 16), uint32] */;
  %584 = %570.2;
  %585 = less(%577, %578) /* ty=Tensor[(6, ?, 14), bool] */;
  %586 = atanh(%579) /* ty=Tensor[(630, 1), float64] */;
  %587 = @func_2261(%582, %583) /* ty=Tensor[(8, 16), uint32] */;
  (%584, meta[relay.Constant][32] /* ty=Tensor[(264), int8] */, %585, %586, %587, meta[relay.Constant][33] /* ty=uint32 */, meta[relay.Constant][34] /* ty=Tensor[(128), uint32] */)
}

def @func_3669(%var_3662: Tensor[(13, 15, 16), int64], %var_3663: Tensor[(1, 297), float32], %var_3664: Tensor[(1, 264), int8], %var_3665: Tensor[(14, 14, 5), bool], %var_3666: int32, %var_3667: Tensor[(143), int8], %var_3668: Tensor[(1573), int8]) -> (Tensor[(13, 15, 16), float64], Tensor[(980), bool], Tensor[(3, 11, 9), int16], Tensor[(1, 297), float32], Tensor[(1, 264), int8], Tensor[(4, 6, 11), float32], int32, Tensor[(630), int32], Tensor[(14, 14, 5), float32], Tensor[(6, 1, 14), float64], Tensor[(13, 15, 16), bool], Tensor[(12, 7, 4), int32], Tensor[(336), float64], Tensor[(11, 13, 11), uint8], Tensor[(143), int8], Tensor[(1573), int8], Tensor[(4, 9, 14), float32], Tensor[(504), uint16]) {
  @func_3660(%var_3662, %var_3663, %var_3664, %var_3665, %var_3666, %var_3667, %var_3668) /* ty=(Tensor[(13, 15, 16), float64], Tensor[(980), bool], Tensor[(3, 11, 9), int16], Tensor[(1, 297), float32], Tensor[(1, 264), int8], Tensor[(4, 6, 11), float32], int32, Tensor[(630), int32], Tensor[(14, 14, 5), float32], Tensor[(6, 1, 14), float64], Tensor[(13, 15, 16), bool], Tensor[(12, 7, 4), int32], Tensor[(336), float64], Tensor[(11, 13, 11), uint8], Tensor[(143), int8], Tensor[(1573), int8], Tensor[(4, 9, 14), float32], Tensor[(504), uint16]) */
}

def @func_1829(%var_1806: Tensor[(168), float64]) -> (Tensor[(143), int8], Tensor[(6, 2, 14), bool], Tensor[(168), float64], int32) {
  %588 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
  %589 = cast(%var_1806, dtype="float64") /* ty=Tensor[(168), float64] */;
  %590 = reshape(%589, newshape=[6, 2, 14]) /* ty=Tensor[(6, 2, 14), float64] */;
  %591 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
  %592 = %588.6;
  %593 = @func_1714(%590) /* ty=Tensor[(6, 2, 14), bool] */;
  %594 = %591.2;
  (%592, %593, %var_1806, %594)
}

def @func_533(%var_485: Tensor[(11, 13, 1), int8], %var_486: Tensor[(11, 13, 11), int8]) -> (Tensor[(11, 13, 11), bool], Tensor[(11, 13, 11), int32]) {
  %595 = cast(%var_485, dtype="bool") /* ty=Tensor[(11, 13, 1), bool] */;
  %596 = cast(%var_486, dtype="bool") /* ty=Tensor[(11, 13, 11), bool] */;
  %597 = cast(%var_486, dtype="uint32") /* ty=Tensor[(11, 13, 11), uint32] */;
  %598 = cast(%var_485, dtype="uint32") /* ty=Tensor[(11, 13, 1), uint32] */;
  %599 = left_shift(%597, %598) /* ty=Tensor[(11, 13, 11), uint32] */;
  %600 = cast(%599, dtype="int32") /* ty=Tensor[(11, 13, 11), int32] */;
  %601 = cast(%var_485, dtype="int32") /* ty=Tensor[(11, 13, 1), int32] */;
  %602 = less(%595, %596) /* ty=Tensor[(11, 13, 11), bool] */;
  %603 = bitwise_or(%600, %601) /* ty=Tensor[(11, 13, 11), int32] */;
  (%602, %603)
}

def @func_3811(%var_3809: Tensor[(11, 8, 1), int32], %var_3810: Tensor[(11, 8, 3), int32]) -> (Tensor[(11, 8, 3), int32], Tensor[(6, 2, 14), bool], Tensor[(168), float64]) {
  @func_3807(%var_3809, %var_3810) /* ty=(Tensor[(11, 8, 3), int32], Tensor[(6, 2, 14), bool], Tensor[(168), float64]) */
}

def @func_3748(%var_3718: Tensor[(16, 4, 4), bool]) -> (Tensor[(16, 4, 4), bool], Tensor[(16, 4, 4), uint64]) {
  %604 = cast(%var_3718, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
  %605 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(16, 4, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(meta[relay.Constant][35] /* ty=Tensor[(16, 4, 4), bool] */, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %608 = cast(meta[relay.Constant][35] /* ty=Tensor[(16, 4, 4), bool] */, dtype="float32") /* ty=Tensor[(16, 4, 4), float32] */;
  %609 = shape_of(%var_3718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%var_3718, dtype="float32") /* ty=Tensor[(16, 4, 4), float32] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %612 = mod(%610, %611) /* ty=Tensor[(16, 4, 4), float32] */;
  %613 = cast(%612, dtype="uint64") /* ty=Tensor[(16, 4, 4), uint64] */;
  %614 = shape_of(%var_3718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%var_3718, dtype="uint64") /* ty=Tensor[(16, 4, 4), uint64] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %617 = logical_and(%606, %607) /* ty=Tensor[(16, 4, 4), bool] */;
  %618 = bitwise_xor(%615, %616) /* ty=Tensor[(16, 4, 4), uint64] */;
  (%617, %618)
}

def @func_2243(%var_2231: Tensor[(16, 14, 12), float64]) -> (Tensor[(16, 14, 12), float32],) {
  %619 = cast(%var_2231, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
  %620 = sinh(%619) /* ty=Tensor[(16, 14, 12), float64] */;
  %621 = cast(%620, dtype="float32") /* ty=Tensor[(16, 14, 12), float32] */;
  %622 = sigmoid(%621) /* ty=Tensor[(16, 14, 12), float32] */;
  (%622,)
}

def @func_4183(%var_4158: Tensor[(264), int8], %var_4162: Tensor[(16, 6, 4), float32]) -> (Tensor[(1, 7, 4), float64], Tensor[(264), int8], Tensor[(16, 6, 4), float64], Tensor[(504, 1), float64], Tensor[(630), int32], Tensor[(6, 6, 14), float64]) {
  %623 = cast(%var_4158, dtype="int8") /* ty=Tensor[(264), int8] */;
  %624 = reshape(%623, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %625 = @func_3416(%624) /* ty=(Tensor[(1, 7, 4), float64], Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), bool]) */;
  %626 = @func_2204() /* ty=Tensor[(16, 6, 4), float32] */;
  %627 = cast(%var_4162, dtype="float64") /* ty=Tensor[(16, 6, 4), float64] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%626, dtype="float64") /* ty=Tensor[(16, 6, 4), float64] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %631 = cast(meta[relay.Constant][36] /* ty=Tensor[(504, 1), float64] */, dtype="float64") /* ty=Tensor[(504, 1), float64] */;
  %632 = reshape(%631, newshape=[6, 6, 14]) /* ty=Tensor[(6, 6, 14), float64] */;
  %633 = @func_3781(%632) /* ty=(Tensor[(6, 6, 14), bool], Tensor[(264), int8]) */;
  %634 = %633.0;
  %635 = cast(%634, dtype="float64") /* ty=Tensor[(6, 6, 14), float64] */;
  %636 = %625.0;
  %637 = mod(%629, %630) /* ty=Tensor[(16, 6, 4), float64] */;
  %638 = @func_3877() /* ty=Tensor[(630), int32] */;
  %639 = sqrt(%635) /* ty=Tensor[(6, 6, 14), float64] */;
  (%636, %var_4158, %637, meta[relay.Constant][36] /* ty=Tensor[(504, 1), float64] */, %638, %639)
}

def @func_4260() -> (Tensor[(16, 6, 4), float32],) {
  %642 = fn () -> (Tensor[(16, 6, 4), float32],) {
    %640 = @func_3230() /* ty=(Tensor[(264), int8], Tensor[(630), float32], Tensor[(16, 6, 4), float32], Tensor[(7, 9, 10), uint16], Tensor[(4, 9, 14), float32], Tensor[(504), uint16], Tensor[(4, 14, 13), int16], Tensor[(728), int16]) */;
    %641 = %640.2;
    (%641,)
  };
  %642() /* ty=(Tensor[(16, 6, 4), float32],) */
}

def @func_1775(%var_1773: Tensor[(11, 8, 9), float32], %var_1774: Tensor[(630), float64]) -> (Tensor[(11, 8, 9), float32], Tensor[(7, 9, 10), float64], Tensor[(630), float64], Tensor[(264), int8], Tensor[(4, 6, 11), int8]) {
  @func_1771(%var_1773, %var_1774) /* ty=(Tensor[(11, 8, 9), float32], Tensor[(7, 9, 10), float64], Tensor[(630), float64], Tensor[(264), int8], Tensor[(4, 6, 11), int8]) */
}

def @func_2602(%var_2601: Tensor[(14, 14, 5), bool]) -> (Tensor[(14, 14, 5), bool],) {
  %648 = fn (%var_2593: Tensor[(14, 14, 5), bool]) -> (Tensor[(14, 14, 5), bool],) {
    %643 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 14, 5), bool] */, dtype="bool") /* ty=Tensor[(14, 14, 5), bool] */;
    %644 = shape_of(%var_2593, dtype="int32") /* ty=Tensor[(3), int32] */;
    %645 = cast(%var_2593, dtype="bool") /* ty=Tensor[(14, 14, 5), bool] */;
    %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %647 = logical_or(%645, %646) /* ty=Tensor[(14, 14, 5), bool] */;
    (%647,)
  };
  %648(%var_2601) /* ty=(Tensor[(14, 14, 5), bool],) */
}

def @func_3692() -> (Tensor[(264), int8],) {
  @func_3690() /* ty=(Tensor[(264), int8],) */
}

def @func_3660(%var_3577: Tensor[(13, 15, 16), int64], %var_3595: Tensor[(1, 297), float32], %var_3596: Tensor[(1, 264), int8], %var_3603: Tensor[(14, 14, 5), bool], %var_3614: int32, %var_3645: Tensor[(143), int8], %var_3646: Tensor[(1573), int8]) -> (Tensor[(13, 15, 16), float64], Tensor[(980), bool], Tensor[(3, 11, 9), int16], Tensor[(1, 297), float32], Tensor[(1, 264), int8], Tensor[(4, 6, 11), float32], int32, Tensor[(630), int32], Tensor[(14, 14, 5), float32], Tensor[(6, 1, 14), float64], Tensor[(13, 15, 16), bool], Tensor[(12, 7, 4), int32], Tensor[(336), float64], Tensor[(11, 13, 11), uint8], Tensor[(143), int8], Tensor[(1573), int8], Tensor[(4, 9, 14), float32], Tensor[(504), uint16]) {
  %649 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 15, 16), int64] */, dtype="int64") /* ty=Tensor[(13, 15, 16), int64] */;
  %650 = shape_of(%var_3577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%var_3577, dtype="int64") /* ty=Tensor[(13, 15, 16), int64] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %653 = bitwise_xor(%651, %652) /* ty=Tensor[(13, 15, 16), int64] */;
  %654 = cast(%653, dtype="float64") /* ty=Tensor[(13, 15, 16), float64] */;
  %655 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(13, 15, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 15, 16), int64] */, dtype="float64") /* ty=Tensor[(13, 15, 16), float64] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %658 = cast(%var_3595, dtype="float32") /* ty=Tensor[(1, 297), float32] */;
  %659 = cast(%var_3596, dtype="int8") /* ty=Tensor[(1, 264), int8] */;
  %660 = reshape(%658, newshape=[3, 11, 9]) /* ty=Tensor[(3, 11, 9), float32] */;
  %661 = reshape(%659, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %662 = @func_893(%660, %661) /* ty=(Tensor[(3, 11, 9), int16], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(3, 11, 9), float32]) */;
  %663 = cast(%var_3614, dtype="int32") /* ty=int32 */;
  %664 = cast(meta[relay.Constant][40] /* ty=Tensor[(630), int32] */, dtype="int32") /* ty=Tensor[(630), int32] */;
  %665 = cast(%var_3596, dtype="int8") /* ty=Tensor[(1, 264), int8] */;
  %666 = reshape(%663, newshape=[]) /* ty=int32 */;
  %667 = reshape(%664, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int32] */;
  %668 = reshape(%665, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %669 = @func_423(%666, %667, %668) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */;
  %670 = cast(meta[relay.Constant][39] /* ty=Tensor[(980), bool] */, dtype="bool") /* ty=Tensor[(980), bool] */;
  %671 = reshape(%670, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), bool] */;
  %672 = @func_2600(%671) /* ty=(Tensor[(14, 14, 5), bool],) */;
  %673 = %672.0;
  %674 = cast(%var_3603, dtype="int64") /* ty=Tensor[(14, 14, 5), int64] */;
  %675 = shape_of(%673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%673, dtype="int64") /* ty=Tensor[(14, 14, 5), int64] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %678 = bitwise_and(%676, %677) /* ty=Tensor[(14, 14, 5), int64] */;
  %679 = cast(%678, dtype="float32") /* ty=Tensor[(14, 14, 5), float32] */;
  %680 = @func_1361() /* ty=(Tensor[(6, 1, 14), float64],) */;
  %681 = cast(%var_3577, dtype="float64") /* ty=Tensor[(13, 15, 16), float64] */;
  %682 = atan(%681) /* ty=Tensor[(13, 15, 16), float64] */;
  %683 = cast(%682, dtype="bool") /* ty=Tensor[(13, 15, 16), bool] */;
  %684 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%653, dtype="bool") /* ty=Tensor[(13, 15, 16), bool] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %687 = cast(meta[relay.Constant][41] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %688 = reshape(%687, newshape=[12, 7, 4]) /* ty=Tensor[(12, 7, 4), float64] */;
  %689 = cast(%var_3645, dtype="int8") /* ty=Tensor[(143), int8] */;
  %690 = cast(%var_3646, dtype="int8") /* ty=Tensor[(1573), int8] */;
  %691 = cast(%var_3645, dtype="int8") /* ty=Tensor[(143), int8] */;
  %692 = reshape(%689, newshape=[143]) /* ty=Tensor[(143), int8] */;
  %693 = reshape(%690, newshape=[1573]) /* ty=Tensor[(1573), int8] */;
  %694 = reshape(%691, newshape=[143]) /* ty=Tensor[(143), int8] */;
  %695 = @func_1012(%692, %693, %694) /* ty=(Tensor[(4, 6, 11), int8], Tensor[(143), int16], Tensor[(1, 7, 4), float32], Tensor[(?, 7, 4), bool], Tensor[(11, 13, 11), uint8]) */;
  %696 = cast(meta[relay.Constant][42] /* ty=Tensor[(504), uint16] */, dtype="uint16") /* ty=Tensor[(504), uint16] */;
  %697 = cast(meta[relay.Constant][42] /* ty=Tensor[(504), uint16] */, dtype="uint16") /* ty=Tensor[(504), uint16] */;
  %698 = reshape(%696, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), uint16] */;
  %699 = reshape(%697, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), uint16] */;
  %700 = @func_1174(%698, %699) /* ty=(Tensor[(4, 9, 14), uint16], Tensor[(4, 9, 14), float64], Tensor[(4, 9, 14), float32], Tensor[(630), float64]) */;
  %701 = power(%656, %657) /* ty=Tensor[(13, 15, 16), float64] */;
  %702 = %662.0;
  %703 = %669.3;
  %704 = log10(%679) /* ty=Tensor[(14, 14, 5), float32] */;
  %705 = %680.0;
  %706 = logical_and(%685, %686) /* ty=Tensor[(13, 15, 16), bool] */;
  %707 = @func_1286(%688) /* ty=Tensor[(12, 7, 4), int32] */;
  %708 = %695.4;
  %709 = %700.2;
  (%701, meta[relay.Constant][39] /* ty=Tensor[(980), bool] */, %702, %var_3595, %var_3596, %703, %var_3614, meta[relay.Constant][40] /* ty=Tensor[(630), int32] */, %704, %705, %706, %707, meta[relay.Constant][41] /* ty=Tensor[(336), float64] */, %708, %var_3645, %var_3646, %709, meta[relay.Constant][42] /* ty=Tensor[(504), uint16] */)
}

def @func_2891(%var_2890: Tensor[(264), int8]) -> (Tensor[(16, 6, 4), float32], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) {
  %717 = fn (%var_2885: Tensor[(264), int8]) -> (Tensor[(16, 6, 4), float32], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) {
    %710 = @func_2204() /* ty=Tensor[(16, 6, 4), float32] */;
    %711 = cast(%710, dtype="float32") /* ty=Tensor[(16, 6, 4), float32] */;
    %712 = cast(%var_2885, dtype="int8") /* ty=Tensor[(264), int8] */;
    %713 = reshape(%712, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
    %714 = @func_244(%713) /* ty=(Tensor[(4, 6, 11), int8],) */;
    %715 = acos(%711) /* ty=Tensor[(16, 6, 4), float32] */;
    %716 = %714.0;
    (%715, %716, %var_2885)
  };
  %717(%var_2890) /* ty=(Tensor[(16, 6, 4), float32], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) */
}

def @func_2811() -> Tensor[(4, 6, 11), int8] {
  %718 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
  %718.1
}

def @func_3418(%var_3417: Tensor[(264), int8]) -> (Tensor[(1, 7, 4), float64], Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), bool]) {
  %734 = fn (%var_3392: Tensor[(264), int8]) -> (Tensor[(1, 7, 4), float64], Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), bool]) {
    %719 = @func_839() /* ty=(Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), int8], int32, Tensor[(630), int32], Tensor[(264), int8]) */;
    %720 = %719.0;
    %721 = cast(%720, dtype="float64") /* ty=Tensor[(1, 7, 4), float64] */;
    %722 = cast(%720, dtype="float64") /* ty=Tensor[(1, 7, 4), float64] */;
    %723 = cast(%var_3392, dtype="int8") /* ty=Tensor[(264), int8] */;
    %724 = reshape(%723, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
    %725 = @func_244(%724) /* ty=(Tensor[(4, 6, 11), int8],) */;
    %726 = %725.0;
    %727 = cast(%var_3392, dtype="bool") /* ty=Tensor[(264), bool] */;
    %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
    %729 = cast(%726, dtype="bool") /* ty=Tensor[(4, 6, 11), bool] */;
    %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %731 = sin(%721) /* ty=Tensor[(1, 7, 4), float64] */;
    %732 = log(%722) /* ty=Tensor[(1, 7, 4), float64] */;
    %733 = equal(%729, %730) /* ty=Tensor[(4, 6, 11), bool] */;
    (%731, %732, %733)
  };
  %734(%var_3417) /* ty=(Tensor[(1, 7, 4), float64], Tensor[(1, 7, 4), float64], Tensor[(4, 6, 11), bool]) */
}

def @main(%var_4427: Tensor[(16, 8, 15), int8], %var_4444: Tensor[(16, 8, 15), int8]) -> (Tensor[(16, 8, 15), int8], Tensor[(16, 8, 15), bool]) {
  %735 = cast(meta[relay.Constant][43] /* ty=Tensor[(16, 8, 15), int8] */, dtype="int8") /* ty=Tensor[(16, 8, 15), int8] */;
  %736 = shape_of(%var_4427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%var_4427, dtype="int8") /* ty=Tensor[(16, 8, 15), int8] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %739 = cast(%var_4444, dtype="bool") /* ty=Tensor[(16, 8, 15), bool] */;
  %740 = shape_of(%var_4427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%var_4427, dtype="bool") /* ty=Tensor[(16, 8, 15), bool] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %743 = bitwise_and(%737, %738) /* ty=Tensor[(16, 8, 15), int8] */;
  %744 = equal(%741, %742) /* ty=Tensor[(16, 8, 15), bool] */;
  (%743, %744)
}

def @func_897(%var_895: Tensor[(3, 11, 9), float32], %var_896: Tensor[(264), int8]) -> (Tensor[(3, 11, 9), int16], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(3, 11, 9), float32]) {
  @func_893(%var_895, %var_896) /* ty=(Tensor[(3, 11, 9), int16], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(3, 11, 9), float32]) */
}

def @func_428(%var_425: int32, %var_426: Tensor[(7, 9, 10), int32], %var_427: Tensor[(264), int8]) -> (Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) {
  @func_423(%var_425, %var_426, %var_427) /* ty=(Tensor[(7, 9, 10), bool], Tensor[(7, 9, 10), uint8], Tensor[(264), int8], Tensor[(4, 6, 11), float32], Tensor[(4, 6, 11), int8], Tensor[(7, 9, 10), float32]) */
}

def @func_1114() -> (Tensor[(7, 9, 10), float64], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) {
  @func_1112() /* ty=(Tensor[(7, 9, 10), float64], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) */
}

def @func_4024(%var_3988: Tensor[(6, 16, 12), uint32], %var_3989: Tensor[(6, 16, 12), uint32]) -> (Tensor[(6, 16, 12), uint32], Tensor[(264), int8]) {
  %745 = cast(%var_3989, dtype="uint32") /* ty=Tensor[(6, 16, 12), uint32] */;
  %746 = shape_of(%var_3988, dtype="int32") /* ty=Tensor[(3), int32] */;
  %747 = cast(%var_3988, dtype="uint32") /* ty=Tensor[(6, 16, 12), uint32] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %749 = multiply(%747, %748) /* ty=Tensor[(6, 16, 12), uint32] */;
  %750 = @func_3823() /* ty=Tensor[(264), int8] */;
  (%749, %750)
}

def @func_4141() -> (Tensor[(630), int32],) {
  %751 = @func_1620() /* ty=(Tensor[(630), int32], Tensor[(6, 1, 14), float64]) */;
  %752 = %751.0;
  (%752,)
}

def @func_1871(%var_1865: Tensor[(264), int8]) -> (Tensor[(7, 9, 10), float64], Tensor[(264), int8], Tensor[(33, 9), bool]) {
  %753 = cast(meta[relay.Constant][44] /* ty=Tensor[(33, 9), float32] */, dtype="float32") /* ty=Tensor[(33, 9), float32] */;
  %754 = cast(%var_1865, dtype="int8") /* ty=Tensor[(264), int8] */;
  %755 = reshape(%753, newshape=[3, 11, 9]) /* ty=Tensor[(3, 11, 9), float32] */;
  %756 = reshape(%754, newshape=[264]) /* ty=Tensor[(264), int8] */;
  %757 = @func_893(%755, %756) /* ty=(Tensor[(3, 11, 9), int16], Tensor[(4, 6, 11), int8], Tensor[(264), int8], Tensor[(3, 11, 9), float32]) */;
  %758 = %757.3;
  %759 = cast(%758, dtype="bool") /* ty=Tensor[(3, 11, 9), bool] */;
  %760 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(33, 9), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %761 = cast(meta[relay.Constant][44] /* ty=Tensor[(33, 9), float32] */, dtype="bool") /* ty=Tensor[(33, 9), bool] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %763 = @func_1859() /* ty=Tensor[(7, 9, 10), float64] */;
  %764 = equal(%761, %762) /* ty=Tensor[(33, 9), bool] */;
  (%763, %var_1865, %764)
}

def @func_1874(%var_1872: Tensor[(264), int8]) -> (Tensor[(7, 9, 10), float64], Tensor[(264), int8], Tensor[(33, 9), bool]) {
  @func_1871(%var_1872) /* ty=(Tensor[(7, 9, 10), float64], Tensor[(264), int8], Tensor[(33, 9), bool]) */
}

def @func_3807(%var_3788: Tensor[(11, 8, 1), int32], %var_3789: Tensor[(11, 8, 3), int32]) -> (Tensor[(11, 8, 3), int32], Tensor[(6, 2, 14), bool], Tensor[(168), float64]) {
  %765 = cast(%var_3788, dtype="int32") /* ty=Tensor[(11, 8, 1), int32] */;
  %766 = cast(%var_3789, dtype="int32") /* ty=Tensor[(11, 8, 3), int32] */;
  %767 = cast(meta[relay.Constant][45] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %768 = reshape(%767, newshape=[6, 2, 14]) /* ty=Tensor[(6, 2, 14), float64] */;
  %769 = multiply(%765, %766) /* ty=Tensor[(11, 8, 3), int32] */;
  %770 = @func_1714(%768) /* ty=Tensor[(6, 2, 14), bool] */;
  (%769, %770, meta[relay.Constant][45] /* ty=Tensor[(168), float64] */)
}

def @func_1255(%var_1254: Tensor[(264), int8]) -> (Tensor[(?, 7, 4), float32], Tensor[(?, 7, 4), int16], Tensor[(?, 7, 4), float32], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) {
  %796 = fn (%var_1246: Tensor[(264), int8]) -> (Tensor[(?, 7, 4), float32], Tensor[(?, 7, 4), int16], Tensor[(?, 7, 4), float32], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) {
    %771 = @func_1083() /* ty=(Tensor[(630), float64], Tensor[(4, 6, 11), float32], int32, Tensor[(264), int8], Tensor[(7, 9, 10), bool], Tensor[(?, 7, 4), bool], Tensor[(143), int8], Tensor[(1573), int8]) */;
    %772 = %771.5;
    %773 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 7, 4), bool] */, dtype="float32") /* ty=Tensor[(1, 7, 4), float32] */;
    %774 = shape_of(%772, dtype="int32") /* ty=Tensor[(3), int32] */;
    %775 = cast(%772, dtype="float32") /* ty=Tensor[(?, 7, 4), float32] */;
    %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %777 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 7, 4), bool] */, dtype="float64") /* ty=Tensor[(1, 7, 4), float64] */;
    %778 = shape_of(%772, dtype="int32") /* ty=Tensor[(3), int32] */;
    %779 = cast(%772, dtype="float64") /* ty=Tensor[(?, 7, 4), float64] */;
    %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %781 = maximum(%779, %780) /* ty=Tensor[(?, 7, 4), float64] */;
    %782 = cast(%781, dtype="float32") /* ty=Tensor[(?, 7, 4), float32] */;
    %783 = sqrt(%782) /* ty=Tensor[(?, 7, 4), float32] */;
    %784 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 7, 4), bool] */, dtype="int16") /* ty=Tensor[(1, 7, 4), int16] */;
    %785 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
    %786 = cast(%783, dtype="int16") /* ty=Tensor[(?, 7, 4), int16] */;
    %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %788 = cast(%783, dtype="float32") /* ty=Tensor[(?, 7, 4), float32] */;
    %789 = cast(%var_1246, dtype="int8") /* ty=Tensor[(264), int8] */;
    %790 = reshape(%789, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int8] */;
    %791 = @func_244(%790) /* ty=(Tensor[(4, 6, 11), int8],) */;
    %792 = mod(%775, %776) /* ty=Tensor[(?, 7, 4), float32] */;
    %793 = multiply(%786, %787) /* ty=Tensor[(?, 7, 4), int16] */;
    %794 = rsqrt(%788) /* ty=Tensor[(?, 7, 4), float32] */;
    %795 = %791.0;
    (%792, %793, %794, %795, %var_1246)
  };
  %796(%var_1254) /* ty=(Tensor[(?, 7, 4), float32], Tensor[(?, 7, 4), int16], Tensor[(?, 7, 4), float32], Tensor[(4, 6, 11), int8], Tensor[(264), int8]) */
}

def @func_3784(%var_3782: Tensor[(6, 6, 14), float64]) -> (Tensor[(6, 6, 14), bool], Tensor[(264), int8]) {
  @func_3781(%var_3782) /* ty=(Tensor[(6, 6, 14), bool], Tensor[(264), int8]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen2/build/output.py:1663: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen2/build/output.py", line 1668, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_bitwise_and_kernel0(signed char* __restrict__ T_bitwise_and, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1920) {
    T_bitwise_and[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = (placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] & placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]);
  }
}

extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_cast_cast_reshape_equal_kernel0(signed char* __restrict__ T_equal, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1920) {
    T_equal[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = ((signed char)(((bool)placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]) == ((bool)placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))])));
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

