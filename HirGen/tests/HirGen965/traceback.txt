==========mod==========
#[version = "0.0.5"]
def @func_589(%var_578: Tensor[(1, 1183), float64]) -> (Tensor[(12, 14, 8), int8], Tensor[(12, 14, 8), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 14, 8), float32] */, dtype="float32") /* ty=Tensor[(12, 14, 8), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(12, 14, 8), float32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 14, 8), float32] */, dtype="int8") /* ty=Tensor[(12, 14, 8), int8] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="int8") /* ty=Tensor[(12, 14, 8), int8] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %6 = cast(%1, dtype="float32") /* ty=Tensor[(12, 14, 8), float32] */;
  %7 = cast(%var_578, dtype="float64") /* ty=Tensor[(1, 1183), float64] */;
  %8 = reshape(%7, newshape=[13, 13, 7]) /* ty=Tensor[(13, 13, 7), float64] */;
  %9 = left_shift(%4, %5) /* ty=Tensor[(12, 14, 8), int8] */;
  %10 = cosh(%6) /* ty=Tensor[(12, 14, 8), float32] */;
  %11 = @func_134(%8) /* ty=Tensor[(13, 13, 7), float64] */;
  (%9, %10, %11, %var_578)
}

def @func_6023(%var_5999: Tensor[(4, 12, 9), uint32], %var_6000: Tensor[(4, 12, 9), uint32]) -> (Tensor[(4, 12, 9), uint32],) {
  %12 = cast(%var_6000, dtype="uint32") /* ty=Tensor[(4, 12, 9), uint32] */;
  %13 = shape_of(%var_5999, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%var_5999, dtype="uint32") /* ty=Tensor[(4, 12, 9), uint32] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %16 = left_shift(%14, %15) /* ty=Tensor[(4, 12, 9), uint32] */;
  (%16,)
}

def @func_7786() -> (Tensor[(9, 7, 2), float32], Tensor[(13, 8, 3), float32]) {
  %17 = @func_4869() /* ty=(Tensor[(9, 7, 2), float32], Tensor[(17745), float32]) */;
  %18 = @func_3347() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %19 = %17.0;
  %20 = %18.3;
  (%19, %20)
}

def @func_3545() -> (Tensor[(2, 16), float32], Tensor[(1, 1183), float32]) {
  %21 = @func_3347() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %22 = @func_2888() /* ty=(Tensor[(1, 1183), float32], Tensor[(32), float32], Tensor[(16, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) */;
  %23 = %22.0;
  %24 = cast(%23, dtype="float32") /* ty=Tensor[(1, 1183), float32] */;
  %25 = %21.2;
  %26 = log2(%24) /* ty=Tensor[(1, 1183), float32] */;
  (%25, %26)
}

def @main(%var_10417: Tensor[(17745, 10), float64]) -> (Tensor[(17745, 10), uint16],) {
  %27 = @func_7027() /* ty=(Tensor[(17745, 10), float64], Tensor[(8, 4), float32]) */;
  %28 = %27.0;
  %29 = cast(%var_10417, dtype="uint16") /* ty=Tensor[(17745, 10), uint16] */;
  %30 = shape_of(%28, dtype="int32") /* ty=Tensor[(2), int32] */;
  %31 = cast(%28, dtype="uint16") /* ty=Tensor[(17745, 10), uint16] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %33 = logical_xor(%31, %32) /* ty=Tensor[(17745, 10), uint16] */;
  (%33,)
}

def @func_5028(%var_4990: Tensor[(1, 1183), float32], %var_5005: Tensor[(32), float32], %var_5016: Tensor[(64, 24), float64]) -> (Tensor[(13, 8, 3), float32], Tensor[(?, 1183), float64], Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(17745), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(13, 8, 3), float32], uint64, Tensor[(32), float32], Tensor[(64, 24), float64]) {
  %34 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %35 = @func_3545() /* ty=(Tensor[(2, 16), float32], Tensor[(1, 1183), float32]) */;
  %36 = %35.1;
  %37 = cast(%var_4990, dtype="float64") /* ty=Tensor[(1, 1183), float64] */;
  %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(2), int32] */;
  %39 = cast(%36, dtype="float64") /* ty=Tensor[(1, 1183), float64] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %41 = cast(%var_5005, dtype="float32") /* ty=Tensor[(32), float32] */;
  %42 = cast(meta[relay.Constant][1] /* ty=Tensor[(17745), float32] */, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %43 = reshape(%41, newshape=[1, 32]) /* ty=Tensor[(1, 32), float32] */;
  %44 = reshape(%42, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
  %45 = @func_3113(%43, %44) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(1, 32), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(9, 11, 5), bool], Tensor[(1536), float64], Tensor[(17745), bool]) */;
  %46 = @func_3628() /* ty=(Tensor[(1183), float64], Tensor[(1, 1183), float32]) */;
  %47 = cast(%var_4990, dtype="float32") /* ty=Tensor[(1, 1183), float32] */;
  %48 = cast(meta[relay.Constant][2] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %49 = cast(meta[relay.Constant][1] /* ty=Tensor[(17745), float32] */, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %50 = reshape(%48, newshape=[]) /* ty=uint64 */;
  %51 = reshape(%49, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
  %52 = @func_4649(%50, %51) /* ty=(Tensor[(32), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(7, 7, 1183), int64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(13, 8, 3), float32], Tensor[(17745), float64], Tensor[(32), float32]) */;
  %53 = cast(%var_5016, dtype="float64") /* ty=Tensor[(64, 24), float64] */;
  %54 = cast(%var_5005, dtype="float32") /* ty=Tensor[(32), float32] */;
  %55 = cast(meta[relay.Constant][1] /* ty=Tensor[(17745), float32] */, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %56 = reshape(%53, newshape=[4, 384]) /* ty=Tensor[(4, 384), float64] */;
  %57 = reshape(%54, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %58 = reshape(%55, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
  %59 = @func_2934(%56, %57, %58) /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 16, 12), float32], Tensor[(4, 384), float64], Tensor[(32), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 1, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) */;
  %60 = %34.0;
  %61 = floor_mod(%39, %40) /* ty=Tensor[(?, 1183), float64] */;
  %62 = %45.5;
  %63 = %46.0;
  %64 = asin(%47) /* ty=Tensor[(1, 1183), float32] */;
  %65 = %52.6;
  %66 = %59.3;
  (%60, %61, %62, %var_5005, meta[relay.Constant][1] /* ty=Tensor[(17745), float32] */, %63, %64, %65, meta[relay.Constant][2] /* ty=uint64 */, %66, %var_5016)
}

def @func_5952() -> (Tensor[(1183), float32], Tensor[(1183), float64]) {
  %67 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %68 = %67.1;
  %69 = cast(%68, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %70 = erf(%69) /* ty=Tensor[(1183), float64] */;
  %71 = cast(%70, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %72 = cast(%70, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %73 = reshape(%72, newshape=[1183]) /* ty=Tensor[(1183), float64] */;
  %74 = @func_5553(%73) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(1183), float64]) */;
  %75 = asinh(%71) /* ty=Tensor[(1183), float32] */;
  %76 = %74.2;
  (%75, %76)
}

def @func_9640(%var_9610: Tensor[(12, 10, 10), float64], %var_9611: Tensor[(12, 10, 10), float64]) -> (Tensor[(12, 10, 10), bool],) {
  %77 = cast(%var_9611, dtype="bool") /* ty=Tensor[(12, 10, 10), bool] */;
  %78 = shape_of(%var_9610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%var_9610, dtype="bool") /* ty=Tensor[(12, 10, 10), bool] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %81 = greater_equal(%79, %80) /* ty=Tensor[(12, 10, 10), bool] */;
  (%81,)
}

def @func_9983(%var_9904: Tensor[(495), uint64]) -> (Tensor[(13, 8, 3), float32], Tensor[(495), uint64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), float32], Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(1183), float32], Tensor[(8, 4), float32]) {
  %82 = @func_8159() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %83 = @func_8381() /* ty=(Tensor[(9, 11, 5), bool], Tensor[(1183), float32], Tensor[(1, 1183), float32], Tensor[(1, 1183), float32], Tensor[(420), float32]) */;
  %84 = cast(%var_9904, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %85 = reshape(%84, newshape=[9, 11, 5]) /* ty=Tensor[(9, 11, 5), uint64] */;
  %86 = @func_1145(%85) /* ty=Tensor[(9, 11, 5), bool] */;
  %87 = cast(%86, dtype="float32") /* ty=Tensor[(9, 11, 5), float32] */;
  %88 = @func_4516() /* ty=(Tensor[(1183), float64],) */;
  %89 = @func_6053() /* ty=(Tensor[(1183), float64], Tensor[(1183), float64], Tensor[(17745), float32], Tensor[(13, 8, 3), float32]) */;
  %90 = %89.0;
  %91 = cast(%90, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %92 = @func_9732() /* ty=(Tensor[(9, 7, 2), float32], Tensor[(8, 4), float32], Tensor[(13, 8, 3), float32], Tensor[(416), float32], Tensor[(1183), float64]) */;
  %93 = %82.0;
  %94 = %83.3;
  %95 = atan(%87) /* ty=Tensor[(9, 11, 5), float32] */;
  %96 = %88.0;
  %97 = @func_3572() /* ty=Tensor[(13, 8, 3), float32] */;
  %98 = cos(%91) /* ty=Tensor[(1183), float32] */;
  %99 = %92.1;
  (%93, %var_9904, %94, %95, %96, %97, %98, %99)
}

def @func_2888() -> (Tensor[(1, 1183), float32], Tensor[(32), float32], Tensor[(16, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) {
  %100 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %101 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 2), float32] */;
  %102 = reshape(%101, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %103 = @func_2738(%102) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) */;
  %104 = @func_2575() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %105 = %100.0;
  %106 = %103.2;
  %107 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  %108 = %104.0;
  (%105, %106, meta[relay.Constant][3] /* ty=Tensor[(16, 2), float32] */, %107, %108)
}

def @func_6153(%var_6145: uint64, %var_6146: Tensor[(32), float32]) -> (Tensor[(13, 8, 3), float64], Tensor[(2, 16), float32], uint64, Tensor[(32), float32]) {
  %109 = cast(%var_6145, dtype="uint64") /* ty=uint64 */;
  %110 = cast(%var_6146, dtype="float32") /* ty=Tensor[(32), float32] */;
  %111 = reshape(%109, newshape=[]) /* ty=uint64 */;
  %112 = reshape(%110, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %113 = @func_2311(%111, %112) /* ty=(Tensor[(7, 7, 1), uint64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(32), float32]) */;
  %114 = @func_5778() /* ty=Tensor[(13, 8, 3), float64] */;
  %115 = %113.1;
  (%114, %115, %var_6145, %var_6146)
}

def @func_3458(%var_3397: uint64, %var_3410: Tensor[(15, 1183), float32]) -> (Tensor[(32), float32], uint64, Tensor[(32), float32], Tensor[(15, 1183), bool], Tensor[(1, 1183), float32], Tensor[(?, 1183), int16], Tensor[(8, 16, 12), float32], Tensor[(1536), float64]) {
  %116 = cast(%var_3397, dtype="uint64") /* ty=uint64 */;
  %117 = cast(meta[relay.Constant][4] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %118 = reshape(%116, newshape=[]) /* ty=uint64 */;
  %119 = reshape(%117, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %120 = @func_2311(%118, %119) /* ty=(Tensor[(7, 7, 1), uint64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(32), float32]) */;
  %121 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %122 = %121.2;
  %123 = cast(%122, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
  %124 = cast(%var_3410, dtype="bool") /* ty=Tensor[(15, 1183), bool] */;
  %125 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %126 = @func_2995() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool], Tensor[(17745, 1), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */;
  %127 = %126.3;
  %128 = cast(%127, dtype="int16") /* ty=Tensor[(13, 13, 7), int16] */;
  %129 = shape_of(%122, dtype="int32") /* ty=Tensor[(2), int32] */;
  %130 = cast(%122, dtype="int16") /* ty=Tensor[(1, 1183), int16] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %132 = cast(meta[relay.Constant][5] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %133 = %120.3;
  %134 = cast(%133, dtype="float32") /* ty=Tensor[(32), float32] */;
  %135 = reshape(%132, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
  %136 = reshape(%134, newshape=[2, 16]) /* ty=Tensor[(2, 16), float32] */;
  %137 = @func_2261(%135, %136) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(8, 16, 12), float32], Tensor[(6, 10, 7), float64]) */;
  %138 = less_equal(%123, %124) /* ty=Tensor[(15, 1183), bool] */;
  %139 = %125.0;
  %140 = bitwise_or(%130, %131) /* ty=Tensor[(?, 1183), int16] */;
  %141 = %137.4;
  (%133, %var_3397, meta[relay.Constant][4] /* ty=Tensor[(32), float32] */, %138, %139, %140, %141, meta[relay.Constant][5] /* ty=Tensor[(1536), float64] */)
}

def @func_2934(%var_2909: Tensor[(4, 384), float64], %var_2910: Tensor[(32), float32], %var_2930: Tensor[(17745), float32]) -> (Tensor[(9, 11, 5), bool], Tensor[(8, 16, 12), float32], Tensor[(4, 384), float64], Tensor[(32), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 1, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) {
  %142 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %143 = cast(%var_2909, dtype="float64") /* ty=Tensor[(4, 384), float64] */;
  %144 = cast(%var_2910, dtype="float32") /* ty=Tensor[(32), float32] */;
  %145 = reshape(%143, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
  %146 = reshape(%144, newshape=[2, 16]) /* ty=Tensor[(2, 16), float32] */;
  %147 = @func_2261(%145, %146) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(8, 16, 12), float32], Tensor[(6, 10, 7), float64]) */;
  %148 = cast(%var_2910, dtype="float32") /* ty=Tensor[(32), float32] */;
  %149 = reshape(%148, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %150 = @func_2738(%149) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) */;
  %151 = %150.1;
  %152 = cast(%151, dtype="float32") /* ty=Tensor[(16, 1, 2), float32] */;
  %153 = reshape(%152, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %154 = @func_2738(%153) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) */;
  %155 = cast(%var_2930, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %156 = reshape(%155, newshape=[15, 1183]) /* ty=Tensor[(15, 1183), float32] */;
  %157 = @func_2856(%156) /* ty=(Tensor[(15, 1183), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
  %158 = %142.3;
  %159 = %147.4;
  %160 = %154.1;
  %161 = %157.2;
  (%158, %159, %var_2909, %var_2910, %151, %160, %161, %var_2930)
}

def @func_9145(%var_9101: Tensor[(432), uint32], %var_9104: Tensor[(16, 2), float32], %var_9105: Tensor[(1536), float64]) -> (Tensor[(13, 13, 7), float64], Tensor[(4, 12, 9), uint32], Tensor[(432), uint32], Tensor[(13, 8, 3), float32], Tensor[(16, 2), float32], Tensor[(1536), float64], Tensor[(9, 11, 5), bool], Tensor[(13, 8, 3), float32]) {
  %162 = @func_5574() /* ty=(Tensor[(13, 13, 7), float64],) */;
  %163 = cast(%var_9101, dtype="uint32") /* ty=Tensor[(432), uint32] */;
  %164 = cast(%var_9101, dtype="uint32") /* ty=Tensor[(432), uint32] */;
  %165 = reshape(%163, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint32] */;
  %166 = reshape(%164, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint32] */;
  %167 = @func_6023(%165, %166) /* ty=(Tensor[(4, 12, 9), uint32],) */;
  %168 = %162.0;
  %169 = cast(%168, dtype="float32") /* ty=Tensor[(13, 13, 7), float32] */;
  %170 = cast(%var_9104, dtype="float32") /* ty=Tensor[(16, 2), float32] */;
  %171 = cast(%var_9105, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %172 = reshape(%169, newshape=[1, 1183]) /* ty=Tensor[(1, 1183), float32] */;
  %173 = reshape(%170, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %174 = reshape(%171, newshape=[64, 24]) /* ty=Tensor[(64, 24), float64] */;
  %175 = @func_5028(%172, %173, %174) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(?, 1183), float64], Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(17745), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(13, 8, 3), float32], uint64, Tensor[(32), float32], Tensor[(64, 24), float64]) */;
  %176 = @func_7277() /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 4), float32], Tensor[(1183), float64]) */;
  %177 = %167.0;
  %178 = %175.7;
  %179 = %176.0;
  %180 = @func_2954() /* ty=Tensor[(13, 8, 3), float32] */;
  (%168, %177, %var_9101, %178, %var_9104, %var_9105, %179, %180)
}

def @func_8612(%var_8593: Tensor[(6, 3, 9), float32]) -> (Tensor[(6, 3, 9), float32], Tensor[(13, 8, 3), float32]) {
  %181 = cast(%var_8593, dtype="float32") /* ty=Tensor[(6, 3, 9), float32] */;
  %182 = asinh(%181) /* ty=Tensor[(6, 3, 9), float32] */;
  %183 = @func_2954() /* ty=Tensor[(13, 8, 3), float32] */;
  (%182, %183)
}

def @func_3281() -> Tensor[(1183), float64] {
  %184 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %184.1
}

def @func_2738(%var_2714: Tensor[(32), float32]) -> (Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) {
  %185 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %186 = cast(%var_2714, dtype="float32") /* ty=Tensor[(32), float32] */;
  %187 = reshape(%186, newshape=[16, 1, 2]) /* ty=Tensor[(16, 1, 2), float32] */;
  %188 = @func_1462(%187) /* ty=(Tensor[(16, 1, 2), float32],) */;
  %189 = %185.4;
  %190 = %188.0;
  (%189, %190, %var_2714)
}

def @func_4977(%var_4938: Tensor[(4, 8, 12), float64]) -> (Tensor[(4, 8, 12), float64], Tensor[(1, 1183), float32]) {
  %191 = cast(%var_4938, dtype="float64") /* ty=Tensor[(4, 8, 12), float64] */;
  %192 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(4, 8, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 8, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 8, 12), float64] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %195 = @func_3628() /* ty=(Tensor[(1183), float64], Tensor[(1, 1183), float32]) */;
  %196 = floor_mod(%193, %194) /* ty=Tensor[(4, 8, 12), float64] */;
  %197 = %195.1;
  (%196, %197)
}

def @func_8767() -> (Tensor[(1183), float64],) {
  %198 = @func_7277() /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 4), float32], Tensor[(1183), float64]) */;
  %199 = %198.2;
  (%199,)
}

def @func_9777() -> (Tensor[(3, 13, 1), uint32], Tensor[(1183), float64], Tensor[(3, 13, 1), float32]) {
  %200 = cast(meta[relay.Constant][7] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %201 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 13, 1), uint32] */, dtype="uint32") /* ty=Tensor[(3, 13, 1), uint32] */;
  %202 = @func_4830() /* ty=(Tensor[(1183), float64], Tensor[(507, 35), float32], Tensor[(17745), float32]) */;
  %203 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 13, 1), uint32] */, dtype="float32") /* ty=Tensor[(3, 13, 1), float32] */;
  %204 = bitwise_and(%200, %201) /* ty=Tensor[(3, 13, 1), uint32] */;
  %205 = %202.0;
  %206 = asin(%203) /* ty=Tensor[(3, 13, 1), float32] */;
  (%204, %205, %206)
}

def @func_8921() -> (Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(1183), float32]) {
  %207 = @func_7277() /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 4), float32], Tensor[(1183), float64]) */;
  %208 = @func_3735() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %209 = %207.2;
  %210 = %208.0;
  %211 = @func_8449() /* ty=Tensor[(1183), float32] */;
  (%209, %210, %211)
}

def @func_7995() -> (Tensor[(1183), float64],) {
  %212 = @func_4830() /* ty=(Tensor[(1183), float64], Tensor[(507, 35), float32], Tensor[(17745), float32]) */;
  %213 = %212.0;
  (%213,)
}

def @func_6575() -> (Tensor[(1183), float64], Tensor[(13, 13, 7), float64], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) {
  %214 = @func_5978() /* ty=Tensor[(1183), float64] */;
  %215 = cast(%214, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %216 = reshape(%215, newshape=[13, 13, 7]) /* ty=Tensor[(13, 13, 7), float64] */;
  %217 = cast(meta[relay.Constant][9] /* ty=Tensor[(17745), float32] */, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %218 = reshape(%217, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
  %219 = @func_5719(%218) /* ty=(Tensor[(1, 1183), float32], Tensor[(15, 1183), bool], Tensor[(17745), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) */;
  %220 = @func_134(%216) /* ty=Tensor[(13, 13, 7), float64] */;
  %221 = %219.3;
  (%214, %220, %221, meta[relay.Constant][9] /* ty=Tensor[(17745), float32] */)
}

def @func_5882() -> (Tensor[(495), uint64],) {
  %222 = @func_4386() /* ty=Tensor[(495), uint64] */;
  (%222,)
}

def @func_5778() -> Tensor[(13, 8, 3), float64] {
  %223 = @func_3347() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %224 = %223.0;
  %225 = cast(%224, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  atanh(%225) /* ty=Tensor[(13, 8, 3), float64] */
}

def @func_3271() -> Tensor[(17745, 1), float32] {
  %226 = @func_2995() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool], Tensor[(17745, 1), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */;
  %226.2
}

def @func_3113(%var_3060: Tensor[(1, 32), float32], %var_3109: Tensor[(17745), float32]) -> (Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(1, 32), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(9, 11, 5), bool], Tensor[(1536), float64], Tensor[(17745), bool]) {
  %227 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %228 = cast(%var_3060, dtype="float32") /* ty=Tensor[(1, 32), float32] */;
  %229 = reshape(%228, newshape=[16, 1, 2]) /* ty=Tensor[(16, 1, 2), float32] */;
  %230 = @func_1462(%229) /* ty=(Tensor[(16, 1, 2), float32],) */;
  %231 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %232 = cast(meta[relay.Constant][10] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %233 = cast(%var_3060, dtype="float32") /* ty=Tensor[(1, 32), float32] */;
  %234 = cast(meta[relay.Constant][11] /* ty=Tensor[(17745), float32] */, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %235 = reshape(%232, newshape=[4, 384]) /* ty=Tensor[(4, 384), float64] */;
  %236 = reshape(%233, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %237 = reshape(%234, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
  %238 = @func_2934(%235, %236, %237) /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 16, 12), float32], Tensor[(4, 384), float64], Tensor[(32), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 1, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) */;
  %239 = cast(%var_3109, dtype="bool") /* ty=Tensor[(17745), bool] */;
  %240 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(17745), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %241 = cast(meta[relay.Constant][11] /* ty=Tensor[(17745), float32] */, dtype="bool") /* ty=Tensor[(17745), bool] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?), bool] */;
  %243 = %227.4;
  %244 = %230.0;
  %245 = @func_2954() /* ty=Tensor[(13, 8, 3), float32] */;
  %246 = %231.0;
  %247 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  %248 = %238.0;
  %249 = not_equal(%241, %242) /* ty=Tensor[(17745), bool] */;
  (%243, %244, %var_3060, %245, %246, %247, %248, meta[relay.Constant][10] /* ty=Tensor[(1536), float64] */, %249)
}

def @func_4787(%var_4776: Tensor[(507, 35), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(507, 35), float32], Tensor[(1183), int32]) {
  %250 = cast(meta[relay.Constant][12] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %251 = cast(%var_4776, dtype="float32") /* ty=Tensor[(507, 35), float32] */;
  %252 = reshape(%250, newshape=[1, 32]) /* ty=Tensor[(1, 32), float32] */;
  %253 = reshape(%251, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
  %254 = @func_3113(%252, %253) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(1, 32), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(9, 11, 5), bool], Tensor[(1536), float64], Tensor[(17745), bool]) */;
  %255 = @func_4516() /* ty=(Tensor[(1183), float64],) */;
  %256 = %255.0;
  %257 = cast(%256, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %258 = reshape(%257, newshape=[1, 1183]) /* ty=Tensor[(1, 1183), float64] */;
  %259 = @func_589(%258) /* ty=(Tensor[(12, 14, 8), int8], Tensor[(12, 14, 8), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */;
  %260 = %259.3;
  %261 = cast(%260, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
  %262 = shape_of(%256, dtype="int32") /* ty=Tensor[(1), int32] */;
  %263 = cast(%256, dtype="bool") /* ty=Tensor[(1183), bool] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?), bool] */;
  %265 = less(%263, %264) /* ty=Tensor[(1183), bool] */;
  %266 = cast(%265, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %267 = tan(%266) /* ty=Tensor[(1183), float64] */;
  %268 = cast(%256, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %269 = reshape(%268, newshape=[1, 1183]) /* ty=Tensor[(1, 1183), float64] */;
  %270 = @func_589(%269) /* ty=(Tensor[(12, 14, 8), int8], Tensor[(12, 14, 8), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */;
  %271 = %270.3;
  %272 = cast(%260, dtype="int16") /* ty=Tensor[(1, 1183), int16] */;
  %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(2), int32] */;
  %274 = cast(%271, dtype="int16") /* ty=Tensor[(1, 1183), int16] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %276 = bitwise_xor(%274, %275) /* ty=Tensor[(?, 1183), int16] */;
  %277 = cast(%276, dtype="int32") /* ty=Tensor[(?, 1183), int32] */;
  %278 = shape_of(%267, dtype="int32") /* ty=Tensor[(1), int32] */;
  %279 = cast(%267, dtype="int32") /* ty=Tensor[(1183), int32] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?), int32] */;
  %281 = %254.5;
  %282 = bitwise_and(%279, %280) /* ty=Tensor[(1183), int32] */;
  (%281, meta[relay.Constant][12] /* ty=Tensor[(32), float32] */, %var_4776, %282)
}

def @func_4328() -> Tensor[(13, 13, 7), float64] {
  %283 = @func_2995() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool], Tensor[(17745, 1), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */;
  %283.3
}

def @func_6922() -> (Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) {
  %284 = @func_2575() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %285 = @func_6799() /* ty=Tensor[(13, 8, 3), float32] */;
  %286 = %284.0;
  (%285, %286)
}

def @func_7672(%var_7647: Tensor[(420), float64], %var_7649: Tensor[(17745, 6), bool]) -> (Tensor[(17745, 6), float32], Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(17745, 6), bool], Tensor[(17745, 2), float64], Tensor[(1, 35490), float32]) {
  %287 = @func_3271() /* ty=Tensor[(17745, 1), float32] */;
  %288 = cast(%287, dtype="float32") /* ty=Tensor[(17745, 1), float32] */;
  %289 = cos(%288) /* ty=Tensor[(17745, 1), float32] */;
  %290 = cast(%289, dtype="float32") /* ty=Tensor[(17745, 1), float32] */;
  %291 = cast(meta[relay.Constant][13] /* ty=Tensor[(17745, 6), float32] */, dtype="float32") /* ty=Tensor[(17745, 6), float32] */;
  %292 = cast(%var_7647, dtype="float64") /* ty=Tensor[(420), float64] */;
  %293 = reshape(%292, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
  %294 = @func_339(%293) /* ty=(Tensor[(6, 10, 7), float64],) */;
  %295 = cast(%289, dtype="float64") /* ty=Tensor[(17745, 1), float64] */;
  %296 = acosh(%295) /* ty=Tensor[(17745, 1), float64] */;
  %297 = cast(%296, dtype="bool") /* ty=Tensor[(17745, 1), bool] */;
  %298 = cast(meta[relay.Constant][13] /* ty=Tensor[(17745, 6), float32] */, dtype="bool") /* ty=Tensor[(17745, 6), bool] */;
  %299 = greater_equal(%297, %298) /* ty=Tensor[(17745, 6), bool] */;
  %300 = cast(%var_7649, dtype="bool") /* ty=Tensor[(17745, 6), bool] */;
  %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(2), int32] */;
  %302 = cast(%299, dtype="bool") /* ty=Tensor[(17745, 6), bool] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %304 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 35490), float32] */, dtype="float32") /* ty=Tensor[(1, 35490), float32] */;
  %305 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 35490), float32] */, dtype="float32") /* ty=Tensor[(1, 35490), float32] */;
  %306 = reshape(%304, newshape=[17745, 2]) /* ty=Tensor[(17745, 2), float32] */;
  %307 = reshape(%305, newshape=[17745, 2]) /* ty=Tensor[(17745, 2), float32] */;
  %308 = @func_7340(%306, %307) /* ty=(Tensor[(17745, 2), int8], Tensor[(17745, 2), bool], Tensor[(17745, 2), float64]) */;
  %309 = floor_mod(%290, %291) /* ty=Tensor[(17745, 6), float32] */;
  %310 = %294.0;
  %311 = greater(%302, %303) /* ty=Tensor[(17745, 6), bool] */;
  %312 = %308.2;
  (%309, %310, %var_7647, %311, %312, meta[relay.Constant][14] /* ty=Tensor[(1, 35490), float32] */)
}

def @func_6799() -> Tensor[(13, 8, 3), float32] {
  %313 = @func_4314() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
  %313.0
}

def @func_2311(%var_2294: uint64, %var_2301: Tensor[(32), float32]) -> (Tensor[(7, 7, 1), uint64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(32), float32]) {
  %314 = cast(%var_2294, dtype="uint64") /* ty=uint64 */;
  %315 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 7, 1), uint64] */, dtype="uint64") /* ty=Tensor[(7, 7, 1), uint64] */;
  %316 = cast(meta[relay.Constant][16] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %317 = cast(%var_2301, dtype="float32") /* ty=Tensor[(32), float32] */;
  %318 = reshape(%316, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
  %319 = reshape(%317, newshape=[2, 16]) /* ty=Tensor[(2, 16), float32] */;
  %320 = @func_2261(%318, %319) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(8, 16, 12), float32], Tensor[(6, 10, 7), float64]) */;
  %321 = bitwise_xor(%314, %315) /* ty=Tensor[(7, 7, 1), uint64] */;
  %322 = %320.3;
  (%321, %322, meta[relay.Constant][16] /* ty=Tensor[(1536), float64] */, %var_2301)
}

def @func_8761() -> (Tensor[(1, 1183), float32], Tensor[(1183), float32], Tensor[(15, 1183), bool]) {
  %323 = @func_8351() /* ty=(Tensor[(1, 1183), float32],) */;
  %324 = @func_4314() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
  %325 = %323.0;
  %326 = @func_6965() /* ty=Tensor[(1183), float32] */;
  %327 = %324.1;
  (%325, %326, %327)
}

def @func_3470() -> Tensor[(1, 1183), float32] {
  %328 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %328.0
}

def @func_8692() -> (Tensor[(9, 7, 2), float32],) {
  %329 = @func_4869() /* ty=(Tensor[(9, 7, 2), float32], Tensor[(17745), float32]) */;
  %330 = %329.0;
  %331 = cast(%330, dtype="float32") /* ty=Tensor[(9, 7, 2), float32] */;
  %332 = log10(%331) /* ty=Tensor[(9, 7, 2), float32] */;
  (%332,)
}

def @func_4314() -> (Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) {
  %333 = @func_4291() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %334 = @func_2995() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool], Tensor[(17745, 1), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */;
  %335 = %333.0;
  %336 = %334.1;
  (%335, %336)
}

def @func_4386() -> Tensor[(495), uint64] {
  %337 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %337.4
}

def @func_7500(%var_7463: Tensor[(7, 1183), float32]) -> (Tensor[(7, 1183), bool], Tensor[(13, 8, 3), float64], Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(32, 1), float32], Tensor[(17745), float32]) {
  %338 = @func_3470() /* ty=Tensor[(1, 1183), float32] */;
  %339 = cast(%338, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
  %340 = cast(%var_7463, dtype="bool") /* ty=Tensor[(7, 1183), bool] */;
  %341 = @func_3572() /* ty=Tensor[(13, 8, 3), float32] */;
  %342 = cast(%341, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %343 = cast(meta[relay.Constant][17] /* ty=Tensor[(32, 1), float32] */, dtype="float32") /* ty=Tensor[(32, 1), float32] */;
  %344 = cast(meta[relay.Constant][18] /* ty=Tensor[(17745), float32] */, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %345 = reshape(%343, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %346 = reshape(%344, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
  %347 = @func_4255(%345, %346) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(17745), float32]) */;
  %348 = not_equal(%339, %340) /* ty=Tensor[(7, 1183), bool] */;
  %349 = log10(%342) /* ty=Tensor[(13, 8, 3), float64] */;
  %350 = @func_5978() /* ty=Tensor[(1183), float64] */;
  %351 = %347.1;
  (%348, %349, %350, %351, meta[relay.Constant][17] /* ty=Tensor[(32, 1), float32] */, meta[relay.Constant][18] /* ty=Tensor[(17745), float32] */)
}

def @func_6965() -> Tensor[(1183), float32] {
  %352 = @func_5952() /* ty=(Tensor[(1183), float32], Tensor[(1183), float64]) */;
  %352.0
}

def @func_7277() -> (Tensor[(9, 11, 5), bool], Tensor[(8, 4), float32], Tensor[(1183), float64]) {
  %353 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %354 = @func_7027() /* ty=(Tensor[(17745, 10), float64], Tensor[(8, 4), float32]) */;
  %355 = @func_4516() /* ty=(Tensor[(1183), float64],) */;
  %356 = %355.0;
  %357 = @func_4419() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %358 = %357.1;
  %359 = cast(%358, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %360 = shape_of(%356, dtype="int32") /* ty=Tensor[(1), int32] */;
  %361 = cast(%356, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?), float64] */;
  %363 = %353.3;
  %364 = %354.1;
  %365 = floor_mod(%361, %362) /* ty=Tensor[(1183), float64] */;
  (%363, %364, %365)
}

def @func_7980() -> (Tensor[(1183), float64],) {
  %366 = @func_4516() /* ty=(Tensor[(1183), float64],) */;
  %367 = %366.0;
  (%367,)
}

def @func_8895() -> (Tensor[(1183), float64],) {
  %368 = @func_7995() /* ty=(Tensor[(1183), float64],) */;
  %369 = %368.0;
  (%369,)
}

def @func_6350() -> (Tensor[(1, 1183), float32], Tensor[(1183), float64]) {
  %370 = @func_6053() /* ty=(Tensor[(1183), float64], Tensor[(1183), float64], Tensor[(17745), float32], Tensor[(13, 8, 3), float32]) */;
  %371 = @func_3470() /* ty=Tensor[(1, 1183), float32] */;
  %372 = %370.1;
  (%371, %372)
}

def @func_8269() -> Tensor[(13, 13, 7), float64] {
  @func_4328() /* ty=Tensor[(13, 13, 7), float64] */
}

def @func_4830() -> (Tensor[(1183), float64], Tensor[(507, 35), float32], Tensor[(17745), float32]) {
  %373 = @func_4516() /* ty=(Tensor[(1183), float64],) */;
  %374 = cast(meta[relay.Constant][19] /* ty=Tensor[(17745), float32] */, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %375 = reshape(%374, newshape=[507, 35]) /* ty=Tensor[(507, 35), float32] */;
  %376 = @func_4787(%375) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(507, 35), float32], Tensor[(1183), int32]) */;
  %377 = %373.0;
  %378 = %376.2;
  (%377, %378, meta[relay.Constant][19] /* ty=Tensor[(17745), float32] */)
}

def @func_8844() -> (Tensor[(13, 8, 3), float32], Tensor[(1183), float32]) {
  %379 = @func_4554() /* ty=Tensor[(13, 8, 3), float32] */;
  %380 = @func_6965() /* ty=Tensor[(1183), float32] */;
  (%379, %380)
}

def @func_2261(%var_2204: Tensor[(8, 16, 12), float64], %var_2226: Tensor[(2, 16), float32]) -> (Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(8, 16, 12), float32], Tensor[(6, 10, 7), float64]) {
  %381 = cast(meta[relay.Constant][20] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %382 = reshape(%381, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
  %383 = @func_339(%382) /* ty=(Tensor[(6, 10, 7), float64],) */;
  %384 = cast(%var_2226, dtype="float32") /* ty=Tensor[(2, 16), float32] */;
  %385 = reshape(%384, newshape=[16, 1, 2]) /* ty=Tensor[(16, 1, 2), float32] */;
  %386 = @func_1462(%385) /* ty=(Tensor[(16, 1, 2), float32],) */;
  %387 = cast(%var_2204, dtype="float64") /* ty=Tensor[(8, 16, 12), float64] */;
  %388 = asin(%387) /* ty=Tensor[(8, 16, 12), float64] */;
  %389 = cast(%var_2204, dtype="bool") /* ty=Tensor[(8, 16, 12), bool] */;
  %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%388, dtype="bool") /* ty=Tensor[(8, 16, 12), bool] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %393 = less_equal(%391, %392) /* ty=Tensor[(8, 16, 12), bool] */;
  %394 = cast(%var_2204, dtype="float64") /* ty=Tensor[(8, 16, 12), float64] */;
  %395 = acos(%394) /* ty=Tensor[(8, 16, 12), float64] */;
  %396 = cast(%395, dtype="float32") /* ty=Tensor[(8, 16, 12), float32] */;
  %397 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%393, dtype="float32") /* ty=Tensor[(8, 16, 12), float32] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %400 = %383.0;
  %401 = cast(%400, dtype="float64") /* ty=Tensor[(6, 10, 7), float64] */;
  %402 = reshape(%401, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
  %403 = @func_339(%402) /* ty=(Tensor[(6, 10, 7), float64],) */;
  %404 = %386.0;
  %405 = floor_divide(%398, %399) /* ty=Tensor[(8, 16, 12), float32] */;
  %406 = %403.0;
  (%400, meta[relay.Constant][20] /* ty=Tensor[(420), float64] */, %404, %var_2226, %405, %406)
}

def @func_4911() -> (Tensor[(13, 13, 7), float64], Tensor[(17745, 1), float64]) {
  %407 = @func_4684() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(32), float32], Tensor[(8, 4), float32], Tensor[(17745, 1), float32], Tensor[(16, 1, 2), float32]) */;
  %408 = @func_3271() /* ty=Tensor[(17745, 1), float32] */;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(17745, 1), float64] */;
  %410 = %407.1;
  %411 = sigmoid(%409) /* ty=Tensor[(17745, 1), float64] */;
  (%410, %411)
}

def @func_4554() -> Tensor[(13, 8, 3), float32] {
  @func_2546() /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_7417() -> (Tensor[(32), float32],) {
  %412 = @func_2888() /* ty=(Tensor[(1, 1183), float32], Tensor[(32), float32], Tensor[(16, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) */;
  %413 = %412.1;
  (%413,)
}

def @func_4291() -> (Tensor[(13, 8, 3), float32],) {
  %414 = @func_3735() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %415 = %414.0;
  (%415,)
}

def @func_4869() -> (Tensor[(9, 7, 2), float32], Tensor[(17745), float32]) {
  %416 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 7, 2), float32] */, dtype="float32") /* ty=Tensor[(9, 7, 2), float32] */;
  %417 = @func_4830() /* ty=(Tensor[(1183), float64], Tensor[(507, 35), float32], Tensor[(17745), float32]) */;
  %418 = tan(%416) /* ty=Tensor[(9, 7, 2), float32] */;
  %419 = %417.2;
  (%418, %419)
}

def @func_6834() -> Tensor[(1183), float32] {
  %420 = @func_5268() /* ty=(Tensor[(1183), float32], Tensor[(6, 10, 7), float64], Tensor[(1536), float64], Tensor[(32), float32]) */;
  %420.0
}

def @func_2995() -> (Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool], Tensor[(17745, 1), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) {
  %421 = @func_2575() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %422 = cast(meta[relay.Constant][22] /* ty=Tensor[(17745, 1), float32] */, dtype="float32") /* ty=Tensor[(17745, 1), float32] */;
  %423 = reshape(%422, newshape=[15, 1183]) /* ty=Tensor[(15, 1183), float32] */;
  %424 = @func_2856(%423) /* ty=(Tensor[(15, 1183), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
  %425 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 1183), float64] */, dtype="float64") /* ty=Tensor[(1, 1183), float64] */;
  %426 = reshape(%425, newshape=[13, 13, 7]) /* ty=Tensor[(13, 13, 7), float64] */;
  %427 = %421.0;
  %428 = %424.3;
  %429 = @func_134(%426) /* ty=Tensor[(13, 13, 7), float64] */;
  (%427, %428, meta[relay.Constant][22] /* ty=Tensor[(17745, 1), float32] */, %429, meta[relay.Constant][23] /* ty=Tensor[(1, 1183), float64] */)
}

def @func_7557() -> Tensor[(13, 8, 3), float32] {
  @func_3572() /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_7180() -> Tensor[(6, 10, 7), float64] {
  %430 = @func_5268() /* ty=(Tensor[(1183), float32], Tensor[(6, 10, 7), float64], Tensor[(1536), float64], Tensor[(32), float32]) */;
  %430.1
}

def @func_5268() -> (Tensor[(1183), float32], Tensor[(6, 10, 7), float64], Tensor[(1536), float64], Tensor[(32), float32]) {
  %431 = @func_4516() /* ty=(Tensor[(1183), float64],) */;
  %432 = %431.0;
  %433 = cast(%432, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %434 = cast(meta[relay.Constant][24] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %435 = cast(meta[relay.Constant][25] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %436 = reshape(%434, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
  %437 = reshape(%435, newshape=[2, 16]) /* ty=Tensor[(2, 16), float32] */;
  %438 = @func_2261(%436, %437) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(8, 16, 12), float32], Tensor[(6, 10, 7), float64]) */;
  %439 = acos(%433) /* ty=Tensor[(1183), float32] */;
  %440 = %438.0;
  (%439, %440, meta[relay.Constant][24] /* ty=Tensor[(1536), float64] */, meta[relay.Constant][25] /* ty=Tensor[(32), float32] */)
}

def @func_7893() -> (Tensor[(13, 8, 3), float32], Tensor[(1, 1183), float32], Tensor[(17745, 10), bool]) {
  %441 = @func_2575() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %442 = @func_3545() /* ty=(Tensor[(2, 16), float32], Tensor[(1, 1183), float32]) */;
  %443 = %441.0;
  %444 = %442.1;
  %445 = @func_5678() /* ty=Tensor[(17745, 10), bool] */;
  (%443, %444, %445)
}

def @func_7340(%var_7306: Tensor[(17745, 2), float32], %var_7322: Tensor[(17745, 2), float32]) -> (Tensor[(17745, 2), int8], Tensor[(17745, 2), bool], Tensor[(17745, 2), float64]) {
  %446 = @func_4684() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(32), float32], Tensor[(8, 4), float32], Tensor[(17745, 1), float32], Tensor[(16, 1, 2), float32]) */;
  %447 = %446.4;
  %448 = cast(%447, dtype="int8") /* ty=Tensor[(17745, 1), int8] */;
  %449 = cast(%var_7306, dtype="int8") /* ty=Tensor[(17745, 2), int8] */;
  %450 = cast(%var_7322, dtype="bool") /* ty=Tensor[(17745, 2), bool] */;
  %451 = shape_of(%var_7306, dtype="int32") /* ty=Tensor[(2), int32] */;
  %452 = cast(%var_7306, dtype="bool") /* ty=Tensor[(17745, 2), bool] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %454 = cast(%var_7306, dtype="bool") /* ty=Tensor[(17745, 2), bool] */;
  %455 = shape_of(%var_7322, dtype="int32") /* ty=Tensor[(2), int32] */;
  %456 = cast(%var_7322, dtype="bool") /* ty=Tensor[(17745, 2), bool] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %458 = less(%456, %457) /* ty=Tensor[(17745, 2), bool] */;
  %459 = cast(%447, dtype="float64") /* ty=Tensor[(17745, 1), float64] */;
  %460 = cast(%458, dtype="float64") /* ty=Tensor[(17745, 2), float64] */;
  %461 = left_shift(%448, %449) /* ty=Tensor[(17745, 2), int8] */;
  %462 = logical_and(%452, %453) /* ty=Tensor[(17745, 2), bool] */;
  %463 = floor_mod(%459, %460) /* ty=Tensor[(17745, 2), float64] */;
  (%461, %462, %463)
}

def @func_5652(%var_5648: Tensor[(32), float32], %var_5649: Tensor[(18928), float32]) -> (Tensor[(1, 1183), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(17745), float32], Tensor[(32), float32], Tensor[(18928), float32]) {
  %464 = @func_2888() /* ty=(Tensor[(1, 1183), float32], Tensor[(32), float32], Tensor[(16, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) */;
  %465 = @func_4299() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %466 = @func_3628() /* ty=(Tensor[(1183), float64], Tensor[(1, 1183), float32]) */;
  %467 = cast(%var_5648, dtype="float32") /* ty=Tensor[(32), float32] */;
  %468 = cast(%var_5649, dtype="float32") /* ty=Tensor[(18928), float32] */;
  %469 = reshape(%467, newshape=[32, 1]) /* ty=Tensor[(32, 1), float32] */;
  %470 = reshape(%468, newshape=[18928]) /* ty=Tensor[(18928), float32] */;
  %471 = @func_5227(%469, %470) /* ty=(Tensor[(1, 1183), float64], Tensor[(17745), float32], Tensor[(32, 1), float32], Tensor[(18928), float32], Tensor[(2, 16), float32]) */;
  %472 = %464.0;
  %473 = %465.0;
  %474 = %466.0;
  %475 = %471.1;
  (%472, %473, %474, %475, %var_5648, %var_5649)
}

def @func_4116() -> (Tensor[(13, 8, 3), float32],) {
  %476 = @func_2954() /* ty=Tensor[(13, 8, 3), float32] */;
  (%476,)
}

def @func_4684() -> (Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(32), float32], Tensor[(8, 4), float32], Tensor[(17745, 1), float32], Tensor[(16, 1, 2), float32]) {
  %477 = @func_3735() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %478 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 4), float32] */, dtype="float32") /* ty=Tensor[(8, 4), float32] */;
  %479 = cast(meta[relay.Constant][27] /* ty=Tensor[(17745, 1), float32] */, dtype="float32") /* ty=Tensor[(17745, 1), float32] */;
  %480 = reshape(%478, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %481 = reshape(%479, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
  %482 = @func_4255(%480, %481) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(17745), float32]) */;
  %483 = %482.2;
  %484 = cast(%483, dtype="float32") /* ty=Tensor[(32), float32] */;
  %485 = reshape(%484, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %486 = @func_2738(%485) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) */;
  %487 = %477.0;
  %488 = @func_4328() /* ty=Tensor[(13, 13, 7), float64] */;
  %489 = %486.1;
  (%487, %488, %483, meta[relay.Constant][26] /* ty=Tensor[(8, 4), float32] */, meta[relay.Constant][27] /* ty=Tensor[(17745, 1), float32] */, %489)
}

def @func_9732() -> (Tensor[(9, 7, 2), float32], Tensor[(8, 4), float32], Tensor[(13, 8, 3), float32], Tensor[(416), float32], Tensor[(1183), float64]) {
  %490 = @func_8692() /* ty=(Tensor[(9, 7, 2), float32],) */;
  %491 = @func_4684() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(32), float32], Tensor[(8, 4), float32], Tensor[(17745, 1), float32], Tensor[(16, 1, 2), float32]) */;
  %492 = %491.3;
  %493 = cast(%492, dtype="float32") /* ty=Tensor[(8, 4), float32] */;
  %494 = cast(meta[relay.Constant][28] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %495 = reshape(%493, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %496 = reshape(%494, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), float32] */;
  %497 = @func_7114(%495, %496) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(16, 13, 2), bool]) */;
  %498 = %490.0;
  %499 = %497.0;
  %500 = @func_9446() /* ty=Tensor[(1183), float64] */;
  (%498, %492, %499, meta[relay.Constant][28] /* ty=Tensor[(416), float32] */, %500)
}

def @func_2575() -> (Tensor[(13, 8, 3), float32],) {
  %501 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  (%501,)
}

def @func_8159() -> (Tensor[(13, 8, 3), float32],) {
  %502 = @func_2954() /* ty=Tensor[(13, 8, 3), float32] */;
  (%502,)
}

def @func_8116(%var_8111: Tensor[(16, 15, 1), float64]) -> Tensor[(16, 15, 1), float64] {
  %503 = cast(%var_8111, dtype="float64") /* ty=Tensor[(16, 15, 1), float64] */;
  cosh(%503) /* ty=Tensor[(16, 15, 1), float64] */
}

def @func_3628() -> (Tensor[(1183), float64], Tensor[(1, 1183), float32]) {
  %504 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %505 = @func_3470() /* ty=Tensor[(1, 1183), float32] */;
  %506 = cast(%505, dtype="float32") /* ty=Tensor[(1, 1183), float32] */;
  %507 = %504.1;
  %508 = cos(%506) /* ty=Tensor[(1, 1183), float32] */;
  (%507, %508)
}

def @func_3987(%var_3965: Tensor[(32), float32], %var_3975: Tensor[(16, 1183), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 96), float64], Tensor[(32), float32], Tensor[(17745), float32], Tensor[(16, 1183), bool]) {
  %509 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %510 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 96), float64] */, dtype="float64") /* ty=Tensor[(16, 96), float64] */;
  %511 = cast(%var_3965, dtype="float32") /* ty=Tensor[(32), float32] */;
  %512 = cast(meta[relay.Constant][30] /* ty=Tensor[(17745), float32] */, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %513 = reshape(%510, newshape=[4, 384]) /* ty=Tensor[(4, 384), float64] */;
  %514 = reshape(%511, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %515 = reshape(%512, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
  %516 = @func_2934(%513, %514, %515) /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 16, 12), float32], Tensor[(4, 384), float64], Tensor[(32), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 1, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) */;
  %517 = @func_3470() /* ty=Tensor[(1, 1183), float32] */;
  %518 = cast(%517, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
  %519 = cast(%var_3975, dtype="bool") /* ty=Tensor[(16, 1183), bool] */;
  %520 = %509.0;
  %521 = %516.4;
  %522 = logical_or(%518, %519) /* ty=Tensor[(16, 1183), bool] */;
  (%520, %521, meta[relay.Constant][29] /* ty=Tensor[(16, 96), float64] */, %var_3965, meta[relay.Constant][30] /* ty=Tensor[(17745), float32] */, %522)
}

def @func_4255(%var_4247: Tensor[(32), float32], %var_4248: Tensor[(17745), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(17745), float32]) {
  %523 = @func_2954() /* ty=Tensor[(13, 8, 3), float32] */;
  %524 = cast(%523, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
  %525 = cast(%var_4247, dtype="float32") /* ty=Tensor[(32), float32] */;
  %526 = cast(%var_4248, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %527 = reshape(%525, newshape=[1, 32]) /* ty=Tensor[(1, 32), float32] */;
  %528 = reshape(%526, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
  %529 = @func_3113(%527, %528) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(1, 32), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(9, 11, 5), bool], Tensor[(1536), float64], Tensor[(17745), bool]) */;
  %530 = exp(%524) /* ty=Tensor[(13, 8, 3), float32] */;
  %531 = %529.4;
  (%530, %531, %var_4247, %var_4248)
}

def @func_134(%var_70: Tensor[(13, 13, 7), float64]) -> Tensor[(13, 13, 7), float64] {
  %532 = cast(%var_70, dtype="float64") /* ty=Tensor[(13, 13, 7), float64] */;
  %533 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(13, 13, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(13, 13, 7), float64] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%534, %535) /* ty=Tensor[(13, 13, 7), float64] */
}

def @func_2696() -> (Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) {
  %536 = cast(meta[relay.Constant][32] /* ty=Tensor[(1183), float64] */, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %537 = reshape(%536, newshape=[1, 1183]) /* ty=Tensor[(1, 1183), float64] */;
  %538 = @func_589(%537) /* ty=(Tensor[(12, 14, 8), int8], Tensor[(12, 14, 8), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */;
  %539 = %538.3;
  %540 = cast(%539, dtype="float32") /* ty=Tensor[(1, 1183), float32] */;
  %541 = cast(meta[relay.Constant][33] /* ty=Tensor[(495), uint64] */, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %542 = reshape(%541, newshape=[9, 11, 5]) /* ty=Tensor[(9, 11, 5), uint64] */;
  %543 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  %544 = log10(%540) /* ty=Tensor[(1, 1183), float32] */;
  %545 = @func_1145(%542) /* ty=Tensor[(9, 11, 5), bool] */;
  (%543, meta[relay.Constant][32] /* ty=Tensor[(1183), float64] */, %544, %545, meta[relay.Constant][33] /* ty=Tensor[(495), uint64] */)
}

def @func_10026(%var_10021: Tensor[(13, 8, 3), float32]) -> Tensor[(13, 8, 3), int16] {
  %546 = @func_3735() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %547 = %546.0;
  %548 = cast(%var_10021, dtype="int16") /* ty=Tensor[(13, 8, 3), int16] */;
  %549 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(%547, dtype="int16") /* ty=Tensor[(13, 8, 3), int16] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_or(%550, %551) /* ty=Tensor[(13, 8, 3), int16] */
}

def @func_4227(%var_4199: Tensor[(8, 1183), float32]) -> (Tensor[(8, 1183), float32],) {
  %552 = @func_3470() /* ty=Tensor[(1, 1183), float32] */;
  %553 = cast(%552, dtype="float32") /* ty=Tensor[(1, 1183), float32] */;
  %554 = exp(%553) /* ty=Tensor[(1, 1183), float32] */;
  %555 = cast(%554, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
  %556 = cast(%var_4199, dtype="bool") /* ty=Tensor[(8, 1183), bool] */;
  %557 = less(%555, %556) /* ty=Tensor[(8, 1183), bool] */;
  %558 = cast(%557, dtype="float32") /* ty=Tensor[(8, 1183), float32] */;
  %559 = rsqrt(%558) /* ty=Tensor[(8, 1183), float32] */;
  %560 = cast(%559, dtype="float64") /* ty=Tensor[(8, 1183), float64] */;
  %561 = acosh(%560) /* ty=Tensor[(8, 1183), float64] */;
  %562 = cast(%561, dtype="float32") /* ty=Tensor[(8, 1183), float32] */;
  %563 = cosh(%562) /* ty=Tensor[(8, 1183), float32] */;
  (%563,)
}

def @func_1145(%var_1139: Tensor[(9, 11, 5), uint64]) -> Tensor[(9, 11, 5), bool] {
  %564 = cast(%var_1139, dtype="bool") /* ty=Tensor[(9, 11, 5), bool] */;
  %565 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(9, 11, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(meta[relay.Constant][34] /* ty=Tensor[(9, 11, 5), uint64] */, dtype="bool") /* ty=Tensor[(9, 11, 5), bool] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%566, %567) /* ty=Tensor[(9, 11, 5), bool] */
}

def @func_5574() -> (Tensor[(13, 13, 7), float64],) {
  %568 = @func_4328() /* ty=Tensor[(13, 13, 7), float64] */;
  (%568,)
}

def @func_5978() -> Tensor[(1183), float64] {
  %569 = @func_4419() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %569.1
}

def @func_2954() -> Tensor[(13, 8, 3), float32] {
  @func_2546() /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_3735() -> (Tensor[(13, 8, 3), float32],) {
  %570 = @func_2954() /* ty=Tensor[(13, 8, 3), float32] */;
  (%570,)
}

def @func_8351() -> (Tensor[(1, 1183), float32],) {
  %571 = @func_3470() /* ty=Tensor[(1, 1183), float32] */;
  (%571,)
}

def @func_10135(%var_10107: Tensor[(4, 12, 9), uint32]) -> (Tensor[(13, 8, 3), float32], Tensor[(432), uint32], Tensor[(4, 12, 9), float32], Tensor[(4, 12, 9), float64], Tensor[(13, 8, 3), float64]) {
  %572 = @func_4299() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %573 = cast(meta[relay.Constant][35] /* ty=Tensor[(432), uint32] */, dtype="uint32") /* ty=Tensor[(432), uint32] */;
  %574 = cast(meta[relay.Constant][35] /* ty=Tensor[(432), uint32] */, dtype="uint32") /* ty=Tensor[(432), uint32] */;
  %575 = reshape(%573, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint32] */;
  %576 = reshape(%574, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint32] */;
  %577 = @func_6023(%575, %576) /* ty=(Tensor[(4, 12, 9), uint32],) */;
  %578 = %577.0;
  %579 = cast(%var_10107, dtype="float32") /* ty=Tensor[(4, 12, 9), float32] */;
  %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%578, dtype="float32") /* ty=Tensor[(4, 12, 9), float32] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %583 = cast(%578, dtype="float64") /* ty=Tensor[(4, 12, 9), float64] */;
  %584 = %572.0;
  %585 = floor_divide(%581, %582) /* ty=Tensor[(4, 12, 9), float32] */;
  %586 = cosh(%583) /* ty=Tensor[(4, 12, 9), float64] */;
  %587 = @func_5778() /* ty=Tensor[(13, 8, 3), float64] */;
  (%584, meta[relay.Constant][35] /* ty=Tensor[(432), uint32] */, %585, %586, %587)
}

def @func_9067() -> (Tensor[(13, 13, 7), float64], Tensor[(9, 7, 2), float32], Tensor[(1183), float64]) {
  %588 = @func_8692() /* ty=(Tensor[(9, 7, 2), float32],) */;
  %589 = @func_8767() /* ty=(Tensor[(1183), float64],) */;
  %590 = @func_8269() /* ty=Tensor[(13, 13, 7), float64] */;
  %591 = %588.0;
  %592 = %589.0;
  (%590, %591, %592)
}

def @func_6298() -> (Tensor[(17745), float32], Tensor[(1183), float64]) {
  %593 = @func_4830() /* ty=(Tensor[(1183), float64], Tensor[(507, 35), float32], Tensor[(17745), float32]) */;
  %594 = @func_4516() /* ty=(Tensor[(1183), float64],) */;
  %595 = %593.2;
  %596 = %594.0;
  (%595, %596)
}

def @func_7401() -> Tensor[(1183), float64] {
  %597 = @func_3347() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %597.4
}

def @func_7217() -> Tensor[(1, 1183), float32] {
  %598 = @func_3628() /* ty=(Tensor[(1183), float64], Tensor[(1, 1183), float32]) */;
  %598.1
}

def @func_3572() -> Tensor[(13, 8, 3), float32] {
  @func_2546() /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_2546() -> Tensor[(13, 8, 3), float32] {
  %599 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 8, 3), float64] */, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %600 = acosh(%599) /* ty=Tensor[(13, 8, 3), float64] */;
  %601 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 8, 3), float64] */, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%603, %604) /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_3719(%var_3694: Tensor[(7, 1183), float32]) -> (Tensor[(7, 1183), bool], Tensor[(1, 1183), float64]) {
  %605 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %606 = %605.0;
  %607 = cast(%606, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
  %608 = cast(%var_3694, dtype="bool") /* ty=Tensor[(7, 1183), bool] */;
  %609 = cast(%606, dtype="float32") /* ty=Tensor[(1, 1183), float32] */;
  %610 = sigmoid(%609) /* ty=Tensor[(1, 1183), float32] */;
  %611 = cast(%610, dtype="float64") /* ty=Tensor[(1, 1183), float64] */;
  %612 = logical_or(%607, %608) /* ty=Tensor[(7, 1183), bool] */;
  %613 = rsqrt(%611) /* ty=Tensor[(1, 1183), float64] */;
  (%612, %613)
}

def @func_5719(%var_5693: Tensor[(17745), float32]) -> (Tensor[(1, 1183), float32], Tensor[(15, 1183), bool], Tensor[(17745), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) {
  %614 = @func_3545() /* ty=(Tensor[(2, 16), float32], Tensor[(1, 1183), float32]) */;
  %615 = cast(%var_5693, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %616 = reshape(%615, newshape=[15, 1183]) /* ty=Tensor[(15, 1183), float32] */;
  %617 = @func_2856(%616) /* ty=(Tensor[(15, 1183), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
  %618 = @func_4314() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
  %619 = @func_4116() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %620 = %614.1;
  %621 = %617.3;
  %622 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  %623 = %618.0;
  %624 = %619.0;
  (%620, %621, %var_5693, %622, %623, %624)
}

def @func_6053() -> (Tensor[(1183), float64], Tensor[(1183), float64], Tensor[(17745), float32], Tensor[(13, 8, 3), float32]) {
  %625 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %626 = @func_4830() /* ty=(Tensor[(1183), float64], Tensor[(507, 35), float32], Tensor[(17745), float32]) */;
  %627 = %626.2;
  %628 = cast(%627, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %629 = reshape(%628, newshape=[15, 1183]) /* ty=Tensor[(15, 1183), float32] */;
  %630 = @func_2856(%629) /* ty=(Tensor[(15, 1183), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
  %631 = @func_3281() /* ty=Tensor[(1183), float64] */;
  %632 = %625.1;
  %633 = %630.1;
  (%631, %632, %627, %633)
}

def @func_7027() -> (Tensor[(17745, 10), float64], Tensor[(8, 4), float32]) {
  %634 = @func_5678() /* ty=Tensor[(17745, 10), bool] */;
  %635 = cast(%634, dtype="float64") /* ty=Tensor[(17745, 10), float64] */;
  %636 = @func_4684() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(32), float32], Tensor[(8, 4), float32], Tensor[(17745, 1), float32], Tensor[(16, 1, 2), float32]) */;
  %637 = atanh(%635) /* ty=Tensor[(17745, 10), float64] */;
  %638 = %636.3;
  (%637, %638)
}

def @func_10412() -> (Tensor[(13, 8, 3), float32], Tensor[(17745, 1), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), bool], Tensor[(1183), float32]) {
  %639 = @func_3735() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %640 = @func_6834() /* ty=Tensor[(1183), float32] */;
  %641 = cast(%640, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %642 = cosh(%641) /* ty=Tensor[(1183), float32] */;
  %643 = cast(%640, dtype="bool") /* ty=Tensor[(1183), bool] */;
  %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(1), int32] */;
  %645 = cast(%642, dtype="bool") /* ty=Tensor[(1183), bool] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?), bool] */;
  %647 = @func_9604() /* ty=(Tensor[(1, 1183), float64], Tensor[(1183), float32]) */;
  %648 = %639.0;
  %649 = @func_3271() /* ty=Tensor[(17745, 1), float32] */;
  %650 = @func_9191() /* ty=Tensor[(13, 8, 3), float32] */;
  %651 = equal(%645, %646) /* ty=Tensor[(1183), bool] */;
  %652 = %647.1;
  (%648, %649, %650, %651, %652)
}

def @func_7114(%var_7046: Tensor[(32), float32], %var_7109: Tensor[(16, 13, 2), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(16, 13, 2), bool]) {
  %653 = @func_4419() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %654 = cast(%var_7046, dtype="float32") /* ty=Tensor[(32), float32] */;
  %655 = reshape(%654, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %656 = @func_2738(%655) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) */;
  %657 = %656.1;
  %658 = cast(%657, dtype="bool") /* ty=Tensor[(16, 1, 2), bool] */;
  %659 = cast(%var_7109, dtype="bool") /* ty=Tensor[(16, 13, 2), bool] */;
  %660 = %653.0;
  %661 = not_equal(%658, %659) /* ty=Tensor[(16, 13, 2), bool] */;
  (%660, %var_7046, %661)
}

def @func_9279(%var_9265: Tensor[(17745), float32], %var_9268: uint64) -> (Tensor[(13, 8, 3), float32], Tensor[(6, 10, 7), float64], Tensor[(32), float32], Tensor[(16, 1, 2), float32], Tensor[(1183), float64], Tensor[(4, 384), float64], Tensor[(1536), float64], Tensor[(17745), float32], Tensor[(2, 16), float32], uint64, Tensor[(1183), float64]) {
  %662 = @func_8921() /* ty=(Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(1183), float32]) */;
  %663 = cast(meta[relay.Constant][37] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %664 = reshape(%663, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %665 = @func_6601(%664) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(6, 10, 7), float64], Tensor[(1536), float64], Tensor[(32), float32]) */;
  %666 = cast(meta[relay.Constant][37] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %667 = reshape(%666, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %668 = @func_2738(%667) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) */;
  %669 = @func_6965() /* ty=Tensor[(1183), float32] */;
  %670 = cast(%669, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %671 = cast(meta[relay.Constant][38] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %672 = cast(meta[relay.Constant][37] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %673 = cast(%var_9265, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %674 = reshape(%671, newshape=[4, 384]) /* ty=Tensor[(4, 384), float64] */;
  %675 = reshape(%672, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %676 = reshape(%673, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
  %677 = @func_2934(%674, %675, %676) /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 16, 12), float32], Tensor[(4, 384), float64], Tensor[(32), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 1, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) */;
  %678 = cast(%var_9268, dtype="uint64") /* ty=uint64 */;
  %679 = cast(meta[relay.Constant][37] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %680 = reshape(%678, newshape=[]) /* ty=uint64 */;
  %681 = reshape(%679, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %682 = @func_6153(%680, %681) /* ty=(Tensor[(13, 8, 3), float64], Tensor[(2, 16), float32], uint64, Tensor[(32), float32]) */;
  %683 = @func_6350() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %684 = %662.1;
  %685 = %665.1;
  %686 = %668.1;
  %687 = acosh(%670) /* ty=Tensor[(1183), float64] */;
  %688 = %677.2;
  %689 = %682.1;
  %690 = %683.1;
  (%684, %685, meta[relay.Constant][37] /* ty=Tensor[(32), float32] */, %686, %687, %688, meta[relay.Constant][38] /* ty=Tensor[(1536), float64] */, %var_9265, %689, %var_9268, %690)
}

def @func_5227(%var_5207: Tensor[(32, 1), float32], %var_5208: Tensor[(18928), float32]) -> (Tensor[(1, 1183), float64], Tensor[(17745), float32], Tensor[(32, 1), float32], Tensor[(18928), float32], Tensor[(2, 16), float32]) {
  %691 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %692 = %691.0;
  %693 = cast(%692, dtype="float64") /* ty=Tensor[(1, 1183), float64] */;
  %694 = cast(%var_5207, dtype="float32") /* ty=Tensor[(32, 1), float32] */;
  %695 = cast(%var_5208, dtype="float32") /* ty=Tensor[(18928), float32] */;
  %696 = reshape(%694, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %697 = reshape(%695, newshape=[16, 1183]) /* ty=Tensor[(16, 1183), float32] */;
  %698 = @func_3987(%696, %697) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 96), float64], Tensor[(32), float32], Tensor[(17745), float32], Tensor[(16, 1183), bool]) */;
  %699 = @func_3545() /* ty=(Tensor[(2, 16), float32], Tensor[(1, 1183), float32]) */;
  %700 = tan(%693) /* ty=Tensor[(1, 1183), float64] */;
  %701 = %698.4;
  %702 = %699.0;
  (%700, %701, %var_5207, %var_5208, %702)
}

def @func_6389(%var_6361: Tensor[(13, 4, 11), uint32], %var_6362: Tensor[(13, 4, 11), uint32]) -> Tensor[(13, 4, 11), uint32] {
  %703 = cast(%var_6362, dtype="uint32") /* ty=Tensor[(13, 4, 11), uint32] */;
  %704 = shape_of(%var_6361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%var_6361, dtype="uint32") /* ty=Tensor[(13, 4, 11), uint32] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  multiply(%705, %706) /* ty=Tensor[(13, 4, 11), uint32] */
}

def @func_9446() -> Tensor[(1183), float64] {
  %707 = @func_4419() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %707.1
}

def @func_3347() -> (Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) {
  %708 = @func_2888() /* ty=(Tensor[(1, 1183), float32], Tensor[(32), float32], Tensor[(16, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) */;
  %709 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 16), float32] */, dtype="float32") /* ty=Tensor[(2, 16), float32] */;
  %710 = reshape(%709, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %711 = @func_2738(%710) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) */;
  %712 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %713 = %708.3;
  %714 = %711.1;
  %715 = %712.0;
  %716 = @func_3281() /* ty=Tensor[(1183), float64] */;
  (%713, %714, meta[relay.Constant][39] /* ty=Tensor[(2, 16), float32] */, %715, %716)
}

def @func_10237(%var_10229: Tensor[(1183), float64]) -> Tensor[(1183), bool] {
  %717 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %718 = %717.1;
  %719 = cast(%var_10229, dtype="bool") /* ty=Tensor[(1183), bool] */;
  %720 = shape_of(%718, dtype="int32") /* ty=Tensor[(1), int32] */;
  %721 = cast(%718, dtype="bool") /* ty=Tensor[(1183), bool] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_and(%721, %722) /* ty=Tensor[(1183), bool] */
}

def @func_5678() -> Tensor[(17745, 10), bool] {
  %723 = @func_3271() /* ty=Tensor[(17745, 1), float32] */;
  %724 = cast(%723, dtype="bool") /* ty=Tensor[(17745, 1), bool] */;
  %725 = cast(meta[relay.Constant][40] /* ty=Tensor[(17745, 10), float32] */, dtype="bool") /* ty=Tensor[(17745, 10), bool] */;
  equal(%724, %725) /* ty=Tensor[(17745, 10), bool] */
}

def @func_5372(%var_5363: uint64, %var_5364: Tensor[(32), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(1536), float64], uint64, Tensor[(32), float32]) {
  %726 = @func_3347() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %727 = cast(%var_5363, dtype="uint64") /* ty=uint64 */;
  %728 = cast(%var_5364, dtype="float32") /* ty=Tensor[(32), float32] */;
  %729 = reshape(%727, newshape=[]) /* ty=uint64 */;
  %730 = reshape(%728, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %731 = @func_2311(%729, %730) /* ty=(Tensor[(7, 7, 1), uint64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(32), float32]) */;
  %732 = %726.3;
  %733 = %731.2;
  (%732, %733, %var_5363, %var_5364)
}

def @func_8809() -> Tensor[(17745), float32] {
  %734 = @func_6053() /* ty=(Tensor[(1183), float64], Tensor[(1183), float64], Tensor[(17745), float32], Tensor[(13, 8, 3), float32]) */;
  %734.2
}

def @func_9389() -> (Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(1536), float64]) {
  %735 = @func_6053() /* ty=(Tensor[(1183), float64], Tensor[(1183), float64], Tensor[(17745), float32], Tensor[(13, 8, 3), float32]) */;
  %736 = @func_5268() /* ty=(Tensor[(1183), float32], Tensor[(6, 10, 7), float64], Tensor[(1536), float64], Tensor[(32), float32]) */;
  %737 = %735.1;
  %738 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  %739 = %736.2;
  (%737, %738, %739)
}

def @func_339(%var_334: Tensor[(6, 10, 7), float64]) -> (Tensor[(6, 10, 7), float64],) {
  %740 = cast(%var_334, dtype="float64") /* ty=Tensor[(6, 10, 7), float64] */;
  %741 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(6, 10, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(meta[relay.Constant][41] /* ty=Tensor[(6, 10, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 10, 7), float64] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %744 = add(%742, %743) /* ty=Tensor[(6, 10, 7), float64] */;
  (%744,)
}

def @func_4649(%var_4579: uint64, %var_4604: Tensor[(17745), float32]) -> (Tensor[(32), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(7, 7, 1183), int64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(13, 8, 3), float32], Tensor[(17745), float64], Tensor[(32), float32]) {
  %745 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  %746 = cast(%745, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %747 = rsqrt(%746) /* ty=Tensor[(13, 8, 3), float64] */;
  %748 = cast(%747, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
  %749 = cast(%var_4579, dtype="float32") /* ty=float32 */;
  %750 = cast(%var_4604, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %751 = reshape(%750, newshape=[15, 1183]) /* ty=Tensor[(15, 1183), float32] */;
  %752 = @func_2856(%751) /* ty=(Tensor[(15, 1183), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
  %753 = @func_3628() /* ty=(Tensor[(1183), float64], Tensor[(1, 1183), float32]) */;
  %754 = %753.0;
  %755 = cast(%var_4579, dtype="uint64") /* ty=uint64 */;
  %756 = cast(meta[relay.Constant][42] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %757 = reshape(%755, newshape=[]) /* ty=uint64 */;
  %758 = reshape(%756, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %759 = @func_2311(%757, %758) /* ty=(Tensor[(7, 7, 1), uint64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(32), float32]) */;
  %760 = %759.0;
  %761 = cast(%754, dtype="int64") /* ty=Tensor[(1183), int64] */;
  %762 = cast(%760, dtype="int64") /* ty=Tensor[(7, 7, 1), int64] */;
  %763 = cast(meta[relay.Constant][43] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %764 = cast(meta[relay.Constant][42] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %765 = reshape(%763, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
  %766 = reshape(%764, newshape=[2, 16]) /* ty=Tensor[(2, 16), float32] */;
  %767 = @func_2261(%765, %766) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(8, 16, 12), float32], Tensor[(6, 10, 7), float64]) */;
  %768 = @func_4419() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %769 = cast(%var_4604, dtype="float64") /* ty=Tensor[(17745), float64] */;
  %770 = %767.3;
  %771 = cast(%770, dtype="float32") /* ty=Tensor[(2, 16), float32] */;
  %772 = reshape(%771, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %773 = @func_2738(%772) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) */;
  %774 = add(%748, %749) /* ty=Tensor[(13, 8, 3), float32] */;
  %775 = %752.1;
  %776 = bitwise_and(%761, %762) /* ty=Tensor[(7, 7, 1183), int64] */;
  %777 = %768.0;
  %778 = sqrt(%769) /* ty=Tensor[(17745), float64] */;
  %779 = %773.2;
  (meta[relay.Constant][42] /* ty=Tensor[(32), float32] */, %774, %775, %776, %770, meta[relay.Constant][43] /* ty=Tensor[(1536), float64] */, %777, %778, %779)
}

def @func_7863(%var_7842: Tensor[(14, 2, 15), float32]) -> (Tensor[(14, 2, 15), float32], Tensor[(1, 1183), float32]) {
  %780 = cast(%var_7842, dtype="float32") /* ty=Tensor[(14, 2, 15), float32] */;
  %781 = cosh(%780) /* ty=Tensor[(14, 2, 15), float32] */;
  %782 = @func_7217() /* ty=Tensor[(1, 1183), float32] */;
  (%781, %782)
}

def @func_2856(%var_2831: Tensor[(15, 1183), float32]) -> (Tensor[(15, 1183), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) {
  %783 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %784 = %783.0;
  %785 = cast(%784, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
  %786 = cast(%var_2831, dtype="bool") /* ty=Tensor[(15, 1183), bool] */;
  %787 = cast(%784, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
  %788 = cast(%var_2831, dtype="bool") /* ty=Tensor[(15, 1183), bool] */;
  %789 = greater_equal(%787, %788) /* ty=Tensor[(15, 1183), bool] */;
  %790 = cast(%784, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
  %791 = cast(%789, dtype="bool") /* ty=Tensor[(15, 1183), bool] */;
  %792 = not_equal(%785, %786) /* ty=Tensor[(15, 1183), bool] */;
  %793 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  %794 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  %795 = less(%790, %791) /* ty=Tensor[(15, 1183), bool] */;
  (%792, %793, %794, %795)
}

def @func_2819() -> (Tensor[(1, 1183), float32], Tensor[(1183), float64]) {
  %796 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %797 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %798 = %796.2;
  %799 = %797.1;
  (%798, %799)
}

def @func_4516() -> (Tensor[(1183), float64],) {
  %800 = @func_3281() /* ty=Tensor[(1183), float64] */;
  (%800,)
}

def @func_6194() -> (Tensor[(17745, 1), float32], Tensor[(17745, ?), bool]) {
  %801 = @func_4911() /* ty=(Tensor[(13, 13, 7), float64], Tensor[(17745, 1), float64]) */;
  %802 = %801.1;
  %803 = cast(%802, dtype="float64") /* ty=Tensor[(17745, 1), float64] */;
  %804 = asinh(%803) /* ty=Tensor[(17745, 1), float64] */;
  %805 = cast(%804, dtype="float32") /* ty=Tensor[(17745, 1), float32] */;
  %806 = cast(%802, dtype="bool") /* ty=Tensor[(17745, 1), bool] */;
  %807 = shape_of(%804, dtype="int32") /* ty=Tensor[(2), int32] */;
  %808 = cast(%804, dtype="bool") /* ty=Tensor[(17745, 1), bool] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %810 = tan(%805) /* ty=Tensor[(17745, 1), float32] */;
  %811 = less_equal(%808, %809) /* ty=Tensor[(17745, ?), bool] */;
  (%810, %811)
}

def @func_7745(%var_7730: Tensor[(15, 13, 14), float64]) -> (Tensor[(15, 13, 14), float64],) {
  %812 = cast(%var_7730, dtype="float64") /* ty=Tensor[(15, 13, 14), float64] */;
  %813 = asinh(%812) /* ty=Tensor[(15, 13, 14), float64] */;
  (%813,)
}

def @func_8449() -> Tensor[(1183), float32] {
  %814 = @func_3281() /* ty=Tensor[(1183), float64] */;
  %815 = cast(%814, dtype="float32") /* ty=Tensor[(1183), float32] */;
  sigmoid(%815) /* ty=Tensor[(1183), float32] */
}

def @func_9604() -> (Tensor[(1, 1183), float64], Tensor[(1183), float32]) {
  %816 = @func_6350() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %817 = %816.0;
  %818 = cast(%817, dtype="float64") /* ty=Tensor[(1, 1183), float64] */;
  %819 = asinh(%818) /* ty=Tensor[(1, 1183), float64] */;
  %820 = @func_6965() /* ty=Tensor[(1183), float32] */;
  (%819, %820)
}

def @func_8199() -> Tensor[(6, 10, 7), float64] {
  @func_7180() /* ty=Tensor[(6, 10, 7), float64] */
}

def @func_8640(%var_8619: Tensor[(12, 1183), float32], %var_8633: Tensor[(12, 1183), float32]) -> (Tensor[(12, 1183), uint32], Tensor[(12, 1183), int64], Tensor[(1183), float64]) {
  %821 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %822 = %821.0;
  %823 = cast(%822, dtype="uint32") /* ty=Tensor[(1, 1183), uint32] */;
  %824 = cast(%var_8619, dtype="uint32") /* ty=Tensor[(12, 1183), uint32] */;
  %825 = cast(%var_8633, dtype="int64") /* ty=Tensor[(12, 1183), int64] */;
  %826 = shape_of(%var_8619, dtype="int32") /* ty=Tensor[(2), int32] */;
  %827 = cast(%var_8619, dtype="int64") /* ty=Tensor[(12, 1183), int64] */;
  %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %829 = @func_7995() /* ty=(Tensor[(1183), float64],) */;
  %830 = left_shift(%823, %824) /* ty=Tensor[(12, 1183), uint32] */;
  %831 = bitwise_xor(%827, %828) /* ty=Tensor[(12, 1183), int64] */;
  %832 = %829.0;
  (%830, %831, %832)
}

def @func_4299() -> (Tensor[(13, 8, 3), float32],) {
  %833 = @func_2888() /* ty=(Tensor[(1, 1183), float32], Tensor[(32), float32], Tensor[(16, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) */;
  %834 = %833.3;
  (%834,)
}

def @func_5063() -> Tensor[(1, 1183), float32] {
  %835 = @func_3628() /* ty=(Tensor[(1183), float64], Tensor[(1, 1183), float32]) */;
  %835.1
}

def @func_9408(%var_9397: Tensor[(9, 5, 5), float64]) -> Tensor[(9, 5, 5), float64] {
  %836 = cast(%var_9397, dtype="float64") /* ty=Tensor[(9, 5, 5), float64] */;
  asinh(%836) /* ty=Tensor[(9, 5, 5), float64] */
}

def @func_1462(%var_1455: Tensor[(16, 1, 2), float32]) -> (Tensor[(16, 1, 2), float32],) {
  %837 = cast(%var_1455, dtype="float32") /* ty=Tensor[(16, 1, 2), float32] */;
  %838 = acos(%837) /* ty=Tensor[(16, 1, 2), float32] */;
  (%838,)
}

def @func_8311() -> (Tensor[(1183), float64],) {
  %839 = @func_7995() /* ty=(Tensor[(1183), float64],) */;
  %840 = %839.0;
  (%840,)
}

def @func_5553(%var_5545: Tensor[(1183), float64]) -> (Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(1183), float64]) {
  %841 = cast(%var_5545, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %842 = reshape(%841, newshape=[13, 13, 7]) /* ty=Tensor[(13, 13, 7), float64] */;
  %843 = @func_2954() /* ty=Tensor[(13, 8, 3), float32] */;
  %844 = @func_134(%842) /* ty=Tensor[(13, 13, 7), float64] */;
  (%843, %844, %var_5545)
}

def @func_10315(%var_10282: Tensor[(7, 1183), float32], %var_10288: Tensor[(10, 1183), float32]) -> (Tensor[(7, 1183), int32], Tensor[(10, 1183), int64], Tensor[(10, 1183), float32]) {
  %845 = @func_7217() /* ty=Tensor[(1, 1183), float32] */;
  %846 = cast(%845, dtype="int32") /* ty=Tensor[(1, 1183), int32] */;
  %847 = cast(%var_10282, dtype="int32") /* ty=Tensor[(7, 1183), int32] */;
  %848 = cast(%845, dtype="int64") /* ty=Tensor[(1, 1183), int64] */;
  %849 = cast(%var_10288, dtype="int64") /* ty=Tensor[(10, 1183), int64] */;
  %850 = cast(%var_10288, dtype="float32") /* ty=Tensor[(10, 1183), float32] */;
  %851 = bitwise_or(%846, %847) /* ty=Tensor[(7, 1183), int32] */;
  %852 = add(%848, %849) /* ty=Tensor[(10, 1183), int64] */;
  %853 = sigmoid(%850) /* ty=Tensor[(10, 1183), float32] */;
  (%851, %852, %853)
}

def @func_9671() -> (Tensor[(1183), float64],) {
  %854 = @func_4516() /* ty=(Tensor[(1183), float64],) */;
  %855 = %854.0;
  (%855,)
}

def @func_9191() -> Tensor[(13, 8, 3), float32] {
  @func_6799() /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_6601(%var_6586: Tensor[(32), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(6, 10, 7), float64], Tensor[(1536), float64], Tensor[(32), float32]) {
  %856 = @func_3735() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %857 = cast(meta[relay.Constant][44] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %858 = cast(%var_6586, dtype="float32") /* ty=Tensor[(32), float32] */;
  %859 = reshape(%857, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
  %860 = reshape(%858, newshape=[2, 16]) /* ty=Tensor[(2, 16), float32] */;
  %861 = @func_2261(%859, %860) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(8, 16, 12), float32], Tensor[(6, 10, 7), float64]) */;
  %862 = %856.0;
  %863 = %861.0;
  (%862, %863, meta[relay.Constant][44] /* ty=Tensor[(1536), float64] */, %var_6586)
}

def @func_4419() -> (Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) {
  %864 = @func_3347() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %865 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %866 = %864.0;
  %867 = %865.1;
  (%866, %867)
}

def @func_8042(%var_8036: Tensor[(17745), float32]) -> Tensor[(17745), float32] {
  %868 = @func_6575() /* ty=(Tensor[(1183), float64], Tensor[(13, 13, 7), float64], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) */;
  %869 = %868.3;
  %870 = cast(%var_8036, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %871 = shape_of(%869, dtype="int32") /* ty=Tensor[(1), int32] */;
  %872 = cast(%869, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?), float32] */;
  power(%872, %873) /* ty=Tensor[(17745), float32] */
}

def @func_9527(%var_9523: Tensor[(13, 15, 14), float32]) -> Tensor[(13, 15, 14), float32] {
  %874 = cast(%var_9523, dtype="float32") /* ty=Tensor[(13, 15, 14), float32] */;
  asinh(%874) /* ty=Tensor[(13, 15, 14), float32] */
}

def @func_9840() -> (Tensor[(17745), float32],) {
  %875 = @func_6298() /* ty=(Tensor[(17745), float32], Tensor[(1183), float64]) */;
  %876 = %875.0;
  (%876,)
}

def @func_6665(%var_6624: uint64) -> (Tensor[(2, 16), float32], Tensor[(32), float32], Tensor[(1183), float32], Tensor[(13, 8, 3), float32]) {
  %877 = cast(%var_6624, dtype="uint64") /* ty=uint64 */;
  %878 = cast(meta[relay.Constant][45] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %879 = reshape(%877, newshape=[]) /* ty=uint64 */;
  %880 = reshape(%878, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %881 = @func_2311(%879, %880) /* ty=(Tensor[(7, 7, 1), uint64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(32), float32]) */;
  %882 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %883 = %882.1;
  %884 = cast(%883, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %885 = cast(%var_6624, dtype="float32") /* ty=float32 */;
  %886 = @func_4314() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
  %887 = %881.1;
  %888 = floor_divide(%884, %885) /* ty=Tensor[(1183), float32] */;
  %889 = %886.0;
  (%887, meta[relay.Constant][45] /* ty=Tensor[(32), float32] */, %888, %889)
}

def @func_8381() -> (Tensor[(9, 11, 5), bool], Tensor[(1183), float32], Tensor[(1, 1183), float32], Tensor[(1, 1183), float32], Tensor[(420), float32]) {
  %890 = @func_7277() /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 4), float32], Tensor[(1183), float64]) */;
  %891 = cast(meta[relay.Constant][46] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %892 = reshape(%891, newshape=[14, 2, 15]) /* ty=Tensor[(14, 2, 15), float32] */;
  %893 = @func_7863(%892) /* ty=(Tensor[(14, 2, 15), float32], Tensor[(1, 1183), float32]) */;
  %894 = %890.0;
  %895 = @func_6965() /* ty=Tensor[(1183), float32] */;
  %896 = @func_7217() /* ty=Tensor[(1, 1183), float32] */;
  %897 = %893.1;
  (%894, %895, %896, %897, meta[relay.Constant][46] /* ty=Tensor[(420), float32] */)
}

def @func_5309() -> (Tensor[(9, 11, 5), bool], Tensor[(1, 1183), float64], Tensor[(1183), float64], Tensor[(495), uint64], Tensor[(13, 8, 3), float32]) {
  %898 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %899 = cast(meta[relay.Constant][47] /* ty=Tensor[(1183), float64] */, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %900 = reshape(%899, newshape=[1, 1183]) /* ty=Tensor[(1, 1183), float64] */;
  %901 = @func_589(%900) /* ty=(Tensor[(12, 14, 8), int8], Tensor[(12, 14, 8), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */;
  %902 = @func_2888() /* ty=(Tensor[(1, 1183), float32], Tensor[(32), float32], Tensor[(16, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) */;
  %903 = %898.3;
  %904 = %901.3;
  %905 = @func_4386() /* ty=Tensor[(495), uint64] */;
  %906 = %902.3;
  (%903, %904, meta[relay.Constant][47] /* ty=Tensor[(1183), float64] */, %905, %906)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4653(%var_4651: uint64, %var_4652: Tensor[(17745), float32]) -> (Tensor[(32), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(7, 7, 1183), int64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(13, 8, 3), float32], Tensor[(17745), float64], Tensor[(32), float32]) {
  @func_4649(%var_4651, %var_4652) /* ty=(Tensor[(32), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(7, 7, 1183), int64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(13, 8, 3), float32], Tensor[(17745), float64], Tensor[(32), float32]) */
}

def @func_8693() -> (Tensor[(9, 7, 2), float32],) {
  %4 = fn () -> (Tensor[(9, 7, 2), float32],) {
    %0 = @func_4869() /* ty=(Tensor[(9, 7, 2), float32], Tensor[(17745), float32]) */;
    %1 = %0.0;
    %2 = cast(%1, dtype="float32") /* ty=Tensor[(9, 7, 2), float32] */;
    %3 = log10(%2) /* ty=Tensor[(9, 7, 2), float32] */;
    (%3,)
  };
  %4() /* ty=(Tensor[(9, 7, 2), float32],) */
}

def @func_2890() -> (Tensor[(1, 1183), float32], Tensor[(32), float32], Tensor[(16, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) {
  @func_2888() /* ty=(Tensor[(1, 1183), float32], Tensor[(32), float32], Tensor[(16, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) */
}

def @func_6836() -> Tensor[(1183), float32] {
  @func_6834() /* ty=Tensor[(1183), float32] */
}

def @func_3722(%var_3720: Tensor[(7, 1183), float32]) -> (Tensor[(7, 1183), bool], Tensor[(1, 1183), float64]) {
  @func_3719(%var_3720) /* ty=(Tensor[(7, 1183), bool], Tensor[(1, 1183), float64]) */
}

def @func_8159() -> (Tensor[(13, 8, 3), float32],) {
  %5 = @func_2954() /* ty=Tensor[(13, 8, 3), float32] */;
  (%5,)
}

def @func_3462(%var_3460: uint64, %var_3461: Tensor[(15, 1183), float32]) -> (Tensor[(32), float32], uint64, Tensor[(32), float32], Tensor[(15, 1183), bool], Tensor[(1, 1183), float32], Tensor[(?, 1183), int16], Tensor[(8, 16, 12), float32], Tensor[(1536), float64]) {
  @func_3458(%var_3460, %var_3461) /* ty=(Tensor[(32), float32], uint64, Tensor[(32), float32], Tensor[(15, 1183), bool], Tensor[(1, 1183), float32], Tensor[(?, 1183), int16], Tensor[(8, 16, 12), float32], Tensor[(1536), float64]) */
}

def @func_7786() -> (Tensor[(9, 7, 2), float32], Tensor[(13, 8, 3), float32]) {
  %6 = @func_4869() /* ty=(Tensor[(9, 7, 2), float32], Tensor[(17745), float32]) */;
  %7 = @func_3347() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %8 = %6.0;
  %9 = %7.3;
  (%8, %9)
}

def @func_8615(%var_8613: Tensor[(6, 3, 9), float32]) -> (Tensor[(6, 3, 9), float32], Tensor[(13, 8, 3), float32]) {
  @func_8612(%var_8613) /* ty=(Tensor[(6, 3, 9), float32], Tensor[(13, 8, 3), float32]) */
}

def @func_137(%var_135: Tensor[(13, 13, 7), float64]) -> Tensor[(13, 13, 7), float64] {
  @func_134(%var_135) /* ty=Tensor[(13, 13, 7), float64] */
}

def @func_6923() -> (Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) {
  %13 = fn () -> (Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) {
    %10 = @func_2575() /* ty=(Tensor[(13, 8, 3), float32],) */;
    %11 = @func_6799() /* ty=Tensor[(13, 8, 3), float32] */;
    %12 = %10.0;
    (%11, %12)
  };
  %13() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) */
}

def @func_6195() -> (Tensor[(17745, 1), float32], Tensor[(17745, ?), bool]) {
  %25 = fn () -> (Tensor[(17745, 1), float32], Tensor[(17745, ?), bool]) {
    %14 = @func_4911() /* ty=(Tensor[(13, 13, 7), float64], Tensor[(17745, 1), float64]) */;
    %15 = %14.1;
    %16 = cast(%15, dtype="float64") /* ty=Tensor[(17745, 1), float64] */;
    %17 = asinh(%16) /* ty=Tensor[(17745, 1), float64] */;
    %18 = cast(%17, dtype="float32") /* ty=Tensor[(17745, 1), float32] */;
    %19 = cast(%15, dtype="bool") /* ty=Tensor[(17745, 1), bool] */;
    %20 = shape_of(%17, dtype="int32") /* ty=Tensor[(2), int32] */;
    %21 = cast(%17, dtype="bool") /* ty=Tensor[(17745, 1), bool] */;
    %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %23 = tan(%18) /* ty=Tensor[(17745, 1), float32] */;
    %24 = less_equal(%21, %22) /* ty=Tensor[(17745, ?), bool] */;
    (%23, %24)
  };
  %25() /* ty=(Tensor[(17745, 1), float32], Tensor[(17745, ?), bool]) */
}

def @func_5883() -> (Tensor[(495), uint64],) {
  %27 = fn () -> (Tensor[(495), uint64],) {
    %26 = @func_4386() /* ty=Tensor[(495), uint64] */;
    (%26,)
  };
  %27() /* ty=(Tensor[(495), uint64],) */
}

def @func_8312() -> (Tensor[(1183), float64],) {
  %30 = fn () -> (Tensor[(1183), float64],) {
    %28 = @func_7995() /* ty=(Tensor[(1183), float64],) */;
    %29 = %28.0;
    (%29,)
  };
  %30() /* ty=(Tensor[(1183), float64],) */
}

def @func_7500(%var_7463: Tensor[(7, 1183), float32]) -> (Tensor[(7, 1183), bool], Tensor[(13, 8, 3), float64], Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(32, 1), float32], Tensor[(17745), float32]) {
  %31 = @func_3470() /* ty=Tensor[(1, 1183), float32] */;
  %32 = cast(%31, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
  %33 = cast(%var_7463, dtype="bool") /* ty=Tensor[(7, 1183), bool] */;
  %34 = @func_3572() /* ty=Tensor[(13, 8, 3), float32] */;
  %35 = cast(%34, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %36 = cast(meta[relay.Constant][0] /* ty=Tensor[(32, 1), float32] */, dtype="float32") /* ty=Tensor[(32, 1), float32] */;
  %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(17745), float32] */, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %38 = reshape(%36, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %39 = reshape(%37, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
  %40 = @func_4255(%38, %39) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(17745), float32]) */;
  %41 = not_equal(%32, %33) /* ty=Tensor[(7, 1183), bool] */;
  %42 = log10(%35) /* ty=Tensor[(13, 8, 3), float64] */;
  %43 = @func_5978() /* ty=Tensor[(1183), float64] */;
  %44 = %40.1;
  (%41, %42, %43, %44, meta[relay.Constant][0] /* ty=Tensor[(32, 1), float32] */, meta[relay.Constant][1] /* ty=Tensor[(17745), float32] */)
}

def @func_8116(%var_8111: Tensor[(16, 15, 1), float64]) -> Tensor[(16, 15, 1), float64] {
  %45 = cast(%var_8111, dtype="float64") /* ty=Tensor[(16, 15, 1), float64] */;
  cosh(%45) /* ty=Tensor[(16, 15, 1), float64] */
}

def @func_2888() -> (Tensor[(1, 1183), float32], Tensor[(32), float32], Tensor[(16, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) {
  %46 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %47 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 2), float32] */;
  %48 = reshape(%47, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %49 = @func_2738(%48) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) */;
  %50 = @func_2575() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %51 = %46.0;
  %52 = %49.2;
  %53 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  %54 = %50.0;
  (%51, %52, meta[relay.Constant][2] /* ty=Tensor[(16, 2), float32] */, %53, %54)
}

def @func_3470() -> Tensor[(1, 1183), float32] {
  %55 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %55.0
}

def @func_7180() -> Tensor[(6, 10, 7), float64] {
  %56 = @func_5268() /* ty=(Tensor[(1183), float32], Tensor[(6, 10, 7), float64], Tensor[(1536), float64], Tensor[(32), float32]) */;
  %56.1
}

def @func_3574() -> Tensor[(13, 8, 3), float32] {
  @func_3572() /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_2314(%var_2312: uint64, %var_2313: Tensor[(32), float32]) -> (Tensor[(7, 7, 1), uint64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(32), float32]) {
  %66 = fn (%var_2294: uint64, %var_2301: Tensor[(32), float32]) -> (Tensor[(7, 7, 1), uint64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(32), float32]) {
    %57 = cast(%var_2294, dtype="uint64") /* ty=uint64 */;
    %58 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 7, 1), uint64] */, dtype="uint64") /* ty=Tensor[(7, 7, 1), uint64] */;
    %59 = cast(meta[relay.Constant][4] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
    %60 = cast(%var_2301, dtype="float32") /* ty=Tensor[(32), float32] */;
    %61 = reshape(%59, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
    %62 = reshape(%60, newshape=[2, 16]) /* ty=Tensor[(2, 16), float32] */;
    %63 = @func_2261(%61, %62) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(8, 16, 12), float32], Tensor[(6, 10, 7), float64]) */;
    %64 = bitwise_xor(%57, %58) /* ty=Tensor[(7, 7, 1), uint64] */;
    %65 = %63.3;
    (%64, %65, meta[relay.Constant][4] /* ty=Tensor[(1536), float64] */, %var_2301)
  };
  %66(%var_2312, %var_2313) /* ty=(Tensor[(7, 7, 1), uint64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(32), float32]) */
}

def @func_9983(%var_9904: Tensor[(495), uint64]) -> (Tensor[(13, 8, 3), float32], Tensor[(495), uint64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), float32], Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(1183), float32], Tensor[(8, 4), float32]) {
  %67 = @func_8159() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %68 = @func_8381() /* ty=(Tensor[(9, 11, 5), bool], Tensor[(1183), float32], Tensor[(1, 1183), float32], Tensor[(1, 1183), float32], Tensor[(420), float32]) */;
  %69 = cast(%var_9904, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %70 = reshape(%69, newshape=[9, 11, 5]) /* ty=Tensor[(9, 11, 5), uint64] */;
  %71 = @func_1145(%70) /* ty=Tensor[(9, 11, 5), bool] */;
  %72 = cast(%71, dtype="float32") /* ty=Tensor[(9, 11, 5), float32] */;
  %73 = @func_4516() /* ty=(Tensor[(1183), float64],) */;
  %74 = @func_6053() /* ty=(Tensor[(1183), float64], Tensor[(1183), float64], Tensor[(17745), float32], Tensor[(13, 8, 3), float32]) */;
  %75 = %74.0;
  %76 = cast(%75, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %77 = @func_9732() /* ty=(Tensor[(9, 7, 2), float32], Tensor[(8, 4), float32], Tensor[(13, 8, 3), float32], Tensor[(416), float32], Tensor[(1183), float64]) */;
  %78 = %67.0;
  %79 = %68.3;
  %80 = atan(%72) /* ty=Tensor[(9, 11, 5), float32] */;
  %81 = %73.0;
  %82 = @func_3572() /* ty=Tensor[(13, 8, 3), float32] */;
  %83 = cos(%76) /* ty=Tensor[(1183), float32] */;
  %84 = %77.1;
  (%78, %var_9904, %79, %80, %81, %82, %83, %84)
}

def @func_9986(%var_9984: Tensor[(495), uint64]) -> (Tensor[(13, 8, 3), float32], Tensor[(495), uint64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), float32], Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(1183), float32], Tensor[(8, 4), float32]) {
  @func_9983(%var_9984) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(495), uint64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), float32], Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(1183), float32], Tensor[(8, 4), float32]) */
}

def @func_3546() -> (Tensor[(2, 16), float32], Tensor[(1, 1183), float32]) {
  %91 = fn () -> (Tensor[(2, 16), float32], Tensor[(1, 1183), float32]) {
    %85 = @func_3347() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
    %86 = @func_2888() /* ty=(Tensor[(1, 1183), float32], Tensor[(32), float32], Tensor[(16, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) */;
    %87 = %86.0;
    %88 = cast(%87, dtype="float32") /* ty=Tensor[(1, 1183), float32] */;
    %89 = %85.2;
    %90 = log2(%88) /* ty=Tensor[(1, 1183), float32] */;
    (%89, %90)
  };
  %91() /* ty=(Tensor[(2, 16), float32], Tensor[(1, 1183), float32]) */
}

def @func_10318(%var_10316: Tensor[(7, 1183), float32], %var_10317: Tensor[(10, 1183), float32]) -> (Tensor[(7, 1183), int32], Tensor[(10, 1183), int64], Tensor[(10, 1183), float32]) {
  %101 = fn (%var_10282: Tensor[(7, 1183), float32], %var_10288: Tensor[(10, 1183), float32]) -> (Tensor[(7, 1183), int32], Tensor[(10, 1183), int64], Tensor[(10, 1183), float32]) {
    %92 = @func_7217() /* ty=Tensor[(1, 1183), float32] */;
    %93 = cast(%92, dtype="int32") /* ty=Tensor[(1, 1183), int32] */;
    %94 = cast(%var_10282, dtype="int32") /* ty=Tensor[(7, 1183), int32] */;
    %95 = cast(%92, dtype="int64") /* ty=Tensor[(1, 1183), int64] */;
    %96 = cast(%var_10288, dtype="int64") /* ty=Tensor[(10, 1183), int64] */;
    %97 = cast(%var_10288, dtype="float32") /* ty=Tensor[(10, 1183), float32] */;
    %98 = bitwise_or(%93, %94) /* ty=Tensor[(7, 1183), int32] */;
    %99 = add(%95, %96) /* ty=Tensor[(10, 1183), int64] */;
    %100 = sigmoid(%97) /* ty=Tensor[(10, 1183), float32] */;
    (%98, %99, %100)
  };
  %101(%var_10316, %var_10317) /* ty=(Tensor[(7, 1183), int32], Tensor[(10, 1183), int64], Tensor[(10, 1183), float32]) */
}

def @func_9410(%var_9409: Tensor[(9, 5, 5), float64]) -> Tensor[(9, 5, 5), float64] {
  %103 = fn (%var_9397: Tensor[(9, 5, 5), float64]) -> Tensor[(9, 5, 5), float64] {
    %102 = cast(%var_9397, dtype="float64") /* ty=Tensor[(9, 5, 5), float64] */;
    asinh(%102) /* ty=Tensor[(9, 5, 5), float64] */
  };
  %103(%var_9409) /* ty=Tensor[(9, 5, 5), float64] */
}

def @func_5680() -> Tensor[(17745, 10), bool] {
  @func_5678() /* ty=Tensor[(17745, 10), bool] */
}

def @func_2740(%var_2739: Tensor[(32), float32]) -> (Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) {
  %110 = fn (%var_2714: Tensor[(32), float32]) -> (Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) {
    %104 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
    %105 = cast(%var_2714, dtype="float32") /* ty=Tensor[(32), float32] */;
    %106 = reshape(%105, newshape=[16, 1, 2]) /* ty=Tensor[(16, 1, 2), float32] */;
    %107 = @func_1462(%106) /* ty=(Tensor[(16, 1, 2), float32],) */;
    %108 = %104.4;
    %109 = %107.0;
    (%108, %109, %var_2714)
  };
  %110(%var_2739) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) */
}

def @func_4686() -> (Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(32), float32], Tensor[(8, 4), float32], Tensor[(17745, 1), float32], Tensor[(16, 1, 2), float32]) {
  @func_4684() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(32), float32], Tensor[(8, 4), float32], Tensor[(17745, 1), float32], Tensor[(16, 1, 2), float32]) */
}

def @func_5555(%var_5554: Tensor[(1183), float64]) -> (Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(1183), float64]) {
  %115 = fn (%var_5545: Tensor[(1183), float64]) -> (Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(1183), float64]) {
    %111 = cast(%var_5545, dtype="float64") /* ty=Tensor[(1183), float64] */;
    %112 = reshape(%111, newshape=[13, 13, 7]) /* ty=Tensor[(13, 13, 7), float64] */;
    %113 = @func_2954() /* ty=Tensor[(13, 8, 3), float32] */;
    %114 = @func_134(%112) /* ty=Tensor[(13, 13, 7), float64] */;
    (%113, %114, %var_5545)
  };
  %115(%var_5554) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(1183), float64]) */
}

def @func_5270() -> (Tensor[(1183), float32], Tensor[(6, 10, 7), float64], Tensor[(1536), float64], Tensor[(32), float32]) {
  @func_5268() /* ty=(Tensor[(1183), float32], Tensor[(6, 10, 7), float64], Tensor[(1536), float64], Tensor[(32), float32]) */
}

def @func_4255(%var_4247: Tensor[(32), float32], %var_4248: Tensor[(17745), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(17745), float32]) {
  %116 = @func_2954() /* ty=Tensor[(13, 8, 3), float32] */;
  %117 = cast(%116, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
  %118 = cast(%var_4247, dtype="float32") /* ty=Tensor[(32), float32] */;
  %119 = cast(%var_4248, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %120 = reshape(%118, newshape=[1, 32]) /* ty=Tensor[(1, 32), float32] */;
  %121 = reshape(%119, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
  %122 = @func_3113(%120, %121) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(1, 32), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(9, 11, 5), bool], Tensor[(1536), float64], Tensor[(17745), bool]) */;
  %123 = exp(%117) /* ty=Tensor[(13, 8, 3), float32] */;
  %124 = %122.4;
  (%123, %124, %var_4247, %var_4248)
}

def @func_6153(%var_6145: uint64, %var_6146: Tensor[(32), float32]) -> (Tensor[(13, 8, 3), float64], Tensor[(2, 16), float32], uint64, Tensor[(32), float32]) {
  %125 = cast(%var_6145, dtype="uint64") /* ty=uint64 */;
  %126 = cast(%var_6146, dtype="float32") /* ty=Tensor[(32), float32] */;
  %127 = reshape(%125, newshape=[]) /* ty=uint64 */;
  %128 = reshape(%126, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %129 = @func_2311(%127, %128) /* ty=(Tensor[(7, 7, 1), uint64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(32), float32]) */;
  %130 = @func_5778() /* ty=Tensor[(13, 8, 3), float64] */;
  %131 = %129.1;
  (%130, %131, %var_6145, %var_6146)
}

def @func_8640(%var_8619: Tensor[(12, 1183), float32], %var_8633: Tensor[(12, 1183), float32]) -> (Tensor[(12, 1183), uint32], Tensor[(12, 1183), int64], Tensor[(1183), float64]) {
  %132 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %133 = %132.0;
  %134 = cast(%133, dtype="uint32") /* ty=Tensor[(1, 1183), uint32] */;
  %135 = cast(%var_8619, dtype="uint32") /* ty=Tensor[(12, 1183), uint32] */;
  %136 = cast(%var_8633, dtype="int64") /* ty=Tensor[(12, 1183), int64] */;
  %137 = shape_of(%var_8619, dtype="int32") /* ty=Tensor[(2), int32] */;
  %138 = cast(%var_8619, dtype="int64") /* ty=Tensor[(12, 1183), int64] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %140 = @func_7995() /* ty=(Tensor[(1183), float64],) */;
  %141 = left_shift(%134, %135) /* ty=Tensor[(12, 1183), uint32] */;
  %142 = bitwise_xor(%138, %139) /* ty=Tensor[(12, 1183), int64] */;
  %143 = %140.0;
  (%141, %142, %143)
}

def @func_3719(%var_3694: Tensor[(7, 1183), float32]) -> (Tensor[(7, 1183), bool], Tensor[(1, 1183), float64]) {
  %144 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %145 = %144.0;
  %146 = cast(%145, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
  %147 = cast(%var_3694, dtype="bool") /* ty=Tensor[(7, 1183), bool] */;
  %148 = cast(%145, dtype="float32") /* ty=Tensor[(1, 1183), float32] */;
  %149 = sigmoid(%148) /* ty=Tensor[(1, 1183), float32] */;
  %150 = cast(%149, dtype="float64") /* ty=Tensor[(1, 1183), float64] */;
  %151 = logical_or(%146, %147) /* ty=Tensor[(7, 1183), bool] */;
  %152 = rsqrt(%150) /* ty=Tensor[(1, 1183), float64] */;
  (%151, %152)
}

def @func_4979(%var_4978: Tensor[(4, 8, 12), float64]) -> (Tensor[(4, 8, 12), float64], Tensor[(1, 1183), float32]) {
  %160 = fn (%var_4938: Tensor[(4, 8, 12), float64]) -> (Tensor[(4, 8, 12), float64], Tensor[(1, 1183), float32]) {
    %153 = cast(%var_4938, dtype="float64") /* ty=Tensor[(4, 8, 12), float64] */;
    %154 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(4, 8, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %155 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 8, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 8, 12), float64] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %157 = @func_3628() /* ty=(Tensor[(1183), float64], Tensor[(1, 1183), float32]) */;
    %158 = floor_mod(%155, %156) /* ty=Tensor[(4, 8, 12), float64] */;
    %159 = %157.1;
    (%158, %159)
  };
  %160(%var_4978) /* ty=(Tensor[(4, 8, 12), float64], Tensor[(1, 1183), float32]) */
}

def @func_7996() -> (Tensor[(1183), float64],) {
  %163 = fn () -> (Tensor[(1183), float64],) {
    %161 = @func_4830() /* ty=(Tensor[(1183), float64], Tensor[(507, 35), float32], Tensor[(17745), float32]) */;
    %162 = %161.0;
    (%162,)
  };
  %163() /* ty=(Tensor[(1183), float64],) */
}

def @func_7027() -> (Tensor[(17745, 10), float64], Tensor[(8, 4), float32]) {
  %164 = @func_5678() /* ty=Tensor[(17745, 10), bool] */;
  %165 = cast(%164, dtype="float64") /* ty=Tensor[(17745, 10), float64] */;
  %166 = @func_4684() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(32), float32], Tensor[(8, 4), float32], Tensor[(17745, 1), float32], Tensor[(16, 1, 2), float32]) */;
  %167 = atanh(%165) /* ty=Tensor[(17745, 10), float64] */;
  %168 = %166.3;
  (%167, %168)
}

def @func_7114(%var_7046: Tensor[(32), float32], %var_7109: Tensor[(16, 13, 2), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(16, 13, 2), bool]) {
  %169 = @func_4419() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %170 = cast(%var_7046, dtype="float32") /* ty=Tensor[(32), float32] */;
  %171 = reshape(%170, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %172 = @func_2738(%171) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) */;
  %173 = %172.1;
  %174 = cast(%173, dtype="bool") /* ty=Tensor[(16, 1, 2), bool] */;
  %175 = cast(%var_7109, dtype="bool") /* ty=Tensor[(16, 13, 2), bool] */;
  %176 = %169.0;
  %177 = not_equal(%174, %175) /* ty=Tensor[(16, 13, 2), bool] */;
  (%176, %var_7046, %177)
}

def @func_8201() -> Tensor[(6, 10, 7), float64] {
  @func_8199() /* ty=Tensor[(6, 10, 7), float64] */
}

def @func_9389() -> (Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(1536), float64]) {
  %178 = @func_6053() /* ty=(Tensor[(1183), float64], Tensor[(1183), float64], Tensor[(17745), float32], Tensor[(13, 8, 3), float32]) */;
  %179 = @func_5268() /* ty=(Tensor[(1183), float32], Tensor[(6, 10, 7), float64], Tensor[(1536), float64], Tensor[(32), float32]) */;
  %180 = %178.1;
  %181 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  %182 = %179.2;
  (%180, %181, %182)
}

def @func_4420() -> (Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) {
  %187 = fn () -> (Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) {
    %183 = @func_3347() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
    %184 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
    %185 = %183.0;
    %186 = %184.1;
    (%185, %186)
  };
  %187() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */
}

def @func_9448() -> Tensor[(1183), float64] {
  @func_9446() /* ty=Tensor[(1183), float64] */
}

def @func_341(%var_340: Tensor[(6, 10, 7), float64]) -> (Tensor[(6, 10, 7), float64],) {
  %193 = fn (%var_334: Tensor[(6, 10, 7), float64]) -> (Tensor[(6, 10, 7), float64],) {
    %188 = cast(%var_334, dtype="float64") /* ty=Tensor[(6, 10, 7), float64] */;
    %189 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(6, 10, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %190 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 10, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 10, 7), float64] */;
    %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %192 = add(%190, %191) /* ty=Tensor[(6, 10, 7), float64] */;
    (%192,)
  };
  %193(%var_340) /* ty=(Tensor[(6, 10, 7), float64],) */
}

def @func_2575() -> (Tensor[(13, 8, 3), float32],) {
  %194 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  (%194,)
}

def @func_9672() -> (Tensor[(1183), float64],) {
  %197 = fn () -> (Tensor[(1183), float64],) {
    %195 = @func_4516() /* ty=(Tensor[(1183), float64],) */;
    %196 = %195.0;
    (%196,)
  };
  %197() /* ty=(Tensor[(1183), float64],) */
}

def @func_1145(%var_1139: Tensor[(9, 11, 5), uint64]) -> Tensor[(9, 11, 5), bool] {
  %198 = cast(%var_1139, dtype="bool") /* ty=Tensor[(9, 11, 5), bool] */;
  %199 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(9, 11, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 11, 5), uint64] */, dtype="bool") /* ty=Tensor[(9, 11, 5), bool] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%200, %201) /* ty=Tensor[(9, 11, 5), bool] */
}

def @func_8271() -> Tensor[(13, 13, 7), float64] {
  @func_8269() /* ty=Tensor[(13, 13, 7), float64] */
}

def @func_7344(%var_7342: Tensor[(17745, 2), float32], %var_7343: Tensor[(17745, 2), float32]) -> (Tensor[(17745, 2), int8], Tensor[(17745, 2), bool], Tensor[(17745, 2), float64]) {
  @func_7340(%var_7342, %var_7343) /* ty=(Tensor[(17745, 2), int8], Tensor[(17745, 2), bool], Tensor[(17745, 2), float64]) */
}

def @func_9842() -> (Tensor[(17745), float32],) {
  @func_9840() /* ty=(Tensor[(17745), float32],) */
}

def @func_10237(%var_10229: Tensor[(1183), float64]) -> Tensor[(1183), bool] {
  %202 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %203 = %202.1;
  %204 = cast(%var_10229, dtype="bool") /* ty=Tensor[(1183), bool] */;
  %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(1), int32] */;
  %206 = cast(%203, dtype="bool") /* ty=Tensor[(1183), bool] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_and(%206, %207) /* ty=Tensor[(1183), bool] */
}

def @func_7217() -> Tensor[(1, 1183), float32] {
  %208 = @func_3628() /* ty=(Tensor[(1183), float64], Tensor[(1, 1183), float32]) */;
  %208.1
}

def @func_9733() -> (Tensor[(9, 7, 2), float32], Tensor[(8, 4), float32], Tensor[(13, 8, 3), float32], Tensor[(416), float32], Tensor[(1183), float64]) {
  %220 = fn () -> (Tensor[(9, 7, 2), float32], Tensor[(8, 4), float32], Tensor[(13, 8, 3), float32], Tensor[(416), float32], Tensor[(1183), float64]) {
    %209 = @func_8692() /* ty=(Tensor[(9, 7, 2), float32],) */;
    %210 = @func_4684() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(32), float32], Tensor[(8, 4), float32], Tensor[(17745, 1), float32], Tensor[(16, 1, 2), float32]) */;
    %211 = %210.3;
    %212 = cast(%211, dtype="float32") /* ty=Tensor[(8, 4), float32] */;
    %213 = cast(meta[relay.Constant][8] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
    %214 = reshape(%212, newshape=[32]) /* ty=Tensor[(32), float32] */;
    %215 = reshape(%213, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), float32] */;
    %216 = @func_7114(%214, %215) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(16, 13, 2), bool]) */;
    %217 = %209.0;
    %218 = %216.0;
    %219 = @func_9446() /* ty=Tensor[(1183), float64] */;
    (%217, %211, %218, meta[relay.Constant][8] /* ty=Tensor[(416), float32] */, %219)
  };
  %220() /* ty=(Tensor[(9, 7, 2), float32], Tensor[(8, 4), float32], Tensor[(13, 8, 3), float32], Tensor[(416), float32], Tensor[(1183), float64]) */
}

def @func_4869() -> (Tensor[(9, 7, 2), float32], Tensor[(17745), float32]) {
  %221 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 7, 2), float32] */, dtype="float32") /* ty=Tensor[(9, 7, 2), float32] */;
  %222 = @func_4830() /* ty=(Tensor[(1183), float64], Tensor[(507, 35), float32], Tensor[(17745), float32]) */;
  %223 = tan(%221) /* ty=Tensor[(9, 7, 2), float32] */;
  %224 = %222.2;
  (%223, %224)
}

def @func_8845() -> (Tensor[(13, 8, 3), float32], Tensor[(1183), float32]) {
  %227 = fn () -> (Tensor[(13, 8, 3), float32], Tensor[(1183), float32]) {
    %225 = @func_4554() /* ty=Tensor[(13, 8, 3), float32] */;
    %226 = @func_6965() /* ty=Tensor[(1183), float32] */;
    (%225, %226)
  };
  %227() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float32]) */
}

def @func_2996() -> (Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool], Tensor[(17745, 1), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) {
  %237 = fn () -> (Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool], Tensor[(17745, 1), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) {
    %228 = @func_2575() /* ty=(Tensor[(13, 8, 3), float32],) */;
    %229 = cast(meta[relay.Constant][10] /* ty=Tensor[(17745, 1), float32] */, dtype="float32") /* ty=Tensor[(17745, 1), float32] */;
    %230 = reshape(%229, newshape=[15, 1183]) /* ty=Tensor[(15, 1183), float32] */;
    %231 = @func_2856(%230) /* ty=(Tensor[(15, 1183), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
    %232 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 1183), float64] */, dtype="float64") /* ty=Tensor[(1, 1183), float64] */;
    %233 = reshape(%232, newshape=[13, 13, 7]) /* ty=Tensor[(13, 13, 7), float64] */;
    %234 = %228.0;
    %235 = %231.3;
    %236 = @func_134(%233) /* ty=Tensor[(13, 13, 7), float64] */;
    (%234, %235, meta[relay.Constant][10] /* ty=Tensor[(17745, 1), float32] */, %236, meta[relay.Constant][11] /* ty=Tensor[(1, 1183), float64] */)
  };
  %237() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool], Tensor[(17745, 1), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */
}

def @func_3987(%var_3965: Tensor[(32), float32], %var_3975: Tensor[(16, 1183), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 96), float64], Tensor[(32), float32], Tensor[(17745), float32], Tensor[(16, 1183), bool]) {
  %238 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %239 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 96), float64] */, dtype="float64") /* ty=Tensor[(16, 96), float64] */;
  %240 = cast(%var_3965, dtype="float32") /* ty=Tensor[(32), float32] */;
  %241 = cast(meta[relay.Constant][13] /* ty=Tensor[(17745), float32] */, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %242 = reshape(%239, newshape=[4, 384]) /* ty=Tensor[(4, 384), float64] */;
  %243 = reshape(%240, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %244 = reshape(%241, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
  %245 = @func_2934(%242, %243, %244) /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 16, 12), float32], Tensor[(4, 384), float64], Tensor[(32), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 1, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) */;
  %246 = @func_3470() /* ty=Tensor[(1, 1183), float32] */;
  %247 = cast(%246, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
  %248 = cast(%var_3975, dtype="bool") /* ty=Tensor[(16, 1183), bool] */;
  %249 = %238.0;
  %250 = %245.4;
  %251 = logical_or(%247, %248) /* ty=Tensor[(16, 1183), bool] */;
  (%249, %250, meta[relay.Constant][12] /* ty=Tensor[(16, 96), float64] */, %var_3965, meta[relay.Constant][13] /* ty=Tensor[(17745), float32] */, %251)
}

def @func_7029() -> (Tensor[(17745, 10), float64], Tensor[(8, 4), float32]) {
  @func_7027() /* ty=(Tensor[(17745, 10), float64], Tensor[(8, 4), float32]) */
}

def @func_8381() -> (Tensor[(9, 11, 5), bool], Tensor[(1183), float32], Tensor[(1, 1183), float32], Tensor[(1, 1183), float32], Tensor[(420), float32]) {
  %252 = @func_7277() /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 4), float32], Tensor[(1183), float64]) */;
  %253 = cast(meta[relay.Constant][14] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %254 = reshape(%253, newshape=[14, 2, 15]) /* ty=Tensor[(14, 2, 15), float32] */;
  %255 = @func_7863(%254) /* ty=(Tensor[(14, 2, 15), float32], Tensor[(1, 1183), float32]) */;
  %256 = %252.0;
  %257 = @func_6965() /* ty=Tensor[(1183), float32] */;
  %258 = @func_7217() /* ty=Tensor[(1, 1183), float32] */;
  %259 = %255.1;
  (%256, %257, %258, %259, meta[relay.Constant][14] /* ty=Tensor[(420), float32] */)
}

def @func_8644(%var_8642: Tensor[(12, 1183), float32], %var_8643: Tensor[(12, 1183), float32]) -> (Tensor[(12, 1183), uint32], Tensor[(12, 1183), int64], Tensor[(1183), float64]) {
  @func_8640(%var_8642, %var_8643) /* ty=(Tensor[(12, 1183), uint32], Tensor[(12, 1183), int64], Tensor[(1183), float64]) */
}

def @func_5678() -> Tensor[(17745, 10), bool] {
  %260 = @func_3271() /* ty=Tensor[(17745, 1), float32] */;
  %261 = cast(%260, dtype="bool") /* ty=Tensor[(17745, 1), bool] */;
  %262 = cast(meta[relay.Constant][15] /* ty=Tensor[(17745, 10), float32] */, dtype="bool") /* ty=Tensor[(17745, 10), bool] */;
  equal(%261, %262) /* ty=Tensor[(17745, 10), bool] */
}

def @func_589(%var_578: Tensor[(1, 1183), float64]) -> (Tensor[(12, 14, 8), int8], Tensor[(12, 14, 8), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) {
  %263 = cast(meta[relay.Constant][16] /* ty=Tensor[(12, 14, 8), float32] */, dtype="float32") /* ty=Tensor[(12, 14, 8), float32] */;
  %264 = sqrt(%263) /* ty=Tensor[(12, 14, 8), float32] */;
  %265 = cast(meta[relay.Constant][16] /* ty=Tensor[(12, 14, 8), float32] */, dtype="int8") /* ty=Tensor[(12, 14, 8), int8] */;
  %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%264, dtype="int8") /* ty=Tensor[(12, 14, 8), int8] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %269 = cast(%264, dtype="float32") /* ty=Tensor[(12, 14, 8), float32] */;
  %270 = cast(%var_578, dtype="float64") /* ty=Tensor[(1, 1183), float64] */;
  %271 = reshape(%270, newshape=[13, 13, 7]) /* ty=Tensor[(13, 13, 7), float64] */;
  %272 = left_shift(%267, %268) /* ty=Tensor[(12, 14, 8), int8] */;
  %273 = cosh(%269) /* ty=Tensor[(12, 14, 8), float32] */;
  %274 = @func_134(%271) /* ty=Tensor[(13, 13, 7), float64] */;
  (%272, %273, %274, %var_578)
}

def @func_7118(%var_7116: Tensor[(32), float32], %var_7117: Tensor[(16, 13, 2), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(16, 13, 2), bool]) {
  @func_7114(%var_7116, %var_7117) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(16, 13, 2), bool]) */
}

def @func_9193() -> Tensor[(13, 8, 3), float32] {
  @func_9191() /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_7182() -> Tensor[(6, 10, 7), float64] {
  @func_7180() /* ty=Tensor[(6, 10, 7), float64] */
}

def @func_3113(%var_3060: Tensor[(1, 32), float32], %var_3109: Tensor[(17745), float32]) -> (Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(1, 32), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(9, 11, 5), bool], Tensor[(1536), float64], Tensor[(17745), bool]) {
  %275 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %276 = cast(%var_3060, dtype="float32") /* ty=Tensor[(1, 32), float32] */;
  %277 = reshape(%276, newshape=[16, 1, 2]) /* ty=Tensor[(16, 1, 2), float32] */;
  %278 = @func_1462(%277) /* ty=(Tensor[(16, 1, 2), float32],) */;
  %279 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %280 = cast(meta[relay.Constant][17] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %281 = cast(%var_3060, dtype="float32") /* ty=Tensor[(1, 32), float32] */;
  %282 = cast(meta[relay.Constant][18] /* ty=Tensor[(17745), float32] */, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %283 = reshape(%280, newshape=[4, 384]) /* ty=Tensor[(4, 384), float64] */;
  %284 = reshape(%281, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %285 = reshape(%282, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
  %286 = @func_2934(%283, %284, %285) /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 16, 12), float32], Tensor[(4, 384), float64], Tensor[(32), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 1, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) */;
  %287 = cast(%var_3109, dtype="bool") /* ty=Tensor[(17745), bool] */;
  %288 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(17745), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %289 = cast(meta[relay.Constant][18] /* ty=Tensor[(17745), float32] */, dtype="bool") /* ty=Tensor[(17745), bool] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?), bool] */;
  %291 = %275.4;
  %292 = %278.0;
  %293 = @func_2954() /* ty=Tensor[(13, 8, 3), float32] */;
  %294 = %279.0;
  %295 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  %296 = %286.0;
  %297 = not_equal(%289, %290) /* ty=Tensor[(17745), bool] */;
  (%291, %292, %var_3060, %293, %294, %295, %296, meta[relay.Constant][17] /* ty=Tensor[(1536), float64] */, %297)
}

def @func_5231(%var_5229: Tensor[(32, 1), float32], %var_5230: Tensor[(18928), float32]) -> (Tensor[(1, 1183), float64], Tensor[(17745), float32], Tensor[(32, 1), float32], Tensor[(18928), float32], Tensor[(2, 16), float32]) {
  @func_5227(%var_5229, %var_5230) /* ty=(Tensor[(1, 1183), float64], Tensor[(17745), float32], Tensor[(32, 1), float32], Tensor[(18928), float32], Tensor[(2, 16), float32]) */
}

def @func_7419() -> (Tensor[(32), float32],) {
  @func_7417() /* ty=(Tensor[(32), float32],) */
}

def @func_4291() -> (Tensor[(13, 8, 3), float32],) {
  %298 = @func_3735() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %299 = %298.0;
  (%299,)
}

def @func_7403() -> Tensor[(1183), float64] {
  @func_7401() /* ty=Tensor[(1183), float64] */
}

def @func_8767() -> (Tensor[(1183), float64],) {
  %300 = @func_7277() /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 4), float32], Tensor[(1183), float64]) */;
  %301 = %300.2;
  (%301,)
}

def @func_3572() -> Tensor[(13, 8, 3), float32] {
  @func_2546() /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_6799() -> Tensor[(13, 8, 3), float32] {
  %302 = @func_4314() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
  %302.0
}

def @func_4871() -> (Tensor[(9, 7, 2), float32], Tensor[(17745), float32]) {
  @func_4869() /* ty=(Tensor[(9, 7, 2), float32], Tensor[(17745), float32]) */
}

def @func_9446() -> Tensor[(1183), float64] {
  %303 = @func_4419() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %303.1
}

def @func_2856(%var_2831: Tensor[(15, 1183), float32]) -> (Tensor[(15, 1183), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) {
  %304 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %305 = %304.0;
  %306 = cast(%305, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
  %307 = cast(%var_2831, dtype="bool") /* ty=Tensor[(15, 1183), bool] */;
  %308 = cast(%305, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
  %309 = cast(%var_2831, dtype="bool") /* ty=Tensor[(15, 1183), bool] */;
  %310 = greater_equal(%308, %309) /* ty=Tensor[(15, 1183), bool] */;
  %311 = cast(%305, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
  %312 = cast(%310, dtype="bool") /* ty=Tensor[(15, 1183), bool] */;
  %313 = not_equal(%306, %307) /* ty=Tensor[(15, 1183), bool] */;
  %314 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  %315 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  %316 = less(%311, %312) /* ty=Tensor[(15, 1183), bool] */;
  (%313, %314, %315, %316)
}

def @func_3271() -> Tensor[(17745, 1), float32] {
  %317 = @func_2995() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool], Tensor[(17745, 1), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */;
  %317.2
}

def @func_3736() -> (Tensor[(13, 8, 3), float32],) {
  %319 = fn () -> (Tensor[(13, 8, 3), float32],) {
    %318 = @func_2954() /* ty=Tensor[(13, 8, 3), float32] */;
    (%318,)
  };
  %319() /* ty=(Tensor[(13, 8, 3), float32],) */
}

def @func_4329() -> Tensor[(13, 13, 7), float64] {
  %321 = fn () -> Tensor[(13, 13, 7), float64] {
    %320 = @func_2995() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool], Tensor[(17745, 1), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */;
    %320.3
  };
  %321() /* ty=Tensor[(13, 13, 7), float64] */
}

def @func_2264(%var_2262: Tensor[(8, 16, 12), float64], %var_2263: Tensor[(2, 16), float32]) -> (Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(8, 16, 12), float32], Tensor[(6, 10, 7), float64]) {
  %348 = fn (%var_2204: Tensor[(8, 16, 12), float64], %var_2226: Tensor[(2, 16), float32]) -> (Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(8, 16, 12), float32], Tensor[(6, 10, 7), float64]) {
    %322 = cast(meta[relay.Constant][19] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %323 = reshape(%322, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
    %324 = @func_339(%323) /* ty=(Tensor[(6, 10, 7), float64],) */;
    %325 = cast(%var_2226, dtype="float32") /* ty=Tensor[(2, 16), float32] */;
    %326 = reshape(%325, newshape=[16, 1, 2]) /* ty=Tensor[(16, 1, 2), float32] */;
    %327 = @func_1462(%326) /* ty=(Tensor[(16, 1, 2), float32],) */;
    %328 = cast(%var_2204, dtype="float64") /* ty=Tensor[(8, 16, 12), float64] */;
    %329 = asin(%328) /* ty=Tensor[(8, 16, 12), float64] */;
    %330 = cast(%var_2204, dtype="bool") /* ty=Tensor[(8, 16, 12), bool] */;
    %331 = shape_of(%329, dtype="int32") /* ty=Tensor[(3), int32] */;
    %332 = cast(%329, dtype="bool") /* ty=Tensor[(8, 16, 12), bool] */;
    %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %334 = less_equal(%332, %333) /* ty=Tensor[(8, 16, 12), bool] */;
    %335 = cast(%var_2204, dtype="float64") /* ty=Tensor[(8, 16, 12), float64] */;
    %336 = acos(%335) /* ty=Tensor[(8, 16, 12), float64] */;
    %337 = cast(%336, dtype="float32") /* ty=Tensor[(8, 16, 12), float32] */;
    %338 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
    %339 = cast(%334, dtype="float32") /* ty=Tensor[(8, 16, 12), float32] */;
    %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %341 = %324.0;
    %342 = cast(%341, dtype="float64") /* ty=Tensor[(6, 10, 7), float64] */;
    %343 = reshape(%342, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
    %344 = @func_339(%343) /* ty=(Tensor[(6, 10, 7), float64],) */;
    %345 = %327.0;
    %346 = floor_divide(%339, %340) /* ty=Tensor[(8, 16, 12), float32] */;
    %347 = %344.0;
    (%341, meta[relay.Constant][19] /* ty=Tensor[(420), float64] */, %345, %var_2226, %346, %347)
  };
  %348(%var_2262, %var_2263) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(8, 16, 12), float32], Tensor[(6, 10, 7), float64]) */
}

def @func_8897() -> (Tensor[(1183), float64],) {
  @func_8895() /* ty=(Tensor[(1183), float64],) */
}

def @func_9391() -> (Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(1536), float64]) {
  @func_9389() /* ty=(Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(1536), float64]) */
}

def @func_8451() -> Tensor[(1183), float32] {
  @func_8449() /* ty=Tensor[(1183), float32] */
}

def @func_8269() -> Tensor[(13, 13, 7), float64] {
  @func_4328() /* ty=Tensor[(13, 13, 7), float64] */
}

def @main(%var_10417: Tensor[(17745, 10), float64]) -> (Tensor[(17745, 10), uint16],) {
  %349 = @func_7029() /* ty=(Tensor[(17745, 10), float64], Tensor[(8, 4), float32]) */;
  %350 = %349.0;
  %351 = cast(%var_10417, dtype="uint16") /* ty=Tensor[(17745, 10), uint16] */;
  %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(2), int32] */;
  %353 = cast(%350, dtype="uint16") /* ty=Tensor[(17745, 10), uint16] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %355 = logical_xor(%353, %354) /* ty=Tensor[(17745, 10), uint16] */;
  (%355,)
}

def @func_6601(%var_6586: Tensor[(32), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(6, 10, 7), float64], Tensor[(1536), float64], Tensor[(32), float32]) {
  %356 = @func_3735() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %357 = cast(meta[relay.Constant][20] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %358 = cast(%var_6586, dtype="float32") /* ty=Tensor[(32), float32] */;
  %359 = reshape(%357, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
  %360 = reshape(%358, newshape=[2, 16]) /* ty=Tensor[(2, 16), float32] */;
  %361 = @func_2261(%359, %360) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(8, 16, 12), float32], Tensor[(6, 10, 7), float64]) */;
  %362 = %356.0;
  %363 = %361.0;
  (%362, %363, meta[relay.Constant][20] /* ty=Tensor[(1536), float64] */, %var_6586)
}

def @func_4789(%var_4788: Tensor[(507, 35), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(507, 35), float32], Tensor[(1183), int32]) {
  %397 = fn (%var_4776: Tensor[(507, 35), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(507, 35), float32], Tensor[(1183), int32]) {
    %364 = cast(meta[relay.Constant][21] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
    %365 = cast(%var_4776, dtype="float32") /* ty=Tensor[(507, 35), float32] */;
    %366 = reshape(%364, newshape=[1, 32]) /* ty=Tensor[(1, 32), float32] */;
    %367 = reshape(%365, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
    %368 = @func_3113(%366, %367) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(1, 32), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(9, 11, 5), bool], Tensor[(1536), float64], Tensor[(17745), bool]) */;
    %369 = @func_4516() /* ty=(Tensor[(1183), float64],) */;
    %370 = %369.0;
    %371 = cast(%370, dtype="float64") /* ty=Tensor[(1183), float64] */;
    %372 = reshape(%371, newshape=[1, 1183]) /* ty=Tensor[(1, 1183), float64] */;
    %373 = @func_589(%372) /* ty=(Tensor[(12, 14, 8), int8], Tensor[(12, 14, 8), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */;
    %374 = %373.3;
    %375 = cast(%374, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
    %376 = shape_of(%370, dtype="int32") /* ty=Tensor[(1), int32] */;
    %377 = cast(%370, dtype="bool") /* ty=Tensor[(1183), bool] */;
    %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?), bool] */;
    %379 = less(%377, %378) /* ty=Tensor[(1183), bool] */;
    %380 = cast(%379, dtype="float64") /* ty=Tensor[(1183), float64] */;
    %381 = tan(%380) /* ty=Tensor[(1183), float64] */;
    %382 = cast(%370, dtype="float64") /* ty=Tensor[(1183), float64] */;
    %383 = reshape(%382, newshape=[1, 1183]) /* ty=Tensor[(1, 1183), float64] */;
    %384 = @func_589(%383) /* ty=(Tensor[(12, 14, 8), int8], Tensor[(12, 14, 8), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */;
    %385 = %384.3;
    %386 = cast(%374, dtype="int16") /* ty=Tensor[(1, 1183), int16] */;
    %387 = shape_of(%385, dtype="int32") /* ty=Tensor[(2), int32] */;
    %388 = cast(%385, dtype="int16") /* ty=Tensor[(1, 1183), int16] */;
    %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %390 = bitwise_xor(%388, %389) /* ty=Tensor[(?, 1183), int16] */;
    %391 = cast(%390, dtype="int32") /* ty=Tensor[(?, 1183), int32] */;
    %392 = shape_of(%381, dtype="int32") /* ty=Tensor[(1), int32] */;
    %393 = cast(%381, dtype="int32") /* ty=Tensor[(1183), int32] */;
    %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?), int32] */;
    %395 = %368.5;
    %396 = bitwise_and(%393, %394) /* ty=Tensor[(1183), int32] */;
    (%395, meta[relay.Constant][21] /* ty=Tensor[(32), float32] */, %var_4776, %396)
  };
  %397(%var_4788) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(507, 35), float32], Tensor[(1183), int32]) */
}

def @func_9282(%var_9280: Tensor[(17745), float32], %var_9281: uint64) -> (Tensor[(13, 8, 3), float32], Tensor[(6, 10, 7), float64], Tensor[(32), float32], Tensor[(16, 1, 2), float32], Tensor[(1183), float64], Tensor[(4, 384), float64], Tensor[(1536), float64], Tensor[(17745), float32], Tensor[(2, 16), float32], uint64, Tensor[(1183), float64]) {
  %427 = fn (%var_9265: Tensor[(17745), float32], %var_9268: uint64) -> (Tensor[(13, 8, 3), float32], Tensor[(6, 10, 7), float64], Tensor[(32), float32], Tensor[(16, 1, 2), float32], Tensor[(1183), float64], Tensor[(4, 384), float64], Tensor[(1536), float64], Tensor[(17745), float32], Tensor[(2, 16), float32], uint64, Tensor[(1183), float64]) {
    %398 = @func_8921() /* ty=(Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(1183), float32]) */;
    %399 = cast(meta[relay.Constant][22] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
    %400 = reshape(%399, newshape=[32]) /* ty=Tensor[(32), float32] */;
    %401 = @func_6601(%400) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(6, 10, 7), float64], Tensor[(1536), float64], Tensor[(32), float32]) */;
    %402 = cast(meta[relay.Constant][22] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
    %403 = reshape(%402, newshape=[32]) /* ty=Tensor[(32), float32] */;
    %404 = @func_2738(%403) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) */;
    %405 = @func_6965() /* ty=Tensor[(1183), float32] */;
    %406 = cast(%405, dtype="float64") /* ty=Tensor[(1183), float64] */;
    %407 = cast(meta[relay.Constant][23] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
    %408 = cast(meta[relay.Constant][22] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
    %409 = cast(%var_9265, dtype="float32") /* ty=Tensor[(17745), float32] */;
    %410 = reshape(%407, newshape=[4, 384]) /* ty=Tensor[(4, 384), float64] */;
    %411 = reshape(%408, newshape=[32]) /* ty=Tensor[(32), float32] */;
    %412 = reshape(%409, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
    %413 = @func_2934(%410, %411, %412) /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 16, 12), float32], Tensor[(4, 384), float64], Tensor[(32), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 1, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) */;
    %414 = cast(%var_9268, dtype="uint64") /* ty=uint64 */;
    %415 = cast(meta[relay.Constant][22] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
    %416 = reshape(%414, newshape=[]) /* ty=uint64 */;
    %417 = reshape(%415, newshape=[32]) /* ty=Tensor[(32), float32] */;
    %418 = @func_6153(%416, %417) /* ty=(Tensor[(13, 8, 3), float64], Tensor[(2, 16), float32], uint64, Tensor[(32), float32]) */;
    %419 = @func_6350() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
    %420 = %398.1;
    %421 = %401.1;
    %422 = %404.1;
    %423 = acosh(%406) /* ty=Tensor[(1183), float64] */;
    %424 = %413.2;
    %425 = %418.1;
    %426 = %419.1;
    (%420, %421, meta[relay.Constant][22] /* ty=Tensor[(32), float32] */, %422, %423, %424, meta[relay.Constant][23] /* ty=Tensor[(1536), float64] */, %var_9265, %425, %var_9268, %426)
  };
  %427(%var_9280, %var_9281) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(6, 10, 7), float64], Tensor[(32), float32], Tensor[(16, 1, 2), float32], Tensor[(1183), float64], Tensor[(4, 384), float64], Tensor[(1536), float64], Tensor[(17745), float32], Tensor[(2, 16), float32], uint64, Tensor[(1183), float64]) */
}

def @func_2954() -> Tensor[(13, 8, 3), float32] {
  @func_2546() /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_4386() -> Tensor[(495), uint64] {
  %428 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %428.4
}

def @func_6299() -> (Tensor[(17745), float32], Tensor[(1183), float64]) {
  %433 = fn () -> (Tensor[(17745), float32], Tensor[(1183), float64]) {
    %429 = @func_4830() /* ty=(Tensor[(1183), float64], Tensor[(507, 35), float32], Tensor[(17745), float32]) */;
    %430 = @func_4516() /* ty=(Tensor[(1183), float64],) */;
    %431 = %429.2;
    %432 = %430.0;
    (%431, %432)
  };
  %433() /* ty=(Tensor[(17745), float32], Tensor[(1183), float64]) */
}

def @func_4299() -> (Tensor[(13, 8, 3), float32],) {
  %434 = @func_2888() /* ty=(Tensor[(1, 1183), float32], Tensor[(32), float32], Tensor[(16, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) */;
  %435 = %434.3;
  (%435,)
}

def @func_5575() -> (Tensor[(13, 13, 7), float64],) {
  %437 = fn () -> (Tensor[(13, 13, 7), float64],) {
    %436 = @func_4328() /* ty=Tensor[(13, 13, 7), float64] */;
    (%436,)
  };
  %437() /* ty=(Tensor[(13, 13, 7), float64],) */
}

def @func_5065() -> Tensor[(1, 1183), float32] {
  @func_5063() /* ty=Tensor[(1, 1183), float32] */
}

def @func_8895() -> (Tensor[(1183), float64],) {
  %438 = @func_7995() /* ty=(Tensor[(1183), float64],) */;
  %439 = %438.0;
  (%439,)
}

def @func_9840() -> (Tensor[(17745), float32],) {
  %440 = @func_6298() /* ty=(Tensor[(17745), float32], Tensor[(1183), float64]) */;
  %441 = %440.0;
  (%441,)
}

def @func_6801() -> Tensor[(13, 8, 3), float32] {
  @func_6799() /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_7865(%var_7864: Tensor[(14, 2, 15), float32]) -> (Tensor[(14, 2, 15), float32], Tensor[(1, 1183), float32]) {
  %445 = fn (%var_7842: Tensor[(14, 2, 15), float32]) -> (Tensor[(14, 2, 15), float32], Tensor[(1, 1183), float32]) {
    %442 = cast(%var_7842, dtype="float32") /* ty=Tensor[(14, 2, 15), float32] */;
    %443 = cosh(%442) /* ty=Tensor[(14, 2, 15), float32] */;
    %444 = @func_7217() /* ty=Tensor[(1, 1183), float32] */;
    (%443, %444)
  };
  %445(%var_7864) /* ty=(Tensor[(14, 2, 15), float32], Tensor[(1, 1183), float32]) */
}

def @func_7748(%var_7746: Tensor[(15, 13, 14), float64]) -> (Tensor[(15, 13, 14), float64],) {
  @func_7745(%var_7746) /* ty=(Tensor[(15, 13, 14), float64],) */
}

def @func_7340(%var_7306: Tensor[(17745, 2), float32], %var_7322: Tensor[(17745, 2), float32]) -> (Tensor[(17745, 2), int8], Tensor[(17745, 2), bool], Tensor[(17745, 2), float64]) {
  %446 = @func_4684() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(32), float32], Tensor[(8, 4), float32], Tensor[(17745, 1), float32], Tensor[(16, 1, 2), float32]) */;
  %447 = %446.4;
  %448 = cast(%447, dtype="int8") /* ty=Tensor[(17745, 1), int8] */;
  %449 = cast(%var_7306, dtype="int8") /* ty=Tensor[(17745, 2), int8] */;
  %450 = cast(%var_7322, dtype="bool") /* ty=Tensor[(17745, 2), bool] */;
  %451 = shape_of(%var_7306, dtype="int32") /* ty=Tensor[(2), int32] */;
  %452 = cast(%var_7306, dtype="bool") /* ty=Tensor[(17745, 2), bool] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %454 = cast(%var_7306, dtype="bool") /* ty=Tensor[(17745, 2), bool] */;
  %455 = shape_of(%var_7322, dtype="int32") /* ty=Tensor[(2), int32] */;
  %456 = cast(%var_7322, dtype="bool") /* ty=Tensor[(17745, 2), bool] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %458 = less(%456, %457) /* ty=Tensor[(17745, 2), bool] */;
  %459 = cast(%447, dtype="float64") /* ty=Tensor[(17745, 1), float64] */;
  %460 = cast(%458, dtype="float64") /* ty=Tensor[(17745, 2), float64] */;
  %461 = left_shift(%448, %449) /* ty=Tensor[(17745, 2), int8] */;
  %462 = logical_and(%452, %453) /* ty=Tensor[(17745, 2), bool] */;
  %463 = floor_mod(%459, %460) /* ty=Tensor[(17745, 2), float64] */;
  (%461, %462, %463)
}

def @func_10240(%var_10238: Tensor[(1183), float64]) -> Tensor[(1183), bool] {
  @func_10237(%var_10238) /* ty=Tensor[(1183), bool] */
}

def @func_10414() -> (Tensor[(13, 8, 3), float32], Tensor[(17745, 1), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), bool], Tensor[(1183), float32]) {
  @func_10412() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(17745, 1), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), bool], Tensor[(1183), float32]) */
}

def @func_2939(%var_2936: Tensor[(4, 384), float64], %var_2937: Tensor[(32), float32], %var_2938: Tensor[(17745), float32]) -> (Tensor[(9, 11, 5), bool], Tensor[(8, 16, 12), float32], Tensor[(4, 384), float64], Tensor[(32), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 1, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) {
  @func_2934(%var_2936, %var_2937, %var_2938) /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 16, 12), float32], Tensor[(4, 384), float64], Tensor[(32), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 1, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) */
}

def @func_6667(%var_6666: uint64) -> (Tensor[(2, 16), float32], Tensor[(32), float32], Tensor[(1183), float32], Tensor[(13, 8, 3), float32]) {
  %477 = fn (%var_6624: uint64) -> (Tensor[(2, 16), float32], Tensor[(32), float32], Tensor[(1183), float32], Tensor[(13, 8, 3), float32]) {
    %464 = cast(%var_6624, dtype="uint64") /* ty=uint64 */;
    %465 = cast(meta[relay.Constant][24] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
    %466 = reshape(%464, newshape=[]) /* ty=uint64 */;
    %467 = reshape(%465, newshape=[32]) /* ty=Tensor[(32), float32] */;
    %468 = @func_2311(%466, %467) /* ty=(Tensor[(7, 7, 1), uint64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(32), float32]) */;
    %469 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
    %470 = %469.1;
    %471 = cast(%470, dtype="float32") /* ty=Tensor[(1183), float32] */;
    %472 = cast(%var_6624, dtype="float32") /* ty=float32 */;
    %473 = @func_4314() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
    %474 = %468.1;
    %475 = floor_divide(%471, %472) /* ty=Tensor[(1183), float32] */;
    %476 = %473.0;
    (%474, meta[relay.Constant][24] /* ty=Tensor[(32), float32] */, %475, %476)
  };
  %477(%var_6666) /* ty=(Tensor[(2, 16), float32], Tensor[(32), float32], Tensor[(1183), float32], Tensor[(13, 8, 3), float32]) */
}

def @func_3281() -> Tensor[(1183), float64] {
  %478 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %478.1
}

def @func_4315() -> (Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) {
  %483 = fn () -> (Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) {
    %479 = @func_4291() /* ty=(Tensor[(13, 8, 3), float32],) */;
    %480 = @func_2995() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool], Tensor[(17745, 1), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */;
    %481 = %479.0;
    %482 = %480.1;
    (%481, %482)
  };
  %483() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */
}

def @func_2934(%var_2909: Tensor[(4, 384), float64], %var_2910: Tensor[(32), float32], %var_2930: Tensor[(17745), float32]) -> (Tensor[(9, 11, 5), bool], Tensor[(8, 16, 12), float32], Tensor[(4, 384), float64], Tensor[(32), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 1, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) {
  %484 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %485 = cast(%var_2909, dtype="float64") /* ty=Tensor[(4, 384), float64] */;
  %486 = cast(%var_2910, dtype="float32") /* ty=Tensor[(32), float32] */;
  %487 = reshape(%485, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
  %488 = reshape(%486, newshape=[2, 16]) /* ty=Tensor[(2, 16), float32] */;
  %489 = @func_2261(%487, %488) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(8, 16, 12), float32], Tensor[(6, 10, 7), float64]) */;
  %490 = cast(%var_2910, dtype="float32") /* ty=Tensor[(32), float32] */;
  %491 = reshape(%490, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %492 = @func_2738(%491) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) */;
  %493 = %492.1;
  %494 = cast(%493, dtype="float32") /* ty=Tensor[(16, 1, 2), float32] */;
  %495 = reshape(%494, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %496 = @func_2738(%495) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) */;
  %497 = cast(%var_2930, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %498 = reshape(%497, newshape=[15, 1183]) /* ty=Tensor[(15, 1183), float32] */;
  %499 = @func_2856(%498) /* ty=(Tensor[(15, 1183), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
  %500 = %484.3;
  %501 = %489.4;
  %502 = %496.1;
  %503 = %499.2;
  (%500, %501, %var_2909, %var_2910, %493, %502, %503, %var_2930)
}

def @func_7417() -> (Tensor[(32), float32],) {
  %504 = @func_2888() /* ty=(Tensor[(1, 1183), float32], Tensor[(32), float32], Tensor[(16, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) */;
  %505 = %504.1;
  (%505,)
}

def @func_8810() -> Tensor[(17745), float32] {
  %507 = fn () -> Tensor[(17745), float32] {
    %506 = @func_6053() /* ty=(Tensor[(1183), float64], Tensor[(1183), float64], Tensor[(17745), float32], Tensor[(13, 8, 3), float32]) */;
    %506.2
  };
  %507() /* ty=Tensor[(17745), float32] */
}

def @func_2698() -> (Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) {
  @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */
}

def @func_3283() -> Tensor[(1183), float64] {
  @func_3281() /* ty=Tensor[(1183), float64] */
}

def @func_5268() -> (Tensor[(1183), float32], Tensor[(6, 10, 7), float64], Tensor[(1536), float64], Tensor[(32), float32]) {
  %508 = @func_4516() /* ty=(Tensor[(1183), float64],) */;
  %509 = %508.0;
  %510 = cast(%509, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %511 = cast(meta[relay.Constant][25] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %512 = cast(meta[relay.Constant][26] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %513 = reshape(%511, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
  %514 = reshape(%512, newshape=[2, 16]) /* ty=Tensor[(2, 16), float32] */;
  %515 = @func_2261(%513, %514) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(8, 16, 12), float32], Tensor[(6, 10, 7), float64]) */;
  %516 = acos(%510) /* ty=Tensor[(1183), float32] */;
  %517 = %515.0;
  (%516, %517, meta[relay.Constant][25] /* ty=Tensor[(1536), float64] */, meta[relay.Constant][26] /* ty=Tensor[(32), float32] */)
}

def @func_6054() -> (Tensor[(1183), float64], Tensor[(1183), float64], Tensor[(17745), float32], Tensor[(13, 8, 3), float32]) {
  %527 = fn () -> (Tensor[(1183), float64], Tensor[(1183), float64], Tensor[(17745), float32], Tensor[(13, 8, 3), float32]) {
    %518 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
    %519 = @func_4830() /* ty=(Tensor[(1183), float64], Tensor[(507, 35), float32], Tensor[(17745), float32]) */;
    %520 = %519.2;
    %521 = cast(%520, dtype="float32") /* ty=Tensor[(17745), float32] */;
    %522 = reshape(%521, newshape=[15, 1183]) /* ty=Tensor[(15, 1183), float32] */;
    %523 = @func_2856(%522) /* ty=(Tensor[(15, 1183), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
    %524 = @func_3281() /* ty=Tensor[(1183), float64] */;
    %525 = %518.1;
    %526 = %523.1;
    (%524, %525, %520, %526)
  };
  %527() /* ty=(Tensor[(1183), float64], Tensor[(1183), float64], Tensor[(17745), float32], Tensor[(13, 8, 3), float32]) */
}

def @func_5372(%var_5363: uint64, %var_5364: Tensor[(32), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(1536), float64], uint64, Tensor[(32), float32]) {
  %528 = @func_3347() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %529 = cast(%var_5363, dtype="uint64") /* ty=uint64 */;
  %530 = cast(%var_5364, dtype="float32") /* ty=Tensor[(32), float32] */;
  %531 = reshape(%529, newshape=[]) /* ty=uint64 */;
  %532 = reshape(%530, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %533 = @func_2311(%531, %532) /* ty=(Tensor[(7, 7, 1), uint64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(32), float32]) */;
  %534 = %528.3;
  %535 = %533.2;
  (%534, %535, %var_5363, %var_5364)
}

def @func_3629() -> (Tensor[(1183), float64], Tensor[(1, 1183), float32]) {
  %541 = fn () -> (Tensor[(1183), float64], Tensor[(1, 1183), float32]) {
    %536 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
    %537 = @func_3470() /* ty=Tensor[(1, 1183), float32] */;
    %538 = cast(%537, dtype="float32") /* ty=Tensor[(1, 1183), float32] */;
    %539 = %536.1;
    %540 = cos(%538) /* ty=Tensor[(1, 1183), float32] */;
    (%539, %540)
  };
  %541() /* ty=(Tensor[(1183), float64], Tensor[(1, 1183), float32]) */
}

def @func_2859(%var_2857: Tensor[(15, 1183), float32]) -> (Tensor[(15, 1183), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) {
  @func_2856(%var_2857) /* ty=(Tensor[(15, 1183), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */
}

def @func_2956() -> Tensor[(13, 8, 3), float32] {
  @func_2954() /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_9191() -> Tensor[(13, 8, 3), float32] {
  @func_6799() /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_4293() -> (Tensor[(13, 8, 3), float32],) {
  @func_4291() /* ty=(Tensor[(13, 8, 3), float32],) */
}

def @func_8762() -> (Tensor[(1, 1183), float32], Tensor[(1183), float32], Tensor[(15, 1183), bool]) {
  %547 = fn () -> (Tensor[(1, 1183), float32], Tensor[(1183), float32], Tensor[(15, 1183), bool]) {
    %542 = @func_8351() /* ty=(Tensor[(1, 1183), float32],) */;
    %543 = @func_4314() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
    %544 = %542.0;
    %545 = @func_6965() /* ty=Tensor[(1183), float32] */;
    %546 = %543.1;
    (%544, %545, %546)
  };
  %547() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float32], Tensor[(15, 1183), bool]) */
}

def @func_9149(%var_9146: Tensor[(432), uint32], %var_9147: Tensor[(16, 2), float32], %var_9148: Tensor[(1536), float64]) -> (Tensor[(13, 13, 7), float64], Tensor[(4, 12, 9), uint32], Tensor[(432), uint32], Tensor[(13, 8, 3), float32], Tensor[(16, 2), float32], Tensor[(1536), float64], Tensor[(9, 11, 5), bool], Tensor[(13, 8, 3), float32]) {
  %567 = fn (%var_9101: Tensor[(432), uint32], %var_9104: Tensor[(16, 2), float32], %var_9105: Tensor[(1536), float64]) -> (Tensor[(13, 13, 7), float64], Tensor[(4, 12, 9), uint32], Tensor[(432), uint32], Tensor[(13, 8, 3), float32], Tensor[(16, 2), float32], Tensor[(1536), float64], Tensor[(9, 11, 5), bool], Tensor[(13, 8, 3), float32]) {
    %548 = @func_5574() /* ty=(Tensor[(13, 13, 7), float64],) */;
    %549 = cast(%var_9101, dtype="uint32") /* ty=Tensor[(432), uint32] */;
    %550 = cast(%var_9101, dtype="uint32") /* ty=Tensor[(432), uint32] */;
    %551 = reshape(%549, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint32] */;
    %552 = reshape(%550, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint32] */;
    %553 = @func_6023(%551, %552) /* ty=(Tensor[(4, 12, 9), uint32],) */;
    %554 = %548.0;
    %555 = cast(%554, dtype="float32") /* ty=Tensor[(13, 13, 7), float32] */;
    %556 = cast(%var_9104, dtype="float32") /* ty=Tensor[(16, 2), float32] */;
    %557 = cast(%var_9105, dtype="float64") /* ty=Tensor[(1536), float64] */;
    %558 = reshape(%555, newshape=[1, 1183]) /* ty=Tensor[(1, 1183), float32] */;
    %559 = reshape(%556, newshape=[32]) /* ty=Tensor[(32), float32] */;
    %560 = reshape(%557, newshape=[64, 24]) /* ty=Tensor[(64, 24), float64] */;
    %561 = @func_5028(%558, %559, %560) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(?, 1183), float64], Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(17745), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(13, 8, 3), float32], uint64, Tensor[(32), float32], Tensor[(64, 24), float64]) */;
    %562 = @func_7277() /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 4), float32], Tensor[(1183), float64]) */;
    %563 = %553.0;
    %564 = %561.7;
    %565 = %562.0;
    %566 = @func_2954() /* ty=Tensor[(13, 8, 3), float32] */;
    (%554, %563, %var_9101, %564, %var_9104, %var_9105, %565, %566)
  };
  %567(%var_9146, %var_9147, %var_9148) /* ty=(Tensor[(13, 13, 7), float64], Tensor[(4, 12, 9), uint32], Tensor[(432), uint32], Tensor[(13, 8, 3), float32], Tensor[(16, 2), float32], Tensor[(1536), float64], Tensor[(9, 11, 5), bool], Tensor[(13, 8, 3), float32]) */
}

def @func_4229(%var_4228: Tensor[(8, 1183), float32]) -> (Tensor[(8, 1183), float32],) {
  %580 = fn (%var_4199: Tensor[(8, 1183), float32]) -> (Tensor[(8, 1183), float32],) {
    %568 = @func_3470() /* ty=Tensor[(1, 1183), float32] */;
    %569 = cast(%568, dtype="float32") /* ty=Tensor[(1, 1183), float32] */;
    %570 = exp(%569) /* ty=Tensor[(1, 1183), float32] */;
    %571 = cast(%570, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
    %572 = cast(%var_4199, dtype="bool") /* ty=Tensor[(8, 1183), bool] */;
    %573 = less(%571, %572) /* ty=Tensor[(8, 1183), bool] */;
    %574 = cast(%573, dtype="float32") /* ty=Tensor[(8, 1183), float32] */;
    %575 = rsqrt(%574) /* ty=Tensor[(8, 1183), float32] */;
    %576 = cast(%575, dtype="float64") /* ty=Tensor[(8, 1183), float64] */;
    %577 = acosh(%576) /* ty=Tensor[(8, 1183), float64] */;
    %578 = cast(%577, dtype="float32") /* ty=Tensor[(8, 1183), float32] */;
    %579 = cosh(%578) /* ty=Tensor[(8, 1183), float32] */;
    (%579,)
  };
  %580(%var_4228) /* ty=(Tensor[(8, 1183), float32],) */
}

def @func_5376(%var_5374: uint64, %var_5375: Tensor[(32), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(1536), float64], uint64, Tensor[(32), float32]) {
  @func_5372(%var_5374, %var_5375) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1536), float64], uint64, Tensor[(32), float32]) */
}

def @func_4517() -> (Tensor[(1183), float64],) {
  %582 = fn () -> (Tensor[(1183), float64],) {
    %581 = @func_3281() /* ty=Tensor[(1183), float64] */;
    (%581,)
  };
  %582() /* ty=(Tensor[(1183), float64],) */
}

def @func_2820() -> (Tensor[(1, 1183), float32], Tensor[(1183), float64]) {
  %587 = fn () -> (Tensor[(1, 1183), float32], Tensor[(1183), float64]) {
    %583 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
    %584 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
    %585 = %583.2;
    %586 = %584.1;
    (%585, %586)
  };
  %587() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */
}

def @func_8449() -> Tensor[(1183), float32] {
  %588 = @func_3281() /* ty=Tensor[(1183), float64] */;
  %589 = cast(%588, dtype="float32") /* ty=Tensor[(1183), float32] */;
  sigmoid(%589) /* ty=Tensor[(1183), float32] */
}

def @func_6577() -> (Tensor[(1183), float64], Tensor[(13, 13, 7), float64], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) {
  @func_6575() /* ty=(Tensor[(1183), float64], Tensor[(13, 13, 7), float64], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) */
}

def @func_6026(%var_6024: Tensor[(4, 12, 9), uint32], %var_6025: Tensor[(4, 12, 9), uint32]) -> (Tensor[(4, 12, 9), uint32],) {
  %595 = fn (%var_5999: Tensor[(4, 12, 9), uint32], %var_6000: Tensor[(4, 12, 9), uint32]) -> (Tensor[(4, 12, 9), uint32],) {
    %590 = cast(%var_6000, dtype="uint32") /* ty=Tensor[(4, 12, 9), uint32] */;
    %591 = shape_of(%var_5999, dtype="int32") /* ty=Tensor[(3), int32] */;
    %592 = cast(%var_5999, dtype="uint32") /* ty=Tensor[(4, 12, 9), uint32] */;
    %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %594 = left_shift(%592, %593) /* ty=Tensor[(4, 12, 9), uint32] */;
    (%594,)
  };
  %595(%var_6024, %var_6025) /* ty=(Tensor[(4, 12, 9), uint32],) */
}

def @func_6967() -> Tensor[(1183), float32] {
  @func_6965() /* ty=Tensor[(1183), float32] */
}

def @func_5953() -> (Tensor[(1183), float32], Tensor[(1183), float64]) {
  %606 = fn () -> (Tensor[(1183), float32], Tensor[(1183), float64]) {
    %596 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
    %597 = %596.1;
    %598 = cast(%597, dtype="float64") /* ty=Tensor[(1183), float64] */;
    %599 = erf(%598) /* ty=Tensor[(1183), float64] */;
    %600 = cast(%599, dtype="float32") /* ty=Tensor[(1183), float32] */;
    %601 = cast(%599, dtype="float64") /* ty=Tensor[(1183), float64] */;
    %602 = reshape(%601, newshape=[1183]) /* ty=Tensor[(1183), float64] */;
    %603 = @func_5553(%602) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(1183), float64]) */;
    %604 = asinh(%600) /* ty=Tensor[(1183), float32] */;
    %605 = %603.2;
    (%604, %605)
  };
  %606() /* ty=(Tensor[(1183), float32], Tensor[(1183), float64]) */
}

def @func_8161() -> (Tensor[(13, 8, 3), float32],) {
  @func_8159() /* ty=(Tensor[(13, 8, 3), float32],) */
}

def @func_8351() -> (Tensor[(1, 1183), float32],) {
  %607 = @func_3470() /* ty=Tensor[(1, 1183), float32] */;
  (%607,)
}

def @func_6834() -> Tensor[(1183), float32] {
  %608 = @func_5268() /* ty=(Tensor[(1183), float32], Tensor[(6, 10, 7), float64], Tensor[(1536), float64], Tensor[(32), float32]) */;
  %608.0
}

def @func_5032(%var_5029: Tensor[(1, 1183), float32], %var_5030: Tensor[(32), float32], %var_5031: Tensor[(64, 24), float64]) -> (Tensor[(13, 8, 3), float32], Tensor[(?, 1183), float64], Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(17745), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(13, 8, 3), float32], uint64, Tensor[(32), float32], Tensor[(64, 24), float64]) {
  %642 = fn (%var_4990: Tensor[(1, 1183), float32], %var_5005: Tensor[(32), float32], %var_5016: Tensor[(64, 24), float64]) -> (Tensor[(13, 8, 3), float32], Tensor[(?, 1183), float64], Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(17745), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(13, 8, 3), float32], uint64, Tensor[(32), float32], Tensor[(64, 24), float64]) {
    %609 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
    %610 = @func_3545() /* ty=(Tensor[(2, 16), float32], Tensor[(1, 1183), float32]) */;
    %611 = %610.1;
    %612 = cast(%var_4990, dtype="float64") /* ty=Tensor[(1, 1183), float64] */;
    %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(2), int32] */;
    %614 = cast(%611, dtype="float64") /* ty=Tensor[(1, 1183), float64] */;
    %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %616 = cast(%var_5005, dtype="float32") /* ty=Tensor[(32), float32] */;
    %617 = cast(meta[relay.Constant][27] /* ty=Tensor[(17745), float32] */, dtype="float32") /* ty=Tensor[(17745), float32] */;
    %618 = reshape(%616, newshape=[1, 32]) /* ty=Tensor[(1, 32), float32] */;
    %619 = reshape(%617, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
    %620 = @func_3113(%618, %619) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(1, 32), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(9, 11, 5), bool], Tensor[(1536), float64], Tensor[(17745), bool]) */;
    %621 = @func_3628() /* ty=(Tensor[(1183), float64], Tensor[(1, 1183), float32]) */;
    %622 = cast(%var_4990, dtype="float32") /* ty=Tensor[(1, 1183), float32] */;
    %623 = cast(meta[relay.Constant][28] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %624 = cast(meta[relay.Constant][27] /* ty=Tensor[(17745), float32] */, dtype="float32") /* ty=Tensor[(17745), float32] */;
    %625 = reshape(%623, newshape=[]) /* ty=uint64 */;
    %626 = reshape(%624, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
    %627 = @func_4649(%625, %626) /* ty=(Tensor[(32), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(7, 7, 1183), int64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(13, 8, 3), float32], Tensor[(17745), float64], Tensor[(32), float32]) */;
    %628 = cast(%var_5016, dtype="float64") /* ty=Tensor[(64, 24), float64] */;
    %629 = cast(%var_5005, dtype="float32") /* ty=Tensor[(32), float32] */;
    %630 = cast(meta[relay.Constant][27] /* ty=Tensor[(17745), float32] */, dtype="float32") /* ty=Tensor[(17745), float32] */;
    %631 = reshape(%628, newshape=[4, 384]) /* ty=Tensor[(4, 384), float64] */;
    %632 = reshape(%629, newshape=[32]) /* ty=Tensor[(32), float32] */;
    %633 = reshape(%630, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
    %634 = @func_2934(%631, %632, %633) /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 16, 12), float32], Tensor[(4, 384), float64], Tensor[(32), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 1, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) */;
    %635 = %609.0;
    %636 = floor_mod(%614, %615) /* ty=Tensor[(?, 1183), float64] */;
    %637 = %620.5;
    %638 = %621.0;
    %639 = asin(%622) /* ty=Tensor[(1, 1183), float32] */;
    %640 = %627.6;
    %641 = %634.3;
    (%635, %636, %637, %var_5005, meta[relay.Constant][27] /* ty=Tensor[(17745), float32] */, %638, %639, %640, meta[relay.Constant][28] /* ty=uint64 */, %641, %var_5016)
  };
  %642(%var_5029, %var_5030, %var_5031) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(?, 1183), float64], Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(17745), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(13, 8, 3), float32], uint64, Tensor[(32), float32], Tensor[(64, 24), float64]) */
}

def @func_7503(%var_7501: Tensor[(7, 1183), float32]) -> (Tensor[(7, 1183), bool], Tensor[(13, 8, 3), float64], Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(32, 1), float32], Tensor[(17745), float32]) {
  @func_7500(%var_7501) /* ty=(Tensor[(7, 1183), bool], Tensor[(13, 8, 3), float64], Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(32, 1), float32], Tensor[(17745), float32]) */
}

def @func_3117(%var_3115: Tensor[(1, 32), float32], %var_3116: Tensor[(17745), float32]) -> (Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(1, 32), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(9, 11, 5), bool], Tensor[(1536), float64], Tensor[(17745), bool]) {
  @func_3113(%var_3115, %var_3116) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(1, 32), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(9, 11, 5), bool], Tensor[(1536), float64], Tensor[(17745), bool]) */
}

def @func_5980() -> Tensor[(1183), float64] {
  @func_5978() /* ty=Tensor[(1183), float64] */
}

def @func_5778() -> Tensor[(13, 8, 3), float64] {
  %643 = @func_3347() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %644 = %643.0;
  %645 = cast(%644, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  atanh(%645) /* ty=Tensor[(13, 8, 3), float64] */
}

def @func_4301() -> (Tensor[(13, 8, 3), float32],) {
  @func_4299() /* ty=(Tensor[(13, 8, 3), float32],) */
}

def @func_5227(%var_5207: Tensor[(32, 1), float32], %var_5208: Tensor[(18928), float32]) -> (Tensor[(1, 1183), float64], Tensor[(17745), float32], Tensor[(32, 1), float32], Tensor[(18928), float32], Tensor[(2, 16), float32]) {
  %646 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %647 = %646.0;
  %648 = cast(%647, dtype="float64") /* ty=Tensor[(1, 1183), float64] */;
  %649 = cast(%var_5207, dtype="float32") /* ty=Tensor[(32, 1), float32] */;
  %650 = cast(%var_5208, dtype="float32") /* ty=Tensor[(18928), float32] */;
  %651 = reshape(%649, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %652 = reshape(%650, newshape=[16, 1183]) /* ty=Tensor[(16, 1183), float32] */;
  %653 = @func_3987(%651, %652) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 96), float64], Tensor[(32), float32], Tensor[(17745), float32], Tensor[(16, 1183), bool]) */;
  %654 = @func_3545() /* ty=(Tensor[(2, 16), float32], Tensor[(1, 1183), float32]) */;
  %655 = tan(%648) /* ty=Tensor[(1, 1183), float64] */;
  %656 = %653.4;
  %657 = %654.0;
  (%655, %656, %var_5207, %var_5208, %657)
}

def @func_5063() -> Tensor[(1, 1183), float32] {
  %658 = @func_3628() /* ty=(Tensor[(1183), float64], Tensor[(1, 1183), float32]) */;
  %658.1
}

def @func_8383() -> (Tensor[(9, 11, 5), bool], Tensor[(1183), float32], Tensor[(1, 1183), float32], Tensor[(1, 1183), float32], Tensor[(420), float32]) {
  @func_8381() /* ty=(Tensor[(9, 11, 5), bool], Tensor[(1183), float32], Tensor[(1, 1183), float32], Tensor[(1, 1183), float32], Tensor[(420), float32]) */
}

def @func_7278() -> (Tensor[(9, 11, 5), bool], Tensor[(8, 4), float32], Tensor[(1183), float64]) {
  %672 = fn () -> (Tensor[(9, 11, 5), bool], Tensor[(8, 4), float32], Tensor[(1183), float64]) {
    %659 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
    %660 = @func_7027() /* ty=(Tensor[(17745, 10), float64], Tensor[(8, 4), float32]) */;
    %661 = @func_4516() /* ty=(Tensor[(1183), float64],) */;
    %662 = %661.0;
    %663 = @func_4419() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
    %664 = %663.1;
    %665 = cast(%664, dtype="float64") /* ty=Tensor[(1183), float64] */;
    %666 = shape_of(%662, dtype="int32") /* ty=Tensor[(1), int32] */;
    %667 = cast(%662, dtype="float64") /* ty=Tensor[(1183), float64] */;
    %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?), float64] */;
    %669 = %659.3;
    %670 = %660.1;
    %671 = floor_mod(%667, %668) /* ty=Tensor[(1183), float64] */;
    (%669, %670, %671)
  };
  %672() /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 4), float32], Tensor[(1183), float64]) */
}

def @func_8353() -> (Tensor[(1, 1183), float32],) {
  @func_8351() /* ty=(Tensor[(1, 1183), float32],) */
}

def @func_6157(%var_6155: uint64, %var_6156: Tensor[(32), float32]) -> (Tensor[(13, 8, 3), float64], Tensor[(2, 16), float32], uint64, Tensor[(32), float32]) {
  @func_6153(%var_6155, %var_6156) /* ty=(Tensor[(13, 8, 3), float64], Tensor[(2, 16), float32], uint64, Tensor[(32), float32]) */
}

def @func_7219() -> Tensor[(1, 1183), float32] {
  @func_7217() /* ty=Tensor[(1, 1183), float32] */
}

def @func_9068() -> (Tensor[(13, 13, 7), float64], Tensor[(9, 7, 2), float32], Tensor[(1183), float64]) {
  %678 = fn () -> (Tensor[(13, 13, 7), float64], Tensor[(9, 7, 2), float32], Tensor[(1183), float64]) {
    %673 = @func_8692() /* ty=(Tensor[(9, 7, 2), float32],) */;
    %674 = @func_8767() /* ty=(Tensor[(1183), float64],) */;
    %675 = @func_8269() /* ty=Tensor[(13, 13, 7), float64] */;
    %676 = %673.0;
    %677 = %674.0;
    (%675, %676, %677)
  };
  %678() /* ty=(Tensor[(13, 13, 7), float64], Tensor[(9, 7, 2), float32], Tensor[(1183), float64]) */
}

def @func_7558() -> Tensor[(13, 8, 3), float32] {
  %679 = fn () -> Tensor[(13, 8, 3), float32] {
    @func_3572() /* ty=Tensor[(13, 8, 3), float32] */
  };
  %679() /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_5719(%var_5693: Tensor[(17745), float32]) -> (Tensor[(1, 1183), float32], Tensor[(15, 1183), bool], Tensor[(17745), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) {
  %680 = @func_3545() /* ty=(Tensor[(2, 16), float32], Tensor[(1, 1183), float32]) */;
  %681 = cast(%var_5693, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %682 = reshape(%681, newshape=[15, 1183]) /* ty=Tensor[(15, 1183), float32] */;
  %683 = @func_2856(%682) /* ty=(Tensor[(15, 1183), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
  %684 = @func_4314() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
  %685 = @func_4116() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %686 = %680.1;
  %687 = %683.3;
  %688 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  %689 = %684.0;
  %690 = %685.0;
  (%686, %687, %var_5693, %688, %689, %690)
}

def @func_134(%var_70: Tensor[(13, 13, 7), float64]) -> Tensor[(13, 13, 7), float64] {
  %691 = cast(%var_70, dtype="float64") /* ty=Tensor[(13, 13, 7), float64] */;
  %692 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(13, 13, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(13, 13, 7), float64] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%693, %694) /* ty=Tensor[(13, 13, 7), float64] */
}

def @func_7981() -> (Tensor[(1183), float64],) {
  %697 = fn () -> (Tensor[(1183), float64],) {
    %695 = @func_4516() /* ty=(Tensor[(1183), float64],) */;
    %696 = %695.0;
    (%696,)
  };
  %697() /* ty=(Tensor[(1183), float64],) */
}

def @func_8199() -> Tensor[(6, 10, 7), float64] {
  @func_7180() /* ty=Tensor[(6, 10, 7), float64] */
}

def @func_2547() -> Tensor[(13, 8, 3), float32] {
  %704 = fn () -> Tensor[(13, 8, 3), float32] {
    %698 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 8, 3), float64] */, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
    %699 = acosh(%698) /* ty=Tensor[(13, 8, 3), float64] */;
    %700 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 8, 3), float64] */, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
    %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
    %702 = cast(%699, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
    %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%702, %703) /* ty=Tensor[(13, 8, 3), float32] */
  };
  %704() /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_9606() -> (Tensor[(1, 1183), float64], Tensor[(1183), float32]) {
  @func_9604() /* ty=(Tensor[(1, 1183), float64], Tensor[(1183), float32]) */
}

def @func_6575() -> (Tensor[(1183), float64], Tensor[(13, 13, 7), float64], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) {
  %705 = @func_5978() /* ty=Tensor[(1183), float64] */;
  %706 = cast(%705, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %707 = reshape(%706, newshape=[13, 13, 7]) /* ty=Tensor[(13, 13, 7), float64] */;
  %708 = cast(meta[relay.Constant][31] /* ty=Tensor[(17745), float32] */, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %709 = reshape(%708, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
  %710 = @func_5719(%709) /* ty=(Tensor[(1, 1183), float32], Tensor[(15, 1183), bool], Tensor[(17745), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) */;
  %711 = @func_134(%707) /* ty=Tensor[(13, 13, 7), float64] */;
  %712 = %710.3;
  (%705, %711, %712, meta[relay.Constant][31] /* ty=Tensor[(17745), float32] */)
}

def @func_10412() -> (Tensor[(13, 8, 3), float32], Tensor[(17745, 1), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), bool], Tensor[(1183), float32]) {
  %713 = @func_3735() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %714 = @func_6834() /* ty=Tensor[(1183), float32] */;
  %715 = cast(%714, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %716 = cosh(%715) /* ty=Tensor[(1183), float32] */;
  %717 = cast(%714, dtype="bool") /* ty=Tensor[(1183), bool] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(1), int32] */;
  %719 = cast(%716, dtype="bool") /* ty=Tensor[(1183), bool] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?), bool] */;
  %721 = @func_9604() /* ty=(Tensor[(1, 1183), float64], Tensor[(1183), float32]) */;
  %722 = %713.0;
  %723 = @func_3271() /* ty=Tensor[(17745, 1), float32] */;
  %724 = @func_9191() /* ty=Tensor[(13, 8, 3), float32] */;
  %725 = equal(%719, %720) /* ty=Tensor[(1183), bool] */;
  %726 = %721.1;
  (%722, %723, %724, %725, %726)
}

def @func_5780() -> Tensor[(13, 8, 3), float64] {
  @func_5778() /* ty=Tensor[(13, 8, 3), float64] */
}

def @func_5655(%var_5653: Tensor[(32), float32], %var_5654: Tensor[(18928), float32]) -> (Tensor[(1, 1183), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(17745), float32], Tensor[(32), float32], Tensor[(18928), float32]) {
  %739 = fn (%var_5648: Tensor[(32), float32], %var_5649: Tensor[(18928), float32]) -> (Tensor[(1, 1183), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(17745), float32], Tensor[(32), float32], Tensor[(18928), float32]) {
    %727 = @func_2888() /* ty=(Tensor[(1, 1183), float32], Tensor[(32), float32], Tensor[(16, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) */;
    %728 = @func_4299() /* ty=(Tensor[(13, 8, 3), float32],) */;
    %729 = @func_3628() /* ty=(Tensor[(1183), float64], Tensor[(1, 1183), float32]) */;
    %730 = cast(%var_5648, dtype="float32") /* ty=Tensor[(32), float32] */;
    %731 = cast(%var_5649, dtype="float32") /* ty=Tensor[(18928), float32] */;
    %732 = reshape(%730, newshape=[32, 1]) /* ty=Tensor[(32, 1), float32] */;
    %733 = reshape(%731, newshape=[18928]) /* ty=Tensor[(18928), float32] */;
    %734 = @func_5227(%732, %733) /* ty=(Tensor[(1, 1183), float64], Tensor[(17745), float32], Tensor[(32, 1), float32], Tensor[(18928), float32], Tensor[(2, 16), float32]) */;
    %735 = %727.0;
    %736 = %728.0;
    %737 = %729.0;
    %738 = %734.1;
    (%735, %736, %737, %738, %var_5648, %var_5649)
  };
  %739(%var_5653, %var_5654) /* ty=(Tensor[(1, 1183), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(17745), float32], Tensor[(32), float32], Tensor[(18928), float32]) */
}

def @func_1148(%var_1146: Tensor[(9, 11, 5), uint64]) -> Tensor[(9, 11, 5), bool] {
  @func_1145(%var_1146) /* ty=Tensor[(9, 11, 5), bool] */
}

def @func_2577() -> (Tensor[(13, 8, 3), float32],) {
  @func_2575() /* ty=(Tensor[(13, 8, 3), float32],) */
}

def @func_5978() -> Tensor[(1183), float64] {
  %740 = @func_4419() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %740.1
}

def @func_8923() -> (Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(1183), float32]) {
  @func_8921() /* ty=(Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(1183), float32]) */
}

def @func_4912() -> (Tensor[(13, 13, 7), float64], Tensor[(17745, 1), float64]) {
  %746 = fn () -> (Tensor[(13, 13, 7), float64], Tensor[(17745, 1), float64]) {
    %741 = @func_4684() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(32), float32], Tensor[(8, 4), float32], Tensor[(17745, 1), float32], Tensor[(16, 1, 2), float32]) */;
    %742 = @func_3271() /* ty=Tensor[(17745, 1), float32] */;
    %743 = cast(%742, dtype="float64") /* ty=Tensor[(17745, 1), float64] */;
    %744 = %741.1;
    %745 = sigmoid(%743) /* ty=Tensor[(17745, 1), float64] */;
    (%744, %745)
  };
  %746() /* ty=(Tensor[(13, 13, 7), float64], Tensor[(17745, 1), float64]) */
}

def @func_9530(%var_9528: Tensor[(13, 15, 14), float32]) -> Tensor[(13, 15, 14), float32] {
  @func_9527(%var_9528) /* ty=Tensor[(13, 15, 14), float32] */
}

def @func_6352() -> (Tensor[(1, 1183), float32], Tensor[(1183), float64]) {
  @func_6350() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */
}

def @func_4388() -> Tensor[(495), uint64] {
  @func_4386() /* ty=Tensor[(495), uint64] */
}

def @func_8044(%var_8043: Tensor[(17745), float32]) -> Tensor[(17745), float32] {
  %753 = fn (%var_8036: Tensor[(17745), float32]) -> Tensor[(17745), float32] {
    %747 = @func_6575() /* ty=(Tensor[(1183), float64], Tensor[(13, 13, 7), float64], Tensor[(13, 8, 3), float32], Tensor[(17745), float32]) */;
    %748 = %747.3;
    %749 = cast(%var_8036, dtype="float32") /* ty=Tensor[(17745), float32] */;
    %750 = shape_of(%748, dtype="int32") /* ty=Tensor[(1), int32] */;
    %751 = cast(%748, dtype="float32") /* ty=Tensor[(17745), float32] */;
    %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?), float32] */;
    power(%751, %752) /* ty=Tensor[(17745), float32] */
  };
  %753(%var_8043) /* ty=Tensor[(17745), float32] */
}

def @func_5310() -> (Tensor[(9, 11, 5), bool], Tensor[(1, 1183), float64], Tensor[(1183), float64], Tensor[(495), uint64], Tensor[(13, 8, 3), float32]) {
  %763 = fn () -> (Tensor[(9, 11, 5), bool], Tensor[(1, 1183), float64], Tensor[(1183), float64], Tensor[(495), uint64], Tensor[(13, 8, 3), float32]) {
    %754 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
    %755 = cast(meta[relay.Constant][32] /* ty=Tensor[(1183), float64] */, dtype="float64") /* ty=Tensor[(1183), float64] */;
    %756 = reshape(%755, newshape=[1, 1183]) /* ty=Tensor[(1, 1183), float64] */;
    %757 = @func_589(%756) /* ty=(Tensor[(12, 14, 8), int8], Tensor[(12, 14, 8), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */;
    %758 = @func_2888() /* ty=(Tensor[(1, 1183), float32], Tensor[(32), float32], Tensor[(16, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) */;
    %759 = %754.3;
    %760 = %757.3;
    %761 = @func_4386() /* ty=Tensor[(495), uint64] */;
    %762 = %758.3;
    (%759, %760, meta[relay.Constant][32] /* ty=Tensor[(1183), float64] */, %761, %762)
  };
  %763() /* ty=(Tensor[(9, 11, 5), bool], Tensor[(1, 1183), float64], Tensor[(1183), float64], Tensor[(495), uint64], Tensor[(13, 8, 3), float32]) */
}

def @func_9527(%var_9523: Tensor[(13, 15, 14), float32]) -> Tensor[(13, 15, 14), float32] {
  %764 = cast(%var_9523, dtype="float32") /* ty=Tensor[(13, 15, 14), float32] */;
  asinh(%764) /* ty=Tensor[(13, 15, 14), float32] */
}

def @func_6604(%var_6602: Tensor[(32), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(6, 10, 7), float64], Tensor[(1536), float64], Tensor[(32), float32]) {
  @func_6601(%var_6602) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(6, 10, 7), float64], Tensor[(1536), float64], Tensor[(32), float32]) */
}

def @func_3273() -> Tensor[(17745, 1), float32] {
  @func_3271() /* ty=Tensor[(17745, 1), float32] */
}

def @func_9778() -> (Tensor[(3, 13, 1), uint32], Tensor[(1183), float64], Tensor[(3, 13, 1), float32]) {
  %772 = fn () -> (Tensor[(3, 13, 1), uint32], Tensor[(1183), float64], Tensor[(3, 13, 1), float32]) {
    %765 = cast(meta[relay.Constant][33] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %766 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 13, 1), uint32] */, dtype="uint32") /* ty=Tensor[(3, 13, 1), uint32] */;
    %767 = @func_4830() /* ty=(Tensor[(1183), float64], Tensor[(507, 35), float32], Tensor[(17745), float32]) */;
    %768 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 13, 1), uint32] */, dtype="float32") /* ty=Tensor[(3, 13, 1), float32] */;
    %769 = bitwise_and(%765, %766) /* ty=Tensor[(3, 13, 1), uint32] */;
    %770 = %767.0;
    %771 = asin(%768) /* ty=Tensor[(3, 13, 1), float32] */;
    (%769, %770, %771)
  };
  %772() /* ty=(Tensor[(3, 13, 1), uint32], Tensor[(1183), float64], Tensor[(3, 13, 1), float32]) */
}

def @func_9643(%var_9641: Tensor[(12, 10, 10), float64], %var_9642: Tensor[(12, 10, 10), float64]) -> (Tensor[(12, 10, 10), bool],) {
  %778 = fn (%var_9610: Tensor[(12, 10, 10), float64], %var_9611: Tensor[(12, 10, 10), float64]) -> (Tensor[(12, 10, 10), bool],) {
    %773 = cast(%var_9611, dtype="bool") /* ty=Tensor[(12, 10, 10), bool] */;
    %774 = shape_of(%var_9610, dtype="int32") /* ty=Tensor[(3), int32] */;
    %775 = cast(%var_9610, dtype="bool") /* ty=Tensor[(12, 10, 10), bool] */;
    %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %777 = greater_equal(%775, %776) /* ty=Tensor[(12, 10, 10), bool] */;
    (%777,)
  };
  %778(%var_9641, %var_9642) /* ty=(Tensor[(12, 10, 10), bool],) */
}

def @func_3458(%var_3397: uint64, %var_3410: Tensor[(15, 1183), float32]) -> (Tensor[(32), float32], uint64, Tensor[(32), float32], Tensor[(15, 1183), bool], Tensor[(1, 1183), float32], Tensor[(?, 1183), int16], Tensor[(8, 16, 12), float32], Tensor[(1536), float64]) {
  %779 = cast(%var_3397, dtype="uint64") /* ty=uint64 */;
  %780 = cast(meta[relay.Constant][35] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %781 = reshape(%779, newshape=[]) /* ty=uint64 */;
  %782 = reshape(%780, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %783 = @func_2311(%781, %782) /* ty=(Tensor[(7, 7, 1), uint64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(32), float32]) */;
  %784 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
  %785 = %784.2;
  %786 = cast(%785, dtype="bool") /* ty=Tensor[(1, 1183), bool] */;
  %787 = cast(%var_3410, dtype="bool") /* ty=Tensor[(15, 1183), bool] */;
  %788 = @func_2819() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %789 = @func_2995() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool], Tensor[(17745, 1), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */;
  %790 = %789.3;
  %791 = cast(%790, dtype="int16") /* ty=Tensor[(13, 13, 7), int16] */;
  %792 = shape_of(%785, dtype="int32") /* ty=Tensor[(2), int32] */;
  %793 = cast(%785, dtype="int16") /* ty=Tensor[(1, 1183), int16] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %795 = cast(meta[relay.Constant][36] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %796 = %783.3;
  %797 = cast(%796, dtype="float32") /* ty=Tensor[(32), float32] */;
  %798 = reshape(%795, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
  %799 = reshape(%797, newshape=[2, 16]) /* ty=Tensor[(2, 16), float32] */;
  %800 = @func_2261(%798, %799) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(8, 16, 12), float32], Tensor[(6, 10, 7), float64]) */;
  %801 = less_equal(%786, %787) /* ty=Tensor[(15, 1183), bool] */;
  %802 = %788.0;
  %803 = bitwise_or(%793, %794) /* ty=Tensor[(?, 1183), int16] */;
  %804 = %800.4;
  (%796, %var_3397, meta[relay.Constant][35] /* ty=Tensor[(32), float32] */, %801, %802, %803, %804, meta[relay.Constant][36] /* ty=Tensor[(1536), float64] */)
}

def @func_4684() -> (Tensor[(13, 8, 3), float32], Tensor[(13, 13, 7), float64], Tensor[(32), float32], Tensor[(8, 4), float32], Tensor[(17745, 1), float32], Tensor[(16, 1, 2), float32]) {
  %805 = @func_3735() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %806 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 4), float32] */, dtype="float32") /* ty=Tensor[(8, 4), float32] */;
  %807 = cast(meta[relay.Constant][38] /* ty=Tensor[(17745, 1), float32] */, dtype="float32") /* ty=Tensor[(17745, 1), float32] */;
  %808 = reshape(%806, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %809 = reshape(%807, newshape=[17745]) /* ty=Tensor[(17745), float32] */;
  %810 = @func_4255(%808, %809) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(17745), float32]) */;
  %811 = %810.2;
  %812 = cast(%811, dtype="float32") /* ty=Tensor[(32), float32] */;
  %813 = reshape(%812, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %814 = @func_2738(%813) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) */;
  %815 = %805.0;
  %816 = @func_4328() /* ty=Tensor[(13, 13, 7), float64] */;
  %817 = %814.1;
  (%815, %816, %811, meta[relay.Constant][37] /* ty=Tensor[(8, 4), float32] */, meta[relay.Constant][38] /* ty=Tensor[(17745, 1), float32] */, %817)
}

def @func_9604() -> (Tensor[(1, 1183), float64], Tensor[(1183), float32]) {
  %818 = @func_6350() /* ty=(Tensor[(1, 1183), float32], Tensor[(1183), float64]) */;
  %819 = %818.0;
  %820 = cast(%819, dtype="float64") /* ty=Tensor[(1, 1183), float64] */;
  %821 = asinh(%820) /* ty=Tensor[(1, 1183), float64] */;
  %822 = @func_6965() /* ty=Tensor[(1183), float32] */;
  (%821, %822)
}

def @func_592(%var_590: Tensor[(1, 1183), float64]) -> (Tensor[(12, 14, 8), int8], Tensor[(12, 14, 8), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) {
  @func_589(%var_590) /* ty=(Tensor[(12, 14, 8), int8], Tensor[(12, 14, 8), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */
}

def @func_4555() -> Tensor[(13, 8, 3), float32] {
  %823 = fn () -> Tensor[(13, 8, 3), float32] {
    @func_2546() /* ty=Tensor[(13, 8, 3), float32] */
  };
  %823() /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_8612(%var_8593: Tensor[(6, 3, 9), float32]) -> (Tensor[(6, 3, 9), float32], Tensor[(13, 8, 3), float32]) {
  %824 = cast(%var_8593, dtype="float32") /* ty=Tensor[(6, 3, 9), float32] */;
  %825 = asinh(%824) /* ty=Tensor[(6, 3, 9), float32] */;
  %826 = @func_2954() /* ty=Tensor[(13, 8, 3), float32] */;
  (%825, %826)
}

def @func_3348() -> (Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) {
  %836 = fn () -> (Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) {
    %827 = @func_2888() /* ty=(Tensor[(1, 1183), float32], Tensor[(32), float32], Tensor[(16, 2), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) */;
    %828 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 16), float32] */, dtype="float32") /* ty=Tensor[(2, 16), float32] */;
    %829 = reshape(%828, newshape=[32]) /* ty=Tensor[(32), float32] */;
    %830 = @func_2738(%829) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) */;
    %831 = @func_2696() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) */;
    %832 = %827.3;
    %833 = %830.1;
    %834 = %831.0;
    %835 = @func_3281() /* ty=Tensor[(1183), float64] */;
    (%832, %833, meta[relay.Constant][39] /* ty=Tensor[(2, 16), float32] */, %834, %835)
  };
  %836() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */
}

def @func_1464(%var_1463: Tensor[(16, 1, 2), float32]) -> (Tensor[(16, 1, 2), float32],) {
  %839 = fn (%var_1455: Tensor[(16, 1, 2), float32]) -> (Tensor[(16, 1, 2), float32],) {
    %837 = cast(%var_1455, dtype="float32") /* ty=Tensor[(16, 1, 2), float32] */;
    %838 = acos(%837) /* ty=Tensor[(16, 1, 2), float32] */;
    (%838,)
  };
  %839(%var_1463) /* ty=(Tensor[(16, 1, 2), float32],) */
}

def @func_6965() -> Tensor[(1183), float32] {
  %840 = @func_5952() /* ty=(Tensor[(1183), float32], Tensor[(1183), float64]) */;
  %840.0
}

def @func_10137(%var_10136: Tensor[(4, 12, 9), uint32]) -> (Tensor[(13, 8, 3), float32], Tensor[(432), uint32], Tensor[(4, 12, 9), float32], Tensor[(4, 12, 9), float64], Tensor[(13, 8, 3), float64]) {
  %857 = fn (%var_10107: Tensor[(4, 12, 9), uint32]) -> (Tensor[(13, 8, 3), float32], Tensor[(432), uint32], Tensor[(4, 12, 9), float32], Tensor[(4, 12, 9), float64], Tensor[(13, 8, 3), float64]) {
    %841 = @func_4299() /* ty=(Tensor[(13, 8, 3), float32],) */;
    %842 = cast(meta[relay.Constant][40] /* ty=Tensor[(432), uint32] */, dtype="uint32") /* ty=Tensor[(432), uint32] */;
    %843 = cast(meta[relay.Constant][40] /* ty=Tensor[(432), uint32] */, dtype="uint32") /* ty=Tensor[(432), uint32] */;
    %844 = reshape(%842, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint32] */;
    %845 = reshape(%843, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint32] */;
    %846 = @func_6023(%844, %845) /* ty=(Tensor[(4, 12, 9), uint32],) */;
    %847 = %846.0;
    %848 = cast(%var_10107, dtype="float32") /* ty=Tensor[(4, 12, 9), float32] */;
    %849 = shape_of(%847, dtype="int32") /* ty=Tensor[(3), int32] */;
    %850 = cast(%847, dtype="float32") /* ty=Tensor[(4, 12, 9), float32] */;
    %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %852 = cast(%847, dtype="float64") /* ty=Tensor[(4, 12, 9), float64] */;
    %853 = %841.0;
    %854 = floor_divide(%850, %851) /* ty=Tensor[(4, 12, 9), float32] */;
    %855 = cosh(%852) /* ty=Tensor[(4, 12, 9), float64] */;
    %856 = @func_5778() /* ty=Tensor[(13, 8, 3), float64] */;
    (%853, meta[relay.Constant][40] /* ty=Tensor[(432), uint32] */, %854, %855, %856)
  };
  %857(%var_10136) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(432), uint32], Tensor[(4, 12, 9), float32], Tensor[(4, 12, 9), float64], Tensor[(13, 8, 3), float64]) */
}

def @func_4259(%var_4257: Tensor[(32), float32], %var_4258: Tensor[(17745), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(17745), float32]) {
  @func_4255(%var_4257, %var_4258) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(17745), float32]) */
}

def @func_7675(%var_7673: Tensor[(420), float64], %var_7674: Tensor[(17745, 6), bool]) -> (Tensor[(17745, 6), float32], Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(17745, 6), bool], Tensor[(17745, 2), float64], Tensor[(1, 35490), float32]) {
  %884 = fn (%var_7647: Tensor[(420), float64], %var_7649: Tensor[(17745, 6), bool]) -> (Tensor[(17745, 6), float32], Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(17745, 6), bool], Tensor[(17745, 2), float64], Tensor[(1, 35490), float32]) {
    %858 = @func_3271() /* ty=Tensor[(17745, 1), float32] */;
    %859 = cast(%858, dtype="float32") /* ty=Tensor[(17745, 1), float32] */;
    %860 = cos(%859) /* ty=Tensor[(17745, 1), float32] */;
    %861 = cast(%860, dtype="float32") /* ty=Tensor[(17745, 1), float32] */;
    %862 = cast(meta[relay.Constant][41] /* ty=Tensor[(17745, 6), float32] */, dtype="float32") /* ty=Tensor[(17745, 6), float32] */;
    %863 = cast(%var_7647, dtype="float64") /* ty=Tensor[(420), float64] */;
    %864 = reshape(%863, newshape=[6, 10, 7]) /* ty=Tensor[(6, 10, 7), float64] */;
    %865 = @func_339(%864) /* ty=(Tensor[(6, 10, 7), float64],) */;
    %866 = cast(%860, dtype="float64") /* ty=Tensor[(17745, 1), float64] */;
    %867 = acosh(%866) /* ty=Tensor[(17745, 1), float64] */;
    %868 = cast(%867, dtype="bool") /* ty=Tensor[(17745, 1), bool] */;
    %869 = cast(meta[relay.Constant][41] /* ty=Tensor[(17745, 6), float32] */, dtype="bool") /* ty=Tensor[(17745, 6), bool] */;
    %870 = greater_equal(%868, %869) /* ty=Tensor[(17745, 6), bool] */;
    %871 = cast(%var_7649, dtype="bool") /* ty=Tensor[(17745, 6), bool] */;
    %872 = shape_of(%870, dtype="int32") /* ty=Tensor[(2), int32] */;
    %873 = cast(%870, dtype="bool") /* ty=Tensor[(17745, 6), bool] */;
    %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %875 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 35490), float32] */, dtype="float32") /* ty=Tensor[(1, 35490), float32] */;
    %876 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 35490), float32] */, dtype="float32") /* ty=Tensor[(1, 35490), float32] */;
    %877 = reshape(%875, newshape=[17745, 2]) /* ty=Tensor[(17745, 2), float32] */;
    %878 = reshape(%876, newshape=[17745, 2]) /* ty=Tensor[(17745, 2), float32] */;
    %879 = @func_7340(%877, %878) /* ty=(Tensor[(17745, 2), int8], Tensor[(17745, 2), bool], Tensor[(17745, 2), float64]) */;
    %880 = floor_mod(%861, %862) /* ty=Tensor[(17745, 6), float32] */;
    %881 = %865.0;
    %882 = greater(%873, %874) /* ty=Tensor[(17745, 6), bool] */;
    %883 = %879.2;
    (%880, %881, %var_7647, %882, %883, meta[relay.Constant][42] /* ty=Tensor[(1, 35490), float32] */)
  };
  %884(%var_7673, %var_7674) /* ty=(Tensor[(17745, 6), float32], Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(17745, 6), bool], Tensor[(17745, 2), float64], Tensor[(1, 35490), float32]) */
}

def @func_2696() -> (Tensor[(13, 8, 3), float32], Tensor[(1183), float64], Tensor[(1, 1183), float32], Tensor[(9, 11, 5), bool], Tensor[(495), uint64]) {
  %885 = cast(meta[relay.Constant][43] /* ty=Tensor[(1183), float64] */, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %886 = reshape(%885, newshape=[1, 1183]) /* ty=Tensor[(1, 1183), float64] */;
  %887 = @func_589(%886) /* ty=(Tensor[(12, 14, 8), int8], Tensor[(12, 14, 8), float32], Tensor[(13, 13, 7), float64], Tensor[(1, 1183), float64]) */;
  %888 = %887.3;
  %889 = cast(%888, dtype="float32") /* ty=Tensor[(1, 1183), float32] */;
  %890 = cast(meta[relay.Constant][44] /* ty=Tensor[(495), uint64] */, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %891 = reshape(%890, newshape=[9, 11, 5]) /* ty=Tensor[(9, 11, 5), uint64] */;
  %892 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  %893 = log10(%889) /* ty=Tensor[(1, 1183), float32] */;
  %894 = @func_1145(%891) /* ty=Tensor[(9, 11, 5), bool] */;
  (%892, meta[relay.Constant][43] /* ty=Tensor[(1183), float64] */, %893, %894, meta[relay.Constant][44] /* ty=Tensor[(495), uint64] */)
}

def @func_7401() -> Tensor[(1183), float64] {
  %895 = @func_3347() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %895.4
}

def @func_6350() -> (Tensor[(1, 1183), float32], Tensor[(1183), float64]) {
  %896 = @func_6053() /* ty=(Tensor[(1183), float64], Tensor[(1183), float64], Tensor[(17745), float32], Tensor[(13, 8, 3), float32]) */;
  %897 = @func_3470() /* ty=Tensor[(1, 1183), float32] */;
  %898 = %896.1;
  (%897, %898)
}

def @func_7894() -> (Tensor[(13, 8, 3), float32], Tensor[(1, 1183), float32], Tensor[(17745, 10), bool]) {
  %904 = fn () -> (Tensor[(13, 8, 3), float32], Tensor[(1, 1183), float32], Tensor[(17745, 10), bool]) {
    %899 = @func_2575() /* ty=(Tensor[(13, 8, 3), float32],) */;
    %900 = @func_3545() /* ty=(Tensor[(2, 16), float32], Tensor[(1, 1183), float32]) */;
    %901 = %899.0;
    %902 = %900.1;
    %903 = @func_5678() /* ty=Tensor[(17745, 10), bool] */;
    (%901, %902, %903)
  };
  %904() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1, 1183), float32], Tensor[(17745, 10), bool]) */
}

def @func_7745(%var_7730: Tensor[(15, 13, 14), float64]) -> (Tensor[(15, 13, 14), float64],) {
  %905 = cast(%var_7730, dtype="float64") /* ty=Tensor[(15, 13, 14), float64] */;
  %906 = asinh(%905) /* ty=Tensor[(15, 13, 14), float64] */;
  (%906,)
}

def @func_3472() -> Tensor[(1, 1183), float32] {
  @func_3470() /* ty=Tensor[(1, 1183), float32] */
}

def @func_4117() -> (Tensor[(13, 8, 3), float32],) {
  %908 = fn () -> (Tensor[(13, 8, 3), float32],) {
    %907 = @func_2954() /* ty=Tensor[(13, 8, 3), float32] */;
    (%907,)
  };
  %908() /* ty=(Tensor[(13, 8, 3), float32],) */
}

def @func_8769() -> (Tensor[(1183), float64],) {
  @func_8767() /* ty=(Tensor[(1183), float64],) */
}

def @func_3991(%var_3989: Tensor[(32), float32], %var_3990: Tensor[(16, 1183), float32]) -> (Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 96), float64], Tensor[(32), float32], Tensor[(17745), float32], Tensor[(16, 1183), bool]) {
  @func_3987(%var_3989, %var_3990) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(16, 1, 2), float32], Tensor[(16, 96), float64], Tensor[(32), float32], Tensor[(17745), float32], Tensor[(16, 1183), bool]) */
}

def @func_8921() -> (Tensor[(1183), float64], Tensor[(13, 8, 3), float32], Tensor[(1183), float32]) {
  %909 = @func_7277() /* ty=(Tensor[(9, 11, 5), bool], Tensor[(8, 4), float32], Tensor[(1183), float64]) */;
  %910 = @func_3735() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %911 = %909.2;
  %912 = %910.0;
  %913 = @func_8449() /* ty=Tensor[(1183), float32] */;
  (%911, %912, %913)
}

def @func_7788() -> (Tensor[(9, 7, 2), float32], Tensor[(13, 8, 3), float32]) {
  @func_7786() /* ty=(Tensor[(9, 7, 2), float32], Tensor[(13, 8, 3), float32]) */
}

def @func_5722(%var_5720: Tensor[(17745), float32]) -> (Tensor[(1, 1183), float32], Tensor[(15, 1183), bool], Tensor[(17745), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) {
  @func_5719(%var_5720) /* ty=(Tensor[(1, 1183), float32], Tensor[(15, 1183), bool], Tensor[(17745), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32]) */
}

def @func_10028(%var_10027: Tensor[(13, 8, 3), float32]) -> Tensor[(13, 8, 3), int16] {
  %920 = fn (%var_10021: Tensor[(13, 8, 3), float32]) -> Tensor[(13, 8, 3), int16] {
    %914 = @func_3735() /* ty=(Tensor[(13, 8, 3), float32],) */;
    %915 = %914.0;
    %916 = cast(%var_10021, dtype="int16") /* ty=Tensor[(13, 8, 3), int16] */;
    %917 = shape_of(%915, dtype="int32") /* ty=Tensor[(3), int32] */;
    %918 = cast(%915, dtype="int16") /* ty=Tensor[(13, 8, 3), int16] */;
    %919 = dyn.reshape(%916, %917, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    bitwise_or(%918, %919) /* ty=Tensor[(13, 8, 3), int16] */
  };
  %920(%var_10027) /* ty=Tensor[(13, 8, 3), int16] */
}

def @func_6392(%var_6390: Tensor[(13, 4, 11), uint32], %var_6391: Tensor[(13, 4, 11), uint32]) -> Tensor[(13, 4, 11), uint32] {
  %925 = fn (%var_6361: Tensor[(13, 4, 11), uint32], %var_6362: Tensor[(13, 4, 11), uint32]) -> Tensor[(13, 4, 11), uint32] {
    %921 = cast(%var_6362, dtype="uint32") /* ty=Tensor[(13, 4, 11), uint32] */;
    %922 = shape_of(%var_6361, dtype="int32") /* ty=Tensor[(3), int32] */;
    %923 = cast(%var_6361, dtype="uint32") /* ty=Tensor[(13, 4, 11), uint32] */;
    %924 = dyn.reshape(%921, %922, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    multiply(%923, %924) /* ty=Tensor[(13, 4, 11), uint32] */
  };
  %925(%var_6390, %var_6391) /* ty=Tensor[(13, 4, 11), uint32] */
}

def @func_8119(%var_8117: Tensor[(16, 15, 1), float64]) -> Tensor[(16, 15, 1), float64] {
  @func_8116(%var_8117) /* ty=Tensor[(16, 15, 1), float64] */
}

def @func_4831() -> (Tensor[(1183), float64], Tensor[(507, 35), float32], Tensor[(17745), float32]) {
  %932 = fn () -> (Tensor[(1183), float64], Tensor[(507, 35), float32], Tensor[(17745), float32]) {
    %926 = @func_4516() /* ty=(Tensor[(1183), float64],) */;
    %927 = cast(meta[relay.Constant][45] /* ty=Tensor[(17745), float32] */, dtype="float32") /* ty=Tensor[(17745), float32] */;
    %928 = reshape(%927, newshape=[507, 35]) /* ty=Tensor[(507, 35), float32] */;
    %929 = @func_4787(%928) /* ty=(Tensor[(13, 8, 3), float32], Tensor[(32), float32], Tensor[(507, 35), float32], Tensor[(1183), int32]) */;
    %930 = %926.0;
    %931 = %929.2;
    (%930, %931, meta[relay.Constant][45] /* ty=Tensor[(17745), float32] */)
  };
  %932() /* ty=(Tensor[(1183), float64], Tensor[(507, 35), float32], Tensor[(17745), float32]) */
}

def @func_4649(%var_4579: uint64, %var_4604: Tensor[(17745), float32]) -> (Tensor[(32), float32], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(7, 7, 1183), int64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(13, 8, 3), float32], Tensor[(17745), float64], Tensor[(32), float32]) {
  %933 = @func_2546() /* ty=Tensor[(13, 8, 3), float32] */;
  %934 = cast(%933, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %935 = rsqrt(%934) /* ty=Tensor[(13, 8, 3), float64] */;
  %936 = cast(%935, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
  %937 = cast(%var_4579, dtype="float32") /* ty=float32 */;
  %938 = cast(%var_4604, dtype="float32") /* ty=Tensor[(17745), float32] */;
  %939 = reshape(%938, newshape=[15, 1183]) /* ty=Tensor[(15, 1183), float32] */;
  %940 = @func_2856(%939) /* ty=(Tensor[(15, 1183), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 8, 3), float32], Tensor[(15, 1183), bool]) */;
  %941 = @func_3628() /* ty=(Tensor[(1183), float64], Tensor[(1, 1183), float32]) */;
  %942 = %941.0;
  %943 = cast(%var_4579, dtype="uint64") /* ty=uint64 */;
  %944 = cast(meta[relay.Constant][46] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %945 = reshape(%943, newshape=[]) /* ty=uint64 */;
  %946 = reshape(%944, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %947 = @func_2311(%945, %946) /* ty=(Tensor[(7, 7, 1), uint64], Tensor[(2, 16), float32], Tensor[(1536), float64], Tensor[(32), float32]) */;
  %948 = %947.0;
  %949 = cast(%942, dtype="int64") /* ty=Tensor[(1183), int64] */;
  %950 = cast(%948, dtype="int64") /* ty=Tensor[(7, 7, 1), int64] */;
  %951 = cast(meta[relay.Constant][47] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %952 = cast(meta[relay.Constant][46] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %953 = reshape(%951, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
  %954 = reshape(%952, newshape=[2, 16]) /* ty=Tensor[(2, 16), float32] */;
  %955 = @func_2261(%953, %954) /* ty=(Tensor[(6, 10, 7), float64], Tensor[(420), float64], Tensor[(16, 1, 2), float32], Tensor[(2, 16), float32], Tensor[(8, 16, 12), float32], Tensor[(6, 10, 7), float64]) */;
  %956 = @func_4419() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(1183), float64]) */;
  %957 = cast(%var_4604, dtype="float64") /* ty=Tensor[(17745), float64] */;
  %958 = %955.3;
  %959 = cast(%958, dtype="float32") /* ty=Tensor[(2, 16), float32] */;
  %960 = reshape(%959, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %961 = @func_2738(%960) /* ty=(Tensor[(495), uint64], Tensor[(16, 1, 2), float32], Tensor[(32), float32]) */;
  %962 = add(%936, %937) /* ty=Tensor[(13, 8, 3), float32] */;
  %963 = %940.1;
  %964 = bitwise_and(%949, %950) /* ty=Tensor[(7, 7, 1183), int64] */;
  %965 = %956.0;
  %966 = sqrt(%957) /* ty=Tensor[(17745), float64] */;
  %967 = %961.2;
  (meta[relay.Constant][46] /* ty=Tensor[(32), float32] */, %962, %963, %964, %958, meta[relay.Constant][47] /* ty=Tensor[(1536), float64] */, %965, %966, %967)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen965/build/output.py", line 2868, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [15:04:31] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

