==========mod==========
#[version = "0.0.5"]
def @func_4109() -> (Tensor[(8, 2, 16), float32], Tensor[(14, 16, 2), float32]) {
  %0 = @func_1670() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %1 = @func_3208() /* ty=(Tensor[(14, 16, 2), float64],) */;
  %2 = %1.0;
  %3 = cast(%2, dtype="float32") /* ty=Tensor[(14, 16, 2), float32] */;
  %4 = %0.0;
  %5 = rsqrt(%3) /* ty=Tensor[(14, 16, 2), float32] */;
  (%4, %5)
}

def @func_1442() -> (Tensor[(8, 2, 16), uint64], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(98, 1), float32], Tensor[(1, 392), float32], Tensor[(8, ?, 16), bool], Tensor[(392), float32]) {
  %6 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
  %7 = %6.2;
  %8 = cast(%7, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
  %9 = sqrt(%8) /* ty=Tensor[(8, 1, 16), float32] */;
  %10 = cast(%9, dtype="uint64") /* ty=Tensor[(8, 1, 16), uint64] */;
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 2, 16), float32] */, dtype="uint64") /* ty=Tensor[(8, 2, 16), uint64] */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %13 = reshape(%12, newshape=[9, 8, 15]) /* ty=Tensor[(9, 8, 15), float32] */;
  %14 = @func_1099(%13) /* ty=(Tensor[(9, 8, 15), int32], Tensor[(9, 8, 1), float32]) */;
  %15 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 392), float32] */, dtype="float32") /* ty=Tensor[(1, 392), float32] */;
  %16 = reshape(%15, newshape=[98, 4]) /* ty=Tensor[(98, 4), float32] */;
  %17 = @func_1006(%16) /* ty=(Tensor[(8, 1, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], Tensor[(98, 1), float32], Tensor[(98, 4), int64]) */;
  %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 392), float32] */, dtype="float32") /* ty=Tensor[(1, 392), float32] */;
  %19 = reshape(%18, newshape=[98, 4]) /* ty=Tensor[(98, 4), float32] */;
  %20 = @func_1006(%19) /* ty=(Tensor[(8, 1, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], Tensor[(98, 1), float32], Tensor[(98, 4), int64]) */;
  %21 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
  %22 = logical_xor(%10, %11) /* ty=Tensor[(8, 2, 16), uint64] */;
  %23 = %14.1;
  %24 = %17.4;
  %25 = %20.3;
  %26 = %21.0;
  (%22, %23, meta[relay.Constant][1] /* ty=Tensor[(1080), float32] */, %24, meta[relay.Constant][2] /* ty=Tensor[(1, 392), float32] */, %25, %26)
}

def @func_5485() -> (Tensor[(6, 2, 13), float32], Tensor[(8, 2, 16), float32]) {
  %27 = @func_2090() /* ty=Tensor[(6, 2, 13), float32] */;
  %28 = @func_5239() /* ty=Tensor[(8, 2, 16), float32] */;
  (%27, %28)
}

def @func_1339() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %29 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
  %30 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %31 = %29.1;
  %32 = %30.0;
  (%31, %32)
}

def @func_3994() -> (Tensor[(8, ?, 16), bool],) {
  %33 = @func_2172() /* ty=(Tensor[(8, ?, 16), bool],) */;
  %34 = %33.0;
  (%34,)
}

def @func_2243() -> (Tensor[(14, 16, 2), float64], Tensor[(5, 5, 14), float32], Tensor[(350), float32]) {
  %35 = @func_1960() /* ty=(Tensor[(14, 16, 2), float64],) */;
  %36 = cast(meta[relay.Constant][3] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %37 = reshape(%36, newshape=[5, 5, 14]) /* ty=Tensor[(5, 5, 14), float32] */;
  %38 = @func_1786(%37) /* ty=(Tensor[(5, 5, 14), float32],) */;
  %39 = %35.0;
  %40 = %38.0;
  (%39, %40, meta[relay.Constant][3] /* ty=Tensor[(350), float32] */)
}

def @func_3093(%var_3071: Tensor[(8, 2, 16), float32]) -> Tensor[(8, 2, 16), bool] {
  %41 = @func_2834() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %42 = %41.0;
  %43 = cast(%var_3071, dtype="uint8") /* ty=Tensor[(8, 2, 16), uint8] */;
  %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%42, dtype="uint8") /* ty=Tensor[(8, 2, 16), uint8] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %47 = bitwise_xor(%45, %46) /* ty=Tensor[(8, 2, 16), uint8] */;
  %48 = @func_1715() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %49 = %48.0;
  %50 = cast(%49, dtype="bool") /* ty=Tensor[(8, 2, 16), bool] */;
  %51 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%47, dtype="bool") /* ty=Tensor[(8, 2, 16), bool] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%52, %53) /* ty=Tensor[(8, 2, 16), bool] */
}

def @func_3044() -> (Tensor[(4, 13, 11), float64], Tensor[(572), float64], Tensor[(9, 8, 1), float64]) {
  %54 = cast(meta[relay.Constant][4] /* ty=Tensor[(572), float64] */, dtype="float64") /* ty=Tensor[(572), float64] */;
  %55 = reshape(%54, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), float64] */;
  %56 = @func_2127(%55) /* ty=(Tensor[(4, 13, 11), float64],) */;
  %57 = @func_1442() /* ty=(Tensor[(8, 2, 16), uint64], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(98, 1), float32], Tensor[(1, 392), float32], Tensor[(8, ?, 16), bool], Tensor[(392), float32]) */;
  %58 = %57.1;
  %59 = cast(%58, dtype="float64") /* ty=Tensor[(9, 8, 1), float64] */;
  %60 = asin(%59) /* ty=Tensor[(9, 8, 1), float64] */;
  %61 = cast(%60, dtype="float64") /* ty=Tensor[(9, 8, 1), float64] */;
  %62 = %56.0;
  %63 = atan(%61) /* ty=Tensor[(9, 8, 1), float64] */;
  (%62, meta[relay.Constant][4] /* ty=Tensor[(572), float64] */, %63)
}

def @func_4950() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %64 = @func_2824() /* ty=Tensor[(8, 2, 16), float32] */;
  %65 = @func_4067() /* ty=Tensor[(8, 2, 16), float32] */;
  %66 = @func_2454() /* ty=Tensor[(8, 2, 16), float32] */;
  (%64, %65, %66)
}

def @func_3326() -> (Tensor[(14, 12, 12), float64], Tensor[(8, 2, 16), float32]) {
  %67 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 1, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 1, 12), float64] */;
  %68 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 12, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
  %69 = @func_1362() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %70 = floor_mod(%67, %68) /* ty=Tensor[(14, 12, 12), float64] */;
  %71 = %69.0;
  (%70, %71)
}

def @func_2834() -> (Tensor[(8, 2, 16), float32],) {
  %72 = @func_943() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %73 = %72.0;
  (%73,)
}

def @func_3368(%var_3335: Tensor[(12, 15, 5), float64]) -> (Tensor[(12, 15, 5), float64], Tensor[(10, 6, 7), uint16], Tensor[(1, 70), uint16], Tensor[(420), uint16], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %74 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 15, 5), float64] */, dtype="float64") /* ty=Tensor[(12, 15, 5), float64] */;
  %75 = shape_of(%var_3335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%var_3335, dtype="float64") /* ty=Tensor[(12, 15, 5), float64] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %78 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 70), uint16] */, dtype="uint16") /* ty=Tensor[(1, 70), uint16] */;
  %79 = cast(meta[relay.Constant][9] /* ty=Tensor[(420), uint16] */, dtype="uint16") /* ty=Tensor[(420), uint16] */;
  %80 = reshape(%78, newshape=[10, 1, 7]) /* ty=Tensor[(10, 1, 7), uint16] */;
  %81 = reshape(%79, newshape=[10, 6, 7]) /* ty=Tensor[(10, 6, 7), uint16] */;
  %82 = @func_2033() /* ty=(Tensor[(14, 16, 2), float64], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %83 = @func_1670() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %84 = power(%76, %77) /* ty=Tensor[(12, 15, 5), float64] */;
  %85 = @func_2361(%80, %81) /* ty=Tensor[(10, 6, 7), uint16] */;
  %86 = %82.3;
  %87 = %83.0;
  (%84, %85, meta[relay.Constant][8] /* ty=Tensor[(1, 70), uint16] */, meta[relay.Constant][9] /* ty=Tensor[(420), uint16] */, %86, %87)
}

def @func_2693(%var_2683: Tensor[(8, 2, 16), float32]) -> Tensor[(8, 2, 16), bool] {
  %88 = @func_1339() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %89 = %88.0;
  %90 = cast(%89, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %91 = sigmoid(%90) /* ty=Tensor[(8, 2, 16), float32] */;
  %92 = cast(%var_2683, dtype="bool") /* ty=Tensor[(8, 2, 16), bool] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="bool") /* ty=Tensor[(8, 2, 16), bool] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%94, %95) /* ty=Tensor[(8, 2, 16), bool] */
}

def @func_2895() -> (Tensor[(8, 1, 16), float32], Tensor[(8, 2, 16), float64]) {
  %96 = @func_2661() /* ty=Tensor[(8, 1, 16), float64] */;
  %97 = cast(%96, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
  %98 = @func_2774() /* ty=(Tensor[(8, 2, 16), float64],) */;
  %99 = acos(%97) /* ty=Tensor[(8, 1, 16), float32] */;
  %100 = %98.0;
  (%99, %100)
}

def @func_3649() -> (Tensor[(8, ?, 16), float64],) {
  %101 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %102 = %101.1;
  %103 = @func_3265() /* ty=(Tensor[(8, ?, 16), float64],) */;
  %104 = %103.0;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(8, ?, 16), float64] */;
  %106 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%102, dtype="float64") /* ty=Tensor[(8, 1, 16), float64] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %109 = divide(%107, %108) /* ty=Tensor[(8, ?, 16), float64] */;
  (%109,)
}

def @func_3974(%var_3963: Tensor[(7, 9, 14), float64]) -> Tensor[(7, 9, 14), float64] {
  %110 = cast(%var_3963, dtype="float64") /* ty=Tensor[(7, 9, 14), float64] */;
  exp(%110) /* ty=Tensor[(7, 9, 14), float64] */
}

def @func_1123() -> (Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) {
  %111 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %112 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %113 = %111.0;
  %114 = %112.0;
  (%113, %114)
}

def @func_2090() -> Tensor[(6, 2, 13), float32] {
  %115 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 2, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
  tan(%115) /* ty=Tensor[(6, 2, 13), float32] */
}

def @func_1715() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %116 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %117 = @func_1123() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) */;
  %118 = %116.0;
  %119 = %117.0;
  (%118, %119)
}

def @func_3304(%var_3296: Tensor[(8, 10, 16), bool]) -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 10, 16), int16]) {
  %120 = @func_2033() /* ty=(Tensor[(14, 16, 2), float64], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %121 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
  %122 = @func_2172() /* ty=(Tensor[(8, ?, 16), bool],) */;
  %123 = %122.0;
  %124 = cast(%123, dtype="int16") /* ty=Tensor[(8, ?, 16), int16] */;
  %125 = cast(%var_3296, dtype="int16") /* ty=Tensor[(8, 10, 16), int16] */;
  %126 = %120.2;
  %127 = %121.1;
  %128 = bitwise_xor(%124, %125) /* ty=Tensor[(8, 10, 16), int16] */;
  (%126, %127, %128)
}

def @func_1099(%var_1091: Tensor[(9, 8, 15), float32]) -> (Tensor[(9, 8, 15), int32], Tensor[(9, 8, 1), float32]) {
  %129 = cast(meta[relay.Constant][11] /* ty=Tensor[(9, 8, 1), float32] */, dtype="int32") /* ty=Tensor[(9, 8, 1), int32] */;
  %130 = cast(%var_1091, dtype="int32") /* ty=Tensor[(9, 8, 15), int32] */;
  %131 = cast(meta[relay.Constant][11] /* ty=Tensor[(9, 8, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
  %132 = erf(%131) /* ty=Tensor[(9, 8, 1), float32] */;
  %133 = cast(%132, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
  %134 = subtract(%129, %130) /* ty=Tensor[(9, 8, 15), int32] */;
  %135 = acosh(%133) /* ty=Tensor[(9, 8, 1), float32] */;
  (%134, %135)
}

def @main(%var_6194: Tensor[(10, 14, 15), float64]) -> Tensor[(10, 14, 15), float64] {
  %136 = cast(%var_6194, dtype="float64") /* ty=Tensor[(10, 14, 15), float64] */;
  cosh(%136) /* ty=Tensor[(10, 14, 15), float64] */
}

def @func_543(%var_530: Tensor[(7, 14, 1), float32]) -> (Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool]) {
  %137 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %138 = cast(%var_530, dtype="float32") /* ty=Tensor[(7, 14, 1), float32] */;
  %139 = sigmoid(%138) /* ty=Tensor[(7, 14, 1), float32] */;
  %140 = cast(%var_530, dtype="bool") /* ty=Tensor[(7, 14, 1), bool] */;
  %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%139, dtype="bool") /* ty=Tensor[(7, 14, 1), bool] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %144 = %137.0;
  %145 = greater_equal(%142, %143) /* ty=Tensor[(7, 14, ?), bool] */;
  (%144, %145)
}

def @func_794() -> (Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) {
  %146 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %147 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %148 = %146.0;
  %149 = %147.1;
  (%148, %149)
}

def @func_2806() -> (Tensor[(8, 2, 16), float32],) {
  %150 = @func_1339() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %151 = %150.0;
  (%151,)
}

def @func_2774() -> (Tensor[(8, 2, 16), float64],) {
  %152 = @func_2705() /* ty=Tensor[(8, 2, 16), float64] */;
  (%152,)
}

def @func_4035() -> Tensor[(8, 2, 16), float32] {
  %153 = @func_3326() /* ty=(Tensor[(14, 12, 12), float64], Tensor[(8, 2, 16), float32]) */;
  %153.1
}

def @func_4765(%var_4748: Tensor[(15, 8, 13), int8], %var_4749: Tensor[(15, 8, 13), int8]) -> (Tensor[(15, 8, 13), int8],) {
  %154 = cast(%var_4749, dtype="int8") /* ty=Tensor[(15, 8, 13), int8] */;
  %155 = shape_of(%var_4748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%var_4748, dtype="int8") /* ty=Tensor[(15, 8, 13), int8] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %158 = left_shift(%156, %157) /* ty=Tensor[(15, 8, 13), int8] */;
  (%158,)
}

def @func_2172() -> (Tensor[(8, ?, 16), bool],) {
  %159 = @func_1442() /* ty=(Tensor[(8, 2, 16), uint64], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(98, 1), float32], Tensor[(1, 392), float32], Tensor[(8, ?, 16), bool], Tensor[(392), float32]) */;
  %160 = %159.5;
  (%160,)
}

def @func_2638(%var_2599: Tensor[(8, 2, 16), float32], %var_2620: Tensor[(8, 2, 16), float32]) -> (Tensor[(8, 2, 16), bool], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), uint8], Tensor[(8, 2, 16), float32]) {
  %161 = @func_1339() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %162 = %161.1;
  %163 = cast(%var_2599, dtype="bool") /* ty=Tensor[(8, 2, 16), bool] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%162, dtype="bool") /* ty=Tensor[(8, 2, 16), bool] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %167 = @func_1339() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %168 = @func_2442() /* ty=Tensor[(8, 2, 16), float32] */;
  %169 = cast(%var_2620, dtype="float64") /* ty=Tensor[(8, 2, 16), float64] */;
  %170 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%162, dtype="float64") /* ty=Tensor[(8, 2, 16), float64] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %173 = floor_mod(%171, %172) /* ty=Tensor[(8, 2, 16), float64] */;
  %174 = cast(%173, dtype="uint8") /* ty=Tensor[(8, 2, 16), uint8] */;
  %175 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%168, dtype="uint8") /* ty=Tensor[(8, 2, 16), uint8] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %178 = cast(%162, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %179 = less(%165, %166) /* ty=Tensor[(8, 2, 16), bool] */;
  %180 = %167.1;
  %181 = right_shift(%176, %177) /* ty=Tensor[(8, 2, 16), uint8] */;
  %182 = cosh(%178) /* ty=Tensor[(8, 2, 16), float32] */;
  (%179, %180, %181, %182)
}

def @func_1960() -> (Tensor[(14, 16, 2), float64],) {
  %183 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 16, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 16, 2), float64] */;
  %184 = log10(%183) /* ty=Tensor[(14, 16, 2), float64] */;
  (%184,)
}

def @func_943() -> (Tensor[(8, 2, 16), float32],) {
  %185 = @func_832() /* ty=(Tensor[(8, 1, 16), float64],) */;
  %186 = %185.0;
  %187 = cast(%186, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
  %188 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 2, 16), float64] */, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %189 = subtract(%187, %188) /* ty=Tensor[(8, 2, 16), float32] */;
  (%189,)
}

def @func_5428(%var_5393: Tensor[(1, 728), float32], %var_5405: Tensor[(14, 4, 13), bool]) -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(?, 728), float64]) {
  %190 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
  %191 = @func_4950() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %192 = cast(%var_5393, dtype="float64") /* ty=Tensor[(1, 728), float64] */;
  %193 = acos(%192) /* ty=Tensor[(1, 728), float64] */;
  %194 = cast(%var_5393, dtype="float32") /* ty=Tensor[(1, 728), float32] */;
  %195 = cast(%var_5393, dtype="float32") /* ty=Tensor[(1, 728), float32] */;
  %196 = reshape(%194, newshape=[14, 4, 13]) /* ty=Tensor[(14, 4, 13), float32] */;
  %197 = reshape(%195, newshape=[14, 4, 13]) /* ty=Tensor[(14, 4, 13), float32] */;
  %198 = @func_4265(%196, %197) /* ty=Tensor[(14, 4, 13), bool] */;
  %199 = cast(%var_5405, dtype="bool") /* ty=Tensor[(14, 4, 13), bool] */;
  %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%198, dtype="bool") /* ty=Tensor[(14, 4, 13), bool] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %203 = less(%201, %202) /* ty=Tensor[(14, 4, 13), bool] */;
  %204 = cast(%203, dtype="float64") /* ty=Tensor[(14, 4, 13), float64] */;
  %205 = shape_of(%193, dtype="int32") /* ty=Tensor[(2), int32] */;
  %206 = cast(%193, dtype="float64") /* ty=Tensor[(1, 728), float64] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %208 = %190.1;
  %209 = %191.1;
  %210 = power(%206, %207) /* ty=Tensor[(?, 728), float64] */;
  (%208, %209, %210)
}

def @func_2824() -> Tensor[(8, 2, 16), float32] {
  %211 = @func_1670() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %211.0
}

def @func_2751(%var_2717: Tensor[(3, 8, 5), float32], %var_2732: int8) -> (Tensor[(3, 8, 5), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], int8, Tensor[(3, 6, 13), float32], Tensor[(234), float32], Tensor[(3, 6, 13), float32]) {
  %212 = cast(%var_2717, dtype="float32") /* ty=Tensor[(3, 8, 5), float32] */;
  %213 = atan(%212) /* ty=Tensor[(3, 8, 5), float32] */;
  %214 = cast(%213, dtype="float64") /* ty=Tensor[(3, 8, 5), float64] */;
  %215 = @func_1339() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %216 = cast(%var_2732, dtype="int8") /* ty=int8 */;
  %217 = reshape(%216, newshape=[]) /* ty=int8 */;
  %218 = @func_2296(%217) /* ty=(Tensor[(8, 6, 4), int8], Tensor[(8, 6, 4), float64], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool]) */;
  %219 = cast(meta[relay.Constant][14] /* ty=Tensor[(234), float32] */, dtype="float32") /* ty=Tensor[(234), float32] */;
  %220 = cast(meta[relay.Constant][14] /* ty=Tensor[(234), float32] */, dtype="float32") /* ty=Tensor[(234), float32] */;
  %221 = reshape(%219, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float32] */;
  %222 = reshape(%220, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float32] */;
  %223 = @func_1923(%221, %222) /* ty=Tensor[(3, 6, 13), float32] */;
  %224 = cast(%223, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
  %225 = cast(meta[relay.Constant][14] /* ty=Tensor[(234), float32] */, dtype="float32") /* ty=Tensor[(234), float32] */;
  %226 = reshape(%224, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float32] */;
  %227 = reshape(%225, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float32] */;
  %228 = acosh(%214) /* ty=Tensor[(3, 8, 5), float64] */;
  %229 = %215.0;
  %230 = %218.3;
  %231 = @func_1923(%226, %227) /* ty=Tensor[(3, 6, 13), float32] */;
  (%228, %229, %230, %var_2732, %223, meta[relay.Constant][14] /* ty=Tensor[(234), float32] */, %231)
}

def @func_4306() -> (Tensor[(8, 2, 16), float32],) {
  %232 = @func_1339() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %233 = %232.1;
  (%233,)
}

def @func_5460() -> (Tensor[(8, 2, 16), float32],) {
  %234 = @func_4327() /* ty=Tensor[(8, 2, 16), float32] */;
  (%234,)
}

def @func_3161(%var_3106: int64, %var_3107: Tensor[(5, 8, 10), int64], %var_3132: Tensor[(98), float32]) -> (Tensor[(5, 8, 10), float64], Tensor[(5, 8, 10), bool], Tensor[(8, 2, 16), float32], Tensor[(98), float32]) {
  %235 = cast(%var_3107, dtype="float64") /* ty=Tensor[(5, 8, 10), float64] */;
  %236 = cast(%var_3106, dtype="bool") /* ty=bool */;
  %237 = cast(%var_3107, dtype="bool") /* ty=Tensor[(5, 8, 10), bool] */;
  %238 = less(%236, %237) /* ty=Tensor[(5, 8, 10), bool] */;
  %239 = cast(%var_3106, dtype="bool") /* ty=bool */;
  %240 = cast(%238, dtype="bool") /* ty=Tensor[(5, 8, 10), bool] */;
  %241 = cast(%var_3132, dtype="float32") /* ty=Tensor[(98), float32] */;
  %242 = reshape(%241, newshape=[98, 1]) /* ty=Tensor[(98, 1), float32] */;
  %243 = @func_1170(%242) /* ty=(Tensor[(8, 2, 16), float32], Tensor[(7, 14, ?), bool], Tensor[(98, 1), float32], Tensor[(8, 2, 16), float32]) */;
  %244 = sqrt(%235) /* ty=Tensor[(5, 8, 10), float64] */;
  %245 = equal(%239, %240) /* ty=Tensor[(5, 8, 10), bool] */;
  %246 = %243.3;
  (%244, %245, %246, %var_3132)
}

def @func_4407(%var_4403: Tensor[(7, 14, 2), float64]) -> Tensor[(7, 14, 2), float64] {
  %247 = cast(%var_4403, dtype="float64") /* ty=Tensor[(7, 14, 2), float64] */;
  %248 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(7, 14, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 14, 2), float64] */, dtype="float64") /* ty=Tensor[(7, 14, 2), float64] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%249, %250) /* ty=Tensor[(7, 14, 2), float64] */
}

def @func_5855() -> (Tensor[(1080), float32], Tensor[(15, 8, 13), int8], Tensor[(1560), int8]) {
  %251 = @func_1442() /* ty=(Tensor[(8, 2, 16), uint64], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(98, 1), float32], Tensor[(1, 392), float32], Tensor[(8, ?, 16), bool], Tensor[(392), float32]) */;
  %252 = cast(meta[relay.Constant][16] /* ty=Tensor[(1560), int8] */, dtype="int8") /* ty=Tensor[(1560), int8] */;
  %253 = cast(meta[relay.Constant][16] /* ty=Tensor[(1560), int8] */, dtype="int8") /* ty=Tensor[(1560), int8] */;
  %254 = reshape(%252, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int8] */;
  %255 = reshape(%253, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int8] */;
  %256 = @func_4765(%254, %255) /* ty=(Tensor[(15, 8, 13), int8],) */;
  %257 = %251.2;
  %258 = %256.0;
  (%257, %258, meta[relay.Constant][16] /* ty=Tensor[(1560), int8] */)
}

def @func_4361(%var_4352: Tensor[(8, 16, 16), float64]) -> (Tensor[(8, ?, 16), float64], Tensor[(8, 16, 16), bool]) {
  %259 = @func_3649() /* ty=(Tensor[(8, ?, 16), float64],) */;
  %260 = @func_3649() /* ty=(Tensor[(8, ?, 16), float64],) */;
  %261 = %260.0;
  %262 = cast(%261, dtype="bool") /* ty=Tensor[(8, ?, 16), bool] */;
  %263 = cast(%var_4352, dtype="bool") /* ty=Tensor[(8, 16, 16), bool] */;
  %264 = %259.0;
  %265 = equal(%262, %263) /* ty=Tensor[(8, 16, 16), bool] */;
  (%264, %265)
}

def @func_6030() -> Tensor[(8, 2, 16), float32] {
  @func_4327() /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_5615() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32]) {
  %266 = @func_1339() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %267 = @func_794() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %268 = %266.0;
  %269 = %267.1;
  %270 = @func_2824() /* ty=Tensor[(8, 2, 16), float32] */;
  (%268, %269, %270)
}

def @func_2127(%var_2115: Tensor[(4, 13, 11), float64]) -> (Tensor[(4, 13, 11), float64],) {
  %271 = cast(%var_2115, dtype="float64") /* ty=Tensor[(4, 13, 11), float64] */;
  %272 = tan(%271) /* ty=Tensor[(4, 13, 11), float64] */;
  (%272,)
}

def @func_4583() -> (Tensor[(8, 11, 16), uint32], Tensor[(8, 11, 16), uint8], Tensor[(14, 16, 2), float64], Tensor[(8, 11, 16), float32]) {
  %273 = @func_1282() /* ty=Tensor[(8, ?, 16), bool] */;
  %274 = cast(%273, dtype="uint32") /* ty=Tensor[(8, ?, 16), uint32] */;
  %275 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 11, 16), bool] */, dtype="uint32") /* ty=Tensor[(8, 11, 16), uint32] */;
  %276 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 11, 16), bool] */, dtype="uint8") /* ty=Tensor[(8, 11, 16), uint8] */;
  %277 = cast(%273, dtype="uint8") /* ty=Tensor[(8, ?, 16), uint8] */;
  %278 = @func_1960() /* ty=(Tensor[(14, 16, 2), float64],) */;
  %279 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 11, 16), bool] */, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
  %280 = bitwise_xor(%274, %275) /* ty=Tensor[(8, 11, 16), uint32] */;
  %281 = minimum(%276, %277) /* ty=Tensor[(8, 11, 16), uint8] */;
  %282 = %278.0;
  %283 = rsqrt(%279) /* ty=Tensor[(8, 11, 16), float32] */;
  (%280, %281, %282, %283)
}

def @func_4327() -> Tensor[(8, 2, 16), float32] {
  %284 = @func_1362() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %284.0
}

def @func_1670() -> (Tensor[(8, 2, 16), float32],) {
  %285 = @func_943() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %286 = %285.0;
  (%286,)
}

def @func_6020() -> Tensor[(8, ?, 16), bool] {
  %287 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %287.0
}

def @func_4472() -> Tensor[(8, 2, 16), float64] {
  %288 = @func_2774() /* ty=(Tensor[(8, 2, 16), float64],) */;
  %288.0
}

def @func_1923(%var_1904: Tensor[(3, 6, 13), float32], %var_1905: Tensor[(3, 6, 13), float32]) -> Tensor[(3, 6, 13), float32] {
  %289 = cast(%var_1905, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
  %290 = shape_of(%var_1904, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%var_1904, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%291, %292) /* ty=Tensor[(3, 6, 13), float32] */
}

def @func_878(%var_866: Tensor[(13, 5, 11), float32], %var_867: Tensor[(13, 5, 11), float32]) -> (Tensor[(13, 5, 11), float32], Tensor[(8, 1, 16), float64]) {
  %293 = cast(%var_867, dtype="float32") /* ty=Tensor[(13, 5, 11), float32] */;
  %294 = shape_of(%var_866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%var_866, dtype="float32") /* ty=Tensor[(13, 5, 11), float32] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %297 = @func_832() /* ty=(Tensor[(8, 1, 16), float64],) */;
  %298 = mod(%295, %296) /* ty=Tensor[(13, 5, 11), float32] */;
  %299 = %297.0;
  (%298, %299)
}

def @func_1282() -> Tensor[(8, ?, 16), bool] {
  %300 = @func_794() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %300.0
}

def @func_5002() -> (Tensor[(8, 2, 16), float32],) {
  %301 = @func_4327() /* ty=Tensor[(8, 2, 16), float32] */;
  %302 = cast(%301, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %303 = rsqrt(%302) /* ty=Tensor[(8, 2, 16), float32] */;
  (%303,)
}

def @func_2661() -> Tensor[(8, 1, 16), float64] {
  %304 = @func_832() /* ty=(Tensor[(8, 1, 16), float64],) */;
  %304.0
}

def @func_4898() -> Tensor[(8, 2, 16), float32] {
  %305 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %305.0
}

def @func_2571(%var_2541: Tensor[(392), float32], %var_2542: Tensor[(2640), float64]) -> (Tensor[(8, 2, 16), float32], Tensor[(392), float32], Tensor[(392), float32], Tensor[(2640), float64]) {
  %306 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %307 = cast(%var_2541, dtype="float32") /* ty=Tensor[(392), float32] */;
  %308 = cast(%var_2542, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %309 = reshape(%307, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %310 = reshape(%308, newshape=[16, 11, 15]) /* ty=Tensor[(16, 11, 15), float64] */;
  %311 = @func_1527(%309, %310) /* ty=(Tensor[(98, 1), float32], Tensor[(392), float32], Tensor[(16, 11, 15), bool], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool], Tensor[(392), float32]) */;
  %312 = %306.0;
  %313 = %311.1;
  (%312, %313, %var_2541, %var_2542)
}

def @func_5118() -> (Tensor[(8, 2, 16), int32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %314 = @func_2442() /* ty=Tensor[(8, 2, 16), float32] */;
  %315 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 2, 16), float32] */, dtype="int32") /* ty=Tensor[(8, 2, 16), int32] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="int32") /* ty=Tensor[(8, 2, 16), int32] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %319 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %320 = @func_5002() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %321 = @func_2834() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %322 = multiply(%317, %318) /* ty=Tensor[(8, 2, 16), int32] */;
  %323 = log10(%319) /* ty=Tensor[(8, 2, 16), float32] */;
  %324 = %320.0;
  %325 = %321.0;
  (%322, %323, %324, %325)
}

def @func_5966(%var_5954: Tensor[(728), float32]) -> (Tensor[(8, 2, 16), float32], Tensor[(?, 728), float64], Tensor[(728), float32], Tensor[(8, 2, 16), float32]) {
  %326 = @func_4950() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %327 = cast(%var_5954, dtype="float32") /* ty=Tensor[(728), float32] */;
  %328 = cast(%var_5954, dtype="bool") /* ty=Tensor[(728), bool] */;
  %329 = reshape(%327, newshape=[1, 728]) /* ty=Tensor[(1, 728), float32] */;
  %330 = reshape(%328, newshape=[14, 4, 13]) /* ty=Tensor[(14, 4, 13), bool] */;
  %331 = @func_5428(%329, %330) /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(?, 728), float64]) */;
  %332 = @func_5524() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %333 = %326.1;
  %334 = %331.2;
  %335 = %332.1;
  (%333, %334, %var_5954, %335)
}

def @func_2192() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float64], Tensor[(392), float32], Tensor[(1080), float32]) {
  %336 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %337 = @func_1670() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %338 = %337.0;
  %339 = cast(%338, dtype="float64") /* ty=Tensor[(8, 2, 16), float64] */;
  %340 = cast(meta[relay.Constant][19] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %341 = reshape(%340, newshape=[1080]) /* ty=Tensor[(1080), float32] */;
  %342 = @func_1610(%341) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, ?, 16), bool], Tensor[(98), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(392), float32]) */;
  %343 = %336.0;
  %344 = cos(%339) /* ty=Tensor[(8, 2, 16), float64] */;
  %345 = %342.7;
  (%343, %344, %345, meta[relay.Constant][19] /* ty=Tensor[(1080), float32] */)
}

def @func_773(%var_661: Tensor[(98, 1), float32]) -> (Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), uint16], Tensor[(8, ?, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(8, 98, 16), bool], Tensor[(8, 98, 16), bool], Tensor[(8, 98, 16), bool]) {
  %346 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %347 = cast(%var_661, dtype="float32") /* ty=Tensor[(98, 1), float32] */;
  %348 = reshape(%347, newshape=[7, 14, 1]) /* ty=Tensor[(7, 14, 1), float32] */;
  %349 = @func_543(%348) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool]) */;
  %350 = %349.1;
  %351 = cast(%var_661, dtype="uint16") /* ty=Tensor[(98, 1), uint16] */;
  %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%350, dtype="uint16") /* ty=Tensor[(7, 14, ?), uint16] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %355 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %356 = %355.0;
  %357 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %358 = %357.0;
  %359 = cast(%358, dtype="float64") /* ty=Tensor[(8, ?, 16), float64] */;
  %360 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%356, dtype="float64") /* ty=Tensor[(8, ?, 16), float64] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %363 = cast(%350, dtype="float32") /* ty=Tensor[(7, 14, ?), float32] */;
  %364 = reshape(%363, newshape=[7, 14, 1]) /* ty=Tensor[(7, 14, 1), float32] */;
  %365 = @func_543(%364) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool]) */;
  %366 = minimum(%353, %354) /* ty=Tensor[(7, 14, ?), uint16] */;
  %367 = cast(%366, dtype="float32") /* ty=Tensor[(7, 14, ?), float32] */;
  %368 = reshape(%367, newshape=[7, 14, 1]) /* ty=Tensor[(7, 14, 1), float32] */;
  %369 = @func_543(%368) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool]) */;
  %370 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %371 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %372 = cast(%356, dtype="float64") /* ty=Tensor[(8, ?, 16), float64] */;
  %373 = exp(%372) /* ty=Tensor[(8, ?, 16), float64] */;
  %374 = cast(%373, dtype="float64") /* ty=Tensor[(8, ?, 16), float64] */;
  %375 = cast(%var_661, dtype="float64") /* ty=Tensor[(98, 1), float64] */;
  %376 = mod(%374, %375) /* ty=Tensor[(8, 98, 16), float64] */;
  %377 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 98, 16), float64] */, dtype="bool") /* ty=Tensor[(8, 98, 16), bool] */;
  %378 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%376, dtype="bool") /* ty=Tensor[(8, 98, 16), bool] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %381 = not_equal(%379, %380) /* ty=Tensor[(8, 98, 16), bool] */;
  %382 = cast(%381, dtype="bool") /* ty=Tensor[(8, 98, 16), bool] */;
  %383 = cast(%356, dtype="bool") /* ty=Tensor[(8, ?, 16), bool] */;
  %384 = cast(%376, dtype="float64") /* ty=Tensor[(8, 98, 16), float64] */;
  %385 = log2(%384) /* ty=Tensor[(8, 98, 16), float64] */;
  %386 = cast(%385, dtype="bool") /* ty=Tensor[(8, 98, 16), bool] */;
  %387 = cast(%373, dtype="bool") /* ty=Tensor[(8, ?, 16), bool] */;
  %388 = cast(%373, dtype="float64") /* ty=Tensor[(8, ?, 16), float64] */;
  %389 = atan(%388) /* ty=Tensor[(8, ?, 16), float64] */;
  %390 = cast(%389, dtype="float64") /* ty=Tensor[(8, ?, 16), float64] */;
  %391 = cast(%376, dtype="float64") /* ty=Tensor[(8, 98, 16), float64] */;
  %392 = floor_mod(%390, %391) /* ty=Tensor[(8, 98, 16), float64] */;
  %393 = cast(%392, dtype="bool") /* ty=Tensor[(8, 98, 16), bool] */;
  %394 = cast(%356, dtype="bool") /* ty=Tensor[(8, ?, 16), bool] */;
  %395 = %346.0;
  %396 = floor_divide(%361, %362) /* ty=Tensor[(8, ?, 16), float64] */;
  %397 = %365.0;
  %398 = %369.0;
  %399 = %370.1;
  %400 = %371.0;
  %401 = logical_and(%382, %383) /* ty=Tensor[(8, 98, 16), bool] */;
  %402 = greater(%386, %387) /* ty=Tensor[(8, 98, 16), bool] */;
  %403 = greater_equal(%393, %394) /* ty=Tensor[(8, 98, 16), bool] */;
  (%395, %366, %396, %397, %398, %399, %400, %401, %402, %403)
}

def @func_3752(%var_3730: Tensor[(715), float32]) -> (Tensor[(8, 2, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(715), float32], Tensor[(392), float32]) {
  %404 = @func_2192() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float64], Tensor[(392), float32], Tensor[(1080), float32]) */;
  %405 = cast(%var_3730, dtype="float32") /* ty=Tensor[(715), float32] */;
  %406 = cast(%var_3730, dtype="float32") /* ty=Tensor[(715), float32] */;
  %407 = reshape(%405, newshape=[13, 5, 11]) /* ty=Tensor[(13, 5, 11), float32] */;
  %408 = reshape(%406, newshape=[13, 5, 11]) /* ty=Tensor[(13, 5, 11), float32] */;
  %409 = @func_878(%407, %408) /* ty=(Tensor[(13, 5, 11), float32], Tensor[(8, 1, 16), float64]) */;
  %410 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
  %411 = %404.1;
  %412 = %409.1;
  %413 = %410.0;
  (%411, %412, %var_3730, %413)
}

def @func_3208() -> (Tensor[(14, 16, 2), float64],) {
  %414 = @func_1960() /* ty=(Tensor[(14, 16, 2), float64],) */;
  %415 = %414.0;
  (%415,)
}

def @func_492() -> (Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) {
  %416 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
  %417 = asin(%416) /* ty=Tensor[(8, 1, 16), float32] */;
  %418 = cast(%417, dtype="float64") /* ty=Tensor[(8, 1, 16), float64] */;
  %419 = acosh(%418) /* ty=Tensor[(8, 1, 16), float64] */;
  %420 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 1, 16), float32] */, dtype="bool") /* ty=Tensor[(8, 1, 16), bool] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%419, dtype="bool") /* ty=Tensor[(8, 1, 16), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %424 = cast(%417, dtype="float64") /* ty=Tensor[(8, 1, 16), float64] */;
  %425 = greater_equal(%422, %423) /* ty=Tensor[(8, ?, 16), bool] */;
  %426 = sin(%424) /* ty=Tensor[(8, 1, 16), float64] */;
  (%425, %426)
}

def @func_5652(%var_5625: Tensor[(11, 3, 13), int32], %var_5626: Tensor[(11, 3, 13), int32]) -> (Tensor[(11, 3, 13), int32], Tensor[(8, 2, 16), float32], Tensor[(11, 3, 13), float64]) {
  %427 = cast(%var_5626, dtype="int32") /* ty=Tensor[(11, 3, 13), int32] */;
  %428 = shape_of(%var_5625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%var_5625, dtype="int32") /* ty=Tensor[(11, 3, 13), int32] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %431 = cast(%var_5626, dtype="float64") /* ty=Tensor[(11, 3, 13), float64] */;
  %432 = bitwise_and(%429, %430) /* ty=Tensor[(11, 3, 13), int32] */;
  %433 = @func_4067() /* ty=Tensor[(8, 2, 16), float32] */;
  %434 = sigmoid(%431) /* ty=Tensor[(11, 3, 13), float64] */;
  (%432, %433, %434)
}

def @func_3504(%var_3435: Tensor[(14, 16, 2), float64], %var_3498: Tensor[(14, 16, 2), float64]) -> (Tensor[(8, 2, 16), float32], Tensor[(14, 16, 2), float32], Tensor[(14, 16, 2), int8], Tensor[(14, 16, 2), float64], Tensor[(9, 8, 1), float64], Tensor[(14, 16, 2), bool]) {
  %435 = @func_2871() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) */;
  %436 = @func_3208() /* ty=(Tensor[(14, 16, 2), float64],) */;
  %437 = %436.0;
  %438 = cast(%var_3435, dtype="float32") /* ty=Tensor[(14, 16, 2), float32] */;
  %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%437, dtype="float32") /* ty=Tensor[(14, 16, 2), float32] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %442 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 16, 2), float64] */, dtype="int8") /* ty=Tensor[(14, 16, 2), int8] */;
  %443 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%437, dtype="int8") /* ty=Tensor[(14, 16, 2), int8] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %446 = cast(%var_3435, dtype="float64") /* ty=Tensor[(14, 16, 2), float64] */;
  %447 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(14, 16, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 16, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 16, 2), float64] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %450 = @func_3389() /* ty=(Tensor[(9, 8, 1), float64],) */;
  %451 = cast(%var_3498, dtype="bool") /* ty=Tensor[(14, 16, 2), bool] */;
  %452 = shape_of(%var_3435, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%var_3435, dtype="bool") /* ty=Tensor[(14, 16, 2), bool] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %455 = %435.0;
  %456 = power(%440, %441) /* ty=Tensor[(14, 16, 2), float32] */;
  %457 = subtract(%444, %445) /* ty=Tensor[(14, 16, 2), int8] */;
  %458 = mod(%448, %449) /* ty=Tensor[(14, 16, 2), float64] */;
  %459 = %450.0;
  %460 = logical_and(%453, %454) /* ty=Tensor[(14, 16, 2), bool] */;
  (%455, %456, %457, %458, %459, %460)
}

def @func_1006(%var_1000: Tensor[(98, 4), float32]) -> (Tensor[(8, 1, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], Tensor[(98, 1), float32], Tensor[(98, 4), int64]) {
  %461 = @func_832() /* ty=(Tensor[(8, 1, 16), float64],) */;
  %462 = cast(meta[relay.Constant][23] /* ty=Tensor[(98, 1), float32] */, dtype="float32") /* ty=Tensor[(98, 1), float32] */;
  %463 = reshape(%462, newshape=[98, 1]) /* ty=Tensor[(98, 1), float32] */;
  %464 = @func_773(%463) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), uint16], Tensor[(8, ?, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(8, 98, 16), bool], Tensor[(8, 98, 16), bool], Tensor[(8, 98, 16), bool]) */;
  %465 = @func_943() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %466 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %467 = cast(meta[relay.Constant][23] /* ty=Tensor[(98, 1), float32] */, dtype="float32") /* ty=Tensor[(98, 1), float32] */;
  %468 = atan(%467) /* ty=Tensor[(98, 1), float32] */;
  %469 = cast(%468, dtype="float32") /* ty=Tensor[(98, 1), float32] */;
  %470 = cast(%468, dtype="int64") /* ty=Tensor[(98, 1), int64] */;
  %471 = cast(%var_1000, dtype="int64") /* ty=Tensor[(98, 4), int64] */;
  %472 = %461.0;
  %473 = %464.5;
  %474 = %465.0;
  %475 = %466.0;
  %476 = sigmoid(%469) /* ty=Tensor[(98, 1), float32] */;
  %477 = multiply(%470, %471) /* ty=Tensor[(98, 4), int64] */;
  (%472, %473, %474, %475, %476, %477)
}

def @func_4874() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %478 = @func_3010() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %479 = @func_4187() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %480 = %478.0;
  %481 = %479.0;
  (%480, %481)
}

def @func_4187() -> (Tensor[(8, 2, 16), float32],) {
  %482 = @func_2871() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) */;
  %483 = %482.0;
  (%483,)
}

def @func_4800() -> Tensor[(8, 2, 16), float32] {
  %484 = @func_2806() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %484.0
}

def @func_4734(%var_4731: Tensor[(234), float32]) -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(9, 100), float64], Tensor[(3, 6, 13), float32], Tensor[(234), float32]) {
  %485 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %486 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 100), float64] */, dtype="float64") /* ty=Tensor[(9, 100), float64] */;
  %487 = reshape(%486, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), float64] */;
  %488 = @func_3368(%487) /* ty=(Tensor[(12, 15, 5), float64], Tensor[(10, 6, 7), uint16], Tensor[(1, 70), uint16], Tensor[(420), uint16], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %489 = cast(%var_4731, dtype="float32") /* ty=Tensor[(234), float32] */;
  %490 = cast(%var_4731, dtype="float32") /* ty=Tensor[(234), float32] */;
  %491 = reshape(%489, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float32] */;
  %492 = reshape(%490, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float32] */;
  %493 = %485.0;
  %494 = %488.4;
  %495 = @func_1923(%491, %492) /* ty=Tensor[(3, 6, 13), float32] */;
  (%493, %494, meta[relay.Constant][24] /* ty=Tensor[(9, 100), float64] */, %495, %var_4731)
}

def @func_4641() -> (Tensor[(8, 2, 16), float32],) {
  %496 = @func_2442() /* ty=Tensor[(8, 2, 16), float32] */;
  (%496,)
}

def @func_3925(%var_3865: Tensor[(900), float64], %var_3903: Tensor[(1080), float32]) -> (Tensor[(572), float64], Tensor[(8, 2, 16), float32], Tensor[(900), float64], Tensor[(8, ?, 16), bool], Tensor[(1080), float32]) {
  %497 = @func_3044() /* ty=(Tensor[(4, 13, 11), float64], Tensor[(572), float64], Tensor[(9, 8, 1), float64]) */;
  %498 = cast(%var_3865, dtype="float64") /* ty=Tensor[(900), float64] */;
  %499 = reshape(%498, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), float64] */;
  %500 = @func_3368(%499) /* ty=(Tensor[(12, 15, 5), float64], Tensor[(10, 6, 7), uint16], Tensor[(1, 70), uint16], Tensor[(420), uint16], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %501 = cast(%var_3903, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %502 = reshape(%501, newshape=[1080]) /* ty=Tensor[(1080), float32] */;
  %503 = @func_1610(%502) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, ?, 16), bool], Tensor[(98), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(392), float32]) */;
  %504 = %497.1;
  %505 = %500.5;
  %506 = %503.1;
  (%504, %505, %var_3865, %506, %var_3903)
}

def @func_4225() -> (Tensor[(13, 9, 2), float64], Tensor[(8, 2, 16), float32]) {
  %507 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 9, 2), float64] */, dtype="float64") /* ty=Tensor[(13, 9, 2), float64] */;
  %508 = log10(%507) /* ty=Tensor[(13, 9, 2), float64] */;
  %509 = @func_4035() /* ty=Tensor[(8, 2, 16), float32] */;
  (%508, %509)
}

def @func_4014() -> Tensor[(11, 9, 3), float64] {
  %510 = cast(meta[relay.Constant][26] /* ty=Tensor[(11, 9, 3), float64] */, dtype="float64") /* ty=Tensor[(11, 9, 3), float64] */;
  sin(%510) /* ty=Tensor[(11, 9, 3), float64] */
}

def @func_4835(%var_4823: Tensor[(6, 6, 9), float64]) -> (Tensor[(6, 6, 9), float64], Tensor[(6, 6, 9), bool]) {
  %511 = cast(%var_4823, dtype="float64") /* ty=Tensor[(6, 6, 9), float64] */;
  %512 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 6, 9), float64] */, dtype="bool") /* ty=Tensor[(6, 6, 9), bool] */;
  %513 = shape_of(%var_4823, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%var_4823, dtype="bool") /* ty=Tensor[(6, 6, 9), bool] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %516 = atan(%511) /* ty=Tensor[(6, 6, 9), float64] */;
  %517 = less_equal(%514, %515) /* ty=Tensor[(6, 6, 9), bool] */;
  (%516, %517)
}

def @func_5890() -> Tensor[(8, 1, 16), float32] {
  %518 = @func_2895() /* ty=(Tensor[(8, 1, 16), float32], Tensor[(8, 2, 16), float64]) */;
  %518.0
}

def @func_5319() -> (Tensor[(8, 2, 16), float32],) {
  %519 = @func_2454() /* ty=Tensor[(8, 2, 16), float32] */;
  (%519,)
}

def @func_3389() -> (Tensor[(9, 8, 1), float64],) {
  %520 = @func_3044() /* ty=(Tensor[(4, 13, 11), float64], Tensor[(572), float64], Tensor[(9, 8, 1), float64]) */;
  %521 = %520.2;
  (%521,)
}

def @func_5697() -> Tensor[(5, 5, 14), float32] {
  %522 = @func_2243() /* ty=(Tensor[(14, 16, 2), float64], Tensor[(5, 5, 14), float32], Tensor[(350), float32]) */;
  %522.1
}

def @func_5573(%var_5565: Tensor[(16, 8, 4), int16], %var_5566: Tensor[(16, 8, 4), int16]) -> Tensor[(16, 8, 4), int16] {
  %523 = cast(%var_5566, dtype="int16") /* ty=Tensor[(16, 8, 4), int16] */;
  %524 = shape_of(%var_5565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%var_5565, dtype="int16") /* ty=Tensor[(16, 8, 4), int16] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%525, %526) /* ty=Tensor[(16, 8, 4), int16] */
}

def @func_3010() -> (Tensor[(8, 2, 16), float32],) {
  %527 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %528 = %527.0;
  (%528,)
}

def @func_6132() -> (Tensor[(8, 2, 16), float32], Tensor[(7, 14, 2), float64], Tensor[(98, 2), float64]) {
  %529 = @func_4603() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %530 = cast(meta[relay.Constant][28] /* ty=Tensor[(98, 2), float64] */, dtype="float64") /* ty=Tensor[(98, 2), float64] */;
  %531 = reshape(%530, newshape=[7, 14, 2]) /* ty=Tensor[(7, 14, 2), float64] */;
  %532 = %529.0;
  %533 = @func_4407(%531) /* ty=Tensor[(7, 14, 2), float64] */;
  (%532, %533, meta[relay.Constant][28] /* ty=Tensor[(98, 2), float64] */)
}

def @func_1362() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %534 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %535 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
  %536 = %534.0;
  %537 = %535.1;
  (%536, %537)
}

def @func_6185(%var_6162: int64, %var_6163: Tensor[(400, 1), int64]) -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(98), float32], Tensor[(400, 1), int8]) {
  %538 = @func_2806() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %539 = cast(%var_6162, dtype="int64") /* ty=int64 */;
  %540 = cast(%var_6163, dtype="int64") /* ty=Tensor[(400, 1), int64] */;
  %541 = cast(meta[relay.Constant][29] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %542 = reshape(%539, newshape=[]) /* ty=int64 */;
  %543 = reshape(%540, newshape=[5, 8, 10]) /* ty=Tensor[(5, 8, 10), int64] */;
  %544 = reshape(%541, newshape=[98]) /* ty=Tensor[(98), float32] */;
  %545 = @func_3161(%542, %543, %544) /* ty=(Tensor[(5, 8, 10), float64], Tensor[(5, 8, 10), bool], Tensor[(8, 2, 16), float32], Tensor[(98), float32]) */;
  %546 = cast(%var_6163, dtype="int8") /* ty=Tensor[(400, 1), int8] */;
  %547 = cast(%var_6162, dtype="int8") /* ty=int8 */;
  %548 = %538.0;
  %549 = @func_4472() /* ty=Tensor[(8, 2, 16), float64] */;
  %550 = %545.2;
  %551 = left_shift(%546, %547) /* ty=Tensor[(400, 1), int8] */;
  (%548, %549, %550, meta[relay.Constant][29] /* ty=Tensor[(98), float32] */, %551)
}

def @func_2033() -> (Tensor[(14, 16, 2), float64], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %552 = @func_1960() /* ty=(Tensor[(14, 16, 2), float64],) */;
  %553 = @func_943() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %554 = @func_943() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %555 = @func_1362() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %556 = %552.0;
  %557 = %553.0;
  %558 = %554.0;
  %559 = %555.1;
  (%556, %557, %558, %559)
}

def @func_5239() -> Tensor[(8, 2, 16), float32] {
  @func_4067() /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_5128() -> Tensor[(8, 2, 16), float64] {
  @func_4472() /* ty=Tensor[(8, 2, 16), float64] */
}

def @func_1170(%var_1163: Tensor[(98, 1), float32]) -> (Tensor[(8, 2, 16), float32], Tensor[(7, 14, ?), bool], Tensor[(98, 1), float32], Tensor[(8, 2, 16), float32]) {
  %560 = @func_1123() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) */;
  %561 = cast(%var_1163, dtype="float32") /* ty=Tensor[(98, 1), float32] */;
  %562 = reshape(%561, newshape=[7, 14, 1]) /* ty=Tensor[(7, 14, 1), float32] */;
  %563 = @func_543(%562) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool]) */;
  %564 = @func_1123() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) */;
  %565 = %560.0;
  %566 = %563.1;
  %567 = %564.0;
  (%565, %566, %var_1163, %567)
}

def @func_2296(%var_2270: int8) -> (Tensor[(8, 6, 4), int8], Tensor[(8, 6, 4), float64], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool]) {
  %568 = cast(%var_2270, dtype="int8") /* ty=int8 */;
  %569 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 6, 4), int8] */, dtype="int8") /* ty=Tensor[(8, 6, 4), int8] */;
  %570 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 6, 4), int8] */, dtype="float32") /* ty=Tensor[(8, 6, 4), float32] */;
  %571 = log10(%570) /* ty=Tensor[(8, 6, 4), float32] */;
  %572 = cast(%571, dtype="float64") /* ty=Tensor[(8, 6, 4), float64] */;
  %573 = @func_832() /* ty=(Tensor[(8, 1, 16), float64],) */;
  %574 = @func_1123() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) */;
  %575 = add(%568, %569) /* ty=Tensor[(8, 6, 4), int8] */;
  %576 = atanh(%572) /* ty=Tensor[(8, 6, 4), float64] */;
  %577 = %573.0;
  %578 = %574.1;
  (%575, %576, %577, %578)
}

def @func_5056() -> (Tensor[(8, 2, 16), float32], Tensor[(14, 4, 13), bool], Tensor[(728), float32], Tensor[(9, 8, 10), float64], Tensor[(720), float32], Tensor[(8, 2, 16), float64]) {
  %579 = cast(meta[relay.Constant][31] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %580 = cast(meta[relay.Constant][31] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %581 = reshape(%579, newshape=[14, 4, 13]) /* ty=Tensor[(14, 4, 13), float32] */;
  %582 = reshape(%580, newshape=[14, 4, 13]) /* ty=Tensor[(14, 4, 13), float32] */;
  %583 = cast(meta[relay.Constant][32] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %584 = cast(meta[relay.Constant][32] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %585 = reshape(%583, newshape=[9, 8, 10]) /* ty=Tensor[(9, 8, 10), float32] */;
  %586 = reshape(%584, newshape=[9, 8, 10]) /* ty=Tensor[(9, 8, 10), float32] */;
  %587 = @func_1557(%585, %586) /* ty=(Tensor[(9, 8, 10), float32], Tensor[(9, 8, 10), float64], Tensor[(9, 8, 10), bool]) */;
  %588 = @func_4800() /* ty=Tensor[(8, 2, 16), float32] */;
  %589 = @func_4265(%581, %582) /* ty=Tensor[(14, 4, 13), bool] */;
  %590 = %587.1;
  %591 = @func_2705() /* ty=Tensor[(8, 2, 16), float64] */;
  (%588, %589, meta[relay.Constant][31] /* ty=Tensor[(728), float32] */, %590, meta[relay.Constant][32] /* ty=Tensor[(720), float32] */, %591)
}

def @func_5524() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %592 = @func_4641() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %593 = @func_4874() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %594 = @func_5239() /* ty=Tensor[(8, 2, 16), float32] */;
  %595 = %592.0;
  %596 = %593.1;
  (%594, %595, %596)
}

def @func_1610(%var_1592: Tensor[(1080), float32]) -> (Tensor[(8, ?, 16), bool], Tensor[(8, ?, 16), bool], Tensor[(98), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(392), float32]) {
  %597 = cast(meta[relay.Constant][33] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %598 = reshape(%597, newshape=[98, 1]) /* ty=Tensor[(98, 1), float32] */;
  %599 = @func_773(%598) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), uint16], Tensor[(8, ?, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(8, 98, 16), bool], Tensor[(8, 98, 16), bool], Tensor[(8, 98, 16), bool]) */;
  %600 = cast(meta[relay.Constant][33] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %601 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %602 = @func_1362() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %603 = cast(%var_1592, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %604 = reshape(%603, newshape=[9, 8, 15]) /* ty=Tensor[(9, 8, 15), float32] */;
  %605 = @func_1099(%604) /* ty=(Tensor[(9, 8, 15), int32], Tensor[(9, 8, 1), float32]) */;
  %606 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
  %607 = @func_1282() /* ty=Tensor[(8, ?, 16), bool] */;
  %608 = %599.4;
  %609 = tan(%600) /* ty=Tensor[(98), float32] */;
  %610 = %601.0;
  %611 = %602.0;
  %612 = %605.1;
  %613 = %606.0;
  (%607, %608, %609, %610, %611, %612, %var_1592, %613)
}

def @func_2454() -> Tensor[(8, 2, 16), float32] {
  %614 = @func_1362() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %614.1
}

def @func_4703(%var_4654: Tensor[(4, 13, 11), float64]) -> (Tensor[(4, 13, 11), bool], Tensor[(350), float32], Tensor[(392), float32], Tensor[(5, 5, 14), float32], Tensor[(8, 1, 16), float64], Tensor[(4, 13, 11), float32]) {
  %615 = @func_3044() /* ty=(Tensor[(4, 13, 11), float64], Tensor[(572), float64], Tensor[(9, 8, 1), float64]) */;
  %616 = %615.0;
  %617 = cast(%var_4654, dtype="bool") /* ty=Tensor[(4, 13, 11), bool] */;
  %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%616, dtype="bool") /* ty=Tensor[(4, 13, 11), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %621 = @func_2243() /* ty=(Tensor[(14, 16, 2), float64], Tensor[(5, 5, 14), float32], Tensor[(350), float32]) */;
  %622 = @func_2192() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float64], Tensor[(392), float32], Tensor[(1080), float32]) */;
  %623 = %621.2;
  %624 = cast(%623, dtype="float32") /* ty=Tensor[(350), float32] */;
  %625 = reshape(%624, newshape=[5, 5, 14]) /* ty=Tensor[(5, 5, 14), float32] */;
  %626 = @func_1786(%625) /* ty=(Tensor[(5, 5, 14), float32],) */;
  %627 = @func_794() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %628 = cast(%616, dtype="float64") /* ty=Tensor[(4, 13, 11), float64] */;
  %629 = acosh(%628) /* ty=Tensor[(4, 13, 11), float64] */;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(4, 13, 11), float32] */;
  %631 = not_equal(%619, %620) /* ty=Tensor[(4, 13, 11), bool] */;
  %632 = %622.2;
  %633 = %626.0;
  %634 = %627.1;
  %635 = rsqrt(%630) /* ty=Tensor[(4, 13, 11), float32] */;
  (%631, %623, %632, %633, %634, %635)
}

def @func_6083() -> Tensor[(8, 2, 16), float32] {
  @func_4800() /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_4603() -> (Tensor[(8, 2, 16), float32],) {
  %636 = @func_2454() /* ty=Tensor[(8, 2, 16), float32] */;
  (%636,)
}

def @func_832() -> (Tensor[(8, 1, 16), float64],) {
  %637 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %638 = %637.1;
  (%638,)
}

def @func_3265() -> (Tensor[(8, ?, 16), float64],) {
  %639 = @func_1282() /* ty=Tensor[(8, ?, 16), bool] */;
  %640 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 1, 16), bool] */, dtype="float64") /* ty=Tensor[(8, 1, 16), float64] */;
  %641 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%639, dtype="float64") /* ty=Tensor[(8, ?, 16), float64] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %644 = mod(%642, %643) /* ty=Tensor[(8, ?, 16), float64] */;
  (%644,)
}

def @func_1225() -> (Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) {
  %645 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %646 = %645.0;
  %647 = cast(%646, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %648 = atanh(%647) /* ty=Tensor[(8, 2, 16), float32] */;
  %649 = cast(meta[relay.Constant][35] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %650 = reshape(%649, newshape=[98, 4]) /* ty=Tensor[(98, 4), float32] */;
  %651 = @func_1006(%650) /* ty=(Tensor[(8, 1, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], Tensor[(98, 1), float32], Tensor[(98, 4), int64]) */;
  %652 = %651.3;
  %653 = cast(%648, dtype="uint32") /* ty=Tensor[(8, 2, 16), uint32] */;
  %654 = cast(%652, dtype="uint32") /* ty=Tensor[(8, ?, 16), uint32] */;
  %655 = left_shift(%653, %654) /* ty=Tensor[(8, 2, 16), uint32] */;
  %656 = cast(%655, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %657 = cast(meta[relay.Constant][35] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %658 = reshape(%657, newshape=[98, 4]) /* ty=Tensor[(98, 4), float32] */;
  %659 = @func_1006(%658) /* ty=(Tensor[(8, 1, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], Tensor[(98, 1), float32], Tensor[(98, 4), int64]) */;
  %660 = asin(%656) /* ty=Tensor[(8, 2, 16), float32] */;
  %661 = %659.1;
  (meta[relay.Constant][35] /* ty=Tensor[(392), float32] */, %660, %661)
}

def @func_2361(%var_2347: Tensor[(10, 1, 7), uint16], %var_2348: Tensor[(10, 6, 7), uint16]) -> Tensor[(10, 6, 7), uint16] {
  %662 = cast(%var_2347, dtype="uint16") /* ty=Tensor[(10, 1, 7), uint16] */;
  %663 = cast(%var_2348, dtype="uint16") /* ty=Tensor[(10, 6, 7), uint16] */;
  logical_xor(%662, %663) /* ty=Tensor[(10, 6, 7), uint16] */
}

def @func_1064() -> (Tensor[(8, 2, 16), float32],) {
  %664 = @func_943() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %665 = %664.0;
  (%665,)
}

def @func_1557(%var_1535: Tensor[(9, 8, 10), float32], %var_1552: Tensor[(9, 8, 10), float32]) -> (Tensor[(9, 8, 10), float32], Tensor[(9, 8, 10), float64], Tensor[(9, 8, 10), bool]) {
  %666 = @func_1442() /* ty=(Tensor[(8, 2, 16), uint64], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(98, 1), float32], Tensor[(1, 392), float32], Tensor[(8, ?, 16), bool], Tensor[(392), float32]) */;
  %667 = %666.1;
  %668 = cast(%667, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
  %669 = cast(%var_1535, dtype="float32") /* ty=Tensor[(9, 8, 10), float32] */;
  %670 = cast(%var_1535, dtype="float64") /* ty=Tensor[(9, 8, 10), float64] */;
  %671 = cast(%667, dtype="float64") /* ty=Tensor[(9, 8, 1), float64] */;
  %672 = cast(%var_1552, dtype="bool") /* ty=Tensor[(9, 8, 10), bool] */;
  %673 = shape_of(%var_1535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%var_1535, dtype="bool") /* ty=Tensor[(9, 8, 10), bool] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %676 = floor_mod(%668, %669) /* ty=Tensor[(9, 8, 10), float32] */;
  %677 = divide(%670, %671) /* ty=Tensor[(9, 8, 10), float64] */;
  %678 = equal(%674, %675) /* ty=Tensor[(9, 8, 10), bool] */;
  (%676, %677, %678)
}

def @func_1786(%var_1779: Tensor[(5, 5, 14), float32]) -> (Tensor[(5, 5, 14), float32],) {
  %679 = cast(%var_1779, dtype="float32") /* ty=Tensor[(5, 5, 14), float32] */;
  %680 = tan(%679) /* ty=Tensor[(5, 5, 14), float32] */;
  (%680,)
}

def @func_2871() -> (Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) {
  %681 = @func_1715() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %682 = %681.0;
  %683 = @func_1282() /* ty=Tensor[(8, ?, 16), bool] */;
  (%682, %683)
}

def @func_2705() -> Tensor[(8, 2, 16), float64] {
  %684 = @func_2192() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float64], Tensor[(392), float32], Tensor[(1080), float32]) */;
  %684.1
}

def @func_5206() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %685 = @func_2871() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) */;
  %686 = @func_4035() /* ty=Tensor[(8, 2, 16), float32] */;
  %687 = cast(%686, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %688 = @func_4641() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %689 = %685.0;
  %690 = sin(%687) /* ty=Tensor[(8, 2, 16), float32] */;
  %691 = %688.0;
  (%689, %690, %691)
}

def @func_4265(%var_4250: Tensor[(14, 4, 13), float32], %var_4251: Tensor[(14, 4, 13), float32]) -> Tensor[(14, 4, 13), bool] {
  %692 = cast(%var_4251, dtype="bool") /* ty=Tensor[(14, 4, 13), bool] */;
  %693 = shape_of(%var_4250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%var_4250, dtype="bool") /* ty=Tensor[(14, 4, 13), bool] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%694, %695) /* ty=Tensor[(14, 4, 13), bool] */
}

def @func_2442() -> Tensor[(8, 2, 16), float32] {
  %696 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %697 = %696.0;
  %698 = cast(%697, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  acosh(%698) /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_4067() -> Tensor[(8, 2, 16), float32] {
  %699 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %699.0
}

def @func_1527(%var_1496: Tensor[(392), float32], %var_1498: Tensor[(16, 11, 15), float64]) -> (Tensor[(98, 1), float32], Tensor[(392), float32], Tensor[(16, 11, 15), bool], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool], Tensor[(392), float32]) {
  %700 = cast(%var_1496, dtype="float32") /* ty=Tensor[(392), float32] */;
  %701 = reshape(%700, newshape=[98, 4]) /* ty=Tensor[(98, 4), float32] */;
  %702 = @func_1006(%701) /* ty=(Tensor[(8, 1, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], Tensor[(98, 1), float32], Tensor[(98, 4), int64]) */;
  %703 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 11, 15), float64] */, dtype="float64") /* ty=Tensor[(16, 11, 15), float64] */;
  %704 = sin(%703) /* ty=Tensor[(16, 11, 15), float64] */;
  %705 = cast(%var_1498, dtype="bool") /* ty=Tensor[(16, 11, 15), bool] */;
  %706 = shape_of(%704, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%704, dtype="bool") /* ty=Tensor[(16, 11, 15), bool] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %709 = @func_794() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %710 = @func_1442() /* ty=(Tensor[(8, 2, 16), uint64], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(98, 1), float32], Tensor[(1, 392), float32], Tensor[(8, ?, 16), bool], Tensor[(392), float32]) */;
  %711 = %702.4;
  %712 = cast(%711, dtype="float32") /* ty=Tensor[(98, 1), float32] */;
  %713 = reshape(%712, newshape=[7, 14, 1]) /* ty=Tensor[(7, 14, 1), float32] */;
  %714 = @func_543(%713) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool]) */;
  %715 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
  %716 = not_equal(%707, %708) /* ty=Tensor[(16, 11, 15), bool] */;
  %717 = %709.1;
  %718 = %710.5;
  %719 = %714.1;
  %720 = %715.0;
  (%711, %var_1496, %716, %717, %718, %719, %720)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5460() -> (Tensor[(8, 2, 16), float32],) {
  %0 = @func_4327() /* ty=Tensor[(8, 2, 16), float32] */;
  (%0,)
}

def @func_494() -> (Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) {
  @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */
}

def @func_2693(%var_2683: Tensor[(8, 2, 16), float32]) -> Tensor[(8, 2, 16), bool] {
  %1 = @func_1339() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %2 = %1.0;
  %3 = cast(%2, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %4 = sigmoid(%3) /* ty=Tensor[(8, 2, 16), float32] */;
  %5 = cast(%var_2683, dtype="bool") /* ty=Tensor[(8, 2, 16), bool] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="bool") /* ty=Tensor[(8, 2, 16), bool] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%7, %8) /* ty=Tensor[(8, 2, 16), bool] */
}

def @func_1170(%var_1163: Tensor[(98, 1), float32]) -> (Tensor[(8, 2, 16), float32], Tensor[(7, 14, ?), bool], Tensor[(98, 1), float32], Tensor[(8, 2, 16), float32]) {
  %9 = @func_1123() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) */;
  %10 = cast(%var_1163, dtype="float32") /* ty=Tensor[(98, 1), float32] */;
  %11 = reshape(%10, newshape=[7, 14, 1]) /* ty=Tensor[(7, 14, 1), float32] */;
  %12 = @func_543(%11) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool]) */;
  %13 = @func_1123() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) */;
  %14 = %9.0;
  %15 = %12.1;
  %16 = %13.0;
  (%14, %15, %var_1163, %16)
}

def @func_4951() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %20 = fn () -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
    %17 = @func_2824() /* ty=Tensor[(8, 2, 16), float32] */;
    %18 = @func_4067() /* ty=Tensor[(8, 2, 16), float32] */;
    %19 = @func_2454() /* ty=Tensor[(8, 2, 16), float32] */;
    (%17, %18, %19)
  };
  %20() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */
}

def @func_6185(%var_6162: int64, %var_6163: Tensor[(400, 1), int64]) -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(98), float32], Tensor[(400, 1), int8]) {
  %21 = @func_2806() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %22 = cast(%var_6162, dtype="int64") /* ty=int64 */;
  %23 = cast(%var_6163, dtype="int64") /* ty=Tensor[(400, 1), int64] */;
  %24 = cast(meta[relay.Constant][0] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %25 = reshape(%22, newshape=[]) /* ty=int64 */;
  %26 = reshape(%23, newshape=[5, 8, 10]) /* ty=Tensor[(5, 8, 10), int64] */;
  %27 = reshape(%24, newshape=[98]) /* ty=Tensor[(98), float32] */;
  %28 = @func_3161(%25, %26, %27) /* ty=(Tensor[(5, 8, 10), float64], Tensor[(5, 8, 10), bool], Tensor[(8, 2, 16), float32], Tensor[(98), float32]) */;
  %29 = cast(%var_6163, dtype="int8") /* ty=Tensor[(400, 1), int8] */;
  %30 = cast(%var_6162, dtype="int8") /* ty=int8 */;
  %31 = %21.0;
  %32 = @func_4472() /* ty=Tensor[(8, 2, 16), float64] */;
  %33 = %28.2;
  %34 = left_shift(%29, %30) /* ty=Tensor[(400, 1), int8] */;
  (%31, %32, %33, meta[relay.Constant][0] /* ty=Tensor[(98), float32] */, %34)
}

def @func_3391() -> (Tensor[(9, 8, 1), float64],) {
  @func_3389() /* ty=(Tensor[(9, 8, 1), float64],) */
}

def @func_5615() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32]) {
  %35 = @func_1339() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %36 = @func_794() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %37 = %35.0;
  %38 = %36.1;
  %39 = @func_2824() /* ty=Tensor[(8, 2, 16), float32] */;
  (%37, %38, %39)
}

def @func_6134() -> (Tensor[(8, 2, 16), float32], Tensor[(7, 14, 2), float64], Tensor[(98, 2), float64]) {
  @func_6132() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(7, 14, 2), float64], Tensor[(98, 2), float64]) */
}

def @func_1099(%var_1091: Tensor[(9, 8, 15), float32]) -> (Tensor[(9, 8, 15), int32], Tensor[(9, 8, 1), float32]) {
  %40 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 8, 1), float32] */, dtype="int32") /* ty=Tensor[(9, 8, 1), int32] */;
  %41 = cast(%var_1091, dtype="int32") /* ty=Tensor[(9, 8, 15), int32] */;
  %42 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 8, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
  %43 = erf(%42) /* ty=Tensor[(9, 8, 1), float32] */;
  %44 = cast(%43, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
  %45 = subtract(%40, %41) /* ty=Tensor[(9, 8, 15), int32] */;
  %46 = acosh(%44) /* ty=Tensor[(9, 8, 1), float32] */;
  (%45, %46)
}

def @func_1789(%var_1787: Tensor[(5, 5, 14), float32]) -> (Tensor[(5, 5, 14), float32],) {
  @func_1786(%var_1787) /* ty=(Tensor[(5, 5, 14), float32],) */
}

def @func_4111() -> (Tensor[(8, 2, 16), float32], Tensor[(14, 16, 2), float32]) {
  @func_4109() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(14, 16, 2), float32]) */
}

def @func_3304(%var_3296: Tensor[(8, 10, 16), bool]) -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 10, 16), int16]) {
  %47 = @func_2033() /* ty=(Tensor[(14, 16, 2), float64], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %48 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
  %49 = @func_2172() /* ty=(Tensor[(8, ?, 16), bool],) */;
  %50 = %49.0;
  %51 = cast(%50, dtype="int16") /* ty=Tensor[(8, ?, 16), int16] */;
  %52 = cast(%var_3296, dtype="int16") /* ty=Tensor[(8, 10, 16), int16] */;
  %53 = %47.2;
  %54 = %48.1;
  %55 = bitwise_xor(%51, %52) /* ty=Tensor[(8, 10, 16), int16] */;
  (%53, %54, %55)
}

def @func_3976(%var_3975: Tensor[(7, 9, 14), float64]) -> Tensor[(7, 9, 14), float64] {
  %57 = fn (%var_3963: Tensor[(7, 9, 14), float64]) -> Tensor[(7, 9, 14), float64] {
    %56 = cast(%var_3963, dtype="float64") /* ty=Tensor[(7, 9, 14), float64] */;
    exp(%56) /* ty=Tensor[(7, 9, 14), float64] */
  };
  %57(%var_3975) /* ty=Tensor[(7, 9, 14), float64] */
}

def @func_5206() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %58 = @func_2871() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) */;
  %59 = @func_4035() /* ty=Tensor[(8, 2, 16), float32] */;
  %60 = cast(%59, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %61 = @func_4641() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %62 = %58.0;
  %63 = sin(%60) /* ty=Tensor[(8, 2, 16), float32] */;
  %64 = %61.0;
  (%62, %63, %64)
}

def @func_1530(%var_1528: Tensor[(392), float32], %var_1529: Tensor[(16, 11, 15), float64]) -> (Tensor[(98, 1), float32], Tensor[(392), float32], Tensor[(16, 11, 15), bool], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool], Tensor[(392), float32]) {
  %86 = fn (%var_1496: Tensor[(392), float32], %var_1498: Tensor[(16, 11, 15), float64]) -> (Tensor[(98, 1), float32], Tensor[(392), float32], Tensor[(16, 11, 15), bool], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool], Tensor[(392), float32]) {
    %65 = cast(%var_1496, dtype="float32") /* ty=Tensor[(392), float32] */;
    %66 = reshape(%65, newshape=[98, 4]) /* ty=Tensor[(98, 4), float32] */;
    %67 = @func_1006(%66) /* ty=(Tensor[(8, 1, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], Tensor[(98, 1), float32], Tensor[(98, 4), int64]) */;
    %68 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 11, 15), float64] */, dtype="float64") /* ty=Tensor[(16, 11, 15), float64] */;
    %69 = sin(%68) /* ty=Tensor[(16, 11, 15), float64] */;
    %70 = cast(%var_1498, dtype="bool") /* ty=Tensor[(16, 11, 15), bool] */;
    %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
    %72 = cast(%69, dtype="bool") /* ty=Tensor[(16, 11, 15), bool] */;
    %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %74 = @func_794() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
    %75 = @func_1442() /* ty=(Tensor[(8, 2, 16), uint64], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(98, 1), float32], Tensor[(1, 392), float32], Tensor[(8, ?, 16), bool], Tensor[(392), float32]) */;
    %76 = %67.4;
    %77 = cast(%76, dtype="float32") /* ty=Tensor[(98, 1), float32] */;
    %78 = reshape(%77, newshape=[7, 14, 1]) /* ty=Tensor[(7, 14, 1), float32] */;
    %79 = @func_543(%78) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool]) */;
    %80 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
    %81 = not_equal(%72, %73) /* ty=Tensor[(16, 11, 15), bool] */;
    %82 = %74.1;
    %83 = %75.5;
    %84 = %79.1;
    %85 = %80.0;
    (%76, %var_1496, %81, %82, %83, %84, %85)
  };
  %86(%var_1528, %var_1529) /* ty=(Tensor[(98, 1), float32], Tensor[(392), float32], Tensor[(16, 11, 15), bool], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool], Tensor[(392), float32]) */
}

def @func_2296(%var_2270: int8) -> (Tensor[(8, 6, 4), int8], Tensor[(8, 6, 4), float64], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool]) {
  %87 = cast(%var_2270, dtype="int8") /* ty=int8 */;
  %88 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 6, 4), int8] */, dtype="int8") /* ty=Tensor[(8, 6, 4), int8] */;
  %89 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 6, 4), int8] */, dtype="float32") /* ty=Tensor[(8, 6, 4), float32] */;
  %90 = log10(%89) /* ty=Tensor[(8, 6, 4), float32] */;
  %91 = cast(%90, dtype="float64") /* ty=Tensor[(8, 6, 4), float64] */;
  %92 = @func_832() /* ty=(Tensor[(8, 1, 16), float64],) */;
  %93 = @func_1123() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) */;
  %94 = add(%87, %88) /* ty=Tensor[(8, 6, 4), int8] */;
  %95 = atanh(%91) /* ty=Tensor[(8, 6, 4), float64] */;
  %96 = %92.0;
  %97 = %93.1;
  (%94, %95, %96, %97)
}

def @func_1560(%var_1558: Tensor[(9, 8, 10), float32], %var_1559: Tensor[(9, 8, 10), float32]) -> (Tensor[(9, 8, 10), float32], Tensor[(9, 8, 10), float64], Tensor[(9, 8, 10), bool]) {
  %111 = fn (%var_1535: Tensor[(9, 8, 10), float32], %var_1552: Tensor[(9, 8, 10), float32]) -> (Tensor[(9, 8, 10), float32], Tensor[(9, 8, 10), float64], Tensor[(9, 8, 10), bool]) {
    %98 = @func_1442() /* ty=(Tensor[(8, 2, 16), uint64], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(98, 1), float32], Tensor[(1, 392), float32], Tensor[(8, ?, 16), bool], Tensor[(392), float32]) */;
    %99 = %98.1;
    %100 = cast(%99, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
    %101 = cast(%var_1535, dtype="float32") /* ty=Tensor[(9, 8, 10), float32] */;
    %102 = cast(%var_1535, dtype="float64") /* ty=Tensor[(9, 8, 10), float64] */;
    %103 = cast(%99, dtype="float64") /* ty=Tensor[(9, 8, 1), float64] */;
    %104 = cast(%var_1552, dtype="bool") /* ty=Tensor[(9, 8, 10), bool] */;
    %105 = shape_of(%var_1535, dtype="int32") /* ty=Tensor[(3), int32] */;
    %106 = cast(%var_1535, dtype="bool") /* ty=Tensor[(9, 8, 10), bool] */;
    %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %108 = floor_mod(%100, %101) /* ty=Tensor[(9, 8, 10), float32] */;
    %109 = divide(%102, %103) /* ty=Tensor[(9, 8, 10), float64] */;
    %110 = equal(%106, %107) /* ty=Tensor[(9, 8, 10), bool] */;
    (%108, %109, %110)
  };
  %111(%var_1558, %var_1559) /* ty=(Tensor[(9, 8, 10), float32], Tensor[(9, 8, 10), float64], Tensor[(9, 8, 10), bool]) */
}

def @func_3755(%var_3753: Tensor[(715), float32]) -> (Tensor[(8, 2, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(715), float32], Tensor[(392), float32]) {
  @func_3752(%var_3753) /* ty=(Tensor[(8, 2, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(715), float32], Tensor[(392), float32]) */
}

def @func_1613(%var_1611: Tensor[(1080), float32]) -> (Tensor[(8, ?, 16), bool], Tensor[(8, ?, 16), bool], Tensor[(98), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(392), float32]) {
  @func_1610(%var_1611) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, ?, 16), bool], Tensor[(98), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(392), float32]) */
}

def @func_4227() -> (Tensor[(13, 9, 2), float64], Tensor[(8, 2, 16), float32]) {
  @func_4225() /* ty=(Tensor[(13, 9, 2), float64], Tensor[(8, 2, 16), float32]) */
}

def @func_4328() -> Tensor[(8, 2, 16), float32] {
  %113 = fn () -> Tensor[(8, 2, 16), float32] {
    %112 = @func_1362() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
    %112.0
  };
  %113() /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_1610(%var_1592: Tensor[(1080), float32]) -> (Tensor[(8, ?, 16), bool], Tensor[(8, ?, 16), bool], Tensor[(98), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(392), float32]) {
  %114 = cast(meta[relay.Constant][4] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %115 = reshape(%114, newshape=[98, 1]) /* ty=Tensor[(98, 1), float32] */;
  %116 = @func_773(%115) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), uint16], Tensor[(8, ?, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(8, 98, 16), bool], Tensor[(8, 98, 16), bool], Tensor[(8, 98, 16), bool]) */;
  %117 = cast(meta[relay.Constant][4] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %118 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %119 = @func_1362() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %120 = cast(%var_1592, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %121 = reshape(%120, newshape=[9, 8, 15]) /* ty=Tensor[(9, 8, 15), float32] */;
  %122 = @func_1099(%121) /* ty=(Tensor[(9, 8, 15), int32], Tensor[(9, 8, 1), float32]) */;
  %123 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
  %124 = @func_1282() /* ty=Tensor[(8, ?, 16), bool] */;
  %125 = %116.4;
  %126 = tan(%117) /* ty=Tensor[(98), float32] */;
  %127 = %118.0;
  %128 = %119.0;
  %129 = %122.1;
  %130 = %123.0;
  (%124, %125, %126, %127, %128, %129, %var_1592, %130)
}

def @func_4706(%var_4704: Tensor[(4, 13, 11), float64]) -> (Tensor[(4, 13, 11), bool], Tensor[(350), float32], Tensor[(392), float32], Tensor[(5, 5, 14), float32], Tensor[(8, 1, 16), float64], Tensor[(4, 13, 11), float32]) {
  @func_4703(%var_4704) /* ty=(Tensor[(4, 13, 11), bool], Tensor[(350), float32], Tensor[(392), float32], Tensor[(5, 5, 14), float32], Tensor[(8, 1, 16), float64], Tensor[(4, 13, 11), float32]) */
}

def @func_4585() -> (Tensor[(8, 11, 16), uint32], Tensor[(8, 11, 16), uint8], Tensor[(14, 16, 2), float64], Tensor[(8, 11, 16), float32]) {
  @func_4583() /* ty=(Tensor[(8, 11, 16), uint32], Tensor[(8, 11, 16), uint8], Tensor[(14, 16, 2), float64], Tensor[(8, 11, 16), float32]) */
}

def @func_3046() -> (Tensor[(4, 13, 11), float64], Tensor[(572), float64], Tensor[(9, 8, 1), float64]) {
  @func_3044() /* ty=(Tensor[(4, 13, 11), float64], Tensor[(572), float64], Tensor[(9, 8, 1), float64]) */
}

def @func_1926(%var_1924: Tensor[(3, 6, 13), float32], %var_1925: Tensor[(3, 6, 13), float32]) -> Tensor[(3, 6, 13), float32] {
  %135 = fn (%var_1904: Tensor[(3, 6, 13), float32], %var_1905: Tensor[(3, 6, 13), float32]) -> Tensor[(3, 6, 13), float32] {
    %131 = cast(%var_1905, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
    %132 = shape_of(%var_1904, dtype="int32") /* ty=Tensor[(3), int32] */;
    %133 = cast(%var_1904, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
    %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%133, %134) /* ty=Tensor[(3, 6, 13), float32] */
  };
  %135(%var_1924, %var_1925) /* ty=Tensor[(3, 6, 13), float32] */
}

def @func_1227() -> (Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) {
  @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */
}

def @func_4306() -> (Tensor[(8, 2, 16), float32],) {
  %136 = @func_1339() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %137 = %136.1;
  (%137,)
}

def @func_4265(%var_4250: Tensor[(14, 4, 13), float32], %var_4251: Tensor[(14, 4, 13), float32]) -> Tensor[(14, 4, 13), bool] {
  %138 = cast(%var_4251, dtype="bool") /* ty=Tensor[(14, 4, 13), bool] */;
  %139 = shape_of(%var_4250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%var_4250, dtype="bool") /* ty=Tensor[(14, 4, 13), bool] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%140, %141) /* ty=Tensor[(14, 4, 13), bool] */
}

def @func_5321() -> (Tensor[(8, 2, 16), float32],) {
  @func_5319() /* ty=(Tensor[(8, 2, 16), float32],) */
}

def @func_3208() -> (Tensor[(14, 16, 2), float64],) {
  %142 = @func_1960() /* ty=(Tensor[(14, 16, 2), float64],) */;
  %143 = %142.0;
  (%143,)
}

def @func_6031() -> Tensor[(8, 2, 16), float32] {
  %144 = fn () -> Tensor[(8, 2, 16), float32] {
    @func_4327() /* ty=Tensor[(8, 2, 16), float32] */
  };
  %144() /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_2638(%var_2599: Tensor[(8, 2, 16), float32], %var_2620: Tensor[(8, 2, 16), float32]) -> (Tensor[(8, 2, 16), bool], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), uint8], Tensor[(8, 2, 16), float32]) {
  %145 = @func_1339() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %146 = %145.1;
  %147 = cast(%var_2599, dtype="bool") /* ty=Tensor[(8, 2, 16), bool] */;
  %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%146, dtype="bool") /* ty=Tensor[(8, 2, 16), bool] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %151 = @func_1339() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %152 = @func_2442() /* ty=Tensor[(8, 2, 16), float32] */;
  %153 = cast(%var_2620, dtype="float64") /* ty=Tensor[(8, 2, 16), float64] */;
  %154 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%146, dtype="float64") /* ty=Tensor[(8, 2, 16), float64] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %157 = floor_mod(%155, %156) /* ty=Tensor[(8, 2, 16), float64] */;
  %158 = cast(%157, dtype="uint8") /* ty=Tensor[(8, 2, 16), uint8] */;
  %159 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%152, dtype="uint8") /* ty=Tensor[(8, 2, 16), uint8] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %162 = cast(%146, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %163 = less(%149, %150) /* ty=Tensor[(8, 2, 16), bool] */;
  %164 = %151.1;
  %165 = right_shift(%160, %161) /* ty=Tensor[(8, 2, 16), uint8] */;
  %166 = cosh(%162) /* ty=Tensor[(8, 2, 16), float32] */;
  (%163, %164, %165, %166)
}

def @func_1009(%var_1007: Tensor[(98, 4), float32]) -> (Tensor[(8, 1, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], Tensor[(98, 1), float32], Tensor[(98, 4), int64]) {
  @func_1006(%var_1007) /* ty=(Tensor[(8, 1, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], Tensor[(98, 1), float32], Tensor[(98, 4), int64]) */
}

def @func_4037() -> Tensor[(8, 2, 16), float32] {
  @func_4035() /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_5239() -> Tensor[(8, 2, 16), float32] {
  @func_4067() /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_5319() -> (Tensor[(8, 2, 16), float32],) {
  %167 = @func_2454() /* ty=Tensor[(8, 2, 16), float32] */;
  (%167,)
}

def @func_4583() -> (Tensor[(8, 11, 16), uint32], Tensor[(8, 11, 16), uint8], Tensor[(14, 16, 2), float64], Tensor[(8, 11, 16), float32]) {
  %168 = @func_1282() /* ty=Tensor[(8, ?, 16), bool] */;
  %169 = cast(%168, dtype="uint32") /* ty=Tensor[(8, ?, 16), uint32] */;
  %170 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 11, 16), bool] */, dtype="uint32") /* ty=Tensor[(8, 11, 16), uint32] */;
  %171 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 11, 16), bool] */, dtype="uint8") /* ty=Tensor[(8, 11, 16), uint8] */;
  %172 = cast(%168, dtype="uint8") /* ty=Tensor[(8, ?, 16), uint8] */;
  %173 = @func_1960() /* ty=(Tensor[(14, 16, 2), float64],) */;
  %174 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 11, 16), bool] */, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
  %175 = bitwise_xor(%169, %170) /* ty=Tensor[(8, 11, 16), uint32] */;
  %176 = minimum(%171, %172) /* ty=Tensor[(8, 11, 16), uint8] */;
  %177 = %173.0;
  %178 = rsqrt(%174) /* ty=Tensor[(8, 11, 16), float32] */;
  (%175, %176, %177, %178)
}

def @func_6189(%var_6187: int64, %var_6188: Tensor[(400, 1), int64]) -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(98), float32], Tensor[(400, 1), int8]) {
  @func_6185(%var_6187, %var_6188) /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(98), float32], Tensor[(400, 1), int8]) */
}

def @func_1065() -> (Tensor[(8, 2, 16), float32],) {
  %181 = fn () -> (Tensor[(8, 2, 16), float32],) {
    %179 = @func_943() /* ty=(Tensor[(8, 2, 16), float32],) */;
    %180 = %179.0;
    (%180,)
  };
  %181() /* ty=(Tensor[(8, 2, 16), float32],) */
}

def @func_2192() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float64], Tensor[(392), float32], Tensor[(1080), float32]) {
  %182 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %183 = @func_1670() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %184 = %183.0;
  %185 = cast(%184, dtype="float64") /* ty=Tensor[(8, 2, 16), float64] */;
  %186 = cast(meta[relay.Constant][6] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %187 = reshape(%186, newshape=[1080]) /* ty=Tensor[(1080), float32] */;
  %188 = @func_1610(%187) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, ?, 16), bool], Tensor[(98), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(392), float32]) */;
  %189 = %182.0;
  %190 = cos(%185) /* ty=Tensor[(8, 2, 16), float64] */;
  %191 = %188.7;
  (%189, %190, %191, meta[relay.Constant][6] /* ty=Tensor[(1080), float32] */)
}

def @func_6083() -> Tensor[(8, 2, 16), float32] {
  @func_4800() /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_2244() -> (Tensor[(14, 16, 2), float64], Tensor[(5, 5, 14), float32], Tensor[(350), float32]) {
  %198 = fn () -> (Tensor[(14, 16, 2), float64], Tensor[(5, 5, 14), float32], Tensor[(350), float32]) {
    %192 = @func_1960() /* ty=(Tensor[(14, 16, 2), float64],) */;
    %193 = cast(meta[relay.Constant][7] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
    %194 = reshape(%193, newshape=[5, 5, 14]) /* ty=Tensor[(5, 5, 14), float32] */;
    %195 = @func_1786(%194) /* ty=(Tensor[(5, 5, 14), float32],) */;
    %196 = %192.0;
    %197 = %195.0;
    (%196, %197, meta[relay.Constant][7] /* ty=Tensor[(350), float32] */)
  };
  %198() /* ty=(Tensor[(14, 16, 2), float64], Tensor[(5, 5, 14), float32], Tensor[(350), float32]) */
}

def @func_5966(%var_5954: Tensor[(728), float32]) -> (Tensor[(8, 2, 16), float32], Tensor[(?, 728), float64], Tensor[(728), float32], Tensor[(8, 2, 16), float32]) {
  %199 = @func_4950() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %200 = cast(%var_5954, dtype="float32") /* ty=Tensor[(728), float32] */;
  %201 = cast(%var_5954, dtype="bool") /* ty=Tensor[(728), bool] */;
  %202 = reshape(%200, newshape=[1, 728]) /* ty=Tensor[(1, 728), float32] */;
  %203 = reshape(%201, newshape=[14, 4, 13]) /* ty=Tensor[(14, 4, 13), bool] */;
  %204 = @func_5428(%202, %203) /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(?, 728), float64]) */;
  %205 = @func_5524() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %206 = %199.1;
  %207 = %204.2;
  %208 = %205.1;
  (%206, %207, %var_5954, %208)
}

def @func_546(%var_544: Tensor[(7, 14, 1), float32]) -> (Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool]) {
  @func_543(%var_544) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool]) */
}

def @func_1123() -> (Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) {
  %209 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %210 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %211 = %209.0;
  %212 = %210.0;
  (%211, %212)
}

def @func_4605() -> (Tensor[(8, 2, 16), float32],) {
  @func_4603() /* ty=(Tensor[(8, 2, 16), float32],) */
}

def @func_2642(%var_2640: Tensor[(8, 2, 16), float32], %var_2641: Tensor[(8, 2, 16), float32]) -> (Tensor[(8, 2, 16), bool], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), uint8], Tensor[(8, 2, 16), float32]) {
  @func_2638(%var_2640, %var_2641) /* ty=(Tensor[(8, 2, 16), bool], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), uint8], Tensor[(8, 2, 16), float32]) */
}

def @func_3011() -> (Tensor[(8, 2, 16), float32],) {
  %215 = fn () -> (Tensor[(8, 2, 16), float32],) {
    %213 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
    %214 = %213.0;
    (%214,)
  };
  %215() /* ty=(Tensor[(8, 2, 16), float32],) */
}

def @func_1284() -> Tensor[(8, ?, 16), bool] {
  @func_1282() /* ty=Tensor[(8, ?, 16), bool] */
}

def @func_1670() -> (Tensor[(8, 2, 16), float32],) {
  %216 = @func_943() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %217 = %216.0;
  (%217,)
}

def @func_2299(%var_2297: int8) -> (Tensor[(8, 6, 4), int8], Tensor[(8, 6, 4), float64], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool]) {
  @func_2296(%var_2297) /* ty=(Tensor[(8, 6, 4), int8], Tensor[(8, 6, 4), float64], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool]) */
}

def @func_5617() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32]) {
  @func_5615() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32]) */
}

def @func_5525() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %223 = fn () -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
    %218 = @func_4641() /* ty=(Tensor[(8, 2, 16), float32],) */;
    %219 = @func_4874() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
    %220 = @func_5239() /* ty=Tensor[(8, 2, 16), float32] */;
    %221 = %218.0;
    %222 = %219.1;
    (%220, %221, %222)
  };
  %223() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */
}

def @func_1362() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %224 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %225 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
  %226 = %224.0;
  %227 = %225.1;
  (%226, %227)
}

def @func_1006(%var_1000: Tensor[(98, 4), float32]) -> (Tensor[(8, 1, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], Tensor[(98, 1), float32], Tensor[(98, 4), int64]) {
  %228 = @func_832() /* ty=(Tensor[(8, 1, 16), float64],) */;
  %229 = cast(meta[relay.Constant][8] /* ty=Tensor[(98, 1), float32] */, dtype="float32") /* ty=Tensor[(98, 1), float32] */;
  %230 = reshape(%229, newshape=[98, 1]) /* ty=Tensor[(98, 1), float32] */;
  %231 = @func_773(%230) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), uint16], Tensor[(8, ?, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(8, 98, 16), bool], Tensor[(8, 98, 16), bool], Tensor[(8, 98, 16), bool]) */;
  %232 = @func_943() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %233 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %234 = cast(meta[relay.Constant][8] /* ty=Tensor[(98, 1), float32] */, dtype="float32") /* ty=Tensor[(98, 1), float32] */;
  %235 = atan(%234) /* ty=Tensor[(98, 1), float32] */;
  %236 = cast(%235, dtype="float32") /* ty=Tensor[(98, 1), float32] */;
  %237 = cast(%235, dtype="int64") /* ty=Tensor[(98, 1), int64] */;
  %238 = cast(%var_1000, dtype="int64") /* ty=Tensor[(98, 4), int64] */;
  %239 = %228.0;
  %240 = %231.5;
  %241 = %232.0;
  %242 = %233.0;
  %243 = sigmoid(%236) /* ty=Tensor[(98, 1), float32] */;
  %244 = multiply(%237, %238) /* ty=Tensor[(98, 4), int64] */;
  (%239, %240, %241, %242, %243, %244)
}

def @func_5118() -> (Tensor[(8, 2, 16), int32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %245 = @func_2442() /* ty=Tensor[(8, 2, 16), float32] */;
  %246 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 2, 16), float32] */, dtype="int32") /* ty=Tensor[(8, 2, 16), int32] */;
  %247 = shape_of(%245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%245, dtype="int32") /* ty=Tensor[(8, 2, 16), int32] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %250 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %251 = @func_5002() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %252 = @func_2834() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %253 = multiply(%248, %249) /* ty=Tensor[(8, 2, 16), int32] */;
  %254 = log10(%250) /* ty=Tensor[(8, 2, 16), float32] */;
  %255 = %251.0;
  %256 = %252.0;
  (%253, %254, %255, %256)
}

def @func_3096(%var_3094: Tensor[(8, 2, 16), float32]) -> Tensor[(8, 2, 16), bool] {
  @func_3093(%var_3094) /* ty=Tensor[(8, 2, 16), bool] */
}

def @func_3507(%var_3505: Tensor[(14, 16, 2), float64], %var_3506: Tensor[(14, 16, 2), float64]) -> (Tensor[(8, 2, 16), float32], Tensor[(14, 16, 2), float32], Tensor[(14, 16, 2), int8], Tensor[(14, 16, 2), float64], Tensor[(9, 8, 1), float64], Tensor[(14, 16, 2), bool]) {
  %283 = fn (%var_3435: Tensor[(14, 16, 2), float64], %var_3498: Tensor[(14, 16, 2), float64]) -> (Tensor[(8, 2, 16), float32], Tensor[(14, 16, 2), float32], Tensor[(14, 16, 2), int8], Tensor[(14, 16, 2), float64], Tensor[(9, 8, 1), float64], Tensor[(14, 16, 2), bool]) {
    %257 = @func_2871() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) */;
    %258 = @func_3208() /* ty=(Tensor[(14, 16, 2), float64],) */;
    %259 = %258.0;
    %260 = cast(%var_3435, dtype="float32") /* ty=Tensor[(14, 16, 2), float32] */;
    %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
    %262 = cast(%259, dtype="float32") /* ty=Tensor[(14, 16, 2), float32] */;
    %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %264 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 16, 2), float64] */, dtype="int8") /* ty=Tensor[(14, 16, 2), int8] */;
    %265 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
    %266 = cast(%259, dtype="int8") /* ty=Tensor[(14, 16, 2), int8] */;
    %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %268 = cast(%var_3435, dtype="float64") /* ty=Tensor[(14, 16, 2), float64] */;
    %269 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(14, 16, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %270 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 16, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 16, 2), float64] */;
    %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %272 = @func_3389() /* ty=(Tensor[(9, 8, 1), float64],) */;
    %273 = cast(%var_3498, dtype="bool") /* ty=Tensor[(14, 16, 2), bool] */;
    %274 = shape_of(%var_3435, dtype="int32") /* ty=Tensor[(3), int32] */;
    %275 = cast(%var_3435, dtype="bool") /* ty=Tensor[(14, 16, 2), bool] */;
    %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %277 = %257.0;
    %278 = power(%262, %263) /* ty=Tensor[(14, 16, 2), float32] */;
    %279 = subtract(%266, %267) /* ty=Tensor[(14, 16, 2), int8] */;
    %280 = mod(%270, %271) /* ty=Tensor[(14, 16, 2), float64] */;
    %281 = %272.0;
    %282 = logical_and(%275, %276) /* ty=Tensor[(14, 16, 2), bool] */;
    (%277, %278, %279, %280, %281, %282)
  };
  %283(%var_3505, %var_3506) /* ty=(Tensor[(8, 2, 16), float32], Tensor[(14, 16, 2), float32], Tensor[(14, 16, 2), int8], Tensor[(14, 16, 2), float64], Tensor[(9, 8, 1), float64], Tensor[(14, 16, 2), bool]) */
}

def @func_2662() -> Tensor[(8, 1, 16), float64] {
  %285 = fn () -> Tensor[(8, 1, 16), float64] {
    %284 = @func_832() /* ty=(Tensor[(8, 1, 16), float64],) */;
    %284.0
  };
  %285() /* ty=Tensor[(8, 1, 16), float64] */
}

def @func_2873() -> (Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) {
  @func_2871() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) */
}

def @func_2807() -> (Tensor[(8, 2, 16), float32],) {
  %288 = fn () -> (Tensor[(8, 2, 16), float32],) {
    %286 = @func_1339() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
    %287 = %286.0;
    (%287,)
  };
  %288() /* ty=(Tensor[(8, 2, 16), float32],) */
}

def @func_833() -> (Tensor[(8, 1, 16), float64],) {
  %291 = fn () -> (Tensor[(8, 1, 16), float64],) {
    %289 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
    %290 = %289.1;
    (%290,)
  };
  %291() /* ty=(Tensor[(8, 1, 16), float64],) */
}

def @func_3389() -> (Tensor[(9, 8, 1), float64],) {
  %292 = @func_3044() /* ty=(Tensor[(4, 13, 11), float64], Tensor[(572), float64], Tensor[(9, 8, 1), float64]) */;
  %293 = %292.2;
  (%293,)
}

def @func_3266() -> (Tensor[(8, ?, 16), float64],) {
  %300 = fn () -> (Tensor[(8, ?, 16), float64],) {
    %294 = @func_1282() /* ty=Tensor[(8, ?, 16), bool] */;
    %295 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 1, 16), bool] */, dtype="float64") /* ty=Tensor[(8, 1, 16), float64] */;
    %296 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
    %297 = cast(%294, dtype="float64") /* ty=Tensor[(8, ?, 16), float64] */;
    %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %299 = mod(%297, %298) /* ty=Tensor[(8, ?, 16), float64] */;
    (%299,)
  };
  %300() /* ty=(Tensor[(8, ?, 16), float64],) */
}

def @func_1716() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %305 = fn () -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
    %301 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
    %302 = @func_1123() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) */;
    %303 = %301.0;
    %304 = %302.0;
    (%303, %304)
  };
  %305() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */
}

def @func_3093(%var_3071: Tensor[(8, 2, 16), float32]) -> Tensor[(8, 2, 16), bool] {
  %306 = @func_2834() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %307 = %306.0;
  %308 = cast(%var_3071, dtype="uint8") /* ty=Tensor[(8, 2, 16), uint8] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%307, dtype="uint8") /* ty=Tensor[(8, 2, 16), uint8] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %312 = bitwise_xor(%310, %311) /* ty=Tensor[(8, 2, 16), uint8] */;
  %313 = @func_1715() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %314 = %313.0;
  %315 = cast(%314, dtype="bool") /* ty=Tensor[(8, 2, 16), bool] */;
  %316 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%312, dtype="bool") /* ty=Tensor[(8, 2, 16), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%317, %318) /* ty=Tensor[(8, 2, 16), bool] */
}

def @func_1125() -> (Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) {
  @func_1123() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) */
}

def @func_5241() -> Tensor[(8, 2, 16), float32] {
  @func_5239() /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_2129(%var_2128: Tensor[(4, 13, 11), float64]) -> (Tensor[(4, 13, 11), float64],) {
  %321 = fn (%var_2115: Tensor[(4, 13, 11), float64]) -> (Tensor[(4, 13, 11), float64],) {
    %319 = cast(%var_2115, dtype="float64") /* ty=Tensor[(4, 13, 11), float64] */;
    %320 = tan(%319) /* ty=Tensor[(4, 13, 11), float64] */;
    (%320,)
  };
  %321(%var_2128) /* ty=(Tensor[(4, 13, 11), float64],) */
}

def @func_1442() -> (Tensor[(8, 2, 16), uint64], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(98, 1), float32], Tensor[(1, 392), float32], Tensor[(8, ?, 16), bool], Tensor[(392), float32]) {
  %322 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
  %323 = %322.2;
  %324 = cast(%323, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
  %325 = sqrt(%324) /* ty=Tensor[(8, 1, 16), float32] */;
  %326 = cast(%325, dtype="uint64") /* ty=Tensor[(8, 1, 16), uint64] */;
  %327 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 2, 16), float32] */, dtype="uint64") /* ty=Tensor[(8, 2, 16), uint64] */;
  %328 = cast(meta[relay.Constant][13] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %329 = reshape(%328, newshape=[9, 8, 15]) /* ty=Tensor[(9, 8, 15), float32] */;
  %330 = @func_1099(%329) /* ty=(Tensor[(9, 8, 15), int32], Tensor[(9, 8, 1), float32]) */;
  %331 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 392), float32] */, dtype="float32") /* ty=Tensor[(1, 392), float32] */;
  %332 = reshape(%331, newshape=[98, 4]) /* ty=Tensor[(98, 4), float32] */;
  %333 = @func_1006(%332) /* ty=(Tensor[(8, 1, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], Tensor[(98, 1), float32], Tensor[(98, 4), int64]) */;
  %334 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 392), float32] */, dtype="float32") /* ty=Tensor[(1, 392), float32] */;
  %335 = reshape(%334, newshape=[98, 4]) /* ty=Tensor[(98, 4), float32] */;
  %336 = @func_1006(%335) /* ty=(Tensor[(8, 1, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], Tensor[(98, 1), float32], Tensor[(98, 4), int64]) */;
  %337 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
  %338 = logical_xor(%326, %327) /* ty=Tensor[(8, 2, 16), uint64] */;
  %339 = %330.1;
  %340 = %333.4;
  %341 = %336.3;
  %342 = %337.0;
  (%338, %339, meta[relay.Constant][13] /* ty=Tensor[(1080), float32] */, %340, meta[relay.Constant][14] /* ty=Tensor[(1, 392), float32] */, %341, %342)
}

def @func_4765(%var_4748: Tensor[(15, 8, 13), int8], %var_4749: Tensor[(15, 8, 13), int8]) -> (Tensor[(15, 8, 13), int8],) {
  %343 = cast(%var_4749, dtype="int8") /* ty=Tensor[(15, 8, 13), int8] */;
  %344 = shape_of(%var_4748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%var_4748, dtype="int8") /* ty=Tensor[(15, 8, 13), int8] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %347 = left_shift(%345, %346) /* ty=Tensor[(15, 8, 13), int8] */;
  (%347,)
}

def @func_4641() -> (Tensor[(8, 2, 16), float32],) {
  %348 = @func_2442() /* ty=Tensor[(8, 2, 16), float32] */;
  (%348,)
}

def @func_1282() -> Tensor[(8, ?, 16), bool] {
  %349 = @func_794() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %349.0
}

def @func_5892() -> Tensor[(8, 1, 16), float32] {
  @func_5890() /* ty=Tensor[(8, 1, 16), float32] */
}

def @func_6085() -> Tensor[(8, 2, 16), float32] {
  @func_6083() /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_1444() -> (Tensor[(8, 2, 16), uint64], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(98, 1), float32], Tensor[(1, 392), float32], Tensor[(8, ?, 16), bool], Tensor[(392), float32]) {
  @func_1442() /* ty=(Tensor[(8, 2, 16), uint64], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(98, 1), float32], Tensor[(1, 392), float32], Tensor[(8, ?, 16), bool], Tensor[(392), float32]) */
}

def @func_2834() -> (Tensor[(8, 2, 16), float32],) {
  %350 = @func_943() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %351 = %350.0;
  (%351,)
}

def @func_2442() -> Tensor[(8, 2, 16), float32] {
  %352 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %353 = %352.0;
  %354 = cast(%353, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  acosh(%354) /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_1961() -> (Tensor[(14, 16, 2), float64],) {
  %357 = fn () -> (Tensor[(14, 16, 2), float64],) {
    %355 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 16, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 16, 2), float64] */;
    %356 = log10(%355) /* ty=Tensor[(14, 16, 2), float64] */;
    (%356,)
  };
  %357() /* ty=(Tensor[(14, 16, 2), float64],) */
}

def @func_945() -> (Tensor[(8, 2, 16), float32],) {
  @func_943() /* ty=(Tensor[(8, 2, 16), float32],) */
}

def @func_2895() -> (Tensor[(8, 1, 16), float32], Tensor[(8, 2, 16), float64]) {
  %358 = @func_2661() /* ty=Tensor[(8, 1, 16), float64] */;
  %359 = cast(%358, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
  %360 = @func_2774() /* ty=(Tensor[(8, 2, 16), float64],) */;
  %361 = acos(%359) /* ty=Tensor[(8, 1, 16), float32] */;
  %362 = %360.0;
  (%361, %362)
}

def @func_2575(%var_2573: Tensor[(392), float32], %var_2574: Tensor[(2640), float64]) -> (Tensor[(8, 2, 16), float32], Tensor[(392), float32], Tensor[(392), float32], Tensor[(2640), float64]) {
  @func_2571(%var_2573, %var_2574) /* ty=(Tensor[(8, 2, 16), float32], Tensor[(392), float32], Tensor[(392), float32], Tensor[(2640), float64]) */
}

def @func_1786(%var_1779: Tensor[(5, 5, 14), float32]) -> (Tensor[(5, 5, 14), float32],) {
  %363 = cast(%var_1779, dtype="float32") /* ty=Tensor[(5, 5, 14), float32] */;
  %364 = tan(%363) /* ty=Tensor[(5, 5, 14), float32] */;
  (%364,)
}

def @func_4409(%var_4408: Tensor[(7, 14, 2), float64]) -> Tensor[(7, 14, 2), float64] {
  %369 = fn (%var_4403: Tensor[(7, 14, 2), float64]) -> Tensor[(7, 14, 2), float64] {
    %365 = cast(%var_4403, dtype="float64") /* ty=Tensor[(7, 14, 2), float64] */;
    %366 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(7, 14, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %367 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 14, 2), float64] */, dtype="float64") /* ty=Tensor[(7, 14, 2), float64] */;
    %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%367, %368) /* ty=Tensor[(7, 14, 2), float64] */
  };
  %369(%var_4408) /* ty=Tensor[(7, 14, 2), float64] */
}

def @func_5428(%var_5393: Tensor[(1, 728), float32], %var_5405: Tensor[(14, 4, 13), bool]) -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(?, 728), float64]) {
  %370 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
  %371 = @func_4950() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %372 = cast(%var_5393, dtype="float64") /* ty=Tensor[(1, 728), float64] */;
  %373 = acos(%372) /* ty=Tensor[(1, 728), float64] */;
  %374 = cast(%var_5393, dtype="float32") /* ty=Tensor[(1, 728), float32] */;
  %375 = cast(%var_5393, dtype="float32") /* ty=Tensor[(1, 728), float32] */;
  %376 = reshape(%374, newshape=[14, 4, 13]) /* ty=Tensor[(14, 4, 13), float32] */;
  %377 = reshape(%375, newshape=[14, 4, 13]) /* ty=Tensor[(14, 4, 13), float32] */;
  %378 = @func_4265(%376, %377) /* ty=Tensor[(14, 4, 13), bool] */;
  %379 = cast(%var_5405, dtype="bool") /* ty=Tensor[(14, 4, 13), bool] */;
  %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%378, dtype="bool") /* ty=Tensor[(14, 4, 13), bool] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %383 = less(%381, %382) /* ty=Tensor[(14, 4, 13), bool] */;
  %384 = cast(%383, dtype="float64") /* ty=Tensor[(14, 4, 13), float64] */;
  %385 = shape_of(%373, dtype="int32") /* ty=Tensor[(2), int32] */;
  %386 = cast(%373, dtype="float64") /* ty=Tensor[(1, 728), float64] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %388 = %370.1;
  %389 = %371.1;
  %390 = power(%386, %387) /* ty=Tensor[(?, 728), float64] */;
  (%388, %389, %390)
}

def @func_5573(%var_5565: Tensor[(16, 8, 4), int16], %var_5566: Tensor[(16, 8, 4), int16]) -> Tensor[(16, 8, 4), int16] {
  %391 = cast(%var_5566, dtype="int16") /* ty=Tensor[(16, 8, 4), int16] */;
  %392 = shape_of(%var_5565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%var_5565, dtype="int16") /* ty=Tensor[(16, 8, 4), int16] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%393, %394) /* ty=Tensor[(16, 8, 4), int16] */
}

def @func_1341() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  @func_1339() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */
}

def @func_2775() -> (Tensor[(8, 2, 16), float64],) {
  %396 = fn () -> (Tensor[(8, 2, 16), float64],) {
    %395 = @func_2705() /* ty=Tensor[(8, 2, 16), float64] */;
    (%395,)
  };
  %396() /* ty=(Tensor[(8, 2, 16), float64],) */
}

def @func_5004() -> (Tensor[(8, 2, 16), float32],) {
  @func_5002() /* ty=(Tensor[(8, 2, 16), float32],) */
}

def @func_5857() -> (Tensor[(1080), float32], Tensor[(15, 8, 13), int8], Tensor[(1560), int8]) {
  @func_5855() /* ty=(Tensor[(1080), float32], Tensor[(15, 8, 13), int8], Tensor[(1560), int8]) */
}

def @func_2173() -> (Tensor[(8, ?, 16), bool],) {
  %399 = fn () -> (Tensor[(8, ?, 16), bool],) {
    %397 = @func_1442() /* ty=(Tensor[(8, 2, 16), uint64], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(98, 1), float32], Tensor[(1, 392), float32], Tensor[(8, ?, 16), bool], Tensor[(392), float32]) */;
    %398 = %397.5;
    (%398,)
  };
  %399() /* ty=(Tensor[(8, ?, 16), bool],) */
}

def @func_881(%var_879: Tensor[(13, 5, 11), float32], %var_880: Tensor[(13, 5, 11), float32]) -> (Tensor[(13, 5, 11), float32], Tensor[(8, 1, 16), float64]) {
  %407 = fn (%var_866: Tensor[(13, 5, 11), float32], %var_867: Tensor[(13, 5, 11), float32]) -> (Tensor[(13, 5, 11), float32], Tensor[(8, 1, 16), float64]) {
    %400 = cast(%var_867, dtype="float32") /* ty=Tensor[(13, 5, 11), float32] */;
    %401 = shape_of(%var_866, dtype="int32") /* ty=Tensor[(3), int32] */;
    %402 = cast(%var_866, dtype="float32") /* ty=Tensor[(13, 5, 11), float32] */;
    %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %404 = @func_832() /* ty=(Tensor[(8, 1, 16), float64],) */;
    %405 = mod(%402, %403) /* ty=Tensor[(13, 5, 11), float32] */;
    %406 = %404.0;
    (%405, %406)
  };
  %407(%var_879, %var_880) /* ty=(Tensor[(13, 5, 11), float32], Tensor[(8, 1, 16), float64]) */
}

def @func_4898() -> Tensor[(8, 2, 16), float32] {
  %408 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %408.0
}

def @func_492() -> (Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) {
  %409 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
  %410 = asin(%409) /* ty=Tensor[(8, 1, 16), float32] */;
  %411 = cast(%410, dtype="float64") /* ty=Tensor[(8, 1, 16), float64] */;
  %412 = acosh(%411) /* ty=Tensor[(8, 1, 16), float64] */;
  %413 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 1, 16), float32] */, dtype="bool") /* ty=Tensor[(8, 1, 16), bool] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%412, dtype="bool") /* ty=Tensor[(8, 1, 16), bool] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %417 = cast(%410, dtype="float64") /* ty=Tensor[(8, 1, 16), float64] */;
  %418 = greater_equal(%415, %416) /* ty=Tensor[(8, ?, 16), bool] */;
  %419 = sin(%417) /* ty=Tensor[(8, 1, 16), float64] */;
  (%418, %419)
}

def @func_3925(%var_3865: Tensor[(900), float64], %var_3903: Tensor[(1080), float32]) -> (Tensor[(572), float64], Tensor[(8, 2, 16), float32], Tensor[(900), float64], Tensor[(8, ?, 16), bool], Tensor[(1080), float32]) {
  %420 = @func_3044() /* ty=(Tensor[(4, 13, 11), float64], Tensor[(572), float64], Tensor[(9, 8, 1), float64]) */;
  %421 = cast(%var_3865, dtype="float64") /* ty=Tensor[(900), float64] */;
  %422 = reshape(%421, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), float64] */;
  %423 = @func_3368(%422) /* ty=(Tensor[(12, 15, 5), float64], Tensor[(10, 6, 7), uint16], Tensor[(1, 70), uint16], Tensor[(420), uint16], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %424 = cast(%var_3903, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %425 = reshape(%424, newshape=[1080]) /* ty=Tensor[(1080), float32] */;
  %426 = @func_1610(%425) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, ?, 16), bool], Tensor[(98), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(392), float32]) */;
  %427 = %420.1;
  %428 = %423.5;
  %429 = %426.1;
  (%427, %428, %var_3865, %429, %var_3903)
}

def @func_6021() -> Tensor[(8, ?, 16), bool] {
  %431 = fn () -> Tensor[(8, ?, 16), bool] {
    %430 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
    %430.0
  };
  %431() /* ty=Tensor[(8, ?, 16), bool] */
}

def @func_2571(%var_2541: Tensor[(392), float32], %var_2542: Tensor[(2640), float64]) -> (Tensor[(8, 2, 16), float32], Tensor[(392), float32], Tensor[(392), float32], Tensor[(2640), float64]) {
  %432 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %433 = cast(%var_2541, dtype="float32") /* ty=Tensor[(392), float32] */;
  %434 = cast(%var_2542, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %435 = reshape(%433, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %436 = reshape(%434, newshape=[16, 11, 15]) /* ty=Tensor[(16, 11, 15), float64] */;
  %437 = @func_1527(%435, %436) /* ty=(Tensor[(98, 1), float32], Tensor[(392), float32], Tensor[(16, 11, 15), bool], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool], Tensor[(392), float32]) */;
  %438 = %432.0;
  %439 = %437.1;
  (%438, %439, %var_2541, %var_2542)
}

def @func_3929(%var_3927: Tensor[(900), float64], %var_3928: Tensor[(1080), float32]) -> (Tensor[(572), float64], Tensor[(8, 2, 16), float32], Tensor[(900), float64], Tensor[(8, ?, 16), bool], Tensor[(1080), float32]) {
  @func_3925(%var_3927, %var_3928) /* ty=(Tensor[(572), float64], Tensor[(8, 2, 16), float32], Tensor[(900), float64], Tensor[(8, ?, 16), bool], Tensor[(1080), float32]) */
}

def @func_1364() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  @func_1362() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */
}

def @func_4900() -> Tensor[(8, 2, 16), float32] {
  @func_4898() /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_5485() -> (Tensor[(6, 2, 13), float32], Tensor[(8, 2, 16), float32]) {
  %440 = @func_2090() /* ty=Tensor[(6, 2, 13), float32] */;
  %441 = @func_5239() /* ty=Tensor[(8, 2, 16), float32] */;
  (%440, %441)
}

def @func_4035() -> Tensor[(8, 2, 16), float32] {
  %442 = @func_3326() /* ty=(Tensor[(14, 12, 12), float64], Tensor[(8, 2, 16), float32]) */;
  %442.1
}

def @func_2897() -> (Tensor[(8, 1, 16), float32], Tensor[(8, 2, 16), float64]) {
  @func_2895() /* ty=(Tensor[(8, 1, 16), float32], Tensor[(8, 2, 16), float64]) */
}

def @func_4838(%var_4836: Tensor[(6, 6, 9), float64]) -> (Tensor[(6, 6, 9), float64], Tensor[(6, 6, 9), bool]) {
  @func_4835(%var_4836) /* ty=(Tensor[(6, 6, 9), float64], Tensor[(6, 6, 9), bool]) */
}

def @func_2871() -> (Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) {
  %443 = @func_1715() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %444 = %443.0;
  %445 = @func_1282() /* ty=Tensor[(8, ?, 16), bool] */;
  (%444, %445)
}

def @func_4835(%var_4823: Tensor[(6, 6, 9), float64]) -> (Tensor[(6, 6, 9), float64], Tensor[(6, 6, 9), bool]) {
  %446 = cast(%var_4823, dtype="float64") /* ty=Tensor[(6, 6, 9), float64] */;
  %447 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 6, 9), float64] */, dtype="bool") /* ty=Tensor[(6, 6, 9), bool] */;
  %448 = shape_of(%var_4823, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%var_4823, dtype="bool") /* ty=Tensor[(6, 6, 9), bool] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %451 = atan(%446) /* ty=Tensor[(6, 6, 9), float64] */;
  %452 = less_equal(%449, %450) /* ty=Tensor[(6, 6, 9), bool] */;
  (%451, %452)
}

def @func_4473() -> Tensor[(8, 2, 16), float64] {
  %454 = fn () -> Tensor[(8, 2, 16), float64] {
    %453 = @func_2774() /* ty=(Tensor[(8, 2, 16), float64],) */;
    %453.0
  };
  %454() /* ty=Tensor[(8, 2, 16), float64] */
}

def @func_2092() -> Tensor[(6, 2, 13), float32] {
  @func_2090() /* ty=Tensor[(6, 2, 13), float32] */
}

def @func_2836() -> (Tensor[(8, 2, 16), float32],) {
  @func_2834() /* ty=(Tensor[(8, 2, 16), float32],) */
}

def @func_1173(%var_1171: Tensor[(98, 1), float32]) -> (Tensor[(8, 2, 16), float32], Tensor[(7, 14, ?), bool], Tensor[(98, 1), float32], Tensor[(8, 2, 16), float32]) {
  @func_1170(%var_1171) /* ty=(Tensor[(8, 2, 16), float32], Tensor[(7, 14, ?), bool], Tensor[(98, 1), float32], Tensor[(8, 2, 16), float32]) */
}

def @func_4225() -> (Tensor[(13, 9, 2), float64], Tensor[(8, 2, 16), float32]) {
  %455 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 9, 2), float64] */, dtype="float64") /* ty=Tensor[(13, 9, 2), float64] */;
  %456 = log10(%455) /* ty=Tensor[(13, 9, 2), float64] */;
  %457 = @func_4035() /* ty=Tensor[(8, 2, 16), float32] */;
  (%456, %457)
}

def @func_5057() -> (Tensor[(8, 2, 16), float32], Tensor[(14, 4, 13), bool], Tensor[(728), float32], Tensor[(9, 8, 10), float64], Tensor[(720), float32], Tensor[(8, 2, 16), float64]) {
  %471 = fn () -> (Tensor[(8, 2, 16), float32], Tensor[(14, 4, 13), bool], Tensor[(728), float32], Tensor[(9, 8, 10), float64], Tensor[(720), float32], Tensor[(8, 2, 16), float64]) {
    %458 = cast(meta[relay.Constant][20] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
    %459 = cast(meta[relay.Constant][20] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
    %460 = reshape(%458, newshape=[14, 4, 13]) /* ty=Tensor[(14, 4, 13), float32] */;
    %461 = reshape(%459, newshape=[14, 4, 13]) /* ty=Tensor[(14, 4, 13), float32] */;
    %462 = cast(meta[relay.Constant][21] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
    %463 = cast(meta[relay.Constant][21] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
    %464 = reshape(%462, newshape=[9, 8, 10]) /* ty=Tensor[(9, 8, 10), float32] */;
    %465 = reshape(%463, newshape=[9, 8, 10]) /* ty=Tensor[(9, 8, 10), float32] */;
    %466 = @func_1557(%464, %465) /* ty=(Tensor[(9, 8, 10), float32], Tensor[(9, 8, 10), float64], Tensor[(9, 8, 10), bool]) */;
    %467 = @func_4800() /* ty=Tensor[(8, 2, 16), float32] */;
    %468 = @func_4265(%460, %461) /* ty=Tensor[(14, 4, 13), bool] */;
    %469 = %466.1;
    %470 = @func_2705() /* ty=Tensor[(8, 2, 16), float64] */;
    (%467, %468, meta[relay.Constant][20] /* ty=Tensor[(728), float32] */, %469, meta[relay.Constant][21] /* ty=Tensor[(720), float32] */, %470)
  };
  %471() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(14, 4, 13), bool], Tensor[(728), float32], Tensor[(9, 8, 10), float64], Tensor[(720), float32], Tensor[(8, 2, 16), float64]) */
}

def @func_2825() -> Tensor[(8, 2, 16), float32] {
  %473 = fn () -> Tensor[(8, 2, 16), float32] {
    %472 = @func_1670() /* ty=(Tensor[(8, 2, 16), float32],) */;
    %472.0
  };
  %473() /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_3995() -> (Tensor[(8, ?, 16), bool],) {
  %476 = fn () -> (Tensor[(8, ?, 16), bool],) {
    %474 = @func_2172() /* ty=(Tensor[(8, ?, 16), bool],) */;
    %475 = %474.0;
    (%475,)
  };
  %476() /* ty=(Tensor[(8, ?, 16), bool],) */
}

def @func_5655(%var_5653: Tensor[(11, 3, 13), int32], %var_5654: Tensor[(11, 3, 13), int32]) -> (Tensor[(11, 3, 13), int32], Tensor[(8, 2, 16), float32], Tensor[(11, 3, 13), float64]) {
  %485 = fn (%var_5625: Tensor[(11, 3, 13), int32], %var_5626: Tensor[(11, 3, 13), int32]) -> (Tensor[(11, 3, 13), int32], Tensor[(8, 2, 16), float32], Tensor[(11, 3, 13), float64]) {
    %477 = cast(%var_5626, dtype="int32") /* ty=Tensor[(11, 3, 13), int32] */;
    %478 = shape_of(%var_5625, dtype="int32") /* ty=Tensor[(3), int32] */;
    %479 = cast(%var_5625, dtype="int32") /* ty=Tensor[(11, 3, 13), int32] */;
    %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %481 = cast(%var_5626, dtype="float64") /* ty=Tensor[(11, 3, 13), float64] */;
    %482 = bitwise_and(%479, %480) /* ty=Tensor[(11, 3, 13), int32] */;
    %483 = @func_4067() /* ty=Tensor[(8, 2, 16), float32] */;
    %484 = sigmoid(%481) /* ty=Tensor[(11, 3, 13), float64] */;
    (%482, %483, %484)
  };
  %485(%var_5653, %var_5654) /* ty=(Tensor[(11, 3, 13), int32], Tensor[(8, 2, 16), float32], Tensor[(11, 3, 13), float64]) */
}

def @func_1225() -> (Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) {
  %486 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %487 = %486.0;
  %488 = cast(%487, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %489 = atanh(%488) /* ty=Tensor[(8, 2, 16), float32] */;
  %490 = cast(meta[relay.Constant][22] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %491 = reshape(%490, newshape=[98, 4]) /* ty=Tensor[(98, 4), float32] */;
  %492 = @func_1006(%491) /* ty=(Tensor[(8, 1, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], Tensor[(98, 1), float32], Tensor[(98, 4), int64]) */;
  %493 = %492.3;
  %494 = cast(%489, dtype="uint32") /* ty=Tensor[(8, 2, 16), uint32] */;
  %495 = cast(%493, dtype="uint32") /* ty=Tensor[(8, ?, 16), uint32] */;
  %496 = left_shift(%494, %495) /* ty=Tensor[(8, 2, 16), uint32] */;
  %497 = cast(%496, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %498 = cast(meta[relay.Constant][22] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %499 = reshape(%498, newshape=[98, 4]) /* ty=Tensor[(98, 4), float32] */;
  %500 = @func_1006(%499) /* ty=(Tensor[(8, 1, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], Tensor[(98, 1), float32], Tensor[(98, 4), int64]) */;
  %501 = asin(%497) /* ty=Tensor[(8, 2, 16), float32] */;
  %502 = %500.1;
  (meta[relay.Constant][22] /* ty=Tensor[(392), float32] */, %501, %502)
}

def @func_5120() -> (Tensor[(8, 2, 16), int32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  @func_5118() /* ty=(Tensor[(8, 2, 16), int32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */
}

def @func_4109() -> (Tensor[(8, 2, 16), float32], Tensor[(14, 16, 2), float32]) {
  %503 = @func_1670() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %504 = @func_3208() /* ty=(Tensor[(14, 16, 2), float64],) */;
  %505 = %504.0;
  %506 = cast(%505, dtype="float32") /* ty=Tensor[(14, 16, 2), float32] */;
  %507 = %503.0;
  %508 = rsqrt(%506) /* ty=Tensor[(14, 16, 2), float32] */;
  (%507, %508)
}

def @func_4269(%var_4267: Tensor[(14, 4, 13), float32], %var_4268: Tensor[(14, 4, 13), float32]) -> Tensor[(14, 4, 13), bool] {
  @func_4265(%var_4267, %var_4268) /* ty=Tensor[(14, 4, 13), bool] */
}

def @func_5129() -> Tensor[(8, 2, 16), float64] {
  %509 = fn () -> Tensor[(8, 2, 16), float64] {
    @func_4472() /* ty=Tensor[(8, 2, 16), float64] */
  };
  %509() /* ty=Tensor[(8, 2, 16), float64] */
}

def @func_4363(%var_4362: Tensor[(8, 16, 16), float64]) -> (Tensor[(8, ?, 16), float64], Tensor[(8, 16, 16), bool]) {
  %517 = fn (%var_4352: Tensor[(8, 16, 16), float64]) -> (Tensor[(8, ?, 16), float64], Tensor[(8, 16, 16), bool]) {
    %510 = @func_3649() /* ty=(Tensor[(8, ?, 16), float64],) */;
    %511 = @func_3649() /* ty=(Tensor[(8, ?, 16), float64],) */;
    %512 = %511.0;
    %513 = cast(%512, dtype="bool") /* ty=Tensor[(8, ?, 16), bool] */;
    %514 = cast(%var_4352, dtype="bool") /* ty=Tensor[(8, 16, 16), bool] */;
    %515 = %510.0;
    %516 = equal(%513, %514) /* ty=Tensor[(8, 16, 16), bool] */;
    (%515, %516)
  };
  %517(%var_4362) /* ty=(Tensor[(8, ?, 16), float64], Tensor[(8, 16, 16), bool]) */
}

def @func_5432(%var_5430: Tensor[(1, 728), float32], %var_5431: Tensor[(14, 4, 13), bool]) -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(?, 728), float64]) {
  @func_5428(%var_5430, %var_5431) /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(?, 728), float64]) */
}

def @func_1102(%var_1100: Tensor[(9, 8, 15), float32]) -> (Tensor[(9, 8, 15), int32], Tensor[(9, 8, 1), float32]) {
  @func_1099(%var_1100) /* ty=(Tensor[(9, 8, 15), int32], Tensor[(9, 8, 1), float32]) */
}

def @func_3307(%var_3305: Tensor[(8, 10, 16), bool]) -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 10, 16), int16]) {
  @func_3304(%var_3305) /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 10, 16), int16]) */
}

def @func_4703(%var_4654: Tensor[(4, 13, 11), float64]) -> (Tensor[(4, 13, 11), bool], Tensor[(350), float32], Tensor[(392), float32], Tensor[(5, 5, 14), float32], Tensor[(8, 1, 16), float64], Tensor[(4, 13, 11), float32]) {
  %518 = @func_3044() /* ty=(Tensor[(4, 13, 11), float64], Tensor[(572), float64], Tensor[(9, 8, 1), float64]) */;
  %519 = %518.0;
  %520 = cast(%var_4654, dtype="bool") /* ty=Tensor[(4, 13, 11), bool] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%519, dtype="bool") /* ty=Tensor[(4, 13, 11), bool] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %524 = @func_2243() /* ty=(Tensor[(14, 16, 2), float64], Tensor[(5, 5, 14), float32], Tensor[(350), float32]) */;
  %525 = @func_2192() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float64], Tensor[(392), float32], Tensor[(1080), float32]) */;
  %526 = %524.2;
  %527 = cast(%526, dtype="float32") /* ty=Tensor[(350), float32] */;
  %528 = reshape(%527, newshape=[5, 5, 14]) /* ty=Tensor[(5, 5, 14), float32] */;
  %529 = @func_1786(%528) /* ty=(Tensor[(5, 5, 14), float32],) */;
  %530 = @func_794() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %531 = cast(%519, dtype="float64") /* ty=Tensor[(4, 13, 11), float64] */;
  %532 = acosh(%531) /* ty=Tensor[(4, 13, 11), float64] */;
  %533 = cast(%532, dtype="float32") /* ty=Tensor[(4, 13, 11), float32] */;
  %534 = not_equal(%522, %523) /* ty=Tensor[(4, 13, 11), bool] */;
  %535 = %525.2;
  %536 = %529.0;
  %537 = %530.1;
  %538 = rsqrt(%533) /* ty=Tensor[(4, 13, 11), float32] */;
  (%534, %526, %535, %536, %537, %538)
}

def @func_3044() -> (Tensor[(4, 13, 11), float64], Tensor[(572), float64], Tensor[(9, 8, 1), float64]) {
  %539 = cast(meta[relay.Constant][23] /* ty=Tensor[(572), float64] */, dtype="float64") /* ty=Tensor[(572), float64] */;
  %540 = reshape(%539, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), float64] */;
  %541 = @func_2127(%540) /* ty=(Tensor[(4, 13, 11), float64],) */;
  %542 = @func_1442() /* ty=(Tensor[(8, 2, 16), uint64], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(98, 1), float32], Tensor[(1, 392), float32], Tensor[(8, ?, 16), bool], Tensor[(392), float32]) */;
  %543 = %542.1;
  %544 = cast(%543, dtype="float64") /* ty=Tensor[(9, 8, 1), float64] */;
  %545 = asin(%544) /* ty=Tensor[(9, 8, 1), float64] */;
  %546 = cast(%545, dtype="float64") /* ty=Tensor[(9, 8, 1), float64] */;
  %547 = %541.0;
  %548 = atan(%546) /* ty=Tensor[(9, 8, 1), float64] */;
  (%547, meta[relay.Constant][23] /* ty=Tensor[(572), float64] */, %548)
}

def @func_2754(%var_2752: Tensor[(3, 8, 5), float32], %var_2753: int8) -> (Tensor[(3, 8, 5), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], int8, Tensor[(3, 6, 13), float32], Tensor[(234), float32], Tensor[(3, 6, 13), float32]) {
  %569 = fn (%var_2717: Tensor[(3, 8, 5), float32], %var_2732: int8) -> (Tensor[(3, 8, 5), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], int8, Tensor[(3, 6, 13), float32], Tensor[(234), float32], Tensor[(3, 6, 13), float32]) {
    %549 = cast(%var_2717, dtype="float32") /* ty=Tensor[(3, 8, 5), float32] */;
    %550 = atan(%549) /* ty=Tensor[(3, 8, 5), float32] */;
    %551 = cast(%550, dtype="float64") /* ty=Tensor[(3, 8, 5), float64] */;
    %552 = @func_1339() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
    %553 = cast(%var_2732, dtype="int8") /* ty=int8 */;
    %554 = reshape(%553, newshape=[]) /* ty=int8 */;
    %555 = @func_2296(%554) /* ty=(Tensor[(8, 6, 4), int8], Tensor[(8, 6, 4), float64], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool]) */;
    %556 = cast(meta[relay.Constant][24] /* ty=Tensor[(234), float32] */, dtype="float32") /* ty=Tensor[(234), float32] */;
    %557 = cast(meta[relay.Constant][24] /* ty=Tensor[(234), float32] */, dtype="float32") /* ty=Tensor[(234), float32] */;
    %558 = reshape(%556, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float32] */;
    %559 = reshape(%557, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float32] */;
    %560 = @func_1923(%558, %559) /* ty=Tensor[(3, 6, 13), float32] */;
    %561 = cast(%560, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
    %562 = cast(meta[relay.Constant][24] /* ty=Tensor[(234), float32] */, dtype="float32") /* ty=Tensor[(234), float32] */;
    %563 = reshape(%561, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float32] */;
    %564 = reshape(%562, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float32] */;
    %565 = acosh(%551) /* ty=Tensor[(3, 8, 5), float64] */;
    %566 = %552.0;
    %567 = %555.3;
    %568 = @func_1923(%563, %564) /* ty=Tensor[(3, 6, 13), float32] */;
    (%565, %566, %567, %var_2732, %560, meta[relay.Constant][24] /* ty=Tensor[(234), float32] */, %568)
  };
  %569(%var_2752, %var_2753) /* ty=(Tensor[(3, 8, 5), float64], Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool], int8, Tensor[(3, 6, 13), float32], Tensor[(234), float32], Tensor[(3, 6, 13), float32]) */
}

def @func_4068() -> Tensor[(8, 2, 16), float32] {
  %571 = fn () -> Tensor[(8, 2, 16), float32] {
    %570 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
    %570.0
  };
  %571() /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_2696(%var_2694: Tensor[(8, 2, 16), float32]) -> Tensor[(8, 2, 16), bool] {
  @func_2693(%var_2694) /* ty=Tensor[(8, 2, 16), bool] */
}

def @func_4603() -> (Tensor[(8, 2, 16), float32],) {
  %572 = @func_2454() /* ty=Tensor[(8, 2, 16), float32] */;
  (%572,)
}

def @func_2194() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float64], Tensor[(392), float32], Tensor[(1080), float32]) {
  @func_2192() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float64], Tensor[(392), float32], Tensor[(1080), float32]) */
}

def @func_5698() -> Tensor[(5, 5, 14), float32] {
  %574 = fn () -> Tensor[(5, 5, 14), float32] {
    %573 = @func_2243() /* ty=(Tensor[(14, 16, 2), float64], Tensor[(5, 5, 14), float32], Tensor[(350), float32]) */;
    %573.1
  };
  %574() /* ty=Tensor[(5, 5, 14), float32] */
}

def @func_2706() -> Tensor[(8, 2, 16), float64] {
  %576 = fn () -> Tensor[(8, 2, 16), float64] {
    %575 = @func_2192() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float64], Tensor[(392), float32], Tensor[(1080), float32]) */;
    %575.1
  };
  %576() /* ty=Tensor[(8, 2, 16), float64] */
}

def @func_943() -> (Tensor[(8, 2, 16), float32],) {
  %577 = @func_832() /* ty=(Tensor[(8, 1, 16), float64],) */;
  %578 = %577.0;
  %579 = cast(%578, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
  %580 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 2, 16), float64] */, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %581 = subtract(%579, %580) /* ty=Tensor[(8, 2, 16), float32] */;
  (%581,)
}

def @func_3161(%var_3106: int64, %var_3107: Tensor[(5, 8, 10), int64], %var_3132: Tensor[(98), float32]) -> (Tensor[(5, 8, 10), float64], Tensor[(5, 8, 10), bool], Tensor[(8, 2, 16), float32], Tensor[(98), float32]) {
  %582 = cast(%var_3107, dtype="float64") /* ty=Tensor[(5, 8, 10), float64] */;
  %583 = cast(%var_3106, dtype="bool") /* ty=bool */;
  %584 = cast(%var_3107, dtype="bool") /* ty=Tensor[(5, 8, 10), bool] */;
  %585 = less(%583, %584) /* ty=Tensor[(5, 8, 10), bool] */;
  %586 = cast(%var_3106, dtype="bool") /* ty=bool */;
  %587 = cast(%585, dtype="bool") /* ty=Tensor[(5, 8, 10), bool] */;
  %588 = cast(%var_3132, dtype="float32") /* ty=Tensor[(98), float32] */;
  %589 = reshape(%588, newshape=[98, 1]) /* ty=Tensor[(98, 1), float32] */;
  %590 = @func_1170(%589) /* ty=(Tensor[(8, 2, 16), float32], Tensor[(7, 14, ?), bool], Tensor[(98, 1), float32], Tensor[(8, 2, 16), float32]) */;
  %591 = sqrt(%582) /* ty=Tensor[(5, 8, 10), float64] */;
  %592 = equal(%586, %587) /* ty=Tensor[(5, 8, 10), bool] */;
  %593 = %590.3;
  (%591, %592, %593, %var_3132)
}

def @func_2455() -> Tensor[(8, 2, 16), float32] {
  %595 = fn () -> Tensor[(8, 2, 16), float32] {
    %594 = @func_1362() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
    %594.1
  };
  %595() /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_4014() -> Tensor[(11, 9, 3), float64] {
  %596 = cast(meta[relay.Constant][26] /* ty=Tensor[(11, 9, 3), float64] */, dtype="float64") /* ty=Tensor[(11, 9, 3), float64] */;
  sin(%596) /* ty=Tensor[(11, 9, 3), float64] */
}

def @func_2090() -> Tensor[(6, 2, 13), float32] {
  %597 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 2, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
  tan(%597) /* ty=Tensor[(6, 2, 13), float32] */
}

def @func_4308() -> (Tensor[(8, 2, 16), float32],) {
  @func_4306() /* ty=(Tensor[(8, 2, 16), float32],) */
}

def @func_5890() -> Tensor[(8, 1, 16), float32] {
  %598 = @func_2895() /* ty=(Tensor[(8, 1, 16), float32], Tensor[(8, 2, 16), float64]) */;
  %598.0
}

def @func_5969(%var_5967: Tensor[(728), float32]) -> (Tensor[(8, 2, 16), float32], Tensor[(?, 728), float64], Tensor[(728), float32], Tensor[(8, 2, 16), float32]) {
  @func_5966(%var_5967) /* ty=(Tensor[(8, 2, 16), float32], Tensor[(?, 728), float64], Tensor[(728), float32], Tensor[(8, 2, 16), float32]) */
}

def @func_2444() -> Tensor[(8, 2, 16), float32] {
  @func_2442() /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_543(%var_530: Tensor[(7, 14, 1), float32]) -> (Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool]) {
  %599 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
  %600 = cast(%var_530, dtype="float32") /* ty=Tensor[(7, 14, 1), float32] */;
  %601 = sigmoid(%600) /* ty=Tensor[(7, 14, 1), float32] */;
  %602 = cast(%var_530, dtype="bool") /* ty=Tensor[(7, 14, 1), bool] */;
  %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%601, dtype="bool") /* ty=Tensor[(7, 14, 1), bool] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %606 = %599.0;
  %607 = greater_equal(%604, %605) /* ty=Tensor[(7, 14, ?), bool] */;
  (%606, %607)
}

def @func_795() -> (Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) {
  %612 = fn () -> (Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) {
    %608 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
    %609 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
    %610 = %608.0;
    %611 = %609.1;
    (%610, %611)
  };
  %612() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */
}

def @func_775(%var_774: Tensor[(98, 1), float32]) -> (Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), uint16], Tensor[(8, ?, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(8, 98, 16), bool], Tensor[(8, 98, 16), bool], Tensor[(8, 98, 16), bool]) {
  %671 = fn (%var_661: Tensor[(98, 1), float32]) -> (Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), uint16], Tensor[(8, ?, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(8, 98, 16), bool], Tensor[(8, 98, 16), bool], Tensor[(8, 98, 16), bool]) {
    %613 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
    %614 = cast(%var_661, dtype="float32") /* ty=Tensor[(98, 1), float32] */;
    %615 = reshape(%614, newshape=[7, 14, 1]) /* ty=Tensor[(7, 14, 1), float32] */;
    %616 = @func_543(%615) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool]) */;
    %617 = %616.1;
    %618 = cast(%var_661, dtype="uint16") /* ty=Tensor[(98, 1), uint16] */;
    %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
    %620 = cast(%617, dtype="uint16") /* ty=Tensor[(7, 14, ?), uint16] */;
    %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %622 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
    %623 = %622.0;
    %624 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
    %625 = %624.0;
    %626 = cast(%625, dtype="float64") /* ty=Tensor[(8, ?, 16), float64] */;
    %627 = shape_of(%623, dtype="int32") /* ty=Tensor[(3), int32] */;
    %628 = cast(%623, dtype="float64") /* ty=Tensor[(8, ?, 16), float64] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %630 = cast(%617, dtype="float32") /* ty=Tensor[(7, 14, ?), float32] */;
    %631 = reshape(%630, newshape=[7, 14, 1]) /* ty=Tensor[(7, 14, 1), float32] */;
    %632 = @func_543(%631) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool]) */;
    %633 = minimum(%620, %621) /* ty=Tensor[(7, 14, ?), uint16] */;
    %634 = cast(%633, dtype="float32") /* ty=Tensor[(7, 14, ?), float32] */;
    %635 = reshape(%634, newshape=[7, 14, 1]) /* ty=Tensor[(7, 14, 1), float32] */;
    %636 = @func_543(%635) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), bool]) */;
    %637 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
    %638 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
    %639 = cast(%623, dtype="float64") /* ty=Tensor[(8, ?, 16), float64] */;
    %640 = exp(%639) /* ty=Tensor[(8, ?, 16), float64] */;
    %641 = cast(%640, dtype="float64") /* ty=Tensor[(8, ?, 16), float64] */;
    %642 = cast(%var_661, dtype="float64") /* ty=Tensor[(98, 1), float64] */;
    %643 = mod(%641, %642) /* ty=Tensor[(8, 98, 16), float64] */;
    %644 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 98, 16), float64] */, dtype="bool") /* ty=Tensor[(8, 98, 16), bool] */;
    %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
    %646 = cast(%643, dtype="bool") /* ty=Tensor[(8, 98, 16), bool] */;
    %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %648 = not_equal(%646, %647) /* ty=Tensor[(8, 98, 16), bool] */;
    %649 = cast(%648, dtype="bool") /* ty=Tensor[(8, 98, 16), bool] */;
    %650 = cast(%623, dtype="bool") /* ty=Tensor[(8, ?, 16), bool] */;
    %651 = cast(%643, dtype="float64") /* ty=Tensor[(8, 98, 16), float64] */;
    %652 = log2(%651) /* ty=Tensor[(8, 98, 16), float64] */;
    %653 = cast(%652, dtype="bool") /* ty=Tensor[(8, 98, 16), bool] */;
    %654 = cast(%640, dtype="bool") /* ty=Tensor[(8, ?, 16), bool] */;
    %655 = cast(%640, dtype="float64") /* ty=Tensor[(8, ?, 16), float64] */;
    %656 = atan(%655) /* ty=Tensor[(8, ?, 16), float64] */;
    %657 = cast(%656, dtype="float64") /* ty=Tensor[(8, ?, 16), float64] */;
    %658 = cast(%643, dtype="float64") /* ty=Tensor[(8, 98, 16), float64] */;
    %659 = floor_mod(%657, %658) /* ty=Tensor[(8, 98, 16), float64] */;
    %660 = cast(%659, dtype="bool") /* ty=Tensor[(8, 98, 16), bool] */;
    %661 = cast(%623, dtype="bool") /* ty=Tensor[(8, ?, 16), bool] */;
    %662 = %613.0;
    %663 = floor_divide(%628, %629) /* ty=Tensor[(8, ?, 16), float64] */;
    %664 = %632.0;
    %665 = %636.0;
    %666 = %637.1;
    %667 = %638.0;
    %668 = logical_and(%649, %650) /* ty=Tensor[(8, 98, 16), bool] */;
    %669 = greater(%653, %654) /* ty=Tensor[(8, 98, 16), bool] */;
    %670 = greater_equal(%660, %661) /* ty=Tensor[(8, 98, 16), bool] */;
    (%662, %633, %663, %664, %665, %666, %667, %668, %669, %670)
  };
  %671(%var_774) /* ty=(Tensor[(8, ?, 16), bool], Tensor[(7, 14, ?), uint16], Tensor[(8, ?, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64], Tensor[(8, ?, 16), bool], Tensor[(8, 98, 16), bool], Tensor[(8, 98, 16), bool], Tensor[(8, 98, 16), bool]) */
}

def @func_6132() -> (Tensor[(8, 2, 16), float32], Tensor[(7, 14, 2), float64], Tensor[(98, 2), float64]) {
  %672 = @func_4603() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %673 = cast(meta[relay.Constant][29] /* ty=Tensor[(98, 2), float64] */, dtype="float64") /* ty=Tensor[(98, 2), float64] */;
  %674 = reshape(%673, newshape=[7, 14, 2]) /* ty=Tensor[(7, 14, 2), float64] */;
  %675 = %672.0;
  %676 = @func_4407(%674) /* ty=Tensor[(7, 14, 2), float64] */;
  (%675, %676, meta[relay.Constant][29] /* ty=Tensor[(98, 2), float64] */)
}

def @func_4769(%var_4767: Tensor[(15, 8, 13), int8], %var_4768: Tensor[(15, 8, 13), int8]) -> (Tensor[(15, 8, 13), int8],) {
  @func_4765(%var_4767, %var_4768) /* ty=(Tensor[(15, 8, 13), int8],) */
}

def @func_3370(%var_3369: Tensor[(12, 15, 5), float64]) -> (Tensor[(12, 15, 5), float64], Tensor[(10, 6, 7), uint16], Tensor[(1, 70), uint16], Tensor[(420), uint16], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %691 = fn (%var_3335: Tensor[(12, 15, 5), float64]) -> (Tensor[(12, 15, 5), float64], Tensor[(10, 6, 7), uint16], Tensor[(1, 70), uint16], Tensor[(420), uint16], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
    %677 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 15, 5), float64] */, dtype="float64") /* ty=Tensor[(12, 15, 5), float64] */;
    %678 = shape_of(%var_3335, dtype="int32") /* ty=Tensor[(3), int32] */;
    %679 = cast(%var_3335, dtype="float64") /* ty=Tensor[(12, 15, 5), float64] */;
    %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %681 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 70), uint16] */, dtype="uint16") /* ty=Tensor[(1, 70), uint16] */;
    %682 = cast(meta[relay.Constant][32] /* ty=Tensor[(420), uint16] */, dtype="uint16") /* ty=Tensor[(420), uint16] */;
    %683 = reshape(%681, newshape=[10, 1, 7]) /* ty=Tensor[(10, 1, 7), uint16] */;
    %684 = reshape(%682, newshape=[10, 6, 7]) /* ty=Tensor[(10, 6, 7), uint16] */;
    %685 = @func_2033() /* ty=(Tensor[(14, 16, 2), float64], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
    %686 = @func_1670() /* ty=(Tensor[(8, 2, 16), float32],) */;
    %687 = power(%679, %680) /* ty=Tensor[(12, 15, 5), float64] */;
    %688 = @func_2361(%683, %684) /* ty=Tensor[(10, 6, 7), uint16] */;
    %689 = %685.3;
    %690 = %686.0;
    (%687, %688, meta[relay.Constant][31] /* ty=Tensor[(1, 70), uint16] */, meta[relay.Constant][32] /* ty=Tensor[(420), uint16] */, %689, %690)
  };
  %691(%var_3369) /* ty=(Tensor[(12, 15, 5), float64], Tensor[(10, 6, 7), uint16], Tensor[(1, 70), uint16], Tensor[(420), uint16], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */
}

def @func_2364(%var_2362: Tensor[(10, 1, 7), uint16], %var_2363: Tensor[(10, 6, 7), uint16]) -> Tensor[(10, 6, 7), uint16] {
  %694 = fn (%var_2347: Tensor[(10, 1, 7), uint16], %var_2348: Tensor[(10, 6, 7), uint16]) -> Tensor[(10, 6, 7), uint16] {
    %692 = cast(%var_2347, dtype="uint16") /* ty=Tensor[(10, 1, 7), uint16] */;
    %693 = cast(%var_2348, dtype="uint16") /* ty=Tensor[(10, 6, 7), uint16] */;
    logical_xor(%692, %693) /* ty=Tensor[(10, 6, 7), uint16] */
  };
  %694(%var_2362, %var_2363) /* ty=Tensor[(10, 6, 7), uint16] */
}

def @func_5855() -> (Tensor[(1080), float32], Tensor[(15, 8, 13), int8], Tensor[(1560), int8]) {
  %695 = @func_1442() /* ty=(Tensor[(8, 2, 16), uint64], Tensor[(9, 8, 1), float32], Tensor[(1080), float32], Tensor[(98, 1), float32], Tensor[(1, 392), float32], Tensor[(8, ?, 16), bool], Tensor[(392), float32]) */;
  %696 = cast(meta[relay.Constant][33] /* ty=Tensor[(1560), int8] */, dtype="int8") /* ty=Tensor[(1560), int8] */;
  %697 = cast(meta[relay.Constant][33] /* ty=Tensor[(1560), int8] */, dtype="int8") /* ty=Tensor[(1560), int8] */;
  %698 = reshape(%696, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int8] */;
  %699 = reshape(%697, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int8] */;
  %700 = @func_4765(%698, %699) /* ty=(Tensor[(15, 8, 13), int8],) */;
  %701 = %695.2;
  %702 = %700.0;
  (%701, %702, meta[relay.Constant][33] /* ty=Tensor[(1560), int8] */)
}

def @func_3650() -> (Tensor[(8, ?, 16), float64],) {
  %712 = fn () -> (Tensor[(8, ?, 16), float64],) {
    %703 = @func_492() /* ty=(Tensor[(8, ?, 16), bool], Tensor[(8, 1, 16), float64]) */;
    %704 = %703.1;
    %705 = @func_3265() /* ty=(Tensor[(8, ?, 16), float64],) */;
    %706 = %705.0;
    %707 = cast(%706, dtype="float64") /* ty=Tensor[(8, ?, 16), float64] */;
    %708 = shape_of(%704, dtype="int32") /* ty=Tensor[(3), int32] */;
    %709 = cast(%704, dtype="float64") /* ty=Tensor[(8, 1, 16), float64] */;
    %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %711 = divide(%709, %710) /* ty=Tensor[(8, ?, 16), float64] */;
    (%711,)
  };
  %712() /* ty=(Tensor[(8, ?, 16), float64],) */
}

def @func_4875() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %717 = fn () -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
    %713 = @func_3010() /* ty=(Tensor[(8, 2, 16), float32],) */;
    %714 = @func_4187() /* ty=(Tensor[(8, 2, 16), float32],) */;
    %715 = %713.0;
    %716 = %714.0;
    (%715, %716)
  };
  %717() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */
}

def @func_3210() -> (Tensor[(14, 16, 2), float64],) {
  @func_3208() /* ty=(Tensor[(14, 16, 2), float64],) */
}

def @func_5487() -> (Tensor[(6, 2, 13), float32], Tensor[(8, 2, 16), float32]) {
  @func_5485() /* ty=(Tensor[(6, 2, 13), float32], Tensor[(8, 2, 16), float32]) */
}

def @func_1339() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %718 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
  %719 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %720 = %718.1;
  %721 = %719.0;
  (%720, %721)
}

def @func_3327() -> (Tensor[(14, 12, 12), float64], Tensor[(8, 2, 16), float32]) {
  %727 = fn () -> (Tensor[(14, 12, 12), float64], Tensor[(8, 2, 16), float32]) {
    %722 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 1, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 1, 12), float64] */;
    %723 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 12, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
    %724 = @func_1362() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
    %725 = floor_mod(%722, %723) /* ty=Tensor[(14, 12, 12), float64] */;
    %726 = %724.0;
    (%725, %726)
  };
  %727() /* ty=(Tensor[(14, 12, 12), float64], Tensor[(8, 2, 16), float32]) */
}

def @func_4188() -> (Tensor[(8, 2, 16), float32],) {
  %730 = fn () -> (Tensor[(8, 2, 16), float32],) {
    %728 = @func_2871() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, ?, 16), bool]) */;
    %729 = %728.0;
    (%729,)
  };
  %730() /* ty=(Tensor[(8, 2, 16), float32],) */
}

def @func_4737(%var_4735: Tensor[(234), float32]) -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(9, 100), float64], Tensor[(3, 6, 13), float32], Tensor[(234), float32]) {
  @func_4734(%var_4735) /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(9, 100), float64], Tensor[(3, 6, 13), float32], Tensor[(234), float32]) */
}

def @func_1672() -> (Tensor[(8, 2, 16), float32],) {
  @func_1670() /* ty=(Tensor[(8, 2, 16), float32],) */
}

def @func_4801() -> Tensor[(8, 2, 16), float32] {
  %732 = fn () -> Tensor[(8, 2, 16), float32] {
    %731 = @func_2806() /* ty=(Tensor[(8, 2, 16), float32],) */;
    %731.0
  };
  %732() /* ty=Tensor[(8, 2, 16), float32] */
}

def @func_3752(%var_3730: Tensor[(715), float32]) -> (Tensor[(8, 2, 16), float64], Tensor[(8, 1, 16), float64], Tensor[(715), float32], Tensor[(392), float32]) {
  %733 = @func_2192() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float64], Tensor[(392), float32], Tensor[(1080), float32]) */;
  %734 = cast(%var_3730, dtype="float32") /* ty=Tensor[(715), float32] */;
  %735 = cast(%var_3730, dtype="float32") /* ty=Tensor[(715), float32] */;
  %736 = reshape(%734, newshape=[13, 5, 11]) /* ty=Tensor[(13, 5, 11), float32] */;
  %737 = reshape(%735, newshape=[13, 5, 11]) /* ty=Tensor[(13, 5, 11), float32] */;
  %738 = @func_878(%736, %737) /* ty=(Tensor[(13, 5, 11), float32], Tensor[(8, 1, 16), float64]) */;
  %739 = @func_1225() /* ty=(Tensor[(392), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 1, 16), float64]) */;
  %740 = %733.1;
  %741 = %738.1;
  %742 = %739.0;
  (%740, %741, %var_3730, %742)
}

def @main(%var_6194: Tensor[(10, 14, 15), float64]) -> Tensor[(10, 14, 15), float64] {
  %743 = cast(%var_6194, dtype="float64") /* ty=Tensor[(10, 14, 15), float64] */;
  cosh(%743) /* ty=Tensor[(10, 14, 15), float64] */
}

def @func_5462() -> (Tensor[(8, 2, 16), float32],) {
  @func_5460() /* ty=(Tensor[(8, 2, 16), float32],) */
}

def @func_4016() -> Tensor[(11, 9, 3), float64] {
  @func_4014() /* ty=Tensor[(11, 9, 3), float64] */
}

def @func_4734(%var_4731: Tensor[(234), float32]) -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(9, 100), float64], Tensor[(3, 6, 13), float32], Tensor[(234), float32]) {
  %744 = @func_1064() /* ty=(Tensor[(8, 2, 16), float32],) */;
  %745 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 100), float64] */, dtype="float64") /* ty=Tensor[(9, 100), float64] */;
  %746 = reshape(%745, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), float64] */;
  %747 = @func_3368(%746) /* ty=(Tensor[(12, 15, 5), float64], Tensor[(10, 6, 7), uint16], Tensor[(1, 70), uint16], Tensor[(420), uint16], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
  %748 = cast(%var_4731, dtype="float32") /* ty=Tensor[(234), float32] */;
  %749 = cast(%var_4731, dtype="float32") /* ty=Tensor[(234), float32] */;
  %750 = reshape(%748, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float32] */;
  %751 = reshape(%749, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float32] */;
  %752 = %744.0;
  %753 = %747.4;
  %754 = @func_1923(%750, %751) /* ty=Tensor[(3, 6, 13), float32] */;
  (%752, %753, meta[relay.Constant][36] /* ty=Tensor[(9, 100), float64] */, %754, %var_4731)
}

def @func_2034() -> (Tensor[(14, 16, 2), float64], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  %763 = fn () -> (Tensor[(14, 16, 2), float64], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
    %755 = @func_1960() /* ty=(Tensor[(14, 16, 2), float64],) */;
    %756 = @func_943() /* ty=(Tensor[(8, 2, 16), float32],) */;
    %757 = @func_943() /* ty=(Tensor[(8, 2, 16), float32],) */;
    %758 = @func_1362() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */;
    %759 = %755.0;
    %760 = %756.0;
    %761 = %757.0;
    %762 = %758.1;
    (%759, %760, %761, %762)
  };
  %763() /* ty=(Tensor[(14, 16, 2), float64], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */
}

def @func_3166(%var_3163: int64, %var_3164: Tensor[(5, 8, 10), int64], %var_3165: Tensor[(98), float32]) -> (Tensor[(5, 8, 10), float64], Tensor[(5, 8, 10), bool], Tensor[(8, 2, 16), float32], Tensor[(98), float32]) {
  @func_3161(%var_3163, %var_3164, %var_3165) /* ty=(Tensor[(5, 8, 10), float64], Tensor[(5, 8, 10), bool], Tensor[(8, 2, 16), float32], Tensor[(98), float32]) */
}

def @func_5577(%var_5575: Tensor[(16, 8, 4), int16], %var_5576: Tensor[(16, 8, 4), int16]) -> Tensor[(16, 8, 4), int16] {
  @func_5573(%var_5575, %var_5576) /* ty=Tensor[(16, 8, 4), int16] */
}

def @func_4643() -> (Tensor[(8, 2, 16), float32],) {
  @func_4641() /* ty=(Tensor[(8, 2, 16), float32],) */
}

def @func_5208() -> (Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) {
  @func_5206() /* ty=(Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32], Tensor[(8, 2, 16), float32]) */
}

def @func_5002() -> (Tensor[(8, 2, 16), float32],) {
  %764 = @func_4327() /* ty=Tensor[(8, 2, 16), float32] */;
  %765 = cast(%764, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %766 = rsqrt(%765) /* ty=Tensor[(8, 2, 16), float32] */;
  (%766,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen351/build/output.py:2298: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen351/build/output.py", line 2303, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_cosh_kernel0(double* __restrict__ T_cosh, double* __restrict__ placeholder) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 2100) {
    T_cosh[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = cosh(placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]);
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

