==========mod==========
#[version = "0.0.5"]
def @func_4051() -> (Tensor[(13, 10, 12), bool],) {
  %0 = @func_2991() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool]) */;
  %1 = %0.1;
  (%1,)
}

def @func_9907() -> Tensor[(13, 10, 12), bool] {
  @func_5597() /* ty=Tensor[(13, 10, 12), bool] */
}

def @func_6356() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool], Tensor[(13, 16, 12), float64]) {
  %2 = @func_2488() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %3 = @func_3097() /* ty=Tensor[(13, 10, 12), uint64] */;
  %4 = cast(%3, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %5 = cast(%3, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %6 = reshape(%4, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint64] */;
  %7 = reshape(%5, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint64] */;
  %8 = @func_588(%6, %7) /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(2496), int32], Tensor[(13, 10, 12), bool], Tensor[(13, 16, 12), int64]) */;
  %9 = %8.3;
  %10 = cast(%9, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
  %11 = %2.0;
  %12 = @func_1900() /* ty=Tensor[(13, 10, 12), bool] */;
  %13 = cos(%10) /* ty=Tensor[(13, 16, 12), float64] */;
  (%11, %3, %12, %13)
}

def @func_6475() -> Tensor[(13, 10, 12), uint64] {
  %14 = @func_4248() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(2496), int32]) */;
  %14.0
}

def @func_10277() -> (Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64]) {
  %15 = @func_6637() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
  %16 = @func_3602() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %17 = @func_2488() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %18 = %15.1;
  %19 = %16.0;
  %20 = %17.0;
  (%18, %19, %20)
}

def @func_2488() -> (Tensor[(13, 10, 12), float64],) {
  %21 = @func_2256() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %22 = %21.0;
  (%22,)
}

def @func_9204() -> (Tensor[(13, 10, 12), bool],) {
  %23 = @func_901() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) */;
  %24 = %23.0;
  (%24,)
}

def @func_10572() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint32]) {
  %25 = @func_9006() /* ty=(Tensor[(13, 10, 12), bool],) */;
  %26 = @func_10277() /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64]) */;
  %27 = %25.0;
  %28 = %26.0;
  (%27, %28)
}

def @func_3565(%var_3557: Tensor[(13, 9, 6), int8], %var_3558: Tensor[(13, 9, 6), int8]) -> (Tensor[(13, 9, 6), int8],) {
  %29 = cast(%var_3558, dtype="int8") /* ty=Tensor[(13, 9, 6), int8] */;
  %30 = shape_of(%var_3557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%var_3557, dtype="int8") /* ty=Tensor[(13, 9, 6), int8] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %33 = bitwise_and(%31, %32) /* ty=Tensor[(13, 9, 6), int8] */;
  (%33,)
}

def @func_8011(%var_7994: Tensor[(6, 6, 12), float32]) -> (Tensor[(6, 6, 12), int8],) {
  %34 = cast(%var_7994, dtype="float32") /* ty=Tensor[(6, 6, 12), float32] */;
  %35 = atanh(%34) /* ty=Tensor[(6, 6, 12), float32] */;
  %36 = cast(%var_7994, dtype="int8") /* ty=Tensor[(6, 6, 12), int8] */;
  %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%35, dtype="int8") /* ty=Tensor[(6, 6, 12), int8] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %40 = bitwise_and(%38, %39) /* ty=Tensor[(6, 6, 12), int8] */;
  (%40,)
}

def @func_2866() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) {
  %41 = @func_538() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32], Tensor[(13, 10, 12), uint32]) */;
  %42 = %41.1;
  %43 = cast(%42, dtype="float32") /* ty=Tensor[(13, 16, 12), float32] */;
  %44 = log2(%43) /* ty=Tensor[(13, 16, 12), float32] */;
  %45 = cast(%44, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
  %46 = @func_2714() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64]) */;
  %47 = @func_2714() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64]) */;
  %48 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %49 = asinh(%45) /* ty=Tensor[(13, 16, 12), float64] */;
  %50 = %46.0;
  %51 = %47.0;
  (%48, %49, %50, %51)
}

def @func_5767() -> (Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), uint32]) {
  %52 = @func_1682() /* ty=Tensor[(13, 10, 12), uint64] */;
  %53 = cast(%52, dtype="float32") /* ty=Tensor[(13, 10, 12), float32] */;
  %54 = acosh(%53) /* ty=Tensor[(13, 10, 12), float32] */;
  %55 = @func_3896() /* ty=Tensor[(13, 10, 12), uint32] */;
  (%54, %55)
}

def @func_10829() -> Tensor[(13, 10, 12), bool] {
  @func_5597() /* ty=Tensor[(13, 10, 12), bool] */
}

def @func_4094() -> (Tensor[(13, 10, 12), float64],) {
  %56 = @func_2256() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %57 = %56.0;
  (%57,)
}

def @func_9976(%var_9939: Tensor[(5, 12, 9), float32]) -> (Tensor[(13, 10, 12), float64], Tensor[(5, 12, 9), bool]) {
  %58 = @func_2866() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %59 = cast(%var_9939, dtype="float32") /* ty=Tensor[(5, 12, 9), float32] */;
  %60 = exp(%59) /* ty=Tensor[(5, 12, 9), float32] */;
  %61 = cast(%var_9939, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%60, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %65 = %58.2;
  %66 = logical_or(%63, %64) /* ty=Tensor[(5, 12, 9), bool] */;
  (%65, %66)
}

def @func_1385() -> (Tensor[(13, 10, 12), uint64],) {
  %67 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%67,)
}

def @func_7404() -> (Tensor[(13, 10, 12), uint64], Tensor[(7, 3, 15), float32]) {
  %68 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 3, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 3, 15), float32] */;
  %69 = erf(%68) /* ty=Tensor[(7, 3, 15), float32] */;
  %70 = cast(%69, dtype="float32") /* ty=Tensor[(7, 3, 15), float32] */;
  %71 = @func_5023() /* ty=Tensor[(13, 10, 12), uint64] */;
  %72 = log10(%70) /* ty=Tensor[(7, 3, 15), float32] */;
  (%71, %72)
}

def @func_3896() -> Tensor[(13, 10, 12), uint32] {
  @func_370() /* ty=Tensor[(13, 10, 12), uint32] */
}

def @func_2796() -> (Tensor[(3, 6, 14), float64], Tensor[(3, 6, 14), float64]) {
  %73 = @func_2714() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64]) */;
  %74 = @func_2714() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64]) */;
  %75 = %73.1;
  %76 = %74.1;
  (%75, %76)
}

def @func_171(%var_143: Tensor[(8, 4, 11), float32], %var_144: Tensor[(8, 4, 11), float32], %var_150: Tensor[(2496), int32]) -> (Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(8, 4, 11), uint16], Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), int64]) {
  %77 = cast(%var_150, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %78 = reshape(%77, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), int32] */;
  %79 = @func_63(%78) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) */;
  %80 = cast(%var_143, dtype="float32") /* ty=Tensor[(8, 4, 11), float32] */;
  %81 = log(%80) /* ty=Tensor[(8, 4, 11), float32] */;
  %82 = cast(%var_144, dtype="bool") /* ty=Tensor[(8, 4, 11), bool] */;
  %83 = shape_of(%var_143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%var_143, dtype="bool") /* ty=Tensor[(8, 4, 11), bool] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %86 = equal(%84, %85) /* ty=Tensor[(8, 4, 11), bool] */;
  %87 = cast(%86, dtype="uint16") /* ty=Tensor[(8, 4, 11), uint16] */;
  %88 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%81, dtype="uint16") /* ty=Tensor[(8, 4, 11), uint16] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %91 = cast(%var_150, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %92 = reshape(%91, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), int32] */;
  %93 = @func_63(%92) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) */;
  %94 = cast(%var_150, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %95 = reshape(%94, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), int32] */;
  %96 = @func_63(%95) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) */;
  %97 = %79.0;
  %98 = minimum(%89, %90) /* ty=Tensor[(8, 4, 11), uint16] */;
  %99 = %93.0;
  %100 = %96.0;
  (%97, %var_150, %98, %99, %100)
}

def @func_9654(%var_9645: int16, %var_9646: Tensor[(84, 1), int16]) -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), int64], Tensor[(6, 7, 2), int16], int16, Tensor[(84, 1), int16]) {
  %101 = cast(%var_9645, dtype="int16") /* ty=int16 */;
  %102 = cast(%var_9646, dtype="int16") /* ty=Tensor[(84, 1), int16] */;
  %103 = reshape(%101, newshape=[]) /* ty=int16 */;
  %104 = reshape(%102, newshape=[6, 7, 2]) /* ty=Tensor[(6, 7, 2), int16] */;
  %105 = @func_6111(%103, %104) /* ty=(Tensor[(6, 7, 2), int16],) */;
  %106 = @func_1900() /* ty=Tensor[(13, 10, 12), bool] */;
  %107 = @func_7024() /* ty=Tensor[(13, 10, 12), int64] */;
  %108 = %105.0;
  (%106, %107, %108, %var_9645, %var_9646)
}

def @func_10540() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %109 = @func_3144() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %110 = %109.1;
  %111 = @func_5023() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%110, %111)
}

def @func_1584() -> Tensor[(13, 10, 12), float64] {
  %112 = @func_1027() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
  %112.0
}

def @func_6244() -> Tensor[(13, 10, 12), uint64] {
  @func_2283() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @main(%var_11263: Tensor[(7, 12, 10), float32], %var_11292: Tensor[(1560), uint32]) -> (Tensor[(7, 12, 10), float64], Tensor[(13, 10, 12), float32], Tensor[(1560), uint32], Tensor[(7, 12, 10), int64]) {
  %113 = cast(%var_11263, dtype="float64") /* ty=Tensor[(7, 12, 10), float64] */;
  %114 = cast(%var_11292, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %115 = reshape(%114, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint32] */;
  %116 = cast(%var_11263, dtype="float32") /* ty=Tensor[(7, 12, 10), float32] */;
  %117 = atanh(%116) /* ty=Tensor[(7, 12, 10), float32] */;
  %118 = cast(%117, dtype="bool") /* ty=Tensor[(7, 12, 10), bool] */;
  %119 = shape_of(%var_11263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%var_11263, dtype="bool") /* ty=Tensor[(7, 12, 10), bool] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %122 = logical_and(%120, %121) /* ty=Tensor[(7, 12, 10), bool] */;
  %123 = cast(%122, dtype="int64") /* ty=Tensor[(7, 12, 10), int64] */;
  %124 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%117, dtype="int64") /* ty=Tensor[(7, 12, 10), int64] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %127 = log10(%113) /* ty=Tensor[(7, 12, 10), float64] */;
  %128 = @func_5557(%115) /* ty=Tensor[(13, 10, 12), float32] */;
  %129 = left_shift(%125, %126) /* ty=Tensor[(7, 12, 10), int64] */;
  (%127, %128, %var_11292, %129)
}

def @func_370() -> Tensor[(13, 10, 12), uint32] {
  %130 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %131 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %132 = cast(%131, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %133 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%130, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_xor(%134, %135) /* ty=Tensor[(13, 10, 12), uint32] */
}

def @func_10039() -> (Tensor[(13, 10, 12), uint32],) {
  %136 = @func_1412() /* ty=(Tensor[(13, 10, 12), uint32],) */;
  %137 = %136.0;
  (%137,)
}

def @func_3097() -> Tensor[(13, 10, 12), uint64] {
  @func_1061() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_7566() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), int64], Tensor[(3, 6, 14), bool], Tensor[(13, 10, 12), bool]) {
  %138 = @func_752() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %139 = cast(meta[relay.Constant][1] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %140 = reshape(%139, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), float64] */;
  %141 = @func_1510(%140) /* ty=(Tensor[(3, 6, 14), float64],) */;
  %142 = %141.0;
  %143 = cast(meta[relay.Constant][1] /* ty=Tensor[(252), float64] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%142, dtype="bool") /* ty=Tensor[(3, 6, 14), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %147 = @func_4051() /* ty=(Tensor[(13, 10, 12), bool],) */;
  %148 = %138.0;
  %149 = @func_731() /* ty=Tensor[(13, 10, 12), int64] */;
  %150 = greater_equal(%145, %146) /* ty=Tensor[(3, 6, 14), bool] */;
  %151 = %147.0;
  (%148, %149, %150, %151)
}

def @func_2181(%var_2171: Tensor[(1, 352), float32]) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool], Tensor[(8, 4, 11), uint16], Tensor[(1, 352), float32], Tensor[(2496), int32]) {
  %152 = @func_1797() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %153 = @func_901() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) */;
  %154 = cast(%var_2171, dtype="float32") /* ty=Tensor[(1, 352), float32] */;
  %155 = cast(%var_2171, dtype="float32") /* ty=Tensor[(1, 352), float32] */;
  %156 = cast(meta[relay.Constant][2] /* ty=Tensor[(2496), int32] */, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %157 = reshape(%154, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), float32] */;
  %158 = reshape(%155, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), float32] */;
  %159 = reshape(%156, newshape=[2496]) /* ty=Tensor[(2496), int32] */;
  %160 = @func_171(%157, %158, %159) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(8, 4, 11), uint16], Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), int64]) */;
  %161 = %152.0;
  %162 = %153.2;
  %163 = %160.2;
  (%161, %162, %163, %var_2171, meta[relay.Constant][2] /* ty=Tensor[(2496), int32] */)
}

def @func_8367() -> (Tensor[(13, 10, 12), uint64],) {
  %164 = @func_6408() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%164,)
}

def @func_5931() -> Tensor[(13, 10, 12), float64] {
  %165 = @func_5579() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %165.0
}

def @func_10714(%var_10706: Tensor[(15, 11, 4), uint64], %var_10707: Tensor[(15, 11, 4), uint64]) -> Tensor[(15, 11, 4), uint64] {
  %166 = cast(%var_10707, dtype="uint64") /* ty=Tensor[(15, 11, 4), uint64] */;
  %167 = shape_of(%var_10706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%var_10706, dtype="uint64") /* ty=Tensor[(15, 11, 4), uint64] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_and(%168, %169) /* ty=Tensor[(15, 11, 4), uint64] */
}

def @func_1061() -> Tensor[(13, 10, 12), uint64] {
  @func_979() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_5355(%var_5350: int64) -> (Tensor[(13, 10, 12), bool], Tensor[(2496), int32], Tensor[(13, 10, 12), int64], int64) {
  %170 = @func_4248() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(2496), int32]) */;
  %171 = cast(%var_5350, dtype="int64") /* ty=int64 */;
  %172 = reshape(%171, newshape=[]) /* ty=int64 */;
  %173 = @func_1196(%172) /* ty=(Tensor[(13, 10, 12), int64], Tensor[(176, 2), int64], int64, Tensor[(11, 4, 8), bool]) */;
  %174 = @func_4613() /* ty=Tensor[(13, 10, 12), bool] */;
  %175 = %170.2;
  %176 = %173.0;
  (%174, %175, %176, %var_5350)
}

def @func_9006() -> (Tensor[(13, 10, 12), bool],) {
  %177 = @func_6765() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64]) */;
  %178 = %177.0;
  (%178,)
}

def @func_1045(%var_1030: Tensor[(11, 9, 11), float64]) -> Tensor[(11, 9, 11), float32] {
  %179 = cast(%var_1030, dtype="float64") /* ty=Tensor[(11, 9, 11), float64] */;
  %180 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(11, 9, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 9, 11), float64] */, dtype="float64") /* ty=Tensor[(11, 9, 11), float64] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %183 = power(%181, %182) /* ty=Tensor[(11, 9, 11), float64] */;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(11, 9, 11), float32] */;
  exp(%184) /* ty=Tensor[(11, 9, 11), float32] */
}

def @func_3602() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %185 = @func_656() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %186 = @func_1682() /* ty=Tensor[(13, 10, 12), uint64] */;
  %187 = %185.0;
  (%186, %187)
}

def @func_9042() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint32]) {
  %188 = @func_6637() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
  %189 = @func_5597() /* ty=Tensor[(13, 10, 12), bool] */;
  %190 = %188.1;
  (%189, %190)
}

def @func_2349() -> Tensor[(13, 10, 12), uint64] {
  @func_979() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_2714() -> (Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64]) {
  %191 = @func_752() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %192 = cast(meta[relay.Constant][4] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %193 = reshape(%192, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), float64] */;
  %194 = @func_1510(%193) /* ty=(Tensor[(3, 6, 14), float64],) */;
  %195 = %191.1;
  %196 = %194.0;
  (%195, %196, meta[relay.Constant][4] /* ty=Tensor[(252), float64] */)
}

def @func_4574(%var_4557: Tensor[(352), float32]) -> (Tensor[(13, 10, 12), uint64], Tensor[(352, ?), bool]) {
  %197 = @func_1797() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %198 = cast(%var_4557, dtype="float32") /* ty=Tensor[(352), float32] */;
  %199 = reshape(%198, newshape=[352, 1]) /* ty=Tensor[(352, 1), float32] */;
  %200 = @func_1993(%199) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(2496), int32], Tensor[(352, 1), float64]) */;
  %201 = %200.5;
  %202 = cast(%var_4557, dtype="bool") /* ty=Tensor[(352), bool] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(2), int32] */;
  %204 = cast(%201, dtype="bool") /* ty=Tensor[(352, 1), bool] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %206 = %197.0;
  %207 = equal(%204, %205) /* ty=Tensor[(352, ?), bool] */;
  (%206, %207)
}

def @func_8191() -> Tensor[(13, 10, 12), uint32] {
  @func_3896() /* ty=Tensor[(13, 10, 12), uint32] */
}

def @func_538() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32], Tensor[(13, 10, 12), uint32]) {
  %208 = cast(meta[relay.Constant][5] /* ty=Tensor[(2496), int32] */, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %209 = reshape(%208, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), int32] */;
  %210 = @func_63(%209) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) */;
  %211 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %212 = %210.1;
  %213 = @func_370() /* ty=Tensor[(13, 10, 12), uint32] */;
  (%211, %212, meta[relay.Constant][5] /* ty=Tensor[(2496), int32] */, %213)
}

def @func_9450() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint32]) {
  %214 = @func_3944() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %215 = @func_4613() /* ty=Tensor[(13, 10, 12), bool] */;
  %216 = @func_7024() /* ty=Tensor[(13, 10, 12), int64] */;
  %217 = @func_1682() /* ty=Tensor[(13, 10, 12), uint64] */;
  %218 = @func_4124() /* ty=Tensor[(13, 10, 12), uint64] */;
  %219 = %214.0;
  %220 = @func_8191() /* ty=Tensor[(13, 10, 12), uint32] */;
  (%215, %216, %217, %218, %219, %220)
}

def @func_1510(%var_1493: Tensor[(3, 6, 14), float64]) -> (Tensor[(3, 6, 14), float64],) {
  %221 = cast(%var_1493, dtype="float64") /* ty=Tensor[(3, 6, 14), float64] */;
  %222 = log10(%221) /* ty=Tensor[(3, 6, 14), float64] */;
  (%222,)
}

def @func_9133() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %223 = @func_3886() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) */;
  %224 = @func_6011() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64]) */;
  %225 = %223.1;
  %226 = %224.0;
  (%225, %226)
}

def @func_3036() -> (Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) {
  %227 = @func_511() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */;
  %228 = @func_511() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */;
  %229 = %227.1;
  %230 = %228.2;
  (%229, %230)
}

def @func_7710() -> (Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), bool], Tensor[(176, 2), int64], int64, Tensor[(16, 2, 7), int16], Tensor[(224), int16], Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64]) {
  %231 = @func_4051() /* ty=(Tensor[(13, 10, 12), bool],) */;
  %232 = cast(8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %233 = reshape(%232, newshape=[]) /* ty=int64 */;
  %234 = @func_1196(%233) /* ty=(Tensor[(13, 10, 12), int64], Tensor[(176, 2), int64], int64, Tensor[(11, 4, 8), bool]) */;
  %235 = cast(meta[relay.Constant][6] /* ty=Tensor[(224), int16] */, dtype="int16") /* ty=Tensor[(224), int16] */;
  %236 = reshape(%235, newshape=[16, 2, 7]) /* ty=Tensor[(16, 2, 7), int16] */;
  %237 = @func_1829(%236) /* ty=(Tensor[(16, 2, 7), int16],) */;
  %238 = @func_4051() /* ty=(Tensor[(13, 10, 12), bool],) */;
  %239 = @func_7024() /* ty=Tensor[(13, 10, 12), int64] */;
  %240 = %231.0;
  %241 = %234.1;
  %242 = %237.0;
  %243 = %238.0;
  %244 = @func_6475() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%239, %240, %241, 8 /* ty=int64 */, %242, meta[relay.Constant][6] /* ty=Tensor[(224), int16] */, %243, %244)
}

def @func_511() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) {
  %245 = cast(meta[relay.Constant][7] /* ty=Tensor[(2496), int32] */, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %246 = reshape(%245, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), int32] */;
  %247 = @func_63(%246) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) */;
  %248 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %249 = %247.1;
  (%248, %249, meta[relay.Constant][7] /* ty=Tensor[(2496), int32] */)
}

def @func_6977(%var_6951: float64, %var_6952: Tensor[(9, 1, 10), float64]) -> (Tensor[(9, 1, 10), float64], Tensor[(13, 10, 12), int64]) {
  %250 = cast(%var_6951, dtype="float64") /* ty=float64 */;
  %251 = cast(%var_6952, dtype="float64") /* ty=Tensor[(9, 1, 10), float64] */;
  %252 = @func_1054() /* ty=(Tensor[(13, 10, 12), int64],) */;
  %253 = floor_divide(%250, %251) /* ty=Tensor[(9, 1, 10), float64] */;
  %254 = %252.0;
  (%253, %254)
}

def @func_447() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %255 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %256 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%255, %256)
}

def @func_10843() -> Tensor[(13, 10, 12), uint64] {
  @func_5023() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_7929(%var_7924: Tensor[(900), float64]) -> (Tensor[(13, 10, 12), uint64], Tensor[(9, 8, 9), bool], Tensor[(648), int16], int64, Tensor[(60), float64], Tensor[(900), float64]) {
  %257 = cast(meta[relay.Constant][8] /* ty=Tensor[(648), int16] */, dtype="int16") /* ty=Tensor[(648), int16] */;
  %258 = cast(meta[relay.Constant][8] /* ty=Tensor[(648), int16] */, dtype="int16") /* ty=Tensor[(648), int16] */;
  %259 = cast(-10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %260 = cast(meta[relay.Constant][9] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %261 = cast(%var_7924, dtype="float64") /* ty=Tensor[(900), float64] */;
  %262 = reshape(%257, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), int16] */;
  %263 = reshape(%258, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), int16] */;
  %264 = reshape(%259, newshape=[]) /* ty=int64 */;
  %265 = reshape(%260, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %266 = reshape(%261, newshape=[900]) /* ty=Tensor[(900), float64] */;
  %267 = @func_4663(%262, %263, %264, %265, %266) /* ty=(Tensor[(9, 8, 9), bool], Tensor[(9, 8, 9), uint32], Tensor[(13, 10, 12), uint64], int64, Tensor[(10, 15, 6), uint8], Tensor[(60), float64], Tensor[(900), float64]) */;
  %268 = @func_6560() /* ty=Tensor[(13, 10, 12), uint64] */;
  %269 = %267.0;
  (%268, %269, meta[relay.Constant][8] /* ty=Tensor[(648), int16] */, -10 /* ty=int64 */, meta[relay.Constant][9] /* ty=Tensor[(60), float64] */, %var_7924)
}

def @func_8268() -> (Tensor[(13, 10, 12), float64],) {
  %270 = @func_3944() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %271 = %270.0;
  (%271,)
}

def @func_10074() -> Tensor[(13, 10, 12), uint64] {
  %272 = @func_8367() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %272.0
}

def @func_1797() -> (Tensor[(13, 10, 12), uint64],) {
  %273 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %274 = %273.1;
  (%274,)
}

def @func_7492(%var_7490: int64) -> (Tensor[(13, 10, 12), uint64], int64, int64) {
  %275 = cast(%var_7490, dtype="int64") /* ty=int64 */;
  %276 = reshape(%275, newshape=[]) /* ty=int64 */;
  %277 = @func_4446(%276) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32], int64, Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %278 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %279 = %277.2;
  (%278, %279, %var_7490)
}

def @func_5380(%var_5368: Tensor[(8, 4, 13), float32]) -> Tensor[(8, 4, 13), float32] {
  %280 = cast(%var_5368, dtype="float32") /* ty=Tensor[(8, 4, 13), float32] */;
  cosh(%280) /* ty=Tensor[(8, 4, 13), float32] */
}

def @func_8528() -> (Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint32]) {
  %281 = @func_1027() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
  %282 = @func_7024() /* ty=Tensor[(13, 10, 12), int64] */;
  %283 = %281.2;
  (%282, %283)
}

def @func_7762(%var_7753: bool) -> (Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), uint64], bool, Tensor[(13, 10, 12), uint64]) {
  %284 = @func_5767() /* ty=(Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), uint32]) */;
  %285 = @func_901() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) */;
  %286 = cast(%var_7753, dtype="bool") /* ty=bool */;
  %287 = reshape(%286, newshape=[]) /* ty=bool */;
  %288 = @func_5670(%287) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), float64], Tensor[(352), float32]) */;
  %289 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %290 = %284.0;
  %291 = %285.1;
  %292 = %288.1;
  %293 = %289.1;
  (%290, %291, %292, %var_7753, %293)
}

def @func_1486() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) {
  %294 = @func_1412() /* ty=(Tensor[(13, 10, 12), uint32],) */;
  %295 = %294.0;
  %296 = @func_752() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %297 = %296.1;
  %298 = cast(%297, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %299 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%295, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %302 = cast(%295, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %303 = multiply(%300, %301) /* ty=Tensor[(13, 10, 12), float64] */;
  %304 = asin(%302) /* ty=Tensor[(13, 10, 12), float64] */;
  (%303, %304)
}

def @func_1412() -> (Tensor[(13, 10, 12), uint32],) {
  %305 = @func_1027() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
  %306 = %305.2;
  (%306,)
}

def @func_5270(%var_5243: Tensor[(2, 5, 6), float32], %var_5244: Tensor[(2, 5, 6), float32]) -> Tensor[(2, 5, 6), int64] {
  %307 = cast(%var_5244, dtype="float32") /* ty=Tensor[(2, 5, 6), float32] */;
  %308 = shape_of(%var_5243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%var_5243, dtype="float32") /* ty=Tensor[(2, 5, 6), float32] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %311 = multiply(%309, %310) /* ty=Tensor[(2, 5, 6), float32] */;
  %312 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 5, 6), float32] */, dtype="int64") /* ty=Tensor[(2, 5, 6), int64] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%311, dtype="int64") /* ty=Tensor[(2, 5, 6), int64] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  subtract(%314, %315) /* ty=Tensor[(2, 5, 6), int64] */
}

def @func_2256() -> (Tensor[(13, 10, 12), float64],) {
  %316 = @func_752() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %317 = %316.0;
  (%317,)
}

def @func_2316(%var_2305: Tensor[(13, 10, 12), uint64]) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) {
  %318 = @func_1027() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
  %319 = @func_2283() /* ty=Tensor[(13, 10, 12), uint64] */;
  %320 = cast(%var_2305, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%319, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %324 = %318.1;
  %325 = bitwise_or(%322, %323) /* ty=Tensor[(13, 10, 12), uint32] */;
  (%324, %325)
}

def @func_3283(%var_3248: bool) -> (Tensor[(4, 7, 3), bool], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), uint32]) {
  %326 = cast(%var_3248, dtype="bool") /* ty=bool */;
  %327 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 7, 3), bool] */, dtype="bool") /* ty=Tensor[(4, 7, 3), bool] */;
  %328 = @func_2952() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %329 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 7, 3), bool] */, dtype="uint32") /* ty=Tensor[(4, 7, 3), uint32] */;
  %330 = cast(%var_3248, dtype="uint32") /* ty=uint32 */;
  %331 = logical_or(%326, %327) /* ty=Tensor[(4, 7, 3), bool] */;
  %332 = %328.0;
  %333 = subtract(%329, %330) /* ty=Tensor[(4, 7, 3), uint32] */;
  (%331, %332, %333)
}

def @func_4613() -> Tensor[(13, 10, 12), bool] {
  @func_2013() /* ty=Tensor[(13, 10, 12), bool] */
}

def @func_1829(%var_1824: Tensor[(16, 2, 7), int16]) -> (Tensor[(16, 2, 7), int16],) {
  %334 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 2, 7), int16] */, dtype="int16") /* ty=Tensor[(16, 2, 7), int16] */;
  %335 = shape_of(%var_1824, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%var_1824, dtype="int16") /* ty=Tensor[(16, 2, 7), int16] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %338 = subtract(%336, %337) /* ty=Tensor[(16, 2, 7), int16] */;
  (%338,)
}

def @func_6197() -> (Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64], Tensor[(13, 10, 12), uint64], bool) {
  %339 = @func_6011() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64]) */;
  %340 = cast(meta[relay.Constant][13] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %341 = reshape(%340, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), float64] */;
  %342 = @func_1510(%341) /* ty=(Tensor[(3, 6, 14), float64],) */;
  %343 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %344 = reshape(%343, newshape=[]) /* ty=bool */;
  %345 = @func_5670(%344) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), float64], Tensor[(352), float32]) */;
  %346 = %339.1;
  %347 = %342.0;
  %348 = %345.1;
  (%346, %347, meta[relay.Constant][13] /* ty=Tensor[(252), float64] */, %348, True /* ty=bool */)
}

def @func_1765(%var_1743: Tensor[(10, 1, 6), float64], %var_1750: Tensor[(10, 15, 6), float64]) -> (Tensor[(10, 1, 6), float64], Tensor[(10, 15, 6), uint8]) {
  %349 = cast(%var_1743, dtype="float64") /* ty=Tensor[(10, 1, 6), float64] */;
  %350 = cast(%var_1743, dtype="uint8") /* ty=Tensor[(10, 1, 6), uint8] */;
  %351 = cast(%var_1750, dtype="uint8") /* ty=Tensor[(10, 15, 6), uint8] */;
  %352 = acosh(%349) /* ty=Tensor[(10, 1, 6), float64] */;
  %353 = bitwise_xor(%350, %351) /* ty=Tensor[(10, 15, 6), uint8] */;
  (%352, %353)
}

def @func_6560() -> Tensor[(13, 10, 12), uint64] {
  @func_3097() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_625(%var_607: Tensor[(2496), int32]) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), int64], Tensor[(352), float32], Tensor[(2496), int32]) {
  %354 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %355 = cast(meta[relay.Constant][14] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %356 = cast(meta[relay.Constant][14] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %357 = cast(%var_607, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %358 = reshape(%355, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), float32] */;
  %359 = reshape(%356, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), float32] */;
  %360 = reshape(%357, newshape=[2496]) /* ty=Tensor[(2496), int32] */;
  %361 = @func_171(%358, %359, %360) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(8, 4, 11), uint16], Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), int64]) */;
  %362 = %354.0;
  %363 = %361.0;
  (%362, %363, meta[relay.Constant][14] /* ty=Tensor[(352), float32] */, %var_607)
}

def @func_3886() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
  %364 = @func_1027() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
  %365 = %364.1;
  %366 = cast(%365, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %367 = @func_1027() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
  %368 = log10(%366) /* ty=Tensor[(13, 10, 12), float64] */;
  %369 = %367.1;
  (%368, %369)
}

def @func_5136(%var_5124: Tensor[(1, 1, 5), uint64], %var_5125: Tensor[(9, 16, 5), uint64], %var_5130: Tensor[(2496), int32]) -> (Tensor[(9, 16, 5), uint64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(13, 10, 12), float64]) {
  %370 = cast(%var_5124, dtype="uint64") /* ty=Tensor[(1, 1, 5), uint64] */;
  %371 = cast(%var_5125, dtype="uint64") /* ty=Tensor[(9, 16, 5), uint64] */;
  %372 = cast(%var_5130, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %373 = reshape(%372, newshape=[2496]) /* ty=Tensor[(2496), int32] */;
  %374 = @func_4542(%373) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), int64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32]) */;
  %375 = @func_3944() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %376 = multiply(%370, %371) /* ty=Tensor[(9, 16, 5), uint64] */;
  %377 = %374.2;
  %378 = %375.0;
  (%376, %377, %var_5130, %378)
}

def @func_7024() -> Tensor[(13, 10, 12), int64] {
  @func_6071() /* ty=Tensor[(13, 10, 12), int64] */
}

def @func_7239(%var_7234: Tensor[(4, 7, 4), bool], %var_7235: Tensor[(4, 7, 4), bool]) -> (Tensor[(4, 7, 4), bool],) {
  %379 = cast(%var_7235, dtype="bool") /* ty=Tensor[(4, 7, 4), bool] */;
  %380 = shape_of(%var_7234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%var_7234, dtype="bool") /* ty=Tensor[(4, 7, 4), bool] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %383 = logical_and(%381, %382) /* ty=Tensor[(4, 7, 4), bool] */;
  (%383,)
}

def @func_10954(%var_10947: Tensor[(2496), float32]) -> (Tensor[(2496), float32], Tensor[(13, 10, 12), bool], Tensor[(2496), bool], Tensor[(13, 10, 12), bool]) {
  %384 = @func_10473() /* ty=Tensor[(2496), float32] */;
  %385 = cast(%384, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %386 = sqrt(%385) /* ty=Tensor[(2496), float32] */;
  %387 = cast(%386, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %388 = cast(%var_10947, dtype="bool") /* ty=Tensor[(2496), bool] */;
  %389 = shape_of(%384, dtype="int32") /* ty=Tensor[(1), int32] */;
  %390 = cast(%384, dtype="bool") /* ty=Tensor[(2496), bool] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?), bool] */;
  %392 = @func_1355() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64]) */;
  %393 = atanh(%387) /* ty=Tensor[(2496), float32] */;
  %394 = @func_10829() /* ty=Tensor[(13, 10, 12), bool] */;
  %395 = greater(%390, %391) /* ty=Tensor[(2496), bool] */;
  %396 = %392.0;
  (%393, %394, %395, %396)
}

def @func_656() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %397 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %398 = %397.1;
  %399 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%398, %399)
}

def @func_8461() -> Tensor[(3, 6, 14), float64] {
  %400 = @func_2796() /* ty=(Tensor[(3, 6, 14), float64], Tensor[(3, 6, 14), float64]) */;
  %400.1
}

def @func_8846() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), bool]) {
  %401 = @func_1355() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64]) */;
  %402 = @func_8268() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %403 = @func_752() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %404 = %401.0;
  %405 = %402.0;
  %406 = %403.1;
  %407 = @func_2013() /* ty=Tensor[(13, 10, 12), bool] */;
  (%404, %405, %406, %407)
}

def @func_6011() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64]) {
  %408 = @func_1385() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %409 = @func_3944() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %410 = %408.0;
  %411 = %409.0;
  (%410, %411)
}

def @func_1054() -> (Tensor[(13, 10, 12), int64],) {
  %412 = @func_731() /* ty=Tensor[(13, 10, 12), int64] */;
  (%412,)
}

def @func_7112() -> Tensor[(13, 10, 12), uint64] {
  %413 = @func_1797() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %413.0
}

def @func_1196(%var_1186: int64) -> (Tensor[(13, 10, 12), int64], Tensor[(176, 2), int64], int64, Tensor[(11, 4, 8), bool]) {
  %414 = @func_1054() /* ty=(Tensor[(13, 10, 12), int64],) */;
  %415 = cast(%var_1186, dtype="int64") /* ty=int64 */;
  %416 = reshape(%415, newshape=[]) /* ty=int64 */;
  %417 = @func_1091(%416) /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64], Tensor[(11, 4, 8), bool], int64, Tensor[(176, 2), int64]) */;
  %418 = cast(%var_1186, dtype="int64") /* ty=int64 */;
  %419 = %417.5;
  %420 = cast(%419, dtype="int64") /* ty=Tensor[(176, 2), int64] */;
  %421 = reshape(%418, newshape=[]) /* ty=int64 */;
  %422 = reshape(%420, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), int64] */;
  %423 = @func_417(%421, %422) /* ty=(Tensor[(11, 4, 8), bool],) */;
  %424 = %414.0;
  %425 = %423.0;
  (%424, %419, %var_1186, %425)
}

def @func_4756() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16]) {
  %426 = @func_1355() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64]) */;
  %427 = @func_2952() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %428 = @func_538() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32], Tensor[(13, 10, 12), uint32]) */;
  %429 = %426.0;
  %430 = %427.1;
  %431 = %428.1;
  (%429, %430, %431)
}

def @func_4542(%var_4540: Tensor[(2496), int32]) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), int64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32]) {
  %432 = @func_731() /* ty=Tensor[(13, 10, 12), int64] */;
  %433 = cast(%432, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %434 = @func_979() /* ty=Tensor[(13, 10, 12), uint64] */;
  %435 = cast(%434, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %436 = cast(%var_4540, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %437 = reshape(%433, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint64] */;
  %438 = reshape(%435, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint64] */;
  %439 = reshape(%436, newshape=[2, 1248]) /* ty=Tensor[(2, 1248), int32] */;
  %440 = @func_3390(%437, %438, %439) /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint16], Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(2, 1248), int32], Tensor[(8, 4, 11), uint16], Tensor[(352), float32], Tensor[(13, 10, 12), float64]) */;
  %441 = %440.3;
  (%434, %432, %441, %var_4540)
}

def @func_9872(%var_9794: Tensor[(6, 7, 5), float32]) -> (Tensor[(6, 7, 5), float32], Tensor[(13, 10, 12), uint64], Tensor[(6, 6, 12), int8], Tensor[(432), float32], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
  %442 = cast(%var_9794, dtype="float32") /* ty=Tensor[(6, 7, 5), float32] */;
  %443 = @func_7710() /* ty=(Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), bool], Tensor[(176, 2), int64], int64, Tensor[(16, 2, 7), int16], Tensor[(224), int16], Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64]) */;
  %444 = cast(meta[relay.Constant][15] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %445 = reshape(%444, newshape=[6, 6, 12]) /* ty=Tensor[(6, 6, 12), float32] */;
  %446 = @func_8011(%445) /* ty=(Tensor[(6, 6, 12), int8],) */;
  %447 = @func_2488() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %448 = @func_3144() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %449 = sinh(%442) /* ty=Tensor[(6, 7, 5), float32] */;
  %450 = %443.7;
  %451 = %446.0;
  %452 = %447.0;
  %453 = %448.1;
  (%449, %450, %451, meta[relay.Constant][15] /* ty=Tensor[(432), float32] */, %452, %453)
}

def @func_6408() -> Tensor[(13, 10, 12), uint64] {
  %454 = @func_2952() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %454.1
}

def @func_8693() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) {
  %455 = @func_8528() /* ty=(Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint32]) */;
  %456 = @func_4124() /* ty=Tensor[(13, 10, 12), uint64] */;
  %457 = %455.1;
  (%456, %457)
}

def @func_7981() -> Tensor[(2496), int32] {
  %458 = @func_4248() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(2496), int32]) */;
  %458.2
}

def @func_8211() -> Tensor[(13, 10, 12), uint64] {
  @func_6408() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_9579() -> Tensor[(13, 10, 12), uint64] {
  @func_2283() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_8055() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %459 = @func_7112() /* ty=Tensor[(13, 10, 12), uint64] */;
  %460 = @func_1682() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%459, %460)
}

def @func_10108(%var_10099: Tensor[(1089), float64], %var_10106: int64) -> (Tensor[(13, 10, 12), bool], Tensor[(11, 9, 11), float32], Tensor[(1089), float64], Tensor[(13, 10, 12), bool], int64) {
  %461 = @func_1355() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64]) */;
  %462 = cast(%var_10099, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %463 = reshape(%462, newshape=[11, 9, 11]) /* ty=Tensor[(11, 9, 11), float64] */;
  %464 = cast(%var_10106, dtype="int64") /* ty=int64 */;
  %465 = %461.0;
  %466 = cast(%465, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %467 = reshape(%464, newshape=[]) /* ty=int64 */;
  %468 = reshape(%466, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), float64] */;
  %469 = @func_961(%467, %468) /* ty=(int64, Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint32], Tensor[(8, 44), int16]) */;
  %470 = @func_1045(%463) /* ty=Tensor[(11, 9, 11), float32] */;
  %471 = %469.1;
  (%465, %470, %var_10099, %471, %var_10106)
}

def @func_2013() -> Tensor[(13, 10, 12), bool] {
  @func_1900() /* ty=Tensor[(13, 10, 12), bool] */
}

def @func_10748() -> (Tensor[(13, 10, 12), uint64],) {
  %472 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%472,)
}

def @func_3547() -> (Tensor[(13, 10, 12), int64],) {
  %473 = @func_3539() /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64]) */;
  %474 = %473.2;
  (%474,)
}

def @func_10418() -> (Tensor[(13, 10, 12), uint64],) {
  %475 = @func_6560() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%475,)
}

def @func_752() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) {
  %476 = @func_731() /* ty=Tensor[(13, 10, 12), int64] */;
  %477 = @func_370() /* ty=Tensor[(13, 10, 12), uint32] */;
  %478 = cast(%477, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %479 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%476, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %482 = cast(%476, dtype="float32") /* ty=Tensor[(13, 10, 12), float32] */;
  %483 = sqrt(%482) /* ty=Tensor[(13, 10, 12), float32] */;
  %484 = cast(%476, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%483, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %488 = divide(%480, %481) /* ty=Tensor[(13, 10, 12), float64] */;
  %489 = power(%486, %487) /* ty=Tensor[(13, 10, 12), float64] */;
  (%488, %489)
}

def @func_2678() -> (Tensor[(13, 10, 12), float64],) {
  %490 = @func_1486() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %491 = %490.0;
  (%491,)
}

def @func_2283() -> Tensor[(13, 10, 12), uint64] {
  %492 = @func_1797() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %492.0
}

def @func_901() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) {
  %493 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %494 = %493.1;
  %495 = cast(%494, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %496 = atan(%495) /* ty=Tensor[(13, 10, 12), float64] */;
  %497 = cast(%496, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %498 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%494, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %501 = cast(%496, dtype="float32") /* ty=Tensor[(13, 10, 12), float32] */;
  %502 = @func_656() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %503 = %502.1;
  %504 = cast(%503, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %505 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%496, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %508 = logical_or(%499, %500) /* ty=Tensor[(13, 10, 12), bool] */;
  %509 = asinh(%501) /* ty=Tensor[(13, 10, 12), float32] */;
  %510 = greater_equal(%506, %507) /* ty=Tensor[(13, 10, 12), bool] */;
  (%508, %509, %510)
}

def @func_588(%var_558: Tensor[(13, 10, 12), uint64], %var_580: Tensor[(13, 10, 12), uint64]) -> (Tensor[(13, 10, 12), uint32], Tensor[(2496), int32], Tensor[(13, 10, 12), bool], Tensor[(13, 16, 12), int64]) {
  %511 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %512 = %511.1;
  %513 = cast(%var_558, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%512, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %517 = @func_511() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */;
  %518 = cast(%var_580, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %519 = shape_of(%var_558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%var_558, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %522 = %517.2;
  %523 = cast(%522, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %524 = reshape(%523, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), int32] */;
  %525 = @func_63(%524) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) */;
  %526 = left_shift(%515, %516) /* ty=Tensor[(13, 10, 12), uint32] */;
  %527 = less(%520, %521) /* ty=Tensor[(13, 10, 12), bool] */;
  %528 = %525.0;
  (%526, %522, %527, %528)
}

def @func_8244() -> Tensor[(13, 10, 12), uint64] {
  @func_1061() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_6519() -> (Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64]) {
  %529 = @func_3547() /* ty=(Tensor[(13, 10, 12), int64],) */;
  %530 = %529.0;
  %531 = @func_2893() /* ty=Tensor[(13, 10, 12), float64] */;
  (%530, %531)
}

def @func_5557(%var_5546: Tensor[(13, 10, 12), uint32]) -> Tensor[(13, 10, 12), float32] {
  %532 = @func_1412() /* ty=(Tensor[(13, 10, 12), uint32],) */;
  %533 = %532.0;
  %534 = cast(%var_5546, dtype="float32") /* ty=Tensor[(13, 10, 12), float32] */;
  %535 = shape_of(%533, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%533, dtype="float32") /* ty=Tensor[(13, 10, 12), float32] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%536, %537) /* ty=Tensor[(13, 10, 12), float32] */
}

def @func_6941(%var_6929: Tensor[(8, 4, 11), uint16]) -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(252), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(?, 2496), bool], Tensor[(13, 10, 12), float32], Tensor[(3, 6, 14), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), uint64], Tensor[(8, 4, 11), float64], Tensor[(352, 1), float64]) {
  %538 = @func_2714() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64]) */;
  %539 = @func_1797() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %540 = @func_3464() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float32]) */;
  %541 = @func_2866() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %542 = %541.1;
  %543 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 2496), int32] */, dtype="bool") /* ty=Tensor[(1, 2496), bool] */;
  %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%542, dtype="bool") /* ty=Tensor[(13, 16, 12), bool] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %547 = less_equal(%545, %546) /* ty=Tensor[(13, 16, 12), bool] */;
  %548 = cast(%547, dtype="bool") /* ty=Tensor[(13, 16, 12), bool] */;
  %549 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(1, 2496), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %550 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 2496), int32] */, dtype="bool") /* ty=Tensor[(1, 2496), bool] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %552 = @func_5931() /* ty=Tensor[(13, 10, 12), float64] */;
  %553 = cast(%552, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %554 = reshape(%553, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint32] */;
  %555 = @func_2796() /* ty=(Tensor[(3, 6, 14), float64], Tensor[(3, 6, 14), float64]) */;
  %556 = @func_3144() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %557 = cast(%542, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
  %558 = @func_4756() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16]) */;
  %559 = %558.1;
  %560 = cast(%559, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %561 = reshape(%560, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint32] */;
  %562 = @func_2283() /* ty=Tensor[(13, 10, 12), uint64] */;
  %563 = cast(%562, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %564 = @func_5931() /* ty=Tensor[(13, 10, 12), float64] */;
  %565 = cast(%564, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %566 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 2496), int32] */, dtype="int32") /* ty=Tensor[(1, 2496), int32] */;
  %567 = reshape(%563, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint64] */;
  %568 = reshape(%565, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint64] */;
  %569 = reshape(%566, newshape=[2, 1248]) /* ty=Tensor[(2, 1248), int32] */;
  %570 = @func_3390(%567, %568, %569) /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint16], Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(2, 1248), int32], Tensor[(8, 4, 11), uint16], Tensor[(352), float32], Tensor[(13, 10, 12), float64]) */;
  %571 = %570.5;
  %572 = cast(%var_6929, dtype="float64") /* ty=Tensor[(8, 4, 11), float64] */;
  %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%571, dtype="float64") /* ty=Tensor[(8, 4, 11), float64] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %576 = cast(%571, dtype="float32") /* ty=Tensor[(8, 4, 11), float32] */;
  %577 = reshape(%576, newshape=[352, 1]) /* ty=Tensor[(352, 1), float32] */;
  %578 = @func_1993(%577) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(2496), int32], Tensor[(352, 1), float64]) */;
  %579 = %538.2;
  %580 = %539.0;
  %581 = %540.3;
  %582 = greater_equal(%550, %551) /* ty=Tensor[(?, 2496), bool] */;
  %583 = @func_5557(%554) /* ty=Tensor[(13, 10, 12), float32] */;
  %584 = %555.0;
  %585 = @func_6475() /* ty=Tensor[(13, 10, 12), uint64] */;
  %586 = %556.0;
  %587 = rsqrt(%557) /* ty=Tensor[(13, 16, 12), float64] */;
  %588 = @func_5557(%561) /* ty=Tensor[(13, 10, 12), float32] */;
  %589 = @func_2349() /* ty=Tensor[(13, 10, 12), uint64] */;
  %590 = floor_divide(%574, %575) /* ty=Tensor[(8, 4, 11), float64] */;
  %591 = %578.5;
  (%564, %562, %579, %552, %580, %581, %582, %583, %584, %585, %586, %587, %559, %588, %589, %590, %591)
}

def @func_1993(%var_1967: Tensor[(352, 1), float32]) -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(2496), int32], Tensor[(352, 1), float64]) {
  %592 = @func_1027() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
  %593 = @func_656() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %594 = cast(%var_1967, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
  %595 = cast(%var_1967, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
  %596 = cast(meta[relay.Constant][17] /* ty=Tensor[(2496), int32] */, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %597 = reshape(%594, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), float32] */;
  %598 = reshape(%595, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), float32] */;
  %599 = reshape(%596, newshape=[2496]) /* ty=Tensor[(2496), int32] */;
  %600 = @func_171(%597, %598, %599) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(8, 4, 11), uint16], Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), int64]) */;
  %601 = @func_511() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */;
  %602 = cast(%var_1967, dtype="float64") /* ty=Tensor[(352, 1), float64] */;
  %603 = %592.0;
  %604 = %593.1;
  %605 = %600.0;
  %606 = %601.2;
  %607 = asinh(%602) /* ty=Tensor[(352, 1), float64] */;
  (%603, %604, %605, meta[relay.Constant][17] /* ty=Tensor[(2496), int32] */, %606, %607)
}

def @func_1027() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) {
  %608 = @func_731() /* ty=Tensor[(13, 10, 12), int64] */;
  %609 = cast(%608, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %610 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %611 = cosh(%609) /* ty=Tensor[(13, 10, 12), float64] */;
  %612 = %610.0;
  %613 = @func_370() /* ty=Tensor[(13, 10, 12), uint32] */;
  (%611, %612, %613)
}

def @func_6765() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64]) {
  %614 = @func_1355() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64]) */;
  %615 = @func_3144() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %616 = %614.0;
  %617 = %615.1;
  (%616, %617)
}

def @func_8136(%var_8115: bool) -> (Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), uint32], bool) {
  %618 = cast(%var_8115, dtype="bool") /* ty=bool */;
  %619 = reshape(%618, newshape=[]) /* ty=bool */;
  %620 = @func_3283(%619) /* ty=(Tensor[(4, 7, 3), bool], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), uint32]) */;
  %621 = @func_7112() /* ty=Tensor[(13, 10, 12), uint64] */;
  %622 = %620.2;
  (%621, %622, %var_8115)
}

def @func_8353() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) {
  %623 = @func_3144() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %624 = %623.1;
  %625 = @func_370() /* ty=Tensor[(13, 10, 12), uint32] */;
  (%624, %625)
}

def @func_1091(%var_1084: int64) -> (Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64], Tensor[(11, 4, 8), bool], int64, Tensor[(176, 2), int64]) {
  %626 = @func_1054() /* ty=(Tensor[(13, 10, 12), int64],) */;
  %627 = @func_901() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) */;
  %628 = %627.1;
  %629 = cast(%628, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %630 = cast(%var_1084, dtype="int64") /* ty=int64 */;
  %631 = cast(meta[relay.Constant][18] /* ty=Tensor[(176, 2), int64] */, dtype="int64") /* ty=Tensor[(176, 2), int64] */;
  %632 = reshape(%630, newshape=[]) /* ty=int64 */;
  %633 = reshape(%631, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), int64] */;
  %634 = @func_417(%632, %633) /* ty=(Tensor[(11, 4, 8), bool],) */;
  %635 = @func_370() /* ty=Tensor[(13, 10, 12), uint32] */;
  %636 = %626.0;
  %637 = acos(%629) /* ty=Tensor[(13, 10, 12), float64] */;
  %638 = %634.0;
  (%635, %636, %637, %638, %var_1084, meta[relay.Constant][18] /* ty=Tensor[(176, 2), int64] */)
}

def @func_3390(%var_3335: Tensor[(13, 10, 12), uint64], %var_3350: Tensor[(13, 10, 12), uint64], %var_3370: Tensor[(2, 1248), int32]) -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint16], Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(2, 1248), int32], Tensor[(8, 4, 11), uint16], Tensor[(352), float32], Tensor[(13, 10, 12), float64]) {
  %639 = @func_2349() /* ty=Tensor[(13, 10, 12), uint64] */;
  %640 = cast(%var_3335, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %641 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%639, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %644 = cast(%var_3350, dtype="uint16") /* ty=Tensor[(13, 10, 12), uint16] */;
  %645 = shape_of(%var_3335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%var_3335, dtype="uint16") /* ty=Tensor[(13, 10, 12), uint16] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %648 = @func_1486() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %649 = cast(%var_3370, dtype="int32") /* ty=Tensor[(2, 1248), int32] */;
  %650 = reshape(%649, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), int32] */;
  %651 = @func_63(%650) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) */;
  %652 = cast(meta[relay.Constant][19] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %653 = reshape(%652, newshape=[1, 352]) /* ty=Tensor[(1, 352), float32] */;
  %654 = @func_2181(%653) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool], Tensor[(8, 4, 11), uint16], Tensor[(1, 352), float32], Tensor[(2496), int32]) */;
  %655 = cast(%var_3350, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %656 = shape_of(%var_3335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%var_3335, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %659 = maximum(%657, %658) /* ty=Tensor[(13, 10, 12), uint64] */;
  %660 = cast(%659, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %661 = shape_of(%var_3335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%var_3335, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %664 = equal(%642, %643) /* ty=Tensor[(13, 10, 12), bool] */;
  %665 = minimum(%646, %647) /* ty=Tensor[(13, 10, 12), uint16] */;
  %666 = %648.0;
  %667 = %651.0;
  %668 = %654.2;
  %669 = mod(%662, %663) /* ty=Tensor[(13, 10, 12), float64] */;
  (%664, %665, %666, %667, %var_3370, %668, meta[relay.Constant][19] /* ty=Tensor[(352), float32] */, %669)
}

def @func_5670(%var_5636: bool) -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), float64], Tensor[(352), float32]) {
  %670 = @func_3684() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(352), float32]) */;
  %671 = @func_511() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */;
  %672 = cast(%var_5636, dtype="bool") /* ty=bool */;
  %673 = reshape(%672, newshape=[]) /* ty=bool */;
  %674 = @func_3283(%673) /* ty=(Tensor[(4, 7, 3), bool], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), uint32]) */;
  %675 = %674.2;
  %676 = cast(%675, dtype="float64") /* ty=Tensor[(4, 7, 3), float64] */;
  %677 = cast(%var_5636, dtype="float64") /* ty=float64 */;
  %678 = @func_3684() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(352), float32]) */;
  %679 = %670.0;
  %680 = %671.0;
  %681 = power(%676, %677) /* ty=Tensor[(4, 7, 3), float64] */;
  %682 = %678.2;
  (%679, %680, %681, %682)
}

def @func_8587() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
  %683 = @func_8268() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %684 = @func_6197() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64], Tensor[(13, 10, 12), uint64], bool) */;
  %685 = @func_2283() /* ty=Tensor[(13, 10, 12), uint64] */;
  %686 = %683.0;
  %687 = %684.3;
  (%685, %686, %687)
}

def @func_5597() -> Tensor[(13, 10, 12), bool] {
  %688 = @func_4051() /* ty=(Tensor[(13, 10, 12), bool],) */;
  %688.0
}

def @func_8946() -> (Tensor[(13, 10, 12), uint64],) {
  %689 = @func_1385() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %690 = %689.0;
  (%690,)
}

def @func_3539() -> (Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64]) {
  %691 = @func_1027() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
  %692 = @func_538() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32], Tensor[(13, 10, 12), uint32]) */;
  %693 = @func_2439() /* ty=(Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64]) */;
  %694 = %691.2;
  %695 = %692.3;
  %696 = %693.0;
  (%694, %695, %696)
}

def @func_5023() -> Tensor[(13, 10, 12), uint64] {
  %697 = @func_3602() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %697.0
}

def @func_10230() -> Tensor[(13, 10, 12), uint64] {
  %698 = @func_3464() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float32]) */;
  %698.2
}

def @func_63(%var_9: Tensor[(13, 16, 12), int32]) -> (Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) {
  %699 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 16, 12), int32] */, dtype="float32") /* ty=Tensor[(13, 16, 12), float32] */;
  %700 = erf(%699) /* ty=Tensor[(13, 16, 12), float32] */;
  %701 = cast(%var_9, dtype="int32") /* ty=Tensor[(13, 16, 12), int32] */;
  %702 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(13, 16, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %703 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 16, 12), int32] */, dtype="int32") /* ty=Tensor[(13, 16, 12), int32] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %705 = multiply(%703, %704) /* ty=Tensor[(13, 16, 12), int32] */;
  %706 = cast(%705, dtype="int32") /* ty=Tensor[(13, 16, 12), int32] */;
  %707 = shape_of(%700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%700, dtype="int32") /* ty=Tensor[(13, 16, 12), int32] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %710 = right_shift(%708, %709) /* ty=Tensor[(13, 16, 12), int32] */;
  %711 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 16, 12), int32] */, dtype="int64") /* ty=Tensor[(13, 16, 12), int64] */;
  %712 = shape_of(%710, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(%710, dtype="int64") /* ty=Tensor[(13, 16, 12), int64] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %715 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 16, 12), int32] */, dtype="uint16") /* ty=Tensor[(13, 16, 12), uint16] */;
  %716 = shape_of(%700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%700, dtype="uint16") /* ty=Tensor[(13, 16, 12), uint16] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %719 = add(%713, %714) /* ty=Tensor[(13, 16, 12), int64] */;
  %720 = bitwise_xor(%717, %718) /* ty=Tensor[(13, 16, 12), uint16] */;
  (%719, %720)
}

def @func_3944() -> (Tensor[(13, 10, 12), float64],) {
  %721 = @func_1486() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %722 = %721.0;
  (%722,)
}

def @func_8918() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64]) {
  %723 = @func_1385() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %724 = @func_5597() /* ty=Tensor[(13, 10, 12), bool] */;
  %725 = @func_1900() /* ty=Tensor[(13, 10, 12), bool] */;
  %726 = %723.0;
  (%724, %725, %726)
}

def @func_417(%var_410: int64, %var_411: Tensor[(11, 4, 8), int64]) -> (Tensor[(11, 4, 8), bool],) {
  %727 = cast(%var_410, dtype="bool") /* ty=bool */;
  %728 = cast(%var_411, dtype="bool") /* ty=Tensor[(11, 4, 8), bool] */;
  %729 = equal(%727, %728) /* ty=Tensor[(11, 4, 8), bool] */;
  (%729,)
}

def @func_3474() -> Tensor[(13, 10, 12), float64] {
  %730 = @func_1486() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %730.0
}

def @func_7717() -> Tensor[(13, 10, 12), float64] {
  %731 = @func_2866() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %731.3
}

def @func_3464() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float32]) {
  %732 = @func_752() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %733 = @func_2866() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %734 = @func_1385() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %735 = @func_2866() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %736 = @func_901() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) */;
  %737 = %732.0;
  %738 = %733.2;
  %739 = %734.0;
  %740 = %735.3;
  %741 = %736.1;
  (%737, %738, %739, %740, %741)
}

def @func_9049() -> (Tensor[(13, 10, 12), uint64],) {
  %742 = @func_2349() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%742,)
}

def @func_5579() -> (Tensor[(13, 10, 12), float64],) {
  %743 = @func_2893() /* ty=Tensor[(13, 10, 12), float64] */;
  (%743,)
}

def @func_4990(%var_4975: Tensor[(60), float64]) -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool], Tensor[(1, 352), float32], Tensor[(352), float32], Tensor[(11, 4, 8), bool], int64, Tensor[(9, 8, 9), bool], Tensor[(648), int16], Tensor[(60), float64], Tensor[(900), float64]) {
  %744 = @func_4248() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(2496), int32]) */;
  %745 = @func_4051() /* ty=(Tensor[(13, 10, 12), bool],) */;
  %746 = cast(meta[relay.Constant][21] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %747 = reshape(%746, newshape=[1, 352]) /* ty=Tensor[(1, 352), float32] */;
  %748 = @func_2181(%747) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool], Tensor[(8, 4, 11), uint16], Tensor[(1, 352), float32], Tensor[(2496), int32]) */;
  %749 = cast(-5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %750 = reshape(%749, newshape=[]) /* ty=int64 */;
  %751 = @func_1091(%750) /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64], Tensor[(11, 4, 8), bool], int64, Tensor[(176, 2), int64]) */;
  %752 = cast(meta[relay.Constant][22] /* ty=Tensor[(648), int16] */, dtype="int16") /* ty=Tensor[(648), int16] */;
  %753 = cast(meta[relay.Constant][22] /* ty=Tensor[(648), int16] */, dtype="int16") /* ty=Tensor[(648), int16] */;
  %754 = cast(-5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %755 = cast(%var_4975, dtype="float64") /* ty=Tensor[(60), float64] */;
  %756 = cast(meta[relay.Constant][23] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
  %757 = reshape(%752, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), int16] */;
  %758 = reshape(%753, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), int16] */;
  %759 = reshape(%754, newshape=[]) /* ty=int64 */;
  %760 = reshape(%755, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %761 = reshape(%756, newshape=[900]) /* ty=Tensor[(900), float64] */;
  %762 = @func_4663(%757, %758, %759, %760, %761) /* ty=(Tensor[(9, 8, 9), bool], Tensor[(9, 8, 9), uint32], Tensor[(13, 10, 12), uint64], int64, Tensor[(10, 15, 6), uint8], Tensor[(60), float64], Tensor[(900), float64]) */;
  %763 = @func_3474() /* ty=Tensor[(13, 10, 12), float64] */;
  %764 = %744.0;
  %765 = %745.0;
  %766 = %748.3;
  %767 = %751.3;
  %768 = %762.0;
  (%763, %764, %765, %766, meta[relay.Constant][21] /* ty=Tensor[(352), float32] */, %767, -5 /* ty=int64 */, %768, meta[relay.Constant][22] /* ty=Tensor[(648), int16] */, %var_4975, meta[relay.Constant][23] /* ty=Tensor[(900), float64] */)
}

def @func_8736() -> Tensor[(13, 10, 12), uint64] {
  @func_2349() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_9488(%var_9470: Tensor[(12, 12, 9), float32]) -> (Tensor[(12, 12, 9), float32], Tensor[(13, 10, 12), float64]) {
  %769 = cast(%var_9470, dtype="float32") /* ty=Tensor[(12, 12, 9), float32] */;
  %770 = sin(%769) /* ty=Tensor[(12, 12, 9), float32] */;
  %771 = @func_2893() /* ty=Tensor[(13, 10, 12), float64] */;
  (%770, %771)
}

def @func_11090(%var_11053: Tensor[(3, 216), int16], %var_11054: int64, %var_11055: Tensor[(60), float64]) -> (Tensor[(13, 10, 12), bool], int64, Tensor[(3, 216), int16], int64, Tensor[(60), float64], Tensor[(900), float64]) {
  %772 = cast(%var_11053, dtype="int16") /* ty=Tensor[(3, 216), int16] */;
  %773 = cast(%var_11053, dtype="int16") /* ty=Tensor[(3, 216), int16] */;
  %774 = cast(%var_11054, dtype="int64") /* ty=int64 */;
  %775 = cast(%var_11055, dtype="float64") /* ty=Tensor[(60), float64] */;
  %776 = cast(meta[relay.Constant][24] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
  %777 = reshape(%772, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), int16] */;
  %778 = reshape(%773, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), int16] */;
  %779 = reshape(%774, newshape=[]) /* ty=int64 */;
  %780 = reshape(%775, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %781 = reshape(%776, newshape=[900]) /* ty=Tensor[(900), float64] */;
  %782 = @func_4663(%777, %778, %779, %780, %781) /* ty=(Tensor[(9, 8, 9), bool], Tensor[(9, 8, 9), uint32], Tensor[(13, 10, 12), uint64], int64, Tensor[(10, 15, 6), uint8], Tensor[(60), float64], Tensor[(900), float64]) */;
  %783 = @func_1900() /* ty=Tensor[(13, 10, 12), bool] */;
  %784 = %782.3;
  (%783, %784, %var_11053, %var_11054, %var_11055, meta[relay.Constant][24] /* ty=Tensor[(900), float64] */)
}

def @func_4248() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(2496), int32]) {
  %785 = @func_656() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %786 = cast(meta[relay.Constant][25] /* ty=Tensor[(2496), int32] */, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %787 = reshape(%786, newshape=[2496]) /* ty=Tensor[(2496), int32] */;
  %788 = @func_4011(%787) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32]) */;
  %789 = %785.1;
  %790 = %788.0;
  (%789, %790, meta[relay.Constant][25] /* ty=Tensor[(2496), int32] */)
}

def @func_6735(%var_6686: bool) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], bool, Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64]) {
  %791 = @func_6197() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64], Tensor[(13, 10, 12), uint64], bool) */;
  %792 = cast(%var_6686, dtype="bool") /* ty=bool */;
  %793 = reshape(%792, newshape=[]) /* ty=bool */;
  %794 = @func_3283(%793) /* ty=(Tensor[(4, 7, 3), bool], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), uint32]) */;
  %795 = @func_3547() /* ty=(Tensor[(13, 10, 12), int64],) */;
  %796 = @func_2678() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %797 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %798 = @func_979() /* ty=Tensor[(13, 10, 12), uint64] */;
  %799 = %791.3;
  %800 = %794.1;
  %801 = %795.0;
  %802 = %796.0;
  (%797, %798, %799, %800, %var_6686, %801, %802)
}

def @func_6071() -> Tensor[(13, 10, 12), int64] {
  @func_731() /* ty=Tensor[(13, 10, 12), int64] */
}

def @func_9741() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
  %803 = @func_511() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */;
  %804 = @func_3602() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %805 = @func_656() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %806 = %803.0;
  %807 = %804.1;
  %808 = @func_5931() /* ty=Tensor[(13, 10, 12), float64] */;
  %809 = %805.1;
  (%806, %807, %808, %809)
}

def @func_10473() -> Tensor[(2496), float32] {
  %810 = @func_538() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32], Tensor[(13, 10, 12), uint32]) */;
  %811 = %810.2;
  %812 = cast(%811, dtype="float32") /* ty=Tensor[(2496), float32] */;
  erf(%812) /* ty=Tensor[(2496), float32] */
}

def @func_5473() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
  %813 = @func_2256() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %814 = @func_1385() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %815 = %813.0;
  %816 = %814.0;
  (%815, %816)
}

def @func_10678() -> Tensor[(13, 10, 12), float64] {
  %817 = @func_3886() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) */;
  %817.0
}

def @func_4124() -> Tensor[(13, 10, 12), uint64] {
  @func_319() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_7822(%var_7781: Tensor[(15, 2, 10), float64], %var_7782: Tensor[(15, 2, 10), float64], %var_7807: Tensor[(224), int16], %var_7810: Tensor[(15, 2, 10), float64]) -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64], Tensor[(16, 2, 7), int16], Tensor[(224), int16], Tensor[(15, 2, 10), int16], Tensor[(15, 2, 10), float64]) {
  %818 = @func_2866() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %819 = cast(%var_7807, dtype="int16") /* ty=Tensor[(224), int16] */;
  %820 = reshape(%819, newshape=[16, 2, 7]) /* ty=Tensor[(16, 2, 7), int16] */;
  %821 = @func_1829(%820) /* ty=(Tensor[(16, 2, 7), int16],) */;
  %822 = cast(%var_7782, dtype="float64") /* ty=Tensor[(15, 2, 10), float64] */;
  %823 = shape_of(%var_7781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%var_7781, dtype="float64") /* ty=Tensor[(15, 2, 10), float64] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %826 = floor_divide(%824, %825) /* ty=Tensor[(15, 2, 10), float64] */;
  %827 = cast(%var_7810, dtype="int16") /* ty=Tensor[(15, 2, 10), int16] */;
  %828 = shape_of(%826, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(%826, dtype="int16") /* ty=Tensor[(15, 2, 10), int16] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %831 = cast(%826, dtype="float64") /* ty=Tensor[(15, 2, 10), float64] */;
  %832 = @func_2013() /* ty=Tensor[(13, 10, 12), bool] */;
  %833 = %818.2;
  %834 = %821.0;
  %835 = maximum(%829, %830) /* ty=Tensor[(15, 2, 10), int16] */;
  %836 = exp(%831) /* ty=Tensor[(15, 2, 10), float64] */;
  (%832, %833, %834, %var_7807, %835, %836)
}

def @func_6111(%var_6104: int16, %var_6105: Tensor[(6, 7, 2), int16]) -> (Tensor[(6, 7, 2), int16],) {
  %837 = cast(%var_6104, dtype="int16") /* ty=int16 */;
  %838 = cast(%var_6105, dtype="int16") /* ty=Tensor[(6, 7, 2), int16] */;
  %839 = left_shift(%837, %838) /* ty=Tensor[(6, 7, 2), int16] */;
  (%839,)
}

def @func_11239() -> (Tensor[(13, 10, 12), int64],) {
  %840 = @func_9450() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint32]) */;
  %841 = %840.1;
  (%841,)
}

def @func_3144() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %842 = @func_1797() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %843 = %842.0;
  %844 = @func_979() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%843, %844)
}

def @func_10370() -> (Tensor[(13, 10, 12), float32], Tensor[(3, 6, 14), float64]) {
  %845 = @func_5767() /* ty=(Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), uint32]) */;
  %846 = @func_8461() /* ty=Tensor[(3, 6, 14), float64] */;
  %847 = cast(%846, dtype="float32") /* ty=Tensor[(3, 6, 14), float32] */;
  %848 = acosh(%847) /* ty=Tensor[(3, 6, 14), float32] */;
  %849 = cast(%848, dtype="float64") /* ty=Tensor[(3, 6, 14), float64] */;
  %850 = %845.0;
  %851 = sin(%849) /* ty=Tensor[(3, 6, 14), float64] */;
  (%850, %851)
}

def @func_9613() -> (Tensor[(13, 10, 12), uint64],) {
  %852 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %853 = %852.1;
  (%853,)
}

def @func_10905() -> (Tensor[(13, 10, 12), uint64],) {
  %854 = @func_8367() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %855 = %854.0;
  (%855,)
}

def @func_9244() -> (Tensor[(13, 10, 12), uint64],) {
  %856 = @func_6475() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%856,)
}

def @func_961(%var_918: int64, %var_951: Tensor[(13, 10, 12), float64]) -> (int64, Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint32], Tensor[(8, 44), int16]) {
  %857 = @func_901() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) */;
  %858 = @func_752() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %859 = %858.1;
  %860 = cast(%var_951, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(3), int32] */;
  %862 = cast(%859, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %864 = cast(%var_918, dtype="int64") /* ty=int64 */;
  %865 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 44), int64] */, dtype="int64") /* ty=Tensor[(8, 44), int64] */;
  %866 = reshape(%864, newshape=[]) /* ty=int64 */;
  %867 = reshape(%865, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), int64] */;
  %868 = @func_417(%866, %867) /* ty=(Tensor[(11, 4, 8), bool],) */;
  %869 = %868.0;
  %870 = cast(%869, dtype="int16") /* ty=Tensor[(11, 4, 8), int16] */;
  %871 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(8, 44), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %872 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 44), int64] */, dtype="int16") /* ty=Tensor[(8, 44), int16] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %874 = %857.2;
  %875 = add(%862, %863) /* ty=Tensor[(13, 10, 12), uint32] */;
  %876 = right_shift(%872, %873) /* ty=Tensor[(8, 44), int16] */;
  (%var_918, %874, %875, %876)
}

def @func_9346() -> (Tensor[(13, 11, 9), int32],) {
  %877 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 11, 9), float32] */, dtype="float32") /* ty=Tensor[(13, 11, 9), float32] */;
  %878 = tan(%877) /* ty=Tensor[(13, 11, 9), float32] */;
  %879 = cast(%878, dtype="float64") /* ty=Tensor[(13, 11, 9), float64] */;
  %880 = cos(%879) /* ty=Tensor[(13, 11, 9), float64] */;
  %881 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 11, 9), float32] */, dtype="bool") /* ty=Tensor[(13, 11, 9), bool] */;
  %882 = shape_of(%880, dtype="int32") /* ty=Tensor[(3), int32] */;
  %883 = cast(%880, dtype="bool") /* ty=Tensor[(13, 11, 9), bool] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %885 = not_equal(%883, %884) /* ty=Tensor[(13, 11, 9), bool] */;
  %886 = cast(%885, dtype="float32") /* ty=Tensor[(13, 11, 9), float32] */;
  %887 = sinh(%886) /* ty=Tensor[(13, 11, 9), float32] */;
  %888 = cast(%880, dtype="int16") /* ty=Tensor[(13, 11, 9), int16] */;
  %889 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(13, 11, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %890 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 11, 9), float32] */, dtype="int16") /* ty=Tensor[(13, 11, 9), int16] */;
  %891 = dyn.reshape(%888, %889, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %892 = left_shift(%890, %891) /* ty=Tensor[(13, 11, 9), int16] */;
  %893 = cast(%892, dtype="int32") /* ty=Tensor[(13, 11, 9), int32] */;
  %894 = shape_of(%887, dtype="int32") /* ty=Tensor[(3), int32] */;
  %895 = cast(%887, dtype="int32") /* ty=Tensor[(13, 11, 9), int32] */;
  %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %897 = bitwise_and(%895, %896) /* ty=Tensor[(13, 11, 9), int32] */;
  (%897,)
}

def @func_4716() -> (Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %898 = @func_1054() /* ty=(Tensor[(13, 10, 12), int64],) */;
  %899 = @func_3144() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %900 = @func_3144() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %901 = %898.0;
  %902 = %899.1;
  %903 = %900.1;
  %904 = @func_1682() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%901, %902, %903, %904)
}

def @func_3684() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(352), float32]) {
  %905 = cast(meta[relay.Constant][28] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %906 = reshape(%905, newshape=[352, 1]) /* ty=Tensor[(352, 1), float32] */;
  %907 = @func_1993(%906) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(2496), int32], Tensor[(352, 1), float64]) */;
  %908 = @func_3474() /* ty=Tensor[(13, 10, 12), float64] */;
  %909 = %907.2;
  (%908, %909, meta[relay.Constant][28] /* ty=Tensor[(352), float32] */)
}

def @func_8647() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %910 = @func_4716() /* ty=(Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %911 = @func_1385() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %912 = %910.3;
  %913 = %911.0;
  (%912, %913)
}

def @func_5948() -> (Tensor[(13, 10, 12), uint64],) {
  %914 = @func_1682() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%914,)
}

def @func_5988(%var_5960: Tensor[(11, 8, 3), uint8]) -> (Tensor[(11, 8, 3), float64], Tensor[(13, 10, 12), uint32]) {
  %915 = cast(%var_5960, dtype="bool") /* ty=Tensor[(11, 8, 3), bool] */;
  %916 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(11, 8, 3), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %917 = cast(meta[relay.Constant][29] /* ty=Tensor[(11, 8, 3), uint8] */, dtype="bool") /* ty=Tensor[(11, 8, 3), bool] */;
  %918 = dyn.reshape(%915, %916, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %919 = greater_equal(%917, %918) /* ty=Tensor[(11, 8, 3), bool] */;
  %920 = cast(%919, dtype="float64") /* ty=Tensor[(11, 8, 3), float64] */;
  %921 = @func_3539() /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64]) */;
  %922 = log10(%920) /* ty=Tensor[(11, 8, 3), float64] */;
  %923 = %921.1;
  (%922, %923)
}

def @func_7372() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint32]) {
  %924 = @func_5473() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) */;
  %925 = %924.0;
  %926 = @func_3896() /* ty=Tensor[(13, 10, 12), uint32] */;
  (%925, %926)
}

def @func_10184(%var_10163: Tensor[(5, 1), uint64]) -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), bool], Tensor[(2496), int32], Tensor[(2496), int32], Tensor[(5, 1), uint64], Tensor[(720), uint64]) {
  %927 = @func_2013() /* ty=Tensor[(13, 10, 12), bool] */;
  %928 = cast(%927, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %929 = cast(%927, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %930 = cast(meta[relay.Constant][30] /* ty=Tensor[(2496), int32] */, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %931 = reshape(%928, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint64] */;
  %932 = reshape(%929, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint64] */;
  %933 = reshape(%930, newshape=[2, 1248]) /* ty=Tensor[(2, 1248), int32] */;
  %934 = @func_3390(%931, %932, %933) /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint16], Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(2, 1248), int32], Tensor[(8, 4, 11), uint16], Tensor[(352), float32], Tensor[(13, 10, 12), float64]) */;
  %935 = cast(%var_10163, dtype="uint64") /* ty=Tensor[(5, 1), uint64] */;
  %936 = cast(meta[relay.Constant][31] /* ty=Tensor[(720), uint64] */, dtype="uint64") /* ty=Tensor[(720), uint64] */;
  %937 = cast(meta[relay.Constant][30] /* ty=Tensor[(2496), int32] */, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %938 = reshape(%935, newshape=[1, 1, 5]) /* ty=Tensor[(1, 1, 5), uint64] */;
  %939 = reshape(%936, newshape=[9, 16, 5]) /* ty=Tensor[(9, 16, 5), uint64] */;
  %940 = reshape(%937, newshape=[2496]) /* ty=Tensor[(2496), int32] */;
  %941 = @func_5136(%938, %939, %940) /* ty=(Tensor[(9, 16, 5), uint64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(13, 10, 12), float64]) */;
  %942 = %934.0;
  %943 = %941.2;
  (%927, %942, meta[relay.Constant][30] /* ty=Tensor[(2496), int32] */, %943, %var_10163, meta[relay.Constant][31] /* ty=Tensor[(720), uint64] */)
}

def @func_1682() -> Tensor[(13, 10, 12), uint64] {
  %944 = @func_511() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */;
  %944.0
}

def @func_979() -> Tensor[(13, 10, 12), uint64] {
  %945 = @func_511() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */;
  %945.0
}

def @func_10317() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
  %946 = @func_1486() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %947 = %946.0;
  %948 = @func_979() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%947, %948)
}

def @func_2893() -> Tensor[(13, 10, 12), float64] {
  @func_1584() /* ty=Tensor[(13, 10, 12), float64] */
}

def @func_2952() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %949 = @func_1797() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %950 = %949.0;
  %951 = @func_1682() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%950, %951)
}

def @func_4011(%var_4006: Tensor[(2496), int32]) -> (Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32]) {
  %952 = @func_2714() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64]) */;
  %953 = cast(%var_4006, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %954 = reshape(%953, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), int32] */;
  %955 = @func_63(%954) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) */;
  %956 = %952.0;
  %957 = %955.0;
  (%956, %957, %var_4006)
}

def @func_6637() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) {
  %958 = @func_5948() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %959 = @func_1412() /* ty=(Tensor[(13, 10, 12), uint32],) */;
  %960 = %958.0;
  %961 = %959.0;
  (%960, %961)
}

def @func_2991() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool]) {
  %962 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %963 = @func_1900() /* ty=Tensor[(13, 10, 12), bool] */;
  (%962, %963)
}

def @func_4446(%var_4365: int64) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32], int64, Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) {
  %964 = cast(%var_4365, dtype="int64") /* ty=int64 */;
  %965 = reshape(%964, newshape=[]) /* ty=int64 */;
  %966 = @func_1091(%965) /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64], Tensor[(11, 4, 8), bool], int64, Tensor[(176, 2), int64]) */;
  %967 = cast(%var_4365, dtype="int64") /* ty=int64 */;
  %968 = reshape(%967, newshape=[]) /* ty=int64 */;
  %969 = @func_1091(%968) /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64], Tensor[(11, 4, 8), bool], int64, Tensor[(176, 2), int64]) */;
  %970 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %971 = cast(%970, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %972 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %973 = %966.0;
  %974 = %969.2;
  %975 = rsqrt(%971) /* ty=Tensor[(13, 10, 12), float64] */;
  (%972, %973, %var_4365, %974, %975)
}

def @func_1355() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64]) {
  %976 = @func_901() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) */;
  %977 = @func_752() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %978 = %977.0;
  %979 = cast(%978, dtype="float32") /* ty=Tensor[(13, 10, 12), float32] */;
  %980 = exp(%979) /* ty=Tensor[(13, 10, 12), float32] */;
  %981 = cast(%980, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %982 = %976.0;
  %983 = log(%981) /* ty=Tensor[(13, 10, 12), float64] */;
  (%982, %983)
}

def @func_7947() -> Tensor[(13, 10, 12), uint64] {
  %984 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %984.0
}

def @func_2439() -> (Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64]) {
  %985 = @func_1054() /* ty=(Tensor[(13, 10, 12), int64],) */;
  %986 = @func_2349() /* ty=Tensor[(13, 10, 12), uint64] */;
  %987 = cast(%986, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %988 = %985.0;
  %989 = cos(%987) /* ty=Tensor[(13, 10, 12), float64] */;
  (%988, %989)
}

def @func_10241() -> (Tensor[(13, 10, 12), uint64],) {
  %990 = @func_10074() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%990,)
}

def @func_4663(%var_4635: Tensor[(9, 8, 9), int16], %var_4636: Tensor[(9, 8, 9), int16], %var_4645: int64, %var_4660: Tensor[(60), float64], %var_4661: Tensor[(900), float64]) -> (Tensor[(9, 8, 9), bool], Tensor[(9, 8, 9), uint32], Tensor[(13, 10, 12), uint64], int64, Tensor[(10, 15, 6), uint8], Tensor[(60), float64], Tensor[(900), float64]) {
  %991 = cast(%var_4636, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
  %992 = shape_of(%var_4635, dtype="int32") /* ty=Tensor[(3), int32] */;
  %993 = cast(%var_4635, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
  %994 = dyn.reshape(%991, %992, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %995 = cast(%var_4635, dtype="uint32") /* ty=Tensor[(9, 8, 9), uint32] */;
  %996 = shape_of(%var_4636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %997 = cast(%var_4636, dtype="uint32") /* ty=Tensor[(9, 8, 9), uint32] */;
  %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %999 = cast(%var_4645, dtype="int64") /* ty=int64 */;
  %1000 = reshape(%999, newshape=[]) /* ty=int64 */;
  %1001 = @func_4446(%1000) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32], int64, Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %1002 = cast(%var_4660, dtype="float64") /* ty=Tensor[(60), float64] */;
  %1003 = cast(%var_4661, dtype="float64") /* ty=Tensor[(900), float64] */;
  %1004 = reshape(%1002, newshape=[10, 1, 6]) /* ty=Tensor[(10, 1, 6), float64] */;
  %1005 = reshape(%1003, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), float64] */;
  %1006 = @func_1765(%1004, %1005) /* ty=(Tensor[(10, 1, 6), float64], Tensor[(10, 15, 6), uint8]) */;
  %1007 = greater_equal(%993, %994) /* ty=Tensor[(9, 8, 9), bool] */;
  %1008 = bitwise_or(%997, %998) /* ty=Tensor[(9, 8, 9), uint32] */;
  %1009 = %1001.0;
  %1010 = %1006.1;
  (%1007, %1008, %1009, %var_4645, %1010, %var_4660, %var_4661)
}

def @func_1900() -> Tensor[(13, 10, 12), bool] {
  %1011 = @func_1355() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64]) */;
  %1011.0
}

def @func_731() -> Tensor[(13, 10, 12), int64] {
  %1012 = @func_656() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %1013 = %1012.1;
  %1014 = cast(%1013, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %1015 = log2(%1014) /* ty=Tensor[(13, 10, 12), float64] */;
  %1016 = @func_656() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %1017 = %1016.0;
  %1018 = cast(%1017, dtype="int64") /* ty=Tensor[(13, 10, 12), int64] */;
  %1019 = shape_of(%1015, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1020 = cast(%1015, dtype="int64") /* ty=Tensor[(13, 10, 12), int64] */;
  %1021 = dyn.reshape(%1018, %1019, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%1020, %1021) /* ty=Tensor[(13, 10, 12), int64] */
}

def @func_319() -> Tensor[(13, 10, 12), uint64] {
  %1022 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 10, 12), uint32] */, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %1023 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(13, 10, 12), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1024 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 10, 12), uint32] */, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %1025 = dyn.reshape(%1022, %1023, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1026 = bitwise_and(%1024, %1025) /* ty=Tensor[(13, 10, 12), uint32] */;
  %1027 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 10, 12), uint32] */, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %1028 = shape_of(%1026, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1029 = cast(%1026, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %1030 = dyn.reshape(%1027, %1028, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%1029, %1030) /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_8742() -> (Tensor[(13, 10, 12), uint64],) {
  %1031 = @func_979() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%1031,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1198(%var_1197: int64) -> (Tensor[(13, 10, 12), int64], Tensor[(176, 2), int64], int64, Tensor[(11, 4, 8), bool]) {
  %12 = fn (%var_1186: int64) -> (Tensor[(13, 10, 12), int64], Tensor[(176, 2), int64], int64, Tensor[(11, 4, 8), bool]) {
    %0 = @func_1054() /* ty=(Tensor[(13, 10, 12), int64],) */;
    %1 = cast(%var_1186, dtype="int64") /* ty=int64 */;
    %2 = reshape(%1, newshape=[]) /* ty=int64 */;
    %3 = @func_1091(%2) /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64], Tensor[(11, 4, 8), bool], int64, Tensor[(176, 2), int64]) */;
    %4 = cast(%var_1186, dtype="int64") /* ty=int64 */;
    %5 = %3.5;
    %6 = cast(%5, dtype="int64") /* ty=Tensor[(176, 2), int64] */;
    %7 = reshape(%4, newshape=[]) /* ty=int64 */;
    %8 = reshape(%6, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), int64] */;
    %9 = @func_417(%7, %8) /* ty=(Tensor[(11, 4, 8), bool],) */;
    %10 = %0.0;
    %11 = %9.0;
    (%10, %5, %var_1186, %11)
  };
  %12(%var_1197) /* ty=(Tensor[(13, 10, 12), int64], Tensor[(176, 2), int64], int64, Tensor[(11, 4, 8), bool]) */
}

def @func_6476() -> Tensor[(13, 10, 12), uint64] {
  %14 = fn () -> Tensor[(13, 10, 12), uint64] {
    %13 = @func_4248() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(2496), int32]) */;
    %13.0
  };
  %14() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_6735(%var_6686: bool) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], bool, Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64]) {
  %15 = @func_6197() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64], Tensor[(13, 10, 12), uint64], bool) */;
  %16 = cast(%var_6686, dtype="bool") /* ty=bool */;
  %17 = reshape(%16, newshape=[]) /* ty=bool */;
  %18 = @func_3283(%17) /* ty=(Tensor[(4, 7, 3), bool], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), uint32]) */;
  %19 = @func_3547() /* ty=(Tensor[(13, 10, 12), int64],) */;
  %20 = @func_2678() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %21 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %22 = @func_979() /* ty=Tensor[(13, 10, 12), uint64] */;
  %23 = %15.3;
  %24 = %18.1;
  %25 = %19.0;
  %26 = %20.0;
  (%21, %22, %23, %24, %var_6686, %25, %26)
}

def @func_8244() -> Tensor[(13, 10, 12), uint64] {
  @func_1061() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_8647() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %27 = @func_4716() /* ty=(Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %28 = @func_1385() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %29 = %27.3;
  %30 = %28.0;
  (%29, %30)
}

def @func_8918() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64]) {
  %31 = @func_1385() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %32 = @func_5597() /* ty=Tensor[(13, 10, 12), bool] */;
  %33 = @func_1900() /* ty=Tensor[(13, 10, 12), bool] */;
  %34 = %31.0;
  (%32, %33, %34)
}

def @func_9050() -> (Tensor[(13, 10, 12), uint64],) {
  %36 = fn () -> (Tensor[(13, 10, 12), uint64],) {
    %35 = @func_2349() /* ty=Tensor[(13, 10, 12), uint64] */;
    (%35,)
  };
  %36() /* ty=(Tensor[(13, 10, 12), uint64],) */
}

def @func_2015() -> Tensor[(13, 10, 12), bool] {
  @func_2013() /* ty=Tensor[(13, 10, 12), bool] */
}

def @func_3886() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
  %37 = @func_1027() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
  %38 = %37.1;
  %39 = cast(%38, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %40 = @func_1027() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
  %41 = log10(%39) /* ty=Tensor[(13, 10, 12), float64] */;
  %42 = %40.1;
  (%41, %42)
}

def @func_2797() -> (Tensor[(3, 6, 14), float64], Tensor[(3, 6, 14), float64]) {
  %47 = fn () -> (Tensor[(3, 6, 14), float64], Tensor[(3, 6, 14), float64]) {
    %43 = @func_2714() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64]) */;
    %44 = @func_2714() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64]) */;
    %45 = %43.1;
    %46 = %44.1;
    (%45, %46)
  };
  %47() /* ty=(Tensor[(3, 6, 14), float64], Tensor[(3, 6, 14), float64]) */
}

def @func_7494(%var_7493: int64) -> (Tensor[(13, 10, 12), uint64], int64, int64) {
  %53 = fn (%var_7490: int64) -> (Tensor[(13, 10, 12), uint64], int64, int64) {
    %48 = cast(%var_7490, dtype="int64") /* ty=int64 */;
    %49 = reshape(%48, newshape=[]) /* ty=int64 */;
    %50 = @func_4446(%49) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32], int64, Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
    %51 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
    %52 = %50.2;
    (%51, %52, %var_7490)
  };
  %53(%var_7493) /* ty=(Tensor[(13, 10, 12), uint64], int64, int64) */
}

def @func_1684() -> Tensor[(13, 10, 12), uint64] {
  @func_1682() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_1091(%var_1084: int64) -> (Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64], Tensor[(11, 4, 8), bool], int64, Tensor[(176, 2), int64]) {
  %54 = @func_1054() /* ty=(Tensor[(13, 10, 12), int64],) */;
  %55 = @func_901() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) */;
  %56 = %55.1;
  %57 = cast(%56, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %58 = cast(%var_1084, dtype="int64") /* ty=int64 */;
  %59 = cast(meta[relay.Constant][0] /* ty=Tensor[(176, 2), int64] */, dtype="int64") /* ty=Tensor[(176, 2), int64] */;
  %60 = reshape(%58, newshape=[]) /* ty=int64 */;
  %61 = reshape(%59, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), int64] */;
  %62 = @func_417(%60, %61) /* ty=(Tensor[(11, 4, 8), bool],) */;
  %63 = @func_370() /* ty=Tensor[(13, 10, 12), uint32] */;
  %64 = %54.0;
  %65 = acos(%57) /* ty=Tensor[(13, 10, 12), float64] */;
  %66 = %62.0;
  (%63, %64, %65, %66, %var_1084, meta[relay.Constant][0] /* ty=Tensor[(176, 2), int64] */)
}

def @func_4052() -> (Tensor[(13, 10, 12), bool],) {
  %69 = fn () -> (Tensor[(13, 10, 12), bool],) {
    %67 = @func_2991() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool]) */;
    %68 = %67.1;
    (%68,)
  };
  %69() /* ty=(Tensor[(13, 10, 12), bool],) */
}

def @func_9006() -> (Tensor[(13, 10, 12), bool],) {
  %70 = @func_6765() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64]) */;
  %71 = %70.0;
  (%71,)
}

def @func_1901() -> Tensor[(13, 10, 12), bool] {
  %73 = fn () -> Tensor[(13, 10, 12), bool] {
    %72 = @func_1355() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64]) */;
    %72.0
  };
  %73() /* ty=Tensor[(13, 10, 12), bool] */
}

def @func_1682() -> Tensor[(13, 10, 12), uint64] {
  %74 = @func_511() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */;
  %74.0
}

def @func_3896() -> Tensor[(13, 10, 12), uint32] {
  @func_370() /* ty=Tensor[(13, 10, 12), uint32] */
}

def @func_3098() -> Tensor[(13, 10, 12), uint64] {
  %75 = fn () -> Tensor[(13, 10, 12), uint64] {
    @func_1061() /* ty=Tensor[(13, 10, 12), uint64] */
  };
  %75() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_1028() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) {
  %82 = fn () -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) {
    %76 = @func_731() /* ty=Tensor[(13, 10, 12), int64] */;
    %77 = cast(%76, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
    %78 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %79 = cosh(%77) /* ty=Tensor[(13, 10, 12), float64] */;
    %80 = %78.0;
    %81 = @func_370() /* ty=Tensor[(13, 10, 12), uint32] */;
    (%79, %80, %81)
  };
  %82() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */
}

def @func_9452() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint32]) {
  @func_9450() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint32]) */
}

def @func_5672(%var_5671: bool) -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), float64], Tensor[(352), float32]) {
  %96 = fn (%var_5636: bool) -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), float64], Tensor[(352), float32]) {
    %83 = @func_3684() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(352), float32]) */;
    %84 = @func_511() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */;
    %85 = cast(%var_5636, dtype="bool") /* ty=bool */;
    %86 = reshape(%85, newshape=[]) /* ty=bool */;
    %87 = @func_3283(%86) /* ty=(Tensor[(4, 7, 3), bool], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), uint32]) */;
    %88 = %87.2;
    %89 = cast(%88, dtype="float64") /* ty=Tensor[(4, 7, 3), float64] */;
    %90 = cast(%var_5636, dtype="float64") /* ty=float64 */;
    %91 = @func_3684() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(352), float32]) */;
    %92 = %83.0;
    %93 = %84.0;
    %94 = power(%89, %90) /* ty=Tensor[(4, 7, 3), float64] */;
    %95 = %91.2;
    (%92, %93, %94, %95)
  };
  %96(%var_5671) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), float64], Tensor[(352), float32]) */
}

def @func_8920() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64]) {
  @func_8918() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64]) */
}

def @func_4542(%var_4540: Tensor[(2496), int32]) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), int64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32]) {
  %97 = @func_731() /* ty=Tensor[(13, 10, 12), int64] */;
  %98 = cast(%97, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %99 = @func_979() /* ty=Tensor[(13, 10, 12), uint64] */;
  %100 = cast(%99, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %101 = cast(%var_4540, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %102 = reshape(%98, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint64] */;
  %103 = reshape(%100, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint64] */;
  %104 = reshape(%101, newshape=[2, 1248]) /* ty=Tensor[(2, 1248), int32] */;
  %105 = @func_3390(%102, %103, %104) /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint16], Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(2, 1248), int32], Tensor[(8, 4, 11), uint16], Tensor[(352), float32], Tensor[(13, 10, 12), float64]) */;
  %106 = %105.3;
  (%99, %97, %106, %var_4540)
}

def @func_7242(%var_7240: Tensor[(4, 7, 4), bool], %var_7241: Tensor[(4, 7, 4), bool]) -> (Tensor[(4, 7, 4), bool],) {
  %112 = fn (%var_7234: Tensor[(4, 7, 4), bool], %var_7235: Tensor[(4, 7, 4), bool]) -> (Tensor[(4, 7, 4), bool],) {
    %107 = cast(%var_7235, dtype="bool") /* ty=Tensor[(4, 7, 4), bool] */;
    %108 = shape_of(%var_7234, dtype="int32") /* ty=Tensor[(3), int32] */;
    %109 = cast(%var_7234, dtype="bool") /* ty=Tensor[(4, 7, 4), bool] */;
    %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %111 = logical_and(%109, %110) /* ty=Tensor[(4, 7, 4), bool] */;
    (%111,)
  };
  %112(%var_7240, %var_7241) /* ty=(Tensor[(4, 7, 4), bool],) */
}

def @func_8649() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  @func_8647() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */
}

def @func_965(%var_963: int64, %var_964: Tensor[(13, 10, 12), float64]) -> (int64, Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint32], Tensor[(8, 44), int16]) {
  @func_961(%var_963, %var_964) /* ty=(int64, Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint32], Tensor[(8, 44), int16]) */
}

def @func_1048(%var_1046: Tensor[(11, 9, 11), float64]) -> Tensor[(11, 9, 11), float32] {
  @func_1045(%var_1046) /* ty=Tensor[(11, 9, 11), float32] */
}

def @func_320() -> Tensor[(13, 10, 12), uint64] {
  %122 = fn () -> Tensor[(13, 10, 12), uint64] {
    %113 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 10, 12), uint32] */, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
    %114 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(13, 10, 12), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %115 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 10, 12), uint32] */, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
    %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %117 = bitwise_and(%115, %116) /* ty=Tensor[(13, 10, 12), uint32] */;
    %118 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 10, 12), uint32] */, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
    %119 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
    %120 = cast(%117, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
    %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    right_shift(%120, %121) /* ty=Tensor[(13, 10, 12), uint64] */
  };
  %122() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_5475() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
  @func_5473() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) */
}

def @func_10679() -> Tensor[(13, 10, 12), float64] {
  %124 = fn () -> Tensor[(13, 10, 12), float64] {
    %123 = @func_3886() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) */;
    %123.0
  };
  %124() /* ty=Tensor[(13, 10, 12), float64] */
}

def @func_1061() -> Tensor[(13, 10, 12), uint64] {
  @func_979() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_2351() -> Tensor[(13, 10, 12), uint64] {
  @func_2349() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_4758() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16]) {
  @func_4756() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16]) */
}

def @func_8846() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), bool]) {
  %125 = @func_1355() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64]) */;
  %126 = @func_8268() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %127 = @func_752() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %128 = %125.0;
  %129 = %126.0;
  %130 = %127.1;
  %131 = @func_2013() /* ty=Tensor[(13, 10, 12), bool] */;
  (%128, %129, %130, %131)
}

def @func_1413() -> (Tensor[(13, 10, 12), uint32],) {
  %134 = fn () -> (Tensor[(13, 10, 12), uint32],) {
    %132 = @func_1027() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
    %133 = %132.2;
    (%133,)
  };
  %134() /* ty=(Tensor[(13, 10, 12), uint32],) */
}

def @func_8588() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
  %140 = fn () -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
    %135 = @func_8268() /* ty=(Tensor[(13, 10, 12), float64],) */;
    %136 = @func_6197() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64], Tensor[(13, 10, 12), uint64], bool) */;
    %137 = @func_2283() /* ty=Tensor[(13, 10, 12), uint64] */;
    %138 = %135.0;
    %139 = %136.3;
    (%137, %138, %139)
  };
  %140() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) */
}

def @func_7762(%var_7753: bool) -> (Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), uint64], bool, Tensor[(13, 10, 12), uint64]) {
  %141 = @func_5767() /* ty=(Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), uint32]) */;
  %142 = @func_901() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) */;
  %143 = cast(%var_7753, dtype="bool") /* ty=bool */;
  %144 = reshape(%143, newshape=[]) /* ty=bool */;
  %145 = @func_5670(%144) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), float64], Tensor[(352), float32]) */;
  %146 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %147 = %141.0;
  %148 = %142.1;
  %149 = %145.1;
  %150 = %146.1;
  (%147, %148, %149, %var_7753, %150)
}

def @func_5931() -> Tensor[(13, 10, 12), float64] {
  %151 = @func_5579() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %151.0
}

def @func_6072() -> Tensor[(13, 10, 12), int64] {
  %152 = fn () -> Tensor[(13, 10, 12), int64] {
    @func_731() /* ty=Tensor[(13, 10, 12), int64] */
  };
  %152() /* ty=Tensor[(13, 10, 12), int64] */
}

def @func_6981(%var_6979: float64, %var_6980: Tensor[(9, 1, 10), float64]) -> (Tensor[(9, 1, 10), float64], Tensor[(13, 10, 12), int64]) {
  @func_6977(%var_6979, %var_6980) /* ty=(Tensor[(9, 1, 10), float64], Tensor[(13, 10, 12), int64]) */
}

def @func_3286(%var_3284: bool) -> (Tensor[(4, 7, 3), bool], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), uint32]) {
  @func_3283(%var_3284) /* ty=(Tensor[(4, 7, 3), bool], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), uint32]) */
}

def @func_6357() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool], Tensor[(13, 16, 12), float64]) {
  %165 = fn () -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool], Tensor[(13, 16, 12), float64]) {
    %153 = @func_2488() /* ty=(Tensor[(13, 10, 12), float64],) */;
    %154 = @func_3097() /* ty=Tensor[(13, 10, 12), uint64] */;
    %155 = cast(%154, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
    %156 = cast(%154, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
    %157 = reshape(%155, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint64] */;
    %158 = reshape(%156, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint64] */;
    %159 = @func_588(%157, %158) /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(2496), int32], Tensor[(13, 10, 12), bool], Tensor[(13, 16, 12), int64]) */;
    %160 = %159.3;
    %161 = cast(%160, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
    %162 = %153.0;
    %163 = @func_1900() /* ty=Tensor[(13, 10, 12), bool] */;
    %164 = cos(%161) /* ty=Tensor[(13, 16, 12), float64] */;
    (%162, %154, %163, %164)
  };
  %165() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool], Tensor[(13, 16, 12), float64]) */
}

def @func_4992(%var_4991: Tensor[(60), float64]) -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool], Tensor[(1, 352), float32], Tensor[(352), float32], Tensor[(11, 4, 8), bool], int64, Tensor[(9, 8, 9), bool], Tensor[(648), int16], Tensor[(60), float64], Tensor[(900), float64]) {
  %191 = fn (%var_4975: Tensor[(60), float64]) -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool], Tensor[(1, 352), float32], Tensor[(352), float32], Tensor[(11, 4, 8), bool], int64, Tensor[(9, 8, 9), bool], Tensor[(648), int16], Tensor[(60), float64], Tensor[(900), float64]) {
    %166 = @func_4248() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(2496), int32]) */;
    %167 = @func_4051() /* ty=(Tensor[(13, 10, 12), bool],) */;
    %168 = cast(meta[relay.Constant][3] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
    %169 = reshape(%168, newshape=[1, 352]) /* ty=Tensor[(1, 352), float32] */;
    %170 = @func_2181(%169) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool], Tensor[(8, 4, 11), uint16], Tensor[(1, 352), float32], Tensor[(2496), int32]) */;
    %171 = cast(-5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %172 = reshape(%171, newshape=[]) /* ty=int64 */;
    %173 = @func_1091(%172) /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64], Tensor[(11, 4, 8), bool], int64, Tensor[(176, 2), int64]) */;
    %174 = cast(meta[relay.Constant][4] /* ty=Tensor[(648), int16] */, dtype="int16") /* ty=Tensor[(648), int16] */;
    %175 = cast(meta[relay.Constant][4] /* ty=Tensor[(648), int16] */, dtype="int16") /* ty=Tensor[(648), int16] */;
    %176 = cast(-5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %177 = cast(%var_4975, dtype="float64") /* ty=Tensor[(60), float64] */;
    %178 = cast(meta[relay.Constant][5] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
    %179 = reshape(%174, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), int16] */;
    %180 = reshape(%175, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), int16] */;
    %181 = reshape(%176, newshape=[]) /* ty=int64 */;
    %182 = reshape(%177, newshape=[60]) /* ty=Tensor[(60), float64] */;
    %183 = reshape(%178, newshape=[900]) /* ty=Tensor[(900), float64] */;
    %184 = @func_4663(%179, %180, %181, %182, %183) /* ty=(Tensor[(9, 8, 9), bool], Tensor[(9, 8, 9), uint32], Tensor[(13, 10, 12), uint64], int64, Tensor[(10, 15, 6), uint8], Tensor[(60), float64], Tensor[(900), float64]) */;
    %185 = @func_3474() /* ty=Tensor[(13, 10, 12), float64] */;
    %186 = %166.0;
    %187 = %167.0;
    %188 = %170.3;
    %189 = %173.3;
    %190 = %184.0;
    (%185, %186, %187, %188, meta[relay.Constant][3] /* ty=Tensor[(352), float32] */, %189, -5 /* ty=int64 */, %190, meta[relay.Constant][4] /* ty=Tensor[(648), int16] */, %var_4975, meta[relay.Constant][5] /* ty=Tensor[(900), float64] */)
  };
  %191(%var_4991) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool], Tensor[(1, 352), float32], Tensor[(352), float32], Tensor[(11, 4, 8), bool], int64, Tensor[(9, 8, 9), bool], Tensor[(648), int16], Tensor[(60), float64], Tensor[(900), float64]) */
}

def @func_6977(%var_6951: float64, %var_6952: Tensor[(9, 1, 10), float64]) -> (Tensor[(9, 1, 10), float64], Tensor[(13, 10, 12), int64]) {
  %192 = cast(%var_6951, dtype="float64") /* ty=float64 */;
  %193 = cast(%var_6952, dtype="float64") /* ty=Tensor[(9, 1, 10), float64] */;
  %194 = @func_1054() /* ty=(Tensor[(13, 10, 12), int64],) */;
  %195 = floor_divide(%192, %193) /* ty=Tensor[(9, 1, 10), float64] */;
  %196 = %194.0;
  (%195, %196)
}

def @func_7981() -> Tensor[(2496), int32] {
  %197 = @func_4248() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(2496), int32]) */;
  %197.2
}

def @func_5949() -> (Tensor[(13, 10, 12), uint64],) {
  %199 = fn () -> (Tensor[(13, 10, 12), uint64],) {
    %198 = @func_1682() /* ty=Tensor[(13, 10, 12), uint64] */;
    (%198,)
  };
  %199() /* ty=(Tensor[(13, 10, 12), uint64],) */
}

def @func_7710() -> (Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), bool], Tensor[(176, 2), int64], int64, Tensor[(16, 2, 7), int16], Tensor[(224), int16], Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64]) {
  %200 = @func_4051() /* ty=(Tensor[(13, 10, 12), bool],) */;
  %201 = cast(8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %202 = reshape(%201, newshape=[]) /* ty=int64 */;
  %203 = @func_1196(%202) /* ty=(Tensor[(13, 10, 12), int64], Tensor[(176, 2), int64], int64, Tensor[(11, 4, 8), bool]) */;
  %204 = cast(meta[relay.Constant][6] /* ty=Tensor[(224), int16] */, dtype="int16") /* ty=Tensor[(224), int16] */;
  %205 = reshape(%204, newshape=[16, 2, 7]) /* ty=Tensor[(16, 2, 7), int16] */;
  %206 = @func_1829(%205) /* ty=(Tensor[(16, 2, 7), int16],) */;
  %207 = @func_4051() /* ty=(Tensor[(13, 10, 12), bool],) */;
  %208 = @func_7024() /* ty=Tensor[(13, 10, 12), int64] */;
  %209 = %200.0;
  %210 = %203.1;
  %211 = %206.0;
  %212 = %207.0;
  %213 = @func_6475() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%208, %209, %210, 8 /* ty=int64 */, %211, meta[relay.Constant][6] /* ty=Tensor[(224), int16] */, %212, %213)
}

def @func_5767() -> (Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), uint32]) {
  %214 = @func_1682() /* ty=Tensor[(13, 10, 12), uint64] */;
  %215 = cast(%214, dtype="float32") /* ty=Tensor[(13, 10, 12), float32] */;
  %216 = acosh(%215) /* ty=Tensor[(13, 10, 12), float32] */;
  %217 = @func_3896() /* ty=Tensor[(13, 10, 12), uint32] */;
  (%216, %217)
}

def @func_979() -> Tensor[(13, 10, 12), uint64] {
  %218 = @func_511() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */;
  %218.0
}

def @func_538() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32], Tensor[(13, 10, 12), uint32]) {
  %219 = cast(meta[relay.Constant][7] /* ty=Tensor[(2496), int32] */, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %220 = reshape(%219, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), int32] */;
  %221 = @func_63(%220) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) */;
  %222 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %223 = %221.1;
  %224 = @func_370() /* ty=Tensor[(13, 10, 12), uint32] */;
  (%222, %223, meta[relay.Constant][7] /* ty=Tensor[(2496), int32] */, %224)
}

def @func_7712() -> (Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), bool], Tensor[(176, 2), int64], int64, Tensor[(16, 2, 7), int16], Tensor[(224), int16], Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64]) {
  @func_7710() /* ty=(Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), bool], Tensor[(176, 2), int64], int64, Tensor[(16, 2, 7), int16], Tensor[(224), int16], Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64]) */
}

def @func_6561() -> Tensor[(13, 10, 12), uint64] {
  %225 = fn () -> Tensor[(13, 10, 12), uint64] {
    @func_3097() /* ty=Tensor[(13, 10, 12), uint64] */
  };
  %225() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_7929(%var_7924: Tensor[(900), float64]) -> (Tensor[(13, 10, 12), uint64], Tensor[(9, 8, 9), bool], Tensor[(648), int16], int64, Tensor[(60), float64], Tensor[(900), float64]) {
  %226 = cast(meta[relay.Constant][8] /* ty=Tensor[(648), int16] */, dtype="int16") /* ty=Tensor[(648), int16] */;
  %227 = cast(meta[relay.Constant][8] /* ty=Tensor[(648), int16] */, dtype="int16") /* ty=Tensor[(648), int16] */;
  %228 = cast(-10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %229 = cast(meta[relay.Constant][9] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %230 = cast(%var_7924, dtype="float64") /* ty=Tensor[(900), float64] */;
  %231 = reshape(%226, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), int16] */;
  %232 = reshape(%227, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), int16] */;
  %233 = reshape(%228, newshape=[]) /* ty=int64 */;
  %234 = reshape(%229, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %235 = reshape(%230, newshape=[900]) /* ty=Tensor[(900), float64] */;
  %236 = @func_4663(%231, %232, %233, %234, %235) /* ty=(Tensor[(9, 8, 9), bool], Tensor[(9, 8, 9), uint32], Tensor[(13, 10, 12), uint64], int64, Tensor[(10, 15, 6), uint8], Tensor[(60), float64], Tensor[(900), float64]) */;
  %237 = @func_6560() /* ty=Tensor[(13, 10, 12), uint64] */;
  %238 = %236.0;
  (%237, %238, meta[relay.Constant][8] /* ty=Tensor[(648), int16] */, -10 /* ty=int64 */, meta[relay.Constant][9] /* ty=Tensor[(60), float64] */, %var_7924)
}

def @func_6199() -> (Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64], Tensor[(13, 10, 12), uint64], bool) {
  @func_6197() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64], Tensor[(13, 10, 12), uint64], bool) */
}

def @func_5581() -> (Tensor[(13, 10, 12), float64],) {
  @func_5579() /* ty=(Tensor[(13, 10, 12), float64],) */
}

def @func_4014(%var_4012: Tensor[(2496), int32]) -> (Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32]) {
  @func_4011(%var_4012) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32]) */
}

def @func_9134() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %243 = fn () -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
    %239 = @func_3886() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) */;
    %240 = @func_6011() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64]) */;
    %241 = %239.1;
    %242 = %240.0;
    (%241, %242)
  };
  %243() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */
}

def @func_10372() -> (Tensor[(13, 10, 12), float32], Tensor[(3, 6, 14), float64]) {
  @func_10370() /* ty=(Tensor[(13, 10, 12), float32], Tensor[(3, 6, 14), float64]) */
}

def @func_8270() -> (Tensor[(13, 10, 12), float64],) {
  @func_8268() /* ty=(Tensor[(13, 10, 12), float64],) */
}

def @func_2349() -> Tensor[(13, 10, 12), uint64] {
  @func_979() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_4576(%var_4575: Tensor[(352), float32]) -> (Tensor[(13, 10, 12), uint64], Tensor[(352, ?), bool]) {
  %255 = fn (%var_4557: Tensor[(352), float32]) -> (Tensor[(13, 10, 12), uint64], Tensor[(352, ?), bool]) {
    %244 = @func_1797() /* ty=(Tensor[(13, 10, 12), uint64],) */;
    %245 = cast(%var_4557, dtype="float32") /* ty=Tensor[(352), float32] */;
    %246 = reshape(%245, newshape=[352, 1]) /* ty=Tensor[(352, 1), float32] */;
    %247 = @func_1993(%246) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(2496), int32], Tensor[(352, 1), float64]) */;
    %248 = %247.5;
    %249 = cast(%var_4557, dtype="bool") /* ty=Tensor[(352), bool] */;
    %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(2), int32] */;
    %251 = cast(%248, dtype="bool") /* ty=Tensor[(352, 1), bool] */;
    %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %253 = %244.0;
    %254 = equal(%251, %252) /* ty=Tensor[(352, ?), bool] */;
    (%253, %254)
  };
  %255(%var_4575) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(352, ?), bool]) */
}

def @func_3685() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(352), float32]) {
  %261 = fn () -> (Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(352), float32]) {
    %256 = cast(meta[relay.Constant][10] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
    %257 = reshape(%256, newshape=[352, 1]) /* ty=Tensor[(352, 1), float32] */;
    %258 = @func_1993(%257) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(2496), int32], Tensor[(352, 1), float64]) */;
    %259 = @func_3474() /* ty=Tensor[(13, 10, 12), float64] */;
    %260 = %258.2;
    (%259, %260, meta[relay.Constant][10] /* ty=Tensor[(352), float32] */)
  };
  %261() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(352), float32]) */
}

def @func_9488(%var_9470: Tensor[(12, 12, 9), float32]) -> (Tensor[(12, 12, 9), float32], Tensor[(13, 10, 12), float64]) {
  %262 = cast(%var_9470, dtype="float32") /* ty=Tensor[(12, 12, 9), float32] */;
  %263 = sin(%262) /* ty=Tensor[(12, 12, 9), float32] */;
  %264 = @func_2893() /* ty=Tensor[(13, 10, 12), float64] */;
  (%263, %264)
}

def @func_9976(%var_9939: Tensor[(5, 12, 9), float32]) -> (Tensor[(13, 10, 12), float64], Tensor[(5, 12, 9), bool]) {
  %265 = @func_2866() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %266 = cast(%var_9939, dtype="float32") /* ty=Tensor[(5, 12, 9), float32] */;
  %267 = exp(%266) /* ty=Tensor[(5, 12, 9), float32] */;
  %268 = cast(%var_9939, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%267, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %272 = %265.2;
  %273 = logical_or(%270, %271) /* ty=Tensor[(5, 12, 9), bool] */;
  (%272, %273)
}

def @func_10074() -> Tensor[(13, 10, 12), uint64] {
  %274 = @func_8367() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %274.0
}

def @func_2488() -> (Tensor[(13, 10, 12), float64],) {
  %275 = @func_2256() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %276 = %275.0;
  (%276,)
}

def @func_512() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) {
  %282 = fn () -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) {
    %277 = cast(meta[relay.Constant][11] /* ty=Tensor[(2496), int32] */, dtype="int32") /* ty=Tensor[(2496), int32] */;
    %278 = reshape(%277, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), int32] */;
    %279 = @func_63(%278) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) */;
    %280 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
    %281 = %279.1;
    (%280, %281, meta[relay.Constant][11] /* ty=Tensor[(2496), int32] */)
  };
  %282() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */
}

def @func_1995(%var_1994: Tensor[(352, 1), float32]) -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(2496), int32], Tensor[(352, 1), float64]) {
  %299 = fn (%var_1967: Tensor[(352, 1), float32]) -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(2496), int32], Tensor[(352, 1), float64]) {
    %283 = @func_1027() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
    %284 = @func_656() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %285 = cast(%var_1967, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
    %286 = cast(%var_1967, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
    %287 = cast(meta[relay.Constant][12] /* ty=Tensor[(2496), int32] */, dtype="int32") /* ty=Tensor[(2496), int32] */;
    %288 = reshape(%285, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), float32] */;
    %289 = reshape(%286, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), float32] */;
    %290 = reshape(%287, newshape=[2496]) /* ty=Tensor[(2496), int32] */;
    %291 = @func_171(%288, %289, %290) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(8, 4, 11), uint16], Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), int64]) */;
    %292 = @func_511() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */;
    %293 = cast(%var_1967, dtype="float64") /* ty=Tensor[(352, 1), float64] */;
    %294 = %283.0;
    %295 = %284.1;
    %296 = %291.0;
    %297 = %292.2;
    %298 = asinh(%293) /* ty=Tensor[(352, 1), float64] */;
    (%294, %295, %296, meta[relay.Constant][12] /* ty=Tensor[(2496), int32] */, %297, %298)
  };
  %299(%var_1994) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(2496), int32], Tensor[(352, 1), float64]) */
}

def @func_11094(%var_11091: Tensor[(3, 216), int16], %var_11092: int64, %var_11093: Tensor[(60), float64]) -> (Tensor[(13, 10, 12), bool], int64, Tensor[(3, 216), int16], int64, Tensor[(60), float64], Tensor[(900), float64]) {
  %313 = fn (%var_11053: Tensor[(3, 216), int16], %var_11054: int64, %var_11055: Tensor[(60), float64]) -> (Tensor[(13, 10, 12), bool], int64, Tensor[(3, 216), int16], int64, Tensor[(60), float64], Tensor[(900), float64]) {
    %300 = cast(%var_11053, dtype="int16") /* ty=Tensor[(3, 216), int16] */;
    %301 = cast(%var_11053, dtype="int16") /* ty=Tensor[(3, 216), int16] */;
    %302 = cast(%var_11054, dtype="int64") /* ty=int64 */;
    %303 = cast(%var_11055, dtype="float64") /* ty=Tensor[(60), float64] */;
    %304 = cast(meta[relay.Constant][13] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
    %305 = reshape(%300, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), int16] */;
    %306 = reshape(%301, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), int16] */;
    %307 = reshape(%302, newshape=[]) /* ty=int64 */;
    %308 = reshape(%303, newshape=[60]) /* ty=Tensor[(60), float64] */;
    %309 = reshape(%304, newshape=[900]) /* ty=Tensor[(900), float64] */;
    %310 = @func_4663(%305, %306, %307, %308, %309) /* ty=(Tensor[(9, 8, 9), bool], Tensor[(9, 8, 9), uint32], Tensor[(13, 10, 12), uint64], int64, Tensor[(10, 15, 6), uint8], Tensor[(60), float64], Tensor[(900), float64]) */;
    %311 = @func_1900() /* ty=Tensor[(13, 10, 12), bool] */;
    %312 = %310.3;
    (%311, %312, %var_11053, %var_11054, %var_11055, meta[relay.Constant][13] /* ty=Tensor[(900), float64] */)
  };
  %313(%var_11091, %var_11092, %var_11093) /* ty=(Tensor[(13, 10, 12), bool], int64, Tensor[(3, 216), int16], int64, Tensor[(60), float64], Tensor[(900), float64]) */
}

def @func_4545(%var_4543: Tensor[(2496), int32]) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), int64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32]) {
  @func_4542(%var_4543) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), int64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32]) */
}

def @func_10573() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint32]) {
  %318 = fn () -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint32]) {
    %314 = @func_9006() /* ty=(Tensor[(13, 10, 12), bool],) */;
    %315 = @func_10277() /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64]) */;
    %316 = %314.0;
    %317 = %315.0;
    (%316, %317)
  };
  %318() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint32]) */
}

def @func_1798() -> (Tensor[(13, 10, 12), uint64],) {
  %321 = fn () -> (Tensor[(13, 10, 12), uint64],) {
    %319 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %320 = %319.1;
    (%320,)
  };
  %321() /* ty=(Tensor[(13, 10, 12), uint64],) */
}

def @func_3540() -> (Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64]) {
  %328 = fn () -> (Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64]) {
    %322 = @func_1027() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
    %323 = @func_538() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32], Tensor[(13, 10, 12), uint32]) */;
    %324 = @func_2439() /* ty=(Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64]) */;
    %325 = %322.2;
    %326 = %323.3;
    %327 = %324.0;
    (%325, %326, %327)
  };
  %328() /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64]) */
}

def @func_9580() -> Tensor[(13, 10, 12), uint64] {
  %329 = fn () -> Tensor[(13, 10, 12), uint64] {
    @func_2283() /* ty=Tensor[(13, 10, 12), uint64] */
  };
  %329() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_901() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) {
  %330 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %331 = %330.1;
  %332 = cast(%331, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %333 = atan(%332) /* ty=Tensor[(13, 10, 12), float64] */;
  %334 = cast(%333, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %335 = shape_of(%331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%331, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %338 = cast(%333, dtype="float32") /* ty=Tensor[(13, 10, 12), float32] */;
  %339 = @func_656() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %340 = %339.1;
  %341 = cast(%340, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %342 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%333, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %345 = logical_or(%336, %337) /* ty=Tensor[(13, 10, 12), bool] */;
  %346 = asinh(%338) /* ty=Tensor[(13, 10, 12), float32] */;
  %347 = greater_equal(%343, %344) /* ty=Tensor[(13, 10, 12), bool] */;
  (%345, %346, %347)
}

def @func_4125() -> Tensor[(13, 10, 12), uint64] {
  %348 = fn () -> Tensor[(13, 10, 12), uint64] {
    @func_319() /* ty=Tensor[(13, 10, 12), uint64] */
  };
  %348() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_3465() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float32]) {
  %359 = fn () -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float32]) {
    %349 = @func_752() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
    %350 = @func_2866() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
    %351 = @func_1385() /* ty=(Tensor[(13, 10, 12), uint64],) */;
    %352 = @func_2866() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
    %353 = @func_901() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) */;
    %354 = %349.0;
    %355 = %350.2;
    %356 = %351.0;
    %357 = %352.3;
    %358 = %353.1;
    (%354, %355, %356, %357, %358)
  };
  %359() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float32]) */
}

def @func_5599() -> Tensor[(13, 10, 12), bool] {
  @func_5597() /* ty=Tensor[(13, 10, 12), bool] */
}

def @func_4449(%var_4447: int64) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32], int64, Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) {
  @func_4446(%var_4447) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32], int64, Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */
}

def @func_10714(%var_10706: Tensor[(15, 11, 4), uint64], %var_10707: Tensor[(15, 11, 4), uint64]) -> Tensor[(15, 11, 4), uint64] {
  %360 = cast(%var_10707, dtype="uint64") /* ty=Tensor[(15, 11, 4), uint64] */;
  %361 = shape_of(%var_10706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%var_10706, dtype="uint64") /* ty=Tensor[(15, 11, 4), uint64] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_and(%362, %363) /* ty=Tensor[(15, 11, 4), uint64] */
}

def @func_7765(%var_7763: bool) -> (Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), uint64], bool, Tensor[(13, 10, 12), uint64]) {
  @func_7762(%var_7763) /* ty=(Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), uint64], bool, Tensor[(13, 10, 12), uint64]) */
}

def @func_1832(%var_1830: Tensor[(16, 2, 7), int16]) -> (Tensor[(16, 2, 7), int16],) {
  @func_1829(%var_1830) /* ty=(Tensor[(16, 2, 7), int16],) */
}

def @func_2679() -> (Tensor[(13, 10, 12), float64],) {
  %366 = fn () -> (Tensor[(13, 10, 12), float64],) {
    %364 = @func_1486() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
    %365 = %364.0;
    (%365,)
  };
  %366() /* ty=(Tensor[(13, 10, 12), float64],) */
}

def @func_1094(%var_1092: int64) -> (Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64], Tensor[(11, 4, 8), bool], int64, Tensor[(176, 2), int64]) {
  @func_1091(%var_1092) /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64], Tensor[(11, 4, 8), bool], int64, Tensor[(176, 2), int64]) */
}

def @func_5473() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
  %367 = @func_2256() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %368 = @func_1385() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %369 = %367.0;
  %370 = %368.0;
  (%369, %370)
}

def @func_5382(%var_5381: Tensor[(8, 4, 13), float32]) -> Tensor[(8, 4, 13), float32] {
  %372 = fn (%var_5368: Tensor[(8, 4, 13), float32]) -> Tensor[(8, 4, 13), float32] {
    %371 = cast(%var_5368, dtype="float32") /* ty=Tensor[(8, 4, 13), float32] */;
    cosh(%371) /* ty=Tensor[(8, 4, 13), float32] */
  };
  %372(%var_5381) /* ty=Tensor[(8, 4, 13), float32] */
}

def @func_3548() -> (Tensor[(13, 10, 12), int64],) {
  %375 = fn () -> (Tensor[(13, 10, 12), int64],) {
    %373 = @func_3539() /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64]) */;
    %374 = %373.2;
    (%374,)
  };
  %375() /* ty=(Tensor[(13, 10, 12), int64],) */
}

def @func_6943(%var_6942: Tensor[(8, 4, 11), uint16]) -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(252), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(?, 2496), bool], Tensor[(13, 10, 12), float32], Tensor[(3, 6, 14), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), uint64], Tensor[(8, 4, 11), float64], Tensor[(352, 1), float64]) {
  %430 = fn (%var_6929: Tensor[(8, 4, 11), uint16]) -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(252), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(?, 2496), bool], Tensor[(13, 10, 12), float32], Tensor[(3, 6, 14), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), uint64], Tensor[(8, 4, 11), float64], Tensor[(352, 1), float64]) {
    %376 = @func_2714() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64]) */;
    %377 = @func_1797() /* ty=(Tensor[(13, 10, 12), uint64],) */;
    %378 = @func_3464() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float32]) */;
    %379 = @func_2866() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
    %380 = %379.1;
    %381 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 2496), int32] */, dtype="bool") /* ty=Tensor[(1, 2496), bool] */;
    %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
    %383 = cast(%380, dtype="bool") /* ty=Tensor[(13, 16, 12), bool] */;
    %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %385 = less_equal(%383, %384) /* ty=Tensor[(13, 16, 12), bool] */;
    %386 = cast(%385, dtype="bool") /* ty=Tensor[(13, 16, 12), bool] */;
    %387 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(1, 2496), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %388 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 2496), int32] */, dtype="bool") /* ty=Tensor[(1, 2496), bool] */;
    %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %390 = @func_5931() /* ty=Tensor[(13, 10, 12), float64] */;
    %391 = cast(%390, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
    %392 = reshape(%391, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint32] */;
    %393 = @func_2796() /* ty=(Tensor[(3, 6, 14), float64], Tensor[(3, 6, 14), float64]) */;
    %394 = @func_3144() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %395 = cast(%380, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
    %396 = @func_4756() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16]) */;
    %397 = %396.1;
    %398 = cast(%397, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
    %399 = reshape(%398, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint32] */;
    %400 = @func_2283() /* ty=Tensor[(13, 10, 12), uint64] */;
    %401 = cast(%400, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
    %402 = @func_5931() /* ty=Tensor[(13, 10, 12), float64] */;
    %403 = cast(%402, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
    %404 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 2496), int32] */, dtype="int32") /* ty=Tensor[(1, 2496), int32] */;
    %405 = reshape(%401, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint64] */;
    %406 = reshape(%403, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint64] */;
    %407 = reshape(%404, newshape=[2, 1248]) /* ty=Tensor[(2, 1248), int32] */;
    %408 = @func_3390(%405, %406, %407) /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint16], Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(2, 1248), int32], Tensor[(8, 4, 11), uint16], Tensor[(352), float32], Tensor[(13, 10, 12), float64]) */;
    %409 = %408.5;
    %410 = cast(%var_6929, dtype="float64") /* ty=Tensor[(8, 4, 11), float64] */;
    %411 = shape_of(%409, dtype="int32") /* ty=Tensor[(3), int32] */;
    %412 = cast(%409, dtype="float64") /* ty=Tensor[(8, 4, 11), float64] */;
    %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %414 = cast(%409, dtype="float32") /* ty=Tensor[(8, 4, 11), float32] */;
    %415 = reshape(%414, newshape=[352, 1]) /* ty=Tensor[(352, 1), float32] */;
    %416 = @func_1993(%415) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(2496), int32], Tensor[(352, 1), float64]) */;
    %417 = %376.2;
    %418 = %377.0;
    %419 = %378.3;
    %420 = greater_equal(%388, %389) /* ty=Tensor[(?, 2496), bool] */;
    %421 = @func_5557(%392) /* ty=Tensor[(13, 10, 12), float32] */;
    %422 = %393.0;
    %423 = @func_6475() /* ty=Tensor[(13, 10, 12), uint64] */;
    %424 = %394.0;
    %425 = rsqrt(%395) /* ty=Tensor[(13, 16, 12), float64] */;
    %426 = @func_5557(%399) /* ty=Tensor[(13, 10, 12), float32] */;
    %427 = @func_2349() /* ty=Tensor[(13, 10, 12), uint64] */;
    %428 = floor_divide(%412, %413) /* ty=Tensor[(8, 4, 11), float64] */;
    %429 = %416.5;
    (%402, %400, %417, %390, %418, %419, %420, %421, %422, %423, %424, %425, %397, %426, %427, %428, %429)
  };
  %430(%var_6942) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(252), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(?, 2496), bool], Tensor[(13, 10, 12), float32], Tensor[(3, 6, 14), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), uint64], Tensor[(8, 4, 11), float64], Tensor[(352, 1), float64]) */
}

def @func_8529() -> (Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint32]) {
  %434 = fn () -> (Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint32]) {
    %431 = @func_1027() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
    %432 = @func_7024() /* ty=Tensor[(13, 10, 12), int64] */;
    %433 = %431.2;
    (%432, %433)
  };
  %434() /* ty=(Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint32]) */
}

def @func_2257() -> (Tensor[(13, 10, 12), float64],) {
  %437 = fn () -> (Tensor[(13, 10, 12), float64],) {
    %435 = @func_752() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
    %436 = %435.0;
    (%436,)
  };
  %437() /* ty=(Tensor[(13, 10, 12), float64],) */
}

def @func_10278() -> (Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64]) {
  %444 = fn () -> (Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64]) {
    %438 = @func_6637() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
    %439 = @func_3602() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %440 = @func_2488() /* ty=(Tensor[(13, 10, 12), float64],) */;
    %441 = %438.1;
    %442 = %439.0;
    %443 = %440.0;
    (%441, %442, %443)
  };
  %444() /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64]) */
}

def @func_961(%var_918: int64, %var_951: Tensor[(13, 10, 12), float64]) -> (int64, Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint32], Tensor[(8, 44), int16]) {
  %445 = @func_901() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) */;
  %446 = @func_752() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %447 = %446.1;
  %448 = cast(%var_951, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%447, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %452 = cast(%var_918, dtype="int64") /* ty=int64 */;
  %453 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 44), int64] */, dtype="int64") /* ty=Tensor[(8, 44), int64] */;
  %454 = reshape(%452, newshape=[]) /* ty=int64 */;
  %455 = reshape(%453, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), int64] */;
  %456 = @func_417(%454, %455) /* ty=(Tensor[(11, 4, 8), bool],) */;
  %457 = %456.0;
  %458 = cast(%457, dtype="int16") /* ty=Tensor[(11, 4, 8), int16] */;
  %459 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(8, 44), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %460 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 44), int64] */, dtype="int16") /* ty=Tensor[(8, 44), int16] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %462 = %445.2;
  %463 = add(%450, %451) /* ty=Tensor[(13, 10, 12), uint32] */;
  %464 = right_shift(%460, %461) /* ty=Tensor[(8, 44), int16] */;
  (%var_918, %462, %463, %464)
}

def @func_5991(%var_5989: Tensor[(11, 8, 3), uint8]) -> (Tensor[(11, 8, 3), float64], Tensor[(13, 10, 12), uint32]) {
  @func_5988(%var_5989) /* ty=(Tensor[(11, 8, 3), float64], Tensor[(13, 10, 12), uint32]) */
}

def @func_7717() -> Tensor[(13, 10, 12), float64] {
  %465 = @func_2866() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %465.3
}

def @func_7026() -> Tensor[(13, 10, 12), int64] {
  @func_7024() /* ty=Tensor[(13, 10, 12), int64] */
}

def @func_4669(%var_4664: Tensor[(9, 8, 9), int16], %var_4665: Tensor[(9, 8, 9), int16], %var_4666: int64, %var_4667: Tensor[(60), float64], %var_4668: Tensor[(900), float64]) -> (Tensor[(9, 8, 9), bool], Tensor[(9, 8, 9), uint32], Tensor[(13, 10, 12), uint64], int64, Tensor[(10, 15, 6), uint8], Tensor[(60), float64], Tensor[(900), float64]) {
  %486 = fn (%var_4635: Tensor[(9, 8, 9), int16], %var_4636: Tensor[(9, 8, 9), int16], %var_4645: int64, %var_4660: Tensor[(60), float64], %var_4661: Tensor[(900), float64]) -> (Tensor[(9, 8, 9), bool], Tensor[(9, 8, 9), uint32], Tensor[(13, 10, 12), uint64], int64, Tensor[(10, 15, 6), uint8], Tensor[(60), float64], Tensor[(900), float64]) {
    %466 = cast(%var_4636, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
    %467 = shape_of(%var_4635, dtype="int32") /* ty=Tensor[(3), int32] */;
    %468 = cast(%var_4635, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
    %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %470 = cast(%var_4635, dtype="uint32") /* ty=Tensor[(9, 8, 9), uint32] */;
    %471 = shape_of(%var_4636, dtype="int32") /* ty=Tensor[(3), int32] */;
    %472 = cast(%var_4636, dtype="uint32") /* ty=Tensor[(9, 8, 9), uint32] */;
    %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %474 = cast(%var_4645, dtype="int64") /* ty=int64 */;
    %475 = reshape(%474, newshape=[]) /* ty=int64 */;
    %476 = @func_4446(%475) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32], int64, Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
    %477 = cast(%var_4660, dtype="float64") /* ty=Tensor[(60), float64] */;
    %478 = cast(%var_4661, dtype="float64") /* ty=Tensor[(900), float64] */;
    %479 = reshape(%477, newshape=[10, 1, 6]) /* ty=Tensor[(10, 1, 6), float64] */;
    %480 = reshape(%478, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), float64] */;
    %481 = @func_1765(%479, %480) /* ty=(Tensor[(10, 1, 6), float64], Tensor[(10, 15, 6), uint8]) */;
    %482 = greater_equal(%468, %469) /* ty=Tensor[(9, 8, 9), bool] */;
    %483 = bitwise_or(%472, %473) /* ty=Tensor[(9, 8, 9), uint32] */;
    %484 = %476.0;
    %485 = %481.1;
    (%482, %483, %484, %var_4645, %485, %var_4660, %var_4661)
  };
  %486(%var_4664, %var_4665, %var_4666, %var_4667, %var_4668) /* ty=(Tensor[(9, 8, 9), bool], Tensor[(9, 8, 9), uint32], Tensor[(13, 10, 12), uint64], int64, Tensor[(10, 15, 6), uint8], Tensor[(60), float64], Tensor[(900), float64]) */
}

def @func_5357(%var_5356: int64) -> (Tensor[(13, 10, 12), bool], Tensor[(2496), int32], Tensor[(13, 10, 12), int64], int64) {
  %494 = fn (%var_5350: int64) -> (Tensor[(13, 10, 12), bool], Tensor[(2496), int32], Tensor[(13, 10, 12), int64], int64) {
    %487 = @func_4248() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(2496), int32]) */;
    %488 = cast(%var_5350, dtype="int64") /* ty=int64 */;
    %489 = reshape(%488, newshape=[]) /* ty=int64 */;
    %490 = @func_1196(%489) /* ty=(Tensor[(13, 10, 12), int64], Tensor[(176, 2), int64], int64, Tensor[(11, 4, 8), bool]) */;
    %491 = @func_4613() /* ty=Tensor[(13, 10, 12), bool] */;
    %492 = %487.2;
    %493 = %490.0;
    (%491, %492, %493, %var_5350)
  };
  %494(%var_5356) /* ty=(Tensor[(13, 10, 12), bool], Tensor[(2496), int32], Tensor[(13, 10, 12), int64], int64) */
}

def @func_7404() -> (Tensor[(13, 10, 12), uint64], Tensor[(7, 3, 15), float32]) {
  %495 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 3, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 3, 15), float32] */;
  %496 = erf(%495) /* ty=Tensor[(7, 3, 15), float32] */;
  %497 = cast(%496, dtype="float32") /* ty=Tensor[(7, 3, 15), float32] */;
  %498 = @func_5023() /* ty=Tensor[(13, 10, 12), uint64] */;
  %499 = log10(%497) /* ty=Tensor[(7, 3, 15), float32] */;
  (%498, %499)
}

def @func_9491(%var_9489: Tensor[(12, 12, 9), float32]) -> (Tensor[(12, 12, 9), float32], Tensor[(13, 10, 12), float64]) {
  @func_9488(%var_9489) /* ty=(Tensor[(12, 12, 9), float32], Tensor[(13, 10, 12), float64]) */
}

def @func_9205() -> (Tensor[(13, 10, 12), bool],) {
  %502 = fn () -> (Tensor[(13, 10, 12), bool],) {
    %500 = @func_901() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) */;
    %501 = %500.0;
    (%501,)
  };
  %502() /* ty=(Tensor[(13, 10, 12), bool],) */
}

def @func_448() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %505 = fn () -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
    %503 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
    %504 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
    (%503, %504)
  };
  %505() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */
}

def @func_9245() -> (Tensor[(13, 10, 12), uint64],) {
  %507 = fn () -> (Tensor[(13, 10, 12), uint64],) {
    %506 = @func_6475() /* ty=Tensor[(13, 10, 12), uint64] */;
    (%506,)
  };
  %507() /* ty=(Tensor[(13, 10, 12), uint64],) */
}

def @func_6011() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64]) {
  %508 = @func_1385() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %509 = @func_3944() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %510 = %508.0;
  %511 = %509.0;
  (%510, %511)
}

def @func_370() -> Tensor[(13, 10, 12), uint32] {
  %512 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %513 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %514 = cast(%513, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %515 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%512, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_xor(%516, %517) /* ty=Tensor[(13, 10, 12), uint32] */
}

def @func_8369() -> (Tensor[(13, 10, 12), uint64],) {
  @func_8367() /* ty=(Tensor[(13, 10, 12), uint64],) */
}

def @func_9346() -> (Tensor[(13, 11, 9), int32],) {
  %518 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 11, 9), float32] */, dtype="float32") /* ty=Tensor[(13, 11, 9), float32] */;
  %519 = tan(%518) /* ty=Tensor[(13, 11, 9), float32] */;
  %520 = cast(%519, dtype="float64") /* ty=Tensor[(13, 11, 9), float64] */;
  %521 = cos(%520) /* ty=Tensor[(13, 11, 9), float64] */;
  %522 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 11, 9), float32] */, dtype="bool") /* ty=Tensor[(13, 11, 9), bool] */;
  %523 = shape_of(%521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%521, dtype="bool") /* ty=Tensor[(13, 11, 9), bool] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %526 = not_equal(%524, %525) /* ty=Tensor[(13, 11, 9), bool] */;
  %527 = cast(%526, dtype="float32") /* ty=Tensor[(13, 11, 9), float32] */;
  %528 = sinh(%527) /* ty=Tensor[(13, 11, 9), float32] */;
  %529 = cast(%521, dtype="int16") /* ty=Tensor[(13, 11, 9), int16] */;
  %530 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(13, 11, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 11, 9), float32] */, dtype="int16") /* ty=Tensor[(13, 11, 9), int16] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %533 = left_shift(%531, %532) /* ty=Tensor[(13, 11, 9), int16] */;
  %534 = cast(%533, dtype="int32") /* ty=Tensor[(13, 11, 9), int32] */;
  %535 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%528, dtype="int32") /* ty=Tensor[(13, 11, 9), int32] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %538 = bitwise_and(%536, %537) /* ty=Tensor[(13, 11, 9), int32] */;
  (%538,)
}

def @func_3898() -> Tensor[(13, 10, 12), uint32] {
  @func_3896() /* ty=Tensor[(13, 10, 12), uint32] */
}

def @func_9348() -> (Tensor[(13, 11, 9), int32],) {
  @func_9346() /* ty=(Tensor[(13, 11, 9), int32],) */
}

def @func_3946() -> (Tensor[(13, 10, 12), float64],) {
  @func_3944() /* ty=(Tensor[(13, 10, 12), float64],) */
}

def @func_9907() -> Tensor[(13, 10, 12), bool] {
  @func_5597() /* ty=Tensor[(13, 10, 12), bool] */
}

def @func_3888() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
  @func_3886() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) */
}

def @func_10749() -> (Tensor[(13, 10, 12), uint64],) {
  %540 = fn () -> (Tensor[(13, 10, 12), uint64],) {
    %539 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
    (%539,)
  };
  %540() /* ty=(Tensor[(13, 10, 12), uint64],) */
}

def @func_4756() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16]) {
  %541 = @func_1355() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64]) */;
  %542 = @func_2952() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %543 = @func_538() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32], Tensor[(13, 10, 12), uint32]) */;
  %544 = %541.0;
  %545 = %542.1;
  %546 = %543.1;
  (%544, %545, %546)
}

def @func_10541() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %550 = fn () -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
    %547 = @func_3144() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %548 = %547.1;
    %549 = @func_5023() /* ty=Tensor[(13, 10, 12), uint64] */;
    (%548, %549)
  };
  %550() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */
}

def @func_10187(%var_10185: Tensor[(5, 1), uint64]) -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), bool], Tensor[(2496), int32], Tensor[(2496), int32], Tensor[(5, 1), uint64], Tensor[(720), uint64]) {
  @func_10184(%var_10185) /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), bool], Tensor[(2496), int32], Tensor[(2496), int32], Tensor[(5, 1), uint64], Tensor[(720), uint64]) */
}

def @func_11241() -> (Tensor[(13, 10, 12), int64],) {
  @func_11239() /* ty=(Tensor[(13, 10, 12), int64],) */
}

def @func_8213() -> Tensor[(13, 10, 12), uint64] {
  @func_8211() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_1512(%var_1511: Tensor[(3, 6, 14), float64]) -> (Tensor[(3, 6, 14), float64],) {
  %553 = fn (%var_1493: Tensor[(3, 6, 14), float64]) -> (Tensor[(3, 6, 14), float64],) {
    %551 = cast(%var_1493, dtype="float64") /* ty=Tensor[(3, 6, 14), float64] */;
    %552 = log10(%551) /* ty=Tensor[(3, 6, 14), float64] */;
    (%552,)
  };
  %553(%var_1511) /* ty=(Tensor[(3, 6, 14), float64],) */
}

def @func_10184(%var_10163: Tensor[(5, 1), uint64]) -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), bool], Tensor[(2496), int32], Tensor[(2496), int32], Tensor[(5, 1), uint64], Tensor[(720), uint64]) {
  %554 = @func_2013() /* ty=Tensor[(13, 10, 12), bool] */;
  %555 = cast(%554, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %556 = cast(%554, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %557 = cast(meta[relay.Constant][18] /* ty=Tensor[(2496), int32] */, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %558 = reshape(%555, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint64] */;
  %559 = reshape(%556, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint64] */;
  %560 = reshape(%557, newshape=[2, 1248]) /* ty=Tensor[(2, 1248), int32] */;
  %561 = @func_3390(%558, %559, %560) /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint16], Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(2, 1248), int32], Tensor[(8, 4, 11), uint16], Tensor[(352), float32], Tensor[(13, 10, 12), float64]) */;
  %562 = cast(%var_10163, dtype="uint64") /* ty=Tensor[(5, 1), uint64] */;
  %563 = cast(meta[relay.Constant][19] /* ty=Tensor[(720), uint64] */, dtype="uint64") /* ty=Tensor[(720), uint64] */;
  %564 = cast(meta[relay.Constant][18] /* ty=Tensor[(2496), int32] */, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %565 = reshape(%562, newshape=[1, 1, 5]) /* ty=Tensor[(1, 1, 5), uint64] */;
  %566 = reshape(%563, newshape=[9, 16, 5]) /* ty=Tensor[(9, 16, 5), uint64] */;
  %567 = reshape(%564, newshape=[2496]) /* ty=Tensor[(2496), int32] */;
  %568 = @func_5136(%565, %566, %567) /* ty=(Tensor[(9, 16, 5), uint64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(13, 10, 12), float64]) */;
  %569 = %561.0;
  %570 = %568.2;
  (%554, %569, meta[relay.Constant][18] /* ty=Tensor[(2496), int32] */, %570, %var_10163, meta[relay.Constant][19] /* ty=Tensor[(720), uint64] */)
}

def @func_753() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) {
  %585 = fn () -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) {
    %571 = @func_731() /* ty=Tensor[(13, 10, 12), int64] */;
    %572 = @func_370() /* ty=Tensor[(13, 10, 12), uint32] */;
    %573 = cast(%572, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
    %574 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
    %575 = cast(%571, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
    %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %577 = cast(%571, dtype="float32") /* ty=Tensor[(13, 10, 12), float32] */;
    %578 = sqrt(%577) /* ty=Tensor[(13, 10, 12), float32] */;
    %579 = cast(%571, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
    %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
    %581 = cast(%578, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
    %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %583 = divide(%575, %576) /* ty=Tensor[(13, 10, 12), float64] */;
    %584 = power(%581, %582) /* ty=Tensor[(13, 10, 12), float64] */;
    (%583, %584)
  };
  %585() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */
}

def @func_6409() -> Tensor[(13, 10, 12), uint64] {
  %587 = fn () -> Tensor[(13, 10, 12), uint64] {
    %586 = @func_2952() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %586.1
  };
  %587() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_11239() -> (Tensor[(13, 10, 12), int64],) {
  %588 = @func_9450() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint32]) */;
  %589 = %588.1;
  (%589,)
}

def @func_2284() -> Tensor[(13, 10, 12), uint64] {
  %591 = fn () -> Tensor[(13, 10, 12), uint64] {
    %590 = @func_1797() /* ty=(Tensor[(13, 10, 12), uint64],) */;
    %590.0
  };
  %591() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_1829(%var_1824: Tensor[(16, 2, 7), int16]) -> (Tensor[(16, 2, 7), int16],) {
  %592 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 2, 7), int16] */, dtype="int16") /* ty=Tensor[(16, 2, 7), int16] */;
  %593 = shape_of(%var_1824, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%var_1824, dtype="int16") /* ty=Tensor[(16, 2, 7), int16] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %596 = subtract(%594, %595) /* ty=Tensor[(16, 2, 7), int16] */;
  (%596,)
}

def @func_7568() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), int64], Tensor[(3, 6, 14), bool], Tensor[(13, 10, 12), bool]) {
  @func_7566() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), int64], Tensor[(3, 6, 14), bool], Tensor[(13, 10, 12), bool]) */
}

def @func_2953() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %600 = fn () -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
    %597 = @func_1797() /* ty=(Tensor[(13, 10, 12), uint64],) */;
    %598 = %597.0;
    %599 = @func_1682() /* ty=Tensor[(13, 10, 12), uint64] */;
    (%598, %599)
  };
  %600() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */
}

def @func_2895() -> Tensor[(13, 10, 12), float64] {
  @func_2893() /* ty=Tensor[(13, 10, 12), float64] */
}

def @func_8367() -> (Tensor[(13, 10, 12), uint64],) {
  %601 = @func_6408() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%601,)
}

def @func_5988(%var_5960: Tensor[(11, 8, 3), uint8]) -> (Tensor[(11, 8, 3), float64], Tensor[(13, 10, 12), uint32]) {
  %602 = cast(%var_5960, dtype="bool") /* ty=Tensor[(11, 8, 3), bool] */;
  %603 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(11, 8, 3), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 8, 3), uint8] */, dtype="bool") /* ty=Tensor[(11, 8, 3), bool] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %606 = greater_equal(%604, %605) /* ty=Tensor[(11, 8, 3), bool] */;
  %607 = cast(%606, dtype="float64") /* ty=Tensor[(11, 8, 3), float64] */;
  %608 = @func_3539() /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64]) */;
  %609 = log10(%607) /* ty=Tensor[(11, 8, 3), float64] */;
  %610 = %608.1;
  (%609, %610)
}

def @func_657() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %614 = fn () -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
    %611 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %612 = %611.1;
    %613 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
    (%612, %613)
  };
  %614() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */
}

def @func_4717() -> (Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %622 = fn () -> (Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
    %615 = @func_1054() /* ty=(Tensor[(13, 10, 12), int64],) */;
    %616 = @func_3144() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %617 = @func_3144() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %618 = %615.0;
    %619 = %616.1;
    %620 = %617.1;
    %621 = @func_1682() /* ty=Tensor[(13, 10, 12), uint64] */;
    (%618, %619, %620, %621)
  };
  %622() /* ty=(Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */
}

def @func_9872(%var_9794: Tensor[(6, 7, 5), float32]) -> (Tensor[(6, 7, 5), float32], Tensor[(13, 10, 12), uint64], Tensor[(6, 6, 12), int8], Tensor[(432), float32], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
  %623 = cast(%var_9794, dtype="float32") /* ty=Tensor[(6, 7, 5), float32] */;
  %624 = @func_7710() /* ty=(Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), bool], Tensor[(176, 2), int64], int64, Tensor[(16, 2, 7), int16], Tensor[(224), int16], Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64]) */;
  %625 = cast(meta[relay.Constant][22] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %626 = reshape(%625, newshape=[6, 6, 12]) /* ty=Tensor[(6, 6, 12), float32] */;
  %627 = @func_8011(%626) /* ty=(Tensor[(6, 6, 12), int8],) */;
  %628 = @func_2488() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %629 = @func_3144() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %630 = sinh(%623) /* ty=Tensor[(6, 7, 5), float32] */;
  %631 = %624.7;
  %632 = %627.0;
  %633 = %628.0;
  %634 = %629.1;
  (%630, %631, %632, meta[relay.Constant][22] /* ty=Tensor[(432), float32] */, %633, %634)
}

def @func_6115(%var_6113: int16, %var_6114: Tensor[(6, 7, 2), int16]) -> (Tensor[(6, 7, 2), int16],) {
  @func_6111(%var_6113, %var_6114) /* ty=(Tensor[(6, 7, 2), int16],) */
}

def @func_10317() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
  %635 = @func_1486() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %636 = %635.0;
  %637 = @func_979() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%636, %637)
}

def @func_5559(%var_5558: Tensor[(13, 10, 12), uint32]) -> Tensor[(13, 10, 12), float32] {
  %644 = fn (%var_5546: Tensor[(13, 10, 12), uint32]) -> Tensor[(13, 10, 12), float32] {
    %638 = @func_1412() /* ty=(Tensor[(13, 10, 12), uint32],) */;
    %639 = %638.0;
    %640 = cast(%var_5546, dtype="float32") /* ty=Tensor[(13, 10, 12), float32] */;
    %641 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
    %642 = cast(%639, dtype="float32") /* ty=Tensor[(13, 10, 12), float32] */;
    %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%642, %643) /* ty=Tensor[(13, 10, 12), float32] */
  };
  %644(%var_5558) /* ty=Tensor[(13, 10, 12), float32] */
}

def @func_8013(%var_8012: Tensor[(6, 6, 12), float32]) -> (Tensor[(6, 6, 12), int8],) {
  %652 = fn (%var_7994: Tensor[(6, 6, 12), float32]) -> (Tensor[(6, 6, 12), int8],) {
    %645 = cast(%var_7994, dtype="float32") /* ty=Tensor[(6, 6, 12), float32] */;
    %646 = atanh(%645) /* ty=Tensor[(6, 6, 12), float32] */;
    %647 = cast(%var_7994, dtype="int8") /* ty=Tensor[(6, 6, 12), int8] */;
    %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
    %649 = cast(%646, dtype="int8") /* ty=Tensor[(6, 6, 12), int8] */;
    %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %651 = bitwise_and(%649, %650) /* ty=Tensor[(6, 6, 12), int8] */;
    (%651,)
  };
  %652(%var_8012) /* ty=(Tensor[(6, 6, 12), int8],) */
}

def @func_2184(%var_2182: Tensor[(1, 352), float32]) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool], Tensor[(8, 4, 11), uint16], Tensor[(1, 352), float32], Tensor[(2496), int32]) {
  @func_2181(%var_2182) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool], Tensor[(8, 4, 11), uint16], Tensor[(1, 352), float32], Tensor[(2496), int32]) */
}

def @func_1768(%var_1766: Tensor[(10, 1, 6), float64], %var_1767: Tensor[(10, 15, 6), float64]) -> (Tensor[(10, 1, 6), float64], Tensor[(10, 15, 6), uint8]) {
  %658 = fn (%var_1743: Tensor[(10, 1, 6), float64], %var_1750: Tensor[(10, 15, 6), float64]) -> (Tensor[(10, 1, 6), float64], Tensor[(10, 15, 6), uint8]) {
    %653 = cast(%var_1743, dtype="float64") /* ty=Tensor[(10, 1, 6), float64] */;
    %654 = cast(%var_1743, dtype="uint8") /* ty=Tensor[(10, 1, 6), uint8] */;
    %655 = cast(%var_1750, dtype="uint8") /* ty=Tensor[(10, 15, 6), uint8] */;
    %656 = acosh(%653) /* ty=Tensor[(10, 1, 6), float64] */;
    %657 = bitwise_xor(%654, %655) /* ty=Tensor[(10, 15, 6), uint8] */;
    (%656, %657)
  };
  %658(%var_1766, %var_1767) /* ty=(Tensor[(10, 1, 6), float64], Tensor[(10, 15, 6), uint8]) */
}

def @func_628(%var_626: Tensor[(2496), int32]) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), int64], Tensor[(352), float32], Tensor[(2496), int32]) {
  @func_625(%var_626) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), int64], Tensor[(352), float32], Tensor[(2496), int32]) */
}

def @func_5597() -> Tensor[(13, 10, 12), bool] {
  %659 = @func_4051() /* ty=(Tensor[(13, 10, 12), bool],) */;
  %659.0
}

def @func_7406() -> (Tensor[(13, 10, 12), uint64], Tensor[(7, 3, 15), float32]) {
  @func_7404() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(7, 3, 15), float32]) */
}

def @func_3603() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %663 = fn () -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
    %660 = @func_656() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %661 = @func_1682() /* ty=Tensor[(13, 10, 12), uint64] */;
    %662 = %660.0;
    (%661, %662)
  };
  %663() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */
}

def @func_6765() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64]) {
  %664 = @func_1355() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64]) */;
  %665 = @func_3144() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %666 = %664.0;
  %667 = %665.1;
  (%666, %667)
}

def @func_7372() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint32]) {
  %668 = @func_5473() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) */;
  %669 = %668.0;
  %670 = @func_3896() /* ty=Tensor[(13, 10, 12), uint32] */;
  (%669, %670)
}

def @func_2441() -> (Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64]) {
  @func_2439() /* ty=(Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64]) */
}

def @func_2868() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) {
  @func_2866() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */
}

def @func_1356() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64]) {
  %679 = fn () -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64]) {
    %671 = @func_901() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) */;
    %672 = @func_752() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
    %673 = %672.0;
    %674 = cast(%673, dtype="float32") /* ty=Tensor[(13, 10, 12), float32] */;
    %675 = exp(%674) /* ty=Tensor[(13, 10, 12), float32] */;
    %676 = cast(%675, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
    %677 = %671.0;
    %678 = log(%676) /* ty=Tensor[(13, 10, 12), float64] */;
    (%677, %678)
  };
  %679() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64]) */
}

def @func_625(%var_607: Tensor[(2496), int32]) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), int64], Tensor[(352), float32], Tensor[(2496), int32]) {
  %680 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %681 = cast(meta[relay.Constant][23] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %682 = cast(meta[relay.Constant][23] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %683 = cast(%var_607, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %684 = reshape(%681, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), float32] */;
  %685 = reshape(%682, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), float32] */;
  %686 = reshape(%683, newshape=[2496]) /* ty=Tensor[(2496), int32] */;
  %687 = @func_171(%684, %685, %686) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(8, 4, 11), uint16], Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), int64]) */;
  %688 = %680.0;
  %689 = %687.0;
  (%688, %689, meta[relay.Constant][23] /* ty=Tensor[(352), float32] */, %var_607)
}

def @func_2490() -> (Tensor[(13, 10, 12), float64],) {
  @func_2488() /* ty=(Tensor[(13, 10, 12), float64],) */
}

def @func_372() -> Tensor[(13, 10, 12), uint32] {
  @func_370() /* ty=Tensor[(13, 10, 12), uint32] */
}

def @func_1045(%var_1030: Tensor[(11, 9, 11), float64]) -> Tensor[(11, 9, 11), float32] {
  %690 = cast(%var_1030, dtype="float64") /* ty=Tensor[(11, 9, 11), float64] */;
  %691 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(11, 9, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 9, 11), float64] */, dtype="float64") /* ty=Tensor[(11, 9, 11), float64] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %694 = power(%692, %693) /* ty=Tensor[(11, 9, 11), float64] */;
  %695 = cast(%694, dtype="float32") /* ty=Tensor[(11, 9, 11), float32] */;
  exp(%695) /* ty=Tensor[(11, 9, 11), float32] */
}

def @func_2866() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) {
  %696 = @func_538() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32], Tensor[(13, 10, 12), uint32]) */;
  %697 = %696.1;
  %698 = cast(%697, dtype="float32") /* ty=Tensor[(13, 16, 12), float32] */;
  %699 = log2(%698) /* ty=Tensor[(13, 16, 12), float32] */;
  %700 = cast(%699, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
  %701 = @func_2714() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64]) */;
  %702 = @func_2714() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64]) */;
  %703 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %704 = asinh(%700) /* ty=Tensor[(13, 16, 12), float64] */;
  %705 = %701.0;
  %706 = %702.0;
  (%703, %704, %705, %706)
}

def @func_8268() -> (Tensor[(13, 10, 12), float64],) {
  %707 = @func_3944() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %708 = %707.0;
  (%708,)
}

def @func_9042() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint32]) {
  %709 = @func_6637() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
  %710 = @func_5597() /* ty=Tensor[(13, 10, 12), bool] */;
  %711 = %709.1;
  (%710, %711)
}

def @func_4249() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(2496), int32]) {
  %718 = fn () -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(2496), int32]) {
    %712 = @func_656() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %713 = cast(meta[relay.Constant][25] /* ty=Tensor[(2496), int32] */, dtype="int32") /* ty=Tensor[(2496), int32] */;
    %714 = reshape(%713, newshape=[2496]) /* ty=Tensor[(2496), int32] */;
    %715 = @func_4011(%714) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32]) */;
    %716 = %712.1;
    %717 = %715.0;
    (%716, %717, meta[relay.Constant][25] /* ty=Tensor[(2496), int32] */)
  };
  %718() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(2496), int32]) */
}

def @func_7113() -> Tensor[(13, 10, 12), uint64] {
  %720 = fn () -> Tensor[(13, 10, 12), uint64] {
    %719 = @func_1797() /* ty=(Tensor[(13, 10, 12), uint64],) */;
    %719.0
  };
  %720() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_5140(%var_5137: Tensor[(1, 1, 5), uint64], %var_5138: Tensor[(9, 16, 5), uint64], %var_5139: Tensor[(2496), int32]) -> (Tensor[(9, 16, 5), uint64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(13, 10, 12), float64]) {
  %730 = fn (%var_5124: Tensor[(1, 1, 5), uint64], %var_5125: Tensor[(9, 16, 5), uint64], %var_5130: Tensor[(2496), int32]) -> (Tensor[(9, 16, 5), uint64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(13, 10, 12), float64]) {
    %721 = cast(%var_5124, dtype="uint64") /* ty=Tensor[(1, 1, 5), uint64] */;
    %722 = cast(%var_5125, dtype="uint64") /* ty=Tensor[(9, 16, 5), uint64] */;
    %723 = cast(%var_5130, dtype="int32") /* ty=Tensor[(2496), int32] */;
    %724 = reshape(%723, newshape=[2496]) /* ty=Tensor[(2496), int32] */;
    %725 = @func_4542(%724) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), int64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32]) */;
    %726 = @func_3944() /* ty=(Tensor[(13, 10, 12), float64],) */;
    %727 = multiply(%721, %722) /* ty=Tensor[(9, 16, 5), uint64] */;
    %728 = %725.2;
    %729 = %726.0;
    (%727, %728, %var_5130, %729)
  };
  %730(%var_5137, %var_5138, %var_5139) /* ty=(Tensor[(9, 16, 5), uint64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(13, 10, 12), float64]) */
}

def @func_6520() -> (Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64]) {
  %734 = fn () -> (Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64]) {
    %731 = @func_3547() /* ty=(Tensor[(13, 10, 12), int64],) */;
    %732 = %731.0;
    %733 = @func_2893() /* ty=Tensor[(13, 10, 12), float64] */;
    (%732, %733)
  };
  %734() /* ty=(Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64]) */
}

def @func_8056() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %737 = fn () -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
    %735 = @func_7112() /* ty=Tensor[(13, 10, 12), uint64] */;
    %736 = @func_1682() /* ty=Tensor[(13, 10, 12), uint64] */;
    (%735, %736)
  };
  %737() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */
}

def @func_8138(%var_8137: bool) -> (Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), uint32], bool) {
  %743 = fn (%var_8115: bool) -> (Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), uint32], bool) {
    %738 = cast(%var_8115, dtype="bool") /* ty=bool */;
    %739 = reshape(%738, newshape=[]) /* ty=bool */;
    %740 = @func_3283(%739) /* ty=(Tensor[(4, 7, 3), bool], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), uint32]) */;
    %741 = @func_7112() /* ty=Tensor[(13, 10, 12), uint64] */;
    %742 = %740.2;
    (%741, %742, %var_8115)
  };
  %743(%var_8137) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), uint32], bool) */
}

def @func_9044() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint32]) {
  @func_9042() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint32]) */
}

def @func_9979(%var_9977: Tensor[(5, 12, 9), float32]) -> (Tensor[(13, 10, 12), float64], Tensor[(5, 12, 9), bool]) {
  @func_9976(%var_9977) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(5, 12, 9), bool]) */
}

def @func_592(%var_590: Tensor[(13, 10, 12), uint64], %var_591: Tensor[(13, 10, 12), uint64]) -> (Tensor[(13, 10, 12), uint32], Tensor[(2496), int32], Tensor[(13, 10, 12), bool], Tensor[(13, 16, 12), int64]) {
  @func_588(%var_590, %var_591) /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(2496), int32], Tensor[(13, 10, 12), bool], Tensor[(13, 16, 12), int64]) */
}

def @func_6245() -> Tensor[(13, 10, 12), uint64] {
  %744 = fn () -> Tensor[(13, 10, 12), uint64] {
    @func_2283() /* ty=Tensor[(13, 10, 12), uint64] */
  };
  %744() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_9008() -> (Tensor[(13, 10, 12), bool],) {
  @func_9006() /* ty=(Tensor[(13, 10, 12), bool],) */
}

def @func_8848() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), bool]) {
  @func_8846() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), bool]) */
}

def @func_10956(%var_10955: Tensor[(2496), float32]) -> (Tensor[(2496), float32], Tensor[(13, 10, 12), bool], Tensor[(2496), bool], Tensor[(13, 10, 12), bool]) {
  %758 = fn (%var_10947: Tensor[(2496), float32]) -> (Tensor[(2496), float32], Tensor[(13, 10, 12), bool], Tensor[(2496), bool], Tensor[(13, 10, 12), bool]) {
    %745 = @func_10473() /* ty=Tensor[(2496), float32] */;
    %746 = cast(%745, dtype="float32") /* ty=Tensor[(2496), float32] */;
    %747 = sqrt(%746) /* ty=Tensor[(2496), float32] */;
    %748 = cast(%747, dtype="float32") /* ty=Tensor[(2496), float32] */;
    %749 = cast(%var_10947, dtype="bool") /* ty=Tensor[(2496), bool] */;
    %750 = shape_of(%745, dtype="int32") /* ty=Tensor[(1), int32] */;
    %751 = cast(%745, dtype="bool") /* ty=Tensor[(2496), bool] */;
    %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?), bool] */;
    %753 = @func_1355() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64]) */;
    %754 = atanh(%748) /* ty=Tensor[(2496), float32] */;
    %755 = @func_10829() /* ty=Tensor[(13, 10, 12), bool] */;
    %756 = greater(%751, %752) /* ty=Tensor[(2496), bool] */;
    %757 = %753.0;
    (%754, %755, %756, %757)
  };
  %758(%var_10955) /* ty=(Tensor[(2496), float32], Tensor[(13, 10, 12), bool], Tensor[(2496), bool], Tensor[(13, 10, 12), bool]) */
}

def @func_2715() -> (Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64]) {
  %765 = fn () -> (Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64]) {
    %759 = @func_752() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
    %760 = cast(meta[relay.Constant][26] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
    %761 = reshape(%760, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), float64] */;
    %762 = @func_1510(%761) /* ty=(Tensor[(3, 6, 14), float64],) */;
    %763 = %759.1;
    %764 = %762.0;
    (%763, %764, meta[relay.Constant][26] /* ty=Tensor[(252), float64] */)
  };
  %765() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64]) */
}

def @func_4095() -> (Tensor[(13, 10, 12), float64],) {
  %768 = fn () -> (Tensor[(13, 10, 12), float64],) {
    %766 = @func_2256() /* ty=(Tensor[(13, 10, 12), float64],) */;
    %767 = %766.0;
    (%767,)
  };
  %768() /* ty=(Tensor[(13, 10, 12), float64],) */
}

def @func_8694() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) {
  %772 = fn () -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) {
    %769 = @func_8528() /* ty=(Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint32]) */;
    %770 = @func_4124() /* ty=Tensor[(13, 10, 12), uint64] */;
    %771 = %769.1;
    (%770, %771)
  };
  %772() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */
}

def @func_10242() -> (Tensor[(13, 10, 12), uint64],) {
  %774 = fn () -> (Tensor[(13, 10, 12), uint64],) {
    %773 = @func_10074() /* ty=Tensor[(13, 10, 12), uint64] */;
    (%773,)
  };
  %774() /* ty=(Tensor[(13, 10, 12), uint64],) */
}

def @func_2181(%var_2171: Tensor[(1, 352), float32]) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool], Tensor[(8, 4, 11), uint16], Tensor[(1, 352), float32], Tensor[(2496), int32]) {
  %775 = @func_1797() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %776 = @func_901() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) */;
  %777 = cast(%var_2171, dtype="float32") /* ty=Tensor[(1, 352), float32] */;
  %778 = cast(%var_2171, dtype="float32") /* ty=Tensor[(1, 352), float32] */;
  %779 = cast(meta[relay.Constant][27] /* ty=Tensor[(2496), int32] */, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %780 = reshape(%777, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), float32] */;
  %781 = reshape(%778, newshape=[8, 4, 11]) /* ty=Tensor[(8, 4, 11), float32] */;
  %782 = reshape(%779, newshape=[2496]) /* ty=Tensor[(2496), int32] */;
  %783 = @func_171(%780, %781, %782) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(8, 4, 11), uint16], Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), int64]) */;
  %784 = %775.0;
  %785 = %776.2;
  %786 = %783.2;
  (%784, %785, %786, %var_2171, meta[relay.Constant][27] /* ty=Tensor[(2496), int32] */)
}

def @func_2439() -> (Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64]) {
  %787 = @func_1054() /* ty=(Tensor[(13, 10, 12), int64],) */;
  %788 = @func_2349() /* ty=Tensor[(13, 10, 12), uint64] */;
  %789 = cast(%788, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %790 = %787.0;
  %791 = cos(%789) /* ty=Tensor[(13, 10, 12), float64] */;
  (%790, %791)
}

def @func_1387() -> (Tensor[(13, 10, 12), uint64],) {
  @func_1385() /* ty=(Tensor[(13, 10, 12), uint64],) */
}

def @func_588(%var_558: Tensor[(13, 10, 12), uint64], %var_580: Tensor[(13, 10, 12), uint64]) -> (Tensor[(13, 10, 12), uint32], Tensor[(2496), int32], Tensor[(13, 10, 12), bool], Tensor[(13, 16, 12), int64]) {
  %792 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %793 = %792.1;
  %794 = cast(%var_558, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %795 = shape_of(%793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %796 = cast(%793, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %798 = @func_511() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */;
  %799 = cast(%var_580, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %800 = shape_of(%var_558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%var_558, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %803 = %798.2;
  %804 = cast(%803, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %805 = reshape(%804, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), int32] */;
  %806 = @func_63(%805) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) */;
  %807 = left_shift(%796, %797) /* ty=Tensor[(13, 10, 12), uint32] */;
  %808 = less(%801, %802) /* ty=Tensor[(13, 10, 12), bool] */;
  %809 = %806.0;
  (%807, %803, %808, %809)
}

def @func_1585() -> Tensor[(13, 10, 12), float64] {
  %811 = fn () -> Tensor[(13, 10, 12), float64] {
    %810 = @func_1027() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
    %810.0
  };
  %811() /* ty=Tensor[(13, 10, 12), float64] */
}

def @func_540() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32], Tensor[(13, 10, 12), uint32]) {
  @func_538() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32], Tensor[(13, 10, 12), uint32]) */
}

def @func_10830() -> Tensor[(13, 10, 12), bool] {
  %812 = fn () -> Tensor[(13, 10, 12), bool] {
    @func_5597() /* ty=Tensor[(13, 10, 12), bool] */
  };
  %812() /* ty=Tensor[(13, 10, 12), bool] */
}

def @func_9614() -> (Tensor[(13, 10, 12), uint64],) {
  %815 = fn () -> (Tensor[(13, 10, 12), uint64],) {
    %813 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %814 = %813.1;
    (%814,)
  };
  %815() /* ty=(Tensor[(13, 10, 12), uint64],) */
}

def @func_9742() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
  %823 = fn () -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
    %816 = @func_511() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */;
    %817 = @func_3602() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %818 = @func_656() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %819 = %816.0;
    %820 = %817.1;
    %821 = @func_5931() /* ty=Tensor[(13, 10, 12), float64] */;
    %822 = %818.1;
    (%819, %820, %821, %822)
  };
  %823() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) */
}

def @func_981() -> Tensor[(13, 10, 12), uint64] {
  @func_979() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_4011(%var_4006: Tensor[(2496), int32]) -> (Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(2496), int32]) {
  %824 = @func_2714() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64]) */;
  %825 = cast(%var_4006, dtype="int32") /* ty=Tensor[(2496), int32] */;
  %826 = reshape(%825, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), int32] */;
  %827 = @func_63(%826) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) */;
  %828 = %824.0;
  %829 = %827.0;
  (%828, %829, %var_4006)
}

def @func_3390(%var_3335: Tensor[(13, 10, 12), uint64], %var_3350: Tensor[(13, 10, 12), uint64], %var_3370: Tensor[(2, 1248), int32]) -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint16], Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(2, 1248), int32], Tensor[(8, 4, 11), uint16], Tensor[(352), float32], Tensor[(13, 10, 12), float64]) {
  %830 = @func_2349() /* ty=Tensor[(13, 10, 12), uint64] */;
  %831 = cast(%var_3335, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %832 = shape_of(%830, dtype="int32") /* ty=Tensor[(3), int32] */;
  %833 = cast(%830, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %835 = cast(%var_3350, dtype="uint16") /* ty=Tensor[(13, 10, 12), uint16] */;
  %836 = shape_of(%var_3335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(%var_3335, dtype="uint16") /* ty=Tensor[(13, 10, 12), uint16] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %839 = @func_1486() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %840 = cast(%var_3370, dtype="int32") /* ty=Tensor[(2, 1248), int32] */;
  %841 = reshape(%840, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), int32] */;
  %842 = @func_63(%841) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) */;
  %843 = cast(meta[relay.Constant][28] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %844 = reshape(%843, newshape=[1, 352]) /* ty=Tensor[(1, 352), float32] */;
  %845 = @func_2181(%844) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool], Tensor[(8, 4, 11), uint16], Tensor[(1, 352), float32], Tensor[(2496), int32]) */;
  %846 = cast(%var_3350, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %847 = shape_of(%var_3335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %848 = cast(%var_3335, dtype="uint64") /* ty=Tensor[(13, 10, 12), uint64] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %850 = maximum(%848, %849) /* ty=Tensor[(13, 10, 12), uint64] */;
  %851 = cast(%850, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %852 = shape_of(%var_3335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %853 = cast(%var_3335, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %855 = equal(%833, %834) /* ty=Tensor[(13, 10, 12), bool] */;
  %856 = minimum(%837, %838) /* ty=Tensor[(13, 10, 12), uint16] */;
  %857 = %839.0;
  %858 = %842.0;
  %859 = %845.2;
  %860 = mod(%853, %854) /* ty=Tensor[(13, 10, 12), float64] */;
  (%855, %856, %857, %858, %var_3370, %859, meta[relay.Constant][28] /* ty=Tensor[(352), float32] */, %860)
}

def @func_7948() -> Tensor[(13, 10, 12), uint64] {
  %862 = fn () -> Tensor[(13, 10, 12), uint64] {
    %861 = @func_447() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %861.0
  };
  %862() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_2992() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool]) {
  %865 = fn () -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool]) {
    %863 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
    %864 = @func_1900() /* ty=Tensor[(13, 10, 12), bool] */;
    (%863, %864)
  };
  %865() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), bool]) */
}

def @func_8246() -> Tensor[(13, 10, 12), uint64] {
  @func_8244() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_8354() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) {
  %869 = fn () -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) {
    %866 = @func_3144() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %867 = %866.1;
    %868 = @func_370() /* ty=Tensor[(13, 10, 12), uint32] */;
    (%867, %868)
  };
  %869() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */
}

def @func_10232() -> Tensor[(13, 10, 12), uint64] {
  @func_10230() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_8737() -> Tensor[(13, 10, 12), uint64] {
  %870 = fn () -> Tensor[(13, 10, 12), uint64] {
    @func_2349() /* ty=Tensor[(13, 10, 12), uint64] */
  };
  %870() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_732() -> Tensor[(13, 10, 12), int64] {
  %881 = fn () -> Tensor[(13, 10, 12), int64] {
    %871 = @func_656() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %872 = %871.1;
    %873 = cast(%872, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
    %874 = log2(%873) /* ty=Tensor[(13, 10, 12), float64] */;
    %875 = @func_656() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %876 = %875.0;
    %877 = cast(%876, dtype="int64") /* ty=Tensor[(13, 10, 12), int64] */;
    %878 = shape_of(%874, dtype="int32") /* ty=Tensor[(3), int32] */;
    %879 = cast(%874, dtype="int64") /* ty=Tensor[(13, 10, 12), int64] */;
    %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    logical_xor(%879, %880) /* ty=Tensor[(13, 10, 12), int64] */
  };
  %881() /* ty=Tensor[(13, 10, 12), int64] */
}

def @func_7719() -> Tensor[(13, 10, 12), float64] {
  @func_7717() /* ty=Tensor[(13, 10, 12), float64] */
}

def @func_6111(%var_6104: int16, %var_6105: Tensor[(6, 7, 2), int16]) -> (Tensor[(6, 7, 2), int16],) {
  %882 = cast(%var_6104, dtype="int16") /* ty=int16 */;
  %883 = cast(%var_6105, dtype="int16") /* ty=Tensor[(6, 7, 2), int16] */;
  %884 = left_shift(%882, %883) /* ty=Tensor[(6, 7, 2), int16] */;
  (%884,)
}

def @func_6013() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64]) {
  @func_6011() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64]) */
}

def @func_7374() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint32]) {
  @func_7372() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint32]) */
}

def @func_10845() -> Tensor[(13, 10, 12), uint64] {
  @func_10843() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_7932(%var_7930: Tensor[(900), float64]) -> (Tensor[(13, 10, 12), uint64], Tensor[(9, 8, 9), bool], Tensor[(648), int16], int64, Tensor[(60), float64], Tensor[(900), float64]) {
  @func_7929(%var_7930) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(9, 8, 9), bool], Tensor[(648), int16], int64, Tensor[(60), float64], Tensor[(900), float64]) */
}

def @func_10843() -> Tensor[(13, 10, 12), uint64] {
  @func_5023() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_2318(%var_2317: Tensor[(13, 10, 12), uint64]) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) {
  %893 = fn (%var_2305: Tensor[(13, 10, 12), uint64]) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) {
    %885 = @func_1027() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */;
    %886 = @func_2283() /* ty=Tensor[(13, 10, 12), uint64] */;
    %887 = cast(%var_2305, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
    %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
    %889 = cast(%886, dtype="uint32") /* ty=Tensor[(13, 10, 12), uint32] */;
    %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %891 = %885.1;
    %892 = bitwise_or(%889, %890) /* ty=Tensor[(13, 10, 12), uint32] */;
    (%891, %892)
  };
  %893(%var_2317) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */
}

def @func_8462() -> Tensor[(3, 6, 14), float64] {
  %895 = fn () -> Tensor[(3, 6, 14), float64] {
    %894 = @func_2796() /* ty=(Tensor[(3, 6, 14), float64], Tensor[(3, 6, 14), float64]) */;
    %894.1
  };
  %895() /* ty=Tensor[(3, 6, 14), float64] */
}

def @func_10906() -> (Tensor[(13, 10, 12), uint64],) {
  %898 = fn () -> (Tensor[(13, 10, 12), uint64],) {
    %896 = @func_8367() /* ty=(Tensor[(13, 10, 12), uint64],) */;
    %897 = %896.0;
    (%897,)
  };
  %898() /* ty=(Tensor[(13, 10, 12), uint64],) */
}

def @func_5769() -> (Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), uint32]) {
  @func_5767() /* ty=(Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), uint32]) */
}

def @func_8191() -> Tensor[(13, 10, 12), uint32] {
  @func_3896() /* ty=Tensor[(13, 10, 12), uint32] */
}

def @func_1054() -> (Tensor[(13, 10, 12), int64],) {
  %899 = @func_731() /* ty=Tensor[(13, 10, 12), int64] */;
  (%899,)
}

def @func_2013() -> Tensor[(13, 10, 12), bool] {
  @func_1900() /* ty=Tensor[(13, 10, 12), bool] */
}

def @func_1385() -> (Tensor[(13, 10, 12), uint64],) {
  %900 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%900,)
}

def @func_6738(%var_6736: bool) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], bool, Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64]) {
  @func_6735(%var_6736) /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], bool, Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64]) */
}

def @func_4446(%var_4365: int64) -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32], int64, Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) {
  %901 = cast(%var_4365, dtype="int64") /* ty=int64 */;
  %902 = reshape(%901, newshape=[]) /* ty=int64 */;
  %903 = @func_1091(%902) /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64], Tensor[(11, 4, 8), bool], int64, Tensor[(176, 2), int64]) */;
  %904 = cast(%var_4365, dtype="int64") /* ty=int64 */;
  %905 = reshape(%904, newshape=[]) /* ty=int64 */;
  %906 = @func_1091(%905) /* ty=(Tensor[(13, 10, 12), uint32], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), float64], Tensor[(11, 4, 8), bool], int64, Tensor[(176, 2), int64]) */;
  %907 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %908 = cast(%907, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %909 = @func_319() /* ty=Tensor[(13, 10, 12), uint64] */;
  %910 = %903.0;
  %911 = %906.2;
  %912 = rsqrt(%908) /* ty=Tensor[(13, 10, 12), float64] */;
  (%909, %910, %var_4365, %911, %912)
}

def @func_8947() -> (Tensor[(13, 10, 12), uint64],) {
  %915 = fn () -> (Tensor[(13, 10, 12), uint64],) {
    %913 = @func_1385() /* ty=(Tensor[(13, 10, 12), uint64],) */;
    %914 = %913.0;
    (%914,)
  };
  %915() /* ty=(Tensor[(13, 10, 12), uint64],) */
}

def @func_65(%var_64: Tensor[(13, 16, 12), int32]) -> (Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) {
  %938 = fn (%var_9: Tensor[(13, 16, 12), int32]) -> (Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) {
    %916 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 16, 12), int32] */, dtype="float32") /* ty=Tensor[(13, 16, 12), float32] */;
    %917 = erf(%916) /* ty=Tensor[(13, 16, 12), float32] */;
    %918 = cast(%var_9, dtype="int32") /* ty=Tensor[(13, 16, 12), int32] */;
    %919 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(13, 16, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %920 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 16, 12), int32] */, dtype="int32") /* ty=Tensor[(13, 16, 12), int32] */;
    %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %922 = multiply(%920, %921) /* ty=Tensor[(13, 16, 12), int32] */;
    %923 = cast(%922, dtype="int32") /* ty=Tensor[(13, 16, 12), int32] */;
    %924 = shape_of(%917, dtype="int32") /* ty=Tensor[(3), int32] */;
    %925 = cast(%917, dtype="int32") /* ty=Tensor[(13, 16, 12), int32] */;
    %926 = dyn.reshape(%923, %924, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %927 = right_shift(%925, %926) /* ty=Tensor[(13, 16, 12), int32] */;
    %928 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 16, 12), int32] */, dtype="int64") /* ty=Tensor[(13, 16, 12), int64] */;
    %929 = shape_of(%927, dtype="int32") /* ty=Tensor[(3), int32] */;
    %930 = cast(%927, dtype="int64") /* ty=Tensor[(13, 16, 12), int64] */;
    %931 = dyn.reshape(%928, %929, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %932 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 16, 12), int32] */, dtype="uint16") /* ty=Tensor[(13, 16, 12), uint16] */;
    %933 = shape_of(%917, dtype="int32") /* ty=Tensor[(3), int32] */;
    %934 = cast(%917, dtype="uint16") /* ty=Tensor[(13, 16, 12), uint16] */;
    %935 = dyn.reshape(%932, %933, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %936 = add(%930, %931) /* ty=Tensor[(13, 16, 12), int64] */;
    %937 = bitwise_xor(%934, %935) /* ty=Tensor[(13, 16, 12), uint16] */;
    (%936, %937)
  };
  %938(%var_64) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) */
}

def @func_3395(%var_3392: Tensor[(13, 10, 12), uint64], %var_3393: Tensor[(13, 10, 12), uint64], %var_3394: Tensor[(2, 1248), int32]) -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint16], Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(2, 1248), int32], Tensor[(8, 4, 11), uint16], Tensor[(352), float32], Tensor[(13, 10, 12), float64]) {
  @func_3390(%var_3392, %var_3393, %var_3394) /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint16], Tensor[(13, 10, 12), float64], Tensor[(13, 16, 12), int64], Tensor[(2, 1248), int32], Tensor[(8, 4, 11), uint16], Tensor[(352), float32], Tensor[(13, 10, 12), float64]) */
}

def @func_420(%var_418: int64, %var_419: Tensor[(11, 4, 8), int64]) -> (Tensor[(11, 4, 8), bool],) {
  %942 = fn (%var_410: int64, %var_411: Tensor[(11, 4, 8), int64]) -> (Tensor[(11, 4, 8), bool],) {
    %939 = cast(%var_410, dtype="bool") /* ty=bool */;
    %940 = cast(%var_411, dtype="bool") /* ty=Tensor[(11, 4, 8), bool] */;
    %941 = equal(%939, %940) /* ty=Tensor[(11, 4, 8), bool] */;
    (%941,)
  };
  %942(%var_418, %var_419) /* ty=(Tensor[(11, 4, 8), bool],) */
}

def @main(%var_11263: Tensor[(7, 12, 10), float32], %var_11292: Tensor[(1560), uint32]) -> (Tensor[(7, 12, 10), float64], Tensor[(13, 10, 12), float32], Tensor[(1560), uint32], Tensor[(7, 12, 10), int64]) {
  %943 = cast(%var_11263, dtype="float64") /* ty=Tensor[(7, 12, 10), float64] */;
  %944 = cast(%var_11292, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %945 = reshape(%944, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), uint32] */;
  %946 = cast(%var_11263, dtype="float32") /* ty=Tensor[(7, 12, 10), float32] */;
  %947 = atanh(%946) /* ty=Tensor[(7, 12, 10), float32] */;
  %948 = cast(%947, dtype="bool") /* ty=Tensor[(7, 12, 10), bool] */;
  %949 = shape_of(%var_11263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %950 = cast(%var_11263, dtype="bool") /* ty=Tensor[(7, 12, 10), bool] */;
  %951 = dyn.reshape(%948, %949, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %952 = logical_and(%950, %951) /* ty=Tensor[(7, 12, 10), bool] */;
  %953 = cast(%952, dtype="int64") /* ty=Tensor[(7, 12, 10), int64] */;
  %954 = shape_of(%947, dtype="int32") /* ty=Tensor[(3), int32] */;
  %955 = cast(%947, dtype="int64") /* ty=Tensor[(7, 12, 10), int64] */;
  %956 = dyn.reshape(%953, %954, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %957 = log10(%943) /* ty=Tensor[(7, 12, 10), float64] */;
  %958 = @func_5557(%945) /* ty=Tensor[(13, 10, 12), float32] */;
  %959 = left_shift(%955, %956) /* ty=Tensor[(7, 12, 10), int64] */;
  (%957, %958, %var_11292, %959)
}

def @func_5024() -> Tensor[(13, 10, 12), uint64] {
  %961 = fn () -> Tensor[(13, 10, 12), uint64] {
    %960 = @func_3602() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
    %960.0
  };
  %961() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_3474() -> Tensor[(13, 10, 12), float64] {
  %962 = @func_1486() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %962.0
}

def @func_5579() -> (Tensor[(13, 10, 12), float64],) {
  %963 = @func_2893() /* ty=Tensor[(13, 10, 12), float64] */;
  (%963,)
}

def @func_10076() -> Tensor[(13, 10, 12), uint64] {
  @func_10074() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_1056() -> (Tensor[(13, 10, 12), int64],) {
  @func_1054() /* ty=(Tensor[(13, 10, 12), int64],) */
}

def @func_4614() -> Tensor[(13, 10, 12), bool] {
  %964 = fn () -> Tensor[(13, 10, 12), bool] {
    @func_2013() /* ty=Tensor[(13, 10, 12), bool] */
  };
  %964() /* ty=Tensor[(13, 10, 12), bool] */
}

def @func_2893() -> Tensor[(13, 10, 12), float64] {
  @func_1584() /* ty=Tensor[(13, 10, 12), float64] */
}

def @func_9657(%var_9655: int16, %var_9656: Tensor[(84, 1), int16]) -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), int64], Tensor[(6, 7, 2), int16], int16, Tensor[(84, 1), int16]) {
  %973 = fn (%var_9645: int16, %var_9646: Tensor[(84, 1), int16]) -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), int64], Tensor[(6, 7, 2), int16], int16, Tensor[(84, 1), int16]) {
    %965 = cast(%var_9645, dtype="int16") /* ty=int16 */;
    %966 = cast(%var_9646, dtype="int16") /* ty=Tensor[(84, 1), int16] */;
    %967 = reshape(%965, newshape=[]) /* ty=int16 */;
    %968 = reshape(%966, newshape=[6, 7, 2]) /* ty=Tensor[(6, 7, 2), int16] */;
    %969 = @func_6111(%967, %968) /* ty=(Tensor[(6, 7, 2), int16],) */;
    %970 = @func_1900() /* ty=Tensor[(13, 10, 12), bool] */;
    %971 = @func_7024() /* ty=Tensor[(13, 10, 12), int64] */;
    %972 = %969.0;
    (%970, %971, %972, %var_9645, %var_9646)
  };
  %973(%var_9655, %var_9656) /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), int64], Tensor[(6, 7, 2), int16], int16, Tensor[(84, 1), int16]) */
}

def @func_3283(%var_3248: bool) -> (Tensor[(4, 7, 3), bool], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), uint32]) {
  %974 = cast(%var_3248, dtype="bool") /* ty=bool */;
  %975 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 7, 3), bool] */, dtype="bool") /* ty=Tensor[(4, 7, 3), bool] */;
  %976 = @func_2952() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */;
  %977 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 7, 3), bool] */, dtype="uint32") /* ty=Tensor[(4, 7, 3), uint32] */;
  %978 = cast(%var_3248, dtype="uint32") /* ty=uint32 */;
  %979 = logical_or(%974, %975) /* ty=Tensor[(4, 7, 3), bool] */;
  %980 = %976.0;
  %981 = subtract(%977, %978) /* ty=Tensor[(4, 7, 3), uint32] */;
  (%979, %980, %981)
}

def @func_6767() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64]) {
  @func_6765() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint64]) */
}

def @func_10370() -> (Tensor[(13, 10, 12), float32], Tensor[(3, 6, 14), float64]) {
  %982 = @func_5767() /* ty=(Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), uint32]) */;
  %983 = @func_8461() /* ty=Tensor[(3, 6, 14), float64] */;
  %984 = cast(%983, dtype="float32") /* ty=Tensor[(3, 6, 14), float32] */;
  %985 = acosh(%984) /* ty=Tensor[(3, 6, 14), float32] */;
  %986 = cast(%985, dtype="float64") /* ty=Tensor[(3, 6, 14), float64] */;
  %987 = %982.0;
  %988 = sin(%986) /* ty=Tensor[(3, 6, 14), float64] */;
  (%987, %988)
}

def @func_3568(%var_3566: Tensor[(13, 9, 6), int8], %var_3567: Tensor[(13, 9, 6), int8]) -> (Tensor[(13, 9, 6), int8],) {
  %994 = fn (%var_3557: Tensor[(13, 9, 6), int8], %var_3558: Tensor[(13, 9, 6), int8]) -> (Tensor[(13, 9, 6), int8],) {
    %989 = cast(%var_3558, dtype="int8") /* ty=Tensor[(13, 9, 6), int8] */;
    %990 = shape_of(%var_3557, dtype="int32") /* ty=Tensor[(3), int32] */;
    %991 = cast(%var_3557, dtype="int8") /* ty=Tensor[(13, 9, 6), int8] */;
    %992 = dyn.reshape(%989, %990, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %993 = bitwise_and(%991, %992) /* ty=Tensor[(13, 9, 6), int8] */;
    (%993,)
  };
  %994(%var_3566, %var_3567) /* ty=(Tensor[(13, 9, 6), int8],) */
}

def @func_903() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) {
  @func_901() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float32], Tensor[(13, 10, 12), bool]) */
}

def @func_8193() -> Tensor[(13, 10, 12), uint32] {
  @func_8191() /* ty=Tensor[(13, 10, 12), uint32] */
}

def @func_175(%var_172: Tensor[(8, 4, 11), float32], %var_173: Tensor[(8, 4, 11), float32], %var_174: Tensor[(2496), int32]) -> (Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(8, 4, 11), uint16], Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), int64]) {
  %1019 = fn (%var_143: Tensor[(8, 4, 11), float32], %var_144: Tensor[(8, 4, 11), float32], %var_150: Tensor[(2496), int32]) -> (Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(8, 4, 11), uint16], Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), int64]) {
    %995 = cast(%var_150, dtype="int32") /* ty=Tensor[(2496), int32] */;
    %996 = reshape(%995, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), int32] */;
    %997 = @func_63(%996) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) */;
    %998 = cast(%var_143, dtype="float32") /* ty=Tensor[(8, 4, 11), float32] */;
    %999 = log(%998) /* ty=Tensor[(8, 4, 11), float32] */;
    %1000 = cast(%var_144, dtype="bool") /* ty=Tensor[(8, 4, 11), bool] */;
    %1001 = shape_of(%var_143, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1002 = cast(%var_143, dtype="bool") /* ty=Tensor[(8, 4, 11), bool] */;
    %1003 = dyn.reshape(%1000, %1001, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1004 = equal(%1002, %1003) /* ty=Tensor[(8, 4, 11), bool] */;
    %1005 = cast(%1004, dtype="uint16") /* ty=Tensor[(8, 4, 11), uint16] */;
    %1006 = shape_of(%999, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1007 = cast(%999, dtype="uint16") /* ty=Tensor[(8, 4, 11), uint16] */;
    %1008 = dyn.reshape(%1005, %1006, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %1009 = cast(%var_150, dtype="int32") /* ty=Tensor[(2496), int32] */;
    %1010 = reshape(%1009, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), int32] */;
    %1011 = @func_63(%1010) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) */;
    %1012 = cast(%var_150, dtype="int32") /* ty=Tensor[(2496), int32] */;
    %1013 = reshape(%1012, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), int32] */;
    %1014 = @func_63(%1013) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), uint16]) */;
    %1015 = %997.0;
    %1016 = minimum(%1007, %1008) /* ty=Tensor[(8, 4, 11), uint16] */;
    %1017 = %1011.0;
    %1018 = %1014.0;
    (%1015, %var_150, %1016, %1017, %1018)
  };
  %1019(%var_172, %var_173, %var_174) /* ty=(Tensor[(13, 16, 12), int64], Tensor[(2496), int32], Tensor[(8, 4, 11), uint16], Tensor[(13, 16, 12), int64], Tensor[(13, 16, 12), int64]) */
}

def @func_9875(%var_9873: Tensor[(6, 7, 5), float32]) -> (Tensor[(6, 7, 5), float32], Tensor[(13, 10, 12), uint64], Tensor[(6, 6, 12), int8], Tensor[(432), float32], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
  @func_9872(%var_9873) /* ty=(Tensor[(6, 7, 5), float32], Tensor[(13, 10, 12), uint64], Tensor[(6, 6, 12), int8], Tensor[(432), float32], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) */
}

def @func_7024() -> Tensor[(13, 10, 12), int64] {
  @func_6071() /* ty=Tensor[(13, 10, 12), int64] */
}

def @func_8211() -> Tensor[(13, 10, 12), uint64] {
  @func_6408() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_5933() -> Tensor[(13, 10, 12), float64] {
  @func_5931() /* ty=Tensor[(13, 10, 12), float64] */
}

def @func_1063() -> Tensor[(13, 10, 12), uint64] {
  @func_1061() /* ty=Tensor[(13, 10, 12), uint64] */
}

def @func_6197() -> (Tensor[(13, 10, 12), float64], Tensor[(3, 6, 14), float64], Tensor[(252), float64], Tensor[(13, 10, 12), uint64], bool) {
  %1020 = @func_6011() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64]) */;
  %1021 = cast(meta[relay.Constant][31] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %1022 = reshape(%1021, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), float64] */;
  %1023 = @func_1510(%1022) /* ty=(Tensor[(3, 6, 14), float64],) */;
  %1024 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %1025 = reshape(%1024, newshape=[]) /* ty=bool */;
  %1026 = @func_5670(%1025) /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(4, 7, 3), float64], Tensor[(352), float32]) */;
  %1027 = %1020.1;
  %1028 = %1023.0;
  %1029 = %1026.1;
  (%1027, %1028, meta[relay.Constant][31] /* ty=Tensor[(252), float64] */, %1029, True /* ty=bool */)
}

def @func_10474() -> Tensor[(2496), float32] {
  %1033 = fn () -> Tensor[(2496), float32] {
    %1030 = @func_538() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32], Tensor[(13, 10, 12), uint32]) */;
    %1031 = %1030.2;
    %1032 = cast(%1031, dtype="float32") /* ty=Tensor[(2496), float32] */;
    erf(%1032) /* ty=Tensor[(2496), float32] */
  };
  %1033() /* ty=Tensor[(2496), float32] */
}

def @func_5273(%var_5271: Tensor[(2, 5, 6), float32], %var_5272: Tensor[(2, 5, 6), float32]) -> Tensor[(2, 5, 6), int64] {
  %1043 = fn (%var_5243: Tensor[(2, 5, 6), float32], %var_5244: Tensor[(2, 5, 6), float32]) -> Tensor[(2, 5, 6), int64] {
    %1034 = cast(%var_5244, dtype="float32") /* ty=Tensor[(2, 5, 6), float32] */;
    %1035 = shape_of(%var_5243, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1036 = cast(%var_5243, dtype="float32") /* ty=Tensor[(2, 5, 6), float32] */;
    %1037 = dyn.reshape(%1034, %1035, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1038 = multiply(%1036, %1037) /* ty=Tensor[(2, 5, 6), float32] */;
    %1039 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 5, 6), float32] */, dtype="int64") /* ty=Tensor[(2, 5, 6), int64] */;
    %1040 = shape_of(%1038, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1041 = cast(%1038, dtype="int64") /* ty=Tensor[(2, 5, 6), int64] */;
    %1042 = dyn.reshape(%1039, %1040, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    subtract(%1041, %1042) /* ty=Tensor[(2, 5, 6), int64] */
  };
  %1043(%var_5271, %var_5272) /* ty=Tensor[(2, 5, 6), int64] */
}

def @func_10230() -> Tensor[(13, 10, 12), uint64] {
  %1044 = @func_3464() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float32]) */;
  %1044.2
}

def @func_8743() -> (Tensor[(13, 10, 12), uint64],) {
  %1046 = fn () -> (Tensor[(13, 10, 12), uint64],) {
    %1045 = @func_979() /* ty=Tensor[(13, 10, 12), uint64] */;
    (%1045,)
  };
  %1046() /* ty=(Tensor[(13, 10, 12), uint64],) */
}

def @func_6638() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) {
  %1051 = fn () -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) {
    %1047 = @func_5948() /* ty=(Tensor[(13, 10, 12), uint64],) */;
    %1048 = @func_1412() /* ty=(Tensor[(13, 10, 12), uint32],) */;
    %1049 = %1047.0;
    %1050 = %1048.0;
    (%1049, %1050)
  };
  %1051() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint32]) */
}

def @func_10419() -> (Tensor[(13, 10, 12), uint64],) {
  %1053 = fn () -> (Tensor[(13, 10, 12), uint64],) {
    %1052 = @func_6560() /* ty=Tensor[(13, 10, 12), uint64] */;
    (%1052,)
  };
  %1053() /* ty=(Tensor[(13, 10, 12), uint64],) */
}

def @func_10718(%var_10716: Tensor[(15, 11, 4), uint64], %var_10717: Tensor[(15, 11, 4), uint64]) -> Tensor[(15, 11, 4), uint64] {
  @func_10714(%var_10716, %var_10717) /* ty=Tensor[(15, 11, 4), uint64] */
}

def @func_1487() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) {
  %1065 = fn () -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) {
    %1054 = @func_1412() /* ty=(Tensor[(13, 10, 12), uint32],) */;
    %1055 = %1054.0;
    %1056 = @func_752() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
    %1057 = %1056.1;
    %1058 = cast(%1057, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
    %1059 = shape_of(%1055, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1060 = cast(%1055, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
    %1061 = dyn.reshape(%1058, %1059, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1062 = cast(%1055, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
    %1063 = multiply(%1060, %1061) /* ty=Tensor[(13, 10, 12), float64] */;
    %1064 = asin(%1062) /* ty=Tensor[(13, 10, 12), float64] */;
    (%1063, %1064)
  };
  %1065() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */
}

def @func_3037() -> (Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) {
  %1070 = fn () -> (Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) {
    %1066 = @func_511() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */;
    %1067 = @func_511() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */;
    %1068 = %1066.1;
    %1069 = %1067.2;
    (%1068, %1069)
  };
  %1070() /* ty=(Tensor[(13, 16, 12), uint16], Tensor[(2496), int32]) */
}

def @func_3144() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  %1071 = @func_1797() /* ty=(Tensor[(13, 10, 12), uint64],) */;
  %1072 = %1071.0;
  %1073 = @func_979() /* ty=Tensor[(13, 10, 12), uint64] */;
  (%1072, %1073)
}

def @func_7827(%var_7823: Tensor[(15, 2, 10), float64], %var_7824: Tensor[(15, 2, 10), float64], %var_7825: Tensor[(224), int16], %var_7826: Tensor[(15, 2, 10), float64]) -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64], Tensor[(16, 2, 7), int16], Tensor[(224), int16], Tensor[(15, 2, 10), int16], Tensor[(15, 2, 10), float64]) {
  %1093 = fn (%var_7781: Tensor[(15, 2, 10), float64], %var_7782: Tensor[(15, 2, 10), float64], %var_7807: Tensor[(224), int16], %var_7810: Tensor[(15, 2, 10), float64]) -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64], Tensor[(16, 2, 7), int16], Tensor[(224), int16], Tensor[(15, 2, 10), int16], Tensor[(15, 2, 10), float64]) {
    %1074 = @func_2866() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 16, 12), float64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
    %1075 = cast(%var_7807, dtype="int16") /* ty=Tensor[(224), int16] */;
    %1076 = reshape(%1075, newshape=[16, 2, 7]) /* ty=Tensor[(16, 2, 7), int16] */;
    %1077 = @func_1829(%1076) /* ty=(Tensor[(16, 2, 7), int16],) */;
    %1078 = cast(%var_7782, dtype="float64") /* ty=Tensor[(15, 2, 10), float64] */;
    %1079 = shape_of(%var_7781, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1080 = cast(%var_7781, dtype="float64") /* ty=Tensor[(15, 2, 10), float64] */;
    %1081 = dyn.reshape(%1078, %1079, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1082 = floor_divide(%1080, %1081) /* ty=Tensor[(15, 2, 10), float64] */;
    %1083 = cast(%var_7810, dtype="int16") /* ty=Tensor[(15, 2, 10), int16] */;
    %1084 = shape_of(%1082, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1085 = cast(%1082, dtype="int16") /* ty=Tensor[(15, 2, 10), int16] */;
    %1086 = dyn.reshape(%1083, %1084, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %1087 = cast(%1082, dtype="float64") /* ty=Tensor[(15, 2, 10), float64] */;
    %1088 = @func_2013() /* ty=Tensor[(13, 10, 12), bool] */;
    %1089 = %1074.2;
    %1090 = %1077.0;
    %1091 = maximum(%1085, %1086) /* ty=Tensor[(15, 2, 10), int16] */;
    %1092 = exp(%1087) /* ty=Tensor[(15, 2, 10), float64] */;
    (%1088, %1089, %1090, %var_7807, %1091, %1092)
  };
  %1093(%var_7823, %var_7824, %var_7825, %var_7826) /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64], Tensor[(16, 2, 7), int16], Tensor[(224), int16], Tensor[(15, 2, 10), int16], Tensor[(15, 2, 10), float64]) */
}

def @func_7983() -> Tensor[(2496), int32] {
  @func_7981() /* ty=Tensor[(2496), int32] */
}

def @func_3476() -> Tensor[(13, 10, 12), float64] {
  @func_3474() /* ty=Tensor[(13, 10, 12), float64] */
}

def @func_3944() -> (Tensor[(13, 10, 12), float64],) {
  %1094 = @func_1486() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %1095 = %1094.0;
  (%1095,)
}

def @func_3146() -> (Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) {
  @func_3144() /* ty=(Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64]) */
}

def @func_10111(%var_10109: Tensor[(1089), float64], %var_10110: int64) -> (Tensor[(13, 10, 12), bool], Tensor[(11, 9, 11), float32], Tensor[(1089), float64], Tensor[(13, 10, 12), bool], int64) {
  %1107 = fn (%var_10099: Tensor[(1089), float64], %var_10106: int64) -> (Tensor[(13, 10, 12), bool], Tensor[(11, 9, 11), float32], Tensor[(1089), float64], Tensor[(13, 10, 12), bool], int64) {
    %1096 = @func_1355() /* ty=(Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), float64]) */;
    %1097 = cast(%var_10099, dtype="float64") /* ty=Tensor[(1089), float64] */;
    %1098 = reshape(%1097, newshape=[11, 9, 11]) /* ty=Tensor[(11, 9, 11), float64] */;
    %1099 = cast(%var_10106, dtype="int64") /* ty=int64 */;
    %1100 = %1096.0;
    %1101 = cast(%1100, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
    %1102 = reshape(%1099, newshape=[]) /* ty=int64 */;
    %1103 = reshape(%1101, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), float64] */;
    %1104 = @func_961(%1102, %1103) /* ty=(int64, Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), uint32], Tensor[(8, 44), int16]) */;
    %1105 = @func_1045(%1098) /* ty=Tensor[(11, 9, 11), float32] */;
    %1106 = %1104.1;
    (%1100, %1105, %var_10099, %1106, %var_10106)
  };
  %1107(%var_10109, %var_10110) /* ty=(Tensor[(13, 10, 12), bool], Tensor[(11, 9, 11), float32], Tensor[(1089), float64], Tensor[(13, 10, 12), bool], int64) */
}

def @func_7566() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), int64], Tensor[(3, 6, 14), bool], Tensor[(13, 10, 12), bool]) {
  %1108 = @func_752() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), float64]) */;
  %1109 = cast(meta[relay.Constant][33] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %1110 = reshape(%1109, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), float64] */;
  %1111 = @func_1510(%1110) /* ty=(Tensor[(3, 6, 14), float64],) */;
  %1112 = %1111.0;
  %1113 = cast(meta[relay.Constant][33] /* ty=Tensor[(252), float64] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %1114 = shape_of(%1112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1115 = cast(%1112, dtype="bool") /* ty=Tensor[(3, 6, 14), bool] */;
  %1116 = dyn.reshape(%1113, %1114, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1117 = @func_4051() /* ty=(Tensor[(13, 10, 12), bool],) */;
  %1118 = %1108.0;
  %1119 = @func_731() /* ty=Tensor[(13, 10, 12), int64] */;
  %1120 = greater_equal(%1115, %1116) /* ty=Tensor[(3, 6, 14), bool] */;
  %1121 = %1117.0;
  (%1118, %1119, %1120, %1121)
}

def @func_9909() -> Tensor[(13, 10, 12), bool] {
  @func_9907() /* ty=Tensor[(13, 10, 12), bool] */
}

def @func_9450() -> (Tensor[(13, 10, 12), bool], Tensor[(13, 10, 12), int64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), uint64], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint32]) {
  %1122 = @func_3944() /* ty=(Tensor[(13, 10, 12), float64],) */;
  %1123 = @func_4613() /* ty=Tensor[(13, 10, 12), bool] */;
  %1124 = @func_7024() /* ty=Tensor[(13, 10, 12), int64] */;
  %1125 = @func_1682() /* ty=Tensor[(13, 10, 12), uint64] */;
  %1126 = @func_4124() /* ty=Tensor[(13, 10, 12), uint64] */;
  %1127 = %1122.0;
  %1128 = @func_8191() /* ty=Tensor[(13, 10, 12), uint32] */;
  (%1123, %1124, %1125, %1126, %1127, %1128)
}

def @func_10319() -> (Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) {
  @func_10317() /* ty=(Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), uint64]) */
}

def @func_10040() -> (Tensor[(13, 10, 12), uint32],) {
  %1131 = fn () -> (Tensor[(13, 10, 12), uint32],) {
    %1129 = @func_1412() /* ty=(Tensor[(13, 10, 12), uint32],) */;
    %1130 = %1129.0;
    (%1130,)
  };
  %1131() /* ty=(Tensor[(13, 10, 12), uint32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen396/build/output.py", line 3577, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:13:42] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

