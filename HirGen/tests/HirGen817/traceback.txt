==========mod==========
#[version = "0.0.5"]
def @func_12043() -> (Tensor[(15, 8, 7), float64],) {
  %0 = @func_10220() /* ty=Tensor[(15, 8, 7), float64] */;
  (%0,)
}

def @func_13110(%var_13076: Tensor[(1, 252), float64], %var_13080: Tensor[(1680), uint16], %var_13106: Tensor[(11, 252), float64]) -> (Tensor[(?, 9, 10), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(252), float64], Tensor[(13, 14, 15), float32], Tensor[(1680), uint16], Tensor[(15, 8, 7), bool], Tensor[(1008), float64], Tensor[(12, 6, 9), float64], Tensor[(11, 252), float32]) {
  %1 = @func_10285() /* ty=(Tensor[(?, 9, 10), bool], Tensor[(14, 144), int16]) */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %3 = reshape(%2, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float32] */;
  %4 = @func_917(%3) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %5 = cast(%var_13076, dtype="float64") /* ty=Tensor[(1, 252), float64] */;
  %6 = reshape(%5, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %7 = @func_11979(%6) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(252), float64]) */;
  %8 = cast(%var_13080, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
  %9 = reshape(%8, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint16] */;
  %10 = @func_12171(%9) /* ty=(Tensor[(14, 12, 10), bool], Tensor[(13, 14, 15), float32], Tensor[(2730), float32]) */;
  %11 = %7.2;
  %12 = cast(%11, dtype="float64") /* ty=Tensor[(252), float64] */;
  %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %14 = reshape(%12, newshape=[252, 1]) /* ty=Tensor[(252, 1), float64] */;
  %15 = reshape(%13, newshape=[252, 4]) /* ty=Tensor[(252, 4), float64] */;
  %16 = @func_11667(%14, %15) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(15, 8, 7), bool], Tensor[(1, 9, 10), float32], Tensor[(252, 4), bool]) */;
  %17 = @func_8330() /* ty=(Tensor[(12, 6, 9), float64],) */;
  %18 = cast(%var_13076, dtype="float64") /* ty=Tensor[(1, 252), float64] */;
  %19 = asinh(%18) /* ty=Tensor[(1, 252), float64] */;
  %20 = cast(%19, dtype="float32") /* ty=Tensor[(1, 252), float32] */;
  %21 = cast(%var_13106, dtype="float32") /* ty=Tensor[(11, 252), float32] */;
  %22 = %1.0;
  %23 = %4.0;
  %24 = %10.1;
  %25 = %16.2;
  %26 = %17.0;
  %27 = divide(%20, %21) /* ty=Tensor[(11, 252), float32] */;
  (%22, %23, meta[relay.Constant][0] /* ty=Tensor[(840), float32] */, %11, %24, %var_13080, %25, meta[relay.Constant][1] /* ty=Tensor[(1008), float64] */, %26, %27)
}

def @func_14282(%var_14240: Tensor[(12, 6, 9), float32], %var_14275: Tensor[(3, 84), float64]) -> (Tensor[(12, 6, 9), int32], Tensor[(10, 9, 10), float64], Tensor[(13, 15, 5), int64], Tensor[(3, 84), float64]) {
  %28 = @func_13468() /* ty=Tensor[(12, 6, 9), float32] */;
  %29 = cast(%var_14240, dtype="int32") /* ty=Tensor[(12, 6, 9), int32] */;
  %30 = shape_of(%28, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%28, dtype="int32") /* ty=Tensor[(12, 6, 9), int32] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %33 = @func_11840() /* ty=(Tensor[(10, 9, 10), float64],) */;
  %34 = cast(%var_14275, dtype="float64") /* ty=Tensor[(3, 84), float64] */;
  %35 = cast(%var_14275, dtype="float64") /* ty=Tensor[(3, 84), float64] */;
  %36 = reshape(%34, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float64] */;
  %37 = reshape(%35, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float64] */;
  %38 = @func_2710(%36, %37) /* ty=(Tensor[(6, 14, 3), float64], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) */;
  %39 = add(%31, %32) /* ty=Tensor[(12, 6, 9), int32] */;
  %40 = %33.0;
  %41 = %38.1;
  (%39, %40, %41, %var_14275)
}

def @func_12508() -> (Tensor[(1, 9, 10), float32],) {
  %42 = @func_9106() /* ty=(Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) */;
  %43 = %42.1;
  (%43,)
}

def @func_10399(%var_10359: Tensor[(3, 84), float64]) -> (Tensor[(1, 9, 10), float64], Tensor[(2016), float32], Tensor[(1, 9, 10), float64], Tensor[(3, 84), uint64]) {
  %44 = cast(%var_10359, dtype="float64") /* ty=Tensor[(3, 84), float64] */;
  %45 = reshape(%44, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %46 = @func_10105(%45) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(2, 1008), float32], Tensor[(6, 14, 3), float64], Tensor[(252), float64]) */;
  %47 = cast(%var_10359, dtype="float32") /* ty=Tensor[(3, 84), float32] */;
  %48 = log(%47) /* ty=Tensor[(3, 84), float32] */;
  %49 = cast(%var_10359, dtype="uint64") /* ty=Tensor[(3, 84), uint64] */;
  %50 = shape_of(%48, dtype="int32") /* ty=Tensor[(2), int32] */;
  %51 = cast(%48, dtype="uint64") /* ty=Tensor[(3, 84), uint64] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %53 = @func_8790() /* ty=Tensor[(1, 9, 10), float64] */;
  %54 = %46.1;
  %55 = @func_7688() /* ty=Tensor[(1, 9, 10), float64] */;
  %56 = left_shift(%51, %52) /* ty=Tensor[(3, 84), uint64] */;
  (%53, %54, %55, %56)
}

def @func_14817(%var_14810: Tensor[(1152), int64]) -> (Tensor[(15, 8, 7), float64], Tensor[(1152), int64], Tensor[(1152), int64]) {
  %57 = cast(%var_14810, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %58 = reshape(%57, newshape=[1152]) /* ty=Tensor[(1152), int64] */;
  %59 = @func_9428(%58) /* ty=(Tensor[(12, 6, 9), float64], Tensor[(8, 12, 12), bool], Tensor[(1152), int64]) */;
  %60 = @func_10220() /* ty=Tensor[(15, 8, 7), float64] */;
  %61 = %59.2;
  (%60, %61, %var_14810)
}

def @func_2957(%var_2954: Tensor[(9, 15, 9), float32]) -> (Tensor[(9, 15, 9), float32],) {
  %62 = cast(%var_2954, dtype="float32") /* ty=Tensor[(9, 15, 9), float32] */;
  %63 = cosh(%62) /* ty=Tensor[(9, 15, 9), float32] */;
  (%63,)
}

def @func_11342() -> (Tensor[(12, 6, 9), float64], Tensor[(2, 420), float32]) {
  %64 = @func_10337() /* ty=(Tensor[(12, 6, 9), float64],) */;
  %65 = @func_9961() /* ty=(Tensor[(?, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(975), int64]) */;
  %66 = %64.0;
  %67 = %65.2;
  (%66, %67)
}

def @func_9121() -> (Tensor[(1, 9, 10), float64],) {
  %68 = @func_8003() /* ty=Tensor[(1, 9, 10), float64] */;
  (%68,)
}

def @func_12854() -> (Tensor[(10, 9, 10), float64],) {
  %69 = @func_9266() /* ty=Tensor[(10, 9, 10), float64] */;
  (%69,)
}

def @func_11833() -> Tensor[(1, 9, 10), float32] {
  @func_8464() /* ty=Tensor[(1, 9, 10), float32] */
}

def @func_11216(%var_11214: Tensor[(1152), int64]) -> (Tensor[(1, 9, 10), float32], Tensor[(975), int64], Tensor[(2, 420), float32], Tensor[(576, 2), int64], Tensor[(1152), int64]) {
  %70 = @func_9106() /* ty=(Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) */;
  %71 = @func_9961() /* ty=(Tensor[(?, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(975), int64]) */;
  %72 = @func_9961() /* ty=(Tensor[(?, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(975), int64]) */;
  %73 = cast(%var_11214, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %74 = reshape(%73, newshape=[576, 2]) /* ty=Tensor[(576, 2), int64] */;
  %75 = @func_7551(%74) /* ty=(Tensor[(12, 6, 9), bool], Tensor[(8, 12, 12), bool], Tensor[(576, 2), int64], Tensor[(12, 6, 9), float64], Tensor[(12, 6, 9), float32]) */;
  %76 = %70.1;
  %77 = %71.3;
  %78 = %72.2;
  %79 = %75.2;
  (%76, %77, %78, %79, %var_11214)
}

def @func_12021(%var_12004: Tensor[(12, 9, 10), float32]) -> (Tensor[(12, 9, 10), bool], Tensor[(12, 9, 10), float64]) {
  %80 = @func_7975() /* ty=Tensor[(1, 9, 10), float32] */;
  %81 = cast(%80, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
  %82 = cast(%var_12004, dtype="bool") /* ty=Tensor[(12, 9, 10), bool] */;
  %83 = cast(%var_12004, dtype="float64") /* ty=Tensor[(12, 9, 10), float64] */;
  %84 = logical_and(%81, %82) /* ty=Tensor[(12, 9, 10), bool] */;
  %85 = tan(%83) /* ty=Tensor[(12, 9, 10), float64] */;
  (%84, %85)
}

def @func_14448() -> (Tensor[(2, 16, 2), float64], Tensor[(16, 9, 14), uint64]) {
  %86 = @func_9784() /* ty=Tensor[(2, 16, 2), float32] */;
  %87 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 16, 2), float32] */, dtype="float64") /* ty=Tensor[(2, 16, 2), float64] */;
  %88 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%86, dtype="float64") /* ty=Tensor[(2, 16, 2), float64] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %91 = @func_7155() /* ty=(Tensor[(15, 8, 7), bool], Tensor[(16, 9, 14), uint64], Tensor[(2016, 1), float32]) */;
  %92 = mod(%89, %90) /* ty=Tensor[(2, 16, 2), float64] */;
  %93 = %91.1;
  (%92, %93)
}

def @func_7865(%var_7791: Tensor[(1152), int64]) -> (Tensor[(13, 14, 15), float32], Tensor[(2730, 1), float32], Tensor[(8, 12, 12), bool], Tensor[(1152), int64], Tensor[(15, 5, 7), bool], Tensor[(525), uint8], Tensor[(1, 9, 10), float32], Tensor[(10, 7, 9), uint32], Tensor[(630), uint32]) {
  %94 = cast(meta[relay.Constant][3] /* ty=Tensor[(2730, 1), float32] */, dtype="float32") /* ty=Tensor[(2730, 1), float32] */;
  %95 = reshape(%94, newshape=[13, 14, 15]) /* ty=Tensor[(13, 14, 15), float32] */;
  %96 = cast(%var_7791, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %97 = cast(%var_7791, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %98 = reshape(%96, newshape=[8, 12, 12]) /* ty=Tensor[(8, 12, 12), int64] */;
  %99 = reshape(%97, newshape=[8, 12, 12]) /* ty=Tensor[(8, 12, 12), int64] */;
  %100 = @func_3371(%98, %99) /* ty=(Tensor[(8, 12, 12), bool],) */;
  %101 = cast(meta[relay.Constant][4] /* ty=Tensor[(525), uint8] */, dtype="uint8") /* ty=Tensor[(525), uint8] */;
  %102 = cast(meta[relay.Constant][4] /* ty=Tensor[(525), uint8] */, dtype="uint8") /* ty=Tensor[(525), uint8] */;
  %103 = reshape(%101, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), uint8] */;
  %104 = reshape(%102, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), uint8] */;
  %105 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %106 = %105.0;
  %107 = cast(%106, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %108 = acosh(%107) /* ty=Tensor[(1, 9, 10), float32] */;
  %109 = cast(%108, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %110 = cast(meta[relay.Constant][5] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %111 = cast(meta[relay.Constant][5] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %112 = reshape(%110, newshape=[10, 7, 9]) /* ty=Tensor[(10, 7, 9), uint32] */;
  %113 = reshape(%111, newshape=[10, 7, 9]) /* ty=Tensor[(10, 7, 9), uint32] */;
  %114 = @func_6559(%95) /* ty=Tensor[(13, 14, 15), float32] */;
  %115 = %100.0;
  %116 = @func_2797(%103, %104) /* ty=Tensor[(15, 5, 7), bool] */;
  %117 = log10(%109) /* ty=Tensor[(1, 9, 10), float32] */;
  %118 = @func_1398(%112, %113) /* ty=Tensor[(10, 7, 9), uint32] */;
  (%114, meta[relay.Constant][3] /* ty=Tensor[(2730, 1), float32] */, %115, %var_7791, %116, meta[relay.Constant][4] /* ty=Tensor[(525), uint8] */, %117, %118, meta[relay.Constant][5] /* ty=Tensor[(630), uint32] */)
}

def @func_12431() -> (Tensor[(1, 9, 10), float32],) {
  %119 = @func_11395() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %120 = %119.0;
  (%120,)
}

def @func_9001() -> (Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32]) {
  %121 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %122 = @func_7975() /* ty=Tensor[(1, 9, 10), float32] */;
  %123 = %121.0;
  (%122, %123)
}

def @func_13380(%var_13367: Tensor[(12, 6, 9), float64], %var_13378: Tensor[(975), int64]) -> (Tensor[(12, 6, 9), uint16], Tensor[(13, 15, 5), int64], Tensor[(975), int64]) {
  %124 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
  %125 = %124.1;
  %126 = cast(%var_13367, dtype="uint16") /* ty=Tensor[(12, 6, 9), uint16] */;
  %127 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%125, dtype="uint16") /* ty=Tensor[(12, 6, 9), uint16] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %130 = cast(%var_13378, dtype="int64") /* ty=Tensor[(975), int64] */;
  %131 = reshape(%130, newshape=[975, 1]) /* ty=Tensor[(975, 1), int64] */;
  %132 = @func_8174(%131) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(13, 15, 5), int64], Tensor[(975, 1), int64]) */;
  %133 = bitwise_or(%128, %129) /* ty=Tensor[(12, 6, 9), uint16] */;
  %134 = %132.1;
  (%133, %134, %var_13378)
}

def @func_12294() -> (Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float32]) {
  %135 = @func_11009() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %136 = @func_8003() /* ty=Tensor[(1, 9, 10), float64] */;
  %137 = %135.0;
  (%136, %137)
}

def @func_7234(%var_7217: Tensor[(1152), int64]) -> (Tensor[(1, 9, 10), float32], Tensor[(8, 12, 12), bool], Tensor[(1152), int64], Tensor[(1, 9, 10), float32], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) {
  %138 = cast(%var_7217, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %139 = cast(%var_7217, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %140 = reshape(%138, newshape=[8, 12, 12]) /* ty=Tensor[(8, 12, 12), int64] */;
  %141 = reshape(%139, newshape=[8, 12, 12]) /* ty=Tensor[(8, 12, 12), int64] */;
  %142 = @func_3371(%140, %141) /* ty=(Tensor[(8, 12, 12), bool],) */;
  %143 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %144 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 195), int64] */, dtype="int64") /* ty=Tensor[(5, 195), int64] */;
  %145 = reshape(%144, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), int64] */;
  %146 = @func_2646(%145) /* ty=(Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) */;
  %147 = @func_6811() /* ty=Tensor[(1, 9, 10), float32] */;
  %148 = %142.0;
  %149 = %143.0;
  %150 = %146.0;
  (%147, %148, %var_7217, %149, %150, meta[relay.Constant][6] /* ty=Tensor[(5, 195), int64] */)
}

def @func_5222(%var_5213: Tensor[(5, 6, 14), uint16]) -> (Tensor[(5, 6, 14), uint16],) {
  %151 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 6, 14), uint16] */, dtype="uint16") /* ty=Tensor[(5, 6, 14), uint16] */;
  %152 = shape_of(%var_5213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%var_5213, dtype="uint16") /* ty=Tensor[(5, 6, 14), uint16] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %155 = minimum(%153, %154) /* ty=Tensor[(5, 6, 14), uint16] */;
  (%155,)
}

def @func_10602() -> Tensor[(15, 8, 7), bool] {
  @func_8531() /* ty=Tensor[(15, 8, 7), bool] */
}

def @main(%var_15050: Tensor[(15, 8, 7), float64]) -> (Tensor[(15, 8, 7), int16],) {
  %156 = @func_10220() /* ty=Tensor[(15, 8, 7), float64] */;
  %157 = cast(%var_15050, dtype="int16") /* ty=Tensor[(15, 8, 7), int16] */;
  %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%156, dtype="int16") /* ty=Tensor[(15, 8, 7), int16] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %161 = multiply(%159, %160) /* ty=Tensor[(15, 8, 7), int16] */;
  (%161,)
}

def @func_6349(%var_6306: Tensor[(16, 9, 14), float32], %var_6307: Tensor[(16, 9, 14), float32]) -> (Tensor[(16, 9, 14), uint64],) {
  %162 = cast(%var_6307, dtype="float32") /* ty=Tensor[(16, 9, 14), float32] */;
  %163 = shape_of(%var_6306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%var_6306, dtype="float32") /* ty=Tensor[(16, 9, 14), float32] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %166 = floor_mod(%164, %165) /* ty=Tensor[(16, 9, 14), float32] */;
  %167 = cast(%166, dtype="uint64") /* ty=Tensor[(16, 9, 14), uint64] */;
  %168 = shape_of(%var_6307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%var_6307, dtype="uint64") /* ty=Tensor[(16, 9, 14), uint64] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %171 = bitwise_or(%169, %170) /* ty=Tensor[(16, 9, 14), uint64] */;
  (%171,)
}

def @func_13874(%var_13852: Tensor[(420), uint16], %var_13870: Tensor[(1, 540), float32]) -> (Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float64], Tensor[(64, 8), float64], Tensor[(12, 6, 9), float32], Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32], Tensor[(420), uint16], Tensor[(252), float64], Tensor[(630), uint32], Tensor[(6, 9, 10), bool], Tensor[(1, 540), float32]) {
  %172 = cast(meta[relay.Constant][8] /* ty=Tensor[(64, 8), float64] */, dtype="float64") /* ty=Tensor[(64, 8), float64] */;
  %173 = reshape(%172, newshape=[512]) /* ty=Tensor[(512), float64] */;
  %174 = @func_11092(%173) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(8, 8, 8), uint32], Tensor[(512), float64]) */;
  %175 = @func_13650() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %176 = cast(%var_13852, dtype="uint16") /* ty=Tensor[(420), uint16] */;
  %177 = cast(meta[relay.Constant][9] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %178 = cast(meta[relay.Constant][10] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %179 = reshape(%176, newshape=[420, 1]) /* ty=Tensor[(420, 1), uint16] */;
  %180 = reshape(%177, newshape=[126, 2]) /* ty=Tensor[(126, 2), float64] */;
  %181 = reshape(%178, newshape=[210, 3]) /* ty=Tensor[(210, 3), uint32] */;
  %182 = @func_12260(%179, %180, %181) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(5, 6, 14), uint16], Tensor[(420, 1), uint16], Tensor[(1, 9, 10), float32], Tensor[(14, 144), float32], Tensor[(9, 15, 9), float32], Tensor[(640), float64], Tensor[(1215), float32], Tensor[(126, 2), float64], Tensor[(525, 1), uint8], Tensor[(210, 3), uint32], Tensor[(252), float64], Tensor[(2, 1008), float32], Tensor[(15, 8, 7), float64]) */;
  %183 = cast(%var_13870, dtype="float32") /* ty=Tensor[(1, 540), float32] */;
  %184 = %182.3;
  %185 = cast(%184, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %186 = reshape(%183, newshape=[6, 9, 10]) /* ty=Tensor[(6, 9, 10), float32] */;
  %187 = reshape(%185, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float32] */;
  %188 = @func_8110(%186, %187) /* ty=(Tensor[(6, 9, 10), bool], Tensor[(?, 9, 10), float64]) */;
  %189 = @func_12765() /* ty=Tensor[(1, 9, 10), float64] */;
  %190 = %174.0;
  %191 = @func_13468() /* ty=Tensor[(12, 6, 9), float32] */;
  %192 = %175.0;
  %193 = %188.0;
  (%189, %190, meta[relay.Constant][8] /* ty=Tensor[(64, 8), float64] */, %191, %192, %184, %var_13852, meta[relay.Constant][9] /* ty=Tensor[(252), float64] */, meta[relay.Constant][10] /* ty=Tensor[(630), uint32] */, %193, %var_13870)
}

def @func_10197(%var_10166: Tensor[(2730), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(13, 14, 15), float32], Tensor[(2730), float32], Tensor[(512), float64], Tensor[(975), int64], Tensor[(13, 14, 15), float32]) {
  %194 = @func_9389() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %195 = cast(%var_10166, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %196 = reshape(%195, newshape=[13, 14, 15]) /* ty=Tensor[(13, 14, 15), float32] */;
  %197 = cast(meta[relay.Constant][11] /* ty=Tensor[(975), int64] */, dtype="int64") /* ty=Tensor[(975), int64] */;
  %198 = reshape(%197, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), int64] */;
  %199 = @func_2646(%198) /* ty=(Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) */;
  %200 = cast(%var_10166, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %201 = reshape(%200, newshape=[13, 14, 15]) /* ty=Tensor[(13, 14, 15), float32] */;
  %202 = %194.0;
  %203 = @func_6559(%196) /* ty=Tensor[(13, 14, 15), float32] */;
  %204 = %199.1;
  %205 = @func_6559(%201) /* ty=Tensor[(13, 14, 15), float32] */;
  (%202, %203, %var_10166, %204, meta[relay.Constant][11] /* ty=Tensor[(975), int64] */, %205)
}

def @func_14899() -> Tensor[(1, 9, 10), float64] {
  @func_10966() /* ty=Tensor[(1, 9, 10), float64] */
}

def @func_12171(%var_12133: Tensor[(14, 12, 10), uint16]) -> (Tensor[(14, 12, 10), bool], Tensor[(13, 14, 15), float32], Tensor[(2730), float32]) {
  %206 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 12, 10), uint16] */, dtype="bool") /* ty=Tensor[(14, 12, 10), bool] */;
  %207 = shape_of(%var_12133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%var_12133, dtype="bool") /* ty=Tensor[(14, 12, 10), bool] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %210 = cast(meta[relay.Constant][13] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %211 = reshape(%210, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %212 = @func_10197(%211) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(13, 14, 15), float32], Tensor[(2730), float32], Tensor[(512), float64], Tensor[(975), int64], Tensor[(13, 14, 15), float32]) */;
  %213 = less(%208, %209) /* ty=Tensor[(14, 12, 10), bool] */;
  %214 = %212.5;
  (%213, %214, meta[relay.Constant][13] /* ty=Tensor[(2730), float32] */)
}

def @func_5719(%var_5713: Tensor[(16, 1, 15), float32]) -> Tensor[(16, 1, 15), float32] {
  %215 = cast(%var_5713, dtype="float32") /* ty=Tensor[(16, 1, 15), float32] */;
  asinh(%215) /* ty=Tensor[(16, 1, 15), float32] */
}

def @func_10285() -> (Tensor[(?, 9, 10), bool], Tensor[(14, 144), int16]) {
  %216 = @func_6811() /* ty=Tensor[(1, 9, 10), float32] */;
  %217 = cast(%216, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %218 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 144), float32] */, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
  %219 = reshape(%217, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float32] */;
  %220 = reshape(%218, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %221 = @func_9328(%219, %220) /* ty=(Tensor[(?, 9, 10), bool], Tensor[(1, 9, 10), float64], Tensor[(840), float64], Tensor[(2016), float32]) */;
  %222 = %221.0;
  %223 = cast(%222, dtype="bool") /* ty=Tensor[(?, 9, 10), bool] */;
  %224 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%216, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %227 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 144), float32] */, dtype="int16") /* ty=Tensor[(14, 144), int16] */;
  %228 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(14, 144), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %229 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 144), float32] */, dtype="int16") /* ty=Tensor[(14, 144), int16] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %231 = logical_and(%225, %226) /* ty=Tensor[(?, 9, 10), bool] */;
  %232 = right_shift(%229, %230) /* ty=Tensor[(14, 144), int16] */;
  (%231, %232)
}

def @func_11559() -> (Tensor[(14, 15, 8), uint32],) {
  %233 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 15, 8), uint32] */, dtype="uint32") /* ty=Tensor[(14, 15, 8), uint32] */;
  %234 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(14, 15, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 15, 8), uint32] */, dtype="uint32") /* ty=Tensor[(14, 15, 8), uint32] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %237 = bitwise_or(%235, %236) /* ty=Tensor[(14, 15, 8), uint32] */;
  (%237,)
}

def @func_13588() -> (Tensor[(1, 9, 10), float64],) {
  %238 = @func_10673() /* ty=(Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float32], Tensor[(10, 9, 10), float64], Tensor[(15, 8, 7), bool], Tensor[(1, 975), int64]) */;
  %239 = %238.1;
  (%239,)
}

def @func_11395() -> (Tensor[(1, 9, 10), float32],) {
  %240 = @func_8686() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %241 = %240.0;
  (%241,)
}

def @func_14213(%var_14201: Tensor[(429), float64], %var_14208: Tensor[(2, 420), bool]) -> (Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32], Tensor[(910, 3), float64], Tensor[(2730), float32], Tensor[(11, 3, 13), float64], Tensor[(429), float64], Tensor[(2, 420), float64]) {
  %242 = @func_12431() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %243 = @func_11685() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %244 = cast(meta[relay.Constant][18] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %245 = reshape(%244, newshape=[182, 15]) /* ty=Tensor[(182, 15), float32] */;
  %246 = @func_12577(%245) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(10, 9, 10), float32], Tensor[(182, 15), float32], Tensor[(910, 3), float64]) */;
  %247 = cast(%var_14201, dtype="float64") /* ty=Tensor[(429), float64] */;
  %248 = reshape(%247, newshape=[11, 3, 13]) /* ty=Tensor[(11, 3, 13), float64] */;
  %249 = @func_12728(%248) /* ty=(Tensor[(11, 3, 13), float64],) */;
  %250 = @func_11346() /* ty=(Tensor[(2, 420), float32],) */;
  %251 = %250.0;
  %252 = cast(%251, dtype="float64") /* ty=Tensor[(2, 420), float64] */;
  %253 = sigmoid(%252) /* ty=Tensor[(2, 420), float64] */;
  %254 = cast(%251, dtype="bool") /* ty=Tensor[(2, 420), bool] */;
  %255 = shape_of(%253, dtype="int32") /* ty=Tensor[(2), int32] */;
  %256 = cast(%253, dtype="bool") /* ty=Tensor[(2, 420), bool] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %258 = greater_equal(%256, %257) /* ty=Tensor[(2, 420), bool] */;
  %259 = cast(%var_14208, dtype="float64") /* ty=Tensor[(2, 420), float64] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(2), int32] */;
  %261 = cast(%258, dtype="float64") /* ty=Tensor[(2, 420), float64] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %263 = %242.0;
  %264 = %243.0;
  %265 = %246.3;
  %266 = %249.0;
  %267 = power(%261, %262) /* ty=Tensor[(2, 420), float64] */;
  (%263, %264, %265, meta[relay.Constant][18] /* ty=Tensor[(2730), float32] */, %266, %var_14201, %267)
}

def @func_9389() -> (Tensor[(1, 9, 10), float32],) {
  %268 = @func_8967() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %269 = %268.0;
  (%269,)
}

def @func_7733(%var_7729: Tensor[(512), float64]) -> (Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(512), float64]) {
  %270 = cast(%var_7729, dtype="float64") /* ty=Tensor[(512), float64] */;
  %271 = reshape(%270, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), float64] */;
  %272 = @func_1141(%271) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(2, 420), float32], Tensor[(8, 8, 8), bool], Tensor[(15, 8, 7), float64], Tensor[(8, 8, 8), uint32]) */;
  %273 = @func_7688() /* ty=Tensor[(1, 9, 10), float64] */;
  %274 = %272.2;
  (%273, %274, %var_7729)
}

def @func_12926() -> Tensor[(1, 9, 10), float32] {
  %275 = @func_8967() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %275.0
}

def @func_8289(%var_8208: Tensor[(2, 9, 10), float32], %var_8230: Tensor[(630), uint32], %var_8247: Tensor[(234), bool]) -> (Tensor[(2, 9, 10), bool], Tensor[(10, 7, 9), uint32], Tensor[(630), uint32], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(9, 2, 13), bool], Tensor[(840), float32], Tensor[(234), float32]) {
  %276 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %277 = %276.0;
  %278 = cast(%277, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
  %279 = cast(%var_8208, dtype="bool") /* ty=Tensor[(2, 9, 10), bool] */;
  %280 = cast(%var_8230, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %281 = cast(%var_8230, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %282 = reshape(%280, newshape=[10, 7, 9]) /* ty=Tensor[(10, 7, 9), uint32] */;
  %283 = reshape(%281, newshape=[10, 7, 9]) /* ty=Tensor[(10, 7, 9), uint32] */;
  %284 = cast(meta[relay.Constant][19] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %285 = reshape(%284, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %286 = cast(%var_8247, dtype="bool") /* ty=Tensor[(234), bool] */;
  %287 = cast(%var_8247, dtype="bool") /* ty=Tensor[(234), bool] */;
  %288 = cast(meta[relay.Constant][20] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %289 = reshape(%286, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %290 = reshape(%287, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %291 = reshape(%288, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %292 = @func_1090(%289, %290, %291) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(15, 8, 7), float64]) */;
  %293 = cast(%var_8247, dtype="float32") /* ty=Tensor[(234), float32] */;
  %294 = equal(%278, %279) /* ty=Tensor[(2, 9, 10), bool] */;
  %295 = @func_1398(%282, %283) /* ty=Tensor[(10, 7, 9), uint32] */;
  %296 = @func_4912(%285) /* ty=Tensor[(12, 6, 9), float64] */;
  %297 = %292.3;
  %298 = sinh(%293) /* ty=Tensor[(234), float32] */;
  (%294, %295, %var_8230, %296, meta[relay.Constant][19] /* ty=Tensor[(648), float64] */, %297, meta[relay.Constant][20] /* ty=Tensor[(840), float32] */, %298)
}

def @func_1334(%var_1326: Tensor[(512), float64]) -> (Tensor[(5, 16, 13), float64], Tensor[(9, 2, 13), bool], Tensor[(512), float64]) {
  %299 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
  %300 = cast(%var_1326, dtype="float64") /* ty=Tensor[(512), float64] */;
  %301 = reshape(%300, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), float64] */;
  %302 = @func_1141(%301) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(2, 420), float32], Tensor[(8, 8, 8), bool], Tensor[(15, 8, 7), float64], Tensor[(8, 8, 8), uint32]) */;
  %303 = erf(%299) /* ty=Tensor[(5, 16, 13), float64] */;
  %304 = %302.0;
  (%303, %304, %var_1326)
}

def @func_1090(%var_1025: Tensor[(9, 2, 13), bool], %var_1026: Tensor[(9, 2, 13), bool], %var_1033: Tensor[(840), float32]) -> (Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(15, 8, 7), float64]) {
  %305 = cast(%var_1026, dtype="bool") /* ty=Tensor[(9, 2, 13), bool] */;
  %306 = shape_of(%var_1025, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%var_1025, dtype="bool") /* ty=Tensor[(9, 2, 13), bool] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %309 = cast(%var_1033, dtype="float32") /* ty=Tensor[(840), float32] */;
  %310 = reshape(%309, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float32] */;
  %311 = @func_917(%310) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %312 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 2, 13), bool] */, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
  %313 = shape_of(%var_1025, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%var_1025, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %316 = power(%314, %315) /* ty=Tensor[(9, 2, 13), float64] */;
  %317 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 2, 13), bool] */, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
  %318 = shape_of(%var_1026, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%var_1026, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %321 = floor_divide(%319, %320) /* ty=Tensor[(9, 2, 13), float64] */;
  %322 = cast(%321, dtype="bool") /* ty=Tensor[(9, 2, 13), bool] */;
  %323 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%316, dtype="bool") /* ty=Tensor[(9, 2, 13), bool] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %326 = %311.0;
  %327 = cast(%326, dtype="float32") /* ty=Tensor[(15, 8, 7), float32] */;
  %328 = reshape(%327, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float32] */;
  %329 = @func_917(%328) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %330 = %329.0;
  %331 = cast(%330, dtype="float32") /* ty=Tensor[(15, 8, 7), float32] */;
  %332 = reshape(%331, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float32] */;
  %333 = @func_917(%332) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %334 = logical_or(%307, %308) /* ty=Tensor[(9, 2, 13), bool] */;
  %335 = less(%324, %325) /* ty=Tensor[(9, 2, 13), bool] */;
  %336 = %333.0;
  (%334, %326, %var_1033, %335, %330, %336)
}

def @func_11581() -> (Tensor[(1, 9, 10), float32],) {
  %337 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %338 = %337.0;
  (%338,)
}

def @func_2710(%var_2693: Tensor[(6, 14, 3), float64], %var_2694: Tensor[(6, 14, 3), float64]) -> (Tensor[(6, 14, 3), float64], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) {
  %339 = cast(%var_2694, dtype="float64") /* ty=Tensor[(6, 14, 3), float64] */;
  %340 = shape_of(%var_2693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%var_2693, dtype="float64") /* ty=Tensor[(6, 14, 3), float64] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %343 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 195), int64] */, dtype="int64") /* ty=Tensor[(5, 195), int64] */;
  %344 = reshape(%343, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), int64] */;
  %345 = @func_2646(%344) /* ty=(Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) */;
  %346 = floor_mod(%341, %342) /* ty=Tensor[(6, 14, 3), float64] */;
  %347 = %345.0;
  (%346, %347, meta[relay.Constant][24] /* ty=Tensor[(5, 195), int64] */)
}

def @func_14359(%var_14319: Tensor[(10, 8, 4), float64], %var_14320: Tensor[(10, 8, 4), float64], %var_14329: Tensor[(2016), float32]) -> (Tensor[(10, 8, 4), float64], Tensor[(?, 9, 10), bool], Tensor[(16, 9, 14), uint64], Tensor[(2016), float32], Tensor[(1, 9, 10), float32]) {
  %348 = cast(%var_14320, dtype="float64") /* ty=Tensor[(10, 8, 4), float64] */;
  %349 = shape_of(%var_14319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%var_14319, dtype="float64") /* ty=Tensor[(10, 8, 4), float64] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %352 = cast(%var_14329, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %353 = cast(%var_14329, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %354 = reshape(%352, newshape=[16, 9, 14]) /* ty=Tensor[(16, 9, 14), float32] */;
  %355 = reshape(%353, newshape=[16, 9, 14]) /* ty=Tensor[(16, 9, 14), float32] */;
  %356 = @func_6349(%354, %355) /* ty=(Tensor[(16, 9, 14), uint64],) */;
  %357 = @func_9001() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32]) */;
  %358 = floor_mod(%350, %351) /* ty=Tensor[(10, 8, 4), float64] */;
  %359 = @func_12875() /* ty=Tensor[(?, 9, 10), bool] */;
  %360 = %356.0;
  %361 = %357.0;
  (%358, %359, %360, %var_14329, %361)
}

def @func_14612() -> (Tensor[(15, 8, 7), float32], Tensor[(512), float64], Tensor[(975), int64]) {
  %362 = @func_12043() /* ty=(Tensor[(15, 8, 7), float64],) */;
  %363 = %362.0;
  %364 = cast(%363, dtype="float32") /* ty=Tensor[(15, 8, 7), float32] */;
  %365 = cast(meta[relay.Constant][25] /* ty=Tensor[(975), int64] */, dtype="int64") /* ty=Tensor[(975), int64] */;
  %366 = reshape(%365, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), int64] */;
  %367 = @func_2646(%366) /* ty=(Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) */;
  %368 = sinh(%364) /* ty=Tensor[(15, 8, 7), float32] */;
  %369 = %367.1;
  (%368, %369, meta[relay.Constant][25] /* ty=Tensor[(975), int64] */)
}

def @func_14722(%var_14686: Tensor[(1, 9, 10), float32], %var_14714: Tensor[(1152), int64]) -> (Tensor[(?, 9, 10), bool], Tensor[(2, 420), float32], Tensor[(1, 9, 10), float32], Tensor[(525), uint8], Tensor[(1152), int64]) {
  %370 = @func_12926() /* ty=Tensor[(1, 9, 10), float32] */;
  %371 = cast(%var_14686, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %375 = @func_14378() /* ty=(Tensor[(2, 420), float32],) */;
  %376 = @func_11592() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %377 = cast(%var_14714, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %378 = reshape(%377, newshape=[1152]) /* ty=Tensor[(1152), int64] */;
  %379 = @func_7865(%378) /* ty=(Tensor[(13, 14, 15), float32], Tensor[(2730, 1), float32], Tensor[(8, 12, 12), bool], Tensor[(1152), int64], Tensor[(15, 5, 7), bool], Tensor[(525), uint8], Tensor[(1, 9, 10), float32], Tensor[(10, 7, 9), uint32], Tensor[(630), uint32]) */;
  %380 = less_equal(%373, %374) /* ty=Tensor[(?, 9, 10), bool] */;
  %381 = %375.0;
  %382 = %376.0;
  %383 = %379.5;
  (%380, %381, %382, %383, %var_14714)
}

def @func_13430() -> (Tensor[(12, 6, 9), float32],) {
  %384 = @func_12102() /* ty=Tensor[(12, 6, 9), float32] */;
  (%384,)
}

def @func_9747() -> Tensor[(1, 9, 10), float32] {
  %385 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %385.0
}

def @func_11092(%var_11077: Tensor[(512), float64]) -> (Tensor[(1, 9, 10), float64], Tensor[(8, 8, 8), uint32], Tensor[(512), float64]) {
  %386 = cast(%var_11077, dtype="float64") /* ty=Tensor[(512), float64] */;
  %387 = reshape(%386, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), float64] */;
  %388 = @func_1141(%387) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(2, 420), float32], Tensor[(8, 8, 8), bool], Tensor[(15, 8, 7), float64], Tensor[(8, 8, 8), uint32]) */;
  %389 = @func_9533() /* ty=Tensor[(1, 9, 10), float64] */;
  %390 = %388.5;
  (%389, %390, %var_11077)
}

def @func_7073() -> (Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) {
  %391 = cast(meta[relay.Constant][26] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
  %392 = cast(meta[relay.Constant][27] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %393 = reshape(%391, newshape=[117, 2]) /* ty=Tensor[(117, 2), bool] */;
  %394 = reshape(%392, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float64] */;
  %395 = @func_7024(%393, %394) /* ty=(Tensor[(117, 2), bool], Tensor[(840), float32], Tensor[(?, 9, 10), int32], Tensor[(15, 8, 7), bool], Tensor[(?, 9, 10), float64], Tensor[(?, 9, 10), uint8]) */;
  %396 = @func_6811() /* ty=Tensor[(1, 9, 10), float32] */;
  %397 = %395.3;
  (%396, %397, meta[relay.Constant][26] /* ty=Tensor[(234), bool] */, meta[relay.Constant][27] /* ty=Tensor[(840), float64] */)
}

def @func_8110(%var_8077: Tensor[(6, 9, 10), float32], %var_8089: Tensor[(1, 9, 10), float32]) -> (Tensor[(6, 9, 10), bool], Tensor[(?, 9, 10), float64]) {
  %398 = @func_7975() /* ty=Tensor[(1, 9, 10), float32] */;
  %399 = cast(%398, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
  %400 = cast(%var_8077, dtype="bool") /* ty=Tensor[(6, 9, 10), bool] */;
  %401 = @func_6811() /* ty=Tensor[(1, 9, 10), float32] */;
  %402 = cast(%var_8089, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
  %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%401, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %406 = logical_and(%399, %400) /* ty=Tensor[(6, 9, 10), bool] */;
  %407 = mod(%404, %405) /* ty=Tensor[(?, 9, 10), float64] */;
  (%406, %407)
}

def @func_6811() -> Tensor[(1, 9, 10), float32] {
  %408 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %408.0
}

def @func_7587(%var_7584: Tensor[(512), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(9, 15, 9), float32], Tensor[(1215), float32], Tensor[(234), bool], Tensor[(512), float64]) {
  %409 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %410 = cast(meta[relay.Constant][28] /* ty=Tensor[(1215), float32] */, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %411 = reshape(%410, newshape=[9, 15, 9]) /* ty=Tensor[(9, 15, 9), float32] */;
  %412 = @func_2957(%411) /* ty=(Tensor[(9, 15, 9), float32],) */;
  %413 = cast(%var_7584, dtype="float64") /* ty=Tensor[(512), float64] */;
  %414 = reshape(%413, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), float64] */;
  %415 = @func_1141(%414) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(2, 420), float32], Tensor[(8, 8, 8), bool], Tensor[(15, 8, 7), float64], Tensor[(8, 8, 8), uint32]) */;
  %416 = %409.0;
  %417 = %412.0;
  %418 = %415.1;
  (%416, %417, meta[relay.Constant][28] /* ty=Tensor[(1215), float32] */, %418, %var_7584)
}

def @func_11840() -> (Tensor[(10, 9, 10), float64],) {
  %419 = @func_9266() /* ty=Tensor[(10, 9, 10), float64] */;
  (%419,)
}

def @func_9350() -> (Tensor[(1, 9, 10), float32],) {
  %420 = @func_8967() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %421 = %420.0;
  (%421,)
}

def @func_12728(%var_12725: Tensor[(11, 3, 13), float64]) -> (Tensor[(11, 3, 13), float64],) {
  %422 = cast(%var_12725, dtype="float64") /* ty=Tensor[(11, 3, 13), float64] */;
  %423 = log10(%422) /* ty=Tensor[(11, 3, 13), float64] */;
  (%423,)
}

def @func_8646() -> Tensor[(840), float64] {
  %424 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %424.3
}

def @func_13266() -> (Tensor[(10, 9, 10), float64], Tensor[(15, 8, 7), float64], Tensor[(?, 9, 10), float32]) {
  %425 = @func_11840() /* ty=(Tensor[(10, 9, 10), float64],) */;
  %426 = @func_12043() /* ty=(Tensor[(15, 8, 7), float64],) */;
  %427 = @func_9747() /* ty=Tensor[(1, 9, 10), float32] */;
  %428 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %429 = %428.0;
  %430 = cast(%429, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %431 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%427, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %434 = %425.0;
  %435 = %426.0;
  %436 = divide(%432, %433) /* ty=Tensor[(?, 9, 10), float32] */;
  (%434, %435, %436)
}

def @func_13575() -> Tensor[(12, 6, 9), float64] {
  %437 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
  %437.1
}

def @func_14048() -> (Tensor[(10, 9, 10), float64],) {
  %438 = @func_11840() /* ty=(Tensor[(10, 9, 10), float64],) */;
  %439 = %438.0;
  (%439,)
}

def @func_3371(%var_3351: Tensor[(8, 12, 12), int64], %var_3352: Tensor[(8, 12, 12), int64]) -> (Tensor[(8, 12, 12), bool],) {
  %440 = cast(%var_3352, dtype="bool") /* ty=Tensor[(8, 12, 12), bool] */;
  %441 = shape_of(%var_3351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%var_3351, dtype="bool") /* ty=Tensor[(8, 12, 12), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %444 = equal(%442, %443) /* ty=Tensor[(8, 12, 12), bool] */;
  (%444,)
}

def @func_12658(%var_12654: Tensor[(512), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(234), bool], Tensor[(512), float64]) {
  %445 = @func_11395() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %446 = cast(%var_12654, dtype="float64") /* ty=Tensor[(512), float64] */;
  %447 = reshape(%446, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), float64] */;
  %448 = @func_1141(%447) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(2, 420), float32], Tensor[(8, 8, 8), bool], Tensor[(15, 8, 7), float64], Tensor[(8, 8, 8), uint32]) */;
  %449 = %445.0;
  %450 = %448.1;
  (%449, %450, %var_12654)
}

def @func_11685() -> (Tensor[(1, 9, 10), float32],) {
  %451 = @func_11592() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %452 = %451.0;
  (%452,)
}

def @func_9106() -> (Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) {
  %453 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 16, 2), float32] */, dtype="float32") /* ty=Tensor[(2, 16, 2), float32] */;
  %454 = @func_9001() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32]) */;
  %455 = atan(%453) /* ty=Tensor[(2, 16, 2), float32] */;
  %456 = %454.1;
  (%455, %456)
}

def @func_10498(%var_10486: Tensor[(7, 9, 10), float32]) -> (Tensor[(7, 9, 10), uint8], Tensor[(?, 9, 10), float64]) {
  %457 = @func_9961() /* ty=(Tensor[(?, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(975), int64]) */;
  %458 = %457.0;
  %459 = cast(%458, dtype="uint8") /* ty=Tensor[(?, 9, 10), uint8] */;
  %460 = cast(%var_10486, dtype="uint8") /* ty=Tensor[(7, 9, 10), uint8] */;
  %461 = cast(%458, dtype="float64") /* ty=Tensor[(?, 9, 10), float64] */;
  %462 = logical_xor(%459, %460) /* ty=Tensor[(7, 9, 10), uint8] */;
  %463 = rsqrt(%461) /* ty=Tensor[(?, 9, 10), float64] */;
  (%462, %463)
}

def @func_12260(%var_12217: Tensor[(420, 1), uint16], %var_12242: Tensor[(126, 2), float64], %var_12244: Tensor[(210, 3), uint32]) -> (Tensor[(1, 9, 10), float64], Tensor[(5, 6, 14), uint16], Tensor[(420, 1), uint16], Tensor[(1, 9, 10), float32], Tensor[(14, 144), float32], Tensor[(9, 15, 9), float32], Tensor[(640), float64], Tensor[(1215), float32], Tensor[(126, 2), float64], Tensor[(525, 1), uint8], Tensor[(210, 3), uint32], Tensor[(252), float64], Tensor[(2, 1008), float32], Tensor[(15, 8, 7), float64]) {
  %464 = cast(%var_12217, dtype="uint16") /* ty=Tensor[(420, 1), uint16] */;
  %465 = reshape(%464, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), uint16] */;
  %466 = @func_5222(%465) /* ty=(Tensor[(5, 6, 14), uint16],) */;
  %467 = @func_11009() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %468 = @func_10285() /* ty=(Tensor[(?, 9, 10), bool], Tensor[(14, 144), int16]) */;
  %469 = %468.1;
  %470 = cast(%469, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
  %471 = cast(meta[relay.Constant][30] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %472 = cast(meta[relay.Constant][31] /* ty=Tensor[(1215), float32] */, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %473 = cast(%var_12242, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
  %474 = cast(meta[relay.Constant][32] /* ty=Tensor[(525, 1), uint8] */, dtype="uint8") /* ty=Tensor[(525, 1), uint8] */;
  %475 = cast(%var_12244, dtype="uint32") /* ty=Tensor[(210, 3), uint32] */;
  %476 = cast(meta[relay.Constant][30] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %477 = reshape(%471, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float64] */;
  %478 = reshape(%472, newshape=[1215]) /* ty=Tensor[(1215), float32] */;
  %479 = reshape(%473, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %480 = reshape(%474, newshape=[1, 525]) /* ty=Tensor[(1, 525), uint8] */;
  %481 = reshape(%475, newshape=[630]) /* ty=Tensor[(630), uint32] */;
  %482 = reshape(%476, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float64] */;
  %483 = @func_4830(%477, %478, %479, %480, %481, %482) /* ty=(Tensor[(10, 16, 4), int64], Tensor[(9, 15, 9), float32], Tensor[(1215), float32], Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(840), float32], Tensor[(512), float64], Tensor[(256, 2), float64], Tensor[(5, 195), int64], Tensor[(252), float64], Tensor[(15, 5, 7), bool], Tensor[(1, 525), uint8], Tensor[(9, 15, 9), float32], Tensor[(10, 7, 9), uint32], Tensor[(630), uint32], Tensor[(5, 195), int64], Tensor[(10, 16, 4), bool]) */;
  %484 = cast(%var_12242, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
  %485 = reshape(%484, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %486 = @func_11979(%485) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(252), float64]) */;
  %487 = cast(%var_12242, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
  %488 = reshape(%487, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %489 = @func_10105(%488) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(2, 1008), float32], Tensor[(6, 14, 3), float64], Tensor[(252), float64]) */;
  %490 = sinh(%470) /* ty=Tensor[(14, 144), float32] */;
  %491 = cast(%490, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
  %492 = reshape(%491, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %493 = @func_7350(%492) /* ty=(Tensor[(840), float64], Tensor[(16, 9, 14), uint64], Tensor[(2016), float32], Tensor[(15, 8, 7), float64]) */;
  %494 = @func_10966() /* ty=Tensor[(1, 9, 10), float64] */;
  %495 = %466.0;
  %496 = %467.0;
  %497 = %483.1;
  %498 = %486.2;
  %499 = %489.2;
  %500 = %493.3;
  (%494, %495, %var_12217, %496, %490, %497, meta[relay.Constant][30] /* ty=Tensor[(640), float64] */, meta[relay.Constant][31] /* ty=Tensor[(1215), float32] */, %var_12242, meta[relay.Constant][32] /* ty=Tensor[(525, 1), uint8] */, %var_12244, %498, %499, %500)
}

def @func_11009() -> (Tensor[(1, 9, 10), float32],) {
  %501 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %502 = %501.0;
  (%502,)
}

def @func_7688() -> Tensor[(1, 9, 10), float64] {
  %503 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %504 = %503.0;
  %505 = cast(%504, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
  asin(%505) /* ty=Tensor[(1, 9, 10), float64] */
}

def @func_8464() -> Tensor[(1, 9, 10), float32] {
  @func_7975() /* ty=Tensor[(1, 9, 10), float32] */
}

def @func_15033() -> (Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) {
  %506 = @func_9106() /* ty=(Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) */;
  %507 = @func_11592() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %508 = %506.0;
  %509 = %507.0;
  (%508, %509)
}

def @func_2646(%var_2611: Tensor[(13, 15, 5), int64]) -> (Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) {
  %510 = cast(-5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %511 = cast(%var_2611, dtype="int64") /* ty=Tensor[(13, 15, 5), int64] */;
  %512 = cast(meta[relay.Constant][33] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
  %513 = reshape(%512, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), float64] */;
  %514 = @func_1141(%513) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(2, 420), float32], Tensor[(8, 8, 8), bool], Tensor[(15, 8, 7), float64], Tensor[(8, 8, 8), uint32]) */;
  %515 = %514.2;
  %516 = cast(%515, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
  %517 = subtract(%510, %511) /* ty=Tensor[(13, 15, 5), int64] */;
  %518 = acosh(%516) /* ty=Tensor[(2, 420), float32] */;
  (%517, meta[relay.Constant][33] /* ty=Tensor[(512), float64] */, %518)
}

def @func_7024(%var_6982: Tensor[(117, 2), bool], %var_7001: Tensor[(15, 8, 7), float64]) -> (Tensor[(117, 2), bool], Tensor[(840), float32], Tensor[(?, 9, 10), int32], Tensor[(15, 8, 7), bool], Tensor[(?, 9, 10), float64], Tensor[(?, 9, 10), uint8]) {
  %519 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %520 = %519.0;
  %521 = cast(%520, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %522 = erf(%521) /* ty=Tensor[(1, 9, 10), float32] */;
  %523 = cast(%520, dtype="int64") /* ty=Tensor[(1, 9, 10), int64] */;
  %524 = shape_of(%522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%522, dtype="int64") /* ty=Tensor[(1, 9, 10), int64] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %527 = bitwise_and(%525, %526) /* ty=Tensor[(?, 9, 10), int64] */;
  %528 = cast(%522, dtype="int32") /* ty=Tensor[(1, 9, 10), int32] */;
  %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%527, dtype="int32") /* ty=Tensor[(?, 9, 10), int32] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %532 = cast(%var_6982, dtype="bool") /* ty=Tensor[(117, 2), bool] */;
  %533 = cast(%var_6982, dtype="bool") /* ty=Tensor[(117, 2), bool] */;
  %534 = cast(meta[relay.Constant][34] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %535 = reshape(%532, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %536 = reshape(%533, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %537 = reshape(%534, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %538 = @func_1090(%535, %536, %537) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(15, 8, 7), float64]) */;
  %539 = %538.5;
  %540 = cast(%var_7001, dtype="bool") /* ty=Tensor[(15, 8, 7), bool] */;
  %541 = shape_of(%539, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(%539, dtype="bool") /* ty=Tensor[(15, 8, 7), bool] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %544 = cast(%520, dtype="int8") /* ty=Tensor[(1, 9, 10), int8] */;
  %545 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%527, dtype="int8") /* ty=Tensor[(?, 9, 10), int8] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %548 = bitwise_or(%546, %547) /* ty=Tensor[(?, 9, 10), int8] */;
  %549 = cast(%548, dtype="float64") /* ty=Tensor[(?, 9, 10), float64] */;
  %550 = cast(%527, dtype="float64") /* ty=Tensor[(?, 9, 10), float64] */;
  %551 = shape_of(%522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%522, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %554 = floor_mod(%552, %553) /* ty=Tensor[(?, 9, 10), float64] */;
  %555 = cast(%554, dtype="uint8") /* ty=Tensor[(?, 9, 10), uint8] */;
  %556 = shape_of(%522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%522, dtype="uint8") /* ty=Tensor[(1, 9, 10), uint8] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %559 = bitwise_xor(%530, %531) /* ty=Tensor[(?, 9, 10), int32] */;
  %560 = equal(%542, %543) /* ty=Tensor[(15, 8, 7), bool] */;
  %561 = log2(%549) /* ty=Tensor[(?, 9, 10), float64] */;
  %562 = left_shift(%557, %558) /* ty=Tensor[(?, 9, 10), uint8] */;
  (%var_6982, meta[relay.Constant][34] /* ty=Tensor[(840), float32] */, %559, %560, %561, %562)
}

def @func_10473() -> (Tensor[(1, 9, 10), float32], Tensor[(?, 9, 10), bool], Tensor[(1, 9, 10), float64], Tensor[(2, 256), float64]) {
  %563 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %564 = @func_10285() /* ty=(Tensor[(?, 9, 10), bool], Tensor[(14, 144), int16]) */;
  %565 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 256), float64] */, dtype="float64") /* ty=Tensor[(2, 256), float64] */;
  %566 = reshape(%565, newshape=[512]) /* ty=Tensor[(512), float64] */;
  %567 = @func_7733(%566) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(512), float64]) */;
  %568 = %563.0;
  %569 = %564.0;
  %570 = %567.0;
  (%568, %569, %570, meta[relay.Constant][35] /* ty=Tensor[(2, 256), float64] */)
}

def @func_11667(%var_11652: Tensor[(252, 1), float64], %var_11660: Tensor[(252, 4), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(15, 8, 7), bool], Tensor[(1, 9, 10), float32], Tensor[(252, 4), bool]) {
  %571 = @func_9389() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %572 = cast(%var_11652, dtype="float64") /* ty=Tensor[(252, 1), float64] */;
  %573 = reshape(%572, newshape=[3, 84]) /* ty=Tensor[(3, 84), float64] */;
  %574 = @func_10399(%573) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(2016), float32], Tensor[(1, 9, 10), float64], Tensor[(3, 84), uint64]) */;
  %575 = @func_11581() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %576 = cast(%var_11652, dtype="bool") /* ty=Tensor[(252, 1), bool] */;
  %577 = cast(%var_11660, dtype="bool") /* ty=Tensor[(252, 4), bool] */;
  %578 = %571.0;
  %579 = %574.0;
  %580 = @func_10602() /* ty=Tensor[(15, 8, 7), bool] */;
  %581 = %575.0;
  %582 = greater(%576, %577) /* ty=Tensor[(252, 4), bool] */;
  (%578, %579, %580, %581, %582)
}

def @func_7155() -> (Tensor[(15, 8, 7), bool], Tensor[(16, 9, 14), uint64], Tensor[(2016, 1), float32]) {
  %583 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %584 = cast(meta[relay.Constant][36] /* ty=Tensor[(2016, 1), float32] */, dtype="float32") /* ty=Tensor[(2016, 1), float32] */;
  %585 = cast(meta[relay.Constant][36] /* ty=Tensor[(2016, 1), float32] */, dtype="float32") /* ty=Tensor[(2016, 1), float32] */;
  %586 = reshape(%584, newshape=[16, 9, 14]) /* ty=Tensor[(16, 9, 14), float32] */;
  %587 = reshape(%585, newshape=[16, 9, 14]) /* ty=Tensor[(16, 9, 14), float32] */;
  %588 = @func_6349(%586, %587) /* ty=(Tensor[(16, 9, 14), uint64],) */;
  %589 = %583.1;
  %590 = %588.0;
  (%589, %590, meta[relay.Constant][36] /* ty=Tensor[(2016, 1), float32] */)
}

def @func_9961() -> (Tensor[(?, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(975), int64]) {
  %591 = @func_8686() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %592 = %591.0;
  %593 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %594 = %593.0;
  %595 = cast(%594, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %596 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%592, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %599 = cast(meta[relay.Constant][37] /* ty=Tensor[(975), int64] */, dtype="int64") /* ty=Tensor[(975), int64] */;
  %600 = reshape(%599, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), int64] */;
  %601 = @func_2646(%600) /* ty=(Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) */;
  %602 = subtract(%597, %598) /* ty=Tensor[(?, 9, 10), float32] */;
  %603 = @func_7688() /* ty=Tensor[(1, 9, 10), float64] */;
  %604 = %601.2;
  (%602, %603, %604, meta[relay.Constant][37] /* ty=Tensor[(975), int64] */)
}

def @func_7417(%var_7380: Tensor[(234), bool], %var_7381: Tensor[(2, 420), float64], %var_7413: Tensor[(2, 420), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(117, 2), bool], Tensor[(234), bool], Tensor[(1, 9, 10), float32], Tensor[(2, 420), uint16]) {
  %605 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %606 = cast(%var_7380, dtype="bool") /* ty=Tensor[(234), bool] */;
  %607 = cast(%var_7381, dtype="float64") /* ty=Tensor[(2, 420), float64] */;
  %608 = reshape(%606, newshape=[117, 2]) /* ty=Tensor[(117, 2), bool] */;
  %609 = reshape(%607, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float64] */;
  %610 = @func_7024(%608, %609) /* ty=(Tensor[(117, 2), bool], Tensor[(840), float32], Tensor[(?, 9, 10), int32], Tensor[(15, 8, 7), bool], Tensor[(?, 9, 10), float64], Tensor[(?, 9, 10), uint8]) */;
  %611 = cast(%var_7413, dtype="uint16") /* ty=Tensor[(2, 420), uint16] */;
  %612 = shape_of(%var_7381, dtype="int32") /* ty=Tensor[(2), int32] */;
  %613 = cast(%var_7381, dtype="uint16") /* ty=Tensor[(2, 420), uint16] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %615 = %605.0;
  %616 = %610.0;
  %617 = @func_6811() /* ty=Tensor[(1, 9, 10), float32] */;
  %618 = add(%613, %614) /* ty=Tensor[(2, 420), uint16] */;
  (%615, %616, %var_7380, %617, %618)
}

def @func_14310(%var_14307: Tensor[(2, 15, 13), float32]) -> Tensor[(2, 15, 13), float32] {
  %619 = cast(%var_14307, dtype="float32") /* ty=Tensor[(2, 15, 13), float32] */;
  exp(%619) /* ty=Tensor[(2, 15, 13), float32] */
}

def @func_14465() -> (Tensor[(12, 6, 9), float64], Tensor[(1, 9, 10), float64]) {
  %620 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
  %621 = %620.1;
  %622 = @func_10966() /* ty=Tensor[(1, 9, 10), float64] */;
  (%621, %622)
}

def @func_7099(%var_7092: Tensor[(6, 5, 3), float64]) -> Tensor[(6, 5, 3), float64] {
  %623 = cast(%var_7092, dtype="float64") /* ty=Tensor[(6, 5, 3), float64] */;
  sinh(%623) /* ty=Tensor[(6, 5, 3), float64] */
}

def @func_7975() -> Tensor[(1, 9, 10), float32] {
  %624 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %624.0
}

def @func_10055() -> (Tensor[(15, 8, 7), bool], Tensor[(9, 2, 13), bool], Tensor[(512), float64], Tensor[(512), float64], Tensor[(975), int64]) {
  %625 = @func_9470() /* ty=(Tensor[(15, 8, 7), bool], Tensor[(1, 9, 10), float32]) */;
  %626 = cast(meta[relay.Constant][38] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
  %627 = reshape(%626, newshape=[512]) /* ty=Tensor[(512), float64] */;
  %628 = @func_1334(%627) /* ty=(Tensor[(5, 16, 13), float64], Tensor[(9, 2, 13), bool], Tensor[(512), float64]) */;
  %629 = cast(meta[relay.Constant][39] /* ty=Tensor[(975), int64] */, dtype="int64") /* ty=Tensor[(975), int64] */;
  %630 = reshape(%629, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), int64] */;
  %631 = @func_2646(%630) /* ty=(Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) */;
  %632 = %625.0;
  %633 = %628.1;
  %634 = %631.1;
  (%632, %633, meta[relay.Constant][38] /* ty=Tensor[(512), float64] */, %634, meta[relay.Constant][39] /* ty=Tensor[(975), int64] */)
}

def @func_10337() -> (Tensor[(12, 6, 9), float64],) {
  %635 = @func_8330() /* ty=(Tensor[(12, 6, 9), float64],) */;
  %636 = %635.0;
  (%636,)
}

def @func_11346() -> (Tensor[(2, 420), float32],) {
  %637 = @func_11342() /* ty=(Tensor[(12, 6, 9), float64], Tensor[(2, 420), float32]) */;
  %638 = %637.1;
  (%638,)
}

def @func_9266() -> Tensor[(10, 9, 10), float64] {
  %639 = @func_7975() /* ty=Tensor[(1, 9, 10), float32] */;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
  %641 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 9, 10), float32] */, dtype="float64") /* ty=Tensor[(10, 9, 10), float64] */;
  floor_mod(%640, %641) /* ty=Tensor[(10, 9, 10), float64] */
}

def @func_8686() -> (Tensor[(1, 9, 10), float32],) {
  %642 = @func_8464() /* ty=Tensor[(1, 9, 10), float32] */;
  (%642,)
}

def @func_11827(%var_11823: Tensor[(2730), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(2730), float32], Tensor[(2730), float32]) {
  %643 = @func_9106() /* ty=(Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) */;
  %644 = cast(%var_11823, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %645 = reshape(%644, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %646 = @func_10197(%645) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(13, 14, 15), float32], Tensor[(2730), float32], Tensor[(512), float64], Tensor[(975), int64], Tensor[(13, 14, 15), float32]) */;
  %647 = %643.1;
  %648 = %646.2;
  (%647, %648, %var_11823)
}

def @func_9428(%var_9421: Tensor[(1152), int64]) -> (Tensor[(12, 6, 9), float64], Tensor[(8, 12, 12), bool], Tensor[(1152), int64]) {
  %649 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
  %650 = cast(%var_9421, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %651 = cast(%var_9421, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %652 = reshape(%650, newshape=[8, 12, 12]) /* ty=Tensor[(8, 12, 12), int64] */;
  %653 = reshape(%651, newshape=[8, 12, 12]) /* ty=Tensor[(8, 12, 12), int64] */;
  %654 = @func_3371(%652, %653) /* ty=(Tensor[(8, 12, 12), bool],) */;
  %655 = %649.1;
  %656 = %654.0;
  (%655, %656, %var_9421)
}

def @func_10220() -> Tensor[(15, 8, 7), float64] {
  %657 = @func_8531() /* ty=Tensor[(15, 8, 7), bool] */;
  %658 = cast(%657, dtype="float64") /* ty=Tensor[(15, 8, 7), float64] */;
  rsqrt(%658) /* ty=Tensor[(15, 8, 7), float64] */
}

def @func_14774(%var_14764: Tensor[(320, 1), float64]) -> (Tensor[(16, 9, 14), uint64], Tensor[(840), float64], Tensor[(2730), float32], Tensor[(16, 9, 14), uint64], Tensor[(320, 1), float64], Tensor[(16, 1, 15), float32], Tensor[(120, 2), float32]) {
  %659 = @func_7155() /* ty=(Tensor[(15, 8, 7), bool], Tensor[(16, 9, 14), uint64], Tensor[(2016, 1), float32]) */;
  %660 = cast(meta[relay.Constant][41] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %661 = reshape(%660, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %662 = @func_9189(%661) /* ty=(Tensor[(840), float64], Tensor[(13, 14, 15), float32], Tensor[(2730), float32]) */;
  %663 = cast(%var_14764, dtype="float64") /* ty=Tensor[(320, 1), float64] */;
  %664 = cast(%var_14764, dtype="float64") /* ty=Tensor[(320, 1), float64] */;
  %665 = %659.1;
  %666 = cast(%665, dtype="float32") /* ty=Tensor[(16, 9, 14), float32] */;
  %667 = reshape(%663, newshape=[10, 8, 4]) /* ty=Tensor[(10, 8, 4), float64] */;
  %668 = reshape(%664, newshape=[10, 8, 4]) /* ty=Tensor[(10, 8, 4), float64] */;
  %669 = reshape(%666, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %670 = @func_14359(%667, %668, %669) /* ty=(Tensor[(10, 8, 4), float64], Tensor[(?, 9, 10), bool], Tensor[(16, 9, 14), uint64], Tensor[(2016), float32], Tensor[(1, 9, 10), float32]) */;
  %671 = cast(meta[relay.Constant][42] /* ty=Tensor[(120, 2), float32] */, dtype="float32") /* ty=Tensor[(120, 2), float32] */;
  %672 = reshape(%671, newshape=[16, 1, 15]) /* ty=Tensor[(16, 1, 15), float32] */;
  %673 = %662.0;
  %674 = %670.2;
  %675 = @func_5719(%672) /* ty=Tensor[(16, 1, 15), float32] */;
  (%665, %673, meta[relay.Constant][41] /* ty=Tensor[(2730), float32] */, %674, %var_14764, %675, meta[relay.Constant][42] /* ty=Tensor[(120, 2), float32] */)
}

def @func_7350(%var_7335: Tensor[(2016), float32]) -> (Tensor[(840), float64], Tensor[(16, 9, 14), uint64], Tensor[(2016), float32], Tensor[(15, 8, 7), float64]) {
  %676 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
  %677 = cast(%var_7335, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %678 = cast(%var_7335, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %679 = reshape(%677, newshape=[16, 9, 14]) /* ty=Tensor[(16, 9, 14), float32] */;
  %680 = reshape(%678, newshape=[16, 9, 14]) /* ty=Tensor[(16, 9, 14), float32] */;
  %681 = @func_6349(%679, %680) /* ty=(Tensor[(16, 9, 14), uint64],) */;
  %682 = %676.0;
  %683 = cast(%682, dtype="float32") /* ty=Tensor[(840), float32] */;
  %684 = reshape(%683, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float32] */;
  %685 = @func_917(%684) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %686 = %681.0;
  %687 = %685.0;
  (%682, %686, %var_7335, %687)
}

def @func_12765() -> Tensor[(1, 9, 10), float64] {
  @func_8003() /* ty=Tensor[(1, 9, 10), float64] */
}

def @func_8003() -> Tensor[(1, 9, 10), float64] {
  @func_7688() /* ty=Tensor[(1, 9, 10), float64] */
}

def @func_8400(%var_8382: Tensor[(12, 6, 9), float64]) -> (Tensor[(234), float32], Tensor[(3, 216), float64], Tensor[(12, 6, 9), int8]) {
  %688 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %689 = %688.2;
  %690 = cast(%689, dtype="float32") /* ty=Tensor[(234), float32] */;
  %691 = cos(%690) /* ty=Tensor[(234), float32] */;
  %692 = cast(%691, dtype="float32") /* ty=Tensor[(234), float32] */;
  %693 = shape_of(%689, dtype="int32") /* ty=Tensor[(1), int32] */;
  %694 = cast(%689, dtype="float32") /* ty=Tensor[(234), float32] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?), float32] */;
  %696 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 216), float64] */, dtype="float64") /* ty=Tensor[(3, 216), float64] */;
  %697 = reshape(%696, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %698 = @func_4912(%697) /* ty=Tensor[(12, 6, 9), float64] */;
  %699 = cast(%var_8382, dtype="int8") /* ty=Tensor[(12, 6, 9), int8] */;
  %700 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%698, dtype="int8") /* ty=Tensor[(12, 6, 9), int8] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %703 = minimum(%694, %695) /* ty=Tensor[(234), float32] */;
  %704 = minimum(%701, %702) /* ty=Tensor[(12, 6, 9), int8] */;
  (%703, meta[relay.Constant][43] /* ty=Tensor[(3, 216), float64] */, %704)
}

def @func_13800() -> Tensor[(10, 9, 10), float64] {
  %705 = @func_12854() /* ty=(Tensor[(10, 9, 10), float64],) */;
  %705.0
}

def @func_10789(%var_10763: Tensor[(60, 14), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(840), float32], Tensor[(234), bool], Tensor[(60, 14), float32], Tensor[(1, 9, 10), float64]) {
  %706 = @func_9350() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %707 = cast(meta[relay.Constant][44] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
  %708 = cast(meta[relay.Constant][44] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
  %709 = cast(%var_10763, dtype="float32") /* ty=Tensor[(60, 14), float32] */;
  %710 = reshape(%707, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %711 = reshape(%708, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %712 = reshape(%709, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %713 = @func_1090(%710, %711, %712) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(15, 8, 7), float64]) */;
  %714 = %706.0;
  %715 = %713.2;
  %716 = @func_7688() /* ty=Tensor[(1, 9, 10), float64] */;
  (%714, %715, meta[relay.Constant][44] /* ty=Tensor[(234), bool] */, %var_10763, %716)
}

def @func_9189(%var_9185: Tensor[(2730), float32]) -> (Tensor[(840), float64], Tensor[(13, 14, 15), float32], Tensor[(2730), float32]) {
  %717 = cast(%var_9185, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %718 = reshape(%717, newshape=[13, 14, 15]) /* ty=Tensor[(13, 14, 15), float32] */;
  %719 = @func_8646() /* ty=Tensor[(840), float64] */;
  %720 = @func_6559(%718) /* ty=Tensor[(13, 14, 15), float32] */;
  (%719, %720, %var_9185)
}

def @func_12998(%var_12983: Tensor[(252), float64], %var_12984: Tensor[(1008), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32], Tensor[(252), float64], Tensor[(1008), float64], Tensor[(12, 9, 10), float64], Tensor[(1080), float32]) {
  %721 = @func_11685() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %722 = cast(%var_12983, dtype="float64") /* ty=Tensor[(252), float64] */;
  %723 = cast(%var_12984, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %724 = reshape(%722, newshape=[252, 1]) /* ty=Tensor[(252, 1), float64] */;
  %725 = reshape(%723, newshape=[252, 4]) /* ty=Tensor[(252, 4), float64] */;
  %726 = @func_11667(%724, %725) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(15, 8, 7), bool], Tensor[(1, 9, 10), float32], Tensor[(252, 4), bool]) */;
  %727 = cast(meta[relay.Constant][45] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %728 = reshape(%727, newshape=[12, 9, 10]) /* ty=Tensor[(12, 9, 10), float32] */;
  %729 = @func_12021(%728) /* ty=(Tensor[(12, 9, 10), bool], Tensor[(12, 9, 10), float64]) */;
  %730 = %721.0;
  %731 = %726.0;
  %732 = %729.1;
  (%730, %731, %var_12983, %var_12984, %732, meta[relay.Constant][45] /* ty=Tensor[(1080), float32] */)
}

def @func_13981() -> (Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32], Tensor[(840), float64]) {
  %733 = @func_11581() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %734 = @func_8464() /* ty=Tensor[(1, 9, 10), float32] */;
  %735 = %733.0;
  %736 = @func_8646() /* ty=Tensor[(840), float64] */;
  (%734, %735, %736)
}

def @func_10673() -> (Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float32], Tensor[(10, 9, 10), float64], Tensor[(15, 8, 7), bool], Tensor[(1, 975), int64]) {
  %737 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %738 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 975), int64] */, dtype="int64") /* ty=Tensor[(1, 975), int64] */;
  %739 = reshape(%738, newshape=[325, 3]) /* ty=Tensor[(325, 3), int64] */;
  %740 = @func_10587(%739) /* ty=(Tensor[(15, 8, 7), bool], Tensor[(512), float64], Tensor[(325, 3), bool], Tensor[(325, 3), float32], Tensor[(2, 16, 2), float32]) */;
  %741 = @func_8790() /* ty=Tensor[(1, 9, 10), float64] */;
  %742 = @func_8790() /* ty=Tensor[(1, 9, 10), float64] */;
  %743 = %737.0;
  %744 = @func_9266() /* ty=Tensor[(10, 9, 10), float64] */;
  %745 = %740.0;
  (%741, %742, %743, %744, %745, meta[relay.Constant][46] /* ty=Tensor[(1, 975), int64] */)
}

def @func_10105(%var_10100: Tensor[(252), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(2, 1008), float32], Tensor[(6, 14, 3), float64], Tensor[(252), float64]) {
  %746 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %747 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 1008), float32] */, dtype="float32") /* ty=Tensor[(2, 1008), float32] */;
  %748 = reshape(%747, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %749 = @func_7350(%748) /* ty=(Tensor[(840), float64], Tensor[(16, 9, 14), uint64], Tensor[(2016), float32], Tensor[(15, 8, 7), float64]) */;
  %750 = cast(%var_10100, dtype="float64") /* ty=Tensor[(252), float64] */;
  %751 = cast(%var_10100, dtype="float64") /* ty=Tensor[(252), float64] */;
  %752 = reshape(%750, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float64] */;
  %753 = reshape(%751, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float64] */;
  %754 = @func_2710(%752, %753) /* ty=(Tensor[(6, 14, 3), float64], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) */;
  %755 = %746.0;
  %756 = %749.2;
  %757 = %754.0;
  (%755, %756, meta[relay.Constant][47] /* ty=Tensor[(2, 1008), float32] */, %757, %var_10100)
}

def @func_2797(%var_2781: Tensor[(15, 5, 7), uint8], %var_2782: Tensor[(15, 5, 7), uint8]) -> Tensor[(15, 5, 7), bool] {
  %758 = cast(%var_2782, dtype="bool") /* ty=Tensor[(15, 5, 7), bool] */;
  %759 = shape_of(%var_2781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%var_2781, dtype="bool") /* ty=Tensor[(15, 5, 7), bool] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%760, %761) /* ty=Tensor[(15, 5, 7), bool] */
}

def @func_14866() -> (Tensor[(1, 9, 10), float32],) {
  %762 = @func_11009() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %763 = %762.0;
  (%763,)
}

def @func_7551(%var_7539: Tensor[(576, 2), int64]) -> (Tensor[(12, 6, 9), bool], Tensor[(8, 12, 12), bool], Tensor[(576, 2), int64], Tensor[(12, 6, 9), float64], Tensor[(12, 6, 9), float32]) {
  %764 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
  %765 = %764.1;
  %766 = cast(meta[relay.Constant][48] /* ty=Tensor[(12, 6, 9), float64] */, dtype="bool") /* ty=Tensor[(12, 6, 9), bool] */;
  %767 = shape_of(%765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%765, dtype="bool") /* ty=Tensor[(12, 6, 9), bool] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %770 = cast(%var_7539, dtype="int64") /* ty=Tensor[(576, 2), int64] */;
  %771 = reshape(%770, newshape=[1152]) /* ty=Tensor[(1152), int64] */;
  %772 = @func_7234(%771) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(8, 12, 12), bool], Tensor[(1152), int64], Tensor[(1, 9, 10), float32], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) */;
  %773 = cast(%765, dtype="float64") /* ty=Tensor[(12, 6, 9), float64] */;
  %774 = sqrt(%773) /* ty=Tensor[(12, 6, 9), float64] */;
  %775 = cast(%774, dtype="float64") /* ty=Tensor[(12, 6, 9), float64] */;
  %776 = cast(%774, dtype="float32") /* ty=Tensor[(12, 6, 9), float32] */;
  %777 = greater(%768, %769) /* ty=Tensor[(12, 6, 9), bool] */;
  %778 = %772.1;
  %779 = atan(%775) /* ty=Tensor[(12, 6, 9), float64] */;
  %780 = rsqrt(%776) /* ty=Tensor[(12, 6, 9), float32] */;
  (%777, %778, %var_7539, %779, %780)
}

def @func_14378() -> (Tensor[(2, 420), float32],) {
  %781 = @func_9961() /* ty=(Tensor[(?, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(975), int64]) */;
  %782 = %781.2;
  (%782,)
}

def @func_12891(%var_12881: Tensor[(12, 6, 9), float64]) -> Tensor[(12, 6, 9), bool] {
  %783 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
  %784 = %783.1;
  %785 = cast(%var_12881, dtype="bool") /* ty=Tensor[(12, 6, 9), bool] */;
  %786 = shape_of(%784, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%784, dtype="bool") /* ty=Tensor[(12, 6, 9), bool] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%787, %788) /* ty=Tensor[(12, 6, 9), bool] */
}

def @func_6700() -> (Tensor[(1, 9, 10), float32],) {
  %789 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 9, 10), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %790 = cos(%789) /* ty=Tensor[(1, 9, 10), float32] */;
  (%790,)
}

def @func_12963() -> (Tensor[(15, 8, 7), bool],) {
  %791 = @func_8531() /* ty=Tensor[(15, 8, 7), bool] */;
  (%791,)
}

def @func_10587(%var_10572: Tensor[(325, 3), int64]) -> (Tensor[(15, 8, 7), bool], Tensor[(512), float64], Tensor[(325, 3), bool], Tensor[(325, 3), float32], Tensor[(2, 16, 2), float32]) {
  %792 = cast(meta[relay.Constant][50] /* ty=Tensor[(325, 3), int64] */, dtype="int64") /* ty=Tensor[(325, 3), int64] */;
  %793 = reshape(%792, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), int64] */;
  %794 = @func_2646(%793) /* ty=(Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) */;
  %795 = cast(%var_10572, dtype="bool") /* ty=Tensor[(325, 3), bool] */;
  %796 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(325, 3), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %797 = cast(meta[relay.Constant][50] /* ty=Tensor[(325, 3), int64] */, dtype="bool") /* ty=Tensor[(325, 3), bool] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %799 = cast(meta[relay.Constant][50] /* ty=Tensor[(325, 3), int64] */, dtype="float32") /* ty=Tensor[(325, 3), float32] */;
  %800 = @func_8531() /* ty=Tensor[(15, 8, 7), bool] */;
  %801 = %794.1;
  %802 = logical_or(%797, %798) /* ty=Tensor[(325, 3), bool] */;
  %803 = sin(%799) /* ty=Tensor[(325, 3), float32] */;
  %804 = @func_9784() /* ty=Tensor[(2, 16, 2), float32] */;
  (%800, %801, %802, %803, %804)
}

def @func_6882() -> (Tensor[(1, 9, 10), float32],) {
  %805 = @func_6811() /* ty=Tensor[(1, 9, 10), float32] */;
  (%805,)
}

def @func_11979(%var_11974: Tensor[(252), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(252), float64]) {
  %806 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %807 = cast(%var_11974, dtype="float64") /* ty=Tensor[(252), float64] */;
  %808 = reshape(%807, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %809 = @func_10105(%808) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(2, 1008), float32], Tensor[(6, 14, 3), float64], Tensor[(252), float64]) */;
  %810 = %806.0;
  %811 = %809.1;
  (%810, %811, %var_11974)
}

def @func_11022(%var_11016: Tensor[(8, 12, 5), float32]) -> (Tensor[(8, 12, 5), float32],) {
  %812 = cast(%var_11016, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %813 = asin(%812) /* ty=Tensor[(8, 12, 5), float32] */;
  (%813,)
}

def @func_8967() -> (Tensor[(1, 9, 10), float32],) {
  %814 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %815 = %814.0;
  (%815,)
}

def @func_11633(%var_11613: Tensor[(2730), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(2730), float32], Tensor[(2730), float32]) {
  %816 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %817 = cast(meta[relay.Constant][51] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %818 = reshape(%817, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float32] */;
  %819 = @func_917(%818) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %820 = cast(%var_11613, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %821 = reshape(%820, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %822 = @func_9189(%821) /* ty=(Tensor[(840), float64], Tensor[(13, 14, 15), float32], Tensor[(2730), float32]) */;
  %823 = %816.0;
  %824 = %819.0;
  %825 = %822.2;
  (%823, %824, meta[relay.Constant][51] /* ty=Tensor[(840), float32] */, %825, %var_11613)
}

def @func_917(%var_888: Tensor[(15, 8, 7), float32]) -> (Tensor[(15, 8, 7), float64],) {
  %826 = cast(%var_888, dtype="float32") /* ty=Tensor[(15, 8, 7), float32] */;
  %827 = log(%826) /* ty=Tensor[(15, 8, 7), float32] */;
  %828 = cast(%827, dtype="float64") /* ty=Tensor[(15, 8, 7), float64] */;
  %829 = cos(%828) /* ty=Tensor[(15, 8, 7), float64] */;
  (%829,)
}

def @func_9533() -> Tensor[(1, 9, 10), float64] {
  @func_8003() /* ty=Tensor[(1, 9, 10), float64] */
}

def @func_7279() -> (Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) {
  %830 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %831 = cast(meta[relay.Constant][52] /* ty=Tensor[(3, 216), float64] */, dtype="float64") /* ty=Tensor[(3, 216), float64] */;
  %832 = reshape(%831, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %833 = @func_4912(%832) /* ty=Tensor[(12, 6, 9), float64] */;
  %834 = cast(meta[relay.Constant][52] /* ty=Tensor[(3, 216), float64] */, dtype="float64") /* ty=Tensor[(3, 216), float64] */;
  %835 = shape_of(%833, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%833, dtype="float64") /* ty=Tensor[(12, 6, 9), float64] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %838 = @func_7155() /* ty=(Tensor[(15, 8, 7), bool], Tensor[(16, 9, 14), uint64], Tensor[(2016, 1), float32]) */;
  %839 = %830.3;
  %840 = floor_mod(%836, %837) /* ty=Tensor[(12, 6, 9), float64] */;
  %841 = %838.2;
  (%839, %840, %841)
}

def @func_14995(%var_14940: Tensor[(9, 60), float32]) -> (Tensor[(15, 8, 7), float32], Tensor[(1, 9, 10), float32], Tensor[(6, 9, 10), bool], Tensor[(9, 60), float32], Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float64]) {
  %842 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %843 = %842.1;
  %844 = cast(%843, dtype="float32") /* ty=Tensor[(15, 8, 7), float32] */;
  %845 = cast(%var_14940, dtype="float32") /* ty=Tensor[(9, 60), float32] */;
  %846 = @func_11833() /* ty=Tensor[(1, 9, 10), float32] */;
  %847 = cast(%846, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %848 = reshape(%845, newshape=[6, 9, 10]) /* ty=Tensor[(6, 9, 10), float32] */;
  %849 = reshape(%847, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float32] */;
  %850 = @func_8110(%848, %849) /* ty=(Tensor[(6, 9, 10), bool], Tensor[(?, 9, 10), float64]) */;
  %851 = @func_9106() /* ty=(Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) */;
  %852 = @func_8686() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %853 = @func_10473() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(?, 9, 10), bool], Tensor[(1, 9, 10), float64], Tensor[(2, 256), float64]) */;
  %854 = atanh(%844) /* ty=Tensor[(15, 8, 7), float32] */;
  %855 = %850.0;
  %856 = %851.0;
  %857 = %852.0;
  %858 = %853.2;
  (%854, %846, %855, %var_14940, %856, %857, %858)
}

def @func_12875() -> Tensor[(?, 9, 10), bool] {
  %859 = @func_10285() /* ty=(Tensor[(?, 9, 10), bool], Tensor[(14, 144), int16]) */;
  %859.0
}

def @func_9470() -> (Tensor[(15, 8, 7), bool], Tensor[(1, 9, 10), float32]) {
  %860 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %861 = @func_8531() /* ty=Tensor[(15, 8, 7), bool] */;
  %862 = %860.0;
  (%861, %862)
}

def @func_8134(%var_8131: Tensor[(16, 1, 16), float64]) -> Tensor[(16, 1, 16), float64] {
  %863 = cast(%var_8131, dtype="float64") /* ty=Tensor[(16, 1, 16), float64] */;
  asinh(%863) /* ty=Tensor[(16, 1, 16), float64] */
}

def @func_12102() -> Tensor[(12, 6, 9), float32] {
  %864 = @func_8330() /* ty=(Tensor[(12, 6, 9), float64],) */;
  %865 = %864.0;
  %866 = cast(%865, dtype="float32") /* ty=Tensor[(12, 6, 9), float32] */;
  sigmoid(%866) /* ty=Tensor[(12, 6, 9), float32] */
}

def @func_8174(%var_8166: Tensor[(975, 1), int64]) -> (Tensor[(1, 9, 10), float64], Tensor[(13, 15, 5), int64], Tensor[(975, 1), int64]) {
  %867 = cast(%var_8166, dtype="int64") /* ty=Tensor[(975, 1), int64] */;
  %868 = reshape(%867, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), int64] */;
  %869 = @func_2646(%868) /* ty=(Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) */;
  %870 = @func_7688() /* ty=Tensor[(1, 9, 10), float64] */;
  %871 = %869.0;
  (%870, %871, %var_8166)
}

def @func_13468() -> Tensor[(12, 6, 9), float32] {
  %872 = @func_12102() /* ty=Tensor[(12, 6, 9), float32] */;
  %873 = cast(%872, dtype="float32") /* ty=Tensor[(12, 6, 9), float32] */;
  acosh(%873) /* ty=Tensor[(12, 6, 9), float32] */
}

def @func_10966() -> Tensor[(1, 9, 10), float64] {
  %874 = @func_9121() /* ty=(Tensor[(1, 9, 10), float64],) */;
  %874.0
}

def @func_13048() -> (Tensor[(12, 6, 9), float64], Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(840), float32]) {
  %875 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
  %876 = cast(meta[relay.Constant][53] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
  %877 = cast(meta[relay.Constant][53] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
  %878 = cast(meta[relay.Constant][54] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %879 = reshape(%876, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %880 = reshape(%877, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %881 = reshape(%878, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %882 = @func_1090(%879, %880, %881) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(15, 8, 7), float64]) */;
  %883 = %875.1;
  %884 = %882.3;
  (%883, %884, meta[relay.Constant][53] /* ty=Tensor[(234), bool] */, meta[relay.Constant][54] /* ty=Tensor[(840), float32] */)
}

def @func_12449(%var_12445: Tensor[(910, 3), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(840), float64], Tensor[(910, 3), float32]) {
  %885 = cast(%var_12445, dtype="float32") /* ty=Tensor[(910, 3), float32] */;
  %886 = reshape(%885, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %887 = @func_9189(%886) /* ty=(Tensor[(840), float64], Tensor[(13, 14, 15), float32], Tensor[(2730), float32]) */;
  %888 = @func_11833() /* ty=Tensor[(1, 9, 10), float32] */;
  %889 = %887.0;
  (%888, %889, %var_12445)
}

def @func_14159() -> (Tensor[(1, 9, 10), float32], Tensor[(975), int64], Tensor[(648), float64], Tensor[(65, 15), int64], Tensor[(1, 9, 10), float32]) {
  %890 = cast(meta[relay.Constant][55] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %891 = cast(meta[relay.Constant][56] /* ty=Tensor[(65, 15), int64] */, dtype="int64") /* ty=Tensor[(65, 15), int64] */;
  %892 = reshape(%890, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %893 = reshape(%891, newshape=[975]) /* ty=Tensor[(975), int64] */;
  %894 = @func_13380(%892, %893) /* ty=(Tensor[(12, 6, 9), uint16], Tensor[(13, 15, 5), int64], Tensor[(975), int64]) */;
  %895 = @func_8967() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %896 = @func_6811() /* ty=Tensor[(1, 9, 10), float32] */;
  %897 = %894.2;
  %898 = %895.0;
  (%896, %897, meta[relay.Constant][55] /* ty=Tensor[(648), float64] */, meta[relay.Constant][56] /* ty=Tensor[(65, 15), int64] */, %898)
}

def @func_11592() -> (Tensor[(1, 9, 10), float32],) {
  %899 = @func_11009() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %900 = %899.0;
  (%900,)
}

def @func_9784() -> Tensor[(2, 16, 2), float32] {
  %901 = @func_9106() /* ty=(Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) */;
  %901.0
}

def @func_8790() -> Tensor[(1, 9, 10), float64] {
  @func_8003() /* ty=Tensor[(1, 9, 10), float64] */
}

def @func_4830(%var_4716: Tensor[(10, 16, 4), float64], %var_4746: Tensor[(1215), float32], %var_4775: Tensor[(252), float64], %var_4783: Tensor[(1, 525), uint8], %var_4795: Tensor[(630), uint32], %var_4822: Tensor[(10, 16, 4), float64]) -> (Tensor[(10, 16, 4), int64], Tensor[(9, 15, 9), float32], Tensor[(1215), float32], Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(840), float32], Tensor[(512), float64], Tensor[(256, 2), float64], Tensor[(5, 195), int64], Tensor[(252), float64], Tensor[(15, 5, 7), bool], Tensor[(1, 525), uint8], Tensor[(9, 15, 9), float32], Tensor[(10, 7, 9), uint32], Tensor[(630), uint32], Tensor[(5, 195), int64], Tensor[(10, 16, 4), bool]) {
  %902 = cast(%var_4716, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
  %903 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(10, 16, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %904 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 16, 4), float64] */, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %906 = power(%904, %905) /* ty=Tensor[(10, 16, 4), float64] */;
  %907 = cast(%906, dtype="int64") /* ty=Tensor[(10, 16, 4), int64] */;
  %908 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(10, 16, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %909 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 16, 4), float64] */, dtype="int64") /* ty=Tensor[(10, 16, 4), int64] */;
  %910 = dyn.reshape(%907, %908, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %911 = cast(%var_4746, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %912 = reshape(%911, newshape=[9, 15, 9]) /* ty=Tensor[(9, 15, 9), float32] */;
  %913 = @func_2957(%912) /* ty=(Tensor[(9, 15, 9), float32],) */;
  %914 = cast(meta[relay.Constant][58] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
  %915 = cast(meta[relay.Constant][58] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
  %916 = cast(meta[relay.Constant][59] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %917 = reshape(%914, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %918 = reshape(%915, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %919 = reshape(%916, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %920 = @func_1090(%917, %918, %919) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(15, 8, 7), float64]) */;
  %921 = cast(meta[relay.Constant][60] /* ty=Tensor[(256, 2), float64] */, dtype="float64") /* ty=Tensor[(256, 2), float64] */;
  %922 = reshape(%921, newshape=[512]) /* ty=Tensor[(512), float64] */;
  %923 = @func_1334(%922) /* ty=(Tensor[(5, 16, 13), float64], Tensor[(9, 2, 13), bool], Tensor[(512), float64]) */;
  %924 = cast(%var_4775, dtype="float64") /* ty=Tensor[(252), float64] */;
  %925 = cast(%var_4775, dtype="float64") /* ty=Tensor[(252), float64] */;
  %926 = reshape(%924, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float64] */;
  %927 = reshape(%925, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float64] */;
  %928 = @func_2710(%926, %927) /* ty=(Tensor[(6, 14, 3), float64], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) */;
  %929 = cast(%var_4783, dtype="uint8") /* ty=Tensor[(1, 525), uint8] */;
  %930 = cast(%var_4783, dtype="uint8") /* ty=Tensor[(1, 525), uint8] */;
  %931 = reshape(%929, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), uint8] */;
  %932 = reshape(%930, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), uint8] */;
  %933 = %913.0;
  %934 = cast(%933, dtype="float32") /* ty=Tensor[(9, 15, 9), float32] */;
  %935 = reshape(%934, newshape=[9, 15, 9]) /* ty=Tensor[(9, 15, 9), float32] */;
  %936 = @func_2957(%935) /* ty=(Tensor[(9, 15, 9), float32],) */;
  %937 = cast(%var_4795, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %938 = cast(%var_4795, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %939 = reshape(%937, newshape=[10, 7, 9]) /* ty=Tensor[(10, 7, 9), uint32] */;
  %940 = reshape(%938, newshape=[10, 7, 9]) /* ty=Tensor[(10, 7, 9), uint32] */;
  %941 = cast(%var_4775, dtype="float64") /* ty=Tensor[(252), float64] */;
  %942 = cast(%var_4775, dtype="float64") /* ty=Tensor[(252), float64] */;
  %943 = reshape(%941, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float64] */;
  %944 = reshape(%942, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float64] */;
  %945 = @func_2710(%943, %944) /* ty=(Tensor[(6, 14, 3), float64], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) */;
  %946 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 16, 4), float64] */, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
  %947 = atan(%946) /* ty=Tensor[(10, 16, 4), float64] */;
  %948 = cast(%947, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
  %949 = sigmoid(%948) /* ty=Tensor[(10, 16, 4), float64] */;
  %950 = cast(%var_4822, dtype="bool") /* ty=Tensor[(10, 16, 4), bool] */;
  %951 = shape_of(%949, dtype="int32") /* ty=Tensor[(3), int32] */;
  %952 = cast(%949, dtype="bool") /* ty=Tensor[(10, 16, 4), bool] */;
  %953 = dyn.reshape(%950, %951, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %954 = multiply(%909, %910) /* ty=Tensor[(10, 16, 4), int64] */;
  %955 = %920.0;
  %956 = %923.2;
  %957 = %928.2;
  %958 = @func_2797(%931, %932) /* ty=Tensor[(15, 5, 7), bool] */;
  %959 = %936.0;
  %960 = @func_1398(%939, %940) /* ty=Tensor[(10, 7, 9), uint32] */;
  %961 = %945.2;
  %962 = not_equal(%952, %953) /* ty=Tensor[(10, 16, 4), bool] */;
  (%954, %933, %var_4746, %955, meta[relay.Constant][58] /* ty=Tensor[(234), bool] */, meta[relay.Constant][59] /* ty=Tensor[(840), float32] */, %956, meta[relay.Constant][60] /* ty=Tensor[(256, 2), float64] */, %957, %var_4775, %958, %var_4783, %959, %960, %var_4795, %961, %962)
}

def @func_1141(%var_1108: Tensor[(8, 8, 8), float64]) -> (Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(2, 420), float32], Tensor[(8, 8, 8), bool], Tensor[(15, 8, 7), float64], Tensor[(8, 8, 8), uint32]) {
  %963 = cast(meta[relay.Constant][61] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
  %964 = cast(meta[relay.Constant][61] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
  %965 = cast(meta[relay.Constant][62] /* ty=Tensor[(2, 420), float32] */, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
  %966 = reshape(%963, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %967 = reshape(%964, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %968 = reshape(%965, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %969 = @func_1090(%966, %967, %968) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(15, 8, 7), float64]) */;
  %970 = cast(%var_1108, dtype="float64") /* ty=Tensor[(8, 8, 8), float64] */;
  %971 = cos(%970) /* ty=Tensor[(8, 8, 8), float64] */;
  %972 = cast(%971, dtype="float64") /* ty=Tensor[(8, 8, 8), float64] */;
  %973 = atan(%972) /* ty=Tensor[(8, 8, 8), float64] */;
  %974 = cast(%var_1108, dtype="bool") /* ty=Tensor[(8, 8, 8), bool] */;
  %975 = shape_of(%973, dtype="int32") /* ty=Tensor[(3), int32] */;
  %976 = cast(%973, dtype="bool") /* ty=Tensor[(8, 8, 8), bool] */;
  %977 = dyn.reshape(%974, %975, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %978 = cast(meta[relay.Constant][62] /* ty=Tensor[(2, 420), float32] */, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
  %979 = reshape(%978, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float32] */;
  %980 = @func_917(%979) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %981 = cast(%971, dtype="uint32") /* ty=Tensor[(8, 8, 8), uint32] */;
  %982 = shape_of(%973, dtype="int32") /* ty=Tensor[(3), int32] */;
  %983 = cast(%973, dtype="uint32") /* ty=Tensor[(8, 8, 8), uint32] */;
  %984 = dyn.reshape(%981, %982, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %985 = %969.0;
  %986 = not_equal(%976, %977) /* ty=Tensor[(8, 8, 8), bool] */;
  %987 = %980.0;
  %988 = bitwise_xor(%983, %984) /* ty=Tensor[(8, 8, 8), uint32] */;
  (%985, meta[relay.Constant][61] /* ty=Tensor[(234), bool] */, meta[relay.Constant][62] /* ty=Tensor[(2, 420), float32] */, %986, %987, %988)
}

def @func_1398(%var_1387: Tensor[(10, 7, 9), uint32], %var_1388: Tensor[(10, 7, 9), uint32]) -> Tensor[(10, 7, 9), uint32] {
  %989 = cast(%var_1388, dtype="uint32") /* ty=Tensor[(10, 7, 9), uint32] */;
  %990 = shape_of(%var_1387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %991 = cast(%var_1387, dtype="uint32") /* ty=Tensor[(10, 7, 9), uint32] */;
  %992 = dyn.reshape(%989, %990, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%991, %992) /* ty=Tensor[(10, 7, 9), uint32] */
}

def @func_14840() -> Tensor[(12, 6, 9), float64] {
  %993 = @func_14465() /* ty=(Tensor[(12, 6, 9), float64], Tensor[(1, 9, 10), float64]) */;
  %993.0
}

def @func_10846(%var_10838: Tensor[(840), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(12, 6, 9), int8], Tensor[(648), float64], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(?, 9, 10), bool]) {
  %994 = cast(meta[relay.Constant][63] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %995 = reshape(%994, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %996 = @func_8400(%995) /* ty=(Tensor[(234), float32], Tensor[(3, 216), float64], Tensor[(12, 6, 9), int8]) */;
  %997 = cast(%var_10838, dtype="float32") /* ty=Tensor[(840), float32] */;
  %998 = reshape(%997, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float32] */;
  %999 = @func_917(%998) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %1000 = @func_10473() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(?, 9, 10), bool], Tensor[(1, 9, 10), float64], Tensor[(2, 256), float64]) */;
  %1001 = @func_6811() /* ty=Tensor[(1, 9, 10), float32] */;
  %1002 = %996.2;
  %1003 = %999.0;
  %1004 = %1000.1;
  (%1001, %1002, meta[relay.Constant][63] /* ty=Tensor[(648), float64] */, %1003, %var_10838, %1004)
}

def @func_12577(%var_12570: Tensor[(182, 15), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(10, 9, 10), float32], Tensor[(182, 15), float32], Tensor[(910, 3), float64]) {
  %1005 = @func_12431() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %1006 = @func_9266() /* ty=Tensor[(10, 9, 10), float64] */;
  %1007 = cast(%1006, dtype="float32") /* ty=Tensor[(10, 9, 10), float32] */;
  %1008 = cast(%var_12570, dtype="float32") /* ty=Tensor[(182, 15), float32] */;
  %1009 = reshape(%1008, newshape=[910, 3]) /* ty=Tensor[(910, 3), float32] */;
  %1010 = @func_12449(%1009) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(840), float64], Tensor[(910, 3), float32]) */;
  %1011 = %1010.2;
  %1012 = cast(%1011, dtype="float64") /* ty=Tensor[(910, 3), float64] */;
  %1013 = %1005.0;
  %1014 = asin(%1007) /* ty=Tensor[(10, 9, 10), float32] */;
  %1015 = tan(%1012) /* ty=Tensor[(910, 3), float64] */;
  (%1013, %1014, %var_12570, %1015)
}

def @func_14631() -> Tensor[(10, 9, 10), float64] {
  %1016 = @func_12854() /* ty=(Tensor[(10, 9, 10), float64],) */;
  %1016.0
}

def @func_4912(%var_4904: Tensor[(12, 6, 9), float64]) -> Tensor[(12, 6, 9), float64] {
  %1017 = cast(meta[relay.Constant][64] /* ty=Tensor[(12, 1, 9), float64] */, dtype="float64") /* ty=Tensor[(12, 1, 9), float64] */;
  %1018 = cast(%var_4904, dtype="float64") /* ty=Tensor[(12, 6, 9), float64] */;
  mod(%1017, %1018) /* ty=Tensor[(12, 6, 9), float64] */
}

def @func_8531() -> Tensor[(15, 8, 7), bool] {
  %1019 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %1019.1
}

def @func_8330() -> (Tensor[(12, 6, 9), float64],) {
  %1020 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
  %1021 = %1020.1;
  (%1021,)
}

def @func_10720(%var_10683: Tensor[(4, 9, 10), float64], %var_10690: Tensor[(512), float64]) -> (Tensor[(4, 9, 10), bool], Tensor[(234), bool], Tensor[(512), float64]) {
  %1022 = @func_9121() /* ty=(Tensor[(1, 9, 10), float64],) */;
  %1023 = %1022.0;
  %1024 = cast(%1023, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
  %1025 = cast(%var_10683, dtype="bool") /* ty=Tensor[(4, 9, 10), bool] */;
  %1026 = cast(%var_10690, dtype="float64") /* ty=Tensor[(512), float64] */;
  %1027 = reshape(%1026, newshape=[512]) /* ty=Tensor[(512), float64] */;
  %1028 = @func_7587(%1027) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(9, 15, 9), float32], Tensor[(1215), float32], Tensor[(234), bool], Tensor[(512), float64]) */;
  %1029 = logical_or(%1024, %1025) /* ty=Tensor[(4, 9, 10), bool] */;
  %1030 = %1028.3;
  (%1029, %1030, %var_10690)
}

def @func_11480() -> (Tensor[(1, 9, 10), float32],) {
  %1031 = @func_9747() /* ty=Tensor[(1, 9, 10), float32] */;
  (%1031,)
}

def @func_13405(%var_13391: Tensor[(252), float64]) -> (Tensor[(1, 9, 10), float64], Tensor[(2016), float32], Tensor[(252), float64], Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(15, 8, 7), bool]) {
  %1032 = cast(%var_13391, dtype="float64") /* ty=Tensor[(252), float64] */;
  %1033 = reshape(%1032, newshape=[3, 84]) /* ty=Tensor[(3, 84), float64] */;
  %1034 = @func_10399(%1033) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(2016), float32], Tensor[(1, 9, 10), float64], Tensor[(3, 84), uint64]) */;
  %1035 = cast(meta[relay.Constant][65] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %1036 = reshape(%1035, newshape=[16, 1, 15]) /* ty=Tensor[(16, 1, 15), float32] */;
  %1037 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %1038 = @func_8003() /* ty=Tensor[(1, 9, 10), float64] */;
  %1039 = %1034.1;
  %1040 = @func_5719(%1036) /* ty=Tensor[(16, 1, 15), float32] */;
  %1041 = %1037.1;
  (%1038, %1039, %var_13391, %1040, meta[relay.Constant][65] /* ty=Tensor[(240), float32] */, %1041)
}

def @func_13650() -> (Tensor[(1, 9, 10), float32],) {
  %1042 = @func_8967() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %1043 = %1042.0;
  (%1043,)
}

def @func_9328(%var_9306: Tensor[(1, 9, 10), float32], %var_9322: Tensor[(2016), float32]) -> (Tensor[(?, 9, 10), bool], Tensor[(1, 9, 10), float64], Tensor[(840), float64], Tensor[(2016), float32]) {
  %1044 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %1045 = %1044.0;
  %1046 = cast(%var_9306, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
  %1047 = shape_of(%1045, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1048 = cast(%1045, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
  %1049 = dyn.reshape(%1046, %1047, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1050 = cast(%1045, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
  %1051 = log(%1050) /* ty=Tensor[(1, 9, 10), float64] */;
  %1052 = cast(%1051, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
  %1053 = cast(%var_9322, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %1054 = reshape(%1053, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %1055 = @func_7350(%1054) /* ty=(Tensor[(840), float64], Tensor[(16, 9, 14), uint64], Tensor[(2016), float32], Tensor[(15, 8, 7), float64]) */;
  %1056 = not_equal(%1048, %1049) /* ty=Tensor[(?, 9, 10), bool] */;
  %1057 = acos(%1052) /* ty=Tensor[(1, 9, 10), float64] */;
  %1058 = %1055.0;
  (%1056, %1057, %1058, %var_9322)
}

def @func_6559(%var_6545: Tensor[(13, 14, 15), float32]) -> Tensor[(13, 14, 15), float32] {
  %1059 = cast(%var_6545, dtype="float32") /* ty=Tensor[(13, 14, 15), float32] */;
  log10(%1059) /* ty=Tensor[(13, 14, 15), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8791() -> Tensor[(1, 9, 10), float64] {
  %0 = fn () -> Tensor[(1, 9, 10), float64] {
    @func_8003() /* ty=Tensor[(1, 9, 10), float64] */
  };
  %0() /* ty=Tensor[(1, 9, 10), float64] */
}

def @func_14613() -> (Tensor[(15, 8, 7), float32], Tensor[(512), float64], Tensor[(975), int64]) {
  %9 = fn () -> (Tensor[(15, 8, 7), float32], Tensor[(512), float64], Tensor[(975), int64]) {
    %1 = @func_12043() /* ty=(Tensor[(15, 8, 7), float64],) */;
    %2 = %1.0;
    %3 = cast(%2, dtype="float32") /* ty=Tensor[(15, 8, 7), float32] */;
    %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(975), int64] */, dtype="int64") /* ty=Tensor[(975), int64] */;
    %5 = reshape(%4, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), int64] */;
    %6 = @func_2646(%5) /* ty=(Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) */;
    %7 = sinh(%3) /* ty=Tensor[(15, 8, 7), float32] */;
    %8 = %6.1;
    (%7, %8, meta[relay.Constant][0] /* ty=Tensor[(975), int64] */)
  };
  %9() /* ty=(Tensor[(15, 8, 7), float32], Tensor[(512), float64], Tensor[(975), int64]) */
}

def @func_12044() -> (Tensor[(15, 8, 7), float64],) {
  %11 = fn () -> (Tensor[(15, 8, 7), float64],) {
    %10 = @func_10220() /* ty=Tensor[(15, 8, 7), float64] */;
    (%10,)
  };
  %11() /* ty=(Tensor[(15, 8, 7), float64],) */
}

def @func_9191(%var_9190: Tensor[(2730), float32]) -> (Tensor[(840), float64], Tensor[(13, 14, 15), float32], Tensor[(2730), float32]) {
  %16 = fn (%var_9185: Tensor[(2730), float32]) -> (Tensor[(840), float64], Tensor[(13, 14, 15), float32], Tensor[(2730), float32]) {
    %12 = cast(%var_9185, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %13 = reshape(%12, newshape=[13, 14, 15]) /* ty=Tensor[(13, 14, 15), float32] */;
    %14 = @func_8646() /* ty=Tensor[(840), float64] */;
    %15 = @func_6559(%13) /* ty=Tensor[(13, 14, 15), float32] */;
    (%14, %15, %var_9185)
  };
  %16(%var_9190) /* ty=(Tensor[(840), float64], Tensor[(13, 14, 15), float32], Tensor[(2730), float32]) */
}

def @func_12927() -> Tensor[(1, 9, 10), float32] {
  %18 = fn () -> Tensor[(1, 9, 10), float32] {
    %17 = @func_8967() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %17.0
  };
  %18() /* ty=Tensor[(1, 9, 10), float32] */
}

def @func_10056() -> (Tensor[(15, 8, 7), bool], Tensor[(9, 2, 13), bool], Tensor[(512), float64], Tensor[(512), float64], Tensor[(975), int64]) {
  %29 = fn () -> (Tensor[(15, 8, 7), bool], Tensor[(9, 2, 13), bool], Tensor[(512), float64], Tensor[(512), float64], Tensor[(975), int64]) {
    %19 = @func_9470() /* ty=(Tensor[(15, 8, 7), bool], Tensor[(1, 9, 10), float32]) */;
    %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
    %21 = reshape(%20, newshape=[512]) /* ty=Tensor[(512), float64] */;
    %22 = @func_1334(%21) /* ty=(Tensor[(5, 16, 13), float64], Tensor[(9, 2, 13), bool], Tensor[(512), float64]) */;
    %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(975), int64] */, dtype="int64") /* ty=Tensor[(975), int64] */;
    %24 = reshape(%23, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), int64] */;
    %25 = @func_2646(%24) /* ty=(Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) */;
    %26 = %19.0;
    %27 = %22.1;
    %28 = %25.1;
    (%26, %27, meta[relay.Constant][1] /* ty=Tensor[(512), float64] */, %28, meta[relay.Constant][2] /* ty=Tensor[(975), int64] */)
  };
  %29() /* ty=(Tensor[(15, 8, 7), bool], Tensor[(9, 2, 13), bool], Tensor[(512), float64], Tensor[(512), float64], Tensor[(975), int64]) */
}

def @func_7281() -> (Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) {
  @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */
}

def @func_10200(%var_10198: Tensor[(2730), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(13, 14, 15), float32], Tensor[(2730), float32], Tensor[(512), float64], Tensor[(975), int64], Tensor[(13, 14, 15), float32]) {
  @func_10197(%var_10198) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(13, 14, 15), float32], Tensor[(2730), float32], Tensor[(512), float64], Tensor[(975), int64], Tensor[(13, 14, 15), float32]) */
}

def @func_12452(%var_12450: Tensor[(910, 3), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(840), float64], Tensor[(910, 3), float32]) {
  @func_12449(%var_12450) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(840), float64], Tensor[(910, 3), float32]) */
}

def @func_1141(%var_1108: Tensor[(8, 8, 8), float64]) -> (Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(2, 420), float32], Tensor[(8, 8, 8), bool], Tensor[(15, 8, 7), float64], Tensor[(8, 8, 8), uint32]) {
  %30 = cast(meta[relay.Constant][3] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
  %31 = cast(meta[relay.Constant][3] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
  %32 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 420), float32] */, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
  %33 = reshape(%30, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %34 = reshape(%31, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %35 = reshape(%32, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %36 = @func_1090(%33, %34, %35) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(15, 8, 7), float64]) */;
  %37 = cast(%var_1108, dtype="float64") /* ty=Tensor[(8, 8, 8), float64] */;
  %38 = cos(%37) /* ty=Tensor[(8, 8, 8), float64] */;
  %39 = cast(%38, dtype="float64") /* ty=Tensor[(8, 8, 8), float64] */;
  %40 = atan(%39) /* ty=Tensor[(8, 8, 8), float64] */;
  %41 = cast(%var_1108, dtype="bool") /* ty=Tensor[(8, 8, 8), bool] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%40, dtype="bool") /* ty=Tensor[(8, 8, 8), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %45 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 420), float32] */, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
  %46 = reshape(%45, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float32] */;
  %47 = @func_917(%46) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %48 = cast(%38, dtype="uint32") /* ty=Tensor[(8, 8, 8), uint32] */;
  %49 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%40, dtype="uint32") /* ty=Tensor[(8, 8, 8), uint32] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %52 = %36.0;
  %53 = not_equal(%43, %44) /* ty=Tensor[(8, 8, 8), bool] */;
  %54 = %47.0;
  %55 = bitwise_xor(%50, %51) /* ty=Tensor[(8, 8, 8), uint32] */;
  (%52, meta[relay.Constant][3] /* ty=Tensor[(234), bool] */, meta[relay.Constant][4] /* ty=Tensor[(2, 420), float32] */, %53, %54, %55)
}

def @func_8403(%var_8401: Tensor[(12, 6, 9), float64]) -> (Tensor[(234), float32], Tensor[(3, 216), float64], Tensor[(12, 6, 9), int8]) {
  @func_8400(%var_8401) /* ty=(Tensor[(234), float32], Tensor[(3, 216), float64], Tensor[(12, 6, 9), int8]) */
}

def @func_8330() -> (Tensor[(12, 6, 9), float64],) {
  %56 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
  %57 = %56.1;
  (%57,)
}

def @func_8174(%var_8166: Tensor[(975, 1), int64]) -> (Tensor[(1, 9, 10), float64], Tensor[(13, 15, 5), int64], Tensor[(975, 1), int64]) {
  %58 = cast(%var_8166, dtype="int64") /* ty=Tensor[(975, 1), int64] */;
  %59 = reshape(%58, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), int64] */;
  %60 = @func_2646(%59) /* ty=(Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) */;
  %61 = @func_7688() /* ty=Tensor[(1, 9, 10), float64] */;
  %62 = %60.0;
  (%61, %62, %var_8166)
}

def @func_9472() -> (Tensor[(15, 8, 7), bool], Tensor[(1, 9, 10), float32]) {
  @func_9470() /* ty=(Tensor[(15, 8, 7), bool], Tensor[(1, 9, 10), float32]) */
}

def @func_11348() -> (Tensor[(2, 420), float32],) {
  @func_11346() /* ty=(Tensor[(2, 420), float32],) */
}

def @func_5225(%var_5223: Tensor[(5, 6, 14), uint16]) -> (Tensor[(5, 6, 14), uint16],) {
  @func_5222(%var_5223) /* ty=(Tensor[(5, 6, 14), uint16],) */
}

def @func_11670(%var_11668: Tensor[(252, 1), float64], %var_11669: Tensor[(252, 4), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(15, 8, 7), bool], Tensor[(1, 9, 10), float32], Tensor[(252, 4), bool]) {
  %75 = fn (%var_11652: Tensor[(252, 1), float64], %var_11660: Tensor[(252, 4), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(15, 8, 7), bool], Tensor[(1, 9, 10), float32], Tensor[(252, 4), bool]) {
    %63 = @func_9389() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %64 = cast(%var_11652, dtype="float64") /* ty=Tensor[(252, 1), float64] */;
    %65 = reshape(%64, newshape=[3, 84]) /* ty=Tensor[(3, 84), float64] */;
    %66 = @func_10399(%65) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(2016), float32], Tensor[(1, 9, 10), float64], Tensor[(3, 84), uint64]) */;
    %67 = @func_11581() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %68 = cast(%var_11652, dtype="bool") /* ty=Tensor[(252, 1), bool] */;
    %69 = cast(%var_11660, dtype="bool") /* ty=Tensor[(252, 4), bool] */;
    %70 = %63.0;
    %71 = %66.0;
    %72 = @func_10602() /* ty=Tensor[(15, 8, 7), bool] */;
    %73 = %67.0;
    %74 = greater(%68, %69) /* ty=Tensor[(252, 4), bool] */;
    (%70, %71, %72, %73, %74)
  };
  %75(%var_11668, %var_11669) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(15, 8, 7), bool], Tensor[(1, 9, 10), float32], Tensor[(252, 4), bool]) */
}

def @func_1095(%var_1092: Tensor[(9, 2, 13), bool], %var_1093: Tensor[(9, 2, 13), bool], %var_1094: Tensor[(840), float32]) -> (Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(15, 8, 7), float64]) {
  @func_1090(%var_1092, %var_1093, %var_1094) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(15, 8, 7), float64]) */
}

def @func_7102(%var_7100: Tensor[(6, 5, 3), float64]) -> Tensor[(6, 5, 3), float64] {
  @func_7099(%var_7100) /* ty=Tensor[(6, 5, 3), float64] */
}

def @func_12433() -> (Tensor[(1, 9, 10), float32],) {
  @func_12431() /* ty=(Tensor[(1, 9, 10), float32],) */
}

def @func_12173(%var_12172: Tensor[(14, 12, 10), uint16]) -> (Tensor[(14, 12, 10), bool], Tensor[(13, 14, 15), float32], Tensor[(2730), float32]) {
  %85 = fn (%var_12133: Tensor[(14, 12, 10), uint16]) -> (Tensor[(14, 12, 10), bool], Tensor[(13, 14, 15), float32], Tensor[(2730), float32]) {
    %76 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 12, 10), uint16] */, dtype="bool") /* ty=Tensor[(14, 12, 10), bool] */;
    %77 = shape_of(%var_12133, dtype="int32") /* ty=Tensor[(3), int32] */;
    %78 = cast(%var_12133, dtype="bool") /* ty=Tensor[(14, 12, 10), bool] */;
    %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %80 = cast(meta[relay.Constant][6] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %81 = reshape(%80, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
    %82 = @func_10197(%81) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(13, 14, 15), float32], Tensor[(2730), float32], Tensor[(512), float64], Tensor[(975), int64], Tensor[(13, 14, 15), float32]) */;
    %83 = less(%78, %79) /* ty=Tensor[(14, 12, 10), bool] */;
    %84 = %82.5;
    (%83, %84, meta[relay.Constant][6] /* ty=Tensor[(2730), float32] */)
  };
  %85(%var_12172) /* ty=(Tensor[(14, 12, 10), bool], Tensor[(13, 14, 15), float32], Tensor[(2730), float32]) */
}

def @func_2713(%var_2711: Tensor[(6, 14, 3), float64], %var_2712: Tensor[(6, 14, 3), float64]) -> (Tensor[(6, 14, 3), float64], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) {
  %95 = fn (%var_2693: Tensor[(6, 14, 3), float64], %var_2694: Tensor[(6, 14, 3), float64]) -> (Tensor[(6, 14, 3), float64], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) {
    %86 = cast(%var_2694, dtype="float64") /* ty=Tensor[(6, 14, 3), float64] */;
    %87 = shape_of(%var_2693, dtype="int32") /* ty=Tensor[(3), int32] */;
    %88 = cast(%var_2693, dtype="float64") /* ty=Tensor[(6, 14, 3), float64] */;
    %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %90 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 195), int64] */, dtype="int64") /* ty=Tensor[(5, 195), int64] */;
    %91 = reshape(%90, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), int64] */;
    %92 = @func_2646(%91) /* ty=(Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) */;
    %93 = floor_mod(%88, %89) /* ty=Tensor[(6, 14, 3), float64] */;
    %94 = %92.0;
    (%93, %94, meta[relay.Constant][7] /* ty=Tensor[(5, 195), int64] */)
  };
  %95(%var_2711, %var_2712) /* ty=(Tensor[(6, 14, 3), float64], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) */
}

def @func_2646(%var_2611: Tensor[(13, 15, 5), int64]) -> (Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) {
  %96 = cast(-5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %97 = cast(%var_2611, dtype="int64") /* ty=Tensor[(13, 15, 5), int64] */;
  %98 = cast(meta[relay.Constant][8] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
  %99 = reshape(%98, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), float64] */;
  %100 = @func_1141(%99) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(2, 420), float32], Tensor[(8, 8, 8), bool], Tensor[(15, 8, 7), float64], Tensor[(8, 8, 8), uint32]) */;
  %101 = %100.2;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
  %103 = subtract(%96, %97) /* ty=Tensor[(13, 15, 5), int64] */;
  %104 = acosh(%102) /* ty=Tensor[(2, 420), float32] */;
  (%103, meta[relay.Constant][8] /* ty=Tensor[(512), float64] */, %104)
}

def @func_9351() -> (Tensor[(1, 9, 10), float32],) {
  %107 = fn () -> (Tensor[(1, 9, 10), float32],) {
    %105 = @func_8967() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %106 = %105.0;
    (%106,)
  };
  %107() /* ty=(Tensor[(1, 9, 10), float32],) */
}

def @func_9961() -> (Tensor[(?, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(975), int64]) {
  %108 = @func_8686() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %109 = %108.0;
  %110 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %111 = %110.0;
  %112 = cast(%111, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %113 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%109, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %116 = cast(meta[relay.Constant][9] /* ty=Tensor[(975), int64] */, dtype="int64") /* ty=Tensor[(975), int64] */;
  %117 = reshape(%116, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), int64] */;
  %118 = @func_2646(%117) /* ty=(Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) */;
  %119 = subtract(%114, %115) /* ty=Tensor[(?, 9, 10), float32] */;
  %120 = @func_7688() /* ty=Tensor[(1, 9, 10), float64] */;
  %121 = %118.2;
  (%119, %120, %121, meta[relay.Constant][9] /* ty=Tensor[(975), int64] */)
}

def @func_920(%var_918: Tensor[(15, 8, 7), float32]) -> (Tensor[(15, 8, 7), float64],) {
  @func_917(%var_918) /* ty=(Tensor[(15, 8, 7), float64],) */
}

def @func_5222(%var_5213: Tensor[(5, 6, 14), uint16]) -> (Tensor[(5, 6, 14), uint16],) {
  %122 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 6, 14), uint16] */, dtype="uint16") /* ty=Tensor[(5, 6, 14), uint16] */;
  %123 = shape_of(%var_5213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%var_5213, dtype="uint16") /* ty=Tensor[(5, 6, 14), uint16] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %126 = minimum(%124, %125) /* ty=Tensor[(5, 6, 14), uint16] */;
  (%126,)
}

def @func_10602() -> Tensor[(15, 8, 7), bool] {
  @func_8531() /* ty=Tensor[(15, 8, 7), bool] */
}

def @func_9106() -> (Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) {
  %127 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 16, 2), float32] */, dtype="float32") /* ty=Tensor[(2, 16, 2), float32] */;
  %128 = @func_9001() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32]) */;
  %129 = atan(%127) /* ty=Tensor[(2, 16, 2), float32] */;
  %130 = %128.1;
  (%129, %130)
}

def @func_7073() -> (Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) {
  %131 = cast(meta[relay.Constant][12] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
  %132 = cast(meta[relay.Constant][13] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %133 = reshape(%131, newshape=[117, 2]) /* ty=Tensor[(117, 2), bool] */;
  %134 = reshape(%132, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float64] */;
  %135 = @func_7024(%133, %134) /* ty=(Tensor[(117, 2), bool], Tensor[(840), float32], Tensor[(?, 9, 10), int32], Tensor[(15, 8, 7), bool], Tensor[(?, 9, 10), float64], Tensor[(?, 9, 10), uint8]) */;
  %136 = @func_6811() /* ty=Tensor[(1, 9, 10), float32] */;
  %137 = %135.3;
  (%136, %137, meta[relay.Constant][12] /* ty=Tensor[(234), bool] */, meta[relay.Constant][13] /* ty=Tensor[(840), float64] */)
}

def @func_15034() -> (Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) {
  %142 = fn () -> (Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) {
    %138 = @func_9106() /* ty=(Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) */;
    %139 = @func_11592() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %140 = %138.0;
    %141 = %139.0;
    (%140, %141)
  };
  %142() /* ty=(Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) */
}

def @func_13874(%var_13852: Tensor[(420), uint16], %var_13870: Tensor[(1, 540), float32]) -> (Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float64], Tensor[(64, 8), float64], Tensor[(12, 6, 9), float32], Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32], Tensor[(420), uint16], Tensor[(252), float64], Tensor[(630), uint32], Tensor[(6, 9, 10), bool], Tensor[(1, 540), float32]) {
  %143 = cast(meta[relay.Constant][14] /* ty=Tensor[(64, 8), float64] */, dtype="float64") /* ty=Tensor[(64, 8), float64] */;
  %144 = reshape(%143, newshape=[512]) /* ty=Tensor[(512), float64] */;
  %145 = @func_11092(%144) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(8, 8, 8), uint32], Tensor[(512), float64]) */;
  %146 = @func_13650() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %147 = cast(%var_13852, dtype="uint16") /* ty=Tensor[(420), uint16] */;
  %148 = cast(meta[relay.Constant][15] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %149 = cast(meta[relay.Constant][16] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %150 = reshape(%147, newshape=[420, 1]) /* ty=Tensor[(420, 1), uint16] */;
  %151 = reshape(%148, newshape=[126, 2]) /* ty=Tensor[(126, 2), float64] */;
  %152 = reshape(%149, newshape=[210, 3]) /* ty=Tensor[(210, 3), uint32] */;
  %153 = @func_12260(%150, %151, %152) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(5, 6, 14), uint16], Tensor[(420, 1), uint16], Tensor[(1, 9, 10), float32], Tensor[(14, 144), float32], Tensor[(9, 15, 9), float32], Tensor[(640), float64], Tensor[(1215), float32], Tensor[(126, 2), float64], Tensor[(525, 1), uint8], Tensor[(210, 3), uint32], Tensor[(252), float64], Tensor[(2, 1008), float32], Tensor[(15, 8, 7), float64]) */;
  %154 = cast(%var_13870, dtype="float32") /* ty=Tensor[(1, 540), float32] */;
  %155 = %153.3;
  %156 = cast(%155, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %157 = reshape(%154, newshape=[6, 9, 10]) /* ty=Tensor[(6, 9, 10), float32] */;
  %158 = reshape(%156, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float32] */;
  %159 = @func_8110(%157, %158) /* ty=(Tensor[(6, 9, 10), bool], Tensor[(?, 9, 10), float64]) */;
  %160 = @func_12765() /* ty=Tensor[(1, 9, 10), float64] */;
  %161 = %145.0;
  %162 = @func_13468() /* ty=Tensor[(12, 6, 9), float32] */;
  %163 = %146.0;
  %164 = %159.0;
  (%160, %161, meta[relay.Constant][14] /* ty=Tensor[(64, 8), float64] */, %162, %163, %155, %var_13852, meta[relay.Constant][15] /* ty=Tensor[(252), float64] */, meta[relay.Constant][16] /* ty=Tensor[(630), uint32] */, %164, %var_13870)
}

def @func_14048() -> (Tensor[(10, 9, 10), float64],) {
  %165 = @func_11840() /* ty=(Tensor[(10, 9, 10), float64],) */;
  %166 = %165.0;
  (%166,)
}

def @func_13268() -> (Tensor[(10, 9, 10), float64], Tensor[(15, 8, 7), float64], Tensor[(?, 9, 10), float32]) {
  @func_13266() /* ty=(Tensor[(10, 9, 10), float64], Tensor[(15, 8, 7), float64], Tensor[(?, 9, 10), float32]) */
}

def @func_11218(%var_11217: Tensor[(1152), int64]) -> (Tensor[(1, 9, 10), float32], Tensor[(975), int64], Tensor[(2, 420), float32], Tensor[(576, 2), int64], Tensor[(1152), int64]) {
  %177 = fn (%var_11214: Tensor[(1152), int64]) -> (Tensor[(1, 9, 10), float32], Tensor[(975), int64], Tensor[(2, 420), float32], Tensor[(576, 2), int64], Tensor[(1152), int64]) {
    %167 = @func_9106() /* ty=(Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) */;
    %168 = @func_9961() /* ty=(Tensor[(?, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(975), int64]) */;
    %169 = @func_9961() /* ty=(Tensor[(?, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(975), int64]) */;
    %170 = cast(%var_11214, dtype="int64") /* ty=Tensor[(1152), int64] */;
    %171 = reshape(%170, newshape=[576, 2]) /* ty=Tensor[(576, 2), int64] */;
    %172 = @func_7551(%171) /* ty=(Tensor[(12, 6, 9), bool], Tensor[(8, 12, 12), bool], Tensor[(576, 2), int64], Tensor[(12, 6, 9), float64], Tensor[(12, 6, 9), float32]) */;
    %173 = %167.1;
    %174 = %168.3;
    %175 = %169.2;
    %176 = %172.2;
    (%173, %174, %175, %176, %var_11214)
  };
  %177(%var_11217) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(975), int64], Tensor[(2, 420), float32], Tensor[(576, 2), int64], Tensor[(1152), int64]) */
}

def @func_10966() -> Tensor[(1, 9, 10), float64] {
  %178 = @func_9121() /* ty=(Tensor[(1, 9, 10), float64],) */;
  %178.0
}

def @func_1336(%var_1335: Tensor[(512), float64]) -> (Tensor[(5, 16, 13), float64], Tensor[(9, 2, 13), bool], Tensor[(512), float64]) {
  %185 = fn (%var_1326: Tensor[(512), float64]) -> (Tensor[(5, 16, 13), float64], Tensor[(9, 2, 13), bool], Tensor[(512), float64]) {
    %179 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
    %180 = cast(%var_1326, dtype="float64") /* ty=Tensor[(512), float64] */;
    %181 = reshape(%180, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), float64] */;
    %182 = @func_1141(%181) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(2, 420), float32], Tensor[(8, 8, 8), bool], Tensor[(15, 8, 7), float64], Tensor[(8, 8, 8), uint32]) */;
    %183 = erf(%179) /* ty=Tensor[(5, 16, 13), float64] */;
    %184 = %182.0;
    (%183, %184, %var_1326)
  };
  %185(%var_1335) /* ty=(Tensor[(5, 16, 13), float64], Tensor[(9, 2, 13), bool], Tensor[(512), float64]) */
}

def @func_14161() -> (Tensor[(1, 9, 10), float32], Tensor[(975), int64], Tensor[(648), float64], Tensor[(65, 15), int64], Tensor[(1, 9, 10), float32]) {
  @func_14159() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(975), int64], Tensor[(648), float64], Tensor[(65, 15), int64], Tensor[(1, 9, 10), float32]) */
}

def @func_11025(%var_11023: Tensor[(8, 12, 5), float32]) -> (Tensor[(8, 12, 5), float32],) {
  @func_11022(%var_11023) /* ty=(Tensor[(8, 12, 5), float32],) */
}

def @func_14466() -> (Tensor[(12, 6, 9), float64], Tensor[(1, 9, 10), float64]) {
  %189 = fn () -> (Tensor[(12, 6, 9), float64], Tensor[(1, 9, 10), float64]) {
    %186 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
    %187 = %186.1;
    %188 = @func_10966() /* ty=Tensor[(1, 9, 10), float64] */;
    (%187, %188)
  };
  %189() /* ty=(Tensor[(12, 6, 9), float64], Tensor[(1, 9, 10), float64]) */
}

def @func_8533() -> Tensor[(15, 8, 7), bool] {
  @func_8531() /* ty=Tensor[(15, 8, 7), bool] */
}

def @func_11829(%var_11828: Tensor[(2730), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(2730), float32], Tensor[(2730), float32]) {
  %196 = fn (%var_11823: Tensor[(2730), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(2730), float32], Tensor[(2730), float32]) {
    %190 = @func_9106() /* ty=(Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) */;
    %191 = cast(%var_11823, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %192 = reshape(%191, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
    %193 = @func_10197(%192) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(13, 14, 15), float32], Tensor[(2730), float32], Tensor[(512), float64], Tensor[(975), int64], Tensor[(13, 14, 15), float32]) */;
    %194 = %190.1;
    %195 = %193.2;
    (%194, %195, %var_11823)
  };
  %196(%var_11828) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(2730), float32], Tensor[(2730), float32]) */
}

def @func_917(%var_888: Tensor[(15, 8, 7), float32]) -> (Tensor[(15, 8, 7), float64],) {
  %197 = cast(%var_888, dtype="float32") /* ty=Tensor[(15, 8, 7), float32] */;
  %198 = log(%197) /* ty=Tensor[(15, 8, 7), float32] */;
  %199 = cast(%198, dtype="float64") /* ty=Tensor[(15, 8, 7), float64] */;
  %200 = cos(%199) /* ty=Tensor[(15, 8, 7), float64] */;
  (%200,)
}

def @func_5721(%var_5720: Tensor[(16, 1, 15), float32]) -> Tensor[(16, 1, 15), float32] {
  %202 = fn (%var_5713: Tensor[(16, 1, 15), float32]) -> Tensor[(16, 1, 15), float32] {
    %201 = cast(%var_5713, dtype="float32") /* ty=Tensor[(16, 1, 15), float32] */;
    asinh(%201) /* ty=Tensor[(16, 1, 15), float32] */
  };
  %202(%var_5720) /* ty=Tensor[(16, 1, 15), float32] */
}

def @func_12021(%var_12004: Tensor[(12, 9, 10), float32]) -> (Tensor[(12, 9, 10), bool], Tensor[(12, 9, 10), float64]) {
  %203 = @func_7975() /* ty=Tensor[(1, 9, 10), float32] */;
  %204 = cast(%203, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
  %205 = cast(%var_12004, dtype="bool") /* ty=Tensor[(12, 9, 10), bool] */;
  %206 = cast(%var_12004, dtype="float64") /* ty=Tensor[(12, 9, 10), float64] */;
  %207 = logical_and(%204, %205) /* ty=Tensor[(12, 9, 10), bool] */;
  %208 = tan(%206) /* ty=Tensor[(12, 9, 10), float64] */;
  (%207, %208)
}

def @func_8136(%var_8135: Tensor[(16, 1, 16), float64]) -> Tensor[(16, 1, 16), float64] {
  %210 = fn (%var_8131: Tensor[(16, 1, 16), float64]) -> Tensor[(16, 1, 16), float64] {
    %209 = cast(%var_8131, dtype="float64") /* ty=Tensor[(16, 1, 16), float64] */;
    asinh(%209) /* ty=Tensor[(16, 1, 16), float64] */
  };
  %210(%var_8135) /* ty=Tensor[(16, 1, 16), float64] */
}

def @func_8646() -> Tensor[(840), float64] {
  %211 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %211.3
}

def @func_9122() -> (Tensor[(1, 9, 10), float64],) {
  %213 = fn () -> (Tensor[(1, 9, 10), float64],) {
    %212 = @func_8003() /* ty=Tensor[(1, 9, 10), float64] */;
    (%212,)
  };
  %213() /* ty=(Tensor[(1, 9, 10), float64],) */
}

def @func_11092(%var_11077: Tensor[(512), float64]) -> (Tensor[(1, 9, 10), float64], Tensor[(8, 8, 8), uint32], Tensor[(512), float64]) {
  %214 = cast(%var_11077, dtype="float64") /* ty=Tensor[(512), float64] */;
  %215 = reshape(%214, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), float64] */;
  %216 = @func_1141(%215) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(2, 420), float32], Tensor[(8, 8, 8), bool], Tensor[(15, 8, 7), float64], Tensor[(8, 8, 8), uint32]) */;
  %217 = @func_9533() /* ty=Tensor[(1, 9, 10), float64] */;
  %218 = %216.5;
  (%217, %218, %var_11077)
}

def @func_14722(%var_14686: Tensor[(1, 9, 10), float32], %var_14714: Tensor[(1152), int64]) -> (Tensor[(?, 9, 10), bool], Tensor[(2, 420), float32], Tensor[(1, 9, 10), float32], Tensor[(525), uint8], Tensor[(1152), int64]) {
  %219 = @func_12926() /* ty=Tensor[(1, 9, 10), float32] */;
  %220 = cast(%var_14686, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
  %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%219, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %224 = @func_14378() /* ty=(Tensor[(2, 420), float32],) */;
  %225 = @func_11592() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %226 = cast(%var_14714, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %227 = reshape(%226, newshape=[1152]) /* ty=Tensor[(1152), int64] */;
  %228 = @func_7865(%227) /* ty=(Tensor[(13, 14, 15), float32], Tensor[(2730, 1), float32], Tensor[(8, 12, 12), bool], Tensor[(1152), int64], Tensor[(15, 5, 7), bool], Tensor[(525), uint8], Tensor[(1, 9, 10), float32], Tensor[(10, 7, 9), uint32], Tensor[(630), uint32]) */;
  %229 = less_equal(%222, %223) /* ty=Tensor[(?, 9, 10), bool] */;
  %230 = %224.0;
  %231 = %225.0;
  %232 = %228.5;
  (%229, %230, %231, %232, %var_14714)
}

def @func_6812() -> Tensor[(1, 9, 10), float32] {
  %234 = fn () -> Tensor[(1, 9, 10), float32] {
    %233 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %233.0
  };
  %234() /* ty=Tensor[(1, 9, 10), float32] */
}

def @func_7024(%var_6982: Tensor[(117, 2), bool], %var_7001: Tensor[(15, 8, 7), float64]) -> (Tensor[(117, 2), bool], Tensor[(840), float32], Tensor[(?, 9, 10), int32], Tensor[(15, 8, 7), bool], Tensor[(?, 9, 10), float64], Tensor[(?, 9, 10), uint8]) {
  %235 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %236 = %235.0;
  %237 = cast(%236, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %238 = erf(%237) /* ty=Tensor[(1, 9, 10), float32] */;
  %239 = cast(%236, dtype="int64") /* ty=Tensor[(1, 9, 10), int64] */;
  %240 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%238, dtype="int64") /* ty=Tensor[(1, 9, 10), int64] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %243 = bitwise_and(%241, %242) /* ty=Tensor[(?, 9, 10), int64] */;
  %244 = cast(%238, dtype="int32") /* ty=Tensor[(1, 9, 10), int32] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="int32") /* ty=Tensor[(?, 9, 10), int32] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %248 = cast(%var_6982, dtype="bool") /* ty=Tensor[(117, 2), bool] */;
  %249 = cast(%var_6982, dtype="bool") /* ty=Tensor[(117, 2), bool] */;
  %250 = cast(meta[relay.Constant][18] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %251 = reshape(%248, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %252 = reshape(%249, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %253 = reshape(%250, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %254 = @func_1090(%251, %252, %253) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(15, 8, 7), float64]) */;
  %255 = %254.5;
  %256 = cast(%var_7001, dtype="bool") /* ty=Tensor[(15, 8, 7), bool] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%255, dtype="bool") /* ty=Tensor[(15, 8, 7), bool] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %260 = cast(%236, dtype="int8") /* ty=Tensor[(1, 9, 10), int8] */;
  %261 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%243, dtype="int8") /* ty=Tensor[(?, 9, 10), int8] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %264 = bitwise_or(%262, %263) /* ty=Tensor[(?, 9, 10), int8] */;
  %265 = cast(%264, dtype="float64") /* ty=Tensor[(?, 9, 10), float64] */;
  %266 = cast(%243, dtype="float64") /* ty=Tensor[(?, 9, 10), float64] */;
  %267 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%238, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %270 = floor_mod(%268, %269) /* ty=Tensor[(?, 9, 10), float64] */;
  %271 = cast(%270, dtype="uint8") /* ty=Tensor[(?, 9, 10), uint8] */;
  %272 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%238, dtype="uint8") /* ty=Tensor[(1, 9, 10), uint8] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %275 = bitwise_xor(%246, %247) /* ty=Tensor[(?, 9, 10), int32] */;
  %276 = equal(%258, %259) /* ty=Tensor[(15, 8, 7), bool] */;
  %277 = log2(%265) /* ty=Tensor[(?, 9, 10), float64] */;
  %278 = left_shift(%273, %274) /* ty=Tensor[(?, 9, 10), uint8] */;
  (%var_6982, meta[relay.Constant][18] /* ty=Tensor[(840), float32] */, %275, %276, %277, %278)
}

def @func_11022(%var_11016: Tensor[(8, 12, 5), float32]) -> (Tensor[(8, 12, 5), float32],) {
  %279 = cast(%var_11016, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %280 = asin(%279) /* ty=Tensor[(8, 12, 5), float32] */;
  (%280,)
}

def @func_8400(%var_8382: Tensor[(12, 6, 9), float64]) -> (Tensor[(234), float32], Tensor[(3, 216), float64], Tensor[(12, 6, 9), int8]) {
  %281 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %282 = %281.2;
  %283 = cast(%282, dtype="float32") /* ty=Tensor[(234), float32] */;
  %284 = cos(%283) /* ty=Tensor[(234), float32] */;
  %285 = cast(%284, dtype="float32") /* ty=Tensor[(234), float32] */;
  %286 = shape_of(%282, dtype="int32") /* ty=Tensor[(1), int32] */;
  %287 = cast(%282, dtype="float32") /* ty=Tensor[(234), float32] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?), float32] */;
  %289 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 216), float64] */, dtype="float64") /* ty=Tensor[(3, 216), float64] */;
  %290 = reshape(%289, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %291 = @func_4912(%290) /* ty=Tensor[(12, 6, 9), float64] */;
  %292 = cast(%var_8382, dtype="int8") /* ty=Tensor[(12, 6, 9), int8] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="int8") /* ty=Tensor[(12, 6, 9), int8] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %296 = minimum(%287, %288) /* ty=Tensor[(234), float32] */;
  %297 = minimum(%294, %295) /* ty=Tensor[(12, 6, 9), int8] */;
  (%296, meta[relay.Constant][19] /* ty=Tensor[(3, 216), float64] */, %297)
}

def @func_11841() -> (Tensor[(10, 9, 10), float64],) {
  %299 = fn () -> (Tensor[(10, 9, 10), float64],) {
    %298 = @func_9266() /* ty=Tensor[(10, 9, 10), float64] */;
    (%298,)
  };
  %299() /* ty=(Tensor[(10, 9, 10), float64],) */
}

def @func_11481() -> (Tensor[(1, 9, 10), float32],) {
  %301 = fn () -> (Tensor[(1, 9, 10), float32],) {
    %300 = @func_9747() /* ty=Tensor[(1, 9, 10), float32] */;
    (%300,)
  };
  %301() /* ty=(Tensor[(1, 9, 10), float32],) */
}

def @func_3375(%var_3373: Tensor[(8, 12, 12), int64], %var_3374: Tensor[(8, 12, 12), int64]) -> (Tensor[(8, 12, 12), bool],) {
  @func_3371(%var_3373, %var_3374) /* ty=(Tensor[(8, 12, 12), bool],) */
}

def @func_12891(%var_12881: Tensor[(12, 6, 9), float64]) -> Tensor[(12, 6, 9), bool] {
  %302 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
  %303 = %302.1;
  %304 = cast(%var_12881, dtype="bool") /* ty=Tensor[(12, 6, 9), bool] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%303, dtype="bool") /* ty=Tensor[(12, 6, 9), bool] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%306, %307) /* ty=Tensor[(12, 6, 9), bool] */
}

def @func_8177(%var_8175: Tensor[(975, 1), int64]) -> (Tensor[(1, 9, 10), float64], Tensor[(13, 15, 5), int64], Tensor[(975, 1), int64]) {
  @func_8174(%var_8175) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(13, 15, 5), int64], Tensor[(975, 1), int64]) */
}

def @func_8294(%var_8291: Tensor[(2, 9, 10), float32], %var_8292: Tensor[(630), uint32], %var_8293: Tensor[(234), bool]) -> (Tensor[(2, 9, 10), bool], Tensor[(10, 7, 9), uint32], Tensor[(630), uint32], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(9, 2, 13), bool], Tensor[(840), float32], Tensor[(234), float32]) {
  @func_8289(%var_8291, %var_8292, %var_8293) /* ty=(Tensor[(2, 9, 10), bool], Tensor[(10, 7, 9), uint32], Tensor[(630), uint32], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(9, 2, 13), bool], Tensor[(840), float32], Tensor[(234), float32]) */
}

def @func_9328(%var_9306: Tensor[(1, 9, 10), float32], %var_9322: Tensor[(2016), float32]) -> (Tensor[(?, 9, 10), bool], Tensor[(1, 9, 10), float64], Tensor[(840), float64], Tensor[(2016), float32]) {
  %308 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %309 = %308.0;
  %310 = cast(%var_9306, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
  %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%309, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %314 = cast(%309, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
  %315 = log(%314) /* ty=Tensor[(1, 9, 10), float64] */;
  %316 = cast(%315, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
  %317 = cast(%var_9322, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %318 = reshape(%317, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %319 = @func_7350(%318) /* ty=(Tensor[(840), float64], Tensor[(16, 9, 14), uint64], Tensor[(2016), float32], Tensor[(15, 8, 7), float64]) */;
  %320 = not_equal(%312, %313) /* ty=Tensor[(?, 9, 10), bool] */;
  %321 = acos(%316) /* ty=Tensor[(1, 9, 10), float64] */;
  %322 = %319.0;
  (%320, %321, %322, %var_9322)
}

def @func_10474() -> (Tensor[(1, 9, 10), float32], Tensor[(?, 9, 10), bool], Tensor[(1, 9, 10), float64], Tensor[(2, 256), float64]) {
  %331 = fn () -> (Tensor[(1, 9, 10), float32], Tensor[(?, 9, 10), bool], Tensor[(1, 9, 10), float64], Tensor[(2, 256), float64]) {
    %323 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %324 = @func_10285() /* ty=(Tensor[(?, 9, 10), bool], Tensor[(14, 144), int16]) */;
    %325 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 256), float64] */, dtype="float64") /* ty=Tensor[(2, 256), float64] */;
    %326 = reshape(%325, newshape=[512]) /* ty=Tensor[(512), float64] */;
    %327 = @func_7733(%326) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(512), float64]) */;
    %328 = %323.0;
    %329 = %324.0;
    %330 = %327.0;
    (%328, %329, %330, meta[relay.Constant][20] /* ty=Tensor[(2, 256), float64] */)
  };
  %331() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(?, 9, 10), bool], Tensor[(1, 9, 10), float64], Tensor[(2, 256), float64]) */
}

def @func_7688() -> Tensor[(1, 9, 10), float64] {
  %332 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %333 = %332.0;
  %334 = cast(%333, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
  asin(%334) /* ty=Tensor[(1, 9, 10), float64] */
}

def @func_11559() -> (Tensor[(14, 15, 8), uint32],) {
  %335 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 15, 8), uint32] */, dtype="uint32") /* ty=Tensor[(14, 15, 8), uint32] */;
  %336 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(14, 15, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 15, 8), uint32] */, dtype="uint32") /* ty=Tensor[(14, 15, 8), uint32] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %339 = bitwise_or(%337, %338) /* ty=Tensor[(14, 15, 8), uint32] */;
  (%339,)
}

def @func_14380() -> (Tensor[(2, 420), float32],) {
  @func_14378() /* ty=(Tensor[(2, 420), float32],) */
}

def @func_12963() -> (Tensor[(15, 8, 7), bool],) {
  %340 = @func_8531() /* ty=Tensor[(15, 8, 7), bool] */;
  (%340,)
}

def @func_1144(%var_1142: Tensor[(8, 8, 8), float64]) -> (Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(2, 420), float32], Tensor[(8, 8, 8), bool], Tensor[(15, 8, 7), float64], Tensor[(8, 8, 8), uint32]) {
  @func_1141(%var_1142) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(2, 420), float32], Tensor[(8, 8, 8), bool], Tensor[(15, 8, 7), float64], Tensor[(8, 8, 8), uint32]) */
}

def @func_14866() -> (Tensor[(1, 9, 10), float32],) {
  %341 = @func_11009() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %342 = %341.0;
  (%342,)
}

def @func_11835() -> Tensor[(1, 9, 10), float32] {
  @func_11833() /* ty=Tensor[(1, 9, 10), float32] */
}

def @func_6561(%var_6560: Tensor[(13, 14, 15), float32]) -> Tensor[(13, 14, 15), float32] {
  %344 = fn (%var_6545: Tensor[(13, 14, 15), float32]) -> Tensor[(13, 14, 15), float32] {
    %343 = cast(%var_6545, dtype="float32") /* ty=Tensor[(13, 14, 15), float32] */;
    log10(%343) /* ty=Tensor[(13, 14, 15), float32] */
  };
  %344(%var_6560) /* ty=Tensor[(13, 14, 15), float32] */
}

def @func_10498(%var_10486: Tensor[(7, 9, 10), float32]) -> (Tensor[(7, 9, 10), uint8], Tensor[(?, 9, 10), float64]) {
  %345 = @func_9961() /* ty=(Tensor[(?, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(975), int64]) */;
  %346 = %345.0;
  %347 = cast(%346, dtype="uint8") /* ty=Tensor[(?, 9, 10), uint8] */;
  %348 = cast(%var_10486, dtype="uint8") /* ty=Tensor[(7, 9, 10), uint8] */;
  %349 = cast(%346, dtype="float64") /* ty=Tensor[(?, 9, 10), float64] */;
  %350 = logical_xor(%347, %348) /* ty=Tensor[(7, 9, 10), uint8] */;
  %351 = rsqrt(%349) /* ty=Tensor[(?, 9, 10), float64] */;
  (%350, %351)
}

def @func_13115(%var_13112: Tensor[(1, 252), float64], %var_13113: Tensor[(1680), uint16], %var_13114: Tensor[(11, 252), float64]) -> (Tensor[(?, 9, 10), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(252), float64], Tensor[(13, 14, 15), float32], Tensor[(1680), uint16], Tensor[(15, 8, 7), bool], Tensor[(1008), float64], Tensor[(12, 6, 9), float64], Tensor[(11, 252), float32]) {
  @func_13110(%var_13112, %var_13113, %var_13114) /* ty=(Tensor[(?, 9, 10), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(252), float64], Tensor[(13, 14, 15), float32], Tensor[(1680), uint16], Tensor[(15, 8, 7), bool], Tensor[(1008), float64], Tensor[(12, 6, 9), float64], Tensor[(11, 252), float32]) */
}

def @func_6352(%var_6350: Tensor[(16, 9, 14), float32], %var_6351: Tensor[(16, 9, 14), float32]) -> (Tensor[(16, 9, 14), uint64],) {
  %362 = fn (%var_6306: Tensor[(16, 9, 14), float32], %var_6307: Tensor[(16, 9, 14), float32]) -> (Tensor[(16, 9, 14), uint64],) {
    %352 = cast(%var_6307, dtype="float32") /* ty=Tensor[(16, 9, 14), float32] */;
    %353 = shape_of(%var_6306, dtype="int32") /* ty=Tensor[(3), int32] */;
    %354 = cast(%var_6306, dtype="float32") /* ty=Tensor[(16, 9, 14), float32] */;
    %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %356 = floor_mod(%354, %355) /* ty=Tensor[(16, 9, 14), float32] */;
    %357 = cast(%356, dtype="uint64") /* ty=Tensor[(16, 9, 14), uint64] */;
    %358 = shape_of(%var_6307, dtype="int32") /* ty=Tensor[(3), int32] */;
    %359 = cast(%var_6307, dtype="uint64") /* ty=Tensor[(16, 9, 14), uint64] */;
    %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %361 = bitwise_or(%359, %360) /* ty=Tensor[(16, 9, 14), uint64] */;
    (%361,)
  };
  %362(%var_6350, %var_6351) /* ty=(Tensor[(16, 9, 14), uint64],) */
}

def @func_12728(%var_12725: Tensor[(11, 3, 13), float64]) -> (Tensor[(11, 3, 13), float64],) {
  %363 = cast(%var_12725, dtype="float64") /* ty=Tensor[(11, 3, 13), float64] */;
  %364 = log10(%363) /* ty=Tensor[(11, 3, 13), float64] */;
  (%364,)
}

def @func_11346() -> (Tensor[(2, 420), float32],) {
  %365 = @func_11342() /* ty=(Tensor[(12, 6, 9), float64], Tensor[(2, 420), float32]) */;
  %366 = %365.1;
  (%366,)
}

def @func_10197(%var_10166: Tensor[(2730), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(13, 14, 15), float32], Tensor[(2730), float32], Tensor[(512), float64], Tensor[(975), int64], Tensor[(13, 14, 15), float32]) {
  %367 = @func_9389() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %368 = cast(%var_10166, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %369 = reshape(%368, newshape=[13, 14, 15]) /* ty=Tensor[(13, 14, 15), float32] */;
  %370 = cast(meta[relay.Constant][23] /* ty=Tensor[(975), int64] */, dtype="int64") /* ty=Tensor[(975), int64] */;
  %371 = reshape(%370, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), int64] */;
  %372 = @func_2646(%371) /* ty=(Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) */;
  %373 = cast(%var_10166, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %374 = reshape(%373, newshape=[13, 14, 15]) /* ty=Tensor[(13, 14, 15), float32] */;
  %375 = %367.0;
  %376 = @func_6559(%369) /* ty=Tensor[(13, 14, 15), float32] */;
  %377 = %372.1;
  %378 = @func_6559(%374) /* ty=Tensor[(13, 14, 15), float32] */;
  (%375, %376, %var_10166, %377, meta[relay.Constant][23] /* ty=Tensor[(975), int64] */, %378)
}

def @func_13589() -> (Tensor[(1, 9, 10), float64],) {
  %381 = fn () -> (Tensor[(1, 9, 10), float64],) {
    %379 = @func_10673() /* ty=(Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float32], Tensor[(10, 9, 10), float64], Tensor[(15, 8, 7), bool], Tensor[(1, 975), int64]) */;
    %380 = %379.1;
    (%380,)
  };
  %381() /* ty=(Tensor[(1, 9, 10), float64],) */
}

def @func_7099(%var_7092: Tensor[(6, 5, 3), float64]) -> Tensor[(6, 5, 3), float64] {
  %382 = cast(%var_7092, dtype="float64") /* ty=Tensor[(6, 5, 3), float64] */;
  sinh(%382) /* ty=Tensor[(6, 5, 3), float64] */
}

def @func_11633(%var_11613: Tensor[(2730), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(2730), float32], Tensor[(2730), float32]) {
  %383 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %384 = cast(meta[relay.Constant][24] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %385 = reshape(%384, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float32] */;
  %386 = @func_917(%385) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %387 = cast(%var_11613, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %388 = reshape(%387, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %389 = @func_9189(%388) /* ty=(Tensor[(840), float64], Tensor[(13, 14, 15), float32], Tensor[(2730), float32]) */;
  %390 = %383.0;
  %391 = %386.0;
  %392 = %389.2;
  (%390, %391, meta[relay.Constant][24] /* ty=Tensor[(840), float32] */, %392, %var_11613)
}

def @func_12660(%var_12659: Tensor[(512), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(234), bool], Tensor[(512), float64]) {
  %399 = fn (%var_12654: Tensor[(512), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(234), bool], Tensor[(512), float64]) {
    %393 = @func_11395() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %394 = cast(%var_12654, dtype="float64") /* ty=Tensor[(512), float64] */;
    %395 = reshape(%394, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), float64] */;
    %396 = @func_1141(%395) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(2, 420), float32], Tensor[(8, 8, 8), bool], Tensor[(15, 8, 7), float64], Tensor[(8, 8, 8), uint32]) */;
    %397 = %393.0;
    %398 = %396.1;
    (%397, %398, %var_12654)
  };
  %399(%var_12659) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(234), bool], Tensor[(512), float64]) */
}

def @func_3371(%var_3351: Tensor[(8, 12, 12), int64], %var_3352: Tensor[(8, 12, 12), int64]) -> (Tensor[(8, 12, 12), bool],) {
  %400 = cast(%var_3352, dtype="bool") /* ty=Tensor[(8, 12, 12), bool] */;
  %401 = shape_of(%var_3351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%var_3351, dtype="bool") /* ty=Tensor[(8, 12, 12), bool] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %404 = equal(%402, %403) /* ty=Tensor[(8, 12, 12), bool] */;
  (%404,)
}

def @func_14449() -> (Tensor[(2, 16, 2), float64], Tensor[(16, 9, 14), uint64]) {
  %413 = fn () -> (Tensor[(2, 16, 2), float64], Tensor[(16, 9, 14), uint64]) {
    %405 = @func_9784() /* ty=Tensor[(2, 16, 2), float32] */;
    %406 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 16, 2), float32] */, dtype="float64") /* ty=Tensor[(2, 16, 2), float64] */;
    %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
    %408 = cast(%405, dtype="float64") /* ty=Tensor[(2, 16, 2), float64] */;
    %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %410 = @func_7155() /* ty=(Tensor[(15, 8, 7), bool], Tensor[(16, 9, 14), uint64], Tensor[(2016, 1), float32]) */;
    %411 = mod(%408, %409) /* ty=Tensor[(2, 16, 2), float64] */;
    %412 = %410.1;
    (%411, %412)
  };
  %413() /* ty=(Tensor[(2, 16, 2), float64], Tensor[(16, 9, 14), uint64]) */
}

def @func_14726(%var_14724: Tensor[(1, 9, 10), float32], %var_14725: Tensor[(1152), int64]) -> (Tensor[(?, 9, 10), bool], Tensor[(2, 420), float32], Tensor[(1, 9, 10), float32], Tensor[(525), uint8], Tensor[(1152), int64]) {
  @func_14722(%var_14724, %var_14725) /* ty=(Tensor[(?, 9, 10), bool], Tensor[(2, 420), float32], Tensor[(1, 9, 10), float32], Tensor[(525), uint8], Tensor[(1152), int64]) */
}

def @func_9001() -> (Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32]) {
  %414 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %415 = @func_7975() /* ty=Tensor[(1, 9, 10), float32] */;
  %416 = %414.0;
  (%415, %416)
}

def @func_7234(%var_7217: Tensor[(1152), int64]) -> (Tensor[(1, 9, 10), float32], Tensor[(8, 12, 12), bool], Tensor[(1152), int64], Tensor[(1, 9, 10), float32], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) {
  %417 = cast(%var_7217, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %418 = cast(%var_7217, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %419 = reshape(%417, newshape=[8, 12, 12]) /* ty=Tensor[(8, 12, 12), int64] */;
  %420 = reshape(%418, newshape=[8, 12, 12]) /* ty=Tensor[(8, 12, 12), int64] */;
  %421 = @func_3371(%419, %420) /* ty=(Tensor[(8, 12, 12), bool],) */;
  %422 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %423 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 195), int64] */, dtype="int64") /* ty=Tensor[(5, 195), int64] */;
  %424 = reshape(%423, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), int64] */;
  %425 = @func_2646(%424) /* ty=(Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) */;
  %426 = @func_6811() /* ty=Tensor[(1, 9, 10), float32] */;
  %427 = %421.0;
  %428 = %422.0;
  %429 = %425.0;
  (%426, %427, %var_7217, %428, %429, meta[relay.Constant][26] /* ty=Tensor[(5, 195), int64] */)
}

def @func_8003() -> Tensor[(1, 9, 10), float64] {
  @func_7688() /* ty=Tensor[(1, 9, 10), float64] */
}

def @func_7554(%var_7552: Tensor[(576, 2), int64]) -> (Tensor[(12, 6, 9), bool], Tensor[(8, 12, 12), bool], Tensor[(576, 2), int64], Tensor[(12, 6, 9), float64], Tensor[(12, 6, 9), float32]) {
  @func_7551(%var_7552) /* ty=(Tensor[(12, 6, 9), bool], Tensor[(8, 12, 12), bool], Tensor[(576, 2), int64], Tensor[(12, 6, 9), float64], Tensor[(12, 6, 9), float32]) */
}

def @func_9470() -> (Tensor[(15, 8, 7), bool], Tensor[(1, 9, 10), float32]) {
  %430 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %431 = @func_8531() /* ty=Tensor[(15, 8, 7), bool] */;
  %432 = %430.0;
  (%431, %432)
}

def @func_8688() -> (Tensor[(1, 9, 10), float32],) {
  @func_8686() /* ty=(Tensor[(1, 9, 10), float32],) */
}

def @func_9748() -> Tensor[(1, 9, 10), float32] {
  %434 = fn () -> Tensor[(1, 9, 10), float32] {
    %433 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %433.0
  };
  %434() /* ty=Tensor[(1, 9, 10), float32] */
}

def @func_10791(%var_10790: Tensor[(60, 14), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(840), float32], Tensor[(234), bool], Tensor[(60, 14), float32], Tensor[(1, 9, 10), float64]) {
  %446 = fn (%var_10763: Tensor[(60, 14), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(840), float32], Tensor[(234), bool], Tensor[(60, 14), float32], Tensor[(1, 9, 10), float64]) {
    %435 = @func_9350() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %436 = cast(meta[relay.Constant][27] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
    %437 = cast(meta[relay.Constant][27] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
    %438 = cast(%var_10763, dtype="float32") /* ty=Tensor[(60, 14), float32] */;
    %439 = reshape(%436, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
    %440 = reshape(%437, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
    %441 = reshape(%438, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %442 = @func_1090(%439, %440, %441) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(15, 8, 7), float64]) */;
    %443 = %435.0;
    %444 = %442.2;
    %445 = @func_7688() /* ty=Tensor[(1, 9, 10), float64] */;
    (%443, %444, meta[relay.Constant][27] /* ty=Tensor[(234), bool] */, %var_10763, %445)
  };
  %446(%var_10790) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(840), float32], Tensor[(234), bool], Tensor[(60, 14), float32], Tensor[(1, 9, 10), float64]) */
}

def @func_11095(%var_11093: Tensor[(512), float64]) -> (Tensor[(1, 9, 10), float64], Tensor[(8, 8, 8), uint32], Tensor[(512), float64]) {
  @func_11092(%var_11093) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(8, 8, 8), uint32], Tensor[(512), float64]) */
}

def @func_12295() -> (Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float32]) {
  %450 = fn () -> (Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float32]) {
    %447 = @func_11009() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %448 = @func_8003() /* ty=Tensor[(1, 9, 10), float64] */;
    %449 = %447.0;
    (%448, %449)
  };
  %450() /* ty=(Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float32]) */
}

def @func_6700() -> (Tensor[(1, 9, 10), float32],) {
  %451 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 9, 10), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %452 = cos(%451) /* ty=Tensor[(1, 9, 10), float32] */;
  (%452,)
}

def @func_13576() -> Tensor[(12, 6, 9), float64] {
  %454 = fn () -> Tensor[(12, 6, 9), float64] {
    %453 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
    %453.1
  };
  %454() /* ty=Tensor[(12, 6, 9), float64] */
}

def @func_12102() -> Tensor[(12, 6, 9), float32] {
  %455 = @func_8330() /* ty=(Tensor[(12, 6, 9), float64],) */;
  %456 = %455.0;
  %457 = cast(%456, dtype="float32") /* ty=Tensor[(12, 6, 9), float32] */;
  sigmoid(%457) /* ty=Tensor[(12, 6, 9), float32] */
}

def @func_13266() -> (Tensor[(10, 9, 10), float64], Tensor[(15, 8, 7), float64], Tensor[(?, 9, 10), float32]) {
  %458 = @func_11840() /* ty=(Tensor[(10, 9, 10), float64],) */;
  %459 = @func_12043() /* ty=(Tensor[(15, 8, 7), float64],) */;
  %460 = @func_9747() /* ty=Tensor[(1, 9, 10), float32] */;
  %461 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %462 = %461.0;
  %463 = cast(%462, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %464 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%460, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %467 = %458.0;
  %468 = %459.0;
  %469 = divide(%465, %466) /* ty=Tensor[(?, 9, 10), float32] */;
  (%467, %468, %469)
}

def @func_7421(%var_7418: Tensor[(234), bool], %var_7419: Tensor[(2, 420), float64], %var_7420: Tensor[(2, 420), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(117, 2), bool], Tensor[(234), bool], Tensor[(1, 9, 10), float32], Tensor[(2, 420), uint16]) {
  %484 = fn (%var_7380: Tensor[(234), bool], %var_7381: Tensor[(2, 420), float64], %var_7413: Tensor[(2, 420), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(117, 2), bool], Tensor[(234), bool], Tensor[(1, 9, 10), float32], Tensor[(2, 420), uint16]) {
    %470 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %471 = cast(%var_7380, dtype="bool") /* ty=Tensor[(234), bool] */;
    %472 = cast(%var_7381, dtype="float64") /* ty=Tensor[(2, 420), float64] */;
    %473 = reshape(%471, newshape=[117, 2]) /* ty=Tensor[(117, 2), bool] */;
    %474 = reshape(%472, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float64] */;
    %475 = @func_7024(%473, %474) /* ty=(Tensor[(117, 2), bool], Tensor[(840), float32], Tensor[(?, 9, 10), int32], Tensor[(15, 8, 7), bool], Tensor[(?, 9, 10), float64], Tensor[(?, 9, 10), uint8]) */;
    %476 = cast(%var_7413, dtype="uint16") /* ty=Tensor[(2, 420), uint16] */;
    %477 = shape_of(%var_7381, dtype="int32") /* ty=Tensor[(2), int32] */;
    %478 = cast(%var_7381, dtype="uint16") /* ty=Tensor[(2, 420), uint16] */;
    %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %480 = %470.0;
    %481 = %475.0;
    %482 = @func_6811() /* ty=Tensor[(1, 9, 10), float32] */;
    %483 = add(%478, %479) /* ty=Tensor[(2, 420), uint16] */;
    (%480, %481, %var_7380, %482, %483)
  };
  %484(%var_7418, %var_7419, %var_7420) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(117, 2), bool], Tensor[(234), bool], Tensor[(1, 9, 10), float32], Tensor[(2, 420), uint16]) */
}

def @func_14868() -> (Tensor[(1, 9, 10), float32],) {
  @func_14866() /* ty=(Tensor[(1, 9, 10), float32],) */
}

def @func_10968() -> Tensor[(1, 9, 10), float64] {
  @func_10966() /* ty=Tensor[(1, 9, 10), float64] */
}

def @func_12856() -> (Tensor[(10, 9, 10), float64],) {
  @func_12854() /* ty=(Tensor[(10, 9, 10), float64],) */
}

def @func_14216(%var_14214: Tensor[(429), float64], %var_14215: Tensor[(2, 420), bool]) -> (Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32], Tensor[(910, 3), float64], Tensor[(2730), float32], Tensor[(11, 3, 13), float64], Tensor[(429), float64], Tensor[(2, 420), float64]) {
  %511 = fn (%var_14201: Tensor[(429), float64], %var_14208: Tensor[(2, 420), bool]) -> (Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32], Tensor[(910, 3), float64], Tensor[(2730), float32], Tensor[(11, 3, 13), float64], Tensor[(429), float64], Tensor[(2, 420), float64]) {
    %485 = @func_12431() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %486 = @func_11685() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %487 = cast(meta[relay.Constant][29] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %488 = reshape(%487, newshape=[182, 15]) /* ty=Tensor[(182, 15), float32] */;
    %489 = @func_12577(%488) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(10, 9, 10), float32], Tensor[(182, 15), float32], Tensor[(910, 3), float64]) */;
    %490 = cast(%var_14201, dtype="float64") /* ty=Tensor[(429), float64] */;
    %491 = reshape(%490, newshape=[11, 3, 13]) /* ty=Tensor[(11, 3, 13), float64] */;
    %492 = @func_12728(%491) /* ty=(Tensor[(11, 3, 13), float64],) */;
    %493 = @func_11346() /* ty=(Tensor[(2, 420), float32],) */;
    %494 = %493.0;
    %495 = cast(%494, dtype="float64") /* ty=Tensor[(2, 420), float64] */;
    %496 = sigmoid(%495) /* ty=Tensor[(2, 420), float64] */;
    %497 = cast(%494, dtype="bool") /* ty=Tensor[(2, 420), bool] */;
    %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(2), int32] */;
    %499 = cast(%496, dtype="bool") /* ty=Tensor[(2, 420), bool] */;
    %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %501 = greater_equal(%499, %500) /* ty=Tensor[(2, 420), bool] */;
    %502 = cast(%var_14208, dtype="float64") /* ty=Tensor[(2, 420), float64] */;
    %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(2), int32] */;
    %504 = cast(%501, dtype="float64") /* ty=Tensor[(2, 420), float64] */;
    %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %506 = %485.0;
    %507 = %486.0;
    %508 = %489.3;
    %509 = %492.0;
    %510 = power(%504, %505) /* ty=Tensor[(2, 420), float64] */;
    (%506, %507, %508, meta[relay.Constant][29] /* ty=Tensor[(2730), float32] */, %509, %var_14201, %510)
  };
  %511(%var_14214, %var_14215) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32], Tensor[(910, 3), float64], Tensor[(2730), float32], Tensor[(11, 3, 13), float64], Tensor[(429), float64], Tensor[(2, 420), float64]) */
}

def @func_13408(%var_13406: Tensor[(252), float64]) -> (Tensor[(1, 9, 10), float64], Tensor[(2016), float32], Tensor[(252), float64], Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(15, 8, 7), bool]) {
  @func_13405(%var_13406) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(2016), float32], Tensor[(252), float64], Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(15, 8, 7), bool]) */
}

def @func_10720(%var_10683: Tensor[(4, 9, 10), float64], %var_10690: Tensor[(512), float64]) -> (Tensor[(4, 9, 10), bool], Tensor[(234), bool], Tensor[(512), float64]) {
  %512 = @func_9121() /* ty=(Tensor[(1, 9, 10), float64],) */;
  %513 = %512.0;
  %514 = cast(%513, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
  %515 = cast(%var_10683, dtype="bool") /* ty=Tensor[(4, 9, 10), bool] */;
  %516 = cast(%var_10690, dtype="float64") /* ty=Tensor[(512), float64] */;
  %517 = reshape(%516, newshape=[512]) /* ty=Tensor[(512), float64] */;
  %518 = @func_7587(%517) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(9, 15, 9), float32], Tensor[(1215), float32], Tensor[(234), bool], Tensor[(512), float64]) */;
  %519 = logical_or(%514, %515) /* ty=Tensor[(4, 9, 10), bool] */;
  %520 = %518.3;
  (%519, %520, %var_10690)
}

def @func_12894(%var_12892: Tensor[(12, 6, 9), float64]) -> Tensor[(12, 6, 9), bool] {
  @func_12891(%var_12892) /* ty=Tensor[(12, 6, 9), bool] */
}

def @func_10401(%var_10400: Tensor[(3, 84), float64]) -> (Tensor[(1, 9, 10), float64], Tensor[(2016), float32], Tensor[(1, 9, 10), float64], Tensor[(3, 84), uint64]) {
  %534 = fn (%var_10359: Tensor[(3, 84), float64]) -> (Tensor[(1, 9, 10), float64], Tensor[(2016), float32], Tensor[(1, 9, 10), float64], Tensor[(3, 84), uint64]) {
    %521 = cast(%var_10359, dtype="float64") /* ty=Tensor[(3, 84), float64] */;
    %522 = reshape(%521, newshape=[252]) /* ty=Tensor[(252), float64] */;
    %523 = @func_10105(%522) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(2, 1008), float32], Tensor[(6, 14, 3), float64], Tensor[(252), float64]) */;
    %524 = cast(%var_10359, dtype="float32") /* ty=Tensor[(3, 84), float32] */;
    %525 = log(%524) /* ty=Tensor[(3, 84), float32] */;
    %526 = cast(%var_10359, dtype="uint64") /* ty=Tensor[(3, 84), uint64] */;
    %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(2), int32] */;
    %528 = cast(%525, dtype="uint64") /* ty=Tensor[(3, 84), uint64] */;
    %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %530 = @func_8790() /* ty=Tensor[(1, 9, 10), float64] */;
    %531 = %523.1;
    %532 = @func_7688() /* ty=Tensor[(1, 9, 10), float64] */;
    %533 = left_shift(%528, %529) /* ty=Tensor[(3, 84), uint64] */;
    (%530, %531, %532, %533)
  };
  %534(%var_10400) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(2016), float32], Tensor[(1, 9, 10), float64], Tensor[(3, 84), uint64]) */
}

def @func_13650() -> (Tensor[(1, 9, 10), float32],) {
  %535 = @func_8967() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %536 = %535.0;
  (%536,)
}

def @func_13431() -> (Tensor[(12, 6, 9), float32],) {
  %538 = fn () -> (Tensor[(12, 6, 9), float32],) {
    %537 = @func_12102() /* ty=Tensor[(12, 6, 9), float32] */;
    (%537,)
  };
  %538() /* ty=(Tensor[(12, 6, 9), float32],) */
}

def @func_7075() -> (Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) {
  @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */
}

def @func_14359(%var_14319: Tensor[(10, 8, 4), float64], %var_14320: Tensor[(10, 8, 4), float64], %var_14329: Tensor[(2016), float32]) -> (Tensor[(10, 8, 4), float64], Tensor[(?, 9, 10), bool], Tensor[(16, 9, 14), uint64], Tensor[(2016), float32], Tensor[(1, 9, 10), float32]) {
  %539 = cast(%var_14320, dtype="float64") /* ty=Tensor[(10, 8, 4), float64] */;
  %540 = shape_of(%var_14319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%var_14319, dtype="float64") /* ty=Tensor[(10, 8, 4), float64] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %543 = cast(%var_14329, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %544 = cast(%var_14329, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %545 = reshape(%543, newshape=[16, 9, 14]) /* ty=Tensor[(16, 9, 14), float32] */;
  %546 = reshape(%544, newshape=[16, 9, 14]) /* ty=Tensor[(16, 9, 14), float32] */;
  %547 = @func_6349(%545, %546) /* ty=(Tensor[(16, 9, 14), uint64],) */;
  %548 = @func_9001() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32]) */;
  %549 = floor_mod(%541, %542) /* ty=Tensor[(10, 8, 4), float64] */;
  %550 = @func_12875() /* ty=Tensor[(?, 9, 10), bool] */;
  %551 = %547.0;
  %552 = %548.0;
  (%549, %550, %551, %var_14329, %552)
}

def @func_8686() -> (Tensor[(1, 9, 10), float32],) {
  %553 = @func_8464() /* ty=Tensor[(1, 9, 10), float32] */;
  (%553,)
}

def @func_12577(%var_12570: Tensor[(182, 15), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(10, 9, 10), float32], Tensor[(182, 15), float32], Tensor[(910, 3), float64]) {
  %554 = @func_12431() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %555 = @func_9266() /* ty=Tensor[(10, 9, 10), float64] */;
  %556 = cast(%555, dtype="float32") /* ty=Tensor[(10, 9, 10), float32] */;
  %557 = cast(%var_12570, dtype="float32") /* ty=Tensor[(182, 15), float32] */;
  %558 = reshape(%557, newshape=[910, 3]) /* ty=Tensor[(910, 3), float32] */;
  %559 = @func_12449(%558) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(840), float64], Tensor[(910, 3), float32]) */;
  %560 = %559.2;
  %561 = cast(%560, dtype="float64") /* ty=Tensor[(910, 3), float64] */;
  %562 = %554.0;
  %563 = asin(%556) /* ty=Tensor[(10, 9, 10), float32] */;
  %564 = tan(%561) /* ty=Tensor[(910, 3), float64] */;
  (%562, %563, %var_12570, %564)
}

def @func_10337() -> (Tensor[(12, 6, 9), float64],) {
  %565 = @func_8330() /* ty=(Tensor[(12, 6, 9), float64],) */;
  %566 = %565.0;
  (%566,)
}

def @func_10724(%var_10722: Tensor[(4, 9, 10), float64], %var_10723: Tensor[(512), float64]) -> (Tensor[(4, 9, 10), bool], Tensor[(234), bool], Tensor[(512), float64]) {
  @func_10720(%var_10722, %var_10723) /* ty=(Tensor[(4, 9, 10), bool], Tensor[(234), bool], Tensor[(512), float64]) */
}

def @func_12731(%var_12729: Tensor[(11, 3, 13), float64]) -> (Tensor[(11, 3, 13), float64],) {
  @func_12728(%var_12729) /* ty=(Tensor[(11, 3, 13), float64],) */
}

def @func_14285(%var_14283: Tensor[(12, 6, 9), float32], %var_14284: Tensor[(3, 84), float64]) -> (Tensor[(12, 6, 9), int32], Tensor[(10, 9, 10), float64], Tensor[(13, 15, 5), int64], Tensor[(3, 84), float64]) {
  %581 = fn (%var_14240: Tensor[(12, 6, 9), float32], %var_14275: Tensor[(3, 84), float64]) -> (Tensor[(12, 6, 9), int32], Tensor[(10, 9, 10), float64], Tensor[(13, 15, 5), int64], Tensor[(3, 84), float64]) {
    %567 = @func_13468() /* ty=Tensor[(12, 6, 9), float32] */;
    %568 = cast(%var_14240, dtype="int32") /* ty=Tensor[(12, 6, 9), int32] */;
    %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
    %570 = cast(%567, dtype="int32") /* ty=Tensor[(12, 6, 9), int32] */;
    %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %572 = @func_11840() /* ty=(Tensor[(10, 9, 10), float64],) */;
    %573 = cast(%var_14275, dtype="float64") /* ty=Tensor[(3, 84), float64] */;
    %574 = cast(%var_14275, dtype="float64") /* ty=Tensor[(3, 84), float64] */;
    %575 = reshape(%573, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float64] */;
    %576 = reshape(%574, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float64] */;
    %577 = @func_2710(%575, %576) /* ty=(Tensor[(6, 14, 3), float64], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) */;
    %578 = add(%570, %571) /* ty=Tensor[(12, 6, 9), int32] */;
    %579 = %572.0;
    %580 = %577.1;
    (%578, %579, %580, %var_14275)
  };
  %581(%var_14283, %var_14284) /* ty=(Tensor[(12, 6, 9), int32], Tensor[(10, 9, 10), float64], Tensor[(13, 15, 5), int64], Tensor[(3, 84), float64]) */
}

def @func_13652() -> (Tensor[(1, 9, 10), float32],) {
  @func_13650() /* ty=(Tensor[(1, 9, 10), float32],) */
}

def @func_2960(%var_2958: Tensor[(9, 15, 9), float32]) -> (Tensor[(9, 15, 9), float32],) {
  @func_2957(%var_2958) /* ty=(Tensor[(9, 15, 9), float32],) */
}

def @func_6883() -> (Tensor[(1, 9, 10), float32],) {
  %583 = fn () -> (Tensor[(1, 9, 10), float32],) {
    %582 = @func_6811() /* ty=Tensor[(1, 9, 10), float32] */;
    (%582,)
  };
  %583() /* ty=(Tensor[(1, 9, 10), float32],) */
}

def @func_8005() -> Tensor[(1, 9, 10), float64] {
  @func_8003() /* ty=Tensor[(1, 9, 10), float64] */
}

def @func_14364(%var_14361: Tensor[(10, 8, 4), float64], %var_14362: Tensor[(10, 8, 4), float64], %var_14363: Tensor[(2016), float32]) -> (Tensor[(10, 8, 4), float64], Tensor[(?, 9, 10), bool], Tensor[(16, 9, 14), uint64], Tensor[(2016), float32], Tensor[(1, 9, 10), float32]) {
  @func_14359(%var_14361, %var_14362, %var_14363) /* ty=(Tensor[(10, 8, 4), float64], Tensor[(?, 9, 10), bool], Tensor[(16, 9, 14), uint64], Tensor[(2016), float32], Tensor[(1, 9, 10), float32]) */
}

def @func_12449(%var_12445: Tensor[(910, 3), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(840), float64], Tensor[(910, 3), float32]) {
  %584 = cast(%var_12445, dtype="float32") /* ty=Tensor[(910, 3), float32] */;
  %585 = reshape(%584, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %586 = @func_9189(%585) /* ty=(Tensor[(840), float64], Tensor[(13, 14, 15), float32], Tensor[(2730), float32]) */;
  %587 = @func_11833() /* ty=Tensor[(1, 9, 10), float32] */;
  %588 = %586.0;
  (%587, %588, %var_12445)
}

def @func_11343() -> (Tensor[(12, 6, 9), float64], Tensor[(2, 420), float32]) {
  %593 = fn () -> (Tensor[(12, 6, 9), float64], Tensor[(2, 420), float32]) {
    %589 = @func_10337() /* ty=(Tensor[(12, 6, 9), float64],) */;
    %590 = @func_9961() /* ty=(Tensor[(?, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(975), int64]) */;
    %591 = %589.0;
    %592 = %590.2;
    (%591, %592)
  };
  %593() /* ty=(Tensor[(12, 6, 9), float64], Tensor[(2, 420), float32]) */
}

def @func_8289(%var_8208: Tensor[(2, 9, 10), float32], %var_8230: Tensor[(630), uint32], %var_8247: Tensor[(234), bool]) -> (Tensor[(2, 9, 10), bool], Tensor[(10, 7, 9), uint32], Tensor[(630), uint32], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(9, 2, 13), bool], Tensor[(840), float32], Tensor[(234), float32]) {
  %594 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %595 = %594.0;
  %596 = cast(%595, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
  %597 = cast(%var_8208, dtype="bool") /* ty=Tensor[(2, 9, 10), bool] */;
  %598 = cast(%var_8230, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %599 = cast(%var_8230, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %600 = reshape(%598, newshape=[10, 7, 9]) /* ty=Tensor[(10, 7, 9), uint32] */;
  %601 = reshape(%599, newshape=[10, 7, 9]) /* ty=Tensor[(10, 7, 9), uint32] */;
  %602 = cast(meta[relay.Constant][30] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %603 = reshape(%602, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %604 = cast(%var_8247, dtype="bool") /* ty=Tensor[(234), bool] */;
  %605 = cast(%var_8247, dtype="bool") /* ty=Tensor[(234), bool] */;
  %606 = cast(meta[relay.Constant][31] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %607 = reshape(%604, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %608 = reshape(%605, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %609 = reshape(%606, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %610 = @func_1090(%607, %608, %609) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(15, 8, 7), float64]) */;
  %611 = cast(%var_8247, dtype="float32") /* ty=Tensor[(234), float32] */;
  %612 = equal(%596, %597) /* ty=Tensor[(2, 9, 10), bool] */;
  %613 = @func_1398(%600, %601) /* ty=Tensor[(10, 7, 9), uint32] */;
  %614 = @func_4912(%603) /* ty=Tensor[(12, 6, 9), float64] */;
  %615 = %610.3;
  %616 = sinh(%611) /* ty=Tensor[(234), float32] */;
  (%612, %613, %var_8230, %614, meta[relay.Constant][30] /* ty=Tensor[(648), float64] */, %615, meta[relay.Constant][31] /* ty=Tensor[(840), float32] */, %616)
}

def @func_10339() -> (Tensor[(12, 6, 9), float64],) {
  @func_10337() /* ty=(Tensor[(12, 6, 9), float64],) */
}

def @func_14997(%var_14996: Tensor[(9, 60), float32]) -> (Tensor[(15, 8, 7), float32], Tensor[(1, 9, 10), float32], Tensor[(6, 9, 10), bool], Tensor[(9, 60), float32], Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float64]) {
  %634 = fn (%var_14940: Tensor[(9, 60), float32]) -> (Tensor[(15, 8, 7), float32], Tensor[(1, 9, 10), float32], Tensor[(6, 9, 10), bool], Tensor[(9, 60), float32], Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float64]) {
    %617 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
    %618 = %617.1;
    %619 = cast(%618, dtype="float32") /* ty=Tensor[(15, 8, 7), float32] */;
    %620 = cast(%var_14940, dtype="float32") /* ty=Tensor[(9, 60), float32] */;
    %621 = @func_11833() /* ty=Tensor[(1, 9, 10), float32] */;
    %622 = cast(%621, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
    %623 = reshape(%620, newshape=[6, 9, 10]) /* ty=Tensor[(6, 9, 10), float32] */;
    %624 = reshape(%622, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float32] */;
    %625 = @func_8110(%623, %624) /* ty=(Tensor[(6, 9, 10), bool], Tensor[(?, 9, 10), float64]) */;
    %626 = @func_9106() /* ty=(Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) */;
    %627 = @func_8686() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %628 = @func_10473() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(?, 9, 10), bool], Tensor[(1, 9, 10), float64], Tensor[(2, 256), float64]) */;
    %629 = atanh(%619) /* ty=Tensor[(15, 8, 7), float32] */;
    %630 = %625.0;
    %631 = %626.0;
    %632 = %627.0;
    %633 = %628.2;
    (%629, %621, %630, %var_14940, %631, %632, %633)
  };
  %634(%var_14996) /* ty=(Tensor[(15, 8, 7), float32], Tensor[(1, 9, 10), float32], Tensor[(6, 9, 10), bool], Tensor[(9, 60), float32], Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float64]) */
}

def @func_10604() -> Tensor[(15, 8, 7), bool] {
  @func_10602() /* ty=Tensor[(15, 8, 7), bool] */
}

def @func_11833() -> Tensor[(1, 9, 10), float32] {
  @func_8464() /* ty=Tensor[(1, 9, 10), float32] */
}

def @func_12876() -> Tensor[(?, 9, 10), bool] {
  %636 = fn () -> Tensor[(?, 9, 10), bool] {
    %635 = @func_10285() /* ty=(Tensor[(?, 9, 10), bool], Tensor[(14, 144), int16]) */;
    %635.0
  };
  %636() /* ty=Tensor[(?, 9, 10), bool] */
}

def @func_9003() -> (Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32]) {
  @func_9001() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32]) */
}

def @func_7237(%var_7235: Tensor[(1152), int64]) -> (Tensor[(1, 9, 10), float32], Tensor[(8, 12, 12), bool], Tensor[(1152), int64], Tensor[(1, 9, 10), float32], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) {
  @func_7234(%var_7235) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(8, 12, 12), bool], Tensor[(1152), int64], Tensor[(1, 9, 10), float32], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) */
}

def @func_13110(%var_13076: Tensor[(1, 252), float64], %var_13080: Tensor[(1680), uint16], %var_13106: Tensor[(11, 252), float64]) -> (Tensor[(?, 9, 10), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(252), float64], Tensor[(13, 14, 15), float32], Tensor[(1680), uint16], Tensor[(15, 8, 7), bool], Tensor[(1008), float64], Tensor[(12, 6, 9), float64], Tensor[(11, 252), float32]) {
  %637 = @func_10285() /* ty=(Tensor[(?, 9, 10), bool], Tensor[(14, 144), int16]) */;
  %638 = cast(meta[relay.Constant][32] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %639 = reshape(%638, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float32] */;
  %640 = @func_917(%639) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %641 = cast(%var_13076, dtype="float64") /* ty=Tensor[(1, 252), float64] */;
  %642 = reshape(%641, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %643 = @func_11979(%642) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(252), float64]) */;
  %644 = cast(%var_13080, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
  %645 = reshape(%644, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint16] */;
  %646 = @func_12171(%645) /* ty=(Tensor[(14, 12, 10), bool], Tensor[(13, 14, 15), float32], Tensor[(2730), float32]) */;
  %647 = %643.2;
  %648 = cast(%647, dtype="float64") /* ty=Tensor[(252), float64] */;
  %649 = cast(meta[relay.Constant][33] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %650 = reshape(%648, newshape=[252, 1]) /* ty=Tensor[(252, 1), float64] */;
  %651 = reshape(%649, newshape=[252, 4]) /* ty=Tensor[(252, 4), float64] */;
  %652 = @func_11667(%650, %651) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(15, 8, 7), bool], Tensor[(1, 9, 10), float32], Tensor[(252, 4), bool]) */;
  %653 = @func_8330() /* ty=(Tensor[(12, 6, 9), float64],) */;
  %654 = cast(%var_13076, dtype="float64") /* ty=Tensor[(1, 252), float64] */;
  %655 = asinh(%654) /* ty=Tensor[(1, 252), float64] */;
  %656 = cast(%655, dtype="float32") /* ty=Tensor[(1, 252), float32] */;
  %657 = cast(%var_13106, dtype="float32") /* ty=Tensor[(11, 252), float32] */;
  %658 = %637.0;
  %659 = %640.0;
  %660 = %646.1;
  %661 = %652.2;
  %662 = %653.0;
  %663 = divide(%656, %657) /* ty=Tensor[(11, 252), float32] */;
  (%658, %659, meta[relay.Constant][32] /* ty=Tensor[(840), float32] */, %647, %660, %var_13080, %661, meta[relay.Constant][33] /* ty=Tensor[(1008), float64] */, %662, %663)
}

def @func_10501(%var_10499: Tensor[(7, 9, 10), float32]) -> (Tensor[(7, 9, 10), uint8], Tensor[(?, 9, 10), float64]) {
  @func_10498(%var_10499) /* ty=(Tensor[(7, 9, 10), uint8], Tensor[(?, 9, 10), float64]) */
}

def @func_7156() -> (Tensor[(15, 8, 7), bool], Tensor[(16, 9, 14), uint64], Tensor[(2016, 1), float32]) {
  %672 = fn () -> (Tensor[(15, 8, 7), bool], Tensor[(16, 9, 14), uint64], Tensor[(2016, 1), float32]) {
    %664 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
    %665 = cast(meta[relay.Constant][34] /* ty=Tensor[(2016, 1), float32] */, dtype="float32") /* ty=Tensor[(2016, 1), float32] */;
    %666 = cast(meta[relay.Constant][34] /* ty=Tensor[(2016, 1), float32] */, dtype="float32") /* ty=Tensor[(2016, 1), float32] */;
    %667 = reshape(%665, newshape=[16, 9, 14]) /* ty=Tensor[(16, 9, 14), float32] */;
    %668 = reshape(%666, newshape=[16, 9, 14]) /* ty=Tensor[(16, 9, 14), float32] */;
    %669 = @func_6349(%667, %668) /* ty=(Tensor[(16, 9, 14), uint64],) */;
    %670 = %664.1;
    %671 = %669.0;
    (%670, %671, meta[relay.Constant][34] /* ty=Tensor[(2016, 1), float32] */)
  };
  %672() /* ty=(Tensor[(15, 8, 7), bool], Tensor[(16, 9, 14), uint64], Tensor[(2016, 1), float32]) */
}

def @func_10105(%var_10100: Tensor[(252), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(2, 1008), float32], Tensor[(6, 14, 3), float64], Tensor[(252), float64]) {
  %673 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %674 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 1008), float32] */, dtype="float32") /* ty=Tensor[(2, 1008), float32] */;
  %675 = reshape(%674, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %676 = @func_7350(%675) /* ty=(Tensor[(840), float64], Tensor[(16, 9, 14), uint64], Tensor[(2016), float32], Tensor[(15, 8, 7), float64]) */;
  %677 = cast(%var_10100, dtype="float64") /* ty=Tensor[(252), float64] */;
  %678 = cast(%var_10100, dtype="float64") /* ty=Tensor[(252), float64] */;
  %679 = reshape(%677, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float64] */;
  %680 = reshape(%678, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float64] */;
  %681 = @func_2710(%679, %680) /* ty=(Tensor[(6, 14, 3), float64], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) */;
  %682 = %673.0;
  %683 = %676.2;
  %684 = %681.0;
  (%682, %683, meta[relay.Constant][35] /* ty=Tensor[(2, 1008), float32] */, %684, %var_10100)
}

def @func_7350(%var_7335: Tensor[(2016), float32]) -> (Tensor[(840), float64], Tensor[(16, 9, 14), uint64], Tensor[(2016), float32], Tensor[(15, 8, 7), float64]) {
  %685 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
  %686 = cast(%var_7335, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %687 = cast(%var_7335, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %688 = reshape(%686, newshape=[16, 9, 14]) /* ty=Tensor[(16, 9, 14), float32] */;
  %689 = reshape(%687, newshape=[16, 9, 14]) /* ty=Tensor[(16, 9, 14), float32] */;
  %690 = @func_6349(%688, %689) /* ty=(Tensor[(16, 9, 14), uint64],) */;
  %691 = %685.0;
  %692 = cast(%691, dtype="float32") /* ty=Tensor[(840), float32] */;
  %693 = reshape(%692, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float32] */;
  %694 = @func_917(%693) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %695 = %690.0;
  %696 = %694.0;
  (%691, %695, %var_7335, %696)
}

def @func_7736(%var_7734: Tensor[(512), float64]) -> (Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(512), float64]) {
  @func_7733(%var_7734) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(512), float64]) */
}

def @func_11594() -> (Tensor[(1, 9, 10), float32],) {
  @func_11592() /* ty=(Tensor[(1, 9, 10), float32],) */
}

def @func_9266() -> Tensor[(10, 9, 10), float64] {
  %697 = @func_7975() /* ty=Tensor[(1, 9, 10), float32] */;
  %698 = cast(%697, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
  %699 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 9, 10), float32] */, dtype="float64") /* ty=Tensor[(10, 9, 10), float64] */;
  floor_mod(%698, %699) /* ty=Tensor[(10, 9, 10), float64] */
}

def @func_9332(%var_9330: Tensor[(1, 9, 10), float32], %var_9331: Tensor[(2016), float32]) -> (Tensor[(?, 9, 10), bool], Tensor[(1, 9, 10), float64], Tensor[(840), float64], Tensor[(2016), float32]) {
  @func_9328(%var_9330, %var_9331) /* ty=(Tensor[(?, 9, 10), bool], Tensor[(1, 9, 10), float64], Tensor[(840), float64], Tensor[(2016), float32]) */
}

def @func_9535() -> Tensor[(1, 9, 10), float64] {
  @func_9533() /* ty=Tensor[(1, 9, 10), float64] */
}

def @func_9389() -> (Tensor[(1, 9, 10), float32],) {
  %700 = @func_8967() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %701 = %700.0;
  (%701,)
}

def @func_11592() -> (Tensor[(1, 9, 10), float32],) {
  %702 = @func_11009() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %703 = %702.0;
  (%703,)
}

def @func_7976() -> Tensor[(1, 9, 10), float32] {
  %705 = fn () -> Tensor[(1, 9, 10), float32] {
    %704 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %704.0
  };
  %705() /* ty=Tensor[(1, 9, 10), float32] */
}

def @func_9268() -> Tensor[(10, 9, 10), float64] {
  @func_9266() /* ty=Tensor[(10, 9, 10), float64] */
}

def @func_14841() -> Tensor[(12, 6, 9), float64] {
  %707 = fn () -> Tensor[(12, 6, 9), float64] {
    %706 = @func_14465() /* ty=(Tensor[(12, 6, 9), float64], Tensor[(1, 9, 10), float64]) */;
    %706.0
  };
  %707() /* ty=Tensor[(12, 6, 9), float64] */
}

def @main(%var_15050: Tensor[(15, 8, 7), float64]) -> (Tensor[(15, 8, 7), int16],) {
  %708 = @func_10220() /* ty=Tensor[(15, 8, 7), float64] */;
  %709 = cast(%var_15050, dtype="int16") /* ty=Tensor[(15, 8, 7), int16] */;
  %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%708, dtype="int16") /* ty=Tensor[(15, 8, 7), int16] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %713 = multiply(%711, %712) /* ty=Tensor[(15, 8, 7), int16] */;
  (%713,)
}

def @func_10286() -> (Tensor[(?, 9, 10), bool], Tensor[(14, 144), int16]) {
  %731 = fn () -> (Tensor[(?, 9, 10), bool], Tensor[(14, 144), int16]) {
    %714 = @func_6811() /* ty=Tensor[(1, 9, 10), float32] */;
    %715 = cast(%714, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
    %716 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 144), float32] */, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
    %717 = reshape(%715, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float32] */;
    %718 = reshape(%716, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
    %719 = @func_9328(%717, %718) /* ty=(Tensor[(?, 9, 10), bool], Tensor[(1, 9, 10), float64], Tensor[(840), float64], Tensor[(2016), float32]) */;
    %720 = %719.0;
    %721 = cast(%720, dtype="bool") /* ty=Tensor[(?, 9, 10), bool] */;
    %722 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
    %723 = cast(%714, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
    %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %725 = cast(meta[relay.Constant][38] /* ty=Tensor[(14, 144), float32] */, dtype="int16") /* ty=Tensor[(14, 144), int16] */;
    %726 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(14, 144), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %727 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 144), float32] */, dtype="int16") /* ty=Tensor[(14, 144), int16] */;
    %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %729 = logical_and(%723, %724) /* ty=Tensor[(?, 9, 10), bool] */;
    %730 = right_shift(%727, %728) /* ty=Tensor[(14, 144), int16] */;
    (%729, %730)
  };
  %731() /* ty=(Tensor[(?, 9, 10), bool], Tensor[(14, 144), int16]) */
}

def @func_13001(%var_12999: Tensor[(252), float64], %var_13000: Tensor[(1008), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32], Tensor[(252), float64], Tensor[(1008), float64], Tensor[(12, 9, 10), float64], Tensor[(1080), float32]) {
  %744 = fn (%var_12983: Tensor[(252), float64], %var_12984: Tensor[(1008), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32], Tensor[(252), float64], Tensor[(1008), float64], Tensor[(12, 9, 10), float64], Tensor[(1080), float32]) {
    %732 = @func_11685() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %733 = cast(%var_12983, dtype="float64") /* ty=Tensor[(252), float64] */;
    %734 = cast(%var_12984, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %735 = reshape(%733, newshape=[252, 1]) /* ty=Tensor[(252, 1), float64] */;
    %736 = reshape(%734, newshape=[252, 4]) /* ty=Tensor[(252, 4), float64] */;
    %737 = @func_11667(%735, %736) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(15, 8, 7), bool], Tensor[(1, 9, 10), float32], Tensor[(252, 4), bool]) */;
    %738 = cast(meta[relay.Constant][39] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %739 = reshape(%738, newshape=[12, 9, 10]) /* ty=Tensor[(12, 9, 10), float32] */;
    %740 = @func_12021(%739) /* ty=(Tensor[(12, 9, 10), bool], Tensor[(12, 9, 10), float64]) */;
    %741 = %732.0;
    %742 = %737.0;
    %743 = %740.1;
    (%741, %742, %var_12983, %var_12984, %743, meta[relay.Constant][39] /* ty=Tensor[(1080), float32] */)
  };
  %744(%var_12999, %var_13000) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32], Tensor[(252), float64], Tensor[(1008), float64], Tensor[(12, 9, 10), float64], Tensor[(1080), float32]) */
}

def @func_1090(%var_1025: Tensor[(9, 2, 13), bool], %var_1026: Tensor[(9, 2, 13), bool], %var_1033: Tensor[(840), float32]) -> (Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(15, 8, 7), float64]) {
  %745 = cast(%var_1026, dtype="bool") /* ty=Tensor[(9, 2, 13), bool] */;
  %746 = shape_of(%var_1025, dtype="int32") /* ty=Tensor[(3), int32] */;
  %747 = cast(%var_1025, dtype="bool") /* ty=Tensor[(9, 2, 13), bool] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %749 = cast(%var_1033, dtype="float32") /* ty=Tensor[(840), float32] */;
  %750 = reshape(%749, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float32] */;
  %751 = @func_917(%750) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %752 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 2, 13), bool] */, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
  %753 = shape_of(%var_1025, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%var_1025, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %756 = power(%754, %755) /* ty=Tensor[(9, 2, 13), float64] */;
  %757 = cast(meta[relay.Constant][41] /* ty=Tensor[(9, 2, 13), bool] */, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
  %758 = shape_of(%var_1026, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%var_1026, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %761 = floor_divide(%759, %760) /* ty=Tensor[(9, 2, 13), float64] */;
  %762 = cast(%761, dtype="bool") /* ty=Tensor[(9, 2, 13), bool] */;
  %763 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%756, dtype="bool") /* ty=Tensor[(9, 2, 13), bool] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %766 = %751.0;
  %767 = cast(%766, dtype="float32") /* ty=Tensor[(15, 8, 7), float32] */;
  %768 = reshape(%767, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float32] */;
  %769 = @func_917(%768) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %770 = %769.0;
  %771 = cast(%770, dtype="float32") /* ty=Tensor[(15, 8, 7), float32] */;
  %772 = reshape(%771, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float32] */;
  %773 = @func_917(%772) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %774 = logical_or(%747, %748) /* ty=Tensor[(9, 2, 13), bool] */;
  %775 = less(%764, %765) /* ty=Tensor[(9, 2, 13), bool] */;
  %776 = %773.0;
  (%774, %766, %var_1033, %775, %770, %776)
}

def @func_13801() -> Tensor[(10, 9, 10), float64] {
  %778 = fn () -> Tensor[(10, 9, 10), float64] {
    %777 = @func_12854() /* ty=(Tensor[(10, 9, 10), float64],) */;
    %777.0
  };
  %778() /* ty=Tensor[(10, 9, 10), float64] */
}

def @func_2649(%var_2647: Tensor[(13, 15, 5), int64]) -> (Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) {
  @func_2646(%var_2647) /* ty=(Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) */
}

def @func_8464() -> Tensor[(1, 9, 10), float32] {
  @func_7975() /* ty=Tensor[(1, 9, 10), float32] */
}

def @func_9533() -> Tensor[(1, 9, 10), float64] {
  @func_8003() /* ty=Tensor[(1, 9, 10), float64] */
}

def @func_11395() -> (Tensor[(1, 9, 10), float32],) {
  %779 = @func_8686() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %780 = %779.0;
  (%780,)
}

def @func_11397() -> (Tensor[(1, 9, 10), float32],) {
  @func_11395() /* ty=(Tensor[(1, 9, 10), float32],) */
}

def @func_13048() -> (Tensor[(12, 6, 9), float64], Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(840), float32]) {
  %781 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
  %782 = cast(meta[relay.Constant][42] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
  %783 = cast(meta[relay.Constant][42] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
  %784 = cast(meta[relay.Constant][43] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %785 = reshape(%782, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %786 = reshape(%783, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
  %787 = reshape(%784, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %788 = @func_1090(%785, %786, %787) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(15, 8, 7), float64]) */;
  %789 = %781.1;
  %790 = %788.3;
  (%789, %790, meta[relay.Constant][42] /* ty=Tensor[(234), bool] */, meta[relay.Constant][43] /* ty=Tensor[(840), float32] */)
}

def @func_13383(%var_13381: Tensor[(12, 6, 9), float64], %var_13382: Tensor[(975), int64]) -> (Tensor[(12, 6, 9), uint16], Tensor[(13, 15, 5), int64], Tensor[(975), int64]) {
  %802 = fn (%var_13367: Tensor[(12, 6, 9), float64], %var_13378: Tensor[(975), int64]) -> (Tensor[(12, 6, 9), uint16], Tensor[(13, 15, 5), int64], Tensor[(975), int64]) {
    %791 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
    %792 = %791.1;
    %793 = cast(%var_13367, dtype="uint16") /* ty=Tensor[(12, 6, 9), uint16] */;
    %794 = shape_of(%792, dtype="int32") /* ty=Tensor[(3), int32] */;
    %795 = cast(%792, dtype="uint16") /* ty=Tensor[(12, 6, 9), uint16] */;
    %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %797 = cast(%var_13378, dtype="int64") /* ty=Tensor[(975), int64] */;
    %798 = reshape(%797, newshape=[975, 1]) /* ty=Tensor[(975, 1), int64] */;
    %799 = @func_8174(%798) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(13, 15, 5), int64], Tensor[(975, 1), int64]) */;
    %800 = bitwise_or(%795, %796) /* ty=Tensor[(12, 6, 9), uint16] */;
    %801 = %799.1;
    (%800, %801, %var_13378)
  };
  %802(%var_13381, %var_13382) /* ty=(Tensor[(12, 6, 9), uint16], Tensor[(13, 15, 5), int64], Tensor[(975), int64]) */
}

def @func_12854() -> (Tensor[(10, 9, 10), float64],) {
  %803 = @func_9266() /* ty=Tensor[(10, 9, 10), float64] */;
  (%803,)
}

def @func_12264(%var_12261: Tensor[(420, 1), uint16], %var_12262: Tensor[(126, 2), float64], %var_12263: Tensor[(210, 3), uint32]) -> (Tensor[(1, 9, 10), float64], Tensor[(5, 6, 14), uint16], Tensor[(420, 1), uint16], Tensor[(1, 9, 10), float32], Tensor[(14, 144), float32], Tensor[(9, 15, 9), float32], Tensor[(640), float64], Tensor[(1215), float32], Tensor[(126, 2), float64], Tensor[(525, 1), uint8], Tensor[(210, 3), uint32], Tensor[(252), float64], Tensor[(2, 1008), float32], Tensor[(15, 8, 7), float64]) {
  %841 = fn (%var_12217: Tensor[(420, 1), uint16], %var_12242: Tensor[(126, 2), float64], %var_12244: Tensor[(210, 3), uint32]) -> (Tensor[(1, 9, 10), float64], Tensor[(5, 6, 14), uint16], Tensor[(420, 1), uint16], Tensor[(1, 9, 10), float32], Tensor[(14, 144), float32], Tensor[(9, 15, 9), float32], Tensor[(640), float64], Tensor[(1215), float32], Tensor[(126, 2), float64], Tensor[(525, 1), uint8], Tensor[(210, 3), uint32], Tensor[(252), float64], Tensor[(2, 1008), float32], Tensor[(15, 8, 7), float64]) {
    %804 = cast(%var_12217, dtype="uint16") /* ty=Tensor[(420, 1), uint16] */;
    %805 = reshape(%804, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), uint16] */;
    %806 = @func_5222(%805) /* ty=(Tensor[(5, 6, 14), uint16],) */;
    %807 = @func_11009() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %808 = @func_10285() /* ty=(Tensor[(?, 9, 10), bool], Tensor[(14, 144), int16]) */;
    %809 = %808.1;
    %810 = cast(%809, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
    %811 = cast(meta[relay.Constant][44] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
    %812 = cast(meta[relay.Constant][45] /* ty=Tensor[(1215), float32] */, dtype="float32") /* ty=Tensor[(1215), float32] */;
    %813 = cast(%var_12242, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
    %814 = cast(meta[relay.Constant][46] /* ty=Tensor[(525, 1), uint8] */, dtype="uint8") /* ty=Tensor[(525, 1), uint8] */;
    %815 = cast(%var_12244, dtype="uint32") /* ty=Tensor[(210, 3), uint32] */;
    %816 = cast(meta[relay.Constant][44] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
    %817 = reshape(%811, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float64] */;
    %818 = reshape(%812, newshape=[1215]) /* ty=Tensor[(1215), float32] */;
    %819 = reshape(%813, newshape=[252]) /* ty=Tensor[(252), float64] */;
    %820 = reshape(%814, newshape=[1, 525]) /* ty=Tensor[(1, 525), uint8] */;
    %821 = reshape(%815, newshape=[630]) /* ty=Tensor[(630), uint32] */;
    %822 = reshape(%816, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float64] */;
    %823 = @func_4830(%817, %818, %819, %820, %821, %822) /* ty=(Tensor[(10, 16, 4), int64], Tensor[(9, 15, 9), float32], Tensor[(1215), float32], Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(840), float32], Tensor[(512), float64], Tensor[(256, 2), float64], Tensor[(5, 195), int64], Tensor[(252), float64], Tensor[(15, 5, 7), bool], Tensor[(1, 525), uint8], Tensor[(9, 15, 9), float32], Tensor[(10, 7, 9), uint32], Tensor[(630), uint32], Tensor[(5, 195), int64], Tensor[(10, 16, 4), bool]) */;
    %824 = cast(%var_12242, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
    %825 = reshape(%824, newshape=[252]) /* ty=Tensor[(252), float64] */;
    %826 = @func_11979(%825) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(252), float64]) */;
    %827 = cast(%var_12242, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
    %828 = reshape(%827, newshape=[252]) /* ty=Tensor[(252), float64] */;
    %829 = @func_10105(%828) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(2, 1008), float32], Tensor[(6, 14, 3), float64], Tensor[(252), float64]) */;
    %830 = sinh(%810) /* ty=Tensor[(14, 144), float32] */;
    %831 = cast(%830, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
    %832 = reshape(%831, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
    %833 = @func_7350(%832) /* ty=(Tensor[(840), float64], Tensor[(16, 9, 14), uint64], Tensor[(2016), float32], Tensor[(15, 8, 7), float64]) */;
    %834 = @func_10966() /* ty=Tensor[(1, 9, 10), float64] */;
    %835 = %806.0;
    %836 = %807.0;
    %837 = %823.1;
    %838 = %826.2;
    %839 = %829.2;
    %840 = %833.3;
    (%834, %835, %var_12217, %836, %830, %837, meta[relay.Constant][44] /* ty=Tensor[(640), float64] */, meta[relay.Constant][45] /* ty=Tensor[(1215), float32] */, %var_12242, meta[relay.Constant][46] /* ty=Tensor[(525, 1), uint8] */, %var_12244, %838, %839, %840)
  };
  %841(%var_12261, %var_12262, %var_12263) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(5, 6, 14), uint16], Tensor[(420, 1), uint16], Tensor[(1, 9, 10), float32], Tensor[(14, 144), float32], Tensor[(9, 15, 9), float32], Tensor[(640), float64], Tensor[(1215), float32], Tensor[(126, 2), float64], Tensor[(525, 1), uint8], Tensor[(210, 3), uint32], Tensor[(252), float64], Tensor[(2, 1008), float32], Tensor[(15, 8, 7), float64]) */
}

def @func_13469() -> Tensor[(12, 6, 9), float32] {
  %844 = fn () -> Tensor[(12, 6, 9), float32] {
    %842 = @func_12102() /* ty=Tensor[(12, 6, 9), float32] */;
    %843 = cast(%842, dtype="float32") /* ty=Tensor[(12, 6, 9), float32] */;
    acosh(%843) /* ty=Tensor[(12, 6, 9), float32] */
  };
  %844() /* ty=Tensor[(12, 6, 9), float32] */
}

def @func_12024(%var_12022: Tensor[(12, 9, 10), float32]) -> (Tensor[(12, 9, 10), bool], Tensor[(12, 9, 10), float64]) {
  @func_12021(%var_12022) /* ty=(Tensor[(12, 9, 10), bool], Tensor[(12, 9, 10), float64]) */
}

def @func_14776(%var_14775: Tensor[(320, 1), float64]) -> (Tensor[(16, 9, 14), uint64], Tensor[(840), float64], Tensor[(2730), float32], Tensor[(16, 9, 14), uint64], Tensor[(320, 1), float64], Tensor[(16, 1, 15), float32], Tensor[(120, 2), float32]) {
  %862 = fn (%var_14764: Tensor[(320, 1), float64]) -> (Tensor[(16, 9, 14), uint64], Tensor[(840), float64], Tensor[(2730), float32], Tensor[(16, 9, 14), uint64], Tensor[(320, 1), float64], Tensor[(16, 1, 15), float32], Tensor[(120, 2), float32]) {
    %845 = @func_7155() /* ty=(Tensor[(15, 8, 7), bool], Tensor[(16, 9, 14), uint64], Tensor[(2016, 1), float32]) */;
    %846 = cast(meta[relay.Constant][47] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %847 = reshape(%846, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
    %848 = @func_9189(%847) /* ty=(Tensor[(840), float64], Tensor[(13, 14, 15), float32], Tensor[(2730), float32]) */;
    %849 = cast(%var_14764, dtype="float64") /* ty=Tensor[(320, 1), float64] */;
    %850 = cast(%var_14764, dtype="float64") /* ty=Tensor[(320, 1), float64] */;
    %851 = %845.1;
    %852 = cast(%851, dtype="float32") /* ty=Tensor[(16, 9, 14), float32] */;
    %853 = reshape(%849, newshape=[10, 8, 4]) /* ty=Tensor[(10, 8, 4), float64] */;
    %854 = reshape(%850, newshape=[10, 8, 4]) /* ty=Tensor[(10, 8, 4), float64] */;
    %855 = reshape(%852, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
    %856 = @func_14359(%853, %854, %855) /* ty=(Tensor[(10, 8, 4), float64], Tensor[(?, 9, 10), bool], Tensor[(16, 9, 14), uint64], Tensor[(2016), float32], Tensor[(1, 9, 10), float32]) */;
    %857 = cast(meta[relay.Constant][48] /* ty=Tensor[(120, 2), float32] */, dtype="float32") /* ty=Tensor[(120, 2), float32] */;
    %858 = reshape(%857, newshape=[16, 1, 15]) /* ty=Tensor[(16, 1, 15), float32] */;
    %859 = %848.0;
    %860 = %856.2;
    %861 = @func_5719(%858) /* ty=Tensor[(16, 1, 15), float32] */;
    (%851, %859, meta[relay.Constant][47] /* ty=Tensor[(2730), float32] */, %860, %var_14764, %861, meta[relay.Constant][48] /* ty=Tensor[(120, 2), float32] */)
  };
  %862(%var_14775) /* ty=(Tensor[(16, 9, 14), uint64], Tensor[(840), float64], Tensor[(2730), float32], Tensor[(16, 9, 14), uint64], Tensor[(320, 1), float64], Tensor[(16, 1, 15), float32], Tensor[(120, 2), float32]) */
}

def @func_2957(%var_2954: Tensor[(9, 15, 9), float32]) -> (Tensor[(9, 15, 9), float32],) {
  %863 = cast(%var_2954, dtype="float32") /* ty=Tensor[(9, 15, 9), float32] */;
  %864 = cosh(%863) /* ty=Tensor[(9, 15, 9), float32] */;
  (%864,)
}

def @func_10849(%var_10847: Tensor[(840), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(12, 6, 9), int8], Tensor[(648), float64], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(?, 9, 10), bool]) {
  @func_10846(%var_10847) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(12, 6, 9), int8], Tensor[(648), float64], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(?, 9, 10), bool]) */
}

def @func_7867(%var_7866: Tensor[(1152), int64]) -> (Tensor[(13, 14, 15), float32], Tensor[(2730, 1), float32], Tensor[(8, 12, 12), bool], Tensor[(1152), int64], Tensor[(15, 5, 7), bool], Tensor[(525), uint8], Tensor[(1, 9, 10), float32], Tensor[(10, 7, 9), uint32], Tensor[(630), uint32]) {
  %890 = fn (%var_7791: Tensor[(1152), int64]) -> (Tensor[(13, 14, 15), float32], Tensor[(2730, 1), float32], Tensor[(8, 12, 12), bool], Tensor[(1152), int64], Tensor[(15, 5, 7), bool], Tensor[(525), uint8], Tensor[(1, 9, 10), float32], Tensor[(10, 7, 9), uint32], Tensor[(630), uint32]) {
    %865 = cast(meta[relay.Constant][49] /* ty=Tensor[(2730, 1), float32] */, dtype="float32") /* ty=Tensor[(2730, 1), float32] */;
    %866 = reshape(%865, newshape=[13, 14, 15]) /* ty=Tensor[(13, 14, 15), float32] */;
    %867 = cast(%var_7791, dtype="int64") /* ty=Tensor[(1152), int64] */;
    %868 = cast(%var_7791, dtype="int64") /* ty=Tensor[(1152), int64] */;
    %869 = reshape(%867, newshape=[8, 12, 12]) /* ty=Tensor[(8, 12, 12), int64] */;
    %870 = reshape(%868, newshape=[8, 12, 12]) /* ty=Tensor[(8, 12, 12), int64] */;
    %871 = @func_3371(%869, %870) /* ty=(Tensor[(8, 12, 12), bool],) */;
    %872 = cast(meta[relay.Constant][50] /* ty=Tensor[(525), uint8] */, dtype="uint8") /* ty=Tensor[(525), uint8] */;
    %873 = cast(meta[relay.Constant][50] /* ty=Tensor[(525), uint8] */, dtype="uint8") /* ty=Tensor[(525), uint8] */;
    %874 = reshape(%872, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), uint8] */;
    %875 = reshape(%873, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), uint8] */;
    %876 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %877 = %876.0;
    %878 = cast(%877, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
    %879 = acosh(%878) /* ty=Tensor[(1, 9, 10), float32] */;
    %880 = cast(%879, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
    %881 = cast(meta[relay.Constant][51] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
    %882 = cast(meta[relay.Constant][51] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
    %883 = reshape(%881, newshape=[10, 7, 9]) /* ty=Tensor[(10, 7, 9), uint32] */;
    %884 = reshape(%882, newshape=[10, 7, 9]) /* ty=Tensor[(10, 7, 9), uint32] */;
    %885 = @func_6559(%866) /* ty=Tensor[(13, 14, 15), float32] */;
    %886 = %871.0;
    %887 = @func_2797(%874, %875) /* ty=Tensor[(15, 5, 7), bool] */;
    %888 = log10(%880) /* ty=Tensor[(1, 9, 10), float32] */;
    %889 = @func_1398(%883, %884) /* ty=Tensor[(10, 7, 9), uint32] */;
    (%885, meta[relay.Constant][49] /* ty=Tensor[(2730, 1), float32] */, %886, %var_7791, %887, meta[relay.Constant][50] /* ty=Tensor[(525), uint8] */, %888, %889, meta[relay.Constant][51] /* ty=Tensor[(630), uint32] */)
  };
  %890(%var_7866) /* ty=(Tensor[(13, 14, 15), float32], Tensor[(2730, 1), float32], Tensor[(8, 12, 12), bool], Tensor[(1152), int64], Tensor[(15, 5, 7), bool], Tensor[(525), uint8], Tensor[(1, 9, 10), float32], Tensor[(10, 7, 9), uint32], Tensor[(630), uint32]) */
}

def @func_6702() -> (Tensor[(1, 9, 10), float32],) {
  @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */
}

def @func_4914(%var_4913: Tensor[(12, 6, 9), float64]) -> Tensor[(12, 6, 9), float64] {
  %893 = fn (%var_4904: Tensor[(12, 6, 9), float64]) -> Tensor[(12, 6, 9), float64] {
    %891 = cast(meta[relay.Constant][52] /* ty=Tensor[(12, 1, 9), float64] */, dtype="float64") /* ty=Tensor[(12, 1, 9), float64] */;
    %892 = cast(%var_4904, dtype="float64") /* ty=Tensor[(12, 6, 9), float64] */;
    mod(%891, %892) /* ty=Tensor[(12, 6, 9), float64] */
  };
  %893(%var_4913) /* ty=Tensor[(12, 6, 9), float64] */
}

def @func_12580(%var_12578: Tensor[(182, 15), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(10, 9, 10), float32], Tensor[(182, 15), float32], Tensor[(910, 3), float64]) {
  @func_12577(%var_12578) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(10, 9, 10), float32], Tensor[(182, 15), float32], Tensor[(910, 3), float64]) */
}

def @func_14159() -> (Tensor[(1, 9, 10), float32], Tensor[(975), int64], Tensor[(648), float64], Tensor[(65, 15), int64], Tensor[(1, 9, 10), float32]) {
  %894 = cast(meta[relay.Constant][53] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %895 = cast(meta[relay.Constant][54] /* ty=Tensor[(65, 15), int64] */, dtype="int64") /* ty=Tensor[(65, 15), int64] */;
  %896 = reshape(%894, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %897 = reshape(%895, newshape=[975]) /* ty=Tensor[(975), int64] */;
  %898 = @func_13380(%896, %897) /* ty=(Tensor[(12, 6, 9), uint16], Tensor[(13, 15, 5), int64], Tensor[(975), int64]) */;
  %899 = @func_8967() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %900 = @func_6811() /* ty=Tensor[(1, 9, 10), float32] */;
  %901 = %898.2;
  %902 = %899.0;
  (%900, %901, meta[relay.Constant][53] /* ty=Tensor[(648), float64] */, meta[relay.Constant][54] /* ty=Tensor[(65, 15), int64] */, %902)
}

def @func_7587(%var_7584: Tensor[(512), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(9, 15, 9), float32], Tensor[(1215), float32], Tensor[(234), bool], Tensor[(512), float64]) {
  %903 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %904 = cast(meta[relay.Constant][55] /* ty=Tensor[(1215), float32] */, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %905 = reshape(%904, newshape=[9, 15, 9]) /* ty=Tensor[(9, 15, 9), float32] */;
  %906 = @func_2957(%905) /* ty=(Tensor[(9, 15, 9), float32],) */;
  %907 = cast(%var_7584, dtype="float64") /* ty=Tensor[(512), float64] */;
  %908 = reshape(%907, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), float64] */;
  %909 = @func_1141(%908) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(2, 420), float32], Tensor[(8, 8, 8), bool], Tensor[(15, 8, 7), float64], Tensor[(8, 8, 8), uint32]) */;
  %910 = %903.0;
  %911 = %906.0;
  %912 = %909.1;
  (%910, %911, meta[relay.Constant][55] /* ty=Tensor[(1215), float32] */, %912, %var_7584)
}

def @func_14632() -> Tensor[(10, 9, 10), float64] {
  %914 = fn () -> Tensor[(10, 9, 10), float64] {
    %913 = @func_12854() /* ty=(Tensor[(10, 9, 10), float64],) */;
    %913.0
  };
  %914() /* ty=Tensor[(10, 9, 10), float64] */
}

def @func_13050() -> (Tensor[(12, 6, 9), float64], Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(840), float32]) {
  @func_13048() /* ty=(Tensor[(12, 6, 9), float64], Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(840), float32]) */
}

def @func_10589(%var_10588: Tensor[(325, 3), int64]) -> (Tensor[(15, 8, 7), bool], Tensor[(512), float64], Tensor[(325, 3), bool], Tensor[(325, 3), float32], Tensor[(2, 16, 2), float32]) {
  %928 = fn (%var_10572: Tensor[(325, 3), int64]) -> (Tensor[(15, 8, 7), bool], Tensor[(512), float64], Tensor[(325, 3), bool], Tensor[(325, 3), float32], Tensor[(2, 16, 2), float32]) {
    %915 = cast(meta[relay.Constant][56] /* ty=Tensor[(325, 3), int64] */, dtype="int64") /* ty=Tensor[(325, 3), int64] */;
    %916 = reshape(%915, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), int64] */;
    %917 = @func_2646(%916) /* ty=(Tensor[(13, 15, 5), int64], Tensor[(512), float64], Tensor[(2, 420), float32]) */;
    %918 = cast(%var_10572, dtype="bool") /* ty=Tensor[(325, 3), bool] */;
    %919 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(325, 3), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %920 = cast(meta[relay.Constant][56] /* ty=Tensor[(325, 3), int64] */, dtype="bool") /* ty=Tensor[(325, 3), bool] */;
    %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %922 = cast(meta[relay.Constant][56] /* ty=Tensor[(325, 3), int64] */, dtype="float32") /* ty=Tensor[(325, 3), float32] */;
    %923 = @func_8531() /* ty=Tensor[(15, 8, 7), bool] */;
    %924 = %917.1;
    %925 = logical_or(%920, %921) /* ty=Tensor[(325, 3), bool] */;
    %926 = sin(%922) /* ty=Tensor[(325, 3), float32] */;
    %927 = @func_9784() /* ty=Tensor[(2, 16, 2), float32] */;
    (%923, %924, %925, %926, %927)
  };
  %928(%var_10588) /* ty=(Tensor[(15, 8, 7), bool], Tensor[(512), float64], Tensor[(325, 3), bool], Tensor[(325, 3), float32], Tensor[(2, 16, 2), float32]) */
}

def @func_11686() -> (Tensor[(1, 9, 10), float32],) {
  %931 = fn () -> (Tensor[(1, 9, 10), float32],) {
    %929 = @func_11592() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %930 = %929.0;
    (%930,)
  };
  %931() /* ty=(Tensor[(1, 9, 10), float32],) */
}

def @func_7590(%var_7588: Tensor[(512), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(9, 15, 9), float32], Tensor[(1215), float32], Tensor[(234), bool], Tensor[(512), float64]) {
  @func_7587(%var_7588) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(9, 15, 9), float32], Tensor[(1215), float32], Tensor[(234), bool], Tensor[(512), float64]) */
}

def @func_14378() -> (Tensor[(2, 420), float32],) {
  %932 = @func_9961() /* ty=(Tensor[(?, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(975), int64]) */;
  %933 = %932.2;
  (%933,)
}

def @func_14312(%var_14311: Tensor[(2, 15, 13), float32]) -> Tensor[(2, 15, 13), float32] {
  %935 = fn (%var_14307: Tensor[(2, 15, 13), float32]) -> Tensor[(2, 15, 13), float32] {
    %934 = cast(%var_14307, dtype="float32") /* ty=Tensor[(2, 15, 13), float32] */;
    exp(%934) /* ty=Tensor[(2, 15, 13), float32] */
  };
  %935(%var_14311) /* ty=Tensor[(2, 15, 13), float32] */
}

def @func_10221() -> Tensor[(15, 8, 7), float64] {
  %938 = fn () -> Tensor[(15, 8, 7), float64] {
    %936 = @func_8531() /* ty=Tensor[(15, 8, 7), bool] */;
    %937 = cast(%936, dtype="float64") /* ty=Tensor[(15, 8, 7), float64] */;
    rsqrt(%937) /* ty=Tensor[(15, 8, 7), float64] */
  };
  %938() /* ty=Tensor[(15, 8, 7), float64] */
}

def @func_1401(%var_1399: Tensor[(10, 7, 9), uint32], %var_1400: Tensor[(10, 7, 9), uint32]) -> Tensor[(10, 7, 9), uint32] {
  %943 = fn (%var_1387: Tensor[(10, 7, 9), uint32], %var_1388: Tensor[(10, 7, 9), uint32]) -> Tensor[(10, 7, 9), uint32] {
    %939 = cast(%var_1388, dtype="uint32") /* ty=Tensor[(10, 7, 9), uint32] */;
    %940 = shape_of(%var_1387, dtype="int32") /* ty=Tensor[(3), int32] */;
    %941 = cast(%var_1387, dtype="uint32") /* ty=Tensor[(10, 7, 9), uint32] */;
    %942 = dyn.reshape(%939, %940, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    right_shift(%941, %942) /* ty=Tensor[(10, 7, 9), uint32] */
  };
  %943(%var_1399, %var_1400) /* ty=Tensor[(10, 7, 9), uint32] */
}

def @func_4837(%var_4831: Tensor[(10, 16, 4), float64], %var_4832: Tensor[(1215), float32], %var_4833: Tensor[(252), float64], %var_4834: Tensor[(1, 525), uint8], %var_4835: Tensor[(630), uint32], %var_4836: Tensor[(10, 16, 4), float64]) -> (Tensor[(10, 16, 4), int64], Tensor[(9, 15, 9), float32], Tensor[(1215), float32], Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(840), float32], Tensor[(512), float64], Tensor[(256, 2), float64], Tensor[(5, 195), int64], Tensor[(252), float64], Tensor[(15, 5, 7), bool], Tensor[(1, 525), uint8], Tensor[(9, 15, 9), float32], Tensor[(10, 7, 9), uint32], Tensor[(630), uint32], Tensor[(5, 195), int64], Tensor[(10, 16, 4), bool]) {
  %1005 = fn (%var_4716: Tensor[(10, 16, 4), float64], %var_4746: Tensor[(1215), float32], %var_4775: Tensor[(252), float64], %var_4783: Tensor[(1, 525), uint8], %var_4795: Tensor[(630), uint32], %var_4822: Tensor[(10, 16, 4), float64]) -> (Tensor[(10, 16, 4), int64], Tensor[(9, 15, 9), float32], Tensor[(1215), float32], Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(840), float32], Tensor[(512), float64], Tensor[(256, 2), float64], Tensor[(5, 195), int64], Tensor[(252), float64], Tensor[(15, 5, 7), bool], Tensor[(1, 525), uint8], Tensor[(9, 15, 9), float32], Tensor[(10, 7, 9), uint32], Tensor[(630), uint32], Tensor[(5, 195), int64], Tensor[(10, 16, 4), bool]) {
    %944 = cast(%var_4716, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
    %945 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(10, 16, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %946 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 16, 4), float64] */, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
    %947 = dyn.reshape(%944, %945, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %948 = power(%946, %947) /* ty=Tensor[(10, 16, 4), float64] */;
    %949 = cast(%948, dtype="int64") /* ty=Tensor[(10, 16, 4), int64] */;
    %950 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(10, 16, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %951 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 16, 4), float64] */, dtype="int64") /* ty=Tensor[(10, 16, 4), int64] */;
    %952 = dyn.reshape(%949, %950, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %953 = cast(%var_4746, dtype="float32") /* ty=Tensor[(1215), float32] */;
    %954 = reshape(%953, newshape=[9, 15, 9]) /* ty=Tensor[(9, 15, 9), float32] */;
    %955 = @func_2957(%954) /* ty=(Tensor[(9, 15, 9), float32],) */;
    %956 = cast(meta[relay.Constant][58] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
    %957 = cast(meta[relay.Constant][58] /* ty=Tensor[(234), bool] */, dtype="bool") /* ty=Tensor[(234), bool] */;
    %958 = cast(meta[relay.Constant][59] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
    %959 = reshape(%956, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
    %960 = reshape(%957, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), bool] */;
    %961 = reshape(%958, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %962 = @func_1090(%959, %960, %961) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(9, 2, 13), bool], Tensor[(15, 8, 7), float64], Tensor[(15, 8, 7), float64]) */;
    %963 = cast(meta[relay.Constant][60] /* ty=Tensor[(256, 2), float64] */, dtype="float64") /* ty=Tensor[(256, 2), float64] */;
    %964 = reshape(%963, newshape=[512]) /* ty=Tensor[(512), float64] */;
    %965 = @func_1334(%964) /* ty=(Tensor[(5, 16, 13), float64], Tensor[(9, 2, 13), bool], Tensor[(512), float64]) */;
    %966 = cast(%var_4775, dtype="float64") /* ty=Tensor[(252), float64] */;
    %967 = cast(%var_4775, dtype="float64") /* ty=Tensor[(252), float64] */;
    %968 = reshape(%966, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float64] */;
    %969 = reshape(%967, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float64] */;
    %970 = @func_2710(%968, %969) /* ty=(Tensor[(6, 14, 3), float64], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) */;
    %971 = cast(%var_4783, dtype="uint8") /* ty=Tensor[(1, 525), uint8] */;
    %972 = cast(%var_4783, dtype="uint8") /* ty=Tensor[(1, 525), uint8] */;
    %973 = reshape(%971, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), uint8] */;
    %974 = reshape(%972, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), uint8] */;
    %975 = %955.0;
    %976 = cast(%975, dtype="float32") /* ty=Tensor[(9, 15, 9), float32] */;
    %977 = reshape(%976, newshape=[9, 15, 9]) /* ty=Tensor[(9, 15, 9), float32] */;
    %978 = @func_2957(%977) /* ty=(Tensor[(9, 15, 9), float32],) */;
    %979 = cast(%var_4795, dtype="uint32") /* ty=Tensor[(630), uint32] */;
    %980 = cast(%var_4795, dtype="uint32") /* ty=Tensor[(630), uint32] */;
    %981 = reshape(%979, newshape=[10, 7, 9]) /* ty=Tensor[(10, 7, 9), uint32] */;
    %982 = reshape(%980, newshape=[10, 7, 9]) /* ty=Tensor[(10, 7, 9), uint32] */;
    %983 = cast(%var_4775, dtype="float64") /* ty=Tensor[(252), float64] */;
    %984 = cast(%var_4775, dtype="float64") /* ty=Tensor[(252), float64] */;
    %985 = reshape(%983, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float64] */;
    %986 = reshape(%984, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), float64] */;
    %987 = @func_2710(%985, %986) /* ty=(Tensor[(6, 14, 3), float64], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) */;
    %988 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 16, 4), float64] */, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
    %989 = atan(%988) /* ty=Tensor[(10, 16, 4), float64] */;
    %990 = cast(%989, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
    %991 = sigmoid(%990) /* ty=Tensor[(10, 16, 4), float64] */;
    %992 = cast(%var_4822, dtype="bool") /* ty=Tensor[(10, 16, 4), bool] */;
    %993 = shape_of(%991, dtype="int32") /* ty=Tensor[(3), int32] */;
    %994 = cast(%991, dtype="bool") /* ty=Tensor[(10, 16, 4), bool] */;
    %995 = dyn.reshape(%992, %993, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %996 = multiply(%951, %952) /* ty=Tensor[(10, 16, 4), int64] */;
    %997 = %962.0;
    %998 = %965.2;
    %999 = %970.2;
    %1000 = @func_2797(%973, %974) /* ty=Tensor[(15, 5, 7), bool] */;
    %1001 = %978.0;
    %1002 = @func_1398(%981, %982) /* ty=Tensor[(10, 7, 9), uint32] */;
    %1003 = %987.2;
    %1004 = not_equal(%994, %995) /* ty=Tensor[(10, 16, 4), bool] */;
    (%996, %975, %var_4746, %997, meta[relay.Constant][58] /* ty=Tensor[(234), bool] */, meta[relay.Constant][59] /* ty=Tensor[(840), float32] */, %998, meta[relay.Constant][60] /* ty=Tensor[(256, 2), float64] */, %999, %var_4775, %1000, %var_4783, %1001, %1002, %var_4795, %1003, %1004)
  };
  %1005(%var_4831, %var_4832, %var_4833, %var_4834, %var_4835, %var_4836) /* ty=(Tensor[(10, 16, 4), int64], Tensor[(9, 15, 9), float32], Tensor[(1215), float32], Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(840), float32], Tensor[(512), float64], Tensor[(256, 2), float64], Tensor[(5, 195), int64], Tensor[(252), float64], Tensor[(15, 5, 7), bool], Tensor[(1, 525), uint8], Tensor[(9, 15, 9), float32], Tensor[(10, 7, 9), uint32], Tensor[(630), uint32], Tensor[(5, 195), int64], Tensor[(10, 16, 4), bool]) */
}

def @func_8113(%var_8111: Tensor[(6, 9, 10), float32], %var_8112: Tensor[(1, 9, 10), float32]) -> (Tensor[(6, 9, 10), bool], Tensor[(?, 9, 10), float64]) {
  %1016 = fn (%var_8077: Tensor[(6, 9, 10), float32], %var_8089: Tensor[(1, 9, 10), float32]) -> (Tensor[(6, 9, 10), bool], Tensor[(?, 9, 10), float64]) {
    %1006 = @func_7975() /* ty=Tensor[(1, 9, 10), float32] */;
    %1007 = cast(%1006, dtype="bool") /* ty=Tensor[(1, 9, 10), bool] */;
    %1008 = cast(%var_8077, dtype="bool") /* ty=Tensor[(6, 9, 10), bool] */;
    %1009 = @func_6811() /* ty=Tensor[(1, 9, 10), float32] */;
    %1010 = cast(%var_8089, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
    %1011 = shape_of(%1009, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1012 = cast(%1009, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
    %1013 = dyn.reshape(%1010, %1011, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1014 = logical_and(%1007, %1008) /* ty=Tensor[(6, 9, 10), bool] */;
    %1015 = mod(%1012, %1013) /* ty=Tensor[(?, 9, 10), float64] */;
    (%1014, %1015)
  };
  %1016(%var_8111, %var_8112) /* ty=(Tensor[(6, 9, 10), bool], Tensor[(?, 9, 10), float64]) */
}

def @func_9391() -> (Tensor[(1, 9, 10), float32],) {
  @func_9389() /* ty=(Tensor[(1, 9, 10), float32],) */
}

def @func_9108() -> (Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) {
  @func_9106() /* ty=(Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) */
}

def @func_7028(%var_7026: Tensor[(117, 2), bool], %var_7027: Tensor[(15, 8, 7), float64]) -> (Tensor[(117, 2), bool], Tensor[(840), float32], Tensor[(?, 9, 10), int32], Tensor[(15, 8, 7), bool], Tensor[(?, 9, 10), float64], Tensor[(?, 9, 10), uint8]) {
  @func_7024(%var_7026, %var_7027) /* ty=(Tensor[(117, 2), bool], Tensor[(840), float32], Tensor[(?, 9, 10), int32], Tensor[(15, 8, 7), bool], Tensor[(?, 9, 10), float64], Tensor[(?, 9, 10), uint8]) */
}

def @func_7733(%var_7729: Tensor[(512), float64]) -> (Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(512), float64]) {
  %1017 = cast(%var_7729, dtype="float64") /* ty=Tensor[(512), float64] */;
  %1018 = reshape(%1017, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), float64] */;
  %1019 = @func_1141(%1018) /* ty=(Tensor[(9, 2, 13), bool], Tensor[(234), bool], Tensor[(2, 420), float32], Tensor[(8, 8, 8), bool], Tensor[(15, 8, 7), float64], Tensor[(8, 8, 8), uint32]) */;
  %1020 = @func_7688() /* ty=Tensor[(1, 9, 10), float64] */;
  %1021 = %1019.2;
  (%1020, %1021, %var_7729)
}

def @func_9430(%var_9429: Tensor[(1152), int64]) -> (Tensor[(12, 6, 9), float64], Tensor[(8, 12, 12), bool], Tensor[(1152), int64]) {
  %1030 = fn (%var_9421: Tensor[(1152), int64]) -> (Tensor[(12, 6, 9), float64], Tensor[(8, 12, 12), bool], Tensor[(1152), int64]) {
    %1022 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
    %1023 = cast(%var_9421, dtype="int64") /* ty=Tensor[(1152), int64] */;
    %1024 = cast(%var_9421, dtype="int64") /* ty=Tensor[(1152), int64] */;
    %1025 = reshape(%1023, newshape=[8, 12, 12]) /* ty=Tensor[(8, 12, 12), int64] */;
    %1026 = reshape(%1024, newshape=[8, 12, 12]) /* ty=Tensor[(8, 12, 12), int64] */;
    %1027 = @func_3371(%1025, %1026) /* ty=(Tensor[(8, 12, 12), bool],) */;
    %1028 = %1022.1;
    %1029 = %1027.0;
    (%1028, %1029, %var_9421)
  };
  %1030(%var_9429) /* ty=(Tensor[(12, 6, 9), float64], Tensor[(8, 12, 12), bool], Tensor[(1152), int64]) */
}

def @func_13982() -> (Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32], Tensor[(840), float64]) {
  %1035 = fn () -> (Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32], Tensor[(840), float64]) {
    %1031 = @func_11581() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %1032 = @func_8464() /* ty=Tensor[(1, 9, 10), float32] */;
    %1033 = %1031.0;
    %1034 = @func_8646() /* ty=Tensor[(840), float64] */;
    (%1032, %1033, %1034)
  };
  %1035() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32], Tensor[(840), float64]) */
}

def @func_14050() -> (Tensor[(10, 9, 10), float64],) {
  @func_14048() /* ty=(Tensor[(10, 9, 10), float64],) */
}

def @func_11010() -> (Tensor[(1, 9, 10), float32],) {
  %1038 = fn () -> (Tensor[(1, 9, 10), float32],) {
    %1036 = @func_6700() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %1037 = %1036.0;
    (%1037,)
  };
  %1038() /* ty=(Tensor[(1, 9, 10), float32],) */
}

def @func_7551(%var_7539: Tensor[(576, 2), int64]) -> (Tensor[(12, 6, 9), bool], Tensor[(8, 12, 12), bool], Tensor[(576, 2), int64], Tensor[(12, 6, 9), float64], Tensor[(12, 6, 9), float32]) {
  %1039 = @func_7279() /* ty=(Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) */;
  %1040 = %1039.1;
  %1041 = cast(meta[relay.Constant][61] /* ty=Tensor[(12, 6, 9), float64] */, dtype="bool") /* ty=Tensor[(12, 6, 9), bool] */;
  %1042 = shape_of(%1040, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1043 = cast(%1040, dtype="bool") /* ty=Tensor[(12, 6, 9), bool] */;
  %1044 = dyn.reshape(%1041, %1042, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1045 = cast(%var_7539, dtype="int64") /* ty=Tensor[(576, 2), int64] */;
  %1046 = reshape(%1045, newshape=[1152]) /* ty=Tensor[(1152), int64] */;
  %1047 = @func_7234(%1046) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(8, 12, 12), bool], Tensor[(1152), int64], Tensor[(1, 9, 10), float32], Tensor[(13, 15, 5), int64], Tensor[(5, 195), int64]) */;
  %1048 = cast(%1040, dtype="float64") /* ty=Tensor[(12, 6, 9), float64] */;
  %1049 = sqrt(%1048) /* ty=Tensor[(12, 6, 9), float64] */;
  %1050 = cast(%1049, dtype="float64") /* ty=Tensor[(12, 6, 9), float64] */;
  %1051 = cast(%1049, dtype="float32") /* ty=Tensor[(12, 6, 9), float32] */;
  %1052 = greater(%1043, %1044) /* ty=Tensor[(12, 6, 9), bool] */;
  %1053 = %1047.1;
  %1054 = atan(%1050) /* ty=Tensor[(12, 6, 9), float64] */;
  %1055 = rsqrt(%1051) /* ty=Tensor[(12, 6, 9), float32] */;
  (%1052, %1053, %var_7539, %1054, %1055)
}

def @func_9785() -> Tensor[(2, 16, 2), float32] {
  %1057 = fn () -> Tensor[(2, 16, 2), float32] {
    %1056 = @func_9106() /* ty=(Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) */;
    %1056.0
  };
  %1057() /* ty=Tensor[(2, 16, 2), float32] */
}

def @func_12965() -> (Tensor[(15, 8, 7), bool],) {
  @func_12963() /* ty=(Tensor[(15, 8, 7), bool],) */
}

def @func_7353(%var_7351: Tensor[(2016), float32]) -> (Tensor[(840), float64], Tensor[(16, 9, 14), uint64], Tensor[(2016), float32], Tensor[(15, 8, 7), float64]) {
  @func_7350(%var_7351) /* ty=(Tensor[(840), float64], Tensor[(16, 9, 14), uint64], Tensor[(2016), float32], Tensor[(15, 8, 7), float64]) */
}

def @func_7279() -> (Tensor[(840), float64], Tensor[(12, 6, 9), float64], Tensor[(2016, 1), float32]) {
  %1058 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %1059 = cast(meta[relay.Constant][62] /* ty=Tensor[(3, 216), float64] */, dtype="float64") /* ty=Tensor[(3, 216), float64] */;
  %1060 = reshape(%1059, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %1061 = @func_4912(%1060) /* ty=Tensor[(12, 6, 9), float64] */;
  %1062 = cast(meta[relay.Constant][62] /* ty=Tensor[(3, 216), float64] */, dtype="float64") /* ty=Tensor[(3, 216), float64] */;
  %1063 = shape_of(%1061, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1064 = cast(%1061, dtype="float64") /* ty=Tensor[(12, 6, 9), float64] */;
  %1065 = dyn.reshape(%1062, %1063, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1066 = @func_7155() /* ty=(Tensor[(15, 8, 7), bool], Tensor[(16, 9, 14), uint64], Tensor[(2016, 1), float32]) */;
  %1067 = %1058.3;
  %1068 = floor_mod(%1064, %1065) /* ty=Tensor[(12, 6, 9), float64] */;
  %1069 = %1066.2;
  (%1067, %1068, %1069)
}

def @func_13878(%var_13876: Tensor[(420), uint16], %var_13877: Tensor[(1, 540), float32]) -> (Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float64], Tensor[(64, 8), float64], Tensor[(12, 6, 9), float32], Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32], Tensor[(420), uint16], Tensor[(252), float64], Tensor[(630), uint32], Tensor[(6, 9, 10), bool], Tensor[(1, 540), float32]) {
  @func_13874(%var_13876, %var_13877) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float64], Tensor[(64, 8), float64], Tensor[(12, 6, 9), float32], Tensor[(1, 9, 10), float32], Tensor[(1, 9, 10), float32], Tensor[(420), uint16], Tensor[(252), float64], Tensor[(630), uint32], Tensor[(6, 9, 10), bool], Tensor[(1, 540), float32]) */
}

def @func_12104() -> Tensor[(12, 6, 9), float32] {
  @func_12102() /* ty=Tensor[(12, 6, 9), float32] */
}

def @func_7690() -> Tensor[(1, 9, 10), float64] {
  @func_7688() /* ty=Tensor[(1, 9, 10), float64] */
}

def @func_11636(%var_11634: Tensor[(2730), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(2730), float32], Tensor[(2730), float32]) {
  @func_11633(%var_11634) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(2730), float32], Tensor[(2730), float32]) */
}

def @func_8332() -> (Tensor[(12, 6, 9), float64],) {
  @func_8330() /* ty=(Tensor[(12, 6, 9), float64],) */
}

def @func_8531() -> Tensor[(15, 8, 7), bool] {
  %1070 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %1070.1
}

def @func_8648() -> Tensor[(840), float64] {
  @func_8646() /* ty=Tensor[(840), float64] */
}

def @func_10846(%var_10838: Tensor[(840), float32]) -> (Tensor[(1, 9, 10), float32], Tensor[(12, 6, 9), int8], Tensor[(648), float64], Tensor[(15, 8, 7), float64], Tensor[(840), float32], Tensor[(?, 9, 10), bool]) {
  %1071 = cast(meta[relay.Constant][63] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %1072 = reshape(%1071, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %1073 = @func_8400(%1072) /* ty=(Tensor[(234), float32], Tensor[(3, 216), float64], Tensor[(12, 6, 9), int8]) */;
  %1074 = cast(%var_10838, dtype="float32") /* ty=Tensor[(840), float32] */;
  %1075 = reshape(%1074, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float32] */;
  %1076 = @func_917(%1075) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %1077 = @func_10473() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(?, 9, 10), bool], Tensor[(1, 9, 10), float64], Tensor[(2, 256), float64]) */;
  %1078 = @func_6811() /* ty=Tensor[(1, 9, 10), float32] */;
  %1079 = %1073.2;
  %1080 = %1076.0;
  %1081 = %1077.1;
  (%1078, %1079, meta[relay.Constant][63] /* ty=Tensor[(648), float64] */, %1080, %var_10838, %1081)
}

def @func_2800(%var_2798: Tensor[(15, 5, 7), uint8], %var_2799: Tensor[(15, 5, 7), uint8]) -> Tensor[(15, 5, 7), bool] {
  %1086 = fn (%var_2781: Tensor[(15, 5, 7), uint8], %var_2782: Tensor[(15, 5, 7), uint8]) -> Tensor[(15, 5, 7), bool] {
    %1082 = cast(%var_2782, dtype="bool") /* ty=Tensor[(15, 5, 7), bool] */;
    %1083 = shape_of(%var_2781, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1084 = cast(%var_2781, dtype="bool") /* ty=Tensor[(15, 5, 7), bool] */;
    %1085 = dyn.reshape(%1082, %1083, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%1084, %1085) /* ty=Tensor[(15, 5, 7), bool] */
  };
  %1086(%var_2798, %var_2799) /* ty=Tensor[(15, 5, 7), bool] */
}

def @func_9963() -> (Tensor[(?, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(975), int64]) {
  @func_9961() /* ty=(Tensor[(?, 9, 10), float32], Tensor[(1, 9, 10), float64], Tensor[(2, 420), float32], Tensor[(975), int64]) */
}

def @func_10674() -> (Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float32], Tensor[(10, 9, 10), float64], Tensor[(15, 8, 7), bool], Tensor[(1, 975), int64]) {
  %1096 = fn () -> (Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float32], Tensor[(10, 9, 10), float64], Tensor[(15, 8, 7), bool], Tensor[(1, 975), int64]) {
    %1087 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %1088 = cast(meta[relay.Constant][64] /* ty=Tensor[(1, 975), int64] */, dtype="int64") /* ty=Tensor[(1, 975), int64] */;
    %1089 = reshape(%1088, newshape=[325, 3]) /* ty=Tensor[(325, 3), int64] */;
    %1090 = @func_10587(%1089) /* ty=(Tensor[(15, 8, 7), bool], Tensor[(512), float64], Tensor[(325, 3), bool], Tensor[(325, 3), float32], Tensor[(2, 16, 2), float32]) */;
    %1091 = @func_8790() /* ty=Tensor[(1, 9, 10), float64] */;
    %1092 = @func_8790() /* ty=Tensor[(1, 9, 10), float64] */;
    %1093 = %1087.0;
    %1094 = @func_9266() /* ty=Tensor[(10, 9, 10), float64] */;
    %1095 = %1090.0;
    (%1091, %1092, %1093, %1094, %1095, meta[relay.Constant][64] /* ty=Tensor[(1, 975), int64] */)
  };
  %1096() /* ty=(Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float64], Tensor[(1, 9, 10), float32], Tensor[(10, 9, 10), float64], Tensor[(15, 8, 7), bool], Tensor[(1, 975), int64]) */
}

def @func_14900() -> Tensor[(1, 9, 10), float64] {
  %1097 = fn () -> Tensor[(1, 9, 10), float64] {
    @func_10966() /* ty=Tensor[(1, 9, 10), float64] */
  };
  %1097() /* ty=Tensor[(1, 9, 10), float64] */
}

def @func_12509() -> (Tensor[(1, 9, 10), float32],) {
  %1100 = fn () -> (Tensor[(1, 9, 10), float32],) {
    %1098 = @func_9106() /* ty=(Tensor[(2, 16, 2), float32], Tensor[(1, 9, 10), float32]) */;
    %1099 = %1098.1;
    (%1099,)
  };
  %1100() /* ty=(Tensor[(1, 9, 10), float32],) */
}

def @func_8466() -> Tensor[(1, 9, 10), float32] {
  @func_8464() /* ty=Tensor[(1, 9, 10), float32] */
}

def @func_14819(%var_14818: Tensor[(1152), int64]) -> (Tensor[(15, 8, 7), float64], Tensor[(1152), int64], Tensor[(1152), int64]) {
  %1106 = fn (%var_14810: Tensor[(1152), int64]) -> (Tensor[(15, 8, 7), float64], Tensor[(1152), int64], Tensor[(1152), int64]) {
    %1101 = cast(%var_14810, dtype="int64") /* ty=Tensor[(1152), int64] */;
    %1102 = reshape(%1101, newshape=[1152]) /* ty=Tensor[(1152), int64] */;
    %1103 = @func_9428(%1102) /* ty=(Tensor[(12, 6, 9), float64], Tensor[(8, 12, 12), bool], Tensor[(1152), int64]) */;
    %1104 = @func_10220() /* ty=Tensor[(15, 8, 7), float64] */;
    %1105 = %1103.2;
    (%1104, %1105, %var_14810)
  };
  %1106(%var_14818) /* ty=(Tensor[(15, 8, 7), float64], Tensor[(1152), int64], Tensor[(1152), int64]) */
}

def @func_12767() -> Tensor[(1, 9, 10), float64] {
  @func_12765() /* ty=Tensor[(1, 9, 10), float64] */
}

def @func_11981(%var_11980: Tensor[(252), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(252), float64]) {
  %1113 = fn (%var_11974: Tensor[(252), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(252), float64]) {
    %1107 = @func_6882() /* ty=(Tensor[(1, 9, 10), float32],) */;
    %1108 = cast(%var_11974, dtype="float64") /* ty=Tensor[(252), float64] */;
    %1109 = reshape(%1108, newshape=[252]) /* ty=Tensor[(252), float64] */;
    %1110 = @func_10105(%1109) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(2, 1008), float32], Tensor[(6, 14, 3), float64], Tensor[(252), float64]) */;
    %1111 = %1107.0;
    %1112 = %1110.1;
    (%1111, %1112, %var_11974)
  };
  %1113(%var_11980) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(252), float64]) */
}

def @func_12765() -> Tensor[(1, 9, 10), float64] {
  @func_8003() /* ty=Tensor[(1, 9, 10), float64] */
}

def @func_11561() -> (Tensor[(14, 15, 8), uint32],) {
  @func_11559() /* ty=(Tensor[(14, 15, 8), uint32],) */
}

def @func_12431() -> (Tensor[(1, 9, 10), float32],) {
  %1114 = @func_11395() /* ty=(Tensor[(1, 9, 10), float32],) */;
  %1115 = %1114.0;
  (%1115,)
}

def @func_8968() -> (Tensor[(1, 9, 10), float32],) {
  %1118 = fn () -> (Tensor[(1, 9, 10), float32],) {
    %1116 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
    %1117 = %1116.0;
    (%1117,)
  };
  %1118() /* ty=(Tensor[(1, 9, 10), float32],) */
}

def @func_13405(%var_13391: Tensor[(252), float64]) -> (Tensor[(1, 9, 10), float64], Tensor[(2016), float32], Tensor[(252), float64], Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(15, 8, 7), bool]) {
  %1119 = cast(%var_13391, dtype="float64") /* ty=Tensor[(252), float64] */;
  %1120 = reshape(%1119, newshape=[3, 84]) /* ty=Tensor[(3, 84), float64] */;
  %1121 = @func_10399(%1120) /* ty=(Tensor[(1, 9, 10), float64], Tensor[(2016), float32], Tensor[(1, 9, 10), float64], Tensor[(3, 84), uint64]) */;
  %1122 = cast(meta[relay.Constant][65] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %1123 = reshape(%1122, newshape=[16, 1, 15]) /* ty=Tensor[(16, 1, 15), float32] */;
  %1124 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
  %1125 = @func_8003() /* ty=Tensor[(1, 9, 10), float64] */;
  %1126 = %1121.1;
  %1127 = @func_5719(%1123) /* ty=Tensor[(16, 1, 15), float32] */;
  %1128 = %1124.1;
  (%1125, %1126, %var_13391, %1127, meta[relay.Constant][65] /* ty=Tensor[(240), float32] */, %1128)
}

def @func_11582() -> (Tensor[(1, 9, 10), float32],) {
  %1131 = fn () -> (Tensor[(1, 9, 10), float32],) {
    %1129 = @func_7073() /* ty=(Tensor[(1, 9, 10), float32], Tensor[(15, 8, 7), bool], Tensor[(234), bool], Tensor[(840), float64]) */;
    %1130 = %1129.0;
    (%1130,)
  };
  %1131() /* ty=(Tensor[(1, 9, 10), float32],) */
}

def @func_10108(%var_10106: Tensor[(252), float64]) -> (Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(2, 1008), float32], Tensor[(6, 14, 3), float64], Tensor[(252), float64]) {
  @func_10105(%var_10106) /* ty=(Tensor[(1, 9, 10), float32], Tensor[(2016), float32], Tensor[(2, 1008), float32], Tensor[(6, 14, 3), float64], Tensor[(252), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen817/build/output.py", line 3118, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:19:59] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

