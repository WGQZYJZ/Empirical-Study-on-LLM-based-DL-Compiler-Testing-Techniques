==========mod==========
#[version = "0.0.5"]
def @func_3976() -> Tensor[(11, 4, 10), int32] {
  %0 = @func_3821() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %0.0
}

def @func_7606() -> (Tensor[(11, 4, 10), uint16], Tensor[(11, 4, 10), float64]) {
  %1 = @func_6023() /* ty=(Tensor[(11, 4, 10), uint16],) */;
  %2 = @func_4392() /* ty=Tensor[(11, 4, 10), float32] */;
  %3 = cast(%2, dtype="float64") /* ty=Tensor[(11, 4, 10), float64] */;
  %4 = %1.0;
  %5 = rsqrt(%3) /* ty=Tensor[(11, 4, 10), float64] */;
  (%4, %5)
}

def @func_6244() -> (Tensor[(11, 3, 6), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 3, 2400), float32], Tensor[(2400), float32], Tensor[(16, 15, 10), float64]) {
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 3, 1), int32] */, dtype="int32") /* ty=Tensor[(11, 3, 1), int32] */;
  %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 3, 6), int32] */, dtype="int32") /* ty=Tensor[(11, 3, 6), int32] */;
  %8 = @func_3244() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %9 = cast(meta[relay.Constant][2] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 3, 1), int32] */, dtype="float32") /* ty=Tensor[(11, 3, 1), float32] */;
  %11 = cast(meta[relay.Constant][2] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %12 = cast(meta[relay.Constant][2] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %13 = reshape(%12, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), float32] */;
  %14 = @func_3101(%13) /* ty=(Tensor[(16, 15, 10), float32],) */;
  %15 = %14.0;
  %16 = cast(%15, dtype="float64") /* ty=Tensor[(16, 15, 10), float64] */;
  %17 = left_shift(%6, %7) /* ty=Tensor[(11, 3, 6), int32] */;
  %18 = %8.0;
  %19 = mod(%9, %10) /* ty=Tensor[(11, 3, 2400), float32] */;
  %20 = rsqrt(%11) /* ty=Tensor[(2400), float32] */;
  %21 = asinh(%16) /* ty=Tensor[(16, 15, 10), float64] */;
  (%17, %18, %19, %20, %21)
}

def @func_7399(%var_7395: Tensor[(77, 1), uint32]) -> (Tensor[(16, 3, 14), float64], Tensor[(7, 11, 7), uint32], Tensor[(77, 1), uint32], Tensor[(539), uint32]) {
  %22 = cast(%var_7395, dtype="uint32") /* ty=Tensor[(77, 1), uint32] */;
  %23 = cast(meta[relay.Constant][3] /* ty=Tensor[(539), uint32] */, dtype="uint32") /* ty=Tensor[(539), uint32] */;
  %24 = reshape(%22, newshape=[7, 11, 1]) /* ty=Tensor[(7, 11, 1), uint32] */;
  %25 = reshape(%23, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint32] */;
  %26 = @func_4113(%24, %25) /* ty=(Tensor[(7, 11, 7), uint32],) */;
  %27 = @func_6717() /* ty=Tensor[(16, 3, 14), float64] */;
  %28 = %26.0;
  (%27, %28, %var_7395, meta[relay.Constant][3] /* ty=Tensor[(539), uint32] */)
}

def @func_8191() -> Tensor[(11, 4, 10), int32] {
  %29 = @func_3244() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %29.0
}

def @func_3549(%var_3516: Tensor[(3, 13, 11), float32], %var_3517: Tensor[(3, 13, 11), float32], %var_3526: Tensor[(3, 13, 11), float32], %var_3547: Tensor[(468), bool]) -> (Tensor[(3, 13, 11), bool], Tensor[(11, 4, 10), bool], Tensor[(2400), float32], Tensor[(440), float32], Tensor[(16, 15, 10), float32], Tensor[(13, 12, 3), uint8], Tensor[(36), bool], Tensor[(468), bool]) {
  %30 = cast(%var_3517, dtype="float32") /* ty=Tensor[(3, 13, 11), float32] */;
  %31 = shape_of(%var_3516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%var_3516, dtype="float32") /* ty=Tensor[(3, 13, 11), float32] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %34 = power(%32, %33) /* ty=Tensor[(3, 13, 11), float32] */;
  %35 = cast(%var_3526, dtype="bool") /* ty=Tensor[(3, 13, 11), bool] */;
  %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%34, dtype="bool") /* ty=Tensor[(3, 13, 11), bool] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %39 = cast(meta[relay.Constant][4] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %40 = cast(meta[relay.Constant][5] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
  %41 = reshape(%39, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %42 = reshape(%40, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float32] */;
  %43 = @func_3486(%41, %42) /* ty=(Tensor[(16, 15, 10), float32], Tensor[(2400), float32], Tensor[(11, 4, 10), bool]) */;
  %44 = cast(meta[relay.Constant][4] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %45 = cast(meta[relay.Constant][5] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
  %46 = reshape(%44, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %47 = reshape(%45, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float32] */;
  %48 = @func_3486(%46, %47) /* ty=(Tensor[(16, 15, 10), float32], Tensor[(2400), float32], Tensor[(11, 4, 10), bool]) */;
  %49 = cast(meta[relay.Constant][6] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %50 = cast(%var_3547, dtype="bool") /* ty=Tensor[(468), bool] */;
  %51 = cast(%var_3547, dtype="float32") /* ty=Tensor[(468), float32] */;
  %52 = reshape(%49, newshape=[1, 12, 3]) /* ty=Tensor[(1, 12, 3), bool] */;
  %53 = reshape(%50, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), bool] */;
  %54 = reshape(%51, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), float32] */;
  %55 = @func_2728(%52, %53, %54) /* ty=(Tensor[(5, 1, 13), float32], Tensor[(65), float32], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(16, 16), float32], Tensor[(13, 12, 3), uint8], Tensor[(13, 12, 3), float64], Tensor[(7, 5, 2), float64], Tensor[(8), uint16]) */;
  %56 = greater(%37, %38) /* ty=Tensor[(3, 13, 11), bool] */;
  %57 = %43.2;
  %58 = %48.0;
  %59 = %55.5;
  (%56, %57, meta[relay.Constant][4] /* ty=Tensor[(2400), float32] */, meta[relay.Constant][5] /* ty=Tensor[(440), float32] */, %58, %59, meta[relay.Constant][6] /* ty=Tensor[(36), bool] */, %var_3547)
}

def @func_2511(%var_2490: Tensor[(16, 16), float32]) -> (Tensor[(16, 16), float32], Tensor[(4, 16, 4), bool]) {
  %60 = cast(%var_2490, dtype="float32") /* ty=Tensor[(16, 16), float32] */;
  %61 = log(%60) /* ty=Tensor[(16, 16), float32] */;
  %62 = cast(%61, dtype="float64") /* ty=Tensor[(16, 16), float64] */;
  %63 = reshape(%62, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float64] */;
  %64 = @func_720(%63) /* ty=Tensor[(4, 16, 4), int64] */;
  %65 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 16, 4), int64] */, dtype="bool") /* ty=Tensor[(4, 16, 4), bool] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%64, dtype="bool") /* ty=Tensor[(4, 16, 4), bool] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %69 = logical_and(%67, %68) /* ty=Tensor[(4, 16, 4), bool] */;
  (%61, %69)
}

def @func_3566() -> Tensor[(11, 4, 10), int32] {
  %70 = @func_3394() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32]) */;
  %70.1
}

def @func_7299() -> (Tensor[(11, 4, 10), float32], Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32]) {
  %71 = @func_4392() /* ty=Tensor[(11, 4, 10), float32] */;
  %72 = @func_6146() /* ty=Tensor[(16, 3, 14), float64] */;
  %73 = @func_3868() /* ty=Tensor[(11, 4, 10), int32] */;
  (%71, %72, %73)
}

def @func_6287(%var_6271: Tensor[(196), uint64], %var_6272: Tensor[(154), uint32]) -> (Tensor[(11, 4, 10), float64], Tensor[(4, 16, 4), int64], Tensor[(196), uint64], Tensor[(154), uint32]) {
  %74 = cast(%var_6271, dtype="uint64") /* ty=Tensor[(196), uint64] */;
  %75 = cast(%var_6271, dtype="uint64") /* ty=Tensor[(196), uint64] */;
  %76 = cast(%var_6272, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %77 = reshape(%74, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), uint64] */;
  %78 = reshape(%75, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), uint64] */;
  %79 = reshape(%76, newshape=[154]) /* ty=Tensor[(154), uint32] */;
  %80 = @func_2290(%77, %78, %79) /* ty=(Tensor[(4, 7, 7), uint64], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(1, 256), float64]) */;
  %81 = @func_4086() /* ty=Tensor[(11, 4, 10), float64] */;
  %82 = %80.4;
  (%81, %82, %var_6271, %var_6272)
}

def @func_3101(%var_3095: Tensor[(16, 15, 10), float32]) -> (Tensor[(16, 15, 10), float32],) {
  %83 = cast(%var_3095, dtype="float32") /* ty=Tensor[(16, 15, 10), float32] */;
  %84 = acosh(%83) /* ty=Tensor[(16, 15, 10), float32] */;
  (%84,)
}

def @func_8393(%var_8281: Tensor[(8), uint16], %var_8294: Tensor[(16, 3, 14), bool], %var_8335: Tensor[(495), int32], %var_8336: Tensor[(154, 1), uint32], %var_8364: Tensor[(819), float64]) -> (Tensor[(11, 4, 10), int32], uint32, Tensor[(8), uint16], Tensor[(256), float64], Tensor[(14, 4, 10), bool], Tensor[(560), uint8], Tensor[(672), float64], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), uint16], Tensor[(11, 4, 10), float32], Tensor[(11, 4, 10), int32], Tensor[(495), int32], Tensor[(16, 3, 14), uint16], Tensor[(13, 7, 9), float64], Tensor[(154, 819), bool]) {
  %85 = @func_4835() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(65), float32], Tensor[(91, 9), float64], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(11, 4, 10), float32]) */;
  %86 = cast(%var_8281, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %87 = cast(meta[relay.Constant][8] /* ty=Tensor[(256), float64] */, dtype="float64") /* ty=Tensor[(256), float64] */;
  %88 = cast(meta[relay.Constant][8] /* ty=Tensor[(256), float64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %89 = reshape(%86, newshape=[8]) /* ty=Tensor[(8), uint16] */;
  %90 = reshape(%87, newshape=[256]) /* ty=Tensor[(256), float64] */;
  %91 = reshape(%88, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), int64] */;
  %92 = @func_5298(%89, %90, %91) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(7, 5, 2), uint32], uint32, Tensor[(70), uint32], Tensor[(8), uint16], Tensor[(256), float64], Tensor[(4, 16, 4), float32], Tensor[(4, 16, 4), bool], Tensor[(4, 16, 4), int64]) */;
  %93 = cast(meta[relay.Constant][9] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %94 = cast(meta[relay.Constant][9] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %95 = reshape(%93, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), uint8] */;
  %96 = reshape(%94, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), uint8] */;
  %97 = cast(meta[relay.Constant][10] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %98 = @func_7815() /* ty=(Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(256), float64], Tensor[(36), bool], Tensor[(468), bool]) */;
  %99 = cast(%var_8335, dtype="int32") /* ty=Tensor[(495), int32] */;
  %100 = cast(%var_8336, dtype="uint32") /* ty=Tensor[(154, 1), uint32] */;
  %101 = reshape(%99, newshape=[495]) /* ty=Tensor[(495), int32] */;
  %102 = reshape(%100, newshape=[154]) /* ty=Tensor[(154), uint32] */;
  %103 = @func_4466(%101, %102) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16]) */;
  %104 = cast(meta[relay.Constant][10] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %105 = reshape(%104, newshape=[16, 3, 14]) /* ty=Tensor[(16, 3, 14), float64] */;
  %106 = @func_5458(%105) /* ty=Tensor[(16, 3, 14), bool] */;
  %107 = cast(%var_8294, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
  %108 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%106, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %111 = floor_mod(%109, %110) /* ty=Tensor[(16, 3, 14), float64] */;
  %112 = cast(meta[relay.Constant][10] /* ty=Tensor[(672), float64] */, dtype="uint16") /* ty=Tensor[(672), uint16] */;
  %113 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%111, dtype="uint16") /* ty=Tensor[(16, 3, 14), uint16] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %116 = cast(%var_8364, dtype="float64") /* ty=Tensor[(819), float64] */;
  %117 = reshape(%116, newshape=[13, 7, 9]) /* ty=Tensor[(13, 7, 9), float64] */;
  %118 = cast(%var_8336, dtype="float32") /* ty=Tensor[(154, 1), float32] */;
  %119 = sin(%118) /* ty=Tensor[(154, 1), float32] */;
  %120 = cast(%119, dtype="bool") /* ty=Tensor[(154, 1), bool] */;
  %121 = cast(%var_8364, dtype="bool") /* ty=Tensor[(819), bool] */;
  %122 = %85.0;
  %123 = %92.2;
  %124 = @func_5087(%95, %96) /* ty=Tensor[(14, 4, 10), bool] */;
  %125 = atan(%97) /* ty=Tensor[(672), float64] */;
  %126 = %98.2;
  %127 = @func_4313() /* ty=Tensor[(11, 4, 10), uint16] */;
  %128 = @func_4392() /* ty=Tensor[(11, 4, 10), float32] */;
  %129 = %103.0;
  %130 = subtract(%114, %115) /* ty=Tensor[(16, 3, 14), uint16] */;
  %131 = @func_1679(%117) /* ty=Tensor[(13, 7, 9), float64] */;
  %132 = greater(%120, %121) /* ty=Tensor[(154, 819), bool] */;
  (%122, %123, %var_8281, meta[relay.Constant][8] /* ty=Tensor[(256), float64] */, %124, meta[relay.Constant][9] /* ty=Tensor[(560), uint8] */, %125, %126, %127, %128, %129, %var_8335, %130, %131, %132)
}

def @func_3941(%var_3898: Tensor[(11, 4, 10), int32], %var_3930: Tensor[(1, 1248), float64], %var_3935: uint16) -> (Tensor[(11, 4, 10), bool], Tensor[(13, 12, 8), float64], Tensor[(1, 1248), float64], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8, 1), uint16]) {
  %133 = @func_3868() /* ty=Tensor[(11, 4, 10), int32] */;
  %134 = cast(%var_3898, dtype="bool") /* ty=Tensor[(11, 4, 10), bool] */;
  %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%133, dtype="bool") /* ty=Tensor[(11, 4, 10), bool] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %138 = cast(%var_3930, dtype="float64") /* ty=Tensor[(1, 1248), float64] */;
  %139 = reshape(%138, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), float64] */;
  %140 = @func_3803(%139) /* ty=(Tensor[(13, 12, 8), float64],) */;
  %141 = cast(%var_3935, dtype="uint16") /* ty=uint16 */;
  %142 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 1), uint16] */, dtype="uint16") /* ty=Tensor[(8, 1), uint16] */;
  %143 = reshape(%141, newshape=[]) /* ty=uint16 */;
  %144 = reshape(%142, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %145 = equal(%136, %137) /* ty=Tensor[(11, 4, 10), bool] */;
  %146 = %140.0;
  %147 = @func_211(%143, %144) /* ty=Tensor[(1, 2, 4), uint16] */;
  (%145, %146, %var_3930, %147, %var_3935, meta[relay.Constant][11] /* ty=Tensor[(8, 1), uint16] */)
}

def @func_125(%var_91: uint32, %var_92: Tensor[(7, 5, 2), uint32]) -> (Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64]) {
  %148 = cast(%var_91, dtype="uint32") /* ty=uint32 */;
  %149 = cast(%var_92, dtype="uint32") /* ty=Tensor[(7, 5, 2), uint32] */;
  %150 = cast(%var_92, dtype="float64") /* ty=Tensor[(7, 5, 2), float64] */;
  %151 = minimum(%148, %149) /* ty=Tensor[(7, 5, 2), uint32] */;
  %152 = sin(%150) /* ty=Tensor[(7, 5, 2), float64] */;
  (%151, %152)
}

def @func_1679(%var_1673: Tensor[(13, 7, 9), float64]) -> Tensor[(13, 7, 9), float64] {
  %153 = cast(%var_1673, dtype="float64") /* ty=Tensor[(13, 7, 9), float64] */;
  atan(%153) /* ty=Tensor[(13, 7, 9), float64] */
}

def @func_6023() -> (Tensor[(11, 4, 10), uint16],) {
  %154 = @func_4313() /* ty=Tensor[(11, 4, 10), uint16] */;
  (%154,)
}

def @func_5907(%var_5881: Tensor[(560, 1), uint8]) -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(14, 4, 10), bool], Tensor[(560, 1), uint8], Tensor[(65), float32], Tensor[(154), uint32], Tensor[(5, 1, 13), float32]) {
  %155 = @func_3244() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %156 = cast(%var_5881, dtype="uint8") /* ty=Tensor[(560, 1), uint8] */;
  %157 = cast(%var_5881, dtype="uint8") /* ty=Tensor[(560, 1), uint8] */;
  %158 = reshape(%156, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), uint8] */;
  %159 = reshape(%157, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), uint8] */;
  %160 = cast(meta[relay.Constant][12] /* ty=Tensor[(154), uint32] */, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %161 = reshape(%160, newshape=[154]) /* ty=Tensor[(154), uint32] */;
  %162 = @func_5236(%161) /* ty=(Tensor[(11, 4, 10), float64], Tensor[(7, 11, 2), bool], Tensor[(7, 28), uint64], Tensor[(154), uint32], Tensor[(5, 1, 13), float32], Tensor[(65), float32]) */;
  %163 = cast(meta[relay.Constant][12] /* ty=Tensor[(154), uint32] */, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %164 = reshape(%163, newshape=[154]) /* ty=Tensor[(154), uint32] */;
  %165 = @func_5236(%164) /* ty=(Tensor[(11, 4, 10), float64], Tensor[(7, 11, 2), bool], Tensor[(7, 28), uint64], Tensor[(154), uint32], Tensor[(5, 1, 13), float32], Tensor[(65), float32]) */;
  %166 = %155.0;
  %167 = @func_5382() /* ty=Tensor[(11, 4, 10), int32] */;
  %168 = @func_5087(%158, %159) /* ty=Tensor[(14, 4, 10), bool] */;
  %169 = %162.5;
  %170 = %165.4;
  (%166, %167, %168, %var_5881, %169, meta[relay.Constant][12] /* ty=Tensor[(154), uint32] */, %170)
}

def @func_3193(%var_3173: Tensor[(7, 117), float64], %var_3189: Tensor[(70), uint32]) -> (Tensor[(15, 14, 10), float32], Tensor[(13, 7, 9), float64], Tensor[(7, 117), float64], Tensor[(5, 1, 13), float32], Tensor[(65), float32], uint32, Tensor[(11, 14), uint32], Tensor[(70), uint32]) {
  %171 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 14, 10), float32] */, dtype="float32") /* ty=Tensor[(15, 14, 10), float32] */;
  %172 = cast(%var_3173, dtype="float64") /* ty=Tensor[(7, 117), float64] */;
  %173 = reshape(%172, newshape=[13, 7, 9]) /* ty=Tensor[(13, 7, 9), float64] */;
  %174 = cast(meta[relay.Constant][14] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %175 = reshape(%174, newshape=[5, 1, 13]) /* ty=Tensor[(5, 1, 13), float32] */;
  %176 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 14), uint32] */, dtype="uint32") /* ty=Tensor[(11, 14), uint32] */;
  %177 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 14), uint32] */, dtype="uint32") /* ty=Tensor[(11, 14), uint32] */;
  %178 = cast(%var_3189, dtype="uint32") /* ty=Tensor[(70), uint32] */;
  %179 = reshape(%176, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
  %180 = reshape(%177, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
  %181 = reshape(%178, newshape=[14, 5]) /* ty=Tensor[(14, 5), uint32] */;
  %182 = @func_490(%179, %180, %181) /* ty=(Tensor[(7, 11, 2), bool], Tensor[(7, 5, 2), float64], uint32, Tensor[(14, 5), uint32]) */;
  %183 = atanh(%171) /* ty=Tensor[(15, 14, 10), float32] */;
  %184 = @func_1679(%173) /* ty=Tensor[(13, 7, 9), float64] */;
  %185 = @func_398(%175) /* ty=Tensor[(5, 1, 13), float32] */;
  %186 = %182.2;
  (%183, %184, %var_3173, %185, meta[relay.Constant][14] /* ty=Tensor[(65), float32] */, %186, meta[relay.Constant][15] /* ty=Tensor[(11, 14), uint32] */, %var_3189)
}

def @func_5017(%var_4985: Tensor[(11, 4, 10), int32]) -> (Tensor[(11, 4, 10), bool], Tensor[(1248), float64], Tensor[(13, 12, 8), float64]) {
  %187 = @func_4168() /* ty=Tensor[(11, 4, 10), int32] */;
  %188 = cast(%var_4985, dtype="bool") /* ty=Tensor[(11, 4, 10), bool] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%187, dtype="bool") /* ty=Tensor[(11, 4, 10), bool] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %192 = cast(meta[relay.Constant][16] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %193 = reshape(%192, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), float64] */;
  %194 = @func_3803(%193) /* ty=(Tensor[(13, 12, 8), float64],) */;
  %195 = %194.0;
  %196 = cast(%195, dtype="float64") /* ty=Tensor[(13, 12, 8), float64] */;
  %197 = greater(%190, %191) /* ty=Tensor[(11, 4, 10), bool] */;
  %198 = asin(%196) /* ty=Tensor[(13, 12, 8), float64] */;
  (%197, meta[relay.Constant][16] /* ty=Tensor[(1248), float64] */, %198)
}

def @func_3430(%var_3419: Tensor[(256), float64]) -> (Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(256), float64]) {
  %199 = @func_3299() /* ty=(Tensor[(11, 4, 10), float32],) */;
  %200 = cast(meta[relay.Constant][17] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %201 = cast(%var_3419, dtype="float64") /* ty=Tensor[(256), float64] */;
  %202 = reshape(%200, newshape=[8]) /* ty=Tensor[(8), uint16] */;
  %203 = reshape(%201, newshape=[256]) /* ty=Tensor[(256), float64] */;
  %204 = @func_891(%202, %203) /* ty=(Tensor[(154, 1), uint32], Tensor[(70), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(1, 2, 4), uint16], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64], Tensor[(16, 13, 10), uint32], Tensor[(16, 13, 10), float64]) */;
  %205 = %199.0;
  %206 = %204.2;
  (%205, %206, meta[relay.Constant][17] /* ty=Tensor[(8), uint16] */, %var_3419)
}

def @main() -> Tensor[(5, 9, 11), float32] {
  %207 = @func_7029() /* ty=(Tensor[(5, 9, 11), int32],) */;
  %208 = %207.0;
  %209 = cast(%208, dtype="float32") /* ty=Tensor[(5, 9, 11), float32] */;
  asinh(%209) /* ty=Tensor[(5, 9, 11), float32] */
}

def @func_7815() -> (Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(256), float64], Tensor[(36), bool], Tensor[(468), bool]) {
  %210 = @func_6767() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %211 = @func_6767() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %212 = cast(meta[relay.Constant][18] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %213 = cast(meta[relay.Constant][19] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
  %214 = cast(meta[relay.Constant][19] /* ty=Tensor[(468), bool] */, dtype="float32") /* ty=Tensor[(468), float32] */;
  %215 = reshape(%212, newshape=[1, 12, 3]) /* ty=Tensor[(1, 12, 3), bool] */;
  %216 = reshape(%213, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), bool] */;
  %217 = reshape(%214, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), float32] */;
  %218 = @func_2728(%215, %216, %217) /* ty=(Tensor[(5, 1, 13), float32], Tensor[(65), float32], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(16, 16), float32], Tensor[(13, 12, 3), uint8], Tensor[(13, 12, 3), float64], Tensor[(7, 5, 2), float64], Tensor[(8), uint16]) */;
  %219 = @func_6717() /* ty=Tensor[(16, 3, 14), float64] */;
  %220 = %210.0;
  %221 = %211.0;
  %222 = %218.3;
  (%219, %220, %221, %222, meta[relay.Constant][18] /* ty=Tensor[(36), bool] */, meta[relay.Constant][19] /* ty=Tensor[(468), bool] */)
}

def @func_6717() -> Tensor[(16, 3, 14), float64] {
  %223 = @func_5585() /* ty=(Tensor[(16, 3, 14), float64],) */;
  %224 = %223.0;
  %225 = cast(%224, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
  exp(%225) /* ty=Tensor[(16, 3, 14), float64] */
}

def @func_4056(%var_4031: Tensor[(7, 117), float64], %var_4032: Tensor[(1, 70), uint32]) -> (Tensor[(11, 4, 10), float32], Tensor[(65), float32], Tensor[(7, 117), float64], Tensor[(1, 70), uint32], Tensor[(1, 8), uint16], Tensor[(1, 99), float64], Tensor[(2400), float32], uint16, Tensor[(16, 15, 10), float32], Tensor[(11, 4, 10), int32]) {
  %226 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
  %227 = cast(%226, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
  %228 = cast(%var_4031, dtype="float64") /* ty=Tensor[(7, 117), float64] */;
  %229 = cast(%var_4032, dtype="uint32") /* ty=Tensor[(1, 70), uint32] */;
  %230 = reshape(%228, newshape=[7, 117]) /* ty=Tensor[(7, 117), float64] */;
  %231 = reshape(%229, newshape=[70]) /* ty=Tensor[(70), uint32] */;
  %232 = @func_3193(%230, %231) /* ty=(Tensor[(15, 14, 10), float32], Tensor[(13, 7, 9), float64], Tensor[(7, 117), float64], Tensor[(5, 1, 13), float32], Tensor[(65), float32], uint32, Tensor[(11, 14), uint32], Tensor[(70), uint32]) */;
  %233 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 99), float64] */, dtype="float64") /* ty=Tensor[(1, 99), float64] */;
  %234 = cast(meta[relay.Constant][21] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %235 = cast(meta[relay.Constant][22] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %236 = reshape(%233, newshape=[11, 1, 9]) /* ty=Tensor[(11, 1, 9), float64] */;
  %237 = reshape(%234, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %238 = reshape(%235, newshape=[]) /* ty=uint16 */;
  %239 = @func_3681(%236, %237, %238) /* ty=(Tensor[(2400), float32], Tensor[(2400), float32], Tensor[(1, 440), float32], Tensor[(1, 2, 4), uint16], Tensor[(1, 8), uint16], Tensor[(11, 1, 9), uint32]) */;
  %240 = cast(meta[relay.Constant][21] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %241 = reshape(%240, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), float32] */;
  %242 = @func_3101(%241) /* ty=(Tensor[(16, 15, 10), float32],) */;
  %243 = atanh(%227) /* ty=Tensor[(11, 4, 10), float32] */;
  %244 = %232.4;
  %245 = %239.4;
  %246 = %242.0;
  %247 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
  (%243, %244, %var_4031, %var_4032, %245, meta[relay.Constant][20] /* ty=Tensor[(1, 99), float64] */, meta[relay.Constant][21] /* ty=Tensor[(2400), float32] */, meta[relay.Constant][22] /* ty=uint16 */, %246, %247)
}

def @func_3803(%var_3790: Tensor[(13, 12, 8), float64]) -> (Tensor[(13, 12, 8), float64],) {
  %248 = cast(%var_3790, dtype="float64") /* ty=Tensor[(13, 12, 8), float64] */;
  %249 = sigmoid(%248) /* ty=Tensor[(13, 12, 8), float64] */;
  (%249,)
}

def @func_9013() -> Tensor[(11, 4, 10), float64] {
  @func_4086() /* ty=Tensor[(11, 4, 10), float64] */
}

def @func_3868() -> Tensor[(11, 4, 10), int32] {
  %250 = @func_3566() /* ty=Tensor[(11, 4, 10), int32] */;
  %251 = cast(%250, dtype="float64") /* ty=Tensor[(11, 4, 10), float64] */;
  %252 = asinh(%251) /* ty=Tensor[(11, 4, 10), float64] */;
  %253 = cast(%250, dtype="int32") /* ty=Tensor[(11, 4, 10), int32] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%252, dtype="int32") /* ty=Tensor[(11, 4, 10), int32] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  right_shift(%255, %256) /* ty=Tensor[(11, 4, 10), int32] */
}

def @func_8155(%var_8153: Tensor[(1, 65), float32]) -> (Tensor[(11, 4, 10), int32], Tensor[(5, 1, 13), float32], Tensor[(1, 65), float32]) {
  %257 = cast(%var_8153, dtype="float32") /* ty=Tensor[(1, 65), float32] */;
  %258 = reshape(%257, newshape=[5, 1, 13]) /* ty=Tensor[(5, 1, 13), float32] */;
  %259 = @func_3566() /* ty=Tensor[(11, 4, 10), int32] */;
  %260 = @func_398(%258) /* ty=Tensor[(5, 1, 13), float32] */;
  (%259, %260, %var_8153)
}

def @func_5189(%var_5146: Tensor[(2, 1200), float32]) -> (Tensor[(11, 4, 10), int32], Tensor[(16, 15, 10), float32], Tensor[(2, 1200), float64]) {
  %261 = cast(%var_5146, dtype="float32") /* ty=Tensor[(2, 1200), float32] */;
  %262 = reshape(%261, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), float32] */;
  %263 = @func_3101(%262) /* ty=(Tensor[(16, 15, 10), float32],) */;
  %264 = cast(%var_5146, dtype="float64") /* ty=Tensor[(2, 1200), float64] */;
  %265 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
  %266 = %263.0;
  %267 = sinh(%264) /* ty=Tensor[(2, 1200), float64] */;
  (%265, %266, %267)
}

def @func_7460(%var_7426: Tensor[(16, 3, 14), float64]) -> (Tensor[(16, 3, 14), bool], Tensor[(5, 1, 13), float32], Tensor[(154), uint32], Tensor[(16, 3, 14), float64]) {
  %268 = @func_5585() /* ty=(Tensor[(16, 3, 14), float64],) */;
  %269 = %268.0;
  %270 = cast(%var_7426, dtype="bool") /* ty=Tensor[(16, 3, 14), bool] */;
  %271 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%269, dtype="bool") /* ty=Tensor[(16, 3, 14), bool] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %274 = cast(meta[relay.Constant][23] /* ty=Tensor[(154), uint32] */, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %275 = reshape(%274, newshape=[154]) /* ty=Tensor[(154), uint32] */;
  %276 = @func_5236(%275) /* ty=(Tensor[(11, 4, 10), float64], Tensor[(7, 11, 2), bool], Tensor[(7, 28), uint64], Tensor[(154), uint32], Tensor[(5, 1, 13), float32], Tensor[(65), float32]) */;
  %277 = @func_7299() /* ty=(Tensor[(11, 4, 10), float32], Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32]) */;
  %278 = greater(%272, %273) /* ty=Tensor[(16, 3, 14), bool] */;
  %279 = %276.4;
  %280 = %277.1;
  (%278, %279, meta[relay.Constant][23] /* ty=Tensor[(154), uint32] */, %280)
}

def @func_8711() -> Tensor[(16, 3, 14), float64] {
  %281 = @func_6717() /* ty=Tensor[(16, 3, 14), float64] */;
  %282 = cast(%281, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
  log2(%282) /* ty=Tensor[(16, 3, 14), float64] */
}

def @func_490(%var_438: Tensor[(7, 11, 2), uint32], %var_439: Tensor[(7, 11, 2), uint32], %var_453: Tensor[(14, 5), uint32]) -> (Tensor[(7, 11, 2), bool], Tensor[(7, 5, 2), float64], uint32, Tensor[(14, 5), uint32]) {
  %283 = cast(%var_439, dtype="bool") /* ty=Tensor[(7, 11, 2), bool] */;
  %284 = shape_of(%var_438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%var_438, dtype="bool") /* ty=Tensor[(7, 11, 2), bool] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %287 = cast(meta[relay.Constant][24] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %288 = cast(%var_453, dtype="uint32") /* ty=Tensor[(14, 5), uint32] */;
  %289 = reshape(%287, newshape=[]) /* ty=uint32 */;
  %290 = reshape(%288, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
  %291 = @func_125(%289, %290) /* ty=(Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64]) */;
  %292 = greater(%285, %286) /* ty=Tensor[(7, 11, 2), bool] */;
  %293 = %291.1;
  (%292, %293, meta[relay.Constant][24] /* ty=uint32 */, %var_453)
}

def @func_6044() -> (Tensor[(8), uint16],) {
  %294 = @func_5709() /* ty=(Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16], Tensor[(11, 4, 10), int32]) */;
  %295 = %294.3;
  (%295,)
}

def @func_3621() -> (Tensor[(11, 4, 10), int32],) {
  %296 = @func_3566() /* ty=Tensor[(11, 4, 10), int32] */;
  (%296,)
}

def @func_6391(%var_6375: Tensor[(154), uint32], %var_6376: Tensor[(70), uint32]) -> (Tensor[(16, 3, 14), float64], uint16, uint32, Tensor[(154), uint32], Tensor[(70), uint32], Tensor[(11, 4, 10), uint16]) {
  %297 = @func_5709() /* ty=(Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16], Tensor[(11, 4, 10), int32]) */;
  %298 = cast(%var_6375, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %299 = cast(%var_6375, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %300 = cast(%var_6376, dtype="uint32") /* ty=Tensor[(70), uint32] */;
  %301 = reshape(%298, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
  %302 = reshape(%299, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
  %303 = reshape(%300, newshape=[14, 5]) /* ty=Tensor[(14, 5), uint32] */;
  %304 = @func_490(%301, %302, %303) /* ty=(Tensor[(7, 11, 2), bool], Tensor[(7, 5, 2), float64], uint32, Tensor[(14, 5), uint32]) */;
  %305 = @func_5243() /* ty=Tensor[(16, 3, 14), float64] */;
  %306 = %297.2;
  %307 = %304.2;
  %308 = @func_4313() /* ty=Tensor[(11, 4, 10), uint16] */;
  (%305, %306, %307, %var_6375, %var_6376, %308)
}

def @func_5709() -> (Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16], Tensor[(11, 4, 10), int32]) {
  %309 = @func_3299() /* ty=(Tensor[(11, 4, 10), float32],) */;
  %310 = cast(meta[relay.Constant][25] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %311 = cast(meta[relay.Constant][26] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %312 = reshape(%310, newshape=[]) /* ty=uint16 */;
  %313 = reshape(%311, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %314 = %309.0;
  %315 = @func_211(%312, %313) /* ty=Tensor[(1, 2, 4), uint16] */;
  %316 = @func_5434() /* ty=Tensor[(11, 4, 10), int32] */;
  (%314, %315, meta[relay.Constant][25] /* ty=uint16 */, meta[relay.Constant][26] /* ty=Tensor[(8), uint16] */, %316)
}

def @func_4113(%var_4093: Tensor[(7, 11, 1), uint32], %var_4094: Tensor[(7, 11, 7), uint32]) -> (Tensor[(7, 11, 7), uint32],) {
  %317 = cast(%var_4093, dtype="uint32") /* ty=Tensor[(7, 11, 1), uint32] */;
  %318 = cast(%var_4094, dtype="uint32") /* ty=Tensor[(7, 11, 7), uint32] */;
  %319 = minimum(%317, %318) /* ty=Tensor[(7, 11, 7), uint32] */;
  (%319,)
}

def @func_2290(%var_2238: Tensor[(4, 7, 7), uint64], %var_2239: Tensor[(4, 7, 7), uint64], %var_2250: Tensor[(154), uint32]) -> (Tensor[(4, 7, 7), uint64], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(1, 256), float64]) {
  %320 = cast(%var_2239, dtype="uint64") /* ty=Tensor[(4, 7, 7), uint64] */;
  %321 = shape_of(%var_2238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%var_2238, dtype="uint64") /* ty=Tensor[(4, 7, 7), uint64] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %324 = cast(%var_2250, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %325 = cast(%var_2250, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %326 = cast(meta[relay.Constant][27] /* ty=Tensor[(70), uint32] */, dtype="uint32") /* ty=Tensor[(70), uint32] */;
  %327 = reshape(%324, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
  %328 = reshape(%325, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
  %329 = reshape(%326, newshape=[14, 5]) /* ty=Tensor[(14, 5), uint32] */;
  %330 = @func_490(%327, %328, %329) /* ty=(Tensor[(7, 11, 2), bool], Tensor[(7, 5, 2), float64], uint32, Tensor[(14, 5), uint32]) */;
  %331 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 256), float64] */, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %332 = reshape(%331, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float64] */;
  %333 = bitwise_and(%322, %323) /* ty=Tensor[(4, 7, 7), uint64] */;
  %334 = %330.0;
  %335 = @func_720(%332) /* ty=Tensor[(4, 16, 4), int64] */;
  (%333, %334, %var_2250, meta[relay.Constant][27] /* ty=Tensor[(70), uint32] */, %335, meta[relay.Constant][28] /* ty=Tensor[(1, 256), float64] */)
}

def @func_4153(%var_4124: Tensor[(11, 7, 5), float32], %var_4130: Tensor[(70), uint32]) -> (Tensor[(11, 7, 5), float32], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32]) {
  %336 = cast(%var_4124, dtype="float32") /* ty=Tensor[(11, 7, 5), float32] */;
  %337 = cast(meta[relay.Constant][29] /* ty=Tensor[(154), uint32] */, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %338 = cast(meta[relay.Constant][29] /* ty=Tensor[(154), uint32] */, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %339 = cast(%var_4130, dtype="uint32") /* ty=Tensor[(70), uint32] */;
  %340 = reshape(%337, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
  %341 = reshape(%338, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
  %342 = reshape(%339, newshape=[14, 5]) /* ty=Tensor[(14, 5), uint32] */;
  %343 = @func_490(%340, %341, %342) /* ty=(Tensor[(7, 11, 2), bool], Tensor[(7, 5, 2), float64], uint32, Tensor[(14, 5), uint32]) */;
  %344 = cos(%336) /* ty=Tensor[(11, 7, 5), float32] */;
  %345 = %343.0;
  (%344, %345, meta[relay.Constant][29] /* ty=Tensor[(154), uint32] */, %var_4130)
}

def @func_4835() -> (Tensor[(11, 4, 10), int32], Tensor[(65), float32], Tensor[(91, 9), float64], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(11, 4, 10), float32]) {
  %346 = @func_3244() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %347 = cast(meta[relay.Constant][30] /* ty=Tensor[(91, 9), float64] */, dtype="float64") /* ty=Tensor[(91, 9), float64] */;
  %348 = cast(meta[relay.Constant][31] /* ty=Tensor[(70), uint32] */, dtype="uint32") /* ty=Tensor[(70), uint32] */;
  %349 = reshape(%347, newshape=[7, 117]) /* ty=Tensor[(7, 117), float64] */;
  %350 = reshape(%348, newshape=[1, 70]) /* ty=Tensor[(1, 70), uint32] */;
  %351 = @func_4056(%349, %350) /* ty=(Tensor[(11, 4, 10), float32], Tensor[(65), float32], Tensor[(7, 117), float64], Tensor[(1, 70), uint32], Tensor[(1, 8), uint16], Tensor[(1, 99), float64], Tensor[(2400), float32], uint16, Tensor[(16, 15, 10), float32], Tensor[(11, 4, 10), int32]) */;
  %352 = cast(meta[relay.Constant][32] /* ty=Tensor[(495), int32] */, dtype="int32") /* ty=Tensor[(495), int32] */;
  %353 = cast(meta[relay.Constant][33] /* ty=Tensor[(154), uint32] */, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %354 = reshape(%352, newshape=[495]) /* ty=Tensor[(495), int32] */;
  %355 = reshape(%353, newshape=[154]) /* ty=Tensor[(154), uint32] */;
  %356 = @func_4466(%354, %355) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16]) */;
  %357 = %346.0;
  %358 = cast(%357, dtype="float64") /* ty=Tensor[(11, 4, 10), float64] */;
  %359 = reshape(%358, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float64] */;
  %360 = %351.1;
  %361 = %356.3;
  %362 = @func_4205(%359) /* ty=Tensor[(11, 4, 10), float32] */;
  (%357, %360, meta[relay.Constant][30] /* ty=Tensor[(91, 9), float64] */, meta[relay.Constant][31] /* ty=Tensor[(70), uint32] */, %361, meta[relay.Constant][32] /* ty=Tensor[(495), int32] */, meta[relay.Constant][33] /* ty=Tensor[(154), uint32] */, %362)
}

def @func_5243() -> Tensor[(16, 3, 14), float64] {
  %363 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 3, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
  atanh(%363) /* ty=Tensor[(16, 3, 14), float64] */
}

def @func_6493(%var_6482: Tensor[(2400), float32]) -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(2400), float32], Tensor[(11, 4, 10), float64]) {
  %364 = @func_5858() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), float64]) */;
  %365 = cast(%var_6482, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %366 = reshape(%365, newshape=[2, 1200]) /* ty=Tensor[(2, 1200), float32] */;
  %367 = @func_5189(%366) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(16, 15, 10), float32], Tensor[(2, 1200), float64]) */;
  %368 = %364.0;
  %369 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
  %370 = %367.0;
  %371 = @func_4086() /* ty=Tensor[(11, 4, 10), float64] */;
  (%368, %369, %370, %var_6482, %371)
}

def @func_7071(%var_7058: uint16) -> (Tensor[(11, 4, 10), int32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) {
  %372 = @func_4250() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %373 = cast(%var_7058, dtype="uint16") /* ty=uint16 */;
  %374 = cast(meta[relay.Constant][35] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %375 = reshape(%373, newshape=[]) /* ty=uint16 */;
  %376 = reshape(%374, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %377 = %372.0;
  %378 = @func_211(%375, %376) /* ty=Tensor[(1, 2, 4), uint16] */;
  (%377, %378, %var_7058, meta[relay.Constant][35] /* ty=Tensor[(8), uint16] */)
}

def @func_4328(%var_4322: Tensor[(1, 13, 12), float64]) -> Tensor[(1, 13, 12), float64] {
  %379 = cast(%var_4322, dtype="float64") /* ty=Tensor[(1, 13, 12), float64] */;
  sin(%379) /* ty=Tensor[(1, 13, 12), float64] */
}

def @func_5254() -> (Tensor[(16, 3, 14), float64],) {
  %380 = @func_5243() /* ty=Tensor[(16, 3, 14), float64] */;
  (%380,)
}

def @func_3821() -> (Tensor[(11, 4, 10), int32],) {
  %381 = @func_3566() /* ty=Tensor[(11, 4, 10), int32] */;
  (%381,)
}

def @func_3649(%var_3645: Tensor[(429), float32], %var_3646: Tensor[(468), bool]) -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(2400), float32], Tensor[(429), float32], Tensor[(468), bool]) {
  %382 = @func_3621() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %383 = cast(%var_3645, dtype="float32") /* ty=Tensor[(429), float32] */;
  %384 = cast(%var_3645, dtype="float32") /* ty=Tensor[(429), float32] */;
  %385 = cast(%var_3645, dtype="float32") /* ty=Tensor[(429), float32] */;
  %386 = cast(%var_3646, dtype="bool") /* ty=Tensor[(468), bool] */;
  %387 = reshape(%383, newshape=[3, 13, 11]) /* ty=Tensor[(3, 13, 11), float32] */;
  %388 = reshape(%384, newshape=[3, 13, 11]) /* ty=Tensor[(3, 13, 11), float32] */;
  %389 = reshape(%385, newshape=[3, 13, 11]) /* ty=Tensor[(3, 13, 11), float32] */;
  %390 = reshape(%386, newshape=[468]) /* ty=Tensor[(468), bool] */;
  %391 = @func_3549(%387, %388, %389, %390) /* ty=(Tensor[(3, 13, 11), bool], Tensor[(11, 4, 10), bool], Tensor[(2400), float32], Tensor[(440), float32], Tensor[(16, 15, 10), float32], Tensor[(13, 12, 3), uint8], Tensor[(36), bool], Tensor[(468), bool]) */;
  %392 = @func_3566() /* ty=Tensor[(11, 4, 10), int32] */;
  %393 = %382.0;
  %394 = %391.2;
  (%392, %393, %394, %var_3645, %var_3646)
}

def @func_8979(%var_8888: Tensor[(2, 504), float64]) -> (Tensor[(11, 4, 10), int32], Tensor[(1, 65), float32], Tensor[(65), float32], Tensor[(8, 1), uint16], Tensor[(1248), float64], uint16, Tensor[(455, 504), bool], Tensor[(1, 1248), float64], Tensor[(2, 504), bool], Tensor[(2, 504), float64], Tensor[(455, 504), float64]) {
  %395 = cast(meta[relay.Constant][36] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %396 = reshape(%395, newshape=[1, 65]) /* ty=Tensor[(1, 65), float32] */;
  %397 = @func_8155(%396) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(5, 1, 13), float32], Tensor[(1, 65), float32]) */;
  %398 = @func_3566() /* ty=Tensor[(11, 4, 10), int32] */;
  %399 = cast(%398, dtype="int32") /* ty=Tensor[(11, 4, 10), int32] */;
  %400 = cast(meta[relay.Constant][37] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %401 = cast(meta[relay.Constant][38] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %402 = reshape(%399, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), int32] */;
  %403 = reshape(%400, newshape=[1, 1248]) /* ty=Tensor[(1, 1248), float64] */;
  %404 = reshape(%401, newshape=[]) /* ty=uint16 */;
  %405 = @func_3941(%402, %403, %404) /* ty=(Tensor[(11, 4, 10), bool], Tensor[(13, 12, 8), float64], Tensor[(1, 1248), float64], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8, 1), uint16]) */;
  %406 = cast(meta[relay.Constant][39] /* ty=Tensor[(455, 1), float64] */, dtype="bool") /* ty=Tensor[(455, 1), bool] */;
  %407 = cast(meta[relay.Constant][40] /* ty=Tensor[(504), float64] */, dtype="bool") /* ty=Tensor[(504), bool] */;
  %408 = cast(%398, dtype="int32") /* ty=Tensor[(11, 4, 10), int32] */;
  %409 = cast(meta[relay.Constant][37] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %410 = cast(meta[relay.Constant][38] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %411 = reshape(%408, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), int32] */;
  %412 = reshape(%409, newshape=[1, 1248]) /* ty=Tensor[(1, 1248), float64] */;
  %413 = reshape(%410, newshape=[]) /* ty=uint16 */;
  %414 = @func_3941(%411, %412, %413) /* ty=(Tensor[(11, 4, 10), bool], Tensor[(13, 12, 8), float64], Tensor[(1, 1248), float64], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8, 1), uint16]) */;
  %415 = cast(meta[relay.Constant][39] /* ty=Tensor[(455, 1), float64] */, dtype="float64") /* ty=Tensor[(455, 1), float64] */;
  %416 = cast(%var_8888, dtype="float64") /* ty=Tensor[(2, 504), float64] */;
  %417 = cast(meta[relay.Constant][40] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %418 = reshape(%415, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), float64] */;
  %419 = reshape(%416, newshape=[1008]) /* ty=Tensor[(1008), float64] */;
  %420 = reshape(%417, newshape=[36, 14]) /* ty=Tensor[(36, 14), float64] */;
  %421 = @func_4575(%418, %419, %420) /* ty=(Tensor[(5, 13, 7), float64], Tensor[(6, 12, 14), float64], Tensor[(1008), float64], uint16, Tensor[(36, 14), float64], uint16, Tensor[(8), uint16], Tensor[(11, 4, 10), bool], Tensor[(2400), float32], Tensor[(440), float32], Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16]) */;
  %422 = %421.1;
  %423 = cast(%422, dtype="bool") /* ty=Tensor[(6, 12, 14), bool] */;
  %424 = shape_of(%var_8888, dtype="int32") /* ty=Tensor[(2), int32] */;
  %425 = cast(%var_8888, dtype="bool") /* ty=Tensor[(2, 504), bool] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %427 = cast(%422, dtype="float32") /* ty=Tensor[(6, 12, 14), float32] */;
  %428 = shape_of(%var_8888, dtype="int32") /* ty=Tensor[(2), int32] */;
  %429 = cast(%var_8888, dtype="float32") /* ty=Tensor[(2, 504), float32] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %431 = mod(%429, %430) /* ty=Tensor[(2, 504), float32] */;
  %432 = cast(%431, dtype="float64") /* ty=Tensor[(2, 504), float64] */;
  %433 = shape_of(%var_8888, dtype="int32") /* ty=Tensor[(2), int32] */;
  %434 = cast(%var_8888, dtype="float64") /* ty=Tensor[(2, 504), float64] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %436 = cast(meta[relay.Constant][39] /* ty=Tensor[(455, 1), float64] */, dtype="float64") /* ty=Tensor[(455, 1), float64] */;
  %437 = cast(meta[relay.Constant][40] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %438 = %397.2;
  %439 = %405.5;
  %440 = less(%406, %407) /* ty=Tensor[(455, 504), bool] */;
  %441 = %414.2;
  %442 = not_equal(%425, %426) /* ty=Tensor[(2, 504), bool] */;
  %443 = multiply(%434, %435) /* ty=Tensor[(2, 504), float64] */;
  %444 = floor_divide(%436, %437) /* ty=Tensor[(455, 504), float64] */;
  (%398, %438, meta[relay.Constant][36] /* ty=Tensor[(65), float32] */, %439, meta[relay.Constant][37] /* ty=Tensor[(1248), float64] */, meta[relay.Constant][38] /* ty=uint16 */, %440, %441, %442, %443, %444)
}

def @func_8237(%var_8209: Tensor[(7, 11, 7), int16], %var_8224: Tensor[(1, 560), uint8]) -> (Tensor[(7, 11, 7), float64], Tensor[(11, 1, 9), uint32], uint16, Tensor[(1, 560), uint8]) {
  %445 = cast(%var_8209, dtype="int16") /* ty=Tensor[(7, 11, 7), int16] */;
  %446 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(7, 11, 7), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 11, 7), int16] */, dtype="int16") /* ty=Tensor[(7, 11, 7), int16] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %449 = bitwise_and(%447, %448) /* ty=Tensor[(7, 11, 7), int16] */;
  %450 = cast(%449, dtype="float64") /* ty=Tensor[(7, 11, 7), float64] */;
  %451 = cast(meta[relay.Constant][42] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %452 = cast(%var_8224, dtype="uint8") /* ty=Tensor[(1, 560), uint8] */;
  %453 = reshape(%451, newshape=[]) /* ty=uint16 */;
  %454 = reshape(%452, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %455 = @func_6124(%453, %454) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], uint16, Tensor[(2, 1200), bool], Tensor[(1, 2, 4), uint16], Tensor[(1, 99), float64], Tensor[(1, 2, 4), uint16], Tensor[(11, 1, 9), uint32], Tensor[(14, 4, 10), bool], Tensor[(560), uint8]) */;
  %456 = sigmoid(%450) /* ty=Tensor[(7, 11, 7), float64] */;
  %457 = %455.8;
  (%456, %457, meta[relay.Constant][42] /* ty=uint16 */, %var_8224)
}

def @func_6674() -> (Tensor[(16, 3, 14), float64],) {
  %458 = @func_6146() /* ty=Tensor[(16, 3, 14), float64] */;
  (%458,)
}

def @func_7899() -> (Tensor[(11, 4, 10), int32],) {
  %459 = @func_5434() /* ty=Tensor[(11, 4, 10), int32] */;
  (%459,)
}

def @func_8456(%var_8450: Tensor[(16, 3, 14), float64]) -> (Tensor[(16, 3, 14), float64],) {
  %460 = @func_7299() /* ty=(Tensor[(11, 4, 10), float32], Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32]) */;
  %461 = %460.1;
  %462 = cast(%var_8450, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%461, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %466 = mod(%464, %465) /* ty=Tensor[(16, 3, 14), float64] */;
  (%466,)
}

def @func_8045() -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32]) {
  %467 = @func_4250() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %468 = %467.0;
  %469 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
  (%468, %469)
}

def @func_7879(%var_7877: uint16) -> (Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32], uint16) {
  %470 = @func_5585() /* ty=(Tensor[(16, 3, 14), float64],) */;
  %471 = cast(%var_7877, dtype="uint16") /* ty=uint16 */;
  %472 = reshape(%471, newshape=[]) /* ty=uint16 */;
  %473 = @func_7071(%472) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) */;
  %474 = %470.0;
  %475 = %473.0;
  (%474, %475, %var_7877)
}

def @func_5382() -> Tensor[(11, 4, 10), int32] {
  @func_4168() /* ty=Tensor[(11, 4, 10), int32] */
}

def @func_4914(%var_4905: uint16) -> (Tensor[(11, 4, 10), int32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) {
  %476 = cast(%var_4905, dtype="uint16") /* ty=uint16 */;
  %477 = cast(meta[relay.Constant][43] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %478 = reshape(%476, newshape=[]) /* ty=uint16 */;
  %479 = reshape(%477, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %480 = @func_4168() /* ty=Tensor[(11, 4, 10), int32] */;
  %481 = @func_211(%478, %479) /* ty=Tensor[(1, 2, 4), uint16] */;
  (%480, %481, %var_4905, meta[relay.Constant][43] /* ty=Tensor[(8), uint16] */)
}

def @func_7158(%var_7146: Tensor[(16, 3, 14), float64]) -> (Tensor[(16, 3, 14), float64],) {
  %482 = @func_5243() /* ty=Tensor[(16, 3, 14), float64] */;
  %483 = cast(%var_7146, dtype="uint16") /* ty=Tensor[(16, 3, 14), uint16] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%482, dtype="uint16") /* ty=Tensor[(16, 3, 14), uint16] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %487 = add(%485, %486) /* ty=Tensor[(16, 3, 14), uint16] */;
  %488 = cast(%487, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
  %489 = asinh(%488) /* ty=Tensor[(16, 3, 14), float64] */;
  (%489,)
}

def @func_6973() -> (Tensor[(5, 9, 11), int32], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16], Tensor[(11, 4, 10), float32], Tensor[(11, 4, 10), int32], Tensor[(8), uint16]) {
  %490 = cast(meta[relay.Constant][44] /* ty=Tensor[(495), int32] */, dtype="int32") /* ty=Tensor[(495), int32] */;
  %491 = cast(meta[relay.Constant][45] /* ty=Tensor[(154), uint32] */, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %492 = cast(meta[relay.Constant][46] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %493 = reshape(%490, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), int32] */;
  %494 = reshape(%491, newshape=[22, 7]) /* ty=Tensor[(22, 7), uint32] */;
  %495 = reshape(%492, newshape=[8]) /* ty=Tensor[(8), uint16] */;
  %496 = @func_3737(%493, %494, %495) /* ty=(Tensor[(5, 9, 11), int32], Tensor[(1, 256), float64], Tensor[(196), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(22, 7), bool], Tensor[(4, 16, 4), int64]) */;
  %497 = @func_5382() /* ty=Tensor[(11, 4, 10), int32] */;
  %498 = cast(%497, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
  %499 = @func_6565() /* ty=(Tensor[(8), uint16],) */;
  %500 = %496.0;
  %501 = cos(%498) /* ty=Tensor[(11, 4, 10), float32] */;
  %502 = @func_4168() /* ty=Tensor[(11, 4, 10), int32] */;
  %503 = %499.0;
  (%500, meta[relay.Constant][44] /* ty=Tensor[(495), int32] */, meta[relay.Constant][45] /* ty=Tensor[(154), uint32] */, meta[relay.Constant][46] /* ty=Tensor[(8), uint16] */, %501, %502, %503)
}

def @func_4168() -> Tensor[(11, 4, 10), int32] {
  %504 = @func_3621() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %504.0
}

def @func_5236(%var_5229: Tensor[(154), uint32]) -> (Tensor[(11, 4, 10), float64], Tensor[(7, 11, 2), bool], Tensor[(7, 28), uint64], Tensor[(154), uint32], Tensor[(5, 1, 13), float32], Tensor[(65), float32]) {
  %505 = @func_3299() /* ty=(Tensor[(11, 4, 10), float32],) */;
  %506 = %505.0;
  %507 = cast(%506, dtype="float64") /* ty=Tensor[(11, 4, 10), float64] */;
  %508 = cast(meta[relay.Constant][47] /* ty=Tensor[(7, 28), uint64] */, dtype="uint64") /* ty=Tensor[(7, 28), uint64] */;
  %509 = cast(meta[relay.Constant][47] /* ty=Tensor[(7, 28), uint64] */, dtype="uint64") /* ty=Tensor[(7, 28), uint64] */;
  %510 = cast(%var_5229, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %511 = reshape(%508, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), uint64] */;
  %512 = reshape(%509, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), uint64] */;
  %513 = reshape(%510, newshape=[154]) /* ty=Tensor[(154), uint32] */;
  %514 = @func_2290(%511, %512, %513) /* ty=(Tensor[(4, 7, 7), uint64], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(1, 256), float64]) */;
  %515 = cast(meta[relay.Constant][48] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %516 = reshape(%515, newshape=[5, 1, 13]) /* ty=Tensor[(5, 1, 13), float32] */;
  %517 = sin(%507) /* ty=Tensor[(11, 4, 10), float64] */;
  %518 = %514.1;
  %519 = @func_398(%516) /* ty=Tensor[(5, 1, 13), float32] */;
  (%517, %518, meta[relay.Constant][47] /* ty=Tensor[(7, 28), uint64] */, %var_5229, %519, meta[relay.Constant][48] /* ty=Tensor[(65), float32] */)
}

def @func_5298(%var_5271: Tensor[(8), uint16], %var_5272: Tensor[(256), float64], %var_5274: Tensor[(4, 16, 4), int64]) -> (Tensor[(11, 4, 10), int32], Tensor[(7, 5, 2), uint32], uint32, Tensor[(70), uint32], Tensor[(8), uint16], Tensor[(256), float64], Tensor[(4, 16, 4), float32], Tensor[(4, 16, 4), bool], Tensor[(4, 16, 4), int64]) {
  %520 = @func_3394() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32]) */;
  %521 = cast(meta[relay.Constant][49] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %522 = cast(meta[relay.Constant][50] /* ty=Tensor[(70), uint32] */, dtype="uint32") /* ty=Tensor[(70), uint32] */;
  %523 = reshape(%521, newshape=[]) /* ty=uint32 */;
  %524 = reshape(%522, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
  %525 = @func_125(%523, %524) /* ty=(Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64]) */;
  %526 = cast(%var_5271, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %527 = cast(%var_5272, dtype="float64") /* ty=Tensor[(256), float64] */;
  %528 = reshape(%526, newshape=[8]) /* ty=Tensor[(8), uint16] */;
  %529 = reshape(%527, newshape=[256]) /* ty=Tensor[(256), float64] */;
  %530 = @func_891(%528, %529) /* ty=(Tensor[(154, 1), uint32], Tensor[(70), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(1, 2, 4), uint16], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64], Tensor[(16, 13, 10), uint32], Tensor[(16, 13, 10), float64]) */;
  %531 = %530.5;
  %532 = cast(%var_5274, dtype="float32") /* ty=Tensor[(4, 16, 4), float32] */;
  %533 = shape_of(%531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%531, dtype="float32") /* ty=Tensor[(4, 16, 4), float32] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %536 = cast(%var_5274, dtype="bool") /* ty=Tensor[(4, 16, 4), bool] */;
  %537 = shape_of(%531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%531, dtype="bool") /* ty=Tensor[(4, 16, 4), bool] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %540 = mod(%534, %535) /* ty=Tensor[(4, 16, 4), float32] */;
  %541 = cast(%540, dtype="float64") /* ty=Tensor[(4, 16, 4), float64] */;
  %542 = reshape(%541, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float64] */;
  %543 = %520.0;
  %544 = %525.0;
  %545 = equal(%538, %539) /* ty=Tensor[(4, 16, 4), bool] */;
  %546 = @func_720(%542) /* ty=Tensor[(4, 16, 4), int64] */;
  (%543, %544, meta[relay.Constant][49] /* ty=uint32 */, meta[relay.Constant][50] /* ty=Tensor[(70), uint32] */, %var_5271, %var_5272, %540, %545, %546)
}

def @func_8856() -> (Tensor[(16, 3, 14), float64],) {
  %547 = @func_5254() /* ty=(Tensor[(16, 3, 14), float64],) */;
  %548 = %547.0;
  (%548,)
}

def @func_4205(%var_4173: Tensor[(11, 4, 10), float64]) -> Tensor[(11, 4, 10), float32] {
  %549 = @func_4086() /* ty=Tensor[(11, 4, 10), float64] */;
  %550 = cast(%var_4173, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%549, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%552, %553) /* ty=Tensor[(11, 4, 10), float32] */
}

def @func_3299() -> (Tensor[(11, 4, 10), float32],) {
  %554 = @func_3244() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %555 = %554.0;
  %556 = cast(%555, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
  %557 = log2(%556) /* ty=Tensor[(11, 4, 10), float32] */;
  (%557,)
}

def @func_6124(%var_6086: uint16, %var_6121: Tensor[(560), uint8]) -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], uint16, Tensor[(2, 1200), bool], Tensor[(1, 2, 4), uint16], Tensor[(1, 99), float64], Tensor[(1, 2, 4), uint16], Tensor[(11, 1, 9), uint32], Tensor[(14, 4, 10), bool], Tensor[(560), uint8]) {
  %558 = @func_4250() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %559 = @func_3821() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %560 = cast(%var_6086, dtype="uint16") /* ty=uint16 */;
  %561 = reshape(%560, newshape=[]) /* ty=uint16 */;
  %562 = @func_4914(%561) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) */;
  %563 = @func_5762() /* ty=(Tensor[(11, 4, 10), float32], Tensor[(2, 1200), bool]) */;
  %564 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 99), float64] */, dtype="float64") /* ty=Tensor[(1, 99), float64] */;
  %565 = %563.1;
  %566 = cast(%565, dtype="float32") /* ty=Tensor[(2, 1200), float32] */;
  %567 = cast(%var_6086, dtype="uint16") /* ty=uint16 */;
  %568 = reshape(%564, newshape=[11, 1, 9]) /* ty=Tensor[(11, 1, 9), float64] */;
  %569 = reshape(%566, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %570 = reshape(%567, newshape=[]) /* ty=uint16 */;
  %571 = @func_3681(%568, %569, %570) /* ty=(Tensor[(2400), float32], Tensor[(2400), float32], Tensor[(1, 440), float32], Tensor[(1, 2, 4), uint16], Tensor[(1, 8), uint16], Tensor[(11, 1, 9), uint32]) */;
  %572 = cast(%var_6086, dtype="uint16") /* ty=uint16 */;
  %573 = %571.3;
  %574 = cast(%573, dtype="uint16") /* ty=Tensor[(1, 2, 4), uint16] */;
  %575 = reshape(%572, newshape=[]) /* ty=uint16 */;
  %576 = reshape(%574, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %577 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 99), float64] */, dtype="float64") /* ty=Tensor[(1, 99), float64] */;
  %578 = cast(%565, dtype="float32") /* ty=Tensor[(2, 1200), float32] */;
  %579 = cast(%var_6086, dtype="uint16") /* ty=uint16 */;
  %580 = reshape(%577, newshape=[11, 1, 9]) /* ty=Tensor[(11, 1, 9), float64] */;
  %581 = reshape(%578, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %582 = reshape(%579, newshape=[]) /* ty=uint16 */;
  %583 = @func_3681(%580, %581, %582) /* ty=(Tensor[(2400), float32], Tensor[(2400), float32], Tensor[(1, 440), float32], Tensor[(1, 2, 4), uint16], Tensor[(1, 8), uint16], Tensor[(11, 1, 9), uint32]) */;
  %584 = cast(%var_6121, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %585 = cast(%var_6121, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %586 = reshape(%584, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), uint8] */;
  %587 = reshape(%585, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), uint8] */;
  %588 = %558.0;
  %589 = %559.0;
  %590 = %562.0;
  %591 = @func_211(%575, %576) /* ty=Tensor[(1, 2, 4), uint16] */;
  %592 = %583.5;
  %593 = @func_5087(%586, %587) /* ty=Tensor[(14, 4, 10), bool] */;
  (%588, %589, %590, %var_6086, %565, %573, meta[relay.Constant][51] /* ty=Tensor[(1, 99), float64] */, %591, %592, %593, %var_6121)
}

def @func_8109() -> (Tensor[(11, 4, 10), int32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) {
  %594 = cast(meta[relay.Constant][52] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %595 = cast(meta[relay.Constant][53] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %596 = reshape(%594, newshape=[]) /* ty=uint16 */;
  %597 = reshape(%595, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %598 = @func_4168() /* ty=Tensor[(11, 4, 10), int32] */;
  %599 = @func_211(%596, %597) /* ty=Tensor[(1, 2, 4), uint16] */;
  (%598, %599, meta[relay.Constant][52] /* ty=uint16 */, meta[relay.Constant][53] /* ty=Tensor[(8), uint16] */)
}

def @func_8501(%var_8491: Tensor[(2400), float32]) -> (Tensor[(16, 3, 14), float64], Tensor[(2400), float32], Tensor[(99), float64], Tensor[(2400), float32], uint16) {
  %600 = @func_6674() /* ty=(Tensor[(16, 3, 14), float64],) */;
  %601 = cast(meta[relay.Constant][54] /* ty=Tensor[(99), float64] */, dtype="float64") /* ty=Tensor[(99), float64] */;
  %602 = cast(%var_8491, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %603 = cast(meta[relay.Constant][55] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %604 = reshape(%601, newshape=[11, 1, 9]) /* ty=Tensor[(11, 1, 9), float64] */;
  %605 = reshape(%602, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %606 = reshape(%603, newshape=[]) /* ty=uint16 */;
  %607 = @func_3681(%604, %605, %606) /* ty=(Tensor[(2400), float32], Tensor[(2400), float32], Tensor[(1, 440), float32], Tensor[(1, 2, 4), uint16], Tensor[(1, 8), uint16], Tensor[(11, 1, 9), uint32]) */;
  %608 = %600.0;
  %609 = %607.1;
  (%608, %609, meta[relay.Constant][54] /* ty=Tensor[(99), float64] */, %var_8491, meta[relay.Constant][55] /* ty=uint16 */)
}

def @func_7029() -> (Tensor[(5, 9, 11), int32],) {
  %610 = @func_6973() /* ty=(Tensor[(5, 9, 11), int32], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16], Tensor[(11, 4, 10), float32], Tensor[(11, 4, 10), int32], Tensor[(8), uint16]) */;
  %611 = %610.0;
  (%611,)
}

def @func_8537(%var_8509: Tensor[(10, 16, 12), float64]) -> (Tensor[(10, 16, 12), bool],) {
  %612 = cast(%var_8509, dtype="float64") /* ty=Tensor[(10, 16, 12), float64] */;
  %613 = acosh(%612) /* ty=Tensor[(10, 16, 12), float64] */;
  %614 = cast(%var_8509, dtype="bool") /* ty=Tensor[(10, 16, 12), bool] */;
  %615 = shape_of(%613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%613, dtype="bool") /* ty=Tensor[(10, 16, 12), bool] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %618 = logical_and(%616, %617) /* ty=Tensor[(10, 16, 12), bool] */;
  %619 = cast(%618, dtype="float64") /* ty=Tensor[(10, 16, 12), float64] */;
  %620 = log2(%619) /* ty=Tensor[(10, 16, 12), float64] */;
  %621 = cast(%618, dtype="bool") /* ty=Tensor[(10, 16, 12), bool] */;
  %622 = shape_of(%620, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%620, dtype="bool") /* ty=Tensor[(10, 16, 12), bool] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %625 = not_equal(%623, %624) /* ty=Tensor[(10, 16, 12), bool] */;
  (%625,)
}

def @func_8824(%var_8758: Tensor[(1008), float64], %var_8805: Tensor[(8), uint16]) -> (Tensor[(11, 4, 10), int32], Tensor[(6, 12, 14), float32], Tensor[(4, 16, 4), float32], Tensor[(8), uint16], Tensor[(256), float64], Tensor[(65), float32], Tensor[(11, 4, 10), uint16], Tensor[(16, 3, 14), bool]) {
  %626 = @func_4250() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %627 = cast(%var_8758, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %628 = cast(%var_8758, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %629 = reshape(%627, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), float64] */;
  %630 = reshape(%628, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), float64] */;
  %631 = @func_3212(%629, %630) /* ty=Tensor[(6, 12, 14), float64] */;
  %632 = cast(%var_8758, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%631, dtype="bool") /* ty=Tensor[(6, 12, 14), bool] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %636 = less_equal(%634, %635) /* ty=Tensor[(6, 12, 14), bool] */;
  %637 = cast(%636, dtype="float32") /* ty=Tensor[(6, 12, 14), float32] */;
  %638 = cast(%var_8805, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %639 = cast(meta[relay.Constant][56] /* ty=Tensor[(256), float64] */, dtype="float64") /* ty=Tensor[(256), float64] */;
  %640 = cast(meta[relay.Constant][56] /* ty=Tensor[(256), float64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %641 = reshape(%638, newshape=[8]) /* ty=Tensor[(8), uint16] */;
  %642 = reshape(%639, newshape=[256]) /* ty=Tensor[(256), float64] */;
  %643 = reshape(%640, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), int64] */;
  %644 = @func_5298(%641, %642, %643) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(7, 5, 2), uint32], uint32, Tensor[(70), uint32], Tensor[(8), uint16], Tensor[(256), float64], Tensor[(4, 16, 4), float32], Tensor[(4, 16, 4), bool], Tensor[(4, 16, 4), int64]) */;
  %645 = @func_4835() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(65), float32], Tensor[(91, 9), float64], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(11, 4, 10), float32]) */;
  %646 = @func_6674() /* ty=(Tensor[(16, 3, 14), float64],) */;
  %647 = %646.0;
  %648 = cast(%647, dtype="float32") /* ty=Tensor[(16, 3, 14), float32] */;
  %649 = acos(%648) /* ty=Tensor[(16, 3, 14), float32] */;
  %650 = cast(meta[relay.Constant][57] /* ty=Tensor[(16, 3, 14), float32] */, dtype="bool") /* ty=Tensor[(16, 3, 14), bool] */;
  %651 = shape_of(%649, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%649, dtype="bool") /* ty=Tensor[(16, 3, 14), bool] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %654 = %626.0;
  %655 = cos(%637) /* ty=Tensor[(6, 12, 14), float32] */;
  %656 = %644.6;
  %657 = %645.1;
  %658 = @func_4313() /* ty=Tensor[(11, 4, 10), uint16] */;
  %659 = less(%652, %653) /* ty=Tensor[(16, 3, 14), bool] */;
  (%654, %655, %656, %var_8805, meta[relay.Constant][56] /* ty=Tensor[(256), float64] */, %657, %658, %659)
}

def @func_4466(%var_4458: Tensor[(495), int32], %var_4459: Tensor[(154), uint32]) -> (Tensor[(11, 4, 10), int32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16]) {
  %660 = cast(meta[relay.Constant][58] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %661 = reshape(%660, newshape=[16, 16]) /* ty=Tensor[(16, 16), float32] */;
  %662 = @func_2511(%661) /* ty=(Tensor[(16, 16), float32], Tensor[(4, 16, 4), bool]) */;
  %663 = cast(%var_4458, dtype="int32") /* ty=Tensor[(495), int32] */;
  %664 = cast(%var_4459, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %665 = cast(meta[relay.Constant][59] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %666 = reshape(%663, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), int32] */;
  %667 = reshape(%664, newshape=[22, 7]) /* ty=Tensor[(22, 7), uint32] */;
  %668 = reshape(%665, newshape=[8]) /* ty=Tensor[(8), uint16] */;
  %669 = @func_3737(%666, %667, %668) /* ty=(Tensor[(5, 9, 11), int32], Tensor[(1, 256), float64], Tensor[(196), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(22, 7), bool], Tensor[(4, 16, 4), int64]) */;
  %670 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
  %671 = %662.0;
  %672 = %669.6;
  (%670, %671, meta[relay.Constant][58] /* ty=Tensor[(256), float32] */, %672, %var_4458, %var_4459, meta[relay.Constant][59] /* ty=Tensor[(8), uint16] */)
}

def @func_7746(%var_7732: Tensor[(1, 36), bool]) -> (Tensor[(154), uint32], Tensor[(11, 3, 6), int32], Tensor[(16, 16), float32], Tensor[(1, 36), bool], Tensor[(468), bool]) {
  %673 = @func_4835() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(65), float32], Tensor[(91, 9), float64], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(11, 4, 10), float32]) */;
  %674 = @func_6244() /* ty=(Tensor[(11, 3, 6), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 3, 2400), float32], Tensor[(2400), float32], Tensor[(16, 15, 10), float64]) */;
  %675 = cast(%var_7732, dtype="bool") /* ty=Tensor[(1, 36), bool] */;
  %676 = cast(meta[relay.Constant][60] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
  %677 = cast(meta[relay.Constant][60] /* ty=Tensor[(468), bool] */, dtype="float32") /* ty=Tensor[(468), float32] */;
  %678 = reshape(%675, newshape=[1, 12, 3]) /* ty=Tensor[(1, 12, 3), bool] */;
  %679 = reshape(%676, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), bool] */;
  %680 = reshape(%677, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), float32] */;
  %681 = @func_2728(%678, %679, %680) /* ty=(Tensor[(5, 1, 13), float32], Tensor[(65), float32], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(16, 16), float32], Tensor[(13, 12, 3), uint8], Tensor[(13, 12, 3), float64], Tensor[(7, 5, 2), float64], Tensor[(8), uint16]) */;
  %682 = %673.6;
  %683 = %674.0;
  %684 = %681.4;
  (%682, %683, %684, %var_7732, meta[relay.Constant][60] /* ty=Tensor[(468), bool] */)
}

def @func_3212(%var_3207: Tensor[(6, 12, 14), float64], %var_3208: Tensor[(6, 12, 14), float64]) -> Tensor[(6, 12, 14), float64] {
  %685 = cast(%var_3208, dtype="float64") /* ty=Tensor[(6, 12, 14), float64] */;
  %686 = shape_of(%var_3207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%var_3207, dtype="float64") /* ty=Tensor[(6, 12, 14), float64] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%687, %688) /* ty=Tensor[(6, 12, 14), float64] */
}

def @func_8544() -> (Tensor[(11, 4, 10), int32],) {
  %689 = @func_5337() /* ty=Tensor[(11, 4, 10), int32] */;
  (%689,)
}

def @func_4392() -> Tensor[(11, 4, 10), float32] {
  %690 = @func_3566() /* ty=Tensor[(11, 4, 10), int32] */;
  %691 = cast(%690, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
  log10(%691) /* ty=Tensor[(11, 4, 10), float32] */
}

def @func_891(%var_828: Tensor[(8), uint16], %var_848: Tensor[(256), float64]) -> (Tensor[(154, 1), uint32], Tensor[(70), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(1, 2, 4), uint16], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64], Tensor[(16, 13, 10), uint32], Tensor[(16, 13, 10), float64]) {
  %692 = cast(meta[relay.Constant][61] /* ty=Tensor[(154, 1), uint32] */, dtype="uint32") /* ty=Tensor[(154, 1), uint32] */;
  %693 = cast(meta[relay.Constant][61] /* ty=Tensor[(154, 1), uint32] */, dtype="uint32") /* ty=Tensor[(154, 1), uint32] */;
  %694 = cast(meta[relay.Constant][62] /* ty=Tensor[(70), uint32] */, dtype="uint32") /* ty=Tensor[(70), uint32] */;
  %695 = reshape(%692, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
  %696 = reshape(%693, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
  %697 = reshape(%694, newshape=[14, 5]) /* ty=Tensor[(14, 5), uint32] */;
  %698 = @func_490(%695, %696, %697) /* ty=(Tensor[(7, 11, 2), bool], Tensor[(7, 5, 2), float64], uint32, Tensor[(14, 5), uint32]) */;
  %699 = %698.3;
  %700 = cast(%699, dtype="uint64") /* ty=Tensor[(14, 5), uint64] */;
  %701 = shape_of(meta[relay.Constant][62] /* ty=Tensor[(70), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %702 = cast(meta[relay.Constant][62] /* ty=Tensor[(70), uint32] */, dtype="uint64") /* ty=Tensor[(70), uint64] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %704 = cast(meta[relay.Constant][63] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %705 = cast(%var_828, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %706 = reshape(%704, newshape=[]) /* ty=uint16 */;
  %707 = reshape(%705, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %708 = cast(meta[relay.Constant][63] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %709 = cast(%var_828, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %710 = reshape(%708, newshape=[]) /* ty=uint16 */;
  %711 = reshape(%709, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %712 = cast(%var_848, dtype="float64") /* ty=Tensor[(256), float64] */;
  %713 = reshape(%712, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float64] */;
  %714 = cast(meta[relay.Constant][63] /* ty=uint16 */, dtype="uint32") /* ty=uint32 */;
  %715 = cast(%699, dtype="uint32") /* ty=Tensor[(14, 5), uint32] */;
  %716 = reshape(%714, newshape=[]) /* ty=uint32 */;
  %717 = reshape(%715, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
  %718 = @func_125(%716, %717) /* ty=(Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64]) */;
  %719 = cast(meta[relay.Constant][63] /* ty=uint16 */, dtype="uint32") /* ty=uint32 */;
  %720 = %718.0;
  %721 = cast(%720, dtype="uint32") /* ty=Tensor[(7, 5, 2), uint32] */;
  %722 = reshape(%719, newshape=[]) /* ty=uint32 */;
  %723 = reshape(%721, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
  %724 = @func_125(%722, %723) /* ty=(Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64]) */;
  %725 = cast(meta[relay.Constant][64] /* ty=Tensor[(16, 13, 10), float64] */, dtype="float64") /* ty=Tensor[(16, 13, 10), float64] */;
  %726 = asinh(%725) /* ty=Tensor[(16, 13, 10), float64] */;
  %727 = cast(%726, dtype="uint32") /* ty=Tensor[(16, 13, 10), uint32] */;
  %728 = cast(meta[relay.Constant][63] /* ty=uint16 */, dtype="uint32") /* ty=uint32 */;
  %729 = cast(%726, dtype="float64") /* ty=Tensor[(16, 13, 10), float64] */;
  %730 = maximum(%702, %703) /* ty=Tensor[(70), uint64] */;
  %731 = @func_211(%706, %707) /* ty=Tensor[(1, 2, 4), uint16] */;
  %732 = @func_211(%710, %711) /* ty=Tensor[(1, 2, 4), uint16] */;
  %733 = @func_720(%713) /* ty=Tensor[(4, 16, 4), int64] */;
  %734 = %724.1;
  %735 = minimum(%727, %728) /* ty=Tensor[(16, 13, 10), uint32] */;
  %736 = log2(%729) /* ty=Tensor[(16, 13, 10), float64] */;
  (meta[relay.Constant][61] /* ty=Tensor[(154, 1), uint32] */, %730, %731, %var_828, %732, %733, %var_848, %720, %734, %735, %736)
}

def @func_3681(%var_3659: Tensor[(11, 1, 9), float64], %var_3665: Tensor[(2400), float32], %var_3671: uint16) -> (Tensor[(2400), float32], Tensor[(2400), float32], Tensor[(1, 440), float32], Tensor[(1, 2, 4), uint16], Tensor[(1, 8), uint16], Tensor[(11, 1, 9), uint32]) {
  %737 = cast(%var_3665, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %738 = cast(meta[relay.Constant][65] /* ty=Tensor[(1, 440), float32] */, dtype="float32") /* ty=Tensor[(1, 440), float32] */;
  %739 = reshape(%737, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %740 = reshape(%738, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float32] */;
  %741 = @func_3486(%739, %740) /* ty=(Tensor[(16, 15, 10), float32], Tensor[(2400), float32], Tensor[(11, 4, 10), bool]) */;
  %742 = cast(%var_3671, dtype="uint16") /* ty=uint16 */;
  %743 = cast(meta[relay.Constant][66] /* ty=Tensor[(1, 8), uint16] */, dtype="uint16") /* ty=Tensor[(1, 8), uint16] */;
  %744 = reshape(%742, newshape=[]) /* ty=uint16 */;
  %745 = reshape(%743, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %746 = cast(%var_3659, dtype="float64") /* ty=Tensor[(11, 1, 9), float64] */;
  %747 = sinh(%746) /* ty=Tensor[(11, 1, 9), float64] */;
  %748 = cast(%747, dtype="uint32") /* ty=Tensor[(11, 1, 9), uint32] */;
  %749 = cast(%var_3671, dtype="uint32") /* ty=uint32 */;
  %750 = %741.1;
  %751 = @func_211(%744, %745) /* ty=Tensor[(1, 2, 4), uint16] */;
  %752 = add(%748, %749) /* ty=Tensor[(11, 1, 9), uint32] */;
  (%750, %var_3665, meta[relay.Constant][65] /* ty=Tensor[(1, 440), float32] */, %751, meta[relay.Constant][66] /* ty=Tensor[(1, 8), uint16] */, %752)
}

def @func_6146() -> Tensor[(16, 3, 14), float64] {
  %753 = @func_5585() /* ty=(Tensor[(16, 3, 14), float64],) */;
  %754 = %753.0;
  %755 = cast(%754, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
  sqrt(%755) /* ty=Tensor[(16, 3, 14), float64] */
}

def @func_8065() -> (Tensor[(5, 9, 11), int32], Tensor[(11, 4, 10), int32]) {
  %756 = @func_7029() /* ty=(Tensor[(5, 9, 11), int32],) */;
  %757 = @func_4250() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %758 = %756.0;
  %759 = %757.0;
  (%758, %759)
}

def @func_3486(%var_3478: Tensor[(2400), float32], %var_3480: Tensor[(11, 4, 10), float32]) -> (Tensor[(16, 15, 10), float32], Tensor[(2400), float32], Tensor[(11, 4, 10), bool]) {
  %760 = cast(%var_3478, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %761 = reshape(%760, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), float32] */;
  %762 = @func_3101(%761) /* ty=(Tensor[(16, 15, 10), float32],) */;
  %763 = @func_3299() /* ty=(Tensor[(11, 4, 10), float32],) */;
  %764 = %763.0;
  %765 = cast(%var_3480, dtype="bool") /* ty=Tensor[(11, 4, 10), bool] */;
  %766 = shape_of(%764, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%764, dtype="bool") /* ty=Tensor[(11, 4, 10), bool] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %769 = %762.0;
  %770 = less_equal(%767, %768) /* ty=Tensor[(11, 4, 10), bool] */;
  (%769, %var_3478, %770)
}

def @func_6857() -> Tensor[(11, 4, 10), float32] {
  %771 = @func_3299() /* ty=(Tensor[(11, 4, 10), float32],) */;
  %771.0
}

def @func_4889() -> Tensor[(11, 4, 10), uint16] {
  @func_4313() /* ty=Tensor[(11, 4, 10), uint16] */
}

def @func_5585() -> (Tensor[(16, 3, 14), float64],) {
  %772 = @func_5243() /* ty=Tensor[(16, 3, 14), float64] */;
  (%772,)
}

def @func_5087(%var_5046: Tensor[(14, 4, 10), uint8], %var_5047: Tensor[(14, 4, 10), uint8]) -> Tensor[(14, 4, 10), bool] {
  %773 = cast(%var_5047, dtype="uint8") /* ty=Tensor[(14, 4, 10), uint8] */;
  %774 = shape_of(%var_5046, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%var_5046, dtype="uint8") /* ty=Tensor[(14, 4, 10), uint8] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %777 = right_shift(%775, %776) /* ty=Tensor[(14, 4, 10), uint8] */;
  %778 = cast(%777, dtype="float32") /* ty=Tensor[(14, 4, 10), float32] */;
  %779 = cos(%778) /* ty=Tensor[(14, 4, 10), float32] */;
  %780 = cast(%779, dtype="float64") /* ty=Tensor[(14, 4, 10), float64] */;
  %781 = log10(%780) /* ty=Tensor[(14, 4, 10), float64] */;
  %782 = cast(%779, dtype="int8") /* ty=Tensor[(14, 4, 10), int8] */;
  %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(%781, dtype="int8") /* ty=Tensor[(14, 4, 10), int8] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %786 = left_shift(%784, %785) /* ty=Tensor[(14, 4, 10), int8] */;
  %787 = cast(%781, dtype="bool") /* ty=Tensor[(14, 4, 10), bool] */;
  %788 = shape_of(%786, dtype="int32") /* ty=Tensor[(3), int32] */;
  %789 = cast(%786, dtype="bool") /* ty=Tensor[(14, 4, 10), bool] */;
  %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%789, %790) /* ty=Tensor[(14, 4, 10), bool] */
}

def @func_8143(%var_8127: Tensor[(8), uint16], %var_8128: Tensor[(256), float64]) -> (Tensor[(11, 4, 10), uint16], Tensor[(256), float64], Tensor[(8), uint16], Tensor[(256), float64], Tensor[(11, 4, 10), int32]) {
  %791 = cast(%var_8127, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %792 = cast(%var_8128, dtype="float64") /* ty=Tensor[(256), float64] */;
  %793 = reshape(%791, newshape=[8]) /* ty=Tensor[(8), uint16] */;
  %794 = reshape(%792, newshape=[256]) /* ty=Tensor[(256), float64] */;
  %795 = @func_891(%793, %794) /* ty=(Tensor[(154, 1), uint32], Tensor[(70), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(1, 2, 4), uint16], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64], Tensor[(16, 13, 10), uint32], Tensor[(16, 13, 10), float64]) */;
  %796 = @func_6767() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %797 = @func_4889() /* ty=Tensor[(11, 4, 10), uint16] */;
  %798 = %795.6;
  %799 = %796.0;
  (%797, %798, %var_8127, %var_8128, %799)
}

def @func_5762() -> (Tensor[(11, 4, 10), float32], Tensor[(2, 1200), bool]) {
  %800 = @func_3299() /* ty=(Tensor[(11, 4, 10), float32],) */;
  %801 = cast(meta[relay.Constant][67] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %802 = reshape(%801, newshape=[2, 1200]) /* ty=Tensor[(2, 1200), float32] */;
  %803 = @func_5189(%802) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(16, 15, 10), float32], Tensor[(2, 1200), float64]) */;
  %804 = %803.2;
  %805 = cast(meta[relay.Constant][67] /* ty=Tensor[(2400), float32] */, dtype="bool") /* ty=Tensor[(2400), bool] */;
  %806 = shape_of(%804, dtype="int32") /* ty=Tensor[(2), int32] */;
  %807 = cast(%804, dtype="bool") /* ty=Tensor[(2, 1200), bool] */;
  %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %809 = %800.0;
  %810 = less(%807, %808) /* ty=Tensor[(2, 1200), bool] */;
  (%809, %810)
}

def @func_1202(%var_1190: Tensor[(8, 9, 7), float64], %var_1191: Tensor[(8, 9, 7), float64], %var_1196: uint16, %var_1197: Tensor[(8), uint16]) -> (Tensor[(8, 9, 7), bool], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) {
  %811 = cast(%var_1191, dtype="bool") /* ty=Tensor[(8, 9, 7), bool] */;
  %812 = shape_of(%var_1190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %813 = cast(%var_1190, dtype="bool") /* ty=Tensor[(8, 9, 7), bool] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %815 = cast(%var_1196, dtype="uint16") /* ty=uint16 */;
  %816 = cast(%var_1197, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %817 = reshape(%815, newshape=[]) /* ty=uint16 */;
  %818 = reshape(%816, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %819 = less(%813, %814) /* ty=Tensor[(8, 9, 7), bool] */;
  %820 = @func_211(%817, %818) /* ty=Tensor[(1, 2, 4), uint16] */;
  (%819, %820, %var_1196, %var_1197)
}

def @func_5458(%var_5450: Tensor[(16, 3, 14), float64]) -> Tensor[(16, 3, 14), bool] {
  %821 = @func_5243() /* ty=Tensor[(16, 3, 14), float64] */;
  %822 = cast(%var_5450, dtype="bool") /* ty=Tensor[(16, 3, 14), bool] */;
  %823 = shape_of(%821, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%821, dtype="bool") /* ty=Tensor[(16, 3, 14), bool] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%824, %825) /* ty=Tensor[(16, 3, 14), bool] */
}

def @func_720(%var_702: Tensor[(4, 16, 4), float64]) -> Tensor[(4, 16, 4), int64] {
  %826 = cast(meta[relay.Constant][68] /* ty=Tensor[(4, 16, 4), float64] */, dtype="float64") /* ty=Tensor[(4, 16, 4), float64] */;
  %827 = rsqrt(%826) /* ty=Tensor[(4, 16, 4), float64] */;
  %828 = cast(%var_702, dtype="int64") /* ty=Tensor[(4, 16, 4), int64] */;
  %829 = shape_of(%827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %830 = cast(%827, dtype="int64") /* ty=Tensor[(4, 16, 4), int64] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%830, %831) /* ty=Tensor[(4, 16, 4), int64] */
}

def @func_5434() -> Tensor[(11, 4, 10), int32] {
  @func_3976() /* ty=Tensor[(11, 4, 10), int32] */
}

def @func_5858() -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), float64]) {
  %832 = @func_4250() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %833 = %832.0;
  %834 = @func_4086() /* ty=Tensor[(11, 4, 10), float64] */;
  (%833, %834)
}

def @func_4250() -> (Tensor[(11, 4, 10), int32],) {
  %835 = @func_4168() /* ty=Tensor[(11, 4, 10), int32] */;
  (%835,)
}

def @func_4654(%var_4616: Tensor[(196), uint64], %var_4617: Tensor[(154, 1), uint32], %var_4638: Tensor[(455), float64], %var_4639: Tensor[(1008), float64]) -> (Tensor[(1, 256), float64], Tensor[(196), uint64], Tensor[(154, 1), uint32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), float32], Tensor[(11, 4, 10), int32], uint16, Tensor[(455), float64], Tensor[(1008), float64], Tensor[(504), float64], Tensor[(6, 12, 14), float64], Tensor[(11, 4, 10), float32]) {
  %836 = cast(%var_4616, dtype="uint64") /* ty=Tensor[(196), uint64] */;
  %837 = cast(%var_4616, dtype="uint64") /* ty=Tensor[(196), uint64] */;
  %838 = cast(%var_4617, dtype="uint32") /* ty=Tensor[(154, 1), uint32] */;
  %839 = reshape(%836, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), uint64] */;
  %840 = reshape(%837, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), uint64] */;
  %841 = reshape(%838, newshape=[154]) /* ty=Tensor[(154), uint32] */;
  %842 = @func_2290(%839, %840, %841) /* ty=(Tensor[(4, 7, 7), uint64], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(1, 256), float64]) */;
  %843 = @func_4250() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %844 = %843.0;
  %845 = cast(%844, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
  %846 = cast(%var_4638, dtype="float64") /* ty=Tensor[(455), float64] */;
  %847 = cast(%var_4639, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %848 = cast(meta[relay.Constant][69] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %849 = reshape(%846, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), float64] */;
  %850 = reshape(%847, newshape=[1008]) /* ty=Tensor[(1008), float64] */;
  %851 = reshape(%848, newshape=[36, 14]) /* ty=Tensor[(36, 14), float64] */;
  %852 = @func_4575(%849, %850, %851) /* ty=(Tensor[(5, 13, 7), float64], Tensor[(6, 12, 14), float64], Tensor[(1008), float64], uint16, Tensor[(36, 14), float64], uint16, Tensor[(8), uint16], Tensor[(11, 4, 10), bool], Tensor[(2400), float32], Tensor[(440), float32], Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16]) */;
  %853 = cast(%var_4639, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %854 = cast(%var_4639, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %855 = reshape(%853, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), float64] */;
  %856 = reshape(%854, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), float64] */;
  %857 = cast(%844, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
  %858 = %842.5;
  %859 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
  %860 = atan(%845) /* ty=Tensor[(11, 4, 10), float32] */;
  %861 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
  %862 = %852.3;
  %863 = @func_3212(%855, %856) /* ty=Tensor[(6, 12, 14), float64] */;
  %864 = exp(%857) /* ty=Tensor[(11, 4, 10), float32] */;
  (%858, %var_4616, %var_4617, %859, %860, %861, %862, %var_4638, %var_4639, meta[relay.Constant][69] /* ty=Tensor[(504), float64] */, %863, %864)
}

def @func_5658(%var_5622: Tensor[(495), int32], %var_5623: Tensor[(154), uint32]) -> (Tensor[(11, 4, 10), int32], Tensor[(196), uint64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16]) {
  %865 = cast(%var_5622, dtype="int32") /* ty=Tensor[(495), int32] */;
  %866 = cast(%var_5623, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %867 = cast(meta[relay.Constant][70] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %868 = reshape(%865, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), int32] */;
  %869 = reshape(%866, newshape=[22, 7]) /* ty=Tensor[(22, 7), uint32] */;
  %870 = reshape(%867, newshape=[8]) /* ty=Tensor[(8), uint16] */;
  %871 = @func_3737(%868, %869, %870) /* ty=(Tensor[(5, 9, 11), int32], Tensor[(1, 256), float64], Tensor[(196), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(22, 7), bool], Tensor[(4, 16, 4), int64]) */;
  %872 = @func_3868() /* ty=Tensor[(11, 4, 10), int32] */;
  %873 = %871.2;
  (%872, %873, %var_5622, %var_5623, meta[relay.Constant][70] /* ty=Tensor[(8), uint16] */)
}

def @func_3244() -> (Tensor[(11, 4, 10), int32],) {
  %874 = cast(meta[relay.Constant][71] /* ty=Tensor[(11, 4, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 4, 10), float64] */;
  %875 = sqrt(%874) /* ty=Tensor[(11, 4, 10), float64] */;
  %876 = cast(%875, dtype="int32") /* ty=Tensor[(11, 4, 10), int32] */;
  %877 = shape_of(meta[relay.Constant][71] /* ty=Tensor[(11, 4, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %878 = cast(meta[relay.Constant][71] /* ty=Tensor[(11, 4, 10), float64] */, dtype="int32") /* ty=Tensor[(11, 4, 10), int32] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %880 = add(%878, %879) /* ty=Tensor[(11, 4, 10), int32] */;
  (%880,)
}

def @func_211(%var_194: uint16, %var_195: Tensor[(1, 2, 4), uint16]) -> Tensor[(1, 2, 4), uint16] {
  %881 = cast(%var_194, dtype="uint16") /* ty=uint16 */;
  %882 = cast(%var_195, dtype="uint16") /* ty=Tensor[(1, 2, 4), uint16] */;
  multiply(%881, %882) /* ty=Tensor[(1, 2, 4), uint16] */
}

def @func_5337() -> Tensor[(11, 4, 10), int32] {
  %883 = @func_4250() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %883.0
}

def @func_3737(%var_3703: Tensor[(5, 9, 11), int32], %var_3711: Tensor[(22, 7), uint32], %var_3714: Tensor[(8), uint16]) -> (Tensor[(5, 9, 11), int32], Tensor[(1, 256), float64], Tensor[(196), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(22, 7), bool], Tensor[(4, 16, 4), int64]) {
  %884 = cast(4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %885 = cast(%var_3703, dtype="int32") /* ty=Tensor[(5, 9, 11), int32] */;
  %886 = cast(meta[relay.Constant][72] /* ty=Tensor[(196), uint64] */, dtype="uint64") /* ty=Tensor[(196), uint64] */;
  %887 = cast(meta[relay.Constant][72] /* ty=Tensor[(196), uint64] */, dtype="uint64") /* ty=Tensor[(196), uint64] */;
  %888 = cast(%var_3711, dtype="uint32") /* ty=Tensor[(22, 7), uint32] */;
  %889 = reshape(%886, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), uint64] */;
  %890 = reshape(%887, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), uint64] */;
  %891 = reshape(%888, newshape=[154]) /* ty=Tensor[(154), uint32] */;
  %892 = @func_2290(%889, %890, %891) /* ty=(Tensor[(4, 7, 7), uint64], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(1, 256), float64]) */;
  %893 = cast(4 /* ty=int32 */, dtype="uint16") /* ty=uint16 */;
  %894 = cast(%var_3714, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %895 = reshape(%893, newshape=[]) /* ty=uint16 */;
  %896 = reshape(%894, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %897 = cast(4 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %898 = cast(%var_3711, dtype="bool") /* ty=Tensor[(22, 7), bool] */;
  %899 = %892.5;
  %900 = cast(%899, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %901 = reshape(%900, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float64] */;
  %902 = right_shift(%884, %885) /* ty=Tensor[(5, 9, 11), int32] */;
  %903 = @func_211(%895, %896) /* ty=Tensor[(1, 2, 4), uint16] */;
  %904 = less_equal(%897, %898) /* ty=Tensor[(22, 7), bool] */;
  %905 = @func_720(%901) /* ty=Tensor[(4, 16, 4), int64] */;
  (%902, %899, meta[relay.Constant][72] /* ty=Tensor[(196), uint64] */, %903, %var_3714, %904, %905)
}

def @func_2728(%var_2662: Tensor[(1, 12, 3), bool], %var_2663: Tensor[(13, 12, 3), bool], %var_2698: Tensor[(13, 12, 3), float32]) -> (Tensor[(5, 1, 13), float32], Tensor[(65), float32], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(16, 16), float32], Tensor[(13, 12, 3), uint8], Tensor[(13, 12, 3), float64], Tensor[(7, 5, 2), float64], Tensor[(8), uint16]) {
  %906 = cast(meta[relay.Constant][73] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %907 = reshape(%906, newshape=[5, 1, 13]) /* ty=Tensor[(5, 1, 13), float32] */;
  %908 = cast(meta[relay.Constant][74] /* ty=Tensor[(256), float64] */, dtype="float64") /* ty=Tensor[(256), float64] */;
  %909 = reshape(%908, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float64] */;
  %910 = @func_720(%909) /* ty=Tensor[(4, 16, 4), int64] */;
  %911 = cast(%910, dtype="float32") /* ty=Tensor[(4, 16, 4), float32] */;
  %912 = reshape(%911, newshape=[16, 16]) /* ty=Tensor[(16, 16), float32] */;
  %913 = @func_2511(%912) /* ty=(Tensor[(16, 16), float32], Tensor[(4, 16, 4), bool]) */;
  %914 = cast(%var_2663, dtype="float32") /* ty=Tensor[(13, 12, 3), float32] */;
  %915 = asin(%914) /* ty=Tensor[(13, 12, 3), float32] */;
  %916 = cast(%var_2698, dtype="uint8") /* ty=Tensor[(13, 12, 3), uint8] */;
  %917 = shape_of(%915, dtype="int32") /* ty=Tensor[(3), int32] */;
  %918 = cast(%915, dtype="uint8") /* ty=Tensor[(13, 12, 3), uint8] */;
  %919 = dyn.reshape(%916, %917, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %920 = cast(%var_2662, dtype="bool") /* ty=Tensor[(1, 12, 3), bool] */;
  %921 = cast(%var_2663, dtype="bool") /* ty=Tensor[(13, 12, 3), bool] */;
  %922 = logical_or(%920, %921) /* ty=Tensor[(13, 12, 3), bool] */;
  %923 = cast(%922, dtype="float64") /* ty=Tensor[(13, 12, 3), float64] */;
  %924 = cast(meta[relay.Constant][75] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %925 = cast(%910, dtype="float64") /* ty=Tensor[(4, 16, 4), float64] */;
  %926 = reshape(%924, newshape=[8]) /* ty=Tensor[(8), uint16] */;
  %927 = reshape(%925, newshape=[256]) /* ty=Tensor[(256), float64] */;
  %928 = @func_891(%926, %927) /* ty=(Tensor[(154, 1), uint32], Tensor[(70), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(1, 2, 4), uint16], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64], Tensor[(16, 13, 10), uint32], Tensor[(16, 13, 10), float64]) */;
  %929 = @func_398(%907) /* ty=Tensor[(5, 1, 13), float32] */;
  %930 = %913.0;
  %931 = bitwise_or(%918, %919) /* ty=Tensor[(13, 12, 3), uint8] */;
  %932 = cos(%923) /* ty=Tensor[(13, 12, 3), float64] */;
  %933 = %928.8;
  (%929, meta[relay.Constant][73] /* ty=Tensor[(65), float32] */, %910, meta[relay.Constant][74] /* ty=Tensor[(256), float64] */, %930, %931, %932, %933, meta[relay.Constant][75] /* ty=Tensor[(8), uint16] */)
}

def @func_4086() -> Tensor[(11, 4, 10), float64] {
  %934 = @func_3868() /* ty=Tensor[(11, 4, 10), int32] */;
  %935 = cast(%934, dtype="float64") /* ty=Tensor[(11, 4, 10), float64] */;
  cosh(%935) /* ty=Tensor[(11, 4, 10), float64] */
}

def @func_3394() -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32]) {
  %936 = @func_3244() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %937 = @func_3244() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %938 = %936.0;
  %939 = %937.0;
  (%938, %939)
}

def @func_4313() -> Tensor[(11, 4, 10), uint16] {
  %940 = @func_3566() /* ty=Tensor[(11, 4, 10), int32] */;
  %941 = cast(meta[relay.Constant][76] /* ty=Tensor[(11, 4, 10), int32] */, dtype="uint16") /* ty=Tensor[(11, 4, 10), uint16] */;
  %942 = shape_of(%940, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%940, dtype="uint16") /* ty=Tensor[(11, 4, 10), uint16] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  logical_xor(%943, %944) /* ty=Tensor[(11, 4, 10), uint16] */
}

def @func_6767() -> (Tensor[(11, 4, 10), int32],) {
  %945 = @func_5382() /* ty=Tensor[(11, 4, 10), int32] */;
  (%945,)
}

def @func_8029(%var_8006: Tensor[(2400), float32]) -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(2400), float32], Tensor[(16, 3, 14), float64], Tensor[(2, 1200), float32], Tensor[(11, 4, 10), float64], Tensor[(154), uint32]) {
  %946 = @func_3394() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32]) */;
  %947 = @func_7899() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %948 = @func_5858() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), float64]) */;
  %949 = @func_5585() /* ty=(Tensor[(16, 3, 14), float64],) */;
  %950 = cast(%var_8006, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %951 = reshape(%950, newshape=[2, 1200]) /* ty=Tensor[(2, 1200), float32] */;
  %952 = @func_5189(%951) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(16, 15, 10), float32], Tensor[(2, 1200), float64]) */;
  %953 = %952.2;
  %954 = cast(%953, dtype="float32") /* ty=Tensor[(2, 1200), float32] */;
  %955 = cast(meta[relay.Constant][77] /* ty=Tensor[(154), uint32] */, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %956 = reshape(%955, newshape=[154]) /* ty=Tensor[(154), uint32] */;
  %957 = @func_5236(%956) /* ty=(Tensor[(11, 4, 10), float64], Tensor[(7, 11, 2), bool], Tensor[(7, 28), uint64], Tensor[(154), uint32], Tensor[(5, 1, 13), float32], Tensor[(65), float32]) */;
  %958 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
  %959 = %946.1;
  %960 = %947.0;
  %961 = %948.0;
  %962 = %949.0;
  %963 = asinh(%954) /* ty=Tensor[(2, 1200), float32] */;
  %964 = %957.0;
  (%958, %959, %960, %961, %var_8006, %962, %963, %964, meta[relay.Constant][77] /* ty=Tensor[(154), uint32] */)
}

def @func_4575(%var_4531: Tensor[(5, 13, 7), float64], %var_4535: Tensor[(1008), float64], %var_4545: Tensor[(36, 14), float64]) -> (Tensor[(5, 13, 7), float64], Tensor[(6, 12, 14), float64], Tensor[(1008), float64], uint16, Tensor[(36, 14), float64], uint16, Tensor[(8), uint16], Tensor[(11, 4, 10), bool], Tensor[(2400), float32], Tensor[(440), float32], Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16]) {
  %965 = cast(%var_4531, dtype="float64") /* ty=Tensor[(5, 13, 7), float64] */;
  %966 = cast(%var_4535, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %967 = cast(%var_4535, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %968 = reshape(%966, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), float64] */;
  %969 = reshape(%967, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), float64] */;
  %970 = cast(%var_4545, dtype="float64") /* ty=Tensor[(36, 14), float64] */;
  %971 = cast(%var_4545, dtype="float64") /* ty=Tensor[(36, 14), float64] */;
  %972 = cast(meta[relay.Constant][78] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %973 = cast(meta[relay.Constant][79] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %974 = reshape(%970, newshape=[8, 9, 7]) /* ty=Tensor[(8, 9, 7), float64] */;
  %975 = reshape(%971, newshape=[8, 9, 7]) /* ty=Tensor[(8, 9, 7), float64] */;
  %976 = reshape(%972, newshape=[]) /* ty=uint16 */;
  %977 = reshape(%973, newshape=[8]) /* ty=Tensor[(8), uint16] */;
  %978 = @func_1202(%974, %975, %976, %977) /* ty=(Tensor[(8, 9, 7), bool], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) */;
  %979 = cast(meta[relay.Constant][80] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %980 = cast(meta[relay.Constant][81] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
  %981 = reshape(%979, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %982 = reshape(%980, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float32] */;
  %983 = @func_3486(%981, %982) /* ty=(Tensor[(16, 15, 10), float32], Tensor[(2400), float32], Tensor[(11, 4, 10), bool]) */;
  %984 = cast(%var_4545, dtype="float64") /* ty=Tensor[(36, 14), float64] */;
  %985 = cast(%var_4545, dtype="float64") /* ty=Tensor[(36, 14), float64] */;
  %986 = %978.2;
  %987 = cast(%986, dtype="uint16") /* ty=uint16 */;
  %988 = cast(meta[relay.Constant][79] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %989 = reshape(%984, newshape=[8, 9, 7]) /* ty=Tensor[(8, 9, 7), float64] */;
  %990 = reshape(%985, newshape=[8, 9, 7]) /* ty=Tensor[(8, 9, 7), float64] */;
  %991 = reshape(%987, newshape=[]) /* ty=uint16 */;
  %992 = reshape(%988, newshape=[8]) /* ty=Tensor[(8), uint16] */;
  %993 = @func_1202(%989, %990, %991, %992) /* ty=(Tensor[(8, 9, 7), bool], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) */;
  %994 = sin(%965) /* ty=Tensor[(5, 13, 7), float64] */;
  %995 = @func_3212(%968, %969) /* ty=Tensor[(6, 12, 14), float64] */;
  %996 = %983.2;
  %997 = @func_4392() /* ty=Tensor[(11, 4, 10), float32] */;
  %998 = %993.1;
  (%994, %995, %var_4535, %986, %var_4545, meta[relay.Constant][78] /* ty=uint16 */, meta[relay.Constant][79] /* ty=Tensor[(8), uint16] */, %996, meta[relay.Constant][80] /* ty=Tensor[(2400), float32] */, meta[relay.Constant][81] /* ty=Tensor[(440), float32] */, %997, %998)
}

def @func_398(%var_389: Tensor[(5, 1, 13), float32]) -> Tensor[(5, 1, 13), float32] {
  %999 = cast(%var_389, dtype="float32") /* ty=Tensor[(5, 1, 13), float32] */;
  log10(%999) /* ty=Tensor[(5, 1, 13), float32] */
}

def @func_7495(%var_7481: Tensor[(4, 6, 1), float64]) -> (Tensor[(70), uint32], Tensor[(385), float32], Tensor[(7, 10), uint32], Tensor[(4, 6, 1), float32]) {
  %1000 = cast(meta[relay.Constant][82] /* ty=Tensor[(385), float32] */, dtype="float32") /* ty=Tensor[(385), float32] */;
  %1001 = cast(meta[relay.Constant][83] /* ty=Tensor[(7, 10), uint32] */, dtype="uint32") /* ty=Tensor[(7, 10), uint32] */;
  %1002 = reshape(%1000, newshape=[11, 7, 5]) /* ty=Tensor[(11, 7, 5), float32] */;
  %1003 = reshape(%1001, newshape=[70]) /* ty=Tensor[(70), uint32] */;
  %1004 = @func_4153(%1002, %1003) /* ty=(Tensor[(11, 7, 5), float32], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32]) */;
  %1005 = cast(%var_7481, dtype="float64") /* ty=Tensor[(4, 6, 1), float64] */;
  %1006 = sigmoid(%1005) /* ty=Tensor[(4, 6, 1), float64] */;
  %1007 = cast(%1006, dtype="float32") /* ty=Tensor[(4, 6, 1), float32] */;
  %1008 = %1004.3;
  %1009 = sqrt(%1007) /* ty=Tensor[(4, 6, 1), float32] */;
  (%1008, meta[relay.Constant][82] /* ty=Tensor[(385), float32] */, meta[relay.Constant][83] /* ty=Tensor[(7, 10), uint32] */, %1009)
}

def @func_6565() -> (Tensor[(8), uint16],) {
  %1010 = @func_6044() /* ty=(Tensor[(8), uint16],) */;
  %1011 = %1010.0;
  (%1011,)
}

def @func_9044(%var_9041: Tensor[(196), uint64], %var_9042: Tensor[(1, 154), uint32]) -> (Tensor[(16, 3, 14), float64], Tensor[(196), uint64], Tensor[(196), uint64], Tensor[(1, 154), uint32]) {
  %1012 = @func_8856() /* ty=(Tensor[(16, 3, 14), float64],) */;
  %1013 = cast(%var_9041, dtype="uint64") /* ty=Tensor[(196), uint64] */;
  %1014 = cast(%var_9042, dtype="uint32") /* ty=Tensor[(1, 154), uint32] */;
  %1015 = reshape(%1013, newshape=[196]) /* ty=Tensor[(196), uint64] */;
  %1016 = reshape(%1014, newshape=[154]) /* ty=Tensor[(154), uint32] */;
  %1017 = @func_6287(%1015, %1016) /* ty=(Tensor[(11, 4, 10), float64], Tensor[(4, 16, 4), int64], Tensor[(196), uint64], Tensor[(154), uint32]) */;
  %1018 = %1012.0;
  %1019 = %1017.2;
  (%1018, %1019, %var_9041, %var_9042)
}

def @func_7641(%var_7635: Tensor[(4, 5, 13), uint32]) -> Tensor[(4, 5, 13), bool] {
  %1020 = cast(meta[relay.Constant][84] /* ty=Tensor[(4, 5, 13), uint32] */, dtype="bool") /* ty=Tensor[(4, 5, 13), bool] */;
  %1021 = shape_of(%var_7635, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1022 = cast(%var_7635, dtype="bool") /* ty=Tensor[(4, 5, 13), bool] */;
  %1023 = dyn.reshape(%1020, %1021, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%1022, %1023) /* ty=Tensor[(4, 5, 13), bool] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6287(%var_6271: Tensor[(196), uint64], %var_6272: Tensor[(154), uint32]) -> (Tensor[(11, 4, 10), float64], Tensor[(4, 16, 4), int64], Tensor[(196), uint64], Tensor[(154), uint32]) {
  %0 = cast(%var_6271, dtype="uint64") /* ty=Tensor[(196), uint64] */;
  %1 = cast(%var_6271, dtype="uint64") /* ty=Tensor[(196), uint64] */;
  %2 = cast(%var_6272, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %3 = reshape(%0, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), uint64] */;
  %4 = reshape(%1, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), uint64] */;
  %5 = reshape(%2, newshape=[154]) /* ty=Tensor[(154), uint32] */;
  %6 = @func_2290(%3, %4, %5) /* ty=(Tensor[(4, 7, 7), uint64], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(1, 256), float64]) */;
  %7 = @func_4086() /* ty=Tensor[(11, 4, 10), float64] */;
  %8 = %6.4;
  (%7, %8, %var_6271, %var_6272)
}

def @func_1679(%var_1673: Tensor[(13, 7, 9), float64]) -> Tensor[(13, 7, 9), float64] {
  %9 = cast(%var_1673, dtype="float64") /* ty=Tensor[(13, 7, 9), float64] */;
  atan(%9) /* ty=Tensor[(13, 7, 9), float64] */
}

def @func_6496(%var_6494: Tensor[(2400), float32]) -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(2400), float32], Tensor[(11, 4, 10), float64]) {
  @func_6493(%var_6494) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(2400), float32], Tensor[(11, 4, 10), float64]) */
}

def @func_5762() -> (Tensor[(11, 4, 10), float32], Tensor[(2, 1200), bool]) {
  %10 = @func_3299() /* ty=(Tensor[(11, 4, 10), float32],) */;
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %12 = reshape(%11, newshape=[2, 1200]) /* ty=Tensor[(2, 1200), float32] */;
  %13 = @func_5189(%12) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(16, 15, 10), float32], Tensor[(2, 1200), float64]) */;
  %14 = %13.2;
  %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(2400), float32] */, dtype="bool") /* ty=Tensor[(2400), bool] */;
  %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(2), int32] */;
  %17 = cast(%14, dtype="bool") /* ty=Tensor[(2, 1200), bool] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %19 = %10.0;
  %20 = less(%17, %18) /* ty=Tensor[(2, 1200), bool] */;
  (%19, %20)
}

def @func_3623() -> (Tensor[(11, 4, 10), int32],) {
  @func_3621() /* ty=(Tensor[(11, 4, 10), int32],) */
}

def @func_6148() -> Tensor[(16, 3, 14), float64] {
  @func_6146() /* ty=Tensor[(16, 3, 14), float64] */
}

def @func_5909(%var_5908: Tensor[(560, 1), uint8]) -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(14, 4, 10), bool], Tensor[(560, 1), uint8], Tensor[(65), float32], Tensor[(154), uint32], Tensor[(5, 1, 13), float32]) {
  %37 = fn (%var_5881: Tensor[(560, 1), uint8]) -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(14, 4, 10), bool], Tensor[(560, 1), uint8], Tensor[(65), float32], Tensor[(154), uint32], Tensor[(5, 1, 13), float32]) {
    %21 = @func_3244() /* ty=(Tensor[(11, 4, 10), int32],) */;
    %22 = cast(%var_5881, dtype="uint8") /* ty=Tensor[(560, 1), uint8] */;
    %23 = cast(%var_5881, dtype="uint8") /* ty=Tensor[(560, 1), uint8] */;
    %24 = reshape(%22, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), uint8] */;
    %25 = reshape(%23, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), uint8] */;
    %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(154), uint32] */, dtype="uint32") /* ty=Tensor[(154), uint32] */;
    %27 = reshape(%26, newshape=[154]) /* ty=Tensor[(154), uint32] */;
    %28 = @func_5236(%27) /* ty=(Tensor[(11, 4, 10), float64], Tensor[(7, 11, 2), bool], Tensor[(7, 28), uint64], Tensor[(154), uint32], Tensor[(5, 1, 13), float32], Tensor[(65), float32]) */;
    %29 = cast(meta[relay.Constant][1] /* ty=Tensor[(154), uint32] */, dtype="uint32") /* ty=Tensor[(154), uint32] */;
    %30 = reshape(%29, newshape=[154]) /* ty=Tensor[(154), uint32] */;
    %31 = @func_5236(%30) /* ty=(Tensor[(11, 4, 10), float64], Tensor[(7, 11, 2), bool], Tensor[(7, 28), uint64], Tensor[(154), uint32], Tensor[(5, 1, 13), float32], Tensor[(65), float32]) */;
    %32 = %21.0;
    %33 = @func_5382() /* ty=Tensor[(11, 4, 10), int32] */;
    %34 = @func_5087(%24, %25) /* ty=Tensor[(14, 4, 10), bool] */;
    %35 = %28.5;
    %36 = %31.4;
    (%32, %33, %34, %var_5881, %35, meta[relay.Constant][1] /* ty=Tensor[(154), uint32] */, %36)
  };
  %37(%var_5908) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(14, 4, 10), bool], Tensor[(560, 1), uint8], Tensor[(65), float32], Tensor[(154), uint32], Tensor[(5, 1, 13), float32]) */
}

def @func_7029() -> (Tensor[(5, 9, 11), int32],) {
  %38 = @func_6973() /* ty=(Tensor[(5, 9, 11), int32], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16], Tensor[(11, 4, 10), float32], Tensor[(11, 4, 10), int32], Tensor[(8), uint16]) */;
  %39 = %38.0;
  (%39,)
}

def @func_3212(%var_3207: Tensor[(6, 12, 14), float64], %var_3208: Tensor[(6, 12, 14), float64]) -> Tensor[(6, 12, 14), float64] {
  %40 = cast(%var_3208, dtype="float64") /* ty=Tensor[(6, 12, 14), float64] */;
  %41 = shape_of(%var_3207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%var_3207, dtype="float64") /* ty=Tensor[(6, 12, 14), float64] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%42, %43) /* ty=Tensor[(6, 12, 14), float64] */
}

def @func_7644(%var_7642: Tensor[(4, 5, 13), uint32]) -> Tensor[(4, 5, 13), bool] {
  @func_7641(%var_7642) /* ty=Tensor[(4, 5, 13), bool] */
}

def @func_4394() -> Tensor[(11, 4, 10), float32] {
  @func_4392() /* ty=Tensor[(11, 4, 10), float32] */
}

def @func_5586() -> (Tensor[(16, 3, 14), float64],) {
  %45 = fn () -> (Tensor[(16, 3, 14), float64],) {
    %44 = @func_5243() /* ty=Tensor[(16, 3, 14), float64] */;
    (%44,)
  };
  %45() /* ty=(Tensor[(16, 3, 14), float64],) */
}

def @func_6974() -> (Tensor[(5, 9, 11), int32], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16], Tensor[(11, 4, 10), float32], Tensor[(11, 4, 10), int32], Tensor[(8), uint16]) {
  %60 = fn () -> (Tensor[(5, 9, 11), int32], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16], Tensor[(11, 4, 10), float32], Tensor[(11, 4, 10), int32], Tensor[(8), uint16]) {
    %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(495), int32] */, dtype="int32") /* ty=Tensor[(495), int32] */;
    %47 = cast(meta[relay.Constant][3] /* ty=Tensor[(154), uint32] */, dtype="uint32") /* ty=Tensor[(154), uint32] */;
    %48 = cast(meta[relay.Constant][4] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
    %49 = reshape(%46, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), int32] */;
    %50 = reshape(%47, newshape=[22, 7]) /* ty=Tensor[(22, 7), uint32] */;
    %51 = reshape(%48, newshape=[8]) /* ty=Tensor[(8), uint16] */;
    %52 = @func_3737(%49, %50, %51) /* ty=(Tensor[(5, 9, 11), int32], Tensor[(1, 256), float64], Tensor[(196), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(22, 7), bool], Tensor[(4, 16, 4), int64]) */;
    %53 = @func_5382() /* ty=Tensor[(11, 4, 10), int32] */;
    %54 = cast(%53, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
    %55 = @func_6565() /* ty=(Tensor[(8), uint16],) */;
    %56 = %52.0;
    %57 = cos(%54) /* ty=Tensor[(11, 4, 10), float32] */;
    %58 = @func_4168() /* ty=Tensor[(11, 4, 10), int32] */;
    %59 = %55.0;
    (%56, meta[relay.Constant][2] /* ty=Tensor[(495), int32] */, meta[relay.Constant][3] /* ty=Tensor[(154), uint32] */, meta[relay.Constant][4] /* ty=Tensor[(8), uint16] */, %57, %58, %59)
  };
  %60() /* ty=(Tensor[(5, 9, 11), int32], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16], Tensor[(11, 4, 10), float32], Tensor[(11, 4, 10), int32], Tensor[(8), uint16]) */
}

def @func_6246() -> (Tensor[(11, 3, 6), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 3, 2400), float32], Tensor[(2400), float32], Tensor[(16, 15, 10), float64]) {
  @func_6244() /* ty=(Tensor[(11, 3, 6), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 3, 2400), float32], Tensor[(2400), float32], Tensor[(16, 15, 10), float64]) */
}

def @func_7608() -> (Tensor[(11, 4, 10), uint16], Tensor[(11, 4, 10), float64]) {
  @func_7606() /* ty=(Tensor[(11, 4, 10), uint16], Tensor[(11, 4, 10), float64]) */
}

def @func_8031(%var_8030: Tensor[(2400), float32]) -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(2400), float32], Tensor[(16, 3, 14), float64], Tensor[(2, 1200), float32], Tensor[(11, 4, 10), float64], Tensor[(154), uint32]) {
  %80 = fn (%var_8006: Tensor[(2400), float32]) -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(2400), float32], Tensor[(16, 3, 14), float64], Tensor[(2, 1200), float32], Tensor[(11, 4, 10), float64], Tensor[(154), uint32]) {
    %61 = @func_3394() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32]) */;
    %62 = @func_7899() /* ty=(Tensor[(11, 4, 10), int32],) */;
    %63 = @func_5858() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), float64]) */;
    %64 = @func_5585() /* ty=(Tensor[(16, 3, 14), float64],) */;
    %65 = cast(%var_8006, dtype="float32") /* ty=Tensor[(2400), float32] */;
    %66 = reshape(%65, newshape=[2, 1200]) /* ty=Tensor[(2, 1200), float32] */;
    %67 = @func_5189(%66) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(16, 15, 10), float32], Tensor[(2, 1200), float64]) */;
    %68 = %67.2;
    %69 = cast(%68, dtype="float32") /* ty=Tensor[(2, 1200), float32] */;
    %70 = cast(meta[relay.Constant][5] /* ty=Tensor[(154), uint32] */, dtype="uint32") /* ty=Tensor[(154), uint32] */;
    %71 = reshape(%70, newshape=[154]) /* ty=Tensor[(154), uint32] */;
    %72 = @func_5236(%71) /* ty=(Tensor[(11, 4, 10), float64], Tensor[(7, 11, 2), bool], Tensor[(7, 28), uint64], Tensor[(154), uint32], Tensor[(5, 1, 13), float32], Tensor[(65), float32]) */;
    %73 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
    %74 = %61.1;
    %75 = %62.0;
    %76 = %63.0;
    %77 = %64.0;
    %78 = asinh(%69) /* ty=Tensor[(2, 1200), float32] */;
    %79 = %72.0;
    (%73, %74, %75, %76, %var_8006, %77, %78, %79, meta[relay.Constant][5] /* ty=Tensor[(154), uint32] */)
  };
  %80(%var_8030) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(2400), float32], Tensor[(16, 3, 14), float64], Tensor[(2, 1200), float32], Tensor[(11, 4, 10), float64], Tensor[(154), uint32]) */
}

def @func_5436() -> Tensor[(11, 4, 10), int32] {
  @func_5434() /* ty=Tensor[(11, 4, 10), int32] */
}

def @func_8237(%var_8209: Tensor[(7, 11, 7), int16], %var_8224: Tensor[(1, 560), uint8]) -> (Tensor[(7, 11, 7), float64], Tensor[(11, 1, 9), uint32], uint16, Tensor[(1, 560), uint8]) {
  %81 = cast(%var_8209, dtype="int16") /* ty=Tensor[(7, 11, 7), int16] */;
  %82 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(7, 11, 7), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(meta[relay.Constant][6] /* ty=Tensor[(7, 11, 7), int16] */, dtype="int16") /* ty=Tensor[(7, 11, 7), int16] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %85 = bitwise_and(%83, %84) /* ty=Tensor[(7, 11, 7), int16] */;
  %86 = cast(%85, dtype="float64") /* ty=Tensor[(7, 11, 7), float64] */;
  %87 = cast(meta[relay.Constant][7] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %88 = cast(%var_8224, dtype="uint8") /* ty=Tensor[(1, 560), uint8] */;
  %89 = reshape(%87, newshape=[]) /* ty=uint16 */;
  %90 = reshape(%88, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %91 = @func_6124(%89, %90) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], uint16, Tensor[(2, 1200), bool], Tensor[(1, 2, 4), uint16], Tensor[(1, 99), float64], Tensor[(1, 2, 4), uint16], Tensor[(11, 1, 9), uint32], Tensor[(14, 4, 10), bool], Tensor[(560), uint8]) */;
  %92 = sigmoid(%86) /* ty=Tensor[(7, 11, 7), float64] */;
  %93 = %91.8;
  (%92, %93, meta[relay.Constant][7] /* ty=uint16 */, %var_8224)
}

def @func_8539(%var_8538: Tensor[(10, 16, 12), float64]) -> (Tensor[(10, 16, 12), bool],) {
  %108 = fn (%var_8509: Tensor[(10, 16, 12), float64]) -> (Tensor[(10, 16, 12), bool],) {
    %94 = cast(%var_8509, dtype="float64") /* ty=Tensor[(10, 16, 12), float64] */;
    %95 = acosh(%94) /* ty=Tensor[(10, 16, 12), float64] */;
    %96 = cast(%var_8509, dtype="bool") /* ty=Tensor[(10, 16, 12), bool] */;
    %97 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
    %98 = cast(%95, dtype="bool") /* ty=Tensor[(10, 16, 12), bool] */;
    %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %100 = logical_and(%98, %99) /* ty=Tensor[(10, 16, 12), bool] */;
    %101 = cast(%100, dtype="float64") /* ty=Tensor[(10, 16, 12), float64] */;
    %102 = log2(%101) /* ty=Tensor[(10, 16, 12), float64] */;
    %103 = cast(%100, dtype="bool") /* ty=Tensor[(10, 16, 12), bool] */;
    %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
    %105 = cast(%102, dtype="bool") /* ty=Tensor[(10, 16, 12), bool] */;
    %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %107 = not_equal(%105, %106) /* ty=Tensor[(10, 16, 12), bool] */;
    (%107,)
  };
  %108(%var_8538) /* ty=(Tensor[(10, 16, 12), bool],) */
}

def @func_215(%var_213: uint16, %var_214: Tensor[(1, 2, 4), uint16]) -> Tensor[(1, 2, 4), uint16] {
  @func_211(%var_213, %var_214) /* ty=Tensor[(1, 2, 4), uint16] */
}

def @func_3977() -> Tensor[(11, 4, 10), int32] {
  %110 = fn () -> Tensor[(11, 4, 10), int32] {
    %109 = @func_3821() /* ty=(Tensor[(11, 4, 10), int32],) */;
    %109.0
  };
  %110() /* ty=Tensor[(11, 4, 10), int32] */
}

def @func_7071(%var_7058: uint16) -> (Tensor[(11, 4, 10), int32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) {
  %111 = @func_4250() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %112 = cast(%var_7058, dtype="uint16") /* ty=uint16 */;
  %113 = cast(meta[relay.Constant][8] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %114 = reshape(%112, newshape=[]) /* ty=uint16 */;
  %115 = reshape(%113, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %116 = %111.0;
  %117 = @func_211(%114, %115) /* ty=Tensor[(1, 2, 4), uint16] */;
  (%116, %117, %var_7058, meta[relay.Constant][8] /* ty=Tensor[(8), uint16] */)
}

def @func_4470(%var_4468: Tensor[(495), int32], %var_4469: Tensor[(154), uint32]) -> (Tensor[(11, 4, 10), int32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16]) {
  @func_4466(%var_4468, %var_4469) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16]) */
}

def @func_5238(%var_5237: Tensor[(154), uint32]) -> (Tensor[(11, 4, 10), float64], Tensor[(7, 11, 2), bool], Tensor[(7, 28), uint64], Tensor[(154), uint32], Tensor[(5, 1, 13), float32], Tensor[(65), float32]) {
  %133 = fn (%var_5229: Tensor[(154), uint32]) -> (Tensor[(11, 4, 10), float64], Tensor[(7, 11, 2), bool], Tensor[(7, 28), uint64], Tensor[(154), uint32], Tensor[(5, 1, 13), float32], Tensor[(65), float32]) {
    %118 = @func_3299() /* ty=(Tensor[(11, 4, 10), float32],) */;
    %119 = %118.0;
    %120 = cast(%119, dtype="float64") /* ty=Tensor[(11, 4, 10), float64] */;
    %121 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 28), uint64] */, dtype="uint64") /* ty=Tensor[(7, 28), uint64] */;
    %122 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 28), uint64] */, dtype="uint64") /* ty=Tensor[(7, 28), uint64] */;
    %123 = cast(%var_5229, dtype="uint32") /* ty=Tensor[(154), uint32] */;
    %124 = reshape(%121, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), uint64] */;
    %125 = reshape(%122, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), uint64] */;
    %126 = reshape(%123, newshape=[154]) /* ty=Tensor[(154), uint32] */;
    %127 = @func_2290(%124, %125, %126) /* ty=(Tensor[(4, 7, 7), uint64], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(1, 256), float64]) */;
    %128 = cast(meta[relay.Constant][10] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
    %129 = reshape(%128, newshape=[5, 1, 13]) /* ty=Tensor[(5, 1, 13), float32] */;
    %130 = sin(%120) /* ty=Tensor[(11, 4, 10), float64] */;
    %131 = %127.1;
    %132 = @func_398(%129) /* ty=Tensor[(5, 1, 13), float32] */;
    (%130, %131, meta[relay.Constant][9] /* ty=Tensor[(7, 28), uint64] */, %var_5229, %132, meta[relay.Constant][10] /* ty=Tensor[(65), float32] */)
  };
  %133(%var_5237) /* ty=(Tensor[(11, 4, 10), float64], Tensor[(7, 11, 2), bool], Tensor[(7, 28), uint64], Tensor[(154), uint32], Tensor[(5, 1, 13), float32], Tensor[(65), float32]) */
}

def @func_4117(%var_4115: Tensor[(7, 11, 1), uint32], %var_4116: Tensor[(7, 11, 7), uint32]) -> (Tensor[(7, 11, 7), uint32],) {
  @func_4113(%var_4115, %var_4116) /* ty=(Tensor[(7, 11, 7), uint32],) */
}

def @func_5302(%var_5299: Tensor[(8), uint16], %var_5300: Tensor[(256), float64], %var_5301: Tensor[(4, 16, 4), int64]) -> (Tensor[(11, 4, 10), int32], Tensor[(7, 5, 2), uint32], uint32, Tensor[(70), uint32], Tensor[(8), uint16], Tensor[(256), float64], Tensor[(4, 16, 4), float32], Tensor[(4, 16, 4), bool], Tensor[(4, 16, 4), int64]) {
  %161 = fn (%var_5271: Tensor[(8), uint16], %var_5272: Tensor[(256), float64], %var_5274: Tensor[(4, 16, 4), int64]) -> (Tensor[(11, 4, 10), int32], Tensor[(7, 5, 2), uint32], uint32, Tensor[(70), uint32], Tensor[(8), uint16], Tensor[(256), float64], Tensor[(4, 16, 4), float32], Tensor[(4, 16, 4), bool], Tensor[(4, 16, 4), int64]) {
    %134 = @func_3394() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32]) */;
    %135 = cast(meta[relay.Constant][11] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %136 = cast(meta[relay.Constant][12] /* ty=Tensor[(70), uint32] */, dtype="uint32") /* ty=Tensor[(70), uint32] */;
    %137 = reshape(%135, newshape=[]) /* ty=uint32 */;
    %138 = reshape(%136, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
    %139 = @func_125(%137, %138) /* ty=(Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64]) */;
    %140 = cast(%var_5271, dtype="uint16") /* ty=Tensor[(8), uint16] */;
    %141 = cast(%var_5272, dtype="float64") /* ty=Tensor[(256), float64] */;
    %142 = reshape(%140, newshape=[8]) /* ty=Tensor[(8), uint16] */;
    %143 = reshape(%141, newshape=[256]) /* ty=Tensor[(256), float64] */;
    %144 = @func_891(%142, %143) /* ty=(Tensor[(154, 1), uint32], Tensor[(70), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(1, 2, 4), uint16], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64], Tensor[(16, 13, 10), uint32], Tensor[(16, 13, 10), float64]) */;
    %145 = %144.5;
    %146 = cast(%var_5274, dtype="float32") /* ty=Tensor[(4, 16, 4), float32] */;
    %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
    %148 = cast(%145, dtype="float32") /* ty=Tensor[(4, 16, 4), float32] */;
    %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %150 = cast(%var_5274, dtype="bool") /* ty=Tensor[(4, 16, 4), bool] */;
    %151 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
    %152 = cast(%145, dtype="bool") /* ty=Tensor[(4, 16, 4), bool] */;
    %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %154 = mod(%148, %149) /* ty=Tensor[(4, 16, 4), float32] */;
    %155 = cast(%154, dtype="float64") /* ty=Tensor[(4, 16, 4), float64] */;
    %156 = reshape(%155, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float64] */;
    %157 = %134.0;
    %158 = %139.0;
    %159 = equal(%152, %153) /* ty=Tensor[(4, 16, 4), bool] */;
    %160 = @func_720(%156) /* ty=Tensor[(4, 16, 4), int64] */;
    (%157, %158, meta[relay.Constant][11] /* ty=uint32 */, meta[relay.Constant][12] /* ty=Tensor[(70), uint32] */, %var_5271, %var_5272, %154, %159, %160)
  };
  %161(%var_5299, %var_5300, %var_5301) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(7, 5, 2), uint32], uint32, Tensor[(70), uint32], Tensor[(8), uint16], Tensor[(256), float64], Tensor[(4, 16, 4), float32], Tensor[(4, 16, 4), bool], Tensor[(4, 16, 4), int64]) */
}

def @func_4889() -> Tensor[(11, 4, 10), uint16] {
  @func_4313() /* ty=Tensor[(11, 4, 10), uint16] */
}

def @func_5017(%var_4985: Tensor[(11, 4, 10), int32]) -> (Tensor[(11, 4, 10), bool], Tensor[(1248), float64], Tensor[(13, 12, 8), float64]) {
  %162 = @func_4168() /* ty=Tensor[(11, 4, 10), int32] */;
  %163 = cast(%var_4985, dtype="bool") /* ty=Tensor[(11, 4, 10), bool] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%162, dtype="bool") /* ty=Tensor[(11, 4, 10), bool] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %167 = cast(meta[relay.Constant][13] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %168 = reshape(%167, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), float64] */;
  %169 = @func_3803(%168) /* ty=(Tensor[(13, 12, 8), float64],) */;
  %170 = %169.0;
  %171 = cast(%170, dtype="float64") /* ty=Tensor[(13, 12, 8), float64] */;
  %172 = greater(%165, %166) /* ty=Tensor[(11, 4, 10), bool] */;
  %173 = asin(%171) /* ty=Tensor[(13, 12, 8), float64] */;
  (%172, meta[relay.Constant][13] /* ty=Tensor[(1248), float64] */, %173)
}

def @func_4328(%var_4322: Tensor[(1, 13, 12), float64]) -> Tensor[(1, 13, 12), float64] {
  %174 = cast(%var_4322, dtype="float64") /* ty=Tensor[(1, 13, 12), float64] */;
  sin(%174) /* ty=Tensor[(1, 13, 12), float64] */
}

def @func_8857() -> (Tensor[(16, 3, 14), float64],) {
  %177 = fn () -> (Tensor[(16, 3, 14), float64],) {
    %175 = @func_5254() /* ty=(Tensor[(16, 3, 14), float64],) */;
    %176 = %175.0;
    (%176,)
  };
  %177() /* ty=(Tensor[(16, 3, 14), float64],) */
}

def @func_495(%var_492: Tensor[(7, 11, 2), uint32], %var_493: Tensor[(7, 11, 2), uint32], %var_494: Tensor[(14, 5), uint32]) -> (Tensor[(7, 11, 2), bool], Tensor[(7, 5, 2), float64], uint32, Tensor[(14, 5), uint32]) {
  @func_490(%var_492, %var_493, %var_494) /* ty=(Tensor[(7, 11, 2), bool], Tensor[(7, 5, 2), float64], uint32, Tensor[(14, 5), uint32]) */
}

def @func_1682(%var_1680: Tensor[(13, 7, 9), float64]) -> Tensor[(13, 7, 9), float64] {
  @func_1679(%var_1680) /* ty=Tensor[(13, 7, 9), float64] */
}

def @func_3868() -> Tensor[(11, 4, 10), int32] {
  %178 = @func_3566() /* ty=Tensor[(11, 4, 10), int32] */;
  %179 = cast(%178, dtype="float64") /* ty=Tensor[(11, 4, 10), float64] */;
  %180 = asinh(%179) /* ty=Tensor[(11, 4, 10), float64] */;
  %181 = cast(%178, dtype="int32") /* ty=Tensor[(11, 4, 10), int32] */;
  %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%180, dtype="int32") /* ty=Tensor[(11, 4, 10), int32] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  right_shift(%183, %184) /* ty=Tensor[(11, 4, 10), int32] */
}

def @func_8712() -> Tensor[(16, 3, 14), float64] {
  %187 = fn () -> Tensor[(16, 3, 14), float64] {
    %185 = @func_6717() /* ty=Tensor[(16, 3, 14), float64] */;
    %186 = cast(%185, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
    log2(%186) /* ty=Tensor[(16, 3, 14), float64] */
  };
  %187() /* ty=Tensor[(16, 3, 14), float64] */
}

def @func_6124(%var_6086: uint16, %var_6121: Tensor[(560), uint8]) -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], uint16, Tensor[(2, 1200), bool], Tensor[(1, 2, 4), uint16], Tensor[(1, 99), float64], Tensor[(1, 2, 4), uint16], Tensor[(11, 1, 9), uint32], Tensor[(14, 4, 10), bool], Tensor[(560), uint8]) {
  %188 = @func_4250() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %189 = @func_3821() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %190 = cast(%var_6086, dtype="uint16") /* ty=uint16 */;
  %191 = reshape(%190, newshape=[]) /* ty=uint16 */;
  %192 = @func_4914(%191) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) */;
  %193 = @func_5762() /* ty=(Tensor[(11, 4, 10), float32], Tensor[(2, 1200), bool]) */;
  %194 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 99), float64] */, dtype="float64") /* ty=Tensor[(1, 99), float64] */;
  %195 = %193.1;
  %196 = cast(%195, dtype="float32") /* ty=Tensor[(2, 1200), float32] */;
  %197 = cast(%var_6086, dtype="uint16") /* ty=uint16 */;
  %198 = reshape(%194, newshape=[11, 1, 9]) /* ty=Tensor[(11, 1, 9), float64] */;
  %199 = reshape(%196, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %200 = reshape(%197, newshape=[]) /* ty=uint16 */;
  %201 = @func_3681(%198, %199, %200) /* ty=(Tensor[(2400), float32], Tensor[(2400), float32], Tensor[(1, 440), float32], Tensor[(1, 2, 4), uint16], Tensor[(1, 8), uint16], Tensor[(11, 1, 9), uint32]) */;
  %202 = cast(%var_6086, dtype="uint16") /* ty=uint16 */;
  %203 = %201.3;
  %204 = cast(%203, dtype="uint16") /* ty=Tensor[(1, 2, 4), uint16] */;
  %205 = reshape(%202, newshape=[]) /* ty=uint16 */;
  %206 = reshape(%204, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %207 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 99), float64] */, dtype="float64") /* ty=Tensor[(1, 99), float64] */;
  %208 = cast(%195, dtype="float32") /* ty=Tensor[(2, 1200), float32] */;
  %209 = cast(%var_6086, dtype="uint16") /* ty=uint16 */;
  %210 = reshape(%207, newshape=[11, 1, 9]) /* ty=Tensor[(11, 1, 9), float64] */;
  %211 = reshape(%208, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %212 = reshape(%209, newshape=[]) /* ty=uint16 */;
  %213 = @func_3681(%210, %211, %212) /* ty=(Tensor[(2400), float32], Tensor[(2400), float32], Tensor[(1, 440), float32], Tensor[(1, 2, 4), uint16], Tensor[(1, 8), uint16], Tensor[(11, 1, 9), uint32]) */;
  %214 = cast(%var_6121, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %215 = cast(%var_6121, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %216 = reshape(%214, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), uint8] */;
  %217 = reshape(%215, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), uint8] */;
  %218 = %188.0;
  %219 = %189.0;
  %220 = %192.0;
  %221 = @func_211(%205, %206) /* ty=Tensor[(1, 2, 4), uint16] */;
  %222 = %213.5;
  %223 = @func_5087(%216, %217) /* ty=Tensor[(14, 4, 10), bool] */;
  (%218, %219, %220, %var_6086, %195, %203, meta[relay.Constant][14] /* ty=Tensor[(1, 99), float64] */, %221, %222, %223, %var_6121)
}

def @func_4392() -> Tensor[(11, 4, 10), float32] {
  %224 = @func_3566() /* ty=Tensor[(11, 4, 10), int32] */;
  %225 = cast(%224, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
  log10(%225) /* ty=Tensor[(11, 4, 10), float32] */
}

def @func_895(%var_893: Tensor[(8), uint16], %var_894: Tensor[(256), float64]) -> (Tensor[(154, 1), uint32], Tensor[(70), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(1, 2, 4), uint16], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64], Tensor[(16, 13, 10), uint32], Tensor[(16, 13, 10), float64]) {
  @func_891(%var_893, %var_894) /* ty=(Tensor[(154, 1), uint32], Tensor[(70), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(1, 2, 4), uint16], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64], Tensor[(16, 13, 10), uint32], Tensor[(16, 13, 10), float64]) */
}

def @func_3737(%var_3703: Tensor[(5, 9, 11), int32], %var_3711: Tensor[(22, 7), uint32], %var_3714: Tensor[(8), uint16]) -> (Tensor[(5, 9, 11), int32], Tensor[(1, 256), float64], Tensor[(196), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(22, 7), bool], Tensor[(4, 16, 4), int64]) {
  %226 = cast(4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %227 = cast(%var_3703, dtype="int32") /* ty=Tensor[(5, 9, 11), int32] */;
  %228 = cast(meta[relay.Constant][15] /* ty=Tensor[(196), uint64] */, dtype="uint64") /* ty=Tensor[(196), uint64] */;
  %229 = cast(meta[relay.Constant][15] /* ty=Tensor[(196), uint64] */, dtype="uint64") /* ty=Tensor[(196), uint64] */;
  %230 = cast(%var_3711, dtype="uint32") /* ty=Tensor[(22, 7), uint32] */;
  %231 = reshape(%228, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), uint64] */;
  %232 = reshape(%229, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), uint64] */;
  %233 = reshape(%230, newshape=[154]) /* ty=Tensor[(154), uint32] */;
  %234 = @func_2290(%231, %232, %233) /* ty=(Tensor[(4, 7, 7), uint64], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(1, 256), float64]) */;
  %235 = cast(4 /* ty=int32 */, dtype="uint16") /* ty=uint16 */;
  %236 = cast(%var_3714, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %237 = reshape(%235, newshape=[]) /* ty=uint16 */;
  %238 = reshape(%236, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %239 = cast(4 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %240 = cast(%var_3711, dtype="bool") /* ty=Tensor[(22, 7), bool] */;
  %241 = %234.5;
  %242 = cast(%241, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %243 = reshape(%242, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float64] */;
  %244 = right_shift(%226, %227) /* ty=Tensor[(5, 9, 11), int32] */;
  %245 = @func_211(%237, %238) /* ty=Tensor[(1, 2, 4), uint16] */;
  %246 = less_equal(%239, %240) /* ty=Tensor[(22, 7), bool] */;
  %247 = @func_720(%243) /* ty=Tensor[(4, 16, 4), int64] */;
  (%244, %241, meta[relay.Constant][15] /* ty=Tensor[(196), uint64] */, %245, %var_3714, %246, %247)
}

def @func_4466(%var_4458: Tensor[(495), int32], %var_4459: Tensor[(154), uint32]) -> (Tensor[(11, 4, 10), int32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16]) {
  %248 = cast(meta[relay.Constant][16] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %249 = reshape(%248, newshape=[16, 16]) /* ty=Tensor[(16, 16), float32] */;
  %250 = @func_2511(%249) /* ty=(Tensor[(16, 16), float32], Tensor[(4, 16, 4), bool]) */;
  %251 = cast(%var_4458, dtype="int32") /* ty=Tensor[(495), int32] */;
  %252 = cast(%var_4459, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %253 = cast(meta[relay.Constant][17] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %254 = reshape(%251, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), int32] */;
  %255 = reshape(%252, newshape=[22, 7]) /* ty=Tensor[(22, 7), uint32] */;
  %256 = reshape(%253, newshape=[8]) /* ty=Tensor[(8), uint16] */;
  %257 = @func_3737(%254, %255, %256) /* ty=(Tensor[(5, 9, 11), int32], Tensor[(1, 256), float64], Tensor[(196), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(22, 7), bool], Tensor[(4, 16, 4), int64]) */;
  %258 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
  %259 = %250.0;
  %260 = %257.6;
  (%258, %259, meta[relay.Constant][16] /* ty=Tensor[(256), float32] */, %260, %var_4458, %var_4459, meta[relay.Constant][17] /* ty=Tensor[(8), uint16] */)
}

def @func_6024() -> (Tensor[(11, 4, 10), uint16],) {
  %262 = fn () -> (Tensor[(11, 4, 10), uint16],) {
    %261 = @func_4313() /* ty=Tensor[(11, 4, 10), uint16] */;
    (%261,)
  };
  %262() /* ty=(Tensor[(11, 4, 10), uint16],) */
}

def @func_7031() -> (Tensor[(5, 9, 11), int32],) {
  @func_7029() /* ty=(Tensor[(5, 9, 11), int32],) */
}

def @func_8399(%var_8394: Tensor[(8), uint16], %var_8395: Tensor[(16, 3, 14), bool], %var_8396: Tensor[(495), int32], %var_8397: Tensor[(154, 1), uint32], %var_8398: Tensor[(819), float64]) -> (Tensor[(11, 4, 10), int32], uint32, Tensor[(8), uint16], Tensor[(256), float64], Tensor[(14, 4, 10), bool], Tensor[(560), uint8], Tensor[(672), float64], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), uint16], Tensor[(11, 4, 10), float32], Tensor[(11, 4, 10), int32], Tensor[(495), int32], Tensor[(16, 3, 14), uint16], Tensor[(13, 7, 9), float64], Tensor[(154, 819), bool]) {
  %311 = fn (%var_8281: Tensor[(8), uint16], %var_8294: Tensor[(16, 3, 14), bool], %var_8335: Tensor[(495), int32], %var_8336: Tensor[(154, 1), uint32], %var_8364: Tensor[(819), float64]) -> (Tensor[(11, 4, 10), int32], uint32, Tensor[(8), uint16], Tensor[(256), float64], Tensor[(14, 4, 10), bool], Tensor[(560), uint8], Tensor[(672), float64], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), uint16], Tensor[(11, 4, 10), float32], Tensor[(11, 4, 10), int32], Tensor[(495), int32], Tensor[(16, 3, 14), uint16], Tensor[(13, 7, 9), float64], Tensor[(154, 819), bool]) {
    %263 = @func_4835() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(65), float32], Tensor[(91, 9), float64], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(11, 4, 10), float32]) */;
    %264 = cast(%var_8281, dtype="uint16") /* ty=Tensor[(8), uint16] */;
    %265 = cast(meta[relay.Constant][18] /* ty=Tensor[(256), float64] */, dtype="float64") /* ty=Tensor[(256), float64] */;
    %266 = cast(meta[relay.Constant][18] /* ty=Tensor[(256), float64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
    %267 = reshape(%264, newshape=[8]) /* ty=Tensor[(8), uint16] */;
    %268 = reshape(%265, newshape=[256]) /* ty=Tensor[(256), float64] */;
    %269 = reshape(%266, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), int64] */;
    %270 = @func_5298(%267, %268, %269) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(7, 5, 2), uint32], uint32, Tensor[(70), uint32], Tensor[(8), uint16], Tensor[(256), float64], Tensor[(4, 16, 4), float32], Tensor[(4, 16, 4), bool], Tensor[(4, 16, 4), int64]) */;
    %271 = cast(meta[relay.Constant][19] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
    %272 = cast(meta[relay.Constant][19] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
    %273 = reshape(%271, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), uint8] */;
    %274 = reshape(%272, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), uint8] */;
    %275 = cast(meta[relay.Constant][20] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
    %276 = @func_7815() /* ty=(Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(256), float64], Tensor[(36), bool], Tensor[(468), bool]) */;
    %277 = cast(%var_8335, dtype="int32") /* ty=Tensor[(495), int32] */;
    %278 = cast(%var_8336, dtype="uint32") /* ty=Tensor[(154, 1), uint32] */;
    %279 = reshape(%277, newshape=[495]) /* ty=Tensor[(495), int32] */;
    %280 = reshape(%278, newshape=[154]) /* ty=Tensor[(154), uint32] */;
    %281 = @func_4466(%279, %280) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16]) */;
    %282 = cast(meta[relay.Constant][20] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
    %283 = reshape(%282, newshape=[16, 3, 14]) /* ty=Tensor[(16, 3, 14), float64] */;
    %284 = @func_5458(%283) /* ty=Tensor[(16, 3, 14), bool] */;
    %285 = cast(%var_8294, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
    %286 = shape_of(%284, dtype="int32") /* ty=Tensor[(3), int32] */;
    %287 = cast(%284, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
    %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %289 = floor_mod(%287, %288) /* ty=Tensor[(16, 3, 14), float64] */;
    %290 = cast(meta[relay.Constant][20] /* ty=Tensor[(672), float64] */, dtype="uint16") /* ty=Tensor[(672), uint16] */;
    %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
    %292 = cast(%289, dtype="uint16") /* ty=Tensor[(16, 3, 14), uint16] */;
    %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %294 = cast(%var_8364, dtype="float64") /* ty=Tensor[(819), float64] */;
    %295 = reshape(%294, newshape=[13, 7, 9]) /* ty=Tensor[(13, 7, 9), float64] */;
    %296 = cast(%var_8336, dtype="float32") /* ty=Tensor[(154, 1), float32] */;
    %297 = sin(%296) /* ty=Tensor[(154, 1), float32] */;
    %298 = cast(%297, dtype="bool") /* ty=Tensor[(154, 1), bool] */;
    %299 = cast(%var_8364, dtype="bool") /* ty=Tensor[(819), bool] */;
    %300 = %263.0;
    %301 = %270.2;
    %302 = @func_5087(%273, %274) /* ty=Tensor[(14, 4, 10), bool] */;
    %303 = atan(%275) /* ty=Tensor[(672), float64] */;
    %304 = %276.2;
    %305 = @func_4313() /* ty=Tensor[(11, 4, 10), uint16] */;
    %306 = @func_4392() /* ty=Tensor[(11, 4, 10), float32] */;
    %307 = %281.0;
    %308 = subtract(%292, %293) /* ty=Tensor[(16, 3, 14), uint16] */;
    %309 = @func_1679(%295) /* ty=Tensor[(13, 7, 9), float64] */;
    %310 = greater(%298, %299) /* ty=Tensor[(154, 819), bool] */;
    (%300, %301, %var_8281, meta[relay.Constant][18] /* ty=Tensor[(256), float64] */, %302, meta[relay.Constant][19] /* ty=Tensor[(560), uint8] */, %303, %304, %305, %306, %307, %var_8335, %308, %309, %310)
  };
  %311(%var_8394, %var_8395, %var_8396, %var_8397, %var_8398) /* ty=(Tensor[(11, 4, 10), int32], uint32, Tensor[(8), uint16], Tensor[(256), float64], Tensor[(14, 4, 10), bool], Tensor[(560), uint8], Tensor[(672), float64], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), uint16], Tensor[(11, 4, 10), float32], Tensor[(11, 4, 10), int32], Tensor[(495), int32], Tensor[(16, 3, 14), uint16], Tensor[(13, 7, 9), float64], Tensor[(154, 819), bool]) */
}

def @func_7900() -> (Tensor[(11, 4, 10), int32],) {
  %313 = fn () -> (Tensor[(11, 4, 10), int32],) {
    %312 = @func_5434() /* ty=Tensor[(11, 4, 10), int32] */;
    (%312,)
  };
  %313() /* ty=(Tensor[(11, 4, 10), int32],) */
}

def @func_4088() -> Tensor[(11, 4, 10), float64] {
  @func_4086() /* ty=Tensor[(11, 4, 10), float64] */
}

def @func_7299() -> (Tensor[(11, 4, 10), float32], Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32]) {
  %314 = @func_4392() /* ty=Tensor[(11, 4, 10), float32] */;
  %315 = @func_6146() /* ty=Tensor[(16, 3, 14), float64] */;
  %316 = @func_3868() /* ty=Tensor[(11, 4, 10), int32] */;
  (%314, %315, %316)
}

def @func_9047(%var_9045: Tensor[(196), uint64], %var_9046: Tensor[(1, 154), uint32]) -> (Tensor[(16, 3, 14), float64], Tensor[(196), uint64], Tensor[(196), uint64], Tensor[(1, 154), uint32]) {
  %325 = fn (%var_9041: Tensor[(196), uint64], %var_9042: Tensor[(1, 154), uint32]) -> (Tensor[(16, 3, 14), float64], Tensor[(196), uint64], Tensor[(196), uint64], Tensor[(1, 154), uint32]) {
    %317 = @func_8856() /* ty=(Tensor[(16, 3, 14), float64],) */;
    %318 = cast(%var_9041, dtype="uint64") /* ty=Tensor[(196), uint64] */;
    %319 = cast(%var_9042, dtype="uint32") /* ty=Tensor[(1, 154), uint32] */;
    %320 = reshape(%318, newshape=[196]) /* ty=Tensor[(196), uint64] */;
    %321 = reshape(%319, newshape=[154]) /* ty=Tensor[(154), uint32] */;
    %322 = @func_6287(%320, %321) /* ty=(Tensor[(11, 4, 10), float64], Tensor[(4, 16, 4), int64], Tensor[(196), uint64], Tensor[(154), uint32]) */;
    %323 = %317.0;
    %324 = %322.2;
    (%323, %324, %var_9041, %var_9042)
  };
  %325(%var_9045, %var_9046) /* ty=(Tensor[(16, 3, 14), float64], Tensor[(196), uint64], Tensor[(196), uint64], Tensor[(1, 154), uint32]) */
}

def @func_4168() -> Tensor[(11, 4, 10), int32] {
  %326 = @func_3621() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %326.0
}

def @func_8504(%var_8502: Tensor[(2400), float32]) -> (Tensor[(16, 3, 14), float64], Tensor[(2400), float32], Tensor[(99), float64], Tensor[(2400), float32], uint16) {
  @func_8501(%var_8502) /* ty=(Tensor[(16, 3, 14), float64], Tensor[(2400), float32], Tensor[(99), float64], Tensor[(2400), float32], uint16) */
}

def @func_8501(%var_8491: Tensor[(2400), float32]) -> (Tensor[(16, 3, 14), float64], Tensor[(2400), float32], Tensor[(99), float64], Tensor[(2400), float32], uint16) {
  %327 = @func_6674() /* ty=(Tensor[(16, 3, 14), float64],) */;
  %328 = cast(meta[relay.Constant][21] /* ty=Tensor[(99), float64] */, dtype="float64") /* ty=Tensor[(99), float64] */;
  %329 = cast(%var_8491, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %330 = cast(meta[relay.Constant][22] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %331 = reshape(%328, newshape=[11, 1, 9]) /* ty=Tensor[(11, 1, 9), float64] */;
  %332 = reshape(%329, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %333 = reshape(%330, newshape=[]) /* ty=uint16 */;
  %334 = @func_3681(%331, %332, %333) /* ty=(Tensor[(2400), float32], Tensor[(2400), float32], Tensor[(1, 440), float32], Tensor[(1, 2, 4), uint16], Tensor[(1, 8), uint16], Tensor[(11, 1, 9), uint32]) */;
  %335 = %327.0;
  %336 = %334.1;
  (%335, %336, meta[relay.Constant][21] /* ty=Tensor[(99), float64] */, %var_8491, meta[relay.Constant][22] /* ty=uint16 */)
}

def @func_7641(%var_7635: Tensor[(4, 5, 13), uint32]) -> Tensor[(4, 5, 13), bool] {
  %337 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 5, 13), uint32] */, dtype="bool") /* ty=Tensor[(4, 5, 13), bool] */;
  %338 = shape_of(%var_7635, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%var_7635, dtype="bool") /* ty=Tensor[(4, 5, 13), bool] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%339, %340) /* ty=Tensor[(4, 5, 13), bool] */
}

def @func_8147(%var_8145: Tensor[(8), uint16], %var_8146: Tensor[(256), float64]) -> (Tensor[(11, 4, 10), uint16], Tensor[(256), float64], Tensor[(8), uint16], Tensor[(256), float64], Tensor[(11, 4, 10), int32]) {
  @func_8143(%var_8145, %var_8146) /* ty=(Tensor[(11, 4, 10), uint16], Tensor[(256), float64], Tensor[(8), uint16], Tensor[(256), float64], Tensor[(11, 4, 10), int32]) */
}

def @func_3566() -> Tensor[(11, 4, 10), int32] {
  %341 = @func_3394() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32]) */;
  %341.1
}

def @func_2295(%var_2292: Tensor[(4, 7, 7), uint64], %var_2293: Tensor[(4, 7, 7), uint64], %var_2294: Tensor[(154), uint32]) -> (Tensor[(4, 7, 7), uint64], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(1, 256), float64]) {
  @func_2290(%var_2292, %var_2293, %var_2294) /* ty=(Tensor[(4, 7, 7), uint64], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(1, 256), float64]) */
}

def @func_3621() -> (Tensor[(11, 4, 10), int32],) {
  %342 = @func_3566() /* ty=Tensor[(11, 4, 10), int32] */;
  (%342,)
}

def @func_5243() -> Tensor[(16, 3, 14), float64] {
  %343 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 3, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
  atanh(%343) /* ty=Tensor[(16, 3, 14), float64] */
}

def @func_7881(%var_7880: uint16) -> (Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32], uint16) {
  %350 = fn (%var_7877: uint16) -> (Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32], uint16) {
    %344 = @func_5585() /* ty=(Tensor[(16, 3, 14), float64],) */;
    %345 = cast(%var_7877, dtype="uint16") /* ty=uint16 */;
    %346 = reshape(%345, newshape=[]) /* ty=uint16 */;
    %347 = @func_7071(%346) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) */;
    %348 = %344.0;
    %349 = %347.0;
    (%348, %349, %var_7877)
  };
  %350(%var_7880) /* ty=(Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32], uint16) */
}

def @func_7301() -> (Tensor[(11, 4, 10), float32], Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32]) {
  @func_7299() /* ty=(Tensor[(11, 4, 10), float32], Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32]) */
}

def @func_4086() -> Tensor[(11, 4, 10), float64] {
  %351 = @func_3868() /* ty=Tensor[(11, 4, 10), int32] */;
  %352 = cast(%351, dtype="float64") /* ty=Tensor[(11, 4, 10), float64] */;
  cosh(%352) /* ty=Tensor[(11, 4, 10), float64] */
}

def @func_4113(%var_4093: Tensor[(7, 11, 1), uint32], %var_4094: Tensor[(7, 11, 7), uint32]) -> (Tensor[(7, 11, 7), uint32],) {
  %353 = cast(%var_4093, dtype="uint32") /* ty=Tensor[(7, 11, 1), uint32] */;
  %354 = cast(%var_4094, dtype="uint32") /* ty=Tensor[(7, 11, 7), uint32] */;
  %355 = minimum(%353, %354) /* ty=Tensor[(7, 11, 7), uint32] */;
  (%355,)
}

def @func_7498(%var_7496: Tensor[(4, 6, 1), float64]) -> (Tensor[(70), uint32], Tensor[(385), float32], Tensor[(7, 10), uint32], Tensor[(4, 6, 1), float32]) {
  @func_7495(%var_7496) /* ty=(Tensor[(70), uint32], Tensor[(385), float32], Tensor[(7, 10), uint32], Tensor[(4, 6, 1), float32]) */
}

def @func_5020(%var_5018: Tensor[(11, 4, 10), int32]) -> (Tensor[(11, 4, 10), bool], Tensor[(1248), float64], Tensor[(13, 12, 8), float64]) {
  @func_5017(%var_5018) /* ty=(Tensor[(11, 4, 10), bool], Tensor[(1248), float64], Tensor[(13, 12, 8), float64]) */
}

def @func_7606() -> (Tensor[(11, 4, 10), uint16], Tensor[(11, 4, 10), float64]) {
  %356 = @func_6023() /* ty=(Tensor[(11, 4, 10), uint16],) */;
  %357 = @func_4392() /* ty=Tensor[(11, 4, 10), float32] */;
  %358 = cast(%357, dtype="float64") /* ty=Tensor[(11, 4, 10), float64] */;
  %359 = %356.0;
  %360 = rsqrt(%358) /* ty=Tensor[(11, 4, 10), float64] */;
  (%359, %360)
}

def @func_5710() -> (Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16], Tensor[(11, 4, 10), int32]) {
  %369 = fn () -> (Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16], Tensor[(11, 4, 10), int32]) {
    %361 = @func_3299() /* ty=(Tensor[(11, 4, 10), float32],) */;
    %362 = cast(meta[relay.Constant][25] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %363 = cast(meta[relay.Constant][26] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
    %364 = reshape(%362, newshape=[]) /* ty=uint16 */;
    %365 = reshape(%363, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
    %366 = %361.0;
    %367 = @func_211(%364, %365) /* ty=Tensor[(1, 2, 4), uint16] */;
    %368 = @func_5434() /* ty=Tensor[(11, 4, 10), int32] */;
    (%366, %367, meta[relay.Constant][25] /* ty=uint16 */, meta[relay.Constant][26] /* ty=Tensor[(8), uint16] */, %368)
  };
  %369() /* ty=(Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16], Tensor[(11, 4, 10), int32]) */
}

def @func_4659(%var_4655: Tensor[(196), uint64], %var_4656: Tensor[(154, 1), uint32], %var_4657: Tensor[(455), float64], %var_4658: Tensor[(1008), float64]) -> (Tensor[(1, 256), float64], Tensor[(196), uint64], Tensor[(154, 1), uint32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), float32], Tensor[(11, 4, 10), int32], uint16, Tensor[(455), float64], Tensor[(1008), float64], Tensor[(504), float64], Tensor[(6, 12, 14), float64], Tensor[(11, 4, 10), float32]) {
  %399 = fn (%var_4616: Tensor[(196), uint64], %var_4617: Tensor[(154, 1), uint32], %var_4638: Tensor[(455), float64], %var_4639: Tensor[(1008), float64]) -> (Tensor[(1, 256), float64], Tensor[(196), uint64], Tensor[(154, 1), uint32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), float32], Tensor[(11, 4, 10), int32], uint16, Tensor[(455), float64], Tensor[(1008), float64], Tensor[(504), float64], Tensor[(6, 12, 14), float64], Tensor[(11, 4, 10), float32]) {
    %370 = cast(%var_4616, dtype="uint64") /* ty=Tensor[(196), uint64] */;
    %371 = cast(%var_4616, dtype="uint64") /* ty=Tensor[(196), uint64] */;
    %372 = cast(%var_4617, dtype="uint32") /* ty=Tensor[(154, 1), uint32] */;
    %373 = reshape(%370, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), uint64] */;
    %374 = reshape(%371, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), uint64] */;
    %375 = reshape(%372, newshape=[154]) /* ty=Tensor[(154), uint32] */;
    %376 = @func_2290(%373, %374, %375) /* ty=(Tensor[(4, 7, 7), uint64], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(1, 256), float64]) */;
    %377 = @func_4250() /* ty=(Tensor[(11, 4, 10), int32],) */;
    %378 = %377.0;
    %379 = cast(%378, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
    %380 = cast(%var_4638, dtype="float64") /* ty=Tensor[(455), float64] */;
    %381 = cast(%var_4639, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %382 = cast(meta[relay.Constant][27] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
    %383 = reshape(%380, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), float64] */;
    %384 = reshape(%381, newshape=[1008]) /* ty=Tensor[(1008), float64] */;
    %385 = reshape(%382, newshape=[36, 14]) /* ty=Tensor[(36, 14), float64] */;
    %386 = @func_4575(%383, %384, %385) /* ty=(Tensor[(5, 13, 7), float64], Tensor[(6, 12, 14), float64], Tensor[(1008), float64], uint16, Tensor[(36, 14), float64], uint16, Tensor[(8), uint16], Tensor[(11, 4, 10), bool], Tensor[(2400), float32], Tensor[(440), float32], Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16]) */;
    %387 = cast(%var_4639, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %388 = cast(%var_4639, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %389 = reshape(%387, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), float64] */;
    %390 = reshape(%388, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), float64] */;
    %391 = cast(%378, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
    %392 = %376.5;
    %393 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
    %394 = atan(%379) /* ty=Tensor[(11, 4, 10), float32] */;
    %395 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
    %396 = %386.3;
    %397 = @func_3212(%389, %390) /* ty=Tensor[(6, 12, 14), float64] */;
    %398 = exp(%391) /* ty=Tensor[(11, 4, 10), float32] */;
    (%392, %var_4616, %var_4617, %393, %394, %395, %396, %var_4638, %var_4639, meta[relay.Constant][27] /* ty=Tensor[(504), float64] */, %397, %398)
  };
  %399(%var_4655, %var_4656, %var_4657, %var_4658) /* ty=(Tensor[(1, 256), float64], Tensor[(196), uint64], Tensor[(154, 1), uint32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), float32], Tensor[(11, 4, 10), int32], uint16, Tensor[(455), float64], Tensor[(1008), float64], Tensor[(504), float64], Tensor[(6, 12, 14), float64], Tensor[(11, 4, 10), float32]) */
}

def @func_3301() -> (Tensor[(11, 4, 10), float32],) {
  @func_3299() /* ty=(Tensor[(11, 4, 10), float32],) */
}

def @func_3299() -> (Tensor[(11, 4, 10), float32],) {
  %400 = @func_3244() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %401 = %400.0;
  %402 = cast(%401, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
  %403 = log2(%402) /* ty=Tensor[(11, 4, 10), float32] */;
  (%403,)
}

def @func_3945(%var_3942: Tensor[(11, 4, 10), int32], %var_3943: Tensor[(1, 1248), float64], %var_3944: uint16) -> (Tensor[(11, 4, 10), bool], Tensor[(13, 12, 8), float64], Tensor[(1, 1248), float64], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8, 1), uint16]) {
  %419 = fn (%var_3898: Tensor[(11, 4, 10), int32], %var_3930: Tensor[(1, 1248), float64], %var_3935: uint16) -> (Tensor[(11, 4, 10), bool], Tensor[(13, 12, 8), float64], Tensor[(1, 1248), float64], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8, 1), uint16]) {
    %404 = @func_3868() /* ty=Tensor[(11, 4, 10), int32] */;
    %405 = cast(%var_3898, dtype="bool") /* ty=Tensor[(11, 4, 10), bool] */;
    %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
    %407 = cast(%404, dtype="bool") /* ty=Tensor[(11, 4, 10), bool] */;
    %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %409 = cast(%var_3930, dtype="float64") /* ty=Tensor[(1, 1248), float64] */;
    %410 = reshape(%409, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), float64] */;
    %411 = @func_3803(%410) /* ty=(Tensor[(13, 12, 8), float64],) */;
    %412 = cast(%var_3935, dtype="uint16") /* ty=uint16 */;
    %413 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 1), uint16] */, dtype="uint16") /* ty=Tensor[(8, 1), uint16] */;
    %414 = reshape(%412, newshape=[]) /* ty=uint16 */;
    %415 = reshape(%413, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
    %416 = equal(%407, %408) /* ty=Tensor[(11, 4, 10), bool] */;
    %417 = %411.0;
    %418 = @func_211(%414, %415) /* ty=Tensor[(1, 2, 4), uint16] */;
    (%416, %417, %var_3930, %418, %var_3935, meta[relay.Constant][28] /* ty=Tensor[(8, 1), uint16] */)
  };
  %419(%var_3942, %var_3943, %var_3944) /* ty=(Tensor[(11, 4, 10), bool], Tensor[(13, 12, 8), float64], Tensor[(1, 1248), float64], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8, 1), uint16]) */
}

def @func_6565() -> (Tensor[(8), uint16],) {
  %420 = @func_6044() /* ty=(Tensor[(8), uint16],) */;
  %421 = %420.0;
  (%421,)
}

def @func_4579(%var_4576: Tensor[(5, 13, 7), float64], %var_4577: Tensor[(1008), float64], %var_4578: Tensor[(36, 14), float64]) -> (Tensor[(5, 13, 7), float64], Tensor[(6, 12, 14), float64], Tensor[(1008), float64], uint16, Tensor[(36, 14), float64], uint16, Tensor[(8), uint16], Tensor[(11, 4, 10), bool], Tensor[(2400), float32], Tensor[(440), float32], Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16]) {
  %456 = fn (%var_4531: Tensor[(5, 13, 7), float64], %var_4535: Tensor[(1008), float64], %var_4545: Tensor[(36, 14), float64]) -> (Tensor[(5, 13, 7), float64], Tensor[(6, 12, 14), float64], Tensor[(1008), float64], uint16, Tensor[(36, 14), float64], uint16, Tensor[(8), uint16], Tensor[(11, 4, 10), bool], Tensor[(2400), float32], Tensor[(440), float32], Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16]) {
    %422 = cast(%var_4531, dtype="float64") /* ty=Tensor[(5, 13, 7), float64] */;
    %423 = cast(%var_4535, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %424 = cast(%var_4535, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %425 = reshape(%423, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), float64] */;
    %426 = reshape(%424, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), float64] */;
    %427 = cast(%var_4545, dtype="float64") /* ty=Tensor[(36, 14), float64] */;
    %428 = cast(%var_4545, dtype="float64") /* ty=Tensor[(36, 14), float64] */;
    %429 = cast(meta[relay.Constant][29] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %430 = cast(meta[relay.Constant][30] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
    %431 = reshape(%427, newshape=[8, 9, 7]) /* ty=Tensor[(8, 9, 7), float64] */;
    %432 = reshape(%428, newshape=[8, 9, 7]) /* ty=Tensor[(8, 9, 7), float64] */;
    %433 = reshape(%429, newshape=[]) /* ty=uint16 */;
    %434 = reshape(%430, newshape=[8]) /* ty=Tensor[(8), uint16] */;
    %435 = @func_1202(%431, %432, %433, %434) /* ty=(Tensor[(8, 9, 7), bool], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) */;
    %436 = cast(meta[relay.Constant][31] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
    %437 = cast(meta[relay.Constant][32] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
    %438 = reshape(%436, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
    %439 = reshape(%437, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float32] */;
    %440 = @func_3486(%438, %439) /* ty=(Tensor[(16, 15, 10), float32], Tensor[(2400), float32], Tensor[(11, 4, 10), bool]) */;
    %441 = cast(%var_4545, dtype="float64") /* ty=Tensor[(36, 14), float64] */;
    %442 = cast(%var_4545, dtype="float64") /* ty=Tensor[(36, 14), float64] */;
    %443 = %435.2;
    %444 = cast(%443, dtype="uint16") /* ty=uint16 */;
    %445 = cast(meta[relay.Constant][30] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
    %446 = reshape(%441, newshape=[8, 9, 7]) /* ty=Tensor[(8, 9, 7), float64] */;
    %447 = reshape(%442, newshape=[8, 9, 7]) /* ty=Tensor[(8, 9, 7), float64] */;
    %448 = reshape(%444, newshape=[]) /* ty=uint16 */;
    %449 = reshape(%445, newshape=[8]) /* ty=Tensor[(8), uint16] */;
    %450 = @func_1202(%446, %447, %448, %449) /* ty=(Tensor[(8, 9, 7), bool], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) */;
    %451 = sin(%422) /* ty=Tensor[(5, 13, 7), float64] */;
    %452 = @func_3212(%425, %426) /* ty=Tensor[(6, 12, 14), float64] */;
    %453 = %440.2;
    %454 = @func_4392() /* ty=Tensor[(11, 4, 10), float32] */;
    %455 = %450.1;
    (%451, %452, %var_4535, %443, %var_4545, meta[relay.Constant][29] /* ty=uint16 */, meta[relay.Constant][30] /* ty=Tensor[(8), uint16] */, %453, meta[relay.Constant][31] /* ty=Tensor[(2400), float32] */, meta[relay.Constant][32] /* ty=Tensor[(440), float32] */, %454, %455)
  };
  %456(%var_4576, %var_4577, %var_4578) /* ty=(Tensor[(5, 13, 7), float64], Tensor[(6, 12, 14), float64], Tensor[(1008), float64], uint16, Tensor[(36, 14), float64], uint16, Tensor[(8), uint16], Tensor[(11, 4, 10), bool], Tensor[(2400), float32], Tensor[(440), float32], Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16]) */
}

def @func_723(%var_721: Tensor[(4, 16, 4), float64]) -> Tensor[(4, 16, 4), int64] {
  @func_720(%var_721) /* ty=Tensor[(4, 16, 4), int64] */
}

def @func_8827(%var_8825: Tensor[(1008), float64], %var_8826: Tensor[(8), uint16]) -> (Tensor[(11, 4, 10), int32], Tensor[(6, 12, 14), float32], Tensor[(4, 16, 4), float32], Tensor[(8), uint16], Tensor[(256), float64], Tensor[(65), float32], Tensor[(11, 4, 10), uint16], Tensor[(16, 3, 14), bool]) {
  %491 = fn (%var_8758: Tensor[(1008), float64], %var_8805: Tensor[(8), uint16]) -> (Tensor[(11, 4, 10), int32], Tensor[(6, 12, 14), float32], Tensor[(4, 16, 4), float32], Tensor[(8), uint16], Tensor[(256), float64], Tensor[(65), float32], Tensor[(11, 4, 10), uint16], Tensor[(16, 3, 14), bool]) {
    %457 = @func_4250() /* ty=(Tensor[(11, 4, 10), int32],) */;
    %458 = cast(%var_8758, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %459 = cast(%var_8758, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %460 = reshape(%458, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), float64] */;
    %461 = reshape(%459, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), float64] */;
    %462 = @func_3212(%460, %461) /* ty=Tensor[(6, 12, 14), float64] */;
    %463 = cast(%var_8758, dtype="bool") /* ty=Tensor[(1008), bool] */;
    %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
    %465 = cast(%462, dtype="bool") /* ty=Tensor[(6, 12, 14), bool] */;
    %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %467 = less_equal(%465, %466) /* ty=Tensor[(6, 12, 14), bool] */;
    %468 = cast(%467, dtype="float32") /* ty=Tensor[(6, 12, 14), float32] */;
    %469 = cast(%var_8805, dtype="uint16") /* ty=Tensor[(8), uint16] */;
    %470 = cast(meta[relay.Constant][33] /* ty=Tensor[(256), float64] */, dtype="float64") /* ty=Tensor[(256), float64] */;
    %471 = cast(meta[relay.Constant][33] /* ty=Tensor[(256), float64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
    %472 = reshape(%469, newshape=[8]) /* ty=Tensor[(8), uint16] */;
    %473 = reshape(%470, newshape=[256]) /* ty=Tensor[(256), float64] */;
    %474 = reshape(%471, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), int64] */;
    %475 = @func_5298(%472, %473, %474) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(7, 5, 2), uint32], uint32, Tensor[(70), uint32], Tensor[(8), uint16], Tensor[(256), float64], Tensor[(4, 16, 4), float32], Tensor[(4, 16, 4), bool], Tensor[(4, 16, 4), int64]) */;
    %476 = @func_4835() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(65), float32], Tensor[(91, 9), float64], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(11, 4, 10), float32]) */;
    %477 = @func_6674() /* ty=(Tensor[(16, 3, 14), float64],) */;
    %478 = %477.0;
    %479 = cast(%478, dtype="float32") /* ty=Tensor[(16, 3, 14), float32] */;
    %480 = acos(%479) /* ty=Tensor[(16, 3, 14), float32] */;
    %481 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 3, 14), float32] */, dtype="bool") /* ty=Tensor[(16, 3, 14), bool] */;
    %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
    %483 = cast(%480, dtype="bool") /* ty=Tensor[(16, 3, 14), bool] */;
    %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %485 = %457.0;
    %486 = cos(%468) /* ty=Tensor[(6, 12, 14), float32] */;
    %487 = %475.6;
    %488 = %476.1;
    %489 = @func_4313() /* ty=Tensor[(11, 4, 10), uint16] */;
    %490 = less(%483, %484) /* ty=Tensor[(16, 3, 14), bool] */;
    (%485, %486, %487, %var_8805, meta[relay.Constant][33] /* ty=Tensor[(256), float64] */, %488, %489, %490)
  };
  %491(%var_8825, %var_8826) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(6, 12, 14), float32], Tensor[(4, 16, 4), float32], Tensor[(8), uint16], Tensor[(256), float64], Tensor[(65), float32], Tensor[(11, 4, 10), uint16], Tensor[(16, 3, 14), bool]) */
}

def @func_6128(%var_6126: uint16, %var_6127: Tensor[(560), uint8]) -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], uint16, Tensor[(2, 1200), bool], Tensor[(1, 2, 4), uint16], Tensor[(1, 99), float64], Tensor[(1, 2, 4), uint16], Tensor[(11, 1, 9), uint32], Tensor[(14, 4, 10), bool], Tensor[(560), uint8]) {
  @func_6124(%var_6126, %var_6127) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], uint16, Tensor[(2, 1200), bool], Tensor[(1, 2, 4), uint16], Tensor[(1, 99), float64], Tensor[(1, 2, 4), uint16], Tensor[(11, 1, 9), uint32], Tensor[(14, 4, 10), bool], Tensor[(560), uint8]) */
}

def @func_3395() -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32]) {
  %496 = fn () -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32]) {
    %492 = @func_3244() /* ty=(Tensor[(11, 4, 10), int32],) */;
    %493 = @func_3244() /* ty=(Tensor[(11, 4, 10), int32],) */;
    %494 = %492.0;
    %495 = %493.0;
    (%494, %495)
  };
  %496() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32]) */
}

def @func_3742(%var_3739: Tensor[(5, 9, 11), int32], %var_3740: Tensor[(22, 7), uint32], %var_3741: Tensor[(8), uint16]) -> (Tensor[(5, 9, 11), int32], Tensor[(1, 256), float64], Tensor[(196), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(22, 7), bool], Tensor[(4, 16, 4), int64]) {
  @func_3737(%var_3739, %var_3740, %var_3741) /* ty=(Tensor[(5, 9, 11), int32], Tensor[(1, 256), float64], Tensor[(196), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(22, 7), bool], Tensor[(4, 16, 4), int64]) */
}

def @func_3490(%var_3488: Tensor[(2400), float32], %var_3489: Tensor[(11, 4, 10), float32]) -> (Tensor[(16, 15, 10), float32], Tensor[(2400), float32], Tensor[(11, 4, 10), bool]) {
  @func_3486(%var_3488, %var_3489) /* ty=(Tensor[(16, 15, 10), float32], Tensor[(2400), float32], Tensor[(11, 4, 10), bool]) */
}

def @func_3432(%var_3431: Tensor[(256), float64]) -> (Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(256), float64]) {
  %505 = fn (%var_3419: Tensor[(256), float64]) -> (Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(256), float64]) {
    %497 = @func_3299() /* ty=(Tensor[(11, 4, 10), float32],) */;
    %498 = cast(meta[relay.Constant][35] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
    %499 = cast(%var_3419, dtype="float64") /* ty=Tensor[(256), float64] */;
    %500 = reshape(%498, newshape=[8]) /* ty=Tensor[(8), uint16] */;
    %501 = reshape(%499, newshape=[256]) /* ty=Tensor[(256), float64] */;
    %502 = @func_891(%500, %501) /* ty=(Tensor[(154, 1), uint32], Tensor[(70), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(1, 2, 4), uint16], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64], Tensor[(16, 13, 10), uint32], Tensor[(16, 13, 10), float64]) */;
    %503 = %497.0;
    %504 = %502.2;
    (%503, %504, meta[relay.Constant][35] /* ty=Tensor[(8), uint16] */, %var_3419)
  };
  %505(%var_3431) /* ty=(Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(256), float64]) */
}

def @func_400(%var_399: Tensor[(5, 1, 13), float32]) -> Tensor[(5, 1, 13), float32] {
  %507 = fn (%var_389: Tensor[(5, 1, 13), float32]) -> Tensor[(5, 1, 13), float32] {
    %506 = cast(%var_389, dtype="float32") /* ty=Tensor[(5, 1, 13), float32] */;
    log10(%506) /* ty=Tensor[(5, 1, 13), float32] */
  };
  %507(%var_399) /* ty=Tensor[(5, 1, 13), float32] */
}

def @func_3652(%var_3650: Tensor[(429), float32], %var_3651: Tensor[(468), bool]) -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(2400), float32], Tensor[(429), float32], Tensor[(468), bool]) {
  %521 = fn (%var_3645: Tensor[(429), float32], %var_3646: Tensor[(468), bool]) -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(2400), float32], Tensor[(429), float32], Tensor[(468), bool]) {
    %508 = @func_3621() /* ty=(Tensor[(11, 4, 10), int32],) */;
    %509 = cast(%var_3645, dtype="float32") /* ty=Tensor[(429), float32] */;
    %510 = cast(%var_3645, dtype="float32") /* ty=Tensor[(429), float32] */;
    %511 = cast(%var_3645, dtype="float32") /* ty=Tensor[(429), float32] */;
    %512 = cast(%var_3646, dtype="bool") /* ty=Tensor[(468), bool] */;
    %513 = reshape(%509, newshape=[3, 13, 11]) /* ty=Tensor[(3, 13, 11), float32] */;
    %514 = reshape(%510, newshape=[3, 13, 11]) /* ty=Tensor[(3, 13, 11), float32] */;
    %515 = reshape(%511, newshape=[3, 13, 11]) /* ty=Tensor[(3, 13, 11), float32] */;
    %516 = reshape(%512, newshape=[468]) /* ty=Tensor[(468), bool] */;
    %517 = @func_3549(%513, %514, %515, %516) /* ty=(Tensor[(3, 13, 11), bool], Tensor[(11, 4, 10), bool], Tensor[(2400), float32], Tensor[(440), float32], Tensor[(16, 15, 10), float32], Tensor[(13, 12, 3), uint8], Tensor[(36), bool], Tensor[(468), bool]) */;
    %518 = @func_3566() /* ty=Tensor[(11, 4, 10), int32] */;
    %519 = %508.0;
    %520 = %517.2;
    (%518, %519, %520, %var_3645, %var_3646)
  };
  %521(%var_3650, %var_3651) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(2400), float32], Tensor[(429), float32], Tensor[(468), bool]) */
}

def @func_8157(%var_8156: Tensor[(1, 65), float32]) -> (Tensor[(11, 4, 10), int32], Tensor[(5, 1, 13), float32], Tensor[(1, 65), float32]) {
  %526 = fn (%var_8153: Tensor[(1, 65), float32]) -> (Tensor[(11, 4, 10), int32], Tensor[(5, 1, 13), float32], Tensor[(1, 65), float32]) {
    %522 = cast(%var_8153, dtype="float32") /* ty=Tensor[(1, 65), float32] */;
    %523 = reshape(%522, newshape=[5, 1, 13]) /* ty=Tensor[(5, 1, 13), float32] */;
    %524 = @func_3566() /* ty=Tensor[(11, 4, 10), int32] */;
    %525 = @func_398(%523) /* ty=Tensor[(5, 1, 13), float32] */;
    (%524, %525, %var_8153)
  };
  %526(%var_8156) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(5, 1, 13), float32], Tensor[(1, 65), float32]) */
}

def @func_3870() -> Tensor[(11, 4, 10), int32] {
  @func_3868() /* ty=Tensor[(11, 4, 10), int32] */
}

def @func_4916(%var_4915: uint16) -> (Tensor[(11, 4, 10), int32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) {
  %533 = fn (%var_4905: uint16) -> (Tensor[(11, 4, 10), int32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) {
    %527 = cast(%var_4905, dtype="uint16") /* ty=uint16 */;
    %528 = cast(meta[relay.Constant][36] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
    %529 = reshape(%527, newshape=[]) /* ty=uint16 */;
    %530 = reshape(%528, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
    %531 = @func_4168() /* ty=Tensor[(11, 4, 10), int32] */;
    %532 = @func_211(%529, %530) /* ty=Tensor[(1, 2, 4), uint16] */;
    (%531, %532, %var_4905, meta[relay.Constant][36] /* ty=Tensor[(8), uint16] */)
  };
  %533(%var_4915) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) */
}

def @func_2290(%var_2238: Tensor[(4, 7, 7), uint64], %var_2239: Tensor[(4, 7, 7), uint64], %var_2250: Tensor[(154), uint32]) -> (Tensor[(4, 7, 7), uint64], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(1, 256), float64]) {
  %534 = cast(%var_2239, dtype="uint64") /* ty=Tensor[(4, 7, 7), uint64] */;
  %535 = shape_of(%var_2238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%var_2238, dtype="uint64") /* ty=Tensor[(4, 7, 7), uint64] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %538 = cast(%var_2250, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %539 = cast(%var_2250, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %540 = cast(meta[relay.Constant][37] /* ty=Tensor[(70), uint32] */, dtype="uint32") /* ty=Tensor[(70), uint32] */;
  %541 = reshape(%538, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
  %542 = reshape(%539, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
  %543 = reshape(%540, newshape=[14, 5]) /* ty=Tensor[(14, 5), uint32] */;
  %544 = @func_490(%541, %542, %543) /* ty=(Tensor[(7, 11, 2), bool], Tensor[(7, 5, 2), float64], uint32, Tensor[(14, 5), uint32]) */;
  %545 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 256), float64] */, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %546 = reshape(%545, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float64] */;
  %547 = bitwise_and(%536, %537) /* ty=Tensor[(4, 7, 7), uint64] */;
  %548 = %544.0;
  %549 = @func_720(%546) /* ty=Tensor[(4, 16, 4), int64] */;
  (%547, %548, %var_2250, meta[relay.Constant][37] /* ty=Tensor[(70), uint32] */, %549, meta[relay.Constant][38] /* ty=Tensor[(1, 256), float64] */)
}

def @func_4156(%var_4154: Tensor[(11, 7, 5), float32], %var_4155: Tensor[(70), uint32]) -> (Tensor[(11, 7, 5), float32], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32]) {
  %560 = fn (%var_4124: Tensor[(11, 7, 5), float32], %var_4130: Tensor[(70), uint32]) -> (Tensor[(11, 7, 5), float32], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32]) {
    %550 = cast(%var_4124, dtype="float32") /* ty=Tensor[(11, 7, 5), float32] */;
    %551 = cast(meta[relay.Constant][39] /* ty=Tensor[(154), uint32] */, dtype="uint32") /* ty=Tensor[(154), uint32] */;
    %552 = cast(meta[relay.Constant][39] /* ty=Tensor[(154), uint32] */, dtype="uint32") /* ty=Tensor[(154), uint32] */;
    %553 = cast(%var_4130, dtype="uint32") /* ty=Tensor[(70), uint32] */;
    %554 = reshape(%551, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
    %555 = reshape(%552, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
    %556 = reshape(%553, newshape=[14, 5]) /* ty=Tensor[(14, 5), uint32] */;
    %557 = @func_490(%554, %555, %556) /* ty=(Tensor[(7, 11, 2), bool], Tensor[(7, 5, 2), float64], uint32, Tensor[(14, 5), uint32]) */;
    %558 = cos(%550) /* ty=Tensor[(11, 7, 5), float32] */;
    %559 = %557.0;
    (%558, %559, meta[relay.Constant][39] /* ty=Tensor[(154), uint32] */, %var_4130)
  };
  %560(%var_4154, %var_4155) /* ty=(Tensor[(11, 7, 5), float32], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32]) */
}

def @func_6567() -> (Tensor[(8), uint16],) {
  @func_6565() /* ty=(Tensor[(8), uint16],) */
}

def @func_7462(%var_7461: Tensor[(16, 3, 14), float64]) -> (Tensor[(16, 3, 14), bool], Tensor[(5, 1, 13), float32], Tensor[(154), uint32], Tensor[(16, 3, 14), float64]) {
  %574 = fn (%var_7426: Tensor[(16, 3, 14), float64]) -> (Tensor[(16, 3, 14), bool], Tensor[(5, 1, 13), float32], Tensor[(154), uint32], Tensor[(16, 3, 14), float64]) {
    %561 = @func_5585() /* ty=(Tensor[(16, 3, 14), float64],) */;
    %562 = %561.0;
    %563 = cast(%var_7426, dtype="bool") /* ty=Tensor[(16, 3, 14), bool] */;
    %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(3), int32] */;
    %565 = cast(%562, dtype="bool") /* ty=Tensor[(16, 3, 14), bool] */;
    %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %567 = cast(meta[relay.Constant][40] /* ty=Tensor[(154), uint32] */, dtype="uint32") /* ty=Tensor[(154), uint32] */;
    %568 = reshape(%567, newshape=[154]) /* ty=Tensor[(154), uint32] */;
    %569 = @func_5236(%568) /* ty=(Tensor[(11, 4, 10), float64], Tensor[(7, 11, 2), bool], Tensor[(7, 28), uint64], Tensor[(154), uint32], Tensor[(5, 1, 13), float32], Tensor[(65), float32]) */;
    %570 = @func_7299() /* ty=(Tensor[(11, 4, 10), float32], Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32]) */;
    %571 = greater(%565, %566) /* ty=Tensor[(16, 3, 14), bool] */;
    %572 = %569.4;
    %573 = %570.1;
    (%571, %572, meta[relay.Constant][40] /* ty=Tensor[(154), uint32] */, %573)
  };
  %574(%var_7461) /* ty=(Tensor[(16, 3, 14), bool], Tensor[(5, 1, 13), float32], Tensor[(154), uint32], Tensor[(16, 3, 14), float64]) */
}

def @func_8458(%var_8457: Tensor[(16, 3, 14), float64]) -> (Tensor[(16, 3, 14), float64],) {
  %582 = fn (%var_8450: Tensor[(16, 3, 14), float64]) -> (Tensor[(16, 3, 14), float64],) {
    %575 = @func_7299() /* ty=(Tensor[(11, 4, 10), float32], Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32]) */;
    %576 = %575.1;
    %577 = cast(%var_8450, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
    %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
    %579 = cast(%576, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
    %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %581 = mod(%579, %580) /* ty=Tensor[(16, 3, 14), float64] */;
    (%581,)
  };
  %582(%var_8457) /* ty=(Tensor[(16, 3, 14), float64],) */
}

def @func_7074(%var_7072: uint16) -> (Tensor[(11, 4, 10), int32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) {
  @func_7071(%var_7072) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) */
}

def @func_6674() -> (Tensor[(16, 3, 14), float64],) {
  %583 = @func_6146() /* ty=Tensor[(16, 3, 14), float64] */;
  (%583,)
}

def @func_5658(%var_5622: Tensor[(495), int32], %var_5623: Tensor[(154), uint32]) -> (Tensor[(11, 4, 10), int32], Tensor[(196), uint64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16]) {
  %584 = cast(%var_5622, dtype="int32") /* ty=Tensor[(495), int32] */;
  %585 = cast(%var_5623, dtype="uint32") /* ty=Tensor[(154), uint32] */;
  %586 = cast(meta[relay.Constant][41] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %587 = reshape(%584, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), int32] */;
  %588 = reshape(%585, newshape=[22, 7]) /* ty=Tensor[(22, 7), uint32] */;
  %589 = reshape(%586, newshape=[8]) /* ty=Tensor[(8), uint16] */;
  %590 = @func_3737(%587, %588, %589) /* ty=(Tensor[(5, 9, 11), int32], Tensor[(1, 256), float64], Tensor[(196), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(22, 7), bool], Tensor[(4, 16, 4), int64]) */;
  %591 = @func_3868() /* ty=Tensor[(11, 4, 10), int32] */;
  %592 = %590.2;
  (%591, %592, %var_5622, %var_5623, meta[relay.Constant][41] /* ty=Tensor[(8), uint16] */)
}

def @func_5383() -> Tensor[(11, 4, 10), int32] {
  %593 = fn () -> Tensor[(11, 4, 10), int32] {
    @func_4168() /* ty=Tensor[(11, 4, 10), int32] */
  };
  %593() /* ty=Tensor[(11, 4, 10), int32] */
}

def @func_5662(%var_5660: Tensor[(495), int32], %var_5661: Tensor[(154), uint32]) -> (Tensor[(11, 4, 10), int32], Tensor[(196), uint64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16]) {
  @func_5658(%var_5660, %var_5661) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(196), uint64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16]) */
}

def @func_8109() -> (Tensor[(11, 4, 10), int32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) {
  %594 = cast(meta[relay.Constant][42] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %595 = cast(meta[relay.Constant][43] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %596 = reshape(%594, newshape=[]) /* ty=uint16 */;
  %597 = reshape(%595, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %598 = @func_4168() /* ty=Tensor[(11, 4, 10), int32] */;
  %599 = @func_211(%596, %597) /* ty=Tensor[(1, 2, 4), uint16] */;
  (%598, %599, meta[relay.Constant][42] /* ty=uint16 */, meta[relay.Constant][43] /* ty=Tensor[(8), uint16] */)
}

def @func_4208(%var_4206: Tensor[(11, 4, 10), float64]) -> Tensor[(11, 4, 10), float32] {
  @func_4205(%var_4206) /* ty=Tensor[(11, 4, 10), float32] */
}

def @func_6046() -> (Tensor[(8), uint16],) {
  @func_6044() /* ty=(Tensor[(8), uint16],) */
}

def @func_8982(%var_8980: Tensor[(2, 504), float64]) -> (Tensor[(11, 4, 10), int32], Tensor[(1, 65), float32], Tensor[(65), float32], Tensor[(8, 1), uint16], Tensor[(1248), float64], uint16, Tensor[(455, 504), bool], Tensor[(1, 1248), float64], Tensor[(2, 504), bool], Tensor[(2, 504), float64], Tensor[(455, 504), float64]) {
  @func_8979(%var_8980) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(1, 65), float32], Tensor[(65), float32], Tensor[(8, 1), uint16], Tensor[(1248), float64], uint16, Tensor[(455, 504), bool], Tensor[(1, 1248), float64], Tensor[(2, 504), bool], Tensor[(2, 504), float64], Tensor[(455, 504), float64]) */
}

def @func_6676() -> (Tensor[(16, 3, 14), float64],) {
  @func_6674() /* ty=(Tensor[(16, 3, 14), float64],) */
}

def @func_5434() -> Tensor[(11, 4, 10), int32] {
  @func_3976() /* ty=Tensor[(11, 4, 10), int32] */
}

def @func_8241(%var_8239: Tensor[(7, 11, 7), int16], %var_8240: Tensor[(1, 560), uint8]) -> (Tensor[(7, 11, 7), float64], Tensor[(11, 1, 9), uint32], uint16, Tensor[(1, 560), uint8]) {
  @func_8237(%var_8239, %var_8240) /* ty=(Tensor[(7, 11, 7), float64], Tensor[(11, 1, 9), uint32], uint16, Tensor[(1, 560), uint8]) */
}

def @func_4059(%var_4057: Tensor[(7, 117), float64], %var_4058: Tensor[(1, 70), uint32]) -> (Tensor[(11, 4, 10), float32], Tensor[(65), float32], Tensor[(7, 117), float64], Tensor[(1, 70), uint32], Tensor[(1, 8), uint16], Tensor[(1, 99), float64], Tensor[(2400), float32], uint16, Tensor[(16, 15, 10), float32], Tensor[(11, 4, 10), int32]) {
  %622 = fn (%var_4031: Tensor[(7, 117), float64], %var_4032: Tensor[(1, 70), uint32]) -> (Tensor[(11, 4, 10), float32], Tensor[(65), float32], Tensor[(7, 117), float64], Tensor[(1, 70), uint32], Tensor[(1, 8), uint16], Tensor[(1, 99), float64], Tensor[(2400), float32], uint16, Tensor[(16, 15, 10), float32], Tensor[(11, 4, 10), int32]) {
    %600 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
    %601 = cast(%600, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
    %602 = cast(%var_4031, dtype="float64") /* ty=Tensor[(7, 117), float64] */;
    %603 = cast(%var_4032, dtype="uint32") /* ty=Tensor[(1, 70), uint32] */;
    %604 = reshape(%602, newshape=[7, 117]) /* ty=Tensor[(7, 117), float64] */;
    %605 = reshape(%603, newshape=[70]) /* ty=Tensor[(70), uint32] */;
    %606 = @func_3193(%604, %605) /* ty=(Tensor[(15, 14, 10), float32], Tensor[(13, 7, 9), float64], Tensor[(7, 117), float64], Tensor[(5, 1, 13), float32], Tensor[(65), float32], uint32, Tensor[(11, 14), uint32], Tensor[(70), uint32]) */;
    %607 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 99), float64] */, dtype="float64") /* ty=Tensor[(1, 99), float64] */;
    %608 = cast(meta[relay.Constant][45] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
    %609 = cast(meta[relay.Constant][46] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %610 = reshape(%607, newshape=[11, 1, 9]) /* ty=Tensor[(11, 1, 9), float64] */;
    %611 = reshape(%608, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
    %612 = reshape(%609, newshape=[]) /* ty=uint16 */;
    %613 = @func_3681(%610, %611, %612) /* ty=(Tensor[(2400), float32], Tensor[(2400), float32], Tensor[(1, 440), float32], Tensor[(1, 2, 4), uint16], Tensor[(1, 8), uint16], Tensor[(11, 1, 9), uint32]) */;
    %614 = cast(meta[relay.Constant][45] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
    %615 = reshape(%614, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), float32] */;
    %616 = @func_3101(%615) /* ty=(Tensor[(16, 15, 10), float32],) */;
    %617 = atanh(%601) /* ty=Tensor[(11, 4, 10), float32] */;
    %618 = %606.4;
    %619 = %613.4;
    %620 = %616.0;
    %621 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
    (%617, %618, %var_4031, %var_4032, %619, meta[relay.Constant][44] /* ty=Tensor[(1, 99), float64] */, meta[relay.Constant][45] /* ty=Tensor[(2400), float32] */, meta[relay.Constant][46] /* ty=uint16 */, %620, %621)
  };
  %622(%var_4057, %var_4058) /* ty=(Tensor[(11, 4, 10), float32], Tensor[(65), float32], Tensor[(7, 117), float64], Tensor[(1, 70), uint32], Tensor[(1, 8), uint16], Tensor[(1, 99), float64], Tensor[(2400), float32], uint16, Tensor[(16, 15, 10), float32], Tensor[(11, 4, 10), int32]) */
}

def @func_9015() -> Tensor[(11, 4, 10), float64] {
  @func_9013() /* ty=Tensor[(11, 4, 10), float64] */
}

def @func_2732(%var_2729: Tensor[(1, 12, 3), bool], %var_2730: Tensor[(13, 12, 3), bool], %var_2731: Tensor[(13, 12, 3), float32]) -> (Tensor[(5, 1, 13), float32], Tensor[(65), float32], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(16, 16), float32], Tensor[(13, 12, 3), uint8], Tensor[(13, 12, 3), float64], Tensor[(7, 5, 2), float64], Tensor[(8), uint16]) {
  %651 = fn (%var_2662: Tensor[(1, 12, 3), bool], %var_2663: Tensor[(13, 12, 3), bool], %var_2698: Tensor[(13, 12, 3), float32]) -> (Tensor[(5, 1, 13), float32], Tensor[(65), float32], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(16, 16), float32], Tensor[(13, 12, 3), uint8], Tensor[(13, 12, 3), float64], Tensor[(7, 5, 2), float64], Tensor[(8), uint16]) {
    %623 = cast(meta[relay.Constant][47] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
    %624 = reshape(%623, newshape=[5, 1, 13]) /* ty=Tensor[(5, 1, 13), float32] */;
    %625 = cast(meta[relay.Constant][48] /* ty=Tensor[(256), float64] */, dtype="float64") /* ty=Tensor[(256), float64] */;
    %626 = reshape(%625, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float64] */;
    %627 = @func_720(%626) /* ty=Tensor[(4, 16, 4), int64] */;
    %628 = cast(%627, dtype="float32") /* ty=Tensor[(4, 16, 4), float32] */;
    %629 = reshape(%628, newshape=[16, 16]) /* ty=Tensor[(16, 16), float32] */;
    %630 = @func_2511(%629) /* ty=(Tensor[(16, 16), float32], Tensor[(4, 16, 4), bool]) */;
    %631 = cast(%var_2663, dtype="float32") /* ty=Tensor[(13, 12, 3), float32] */;
    %632 = asin(%631) /* ty=Tensor[(13, 12, 3), float32] */;
    %633 = cast(%var_2698, dtype="uint8") /* ty=Tensor[(13, 12, 3), uint8] */;
    %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
    %635 = cast(%632, dtype="uint8") /* ty=Tensor[(13, 12, 3), uint8] */;
    %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %637 = cast(%var_2662, dtype="bool") /* ty=Tensor[(1, 12, 3), bool] */;
    %638 = cast(%var_2663, dtype="bool") /* ty=Tensor[(13, 12, 3), bool] */;
    %639 = logical_or(%637, %638) /* ty=Tensor[(13, 12, 3), bool] */;
    %640 = cast(%639, dtype="float64") /* ty=Tensor[(13, 12, 3), float64] */;
    %641 = cast(meta[relay.Constant][49] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
    %642 = cast(%627, dtype="float64") /* ty=Tensor[(4, 16, 4), float64] */;
    %643 = reshape(%641, newshape=[8]) /* ty=Tensor[(8), uint16] */;
    %644 = reshape(%642, newshape=[256]) /* ty=Tensor[(256), float64] */;
    %645 = @func_891(%643, %644) /* ty=(Tensor[(154, 1), uint32], Tensor[(70), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(1, 2, 4), uint16], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64], Tensor[(16, 13, 10), uint32], Tensor[(16, 13, 10), float64]) */;
    %646 = @func_398(%624) /* ty=Tensor[(5, 1, 13), float32] */;
    %647 = %630.0;
    %648 = bitwise_or(%635, %636) /* ty=Tensor[(13, 12, 3), uint8] */;
    %649 = cos(%640) /* ty=Tensor[(13, 12, 3), float64] */;
    %650 = %645.8;
    (%646, meta[relay.Constant][47] /* ty=Tensor[(65), float32] */, %627, meta[relay.Constant][48] /* ty=Tensor[(256), float64] */, %647, %648, %649, %650, meta[relay.Constant][49] /* ty=Tensor[(8), uint16] */)
  };
  %651(%var_2729, %var_2730, %var_2731) /* ty=(Tensor[(5, 1, 13), float32], Tensor[(65), float32], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(16, 16), float32], Tensor[(13, 12, 3), uint8], Tensor[(13, 12, 3), float64], Tensor[(7, 5, 2), float64], Tensor[(8), uint16]) */
}

def @func_5337() -> Tensor[(11, 4, 10), int32] {
  %652 = @func_4250() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %652.0
}

def @func_5339() -> Tensor[(11, 4, 10), int32] {
  @func_5337() /* ty=Tensor[(11, 4, 10), int32] */
}

def @func_4251() -> (Tensor[(11, 4, 10), int32],) {
  %654 = fn () -> (Tensor[(11, 4, 10), int32],) {
    %653 = @func_4168() /* ty=Tensor[(11, 4, 10), int32] */;
    (%653,)
  };
  %654() /* ty=(Tensor[(11, 4, 10), int32],) */
}

def @func_128(%var_126: uint32, %var_127: Tensor[(7, 5, 2), uint32]) -> (Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64]) {
  %660 = fn (%var_91: uint32, %var_92: Tensor[(7, 5, 2), uint32]) -> (Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64]) {
    %655 = cast(%var_91, dtype="uint32") /* ty=uint32 */;
    %656 = cast(%var_92, dtype="uint32") /* ty=Tensor[(7, 5, 2), uint32] */;
    %657 = cast(%var_92, dtype="float64") /* ty=Tensor[(7, 5, 2), float64] */;
    %658 = minimum(%655, %656) /* ty=Tensor[(7, 5, 2), uint32] */;
    %659 = sin(%657) /* ty=Tensor[(7, 5, 2), float64] */;
    (%658, %659)
  };
  %660(%var_126, %var_127) /* ty=(Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64]) */
}

def @func_6858() -> Tensor[(11, 4, 10), float32] {
  %662 = fn () -> Tensor[(11, 4, 10), float32] {
    %661 = @func_3299() /* ty=(Tensor[(11, 4, 10), float32],) */;
    %661.0
  };
  %662() /* ty=Tensor[(11, 4, 10), float32] */
}

def @func_1207(%var_1203: Tensor[(8, 9, 7), float64], %var_1204: Tensor[(8, 9, 7), float64], %var_1205: uint16, %var_1206: Tensor[(8), uint16]) -> (Tensor[(8, 9, 7), bool], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) {
  %673 = fn (%var_1190: Tensor[(8, 9, 7), float64], %var_1191: Tensor[(8, 9, 7), float64], %var_1196: uint16, %var_1197: Tensor[(8), uint16]) -> (Tensor[(8, 9, 7), bool], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) {
    %663 = cast(%var_1191, dtype="bool") /* ty=Tensor[(8, 9, 7), bool] */;
    %664 = shape_of(%var_1190, dtype="int32") /* ty=Tensor[(3), int32] */;
    %665 = cast(%var_1190, dtype="bool") /* ty=Tensor[(8, 9, 7), bool] */;
    %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %667 = cast(%var_1196, dtype="uint16") /* ty=uint16 */;
    %668 = cast(%var_1197, dtype="uint16") /* ty=Tensor[(8), uint16] */;
    %669 = reshape(%667, newshape=[]) /* ty=uint16 */;
    %670 = reshape(%668, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
    %671 = less(%665, %666) /* ty=Tensor[(8, 9, 7), bool] */;
    %672 = @func_211(%669, %670) /* ty=Tensor[(1, 2, 4), uint16] */;
    (%671, %672, %var_1196, %var_1197)
  };
  %673(%var_1203, %var_1204, %var_1205, %var_1206) /* ty=(Tensor[(8, 9, 7), bool], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) */
}

def @func_5255() -> (Tensor[(16, 3, 14), float64],) {
  %675 = fn () -> (Tensor[(16, 3, 14), float64],) {
    %674 = @func_5243() /* ty=Tensor[(16, 3, 14), float64] */;
    (%674,)
  };
  %675() /* ty=(Tensor[(16, 3, 14), float64],) */
}

def @func_6767() -> (Tensor[(11, 4, 10), int32],) {
  %676 = @func_5382() /* ty=Tensor[(11, 4, 10), int32] */;
  (%676,)
}

def @func_5860() -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), float64]) {
  @func_5858() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), float64]) */
}

def @func_720(%var_702: Tensor[(4, 16, 4), float64]) -> Tensor[(4, 16, 4), int64] {
  %677 = cast(meta[relay.Constant][50] /* ty=Tensor[(4, 16, 4), float64] */, dtype="float64") /* ty=Tensor[(4, 16, 4), float64] */;
  %678 = rsqrt(%677) /* ty=Tensor[(4, 16, 4), float64] */;
  %679 = cast(%var_702, dtype="int64") /* ty=Tensor[(4, 16, 4), int64] */;
  %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%678, dtype="int64") /* ty=Tensor[(4, 16, 4), int64] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%681, %682) /* ty=Tensor[(4, 16, 4), int64] */
}

def @func_6493(%var_6482: Tensor[(2400), float32]) -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(2400), float32], Tensor[(11, 4, 10), float64]) {
  %683 = @func_5858() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), float64]) */;
  %684 = cast(%var_6482, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %685 = reshape(%684, newshape=[2, 1200]) /* ty=Tensor[(2, 1200), float32] */;
  %686 = @func_5189(%685) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(16, 15, 10), float32], Tensor[(2, 1200), float64]) */;
  %687 = %683.0;
  %688 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
  %689 = %686.0;
  %690 = @func_4086() /* ty=Tensor[(11, 4, 10), float64] */;
  (%687, %688, %689, %var_6482, %690)
}

def @func_6769() -> (Tensor[(11, 4, 10), int32],) {
  @func_6767() /* ty=(Tensor[(11, 4, 10), int32],) */
}

def @func_7816() -> (Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(256), float64], Tensor[(36), bool], Tensor[(468), bool]) {
  %704 = fn () -> (Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(256), float64], Tensor[(36), bool], Tensor[(468), bool]) {
    %691 = @func_6767() /* ty=(Tensor[(11, 4, 10), int32],) */;
    %692 = @func_6767() /* ty=(Tensor[(11, 4, 10), int32],) */;
    %693 = cast(meta[relay.Constant][51] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
    %694 = cast(meta[relay.Constant][52] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
    %695 = cast(meta[relay.Constant][52] /* ty=Tensor[(468), bool] */, dtype="float32") /* ty=Tensor[(468), float32] */;
    %696 = reshape(%693, newshape=[1, 12, 3]) /* ty=Tensor[(1, 12, 3), bool] */;
    %697 = reshape(%694, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), bool] */;
    %698 = reshape(%695, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), float32] */;
    %699 = @func_2728(%696, %697, %698) /* ty=(Tensor[(5, 1, 13), float32], Tensor[(65), float32], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(16, 16), float32], Tensor[(13, 12, 3), uint8], Tensor[(13, 12, 3), float64], Tensor[(7, 5, 2), float64], Tensor[(8), uint16]) */;
    %700 = @func_6717() /* ty=Tensor[(16, 3, 14), float64] */;
    %701 = %691.0;
    %702 = %692.0;
    %703 = %699.3;
    (%700, %701, %702, %703, meta[relay.Constant][51] /* ty=Tensor[(36), bool] */, meta[relay.Constant][52] /* ty=Tensor[(468), bool] */)
  };
  %704() /* ty=(Tensor[(16, 3, 14), float64], Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32], Tensor[(256), float64], Tensor[(36), bool], Tensor[(468), bool]) */
}

def @main() -> Tensor[(5, 9, 11), float32] {
  %705 = @func_7031() /* ty=(Tensor[(5, 9, 11), int32],) */;
  %706 = %705.0;
  %707 = cast(%706, dtype="float32") /* ty=Tensor[(5, 9, 11), float32] */;
  asinh(%707) /* ty=Tensor[(5, 9, 11), float32] */
}

def @func_3486(%var_3478: Tensor[(2400), float32], %var_3480: Tensor[(11, 4, 10), float32]) -> (Tensor[(16, 15, 10), float32], Tensor[(2400), float32], Tensor[(11, 4, 10), bool]) {
  %708 = cast(%var_3478, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %709 = reshape(%708, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), float32] */;
  %710 = @func_3101(%709) /* ty=(Tensor[(16, 15, 10), float32],) */;
  %711 = @func_3299() /* ty=(Tensor[(11, 4, 10), float32],) */;
  %712 = %711.0;
  %713 = cast(%var_3480, dtype="bool") /* ty=Tensor[(11, 4, 10), bool] */;
  %714 = shape_of(%712, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(%712, dtype="bool") /* ty=Tensor[(11, 4, 10), bool] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %717 = %710.0;
  %718 = less_equal(%715, %716) /* ty=Tensor[(11, 4, 10), bool] */;
  (%717, %var_3478, %718)
}

def @func_3805(%var_3804: Tensor[(13, 12, 8), float64]) -> (Tensor[(13, 12, 8), float64],) {
  %721 = fn (%var_3790: Tensor[(13, 12, 8), float64]) -> (Tensor[(13, 12, 8), float64],) {
    %719 = cast(%var_3790, dtype="float64") /* ty=Tensor[(13, 12, 8), float64] */;
    %720 = sigmoid(%719) /* ty=Tensor[(13, 12, 8), float64] */;
    (%720,)
  };
  %721(%var_3804) /* ty=(Tensor[(13, 12, 8), float64],) */
}

def @func_5090(%var_5088: Tensor[(14, 4, 10), uint8], %var_5089: Tensor[(14, 4, 10), uint8]) -> Tensor[(14, 4, 10), bool] {
  %740 = fn (%var_5046: Tensor[(14, 4, 10), uint8], %var_5047: Tensor[(14, 4, 10), uint8]) -> Tensor[(14, 4, 10), bool] {
    %722 = cast(%var_5047, dtype="uint8") /* ty=Tensor[(14, 4, 10), uint8] */;
    %723 = shape_of(%var_5046, dtype="int32") /* ty=Tensor[(3), int32] */;
    %724 = cast(%var_5046, dtype="uint8") /* ty=Tensor[(14, 4, 10), uint8] */;
    %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %726 = right_shift(%724, %725) /* ty=Tensor[(14, 4, 10), uint8] */;
    %727 = cast(%726, dtype="float32") /* ty=Tensor[(14, 4, 10), float32] */;
    %728 = cos(%727) /* ty=Tensor[(14, 4, 10), float32] */;
    %729 = cast(%728, dtype="float64") /* ty=Tensor[(14, 4, 10), float64] */;
    %730 = log10(%729) /* ty=Tensor[(14, 4, 10), float64] */;
    %731 = cast(%728, dtype="int8") /* ty=Tensor[(14, 4, 10), int8] */;
    %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
    %733 = cast(%730, dtype="int8") /* ty=Tensor[(14, 4, 10), int8] */;
    %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %735 = left_shift(%733, %734) /* ty=Tensor[(14, 4, 10), int8] */;
    %736 = cast(%730, dtype="bool") /* ty=Tensor[(14, 4, 10), bool] */;
    %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
    %738 = cast(%735, dtype="bool") /* ty=Tensor[(14, 4, 10), bool] */;
    %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%738, %739) /* ty=Tensor[(14, 4, 10), bool] */
  };
  %740(%var_5088, %var_5089) /* ty=Tensor[(14, 4, 10), bool] */
}

def @func_8111() -> (Tensor[(11, 4, 10), int32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) {
  @func_8109() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16]) */
}

def @func_4315() -> Tensor[(11, 4, 10), uint16] {
  @func_4313() /* ty=Tensor[(11, 4, 10), uint16] */
}

def @func_5189(%var_5146: Tensor[(2, 1200), float32]) -> (Tensor[(11, 4, 10), int32], Tensor[(16, 15, 10), float32], Tensor[(2, 1200), float64]) {
  %741 = cast(%var_5146, dtype="float32") /* ty=Tensor[(2, 1200), float32] */;
  %742 = reshape(%741, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), float32] */;
  %743 = @func_3101(%742) /* ty=(Tensor[(16, 15, 10), float32],) */;
  %744 = cast(%var_5146, dtype="float64") /* ty=Tensor[(2, 1200), float64] */;
  %745 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
  %746 = %743.0;
  %747 = sinh(%744) /* ty=Tensor[(2, 1200), float64] */;
  (%745, %746, %747)
}

def @func_4891() -> Tensor[(11, 4, 10), uint16] {
  @func_4889() /* ty=Tensor[(11, 4, 10), uint16] */
}

def @func_7748(%var_7747: Tensor[(1, 36), bool]) -> (Tensor[(154), uint32], Tensor[(11, 3, 6), int32], Tensor[(16, 16), float32], Tensor[(1, 36), bool], Tensor[(468), bool]) {
  %760 = fn (%var_7732: Tensor[(1, 36), bool]) -> (Tensor[(154), uint32], Tensor[(11, 3, 6), int32], Tensor[(16, 16), float32], Tensor[(1, 36), bool], Tensor[(468), bool]) {
    %748 = @func_4835() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(65), float32], Tensor[(91, 9), float64], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(11, 4, 10), float32]) */;
    %749 = @func_6244() /* ty=(Tensor[(11, 3, 6), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 3, 2400), float32], Tensor[(2400), float32], Tensor[(16, 15, 10), float64]) */;
    %750 = cast(%var_7732, dtype="bool") /* ty=Tensor[(1, 36), bool] */;
    %751 = cast(meta[relay.Constant][53] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
    %752 = cast(meta[relay.Constant][53] /* ty=Tensor[(468), bool] */, dtype="float32") /* ty=Tensor[(468), float32] */;
    %753 = reshape(%750, newshape=[1, 12, 3]) /* ty=Tensor[(1, 12, 3), bool] */;
    %754 = reshape(%751, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), bool] */;
    %755 = reshape(%752, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), float32] */;
    %756 = @func_2728(%753, %754, %755) /* ty=(Tensor[(5, 1, 13), float32], Tensor[(65), float32], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(16, 16), float32], Tensor[(13, 12, 3), uint8], Tensor[(13, 12, 3), float64], Tensor[(7, 5, 2), float64], Tensor[(8), uint16]) */;
    %757 = %748.6;
    %758 = %749.0;
    %759 = %756.4;
    (%757, %758, %759, %var_7732, meta[relay.Constant][53] /* ty=Tensor[(468), bool] */)
  };
  %760(%var_7747) /* ty=(Tensor[(154), uint32], Tensor[(11, 3, 6), int32], Tensor[(16, 16), float32], Tensor[(1, 36), bool], Tensor[(468), bool]) */
}

def @func_6719() -> Tensor[(16, 3, 14), float64] {
  @func_6717() /* ty=Tensor[(16, 3, 14), float64] */
}

def @func_5764() -> (Tensor[(11, 4, 10), float32], Tensor[(2, 1200), bool]) {
  @func_5762() /* ty=(Tensor[(11, 4, 10), float32], Tensor[(2, 1200), bool]) */
}

def @func_8143(%var_8127: Tensor[(8), uint16], %var_8128: Tensor[(256), float64]) -> (Tensor[(11, 4, 10), uint16], Tensor[(256), float64], Tensor[(8), uint16], Tensor[(256), float64], Tensor[(11, 4, 10), int32]) {
  %761 = cast(%var_8127, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %762 = cast(%var_8128, dtype="float64") /* ty=Tensor[(256), float64] */;
  %763 = reshape(%761, newshape=[8]) /* ty=Tensor[(8), uint16] */;
  %764 = reshape(%762, newshape=[256]) /* ty=Tensor[(256), float64] */;
  %765 = @func_891(%763, %764) /* ty=(Tensor[(154, 1), uint32], Tensor[(70), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(1, 2, 4), uint16], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64], Tensor[(16, 13, 10), uint32], Tensor[(16, 13, 10), float64]) */;
  %766 = @func_6767() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %767 = @func_4889() /* ty=Tensor[(11, 4, 10), uint16] */;
  %768 = %765.6;
  %769 = %766.0;
  (%767, %768, %var_8127, %var_8128, %769)
}

def @func_5245() -> Tensor[(16, 3, 14), float64] {
  @func_5243() /* ty=Tensor[(16, 3, 14), float64] */
}

def @func_6044() -> (Tensor[(8), uint16],) {
  %770 = @func_5709() /* ty=(Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16], Tensor[(11, 4, 10), int32]) */;
  %771 = %770.3;
  (%771,)
}

def @func_8545() -> (Tensor[(11, 4, 10), int32],) {
  %773 = fn () -> (Tensor[(11, 4, 10), int32],) {
    %772 = @func_5337() /* ty=Tensor[(11, 4, 10), int32] */;
    (%772,)
  };
  %773() /* ty=(Tensor[(11, 4, 10), int32],) */
}

def @func_7401(%var_7400: Tensor[(77, 1), uint32]) -> (Tensor[(16, 3, 14), float64], Tensor[(7, 11, 7), uint32], Tensor[(77, 1), uint32], Tensor[(539), uint32]) {
  %781 = fn (%var_7395: Tensor[(77, 1), uint32]) -> (Tensor[(16, 3, 14), float64], Tensor[(7, 11, 7), uint32], Tensor[(77, 1), uint32], Tensor[(539), uint32]) {
    %774 = cast(%var_7395, dtype="uint32") /* ty=Tensor[(77, 1), uint32] */;
    %775 = cast(meta[relay.Constant][54] /* ty=Tensor[(539), uint32] */, dtype="uint32") /* ty=Tensor[(539), uint32] */;
    %776 = reshape(%774, newshape=[7, 11, 1]) /* ty=Tensor[(7, 11, 1), uint32] */;
    %777 = reshape(%775, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint32] */;
    %778 = @func_4113(%776, %777) /* ty=(Tensor[(7, 11, 7), uint32],) */;
    %779 = @func_6717() /* ty=Tensor[(16, 3, 14), float64] */;
    %780 = %778.0;
    (%779, %780, %var_7395, meta[relay.Constant][54] /* ty=Tensor[(539), uint32] */)
  };
  %781(%var_7400) /* ty=(Tensor[(16, 3, 14), float64], Tensor[(7, 11, 7), uint32], Tensor[(77, 1), uint32], Tensor[(539), uint32]) */
}

def @func_7158(%var_7146: Tensor[(16, 3, 14), float64]) -> (Tensor[(16, 3, 14), float64],) {
  %782 = @func_5243() /* ty=Tensor[(16, 3, 14), float64] */;
  %783 = cast(%var_7146, dtype="uint16") /* ty=Tensor[(16, 3, 14), uint16] */;
  %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%782, dtype="uint16") /* ty=Tensor[(16, 3, 14), uint16] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %787 = add(%785, %786) /* ty=Tensor[(16, 3, 14), uint16] */;
  %788 = cast(%787, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
  %789 = asinh(%788) /* ty=Tensor[(16, 3, 14), float64] */;
  (%789,)
}

def @func_4170() -> Tensor[(11, 4, 10), int32] {
  @func_4168() /* ty=Tensor[(11, 4, 10), int32] */
}

def @func_6717() -> Tensor[(16, 3, 14), float64] {
  %790 = @func_5585() /* ty=(Tensor[(16, 3, 14), float64],) */;
  %791 = %790.0;
  %792 = cast(%791, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
  exp(%792) /* ty=Tensor[(16, 3, 14), float64] */
}

def @func_8065() -> (Tensor[(5, 9, 11), int32], Tensor[(11, 4, 10), int32]) {
  %793 = @func_7029() /* ty=(Tensor[(5, 9, 11), int32],) */;
  %794 = @func_4250() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %795 = %793.0;
  %796 = %794.0;
  (%795, %796)
}

def @func_7161(%var_7159: Tensor[(16, 3, 14), float64]) -> (Tensor[(16, 3, 14), float64],) {
  @func_7158(%var_7159) /* ty=(Tensor[(16, 3, 14), float64],) */
}

def @func_5858() -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), float64]) {
  %797 = @func_4250() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %798 = %797.0;
  %799 = @func_4086() /* ty=Tensor[(11, 4, 10), float64] */;
  (%798, %799)
}

def @func_4836() -> (Tensor[(11, 4, 10), int32], Tensor[(65), float32], Tensor[(91, 9), float64], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(11, 4, 10), float32]) {
  %817 = fn () -> (Tensor[(11, 4, 10), int32], Tensor[(65), float32], Tensor[(91, 9), float64], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(11, 4, 10), float32]) {
    %800 = @func_3244() /* ty=(Tensor[(11, 4, 10), int32],) */;
    %801 = cast(meta[relay.Constant][55] /* ty=Tensor[(91, 9), float64] */, dtype="float64") /* ty=Tensor[(91, 9), float64] */;
    %802 = cast(meta[relay.Constant][56] /* ty=Tensor[(70), uint32] */, dtype="uint32") /* ty=Tensor[(70), uint32] */;
    %803 = reshape(%801, newshape=[7, 117]) /* ty=Tensor[(7, 117), float64] */;
    %804 = reshape(%802, newshape=[1, 70]) /* ty=Tensor[(1, 70), uint32] */;
    %805 = @func_4056(%803, %804) /* ty=(Tensor[(11, 4, 10), float32], Tensor[(65), float32], Tensor[(7, 117), float64], Tensor[(1, 70), uint32], Tensor[(1, 8), uint16], Tensor[(1, 99), float64], Tensor[(2400), float32], uint16, Tensor[(16, 15, 10), float32], Tensor[(11, 4, 10), int32]) */;
    %806 = cast(meta[relay.Constant][57] /* ty=Tensor[(495), int32] */, dtype="int32") /* ty=Tensor[(495), int32] */;
    %807 = cast(meta[relay.Constant][58] /* ty=Tensor[(154), uint32] */, dtype="uint32") /* ty=Tensor[(154), uint32] */;
    %808 = reshape(%806, newshape=[495]) /* ty=Tensor[(495), int32] */;
    %809 = reshape(%807, newshape=[154]) /* ty=Tensor[(154), uint32] */;
    %810 = @func_4466(%808, %809) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(8), uint16]) */;
    %811 = %800.0;
    %812 = cast(%811, dtype="float64") /* ty=Tensor[(11, 4, 10), float64] */;
    %813 = reshape(%812, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float64] */;
    %814 = %805.1;
    %815 = %810.3;
    %816 = @func_4205(%813) /* ty=Tensor[(11, 4, 10), float32] */;
    (%811, %814, meta[relay.Constant][55] /* ty=Tensor[(91, 9), float64] */, meta[relay.Constant][56] /* ty=Tensor[(70), uint32] */, %815, meta[relay.Constant][57] /* ty=Tensor[(495), int32] */, meta[relay.Constant][58] /* ty=Tensor[(154), uint32] */, %816)
  };
  %817() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(65), float32], Tensor[(91, 9), float64], Tensor[(70), uint32], Tensor[(4, 16, 4), int64], Tensor[(495), int32], Tensor[(154), uint32], Tensor[(11, 4, 10), float32]) */
}

def @func_4205(%var_4173: Tensor[(11, 4, 10), float64]) -> Tensor[(11, 4, 10), float32] {
  %818 = @func_4086() /* ty=Tensor[(11, 4, 10), float64] */;
  %819 = cast(%var_4173, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
  %820 = shape_of(%818, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = cast(%818, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%821, %822) /* ty=Tensor[(11, 4, 10), float32] */
}

def @func_8046() -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32]) {
  %826 = fn () -> (Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32]) {
    %823 = @func_4250() /* ty=(Tensor[(11, 4, 10), int32],) */;
    %824 = %823.0;
    %825 = @func_3976() /* ty=Tensor[(11, 4, 10), int32] */;
    (%824, %825)
  };
  %826() /* ty=(Tensor[(11, 4, 10), int32], Tensor[(11, 4, 10), int32]) */
}

def @func_3196(%var_3194: Tensor[(7, 117), float64], %var_3195: Tensor[(70), uint32]) -> (Tensor[(15, 14, 10), float32], Tensor[(13, 7, 9), float64], Tensor[(7, 117), float64], Tensor[(5, 1, 13), float32], Tensor[(65), float32], uint32, Tensor[(11, 14), uint32], Tensor[(70), uint32]) {
  %843 = fn (%var_3173: Tensor[(7, 117), float64], %var_3189: Tensor[(70), uint32]) -> (Tensor[(15, 14, 10), float32], Tensor[(13, 7, 9), float64], Tensor[(7, 117), float64], Tensor[(5, 1, 13), float32], Tensor[(65), float32], uint32, Tensor[(11, 14), uint32], Tensor[(70), uint32]) {
    %827 = cast(meta[relay.Constant][59] /* ty=Tensor[(15, 14, 10), float32] */, dtype="float32") /* ty=Tensor[(15, 14, 10), float32] */;
    %828 = cast(%var_3173, dtype="float64") /* ty=Tensor[(7, 117), float64] */;
    %829 = reshape(%828, newshape=[13, 7, 9]) /* ty=Tensor[(13, 7, 9), float64] */;
    %830 = cast(meta[relay.Constant][60] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
    %831 = reshape(%830, newshape=[5, 1, 13]) /* ty=Tensor[(5, 1, 13), float32] */;
    %832 = cast(meta[relay.Constant][61] /* ty=Tensor[(11, 14), uint32] */, dtype="uint32") /* ty=Tensor[(11, 14), uint32] */;
    %833 = cast(meta[relay.Constant][61] /* ty=Tensor[(11, 14), uint32] */, dtype="uint32") /* ty=Tensor[(11, 14), uint32] */;
    %834 = cast(%var_3189, dtype="uint32") /* ty=Tensor[(70), uint32] */;
    %835 = reshape(%832, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
    %836 = reshape(%833, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
    %837 = reshape(%834, newshape=[14, 5]) /* ty=Tensor[(14, 5), uint32] */;
    %838 = @func_490(%835, %836, %837) /* ty=(Tensor[(7, 11, 2), bool], Tensor[(7, 5, 2), float64], uint32, Tensor[(14, 5), uint32]) */;
    %839 = atanh(%827) /* ty=Tensor[(15, 14, 10), float32] */;
    %840 = @func_1679(%829) /* ty=Tensor[(13, 7, 9), float64] */;
    %841 = @func_398(%831) /* ty=Tensor[(5, 1, 13), float32] */;
    %842 = %838.2;
    (%839, %840, %var_3173, %841, meta[relay.Constant][60] /* ty=Tensor[(65), float32] */, %842, meta[relay.Constant][61] /* ty=Tensor[(11, 14), uint32] */, %var_3189)
  };
  %843(%var_3194, %var_3195) /* ty=(Tensor[(15, 14, 10), float32], Tensor[(13, 7, 9), float64], Tensor[(7, 117), float64], Tensor[(5, 1, 13), float32], Tensor[(65), float32], uint32, Tensor[(11, 14), uint32], Tensor[(70), uint32]) */
}

def @func_3554(%var_3550: Tensor[(3, 13, 11), float32], %var_3551: Tensor[(3, 13, 11), float32], %var_3552: Tensor[(3, 13, 11), float32], %var_3553: Tensor[(468), bool]) -> (Tensor[(3, 13, 11), bool], Tensor[(11, 4, 10), bool], Tensor[(2400), float32], Tensor[(440), float32], Tensor[(16, 15, 10), float32], Tensor[(13, 12, 3), uint8], Tensor[(36), bool], Tensor[(468), bool]) {
  %874 = fn (%var_3516: Tensor[(3, 13, 11), float32], %var_3517: Tensor[(3, 13, 11), float32], %var_3526: Tensor[(3, 13, 11), float32], %var_3547: Tensor[(468), bool]) -> (Tensor[(3, 13, 11), bool], Tensor[(11, 4, 10), bool], Tensor[(2400), float32], Tensor[(440), float32], Tensor[(16, 15, 10), float32], Tensor[(13, 12, 3), uint8], Tensor[(36), bool], Tensor[(468), bool]) {
    %844 = cast(%var_3517, dtype="float32") /* ty=Tensor[(3, 13, 11), float32] */;
    %845 = shape_of(%var_3516, dtype="int32") /* ty=Tensor[(3), int32] */;
    %846 = cast(%var_3516, dtype="float32") /* ty=Tensor[(3, 13, 11), float32] */;
    %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %848 = power(%846, %847) /* ty=Tensor[(3, 13, 11), float32] */;
    %849 = cast(%var_3526, dtype="bool") /* ty=Tensor[(3, 13, 11), bool] */;
    %850 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
    %851 = cast(%848, dtype="bool") /* ty=Tensor[(3, 13, 11), bool] */;
    %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %853 = cast(meta[relay.Constant][62] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
    %854 = cast(meta[relay.Constant][63] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
    %855 = reshape(%853, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
    %856 = reshape(%854, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float32] */;
    %857 = @func_3486(%855, %856) /* ty=(Tensor[(16, 15, 10), float32], Tensor[(2400), float32], Tensor[(11, 4, 10), bool]) */;
    %858 = cast(meta[relay.Constant][62] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
    %859 = cast(meta[relay.Constant][63] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
    %860 = reshape(%858, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
    %861 = reshape(%859, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float32] */;
    %862 = @func_3486(%860, %861) /* ty=(Tensor[(16, 15, 10), float32], Tensor[(2400), float32], Tensor[(11, 4, 10), bool]) */;
    %863 = cast(meta[relay.Constant][64] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
    %864 = cast(%var_3547, dtype="bool") /* ty=Tensor[(468), bool] */;
    %865 = cast(%var_3547, dtype="float32") /* ty=Tensor[(468), float32] */;
    %866 = reshape(%863, newshape=[1, 12, 3]) /* ty=Tensor[(1, 12, 3), bool] */;
    %867 = reshape(%864, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), bool] */;
    %868 = reshape(%865, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), float32] */;
    %869 = @func_2728(%866, %867, %868) /* ty=(Tensor[(5, 1, 13), float32], Tensor[(65), float32], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(16, 16), float32], Tensor[(13, 12, 3), uint8], Tensor[(13, 12, 3), float64], Tensor[(7, 5, 2), float64], Tensor[(8), uint16]) */;
    %870 = greater(%851, %852) /* ty=Tensor[(3, 13, 11), bool] */;
    %871 = %857.2;
    %872 = %862.0;
    %873 = %869.5;
    (%870, %871, meta[relay.Constant][62] /* ty=Tensor[(2400), float32] */, meta[relay.Constant][63] /* ty=Tensor[(440), float32] */, %872, %873, meta[relay.Constant][64] /* ty=Tensor[(36), bool] */, %var_3547)
  };
  %874(%var_3550, %var_3551, %var_3552, %var_3553) /* ty=(Tensor[(3, 13, 11), bool], Tensor[(11, 4, 10), bool], Tensor[(2400), float32], Tensor[(440), float32], Tensor[(16, 15, 10), float32], Tensor[(13, 12, 3), uint8], Tensor[(36), bool], Tensor[(468), bool]) */
}

def @func_3685(%var_3682: Tensor[(11, 1, 9), float64], %var_3683: Tensor[(2400), float32], %var_3684: uint16) -> (Tensor[(2400), float32], Tensor[(2400), float32], Tensor[(1, 440), float32], Tensor[(1, 2, 4), uint16], Tensor[(1, 8), uint16], Tensor[(11, 1, 9), uint32]) {
  %891 = fn (%var_3659: Tensor[(11, 1, 9), float64], %var_3665: Tensor[(2400), float32], %var_3671: uint16) -> (Tensor[(2400), float32], Tensor[(2400), float32], Tensor[(1, 440), float32], Tensor[(1, 2, 4), uint16], Tensor[(1, 8), uint16], Tensor[(11, 1, 9), uint32]) {
    %875 = cast(%var_3665, dtype="float32") /* ty=Tensor[(2400), float32] */;
    %876 = cast(meta[relay.Constant][65] /* ty=Tensor[(1, 440), float32] */, dtype="float32") /* ty=Tensor[(1, 440), float32] */;
    %877 = reshape(%875, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
    %878 = reshape(%876, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float32] */;
    %879 = @func_3486(%877, %878) /* ty=(Tensor[(16, 15, 10), float32], Tensor[(2400), float32], Tensor[(11, 4, 10), bool]) */;
    %880 = cast(%var_3671, dtype="uint16") /* ty=uint16 */;
    %881 = cast(meta[relay.Constant][66] /* ty=Tensor[(1, 8), uint16] */, dtype="uint16") /* ty=Tensor[(1, 8), uint16] */;
    %882 = reshape(%880, newshape=[]) /* ty=uint16 */;
    %883 = reshape(%881, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
    %884 = cast(%var_3659, dtype="float64") /* ty=Tensor[(11, 1, 9), float64] */;
    %885 = sinh(%884) /* ty=Tensor[(11, 1, 9), float64] */;
    %886 = cast(%885, dtype="uint32") /* ty=Tensor[(11, 1, 9), uint32] */;
    %887 = cast(%var_3671, dtype="uint32") /* ty=uint32 */;
    %888 = %879.1;
    %889 = @func_211(%882, %883) /* ty=Tensor[(1, 2, 4), uint16] */;
    %890 = add(%886, %887) /* ty=Tensor[(11, 1, 9), uint32] */;
    (%888, %var_3665, meta[relay.Constant][65] /* ty=Tensor[(1, 440), float32] */, %889, meta[relay.Constant][66] /* ty=Tensor[(1, 8), uint16] */, %890)
  };
  %891(%var_3682, %var_3683, %var_3684) /* ty=(Tensor[(2400), float32], Tensor[(2400), float32], Tensor[(1, 440), float32], Tensor[(1, 2, 4), uint16], Tensor[(1, 8), uint16], Tensor[(11, 1, 9), uint32]) */
}

def @func_6394(%var_6392: Tensor[(154), uint32], %var_6393: Tensor[(70), uint32]) -> (Tensor[(16, 3, 14), float64], uint16, uint32, Tensor[(154), uint32], Tensor[(70), uint32], Tensor[(11, 4, 10), uint16]) {
  %904 = fn (%var_6375: Tensor[(154), uint32], %var_6376: Tensor[(70), uint32]) -> (Tensor[(16, 3, 14), float64], uint16, uint32, Tensor[(154), uint32], Tensor[(70), uint32], Tensor[(11, 4, 10), uint16]) {
    %892 = @func_5709() /* ty=(Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8), uint16], Tensor[(11, 4, 10), int32]) */;
    %893 = cast(%var_6375, dtype="uint32") /* ty=Tensor[(154), uint32] */;
    %894 = cast(%var_6375, dtype="uint32") /* ty=Tensor[(154), uint32] */;
    %895 = cast(%var_6376, dtype="uint32") /* ty=Tensor[(70), uint32] */;
    %896 = reshape(%893, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
    %897 = reshape(%894, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
    %898 = reshape(%895, newshape=[14, 5]) /* ty=Tensor[(14, 5), uint32] */;
    %899 = @func_490(%896, %897, %898) /* ty=(Tensor[(7, 11, 2), bool], Tensor[(7, 5, 2), float64], uint32, Tensor[(14, 5), uint32]) */;
    %900 = @func_5243() /* ty=Tensor[(16, 3, 14), float64] */;
    %901 = %892.2;
    %902 = %899.2;
    %903 = @func_4313() /* ty=Tensor[(11, 4, 10), uint16] */;
    (%900, %901, %902, %var_6375, %var_6376, %903)
  };
  %904(%var_6392, %var_6393) /* ty=(Tensor[(16, 3, 14), float64], uint16, uint32, Tensor[(154), uint32], Tensor[(70), uint32], Tensor[(11, 4, 10), uint16]) */
}

def @func_4331(%var_4329: Tensor[(1, 13, 12), float64]) -> Tensor[(1, 13, 12), float64] {
  @func_4328(%var_4329) /* ty=Tensor[(1, 13, 12), float64] */
}

def @func_8979(%var_8888: Tensor[(2, 504), float64]) -> (Tensor[(11, 4, 10), int32], Tensor[(1, 65), float32], Tensor[(65), float32], Tensor[(8, 1), uint16], Tensor[(1248), float64], uint16, Tensor[(455, 504), bool], Tensor[(1, 1248), float64], Tensor[(2, 504), bool], Tensor[(2, 504), float64], Tensor[(455, 504), float64]) {
  %905 = cast(meta[relay.Constant][67] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %906 = reshape(%905, newshape=[1, 65]) /* ty=Tensor[(1, 65), float32] */;
  %907 = @func_8155(%906) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(5, 1, 13), float32], Tensor[(1, 65), float32]) */;
  %908 = @func_3566() /* ty=Tensor[(11, 4, 10), int32] */;
  %909 = cast(%908, dtype="int32") /* ty=Tensor[(11, 4, 10), int32] */;
  %910 = cast(meta[relay.Constant][68] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %911 = cast(meta[relay.Constant][69] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %912 = reshape(%909, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), int32] */;
  %913 = reshape(%910, newshape=[1, 1248]) /* ty=Tensor[(1, 1248), float64] */;
  %914 = reshape(%911, newshape=[]) /* ty=uint16 */;
  %915 = @func_3941(%912, %913, %914) /* ty=(Tensor[(11, 4, 10), bool], Tensor[(13, 12, 8), float64], Tensor[(1, 1248), float64], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8, 1), uint16]) */;
  %916 = cast(meta[relay.Constant][70] /* ty=Tensor[(455, 1), float64] */, dtype="bool") /* ty=Tensor[(455, 1), bool] */;
  %917 = cast(meta[relay.Constant][71] /* ty=Tensor[(504), float64] */, dtype="bool") /* ty=Tensor[(504), bool] */;
  %918 = cast(%908, dtype="int32") /* ty=Tensor[(11, 4, 10), int32] */;
  %919 = cast(meta[relay.Constant][68] /* ty=Tensor[(1248), float64] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %920 = cast(meta[relay.Constant][69] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %921 = reshape(%918, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), int32] */;
  %922 = reshape(%919, newshape=[1, 1248]) /* ty=Tensor[(1, 1248), float64] */;
  %923 = reshape(%920, newshape=[]) /* ty=uint16 */;
  %924 = @func_3941(%921, %922, %923) /* ty=(Tensor[(11, 4, 10), bool], Tensor[(13, 12, 8), float64], Tensor[(1, 1248), float64], Tensor[(1, 2, 4), uint16], uint16, Tensor[(8, 1), uint16]) */;
  %925 = cast(meta[relay.Constant][70] /* ty=Tensor[(455, 1), float64] */, dtype="float64") /* ty=Tensor[(455, 1), float64] */;
  %926 = cast(%var_8888, dtype="float64") /* ty=Tensor[(2, 504), float64] */;
  %927 = cast(meta[relay.Constant][71] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %928 = reshape(%925, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), float64] */;
  %929 = reshape(%926, newshape=[1008]) /* ty=Tensor[(1008), float64] */;
  %930 = reshape(%927, newshape=[36, 14]) /* ty=Tensor[(36, 14), float64] */;
  %931 = @func_4575(%928, %929, %930) /* ty=(Tensor[(5, 13, 7), float64], Tensor[(6, 12, 14), float64], Tensor[(1008), float64], uint16, Tensor[(36, 14), float64], uint16, Tensor[(8), uint16], Tensor[(11, 4, 10), bool], Tensor[(2400), float32], Tensor[(440), float32], Tensor[(11, 4, 10), float32], Tensor[(1, 2, 4), uint16]) */;
  %932 = %931.1;
  %933 = cast(%932, dtype="bool") /* ty=Tensor[(6, 12, 14), bool] */;
  %934 = shape_of(%var_8888, dtype="int32") /* ty=Tensor[(2), int32] */;
  %935 = cast(%var_8888, dtype="bool") /* ty=Tensor[(2, 504), bool] */;
  %936 = dyn.reshape(%933, %934, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %937 = cast(%932, dtype="float32") /* ty=Tensor[(6, 12, 14), float32] */;
  %938 = shape_of(%var_8888, dtype="int32") /* ty=Tensor[(2), int32] */;
  %939 = cast(%var_8888, dtype="float32") /* ty=Tensor[(2, 504), float32] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %941 = mod(%939, %940) /* ty=Tensor[(2, 504), float32] */;
  %942 = cast(%941, dtype="float64") /* ty=Tensor[(2, 504), float64] */;
  %943 = shape_of(%var_8888, dtype="int32") /* ty=Tensor[(2), int32] */;
  %944 = cast(%var_8888, dtype="float64") /* ty=Tensor[(2, 504), float64] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %946 = cast(meta[relay.Constant][70] /* ty=Tensor[(455, 1), float64] */, dtype="float64") /* ty=Tensor[(455, 1), float64] */;
  %947 = cast(meta[relay.Constant][71] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %948 = %907.2;
  %949 = %915.5;
  %950 = less(%916, %917) /* ty=Tensor[(455, 504), bool] */;
  %951 = %924.2;
  %952 = not_equal(%935, %936) /* ty=Tensor[(2, 504), bool] */;
  %953 = multiply(%944, %945) /* ty=Tensor[(2, 504), float64] */;
  %954 = floor_divide(%946, %947) /* ty=Tensor[(455, 504), float64] */;
  (%908, %948, meta[relay.Constant][67] /* ty=Tensor[(65), float32] */, %949, meta[relay.Constant][68] /* ty=Tensor[(1248), float64] */, meta[relay.Constant][69] /* ty=uint16 */, %950, %951, %952, %953, %954)
}

def @func_5458(%var_5450: Tensor[(16, 3, 14), float64]) -> Tensor[(16, 3, 14), bool] {
  %955 = @func_5243() /* ty=Tensor[(16, 3, 14), float64] */;
  %956 = cast(%var_5450, dtype="bool") /* ty=Tensor[(16, 3, 14), bool] */;
  %957 = shape_of(%955, dtype="int32") /* ty=Tensor[(3), int32] */;
  %958 = cast(%955, dtype="bool") /* ty=Tensor[(16, 3, 14), bool] */;
  %959 = dyn.reshape(%956, %957, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%958, %959) /* ty=Tensor[(16, 3, 14), bool] */
}

def @func_7495(%var_7481: Tensor[(4, 6, 1), float64]) -> (Tensor[(70), uint32], Tensor[(385), float32], Tensor[(7, 10), uint32], Tensor[(4, 6, 1), float32]) {
  %960 = cast(meta[relay.Constant][72] /* ty=Tensor[(385), float32] */, dtype="float32") /* ty=Tensor[(385), float32] */;
  %961 = cast(meta[relay.Constant][73] /* ty=Tensor[(7, 10), uint32] */, dtype="uint32") /* ty=Tensor[(7, 10), uint32] */;
  %962 = reshape(%960, newshape=[11, 7, 5]) /* ty=Tensor[(11, 7, 5), float32] */;
  %963 = reshape(%961, newshape=[70]) /* ty=Tensor[(70), uint32] */;
  %964 = @func_4153(%962, %963) /* ty=(Tensor[(11, 7, 5), float32], Tensor[(7, 11, 2), bool], Tensor[(154), uint32], Tensor[(70), uint32]) */;
  %965 = cast(%var_7481, dtype="float64") /* ty=Tensor[(4, 6, 1), float64] */;
  %966 = sigmoid(%965) /* ty=Tensor[(4, 6, 1), float64] */;
  %967 = cast(%966, dtype="float32") /* ty=Tensor[(4, 6, 1), float32] */;
  %968 = %964.3;
  %969 = sqrt(%967) /* ty=Tensor[(4, 6, 1), float32] */;
  (%968, meta[relay.Constant][72] /* ty=Tensor[(385), float32] */, meta[relay.Constant][73] /* ty=Tensor[(7, 10), uint32] */, %969)
}

def @func_3216(%var_3214: Tensor[(6, 12, 14), float64], %var_3215: Tensor[(6, 12, 14), float64]) -> Tensor[(6, 12, 14), float64] {
  @func_3212(%var_3214, %var_3215) /* ty=Tensor[(6, 12, 14), float64] */
}

def @func_4313() -> Tensor[(11, 4, 10), uint16] {
  %970 = @func_3566() /* ty=Tensor[(11, 4, 10), int32] */;
  %971 = cast(meta[relay.Constant][74] /* ty=Tensor[(11, 4, 10), int32] */, dtype="uint16") /* ty=Tensor[(11, 4, 10), uint16] */;
  %972 = shape_of(%970, dtype="int32") /* ty=Tensor[(3), int32] */;
  %973 = cast(%970, dtype="uint16") /* ty=Tensor[(11, 4, 10), uint16] */;
  %974 = dyn.reshape(%971, %972, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  logical_xor(%973, %974) /* ty=Tensor[(11, 4, 10), uint16] */
}

def @func_5192(%var_5190: Tensor[(2, 1200), float32]) -> (Tensor[(11, 4, 10), int32], Tensor[(16, 15, 10), float32], Tensor[(2, 1200), float64]) {
  @func_5189(%var_5190) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(16, 15, 10), float32], Tensor[(2, 1200), float64]) */
}

def @func_6291(%var_6289: Tensor[(196), uint64], %var_6290: Tensor[(154), uint32]) -> (Tensor[(11, 4, 10), float64], Tensor[(4, 16, 4), int64], Tensor[(196), uint64], Tensor[(154), uint32]) {
  @func_6287(%var_6289, %var_6290) /* ty=(Tensor[(11, 4, 10), float64], Tensor[(4, 16, 4), int64], Tensor[(196), uint64], Tensor[(154), uint32]) */
}

def @func_3103(%var_3102: Tensor[(16, 15, 10), float32]) -> (Tensor[(16, 15, 10), float32],) {
  %977 = fn (%var_3095: Tensor[(16, 15, 10), float32]) -> (Tensor[(16, 15, 10), float32],) {
    %975 = cast(%var_3095, dtype="float32") /* ty=Tensor[(16, 15, 10), float32] */;
    %976 = acosh(%975) /* ty=Tensor[(16, 15, 10), float32] */;
    (%976,)
  };
  %977(%var_3102) /* ty=(Tensor[(16, 15, 10), float32],) */
}

def @func_3568() -> Tensor[(11, 4, 10), int32] {
  @func_3566() /* ty=Tensor[(11, 4, 10), int32] */
}

def @func_2513(%var_2512: Tensor[(16, 16), float32]) -> (Tensor[(16, 16), float32], Tensor[(4, 16, 4), bool]) {
  %988 = fn (%var_2490: Tensor[(16, 16), float32]) -> (Tensor[(16, 16), float32], Tensor[(4, 16, 4), bool]) {
    %978 = cast(%var_2490, dtype="float32") /* ty=Tensor[(16, 16), float32] */;
    %979 = log(%978) /* ty=Tensor[(16, 16), float32] */;
    %980 = cast(%979, dtype="float64") /* ty=Tensor[(16, 16), float64] */;
    %981 = reshape(%980, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float64] */;
    %982 = @func_720(%981) /* ty=Tensor[(4, 16, 4), int64] */;
    %983 = cast(meta[relay.Constant][75] /* ty=Tensor[(4, 16, 4), int64] */, dtype="bool") /* ty=Tensor[(4, 16, 4), bool] */;
    %984 = shape_of(%982, dtype="int32") /* ty=Tensor[(3), int32] */;
    %985 = cast(%982, dtype="bool") /* ty=Tensor[(4, 16, 4), bool] */;
    %986 = dyn.reshape(%983, %984, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %987 = logical_and(%985, %986) /* ty=Tensor[(4, 16, 4), bool] */;
    (%979, %987)
  };
  %988(%var_2512) /* ty=(Tensor[(16, 16), float32], Tensor[(4, 16, 4), bool]) */
}

def @func_8192() -> Tensor[(11, 4, 10), int32] {
  %990 = fn () -> Tensor[(11, 4, 10), int32] {
    %989 = @func_3244() /* ty=(Tensor[(11, 4, 10), int32],) */;
    %989.0
  };
  %990() /* ty=Tensor[(11, 4, 10), int32] */
}

def @func_8067() -> (Tensor[(5, 9, 11), int32], Tensor[(11, 4, 10), int32]) {
  @func_8065() /* ty=(Tensor[(5, 9, 11), int32], Tensor[(11, 4, 10), int32]) */
}

def @func_891(%var_828: Tensor[(8), uint16], %var_848: Tensor[(256), float64]) -> (Tensor[(154, 1), uint32], Tensor[(70), uint64], Tensor[(1, 2, 4), uint16], Tensor[(8), uint16], Tensor[(1, 2, 4), uint16], Tensor[(4, 16, 4), int64], Tensor[(256), float64], Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64], Tensor[(16, 13, 10), uint32], Tensor[(16, 13, 10), float64]) {
  %991 = cast(meta[relay.Constant][76] /* ty=Tensor[(154, 1), uint32] */, dtype="uint32") /* ty=Tensor[(154, 1), uint32] */;
  %992 = cast(meta[relay.Constant][76] /* ty=Tensor[(154, 1), uint32] */, dtype="uint32") /* ty=Tensor[(154, 1), uint32] */;
  %993 = cast(meta[relay.Constant][77] /* ty=Tensor[(70), uint32] */, dtype="uint32") /* ty=Tensor[(70), uint32] */;
  %994 = reshape(%991, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
  %995 = reshape(%992, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint32] */;
  %996 = reshape(%993, newshape=[14, 5]) /* ty=Tensor[(14, 5), uint32] */;
  %997 = @func_490(%994, %995, %996) /* ty=(Tensor[(7, 11, 2), bool], Tensor[(7, 5, 2), float64], uint32, Tensor[(14, 5), uint32]) */;
  %998 = %997.3;
  %999 = cast(%998, dtype="uint64") /* ty=Tensor[(14, 5), uint64] */;
  %1000 = shape_of(meta[relay.Constant][77] /* ty=Tensor[(70), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1001 = cast(meta[relay.Constant][77] /* ty=Tensor[(70), uint32] */, dtype="uint64") /* ty=Tensor[(70), uint64] */;
  %1002 = dyn.reshape(%999, %1000, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %1003 = cast(meta[relay.Constant][78] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1004 = cast(%var_828, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %1005 = reshape(%1003, newshape=[]) /* ty=uint16 */;
  %1006 = reshape(%1004, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %1007 = cast(meta[relay.Constant][78] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1008 = cast(%var_828, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %1009 = reshape(%1007, newshape=[]) /* ty=uint16 */;
  %1010 = reshape(%1008, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %1011 = cast(%var_848, dtype="float64") /* ty=Tensor[(256), float64] */;
  %1012 = reshape(%1011, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float64] */;
  %1013 = cast(meta[relay.Constant][78] /* ty=uint16 */, dtype="uint32") /* ty=uint32 */;
  %1014 = cast(%998, dtype="uint32") /* ty=Tensor[(14, 5), uint32] */;
  %1015 = reshape(%1013, newshape=[]) /* ty=uint32 */;
  %1016 = reshape(%1014, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
  %1017 = @func_125(%1015, %1016) /* ty=(Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64]) */;
  %1018 = cast(meta[relay.Constant][78] /* ty=uint16 */, dtype="uint32") /* ty=uint32 */;
  %1019 = %1017.0;
  %1020 = cast(%1019, dtype="uint32") /* ty=Tensor[(7, 5, 2), uint32] */;
  %1021 = reshape(%1018, newshape=[]) /* ty=uint32 */;
  %1022 = reshape(%1020, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
  %1023 = @func_125(%1021, %1022) /* ty=(Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64]) */;
  %1024 = cast(meta[relay.Constant][79] /* ty=Tensor[(16, 13, 10), float64] */, dtype="float64") /* ty=Tensor[(16, 13, 10), float64] */;
  %1025 = asinh(%1024) /* ty=Tensor[(16, 13, 10), float64] */;
  %1026 = cast(%1025, dtype="uint32") /* ty=Tensor[(16, 13, 10), uint32] */;
  %1027 = cast(meta[relay.Constant][78] /* ty=uint16 */, dtype="uint32") /* ty=uint32 */;
  %1028 = cast(%1025, dtype="float64") /* ty=Tensor[(16, 13, 10), float64] */;
  %1029 = maximum(%1001, %1002) /* ty=Tensor[(70), uint64] */;
  %1030 = @func_211(%1005, %1006) /* ty=Tensor[(1, 2, 4), uint16] */;
  %1031 = @func_211(%1009, %1010) /* ty=Tensor[(1, 2, 4), uint16] */;
  %1032 = @func_720(%1012) /* ty=Tensor[(4, 16, 4), int64] */;
  %1033 = %1023.1;
  %1034 = minimum(%1026, %1027) /* ty=Tensor[(16, 13, 10), uint32] */;
  %1035 = log2(%1028) /* ty=Tensor[(16, 13, 10), float64] */;
  (meta[relay.Constant][76] /* ty=Tensor[(154, 1), uint32] */, %1029, %1030, %var_828, %1031, %1032, %var_848, %1019, %1033, %1034, %1035)
}

def @func_6146() -> Tensor[(16, 3, 14), float64] {
  %1036 = @func_5585() /* ty=(Tensor[(16, 3, 14), float64],) */;
  %1037 = %1036.0;
  %1038 = cast(%1037, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
  sqrt(%1038) /* ty=Tensor[(16, 3, 14), float64] */
}

def @func_3245() -> (Tensor[(11, 4, 10), int32],) {
  %1046 = fn () -> (Tensor[(11, 4, 10), int32],) {
    %1039 = cast(meta[relay.Constant][80] /* ty=Tensor[(11, 4, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 4, 10), float64] */;
    %1040 = sqrt(%1039) /* ty=Tensor[(11, 4, 10), float64] */;
    %1041 = cast(%1040, dtype="int32") /* ty=Tensor[(11, 4, 10), int32] */;
    %1042 = shape_of(meta[relay.Constant][80] /* ty=Tensor[(11, 4, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1043 = cast(meta[relay.Constant][80] /* ty=Tensor[(11, 4, 10), float64] */, dtype="int32") /* ty=Tensor[(11, 4, 10), int32] */;
    %1044 = dyn.reshape(%1041, %1042, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %1045 = add(%1043, %1044) /* ty=Tensor[(11, 4, 10), int32] */;
    (%1045,)
  };
  %1046() /* ty=(Tensor[(11, 4, 10), int32],) */
}

def @func_490(%var_438: Tensor[(7, 11, 2), uint32], %var_439: Tensor[(7, 11, 2), uint32], %var_453: Tensor[(14, 5), uint32]) -> (Tensor[(7, 11, 2), bool], Tensor[(7, 5, 2), float64], uint32, Tensor[(14, 5), uint32]) {
  %1047 = cast(%var_439, dtype="bool") /* ty=Tensor[(7, 11, 2), bool] */;
  %1048 = shape_of(%var_438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1049 = cast(%var_438, dtype="bool") /* ty=Tensor[(7, 11, 2), bool] */;
  %1050 = dyn.reshape(%1047, %1048, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1051 = cast(meta[relay.Constant][81] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %1052 = cast(%var_453, dtype="uint32") /* ty=Tensor[(14, 5), uint32] */;
  %1053 = reshape(%1051, newshape=[]) /* ty=uint32 */;
  %1054 = reshape(%1052, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
  %1055 = @func_125(%1053, %1054) /* ty=(Tensor[(7, 5, 2), uint32], Tensor[(7, 5, 2), float64]) */;
  %1056 = greater(%1049, %1050) /* ty=Tensor[(7, 11, 2), bool] */;
  %1057 = %1055.1;
  (%1056, %1057, meta[relay.Constant][81] /* ty=uint32 */, %var_453)
}

def @func_211(%var_194: uint16, %var_195: Tensor[(1, 2, 4), uint16]) -> Tensor[(1, 2, 4), uint16] {
  %1058 = cast(%var_194, dtype="uint16") /* ty=uint16 */;
  %1059 = cast(%var_195, dtype="uint16") /* ty=Tensor[(1, 2, 4), uint16] */;
  multiply(%1058, %1059) /* ty=Tensor[(1, 2, 4), uint16] */
}

def @func_9013() -> Tensor[(11, 4, 10), float64] {
  @func_4086() /* ty=Tensor[(11, 4, 10), float64] */
}

def @func_6244() -> (Tensor[(11, 3, 6), int32], Tensor[(11, 4, 10), int32], Tensor[(11, 3, 2400), float32], Tensor[(2400), float32], Tensor[(16, 15, 10), float64]) {
  %1060 = cast(meta[relay.Constant][82] /* ty=Tensor[(11, 3, 1), int32] */, dtype="int32") /* ty=Tensor[(11, 3, 1), int32] */;
  %1061 = cast(meta[relay.Constant][83] /* ty=Tensor[(11, 3, 6), int32] */, dtype="int32") /* ty=Tensor[(11, 3, 6), int32] */;
  %1062 = @func_3244() /* ty=(Tensor[(11, 4, 10), int32],) */;
  %1063 = cast(meta[relay.Constant][84] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %1064 = cast(meta[relay.Constant][82] /* ty=Tensor[(11, 3, 1), int32] */, dtype="float32") /* ty=Tensor[(11, 3, 1), float32] */;
  %1065 = cast(meta[relay.Constant][84] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %1066 = cast(meta[relay.Constant][84] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %1067 = reshape(%1066, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), float32] */;
  %1068 = @func_3101(%1067) /* ty=(Tensor[(16, 15, 10), float32],) */;
  %1069 = %1068.0;
  %1070 = cast(%1069, dtype="float64") /* ty=Tensor[(16, 15, 10), float64] */;
  %1071 = left_shift(%1060, %1061) /* ty=Tensor[(11, 3, 6), int32] */;
  %1072 = %1062.0;
  %1073 = mod(%1063, %1064) /* ty=Tensor[(11, 3, 2400), float32] */;
  %1074 = rsqrt(%1065) /* ty=Tensor[(2400), float32] */;
  %1075 = asinh(%1070) /* ty=Tensor[(16, 15, 10), float64] */;
  (%1071, %1072, %1073, %1074, %1075)
}

def @func_3822() -> (Tensor[(11, 4, 10), int32],) {
  %1077 = fn () -> (Tensor[(11, 4, 10), int32],) {
    %1076 = @func_3566() /* ty=Tensor[(11, 4, 10), int32] */;
    (%1076,)
  };
  %1077() /* ty=(Tensor[(11, 4, 10), int32],) */
}

def @func_5461(%var_5459: Tensor[(16, 3, 14), float64]) -> Tensor[(16, 3, 14), bool] {
  @func_5458(%var_5459) /* ty=Tensor[(16, 3, 14), bool] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen358/build/output.py", line 2533, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:09:59] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

