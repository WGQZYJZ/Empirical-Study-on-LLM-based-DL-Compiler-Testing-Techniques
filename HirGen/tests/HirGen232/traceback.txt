==========mod==========
#[version = "0.0.5"]
def @func_3558(%var_3556: Tensor[(5, 104), bool]) -> (Tensor[(6, 8, 10), uint8], Tensor[(10, 13, 4), bool], Tensor[(5, 104), bool]) {
  %0 = @func_2966() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %1 = cast(%var_3556, dtype="bool") /* ty=Tensor[(5, 104), bool] */;
  %2 = reshape(%1, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), bool] */;
  %3 = @func_1819(%2) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(2, 3, 13), float32], Tensor[(26, 3), float32]) */;
  %4 = %0.0;
  %5 = %3.0;
  (%4, %5, %var_3556)
}

def @func_7884() -> Tensor[(6, 8, 10), uint8] {
  %6 = @func_6633() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %6.0
}

def @func_3981() -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) {
  %7 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %8 = @func_3690() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %9 = %7.0;
  %10 = %8.0;
  (%9, %10)
}

def @func_1362(%var_1314: Tensor[(15, 3, 10), int16], %var_1322: Tensor[(2, 416), float32], %var_1342: Tensor[(2240), float32], %var_1358: Tensor[(2145), int32]) -> (Tensor[(8, 8, 13), float32], Tensor[(15, 3, 10), int64], Tensor[(12, 12, 14), float32], Tensor[(288), int32], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(8, 3, 12), int32], Tensor[(10, 16, 14), float32], Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(2, 416), float32]) {
  %11 = cast(%var_1322, dtype="float32") /* ty=Tensor[(2, 416), float32] */;
  %12 = cast(%var_1322, dtype="float32") /* ty=Tensor[(2, 416), float32] */;
  %13 = cast(%var_1322, dtype="float64") /* ty=Tensor[(2, 416), float64] */;
  %14 = reshape(%11, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %15 = reshape(%12, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %16 = reshape(%13, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %17 = @func_639(%14, %15, %16) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32], Tensor[(8, 8, 13), bool]) */;
  %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 3, 10), int16] */, dtype="int16") /* ty=Tensor[(15, 3, 10), int16] */;
  %19 = shape_of(%var_1314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%var_1314, dtype="int16") /* ty=Tensor[(15, 3, 10), int16] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %22 = left_shift(%20, %21) /* ty=Tensor[(15, 3, 10), int16] */;
  %23 = cast(%22, dtype="float32") /* ty=Tensor[(15, 3, 10), float32] */;
  %24 = sin(%23) /* ty=Tensor[(15, 3, 10), float32] */;
  %25 = cast(%22, dtype="int64") /* ty=Tensor[(15, 3, 10), int64] */;
  %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%24, dtype="int64") /* ty=Tensor[(15, 3, 10), int64] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %29 = cast(meta[relay.Constant][1] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %30 = reshape(%29, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %31 = @func_447(%30) /* ty=(Tensor[(12, 12, 14), float64], Tensor[(12, 12, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32]) */;
  %32 = cast(%var_1342, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %33 = reshape(%32, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), float32] */;
  %34 = @func_903(%33) /* ty=(Tensor[(10, 16, 14), float32],) */;
  %35 = cast(meta[relay.Constant][1] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %36 = reshape(%35, newshape=[8, 3, 12]) /* ty=Tensor[(8, 3, 12), int32] */;
  %37 = cast(%var_1342, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %38 = reshape(%37, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), float32] */;
  %39 = @func_903(%38) /* ty=(Tensor[(10, 16, 14), float32],) */;
  %40 = cast(%var_1358, dtype="int32") /* ty=Tensor[(2145), int32] */;
  %41 = cast(%var_1358, dtype="int32") /* ty=Tensor[(2145), int32] */;
  %42 = reshape(%40, newshape=[15, 13, 11]) /* ty=Tensor[(15, 13, 11), int32] */;
  %43 = reshape(%41, newshape=[15, 13, 11]) /* ty=Tensor[(15, 13, 11), int32] */;
  %44 = cast(%var_1322, dtype="float32") /* ty=Tensor[(2, 416), float32] */;
  %45 = %17.0;
  %46 = subtract(%27, %28) /* ty=Tensor[(15, 3, 10), int64] */;
  %47 = %31.2;
  %48 = %34.0;
  %49 = @func_299(%36) /* ty=Tensor[(8, 3, 12), int32] */;
  %50 = %39.0;
  %51 = @func_1099(%42, %43) /* ty=Tensor[(15, 13, 11), int32] */;
  %52 = acos(%44) /* ty=Tensor[(2, 416), float32] */;
  (%45, %46, %47, meta[relay.Constant][1] /* ty=Tensor[(288), int32] */, %48, %var_1342, %49, %50, %51, %var_1358, %52)
}

def @func_4704(%var_4681: Tensor[(6, 10, 16), int8], %var_4693: Tensor[(288), int32]) -> (Tensor[(6, 10, 16), int8], Tensor[(5, 104), bool], Tensor[(288), int32], Tensor[(832), float32], Tensor[(520, 1), bool]) {
  %53 = cast(%var_4681, dtype="int8") /* ty=Tensor[(6, 10, 16), int8] */;
  %54 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(6, 10, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 10, 16), int8] */, dtype="int8") /* ty=Tensor[(6, 10, 16), int8] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %57 = cast(%var_4693, dtype="int32") /* ty=Tensor[(288), int32] */;
  %58 = cast(meta[relay.Constant][3] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %59 = cast(meta[relay.Constant][4] /* ty=Tensor[(520, 1), bool] */, dtype="bool") /* ty=Tensor[(520, 1), bool] */;
  %60 = reshape(%57, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %61 = reshape(%58, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %62 = reshape(%59, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %63 = @func_3874(%60, %61, %62) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(288), float64], Tensor[(832), uint64], Tensor[(10, 13, 4), bool], Tensor[(520), bool], Tensor[(5, 104), bool]) */;
  %64 = subtract(%55, %56) /* ty=Tensor[(6, 10, 16), int8] */;
  %65 = %63.5;
  (%64, %65, %var_4693, meta[relay.Constant][3] /* ty=Tensor[(832), float32] */, meta[relay.Constant][4] /* ty=Tensor[(520, 1), bool] */)
}

def @func_3273(%var_3239: uint8, %var_3245: Tensor[(2240), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(450), int16], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(450), bool], uint8, Tensor[(80), int32]) {
  %66 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %67 = cast(%var_3245, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %68 = reshape(%67, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), float32] */;
  %69 = @func_903(%68) /* ty=(Tensor[(10, 16, 14), float32],) */;
  %70 = cast(%var_3239, dtype="uint8") /* ty=uint8 */;
  %71 = cast(meta[relay.Constant][5] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %72 = reshape(%70, newshape=[]) /* ty=uint8 */;
  %73 = reshape(%71, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %74 = @func_2651(%72, %73) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(520), bool], uint8, Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(4, 15, 14), float64], Tensor[(4, 14, 14), bool], Tensor[(288), int32], Tensor[(8, 104), float32], Tensor[(2, 416), float32], Tensor[(450), int16], Tensor[(2240), float32], Tensor[(4, 14, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(4, 14, 14), float32]) */;
  %75 = %74.10;
  %76 = cast(%75, dtype="bool") /* ty=Tensor[(450), bool] */;
  %77 = cast(%var_3239, dtype="bool") /* ty=bool */;
  %78 = cast(meta[relay.Constant][6] /* ty=Tensor[(80), int32] */, dtype="int32") /* ty=Tensor[(80), int32] */;
  %79 = cast(meta[relay.Constant][6] /* ty=Tensor[(80), int32] */, dtype="int32") /* ty=Tensor[(80), int32] */;
  %80 = reshape(%78, newshape=[10, 2, 4]) /* ty=Tensor[(10, 2, 4), int32] */;
  %81 = reshape(%79, newshape=[10, 2, 4]) /* ty=Tensor[(10, 2, 4), int32] */;
  %82 = @func_2684(%80, %81) /* ty=(Tensor[(10, 2, 4), int32], Tensor[(4, 15, 14), uint8], uint8) */;
  %83 = %66.0;
  %84 = %69.0;
  %85 = greater(%76, %77) /* ty=Tensor[(450), bool] */;
  %86 = %82.2;
  (%83, meta[relay.Constant][5] /* ty=Tensor[(450), int16] */, %84, %var_3245, %85, %86, meta[relay.Constant][6] /* ty=Tensor[(80), int32] */)
}

def @func_447(%var_444: Tensor[(288), int32]) -> (Tensor[(12, 12, 14), float64], Tensor[(12, 12, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32]) {
  %87 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 12, 14), float64] */, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
  %88 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 12, 14), float64] */, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
  %89 = exp(%88) /* ty=Tensor[(12, 12, 14), float64] */;
  %90 = cast(%89, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
  %91 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 12, 14), float64] */, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
  %92 = cast(%var_444, dtype="int32") /* ty=Tensor[(288), int32] */;
  %93 = reshape(%92, newshape=[8, 3, 12]) /* ty=Tensor[(8, 3, 12), int32] */;
  %94 = atan(%87) /* ty=Tensor[(12, 12, 14), float64] */;
  %95 = cos(%90) /* ty=Tensor[(12, 12, 14), float32] */;
  %96 = sinh(%91) /* ty=Tensor[(12, 12, 14), float32] */;
  %97 = @func_299(%93) /* ty=Tensor[(8, 3, 12), int32] */;
  (%94, %95, %96, %97, %var_444)
}

def @func_7555(%var_7538: Tensor[(42), uint16], %var_7545: Tensor[(560, 4), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(10, 16, 14), float32], Tensor[(560, 4), float32], Tensor[(?, 7, 6), int8]) {
  %98 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %99 = cast(%var_7545, dtype="float32") /* ty=Tensor[(560, 4), float32] */;
  %100 = reshape(%99, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), float32] */;
  %101 = @func_903(%100) /* ty=(Tensor[(10, 16, 14), float32],) */;
  %102 = cast(%var_7538, dtype="uint16") /* ty=Tensor[(42), uint16] */;
  %103 = reshape(%102, newshape=[1, 7, 6]) /* ty=Tensor[(1, 7, 6), uint16] */;
  %104 = @func_1772(%103) /* ty=Tensor[(1, 7, 6), uint16] */;
  %105 = cast(%var_7538, dtype="int8") /* ty=Tensor[(42), int8] */;
  %106 = shape_of(%104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%104, dtype="int8") /* ty=Tensor[(1, 7, 6), int8] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %109 = @func_6581() /* ty=Tensor[(6, 8, 10), uint8] */;
  %110 = %98.0;
  %111 = %101.0;
  %112 = add(%107, %108) /* ty=Tensor[(?, 7, 6), int8] */;
  (%109, %110, %111, %var_7545, %112)
}

def @func_2515(%var_2485: Tensor[(4, 8, 6), uint32], %var_2486: Tensor[(4, 8, 6), uint32], %var_2513: Tensor[(468), float64]) -> (Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(4, 8, 6), bool], Tensor[(13, 3, 1), float32], Tensor[(468), float64]) {
  %113 = cast(meta[relay.Constant][8] /* ty=Tensor[(2145), int32] */, dtype="int32") /* ty=Tensor[(2145), int32] */;
  %114 = cast(meta[relay.Constant][8] /* ty=Tensor[(2145), int32] */, dtype="int32") /* ty=Tensor[(2145), int32] */;
  %115 = reshape(%113, newshape=[15, 13, 11]) /* ty=Tensor[(15, 13, 11), int32] */;
  %116 = reshape(%114, newshape=[15, 13, 11]) /* ty=Tensor[(15, 13, 11), int32] */;
  %117 = cast(%var_2486, dtype="bool") /* ty=Tensor[(4, 8, 6), bool] */;
  %118 = shape_of(%var_2485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%var_2485, dtype="bool") /* ty=Tensor[(4, 8, 6), bool] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %121 = greater(%119, %120) /* ty=Tensor[(4, 8, 6), bool] */;
  %122 = cast(%121, dtype="bool") /* ty=Tensor[(4, 8, 6), bool] */;
  %123 = shape_of(%var_2485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%var_2485, dtype="bool") /* ty=Tensor[(4, 8, 6), bool] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %126 = cast(%var_2513, dtype="float64") /* ty=Tensor[(468), float64] */;
  %127 = reshape(%126, newshape=[6, 13, 6]) /* ty=Tensor[(6, 13, 6), float64] */;
  %128 = @func_1690(%127) /* ty=(Tensor[(6, 13, 6), float64], Tensor[(8, 8, 13), bool], Tensor[(832), float32], Tensor[(13, 3, 1), float32], Tensor[(39), float32], Tensor[(13, 3, 1), float32]) */;
  %129 = @func_1099(%115, %116) /* ty=Tensor[(15, 13, 11), int32] */;
  %130 = logical_or(%124, %125) /* ty=Tensor[(4, 8, 6), bool] */;
  %131 = %128.3;
  (%129, meta[relay.Constant][8] /* ty=Tensor[(2145), int32] */, %130, %131, %var_2513)
}

def @func_3119(%var_3108: Tensor[(1200), float64], %var_3109: Tensor[(13, 6), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(2, 3, 13), float32], Tensor[(13, 6), float32], Tensor[(1200), uint8], Tensor[(6, 8, 10), uint8]) {
  %132 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %133 = cast(%var_3108, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %134 = cast(%var_3109, dtype="float32") /* ty=Tensor[(13, 6), float32] */;
  %135 = reshape(%133, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %136 = reshape(%134, newshape=[78]) /* ty=Tensor[(78), float32] */;
  %137 = @func_2250(%135, %136) /* ty=(Tensor[(15, 16, 5), float64], Tensor[(2, 3, 13), float32], Tensor[(78), float32]) */;
  %138 = cast(meta[relay.Constant][9] /* ty=Tensor[(1200), float64] */, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
  %139 = shape_of(%var_3108, dtype="int32") /* ty=Tensor[(1), int32] */;
  %140 = cast(%var_3108, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %142 = @func_2966() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %143 = %132.0;
  %144 = %137.1;
  %145 = logical_xor(%140, %141) /* ty=Tensor[(1200), uint8] */;
  %146 = %142.0;
  (%143, %144, %var_3109, %145, %146)
}

def @func_3190() -> Tensor[(6, 8, 10), uint8] {
  %147 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %147.0
}

def @func_6395(%var_6371: Tensor[(960), int8], %var_6373: Tensor[(520), bool], %var_6374: Tensor[(39, 5), float64]) -> (Tensor[(6, 8, 10), uint8], Tensor[(39), float32], Tensor[(960), int8], Tensor[(2240), float32], Tensor[(39, 5), float64], Tensor[(13, 3, 520), uint8]) {
  %148 = @func_6318() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %149 = cast(%var_6371, dtype="int8") /* ty=Tensor[(960), int8] */;
  %150 = cast(meta[relay.Constant][10] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %151 = cast(%var_6373, dtype="bool") /* ty=Tensor[(520), bool] */;
  %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %153 = cast(%var_6374, dtype="float64") /* ty=Tensor[(39, 5), float64] */;
  %154 = reshape(%149, newshape=[960]) /* ty=Tensor[(960), int8] */;
  %155 = reshape(%150, newshape=[280, 8]) /* ty=Tensor[(280, 8), float32] */;
  %156 = reshape(%151, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %157 = reshape(%152, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %158 = reshape(%153, newshape=[195, 1]) /* ty=Tensor[(195, 1), float64] */;
  %159 = @func_5080(%154, %155, %156, %157, %158) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(288), int32], Tensor[(960), int8], Tensor[(288), int32], Tensor[(6, 8, 10), uint8], Tensor[(832), float32], Tensor[(280, 8), float32], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64], Tensor[(2240), bool], Tensor[(13, 3, 1), float32], Tensor[(39), float32], Tensor[(195, 520), int8], Tensor[(6, 8, 10), float64]) */;
  %160 = %159.11;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(39), float32] */;
  %162 = reshape(%161, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
  %163 = @func_227(%162) /* ty=Tensor[(13, 3, 1), float32] */;
  %164 = cast(%163, dtype="uint8") /* ty=Tensor[(13, 3, 1), uint8] */;
  %165 = cast(%var_6373, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %166 = %148.0;
  %167 = add(%164, %165) /* ty=Tensor[(13, 3, 520), uint8] */;
  (%166, %160, %var_6371, meta[relay.Constant][10] /* ty=Tensor[(2240), float32] */, %var_6374, %167)
}

def @func_1624(%var_1593: Tensor[(6, 15, 4), uint64]) -> (Tensor[(6, 15, 4), bool],) {
  %168 = cast(meta[relay.Constant][11] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %169 = cast(%var_1593, dtype="uint64") /* ty=Tensor[(6, 15, 4), uint64] */;
  %170 = left_shift(%168, %169) /* ty=Tensor[(6, 15, 4), uint64] */;
  %171 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 15, 4), uint64] */, dtype="bool") /* ty=Tensor[(6, 15, 4), bool] */;
  %172 = shape_of(%170, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%170, dtype="bool") /* ty=Tensor[(6, 15, 4), bool] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %175 = equal(%173, %174) /* ty=Tensor[(6, 15, 4), bool] */;
  (%175,)
}

def @func_5961() -> (Tensor[(6, 8, 10), float64], Tensor[(6, 8, 10), uint8]) {
  %176 = @func_4655() /* ty=Tensor[(6, 8, 10), uint8] */;
  %177 = cast(%176, dtype="float64") /* ty=Tensor[(6, 8, 10), float64] */;
  %178 = @func_5349() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %179 = sigmoid(%177) /* ty=Tensor[(6, 8, 10), float64] */;
  %180 = %178.0;
  (%179, %180)
}

def @func_6071() -> (Tensor[(6, 8, 10), float32], Tensor[(6, 8, 10), uint8]) {
  %181 = @func_5769() /* ty=(Tensor[(6, 8, 10), float32],) */;
  %182 = @func_5998() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %183 = %181.0;
  %184 = %182.0;
  (%183, %184)
}

def @func_2854(%var_2841: Tensor[(78), float32], %var_2849: uint8) -> (Tensor[(6, 8, 10), uint8], Tensor[(15, 16, 5), float64], Tensor[(1200), float64], Tensor[(78), float32], Tensor[(450), int16], uint8, Tensor[(450), int16]) {
  %185 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %186 = cast(meta[relay.Constant][13] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %187 = cast(%var_2841, dtype="float32") /* ty=Tensor[(78), float32] */;
  %188 = reshape(%186, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %189 = reshape(%187, newshape=[78]) /* ty=Tensor[(78), float32] */;
  %190 = @func_2250(%188, %189) /* ty=(Tensor[(15, 16, 5), float64], Tensor[(2, 3, 13), float32], Tensor[(78), float32]) */;
  %191 = cast(%var_2849, dtype="uint8") /* ty=uint8 */;
  %192 = cast(meta[relay.Constant][14] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %193 = reshape(%191, newshape=[]) /* ty=uint8 */;
  %194 = reshape(%192, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %195 = @func_2651(%193, %194) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(520), bool], uint8, Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(4, 15, 14), float64], Tensor[(4, 14, 14), bool], Tensor[(288), int32], Tensor[(8, 104), float32], Tensor[(2, 416), float32], Tensor[(450), int16], Tensor[(2240), float32], Tensor[(4, 14, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(4, 14, 14), float32]) */;
  %196 = %185.0;
  %197 = %190.0;
  %198 = %195.10;
  (%196, %197, meta[relay.Constant][13] /* ty=Tensor[(1200), float64] */, %var_2841, %198, %var_2849, meta[relay.Constant][14] /* ty=Tensor[(450), int16] */)
}

def @func_6318() -> (Tensor[(6, 8, 10), uint8],) {
  %199 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %200 = %199.0;
  (%200,)
}

def @func_5567(%var_5533: Tensor[(520), bool], %var_5539: Tensor[(280), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(520), bool], uint8, Tensor[(280), float32], Tensor[(6, 8, 10), uint8], Tensor[(1200), float64], Tensor[(26, 3), bool]) {
  %201 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %202 = cast(%var_5539, dtype="float32") /* ty=Tensor[(280), float32] */;
  %203 = cast(meta[relay.Constant][15] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %204 = reshape(%202, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), float32] */;
  %205 = reshape(%203, newshape=[]) /* ty=uint8 */;
  %206 = @func_3532(%204, %205) /* ty=(Tensor[(5, 8, 7), float64], Tensor[(1200), float64], Tensor[(78), float32], uint8) */;
  %207 = @func_2966() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %208 = cast(%var_5533, dtype="bool") /* ty=Tensor[(520), bool] */;
  %209 = reshape(%208, newshape=[130, 4]) /* ty=Tensor[(130, 4), bool] */;
  %210 = @func_3424(%209) /* ty=(Tensor[(6, 8, 10), float64], Tensor[(26, 3), float32], Tensor[(130, 4), bool], Tensor[(26, 3), float32]) */;
  %211 = %210.1;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(26, 3), float64] */;
  %213 = sin(%212) /* ty=Tensor[(26, 3), float64] */;
  %214 = cast(%213, dtype="float32") /* ty=Tensor[(26, 3), float32] */;
  %215 = %206.3;
  %216 = cast(%215, dtype="uint8") /* ty=uint8 */;
  %217 = reshape(%214, newshape=[78]) /* ty=Tensor[(78), float32] */;
  %218 = reshape(%216, newshape=[]) /* ty=uint8 */;
  %219 = @func_2854(%217, %218) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(15, 16, 5), float64], Tensor[(1200), float64], Tensor[(78), float32], Tensor[(450), int16], uint8, Tensor[(450), int16]) */;
  %220 = cast(%213, dtype="bool") /* ty=Tensor[(26, 3), bool] */;
  %221 = cast(meta[relay.Constant][15] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %222 = %201.0;
  %223 = %207.0;
  %224 = %219.2;
  %225 = greater(%220, %221) /* ty=Tensor[(26, 3), bool] */;
  (%222, %var_5533, %215, %var_5539, %223, %224, %225)
}

def @func_299(%var_286: Tensor[(8, 3, 12), int32]) -> Tensor[(8, 3, 12), int32] {
  %226 = cast(%var_286, dtype="int32") /* ty=Tensor[(8, 3, 12), int32] */;
  %227 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(8, 3, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 3, 12), int32] */, dtype="int32") /* ty=Tensor[(8, 3, 12), int32] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  right_shift(%228, %229) /* ty=Tensor[(8, 3, 12), int32] */
}

def @func_6690() -> (Tensor[(6, 8, 10), uint8],) {
  %230 = @func_5722() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %231 = %230.0;
  (%231,)
}

def @func_8073(%var_8031: float64, %var_8032: Tensor[(3, 28), float64], %var_8060: Tensor[(5, 90), int16], %var_8061: Tensor[(832), float32], %var_8062: Tensor[(2240), float32]) -> (Tensor[(6, 8, 10), float32], Tensor[(7, 1, 12), float64], float64, Tensor[(3, 28), float64], Tensor[(2145), int32], Tensor[(5, 90), int16], Tensor[(832), float32], Tensor[(2240), float32], Tensor[(520), bool]) {
  %232 = @func_4866() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64]) */;
  %233 = %232.0;
  %234 = cast(%233, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
  %235 = cast(%var_8031, dtype="float64") /* ty=float64 */;
  %236 = cast(%var_8032, dtype="float64") /* ty=Tensor[(3, 28), float64] */;
  %237 = reshape(%235, newshape=[]) /* ty=float64 */;
  %238 = reshape(%236, newshape=[7, 1, 12]) /* ty=Tensor[(7, 1, 12), float64] */;
  %239 = @func_6623(%237, %238) /* ty=(Tensor[(7, 1, 12), float64],) */;
  %240 = cast(%var_8060, dtype="int16") /* ty=Tensor[(5, 90), int16] */;
  %241 = cast(%var_8061, dtype="float32") /* ty=Tensor[(832), float32] */;
  %242 = cast(%var_8062, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %243 = cast(%var_8060, dtype="uint16") /* ty=Tensor[(5, 90), uint16] */;
  %244 = cast(meta[relay.Constant][17] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %245 = reshape(%240, newshape=[10, 45]) /* ty=Tensor[(10, 45), int16] */;
  %246 = reshape(%241, newshape=[832, 1]) /* ty=Tensor[(832, 1), float32] */;
  %247 = reshape(%242, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %248 = reshape(%243, newshape=[10, 45]) /* ty=Tensor[(10, 45), uint16] */;
  %249 = reshape(%244, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %250 = @func_4164(%245, %246, %247, %248, %249) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(4, 14, 14), float32], Tensor[(2240), float32], Tensor[(832, 1), float32], Tensor[(2240), float32], Tensor[(2145), int32], Tensor[(10, 45), int64], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(520), bool]) */;
  %251 = erf(%234) /* ty=Tensor[(6, 8, 10), float32] */;
  %252 = %239.0;
  %253 = %250.5;
  (%251, %252, %var_8031, %var_8032, %253, %var_8060, %var_8061, %var_8062, meta[relay.Constant][17] /* ty=Tensor[(520), bool] */)
}

def @func_1919(%var_1903: uint8) -> (Tensor[(4, 15, 14), uint8], Tensor[(288), int32], Tensor[(832), float32]) {
  %254 = cast(%var_1903, dtype="uint8") /* ty=uint8 */;
  %255 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 15, 14), uint8] */, dtype="uint8") /* ty=Tensor[(4, 15, 14), uint8] */;
  %256 = cast(meta[relay.Constant][19] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %257 = cast(meta[relay.Constant][19] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %258 = cast(meta[relay.Constant][19] /* ty=Tensor[(832), float32] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %259 = reshape(%256, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %260 = reshape(%257, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %261 = reshape(%258, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %262 = @func_639(%259, %260, %261) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32], Tensor[(8, 8, 13), bool]) */;
  %263 = right_shift(%254, %255) /* ty=Tensor[(4, 15, 14), uint8] */;
  %264 = %262.2;
  (%263, %264, meta[relay.Constant][19] /* ty=Tensor[(832), float32] */)
}

def @func_7395() -> Tensor[(6, 8, 10), uint8] {
  %265 = @func_3981() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) */;
  %265.0
}

def @func_5887() -> (Tensor[(6, 8, 10), uint8],) {
  %266 = @func_3690() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %267 = %266.0;
  (%267,)
}

def @func_5324(%var_5317: Tensor[(360), uint64], %var_5321: Tensor[(78), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 15, 4), bool], Tensor[(360), uint64], Tensor[(15, 16, 5), float64], Tensor[(78), float32], uint8) {
  %268 = @func_2966() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %269 = cast(%var_5317, dtype="uint64") /* ty=Tensor[(360), uint64] */;
  %270 = reshape(%269, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), uint64] */;
  %271 = @func_1624(%270) /* ty=(Tensor[(6, 15, 4), bool],) */;
  %272 = cast(%var_5321, dtype="float32") /* ty=Tensor[(78), float32] */;
  %273 = cast(meta[relay.Constant][20] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %274 = reshape(%272, newshape=[78]) /* ty=Tensor[(78), float32] */;
  %275 = reshape(%273, newshape=[]) /* ty=uint8 */;
  %276 = @func_2854(%274, %275) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(15, 16, 5), float64], Tensor[(1200), float64], Tensor[(78), float32], Tensor[(450), int16], uint8, Tensor[(450), int16]) */;
  %277 = %268.0;
  %278 = %271.0;
  %279 = %276.1;
  (%277, %278, %var_5317, %279, %var_5321, meta[relay.Constant][20] /* ty=uint8 */)
}

def @func_3632() -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) {
  %280 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %281 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %282 = cast(meta[relay.Constant][21] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %283 = reshape(%282, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), float32] */;
  %284 = @func_903(%283) /* ty=(Tensor[(10, 16, 14), float32],) */;
  %285 = %284.0;
  %286 = cast(%285, dtype="uint64") /* ty=Tensor[(10, 16, 14), uint64] */;
  %287 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(2240), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %288 = cast(meta[relay.Constant][21] /* ty=Tensor[(2240), float32] */, dtype="uint64") /* ty=Tensor[(2240), uint64] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %290 = maximum(%288, %289) /* ty=Tensor[(2240), uint64] */;
  %291 = cast(%290, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %292 = %280.0;
  %293 = %281.0;
  %294 = sinh(%291) /* ty=Tensor[(2240), float32] */;
  (%292, %293, %294)
}

def @func_2898() -> (Tensor[(6, 8, 10), uint8],) {
  %295 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %296 = %295.0;
  (%296,)
}

def @func_2966() -> (Tensor[(6, 8, 10), uint8],) {
  %297 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %298 = %297.0;
  (%298,)
}

def @func_7096(%var_7062: Tensor[(1716), float32], %var_7083: Tensor[(55, 15), int16]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(1716), float32], Tensor[(288), int32], Tensor[(6, 8, 10), float64], Tensor[(15, 11, 5), int16], Tensor[(55, 15), int16]) {
  %299 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %300 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %301 = cast(%var_7062, dtype="float32") /* ty=Tensor[(1716), float32] */;
  %302 = cast(meta[relay.Constant][22] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %303 = reshape(%301, newshape=[13, 12, 11]) /* ty=Tensor[(13, 12, 11), float32] */;
  %304 = reshape(%302, newshape=[4, 72]) /* ty=Tensor[(4, 72), int32] */;
  %305 = @func_6542(%303, %304) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(12, 12, 14), float32], Tensor[(4, 72), int32], Tensor[(13, 12, 11), float32]) */;
  %306 = @func_3190() /* ty=Tensor[(6, 8, 10), uint8] */;
  %307 = cast(%306, dtype="float64") /* ty=Tensor[(6, 8, 10), float64] */;
  %308 = cast(%var_7083, dtype="int16") /* ty=Tensor[(55, 15), int16] */;
  %309 = reshape(%308, newshape=[15, 11, 5]) /* ty=Tensor[(15, 11, 5), int16] */;
  %310 = @func_6975(%309) /* ty=(Tensor[(15, 11, 5), int16],) */;
  %311 = %299.0;
  %312 = %300.0;
  %313 = %305.0;
  %314 = atanh(%307) /* ty=Tensor[(6, 8, 10), float64] */;
  %315 = %310.0;
  (%311, %312, %313, %var_7062, meta[relay.Constant][22] /* ty=Tensor[(288), int32] */, %314, %315, %var_7083)
}

def @func_5998() -> (Tensor[(6, 8, 10), uint8],) {
  %316 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %317 = %316.0;
  (%317,)
}

def @func_1819(%var_1810: Tensor[(10, 13, 4), bool]) -> (Tensor[(10, 13, 4), bool], Tensor[(2, 3, 13), float32], Tensor[(26, 3), float32]) {
  %318 = cast(%var_1810, dtype="bool") /* ty=Tensor[(10, 13, 4), bool] */;
  %319 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(10, 13, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(meta[relay.Constant][23] /* ty=Tensor[(10, 13, 4), bool] */, dtype="bool") /* ty=Tensor[(10, 13, 4), bool] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %322 = cast(meta[relay.Constant][24] /* ty=Tensor[(26, 3), float32] */, dtype="float32") /* ty=Tensor[(26, 3), float32] */;
  %323 = reshape(%322, newshape=[2, 3, 13]) /* ty=Tensor[(2, 3, 13), float32] */;
  %324 = logical_and(%320, %321) /* ty=Tensor[(10, 13, 4), bool] */;
  %325 = @func_1646(%323) /* ty=Tensor[(2, 3, 13), float32] */;
  (%324, %325, meta[relay.Constant][24] /* ty=Tensor[(26, 3), float32] */)
}

def @func_7269(%var_7267: uint8) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float32], Tensor[(6, 8, 10), float32], uint8) {
  %326 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %327 = @func_5998() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %328 = @func_5240() /* ty=(Tensor[(6, 8, 10), float32],) */;
  %329 = cast(%var_7267, dtype="uint8") /* ty=uint8 */;
  %330 = reshape(%329, newshape=[]) /* ty=uint8 */;
  %331 = @func_4764(%330) /* ty=(Tensor[(2240), uint8], Tensor[(2240), float32], Tensor[(4, 15, 14), uint8], uint8, Tensor[(6, 8, 10), float32]) */;
  %332 = %326.0;
  %333 = %327.0;
  %334 = %328.0;
  %335 = %331.4;
  (%332, %333, %334, %335, %var_7267)
}

def @func_3592() -> (Tensor[(6, 8, 10), uint8],) {
  %336 = @func_3190() /* ty=Tensor[(6, 8, 10), uint8] */;
  (%336,)
}

def @func_5722() -> (Tensor[(6, 8, 10), uint8],) {
  %337 = @func_3632() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) */;
  %338 = %337.0;
  (%338,)
}

def @func_3690() -> (Tensor[(6, 8, 10), uint8],) {
  %339 = @func_2966() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %340 = %339.0;
  (%340,)
}

def @func_2651(%var_2590: uint8, %var_2637: Tensor[(450), int16]) -> (Tensor[(10, 13, 4), bool], Tensor[(520), bool], uint8, Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(4, 15, 14), float64], Tensor[(4, 14, 14), bool], Tensor[(288), int32], Tensor[(8, 104), float32], Tensor[(2, 416), float32], Tensor[(450), int16], Tensor[(2240), float32], Tensor[(4, 14, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(4, 14, 14), float32]) {
  %341 = cast(meta[relay.Constant][25] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %342 = reshape(%341, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), bool] */;
  %343 = @func_1819(%342) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(2, 3, 13), float32], Tensor[(26, 3), float32]) */;
  %344 = cast(meta[relay.Constant][26] /* ty=Tensor[(2145), int32] */, dtype="int32") /* ty=Tensor[(2145), int32] */;
  %345 = cast(meta[relay.Constant][26] /* ty=Tensor[(2145), int32] */, dtype="int32") /* ty=Tensor[(2145), int32] */;
  %346 = reshape(%344, newshape=[15, 13, 11]) /* ty=Tensor[(15, 13, 11), int32] */;
  %347 = reshape(%345, newshape=[15, 13, 11]) /* ty=Tensor[(15, 13, 11), int32] */;
  %348 = cast(%var_2590, dtype="uint8") /* ty=uint8 */;
  %349 = reshape(%348, newshape=[]) /* ty=uint8 */;
  %350 = @func_1919(%349) /* ty=(Tensor[(4, 15, 14), uint8], Tensor[(288), int32], Tensor[(832), float32]) */;
  %351 = %350.0;
  %352 = cast(%351, dtype="float64") /* ty=Tensor[(4, 15, 14), float64] */;
  %353 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 14, 14), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 14), float64] */;
  %354 = sigmoid(%353) /* ty=Tensor[(4, 14, 14), float64] */;
  %355 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 14, 14), float64] */, dtype="bool") /* ty=Tensor[(4, 14, 14), bool] */;
  %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%354, dtype="bool") /* ty=Tensor[(4, 14, 14), bool] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %359 = logical_and(%357, %358) /* ty=Tensor[(4, 14, 14), bool] */;
  %360 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 14, 14), float64] */, dtype="bool") /* ty=Tensor[(4, 14, 14), bool] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="bool") /* ty=Tensor[(4, 14, 14), bool] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %364 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 104), float32] */, dtype="float32") /* ty=Tensor[(8, 104), float32] */;
  %365 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 104), float32] */, dtype="float32") /* ty=Tensor[(8, 104), float32] */;
  %366 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 104), float32] */, dtype="float64") /* ty=Tensor[(8, 104), float64] */;
  %367 = reshape(%364, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %368 = reshape(%365, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %369 = reshape(%366, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %370 = @func_639(%367, %368, %369) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32], Tensor[(8, 8, 13), bool]) */;
  %371 = cast(%var_2637, dtype="int16") /* ty=Tensor[(450), int16] */;
  %372 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 104), float32] */, dtype="float32") /* ty=Tensor[(8, 104), float32] */;
  %373 = cast(meta[relay.Constant][29] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %374 = @func_1099(%346, %347) /* ty=Tensor[(15, 13, 11), int32] */;
  %375 = cast(%374, dtype="int32") /* ty=Tensor[(15, 13, 11), int32] */;
  %376 = reshape(%371, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), int16] */;
  %377 = reshape(%372, newshape=[2, 416]) /* ty=Tensor[(2, 416), float32] */;
  %378 = reshape(%373, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %379 = reshape(%375, newshape=[2145]) /* ty=Tensor[(2145), int32] */;
  %380 = @func_1362(%376, %377, %378, %379) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(15, 3, 10), int64], Tensor[(12, 12, 14), float32], Tensor[(288), int32], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(8, 3, 12), int32], Tensor[(10, 16, 14), float32], Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(2, 416), float32]) */;
  %381 = cast(%354, dtype="float32") /* ty=Tensor[(4, 14, 14), float32] */;
  %382 = atan(%381) /* ty=Tensor[(4, 14, 14), float32] */;
  %383 = cast(%382, dtype="float32") /* ty=Tensor[(4, 14, 14), float32] */;
  %384 = %370.2;
  %385 = cast(%384, dtype="int32") /* ty=Tensor[(288), int32] */;
  %386 = reshape(%385, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %387 = @func_447(%386) /* ty=(Tensor[(12, 12, 14), float64], Tensor[(12, 12, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32]) */;
  %388 = cast(%382, dtype="float32") /* ty=Tensor[(4, 14, 14), float32] */;
  %389 = %343.0;
  %390 = sqrt(%352) /* ty=Tensor[(4, 15, 14), float64] */;
  %391 = not_equal(%362, %363) /* ty=Tensor[(4, 14, 14), bool] */;
  %392 = %380.10;
  %393 = acos(%383) /* ty=Tensor[(4, 14, 14), float32] */;
  %394 = %387.1;
  %395 = sqrt(%388) /* ty=Tensor[(4, 14, 14), float32] */;
  (%389, meta[relay.Constant][25] /* ty=Tensor[(520), bool] */, %var_2590, %374, meta[relay.Constant][26] /* ty=Tensor[(2145), int32] */, %390, %391, %384, meta[relay.Constant][28] /* ty=Tensor[(8, 104), float32] */, %392, %var_2637, meta[relay.Constant][29] /* ty=Tensor[(2240), float32] */, %393, %394, %395)
}

def @func_3004() -> (Tensor[(6, 8, 10), uint8],) {
  %396 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %397 = %396.0;
  (%397,)
}

def @func_5461() -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), int32]) {
  %398 = @func_3690() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %399 = %398.0;
  %400 = cast(%399, dtype="uint8") /* ty=Tensor[(6, 8, 10), uint8] */;
  %401 = reshape(%400, newshape=[6, 8, 10]) /* ty=Tensor[(6, 8, 10), uint8] */;
  %402 = @func_4031(%401) /* ty=(Tensor[(2, 3, 13), float32], Tensor[(13, 6), float32], Tensor[(6, 8, 10), int32]) */;
  %403 = %402.2;
  (%399, %403)
}

def @func_5668(%var_5658: Tensor[(4, 3, 5), float64]) -> (Tensor[(4, 3, 5), float64], Tensor[(4, 3, 5), uint16]) {
  %404 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 3, 5), float64] */, dtype="float64") /* ty=Tensor[(4, 3, 5), float64] */;
  %405 = shape_of(%var_5658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%var_5658, dtype="float64") /* ty=Tensor[(4, 3, 5), float64] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %408 = cast(%var_5658, dtype="uint16") /* ty=Tensor[(4, 3, 5), uint16] */;
  %409 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(4, 3, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %410 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 3, 5), float64] */, dtype="uint16") /* ty=Tensor[(4, 3, 5), uint16] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %412 = power(%406, %407) /* ty=Tensor[(4, 3, 5), float64] */;
  %413 = bitwise_xor(%410, %411) /* ty=Tensor[(4, 3, 5), uint16] */;
  (%412, %413)
}

def @func_7644() -> (Tensor[(6, 8, 10), uint8],) {
  %414 = @func_4628() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %415 = %414.0;
  (%415,)
}

def @func_4655() -> Tensor[(6, 8, 10), uint8] {
  @func_3190() /* ty=Tensor[(6, 8, 10), uint8] */
}

def @func_5190(%var_5121: Tensor[(520), bool], %var_5127: Tensor[(6, 8, 10), uint8]) -> (Tensor[(26, 3), float32], Tensor[(520), bool], Tensor[(6, 8, 10), bool], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) {
  %416 = cast(%var_5121, dtype="bool") /* ty=Tensor[(520), bool] */;
  %417 = reshape(%416, newshape=[130, 4]) /* ty=Tensor[(130, 4), bool] */;
  %418 = @func_3424(%417) /* ty=(Tensor[(6, 8, 10), float64], Tensor[(26, 3), float32], Tensor[(130, 4), bool], Tensor[(26, 3), float32]) */;
  %419 = @func_3592() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %420 = %419.0;
  %421 = cast(%var_5127, dtype="bool") /* ty=Tensor[(6, 8, 10), bool] */;
  %422 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%420, dtype="bool") /* ty=Tensor[(6, 8, 10), bool] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %425 = @func_4628() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %426 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %427 = %418.1;
  %428 = equal(%423, %424) /* ty=Tensor[(6, 8, 10), bool] */;
  %429 = %425.0;
  %430 = %426.0;
  (%427, %var_5121, %428, %429, %430)
}

def @func_7280() -> (Tensor[(6, 8, 10), uint8],) {
  %431 = @func_5461() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), int32]) */;
  %432 = %431.0;
  (%432,)
}

def @func_6856(%var_6850: Tensor[(450), int16], %var_6852: Tensor[(2145), int32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(1, 360), uint64], Tensor[(78), float32], Tensor[(6, 8, 10), uint8], Tensor[(1, 16), float64], Tensor[(450), int16], Tensor[(2240), float32], Tensor[(2145), int32]) {
  %433 = @func_4628() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %434 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 360), uint64] */, dtype="uint64") /* ty=Tensor[(1, 360), uint64] */;
  %435 = cast(meta[relay.Constant][32] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %436 = reshape(%434, newshape=[360]) /* ty=Tensor[(360), uint64] */;
  %437 = reshape(%435, newshape=[78]) /* ty=Tensor[(78), float32] */;
  %438 = @func_5324(%436, %437) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 15, 4), bool], Tensor[(360), uint64], Tensor[(15, 16, 5), float64], Tensor[(78), float32], uint8) */;
  %439 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 16), float64] */;
  %440 = cast(%var_6850, dtype="int16") /* ty=Tensor[(450), int16] */;
  %441 = cast(meta[relay.Constant][34] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %442 = cast(%var_6852, dtype="int32") /* ty=Tensor[(2145), int32] */;
  %443 = reshape(%439, newshape=[16]) /* ty=Tensor[(16), float64] */;
  %444 = reshape(%440, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %445 = reshape(%441, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %446 = reshape(%442, newshape=[1, 2145]) /* ty=Tensor[(1, 2145), int32] */;
  %447 = @func_6254(%443, %444, %445, %446) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(16), float64], Tensor[(2, 2, 4), float32], Tensor[(2, 3, 13), float32], Tensor[(78), float32], Tensor[(6, 8, 10), uint8], Tensor[(12, 12, 14), float32], Tensor[(450), int16], Tensor[(2, 416), float32], Tensor[(2240), float32], Tensor[(1, 2145), int32]) */;
  %448 = %433.0;
  %449 = %438.0;
  %450 = %447.5;
  (%448, %449, meta[relay.Constant][31] /* ty=Tensor[(1, 360), uint64] */, meta[relay.Constant][32] /* ty=Tensor[(78), float32] */, %450, meta[relay.Constant][33] /* ty=Tensor[(1, 16), float64] */, %var_6850, meta[relay.Constant][34] /* ty=Tensor[(2240), float32] */, %var_6852)
}

def @func_5831(%var_5818: Tensor[(12, 12, 6), int16], %var_5819: Tensor[(12, 12, 6), int16]) -> (Tensor[(12, 12, 6), bool],) {
  %451 = cast(%var_5819, dtype="bool") /* ty=Tensor[(12, 12, 6), bool] */;
  %452 = shape_of(%var_5818, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%var_5818, dtype="bool") /* ty=Tensor[(12, 12, 6), bool] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %455 = less_equal(%453, %454) /* ty=Tensor[(12, 12, 6), bool] */;
  (%455,)
}

def @func_3532(%var_3497: Tensor[(5, 8, 7), float32], %var_3520: uint8) -> (Tensor[(5, 8, 7), float64], Tensor[(1200), float64], Tensor[(78), float32], uint8) {
  %456 = cast(%var_3497, dtype="float32") /* ty=Tensor[(5, 8, 7), float32] */;
  %457 = asin(%456) /* ty=Tensor[(5, 8, 7), float32] */;
  %458 = cast(%457, dtype="float64") /* ty=Tensor[(5, 8, 7), float64] */;
  %459 = cast(meta[relay.Constant][35] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %460 = cast(%var_3520, dtype="uint8") /* ty=uint8 */;
  %461 = reshape(%459, newshape=[78]) /* ty=Tensor[(78), float32] */;
  %462 = reshape(%460, newshape=[]) /* ty=uint8 */;
  %463 = @func_2854(%461, %462) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(15, 16, 5), float64], Tensor[(1200), float64], Tensor[(78), float32], Tensor[(450), int16], uint8, Tensor[(450), int16]) */;
  %464 = cosh(%458) /* ty=Tensor[(5, 8, 7), float64] */;
  %465 = %463.2;
  (%464, %465, meta[relay.Constant][35] /* ty=Tensor[(78), float32] */, %var_3520)
}

def @func_6439() -> (Tensor[(6, 8, 10), uint8],) {
  %466 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %467 = %466.0;
  (%467,)
}

def @func_1690(%var_1661: Tensor[(6, 13, 6), float64]) -> (Tensor[(6, 13, 6), float64], Tensor[(8, 8, 13), bool], Tensor[(832), float32], Tensor[(13, 3, 1), float32], Tensor[(39), float32], Tensor[(13, 3, 1), float32]) {
  %468 = cast(%var_1661, dtype="float64") /* ty=Tensor[(6, 13, 6), float64] */;
  %469 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(6, 13, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 13, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 13, 6), float64] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %472 = cast(meta[relay.Constant][37] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %473 = cast(meta[relay.Constant][37] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %474 = cast(meta[relay.Constant][37] /* ty=Tensor[(832), float32] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %475 = reshape(%472, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %476 = reshape(%473, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %477 = reshape(%474, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %478 = @func_639(%475, %476, %477) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32], Tensor[(8, 8, 13), bool]) */;
  %479 = cast(meta[relay.Constant][38] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
  %480 = reshape(%479, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
  %481 = @func_227(%480) /* ty=Tensor[(13, 3, 1), float32] */;
  %482 = cast(%481, dtype="float32") /* ty=Tensor[(13, 3, 1), float32] */;
  %483 = reshape(%482, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
  %484 = floor_divide(%470, %471) /* ty=Tensor[(6, 13, 6), float64] */;
  %485 = %478.3;
  %486 = @func_227(%483) /* ty=Tensor[(13, 3, 1), float32] */;
  (%484, %485, meta[relay.Constant][37] /* ty=Tensor[(832), float32] */, %481, meta[relay.Constant][38] /* ty=Tensor[(39), float32] */, %486)
}

def @func_7514() -> Tensor[(6, 8, 10), uint8] {
  %487 = @func_6668() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %487.0
}

def @func_8175() -> (Tensor[(6, 8, 10), uint8], Tensor[(2240), float32], uint8, Tensor[(2240), float32]) {
  %488 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %489 = cast(meta[relay.Constant][39] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %490 = cast(meta[relay.Constant][40] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %491 = reshape(%489, newshape=[]) /* ty=uint8 */;
  %492 = reshape(%490, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %493 = @func_3273(%491, %492) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(450), int16], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(450), bool], uint8, Tensor[(80), int32]) */;
  %494 = %488.0;
  %495 = %493.3;
  (%494, %495, meta[relay.Constant][39] /* ty=uint8 */, meta[relay.Constant][40] /* ty=Tensor[(2240), float32] */)
}

def @func_5685(%var_5678: Tensor[(2, 2, 4), float64]) -> (Tensor[(2, 2, 4), int32],) {
  %496 = cast(%var_5678, dtype="float64") /* ty=Tensor[(2, 2, 4), float64] */;
  %497 = log10(%496) /* ty=Tensor[(2, 2, 4), float64] */;
  %498 = cast(%var_5678, dtype="int32") /* ty=Tensor[(2, 2, 4), int32] */;
  %499 = shape_of(%497, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%497, dtype="int32") /* ty=Tensor[(2, 2, 4), int32] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %502 = left_shift(%500, %501) /* ty=Tensor[(2, 2, 4), int32] */;
  (%502,)
}

def @func_1772(%var_1731: Tensor[(1, 7, 6), uint16]) -> Tensor[(1, 7, 6), uint16] {
  %503 = cast(meta[relay.Constant][41] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %504 = cast(%var_1731, dtype="uint16") /* ty=Tensor[(1, 7, 6), uint16] */;
  logical_xor(%503, %504) /* ty=Tensor[(1, 7, 6), uint16] */
}

def @func_4376(%var_4361: Tensor[(5, 10, 3), float64]) -> Tensor[(5, 10, 3), float64] {
  %505 = cast(%var_4361, dtype="float64") /* ty=Tensor[(5, 10, 3), float64] */;
  %506 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(5, 10, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(meta[relay.Constant][42] /* ty=Tensor[(5, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(5, 10, 3), float64] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %509 = power(%507, %508) /* ty=Tensor[(5, 10, 3), float64] */;
  %510 = cast(meta[relay.Constant][42] /* ty=Tensor[(5, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(5, 10, 3), float64] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%509, dtype="float64") /* ty=Tensor[(5, 10, 3), float64] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  add(%512, %513) /* ty=Tensor[(5, 10, 3), float64] */
}

def @func_4611(%var_4606: Tensor[(300, 4), float64], %var_4607: Tensor[(78), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(15, 16, 5), float64], Tensor[(300, 4), float64], Tensor[(78), float32], Tensor[(6, 8, 10), uint8]) {
  %514 = @func_3632() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) */;
  %515 = cast(%var_4606, dtype="float64") /* ty=Tensor[(300, 4), float64] */;
  %516 = cast(%var_4607, dtype="float32") /* ty=Tensor[(78), float32] */;
  %517 = reshape(%515, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %518 = reshape(%516, newshape=[78]) /* ty=Tensor[(78), float32] */;
  %519 = @func_2250(%517, %518) /* ty=(Tensor[(15, 16, 5), float64], Tensor[(2, 3, 13), float32], Tensor[(78), float32]) */;
  %520 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %521 = %514.1;
  %522 = %519.0;
  %523 = %520.0;
  (%521, %522, %var_4606, %var_4607, %523)
}

def @func_4164(%var_4107: Tensor[(10, 45), int16], %var_4129: Tensor[(832, 1), float32], %var_4130: Tensor[(2240), float32], %var_4141: Tensor[(10, 45), uint16], %var_4162: Tensor[(520), bool]) -> (Tensor[(6, 8, 10), uint8], Tensor[(4, 14, 14), float32], Tensor[(2240), float32], Tensor[(832, 1), float32], Tensor[(2240), float32], Tensor[(2145), int32], Tensor[(10, 45), int64], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(520), bool]) {
  %524 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %525 = cast(meta[relay.Constant][43] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %526 = cast(%var_4107, dtype="int16") /* ty=Tensor[(10, 45), int16] */;
  %527 = reshape(%525, newshape=[]) /* ty=uint8 */;
  %528 = reshape(%526, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %529 = @func_2651(%527, %528) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(520), bool], uint8, Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(4, 15, 14), float64], Tensor[(4, 14, 14), bool], Tensor[(288), int32], Tensor[(8, 104), float32], Tensor[(2, 416), float32], Tensor[(450), int16], Tensor[(2240), float32], Tensor[(4, 14, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(4, 14, 14), float32]) */;
  %530 = cast(%var_4107, dtype="int16") /* ty=Tensor[(10, 45), int16] */;
  %531 = cast(%var_4129, dtype="float32") /* ty=Tensor[(832, 1), float32] */;
  %532 = cast(%var_4130, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %533 = cast(meta[relay.Constant][44] /* ty=Tensor[(2145), int32] */, dtype="int32") /* ty=Tensor[(2145), int32] */;
  %534 = reshape(%530, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), int16] */;
  %535 = reshape(%531, newshape=[2, 416]) /* ty=Tensor[(2, 416), float32] */;
  %536 = reshape(%532, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %537 = reshape(%533, newshape=[2145]) /* ty=Tensor[(2145), int32] */;
  %538 = @func_1362(%534, %535, %536, %537) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(15, 3, 10), int64], Tensor[(12, 12, 14), float32], Tensor[(288), int32], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(8, 3, 12), int32], Tensor[(10, 16, 14), float32], Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(2, 416), float32]) */;
  %539 = cast(%var_4107, dtype="uint16") /* ty=Tensor[(10, 45), uint16] */;
  %540 = cast(meta[relay.Constant][43] /* ty=uint8 */, dtype="uint16") /* ty=uint16 */;
  %541 = minimum(%539, %540) /* ty=Tensor[(10, 45), uint16] */;
  %542 = cast(%var_4141, dtype="int64") /* ty=Tensor[(10, 45), int64] */;
  %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(2), int32] */;
  %544 = cast(%541, dtype="int64") /* ty=Tensor[(10, 45), int64] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %546 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %547 = cast(%var_4162, dtype="bool") /* ty=Tensor[(520), bool] */;
  %548 = reshape(%547, newshape=[5, 104]) /* ty=Tensor[(5, 104), bool] */;
  %549 = @func_3558(%548) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(10, 13, 4), bool], Tensor[(5, 104), bool]) */;
  %550 = %524.0;
  %551 = %529.14;
  %552 = %538.5;
  %553 = left_shift(%544, %545) /* ty=Tensor[(10, 45), int64] */;
  %554 = %546.0;
  %555 = %549.0;
  (%550, %551, %552, %var_4129, %var_4130, meta[relay.Constant][44] /* ty=Tensor[(2145), int32] */, %553, %554, %555, %var_4162)
}

def @func_1646(%var_1633: Tensor[(2, 3, 13), float32]) -> Tensor[(2, 3, 13), float32] {
  %556 = cast(%var_1633, dtype="float32") /* ty=Tensor[(2, 3, 13), float32] */;
  %557 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(2, 3, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 3, 13), float32] */, dtype="float32") /* ty=Tensor[(2, 3, 13), float32] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  maximum(%558, %559) /* ty=Tensor[(2, 3, 13), float32] */
}

def @func_2799() -> (Tensor[(6, 8, 10), uint8],) {
  %560 = cast(meta[relay.Constant][47] /* ty=Tensor[(6, 8, 10), uint8] */, dtype="uint8") /* ty=Tensor[(6, 8, 10), uint8] */;
  %561 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(6, 8, 10), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(meta[relay.Constant][46] /* ty=Tensor[(6, 8, 10), uint8] */, dtype="uint8") /* ty=Tensor[(6, 8, 10), uint8] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %564 = add(%562, %563) /* ty=Tensor[(6, 8, 10), uint8] */;
  (%564,)
}

def @func_5809() -> (Tensor[(6, 8, 10), uint8],) {
  %565 = @func_5461() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), int32]) */;
  %566 = %565.0;
  (%566,)
}

def @func_7607() -> Tensor[(6, 8, 10), uint8] {
  %567 = @func_6035() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %567.0
}

def @func_6725() -> (Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) {
  %568 = @func_3632() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) */;
  %569 = %568.2;
  %570 = cast(%569, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %571 = @func_5504() /* ty=Tensor[(6, 8, 10), uint8] */;
  %572 = acos(%570) /* ty=Tensor[(2240), float32] */;
  (%571, %572)
}

def @func_7662() -> Tensor[(6, 8, 10), uint8] {
  %573 = @func_5998() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %573.0
}

def @func_6790(%var_6757: Tensor[(288), int32], %var_6764: Tensor[(78), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(12, 12, 14), float32], Tensor[(288), int32], Tensor[(78), int64]) {
  %574 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %575 = @func_5722() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %576 = cast(%var_6757, dtype="int32") /* ty=Tensor[(288), int32] */;
  %577 = reshape(%576, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %578 = @func_447(%577) /* ty=(Tensor[(12, 12, 14), float64], Tensor[(12, 12, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32]) */;
  %579 = cast(%var_6764, dtype="float32") /* ty=Tensor[(78), float32] */;
  %580 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(78), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %581 = cast(meta[relay.Constant][48] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?), float32] */;
  %583 = mod(%581, %582) /* ty=Tensor[(78), float32] */;
  %584 = cast(meta[relay.Constant][48] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %585 = reshape(%584, newshape=[2, 3, 13]) /* ty=Tensor[(2, 3, 13), float32] */;
  %586 = @func_1646(%585) /* ty=Tensor[(2, 3, 13), float32] */;
  %587 = cast(%586, dtype="int64") /* ty=Tensor[(2, 3, 13), int64] */;
  %588 = shape_of(%583, dtype="int32") /* ty=Tensor[(1), int32] */;
  %589 = cast(%583, dtype="int64") /* ty=Tensor[(78), int64] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?), int64] */;
  %591 = %574.0;
  %592 = %575.0;
  %593 = %578.2;
  %594 = subtract(%589, %590) /* ty=Tensor[(78), int64] */;
  (%591, %592, %593, %var_6757, %594)
}

def @func_7440(%var_7407: Tensor[(78), float32], %var_7422: Tensor[(450), int16], %var_7429: Tensor[(2240), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(78), float32], Tensor[(2240), float64], Tensor[(10, 13, 4), bool], Tensor[(2240), int32], Tensor[(450), bool]) {
  %595 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %596 = cast(%var_7407, dtype="float32") /* ty=Tensor[(78), float32] */;
  %597 = reshape(%596, newshape=[78]) /* ty=Tensor[(78), float32] */;
  %598 = @func_3951(%597) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(2, 3, 13), float32], Tensor[(78), float32], Tensor[(2240), float32], Tensor[(832), float32], Tensor[(2240), float32]) */;
  %599 = %598.5;
  %600 = cast(meta[relay.Constant][49] /* ty=Tensor[(2240), float32] */, dtype="float64") /* ty=Tensor[(2240), float64] */;
  %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(1), int32] */;
  %602 = cast(%599, dtype="float64") /* ty=Tensor[(2240), float64] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?), float64] */;
  %604 = cast(meta[relay.Constant][50] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %605 = cast(%var_7422, dtype="int16") /* ty=Tensor[(450), int16] */;
  %606 = reshape(%604, newshape=[]) /* ty=uint8 */;
  %607 = reshape(%605, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %608 = @func_2651(%606, %607) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(520), bool], uint8, Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(4, 15, 14), float64], Tensor[(4, 14, 14), bool], Tensor[(288), int32], Tensor[(8, 104), float32], Tensor[(2, 416), float32], Tensor[(450), int16], Tensor[(2240), float32], Tensor[(4, 14, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(4, 14, 14), float32]) */;
  %609 = cast(%var_7429, dtype="int32") /* ty=Tensor[(2240), int32] */;
  %610 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(2240), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %611 = cast(meta[relay.Constant][49] /* ty=Tensor[(2240), float32] */, dtype="int32") /* ty=Tensor[(2240), int32] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?), int32] */;
  %613 = cast(%var_7422, dtype="bool") /* ty=Tensor[(450), bool] */;
  %614 = cast(meta[relay.Constant][50] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %615 = %595.0;
  %616 = mod(%602, %603) /* ty=Tensor[(2240), float64] */;
  %617 = %608.0;
  %618 = bitwise_and(%611, %612) /* ty=Tensor[(2240), int32] */;
  %619 = equal(%613, %614) /* ty=Tensor[(450), bool] */;
  (%615, %var_7407, %616, %617, %618, %619)
}

def @func_5290() -> (Tensor[(6, 8, 10), uint8],) {
  %620 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %621 = %620.0;
  (%621,)
}

def @func_6975(%var_6966: Tensor[(15, 11, 5), int16]) -> (Tensor[(15, 11, 5), int16],) {
  %622 = cast(meta[relay.Constant][51] /* ty=Tensor[(15, 11, 5), int16] */, dtype="int16") /* ty=Tensor[(15, 11, 5), int16] */;
  %623 = shape_of(%var_6966, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%var_6966, dtype="int16") /* ty=Tensor[(15, 11, 5), int16] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %626 = logical_xor(%624, %625) /* ty=Tensor[(15, 11, 5), int16] */;
  (%626,)
}

def @func_7925(%var_7890: Tensor[(8, 3, 14), uint64], %var_7891: Tensor[(8, 3, 14), uint64]) -> (Tensor[(8, 3, 14), bool], Tensor[(8, 3, 14), float32]) {
  %627 = cast(%var_7891, dtype="bool") /* ty=Tensor[(8, 3, 14), bool] */;
  %628 = shape_of(%var_7890, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%var_7890, dtype="bool") /* ty=Tensor[(8, 3, 14), bool] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %631 = cast(%var_7891, dtype="float32") /* ty=Tensor[(8, 3, 14), float32] */;
  %632 = shape_of(%var_7890, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%var_7890, dtype="float32") /* ty=Tensor[(8, 3, 14), float32] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %635 = less_equal(%629, %630) /* ty=Tensor[(8, 3, 14), bool] */;
  %636 = floor_divide(%633, %634) /* ty=Tensor[(8, 3, 14), float32] */;
  (%635, %636)
}

def @func_4764(%var_4753: uint8) -> (Tensor[(2240), uint8], Tensor[(2240), float32], Tensor[(4, 15, 14), uint8], uint8, Tensor[(6, 8, 10), float32]) {
  %637 = cast(meta[relay.Constant][52] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %638 = reshape(%637, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %639 = @func_4510(%638) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32], Tensor[(2240), uint8]) */;
  %640 = cast(meta[relay.Constant][52] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %641 = cast(%var_4753, dtype="uint8") /* ty=uint8 */;
  %642 = reshape(%641, newshape=[]) /* ty=uint8 */;
  %643 = @func_1919(%642) /* ty=(Tensor[(4, 15, 14), uint8], Tensor[(288), int32], Tensor[(832), float32]) */;
  %644 = @func_3592() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %645 = %644.0;
  %646 = cast(%645, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
  %647 = %639.3;
  %648 = atanh(%640) /* ty=Tensor[(2240), float32] */;
  %649 = %643.0;
  %650 = sin(%646) /* ty=Tensor[(6, 8, 10), float32] */;
  (%647, %648, %649, %var_4753, %650)
}

def @func_5080(%var_4893: Tensor[(960), int8], %var_4933: Tensor[(280, 8), float32], %var_5001: Tensor[(520), bool], %var_5040: Tensor[(2240), float32], %var_5052: Tensor[(195, 1), float64]) -> (Tensor[(6, 8, 10), uint8], Tensor[(288), int32], Tensor[(960), int8], Tensor[(288), int32], Tensor[(6, 8, 10), uint8], Tensor[(832), float32], Tensor[(280, 8), float32], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64], Tensor[(2240), bool], Tensor[(13, 3, 1), float32], Tensor[(39), float32], Tensor[(195, 520), int8], Tensor[(6, 8, 10), float64]) {
  %651 = @func_3690() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %652 = cast(%var_4893, dtype="int8") /* ty=Tensor[(960), int8] */;
  %653 = cast(meta[relay.Constant][53] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %654 = reshape(%652, newshape=[6, 10, 16]) /* ty=Tensor[(6, 10, 16), int8] */;
  %655 = reshape(%653, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %656 = @func_4704(%654, %655) /* ty=(Tensor[(6, 10, 16), int8], Tensor[(5, 104), bool], Tensor[(288), int32], Tensor[(832), float32], Tensor[(520, 1), bool]) */;
  %657 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %658 = @func_3592() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %659 = cast(%var_5001, dtype="bool") /* ty=Tensor[(520), bool] */;
  %660 = reshape(%659, newshape=[130, 4]) /* ty=Tensor[(130, 4), bool] */;
  %661 = @func_3424(%660) /* ty=(Tensor[(6, 8, 10), float64], Tensor[(26, 3), float32], Tensor[(130, 4), bool], Tensor[(26, 3), float32]) */;
  %662 = cast(meta[relay.Constant][54] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %663 = cast(%var_4933, dtype="float32") /* ty=Tensor[(280, 8), float32] */;
  %664 = reshape(%662, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %665 = reshape(%663, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %666 = @func_2884(%664, %665) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(2145), int32], Tensor[(832), float32], Tensor[(2240), float32], Tensor[(450, 2145), float32]) */;
  %667 = %666.3;
  %668 = cast(%var_5040, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(1), int32] */;
  %670 = cast(%667, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?), bool] */;
  %672 = cast(%var_5052, dtype="float64") /* ty=Tensor[(195, 1), float64] */;
  %673 = cast(%var_5052, dtype="float64") /* ty=Tensor[(195, 1), float64] */;
  %674 = cast(meta[relay.Constant][55] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
  %675 = reshape(%672, newshape=[13, 5, 3]) /* ty=Tensor[(13, 5, 3), float64] */;
  %676 = reshape(%673, newshape=[13, 5, 3]) /* ty=Tensor[(13, 5, 3), float64] */;
  %677 = reshape(%674, newshape=[13, 3]) /* ty=Tensor[(13, 3), float32] */;
  %678 = @func_3475(%675, %676, %677) /* ty=(Tensor[(13, 5, 3), float64], Tensor[(13, 5, 3), uint64], Tensor[(13, 3, 1), float32], Tensor[(13, 3), float32]) */;
  %679 = cast(%var_5001, dtype="int8") /* ty=Tensor[(520), int8] */;
  %680 = cast(%var_5052, dtype="int8") /* ty=Tensor[(195, 1), int8] */;
  %681 = %658.0;
  %682 = cast(%681, dtype="uint8") /* ty=Tensor[(6, 8, 10), uint8] */;
  %683 = reshape(%682, newshape=[6, 8, 10]) /* ty=Tensor[(6, 8, 10), uint8] */;
  %684 = @func_4308(%683) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64]) */;
  %685 = %651.0;
  %686 = %656.2;
  %687 = %657.0;
  %688 = %661.0;
  %689 = equal(%670, %671) /* ty=Tensor[(2240), bool] */;
  %690 = %678.2;
  %691 = multiply(%679, %680) /* ty=Tensor[(195, 520), int8] */;
  %692 = %684.2;
  (%685, %686, %var_4893, meta[relay.Constant][53] /* ty=Tensor[(288), int32] */, %687, meta[relay.Constant][54] /* ty=Tensor[(832), float32] */, %var_4933, %681, %688, %689, %690, meta[relay.Constant][55] /* ty=Tensor[(39), float32] */, %691, %692)
}

def @func_5769() -> (Tensor[(6, 8, 10), float32],) {
  %693 = @func_3190() /* ty=Tensor[(6, 8, 10), uint8] */;
  %694 = cast(%693, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
  %695 = sqrt(%694) /* ty=Tensor[(6, 8, 10), float32] */;
  (%695,)
}

def @func_6581() -> Tensor[(6, 8, 10), uint8] {
  %696 = @func_5604() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %696.0
}

def @func_4628() -> (Tensor[(6, 8, 10), uint8],) {
  %697 = @func_3632() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) */;
  %698 = %697.1;
  (%698,)
}

def @func_6668() -> (Tensor[(6, 8, 10), uint8],) {
  %699 = @func_3981() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) */;
  %700 = %699.0;
  (%700,)
}

def @func_2884(%var_2864: Tensor[(832), float32], %var_2865: Tensor[(2240), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(2145), int32], Tensor[(832), float32], Tensor[(2240), float32], Tensor[(450, 2145), float32]) {
  %701 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %702 = cast(meta[relay.Constant][56] /* ty=Tensor[(450, 1), int16] */, dtype="int16") /* ty=Tensor[(450, 1), int16] */;
  %703 = cast(%var_2864, dtype="float32") /* ty=Tensor[(832), float32] */;
  %704 = cast(%var_2865, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %705 = cast(meta[relay.Constant][57] /* ty=Tensor[(2145), int32] */, dtype="int32") /* ty=Tensor[(2145), int32] */;
  %706 = reshape(%702, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), int16] */;
  %707 = reshape(%703, newshape=[2, 416]) /* ty=Tensor[(2, 416), float32] */;
  %708 = reshape(%704, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %709 = reshape(%705, newshape=[2145]) /* ty=Tensor[(2145), int32] */;
  %710 = @func_1362(%706, %707, %708, %709) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(15, 3, 10), int64], Tensor[(12, 12, 14), float32], Tensor[(288), int32], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(8, 3, 12), int32], Tensor[(10, 16, 14), float32], Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(2, 416), float32]) */;
  %711 = cast(meta[relay.Constant][57] /* ty=Tensor[(2145), int32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %712 = cast(meta[relay.Constant][56] /* ty=Tensor[(450, 1), int16] */, dtype="float32") /* ty=Tensor[(450, 1), float32] */;
  %713 = %701.0;
  %714 = %710.9;
  %715 = floor_mod(%711, %712) /* ty=Tensor[(450, 2145), float32] */;
  (%713, %714, %var_2864, %var_2865, %715)
}

def @func_903(%var_893: Tensor[(10, 16, 14), float32]) -> (Tensor[(10, 16, 14), float32],) {
  %716 = cast(%var_893, dtype="float32") /* ty=Tensor[(10, 16, 14), float32] */;
  %717 = erf(%716) /* ty=Tensor[(10, 16, 14), float32] */;
  (%717,)
}

def @func_6018(%var_6008: Tensor[(10, 5, 11), float64]) -> Tensor[(10, 5, 11), float64] {
  %718 = cast(%var_6008, dtype="float64") /* ty=Tensor[(10, 5, 11), float64] */;
  log10(%718) /* ty=Tensor[(10, 5, 11), float64] */
}

def @func_6254(%var_6223: Tensor[(16), float64], %var_6249: Tensor[(450), int16], %var_6251: Tensor[(2240), float32], %var_6252: Tensor[(1, 2145), int32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(16), float64], Tensor[(2, 2, 4), float32], Tensor[(2, 3, 13), float32], Tensor[(78), float32], Tensor[(6, 8, 10), uint8], Tensor[(12, 12, 14), float32], Tensor[(450), int16], Tensor[(2, 416), float32], Tensor[(2240), float32], Tensor[(1, 2145), int32]) {
  %719 = @func_5961() /* ty=(Tensor[(6, 8, 10), float64], Tensor[(6, 8, 10), uint8]) */;
  %720 = cast(%var_6223, dtype="float64") /* ty=Tensor[(16), float64] */;
  %721 = reshape(%720, newshape=[2, 2, 4]) /* ty=Tensor[(2, 2, 4), float64] */;
  %722 = @func_5685(%721) /* ty=(Tensor[(2, 2, 4), int32],) */;
  %723 = %722.0;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(2, 2, 4), float32] */;
  %725 = cast(meta[relay.Constant][58] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %726 = reshape(%725, newshape=[2, 3, 13]) /* ty=Tensor[(2, 3, 13), float32] */;
  %727 = @func_2966() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %728 = cast(%var_6249, dtype="int16") /* ty=Tensor[(450), int16] */;
  %729 = cast(meta[relay.Constant][59] /* ty=Tensor[(2, 416), float32] */, dtype="float32") /* ty=Tensor[(2, 416), float32] */;
  %730 = cast(%var_6251, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %731 = cast(%var_6252, dtype="int32") /* ty=Tensor[(1, 2145), int32] */;
  %732 = reshape(%728, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), int16] */;
  %733 = reshape(%729, newshape=[2, 416]) /* ty=Tensor[(2, 416), float32] */;
  %734 = reshape(%730, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %735 = reshape(%731, newshape=[2145]) /* ty=Tensor[(2145), int32] */;
  %736 = @func_1362(%732, %733, %734, %735) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(15, 3, 10), int64], Tensor[(12, 12, 14), float32], Tensor[(288), int32], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(8, 3, 12), int32], Tensor[(10, 16, 14), float32], Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(2, 416), float32]) */;
  %737 = %719.1;
  %738 = sinh(%724) /* ty=Tensor[(2, 2, 4), float32] */;
  %739 = @func_1646(%726) /* ty=Tensor[(2, 3, 13), float32] */;
  %740 = %727.0;
  %741 = %736.2;
  (%737, %var_6223, %738, %739, meta[relay.Constant][58] /* ty=Tensor[(78), float32] */, %740, %741, %var_6249, meta[relay.Constant][59] /* ty=Tensor[(2, 416), float32] */, %var_6251, %var_6252)
}

def @func_8195() -> Tensor[(6, 8, 10), uint8] {
  %742 = @func_5809() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %742.0
}

def @func_3951(%var_3933: Tensor[(78), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(2, 3, 13), float32], Tensor[(78), float32], Tensor[(2240), float32], Tensor[(832), float32], Tensor[(2240), float32]) {
  %743 = @func_2966() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %744 = cast(%var_3933, dtype="float32") /* ty=Tensor[(78), float32] */;
  %745 = reshape(%744, newshape=[2, 3, 13]) /* ty=Tensor[(2, 3, 13), float32] */;
  %746 = cast(meta[relay.Constant][60] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %747 = cast(meta[relay.Constant][61] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %748 = reshape(%746, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %749 = reshape(%747, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %750 = @func_2884(%748, %749) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(2145), int32], Tensor[(832), float32], Tensor[(2240), float32], Tensor[(450, 2145), float32]) */;
  %751 = %743.0;
  %752 = @func_1646(%745) /* ty=Tensor[(2, 3, 13), float32] */;
  %753 = %750.3;
  (%751, %752, %var_3933, %753, meta[relay.Constant][60] /* ty=Tensor[(832), float32] */, meta[relay.Constant][61] /* ty=Tensor[(2240), float32] */)
}

def @func_4510(%var_4423: Tensor[(2240), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32], Tensor[(2240), uint8]) {
  %754 = @func_3632() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) */;
  %755 = cast(%var_4423, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %756 = reshape(%755, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), float32] */;
  %757 = @func_903(%756) /* ty=(Tensor[(10, 16, 14), float32],) */;
  %758 = %757.0;
  %759 = cast(%758, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
  %760 = shape_of(%var_4423, dtype="int32") /* ty=Tensor[(1), int32] */;
  %761 = cast(%var_4423, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?), bool] */;
  %763 = logical_or(%761, %762) /* ty=Tensor[(2240), bool] */;
  %764 = cast(%var_4423, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %765 = shape_of(%763, dtype="int32") /* ty=Tensor[(1), int32] */;
  %766 = cast(%763, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?), float32] */;
  %768 = cast(%var_4423, dtype="uint8") /* ty=Tensor[(2240), uint8] */;
  %769 = shape_of(%763, dtype="int32") /* ty=Tensor[(1), int32] */;
  %770 = cast(%763, dtype="uint8") /* ty=Tensor[(2240), uint8] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %772 = @func_3190() /* ty=Tensor[(6, 8, 10), uint8] */;
  %773 = %754.1;
  %774 = floor_divide(%766, %767) /* ty=Tensor[(2240), float32] */;
  %775 = subtract(%770, %771) /* ty=Tensor[(2240), uint8] */;
  (%772, %773, %774, %775)
}

def @func_7327() -> Tensor[(6, 8, 10), uint8] {
  %776 = @func_6035() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %776.0
}

def @func_7816(%var_7814: Tensor[(832), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(4, 3, 5), uint16], Tensor[(60), float64], Tensor[(8, 8, 13), bool], Tensor[(832), float32]) {
  %777 = cast(meta[relay.Constant][62] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %778 = reshape(%777, newshape=[4, 3, 5]) /* ty=Tensor[(4, 3, 5), float64] */;
  %779 = @func_5668(%778) /* ty=(Tensor[(4, 3, 5), float64], Tensor[(4, 3, 5), uint16]) */;
  %780 = cast(%var_7814, dtype="float32") /* ty=Tensor[(832), float32] */;
  %781 = cast(%var_7814, dtype="float32") /* ty=Tensor[(832), float32] */;
  %782 = cast(%var_7814, dtype="float64") /* ty=Tensor[(832), float64] */;
  %783 = reshape(%780, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %784 = reshape(%781, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %785 = reshape(%782, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %786 = @func_639(%783, %784, %785) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32], Tensor[(8, 8, 13), bool]) */;
  %787 = @func_7395() /* ty=Tensor[(6, 8, 10), uint8] */;
  %788 = %779.1;
  %789 = %786.3;
  (%787, %788, meta[relay.Constant][62] /* ty=Tensor[(60), float64] */, %789, %var_7814)
}

def @func_6035() -> (Tensor[(6, 8, 10), uint8],) {
  %790 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %791 = %790.0;
  (%791,)
}

def @func_6542(%var_6477: Tensor[(13, 12, 11), float32], %var_6500: Tensor[(4, 72), int32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(12, 12, 14), float32], Tensor[(4, 72), int32], Tensor[(13, 12, 11), float32]) {
  %792 = @func_5722() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %793 = cast(%var_6500, dtype="int32") /* ty=Tensor[(4, 72), int32] */;
  %794 = reshape(%793, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %795 = @func_447(%794) /* ty=(Tensor[(12, 12, 14), float64], Tensor[(12, 12, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32]) */;
  %796 = cast(%var_6477, dtype="float32") /* ty=Tensor[(13, 12, 11), float32] */;
  %797 = atan(%796) /* ty=Tensor[(13, 12, 11), float32] */;
  %798 = cast(%var_6477, dtype="bool") /* ty=Tensor[(13, 12, 11), bool] */;
  %799 = shape_of(%797, dtype="int32") /* ty=Tensor[(3), int32] */;
  %800 = cast(%797, dtype="bool") /* ty=Tensor[(13, 12, 11), bool] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %802 = greater(%800, %801) /* ty=Tensor[(13, 12, 11), bool] */;
  %803 = cast(%797, dtype="uint8") /* ty=Tensor[(13, 12, 11), uint8] */;
  %804 = shape_of(%802, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(%802, dtype="uint8") /* ty=Tensor[(13, 12, 11), uint8] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %807 = maximum(%805, %806) /* ty=Tensor[(13, 12, 11), uint8] */;
  %808 = cast(%797, dtype="float32") /* ty=Tensor[(13, 12, 11), float32] */;
  %809 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(%807, dtype="float32") /* ty=Tensor[(13, 12, 11), float32] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %812 = %792.0;
  %813 = %795.2;
  %814 = floor_divide(%810, %811) /* ty=Tensor[(13, 12, 11), float32] */;
  (%812, %813, %var_6500, %814)
}

def @func_6953(%var_6943: Tensor[(280), float32], %var_6951: Tensor[(520, 1), bool]) -> (Tensor[(6, 8, 10), uint8], Tensor[(78), float32], Tensor[(280), float32], uint8, Tensor[(6, 8, 10), uint8], Tensor[(520, 1), bool]) {
  %815 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %816 = cast(%var_6943, dtype="float32") /* ty=Tensor[(280), float32] */;
  %817 = cast(meta[relay.Constant][63] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %818 = reshape(%816, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), float32] */;
  %819 = reshape(%817, newshape=[]) /* ty=uint8 */;
  %820 = @func_3532(%818, %819) /* ty=(Tensor[(5, 8, 7), float64], Tensor[(1200), float64], Tensor[(78), float32], uint8) */;
  %821 = cast(%var_6951, dtype="bool") /* ty=Tensor[(520, 1), bool] */;
  %822 = %815.0;
  %823 = cast(%822, dtype="uint8") /* ty=Tensor[(6, 8, 10), uint8] */;
  %824 = reshape(%821, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %825 = reshape(%823, newshape=[6, 8, 10]) /* ty=Tensor[(6, 8, 10), uint8] */;
  %826 = @func_5190(%824, %825) /* ty=(Tensor[(26, 3), float32], Tensor[(520), bool], Tensor[(6, 8, 10), bool], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) */;
  %827 = %820.2;
  %828 = %826.3;
  (%822, %827, %var_6943, meta[relay.Constant][63] /* ty=uint8 */, %828, %var_6951)
}

def @func_6623(%var_6611: float64, %var_6612: Tensor[(7, 1, 12), float64]) -> (Tensor[(7, 1, 12), float64],) {
  %829 = cast(%var_6611, dtype="float64") /* ty=float64 */;
  %830 = cast(%var_6612, dtype="float64") /* ty=Tensor[(7, 1, 12), float64] */;
  %831 = floor_divide(%829, %830) /* ty=Tensor[(7, 1, 12), float64] */;
  (%831,)
}

def @func_6633() -> (Tensor[(6, 8, 10), uint8],) {
  %832 = @func_4655() /* ty=Tensor[(6, 8, 10), uint8] */;
  (%832,)
}

def @func_4308(%var_4257: Tensor[(6, 8, 10), uint8]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64]) {
  %833 = @func_3690() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %834 = %833.0;
  %835 = cast(%var_4257, dtype="uint8") /* ty=Tensor[(6, 8, 10), uint8] */;
  %836 = shape_of(%834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(%834, dtype="uint8") /* ty=Tensor[(6, 8, 10), uint8] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %839 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %840 = cast(%834, dtype="float64") /* ty=Tensor[(6, 8, 10), float64] */;
  %841 = subtract(%837, %838) /* ty=Tensor[(6, 8, 10), uint8] */;
  %842 = %839.0;
  %843 = rsqrt(%840) /* ty=Tensor[(6, 8, 10), float64] */;
  (%841, %842, %843)
}

def @func_4866() -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64]) {
  %844 = @func_3592() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %845 = %844.0;
  %846 = cast(%845, dtype="uint8") /* ty=Tensor[(6, 8, 10), uint8] */;
  %847 = reshape(%846, newshape=[6, 8, 10]) /* ty=Tensor[(6, 8, 10), uint8] */;
  %848 = @func_4308(%847) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64]) */;
  %849 = @func_3981() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) */;
  %850 = @func_3981() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) */;
  %851 = @func_3981() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) */;
  %852 = %851.0;
  %853 = cast(%852, dtype="float64") /* ty=Tensor[(6, 8, 10), float64] */;
  %854 = %848.1;
  %855 = %849.0;
  %856 = %850.0;
  %857 = atan(%853) /* ty=Tensor[(6, 8, 10), float64] */;
  (%845, %854, %855, %856, %857)
}

def @main(%var_8210: Tensor[(5, 1, 7), uint64], %var_8211: Tensor[(5, 13, 7), uint64]) -> (Tensor[(5, 13, 7), bool], Tensor[(2240), float32], Tensor[(832, 1), float32], Tensor[(2240), float32], Tensor[(6, 8, 10), uint8], Tensor[(5, 13, 7), float32]) {
  %858 = cast(%var_8210, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %859 = cast(%var_8211, dtype="bool") /* ty=Tensor[(5, 13, 7), bool] */;
  %860 = cast(meta[relay.Constant][64] /* ty=Tensor[(832, 1), float32] */, dtype="float32") /* ty=Tensor[(832, 1), float32] */;
  %861 = cast(meta[relay.Constant][65] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %862 = reshape(%860, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %863 = reshape(%861, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %864 = @func_2884(%862, %863) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(2145), int32], Tensor[(832), float32], Tensor[(2240), float32], Tensor[(450, 2145), float32]) */;
  %865 = @func_7280() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %866 = cast(%var_8210, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
  %867 = cast(%var_8211, dtype="float32") /* ty=Tensor[(5, 13, 7), float32] */;
  %868 = equal(%858, %859) /* ty=Tensor[(5, 13, 7), bool] */;
  %869 = %864.3;
  %870 = %865.0;
  %871 = floor_divide(%866, %867) /* ty=Tensor[(5, 13, 7), float32] */;
  (%868, %869, meta[relay.Constant][64] /* ty=Tensor[(832, 1), float32] */, meta[relay.Constant][65] /* ty=Tensor[(2240), float32] */, %870, %871)
}

def @func_639(%var_604: Tensor[(8, 8, 13), float32], %var_605: Tensor[(8, 8, 13), float32], %var_634: Tensor[(8, 8, 13), float64]) -> (Tensor[(8, 8, 13), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32], Tensor[(8, 8, 13), bool]) {
  %872 = cast(%var_605, dtype="float32") /* ty=Tensor[(8, 8, 13), float32] */;
  %873 = shape_of(%var_604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %874 = cast(%var_604, dtype="float32") /* ty=Tensor[(8, 8, 13), float32] */;
  %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %876 = cast(meta[relay.Constant][66] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %877 = reshape(%876, newshape=[8, 3, 12]) /* ty=Tensor[(8, 3, 12), int32] */;
  %878 = cast(%var_604, dtype="float64") /* ty=Tensor[(8, 8, 13), float64] */;
  %879 = acos(%878) /* ty=Tensor[(8, 8, 13), float64] */;
  %880 = cast(%var_634, dtype="bool") /* ty=Tensor[(8, 8, 13), bool] */;
  %881 = shape_of(%879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(%879, dtype="bool") /* ty=Tensor[(8, 8, 13), bool] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %884 = mod(%874, %875) /* ty=Tensor[(8, 8, 13), float32] */;
  %885 = @func_299(%877) /* ty=Tensor[(8, 3, 12), int32] */;
  %886 = logical_and(%882, %883) /* ty=Tensor[(8, 8, 13), bool] */;
  (%884, %885, meta[relay.Constant][66] /* ty=Tensor[(288), int32] */, %886)
}

def @func_7363() -> (Tensor[(6, 8, 10), uint8], Tensor[(78), float32], Tensor[(280), float32], uint8) {
  %887 = @func_3592() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %888 = cast(meta[relay.Constant][67] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %889 = cast(meta[relay.Constant][68] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %890 = reshape(%888, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), float32] */;
  %891 = reshape(%889, newshape=[]) /* ty=uint8 */;
  %892 = @func_3532(%890, %891) /* ty=(Tensor[(5, 8, 7), float64], Tensor[(1200), float64], Tensor[(78), float32], uint8) */;
  %893 = %887.0;
  %894 = %892.2;
  (%893, %894, meta[relay.Constant][67] /* ty=Tensor[(280), float32] */, meta[relay.Constant][68] /* ty=uint8 */)
}

def @func_3475(%var_3441: Tensor[(13, 5, 3), float64], %var_3458: Tensor[(13, 5, 3), float64], %var_3463: Tensor[(13, 3), float32]) -> (Tensor[(13, 5, 3), float64], Tensor[(13, 5, 3), uint64], Tensor[(13, 3, 1), float32], Tensor[(13, 3), float32]) {
  %895 = cast(%var_3441, dtype="float64") /* ty=Tensor[(13, 5, 3), float64] */;
  %896 = cast(%var_3458, dtype="uint64") /* ty=Tensor[(13, 5, 3), uint64] */;
  %897 = shape_of(%var_3441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %898 = cast(%var_3441, dtype="uint64") /* ty=Tensor[(13, 5, 3), uint64] */;
  %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %900 = cast(%var_3463, dtype="float32") /* ty=Tensor[(13, 3), float32] */;
  %901 = reshape(%900, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
  %902 = sqrt(%895) /* ty=Tensor[(13, 5, 3), float64] */;
  %903 = logical_xor(%898, %899) /* ty=Tensor[(13, 5, 3), uint64] */;
  %904 = @func_227(%901) /* ty=Tensor[(13, 3, 1), float32] */;
  (%902, %903, %904, %var_3463)
}

def @func_5240() -> (Tensor[(6, 8, 10), float32],) {
  %905 = @func_4628() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %906 = %905.0;
  %907 = cast(%906, dtype="float64") /* ty=Tensor[(6, 8, 10), float64] */;
  %908 = exp(%907) /* ty=Tensor[(6, 8, 10), float64] */;
  %909 = cast(%908, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
  %910 = log2(%909) /* ty=Tensor[(6, 8, 10), float32] */;
  (%910,)
}

def @func_1099(%var_1062: Tensor[(15, 13, 11), int32], %var_1063: Tensor[(15, 13, 11), int32]) -> Tensor[(15, 13, 11), int32] {
  %911 = cast(%var_1063, dtype="int32") /* ty=Tensor[(15, 13, 11), int32] */;
  %912 = shape_of(%var_1062, dtype="int32") /* ty=Tensor[(3), int32] */;
  %913 = cast(%var_1062, dtype="int32") /* ty=Tensor[(15, 13, 11), int32] */;
  %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_and(%913, %914) /* ty=Tensor[(15, 13, 11), int32] */
}

def @func_2684(%var_2670: Tensor[(10, 2, 4), int32], %var_2671: Tensor[(10, 2, 4), int32]) -> (Tensor[(10, 2, 4), int32], Tensor[(4, 15, 14), uint8], uint8) {
  %915 = cast(%var_2671, dtype="int32") /* ty=Tensor[(10, 2, 4), int32] */;
  %916 = shape_of(%var_2670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %917 = cast(%var_2670, dtype="int32") /* ty=Tensor[(10, 2, 4), int32] */;
  %918 = dyn.reshape(%915, %916, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %919 = cast(meta[relay.Constant][69] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %920 = reshape(%919, newshape=[]) /* ty=uint8 */;
  %921 = @func_1919(%920) /* ty=(Tensor[(4, 15, 14), uint8], Tensor[(288), int32], Tensor[(832), float32]) */;
  %922 = add(%917, %918) /* ty=Tensor[(10, 2, 4), int32] */;
  %923 = %921.0;
  (%922, %923, meta[relay.Constant][69] /* ty=uint8 */)
}

def @func_5349() -> (Tensor[(6, 8, 10), uint8],) {
  %924 = @func_3981() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) */;
  %925 = %924.0;
  (%925,)
}

def @func_5504() -> Tensor[(6, 8, 10), uint8] {
  %926 = @func_3690() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %926.0
}

def @func_3874(%var_3786: Tensor[(288), int32], %var_3814: Tensor[(832), float32], %var_3830: Tensor[(520), bool]) -> (Tensor[(6, 8, 10), uint8], Tensor[(288), float64], Tensor[(832), uint64], Tensor[(10, 13, 4), bool], Tensor[(520), bool], Tensor[(5, 104), bool]) {
  %927 = cast(meta[relay.Constant][70] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %928 = cast(meta[relay.Constant][70] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %929 = cast(meta[relay.Constant][70] /* ty=Tensor[(832), float32] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %930 = reshape(%927, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %931 = reshape(%928, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %932 = reshape(%929, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %933 = @func_639(%930, %931, %932) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32], Tensor[(8, 8, 13), bool]) */;
  %934 = %933.2;
  %935 = cast(%var_3786, dtype="float64") /* ty=Tensor[(288), float64] */;
  %936 = shape_of(%934, dtype="int32") /* ty=Tensor[(1), int32] */;
  %937 = cast(%934, dtype="float64") /* ty=Tensor[(288), float64] */;
  %938 = dyn.reshape(%935, %936, newshape=[]) /* ty=Tensor[(?), float64] */;
  %939 = cast(%var_3814, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %940 = shape_of(meta[relay.Constant][70] /* ty=Tensor[(832), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %941 = cast(meta[relay.Constant][70] /* ty=Tensor[(832), float32] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %942 = dyn.reshape(%939, %940, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %943 = cast(%var_3830, dtype="bool") /* ty=Tensor[(520), bool] */;
  %944 = reshape(%943, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), bool] */;
  %945 = @func_1819(%944) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(2, 3, 13), float32], Tensor[(26, 3), float32]) */;
  %946 = cast(%var_3830, dtype="bool") /* ty=Tensor[(520), bool] */;
  %947 = reshape(%946, newshape=[5, 104]) /* ty=Tensor[(5, 104), bool] */;
  %948 = @func_3558(%947) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(10, 13, 4), bool], Tensor[(5, 104), bool]) */;
  %949 = @func_3190() /* ty=Tensor[(6, 8, 10), uint8] */;
  %950 = minimum(%937, %938) /* ty=Tensor[(288), float64] */;
  %951 = bitwise_or(%941, %942) /* ty=Tensor[(832), uint64] */;
  %952 = %945.0;
  %953 = %948.2;
  (%949, %950, %951, %952, %var_3830, %953)
}

def @func_2250(%var_2238: Tensor[(15, 16, 5), float64], %var_2247: Tensor[(78), float32]) -> (Tensor[(15, 16, 5), float64], Tensor[(2, 3, 13), float32], Tensor[(78), float32]) {
  %954 = cast(%var_2238, dtype="float64") /* ty=Tensor[(15, 16, 5), float64] */;
  %955 = cast(%var_2247, dtype="float32") /* ty=Tensor[(78), float32] */;
  %956 = reshape(%955, newshape=[2, 3, 13]) /* ty=Tensor[(2, 3, 13), float32] */;
  %957 = erf(%954) /* ty=Tensor[(15, 16, 5), float64] */;
  %958 = @func_1646(%956) /* ty=Tensor[(2, 3, 13), float32] */;
  (%957, %958, %var_2247)
}

def @func_3424(%var_3411: Tensor[(130, 4), bool]) -> (Tensor[(6, 8, 10), float64], Tensor[(26, 3), float32], Tensor[(130, 4), bool], Tensor[(26, 3), float32]) {
  %959 = @func_3190() /* ty=Tensor[(6, 8, 10), uint8] */;
  %960 = cast(%959, dtype="float64") /* ty=Tensor[(6, 8, 10), float64] */;
  %961 = cast(%var_3411, dtype="bool") /* ty=Tensor[(130, 4), bool] */;
  %962 = reshape(%961, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), bool] */;
  %963 = @func_1819(%962) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(2, 3, 13), float32], Tensor[(26, 3), float32]) */;
  %964 = cast(%var_3411, dtype="bool") /* ty=Tensor[(130, 4), bool] */;
  %965 = reshape(%964, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), bool] */;
  %966 = @func_1819(%965) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(2, 3, 13), float32], Tensor[(26, 3), float32]) */;
  %967 = cos(%960) /* ty=Tensor[(6, 8, 10), float64] */;
  %968 = %963.2;
  %969 = %966.2;
  (%967, %968, %var_3411, %969)
}

def @func_5604() -> (Tensor[(6, 8, 10), uint8],) {
  %970 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %971 = %970.0;
  (%971,)
}

def @func_227(%var_217: Tensor[(13, 3, 1), float32]) -> Tensor[(13, 3, 1), float32] {
  %972 = cast(%var_217, dtype="float32") /* ty=Tensor[(13, 3, 1), float32] */;
  asin(%972) /* ty=Tensor[(13, 3, 1), float32] */
}

def @func_6144(%var_6097: Tensor[(6, 8, 10), float64], %var_6135: Tensor[(2, 1120), float32]) -> (Tensor[(6, 8, 10), bool], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32], Tensor[(832), float32], Tensor[(2, 1120), float32], Tensor[(?, 7, 6), uint64]) {
  %973 = @func_5961() /* ty=(Tensor[(6, 8, 10), float64], Tensor[(6, 8, 10), uint8]) */;
  %974 = %973.0;
  %975 = cast(%var_6097, dtype="bool") /* ty=Tensor[(6, 8, 10), bool] */;
  %976 = shape_of(%974, dtype="int32") /* ty=Tensor[(3), int32] */;
  %977 = cast(%974, dtype="bool") /* ty=Tensor[(6, 8, 10), bool] */;
  %978 = dyn.reshape(%975, %976, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %979 = @func_5998() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %980 = cast(meta[relay.Constant][71] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %981 = cast(%var_6135, dtype="float32") /* ty=Tensor[(2, 1120), float32] */;
  %982 = reshape(%980, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %983 = reshape(%981, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %984 = @func_2884(%982, %983) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(2145), int32], Tensor[(832), float32], Tensor[(2240), float32], Tensor[(450, 2145), float32]) */;
  %985 = cast(meta[relay.Constant][72] /* ty=Tensor[(14, 3), uint16] */, dtype="uint16") /* ty=Tensor[(14, 3), uint16] */;
  %986 = reshape(%985, newshape=[1, 7, 6]) /* ty=Tensor[(1, 7, 6), uint16] */;
  %987 = @func_1772(%986) /* ty=Tensor[(1, 7, 6), uint16] */;
  %988 = cast(meta[relay.Constant][72] /* ty=Tensor[(14, 3), uint16] */, dtype="uint64") /* ty=Tensor[(14, 3), uint64] */;
  %989 = shape_of(%987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %990 = cast(%987, dtype="uint64") /* ty=Tensor[(1, 7, 6), uint64] */;
  %991 = dyn.reshape(%988, %989, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %992 = greater(%977, %978) /* ty=Tensor[(6, 8, 10), bool] */;
  %993 = %979.0;
  %994 = %984.3;
  %995 = right_shift(%990, %991) /* ty=Tensor[(?, 7, 6), uint64] */;
  (%992, %993, %994, meta[relay.Constant][71] /* ty=Tensor[(832), float32] */, %var_6135, %995)
}

def @func_4031(%var_4020: Tensor[(6, 8, 10), uint8]) -> (Tensor[(2, 3, 13), float32], Tensor[(13, 6), float32], Tensor[(6, 8, 10), int32]) {
  %996 = cast(meta[relay.Constant][73] /* ty=Tensor[(13, 6), float32] */, dtype="float32") /* ty=Tensor[(13, 6), float32] */;
  %997 = reshape(%996, newshape=[2, 3, 13]) /* ty=Tensor[(2, 3, 13), float32] */;
  %998 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %999 = %998.0;
  %1000 = cast(%var_4020, dtype="int32") /* ty=Tensor[(6, 8, 10), int32] */;
  %1001 = shape_of(%999, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1002 = cast(%999, dtype="int32") /* ty=Tensor[(6, 8, 10), int32] */;
  %1003 = dyn.reshape(%1000, %1001, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1004 = @func_1646(%997) /* ty=Tensor[(2, 3, 13), float32] */;
  %1005 = left_shift(%1002, %1003) /* ty=Tensor[(6, 8, 10), int32] */;
  (%1004, meta[relay.Constant][73] /* ty=Tensor[(13, 6), float32] */, %1005)
}

def @func_7469(%var_7454: Tensor[(1, 15, 3), float64], %var_7463: Tensor[(16, 15, 3), float64]) -> (Tensor[(1, 15, 3), float64], Tensor[(16, 15, 3), float64]) {
  %1006 = cast(%var_7454, dtype="float64") /* ty=Tensor[(1, 15, 3), float64] */;
  %1007 = cast(%var_7454, dtype="float64") /* ty=Tensor[(1, 15, 3), float64] */;
  %1008 = cast(%var_7463, dtype="float64") /* ty=Tensor[(16, 15, 3), float64] */;
  %1009 = sin(%1006) /* ty=Tensor[(1, 15, 3), float64] */;
  %1010 = floor_divide(%1007, %1008) /* ty=Tensor[(16, 15, 3), float64] */;
  (%1009, %1010)
}

def @func_8164() -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(8, 3, 12), int32], Tensor[(72, 4), int32], Tensor[(832), float32], Tensor[(832), float32]) {
  %1011 = @func_5290() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %1012 = @func_5887() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %1013 = @func_2966() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %1014 = cast(meta[relay.Constant][74] /* ty=Tensor[(72, 4), int32] */, dtype="int32") /* ty=Tensor[(72, 4), int32] */;
  %1015 = reshape(%1014, newshape=[8, 3, 12]) /* ty=Tensor[(8, 3, 12), int32] */;
  %1016 = cast(meta[relay.Constant][75] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %1017 = reshape(%1016, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %1018 = @func_7816(%1017) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(4, 3, 5), uint16], Tensor[(60), float64], Tensor[(8, 8, 13), bool], Tensor[(832), float32]) */;
  %1019 = %1011.0;
  %1020 = %1012.0;
  %1021 = %1013.0;
  %1022 = @func_299(%1015) /* ty=Tensor[(8, 3, 12), int32] */;
  %1023 = %1018.4;
  (%1019, %1020, %1021, %1022, meta[relay.Constant][74] /* ty=Tensor[(72, 4), int32] */, %1023, meta[relay.Constant][75] /* ty=Tensor[(832), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3006() -> (Tensor[(6, 8, 10), uint8],) {
  @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_7645() -> (Tensor[(6, 8, 10), uint8],) {
  %2 = fn () -> (Tensor[(6, 8, 10), uint8],) {
    %0 = @func_4628() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %1 = %0.0;
    (%1,)
  };
  %2() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_6627(%var_6625: float64, %var_6626: Tensor[(7, 1, 12), float64]) -> (Tensor[(7, 1, 12), float64],) {
  @func_6623(%var_6625, %var_6626) /* ty=(Tensor[(7, 1, 12), float64],) */
}

def @func_6071() -> (Tensor[(6, 8, 10), float32], Tensor[(6, 8, 10), uint8]) {
  %3 = @func_5769() /* ty=(Tensor[(6, 8, 10), float32],) */;
  %4 = @func_5998() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %5 = %3.0;
  %6 = %4.0;
  (%5, %6)
}

def @func_3593() -> (Tensor[(6, 8, 10), uint8],) {
  %8 = fn () -> (Tensor[(6, 8, 10), uint8],) {
    %7 = @func_3190() /* ty=Tensor[(6, 8, 10), uint8] */;
    (%7,)
  };
  %8() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_5351() -> (Tensor[(6, 8, 10), uint8],) {
  @func_5349() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_7363() -> (Tensor[(6, 8, 10), uint8], Tensor[(78), float32], Tensor[(280), float32], uint8) {
  %9 = @func_3592() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %11 = cast(meta[relay.Constant][1] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %12 = reshape(%10, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), float32] */;
  %13 = reshape(%11, newshape=[]) /* ty=uint8 */;
  %14 = @func_3532(%12, %13) /* ty=(Tensor[(5, 8, 7), float64], Tensor[(1200), float64], Tensor[(78), float32], uint8) */;
  %15 = %9.0;
  %16 = %14.2;
  (%15, %16, meta[relay.Constant][0] /* ty=Tensor[(280), float32] */, meta[relay.Constant][1] /* ty=uint8 */)
}

def @func_4708(%var_4706: Tensor[(6, 10, 16), int8], %var_4707: Tensor[(288), int32]) -> (Tensor[(6, 10, 16), int8], Tensor[(5, 104), bool], Tensor[(288), int32], Tensor[(832), float32], Tensor[(520, 1), bool]) {
  @func_4704(%var_4706, %var_4707) /* ty=(Tensor[(6, 10, 16), int8], Tensor[(5, 104), bool], Tensor[(288), int32], Tensor[(832), float32], Tensor[(520, 1), bool]) */
}

def @func_4656() -> Tensor[(6, 8, 10), uint8] {
  %17 = fn () -> Tensor[(6, 8, 10), uint8] {
    @func_3190() /* ty=Tensor[(6, 8, 10), uint8] */
  };
  %17() /* ty=Tensor[(6, 8, 10), uint8] */
}

def @func_3981() -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) {
  %18 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %19 = @func_3690() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %20 = %18.0;
  %21 = %19.0;
  (%20, %21)
}

def @func_5671(%var_5669: Tensor[(4, 3, 5), float64]) -> (Tensor[(4, 3, 5), float64], Tensor[(4, 3, 5), uint16]) {
  @func_5668(%var_5669) /* ty=(Tensor[(4, 3, 5), float64], Tensor[(4, 3, 5), uint16]) */
}

def @func_5961() -> (Tensor[(6, 8, 10), float64], Tensor[(6, 8, 10), uint8]) {
  %22 = @func_4655() /* ty=Tensor[(6, 8, 10), uint8] */;
  %23 = cast(%22, dtype="float64") /* ty=Tensor[(6, 8, 10), float64] */;
  %24 = @func_5349() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %25 = sigmoid(%23) /* ty=Tensor[(6, 8, 10), float64] */;
  %26 = %24.0;
  (%25, %26)
}

def @func_2900() -> (Tensor[(6, 8, 10), uint8],) {
  @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_3480(%var_3477: Tensor[(13, 5, 3), float64], %var_3478: Tensor[(13, 5, 3), float64], %var_3479: Tensor[(13, 3), float32]) -> (Tensor[(13, 5, 3), float64], Tensor[(13, 5, 3), uint64], Tensor[(13, 3, 1), float32], Tensor[(13, 3), float32]) {
  @func_3475(%var_3477, %var_3478, %var_3479) /* ty=(Tensor[(13, 5, 3), float64], Tensor[(13, 5, 3), uint64], Tensor[(13, 3, 1), float32], Tensor[(13, 3), float32]) */
}

def @func_6018(%var_6008: Tensor[(10, 5, 11), float64]) -> Tensor[(10, 5, 11), float64] {
  %27 = cast(%var_6008, dtype="float64") /* ty=Tensor[(10, 5, 11), float64] */;
  log10(%27) /* ty=Tensor[(10, 5, 11), float64] */
}

def @func_5834(%var_5832: Tensor[(12, 12, 6), int16], %var_5833: Tensor[(12, 12, 6), int16]) -> (Tensor[(12, 12, 6), bool],) {
  %33 = fn (%var_5818: Tensor[(12, 12, 6), int16], %var_5819: Tensor[(12, 12, 6), int16]) -> (Tensor[(12, 12, 6), bool],) {
    %28 = cast(%var_5819, dtype="bool") /* ty=Tensor[(12, 12, 6), bool] */;
    %29 = shape_of(%var_5818, dtype="int32") /* ty=Tensor[(3), int32] */;
    %30 = cast(%var_5818, dtype="bool") /* ty=Tensor[(12, 12, 6), bool] */;
    %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %32 = less_equal(%30, %31) /* ty=Tensor[(12, 12, 6), bool] */;
    (%32,)
  };
  %33(%var_5832, %var_5833) /* ty=(Tensor[(12, 12, 6), bool],) */
}

def @func_3951(%var_3933: Tensor[(78), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(2, 3, 13), float32], Tensor[(78), float32], Tensor[(2240), float32], Tensor[(832), float32], Tensor[(2240), float32]) {
  %34 = @func_2966() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %35 = cast(%var_3933, dtype="float32") /* ty=Tensor[(78), float32] */;
  %36 = reshape(%35, newshape=[2, 3, 13]) /* ty=Tensor[(2, 3, 13), float32] */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %38 = cast(meta[relay.Constant][3] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %39 = reshape(%37, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %40 = reshape(%38, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %41 = @func_2884(%39, %40) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(2145), int32], Tensor[(832), float32], Tensor[(2240), float32], Tensor[(450, 2145), float32]) */;
  %42 = %34.0;
  %43 = @func_1646(%36) /* ty=Tensor[(2, 3, 13), float32] */;
  %44 = %41.3;
  (%42, %43, %var_3933, %44, meta[relay.Constant][2] /* ty=Tensor[(832), float32] */, meta[relay.Constant][3] /* ty=Tensor[(2240), float32] */)
}

def @func_3475(%var_3441: Tensor[(13, 5, 3), float64], %var_3458: Tensor[(13, 5, 3), float64], %var_3463: Tensor[(13, 3), float32]) -> (Tensor[(13, 5, 3), float64], Tensor[(13, 5, 3), uint64], Tensor[(13, 3, 1), float32], Tensor[(13, 3), float32]) {
  %45 = cast(%var_3441, dtype="float64") /* ty=Tensor[(13, 5, 3), float64] */;
  %46 = cast(%var_3458, dtype="uint64") /* ty=Tensor[(13, 5, 3), uint64] */;
  %47 = shape_of(%var_3441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%var_3441, dtype="uint64") /* ty=Tensor[(13, 5, 3), uint64] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %50 = cast(%var_3463, dtype="float32") /* ty=Tensor[(13, 3), float32] */;
  %51 = reshape(%50, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
  %52 = sqrt(%45) /* ty=Tensor[(13, 5, 3), float64] */;
  %53 = logical_xor(%48, %49) /* ty=Tensor[(13, 5, 3), uint64] */;
  %54 = @func_227(%51) /* ty=Tensor[(13, 3, 1), float32] */;
  (%52, %53, %54, %var_3463)
}

def @func_1649(%var_1647: Tensor[(2, 3, 13), float32]) -> Tensor[(2, 3, 13), float32] {
  @func_1646(%var_1647) /* ty=Tensor[(2, 3, 13), float32] */
}

def @func_2651(%var_2590: uint8, %var_2637: Tensor[(450), int16]) -> (Tensor[(10, 13, 4), bool], Tensor[(520), bool], uint8, Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(4, 15, 14), float64], Tensor[(4, 14, 14), bool], Tensor[(288), int32], Tensor[(8, 104), float32], Tensor[(2, 416), float32], Tensor[(450), int16], Tensor[(2240), float32], Tensor[(4, 14, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(4, 14, 14), float32]) {
  %55 = cast(meta[relay.Constant][4] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %56 = reshape(%55, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), bool] */;
  %57 = @func_1819(%56) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(2, 3, 13), float32], Tensor[(26, 3), float32]) */;
  %58 = cast(meta[relay.Constant][5] /* ty=Tensor[(2145), int32] */, dtype="int32") /* ty=Tensor[(2145), int32] */;
  %59 = cast(meta[relay.Constant][5] /* ty=Tensor[(2145), int32] */, dtype="int32") /* ty=Tensor[(2145), int32] */;
  %60 = reshape(%58, newshape=[15, 13, 11]) /* ty=Tensor[(15, 13, 11), int32] */;
  %61 = reshape(%59, newshape=[15, 13, 11]) /* ty=Tensor[(15, 13, 11), int32] */;
  %62 = cast(%var_2590, dtype="uint8") /* ty=uint8 */;
  %63 = reshape(%62, newshape=[]) /* ty=uint8 */;
  %64 = @func_1919(%63) /* ty=(Tensor[(4, 15, 14), uint8], Tensor[(288), int32], Tensor[(832), float32]) */;
  %65 = %64.0;
  %66 = cast(%65, dtype="float64") /* ty=Tensor[(4, 15, 14), float64] */;
  %67 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 14, 14), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 14), float64] */;
  %68 = sigmoid(%67) /* ty=Tensor[(4, 14, 14), float64] */;
  %69 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 14, 14), float64] */, dtype="bool") /* ty=Tensor[(4, 14, 14), bool] */;
  %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%68, dtype="bool") /* ty=Tensor[(4, 14, 14), bool] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %73 = logical_and(%71, %72) /* ty=Tensor[(4, 14, 14), bool] */;
  %74 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 14, 14), float64] */, dtype="bool") /* ty=Tensor[(4, 14, 14), bool] */;
  %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%73, dtype="bool") /* ty=Tensor[(4, 14, 14), bool] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %78 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 104), float32] */, dtype="float32") /* ty=Tensor[(8, 104), float32] */;
  %79 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 104), float32] */, dtype="float32") /* ty=Tensor[(8, 104), float32] */;
  %80 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 104), float32] */, dtype="float64") /* ty=Tensor[(8, 104), float64] */;
  %81 = reshape(%78, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %82 = reshape(%79, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %83 = reshape(%80, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %84 = @func_639(%81, %82, %83) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32], Tensor[(8, 8, 13), bool]) */;
  %85 = cast(%var_2637, dtype="int16") /* ty=Tensor[(450), int16] */;
  %86 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 104), float32] */, dtype="float32") /* ty=Tensor[(8, 104), float32] */;
  %87 = cast(meta[relay.Constant][8] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %88 = @func_1099(%60, %61) /* ty=Tensor[(15, 13, 11), int32] */;
  %89 = cast(%88, dtype="int32") /* ty=Tensor[(15, 13, 11), int32] */;
  %90 = reshape(%85, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), int16] */;
  %91 = reshape(%86, newshape=[2, 416]) /* ty=Tensor[(2, 416), float32] */;
  %92 = reshape(%87, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %93 = reshape(%89, newshape=[2145]) /* ty=Tensor[(2145), int32] */;
  %94 = @func_1362(%90, %91, %92, %93) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(15, 3, 10), int64], Tensor[(12, 12, 14), float32], Tensor[(288), int32], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(8, 3, 12), int32], Tensor[(10, 16, 14), float32], Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(2, 416), float32]) */;
  %95 = cast(%68, dtype="float32") /* ty=Tensor[(4, 14, 14), float32] */;
  %96 = atan(%95) /* ty=Tensor[(4, 14, 14), float32] */;
  %97 = cast(%96, dtype="float32") /* ty=Tensor[(4, 14, 14), float32] */;
  %98 = %84.2;
  %99 = cast(%98, dtype="int32") /* ty=Tensor[(288), int32] */;
  %100 = reshape(%99, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %101 = @func_447(%100) /* ty=(Tensor[(12, 12, 14), float64], Tensor[(12, 12, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32]) */;
  %102 = cast(%96, dtype="float32") /* ty=Tensor[(4, 14, 14), float32] */;
  %103 = %57.0;
  %104 = sqrt(%66) /* ty=Tensor[(4, 15, 14), float64] */;
  %105 = not_equal(%76, %77) /* ty=Tensor[(4, 14, 14), bool] */;
  %106 = %94.10;
  %107 = acos(%97) /* ty=Tensor[(4, 14, 14), float32] */;
  %108 = %101.1;
  %109 = sqrt(%102) /* ty=Tensor[(4, 14, 14), float32] */;
  (%103, meta[relay.Constant][4] /* ty=Tensor[(520), bool] */, %var_2590, %88, meta[relay.Constant][5] /* ty=Tensor[(2145), int32] */, %104, %105, %98, meta[relay.Constant][7] /* ty=Tensor[(8, 104), float32] */, %106, %var_2637, meta[relay.Constant][8] /* ty=Tensor[(2240), float32] */, %107, %108, %109)
}

def @func_5668(%var_5658: Tensor[(4, 3, 5), float64]) -> (Tensor[(4, 3, 5), float64], Tensor[(4, 3, 5), uint16]) {
  %110 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 3, 5), float64] */, dtype="float64") /* ty=Tensor[(4, 3, 5), float64] */;
  %111 = shape_of(%var_5658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%var_5658, dtype="float64") /* ty=Tensor[(4, 3, 5), float64] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %114 = cast(%var_5658, dtype="uint16") /* ty=Tensor[(4, 3, 5), uint16] */;
  %115 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(4, 3, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 3, 5), float64] */, dtype="uint16") /* ty=Tensor[(4, 3, 5), uint16] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %118 = power(%112, %113) /* ty=Tensor[(4, 3, 5), float64] */;
  %119 = bitwise_xor(%116, %117) /* ty=Tensor[(4, 3, 5), uint16] */;
  (%118, %119)
}

def @func_5685(%var_5678: Tensor[(2, 2, 4), float64]) -> (Tensor[(2, 2, 4), int32],) {
  %120 = cast(%var_5678, dtype="float64") /* ty=Tensor[(2, 2, 4), float64] */;
  %121 = log10(%120) /* ty=Tensor[(2, 2, 4), float64] */;
  %122 = cast(%var_5678, dtype="int32") /* ty=Tensor[(2, 2, 4), int32] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="int32") /* ty=Tensor[(2, 2, 4), int32] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %126 = left_shift(%124, %125) /* ty=Tensor[(2, 2, 4), int32] */;
  (%126,)
}

def @func_5505() -> Tensor[(6, 8, 10), uint8] {
  %128 = fn () -> Tensor[(6, 8, 10), uint8] {
    %127 = @func_3690() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %127.0
  };
  %128() /* ty=Tensor[(6, 8, 10), uint8] */
}

def @func_3190() -> Tensor[(6, 8, 10), uint8] {
  %129 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %129.0
}

def @func_3691() -> (Tensor[(6, 8, 10), uint8],) {
  %132 = fn () -> (Tensor[(6, 8, 10), uint8],) {
    %130 = @func_2966() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %131 = %130.0;
    (%131,)
  };
  %132() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_5889() -> (Tensor[(6, 8, 10), uint8],) {
  @func_5887() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_5290() -> (Tensor[(6, 8, 10), uint8],) {
  %133 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %134 = %133.0;
  (%134,)
}

def @func_7558(%var_7556: Tensor[(42), uint16], %var_7557: Tensor[(560, 4), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(10, 16, 14), float32], Tensor[(560, 4), float32], Tensor[(?, 7, 6), int8]) {
  %150 = fn (%var_7538: Tensor[(42), uint16], %var_7545: Tensor[(560, 4), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(10, 16, 14), float32], Tensor[(560, 4), float32], Tensor[(?, 7, 6), int8]) {
    %135 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %136 = cast(%var_7545, dtype="float32") /* ty=Tensor[(560, 4), float32] */;
    %137 = reshape(%136, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), float32] */;
    %138 = @func_903(%137) /* ty=(Tensor[(10, 16, 14), float32],) */;
    %139 = cast(%var_7538, dtype="uint16") /* ty=Tensor[(42), uint16] */;
    %140 = reshape(%139, newshape=[1, 7, 6]) /* ty=Tensor[(1, 7, 6), uint16] */;
    %141 = @func_1772(%140) /* ty=Tensor[(1, 7, 6), uint16] */;
    %142 = cast(%var_7538, dtype="int8") /* ty=Tensor[(42), int8] */;
    %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
    %144 = cast(%141, dtype="int8") /* ty=Tensor[(1, 7, 6), int8] */;
    %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %146 = @func_6581() /* ty=Tensor[(6, 8, 10), uint8] */;
    %147 = %135.0;
    %148 = %138.0;
    %149 = add(%144, %145) /* ty=Tensor[(?, 7, 6), int8] */;
    (%146, %147, %148, %var_7545, %149)
  };
  %150(%var_7556, %var_7557) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(10, 16, 14), float32], Tensor[(560, 4), float32], Tensor[(?, 7, 6), int8]) */
}

def @func_1102(%var_1100: Tensor[(15, 13, 11), int32], %var_1101: Tensor[(15, 13, 11), int32]) -> Tensor[(15, 13, 11), int32] {
  %155 = fn (%var_1062: Tensor[(15, 13, 11), int32], %var_1063: Tensor[(15, 13, 11), int32]) -> Tensor[(15, 13, 11), int32] {
    %151 = cast(%var_1063, dtype="int32") /* ty=Tensor[(15, 13, 11), int32] */;
    %152 = shape_of(%var_1062, dtype="int32") /* ty=Tensor[(3), int32] */;
    %153 = cast(%var_1062, dtype="int32") /* ty=Tensor[(15, 13, 11), int32] */;
    %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    bitwise_and(%153, %154) /* ty=Tensor[(15, 13, 11), int32] */
  };
  %155(%var_1100, %var_1101) /* ty=Tensor[(15, 13, 11), int32] */
}

def @func_3878(%var_3875: Tensor[(288), int32], %var_3876: Tensor[(832), float32], %var_3877: Tensor[(520), bool]) -> (Tensor[(6, 8, 10), uint8], Tensor[(288), float64], Tensor[(832), uint64], Tensor[(10, 13, 4), bool], Tensor[(520), bool], Tensor[(5, 104), bool]) {
  %183 = fn (%var_3786: Tensor[(288), int32], %var_3814: Tensor[(832), float32], %var_3830: Tensor[(520), bool]) -> (Tensor[(6, 8, 10), uint8], Tensor[(288), float64], Tensor[(832), uint64], Tensor[(10, 13, 4), bool], Tensor[(520), bool], Tensor[(5, 104), bool]) {
    %156 = cast(meta[relay.Constant][10] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
    %157 = cast(meta[relay.Constant][10] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
    %158 = cast(meta[relay.Constant][10] /* ty=Tensor[(832), float32] */, dtype="float64") /* ty=Tensor[(832), float64] */;
    %159 = reshape(%156, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
    %160 = reshape(%157, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
    %161 = reshape(%158, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
    %162 = @func_639(%159, %160, %161) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32], Tensor[(8, 8, 13), bool]) */;
    %163 = %162.2;
    %164 = cast(%var_3786, dtype="float64") /* ty=Tensor[(288), float64] */;
    %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(1), int32] */;
    %166 = cast(%163, dtype="float64") /* ty=Tensor[(288), float64] */;
    %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?), float64] */;
    %168 = cast(%var_3814, dtype="uint64") /* ty=Tensor[(832), uint64] */;
    %169 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(832), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %170 = cast(meta[relay.Constant][10] /* ty=Tensor[(832), float32] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
    %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %172 = cast(%var_3830, dtype="bool") /* ty=Tensor[(520), bool] */;
    %173 = reshape(%172, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), bool] */;
    %174 = @func_1819(%173) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(2, 3, 13), float32], Tensor[(26, 3), float32]) */;
    %175 = cast(%var_3830, dtype="bool") /* ty=Tensor[(520), bool] */;
    %176 = reshape(%175, newshape=[5, 104]) /* ty=Tensor[(5, 104), bool] */;
    %177 = @func_3558(%176) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(10, 13, 4), bool], Tensor[(5, 104), bool]) */;
    %178 = @func_3190() /* ty=Tensor[(6, 8, 10), uint8] */;
    %179 = minimum(%166, %167) /* ty=Tensor[(288), float64] */;
    %180 = bitwise_or(%170, %171) /* ty=Tensor[(832), uint64] */;
    %181 = %174.0;
    %182 = %177.2;
    (%178, %179, %180, %181, %var_3830, %182)
  };
  %183(%var_3875, %var_3876, %var_3877) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(288), float64], Tensor[(832), uint64], Tensor[(10, 13, 4), bool], Tensor[(520), bool], Tensor[(5, 104), bool]) */
}

def @func_6635() -> (Tensor[(6, 8, 10), uint8],) {
  @func_6633() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_6690() -> (Tensor[(6, 8, 10), uint8],) {
  %184 = @func_5722() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %185 = %184.0;
  (%185,)
}

def @func_3004() -> (Tensor[(6, 8, 10), uint8],) {
  %186 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %187 = %186.0;
  (%187,)
}

def @func_6545(%var_6543: Tensor[(13, 12, 11), float32], %var_6544: Tensor[(4, 72), int32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(12, 12, 14), float32], Tensor[(4, 72), int32], Tensor[(13, 12, 11), float32]) {
  %211 = fn (%var_6477: Tensor[(13, 12, 11), float32], %var_6500: Tensor[(4, 72), int32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(12, 12, 14), float32], Tensor[(4, 72), int32], Tensor[(13, 12, 11), float32]) {
    %188 = @func_5722() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %189 = cast(%var_6500, dtype="int32") /* ty=Tensor[(4, 72), int32] */;
    %190 = reshape(%189, newshape=[288]) /* ty=Tensor[(288), int32] */;
    %191 = @func_447(%190) /* ty=(Tensor[(12, 12, 14), float64], Tensor[(12, 12, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32]) */;
    %192 = cast(%var_6477, dtype="float32") /* ty=Tensor[(13, 12, 11), float32] */;
    %193 = atan(%192) /* ty=Tensor[(13, 12, 11), float32] */;
    %194 = cast(%var_6477, dtype="bool") /* ty=Tensor[(13, 12, 11), bool] */;
    %195 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
    %196 = cast(%193, dtype="bool") /* ty=Tensor[(13, 12, 11), bool] */;
    %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %198 = greater(%196, %197) /* ty=Tensor[(13, 12, 11), bool] */;
    %199 = cast(%193, dtype="uint8") /* ty=Tensor[(13, 12, 11), uint8] */;
    %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(3), int32] */;
    %201 = cast(%198, dtype="uint8") /* ty=Tensor[(13, 12, 11), uint8] */;
    %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %203 = maximum(%201, %202) /* ty=Tensor[(13, 12, 11), uint8] */;
    %204 = cast(%193, dtype="float32") /* ty=Tensor[(13, 12, 11), float32] */;
    %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(3), int32] */;
    %206 = cast(%203, dtype="float32") /* ty=Tensor[(13, 12, 11), float32] */;
    %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %208 = %188.0;
    %209 = %191.2;
    %210 = floor_divide(%206, %207) /* ty=Tensor[(13, 12, 11), float32] */;
    (%208, %209, %var_6500, %210)
  };
  %211(%var_6543, %var_6544) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(12, 12, 14), float32], Tensor[(4, 72), int32], Tensor[(13, 12, 11), float32]) */
}

def @func_5688(%var_5686: Tensor[(2, 2, 4), float64]) -> (Tensor[(2, 2, 4), int32],) {
  @func_5685(%var_5686) /* ty=(Tensor[(2, 2, 4), int32],) */
}

def @func_7282() -> (Tensor[(6, 8, 10), uint8],) {
  @func_7280() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_5240() -> (Tensor[(6, 8, 10), float32],) {
  %212 = @func_4628() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %213 = %212.0;
  %214 = cast(%213, dtype="float64") /* ty=Tensor[(6, 8, 10), float64] */;
  %215 = exp(%214) /* ty=Tensor[(6, 8, 10), float64] */;
  %216 = cast(%215, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
  %217 = log2(%216) /* ty=Tensor[(6, 8, 10), float32] */;
  (%217,)
}

def @func_5349() -> (Tensor[(6, 8, 10), uint8],) {
  %218 = @func_3981() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) */;
  %219 = %218.0;
  (%219,)
}

def @func_6725() -> (Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) {
  %220 = @func_3632() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) */;
  %221 = %220.2;
  %222 = cast(%221, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %223 = @func_5504() /* ty=Tensor[(6, 8, 10), uint8] */;
  %224 = acos(%222) /* ty=Tensor[(2240), float32] */;
  (%223, %224)
}

def @func_7280() -> (Tensor[(6, 8, 10), uint8],) {
  %225 = @func_5461() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), int32]) */;
  %226 = %225.0;
  (%226,)
}

def @func_301(%var_300: Tensor[(8, 3, 12), int32]) -> Tensor[(8, 3, 12), int32] {
  %231 = fn (%var_286: Tensor[(8, 3, 12), int32]) -> Tensor[(8, 3, 12), int32] {
    %227 = cast(%var_286, dtype="int32") /* ty=Tensor[(8, 3, 12), int32] */;
    %228 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(8, 3, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %229 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 3, 12), int32] */, dtype="int32") /* ty=Tensor[(8, 3, 12), int32] */;
    %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    right_shift(%229, %230) /* ty=Tensor[(8, 3, 12), int32] */
  };
  %231(%var_300) /* ty=Tensor[(8, 3, 12), int32] */
}

def @func_5771() -> (Tensor[(6, 8, 10), float32],) {
  @func_5769() /* ty=(Tensor[(6, 8, 10), float32],) */
}

def @func_2250(%var_2238: Tensor[(15, 16, 5), float64], %var_2247: Tensor[(78), float32]) -> (Tensor[(15, 16, 5), float64], Tensor[(2, 3, 13), float32], Tensor[(78), float32]) {
  %232 = cast(%var_2238, dtype="float64") /* ty=Tensor[(15, 16, 5), float64] */;
  %233 = cast(%var_2247, dtype="float32") /* ty=Tensor[(78), float32] */;
  %234 = reshape(%233, newshape=[2, 3, 13]) /* ty=Tensor[(2, 3, 13), float32] */;
  %235 = erf(%232) /* ty=Tensor[(15, 16, 5), float64] */;
  %236 = @func_1646(%234) /* ty=Tensor[(2, 3, 13), float32] */;
  (%235, %236, %var_2247)
}

def @func_3277(%var_3275: uint8, %var_3276: Tensor[(2240), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(450), int16], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(450), bool], uint8, Tensor[(80), int32]) {
  @func_3273(%var_3275, %var_3276) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(450), int16], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(450), bool], uint8, Tensor[(80), int32]) */
}

def @func_5606() -> (Tensor[(6, 8, 10), uint8],) {
  @func_5604() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_1775(%var_1773: Tensor[(1, 7, 6), uint16]) -> Tensor[(1, 7, 6), uint16] {
  @func_1772(%var_1773) /* ty=Tensor[(1, 7, 6), uint16] */
}

def @func_7440(%var_7407: Tensor[(78), float32], %var_7422: Tensor[(450), int16], %var_7429: Tensor[(2240), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(78), float32], Tensor[(2240), float64], Tensor[(10, 13, 4), bool], Tensor[(2240), int32], Tensor[(450), bool]) {
  %237 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %238 = cast(%var_7407, dtype="float32") /* ty=Tensor[(78), float32] */;
  %239 = reshape(%238, newshape=[78]) /* ty=Tensor[(78), float32] */;
  %240 = @func_3951(%239) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(2, 3, 13), float32], Tensor[(78), float32], Tensor[(2240), float32], Tensor[(832), float32], Tensor[(2240), float32]) */;
  %241 = %240.5;
  %242 = cast(meta[relay.Constant][12] /* ty=Tensor[(2240), float32] */, dtype="float64") /* ty=Tensor[(2240), float64] */;
  %243 = shape_of(%241, dtype="int32") /* ty=Tensor[(1), int32] */;
  %244 = cast(%241, dtype="float64") /* ty=Tensor[(2240), float64] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?), float64] */;
  %246 = cast(meta[relay.Constant][13] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %247 = cast(%var_7422, dtype="int16") /* ty=Tensor[(450), int16] */;
  %248 = reshape(%246, newshape=[]) /* ty=uint8 */;
  %249 = reshape(%247, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %250 = @func_2651(%248, %249) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(520), bool], uint8, Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(4, 15, 14), float64], Tensor[(4, 14, 14), bool], Tensor[(288), int32], Tensor[(8, 104), float32], Tensor[(2, 416), float32], Tensor[(450), int16], Tensor[(2240), float32], Tensor[(4, 14, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(4, 14, 14), float32]) */;
  %251 = cast(%var_7429, dtype="int32") /* ty=Tensor[(2240), int32] */;
  %252 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(2240), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %253 = cast(meta[relay.Constant][12] /* ty=Tensor[(2240), float32] */, dtype="int32") /* ty=Tensor[(2240), int32] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?), int32] */;
  %255 = cast(%var_7422, dtype="bool") /* ty=Tensor[(450), bool] */;
  %256 = cast(meta[relay.Constant][13] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %257 = %237.0;
  %258 = mod(%244, %245) /* ty=Tensor[(2240), float64] */;
  %259 = %250.0;
  %260 = bitwise_and(%253, %254) /* ty=Tensor[(2240), int32] */;
  %261 = equal(%255, %256) /* ty=Tensor[(450), bool] */;
  (%257, %var_7407, %258, %259, %260, %261)
}

def @func_5567(%var_5533: Tensor[(520), bool], %var_5539: Tensor[(280), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(520), bool], uint8, Tensor[(280), float32], Tensor[(6, 8, 10), uint8], Tensor[(1200), float64], Tensor[(26, 3), bool]) {
  %262 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %263 = cast(%var_5539, dtype="float32") /* ty=Tensor[(280), float32] */;
  %264 = cast(meta[relay.Constant][14] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %265 = reshape(%263, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), float32] */;
  %266 = reshape(%264, newshape=[]) /* ty=uint8 */;
  %267 = @func_3532(%265, %266) /* ty=(Tensor[(5, 8, 7), float64], Tensor[(1200), float64], Tensor[(78), float32], uint8) */;
  %268 = @func_2966() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %269 = cast(%var_5533, dtype="bool") /* ty=Tensor[(520), bool] */;
  %270 = reshape(%269, newshape=[130, 4]) /* ty=Tensor[(130, 4), bool] */;
  %271 = @func_3424(%270) /* ty=(Tensor[(6, 8, 10), float64], Tensor[(26, 3), float32], Tensor[(130, 4), bool], Tensor[(26, 3), float32]) */;
  %272 = %271.1;
  %273 = cast(%272, dtype="float64") /* ty=Tensor[(26, 3), float64] */;
  %274 = sin(%273) /* ty=Tensor[(26, 3), float64] */;
  %275 = cast(%274, dtype="float32") /* ty=Tensor[(26, 3), float32] */;
  %276 = %267.3;
  %277 = cast(%276, dtype="uint8") /* ty=uint8 */;
  %278 = reshape(%275, newshape=[78]) /* ty=Tensor[(78), float32] */;
  %279 = reshape(%277, newshape=[]) /* ty=uint8 */;
  %280 = @func_2854(%278, %279) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(15, 16, 5), float64], Tensor[(1200), float64], Tensor[(78), float32], Tensor[(450), int16], uint8, Tensor[(450), int16]) */;
  %281 = cast(%274, dtype="bool") /* ty=Tensor[(26, 3), bool] */;
  %282 = cast(meta[relay.Constant][14] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %283 = %262.0;
  %284 = %268.0;
  %285 = %280.2;
  %286 = greater(%281, %282) /* ty=Tensor[(26, 3), bool] */;
  (%283, %var_5533, %276, %var_5539, %284, %285, %286)
}

def @func_2684(%var_2670: Tensor[(10, 2, 4), int32], %var_2671: Tensor[(10, 2, 4), int32]) -> (Tensor[(10, 2, 4), int32], Tensor[(4, 15, 14), uint8], uint8) {
  %287 = cast(%var_2671, dtype="int32") /* ty=Tensor[(10, 2, 4), int32] */;
  %288 = shape_of(%var_2670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%var_2670, dtype="int32") /* ty=Tensor[(10, 2, 4), int32] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %291 = cast(meta[relay.Constant][15] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %292 = reshape(%291, newshape=[]) /* ty=uint8 */;
  %293 = @func_1919(%292) /* ty=(Tensor[(4, 15, 14), uint8], Tensor[(288), int32], Tensor[(832), float32]) */;
  %294 = add(%289, %290) /* ty=Tensor[(10, 2, 4), int32] */;
  %295 = %293.0;
  (%294, %295, meta[relay.Constant][15] /* ty=uint8 */)
}

def @func_4170(%var_4165: Tensor[(10, 45), int16], %var_4166: Tensor[(832, 1), float32], %var_4167: Tensor[(2240), float32], %var_4168: Tensor[(10, 45), uint16], %var_4169: Tensor[(520), bool]) -> (Tensor[(6, 8, 10), uint8], Tensor[(4, 14, 14), float32], Tensor[(2240), float32], Tensor[(832, 1), float32], Tensor[(2240), float32], Tensor[(2145), int32], Tensor[(10, 45), int64], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(520), bool]) {
  %328 = fn (%var_4107: Tensor[(10, 45), int16], %var_4129: Tensor[(832, 1), float32], %var_4130: Tensor[(2240), float32], %var_4141: Tensor[(10, 45), uint16], %var_4162: Tensor[(520), bool]) -> (Tensor[(6, 8, 10), uint8], Tensor[(4, 14, 14), float32], Tensor[(2240), float32], Tensor[(832, 1), float32], Tensor[(2240), float32], Tensor[(2145), int32], Tensor[(10, 45), int64], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(520), bool]) {
    %296 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %297 = cast(meta[relay.Constant][16] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %298 = cast(%var_4107, dtype="int16") /* ty=Tensor[(10, 45), int16] */;
    %299 = reshape(%297, newshape=[]) /* ty=uint8 */;
    %300 = reshape(%298, newshape=[450]) /* ty=Tensor[(450), int16] */;
    %301 = @func_2651(%299, %300) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(520), bool], uint8, Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(4, 15, 14), float64], Tensor[(4, 14, 14), bool], Tensor[(288), int32], Tensor[(8, 104), float32], Tensor[(2, 416), float32], Tensor[(450), int16], Tensor[(2240), float32], Tensor[(4, 14, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(4, 14, 14), float32]) */;
    %302 = cast(%var_4107, dtype="int16") /* ty=Tensor[(10, 45), int16] */;
    %303 = cast(%var_4129, dtype="float32") /* ty=Tensor[(832, 1), float32] */;
    %304 = cast(%var_4130, dtype="float32") /* ty=Tensor[(2240), float32] */;
    %305 = cast(meta[relay.Constant][17] /* ty=Tensor[(2145), int32] */, dtype="int32") /* ty=Tensor[(2145), int32] */;
    %306 = reshape(%302, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), int16] */;
    %307 = reshape(%303, newshape=[2, 416]) /* ty=Tensor[(2, 416), float32] */;
    %308 = reshape(%304, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
    %309 = reshape(%305, newshape=[2145]) /* ty=Tensor[(2145), int32] */;
    %310 = @func_1362(%306, %307, %308, %309) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(15, 3, 10), int64], Tensor[(12, 12, 14), float32], Tensor[(288), int32], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(8, 3, 12), int32], Tensor[(10, 16, 14), float32], Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(2, 416), float32]) */;
    %311 = cast(%var_4107, dtype="uint16") /* ty=Tensor[(10, 45), uint16] */;
    %312 = cast(meta[relay.Constant][16] /* ty=uint8 */, dtype="uint16") /* ty=uint16 */;
    %313 = minimum(%311, %312) /* ty=Tensor[(10, 45), uint16] */;
    %314 = cast(%var_4141, dtype="int64") /* ty=Tensor[(10, 45), int64] */;
    %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(2), int32] */;
    %316 = cast(%313, dtype="int64") /* ty=Tensor[(10, 45), int64] */;
    %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %318 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %319 = cast(%var_4162, dtype="bool") /* ty=Tensor[(520), bool] */;
    %320 = reshape(%319, newshape=[5, 104]) /* ty=Tensor[(5, 104), bool] */;
    %321 = @func_3558(%320) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(10, 13, 4), bool], Tensor[(5, 104), bool]) */;
    %322 = %296.0;
    %323 = %301.14;
    %324 = %310.5;
    %325 = left_shift(%316, %317) /* ty=Tensor[(10, 45), int64] */;
    %326 = %318.0;
    %327 = %321.0;
    (%322, %323, %324, %var_4129, %var_4130, meta[relay.Constant][17] /* ty=Tensor[(2145), int32] */, %325, %326, %327, %var_4162)
  };
  %328(%var_4165, %var_4166, %var_4167, %var_4168, %var_4169) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(4, 14, 14), float32], Tensor[(2240), float32], Tensor[(832, 1), float32], Tensor[(2240), float32], Tensor[(2145), int32], Tensor[(10, 45), int64], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(520), bool]) */
}

def @func_905(%var_904: Tensor[(10, 16, 14), float32]) -> (Tensor[(10, 16, 14), float32],) {
  %331 = fn (%var_893: Tensor[(10, 16, 14), float32]) -> (Tensor[(10, 16, 14), float32],) {
    %329 = cast(%var_893, dtype="float32") /* ty=Tensor[(10, 16, 14), float32] */;
    %330 = erf(%329) /* ty=Tensor[(10, 16, 14), float32] */;
    (%330,)
  };
  %331(%var_904) /* ty=(Tensor[(10, 16, 14), float32],) */
}

def @func_6670() -> (Tensor[(6, 8, 10), uint8],) {
  @func_6668() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_6794(%var_6792: Tensor[(288), int32], %var_6793: Tensor[(78), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(12, 12, 14), float32], Tensor[(288), int32], Tensor[(78), int64]) {
  @func_6790(%var_6792, %var_6793) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(12, 12, 14), float32], Tensor[(288), int32], Tensor[(78), int64]) */
}

def @func_7607() -> Tensor[(6, 8, 10), uint8] {
  %332 = @func_6035() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %332.0
}

def @func_5327(%var_5325: Tensor[(360), uint64], %var_5326: Tensor[(78), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 15, 4), bool], Tensor[(360), uint64], Tensor[(15, 16, 5), float64], Tensor[(78), float32], uint8) {
  %345 = fn (%var_5317: Tensor[(360), uint64], %var_5321: Tensor[(78), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 15, 4), bool], Tensor[(360), uint64], Tensor[(15, 16, 5), float64], Tensor[(78), float32], uint8) {
    %333 = @func_2966() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %334 = cast(%var_5317, dtype="uint64") /* ty=Tensor[(360), uint64] */;
    %335 = reshape(%334, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), uint64] */;
    %336 = @func_1624(%335) /* ty=(Tensor[(6, 15, 4), bool],) */;
    %337 = cast(%var_5321, dtype="float32") /* ty=Tensor[(78), float32] */;
    %338 = cast(meta[relay.Constant][18] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %339 = reshape(%337, newshape=[78]) /* ty=Tensor[(78), float32] */;
    %340 = reshape(%338, newshape=[]) /* ty=uint8 */;
    %341 = @func_2854(%339, %340) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(15, 16, 5), float64], Tensor[(1200), float64], Tensor[(78), float32], Tensor[(450), int16], uint8, Tensor[(450), int16]) */;
    %342 = %333.0;
    %343 = %336.0;
    %344 = %341.1;
    (%342, %343, %var_5317, %344, %var_5321, meta[relay.Constant][18] /* ty=uint8 */)
  };
  %345(%var_5325, %var_5326) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 15, 4), bool], Tensor[(360), uint64], Tensor[(15, 16, 5), float64], Tensor[(78), float32], uint8) */
}

def @func_1921(%var_1920: uint8) -> (Tensor[(4, 15, 14), uint8], Tensor[(288), int32], Tensor[(832), float32]) {
  %357 = fn (%var_1903: uint8) -> (Tensor[(4, 15, 14), uint8], Tensor[(288), int32], Tensor[(832), float32]) {
    %346 = cast(%var_1903, dtype="uint8") /* ty=uint8 */;
    %347 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 15, 14), uint8] */, dtype="uint8") /* ty=Tensor[(4, 15, 14), uint8] */;
    %348 = cast(meta[relay.Constant][20] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
    %349 = cast(meta[relay.Constant][20] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
    %350 = cast(meta[relay.Constant][20] /* ty=Tensor[(832), float32] */, dtype="float64") /* ty=Tensor[(832), float64] */;
    %351 = reshape(%348, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
    %352 = reshape(%349, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
    %353 = reshape(%350, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
    %354 = @func_639(%351, %352, %353) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32], Tensor[(8, 8, 13), bool]) */;
    %355 = right_shift(%346, %347) /* ty=Tensor[(4, 15, 14), uint8] */;
    %356 = %354.2;
    (%355, %356, meta[relay.Constant][20] /* ty=Tensor[(832), float32] */)
  };
  %357(%var_1920) /* ty=(Tensor[(4, 15, 14), uint8], Tensor[(288), int32], Tensor[(832), float32]) */
}

def @func_6582() -> Tensor[(6, 8, 10), uint8] {
  %359 = fn () -> Tensor[(6, 8, 10), uint8] {
    %358 = @func_5604() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %358.0
  };
  %359() /* ty=Tensor[(6, 8, 10), uint8] */
}

def @func_6440() -> (Tensor[(6, 8, 10), uint8],) {
  %362 = fn () -> (Tensor[(6, 8, 10), uint8],) {
    %360 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %361 = %360.0;
    (%361,)
  };
  %362() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_7609() -> Tensor[(6, 8, 10), uint8] {
  @func_7607() /* ty=Tensor[(6, 8, 10), uint8] */
}

def @func_2858(%var_2856: Tensor[(78), float32], %var_2857: uint8) -> (Tensor[(6, 8, 10), uint8], Tensor[(15, 16, 5), float64], Tensor[(1200), float64], Tensor[(78), float32], Tensor[(450), int16], uint8, Tensor[(450), int16]) {
  @func_2854(%var_2856, %var_2857) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(15, 16, 5), float64], Tensor[(1200), float64], Tensor[(78), float32], Tensor[(450), int16], uint8, Tensor[(450), int16]) */
}

def @func_5463() -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), int32]) {
  @func_5461() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), int32]) */
}

def @func_2519(%var_2516: Tensor[(4, 8, 6), uint32], %var_2517: Tensor[(4, 8, 6), uint32], %var_2518: Tensor[(468), float64]) -> (Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(4, 8, 6), bool], Tensor[(13, 3, 1), float32], Tensor[(468), float64]) {
  %382 = fn (%var_2485: Tensor[(4, 8, 6), uint32], %var_2486: Tensor[(4, 8, 6), uint32], %var_2513: Tensor[(468), float64]) -> (Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(4, 8, 6), bool], Tensor[(13, 3, 1), float32], Tensor[(468), float64]) {
    %363 = cast(meta[relay.Constant][21] /* ty=Tensor[(2145), int32] */, dtype="int32") /* ty=Tensor[(2145), int32] */;
    %364 = cast(meta[relay.Constant][21] /* ty=Tensor[(2145), int32] */, dtype="int32") /* ty=Tensor[(2145), int32] */;
    %365 = reshape(%363, newshape=[15, 13, 11]) /* ty=Tensor[(15, 13, 11), int32] */;
    %366 = reshape(%364, newshape=[15, 13, 11]) /* ty=Tensor[(15, 13, 11), int32] */;
    %367 = cast(%var_2486, dtype="bool") /* ty=Tensor[(4, 8, 6), bool] */;
    %368 = shape_of(%var_2485, dtype="int32") /* ty=Tensor[(3), int32] */;
    %369 = cast(%var_2485, dtype="bool") /* ty=Tensor[(4, 8, 6), bool] */;
    %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %371 = greater(%369, %370) /* ty=Tensor[(4, 8, 6), bool] */;
    %372 = cast(%371, dtype="bool") /* ty=Tensor[(4, 8, 6), bool] */;
    %373 = shape_of(%var_2485, dtype="int32") /* ty=Tensor[(3), int32] */;
    %374 = cast(%var_2485, dtype="bool") /* ty=Tensor[(4, 8, 6), bool] */;
    %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %376 = cast(%var_2513, dtype="float64") /* ty=Tensor[(468), float64] */;
    %377 = reshape(%376, newshape=[6, 13, 6]) /* ty=Tensor[(6, 13, 6), float64] */;
    %378 = @func_1690(%377) /* ty=(Tensor[(6, 13, 6), float64], Tensor[(8, 8, 13), bool], Tensor[(832), float32], Tensor[(13, 3, 1), float32], Tensor[(39), float32], Tensor[(13, 3, 1), float32]) */;
    %379 = @func_1099(%365, %366) /* ty=Tensor[(15, 13, 11), int32] */;
    %380 = logical_or(%374, %375) /* ty=Tensor[(4, 8, 6), bool] */;
    %381 = %378.3;
    (%379, meta[relay.Constant][21] /* ty=Tensor[(2145), int32] */, %380, %381, %var_2513)
  };
  %382(%var_2516, %var_2517, %var_2518) /* ty=(Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(4, 8, 6), bool], Tensor[(13, 3, 1), float32], Tensor[(468), float64]) */
}

def @func_7818(%var_7817: Tensor[(832), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(4, 3, 5), uint16], Tensor[(60), float64], Tensor[(8, 8, 13), bool], Tensor[(832), float32]) {
  %396 = fn (%var_7814: Tensor[(832), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(4, 3, 5), uint16], Tensor[(60), float64], Tensor[(8, 8, 13), bool], Tensor[(832), float32]) {
    %383 = cast(meta[relay.Constant][22] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
    %384 = reshape(%383, newshape=[4, 3, 5]) /* ty=Tensor[(4, 3, 5), float64] */;
    %385 = @func_5668(%384) /* ty=(Tensor[(4, 3, 5), float64], Tensor[(4, 3, 5), uint16]) */;
    %386 = cast(%var_7814, dtype="float32") /* ty=Tensor[(832), float32] */;
    %387 = cast(%var_7814, dtype="float32") /* ty=Tensor[(832), float32] */;
    %388 = cast(%var_7814, dtype="float64") /* ty=Tensor[(832), float64] */;
    %389 = reshape(%386, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
    %390 = reshape(%387, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
    %391 = reshape(%388, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
    %392 = @func_639(%389, %390, %391) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32], Tensor[(8, 8, 13), bool]) */;
    %393 = @func_7395() /* ty=Tensor[(6, 8, 10), uint8] */;
    %394 = %385.1;
    %395 = %392.3;
    (%393, %394, meta[relay.Constant][22] /* ty=Tensor[(60), float64] */, %395, %var_7814)
  };
  %396(%var_7817) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(4, 3, 5), uint16], Tensor[(60), float64], Tensor[(8, 8, 13), bool], Tensor[(832), float32]) */
}

def @func_3427(%var_3425: Tensor[(130, 4), bool]) -> (Tensor[(6, 8, 10), float64], Tensor[(26, 3), float32], Tensor[(130, 4), bool], Tensor[(26, 3), float32]) {
  @func_3424(%var_3425) /* ty=(Tensor[(6, 8, 10), float64], Tensor[(26, 3), float32], Tensor[(130, 4), bool], Tensor[(26, 3), float32]) */
}

def @func_8080(%var_8075: float64, %var_8076: Tensor[(3, 28), float64], %var_8077: Tensor[(5, 90), int16], %var_8078: Tensor[(832), float32], %var_8079: Tensor[(2240), float32]) -> (Tensor[(6, 8, 10), float32], Tensor[(7, 1, 12), float64], float64, Tensor[(3, 28), float64], Tensor[(2145), int32], Tensor[(5, 90), int16], Tensor[(832), float32], Tensor[(2240), float32], Tensor[(520), bool]) {
  @func_8073(%var_8075, %var_8076, %var_8077, %var_8078, %var_8079) /* ty=(Tensor[(6, 8, 10), float32], Tensor[(7, 1, 12), float64], float64, Tensor[(3, 28), float64], Tensor[(2145), int32], Tensor[(5, 90), int16], Tensor[(832), float32], Tensor[(2240), float32], Tensor[(520), bool]) */
}

def @func_8175() -> (Tensor[(6, 8, 10), uint8], Tensor[(2240), float32], uint8, Tensor[(2240), float32]) {
  %397 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %398 = cast(meta[relay.Constant][23] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %399 = cast(meta[relay.Constant][24] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %400 = reshape(%398, newshape=[]) /* ty=uint8 */;
  %401 = reshape(%399, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %402 = @func_3273(%400, %401) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(450), int16], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(450), bool], uint8, Tensor[(80), int32]) */;
  %403 = %397.0;
  %404 = %402.3;
  (%403, %404, meta[relay.Constant][23] /* ty=uint8 */, meta[relay.Constant][24] /* ty=Tensor[(2240), float32] */)
}

def @func_3634() -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) {
  @func_3632() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) */
}

def @func_5999() -> (Tensor[(6, 8, 10), uint8],) {
  %407 = fn () -> (Tensor[(6, 8, 10), uint8],) {
    %405 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %406 = %405.0;
    (%406,)
  };
  %407() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_6668() -> (Tensor[(6, 8, 10), uint8],) {
  %408 = @func_3981() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) */;
  %409 = %408.0;
  (%409,)
}

def @func_6036() -> (Tensor[(6, 8, 10), uint8],) {
  %412 = fn () -> (Tensor[(6, 8, 10), uint8],) {
    %410 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %411 = %410.0;
    (%411,)
  };
  %412() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_5604() -> (Tensor[(6, 8, 10), uint8],) {
  %413 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %414 = %413.0;
  (%414,)
}

def @func_3558(%var_3556: Tensor[(5, 104), bool]) -> (Tensor[(6, 8, 10), uint8], Tensor[(10, 13, 4), bool], Tensor[(5, 104), bool]) {
  %415 = @func_2966() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %416 = cast(%var_3556, dtype="bool") /* ty=Tensor[(5, 104), bool] */;
  %417 = reshape(%416, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), bool] */;
  %418 = @func_1819(%417) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(2, 3, 13), float32], Tensor[(26, 3), float32]) */;
  %419 = %415.0;
  %420 = %418.0;
  (%419, %420, %var_3556)
}

def @func_8166() -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(8, 3, 12), int32], Tensor[(72, 4), int32], Tensor[(832), float32], Tensor[(832), float32]) {
  @func_8164() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(8, 3, 12), int32], Tensor[(72, 4), int32], Tensor[(832), float32], Tensor[(832), float32]) */
}

def @func_6957(%var_6955: Tensor[(280), float32], %var_6956: Tensor[(520, 1), bool]) -> (Tensor[(6, 8, 10), uint8], Tensor[(78), float32], Tensor[(280), float32], uint8, Tensor[(6, 8, 10), uint8], Tensor[(520, 1), bool]) {
  @func_6953(%var_6955, %var_6956) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(78), float32], Tensor[(280), float32], uint8, Tensor[(6, 8, 10), uint8], Tensor[(520, 1), bool]) */
}

def @func_4512(%var_4511: Tensor[(2240), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32], Tensor[(2240), uint8]) {
  %443 = fn (%var_4423: Tensor[(2240), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32], Tensor[(2240), uint8]) {
    %421 = @func_3632() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) */;
    %422 = cast(%var_4423, dtype="float32") /* ty=Tensor[(2240), float32] */;
    %423 = reshape(%422, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), float32] */;
    %424 = @func_903(%423) /* ty=(Tensor[(10, 16, 14), float32],) */;
    %425 = %424.0;
    %426 = cast(%425, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
    %427 = shape_of(%var_4423, dtype="int32") /* ty=Tensor[(1), int32] */;
    %428 = cast(%var_4423, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?), bool] */;
    %430 = logical_or(%428, %429) /* ty=Tensor[(2240), bool] */;
    %431 = cast(%var_4423, dtype="float32") /* ty=Tensor[(2240), float32] */;
    %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(1), int32] */;
    %433 = cast(%430, dtype="float32") /* ty=Tensor[(2240), float32] */;
    %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?), float32] */;
    %435 = cast(%var_4423, dtype="uint8") /* ty=Tensor[(2240), uint8] */;
    %436 = shape_of(%430, dtype="int32") /* ty=Tensor[(1), int32] */;
    %437 = cast(%430, dtype="uint8") /* ty=Tensor[(2240), uint8] */;
    %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %439 = @func_3190() /* ty=Tensor[(6, 8, 10), uint8] */;
    %440 = %421.1;
    %441 = floor_divide(%433, %434) /* ty=Tensor[(2240), float32] */;
    %442 = subtract(%437, %438) /* ty=Tensor[(2240), uint8] */;
    (%439, %440, %441, %442)
  };
  %443(%var_4511) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32], Tensor[(2240), uint8]) */
}

def @func_6319() -> (Tensor[(6, 8, 10), uint8],) {
  %446 = fn () -> (Tensor[(6, 8, 10), uint8],) {
    %444 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %445 = %444.0;
    (%445,)
  };
  %446() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_5086(%var_5081: Tensor[(960), int8], %var_5082: Tensor[(280, 8), float32], %var_5083: Tensor[(520), bool], %var_5084: Tensor[(2240), float32], %var_5085: Tensor[(195, 1), float64]) -> (Tensor[(6, 8, 10), uint8], Tensor[(288), int32], Tensor[(960), int8], Tensor[(288), int32], Tensor[(6, 8, 10), uint8], Tensor[(832), float32], Tensor[(280, 8), float32], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64], Tensor[(2240), bool], Tensor[(13, 3, 1), float32], Tensor[(39), float32], Tensor[(195, 520), int8], Tensor[(6, 8, 10), float64]) {
  %489 = fn (%var_4893: Tensor[(960), int8], %var_4933: Tensor[(280, 8), float32], %var_5001: Tensor[(520), bool], %var_5040: Tensor[(2240), float32], %var_5052: Tensor[(195, 1), float64]) -> (Tensor[(6, 8, 10), uint8], Tensor[(288), int32], Tensor[(960), int8], Tensor[(288), int32], Tensor[(6, 8, 10), uint8], Tensor[(832), float32], Tensor[(280, 8), float32], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64], Tensor[(2240), bool], Tensor[(13, 3, 1), float32], Tensor[(39), float32], Tensor[(195, 520), int8], Tensor[(6, 8, 10), float64]) {
    %447 = @func_3690() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %448 = cast(%var_4893, dtype="int8") /* ty=Tensor[(960), int8] */;
    %449 = cast(meta[relay.Constant][25] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
    %450 = reshape(%448, newshape=[6, 10, 16]) /* ty=Tensor[(6, 10, 16), int8] */;
    %451 = reshape(%449, newshape=[288]) /* ty=Tensor[(288), int32] */;
    %452 = @func_4704(%450, %451) /* ty=(Tensor[(6, 10, 16), int8], Tensor[(5, 104), bool], Tensor[(288), int32], Tensor[(832), float32], Tensor[(520, 1), bool]) */;
    %453 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %454 = @func_3592() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %455 = cast(%var_5001, dtype="bool") /* ty=Tensor[(520), bool] */;
    %456 = reshape(%455, newshape=[130, 4]) /* ty=Tensor[(130, 4), bool] */;
    %457 = @func_3424(%456) /* ty=(Tensor[(6, 8, 10), float64], Tensor[(26, 3), float32], Tensor[(130, 4), bool], Tensor[(26, 3), float32]) */;
    %458 = cast(meta[relay.Constant][26] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
    %459 = cast(%var_4933, dtype="float32") /* ty=Tensor[(280, 8), float32] */;
    %460 = reshape(%458, newshape=[832]) /* ty=Tensor[(832), float32] */;
    %461 = reshape(%459, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
    %462 = @func_2884(%460, %461) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(2145), int32], Tensor[(832), float32], Tensor[(2240), float32], Tensor[(450, 2145), float32]) */;
    %463 = %462.3;
    %464 = cast(%var_5040, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(1), int32] */;
    %466 = cast(%463, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?), bool] */;
    %468 = cast(%var_5052, dtype="float64") /* ty=Tensor[(195, 1), float64] */;
    %469 = cast(%var_5052, dtype="float64") /* ty=Tensor[(195, 1), float64] */;
    %470 = cast(meta[relay.Constant][27] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
    %471 = reshape(%468, newshape=[13, 5, 3]) /* ty=Tensor[(13, 5, 3), float64] */;
    %472 = reshape(%469, newshape=[13, 5, 3]) /* ty=Tensor[(13, 5, 3), float64] */;
    %473 = reshape(%470, newshape=[13, 3]) /* ty=Tensor[(13, 3), float32] */;
    %474 = @func_3475(%471, %472, %473) /* ty=(Tensor[(13, 5, 3), float64], Tensor[(13, 5, 3), uint64], Tensor[(13, 3, 1), float32], Tensor[(13, 3), float32]) */;
    %475 = cast(%var_5001, dtype="int8") /* ty=Tensor[(520), int8] */;
    %476 = cast(%var_5052, dtype="int8") /* ty=Tensor[(195, 1), int8] */;
    %477 = %454.0;
    %478 = cast(%477, dtype="uint8") /* ty=Tensor[(6, 8, 10), uint8] */;
    %479 = reshape(%478, newshape=[6, 8, 10]) /* ty=Tensor[(6, 8, 10), uint8] */;
    %480 = @func_4308(%479) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64]) */;
    %481 = %447.0;
    %482 = %452.2;
    %483 = %453.0;
    %484 = %457.0;
    %485 = equal(%466, %467) /* ty=Tensor[(2240), bool] */;
    %486 = %474.2;
    %487 = multiply(%475, %476) /* ty=Tensor[(195, 520), int8] */;
    %488 = %480.2;
    (%481, %482, %var_4893, meta[relay.Constant][25] /* ty=Tensor[(288), int32] */, %483, meta[relay.Constant][26] /* ty=Tensor[(832), float32] */, %var_4933, %477, %484, %485, %486, meta[relay.Constant][27] /* ty=Tensor[(39), float32] */, %487, %488)
  };
  %489(%var_5081, %var_5082, %var_5083, %var_5084, %var_5085) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(288), int32], Tensor[(960), int8], Tensor[(288), int32], Tensor[(6, 8, 10), uint8], Tensor[(832), float32], Tensor[(280, 8), float32], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64], Tensor[(2240), bool], Tensor[(13, 3, 1), float32], Tensor[(39), float32], Tensor[(195, 520), int8], Tensor[(6, 8, 10), float64]) */
}

def @func_3561(%var_3559: Tensor[(5, 104), bool]) -> (Tensor[(6, 8, 10), uint8], Tensor[(10, 13, 4), bool], Tensor[(5, 104), bool]) {
  @func_3558(%var_3559) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(10, 13, 4), bool], Tensor[(5, 104), bool]) */
}

def @func_6147(%var_6145: Tensor[(6, 8, 10), float64], %var_6146: Tensor[(2, 1120), float32]) -> (Tensor[(6, 8, 10), bool], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32], Tensor[(832), float32], Tensor[(2, 1120), float32], Tensor[(?, 7, 6), uint64]) {
  %513 = fn (%var_6097: Tensor[(6, 8, 10), float64], %var_6135: Tensor[(2, 1120), float32]) -> (Tensor[(6, 8, 10), bool], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32], Tensor[(832), float32], Tensor[(2, 1120), float32], Tensor[(?, 7, 6), uint64]) {
    %490 = @func_5961() /* ty=(Tensor[(6, 8, 10), float64], Tensor[(6, 8, 10), uint8]) */;
    %491 = %490.0;
    %492 = cast(%var_6097, dtype="bool") /* ty=Tensor[(6, 8, 10), bool] */;
    %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
    %494 = cast(%491, dtype="bool") /* ty=Tensor[(6, 8, 10), bool] */;
    %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %496 = @func_5998() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %497 = cast(meta[relay.Constant][28] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
    %498 = cast(%var_6135, dtype="float32") /* ty=Tensor[(2, 1120), float32] */;
    %499 = reshape(%497, newshape=[832]) /* ty=Tensor[(832), float32] */;
    %500 = reshape(%498, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
    %501 = @func_2884(%499, %500) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(2145), int32], Tensor[(832), float32], Tensor[(2240), float32], Tensor[(450, 2145), float32]) */;
    %502 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 3), uint16] */, dtype="uint16") /* ty=Tensor[(14, 3), uint16] */;
    %503 = reshape(%502, newshape=[1, 7, 6]) /* ty=Tensor[(1, 7, 6), uint16] */;
    %504 = @func_1772(%503) /* ty=Tensor[(1, 7, 6), uint16] */;
    %505 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 3), uint16] */, dtype="uint64") /* ty=Tensor[(14, 3), uint64] */;
    %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
    %507 = cast(%504, dtype="uint64") /* ty=Tensor[(1, 7, 6), uint64] */;
    %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %509 = greater(%494, %495) /* ty=Tensor[(6, 8, 10), bool] */;
    %510 = %496.0;
    %511 = %501.3;
    %512 = right_shift(%507, %508) /* ty=Tensor[(?, 7, 6), uint64] */;
    (%509, %510, %511, meta[relay.Constant][28] /* ty=Tensor[(832), float32] */, %var_6135, %512)
  };
  %513(%var_6145, %var_6146) /* ty=(Tensor[(6, 8, 10), bool], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32], Tensor[(832), float32], Tensor[(2, 1120), float32], Tensor[(?, 7, 6), uint64]) */
}

def @func_6692() -> (Tensor[(6, 8, 10), uint8],) {
  @func_6690() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_3632() -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) {
  %514 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %515 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %516 = cast(meta[relay.Constant][30] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %517 = reshape(%516, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), float32] */;
  %518 = @func_903(%517) /* ty=(Tensor[(10, 16, 14), float32],) */;
  %519 = %518.0;
  %520 = cast(%519, dtype="uint64") /* ty=Tensor[(10, 16, 14), uint64] */;
  %521 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(2240), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %522 = cast(meta[relay.Constant][30] /* ty=Tensor[(2240), float32] */, dtype="uint64") /* ty=Tensor[(2240), uint64] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %524 = maximum(%522, %523) /* ty=Tensor[(2240), uint64] */;
  %525 = cast(%524, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %526 = %514.0;
  %527 = %515.0;
  %528 = sinh(%525) /* ty=Tensor[(2240), float32] */;
  (%526, %527, %528)
}

def @func_7885() -> Tensor[(6, 8, 10), uint8] {
  %530 = fn () -> Tensor[(6, 8, 10), uint8] {
    %529 = @func_6633() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %529.0
  };
  %530() /* ty=Tensor[(6, 8, 10), uint8] */
}

def @func_4866() -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64]) {
  %531 = @func_3592() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %532 = %531.0;
  %533 = cast(%532, dtype="uint8") /* ty=Tensor[(6, 8, 10), uint8] */;
  %534 = reshape(%533, newshape=[6, 8, 10]) /* ty=Tensor[(6, 8, 10), uint8] */;
  %535 = @func_4308(%534) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64]) */;
  %536 = @func_3981() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) */;
  %537 = @func_3981() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) */;
  %538 = @func_3981() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) */;
  %539 = %538.0;
  %540 = cast(%539, dtype="float64") /* ty=Tensor[(6, 8, 10), float64] */;
  %541 = %535.1;
  %542 = %536.0;
  %543 = %537.0;
  %544 = atan(%540) /* ty=Tensor[(6, 8, 10), float64] */;
  (%532, %541, %542, %543, %544)
}

def @func_1772(%var_1731: Tensor[(1, 7, 6), uint16]) -> Tensor[(1, 7, 6), uint16] {
  %545 = cast(meta[relay.Constant][31] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %546 = cast(%var_1731, dtype="uint16") /* ty=Tensor[(1, 7, 6), uint16] */;
  logical_xor(%545, %546) /* ty=Tensor[(1, 7, 6), uint16] */
}

def @func_1819(%var_1810: Tensor[(10, 13, 4), bool]) -> (Tensor[(10, 13, 4), bool], Tensor[(2, 3, 13), float32], Tensor[(26, 3), float32]) {
  %547 = cast(%var_1810, dtype="bool") /* ty=Tensor[(10, 13, 4), bool] */;
  %548 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(10, 13, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 13, 4), bool] */, dtype="bool") /* ty=Tensor[(10, 13, 4), bool] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %551 = cast(meta[relay.Constant][33] /* ty=Tensor[(26, 3), float32] */, dtype="float32") /* ty=Tensor[(26, 3), float32] */;
  %552 = reshape(%551, newshape=[2, 3, 13]) /* ty=Tensor[(2, 3, 13), float32] */;
  %553 = logical_and(%549, %550) /* ty=Tensor[(10, 13, 4), bool] */;
  %554 = @func_1646(%552) /* ty=Tensor[(2, 3, 13), float32] */;
  (%553, %554, meta[relay.Constant][33] /* ty=Tensor[(26, 3), float32] */)
}

def @func_7473(%var_7471: Tensor[(1, 15, 3), float64], %var_7472: Tensor[(16, 15, 3), float64]) -> (Tensor[(1, 15, 3), float64], Tensor[(16, 15, 3), float64]) {
  @func_7469(%var_7471, %var_7472) /* ty=(Tensor[(1, 15, 3), float64], Tensor[(16, 15, 3), float64]) */
}

def @func_1624(%var_1593: Tensor[(6, 15, 4), uint64]) -> (Tensor[(6, 15, 4), bool],) {
  %555 = cast(meta[relay.Constant][34] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %556 = cast(%var_1593, dtype="uint64") /* ty=Tensor[(6, 15, 4), uint64] */;
  %557 = left_shift(%555, %556) /* ty=Tensor[(6, 15, 4), uint64] */;
  %558 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 15, 4), uint64] */, dtype="bool") /* ty=Tensor[(6, 15, 4), bool] */;
  %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%557, dtype="bool") /* ty=Tensor[(6, 15, 4), bool] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %562 = equal(%560, %561) /* ty=Tensor[(6, 15, 4), bool] */;
  (%562,)
}

def @func_6727() -> (Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) {
  @func_6725() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) */
}

def @func_8197() -> Tensor[(6, 8, 10), uint8] {
  @func_8195() /* ty=Tensor[(6, 8, 10), uint8] */
}

def @func_230(%var_228: Tensor[(13, 3, 1), float32]) -> Tensor[(13, 3, 1), float32] {
  @func_227(%var_228) /* ty=Tensor[(13, 3, 1), float32] */
}

def @func_6623(%var_6611: float64, %var_6612: Tensor[(7, 1, 12), float64]) -> (Tensor[(7, 1, 12), float64],) {
  %563 = cast(%var_6611, dtype="float64") /* ty=float64 */;
  %564 = cast(%var_6612, dtype="float64") /* ty=Tensor[(7, 1, 12), float64] */;
  %565 = floor_divide(%563, %564) /* ty=Tensor[(7, 1, 12), float64] */;
  (%565,)
}

def @func_8073(%var_8031: float64, %var_8032: Tensor[(3, 28), float64], %var_8060: Tensor[(5, 90), int16], %var_8061: Tensor[(832), float32], %var_8062: Tensor[(2240), float32]) -> (Tensor[(6, 8, 10), float32], Tensor[(7, 1, 12), float64], float64, Tensor[(3, 28), float64], Tensor[(2145), int32], Tensor[(5, 90), int16], Tensor[(832), float32], Tensor[(2240), float32], Tensor[(520), bool]) {
  %566 = @func_4866() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64]) */;
  %567 = %566.0;
  %568 = cast(%567, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
  %569 = cast(%var_8031, dtype="float64") /* ty=float64 */;
  %570 = cast(%var_8032, dtype="float64") /* ty=Tensor[(3, 28), float64] */;
  %571 = reshape(%569, newshape=[]) /* ty=float64 */;
  %572 = reshape(%570, newshape=[7, 1, 12]) /* ty=Tensor[(7, 1, 12), float64] */;
  %573 = @func_6623(%571, %572) /* ty=(Tensor[(7, 1, 12), float64],) */;
  %574 = cast(%var_8060, dtype="int16") /* ty=Tensor[(5, 90), int16] */;
  %575 = cast(%var_8061, dtype="float32") /* ty=Tensor[(832), float32] */;
  %576 = cast(%var_8062, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %577 = cast(%var_8060, dtype="uint16") /* ty=Tensor[(5, 90), uint16] */;
  %578 = cast(meta[relay.Constant][36] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %579 = reshape(%574, newshape=[10, 45]) /* ty=Tensor[(10, 45), int16] */;
  %580 = reshape(%575, newshape=[832, 1]) /* ty=Tensor[(832, 1), float32] */;
  %581 = reshape(%576, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %582 = reshape(%577, newshape=[10, 45]) /* ty=Tensor[(10, 45), uint16] */;
  %583 = reshape(%578, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %584 = @func_4164(%579, %580, %581, %582, %583) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(4, 14, 14), float32], Tensor[(2240), float32], Tensor[(832, 1), float32], Tensor[(2240), float32], Tensor[(2145), int32], Tensor[(10, 45), int64], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(520), bool]) */;
  %585 = erf(%568) /* ty=Tensor[(6, 8, 10), float32] */;
  %586 = %573.0;
  %587 = %584.5;
  (%585, %586, %var_8031, %var_8032, %587, %var_8060, %var_8061, %var_8062, meta[relay.Constant][36] /* ty=Tensor[(520), bool] */)
}

def @func_2254(%var_2252: Tensor[(15, 16, 5), float64], %var_2253: Tensor[(78), float32]) -> (Tensor[(15, 16, 5), float64], Tensor[(2, 3, 13), float32], Tensor[(78), float32]) {
  @func_2250(%var_2252, %var_2253) /* ty=(Tensor[(15, 16, 5), float64], Tensor[(2, 3, 13), float32], Tensor[(78), float32]) */
}

def @func_1693(%var_1691: Tensor[(6, 13, 6), float64]) -> (Tensor[(6, 13, 6), float64], Tensor[(8, 8, 13), bool], Tensor[(832), float32], Tensor[(13, 3, 1), float32], Tensor[(39), float32], Tensor[(13, 3, 1), float32]) {
  @func_1690(%var_1691) /* ty=(Tensor[(6, 13, 6), float64], Tensor[(8, 8, 13), bool], Tensor[(832), float32], Tensor[(13, 3, 1), float32], Tensor[(39), float32], Tensor[(13, 3, 1), float32]) */
}

def @func_4308(%var_4257: Tensor[(6, 8, 10), uint8]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64]) {
  %588 = @func_3690() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %589 = %588.0;
  %590 = cast(%var_4257, dtype="uint8") /* ty=Tensor[(6, 8, 10), uint8] */;
  %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%589, dtype="uint8") /* ty=Tensor[(6, 8, 10), uint8] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %594 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %595 = cast(%589, dtype="float64") /* ty=Tensor[(6, 8, 10), float64] */;
  %596 = subtract(%592, %593) /* ty=Tensor[(6, 8, 10), uint8] */;
  %597 = %594.0;
  %598 = rsqrt(%595) /* ty=Tensor[(6, 8, 10), float64] */;
  (%596, %597, %598)
}

def @func_8195() -> Tensor[(6, 8, 10), uint8] {
  %599 = @func_5809() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %599.0
}

def @func_2887(%var_2885: Tensor[(832), float32], %var_2886: Tensor[(2240), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(2145), int32], Tensor[(832), float32], Tensor[(2240), float32], Tensor[(450, 2145), float32]) {
  %615 = fn (%var_2864: Tensor[(832), float32], %var_2865: Tensor[(2240), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(2145), int32], Tensor[(832), float32], Tensor[(2240), float32], Tensor[(450, 2145), float32]) {
    %600 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %601 = cast(meta[relay.Constant][37] /* ty=Tensor[(450, 1), int16] */, dtype="int16") /* ty=Tensor[(450, 1), int16] */;
    %602 = cast(%var_2864, dtype="float32") /* ty=Tensor[(832), float32] */;
    %603 = cast(%var_2865, dtype="float32") /* ty=Tensor[(2240), float32] */;
    %604 = cast(meta[relay.Constant][38] /* ty=Tensor[(2145), int32] */, dtype="int32") /* ty=Tensor[(2145), int32] */;
    %605 = reshape(%601, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), int16] */;
    %606 = reshape(%602, newshape=[2, 416]) /* ty=Tensor[(2, 416), float32] */;
    %607 = reshape(%603, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
    %608 = reshape(%604, newshape=[2145]) /* ty=Tensor[(2145), int32] */;
    %609 = @func_1362(%605, %606, %607, %608) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(15, 3, 10), int64], Tensor[(12, 12, 14), float32], Tensor[(288), int32], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(8, 3, 12), int32], Tensor[(10, 16, 14), float32], Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(2, 416), float32]) */;
    %610 = cast(meta[relay.Constant][38] /* ty=Tensor[(2145), int32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
    %611 = cast(meta[relay.Constant][37] /* ty=Tensor[(450, 1), int16] */, dtype="float32") /* ty=Tensor[(450, 1), float32] */;
    %612 = %600.0;
    %613 = %609.9;
    %614 = floor_mod(%610, %611) /* ty=Tensor[(450, 2145), float32] */;
    (%612, %613, %var_2864, %var_2865, %614)
  };
  %615(%var_2885, %var_2886) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(2145), int32], Tensor[(832), float32], Tensor[(2240), float32], Tensor[(450, 2145), float32]) */
}

def @func_2688(%var_2686: Tensor[(10, 2, 4), int32], %var_2687: Tensor[(10, 2, 4), int32]) -> (Tensor[(10, 2, 4), int32], Tensor[(4, 15, 14), uint8], uint8) {
  @func_2684(%var_2686, %var_2687) /* ty=(Tensor[(10, 2, 4), int32], Tensor[(4, 15, 14), uint8], uint8) */
}

def @func_6859(%var_6857: Tensor[(450), int16], %var_6858: Tensor[(2145), int32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(1, 360), uint64], Tensor[(78), float32], Tensor[(6, 8, 10), uint8], Tensor[(1, 16), float64], Tensor[(450), int16], Tensor[(2240), float32], Tensor[(2145), int32]) {
  %634 = fn (%var_6850: Tensor[(450), int16], %var_6852: Tensor[(2145), int32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(1, 360), uint64], Tensor[(78), float32], Tensor[(6, 8, 10), uint8], Tensor[(1, 16), float64], Tensor[(450), int16], Tensor[(2240), float32], Tensor[(2145), int32]) {
    %616 = @func_4628() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %617 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 360), uint64] */, dtype="uint64") /* ty=Tensor[(1, 360), uint64] */;
    %618 = cast(meta[relay.Constant][40] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
    %619 = reshape(%617, newshape=[360]) /* ty=Tensor[(360), uint64] */;
    %620 = reshape(%618, newshape=[78]) /* ty=Tensor[(78), float32] */;
    %621 = @func_5324(%619, %620) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 15, 4), bool], Tensor[(360), uint64], Tensor[(15, 16, 5), float64], Tensor[(78), float32], uint8) */;
    %622 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 16), float64] */;
    %623 = cast(%var_6850, dtype="int16") /* ty=Tensor[(450), int16] */;
    %624 = cast(meta[relay.Constant][42] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
    %625 = cast(%var_6852, dtype="int32") /* ty=Tensor[(2145), int32] */;
    %626 = reshape(%622, newshape=[16]) /* ty=Tensor[(16), float64] */;
    %627 = reshape(%623, newshape=[450]) /* ty=Tensor[(450), int16] */;
    %628 = reshape(%624, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
    %629 = reshape(%625, newshape=[1, 2145]) /* ty=Tensor[(1, 2145), int32] */;
    %630 = @func_6254(%626, %627, %628, %629) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(16), float64], Tensor[(2, 2, 4), float32], Tensor[(2, 3, 13), float32], Tensor[(78), float32], Tensor[(6, 8, 10), uint8], Tensor[(12, 12, 14), float32], Tensor[(450), int16], Tensor[(2, 416), float32], Tensor[(2240), float32], Tensor[(1, 2145), int32]) */;
    %631 = %616.0;
    %632 = %621.0;
    %633 = %630.5;
    (%631, %632, meta[relay.Constant][39] /* ty=Tensor[(1, 360), uint64] */, meta[relay.Constant][40] /* ty=Tensor[(78), float32] */, %633, meta[relay.Constant][41] /* ty=Tensor[(1, 16), float64] */, %var_6850, meta[relay.Constant][42] /* ty=Tensor[(2240), float32] */, %var_6852)
  };
  %634(%var_6857, %var_6858) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(1, 360), uint64], Tensor[(78), float32], Tensor[(6, 8, 10), uint8], Tensor[(1, 16), float64], Tensor[(450), int16], Tensor[(2240), float32], Tensor[(2145), int32]) */
}

def @func_3954(%var_3952: Tensor[(78), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(2, 3, 13), float32], Tensor[(78), float32], Tensor[(2240), float32], Tensor[(832), float32], Tensor[(2240), float32]) {
  @func_3951(%var_3952) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(2, 3, 13), float32], Tensor[(78), float32], Tensor[(2240), float32], Tensor[(832), float32], Tensor[(2240), float32]) */
}

def @func_227(%var_217: Tensor[(13, 3, 1), float32]) -> Tensor[(13, 3, 1), float32] {
  %635 = cast(%var_217, dtype="float32") /* ty=Tensor[(13, 3, 1), float32] */;
  asin(%635) /* ty=Tensor[(13, 3, 1), float32] */
}

def @func_5963() -> (Tensor[(6, 8, 10), float64], Tensor[(6, 8, 10), uint8]) {
  @func_5961() /* ty=(Tensor[(6, 8, 10), float64], Tensor[(6, 8, 10), uint8]) */
}

def @func_3535(%var_3533: Tensor[(5, 8, 7), float32], %var_3534: uint8) -> (Tensor[(5, 8, 7), float64], Tensor[(1200), float64], Tensor[(78), float32], uint8) {
  %646 = fn (%var_3497: Tensor[(5, 8, 7), float32], %var_3520: uint8) -> (Tensor[(5, 8, 7), float64], Tensor[(1200), float64], Tensor[(78), float32], uint8) {
    %636 = cast(%var_3497, dtype="float32") /* ty=Tensor[(5, 8, 7), float32] */;
    %637 = asin(%636) /* ty=Tensor[(5, 8, 7), float32] */;
    %638 = cast(%637, dtype="float64") /* ty=Tensor[(5, 8, 7), float64] */;
    %639 = cast(meta[relay.Constant][43] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
    %640 = cast(%var_3520, dtype="uint8") /* ty=uint8 */;
    %641 = reshape(%639, newshape=[78]) /* ty=Tensor[(78), float32] */;
    %642 = reshape(%640, newshape=[]) /* ty=uint8 */;
    %643 = @func_2854(%641, %642) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(15, 16, 5), float64], Tensor[(1200), float64], Tensor[(78), float32], Tensor[(450), int16], uint8, Tensor[(450), int16]) */;
    %644 = cosh(%638) /* ty=Tensor[(5, 8, 7), float64] */;
    %645 = %643.2;
    (%644, %645, meta[relay.Constant][43] /* ty=Tensor[(78), float32] */, %var_3520)
  };
  %646(%var_3533, %var_3534) /* ty=(Tensor[(5, 8, 7), float64], Tensor[(1200), float64], Tensor[(78), float32], uint8) */
}

def @func_6395(%var_6371: Tensor[(960), int8], %var_6373: Tensor[(520), bool], %var_6374: Tensor[(39, 5), float64]) -> (Tensor[(6, 8, 10), uint8], Tensor[(39), float32], Tensor[(960), int8], Tensor[(2240), float32], Tensor[(39, 5), float64], Tensor[(13, 3, 520), uint8]) {
  %647 = @func_6318() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %648 = cast(%var_6371, dtype="int8") /* ty=Tensor[(960), int8] */;
  %649 = cast(meta[relay.Constant][44] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %650 = cast(%var_6373, dtype="bool") /* ty=Tensor[(520), bool] */;
  %651 = cast(meta[relay.Constant][44] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %652 = cast(%var_6374, dtype="float64") /* ty=Tensor[(39, 5), float64] */;
  %653 = reshape(%648, newshape=[960]) /* ty=Tensor[(960), int8] */;
  %654 = reshape(%649, newshape=[280, 8]) /* ty=Tensor[(280, 8), float32] */;
  %655 = reshape(%650, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %656 = reshape(%651, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %657 = reshape(%652, newshape=[195, 1]) /* ty=Tensor[(195, 1), float64] */;
  %658 = @func_5080(%653, %654, %655, %656, %657) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(288), int32], Tensor[(960), int8], Tensor[(288), int32], Tensor[(6, 8, 10), uint8], Tensor[(832), float32], Tensor[(280, 8), float32], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64], Tensor[(2240), bool], Tensor[(13, 3, 1), float32], Tensor[(39), float32], Tensor[(195, 520), int8], Tensor[(6, 8, 10), float64]) */;
  %659 = %658.11;
  %660 = cast(%659, dtype="float32") /* ty=Tensor[(39), float32] */;
  %661 = reshape(%660, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
  %662 = @func_227(%661) /* ty=Tensor[(13, 3, 1), float32] */;
  %663 = cast(%662, dtype="uint8") /* ty=Tensor[(13, 3, 1), uint8] */;
  %664 = cast(%var_6373, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %665 = %647.0;
  %666 = add(%663, %664) /* ty=Tensor[(13, 3, 520), uint8] */;
  (%665, %659, %var_6371, meta[relay.Constant][44] /* ty=Tensor[(2240), float32] */, %var_6374, %666)
}

def @func_3983() -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) {
  @func_3981() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) */
}

def @func_2967() -> (Tensor[(6, 8, 10), uint8],) {
  %669 = fn () -> (Tensor[(6, 8, 10), uint8],) {
    %667 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %668 = %667.0;
    (%668,)
  };
  %669() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_7396() -> Tensor[(6, 8, 10), uint8] {
  %671 = fn () -> Tensor[(6, 8, 10), uint8] {
    %670 = @func_3981() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) */;
    %670.0
  };
  %671() /* ty=Tensor[(6, 8, 10), uint8] */
}

def @func_8164() -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(8, 3, 12), int32], Tensor[(72, 4), int32], Tensor[(832), float32], Tensor[(832), float32]) {
  %672 = @func_5290() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %673 = @func_5887() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %674 = @func_2966() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %675 = cast(meta[relay.Constant][45] /* ty=Tensor[(72, 4), int32] */, dtype="int32") /* ty=Tensor[(72, 4), int32] */;
  %676 = reshape(%675, newshape=[8, 3, 12]) /* ty=Tensor[(8, 3, 12), int32] */;
  %677 = cast(meta[relay.Constant][46] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %678 = reshape(%677, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %679 = @func_7816(%678) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(4, 3, 5), uint16], Tensor[(60), float64], Tensor[(8, 8, 13), bool], Tensor[(832), float32]) */;
  %680 = %672.0;
  %681 = %673.0;
  %682 = %674.0;
  %683 = @func_299(%676) /* ty=Tensor[(8, 3, 12), int32] */;
  %684 = %679.4;
  (%680, %681, %682, %683, meta[relay.Constant][45] /* ty=Tensor[(72, 4), int32] */, %684, meta[relay.Constant][46] /* ty=Tensor[(832), float32] */)
}

def @func_1690(%var_1661: Tensor[(6, 13, 6), float64]) -> (Tensor[(6, 13, 6), float64], Tensor[(8, 8, 13), bool], Tensor[(832), float32], Tensor[(13, 3, 1), float32], Tensor[(39), float32], Tensor[(13, 3, 1), float32]) {
  %685 = cast(%var_1661, dtype="float64") /* ty=Tensor[(6, 13, 6), float64] */;
  %686 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(6, 13, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(meta[relay.Constant][47] /* ty=Tensor[(6, 13, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 13, 6), float64] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %689 = cast(meta[relay.Constant][48] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %690 = cast(meta[relay.Constant][48] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %691 = cast(meta[relay.Constant][48] /* ty=Tensor[(832), float32] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %692 = reshape(%689, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %693 = reshape(%690, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %694 = reshape(%691, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %695 = @func_639(%692, %693, %694) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32], Tensor[(8, 8, 13), bool]) */;
  %696 = cast(meta[relay.Constant][49] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
  %697 = reshape(%696, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
  %698 = @func_227(%697) /* ty=Tensor[(13, 3, 1), float32] */;
  %699 = cast(%698, dtype="float32") /* ty=Tensor[(13, 3, 1), float32] */;
  %700 = reshape(%699, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
  %701 = floor_divide(%687, %688) /* ty=Tensor[(6, 13, 6), float64] */;
  %702 = %695.3;
  %703 = @func_227(%700) /* ty=Tensor[(13, 3, 1), float32] */;
  (%701, %702, meta[relay.Constant][48] /* ty=Tensor[(832), float32] */, %698, meta[relay.Constant][49] /* ty=Tensor[(39), float32] */, %703)
}

def @func_4614(%var_4612: Tensor[(300, 4), float64], %var_4613: Tensor[(78), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(15, 16, 5), float64], Tensor[(300, 4), float64], Tensor[(78), float32], Tensor[(6, 8, 10), uint8]) {
  %714 = fn (%var_4606: Tensor[(300, 4), float64], %var_4607: Tensor[(78), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(15, 16, 5), float64], Tensor[(300, 4), float64], Tensor[(78), float32], Tensor[(6, 8, 10), uint8]) {
    %704 = @func_3632() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) */;
    %705 = cast(%var_4606, dtype="float64") /* ty=Tensor[(300, 4), float64] */;
    %706 = cast(%var_4607, dtype="float32") /* ty=Tensor[(78), float32] */;
    %707 = reshape(%705, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
    %708 = reshape(%706, newshape=[78]) /* ty=Tensor[(78), float32] */;
    %709 = @func_2250(%707, %708) /* ty=(Tensor[(15, 16, 5), float64], Tensor[(2, 3, 13), float32], Tensor[(78), float32]) */;
    %710 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %711 = %704.1;
    %712 = %709.0;
    %713 = %710.0;
    (%711, %712, %var_4606, %var_4607, %713)
  };
  %714(%var_4612, %var_4613) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(15, 16, 5), float64], Tensor[(300, 4), float64], Tensor[(78), float32], Tensor[(6, 8, 10), uint8]) */
}

def @func_5190(%var_5121: Tensor[(520), bool], %var_5127: Tensor[(6, 8, 10), uint8]) -> (Tensor[(26, 3), float32], Tensor[(520), bool], Tensor[(6, 8, 10), bool], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) {
  %715 = cast(%var_5121, dtype="bool") /* ty=Tensor[(520), bool] */;
  %716 = reshape(%715, newshape=[130, 4]) /* ty=Tensor[(130, 4), bool] */;
  %717 = @func_3424(%716) /* ty=(Tensor[(6, 8, 10), float64], Tensor[(26, 3), float32], Tensor[(130, 4), bool], Tensor[(26, 3), float32]) */;
  %718 = @func_3592() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %719 = %718.0;
  %720 = cast(%var_5127, dtype="bool") /* ty=Tensor[(6, 8, 10), bool] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%719, dtype="bool") /* ty=Tensor[(6, 8, 10), bool] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %724 = @func_4628() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %725 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %726 = %717.1;
  %727 = equal(%722, %723) /* ty=Tensor[(6, 8, 10), bool] */;
  %728 = %724.0;
  %729 = %725.0;
  (%726, %var_5121, %727, %728, %729)
}

def @func_5887() -> (Tensor[(6, 8, 10), uint8],) {
  %730 = @func_3690() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %731 = %730.0;
  (%731,)
}

def @func_7663() -> Tensor[(6, 8, 10), uint8] {
  %733 = fn () -> Tensor[(6, 8, 10), uint8] {
    %732 = @func_5998() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %732.0
  };
  %733() /* ty=Tensor[(6, 8, 10), uint8] */
}

def @func_8177() -> (Tensor[(6, 8, 10), uint8], Tensor[(2240), float32], uint8, Tensor[(2240), float32]) {
  @func_8175() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(2240), float32], uint8, Tensor[(2240), float32]) */
}

def @main(%var_8210: Tensor[(5, 1, 7), uint64], %var_8211: Tensor[(5, 13, 7), uint64]) -> (Tensor[(5, 13, 7), bool], Tensor[(2240), float32], Tensor[(832, 1), float32], Tensor[(2240), float32], Tensor[(6, 8, 10), uint8], Tensor[(5, 13, 7), float32]) {
  %734 = cast(%var_8210, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %735 = cast(%var_8211, dtype="bool") /* ty=Tensor[(5, 13, 7), bool] */;
  %736 = cast(meta[relay.Constant][50] /* ty=Tensor[(832, 1), float32] */, dtype="float32") /* ty=Tensor[(832, 1), float32] */;
  %737 = cast(meta[relay.Constant][51] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %738 = reshape(%736, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %739 = reshape(%737, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
  %740 = @func_2887(%738, %739) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(2145), int32], Tensor[(832), float32], Tensor[(2240), float32], Tensor[(450, 2145), float32]) */;
  %741 = @func_7282() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %742 = cast(%var_8210, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
  %743 = cast(%var_8211, dtype="float32") /* ty=Tensor[(5, 13, 7), float32] */;
  %744 = equal(%734, %735) /* ty=Tensor[(5, 13, 7), bool] */;
  %745 = %740.3;
  %746 = %741.0;
  %747 = floor_divide(%742, %743) /* ty=Tensor[(5, 13, 7), float32] */;
  (%744, %745, meta[relay.Constant][50] /* ty=Tensor[(832, 1), float32] */, meta[relay.Constant][51] /* ty=Tensor[(2240), float32] */, %746, %747)
}

def @func_3192() -> Tensor[(6, 8, 10), uint8] {
  @func_3190() /* ty=Tensor[(6, 8, 10), uint8] */
}

def @func_4704(%var_4681: Tensor[(6, 10, 16), int8], %var_4693: Tensor[(288), int32]) -> (Tensor[(6, 10, 16), int8], Tensor[(5, 104), bool], Tensor[(288), int32], Tensor[(832), float32], Tensor[(520, 1), bool]) {
  %748 = cast(%var_4681, dtype="int8") /* ty=Tensor[(6, 10, 16), int8] */;
  %749 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(6, 10, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(meta[relay.Constant][52] /* ty=Tensor[(6, 10, 16), int8] */, dtype="int8") /* ty=Tensor[(6, 10, 16), int8] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %752 = cast(%var_4693, dtype="int32") /* ty=Tensor[(288), int32] */;
  %753 = cast(meta[relay.Constant][53] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %754 = cast(meta[relay.Constant][54] /* ty=Tensor[(520, 1), bool] */, dtype="bool") /* ty=Tensor[(520, 1), bool] */;
  %755 = reshape(%752, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %756 = reshape(%753, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %757 = reshape(%754, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %758 = @func_3874(%755, %756, %757) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(288), float64], Tensor[(832), uint64], Tensor[(10, 13, 4), bool], Tensor[(520), bool], Tensor[(5, 104), bool]) */;
  %759 = subtract(%750, %751) /* ty=Tensor[(6, 10, 16), int8] */;
  %760 = %758.5;
  (%759, %760, %var_4693, meta[relay.Constant][53] /* ty=Tensor[(832), float32] */, meta[relay.Constant][54] /* ty=Tensor[(520, 1), bool] */)
}

def @func_5723() -> (Tensor[(6, 8, 10), uint8],) {
  %763 = fn () -> (Tensor[(6, 8, 10), uint8],) {
    %761 = @func_3632() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) */;
    %762 = %761.0;
    (%762,)
  };
  %763() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_5194(%var_5192: Tensor[(520), bool], %var_5193: Tensor[(6, 8, 10), uint8]) -> (Tensor[(26, 3), float32], Tensor[(520), bool], Tensor[(6, 8, 10), bool], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) {
  @func_5190(%var_5192, %var_5193) /* ty=(Tensor[(26, 3), float32], Tensor[(520), bool], Tensor[(6, 8, 10), bool], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) */
}

def @func_5292() -> (Tensor[(6, 8, 10), uint8],) {
  @func_5290() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_6953(%var_6943: Tensor[(280), float32], %var_6951: Tensor[(520, 1), bool]) -> (Tensor[(6, 8, 10), uint8], Tensor[(78), float32], Tensor[(280), float32], uint8, Tensor[(6, 8, 10), uint8], Tensor[(520, 1), bool]) {
  %764 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %765 = cast(%var_6943, dtype="float32") /* ty=Tensor[(280), float32] */;
  %766 = cast(meta[relay.Constant][55] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %767 = reshape(%765, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), float32] */;
  %768 = reshape(%766, newshape=[]) /* ty=uint8 */;
  %769 = @func_3532(%767, %768) /* ty=(Tensor[(5, 8, 7), float64], Tensor[(1200), float64], Tensor[(78), float32], uint8) */;
  %770 = cast(%var_6951, dtype="bool") /* ty=Tensor[(520, 1), bool] */;
  %771 = %764.0;
  %772 = cast(%771, dtype="uint8") /* ty=Tensor[(6, 8, 10), uint8] */;
  %773 = reshape(%770, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %774 = reshape(%772, newshape=[6, 8, 10]) /* ty=Tensor[(6, 8, 10), uint8] */;
  %775 = @func_5190(%773, %774) /* ty=(Tensor[(26, 3), float32], Tensor[(520), bool], Tensor[(6, 8, 10), bool], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8]) */;
  %776 = %769.2;
  %777 = %775.3;
  (%771, %776, %var_6943, meta[relay.Constant][55] /* ty=uint8 */, %777, %var_6951)
}

def @func_2800() -> (Tensor[(6, 8, 10), uint8],) {
  %783 = fn () -> (Tensor[(6, 8, 10), uint8],) {
    %778 = cast(meta[relay.Constant][57] /* ty=Tensor[(6, 8, 10), uint8] */, dtype="uint8") /* ty=Tensor[(6, 8, 10), uint8] */;
    %779 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(6, 8, 10), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %780 = cast(meta[relay.Constant][56] /* ty=Tensor[(6, 8, 10), uint8] */, dtype="uint8") /* ty=Tensor[(6, 8, 10), uint8] */;
    %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %782 = add(%780, %781) /* ty=Tensor[(6, 8, 10), uint8] */;
    (%782,)
  };
  %783() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_5242() -> (Tensor[(6, 8, 10), float32],) {
  @func_5240() /* ty=(Tensor[(6, 8, 10), float32],) */
}

def @func_5769() -> (Tensor[(6, 8, 10), float32],) {
  %784 = @func_3190() /* ty=Tensor[(6, 8, 10), uint8] */;
  %785 = cast(%784, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
  %786 = sqrt(%785) /* ty=Tensor[(6, 8, 10), float32] */;
  (%786,)
}

def @func_4311(%var_4309: Tensor[(6, 8, 10), uint8]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64]) {
  @func_4308(%var_4309) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64]) */
}

def @func_7271(%var_7270: uint8) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float32], Tensor[(6, 8, 10), float32], uint8) {
  %797 = fn (%var_7267: uint8) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float32], Tensor[(6, 8, 10), float32], uint8) {
    %787 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %788 = @func_5998() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %789 = @func_5240() /* ty=(Tensor[(6, 8, 10), float32],) */;
    %790 = cast(%var_7267, dtype="uint8") /* ty=uint8 */;
    %791 = reshape(%790, newshape=[]) /* ty=uint8 */;
    %792 = @func_4764(%791) /* ty=(Tensor[(2240), uint8], Tensor[(2240), float32], Tensor[(4, 15, 14), uint8], uint8, Tensor[(6, 8, 10), float32]) */;
    %793 = %787.0;
    %794 = %788.0;
    %795 = %789.0;
    %796 = %792.4;
    (%793, %794, %795, %796, %var_7267)
  };
  %797(%var_7270) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float32], Tensor[(6, 8, 10), float32], uint8) */
}

def @func_3123(%var_3121: Tensor[(1200), float64], %var_3122: Tensor[(13, 6), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(2, 3, 13), float32], Tensor[(13, 6), float32], Tensor[(1200), uint8], Tensor[(6, 8, 10), uint8]) {
  @func_3119(%var_3121, %var_3122) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(2, 3, 13), float32], Tensor[(13, 6), float32], Tensor[(1200), uint8], Tensor[(6, 8, 10), uint8]) */
}

def @func_2898() -> (Tensor[(6, 8, 10), uint8],) {
  %798 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %799 = %798.0;
  (%799,)
}

def @func_6259(%var_6255: Tensor[(16), float64], %var_6256: Tensor[(450), int16], %var_6257: Tensor[(2240), float32], %var_6258: Tensor[(1, 2145), int32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(16), float64], Tensor[(2, 2, 4), float32], Tensor[(2, 3, 13), float32], Tensor[(78), float32], Tensor[(6, 8, 10), uint8], Tensor[(12, 12, 14), float32], Tensor[(450), int16], Tensor[(2, 416), float32], Tensor[(2240), float32], Tensor[(1, 2145), int32]) {
  %823 = fn (%var_6223: Tensor[(16), float64], %var_6249: Tensor[(450), int16], %var_6251: Tensor[(2240), float32], %var_6252: Tensor[(1, 2145), int32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(16), float64], Tensor[(2, 2, 4), float32], Tensor[(2, 3, 13), float32], Tensor[(78), float32], Tensor[(6, 8, 10), uint8], Tensor[(12, 12, 14), float32], Tensor[(450), int16], Tensor[(2, 416), float32], Tensor[(2240), float32], Tensor[(1, 2145), int32]) {
    %800 = @func_5961() /* ty=(Tensor[(6, 8, 10), float64], Tensor[(6, 8, 10), uint8]) */;
    %801 = cast(%var_6223, dtype="float64") /* ty=Tensor[(16), float64] */;
    %802 = reshape(%801, newshape=[2, 2, 4]) /* ty=Tensor[(2, 2, 4), float64] */;
    %803 = @func_5685(%802) /* ty=(Tensor[(2, 2, 4), int32],) */;
    %804 = %803.0;
    %805 = cast(%804, dtype="float32") /* ty=Tensor[(2, 2, 4), float32] */;
    %806 = cast(meta[relay.Constant][58] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
    %807 = reshape(%806, newshape=[2, 3, 13]) /* ty=Tensor[(2, 3, 13), float32] */;
    %808 = @func_2966() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %809 = cast(%var_6249, dtype="int16") /* ty=Tensor[(450), int16] */;
    %810 = cast(meta[relay.Constant][59] /* ty=Tensor[(2, 416), float32] */, dtype="float32") /* ty=Tensor[(2, 416), float32] */;
    %811 = cast(%var_6251, dtype="float32") /* ty=Tensor[(2240), float32] */;
    %812 = cast(%var_6252, dtype="int32") /* ty=Tensor[(1, 2145), int32] */;
    %813 = reshape(%809, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), int16] */;
    %814 = reshape(%810, newshape=[2, 416]) /* ty=Tensor[(2, 416), float32] */;
    %815 = reshape(%811, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
    %816 = reshape(%812, newshape=[2145]) /* ty=Tensor[(2145), int32] */;
    %817 = @func_1362(%813, %814, %815, %816) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(15, 3, 10), int64], Tensor[(12, 12, 14), float32], Tensor[(288), int32], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(8, 3, 12), int32], Tensor[(10, 16, 14), float32], Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(2, 416), float32]) */;
    %818 = %800.1;
    %819 = sinh(%805) /* ty=Tensor[(2, 2, 4), float32] */;
    %820 = @func_1646(%807) /* ty=Tensor[(2, 3, 13), float32] */;
    %821 = %808.0;
    %822 = %817.2;
    (%818, %var_6223, %819, %820, meta[relay.Constant][58] /* ty=Tensor[(78), float32] */, %821, %822, %var_6249, meta[relay.Constant][59] /* ty=Tensor[(2, 416), float32] */, %var_6251, %var_6252)
  };
  %823(%var_6255, %var_6256, %var_6257, %var_6258) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(16), float64], Tensor[(2, 2, 4), float32], Tensor[(2, 3, 13), float32], Tensor[(78), float32], Tensor[(6, 8, 10), uint8], Tensor[(12, 12, 14), float32], Tensor[(450), int16], Tensor[(2, 416), float32], Tensor[(2240), float32], Tensor[(1, 2145), int32]) */
}

def @func_6633() -> (Tensor[(6, 8, 10), uint8],) {
  %824 = @func_4655() /* ty=Tensor[(6, 8, 10), uint8] */;
  (%824,)
}

def @func_5810() -> (Tensor[(6, 8, 10), uint8],) {
  %827 = fn () -> (Tensor[(6, 8, 10), uint8],) {
    %825 = @func_5461() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), int32]) */;
    %826 = %825.0;
    (%826,)
  };
  %827() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_5461() -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), int32]) {
  %828 = @func_3690() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %829 = %828.0;
  %830 = cast(%829, dtype="uint8") /* ty=Tensor[(6, 8, 10), uint8] */;
  %831 = reshape(%830, newshape=[6, 8, 10]) /* ty=Tensor[(6, 8, 10), uint8] */;
  %832 = @func_4031(%831) /* ty=(Tensor[(2, 3, 13), float32], Tensor[(13, 6), float32], Tensor[(6, 8, 10), int32]) */;
  %833 = %832.2;
  (%829, %833)
}

def @func_4376(%var_4361: Tensor[(5, 10, 3), float64]) -> Tensor[(5, 10, 3), float64] {
  %834 = cast(%var_4361, dtype="float64") /* ty=Tensor[(5, 10, 3), float64] */;
  %835 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(5, 10, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(meta[relay.Constant][60] /* ty=Tensor[(5, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(5, 10, 3), float64] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %838 = power(%836, %837) /* ty=Tensor[(5, 10, 3), float64] */;
  %839 = cast(meta[relay.Constant][60] /* ty=Tensor[(5, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(5, 10, 3), float64] */;
  %840 = shape_of(%838, dtype="int32") /* ty=Tensor[(3), int32] */;
  %841 = cast(%838, dtype="float64") /* ty=Tensor[(5, 10, 3), float64] */;
  %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  add(%841, %842) /* ty=Tensor[(5, 10, 3), float64] */
}

def @func_6400(%var_6397: Tensor[(960), int8], %var_6398: Tensor[(520), bool], %var_6399: Tensor[(39, 5), float64]) -> (Tensor[(6, 8, 10), uint8], Tensor[(39), float32], Tensor[(960), int8], Tensor[(2240), float32], Tensor[(39, 5), float64], Tensor[(13, 3, 520), uint8]) {
  @func_6395(%var_6397, %var_6398, %var_6399) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(39), float32], Tensor[(960), int8], Tensor[(2240), float32], Tensor[(39, 5), float64], Tensor[(13, 3, 520), uint8]) */
}

def @func_7445(%var_7442: Tensor[(78), float32], %var_7443: Tensor[(450), int16], %var_7444: Tensor[(2240), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(78), float32], Tensor[(2240), float64], Tensor[(10, 13, 4), bool], Tensor[(2240), int32], Tensor[(450), bool]) {
  @func_7440(%var_7442, %var_7443, %var_7444) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(78), float32], Tensor[(2240), float64], Tensor[(10, 13, 4), bool], Tensor[(2240), int32], Tensor[(450), bool]) */
}

def @func_3273(%var_3239: uint8, %var_3245: Tensor[(2240), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(450), int16], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(450), bool], uint8, Tensor[(80), int32]) {
  %843 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %844 = cast(%var_3245, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %845 = reshape(%844, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), float32] */;
  %846 = @func_903(%845) /* ty=(Tensor[(10, 16, 14), float32],) */;
  %847 = cast(%var_3239, dtype="uint8") /* ty=uint8 */;
  %848 = cast(meta[relay.Constant][61] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %849 = reshape(%847, newshape=[]) /* ty=uint8 */;
  %850 = reshape(%848, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %851 = @func_2651(%849, %850) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(520), bool], uint8, Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(4, 15, 14), float64], Tensor[(4, 14, 14), bool], Tensor[(288), int32], Tensor[(8, 104), float32], Tensor[(2, 416), float32], Tensor[(450), int16], Tensor[(2240), float32], Tensor[(4, 14, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(4, 14, 14), float32]) */;
  %852 = %851.10;
  %853 = cast(%852, dtype="bool") /* ty=Tensor[(450), bool] */;
  %854 = cast(%var_3239, dtype="bool") /* ty=bool */;
  %855 = cast(meta[relay.Constant][62] /* ty=Tensor[(80), int32] */, dtype="int32") /* ty=Tensor[(80), int32] */;
  %856 = cast(meta[relay.Constant][62] /* ty=Tensor[(80), int32] */, dtype="int32") /* ty=Tensor[(80), int32] */;
  %857 = reshape(%855, newshape=[10, 2, 4]) /* ty=Tensor[(10, 2, 4), int32] */;
  %858 = reshape(%856, newshape=[10, 2, 4]) /* ty=Tensor[(10, 2, 4), int32] */;
  %859 = @func_2684(%857, %858) /* ty=(Tensor[(10, 2, 4), int32], Tensor[(4, 15, 14), uint8], uint8) */;
  %860 = %843.0;
  %861 = %846.0;
  %862 = greater(%853, %854) /* ty=Tensor[(450), bool] */;
  %863 = %859.2;
  (%860, meta[relay.Constant][61] /* ty=Tensor[(450), int16] */, %861, %var_3245, %862, %863, meta[relay.Constant][62] /* ty=Tensor[(80), int32] */)
}

def @func_2655(%var_2653: uint8, %var_2654: Tensor[(450), int16]) -> (Tensor[(10, 13, 4), bool], Tensor[(520), bool], uint8, Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(4, 15, 14), float64], Tensor[(4, 14, 14), bool], Tensor[(288), int32], Tensor[(8, 104), float32], Tensor[(2, 416), float32], Tensor[(450), int16], Tensor[(2240), float32], Tensor[(4, 14, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(4, 14, 14), float32]) {
  @func_2651(%var_2653, %var_2654) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(520), bool], uint8, Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(4, 15, 14), float64], Tensor[(4, 14, 14), bool], Tensor[(288), int32], Tensor[(8, 104), float32], Tensor[(2, 416), float32], Tensor[(450), int16], Tensor[(2240), float32], Tensor[(4, 14, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(4, 14, 14), float32]) */
}

def @func_1627(%var_1625: Tensor[(6, 15, 4), uint64]) -> (Tensor[(6, 15, 4), bool],) {
  @func_1624(%var_1625) /* ty=(Tensor[(6, 15, 4), bool],) */
}

def @func_3119(%var_3108: Tensor[(1200), float64], %var_3109: Tensor[(13, 6), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(2, 3, 13), float32], Tensor[(13, 6), float32], Tensor[(1200), uint8], Tensor[(6, 8, 10), uint8]) {
  %864 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %865 = cast(%var_3108, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %866 = cast(%var_3109, dtype="float32") /* ty=Tensor[(13, 6), float32] */;
  %867 = reshape(%865, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %868 = reshape(%866, newshape=[78]) /* ty=Tensor[(78), float32] */;
  %869 = @func_2250(%867, %868) /* ty=(Tensor[(15, 16, 5), float64], Tensor[(2, 3, 13), float32], Tensor[(78), float32]) */;
  %870 = cast(meta[relay.Constant][63] /* ty=Tensor[(1200), float64] */, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
  %871 = shape_of(%var_3108, dtype="int32") /* ty=Tensor[(1), int32] */;
  %872 = cast(%var_3108, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %874 = @func_2966() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %875 = %864.0;
  %876 = %869.1;
  %877 = logical_xor(%872, %873) /* ty=Tensor[(1200), uint8] */;
  %878 = %874.0;
  (%875, %876, %var_3109, %877, %878)
}

def @func_6975(%var_6966: Tensor[(15, 11, 5), int16]) -> (Tensor[(15, 11, 5), int16],) {
  %879 = cast(meta[relay.Constant][64] /* ty=Tensor[(15, 11, 5), int16] */, dtype="int16") /* ty=Tensor[(15, 11, 5), int16] */;
  %880 = shape_of(%var_6966, dtype="int32") /* ty=Tensor[(3), int32] */;
  %881 = cast(%var_6966, dtype="int16") /* ty=Tensor[(15, 11, 5), int16] */;
  %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %883 = logical_xor(%881, %882) /* ty=Tensor[(15, 11, 5), int16] */;
  (%883,)
}

def @func_6073() -> (Tensor[(6, 8, 10), float32], Tensor[(6, 8, 10), uint8]) {
  @func_6071() /* ty=(Tensor[(6, 8, 10), float32], Tensor[(6, 8, 10), uint8]) */
}

def @func_1368(%var_1364: Tensor[(15, 3, 10), int16], %var_1365: Tensor[(2, 416), float32], %var_1366: Tensor[(2240), float32], %var_1367: Tensor[(2145), int32]) -> (Tensor[(8, 8, 13), float32], Tensor[(15, 3, 10), int64], Tensor[(12, 12, 14), float32], Tensor[(288), int32], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(8, 3, 12), int32], Tensor[(10, 16, 14), float32], Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(2, 416), float32]) {
  @func_1362(%var_1364, %var_1365, %var_1366, %var_1367) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(15, 3, 10), int64], Tensor[(12, 12, 14), float32], Tensor[(288), int32], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(8, 3, 12), int32], Tensor[(10, 16, 14), float32], Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(2, 416), float32]) */
}

def @func_2854(%var_2841: Tensor[(78), float32], %var_2849: uint8) -> (Tensor[(6, 8, 10), uint8], Tensor[(15, 16, 5), float64], Tensor[(1200), float64], Tensor[(78), float32], Tensor[(450), int16], uint8, Tensor[(450), int16]) {
  %884 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %885 = cast(meta[relay.Constant][65] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %886 = cast(%var_2841, dtype="float32") /* ty=Tensor[(78), float32] */;
  %887 = reshape(%885, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %888 = reshape(%886, newshape=[78]) /* ty=Tensor[(78), float32] */;
  %889 = @func_2250(%887, %888) /* ty=(Tensor[(15, 16, 5), float64], Tensor[(2, 3, 13), float32], Tensor[(78), float32]) */;
  %890 = cast(%var_2849, dtype="uint8") /* ty=uint8 */;
  %891 = cast(meta[relay.Constant][66] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %892 = reshape(%890, newshape=[]) /* ty=uint8 */;
  %893 = reshape(%891, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %894 = @func_2651(%892, %893) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(520), bool], uint8, Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(4, 15, 14), float64], Tensor[(4, 14, 14), bool], Tensor[(288), int32], Tensor[(8, 104), float32], Tensor[(2, 416), float32], Tensor[(450), int16], Tensor[(2240), float32], Tensor[(4, 14, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(4, 14, 14), float32]) */;
  %895 = %884.0;
  %896 = %889.0;
  %897 = %894.10;
  (%895, %896, meta[relay.Constant][65] /* ty=Tensor[(1200), float64] */, %var_2841, %897, %var_2849, meta[relay.Constant][66] /* ty=Tensor[(450), int16] */)
}

def @func_6978(%var_6976: Tensor[(15, 11, 5), int16]) -> (Tensor[(15, 11, 5), int16],) {
  @func_6975(%var_6976) /* ty=(Tensor[(15, 11, 5), int16],) */
}

def @func_1646(%var_1633: Tensor[(2, 3, 13), float32]) -> Tensor[(2, 3, 13), float32] {
  %898 = cast(%var_1633, dtype="float32") /* ty=Tensor[(2, 3, 13), float32] */;
  %899 = shape_of(meta[relay.Constant][67] /* ty=Tensor[(2, 3, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %900 = cast(meta[relay.Constant][67] /* ty=Tensor[(2, 3, 13), float32] */, dtype="float32") /* ty=Tensor[(2, 3, 13), float32] */;
  %901 = dyn.reshape(%898, %899, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  maximum(%900, %901) /* ty=Tensor[(2, 3, 13), float32] */
}

def @func_4766(%var_4765: uint8) -> (Tensor[(2240), uint8], Tensor[(2240), float32], Tensor[(4, 15, 14), uint8], uint8, Tensor[(6, 8, 10), float32]) {
  %916 = fn (%var_4753: uint8) -> (Tensor[(2240), uint8], Tensor[(2240), float32], Tensor[(4, 15, 14), uint8], uint8, Tensor[(6, 8, 10), float32]) {
    %902 = cast(meta[relay.Constant][68] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
    %903 = reshape(%902, newshape=[2240]) /* ty=Tensor[(2240), float32] */;
    %904 = @func_4510(%903) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32], Tensor[(2240), uint8]) */;
    %905 = cast(meta[relay.Constant][68] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
    %906 = cast(%var_4753, dtype="uint8") /* ty=uint8 */;
    %907 = reshape(%906, newshape=[]) /* ty=uint8 */;
    %908 = @func_1919(%907) /* ty=(Tensor[(4, 15, 14), uint8], Tensor[(288), int32], Tensor[(832), float32]) */;
    %909 = @func_3592() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %910 = %909.0;
    %911 = cast(%910, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
    %912 = %904.3;
    %913 = atanh(%905) /* ty=Tensor[(2240), float32] */;
    %914 = %908.0;
    %915 = sin(%911) /* ty=Tensor[(6, 8, 10), float32] */;
    (%912, %913, %914, %var_4753, %915)
  };
  %916(%var_4765) /* ty=(Tensor[(2240), uint8], Tensor[(2240), float32], Tensor[(4, 15, 14), uint8], uint8, Tensor[(6, 8, 10), float32]) */
}

def @func_4379(%var_4377: Tensor[(5, 10, 3), float64]) -> Tensor[(5, 10, 3), float64] {
  @func_4376(%var_4377) /* ty=Tensor[(5, 10, 3), float64] */
}

def @func_7328() -> Tensor[(6, 8, 10), uint8] {
  %918 = fn () -> Tensor[(6, 8, 10), uint8] {
    %917 = @func_6035() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %917.0
  };
  %918() /* ty=Tensor[(6, 8, 10), uint8] */
}

def @func_7365() -> (Tensor[(6, 8, 10), uint8], Tensor[(78), float32], Tensor[(280), float32], uint8) {
  @func_7363() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(78), float32], Tensor[(280), float32], uint8) */
}

def @func_7928(%var_7926: Tensor[(8, 3, 14), uint64], %var_7927: Tensor[(8, 3, 14), uint64]) -> (Tensor[(8, 3, 14), bool], Tensor[(8, 3, 14), float32]) {
  %929 = fn (%var_7890: Tensor[(8, 3, 14), uint64], %var_7891: Tensor[(8, 3, 14), uint64]) -> (Tensor[(8, 3, 14), bool], Tensor[(8, 3, 14), float32]) {
    %919 = cast(%var_7891, dtype="bool") /* ty=Tensor[(8, 3, 14), bool] */;
    %920 = shape_of(%var_7890, dtype="int32") /* ty=Tensor[(3), int32] */;
    %921 = cast(%var_7890, dtype="bool") /* ty=Tensor[(8, 3, 14), bool] */;
    %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %923 = cast(%var_7891, dtype="float32") /* ty=Tensor[(8, 3, 14), float32] */;
    %924 = shape_of(%var_7890, dtype="int32") /* ty=Tensor[(3), int32] */;
    %925 = cast(%var_7890, dtype="float32") /* ty=Tensor[(8, 3, 14), float32] */;
    %926 = dyn.reshape(%923, %924, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %927 = less_equal(%921, %922) /* ty=Tensor[(8, 3, 14), bool] */;
    %928 = floor_divide(%925, %926) /* ty=Tensor[(8, 3, 14), float32] */;
    (%927, %928)
  };
  %929(%var_7926, %var_7927) /* ty=(Tensor[(8, 3, 14), bool], Tensor[(8, 3, 14), float32]) */
}

def @func_449(%var_448: Tensor[(288), int32]) -> (Tensor[(12, 12, 14), float64], Tensor[(12, 12, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32]) {
  %941 = fn (%var_444: Tensor[(288), int32]) -> (Tensor[(12, 12, 14), float64], Tensor[(12, 12, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32]) {
    %930 = cast(meta[relay.Constant][69] /* ty=Tensor[(12, 12, 14), float64] */, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
    %931 = cast(meta[relay.Constant][69] /* ty=Tensor[(12, 12, 14), float64] */, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
    %932 = exp(%931) /* ty=Tensor[(12, 12, 14), float64] */;
    %933 = cast(%932, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
    %934 = cast(meta[relay.Constant][69] /* ty=Tensor[(12, 12, 14), float64] */, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
    %935 = cast(%var_444, dtype="int32") /* ty=Tensor[(288), int32] */;
    %936 = reshape(%935, newshape=[8, 3, 12]) /* ty=Tensor[(8, 3, 12), int32] */;
    %937 = atan(%930) /* ty=Tensor[(12, 12, 14), float64] */;
    %938 = cos(%933) /* ty=Tensor[(12, 12, 14), float32] */;
    %939 = sinh(%934) /* ty=Tensor[(12, 12, 14), float32] */;
    %940 = @func_299(%936) /* ty=Tensor[(8, 3, 12), int32] */;
    (%937, %938, %939, %940, %var_444)
  };
  %941(%var_448) /* ty=(Tensor[(12, 12, 14), float64], Tensor[(12, 12, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32]) */
}

def @func_1822(%var_1820: Tensor[(10, 13, 4), bool]) -> (Tensor[(10, 13, 4), bool], Tensor[(2, 3, 13), float32], Tensor[(26, 3), float32]) {
  @func_1819(%var_1820) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(2, 3, 13), float32], Tensor[(26, 3), float32]) */
}

def @func_5571(%var_5569: Tensor[(520), bool], %var_5570: Tensor[(280), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(520), bool], uint8, Tensor[(280), float32], Tensor[(6, 8, 10), uint8], Tensor[(1200), float64], Tensor[(26, 3), bool]) {
  @func_5567(%var_5569, %var_5570) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(520), bool], uint8, Tensor[(280), float32], Tensor[(6, 8, 10), uint8], Tensor[(1200), float64], Tensor[(26, 3), bool]) */
}

def @func_4033(%var_4032: Tensor[(6, 8, 10), uint8]) -> (Tensor[(2, 3, 13), float32], Tensor[(13, 6), float32], Tensor[(6, 8, 10), int32]) {
  %952 = fn (%var_4020: Tensor[(6, 8, 10), uint8]) -> (Tensor[(2, 3, 13), float32], Tensor[(13, 6), float32], Tensor[(6, 8, 10), int32]) {
    %942 = cast(meta[relay.Constant][70] /* ty=Tensor[(13, 6), float32] */, dtype="float32") /* ty=Tensor[(13, 6), float32] */;
    %943 = reshape(%942, newshape=[2, 3, 13]) /* ty=Tensor[(2, 3, 13), float32] */;
    %944 = @func_2898() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %945 = %944.0;
    %946 = cast(%var_4020, dtype="int32") /* ty=Tensor[(6, 8, 10), int32] */;
    %947 = shape_of(%945, dtype="int32") /* ty=Tensor[(3), int32] */;
    %948 = cast(%945, dtype="int32") /* ty=Tensor[(6, 8, 10), int32] */;
    %949 = dyn.reshape(%946, %947, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %950 = @func_1646(%943) /* ty=Tensor[(2, 3, 13), float32] */;
    %951 = left_shift(%948, %949) /* ty=Tensor[(6, 8, 10), int32] */;
    (%950, meta[relay.Constant][70] /* ty=Tensor[(13, 6), float32] */, %951)
  };
  %952(%var_4032) /* ty=(Tensor[(2, 3, 13), float32], Tensor[(13, 6), float32], Tensor[(6, 8, 10), int32]) */
}

def @func_6790(%var_6757: Tensor[(288), int32], %var_6764: Tensor[(78), float32]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(12, 12, 14), float32], Tensor[(288), int32], Tensor[(78), int64]) {
  %953 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %954 = @func_5722() /* ty=(Tensor[(6, 8, 10), uint8],) */;
  %955 = cast(%var_6757, dtype="int32") /* ty=Tensor[(288), int32] */;
  %956 = reshape(%955, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %957 = @func_447(%956) /* ty=(Tensor[(12, 12, 14), float64], Tensor[(12, 12, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32]) */;
  %958 = cast(%var_6764, dtype="float32") /* ty=Tensor[(78), float32] */;
  %959 = shape_of(meta[relay.Constant][71] /* ty=Tensor[(78), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %960 = cast(meta[relay.Constant][71] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %961 = dyn.reshape(%958, %959, newshape=[]) /* ty=Tensor[(?), float32] */;
  %962 = mod(%960, %961) /* ty=Tensor[(78), float32] */;
  %963 = cast(meta[relay.Constant][71] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %964 = reshape(%963, newshape=[2, 3, 13]) /* ty=Tensor[(2, 3, 13), float32] */;
  %965 = @func_1646(%964) /* ty=Tensor[(2, 3, 13), float32] */;
  %966 = cast(%965, dtype="int64") /* ty=Tensor[(2, 3, 13), int64] */;
  %967 = shape_of(%962, dtype="int32") /* ty=Tensor[(1), int32] */;
  %968 = cast(%962, dtype="int64") /* ty=Tensor[(78), int64] */;
  %969 = dyn.reshape(%966, %967, newshape=[]) /* ty=Tensor[(?), int64] */;
  %970 = %953.0;
  %971 = %954.0;
  %972 = %957.2;
  %973 = subtract(%968, %969) /* ty=Tensor[(78), int64] */;
  (%970, %971, %972, %var_6757, %973)
}

def @func_6021(%var_6019: Tensor[(10, 5, 11), float64]) -> Tensor[(10, 5, 11), float64] {
  @func_6018(%var_6019) /* ty=Tensor[(10, 5, 11), float64] */
}

def @func_7469(%var_7454: Tensor[(1, 15, 3), float64], %var_7463: Tensor[(16, 15, 3), float64]) -> (Tensor[(1, 15, 3), float64], Tensor[(16, 15, 3), float64]) {
  %974 = cast(%var_7454, dtype="float64") /* ty=Tensor[(1, 15, 3), float64] */;
  %975 = cast(%var_7454, dtype="float64") /* ty=Tensor[(1, 15, 3), float64] */;
  %976 = cast(%var_7463, dtype="float64") /* ty=Tensor[(16, 15, 3), float64] */;
  %977 = sin(%974) /* ty=Tensor[(1, 15, 3), float64] */;
  %978 = floor_divide(%975, %976) /* ty=Tensor[(16, 15, 3), float64] */;
  (%977, %978)
}

def @func_7099(%var_7097: Tensor[(1716), float32], %var_7098: Tensor[(55, 15), int16]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(1716), float32], Tensor[(288), int32], Tensor[(6, 8, 10), float64], Tensor[(15, 11, 5), int16], Tensor[(55, 15), int16]) {
  %996 = fn (%var_7062: Tensor[(1716), float32], %var_7083: Tensor[(55, 15), int16]) -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(1716), float32], Tensor[(288), int32], Tensor[(6, 8, 10), float64], Tensor[(15, 11, 5), int16], Tensor[(55, 15), int16]) {
    %979 = @func_2799() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %980 = @func_3004() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %981 = cast(%var_7062, dtype="float32") /* ty=Tensor[(1716), float32] */;
    %982 = cast(meta[relay.Constant][72] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
    %983 = reshape(%981, newshape=[13, 12, 11]) /* ty=Tensor[(13, 12, 11), float32] */;
    %984 = reshape(%982, newshape=[4, 72]) /* ty=Tensor[(4, 72), int32] */;
    %985 = @func_6542(%983, %984) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(12, 12, 14), float32], Tensor[(4, 72), int32], Tensor[(13, 12, 11), float32]) */;
    %986 = @func_3190() /* ty=Tensor[(6, 8, 10), uint8] */;
    %987 = cast(%986, dtype="float64") /* ty=Tensor[(6, 8, 10), float64] */;
    %988 = cast(%var_7083, dtype="int16") /* ty=Tensor[(55, 15), int16] */;
    %989 = reshape(%988, newshape=[15, 11, 5]) /* ty=Tensor[(15, 11, 5), int16] */;
    %990 = @func_6975(%989) /* ty=(Tensor[(15, 11, 5), int16],) */;
    %991 = %979.0;
    %992 = %980.0;
    %993 = %985.0;
    %994 = atanh(%987) /* ty=Tensor[(6, 8, 10), float64] */;
    %995 = %990.0;
    (%991, %992, %993, %var_7062, meta[relay.Constant][72] /* ty=Tensor[(288), int32] */, %994, %995, %var_7083)
  };
  %996(%var_7097, %var_7098) /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(1716), float32], Tensor[(288), int32], Tensor[(6, 8, 10), float64], Tensor[(15, 11, 5), int16], Tensor[(55, 15), int16]) */
}

def @func_4868() -> (Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64]) {
  @func_4866() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), float64]) */
}

def @func_1362(%var_1314: Tensor[(15, 3, 10), int16], %var_1322: Tensor[(2, 416), float32], %var_1342: Tensor[(2240), float32], %var_1358: Tensor[(2145), int32]) -> (Tensor[(8, 8, 13), float32], Tensor[(15, 3, 10), int64], Tensor[(12, 12, 14), float32], Tensor[(288), int32], Tensor[(10, 16, 14), float32], Tensor[(2240), float32], Tensor[(8, 3, 12), int32], Tensor[(10, 16, 14), float32], Tensor[(15, 13, 11), int32], Tensor[(2145), int32], Tensor[(2, 416), float32]) {
  %997 = cast(%var_1322, dtype="float32") /* ty=Tensor[(2, 416), float32] */;
  %998 = cast(%var_1322, dtype="float32") /* ty=Tensor[(2, 416), float32] */;
  %999 = cast(%var_1322, dtype="float64") /* ty=Tensor[(2, 416), float64] */;
  %1000 = reshape(%997, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %1001 = reshape(%998, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float32] */;
  %1002 = reshape(%999, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %1003 = @func_639(%1000, %1001, %1002) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32], Tensor[(8, 8, 13), bool]) */;
  %1004 = cast(meta[relay.Constant][73] /* ty=Tensor[(15, 3, 10), int16] */, dtype="int16") /* ty=Tensor[(15, 3, 10), int16] */;
  %1005 = shape_of(%var_1314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1006 = cast(%var_1314, dtype="int16") /* ty=Tensor[(15, 3, 10), int16] */;
  %1007 = dyn.reshape(%1004, %1005, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1008 = left_shift(%1006, %1007) /* ty=Tensor[(15, 3, 10), int16] */;
  %1009 = cast(%1008, dtype="float32") /* ty=Tensor[(15, 3, 10), float32] */;
  %1010 = sin(%1009) /* ty=Tensor[(15, 3, 10), float32] */;
  %1011 = cast(%1008, dtype="int64") /* ty=Tensor[(15, 3, 10), int64] */;
  %1012 = shape_of(%1010, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1013 = cast(%1010, dtype="int64") /* ty=Tensor[(15, 3, 10), int64] */;
  %1014 = dyn.reshape(%1011, %1012, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1015 = cast(meta[relay.Constant][74] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %1016 = reshape(%1015, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %1017 = @func_447(%1016) /* ty=(Tensor[(12, 12, 14), float64], Tensor[(12, 12, 14), float32], Tensor[(12, 12, 14), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32]) */;
  %1018 = cast(%var_1342, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %1019 = reshape(%1018, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), float32] */;
  %1020 = @func_903(%1019) /* ty=(Tensor[(10, 16, 14), float32],) */;
  %1021 = cast(meta[relay.Constant][74] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %1022 = reshape(%1021, newshape=[8, 3, 12]) /* ty=Tensor[(8, 3, 12), int32] */;
  %1023 = cast(%var_1342, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %1024 = reshape(%1023, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), float32] */;
  %1025 = @func_903(%1024) /* ty=(Tensor[(10, 16, 14), float32],) */;
  %1026 = cast(%var_1358, dtype="int32") /* ty=Tensor[(2145), int32] */;
  %1027 = cast(%var_1358, dtype="int32") /* ty=Tensor[(2145), int32] */;
  %1028 = reshape(%1026, newshape=[15, 13, 11]) /* ty=Tensor[(15, 13, 11), int32] */;
  %1029 = reshape(%1027, newshape=[15, 13, 11]) /* ty=Tensor[(15, 13, 11), int32] */;
  %1030 = cast(%var_1322, dtype="float32") /* ty=Tensor[(2, 416), float32] */;
  %1031 = %1003.0;
  %1032 = subtract(%1013, %1014) /* ty=Tensor[(15, 3, 10), int64] */;
  %1033 = %1017.2;
  %1034 = %1020.0;
  %1035 = @func_299(%1022) /* ty=Tensor[(8, 3, 12), int32] */;
  %1036 = %1025.0;
  %1037 = @func_1099(%1028, %1029) /* ty=Tensor[(15, 13, 11), int32] */;
  %1038 = acos(%1030) /* ty=Tensor[(2, 416), float32] */;
  (%1031, %1032, %1033, meta[relay.Constant][74] /* ty=Tensor[(288), int32] */, %1034, %var_1342, %1035, %1036, %1037, %var_1358, %1038)
}

def @func_4629() -> (Tensor[(6, 8, 10), uint8],) {
  %1041 = fn () -> (Tensor[(6, 8, 10), uint8],) {
    %1039 = @func_3632() /* ty=(Tensor[(6, 8, 10), uint8], Tensor[(6, 8, 10), uint8], Tensor[(2240), float32]) */;
    %1040 = %1039.1;
    (%1040,)
  };
  %1041() /* ty=(Tensor[(6, 8, 10), uint8],) */
}

def @func_7515() -> Tensor[(6, 8, 10), uint8] {
  %1043 = fn () -> Tensor[(6, 8, 10), uint8] {
    %1042 = @func_6668() /* ty=(Tensor[(6, 8, 10), uint8],) */;
    %1042.0
  };
  %1043() /* ty=Tensor[(6, 8, 10), uint8] */
}

def @func_643(%var_640: Tensor[(8, 8, 13), float32], %var_641: Tensor[(8, 8, 13), float32], %var_642: Tensor[(8, 8, 13), float64]) -> (Tensor[(8, 8, 13), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32], Tensor[(8, 8, 13), bool]) {
  %1059 = fn (%var_604: Tensor[(8, 8, 13), float32], %var_605: Tensor[(8, 8, 13), float32], %var_634: Tensor[(8, 8, 13), float64]) -> (Tensor[(8, 8, 13), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32], Tensor[(8, 8, 13), bool]) {
    %1044 = cast(%var_605, dtype="float32") /* ty=Tensor[(8, 8, 13), float32] */;
    %1045 = shape_of(%var_604, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1046 = cast(%var_604, dtype="float32") /* ty=Tensor[(8, 8, 13), float32] */;
    %1047 = dyn.reshape(%1044, %1045, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1048 = cast(meta[relay.Constant][75] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
    %1049 = reshape(%1048, newshape=[8, 3, 12]) /* ty=Tensor[(8, 3, 12), int32] */;
    %1050 = cast(%var_604, dtype="float64") /* ty=Tensor[(8, 8, 13), float64] */;
    %1051 = acos(%1050) /* ty=Tensor[(8, 8, 13), float64] */;
    %1052 = cast(%var_634, dtype="bool") /* ty=Tensor[(8, 8, 13), bool] */;
    %1053 = shape_of(%1051, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1054 = cast(%1051, dtype="bool") /* ty=Tensor[(8, 8, 13), bool] */;
    %1055 = dyn.reshape(%1052, %1053, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1056 = mod(%1046, %1047) /* ty=Tensor[(8, 8, 13), float32] */;
    %1057 = @func_299(%1049) /* ty=Tensor[(8, 3, 12), int32] */;
    %1058 = logical_and(%1054, %1055) /* ty=Tensor[(8, 8, 13), bool] */;
    (%1056, %1057, meta[relay.Constant][75] /* ty=Tensor[(288), int32] */, %1058)
  };
  %1059(%var_640, %var_641, %var_642) /* ty=(Tensor[(8, 8, 13), float32], Tensor[(8, 3, 12), int32], Tensor[(288), int32], Tensor[(8, 8, 13), bool]) */
}

def @func_3424(%var_3411: Tensor[(130, 4), bool]) -> (Tensor[(6, 8, 10), float64], Tensor[(26, 3), float32], Tensor[(130, 4), bool], Tensor[(26, 3), float32]) {
  %1060 = @func_3190() /* ty=Tensor[(6, 8, 10), uint8] */;
  %1061 = cast(%1060, dtype="float64") /* ty=Tensor[(6, 8, 10), float64] */;
  %1062 = cast(%var_3411, dtype="bool") /* ty=Tensor[(130, 4), bool] */;
  %1063 = reshape(%1062, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), bool] */;
  %1064 = @func_1819(%1063) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(2, 3, 13), float32], Tensor[(26, 3), float32]) */;
  %1065 = cast(%var_3411, dtype="bool") /* ty=Tensor[(130, 4), bool] */;
  %1066 = reshape(%1065, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), bool] */;
  %1067 = @func_1819(%1066) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(2, 3, 13), float32], Tensor[(26, 3), float32]) */;
  %1068 = cos(%1061) /* ty=Tensor[(6, 8, 10), float64] */;
  %1069 = %1064.2;
  %1070 = %1067.2;
  (%1068, %1069, %var_3411, %1070)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen232/build/output.py", line 2427, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:59:29] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

