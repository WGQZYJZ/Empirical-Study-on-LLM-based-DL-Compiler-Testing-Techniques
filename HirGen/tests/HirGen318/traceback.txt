==========mod==========
#[version = "0.0.5"]
def @func_4490() -> (Tensor[(13, 16, 9), int8],) {
  %0 = @func_2067() /* ty=(Tensor[(13, 16, 9), int8],) */;
  %1 = %0.0;
  (%1,)
}

def @func_4608() -> (Tensor[(2, 11, 11), float64],) {
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 11, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 11, 11), float64] */;
  %3 = acos(%2) /* ty=Tensor[(2, 11, 11), float64] */;
  (%3,)
}

def @func_6617() -> (Tensor[(9, 1, 16), uint8], Tensor[(10, 1, 11), float32]) {
  %4 = cast(meta[relay.Constant][1] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %5 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 1, 16), uint8] */, dtype="uint8") /* ty=Tensor[(9, 1, 16), uint8] */;
  %6 = @func_1537() /* ty=(Tensor[(10, 1, 11), float32],) */;
  %7 = right_shift(%4, %5) /* ty=Tensor[(9, 1, 16), uint8] */;
  %8 = %6.0;
  (%7, %8)
}

def @func_5956() -> Tensor[(1, 24), bool] {
  %9 = @func_4313() /* ty=(Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 9, 4), bool], Tensor[(1, 24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), float64], Tensor[(1872), float64]) */;
  %9.3
}

def @func_6080() -> (Tensor[(10, 1, 11), float32],) {
  %10 = @func_1537() /* ty=(Tensor[(10, 1, 11), float32],) */;
  %11 = %10.0;
  (%11,)
}

def @func_6845() -> (Tensor[(6, 7, 7), float64],) {
  %12 = @func_1407() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) */;
  %13 = %12.0;
  (%13,)
}

def @main(%var_7325: Tensor[(5, 5, 1), bool]) -> (Tensor[(5, 5, 1), uint64], Tensor[(6, 7, 7), bool], Tensor[(5, 5, ?), int32], Tensor[(5, 5, ?), float64]) {
  %14 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %15 = cast(%var_7325, dtype="bool") /* ty=Tensor[(5, 5, 1), bool] */;
  %16 = logical_and(%14, %15) /* ty=Tensor[(5, 5, 1), bool] */;
  %17 = cast(%16, dtype="uint64") /* ty=Tensor[(5, 5, 1), uint64] */;
  %18 = cast(True /* ty=bool */, dtype="uint64") /* ty=uint64 */;
  %19 = cast(%16, dtype="float64") /* ty=Tensor[(5, 5, 1), float64] */;
  %20 = tan(%19) /* ty=Tensor[(5, 5, 1), float64] */;
  %21 = cast(%16, dtype="int32") /* ty=Tensor[(5, 5, 1), int32] */;
  %22 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%20, dtype="int32") /* ty=Tensor[(5, 5, 1), int32] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %25 = cast(%var_7325, dtype="float64") /* ty=Tensor[(5, 5, 1), float64] */;
  %26 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%20, dtype="float64") /* ty=Tensor[(5, 5, 1), float64] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %29 = floor_divide(%27, %28) /* ty=Tensor[(5, 5, ?), float64] */;
  %30 = cast(%29, dtype="float64") /* ty=Tensor[(5, 5, ?), float64] */;
  %31 = bitwise_or(%17, %18) /* ty=Tensor[(5, 5, 1), uint64] */;
  %32 = @func_4762() /* ty=Tensor[(6, 7, 7), bool] */;
  %33 = bitwise_xor(%23, %24) /* ty=Tensor[(5, 5, ?), int32] */;
  %34 = asinh(%30) /* ty=Tensor[(5, 5, ?), float64] */;
  (%31, %32, %33, %34)
}

def @func_1407() -> (Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) {
  %35 = @func_1311() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %36 = cast(meta[relay.Constant][3] /* ty=Tensor[(1872), float32] */, dtype="float32") /* ty=Tensor[(1872), float32] */;
  %37 = reshape(%36, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), float32] */;
  %38 = @func_79(%37) /* ty=(Tensor[(13, 16, 9), float64],) */;
  %39 = %35.0;
  %40 = %38.0;
  (%39, %40, meta[relay.Constant][3] /* ty=Tensor[(1872), float32] */)
}

def @func_2413() -> (Tensor[(6, 7, 7), float64],) {
  %41 = @func_1311() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %42 = %41.0;
  (%42,)
}

def @func_2657(%var_2647: Tensor[(6, 1, 4), bool], %var_2648: Tensor[(6, 9, 4), bool]) -> (Tensor[(6, 9, 4), bool],) {
  %43 = cast(%var_2647, dtype="bool") /* ty=Tensor[(6, 1, 4), bool] */;
  %44 = cast(%var_2648, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
  %45 = logical_and(%43, %44) /* ty=Tensor[(6, 9, 4), bool] */;
  (%45,)
}

def @func_3017() -> (Tensor[(240, ?), uint64], Tensor[(6, 7, 7), float64], Tensor[(240, ?), float32]) {
  %46 = @func_2323() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240, 1), float64], Tensor[(6, 7, 7), bool]) */;
  %47 = %46.1;
  %48 = cast(%47, dtype="float32") /* ty=Tensor[(240, 1), float32] */;
  %49 = sin(%48) /* ty=Tensor[(240, 1), float32] */;
  %50 = cast(%47, dtype="uint8") /* ty=Tensor[(240, 1), uint8] */;
  %51 = shape_of(%49, dtype="int32") /* ty=Tensor[(2), int32] */;
  %52 = cast(%49, dtype="uint8") /* ty=Tensor[(240, 1), uint8] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %54 = logical_xor(%52, %53) /* ty=Tensor[(240, ?), uint8] */;
  %55 = cast(%47, dtype="uint64") /* ty=Tensor[(240, 1), uint64] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(2), int32] */;
  %57 = cast(%54, dtype="uint64") /* ty=Tensor[(240, ?), uint64] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %59 = @func_2413() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %60 = cast(%47, dtype="int32") /* ty=Tensor[(240, 1), int32] */;
  %61 = shape_of(%54, dtype="int32") /* ty=Tensor[(2), int32] */;
  %62 = cast(%54, dtype="int32") /* ty=Tensor[(240, ?), int32] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %64 = multiply(%62, %63) /* ty=Tensor[(240, ?), int32] */;
  %65 = cast(%64, dtype="float32") /* ty=Tensor[(240, ?), float32] */;
  %66 = bitwise_or(%57, %58) /* ty=Tensor[(240, ?), uint64] */;
  %67 = %59.0;
  %68 = tan(%65) /* ty=Tensor[(240, ?), float32] */;
  (%66, %67, %68)
}

def @func_3885(%var_3874: Tensor[(6, 7, 7), bool]) -> (Tensor[(6, 7, 7), float32], Tensor[(1872), float64]) {
  %69 = @func_2715() /* ty=(Tensor[(6, 7, 7), bool],) */;
  %70 = %69.0;
  %71 = cast(%var_3874, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%70, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %75 = @func_3556() /* ty=(Tensor[(1872), float64],) */;
  %76 = power(%73, %74) /* ty=Tensor[(6, 7, 7), float32] */;
  %77 = %75.0;
  (%76, %77)
}

def @func_5449() -> (Tensor[(6, 7, 7), float64],) {
  %78 = @func_1071() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %79 = %78.0;
  (%79,)
}

def @func_3734() -> (Tensor[(6, 7, 7), bool], Tensor[(1872), float64]) {
  %80 = @func_2323() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240, 1), float64], Tensor[(6, 7, 7), bool]) */;
  %81 = @func_3556() /* ty=(Tensor[(1872), float64],) */;
  %82 = %80.2;
  %83 = %81.0;
  (%82, %83)
}

def @func_1108(%var_1077: Tensor[(12, 8, 3), float32], %var_1081: Tensor[(504), float64]) -> (Tensor[(12, 8, 3), float32], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(9, 5, 10), int8], Tensor[(450), float64]) {
  %84 = cast(%var_1077, dtype="float32") /* ty=Tensor[(12, 8, 3), float32] */;
  %85 = cast(%var_1081, dtype="float64") /* ty=Tensor[(504), float64] */;
  %86 = cast(%var_1081, dtype="float64") /* ty=Tensor[(504), float64] */;
  %87 = reshape(%85, newshape=[14, 9, 4]) /* ty=Tensor[(14, 9, 4), float64] */;
  %88 = reshape(%86, newshape=[14, 9, 4]) /* ty=Tensor[(14, 9, 4), float64] */;
  %89 = cast(meta[relay.Constant][4] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %90 = cast(meta[relay.Constant][4] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %91 = reshape(%89, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
  %92 = reshape(%90, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
  %93 = @func_453(%91, %92) /* ty=(Tensor[(9, 5, 10), float64], Tensor[(9, 5, 10), int8]) */;
  %94 = acosh(%84) /* ty=Tensor[(12, 8, 3), float32] */;
  %95 = @func_510(%87, %88) /* ty=Tensor[(14, 9, 4), float64] */;
  %96 = %93.1;
  (%94, %95, %var_1081, %96, meta[relay.Constant][4] /* ty=Tensor[(450), float64] */)
}

def @func_5480(%var_5472: uint16) -> Tensor[(2, 1, 6), uint16] {
  %97 = cast(%var_5472, dtype="uint16") /* ty=uint16 */;
  %98 = cast(meta[relay.Constant][5] /* ty=Tensor[(2, 1, 6), uint16] */, dtype="uint16") /* ty=Tensor[(2, 1, 6), uint16] */;
  bitwise_xor(%97, %98) /* ty=Tensor[(2, 1, 6), uint16] */
}

def @func_2634() -> (Tensor[(6, 7, 7), bool],) {
  %99 = @func_1311() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %100 = %99.0;
  %101 = @func_2346() /* ty=Tensor[(6, 7, 7), float64] */;
  %102 = cast(%101, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %103 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%100, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %106 = logical_or(%104, %105) /* ty=Tensor[(6, 7, 7), bool] */;
  (%106,)
}

def @func_5003() -> (Tensor[(6, 7, 7), uint16], Tensor[(240, ?), float32]) {
  %107 = @func_4087() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), uint16], int32) */;
  %108 = @func_2323() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240, 1), float64], Tensor[(6, 7, 7), bool]) */;
  %109 = %108.1;
  %110 = cast(%109, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
  %111 = erf(%110) /* ty=Tensor[(240, 1), float64] */;
  %112 = cast(%109, dtype="float32") /* ty=Tensor[(240, 1), float32] */;
  %113 = shape_of(%111, dtype="int32") /* ty=Tensor[(2), int32] */;
  %114 = cast(%111, dtype="float32") /* ty=Tensor[(240, 1), float32] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %116 = %107.2;
  %117 = divide(%114, %115) /* ty=Tensor[(240, ?), float32] */;
  (%116, %117)
}

def @func_4313() -> (Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 9, 4), bool], Tensor[(1, 24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), float64], Tensor[(1872), float64]) {
  %118 = @func_2715() /* ty=(Tensor[(6, 7, 7), bool],) */;
  %119 = @func_2413() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %120 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 24), bool] */, dtype="bool") /* ty=Tensor[(1, 24), bool] */;
  %121 = cast(meta[relay.Constant][7] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %122 = reshape(%120, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %123 = reshape(%121, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), bool] */;
  %124 = @func_2657(%122, %123) /* ty=(Tensor[(6, 9, 4), bool],) */;
  %125 = @func_3556() /* ty=(Tensor[(1872), float64],) */;
  %126 = %118.0;
  %127 = %119.0;
  %128 = %124.0;
  %129 = @func_3598() /* ty=Tensor[(6, 7, 7), float64] */;
  %130 = %125.0;
  (%126, %127, %128, meta[relay.Constant][6] /* ty=Tensor[(1, 24), bool] */, meta[relay.Constant][7] /* ty=Tensor[(216), bool] */, %129, %130)
}

def @func_1205() -> (Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) {
  %131 = cast(meta[relay.Constant][8] /* ty=Tensor[(1872), float32] */, dtype="float32") /* ty=Tensor[(1872), float32] */;
  %132 = reshape(%131, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), float32] */;
  %133 = @func_79(%132) /* ty=(Tensor[(13, 16, 9), float64],) */;
  %134 = @func_1071() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %135 = %134.0;
  %136 = cast(%135, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %137 = asinh(%136) /* ty=Tensor[(6, 7, 7), float32] */;
  %138 = cast(%135, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%137, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %142 = floor_mod(%140, %141) /* ty=Tensor[(6, 7, 7), float32] */;
  %143 = cast(%142, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %144 = %133.0;
  %145 = acos(%143) /* ty=Tensor[(6, 7, 7), float32] */;
  (%144, meta[relay.Constant][8] /* ty=Tensor[(1872), float32] */, %145)
}

def @func_1140() -> (Tensor[(6, 7, 7), float64],) {
  %146 = @func_1071() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %147 = %146.0;
  (%147,)
}

def @func_3118() -> (Tensor[(13, 16, 9), float64], Tensor[(6, 7, 7), bool]) {
  %148 = @func_1205() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) */;
  %149 = @func_2715() /* ty=(Tensor[(6, 7, 7), bool],) */;
  %150 = %148.0;
  %151 = %149.0;
  (%150, %151)
}

def @func_6195() -> (Tensor[(6, 7, 7), float64],) {
  %152 = @func_3749() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %153 = %152.0;
  (%153,)
}

def @func_510(%var_504: Tensor[(14, 9, 4), float64], %var_505: Tensor[(14, 9, 4), float64]) -> Tensor[(14, 9, 4), float64] {
  %154 = cast(%var_505, dtype="float64") /* ty=Tensor[(14, 9, 4), float64] */;
  %155 = shape_of(%var_504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%var_504, dtype="float64") /* ty=Tensor[(14, 9, 4), float64] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  multiply(%156, %157) /* ty=Tensor[(14, 9, 4), float64] */
}

def @func_2461(%var_2456: Tensor[(6, 7, 7), float64]) -> (Tensor[(6, 7, 7), bool],) {
  %158 = @func_1798() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %159 = %158.0;
  %160 = cast(%var_2456, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%159, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %164 = not_equal(%162, %163) /* ty=Tensor[(6, 7, 7), bool] */;
  (%164,)
}

def @func_5657() -> Tensor[(6, 7, 7), uint16] {
  %165 = @func_3046() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) */;
  %165.0
}

def @func_3054() -> Tensor[(6, 7, 7), float64] {
  %166 = @func_1407() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) */;
  %166.0
}

def @func_7151(%var_7139: Tensor[(13, 16, 9), int8]) -> (Tensor[(13, 16, 9), bool], Tensor[(13, 16, 9), bool]) {
  %167 = @func_5244() /* ty=(Tensor[(240, 11), int8], Tensor[(13, 16, 9), int8]) */;
  %168 = %167.1;
  %169 = cast(%var_7139, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %173 = cast(%var_7139, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
  %174 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%168, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %177 = greater_equal(%171, %172) /* ty=Tensor[(13, 16, 9), bool] */;
  %178 = not_equal(%175, %176) /* ty=Tensor[(13, 16, 9), bool] */;
  (%177, %178)
}

def @func_3244(%var_3225: Tensor[(1872), float32]) -> (Tensor[(6, 7, 7), float32], Tensor[(1872), float64], Tensor[(240, ?), float32], Tensor[(6, 7, 7), uint16]) {
  %179 = @func_2265() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) */;
  %180 = @func_1407() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) */;
  %181 = %180.2;
  %182 = cast(%var_3225, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %183 = shape_of(%181, dtype="int32") /* ty=Tensor[(1), int32] */;
  %184 = cast(%181, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?), float64] */;
  %186 = @func_3017() /* ty=(Tensor[(240, ?), uint64], Tensor[(6, 7, 7), float64], Tensor[(240, ?), float32]) */;
  %187 = @func_2506() /* ty=(Tensor[(13, 16, 9), int8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), bool]) */;
  %188 = %179.1;
  %189 = power(%184, %185) /* ty=Tensor[(1872), float64] */;
  %190 = %186.2;
  %191 = %187.1;
  (%188, %189, %190, %191)
}

def @func_3075() -> (Tensor[(240, 1), float64],) {
  %192 = @func_2323() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240, 1), float64], Tensor[(6, 7, 7), bool]) */;
  %193 = %192.1;
  %194 = cast(%193, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
  %195 = cosh(%194) /* ty=Tensor[(240, 1), float64] */;
  (%195,)
}

def @func_3556() -> (Tensor[(1872), float64],) {
  %196 = @func_2092() /* ty=(Tensor[(1872), float32],) */;
  %197 = %196.0;
  %198 = cast(%197, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %199 = erf(%198) /* ty=Tensor[(1872), float64] */;
  (%199,)
}

def @func_3315(%var_3296: Tensor[(6, 7, 7), float64]) -> (Tensor[(6, 7, 7), bool], Tensor[(240, 1), float64]) {
  %200 = @func_2346() /* ty=Tensor[(6, 7, 7), float64] */;
  %201 = cast(%var_3296, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%200, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %205 = @func_2323() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240, 1), float64], Tensor[(6, 7, 7), bool]) */;
  %206 = less_equal(%203, %204) /* ty=Tensor[(6, 7, 7), bool] */;
  %207 = %205.1;
  (%206, %207)
}

def @func_4851() -> (Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64]) {
  %208 = @func_3749() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %209 = @func_1407() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) */;
  %210 = %208.0;
  %211 = %209.1;
  (%210, %211)
}

def @func_2609() -> Tensor[(6, 7, 7), float64] {
  %212 = @func_2413() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %212.0
}

def @func_6030() -> Tensor[(20), float64] {
  %213 = @func_4739() /* ty=(Tensor[(6, 7, 7), float32], Tensor[(1, 2, 10), float64], Tensor[(20), float64], Tensor[(1872), float64]) */;
  %213.2
}

def @func_2715() -> (Tensor[(6, 7, 7), bool],) {
  %214 = @func_2634() /* ty=(Tensor[(6, 7, 7), bool],) */;
  %215 = %214.0;
  (%215,)
}

def @func_6290(%var_6271: Tensor[(7, 12, 14), float64]) -> (Tensor[(7, 12, 14), int32],) {
  %216 = cast(%var_6271, dtype="float64") /* ty=Tensor[(7, 12, 14), float64] */;
  %217 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(7, 12, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 12, 14), float64] */, dtype="float64") /* ty=Tensor[(7, 12, 14), float64] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %220 = divide(%218, %219) /* ty=Tensor[(7, 12, 14), float64] */;
  %221 = cast(%220, dtype="uint32") /* ty=Tensor[(7, 12, 14), uint32] */;
  %222 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(7, 12, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 12, 14), float64] */, dtype="uint32") /* ty=Tensor[(7, 12, 14), uint32] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %225 = add(%223, %224) /* ty=Tensor[(7, 12, 14), uint32] */;
  %226 = cast(%225, dtype="int32") /* ty=Tensor[(7, 12, 14), int32] */;
  %227 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%220, dtype="int32") /* ty=Tensor[(7, 12, 14), int32] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %230 = multiply(%228, %229) /* ty=Tensor[(7, 12, 14), int32] */;
  (%230,)
}

def @func_3598() -> Tensor[(6, 7, 7), float64] {
  @func_2609() /* ty=Tensor[(6, 7, 7), float64] */
}

def @func_6112() -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64], Tensor[(1872), float64]) {
  %231 = @func_3046() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) */;
  %232 = @func_4739() /* ty=(Tensor[(6, 7, 7), float32], Tensor[(1, 2, 10), float64], Tensor[(20), float64], Tensor[(1872), float64]) */;
  %233 = @func_5526() /* ty=Tensor[(6, 7, 7), float64] */;
  %234 = %231.1;
  %235 = %232.3;
  (%233, %234, %235)
}

def @func_7271() -> Tensor[(1, 24), bool] {
  @func_5956() /* ty=Tensor[(1, 24), bool] */
}

def @func_1798() -> (Tensor[(6, 7, 7), float64],) {
  %236 = @func_1311() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %237 = %236.0;
  (%237,)
}

def @func_2265() -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) {
  %238 = @func_1311() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %239 = %238.0;
  %240 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 7, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%239, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %244 = cast(%239, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %245 = multiply(%242, %243) /* ty=Tensor[(6, 7, 7), float64] */;
  %246 = atan(%244) /* ty=Tensor[(6, 7, 7), float32] */;
  (%245, %246)
}

def @func_4739() -> (Tensor[(6, 7, 7), float32], Tensor[(1, 2, 10), float64], Tensor[(20), float64], Tensor[(1872), float64]) {
  %247 = @func_4568() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) */;
  %248 = cast(meta[relay.Constant][11] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %249 = reshape(%248, newshape=[1, 2, 10]) /* ty=Tensor[(1, 2, 10), float64] */;
  %250 = %247.1;
  %251 = cast(%250, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %252 = reshape(%251, newshape=[6, 7, 7]) /* ty=Tensor[(6, 7, 7), bool] */;
  %253 = @func_3885(%252) /* ty=(Tensor[(6, 7, 7), float32], Tensor[(1872), float64]) */;
  %254 = @func_1907(%249) /* ty=Tensor[(1, 2, 10), float64] */;
  %255 = %253.1;
  (%250, %254, meta[relay.Constant][11] /* ty=Tensor[(20), float64] */, %255)
}

def @func_4638() -> Tensor[(6, 7, 7), uint16] {
  %256 = @func_3046() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) */;
  %256.0
}

def @func_3491(%var_3444: Tensor[(6, 7, 7), bool], %var_3468: Tensor[(288), float32], %var_3469: Tensor[(504), float64], %var_3470: Tensor[(450), float64]) -> (Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), bool], Tensor[(5, 132), uint16], Tensor[(240), float64], Tensor[(288), float32], Tensor[(504), float64], Tensor[(450), float64], Tensor[(6, 7, 7), bool]) {
  %257 = @func_2634() /* ty=(Tensor[(6, 7, 7), bool],) */;
  %258 = %257.0;
  %259 = cast(%var_3444, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%258, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %263 = cast(%var_3444, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
  %264 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 132), uint16] */, dtype="uint16") /* ty=Tensor[(5, 132), uint16] */;
  %265 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 132), uint16] */, dtype="uint16") /* ty=Tensor[(5, 132), uint16] */;
  %266 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 132), uint16] */, dtype="uint16") /* ty=Tensor[(5, 132), uint16] */;
  %267 = cast(meta[relay.Constant][13] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %268 = cast(%var_3468, dtype="float32") /* ty=Tensor[(288), float32] */;
  %269 = cast(%var_3469, dtype="float64") /* ty=Tensor[(504), float64] */;
  %270 = cast(%var_3470, dtype="float64") /* ty=Tensor[(450), float64] */;
  %271 = reshape(%264, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
  %272 = reshape(%265, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
  %273 = reshape(%266, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
  %274 = reshape(%267, newshape=[120, 2]) /* ty=Tensor[(120, 2), float64] */;
  %275 = reshape(%268, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %276 = reshape(%269, newshape=[36, 14]) /* ty=Tensor[(36, 14), float64] */;
  %277 = reshape(%270, newshape=[5, 90]) /* ty=Tensor[(5, 90), float64] */;
  %278 = @func_2824(%271, %272, %273, %274, %275, %276, %277) /* ty=(Tensor[(15, 4, 11), uint16], Tensor[(6, 7, 7), bool], Tensor[(15, 4, 11), uint8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(5, 12, 4), float64], Tensor[(120, 2), float64], Tensor[(14, 9, 4), float64], Tensor[(288), float32], Tensor[(36, 14), float64], Tensor[(5, 90), int16], Tensor[(9, 5, 10), float32]) */;
  %279 = @func_2634() /* ty=(Tensor[(6, 7, 7), bool],) */;
  %280 = logical_and(%261, %262) /* ty=Tensor[(6, 7, 7), bool] */;
  %281 = rsqrt(%263) /* ty=Tensor[(6, 7, 7), float64] */;
  %282 = %278.1;
  %283 = %279.0;
  (%280, %281, %282, meta[relay.Constant][12] /* ty=Tensor[(5, 132), uint16] */, meta[relay.Constant][13] /* ty=Tensor[(240), float64] */, %var_3468, %var_3469, %var_3470, %283)
}

def @func_6920(%var_6893: Tensor[(15, 6, 12), bool], %var_6906: Tensor[(216), bool]) -> (Tensor[(15, 6, 12), bool], Tensor[(6, 9, 4), bool], Tensor[(24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), float64]) {
  %284 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 6, 12), bool] */, dtype="bool") /* ty=Tensor[(15, 6, 12), bool] */;
  %285 = shape_of(%var_6893, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%var_6893, dtype="bool") /* ty=Tensor[(15, 6, 12), bool] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %288 = cast(meta[relay.Constant][15] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %289 = cast(%var_6906, dtype="bool") /* ty=Tensor[(216), bool] */;
  %290 = reshape(%288, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %291 = reshape(%289, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), bool] */;
  %292 = @func_2657(%290, %291) /* ty=(Tensor[(6, 9, 4), bool],) */;
  %293 = logical_or(%286, %287) /* ty=Tensor[(15, 6, 12), bool] */;
  %294 = %292.0;
  %295 = @func_5577() /* ty=Tensor[(6, 7, 7), float64] */;
  (%293, %294, meta[relay.Constant][15] /* ty=Tensor[(24), bool] */, %var_6906, %295)
}

def @func_3592(%var_3577: Tensor[(6, 7, 7), float64]) -> (Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float32]) {
  %296 = @func_1140() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %297 = %296.0;
  %298 = cast(%var_3577, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%297, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %302 = cast(%var_3577, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %303 = greater(%300, %301) /* ty=Tensor[(6, 7, 7), bool] */;
  %304 = sqrt(%302) /* ty=Tensor[(6, 7, 7), float32] */;
  (%303, %304)
}

def @func_3944() -> (Tensor[(10, 1, 11), float32], Tensor[(6, 7, 7), float64]) {
  %305 = @func_1537() /* ty=(Tensor[(10, 1, 11), float32],) */;
  %306 = @func_1071() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %307 = %305.0;
  %308 = %306.0;
  (%307, %308)
}

def @func_1620() -> (Tensor[(6, 7, 7), uint16],) {
  %309 = @func_1311() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %310 = %309.0;
  %311 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 7, 7), float64] */, dtype="uint16") /* ty=Tensor[(6, 7, 7), uint16] */;
  %312 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%310, dtype="uint16") /* ty=Tensor[(6, 7, 7), uint16] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %315 = bitwise_and(%313, %314) /* ty=Tensor[(6, 7, 7), uint16] */;
  (%315,)
}

def @func_2689(%var_2685: Tensor[(294), float64]) -> (Tensor[(504), float64], Tensor[(6, 7, 7), float32], Tensor[(294), float64]) {
  %316 = @func_1280() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), float64], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(6, 7, 7), float64], Tensor[(5, 90), float64]) */;
  %317 = cast(%var_2685, dtype="float64") /* ty=Tensor[(294), float64] */;
  %318 = reshape(%317, newshape=[6, 7, 7]) /* ty=Tensor[(6, 7, 7), float64] */;
  %319 = @func_1506(%318) /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float32]) */;
  %320 = %316.4;
  %321 = %319.1;
  (%320, %321, %var_2685)
}

def @func_4670() -> Tensor[(6, 7, 7), float64] {
  %322 = @func_1798() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %322.0
}

def @func_3749() -> (Tensor[(6, 7, 7), float64],) {
  %323 = @func_1311() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %324 = %323.0;
  (%324,)
}

def @func_6384(%var_6379: Tensor[(12, 2), bool], %var_6380: Tensor[(216), bool]) -> (Tensor[(6, 7, 7), float64], Tensor[(1872), float32], Tensor[(6, 9, 4), bool], Tensor[(12, 2), bool], Tensor[(216), bool]) {
  %325 = @func_3017() /* ty=(Tensor[(240, ?), uint64], Tensor[(6, 7, 7), float64], Tensor[(240, ?), float32]) */;
  %326 = @func_1205() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) */;
  %327 = cast(%var_6379, dtype="bool") /* ty=Tensor[(12, 2), bool] */;
  %328 = cast(%var_6380, dtype="bool") /* ty=Tensor[(216), bool] */;
  %329 = reshape(%327, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %330 = reshape(%328, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), bool] */;
  %331 = @func_2657(%329, %330) /* ty=(Tensor[(6, 9, 4), bool],) */;
  %332 = %325.1;
  %333 = %326.1;
  %334 = %331.0;
  (%332, %333, %334, %var_6379, %var_6380)
}

def @func_6887() -> Tensor[(10, 1, 11), float32] {
  %335 = @func_6080() /* ty=(Tensor[(10, 1, 11), float32],) */;
  %335.0
}

def @func_5891() -> (Tensor[(6, 7, 7), float64],) {
  %336 = @func_2265() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) */;
  %337 = %336.0;
  (%337,)
}

def @func_4235(%var_4202: Tensor[(660), uint16], %var_4204: Tensor[(288), float32], %var_4205: Tensor[(36, 14), float64]) -> (Tensor[(6, 7, 7), uint16], Tensor[(5, 12, 4), float64], Tensor[(660), uint16], Tensor[(24, 10), float64], Tensor[(288), float32], Tensor[(36, 14), float64], Tensor[(450), float64], Tensor[(6, 7, 7), float64], Tensor[(10, 1, 11), float32]) {
  %338 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %339 = cast(%var_4202, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %340 = cast(%var_4202, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %341 = cast(%var_4202, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %342 = cast(meta[relay.Constant][17] /* ty=Tensor[(24, 10), float64] */, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %343 = cast(%var_4204, dtype="float32") /* ty=Tensor[(288), float32] */;
  %344 = cast(%var_4205, dtype="float64") /* ty=Tensor[(36, 14), float64] */;
  %345 = cast(meta[relay.Constant][18] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %346 = reshape(%339, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
  %347 = reshape(%340, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
  %348 = reshape(%341, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
  %349 = reshape(%342, newshape=[120, 2]) /* ty=Tensor[(120, 2), float64] */;
  %350 = reshape(%343, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %351 = reshape(%344, newshape=[36, 14]) /* ty=Tensor[(36, 14), float64] */;
  %352 = reshape(%345, newshape=[5, 90]) /* ty=Tensor[(5, 90), float64] */;
  %353 = @func_2824(%346, %347, %348, %349, %350, %351, %352) /* ty=(Tensor[(15, 4, 11), uint16], Tensor[(6, 7, 7), bool], Tensor[(15, 4, 11), uint8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(5, 12, 4), float64], Tensor[(120, 2), float64], Tensor[(14, 9, 4), float64], Tensor[(288), float32], Tensor[(36, 14), float64], Tensor[(5, 90), int16], Tensor[(9, 5, 10), float32]) */;
  %354 = @func_1537() /* ty=(Tensor[(10, 1, 11), float32],) */;
  %355 = %338.0;
  %356 = %353.5;
  %357 = @func_2609() /* ty=Tensor[(6, 7, 7), float64] */;
  %358 = %354.0;
  (%355, %356, %var_4202, meta[relay.Constant][17] /* ty=Tensor[(24, 10), float64] */, %var_4204, %var_4205, meta[relay.Constant][18] /* ty=Tensor[(450), float64] */, %357, %358)
}

def @func_5376(%var_5365: Tensor[(7, 5, 6), float64], %var_5366: Tensor[(7, 5, 6), float64]) -> Tensor[(7, 5, 6), float64] {
  %359 = cast(%var_5366, dtype="float64") /* ty=Tensor[(7, 5, 6), float64] */;
  %360 = shape_of(%var_5365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%var_5365, dtype="float64") /* ty=Tensor[(7, 5, 6), float64] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%361, %362) /* ty=Tensor[(7, 5, 6), float64] */
}

def @func_79(%var_66: Tensor[(13, 16, 9), float32]) -> (Tensor[(13, 16, 9), float64],) {
  %363 = cast(%var_66, dtype="float32") /* ty=Tensor[(13, 16, 9), float32] */;
  %364 = rsqrt(%363) /* ty=Tensor[(13, 16, 9), float32] */;
  %365 = cast(%var_66, dtype="float64") /* ty=Tensor[(13, 16, 9), float64] */;
  %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%364, dtype="float64") /* ty=Tensor[(13, 16, 9), float64] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %369 = mod(%367, %368) /* ty=Tensor[(13, 16, 9), float64] */;
  (%369,)
}

def @func_1071() -> (Tensor[(6, 7, 7), float64],) {
  %370 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 7, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
  %371 = asin(%370) /* ty=Tensor[(6, 7, 7), float64] */;
  (%371,)
}

def @func_5577() -> Tensor[(6, 7, 7), float64] {
  %372 = @func_5185() /* ty=(Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64]) */;
  %372.2
}

def @func_7262() -> Tensor[(6, 7, 7), bool] {
  %373 = @func_2715() /* ty=(Tensor[(6, 7, 7), bool],) */;
  %373.0
}

def @func_7044() -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32], Tensor[(9, 5, 10), float64], Tensor[(6, 7, 7), float64]) {
  %374 = @func_1280() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), float64], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(6, 7, 7), float64], Tensor[(5, 90), float64]) */;
  %375 = @func_2265() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) */;
  %376 = %375.1;
  %377 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 7, 7), float32] */, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %378 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%376, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %381 = @func_5848() /* ty=(Tensor[(9, 5, 10), float64],) */;
  %382 = %374.0;
  %383 = divide(%379, %380) /* ty=Tensor[(6, 7, 7), float32] */;
  %384 = %381.0;
  %385 = @func_4670() /* ty=Tensor[(6, 7, 7), float64] */;
  (%382, %383, %384, %385)
}

def @func_1570(%var_1558: Tensor[(5, 12, 4), float64]) -> (Tensor[(5, 12, 4), float64],) {
  %386 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 12, 4), float64] */, dtype="float64") /* ty=Tensor[(5, 12, 4), float64] */;
  %387 = shape_of(%var_1558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%var_1558, dtype="float64") /* ty=Tensor[(5, 12, 4), float64] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %390 = divide(%388, %389) /* ty=Tensor[(5, 12, 4), float64] */;
  (%390,)
}

def @func_4160() -> Tensor[(240, 1), float64] {
  %391 = @func_3075() /* ty=(Tensor[(240, 1), float64],) */;
  %391.0
}

def @func_6980(%var_6949: Tensor[(216), bool], %var_6967: Tensor[(450), float64]) -> (Tensor[(6, 7, 7), float64], Tensor[(216), bool], Tensor[(24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), float32], Tensor[(9, 5, 10), int8], Tensor[(450), float64]) {
  %392 = @func_5526() /* ty=Tensor[(6, 7, 7), float64] */;
  %393 = cast(%392, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
  %394 = cast(meta[relay.Constant][22] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %395 = cast(%var_6949, dtype="bool") /* ty=Tensor[(216), bool] */;
  %396 = reshape(%394, newshape=[12, 2]) /* ty=Tensor[(12, 2), bool] */;
  %397 = reshape(%395, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %398 = @func_6384(%396, %397) /* ty=(Tensor[(6, 7, 7), float64], Tensor[(1872), float32], Tensor[(6, 9, 4), bool], Tensor[(12, 2), bool], Tensor[(216), bool]) */;
  %399 = @func_1205() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) */;
  %400 = cast(%var_6967, dtype="float64") /* ty=Tensor[(450), float64] */;
  %401 = cast(%var_6967, dtype="float64") /* ty=Tensor[(450), float64] */;
  %402 = reshape(%400, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
  %403 = reshape(%401, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
  %404 = @func_453(%402, %403) /* ty=(Tensor[(9, 5, 10), float64], Tensor[(9, 5, 10), int8]) */;
  %405 = log2(%393) /* ty=Tensor[(6, 7, 7), float64] */;
  %406 = %398.4;
  %407 = %399.2;
  %408 = %404.1;
  (%405, %406, meta[relay.Constant][22] /* ty=Tensor[(24), bool] */, %var_6949, %407, %408, %var_6967)
}

def @func_3805(%var_3783: Tensor[(294), float64], %var_3794: Tensor[(13, 16, 9), int8]) -> (Tensor[(6, 7, 7), uint16], Tensor[(294), float64], Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), bool]) {
  %409 = cast(%var_3783, dtype="float64") /* ty=Tensor[(294), float64] */;
  %410 = reshape(%409, newshape=[6, 7, 7]) /* ty=Tensor[(6, 7, 7), float64] */;
  %411 = @func_1506(%410) /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float32]) */;
  %412 = @func_2067() /* ty=(Tensor[(13, 16, 9), int8],) */;
  %413 = %412.0;
  %414 = cast(%var_3794, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %418 = %411.0;
  %419 = @func_2346() /* ty=Tensor[(6, 7, 7), float64] */;
  %420 = logical_and(%416, %417) /* ty=Tensor[(13, 16, 9), bool] */;
  (%418, %var_3783, %419, %420)
}

def @func_2754(%var_2739: uint64, %var_2740: Tensor[(4, 8, 10), uint64]) -> (Tensor[(4, 8, 10), bool], Tensor[(4, 8, 10), float32]) {
  %421 = cast(%var_2739, dtype="bool") /* ty=bool */;
  %422 = cast(%var_2740, dtype="bool") /* ty=Tensor[(4, 8, 10), bool] */;
  %423 = cast(%var_2740, dtype="float32") /* ty=Tensor[(4, 8, 10), float32] */;
  %424 = asinh(%423) /* ty=Tensor[(4, 8, 10), float32] */;
  %425 = cast(%424, dtype="float32") /* ty=Tensor[(4, 8, 10), float32] */;
  %426 = not_equal(%421, %422) /* ty=Tensor[(4, 8, 10), bool] */;
  %427 = asin(%425) /* ty=Tensor[(4, 8, 10), float32] */;
  (%426, %427)
}

def @func_5710(%var_5705: Tensor[(2, 320), float64]) -> (Tensor[(6, 7, 7), uint16], Tensor[(8, 8, 10), float32], Tensor[(80), float64], Tensor[(2, 320), float64]) {
  %428 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %429 = cast(meta[relay.Constant][23] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %430 = cast(%var_5705, dtype="float64") /* ty=Tensor[(2, 320), float64] */;
  %431 = reshape(%429, newshape=[1, 8, 10]) /* ty=Tensor[(1, 8, 10), float64] */;
  %432 = reshape(%430, newshape=[8, 8, 10]) /* ty=Tensor[(8, 8, 10), float64] */;
  %433 = @func_5049(%431, %432) /* ty=(Tensor[(8, 8, 10), bool], Tensor[(8, 8, 10), float32]) */;
  %434 = %428.0;
  %435 = %433.1;
  (%434, %435, meta[relay.Constant][23] /* ty=Tensor[(80), float64] */, %var_5705)
}

def @func_4568() -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) {
  %436 = @func_1798() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %437 = @func_3054() /* ty=Tensor[(6, 7, 7), float64] */;
  %438 = cast(%437, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %439 = acosh(%438) /* ty=Tensor[(6, 7, 7), float32] */;
  %440 = cast(%439, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %441 = sigmoid(%440) /* ty=Tensor[(6, 7, 7), float32] */;
  %442 = cast(%441, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %443 = %436.0;
  %444 = atanh(%442) /* ty=Tensor[(6, 7, 7), float32] */;
  (%443, %444)
}

def @func_5429(%var_5410: Tensor[(450), float64], %var_5417: Tensor[(1540), float32]) -> (Tensor[(13, 16, 9), float64], Tensor[(6, 7, 7), float64], Tensor[(294), float32], Tensor[(9, 5, 10), bool], Tensor[(10, 14, 11), float64], Tensor[(1540), float32], int32, int32) {
  %445 = @func_4851() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64]) */;
  %446 = cast(meta[relay.Constant][24] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %447 = reshape(%446, newshape=[6, 7, 7]) /* ty=Tensor[(6, 7, 7), float32] */;
  %448 = @func_1769(%447) /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), bool]) */;
  %449 = cast(%var_5410, dtype="float64") /* ty=Tensor[(450), float64] */;
  %450 = cast(%var_5410, dtype="float64") /* ty=Tensor[(450), float64] */;
  %451 = reshape(%449, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
  %452 = reshape(%450, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
  %453 = @func_453(%451, %452) /* ty=(Tensor[(9, 5, 10), float64], Tensor[(9, 5, 10), int8]) */;
  %454 = %453.1;
  %455 = cast(%var_5410, dtype="bool") /* ty=Tensor[(450), bool] */;
  %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%454, dtype="bool") /* ty=Tensor[(9, 5, 10), bool] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %459 = cast(%var_5417, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %460 = reshape(%459, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float32] */;
  %461 = @func_2294(%460) /* ty=(Tensor[(10, 14, 11), float64], Tensor[(1872), float32]) */;
  %462 = cast(9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %463 = reshape(%462, newshape=[]) /* ty=int32 */;
  %464 = @func_1897(%463) /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64], Tensor[(10, 8, 16), float64], int32, Tensor[(1280, 1), int32], Tensor[(504), float64]) */;
  %465 = %445.1;
  %466 = %448.0;
  %467 = greater(%457, %458) /* ty=Tensor[(9, 5, 10), bool] */;
  %468 = %461.0;
  %469 = %464.3;
  (%465, %466, meta[relay.Constant][24] /* ty=Tensor[(294), float32] */, %467, %468, %var_5417, %469, 9 /* ty=int32 */)
}

def @func_1537() -> (Tensor[(10, 1, 11), float32],) {
  %470 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 1, 11), float32] */, dtype="float32") /* ty=Tensor[(10, 1, 11), float32] */;
  %471 = erf(%470) /* ty=Tensor[(10, 1, 11), float32] */;
  (%471,)
}

def @func_1792() -> (Tensor[(6, 7, 7), uint16],) {
  %472 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %473 = %472.0;
  (%473,)
}

def @func_1506(%var_1494: Tensor[(6, 7, 7), float64]) -> (Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float32]) {
  %474 = @func_1311() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %475 = %474.0;
  %476 = cast(%var_1494, dtype="uint16") /* ty=Tensor[(6, 7, 7), uint16] */;
  %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%475, dtype="uint16") /* ty=Tensor[(6, 7, 7), uint16] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %480 = cast(%var_1494, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %481 = left_shift(%478, %479) /* ty=Tensor[(6, 7, 7), uint16] */;
  %482 = tan(%480) /* ty=Tensor[(6, 7, 7), float32] */;
  (%481, %482)
}

def @func_5244() -> (Tensor[(240, 11), int8], Tensor[(13, 16, 9), int8]) {
  %483 = @func_4160() /* ty=Tensor[(240, 1), float64] */;
  %484 = cast(%483, dtype="int8") /* ty=Tensor[(240, 1), int8] */;
  %485 = cast(meta[relay.Constant][26] /* ty=Tensor[(240, 11), float64] */, dtype="int8") /* ty=Tensor[(240, 11), int8] */;
  %486 = @func_2067() /* ty=(Tensor[(13, 16, 9), int8],) */;
  %487 = maximum(%484, %485) /* ty=Tensor[(240, 11), int8] */;
  %488 = %486.0;
  (%487, %488)
}

def @func_7122(%var_7047: Tensor[(12, 3, 10), float64]) -> (Tensor[(6, 7, 7), float64], Tensor[(1176), float64], Tensor[(12, 3, 10), bool], Tensor[(7, 12, 14), float32]) {
  %489 = @func_1140() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %490 = cast(%var_7047, dtype="float64") /* ty=Tensor[(12, 3, 10), float64] */;
  %491 = asinh(%490) /* ty=Tensor[(12, 3, 10), float64] */;
  %492 = cast(%491, dtype="float32") /* ty=Tensor[(12, 3, 10), float32] */;
  %493 = log(%492) /* ty=Tensor[(12, 3, 10), float32] */;
  %494 = cast(%491, dtype="float32") /* ty=Tensor[(12, 3, 10), float32] */;
  %495 = sqrt(%494) /* ty=Tensor[(12, 3, 10), float32] */;
  %496 = cast(%495, dtype="bool") /* ty=Tensor[(12, 3, 10), bool] */;
  %497 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%493, dtype="bool") /* ty=Tensor[(12, 3, 10), bool] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %500 = cast(meta[relay.Constant][27] /* ty=Tensor[(1176), float64] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %501 = reshape(%500, newshape=[7, 12, 14]) /* ty=Tensor[(7, 12, 14), float64] */;
  %502 = @func_6290(%501) /* ty=(Tensor[(7, 12, 14), int32],) */;
  %503 = %502.0;
  %504 = cast(%503, dtype="float32") /* ty=Tensor[(7, 12, 14), float32] */;
  %505 = %489.0;
  %506 = greater(%498, %499) /* ty=Tensor[(12, 3, 10), bool] */;
  %507 = rsqrt(%504) /* ty=Tensor[(7, 12, 14), float32] */;
  (%505, meta[relay.Constant][27] /* ty=Tensor[(1176), float64] */, %506, %507)
}

def @func_1769(%var_1718: Tensor[(6, 7, 7), float32]) -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), bool]) {
  %508 = @func_1205() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) */;
  %509 = %508.2;
  %510 = cast(%509, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
  %511 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %512 = %511.0;
  %513 = cast(%var_1718, dtype="uint16") /* ty=Tensor[(6, 7, 7), uint16] */;
  %514 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%509, dtype="uint16") /* ty=Tensor[(6, 7, 7), uint16] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %517 = logical_xor(%515, %516) /* ty=Tensor[(6, 7, 7), uint16] */;
  %518 = cast(%517, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %519 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%512, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %522 = cosh(%510) /* ty=Tensor[(6, 7, 7), float64] */;
  %523 = equal(%520, %521) /* ty=Tensor[(6, 7, 7), bool] */;
  (%522, %523)
}

def @func_3046() -> (Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) {
  %524 = @func_1792() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %525 = @func_1071() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %526 = %524.0;
  %527 = %525.0;
  (%526, %527)
}

def @func_5049(%var_5037: Tensor[(1, 8, 10), float64], %var_5038: Tensor[(8, 8, 10), float64]) -> (Tensor[(8, 8, 10), bool], Tensor[(8, 8, 10), float32]) {
  %528 = cast(%var_5037, dtype="bool") /* ty=Tensor[(1, 8, 10), bool] */;
  %529 = cast(%var_5038, dtype="bool") /* ty=Tensor[(8, 8, 10), bool] */;
  %530 = cast(%var_5038, dtype="float32") /* ty=Tensor[(8, 8, 10), float32] */;
  %531 = not_equal(%528, %529) /* ty=Tensor[(8, 8, 10), bool] */;
  %532 = log10(%530) /* ty=Tensor[(8, 8, 10), float32] */;
  (%531, %532)
}

def @func_4762() -> Tensor[(6, 7, 7), bool] {
  @func_4260() /* ty=Tensor[(6, 7, 7), bool] */
}

def @func_2447() -> (Tensor[(9, 5, 10), int8],) {
  %533 = @func_1280() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), float64], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(6, 7, 7), float64], Tensor[(5, 90), float64]) */;
  %534 = %533.1;
  (%534,)
}

def @func_4260() -> Tensor[(6, 7, 7), bool] {
  %535 = @func_2715() /* ty=(Tensor[(6, 7, 7), bool],) */;
  %535.0
}

def @func_5029(%var_5019: Tensor[(9, 12, 3), float64], %var_5020: Tensor[(9, 12, 3), float64]) -> (Tensor[(9, 12, 3), float64],) {
  %536 = cast(%var_5020, dtype="float64") /* ty=Tensor[(9, 12, 3), float64] */;
  %537 = shape_of(%var_5019, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%var_5019, dtype="float64") /* ty=Tensor[(9, 12, 3), float64] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %540 = divide(%538, %539) /* ty=Tensor[(9, 12, 3), float64] */;
  (%540,)
}

def @func_1311() -> (Tensor[(6, 7, 7), float64],) {
  %541 = @func_1280() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), float64], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(6, 7, 7), float64], Tensor[(5, 90), float64]) */;
  %542 = %541.0;
  (%542,)
}

def @func_5962() -> (Tensor[(6, 7, 7), uint8],) {
  %543 = @func_5747() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), uint8], Tensor[(240, 12), uint32]) */;
  %544 = %543.1;
  (%544,)
}

def @func_5762() -> (Tensor[(6, 7, 7), uint16],) {
  %545 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %546 = %545.0;
  (%546,)
}

def @func_2294(%var_2287: Tensor[(10, 14, 11), float32]) -> (Tensor[(10, 14, 11), float64], Tensor[(1872), float32]) {
  %547 = @func_1537() /* ty=(Tensor[(10, 1, 11), float32],) */;
  %548 = %547.0;
  %549 = cast(%548, dtype="float64") /* ty=Tensor[(10, 1, 11), float64] */;
  %550 = cast(%var_2287, dtype="float64") /* ty=Tensor[(10, 14, 11), float64] */;
  %551 = @func_1407() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) */;
  %552 = divide(%549, %550) /* ty=Tensor[(10, 14, 11), float64] */;
  %553 = %551.2;
  (%552, %553)
}

def @func_1280() -> (Tensor[(6, 7, 7), float64], Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), float64], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(6, 7, 7), float64], Tensor[(5, 90), float64]) {
  %554 = @func_1140() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %555 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 90), float64] */, dtype="float64") /* ty=Tensor[(5, 90), float64] */;
  %556 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 90), float64] */, dtype="float64") /* ty=Tensor[(5, 90), float64] */;
  %557 = reshape(%555, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
  %558 = reshape(%556, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
  %559 = @func_453(%557, %558) /* ty=(Tensor[(9, 5, 10), float64], Tensor[(9, 5, 10), int8]) */;
  %560 = @func_1071() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %561 = cast(meta[relay.Constant][29] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %562 = cast(meta[relay.Constant][29] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %563 = reshape(%561, newshape=[14, 9, 4]) /* ty=Tensor[(14, 9, 4), float64] */;
  %564 = reshape(%562, newshape=[14, 9, 4]) /* ty=Tensor[(14, 9, 4), float64] */;
  %565 = @func_1071() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %566 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 90), float64] */, dtype="float64") /* ty=Tensor[(5, 90), float64] */;
  %567 = %554.0;
  %568 = %559.1;
  %569 = %560.0;
  %570 = @func_510(%563, %564) /* ty=Tensor[(14, 9, 4), float64] */;
  %571 = %565.0;
  %572 = atan(%566) /* ty=Tensor[(5, 90), float64] */;
  (%567, %568, %569, %570, meta[relay.Constant][29] /* ty=Tensor[(504), float64] */, %571, %572)
}

def @func_2067() -> (Tensor[(13, 16, 9), int8],) {
  %573 = @func_1407() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) */;
  %574 = %573.1;
  %575 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 16, 9), float64] */, dtype="int8") /* ty=Tensor[(13, 16, 9), int8] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%574, dtype="int8") /* ty=Tensor[(13, 16, 9), int8] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %579 = multiply(%577, %578) /* ty=Tensor[(13, 16, 9), int8] */;
  (%579,)
}

def @func_5124() -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64]) {
  %580 = @func_4711() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %581 = @func_2346() /* ty=Tensor[(6, 7, 7), float64] */;
  %582 = %580.0;
  (%581, %582)
}

def @func_1897(%var_1885: int32) -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64], Tensor[(10, 8, 16), float64], int32, Tensor[(1280, 1), int32], Tensor[(504), float64]) {
  %583 = @func_1140() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %584 = %583.0;
  %585 = @func_1792() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %586 = %585.0;
  %587 = cast(%586, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
  %588 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%584, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %591 = cast(%584, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
  %592 = cast(%var_1885, dtype="int32") /* ty=int32 */;
  %593 = cast(meta[relay.Constant][31] /* ty=Tensor[(1280, 1), int32] */, dtype="int32") /* ty=Tensor[(1280, 1), int32] */;
  %594 = reshape(%592, newshape=[]) /* ty=int32 */;
  %595 = reshape(%593, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), int32] */;
  %596 = @func_1280() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), float64], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(6, 7, 7), float64], Tensor[(5, 90), float64]) */;
  %597 = floor_divide(%589, %590) /* ty=Tensor[(6, 7, 7), float64] */;
  %598 = sin(%591) /* ty=Tensor[(6, 7, 7), float64] */;
  %599 = @func_1675(%594, %595) /* ty=Tensor[(10, 8, 16), float64] */;
  %600 = %596.4;
  (%597, %598, %599, %var_1885, meta[relay.Constant][31] /* ty=Tensor[(1280, 1), int32] */, %600)
}

def @func_5863() -> Tensor[(6, 7, 7), float32] {
  %601 = @func_1798() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %602 = %601.0;
  %603 = cast(%602, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  erf(%603) /* ty=Tensor[(6, 7, 7), float32] */
}

def @func_1675(%var_1643: int32, %var_1644: Tensor[(10, 8, 16), int32]) -> Tensor[(10, 8, 16), float64] {
  %604 = cast(%var_1643, dtype="int32") /* ty=int32 */;
  %605 = cast(%var_1644, dtype="int32") /* ty=Tensor[(10, 8, 16), int32] */;
  %606 = add(%604, %605) /* ty=Tensor[(10, 8, 16), int32] */;
  %607 = cast(%606, dtype="float64") /* ty=Tensor[(10, 8, 16), float64] */;
  atan(%607) /* ty=Tensor[(10, 8, 16), float64] */
}

def @func_4087() -> (Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), uint16], int32) {
  %608 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %609 = @func_3749() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %610 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %611 = reshape(%610, newshape=[]) /* ty=int32 */;
  %612 = @func_3669(%611) /* ty=(Tensor[(6, 7, 7), uint16], int32, int32, Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) */;
  %613 = %608.0;
  %614 = %609.0;
  %615 = %612.5;
  (%613, %614, %615, -2 /* ty=int32 */)
}

def @func_5285() -> Tensor[(6, 7, 7), float64] {
  @func_3054() /* ty=Tensor[(6, 7, 7), float64] */
}

def @func_453(%var_410: Tensor[(9, 5, 10), float64], %var_440: Tensor[(9, 5, 10), float64]) -> (Tensor[(9, 5, 10), float64], Tensor[(9, 5, 10), int8]) {
  %616 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(9, 5, 10), float64] */;
  %617 = shape_of(%var_410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%var_410, dtype="float64") /* ty=Tensor[(9, 5, 10), float64] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %620 = cast(%var_410, dtype="float64") /* ty=Tensor[(9, 5, 10), float64] */;
  %621 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(9, 5, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(9, 5, 10), float64] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %624 = power(%622, %623) /* ty=Tensor[(9, 5, 10), float64] */;
  %625 = cast(%var_440, dtype="int8") /* ty=Tensor[(9, 5, 10), int8] */;
  %626 = shape_of(%624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %627 = cast(%624, dtype="int8") /* ty=Tensor[(9, 5, 10), int8] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %629 = multiply(%618, %619) /* ty=Tensor[(9, 5, 10), float64] */;
  %630 = logical_xor(%627, %628) /* ty=Tensor[(9, 5, 10), int8] */;
  (%629, %630)
}

def @func_5980() -> (Tensor[(6, 7, 7), bool],) {
  %631 = @func_5185() /* ty=(Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64]) */;
  %632 = %631.1;
  (%632,)
}

def @func_4928() -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), bool]) {
  %633 = @func_3118() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(6, 7, 7), bool]) */;
  %634 = @func_4670() /* ty=Tensor[(6, 7, 7), float64] */;
  %635 = %633.1;
  (%634, %635)
}

def @func_5807() -> (Tensor[(6, 7, 7), float64], Tensor[(10, 14, 11), float64], Tensor[(450, 1), float64], Tensor[(1540), float32], Tensor[(6, 7, 7), bool]) {
  %636 = @func_5449() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %637 = cast(meta[relay.Constant][33] /* ty=Tensor[(450, 1), float64] */, dtype="float64") /* ty=Tensor[(450, 1), float64] */;
  %638 = cast(meta[relay.Constant][34] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %639 = reshape(%637, newshape=[450]) /* ty=Tensor[(450), float64] */;
  %640 = reshape(%638, newshape=[1540]) /* ty=Tensor[(1540), float32] */;
  %641 = @func_5429(%639, %640) /* ty=(Tensor[(13, 16, 9), float64], Tensor[(6, 7, 7), float64], Tensor[(294), float32], Tensor[(9, 5, 10), bool], Tensor[(10, 14, 11), float64], Tensor[(1540), float32], int32, int32) */;
  %642 = @func_3734() /* ty=(Tensor[(6, 7, 7), bool], Tensor[(1872), float64]) */;
  %643 = %636.0;
  %644 = %641.4;
  %645 = %642.0;
  (%643, %644, meta[relay.Constant][33] /* ty=Tensor[(450, 1), float64] */, meta[relay.Constant][34] /* ty=Tensor[(1540), float32] */, %645)
}

def @func_2346() -> Tensor[(6, 7, 7), float64] {
  %646 = @func_1140() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %646.0
}

def @func_5359() -> (Tensor[(2, 11, 11), float64], Tensor[(6, 7, 7), uint8]) {
  %647 = @func_4608() /* ty=(Tensor[(2, 11, 11), float64],) */;
  %648 = @func_4762() /* ty=Tensor[(6, 7, 7), bool] */;
  %649 = @func_4670() /* ty=Tensor[(6, 7, 7), float64] */;
  %650 = cast(%649, dtype="uint8") /* ty=Tensor[(6, 7, 7), uint8] */;
  %651 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%648, dtype="uint8") /* ty=Tensor[(6, 7, 7), uint8] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %654 = %647.0;
  %655 = maximum(%652, %653) /* ty=Tensor[(6, 7, 7), uint8] */;
  (%654, %655)
}

def @func_5848() -> (Tensor[(9, 5, 10), float64],) {
  %656 = @func_3531() /* ty=(Tensor[(9, 5, 10), float64],) */;
  %657 = %656.0;
  (%657,)
}

def @func_6775() -> (Tensor[(6, 7, 7), uint16],) {
  %658 = @func_5762() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %659 = %658.0;
  (%659,)
}

def @func_2092() -> (Tensor[(1872), float32],) {
  %660 = @func_1205() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) */;
  %661 = %660.1;
  (%661,)
}

def @func_5747() -> (Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), uint8], Tensor[(240, 12), uint32]) {
  %662 = @func_4087() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), uint16], int32) */;
  %663 = @func_5359() /* ty=(Tensor[(2, 11, 11), float64], Tensor[(6, 7, 7), uint8]) */;
  %664 = @func_5533() /* ty=(Tensor[(240, ?), float32],) */;
  %665 = %664.0;
  %666 = cast(%665, dtype="int16") /* ty=Tensor[(240, ?), int16] */;
  %667 = cast(meta[relay.Constant][35] /* ty=Tensor[(240, 12), float32] */, dtype="int16") /* ty=Tensor[(240, 12), int16] */;
  %668 = bitwise_xor(%666, %667) /* ty=Tensor[(240, 12), int16] */;
  %669 = cast(meta[relay.Constant][35] /* ty=Tensor[(240, 12), float32] */, dtype="uint32") /* ty=Tensor[(240, 12), uint32] */;
  %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(2), int32] */;
  %671 = cast(%668, dtype="uint32") /* ty=Tensor[(240, 12), uint32] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %673 = %662.0;
  %674 = %663.1;
  %675 = minimum(%671, %672) /* ty=Tensor[(240, 12), uint32] */;
  (%673, %674, %675)
}

def @func_6225(%var_6218: Tensor[(14, 12, 15), float64]) -> Tensor[(14, 12, 15), float64] {
  %676 = cast(%var_6218, dtype="float64") /* ty=Tensor[(14, 12, 15), float64] */;
  log2(%676) /* ty=Tensor[(14, 12, 15), float64] */
}

def @func_2824(%var_2760: Tensor[(15, 4, 11), uint16], %var_2761: Tensor[(15, 4, 11), uint16], %var_2788: Tensor[(15, 4, 11), uint16], %var_2803: Tensor[(120, 2), float64], %var_2809: Tensor[(288), float32], %var_2810: Tensor[(36, 14), float64], %var_2816: Tensor[(5, 90), float64]) -> (Tensor[(15, 4, 11), uint16], Tensor[(6, 7, 7), bool], Tensor[(15, 4, 11), uint8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(5, 12, 4), float64], Tensor[(120, 2), float64], Tensor[(14, 9, 4), float64], Tensor[(288), float32], Tensor[(36, 14), float64], Tensor[(5, 90), int16], Tensor[(9, 5, 10), float32]) {
  %677 = cast(%var_2761, dtype="uint16") /* ty=Tensor[(15, 4, 11), uint16] */;
  %678 = shape_of(%var_2760, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%var_2760, dtype="uint16") /* ty=Tensor[(15, 4, 11), uint16] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %681 = @func_2634() /* ty=(Tensor[(6, 7, 7), bool],) */;
  %682 = cast(%var_2788, dtype="uint8") /* ty=Tensor[(15, 4, 11), uint8] */;
  %683 = shape_of(%var_2760, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%var_2760, dtype="uint8") /* ty=Tensor[(15, 4, 11), uint8] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %686 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %687 = @func_2265() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) */;
  %688 = cast(%var_2803, dtype="float64") /* ty=Tensor[(120, 2), float64] */;
  %689 = reshape(%688, newshape=[5, 12, 4]) /* ty=Tensor[(5, 12, 4), float64] */;
  %690 = @func_1570(%689) /* ty=(Tensor[(5, 12, 4), float64],) */;
  %691 = cast(%var_2809, dtype="float32") /* ty=Tensor[(288), float32] */;
  %692 = cast(%var_2810, dtype="float64") /* ty=Tensor[(36, 14), float64] */;
  %693 = reshape(%691, newshape=[12, 8, 3]) /* ty=Tensor[(12, 8, 3), float32] */;
  %694 = reshape(%692, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %695 = @func_1108(%693, %694) /* ty=(Tensor[(12, 8, 3), float32], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(9, 5, 10), int8], Tensor[(450), float64]) */;
  %696 = cast(%var_2816, dtype="int16") /* ty=Tensor[(5, 90), int16] */;
  %697 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(5, 90), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %698 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 90), float64] */, dtype="int16") /* ty=Tensor[(5, 90), int16] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %700 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 90), float64] */, dtype="float64") /* ty=Tensor[(5, 90), float64] */;
  %701 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 90), float64] */, dtype="float64") /* ty=Tensor[(5, 90), float64] */;
  %702 = reshape(%700, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
  %703 = reshape(%701, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
  %704 = @func_453(%702, %703) /* ty=(Tensor[(9, 5, 10), float64], Tensor[(9, 5, 10), int8]) */;
  %705 = %704.1;
  %706 = cast(%705, dtype="float32") /* ty=Tensor[(9, 5, 10), float32] */;
  %707 = right_shift(%679, %680) /* ty=Tensor[(15, 4, 11), uint16] */;
  %708 = %681.0;
  %709 = minimum(%684, %685) /* ty=Tensor[(15, 4, 11), uint8] */;
  %710 = %686.0;
  %711 = %687.0;
  %712 = %690.0;
  %713 = %695.1;
  %714 = right_shift(%698, %699) /* ty=Tensor[(5, 90), int16] */;
  %715 = erf(%706) /* ty=Tensor[(9, 5, 10), float32] */;
  (%707, %708, %709, %710, %711, %712, %var_2803, %713, %var_2809, %var_2810, %714, %715)
}

def @func_2323() -> (Tensor[(5, 12, 4), float64], Tensor[(240, 1), float64], Tensor[(6, 7, 7), bool]) {
  %716 = cast(meta[relay.Constant][37] /* ty=Tensor[(240, 1), float64] */, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
  %717 = reshape(%716, newshape=[5, 12, 4]) /* ty=Tensor[(5, 12, 4), float64] */;
  %718 = @func_1570(%717) /* ty=(Tensor[(5, 12, 4), float64],) */;
  %719 = @func_1407() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) */;
  %720 = %719.0;
  %721 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 7, 7), float64] */, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %722 = shape_of(%720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%720, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %725 = %718.0;
  %726 = less(%723, %724) /* ty=Tensor[(6, 7, 7), bool] */;
  (%725, meta[relay.Constant][37] /* ty=Tensor[(240, 1), float64] */, %726)
}

def @func_3531() -> (Tensor[(9, 5, 10), float64],) {
  %727 = @func_2447() /* ty=(Tensor[(9, 5, 10), int8],) */;
  %728 = %727.0;
  %729 = cast(%728, dtype="float64") /* ty=Tensor[(9, 5, 10), float64] */;
  %730 = log10(%729) /* ty=Tensor[(9, 5, 10), float64] */;
  (%730,)
}

def @func_6748(%var_6744: int32) -> (Tensor[(1872), float32], int32, int32) {
  %731 = @func_2092() /* ty=(Tensor[(1872), float32],) */;
  %732 = cast(%var_6744, dtype="int32") /* ty=int32 */;
  %733 = reshape(%732, newshape=[]) /* ty=int32 */;
  %734 = @func_3669(%733) /* ty=(Tensor[(6, 7, 7), uint16], int32, int32, Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) */;
  %735 = %731.0;
  %736 = %734.2;
  (%735, %736, %var_6744)
}

def @func_4013(%var_3967: Tensor[(1872), float32], %var_4005: Tensor[(660, 1), uint16], %var_4007: Tensor[(144, 2), float32]) -> (Tensor[(1872), uint16], Tensor[(10, 1, 11), float32], Tensor[(1872), float32], Tensor[(13, 16, 9), float64], Tensor[(15, 4, 11), uint8], Tensor[(660, 1), uint16], Tensor[(240), float64], Tensor[(144, 2), float32], Tensor[(504), float64], Tensor[(1, 450), float64]) {
  %737 = @func_1205() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) */;
  %738 = %737.1;
  %739 = cast(%var_3967, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
  %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(1), int32] */;
  %741 = cast(%738, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %743 = @func_1537() /* ty=(Tensor[(10, 1, 11), float32],) */;
  %744 = cast(%var_3967, dtype="bool") /* ty=Tensor[(1872), bool] */;
  %745 = shape_of(%738, dtype="int32") /* ty=Tensor[(1), int32] */;
  %746 = cast(%738, dtype="bool") /* ty=Tensor[(1872), bool] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?), bool] */;
  %748 = logical_or(%746, %747) /* ty=Tensor[(1872), bool] */;
  %749 = cast(%748, dtype="float32") /* ty=Tensor[(1872), float32] */;
  %750 = cast(%var_3967, dtype="float32") /* ty=Tensor[(1872), float32] */;
  %751 = reshape(%750, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), float32] */;
  %752 = @func_79(%751) /* ty=(Tensor[(13, 16, 9), float64],) */;
  %753 = cast(%var_4005, dtype="uint16") /* ty=Tensor[(660, 1), uint16] */;
  %754 = cast(%var_4005, dtype="uint16") /* ty=Tensor[(660, 1), uint16] */;
  %755 = cast(%var_4005, dtype="uint16") /* ty=Tensor[(660, 1), uint16] */;
  %756 = cast(meta[relay.Constant][39] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %757 = cast(%var_4007, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
  %758 = cast(meta[relay.Constant][40] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %759 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 450), float64] */, dtype="float64") /* ty=Tensor[(1, 450), float64] */;
  %760 = reshape(%753, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
  %761 = reshape(%754, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
  %762 = reshape(%755, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
  %763 = reshape(%756, newshape=[120, 2]) /* ty=Tensor[(120, 2), float64] */;
  %764 = reshape(%757, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %765 = reshape(%758, newshape=[36, 14]) /* ty=Tensor[(36, 14), float64] */;
  %766 = reshape(%759, newshape=[5, 90]) /* ty=Tensor[(5, 90), float64] */;
  %767 = @func_2824(%760, %761, %762, %763, %764, %765, %766) /* ty=(Tensor[(15, 4, 11), uint16], Tensor[(6, 7, 7), bool], Tensor[(15, 4, 11), uint8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(5, 12, 4), float64], Tensor[(120, 2), float64], Tensor[(14, 9, 4), float64], Tensor[(288), float32], Tensor[(36, 14), float64], Tensor[(5, 90), int16], Tensor[(9, 5, 10), float32]) */;
  %768 = subtract(%741, %742) /* ty=Tensor[(1872), uint16] */;
  %769 = %743.0;
  %770 = cosh(%749) /* ty=Tensor[(1872), float32] */;
  %771 = %752.0;
  %772 = %767.2;
  (%768, %769, %770, %771, %772, %var_4005, meta[relay.Constant][39] /* ty=Tensor[(240), float64] */, %var_4007, meta[relay.Constant][40] /* ty=Tensor[(504), float64] */, meta[relay.Constant][41] /* ty=Tensor[(1, 450), float64] */)
}

def @func_5185() -> (Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64]) {
  %773 = @func_2447() /* ty=(Tensor[(9, 5, 10), int8],) */;
  %774 = @func_2715() /* ty=(Tensor[(6, 7, 7), bool],) */;
  %775 = @func_5124() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64]) */;
  %776 = %773.0;
  %777 = %774.0;
  %778 = @func_2609() /* ty=Tensor[(6, 7, 7), float64] */;
  %779 = %775.1;
  (%776, %777, %778, %779)
}

def @func_5526() -> Tensor[(6, 7, 7), float64] {
  @func_3598() /* ty=Tensor[(6, 7, 7), float64] */
}

def @func_5533() -> (Tensor[(240, ?), float32],) {
  %780 = @func_5003() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(240, ?), float32]) */;
  %781 = %780.1;
  (%781,)
}

def @func_6706(%var_6633: Tensor[(24), bool]) -> (Tensor[(9, 5, 10), float64], Tensor[(6, 9, 4), bool], Tensor[(24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), uint8]) {
  %782 = @func_5848() /* ty=(Tensor[(9, 5, 10), float64],) */;
  %783 = cast(%var_6633, dtype="bool") /* ty=Tensor[(24), bool] */;
  %784 = cast(meta[relay.Constant][42] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %785 = reshape(%783, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %786 = reshape(%784, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), bool] */;
  %787 = @func_2657(%785, %786) /* ty=(Tensor[(6, 9, 4), bool],) */;
  %788 = @func_5747() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), uint8], Tensor[(240, 12), uint32]) */;
  %789 = %782.0;
  %790 = %787.0;
  %791 = %788.1;
  (%789, %790, %var_6633, meta[relay.Constant][42] /* ty=Tensor[(216), bool] */, %791)
}

def @func_3104() -> (Tensor[(13, 16, 9), bool], Tensor[(6, 7, 7), uint16]) {
  %792 = @func_1205() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) */;
  %793 = %792.0;
  %794 = cast(meta[relay.Constant][43] /* ty=Tensor[(13, 16, 9), float64] */, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
  %795 = shape_of(%793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %796 = cast(%793, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %798 = @func_1792() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %799 = logical_or(%796, %797) /* ty=Tensor[(13, 16, 9), bool] */;
  %800 = %798.0;
  (%799, %800)
}

def @func_5820(%var_5812: Tensor[(13, 15, 2), float32]) -> (Tensor[(13, 15, 2), float32], Tensor[(6, 7, 7), uint16], Tensor[(1872, 1), float32]) {
  %801 = cast(%var_5812, dtype="float32") /* ty=Tensor[(13, 15, 2), float32] */;
  %802 = cast(meta[relay.Constant][44] /* ty=Tensor[(1872, 1), float32] */, dtype="float32") /* ty=Tensor[(1872, 1), float32] */;
  %803 = reshape(%802, newshape=[1872]) /* ty=Tensor[(1872), float32] */;
  %804 = @func_3244(%803) /* ty=(Tensor[(6, 7, 7), float32], Tensor[(1872), float64], Tensor[(240, ?), float32], Tensor[(6, 7, 7), uint16]) */;
  %805 = rsqrt(%801) /* ty=Tensor[(13, 15, 2), float32] */;
  %806 = %804.3;
  (%805, %806, meta[relay.Constant][44] /* ty=Tensor[(1872, 1), float32] */)
}

def @func_3669(%var_3629: int32) -> (Tensor[(6, 7, 7), uint16], int32, int32, Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) {
  %807 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %808 = cast(%var_3629, dtype="int32") /* ty=int32 */;
  %809 = reshape(%808, newshape=[]) /* ty=int32 */;
  %810 = @func_1897(%809) /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64], Tensor[(10, 8, 16), float64], int32, Tensor[(1280, 1), int32], Tensor[(504), float64]) */;
  %811 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %812 = @func_3118() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(6, 7, 7), bool]) */;
  %813 = @func_2506() /* ty=(Tensor[(13, 16, 9), int8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), bool]) */;
  %814 = %807.0;
  %815 = %810.3;
  %816 = %811.0;
  %817 = %812.1;
  %818 = %813.1;
  %819 = @func_2346() /* ty=Tensor[(6, 7, 7), float64] */;
  (%814, %815, %var_3629, %816, %817, %818, %819)
}

def @func_4389(%var_4357: Tensor[(20), float64]) -> (Tensor[(6, 7, 7), float64], Tensor[(20), float64], Tensor[(?, 2, 10), int32]) {
  %820 = cast(%var_4357, dtype="float64") /* ty=Tensor[(20), float64] */;
  %821 = reshape(%820, newshape=[1, 2, 10]) /* ty=Tensor[(1, 2, 10), float64] */;
  %822 = @func_1907(%821) /* ty=Tensor[(1, 2, 10), float64] */;
  %823 = cast(%822, dtype="float64") /* ty=Tensor[(1, 2, 10), float64] */;
  %824 = reshape(%823, newshape=[1, 2, 10]) /* ty=Tensor[(1, 2, 10), float64] */;
  %825 = @func_1907(%824) /* ty=Tensor[(1, 2, 10), float64] */;
  %826 = cast(%825, dtype="int32") /* ty=Tensor[(1, 2, 10), int32] */;
  %827 = shape_of(%822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %828 = cast(%822, dtype="int32") /* ty=Tensor[(1, 2, 10), int32] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %830 = @func_2346() /* ty=Tensor[(6, 7, 7), float64] */;
  %831 = maximum(%828, %829) /* ty=Tensor[(?, 2, 10), int32] */;
  (%830, %var_4357, %831)
}

def @func_2506() -> (Tensor[(13, 16, 9), int8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), bool]) {
  %832 = @func_2067() /* ty=(Tensor[(13, 16, 9), int8],) */;
  %833 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %834 = %833.0;
  %835 = cast(%834, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
  %836 = reshape(%835, newshape=[6, 7, 7]) /* ty=Tensor[(6, 7, 7), float64] */;
  %837 = @func_2461(%836) /* ty=(Tensor[(6, 7, 7), bool],) */;
  %838 = %832.0;
  %839 = %837.0;
  (%838, %834, %839)
}

def @func_1907(%var_1903: Tensor[(1, 2, 10), float64]) -> Tensor[(1, 2, 10), float64] {
  %840 = cast(4.4505f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %841 = cast(%var_1903, dtype="float64") /* ty=Tensor[(1, 2, 10), float64] */;
  subtract(%840, %841) /* ty=Tensor[(1, 2, 10), float64] */
}

def @func_4711() -> (Tensor[(6, 7, 7), float64],) {
  %842 = @func_2609() /* ty=Tensor[(6, 7, 7), float64] */;
  (%842,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5126() -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64]) {
  @func_5124() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64]) */
}

def @func_3751() -> (Tensor[(6, 7, 7), float64],) {
  @func_3749() /* ty=(Tensor[(6, 7, 7), float64],) */
}

def @func_3075() -> (Tensor[(240, 1), float64],) {
  %0 = @func_2323() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240, 1), float64], Tensor[(6, 7, 7), bool]) */;
  %1 = %0.1;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
  %3 = cosh(%2) /* ty=Tensor[(240, 1), float64] */;
  (%3,)
}

def @func_3106() -> (Tensor[(13, 16, 9), bool], Tensor[(6, 7, 7), uint16]) {
  @func_3104() /* ty=(Tensor[(13, 16, 9), bool], Tensor[(6, 7, 7), uint16]) */
}

def @func_3491(%var_3444: Tensor[(6, 7, 7), bool], %var_3468: Tensor[(288), float32], %var_3469: Tensor[(504), float64], %var_3470: Tensor[(450), float64]) -> (Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), bool], Tensor[(5, 132), uint16], Tensor[(240), float64], Tensor[(288), float32], Tensor[(504), float64], Tensor[(450), float64], Tensor[(6, 7, 7), bool]) {
  %4 = @func_2634() /* ty=(Tensor[(6, 7, 7), bool],) */;
  %5 = %4.0;
  %6 = cast(%var_3444, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%5, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %10 = cast(%var_3444, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 132), uint16] */, dtype="uint16") /* ty=Tensor[(5, 132), uint16] */;
  %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 132), uint16] */, dtype="uint16") /* ty=Tensor[(5, 132), uint16] */;
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 132), uint16] */, dtype="uint16") /* ty=Tensor[(5, 132), uint16] */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %15 = cast(%var_3468, dtype="float32") /* ty=Tensor[(288), float32] */;
  %16 = cast(%var_3469, dtype="float64") /* ty=Tensor[(504), float64] */;
  %17 = cast(%var_3470, dtype="float64") /* ty=Tensor[(450), float64] */;
  %18 = reshape(%11, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
  %19 = reshape(%12, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
  %20 = reshape(%13, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
  %21 = reshape(%14, newshape=[120, 2]) /* ty=Tensor[(120, 2), float64] */;
  %22 = reshape(%15, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %23 = reshape(%16, newshape=[36, 14]) /* ty=Tensor[(36, 14), float64] */;
  %24 = reshape(%17, newshape=[5, 90]) /* ty=Tensor[(5, 90), float64] */;
  %25 = @func_2824(%18, %19, %20, %21, %22, %23, %24) /* ty=(Tensor[(15, 4, 11), uint16], Tensor[(6, 7, 7), bool], Tensor[(15, 4, 11), uint8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(5, 12, 4), float64], Tensor[(120, 2), float64], Tensor[(14, 9, 4), float64], Tensor[(288), float32], Tensor[(36, 14), float64], Tensor[(5, 90), int16], Tensor[(9, 5, 10), float32]) */;
  %26 = @func_2634() /* ty=(Tensor[(6, 7, 7), bool],) */;
  %27 = logical_and(%8, %9) /* ty=Tensor[(6, 7, 7), bool] */;
  %28 = rsqrt(%10) /* ty=Tensor[(6, 7, 7), float64] */;
  %29 = %25.1;
  %30 = %26.0;
  (%27, %28, %29, meta[relay.Constant][0] /* ty=Tensor[(5, 132), uint16] */, meta[relay.Constant][1] /* ty=Tensor[(240), float64] */, %var_3468, %var_3469, %var_3470, %30)
}

def @func_4315() -> (Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 9, 4), bool], Tensor[(1, 24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), float64], Tensor[(1872), float64]) {
  @func_4313() /* ty=(Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 9, 4), bool], Tensor[(1, 24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), float64], Tensor[(1872), float64]) */
}

def @func_5712(%var_5711: Tensor[(2, 320), float64]) -> (Tensor[(6, 7, 7), uint16], Tensor[(8, 8, 10), float32], Tensor[(80), float64], Tensor[(2, 320), float64]) {
  %39 = fn (%var_5705: Tensor[(2, 320), float64]) -> (Tensor[(6, 7, 7), uint16], Tensor[(8, 8, 10), float32], Tensor[(80), float64], Tensor[(2, 320), float64]) {
    %31 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
    %32 = cast(meta[relay.Constant][2] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
    %33 = cast(%var_5705, dtype="float64") /* ty=Tensor[(2, 320), float64] */;
    %34 = reshape(%32, newshape=[1, 8, 10]) /* ty=Tensor[(1, 8, 10), float64] */;
    %35 = reshape(%33, newshape=[8, 8, 10]) /* ty=Tensor[(8, 8, 10), float64] */;
    %36 = @func_5049(%34, %35) /* ty=(Tensor[(8, 8, 10), bool], Tensor[(8, 8, 10), float32]) */;
    %37 = %31.0;
    %38 = %36.1;
    (%37, %38, meta[relay.Constant][2] /* ty=Tensor[(80), float64] */, %var_5705)
  };
  %39(%var_5711) /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(8, 8, 10), float32], Tensor[(80), float64], Tensor[(2, 320), float64]) */
}

def @func_4713() -> (Tensor[(6, 7, 7), float64],) {
  @func_4711() /* ty=(Tensor[(6, 7, 7), float64],) */
}

def @func_5482(%var_5481: uint16) -> Tensor[(2, 1, 6), uint16] {
  %42 = fn (%var_5472: uint16) -> Tensor[(2, 1, 6), uint16] {
    %40 = cast(%var_5472, dtype="uint16") /* ty=uint16 */;
    %41 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 1, 6), uint16] */, dtype="uint16") /* ty=Tensor[(2, 1, 6), uint16] */;
    bitwise_xor(%40, %41) /* ty=Tensor[(2, 1, 6), uint16] */
  };
  %42(%var_5481) /* ty=Tensor[(2, 1, 6), uint16] */
}

def @func_453(%var_410: Tensor[(9, 5, 10), float64], %var_440: Tensor[(9, 5, 10), float64]) -> (Tensor[(9, 5, 10), float64], Tensor[(9, 5, 10), int8]) {
  %43 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(9, 5, 10), float64] */;
  %44 = shape_of(%var_410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%var_410, dtype="float64") /* ty=Tensor[(9, 5, 10), float64] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %47 = cast(%var_410, dtype="float64") /* ty=Tensor[(9, 5, 10), float64] */;
  %48 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(9, 5, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(9, 5, 10), float64] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %51 = power(%49, %50) /* ty=Tensor[(9, 5, 10), float64] */;
  %52 = cast(%var_440, dtype="int8") /* ty=Tensor[(9, 5, 10), int8] */;
  %53 = shape_of(%51, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%51, dtype="int8") /* ty=Tensor[(9, 5, 10), int8] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %56 = multiply(%45, %46) /* ty=Tensor[(9, 5, 10), float64] */;
  %57 = logical_xor(%54, %55) /* ty=Tensor[(9, 5, 10), int8] */;
  (%56, %57)
}

def @func_3531() -> (Tensor[(9, 5, 10), float64],) {
  %58 = @func_2447() /* ty=(Tensor[(9, 5, 10), int8],) */;
  %59 = %58.0;
  %60 = cast(%59, dtype="float64") /* ty=Tensor[(9, 5, 10), float64] */;
  %61 = log10(%60) /* ty=Tensor[(9, 5, 10), float64] */;
  (%61,)
}

def @func_5762() -> (Tensor[(6, 7, 7), uint16],) {
  %62 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %63 = %62.0;
  (%63,)
}

def @func_2716() -> (Tensor[(6, 7, 7), bool],) {
  %66 = fn () -> (Tensor[(6, 7, 7), bool],) {
    %64 = @func_2634() /* ty=(Tensor[(6, 7, 7), bool],) */;
    %65 = %64.0;
    (%65,)
  };
  %66() /* ty=(Tensor[(6, 7, 7), bool],) */
}

def @func_3556() -> (Tensor[(1872), float64],) {
  %67 = @func_2092() /* ty=(Tensor[(1872), float32],) */;
  %68 = %67.0;
  %69 = cast(%68, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %70 = erf(%69) /* ty=Tensor[(1872), float64] */;
  (%70,)
}

def @func_4569() -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) {
  %80 = fn () -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) {
    %71 = @func_1798() /* ty=(Tensor[(6, 7, 7), float64],) */;
    %72 = @func_3054() /* ty=Tensor[(6, 7, 7), float64] */;
    %73 = cast(%72, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
    %74 = acosh(%73) /* ty=Tensor[(6, 7, 7), float32] */;
    %75 = cast(%74, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
    %76 = sigmoid(%75) /* ty=Tensor[(6, 7, 7), float32] */;
    %77 = cast(%76, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
    %78 = %71.0;
    %79 = atanh(%77) /* ty=Tensor[(6, 7, 7), float32] */;
    (%78, %79)
  };
  %80() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) */
}

def @func_5451() -> (Tensor[(6, 7, 7), float64],) {
  @func_5449() /* ty=(Tensor[(6, 7, 7), float64],) */
}

def @func_3119() -> (Tensor[(13, 16, 9), float64], Tensor[(6, 7, 7), bool]) {
  %85 = fn () -> (Tensor[(13, 16, 9), float64], Tensor[(6, 7, 7), bool]) {
    %81 = @func_1205() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) */;
    %82 = @func_2715() /* ty=(Tensor[(6, 7, 7), bool],) */;
    %83 = %81.0;
    %84 = %82.0;
    (%83, %84)
  };
  %85() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(6, 7, 7), bool]) */
}

def @func_2347() -> Tensor[(6, 7, 7), float64] {
  %87 = fn () -> Tensor[(6, 7, 7), float64] {
    %86 = @func_1140() /* ty=(Tensor[(6, 7, 7), float64],) */;
    %86.0
  };
  %87() /* ty=Tensor[(6, 7, 7), float64] */
}

def @func_3046() -> (Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) {
  %88 = @func_1792() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %89 = @func_1071() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %90 = %88.0;
  %91 = %89.0;
  (%90, %91)
}

def @func_2660(%var_2658: Tensor[(6, 1, 4), bool], %var_2659: Tensor[(6, 9, 4), bool]) -> (Tensor[(6, 9, 4), bool],) {
  %95 = fn (%var_2647: Tensor[(6, 1, 4), bool], %var_2648: Tensor[(6, 9, 4), bool]) -> (Tensor[(6, 9, 4), bool],) {
    %92 = cast(%var_2647, dtype="bool") /* ty=Tensor[(6, 1, 4), bool] */;
    %93 = cast(%var_2648, dtype="bool") /* ty=Tensor[(6, 9, 4), bool] */;
    %94 = logical_and(%92, %93) /* ty=Tensor[(6, 9, 4), bool] */;
    (%94,)
  };
  %95(%var_2658, %var_2659) /* ty=(Tensor[(6, 9, 4), bool],) */
}

def @func_1280() -> (Tensor[(6, 7, 7), float64], Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), float64], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(6, 7, 7), float64], Tensor[(5, 90), float64]) {
  %96 = @func_1140() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %97 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 90), float64] */, dtype="float64") /* ty=Tensor[(5, 90), float64] */;
  %98 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 90), float64] */, dtype="float64") /* ty=Tensor[(5, 90), float64] */;
  %99 = reshape(%97, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
  %100 = reshape(%98, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
  %101 = @func_453(%99, %100) /* ty=(Tensor[(9, 5, 10), float64], Tensor[(9, 5, 10), int8]) */;
  %102 = @func_1071() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %103 = cast(meta[relay.Constant][6] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %104 = cast(meta[relay.Constant][6] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %105 = reshape(%103, newshape=[14, 9, 4]) /* ty=Tensor[(14, 9, 4), float64] */;
  %106 = reshape(%104, newshape=[14, 9, 4]) /* ty=Tensor[(14, 9, 4), float64] */;
  %107 = @func_1071() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %108 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 90), float64] */, dtype="float64") /* ty=Tensor[(5, 90), float64] */;
  %109 = %96.0;
  %110 = %101.1;
  %111 = %102.0;
  %112 = @func_510(%105, %106) /* ty=Tensor[(14, 9, 4), float64] */;
  %113 = %107.0;
  %114 = atan(%108) /* ty=Tensor[(5, 90), float64] */;
  (%109, %110, %111, %112, meta[relay.Constant][6] /* ty=Tensor[(504), float64] */, %113, %114)
}

def @func_2323() -> (Tensor[(5, 12, 4), float64], Tensor[(240, 1), float64], Tensor[(6, 7, 7), bool]) {
  %115 = cast(meta[relay.Constant][7] /* ty=Tensor[(240, 1), float64] */, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
  %116 = reshape(%115, newshape=[5, 12, 4]) /* ty=Tensor[(5, 12, 4), float64] */;
  %117 = @func_1570(%116) /* ty=(Tensor[(5, 12, 4), float64],) */;
  %118 = @func_1407() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) */;
  %119 = %118.0;
  %120 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 7, 7), float64] */, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %121 = shape_of(%119, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%119, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %124 = %117.0;
  %125 = less(%122, %123) /* ty=Tensor[(6, 7, 7), bool] */;
  (%124, meta[relay.Constant][7] /* ty=Tensor[(240, 1), float64] */, %125)
}

def @func_3885(%var_3874: Tensor[(6, 7, 7), bool]) -> (Tensor[(6, 7, 7), float32], Tensor[(1872), float64]) {
  %126 = @func_2715() /* ty=(Tensor[(6, 7, 7), bool],) */;
  %127 = %126.0;
  %128 = cast(%var_3874, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %129 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%127, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %132 = @func_3556() /* ty=(Tensor[(1872), float64],) */;
  %133 = power(%130, %131) /* ty=Tensor[(6, 7, 7), float32] */;
  %134 = %132.0;
  (%133, %134)
}

def @func_5982() -> (Tensor[(6, 7, 7), bool],) {
  @func_5980() /* ty=(Tensor[(6, 7, 7), bool],) */
}

def @func_5285() -> Tensor[(6, 7, 7), float64] {
  @func_3054() /* ty=Tensor[(6, 7, 7), float64] */
}

def @func_4930() -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), bool]) {
  @func_4928() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), bool]) */
}

def @func_3246(%var_3245: Tensor[(1872), float32]) -> (Tensor[(6, 7, 7), float32], Tensor[(1872), float64], Tensor[(240, ?), float32], Tensor[(6, 7, 7), uint16]) {
  %148 = fn (%var_3225: Tensor[(1872), float32]) -> (Tensor[(6, 7, 7), float32], Tensor[(1872), float64], Tensor[(240, ?), float32], Tensor[(6, 7, 7), uint16]) {
    %135 = @func_2265() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) */;
    %136 = @func_1407() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) */;
    %137 = %136.2;
    %138 = cast(%var_3225, dtype="float64") /* ty=Tensor[(1872), float64] */;
    %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(1), int32] */;
    %140 = cast(%137, dtype="float64") /* ty=Tensor[(1872), float64] */;
    %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?), float64] */;
    %142 = @func_3017() /* ty=(Tensor[(240, ?), uint64], Tensor[(6, 7, 7), float64], Tensor[(240, ?), float32]) */;
    %143 = @func_2506() /* ty=(Tensor[(13, 16, 9), int8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), bool]) */;
    %144 = %135.1;
    %145 = power(%140, %141) /* ty=Tensor[(1872), float64] */;
    %146 = %142.2;
    %147 = %143.1;
    (%144, %145, %146, %147)
  };
  %148(%var_3245) /* ty=(Tensor[(6, 7, 7), float32], Tensor[(1872), float64], Tensor[(240, ?), float32], Tensor[(6, 7, 7), uint16]) */
}

def @func_5807() -> (Tensor[(6, 7, 7), float64], Tensor[(10, 14, 11), float64], Tensor[(450, 1), float64], Tensor[(1540), float32], Tensor[(6, 7, 7), bool]) {
  %149 = @func_5449() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %150 = cast(meta[relay.Constant][9] /* ty=Tensor[(450, 1), float64] */, dtype="float64") /* ty=Tensor[(450, 1), float64] */;
  %151 = cast(meta[relay.Constant][10] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %152 = reshape(%150, newshape=[450]) /* ty=Tensor[(450), float64] */;
  %153 = reshape(%151, newshape=[1540]) /* ty=Tensor[(1540), float32] */;
  %154 = @func_5429(%152, %153) /* ty=(Tensor[(13, 16, 9), float64], Tensor[(6, 7, 7), float64], Tensor[(294), float32], Tensor[(9, 5, 10), bool], Tensor[(10, 14, 11), float64], Tensor[(1540), float32], int32, int32) */;
  %155 = @func_3734() /* ty=(Tensor[(6, 7, 7), bool], Tensor[(1872), float64]) */;
  %156 = %149.0;
  %157 = %154.4;
  %158 = %155.0;
  (%156, %157, meta[relay.Constant][9] /* ty=Tensor[(450, 1), float64] */, meta[relay.Constant][10] /* ty=Tensor[(1540), float32] */, %158)
}

def @func_2758(%var_2756: uint64, %var_2757: Tensor[(4, 8, 10), uint64]) -> (Tensor[(4, 8, 10), bool], Tensor[(4, 8, 10), float32]) {
  @func_2754(%var_2756, %var_2757) /* ty=(Tensor[(4, 8, 10), bool], Tensor[(4, 8, 10), float32]) */
}

def @func_5534() -> (Tensor[(240, ?), float32],) {
  %161 = fn () -> (Tensor[(240, ?), float32],) {
    %159 = @func_5003() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(240, ?), float32]) */;
    %160 = %159.1;
    (%160,)
  };
  %161() /* ty=(Tensor[(240, ?), float32],) */
}

def @func_7125(%var_7123: Tensor[(12, 3, 10), float64]) -> (Tensor[(6, 7, 7), float64], Tensor[(1176), float64], Tensor[(12, 3, 10), bool], Tensor[(7, 12, 14), float32]) {
  @func_7122(%var_7123) /* ty=(Tensor[(6, 7, 7), float64], Tensor[(1176), float64], Tensor[(12, 3, 10), bool], Tensor[(7, 12, 14), float32]) */
}

def @func_6227(%var_6226: Tensor[(14, 12, 15), float64]) -> Tensor[(14, 12, 15), float64] {
  %163 = fn (%var_6218: Tensor[(14, 12, 15), float64]) -> Tensor[(14, 12, 15), float64] {
    %162 = cast(%var_6218, dtype="float64") /* ty=Tensor[(14, 12, 15), float64] */;
    log2(%162) /* ty=Tensor[(14, 12, 15), float64] */
  };
  %163(%var_6226) /* ty=Tensor[(14, 12, 15), float64] */
}

def @func_2506() -> (Tensor[(13, 16, 9), int8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), bool]) {
  %164 = @func_2067() /* ty=(Tensor[(13, 16, 9), int8],) */;
  %165 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %166 = %165.0;
  %167 = cast(%166, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
  %168 = reshape(%167, newshape=[6, 7, 7]) /* ty=Tensor[(6, 7, 7), float64] */;
  %169 = @func_2461(%168) /* ty=(Tensor[(6, 7, 7), bool],) */;
  %170 = %164.0;
  %171 = %169.0;
  (%170, %166, %171)
}

def @func_1108(%var_1077: Tensor[(12, 8, 3), float32], %var_1081: Tensor[(504), float64]) -> (Tensor[(12, 8, 3), float32], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(9, 5, 10), int8], Tensor[(450), float64]) {
  %172 = cast(%var_1077, dtype="float32") /* ty=Tensor[(12, 8, 3), float32] */;
  %173 = cast(%var_1081, dtype="float64") /* ty=Tensor[(504), float64] */;
  %174 = cast(%var_1081, dtype="float64") /* ty=Tensor[(504), float64] */;
  %175 = reshape(%173, newshape=[14, 9, 4]) /* ty=Tensor[(14, 9, 4), float64] */;
  %176 = reshape(%174, newshape=[14, 9, 4]) /* ty=Tensor[(14, 9, 4), float64] */;
  %177 = cast(meta[relay.Constant][11] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %178 = cast(meta[relay.Constant][11] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %179 = reshape(%177, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
  %180 = reshape(%178, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
  %181 = @func_453(%179, %180) /* ty=(Tensor[(9, 5, 10), float64], Tensor[(9, 5, 10), int8]) */;
  %182 = acosh(%172) /* ty=Tensor[(12, 8, 3), float32] */;
  %183 = @func_510(%175, %176) /* ty=Tensor[(14, 9, 4), float64] */;
  %184 = %181.1;
  (%182, %183, %var_1081, %184, meta[relay.Constant][11] /* ty=Tensor[(450), float64] */)
}

def @func_2266() -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) {
  %194 = fn () -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) {
    %185 = @func_1311() /* ty=(Tensor[(6, 7, 7), float64],) */;
    %186 = %185.0;
    %187 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 7, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
    %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
    %189 = cast(%186, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
    %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %191 = cast(%186, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
    %192 = multiply(%189, %190) /* ty=Tensor[(6, 7, 7), float64] */;
    %193 = atan(%191) /* ty=Tensor[(6, 7, 7), float32] */;
    (%192, %193)
  };
  %194() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) */
}

def @func_2832(%var_2825: Tensor[(15, 4, 11), uint16], %var_2826: Tensor[(15, 4, 11), uint16], %var_2827: Tensor[(15, 4, 11), uint16], %var_2828: Tensor[(120, 2), float64], %var_2829: Tensor[(288), float32], %var_2830: Tensor[(36, 14), float64], %var_2831: Tensor[(5, 90), float64]) -> (Tensor[(15, 4, 11), uint16], Tensor[(6, 7, 7), bool], Tensor[(15, 4, 11), uint8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(5, 12, 4), float64], Tensor[(120, 2), float64], Tensor[(14, 9, 4), float64], Tensor[(288), float32], Tensor[(36, 14), float64], Tensor[(5, 90), int16], Tensor[(9, 5, 10), float32]) {
  %234 = fn (%var_2760: Tensor[(15, 4, 11), uint16], %var_2761: Tensor[(15, 4, 11), uint16], %var_2788: Tensor[(15, 4, 11), uint16], %var_2803: Tensor[(120, 2), float64], %var_2809: Tensor[(288), float32], %var_2810: Tensor[(36, 14), float64], %var_2816: Tensor[(5, 90), float64]) -> (Tensor[(15, 4, 11), uint16], Tensor[(6, 7, 7), bool], Tensor[(15, 4, 11), uint8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(5, 12, 4), float64], Tensor[(120, 2), float64], Tensor[(14, 9, 4), float64], Tensor[(288), float32], Tensor[(36, 14), float64], Tensor[(5, 90), int16], Tensor[(9, 5, 10), float32]) {
    %195 = cast(%var_2761, dtype="uint16") /* ty=Tensor[(15, 4, 11), uint16] */;
    %196 = shape_of(%var_2760, dtype="int32") /* ty=Tensor[(3), int32] */;
    %197 = cast(%var_2760, dtype="uint16") /* ty=Tensor[(15, 4, 11), uint16] */;
    %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %199 = @func_2634() /* ty=(Tensor[(6, 7, 7), bool],) */;
    %200 = cast(%var_2788, dtype="uint8") /* ty=Tensor[(15, 4, 11), uint8] */;
    %201 = shape_of(%var_2760, dtype="int32") /* ty=Tensor[(3), int32] */;
    %202 = cast(%var_2760, dtype="uint8") /* ty=Tensor[(15, 4, 11), uint8] */;
    %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %204 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
    %205 = @func_2265() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) */;
    %206 = cast(%var_2803, dtype="float64") /* ty=Tensor[(120, 2), float64] */;
    %207 = reshape(%206, newshape=[5, 12, 4]) /* ty=Tensor[(5, 12, 4), float64] */;
    %208 = @func_1570(%207) /* ty=(Tensor[(5, 12, 4), float64],) */;
    %209 = cast(%var_2809, dtype="float32") /* ty=Tensor[(288), float32] */;
    %210 = cast(%var_2810, dtype="float64") /* ty=Tensor[(36, 14), float64] */;
    %211 = reshape(%209, newshape=[12, 8, 3]) /* ty=Tensor[(12, 8, 3), float32] */;
    %212 = reshape(%210, newshape=[504]) /* ty=Tensor[(504), float64] */;
    %213 = @func_1108(%211, %212) /* ty=(Tensor[(12, 8, 3), float32], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(9, 5, 10), int8], Tensor[(450), float64]) */;
    %214 = cast(%var_2816, dtype="int16") /* ty=Tensor[(5, 90), int16] */;
    %215 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(5, 90), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %216 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 90), float64] */, dtype="int16") /* ty=Tensor[(5, 90), int16] */;
    %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %218 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 90), float64] */, dtype="float64") /* ty=Tensor[(5, 90), float64] */;
    %219 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 90), float64] */, dtype="float64") /* ty=Tensor[(5, 90), float64] */;
    %220 = reshape(%218, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
    %221 = reshape(%219, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
    %222 = @func_453(%220, %221) /* ty=(Tensor[(9, 5, 10), float64], Tensor[(9, 5, 10), int8]) */;
    %223 = %222.1;
    %224 = cast(%223, dtype="float32") /* ty=Tensor[(9, 5, 10), float32] */;
    %225 = right_shift(%197, %198) /* ty=Tensor[(15, 4, 11), uint16] */;
    %226 = %199.0;
    %227 = minimum(%202, %203) /* ty=Tensor[(15, 4, 11), uint8] */;
    %228 = %204.0;
    %229 = %205.0;
    %230 = %208.0;
    %231 = %213.1;
    %232 = right_shift(%216, %217) /* ty=Tensor[(5, 90), int16] */;
    %233 = erf(%224) /* ty=Tensor[(9, 5, 10), float32] */;
    (%225, %226, %227, %228, %229, %230, %var_2803, %231, %var_2809, %var_2810, %232, %233)
  };
  %234(%var_2825, %var_2826, %var_2827, %var_2828, %var_2829, %var_2830, %var_2831) /* ty=(Tensor[(15, 4, 11), uint16], Tensor[(6, 7, 7), bool], Tensor[(15, 4, 11), uint8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(5, 12, 4), float64], Tensor[(120, 2), float64], Tensor[(14, 9, 4), float64], Tensor[(288), float32], Tensor[(36, 14), float64], Tensor[(5, 90), int16], Tensor[(9, 5, 10), float32]) */
}

def @func_1071() -> (Tensor[(6, 7, 7), float64],) {
  %235 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 7, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
  %236 = asin(%235) /* ty=Tensor[(6, 7, 7), float64] */;
  (%236,)
}

def @func_3672(%var_3670: int32) -> (Tensor[(6, 7, 7), uint16], int32, int32, Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) {
  @func_3669(%var_3670) /* ty=(Tensor[(6, 7, 7), uint16], int32, int32, Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) */
}

def @func_5958() -> Tensor[(1, 24), bool] {
  @func_5956() /* ty=Tensor[(1, 24), bool] */
}

def @func_5848() -> (Tensor[(9, 5, 10), float64],) {
  %237 = @func_3531() /* ty=(Tensor[(9, 5, 10), float64],) */;
  %238 = %237.0;
  (%238,)
}

def @func_6924(%var_6922: Tensor[(15, 6, 12), bool], %var_6923: Tensor[(216), bool]) -> (Tensor[(15, 6, 12), bool], Tensor[(6, 9, 4), bool], Tensor[(24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), float64]) {
  @func_6920(%var_6922, %var_6923) /* ty=(Tensor[(15, 6, 12), bool], Tensor[(6, 9, 4), bool], Tensor[(24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), float64]) */
}

def @func_5052(%var_5050: Tensor[(1, 8, 10), float64], %var_5051: Tensor[(8, 8, 10), float64]) -> (Tensor[(8, 8, 10), bool], Tensor[(8, 8, 10), float32]) {
  %244 = fn (%var_5037: Tensor[(1, 8, 10), float64], %var_5038: Tensor[(8, 8, 10), float64]) -> (Tensor[(8, 8, 10), bool], Tensor[(8, 8, 10), float32]) {
    %239 = cast(%var_5037, dtype="bool") /* ty=Tensor[(1, 8, 10), bool] */;
    %240 = cast(%var_5038, dtype="bool") /* ty=Tensor[(8, 8, 10), bool] */;
    %241 = cast(%var_5038, dtype="float32") /* ty=Tensor[(8, 8, 10), float32] */;
    %242 = not_equal(%239, %240) /* ty=Tensor[(8, 8, 10), bool] */;
    %243 = log10(%241) /* ty=Tensor[(8, 8, 10), float32] */;
    (%242, %243)
  };
  %244(%var_5050, %var_5051) /* ty=(Tensor[(8, 8, 10), bool], Tensor[(8, 8, 10), float32]) */
}

def @func_6388(%var_6386: Tensor[(12, 2), bool], %var_6387: Tensor[(216), bool]) -> (Tensor[(6, 7, 7), float64], Tensor[(1872), float32], Tensor[(6, 9, 4), bool], Tensor[(12, 2), bool], Tensor[(216), bool]) {
  @func_6384(%var_6386, %var_6387) /* ty=(Tensor[(6, 7, 7), float64], Tensor[(1872), float32], Tensor[(6, 9, 4), bool], Tensor[(12, 2), bool], Tensor[(216), bool]) */
}

def @func_5449() -> (Tensor[(6, 7, 7), float64],) {
  %245 = @func_1071() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %246 = %245.0;
  (%246,)
}

def @func_5379(%var_5377: Tensor[(7, 5, 6), float64], %var_5378: Tensor[(7, 5, 6), float64]) -> Tensor[(7, 5, 6), float64] {
  %251 = fn (%var_5365: Tensor[(7, 5, 6), float64], %var_5366: Tensor[(7, 5, 6), float64]) -> Tensor[(7, 5, 6), float64] {
    %247 = cast(%var_5366, dtype="float64") /* ty=Tensor[(7, 5, 6), float64] */;
    %248 = shape_of(%var_5365, dtype="int32") /* ty=Tensor[(3), int32] */;
    %249 = cast(%var_5365, dtype="float64") /* ty=Tensor[(7, 5, 6), float64] */;
    %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%249, %250) /* ty=Tensor[(7, 5, 6), float64] */
  };
  %251(%var_5377, %var_5378) /* ty=Tensor[(7, 5, 6), float64] */
}

def @func_2414() -> (Tensor[(6, 7, 7), float64],) {
  %254 = fn () -> (Tensor[(6, 7, 7), float64],) {
    %252 = @func_1311() /* ty=(Tensor[(6, 7, 7), float64],) */;
    %253 = %252.0;
    (%253,)
  };
  %254() /* ty=(Tensor[(6, 7, 7), float64],) */
}

def @func_7272() -> Tensor[(1, 24), bool] {
  %255 = fn () -> Tensor[(1, 24), bool] {
    @func_5956() /* ty=Tensor[(1, 24), bool] */
  };
  %255() /* ty=Tensor[(1, 24), bool] */
}

def @func_3946() -> (Tensor[(10, 1, 11), float32], Tensor[(6, 7, 7), float64]) {
  @func_3944() /* ty=(Tensor[(10, 1, 11), float32], Tensor[(6, 7, 7), float64]) */
}

def @func_1506(%var_1494: Tensor[(6, 7, 7), float64]) -> (Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float32]) {
  %256 = @func_1311() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %257 = %256.0;
  %258 = cast(%var_1494, dtype="uint16") /* ty=Tensor[(6, 7, 7), uint16] */;
  %259 = shape_of(%257, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%257, dtype="uint16") /* ty=Tensor[(6, 7, 7), uint16] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %262 = cast(%var_1494, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %263 = left_shift(%260, %261) /* ty=Tensor[(6, 7, 7), uint16] */;
  %264 = tan(%262) /* ty=Tensor[(6, 7, 7), float32] */;
  (%263, %264)
}

def @func_6777() -> (Tensor[(6, 7, 7), uint16],) {
  @func_6775() /* ty=(Tensor[(6, 7, 7), uint16],) */
}

def @func_7122(%var_7047: Tensor[(12, 3, 10), float64]) -> (Tensor[(6, 7, 7), float64], Tensor[(1176), float64], Tensor[(12, 3, 10), bool], Tensor[(7, 12, 14), float32]) {
  %265 = @func_1140() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %266 = cast(%var_7047, dtype="float64") /* ty=Tensor[(12, 3, 10), float64] */;
  %267 = asinh(%266) /* ty=Tensor[(12, 3, 10), float64] */;
  %268 = cast(%267, dtype="float32") /* ty=Tensor[(12, 3, 10), float32] */;
  %269 = log(%268) /* ty=Tensor[(12, 3, 10), float32] */;
  %270 = cast(%267, dtype="float32") /* ty=Tensor[(12, 3, 10), float32] */;
  %271 = sqrt(%270) /* ty=Tensor[(12, 3, 10), float32] */;
  %272 = cast(%271, dtype="bool") /* ty=Tensor[(12, 3, 10), bool] */;
  %273 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%269, dtype="bool") /* ty=Tensor[(12, 3, 10), bool] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %276 = cast(meta[relay.Constant][15] /* ty=Tensor[(1176), float64] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %277 = reshape(%276, newshape=[7, 12, 14]) /* ty=Tensor[(7, 12, 14), float64] */;
  %278 = @func_6290(%277) /* ty=(Tensor[(7, 12, 14), int32],) */;
  %279 = %278.0;
  %280 = cast(%279, dtype="float32") /* ty=Tensor[(7, 12, 14), float32] */;
  %281 = %265.0;
  %282 = greater(%274, %275) /* ty=Tensor[(12, 3, 10), bool] */;
  %283 = rsqrt(%280) /* ty=Tensor[(7, 12, 14), float32] */;
  (%281, meta[relay.Constant][15] /* ty=Tensor[(1176), float64] */, %282, %283)
}

def @func_3315(%var_3296: Tensor[(6, 7, 7), float64]) -> (Tensor[(6, 7, 7), bool], Tensor[(240, 1), float64]) {
  %284 = @func_2346() /* ty=Tensor[(6, 7, 7), float64] */;
  %285 = cast(%var_3296, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %286 = shape_of(%284, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(%284, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %289 = @func_2323() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240, 1), float64], Tensor[(6, 7, 7), bool]) */;
  %290 = less_equal(%287, %288) /* ty=Tensor[(6, 7, 7), bool] */;
  %291 = %289.1;
  (%290, %291)
}

def @func_6619() -> (Tensor[(9, 1, 16), uint8], Tensor[(10, 1, 11), float32]) {
  @func_6617() /* ty=(Tensor[(9, 1, 16), uint8], Tensor[(10, 1, 11), float32]) */
}

def @func_5186() -> (Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64]) {
  %299 = fn () -> (Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64]) {
    %292 = @func_2447() /* ty=(Tensor[(9, 5, 10), int8],) */;
    %293 = @func_2715() /* ty=(Tensor[(6, 7, 7), bool],) */;
    %294 = @func_5124() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64]) */;
    %295 = %292.0;
    %296 = %293.0;
    %297 = @func_2609() /* ty=Tensor[(6, 7, 7), float64] */;
    %298 = %294.1;
    (%295, %296, %297, %298)
  };
  %299() /* ty=(Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64]) */
}

def @func_7263() -> Tensor[(6, 7, 7), bool] {
  %301 = fn () -> Tensor[(6, 7, 7), bool] {
    %300 = @func_2715() /* ty=(Tensor[(6, 7, 7), bool],) */;
    %300.0
  };
  %301() /* ty=Tensor[(6, 7, 7), bool] */
}

def @func_5956() -> Tensor[(1, 24), bool] {
  %302 = @func_4313() /* ty=(Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 9, 4), bool], Tensor[(1, 24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), float64], Tensor[(1872), float64]) */;
  %302.3
}

def @func_7153(%var_7152: Tensor[(13, 16, 9), int8]) -> (Tensor[(13, 16, 9), bool], Tensor[(13, 16, 9), bool]) {
  %315 = fn (%var_7139: Tensor[(13, 16, 9), int8]) -> (Tensor[(13, 16, 9), bool], Tensor[(13, 16, 9), bool]) {
    %303 = @func_5244() /* ty=(Tensor[(240, 11), int8], Tensor[(13, 16, 9), int8]) */;
    %304 = %303.1;
    %305 = cast(%var_7139, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
    %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
    %307 = cast(%304, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
    %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %309 = cast(%var_7139, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
    %310 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
    %311 = cast(%304, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
    %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %313 = greater_equal(%307, %308) /* ty=Tensor[(13, 16, 9), bool] */;
    %314 = not_equal(%311, %312) /* ty=Tensor[(13, 16, 9), bool] */;
    (%313, %314)
  };
  %315(%var_7152) /* ty=(Tensor[(13, 16, 9), bool], Tensor[(13, 16, 9), bool]) */
}

def @func_4239(%var_4236: Tensor[(660), uint16], %var_4237: Tensor[(288), float32], %var_4238: Tensor[(36, 14), float64]) -> (Tensor[(6, 7, 7), uint16], Tensor[(5, 12, 4), float64], Tensor[(660), uint16], Tensor[(24, 10), float64], Tensor[(288), float32], Tensor[(36, 14), float64], Tensor[(450), float64], Tensor[(6, 7, 7), float64], Tensor[(10, 1, 11), float32]) {
  %337 = fn (%var_4202: Tensor[(660), uint16], %var_4204: Tensor[(288), float32], %var_4205: Tensor[(36, 14), float64]) -> (Tensor[(6, 7, 7), uint16], Tensor[(5, 12, 4), float64], Tensor[(660), uint16], Tensor[(24, 10), float64], Tensor[(288), float32], Tensor[(36, 14), float64], Tensor[(450), float64], Tensor[(6, 7, 7), float64], Tensor[(10, 1, 11), float32]) {
    %316 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
    %317 = cast(%var_4202, dtype="uint16") /* ty=Tensor[(660), uint16] */;
    %318 = cast(%var_4202, dtype="uint16") /* ty=Tensor[(660), uint16] */;
    %319 = cast(%var_4202, dtype="uint16") /* ty=Tensor[(660), uint16] */;
    %320 = cast(meta[relay.Constant][16] /* ty=Tensor[(24, 10), float64] */, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
    %321 = cast(%var_4204, dtype="float32") /* ty=Tensor[(288), float32] */;
    %322 = cast(%var_4205, dtype="float64") /* ty=Tensor[(36, 14), float64] */;
    %323 = cast(meta[relay.Constant][17] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
    %324 = reshape(%317, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
    %325 = reshape(%318, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
    %326 = reshape(%319, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
    %327 = reshape(%320, newshape=[120, 2]) /* ty=Tensor[(120, 2), float64] */;
    %328 = reshape(%321, newshape=[288]) /* ty=Tensor[(288), float32] */;
    %329 = reshape(%322, newshape=[36, 14]) /* ty=Tensor[(36, 14), float64] */;
    %330 = reshape(%323, newshape=[5, 90]) /* ty=Tensor[(5, 90), float64] */;
    %331 = @func_2824(%324, %325, %326, %327, %328, %329, %330) /* ty=(Tensor[(15, 4, 11), uint16], Tensor[(6, 7, 7), bool], Tensor[(15, 4, 11), uint8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(5, 12, 4), float64], Tensor[(120, 2), float64], Tensor[(14, 9, 4), float64], Tensor[(288), float32], Tensor[(36, 14), float64], Tensor[(5, 90), int16], Tensor[(9, 5, 10), float32]) */;
    %332 = @func_1537() /* ty=(Tensor[(10, 1, 11), float32],) */;
    %333 = %316.0;
    %334 = %331.5;
    %335 = @func_2609() /* ty=Tensor[(6, 7, 7), float64] */;
    %336 = %332.0;
    (%333, %334, %var_4202, meta[relay.Constant][16] /* ty=Tensor[(24, 10), float64] */, %var_4204, %var_4205, meta[relay.Constant][17] /* ty=Tensor[(450), float64] */, %335, %336)
  };
  %337(%var_4236, %var_4237, %var_4238) /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(5, 12, 4), float64], Tensor[(660), uint16], Tensor[(24, 10), float64], Tensor[(288), float32], Tensor[(36, 14), float64], Tensor[(450), float64], Tensor[(6, 7, 7), float64], Tensor[(10, 1, 11), float32]) */
}

def @func_4928() -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), bool]) {
  %338 = @func_3118() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(6, 7, 7), bool]) */;
  %339 = @func_4670() /* ty=Tensor[(6, 7, 7), float64] */;
  %340 = %338.1;
  (%339, %340)
}

def @func_6920(%var_6893: Tensor[(15, 6, 12), bool], %var_6906: Tensor[(216), bool]) -> (Tensor[(15, 6, 12), bool], Tensor[(6, 9, 4), bool], Tensor[(24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), float64]) {
  %341 = cast(meta[relay.Constant][18] /* ty=Tensor[(15, 6, 12), bool] */, dtype="bool") /* ty=Tensor[(15, 6, 12), bool] */;
  %342 = shape_of(%var_6893, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%var_6893, dtype="bool") /* ty=Tensor[(15, 6, 12), bool] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %345 = cast(meta[relay.Constant][19] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %346 = cast(%var_6906, dtype="bool") /* ty=Tensor[(216), bool] */;
  %347 = reshape(%345, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %348 = reshape(%346, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), bool] */;
  %349 = @func_2657(%347, %348) /* ty=(Tensor[(6, 9, 4), bool],) */;
  %350 = logical_or(%343, %344) /* ty=Tensor[(15, 6, 12), bool] */;
  %351 = %349.0;
  %352 = @func_5577() /* ty=Tensor[(6, 7, 7), float64] */;
  (%350, %351, meta[relay.Constant][19] /* ty=Tensor[(24), bool] */, %var_6906, %352)
}

def @func_5245() -> (Tensor[(240, 11), int8], Tensor[(13, 16, 9), int8]) {
  %359 = fn () -> (Tensor[(240, 11), int8], Tensor[(13, 16, 9), int8]) {
    %353 = @func_4160() /* ty=Tensor[(240, 1), float64] */;
    %354 = cast(%353, dtype="int8") /* ty=Tensor[(240, 1), int8] */;
    %355 = cast(meta[relay.Constant][20] /* ty=Tensor[(240, 11), float64] */, dtype="int8") /* ty=Tensor[(240, 11), int8] */;
    %356 = @func_2067() /* ty=(Tensor[(13, 16, 9), int8],) */;
    %357 = maximum(%354, %355) /* ty=Tensor[(240, 11), int8] */;
    %358 = %356.0;
    (%357, %358)
  };
  %359() /* ty=(Tensor[(240, 11), int8], Tensor[(13, 16, 9), int8]) */
}

def @func_1622() -> (Tensor[(6, 7, 7), uint16],) {
  @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */
}

def @func_4313() -> (Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 9, 4), bool], Tensor[(1, 24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), float64], Tensor[(1872), float64]) {
  %360 = @func_2715() /* ty=(Tensor[(6, 7, 7), bool],) */;
  %361 = @func_2413() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %362 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 24), bool] */, dtype="bool") /* ty=Tensor[(1, 24), bool] */;
  %363 = cast(meta[relay.Constant][22] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %364 = reshape(%362, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %365 = reshape(%363, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), bool] */;
  %366 = @func_2657(%364, %365) /* ty=(Tensor[(6, 9, 4), bool],) */;
  %367 = @func_3556() /* ty=(Tensor[(1872), float64],) */;
  %368 = %360.0;
  %369 = %361.0;
  %370 = %366.0;
  %371 = @func_3598() /* ty=Tensor[(6, 7, 7), float64] */;
  %372 = %367.0;
  (%368, %369, %370, meta[relay.Constant][21] /* ty=Tensor[(1, 24), bool] */, meta[relay.Constant][22] /* ty=Tensor[(216), bool] */, %371, %372)
}

def @func_5360() -> (Tensor[(2, 11, 11), float64], Tensor[(6, 7, 7), uint8]) {
  %382 = fn () -> (Tensor[(2, 11, 11), float64], Tensor[(6, 7, 7), uint8]) {
    %373 = @func_4608() /* ty=(Tensor[(2, 11, 11), float64],) */;
    %374 = @func_4762() /* ty=Tensor[(6, 7, 7), bool] */;
    %375 = @func_4670() /* ty=Tensor[(6, 7, 7), float64] */;
    %376 = cast(%375, dtype="uint8") /* ty=Tensor[(6, 7, 7), uint8] */;
    %377 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
    %378 = cast(%374, dtype="uint8") /* ty=Tensor[(6, 7, 7), uint8] */;
    %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %380 = %373.0;
    %381 = maximum(%378, %379) /* ty=Tensor[(6, 7, 7), uint8] */;
    (%380, %381)
  };
  %382() /* ty=(Tensor[(2, 11, 11), float64], Tensor[(6, 7, 7), uint8]) */
}

def @func_3594(%var_3593: Tensor[(6, 7, 7), float64]) -> (Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float32]) {
  %392 = fn (%var_3577: Tensor[(6, 7, 7), float64]) -> (Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float32]) {
    %383 = @func_1140() /* ty=(Tensor[(6, 7, 7), float64],) */;
    %384 = %383.0;
    %385 = cast(%var_3577, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
    %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
    %387 = cast(%384, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
    %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %389 = cast(%var_3577, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
    %390 = greater(%387, %388) /* ty=Tensor[(6, 7, 7), bool] */;
    %391 = sqrt(%389) /* ty=Tensor[(6, 7, 7), float32] */;
    (%390, %391)
  };
  %392(%var_3593) /* ty=(Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float32]) */
}

def @main(%var_7325: Tensor[(5, 5, 1), bool]) -> (Tensor[(5, 5, 1), uint64], Tensor[(6, 7, 7), bool], Tensor[(5, 5, ?), int32], Tensor[(5, 5, ?), float64]) {
  %393 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %394 = cast(%var_7325, dtype="bool") /* ty=Tensor[(5, 5, 1), bool] */;
  %395 = logical_and(%393, %394) /* ty=Tensor[(5, 5, 1), bool] */;
  %396 = cast(%395, dtype="uint64") /* ty=Tensor[(5, 5, 1), uint64] */;
  %397 = cast(True /* ty=bool */, dtype="uint64") /* ty=uint64 */;
  %398 = cast(%395, dtype="float64") /* ty=Tensor[(5, 5, 1), float64] */;
  %399 = tan(%398) /* ty=Tensor[(5, 5, 1), float64] */;
  %400 = cast(%395, dtype="int32") /* ty=Tensor[(5, 5, 1), int32] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%399, dtype="int32") /* ty=Tensor[(5, 5, 1), int32] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %404 = cast(%var_7325, dtype="float64") /* ty=Tensor[(5, 5, 1), float64] */;
  %405 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%399, dtype="float64") /* ty=Tensor[(5, 5, 1), float64] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %408 = floor_divide(%406, %407) /* ty=Tensor[(5, 5, ?), float64] */;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(5, 5, ?), float64] */;
  %410 = bitwise_or(%396, %397) /* ty=Tensor[(5, 5, 1), uint64] */;
  %411 = @func_4762() /* ty=Tensor[(6, 7, 7), bool] */;
  %412 = bitwise_xor(%402, %403) /* ty=Tensor[(5, 5, ?), int32] */;
  %413 = asinh(%409) /* ty=Tensor[(5, 5, ?), float64] */;
  (%410, %411, %412, %413)
}

def @func_4852() -> (Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64]) {
  %418 = fn () -> (Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64]) {
    %414 = @func_3749() /* ty=(Tensor[(6, 7, 7), float64],) */;
    %415 = @func_1407() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) */;
    %416 = %414.0;
    %417 = %415.1;
    (%416, %417)
  };
  %418() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64]) */
}

def @func_1679(%var_1677: int32, %var_1678: Tensor[(10, 8, 16), int32]) -> Tensor[(10, 8, 16), float64] {
  @func_1675(%var_1677, %var_1678) /* ty=Tensor[(10, 8, 16), float64] */
}

def @func_3558() -> (Tensor[(1872), float64],) {
  @func_3556() /* ty=(Tensor[(1872), float64],) */
}

def @func_5032(%var_5030: Tensor[(9, 12, 3), float64], %var_5031: Tensor[(9, 12, 3), float64]) -> (Tensor[(9, 12, 3), float64],) {
  %424 = fn (%var_5019: Tensor[(9, 12, 3), float64], %var_5020: Tensor[(9, 12, 3), float64]) -> (Tensor[(9, 12, 3), float64],) {
    %419 = cast(%var_5020, dtype="float64") /* ty=Tensor[(9, 12, 3), float64] */;
    %420 = shape_of(%var_5019, dtype="int32") /* ty=Tensor[(3), int32] */;
    %421 = cast(%var_5019, dtype="float64") /* ty=Tensor[(9, 12, 3), float64] */;
    %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %423 = divide(%421, %422) /* ty=Tensor[(9, 12, 3), float64] */;
    (%423,)
  };
  %424(%var_5030, %var_5031) /* ty=(Tensor[(9, 12, 3), float64],) */
}

def @func_3888(%var_3886: Tensor[(6, 7, 7), bool]) -> (Tensor[(6, 7, 7), float32], Tensor[(1872), float64]) {
  @func_3885(%var_3886) /* ty=(Tensor[(6, 7, 7), float32], Tensor[(1872), float64]) */
}

def @func_4391(%var_4390: Tensor[(20), float64]) -> (Tensor[(6, 7, 7), float64], Tensor[(20), float64], Tensor[(?, 2, 10), int32]) {
  %437 = fn (%var_4357: Tensor[(20), float64]) -> (Tensor[(6, 7, 7), float64], Tensor[(20), float64], Tensor[(?, 2, 10), int32]) {
    %425 = cast(%var_4357, dtype="float64") /* ty=Tensor[(20), float64] */;
    %426 = reshape(%425, newshape=[1, 2, 10]) /* ty=Tensor[(1, 2, 10), float64] */;
    %427 = @func_1907(%426) /* ty=Tensor[(1, 2, 10), float64] */;
    %428 = cast(%427, dtype="float64") /* ty=Tensor[(1, 2, 10), float64] */;
    %429 = reshape(%428, newshape=[1, 2, 10]) /* ty=Tensor[(1, 2, 10), float64] */;
    %430 = @func_1907(%429) /* ty=Tensor[(1, 2, 10), float64] */;
    %431 = cast(%430, dtype="int32") /* ty=Tensor[(1, 2, 10), int32] */;
    %432 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
    %433 = cast(%427, dtype="int32") /* ty=Tensor[(1, 2, 10), int32] */;
    %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %435 = @func_2346() /* ty=Tensor[(6, 7, 7), float64] */;
    %436 = maximum(%433, %434) /* ty=Tensor[(?, 2, 10), int32] */;
    (%435, %var_4357, %436)
  };
  %437(%var_4390) /* ty=(Tensor[(6, 7, 7), float64], Tensor[(20), float64], Tensor[(?, 2, 10), int32]) */
}

def @func_3600() -> Tensor[(6, 7, 7), float64] {
  @func_3598() /* ty=Tensor[(6, 7, 7), float64] */
}

def @func_4740() -> (Tensor[(6, 7, 7), float32], Tensor[(1, 2, 10), float64], Tensor[(20), float64], Tensor[(1872), float64]) {
  %447 = fn () -> (Tensor[(6, 7, 7), float32], Tensor[(1, 2, 10), float64], Tensor[(20), float64], Tensor[(1872), float64]) {
    %438 = @func_4568() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) */;
    %439 = cast(meta[relay.Constant][23] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
    %440 = reshape(%439, newshape=[1, 2, 10]) /* ty=Tensor[(1, 2, 10), float64] */;
    %441 = %438.1;
    %442 = cast(%441, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
    %443 = reshape(%442, newshape=[6, 7, 7]) /* ty=Tensor[(6, 7, 7), bool] */;
    %444 = @func_3885(%443) /* ty=(Tensor[(6, 7, 7), float32], Tensor[(1872), float64]) */;
    %445 = @func_1907(%440) /* ty=Tensor[(1, 2, 10), float64] */;
    %446 = %444.1;
    (%441, %445, meta[relay.Constant][23] /* ty=Tensor[(20), float64] */, %446)
  };
  %447() /* ty=(Tensor[(6, 7, 7), float32], Tensor[(1, 2, 10), float64], Tensor[(20), float64], Tensor[(1872), float64]) */
}

def @func_81(%var_80: Tensor[(13, 16, 9), float32]) -> (Tensor[(13, 16, 9), float64],) {
  %455 = fn (%var_66: Tensor[(13, 16, 9), float32]) -> (Tensor[(13, 16, 9), float64],) {
    %448 = cast(%var_66, dtype="float32") /* ty=Tensor[(13, 16, 9), float32] */;
    %449 = rsqrt(%448) /* ty=Tensor[(13, 16, 9), float32] */;
    %450 = cast(%var_66, dtype="float64") /* ty=Tensor[(13, 16, 9), float64] */;
    %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
    %452 = cast(%449, dtype="float64") /* ty=Tensor[(13, 16, 9), float64] */;
    %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %454 = mod(%452, %453) /* ty=Tensor[(13, 16, 9), float64] */;
    (%454,)
  };
  %455(%var_80) /* ty=(Tensor[(13, 16, 9), float64],) */
}

def @func_3056() -> Tensor[(6, 7, 7), float64] {
  @func_3054() /* ty=Tensor[(6, 7, 7), float64] */
}

def @func_2093() -> (Tensor[(1872), float32],) {
  %458 = fn () -> (Tensor[(1872), float32],) {
    %456 = @func_1205() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) */;
    %457 = %456.1;
    (%457,)
  };
  %458() /* ty=(Tensor[(1872), float32],) */
}

def @func_5864() -> Tensor[(6, 7, 7), float32] {
  %462 = fn () -> Tensor[(6, 7, 7), float32] {
    %459 = @func_1798() /* ty=(Tensor[(6, 7, 7), float64],) */;
    %460 = %459.0;
    %461 = cast(%460, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
    erf(%461) /* ty=Tensor[(6, 7, 7), float32] */
  };
  %462() /* ty=Tensor[(6, 7, 7), float32] */
}

def @func_1311() -> (Tensor[(6, 7, 7), float64],) {
  %463 = @func_1280() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), float64], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(6, 7, 7), float64], Tensor[(5, 90), float64]) */;
  %464 = %463.0;
  (%464,)
}

def @func_5578() -> Tensor[(6, 7, 7), float64] {
  %466 = fn () -> Tensor[(6, 7, 7), float64] {
    %465 = @func_5185() /* ty=(Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64]) */;
    %465.2
  };
  %466() /* ty=Tensor[(6, 7, 7), float64] */
}

def @func_6197() -> (Tensor[(6, 7, 7), float64],) {
  @func_6195() /* ty=(Tensor[(6, 7, 7), float64],) */
}

def @func_6888() -> Tensor[(10, 1, 11), float32] {
  %468 = fn () -> Tensor[(10, 1, 11), float32] {
    %467 = @func_6080() /* ty=(Tensor[(10, 1, 11), float32],) */;
    %467.0
  };
  %468() /* ty=Tensor[(10, 1, 11), float32] */
}

def @func_1620() -> (Tensor[(6, 7, 7), uint16],) {
  %469 = @func_1311() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %470 = %469.0;
  %471 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 7, 7), float64] */, dtype="uint16") /* ty=Tensor[(6, 7, 7), uint16] */;
  %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%470, dtype="uint16") /* ty=Tensor[(6, 7, 7), uint16] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %475 = bitwise_and(%473, %474) /* ty=Tensor[(6, 7, 7), uint16] */;
  (%475,)
}

def @func_6292(%var_6291: Tensor[(7, 12, 14), float64]) -> (Tensor[(7, 12, 14), int32],) {
  %491 = fn (%var_6271: Tensor[(7, 12, 14), float64]) -> (Tensor[(7, 12, 14), int32],) {
    %476 = cast(%var_6271, dtype="float64") /* ty=Tensor[(7, 12, 14), float64] */;
    %477 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(7, 12, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %478 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 12, 14), float64] */, dtype="float64") /* ty=Tensor[(7, 12, 14), float64] */;
    %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %480 = divide(%478, %479) /* ty=Tensor[(7, 12, 14), float64] */;
    %481 = cast(%480, dtype="uint32") /* ty=Tensor[(7, 12, 14), uint32] */;
    %482 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(7, 12, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %483 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 12, 14), float64] */, dtype="uint32") /* ty=Tensor[(7, 12, 14), uint32] */;
    %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %485 = add(%483, %484) /* ty=Tensor[(7, 12, 14), uint32] */;
    %486 = cast(%485, dtype="int32") /* ty=Tensor[(7, 12, 14), int32] */;
    %487 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
    %488 = cast(%480, dtype="int32") /* ty=Tensor[(7, 12, 14), int32] */;
    %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %490 = multiply(%488, %489) /* ty=Tensor[(7, 12, 14), int32] */;
    (%490,)
  };
  %491(%var_6291) /* ty=(Tensor[(7, 12, 14), int32],) */
}

def @func_4160() -> Tensor[(240, 1), float64] {
  %492 = @func_3075() /* ty=(Tensor[(240, 1), float64],) */;
  %492.0
}

def @func_6195() -> (Tensor[(6, 7, 7), float64],) {
  %493 = @func_3749() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %494 = %493.0;
  (%494,)
}

def @func_1900(%var_1898: int32) -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64], Tensor[(10, 8, 16), float64], int32, Tensor[(1280, 1), int32], Tensor[(504), float64]) {
  @func_1897(%var_1898) /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64], Tensor[(10, 8, 16), float64], int32, Tensor[(1280, 1), int32], Tensor[(504), float64]) */
}

def @func_5850() -> (Tensor[(9, 5, 10), float64],) {
  @func_5848() /* ty=(Tensor[(9, 5, 10), float64],) */
}

def @func_6846() -> (Tensor[(6, 7, 7), float64],) {
  %497 = fn () -> (Tensor[(6, 7, 7), float64],) {
    %495 = @func_1407() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) */;
    %496 = %495.0;
    (%496,)
  };
  %497() /* ty=(Tensor[(6, 7, 7), float64],) */
}

def @func_5764() -> (Tensor[(6, 7, 7), uint16],) {
  @func_5762() /* ty=(Tensor[(6, 7, 7), uint16],) */
}

def @func_3749() -> (Tensor[(6, 7, 7), float64],) {
  %498 = @func_1311() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %499 = %498.0;
  (%499,)
}

def @func_3598() -> Tensor[(6, 7, 7), float64] {
  @func_2609() /* ty=Tensor[(6, 7, 7), float64] */
}

def @func_6709(%var_6707: Tensor[(24), bool]) -> (Tensor[(9, 5, 10), float64], Tensor[(6, 9, 4), bool], Tensor[(24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), uint8]) {
  @func_6706(%var_6707) /* ty=(Tensor[(9, 5, 10), float64], Tensor[(6, 9, 4), bool], Tensor[(24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), uint8]) */
}

def @func_5747() -> (Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), uint8], Tensor[(240, 12), uint32]) {
  %500 = @func_4087() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), uint16], int32) */;
  %501 = @func_5359() /* ty=(Tensor[(2, 11, 11), float64], Tensor[(6, 7, 7), uint8]) */;
  %502 = @func_5533() /* ty=(Tensor[(240, ?), float32],) */;
  %503 = %502.0;
  %504 = cast(%503, dtype="int16") /* ty=Tensor[(240, ?), int16] */;
  %505 = cast(meta[relay.Constant][26] /* ty=Tensor[(240, 12), float32] */, dtype="int16") /* ty=Tensor[(240, 12), int16] */;
  %506 = bitwise_xor(%504, %505) /* ty=Tensor[(240, 12), int16] */;
  %507 = cast(meta[relay.Constant][26] /* ty=Tensor[(240, 12), float32] */, dtype="uint32") /* ty=Tensor[(240, 12), uint32] */;
  %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(2), int32] */;
  %509 = cast(%506, dtype="uint32") /* ty=Tensor[(240, 12), uint32] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %511 = %500.0;
  %512 = %501.1;
  %513 = minimum(%509, %510) /* ty=Tensor[(240, 12), uint32] */;
  (%511, %512, %513)
}

def @func_6706(%var_6633: Tensor[(24), bool]) -> (Tensor[(9, 5, 10), float64], Tensor[(6, 9, 4), bool], Tensor[(24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), uint8]) {
  %514 = @func_5848() /* ty=(Tensor[(9, 5, 10), float64],) */;
  %515 = cast(%var_6633, dtype="bool") /* ty=Tensor[(24), bool] */;
  %516 = cast(meta[relay.Constant][27] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %517 = reshape(%515, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %518 = reshape(%516, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), bool] */;
  %519 = @func_2657(%517, %518) /* ty=(Tensor[(6, 9, 4), bool],) */;
  %520 = @func_5747() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), uint8], Tensor[(240, 12), uint32]) */;
  %521 = %514.0;
  %522 = %519.0;
  %523 = %520.1;
  (%521, %522, %var_6633, meta[relay.Constant][27] /* ty=Tensor[(216), bool] */, %523)
}

def @func_6775() -> (Tensor[(6, 7, 7), uint16],) {
  %524 = @func_5762() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %525 = %524.0;
  (%525,)
}

def @func_3497(%var_3493: Tensor[(6, 7, 7), bool], %var_3494: Tensor[(288), float32], %var_3495: Tensor[(504), float64], %var_3496: Tensor[(450), float64]) -> (Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), bool], Tensor[(5, 132), uint16], Tensor[(240), float64], Tensor[(288), float32], Tensor[(504), float64], Tensor[(450), float64], Tensor[(6, 7, 7), bool]) {
  @func_3491(%var_3493, %var_3494, %var_3495, %var_3496) /* ty=(Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), bool], Tensor[(5, 132), uint16], Tensor[(240), float64], Tensor[(288), float32], Tensor[(504), float64], Tensor[(450), float64], Tensor[(6, 7, 7), bool]) */
}

def @func_3077() -> (Tensor[(240, 1), float64],) {
  @func_3075() /* ty=(Tensor[(240, 1), float64],) */
}

def @func_4764() -> Tensor[(6, 7, 7), bool] {
  @func_4762() /* ty=Tensor[(6, 7, 7), bool] */
}

def @func_514(%var_512: Tensor[(14, 9, 4), float64], %var_513: Tensor[(14, 9, 4), float64]) -> Tensor[(14, 9, 4), float64] {
  @func_510(%var_512, %var_513) /* ty=Tensor[(14, 9, 4), float64] */
}

def @func_2609() -> Tensor[(6, 7, 7), float64] {
  %526 = @func_2413() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %526.0
}

def @func_1509(%var_1507: Tensor[(6, 7, 7), float64]) -> (Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float32]) {
  @func_1506(%var_1507) /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float32]) */
}

def @func_2069() -> (Tensor[(13, 16, 9), int8],) {
  @func_2067() /* ty=(Tensor[(13, 16, 9), int8],) */
}

def @func_1112(%var_1110: Tensor[(12, 8, 3), float32], %var_1111: Tensor[(504), float64]) -> (Tensor[(12, 8, 3), float32], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(9, 5, 10), int8], Tensor[(450), float64]) {
  @func_1108(%var_1110, %var_1111) /* ty=(Tensor[(12, 8, 3), float32], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(9, 5, 10), int8], Tensor[(450), float64]) */
}

def @func_7046() -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32], Tensor[(9, 5, 10), float64], Tensor[(6, 7, 7), float64]) {
  @func_7044() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32], Tensor[(9, 5, 10), float64], Tensor[(6, 7, 7), float64]) */
}

def @func_5527() -> Tensor[(6, 7, 7), float64] {
  %527 = fn () -> Tensor[(6, 7, 7), float64] {
    @func_3598() /* ty=Tensor[(6, 7, 7), float64] */
  };
  %527() /* ty=Tensor[(6, 7, 7), float64] */
}

def @func_4762() -> Tensor[(6, 7, 7), bool] {
  @func_4260() /* ty=Tensor[(6, 7, 7), bool] */
}

def @func_5980() -> (Tensor[(6, 7, 7), bool],) {
  %528 = @func_5185() /* ty=(Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64]) */;
  %529 = %528.1;
  (%529,)
}

def @func_6030() -> Tensor[(20), float64] {
  %530 = @func_4739() /* ty=(Tensor[(6, 7, 7), float32], Tensor[(1, 2, 10), float64], Tensor[(20), float64], Tensor[(1872), float64]) */;
  %530.2
}

def @func_1205() -> (Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) {
  %531 = cast(meta[relay.Constant][28] /* ty=Tensor[(1872), float32] */, dtype="float32") /* ty=Tensor[(1872), float32] */;
  %532 = reshape(%531, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), float32] */;
  %533 = @func_79(%532) /* ty=(Tensor[(13, 16, 9), float64],) */;
  %534 = @func_1071() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %535 = %534.0;
  %536 = cast(%535, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %537 = asinh(%536) /* ty=Tensor[(6, 7, 7), float32] */;
  %538 = cast(%535, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%537, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %542 = floor_mod(%540, %541) /* ty=Tensor[(6, 7, 7), float32] */;
  %543 = cast(%542, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %544 = %533.0;
  %545 = acos(%543) /* ty=Tensor[(6, 7, 7), float32] */;
  (%544, meta[relay.Constant][28] /* ty=Tensor[(1872), float32] */, %545)
}

def @func_4261() -> Tensor[(6, 7, 7), bool] {
  %547 = fn () -> Tensor[(6, 7, 7), bool] {
    %546 = @func_2715() /* ty=(Tensor[(6, 7, 7), bool],) */;
    %546.0
  };
  %547() /* ty=Tensor[(6, 7, 7), bool] */
}

def @func_4017(%var_4014: Tensor[(1872), float32], %var_4015: Tensor[(660, 1), uint16], %var_4016: Tensor[(144, 2), float32]) -> (Tensor[(1872), uint16], Tensor[(10, 1, 11), float32], Tensor[(1872), float32], Tensor[(13, 16, 9), float64], Tensor[(15, 4, 11), uint8], Tensor[(660, 1), uint16], Tensor[(240), float64], Tensor[(144, 2), float32], Tensor[(504), float64], Tensor[(1, 450), float64]) {
  %584 = fn (%var_3967: Tensor[(1872), float32], %var_4005: Tensor[(660, 1), uint16], %var_4007: Tensor[(144, 2), float32]) -> (Tensor[(1872), uint16], Tensor[(10, 1, 11), float32], Tensor[(1872), float32], Tensor[(13, 16, 9), float64], Tensor[(15, 4, 11), uint8], Tensor[(660, 1), uint16], Tensor[(240), float64], Tensor[(144, 2), float32], Tensor[(504), float64], Tensor[(1, 450), float64]) {
    %548 = @func_1205() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) */;
    %549 = %548.1;
    %550 = cast(%var_3967, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
    %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(1), int32] */;
    %552 = cast(%549, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
    %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %554 = @func_1537() /* ty=(Tensor[(10, 1, 11), float32],) */;
    %555 = cast(%var_3967, dtype="bool") /* ty=Tensor[(1872), bool] */;
    %556 = shape_of(%549, dtype="int32") /* ty=Tensor[(1), int32] */;
    %557 = cast(%549, dtype="bool") /* ty=Tensor[(1872), bool] */;
    %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?), bool] */;
    %559 = logical_or(%557, %558) /* ty=Tensor[(1872), bool] */;
    %560 = cast(%559, dtype="float32") /* ty=Tensor[(1872), float32] */;
    %561 = cast(%var_3967, dtype="float32") /* ty=Tensor[(1872), float32] */;
    %562 = reshape(%561, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), float32] */;
    %563 = @func_79(%562) /* ty=(Tensor[(13, 16, 9), float64],) */;
    %564 = cast(%var_4005, dtype="uint16") /* ty=Tensor[(660, 1), uint16] */;
    %565 = cast(%var_4005, dtype="uint16") /* ty=Tensor[(660, 1), uint16] */;
    %566 = cast(%var_4005, dtype="uint16") /* ty=Tensor[(660, 1), uint16] */;
    %567 = cast(meta[relay.Constant][29] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %568 = cast(%var_4007, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
    %569 = cast(meta[relay.Constant][30] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
    %570 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 450), float64] */, dtype="float64") /* ty=Tensor[(1, 450), float64] */;
    %571 = reshape(%564, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
    %572 = reshape(%565, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
    %573 = reshape(%566, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint16] */;
    %574 = reshape(%567, newshape=[120, 2]) /* ty=Tensor[(120, 2), float64] */;
    %575 = reshape(%568, newshape=[288]) /* ty=Tensor[(288), float32] */;
    %576 = reshape(%569, newshape=[36, 14]) /* ty=Tensor[(36, 14), float64] */;
    %577 = reshape(%570, newshape=[5, 90]) /* ty=Tensor[(5, 90), float64] */;
    %578 = @func_2824(%571, %572, %573, %574, %575, %576, %577) /* ty=(Tensor[(15, 4, 11), uint16], Tensor[(6, 7, 7), bool], Tensor[(15, 4, 11), uint8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(5, 12, 4), float64], Tensor[(120, 2), float64], Tensor[(14, 9, 4), float64], Tensor[(288), float32], Tensor[(36, 14), float64], Tensor[(5, 90), int16], Tensor[(9, 5, 10), float32]) */;
    %579 = subtract(%552, %553) /* ty=Tensor[(1872), uint16] */;
    %580 = %554.0;
    %581 = cosh(%560) /* ty=Tensor[(1872), float32] */;
    %582 = %563.0;
    %583 = %578.2;
    (%579, %580, %581, %582, %583, %var_4005, meta[relay.Constant][29] /* ty=Tensor[(240), float64] */, %var_4007, meta[relay.Constant][30] /* ty=Tensor[(504), float64] */, meta[relay.Constant][31] /* ty=Tensor[(1, 450), float64] */)
  };
  %584(%var_4014, %var_4015, %var_4016) /* ty=(Tensor[(1872), uint16], Tensor[(10, 1, 11), float32], Tensor[(1872), float32], Tensor[(13, 16, 9), float64], Tensor[(15, 4, 11), uint8], Tensor[(660, 1), uint16], Tensor[(240), float64], Tensor[(144, 2), float32], Tensor[(504), float64], Tensor[(1, 450), float64]) */
}

def @func_4088() -> (Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), uint16], int32) {
  %593 = fn () -> (Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), uint16], int32) {
    %585 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
    %586 = @func_3749() /* ty=(Tensor[(6, 7, 7), float64],) */;
    %587 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %588 = reshape(%587, newshape=[]) /* ty=int32 */;
    %589 = @func_3669(%588) /* ty=(Tensor[(6, 7, 7), uint16], int32, int32, Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) */;
    %590 = %585.0;
    %591 = %586.0;
    %592 = %589.5;
    (%590, %591, %592, -2 /* ty=int32 */)
  };
  %593() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), uint16], int32) */
}

def @func_6617() -> (Tensor[(9, 1, 16), uint8], Tensor[(10, 1, 11), float32]) {
  %594 = cast(meta[relay.Constant][32] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %595 = cast(meta[relay.Constant][33] /* ty=Tensor[(9, 1, 16), uint8] */, dtype="uint8") /* ty=Tensor[(9, 1, 16), uint8] */;
  %596 = @func_1537() /* ty=(Tensor[(10, 1, 11), float32],) */;
  %597 = right_shift(%594, %595) /* ty=Tensor[(9, 1, 16), uint8] */;
  %598 = %596.0;
  (%597, %598)
}

def @func_1909(%var_1908: Tensor[(1, 2, 10), float64]) -> Tensor[(1, 2, 10), float64] {
  %601 = fn (%var_1903: Tensor[(1, 2, 10), float64]) -> Tensor[(1, 2, 10), float64] {
    %599 = cast(4.4505f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %600 = cast(%var_1903, dtype="float64") /* ty=Tensor[(1, 2, 10), float64] */;
    subtract(%599, %600) /* ty=Tensor[(1, 2, 10), float64] */
  };
  %601(%var_1908) /* ty=Tensor[(1, 2, 10), float64] */
}

def @func_5964() -> (Tensor[(6, 7, 7), uint8],) {
  @func_5962() /* ty=(Tensor[(6, 7, 7), uint8],) */
}

def @func_4639() -> Tensor[(6, 7, 7), uint16] {
  %603 = fn () -> Tensor[(6, 7, 7), uint16] {
    %602 = @func_3046() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) */;
    %602.0
  };
  %603() /* ty=Tensor[(6, 7, 7), uint16] */
}

def @func_6080() -> (Tensor[(10, 1, 11), float32],) {
  %604 = @func_1537() /* ty=(Tensor[(10, 1, 11), float32],) */;
  %605 = %604.0;
  (%605,)
}

def @func_5891() -> (Tensor[(6, 7, 7), float64],) {
  %606 = @func_2265() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) */;
  %607 = %606.0;
  (%607,)
}

def @func_1771(%var_1770: Tensor[(6, 7, 7), float32]) -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), bool]) {
  %624 = fn (%var_1718: Tensor[(6, 7, 7), float32]) -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), bool]) {
    %608 = @func_1205() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) */;
    %609 = %608.2;
    %610 = cast(%609, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
    %611 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
    %612 = %611.0;
    %613 = cast(%var_1718, dtype="uint16") /* ty=Tensor[(6, 7, 7), uint16] */;
    %614 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
    %615 = cast(%609, dtype="uint16") /* ty=Tensor[(6, 7, 7), uint16] */;
    %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %617 = logical_xor(%615, %616) /* ty=Tensor[(6, 7, 7), uint16] */;
    %618 = cast(%617, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
    %619 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
    %620 = cast(%612, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
    %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %622 = cosh(%610) /* ty=Tensor[(6, 7, 7), float64] */;
    %623 = equal(%620, %621) /* ty=Tensor[(6, 7, 7), bool] */;
    (%622, %623)
  };
  %624(%var_1770) /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), bool]) */
}

def @func_2297(%var_2295: Tensor[(10, 14, 11), float32]) -> (Tensor[(10, 14, 11), float64], Tensor[(1872), float32]) {
  @func_2294(%var_2295) /* ty=(Tensor[(10, 14, 11), float64], Tensor[(1872), float32]) */
}

def @func_1408() -> (Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) {
  %631 = fn () -> (Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) {
    %625 = @func_1311() /* ty=(Tensor[(6, 7, 7), float64],) */;
    %626 = cast(meta[relay.Constant][34] /* ty=Tensor[(1872), float32] */, dtype="float32") /* ty=Tensor[(1872), float32] */;
    %627 = reshape(%626, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), float32] */;
    %628 = @func_79(%627) /* ty=(Tensor[(13, 16, 9), float64],) */;
    %629 = %625.0;
    %630 = %628.0;
    (%629, %630, meta[relay.Constant][34] /* ty=Tensor[(1872), float32] */)
  };
  %631() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) */
}

def @func_5432(%var_5430: Tensor[(450), float64], %var_5431: Tensor[(1540), float32]) -> (Tensor[(13, 16, 9), float64], Tensor[(6, 7, 7), float64], Tensor[(294), float32], Tensor[(9, 5, 10), bool], Tensor[(10, 14, 11), float64], Tensor[(1540), float32], int32, int32) {
  %657 = fn (%var_5410: Tensor[(450), float64], %var_5417: Tensor[(1540), float32]) -> (Tensor[(13, 16, 9), float64], Tensor[(6, 7, 7), float64], Tensor[(294), float32], Tensor[(9, 5, 10), bool], Tensor[(10, 14, 11), float64], Tensor[(1540), float32], int32, int32) {
    %632 = @func_4851() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64]) */;
    %633 = cast(meta[relay.Constant][35] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
    %634 = reshape(%633, newshape=[6, 7, 7]) /* ty=Tensor[(6, 7, 7), float32] */;
    %635 = @func_1769(%634) /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), bool]) */;
    %636 = cast(%var_5410, dtype="float64") /* ty=Tensor[(450), float64] */;
    %637 = cast(%var_5410, dtype="float64") /* ty=Tensor[(450), float64] */;
    %638 = reshape(%636, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
    %639 = reshape(%637, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
    %640 = @func_453(%638, %639) /* ty=(Tensor[(9, 5, 10), float64], Tensor[(9, 5, 10), int8]) */;
    %641 = %640.1;
    %642 = cast(%var_5410, dtype="bool") /* ty=Tensor[(450), bool] */;
    %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
    %644 = cast(%641, dtype="bool") /* ty=Tensor[(9, 5, 10), bool] */;
    %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %646 = cast(%var_5417, dtype="float32") /* ty=Tensor[(1540), float32] */;
    %647 = reshape(%646, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float32] */;
    %648 = @func_2294(%647) /* ty=(Tensor[(10, 14, 11), float64], Tensor[(1872), float32]) */;
    %649 = cast(9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %650 = reshape(%649, newshape=[]) /* ty=int32 */;
    %651 = @func_1897(%650) /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64], Tensor[(10, 8, 16), float64], int32, Tensor[(1280, 1), int32], Tensor[(504), float64]) */;
    %652 = %632.1;
    %653 = %635.0;
    %654 = greater(%644, %645) /* ty=Tensor[(9, 5, 10), bool] */;
    %655 = %648.0;
    %656 = %651.3;
    (%652, %653, meta[relay.Constant][35] /* ty=Tensor[(294), float32] */, %654, %655, %var_5417, %656, 9 /* ty=int32 */)
  };
  %657(%var_5430, %var_5431) /* ty=(Tensor[(13, 16, 9), float64], Tensor[(6, 7, 7), float64], Tensor[(294), float32], Tensor[(9, 5, 10), bool], Tensor[(10, 14, 11), float64], Tensor[(1540), float32], int32, int32) */
}

def @func_5809() -> (Tensor[(6, 7, 7), float64], Tensor[(10, 14, 11), float64], Tensor[(450, 1), float64], Tensor[(1540), float32], Tensor[(6, 7, 7), bool]) {
  @func_5807() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(10, 14, 11), float64], Tensor[(450, 1), float64], Tensor[(1540), float32], Tensor[(6, 7, 7), bool]) */
}

def @func_2691(%var_2690: Tensor[(294), float64]) -> (Tensor[(504), float64], Tensor[(6, 7, 7), float32], Tensor[(294), float64]) {
  %664 = fn (%var_2685: Tensor[(294), float64]) -> (Tensor[(504), float64], Tensor[(6, 7, 7), float32], Tensor[(294), float64]) {
    %658 = @func_1280() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), float64], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(6, 7, 7), float64], Tensor[(5, 90), float64]) */;
    %659 = cast(%var_2685, dtype="float64") /* ty=Tensor[(294), float64] */;
    %660 = reshape(%659, newshape=[6, 7, 7]) /* ty=Tensor[(6, 7, 7), float64] */;
    %661 = @func_1506(%660) /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float32]) */;
    %662 = %658.4;
    %663 = %661.1;
    (%662, %663, %var_2685)
  };
  %664(%var_2690) /* ty=(Tensor[(504), float64], Tensor[(6, 7, 7), float32], Tensor[(294), float64]) */
}

def @func_1897(%var_1885: int32) -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64], Tensor[(10, 8, 16), float64], int32, Tensor[(1280, 1), int32], Tensor[(504), float64]) {
  %665 = @func_1140() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %666 = %665.0;
  %667 = @func_1792() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %668 = %667.0;
  %669 = cast(%668, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
  %670 = shape_of(%666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%666, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %673 = cast(%666, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
  %674 = cast(%var_1885, dtype="int32") /* ty=int32 */;
  %675 = cast(meta[relay.Constant][36] /* ty=Tensor[(1280, 1), int32] */, dtype="int32") /* ty=Tensor[(1280, 1), int32] */;
  %676 = reshape(%674, newshape=[]) /* ty=int32 */;
  %677 = reshape(%675, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), int32] */;
  %678 = @func_1280() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), float64], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(6, 7, 7), float64], Tensor[(5, 90), float64]) */;
  %679 = floor_divide(%671, %672) /* ty=Tensor[(6, 7, 7), float64] */;
  %680 = sin(%673) /* ty=Tensor[(6, 7, 7), float64] */;
  %681 = @func_1675(%676, %677) /* ty=Tensor[(10, 8, 16), float64] */;
  %682 = %678.4;
  (%679, %680, %681, %var_1885, meta[relay.Constant][36] /* ty=Tensor[(1280, 1), int32] */, %682)
}

def @func_1793() -> (Tensor[(6, 7, 7), uint16],) {
  %685 = fn () -> (Tensor[(6, 7, 7), uint16],) {
    %683 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
    %684 = %683.0;
    (%684,)
  };
  %685() /* ty=(Tensor[(6, 7, 7), uint16],) */
}

def @func_4610() -> (Tensor[(2, 11, 11), float64],) {
  @func_4608() /* ty=(Tensor[(2, 11, 11), float64],) */
}

def @func_5822(%var_5821: Tensor[(13, 15, 2), float32]) -> (Tensor[(13, 15, 2), float32], Tensor[(6, 7, 7), uint16], Tensor[(1872, 1), float32]) {
  %692 = fn (%var_5812: Tensor[(13, 15, 2), float32]) -> (Tensor[(13, 15, 2), float32], Tensor[(6, 7, 7), uint16], Tensor[(1872, 1), float32]) {
    %686 = cast(%var_5812, dtype="float32") /* ty=Tensor[(13, 15, 2), float32] */;
    %687 = cast(meta[relay.Constant][37] /* ty=Tensor[(1872, 1), float32] */, dtype="float32") /* ty=Tensor[(1872, 1), float32] */;
    %688 = reshape(%687, newshape=[1872]) /* ty=Tensor[(1872), float32] */;
    %689 = @func_3244(%688) /* ty=(Tensor[(6, 7, 7), float32], Tensor[(1872), float64], Tensor[(240, ?), float32], Tensor[(6, 7, 7), uint16]) */;
    %690 = rsqrt(%686) /* ty=Tensor[(13, 15, 2), float32] */;
    %691 = %689.3;
    (%690, %691, meta[relay.Constant][37] /* ty=Tensor[(1872, 1), float32] */)
  };
  %692(%var_5821) /* ty=(Tensor[(13, 15, 2), float32], Tensor[(6, 7, 7), uint16], Tensor[(1872, 1), float32]) */
}

def @func_2325() -> (Tensor[(5, 12, 4), float64], Tensor[(240, 1), float64], Tensor[(6, 7, 7), bool]) {
  @func_2323() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240, 1), float64], Tensor[(6, 7, 7), bool]) */
}

def @func_5124() -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64]) {
  %693 = @func_4711() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %694 = @func_2346() /* ty=Tensor[(6, 7, 7), float64] */;
  %695 = %693.0;
  (%694, %695)
}

def @func_5005() -> (Tensor[(6, 7, 7), uint16], Tensor[(240, ?), float32]) {
  @func_5003() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(240, ?), float32]) */
}

def @func_2634() -> (Tensor[(6, 7, 7), bool],) {
  %696 = @func_1311() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %697 = %696.0;
  %698 = @func_2346() /* ty=Tensor[(6, 7, 7), float64] */;
  %699 = cast(%698, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %700 = shape_of(%697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%697, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %703 = logical_or(%701, %702) /* ty=Tensor[(6, 7, 7), bool] */;
  (%703,)
}

def @func_4162() -> Tensor[(240, 1), float64] {
  @func_4160() /* ty=Tensor[(240, 1), float64] */
}

def @func_3318(%var_3316: Tensor[(6, 7, 7), float64]) -> (Tensor[(6, 7, 7), bool], Tensor[(240, 1), float64]) {
  @func_3315(%var_3316) /* ty=(Tensor[(6, 7, 7), bool], Tensor[(240, 1), float64]) */
}

def @func_6748(%var_6744: int32) -> (Tensor[(1872), float32], int32, int32) {
  %704 = @func_2092() /* ty=(Tensor[(1872), float32],) */;
  %705 = cast(%var_6744, dtype="int32") /* ty=int32 */;
  %706 = reshape(%705, newshape=[]) /* ty=int32 */;
  %707 = @func_3669(%706) /* ty=(Tensor[(6, 7, 7), uint16], int32, int32, Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) */;
  %708 = %704.0;
  %709 = %707.2;
  (%708, %709, %var_6744)
}

def @func_1798() -> (Tensor[(6, 7, 7), float64],) {
  %710 = @func_1311() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %711 = %710.0;
  (%711,)
}

def @func_2067() -> (Tensor[(13, 16, 9), int8],) {
  %712 = @func_1407() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) */;
  %713 = %712.1;
  %714 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 16, 9), float64] */, dtype="int8") /* ty=Tensor[(13, 16, 9), int8] */;
  %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%713, dtype="int8") /* ty=Tensor[(13, 16, 9), int8] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %718 = multiply(%716, %717) /* ty=Tensor[(13, 16, 9), int8] */;
  (%718,)
}

def @func_6980(%var_6949: Tensor[(216), bool], %var_6967: Tensor[(450), float64]) -> (Tensor[(6, 7, 7), float64], Tensor[(216), bool], Tensor[(24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), float32], Tensor[(9, 5, 10), int8], Tensor[(450), float64]) {
  %719 = @func_5526() /* ty=Tensor[(6, 7, 7), float64] */;
  %720 = cast(%719, dtype="float64") /* ty=Tensor[(6, 7, 7), float64] */;
  %721 = cast(meta[relay.Constant][39] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %722 = cast(%var_6949, dtype="bool") /* ty=Tensor[(216), bool] */;
  %723 = reshape(%721, newshape=[12, 2]) /* ty=Tensor[(12, 2), bool] */;
  %724 = reshape(%722, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %725 = @func_6384(%723, %724) /* ty=(Tensor[(6, 7, 7), float64], Tensor[(1872), float32], Tensor[(6, 9, 4), bool], Tensor[(12, 2), bool], Tensor[(216), bool]) */;
  %726 = @func_1205() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) */;
  %727 = cast(%var_6967, dtype="float64") /* ty=Tensor[(450), float64] */;
  %728 = cast(%var_6967, dtype="float64") /* ty=Tensor[(450), float64] */;
  %729 = reshape(%727, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
  %730 = reshape(%728, newshape=[9, 5, 10]) /* ty=Tensor[(9, 5, 10), float64] */;
  %731 = @func_453(%729, %730) /* ty=(Tensor[(9, 5, 10), float64], Tensor[(9, 5, 10), int8]) */;
  %732 = log2(%720) /* ty=Tensor[(6, 7, 7), float64] */;
  %733 = %725.4;
  %734 = %726.2;
  %735 = %731.1;
  (%732, %733, meta[relay.Constant][39] /* ty=Tensor[(24), bool] */, %var_6949, %734, %735, %var_6967)
}

def @func_6984(%var_6982: Tensor[(216), bool], %var_6983: Tensor[(450), float64]) -> (Tensor[(6, 7, 7), float64], Tensor[(216), bool], Tensor[(24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), float32], Tensor[(9, 5, 10), int8], Tensor[(450), float64]) {
  @func_6980(%var_6982, %var_6983) /* ty=(Tensor[(6, 7, 7), float64], Tensor[(216), bool], Tensor[(24), bool], Tensor[(216), bool], Tensor[(6, 7, 7), float32], Tensor[(9, 5, 10), int8], Tensor[(450), float64]) */
}

def @func_1572(%var_1571: Tensor[(5, 12, 4), float64]) -> (Tensor[(5, 12, 4), float64],) {
  %741 = fn (%var_1558: Tensor[(5, 12, 4), float64]) -> (Tensor[(5, 12, 4), float64],) {
    %736 = cast(meta[relay.Constant][40] /* ty=Tensor[(5, 12, 4), float64] */, dtype="float64") /* ty=Tensor[(5, 12, 4), float64] */;
    %737 = shape_of(%var_1558, dtype="int32") /* ty=Tensor[(3), int32] */;
    %738 = cast(%var_1558, dtype="float64") /* ty=Tensor[(5, 12, 4), float64] */;
    %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %740 = divide(%738, %739) /* ty=Tensor[(5, 12, 4), float64] */;
    (%740,)
  };
  %741(%var_1571) /* ty=(Tensor[(5, 12, 4), float64],) */
}

def @func_3669(%var_3629: int32) -> (Tensor[(6, 7, 7), uint16], int32, int32, Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), bool], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) {
  %742 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %743 = cast(%var_3629, dtype="int32") /* ty=int32 */;
  %744 = reshape(%743, newshape=[]) /* ty=int32 */;
  %745 = @func_1897(%744) /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64], Tensor[(10, 8, 16), float64], int32, Tensor[(1280, 1), int32], Tensor[(504), float64]) */;
  %746 = @func_1620() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %747 = @func_3118() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(6, 7, 7), bool]) */;
  %748 = @func_2506() /* ty=(Tensor[(13, 16, 9), int8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), bool]) */;
  %749 = %742.0;
  %750 = %745.3;
  %751 = %746.0;
  %752 = %747.1;
  %753 = %748.1;
  %754 = @func_2346() /* ty=Tensor[(6, 7, 7), float64] */;
  (%749, %750, %var_3629, %751, %752, %753, %754)
}

def @func_3104() -> (Tensor[(13, 16, 9), bool], Tensor[(6, 7, 7), uint16]) {
  %755 = @func_1205() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) */;
  %756 = %755.0;
  %757 = cast(meta[relay.Constant][41] /* ty=Tensor[(13, 16, 9), float64] */, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%756, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %761 = @func_1792() /* ty=(Tensor[(6, 7, 7), uint16],) */;
  %762 = logical_or(%759, %760) /* ty=Tensor[(13, 16, 9), bool] */;
  %763 = %761.0;
  (%762, %763)
}

def @func_2754(%var_2739: uint64, %var_2740: Tensor[(4, 8, 10), uint64]) -> (Tensor[(4, 8, 10), bool], Tensor[(4, 8, 10), float32]) {
  %764 = cast(%var_2739, dtype="bool") /* ty=bool */;
  %765 = cast(%var_2740, dtype="bool") /* ty=Tensor[(4, 8, 10), bool] */;
  %766 = cast(%var_2740, dtype="float32") /* ty=Tensor[(4, 8, 10), float32] */;
  %767 = asinh(%766) /* ty=Tensor[(4, 8, 10), float32] */;
  %768 = cast(%767, dtype="float32") /* ty=Tensor[(4, 8, 10), float32] */;
  %769 = not_equal(%764, %765) /* ty=Tensor[(4, 8, 10), bool] */;
  %770 = asin(%768) /* ty=Tensor[(4, 8, 10), float32] */;
  (%769, %770)
}

def @func_4608() -> (Tensor[(2, 11, 11), float64],) {
  %771 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 11, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 11, 11), float64] */;
  %772 = acos(%771) /* ty=Tensor[(2, 11, 11), float64] */;
  (%772,)
}

def @func_3805(%var_3783: Tensor[(294), float64], %var_3794: Tensor[(13, 16, 9), int8]) -> (Tensor[(6, 7, 7), uint16], Tensor[(294), float64], Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), bool]) {
  %773 = cast(%var_3783, dtype="float64") /* ty=Tensor[(294), float64] */;
  %774 = reshape(%773, newshape=[6, 7, 7]) /* ty=Tensor[(6, 7, 7), float64] */;
  %775 = @func_1506(%774) /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float32]) */;
  %776 = @func_2067() /* ty=(Tensor[(13, 16, 9), int8],) */;
  %777 = %776.0;
  %778 = cast(%var_3794, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
  %779 = shape_of(%777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(%777, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %782 = %775.0;
  %783 = @func_2346() /* ty=Tensor[(6, 7, 7), float64] */;
  %784 = logical_and(%780, %781) /* ty=Tensor[(13, 16, 9), bool] */;
  (%782, %var_3783, %783, %784)
}

def @func_2611() -> Tensor[(6, 7, 7), float64] {
  @func_2609() /* ty=Tensor[(6, 7, 7), float64] */
}

def @func_1538() -> (Tensor[(10, 1, 11), float32],) {
  %787 = fn () -> (Tensor[(10, 1, 11), float32],) {
    %785 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 1, 11), float32] */, dtype="float32") /* ty=Tensor[(10, 1, 11), float32] */;
    %786 = erf(%785) /* ty=Tensor[(10, 1, 11), float32] */;
    (%786,)
  };
  %787() /* ty=(Tensor[(10, 1, 11), float32],) */
}

def @func_1675(%var_1643: int32, %var_1644: Tensor[(10, 8, 16), int32]) -> Tensor[(10, 8, 16), float64] {
  %788 = cast(%var_1643, dtype="int32") /* ty=int32 */;
  %789 = cast(%var_1644, dtype="int32") /* ty=Tensor[(10, 8, 16), int32] */;
  %790 = add(%788, %789) /* ty=Tensor[(10, 8, 16), int32] */;
  %791 = cast(%790, dtype="float64") /* ty=Tensor[(10, 8, 16), float64] */;
  atan(%791) /* ty=Tensor[(10, 8, 16), float64] */
}

def @func_5658() -> Tensor[(6, 7, 7), uint16] {
  %793 = fn () -> Tensor[(6, 7, 7), uint16] {
    %792 = @func_3046() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) */;
    %792.0
  };
  %793() /* ty=Tensor[(6, 7, 7), uint16] */
}

def @func_6384(%var_6379: Tensor[(12, 2), bool], %var_6380: Tensor[(216), bool]) -> (Tensor[(6, 7, 7), float64], Tensor[(1872), float32], Tensor[(6, 9, 4), bool], Tensor[(12, 2), bool], Tensor[(216), bool]) {
  %794 = @func_3017() /* ty=(Tensor[(240, ?), uint64], Tensor[(6, 7, 7), float64], Tensor[(240, ?), float32]) */;
  %795 = @func_1205() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) */;
  %796 = cast(%var_6379, dtype="bool") /* ty=Tensor[(12, 2), bool] */;
  %797 = cast(%var_6380, dtype="bool") /* ty=Tensor[(216), bool] */;
  %798 = reshape(%796, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %799 = reshape(%797, newshape=[6, 9, 4]) /* ty=Tensor[(6, 9, 4), bool] */;
  %800 = @func_2657(%798, %799) /* ty=(Tensor[(6, 9, 4), bool],) */;
  %801 = %794.1;
  %802 = %795.1;
  %803 = %800.0;
  (%801, %802, %803, %var_6379, %var_6380)
}

def @func_5003() -> (Tensor[(6, 7, 7), uint16], Tensor[(240, ?), float32]) {
  %804 = @func_4087() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), uint16], int32) */;
  %805 = @func_2323() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240, 1), float64], Tensor[(6, 7, 7), bool]) */;
  %806 = %805.1;
  %807 = cast(%806, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
  %808 = erf(%807) /* ty=Tensor[(240, 1), float64] */;
  %809 = cast(%806, dtype="float32") /* ty=Tensor[(240, 1), float32] */;
  %810 = shape_of(%808, dtype="int32") /* ty=Tensor[(2), int32] */;
  %811 = cast(%808, dtype="float32") /* ty=Tensor[(240, 1), float32] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %813 = %804.2;
  %814 = divide(%811, %812) /* ty=Tensor[(240, ?), float32] */;
  (%813, %814)
}

def @func_1800() -> (Tensor[(6, 7, 7), float64],) {
  @func_1798() /* ty=(Tensor[(6, 7, 7), float64],) */
}

def @func_3048() -> (Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) {
  @func_3046() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) */
}

def @func_3018() -> (Tensor[(240, ?), uint64], Tensor[(6, 7, 7), float64], Tensor[(240, ?), float32]) {
  %838 = fn () -> (Tensor[(240, ?), uint64], Tensor[(6, 7, 7), float64], Tensor[(240, ?), float32]) {
    %815 = @func_2323() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240, 1), float64], Tensor[(6, 7, 7), bool]) */;
    %816 = %815.1;
    %817 = cast(%816, dtype="float32") /* ty=Tensor[(240, 1), float32] */;
    %818 = sin(%817) /* ty=Tensor[(240, 1), float32] */;
    %819 = cast(%816, dtype="uint8") /* ty=Tensor[(240, 1), uint8] */;
    %820 = shape_of(%818, dtype="int32") /* ty=Tensor[(2), int32] */;
    %821 = cast(%818, dtype="uint8") /* ty=Tensor[(240, 1), uint8] */;
    %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %823 = logical_xor(%821, %822) /* ty=Tensor[(240, ?), uint8] */;
    %824 = cast(%816, dtype="uint64") /* ty=Tensor[(240, 1), uint64] */;
    %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(2), int32] */;
    %826 = cast(%823, dtype="uint64") /* ty=Tensor[(240, ?), uint64] */;
    %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %828 = @func_2413() /* ty=(Tensor[(6, 7, 7), float64],) */;
    %829 = cast(%816, dtype="int32") /* ty=Tensor[(240, 1), int32] */;
    %830 = shape_of(%823, dtype="int32") /* ty=Tensor[(2), int32] */;
    %831 = cast(%823, dtype="int32") /* ty=Tensor[(240, ?), int32] */;
    %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %833 = multiply(%831, %832) /* ty=Tensor[(240, ?), int32] */;
    %834 = cast(%833, dtype="float32") /* ty=Tensor[(240, ?), float32] */;
    %835 = bitwise_or(%826, %827) /* ty=Tensor[(240, ?), uint64] */;
    %836 = %828.0;
    %837 = tan(%834) /* ty=Tensor[(240, ?), float32] */;
    (%835, %836, %837)
  };
  %838() /* ty=(Tensor[(240, ?), uint64], Tensor[(6, 7, 7), float64], Tensor[(240, ?), float32]) */
}

def @func_4711() -> (Tensor[(6, 7, 7), float64],) {
  %839 = @func_2609() /* ty=Tensor[(6, 7, 7), float64] */;
  (%839,)
}

def @func_1073() -> (Tensor[(6, 7, 7), float64],) {
  @func_1071() /* ty=(Tensor[(6, 7, 7), float64],) */
}

def @func_5962() -> (Tensor[(6, 7, 7), uint8],) {
  %840 = @func_5747() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), uint8], Tensor[(240, 12), uint32]) */;
  %841 = %840.1;
  (%841,)
}

def @func_4491() -> (Tensor[(13, 16, 9), int8],) {
  %844 = fn () -> (Tensor[(13, 16, 9), int8],) {
    %842 = @func_2067() /* ty=(Tensor[(13, 16, 9), int8],) */;
    %843 = %842.0;
    (%843,)
  };
  %844() /* ty=(Tensor[(13, 16, 9), int8],) */
}

def @func_1207() -> (Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) {
  @func_1205() /* ty=(Tensor[(13, 16, 9), float64], Tensor[(1872), float32], Tensor[(6, 7, 7), float32]) */
}

def @func_5893() -> (Tensor[(6, 7, 7), float64],) {
  @func_5891() /* ty=(Tensor[(6, 7, 7), float64],) */
}

def @func_3944() -> (Tensor[(10, 1, 11), float32], Tensor[(6, 7, 7), float64]) {
  %845 = @func_1537() /* ty=(Tensor[(10, 1, 11), float32],) */;
  %846 = @func_1071() /* ty=(Tensor[(6, 7, 7), float64],) */;
  %847 = %845.0;
  %848 = %846.0;
  (%847, %848)
}

def @func_2636() -> (Tensor[(6, 7, 7), bool],) {
  @func_2634() /* ty=(Tensor[(6, 7, 7), bool],) */
}

def @func_1313() -> (Tensor[(6, 7, 7), float64],) {
  @func_1311() /* ty=(Tensor[(6, 7, 7), float64],) */
}

def @func_2294(%var_2287: Tensor[(10, 14, 11), float32]) -> (Tensor[(10, 14, 11), float64], Tensor[(1872), float32]) {
  %849 = @func_1537() /* ty=(Tensor[(10, 1, 11), float32],) */;
  %850 = %849.0;
  %851 = cast(%850, dtype="float64") /* ty=Tensor[(10, 1, 11), float64] */;
  %852 = cast(%var_2287, dtype="float64") /* ty=Tensor[(10, 14, 11), float64] */;
  %853 = @func_1407() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) */;
  %854 = divide(%851, %852) /* ty=Tensor[(10, 14, 11), float64] */;
  %855 = %853.2;
  (%854, %855)
}

def @func_510(%var_504: Tensor[(14, 9, 4), float64], %var_505: Tensor[(14, 9, 4), float64]) -> Tensor[(14, 9, 4), float64] {
  %856 = cast(%var_505, dtype="float64") /* ty=Tensor[(14, 9, 4), float64] */;
  %857 = shape_of(%var_504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %858 = cast(%var_504, dtype="float64") /* ty=Tensor[(14, 9, 4), float64] */;
  %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  multiply(%858, %859) /* ty=Tensor[(14, 9, 4), float64] */
}

def @func_5749() -> (Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), uint8], Tensor[(240, 12), uint32]) {
  @func_5747() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), uint8], Tensor[(240, 12), uint32]) */
}

def @func_2448() -> (Tensor[(9, 5, 10), int8],) {
  %862 = fn () -> (Tensor[(9, 5, 10), int8],) {
    %860 = @func_1280() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), float64], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(6, 7, 7), float64], Tensor[(5, 90), float64]) */;
    %861 = %860.1;
    (%861,)
  };
  %862() /* ty=(Tensor[(9, 5, 10), int8],) */
}

def @func_6032() -> Tensor[(20), float64] {
  @func_6030() /* ty=Tensor[(20), float64] */
}

def @func_1282() -> (Tensor[(6, 7, 7), float64], Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), float64], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(6, 7, 7), float64], Tensor[(5, 90), float64]) {
  @func_1280() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), float64], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(6, 7, 7), float64], Tensor[(5, 90), float64]) */
}

def @func_457(%var_455: Tensor[(9, 5, 10), float64], %var_456: Tensor[(9, 5, 10), float64]) -> (Tensor[(9, 5, 10), float64], Tensor[(9, 5, 10), int8]) {
  @func_453(%var_455, %var_456) /* ty=(Tensor[(9, 5, 10), float64], Tensor[(9, 5, 10), int8]) */
}

def @func_4671() -> Tensor[(6, 7, 7), float64] {
  %864 = fn () -> Tensor[(6, 7, 7), float64] {
    %863 = @func_1798() /* ty=(Tensor[(6, 7, 7), float64],) */;
    %863.0
  };
  %864() /* ty=Tensor[(6, 7, 7), float64] */
}

def @func_2463(%var_2462: Tensor[(6, 7, 7), float64]) -> (Tensor[(6, 7, 7), bool],) {
  %872 = fn (%var_2456: Tensor[(6, 7, 7), float64]) -> (Tensor[(6, 7, 7), bool],) {
    %865 = @func_1798() /* ty=(Tensor[(6, 7, 7), float64],) */;
    %866 = %865.0;
    %867 = cast(%var_2456, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
    %868 = shape_of(%866, dtype="int32") /* ty=Tensor[(3), int32] */;
    %869 = cast(%866, dtype="bool") /* ty=Tensor[(6, 7, 7), bool] */;
    %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %871 = not_equal(%869, %870) /* ty=Tensor[(6, 7, 7), bool] */;
    (%871,)
  };
  %872(%var_2462) /* ty=(Tensor[(6, 7, 7), bool],) */
}

def @func_5287() -> Tensor[(6, 7, 7), float64] {
  @func_5285() /* ty=Tensor[(6, 7, 7), float64] */
}

def @func_6082() -> (Tensor[(10, 1, 11), float32],) {
  @func_6080() /* ty=(Tensor[(10, 1, 11), float32],) */
}

def @func_6751(%var_6749: int32) -> (Tensor[(1872), float32], int32, int32) {
  @func_6748(%var_6749) /* ty=(Tensor[(1872), float32], int32, int32) */
}

def @func_7044() -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32], Tensor[(9, 5, 10), float64], Tensor[(6, 7, 7), float64]) {
  %873 = @func_1280() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(9, 5, 10), int8], Tensor[(6, 7, 7), float64], Tensor[(14, 9, 4), float64], Tensor[(504), float64], Tensor[(6, 7, 7), float64], Tensor[(5, 90), float64]) */;
  %874 = @func_2265() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float32]) */;
  %875 = %874.1;
  %876 = cast(meta[relay.Constant][44] /* ty=Tensor[(6, 7, 7), float32] */, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %877 = shape_of(%875, dtype="int32") /* ty=Tensor[(3), int32] */;
  %878 = cast(%875, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %880 = @func_5848() /* ty=(Tensor[(9, 5, 10), float64],) */;
  %881 = %873.0;
  %882 = divide(%878, %879) /* ty=Tensor[(6, 7, 7), float32] */;
  %883 = %880.0;
  %884 = @func_4670() /* ty=Tensor[(6, 7, 7), float64] */;
  (%881, %882, %883, %884)
}

def @func_1141() -> (Tensor[(6, 7, 7), float64],) {
  %887 = fn () -> (Tensor[(6, 7, 7), float64],) {
    %885 = @func_1071() /* ty=(Tensor[(6, 7, 7), float64],) */;
    %886 = %885.0;
    (%886,)
  };
  %887() /* ty=(Tensor[(6, 7, 7), float64],) */
}

def @func_3533() -> (Tensor[(9, 5, 10), float64],) {
  @func_3531() /* ty=(Tensor[(9, 5, 10), float64],) */
}

def @func_6113() -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64], Tensor[(1872), float64]) {
  %893 = fn () -> (Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64], Tensor[(1872), float64]) {
    %888 = @func_3046() /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), float64]) */;
    %889 = @func_4739() /* ty=(Tensor[(6, 7, 7), float32], Tensor[(1, 2, 10), float64], Tensor[(20), float64], Tensor[(1872), float64]) */;
    %890 = @func_5526() /* ty=Tensor[(6, 7, 7), float64] */;
    %891 = %888.1;
    %892 = %889.3;
    (%890, %891, %892)
  };
  %893() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(6, 7, 7), float64], Tensor[(1872), float64]) */
}

def @func_2508() -> (Tensor[(13, 16, 9), int8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), bool]) {
  @func_2506() /* ty=(Tensor[(13, 16, 9), int8], Tensor[(6, 7, 7), uint16], Tensor[(6, 7, 7), bool]) */
}

def @func_3735() -> (Tensor[(6, 7, 7), bool], Tensor[(1872), float64]) {
  %898 = fn () -> (Tensor[(6, 7, 7), bool], Tensor[(1872), float64]) {
    %894 = @func_2323() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240, 1), float64], Tensor[(6, 7, 7), bool]) */;
    %895 = @func_3556() /* ty=(Tensor[(1872), float64],) */;
    %896 = %894.2;
    %897 = %895.0;
    (%896, %897)
  };
  %898() /* ty=(Tensor[(6, 7, 7), bool], Tensor[(1872), float64]) */
}

def @func_3809(%var_3807: Tensor[(294), float64], %var_3808: Tensor[(13, 16, 9), int8]) -> (Tensor[(6, 7, 7), uint16], Tensor[(294), float64], Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), bool]) {
  @func_3805(%var_3807, %var_3808) /* ty=(Tensor[(6, 7, 7), uint16], Tensor[(294), float64], Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), bool]) */
}

def @func_3054() -> Tensor[(6, 7, 7), float64] {
  %899 = @func_1407() /* ty=(Tensor[(6, 7, 7), float64], Tensor[(13, 16, 9), float64], Tensor[(1872), float32]) */;
  %899.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen318/build/output.py", line 2483, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:06:39] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

