==========mod==========
#[version = "0.0.5"]
def @func_6323() -> (Tensor[(7, 6, 12), float32],) {
  %0 = @func_5370() /* ty=(Tensor[(7, 6, 12), float32], int32, int32) */;
  %1 = %0.0;
  (%1,)
}

def @func_9180() -> (Tensor[(3, 4, 16), uint8], int32) {
  %2 = @func_4490() /* ty=(Tensor[(3, 4, 16), uint8],) */;
  %3 = @func_5212() /* ty=(int32, Tensor[(192), float64]) */;
  %4 = %2.0;
  %5 = %3.0;
  (%4, %5)
}

def @func_3170() -> (Tensor[(7, 6, 12), float64],) {
  %6 = @func_3079() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %7 = %6.0;
  %8 = cast(%7, dtype="float64") /* ty=Tensor[(7, 6, 12), float64] */;
  %9 = log2(%8) /* ty=Tensor[(7, 6, 12), float64] */;
  (%9,)
}

def @func_8307(%var_8303: Tensor[(336), int64]) -> (Tensor[(192), float64], Tensor[(224), uint16], Tensor[(336), int64], Tensor[(224), uint16]) {
  %10 = @func_4067() /* ty=(Tensor[(3, 4, 16), float64], Tensor[(192), float64], Tensor[(7, 6, 12), int16]) */;
  %11 = cast(%var_8303, dtype="int64") /* ty=Tensor[(336), int64] */;
  %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(224), uint16] */, dtype="uint16") /* ty=Tensor[(224), uint16] */;
  %13 = reshape(%11, newshape=[7, 4, 12]) /* ty=Tensor[(7, 4, 12), int64] */;
  %14 = reshape(%12, newshape=[224]) /* ty=Tensor[(224), uint16] */;
  %15 = @func_2559(%13, %14) /* ty=(Tensor[(7, 4, 12), bool], Tensor[(4, 8, 7), uint16], Tensor[(224), uint16]) */;
  %16 = %10.1;
  %17 = %15.2;
  (%16, %17, %var_8303, meta[relay.Constant][0] /* ty=Tensor[(224), uint16] */)
}

def @func_3264(%var_3196: int32) -> (Tensor[(7, 6, 12), float32], Tensor[(770), uint64], int32, Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], int32, Tensor[(192), float64], Tensor[(48, 4), float64], Tensor[(7, 6, 12), float32]) {
  %18 = @func_2731() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %19 = cast(%var_3196, dtype="int32") /* ty=int32 */;
  %20 = reshape(%19, newshape=[]) /* ty=int32 */;
  %21 = @func_3033(%20) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(8, 6, 4), bool], Tensor[(770), uint64], int32) */;
  %22 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %23 = @func_3009() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %24 = @func_2997() /* ty=(int32,) */;
  %25 = cast(meta[relay.Constant][1] /* ty=Tensor[(48, 4), float64] */, dtype="float64") /* ty=Tensor[(48, 4), float64] */;
  %26 = reshape(%25, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %27 = @func_2490(%26) /* ty=(Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(3, 4, 16), float64], Tensor[(7, 6, 12), float32]) */;
  %28 = @func_2731() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %29 = %18.0;
  %30 = %21.2;
  %31 = %22.0;
  %32 = %23.0;
  %33 = %24.0;
  %34 = %27.1;
  %35 = %28.0;
  (%29, %30, %var_3196, %31, %32, %33, %34, meta[relay.Constant][1] /* ty=Tensor[(48, 4), float64] */, %35)
}

def @func_6004() -> (Tensor[(7, 6, 12), int16],) {
  %36 = @func_4690() /* ty=(Tensor[(7, 6, 12), int16],) */;
  %37 = %36.0;
  (%37,)
}

def @func_5537(%var_5476: Tensor[(112), float32]) -> (Tensor[(112), float32], Tensor[(2, 8, 7), int8], Tensor[(2, 8, 7), float64], int32) {
  %38 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
  %39 = %38.2;
  %40 = cast(%39, dtype="float32") /* ty=float32 */;
  %41 = cast(%var_5476, dtype="float32") /* ty=Tensor[(112), float32] */;
  %42 = reshape(%40, newshape=[]) /* ty=float32 */;
  %43 = reshape(%41, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float32] */;
  %44 = @func_1589(%42, %43) /* ty=Tensor[(2, 8, 7), float32] */;
  %45 = cast(%44, dtype="float64") /* ty=Tensor[(2, 8, 7), float64] */;
  %46 = sinh(%45) /* ty=Tensor[(2, 8, 7), float64] */;
  %47 = cast(%46, dtype="int8") /* ty=Tensor[(2, 8, 7), int8] */;
  %48 = cast(%39, dtype="int8") /* ty=int8 */;
  %49 = cast(%46, dtype="float64") /* ty=Tensor[(2, 8, 7), float64] */;
  %50 = bitwise_or(%47, %48) /* ty=Tensor[(2, 8, 7), int8] */;
  %51 = acosh(%49) /* ty=Tensor[(2, 8, 7), float64] */;
  %52 = @func_3629() /* ty=int32 */;
  (%var_5476, %50, %51, %52)
}

def @func_8954() -> (Tensor[(8, 3, 1), bool], Tensor[(16, 7, 5), uint32]) {
  %53 = @func_7119() /* ty=(Tensor[(8, 3, 1), bool],) */;
  %54 = %53.0;
  %55 = @func_6725() /* ty=Tensor[(16, 7, 5), uint32] */;
  (%54, %55)
}

def @func_2731() -> (Tensor[(7, 6, 12), float32],) {
  %56 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
  %57 = %56.0;
  %58 = cast(%57, dtype="float32") /* ty=Tensor[(7, 6, 12), float32] */;
  %59 = acos(%58) /* ty=Tensor[(7, 6, 12), float32] */;
  (%59,)
}

def @func_5894() -> (Tensor[(7, 6, 12), float32],) {
  %60 = @func_3009() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %61 = %60.0;
  (%61,)
}

def @func_10012(%var_10007: Tensor[(60), float32]) -> (Tensor[(4, 4, 7), float64], Tensor[(10, 3, 2), uint16], Tensor[(60), float32]) {
  %62 = @func_3830() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) */;
  %63 = %62.1;
  %64 = cast(%63, dtype="float64") /* ty=Tensor[(4, 4, 7), float64] */;
  %65 = cast(%var_10007, dtype="float32") /* ty=Tensor[(60), float32] */;
  %66 = cast(%var_10007, dtype="float32") /* ty=Tensor[(60), float32] */;
  %67 = cast(%var_10007, dtype="bool") /* ty=Tensor[(60), bool] */;
  %68 = reshape(%65, newshape=[10, 3, 2]) /* ty=Tensor[(10, 3, 2), float32] */;
  %69 = reshape(%66, newshape=[10, 3, 2]) /* ty=Tensor[(10, 3, 2), float32] */;
  %70 = reshape(%67, newshape=[10, 3, 2]) /* ty=Tensor[(10, 3, 2), bool] */;
  %71 = @func_9239(%68, %69, %70) /* ty=(Tensor[(10, 3, 2), uint16], Tensor[(10, 3, 2), float64]) */;
  %72 = rsqrt(%64) /* ty=Tensor[(4, 4, 7), float64] */;
  %73 = %71.0;
  (%72, %73, %var_10007)
}

def @func_10840() -> Tensor[(7, 6, 12), float32] {
  @func_4434() /* ty=Tensor[(7, 6, 12), float32] */
}

def @func_8276(%var_8246: Tensor[(6, 13, 14), int32]) -> (Tensor[(6, 13, 14), bool], Tensor[(6, 13, 14), int16]) {
  %74 = @func_5739() /* ty=(int32,) */;
  %75 = %74.0;
  %76 = cast(%75, dtype="int8") /* ty=int8 */;
  %77 = cast(%var_8246, dtype="int8") /* ty=Tensor[(6, 13, 14), int8] */;
  %78 = multiply(%76, %77) /* ty=Tensor[(6, 13, 14), int8] */;
  %79 = cast(%78, dtype="bool") /* ty=Tensor[(6, 13, 14), bool] */;
  %80 = cast(%75, dtype="bool") /* ty=bool */;
  %81 = cast(%78, dtype="int16") /* ty=Tensor[(6, 13, 14), int16] */;
  %82 = cast(%75, dtype="int16") /* ty=int16 */;
  %83 = logical_and(%79, %80) /* ty=Tensor[(6, 13, 14), bool] */;
  %84 = maximum(%81, %82) /* ty=Tensor[(6, 13, 14), int16] */;
  (%83, %84)
}

def @func_4556(%var_4547: Tensor[(144, 2), uint64]) -> (Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int16], Tensor[(16, 3, 6), uint64], Tensor[(48), uint64], Tensor[(144, 2), uint64]) {
  %85 = @func_4514() /* ty=(Tensor[(3, 4, 16), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32]) */;
  %86 = @func_4330() /* ty=(Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), float32]) */;
  %87 = cast(meta[relay.Constant][2] /* ty=Tensor[(48), uint64] */, dtype="uint64") /* ty=Tensor[(48), uint64] */;
  %88 = cast(%var_4547, dtype="uint64") /* ty=Tensor[(144, 2), uint64] */;
  %89 = reshape(%87, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), uint64] */;
  %90 = reshape(%88, newshape=[16, 3, 6]) /* ty=Tensor[(16, 3, 6), uint64] */;
  %91 = @func_276(%89, %90) /* ty=(Tensor[(16, 3, 6), uint64],) */;
  %92 = %85.2;
  %93 = %86.0;
  %94 = %91.0;
  (%92, %93, %94, meta[relay.Constant][2] /* ty=Tensor[(48), uint64] */, %var_4547)
}

def @func_11274() -> (Tensor[(7, 6, 12), float32],) {
  %95 = @func_6651() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64]) */;
  %96 = %95.0;
  (%96,)
}

def @func_1528(%var_1493: float32, %var_1494: Tensor[(3, 13, 7), float32]) -> (Tensor[(3, 13, 7), float32],) {
  %97 = cast(%var_1493, dtype="float32") /* ty=float32 */;
  %98 = cast(%var_1494, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %99 = divide(%97, %98) /* ty=Tensor[(3, 13, 7), float32] */;
  (%99,)
}

def @func_10698(%var_10668: Tensor[(1, 4, 3), int32]) -> (Tensor[(1, 4, 3), bool], Tensor[(7, 6, 12), bool], Tensor[(1, 4, 3), uint8], Tensor[(1, 4, 3), float64], int32) {
  %100 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
  %101 = %100.2;
  %102 = cast(%101, dtype="bool") /* ty=bool */;
  %103 = cast(%var_10668, dtype="bool") /* ty=Tensor[(1, 4, 3), bool] */;
  %104 = cast(%101, dtype="uint8") /* ty=uint8 */;
  %105 = cast(%var_10668, dtype="uint8") /* ty=Tensor[(1, 4, 3), uint8] */;
  %106 = cast(%101, dtype="float64") /* ty=float64 */;
  %107 = cast(%var_10668, dtype="float64") /* ty=Tensor[(1, 4, 3), float64] */;
  %108 = @func_7601() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(192), float64], int32, int32, Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64], Tensor[(24, 2), uint64], Tensor[(288), uint64], int32) */;
  %109 = greater(%102, %103) /* ty=Tensor[(1, 4, 3), bool] */;
  %110 = @func_4195() /* ty=Tensor[(7, 6, 12), bool] */;
  %111 = left_shift(%104, %105) /* ty=Tensor[(1, 4, 3), uint8] */;
  %112 = floor_mod(%106, %107) /* ty=Tensor[(1, 4, 3), float64] */;
  %113 = %108.3;
  (%109, %110, %111, %112, %113)
}

def @func_10403() -> (Tensor[(2, 8, 7), float32],) {
  %114 = @func_9382() /* ty=(Tensor[(2, 8, 7), float32],) */;
  %115 = %114.0;
  (%115,)
}

def @func_5185(%var_5167: Tensor[(12, 4), uint64], %var_5168: Tensor[(288), uint64]) -> (Tensor[(7, 6, 12), float64], Tensor[(48), uint64], Tensor[(1650), uint8], Tensor[(12, 4), uint64], Tensor[(288), uint64]) {
  %116 = @func_4845() /* ty=(Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(192), float64]) */;
  %117 = cast(meta[relay.Constant][3] /* ty=Tensor[(1650), uint8] */, dtype="uint8") /* ty=Tensor[(1650), uint8] */;
  %118 = cast(meta[relay.Constant][3] /* ty=Tensor[(1650), uint8] */, dtype="uint8") /* ty=Tensor[(1650), uint8] */;
  %119 = cast(%var_5167, dtype="uint64") /* ty=Tensor[(12, 4), uint64] */;
  %120 = cast(%var_5168, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %121 = reshape(%117, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), uint8] */;
  %122 = reshape(%118, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), uint8] */;
  %123 = reshape(%119, newshape=[48]) /* ty=Tensor[(48), uint64] */;
  %124 = reshape(%120, newshape=[144, 2]) /* ty=Tensor[(144, 2), uint64] */;
  %125 = @func_962(%121, %122, %123, %124) /* ty=(Tensor[(15, 10, 11), uint8], Tensor[(48), uint64], Tensor[(144, 2), uint64], Tensor[(16, 3, 6), float32]) */;
  %126 = %116.0;
  %127 = %125.1;
  (%126, %127, meta[relay.Constant][3] /* ty=Tensor[(1650), uint8] */, %var_5167, %var_5168)
}

def @func_6114(%var_6103: Tensor[(16, 7, 14), float64]) -> Tensor[(16, 7, 14), float64] {
  %128 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 7, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
  %129 = shape_of(%var_6103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%var_6103, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%130, %131) /* ty=Tensor[(16, 7, 14), float64] */
}

def @func_5370() -> (Tensor[(7, 6, 12), float32], int32, int32) {
  %132 = @func_4231() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %133 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %134 = reshape(%133, newshape=[]) /* ty=int32 */;
  %135 = @func_3264(%134) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(770), uint64], int32, Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], int32, Tensor[(192), float64], Tensor[(48, 4), float64], Tensor[(7, 6, 12), float32]) */;
  %136 = %132.0;
  %137 = %135.5;
  (%136, %137, 7 /* ty=int32 */)
}

def @func_4451() -> Tensor[(192), float64] {
  %138 = @func_4175() /* ty=(Tensor[(192), float64],) */;
  %138.0
}

def @func_6651() -> (Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64]) {
  %139 = @func_5014() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %140 = @func_5747() /* ty=Tensor[(7, 6, 12), float32] */;
  %141 = cast(%140, dtype="float64") /* ty=Tensor[(7, 6, 12), float64] */;
  %142 = %139.0;
  %143 = atanh(%141) /* ty=Tensor[(7, 6, 12), float64] */;
  (%142, %143)
}

def @func_9641(%var_9633: Tensor[(9, 3, 8), int32]) -> (bool, Tensor[(9, 3, 8), uint8]) {
  %144 = @func_3508() /* ty=int32 */;
  %145 = cast(%144, dtype="bool") /* ty=bool */;
  %146 = reshape(%145, newshape=[]) /* ty=bool */;
  %147 = @func_8986(%146) /* ty=(Tensor[(192), float64], Tensor[(8, 6, 4), bool], bool, Tensor[(7, 6, 12), float32], int32) */;
  %148 = cast(%144, dtype="uint8") /* ty=uint8 */;
  %149 = cast(%var_9633, dtype="uint8") /* ty=Tensor[(9, 3, 8), uint8] */;
  %150 = %147.2;
  %151 = bitwise_xor(%148, %149) /* ty=Tensor[(9, 3, 8), uint8] */;
  (%150, %151)
}

def @func_9545() -> Tensor[(3, 4, 16), float64] {
  %152 = @func_4514() /* ty=(Tensor[(3, 4, 16), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32]) */;
  %153 = %152.0;
  %154 = cast(%153, dtype="float64") /* ty=Tensor[(3, 4, 16), float64] */;
  sinh(%154) /* ty=Tensor[(3, 4, 16), float64] */
}

def @func_4732(%var_4726: Tensor[(3, 4, 16), uint8]) -> Tensor[(3, 4, 16), bool] {
  %155 = @func_4490() /* ty=(Tensor[(3, 4, 16), uint8],) */;
  %156 = %155.0;
  %157 = cast(%var_4726, dtype="bool") /* ty=Tensor[(3, 4, 16), bool] */;
  %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%156, dtype="bool") /* ty=Tensor[(3, 4, 16), bool] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%159, %160) /* ty=Tensor[(3, 4, 16), bool] */
}

def @func_9682(%var_9677: bool) -> (Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), bool], Tensor[(7, 6, 12), float32], bool) {
  %161 = cast(%var_9677, dtype="bool") /* ty=bool */;
  %162 = reshape(%161, newshape=[]) /* ty=bool */;
  %163 = @func_8986(%162) /* ty=(Tensor[(192), float64], Tensor[(8, 6, 4), bool], bool, Tensor[(7, 6, 12), float32], int32) */;
  %164 = @func_6100() /* ty=Tensor[(7, 6, 12), float32] */;
  %165 = @func_4195() /* ty=Tensor[(7, 6, 12), bool] */;
  %166 = %163.3;
  (%164, %165, %166, %var_9677)
}

def @func_11407(%var_11403: Tensor[(1, 2240), uint8]) -> (int32, Tensor[(192), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(1, 2240), uint8]) {
  %167 = @func_4796() /* ty=(int32, Tensor[(3, 4, 16), bool], Tensor[(192), uint8]) */;
  %168 = @func_4313() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %169 = @func_4514() /* ty=(Tensor[(3, 4, 16), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32]) */;
  %170 = @func_4514() /* ty=(Tensor[(3, 4, 16), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32]) */;
  %171 = cast(%var_11403, dtype="uint8") /* ty=Tensor[(1, 2240), uint8] */;
  %172 = reshape(%171, newshape=[2240]) /* ty=Tensor[(2240), uint8] */;
  %173 = @func_5821(%172) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(24, 8), float64], Tensor[(7, 6, 12), float32]) */;
  %174 = @func_4926() /* ty=int32 */;
  %175 = %167.2;
  %176 = %168.0;
  %177 = %169.2;
  %178 = %170.1;
  %179 = %173.3;
  (%174, %175, %176, %177, %178, %179, %var_11403)
}

def @func_2819() -> (Tensor[(7, 6, 12), float32],) {
  %180 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %181 = %180.0;
  (%181,)
}

def @func_6725() -> Tensor[(16, 7, 5), uint32] {
  %182 = @func_6124() /* ty=(Tensor[(16, 7, 5), uint32],) */;
  %182.0
}

def @func_9148() -> (Tensor[(7, 6, 12), float32],) {
  %183 = @func_5014() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %184 = %183.0;
  (%184,)
}

def @func_3105() -> int32 {
  %185 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
  %185.2
}

def @func_2683() -> (Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) {
  %186 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %187 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %188 = reshape(%187, newshape=[]) /* ty=int32 */;
  %189 = @func_2624(%188) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(770), uint64], int32, Tensor[(112), int32], Tensor[(4, 4, 7), int32], Tensor[(7, 6, 12), float64]) */;
  %190 = %186.0;
  %191 = %189.0;
  (%190, %191, -2 /* ty=int32 */)
}

def @func_4690() -> (Tensor[(7, 6, 12), int16],) {
  %192 = @func_4330() /* ty=(Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), float32]) */;
  %193 = %192.0;
  (%193,)
}

def @func_7057(%var_7022: Tensor[(112), float32], %var_7048: Tensor[(1, 1650), uint8], %var_7050: Tensor[(288), uint64]) -> (Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float64], Tensor[(112), float32], Tensor[(7, 6, 12), float32], Tensor[(16, 3, 6), float32], Tensor[(1, 1650), uint8], Tensor[(48, 1), uint64], Tensor[(288), uint64]) {
  %194 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %195 = @func_4231() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %196 = cast(%var_7022, dtype="float32") /* ty=Tensor[(112), float32] */;
  %197 = reshape(%196, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %198 = @func_5537(%197) /* ty=(Tensor[(112), float32], Tensor[(2, 8, 7), int8], Tensor[(2, 8, 7), float64], int32) */;
  %199 = @func_3999() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %200 = cast(%var_7048, dtype="uint8") /* ty=Tensor[(1, 1650), uint8] */;
  %201 = cast(%var_7048, dtype="uint8") /* ty=Tensor[(1, 1650), uint8] */;
  %202 = cast(meta[relay.Constant][5] /* ty=Tensor[(48, 1), uint64] */, dtype="uint64") /* ty=Tensor[(48, 1), uint64] */;
  %203 = cast(%var_7050, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %204 = reshape(%200, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), uint8] */;
  %205 = reshape(%201, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), uint8] */;
  %206 = reshape(%202, newshape=[48]) /* ty=Tensor[(48), uint64] */;
  %207 = reshape(%203, newshape=[144, 2]) /* ty=Tensor[(144, 2), uint64] */;
  %208 = @func_962(%204, %205, %206, %207) /* ty=(Tensor[(15, 10, 11), uint8], Tensor[(48), uint64], Tensor[(144, 2), uint64], Tensor[(16, 3, 6), float32]) */;
  %209 = %194.0;
  %210 = %195.0;
  %211 = %198.2;
  %212 = %199.0;
  %213 = %208.3;
  (%209, %210, %211, %var_7022, %212, %213, %var_7048, meta[relay.Constant][5] /* ty=Tensor[(48, 1), uint64] */, %var_7050)
}

def @func_9952() -> (Tensor[(7, 6, 12), float64], int32) {
  %214 = @func_9471() /* ty=(Tensor[(7, 6, 12), float64],) */;
  %215 = @func_5050() /* ty=(int32, int32) */;
  %216 = %214.0;
  %217 = %215.1;
  (%216, %217)
}

def @func_5821(%var_5779: Tensor[(2240), uint8]) -> (Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(24, 8), float64], Tensor[(7, 6, 12), float32]) {
  %218 = cast(%var_5779, dtype="uint8") /* ty=Tensor[(2240), uint8] */;
  %219 = cast(meta[relay.Constant][6] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %220 = reshape(%218, newshape=[14, 10, 16]) /* ty=Tensor[(14, 10, 16), uint8] */;
  %221 = reshape(%219, newshape=[24, 8]) /* ty=Tensor[(24, 8), float64] */;
  %222 = @func_2284(%220, %221) /* ty=(Tensor[(14, 10, 16), float32], Tensor[(3, 4, 16), float64], Tensor[(24, 8), float64]) */;
  %223 = %222.2;
  %224 = cast(meta[relay.Constant][6] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(2), int32] */;
  %226 = cast(%223, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %228 = @func_5747() /* ty=Tensor[(7, 6, 12), float32] */;
  %229 = subtract(%226, %227) /* ty=Tensor[(24, 8), float64] */;
  %230 = @func_5747() /* ty=Tensor[(7, 6, 12), float32] */;
  (%228, %var_5779, %229, %230)
}

def @func_10721() -> (Tensor[(7, 6, 12), float32],) {
  %231 = @func_6756() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %232 = %231.0;
  (%232,)
}

def @func_10975() -> Tensor[(7, 6, 12), float32] {
  %233 = @func_8091() /* ty=(int32, Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(8, 3, 1), bool], Tensor[(2240), bool]) */;
  %233.1
}

def @func_8660() -> Tensor[(7, 6, 12), float32] {
  %234 = @func_5894() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %234.0
}

def @func_3421(%var_3415: Tensor[(770), uint64]) -> (Tensor[(4, 4, 7), int32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int32], Tensor[(7, 6, 12), float32], int32, Tensor[(770), uint64], int32) {
  %235 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
  %236 = @func_3058() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %237 = @func_3170() /* ty=(Tensor[(7, 6, 12), float64],) */;
  %238 = %237.0;
  %239 = cast(%238, dtype="float32") /* ty=Tensor[(7, 6, 12), float32] */;
  %240 = acosh(%239) /* ty=Tensor[(7, 6, 12), float32] */;
  %241 = cast(%240, dtype="float32") /* ty=Tensor[(7, 6, 12), float32] */;
  %242 = sinh(%241) /* ty=Tensor[(7, 6, 12), float32] */;
  %243 = cast(%242, dtype="int32") /* ty=Tensor[(7, 6, 12), int32] */;
  %244 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%240, dtype="int32") /* ty=Tensor[(7, 6, 12), int32] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %247 = @func_2819() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %248 = cast(%var_3415, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %249 = cast(%var_3415, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %250 = cast(9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %251 = %235.1;
  %252 = cast(%251, dtype="int32") /* ty=Tensor[(4, 4, 7), int32] */;
  %253 = reshape(%248, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
  %254 = reshape(%249, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
  %255 = reshape(%250, newshape=[]) /* ty=int32 */;
  %256 = reshape(%252, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %257 = @func_1007(%253, %254, %255, %256) /* ty=(Tensor[(4, 4, 7), int32], int32, Tensor[(112), int32], Tensor[(10, 7, 11), float64]) */;
  %258 = %236.0;
  %259 = add(%245, %246) /* ty=Tensor[(7, 6, 12), int32] */;
  %260 = %247.0;
  %261 = %257.1;
  (%251, %258, %259, %260, %261, %var_3415, 9 /* ty=int32 */)
}

def @func_3922() -> (int32, Tensor[(7, 6, 12), float32]) {
  %262 = @func_2997() /* ty=(int32,) */;
  %263 = @func_2819() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %264 = %262.0;
  %265 = %263.0;
  (%264, %265)
}

def @func_9471() -> (Tensor[(7, 6, 12), float64],) {
  %266 = @func_8009() /* ty=Tensor[(7, 6, 12), float64] */;
  (%266,)
}

def @func_6473(%var_6470: Tensor[(112), int32]) -> (Tensor[(7, 6, 12), bool], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) {
  %267 = @func_6004() /* ty=(Tensor[(7, 6, 12), int16],) */;
  %268 = %267.0;
  %269 = cast(%268, dtype="float32") /* ty=Tensor[(7, 6, 12), float32] */;
  %270 = cosh(%269) /* ty=Tensor[(7, 6, 12), float32] */;
  %271 = cast(%268, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %275 = cast(10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %276 = cast(%var_6470, dtype="int32") /* ty=Tensor[(112), int32] */;
  %277 = reshape(%275, newshape=[]) /* ty=int32 */;
  %278 = reshape(%276, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), int32] */;
  %279 = @func_54(%277, %278) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(4, 4, 7), bool]) */;
  %280 = equal(%273, %274) /* ty=Tensor[(7, 6, 12), bool] */;
  %281 = %279.1;
  (%280, %281, 10 /* ty=int32 */, %var_6470)
}

def @func_3830() -> (Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) {
  %282 = @func_2819() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %283 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %284 = cast(meta[relay.Constant][7] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %285 = reshape(%283, newshape=[]) /* ty=int32 */;
  %286 = reshape(%284, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), int32] */;
  %287 = @func_54(%285, %286) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(4, 4, 7), bool]) */;
  %288 = %282.0;
  %289 = %287.1;
  (%288, %289, -4 /* ty=int32 */, meta[relay.Constant][7] /* ty=Tensor[(112), int32] */)
}

def @func_4880(%var_4866: Tensor[(16, 8, 11), uint16], %var_4878: Tensor[(770), uint64]) -> (Tensor[(16, 8, 11), uint16], Tensor[(7, 6, 12), float32], Tensor[(770), uint64]) {
  %290 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 8, 11), uint16] */, dtype="uint16") /* ty=Tensor[(16, 8, 11), uint16] */;
  %291 = shape_of(%var_4866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%var_4866, dtype="uint16") /* ty=Tensor[(16, 8, 11), uint16] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %294 = cast(%var_4878, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %295 = reshape(%294, newshape=[770]) /* ty=Tensor[(770), uint64] */;
  %296 = @func_3421(%295) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int32], Tensor[(7, 6, 12), float32], int32, Tensor[(770), uint64], int32) */;
  %297 = bitwise_and(%292, %293) /* ty=Tensor[(16, 8, 11), uint16] */;
  %298 = %296.3;
  (%297, %298, %var_4878)
}

def @func_7407(%var_7336: Tensor[(4, 3, 13), float64]) -> (Tensor[(7, 6, 12), float32], Tensor[(4, 3, 13), float32]) {
  %299 = @func_6756() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %300 = cast(%var_7336, dtype="float64") /* ty=Tensor[(4, 3, 13), float64] */;
  %301 = cos(%300) /* ty=Tensor[(4, 3, 13), float64] */;
  %302 = cast(%301, dtype="bool") /* ty=Tensor[(4, 3, 13), bool] */;
  %303 = shape_of(%var_7336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%var_7336, dtype="bool") /* ty=Tensor[(4, 3, 13), bool] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %306 = equal(%304, %305) /* ty=Tensor[(4, 3, 13), bool] */;
  %307 = cast(%306, dtype="float32") /* ty=Tensor[(4, 3, 13), float32] */;
  %308 = %299.0;
  %309 = atanh(%307) /* ty=Tensor[(4, 3, 13), float32] */;
  (%308, %309)
}

def @func_7773(%var_7770: Tensor[(112), int32]) -> (Tensor[(192), float64], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) {
  %310 = @func_4175() /* ty=(Tensor[(192), float64],) */;
  %311 = cast(2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %312 = cast(%var_7770, dtype="int32") /* ty=Tensor[(112), int32] */;
  %313 = reshape(%311, newshape=[]) /* ty=int32 */;
  %314 = reshape(%312, newshape=[1, 112]) /* ty=Tensor[(1, 112), int32] */;
  %315 = @func_4601(%313, %314) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(1, 112), int32]) */;
  %316 = %310.0;
  %317 = %315.1;
  (%316, %317, 2 /* ty=int32 */, %var_7770)
}

def @func_3508() -> int32 {
  %318 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
  %318.2
}

def @func_3079() -> (Tensor[(7, 6, 12), float32],) {
  %319 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %320 = %319.0;
  (%320,)
}

def @func_8766(%var_8752: Tensor[(60, 14), float64]) -> (Tensor[(112), int32], Tensor[(7, 6, 12), float32], Tensor[(15, 7, 8), float64], Tensor[(60, 14), float64]) {
  %321 = @func_8052() /* ty=(Tensor[(112), int32], int32) */;
  %322 = @func_3708() /* ty=(Tensor[(7, 6, 12), float32], int32, Tensor[(2, 8, 7), float32], Tensor[(112), float32], int32) */;
  %323 = cast(%var_8752, dtype="float64") /* ty=Tensor[(60, 14), float64] */;
  %324 = reshape(%323, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), float64] */;
  %325 = @func_1365(%324) /* ty=(Tensor[(15, 7, 8), float64],) */;
  %326 = %321.0;
  %327 = %322.0;
  %328 = %325.0;
  (%326, %327, %328, %var_8752)
}

def @func_4796() -> (int32, Tensor[(3, 4, 16), bool], Tensor[(192), uint8]) {
  %329 = cast(meta[relay.Constant][9] /* ty=Tensor[(192), uint8] */, dtype="uint8") /* ty=Tensor[(192), uint8] */;
  %330 = reshape(%329, newshape=[3, 4, 16]) /* ty=Tensor[(3, 4, 16), uint8] */;
  %331 = @func_3629() /* ty=int32 */;
  %332 = @func_4732(%330) /* ty=Tensor[(3, 4, 16), bool] */;
  (%331, %332, meta[relay.Constant][9] /* ty=Tensor[(192), uint8] */)
}

def @func_5014() -> (Tensor[(7, 6, 12), float32],) {
  %333 = @func_4514() /* ty=(Tensor[(3, 4, 16), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32]) */;
  %334 = %333.2;
  (%334,)
}

def @func_10130(%var_10114: Tensor[(112), float32]) -> (Tensor[(6, 3, 16), float64], Tensor[(48, 1), uint64], Tensor[(112), float32], Tensor[(10, 165), uint8]) {
  %335 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 3, 16), float64] */, dtype="float64") /* ty=Tensor[(6, 3, 16), float64] */;
  %336 = cast(%var_10114, dtype="float32") /* ty=Tensor[(112), float32] */;
  %337 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 165), uint8] */, dtype="uint8") /* ty=Tensor[(10, 165), uint8] */;
  %338 = sinh(%335) /* ty=Tensor[(6, 3, 16), float64] */;
  %339 = cast(%338, dtype="uint64") /* ty=Tensor[(6, 3, 16), uint64] */;
  %340 = reshape(%336, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %341 = reshape(%337, newshape=[1, 1650]) /* ty=Tensor[(1, 1650), uint8] */;
  %342 = reshape(%339, newshape=[288]) /* ty=Tensor[(288), uint64] */;
  %343 = @func_7057(%340, %341, %342) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float64], Tensor[(112), float32], Tensor[(7, 6, 12), float32], Tensor[(16, 3, 6), float32], Tensor[(1, 1650), uint8], Tensor[(48, 1), uint64], Tensor[(288), uint64]) */;
  %344 = %343.7;
  (%338, %344, %var_10114, meta[relay.Constant][11] /* ty=Tensor[(10, 165), uint8] */)
}

def @func_2284(%var_2247: Tensor[(14, 10, 16), uint8], %var_2280: Tensor[(24, 8), float64]) -> (Tensor[(14, 10, 16), float32], Tensor[(3, 4, 16), float64], Tensor[(24, 8), float64]) {
  %345 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 10, 16), uint8] */, dtype="uint8") /* ty=Tensor[(14, 10, 16), uint8] */;
  %346 = shape_of(%var_2247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%var_2247, dtype="uint8") /* ty=Tensor[(14, 10, 16), uint8] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %349 = right_shift(%347, %348) /* ty=Tensor[(14, 10, 16), uint8] */;
  %350 = cast(%349, dtype="float32") /* ty=Tensor[(14, 10, 16), float32] */;
  %351 = cast(%var_2280, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %352 = reshape(%351, newshape=[3, 4, 16]) /* ty=Tensor[(3, 4, 16), float64] */;
  %353 = asin(%350) /* ty=Tensor[(14, 10, 16), float32] */;
  %354 = @func_1128(%352) /* ty=Tensor[(3, 4, 16), float64] */;
  (%353, %354, %var_2280)
}

def @func_1007(%var_995: Tensor[(10, 7, 11), uint64], %var_996: Tensor[(10, 7, 11), uint64], %var_1001: int32, %var_1002: Tensor[(112), int32]) -> (Tensor[(4, 4, 7), int32], int32, Tensor[(112), int32], Tensor[(10, 7, 11), float64]) {
  %355 = cast(%var_1001, dtype="int32") /* ty=int32 */;
  %356 = cast(%var_1002, dtype="int32") /* ty=Tensor[(112), int32] */;
  %357 = reshape(%355, newshape=[]) /* ty=int32 */;
  %358 = reshape(%356, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), int32] */;
  %359 = @func_54(%357, %358) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(4, 4, 7), bool]) */;
  %360 = cast(%var_996, dtype="uint64") /* ty=Tensor[(10, 7, 11), uint64] */;
  %361 = shape_of(%var_995, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%var_995, dtype="uint64") /* ty=Tensor[(10, 7, 11), uint64] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %364 = right_shift(%362, %363) /* ty=Tensor[(10, 7, 11), uint64] */;
  %365 = cast(%364, dtype="float64") /* ty=Tensor[(10, 7, 11), float64] */;
  %366 = shape_of(%var_995, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%var_995, dtype="float64") /* ty=Tensor[(10, 7, 11), float64] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %369 = %359.0;
  %370 = floor_divide(%367, %368) /* ty=Tensor[(10, 7, 11), float64] */;
  (%369, %var_1001, %var_1002, %370)
}

def @func_7801() -> (Tensor[(7, 6, 12), float32],) {
  %371 = @func_4313() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %372 = %371.0;
  (%372,)
}

def @func_4313() -> (Tensor[(7, 6, 12), float32],) {
  %373 = @func_4231() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %374 = %373.0;
  (%374,)
}

def @func_7909() -> int32 {
  %375 = @func_5427() /* ty=(int32,) */;
  %375.0
}

def @func_7493(%var_7478: Tensor[(7, 6, 12), float32]) -> (Tensor[(7, 6, 12), bool],) {
  %376 = @func_3009() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %377 = %376.0;
  %378 = cast(%var_7478, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%377, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %382 = greater(%380, %381) /* ty=Tensor[(7, 6, 12), bool] */;
  (%382,)
}

def @func_8986(%var_8970: bool) -> (Tensor[(192), float64], Tensor[(8, 6, 4), bool], bool, Tensor[(7, 6, 12), float32], int32) {
  %383 = cast(%var_8970, dtype="bool") /* ty=bool */;
  %384 = reshape(%383, newshape=[]) /* ty=bool */;
  %385 = @func_869(%384) /* ty=(Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool]) */;
  %386 = @func_4330() /* ty=(Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), float32]) */;
  %387 = @func_2997() /* ty=(int32,) */;
  %388 = @func_4451() /* ty=Tensor[(192), float64] */;
  %389 = %385.0;
  %390 = %386.1;
  %391 = %387.0;
  (%388, %389, %var_8970, %390, %391)
}

def @func_10196() -> (Tensor[(15, 15, 14), float32], Tensor[(10, 4, 14), bool], Tensor[(560), float32], Tensor[(2240), uint8], Tensor[(7, 6, 12), float32], Tensor[(24), bool]) {
  %392 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 15, 14), float32] */, dtype="float32") /* ty=Tensor[(15, 15, 14), float32] */;
  %393 = cast(meta[relay.Constant][14] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %394 = cast(meta[relay.Constant][14] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %395 = reshape(%393, newshape=[10, 4, 14]) /* ty=Tensor[(10, 4, 14), float32] */;
  %396 = reshape(%394, newshape=[10, 4, 14]) /* ty=Tensor[(10, 4, 14), float32] */;
  %397 = @func_9413(%395, %396) /* ty=(Tensor[(10, 4, 14), bool],) */;
  %398 = @func_8091() /* ty=(int32, Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(8, 3, 1), bool], Tensor[(2240), bool]) */;
  %399 = cast(meta[relay.Constant][15] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %400 = reshape(%399, newshape=[8, 3, 1]) /* ty=Tensor[(8, 3, 1), bool] */;
  %401 = @func_10062(%400) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(8, 3, ?), uint8]) */;
  %402 = log(%392) /* ty=Tensor[(15, 15, 14), float32] */;
  %403 = %397.0;
  %404 = %398.2;
  %405 = %401.0;
  (%402, %403, meta[relay.Constant][14] /* ty=Tensor[(560), float32] */, %404, %405, meta[relay.Constant][15] /* ty=Tensor[(24), bool] */)
}

def @func_2380(%var_2369: Tensor[(4, 8, 7), uint16], %var_2370: Tensor[(4, 8, 7), uint16]) -> Tensor[(4, 8, 7), uint16] {
  %406 = cast(%var_2370, dtype="uint16") /* ty=Tensor[(4, 8, 7), uint16] */;
  %407 = shape_of(%var_2369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%var_2369, dtype="uint16") /* ty=Tensor[(4, 8, 7), uint16] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  left_shift(%408, %409) /* ty=Tensor[(4, 8, 7), uint16] */
}

def @func_9413(%var_9399: Tensor[(10, 4, 14), float32], %var_9400: Tensor[(10, 4, 14), float32]) -> (Tensor[(10, 4, 14), bool],) {
  %410 = cast(%var_9400, dtype="bool") /* ty=Tensor[(10, 4, 14), bool] */;
  %411 = shape_of(%var_9399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %412 = cast(%var_9399, dtype="bool") /* ty=Tensor[(10, 4, 14), bool] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %414 = greater_equal(%412, %413) /* ty=Tensor[(10, 4, 14), bool] */;
  (%414,)
}

def @func_8871(%var_8816: Tensor[(36, 14), float64], %var_8825: int32) -> (Tensor[(192), float64], Tensor[(7, 6, 12), float32], Tensor[(36, 14), float64], Tensor[(7, 6, 12), float32], int32, Tensor[(7, 6, 12), float32], int32, Tensor[(13, 7), float64], int32) {
  %415 = @func_4845() /* ty=(Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(192), float64]) */;
  %416 = cast(%var_8816, dtype="float64") /* ty=Tensor[(36, 14), float64] */;
  %417 = reshape(%416, newshape=[7, 6, 12]) /* ty=Tensor[(7, 6, 12), float64] */;
  %418 = @func_6434(%417) /* ty=(Tensor[(7, 6, 12), float64], Tensor[(7, 6, 12), float32], Tensor[(4, 8, 5), bool], Tensor[(77, 10), uint64], int32) */;
  %419 = cast(%var_8825, dtype="int32") /* ty=int32 */;
  %420 = reshape(%419, newshape=[]) /* ty=int32 */;
  %421 = @func_3033(%420) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(8, 6, 4), bool], Tensor[(770), uint64], int32) */;
  %422 = @func_5014() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %423 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 7), float64] */, dtype="float64") /* ty=Tensor[(13, 7), float64] */;
  %424 = reshape(%423, newshape=[91]) /* ty=Tensor[(91), float64] */;
  %425 = @func_7170(%424) /* ty=(int32, int32, Tensor[(192), float64], Tensor[(91), float64]) */;
  %426 = @func_5050() /* ty=(int32, int32) */;
  %427 = %415.2;
  %428 = %418.1;
  %429 = %421.0;
  %430 = %422.0;
  %431 = %425.1;
  %432 = %426.0;
  (%427, %428, %var_8816, %429, %var_8825, %430, %431, meta[relay.Constant][16] /* ty=Tensor[(13, 7), float64] */, %432)
}

def @func_11633() -> (Tensor[(7, 6, 12), float32],) {
  %433 = @func_10840() /* ty=Tensor[(7, 6, 12), float32] */;
  (%433,)
}

def @func_9973() -> (Tensor[(7, 6, 12), float64],) {
  %434 = @func_9471() /* ty=(Tensor[(7, 6, 12), float64],) */;
  %435 = %434.0;
  (%435,)
}

def @func_2624(%var_2596: int32) -> (Tensor[(4, 4, 7), int32], Tensor[(770), uint64], int32, Tensor[(112), int32], Tensor[(4, 4, 7), int32], Tensor[(7, 6, 12), float64]) {
  %436 = cast(meta[relay.Constant][17] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %437 = cast(meta[relay.Constant][17] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %438 = cast(%var_2596, dtype="int32") /* ty=int32 */;
  %439 = cast(meta[relay.Constant][18] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %440 = reshape(%436, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
  %441 = reshape(%437, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
  %442 = reshape(%438, newshape=[]) /* ty=int32 */;
  %443 = reshape(%439, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %444 = @func_1007(%440, %441, %442, %443) /* ty=(Tensor[(4, 4, 7), int32], int32, Tensor[(112), int32], Tensor[(10, 7, 11), float64]) */;
  %445 = cast(meta[relay.Constant][17] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %446 = cast(meta[relay.Constant][17] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %447 = cast(%var_2596, dtype="int32") /* ty=int32 */;
  %448 = cast(meta[relay.Constant][18] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %449 = reshape(%445, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
  %450 = reshape(%446, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
  %451 = reshape(%447, newshape=[]) /* ty=int32 */;
  %452 = reshape(%448, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %453 = @func_1007(%449, %450, %451, %452) /* ty=(Tensor[(4, 4, 7), int32], int32, Tensor[(112), int32], Tensor[(10, 7, 11), float64]) */;
  %454 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %455 = %454.0;
  %456 = cast(%455, dtype="float64") /* ty=Tensor[(7, 6, 12), float64] */;
  %457 = %444.0;
  %458 = %453.0;
  %459 = rsqrt(%456) /* ty=Tensor[(7, 6, 12), float64] */;
  (%457, meta[relay.Constant][17] /* ty=Tensor[(770), uint64] */, %var_2596, meta[relay.Constant][18] /* ty=Tensor[(112), int32] */, %458, %459)
}

def @main() -> (Tensor[(1, 1, 15), bool], Tensor[(1, 1, 15), float32]) {
  %460 = cast(meta[relay.Constant][19] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %461 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 1, 15), uint8] */, dtype="bool") /* ty=Tensor[(1, 1, 15), bool] */;
  %462 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 1, 15), uint8] */, dtype="float32") /* ty=Tensor[(1, 1, 15), float32] */;
  %463 = not_equal(%460, %461) /* ty=Tensor[(1, 1, 15), bool] */;
  %464 = log10(%462) /* ty=Tensor[(1, 1, 15), float32] */;
  (%463, %464)
}

def @func_4280(%var_4275: Tensor[(336), int64], %var_4276: Tensor[(224), uint16]) -> (Tensor[(7, 6, 12), float32], Tensor[(224, 1), uint16], Tensor[(336), int64], Tensor[(224), uint16]) {
  %465 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %466 = cast(%var_4275, dtype="int64") /* ty=Tensor[(336), int64] */;
  %467 = cast(%var_4276, dtype="uint16") /* ty=Tensor[(224), uint16] */;
  %468 = reshape(%466, newshape=[336]) /* ty=Tensor[(336), int64] */;
  %469 = reshape(%467, newshape=[224, 1]) /* ty=Tensor[(224, 1), uint16] */;
  %470 = @func_3338(%468, %469) /* ty=(int32, Tensor[(4, 4, 7), int32], Tensor[(8, 6, 4), bool], Tensor[(7, 4, 12), bool], Tensor[(336), int64], Tensor[(224, 1), uint16]) */;
  %471 = %465.0;
  %472 = %470.5;
  (%471, %472, %var_4275, %var_4276)
}

def @func_6100() -> Tensor[(7, 6, 12), float32] {
  %473 = @func_4514() /* ty=(Tensor[(3, 4, 16), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32]) */;
  %473.2
}

def @func_1589(%var_1583: float32, %var_1584: Tensor[(2, 8, 7), float32]) -> Tensor[(2, 8, 7), float32] {
  %474 = cast(%var_1583, dtype="float32") /* ty=float32 */;
  %475 = cast(%var_1584, dtype="float32") /* ty=Tensor[(2, 8, 7), float32] */;
  subtract(%474, %475) /* ty=Tensor[(2, 8, 7), float32] */
}

def @func_10589() -> (Tensor[(7, 6, 12), float32],) {
  %476 = @func_4231() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %477 = %476.0;
  (%477,)
}

def @func_4195() -> Tensor[(7, 6, 12), bool] {
  %478 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
  %479 = %478.0;
  %480 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 6, 12), float32] */, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %481 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%479, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%482, %483) /* ty=Tensor[(7, 6, 12), bool] */
}

def @func_6167() -> (Tensor[(7, 6, 12), float32], Tensor[(144, 2), uint64], Tensor[(288), uint64]) {
  %484 = @func_5014() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %485 = cast(meta[relay.Constant][22] /* ty=Tensor[(288), uint64] */, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %486 = reshape(%485, newshape=[144, 2]) /* ty=Tensor[(144, 2), uint64] */;
  %487 = @func_4556(%486) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int16], Tensor[(16, 3, 6), uint64], Tensor[(48), uint64], Tensor[(144, 2), uint64]) */;
  %488 = %484.0;
  %489 = %487.4;
  (%488, %489, meta[relay.Constant][22] /* ty=Tensor[(288), uint64] */)
}

def @func_6821() -> (int32,) {
  %490 = @func_3629() /* ty=int32 */;
  (%490,)
}

def @func_4330() -> (Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), float32]) {
  %491 = @func_4067() /* ty=(Tensor[(3, 4, 16), float64], Tensor[(192), float64], Tensor[(7, 6, 12), int16]) */;
  %492 = @func_2819() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %493 = %491.2;
  %494 = %492.0;
  (%493, %494)
}

def @func_8052() -> (Tensor[(112), int32], int32) {
  %495 = @func_3830() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) */;
  %496 = @func_5050() /* ty=(int32, int32) */;
  %497 = %495.3;
  %498 = %496.1;
  (%497, %498)
}

def @func_2424() -> (Tensor[(7, 6, 12), float32],) {
  %499 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 6, 12), float32] */, dtype="float32") /* ty=Tensor[(7, 6, 12), float32] */;
  %500 = log(%499) /* ty=Tensor[(7, 6, 12), float32] */;
  (%500,)
}

def @func_2997() -> (int32,) {
  %501 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
  %502 = %501.2;
  (%502,)
}

def @func_5427() -> (int32,) {
  %503 = @func_3629() /* ty=int32 */;
  (%503,)
}

def @func_7932() -> (Tensor[(7, 6, 12), float32],) {
  %504 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
  %505 = %504.0;
  (%505,)
}

def @func_10917() -> (Tensor[(7, 6, 12), float32],) {
  %506 = @func_2819() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %507 = %506.0;
  (%507,)
}

def @func_3985(%var_3970: float32, %var_3971: Tensor[(112), float32]) -> (Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float32], float32, Tensor[(112), float32]) {
  %508 = @func_3830() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) */;
  %509 = cast(%var_3970, dtype="float32") /* ty=float32 */;
  %510 = cast(%var_3971, dtype="float32") /* ty=Tensor[(112), float32] */;
  %511 = reshape(%509, newshape=[]) /* ty=float32 */;
  %512 = reshape(%510, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float32] */;
  %513 = %508.0;
  %514 = @func_1589(%511, %512) /* ty=Tensor[(2, 8, 7), float32] */;
  (%513, %514, %var_3970, %var_3971)
}

def @func_4601(%var_4598: int32, %var_4599: Tensor[(1, 112), int32]) -> (Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(1, 112), int32]) {
  %515 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %516 = %515.0;
  %517 = cast(%516, dtype="float32") /* ty=Tensor[(7, 6, 12), float32] */;
  %518 = cast(%var_4598, dtype="int32") /* ty=int32 */;
  %519 = cast(%var_4599, dtype="int32") /* ty=Tensor[(1, 112), int32] */;
  %520 = reshape(%518, newshape=[]) /* ty=int32 */;
  %521 = reshape(%519, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), int32] */;
  %522 = @func_54(%520, %521) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(4, 4, 7), bool]) */;
  %523 = exp(%517) /* ty=Tensor[(7, 6, 12), float32] */;
  %524 = %522.1;
  (%523, %524, %var_4598, %var_4599)
}

def @func_8627() -> (Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float32], float32, Tensor[(112), float32], Tensor[(7, 6, 12), float64], Tensor[(6, 13, 14), bool], Tensor[(1092), int32], int32) {
  %525 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %526 = cast(-5.97169f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %527 = cast(meta[relay.Constant][24] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %528 = reshape(%526, newshape=[]) /* ty=float32 */;
  %529 = reshape(%527, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float32] */;
  %530 = @func_3170() /* ty=(Tensor[(7, 6, 12), float64],) */;
  %531 = cast(meta[relay.Constant][25] /* ty=Tensor[(1092), int32] */, dtype="int32") /* ty=Tensor[(1092), int32] */;
  %532 = reshape(%531, newshape=[6, 13, 14]) /* ty=Tensor[(6, 13, 14), int32] */;
  %533 = @func_8276(%532) /* ty=(Tensor[(6, 13, 14), bool], Tensor[(6, 13, 14), int16]) */;
  %534 = @func_1589(%528, %529) /* ty=Tensor[(2, 8, 7), float32] */;
  %535 = cast(%534, dtype="int32") /* ty=Tensor[(2, 8, 7), int32] */;
  %536 = reshape(%535, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %537 = @func_6473(%536) /* ty=(Tensor[(7, 6, 12), bool], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) */;
  %538 = %525.0;
  %539 = %530.0;
  %540 = %533.0;
  %541 = %537.2;
  (%538, %534, -5.97169f /* ty=float32 */, meta[relay.Constant][24] /* ty=Tensor[(112), float32] */, %539, %540, meta[relay.Constant][25] /* ty=Tensor[(1092), int32] */, %541)
}

def @func_8461() -> (int32, Tensor[(112), int32]) {
  %542 = @func_8052() /* ty=(Tensor[(112), int32], int32) */;
  %543 = @func_7909() /* ty=int32 */;
  %544 = %542.0;
  (%543, %544)
}

def @func_4845() -> (Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(192), float64]) {
  %545 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %546 = %545.0;
  %547 = cast(%546, dtype="float64") /* ty=Tensor[(7, 6, 12), float64] */;
  %548 = cast(meta[relay.Constant][26] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %549 = reshape(%548, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %550 = @func_2490(%549) /* ty=(Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(3, 4, 16), float64], Tensor[(7, 6, 12), float32]) */;
  %551 = log10(%547) /* ty=Tensor[(7, 6, 12), float64] */;
  %552 = %550.1;
  (%551, %552, meta[relay.Constant][26] /* ty=Tensor[(192), float64] */)
}

def @func_276(%var_255: Tensor[(16, 3, 1), uint64], %var_256: Tensor[(16, 3, 6), uint64]) -> (Tensor[(16, 3, 6), uint64],) {
  %553 = cast(%var_255, dtype="bool") /* ty=Tensor[(16, 3, 1), bool] */;
  %554 = cast(%var_256, dtype="bool") /* ty=Tensor[(16, 3, 6), bool] */;
  %555 = less_equal(%553, %554) /* ty=Tensor[(16, 3, 6), bool] */;
  %556 = cast(%555, dtype="uint64") /* ty=Tensor[(16, 3, 6), uint64] */;
  %557 = cast(%var_255, dtype="uint64") /* ty=Tensor[(16, 3, 1), uint64] */;
  %558 = left_shift(%556, %557) /* ty=Tensor[(16, 3, 6), uint64] */;
  (%558,)
}

def @func_9660() -> Tensor[(7, 6, 12), float32] {
  %559 = @func_7801() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %559.0
}

def @func_1128(%var_1108: Tensor[(3, 4, 16), float64]) -> Tensor[(3, 4, 16), float64] {
  %560 = cast(%var_1108, dtype="float64") /* ty=Tensor[(3, 4, 16), float64] */;
  %561 = cosh(%560) /* ty=Tensor[(3, 4, 16), float64] */;
  %562 = cast(%var_1108, dtype="bool") /* ty=Tensor[(3, 4, 16), bool] */;
  %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%561, dtype="bool") /* ty=Tensor[(3, 4, 16), bool] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %566 = equal(%564, %565) /* ty=Tensor[(3, 4, 16), bool] */;
  %567 = cast(%566, dtype="float32") /* ty=Tensor[(3, 4, 16), float32] */;
  %568 = sin(%567) /* ty=Tensor[(3, 4, 16), float32] */;
  %569 = cast(%568, dtype="float64") /* ty=Tensor[(3, 4, 16), float64] */;
  log10(%569) /* ty=Tensor[(3, 4, 16), float64] */
}

def @func_8675(%var_8667: Tensor[(9, 6, 10), uint8], %var_8668: Tensor[(9, 6, 10), uint8]) -> (Tensor[(9, 6, 10), uint8],) {
  %570 = cast(%var_8668, dtype="uint8") /* ty=Tensor[(9, 6, 10), uint8] */;
  %571 = shape_of(%var_8667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%var_8667, dtype="uint8") /* ty=Tensor[(9, 6, 10), uint8] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %574 = bitwise_xor(%572, %573) /* ty=Tensor[(9, 6, 10), uint8] */;
  (%574,)
}

def @func_9932() -> (int32, Tensor[(7, 6, 12), int8]) {
  %575 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
  %576 = @func_7519() /* ty=(Tensor[(7, 6, 12), float64],) */;
  %577 = %576.0;
  %578 = %575.2;
  %579 = cast(%578, dtype="int32") /* ty=int32 */;
  %580 = reshape(%579, newshape=[]) /* ty=int32 */;
  %581 = @func_3033(%580) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(8, 6, 4), bool], Tensor[(770), uint64], int32) */;
  %582 = %581.3;
  %583 = cast(%577, dtype="int8") /* ty=Tensor[(7, 6, 12), int8] */;
  %584 = cast(%582, dtype="int8") /* ty=int8 */;
  %585 = bitwise_and(%583, %584) /* ty=Tensor[(7, 6, 12), int8] */;
  (%578, %585)
}

def @func_10315() -> (Tensor[(7, 6, 12), float64],) {
  %586 = @func_8627() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float32], float32, Tensor[(112), float32], Tensor[(7, 6, 12), float64], Tensor[(6, 13, 14), bool], Tensor[(1092), int32], int32) */;
  %587 = %586.4;
  (%587,)
}

def @func_11046(%var_10988: Tensor[(144, 2), uint64], %var_11034: Tensor[(112), float32]) -> (Tensor[(144, 2), uint32], Tensor[(144, 2), float32], Tensor[(144, 2), float64], Tensor[(144, 2), float32], Tensor[(2, 8, 7), float64], Tensor[(112), float32]) {
  %588 = @func_6167() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(144, 2), uint64], Tensor[(288), uint64]) */;
  %589 = %588.1;
  %590 = cast(%var_10988, dtype="uint32") /* ty=Tensor[(144, 2), uint32] */;
  %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(2), int32] */;
  %592 = cast(%589, dtype="uint32") /* ty=Tensor[(144, 2), uint32] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %594 = cast(%var_10988, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
  %595 = cos(%594) /* ty=Tensor[(144, 2), float32] */;
  %596 = cast(%595, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
  %597 = cast(%595, dtype="float64") /* ty=Tensor[(144, 2), float64] */;
  %598 = cast(%595, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
  %599 = cast(%var_11034, dtype="float32") /* ty=Tensor[(112), float32] */;
  %600 = reshape(%599, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %601 = @func_5537(%600) /* ty=(Tensor[(112), float32], Tensor[(2, 8, 7), int8], Tensor[(2, 8, 7), float64], int32) */;
  %602 = add(%592, %593) /* ty=Tensor[(144, 2), uint32] */;
  %603 = exp(%596) /* ty=Tensor[(144, 2), float32] */;
  %604 = rsqrt(%597) /* ty=Tensor[(144, 2), float64] */;
  %605 = sinh(%598) /* ty=Tensor[(144, 2), float32] */;
  %606 = %601.2;
  (%602, %603, %604, %605, %606, %var_11034)
}

def @func_1921(%var_1841: Tensor[(770, 1), uint64], %var_1842: int32) -> (Tensor[(770, 1), uint64], int32, Tensor[(112), int32], Tensor[(2, 8, 7), float32], Tensor[(2, 8, 7), float32], Tensor[(16, 3, 6), uint64], Tensor[(48), uint64], Tensor[(288), uint64], Tensor[(4, 4, 7), int32], Tensor[(144, 2), uint64], Tensor[(1650), uint8], Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool], Tensor[(15, 7, 8), float64], Tensor[(840), float64], Tensor[(4, 8, 5), bool], Tensor[(4, 8, 5), float64]) {
  %607 = cast(%var_1841, dtype="uint64") /* ty=Tensor[(770, 1), uint64] */;
  %608 = cast(%var_1841, dtype="uint64") /* ty=Tensor[(770, 1), uint64] */;
  %609 = cast(%var_1842, dtype="int32") /* ty=int32 */;
  %610 = cast(meta[relay.Constant][27] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %611 = reshape(%607, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
  %612 = reshape(%608, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
  %613 = reshape(%609, newshape=[]) /* ty=int32 */;
  %614 = reshape(%610, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %615 = @func_1007(%611, %612, %613, %614) /* ty=(Tensor[(4, 4, 7), int32], int32, Tensor[(112), int32], Tensor[(10, 7, 11), float64]) */;
  %616 = %615.1;
  %617 = cast(%616, dtype="float32") /* ty=float32 */;
  %618 = cast(meta[relay.Constant][27] /* ty=Tensor[(112), int32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %619 = reshape(%617, newshape=[]) /* ty=float32 */;
  %620 = reshape(%618, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float32] */;
  %621 = cast(%616, dtype="float32") /* ty=float32 */;
  %622 = @func_1589(%619, %620) /* ty=Tensor[(2, 8, 7), float32] */;
  %623 = cast(%622, dtype="float32") /* ty=Tensor[(2, 8, 7), float32] */;
  %624 = reshape(%621, newshape=[]) /* ty=float32 */;
  %625 = reshape(%623, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float32] */;
  %626 = cast(meta[relay.Constant][28] /* ty=Tensor[(48), uint64] */, dtype="uint64") /* ty=Tensor[(48), uint64] */;
  %627 = cast(meta[relay.Constant][29] /* ty=Tensor[(288), uint64] */, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %628 = reshape(%626, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), uint64] */;
  %629 = reshape(%627, newshape=[16, 3, 6]) /* ty=Tensor[(16, 3, 6), uint64] */;
  %630 = @func_276(%628, %629) /* ty=(Tensor[(16, 3, 6), uint64],) */;
  %631 = cast(%616, dtype="int32") /* ty=int32 */;
  %632 = cast(meta[relay.Constant][27] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %633 = reshape(%631, newshape=[]) /* ty=int32 */;
  %634 = reshape(%632, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), int32] */;
  %635 = @func_54(%633, %634) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(4, 4, 7), bool]) */;
  %636 = cast(meta[relay.Constant][30] /* ty=Tensor[(1650), uint8] */, dtype="uint8") /* ty=Tensor[(1650), uint8] */;
  %637 = cast(meta[relay.Constant][30] /* ty=Tensor[(1650), uint8] */, dtype="uint8") /* ty=Tensor[(1650), uint8] */;
  %638 = cast(meta[relay.Constant][28] /* ty=Tensor[(48), uint64] */, dtype="uint64") /* ty=Tensor[(48), uint64] */;
  %639 = cast(meta[relay.Constant][29] /* ty=Tensor[(288), uint64] */, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %640 = reshape(%636, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), uint8] */;
  %641 = reshape(%637, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), uint8] */;
  %642 = reshape(%638, newshape=[48]) /* ty=Tensor[(48), uint64] */;
  %643 = reshape(%639, newshape=[144, 2]) /* ty=Tensor[(144, 2), uint64] */;
  %644 = @func_962(%640, %641, %642, %643) /* ty=(Tensor[(15, 10, 11), uint8], Tensor[(48), uint64], Tensor[(144, 2), uint64], Tensor[(16, 3, 6), float32]) */;
  %645 = cast(%616, dtype="bool") /* ty=bool */;
  %646 = reshape(%645, newshape=[]) /* ty=bool */;
  %647 = @func_869(%646) /* ty=(Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool]) */;
  %648 = cast(%616, dtype="bool") /* ty=bool */;
  %649 = reshape(%648, newshape=[]) /* ty=bool */;
  %650 = @func_869(%649) /* ty=(Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool]) */;
  %651 = cast(meta[relay.Constant][31] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %652 = reshape(%651, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), float64] */;
  %653 = @func_1365(%652) /* ty=(Tensor[(15, 7, 8), float64],) */;
  %654 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 8, 5), float64] */, dtype="float64") /* ty=Tensor[(4, 8, 5), float64] */;
  %655 = erf(%654) /* ty=Tensor[(4, 8, 5), float64] */;
  %656 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 8, 5), float64] */, dtype="bool") /* ty=Tensor[(4, 8, 5), bool] */;
  %657 = shape_of(%655, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%655, dtype="bool") /* ty=Tensor[(4, 8, 5), bool] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %660 = cast(%655, dtype="float64") /* ty=Tensor[(4, 8, 5), float64] */;
  %661 = cast(%616, dtype="float64") /* ty=float64 */;
  %662 = @func_1589(%624, %625) /* ty=Tensor[(2, 8, 7), float32] */;
  %663 = %630.0;
  %664 = %635.0;
  %665 = %644.2;
  %666 = %647.1;
  %667 = %650.1;
  %668 = %653.0;
  %669 = greater_equal(%658, %659) /* ty=Tensor[(4, 8, 5), bool] */;
  %670 = divide(%660, %661) /* ty=Tensor[(4, 8, 5), float64] */;
  (%var_1841, %var_1842, meta[relay.Constant][27] /* ty=Tensor[(112), int32] */, %622, %662, %663, meta[relay.Constant][28] /* ty=Tensor[(48), uint64] */, meta[relay.Constant][29] /* ty=Tensor[(288), uint64] */, %664, %665, meta[relay.Constant][30] /* ty=Tensor[(1650), uint8] */, %666, %667, %668, meta[relay.Constant][31] /* ty=Tensor[(840), float64] */, %669, %670)
}

def @func_9382() -> (Tensor[(2, 8, 7), float32],) {
  %671 = @func_3708() /* ty=(Tensor[(7, 6, 12), float32], int32, Tensor[(2, 8, 7), float32], Tensor[(112), float32], int32) */;
  %672 = %671.2;
  (%672,)
}

def @func_4231() -> (Tensor[(7, 6, 12), float32],) {
  %673 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %674 = %673.0;
  (%674,)
}

def @func_9316() -> (Tensor[(7, 6, 12), float32],) {
  %675 = @func_5747() /* ty=Tensor[(7, 6, 12), float32] */;
  (%675,)
}

def @func_5617(%var_5602: Tensor[(770), uint64]) -> (Tensor[(192), float64], Tensor[(2, 8, 7), float64], Tensor[(112), float32], int32, Tensor[(770), uint64]) {
  %676 = cast(meta[relay.Constant][33] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %677 = reshape(%676, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %678 = @func_5537(%677) /* ty=(Tensor[(112), float32], Tensor[(2, 8, 7), int8], Tensor[(2, 8, 7), float64], int32) */;
  %679 = cast(%var_5602, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %680 = reshape(%679, newshape=[770]) /* ty=Tensor[(770), uint64] */;
  %681 = @func_3421(%680) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int32], Tensor[(7, 6, 12), float32], int32, Tensor[(770), uint64], int32) */;
  %682 = @func_4451() /* ty=Tensor[(192), float64] */;
  %683 = %678.2;
  %684 = %681.6;
  (%682, %683, meta[relay.Constant][33] /* ty=Tensor[(112), float32] */, %684, %var_5602)
}

def @func_869(%var_853: bool) -> (Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool]) {
  %685 = cast(%var_853, dtype="bool") /* ty=bool */;
  %686 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 6, 4), bool] */, dtype="bool") /* ty=Tensor[(8, 6, 4), bool] */;
  %687 = logical_and(%685, %686) /* ty=Tensor[(8, 6, 4), bool] */;
  %688 = cast(%687, dtype="bool") /* ty=Tensor[(8, 6, 4), bool] */;
  %689 = cast(%var_853, dtype="bool") /* ty=bool */;
  %690 = cast(%687, dtype="float64") /* ty=Tensor[(8, 6, 4), float64] */;
  %691 = acos(%690) /* ty=Tensor[(8, 6, 4), float64] */;
  %692 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 6, 4), bool] */, dtype="bool") /* ty=Tensor[(8, 6, 4), bool] */;
  %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%691, dtype="bool") /* ty=Tensor[(8, 6, 4), bool] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %696 = greater_equal(%688, %689) /* ty=Tensor[(8, 6, 4), bool] */;
  %697 = less(%694, %695) /* ty=Tensor[(8, 6, 4), bool] */;
  (%696, %697)
}

def @func_7170(%var_7167: Tensor[(91), float64]) -> (int32, int32, Tensor[(192), float64], Tensor[(91), float64]) {
  %698 = @func_2997() /* ty=(int32,) */;
  %699 = @func_5050() /* ty=(int32, int32) */;
  %700 = cast(%var_7167, dtype="float64") /* ty=Tensor[(91), float64] */;
  %701 = reshape(%700, newshape=[13, 1, 7]) /* ty=Tensor[(13, 1, 7), float64] */;
  %702 = @func_5690(%701) /* ty=(Tensor[(13, 1, 7), float64], Tensor[(3, 4, 16), float64], Tensor[(192), float64]) */;
  %703 = %698.0;
  %704 = %699.1;
  %705 = %702.2;
  (%703, %704, %705, %var_7167)
}

def @func_54(%var_17: int32, %var_18: Tensor[(4, 4, 7), int32]) -> (Tensor[(4, 4, 7), int32], Tensor[(4, 4, 7), bool]) {
  %706 = cast(%var_17, dtype="int32") /* ty=int32 */;
  %707 = cast(%var_18, dtype="int32") /* ty=Tensor[(4, 4, 7), int32] */;
  %708 = cast(%var_18, dtype="bool") /* ty=Tensor[(4, 4, 7), bool] */;
  %709 = cast(%var_17, dtype="bool") /* ty=bool */;
  %710 = maximum(%706, %707) /* ty=Tensor[(4, 4, 7), int32] */;
  %711 = less(%708, %709) /* ty=Tensor[(4, 4, 7), bool] */;
  (%710, %711)
}

def @func_7601() -> (Tensor[(7, 6, 12), float32], Tensor[(192), float64], int32, int32, Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64], Tensor[(24, 2), uint64], Tensor[(288), uint64], int32) {
  %712 = @func_5014() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %713 = @func_5739() /* ty=(int32,) */;
  %714 = cast(meta[relay.Constant][35] /* ty=Tensor[(24, 2), uint64] */, dtype="uint64") /* ty=Tensor[(24, 2), uint64] */;
  %715 = cast(meta[relay.Constant][36] /* ty=Tensor[(288), uint64] */, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %716 = reshape(%714, newshape=[12, 4]) /* ty=Tensor[(12, 4), uint64] */;
  %717 = reshape(%715, newshape=[288]) /* ty=Tensor[(288), uint64] */;
  %718 = @func_5185(%716, %717) /* ty=(Tensor[(7, 6, 12), float64], Tensor[(48), uint64], Tensor[(1650), uint8], Tensor[(12, 4), uint64], Tensor[(288), uint64]) */;
  %719 = %712.0;
  %720 = @func_4451() /* ty=Tensor[(192), float64] */;
  %721 = %713.0;
  %722 = @func_3508() /* ty=int32 */;
  %723 = @func_6100() /* ty=Tensor[(7, 6, 12), float32] */;
  %724 = %718.0;
  %725 = @func_4926() /* ty=int32 */;
  (%719, %720, %721, %722, %723, %724, meta[relay.Constant][35] /* ty=Tensor[(24, 2), uint64] */, meta[relay.Constant][36] /* ty=Tensor[(288), uint64] */, %725)
}

def @func_3338(%var_3332: Tensor[(336), int64], %var_3333: Tensor[(224, 1), uint16]) -> (int32, Tensor[(4, 4, 7), int32], Tensor[(8, 6, 4), bool], Tensor[(7, 4, 12), bool], Tensor[(336), int64], Tensor[(224, 1), uint16]) {
  %726 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
  %727 = @func_3105() /* ty=int32 */;
  %728 = cast(%727, dtype="bool") /* ty=bool */;
  %729 = reshape(%728, newshape=[]) /* ty=bool */;
  %730 = @func_869(%729) /* ty=(Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool]) */;
  %731 = cast(%var_3332, dtype="int64") /* ty=Tensor[(336), int64] */;
  %732 = cast(%var_3333, dtype="uint16") /* ty=Tensor[(224, 1), uint16] */;
  %733 = reshape(%731, newshape=[7, 4, 12]) /* ty=Tensor[(7, 4, 12), int64] */;
  %734 = reshape(%732, newshape=[224]) /* ty=Tensor[(224), uint16] */;
  %735 = @func_2559(%733, %734) /* ty=(Tensor[(7, 4, 12), bool], Tensor[(4, 8, 7), uint16], Tensor[(224), uint16]) */;
  %736 = %726.1;
  %737 = %730.1;
  %738 = %735.0;
  (%727, %736, %737, %738, %var_3332, %var_3333)
}

def @func_2867(%var_2823: Tensor[(7, 6, 12), float32], %var_2841: Tensor[(24, 14), int64], %var_2842: Tensor[(224), uint16]) -> (Tensor[(224), uint16], Tensor[(24, 14), int64], Tensor[(224), uint16], Tensor[(7, 6, 12), bool]) {
  %739 = cast(%var_2841, dtype="int64") /* ty=Tensor[(24, 14), int64] */;
  %740 = cast(%var_2842, dtype="uint16") /* ty=Tensor[(224), uint16] */;
  %741 = reshape(%739, newshape=[7, 4, 12]) /* ty=Tensor[(7, 4, 12), int64] */;
  %742 = reshape(%740, newshape=[224]) /* ty=Tensor[(224), uint16] */;
  %743 = @func_2559(%741, %742) /* ty=(Tensor[(7, 4, 12), bool], Tensor[(4, 8, 7), uint16], Tensor[(224), uint16]) */;
  %744 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %745 = %744.0;
  %746 = cast(%var_2823, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %747 = shape_of(%745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%745, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %750 = greater_equal(%748, %749) /* ty=Tensor[(7, 6, 12), bool] */;
  %751 = cast(%750, dtype="float64") /* ty=Tensor[(7, 6, 12), float64] */;
  %752 = sin(%751) /* ty=Tensor[(7, 6, 12), float64] */;
  %753 = cast(%750, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%752, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %757 = %743.2;
  %758 = logical_and(%755, %756) /* ty=Tensor[(7, 6, 12), bool] */;
  (%757, %var_2841, %var_2842, %758)
}

def @func_10554() -> (int32,) {
  %759 = @func_5739() /* ty=(int32,) */;
  %760 = %759.0;
  (%760,)
}

def @func_3999() -> (Tensor[(7, 6, 12), float32],) {
  %761 = @func_3009() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %762 = %761.0;
  (%762,)
}

def @func_3009() -> (Tensor[(7, 6, 12), float32],) {
  %763 = @func_2731() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %764 = %763.0;
  %765 = cast(%764, dtype="float32") /* ty=Tensor[(7, 6, 12), float32] */;
  %766 = sigmoid(%765) /* ty=Tensor[(7, 6, 12), float32] */;
  (%766,)
}

def @func_2559(%var_2535: Tensor[(7, 4, 12), int64], %var_2543: Tensor[(224), uint16]) -> (Tensor[(7, 4, 12), bool], Tensor[(4, 8, 7), uint16], Tensor[(224), uint16]) {
  %767 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 4, 12), int64] */, dtype="bool") /* ty=Tensor[(7, 4, 12), bool] */;
  %768 = shape_of(%var_2535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%var_2535, dtype="bool") /* ty=Tensor[(7, 4, 12), bool] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %771 = cast(%var_2543, dtype="uint16") /* ty=Tensor[(224), uint16] */;
  %772 = cast(%var_2543, dtype="uint16") /* ty=Tensor[(224), uint16] */;
  %773 = reshape(%771, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), uint16] */;
  %774 = reshape(%772, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), uint16] */;
  %775 = not_equal(%769, %770) /* ty=Tensor[(7, 4, 12), bool] */;
  %776 = @func_2380(%773, %774) /* ty=Tensor[(4, 8, 7), uint16] */;
  (%775, %776, %var_2543)
}

def @func_3629() -> int32 {
  %777 = @func_2997() /* ty=(int32,) */;
  %777.0
}

def @func_4175() -> (Tensor[(192), float64],) {
  %778 = @func_4067() /* ty=(Tensor[(3, 4, 16), float64], Tensor[(192), float64], Tensor[(7, 6, 12), int16]) */;
  %779 = %778.1;
  (%779,)
}

def @func_4514() -> (Tensor[(3, 4, 16), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32]) {
  %780 = @func_4490() /* ty=(Tensor[(3, 4, 16), uint8],) */;
  %781 = @func_3079() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %782 = @func_3079() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %783 = %780.0;
  %784 = %781.0;
  %785 = %782.0;
  (%783, %784, %785)
}

def @func_6742() -> Tensor[(2, 8, 7), float32] {
  %786 = @func_3708() /* ty=(Tensor[(7, 6, 12), float32], int32, Tensor[(2, 8, 7), float32], Tensor[(112), float32], int32) */;
  %786.2
}

def @func_9239(%var_9189: Tensor[(10, 3, 2), float32], %var_9227: Tensor[(10, 3, 2), float32], %var_9232: Tensor[(10, 3, 2), bool]) -> (Tensor[(10, 3, 2), uint16], Tensor[(10, 3, 2), float64]) {
  %787 = cast(%var_9189, dtype="float32") /* ty=Tensor[(10, 3, 2), float32] */;
  %788 = sin(%787) /* ty=Tensor[(10, 3, 2), float32] */;
  %789 = cast(%var_9227, dtype="uint16") /* ty=Tensor[(10, 3, 2), uint16] */;
  %790 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(%788, dtype="uint16") /* ty=Tensor[(10, 3, 2), uint16] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %793 = cast(%var_9189, dtype="bool") /* ty=Tensor[(10, 3, 2), bool] */;
  %794 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
  %795 = cast(%788, dtype="bool") /* ty=Tensor[(10, 3, 2), bool] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %797 = equal(%795, %796) /* ty=Tensor[(10, 3, 2), bool] */;
  %798 = cast(%var_9232, dtype="float64") /* ty=Tensor[(10, 3, 2), float64] */;
  %799 = shape_of(%797, dtype="int32") /* ty=Tensor[(3), int32] */;
  %800 = cast(%797, dtype="float64") /* ty=Tensor[(10, 3, 2), float64] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %802 = maximum(%791, %792) /* ty=Tensor[(10, 3, 2), uint16] */;
  %803 = mod(%800, %801) /* ty=Tensor[(10, 3, 2), float64] */;
  (%802, %803)
}

def @func_7788() -> (Tensor[(7, 6, 12), float32], Tensor[(192), float64]) {
  %804 = @func_5747() /* ty=Tensor[(7, 6, 12), float32] */;
  %805 = @func_4451() /* ty=Tensor[(192), float64] */;
  (%804, %805)
}

def @func_4926() -> int32 {
  %806 = @func_3830() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) */;
  %806.2
}

def @func_7743(%var_7738: Tensor[(5, 9, 12), float64]) -> (Tensor[(5, 9, 12), float64],) {
  %807 = cast(%var_7738, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
  %808 = sqrt(%807) /* ty=Tensor[(5, 9, 12), float64] */;
  (%808,)
}

def @func_962(%var_931: Tensor[(15, 10, 11), uint8], %var_932: Tensor[(15, 10, 11), uint8], %var_942: Tensor[(48), uint64], %var_943: Tensor[(144, 2), uint64]) -> (Tensor[(15, 10, 11), uint8], Tensor[(48), uint64], Tensor[(144, 2), uint64], Tensor[(16, 3, 6), float32]) {
  %809 = cast(%var_932, dtype="uint8") /* ty=Tensor[(15, 10, 11), uint8] */;
  %810 = shape_of(%var_931, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%var_931, dtype="uint8") /* ty=Tensor[(15, 10, 11), uint8] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %813 = cast(%var_942, dtype="uint64") /* ty=Tensor[(48), uint64] */;
  %814 = cast(%var_943, dtype="uint64") /* ty=Tensor[(144, 2), uint64] */;
  %815 = reshape(%813, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), uint64] */;
  %816 = reshape(%814, newshape=[16, 3, 6]) /* ty=Tensor[(16, 3, 6), uint64] */;
  %817 = @func_276(%815, %816) /* ty=(Tensor[(16, 3, 6), uint64],) */;
  %818 = %817.0;
  %819 = cast(%818, dtype="float32") /* ty=Tensor[(16, 3, 6), float32] */;
  %820 = minimum(%811, %812) /* ty=Tensor[(15, 10, 11), uint8] */;
  %821 = asin(%819) /* ty=Tensor[(16, 3, 6), float32] */;
  (%820, %var_942, %var_943, %821)
}

def @func_5690(%var_5657: Tensor[(13, 1, 7), float64]) -> (Tensor[(13, 1, 7), float64], Tensor[(3, 4, 16), float64], Tensor[(192), float64]) {
  %822 = cast(%var_5657, dtype="float64") /* ty=Tensor[(13, 1, 7), float64] */;
  %823 = cast(meta[relay.Constant][38] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %824 = reshape(%823, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %825 = @func_2490(%824) /* ty=(Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(3, 4, 16), float64], Tensor[(7, 6, 12), float32]) */;
  %826 = erf(%822) /* ty=Tensor[(13, 1, 7), float64] */;
  %827 = %825.2;
  (%826, %827, meta[relay.Constant][38] /* ty=Tensor[(192), float64] */)
}

def @func_3058() -> (Tensor[(7, 6, 12), float32],) {
  %828 = @func_3009() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %829 = %828.0;
  (%829,)
}

def @func_7519() -> (Tensor[(7, 6, 12), float64],) {
  %830 = @func_6651() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64]) */;
  %831 = %830.1;
  (%831,)
}

def @func_4117(%var_4092: int32) -> (Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64], int32) {
  %832 = @func_2731() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %833 = cast(%var_4092, dtype="int32") /* ty=int32 */;
  %834 = reshape(%833, newshape=[]) /* ty=int32 */;
  %835 = @func_2624(%834) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(770), uint64], int32, Tensor[(112), int32], Tensor[(4, 4, 7), int32], Tensor[(7, 6, 12), float64]) */;
  %836 = %832.0;
  %837 = %835.5;
  (%836, %837, %var_4092)
}

def @func_7303(%var_7228: Tensor[(288), uint64]) -> (Tensor[(16, 3, 6), float32], Tensor[(112), float32], Tensor[(288), uint64], Tensor[(288), uint64], Tensor[(144, 2), uint64], Tensor[(770), uint64], Tensor[(1650), uint32], Tensor[(7, 6, 12), int16]) {
  %838 = cast(meta[relay.Constant][39] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %839 = cast(meta[relay.Constant][40] /* ty=Tensor[(1650), uint8] */, dtype="uint8") /* ty=Tensor[(1650), uint8] */;
  %840 = cast(%var_7228, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %841 = reshape(%838, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %842 = reshape(%839, newshape=[1, 1650]) /* ty=Tensor[(1, 1650), uint8] */;
  %843 = reshape(%840, newshape=[288]) /* ty=Tensor[(288), uint64] */;
  %844 = @func_7057(%841, %842, %843) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float64], Tensor[(112), float32], Tensor[(7, 6, 12), float32], Tensor[(16, 3, 6), float32], Tensor[(1, 1650), uint8], Tensor[(48, 1), uint64], Tensor[(288), uint64]) */;
  %845 = @func_6167() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(144, 2), uint64], Tensor[(288), uint64]) */;
  %846 = cast(meta[relay.Constant][41] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %847 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %848 = reshape(%846, newshape=[770, 1]) /* ty=Tensor[(770, 1), uint64] */;
  %849 = reshape(%847, newshape=[]) /* ty=int32 */;
  %850 = @func_1921(%848, %849) /* ty=(Tensor[(770, 1), uint64], int32, Tensor[(112), int32], Tensor[(2, 8, 7), float32], Tensor[(2, 8, 7), float32], Tensor[(16, 3, 6), uint64], Tensor[(48), uint64], Tensor[(288), uint64], Tensor[(4, 4, 7), int32], Tensor[(144, 2), uint64], Tensor[(1650), uint8], Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool], Tensor[(15, 7, 8), float64], Tensor[(840), float64], Tensor[(4, 8, 5), bool], Tensor[(4, 8, 5), float64]) */;
  %851 = cast(meta[relay.Constant][40] /* ty=Tensor[(1650), uint8] */, dtype="uint32") /* ty=Tensor[(1650), uint32] */;
  %852 = cast(7 /* ty=int32 */, dtype="uint32") /* ty=uint32 */;
  %853 = @func_6323() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %854 = %853.0;
  %855 = @func_6756() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %856 = %855.0;
  %857 = cast(%856, dtype="int16") /* ty=Tensor[(7, 6, 12), int16] */;
  %858 = shape_of(%854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %859 = cast(%854, dtype="int16") /* ty=Tensor[(7, 6, 12), int16] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %861 = %844.5;
  %862 = %845.2;
  %863 = %850.9;
  %864 = maximum(%851, %852) /* ty=Tensor[(1650), uint32] */;
  %865 = minimum(%859, %860) /* ty=Tensor[(7, 6, 12), int16] */;
  (%861, meta[relay.Constant][39] /* ty=Tensor[(112), float32] */, %var_7228, %862, %863, meta[relay.Constant][41] /* ty=Tensor[(770), uint64] */, %864, %865)
}

def @func_8091() -> (int32, Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(8, 3, 1), bool], Tensor[(2240), bool]) {
  %866 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %867 = @func_7119() /* ty=(Tensor[(8, 3, 1), bool],) */;
  %868 = cast(meta[relay.Constant][42] /* ty=Tensor[(2240), uint8] */, dtype="uint8") /* ty=Tensor[(2240), uint8] */;
  %869 = reshape(%868, newshape=[2240]) /* ty=Tensor[(2240), uint8] */;
  %870 = @func_5821(%869) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(24, 8), float64], Tensor[(7, 6, 12), float32]) */;
  %871 = %870.1;
  %872 = cast(%871, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %873 = log2(%872) /* ty=Tensor[(2240), float32] */;
  %874 = cast(%871, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %875 = shape_of(%873, dtype="int32") /* ty=Tensor[(1), int32] */;
  %876 = cast(%873, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %877 = dyn.reshape(%874, %875, newshape=[]) /* ty=Tensor[(?), bool] */;
  %878 = @func_4926() /* ty=int32 */;
  %879 = %866.0;
  %880 = %867.0;
  %881 = less_equal(%876, %877) /* ty=Tensor[(2240), bool] */;
  (%878, %879, meta[relay.Constant][42] /* ty=Tensor[(2240), uint8] */, %880, %881)
}

def @func_11589(%var_11558: Tensor[(192), uint8]) -> (Tensor[(2, 8, 7), float32], Tensor[(3, 4, 16), bool], Tensor[(192), uint8], Tensor[(2, 8, 7), float32]) {
  %882 = cast(%var_11558, dtype="uint8") /* ty=Tensor[(192), uint8] */;
  %883 = reshape(%882, newshape=[3, 4, 16]) /* ty=Tensor[(3, 4, 16), uint8] */;
  %884 = @func_6742() /* ty=Tensor[(2, 8, 7), float32] */;
  %885 = @func_4732(%883) /* ty=Tensor[(3, 4, 16), bool] */;
  %886 = @func_6742() /* ty=Tensor[(2, 8, 7), float32] */;
  (%884, %885, %var_11558, %886)
}

def @func_5212() -> (int32, Tensor[(192), float64]) {
  %887 = @func_3629() /* ty=int32 */;
  %888 = @func_4451() /* ty=Tensor[(192), float64] */;
  (%887, %888)
}

def @func_8420() -> (int32,) {
  %889 = @func_3508() /* ty=int32 */;
  (%889,)
}

def @func_4067() -> (Tensor[(3, 4, 16), float64], Tensor[(192), float64], Tensor[(7, 6, 12), int16]) {
  %890 = cast(meta[relay.Constant][43] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %891 = reshape(%890, newshape=[3, 4, 16]) /* ty=Tensor[(3, 4, 16), float64] */;
  %892 = @func_3009() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %893 = %892.0;
  %894 = cast(meta[relay.Constant][44] /* ty=Tensor[(7, 6, 12), float32] */, dtype="int16") /* ty=Tensor[(7, 6, 12), int16] */;
  %895 = shape_of(%893, dtype="int32") /* ty=Tensor[(3), int32] */;
  %896 = cast(%893, dtype="int16") /* ty=Tensor[(7, 6, 12), int16] */;
  %897 = dyn.reshape(%894, %895, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %898 = @func_1128(%891) /* ty=Tensor[(3, 4, 16), float64] */;
  %899 = left_shift(%896, %897) /* ty=Tensor[(7, 6, 12), int16] */;
  (%898, meta[relay.Constant][43] /* ty=Tensor[(192), float64] */, %899)
}

def @func_2490(%var_2468: Tensor[(192), float64]) -> (Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(3, 4, 16), float64], Tensor[(7, 6, 12), float32]) {
  %900 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %901 = %900.0;
  %902 = cast(%901, dtype="float64") /* ty=Tensor[(7, 6, 12), float64] */;
  %903 = cast(%var_2468, dtype="float64") /* ty=Tensor[(192), float64] */;
  %904 = reshape(%903, newshape=[3, 4, 16]) /* ty=Tensor[(3, 4, 16), float64] */;
  %905 = @func_1128(%904) /* ty=Tensor[(3, 4, 16), float64] */;
  %906 = cast(%905, dtype="float64") /* ty=Tensor[(3, 4, 16), float64] */;
  %907 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %908 = asin(%902) /* ty=Tensor[(7, 6, 12), float64] */;
  %909 = acosh(%906) /* ty=Tensor[(3, 4, 16), float64] */;
  %910 = %907.0;
  (%908, %var_2468, %909, %910)
}

def @func_6124() -> (Tensor[(16, 7, 5), uint32],) {
  %911 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 7, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1, 7, 1), uint32] */;
  %912 = cast(meta[relay.Constant][46] /* ty=Tensor[(16, 7, 5), uint32] */, dtype="uint32") /* ty=Tensor[(16, 7, 5), uint32] */;
  %913 = subtract(%911, %912) /* ty=Tensor[(16, 7, 5), uint32] */;
  (%913,)
}

def @func_6060() -> (Tensor[(192), float64],) {
  %914 = @func_4451() /* ty=Tensor[(192), float64] */;
  (%914,)
}

def @func_8377() -> (Tensor[(3, 4, 16), uint8], Tensor[(2240), uint8]) {
  %915 = @func_4796() /* ty=(int32, Tensor[(3, 4, 16), bool], Tensor[(192), uint8]) */;
  %916 = %915.1;
  %917 = @func_4926() /* ty=int32 */;
  %918 = cast(%916, dtype="uint8") /* ty=Tensor[(3, 4, 16), uint8] */;
  %919 = cast(%917, dtype="uint8") /* ty=uint8 */;
  %920 = @func_8091() /* ty=(int32, Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(8, 3, 1), bool], Tensor[(2240), bool]) */;
  %921 = subtract(%918, %919) /* ty=Tensor[(3, 4, 16), uint8] */;
  %922 = %920.2;
  (%921, %922)
}

def @func_11293() -> (Tensor[(3, 4, 16), float32], Tensor[(3, 4, 16), float64]) {
  %923 = @func_4796() /* ty=(int32, Tensor[(3, 4, 16), bool], Tensor[(192), uint8]) */;
  %924 = %923.1;
  %925 = cast(%924, dtype="float32") /* ty=Tensor[(3, 4, 16), float32] */;
  %926 = cast(%924, dtype="float64") /* ty=Tensor[(3, 4, 16), float64] */;
  %927 = cos(%925) /* ty=Tensor[(3, 4, 16), float32] */;
  %928 = asinh(%926) /* ty=Tensor[(3, 4, 16), float64] */;
  (%927, %928)
}

def @func_3708() -> (Tensor[(7, 6, 12), float32], int32, Tensor[(2, 8, 7), float32], Tensor[(112), float32], int32) {
  %929 = @func_2819() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %930 = @func_3508() /* ty=int32 */;
  %931 = cast(%930, dtype="float32") /* ty=float32 */;
  %932 = cast(meta[relay.Constant][47] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %933 = reshape(%931, newshape=[]) /* ty=float32 */;
  %934 = reshape(%932, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float32] */;
  %935 = cast(%930, dtype="int32") /* ty=int32 */;
  %936 = reshape(%935, newshape=[]) /* ty=int32 */;
  %937 = @func_3033(%936) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(8, 6, 4), bool], Tensor[(770), uint64], int32) */;
  %938 = %929.0;
  %939 = @func_1589(%933, %934) /* ty=Tensor[(2, 8, 7), float32] */;
  %940 = %937.3;
  (%938, %930, %939, meta[relay.Constant][47] /* ty=Tensor[(112), float32] */, %940)
}

def @func_6756() -> (Tensor[(7, 6, 12), float32],) {
  %941 = @func_4330() /* ty=(Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), float32]) */;
  %942 = %941.1;
  (%942,)
}

def @func_6434(%var_6406: Tensor[(7, 6, 12), float64]) -> (Tensor[(7, 6, 12), float64], Tensor[(7, 6, 12), float32], Tensor[(4, 8, 5), bool], Tensor[(77, 10), uint64], int32) {
  %943 = @func_3170() /* ty=(Tensor[(7, 6, 12), float64],) */;
  %944 = %943.0;
  %945 = cast(%var_6406, dtype="float64") /* ty=Tensor[(7, 6, 12), float64] */;
  %946 = shape_of(%944, dtype="int32") /* ty=Tensor[(3), int32] */;
  %947 = cast(%944, dtype="float64") /* ty=Tensor[(7, 6, 12), float64] */;
  %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %949 = @func_4313() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %950 = cast(meta[relay.Constant][48] /* ty=Tensor[(77, 10), uint64] */, dtype="uint64") /* ty=Tensor[(77, 10), uint64] */;
  %951 = cast(-7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %952 = reshape(%950, newshape=[770, 1]) /* ty=Tensor[(770, 1), uint64] */;
  %953 = reshape(%951, newshape=[]) /* ty=int32 */;
  %954 = @func_1921(%952, %953) /* ty=(Tensor[(770, 1), uint64], int32, Tensor[(112), int32], Tensor[(2, 8, 7), float32], Tensor[(2, 8, 7), float32], Tensor[(16, 3, 6), uint64], Tensor[(48), uint64], Tensor[(288), uint64], Tensor[(4, 4, 7), int32], Tensor[(144, 2), uint64], Tensor[(1650), uint8], Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool], Tensor[(15, 7, 8), float64], Tensor[(840), float64], Tensor[(4, 8, 5), bool], Tensor[(4, 8, 5), float64]) */;
  %955 = divide(%947, %948) /* ty=Tensor[(7, 6, 12), float64] */;
  %956 = %949.0;
  %957 = %954.15;
  (%955, %956, %957, meta[relay.Constant][48] /* ty=Tensor[(77, 10), uint64] */, -7 /* ty=int32 */)
}

def @func_11475(%var_11466: Tensor[(5, 13, 5), uint16], %var_11467: Tensor[(5, 13, 5), uint16]) -> Tensor[(5, 13, 5), uint16] {
  %958 = cast(%var_11467, dtype="uint16") /* ty=Tensor[(5, 13, 5), uint16] */;
  %959 = shape_of(%var_11466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %960 = cast(%var_11466, dtype="uint16") /* ty=Tensor[(5, 13, 5), uint16] */;
  %961 = dyn.reshape(%958, %959, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%960, %961) /* ty=Tensor[(5, 13, 5), uint16] */
}

def @func_9267() -> (Tensor[(7, 6, 12), float32], Tensor[(192), float64]) {
  %962 = @func_5212() /* ty=(int32, Tensor[(192), float64]) */;
  %963 = @func_5747() /* ty=Tensor[(7, 6, 12), float32] */;
  %964 = %962.1;
  (%963, %964)
}

def @func_5747() -> Tensor[(7, 6, 12), float32] {
  %965 = @func_3058() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %965.0
}

def @func_7119() -> (Tensor[(8, 3, 1), bool],) {
  %966 = @func_6522() /* ty=(int32,) */;
  %967 = %966.0;
  %968 = cast(meta[relay.Constant][49] /* ty=Tensor[(8, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(8, 3, 1), float64] */;
  %969 = acos(%968) /* ty=Tensor[(8, 3, 1), float64] */;
  %970 = cast(%969, dtype="float64") /* ty=Tensor[(8, 3, 1), float64] */;
  %971 = asinh(%970) /* ty=Tensor[(8, 3, 1), float64] */;
  %972 = cast(%967, dtype="bool") /* ty=bool */;
  %973 = cast(%971, dtype="bool") /* ty=Tensor[(8, 3, 1), bool] */;
  %974 = less_equal(%972, %973) /* ty=Tensor[(8, 3, 1), bool] */;
  (%974,)
}

def @func_10617(%var_10597: Tensor[(336), int64], %var_10598: Tensor[(224), uint16]) -> (Tensor[(192), uint8], Tensor[(192), float64], Tensor[(336), int64], Tensor[(336), int64], Tensor[(224), uint16]) {
  %975 = @func_4796() /* ty=(int32, Tensor[(3, 4, 16), bool], Tensor[(192), uint8]) */;
  %976 = @func_4067() /* ty=(Tensor[(3, 4, 16), float64], Tensor[(192), float64], Tensor[(7, 6, 12), int16]) */;
  %977 = cast(%var_10597, dtype="int64") /* ty=Tensor[(336), int64] */;
  %978 = cast(%var_10598, dtype="uint16") /* ty=Tensor[(224), uint16] */;
  %979 = reshape(%977, newshape=[336]) /* ty=Tensor[(336), int64] */;
  %980 = reshape(%978, newshape=[224]) /* ty=Tensor[(224), uint16] */;
  %981 = @func_4280(%979, %980) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(224, 1), uint16], Tensor[(336), int64], Tensor[(224), uint16]) */;
  %982 = %975.2;
  %983 = %976.1;
  %984 = %981.2;
  (%982, %983, %984, %var_10597, %var_10598)
}

def @func_7879() -> (Tensor[(16, 7, 5), uint32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), bool]) {
  %985 = @func_6124() /* ty=(Tensor[(16, 7, 5), uint32],) */;
  %986 = @func_2819() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %987 = @func_4330() /* ty=(Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), float32]) */;
  %988 = %985.0;
  %989 = %986.0;
  %990 = %987.0;
  %991 = @func_4195() /* ty=Tensor[(7, 6, 12), bool] */;
  (%988, %989, %990, %991)
}

def @func_10062(%var_10050: Tensor[(8, 3, 1), bool]) -> (Tensor[(7, 6, 12), float32], Tensor[(8, 3, ?), uint8]) {
  %992 = @func_9148() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %993 = @func_7119() /* ty=(Tensor[(8, 3, 1), bool],) */;
  %994 = %993.0;
  %995 = cast(%var_10050, dtype="bool") /* ty=Tensor[(8, 3, 1), bool] */;
  %996 = shape_of(%994, dtype="int32") /* ty=Tensor[(3), int32] */;
  %997 = cast(%994, dtype="bool") /* ty=Tensor[(8, 3, 1), bool] */;
  %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %999 = equal(%997, %998) /* ty=Tensor[(8, 3, ?), bool] */;
  %1000 = cast(%999, dtype="uint8") /* ty=Tensor[(8, 3, ?), uint8] */;
  %1001 = shape_of(%994, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1002 = cast(%994, dtype="uint8") /* ty=Tensor[(8, 3, 1), uint8] */;
  %1003 = dyn.reshape(%1000, %1001, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1004 = %992.0;
  %1005 = bitwise_xor(%1002, %1003) /* ty=Tensor[(8, 3, ?), uint8] */;
  (%1004, %1005)
}

def @func_8009() -> Tensor[(7, 6, 12), float64] {
  %1006 = @func_4845() /* ty=(Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(192), float64]) */;
  %1006.0
}

def @func_8000() -> (Tensor[(192), float64],) {
  %1007 = @func_4451() /* ty=Tensor[(192), float64] */;
  (%1007,)
}

def @func_8635() -> int32 {
  @func_3508() /* ty=int32 */
}

def @func_11258() -> (Tensor[(7, 6, 12), float32], Tensor[(192), float64]) {
  %1008 = @func_5894() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %1009 = @func_4845() /* ty=(Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(192), float64]) */;
  %1010 = %1008.0;
  %1011 = %1009.1;
  (%1010, %1011)
}

def @func_5050() -> (int32, int32) {
  %1012 = @func_4796() /* ty=(int32, Tensor[(3, 4, 16), bool], Tensor[(192), uint8]) */;
  %1013 = @func_3830() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) */;
  %1014 = %1012.0;
  %1015 = %1013.2;
  (%1014, %1015)
}

def @func_5739() -> (int32,) {
  %1016 = @func_3508() /* ty=int32 */;
  (%1016,)
}

def @func_10464() -> (int32, Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], Tensor[(112), int32]) {
  %1017 = @func_9180() /* ty=(Tensor[(3, 4, 16), uint8], int32) */;
  %1018 = @func_5894() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %1019 = %1017.1;
  %1020 = cast(%1019, dtype="int32") /* ty=int32 */;
  %1021 = cast(meta[relay.Constant][50] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %1022 = reshape(%1020, newshape=[]) /* ty=int32 */;
  %1023 = reshape(%1021, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), int32] */;
  %1024 = @func_54(%1022, %1023) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(4, 4, 7), bool]) */;
  %1025 = %1018.0;
  %1026 = %1024.1;
  (%1019, %1025, %1026, meta[relay.Constant][50] /* ty=Tensor[(112), int32] */)
}

def @func_6522() -> (int32,) {
  %1027 = @func_4796() /* ty=(int32, Tensor[(3, 4, 16), bool], Tensor[(192), uint8]) */;
  %1028 = %1027.0;
  (%1028,)
}

def @func_4434() -> Tensor[(7, 6, 12), float32] {
  %1029 = @func_4231() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %1029.0
}

def @func_3033(%var_3026: int32) -> (Tensor[(7, 6, 12), float32], Tensor[(8, 6, 4), bool], Tensor[(770), uint64], int32) {
  %1030 = @func_3009() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %1031 = cast(meta[relay.Constant][51] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %1032 = cast(%var_3026, dtype="int32") /* ty=int32 */;
  %1033 = reshape(%1031, newshape=[770, 1]) /* ty=Tensor[(770, 1), uint64] */;
  %1034 = reshape(%1032, newshape=[]) /* ty=int32 */;
  %1035 = @func_1921(%1033, %1034) /* ty=(Tensor[(770, 1), uint64], int32, Tensor[(112), int32], Tensor[(2, 8, 7), float32], Tensor[(2, 8, 7), float32], Tensor[(16, 3, 6), uint64], Tensor[(48), uint64], Tensor[(288), uint64], Tensor[(4, 4, 7), int32], Tensor[(144, 2), uint64], Tensor[(1650), uint8], Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool], Tensor[(15, 7, 8), float64], Tensor[(840), float64], Tensor[(4, 8, 5), bool], Tensor[(4, 8, 5), float64]) */;
  %1036 = %1030.0;
  %1037 = %1035.11;
  (%1036, %1037, meta[relay.Constant][51] /* ty=Tensor[(770), uint64] */, %var_3026)
}

def @func_4490() -> (Tensor[(3, 4, 16), uint8],) {
  %1038 = @func_4067() /* ty=(Tensor[(3, 4, 16), float64], Tensor[(192), float64], Tensor[(7, 6, 12), int16]) */;
  %1039 = %1038.0;
  %1040 = @func_4067() /* ty=(Tensor[(3, 4, 16), float64], Tensor[(192), float64], Tensor[(7, 6, 12), int16]) */;
  %1041 = %1040.0;
  %1042 = cast(%1041, dtype="uint8") /* ty=Tensor[(3, 4, 16), uint8] */;
  %1043 = shape_of(%1039, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1044 = cast(%1039, dtype="uint8") /* ty=Tensor[(3, 4, 16), uint8] */;
  %1045 = dyn.reshape(%1042, %1043, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1046 = minimum(%1044, %1045) /* ty=Tensor[(3, 4, 16), uint8] */;
  (%1046,)
}

def @func_7716(%var_7647: Tensor[(112), int32]) -> (int32, Tensor[(4, 4, 7), int32], Tensor[(770), uint64], Tensor[(112), int32], Tensor[(7, 6, 12), float64], Tensor[(504), float64], Tensor[(7, 6, 12), float32], Tensor[(1, 112), int32], Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), bool]) {
  %1047 = @func_3708() /* ty=(Tensor[(7, 6, 12), float32], int32, Tensor[(2, 8, 7), float32], Tensor[(112), float32], int32) */;
  %1048 = cast(meta[relay.Constant][52] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %1049 = cast(meta[relay.Constant][52] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %1050 = %1047.1;
  %1051 = cast(%1050, dtype="int32") /* ty=int32 */;
  %1052 = cast(%var_7647, dtype="int32") /* ty=Tensor[(112), int32] */;
  %1053 = reshape(%1048, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
  %1054 = reshape(%1049, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
  %1055 = reshape(%1051, newshape=[]) /* ty=int32 */;
  %1056 = reshape(%1052, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %1057 = @func_1007(%1053, %1054, %1055, %1056) /* ty=(Tensor[(4, 4, 7), int32], int32, Tensor[(112), int32], Tensor[(10, 7, 11), float64]) */;
  %1058 = cast(meta[relay.Constant][53] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %1059 = reshape(%1058, newshape=[7, 6, 12]) /* ty=Tensor[(7, 6, 12), float64] */;
  %1060 = @func_6434(%1059) /* ty=(Tensor[(7, 6, 12), float64], Tensor[(7, 6, 12), float32], Tensor[(4, 8, 5), bool], Tensor[(77, 10), uint64], int32) */;
  %1061 = @func_3708() /* ty=(Tensor[(7, 6, 12), float32], int32, Tensor[(2, 8, 7), float32], Tensor[(112), float32], int32) */;
  %1062 = cast(%1050, dtype="int32") /* ty=int32 */;
  %1063 = %1057.0;
  %1064 = cast(%1063, dtype="int32") /* ty=Tensor[(4, 4, 7), int32] */;
  %1065 = reshape(%1062, newshape=[]) /* ty=int32 */;
  %1066 = reshape(%1064, newshape=[1, 112]) /* ty=Tensor[(1, 112), int32] */;
  %1067 = @func_4601(%1065, %1066) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(1, 112), int32]) */;
  %1068 = @func_4690() /* ty=(Tensor[(7, 6, 12), int16],) */;
  %1069 = cast(meta[relay.Constant][53] /* ty=Tensor[(504), float64] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %1070 = reshape(%1069, newshape=[7, 6, 12]) /* ty=Tensor[(7, 6, 12), float32] */;
  %1071 = @func_7493(%1070) /* ty=(Tensor[(7, 6, 12), bool],) */;
  %1072 = %1060.0;
  %1073 = %1061.0;
  %1074 = %1067.3;
  %1075 = %1068.0;
  %1076 = %1071.0;
  (%1050, %1063, meta[relay.Constant][52] /* ty=Tensor[(770), uint64] */, %var_7647, %1072, meta[relay.Constant][53] /* ty=Tensor[(504), float64] */, %1073, %1074, %1075, %1076)
}

def @func_8220() -> (int32, int32) {
  %1077 = @func_5739() /* ty=(int32,) */;
  %1078 = @func_8052() /* ty=(Tensor[(112), int32], int32) */;
  %1079 = %1077.0;
  %1080 = %1078.1;
  (%1079, %1080)
}

def @func_1365(%var_1353: Tensor[(15, 7, 8), float64]) -> (Tensor[(15, 7, 8), float64],) {
  %1081 = cast(%var_1353, dtype="float64") /* ty=Tensor[(15, 7, 8), float64] */;
  %1082 = sin(%1081) /* ty=Tensor[(15, 7, 8), float64] */;
  (%1082,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_279(%var_277: Tensor[(16, 3, 1), uint64], %var_278: Tensor[(16, 3, 6), uint64]) -> (Tensor[(16, 3, 6), uint64],) {
  %6 = fn (%var_255: Tensor[(16, 3, 1), uint64], %var_256: Tensor[(16, 3, 6), uint64]) -> (Tensor[(16, 3, 6), uint64],) {
    %0 = cast(%var_255, dtype="bool") /* ty=Tensor[(16, 3, 1), bool] */;
    %1 = cast(%var_256, dtype="bool") /* ty=Tensor[(16, 3, 6), bool] */;
    %2 = less_equal(%0, %1) /* ty=Tensor[(16, 3, 6), bool] */;
    %3 = cast(%2, dtype="uint64") /* ty=Tensor[(16, 3, 6), uint64] */;
    %4 = cast(%var_255, dtype="uint64") /* ty=Tensor[(16, 3, 1), uint64] */;
    %5 = left_shift(%3, %4) /* ty=Tensor[(16, 3, 6), uint64] */;
    (%5,)
  };
  %6(%var_277, %var_278) /* ty=(Tensor[(16, 3, 6), uint64],) */
}

def @func_6727() -> Tensor[(16, 7, 5), uint32] {
  @func_6725() /* ty=Tensor[(16, 7, 5), uint32] */
}

def @func_6436(%var_6435: Tensor[(7, 6, 12), float64]) -> (Tensor[(7, 6, 12), float64], Tensor[(7, 6, 12), float32], Tensor[(4, 8, 5), bool], Tensor[(77, 10), uint64], int32) {
  %22 = fn (%var_6406: Tensor[(7, 6, 12), float64]) -> (Tensor[(7, 6, 12), float64], Tensor[(7, 6, 12), float32], Tensor[(4, 8, 5), bool], Tensor[(77, 10), uint64], int32) {
    %7 = @func_3170() /* ty=(Tensor[(7, 6, 12), float64],) */;
    %8 = %7.0;
    %9 = cast(%var_6406, dtype="float64") /* ty=Tensor[(7, 6, 12), float64] */;
    %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
    %11 = cast(%8, dtype="float64") /* ty=Tensor[(7, 6, 12), float64] */;
    %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %13 = @func_4313() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(77, 10), uint64] */, dtype="uint64") /* ty=Tensor[(77, 10), uint64] */;
    %15 = cast(-7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %16 = reshape(%14, newshape=[770, 1]) /* ty=Tensor[(770, 1), uint64] */;
    %17 = reshape(%15, newshape=[]) /* ty=int32 */;
    %18 = @func_1921(%16, %17) /* ty=(Tensor[(770, 1), uint64], int32, Tensor[(112), int32], Tensor[(2, 8, 7), float32], Tensor[(2, 8, 7), float32], Tensor[(16, 3, 6), uint64], Tensor[(48), uint64], Tensor[(288), uint64], Tensor[(4, 4, 7), int32], Tensor[(144, 2), uint64], Tensor[(1650), uint8], Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool], Tensor[(15, 7, 8), float64], Tensor[(840), float64], Tensor[(4, 8, 5), bool], Tensor[(4, 8, 5), float64]) */;
    %19 = divide(%11, %12) /* ty=Tensor[(7, 6, 12), float64] */;
    %20 = %13.0;
    %21 = %18.15;
    (%19, %20, %21, meta[relay.Constant][0] /* ty=Tensor[(77, 10), uint64] */, -7 /* ty=int32 */)
  };
  %22(%var_6435) /* ty=(Tensor[(7, 6, 12), float64], Tensor[(7, 6, 12), float32], Tensor[(4, 8, 5), bool], Tensor[(77, 10), uint64], int32) */
}

def @func_6821() -> (int32,) {
  %23 = @func_3629() /* ty=int32 */;
  (%23,)
}

def @func_3985(%var_3970: float32, %var_3971: Tensor[(112), float32]) -> (Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float32], float32, Tensor[(112), float32]) {
  %24 = @func_3830() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) */;
  %25 = cast(%var_3970, dtype="float32") /* ty=float32 */;
  %26 = cast(%var_3971, dtype="float32") /* ty=Tensor[(112), float32] */;
  %27 = reshape(%25, newshape=[]) /* ty=float32 */;
  %28 = reshape(%26, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float32] */;
  %29 = %24.0;
  %30 = @func_1589(%27, %28) /* ty=Tensor[(2, 8, 7), float32] */;
  (%29, %30, %var_3970, %var_3971)
}

def @func_6100() -> Tensor[(7, 6, 12), float32] {
  %31 = @func_4514() /* ty=(Tensor[(3, 4, 16), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32]) */;
  %31.2
}

def @func_2562(%var_2560: Tensor[(7, 4, 12), int64], %var_2561: Tensor[(224), uint16]) -> (Tensor[(7, 4, 12), bool], Tensor[(4, 8, 7), uint16], Tensor[(224), uint16]) {
  %42 = fn (%var_2535: Tensor[(7, 4, 12), int64], %var_2543: Tensor[(224), uint16]) -> (Tensor[(7, 4, 12), bool], Tensor[(4, 8, 7), uint16], Tensor[(224), uint16]) {
    %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 4, 12), int64] */, dtype="bool") /* ty=Tensor[(7, 4, 12), bool] */;
    %33 = shape_of(%var_2535, dtype="int32") /* ty=Tensor[(3), int32] */;
    %34 = cast(%var_2535, dtype="bool") /* ty=Tensor[(7, 4, 12), bool] */;
    %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %36 = cast(%var_2543, dtype="uint16") /* ty=Tensor[(224), uint16] */;
    %37 = cast(%var_2543, dtype="uint16") /* ty=Tensor[(224), uint16] */;
    %38 = reshape(%36, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), uint16] */;
    %39 = reshape(%37, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), uint16] */;
    %40 = not_equal(%34, %35) /* ty=Tensor[(7, 4, 12), bool] */;
    %41 = @func_2380(%38, %39) /* ty=Tensor[(4, 8, 7), uint16] */;
    (%40, %41, %var_2543)
  };
  %42(%var_2560, %var_2561) /* ty=(Tensor[(7, 4, 12), bool], Tensor[(4, 8, 7), uint16], Tensor[(224), uint16]) */
}

def @func_8011() -> Tensor[(7, 6, 12), float64] {
  @func_8009() /* ty=Tensor[(7, 6, 12), float64] */
}

def @func_5748() -> Tensor[(7, 6, 12), float32] {
  %44 = fn () -> Tensor[(7, 6, 12), float32] {
    %43 = @func_3058() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %43.0
  };
  %44() /* ty=Tensor[(7, 6, 12), float32] */
}

def @func_3267(%var_3265: int32) -> (Tensor[(7, 6, 12), float32], Tensor[(770), uint64], int32, Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], int32, Tensor[(192), float64], Tensor[(48, 4), float64], Tensor[(7, 6, 12), float32]) {
  @func_3264(%var_3265) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(770), uint64], int32, Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], int32, Tensor[(192), float64], Tensor[(48, 4), float64], Tensor[(7, 6, 12), float32]) */
}

def @func_2287(%var_2285: Tensor[(14, 10, 16), uint8], %var_2286: Tensor[(24, 8), float64]) -> (Tensor[(14, 10, 16), float32], Tensor[(3, 4, 16), float64], Tensor[(24, 8), float64]) {
  %55 = fn (%var_2247: Tensor[(14, 10, 16), uint8], %var_2280: Tensor[(24, 8), float64]) -> (Tensor[(14, 10, 16), float32], Tensor[(3, 4, 16), float64], Tensor[(24, 8), float64]) {
    %45 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 10, 16), uint8] */, dtype="uint8") /* ty=Tensor[(14, 10, 16), uint8] */;
    %46 = shape_of(%var_2247, dtype="int32") /* ty=Tensor[(3), int32] */;
    %47 = cast(%var_2247, dtype="uint8") /* ty=Tensor[(14, 10, 16), uint8] */;
    %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %49 = right_shift(%47, %48) /* ty=Tensor[(14, 10, 16), uint8] */;
    %50 = cast(%49, dtype="float32") /* ty=Tensor[(14, 10, 16), float32] */;
    %51 = cast(%var_2280, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
    %52 = reshape(%51, newshape=[3, 4, 16]) /* ty=Tensor[(3, 4, 16), float64] */;
    %53 = asin(%50) /* ty=Tensor[(14, 10, 16), float32] */;
    %54 = @func_1128(%52) /* ty=Tensor[(3, 4, 16), float64] */;
    (%53, %54, %var_2280)
  };
  %55(%var_2285, %var_2286) /* ty=(Tensor[(14, 10, 16), float32], Tensor[(3, 4, 16), float64], Tensor[(24, 8), float64]) */
}

def @func_3831() -> (Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) {
  %64 = fn () -> (Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) {
    %56 = @func_2819() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %57 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %58 = cast(meta[relay.Constant][3] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
    %59 = reshape(%57, newshape=[]) /* ty=int32 */;
    %60 = reshape(%58, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), int32] */;
    %61 = @func_54(%59, %60) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(4, 4, 7), bool]) */;
    %62 = %56.0;
    %63 = %61.1;
    (%62, %63, -4 /* ty=int32 */, meta[relay.Constant][3] /* ty=Tensor[(112), int32] */)
  };
  %64() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) */
}

def @func_2872(%var_2869: Tensor[(7, 6, 12), float32], %var_2870: Tensor[(24, 14), int64], %var_2871: Tensor[(224), uint16]) -> (Tensor[(224), uint16], Tensor[(24, 14), int64], Tensor[(224), uint16], Tensor[(7, 6, 12), bool]) {
  @func_2867(%var_2869, %var_2870, %var_2871) /* ty=(Tensor[(224), uint16], Tensor[(24, 14), int64], Tensor[(224), uint16], Tensor[(7, 6, 12), bool]) */
}

def @func_3036(%var_3034: int32) -> (Tensor[(7, 6, 12), float32], Tensor[(8, 6, 4), bool], Tensor[(770), uint64], int32) {
  @func_3033(%var_3034) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(8, 6, 4), bool], Tensor[(770), uint64], int32) */
}

def @func_4798() -> (int32, Tensor[(3, 4, 16), bool], Tensor[(192), uint8]) {
  @func_4796() /* ty=(int32, Tensor[(3, 4, 16), bool], Tensor[(192), uint8]) */
}

def @func_4735(%var_4733: Tensor[(3, 4, 16), uint8]) -> Tensor[(3, 4, 16), bool] {
  @func_4732(%var_4733) /* ty=Tensor[(3, 4, 16), bool] */
}

def @func_6324() -> (Tensor[(7, 6, 12), float32],) {
  %67 = fn () -> (Tensor[(7, 6, 12), float32],) {
    %65 = @func_5370() /* ty=(Tensor[(7, 6, 12), float32], int32, int32) */;
    %66 = %65.0;
    (%66,)
  };
  %67() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_8422() -> (int32,) {
  @func_8420() /* ty=(int32,) */
}

def @func_8874(%var_8872: Tensor[(36, 14), float64], %var_8873: int32) -> (Tensor[(192), float64], Tensor[(7, 6, 12), float32], Tensor[(36, 14), float64], Tensor[(7, 6, 12), float32], int32, Tensor[(7, 6, 12), float32], int32, Tensor[(13, 7), float64], int32) {
  %86 = fn (%var_8816: Tensor[(36, 14), float64], %var_8825: int32) -> (Tensor[(192), float64], Tensor[(7, 6, 12), float32], Tensor[(36, 14), float64], Tensor[(7, 6, 12), float32], int32, Tensor[(7, 6, 12), float32], int32, Tensor[(13, 7), float64], int32) {
    %68 = @func_4845() /* ty=(Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(192), float64]) */;
    %69 = cast(%var_8816, dtype="float64") /* ty=Tensor[(36, 14), float64] */;
    %70 = reshape(%69, newshape=[7, 6, 12]) /* ty=Tensor[(7, 6, 12), float64] */;
    %71 = @func_6434(%70) /* ty=(Tensor[(7, 6, 12), float64], Tensor[(7, 6, 12), float32], Tensor[(4, 8, 5), bool], Tensor[(77, 10), uint64], int32) */;
    %72 = cast(%var_8825, dtype="int32") /* ty=int32 */;
    %73 = reshape(%72, newshape=[]) /* ty=int32 */;
    %74 = @func_3033(%73) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(8, 6, 4), bool], Tensor[(770), uint64], int32) */;
    %75 = @func_5014() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %76 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 7), float64] */, dtype="float64") /* ty=Tensor[(13, 7), float64] */;
    %77 = reshape(%76, newshape=[91]) /* ty=Tensor[(91), float64] */;
    %78 = @func_7170(%77) /* ty=(int32, int32, Tensor[(192), float64], Tensor[(91), float64]) */;
    %79 = @func_5050() /* ty=(int32, int32) */;
    %80 = %68.2;
    %81 = %71.1;
    %82 = %74.0;
    %83 = %75.0;
    %84 = %78.1;
    %85 = %79.0;
    (%80, %81, %var_8816, %82, %var_8825, %83, %84, meta[relay.Constant][4] /* ty=Tensor[(13, 7), float64] */, %85)
  };
  %86(%var_8872, %var_8873) /* ty=(Tensor[(192), float64], Tensor[(7, 6, 12), float32], Tensor[(36, 14), float64], Tensor[(7, 6, 12), float32], int32, Tensor[(7, 6, 12), float32], int32, Tensor[(13, 7), float64], int32) */
}

def @func_9148() -> (Tensor[(7, 6, 12), float32],) {
  %87 = @func_5014() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %88 = %87.0;
  (%88,)
}

def @func_6522() -> (int32,) {
  %89 = @func_4796() /* ty=(int32, Tensor[(3, 4, 16), bool], Tensor[(192), uint8]) */;
  %90 = %89.0;
  (%90,)
}

def @func_8954() -> (Tensor[(8, 3, 1), bool], Tensor[(16, 7, 5), uint32]) {
  %91 = @func_7119() /* ty=(Tensor[(8, 3, 1), bool],) */;
  %92 = %91.0;
  %93 = @func_6725() /* ty=Tensor[(16, 7, 5), uint32] */;
  (%92, %93)
}

def @func_871(%var_870: bool) -> (Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool]) {
  %107 = fn (%var_853: bool) -> (Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool]) {
    %94 = cast(%var_853, dtype="bool") /* ty=bool */;
    %95 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 6, 4), bool] */, dtype="bool") /* ty=Tensor[(8, 6, 4), bool] */;
    %96 = logical_and(%94, %95) /* ty=Tensor[(8, 6, 4), bool] */;
    %97 = cast(%96, dtype="bool") /* ty=Tensor[(8, 6, 4), bool] */;
    %98 = cast(%var_853, dtype="bool") /* ty=bool */;
    %99 = cast(%96, dtype="float64") /* ty=Tensor[(8, 6, 4), float64] */;
    %100 = acos(%99) /* ty=Tensor[(8, 6, 4), float64] */;
    %101 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 6, 4), bool] */, dtype="bool") /* ty=Tensor[(8, 6, 4), bool] */;
    %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
    %103 = cast(%100, dtype="bool") /* ty=Tensor[(8, 6, 4), bool] */;
    %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %105 = greater_equal(%97, %98) /* ty=Tensor[(8, 6, 4), bool] */;
    %106 = less(%103, %104) /* ty=Tensor[(8, 6, 4), bool] */;
    (%105, %106)
  };
  %107(%var_870) /* ty=(Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool]) */
}

def @func_2731() -> (Tensor[(7, 6, 12), float32],) {
  %108 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
  %109 = %108.0;
  %110 = cast(%109, dtype="float32") /* ty=Tensor[(7, 6, 12), float32] */;
  %111 = acos(%110) /* ty=Tensor[(7, 6, 12), float32] */;
  (%111,)
}

def @func_4331() -> (Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), float32]) {
  %116 = fn () -> (Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), float32]) {
    %112 = @func_4067() /* ty=(Tensor[(3, 4, 16), float64], Tensor[(192), float64], Tensor[(7, 6, 12), int16]) */;
    %113 = @func_2819() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %114 = %112.2;
    %115 = %113.0;
    (%114, %115)
  };
  %116() /* ty=(Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), float32]) */
}

def @func_9685(%var_9683: bool) -> (Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), bool], Tensor[(7, 6, 12), float32], bool) {
  @func_9682(%var_9683) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), bool], Tensor[(7, 6, 12), float32], bool) */
}

def @func_10617(%var_10597: Tensor[(336), int64], %var_10598: Tensor[(224), uint16]) -> (Tensor[(192), uint8], Tensor[(192), float64], Tensor[(336), int64], Tensor[(336), int64], Tensor[(224), uint16]) {
  %117 = @func_4796() /* ty=(int32, Tensor[(3, 4, 16), bool], Tensor[(192), uint8]) */;
  %118 = @func_4067() /* ty=(Tensor[(3, 4, 16), float64], Tensor[(192), float64], Tensor[(7, 6, 12), int16]) */;
  %119 = cast(%var_10597, dtype="int64") /* ty=Tensor[(336), int64] */;
  %120 = cast(%var_10598, dtype="uint16") /* ty=Tensor[(224), uint16] */;
  %121 = reshape(%119, newshape=[336]) /* ty=Tensor[(336), int64] */;
  %122 = reshape(%120, newshape=[224]) /* ty=Tensor[(224), uint16] */;
  %123 = @func_4280(%121, %122) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(224, 1), uint16], Tensor[(336), int64], Tensor[(224), uint16]) */;
  %124 = %117.2;
  %125 = %118.1;
  %126 = %123.2;
  (%124, %125, %126, %var_10597, %var_10598)
}

def @func_9661() -> Tensor[(7, 6, 12), float32] {
  %128 = fn () -> Tensor[(7, 6, 12), float32] {
    %127 = @func_7801() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %127.0
  };
  %128() /* ty=Tensor[(7, 6, 12), float32] */
}

def @func_8956() -> (Tensor[(8, 3, 1), bool], Tensor[(16, 7, 5), uint32]) {
  @func_8954() /* ty=(Tensor[(8, 3, 1), bool], Tensor[(16, 7, 5), uint32]) */
}

def @func_4233() -> (Tensor[(7, 6, 12), float32],) {
  @func_4231() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_3172() -> (Tensor[(7, 6, 12), float64],) {
  @func_3170() /* ty=(Tensor[(7, 6, 12), float64],) */
}

def @func_6168() -> (Tensor[(7, 6, 12), float32], Tensor[(144, 2), uint64], Tensor[(288), uint64]) {
  %135 = fn () -> (Tensor[(7, 6, 12), float32], Tensor[(144, 2), uint64], Tensor[(288), uint64]) {
    %129 = @func_5014() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %130 = cast(meta[relay.Constant][6] /* ty=Tensor[(288), uint64] */, dtype="uint64") /* ty=Tensor[(288), uint64] */;
    %131 = reshape(%130, newshape=[144, 2]) /* ty=Tensor[(144, 2), uint64] */;
    %132 = @func_4556(%131) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int16], Tensor[(16, 3, 6), uint64], Tensor[(48), uint64], Tensor[(144, 2), uint64]) */;
    %133 = %129.0;
    %134 = %132.4;
    (%133, %134, meta[relay.Constant][6] /* ty=Tensor[(288), uint64] */)
  };
  %135() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(144, 2), uint64], Tensor[(288), uint64]) */
}

def @func_10556() -> (int32,) {
  @func_10554() /* ty=(int32,) */
}

def @func_9180() -> (Tensor[(3, 4, 16), uint8], int32) {
  %136 = @func_4490() /* ty=(Tensor[(3, 4, 16), uint8],) */;
  %137 = @func_5212() /* ty=(int32, Tensor[(192), float64]) */;
  %138 = %136.0;
  %139 = %137.0;
  (%138, %139)
}

def @func_7881() -> (Tensor[(16, 7, 5), uint32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), bool]) {
  @func_7879() /* ty=(Tensor[(16, 7, 5), uint32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), bool]) */
}

def @func_7933() -> (Tensor[(7, 6, 12), float32],) {
  %142 = fn () -> (Tensor[(7, 6, 12), float32],) {
    %140 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
    %141 = %140.0;
    (%141,)
  };
  %142() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_1012(%var_1008: Tensor[(10, 7, 11), uint64], %var_1009: Tensor[(10, 7, 11), uint64], %var_1010: int32, %var_1011: Tensor[(112), int32]) -> (Tensor[(4, 4, 7), int32], int32, Tensor[(112), int32], Tensor[(10, 7, 11), float64]) {
  %159 = fn (%var_995: Tensor[(10, 7, 11), uint64], %var_996: Tensor[(10, 7, 11), uint64], %var_1001: int32, %var_1002: Tensor[(112), int32]) -> (Tensor[(4, 4, 7), int32], int32, Tensor[(112), int32], Tensor[(10, 7, 11), float64]) {
    %143 = cast(%var_1001, dtype="int32") /* ty=int32 */;
    %144 = cast(%var_1002, dtype="int32") /* ty=Tensor[(112), int32] */;
    %145 = reshape(%143, newshape=[]) /* ty=int32 */;
    %146 = reshape(%144, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), int32] */;
    %147 = @func_54(%145, %146) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(4, 4, 7), bool]) */;
    %148 = cast(%var_996, dtype="uint64") /* ty=Tensor[(10, 7, 11), uint64] */;
    %149 = shape_of(%var_995, dtype="int32") /* ty=Tensor[(3), int32] */;
    %150 = cast(%var_995, dtype="uint64") /* ty=Tensor[(10, 7, 11), uint64] */;
    %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %152 = right_shift(%150, %151) /* ty=Tensor[(10, 7, 11), uint64] */;
    %153 = cast(%152, dtype="float64") /* ty=Tensor[(10, 7, 11), float64] */;
    %154 = shape_of(%var_995, dtype="int32") /* ty=Tensor[(3), int32] */;
    %155 = cast(%var_995, dtype="float64") /* ty=Tensor[(10, 7, 11), float64] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %157 = %147.0;
    %158 = floor_divide(%155, %156) /* ty=Tensor[(10, 7, 11), float64] */;
    (%157, %var_1001, %var_1002, %158)
  };
  %159(%var_1008, %var_1009, %var_1010, %var_1011) /* ty=(Tensor[(4, 4, 7), int32], int32, Tensor[(112), int32], Tensor[(10, 7, 11), float64]) */
}

def @func_11050(%var_11048: Tensor[(144, 2), uint64], %var_11049: Tensor[(112), float32]) -> (Tensor[(144, 2), uint32], Tensor[(144, 2), float32], Tensor[(144, 2), float64], Tensor[(144, 2), float32], Tensor[(2, 8, 7), float64], Tensor[(112), float32]) {
  @func_11046(%var_11048, %var_11049) /* ty=(Tensor[(144, 2), uint32], Tensor[(144, 2), float32], Tensor[(144, 2), float64], Tensor[(144, 2), float32], Tensor[(2, 8, 7), float64], Tensor[(112), float32]) */
}

def @func_11633() -> (Tensor[(7, 6, 12), float32],) {
  %160 = @func_10840() /* ty=Tensor[(7, 6, 12), float32] */;
  (%160,)
}

def @func_7521() -> (Tensor[(7, 6, 12), float64],) {
  @func_7519() /* ty=(Tensor[(7, 6, 12), float64],) */
}

def @func_4435() -> Tensor[(7, 6, 12), float32] {
  %162 = fn () -> Tensor[(7, 6, 12), float32] {
    %161 = @func_4231() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %161.0
  };
  %162() /* ty=Tensor[(7, 6, 12), float32] */
}

def @func_8001() -> (Tensor[(192), float64],) {
  %164 = fn () -> (Tensor[(192), float64],) {
    %163 = @func_4451() /* ty=Tensor[(192), float64] */;
    (%163,)
  };
  %164() /* ty=(Tensor[(192), float64],) */
}

def @func_7493(%var_7478: Tensor[(7, 6, 12), float32]) -> (Tensor[(7, 6, 12), bool],) {
  %165 = @func_3009() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %166 = %165.0;
  %167 = cast(%var_7478, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %168 = shape_of(%166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%166, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %171 = greater(%169, %170) /* ty=Tensor[(7, 6, 12), bool] */;
  (%171,)
}

def @func_4558(%var_4557: Tensor[(144, 2), uint64]) -> (Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int16], Tensor[(16, 3, 6), uint64], Tensor[(48), uint64], Tensor[(144, 2), uint64]) {
  %182 = fn (%var_4547: Tensor[(144, 2), uint64]) -> (Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int16], Tensor[(16, 3, 6), uint64], Tensor[(48), uint64], Tensor[(144, 2), uint64]) {
    %172 = @func_4514() /* ty=(Tensor[(3, 4, 16), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32]) */;
    %173 = @func_4330() /* ty=(Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), float32]) */;
    %174 = cast(meta[relay.Constant][7] /* ty=Tensor[(48), uint64] */, dtype="uint64") /* ty=Tensor[(48), uint64] */;
    %175 = cast(%var_4547, dtype="uint64") /* ty=Tensor[(144, 2), uint64] */;
    %176 = reshape(%174, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), uint64] */;
    %177 = reshape(%175, newshape=[16, 3, 6]) /* ty=Tensor[(16, 3, 6), uint64] */;
    %178 = @func_276(%176, %177) /* ty=(Tensor[(16, 3, 6), uint64],) */;
    %179 = %172.2;
    %180 = %173.0;
    %181 = %178.0;
    (%179, %180, %181, meta[relay.Constant][7] /* ty=Tensor[(48), uint64] */, %var_4547)
  };
  %182(%var_4557) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int16], Tensor[(16, 3, 6), uint64], Tensor[(48), uint64], Tensor[(144, 2), uint64]) */
}

def @func_5015() -> (Tensor[(7, 6, 12), float32],) {
  %185 = fn () -> (Tensor[(7, 6, 12), float32],) {
    %183 = @func_4514() /* ty=(Tensor[(3, 4, 16), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32]) */;
    %184 = %183.2;
    (%184,)
  };
  %185() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_7789() -> (Tensor[(7, 6, 12), float32], Tensor[(192), float64]) {
  %188 = fn () -> (Tensor[(7, 6, 12), float32], Tensor[(192), float64]) {
    %186 = @func_5747() /* ty=Tensor[(7, 6, 12), float32] */;
    %187 = @func_4451() /* ty=Tensor[(192), float64] */;
    (%186, %187)
  };
  %188() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(192), float64]) */
}

def @func_8378() -> (Tensor[(3, 4, 16), uint8], Tensor[(2240), uint8]) {
  %197 = fn () -> (Tensor[(3, 4, 16), uint8], Tensor[(2240), uint8]) {
    %189 = @func_4796() /* ty=(int32, Tensor[(3, 4, 16), bool], Tensor[(192), uint8]) */;
    %190 = %189.1;
    %191 = @func_4926() /* ty=int32 */;
    %192 = cast(%190, dtype="uint8") /* ty=Tensor[(3, 4, 16), uint8] */;
    %193 = cast(%191, dtype="uint8") /* ty=uint8 */;
    %194 = @func_8091() /* ty=(int32, Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(8, 3, 1), bool], Tensor[(2240), bool]) */;
    %195 = subtract(%192, %193) /* ty=Tensor[(3, 4, 16), uint8] */;
    %196 = %194.2;
    (%195, %196)
  };
  %197() /* ty=(Tensor[(3, 4, 16), uint8], Tensor[(2240), uint8]) */
}

def @func_9268() -> (Tensor[(7, 6, 12), float32], Tensor[(192), float64]) {
  %201 = fn () -> (Tensor[(7, 6, 12), float32], Tensor[(192), float64]) {
    %198 = @func_5212() /* ty=(int32, Tensor[(192), float64]) */;
    %199 = @func_5747() /* ty=Tensor[(7, 6, 12), float32] */;
    %200 = %198.1;
    (%199, %200)
  };
  %201() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(192), float64]) */
}

def @func_11046(%var_10988: Tensor[(144, 2), uint64], %var_11034: Tensor[(112), float32]) -> (Tensor[(144, 2), uint32], Tensor[(144, 2), float32], Tensor[(144, 2), float64], Tensor[(144, 2), float32], Tensor[(2, 8, 7), float64], Tensor[(112), float32]) {
  %202 = @func_6167() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(144, 2), uint64], Tensor[(288), uint64]) */;
  %203 = %202.1;
  %204 = cast(%var_10988, dtype="uint32") /* ty=Tensor[(144, 2), uint32] */;
  %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(2), int32] */;
  %206 = cast(%203, dtype="uint32") /* ty=Tensor[(144, 2), uint32] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %208 = cast(%var_10988, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
  %209 = cos(%208) /* ty=Tensor[(144, 2), float32] */;
  %210 = cast(%209, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
  %211 = cast(%209, dtype="float64") /* ty=Tensor[(144, 2), float64] */;
  %212 = cast(%209, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
  %213 = cast(%var_11034, dtype="float32") /* ty=Tensor[(112), float32] */;
  %214 = reshape(%213, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %215 = @func_5537(%214) /* ty=(Tensor[(112), float32], Tensor[(2, 8, 7), int8], Tensor[(2, 8, 7), float64], int32) */;
  %216 = add(%206, %207) /* ty=Tensor[(144, 2), uint32] */;
  %217 = exp(%210) /* ty=Tensor[(144, 2), float32] */;
  %218 = rsqrt(%211) /* ty=Tensor[(144, 2), float64] */;
  %219 = sinh(%212) /* ty=Tensor[(144, 2), float32] */;
  %220 = %215.2;
  (%216, %217, %218, %219, %220, %var_11034)
}

def @func_7120() -> (Tensor[(8, 3, 1), bool],) {
  %230 = fn () -> (Tensor[(8, 3, 1), bool],) {
    %221 = @func_6522() /* ty=(int32,) */;
    %222 = %221.0;
    %223 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(8, 3, 1), float64] */;
    %224 = acos(%223) /* ty=Tensor[(8, 3, 1), float64] */;
    %225 = cast(%224, dtype="float64") /* ty=Tensor[(8, 3, 1), float64] */;
    %226 = asinh(%225) /* ty=Tensor[(8, 3, 1), float64] */;
    %227 = cast(%222, dtype="bool") /* ty=bool */;
    %228 = cast(%226, dtype="bool") /* ty=Tensor[(8, 3, 1), bool] */;
    %229 = less_equal(%227, %228) /* ty=Tensor[(8, 3, 1), bool] */;
    (%229,)
  };
  %230() /* ty=(Tensor[(8, 3, 1), bool],) */
}

def @func_3508() -> int32 {
  %231 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
  %231.2
}

def @func_1365(%var_1353: Tensor[(15, 7, 8), float64]) -> (Tensor[(15, 7, 8), float64],) {
  %232 = cast(%var_1353, dtype="float64") /* ty=Tensor[(15, 7, 8), float64] */;
  %233 = sin(%232) /* ty=Tensor[(15, 7, 8), float64] */;
  (%233,)
}

def @func_2626(%var_2625: int32) -> (Tensor[(4, 4, 7), int32], Tensor[(770), uint64], int32, Tensor[(112), int32], Tensor[(4, 4, 7), int32], Tensor[(7, 6, 12), float64]) {
  %258 = fn (%var_2596: int32) -> (Tensor[(4, 4, 7), int32], Tensor[(770), uint64], int32, Tensor[(112), int32], Tensor[(4, 4, 7), int32], Tensor[(7, 6, 12), float64]) {
    %234 = cast(meta[relay.Constant][9] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
    %235 = cast(meta[relay.Constant][9] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
    %236 = cast(%var_2596, dtype="int32") /* ty=int32 */;
    %237 = cast(meta[relay.Constant][10] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
    %238 = reshape(%234, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
    %239 = reshape(%235, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
    %240 = reshape(%236, newshape=[]) /* ty=int32 */;
    %241 = reshape(%237, newshape=[112]) /* ty=Tensor[(112), int32] */;
    %242 = @func_1007(%238, %239, %240, %241) /* ty=(Tensor[(4, 4, 7), int32], int32, Tensor[(112), int32], Tensor[(10, 7, 11), float64]) */;
    %243 = cast(meta[relay.Constant][9] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
    %244 = cast(meta[relay.Constant][9] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
    %245 = cast(%var_2596, dtype="int32") /* ty=int32 */;
    %246 = cast(meta[relay.Constant][10] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
    %247 = reshape(%243, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
    %248 = reshape(%244, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
    %249 = reshape(%245, newshape=[]) /* ty=int32 */;
    %250 = reshape(%246, newshape=[112]) /* ty=Tensor[(112), int32] */;
    %251 = @func_1007(%247, %248, %249, %250) /* ty=(Tensor[(4, 4, 7), int32], int32, Tensor[(112), int32], Tensor[(10, 7, 11), float64]) */;
    %252 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %253 = %252.0;
    %254 = cast(%253, dtype="float64") /* ty=Tensor[(7, 6, 12), float64] */;
    %255 = %242.0;
    %256 = %251.0;
    %257 = rsqrt(%254) /* ty=Tensor[(7, 6, 12), float64] */;
    (%255, meta[relay.Constant][9] /* ty=Tensor[(770), uint64] */, %var_2596, meta[relay.Constant][10] /* ty=Tensor[(112), int32] */, %256, %257)
  };
  %258(%var_2625) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(770), uint64], int32, Tensor[(112), int32], Tensor[(4, 4, 7), int32], Tensor[(7, 6, 12), float64]) */
}

def @func_1528(%var_1493: float32, %var_1494: Tensor[(3, 13, 7), float32]) -> (Tensor[(3, 13, 7), float32],) {
  %259 = cast(%var_1493, dtype="float32") /* ty=float32 */;
  %260 = cast(%var_1494, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %261 = divide(%259, %260) /* ty=Tensor[(3, 13, 7), float32] */;
  (%261,)
}

def @func_4490() -> (Tensor[(3, 4, 16), uint8],) {
  %262 = @func_4067() /* ty=(Tensor[(3, 4, 16), float64], Tensor[(192), float64], Tensor[(7, 6, 12), int16]) */;
  %263 = %262.0;
  %264 = @func_4067() /* ty=(Tensor[(3, 4, 16), float64], Tensor[(192), float64], Tensor[(7, 6, 12), int16]) */;
  %265 = %264.0;
  %266 = cast(%265, dtype="uint8") /* ty=Tensor[(3, 4, 16), uint8] */;
  %267 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%263, dtype="uint8") /* ty=Tensor[(3, 4, 16), uint8] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %270 = minimum(%268, %269) /* ty=Tensor[(3, 4, 16), uint8] */;
  (%270,)
}

def @func_8052() -> (Tensor[(112), int32], int32) {
  %271 = @func_3830() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) */;
  %272 = @func_5050() /* ty=(int32, int32) */;
  %273 = %271.3;
  %274 = %272.1;
  (%273, %274)
}

def @func_3989(%var_3987: float32, %var_3988: Tensor[(112), float32]) -> (Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float32], float32, Tensor[(112), float32]) {
  @func_3985(%var_3987, %var_3988) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float32], float32, Tensor[(112), float32]) */
}

def @func_7746(%var_7744: Tensor[(5, 9, 12), float64]) -> (Tensor[(5, 9, 12), float64],) {
  @func_7743(%var_7744) /* ty=(Tensor[(5, 9, 12), float64],) */
}

def @func_968(%var_964: Tensor[(15, 10, 11), uint8], %var_965: Tensor[(15, 10, 11), uint8], %var_966: Tensor[(48), uint64], %var_967: Tensor[(144, 2), uint64]) -> (Tensor[(15, 10, 11), uint8], Tensor[(48), uint64], Tensor[(144, 2), uint64], Tensor[(16, 3, 6), float32]) {
  @func_962(%var_964, %var_965, %var_966, %var_967) /* ty=(Tensor[(15, 10, 11), uint8], Tensor[(48), uint64], Tensor[(144, 2), uint64], Tensor[(16, 3, 6), float32]) */
}

def @func_7407(%var_7336: Tensor[(4, 3, 13), float64]) -> (Tensor[(7, 6, 12), float32], Tensor[(4, 3, 13), float32]) {
  %275 = @func_6756() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %276 = cast(%var_7336, dtype="float64") /* ty=Tensor[(4, 3, 13), float64] */;
  %277 = cos(%276) /* ty=Tensor[(4, 3, 13), float64] */;
  %278 = cast(%277, dtype="bool") /* ty=Tensor[(4, 3, 13), bool] */;
  %279 = shape_of(%var_7336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%var_7336, dtype="bool") /* ty=Tensor[(4, 3, 13), bool] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %282 = equal(%280, %281) /* ty=Tensor[(4, 3, 13), bool] */;
  %283 = cast(%282, dtype="float32") /* ty=Tensor[(4, 3, 13), float32] */;
  %284 = %275.0;
  %285 = atanh(%283) /* ty=Tensor[(4, 3, 13), float32] */;
  (%284, %285)
}

def @func_10842() -> Tensor[(7, 6, 12), float32] {
  @func_10840() /* ty=Tensor[(7, 6, 12), float32] */
}

def @func_8221() -> (int32, int32) {
  %290 = fn () -> (int32, int32) {
    %286 = @func_5739() /* ty=(int32,) */;
    %287 = @func_8052() /* ty=(Tensor[(112), int32], int32) */;
    %288 = %286.0;
    %289 = %287.1;
    (%288, %289)
  };
  %290() /* ty=(int32, int32) */
}

def @func_10918() -> (Tensor[(7, 6, 12), float32],) {
  %293 = fn () -> (Tensor[(7, 6, 12), float32],) {
    %291 = @func_2819() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %292 = %291.0;
    (%292,)
  };
  %293() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_962(%var_931: Tensor[(15, 10, 11), uint8], %var_932: Tensor[(15, 10, 11), uint8], %var_942: Tensor[(48), uint64], %var_943: Tensor[(144, 2), uint64]) -> (Tensor[(15, 10, 11), uint8], Tensor[(48), uint64], Tensor[(144, 2), uint64], Tensor[(16, 3, 6), float32]) {
  %294 = cast(%var_932, dtype="uint8") /* ty=Tensor[(15, 10, 11), uint8] */;
  %295 = shape_of(%var_931, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%var_931, dtype="uint8") /* ty=Tensor[(15, 10, 11), uint8] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %298 = cast(%var_942, dtype="uint64") /* ty=Tensor[(48), uint64] */;
  %299 = cast(%var_943, dtype="uint64") /* ty=Tensor[(144, 2), uint64] */;
  %300 = reshape(%298, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), uint64] */;
  %301 = reshape(%299, newshape=[16, 3, 6]) /* ty=Tensor[(16, 3, 6), uint64] */;
  %302 = @func_276(%300, %301) /* ty=(Tensor[(16, 3, 6), uint64],) */;
  %303 = %302.0;
  %304 = cast(%303, dtype="float32") /* ty=Tensor[(16, 3, 6), float32] */;
  %305 = minimum(%296, %297) /* ty=Tensor[(15, 10, 11), uint8] */;
  %306 = asin(%304) /* ty=Tensor[(16, 3, 6), float32] */;
  (%305, %var_942, %var_943, %306)
}

def @func_5540(%var_5538: Tensor[(112), float32]) -> (Tensor[(112), float32], Tensor[(2, 8, 7), int8], Tensor[(2, 8, 7), float64], int32) {
  @func_5537(%var_5538) /* ty=(Tensor[(112), float32], Tensor[(2, 8, 7), int8], Tensor[(2, 8, 7), float64], int32) */
}

def @func_3079() -> (Tensor[(7, 6, 12), float32],) {
  %307 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %308 = %307.0;
  (%308,)
}

def @func_5896() -> (Tensor[(7, 6, 12), float32],) {
  @func_5894() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_6476(%var_6474: Tensor[(112), int32]) -> (Tensor[(7, 6, 12), bool], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) {
  @func_6473(%var_6474) /* ty=(Tensor[(7, 6, 12), bool], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) */
}

def @func_8627() -> (Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float32], float32, Tensor[(112), float32], Tensor[(7, 6, 12), float64], Tensor[(6, 13, 14), bool], Tensor[(1092), int32], int32) {
  %309 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %310 = cast(-5.97169f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %311 = cast(meta[relay.Constant][11] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %312 = reshape(%310, newshape=[]) /* ty=float32 */;
  %313 = reshape(%311, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float32] */;
  %314 = @func_3170() /* ty=(Tensor[(7, 6, 12), float64],) */;
  %315 = cast(meta[relay.Constant][12] /* ty=Tensor[(1092), int32] */, dtype="int32") /* ty=Tensor[(1092), int32] */;
  %316 = reshape(%315, newshape=[6, 13, 14]) /* ty=Tensor[(6, 13, 14), int32] */;
  %317 = @func_8276(%316) /* ty=(Tensor[(6, 13, 14), bool], Tensor[(6, 13, 14), int16]) */;
  %318 = @func_1589(%312, %313) /* ty=Tensor[(2, 8, 7), float32] */;
  %319 = cast(%318, dtype="int32") /* ty=Tensor[(2, 8, 7), int32] */;
  %320 = reshape(%319, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %321 = @func_6473(%320) /* ty=(Tensor[(7, 6, 12), bool], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) */;
  %322 = %309.0;
  %323 = %314.0;
  %324 = %317.0;
  %325 = %321.2;
  (%322, %318, -5.97169f /* ty=float32 */, meta[relay.Constant][11] /* ty=Tensor[(112), float32] */, %323, %324, meta[relay.Constant][12] /* ty=Tensor[(1092), int32] */, %325)
}

def @func_10132(%var_10131: Tensor[(112), float32]) -> (Tensor[(6, 3, 16), float64], Tensor[(48, 1), uint64], Tensor[(112), float32], Tensor[(10, 165), uint8]) {
  %336 = fn (%var_10114: Tensor[(112), float32]) -> (Tensor[(6, 3, 16), float64], Tensor[(48, 1), uint64], Tensor[(112), float32], Tensor[(10, 165), uint8]) {
    %326 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 3, 16), float64] */, dtype="float64") /* ty=Tensor[(6, 3, 16), float64] */;
    %327 = cast(%var_10114, dtype="float32") /* ty=Tensor[(112), float32] */;
    %328 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 165), uint8] */, dtype="uint8") /* ty=Tensor[(10, 165), uint8] */;
    %329 = sinh(%326) /* ty=Tensor[(6, 3, 16), float64] */;
    %330 = cast(%329, dtype="uint64") /* ty=Tensor[(6, 3, 16), uint64] */;
    %331 = reshape(%327, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %332 = reshape(%328, newshape=[1, 1650]) /* ty=Tensor[(1, 1650), uint8] */;
    %333 = reshape(%330, newshape=[288]) /* ty=Tensor[(288), uint64] */;
    %334 = @func_7057(%331, %332, %333) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float64], Tensor[(112), float32], Tensor[(7, 6, 12), float32], Tensor[(16, 3, 6), float32], Tensor[(1, 1650), uint8], Tensor[(48, 1), uint64], Tensor[(288), uint64]) */;
    %335 = %334.7;
    (%329, %335, %var_10114, meta[relay.Constant][14] /* ty=Tensor[(10, 165), uint8] */)
  };
  %336(%var_10131) /* ty=(Tensor[(6, 3, 16), float64], Tensor[(48, 1), uint64], Tensor[(112), float32], Tensor[(10, 165), uint8]) */
}

def @func_8769(%var_8767: Tensor[(60, 14), float64]) -> (Tensor[(112), int32], Tensor[(7, 6, 12), float32], Tensor[(15, 7, 8), float64], Tensor[(60, 14), float64]) {
  @func_8766(%var_8767) /* ty=(Tensor[(112), int32], Tensor[(7, 6, 12), float32], Tensor[(15, 7, 8), float64], Tensor[(60, 14), float64]) */
}

def @func_4196() -> Tensor[(7, 6, 12), bool] {
  %343 = fn () -> Tensor[(7, 6, 12), bool] {
    %337 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
    %338 = %337.0;
    %339 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 6, 12), float32] */, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
    %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
    %341 = cast(%338, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
    %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%341, %342) /* ty=Tensor[(7, 6, 12), bool] */
  };
  %343() /* ty=Tensor[(7, 6, 12), bool] */
}

def @func_6114(%var_6103: Tensor[(16, 7, 14), float64]) -> Tensor[(16, 7, 14), float64] {
  %344 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 7, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
  %345 = shape_of(%var_6103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%var_6103, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%346, %347) /* ty=Tensor[(16, 7, 14), float64] */
}

def @func_5617(%var_5602: Tensor[(770), uint64]) -> (Tensor[(192), float64], Tensor[(2, 8, 7), float64], Tensor[(112), float32], int32, Tensor[(770), uint64]) {
  %348 = cast(meta[relay.Constant][17] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %349 = reshape(%348, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %350 = @func_5537(%349) /* ty=(Tensor[(112), float32], Tensor[(2, 8, 7), int8], Tensor[(2, 8, 7), float64], int32) */;
  %351 = cast(%var_5602, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %352 = reshape(%351, newshape=[770]) /* ty=Tensor[(770), uint64] */;
  %353 = @func_3421(%352) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int32], Tensor[(7, 6, 12), float32], int32, Tensor[(770), uint64], int32) */;
  %354 = @func_4451() /* ty=Tensor[(192), float64] */;
  %355 = %350.2;
  %356 = %353.6;
  (%354, %355, meta[relay.Constant][17] /* ty=Tensor[(112), float32] */, %356, %var_5602)
}

def @func_10062(%var_10050: Tensor[(8, 3, 1), bool]) -> (Tensor[(7, 6, 12), float32], Tensor[(8, 3, ?), uint8]) {
  %357 = @func_9148() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %358 = @func_7119() /* ty=(Tensor[(8, 3, 1), bool],) */;
  %359 = %358.0;
  %360 = cast(%var_10050, dtype="bool") /* ty=Tensor[(8, 3, 1), bool] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="bool") /* ty=Tensor[(8, 3, 1), bool] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %364 = equal(%362, %363) /* ty=Tensor[(8, 3, ?), bool] */;
  %365 = cast(%364, dtype="uint8") /* ty=Tensor[(8, 3, ?), uint8] */;
  %366 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%359, dtype="uint8") /* ty=Tensor[(8, 3, 1), uint8] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %369 = %357.0;
  %370 = bitwise_xor(%367, %368) /* ty=Tensor[(8, 3, ?), uint8] */;
  (%369, %370)
}

def @func_7496(%var_7494: Tensor[(7, 6, 12), float32]) -> (Tensor[(7, 6, 12), bool],) {
  @func_7493(%var_7494) /* ty=(Tensor[(7, 6, 12), bool],) */
}

def @func_5185(%var_5167: Tensor[(12, 4), uint64], %var_5168: Tensor[(288), uint64]) -> (Tensor[(7, 6, 12), float64], Tensor[(48), uint64], Tensor[(1650), uint8], Tensor[(12, 4), uint64], Tensor[(288), uint64]) {
  %371 = @func_4845() /* ty=(Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(192), float64]) */;
  %372 = cast(meta[relay.Constant][18] /* ty=Tensor[(1650), uint8] */, dtype="uint8") /* ty=Tensor[(1650), uint8] */;
  %373 = cast(meta[relay.Constant][18] /* ty=Tensor[(1650), uint8] */, dtype="uint8") /* ty=Tensor[(1650), uint8] */;
  %374 = cast(%var_5167, dtype="uint64") /* ty=Tensor[(12, 4), uint64] */;
  %375 = cast(%var_5168, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %376 = reshape(%372, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), uint8] */;
  %377 = reshape(%373, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), uint8] */;
  %378 = reshape(%374, newshape=[48]) /* ty=Tensor[(48), uint64] */;
  %379 = reshape(%375, newshape=[144, 2]) /* ty=Tensor[(144, 2), uint64] */;
  %380 = @func_962(%376, %377, %378, %379) /* ty=(Tensor[(15, 10, 11), uint8], Tensor[(48), uint64], Tensor[(144, 2), uint64], Tensor[(16, 3, 6), float32]) */;
  %381 = %371.0;
  %382 = %380.1;
  (%381, %382, meta[relay.Constant][18] /* ty=Tensor[(1650), uint8] */, %var_5167, %var_5168)
}

def @func_8009() -> Tensor[(7, 6, 12), float64] {
  %383 = @func_4845() /* ty=(Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(192), float64]) */;
  %383.0
}

def @func_2998() -> (int32,) {
  %386 = fn () -> (int32,) {
    %384 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
    %385 = %384.2;
    (%385,)
  };
  %386() /* ty=(int32,) */
}

def @func_7410(%var_7408: Tensor[(4, 3, 13), float64]) -> (Tensor[(7, 6, 12), float32], Tensor[(4, 3, 13), float32]) {
  @func_7407(%var_7408) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 3, 13), float32]) */
}

def @func_4284(%var_4282: Tensor[(336), int64], %var_4283: Tensor[(224), uint16]) -> (Tensor[(7, 6, 12), float32], Tensor[(224, 1), uint16], Tensor[(336), int64], Tensor[(224), uint16]) {
  @func_4280(%var_4282, %var_4283) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(224, 1), uint16], Tensor[(336), int64], Tensor[(224), uint16]) */
}

def @func_9384() -> (Tensor[(2, 8, 7), float32],) {
  @func_9382() /* ty=(Tensor[(2, 8, 7), float32],) */
}

def @func_7775(%var_7774: Tensor[(112), int32]) -> (Tensor[(192), float64], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) {
  %395 = fn (%var_7770: Tensor[(112), int32]) -> (Tensor[(192), float64], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) {
    %387 = @func_4175() /* ty=(Tensor[(192), float64],) */;
    %388 = cast(2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %389 = cast(%var_7770, dtype="int32") /* ty=Tensor[(112), int32] */;
    %390 = reshape(%388, newshape=[]) /* ty=int32 */;
    %391 = reshape(%389, newshape=[1, 112]) /* ty=Tensor[(1, 112), int32] */;
    %392 = @func_4601(%390, %391) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(1, 112), int32]) */;
    %393 = %387.0;
    %394 = %392.1;
    (%393, %394, 2 /* ty=int32 */, %var_7770)
  };
  %395(%var_7774) /* ty=(Tensor[(192), float64], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) */
}

def @func_6524() -> (int32,) {
  @func_6522() /* ty=(int32,) */
}

def @func_8054() -> (Tensor[(112), int32], int32) {
  @func_8052() /* ty=(Tensor[(112), int32], int32) */
}

def @func_10315() -> (Tensor[(7, 6, 12), float64],) {
  %396 = @func_8627() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float32], float32, Tensor[(112), float32], Tensor[(7, 6, 12), float64], Tensor[(6, 13, 14), bool], Tensor[(1092), int32], int32) */;
  %397 = %396.4;
  (%397,)
}

def @func_10721() -> (Tensor[(7, 6, 12), float32],) {
  %398 = @func_6756() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %399 = %398.0;
  (%399,)
}

def @func_4119(%var_4118: int32) -> (Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64], int32) {
  %406 = fn (%var_4092: int32) -> (Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64], int32) {
    %400 = @func_2731() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %401 = cast(%var_4092, dtype="int32") /* ty=int32 */;
    %402 = reshape(%401, newshape=[]) /* ty=int32 */;
    %403 = @func_2624(%402) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(770), uint64], int32, Tensor[(112), int32], Tensor[(4, 4, 7), int32], Tensor[(7, 6, 12), float64]) */;
    %404 = %400.0;
    %405 = %403.5;
    (%404, %405, %var_4092)
  };
  %406(%var_4118) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64], int32) */
}

def @func_8988(%var_8987: bool) -> (Tensor[(192), float64], Tensor[(8, 6, 4), bool], bool, Tensor[(7, 6, 12), float32], int32) {
  %416 = fn (%var_8970: bool) -> (Tensor[(192), float64], Tensor[(8, 6, 4), bool], bool, Tensor[(7, 6, 12), float32], int32) {
    %407 = cast(%var_8970, dtype="bool") /* ty=bool */;
    %408 = reshape(%407, newshape=[]) /* ty=bool */;
    %409 = @func_869(%408) /* ty=(Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool]) */;
    %410 = @func_4330() /* ty=(Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), float32]) */;
    %411 = @func_2997() /* ty=(int32,) */;
    %412 = @func_4451() /* ty=Tensor[(192), float64] */;
    %413 = %409.0;
    %414 = %410.1;
    %415 = %411.0;
    (%412, %413, %var_8970, %414, %415)
  };
  %416(%var_8987) /* ty=(Tensor[(192), float64], Tensor[(8, 6, 4), bool], bool, Tensor[(7, 6, 12), float32], int32) */
}

def @func_9472() -> (Tensor[(7, 6, 12), float64],) {
  %418 = fn () -> (Tensor[(7, 6, 12), float64],) {
    %417 = @func_8009() /* ty=Tensor[(7, 6, 12), float64] */;
    (%417,)
  };
  %418() /* ty=(Tensor[(7, 6, 12), float64],) */
}

def @func_10977() -> Tensor[(7, 6, 12), float32] {
  @func_10975() /* ty=Tensor[(7, 6, 12), float32] */
}

def @func_11591(%var_11590: Tensor[(192), uint8]) -> (Tensor[(2, 8, 7), float32], Tensor[(3, 4, 16), bool], Tensor[(192), uint8], Tensor[(2, 8, 7), float32]) {
  %424 = fn (%var_11558: Tensor[(192), uint8]) -> (Tensor[(2, 8, 7), float32], Tensor[(3, 4, 16), bool], Tensor[(192), uint8], Tensor[(2, 8, 7), float32]) {
    %419 = cast(%var_11558, dtype="uint8") /* ty=Tensor[(192), uint8] */;
    %420 = reshape(%419, newshape=[3, 4, 16]) /* ty=Tensor[(3, 4, 16), uint8] */;
    %421 = @func_6742() /* ty=Tensor[(2, 8, 7), float32] */;
    %422 = @func_4732(%420) /* ty=Tensor[(3, 4, 16), bool] */;
    %423 = @func_6742() /* ty=Tensor[(2, 8, 7), float32] */;
    (%421, %422, %var_11558, %423)
  };
  %424(%var_11590) /* ty=(Tensor[(2, 8, 7), float32], Tensor[(3, 4, 16), bool], Tensor[(192), uint8], Tensor[(2, 8, 7), float32]) */
}

def @func_3423(%var_3422: Tensor[(770), uint64]) -> (Tensor[(4, 4, 7), int32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int32], Tensor[(7, 6, 12), float32], int32, Tensor[(770), uint64], int32) {
  %452 = fn (%var_3415: Tensor[(770), uint64]) -> (Tensor[(4, 4, 7), int32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int32], Tensor[(7, 6, 12), float32], int32, Tensor[(770), uint64], int32) {
    %425 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
    %426 = @func_3058() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %427 = @func_3170() /* ty=(Tensor[(7, 6, 12), float64],) */;
    %428 = %427.0;
    %429 = cast(%428, dtype="float32") /* ty=Tensor[(7, 6, 12), float32] */;
    %430 = acosh(%429) /* ty=Tensor[(7, 6, 12), float32] */;
    %431 = cast(%430, dtype="float32") /* ty=Tensor[(7, 6, 12), float32] */;
    %432 = sinh(%431) /* ty=Tensor[(7, 6, 12), float32] */;
    %433 = cast(%432, dtype="int32") /* ty=Tensor[(7, 6, 12), int32] */;
    %434 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
    %435 = cast(%430, dtype="int32") /* ty=Tensor[(7, 6, 12), int32] */;
    %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %437 = @func_2819() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %438 = cast(%var_3415, dtype="uint64") /* ty=Tensor[(770), uint64] */;
    %439 = cast(%var_3415, dtype="uint64") /* ty=Tensor[(770), uint64] */;
    %440 = cast(9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %441 = %425.1;
    %442 = cast(%441, dtype="int32") /* ty=Tensor[(4, 4, 7), int32] */;
    %443 = reshape(%438, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
    %444 = reshape(%439, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
    %445 = reshape(%440, newshape=[]) /* ty=int32 */;
    %446 = reshape(%442, newshape=[112]) /* ty=Tensor[(112), int32] */;
    %447 = @func_1007(%443, %444, %445, %446) /* ty=(Tensor[(4, 4, 7), int32], int32, Tensor[(112), int32], Tensor[(10, 7, 11), float64]) */;
    %448 = %426.0;
    %449 = add(%435, %436) /* ty=Tensor[(7, 6, 12), int32] */;
    %450 = %437.0;
    %451 = %447.1;
    (%441, %448, %449, %450, %451, %var_3415, 9 /* ty=int32 */)
  };
  %452(%var_3422) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int32], Tensor[(7, 6, 12), float32], int32, Tensor[(770), uint64], int32) */
}

def @func_9974() -> (Tensor[(7, 6, 12), float64],) {
  %455 = fn () -> (Tensor[(7, 6, 12), float64],) {
    %453 = @func_9471() /* ty=(Tensor[(7, 6, 12), float64],) */;
    %454 = %453.0;
    (%454,)
  };
  %455() /* ty=(Tensor[(7, 6, 12), float64],) */
}

def @func_8629() -> (Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float32], float32, Tensor[(112), float32], Tensor[(7, 6, 12), float64], Tensor[(6, 13, 14), bool], Tensor[(1092), int32], int32) {
  @func_8627() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float32], float32, Tensor[(112), float32], Tensor[(7, 6, 12), float64], Tensor[(6, 13, 14), bool], Tensor[(1092), int32], int32) */
}

def @func_3033(%var_3026: int32) -> (Tensor[(7, 6, 12), float32], Tensor[(8, 6, 4), bool], Tensor[(770), uint64], int32) {
  %456 = @func_3009() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %457 = cast(meta[relay.Constant][19] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %458 = cast(%var_3026, dtype="int32") /* ty=int32 */;
  %459 = reshape(%457, newshape=[770, 1]) /* ty=Tensor[(770, 1), uint64] */;
  %460 = reshape(%458, newshape=[]) /* ty=int32 */;
  %461 = @func_1921(%459, %460) /* ty=(Tensor[(770, 1), uint64], int32, Tensor[(112), int32], Tensor[(2, 8, 7), float32], Tensor[(2, 8, 7), float32], Tensor[(16, 3, 6), uint64], Tensor[(48), uint64], Tensor[(288), uint64], Tensor[(4, 4, 7), int32], Tensor[(144, 2), uint64], Tensor[(1650), uint8], Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool], Tensor[(15, 7, 8), float64], Tensor[(840), float64], Tensor[(4, 8, 5), bool], Tensor[(4, 8, 5), float64]) */;
  %462 = %456.0;
  %463 = %461.11;
  (%462, %463, meta[relay.Constant][19] /* ty=Tensor[(770), uint64] */, %var_3026)
}

def @func_11258() -> (Tensor[(7, 6, 12), float32], Tensor[(192), float64]) {
  %464 = @func_5894() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %465 = @func_4845() /* ty=(Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(192), float64]) */;
  %466 = %464.0;
  %467 = %465.1;
  (%466, %467)
}

def @func_4516() -> (Tensor[(3, 4, 16), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32]) {
  @func_4514() /* ty=(Tensor[(3, 4, 16), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32]) */
}

def @func_8679(%var_8677: Tensor[(9, 6, 10), uint8], %var_8678: Tensor[(9, 6, 10), uint8]) -> (Tensor[(9, 6, 10), uint8],) {
  @func_8675(%var_8677, %var_8678) /* ty=(Tensor[(9, 6, 10), uint8],) */
}

def @func_4927() -> int32 {
  %469 = fn () -> int32 {
    %468 = @func_3830() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) */;
    %468.2
  };
  %469() /* ty=int32 */
}

def @func_3081() -> (Tensor[(7, 6, 12), float32],) {
  @func_3079() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_7911() -> int32 {
  @func_7909() /* ty=int32 */
}

def @func_7062(%var_7059: Tensor[(112), float32], %var_7060: Tensor[(1, 1650), uint8], %var_7061: Tensor[(288), uint64]) -> (Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float64], Tensor[(112), float32], Tensor[(7, 6, 12), float32], Tensor[(16, 3, 6), float32], Tensor[(1, 1650), uint8], Tensor[(48, 1), uint64], Tensor[(288), uint64]) {
  @func_7057(%var_7059, %var_7060, %var_7061) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float64], Tensor[(112), float32], Tensor[(7, 6, 12), float32], Tensor[(16, 3, 6), float32], Tensor[(1, 1650), uint8], Tensor[(48, 1), uint64], Tensor[(288), uint64]) */
}

def @func_2492(%var_2491: Tensor[(192), float64]) -> (Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(3, 4, 16), float64], Tensor[(7, 6, 12), float32]) {
  %481 = fn (%var_2468: Tensor[(192), float64]) -> (Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(3, 4, 16), float64], Tensor[(7, 6, 12), float32]) {
    %470 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %471 = %470.0;
    %472 = cast(%471, dtype="float64") /* ty=Tensor[(7, 6, 12), float64] */;
    %473 = cast(%var_2468, dtype="float64") /* ty=Tensor[(192), float64] */;
    %474 = reshape(%473, newshape=[3, 4, 16]) /* ty=Tensor[(3, 4, 16), float64] */;
    %475 = @func_1128(%474) /* ty=Tensor[(3, 4, 16), float64] */;
    %476 = cast(%475, dtype="float64") /* ty=Tensor[(3, 4, 16), float64] */;
    %477 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %478 = asin(%472) /* ty=Tensor[(7, 6, 12), float64] */;
    %479 = acosh(%476) /* ty=Tensor[(3, 4, 16), float64] */;
    %480 = %477.0;
    (%478, %var_2468, %479, %480)
  };
  %481(%var_2491) /* ty=(Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(3, 4, 16), float64], Tensor[(7, 6, 12), float32]) */
}

def @func_8307(%var_8303: Tensor[(336), int64]) -> (Tensor[(192), float64], Tensor[(224), uint16], Tensor[(336), int64], Tensor[(224), uint16]) {
  %482 = @func_4067() /* ty=(Tensor[(3, 4, 16), float64], Tensor[(192), float64], Tensor[(7, 6, 12), int16]) */;
  %483 = cast(%var_8303, dtype="int64") /* ty=Tensor[(336), int64] */;
  %484 = cast(meta[relay.Constant][20] /* ty=Tensor[(224), uint16] */, dtype="uint16") /* ty=Tensor[(224), uint16] */;
  %485 = reshape(%483, newshape=[7, 4, 12]) /* ty=Tensor[(7, 4, 12), int64] */;
  %486 = reshape(%484, newshape=[224]) /* ty=Tensor[(224), uint16] */;
  %487 = @func_2559(%485, %486) /* ty=(Tensor[(7, 4, 12), bool], Tensor[(4, 8, 7), uint16], Tensor[(224), uint16]) */;
  %488 = %482.1;
  %489 = %487.2;
  (%488, %489, %var_8303, meta[relay.Constant][20] /* ty=Tensor[(224), uint16] */)
}

def @func_7802() -> (Tensor[(7, 6, 12), float32],) {
  %492 = fn () -> (Tensor[(7, 6, 12), float32],) {
    %490 = @func_4313() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %491 = %490.0;
    (%491,)
  };
  %492() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_4001() -> (Tensor[(7, 6, 12), float32],) {
  @func_3999() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_8420() -> (int32,) {
  %493 = @func_3508() /* ty=int32 */;
  (%493,)
}

def @func_5693(%var_5691: Tensor[(13, 1, 7), float64]) -> (Tensor[(13, 1, 7), float64], Tensor[(3, 4, 16), float64], Tensor[(192), float64]) {
  @func_5690(%var_5691) /* ty=(Tensor[(13, 1, 7), float64], Tensor[(3, 4, 16), float64], Tensor[(192), float64]) */
}

def @func_9413(%var_9399: Tensor[(10, 4, 14), float32], %var_9400: Tensor[(10, 4, 14), float32]) -> (Tensor[(10, 4, 14), bool],) {
  %494 = cast(%var_9400, dtype="bool") /* ty=Tensor[(10, 4, 14), bool] */;
  %495 = shape_of(%var_9399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%var_9399, dtype="bool") /* ty=Tensor[(10, 4, 14), bool] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %498 = greater_equal(%496, %497) /* ty=Tensor[(10, 4, 14), bool] */;
  (%498,)
}

def @func_1532(%var_1530: float32, %var_1531: Tensor[(3, 13, 7), float32]) -> (Tensor[(3, 13, 7), float32],) {
  @func_1528(%var_1530, %var_1531) /* ty=(Tensor[(3, 13, 7), float32],) */
}

def @func_9546() -> Tensor[(3, 4, 16), float64] {
  %502 = fn () -> Tensor[(3, 4, 16), float64] {
    %499 = @func_4514() /* ty=(Tensor[(3, 4, 16), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32]) */;
    %500 = %499.0;
    %501 = cast(%500, dtype="float64") /* ty=Tensor[(3, 4, 16), float64] */;
    sinh(%501) /* ty=Tensor[(3, 4, 16), float64] */
  };
  %502() /* ty=Tensor[(3, 4, 16), float64] */
}

def @func_5620(%var_5618: Tensor[(770), uint64]) -> (Tensor[(192), float64], Tensor[(2, 8, 7), float64], Tensor[(112), float32], int32, Tensor[(770), uint64]) {
  @func_5617(%var_5618) /* ty=(Tensor[(192), float64], Tensor[(2, 8, 7), float64], Tensor[(112), float32], int32, Tensor[(770), uint64]) */
}

def @func_10698(%var_10668: Tensor[(1, 4, 3), int32]) -> (Tensor[(1, 4, 3), bool], Tensor[(7, 6, 12), bool], Tensor[(1, 4, 3), uint8], Tensor[(1, 4, 3), float64], int32) {
  %503 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
  %504 = %503.2;
  %505 = cast(%504, dtype="bool") /* ty=bool */;
  %506 = cast(%var_10668, dtype="bool") /* ty=Tensor[(1, 4, 3), bool] */;
  %507 = cast(%504, dtype="uint8") /* ty=uint8 */;
  %508 = cast(%var_10668, dtype="uint8") /* ty=Tensor[(1, 4, 3), uint8] */;
  %509 = cast(%504, dtype="float64") /* ty=float64 */;
  %510 = cast(%var_10668, dtype="float64") /* ty=Tensor[(1, 4, 3), float64] */;
  %511 = @func_7601() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(192), float64], int32, int32, Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64], Tensor[(24, 2), uint64], Tensor[(288), uint64], int32) */;
  %512 = greater(%505, %506) /* ty=Tensor[(1, 4, 3), bool] */;
  %513 = @func_4195() /* ty=Tensor[(7, 6, 12), bool] */;
  %514 = left_shift(%507, %508) /* ty=Tensor[(1, 4, 3), uint8] */;
  %515 = floor_mod(%509, %510) /* ty=Tensor[(1, 4, 3), float64] */;
  %516 = %511.3;
  (%512, %513, %514, %515, %516)
}

def @func_10701(%var_10699: Tensor[(1, 4, 3), int32]) -> (Tensor[(1, 4, 3), bool], Tensor[(7, 6, 12), bool], Tensor[(1, 4, 3), uint8], Tensor[(1, 4, 3), float64], int32) {
  @func_10698(%var_10699) /* ty=(Tensor[(1, 4, 3), bool], Tensor[(7, 6, 12), bool], Tensor[(1, 4, 3), uint8], Tensor[(1, 4, 3), float64], int32) */
}

def @func_10554() -> (int32,) {
  %517 = @func_5739() /* ty=(int32,) */;
  %518 = %517.0;
  (%518,)
}

def @func_5428() -> (int32,) {
  %520 = fn () -> (int32,) {
    %519 = @func_3629() /* ty=int32 */;
    (%519,)
  };
  %520() /* ty=(int32,) */
}

def @func_8661() -> Tensor[(7, 6, 12), float32] {
  %522 = fn () -> Tensor[(7, 6, 12), float32] {
    %521 = @func_5894() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %521.0
  };
  %522() /* ty=Tensor[(7, 6, 12), float32] */
}

def @func_1924(%var_1922: Tensor[(770, 1), uint64], %var_1923: int32) -> (Tensor[(770, 1), uint64], int32, Tensor[(112), int32], Tensor[(2, 8, 7), float32], Tensor[(2, 8, 7), float32], Tensor[(16, 3, 6), uint64], Tensor[(48), uint64], Tensor[(288), uint64], Tensor[(4, 4, 7), int32], Tensor[(144, 2), uint64], Tensor[(1650), uint8], Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool], Tensor[(15, 7, 8), float64], Tensor[(840), float64], Tensor[(4, 8, 5), bool], Tensor[(4, 8, 5), float64]) {
  %587 = fn (%var_1841: Tensor[(770, 1), uint64], %var_1842: int32) -> (Tensor[(770, 1), uint64], int32, Tensor[(112), int32], Tensor[(2, 8, 7), float32], Tensor[(2, 8, 7), float32], Tensor[(16, 3, 6), uint64], Tensor[(48), uint64], Tensor[(288), uint64], Tensor[(4, 4, 7), int32], Tensor[(144, 2), uint64], Tensor[(1650), uint8], Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool], Tensor[(15, 7, 8), float64], Tensor[(840), float64], Tensor[(4, 8, 5), bool], Tensor[(4, 8, 5), float64]) {
    %523 = cast(%var_1841, dtype="uint64") /* ty=Tensor[(770, 1), uint64] */;
    %524 = cast(%var_1841, dtype="uint64") /* ty=Tensor[(770, 1), uint64] */;
    %525 = cast(%var_1842, dtype="int32") /* ty=int32 */;
    %526 = cast(meta[relay.Constant][21] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
    %527 = reshape(%523, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
    %528 = reshape(%524, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
    %529 = reshape(%525, newshape=[]) /* ty=int32 */;
    %530 = reshape(%526, newshape=[112]) /* ty=Tensor[(112), int32] */;
    %531 = @func_1007(%527, %528, %529, %530) /* ty=(Tensor[(4, 4, 7), int32], int32, Tensor[(112), int32], Tensor[(10, 7, 11), float64]) */;
    %532 = %531.1;
    %533 = cast(%532, dtype="float32") /* ty=float32 */;
    %534 = cast(meta[relay.Constant][21] /* ty=Tensor[(112), int32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
    %535 = reshape(%533, newshape=[]) /* ty=float32 */;
    %536 = reshape(%534, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float32] */;
    %537 = cast(%532, dtype="float32") /* ty=float32 */;
    %538 = @func_1589(%535, %536) /* ty=Tensor[(2, 8, 7), float32] */;
    %539 = cast(%538, dtype="float32") /* ty=Tensor[(2, 8, 7), float32] */;
    %540 = reshape(%537, newshape=[]) /* ty=float32 */;
    %541 = reshape(%539, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float32] */;
    %542 = cast(meta[relay.Constant][22] /* ty=Tensor[(48), uint64] */, dtype="uint64") /* ty=Tensor[(48), uint64] */;
    %543 = cast(meta[relay.Constant][23] /* ty=Tensor[(288), uint64] */, dtype="uint64") /* ty=Tensor[(288), uint64] */;
    %544 = reshape(%542, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), uint64] */;
    %545 = reshape(%543, newshape=[16, 3, 6]) /* ty=Tensor[(16, 3, 6), uint64] */;
    %546 = @func_276(%544, %545) /* ty=(Tensor[(16, 3, 6), uint64],) */;
    %547 = cast(%532, dtype="int32") /* ty=int32 */;
    %548 = cast(meta[relay.Constant][21] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
    %549 = reshape(%547, newshape=[]) /* ty=int32 */;
    %550 = reshape(%548, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), int32] */;
    %551 = @func_54(%549, %550) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(4, 4, 7), bool]) */;
    %552 = cast(meta[relay.Constant][24] /* ty=Tensor[(1650), uint8] */, dtype="uint8") /* ty=Tensor[(1650), uint8] */;
    %553 = cast(meta[relay.Constant][24] /* ty=Tensor[(1650), uint8] */, dtype="uint8") /* ty=Tensor[(1650), uint8] */;
    %554 = cast(meta[relay.Constant][22] /* ty=Tensor[(48), uint64] */, dtype="uint64") /* ty=Tensor[(48), uint64] */;
    %555 = cast(meta[relay.Constant][23] /* ty=Tensor[(288), uint64] */, dtype="uint64") /* ty=Tensor[(288), uint64] */;
    %556 = reshape(%552, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), uint8] */;
    %557 = reshape(%553, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), uint8] */;
    %558 = reshape(%554, newshape=[48]) /* ty=Tensor[(48), uint64] */;
    %559 = reshape(%555, newshape=[144, 2]) /* ty=Tensor[(144, 2), uint64] */;
    %560 = @func_962(%556, %557, %558, %559) /* ty=(Tensor[(15, 10, 11), uint8], Tensor[(48), uint64], Tensor[(144, 2), uint64], Tensor[(16, 3, 6), float32]) */;
    %561 = cast(%532, dtype="bool") /* ty=bool */;
    %562 = reshape(%561, newshape=[]) /* ty=bool */;
    %563 = @func_869(%562) /* ty=(Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool]) */;
    %564 = cast(%532, dtype="bool") /* ty=bool */;
    %565 = reshape(%564, newshape=[]) /* ty=bool */;
    %566 = @func_869(%565) /* ty=(Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool]) */;
    %567 = cast(meta[relay.Constant][25] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
    %568 = reshape(%567, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), float64] */;
    %569 = @func_1365(%568) /* ty=(Tensor[(15, 7, 8), float64],) */;
    %570 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 8, 5), float64] */, dtype="float64") /* ty=Tensor[(4, 8, 5), float64] */;
    %571 = erf(%570) /* ty=Tensor[(4, 8, 5), float64] */;
    %572 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 8, 5), float64] */, dtype="bool") /* ty=Tensor[(4, 8, 5), bool] */;
    %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
    %574 = cast(%571, dtype="bool") /* ty=Tensor[(4, 8, 5), bool] */;
    %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %576 = cast(%571, dtype="float64") /* ty=Tensor[(4, 8, 5), float64] */;
    %577 = cast(%532, dtype="float64") /* ty=float64 */;
    %578 = @func_1589(%540, %541) /* ty=Tensor[(2, 8, 7), float32] */;
    %579 = %546.0;
    %580 = %551.0;
    %581 = %560.2;
    %582 = %563.1;
    %583 = %566.1;
    %584 = %569.0;
    %585 = greater_equal(%574, %575) /* ty=Tensor[(4, 8, 5), bool] */;
    %586 = divide(%576, %577) /* ty=Tensor[(4, 8, 5), float64] */;
    (%var_1841, %var_1842, meta[relay.Constant][21] /* ty=Tensor[(112), int32] */, %538, %578, %579, meta[relay.Constant][22] /* ty=Tensor[(48), uint64] */, meta[relay.Constant][23] /* ty=Tensor[(288), uint64] */, %580, %581, meta[relay.Constant][24] /* ty=Tensor[(1650), uint8] */, %582, %583, %584, meta[relay.Constant][25] /* ty=Tensor[(840), float64] */, %585, %586)
  };
  %587(%var_1922, %var_1923) /* ty=(Tensor[(770, 1), uint64], int32, Tensor[(112), int32], Tensor[(2, 8, 7), float32], Tensor[(2, 8, 7), float32], Tensor[(16, 3, 6), uint64], Tensor[(48), uint64], Tensor[(288), uint64], Tensor[(4, 4, 7), int32], Tensor[(144, 2), uint64], Tensor[(1650), uint8], Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool], Tensor[(15, 7, 8), float64], Tensor[(840), float64], Tensor[(4, 8, 5), bool], Tensor[(4, 8, 5), float64]) */
}

def @func_8276(%var_8246: Tensor[(6, 13, 14), int32]) -> (Tensor[(6, 13, 14), bool], Tensor[(6, 13, 14), int16]) {
  %588 = @func_5739() /* ty=(int32,) */;
  %589 = %588.0;
  %590 = cast(%589, dtype="int8") /* ty=int8 */;
  %591 = cast(%var_8246, dtype="int8") /* ty=Tensor[(6, 13, 14), int8] */;
  %592 = multiply(%590, %591) /* ty=Tensor[(6, 13, 14), int8] */;
  %593 = cast(%592, dtype="bool") /* ty=Tensor[(6, 13, 14), bool] */;
  %594 = cast(%589, dtype="bool") /* ty=bool */;
  %595 = cast(%592, dtype="int16") /* ty=Tensor[(6, 13, 14), int16] */;
  %596 = cast(%589, dtype="int16") /* ty=int16 */;
  %597 = logical_and(%593, %594) /* ty=Tensor[(6, 13, 14), bool] */;
  %598 = maximum(%595, %596) /* ty=Tensor[(6, 13, 14), int16] */;
  (%597, %598)
}

def @func_3922() -> (int32, Tensor[(7, 6, 12), float32]) {
  %599 = @func_2997() /* ty=(int32,) */;
  %600 = @func_2819() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %601 = %599.0;
  %602 = %600.0;
  (%601, %602)
}

def @func_2820() -> (Tensor[(7, 6, 12), float32],) {
  %605 = fn () -> (Tensor[(7, 6, 12), float32],) {
    %603 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %604 = %603.0;
    (%604,)
  };
  %605() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_3710() -> (Tensor[(7, 6, 12), float32], int32, Tensor[(2, 8, 7), float32], Tensor[(112), float32], int32) {
  @func_3708() /* ty=(Tensor[(7, 6, 12), float32], int32, Tensor[(2, 8, 7), float32], Tensor[(112), float32], int32) */
}

def @func_4231() -> (Tensor[(7, 6, 12), float32],) {
  %606 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %607 = %606.0;
  (%607,)
}

def @func_4691() -> (Tensor[(7, 6, 12), int16],) {
  %610 = fn () -> (Tensor[(7, 6, 12), int16],) {
    %608 = @func_4330() /* ty=(Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), float32]) */;
    %609 = %608.0;
    (%609,)
  };
  %610() /* ty=(Tensor[(7, 6, 12), int16],) */
}

def @func_5051() -> (int32, int32) {
  %615 = fn () -> (int32, int32) {
    %611 = @func_4796() /* ty=(int32, Tensor[(3, 4, 16), bool], Tensor[(192), uint8]) */;
    %612 = @func_3830() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) */;
    %613 = %611.0;
    %614 = %612.2;
    (%613, %614)
  };
  %615() /* ty=(int32, int32) */
}

def @func_10723() -> (Tensor[(7, 6, 12), float32],) {
  @func_10721() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_5370() -> (Tensor[(7, 6, 12), float32], int32, int32) {
  %616 = @func_4231() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %617 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %618 = reshape(%617, newshape=[]) /* ty=int32 */;
  %619 = @func_3264(%618) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(770), uint64], int32, Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], int32, Tensor[(192), float64], Tensor[(48, 4), float64], Tensor[(7, 6, 12), float32]) */;
  %620 = %616.0;
  %621 = %619.5;
  (%620, %621, 7 /* ty=int32 */)
}

def @func_1368(%var_1366: Tensor[(15, 7, 8), float64]) -> (Tensor[(15, 7, 8), float64],) {
  @func_1365(%var_1366) /* ty=(Tensor[(15, 7, 8), float64],) */
}

def @func_3170() -> (Tensor[(7, 6, 12), float64],) {
  %622 = @func_3079() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %623 = %622.0;
  %624 = cast(%623, dtype="float64") /* ty=Tensor[(7, 6, 12), float64] */;
  %625 = log2(%624) /* ty=Tensor[(7, 6, 12), float64] */;
  (%625,)
}

def @func_6125() -> (Tensor[(16, 7, 5), uint32],) {
  %629 = fn () -> (Tensor[(16, 7, 5), uint32],) {
    %626 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 7, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1, 7, 1), uint32] */;
    %627 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 7, 5), uint32] */, dtype="uint32") /* ty=Tensor[(16, 7, 5), uint32] */;
    %628 = subtract(%626, %627) /* ty=Tensor[(16, 7, 5), uint32] */;
    (%628,)
  };
  %629() /* ty=(Tensor[(16, 7, 5), uint32],) */
}

def @func_4314() -> (Tensor[(7, 6, 12), float32],) {
  %632 = fn () -> (Tensor[(7, 6, 12), float32],) {
    %630 = @func_4231() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %631 = %630.0;
    (%631,)
  };
  %632() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_3708() -> (Tensor[(7, 6, 12), float32], int32, Tensor[(2, 8, 7), float32], Tensor[(112), float32], int32) {
  %633 = @func_2819() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %634 = @func_3508() /* ty=int32 */;
  %635 = cast(%634, dtype="float32") /* ty=float32 */;
  %636 = cast(meta[relay.Constant][29] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %637 = reshape(%635, newshape=[]) /* ty=float32 */;
  %638 = reshape(%636, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float32] */;
  %639 = cast(%634, dtype="int32") /* ty=int32 */;
  %640 = reshape(%639, newshape=[]) /* ty=int32 */;
  %641 = @func_3033(%640) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(8, 6, 4), bool], Tensor[(770), uint64], int32) */;
  %642 = %633.0;
  %643 = @func_1589(%637, %638) /* ty=Tensor[(2, 8, 7), float32] */;
  %644 = %641.3;
  (%642, %634, %643, meta[relay.Constant][29] /* ty=Tensor[(112), float32] */, %644)
}

def @func_8279(%var_8277: Tensor[(6, 13, 14), int32]) -> (Tensor[(6, 13, 14), bool], Tensor[(6, 13, 14), int16]) {
  @func_8276(%var_8277) /* ty=(Tensor[(6, 13, 14), bool], Tensor[(6, 13, 14), int16]) */
}

def @func_7716(%var_7647: Tensor[(112), int32]) -> (int32, Tensor[(4, 4, 7), int32], Tensor[(770), uint64], Tensor[(112), int32], Tensor[(7, 6, 12), float64], Tensor[(504), float64], Tensor[(7, 6, 12), float32], Tensor[(1, 112), int32], Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), bool]) {
  %645 = @func_3708() /* ty=(Tensor[(7, 6, 12), float32], int32, Tensor[(2, 8, 7), float32], Tensor[(112), float32], int32) */;
  %646 = cast(meta[relay.Constant][30] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %647 = cast(meta[relay.Constant][30] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %648 = %645.1;
  %649 = cast(%648, dtype="int32") /* ty=int32 */;
  %650 = cast(%var_7647, dtype="int32") /* ty=Tensor[(112), int32] */;
  %651 = reshape(%646, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
  %652 = reshape(%647, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), uint64] */;
  %653 = reshape(%649, newshape=[]) /* ty=int32 */;
  %654 = reshape(%650, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %655 = @func_1007(%651, %652, %653, %654) /* ty=(Tensor[(4, 4, 7), int32], int32, Tensor[(112), int32], Tensor[(10, 7, 11), float64]) */;
  %656 = cast(meta[relay.Constant][31] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %657 = reshape(%656, newshape=[7, 6, 12]) /* ty=Tensor[(7, 6, 12), float64] */;
  %658 = @func_6434(%657) /* ty=(Tensor[(7, 6, 12), float64], Tensor[(7, 6, 12), float32], Tensor[(4, 8, 5), bool], Tensor[(77, 10), uint64], int32) */;
  %659 = @func_3708() /* ty=(Tensor[(7, 6, 12), float32], int32, Tensor[(2, 8, 7), float32], Tensor[(112), float32], int32) */;
  %660 = cast(%648, dtype="int32") /* ty=int32 */;
  %661 = %655.0;
  %662 = cast(%661, dtype="int32") /* ty=Tensor[(4, 4, 7), int32] */;
  %663 = reshape(%660, newshape=[]) /* ty=int32 */;
  %664 = reshape(%662, newshape=[1, 112]) /* ty=Tensor[(1, 112), int32] */;
  %665 = @func_4601(%663, %664) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(1, 112), int32]) */;
  %666 = @func_4690() /* ty=(Tensor[(7, 6, 12), int16],) */;
  %667 = cast(meta[relay.Constant][31] /* ty=Tensor[(504), float64] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %668 = reshape(%667, newshape=[7, 6, 12]) /* ty=Tensor[(7, 6, 12), float32] */;
  %669 = @func_7493(%668) /* ty=(Tensor[(7, 6, 12), bool],) */;
  %670 = %658.0;
  %671 = %659.0;
  %672 = %665.3;
  %673 = %666.0;
  %674 = %669.0;
  (%648, %661, meta[relay.Constant][30] /* ty=Tensor[(770), uint64] */, %var_7647, %670, meta[relay.Constant][31] /* ty=Tensor[(504), float64] */, %671, %672, %673, %674)
}

def @func_3630() -> int32 {
  %676 = fn () -> int32 {
    %675 = @func_2997() /* ty=(int32,) */;
    %675.0
  };
  %676() /* ty=int32 */
}

def @func_9933() -> (int32, Tensor[(7, 6, 12), int8]) {
  %688 = fn () -> (int32, Tensor[(7, 6, 12), int8]) {
    %677 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
    %678 = @func_7519() /* ty=(Tensor[(7, 6, 12), float64],) */;
    %679 = %678.0;
    %680 = %677.2;
    %681 = cast(%680, dtype="int32") /* ty=int32 */;
    %682 = reshape(%681, newshape=[]) /* ty=int32 */;
    %683 = @func_3033(%682) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(8, 6, 4), bool], Tensor[(770), uint64], int32) */;
    %684 = %683.3;
    %685 = cast(%679, dtype="int8") /* ty=Tensor[(7, 6, 12), int8] */;
    %686 = cast(%684, dtype="int8") /* ty=int8 */;
    %687 = bitwise_and(%685, %686) /* ty=Tensor[(7, 6, 12), int8] */;
    (%680, %687)
  };
  %688() /* ty=(int32, Tensor[(7, 6, 12), int8]) */
}

def @func_4846() -> (Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(192), float64]) {
  %697 = fn () -> (Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(192), float64]) {
    %689 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %690 = %689.0;
    %691 = cast(%690, dtype="float64") /* ty=Tensor[(7, 6, 12), float64] */;
    %692 = cast(meta[relay.Constant][32] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %693 = reshape(%692, newshape=[192]) /* ty=Tensor[(192), float64] */;
    %694 = @func_2490(%693) /* ty=(Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(3, 4, 16), float64], Tensor[(7, 6, 12), float32]) */;
    %695 = log10(%691) /* ty=Tensor[(7, 6, 12), float64] */;
    %696 = %694.1;
    (%695, %696, meta[relay.Constant][32] /* ty=Tensor[(192), float64] */)
  };
  %697() /* ty=(Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(192), float64]) */
}

def @func_9417(%var_9415: Tensor[(10, 4, 14), float32], %var_9416: Tensor[(10, 4, 14), float32]) -> (Tensor[(10, 4, 14), bool],) {
  @func_9413(%var_9415, %var_9416) /* ty=(Tensor[(10, 4, 14), bool],) */
}

def @func_10590() -> (Tensor[(7, 6, 12), float32],) {
  %700 = fn () -> (Tensor[(7, 6, 12), float32],) {
    %698 = @func_4231() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %699 = %698.0;
    (%699,)
  };
  %700() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_5212() -> (int32, Tensor[(192), float64]) {
  %701 = @func_3629() /* ty=int32 */;
  %702 = @func_4451() /* ty=Tensor[(192), float64] */;
  (%701, %702)
}

def @func_3999() -> (Tensor[(7, 6, 12), float32],) {
  %703 = @func_3009() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %704 = %703.0;
  (%704,)
}

def @func_4605(%var_4603: int32, %var_4604: Tensor[(1, 112), int32]) -> (Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(1, 112), int32]) {
  @func_4601(%var_4603, %var_4604) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(1, 112), int32]) */
}

def @func_11294() -> (Tensor[(3, 4, 16), float32], Tensor[(3, 4, 16), float64]) {
  %711 = fn () -> (Tensor[(3, 4, 16), float32], Tensor[(3, 4, 16), float64]) {
    %705 = @func_4796() /* ty=(int32, Tensor[(3, 4, 16), bool], Tensor[(192), uint8]) */;
    %706 = %705.1;
    %707 = cast(%706, dtype="float32") /* ty=Tensor[(3, 4, 16), float32] */;
    %708 = cast(%706, dtype="float64") /* ty=Tensor[(3, 4, 16), float64] */;
    %709 = cos(%707) /* ty=Tensor[(3, 4, 16), float32] */;
    %710 = asinh(%708) /* ty=Tensor[(3, 4, 16), float64] */;
    (%709, %710)
  };
  %711() /* ty=(Tensor[(3, 4, 16), float32], Tensor[(3, 4, 16), float64]) */
}

def @func_10317() -> (Tensor[(7, 6, 12), float64],) {
  @func_10315() /* ty=(Tensor[(7, 6, 12), float64],) */
}

def @func_3264(%var_3196: int32) -> (Tensor[(7, 6, 12), float32], Tensor[(770), uint64], int32, Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], int32, Tensor[(192), float64], Tensor[(48, 4), float64], Tensor[(7, 6, 12), float32]) {
  %712 = @func_2731() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %713 = cast(%var_3196, dtype="int32") /* ty=int32 */;
  %714 = reshape(%713, newshape=[]) /* ty=int32 */;
  %715 = @func_3033(%714) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(8, 6, 4), bool], Tensor[(770), uint64], int32) */;
  %716 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %717 = @func_3009() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %718 = @func_2997() /* ty=(int32,) */;
  %719 = cast(meta[relay.Constant][33] /* ty=Tensor[(48, 4), float64] */, dtype="float64") /* ty=Tensor[(48, 4), float64] */;
  %720 = reshape(%719, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %721 = @func_2490(%720) /* ty=(Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(3, 4, 16), float64], Tensor[(7, 6, 12), float32]) */;
  %722 = @func_2731() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %723 = %712.0;
  %724 = %715.2;
  %725 = %716.0;
  %726 = %717.0;
  %727 = %718.0;
  %728 = %721.1;
  %729 = %722.0;
  (%723, %724, %var_3196, %725, %726, %727, %728, meta[relay.Constant][33] /* ty=Tensor[(48, 4), float64] */, %729)
}

def @func_7172(%var_7171: Tensor[(91), float64]) -> (int32, int32, Tensor[(192), float64], Tensor[(91), float64]) {
  %738 = fn (%var_7167: Tensor[(91), float64]) -> (int32, int32, Tensor[(192), float64], Tensor[(91), float64]) {
    %730 = @func_2997() /* ty=(int32,) */;
    %731 = @func_5050() /* ty=(int32, int32) */;
    %732 = cast(%var_7167, dtype="float64") /* ty=Tensor[(91), float64] */;
    %733 = reshape(%732, newshape=[13, 1, 7]) /* ty=Tensor[(13, 1, 7), float64] */;
    %734 = @func_5690(%733) /* ty=(Tensor[(13, 1, 7), float64], Tensor[(3, 4, 16), float64], Tensor[(192), float64]) */;
    %735 = %730.0;
    %736 = %731.1;
    %737 = %734.2;
    (%735, %736, %737, %var_7167)
  };
  %738(%var_7171) /* ty=(int32, int32, Tensor[(192), float64], Tensor[(91), float64]) */
}

def @func_3106() -> int32 {
  %740 = fn () -> int32 {
    %739 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
    %739.2
  };
  %740() /* ty=int32 */
}

def @func_10621(%var_10619: Tensor[(336), int64], %var_10620: Tensor[(224), uint16]) -> (Tensor[(192), uint8], Tensor[(192), float64], Tensor[(336), int64], Tensor[(336), int64], Tensor[(224), uint16]) {
  @func_10617(%var_10619, %var_10620) /* ty=(Tensor[(192), uint8], Tensor[(192), float64], Tensor[(336), int64], Tensor[(336), int64], Tensor[(224), uint16]) */
}

def @func_4280(%var_4275: Tensor[(336), int64], %var_4276: Tensor[(224), uint16]) -> (Tensor[(7, 6, 12), float32], Tensor[(224, 1), uint16], Tensor[(336), int64], Tensor[(224), uint16]) {
  %741 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %742 = cast(%var_4275, dtype="int64") /* ty=Tensor[(336), int64] */;
  %743 = cast(%var_4276, dtype="uint16") /* ty=Tensor[(224), uint16] */;
  %744 = reshape(%742, newshape=[336]) /* ty=Tensor[(336), int64] */;
  %745 = reshape(%743, newshape=[224, 1]) /* ty=Tensor[(224, 1), uint16] */;
  %746 = @func_3338(%744, %745) /* ty=(int32, Tensor[(4, 4, 7), int32], Tensor[(8, 6, 4), bool], Tensor[(7, 4, 12), bool], Tensor[(336), int64], Tensor[(224, 1), uint16]) */;
  %747 = %741.0;
  %748 = %746.5;
  (%747, %748, %var_4275, %var_4276)
}

def @func_2425() -> (Tensor[(7, 6, 12), float32],) {
  %751 = fn () -> (Tensor[(7, 6, 12), float32],) {
    %749 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 6, 12), float32] */, dtype="float32") /* ty=Tensor[(7, 6, 12), float32] */;
    %750 = log(%749) /* ty=Tensor[(7, 6, 12), float32] */;
    (%750,)
  };
  %751() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_1592(%var_1590: float32, %var_1591: Tensor[(2, 8, 7), float32]) -> Tensor[(2, 8, 7), float32] {
  %754 = fn (%var_1583: float32, %var_1584: Tensor[(2, 8, 7), float32]) -> Tensor[(2, 8, 7), float32] {
    %752 = cast(%var_1583, dtype="float32") /* ty=float32 */;
    %753 = cast(%var_1584, dtype="float32") /* ty=Tensor[(2, 8, 7), float32] */;
    subtract(%752, %753) /* ty=Tensor[(2, 8, 7), float32] */
  };
  %754(%var_1590, %var_1591) /* ty=Tensor[(2, 8, 7), float32] */
}

def @func_4796() -> (int32, Tensor[(3, 4, 16), bool], Tensor[(192), uint8]) {
  %755 = cast(meta[relay.Constant][35] /* ty=Tensor[(192), uint8] */, dtype="uint8") /* ty=Tensor[(192), uint8] */;
  %756 = reshape(%755, newshape=[3, 4, 16]) /* ty=Tensor[(3, 4, 16), uint8] */;
  %757 = @func_3629() /* ty=int32 */;
  %758 = @func_4732(%756) /* ty=Tensor[(3, 4, 16), bool] */;
  (%757, %758, meta[relay.Constant][35] /* ty=Tensor[(192), uint8] */)
}

def @func_5740() -> (int32,) {
  %760 = fn () -> (int32,) {
    %759 = @func_3508() /* ty=int32 */;
    (%759,)
  };
  %760() /* ty=(int32,) */
}

def @func_6117(%var_6115: Tensor[(16, 7, 14), float64]) -> Tensor[(16, 7, 14), float64] {
  @func_6114(%var_6115) /* ty=Tensor[(16, 7, 14), float64] */
}

def @func_7519() -> (Tensor[(7, 6, 12), float64],) {
  %761 = @func_6651() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64]) */;
  %762 = %761.1;
  (%762,)
}

def @func_4732(%var_4726: Tensor[(3, 4, 16), uint8]) -> Tensor[(3, 4, 16), bool] {
  %763 = @func_4490() /* ty=(Tensor[(3, 4, 16), uint8],) */;
  %764 = %763.0;
  %765 = cast(%var_4726, dtype="bool") /* ty=Tensor[(3, 4, 16), bool] */;
  %766 = shape_of(%764, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%764, dtype="bool") /* ty=Tensor[(3, 4, 16), bool] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%767, %768) /* ty=Tensor[(3, 4, 16), bool] */
}

def @func_6473(%var_6470: Tensor[(112), int32]) -> (Tensor[(7, 6, 12), bool], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) {
  %769 = @func_6004() /* ty=(Tensor[(7, 6, 12), int16],) */;
  %770 = %769.0;
  %771 = cast(%770, dtype="float32") /* ty=Tensor[(7, 6, 12), float32] */;
  %772 = cosh(%771) /* ty=Tensor[(7, 6, 12), float32] */;
  %773 = cast(%770, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %774 = shape_of(%772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%772, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %777 = cast(10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %778 = cast(%var_6470, dtype="int32") /* ty=Tensor[(112), int32] */;
  %779 = reshape(%777, newshape=[]) /* ty=int32 */;
  %780 = reshape(%778, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), int32] */;
  %781 = @func_54(%779, %780) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(4, 4, 7), bool]) */;
  %782 = equal(%775, %776) /* ty=Tensor[(7, 6, 12), bool] */;
  %783 = %781.1;
  (%782, %783, 10 /* ty=int32 */, %var_6470)
}

def @func_9150() -> (Tensor[(7, 6, 12), float32],) {
  @func_9148() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_10012(%var_10007: Tensor[(60), float32]) -> (Tensor[(4, 4, 7), float64], Tensor[(10, 3, 2), uint16], Tensor[(60), float32]) {
  %784 = @func_3830() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(112), int32]) */;
  %785 = %784.1;
  %786 = cast(%785, dtype="float64") /* ty=Tensor[(4, 4, 7), float64] */;
  %787 = cast(%var_10007, dtype="float32") /* ty=Tensor[(60), float32] */;
  %788 = cast(%var_10007, dtype="float32") /* ty=Tensor[(60), float32] */;
  %789 = cast(%var_10007, dtype="bool") /* ty=Tensor[(60), bool] */;
  %790 = reshape(%787, newshape=[10, 3, 2]) /* ty=Tensor[(10, 3, 2), float32] */;
  %791 = reshape(%788, newshape=[10, 3, 2]) /* ty=Tensor[(10, 3, 2), float32] */;
  %792 = reshape(%789, newshape=[10, 3, 2]) /* ty=Tensor[(10, 3, 2), bool] */;
  %793 = @func_9239(%790, %791, %792) /* ty=(Tensor[(10, 3, 2), uint16], Tensor[(10, 3, 2), float64]) */;
  %794 = rsqrt(%786) /* ty=Tensor[(4, 4, 7), float64] */;
  %795 = %793.0;
  (%794, %795, %var_10007)
}

def @func_11410(%var_11408: Tensor[(1, 2240), uint8]) -> (int32, Tensor[(192), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(1, 2240), uint8]) {
  @func_11407(%var_11408) /* ty=(int32, Tensor[(192), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(1, 2240), uint8]) */
}

def @func_6725() -> Tensor[(16, 7, 5), uint32] {
  %796 = @func_6124() /* ty=(Tensor[(16, 7, 5), uint32],) */;
  %796.0
}

def @func_7909() -> int32 {
  %797 = @func_5427() /* ty=(int32,) */;
  %797.0
}

def @func_6652() -> (Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64]) {
  %803 = fn () -> (Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64]) {
    %798 = @func_5014() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %799 = @func_5747() /* ty=Tensor[(7, 6, 12), float32] */;
    %800 = cast(%799, dtype="float64") /* ty=Tensor[(7, 6, 12), float64] */;
    %801 = %798.0;
    %802 = atanh(%800) /* ty=Tensor[(7, 6, 12), float64] */;
    (%801, %802)
  };
  %803() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64]) */
}

def @func_9239(%var_9189: Tensor[(10, 3, 2), float32], %var_9227: Tensor[(10, 3, 2), float32], %var_9232: Tensor[(10, 3, 2), bool]) -> (Tensor[(10, 3, 2), uint16], Tensor[(10, 3, 2), float64]) {
  %804 = cast(%var_9189, dtype="float32") /* ty=Tensor[(10, 3, 2), float32] */;
  %805 = sin(%804) /* ty=Tensor[(10, 3, 2), float32] */;
  %806 = cast(%var_9227, dtype="uint16") /* ty=Tensor[(10, 3, 2), uint16] */;
  %807 = shape_of(%805, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%805, dtype="uint16") /* ty=Tensor[(10, 3, 2), uint16] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %810 = cast(%var_9189, dtype="bool") /* ty=Tensor[(10, 3, 2), bool] */;
  %811 = shape_of(%805, dtype="int32") /* ty=Tensor[(3), int32] */;
  %812 = cast(%805, dtype="bool") /* ty=Tensor[(10, 3, 2), bool] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %814 = equal(%812, %813) /* ty=Tensor[(10, 3, 2), bool] */;
  %815 = cast(%var_9232, dtype="float64") /* ty=Tensor[(10, 3, 2), float64] */;
  %816 = shape_of(%814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(%814, dtype="float64") /* ty=Tensor[(10, 3, 2), float64] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %819 = maximum(%808, %809) /* ty=Tensor[(10, 3, 2), uint16] */;
  %820 = mod(%817, %818) /* ty=Tensor[(10, 3, 2), float64] */;
  (%819, %820)
}

def @func_2683() -> (Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) {
  %821 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %822 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %823 = reshape(%822, newshape=[]) /* ty=int32 */;
  %824 = @func_2624(%823) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(770), uint64], int32, Tensor[(112), int32], Tensor[(4, 4, 7), int32], Tensor[(7, 6, 12), float64]) */;
  %825 = %821.0;
  %826 = %824.0;
  (%825, %826, -2 /* ty=int32 */)
}

def @func_6757() -> (Tensor[(7, 6, 12), float32],) {
  %829 = fn () -> (Tensor[(7, 6, 12), float32],) {
    %827 = @func_4330() /* ty=(Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), float32]) */;
    %828 = %827.1;
    (%828,)
  };
  %829() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_7743(%var_7738: Tensor[(5, 9, 12), float64]) -> (Tensor[(5, 9, 12), float64],) {
  %830 = cast(%var_7738, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
  %831 = sqrt(%830) /* ty=Tensor[(5, 9, 12), float64] */;
  (%831,)
}

def @func_8675(%var_8667: Tensor[(9, 6, 10), uint8], %var_8668: Tensor[(9, 6, 10), uint8]) -> (Tensor[(9, 6, 10), uint8],) {
  %832 = cast(%var_8668, dtype="uint8") /* ty=Tensor[(9, 6, 10), uint8] */;
  %833 = shape_of(%var_8667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %834 = cast(%var_8667, dtype="uint8") /* ty=Tensor[(9, 6, 10), uint8] */;
  %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %836 = bitwise_xor(%834, %835) /* ty=Tensor[(9, 6, 10), uint8] */;
  (%836,)
}

def @func_7601() -> (Tensor[(7, 6, 12), float32], Tensor[(192), float64], int32, int32, Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64], Tensor[(24, 2), uint64], Tensor[(288), uint64], int32) {
  %837 = @func_5014() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %838 = @func_5739() /* ty=(int32,) */;
  %839 = cast(meta[relay.Constant][36] /* ty=Tensor[(24, 2), uint64] */, dtype="uint64") /* ty=Tensor[(24, 2), uint64] */;
  %840 = cast(meta[relay.Constant][37] /* ty=Tensor[(288), uint64] */, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %841 = reshape(%839, newshape=[12, 4]) /* ty=Tensor[(12, 4), uint64] */;
  %842 = reshape(%840, newshape=[288]) /* ty=Tensor[(288), uint64] */;
  %843 = @func_5185(%841, %842) /* ty=(Tensor[(7, 6, 12), float64], Tensor[(48), uint64], Tensor[(1650), uint8], Tensor[(12, 4), uint64], Tensor[(288), uint64]) */;
  %844 = %837.0;
  %845 = @func_4451() /* ty=Tensor[(192), float64] */;
  %846 = %838.0;
  %847 = @func_3508() /* ty=int32 */;
  %848 = @func_6100() /* ty=Tensor[(7, 6, 12), float32] */;
  %849 = %843.0;
  %850 = @func_4926() /* ty=int32 */;
  (%844, %845, %846, %847, %848, %849, meta[relay.Constant][36] /* ty=Tensor[(24, 2), uint64] */, meta[relay.Constant][37] /* ty=Tensor[(288), uint64] */, %850)
}

def @func_9244(%var_9241: Tensor[(10, 3, 2), float32], %var_9242: Tensor[(10, 3, 2), float32], %var_9243: Tensor[(10, 3, 2), bool]) -> (Tensor[(10, 3, 2), uint16], Tensor[(10, 3, 2), float64]) {
  @func_9239(%var_9241, %var_9242, %var_9243) /* ty=(Tensor[(10, 3, 2), uint16], Tensor[(10, 3, 2), float64]) */
}

def @func_4176() -> (Tensor[(192), float64],) {
  %853 = fn () -> (Tensor[(192), float64],) {
    %851 = @func_4067() /* ty=(Tensor[(3, 4, 16), float64], Tensor[(192), float64], Tensor[(7, 6, 12), int16]) */;
    %852 = %851.1;
    (%852,)
  };
  %853() /* ty=(Tensor[(192), float64],) */
}

def @func_11635() -> (Tensor[(7, 6, 12), float32],) {
  @func_11633() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @main() -> (Tensor[(1, 1, 15), bool], Tensor[(1, 1, 15), float32]) {
  %854 = cast(meta[relay.Constant][38] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %855 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 1, 15), uint8] */, dtype="bool") /* ty=Tensor[(1, 1, 15), bool] */;
  %856 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 1, 15), uint8] */, dtype="float32") /* ty=Tensor[(1, 1, 15), float32] */;
  %857 = not_equal(%854, %855) /* ty=Tensor[(1, 1, 15), bool] */;
  %858 = log10(%856) /* ty=Tensor[(1, 1, 15), float32] */;
  (%857, %858)
}

def @func_3341(%var_3339: Tensor[(336), int64], %var_3340: Tensor[(224, 1), uint16]) -> (int32, Tensor[(4, 4, 7), int32], Tensor[(8, 6, 4), bool], Tensor[(7, 4, 12), bool], Tensor[(336), int64], Tensor[(224, 1), uint16]) {
  %872 = fn (%var_3332: Tensor[(336), int64], %var_3333: Tensor[(224, 1), uint16]) -> (int32, Tensor[(4, 4, 7), int32], Tensor[(8, 6, 4), bool], Tensor[(7, 4, 12), bool], Tensor[(336), int64], Tensor[(224, 1), uint16]) {
    %859 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
    %860 = @func_3105() /* ty=int32 */;
    %861 = cast(%860, dtype="bool") /* ty=bool */;
    %862 = reshape(%861, newshape=[]) /* ty=bool */;
    %863 = @func_869(%862) /* ty=(Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool]) */;
    %864 = cast(%var_3332, dtype="int64") /* ty=Tensor[(336), int64] */;
    %865 = cast(%var_3333, dtype="uint16") /* ty=Tensor[(224, 1), uint16] */;
    %866 = reshape(%864, newshape=[7, 4, 12]) /* ty=Tensor[(7, 4, 12), int64] */;
    %867 = reshape(%865, newshape=[224]) /* ty=Tensor[(224), uint16] */;
    %868 = @func_2559(%866, %867) /* ty=(Tensor[(7, 4, 12), bool], Tensor[(4, 8, 7), uint16], Tensor[(224), uint16]) */;
    %869 = %859.1;
    %870 = %863.1;
    %871 = %868.0;
    (%860, %869, %870, %871, %var_3332, %var_3333)
  };
  %872(%var_3339, %var_3340) /* ty=(int32, Tensor[(4, 4, 7), int32], Tensor[(8, 6, 4), bool], Tensor[(7, 4, 12), bool], Tensor[(336), int64], Tensor[(224, 1), uint16]) */
}

def @func_8463() -> (int32, Tensor[(112), int32]) {
  @func_8461() /* ty=(int32, Tensor[(112), int32]) */
}

def @func_2867(%var_2823: Tensor[(7, 6, 12), float32], %var_2841: Tensor[(24, 14), int64], %var_2842: Tensor[(224), uint16]) -> (Tensor[(224), uint16], Tensor[(24, 14), int64], Tensor[(224), uint16], Tensor[(7, 6, 12), bool]) {
  %873 = cast(%var_2841, dtype="int64") /* ty=Tensor[(24, 14), int64] */;
  %874 = cast(%var_2842, dtype="uint16") /* ty=Tensor[(224), uint16] */;
  %875 = reshape(%873, newshape=[7, 4, 12]) /* ty=Tensor[(7, 4, 12), int64] */;
  %876 = reshape(%874, newshape=[224]) /* ty=Tensor[(224), uint16] */;
  %877 = @func_2559(%875, %876) /* ty=(Tensor[(7, 4, 12), bool], Tensor[(4, 8, 7), uint16], Tensor[(224), uint16]) */;
  %878 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %879 = %878.0;
  %880 = cast(%var_2823, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %881 = shape_of(%879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(%879, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %884 = greater_equal(%882, %883) /* ty=Tensor[(7, 6, 12), bool] */;
  %885 = cast(%884, dtype="float64") /* ty=Tensor[(7, 6, 12), float64] */;
  %886 = sin(%885) /* ty=Tensor[(7, 6, 12), float64] */;
  %887 = cast(%884, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(%886, dtype="bool") /* ty=Tensor[(7, 6, 12), bool] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %891 = %877.2;
  %892 = logical_and(%889, %890) /* ty=Tensor[(7, 6, 12), bool] */;
  (%891, %var_2841, %var_2842, %892)
}

def @func_4452() -> Tensor[(192), float64] {
  %894 = fn () -> Tensor[(192), float64] {
    %893 = @func_4175() /* ty=(Tensor[(192), float64],) */;
    %893.0
  };
  %894() /* ty=Tensor[(192), float64] */
}

def @func_8636() -> int32 {
  %895 = fn () -> int32 {
    @func_3508() /* ty=int32 */
  };
  %895() /* ty=int32 */
}

def @func_2733() -> (Tensor[(7, 6, 12), float32],) {
  @func_2731() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_10405() -> (Tensor[(2, 8, 7), float32],) {
  @func_10403() /* ty=(Tensor[(2, 8, 7), float32],) */
}

def @func_4883(%var_4881: Tensor[(16, 8, 11), uint16], %var_4882: Tensor[(770), uint64]) -> (Tensor[(16, 8, 11), uint16], Tensor[(7, 6, 12), float32], Tensor[(770), uint64]) {
  %905 = fn (%var_4866: Tensor[(16, 8, 11), uint16], %var_4878: Tensor[(770), uint64]) -> (Tensor[(16, 8, 11), uint16], Tensor[(7, 6, 12), float32], Tensor[(770), uint64]) {
    %896 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 8, 11), uint16] */, dtype="uint16") /* ty=Tensor[(16, 8, 11), uint16] */;
    %897 = shape_of(%var_4866, dtype="int32") /* ty=Tensor[(3), int32] */;
    %898 = cast(%var_4866, dtype="uint16") /* ty=Tensor[(16, 8, 11), uint16] */;
    %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %900 = cast(%var_4878, dtype="uint64") /* ty=Tensor[(770), uint64] */;
    %901 = reshape(%900, newshape=[770]) /* ty=Tensor[(770), uint64] */;
    %902 = @func_3421(%901) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int32], Tensor[(7, 6, 12), float32], int32, Tensor[(770), uint64], int32) */;
    %903 = bitwise_and(%898, %899) /* ty=Tensor[(16, 8, 11), uint16] */;
    %904 = %902.3;
    (%903, %904, %var_4878)
  };
  %905(%var_4881, %var_4882) /* ty=(Tensor[(16, 8, 11), uint16], Tensor[(7, 6, 12), float32], Tensor[(770), uint64]) */
}

def @func_9682(%var_9677: bool) -> (Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), bool], Tensor[(7, 6, 12), float32], bool) {
  %906 = cast(%var_9677, dtype="bool") /* ty=bool */;
  %907 = reshape(%906, newshape=[]) /* ty=bool */;
  %908 = @func_8986(%907) /* ty=(Tensor[(192), float64], Tensor[(8, 6, 4), bool], bool, Tensor[(7, 6, 12), float32], int32) */;
  %909 = @func_6100() /* ty=Tensor[(7, 6, 12), float32] */;
  %910 = @func_4195() /* ty=Tensor[(7, 6, 12), bool] */;
  %911 = %908.3;
  (%909, %910, %911, %var_9677)
}

def @func_7879() -> (Tensor[(16, 7, 5), uint32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), bool]) {
  %912 = @func_6124() /* ty=(Tensor[(16, 7, 5), uint32],) */;
  %913 = @func_2819() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %914 = @func_4330() /* ty=(Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), float32]) */;
  %915 = %912.0;
  %916 = %913.0;
  %917 = %914.0;
  %918 = @func_4195() /* ty=Tensor[(7, 6, 12), bool] */;
  (%915, %916, %917, %918)
}

def @func_6005() -> (Tensor[(7, 6, 12), int16],) {
  %921 = fn () -> (Tensor[(7, 6, 12), int16],) {
    %919 = @func_4690() /* ty=(Tensor[(7, 6, 12), int16],) */;
    %920 = %919.0;
    (%920,)
  };
  %921() /* ty=(Tensor[(7, 6, 12), int16],) */
}

def @func_10975() -> Tensor[(7, 6, 12), float32] {
  %922 = @func_8091() /* ty=(int32, Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(8, 3, 1), bool], Tensor[(2240), bool]) */;
  %922.1
}

def @func_9953() -> (Tensor[(7, 6, 12), float64], int32) {
  %927 = fn () -> (Tensor[(7, 6, 12), float64], int32) {
    %923 = @func_9471() /* ty=(Tensor[(7, 6, 12), float64],) */;
    %924 = @func_5050() /* ty=(int32, int32) */;
    %925 = %923.0;
    %926 = %924.1;
    (%925, %926)
  };
  %927() /* ty=(Tensor[(7, 6, 12), float64], int32) */
}

def @func_8310(%var_8308: Tensor[(336), int64]) -> (Tensor[(192), float64], Tensor[(224), uint16], Tensor[(336), int64], Tensor[(224), uint16]) {
  @func_8307(%var_8308) /* ty=(Tensor[(192), float64], Tensor[(224), uint16], Tensor[(336), int64], Tensor[(224), uint16]) */
}

def @func_8092() -> (int32, Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(8, 3, 1), bool], Tensor[(2240), bool]) {
  %944 = fn () -> (int32, Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(8, 3, 1), bool], Tensor[(2240), bool]) {
    %928 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %929 = @func_7119() /* ty=(Tensor[(8, 3, 1), bool],) */;
    %930 = cast(meta[relay.Constant][41] /* ty=Tensor[(2240), uint8] */, dtype="uint8") /* ty=Tensor[(2240), uint8] */;
    %931 = reshape(%930, newshape=[2240]) /* ty=Tensor[(2240), uint8] */;
    %932 = @func_5821(%931) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(24, 8), float64], Tensor[(7, 6, 12), float32]) */;
    %933 = %932.1;
    %934 = cast(%933, dtype="float32") /* ty=Tensor[(2240), float32] */;
    %935 = log2(%934) /* ty=Tensor[(2240), float32] */;
    %936 = cast(%933, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %937 = shape_of(%935, dtype="int32") /* ty=Tensor[(1), int32] */;
    %938 = cast(%935, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?), bool] */;
    %940 = @func_4926() /* ty=int32 */;
    %941 = %928.0;
    %942 = %929.0;
    %943 = less_equal(%938, %939) /* ty=Tensor[(2240), bool] */;
    (%940, %941, meta[relay.Constant][41] /* ty=Tensor[(2240), uint8] */, %942, %943)
  };
  %944() /* ty=(int32, Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(8, 3, 1), bool], Tensor[(2240), bool]) */
}

def @func_1131(%var_1129: Tensor[(3, 4, 16), float64]) -> Tensor[(3, 4, 16), float64] {
  @func_1128(%var_1129) /* ty=Tensor[(3, 4, 16), float64] */
}

def @func_10196() -> (Tensor[(15, 15, 14), float32], Tensor[(10, 4, 14), bool], Tensor[(560), float32], Tensor[(2240), uint8], Tensor[(7, 6, 12), float32], Tensor[(24), bool]) {
  %945 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 15, 14), float32] */, dtype="float32") /* ty=Tensor[(15, 15, 14), float32] */;
  %946 = cast(meta[relay.Constant][43] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %947 = cast(meta[relay.Constant][43] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %948 = reshape(%946, newshape=[10, 4, 14]) /* ty=Tensor[(10, 4, 14), float32] */;
  %949 = reshape(%947, newshape=[10, 4, 14]) /* ty=Tensor[(10, 4, 14), float32] */;
  %950 = @func_9413(%948, %949) /* ty=(Tensor[(10, 4, 14), bool],) */;
  %951 = @func_8091() /* ty=(int32, Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(8, 3, 1), bool], Tensor[(2240), bool]) */;
  %952 = cast(meta[relay.Constant][44] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %953 = reshape(%952, newshape=[8, 3, 1]) /* ty=Tensor[(8, 3, 1), bool] */;
  %954 = @func_10062(%953) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(8, 3, ?), uint8]) */;
  %955 = log(%945) /* ty=Tensor[(15, 15, 14), float32] */;
  %956 = %950.0;
  %957 = %951.2;
  %958 = %954.0;
  (%955, %956, meta[relay.Constant][43] /* ty=Tensor[(560), float32] */, %957, %958, meta[relay.Constant][44] /* ty=Tensor[(24), bool] */)
}

def @func_2383(%var_2381: Tensor[(4, 8, 7), uint16], %var_2382: Tensor[(4, 8, 7), uint16]) -> Tensor[(4, 8, 7), uint16] {
  %963 = fn (%var_2369: Tensor[(4, 8, 7), uint16], %var_2370: Tensor[(4, 8, 7), uint16]) -> Tensor[(4, 8, 7), uint16] {
    %959 = cast(%var_2370, dtype="uint16") /* ty=Tensor[(4, 8, 7), uint16] */;
    %960 = shape_of(%var_2369, dtype="int32") /* ty=Tensor[(3), int32] */;
    %961 = cast(%var_2369, dtype="uint16") /* ty=Tensor[(4, 8, 7), uint16] */;
    %962 = dyn.reshape(%959, %960, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    left_shift(%961, %962) /* ty=Tensor[(4, 8, 7), uint16] */
  };
  %963(%var_2381, %var_2382) /* ty=Tensor[(4, 8, 7), uint16] */
}

def @func_10065(%var_10063: Tensor[(8, 3, 1), bool]) -> (Tensor[(7, 6, 12), float32], Tensor[(8, 3, ?), uint8]) {
  @func_10062(%var_10063) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(8, 3, ?), uint8]) */
}

def @func_4514() -> (Tensor[(3, 4, 16), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32]) {
  %964 = @func_4490() /* ty=(Tensor[(3, 4, 16), uint8],) */;
  %965 = @func_3079() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %966 = @func_3079() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %967 = %964.0;
  %968 = %965.0;
  %969 = %966.0;
  (%967, %968, %969)
}

def @func_11260() -> (Tensor[(7, 6, 12), float32], Tensor[(192), float64]) {
  @func_11258() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(192), float64]) */
}

def @func_11276() -> (Tensor[(7, 6, 12), float32],) {
  @func_11274() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_6743() -> Tensor[(2, 8, 7), float32] {
  %971 = fn () -> Tensor[(2, 8, 7), float32] {
    %970 = @func_3708() /* ty=(Tensor[(7, 6, 12), float32], int32, Tensor[(2, 8, 7), float32], Tensor[(112), float32], int32) */;
    %970.2
  };
  %971() /* ty=Tensor[(2, 8, 7), float32] */
}

def @func_5189(%var_5187: Tensor[(12, 4), uint64], %var_5188: Tensor[(288), uint64]) -> (Tensor[(7, 6, 12), float64], Tensor[(48), uint64], Tensor[(1650), uint8], Tensor[(12, 4), uint64], Tensor[(288), uint64]) {
  @func_5185(%var_5187, %var_5188) /* ty=(Tensor[(7, 6, 12), float64], Tensor[(48), uint64], Tensor[(1650), uint8], Tensor[(12, 4), uint64], Tensor[(288), uint64]) */
}

def @func_9182() -> (Tensor[(3, 4, 16), uint8], int32) {
  @func_9180() /* ty=(Tensor[(3, 4, 16), uint8], int32) */
}

def @func_5372() -> (Tensor[(7, 6, 12), float32], int32, int32) {
  @func_5370() /* ty=(Tensor[(7, 6, 12), float32], int32, int32) */
}

def @func_10403() -> (Tensor[(2, 8, 7), float32],) {
  %972 = @func_9382() /* ty=(Tensor[(2, 8, 7), float32],) */;
  %973 = %972.0;
  (%973,)
}

def @func_57(%var_55: int32, %var_56: Tensor[(4, 4, 7), int32]) -> (Tensor[(4, 4, 7), int32], Tensor[(4, 4, 7), bool]) {
  %980 = fn (%var_17: int32, %var_18: Tensor[(4, 4, 7), int32]) -> (Tensor[(4, 4, 7), int32], Tensor[(4, 4, 7), bool]) {
    %974 = cast(%var_17, dtype="int32") /* ty=int32 */;
    %975 = cast(%var_18, dtype="int32") /* ty=Tensor[(4, 4, 7), int32] */;
    %976 = cast(%var_18, dtype="bool") /* ty=Tensor[(4, 4, 7), bool] */;
    %977 = cast(%var_17, dtype="bool") /* ty=bool */;
    %978 = maximum(%974, %975) /* ty=Tensor[(4, 4, 7), int32] */;
    %979 = less(%976, %977) /* ty=Tensor[(4, 4, 7), bool] */;
    (%978, %979)
  };
  %980(%var_55, %var_56) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(4, 4, 7), bool]) */
}

def @func_7603() -> (Tensor[(7, 6, 12), float32], Tensor[(192), float64], int32, int32, Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64], Tensor[(24, 2), uint64], Tensor[(288), uint64], int32) {
  @func_7601() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(192), float64], int32, int32, Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64], Tensor[(24, 2), uint64], Tensor[(288), uint64], int32) */
}

def @func_11274() -> (Tensor[(7, 6, 12), float32],) {
  %981 = @func_6651() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float64]) */;
  %982 = %981.0;
  (%982,)
}

def @func_5214() -> (int32, Tensor[(192), float64]) {
  @func_5212() /* ty=(int32, Tensor[(192), float64]) */
}

def @func_10015(%var_10013: Tensor[(60), float32]) -> (Tensor[(4, 4, 7), float64], Tensor[(10, 3, 2), uint16], Tensor[(60), float32]) {
  @func_10012(%var_10013) /* ty=(Tensor[(4, 4, 7), float64], Tensor[(10, 3, 2), uint16], Tensor[(60), float32]) */
}

def @func_2685() -> (Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) {
  @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */
}

def @func_3059() -> (Tensor[(7, 6, 12), float32],) {
  %985 = fn () -> (Tensor[(7, 6, 12), float32],) {
    %983 = @func_3009() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %984 = %983.0;
    (%984,)
  };
  %985() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_6102() -> Tensor[(7, 6, 12), float32] {
  @func_6100() /* ty=Tensor[(7, 6, 12), float32] */
}

def @func_10840() -> Tensor[(7, 6, 12), float32] {
  @func_4434() /* ty=Tensor[(7, 6, 12), float32] */
}

def @func_11478(%var_11476: Tensor[(5, 13, 5), uint16], %var_11477: Tensor[(5, 13, 5), uint16]) -> Tensor[(5, 13, 5), uint16] {
  %990 = fn (%var_11466: Tensor[(5, 13, 5), uint16], %var_11467: Tensor[(5, 13, 5), uint16]) -> Tensor[(5, 13, 5), uint16] {
    %986 = cast(%var_11467, dtype="uint16") /* ty=Tensor[(5, 13, 5), uint16] */;
    %987 = shape_of(%var_11466, dtype="int32") /* ty=Tensor[(3), int32] */;
    %988 = cast(%var_11466, dtype="uint16") /* ty=Tensor[(5, 13, 5), uint16] */;
    %989 = dyn.reshape(%986, %987, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    bitwise_and(%988, %989) /* ty=Tensor[(5, 13, 5), uint16] */
  };
  %990(%var_11476, %var_11477) /* ty=Tensor[(5, 13, 5), uint16] */
}

def @func_8766(%var_8752: Tensor[(60, 14), float64]) -> (Tensor[(112), int32], Tensor[(7, 6, 12), float32], Tensor[(15, 7, 8), float64], Tensor[(60, 14), float64]) {
  %991 = @func_8052() /* ty=(Tensor[(112), int32], int32) */;
  %992 = @func_3708() /* ty=(Tensor[(7, 6, 12), float32], int32, Tensor[(2, 8, 7), float32], Tensor[(112), float32], int32) */;
  %993 = cast(%var_8752, dtype="float64") /* ty=Tensor[(60, 14), float64] */;
  %994 = reshape(%993, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), float64] */;
  %995 = @func_1365(%994) /* ty=(Tensor[(15, 7, 8), float64],) */;
  %996 = %991.0;
  %997 = %992.0;
  %998 = %995.0;
  (%996, %997, %998, %var_8752)
}

def @func_7305(%var_7304: Tensor[(288), uint64]) -> (Tensor[(16, 3, 6), float32], Tensor[(112), float32], Tensor[(288), uint64], Tensor[(288), uint64], Tensor[(144, 2), uint64], Tensor[(770), uint64], Tensor[(1650), uint32], Tensor[(7, 6, 12), int16]) {
  %1027 = fn (%var_7228: Tensor[(288), uint64]) -> (Tensor[(16, 3, 6), float32], Tensor[(112), float32], Tensor[(288), uint64], Tensor[(288), uint64], Tensor[(144, 2), uint64], Tensor[(770), uint64], Tensor[(1650), uint32], Tensor[(7, 6, 12), int16]) {
    %999 = cast(meta[relay.Constant][45] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
    %1000 = cast(meta[relay.Constant][46] /* ty=Tensor[(1650), uint8] */, dtype="uint8") /* ty=Tensor[(1650), uint8] */;
    %1001 = cast(%var_7228, dtype="uint64") /* ty=Tensor[(288), uint64] */;
    %1002 = reshape(%999, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %1003 = reshape(%1000, newshape=[1, 1650]) /* ty=Tensor[(1, 1650), uint8] */;
    %1004 = reshape(%1001, newshape=[288]) /* ty=Tensor[(288), uint64] */;
    %1005 = @func_7057(%1002, %1003, %1004) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float64], Tensor[(112), float32], Tensor[(7, 6, 12), float32], Tensor[(16, 3, 6), float32], Tensor[(1, 1650), uint8], Tensor[(48, 1), uint64], Tensor[(288), uint64]) */;
    %1006 = @func_6167() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(144, 2), uint64], Tensor[(288), uint64]) */;
    %1007 = cast(meta[relay.Constant][47] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
    %1008 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %1009 = reshape(%1007, newshape=[770, 1]) /* ty=Tensor[(770, 1), uint64] */;
    %1010 = reshape(%1008, newshape=[]) /* ty=int32 */;
    %1011 = @func_1921(%1009, %1010) /* ty=(Tensor[(770, 1), uint64], int32, Tensor[(112), int32], Tensor[(2, 8, 7), float32], Tensor[(2, 8, 7), float32], Tensor[(16, 3, 6), uint64], Tensor[(48), uint64], Tensor[(288), uint64], Tensor[(4, 4, 7), int32], Tensor[(144, 2), uint64], Tensor[(1650), uint8], Tensor[(8, 6, 4), bool], Tensor[(8, 6, 4), bool], Tensor[(15, 7, 8), float64], Tensor[(840), float64], Tensor[(4, 8, 5), bool], Tensor[(4, 8, 5), float64]) */;
    %1012 = cast(meta[relay.Constant][46] /* ty=Tensor[(1650), uint8] */, dtype="uint32") /* ty=Tensor[(1650), uint32] */;
    %1013 = cast(7 /* ty=int32 */, dtype="uint32") /* ty=uint32 */;
    %1014 = @func_6323() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %1015 = %1014.0;
    %1016 = @func_6756() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %1017 = %1016.0;
    %1018 = cast(%1017, dtype="int16") /* ty=Tensor[(7, 6, 12), int16] */;
    %1019 = shape_of(%1015, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1020 = cast(%1015, dtype="int16") /* ty=Tensor[(7, 6, 12), int16] */;
    %1021 = dyn.reshape(%1018, %1019, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %1022 = %1005.5;
    %1023 = %1006.2;
    %1024 = %1011.9;
    %1025 = maximum(%1012, %1013) /* ty=Tensor[(1650), uint32] */;
    %1026 = minimum(%1020, %1021) /* ty=Tensor[(7, 6, 12), int16] */;
    (%1022, meta[relay.Constant][45] /* ty=Tensor[(112), float32] */, %var_7228, %1023, %1024, meta[relay.Constant][47] /* ty=Tensor[(770), uint64] */, %1025, %1026)
  };
  %1027(%var_7304) /* ty=(Tensor[(16, 3, 6), float32], Tensor[(112), float32], Tensor[(288), uint64], Tensor[(288), uint64], Tensor[(144, 2), uint64], Tensor[(770), uint64], Tensor[(1650), uint32], Tensor[(7, 6, 12), int16]) */
}

def @func_7719(%var_7717: Tensor[(112), int32]) -> (int32, Tensor[(4, 4, 7), int32], Tensor[(770), uint64], Tensor[(112), int32], Tensor[(7, 6, 12), float64], Tensor[(504), float64], Tensor[(7, 6, 12), float32], Tensor[(1, 112), int32], Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), bool]) {
  @func_7716(%var_7717) /* ty=(int32, Tensor[(4, 4, 7), int32], Tensor[(770), uint64], Tensor[(112), int32], Tensor[(7, 6, 12), float64], Tensor[(504), float64], Tensor[(7, 6, 12), float32], Tensor[(1, 112), int32], Tensor[(7, 6, 12), int16], Tensor[(7, 6, 12), bool]) */
}

def @func_4492() -> (Tensor[(3, 4, 16), uint8],) {
  @func_4490() /* ty=(Tensor[(3, 4, 16), uint8],) */
}

def @func_6061() -> (Tensor[(192), float64],) {
  %1029 = fn () -> (Tensor[(192), float64],) {
    %1028 = @func_4451() /* ty=Tensor[(192), float64] */;
    (%1028,)
  };
  %1029() /* ty=(Tensor[(192), float64],) */
}

def @func_4601(%var_4598: int32, %var_4599: Tensor[(1, 112), int32]) -> (Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], int32, Tensor[(1, 112), int32]) {
  %1030 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %1031 = %1030.0;
  %1032 = cast(%1031, dtype="float32") /* ty=Tensor[(7, 6, 12), float32] */;
  %1033 = cast(%var_4598, dtype="int32") /* ty=int32 */;
  %1034 = cast(%var_4599, dtype="int32") /* ty=Tensor[(1, 112), int32] */;
  %1035 = reshape(%1033, newshape=[]) /* ty=int32 */;
  %1036 = reshape(%1034, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), int32] */;
  %1037 = @func_54(%1035, %1036) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(4, 4, 7), bool]) */;
  %1038 = exp(%1032) /* ty=Tensor[(7, 6, 12), float32] */;
  %1039 = %1037.1;
  (%1038, %1039, %var_4598, %var_4599)
}

def @func_9643(%var_9642: Tensor[(9, 3, 8), int32]) -> (bool, Tensor[(9, 3, 8), uint8]) {
  %1048 = fn (%var_9633: Tensor[(9, 3, 8), int32]) -> (bool, Tensor[(9, 3, 8), uint8]) {
    %1040 = @func_3508() /* ty=int32 */;
    %1041 = cast(%1040, dtype="bool") /* ty=bool */;
    %1042 = reshape(%1041, newshape=[]) /* ty=bool */;
    %1043 = @func_8986(%1042) /* ty=(Tensor[(192), float64], Tensor[(8, 6, 4), bool], bool, Tensor[(7, 6, 12), float32], int32) */;
    %1044 = cast(%1040, dtype="uint8") /* ty=uint8 */;
    %1045 = cast(%var_9633, dtype="uint8") /* ty=Tensor[(9, 3, 8), uint8] */;
    %1046 = %1043.2;
    %1047 = bitwise_xor(%1044, %1045) /* ty=Tensor[(9, 3, 8), uint8] */;
    (%1046, %1047)
  };
  %1048(%var_9642) /* ty=(bool, Tensor[(9, 3, 8), uint8]) */
}

def @func_8461() -> (int32, Tensor[(112), int32]) {
  %1049 = @func_8052() /* ty=(Tensor[(112), int32], int32) */;
  %1050 = @func_7909() /* ty=int32 */;
  %1051 = %1049.0;
  (%1050, %1051)
}

def @func_9382() -> (Tensor[(2, 8, 7), float32],) {
  %1052 = @func_3708() /* ty=(Tensor[(7, 6, 12), float32], int32, Tensor[(2, 8, 7), float32], Tensor[(112), float32], int32) */;
  %1053 = %1052.2;
  (%1053,)
}

def @func_10198() -> (Tensor[(15, 15, 14), float32], Tensor[(10, 4, 14), bool], Tensor[(560), float32], Tensor[(2240), uint8], Tensor[(7, 6, 12), float32], Tensor[(24), bool]) {
  @func_10196() /* ty=(Tensor[(15, 15, 14), float32], Tensor[(10, 4, 14), bool], Tensor[(560), float32], Tensor[(2240), uint8], Tensor[(7, 6, 12), float32], Tensor[(24), bool]) */
}

def @func_4068() -> (Tensor[(3, 4, 16), float64], Tensor[(192), float64], Tensor[(7, 6, 12), int16]) {
  %1064 = fn () -> (Tensor[(3, 4, 16), float64], Tensor[(192), float64], Tensor[(7, 6, 12), int16]) {
    %1054 = cast(meta[relay.Constant][48] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %1055 = reshape(%1054, newshape=[3, 4, 16]) /* ty=Tensor[(3, 4, 16), float64] */;
    %1056 = @func_3009() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %1057 = %1056.0;
    %1058 = cast(meta[relay.Constant][49] /* ty=Tensor[(7, 6, 12), float32] */, dtype="int16") /* ty=Tensor[(7, 6, 12), int16] */;
    %1059 = shape_of(%1057, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1060 = cast(%1057, dtype="int16") /* ty=Tensor[(7, 6, 12), int16] */;
    %1061 = dyn.reshape(%1058, %1059, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %1062 = @func_1128(%1055) /* ty=Tensor[(3, 4, 16), float64] */;
    %1063 = left_shift(%1060, %1061) /* ty=Tensor[(7, 6, 12), int16] */;
    (%1062, meta[relay.Constant][48] /* ty=Tensor[(192), float64] */, %1063)
  };
  %1064() /* ty=(Tensor[(3, 4, 16), float64], Tensor[(192), float64], Tensor[(7, 6, 12), int16]) */
}

def @func_11407(%var_11403: Tensor[(1, 2240), uint8]) -> (int32, Tensor[(192), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(1, 2240), uint8]) {
  %1065 = @func_4796() /* ty=(int32, Tensor[(3, 4, 16), bool], Tensor[(192), uint8]) */;
  %1066 = @func_4313() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %1067 = @func_4514() /* ty=(Tensor[(3, 4, 16), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32]) */;
  %1068 = @func_4514() /* ty=(Tensor[(3, 4, 16), uint8], Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32]) */;
  %1069 = cast(%var_11403, dtype="uint8") /* ty=Tensor[(1, 2240), uint8] */;
  %1070 = reshape(%1069, newshape=[2240]) /* ty=Tensor[(2240), uint8] */;
  %1071 = @func_5821(%1070) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(24, 8), float64], Tensor[(7, 6, 12), float32]) */;
  %1072 = @func_4926() /* ty=int32 */;
  %1073 = %1065.2;
  %1074 = %1066.0;
  %1075 = %1067.2;
  %1076 = %1068.1;
  %1077 = %1071.3;
  (%1072, %1073, %1074, %1075, %1076, %1077, %var_11403)
}

def @func_5823(%var_5822: Tensor[(2240), uint8]) -> (Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(24, 8), float64], Tensor[(7, 6, 12), float32]) {
  %1091 = fn (%var_5779: Tensor[(2240), uint8]) -> (Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(24, 8), float64], Tensor[(7, 6, 12), float32]) {
    %1078 = cast(%var_5779, dtype="uint8") /* ty=Tensor[(2240), uint8] */;
    %1079 = cast(meta[relay.Constant][50] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %1080 = reshape(%1078, newshape=[14, 10, 16]) /* ty=Tensor[(14, 10, 16), uint8] */;
    %1081 = reshape(%1079, newshape=[24, 8]) /* ty=Tensor[(24, 8), float64] */;
    %1082 = @func_2284(%1080, %1081) /* ty=(Tensor[(14, 10, 16), float32], Tensor[(3, 4, 16), float64], Tensor[(24, 8), float64]) */;
    %1083 = %1082.2;
    %1084 = cast(meta[relay.Constant][50] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %1085 = shape_of(%1083, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1086 = cast(%1083, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
    %1087 = dyn.reshape(%1084, %1085, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %1088 = @func_5747() /* ty=Tensor[(7, 6, 12), float32] */;
    %1089 = subtract(%1086, %1087) /* ty=Tensor[(24, 8), float64] */;
    %1090 = @func_5747() /* ty=Tensor[(7, 6, 12), float32] */;
    (%1088, %var_5779, %1089, %1090)
  };
  %1091(%var_5822) /* ty=(Tensor[(7, 6, 12), float32], Tensor[(2240), uint8], Tensor[(24, 8), float64], Tensor[(7, 6, 12), float32]) */
}

def @func_5537(%var_5476: Tensor[(112), float32]) -> (Tensor[(112), float32], Tensor[(2, 8, 7), int8], Tensor[(2, 8, 7), float64], int32) {
  %1092 = @func_2683() /* ty=(Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), int32], int32) */;
  %1093 = %1092.2;
  %1094 = cast(%1093, dtype="float32") /* ty=float32 */;
  %1095 = cast(%var_5476, dtype="float32") /* ty=Tensor[(112), float32] */;
  %1096 = reshape(%1094, newshape=[]) /* ty=float32 */;
  %1097 = reshape(%1095, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float32] */;
  %1098 = @func_1589(%1096, %1097) /* ty=Tensor[(2, 8, 7), float32] */;
  %1099 = cast(%1098, dtype="float64") /* ty=Tensor[(2, 8, 7), float64] */;
  %1100 = sinh(%1099) /* ty=Tensor[(2, 8, 7), float64] */;
  %1101 = cast(%1100, dtype="int8") /* ty=Tensor[(2, 8, 7), int8] */;
  %1102 = cast(%1093, dtype="int8") /* ty=int8 */;
  %1103 = cast(%1100, dtype="float64") /* ty=Tensor[(2, 8, 7), float64] */;
  %1104 = bitwise_or(%1101, %1102) /* ty=Tensor[(2, 8, 7), int8] */;
  %1105 = acosh(%1103) /* ty=Tensor[(2, 8, 7), float64] */;
  %1106 = @func_3629() /* ty=int32 */;
  (%var_5476, %1104, %1105, %1106)
}

def @func_7057(%var_7022: Tensor[(112), float32], %var_7048: Tensor[(1, 1650), uint8], %var_7050: Tensor[(288), uint64]) -> (Tensor[(7, 6, 12), float32], Tensor[(7, 6, 12), float32], Tensor[(2, 8, 7), float64], Tensor[(112), float32], Tensor[(7, 6, 12), float32], Tensor[(16, 3, 6), float32], Tensor[(1, 1650), uint8], Tensor[(48, 1), uint64], Tensor[(288), uint64]) {
  %1107 = @func_2424() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %1108 = @func_4231() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %1109 = cast(%var_7022, dtype="float32") /* ty=Tensor[(112), float32] */;
  %1110 = reshape(%1109, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %1111 = @func_5537(%1110) /* ty=(Tensor[(112), float32], Tensor[(2, 8, 7), int8], Tensor[(2, 8, 7), float64], int32) */;
  %1112 = @func_3999() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %1113 = cast(%var_7048, dtype="uint8") /* ty=Tensor[(1, 1650), uint8] */;
  %1114 = cast(%var_7048, dtype="uint8") /* ty=Tensor[(1, 1650), uint8] */;
  %1115 = cast(meta[relay.Constant][51] /* ty=Tensor[(48, 1), uint64] */, dtype="uint64") /* ty=Tensor[(48, 1), uint64] */;
  %1116 = cast(%var_7050, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %1117 = reshape(%1113, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), uint8] */;
  %1118 = reshape(%1114, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), uint8] */;
  %1119 = reshape(%1115, newshape=[48]) /* ty=Tensor[(48), uint64] */;
  %1120 = reshape(%1116, newshape=[144, 2]) /* ty=Tensor[(144, 2), uint64] */;
  %1121 = @func_962(%1117, %1118, %1119, %1120) /* ty=(Tensor[(15, 10, 11), uint8], Tensor[(48), uint64], Tensor[(144, 2), uint64], Tensor[(16, 3, 6), float32]) */;
  %1122 = %1107.0;
  %1123 = %1108.0;
  %1124 = %1111.2;
  %1125 = %1112.0;
  %1126 = %1121.3;
  (%1122, %1123, %1124, %var_7022, %1125, %1126, %var_7048, meta[relay.Constant][51] /* ty=Tensor[(48, 1), uint64] */, %var_7050)
}

def @func_1128(%var_1108: Tensor[(3, 4, 16), float64]) -> Tensor[(3, 4, 16), float64] {
  %1127 = cast(%var_1108, dtype="float64") /* ty=Tensor[(3, 4, 16), float64] */;
  %1128 = cosh(%1127) /* ty=Tensor[(3, 4, 16), float64] */;
  %1129 = cast(%var_1108, dtype="bool") /* ty=Tensor[(3, 4, 16), bool] */;
  %1130 = shape_of(%1128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1131 = cast(%1128, dtype="bool") /* ty=Tensor[(3, 4, 16), bool] */;
  %1132 = dyn.reshape(%1129, %1130, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1133 = equal(%1131, %1132) /* ty=Tensor[(3, 4, 16), bool] */;
  %1134 = cast(%1133, dtype="float32") /* ty=Tensor[(3, 4, 16), float32] */;
  %1135 = sin(%1134) /* ty=Tensor[(3, 4, 16), float32] */;
  %1136 = cast(%1135, dtype="float64") /* ty=Tensor[(3, 4, 16), float64] */;
  log10(%1136) /* ty=Tensor[(3, 4, 16), float64] */
}

def @func_3010() -> (Tensor[(7, 6, 12), float32],) {
  %1141 = fn () -> (Tensor[(7, 6, 12), float32],) {
    %1137 = @func_2731() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %1138 = %1137.0;
    %1139 = cast(%1138, dtype="float32") /* ty=Tensor[(7, 6, 12), float32] */;
    %1140 = sigmoid(%1139) /* ty=Tensor[(7, 6, 12), float32] */;
    (%1140,)
  };
  %1141() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_5894() -> (Tensor[(7, 6, 12), float32],) {
  %1142 = @func_3009() /* ty=(Tensor[(7, 6, 12), float32],) */;
  %1143 = %1142.0;
  (%1143,)
}

def @func_10465() -> (int32, Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], Tensor[(112), int32]) {
  %1154 = fn () -> (int32, Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], Tensor[(112), int32]) {
    %1144 = @func_9180() /* ty=(Tensor[(3, 4, 16), uint8], int32) */;
    %1145 = @func_5894() /* ty=(Tensor[(7, 6, 12), float32],) */;
    %1146 = %1144.1;
    %1147 = cast(%1146, dtype="int32") /* ty=int32 */;
    %1148 = cast(meta[relay.Constant][52] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
    %1149 = reshape(%1147, newshape=[]) /* ty=int32 */;
    %1150 = reshape(%1148, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), int32] */;
    %1151 = @func_54(%1149, %1150) /* ty=(Tensor[(4, 4, 7), int32], Tensor[(4, 4, 7), bool]) */;
    %1152 = %1145.0;
    %1153 = %1151.1;
    (%1146, %1152, %1153, meta[relay.Constant][52] /* ty=Tensor[(112), int32] */)
  };
  %1154() /* ty=(int32, Tensor[(7, 6, 12), float32], Tensor[(4, 4, 7), bool], Tensor[(112), int32]) */
}

def @func_6823() -> (int32,) {
  @func_6821() /* ty=(int32,) */
}

def @func_9317() -> (Tensor[(7, 6, 12), float32],) {
  %1156 = fn () -> (Tensor[(7, 6, 12), float32],) {
    %1155 = @func_5747() /* ty=Tensor[(7, 6, 12), float32] */;
    (%1155,)
  };
  %1156() /* ty=(Tensor[(7, 6, 12), float32],) */
}

def @func_5690(%var_5657: Tensor[(13, 1, 7), float64]) -> (Tensor[(13, 1, 7), float64], Tensor[(3, 4, 16), float64], Tensor[(192), float64]) {
  %1157 = cast(%var_5657, dtype="float64") /* ty=Tensor[(13, 1, 7), float64] */;
  %1158 = cast(meta[relay.Constant][53] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %1159 = reshape(%1158, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %1160 = @func_2490(%1159) /* ty=(Tensor[(7, 6, 12), float64], Tensor[(192), float64], Tensor[(3, 4, 16), float64], Tensor[(7, 6, 12), float32]) */;
  %1161 = erf(%1157) /* ty=Tensor[(13, 1, 7), float64] */;
  %1162 = %1160.2;
  (%1161, %1162, meta[relay.Constant][53] /* ty=Tensor[(192), float64] */)
}

def @func_3924() -> (int32, Tensor[(7, 6, 12), float32]) {
  @func_3922() /* ty=(int32, Tensor[(7, 6, 12), float32]) */
}

def @func_3510() -> int32 {
  @func_3508() /* ty=int32 */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen549/build/output.py:3263: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen549/build/output.py:3268: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen549/build/output.py:3282: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen549/build/output.py:3287: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen549/build/output.py:3292: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen549/build/output.py:3297: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='cuda')

===================================
#[version = "0.0.5"]
def @main() -> (Tensor[(1, 1, 15), bool], Tensor[(1, 1, 15), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=uint8 */, dtype="bool") /* GeneratedSource */ /* ty=bool */;
  %1 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 1, 15), uint8] */, dtype="bool") /* GeneratedSource */ /* ty=Tensor[(1, 1, 15), bool] */;
  %2 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 1, 15), uint8] */, dtype="float32") /* GeneratedSource */ /* ty=Tensor[(1, 1, 15), float32] */;
  %3 = not_equal(%0, %1) /* GeneratedSource */ /* ty=Tensor[(1, 1, 15), bool] */;
  %4 = log10(%2) /* GeneratedSource */ /* ty=Tensor[(1, 1, 15), float32] */;
  (%3, %4)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
