==========mod==========
#[version = "0.0.5"]
def @func_8322(%var_8224: Tensor[(630), float64]) -> (Tensor[(14, 11, 10), uint16], Tensor[(630), float64], Tensor[(15, 12, 2), int64], Tensor[(360), float64], Tensor[(5, 9, 14), float32], Tensor[(3, 8, 15), float64], Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), uint16], Tensor[(5, 9, 14), float64]) {
  %0 = @func_6078() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), uint16]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %2 = reshape(%1, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float64] */;
  %3 = @func_5946(%2) /* ty=(Tensor[(3, 8, 15), bool], Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), float64], Tensor[(15, 12, 2), int64], Tensor[(1350), int64]) */;
  %4 = cast(%var_8224, dtype="float64") /* ty=Tensor[(630), float64] */;
  %5 = reshape(%4, newshape=[5, 9, 14]) /* ty=Tensor[(5, 9, 14), float64] */;
  %6 = @func_5470(%5) /* ty=Tensor[(5, 9, 14), float64] */;
  %7 = cast(%6, dtype="float32") /* ty=Tensor[(5, 9, 14), float32] */;
  %8 = sinh(%7) /* ty=Tensor[(5, 9, 14), float32] */;
  %9 = cast(%8, dtype="float32") /* ty=Tensor[(5, 9, 14), float32] */;
  %10 = @func_5579() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %11 = @func_4695() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %12 = @func_8051() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %13 = cast(%8, dtype="float64") /* ty=Tensor[(5, 9, 14), float64] */;
  %14 = %0.0;
  %15 = %3.3;
  %16 = cos(%9) /* ty=Tensor[(5, 9, 14), float32] */;
  %17 = %10.0;
  %18 = %11.0;
  %19 = %12.0;
  %20 = log2(%13) /* ty=Tensor[(5, 9, 14), float64] */;
  (%14, %var_8224, %15, meta[relay.Constant][0] /* ty=Tensor[(360), float64] */, %16, %17, %18, %19, %20)
}

def @func_2386(%var_2376: Tensor[(4, 15, 2), float64]) -> (Tensor[(4, 15, 2), float64],) {
  %21 = cast(%var_2376, dtype="float64") /* ty=Tensor[(4, 15, 2), float64] */;
  %22 = rsqrt(%21) /* ty=Tensor[(4, 15, 2), float64] */;
  (%22,)
}

def @func_6078() -> (Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), uint16]) {
  %23 = @func_5042() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %24 = @func_6006() /* ty=Tensor[(14, 11, 10), uint16] */;
  %25 = %23.0;
  (%24, %25)
}

def @func_8625(%var_8602: float32) -> (Tensor[(3, 8, 15), float64], Tensor[(9, 11, 15), bool], float32) {
  %26 = @func_4633() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) */;
  %27 = cast(%var_8602, dtype="float32") /* ty=float32 */;
  %28 = reshape(%27, newshape=[]) /* ty=float32 */;
  %29 = %26.0;
  %30 = @func_4000(%28) /* ty=Tensor[(9, 11, 15), bool] */;
  (%29, %30, %var_8602)
}

def @main(%var_9693: Tensor[(1008), float64]) -> Tensor[(1008), uint8] {
  %31 = @func_6672() /* ty=(Tensor[(1008), float64], Tensor[(54), float32], Tensor[(150), uint32]) */;
  %32 = %31.0;
  %33 = cast(%var_9693, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(1), int32] */;
  %35 = cast(%32, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?), uint8] */;
  bitwise_and(%35, %36) /* ty=Tensor[(1008), uint8] */
}

def @func_7415(%var_7383: Tensor[(1, 6, 5), int8], %var_7384: Tensor[(12, 6, 5), int8], %var_7396: Tensor[(45, 2), float64], %var_7407: Tensor[(36), float32]) -> (Tensor[(12, 6, 5), int8], Tensor[(3, 8, 15), bool], Tensor[(15, 8, 5), bool], Tensor[(45, 2), float64], Tensor[(600, 1), int32], Tensor[(12, 6, 5), float64], Tensor[(9, 4), float32], Tensor[(36), float32], Tensor[(3, 8, 15), float64]) {
  %37 = cast(%var_7383, dtype="int8") /* ty=Tensor[(1, 6, 5), int8] */;
  %38 = cast(%var_7384, dtype="int8") /* ty=Tensor[(12, 6, 5), int8] */;
  %39 = cast(%var_7384, dtype="float64") /* ty=Tensor[(12, 6, 5), float64] */;
  %40 = reshape(%39, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float64] */;
  %41 = @func_5946(%40) /* ty=(Tensor[(3, 8, 15), bool], Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), float64], Tensor[(15, 12, 2), int64], Tensor[(1350), int64]) */;
  %42 = cast(%var_7396, dtype="float64") /* ty=Tensor[(45, 2), float64] */;
  %43 = cast(meta[relay.Constant][1] /* ty=Tensor[(600, 1), int32] */, dtype="int32") /* ty=Tensor[(600, 1), int32] */;
  %44 = reshape(%42, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), float64] */;
  %45 = reshape(%43, newshape=[600]) /* ty=Tensor[(600), int32] */;
  %46 = @func_3160(%44, %45) /* ty=(Tensor[(15, 8, 5), bool], Tensor[(600), int32], Tensor[(15, 2, 3), float64]) */;
  %47 = cast(%var_7384, dtype="float64") /* ty=Tensor[(12, 6, 5), float64] */;
  %48 = cast(%var_7407, dtype="float32") /* ty=Tensor[(36), float32] */;
  %49 = reshape(%48, newshape=[9, 4]) /* ty=Tensor[(9, 4), float32] */;
  %50 = @func_7053(%49) /* ty=(Tensor[(3, 8, 15), float64], Tensor[(12, 3, 13), float32], Tensor[(9, 4), float32], Tensor[(234, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(1, 22), float32], Tensor[(364), float64]) */;
  %51 = bitwise_and(%37, %38) /* ty=Tensor[(12, 6, 5), int8] */;
  %52 = %41.0;
  %53 = %46.0;
  %54 = log(%47) /* ty=Tensor[(12, 6, 5), float64] */;
  %55 = %50.2;
  %56 = @func_5682() /* ty=Tensor[(3, 8, 15), float64] */;
  (%51, %52, %53, %var_7396, meta[relay.Constant][1] /* ty=Tensor[(600, 1), int32] */, %54, %55, %var_7407, %56)
}

def @func_7094() -> (Tensor[(3, 2, 15), bool], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) {
  %57 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 2, 15), bool] */, dtype="bool") /* ty=Tensor[(3, 2, 15), bool] */;
  %58 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(3, 2, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 2, 15), bool] */, dtype="bool") /* ty=Tensor[(3, 2, 15), bool] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %61 = @func_6604() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %62 = cast(meta[relay.Constant][4] /* ty=Tensor[(22), float32] */, dtype="float32") /* ty=Tensor[(22), float32] */;
  %63 = reshape(%62, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
  %64 = @func_20(%63) /* ty=(Tensor[(2, 1, 11), float32],) */;
  %65 = logical_and(%59, %60) /* ty=Tensor[(3, 2, 15), bool] */;
  %66 = %61.0;
  %67 = %64.0;
  (%65, %66, %67, meta[relay.Constant][4] /* ty=Tensor[(22), float32] */)
}

def @func_7188() -> Tensor[(150), uint32] {
  %68 = @func_6672() /* ty=(Tensor[(1008), float64], Tensor[(54), float32], Tensor[(150), uint32]) */;
  %68.2
}

def @func_8035() -> (Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), float64]) {
  %69 = @func_7888() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %70 = @func_5801() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %71 = %70.0;
  %72 = cast(%71, dtype="float64") /* ty=Tensor[(14, 11, 10), float64] */;
  %73 = %69.0;
  %74 = log(%72) /* ty=Tensor[(14, 11, 10), float64] */;
  (%73, %74)
}

def @func_6096() -> Tensor[(36, 10), float32] {
  %75 = @func_4526() /* ty=(Tensor[(14, 11, 10), float64], Tensor[(3, 8, 15), float32], Tensor[(36, 10), float32]) */;
  %75.2
}

def @func_9300() -> Tensor[(12, 30), float32] {
  %76 = @func_5642() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) */;
  %76.2
}

def @func_9121() -> Tensor[(14, 11, 10), float64] {
  %77 = @func_8035() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), float64]) */;
  %77.1
}

def @func_6899(%var_6760: Tensor[(250), bool], %var_6824: Tensor[(12, 30), float32], %var_6876: Tensor[(24, 14), uint8], %var_6894: Tensor[(12, 30), uint64]) -> (Tensor[(5, 10, 5), bool], Tensor[(250), bool], Tensor[(12, 30), float32], Tensor[(12, 30), uint32], Tensor[(12, 30), bool], Tensor[(3, 16, 7), uint8], Tensor[(24, 14), uint8], Tensor[(12, 30), int16]) {
  %78 = cast(%var_6760, dtype="bool") /* ty=Tensor[(250), bool] */;
  %79 = reshape(%78, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), bool] */;
  %80 = @func_3905(%79) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(12, 3, 13), float32], Tensor[(36), float32], Tensor[(234, 2), float32]) */;
  %81 = @func_5642() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) */;
  %82 = %81.2;
  %83 = cast(%82, dtype="float64") /* ty=Tensor[(12, 30), float64] */;
  %84 = asin(%83) /* ty=Tensor[(12, 30), float64] */;
  %85 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 30), float64] */, dtype="bool") /* ty=Tensor[(12, 30), bool] */;
  %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(2), int32] */;
  %87 = cast(%84, dtype="bool") /* ty=Tensor[(12, 30), bool] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %89 = greater(%87, %88) /* ty=Tensor[(12, 30), bool] */;
  %90 = cast(%89, dtype="float32") /* ty=Tensor[(12, 30), float32] */;
  %91 = cast(%var_6824, dtype="uint32") /* ty=Tensor[(12, 30), uint32] */;
  %92 = shape_of(%82, dtype="int32") /* ty=Tensor[(2), int32] */;
  %93 = cast(%82, dtype="uint32") /* ty=Tensor[(12, 30), uint32] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %95 = cast(%84, dtype="float32") /* ty=Tensor[(12, 30), float32] */;
  %96 = sin(%95) /* ty=Tensor[(12, 30), float32] */;
  %97 = cast(%var_6824, dtype="bool") /* ty=Tensor[(12, 30), bool] */;
  %98 = shape_of(%96, dtype="int32") /* ty=Tensor[(2), int32] */;
  %99 = cast(%96, dtype="bool") /* ty=Tensor[(12, 30), bool] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %101 = cast(%var_6876, dtype="uint8") /* ty=Tensor[(24, 14), uint8] */;
  %102 = cast(%var_6876, dtype="uint8") /* ty=Tensor[(24, 14), uint8] */;
  %103 = reshape(%101, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint8] */;
  %104 = reshape(%102, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint8] */;
  %105 = cast(%96, dtype="int8") /* ty=Tensor[(12, 30), int8] */;
  %106 = shape_of(%84, dtype="int32") /* ty=Tensor[(2), int32] */;
  %107 = cast(%84, dtype="int8") /* ty=Tensor[(12, 30), int8] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %109 = right_shift(%107, %108) /* ty=Tensor[(12, 30), int8] */;
  %110 = cast(%82, dtype="uint64") /* ty=Tensor[(12, 30), uint64] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(2), int32] */;
  %112 = cast(%109, dtype="uint64") /* ty=Tensor[(12, 30), uint64] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %114 = logical_xor(%112, %113) /* ty=Tensor[(12, 30), uint64] */;
  %115 = cast(%var_6894, dtype="int16") /* ty=Tensor[(12, 30), int16] */;
  %116 = shape_of(%114, dtype="int32") /* ty=Tensor[(2), int32] */;
  %117 = cast(%114, dtype="int16") /* ty=Tensor[(12, 30), int16] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %119 = %80.0;
  %120 = atan(%90) /* ty=Tensor[(12, 30), float32] */;
  %121 = multiply(%93, %94) /* ty=Tensor[(12, 30), uint32] */;
  %122 = not_equal(%99, %100) /* ty=Tensor[(12, 30), bool] */;
  %123 = @func_1715(%103, %104) /* ty=Tensor[(3, 16, 7), uint8] */;
  %124 = minimum(%117, %118) /* ty=Tensor[(12, 30), int16] */;
  (%119, %var_6760, %120, %121, %122, %123, %var_6876, %124)
}

def @func_2782(%var_2763: Tensor[(9, 16, 7), float64], %var_2768: Tensor[(24, 14), uint8]) -> (Tensor[(9, 16, 7), float64], Tensor[(3, 16, 7), uint8], Tensor[(24, 14), uint8], Tensor[(2, 1, 11), float32], Tensor[(672), int16]) {
  %125 = cast(%var_2763, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
  %126 = cast(%var_2768, dtype="uint8") /* ty=Tensor[(24, 14), uint8] */;
  %127 = cast(%var_2768, dtype="uint8") /* ty=Tensor[(24, 14), uint8] */;
  %128 = reshape(%126, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint8] */;
  %129 = reshape(%127, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint8] */;
  %130 = cast(meta[relay.Constant][6] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %131 = cast(meta[relay.Constant][6] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %132 = cast(meta[relay.Constant][6] /* ty=Tensor[(672), int16] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %133 = reshape(%130, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int16] */;
  %134 = reshape(%131, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int16] */;
  %135 = reshape(%132, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %136 = @func_477(%133, %134, %135) /* ty=(Tensor[(2, 1, 11), float32], Tensor[(11, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(2, 1, 11), float32], Tensor[(6, 8, 14), bool], Tensor[(2, 1, 11), float32]) */;
  %137 = log(%125) /* ty=Tensor[(9, 16, 7), float64] */;
  %138 = @func_1715(%128, %129) /* ty=Tensor[(3, 16, 7), uint8] */;
  %139 = %136.5;
  (%137, %138, %var_2768, %139, meta[relay.Constant][6] /* ty=Tensor[(672), int16] */)
}

def @func_4878() -> (Tensor[(14, 11, 10), uint16],) {
  %140 = @func_4335() /* ty=Tensor[(14, 11, 10), uint16] */;
  (%140,)
}

def @func_5801() -> (Tensor[(14, 11, 10), uint16],) {
  %141 = @func_4277() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %142 = %141.0;
  (%142,)
}

def @func_664(%var_619: Tensor[(1, 5, 16), float64]) -> (Tensor[(?, 5, 16), bool], Tensor[(?, 5, 16), int16], Tensor[(1, 5, 16), float32], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) {
  %143 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 5, 16), float64] */, dtype="bool") /* ty=Tensor[(1, 5, 16), bool] */;
  %144 = shape_of(%var_619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%var_619, dtype="bool") /* ty=Tensor[(1, 5, 16), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %147 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 5, 16), float64] */, dtype="int16") /* ty=Tensor[(1, 5, 16), int16] */;
  %148 = shape_of(%var_619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%var_619, dtype="int16") /* ty=Tensor[(1, 5, 16), int16] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %151 = cast(%var_619, dtype="float64") /* ty=Tensor[(1, 5, 16), float64] */;
  %152 = sigmoid(%151) /* ty=Tensor[(1, 5, 16), float64] */;
  %153 = cast(%152, dtype="float32") /* ty=Tensor[(1, 5, 16), float32] */;
  %154 = cast(meta[relay.Constant][8] /* ty=Tensor[(22), float32] */, dtype="float32") /* ty=Tensor[(22), float32] */;
  %155 = reshape(%154, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
  %156 = @func_20(%155) /* ty=(Tensor[(2, 1, 11), float32],) */;
  %157 = logical_and(%145, %146) /* ty=Tensor[(?, 5, 16), bool] */;
  %158 = add(%149, %150) /* ty=Tensor[(?, 5, 16), int16] */;
  %159 = cosh(%153) /* ty=Tensor[(1, 5, 16), float32] */;
  %160 = %156.0;
  (%157, %158, %159, %160, meta[relay.Constant][8] /* ty=Tensor[(22), float32] */)
}

def @func_9507(%var_9497: Tensor[(54), float32]) -> (Tensor[(3, 8, 15), float64], Tensor[(360), float32], Tensor[(54), float32], Tensor[(14, 11, 10), uint16]) {
  %161 = cast(%var_9497, dtype="float32") /* ty=Tensor[(54), float32] */;
  %162 = reshape(%161, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
  %163 = @func_1621(%162) /* ty=(Tensor[(6, 3, 3), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32]) */;
  %164 = @func_5642() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) */;
  %165 = @func_5682() /* ty=Tensor[(3, 8, 15), float64] */;
  %166 = %163.2;
  %167 = %164.0;
  (%165, %166, %var_9497, %167)
}

def @func_4779(%var_4733: Tensor[(15, 6, 15), int64], %var_4734: Tensor[(15, 6, 15), int64]) -> (Tensor[(13, 10, 1), float64], Tensor[(130), float64], Tensor[(6, 3, 3), float64], Tensor[(13, 10, 1), float64], Tensor[(14, 11, 10), uint16], Tensor[(15, 6, 15), bool], Tensor[(15, 12, 2), int64], Tensor[(360), int64], Tensor[(22), float32]) {
  %168 = cast(meta[relay.Constant][9] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %169 = reshape(%168, newshape=[13, 10, 1]) /* ty=Tensor[(13, 10, 1), float64] */;
  %170 = @func_2875(%169) /* ty=(Tensor[(13, 10, 1), float64],) */;
  %171 = @func_4453() /* ty=(Tensor[(54), float32], Tensor[(14, 11, 10), int16], Tensor[(6, 3, 3), float64], Tensor[(600), int32], Tensor[(45, 2), float64], Tensor[(600), int32]) */;
  %172 = %171.2;
  %173 = cast(%172, dtype="float64") /* ty=Tensor[(6, 3, 3), float64] */;
  %174 = cast(meta[relay.Constant][9] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %175 = reshape(%174, newshape=[13, 10, 1]) /* ty=Tensor[(13, 10, 1), float64] */;
  %176 = @func_2875(%175) /* ty=(Tensor[(13, 10, 1), float64],) */;
  %177 = cast(%var_4734, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  %178 = shape_of(%var_4733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%var_4733, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %181 = not_equal(%179, %180) /* ty=Tensor[(15, 6, 15), bool] */;
  %182 = cast(%181, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
  %183 = sinh(%182) /* ty=Tensor[(15, 6, 15), float64] */;
  %184 = cast(%181, dtype="int32") /* ty=Tensor[(15, 6, 15), int32] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%183, dtype="int32") /* ty=Tensor[(15, 6, 15), int32] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %188 = bitwise_or(%186, %187) /* ty=Tensor[(15, 6, 15), int32] */;
  %189 = cast(%188, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  %190 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%183, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %193 = cast(meta[relay.Constant][10] /* ty=Tensor[(360), int64] */, dtype="int64") /* ty=Tensor[(360), int64] */;
  %194 = cast(meta[relay.Constant][10] /* ty=Tensor[(360), int64] */, dtype="int64") /* ty=Tensor[(360), int64] */;
  %195 = cast(meta[relay.Constant][11] /* ty=Tensor[(22), float32] */, dtype="float32") /* ty=Tensor[(22), float32] */;
  %196 = reshape(%193, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %197 = reshape(%194, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %198 = reshape(%195, newshape=[11, 2]) /* ty=Tensor[(11, 2), float32] */;
  %199 = @func_2097(%196, %197, %198) /* ty=(Tensor[(15, 12, 2), int64], Tensor[(2, ?, 11), float64], Tensor[(3, 8, 15), float32], Tensor[(16, 15, 14), uint8], Tensor[(420, 8), uint8], Tensor[(364), float64], Tensor[(3, 8, 15), float32]) */;
  %200 = %170.0;
  %201 = exp(%173) /* ty=Tensor[(6, 3, 3), float64] */;
  %202 = %176.0;
  %203 = @func_4335() /* ty=Tensor[(14, 11, 10), uint16] */;
  %204 = logical_or(%191, %192) /* ty=Tensor[(15, 6, 15), bool] */;
  %205 = %199.0;
  (%200, meta[relay.Constant][9] /* ty=Tensor[(130), float64] */, %201, %202, %203, %204, %205, meta[relay.Constant][10] /* ty=Tensor[(360), int64] */, meta[relay.Constant][11] /* ty=Tensor[(22), float32] */)
}

def @func_7134() -> (Tensor[(14, 11, 10), float64],) {
  %206 = @func_4730() /* ty=Tensor[(14, 11, 10), float64] */;
  (%206,)
}

def @func_7888() -> (Tensor[(14, 11, 10), uint16],) {
  %207 = @func_5042() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %208 = %207.0;
  (%208,)
}

def @func_6352() -> (Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float64]) {
  %209 = @func_4878() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %210 = @func_5500() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %211 = @func_5612() /* ty=Tensor[(3, 8, 15), float64] */;
  %212 = %209.0;
  %213 = %210.0;
  (%211, %212, %213)
}

def @func_7656() -> (Tensor[(14, 11, 10), uint16],) {
  %214 = @func_7536() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), float32]) */;
  %215 = %214.0;
  (%215,)
}

def @func_8051() -> (Tensor[(14, 11, 10), uint16],) {
  %216 = @func_7676() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %217 = %216.0;
  (%217,)
}

def @func_2875(%var_2856: Tensor[(13, 10, 1), float64]) -> (Tensor[(13, 10, 1), float64],) {
  %218 = cast(%var_2856, dtype="float64") /* ty=Tensor[(13, 10, 1), float64] */;
  %219 = acos(%218) /* ty=Tensor[(13, 10, 1), float64] */;
  (%219,)
}

def @func_4633() -> (Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) {
  %220 = @func_4526() /* ty=(Tensor[(14, 11, 10), float64], Tensor[(3, 8, 15), float32], Tensor[(36, 10), float32]) */;
  %221 = %220.1;
  %222 = cast(%221, dtype="float64") /* ty=Tensor[(3, 8, 15), float64] */;
  %223 = cast(meta[relay.Constant][12] /* ty=Tensor[(1125), uint16] */, dtype="uint16") /* ty=Tensor[(1125), uint16] */;
  %224 = cast(meta[relay.Constant][12] /* ty=Tensor[(1125), uint16] */, dtype="uint16") /* ty=Tensor[(1125), uint16] */;
  %225 = cast(meta[relay.Constant][12] /* ty=Tensor[(1125), uint16] */, dtype="uint16") /* ty=Tensor[(1125), uint16] */;
  %226 = reshape(%223, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), uint16] */;
  %227 = reshape(%224, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), uint16] */;
  %228 = reshape(%225, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), uint16] */;
  %229 = @func_2258(%226, %227, %228) /* ty=(Tensor[(15, 5, 15), uint16], Tensor[(15, 5, 15), bool]) */;
  %230 = sigmoid(%222) /* ty=Tensor[(3, 8, 15), float64] */;
  %231 = %229.1;
  (%230, %231, meta[relay.Constant][12] /* ty=Tensor[(1125), uint16] */)
}

def @func_4488(%var_4472: Tensor[(16, 7, 16), float64], %var_4482: Tensor[(16, 7, 16), float64]) -> (Tensor[(16, 7, 16), int32],) {
  %232 = cast(%var_4472, dtype="float64") /* ty=Tensor[(16, 7, 16), float64] */;
  %233 = sin(%232) /* ty=Tensor[(16, 7, 16), float64] */;
  %234 = cast(%var_4482, dtype="int32") /* ty=Tensor[(16, 7, 16), int32] */;
  %235 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%233, dtype="int32") /* ty=Tensor[(16, 7, 16), int32] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %238 = bitwise_xor(%236, %237) /* ty=Tensor[(16, 7, 16), int32] */;
  (%238,)
}

def @func_7634(%var_7615: Tensor[(14, 11, 10), float64]) -> (Tensor[(14, 11, 10), uint64],) {
  %239 = @func_7134() /* ty=(Tensor[(14, 11, 10), float64],) */;
  %240 = %239.0;
  %241 = cast(%var_7615, dtype="uint64") /* ty=Tensor[(14, 11, 10), uint64] */;
  %242 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%240, dtype="uint64") /* ty=Tensor[(14, 11, 10), uint64] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %245 = bitwise_and(%243, %244) /* ty=Tensor[(14, 11, 10), uint64] */;
  (%245,)
}

def @func_1542(%var_1526: Tensor[(3, 8, 15), float32]) -> (Tensor[(3, 8, 15), float32],) {
  %246 = cast(%var_1526, dtype="float32") /* ty=Tensor[(3, 8, 15), float32] */;
  %247 = log10(%246) /* ty=Tensor[(3, 8, 15), float32] */;
  (%247,)
}

def @func_4695() -> (Tensor[(3, 8, 15), float64],) {
  %248 = @func_4633() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) */;
  %249 = %248.0;
  (%249,)
}

def @func_4526() -> (Tensor[(14, 11, 10), float64], Tensor[(3, 8, 15), float32], Tensor[(36, 10), float32]) {
  %250 = @func_4335() /* ty=Tensor[(14, 11, 10), uint16] */;
  %251 = cast(%250, dtype="float32") /* ty=Tensor[(14, 11, 10), float32] */;
  %252 = asinh(%251) /* ty=Tensor[(14, 11, 10), float32] */;
  %253 = cast(%252, dtype="float64") /* ty=Tensor[(14, 11, 10), float64] */;
  %254 = cast(meta[relay.Constant][13] /* ty=Tensor[(36, 10), float32] */, dtype="float32") /* ty=Tensor[(36, 10), float32] */;
  %255 = reshape(%254, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
  %256 = @func_1542(%255) /* ty=(Tensor[(3, 8, 15), float32],) */;
  %257 = cos(%253) /* ty=Tensor[(14, 11, 10), float64] */;
  %258 = %256.0;
  (%257, %258, meta[relay.Constant][13] /* ty=Tensor[(36, 10), float32] */)
}

def @func_8093(%var_8072: Tensor[(364), float32]) -> (Tensor[(150), uint32], Tensor[(22), float32], Tensor[(364), float32], Tensor[(14, 11, 10), uint16]) {
  %259 = cast(%var_8072, dtype="float32") /* ty=Tensor[(364), float32] */;
  %260 = reshape(%259, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), float32] */;
  %261 = @func_1577(%260) /* ty=(Tensor[(7, 4, 13), float32], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
  %262 = @func_5042() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %263 = @func_7188() /* ty=Tensor[(150), uint32] */;
  %264 = %261.2;
  %265 = %262.0;
  (%263, %264, %var_8072, %265)
}

def @func_8508(%var_8479: Tensor[(36), float32], %var_8481: Tensor[(280), float64]) -> (Tensor[(14, 11, 10), float32], Tensor[(36), float32], Tensor[(468), float32], Tensor[(80), float64], Tensor[(280), float64], Tensor[(14, 11, 10), uint16]) {
  %266 = @func_6541() /* ty=(Tensor[(14, 11, 10), float32],) */;
  %267 = cast(%var_8479, dtype="float32") /* ty=Tensor[(36), float32] */;
  %268 = cast(meta[relay.Constant][14] /* ty=Tensor[(468), float32] */, dtype="float32") /* ty=Tensor[(468), float32] */;
  %269 = cast(%var_8481, dtype="float64") /* ty=Tensor[(280), float64] */;
  %270 = cast(meta[relay.Constant][15] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %271 = reshape(%267, newshape=[9, 4]) /* ty=Tensor[(9, 4), float32] */;
  %272 = reshape(%268, newshape=[468]) /* ty=Tensor[(468), float32] */;
  %273 = reshape(%269, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), float64] */;
  %274 = reshape(%270, newshape=[4, 20]) /* ty=Tensor[(4, 20), float64] */;
  %275 = @func_4241(%271, %272, %273, %274) /* ty=(Tensor[(12, 3, 13), float32], Tensor[(9, 4), float32], Tensor[(468), float32], Tensor[(15, 3, 9), float32], Tensor[(3, 135), float32], Tensor[(3360), uint8], Tensor[(5, 8, 7), bool], Tensor[(1, 5, 16), float32], Tensor[(4, 20), float64], Tensor[(3, 16, 7), uint8], Tensor[(1, 336), uint8]) */;
  %276 = %275.6;
  %277 = cast(%276, dtype="float64") /* ty=Tensor[(5, 8, 7), float64] */;
  %278 = shape_of(%var_8481, dtype="int32") /* ty=Tensor[(1), int32] */;
  %279 = cast(%var_8481, dtype="float64") /* ty=Tensor[(280), float64] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?), float64] */;
  %281 = @func_5642() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) */;
  %282 = %266.0;
  %283 = floor_divide(%279, %280) /* ty=Tensor[(280), float64] */;
  %284 = %281.0;
  (%282, %var_8479, meta[relay.Constant][14] /* ty=Tensor[(468), float32] */, meta[relay.Constant][15] /* ty=Tensor[(80), float64] */, %283, %284)
}

def @func_8734(%var_8720: Tensor[(22), float32]) -> (Tensor[(36, 10), float32], Tensor[(3, 8, 15), float32], Tensor[(22), float32]) {
  %285 = @func_6096() /* ty=Tensor[(36, 10), float32] */;
  %286 = cast(%285, dtype="int64") /* ty=Tensor[(36, 10), int64] */;
  %287 = cast(%285, dtype="int64") /* ty=Tensor[(36, 10), int64] */;
  %288 = cast(%var_8720, dtype="float32") /* ty=Tensor[(22), float32] */;
  %289 = reshape(%286, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %290 = reshape(%287, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %291 = reshape(%288, newshape=[11, 2]) /* ty=Tensor[(11, 2), float32] */;
  %292 = @func_2097(%289, %290, %291) /* ty=(Tensor[(15, 12, 2), int64], Tensor[(2, ?, 11), float64], Tensor[(3, 8, 15), float32], Tensor[(16, 15, 14), uint8], Tensor[(420, 8), uint8], Tensor[(364), float64], Tensor[(3, 8, 15), float32]) */;
  %293 = cast(%var_8720, dtype="float32") /* ty=Tensor[(22), float32] */;
  %294 = %292.2;
  %295 = asin(%293) /* ty=Tensor[(22), float32] */;
  (%285, %294, %295)
}

def @func_20(%var_2: Tensor[(2, 1, 11), float32]) -> (Tensor[(2, 1, 11), float32],) {
  %296 = cast(%var_2, dtype="float32") /* ty=Tensor[(2, 1, 11), float32] */;
  %297 = sigmoid(%296) /* ty=Tensor[(2, 1, 11), float32] */;
  (%297,)
}

def @func_3757(%var_3747: Tensor[(6, 13, 1), float32], %var_3755: Tensor[(3360), uint8]) -> (Tensor[(6, 13, 1), float32], Tensor[(16, 15, 14), uint8], Tensor[(3360), uint8]) {
  %298 = cast(%var_3747, dtype="float32") /* ty=Tensor[(6, 13, 1), float32] */;
  %299 = cast(%var_3755, dtype="uint8") /* ty=Tensor[(3360), uint8] */;
  %300 = cast(%var_3755, dtype="uint8") /* ty=Tensor[(3360), uint8] */;
  %301 = reshape(%299, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), uint8] */;
  %302 = reshape(%300, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), uint8] */;
  %303 = acos(%298) /* ty=Tensor[(6, 13, 1), float32] */;
  %304 = @func_807(%301, %302) /* ty=Tensor[(16, 15, 14), uint8] */;
  (%303, %304, %var_3755)
}

def @func_7224() -> (Tensor[(14, 11, 10), uint16],) {
  %305 = @func_5801() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %306 = %305.0;
  (%306,)
}

def @func_9388() -> (Tensor[(150), uint32],) {
  %307 = @func_7188() /* ty=Tensor[(150), uint32] */;
  (%307,)
}

def @func_5612() -> Tensor[(3, 8, 15), float64] {
  %308 = @func_5579() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %308.0
}

def @func_4730() -> Tensor[(14, 11, 10), float64] {
  %309 = @func_4453() /* ty=(Tensor[(54), float32], Tensor[(14, 11, 10), int16], Tensor[(6, 3, 3), float64], Tensor[(600), int32], Tensor[(45, 2), float64], Tensor[(600), int32]) */;
  %310 = %309.1;
  %311 = cast(%310, dtype="float64") /* ty=Tensor[(14, 11, 10), float64] */;
  sigmoid(%311) /* ty=Tensor[(14, 11, 10), float64] */
}

def @func_7124(%var_7117: Tensor[(3, 8, 15), float64]) -> Tensor[(3, 8, 15), float32] {
  %312 = @func_5500() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %313 = %312.0;
  %314 = cast(%var_7117, dtype="float32") /* ty=Tensor[(3, 8, 15), float32] */;
  %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%313, dtype="float32") /* ty=Tensor[(3, 8, 15), float32] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  multiply(%316, %317) /* ty=Tensor[(3, 8, 15), float32] */
}

def @func_5349(%var_5299: Tensor[(468), float32], %var_5300: Tensor[(280), float64], %var_5319: Tensor[(13, 6), float32]) -> (Tensor[(3, 8, 15), float64], Tensor[(15, 3, 9), float32], Tensor[(36), float32], Tensor[(468), float32], Tensor[(280), float64], Tensor[(3360), uint8], Tensor[(13, 6), float32], Tensor[(840, 4), uint8], Tensor[(20, 4), float64], Tensor[(5, 10, 5), bool], Tensor[(250, 1), bool]) {
  %318 = @func_4633() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) */;
  %319 = cast(meta[relay.Constant][16] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %320 = cast(%var_5299, dtype="float32") /* ty=Tensor[(468), float32] */;
  %321 = cast(%var_5300, dtype="float64") /* ty=Tensor[(280), float64] */;
  %322 = cast(meta[relay.Constant][17] /* ty=Tensor[(20, 4), float64] */, dtype="float64") /* ty=Tensor[(20, 4), float64] */;
  %323 = reshape(%319, newshape=[9, 4]) /* ty=Tensor[(9, 4), float32] */;
  %324 = reshape(%320, newshape=[468]) /* ty=Tensor[(468), float32] */;
  %325 = reshape(%321, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), float64] */;
  %326 = reshape(%322, newshape=[4, 20]) /* ty=Tensor[(4, 20), float64] */;
  %327 = @func_4241(%323, %324, %325, %326) /* ty=(Tensor[(12, 3, 13), float32], Tensor[(9, 4), float32], Tensor[(468), float32], Tensor[(15, 3, 9), float32], Tensor[(3, 135), float32], Tensor[(3360), uint8], Tensor[(5, 8, 7), bool], Tensor[(1, 5, 16), float32], Tensor[(4, 20), float64], Tensor[(3, 16, 7), uint8], Tensor[(1, 336), uint8]) */;
  %328 = cast(%var_5319, dtype="float32") /* ty=Tensor[(13, 6), float32] */;
  %329 = cast(meta[relay.Constant][18] /* ty=Tensor[(840, 4), uint8] */, dtype="uint8") /* ty=Tensor[(840, 4), uint8] */;
  %330 = reshape(%328, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), float32] */;
  %331 = reshape(%329, newshape=[3360]) /* ty=Tensor[(3360), uint8] */;
  %332 = @func_3757(%330, %331) /* ty=(Tensor[(6, 13, 1), float32], Tensor[(16, 15, 14), uint8], Tensor[(3360), uint8]) */;
  %333 = cast(meta[relay.Constant][17] /* ty=Tensor[(20, 4), float64] */, dtype="float64") /* ty=Tensor[(20, 4), float64] */;
  %334 = cast(meta[relay.Constant][19] /* ty=Tensor[(250, 1), bool] */, dtype="bool") /* ty=Tensor[(250, 1), bool] */;
  %335 = reshape(%334, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), bool] */;
  %336 = @func_3905(%335) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(12, 3, 13), float32], Tensor[(36), float32], Tensor[(234, 2), float32]) */;
  %337 = %318.0;
  %338 = %327.3;
  %339 = %332.2;
  %340 = asinh(%333) /* ty=Tensor[(20, 4), float64] */;
  %341 = %336.0;
  (%337, %338, meta[relay.Constant][16] /* ty=Tensor[(36), float32] */, %var_5299, %var_5300, %339, %var_5319, meta[relay.Constant][18] /* ty=Tensor[(840, 4), uint8] */, %340, %341, meta[relay.Constant][19] /* ty=Tensor[(250, 1), bool] */)
}

def @func_9352() -> Tensor[(14, 11, 10), uint16] {
  %342 = @func_6352() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float64]) */;
  %342.1
}

def @func_6541() -> (Tensor[(14, 11, 10), float32],) {
  %343 = @func_6352() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float64]) */;
  %344 = %343.1;
  %345 = cast(%344, dtype="float32") /* ty=Tensor[(14, 11, 10), float32] */;
  %346 = acosh(%345) /* ty=Tensor[(14, 11, 10), float32] */;
  (%346,)
}

def @func_8706(%var_8697: Tensor[(22, 1), float32]) -> (Tensor[(3, 8, 15), float32], Tensor[(15, 12, 2), int64], Tensor[(22, 1), float32]) {
  %347 = @func_5642() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) */;
  %348 = %347.1;
  %349 = cast(%348, dtype="float32") /* ty=Tensor[(3, 8, 15), float32] */;
  %350 = asin(%349) /* ty=Tensor[(3, 8, 15), float32] */;
  %351 = cast(%350, dtype="int64") /* ty=Tensor[(3, 8, 15), int64] */;
  %352 = cast(%350, dtype="int64") /* ty=Tensor[(3, 8, 15), int64] */;
  %353 = cast(%var_8697, dtype="float32") /* ty=Tensor[(22, 1), float32] */;
  %354 = reshape(%351, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %355 = reshape(%352, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %356 = reshape(%353, newshape=[11, 2]) /* ty=Tensor[(11, 2), float32] */;
  %357 = @func_2097(%354, %355, %356) /* ty=(Tensor[(15, 12, 2), int64], Tensor[(2, ?, 11), float64], Tensor[(3, 8, 15), float32], Tensor[(16, 15, 14), uint8], Tensor[(420, 8), uint8], Tensor[(364), float64], Tensor[(3, 8, 15), float32]) */;
  %358 = %357.0;
  (%350, %358, %var_8697)
}

def @func_1715(%var_1703: Tensor[(3, 16, 7), uint8], %var_1704: Tensor[(3, 16, 7), uint8]) -> Tensor[(3, 16, 7), uint8] {
  %359 = cast(%var_1704, dtype="uint8") /* ty=Tensor[(3, 16, 7), uint8] */;
  %360 = shape_of(%var_1703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%var_1703, dtype="uint8") /* ty=Tensor[(3, 16, 7), uint8] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%361, %362) /* ty=Tensor[(3, 16, 7), uint8] */
}

def @func_9554() -> (Tensor[(12, 30), float32], Tensor[(360), float32], Tensor[(1, 672), int16]) {
  %363 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 672), int16] */, dtype="int16") /* ty=Tensor[(1, 672), int16] */;
  %364 = reshape(%363, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %365 = @func_6247(%364) /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(11, 2), float32], Tensor[(672), int16], Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(3, 8, 15), float32], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32]) */;
  %366 = @func_9300() /* ty=Tensor[(12, 30), float32] */;
  %367 = %365.4;
  (%366, %367, meta[relay.Constant][20] /* ty=Tensor[(1, 672), int16] */)
}

def @func_2420(%var_2412: Tensor[(15, 8, 5), int32], %var_2413: Tensor[(15, 8, 5), int32]) -> (Tensor[(15, 8, 5), bool], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) {
  %368 = cast(%var_2413, dtype="bool") /* ty=Tensor[(15, 8, 5), bool] */;
  %369 = shape_of(%var_2412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%var_2412, dtype="bool") /* ty=Tensor[(15, 8, 5), bool] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %372 = cast(meta[relay.Constant][21] /* ty=Tensor[(22), float32] */, dtype="float32") /* ty=Tensor[(22), float32] */;
  %373 = reshape(%372, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
  %374 = @func_20(%373) /* ty=(Tensor[(2, 1, 11), float32],) */;
  %375 = less_equal(%370, %371) /* ty=Tensor[(15, 8, 5), bool] */;
  %376 = %374.0;
  (%375, %376, meta[relay.Constant][21] /* ty=Tensor[(22), float32] */)
}

def @func_4960(%var_4903: Tensor[(1125), uint16], %var_4917: Tensor[(150), uint32]) -> (Tensor[(1125), bool], Tensor[(360), float32], Tensor[(150), uint32], Tensor[(1125), int64], Tensor[(1125), float32], Tensor[(15, 5, 15), bool], Tensor[(2, ?, 11), float64], Tensor[(22), float32]) {
  %377 = @func_4633() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) */;
  %378 = %377.2;
  %379 = cast(%var_4903, dtype="bool") /* ty=Tensor[(1125), bool] */;
  %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(1), int32] */;
  %381 = cast(%378, dtype="bool") /* ty=Tensor[(1125), bool] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?), bool] */;
  %383 = cast(%var_4917, dtype="uint32") /* ty=Tensor[(150), uint32] */;
  %384 = cast(%var_4917, dtype="uint32") /* ty=Tensor[(150), uint32] */;
  %385 = reshape(%383, newshape=[5, 6, 5]) /* ty=Tensor[(5, 6, 5), uint32] */;
  %386 = reshape(%384, newshape=[5, 6, 5]) /* ty=Tensor[(5, 6, 5), uint32] */;
  %387 = @func_3311(%385, %386) /* ty=(Tensor[(5, 6, 5), uint32], Tensor[(360), float32], Tensor[(54), float32]) */;
  %388 = cast(%var_4903, dtype="float64") /* ty=Tensor[(1125), float64] */;
  %389 = sigmoid(%388) /* ty=Tensor[(1125), float64] */;
  %390 = cast(%378, dtype="int64") /* ty=Tensor[(1125), int64] */;
  %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(1), int32] */;
  %392 = cast(%389, dtype="int64") /* ty=Tensor[(1125), int64] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?), int64] */;
  %394 = cast(%389, dtype="float64") /* ty=Tensor[(1125), float64] */;
  %395 = erf(%394) /* ty=Tensor[(1125), float64] */;
  %396 = cast(%395, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %397 = equal(%381, %382) /* ty=Tensor[(1125), bool] */;
  %398 = cast(%397, dtype="uint16") /* ty=Tensor[(1125), uint16] */;
  %399 = logical_xor(%392, %393) /* ty=Tensor[(1125), int64] */;
  %400 = cast(%399, dtype="uint16") /* ty=Tensor[(1125), uint16] */;
  %401 = cast(%397, dtype="uint16") /* ty=Tensor[(1125), uint16] */;
  %402 = reshape(%398, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), uint16] */;
  %403 = reshape(%400, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), uint16] */;
  %404 = reshape(%401, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), uint16] */;
  %405 = @func_2258(%402, %403, %404) /* ty=(Tensor[(15, 5, 15), uint16], Tensor[(15, 5, 15), bool]) */;
  %406 = %387.1;
  %407 = cast(%406, dtype="int64") /* ty=Tensor[(360), int64] */;
  %408 = cast(%406, dtype="int64") /* ty=Tensor[(360), int64] */;
  %409 = cast(meta[relay.Constant][22] /* ty=Tensor[(22), float32] */, dtype="float32") /* ty=Tensor[(22), float32] */;
  %410 = reshape(%407, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %411 = reshape(%408, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %412 = reshape(%409, newshape=[11, 2]) /* ty=Tensor[(11, 2), float32] */;
  %413 = @func_2097(%410, %411, %412) /* ty=(Tensor[(15, 12, 2), int64], Tensor[(2, ?, 11), float64], Tensor[(3, 8, 15), float32], Tensor[(16, 15, 14), uint8], Tensor[(420, 8), uint8], Tensor[(364), float64], Tensor[(3, 8, 15), float32]) */;
  %414 = exp(%396) /* ty=Tensor[(1125), float32] */;
  %415 = %405.1;
  %416 = %413.1;
  (%397, %406, %var_4917, %399, %414, %415, %416, meta[relay.Constant][22] /* ty=Tensor[(22), float32] */)
}

def @func_5470(%var_5466: Tensor[(5, 9, 14), float64]) -> Tensor[(5, 9, 14), float64] {
  %417 = cast(%var_5466, dtype="float64") /* ty=Tensor[(5, 9, 14), float64] */;
  acos(%417) /* ty=Tensor[(5, 9, 14), float64] */
}

def @func_3250(%var_3245: Tensor[(8, 12, 9), uint32]) -> Tensor[(8, 12, 9), uint32] {
  %418 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 12, 9), uint32] */, dtype="uint32") /* ty=Tensor[(8, 12, 9), uint32] */;
  %419 = shape_of(%var_3245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%var_3245, dtype="uint32") /* ty=Tensor[(8, 12, 9), uint32] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  left_shift(%420, %421) /* ty=Tensor[(8, 12, 9), uint32] */
}

def @func_5946(%var_5892: Tensor[(3, 8, 15), float64]) -> (Tensor[(3, 8, 15), bool], Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), float64], Tensor[(15, 12, 2), int64], Tensor[(1350), int64]) {
  %422 = @func_5500() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %423 = %422.0;
  %424 = cast(%var_5892, dtype="bool") /* ty=Tensor[(3, 8, 15), bool] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="bool") /* ty=Tensor[(3, 8, 15), bool] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %428 = @func_5579() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %429 = @func_4526() /* ty=(Tensor[(14, 11, 10), float64], Tensor[(3, 8, 15), float32], Tensor[(36, 10), float32]) */;
  %430 = cast(meta[relay.Constant][24] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %431 = cast(meta[relay.Constant][24] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %432 = reshape(%430, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %433 = reshape(%431, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %434 = @func_4779(%432, %433) /* ty=(Tensor[(13, 10, 1), float64], Tensor[(130), float64], Tensor[(6, 3, 3), float64], Tensor[(13, 10, 1), float64], Tensor[(14, 11, 10), uint16], Tensor[(15, 6, 15), bool], Tensor[(15, 12, 2), int64], Tensor[(360), int64], Tensor[(22), float32]) */;
  %435 = equal(%426, %427) /* ty=Tensor[(3, 8, 15), bool] */;
  %436 = %428.0;
  %437 = %429.0;
  %438 = %434.6;
  (%435, %436, %437, %438, meta[relay.Constant][24] /* ty=Tensor[(1350), int64] */)
}

def @func_1621(%var_1584: Tensor[(6, 3, 3), float32]) -> (Tensor[(6, 3, 3), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32]) {
  %439 = cast(%var_1584, dtype="float32") /* ty=Tensor[(6, 3, 3), float32] */;
  %440 = cast(meta[relay.Constant][25] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %441 = reshape(%440, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
  %442 = @func_1542(%441) /* ty=(Tensor[(3, 8, 15), float32],) */;
  %443 = erf(%439) /* ty=Tensor[(6, 3, 3), float32] */;
  %444 = %442.0;
  (%443, %444, meta[relay.Constant][25] /* ty=Tensor[(360), float32] */)
}

def @func_6006() -> Tensor[(14, 11, 10), uint16] {
  %445 = @func_4277() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %445.0
}

def @func_4678(%var_4642: Tensor[(14, 11, 10), uint16], %var_4662: Tensor[(78), float32], %var_4663: Tensor[(3360), uint8]) -> (Tensor[(14, 11, 10), bool], Tensor[(14, 11, 10), float64], Tensor[(6, 13, 1), float32], Tensor[(78), float32], Tensor[(3360), uint8]) {
  %446 = @func_4335() /* ty=Tensor[(14, 11, 10), uint16] */;
  %447 = cast(%var_4642, dtype="bool") /* ty=Tensor[(14, 11, 10), bool] */;
  %448 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%446, dtype="bool") /* ty=Tensor[(14, 11, 10), bool] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %451 = @func_4526() /* ty=(Tensor[(14, 11, 10), float64], Tensor[(3, 8, 15), float32], Tensor[(36, 10), float32]) */;
  %452 = cast(%var_4662, dtype="float32") /* ty=Tensor[(78), float32] */;
  %453 = cast(%var_4663, dtype="uint8") /* ty=Tensor[(3360), uint8] */;
  %454 = reshape(%452, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), float32] */;
  %455 = reshape(%453, newshape=[3360]) /* ty=Tensor[(3360), uint8] */;
  %456 = @func_3757(%454, %455) /* ty=(Tensor[(6, 13, 1), float32], Tensor[(16, 15, 14), uint8], Tensor[(3360), uint8]) */;
  %457 = greater(%449, %450) /* ty=Tensor[(14, 11, 10), bool] */;
  %458 = %451.0;
  %459 = %456.0;
  (%457, %458, %459, %var_4662, %var_4663)
}

def @func_6247(%var_6209: Tensor[(672), int16]) -> (Tensor[(14, 11, 10), uint16], Tensor[(11, 2), float32], Tensor[(672), int16], Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(3, 8, 15), float32], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32]) {
  %460 = @func_6078() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), uint16]) */;
  %461 = cast(%var_6209, dtype="int16") /* ty=Tensor[(672), int16] */;
  %462 = cast(%var_6209, dtype="int16") /* ty=Tensor[(672), int16] */;
  %463 = cast(%var_6209, dtype="float32") /* ty=Tensor[(672), float32] */;
  %464 = reshape(%461, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int16] */;
  %465 = reshape(%462, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int16] */;
  %466 = reshape(%463, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %467 = @func_477(%464, %465, %466) /* ty=(Tensor[(2, 1, 11), float32], Tensor[(11, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(2, 1, 11), float32], Tensor[(6, 8, 14), bool], Tensor[(2, 1, 11), float32]) */;
  %468 = cast(meta[relay.Constant][26] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %469 = reshape(%468, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
  %470 = @func_1542(%469) /* ty=(Tensor[(3, 8, 15), float32],) */;
  %471 = @func_5642() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) */;
  %472 = @func_4878() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %473 = %467.1;
  %474 = cast(%473, dtype="float32") /* ty=Tensor[(11, 2), float32] */;
  %475 = reshape(%474, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
  %476 = @func_20(%475) /* ty=(Tensor[(2, 1, 11), float32],) */;
  %477 = %460.0;
  %478 = %470.0;
  %479 = %471.1;
  %480 = %472.0;
  %481 = %476.0;
  (%477, %473, %var_6209, %478, meta[relay.Constant][26] /* ty=Tensor[(360), float32] */, %479, %480, %481)
}

def @func_3160(%var_3147: Tensor[(15, 2, 3), float64], %var_3153: Tensor[(600), int32]) -> (Tensor[(15, 8, 5), bool], Tensor[(600), int32], Tensor[(15, 2, 3), float64]) {
  %482 = cast(%var_3153, dtype="int32") /* ty=Tensor[(600), int32] */;
  %483 = cast(%var_3153, dtype="int32") /* ty=Tensor[(600), int32] */;
  %484 = reshape(%482, newshape=[15, 8, 5]) /* ty=Tensor[(15, 8, 5), int32] */;
  %485 = reshape(%483, newshape=[15, 8, 5]) /* ty=Tensor[(15, 8, 5), int32] */;
  %486 = @func_2420(%484, %485) /* ty=(Tensor[(15, 8, 5), bool], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
  %487 = cast(%var_3147, dtype="float64") /* ty=Tensor[(15, 2, 3), float64] */;
  %488 = sqrt(%487) /* ty=Tensor[(15, 2, 3), float64] */;
  %489 = cast(%488, dtype="float64") /* ty=Tensor[(15, 2, 3), float64] */;
  %490 = %486.0;
  %491 = sin(%489) /* ty=Tensor[(15, 2, 3), float64] */;
  (%490, %var_3153, %491)
}

def @func_5242(%var_5236: Tensor[(600), int32]) -> (Tensor[(14, 11, 10), uint16], Tensor[(600), int32], Tensor[(90), float64], Tensor[(600), int32], Tensor[(600), int32]) {
  %492 = @func_4855() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 16, 7), uint8], Tensor[(1008), float64], Tensor[(168, 2), uint8]) */;
  %493 = cast(meta[relay.Constant][27] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %494 = cast(%var_5236, dtype="int32") /* ty=Tensor[(600), int32] */;
  %495 = reshape(%493, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), float64] */;
  %496 = reshape(%494, newshape=[600]) /* ty=Tensor[(600), int32] */;
  %497 = @func_3160(%495, %496) /* ty=(Tensor[(15, 8, 5), bool], Tensor[(600), int32], Tensor[(15, 2, 3), float64]) */;
  %498 = @func_4453() /* ty=(Tensor[(54), float32], Tensor[(14, 11, 10), int16], Tensor[(6, 3, 3), float64], Tensor[(600), int32], Tensor[(45, 2), float64], Tensor[(600), int32]) */;
  %499 = %492.0;
  %500 = %497.1;
  %501 = %498.3;
  (%499, %500, meta[relay.Constant][27] /* ty=Tensor[(90), float64] */, %var_5236, %501)
}

def @func_6179() -> Tensor[(1125), float64] {
  %502 = @func_4633() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) */;
  %503 = %502.2;
  %504 = cast(%503, dtype="float64") /* ty=Tensor[(1125), float64] */;
  acosh(%504) /* ty=Tensor[(1125), float64] */
}

def @func_7846(%var_7782: Tensor[(2, 8, 13), uint64], %var_7783: Tensor[(2, 8, 13), uint64], %var_7821: Tensor[(1125), uint16], %var_7822: Tensor[(1, 150), uint32], %var_7838: Tensor[(2, 8, 13), bool]) -> (Tensor[(6, 3, 3), float32], Tensor[(54), float32], Tensor[(3, 8, 15), float64], Tensor[(360), float64], Tensor[(150), uint32], Tensor[(1125), uint16], Tensor[(1, 150), uint32], Tensor[(150), uint32], Tensor[(2, 8, 13), bool]) {
  %505 = cast(meta[relay.Constant][28] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %506 = reshape(%505, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
  %507 = @func_1621(%506) /* ty=(Tensor[(6, 3, 3), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32]) */;
  %508 = cast(meta[relay.Constant][29] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %509 = reshape(%508, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float64] */;
  %510 = @func_5946(%509) /* ty=(Tensor[(3, 8, 15), bool], Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), float64], Tensor[(15, 12, 2), int64], Tensor[(1350), int64]) */;
  %511 = cast(%var_7821, dtype="uint16") /* ty=Tensor[(1125), uint16] */;
  %512 = cast(%var_7822, dtype="uint32") /* ty=Tensor[(1, 150), uint32] */;
  %513 = reshape(%511, newshape=[1125]) /* ty=Tensor[(1125), uint16] */;
  %514 = reshape(%512, newshape=[150]) /* ty=Tensor[(150), uint32] */;
  %515 = @func_4960(%513, %514) /* ty=(Tensor[(1125), bool], Tensor[(360), float32], Tensor[(150), uint32], Tensor[(1125), int64], Tensor[(1125), float32], Tensor[(15, 5, 15), bool], Tensor[(2, ?, 11), float64], Tensor[(22), float32]) */;
  %516 = cast(%var_7782, dtype="float64") /* ty=Tensor[(2, 8, 13), float64] */;
  %517 = cosh(%516) /* ty=Tensor[(2, 8, 13), float64] */;
  %518 = cast(%var_7783, dtype="uint64") /* ty=Tensor[(2, 8, 13), uint64] */;
  %519 = shape_of(%var_7782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%var_7782, dtype="uint64") /* ty=Tensor[(2, 8, 13), uint64] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %522 = bitwise_xor(%520, %521) /* ty=Tensor[(2, 8, 13), uint64] */;
  %523 = cast(%522, dtype="bool") /* ty=Tensor[(2, 8, 13), bool] */;
  %524 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%517, dtype="bool") /* ty=Tensor[(2, 8, 13), bool] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %527 = greater(%525, %526) /* ty=Tensor[(2, 8, 13), bool] */;
  %528 = cast(%var_7838, dtype="bool") /* ty=Tensor[(2, 8, 13), bool] */;
  %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%527, dtype="bool") /* ty=Tensor[(2, 8, 13), bool] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %532 = %507.0;
  %533 = %510.1;
  %534 = %515.2;
  %535 = @func_7188() /* ty=Tensor[(150), uint32] */;
  %536 = equal(%530, %531) /* ty=Tensor[(2, 8, 13), bool] */;
  (%532, meta[relay.Constant][28] /* ty=Tensor[(54), float32] */, %533, meta[relay.Constant][29] /* ty=Tensor[(360), float64] */, %534, %var_7821, %var_7822, %535, %536)
}

def @func_3796(%var_3793: Tensor[(12, 2, 5), float64]) -> (Tensor[(12, 2, 5), float64],) {
  %537 = cast(%var_3793, dtype="float64") /* ty=Tensor[(12, 2, 5), float64] */;
  %538 = sqrt(%537) /* ty=Tensor[(12, 2, 5), float64] */;
  (%538,)
}

def @func_2136(%var_2110: Tensor[(15, 3, 9), float32], %var_2121: Tensor[(14, 240), uint8]) -> (Tensor[(15, 3, 9), float32], Tensor[(2, 1, 11), float32], Tensor[(672), int16], Tensor[(16, 15, 14), uint8], Tensor[(14, 240), uint8], Tensor[(2, 1, 11), float32]) {
  %539 = cast(%var_2110, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %540 = cast(meta[relay.Constant][30] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %541 = cast(meta[relay.Constant][30] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %542 = cast(meta[relay.Constant][30] /* ty=Tensor[(672), int16] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %543 = reshape(%540, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int16] */;
  %544 = reshape(%541, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int16] */;
  %545 = reshape(%542, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %546 = @func_477(%543, %544, %545) /* ty=(Tensor[(2, 1, 11), float32], Tensor[(11, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(2, 1, 11), float32], Tensor[(6, 8, 14), bool], Tensor[(2, 1, 11), float32]) */;
  %547 = cast(%var_2121, dtype="uint8") /* ty=Tensor[(14, 240), uint8] */;
  %548 = cast(%var_2121, dtype="uint8") /* ty=Tensor[(14, 240), uint8] */;
  %549 = reshape(%547, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), uint8] */;
  %550 = reshape(%548, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), uint8] */;
  %551 = %546.2;
  %552 = cast(%551, dtype="float32") /* ty=Tensor[(2, 1, 11), float32] */;
  %553 = reshape(%552, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
  %554 = @func_20(%553) /* ty=(Tensor[(2, 1, 11), float32],) */;
  %555 = sqrt(%539) /* ty=Tensor[(15, 3, 9), float32] */;
  %556 = @func_807(%549, %550) /* ty=Tensor[(16, 15, 14), uint8] */;
  %557 = %554.0;
  (%555, %551, meta[relay.Constant][30] /* ty=Tensor[(672), int16] */, %556, %var_2121, %557)
}

def @func_4335() -> Tensor[(14, 11, 10), uint16] {
  %558 = @func_4277() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %558.0
}

def @func_6604() -> (Tensor[(14, 11, 10), uint16],) {
  %559 = @func_4277() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %560 = %559.0;
  (%560,)
}

def @func_7536() -> (Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), float32]) {
  %561 = @func_7094() /* ty=(Tensor[(3, 2, 15), bool], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
  %562 = @func_6352() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float64]) */;
  %563 = @func_6541() /* ty=(Tensor[(14, 11, 10), float32],) */;
  %564 = %561.1;
  %565 = %562.1;
  %566 = %563.0;
  (%564, %565, %566)
}

def @func_5579() -> (Tensor[(3, 8, 15), float64],) {
  %567 = @func_5500() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %568 = %567.0;
  (%568,)
}

def @func_5682() -> Tensor[(3, 8, 15), float64] {
  @func_5612() /* ty=Tensor[(3, 8, 15), float64] */
}

def @func_7676() -> (Tensor[(14, 11, 10), uint16],) {
  %569 = @func_7656() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %570 = %569.0;
  (%570,)
}

def @func_5642() -> (Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) {
  %571 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 30), float32] */, dtype="float32") /* ty=Tensor[(12, 30), float32] */;
  %572 = reshape(%571, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
  %573 = @func_1542(%572) /* ty=(Tensor[(3, 8, 15), float32],) */;
  %574 = @func_4335() /* ty=Tensor[(14, 11, 10), uint16] */;
  %575 = %573.0;
  (%574, %575, meta[relay.Constant][31] /* ty=Tensor[(12, 30), float32] */)
}

def @func_5042() -> (Tensor[(14, 11, 10), uint16],) {
  %576 = @func_4878() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %577 = %576.0;
  (%577,)
}

def @func_477(%var_407: Tensor[(6, 8, 14), int16], %var_408: Tensor[(6, 8, 14), int16], %var_442: Tensor[(6, 8, 14), float32]) -> (Tensor[(2, 1, 11), float32], Tensor[(11, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(2, 1, 11), float32], Tensor[(6, 8, 14), bool], Tensor[(2, 1, 11), float32]) {
  %578 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 2), float32] */;
  %579 = reshape(%578, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
  %580 = @func_20(%579) /* ty=(Tensor[(2, 1, 11), float32],) */;
  %581 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 2), float32] */;
  %582 = reshape(%581, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
  %583 = @func_20(%582) /* ty=(Tensor[(2, 1, 11), float32],) */;
  %584 = %580.0;
  %585 = cast(%584, dtype="float32") /* ty=Tensor[(2, 1, 11), float32] */;
  %586 = reshape(%585, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
  %587 = @func_20(%586) /* ty=(Tensor[(2, 1, 11), float32],) */;
  %588 = cast(%var_408, dtype="int16") /* ty=Tensor[(6, 8, 14), int16] */;
  %589 = shape_of(%var_407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%var_407, dtype="int16") /* ty=Tensor[(6, 8, 14), int16] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %592 = subtract(%590, %591) /* ty=Tensor[(6, 8, 14), int16] */;
  %593 = cast(%592, dtype="float32") /* ty=Tensor[(6, 8, 14), float32] */;
  %594 = log10(%593) /* ty=Tensor[(6, 8, 14), float32] */;
  %595 = cast(%592, dtype="float32") /* ty=Tensor[(6, 8, 14), float32] */;
  %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%594, dtype="float32") /* ty=Tensor[(6, 8, 14), float32] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %599 = add(%597, %598) /* ty=Tensor[(6, 8, 14), float32] */;
  %600 = cast(%var_442, dtype="bool") /* ty=Tensor[(6, 8, 14), bool] */;
  %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%599, dtype="bool") /* ty=Tensor[(6, 8, 14), bool] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %604 = %587.0;
  %605 = cast(%604, dtype="float32") /* ty=Tensor[(2, 1, 11), float32] */;
  %606 = reshape(%605, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
  %607 = @func_20(%606) /* ty=(Tensor[(2, 1, 11), float32],) */;
  %608 = %583.0;
  %609 = less(%602, %603) /* ty=Tensor[(6, 8, 14), bool] */;
  %610 = %607.0;
  (%584, meta[relay.Constant][32] /* ty=Tensor[(11, 2), float32] */, %608, %604, %609, %610)
}

def @func_7992() -> Tensor[(14, 11, 10), uint16] {
  %611 = @func_7224() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %611.0
}

def @func_8910() -> (Tensor[(3, 8, 15), float64],) {
  %612 = @func_5612() /* ty=Tensor[(3, 8, 15), float64] */;
  (%612,)
}

def @func_9046(%var_9040: Tensor[(1125), uint16]) -> (Tensor[(14, 11, 10), uint16], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16], Tensor[(150), uint32], Tensor[(3, 8, 15), float64]) {
  %613 = @func_7224() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %614 = cast(%var_9040, dtype="uint16") /* ty=Tensor[(1125), uint16] */;
  %615 = cast(meta[relay.Constant][33] /* ty=Tensor[(150), uint32] */, dtype="uint32") /* ty=Tensor[(150), uint32] */;
  %616 = reshape(%614, newshape=[1125]) /* ty=Tensor[(1125), uint16] */;
  %617 = reshape(%615, newshape=[150]) /* ty=Tensor[(150), uint32] */;
  %618 = @func_4960(%616, %617) /* ty=(Tensor[(1125), bool], Tensor[(360), float32], Tensor[(150), uint32], Tensor[(1125), int64], Tensor[(1125), float32], Tensor[(15, 5, 15), bool], Tensor[(2, ?, 11), float64], Tensor[(22), float32]) */;
  %619 = @func_4695() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %620 = %613.0;
  %621 = %618.5;
  %622 = %619.0;
  (%620, %621, %var_9040, meta[relay.Constant][33] /* ty=Tensor[(150), uint32] */, %622)
}

def @func_5568() -> (Tensor[(600), int32],) {
  %623 = @func_4453() /* ty=(Tensor[(54), float32], Tensor[(14, 11, 10), int16], Tensor[(6, 3, 3), float64], Tensor[(600), int32], Tensor[(45, 2), float64], Tensor[(600), int32]) */;
  %624 = %623.5;
  (%624,)
}

def @func_5130(%var_5081: Tensor[(3, 8, 15), float64]) -> (Tensor[(3, 8, 15), int32], Tensor[(16, 15, 14), uint8], Tensor[(3360), uint8], Tensor[(3, 8, 15), float64]) {
  %625 = @func_4695() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %626 = %625.0;
  %627 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 8, 15), float64] */, dtype="int32") /* ty=Tensor[(3, 8, 15), int32] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%626, dtype="int32") /* ty=Tensor[(3, 8, 15), int32] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %631 = cast(meta[relay.Constant][35] /* ty=Tensor[(3360), uint8] */, dtype="uint8") /* ty=Tensor[(3360), uint8] */;
  %632 = cast(meta[relay.Constant][35] /* ty=Tensor[(3360), uint8] */, dtype="uint8") /* ty=Tensor[(3360), uint8] */;
  %633 = reshape(%631, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), uint8] */;
  %634 = reshape(%632, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), uint8] */;
  %635 = cast(%var_5081, dtype="uint64") /* ty=Tensor[(3, 8, 15), uint64] */;
  %636 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%626, dtype="uint64") /* ty=Tensor[(3, 8, 15), uint64] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %639 = bitwise_and(%637, %638) /* ty=Tensor[(3, 8, 15), uint64] */;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(3, 8, 15), float64] */;
  %641 = right_shift(%629, %630) /* ty=Tensor[(3, 8, 15), int32] */;
  %642 = @func_807(%633, %634) /* ty=Tensor[(16, 15, 14), uint8] */;
  %643 = acosh(%640) /* ty=Tensor[(3, 8, 15), float64] */;
  (%641, %642, meta[relay.Constant][35] /* ty=Tensor[(3360), uint8] */, %643)
}

def @func_4277() -> (Tensor[(14, 11, 10), uint16],) {
  %644 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 11, 10), uint16] */, dtype="uint16") /* ty=Tensor[(14, 11, 10), uint16] */;
  %645 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(14, 11, 10), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 11, 10), uint16] */, dtype="uint16") /* ty=Tensor[(14, 11, 10), uint16] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %648 = bitwise_xor(%646, %647) /* ty=Tensor[(14, 11, 10), uint16] */;
  (%648,)
}

def @func_9208(%var_9200: Tensor[(90), float64]) -> (Tensor[(3, 8, 15), float64], Tensor[(3, 8, 15), float64], Tensor[(30), int8], Tensor[(90), float64], Tensor[(36), float32]) {
  %649 = cast(meta[relay.Constant][38] /* ty=Tensor[(30), int8] */, dtype="int8") /* ty=Tensor[(30), int8] */;
  %650 = @func_9001() /* ty=Tensor[(3, 8, 15), float64] */;
  %651 = cast(%650, dtype="int8") /* ty=Tensor[(3, 8, 15), int8] */;
  %652 = cast(%var_9200, dtype="float64") /* ty=Tensor[(90), float64] */;
  %653 = cast(meta[relay.Constant][39] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %654 = reshape(%649, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), int8] */;
  %655 = reshape(%651, newshape=[12, 6, 5]) /* ty=Tensor[(12, 6, 5), int8] */;
  %656 = reshape(%652, newshape=[45, 2]) /* ty=Tensor[(45, 2), float64] */;
  %657 = reshape(%653, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %658 = @func_7415(%654, %655, %656, %657) /* ty=(Tensor[(12, 6, 5), int8], Tensor[(3, 8, 15), bool], Tensor[(15, 8, 5), bool], Tensor[(45, 2), float64], Tensor[(600, 1), int32], Tensor[(12, 6, 5), float64], Tensor[(9, 4), float32], Tensor[(36), float32], Tensor[(3, 8, 15), float64]) */;
  %659 = %658.8;
  (%650, %659, meta[relay.Constant][38] /* ty=Tensor[(30), int8] */, %var_9200, meta[relay.Constant][39] /* ty=Tensor[(36), float32] */)
}

def @func_6672() -> (Tensor[(1008), float64], Tensor[(54), float32], Tensor[(150), uint32]) {
  %660 = @func_4855() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 16, 7), uint8], Tensor[(1008), float64], Tensor[(168, 2), uint8]) */;
  %661 = cast(meta[relay.Constant][40] /* ty=Tensor[(150), uint32] */, dtype="uint32") /* ty=Tensor[(150), uint32] */;
  %662 = cast(meta[relay.Constant][40] /* ty=Tensor[(150), uint32] */, dtype="uint32") /* ty=Tensor[(150), uint32] */;
  %663 = reshape(%661, newshape=[5, 6, 5]) /* ty=Tensor[(5, 6, 5), uint32] */;
  %664 = reshape(%662, newshape=[5, 6, 5]) /* ty=Tensor[(5, 6, 5), uint32] */;
  %665 = @func_3311(%663, %664) /* ty=(Tensor[(5, 6, 5), uint32], Tensor[(360), float32], Tensor[(54), float32]) */;
  %666 = %660.2;
  %667 = %665.2;
  (%666, %667, meta[relay.Constant][40] /* ty=Tensor[(150), uint32] */)
}

def @func_6281(%var_6272: Tensor[(1, 14, 16), float32]) -> (Tensor[(1, 14, 16), float32], Tensor[(14, 11, 10), uint16]) {
  %668 = cast(%var_6272, dtype="float32") /* ty=Tensor[(1, 14, 16), float32] */;
  %669 = @func_5801() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %670 = atanh(%668) /* ty=Tensor[(1, 14, 16), float32] */;
  %671 = %669.0;
  (%670, %671)
}

def @func_9411() -> Tensor[(14, 11, 10), uint16] {
  %672 = @func_4277() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %672.0
}

def @func_9001() -> Tensor[(3, 8, 15), float64] {
  %673 = @func_4633() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) */;
  %673.0
}

def @func_8203() -> (Tensor[(14, 11, 10), uint16], Tensor[(16, 7, 16), int32], Tensor[(1792), float64], Tensor[(600), int32]) {
  %674 = @func_6078() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), uint16]) */;
  %675 = cast(meta[relay.Constant][41] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %676 = cast(meta[relay.Constant][41] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %677 = reshape(%675, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), float64] */;
  %678 = reshape(%676, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), float64] */;
  %679 = @func_4488(%677, %678) /* ty=(Tensor[(16, 7, 16), int32],) */;
  %680 = @func_5568() /* ty=(Tensor[(600), int32],) */;
  %681 = %674.1;
  %682 = %679.0;
  %683 = %680.0;
  (%681, %682, meta[relay.Constant][41] /* ty=Tensor[(1792), float64] */, %683)
}

def @func_9610(%var_9593: Tensor[(9, 7, 11), int64], %var_9594: Tensor[(9, 7, 11), int64]) -> (Tensor[(3, 8, 15), float64], Tensor[(9, 7, 11), float32]) {
  %684 = @func_4633() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) */;
  %685 = cast(%var_9594, dtype="bool") /* ty=Tensor[(9, 7, 11), bool] */;
  %686 = shape_of(%var_9593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%var_9593, dtype="bool") /* ty=Tensor[(9, 7, 11), bool] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %689 = less_equal(%687, %688) /* ty=Tensor[(9, 7, 11), bool] */;
  %690 = cast(%var_9594, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
  %691 = shape_of(%689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%689, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %694 = %684.0;
  %695 = power(%692, %693) /* ty=Tensor[(9, 7, 11), float32] */;
  (%694, %695)
}

def @func_807(%var_799: Tensor[(16, 15, 14), uint8], %var_800: Tensor[(16, 15, 14), uint8]) -> Tensor[(16, 15, 14), uint8] {
  %696 = cast(%var_800, dtype="uint8") /* ty=Tensor[(16, 15, 14), uint8] */;
  %697 = shape_of(%var_799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%var_799, dtype="uint8") /* ty=Tensor[(16, 15, 14), uint8] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  maximum(%698, %699) /* ty=Tensor[(16, 15, 14), uint8] */
}

def @func_4000(%var_3994: float32) -> Tensor[(9, 11, 15), bool] {
  %700 = cast(%var_3994, dtype="bool") /* ty=bool */;
  %701 = cast(meta[relay.Constant][42] /* ty=Tensor[(9, 11, 15), float32] */, dtype="bool") /* ty=Tensor[(9, 11, 15), bool] */;
  equal(%700, %701) /* ty=Tensor[(9, 11, 15), bool] */
}

def @func_5207(%var_5193: Tensor[(1008), float64], %var_5205: Tensor[(600), int32]) -> (Tensor[(3, 8, 15), float64], Tensor[(3, 8, 15), float64], Tensor[(2, 1, 11), float32], Tensor[(672), int16], Tensor[(3360), uint8], Tensor[(24, 14), uint8], Tensor[(336), uint8], Tensor[(1008), bool], Tensor[(2, 1, 11), float32], Tensor[(600), int32]) {
  %702 = @func_4695() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %703 = @func_4695() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %704 = cast(meta[relay.Constant][43] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %705 = cast(meta[relay.Constant][43] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %706 = cast(meta[relay.Constant][43] /* ty=Tensor[(672), int16] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %707 = reshape(%704, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int16] */;
  %708 = reshape(%705, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int16] */;
  %709 = reshape(%706, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %710 = @func_477(%707, %708, %709) /* ty=(Tensor[(2, 1, 11), float32], Tensor[(11, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(2, 1, 11), float32], Tensor[(6, 8, 14), bool], Tensor[(2, 1, 11), float32]) */;
  %711 = %702.0;
  %712 = cast(%711, dtype="float64") /* ty=Tensor[(3, 8, 15), float64] */;
  %713 = reshape(%712, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float64] */;
  %714 = @func_5130(%713) /* ty=(Tensor[(3, 8, 15), int32], Tensor[(16, 15, 14), uint8], Tensor[(3360), uint8], Tensor[(3, 8, 15), float64]) */;
  %715 = cast(meta[relay.Constant][44] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %716 = cast(meta[relay.Constant][45] /* ty=Tensor[(336), uint8] */, dtype="uint8") /* ty=Tensor[(336), uint8] */;
  %717 = reshape(%715, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), float64] */;
  %718 = reshape(%716, newshape=[24, 14]) /* ty=Tensor[(24, 14), uint8] */;
  %719 = @func_2782(%717, %718) /* ty=(Tensor[(9, 16, 7), float64], Tensor[(3, 16, 7), uint8], Tensor[(24, 14), uint8], Tensor[(2, 1, 11), float32], Tensor[(672), int16]) */;
  %720 = cast(%var_5193, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %721 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(1008), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %722 = cast(meta[relay.Constant][44] /* ty=Tensor[(1008), float64] */, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?), bool] */;
  %724 = cast(%var_5205, dtype="int32") /* ty=Tensor[(600), int32] */;
  %725 = cast(%var_5205, dtype="int32") /* ty=Tensor[(600), int32] */;
  %726 = reshape(%724, newshape=[15, 8, 5]) /* ty=Tensor[(15, 8, 5), int32] */;
  %727 = reshape(%725, newshape=[15, 8, 5]) /* ty=Tensor[(15, 8, 5), int32] */;
  %728 = @func_2420(%726, %727) /* ty=(Tensor[(15, 8, 5), bool], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
  %729 = %703.0;
  %730 = %710.5;
  %731 = %714.2;
  %732 = %719.2;
  %733 = logical_or(%722, %723) /* ty=Tensor[(1008), bool] */;
  %734 = %728.1;
  (%711, %729, %730, meta[relay.Constant][43] /* ty=Tensor[(672), int16] */, %731, %732, meta[relay.Constant][45] /* ty=Tensor[(336), uint8] */, %733, %734, %var_5205)
}

def @func_4855() -> (Tensor[(14, 11, 10), uint16], Tensor[(3, 16, 7), uint8], Tensor[(1008), float64], Tensor[(168, 2), uint8]) {
  %735 = @func_4277() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %736 = cast(meta[relay.Constant][46] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %737 = cast(meta[relay.Constant][47] /* ty=Tensor[(168, 2), uint8] */, dtype="uint8") /* ty=Tensor[(168, 2), uint8] */;
  %738 = reshape(%736, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), float64] */;
  %739 = reshape(%737, newshape=[24, 14]) /* ty=Tensor[(24, 14), uint8] */;
  %740 = @func_2782(%738, %739) /* ty=(Tensor[(9, 16, 7), float64], Tensor[(3, 16, 7), uint8], Tensor[(24, 14), uint8], Tensor[(2, 1, 11), float32], Tensor[(672), int16]) */;
  %741 = %735.0;
  %742 = %740.1;
  (%741, %742, meta[relay.Constant][46] /* ty=Tensor[(1008), float64] */, meta[relay.Constant][47] /* ty=Tensor[(168, 2), uint8] */)
}

def @func_7950(%var_7918: Tensor[(130), float64]) -> (Tensor[(3, 8, 15), float64], Tensor[(13, 10, ?), uint16]) {
  %743 = @func_5500() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %744 = cast(%var_7918, dtype="float64") /* ty=Tensor[(130), float64] */;
  %745 = reshape(%744, newshape=[13, 10, 1]) /* ty=Tensor[(13, 10, 1), float64] */;
  %746 = @func_2875(%745) /* ty=(Tensor[(13, 10, 1), float64],) */;
  %747 = %746.0;
  %748 = cast(%var_7918, dtype="uint16") /* ty=Tensor[(130), uint16] */;
  %749 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%747, dtype="uint16") /* ty=Tensor[(13, 10, 1), uint16] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %752 = %743.0;
  %753 = logical_xor(%750, %751) /* ty=Tensor[(13, 10, ?), uint16] */;
  (%752, %753)
}

def @func_9256() -> Tensor[(3, 2, 15), bool] {
  %754 = @func_7094() /* ty=(Tensor[(3, 2, 15), bool], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
  %754.0
}

def @func_5031(%var_5000: Tensor[(14, 11, 10), float64]) -> Tensor[(14, 11, 10), bool] {
  %755 = @func_4730() /* ty=Tensor[(14, 11, 10), float64] */;
  %756 = cast(%var_5000, dtype="bool") /* ty=Tensor[(14, 11, 10), bool] */;
  %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%755, dtype="bool") /* ty=Tensor[(14, 11, 10), bool] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%758, %759) /* ty=Tensor[(14, 11, 10), bool] */
}

def @func_4241(%var_4184: Tensor[(9, 4), float32], %var_4185: Tensor[(468), float32], %var_4212: Tensor[(5, 8, 7), float64], %var_4228: Tensor[(4, 20), float64]) -> (Tensor[(12, 3, 13), float32], Tensor[(9, 4), float32], Tensor[(468), float32], Tensor[(15, 3, 9), float32], Tensor[(3, 135), float32], Tensor[(3360), uint8], Tensor[(5, 8, 7), bool], Tensor[(1, 5, 16), float32], Tensor[(4, 20), float64], Tensor[(3, 16, 7), uint8], Tensor[(1, 336), uint8]) {
  %760 = cast(%var_4184, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
  %761 = cast(%var_4185, dtype="float32") /* ty=Tensor[(468), float32] */;
  %762 = reshape(%760, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), float32] */;
  %763 = reshape(%761, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float32] */;
  %764 = @func_3199(%762, %763) /* ty=(Tensor[(12, 3, 13), float32],) */;
  %765 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 135), float32] */, dtype="float32") /* ty=Tensor[(3, 135), float32] */;
  %766 = cast(meta[relay.Constant][49] /* ty=Tensor[(3360), uint8] */, dtype="uint8") /* ty=Tensor[(3360), uint8] */;
  %767 = reshape(%765, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %768 = reshape(%766, newshape=[14, 240]) /* ty=Tensor[(14, 240), uint8] */;
  %769 = @func_2136(%767, %768) /* ty=(Tensor[(15, 3, 9), float32], Tensor[(2, 1, 11), float32], Tensor[(672), int16], Tensor[(16, 15, 14), uint8], Tensor[(14, 240), uint8], Tensor[(2, 1, 11), float32]) */;
  %770 = cast(meta[relay.Constant][50] /* ty=Tensor[(5, 8, 7), float64] */, dtype="float64") /* ty=Tensor[(5, 8, 7), float64] */;
  %771 = sin(%770) /* ty=Tensor[(5, 8, 7), float64] */;
  %772 = cast(%var_4212, dtype="bool") /* ty=Tensor[(5, 8, 7), bool] */;
  %773 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%771, dtype="bool") /* ty=Tensor[(5, 8, 7), bool] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %776 = cast(%var_4228, dtype="float64") /* ty=Tensor[(4, 20), float64] */;
  %777 = reshape(%776, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), float64] */;
  %778 = @func_664(%777) /* ty=(Tensor[(?, 5, 16), bool], Tensor[(?, 5, 16), int16], Tensor[(1, 5, 16), float32], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
  %779 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 336), uint8] */, dtype="uint8") /* ty=Tensor[(1, 336), uint8] */;
  %780 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 336), uint8] */, dtype="uint8") /* ty=Tensor[(1, 336), uint8] */;
  %781 = reshape(%779, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint8] */;
  %782 = reshape(%780, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint8] */;
  %783 = %764.0;
  %784 = %769.0;
  %785 = greater_equal(%774, %775) /* ty=Tensor[(5, 8, 7), bool] */;
  %786 = %778.2;
  %787 = @func_1715(%781, %782) /* ty=Tensor[(3, 16, 7), uint8] */;
  (%783, %var_4184, %var_4185, %784, meta[relay.Constant][48] /* ty=Tensor[(3, 135), float32] */, meta[relay.Constant][49] /* ty=Tensor[(3360), uint8] */, %785, %786, %var_4228, %787, meta[relay.Constant][51] /* ty=Tensor[(1, 336), uint8] */)
}

def @func_1577(%var_1554: Tensor[(7, 4, 13), float32]) -> (Tensor[(7, 4, 13), float32], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) {
  %788 = cast(meta[relay.Constant][52] /* ty=Tensor[(7, 4, 13), float32] */, dtype="float32") /* ty=Tensor[(7, 4, 13), float32] */;
  %789 = shape_of(%var_1554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%var_1554, dtype="float32") /* ty=Tensor[(7, 4, 13), float32] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %792 = cast(meta[relay.Constant][53] /* ty=Tensor[(22), float32] */, dtype="float32") /* ty=Tensor[(22), float32] */;
  %793 = reshape(%792, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
  %794 = @func_20(%793) /* ty=(Tensor[(2, 1, 11), float32],) */;
  %795 = floor_divide(%790, %791) /* ty=Tensor[(7, 4, 13), float32] */;
  %796 = %794.0;
  (%795, %796, meta[relay.Constant][53] /* ty=Tensor[(22), float32] */)
}

def @func_5500() -> (Tensor[(3, 8, 15), float64],) {
  %797 = @func_4695() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %798 = %797.0;
  (%798,)
}

def @func_3547(%var_3510: Tensor[(6, 9, 9), float64], %var_3511: Tensor[(6, 9, 9), float64], %var_3524: Tensor[(6, 9, 9), float64]) -> (Tensor[(6, 9, 9), uint32], Tensor[(6, 9, 9), bool]) {
  %799 = cast(%var_3511, dtype="float64") /* ty=Tensor[(6, 9, 9), float64] */;
  %800 = shape_of(%var_3510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%var_3510, dtype="float64") /* ty=Tensor[(6, 9, 9), float64] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %803 = divide(%801, %802) /* ty=Tensor[(6, 9, 9), float64] */;
  %804 = cast(%803, dtype="uint32") /* ty=Tensor[(6, 9, 9), uint32] */;
  %805 = shape_of(%var_3510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%var_3510, dtype="uint32") /* ty=Tensor[(6, 9, 9), uint32] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %808 = cast(%var_3524, dtype="bool") /* ty=Tensor[(6, 9, 9), bool] */;
  %809 = shape_of(%var_3511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(%var_3511, dtype="bool") /* ty=Tensor[(6, 9, 9), bool] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %812 = multiply(%806, %807) /* ty=Tensor[(6, 9, 9), uint32] */;
  %813 = equal(%810, %811) /* ty=Tensor[(6, 9, 9), bool] */;
  (%812, %813)
}

def @func_2258(%var_2231: Tensor[(15, 5, 15), uint16], %var_2232: Tensor[(15, 5, 15), uint16], %var_2245: Tensor[(15, 5, 15), uint16]) -> (Tensor[(15, 5, 15), uint16], Tensor[(15, 5, 15), bool]) {
  %814 = cast(%var_2232, dtype="uint16") /* ty=Tensor[(15, 5, 15), uint16] */;
  %815 = shape_of(%var_2231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%var_2231, dtype="uint16") /* ty=Tensor[(15, 5, 15), uint16] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %818 = cast(%var_2245, dtype="bool") /* ty=Tensor[(15, 5, 15), bool] */;
  %819 = shape_of(%var_2231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %820 = cast(%var_2231, dtype="bool") /* ty=Tensor[(15, 5, 15), bool] */;
  %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %822 = add(%816, %817) /* ty=Tensor[(15, 5, 15), uint16] */;
  %823 = equal(%820, %821) /* ty=Tensor[(15, 5, 15), bool] */;
  (%822, %823)
}

def @func_3311(%var_3289: Tensor[(5, 6, 5), uint32], %var_3290: Tensor[(5, 6, 5), uint32]) -> (Tensor[(5, 6, 5), uint32], Tensor[(360), float32], Tensor[(54), float32]) {
  %824 = cast(%var_3290, dtype="uint32") /* ty=Tensor[(5, 6, 5), uint32] */;
  %825 = shape_of(%var_3289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(%var_3289, dtype="uint32") /* ty=Tensor[(5, 6, 5), uint32] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %828 = cast(meta[relay.Constant][54] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %829 = reshape(%828, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
  %830 = @func_1621(%829) /* ty=(Tensor[(6, 3, 3), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32]) */;
  %831 = minimum(%826, %827) /* ty=Tensor[(5, 6, 5), uint32] */;
  %832 = %830.2;
  (%831, %832, meta[relay.Constant][54] /* ty=Tensor[(54), float32] */)
}

def @func_2097(%var_2037: Tensor[(15, 12, 2), int64], %var_2038: Tensor[(15, 12, 2), int64], %var_2058: Tensor[(11, 2), float32]) -> (Tensor[(15, 12, 2), int64], Tensor[(2, ?, 11), float64], Tensor[(3, 8, 15), float32], Tensor[(16, 15, 14), uint8], Tensor[(420, 8), uint8], Tensor[(364), float64], Tensor[(3, 8, 15), float32]) {
  %833 = cast(%var_2038, dtype="int64") /* ty=Tensor[(15, 12, 2), int64] */;
  %834 = shape_of(%var_2037, dtype="int32") /* ty=Tensor[(3), int32] */;
  %835 = cast(%var_2037, dtype="int64") /* ty=Tensor[(15, 12, 2), int64] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %837 = cast(%var_2058, dtype="float32") /* ty=Tensor[(11, 2), float32] */;
  %838 = reshape(%837, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
  %839 = @func_20(%838) /* ty=(Tensor[(2, 1, 11), float32],) */;
  %840 = %839.0;
  %841 = cast(%var_2058, dtype="float64") /* ty=Tensor[(11, 2), float64] */;
  %842 = shape_of(%840, dtype="int32") /* ty=Tensor[(3), int32] */;
  %843 = cast(%840, dtype="float64") /* ty=Tensor[(2, 1, 11), float64] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %845 = cast(%var_2038, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %846 = reshape(%845, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
  %847 = @func_1542(%846) /* ty=(Tensor[(3, 8, 15), float32],) */;
  %848 = cast(meta[relay.Constant][55] /* ty=Tensor[(420, 8), uint8] */, dtype="uint8") /* ty=Tensor[(420, 8), uint8] */;
  %849 = cast(meta[relay.Constant][55] /* ty=Tensor[(420, 8), uint8] */, dtype="uint8") /* ty=Tensor[(420, 8), uint8] */;
  %850 = reshape(%848, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), uint8] */;
  %851 = reshape(%849, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), uint8] */;
  %852 = cast(meta[relay.Constant][56] /* ty=Tensor[(364), float32] */, dtype="float32") /* ty=Tensor[(364), float32] */;
  %853 = reshape(%852, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), float32] */;
  %854 = @func_1577(%853) /* ty=(Tensor[(7, 4, 13), float32], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
  %855 = %854.0;
  %856 = cast(%855, dtype="float64") /* ty=Tensor[(7, 4, 13), float64] */;
  %857 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(364), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %858 = cast(meta[relay.Constant][56] /* ty=Tensor[(364), float32] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?), float64] */;
  %860 = bitwise_and(%835, %836) /* ty=Tensor[(15, 12, 2), int64] */;
  %861 = cast(%860, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %862 = reshape(%861, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
  %863 = @func_1542(%862) /* ty=(Tensor[(3, 8, 15), float32],) */;
  %864 = mod(%843, %844) /* ty=Tensor[(2, ?, 11), float64] */;
  %865 = %847.0;
  %866 = @func_807(%850, %851) /* ty=Tensor[(16, 15, 14), uint8] */;
  %867 = floor_divide(%858, %859) /* ty=Tensor[(364), float64] */;
  %868 = %863.0;
  (%860, %864, %865, %866, meta[relay.Constant][55] /* ty=Tensor[(420, 8), uint8] */, %867, %868)
}

def @func_7053(%var_7033: Tensor[(9, 4), float32]) -> (Tensor[(3, 8, 15), float64], Tensor[(12, 3, 13), float32], Tensor[(9, 4), float32], Tensor[(234, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(1, 22), float32], Tensor[(364), float64]) {
  %869 = cast(%var_7033, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
  %870 = cast(meta[relay.Constant][57] /* ty=Tensor[(234, 2), float32] */, dtype="float32") /* ty=Tensor[(234, 2), float32] */;
  %871 = reshape(%869, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), float32] */;
  %872 = reshape(%870, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float32] */;
  %873 = @func_3199(%871, %872) /* ty=(Tensor[(12, 3, 13), float32],) */;
  %874 = cast(meta[relay.Constant][58] /* ty=Tensor[(1, 22), float32] */, dtype="float32") /* ty=Tensor[(1, 22), float32] */;
  %875 = reshape(%874, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
  %876 = @func_20(%875) /* ty=(Tensor[(2, 1, 11), float32],) */;
  %877 = @func_5612() /* ty=Tensor[(3, 8, 15), float64] */;
  %878 = cast(%877, dtype="int64") /* ty=Tensor[(3, 8, 15), int64] */;
  %879 = cast(%877, dtype="int64") /* ty=Tensor[(3, 8, 15), int64] */;
  %880 = cast(meta[relay.Constant][58] /* ty=Tensor[(1, 22), float32] */, dtype="float32") /* ty=Tensor[(1, 22), float32] */;
  %881 = reshape(%878, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %882 = reshape(%879, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %883 = reshape(%880, newshape=[11, 2]) /* ty=Tensor[(11, 2), float32] */;
  %884 = @func_2097(%881, %882, %883) /* ty=(Tensor[(15, 12, 2), int64], Tensor[(2, ?, 11), float64], Tensor[(3, 8, 15), float32], Tensor[(16, 15, 14), uint8], Tensor[(420, 8), uint8], Tensor[(364), float64], Tensor[(3, 8, 15), float32]) */;
  %885 = %873.0;
  %886 = %876.0;
  %887 = %884.5;
  (%877, %885, %var_7033, meta[relay.Constant][57] /* ty=Tensor[(234, 2), float32] */, %886, meta[relay.Constant][58] /* ty=Tensor[(1, 22), float32] */, %887)
}

def @func_8872() -> (Tensor[(54), float32], Tensor[(14, 11, 10), float64], Tensor[(14, 11, 10), uint16]) {
  %888 = @func_6672() /* ty=(Tensor[(1008), float64], Tensor[(54), float32], Tensor[(150), uint32]) */;
  %889 = @func_4526() /* ty=(Tensor[(14, 11, 10), float64], Tensor[(3, 8, 15), float32], Tensor[(36, 10), float32]) */;
  %890 = %888.1;
  %891 = %889.0;
  %892 = @func_7992() /* ty=Tensor[(14, 11, 10), uint16] */;
  (%890, %891, %892)
}

def @func_3199(%var_3179: Tensor[(12, 3, 1), float32], %var_3180: Tensor[(12, 3, 13), float32]) -> (Tensor[(12, 3, 13), float32],) {
  %893 = cast(%var_3179, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
  %894 = cast(%var_3180, dtype="float32") /* ty=Tensor[(12, 3, 13), float32] */;
  %895 = floor_divide(%893, %894) /* ty=Tensor[(12, 3, 13), float32] */;
  (%895,)
}

def @func_7770(%var_7765: Tensor[(1125), float64]) -> (Tensor[(3, 2, 15), bool], Tensor[(1125), bool]) {
  %896 = @func_7094() /* ty=(Tensor[(3, 2, 15), bool], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
  %897 = @func_6179() /* ty=Tensor[(1125), float64] */;
  %898 = cast(%var_7765, dtype="bool") /* ty=Tensor[(1125), bool] */;
  %899 = shape_of(%897, dtype="int32") /* ty=Tensor[(1), int32] */;
  %900 = cast(%897, dtype="bool") /* ty=Tensor[(1125), bool] */;
  %901 = dyn.reshape(%898, %899, newshape=[]) /* ty=Tensor[(?), bool] */;
  %902 = %896.0;
  %903 = less(%900, %901) /* ty=Tensor[(1125), bool] */;
  (%902, %903)
}

def @func_3905(%var_3886: Tensor[(5, 10, 5), bool]) -> (Tensor[(5, 10, 5), bool], Tensor[(12, 3, 13), float32], Tensor[(36), float32], Tensor[(234, 2), float32]) {
  %904 = cast(%var_3886, dtype="bool") /* ty=Tensor[(5, 10, 5), bool] */;
  %905 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(5, 10, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %906 = cast(meta[relay.Constant][59] /* ty=Tensor[(5, 10, 5), bool] */, dtype="bool") /* ty=Tensor[(5, 10, 5), bool] */;
  %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %908 = cast(meta[relay.Constant][60] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %909 = cast(meta[relay.Constant][61] /* ty=Tensor[(234, 2), float32] */, dtype="float32") /* ty=Tensor[(234, 2), float32] */;
  %910 = reshape(%908, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), float32] */;
  %911 = reshape(%909, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float32] */;
  %912 = @func_3199(%910, %911) /* ty=(Tensor[(12, 3, 13), float32],) */;
  %913 = logical_or(%906, %907) /* ty=Tensor[(5, 10, 5), bool] */;
  %914 = %912.0;
  (%913, %914, meta[relay.Constant][60] /* ty=Tensor[(36), float32] */, meta[relay.Constant][61] /* ty=Tensor[(234, 2), float32] */)
}

def @func_7280(%var_7253: Tensor[(14, 11, 10), uint16]) -> (Tensor[(14, 11, 10), int8], Tensor[(3, 8, 15), float64]) {
  %915 = @func_7094() /* ty=(Tensor[(3, 2, 15), bool], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
  %916 = %915.1;
  %917 = cast(%var_7253, dtype="int8") /* ty=Tensor[(14, 11, 10), int8] */;
  %918 = shape_of(%916, dtype="int32") /* ty=Tensor[(3), int32] */;
  %919 = cast(%916, dtype="int8") /* ty=Tensor[(14, 11, 10), int8] */;
  %920 = dyn.reshape(%917, %918, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %921 = logical_xor(%919, %920) /* ty=Tensor[(14, 11, 10), int8] */;
  %922 = @func_5682() /* ty=Tensor[(3, 8, 15), float64] */;
  (%921, %922)
}

def @func_9442() -> Tensor[(14, 11, 10), float32] {
  %923 = @func_6541() /* ty=(Tensor[(14, 11, 10), float32],) */;
  %923.0
}

def @func_4453() -> (Tensor[(54), float32], Tensor[(14, 11, 10), int16], Tensor[(6, 3, 3), float64], Tensor[(600), int32], Tensor[(45, 2), float64], Tensor[(600), int32]) {
  %924 = @func_4335() /* ty=Tensor[(14, 11, 10), uint16] */;
  %925 = cast(meta[relay.Constant][63] /* ty=Tensor[(14, 11, 10), uint16] */, dtype="int16") /* ty=Tensor[(14, 11, 10), int16] */;
  %926 = shape_of(%924, dtype="int32") /* ty=Tensor[(3), int32] */;
  %927 = cast(%924, dtype="int16") /* ty=Tensor[(14, 11, 10), int16] */;
  %928 = dyn.reshape(%925, %926, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %929 = cast(meta[relay.Constant][62] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %930 = reshape(%929, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
  %931 = @func_1621(%930) /* ty=(Tensor[(6, 3, 3), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32]) */;
  %932 = %931.0;
  %933 = cast(%932, dtype="float64") /* ty=Tensor[(6, 3, 3), float64] */;
  %934 = cast(meta[relay.Constant][64] /* ty=Tensor[(45, 2), float64] */, dtype="float64") /* ty=Tensor[(45, 2), float64] */;
  %935 = cast(meta[relay.Constant][65] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
  %936 = reshape(%934, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), float64] */;
  %937 = reshape(%935, newshape=[600]) /* ty=Tensor[(600), int32] */;
  %938 = @func_3160(%936, %937) /* ty=(Tensor[(15, 8, 5), bool], Tensor[(600), int32], Tensor[(15, 2, 3), float64]) */;
  %939 = maximum(%927, %928) /* ty=Tensor[(14, 11, 10), int16] */;
  %940 = asinh(%933) /* ty=Tensor[(6, 3, 3), float64] */;
  %941 = %938.1;
  (meta[relay.Constant][62] /* ty=Tensor[(54), float32] */, %939, %940, %941, meta[relay.Constant][64] /* ty=Tensor[(45, 2), float64] */, meta[relay.Constant][65] /* ty=Tensor[(600), int32] */)
}

def @func_7737() -> Tensor[(3, 8, 15), float32] {
  %942 = @func_5642() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) */;
  %942.1
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5044() -> (Tensor[(14, 11, 10), uint16],) {
  @func_5042() /* ty=(Tensor[(14, 11, 10), uint16],) */
}

def @func_5353(%var_5350: Tensor[(468), float32], %var_5351: Tensor[(280), float64], %var_5352: Tensor[(13, 6), float32]) -> (Tensor[(3, 8, 15), float64], Tensor[(15, 3, 9), float32], Tensor[(36), float32], Tensor[(468), float32], Tensor[(280), float64], Tensor[(3360), uint8], Tensor[(13, 6), float32], Tensor[(840, 4), uint8], Tensor[(20, 4), float64], Tensor[(5, 10, 5), bool], Tensor[(250, 1), bool]) {
  %24 = fn (%var_5299: Tensor[(468), float32], %var_5300: Tensor[(280), float64], %var_5319: Tensor[(13, 6), float32]) -> (Tensor[(3, 8, 15), float64], Tensor[(15, 3, 9), float32], Tensor[(36), float32], Tensor[(468), float32], Tensor[(280), float64], Tensor[(3360), uint8], Tensor[(13, 6), float32], Tensor[(840, 4), uint8], Tensor[(20, 4), float64], Tensor[(5, 10, 5), bool], Tensor[(250, 1), bool]) {
    %0 = @func_4633() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %2 = cast(%var_5299, dtype="float32") /* ty=Tensor[(468), float32] */;
    %3 = cast(%var_5300, dtype="float64") /* ty=Tensor[(280), float64] */;
    %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(20, 4), float64] */, dtype="float64") /* ty=Tensor[(20, 4), float64] */;
    %5 = reshape(%1, newshape=[9, 4]) /* ty=Tensor[(9, 4), float32] */;
    %6 = reshape(%2, newshape=[468]) /* ty=Tensor[(468), float32] */;
    %7 = reshape(%3, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), float64] */;
    %8 = reshape(%4, newshape=[4, 20]) /* ty=Tensor[(4, 20), float64] */;
    %9 = @func_4241(%5, %6, %7, %8) /* ty=(Tensor[(12, 3, 13), float32], Tensor[(9, 4), float32], Tensor[(468), float32], Tensor[(15, 3, 9), float32], Tensor[(3, 135), float32], Tensor[(3360), uint8], Tensor[(5, 8, 7), bool], Tensor[(1, 5, 16), float32], Tensor[(4, 20), float64], Tensor[(3, 16, 7), uint8], Tensor[(1, 336), uint8]) */;
    %10 = cast(%var_5319, dtype="float32") /* ty=Tensor[(13, 6), float32] */;
    %11 = cast(meta[relay.Constant][2] /* ty=Tensor[(840, 4), uint8] */, dtype="uint8") /* ty=Tensor[(840, 4), uint8] */;
    %12 = reshape(%10, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), float32] */;
    %13 = reshape(%11, newshape=[3360]) /* ty=Tensor[(3360), uint8] */;
    %14 = @func_3757(%12, %13) /* ty=(Tensor[(6, 13, 1), float32], Tensor[(16, 15, 14), uint8], Tensor[(3360), uint8]) */;
    %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(20, 4), float64] */, dtype="float64") /* ty=Tensor[(20, 4), float64] */;
    %16 = cast(meta[relay.Constant][3] /* ty=Tensor[(250, 1), bool] */, dtype="bool") /* ty=Tensor[(250, 1), bool] */;
    %17 = reshape(%16, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), bool] */;
    %18 = @func_3905(%17) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(12, 3, 13), float32], Tensor[(36), float32], Tensor[(234, 2), float32]) */;
    %19 = %0.0;
    %20 = %9.3;
    %21 = %14.2;
    %22 = asinh(%15) /* ty=Tensor[(20, 4), float64] */;
    %23 = %18.0;
    (%19, %20, meta[relay.Constant][0] /* ty=Tensor[(36), float32] */, %var_5299, %var_5300, %21, %var_5319, meta[relay.Constant][2] /* ty=Tensor[(840, 4), uint8] */, %22, %23, meta[relay.Constant][3] /* ty=Tensor[(250, 1), bool] */)
  };
  %24(%var_5350, %var_5351, %var_5352) /* ty=(Tensor[(3, 8, 15), float64], Tensor[(15, 3, 9), float32], Tensor[(36), float32], Tensor[(468), float32], Tensor[(280), float64], Tensor[(3360), uint8], Tensor[(13, 6), float32], Tensor[(840, 4), uint8], Tensor[(20, 4), float64], Tensor[(5, 10, 5), bool], Tensor[(250, 1), bool]) */
}

def @func_4635() -> (Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) {
  @func_4633() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) */
}

def @func_5612() -> Tensor[(3, 8, 15), float64] {
  %25 = @func_5579() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %25.0
}

def @func_7095() -> (Tensor[(3, 2, 15), bool], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) {
  %37 = fn () -> (Tensor[(3, 2, 15), bool], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) {
    %26 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 2, 15), bool] */, dtype="bool") /* ty=Tensor[(3, 2, 15), bool] */;
    %27 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(3, 2, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %28 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 2, 15), bool] */, dtype="bool") /* ty=Tensor[(3, 2, 15), bool] */;
    %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %30 = @func_6604() /* ty=(Tensor[(14, 11, 10), uint16],) */;
    %31 = cast(meta[relay.Constant][6] /* ty=Tensor[(22), float32] */, dtype="float32") /* ty=Tensor[(22), float32] */;
    %32 = reshape(%31, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
    %33 = @func_20(%32) /* ty=(Tensor[(2, 1, 11), float32],) */;
    %34 = logical_and(%28, %29) /* ty=Tensor[(3, 2, 15), bool] */;
    %35 = %30.0;
    %36 = %33.0;
    (%34, %35, %36, meta[relay.Constant][6] /* ty=Tensor[(22), float32] */)
  };
  %37() /* ty=(Tensor[(3, 2, 15), bool], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */
}

def @func_4730() -> Tensor[(14, 11, 10), float64] {
  %38 = @func_4453() /* ty=(Tensor[(54), float32], Tensor[(14, 11, 10), int16], Tensor[(6, 3, 3), float64], Tensor[(600), int32], Tensor[(45, 2), float64], Tensor[(600), int32]) */;
  %39 = %38.1;
  %40 = cast(%39, dtype="float64") /* ty=Tensor[(14, 11, 10), float64] */;
  sigmoid(%40) /* ty=Tensor[(14, 11, 10), float64] */
}

def @func_4732() -> Tensor[(14, 11, 10), float64] {
  @func_4730() /* ty=Tensor[(14, 11, 10), float64] */
}

def @func_1542(%var_1526: Tensor[(3, 8, 15), float32]) -> (Tensor[(3, 8, 15), float32],) {
  %41 = cast(%var_1526, dtype="float32") /* ty=Tensor[(3, 8, 15), float32] */;
  %42 = log10(%41) /* ty=Tensor[(3, 8, 15), float32] */;
  (%42,)
}

def @func_4683(%var_4680: Tensor[(14, 11, 10), uint16], %var_4681: Tensor[(78), float32], %var_4682: Tensor[(3360), uint8]) -> (Tensor[(14, 11, 10), bool], Tensor[(14, 11, 10), float64], Tensor[(6, 13, 1), float32], Tensor[(78), float32], Tensor[(3360), uint8]) {
  @func_4678(%var_4680, %var_4681, %var_4682) /* ty=(Tensor[(14, 11, 10), bool], Tensor[(14, 11, 10), float64], Tensor[(6, 13, 1), float32], Tensor[(78), float32], Tensor[(3360), uint8]) */
}

def @func_5502() -> (Tensor[(3, 8, 15), float64],) {
  @func_5500() /* ty=(Tensor[(3, 8, 15), float64],) */
}

def @func_9442() -> Tensor[(14, 11, 10), float32] {
  %43 = @func_6541() /* ty=(Tensor[(14, 11, 10), float32],) */;
  %43.0
}

def @func_6096() -> Tensor[(36, 10), float32] {
  %44 = @func_4526() /* ty=(Tensor[(14, 11, 10), float64], Tensor[(3, 8, 15), float32], Tensor[(36, 10), float32]) */;
  %44.2
}

def @func_7283(%var_7281: Tensor[(14, 11, 10), uint16]) -> (Tensor[(14, 11, 10), int8], Tensor[(3, 8, 15), float64]) {
  @func_7280(%var_7281) /* ty=(Tensor[(14, 11, 10), int8], Tensor[(3, 8, 15), float64]) */
}

def @func_7888() -> (Tensor[(14, 11, 10), uint16],) {
  %45 = @func_5042() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %46 = %45.0;
  (%46,)
}

def @func_8709(%var_8707: Tensor[(22, 1), float32]) -> (Tensor[(3, 8, 15), float32], Tensor[(15, 12, 2), int64], Tensor[(22, 1), float32]) {
  @func_8706(%var_8707) /* ty=(Tensor[(3, 8, 15), float32], Tensor[(15, 12, 2), int64], Tensor[(22, 1), float32]) */
}

def @func_5581() -> (Tensor[(3, 8, 15), float64],) {
  @func_5579() /* ty=(Tensor[(3, 8, 15), float64],) */
}

def @func_4783(%var_4781: Tensor[(15, 6, 15), int64], %var_4782: Tensor[(15, 6, 15), int64]) -> (Tensor[(13, 10, 1), float64], Tensor[(130), float64], Tensor[(6, 3, 3), float64], Tensor[(13, 10, 1), float64], Tensor[(14, 11, 10), uint16], Tensor[(15, 6, 15), bool], Tensor[(15, 12, 2), int64], Tensor[(360), int64], Tensor[(22), float32]) {
  @func_4779(%var_4781, %var_4782) /* ty=(Tensor[(13, 10, 1), float64], Tensor[(130), float64], Tensor[(6, 3, 3), float64], Tensor[(13, 10, 1), float64], Tensor[(14, 11, 10), uint16], Tensor[(15, 6, 15), bool], Tensor[(15, 12, 2), int64], Tensor[(360), int64], Tensor[(22), float32]) */
}

def @func_6281(%var_6272: Tensor[(1, 14, 16), float32]) -> (Tensor[(1, 14, 16), float32], Tensor[(14, 11, 10), uint16]) {
  %47 = cast(%var_6272, dtype="float32") /* ty=Tensor[(1, 14, 16), float32] */;
  %48 = @func_5801() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %49 = atanh(%47) /* ty=Tensor[(1, 14, 16), float32] */;
  %50 = %48.0;
  (%49, %50)
}

def @func_7992() -> Tensor[(14, 11, 10), uint16] {
  %51 = @func_7224() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %51.0
}

def @func_4491(%var_4489: Tensor[(16, 7, 16), float64], %var_4490: Tensor[(16, 7, 16), float64]) -> (Tensor[(16, 7, 16), int32],) {
  %59 = fn (%var_4472: Tensor[(16, 7, 16), float64], %var_4482: Tensor[(16, 7, 16), float64]) -> (Tensor[(16, 7, 16), int32],) {
    %52 = cast(%var_4472, dtype="float64") /* ty=Tensor[(16, 7, 16), float64] */;
    %53 = sin(%52) /* ty=Tensor[(16, 7, 16), float64] */;
    %54 = cast(%var_4482, dtype="int32") /* ty=Tensor[(16, 7, 16), int32] */;
    %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
    %56 = cast(%53, dtype="int32") /* ty=Tensor[(16, 7, 16), int32] */;
    %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %58 = bitwise_xor(%56, %57) /* ty=Tensor[(16, 7, 16), int32] */;
    (%58,)
  };
  %59(%var_4489, %var_4490) /* ty=(Tensor[(16, 7, 16), int32],) */
}

def @func_2877(%var_2876: Tensor[(13, 10, 1), float64]) -> (Tensor[(13, 10, 1), float64],) {
  %62 = fn (%var_2856: Tensor[(13, 10, 1), float64]) -> (Tensor[(13, 10, 1), float64],) {
    %60 = cast(%var_2856, dtype="float64") /* ty=Tensor[(13, 10, 1), float64] */;
    %61 = acos(%60) /* ty=Tensor[(13, 10, 1), float64] */;
    (%61,)
  };
  %62(%var_2876) /* ty=(Tensor[(13, 10, 1), float64],) */
}

def @func_8628(%var_8626: float32) -> (Tensor[(3, 8, 15), float64], Tensor[(9, 11, 15), bool], float32) {
  @func_8625(%var_8626) /* ty=(Tensor[(3, 8, 15), float64], Tensor[(9, 11, 15), bool], float32) */
}

def @func_3796(%var_3793: Tensor[(12, 2, 5), float64]) -> (Tensor[(12, 2, 5), float64],) {
  %63 = cast(%var_3793, dtype="float64") /* ty=Tensor[(12, 2, 5), float64] */;
  %64 = sqrt(%63) /* ty=Tensor[(12, 2, 5), float64] */;
  (%64,)
}

def @func_7135() -> (Tensor[(14, 11, 10), float64],) {
  %66 = fn () -> (Tensor[(14, 11, 10), float64],) {
    %65 = @func_4730() /* ty=Tensor[(14, 11, 10), float64] */;
    (%65,)
  };
  %66() /* ty=(Tensor[(14, 11, 10), float64],) */
}

def @func_6078() -> (Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), uint16]) {
  %67 = @func_5042() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %68 = @func_6006() /* ty=Tensor[(14, 11, 10), uint16] */;
  %69 = %67.0;
  (%68, %69)
}

def @func_4527() -> (Tensor[(14, 11, 10), float64], Tensor[(3, 8, 15), float32], Tensor[(36, 10), float32]) {
  %79 = fn () -> (Tensor[(14, 11, 10), float64], Tensor[(3, 8, 15), float32], Tensor[(36, 10), float32]) {
    %70 = @func_4335() /* ty=Tensor[(14, 11, 10), uint16] */;
    %71 = cast(%70, dtype="float32") /* ty=Tensor[(14, 11, 10), float32] */;
    %72 = asinh(%71) /* ty=Tensor[(14, 11, 10), float32] */;
    %73 = cast(%72, dtype="float64") /* ty=Tensor[(14, 11, 10), float64] */;
    %74 = cast(meta[relay.Constant][7] /* ty=Tensor[(36, 10), float32] */, dtype="float32") /* ty=Tensor[(36, 10), float32] */;
    %75 = reshape(%74, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
    %76 = @func_1542(%75) /* ty=(Tensor[(3, 8, 15), float32],) */;
    %77 = cos(%73) /* ty=Tensor[(14, 11, 10), float64] */;
    %78 = %76.0;
    (%77, %78, meta[relay.Constant][7] /* ty=Tensor[(36, 10), float32] */)
  };
  %79() /* ty=(Tensor[(14, 11, 10), float64], Tensor[(3, 8, 15), float32], Tensor[(36, 10), float32]) */
}

def @func_9556() -> (Tensor[(12, 30), float32], Tensor[(360), float32], Tensor[(1, 672), int16]) {
  @func_9554() /* ty=(Tensor[(12, 30), float32], Tensor[(360), float32], Tensor[(1, 672), int16]) */
}

def @func_6247(%var_6209: Tensor[(672), int16]) -> (Tensor[(14, 11, 10), uint16], Tensor[(11, 2), float32], Tensor[(672), int16], Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(3, 8, 15), float32], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32]) {
  %80 = @func_6078() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), uint16]) */;
  %81 = cast(%var_6209, dtype="int16") /* ty=Tensor[(672), int16] */;
  %82 = cast(%var_6209, dtype="int16") /* ty=Tensor[(672), int16] */;
  %83 = cast(%var_6209, dtype="float32") /* ty=Tensor[(672), float32] */;
  %84 = reshape(%81, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int16] */;
  %85 = reshape(%82, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int16] */;
  %86 = reshape(%83, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %87 = @func_477(%84, %85, %86) /* ty=(Tensor[(2, 1, 11), float32], Tensor[(11, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(2, 1, 11), float32], Tensor[(6, 8, 14), bool], Tensor[(2, 1, 11), float32]) */;
  %88 = cast(meta[relay.Constant][8] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %89 = reshape(%88, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
  %90 = @func_1542(%89) /* ty=(Tensor[(3, 8, 15), float32],) */;
  %91 = @func_5642() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) */;
  %92 = @func_4878() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %93 = %87.1;
  %94 = cast(%93, dtype="float32") /* ty=Tensor[(11, 2), float32] */;
  %95 = reshape(%94, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
  %96 = @func_20(%95) /* ty=(Tensor[(2, 1, 11), float32],) */;
  %97 = %80.0;
  %98 = %90.0;
  %99 = %91.1;
  %100 = %92.0;
  %101 = %96.0;
  (%97, %93, %var_6209, %98, meta[relay.Constant][8] /* ty=Tensor[(360), float32] */, %99, %100, %101)
}

def @func_810(%var_808: Tensor[(16, 15, 14), uint8], %var_809: Tensor[(16, 15, 14), uint8]) -> Tensor[(16, 15, 14), uint8] {
  %106 = fn (%var_799: Tensor[(16, 15, 14), uint8], %var_800: Tensor[(16, 15, 14), uint8]) -> Tensor[(16, 15, 14), uint8] {
    %102 = cast(%var_800, dtype="uint8") /* ty=Tensor[(16, 15, 14), uint8] */;
    %103 = shape_of(%var_799, dtype="int32") /* ty=Tensor[(3), int32] */;
    %104 = cast(%var_799, dtype="uint8") /* ty=Tensor[(16, 15, 14), uint8] */;
    %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    maximum(%104, %105) /* ty=Tensor[(16, 15, 14), uint8] */
  };
  %106(%var_808, %var_809) /* ty=Tensor[(16, 15, 14), uint8] */
}

def @func_5803() -> (Tensor[(14, 11, 10), uint16],) {
  @func_5801() /* ty=(Tensor[(14, 11, 10), uint16],) */
}

def @func_2386(%var_2376: Tensor[(4, 15, 2), float64]) -> (Tensor[(4, 15, 2), float64],) {
  %107 = cast(%var_2376, dtype="float64") /* ty=Tensor[(4, 15, 2), float64] */;
  %108 = rsqrt(%107) /* ty=Tensor[(4, 15, 2), float64] */;
  (%108,)
}

def @func_4963(%var_4961: Tensor[(1125), uint16], %var_4962: Tensor[(150), uint32]) -> (Tensor[(1125), bool], Tensor[(360), float32], Tensor[(150), uint32], Tensor[(1125), int64], Tensor[(1125), float32], Tensor[(15, 5, 15), bool], Tensor[(2, ?, 11), float64], Tensor[(22), float32]) {
  %149 = fn (%var_4903: Tensor[(1125), uint16], %var_4917: Tensor[(150), uint32]) -> (Tensor[(1125), bool], Tensor[(360), float32], Tensor[(150), uint32], Tensor[(1125), int64], Tensor[(1125), float32], Tensor[(15, 5, 15), bool], Tensor[(2, ?, 11), float64], Tensor[(22), float32]) {
    %109 = @func_4633() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) */;
    %110 = %109.2;
    %111 = cast(%var_4903, dtype="bool") /* ty=Tensor[(1125), bool] */;
    %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(1), int32] */;
    %113 = cast(%110, dtype="bool") /* ty=Tensor[(1125), bool] */;
    %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?), bool] */;
    %115 = cast(%var_4917, dtype="uint32") /* ty=Tensor[(150), uint32] */;
    %116 = cast(%var_4917, dtype="uint32") /* ty=Tensor[(150), uint32] */;
    %117 = reshape(%115, newshape=[5, 6, 5]) /* ty=Tensor[(5, 6, 5), uint32] */;
    %118 = reshape(%116, newshape=[5, 6, 5]) /* ty=Tensor[(5, 6, 5), uint32] */;
    %119 = @func_3311(%117, %118) /* ty=(Tensor[(5, 6, 5), uint32], Tensor[(360), float32], Tensor[(54), float32]) */;
    %120 = cast(%var_4903, dtype="float64") /* ty=Tensor[(1125), float64] */;
    %121 = sigmoid(%120) /* ty=Tensor[(1125), float64] */;
    %122 = cast(%110, dtype="int64") /* ty=Tensor[(1125), int64] */;
    %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(1), int32] */;
    %124 = cast(%121, dtype="int64") /* ty=Tensor[(1125), int64] */;
    %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?), int64] */;
    %126 = cast(%121, dtype="float64") /* ty=Tensor[(1125), float64] */;
    %127 = erf(%126) /* ty=Tensor[(1125), float64] */;
    %128 = cast(%127, dtype="float32") /* ty=Tensor[(1125), float32] */;
    %129 = equal(%113, %114) /* ty=Tensor[(1125), bool] */;
    %130 = cast(%129, dtype="uint16") /* ty=Tensor[(1125), uint16] */;
    %131 = logical_xor(%124, %125) /* ty=Tensor[(1125), int64] */;
    %132 = cast(%131, dtype="uint16") /* ty=Tensor[(1125), uint16] */;
    %133 = cast(%129, dtype="uint16") /* ty=Tensor[(1125), uint16] */;
    %134 = reshape(%130, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), uint16] */;
    %135 = reshape(%132, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), uint16] */;
    %136 = reshape(%133, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), uint16] */;
    %137 = @func_2258(%134, %135, %136) /* ty=(Tensor[(15, 5, 15), uint16], Tensor[(15, 5, 15), bool]) */;
    %138 = %119.1;
    %139 = cast(%138, dtype="int64") /* ty=Tensor[(360), int64] */;
    %140 = cast(%138, dtype="int64") /* ty=Tensor[(360), int64] */;
    %141 = cast(meta[relay.Constant][9] /* ty=Tensor[(22), float32] */, dtype="float32") /* ty=Tensor[(22), float32] */;
    %142 = reshape(%139, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
    %143 = reshape(%140, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
    %144 = reshape(%141, newshape=[11, 2]) /* ty=Tensor[(11, 2), float32] */;
    %145 = @func_2097(%142, %143, %144) /* ty=(Tensor[(15, 12, 2), int64], Tensor[(2, ?, 11), float64], Tensor[(3, 8, 15), float32], Tensor[(16, 15, 14), uint8], Tensor[(420, 8), uint8], Tensor[(364), float64], Tensor[(3, 8, 15), float32]) */;
    %146 = exp(%128) /* ty=Tensor[(1125), float32] */;
    %147 = %137.1;
    %148 = %145.1;
    (%129, %138, %var_4917, %131, %146, %147, %148, meta[relay.Constant][9] /* ty=Tensor[(22), float32] */)
  };
  %149(%var_4961, %var_4962) /* ty=(Tensor[(1125), bool], Tensor[(360), float32], Tensor[(150), uint32], Tensor[(1125), int64], Tensor[(1125), float32], Tensor[(15, 5, 15), bool], Tensor[(2, ?, 11), float64], Tensor[(22), float32]) */
}

def @func_7126(%var_7125: Tensor[(3, 8, 15), float64]) -> Tensor[(3, 8, 15), float32] {
  %156 = fn (%var_7117: Tensor[(3, 8, 15), float64]) -> Tensor[(3, 8, 15), float32] {
    %150 = @func_5500() /* ty=(Tensor[(3, 8, 15), float64],) */;
    %151 = %150.0;
    %152 = cast(%var_7117, dtype="float32") /* ty=Tensor[(3, 8, 15), float32] */;
    %153 = shape_of(%151, dtype="int32") /* ty=Tensor[(3), int32] */;
    %154 = cast(%151, dtype="float32") /* ty=Tensor[(3, 8, 15), float32] */;
    %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    multiply(%154, %155) /* ty=Tensor[(3, 8, 15), float32] */
  };
  %156(%var_7125) /* ty=Tensor[(3, 8, 15), float32] */
}

def @func_4857() -> (Tensor[(14, 11, 10), uint16], Tensor[(3, 16, 7), uint8], Tensor[(1008), float64], Tensor[(168, 2), uint8]) {
  @func_4855() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 16, 7), uint8], Tensor[(1008), float64], Tensor[(168, 2), uint8]) */
}

def @func_7737() -> Tensor[(3, 8, 15), float32] {
  %157 = @func_5642() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) */;
  %157.1
}

def @func_7994() -> Tensor[(14, 11, 10), uint16] {
  @func_7992() /* ty=Tensor[(14, 11, 10), uint16] */
}

def @func_9510(%var_9508: Tensor[(54), float32]) -> (Tensor[(3, 8, 15), float64], Tensor[(360), float32], Tensor[(54), float32], Tensor[(14, 11, 10), uint16]) {
  @func_9507(%var_9508) /* ty=(Tensor[(3, 8, 15), float64], Tensor[(360), float32], Tensor[(54), float32], Tensor[(14, 11, 10), uint16]) */
}

def @func_9390() -> (Tensor[(150), uint32],) {
  @func_9388() /* ty=(Tensor[(150), uint32],) */
}

def @func_9257() -> Tensor[(3, 2, 15), bool] {
  %159 = fn () -> Tensor[(3, 2, 15), bool] {
    %158 = @func_7094() /* ty=(Tensor[(3, 2, 15), bool], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
    %158.0
  };
  %159() /* ty=Tensor[(3, 2, 15), bool] */
}

def @func_4696() -> (Tensor[(3, 8, 15), float64],) {
  %162 = fn () -> (Tensor[(3, 8, 15), float64],) {
    %160 = @func_4633() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) */;
    %161 = %160.0;
    (%161,)
  };
  %162() /* ty=(Tensor[(3, 8, 15), float64],) */
}

def @func_8324(%var_8323: Tensor[(630), float64]) -> (Tensor[(14, 11, 10), uint16], Tensor[(630), float64], Tensor[(15, 12, 2), int64], Tensor[(360), float64], Tensor[(5, 9, 14), float32], Tensor[(3, 8, 15), float64], Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), uint16], Tensor[(5, 9, 14), float64]) {
  %184 = fn (%var_8224: Tensor[(630), float64]) -> (Tensor[(14, 11, 10), uint16], Tensor[(630), float64], Tensor[(15, 12, 2), int64], Tensor[(360), float64], Tensor[(5, 9, 14), float32], Tensor[(3, 8, 15), float64], Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), uint16], Tensor[(5, 9, 14), float64]) {
    %163 = @func_6078() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), uint16]) */;
    %164 = cast(meta[relay.Constant][10] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %165 = reshape(%164, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float64] */;
    %166 = @func_5946(%165) /* ty=(Tensor[(3, 8, 15), bool], Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), float64], Tensor[(15, 12, 2), int64], Tensor[(1350), int64]) */;
    %167 = cast(%var_8224, dtype="float64") /* ty=Tensor[(630), float64] */;
    %168 = reshape(%167, newshape=[5, 9, 14]) /* ty=Tensor[(5, 9, 14), float64] */;
    %169 = @func_5470(%168) /* ty=Tensor[(5, 9, 14), float64] */;
    %170 = cast(%169, dtype="float32") /* ty=Tensor[(5, 9, 14), float32] */;
    %171 = sinh(%170) /* ty=Tensor[(5, 9, 14), float32] */;
    %172 = cast(%171, dtype="float32") /* ty=Tensor[(5, 9, 14), float32] */;
    %173 = @func_5579() /* ty=(Tensor[(3, 8, 15), float64],) */;
    %174 = @func_4695() /* ty=(Tensor[(3, 8, 15), float64],) */;
    %175 = @func_8051() /* ty=(Tensor[(14, 11, 10), uint16],) */;
    %176 = cast(%171, dtype="float64") /* ty=Tensor[(5, 9, 14), float64] */;
    %177 = %163.0;
    %178 = %166.3;
    %179 = cos(%172) /* ty=Tensor[(5, 9, 14), float32] */;
    %180 = %173.0;
    %181 = %174.0;
    %182 = %175.0;
    %183 = log2(%176) /* ty=Tensor[(5, 9, 14), float64] */;
    (%177, %var_8224, %178, meta[relay.Constant][10] /* ty=Tensor[(360), float64] */, %179, %180, %181, %182, %183)
  };
  %184(%var_8323) /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(630), float64], Tensor[(15, 12, 2), int64], Tensor[(360), float64], Tensor[(5, 9, 14), float32], Tensor[(3, 8, 15), float64], Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), uint16], Tensor[(5, 9, 14), float64]) */
}

def @func_6353() -> (Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float64]) {
  %190 = fn () -> (Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float64]) {
    %185 = @func_4878() /* ty=(Tensor[(14, 11, 10), uint16],) */;
    %186 = @func_5500() /* ty=(Tensor[(3, 8, 15), float64],) */;
    %187 = @func_5612() /* ty=Tensor[(3, 8, 15), float64] */;
    %188 = %185.0;
    %189 = %186.0;
    (%187, %188, %189)
  };
  %190() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float64]) */
}

def @func_8873() -> (Tensor[(54), float32], Tensor[(14, 11, 10), float64], Tensor[(14, 11, 10), uint16]) {
  %196 = fn () -> (Tensor[(54), float32], Tensor[(14, 11, 10), float64], Tensor[(14, 11, 10), uint16]) {
    %191 = @func_6672() /* ty=(Tensor[(1008), float64], Tensor[(54), float32], Tensor[(150), uint32]) */;
    %192 = @func_4526() /* ty=(Tensor[(14, 11, 10), float64], Tensor[(3, 8, 15), float32], Tensor[(36, 10), float32]) */;
    %193 = %191.1;
    %194 = %192.0;
    %195 = @func_7992() /* ty=Tensor[(14, 11, 10), uint16] */;
    (%193, %194, %195)
  };
  %196() /* ty=(Tensor[(54), float32], Tensor[(14, 11, 10), float64], Tensor[(14, 11, 10), uint16]) */
}

def @func_9122() -> Tensor[(14, 11, 10), float64] {
  %198 = fn () -> Tensor[(14, 11, 10), float64] {
    %197 = @func_8035() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), float64]) */;
    %197.1
  };
  %198() /* ty=Tensor[(14, 11, 10), float64] */
}

def @func_3252(%var_3251: Tensor[(8, 12, 9), uint32]) -> Tensor[(8, 12, 9), uint32] {
  %203 = fn (%var_3245: Tensor[(8, 12, 9), uint32]) -> Tensor[(8, 12, 9), uint32] {
    %199 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 12, 9), uint32] */, dtype="uint32") /* ty=Tensor[(8, 12, 9), uint32] */;
    %200 = shape_of(%var_3245, dtype="int32") /* ty=Tensor[(3), int32] */;
    %201 = cast(%var_3245, dtype="uint32") /* ty=Tensor[(8, 12, 9), uint32] */;
    %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    left_shift(%201, %202) /* ty=Tensor[(8, 12, 9), uint32] */
  };
  %203(%var_3251) /* ty=Tensor[(8, 12, 9), uint32] */
}

def @func_7772(%var_7771: Tensor[(1125), float64]) -> (Tensor[(3, 2, 15), bool], Tensor[(1125), bool]) {
  %212 = fn (%var_7765: Tensor[(1125), float64]) -> (Tensor[(3, 2, 15), bool], Tensor[(1125), bool]) {
    %204 = @func_7094() /* ty=(Tensor[(3, 2, 15), bool], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
    %205 = @func_6179() /* ty=Tensor[(1125), float64] */;
    %206 = cast(%var_7765, dtype="bool") /* ty=Tensor[(1125), bool] */;
    %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(1), int32] */;
    %208 = cast(%205, dtype="bool") /* ty=Tensor[(1125), bool] */;
    %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?), bool] */;
    %210 = %204.0;
    %211 = less(%208, %209) /* ty=Tensor[(1125), bool] */;
    (%210, %211)
  };
  %212(%var_7771) /* ty=(Tensor[(3, 2, 15), bool], Tensor[(1125), bool]) */
}

def @func_7852(%var_7847: Tensor[(2, 8, 13), uint64], %var_7848: Tensor[(2, 8, 13), uint64], %var_7849: Tensor[(1125), uint16], %var_7850: Tensor[(1, 150), uint32], %var_7851: Tensor[(2, 8, 13), bool]) -> (Tensor[(6, 3, 3), float32], Tensor[(54), float32], Tensor[(3, 8, 15), float64], Tensor[(360), float64], Tensor[(150), uint32], Tensor[(1125), uint16], Tensor[(1, 150), uint32], Tensor[(150), uint32], Tensor[(2, 8, 13), bool]) {
  %245 = fn (%var_7782: Tensor[(2, 8, 13), uint64], %var_7783: Tensor[(2, 8, 13), uint64], %var_7821: Tensor[(1125), uint16], %var_7822: Tensor[(1, 150), uint32], %var_7838: Tensor[(2, 8, 13), bool]) -> (Tensor[(6, 3, 3), float32], Tensor[(54), float32], Tensor[(3, 8, 15), float64], Tensor[(360), float64], Tensor[(150), uint32], Tensor[(1125), uint16], Tensor[(1, 150), uint32], Tensor[(150), uint32], Tensor[(2, 8, 13), bool]) {
    %213 = cast(meta[relay.Constant][12] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
    %214 = reshape(%213, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
    %215 = @func_1621(%214) /* ty=(Tensor[(6, 3, 3), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32]) */;
    %216 = cast(meta[relay.Constant][13] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %217 = reshape(%216, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float64] */;
    %218 = @func_5946(%217) /* ty=(Tensor[(3, 8, 15), bool], Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), float64], Tensor[(15, 12, 2), int64], Tensor[(1350), int64]) */;
    %219 = cast(%var_7821, dtype="uint16") /* ty=Tensor[(1125), uint16] */;
    %220 = cast(%var_7822, dtype="uint32") /* ty=Tensor[(1, 150), uint32] */;
    %221 = reshape(%219, newshape=[1125]) /* ty=Tensor[(1125), uint16] */;
    %222 = reshape(%220, newshape=[150]) /* ty=Tensor[(150), uint32] */;
    %223 = @func_4960(%221, %222) /* ty=(Tensor[(1125), bool], Tensor[(360), float32], Tensor[(150), uint32], Tensor[(1125), int64], Tensor[(1125), float32], Tensor[(15, 5, 15), bool], Tensor[(2, ?, 11), float64], Tensor[(22), float32]) */;
    %224 = cast(%var_7782, dtype="float64") /* ty=Tensor[(2, 8, 13), float64] */;
    %225 = cosh(%224) /* ty=Tensor[(2, 8, 13), float64] */;
    %226 = cast(%var_7783, dtype="uint64") /* ty=Tensor[(2, 8, 13), uint64] */;
    %227 = shape_of(%var_7782, dtype="int32") /* ty=Tensor[(3), int32] */;
    %228 = cast(%var_7782, dtype="uint64") /* ty=Tensor[(2, 8, 13), uint64] */;
    %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %230 = bitwise_xor(%228, %229) /* ty=Tensor[(2, 8, 13), uint64] */;
    %231 = cast(%230, dtype="bool") /* ty=Tensor[(2, 8, 13), bool] */;
    %232 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
    %233 = cast(%225, dtype="bool") /* ty=Tensor[(2, 8, 13), bool] */;
    %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %235 = greater(%233, %234) /* ty=Tensor[(2, 8, 13), bool] */;
    %236 = cast(%var_7838, dtype="bool") /* ty=Tensor[(2, 8, 13), bool] */;
    %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
    %238 = cast(%235, dtype="bool") /* ty=Tensor[(2, 8, 13), bool] */;
    %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %240 = %215.0;
    %241 = %218.1;
    %242 = %223.2;
    %243 = @func_7188() /* ty=Tensor[(150), uint32] */;
    %244 = equal(%238, %239) /* ty=Tensor[(2, 8, 13), bool] */;
    (%240, meta[relay.Constant][12] /* ty=Tensor[(54), float32] */, %241, meta[relay.Constant][13] /* ty=Tensor[(360), float64] */, %242, %var_7821, %var_7822, %243, %244)
  };
  %245(%var_7847, %var_7848, %var_7849, %var_7850, %var_7851) /* ty=(Tensor[(6, 3, 3), float32], Tensor[(54), float32], Tensor[(3, 8, 15), float64], Tensor[(360), float64], Tensor[(150), uint32], Tensor[(1125), uint16], Tensor[(1, 150), uint32], Tensor[(150), uint32], Tensor[(2, 8, 13), bool]) */
}

def @func_7188() -> Tensor[(150), uint32] {
  %246 = @func_6672() /* ty=(Tensor[(1008), float64], Tensor[(54), float32], Tensor[(150), uint32]) */;
  %246.2
}

def @func_4277() -> (Tensor[(14, 11, 10), uint16],) {
  %247 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 11, 10), uint16] */, dtype="uint16") /* ty=Tensor[(14, 11, 10), uint16] */;
  %248 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(14, 11, 10), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 11, 10), uint16] */, dtype="uint16") /* ty=Tensor[(14, 11, 10), uint16] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %251 = bitwise_xor(%249, %250) /* ty=Tensor[(14, 11, 10), uint16] */;
  (%251,)
}

def @func_9049(%var_9047: Tensor[(1125), uint16]) -> (Tensor[(14, 11, 10), uint16], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16], Tensor[(150), uint32], Tensor[(3, 8, 15), float64]) {
  @func_9046(%var_9047) /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16], Tensor[(150), uint32], Tensor[(3, 8, 15), float64]) */
}

def @func_9002() -> Tensor[(3, 8, 15), float64] {
  %253 = fn () -> Tensor[(3, 8, 15), float64] {
    %252 = @func_4633() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) */;
    %252.0
  };
  %253() /* ty=Tensor[(3, 8, 15), float64] */
}

def @func_2786(%var_2784: Tensor[(9, 16, 7), float64], %var_2785: Tensor[(24, 14), uint8]) -> (Tensor[(9, 16, 7), float64], Tensor[(3, 16, 7), uint8], Tensor[(24, 14), uint8], Tensor[(2, 1, 11), float32], Tensor[(672), int16]) {
  @func_2782(%var_2784, %var_2785) /* ty=(Tensor[(9, 16, 7), float64], Tensor[(3, 16, 7), uint8], Tensor[(24, 14), uint8], Tensor[(2, 1, 11), float32], Tensor[(672), int16]) */
}

def @func_1577(%var_1554: Tensor[(7, 4, 13), float32]) -> (Tensor[(7, 4, 13), float32], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) {
  %254 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 4, 13), float32] */, dtype="float32") /* ty=Tensor[(7, 4, 13), float32] */;
  %255 = shape_of(%var_1554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%var_1554, dtype="float32") /* ty=Tensor[(7, 4, 13), float32] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %258 = cast(meta[relay.Constant][17] /* ty=Tensor[(22), float32] */, dtype="float32") /* ty=Tensor[(22), float32] */;
  %259 = reshape(%258, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
  %260 = @func_20(%259) /* ty=(Tensor[(2, 1, 11), float32],) */;
  %261 = floor_divide(%256, %257) /* ty=Tensor[(7, 4, 13), float32] */;
  %262 = %260.0;
  (%261, %262, meta[relay.Constant][17] /* ty=Tensor[(22), float32] */)
}

def @func_5242(%var_5236: Tensor[(600), int32]) -> (Tensor[(14, 11, 10), uint16], Tensor[(600), int32], Tensor[(90), float64], Tensor[(600), int32], Tensor[(600), int32]) {
  %263 = @func_4855() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 16, 7), uint8], Tensor[(1008), float64], Tensor[(168, 2), uint8]) */;
  %264 = cast(meta[relay.Constant][18] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %265 = cast(%var_5236, dtype="int32") /* ty=Tensor[(600), int32] */;
  %266 = reshape(%264, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), float64] */;
  %267 = reshape(%265, newshape=[600]) /* ty=Tensor[(600), int32] */;
  %268 = @func_3160(%266, %267) /* ty=(Tensor[(15, 8, 5), bool], Tensor[(600), int32], Tensor[(15, 2, 3), float64]) */;
  %269 = @func_4453() /* ty=(Tensor[(54), float32], Tensor[(14, 11, 10), int16], Tensor[(6, 3, 3), float64], Tensor[(600), int32], Tensor[(45, 2), float64], Tensor[(600), int32]) */;
  %270 = %263.0;
  %271 = %268.1;
  %272 = %269.3;
  (%270, %271, meta[relay.Constant][18] /* ty=Tensor[(90), float64] */, %var_5236, %272)
}

def @func_5579() -> (Tensor[(3, 8, 15), float64],) {
  %273 = @func_5500() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %274 = %273.0;
  (%274,)
}

def @func_9388() -> (Tensor[(150), uint32],) {
  %275 = @func_7188() /* ty=Tensor[(150), uint32] */;
  (%275,)
}

def @func_7190() -> Tensor[(150), uint32] {
  @func_7188() /* ty=Tensor[(150), uint32] */
}

def @func_4002(%var_4001: float32) -> Tensor[(9, 11, 15), bool] {
  %278 = fn (%var_3994: float32) -> Tensor[(9, 11, 15), bool] {
    %276 = cast(%var_3994, dtype="bool") /* ty=bool */;
    %277 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 11, 15), float32] */, dtype="bool") /* ty=Tensor[(9, 11, 15), bool] */;
    equal(%276, %277) /* ty=Tensor[(9, 11, 15), bool] */
  };
  %278(%var_4001) /* ty=Tensor[(9, 11, 15), bool] */
}

def @func_4779(%var_4733: Tensor[(15, 6, 15), int64], %var_4734: Tensor[(15, 6, 15), int64]) -> (Tensor[(13, 10, 1), float64], Tensor[(130), float64], Tensor[(6, 3, 3), float64], Tensor[(13, 10, 1), float64], Tensor[(14, 11, 10), uint16], Tensor[(15, 6, 15), bool], Tensor[(15, 12, 2), int64], Tensor[(360), int64], Tensor[(22), float32]) {
  %279 = cast(meta[relay.Constant][20] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %280 = reshape(%279, newshape=[13, 10, 1]) /* ty=Tensor[(13, 10, 1), float64] */;
  %281 = @func_2875(%280) /* ty=(Tensor[(13, 10, 1), float64],) */;
  %282 = @func_4453() /* ty=(Tensor[(54), float32], Tensor[(14, 11, 10), int16], Tensor[(6, 3, 3), float64], Tensor[(600), int32], Tensor[(45, 2), float64], Tensor[(600), int32]) */;
  %283 = %282.2;
  %284 = cast(%283, dtype="float64") /* ty=Tensor[(6, 3, 3), float64] */;
  %285 = cast(meta[relay.Constant][20] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %286 = reshape(%285, newshape=[13, 10, 1]) /* ty=Tensor[(13, 10, 1), float64] */;
  %287 = @func_2875(%286) /* ty=(Tensor[(13, 10, 1), float64],) */;
  %288 = cast(%var_4734, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  %289 = shape_of(%var_4733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%var_4733, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %292 = not_equal(%290, %291) /* ty=Tensor[(15, 6, 15), bool] */;
  %293 = cast(%292, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
  %294 = sinh(%293) /* ty=Tensor[(15, 6, 15), float64] */;
  %295 = cast(%292, dtype="int32") /* ty=Tensor[(15, 6, 15), int32] */;
  %296 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%294, dtype="int32") /* ty=Tensor[(15, 6, 15), int32] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %299 = bitwise_or(%297, %298) /* ty=Tensor[(15, 6, 15), int32] */;
  %300 = cast(%299, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  %301 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%294, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %304 = cast(meta[relay.Constant][21] /* ty=Tensor[(360), int64] */, dtype="int64") /* ty=Tensor[(360), int64] */;
  %305 = cast(meta[relay.Constant][21] /* ty=Tensor[(360), int64] */, dtype="int64") /* ty=Tensor[(360), int64] */;
  %306 = cast(meta[relay.Constant][22] /* ty=Tensor[(22), float32] */, dtype="float32") /* ty=Tensor[(22), float32] */;
  %307 = reshape(%304, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %308 = reshape(%305, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %309 = reshape(%306, newshape=[11, 2]) /* ty=Tensor[(11, 2), float32] */;
  %310 = @func_2097(%307, %308, %309) /* ty=(Tensor[(15, 12, 2), int64], Tensor[(2, ?, 11), float64], Tensor[(3, 8, 15), float32], Tensor[(16, 15, 14), uint8], Tensor[(420, 8), uint8], Tensor[(364), float64], Tensor[(3, 8, 15), float32]) */;
  %311 = %281.0;
  %312 = exp(%284) /* ty=Tensor[(6, 3, 3), float64] */;
  %313 = %287.0;
  %314 = @func_4335() /* ty=Tensor[(14, 11, 10), uint16] */;
  %315 = logical_or(%302, %303) /* ty=Tensor[(15, 6, 15), bool] */;
  %316 = %310.0;
  (%311, meta[relay.Constant][20] /* ty=Tensor[(130), float64] */, %312, %313, %314, %315, %316, meta[relay.Constant][21] /* ty=Tensor[(360), int64] */, meta[relay.Constant][22] /* ty=Tensor[(22), float32] */)
}

def @func_7656() -> (Tensor[(14, 11, 10), uint16],) {
  %317 = @func_7536() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), float32]) */;
  %318 = %317.0;
  (%318,)
}

def @func_9411() -> Tensor[(14, 11, 10), uint16] {
  %319 = @func_4277() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %319.0
}

def @func_3163(%var_3161: Tensor[(15, 2, 3), float64], %var_3162: Tensor[(600), int32]) -> (Tensor[(15, 8, 5), bool], Tensor[(600), int32], Tensor[(15, 2, 3), float64]) {
  %330 = fn (%var_3147: Tensor[(15, 2, 3), float64], %var_3153: Tensor[(600), int32]) -> (Tensor[(15, 8, 5), bool], Tensor[(600), int32], Tensor[(15, 2, 3), float64]) {
    %320 = cast(%var_3153, dtype="int32") /* ty=Tensor[(600), int32] */;
    %321 = cast(%var_3153, dtype="int32") /* ty=Tensor[(600), int32] */;
    %322 = reshape(%320, newshape=[15, 8, 5]) /* ty=Tensor[(15, 8, 5), int32] */;
    %323 = reshape(%321, newshape=[15, 8, 5]) /* ty=Tensor[(15, 8, 5), int32] */;
    %324 = @func_2420(%322, %323) /* ty=(Tensor[(15, 8, 5), bool], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
    %325 = cast(%var_3147, dtype="float64") /* ty=Tensor[(15, 2, 3), float64] */;
    %326 = sqrt(%325) /* ty=Tensor[(15, 2, 3), float64] */;
    %327 = cast(%326, dtype="float64") /* ty=Tensor[(15, 2, 3), float64] */;
    %328 = %324.0;
    %329 = sin(%327) /* ty=Tensor[(15, 2, 3), float64] */;
    (%328, %var_3153, %329)
  };
  %330(%var_3161, %var_3162) /* ty=(Tensor[(15, 8, 5), bool], Tensor[(600), int32], Tensor[(15, 2, 3), float64]) */
}

def @func_4279() -> (Tensor[(14, 11, 10), uint16],) {
  @func_4277() /* ty=(Tensor[(14, 11, 10), uint16],) */
}

def @func_9302() -> Tensor[(12, 30), float32] {
  @func_9300() /* ty=Tensor[(12, 30), float32] */
}

def @func_6899(%var_6760: Tensor[(250), bool], %var_6824: Tensor[(12, 30), float32], %var_6876: Tensor[(24, 14), uint8], %var_6894: Tensor[(12, 30), uint64]) -> (Tensor[(5, 10, 5), bool], Tensor[(250), bool], Tensor[(12, 30), float32], Tensor[(12, 30), uint32], Tensor[(12, 30), bool], Tensor[(3, 16, 7), uint8], Tensor[(24, 14), uint8], Tensor[(12, 30), int16]) {
  %331 = cast(%var_6760, dtype="bool") /* ty=Tensor[(250), bool] */;
  %332 = reshape(%331, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), bool] */;
  %333 = @func_3905(%332) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(12, 3, 13), float32], Tensor[(36), float32], Tensor[(234, 2), float32]) */;
  %334 = @func_5642() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) */;
  %335 = %334.2;
  %336 = cast(%335, dtype="float64") /* ty=Tensor[(12, 30), float64] */;
  %337 = asin(%336) /* ty=Tensor[(12, 30), float64] */;
  %338 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 30), float64] */, dtype="bool") /* ty=Tensor[(12, 30), bool] */;
  %339 = shape_of(%337, dtype="int32") /* ty=Tensor[(2), int32] */;
  %340 = cast(%337, dtype="bool") /* ty=Tensor[(12, 30), bool] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %342 = greater(%340, %341) /* ty=Tensor[(12, 30), bool] */;
  %343 = cast(%342, dtype="float32") /* ty=Tensor[(12, 30), float32] */;
  %344 = cast(%var_6824, dtype="uint32") /* ty=Tensor[(12, 30), uint32] */;
  %345 = shape_of(%335, dtype="int32") /* ty=Tensor[(2), int32] */;
  %346 = cast(%335, dtype="uint32") /* ty=Tensor[(12, 30), uint32] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %348 = cast(%337, dtype="float32") /* ty=Tensor[(12, 30), float32] */;
  %349 = sin(%348) /* ty=Tensor[(12, 30), float32] */;
  %350 = cast(%var_6824, dtype="bool") /* ty=Tensor[(12, 30), bool] */;
  %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(2), int32] */;
  %352 = cast(%349, dtype="bool") /* ty=Tensor[(12, 30), bool] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %354 = cast(%var_6876, dtype="uint8") /* ty=Tensor[(24, 14), uint8] */;
  %355 = cast(%var_6876, dtype="uint8") /* ty=Tensor[(24, 14), uint8] */;
  %356 = reshape(%354, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint8] */;
  %357 = reshape(%355, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint8] */;
  %358 = cast(%349, dtype="int8") /* ty=Tensor[(12, 30), int8] */;
  %359 = shape_of(%337, dtype="int32") /* ty=Tensor[(2), int32] */;
  %360 = cast(%337, dtype="int8") /* ty=Tensor[(12, 30), int8] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %362 = right_shift(%360, %361) /* ty=Tensor[(12, 30), int8] */;
  %363 = cast(%335, dtype="uint64") /* ty=Tensor[(12, 30), uint64] */;
  %364 = shape_of(%362, dtype="int32") /* ty=Tensor[(2), int32] */;
  %365 = cast(%362, dtype="uint64") /* ty=Tensor[(12, 30), uint64] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %367 = logical_xor(%365, %366) /* ty=Tensor[(12, 30), uint64] */;
  %368 = cast(%var_6894, dtype="int16") /* ty=Tensor[(12, 30), int16] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(2), int32] */;
  %370 = cast(%367, dtype="int16") /* ty=Tensor[(12, 30), int16] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %372 = %333.0;
  %373 = atan(%343) /* ty=Tensor[(12, 30), float32] */;
  %374 = multiply(%346, %347) /* ty=Tensor[(12, 30), uint32] */;
  %375 = not_equal(%352, %353) /* ty=Tensor[(12, 30), bool] */;
  %376 = @func_1715(%356, %357) /* ty=Tensor[(3, 16, 7), uint8] */;
  %377 = minimum(%370, %371) /* ty=Tensor[(12, 30), int16] */;
  (%372, %var_6760, %373, %374, %375, %376, %var_6876, %377)
}

def @func_8910() -> (Tensor[(3, 8, 15), float64],) {
  %378 = @func_5612() /* ty=Tensor[(3, 8, 15), float64] */;
  (%378,)
}

def @func_5642() -> (Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) {
  %379 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 30), float32] */, dtype="float32") /* ty=Tensor[(12, 30), float32] */;
  %380 = reshape(%379, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
  %381 = @func_1542(%380) /* ty=(Tensor[(3, 8, 15), float32],) */;
  %382 = @func_4335() /* ty=Tensor[(14, 11, 10), uint16] */;
  %383 = %381.0;
  (%382, %383, meta[relay.Constant][24] /* ty=Tensor[(12, 30), float32] */)
}

def @func_9300() -> Tensor[(12, 30), float32] {
  %384 = @func_5642() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) */;
  %384.2
}

def @func_9353() -> Tensor[(14, 11, 10), uint16] {
  %386 = fn () -> Tensor[(14, 11, 10), uint16] {
    %385 = @func_6352() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float64]) */;
    %385.1
  };
  %386() /* ty=Tensor[(14, 11, 10), uint16] */
}

def @func_9554() -> (Tensor[(12, 30), float32], Tensor[(360), float32], Tensor[(1, 672), int16]) {
  %387 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 672), int16] */, dtype="int16") /* ty=Tensor[(1, 672), int16] */;
  %388 = reshape(%387, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %389 = @func_6247(%388) /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(11, 2), float32], Tensor[(672), int16], Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(3, 8, 15), float32], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32]) */;
  %390 = @func_9300() /* ty=Tensor[(12, 30), float32] */;
  %391 = %389.4;
  (%390, %391, meta[relay.Constant][25] /* ty=Tensor[(1, 672), int16] */)
}

def @func_5130(%var_5081: Tensor[(3, 8, 15), float64]) -> (Tensor[(3, 8, 15), int32], Tensor[(16, 15, 14), uint8], Tensor[(3360), uint8], Tensor[(3, 8, 15), float64]) {
  %392 = @func_4695() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %393 = %392.0;
  %394 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 8, 15), float64] */, dtype="int32") /* ty=Tensor[(3, 8, 15), int32] */;
  %395 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(%393, dtype="int32") /* ty=Tensor[(3, 8, 15), int32] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %398 = cast(meta[relay.Constant][27] /* ty=Tensor[(3360), uint8] */, dtype="uint8") /* ty=Tensor[(3360), uint8] */;
  %399 = cast(meta[relay.Constant][27] /* ty=Tensor[(3360), uint8] */, dtype="uint8") /* ty=Tensor[(3360), uint8] */;
  %400 = reshape(%398, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), uint8] */;
  %401 = reshape(%399, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), uint8] */;
  %402 = cast(%var_5081, dtype="uint64") /* ty=Tensor[(3, 8, 15), uint64] */;
  %403 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%393, dtype="uint64") /* ty=Tensor[(3, 8, 15), uint64] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %406 = bitwise_and(%404, %405) /* ty=Tensor[(3, 8, 15), uint64] */;
  %407 = cast(%406, dtype="float64") /* ty=Tensor[(3, 8, 15), float64] */;
  %408 = right_shift(%396, %397) /* ty=Tensor[(3, 8, 15), int32] */;
  %409 = @func_807(%400, %401) /* ty=Tensor[(16, 15, 14), uint8] */;
  %410 = acosh(%407) /* ty=Tensor[(3, 8, 15), float64] */;
  (%408, %409, meta[relay.Constant][27] /* ty=Tensor[(3360), uint8] */, %410)
}

def @func_7280(%var_7253: Tensor[(14, 11, 10), uint16]) -> (Tensor[(14, 11, 10), int8], Tensor[(3, 8, 15), float64]) {
  %411 = @func_7094() /* ty=(Tensor[(3, 2, 15), bool], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
  %412 = %411.1;
  %413 = cast(%var_7253, dtype="int8") /* ty=Tensor[(14, 11, 10), int8] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%412, dtype="int8") /* ty=Tensor[(14, 11, 10), int8] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %417 = logical_xor(%415, %416) /* ty=Tensor[(14, 11, 10), int8] */;
  %418 = @func_5682() /* ty=Tensor[(3, 8, 15), float64] */;
  (%417, %418)
}

def @func_8737(%var_8735: Tensor[(22), float32]) -> (Tensor[(36, 10), float32], Tensor[(3, 8, 15), float32], Tensor[(22), float32]) {
  @func_8734(%var_8735) /* ty=(Tensor[(36, 10), float32], Tensor[(3, 8, 15), float32], Tensor[(22), float32]) */
}

def @func_6604() -> (Tensor[(14, 11, 10), uint16],) {
  %419 = @func_4277() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %420 = %419.0;
  (%420,)
}

def @func_8625(%var_8602: float32) -> (Tensor[(3, 8, 15), float64], Tensor[(9, 11, 15), bool], float32) {
  %421 = @func_4633() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) */;
  %422 = cast(%var_8602, dtype="float32") /* ty=float32 */;
  %423 = reshape(%422, newshape=[]) /* ty=float32 */;
  %424 = %421.0;
  %425 = @func_4000(%423) /* ty=Tensor[(9, 11, 15), bool] */;
  (%424, %425, %var_8602)
}

def @func_7420(%var_7416: Tensor[(1, 6, 5), int8], %var_7417: Tensor[(12, 6, 5), int8], %var_7418: Tensor[(45, 2), float64], %var_7419: Tensor[(36), float32]) -> (Tensor[(12, 6, 5), int8], Tensor[(3, 8, 15), bool], Tensor[(15, 8, 5), bool], Tensor[(45, 2), float64], Tensor[(600, 1), int32], Tensor[(12, 6, 5), float64], Tensor[(9, 4), float32], Tensor[(36), float32], Tensor[(3, 8, 15), float64]) {
  %446 = fn (%var_7383: Tensor[(1, 6, 5), int8], %var_7384: Tensor[(12, 6, 5), int8], %var_7396: Tensor[(45, 2), float64], %var_7407: Tensor[(36), float32]) -> (Tensor[(12, 6, 5), int8], Tensor[(3, 8, 15), bool], Tensor[(15, 8, 5), bool], Tensor[(45, 2), float64], Tensor[(600, 1), int32], Tensor[(12, 6, 5), float64], Tensor[(9, 4), float32], Tensor[(36), float32], Tensor[(3, 8, 15), float64]) {
    %426 = cast(%var_7383, dtype="int8") /* ty=Tensor[(1, 6, 5), int8] */;
    %427 = cast(%var_7384, dtype="int8") /* ty=Tensor[(12, 6, 5), int8] */;
    %428 = cast(%var_7384, dtype="float64") /* ty=Tensor[(12, 6, 5), float64] */;
    %429 = reshape(%428, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float64] */;
    %430 = @func_5946(%429) /* ty=(Tensor[(3, 8, 15), bool], Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), float64], Tensor[(15, 12, 2), int64], Tensor[(1350), int64]) */;
    %431 = cast(%var_7396, dtype="float64") /* ty=Tensor[(45, 2), float64] */;
    %432 = cast(meta[relay.Constant][28] /* ty=Tensor[(600, 1), int32] */, dtype="int32") /* ty=Tensor[(600, 1), int32] */;
    %433 = reshape(%431, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), float64] */;
    %434 = reshape(%432, newshape=[600]) /* ty=Tensor[(600), int32] */;
    %435 = @func_3160(%433, %434) /* ty=(Tensor[(15, 8, 5), bool], Tensor[(600), int32], Tensor[(15, 2, 3), float64]) */;
    %436 = cast(%var_7384, dtype="float64") /* ty=Tensor[(12, 6, 5), float64] */;
    %437 = cast(%var_7407, dtype="float32") /* ty=Tensor[(36), float32] */;
    %438 = reshape(%437, newshape=[9, 4]) /* ty=Tensor[(9, 4), float32] */;
    %439 = @func_7053(%438) /* ty=(Tensor[(3, 8, 15), float64], Tensor[(12, 3, 13), float32], Tensor[(9, 4), float32], Tensor[(234, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(1, 22), float32], Tensor[(364), float64]) */;
    %440 = bitwise_and(%426, %427) /* ty=Tensor[(12, 6, 5), int8] */;
    %441 = %430.0;
    %442 = %435.0;
    %443 = log(%436) /* ty=Tensor[(12, 6, 5), float64] */;
    %444 = %439.2;
    %445 = @func_5682() /* ty=Tensor[(3, 8, 15), float64] */;
    (%440, %441, %442, %var_7396, meta[relay.Constant][28] /* ty=Tensor[(600, 1), int32] */, %443, %444, %var_7407, %445)
  };
  %446(%var_7416, %var_7417, %var_7418, %var_7419) /* ty=(Tensor[(12, 6, 5), int8], Tensor[(3, 8, 15), bool], Tensor[(15, 8, 5), bool], Tensor[(45, 2), float64], Tensor[(600, 1), int32], Tensor[(12, 6, 5), float64], Tensor[(9, 4), float32], Tensor[(36), float32], Tensor[(3, 8, 15), float64]) */
}

def @func_8734(%var_8720: Tensor[(22), float32]) -> (Tensor[(36, 10), float32], Tensor[(3, 8, 15), float32], Tensor[(22), float32]) {
  %447 = @func_6096() /* ty=Tensor[(36, 10), float32] */;
  %448 = cast(%447, dtype="int64") /* ty=Tensor[(36, 10), int64] */;
  %449 = cast(%447, dtype="int64") /* ty=Tensor[(36, 10), int64] */;
  %450 = cast(%var_8720, dtype="float32") /* ty=Tensor[(22), float32] */;
  %451 = reshape(%448, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %452 = reshape(%449, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %453 = reshape(%450, newshape=[11, 2]) /* ty=Tensor[(11, 2), float32] */;
  %454 = @func_2097(%451, %452, %453) /* ty=(Tensor[(15, 12, 2), int64], Tensor[(2, ?, 11), float64], Tensor[(3, 8, 15), float32], Tensor[(16, 15, 14), uint8], Tensor[(420, 8), uint8], Tensor[(364), float64], Tensor[(3, 8, 15), float32]) */;
  %455 = cast(%var_8720, dtype="float32") /* ty=Tensor[(22), float32] */;
  %456 = %454.2;
  %457 = asin(%455) /* ty=Tensor[(22), float32] */;
  (%447, %456, %457)
}

def @func_8037() -> (Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), float64]) {
  @func_8035() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), float64]) */
}

def @func_8912() -> (Tensor[(3, 8, 15), float64],) {
  @func_8910() /* ty=(Tensor[(3, 8, 15), float64],) */
}

def @func_4633() -> (Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) {
  %458 = @func_4526() /* ty=(Tensor[(14, 11, 10), float64], Tensor[(3, 8, 15), float32], Tensor[(36, 10), float32]) */;
  %459 = %458.1;
  %460 = cast(%459, dtype="float64") /* ty=Tensor[(3, 8, 15), float64] */;
  %461 = cast(meta[relay.Constant][29] /* ty=Tensor[(1125), uint16] */, dtype="uint16") /* ty=Tensor[(1125), uint16] */;
  %462 = cast(meta[relay.Constant][29] /* ty=Tensor[(1125), uint16] */, dtype="uint16") /* ty=Tensor[(1125), uint16] */;
  %463 = cast(meta[relay.Constant][29] /* ty=Tensor[(1125), uint16] */, dtype="uint16") /* ty=Tensor[(1125), uint16] */;
  %464 = reshape(%461, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), uint16] */;
  %465 = reshape(%462, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), uint16] */;
  %466 = reshape(%463, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), uint16] */;
  %467 = @func_2258(%464, %465, %466) /* ty=(Tensor[(15, 5, 15), uint16], Tensor[(15, 5, 15), bool]) */;
  %468 = sigmoid(%460) /* ty=Tensor[(3, 8, 15), float64] */;
  %469 = %467.1;
  (%468, %469, meta[relay.Constant][29] /* ty=Tensor[(1125), uint16] */)
}

def @func_7634(%var_7615: Tensor[(14, 11, 10), float64]) -> (Tensor[(14, 11, 10), uint64],) {
  %470 = @func_7134() /* ty=(Tensor[(14, 11, 10), float64],) */;
  %471 = %470.0;
  %472 = cast(%var_7615, dtype="uint64") /* ty=Tensor[(14, 11, 10), uint64] */;
  %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%471, dtype="uint64") /* ty=Tensor[(14, 11, 10), uint64] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %476 = bitwise_and(%474, %475) /* ty=Tensor[(14, 11, 10), uint64] */;
  (%476,)
}

def @func_5033(%var_5032: Tensor[(14, 11, 10), float64]) -> Tensor[(14, 11, 10), bool] {
  %482 = fn (%var_5000: Tensor[(14, 11, 10), float64]) -> Tensor[(14, 11, 10), bool] {
    %477 = @func_4730() /* ty=Tensor[(14, 11, 10), float64] */;
    %478 = cast(%var_5000, dtype="bool") /* ty=Tensor[(14, 11, 10), bool] */;
    %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
    %480 = cast(%477, dtype="bool") /* ty=Tensor[(14, 11, 10), bool] */;
    %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%480, %481) /* ty=Tensor[(14, 11, 10), bool] */
  };
  %482(%var_5032) /* ty=Tensor[(14, 11, 10), bool] */
}

def @func_7637(%var_7635: Tensor[(14, 11, 10), float64]) -> (Tensor[(14, 11, 10), uint64],) {
  @func_7634(%var_7635) /* ty=(Tensor[(14, 11, 10), uint64],) */
}

def @func_2097(%var_2037: Tensor[(15, 12, 2), int64], %var_2038: Tensor[(15, 12, 2), int64], %var_2058: Tensor[(11, 2), float32]) -> (Tensor[(15, 12, 2), int64], Tensor[(2, ?, 11), float64], Tensor[(3, 8, 15), float32], Tensor[(16, 15, 14), uint8], Tensor[(420, 8), uint8], Tensor[(364), float64], Tensor[(3, 8, 15), float32]) {
  %483 = cast(%var_2038, dtype="int64") /* ty=Tensor[(15, 12, 2), int64] */;
  %484 = shape_of(%var_2037, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%var_2037, dtype="int64") /* ty=Tensor[(15, 12, 2), int64] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %487 = cast(%var_2058, dtype="float32") /* ty=Tensor[(11, 2), float32] */;
  %488 = reshape(%487, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
  %489 = @func_20(%488) /* ty=(Tensor[(2, 1, 11), float32],) */;
  %490 = %489.0;
  %491 = cast(%var_2058, dtype="float64") /* ty=Tensor[(11, 2), float64] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="float64") /* ty=Tensor[(2, 1, 11), float64] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %495 = cast(%var_2038, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %496 = reshape(%495, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
  %497 = @func_1542(%496) /* ty=(Tensor[(3, 8, 15), float32],) */;
  %498 = cast(meta[relay.Constant][30] /* ty=Tensor[(420, 8), uint8] */, dtype="uint8") /* ty=Tensor[(420, 8), uint8] */;
  %499 = cast(meta[relay.Constant][30] /* ty=Tensor[(420, 8), uint8] */, dtype="uint8") /* ty=Tensor[(420, 8), uint8] */;
  %500 = reshape(%498, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), uint8] */;
  %501 = reshape(%499, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), uint8] */;
  %502 = cast(meta[relay.Constant][31] /* ty=Tensor[(364), float32] */, dtype="float32") /* ty=Tensor[(364), float32] */;
  %503 = reshape(%502, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), float32] */;
  %504 = @func_1577(%503) /* ty=(Tensor[(7, 4, 13), float32], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
  %505 = %504.0;
  %506 = cast(%505, dtype="float64") /* ty=Tensor[(7, 4, 13), float64] */;
  %507 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(364), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %508 = cast(meta[relay.Constant][31] /* ty=Tensor[(364), float32] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?), float64] */;
  %510 = bitwise_and(%485, %486) /* ty=Tensor[(15, 12, 2), int64] */;
  %511 = cast(%510, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %512 = reshape(%511, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
  %513 = @func_1542(%512) /* ty=(Tensor[(3, 8, 15), float32],) */;
  %514 = mod(%493, %494) /* ty=Tensor[(2, ?, 11), float64] */;
  %515 = %497.0;
  %516 = @func_807(%500, %501) /* ty=Tensor[(16, 15, 14), uint8] */;
  %517 = floor_divide(%508, %509) /* ty=Tensor[(364), float64] */;
  %518 = %513.0;
  (%510, %514, %515, %516, meta[relay.Constant][30] /* ty=Tensor[(420, 8), uint8] */, %517, %518)
}

def @func_6673() -> (Tensor[(1008), float64], Tensor[(54), float32], Tensor[(150), uint32]) {
  %527 = fn () -> (Tensor[(1008), float64], Tensor[(54), float32], Tensor[(150), uint32]) {
    %519 = @func_4855() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 16, 7), uint8], Tensor[(1008), float64], Tensor[(168, 2), uint8]) */;
    %520 = cast(meta[relay.Constant][32] /* ty=Tensor[(150), uint32] */, dtype="uint32") /* ty=Tensor[(150), uint32] */;
    %521 = cast(meta[relay.Constant][32] /* ty=Tensor[(150), uint32] */, dtype="uint32") /* ty=Tensor[(150), uint32] */;
    %522 = reshape(%520, newshape=[5, 6, 5]) /* ty=Tensor[(5, 6, 5), uint32] */;
    %523 = reshape(%521, newshape=[5, 6, 5]) /* ty=Tensor[(5, 6, 5), uint32] */;
    %524 = @func_3311(%522, %523) /* ty=(Tensor[(5, 6, 5), uint32], Tensor[(360), float32], Tensor[(54), float32]) */;
    %525 = %519.2;
    %526 = %524.2;
    (%525, %526, meta[relay.Constant][32] /* ty=Tensor[(150), uint32] */)
  };
  %527() /* ty=(Tensor[(1008), float64], Tensor[(54), float32], Tensor[(150), uint32]) */
}

def @func_2423(%var_2421: Tensor[(15, 8, 5), int32], %var_2422: Tensor[(15, 8, 5), int32]) -> (Tensor[(15, 8, 5), bool], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) {
  %537 = fn (%var_2412: Tensor[(15, 8, 5), int32], %var_2413: Tensor[(15, 8, 5), int32]) -> (Tensor[(15, 8, 5), bool], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) {
    %528 = cast(%var_2413, dtype="bool") /* ty=Tensor[(15, 8, 5), bool] */;
    %529 = shape_of(%var_2412, dtype="int32") /* ty=Tensor[(3), int32] */;
    %530 = cast(%var_2412, dtype="bool") /* ty=Tensor[(15, 8, 5), bool] */;
    %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %532 = cast(meta[relay.Constant][33] /* ty=Tensor[(22), float32] */, dtype="float32") /* ty=Tensor[(22), float32] */;
    %533 = reshape(%532, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
    %534 = @func_20(%533) /* ty=(Tensor[(2, 1, 11), float32],) */;
    %535 = less_equal(%530, %531) /* ty=Tensor[(15, 8, 5), bool] */;
    %536 = %534.0;
    (%535, %536, meta[relay.Constant][33] /* ty=Tensor[(22), float32] */)
  };
  %537(%var_2421, %var_2422) /* ty=(Tensor[(15, 8, 5), bool], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */
}

def @func_7950(%var_7918: Tensor[(130), float64]) -> (Tensor[(3, 8, 15), float64], Tensor[(13, 10, ?), uint16]) {
  %538 = @func_5500() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %539 = cast(%var_7918, dtype="float64") /* ty=Tensor[(130), float64] */;
  %540 = reshape(%539, newshape=[13, 10, 1]) /* ty=Tensor[(13, 10, 1), float64] */;
  %541 = @func_2875(%540) /* ty=(Tensor[(13, 10, 1), float64],) */;
  %542 = %541.0;
  %543 = cast(%var_7918, dtype="uint16") /* ty=Tensor[(130), uint16] */;
  %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%542, dtype="uint16") /* ty=Tensor[(13, 10, 1), uint16] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %547 = %538.0;
  %548 = logical_xor(%545, %546) /* ty=Tensor[(13, 10, ?), uint16] */;
  (%547, %548)
}

def @func_1545(%var_1543: Tensor[(3, 8, 15), float32]) -> (Tensor[(3, 8, 15), float32],) {
  @func_1542(%var_1543) /* ty=(Tensor[(3, 8, 15), float32],) */
}

def @func_6905(%var_6901: Tensor[(250), bool], %var_6902: Tensor[(12, 30), float32], %var_6903: Tensor[(24, 14), uint8], %var_6904: Tensor[(12, 30), uint64]) -> (Tensor[(5, 10, 5), bool], Tensor[(250), bool], Tensor[(12, 30), float32], Tensor[(12, 30), uint32], Tensor[(12, 30), bool], Tensor[(3, 16, 7), uint8], Tensor[(24, 14), uint8], Tensor[(12, 30), int16]) {
  @func_6899(%var_6901, %var_6902, %var_6903, %var_6904) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(250), bool], Tensor[(12, 30), float32], Tensor[(12, 30), uint32], Tensor[(12, 30), bool], Tensor[(3, 16, 7), uint8], Tensor[(24, 14), uint8], Tensor[(12, 30), int16]) */
}

def @func_1718(%var_1716: Tensor[(3, 16, 7), uint8], %var_1717: Tensor[(3, 16, 7), uint8]) -> Tensor[(3, 16, 7), uint8] {
  %553 = fn (%var_1703: Tensor[(3, 16, 7), uint8], %var_1704: Tensor[(3, 16, 7), uint8]) -> Tensor[(3, 16, 7), uint8] {
    %549 = cast(%var_1704, dtype="uint8") /* ty=Tensor[(3, 16, 7), uint8] */;
    %550 = shape_of(%var_1703, dtype="int32") /* ty=Tensor[(3), int32] */;
    %551 = cast(%var_1703, dtype="uint8") /* ty=Tensor[(3, 16, 7), uint8] */;
    %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    right_shift(%551, %552) /* ty=Tensor[(3, 16, 7), uint8] */
  };
  %553(%var_1716, %var_1717) /* ty=Tensor[(3, 16, 7), uint8] */
}

def @func_8052() -> (Tensor[(14, 11, 10), uint16],) {
  %556 = fn () -> (Tensor[(14, 11, 10), uint16],) {
    %554 = @func_7676() /* ty=(Tensor[(14, 11, 10), uint16],) */;
    %555 = %554.0;
    (%555,)
  };
  %556() /* ty=(Tensor[(14, 11, 10), uint16],) */
}

def @func_7536() -> (Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), float32]) {
  %557 = @func_7094() /* ty=(Tensor[(3, 2, 15), bool], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
  %558 = @func_6352() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float64]) */;
  %559 = @func_6541() /* ty=(Tensor[(14, 11, 10), float32],) */;
  %560 = %557.1;
  %561 = %558.1;
  %562 = %559.0;
  (%560, %561, %562)
}

def @func_2389(%var_2387: Tensor[(4, 15, 2), float64]) -> (Tensor[(4, 15, 2), float64],) {
  @func_2386(%var_2387) /* ty=(Tensor[(4, 15, 2), float64],) */
}

def @func_5470(%var_5466: Tensor[(5, 9, 14), float64]) -> Tensor[(5, 9, 14), float64] {
  %563 = cast(%var_5466, dtype="float64") /* ty=Tensor[(5, 9, 14), float64] */;
  acos(%563) /* ty=Tensor[(5, 9, 14), float64] */
}

def @func_6179() -> Tensor[(1125), float64] {
  %564 = @func_4633() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) */;
  %565 = %564.2;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(1125), float64] */;
  acosh(%566) /* ty=Tensor[(1125), float64] */
}

def @func_9413() -> Tensor[(14, 11, 10), uint16] {
  @func_9411() /* ty=Tensor[(14, 11, 10), uint16] */
}

def @func_5042() -> (Tensor[(14, 11, 10), uint16],) {
  %567 = @func_4878() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %568 = %567.0;
  (%568,)
}

def @func_3757(%var_3747: Tensor[(6, 13, 1), float32], %var_3755: Tensor[(3360), uint8]) -> (Tensor[(6, 13, 1), float32], Tensor[(16, 15, 14), uint8], Tensor[(3360), uint8]) {
  %569 = cast(%var_3747, dtype="float32") /* ty=Tensor[(6, 13, 1), float32] */;
  %570 = cast(%var_3755, dtype="uint8") /* ty=Tensor[(3360), uint8] */;
  %571 = cast(%var_3755, dtype="uint8") /* ty=Tensor[(3360), uint8] */;
  %572 = reshape(%570, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), uint8] */;
  %573 = reshape(%571, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), uint8] */;
  %574 = acos(%569) /* ty=Tensor[(6, 13, 1), float32] */;
  %575 = @func_807(%572, %573) /* ty=Tensor[(16, 15, 14), uint8] */;
  (%574, %575, %var_3755)
}

def @func_5946(%var_5892: Tensor[(3, 8, 15), float64]) -> (Tensor[(3, 8, 15), bool], Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), float64], Tensor[(15, 12, 2), int64], Tensor[(1350), int64]) {
  %576 = @func_5500() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %577 = %576.0;
  %578 = cast(%var_5892, dtype="bool") /* ty=Tensor[(3, 8, 15), bool] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%577, dtype="bool") /* ty=Tensor[(3, 8, 15), bool] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %582 = @func_5579() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %583 = @func_4526() /* ty=(Tensor[(14, 11, 10), float64], Tensor[(3, 8, 15), float32], Tensor[(36, 10), float32]) */;
  %584 = cast(meta[relay.Constant][34] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %585 = cast(meta[relay.Constant][34] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %586 = reshape(%584, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %587 = reshape(%585, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %588 = @func_4779(%586, %587) /* ty=(Tensor[(13, 10, 1), float64], Tensor[(130), float64], Tensor[(6, 3, 3), float64], Tensor[(13, 10, 1), float64], Tensor[(14, 11, 10), uint16], Tensor[(15, 6, 15), bool], Tensor[(15, 12, 2), int64], Tensor[(360), int64], Tensor[(22), float32]) */;
  %589 = equal(%580, %581) /* ty=Tensor[(3, 8, 15), bool] */;
  %590 = %582.0;
  %591 = %583.0;
  %592 = %588.6;
  (%589, %590, %591, %592, meta[relay.Constant][34] /* ty=Tensor[(1350), int64] */)
}

def @func_5949(%var_5947: Tensor[(3, 8, 15), float64]) -> (Tensor[(3, 8, 15), bool], Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), float64], Tensor[(15, 12, 2), int64], Tensor[(1350), int64]) {
  @func_5946(%var_5947) /* ty=(Tensor[(3, 8, 15), bool], Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), float64], Tensor[(15, 12, 2), int64], Tensor[(1350), int64]) */
}

def @func_7739() -> Tensor[(3, 8, 15), float32] {
  @func_7737() /* ty=Tensor[(3, 8, 15), float32] */
}

def @func_3907(%var_3906: Tensor[(5, 10, 5), bool]) -> (Tensor[(5, 10, 5), bool], Tensor[(12, 3, 13), float32], Tensor[(36), float32], Tensor[(234, 2), float32]) {
  %604 = fn (%var_3886: Tensor[(5, 10, 5), bool]) -> (Tensor[(5, 10, 5), bool], Tensor[(12, 3, 13), float32], Tensor[(36), float32], Tensor[(234, 2), float32]) {
    %593 = cast(%var_3886, dtype="bool") /* ty=Tensor[(5, 10, 5), bool] */;
    %594 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(5, 10, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %595 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 10, 5), bool] */, dtype="bool") /* ty=Tensor[(5, 10, 5), bool] */;
    %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %597 = cast(meta[relay.Constant][36] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %598 = cast(meta[relay.Constant][37] /* ty=Tensor[(234, 2), float32] */, dtype="float32") /* ty=Tensor[(234, 2), float32] */;
    %599 = reshape(%597, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), float32] */;
    %600 = reshape(%598, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float32] */;
    %601 = @func_3199(%599, %600) /* ty=(Tensor[(12, 3, 13), float32],) */;
    %602 = logical_or(%595, %596) /* ty=Tensor[(5, 10, 5), bool] */;
    %603 = %601.0;
    (%602, %603, meta[relay.Constant][36] /* ty=Tensor[(36), float32] */, meta[relay.Constant][37] /* ty=Tensor[(234, 2), float32] */)
  };
  %604(%var_3906) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(12, 3, 13), float32], Tensor[(36), float32], Tensor[(234, 2), float32]) */
}

def @func_9046(%var_9040: Tensor[(1125), uint16]) -> (Tensor[(14, 11, 10), uint16], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16], Tensor[(150), uint32], Tensor[(3, 8, 15), float64]) {
  %605 = @func_7224() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %606 = cast(%var_9040, dtype="uint16") /* ty=Tensor[(1125), uint16] */;
  %607 = cast(meta[relay.Constant][38] /* ty=Tensor[(150), uint32] */, dtype="uint32") /* ty=Tensor[(150), uint32] */;
  %608 = reshape(%606, newshape=[1125]) /* ty=Tensor[(1125), uint16] */;
  %609 = reshape(%607, newshape=[150]) /* ty=Tensor[(150), uint32] */;
  %610 = @func_4960(%608, %609) /* ty=(Tensor[(1125), bool], Tensor[(360), float32], Tensor[(150), uint32], Tensor[(1125), int64], Tensor[(1125), float32], Tensor[(15, 5, 15), bool], Tensor[(2, ?, 11), float64], Tensor[(22), float32]) */;
  %611 = @func_4695() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %612 = %605.0;
  %613 = %610.5;
  %614 = %611.0;
  (%612, %613, %var_9040, meta[relay.Constant][38] /* ty=Tensor[(150), uint32] */, %614)
}

def @func_4336() -> Tensor[(14, 11, 10), uint16] {
  %616 = fn () -> Tensor[(14, 11, 10), uint16] {
    %615 = @func_4277() /* ty=(Tensor[(14, 11, 10), uint16],) */;
    %615.0
  };
  %616() /* ty=Tensor[(14, 11, 10), uint16] */
}

def @func_9211(%var_9209: Tensor[(90), float64]) -> (Tensor[(3, 8, 15), float64], Tensor[(3, 8, 15), float64], Tensor[(30), int8], Tensor[(90), float64], Tensor[(36), float32]) {
  @func_9208(%var_9209) /* ty=(Tensor[(3, 8, 15), float64], Tensor[(3, 8, 15), float64], Tensor[(30), int8], Tensor[(90), float64], Tensor[(36), float32]) */
}

def @func_9507(%var_9497: Tensor[(54), float32]) -> (Tensor[(3, 8, 15), float64], Tensor[(360), float32], Tensor[(54), float32], Tensor[(14, 11, 10), uint16]) {
  %617 = cast(%var_9497, dtype="float32") /* ty=Tensor[(54), float32] */;
  %618 = reshape(%617, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
  %619 = @func_1621(%618) /* ty=(Tensor[(6, 3, 3), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32]) */;
  %620 = @func_5642() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) */;
  %621 = @func_5682() /* ty=Tensor[(3, 8, 15), float64] */;
  %622 = %619.2;
  %623 = %620.0;
  (%621, %622, %var_9497, %623)
}

def @func_2139(%var_2137: Tensor[(15, 3, 9), float32], %var_2138: Tensor[(14, 240), uint8]) -> (Tensor[(15, 3, 9), float32], Tensor[(2, 1, 11), float32], Tensor[(672), int16], Tensor[(16, 15, 14), uint8], Tensor[(14, 240), uint8], Tensor[(2, 1, 11), float32]) {
  %643 = fn (%var_2110: Tensor[(15, 3, 9), float32], %var_2121: Tensor[(14, 240), uint8]) -> (Tensor[(15, 3, 9), float32], Tensor[(2, 1, 11), float32], Tensor[(672), int16], Tensor[(16, 15, 14), uint8], Tensor[(14, 240), uint8], Tensor[(2, 1, 11), float32]) {
    %624 = cast(%var_2110, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
    %625 = cast(meta[relay.Constant][39] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
    %626 = cast(meta[relay.Constant][39] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
    %627 = cast(meta[relay.Constant][39] /* ty=Tensor[(672), int16] */, dtype="float32") /* ty=Tensor[(672), float32] */;
    %628 = reshape(%625, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int16] */;
    %629 = reshape(%626, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int16] */;
    %630 = reshape(%627, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
    %631 = @func_477(%628, %629, %630) /* ty=(Tensor[(2, 1, 11), float32], Tensor[(11, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(2, 1, 11), float32], Tensor[(6, 8, 14), bool], Tensor[(2, 1, 11), float32]) */;
    %632 = cast(%var_2121, dtype="uint8") /* ty=Tensor[(14, 240), uint8] */;
    %633 = cast(%var_2121, dtype="uint8") /* ty=Tensor[(14, 240), uint8] */;
    %634 = reshape(%632, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), uint8] */;
    %635 = reshape(%633, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), uint8] */;
    %636 = %631.2;
    %637 = cast(%636, dtype="float32") /* ty=Tensor[(2, 1, 11), float32] */;
    %638 = reshape(%637, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
    %639 = @func_20(%638) /* ty=(Tensor[(2, 1, 11), float32],) */;
    %640 = sqrt(%624) /* ty=Tensor[(15, 3, 9), float32] */;
    %641 = @func_807(%634, %635) /* ty=Tensor[(16, 15, 14), uint8] */;
    %642 = %639.0;
    (%640, %636, meta[relay.Constant][39] /* ty=Tensor[(672), int16] */, %641, %var_2121, %642)
  };
  %643(%var_2137, %var_2138) /* ty=(Tensor[(15, 3, 9), float32], Tensor[(2, 1, 11), float32], Tensor[(672), int16], Tensor[(16, 15, 14), uint8], Tensor[(14, 240), uint8], Tensor[(2, 1, 11), float32]) */
}

def @func_5614() -> Tensor[(3, 8, 15), float64] {
  @func_5612() /* ty=Tensor[(3, 8, 15), float64] */
}

def @func_6284(%var_6282: Tensor[(1, 14, 16), float32]) -> (Tensor[(1, 14, 16), float32], Tensor[(14, 11, 10), uint16]) {
  @func_6281(%var_6282) /* ty=(Tensor[(1, 14, 16), float32], Tensor[(14, 11, 10), uint16]) */
}

def @func_5644() -> (Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) {
  @func_5642() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) */
}

def @func_5133(%var_5131: Tensor[(3, 8, 15), float64]) -> (Tensor[(3, 8, 15), int32], Tensor[(16, 15, 14), uint8], Tensor[(3360), uint8], Tensor[(3, 8, 15), float64]) {
  @func_5130(%var_5131) /* ty=(Tensor[(3, 8, 15), int32], Tensor[(16, 15, 14), uint8], Tensor[(3360), uint8], Tensor[(3, 8, 15), float64]) */
}

def @func_7053(%var_7033: Tensor[(9, 4), float32]) -> (Tensor[(3, 8, 15), float64], Tensor[(12, 3, 13), float32], Tensor[(9, 4), float32], Tensor[(234, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(1, 22), float32], Tensor[(364), float64]) {
  %644 = cast(%var_7033, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
  %645 = cast(meta[relay.Constant][40] /* ty=Tensor[(234, 2), float32] */, dtype="float32") /* ty=Tensor[(234, 2), float32] */;
  %646 = reshape(%644, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), float32] */;
  %647 = reshape(%645, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float32] */;
  %648 = @func_3199(%646, %647) /* ty=(Tensor[(12, 3, 13), float32],) */;
  %649 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 22), float32] */, dtype="float32") /* ty=Tensor[(1, 22), float32] */;
  %650 = reshape(%649, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
  %651 = @func_20(%650) /* ty=(Tensor[(2, 1, 11), float32],) */;
  %652 = @func_5612() /* ty=Tensor[(3, 8, 15), float64] */;
  %653 = cast(%652, dtype="int64") /* ty=Tensor[(3, 8, 15), int64] */;
  %654 = cast(%652, dtype="int64") /* ty=Tensor[(3, 8, 15), int64] */;
  %655 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 22), float32] */, dtype="float32") /* ty=Tensor[(1, 22), float32] */;
  %656 = reshape(%653, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %657 = reshape(%654, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %658 = reshape(%655, newshape=[11, 2]) /* ty=Tensor[(11, 2), float32] */;
  %659 = @func_2097(%656, %657, %658) /* ty=(Tensor[(15, 12, 2), int64], Tensor[(2, ?, 11), float64], Tensor[(3, 8, 15), float32], Tensor[(16, 15, 14), uint8], Tensor[(420, 8), uint8], Tensor[(364), float64], Tensor[(3, 8, 15), float32]) */;
  %660 = %648.0;
  %661 = %651.0;
  %662 = %659.5;
  (%652, %660, %var_7033, meta[relay.Constant][40] /* ty=Tensor[(234, 2), float32] */, %661, meta[relay.Constant][41] /* ty=Tensor[(1, 22), float32] */, %662)
}

def @func_5683() -> Tensor[(3, 8, 15), float64] {
  %663 = fn () -> Tensor[(3, 8, 15), float64] {
    @func_5612() /* ty=Tensor[(3, 8, 15), float64] */
  };
  %663() /* ty=Tensor[(3, 8, 15), float64] */
}

def @func_7224() -> (Tensor[(14, 11, 10), uint16],) {
  %664 = @func_5801() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %665 = %664.0;
  (%665,)
}

def @func_2782(%var_2763: Tensor[(9, 16, 7), float64], %var_2768: Tensor[(24, 14), uint8]) -> (Tensor[(9, 16, 7), float64], Tensor[(3, 16, 7), uint8], Tensor[(24, 14), uint8], Tensor[(2, 1, 11), float32], Tensor[(672), int16]) {
  %666 = cast(%var_2763, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
  %667 = cast(%var_2768, dtype="uint8") /* ty=Tensor[(24, 14), uint8] */;
  %668 = cast(%var_2768, dtype="uint8") /* ty=Tensor[(24, 14), uint8] */;
  %669 = reshape(%667, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint8] */;
  %670 = reshape(%668, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint8] */;
  %671 = cast(meta[relay.Constant][42] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %672 = cast(meta[relay.Constant][42] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %673 = cast(meta[relay.Constant][42] /* ty=Tensor[(672), int16] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %674 = reshape(%671, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int16] */;
  %675 = reshape(%672, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int16] */;
  %676 = reshape(%673, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %677 = @func_477(%674, %675, %676) /* ty=(Tensor[(2, 1, 11), float32], Tensor[(11, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(2, 1, 11), float32], Tensor[(6, 8, 14), bool], Tensor[(2, 1, 11), float32]) */;
  %678 = log(%666) /* ty=Tensor[(9, 16, 7), float64] */;
  %679 = @func_1715(%669, %670) /* ty=Tensor[(3, 16, 7), uint8] */;
  %680 = %677.5;
  (%678, %679, %var_2768, %680, meta[relay.Constant][42] /* ty=Tensor[(672), int16] */)
}

def @func_4678(%var_4642: Tensor[(14, 11, 10), uint16], %var_4662: Tensor[(78), float32], %var_4663: Tensor[(3360), uint8]) -> (Tensor[(14, 11, 10), bool], Tensor[(14, 11, 10), float64], Tensor[(6, 13, 1), float32], Tensor[(78), float32], Tensor[(3360), uint8]) {
  %681 = @func_4335() /* ty=Tensor[(14, 11, 10), uint16] */;
  %682 = cast(%var_4642, dtype="bool") /* ty=Tensor[(14, 11, 10), bool] */;
  %683 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%681, dtype="bool") /* ty=Tensor[(14, 11, 10), bool] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %686 = @func_4526() /* ty=(Tensor[(14, 11, 10), float64], Tensor[(3, 8, 15), float32], Tensor[(36, 10), float32]) */;
  %687 = cast(%var_4662, dtype="float32") /* ty=Tensor[(78), float32] */;
  %688 = cast(%var_4663, dtype="uint8") /* ty=Tensor[(3360), uint8] */;
  %689 = reshape(%687, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), float32] */;
  %690 = reshape(%688, newshape=[3360]) /* ty=Tensor[(3360), uint8] */;
  %691 = @func_3757(%689, %690) /* ty=(Tensor[(6, 13, 1), float32], Tensor[(16, 15, 14), uint8], Tensor[(3360), uint8]) */;
  %692 = greater(%684, %685) /* ty=Tensor[(14, 11, 10), bool] */;
  %693 = %686.0;
  %694 = %691.0;
  (%692, %693, %694, %var_4662, %var_4663)
}

def @func_6250(%var_6248: Tensor[(672), int16]) -> (Tensor[(14, 11, 10), uint16], Tensor[(11, 2), float32], Tensor[(672), int16], Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(3, 8, 15), float32], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32]) {
  @func_6247(%var_6248) /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(11, 2), float32], Tensor[(672), int16], Tensor[(3, 8, 15), float32], Tensor[(360), float32], Tensor[(3, 8, 15), float32], Tensor[(14, 11, 10), uint16], Tensor[(2, 1, 11), float32]) */
}

def @func_7953(%var_7951: Tensor[(130), float64]) -> (Tensor[(3, 8, 15), float64], Tensor[(13, 10, ?), uint16]) {
  @func_7950(%var_7951) /* ty=(Tensor[(3, 8, 15), float64], Tensor[(13, 10, ?), uint16]) */
}

def @func_1624(%var_1622: Tensor[(6, 3, 3), float32]) -> (Tensor[(6, 3, 3), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32]) {
  @func_1621(%var_1622) /* ty=(Tensor[(6, 3, 3), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32]) */
}

def @func_7226() -> (Tensor[(14, 11, 10), uint16],) {
  @func_7224() /* ty=(Tensor[(14, 11, 10), uint16],) */
}

def @func_481(%var_478: Tensor[(6, 8, 14), int16], %var_479: Tensor[(6, 8, 14), int16], %var_480: Tensor[(6, 8, 14), float32]) -> (Tensor[(2, 1, 11), float32], Tensor[(11, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(2, 1, 11), float32], Tensor[(6, 8, 14), bool], Tensor[(2, 1, 11), float32]) {
  %728 = fn (%var_407: Tensor[(6, 8, 14), int16], %var_408: Tensor[(6, 8, 14), int16], %var_442: Tensor[(6, 8, 14), float32]) -> (Tensor[(2, 1, 11), float32], Tensor[(11, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(2, 1, 11), float32], Tensor[(6, 8, 14), bool], Tensor[(2, 1, 11), float32]) {
    %695 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 2), float32] */;
    %696 = reshape(%695, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
    %697 = @func_20(%696) /* ty=(Tensor[(2, 1, 11), float32],) */;
    %698 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 2), float32] */;
    %699 = reshape(%698, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
    %700 = @func_20(%699) /* ty=(Tensor[(2, 1, 11), float32],) */;
    %701 = %697.0;
    %702 = cast(%701, dtype="float32") /* ty=Tensor[(2, 1, 11), float32] */;
    %703 = reshape(%702, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
    %704 = @func_20(%703) /* ty=(Tensor[(2, 1, 11), float32],) */;
    %705 = cast(%var_408, dtype="int16") /* ty=Tensor[(6, 8, 14), int16] */;
    %706 = shape_of(%var_407, dtype="int32") /* ty=Tensor[(3), int32] */;
    %707 = cast(%var_407, dtype="int16") /* ty=Tensor[(6, 8, 14), int16] */;
    %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %709 = subtract(%707, %708) /* ty=Tensor[(6, 8, 14), int16] */;
    %710 = cast(%709, dtype="float32") /* ty=Tensor[(6, 8, 14), float32] */;
    %711 = log10(%710) /* ty=Tensor[(6, 8, 14), float32] */;
    %712 = cast(%709, dtype="float32") /* ty=Tensor[(6, 8, 14), float32] */;
    %713 = shape_of(%711, dtype="int32") /* ty=Tensor[(3), int32] */;
    %714 = cast(%711, dtype="float32") /* ty=Tensor[(6, 8, 14), float32] */;
    %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %716 = add(%714, %715) /* ty=Tensor[(6, 8, 14), float32] */;
    %717 = cast(%var_442, dtype="bool") /* ty=Tensor[(6, 8, 14), bool] */;
    %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
    %719 = cast(%716, dtype="bool") /* ty=Tensor[(6, 8, 14), bool] */;
    %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %721 = %704.0;
    %722 = cast(%721, dtype="float32") /* ty=Tensor[(2, 1, 11), float32] */;
    %723 = reshape(%722, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
    %724 = @func_20(%723) /* ty=(Tensor[(2, 1, 11), float32],) */;
    %725 = %700.0;
    %726 = less(%719, %720) /* ty=Tensor[(6, 8, 14), bool] */;
    %727 = %724.0;
    (%701, meta[relay.Constant][43] /* ty=Tensor[(11, 2), float32] */, %725, %721, %726, %727)
  };
  %728(%var_478, %var_479, %var_480) /* ty=(Tensor[(2, 1, 11), float32], Tensor[(11, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(2, 1, 11), float32], Tensor[(6, 8, 14), bool], Tensor[(2, 1, 11), float32]) */
}

def @func_6007() -> Tensor[(14, 11, 10), uint16] {
  %730 = fn () -> Tensor[(14, 11, 10), uint16] {
    %729 = @func_4277() /* ty=(Tensor[(14, 11, 10), uint16],) */;
    %729.0
  };
  %730() /* ty=Tensor[(14, 11, 10), uint16] */
}

def @func_7676() -> (Tensor[(14, 11, 10), uint16],) {
  %731 = @func_7656() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %732 = %731.0;
  (%732,)
}

def @func_5500() -> (Tensor[(3, 8, 15), float64],) {
  %733 = @func_4695() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %734 = %733.0;
  (%734,)
}

def @func_7678() -> (Tensor[(14, 11, 10), uint16],) {
  @func_7676() /* ty=(Tensor[(14, 11, 10), uint16],) */
}

def @func_3202(%var_3200: Tensor[(12, 3, 1), float32], %var_3201: Tensor[(12, 3, 13), float32]) -> (Tensor[(12, 3, 13), float32],) {
  %738 = fn (%var_3179: Tensor[(12, 3, 1), float32], %var_3180: Tensor[(12, 3, 13), float32]) -> (Tensor[(12, 3, 13), float32],) {
    %735 = cast(%var_3179, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
    %736 = cast(%var_3180, dtype="float32") /* ty=Tensor[(12, 3, 13), float32] */;
    %737 = floor_divide(%735, %736) /* ty=Tensor[(12, 3, 13), float32] */;
    (%737,)
  };
  %738(%var_3200, %var_3201) /* ty=(Tensor[(12, 3, 13), float32],) */
}

def @func_6080() -> (Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), uint16]) {
  @func_6078() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), uint16]) */
}

def @func_8205() -> (Tensor[(14, 11, 10), uint16], Tensor[(16, 7, 16), int32], Tensor[(1792), float64], Tensor[(600), int32]) {
  @func_8203() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(16, 7, 16), int32], Tensor[(1792), float64], Tensor[(600), int32]) */
}

def @func_9444() -> Tensor[(14, 11, 10), float32] {
  @func_9442() /* ty=Tensor[(14, 11, 10), float32] */
}

def @func_2258(%var_2231: Tensor[(15, 5, 15), uint16], %var_2232: Tensor[(15, 5, 15), uint16], %var_2245: Tensor[(15, 5, 15), uint16]) -> (Tensor[(15, 5, 15), uint16], Tensor[(15, 5, 15), bool]) {
  %739 = cast(%var_2232, dtype="uint16") /* ty=Tensor[(15, 5, 15), uint16] */;
  %740 = shape_of(%var_2231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%var_2231, dtype="uint16") /* ty=Tensor[(15, 5, 15), uint16] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %743 = cast(%var_2245, dtype="bool") /* ty=Tensor[(15, 5, 15), bool] */;
  %744 = shape_of(%var_2231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%var_2231, dtype="bool") /* ty=Tensor[(15, 5, 15), bool] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %747 = add(%741, %742) /* ty=Tensor[(15, 5, 15), uint16] */;
  %748 = equal(%745, %746) /* ty=Tensor[(15, 5, 15), bool] */;
  (%747, %748)
}

def @main(%var_9693: Tensor[(1008), float64]) -> Tensor[(1008), uint8] {
  %749 = @func_6673() /* ty=(Tensor[(1008), float64], Tensor[(54), float32], Tensor[(150), uint32]) */;
  %750 = %749.0;
  %751 = cast(%var_9693, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %752 = shape_of(%750, dtype="int32") /* ty=Tensor[(1), int32] */;
  %753 = cast(%750, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?), uint8] */;
  bitwise_and(%753, %754) /* ty=Tensor[(1008), uint8] */
}

def @func_666(%var_665: Tensor[(1, 5, 16), float64]) -> (Tensor[(?, 5, 16), bool], Tensor[(?, 5, 16), int16], Tensor[(1, 5, 16), float32], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) {
  %773 = fn (%var_619: Tensor[(1, 5, 16), float64]) -> (Tensor[(?, 5, 16), bool], Tensor[(?, 5, 16), int16], Tensor[(1, 5, 16), float32], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) {
    %755 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 5, 16), float64] */, dtype="bool") /* ty=Tensor[(1, 5, 16), bool] */;
    %756 = shape_of(%var_619, dtype="int32") /* ty=Tensor[(3), int32] */;
    %757 = cast(%var_619, dtype="bool") /* ty=Tensor[(1, 5, 16), bool] */;
    %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %759 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 5, 16), float64] */, dtype="int16") /* ty=Tensor[(1, 5, 16), int16] */;
    %760 = shape_of(%var_619, dtype="int32") /* ty=Tensor[(3), int32] */;
    %761 = cast(%var_619, dtype="int16") /* ty=Tensor[(1, 5, 16), int16] */;
    %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %763 = cast(%var_619, dtype="float64") /* ty=Tensor[(1, 5, 16), float64] */;
    %764 = sigmoid(%763) /* ty=Tensor[(1, 5, 16), float64] */;
    %765 = cast(%764, dtype="float32") /* ty=Tensor[(1, 5, 16), float32] */;
    %766 = cast(meta[relay.Constant][45] /* ty=Tensor[(22), float32] */, dtype="float32") /* ty=Tensor[(22), float32] */;
    %767 = reshape(%766, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float32] */;
    %768 = @func_20(%767) /* ty=(Tensor[(2, 1, 11), float32],) */;
    %769 = logical_and(%757, %758) /* ty=Tensor[(?, 5, 16), bool] */;
    %770 = add(%761, %762) /* ty=Tensor[(?, 5, 16), int16] */;
    %771 = cosh(%765) /* ty=Tensor[(1, 5, 16), float32] */;
    %772 = %768.0;
    (%769, %770, %771, %772, meta[relay.Constant][45] /* ty=Tensor[(22), float32] */)
  };
  %773(%var_665) /* ty=(Tensor[(?, 5, 16), bool], Tensor[(?, 5, 16), int16], Tensor[(1, 5, 16), float32], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */
}

def @func_7890() -> (Tensor[(14, 11, 10), uint16],) {
  @func_7888() /* ty=(Tensor[(14, 11, 10), uint16],) */
}

def @func_4880() -> (Tensor[(14, 11, 10), uint16],) {
  @func_4878() /* ty=(Tensor[(14, 11, 10), uint16],) */
}

def @func_3551(%var_3548: Tensor[(6, 9, 9), float64], %var_3549: Tensor[(6, 9, 9), float64], %var_3550: Tensor[(6, 9, 9), float64]) -> (Tensor[(6, 9, 9), uint32], Tensor[(6, 9, 9), bool]) {
  %789 = fn (%var_3510: Tensor[(6, 9, 9), float64], %var_3511: Tensor[(6, 9, 9), float64], %var_3524: Tensor[(6, 9, 9), float64]) -> (Tensor[(6, 9, 9), uint32], Tensor[(6, 9, 9), bool]) {
    %774 = cast(%var_3511, dtype="float64") /* ty=Tensor[(6, 9, 9), float64] */;
    %775 = shape_of(%var_3510, dtype="int32") /* ty=Tensor[(3), int32] */;
    %776 = cast(%var_3510, dtype="float64") /* ty=Tensor[(6, 9, 9), float64] */;
    %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %778 = divide(%776, %777) /* ty=Tensor[(6, 9, 9), float64] */;
    %779 = cast(%778, dtype="uint32") /* ty=Tensor[(6, 9, 9), uint32] */;
    %780 = shape_of(%var_3510, dtype="int32") /* ty=Tensor[(3), int32] */;
    %781 = cast(%var_3510, dtype="uint32") /* ty=Tensor[(6, 9, 9), uint32] */;
    %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %783 = cast(%var_3524, dtype="bool") /* ty=Tensor[(6, 9, 9), bool] */;
    %784 = shape_of(%var_3511, dtype="int32") /* ty=Tensor[(3), int32] */;
    %785 = cast(%var_3511, dtype="bool") /* ty=Tensor[(6, 9, 9), bool] */;
    %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %787 = multiply(%781, %782) /* ty=Tensor[(6, 9, 9), uint32] */;
    %788 = equal(%785, %786) /* ty=Tensor[(6, 9, 9), bool] */;
    (%787, %788)
  };
  %789(%var_3548, %var_3549, %var_3550) /* ty=(Tensor[(6, 9, 9), uint32], Tensor[(6, 9, 9), bool]) */
}

def @func_3314(%var_3312: Tensor[(5, 6, 5), uint32], %var_3313: Tensor[(5, 6, 5), uint32]) -> (Tensor[(5, 6, 5), uint32], Tensor[(360), float32], Tensor[(54), float32]) {
  %799 = fn (%var_3289: Tensor[(5, 6, 5), uint32], %var_3290: Tensor[(5, 6, 5), uint32]) -> (Tensor[(5, 6, 5), uint32], Tensor[(360), float32], Tensor[(54), float32]) {
    %790 = cast(%var_3290, dtype="uint32") /* ty=Tensor[(5, 6, 5), uint32] */;
    %791 = shape_of(%var_3289, dtype="int32") /* ty=Tensor[(3), int32] */;
    %792 = cast(%var_3289, dtype="uint32") /* ty=Tensor[(5, 6, 5), uint32] */;
    %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %794 = cast(meta[relay.Constant][46] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
    %795 = reshape(%794, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
    %796 = @func_1621(%795) /* ty=(Tensor[(6, 3, 3), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32]) */;
    %797 = minimum(%792, %793) /* ty=Tensor[(5, 6, 5), uint32] */;
    %798 = %796.2;
    (%797, %798, meta[relay.Constant][46] /* ty=Tensor[(54), float32] */)
  };
  %799(%var_3312, %var_3313) /* ty=(Tensor[(5, 6, 5), uint32], Tensor[(360), float32], Tensor[(54), float32]) */
}

def @func_8035() -> (Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), float64]) {
  %800 = @func_7888() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %801 = @func_5801() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %802 = %801.0;
  %803 = cast(%802, dtype="float64") /* ty=Tensor[(14, 11, 10), float64] */;
  %804 = %800.0;
  %805 = log(%803) /* ty=Tensor[(14, 11, 10), float64] */;
  (%804, %805)
}

def @func_5207(%var_5193: Tensor[(1008), float64], %var_5205: Tensor[(600), int32]) -> (Tensor[(3, 8, 15), float64], Tensor[(3, 8, 15), float64], Tensor[(2, 1, 11), float32], Tensor[(672), int16], Tensor[(3360), uint8], Tensor[(24, 14), uint8], Tensor[(336), uint8], Tensor[(1008), bool], Tensor[(2, 1, 11), float32], Tensor[(600), int32]) {
  %806 = @func_4695() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %807 = @func_4695() /* ty=(Tensor[(3, 8, 15), float64],) */;
  %808 = cast(meta[relay.Constant][47] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %809 = cast(meta[relay.Constant][47] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %810 = cast(meta[relay.Constant][47] /* ty=Tensor[(672), int16] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %811 = reshape(%808, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int16] */;
  %812 = reshape(%809, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), int16] */;
  %813 = reshape(%810, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %814 = @func_477(%811, %812, %813) /* ty=(Tensor[(2, 1, 11), float32], Tensor[(11, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(2, 1, 11), float32], Tensor[(6, 8, 14), bool], Tensor[(2, 1, 11), float32]) */;
  %815 = %806.0;
  %816 = cast(%815, dtype="float64") /* ty=Tensor[(3, 8, 15), float64] */;
  %817 = reshape(%816, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float64] */;
  %818 = @func_5130(%817) /* ty=(Tensor[(3, 8, 15), int32], Tensor[(16, 15, 14), uint8], Tensor[(3360), uint8], Tensor[(3, 8, 15), float64]) */;
  %819 = cast(meta[relay.Constant][48] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %820 = cast(meta[relay.Constant][49] /* ty=Tensor[(336), uint8] */, dtype="uint8") /* ty=Tensor[(336), uint8] */;
  %821 = reshape(%819, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), float64] */;
  %822 = reshape(%820, newshape=[24, 14]) /* ty=Tensor[(24, 14), uint8] */;
  %823 = @func_2782(%821, %822) /* ty=(Tensor[(9, 16, 7), float64], Tensor[(3, 16, 7), uint8], Tensor[(24, 14), uint8], Tensor[(2, 1, 11), float32], Tensor[(672), int16]) */;
  %824 = cast(%var_5193, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %825 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(1008), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %826 = cast(meta[relay.Constant][48] /* ty=Tensor[(1008), float64] */, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?), bool] */;
  %828 = cast(%var_5205, dtype="int32") /* ty=Tensor[(600), int32] */;
  %829 = cast(%var_5205, dtype="int32") /* ty=Tensor[(600), int32] */;
  %830 = reshape(%828, newshape=[15, 8, 5]) /* ty=Tensor[(15, 8, 5), int32] */;
  %831 = reshape(%829, newshape=[15, 8, 5]) /* ty=Tensor[(15, 8, 5), int32] */;
  %832 = @func_2420(%830, %831) /* ty=(Tensor[(15, 8, 5), bool], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
  %833 = %807.0;
  %834 = %814.5;
  %835 = %818.2;
  %836 = %823.2;
  %837 = logical_or(%826, %827) /* ty=Tensor[(1008), bool] */;
  %838 = %832.1;
  (%815, %833, %834, meta[relay.Constant][47] /* ty=Tensor[(672), int16] */, %835, %836, meta[relay.Constant][49] /* ty=Tensor[(336), uint8] */, %837, %838, %var_5205)
}

def @func_22(%var_21: Tensor[(2, 1, 11), float32]) -> (Tensor[(2, 1, 11), float32],) {
  %841 = fn (%var_2: Tensor[(2, 1, 11), float32]) -> (Tensor[(2, 1, 11), float32],) {
    %839 = cast(%var_2, dtype="float32") /* ty=Tensor[(2, 1, 11), float32] */;
    %840 = sigmoid(%839) /* ty=Tensor[(2, 1, 11), float32] */;
    (%840,)
  };
  %841(%var_21) /* ty=(Tensor[(2, 1, 11), float32],) */
}

def @func_5211(%var_5209: Tensor[(1008), float64], %var_5210: Tensor[(600), int32]) -> (Tensor[(3, 8, 15), float64], Tensor[(3, 8, 15), float64], Tensor[(2, 1, 11), float32], Tensor[(672), int16], Tensor[(3360), uint8], Tensor[(24, 14), uint8], Tensor[(336), uint8], Tensor[(1008), bool], Tensor[(2, 1, 11), float32], Tensor[(600), int32]) {
  @func_5207(%var_5209, %var_5210) /* ty=(Tensor[(3, 8, 15), float64], Tensor[(3, 8, 15), float64], Tensor[(2, 1, 11), float32], Tensor[(672), int16], Tensor[(3360), uint8], Tensor[(24, 14), uint8], Tensor[(336), uint8], Tensor[(1008), bool], Tensor[(2, 1, 11), float32], Tensor[(600), int32]) */
}

def @func_2102(%var_2099: Tensor[(15, 12, 2), int64], %var_2100: Tensor[(15, 12, 2), int64], %var_2101: Tensor[(11, 2), float32]) -> (Tensor[(15, 12, 2), int64], Tensor[(2, ?, 11), float64], Tensor[(3, 8, 15), float32], Tensor[(16, 15, 14), uint8], Tensor[(420, 8), uint8], Tensor[(364), float64], Tensor[(3, 8, 15), float32]) {
  @func_2097(%var_2099, %var_2100, %var_2101) /* ty=(Tensor[(15, 12, 2), int64], Tensor[(2, ?, 11), float64], Tensor[(3, 8, 15), float32], Tensor[(16, 15, 14), uint8], Tensor[(420, 8), uint8], Tensor[(364), float64], Tensor[(3, 8, 15), float32]) */
}

def @func_4878() -> (Tensor[(14, 11, 10), uint16],) {
  %842 = @func_4335() /* ty=Tensor[(14, 11, 10), uint16] */;
  (%842,)
}

def @func_5569() -> (Tensor[(600), int32],) {
  %845 = fn () -> (Tensor[(600), int32],) {
    %843 = @func_4453() /* ty=(Tensor[(54), float32], Tensor[(14, 11, 10), int16], Tensor[(6, 3, 3), float64], Tensor[(600), int32], Tensor[(45, 2), float64], Tensor[(600), int32]) */;
    %844 = %843.5;
    (%844,)
  };
  %845() /* ty=(Tensor[(600), int32],) */
}

def @func_8511(%var_8509: Tensor[(36), float32], %var_8510: Tensor[(280), float64]) -> (Tensor[(14, 11, 10), float32], Tensor[(36), float32], Tensor[(468), float32], Tensor[(80), float64], Tensor[(280), float64], Tensor[(14, 11, 10), uint16]) {
  %865 = fn (%var_8479: Tensor[(36), float32], %var_8481: Tensor[(280), float64]) -> (Tensor[(14, 11, 10), float32], Tensor[(36), float32], Tensor[(468), float32], Tensor[(80), float64], Tensor[(280), float64], Tensor[(14, 11, 10), uint16]) {
    %846 = @func_6541() /* ty=(Tensor[(14, 11, 10), float32],) */;
    %847 = cast(%var_8479, dtype="float32") /* ty=Tensor[(36), float32] */;
    %848 = cast(meta[relay.Constant][50] /* ty=Tensor[(468), float32] */, dtype="float32") /* ty=Tensor[(468), float32] */;
    %849 = cast(%var_8481, dtype="float64") /* ty=Tensor[(280), float64] */;
    %850 = cast(meta[relay.Constant][51] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
    %851 = reshape(%847, newshape=[9, 4]) /* ty=Tensor[(9, 4), float32] */;
    %852 = reshape(%848, newshape=[468]) /* ty=Tensor[(468), float32] */;
    %853 = reshape(%849, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), float64] */;
    %854 = reshape(%850, newshape=[4, 20]) /* ty=Tensor[(4, 20), float64] */;
    %855 = @func_4241(%851, %852, %853, %854) /* ty=(Tensor[(12, 3, 13), float32], Tensor[(9, 4), float32], Tensor[(468), float32], Tensor[(15, 3, 9), float32], Tensor[(3, 135), float32], Tensor[(3360), uint8], Tensor[(5, 8, 7), bool], Tensor[(1, 5, 16), float32], Tensor[(4, 20), float64], Tensor[(3, 16, 7), uint8], Tensor[(1, 336), uint8]) */;
    %856 = %855.6;
    %857 = cast(%856, dtype="float64") /* ty=Tensor[(5, 8, 7), float64] */;
    %858 = shape_of(%var_8481, dtype="int32") /* ty=Tensor[(1), int32] */;
    %859 = cast(%var_8481, dtype="float64") /* ty=Tensor[(280), float64] */;
    %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?), float64] */;
    %861 = @func_5642() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) */;
    %862 = %846.0;
    %863 = floor_divide(%859, %860) /* ty=Tensor[(280), float64] */;
    %864 = %861.0;
    (%862, %var_8479, meta[relay.Constant][50] /* ty=Tensor[(468), float32] */, meta[relay.Constant][51] /* ty=Tensor[(80), float64] */, %863, %864)
  };
  %865(%var_8509, %var_8510) /* ty=(Tensor[(14, 11, 10), float32], Tensor[(36), float32], Tensor[(468), float32], Tensor[(80), float64], Tensor[(280), float64], Tensor[(14, 11, 10), uint16]) */
}

def @func_8706(%var_8697: Tensor[(22, 1), float32]) -> (Tensor[(3, 8, 15), float32], Tensor[(15, 12, 2), int64], Tensor[(22, 1), float32]) {
  %866 = @func_5642() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float32], Tensor[(12, 30), float32]) */;
  %867 = %866.1;
  %868 = cast(%867, dtype="float32") /* ty=Tensor[(3, 8, 15), float32] */;
  %869 = asin(%868) /* ty=Tensor[(3, 8, 15), float32] */;
  %870 = cast(%869, dtype="int64") /* ty=Tensor[(3, 8, 15), int64] */;
  %871 = cast(%869, dtype="int64") /* ty=Tensor[(3, 8, 15), int64] */;
  %872 = cast(%var_8697, dtype="float32") /* ty=Tensor[(22, 1), float32] */;
  %873 = reshape(%870, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %874 = reshape(%871, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), int64] */;
  %875 = reshape(%872, newshape=[11, 2]) /* ty=Tensor[(11, 2), float32] */;
  %876 = @func_2097(%873, %874, %875) /* ty=(Tensor[(15, 12, 2), int64], Tensor[(2, ?, 11), float64], Tensor[(3, 8, 15), float32], Tensor[(16, 15, 14), uint8], Tensor[(420, 8), uint8], Tensor[(364), float64], Tensor[(3, 8, 15), float32]) */;
  %877 = %876.0;
  (%869, %877, %var_8697)
}

def @func_3761(%var_3759: Tensor[(6, 13, 1), float32], %var_3760: Tensor[(3360), uint8]) -> (Tensor[(6, 13, 1), float32], Tensor[(16, 15, 14), uint8], Tensor[(3360), uint8]) {
  @func_3757(%var_3759, %var_3760) /* ty=(Tensor[(6, 13, 1), float32], Tensor[(16, 15, 14), uint8], Tensor[(3360), uint8]) */
}

def @func_4454() -> (Tensor[(54), float32], Tensor[(14, 11, 10), int16], Tensor[(6, 3, 3), float64], Tensor[(600), int32], Tensor[(45, 2), float64], Tensor[(600), int32]) {
  %896 = fn () -> (Tensor[(54), float32], Tensor[(14, 11, 10), int16], Tensor[(6, 3, 3), float64], Tensor[(600), int32], Tensor[(45, 2), float64], Tensor[(600), int32]) {
    %878 = @func_4335() /* ty=Tensor[(14, 11, 10), uint16] */;
    %879 = cast(meta[relay.Constant][53] /* ty=Tensor[(14, 11, 10), uint16] */, dtype="int16") /* ty=Tensor[(14, 11, 10), int16] */;
    %880 = shape_of(%878, dtype="int32") /* ty=Tensor[(3), int32] */;
    %881 = cast(%878, dtype="int16") /* ty=Tensor[(14, 11, 10), int16] */;
    %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %883 = cast(meta[relay.Constant][52] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
    %884 = reshape(%883, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
    %885 = @func_1621(%884) /* ty=(Tensor[(6, 3, 3), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32]) */;
    %886 = %885.0;
    %887 = cast(%886, dtype="float64") /* ty=Tensor[(6, 3, 3), float64] */;
    %888 = cast(meta[relay.Constant][54] /* ty=Tensor[(45, 2), float64] */, dtype="float64") /* ty=Tensor[(45, 2), float64] */;
    %889 = cast(meta[relay.Constant][55] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
    %890 = reshape(%888, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), float64] */;
    %891 = reshape(%889, newshape=[600]) /* ty=Tensor[(600), int32] */;
    %892 = @func_3160(%890, %891) /* ty=(Tensor[(15, 8, 5), bool], Tensor[(600), int32], Tensor[(15, 2, 3), float64]) */;
    %893 = maximum(%881, %882) /* ty=Tensor[(14, 11, 10), int16] */;
    %894 = asinh(%887) /* ty=Tensor[(6, 3, 3), float64] */;
    %895 = %892.1;
    (meta[relay.Constant][52] /* ty=Tensor[(54), float32] */, %893, %894, %895, meta[relay.Constant][54] /* ty=Tensor[(45, 2), float64] */, meta[relay.Constant][55] /* ty=Tensor[(600), int32] */)
  };
  %896() /* ty=(Tensor[(54), float32], Tensor[(14, 11, 10), int16], Tensor[(6, 3, 3), float64], Tensor[(600), int32], Tensor[(45, 2), float64], Tensor[(600), int32]) */
}

def @func_9614(%var_9612: Tensor[(9, 7, 11), int64], %var_9613: Tensor[(9, 7, 11), int64]) -> (Tensor[(3, 8, 15), float64], Tensor[(9, 7, 11), float32]) {
  @func_9610(%var_9612, %var_9613) /* ty=(Tensor[(3, 8, 15), float64], Tensor[(9, 7, 11), float32]) */
}

def @func_3799(%var_3797: Tensor[(12, 2, 5), float64]) -> (Tensor[(12, 2, 5), float64],) {
  @func_3796(%var_3797) /* ty=(Tensor[(12, 2, 5), float64],) */
}

def @func_7056(%var_7054: Tensor[(9, 4), float32]) -> (Tensor[(3, 8, 15), float64], Tensor[(12, 3, 13), float32], Tensor[(9, 4), float32], Tensor[(234, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(1, 22), float32], Tensor[(364), float64]) {
  @func_7053(%var_7054) /* ty=(Tensor[(3, 8, 15), float64], Tensor[(12, 3, 13), float32], Tensor[(9, 4), float32], Tensor[(234, 2), float32], Tensor[(2, 1, 11), float32], Tensor[(1, 22), float32], Tensor[(364), float64]) */
}

def @func_6181() -> Tensor[(1125), float64] {
  @func_6179() /* ty=Tensor[(1125), float64] */
}

def @func_6606() -> (Tensor[(14, 11, 10), uint16],) {
  @func_6604() /* ty=(Tensor[(14, 11, 10), uint16],) */
}

def @func_4855() -> (Tensor[(14, 11, 10), uint16], Tensor[(3, 16, 7), uint8], Tensor[(1008), float64], Tensor[(168, 2), uint8]) {
  %897 = @func_4277() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %898 = cast(meta[relay.Constant][56] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %899 = cast(meta[relay.Constant][57] /* ty=Tensor[(168, 2), uint8] */, dtype="uint8") /* ty=Tensor[(168, 2), uint8] */;
  %900 = reshape(%898, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), float64] */;
  %901 = reshape(%899, newshape=[24, 14]) /* ty=Tensor[(24, 14), uint8] */;
  %902 = @func_2782(%900, %901) /* ty=(Tensor[(9, 16, 7), float64], Tensor[(3, 16, 7), uint8], Tensor[(24, 14), uint8], Tensor[(2, 1, 11), float32], Tensor[(672), int16]) */;
  %903 = %897.0;
  %904 = %902.1;
  (%903, %904, meta[relay.Constant][56] /* ty=Tensor[(1008), float64] */, meta[relay.Constant][57] /* ty=Tensor[(168, 2), uint8] */)
}

def @func_5801() -> (Tensor[(14, 11, 10), uint16],) {
  %905 = @func_4277() /* ty=(Tensor[(14, 11, 10), uint16],) */;
  %906 = %905.0;
  (%906,)
}

def @func_6098() -> Tensor[(36, 10), float32] {
  @func_6096() /* ty=Tensor[(36, 10), float32] */
}

def @func_1621(%var_1584: Tensor[(6, 3, 3), float32]) -> (Tensor[(6, 3, 3), float32], Tensor[(3, 8, 15), float32], Tensor[(360), float32]) {
  %907 = cast(%var_1584, dtype="float32") /* ty=Tensor[(6, 3, 3), float32] */;
  %908 = cast(meta[relay.Constant][58] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %909 = reshape(%908, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), float32] */;
  %910 = @func_1542(%909) /* ty=(Tensor[(3, 8, 15), float32],) */;
  %911 = erf(%907) /* ty=Tensor[(6, 3, 3), float32] */;
  %912 = %910.0;
  (%911, %912, meta[relay.Constant][58] /* ty=Tensor[(360), float32] */)
}

def @func_2263(%var_2260: Tensor[(15, 5, 15), uint16], %var_2261: Tensor[(15, 5, 15), uint16], %var_2262: Tensor[(15, 5, 15), uint16]) -> (Tensor[(15, 5, 15), uint16], Tensor[(15, 5, 15), bool]) {
  @func_2258(%var_2260, %var_2261, %var_2262) /* ty=(Tensor[(15, 5, 15), uint16], Tensor[(15, 5, 15), bool]) */
}

def @func_5245(%var_5243: Tensor[(600), int32]) -> (Tensor[(14, 11, 10), uint16], Tensor[(600), int32], Tensor[(90), float64], Tensor[(600), int32], Tensor[(600), int32]) {
  @func_5242(%var_5243) /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(600), int32], Tensor[(90), float64], Tensor[(600), int32], Tensor[(600), int32]) */
}

def @func_1580(%var_1578: Tensor[(7, 4, 13), float32]) -> (Tensor[(7, 4, 13), float32], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) {
  @func_1577(%var_1578) /* ty=(Tensor[(7, 4, 13), float32], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */
}

def @func_6542() -> (Tensor[(14, 11, 10), float32],) {
  %917 = fn () -> (Tensor[(14, 11, 10), float32],) {
    %913 = @func_6352() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(14, 11, 10), uint16], Tensor[(3, 8, 15), float64]) */;
    %914 = %913.1;
    %915 = cast(%914, dtype="float32") /* ty=Tensor[(14, 11, 10), float32] */;
    %916 = acosh(%915) /* ty=Tensor[(14, 11, 10), float32] */;
    (%916,)
  };
  %917() /* ty=(Tensor[(14, 11, 10), float32],) */
}

def @func_9610(%var_9593: Tensor[(9, 7, 11), int64], %var_9594: Tensor[(9, 7, 11), int64]) -> (Tensor[(3, 8, 15), float64], Tensor[(9, 7, 11), float32]) {
  %918 = @func_4633() /* ty=(Tensor[(3, 8, 15), float64], Tensor[(15, 5, 15), bool], Tensor[(1125), uint16]) */;
  %919 = cast(%var_9594, dtype="bool") /* ty=Tensor[(9, 7, 11), bool] */;
  %920 = shape_of(%var_9593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %921 = cast(%var_9593, dtype="bool") /* ty=Tensor[(9, 7, 11), bool] */;
  %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %923 = less_equal(%921, %922) /* ty=Tensor[(9, 7, 11), bool] */;
  %924 = cast(%var_9594, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
  %925 = shape_of(%923, dtype="int32") /* ty=Tensor[(3), int32] */;
  %926 = cast(%923, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %928 = %918.0;
  %929 = power(%926, %927) /* ty=Tensor[(9, 7, 11), float32] */;
  (%928, %929)
}

def @func_8203() -> (Tensor[(14, 11, 10), uint16], Tensor[(16, 7, 16), int32], Tensor[(1792), float64], Tensor[(600), int32]) {
  %930 = @func_6078() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), uint16]) */;
  %931 = cast(meta[relay.Constant][59] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %932 = cast(meta[relay.Constant][59] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %933 = reshape(%931, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), float64] */;
  %934 = reshape(%932, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), float64] */;
  %935 = @func_4488(%933, %934) /* ty=(Tensor[(16, 7, 16), int32],) */;
  %936 = @func_5568() /* ty=(Tensor[(600), int32],) */;
  %937 = %930.1;
  %938 = %935.0;
  %939 = %936.0;
  (%937, %938, meta[relay.Constant][59] /* ty=Tensor[(1792), float64] */, %939)
}

def @func_4246(%var_4242: Tensor[(9, 4), float32], %var_4243: Tensor[(468), float32], %var_4244: Tensor[(5, 8, 7), float64], %var_4245: Tensor[(4, 20), float64]) -> (Tensor[(12, 3, 13), float32], Tensor[(9, 4), float32], Tensor[(468), float32], Tensor[(15, 3, 9), float32], Tensor[(3, 135), float32], Tensor[(3360), uint8], Tensor[(5, 8, 7), bool], Tensor[(1, 5, 16), float32], Tensor[(4, 20), float64], Tensor[(3, 16, 7), uint8], Tensor[(1, 336), uint8]) {
  %968 = fn (%var_4184: Tensor[(9, 4), float32], %var_4185: Tensor[(468), float32], %var_4212: Tensor[(5, 8, 7), float64], %var_4228: Tensor[(4, 20), float64]) -> (Tensor[(12, 3, 13), float32], Tensor[(9, 4), float32], Tensor[(468), float32], Tensor[(15, 3, 9), float32], Tensor[(3, 135), float32], Tensor[(3360), uint8], Tensor[(5, 8, 7), bool], Tensor[(1, 5, 16), float32], Tensor[(4, 20), float64], Tensor[(3, 16, 7), uint8], Tensor[(1, 336), uint8]) {
    %940 = cast(%var_4184, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
    %941 = cast(%var_4185, dtype="float32") /* ty=Tensor[(468), float32] */;
    %942 = reshape(%940, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), float32] */;
    %943 = reshape(%941, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float32] */;
    %944 = @func_3199(%942, %943) /* ty=(Tensor[(12, 3, 13), float32],) */;
    %945 = cast(meta[relay.Constant][60] /* ty=Tensor[(3, 135), float32] */, dtype="float32") /* ty=Tensor[(3, 135), float32] */;
    %946 = cast(meta[relay.Constant][61] /* ty=Tensor[(3360), uint8] */, dtype="uint8") /* ty=Tensor[(3360), uint8] */;
    %947 = reshape(%945, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
    %948 = reshape(%946, newshape=[14, 240]) /* ty=Tensor[(14, 240), uint8] */;
    %949 = @func_2136(%947, %948) /* ty=(Tensor[(15, 3, 9), float32], Tensor[(2, 1, 11), float32], Tensor[(672), int16], Tensor[(16, 15, 14), uint8], Tensor[(14, 240), uint8], Tensor[(2, 1, 11), float32]) */;
    %950 = cast(meta[relay.Constant][62] /* ty=Tensor[(5, 8, 7), float64] */, dtype="float64") /* ty=Tensor[(5, 8, 7), float64] */;
    %951 = sin(%950) /* ty=Tensor[(5, 8, 7), float64] */;
    %952 = cast(%var_4212, dtype="bool") /* ty=Tensor[(5, 8, 7), bool] */;
    %953 = shape_of(%951, dtype="int32") /* ty=Tensor[(3), int32] */;
    %954 = cast(%951, dtype="bool") /* ty=Tensor[(5, 8, 7), bool] */;
    %955 = dyn.reshape(%952, %953, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %956 = cast(%var_4228, dtype="float64") /* ty=Tensor[(4, 20), float64] */;
    %957 = reshape(%956, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), float64] */;
    %958 = @func_664(%957) /* ty=(Tensor[(?, 5, 16), bool], Tensor[(?, 5, 16), int16], Tensor[(1, 5, 16), float32], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
    %959 = cast(meta[relay.Constant][63] /* ty=Tensor[(1, 336), uint8] */, dtype="uint8") /* ty=Tensor[(1, 336), uint8] */;
    %960 = cast(meta[relay.Constant][63] /* ty=Tensor[(1, 336), uint8] */, dtype="uint8") /* ty=Tensor[(1, 336), uint8] */;
    %961 = reshape(%959, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint8] */;
    %962 = reshape(%960, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint8] */;
    %963 = %944.0;
    %964 = %949.0;
    %965 = greater_equal(%954, %955) /* ty=Tensor[(5, 8, 7), bool] */;
    %966 = %958.2;
    %967 = @func_1715(%961, %962) /* ty=Tensor[(3, 16, 7), uint8] */;
    (%963, %var_4184, %var_4185, %964, meta[relay.Constant][60] /* ty=Tensor[(3, 135), float32] */, meta[relay.Constant][61] /* ty=Tensor[(3360), uint8] */, %965, %966, %var_4228, %967, meta[relay.Constant][63] /* ty=Tensor[(1, 336), uint8] */)
  };
  %968(%var_4242, %var_4243, %var_4244, %var_4245) /* ty=(Tensor[(12, 3, 13), float32], Tensor[(9, 4), float32], Tensor[(468), float32], Tensor[(15, 3, 9), float32], Tensor[(3, 135), float32], Tensor[(3360), uint8], Tensor[(5, 8, 7), bool], Tensor[(1, 5, 16), float32], Tensor[(4, 20), float64], Tensor[(3, 16, 7), uint8], Tensor[(1, 336), uint8]) */
}

def @func_8095(%var_8094: Tensor[(364), float32]) -> (Tensor[(150), uint32], Tensor[(22), float32], Tensor[(364), float32], Tensor[(14, 11, 10), uint16]) {
  %976 = fn (%var_8072: Tensor[(364), float32]) -> (Tensor[(150), uint32], Tensor[(22), float32], Tensor[(364), float32], Tensor[(14, 11, 10), uint16]) {
    %969 = cast(%var_8072, dtype="float32") /* ty=Tensor[(364), float32] */;
    %970 = reshape(%969, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), float32] */;
    %971 = @func_1577(%970) /* ty=(Tensor[(7, 4, 13), float32], Tensor[(2, 1, 11), float32], Tensor[(22), float32]) */;
    %972 = @func_5042() /* ty=(Tensor[(14, 11, 10), uint16],) */;
    %973 = @func_7188() /* ty=Tensor[(150), uint32] */;
    %974 = %971.2;
    %975 = %972.0;
    (%973, %974, %var_8072, %975)
  };
  %976(%var_8094) /* ty=(Tensor[(150), uint32], Tensor[(22), float32], Tensor[(364), float32], Tensor[(14, 11, 10), uint16]) */
}

def @func_7658() -> (Tensor[(14, 11, 10), uint16],) {
  @func_7656() /* ty=(Tensor[(14, 11, 10), uint16],) */
}

def @func_5473(%var_5471: Tensor[(5, 9, 14), float64]) -> Tensor[(5, 9, 14), float64] {
  @func_5470(%var_5471) /* ty=Tensor[(5, 9, 14), float64] */
}

def @func_7538() -> (Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), float32]) {
  @func_7536() /* ty=(Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), uint16], Tensor[(14, 11, 10), float32]) */
}

def @func_9208(%var_9200: Tensor[(90), float64]) -> (Tensor[(3, 8, 15), float64], Tensor[(3, 8, 15), float64], Tensor[(30), int8], Tensor[(90), float64], Tensor[(36), float32]) {
  %977 = cast(meta[relay.Constant][64] /* ty=Tensor[(30), int8] */, dtype="int8") /* ty=Tensor[(30), int8] */;
  %978 = @func_9001() /* ty=Tensor[(3, 8, 15), float64] */;
  %979 = cast(%978, dtype="int8") /* ty=Tensor[(3, 8, 15), int8] */;
  %980 = cast(%var_9200, dtype="float64") /* ty=Tensor[(90), float64] */;
  %981 = cast(meta[relay.Constant][65] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %982 = reshape(%977, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), int8] */;
  %983 = reshape(%979, newshape=[12, 6, 5]) /* ty=Tensor[(12, 6, 5), int8] */;
  %984 = reshape(%980, newshape=[45, 2]) /* ty=Tensor[(45, 2), float64] */;
  %985 = reshape(%981, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %986 = @func_7415(%982, %983, %984, %985) /* ty=(Tensor[(12, 6, 5), int8], Tensor[(3, 8, 15), bool], Tensor[(15, 8, 5), bool], Tensor[(45, 2), float64], Tensor[(600, 1), int32], Tensor[(12, 6, 5), float64], Tensor[(9, 4), float32], Tensor[(36), float32], Tensor[(3, 8, 15), float64]) */;
  %987 = %986.8;
  (%978, %987, meta[relay.Constant][64] /* ty=Tensor[(30), int8] */, %var_9200, meta[relay.Constant][65] /* ty=Tensor[(36), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen501/build/output.py", line 2353, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:24:55] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

