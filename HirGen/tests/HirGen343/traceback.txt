==========mod==========
#[version = "0.0.5"]
def @func_2698() -> (Tensor[(11, 1, 14), float32],) {
  %0 = @func_614() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %1 = %0.0;
  (%1,)
}

def @func_3247() -> Tensor[(11, 1, 14), float64] {
  %2 = @func_1177() /* ty=(Tensor[(11, 1, 14), float64], Tensor[(11, ?, 14), bool]) */;
  %2.0
}

def @func_6292() -> Tensor[(11, 1, 14), float64] {
  %3 = @func_220() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) */;
  %3.1
}

def @func_1132(%var_1093: Tensor[(1, 7, 9), float32]) -> (Tensor[(?, 7, 9), int16], Tensor[(1, 7, 9), float32], Tensor[(?, 7, 9), bool], Tensor[(11, 1, 14), float32], Tensor[(11, 11, 14), int8], Tensor[(1694), float32]) {
  %4 = cast(%var_1093, dtype="float32") /* ty=Tensor[(1, 7, 9), float32] */;
  %5 = asin(%4) /* ty=Tensor[(1, 7, 9), float32] */;
  %6 = cast(%var_1093, dtype="int16") /* ty=Tensor[(1, 7, 9), int16] */;
  %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%5, dtype="int16") /* ty=Tensor[(1, 7, 9), int16] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %10 = cast(%var_1093, dtype="float32") /* ty=Tensor[(1, 7, 9), float32] */;
  %11 = cast(%5, dtype="bool") /* ty=Tensor[(1, 7, 9), bool] */;
  %12 = shape_of(%var_1093, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%var_1093, dtype="bool") /* ty=Tensor[(1, 7, 9), bool] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %15 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(1694), float32] */, dtype="float32") /* ty=Tensor[(1694), float32] */;
  %17 = reshape(%16, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), float32] */;
  %18 = right_shift(%8, %9) /* ty=Tensor[(?, 7, 9), int16] */;
  %19 = rsqrt(%10) /* ty=Tensor[(1, 7, 9), float32] */;
  %20 = less_equal(%13, %14) /* ty=Tensor[(?, 7, 9), bool] */;
  %21 = %15.0;
  %22 = @func_349(%17) /* ty=Tensor[(11, 11, 14), int8] */;
  (%18, %19, %20, %21, %22, meta[relay.Constant][0] /* ty=Tensor[(1694), float32] */)
}

def @func_3367() -> (Tensor[(11, ?, 14), uint8],) {
  %23 = @func_2515() /* ty=(Tensor[(1, 7, 9), float32], Tensor[(7, 9), float32], Tensor[(11, ?, 14), uint8], Tensor[(11, ?, 14), uint8]) */;
  %24 = %23.2;
  (%24,)
}

def @func_3342() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %25 = @func_1015() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %26 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %27 = %25.0;
  %28 = %26.0;
  (%27, %28)
}

def @func_3910() -> (Tensor[(11, 1, 14), float64], Tensor[(11, 1, 14), float32]) {
  %29 = @func_614() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %30 = @func_1686() /* ty=Tensor[(11, 1, 14), float64] */;
  %31 = %29.0;
  (%30, %31)
}

def @func_5407() -> (Tensor[(11, 1, 14), float32],) {
  %32 = @func_2200() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %33 = %32.0;
  (%33,)
}

def @func_5058(%var_5038: uint16, %var_5039: Tensor[(3, 4, 1), uint16]) -> Tensor[(3, 4, ?), bool] {
  %34 = cast(%var_5038, dtype="uint16") /* ty=uint16 */;
  %35 = cast(%var_5039, dtype="uint16") /* ty=Tensor[(3, 4, 1), uint16] */;
  %36 = left_shift(%34, %35) /* ty=Tensor[(3, 4, 1), uint16] */;
  %37 = cast(%var_5039, dtype="bool") /* ty=Tensor[(3, 4, 1), bool] */;
  %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%36, dtype="bool") /* ty=Tensor[(3, 4, 1), bool] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%39, %40) /* ty=Tensor[(3, 4, ?), bool] */
}

def @func_1518() -> (Tensor[(11, 1, 14), float32],) {
  %41 = @func_965() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %42 = %41.0;
  (%42,)
}

def @func_614() -> (Tensor[(11, 1, 14), float32],) {
  %43 = @func_573() /* ty=Tensor[(11, 1, 14), float32] */;
  (%43,)
}

def @func_3576() -> (Tensor[(11, 9, 14), int8], Tensor[(11, 1, 14), float32]) {
  %44 = @func_2736() /* ty=(Tensor[(11, 9, 14), int8],) */;
  %45 = %44.0;
  %46 = @func_573() /* ty=Tensor[(11, 1, 14), float32] */;
  (%45, %46)
}

def @func_4468() -> Tensor[(11, 1, 14), float32] {
  @func_2009() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_64() -> Tensor[(11, 1, 14), float32] {
  %47 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 1, 14), float32] */, dtype="float32") /* ty=Tensor[(11, 1, 14), float32] */;
  cosh(%47) /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_1015() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %48 = @func_220() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) */;
  %49 = @func_220() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) */;
  %50 = %48.0;
  %51 = %49.0;
  (%50, %51)
}

def @func_4075() -> (Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool]) {
  %52 = @func_2693() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), uint16]) */;
  %53 = @func_1425() /* ty=(Tensor[(11, ?, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, ?, 14), bool]) */;
  %54 = %52.0;
  %55 = %53.2;
  (%54, %55)
}

def @func_6219() -> (Tensor[(11, 1, 14), float32],) {
  %56 = @func_5198() /* ty=Tensor[(11, 1, 14), float32] */;
  (%56,)
}

def @func_389() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %57 = @func_220() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) */;
  %58 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
  %59 = %57.0;
  (%58, %59)
}

def @func_3770() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %60 = @func_389() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %61 = @func_3383() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %62 = %60.1;
  %63 = %61.1;
  (%62, %63)
}

def @func_77() -> Tensor[(11, 1, 14), float32] {
  @func_64() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_4124() -> Tensor[(11, 9, 14), int8] {
  @func_2601() /* ty=Tensor[(11, 9, 14), int8] */
}

def @func_5198() -> Tensor[(11, 1, 14), float32] {
  @func_64() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_5599() -> (Tensor[(11, 1, 14), float32],) {
  %64 = @func_4542() /* ty=(Tensor[(11, 1, 14), float64], Tensor[(11, 1, 14), float32]) */;
  %65 = %64.1;
  (%65,)
}

def @func_523() -> (Tensor[(11, 1, 14), float32],) {
  %66 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
  (%66,)
}

def @func_5317() -> Tensor[(11, ?, 14), float64] {
  %67 = @func_1083() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), float64], Tensor[(11, 11, 14), int8], Tensor[(1694), float32]) */;
  %67.1
}

def @func_5543() -> (Tensor[(11, ?, 14), float64], Tensor[(11, 1, 14), float32]) {
  %68 = @func_5198() /* ty=Tensor[(11, 1, 14), float32] */;
  %69 = @func_1015() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %70 = %69.1;
  %71 = cast(%70, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %72 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%68, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %75 = floor_divide(%73, %74) /* ty=Tensor[(11, ?, 14), float64] */;
  %76 = @func_4848() /* ty=Tensor[(11, 1, 14), float32] */;
  (%75, %76)
}

def @func_6245() -> (Tensor[(11, 1, 14), float32],) {
  %77 = @func_2555() /* ty=Tensor[(11, 1, 14), float32] */;
  (%77,)
}

def @func_2555() -> Tensor[(11, 1, 14), float32] {
  %78 = @func_1823() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %78.2
}

def @func_160() -> (Tensor[(5), float64], Tensor[(11, ?, 14), int64], Tensor[(11, ?, 14), float32], Tensor[(5, 1, 1), bool], Tensor[(11, 1, 14), float32]) {
  %79 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
  %80 = cast(%79, dtype="float32") /* ty=Tensor[(11, 1, 14), float32] */;
  %81 = sqrt(%80) /* ty=Tensor[(11, 1, 14), float32] */;
  %82 = cast(%79, dtype="int64") /* ty=Tensor[(11, 1, 14), int64] */;
  %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%81, dtype="int64") /* ty=Tensor[(11, 1, 14), int64] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %86 = add(%84, %85) /* ty=Tensor[(11, ?, 14), int64] */;
  %87 = cast(%86, dtype="int64") /* ty=Tensor[(11, ?, 14), int64] */;
  %88 = cast(0.053013f64 /* ty=float64 */, dtype="int64") /* ty=int64 */;
  %89 = cast(%79, dtype="int16") /* ty=Tensor[(11, 1, 14), int16] */;
  %90 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%81, dtype="int16") /* ty=Tensor[(11, 1, 14), int16] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %93 = bitwise_and(%91, %92) /* ty=Tensor[(11, ?, 14), int16] */;
  %94 = @func_77() /* ty=Tensor[(11, 1, 14), float32] */;
  %95 = cast(%94, dtype="float32") /* ty=Tensor[(11, 1, 14), float32] */;
  %96 = shape_of(%93, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%93, dtype="float32") /* ty=Tensor[(11, ?, 14), float32] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %99 = cast(0.053013f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %100 = cast(meta[relay.Constant][2] /* ty=Tensor[(5), float64] */, dtype="float64") /* ty=Tensor[(5), float64] */;
  %101 = reshape(%99, newshape=[]) /* ty=float64 */;
  %102 = reshape(%100, newshape=[5, 1, 1]) /* ty=Tensor[(5, 1, 1), float64] */;
  %103 = @func_47(%101, %102) /* ty=(Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) */;
  %104 = %103.1;
  %105 = cast(%104, dtype="bool") /* ty=Tensor[(5, 1, 1), bool] */;
  %106 = cast(0.053013f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %107 = subtract(%87, %88) /* ty=Tensor[(11, ?, 14), int64] */;
  %108 = mod(%97, %98) /* ty=Tensor[(11, ?, 14), float32] */;
  %109 = greater(%105, %106) /* ty=Tensor[(5, 1, 1), bool] */;
  %110 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
  (meta[relay.Constant][2] /* ty=Tensor[(5), float64] */, %107, %108, %109, %110)
}

def @func_5579(%var_5560: Tensor[(2464), float32]) -> (Tensor[(11, 8, 14), bool], Tensor[(11, 6, 14), bool], Tensor[(2464), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %111 = @func_5198() /* ty=Tensor[(11, 1, 14), float32] */;
  %112 = cast(%111, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %113 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 8, 14), float32] */, dtype="bool") /* ty=Tensor[(11, 8, 14), bool] */;
  %114 = cast(%var_5560, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %115 = cast(%var_5560, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %116 = reshape(%114, newshape=[11, 16, 14]) /* ty=Tensor[(11, 16, 14), float32] */;
  %117 = reshape(%115, newshape=[11, 16, 14]) /* ty=Tensor[(11, 16, 14), float64] */;
  %118 = @func_4708(%116, %117) /* ty=(Tensor[(11, 16, 14), int16], Tensor[(11, 6, 14), bool]) */;
  %119 = @func_2888() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, 1, 14), float32], Tensor[(2, 4, 8), bool], Tensor[(154, 2), float32], Tensor[(64, 1), bool]) */;
  %120 = @func_5160() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %121 = greater_equal(%112, %113) /* ty=Tensor[(11, 8, 14), bool] */;
  %122 = %118.1;
  %123 = %119.2;
  %124 = %120.0;
  (%121, %122, %var_5560, %123, %124)
}

def @func_435() -> Tensor[(11, 1, 14), float32] {
  @func_77() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_496() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %125 = @func_435() /* ty=Tensor[(11, 1, 14), float32] */;
  %126 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
  %127 = @func_77() /* ty=Tensor[(11, 1, 14), float32] */;
  %128 = @func_435() /* ty=Tensor[(11, 1, 14), float32] */;
  (%125, %126, %127, %128)
}

def @func_3383() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %129 = @func_389() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %130 = @func_2009() /* ty=Tensor[(11, 1, 14), float32] */;
  %131 = %129.0;
  (%130, %131)
}

def @func_5647() -> (Tensor[(11, 1, 14), float32],) {
  %132 = @func_220() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) */;
  %133 = %132.0;
  (%133,)
}

def @func_1083() -> (Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), float64], Tensor[(11, 11, 14), int8], Tensor[(1694), float32]) {
  %134 = @func_614() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %135 = @func_77() /* ty=Tensor[(11, 1, 14), float32] */;
  %136 = @func_573() /* ty=Tensor[(11, 1, 14), float32] */;
  %137 = cast(%136, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %138 = shape_of(%135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%135, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %141 = less(%139, %140) /* ty=Tensor[(11, ?, 14), bool] */;
  %142 = cast(%136, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%141, dtype="float64") /* ty=Tensor[(11, ?, 14), float64] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %146 = cast(meta[relay.Constant][4] /* ty=Tensor[(1694), float32] */, dtype="float32") /* ty=Tensor[(1694), float32] */;
  %147 = reshape(%146, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), float32] */;
  %148 = %134.0;
  %149 = power(%144, %145) /* ty=Tensor[(11, ?, 14), float64] */;
  %150 = @func_349(%147) /* ty=Tensor[(11, 11, 14), int8] */;
  (%148, %149, %150, meta[relay.Constant][4] /* ty=Tensor[(1694), float32] */)
}

def @func_6122(%var_6008: float64, %var_6009: Tensor[(5), float64], %var_6075: Tensor[(1120), uint16], %var_6078: Tensor[(156), float64], %var_6113: Tensor[(308), float32]) -> (Tensor[(11, 1, 14), float32], Tensor[(5), float64], Tensor[(11, 1, 14), float32], Tensor[(14, 8, 10), uint16], Tensor[(5), float64], Tensor[(156), float64], Tensor[(11, ?, 14), float64], Tensor[(5, 1, 1120), bool], Tensor[(924), float32], Tensor[(308), float32], Tensor[(64), bool], Tensor[(5, 1, 1120), float64]) {
  %151 = @func_2698() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %152 = @func_614() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %153 = cast(%var_6075, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %154 = reshape(%153, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), uint16] */;
  %155 = @func_3466(%154) /* ty=(Tensor[(14, 8, 10), uint16],) */;
  %156 = cast(%var_6078, dtype="float64") /* ty=Tensor[(156), float64] */;
  %157 = cast(%var_6078, dtype="float64") /* ty=Tensor[(156), float64] */;
  %158 = cast(%var_6008, dtype="float64") /* ty=float64 */;
  %159 = cast(%var_6008, dtype="float64") /* ty=float64 */;
  %160 = cast(%var_6009, dtype="float64") /* ty=Tensor[(5), float64] */;
  %161 = reshape(%159, newshape=[]) /* ty=float64 */;
  %162 = reshape(%160, newshape=[5, 1, 1]) /* ty=Tensor[(5, 1, 1), float64] */;
  %163 = @func_47(%161, %162) /* ty=(Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) */;
  %164 = %163.0;
  %165 = cast(%164, dtype="float32") /* ty=Tensor[(5, 1, 1), float32] */;
  %166 = rsqrt(%165) /* ty=Tensor[(5, 1, 1), float32] */;
  %167 = cast(%166, dtype="float64") /* ty=Tensor[(5, 1, 1), float64] */;
  %168 = cast(%var_6078, dtype="float32") /* ty=Tensor[(156), float32] */;
  %169 = reshape(%156, newshape=[3, 13, 4]) /* ty=Tensor[(3, 13, 4), float64] */;
  %170 = reshape(%157, newshape=[3, 13, 4]) /* ty=Tensor[(3, 13, 4), float64] */;
  %171 = reshape(%158, newshape=[]) /* ty=float64 */;
  %172 = reshape(%167, newshape=[5]) /* ty=Tensor[(5), float64] */;
  %173 = reshape(%168, newshape=[3, 13, 4]) /* ty=Tensor[(3, 13, 4), float32] */;
  %174 = @func_926(%169, %170, %171, %172, %173) /* ty=(Tensor[(5, 1, 1), float64], float64, Tensor[(5), float64], Tensor[(3, 13, 4), float32], Tensor[(3, 13, 4), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %175 = @func_5543() /* ty=(Tensor[(11, ?, 14), float64], Tensor[(11, 1, 14), float32]) */;
  %176 = cast(%166, dtype="bool") /* ty=Tensor[(5, 1, 1), bool] */;
  %177 = cast(%var_6075, dtype="bool") /* ty=Tensor[(1120), bool] */;
  %178 = greater(%176, %177) /* ty=Tensor[(5, 1, 1120), bool] */;
  %179 = cast(%178, dtype="bool") /* ty=Tensor[(5, 1, 1120), bool] */;
  %180 = cast(%var_6008, dtype="bool") /* ty=bool */;
  %181 = cast(%var_6113, dtype="float32") /* ty=Tensor[(308), float32] */;
  %182 = cast(meta[relay.Constant][5] /* ty=Tensor[(64), bool] */, dtype="bool") /* ty=Tensor[(64), bool] */;
  %183 = reshape(%181, newshape=[11, 2, 14]) /* ty=Tensor[(11, 2, 14), float32] */;
  %184 = reshape(%182, newshape=[64]) /* ty=Tensor[(64), bool] */;
  %185 = @func_2652(%183, %184) /* ty=(Tensor[(11, 2, 14), bool], Tensor[(2, 4, 8), bool], Tensor[(64), bool], Tensor[(924), float32], Tensor[(11, 2, 14), bool]) */;
  %186 = cast(%166, dtype="float64") /* ty=Tensor[(5, 1, 1), float64] */;
  %187 = cast(%var_6075, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %188 = %151.0;
  %189 = %152.0;
  %190 = %155.0;
  %191 = %174.2;
  %192 = %175.0;
  %193 = not_equal(%179, %180) /* ty=Tensor[(5, 1, 1120), bool] */;
  %194 = %185.3;
  %195 = mod(%186, %187) /* ty=Tensor[(5, 1, 1120), float64] */;
  (%188, %var_6009, %189, %190, %191, %var_6078, %192, %193, %194, %var_6113, meta[relay.Constant][5] /* ty=Tensor[(64), bool] */, %195)
}

def @func_4447(%var_4426: Tensor[(77, 4), float32], %var_4428: Tensor[(1694), float32]) -> (Tensor[(11, 9, 14), int8], Tensor[(11, 1, 14), float32], Tensor[(77, 4), float32], Tensor[(64), bool], Tensor[(1694), float32], Tensor[(11, 1, 14), float32]) {
  %196 = @func_2736() /* ty=(Tensor[(11, 9, 14), int8],) */;
  %197 = cast(%var_4426, dtype="float32") /* ty=Tensor[(77, 4), float32] */;
  %198 = cast(meta[relay.Constant][6] /* ty=Tensor[(64), bool] */, dtype="bool") /* ty=Tensor[(64), bool] */;
  %199 = cast(%var_4428, dtype="float32") /* ty=Tensor[(1694), float32] */;
  %200 = reshape(%197, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %201 = reshape(%198, newshape=[64]) /* ty=Tensor[(64), bool] */;
  %202 = reshape(%199, newshape=[847, 2]) /* ty=Tensor[(847, 2), float32] */;
  %203 = @func_3059(%200, %201, %202) /* ty=(Tensor[(11, 1, 14), float32], Tensor[(924), float32], Tensor[(308), float32], Tensor[(64), bool], Tensor[(11, 9, 14), uint16], Tensor[(11, ?, 14), bool], Tensor[(11, 11, 14), int8], Tensor[(847, 2), float32], Tensor[(11, 1, 14), float32]) */;
  %204 = %196.0;
  %205 = %203.8;
  %206 = @func_2966() /* ty=Tensor[(11, 1, 14), float32] */;
  (%204, %205, %var_4426, meta[relay.Constant][6] /* ty=Tensor[(64), bool] */, %var_4428, %206)
}

def @func_3830() -> (Tensor[(6, 11, 13), bool], Tensor[(6, 11, 13), int16]) {
  %207 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 11, 13), uint8] */, dtype="bool") /* ty=Tensor[(6, 11, 13), bool] */;
  %208 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(6, 11, 13), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 11, 13), uint8] */, dtype="bool") /* ty=Tensor[(6, 11, 13), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %211 = less_equal(%209, %210) /* ty=Tensor[(6, 11, 13), bool] */;
  %212 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 11, 13), uint8] */, dtype="bool") /* ty=Tensor[(6, 11, 13), bool] */;
  %213 = shape_of(%211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%211, dtype="bool") /* ty=Tensor[(6, 11, 13), bool] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %216 = cast(%211, dtype="int16") /* ty=Tensor[(6, 11, 13), int16] */;
  %217 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(6, 11, 13), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 11, 13), uint8] */, dtype="int16") /* ty=Tensor[(6, 11, 13), int16] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %220 = greater_equal(%214, %215) /* ty=Tensor[(6, 11, 13), bool] */;
  %221 = bitwise_xor(%218, %219) /* ty=Tensor[(6, 11, 13), int16] */;
  (%220, %221)
}

def @func_5257(%var_5245: Tensor[(11, 9, 14), float32]) -> (Tensor[(11, 9, 14), float32],) {
  %222 = @func_1823() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %223 = %222.1;
  %224 = cast(%223, dtype="float32") /* ty=Tensor[(11, 1, 14), float32] */;
  %225 = cast(%var_5245, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
  %226 = power(%224, %225) /* ty=Tensor[(11, 9, 14), float32] */;
  (%226,)
}

def @func_6370(%var_6349: Tensor[(7, 11, 12), float32]) -> (Tensor[(7, 11, 12), float32], Tensor[(7, 11, 12), float64], Tensor[(11, 1, 14), float32]) {
  %227 = cast(%var_6349, dtype="float32") /* ty=Tensor[(7, 11, 12), float32] */;
  %228 = cast(%var_6349, dtype="float64") /* ty=Tensor[(7, 11, 12), float64] */;
  %229 = cos(%227) /* ty=Tensor[(7, 11, 12), float32] */;
  %230 = log10(%228) /* ty=Tensor[(7, 11, 12), float64] */;
  %231 = @func_4468() /* ty=Tensor[(11, 1, 14), float32] */;
  (%229, %230, %231)
}

def @func_735() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float32]) {
  %232 = @func_496() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %233 = @func_418() /* ty=(Tensor[(11, 1, 14), float64],) */;
  %234 = %233.0;
  %235 = cast(%234, dtype="uint8") /* ty=Tensor[(11, 1, 14), uint8] */;
  %236 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 9, 14), float64] */, dtype="uint8") /* ty=Tensor[(11, 9, 14), uint8] */;
  %237 = bitwise_xor(%235, %236) /* ty=Tensor[(11, 9, 14), uint8] */;
  %238 = cast(%237, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
  %239 = sqrt(%238) /* ty=Tensor[(11, 9, 14), float32] */;
  %240 = cast(%237, dtype="float64") /* ty=Tensor[(11, 9, 14), float64] */;
  %241 = sinh(%240) /* ty=Tensor[(11, 9, 14), float64] */;
  %242 = cast(%241, dtype="bool") /* ty=Tensor[(11, 9, 14), bool] */;
  %243 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %244 = cast(%239, dtype="bool") /* ty=Tensor[(11, 9, 14), bool] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %246 = not_equal(%244, %245) /* ty=Tensor[(11, 9, 14), bool] */;
  %247 = cast(%246, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
  %248 = sin(%247) /* ty=Tensor[(11, 9, 14), float32] */;
  %249 = cast(%246, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
  %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%248, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %253 = %232.2;
  %254 = floor_divide(%251, %252) /* ty=Tensor[(11, 9, 14), float32] */;
  (%253, %254)
}

def @func_2719(%var_2711: int64, %var_2712: Tensor[(1, 6, 16), int64]) -> (Tensor[(1, 6, 16), int64],) {
  %255 = cast(%var_2711, dtype="int64") /* ty=int64 */;
  %256 = cast(%var_2712, dtype="int64") /* ty=Tensor[(1, 6, 16), int64] */;
  %257 = right_shift(%255, %256) /* ty=Tensor[(1, 6, 16), int64] */;
  (%257,)
}

def @func_5966() -> (Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool]) {
  %258 = @func_1177() /* ty=(Tensor[(11, 1, 14), float64], Tensor[(11, ?, 14), bool]) */;
  %259 = @func_4848() /* ty=Tensor[(11, 1, 14), float32] */;
  %260 = %258.1;
  (%259, %260)
}

def @func_4165() -> (Tensor[(11, 1, 14), float32],) {
  %261 = @func_2966() /* ty=Tensor[(11, 1, 14), float32] */;
  (%261,)
}

def @func_1560() -> Tensor[(11, 1, 14), float32] {
  %262 = @func_418() /* ty=(Tensor[(11, 1, 14), float64],) */;
  %263 = %262.0;
  %264 = cast(%263, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %265 = acosh(%264) /* ty=Tensor[(11, 1, 14), float64] */;
  %266 = cast(%265, dtype="float32") /* ty=Tensor[(11, 1, 14), float32] */;
  tan(%266) /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_3082() -> Tensor[(11, 9, 14), float32] {
  %267 = @func_735() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float32]) */;
  %267.1
}

def @func_2601() -> Tensor[(11, 9, 14), int8] {
  %268 = @func_735() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float32]) */;
  %269 = %268.1;
  %270 = @func_2555() /* ty=Tensor[(11, 1, 14), float32] */;
  %271 = cast(%269, dtype="int8") /* ty=Tensor[(11, 9, 14), int8] */;
  %272 = cast(%270, dtype="int8") /* ty=Tensor[(11, 1, 14), int8] */;
  left_shift(%271, %272) /* ty=Tensor[(11, 9, 14), int8] */
}

def @func_2254() -> (Tensor[(11, 1, 14), float32],) {
  %273 = @func_848() /* ty=(Tensor[(11, ?, 14), int16], Tensor[(11, 1, 14), float32]) */;
  %274 = %273.1;
  (%274,)
}

def @func_5479(%var_5438: Tensor[(11, 12, 16), float64], %var_5439: Tensor[(11, 12, 16), float64], %var_5459: Tensor[(2, 784), int8]) -> (Tensor[(11, 12, 16), bool], Tensor[(1, 1386), float32], Tensor[(14, 8, 14), int8], Tensor[(2, 784), int8], Tensor[(11, 12, 16), float64], Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float64]) {
  %275 = cast(%var_5439, dtype="bool") /* ty=Tensor[(11, 12, 16), bool] */;
  %276 = shape_of(%var_5438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%var_5438, dtype="bool") /* ty=Tensor[(11, 12, 16), bool] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %279 = cast(%var_5459, dtype="int8") /* ty=Tensor[(2, 784), int8] */;
  %280 = reshape(%279, newshape=[14, 8, 14]) /* ty=Tensor[(14, 8, 14), int8] */;
  %281 = cast(%var_5438, dtype="float64") /* ty=Tensor[(11, 12, 16), float64] */;
  %282 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 1386), float32] */, dtype="float32") /* ty=Tensor[(1, 1386), float32] */;
  %283 = reshape(%282, newshape=[11, 9, 14]) /* ty=Tensor[(11, 9, 14), float32] */;
  %284 = @func_5257(%283) /* ty=(Tensor[(11, 9, 14), float32],) */;
  %285 = %284.0;
  %286 = cast(%285, dtype="float64") /* ty=Tensor[(11, 9, 14), float64] */;
  %287 = less(%277, %278) /* ty=Tensor[(11, 12, 16), bool] */;
  %288 = @func_4770(%280) /* ty=Tensor[(14, 8, 14), int8] */;
  %289 = log2(%281) /* ty=Tensor[(11, 12, 16), float64] */;
  %290 = @func_2966() /* ty=Tensor[(11, 1, 14), float32] */;
  %291 = exp(%286) /* ty=Tensor[(11, 9, 14), float64] */;
  (%287, meta[relay.Constant][10] /* ty=Tensor[(1, 1386), float32] */, %288, %var_5459, %289, %290, %291)
}

def @func_2200() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %292 = @func_735() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float32]) */;
  %293 = @func_2009() /* ty=Tensor[(11, 1, 14), float32] */;
  %294 = @func_573() /* ty=Tensor[(11, 1, 14), float32] */;
  %295 = %292.0;
  (%293, %294, %295)
}

def @func_3651() -> (Tensor[(11, ?, 14), int32], Tensor[(11, ?, 14), int16], Tensor[(11, 6, 14), int8], Tensor[(5), float64]) {
  %296 = @func_1560() /* ty=Tensor[(11, 1, 14), float32] */;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %298 = exp(%297) /* ty=Tensor[(11, 1, 14), float64] */;
  %299 = cast(%296, dtype="int32") /* ty=Tensor[(11, 1, 14), int32] */;
  %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%298, dtype="int32") /* ty=Tensor[(11, 1, 14), int32] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %303 = @func_848() /* ty=(Tensor[(11, ?, 14), int16], Tensor[(11, 1, 14), float32]) */;
  %304 = cast(%298, dtype="int8") /* ty=Tensor[(11, 1, 14), int8] */;
  %305 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 6, 14), float64] */, dtype="int8") /* ty=Tensor[(11, 6, 14), int8] */;
  %306 = @func_160() /* ty=(Tensor[(5), float64], Tensor[(11, ?, 14), int64], Tensor[(11, ?, 14), float32], Tensor[(5, 1, 1), bool], Tensor[(11, 1, 14), float32]) */;
  %307 = multiply(%301, %302) /* ty=Tensor[(11, ?, 14), int32] */;
  %308 = %303.0;
  %309 = bitwise_or(%304, %305) /* ty=Tensor[(11, 6, 14), int8] */;
  %310 = %306.0;
  (%307, %308, %309, %310)
}

def @func_2515() -> (Tensor[(1, 7, 9), float32], Tensor[(7, 9), float32], Tensor[(11, ?, 14), uint8], Tensor[(11, ?, 14), uint8]) {
  %311 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 9), float32] */, dtype="float32") /* ty=Tensor[(7, 9), float32] */;
  %312 = reshape(%311, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), float32] */;
  %313 = @func_1132(%312) /* ty=(Tensor[(?, 7, 9), int16], Tensor[(1, 7, 9), float32], Tensor[(?, 7, 9), bool], Tensor[(11, 1, 14), float32], Tensor[(11, 11, 14), int8], Tensor[(1694), float32]) */;
  %314 = @func_2220() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %315 = %314.0;
  %316 = cast(%315, dtype="float32") /* ty=Tensor[(11, 1, 14), float32] */;
  %317 = log(%316) /* ty=Tensor[(11, 1, 14), float32] */;
  %318 = @func_1969() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(5, 1, 1), bool], float64, Tensor[(5), float64]) */;
  %319 = %318.0;
  %320 = cast(%319, dtype="uint8") /* ty=Tensor[(11, 1, 14), uint8] */;
  %321 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%317, dtype="uint8") /* ty=Tensor[(11, 1, 14), uint8] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %324 = cast(%315, dtype="uint8") /* ty=Tensor[(11, 1, 14), uint8] */;
  %325 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%317, dtype="uint8") /* ty=Tensor[(11, 1, 14), uint8] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %328 = %313.1;
  %329 = bitwise_or(%322, %323) /* ty=Tensor[(11, ?, 14), uint8] */;
  %330 = left_shift(%326, %327) /* ty=Tensor[(11, ?, 14), uint8] */;
  (%328, meta[relay.Constant][12] /* ty=Tensor[(7, 9), float32] */, %329, %330)
}

def @func_3528() -> (Tensor[(11, 11, 14), int32], Tensor[(10, ?, 5), uint8], Tensor[(50), float32]) {
  %331 = @func_2698() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %332 = %331.0;
  %333 = cast(%332, dtype="int32") /* ty=Tensor[(11, 1, 14), int32] */;
  %334 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 11, 14), float32] */, dtype="int32") /* ty=Tensor[(11, 11, 14), int32] */;
  %335 = cast(meta[relay.Constant][14] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %336 = reshape(%335, newshape=[10, 1, 5]) /* ty=Tensor[(10, 1, 5), float32] */;
  %337 = @func_1294(%336) /* ty=(Tensor[(10, ?, 5), uint8], Tensor[(5, 1, 1), float64], float64, Tensor[(5), float64]) */;
  %338 = bitwise_and(%333, %334) /* ty=Tensor[(11, 11, 14), int32] */;
  %339 = %337.0;
  (%338, %339, meta[relay.Constant][14] /* ty=Tensor[(50), float32] */)
}

def @func_573() -> Tensor[(11, 1, 14), float32] {
  %340 = @func_496() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %340.0
}

def @func_4848() -> Tensor[(11, 1, 14), float32] {
  %341 = @func_965() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %341.0
}

def @func_5370() -> Tensor[(11, 1, 14), float32] {
  %342 = @func_4075() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool]) */;
  %342.0
}

def @func_2966() -> Tensor[(11, 1, 14), float32] {
  @func_64() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_4708(%var_4676: Tensor[(11, 16, 14), float32], %var_4694: Tensor[(11, 16, 14), float64]) -> (Tensor[(11, 16, 14), int16], Tensor[(11, 6, 14), bool]) {
  %343 = @func_496() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %344 = %343.0;
  %345 = cast(%344, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %346 = cast(%var_4676, dtype="float64") /* ty=Tensor[(11, 16, 14), float64] */;
  %347 = divide(%345, %346) /* ty=Tensor[(11, 16, 14), float64] */;
  %348 = cast(%var_4694, dtype="int16") /* ty=Tensor[(11, 16, 14), int16] */;
  %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%347, dtype="int16") /* ty=Tensor[(11, 16, 14), int16] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %352 = @func_3651() /* ty=(Tensor[(11, ?, 14), int32], Tensor[(11, ?, 14), int16], Tensor[(11, 6, 14), int8], Tensor[(5), float64]) */;
  %353 = %352.2;
  %354 = cast(%353, dtype="bool") /* ty=Tensor[(11, 6, 14), bool] */;
  %355 = cast(%344, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %356 = right_shift(%350, %351) /* ty=Tensor[(11, 16, 14), int16] */;
  %357 = greater_equal(%354, %355) /* ty=Tensor[(11, 6, 14), bool] */;
  (%356, %357)
}

def @func_2736() -> (Tensor[(11, 9, 14), int8],) {
  %358 = @func_2601() /* ty=Tensor[(11, 9, 14), int8] */;
  (%358,)
}

def @func_2009() -> Tensor[(11, 1, 14), float32] {
  @func_1560() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_349(%var_344: Tensor[(11, 11, 14), float32]) -> Tensor[(11, 11, 14), int8] {
  %359 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %360 = %359.0;
  %361 = cast(%360, dtype="int8") /* ty=Tensor[(11, 1, 14), int8] */;
  %362 = cast(%var_344, dtype="int8") /* ty=Tensor[(11, 11, 14), int8] */;
  logical_xor(%361, %362) /* ty=Tensor[(11, 11, 14), int8] */
}

def @func_2805(%var_2802: float64) -> (Tensor[(11, 1, 14), float64], Tensor[(5, 1, 1), bool], float64, Tensor[(5), float64]) {
  %363 = @func_418() /* ty=(Tensor[(11, 1, 14), float64],) */;
  %364 = cast(%var_2802, dtype="float64") /* ty=float64 */;
  %365 = cast(meta[relay.Constant][15] /* ty=Tensor[(5), float64] */, dtype="float64") /* ty=Tensor[(5), float64] */;
  %366 = reshape(%364, newshape=[]) /* ty=float64 */;
  %367 = reshape(%365, newshape=[5, 1, 1]) /* ty=Tensor[(5, 1, 1), float64] */;
  %368 = @func_47(%366, %367) /* ty=(Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) */;
  %369 = %363.0;
  %370 = %368.1;
  (%369, %370, %var_2802, meta[relay.Constant][15] /* ty=Tensor[(5), float64] */)
}

def @func_6406(%var_6395: Tensor[(56, 20), uint16], %var_6396: Tensor[(156), float64], %var_6397: Tensor[(308), float32]) -> (Tensor[(11, 1, 14), float32], Tensor[(5, 1, 1120), bool], float64, Tensor[(1, 5), float64], Tensor[(56, 20), uint16], Tensor[(156), float64], Tensor[(308), float32]) {
  %371 = cast(-0.650065f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %372 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 5), float64] */, dtype="float64") /* ty=Tensor[(1, 5), float64] */;
  %373 = cast(%var_6395, dtype="uint16") /* ty=Tensor[(56, 20), uint16] */;
  %374 = cast(%var_6396, dtype="float64") /* ty=Tensor[(156), float64] */;
  %375 = cast(%var_6397, dtype="float32") /* ty=Tensor[(308), float32] */;
  %376 = reshape(%371, newshape=[]) /* ty=float64 */;
  %377 = reshape(%372, newshape=[5]) /* ty=Tensor[(5), float64] */;
  %378 = reshape(%373, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %379 = reshape(%374, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %380 = reshape(%375, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %381 = @func_6122(%376, %377, %378, %379, %380) /* ty=(Tensor[(11, 1, 14), float32], Tensor[(5), float64], Tensor[(11, 1, 14), float32], Tensor[(14, 8, 10), uint16], Tensor[(5), float64], Tensor[(156), float64], Tensor[(11, ?, 14), float64], Tensor[(5, 1, 1120), bool], Tensor[(924), float32], Tensor[(308), float32], Tensor[(64), bool], Tensor[(5, 1, 1120), float64]) */;
  %382 = @func_2009() /* ty=Tensor[(11, 1, 14), float32] */;
  %383 = %381.7;
  (%382, %383, -0.650065f64 /* ty=float64 */, meta[relay.Constant][16] /* ty=Tensor[(1, 5), float64] */, %var_6395, %var_6396, %var_6397)
}

def @main(%var_6427: Tensor[(11, 5, 14), float32]) -> (Tensor[(11, 5, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 5, 14), uint64], Tensor[(11, 5, 14), float32], Tensor[(11, 5, 14), float64]) {
  %384 = @func_5198() /* ty=Tensor[(11, 1, 14), float32] */;
  %385 = cast(%384, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %386 = cast(%var_6427, dtype="bool") /* ty=Tensor[(11, 5, 14), bool] */;
  %387 = logical_and(%385, %386) /* ty=Tensor[(11, 5, 14), bool] */;
  %388 = cast(%387, dtype="float32") /* ty=Tensor[(11, 5, 14), float32] */;
  %389 = shape_of(%var_6427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%var_6427, dtype="float32") /* ty=Tensor[(11, 5, 14), float32] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %392 = @func_5407() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %393 = cast(%384, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %394 = cast(%387, dtype="float64") /* ty=Tensor[(11, 5, 14), float64] */;
  %395 = mod(%393, %394) /* ty=Tensor[(11, 5, 14), float64] */;
  %396 = cast(%var_6427, dtype="uint16") /* ty=Tensor[(11, 5, 14), uint16] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%395, dtype="uint16") /* ty=Tensor[(11, 5, 14), uint16] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %400 = left_shift(%398, %399) /* ty=Tensor[(11, 5, 14), uint16] */;
  %401 = cast(%400, dtype="uint64") /* ty=Tensor[(11, 5, 14), uint64] */;
  %402 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%395, dtype="uint64") /* ty=Tensor[(11, 5, 14), uint64] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %405 = cast(%387, dtype="float32") /* ty=Tensor[(11, 5, 14), float32] */;
  %406 = cast(%var_6427, dtype="float64") /* ty=Tensor[(11, 5, 14), float64] */;
  %407 = maximum(%390, %391) /* ty=Tensor[(11, 5, 14), float32] */;
  %408 = %392.0;
  %409 = subtract(%403, %404) /* ty=Tensor[(11, 5, 14), uint64] */;
  %410 = acosh(%405) /* ty=Tensor[(11, 5, 14), float32] */;
  %411 = cosh(%406) /* ty=Tensor[(11, 5, 14), float64] */;
  (%407, %408, %409, %410, %411)
}

def @func_3279(%var_3272: Tensor[(16, 15, 16), uint16]) -> Tensor[(16, 15, 16), bool] {
  %412 = cast(%var_3272, dtype="bool") /* ty=Tensor[(16, 15, 16), bool] */;
  %413 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(16, 15, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 15, 16), uint16] */, dtype="bool") /* ty=Tensor[(16, 15, 16), bool] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%414, %415) /* ty=Tensor[(16, 15, 16), bool] */
}

def @func_6204(%var_6179: float64) -> (Tensor[(11, 9, 14), int8], Tensor[(5, 1, 1), float64], float64, Tensor[(5, 1), float64], Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), int8]) {
  %416 = cast(%var_6179, dtype="float64") /* ty=float64 */;
  %417 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 1), float64] */;
  %418 = reshape(%416, newshape=[]) /* ty=float64 */;
  %419 = reshape(%417, newshape=[5, 1, 1]) /* ty=Tensor[(5, 1, 1), float64] */;
  %420 = @func_47(%418, %419) /* ty=(Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) */;
  %421 = @func_5599() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %422 = @func_2601() /* ty=Tensor[(11, 9, 14), int8] */;
  %423 = %420.0;
  %424 = %421.0;
  %425 = @func_4124() /* ty=Tensor[(11, 9, 14), int8] */;
  (%422, %423, %var_6179, meta[relay.Constant][18] /* ty=Tensor[(5, 1), float64] */, %424, %425)
}

def @func_5083() -> Tensor[(11, 1, 14), float32] {
  %426 = @func_4354() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %426.0
}

def @func_1425() -> (Tensor[(11, ?, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, ?, 14), bool]) {
  %427 = @func_160() /* ty=(Tensor[(5), float64], Tensor[(11, ?, 14), int64], Tensor[(11, ?, 14), float32], Tensor[(5, 1, 1), bool], Tensor[(11, 1, 14), float32]) */;
  %428 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %429 = %428.0;
  %430 = cast(%429, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %431 = cos(%430) /* ty=Tensor[(11, 1, 14), float64] */;
  %432 = cast(%431, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %433 = sinh(%432) /* ty=Tensor[(11, 1, 14), float64] */;
  %434 = cast(%429, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%433, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %438 = @func_573() /* ty=Tensor[(11, 1, 14), float32] */;
  %439 = cast(%433, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%438, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %443 = %427.2;
  %444 = less_equal(%436, %437) /* ty=Tensor[(11, ?, 14), bool] */;
  %445 = logical_or(%441, %442) /* ty=Tensor[(11, ?, 14), bool] */;
  (%443, %444, %445)
}

def @func_2652(%var_2627: Tensor[(11, 2, 14), float32], %var_2635: Tensor[(64), bool]) -> (Tensor[(11, 2, 14), bool], Tensor[(2, 4, 8), bool], Tensor[(64), bool], Tensor[(924), float32], Tensor[(11, 2, 14), bool]) {
  %446 = @func_1518() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %447 = %446.0;
  %448 = cast(%447, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %449 = cast(%var_2627, dtype="bool") /* ty=Tensor[(11, 2, 14), bool] */;
  %450 = cast(%var_2635, dtype="bool") /* ty=Tensor[(64), bool] */;
  %451 = cast(meta[relay.Constant][19] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %452 = reshape(%450, newshape=[2, 4, 8]) /* ty=Tensor[(2, 4, 8), bool] */;
  %453 = reshape(%451, newshape=[11, 6, 14]) /* ty=Tensor[(11, 6, 14), float32] */;
  %454 = @func_2401(%452, %453) /* ty=(Tensor[(2, 4, 8), bool], Tensor[(11, 6, 14), bool]) */;
  %455 = cast(%var_2627, dtype="bool") /* ty=Tensor[(11, 2, 14), bool] */;
  %456 = cast(%447, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %457 = greater(%448, %449) /* ty=Tensor[(11, 2, 14), bool] */;
  %458 = %454.0;
  %459 = less_equal(%455, %456) /* ty=Tensor[(11, 2, 14), bool] */;
  (%457, %458, %var_2635, meta[relay.Constant][19] /* ty=Tensor[(924), float32] */, %459)
}

def @func_3466(%var_3461: Tensor[(14, 8, 10), uint16]) -> (Tensor[(14, 8, 10), uint16],) {
  %460 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 8, 10), uint16] */, dtype="uint16") /* ty=Tensor[(14, 8, 10), uint16] */;
  %461 = shape_of(%var_3461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%var_3461, dtype="uint16") /* ty=Tensor[(14, 8, 10), uint16] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %464 = bitwise_and(%462, %463) /* ty=Tensor[(14, 8, 10), uint16] */;
  (%464,)
}

def @func_3743() -> Tensor[(11, 1, 14), float32] {
  %465 = @func_523() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %465.0
}

def @func_220() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) {
  %466 = @func_160() /* ty=(Tensor[(5), float64], Tensor[(11, ?, 14), int64], Tensor[(11, ?, 14), float32], Tensor[(5, 1, 1), bool], Tensor[(11, 1, 14), float32]) */;
  %467 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %468 = %467.0;
  %469 = cast(%468, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %470 = %466.4;
  %471 = rsqrt(%469) /* ty=Tensor[(11, 1, 14), float64] */;
  (%470, %471)
}

def @func_1294(%var_1242: Tensor[(10, 1, 5), float32]) -> (Tensor[(10, ?, 5), uint8], Tensor[(5, 1, 1), float64], float64, Tensor[(5), float64]) {
  %472 = cast(%var_1242, dtype="float32") /* ty=Tensor[(10, 1, 5), float32] */;
  %473 = tan(%472) /* ty=Tensor[(10, 1, 5), float32] */;
  %474 = cast(%var_1242, dtype="uint8") /* ty=Tensor[(10, 1, 5), uint8] */;
  %475 = shape_of(%473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%473, dtype="uint8") /* ty=Tensor[(10, 1, 5), uint8] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %478 = cast(3.84902f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %479 = cast(meta[relay.Constant][21] /* ty=Tensor[(5), float64] */, dtype="float64") /* ty=Tensor[(5), float64] */;
  %480 = reshape(%478, newshape=[]) /* ty=float64 */;
  %481 = reshape(%479, newshape=[5, 1, 1]) /* ty=Tensor[(5, 1, 1), float64] */;
  %482 = @func_47(%480, %481) /* ty=(Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) */;
  %483 = bitwise_or(%476, %477) /* ty=Tensor[(10, ?, 5), uint8] */;
  %484 = %482.0;
  (%483, %484, 3.84902f64 /* ty=float64 */, meta[relay.Constant][21] /* ty=Tensor[(5), float64] */)
}

def @func_47(%var_21: float64, %var_22: Tensor[(5, 1, 1), float64]) -> (Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) {
  %485 = cast(%var_21, dtype="float64") /* ty=float64 */;
  %486 = cast(%var_22, dtype="float64") /* ty=Tensor[(5, 1, 1), float64] */;
  %487 = cast(%var_22, dtype="bool") /* ty=Tensor[(5, 1, 1), bool] */;
  %488 = cast(%var_21, dtype="bool") /* ty=bool */;
  %489 = mod(%485, %486) /* ty=Tensor[(5, 1, 1), float64] */;
  %490 = less_equal(%487, %488) /* ty=Tensor[(5, 1, 1), bool] */;
  (%489, %490)
}

def @func_926(%var_879: Tensor[(3, 13, 4), float64], %var_880: Tensor[(3, 13, 4), float64], %var_886: float64, %var_887: Tensor[(5), float64], %var_892: Tensor[(3, 13, 4), float32]) -> (Tensor[(5, 1, 1), float64], float64, Tensor[(5), float64], Tensor[(3, 13, 4), float32], Tensor[(3, 13, 4), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %491 = cast(%var_886, dtype="float64") /* ty=float64 */;
  %492 = cast(%var_887, dtype="float64") /* ty=Tensor[(5), float64] */;
  %493 = reshape(%491, newshape=[]) /* ty=float64 */;
  %494 = reshape(%492, newshape=[5, 1, 1]) /* ty=Tensor[(5, 1, 1), float64] */;
  %495 = @func_47(%493, %494) /* ty=(Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) */;
  %496 = cast(%var_880, dtype="bool") /* ty=Tensor[(3, 13, 4), bool] */;
  %497 = shape_of(%var_879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%var_879, dtype="bool") /* ty=Tensor[(3, 13, 4), bool] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %500 = equal(%498, %499) /* ty=Tensor[(3, 13, 4), bool] */;
  %501 = cast(%500, dtype="float32") /* ty=Tensor[(3, 13, 4), float32] */;
  %502 = cosh(%501) /* ty=Tensor[(3, 13, 4), float32] */;
  %503 = cast(%var_892, dtype="float32") /* ty=Tensor[(3, 13, 4), float32] */;
  %504 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%502, dtype="float32") /* ty=Tensor[(3, 13, 4), float32] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %507 = floor_mod(%505, %506) /* ty=Tensor[(3, 13, 4), float32] */;
  %508 = cast(%507, dtype="float32") /* ty=Tensor[(3, 13, 4), float32] */;
  %509 = cast(%500, dtype="float32") /* ty=Tensor[(3, 13, 4), float32] */;
  %510 = @func_523() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %511 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %512 = %495.0;
  %513 = atanh(%508) /* ty=Tensor[(3, 13, 4), float32] */;
  %514 = rsqrt(%509) /* ty=Tensor[(3, 13, 4), float32] */;
  %515 = %510.0;
  %516 = %511.0;
  (%512, %var_886, %var_887, %513, %514, %515, %516)
}

def @func_4329(%var_4265: Tensor[(10, 7, 14), float64]) -> (Tensor[(11, 1, 14), float32], Tensor[(10, 7, 14), bool], Tensor[(11, 9, 14), int8], Tensor[(11, 1, 14), float32]) {
  %517 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %518 = cast(%var_4265, dtype="float64") /* ty=Tensor[(10, 7, 14), float64] */;
  %519 = asin(%518) /* ty=Tensor[(10, 7, 14), float64] */;
  %520 = cast(%var_4265, dtype="float64") /* ty=Tensor[(10, 7, 14), float64] */;
  %521 = sinh(%520) /* ty=Tensor[(10, 7, 14), float64] */;
  %522 = cast(%521, dtype="bool") /* ty=Tensor[(10, 7, 14), bool] */;
  %523 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%519, dtype="bool") /* ty=Tensor[(10, 7, 14), bool] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %526 = %517.0;
  %527 = equal(%524, %525) /* ty=Tensor[(10, 7, 14), bool] */;
  %528 = @func_2601() /* ty=Tensor[(11, 9, 14), int8] */;
  %529 = @func_2555() /* ty=Tensor[(11, 1, 14), float32] */;
  (%526, %527, %528, %529)
}

def @func_2401(%var_2349: Tensor[(2, 4, 8), bool], %var_2395: Tensor[(11, 6, 14), float32]) -> (Tensor[(2, 4, 8), bool], Tensor[(11, 6, 14), bool]) {
  %530 = cast(%var_2349, dtype="bool") /* ty=Tensor[(2, 4, 8), bool] */;
  %531 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(2, 4, 8), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 4, 8), bool] */, dtype="bool") /* ty=Tensor[(2, 4, 8), bool] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %534 = @func_496() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %535 = %534.1;
  %536 = cast(%535, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %537 = cast(%var_2395, dtype="bool") /* ty=Tensor[(11, 6, 14), bool] */;
  %538 = logical_and(%532, %533) /* ty=Tensor[(2, 4, 8), bool] */;
  %539 = less(%536, %537) /* ty=Tensor[(11, 6, 14), bool] */;
  (%538, %539)
}

def @func_4903() -> (Tensor[(11, 1, 14), float32], Tensor[(1694), float64], Tensor[(14, 8, 10), uint16], Tensor[(1120), uint16]) {
  %540 = @func_2888() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, 1, 14), float32], Tensor[(2, 4, 8), bool], Tensor[(154, 2), float32], Tensor[(64, 1), bool]) */;
  %541 = @func_1083() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), float64], Tensor[(11, 11, 14), int8], Tensor[(1694), float32]) */;
  %542 = %541.3;
  %543 = cast(%542, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %544 = cast(meta[relay.Constant][23] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %545 = reshape(%544, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), uint16] */;
  %546 = @func_3466(%545) /* ty=(Tensor[(14, 8, 10), uint16],) */;
  %547 = %540.0;
  %548 = sinh(%543) /* ty=Tensor[(1694), float64] */;
  %549 = %546.0;
  (%547, %548, %549, meta[relay.Constant][23] /* ty=Tensor[(1120), uint16] */)
}

def @func_167() -> (Tensor[(11, 1, 14), float32],) {
  %550 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
  (%550,)
}

def @func_1686() -> Tensor[(11, 1, 14), float64] {
  %551 = @func_965() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %552 = %551.0;
  %553 = cast(%552, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  asinh(%553) /* ty=Tensor[(11, 1, 14), float64] */
}

def @func_1660(%var_1600: Tensor[(11, 9, 14), float32]) -> (Tensor[(11, 9, 14), int32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float32]) {
  %554 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %555 = %554.0;
  %556 = cast(%555, dtype="int32") /* ty=Tensor[(11, 1, 14), int32] */;
  %557 = cast(%var_1600, dtype="int32") /* ty=Tensor[(11, 9, 14), int32] */;
  %558 = @func_389() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %559 = cast(%var_1600, dtype="float64") /* ty=Tensor[(11, 9, 14), float64] */;
  %560 = tan(%559) /* ty=Tensor[(11, 9, 14), float64] */;
  %561 = cast(%560, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
  %562 = right_shift(%556, %557) /* ty=Tensor[(11, 9, 14), int32] */;
  %563 = %558.1;
  %564 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
  %565 = sigmoid(%561) /* ty=Tensor[(11, 9, 14), float32] */;
  (%562, %563, %564, %565)
}

def @func_2220() -> (Tensor[(11, 1, 14), float32],) {
  %566 = @func_2200() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %567 = %566.2;
  (%567,)
}

def @func_5879() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %568 = @func_5599() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %569 = @func_5599() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %570 = %568.0;
  %571 = %569.0;
  (%570, %571)
}

def @func_848() -> (Tensor[(11, ?, 14), int16], Tensor[(11, 1, 14), float32]) {
  %572 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %573 = %572.0;
  %574 = @func_435() /* ty=Tensor[(11, 1, 14), float32] */;
  %575 = cast(%574, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %576 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%573, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %579 = equal(%577, %578) /* ty=Tensor[(11, ?, 14), bool] */;
  %580 = cast(%574, dtype="int16") /* ty=Tensor[(11, 1, 14), int16] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%579, dtype="int16") /* ty=Tensor[(11, ?, 14), int16] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %584 = @func_523() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %585 = right_shift(%582, %583) /* ty=Tensor[(11, ?, 14), int16] */;
  %586 = %584.0;
  (%585, %586)
}

def @func_1177() -> (Tensor[(11, 1, 14), float64], Tensor[(11, ?, 14), bool]) {
  %587 = @func_220() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) */;
  %588 = @func_965() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %589 = %588.0;
  %590 = @func_1015() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %591 = %590.1;
  %592 = cast(%591, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %593 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%589, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %596 = %587.1;
  %597 = logical_and(%594, %595) /* ty=Tensor[(11, ?, 14), bool] */;
  (%596, %597)
}

def @func_2888() -> (Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, 1, 14), float32], Tensor[(2, 4, 8), bool], Tensor[(154, 2), float32], Tensor[(64, 1), bool]) {
  %598 = @func_1823() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %599 = @func_2009() /* ty=Tensor[(11, 1, 14), float32] */;
  %600 = cast(%599, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %601 = sin(%600) /* ty=Tensor[(11, 1, 14), float64] */;
  %602 = cast(%599, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%601, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %606 = @func_965() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %607 = cast(meta[relay.Constant][24] /* ty=Tensor[(154, 2), float32] */, dtype="float32") /* ty=Tensor[(154, 2), float32] */;
  %608 = cast(meta[relay.Constant][25] /* ty=Tensor[(64, 1), bool] */, dtype="bool") /* ty=Tensor[(64, 1), bool] */;
  %609 = reshape(%607, newshape=[11, 2, 14]) /* ty=Tensor[(11, 2, 14), float32] */;
  %610 = reshape(%608, newshape=[64]) /* ty=Tensor[(64), bool] */;
  %611 = @func_2652(%609, %610) /* ty=(Tensor[(11, 2, 14), bool], Tensor[(2, 4, 8), bool], Tensor[(64), bool], Tensor[(924), float32], Tensor[(11, 2, 14), bool]) */;
  %612 = %598.2;
  %613 = greater(%604, %605) /* ty=Tensor[(11, ?, 14), bool] */;
  %614 = %606.0;
  %615 = %611.1;
  (%612, %613, %614, %615, meta[relay.Constant][24] /* ty=Tensor[(154, 2), float32] */, meta[relay.Constant][25] /* ty=Tensor[(64, 1), bool] */)
}

def @func_2326() -> Tensor[(11, ?, 14), int64] {
  %616 = @func_160() /* ty=(Tensor[(5), float64], Tensor[(11, ?, 14), int64], Tensor[(11, ?, 14), float32], Tensor[(5, 1, 1), bool], Tensor[(11, 1, 14), float32]) */;
  %616.1
}

def @func_4016() -> Tensor[(11, 1, 14), float64] {
  @func_1686() /* ty=Tensor[(11, 1, 14), float64] */
}

def @func_3182(%var_3167: Tensor[(96), int64]) -> (Tensor[(11, 1, 14), float32], Tensor[(1, 6, 16), int64], int64, Tensor[(96), int64]) {
  %617 = @func_848() /* ty=(Tensor[(11, ?, 14), int16], Tensor[(11, 1, 14), float32]) */;
  %618 = cast(9 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %619 = cast(%var_3167, dtype="int64") /* ty=Tensor[(96), int64] */;
  %620 = reshape(%618, newshape=[]) /* ty=int64 */;
  %621 = reshape(%619, newshape=[1, 6, 16]) /* ty=Tensor[(1, 6, 16), int64] */;
  %622 = @func_2719(%620, %621) /* ty=(Tensor[(1, 6, 16), int64],) */;
  %623 = %617.1;
  %624 = %622.0;
  (%623, %624, 9 /* ty=int64 */, %var_3167)
}

def @func_5034() -> (Tensor[(50), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %625 = @func_3528() /* ty=(Tensor[(11, 11, 14), int32], Tensor[(10, ?, 5), uint8], Tensor[(50), float32]) */;
  %626 = @func_965() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %627 = @func_4354() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %628 = %625.2;
  %629 = %626.0;
  %630 = %627.0;
  (%628, %629, %630)
}

def @func_5506() -> (Tensor[(11, ?, 14), bool],) {
  %631 = @func_1425() /* ty=(Tensor[(11, ?, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, ?, 14), bool]) */;
  %632 = %631.2;
  (%632,)
}

def @func_4354() -> (Tensor[(11, 1, 14), float32],) {
  %633 = @func_496() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %634 = %633.0;
  (%634,)
}

def @func_3685() -> (Tensor[(11, 1, 14), float32],) {
  %635 = @func_2220() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %636 = %635.0;
  (%636,)
}

def @func_1969() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(5, 1, 1), bool], float64, Tensor[(5), float64]) {
  %637 = @func_389() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %638 = @func_496() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %639 = cast(8.03715f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %640 = cast(meta[relay.Constant][26] /* ty=Tensor[(5), float64] */, dtype="float64") /* ty=Tensor[(5), float64] */;
  %641 = reshape(%639, newshape=[]) /* ty=float64 */;
  %642 = reshape(%640, newshape=[5, 1, 1]) /* ty=Tensor[(5, 1, 1), float64] */;
  %643 = @func_47(%641, %642) /* ty=(Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) */;
  %644 = %637.1;
  %645 = @func_573() /* ty=Tensor[(11, 1, 14), float32] */;
  %646 = %638.1;
  %647 = %643.1;
  (%644, %645, %646, %647, 8.03715f64 /* ty=float64 */, meta[relay.Constant][26] /* ty=Tensor[(5), float64] */)
}

def @func_5923() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %648 = @func_2200() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %649 = @func_1015() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %650 = %648.0;
  %651 = %649.0;
  (%650, %651)
}

def @func_1823() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %652 = @func_496() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %653 = %652.0;
  %654 = cast(%653, dtype="float32") /* ty=Tensor[(11, 1, 14), float32] */;
  %655 = @func_1518() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %656 = %655.0;
  %657 = cast(%656, dtype="float32") /* ty=Tensor[(11, 1, 14), float32] */;
  %658 = sigmoid(%654) /* ty=Tensor[(11, 1, 14), float32] */;
  %659 = erf(%657) /* ty=Tensor[(11, 1, 14), float32] */;
  %660 = @func_435() /* ty=Tensor[(11, 1, 14), float32] */;
  (%658, %659, %660)
}

def @func_418() -> (Tensor[(11, 1, 14), float64],) {
  %661 = @func_220() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) */;
  %662 = %661.1;
  (%662,)
}

def @func_4542() -> (Tensor[(11, 1, 14), float64], Tensor[(11, 1, 14), float32]) {
  %663 = @func_160() /* ty=(Tensor[(5), float64], Tensor[(11, ?, 14), int64], Tensor[(11, ?, 14), float32], Tensor[(5, 1, 1), bool], Tensor[(11, 1, 14), float32]) */;
  %664 = @func_1686() /* ty=Tensor[(11, 1, 14), float64] */;
  %665 = %663.4;
  (%664, %665)
}

def @func_2826() -> Tensor[(11, 1, 14), float32] {
  %666 = @func_2220() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %666.0
}

def @func_6379() -> Tensor[(11, 1, 14), float32] {
  @func_2966() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_5131(%var_5124: Tensor[(16, 12, 7), float32]) -> (Tensor[(16, 12, 7), float64],) {
  %667 = cast(%var_5124, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
  %668 = asin(%667) /* ty=Tensor[(16, 12, 7), float32] */;
  %669 = cast(%668, dtype="float64") /* ty=Tensor[(16, 12, 7), float64] */;
  %670 = cosh(%669) /* ty=Tensor[(16, 12, 7), float64] */;
  (%670,)
}

def @func_5160() -> (Tensor[(11, 1, 14), float32],) {
  %671 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
  (%671,)
}

def @func_4211(%var_4193: Tensor[(11, 9, 14), int8]) -> Tensor[(11, 9, 14), float64] {
  %672 = @func_2601() /* ty=Tensor[(11, 9, 14), int8] */;
  %673 = cast(%var_4193, dtype="bool") /* ty=Tensor[(11, 9, 14), bool] */;
  %674 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%672, dtype="bool") /* ty=Tensor[(11, 9, 14), bool] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %677 = less(%675, %676) /* ty=Tensor[(11, 9, 14), bool] */;
  %678 = cast(%677, dtype="float64") /* ty=Tensor[(11, 9, 14), float64] */;
  log(%678) /* ty=Tensor[(11, 9, 14), float64] */
}

def @func_4770(%var_4765: Tensor[(14, 8, 14), int8]) -> Tensor[(14, 8, 14), int8] {
  %679 = cast(%var_4765, dtype="int8") /* ty=Tensor[(14, 8, 14), int8] */;
  %680 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(14, 8, 14), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 8, 14), int8] */, dtype="int8") /* ty=Tensor[(14, 8, 14), int8] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  right_shift(%681, %682) /* ty=Tensor[(14, 8, 14), int8] */
}

def @func_965() -> (Tensor[(11, 1, 14), float32],) {
  %683 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
  (%683,)
}

def @func_3059(%var_3015: Tensor[(308), float32], %var_3016: Tensor[(64), bool], %var_3044: Tensor[(847, 2), float32]) -> (Tensor[(11, 1, 14), float32], Tensor[(924), float32], Tensor[(308), float32], Tensor[(64), bool], Tensor[(11, 9, 14), uint16], Tensor[(11, ?, 14), bool], Tensor[(11, 11, 14), int8], Tensor[(847, 2), float32], Tensor[(11, 1, 14), float32]) {
  %684 = @func_965() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %685 = cast(%var_3015, dtype="float32") /* ty=Tensor[(308), float32] */;
  %686 = cast(%var_3016, dtype="bool") /* ty=Tensor[(64), bool] */;
  %687 = reshape(%685, newshape=[11, 2, 14]) /* ty=Tensor[(11, 2, 14), float32] */;
  %688 = reshape(%686, newshape=[64]) /* ty=Tensor[(64), bool] */;
  %689 = @func_2652(%687, %688) /* ty=(Tensor[(11, 2, 14), bool], Tensor[(2, 4, 8), bool], Tensor[(64), bool], Tensor[(924), float32], Tensor[(11, 2, 14), bool]) */;
  %690 = @func_2693() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), uint16]) */;
  %691 = @func_1425() /* ty=(Tensor[(11, ?, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, ?, 14), bool]) */;
  %692 = cast(%var_3044, dtype="float32") /* ty=Tensor[(847, 2), float32] */;
  %693 = reshape(%692, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), float32] */;
  %694 = %684.0;
  %695 = %689.3;
  %696 = %690.1;
  %697 = %691.2;
  %698 = @func_349(%693) /* ty=Tensor[(11, 11, 14), int8] */;
  %699 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
  (%694, %695, %var_3015, %var_3016, %696, %697, %698, %var_3044, %699)
}

def @func_4978(%var_4973: Tensor[(11, 9, 14), float32]) -> (Tensor[(11, 9, 14), bool],) {
  %700 = @func_3082() /* ty=Tensor[(11, 9, 14), float32] */;
  %701 = cast(%var_4973, dtype="bool") /* ty=Tensor[(11, 9, 14), bool] */;
  %702 = shape_of(%700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %703 = cast(%700, dtype="bool") /* ty=Tensor[(11, 9, 14), bool] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %705 = greater_equal(%703, %704) /* ty=Tensor[(11, 9, 14), bool] */;
  (%705,)
}

def @func_2693() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), uint16]) {
  %706 = @func_389() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %707 = @func_735() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float32]) */;
  %708 = %707.1;
  %709 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 9, 14), float32] */, dtype="uint16") /* ty=Tensor[(11, 9, 14), uint16] */;
  %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%708, dtype="uint16") /* ty=Tensor[(11, 9, 14), uint16] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %713 = %706.0;
  %714 = bitwise_and(%711, %712) /* ty=Tensor[(11, 9, 14), uint16] */;
  (%713, %714)
}

def @func_3453() -> (Tensor[(11, 9, 14), uint16], Tensor[(11, 1, 14), float32]) {
  %715 = @func_2693() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), uint16]) */;
  %716 = @func_614() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %717 = %715.1;
  %718 = %716.0;
  (%717, %718)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_436() -> Tensor[(11, 1, 14), float32] {
  %0 = fn () -> Tensor[(11, 1, 14), float32] {
    @func_77() /* ty=Tensor[(11, 1, 14), float32] */
  };
  %0() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_5134(%var_5132: Tensor[(16, 12, 7), float32]) -> (Tensor[(16, 12, 7), float64],) {
  @func_5131(%var_5132) /* ty=(Tensor[(16, 12, 7), float64],) */
}

def @func_6372(%var_6371: Tensor[(7, 11, 12), float32]) -> (Tensor[(7, 11, 12), float32], Tensor[(7, 11, 12), float64], Tensor[(11, 1, 14), float32]) {
  %6 = fn (%var_6349: Tensor[(7, 11, 12), float32]) -> (Tensor[(7, 11, 12), float32], Tensor[(7, 11, 12), float64], Tensor[(11, 1, 14), float32]) {
    %1 = cast(%var_6349, dtype="float32") /* ty=Tensor[(7, 11, 12), float32] */;
    %2 = cast(%var_6349, dtype="float64") /* ty=Tensor[(7, 11, 12), float64] */;
    %3 = cos(%1) /* ty=Tensor[(7, 11, 12), float32] */;
    %4 = log10(%2) /* ty=Tensor[(7, 11, 12), float64] */;
    %5 = @func_4468() /* ty=Tensor[(11, 1, 14), float32] */;
    (%3, %4, %5)
  };
  %6(%var_6371) /* ty=(Tensor[(7, 11, 12), float32], Tensor[(7, 11, 12), float64], Tensor[(11, 1, 14), float32]) */
}

def @func_3687() -> (Tensor[(11, 1, 14), float32],) {
  @func_3685() /* ty=(Tensor[(11, 1, 14), float32],) */
}

def @func_3059(%var_3015: Tensor[(308), float32], %var_3016: Tensor[(64), bool], %var_3044: Tensor[(847, 2), float32]) -> (Tensor[(11, 1, 14), float32], Tensor[(924), float32], Tensor[(308), float32], Tensor[(64), bool], Tensor[(11, 9, 14), uint16], Tensor[(11, ?, 14), bool], Tensor[(11, 11, 14), int8], Tensor[(847, 2), float32], Tensor[(11, 1, 14), float32]) {
  %7 = @func_965() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %8 = cast(%var_3015, dtype="float32") /* ty=Tensor[(308), float32] */;
  %9 = cast(%var_3016, dtype="bool") /* ty=Tensor[(64), bool] */;
  %10 = reshape(%8, newshape=[11, 2, 14]) /* ty=Tensor[(11, 2, 14), float32] */;
  %11 = reshape(%9, newshape=[64]) /* ty=Tensor[(64), bool] */;
  %12 = @func_2652(%10, %11) /* ty=(Tensor[(11, 2, 14), bool], Tensor[(2, 4, 8), bool], Tensor[(64), bool], Tensor[(924), float32], Tensor[(11, 2, 14), bool]) */;
  %13 = @func_2693() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), uint16]) */;
  %14 = @func_1425() /* ty=(Tensor[(11, ?, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, ?, 14), bool]) */;
  %15 = cast(%var_3044, dtype="float32") /* ty=Tensor[(847, 2), float32] */;
  %16 = reshape(%15, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), float32] */;
  %17 = %7.0;
  %18 = %12.3;
  %19 = %13.1;
  %20 = %14.2;
  %21 = @func_349(%16) /* ty=Tensor[(11, 11, 14), int8] */;
  %22 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
  (%17, %18, %var_3015, %var_3016, %19, %20, %21, %var_3044, %22)
}

def @func_1016() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %27 = fn () -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
    %23 = @func_220() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) */;
    %24 = @func_220() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) */;
    %25 = %23.0;
    %26 = %24.0;
    (%25, %26)
  };
  %27() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */
}

def @func_4076() -> (Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool]) {
  %32 = fn () -> (Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool]) {
    %28 = @func_2693() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), uint16]) */;
    %29 = @func_1425() /* ty=(Tensor[(11, ?, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, ?, 14), bool]) */;
    %30 = %28.0;
    %31 = %29.2;
    (%30, %31)
  };
  %32() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool]) */
}

def @func_736() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float32]) {
  %56 = fn () -> (Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float32]) {
    %33 = @func_496() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
    %34 = @func_418() /* ty=(Tensor[(11, 1, 14), float64],) */;
    %35 = %34.0;
    %36 = cast(%35, dtype="uint8") /* ty=Tensor[(11, 1, 14), uint8] */;
    %37 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 9, 14), float64] */, dtype="uint8") /* ty=Tensor[(11, 9, 14), uint8] */;
    %38 = bitwise_xor(%36, %37) /* ty=Tensor[(11, 9, 14), uint8] */;
    %39 = cast(%38, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
    %40 = sqrt(%39) /* ty=Tensor[(11, 9, 14), float32] */;
    %41 = cast(%38, dtype="float64") /* ty=Tensor[(11, 9, 14), float64] */;
    %42 = sinh(%41) /* ty=Tensor[(11, 9, 14), float64] */;
    %43 = cast(%42, dtype="bool") /* ty=Tensor[(11, 9, 14), bool] */;
    %44 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
    %45 = cast(%40, dtype="bool") /* ty=Tensor[(11, 9, 14), bool] */;
    %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %47 = not_equal(%45, %46) /* ty=Tensor[(11, 9, 14), bool] */;
    %48 = cast(%47, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
    %49 = sin(%48) /* ty=Tensor[(11, 9, 14), float32] */;
    %50 = cast(%47, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
    %51 = shape_of(%49, dtype="int32") /* ty=Tensor[(3), int32] */;
    %52 = cast(%49, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
    %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %54 = %33.2;
    %55 = floor_divide(%52, %53) /* ty=Tensor[(11, 9, 14), float32] */;
    (%54, %55)
  };
  %56() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float32]) */
}

def @func_4981(%var_4979: Tensor[(11, 9, 14), float32]) -> (Tensor[(11, 9, 14), bool],) {
  @func_4978(%var_4979) /* ty=(Tensor[(11, 9, 14), bool],) */
}

def @func_5924() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %61 = fn () -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
    %57 = @func_2200() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
    %58 = @func_1015() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
    %59 = %57.0;
    %60 = %58.0;
    (%59, %60)
  };
  %61() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */
}

def @func_2222() -> (Tensor[(11, 1, 14), float32],) {
  @func_2220() /* ty=(Tensor[(11, 1, 14), float32],) */
}

def @func_4451(%var_4449: Tensor[(77, 4), float32], %var_4450: Tensor[(1694), float32]) -> (Tensor[(11, 9, 14), int8], Tensor[(11, 1, 14), float32], Tensor[(77, 4), float32], Tensor[(64), bool], Tensor[(1694), float32], Tensor[(11, 1, 14), float32]) {
  @func_4447(%var_4449, %var_4450) /* ty=(Tensor[(11, 9, 14), int8], Tensor[(11, 1, 14), float32], Tensor[(77, 4), float32], Tensor[(64), bool], Tensor[(1694), float32], Tensor[(11, 1, 14), float32]) */
}

def @func_3083() -> Tensor[(11, 9, 14), float32] {
  %63 = fn () -> Tensor[(11, 9, 14), float32] {
    %62 = @func_735() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float32]) */;
    %62.1
  };
  %63() /* ty=Tensor[(11, 9, 14), float32] */
}

def @func_1519() -> (Tensor[(11, 1, 14), float32],) {
  %66 = fn () -> (Tensor[(11, 1, 14), float32],) {
    %64 = @func_965() /* ty=(Tensor[(11, 1, 14), float32],) */;
    %65 = %64.0;
    (%65,)
  };
  %66() /* ty=(Tensor[(11, 1, 14), float32],) */
}

def @func_2890() -> (Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, 1, 14), float32], Tensor[(2, 4, 8), bool], Tensor[(154, 2), float32], Tensor[(64, 1), bool]) {
  @func_2888() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, 1, 14), float32], Tensor[(2, 4, 8), bool], Tensor[(154, 2), float32], Tensor[(64, 1), bool]) */
}

def @func_1084() -> (Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), float64], Tensor[(11, 11, 14), int8], Tensor[(1694), float32]) {
  %84 = fn () -> (Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), float64], Tensor[(11, 11, 14), int8], Tensor[(1694), float32]) {
    %67 = @func_614() /* ty=(Tensor[(11, 1, 14), float32],) */;
    %68 = @func_77() /* ty=Tensor[(11, 1, 14), float32] */;
    %69 = @func_573() /* ty=Tensor[(11, 1, 14), float32] */;
    %70 = cast(%69, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
    %71 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
    %72 = cast(%68, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
    %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %74 = less(%72, %73) /* ty=Tensor[(11, ?, 14), bool] */;
    %75 = cast(%69, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
    %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(3), int32] */;
    %77 = cast(%74, dtype="float64") /* ty=Tensor[(11, ?, 14), float64] */;
    %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %79 = cast(meta[relay.Constant][1] /* ty=Tensor[(1694), float32] */, dtype="float32") /* ty=Tensor[(1694), float32] */;
    %80 = reshape(%79, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), float32] */;
    %81 = %67.0;
    %82 = power(%77, %78) /* ty=Tensor[(11, ?, 14), float64] */;
    %83 = @func_349(%80) /* ty=Tensor[(11, 11, 14), int8] */;
    (%81, %82, %83, meta[relay.Constant][1] /* ty=Tensor[(1694), float32] */)
  };
  %84() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), float64], Tensor[(11, 11, 14), int8], Tensor[(1694), float32]) */
}

def @func_1425() -> (Tensor[(11, ?, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, ?, 14), bool]) {
  %85 = @func_160() /* ty=(Tensor[(5), float64], Tensor[(11, ?, 14), int64], Tensor[(11, ?, 14), float32], Tensor[(5, 1, 1), bool], Tensor[(11, 1, 14), float32]) */;
  %86 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %87 = %86.0;
  %88 = cast(%87, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %89 = cos(%88) /* ty=Tensor[(11, 1, 14), float64] */;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %91 = sinh(%90) /* ty=Tensor[(11, 1, 14), float64] */;
  %92 = cast(%87, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %96 = @func_573() /* ty=Tensor[(11, 1, 14), float32] */;
  %97 = cast(%91, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %98 = shape_of(%96, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%96, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %101 = %85.2;
  %102 = less_equal(%94, %95) /* ty=Tensor[(11, ?, 14), bool] */;
  %103 = logical_or(%99, %100) /* ty=Tensor[(11, ?, 14), bool] */;
  (%101, %102, %103)
}

def @func_3184(%var_3183: Tensor[(96), int64]) -> (Tensor[(11, 1, 14), float32], Tensor[(1, 6, 16), int64], int64, Tensor[(96), int64]) {
  %112 = fn (%var_3167: Tensor[(96), int64]) -> (Tensor[(11, 1, 14), float32], Tensor[(1, 6, 16), int64], int64, Tensor[(96), int64]) {
    %104 = @func_848() /* ty=(Tensor[(11, ?, 14), int16], Tensor[(11, 1, 14), float32]) */;
    %105 = cast(9 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %106 = cast(%var_3167, dtype="int64") /* ty=Tensor[(96), int64] */;
    %107 = reshape(%105, newshape=[]) /* ty=int64 */;
    %108 = reshape(%106, newshape=[1, 6, 16]) /* ty=Tensor[(1, 6, 16), int64] */;
    %109 = @func_2719(%107, %108) /* ty=(Tensor[(1, 6, 16), int64],) */;
    %110 = %104.1;
    %111 = %109.0;
    (%110, %111, 9 /* ty=int64 */, %var_3167)
  };
  %112(%var_3183) /* ty=(Tensor[(11, 1, 14), float32], Tensor[(1, 6, 16), int64], int64, Tensor[(96), int64]) */
}

def @func_2695() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), uint16]) {
  @func_2693() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), uint16]) */
}

def @func_3367() -> (Tensor[(11, ?, 14), uint8],) {
  %113 = @func_2515() /* ty=(Tensor[(1, 7, 9), float32], Tensor[(7, 9), float32], Tensor[(11, ?, 14), uint8], Tensor[(11, ?, 14), uint8]) */;
  %114 = %113.2;
  (%114,)
}

def @func_6411(%var_6408: Tensor[(56, 20), uint16], %var_6409: Tensor[(156), float64], %var_6410: Tensor[(308), float32]) -> (Tensor[(11, 1, 14), float32], Tensor[(5, 1, 1120), bool], float64, Tensor[(1, 5), float64], Tensor[(56, 20), uint16], Tensor[(156), float64], Tensor[(308), float32]) {
  @func_6406(%var_6408, %var_6409, %var_6410) /* ty=(Tensor[(11, 1, 14), float32], Tensor[(5, 1, 1120), bool], float64, Tensor[(1, 5), float64], Tensor[(56, 20), uint16], Tensor[(156), float64], Tensor[(308), float32]) */
}

def @func_5409() -> (Tensor[(11, 1, 14), float32],) {
  @func_5407() /* ty=(Tensor[(11, 1, 14), float32],) */
}

def @func_4469() -> Tensor[(11, 1, 14), float32] {
  %115 = fn () -> Tensor[(11, 1, 14), float32] {
    @func_2009() /* ty=Tensor[(11, 1, 14), float32] */
  };
  %115() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_3832() -> (Tensor[(6, 11, 13), bool], Tensor[(6, 11, 13), int16]) {
  @func_3830() /* ty=(Tensor[(6, 11, 13), bool], Tensor[(6, 11, 13), int16]) */
}

def @func_574() -> Tensor[(11, 1, 14), float32] {
  %117 = fn () -> Tensor[(11, 1, 14), float32] {
    %116 = @func_496() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
    %116.0
  };
  %117() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_3064(%var_3061: Tensor[(308), float32], %var_3062: Tensor[(64), bool], %var_3063: Tensor[(847, 2), float32]) -> (Tensor[(11, 1, 14), float32], Tensor[(924), float32], Tensor[(308), float32], Tensor[(64), bool], Tensor[(11, 9, 14), uint16], Tensor[(11, ?, 14), bool], Tensor[(11, 11, 14), int8], Tensor[(847, 2), float32], Tensor[(11, 1, 14), float32]) {
  @func_3059(%var_3061, %var_3062, %var_3063) /* ty=(Tensor[(11, 1, 14), float32], Tensor[(924), float32], Tensor[(308), float32], Tensor[(64), bool], Tensor[(11, 9, 14), uint16], Tensor[(11, ?, 14), bool], Tensor[(11, 11, 14), int8], Tensor[(847, 2), float32], Tensor[(11, 1, 14), float32]) */
}

def @func_2515() -> (Tensor[(1, 7, 9), float32], Tensor[(7, 9), float32], Tensor[(11, ?, 14), uint8], Tensor[(11, ?, 14), uint8]) {
  %118 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 9), float32] */, dtype="float32") /* ty=Tensor[(7, 9), float32] */;
  %119 = reshape(%118, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), float32] */;
  %120 = @func_1132(%119) /* ty=(Tensor[(?, 7, 9), int16], Tensor[(1, 7, 9), float32], Tensor[(?, 7, 9), bool], Tensor[(11, 1, 14), float32], Tensor[(11, 11, 14), int8], Tensor[(1694), float32]) */;
  %121 = @func_2220() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %122 = %121.0;
  %123 = cast(%122, dtype="float32") /* ty=Tensor[(11, 1, 14), float32] */;
  %124 = log(%123) /* ty=Tensor[(11, 1, 14), float32] */;
  %125 = @func_1969() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(5, 1, 1), bool], float64, Tensor[(5), float64]) */;
  %126 = %125.0;
  %127 = cast(%126, dtype="uint8") /* ty=Tensor[(11, 1, 14), uint8] */;
  %128 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%124, dtype="uint8") /* ty=Tensor[(11, 1, 14), uint8] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %131 = cast(%122, dtype="uint8") /* ty=Tensor[(11, 1, 14), uint8] */;
  %132 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%124, dtype="uint8") /* ty=Tensor[(11, 1, 14), uint8] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %135 = %120.1;
  %136 = bitwise_or(%129, %130) /* ty=Tensor[(11, ?, 14), uint8] */;
  %137 = left_shift(%133, %134) /* ty=Tensor[(11, ?, 14), uint8] */;
  (%135, meta[relay.Constant][2] /* ty=Tensor[(7, 9), float32] */, %136, %137)
}

def @func_2807(%var_2806: float64) -> (Tensor[(11, 1, 14), float64], Tensor[(5, 1, 1), bool], float64, Tensor[(5), float64]) {
  %146 = fn (%var_2802: float64) -> (Tensor[(11, 1, 14), float64], Tensor[(5, 1, 1), bool], float64, Tensor[(5), float64]) {
    %138 = @func_418() /* ty=(Tensor[(11, 1, 14), float64],) */;
    %139 = cast(%var_2802, dtype="float64") /* ty=float64 */;
    %140 = cast(meta[relay.Constant][3] /* ty=Tensor[(5), float64] */, dtype="float64") /* ty=Tensor[(5), float64] */;
    %141 = reshape(%139, newshape=[]) /* ty=float64 */;
    %142 = reshape(%140, newshape=[5, 1, 1]) /* ty=Tensor[(5, 1, 1), float64] */;
    %143 = @func_47(%141, %142) /* ty=(Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) */;
    %144 = %138.0;
    %145 = %143.1;
    (%144, %145, %var_2802, meta[relay.Constant][3] /* ty=Tensor[(5), float64] */)
  };
  %146(%var_2806) /* ty=(Tensor[(11, 1, 14), float64], Tensor[(5, 1, 1), bool], float64, Tensor[(5), float64]) */
}

def @func_3771() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %151 = fn () -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
    %147 = @func_389() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
    %148 = @func_3383() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
    %149 = %147.1;
    %150 = %148.1;
    (%149, %150)
  };
  %151() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */
}

def @func_4355() -> (Tensor[(11, 1, 14), float32],) {
  %154 = fn () -> (Tensor[(11, 1, 14), float32],) {
    %152 = @func_496() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
    %153 = %152.0;
    (%153,)
  };
  %154() /* ty=(Tensor[(11, 1, 14), float32],) */
}

def @func_5648() -> (Tensor[(11, 1, 14), float32],) {
  %157 = fn () -> (Tensor[(11, 1, 14), float32],) {
    %155 = @func_220() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) */;
    %156 = %155.0;
    (%156,)
  };
  %157() /* ty=(Tensor[(11, 1, 14), float32],) */
}

def @func_926(%var_879: Tensor[(3, 13, 4), float64], %var_880: Tensor[(3, 13, 4), float64], %var_886: float64, %var_887: Tensor[(5), float64], %var_892: Tensor[(3, 13, 4), float32]) -> (Tensor[(5, 1, 1), float64], float64, Tensor[(5), float64], Tensor[(3, 13, 4), float32], Tensor[(3, 13, 4), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %158 = cast(%var_886, dtype="float64") /* ty=float64 */;
  %159 = cast(%var_887, dtype="float64") /* ty=Tensor[(5), float64] */;
  %160 = reshape(%158, newshape=[]) /* ty=float64 */;
  %161 = reshape(%159, newshape=[5, 1, 1]) /* ty=Tensor[(5, 1, 1), float64] */;
  %162 = @func_47(%160, %161) /* ty=(Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) */;
  %163 = cast(%var_880, dtype="bool") /* ty=Tensor[(3, 13, 4), bool] */;
  %164 = shape_of(%var_879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%var_879, dtype="bool") /* ty=Tensor[(3, 13, 4), bool] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %167 = equal(%165, %166) /* ty=Tensor[(3, 13, 4), bool] */;
  %168 = cast(%167, dtype="float32") /* ty=Tensor[(3, 13, 4), float32] */;
  %169 = cosh(%168) /* ty=Tensor[(3, 13, 4), float32] */;
  %170 = cast(%var_892, dtype="float32") /* ty=Tensor[(3, 13, 4), float32] */;
  %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%169, dtype="float32") /* ty=Tensor[(3, 13, 4), float32] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %174 = floor_mod(%172, %173) /* ty=Tensor[(3, 13, 4), float32] */;
  %175 = cast(%174, dtype="float32") /* ty=Tensor[(3, 13, 4), float32] */;
  %176 = cast(%167, dtype="float32") /* ty=Tensor[(3, 13, 4), float32] */;
  %177 = @func_523() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %178 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %179 = %162.0;
  %180 = atanh(%175) /* ty=Tensor[(3, 13, 4), float32] */;
  %181 = rsqrt(%176) /* ty=Tensor[(3, 13, 4), float32] */;
  %182 = %177.0;
  %183 = %178.0;
  (%179, %var_886, %var_887, %180, %181, %182, %183)
}

def @func_5579(%var_5560: Tensor[(2464), float32]) -> (Tensor[(11, 8, 14), bool], Tensor[(11, 6, 14), bool], Tensor[(2464), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %184 = @func_5198() /* ty=Tensor[(11, 1, 14), float32] */;
  %185 = cast(%184, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %186 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 8, 14), float32] */, dtype="bool") /* ty=Tensor[(11, 8, 14), bool] */;
  %187 = cast(%var_5560, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %188 = cast(%var_5560, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %189 = reshape(%187, newshape=[11, 16, 14]) /* ty=Tensor[(11, 16, 14), float32] */;
  %190 = reshape(%188, newshape=[11, 16, 14]) /* ty=Tensor[(11, 16, 14), float64] */;
  %191 = @func_4708(%189, %190) /* ty=(Tensor[(11, 16, 14), int16], Tensor[(11, 6, 14), bool]) */;
  %192 = @func_2888() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, 1, 14), float32], Tensor[(2, 4, 8), bool], Tensor[(154, 2), float32], Tensor[(64, 1), bool]) */;
  %193 = @func_5160() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %194 = greater_equal(%185, %186) /* ty=Tensor[(11, 8, 14), bool] */;
  %195 = %191.1;
  %196 = %192.2;
  %197 = %193.0;
  (%194, %195, %var_5560, %196, %197)
}

def @func_498() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  @func_496() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */
}

def @func_3745() -> Tensor[(11, 1, 14), float32] {
  @func_3743() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_5508() -> (Tensor[(11, ?, 14), bool],) {
  @func_5506() /* ty=(Tensor[(11, ?, 14), bool],) */
}

def @func_3743() -> Tensor[(11, 1, 14), float32] {
  %198 = @func_523() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %198.0
}

def @func_1687() -> Tensor[(11, 1, 14), float64] {
  %202 = fn () -> Tensor[(11, 1, 14), float64] {
    %199 = @func_965() /* ty=(Tensor[(11, 1, 14), float32],) */;
    %200 = %199.0;
    %201 = cast(%200, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
    asinh(%201) /* ty=Tensor[(11, 1, 14), float64] */
  };
  %202() /* ty=Tensor[(11, 1, 14), float64] */
}

def @func_6406(%var_6395: Tensor[(56, 20), uint16], %var_6396: Tensor[(156), float64], %var_6397: Tensor[(308), float32]) -> (Tensor[(11, 1, 14), float32], Tensor[(5, 1, 1120), bool], float64, Tensor[(1, 5), float64], Tensor[(56, 20), uint16], Tensor[(156), float64], Tensor[(308), float32]) {
  %203 = cast(-0.650065f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %204 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 5), float64] */, dtype="float64") /* ty=Tensor[(1, 5), float64] */;
  %205 = cast(%var_6395, dtype="uint16") /* ty=Tensor[(56, 20), uint16] */;
  %206 = cast(%var_6396, dtype="float64") /* ty=Tensor[(156), float64] */;
  %207 = cast(%var_6397, dtype="float32") /* ty=Tensor[(308), float32] */;
  %208 = reshape(%203, newshape=[]) /* ty=float64 */;
  %209 = reshape(%204, newshape=[5]) /* ty=Tensor[(5), float64] */;
  %210 = reshape(%205, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %211 = reshape(%206, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %212 = reshape(%207, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %213 = @func_6122(%208, %209, %210, %211, %212) /* ty=(Tensor[(11, 1, 14), float32], Tensor[(5), float64], Tensor[(11, 1, 14), float32], Tensor[(14, 8, 10), uint16], Tensor[(5), float64], Tensor[(156), float64], Tensor[(11, ?, 14), float64], Tensor[(5, 1, 1120), bool], Tensor[(924), float32], Tensor[(308), float32], Tensor[(64), bool], Tensor[(5, 1, 1120), float64]) */;
  %214 = @func_2009() /* ty=Tensor[(11, 1, 14), float32] */;
  %215 = %213.7;
  (%214, %215, -0.650065f64 /* ty=float64 */, meta[relay.Constant][5] /* ty=Tensor[(1, 5), float64] */, %var_6395, %var_6396, %var_6397)
}

def @main(%var_6427: Tensor[(11, 5, 14), float32]) -> (Tensor[(11, 5, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 5, 14), uint64], Tensor[(11, 5, 14), float32], Tensor[(11, 5, 14), float64]) {
  %216 = @func_5198() /* ty=Tensor[(11, 1, 14), float32] */;
  %217 = cast(%216, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %218 = cast(%var_6427, dtype="bool") /* ty=Tensor[(11, 5, 14), bool] */;
  %219 = logical_and(%217, %218) /* ty=Tensor[(11, 5, 14), bool] */;
  %220 = cast(%219, dtype="float32") /* ty=Tensor[(11, 5, 14), float32] */;
  %221 = shape_of(%var_6427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%var_6427, dtype="float32") /* ty=Tensor[(11, 5, 14), float32] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %224 = @func_5409() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %225 = cast(%216, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %226 = cast(%219, dtype="float64") /* ty=Tensor[(11, 5, 14), float64] */;
  %227 = mod(%225, %226) /* ty=Tensor[(11, 5, 14), float64] */;
  %228 = cast(%var_6427, dtype="uint16") /* ty=Tensor[(11, 5, 14), uint16] */;
  %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(%227, dtype="uint16") /* ty=Tensor[(11, 5, 14), uint16] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %232 = left_shift(%230, %231) /* ty=Tensor[(11, 5, 14), uint16] */;
  %233 = cast(%232, dtype="uint64") /* ty=Tensor[(11, 5, 14), uint64] */;
  %234 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%227, dtype="uint64") /* ty=Tensor[(11, 5, 14), uint64] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %237 = cast(%219, dtype="float32") /* ty=Tensor[(11, 5, 14), float32] */;
  %238 = cast(%var_6427, dtype="float64") /* ty=Tensor[(11, 5, 14), float64] */;
  %239 = maximum(%222, %223) /* ty=Tensor[(11, 5, 14), float32] */;
  %240 = %224.0;
  %241 = subtract(%235, %236) /* ty=Tensor[(11, 5, 14), uint64] */;
  %242 = acosh(%237) /* ty=Tensor[(11, 5, 14), float32] */;
  %243 = cosh(%238) /* ty=Tensor[(11, 5, 14), float64] */;
  (%239, %240, %241, %242, %243)
}

def @func_1823() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %244 = @func_496() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %245 = %244.0;
  %246 = cast(%245, dtype="float32") /* ty=Tensor[(11, 1, 14), float32] */;
  %247 = @func_1518() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %248 = %247.0;
  %249 = cast(%248, dtype="float32") /* ty=Tensor[(11, 1, 14), float32] */;
  %250 = sigmoid(%246) /* ty=Tensor[(11, 1, 14), float32] */;
  %251 = erf(%249) /* ty=Tensor[(11, 1, 14), float32] */;
  %252 = @func_435() /* ty=Tensor[(11, 1, 14), float32] */;
  (%250, %251, %252)
}

def @func_4712(%var_4710: Tensor[(11, 16, 14), float32], %var_4711: Tensor[(11, 16, 14), float64]) -> (Tensor[(11, 16, 14), int16], Tensor[(11, 6, 14), bool]) {
  @func_4708(%var_4710, %var_4711) /* ty=(Tensor[(11, 16, 14), int16], Tensor[(11, 6, 14), bool]) */
}

def @func_5967() -> (Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool]) {
  %256 = fn () -> (Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool]) {
    %253 = @func_1177() /* ty=(Tensor[(11, 1, 14), float64], Tensor[(11, ?, 14), bool]) */;
    %254 = @func_4848() /* ty=Tensor[(11, 1, 14), float32] */;
    %255 = %253.1;
    (%254, %255)
  };
  %256() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool]) */
}

def @func_3530() -> (Tensor[(11, 11, 14), int32], Tensor[(10, ?, 5), uint8], Tensor[(50), float32]) {
  @func_3528() /* ty=(Tensor[(11, 11, 14), int32], Tensor[(10, ?, 5), uint8], Tensor[(50), float32]) */
}

def @func_420() -> (Tensor[(11, 1, 14), float64],) {
  @func_418() /* ty=(Tensor[(11, 1, 14), float64],) */
}

def @func_4331(%var_4330: Tensor[(10, 7, 14), float64]) -> (Tensor[(11, 1, 14), float32], Tensor[(10, 7, 14), bool], Tensor[(11, 9, 14), int8], Tensor[(11, 1, 14), float32]) {
  %270 = fn (%var_4265: Tensor[(10, 7, 14), float64]) -> (Tensor[(11, 1, 14), float32], Tensor[(10, 7, 14), bool], Tensor[(11, 9, 14), int8], Tensor[(11, 1, 14), float32]) {
    %257 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
    %258 = cast(%var_4265, dtype="float64") /* ty=Tensor[(10, 7, 14), float64] */;
    %259 = asin(%258) /* ty=Tensor[(10, 7, 14), float64] */;
    %260 = cast(%var_4265, dtype="float64") /* ty=Tensor[(10, 7, 14), float64] */;
    %261 = sinh(%260) /* ty=Tensor[(10, 7, 14), float64] */;
    %262 = cast(%261, dtype="bool") /* ty=Tensor[(10, 7, 14), bool] */;
    %263 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
    %264 = cast(%259, dtype="bool") /* ty=Tensor[(10, 7, 14), bool] */;
    %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %266 = %257.0;
    %267 = equal(%264, %265) /* ty=Tensor[(10, 7, 14), bool] */;
    %268 = @func_2601() /* ty=Tensor[(11, 9, 14), int8] */;
    %269 = @func_2555() /* ty=Tensor[(11, 1, 14), float32] */;
    (%266, %267, %268, %269)
  };
  %270(%var_4330) /* ty=(Tensor[(11, 1, 14), float32], Tensor[(10, 7, 14), bool], Tensor[(11, 9, 14), int8], Tensor[(11, 1, 14), float32]) */
}

def @func_1178() -> (Tensor[(11, 1, 14), float64], Tensor[(11, ?, 14), bool]) {
  %282 = fn () -> (Tensor[(11, 1, 14), float64], Tensor[(11, ?, 14), bool]) {
    %271 = @func_220() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) */;
    %272 = @func_965() /* ty=(Tensor[(11, 1, 14), float32],) */;
    %273 = %272.0;
    %274 = @func_1015() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
    %275 = %274.1;
    %276 = cast(%275, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
    %277 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
    %278 = cast(%273, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
    %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %280 = %271.1;
    %281 = logical_and(%278, %279) /* ty=Tensor[(11, ?, 14), bool] */;
    (%280, %281)
  };
  %282() /* ty=(Tensor[(11, 1, 14), float64], Tensor[(11, ?, 14), bool]) */
}

def @func_1660(%var_1600: Tensor[(11, 9, 14), float32]) -> (Tensor[(11, 9, 14), int32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float32]) {
  %283 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %284 = %283.0;
  %285 = cast(%284, dtype="int32") /* ty=Tensor[(11, 1, 14), int32] */;
  %286 = cast(%var_1600, dtype="int32") /* ty=Tensor[(11, 9, 14), int32] */;
  %287 = @func_389() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %288 = cast(%var_1600, dtype="float64") /* ty=Tensor[(11, 9, 14), float64] */;
  %289 = tan(%288) /* ty=Tensor[(11, 9, 14), float64] */;
  %290 = cast(%289, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
  %291 = right_shift(%285, %286) /* ty=Tensor[(11, 9, 14), int32] */;
  %292 = %287.1;
  %293 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
  %294 = sigmoid(%290) /* ty=Tensor[(11, 9, 14), float32] */;
  (%291, %292, %293, %294)
}

def @func_2255() -> (Tensor[(11, 1, 14), float32],) {
  %297 = fn () -> (Tensor[(11, 1, 14), float32],) {
    %295 = @func_848() /* ty=(Tensor[(11, ?, 14), int16], Tensor[(11, 1, 14), float32]) */;
    %296 = %295.1;
    (%296,)
  };
  %297() /* ty=(Tensor[(11, 1, 14), float32],) */
}

def @func_4903() -> (Tensor[(11, 1, 14), float32], Tensor[(1694), float64], Tensor[(14, 8, 10), uint16], Tensor[(1120), uint16]) {
  %298 = @func_2888() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, 1, 14), float32], Tensor[(2, 4, 8), bool], Tensor[(154, 2), float32], Tensor[(64, 1), bool]) */;
  %299 = @func_1083() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), float64], Tensor[(11, 11, 14), int8], Tensor[(1694), float32]) */;
  %300 = %299.3;
  %301 = cast(%300, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %302 = cast(meta[relay.Constant][6] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %303 = reshape(%302, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), uint16] */;
  %304 = @func_3466(%303) /* ty=(Tensor[(14, 8, 10), uint16],) */;
  %305 = %298.0;
  %306 = sinh(%301) /* ty=Tensor[(1694), float64] */;
  %307 = %304.0;
  (%305, %306, %307, meta[relay.Constant][6] /* ty=Tensor[(1120), uint16] */)
}

def @func_4017() -> Tensor[(11, 1, 14), float64] {
  %308 = fn () -> Tensor[(11, 1, 14), float64] {
    @func_1686() /* ty=Tensor[(11, 1, 14), float64] */
  };
  %308() /* ty=Tensor[(11, 1, 14), float64] */
}

def @func_2888() -> (Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, 1, 14), float32], Tensor[(2, 4, 8), bool], Tensor[(154, 2), float32], Tensor[(64, 1), bool]) {
  %309 = @func_1823() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %310 = @func_2009() /* ty=Tensor[(11, 1, 14), float32] */;
  %311 = cast(%310, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %312 = sin(%311) /* ty=Tensor[(11, 1, 14), float64] */;
  %313 = cast(%310, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %317 = @func_965() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %318 = cast(meta[relay.Constant][7] /* ty=Tensor[(154, 2), float32] */, dtype="float32") /* ty=Tensor[(154, 2), float32] */;
  %319 = cast(meta[relay.Constant][8] /* ty=Tensor[(64, 1), bool] */, dtype="bool") /* ty=Tensor[(64, 1), bool] */;
  %320 = reshape(%318, newshape=[11, 2, 14]) /* ty=Tensor[(11, 2, 14), float32] */;
  %321 = reshape(%319, newshape=[64]) /* ty=Tensor[(64), bool] */;
  %322 = @func_2652(%320, %321) /* ty=(Tensor[(11, 2, 14), bool], Tensor[(2, 4, 8), bool], Tensor[(64), bool], Tensor[(924), float32], Tensor[(11, 2, 14), bool]) */;
  %323 = %309.2;
  %324 = greater(%315, %316) /* ty=Tensor[(11, ?, 14), bool] */;
  %325 = %317.0;
  %326 = %322.1;
  (%323, %324, %325, %326, meta[relay.Constant][7] /* ty=Tensor[(154, 2), float32] */, meta[relay.Constant][8] /* ty=Tensor[(64, 1), bool] */)
}

def @func_4214(%var_4212: Tensor[(11, 9, 14), int8]) -> Tensor[(11, 9, 14), float64] {
  @func_4211(%var_4212) /* ty=Tensor[(11, 9, 14), float64] */
}

def @func_4126() -> Tensor[(11, 9, 14), int8] {
  @func_4124() /* ty=Tensor[(11, 9, 14), int8] */
}

def @func_2220() -> (Tensor[(11, 1, 14), float32],) {
  %327 = @func_2200() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %328 = %327.2;
  (%328,)
}

def @func_78() -> Tensor[(11, 1, 14), float32] {
  %329 = fn () -> Tensor[(11, 1, 14), float32] {
    @func_64() /* ty=Tensor[(11, 1, 14), float32] */
  };
  %329() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_3910() -> (Tensor[(11, 1, 14), float64], Tensor[(11, 1, 14), float32]) {
  %330 = @func_614() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %331 = @func_1686() /* ty=Tensor[(11, 1, 14), float64] */;
  %332 = %330.0;
  (%331, %332)
}

def @func_3279(%var_3272: Tensor[(16, 15, 16), uint16]) -> Tensor[(16, 15, 16), bool] {
  %333 = cast(%var_3272, dtype="bool") /* ty=Tensor[(16, 15, 16), bool] */;
  %334 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(16, 15, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 15, 16), uint16] */, dtype="bool") /* ty=Tensor[(16, 15, 16), bool] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%335, %336) /* ty=Tensor[(16, 15, 16), bool] */
}

def @func_221() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) {
  %343 = fn () -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) {
    %337 = @func_160() /* ty=(Tensor[(5), float64], Tensor[(11, ?, 14), int64], Tensor[(11, ?, 14), float32], Tensor[(5, 1, 1), bool], Tensor[(11, 1, 14), float32]) */;
    %338 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
    %339 = %338.0;
    %340 = cast(%339, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
    %341 = %337.4;
    %342 = rsqrt(%340) /* ty=Tensor[(11, 1, 14), float64] */;
    (%341, %342)
  };
  %343() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) */
}

def @func_3469(%var_3467: Tensor[(14, 8, 10), uint16]) -> (Tensor[(14, 8, 10), uint16],) {
  @func_3466(%var_3467) /* ty=(Tensor[(14, 8, 10), uint16],) */
}

def @func_933(%var_928: Tensor[(3, 13, 4), float64], %var_929: Tensor[(3, 13, 4), float64], %var_930: float64, %var_931: Tensor[(5), float64], %var_932: Tensor[(3, 13, 4), float32]) -> (Tensor[(5, 1, 1), float64], float64, Tensor[(5), float64], Tensor[(3, 13, 4), float32], Tensor[(3, 13, 4), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  @func_926(%var_928, %var_929, %var_930, %var_931, %var_932) /* ty=(Tensor[(5, 1, 1), float64], float64, Tensor[(5), float64], Tensor[(3, 13, 4), float32], Tensor[(3, 13, 4), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */
}

def @func_3577() -> (Tensor[(11, 9, 14), int8], Tensor[(11, 1, 14), float32]) {
  %347 = fn () -> (Tensor[(11, 9, 14), int8], Tensor[(11, 1, 14), float32]) {
    %344 = @func_2736() /* ty=(Tensor[(11, 9, 14), int8],) */;
    %345 = %344.0;
    %346 = @func_573() /* ty=Tensor[(11, 1, 14), float32] */;
    (%345, %346)
  };
  %347() /* ty=(Tensor[(11, 9, 14), int8], Tensor[(11, 1, 14), float32]) */
}

def @func_2723(%var_2721: int64, %var_2722: Tensor[(1, 6, 16), int64]) -> (Tensor[(1, 6, 16), int64],) {
  @func_2719(%var_2721, %var_2722) /* ty=(Tensor[(1, 6, 16), int64],) */
}

def @func_390() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %351 = fn () -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
    %348 = @func_220() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) */;
    %349 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
    %350 = %348.0;
    (%349, %350)
  };
  %351() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */
}

def @func_5035() -> (Tensor[(50), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %358 = fn () -> (Tensor[(50), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
    %352 = @func_3528() /* ty=(Tensor[(11, 11, 14), int32], Tensor[(10, ?, 5), uint8], Tensor[(50), float32]) */;
    %353 = @func_965() /* ty=(Tensor[(11, 1, 14), float32],) */;
    %354 = @func_4354() /* ty=(Tensor[(11, 1, 14), float32],) */;
    %355 = %352.2;
    %356 = %353.0;
    %357 = %354.0;
    (%355, %356, %357)
  };
  %358() /* ty=(Tensor[(50), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */
}

def @func_168() -> (Tensor[(11, 1, 14), float32],) {
  %360 = fn () -> (Tensor[(11, 1, 14), float32],) {
    %359 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
    (%359,)
  };
  %360() /* ty=(Tensor[(11, 1, 14), float32],) */
}

def @func_496() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %361 = @func_435() /* ty=Tensor[(11, 1, 14), float32] */;
  %362 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
  %363 = @func_77() /* ty=Tensor[(11, 1, 14), float32] */;
  %364 = @func_435() /* ty=Tensor[(11, 1, 14), float32] */;
  (%361, %362, %363, %364)
}

def @func_5131(%var_5124: Tensor[(16, 12, 7), float32]) -> (Tensor[(16, 12, 7), float64],) {
  %365 = cast(%var_5124, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
  %366 = asin(%365) /* ty=Tensor[(16, 12, 7), float32] */;
  %367 = cast(%366, dtype="float64") /* ty=Tensor[(16, 12, 7), float64] */;
  %368 = cosh(%367) /* ty=Tensor[(16, 12, 7), float64] */;
  (%368,)
}

def @func_2655(%var_2653: Tensor[(11, 2, 14), float32], %var_2654: Tensor[(64), bool]) -> (Tensor[(11, 2, 14), bool], Tensor[(2, 4, 8), bool], Tensor[(64), bool], Tensor[(924), float32], Tensor[(11, 2, 14), bool]) {
  %383 = fn (%var_2627: Tensor[(11, 2, 14), float32], %var_2635: Tensor[(64), bool]) -> (Tensor[(11, 2, 14), bool], Tensor[(2, 4, 8), bool], Tensor[(64), bool], Tensor[(924), float32], Tensor[(11, 2, 14), bool]) {
    %369 = @func_1518() /* ty=(Tensor[(11, 1, 14), float32],) */;
    %370 = %369.0;
    %371 = cast(%370, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
    %372 = cast(%var_2627, dtype="bool") /* ty=Tensor[(11, 2, 14), bool] */;
    %373 = cast(%var_2635, dtype="bool") /* ty=Tensor[(64), bool] */;
    %374 = cast(meta[relay.Constant][10] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
    %375 = reshape(%373, newshape=[2, 4, 8]) /* ty=Tensor[(2, 4, 8), bool] */;
    %376 = reshape(%374, newshape=[11, 6, 14]) /* ty=Tensor[(11, 6, 14), float32] */;
    %377 = @func_2401(%375, %376) /* ty=(Tensor[(2, 4, 8), bool], Tensor[(11, 6, 14), bool]) */;
    %378 = cast(%var_2627, dtype="bool") /* ty=Tensor[(11, 2, 14), bool] */;
    %379 = cast(%370, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
    %380 = greater(%371, %372) /* ty=Tensor[(11, 2, 14), bool] */;
    %381 = %377.0;
    %382 = less_equal(%378, %379) /* ty=Tensor[(11, 2, 14), bool] */;
    (%380, %381, %var_2635, meta[relay.Constant][10] /* ty=Tensor[(924), float32] */, %382)
  };
  %383(%var_2653, %var_2654) /* ty=(Tensor[(11, 2, 14), bool], Tensor[(2, 4, 8), bool], Tensor[(64), bool], Tensor[(924), float32], Tensor[(11, 2, 14), bool]) */
}

def @func_6380() -> Tensor[(11, 1, 14), float32] {
  %384 = fn () -> Tensor[(11, 1, 14), float32] {
    @func_2966() /* ty=Tensor[(11, 1, 14), float32] */
  };
  %384() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_6292() -> Tensor[(11, 1, 14), float64] {
  %385 = @func_220() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) */;
  %385.1
}

def @func_2201() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %390 = fn () -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
    %386 = @func_735() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float32]) */;
    %387 = @func_2009() /* ty=Tensor[(11, 1, 14), float32] */;
    %388 = @func_573() /* ty=Tensor[(11, 1, 14), float32] */;
    %389 = %386.0;
    (%387, %388, %389)
  };
  %390() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */
}

def @func_3249() -> Tensor[(11, 1, 14), float64] {
  @func_3247() /* ty=Tensor[(11, 1, 14), float64] */
}

def @func_4849() -> Tensor[(11, 1, 14), float32] {
  %392 = fn () -> Tensor[(11, 1, 14), float32] {
    %391 = @func_965() /* ty=(Tensor[(11, 1, 14), float32],) */;
    %391.0
  };
  %392() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_615() -> (Tensor[(11, 1, 14), float32],) {
  %394 = fn () -> (Tensor[(11, 1, 14), float32],) {
    %393 = @func_573() /* ty=Tensor[(11, 1, 14), float32] */;
    (%393,)
  };
  %394() /* ty=(Tensor[(11, 1, 14), float32],) */
}

def @func_1135(%var_1133: Tensor[(1, 7, 9), float32]) -> (Tensor[(?, 7, 9), int16], Tensor[(1, 7, 9), float32], Tensor[(?, 7, 9), bool], Tensor[(11, 1, 14), float32], Tensor[(11, 11, 14), int8], Tensor[(1694), float32]) {
  @func_1132(%var_1133) /* ty=(Tensor[(?, 7, 9), int16], Tensor[(1, 7, 9), float32], Tensor[(?, 7, 9), bool], Tensor[(11, 1, 14), float32], Tensor[(11, 11, 14), int8], Tensor[(1694), float32]) */
}

def @func_4211(%var_4193: Tensor[(11, 9, 14), int8]) -> Tensor[(11, 9, 14), float64] {
  %395 = @func_2601() /* ty=Tensor[(11, 9, 14), int8] */;
  %396 = cast(%var_4193, dtype="bool") /* ty=Tensor[(11, 9, 14), bool] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%395, dtype="bool") /* ty=Tensor[(11, 9, 14), bool] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %400 = less(%398, %399) /* ty=Tensor[(11, 9, 14), bool] */;
  %401 = cast(%400, dtype="float64") /* ty=Tensor[(11, 9, 14), float64] */;
  log(%401) /* ty=Tensor[(11, 9, 14), float64] */
}

def @func_351(%var_350: Tensor[(11, 11, 14), float32]) -> Tensor[(11, 11, 14), int8] {
  %406 = fn (%var_344: Tensor[(11, 11, 14), float32]) -> Tensor[(11, 11, 14), int8] {
    %402 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
    %403 = %402.0;
    %404 = cast(%403, dtype="int8") /* ty=Tensor[(11, 1, 14), int8] */;
    %405 = cast(%var_344, dtype="int8") /* ty=Tensor[(11, 11, 14), int8] */;
    logical_xor(%404, %405) /* ty=Tensor[(11, 11, 14), int8] */
  };
  %406(%var_350) /* ty=Tensor[(11, 11, 14), int8] */
}

def @func_418() -> (Tensor[(11, 1, 14), float64],) {
  %407 = @func_220() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float64]) */;
  %408 = %407.1;
  (%408,)
}

def @func_3453() -> (Tensor[(11, 9, 14), uint16], Tensor[(11, 1, 14), float32]) {
  %409 = @func_2693() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), uint16]) */;
  %410 = @func_614() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %411 = %409.1;
  %412 = %410.0;
  (%411, %412)
}

def @func_4905() -> (Tensor[(11, 1, 14), float32], Tensor[(1694), float64], Tensor[(14, 8, 10), uint16], Tensor[(1120), uint16]) {
  @func_4903() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(1694), float64], Tensor[(14, 8, 10), uint16], Tensor[(1120), uint16]) */
}

def @func_6206(%var_6205: float64) -> (Tensor[(11, 9, 14), int8], Tensor[(5, 1, 1), float64], float64, Tensor[(5, 1), float64], Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), int8]) {
  %423 = fn (%var_6179: float64) -> (Tensor[(11, 9, 14), int8], Tensor[(5, 1, 1), float64], float64, Tensor[(5, 1), float64], Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), int8]) {
    %413 = cast(%var_6179, dtype="float64") /* ty=float64 */;
    %414 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 1), float64] */;
    %415 = reshape(%413, newshape=[]) /* ty=float64 */;
    %416 = reshape(%414, newshape=[5, 1, 1]) /* ty=Tensor[(5, 1, 1), float64] */;
    %417 = @func_47(%415, %416) /* ty=(Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) */;
    %418 = @func_5599() /* ty=(Tensor[(11, 1, 14), float32],) */;
    %419 = @func_2601() /* ty=Tensor[(11, 9, 14), int8] */;
    %420 = %417.0;
    %421 = %418.0;
    %422 = @func_4124() /* ty=Tensor[(11, 9, 14), int8] */;
    (%419, %420, %var_6179, meta[relay.Constant][11] /* ty=Tensor[(5, 1), float64] */, %421, %422)
  };
  %423(%var_6205) /* ty=(Tensor[(11, 9, 14), int8], Tensor[(5, 1, 1), float64], float64, Tensor[(5, 1), float64], Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), int8]) */
}

def @func_64() -> Tensor[(11, 1, 14), float32] {
  %424 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 1, 14), float32] */, dtype="float32") /* ty=Tensor[(11, 1, 14), float32] */;
  cosh(%424) /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_1427() -> (Tensor[(11, ?, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, ?, 14), bool]) {
  @func_1425() /* ty=(Tensor[(11, ?, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, ?, 14), bool]) */
}

def @func_66() -> Tensor[(11, 1, 14), float32] {
  @func_64() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_5879() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %425 = @func_5599() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %426 = @func_5599() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %427 = %425.0;
  %428 = %426.0;
  (%427, %428)
}

def @func_967() -> (Tensor[(11, 1, 14), float32],) {
  @func_965() /* ty=(Tensor[(11, 1, 14), float32],) */
}

def @func_4124() -> Tensor[(11, 9, 14), int8] {
  @func_2601() /* ty=Tensor[(11, 9, 14), int8] */
}

def @func_1825() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  @func_1823() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */
}

def @func_6246() -> (Tensor[(11, 1, 14), float32],) {
  %430 = fn () -> (Tensor[(11, 1, 14), float32],) {
    %429 = @func_2555() /* ty=Tensor[(11, 1, 14), float32] */;
    (%429,)
  };
  %430() /* ty=(Tensor[(11, 1, 14), float32],) */
}

def @func_850() -> (Tensor[(11, ?, 14), int16], Tensor[(11, 1, 14), float32]) {
  @func_848() /* ty=(Tensor[(11, ?, 14), int16], Tensor[(11, 1, 14), float32]) */
}

def @func_3384() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %434 = fn () -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
    %431 = @func_389() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
    %432 = @func_2009() /* ty=Tensor[(11, 1, 14), float32] */;
    %433 = %431.0;
    (%432, %433)
  };
  %434() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */
}

def @func_2556() -> Tensor[(11, 1, 14), float32] {
  %436 = fn () -> Tensor[(11, 1, 14), float32] {
    %435 = @func_1823() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
    %435.2
  };
  %436() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_1971() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(5, 1, 1), bool], float64, Tensor[(5), float64]) {
  @func_1969() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(5, 1, 1), bool], float64, Tensor[(5), float64]) */
}

def @func_5084() -> Tensor[(11, 1, 14), float32] {
  %438 = fn () -> Tensor[(11, 1, 14), float32] {
    %437 = @func_4354() /* ty=(Tensor[(11, 1, 14), float32],) */;
    %437.0
  };
  %438() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_2404(%var_2402: Tensor[(2, 4, 8), bool], %var_2403: Tensor[(11, 6, 14), float32]) -> (Tensor[(2, 4, 8), bool], Tensor[(11, 6, 14), bool]) {
  %449 = fn (%var_2349: Tensor[(2, 4, 8), bool], %var_2395: Tensor[(11, 6, 14), float32]) -> (Tensor[(2, 4, 8), bool], Tensor[(11, 6, 14), bool]) {
    %439 = cast(%var_2349, dtype="bool") /* ty=Tensor[(2, 4, 8), bool] */;
    %440 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(2, 4, 8), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %441 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 4, 8), bool] */, dtype="bool") /* ty=Tensor[(2, 4, 8), bool] */;
    %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %443 = @func_496() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
    %444 = %443.1;
    %445 = cast(%444, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
    %446 = cast(%var_2395, dtype="bool") /* ty=Tensor[(11, 6, 14), bool] */;
    %447 = logical_and(%441, %442) /* ty=Tensor[(2, 4, 8), bool] */;
    %448 = less(%445, %446) /* ty=Tensor[(11, 6, 14), bool] */;
    (%447, %448)
  };
  %449(%var_2402, %var_2403) /* ty=(Tensor[(2, 4, 8), bool], Tensor[(11, 6, 14), bool]) */
}

def @func_2602() -> Tensor[(11, 9, 14), int8] {
  %455 = fn () -> Tensor[(11, 9, 14), int8] {
    %450 = @func_735() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float32]) */;
    %451 = %450.1;
    %452 = @func_2555() /* ty=Tensor[(11, 1, 14), float32] */;
    %453 = cast(%451, dtype="int8") /* ty=Tensor[(11, 9, 14), int8] */;
    %454 = cast(%452, dtype="int8") /* ty=Tensor[(11, 1, 14), int8] */;
    left_shift(%453, %454) /* ty=Tensor[(11, 9, 14), int8] */
  };
  %455() /* ty=Tensor[(11, 9, 14), int8] */
}

def @func_5371() -> Tensor[(11, 1, 14), float32] {
  %457 = fn () -> Tensor[(11, 1, 14), float32] {
    %456 = @func_4075() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), bool]) */;
    %456.0
  };
  %457() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_5199() -> Tensor[(11, 1, 14), float32] {
  %458 = fn () -> Tensor[(11, 1, 14), float32] {
    @func_64() /* ty=Tensor[(11, 1, 14), float32] */
  };
  %458() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_2737() -> (Tensor[(11, 9, 14), int8],) {
  %460 = fn () -> (Tensor[(11, 9, 14), int8],) {
    %459 = @func_2601() /* ty=Tensor[(11, 9, 14), int8] */;
    (%459,)
  };
  %460() /* ty=(Tensor[(11, 9, 14), int8],) */
}

def @func_3912() -> (Tensor[(11, 1, 14), float64], Tensor[(11, 1, 14), float32]) {
  @func_3910() /* ty=(Tensor[(11, 1, 14), float64], Tensor[(11, 1, 14), float32]) */
}

def @func_3528() -> (Tensor[(11, 11, 14), int32], Tensor[(10, ?, 5), uint8], Tensor[(50), float32]) {
  %461 = @func_2698() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %462 = %461.0;
  %463 = cast(%462, dtype="int32") /* ty=Tensor[(11, 1, 14), int32] */;
  %464 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 11, 14), float32] */, dtype="int32") /* ty=Tensor[(11, 11, 14), int32] */;
  %465 = cast(meta[relay.Constant][15] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %466 = reshape(%465, newshape=[10, 1, 5]) /* ty=Tensor[(10, 1, 5), float32] */;
  %467 = @func_1294(%466) /* ty=(Tensor[(10, ?, 5), uint8], Tensor[(5, 1, 1), float64], float64, Tensor[(5), float64]) */;
  %468 = bitwise_and(%463, %464) /* ty=Tensor[(11, 11, 14), int32] */;
  %469 = %467.0;
  (%468, %469, meta[relay.Constant][15] /* ty=Tensor[(50), float32] */)
}

def @func_2699() -> (Tensor[(11, 1, 14), float32],) {
  %472 = fn () -> (Tensor[(11, 1, 14), float32],) {
    %470 = @func_614() /* ty=(Tensor[(11, 1, 14), float32],) */;
    %471 = %470.0;
    (%471,)
  };
  %472() /* ty=(Tensor[(11, 1, 14), float32],) */
}

def @func_1297(%var_1295: Tensor[(10, 1, 5), float32]) -> (Tensor[(10, ?, 5), uint8], Tensor[(5, 1, 1), float64], float64, Tensor[(5), float64]) {
  @func_1294(%var_1295) /* ty=(Tensor[(10, ?, 5), uint8], Tensor[(5, 1, 1), float64], float64, Tensor[(5), float64]) */
}

def @func_2967() -> Tensor[(11, 1, 14), float32] {
  %473 = fn () -> Tensor[(11, 1, 14), float32] {
    @func_64() /* ty=Tensor[(11, 1, 14), float32] */
  };
  %473() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_1561() -> Tensor[(11, 1, 14), float32] {
  %479 = fn () -> Tensor[(11, 1, 14), float32] {
    %474 = @func_418() /* ty=(Tensor[(11, 1, 14), float64],) */;
    %475 = %474.0;
    %476 = cast(%475, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
    %477 = acosh(%476) /* ty=Tensor[(11, 1, 14), float64] */;
    %478 = cast(%477, dtype="float32") /* ty=Tensor[(11, 1, 14), float32] */;
    tan(%478) /* ty=Tensor[(11, 1, 14), float32] */
  };
  %479() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_6129(%var_6124: float64, %var_6125: Tensor[(5), float64], %var_6126: Tensor[(1120), uint16], %var_6127: Tensor[(156), float64], %var_6128: Tensor[(308), float32]) -> (Tensor[(11, 1, 14), float32], Tensor[(5), float64], Tensor[(11, 1, 14), float32], Tensor[(14, 8, 10), uint16], Tensor[(5), float64], Tensor[(156), float64], Tensor[(11, ?, 14), float64], Tensor[(5, 1, 1120), bool], Tensor[(924), float32], Tensor[(308), float32], Tensor[(64), bool], Tensor[(5, 1, 1120), float64]) {
  @func_6122(%var_6124, %var_6125, %var_6126, %var_6127, %var_6128) /* ty=(Tensor[(11, 1, 14), float32], Tensor[(5), float64], Tensor[(11, 1, 14), float32], Tensor[(14, 8, 10), uint16], Tensor[(5), float64], Tensor[(156), float64], Tensor[(11, ?, 14), float64], Tensor[(5, 1, 1120), bool], Tensor[(924), float32], Tensor[(308), float32], Tensor[(64), bool], Tensor[(5, 1, 1120), float64]) */
}

def @func_524() -> (Tensor[(11, 1, 14), float32],) {
  %481 = fn () -> (Tensor[(11, 1, 14), float32],) {
    %480 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
    (%480,)
  };
  %481() /* ty=(Tensor[(11, 1, 14), float32],) */
}

def @func_965() -> (Tensor[(11, 1, 14), float32],) {
  %482 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
  (%482,)
}

def @func_2719(%var_2711: int64, %var_2712: Tensor[(1, 6, 16), int64]) -> (Tensor[(1, 6, 16), int64],) {
  %483 = cast(%var_2711, dtype="int64") /* ty=int64 */;
  %484 = cast(%var_2712, dtype="int64") /* ty=Tensor[(1, 6, 16), int64] */;
  %485 = right_shift(%483, %484) /* ty=Tensor[(1, 6, 16), int64] */;
  (%485,)
}

def @func_5601() -> (Tensor[(11, 1, 14), float32],) {
  @func_5599() /* ty=(Tensor[(11, 1, 14), float32],) */
}

def @func_5881() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  @func_5879() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */
}

def @func_4978(%var_4973: Tensor[(11, 9, 14), float32]) -> (Tensor[(11, 9, 14), bool],) {
  %486 = @func_3082() /* ty=Tensor[(11, 9, 14), float32] */;
  %487 = cast(%var_4973, dtype="bool") /* ty=Tensor[(11, 9, 14), bool] */;
  %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%486, dtype="bool") /* ty=Tensor[(11, 9, 14), bool] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %491 = greater_equal(%489, %490) /* ty=Tensor[(11, 9, 14), bool] */;
  (%491,)
}

def @func_5599() -> (Tensor[(11, 1, 14), float32],) {
  %492 = @func_4542() /* ty=(Tensor[(11, 1, 14), float64], Tensor[(11, 1, 14), float32]) */;
  %493 = %492.1;
  (%493,)
}

def @func_50(%var_48: float64, %var_49: Tensor[(5, 1, 1), float64]) -> (Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) {
  %500 = fn (%var_21: float64, %var_22: Tensor[(5, 1, 1), float64]) -> (Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) {
    %494 = cast(%var_21, dtype="float64") /* ty=float64 */;
    %495 = cast(%var_22, dtype="float64") /* ty=Tensor[(5, 1, 1), float64] */;
    %496 = cast(%var_22, dtype="bool") /* ty=Tensor[(5, 1, 1), bool] */;
    %497 = cast(%var_21, dtype="bool") /* ty=bool */;
    %498 = mod(%494, %495) /* ty=Tensor[(5, 1, 1), float64] */;
    %499 = less_equal(%496, %497) /* ty=Tensor[(5, 1, 1), bool] */;
    (%498, %499)
  };
  %500(%var_48, %var_49) /* ty=(Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) */
}

def @func_2327() -> Tensor[(11, ?, 14), int64] {
  %502 = fn () -> Tensor[(11, ?, 14), int64] {
    %501 = @func_160() /* ty=(Tensor[(5), float64], Tensor[(11, ?, 14), int64], Tensor[(11, ?, 14), float32], Tensor[(5, 1, 1), bool], Tensor[(11, 1, 14), float32]) */;
    %501.1
  };
  %502() /* ty=Tensor[(11, ?, 14), int64] */
}

def @func_3830() -> (Tensor[(6, 11, 13), bool], Tensor[(6, 11, 13), int16]) {
  %503 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 11, 13), uint8] */, dtype="bool") /* ty=Tensor[(6, 11, 13), bool] */;
  %504 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(6, 11, 13), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 11, 13), uint8] */, dtype="bool") /* ty=Tensor[(6, 11, 13), bool] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %507 = less_equal(%505, %506) /* ty=Tensor[(6, 11, 13), bool] */;
  %508 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 11, 13), uint8] */, dtype="bool") /* ty=Tensor[(6, 11, 13), bool] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%507, dtype="bool") /* ty=Tensor[(6, 11, 13), bool] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %512 = cast(%507, dtype="int16") /* ty=Tensor[(6, 11, 13), int16] */;
  %513 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(6, 11, 13), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 11, 13), uint8] */, dtype="int16") /* ty=Tensor[(6, 11, 13), int16] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %516 = greater_equal(%510, %511) /* ty=Tensor[(6, 11, 13), bool] */;
  %517 = bitwise_xor(%514, %515) /* ty=Tensor[(6, 11, 13), int16] */;
  (%516, %517)
}

def @func_1132(%var_1093: Tensor[(1, 7, 9), float32]) -> (Tensor[(?, 7, 9), int16], Tensor[(1, 7, 9), float32], Tensor[(?, 7, 9), bool], Tensor[(11, 1, 14), float32], Tensor[(11, 11, 14), int8], Tensor[(1694), float32]) {
  %518 = cast(%var_1093, dtype="float32") /* ty=Tensor[(1, 7, 9), float32] */;
  %519 = asin(%518) /* ty=Tensor[(1, 7, 9), float32] */;
  %520 = cast(%var_1093, dtype="int16") /* ty=Tensor[(1, 7, 9), int16] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%519, dtype="int16") /* ty=Tensor[(1, 7, 9), int16] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %524 = cast(%var_1093, dtype="float32") /* ty=Tensor[(1, 7, 9), float32] */;
  %525 = cast(%519, dtype="bool") /* ty=Tensor[(1, 7, 9), bool] */;
  %526 = shape_of(%var_1093, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%var_1093, dtype="bool") /* ty=Tensor[(1, 7, 9), bool] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %529 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %530 = cast(meta[relay.Constant][18] /* ty=Tensor[(1694), float32] */, dtype="float32") /* ty=Tensor[(1694), float32] */;
  %531 = reshape(%530, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), float32] */;
  %532 = right_shift(%522, %523) /* ty=Tensor[(?, 7, 9), int16] */;
  %533 = rsqrt(%524) /* ty=Tensor[(1, 7, 9), float32] */;
  %534 = less_equal(%527, %528) /* ty=Tensor[(?, 7, 9), bool] */;
  %535 = %529.0;
  %536 = @func_349(%531) /* ty=Tensor[(11, 11, 14), int8] */;
  (%532, %533, %534, %535, %536, meta[relay.Constant][18] /* ty=Tensor[(1694), float32] */)
}

def @func_1294(%var_1242: Tensor[(10, 1, 5), float32]) -> (Tensor[(10, ?, 5), uint8], Tensor[(5, 1, 1), float64], float64, Tensor[(5), float64]) {
  %537 = cast(%var_1242, dtype="float32") /* ty=Tensor[(10, 1, 5), float32] */;
  %538 = tan(%537) /* ty=Tensor[(10, 1, 5), float32] */;
  %539 = cast(%var_1242, dtype="uint8") /* ty=Tensor[(10, 1, 5), uint8] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="uint8") /* ty=Tensor[(10, 1, 5), uint8] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %543 = cast(3.84902f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %544 = cast(meta[relay.Constant][19] /* ty=Tensor[(5), float64] */, dtype="float64") /* ty=Tensor[(5), float64] */;
  %545 = reshape(%543, newshape=[]) /* ty=float64 */;
  %546 = reshape(%544, newshape=[5, 1, 1]) /* ty=Tensor[(5, 1, 1), float64] */;
  %547 = @func_47(%545, %546) /* ty=(Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) */;
  %548 = bitwise_or(%541, %542) /* ty=Tensor[(10, ?, 5), uint8] */;
  %549 = %547.0;
  (%548, %549, 3.84902f64 /* ty=float64 */, meta[relay.Constant][19] /* ty=Tensor[(5), float64] */)
}

def @func_4708(%var_4676: Tensor[(11, 16, 14), float32], %var_4694: Tensor[(11, 16, 14), float64]) -> (Tensor[(11, 16, 14), int16], Tensor[(11, 6, 14), bool]) {
  %550 = @func_496() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %551 = %550.0;
  %552 = cast(%551, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %553 = cast(%var_4676, dtype="float64") /* ty=Tensor[(11, 16, 14), float64] */;
  %554 = divide(%552, %553) /* ty=Tensor[(11, 16, 14), float64] */;
  %555 = cast(%var_4694, dtype="int16") /* ty=Tensor[(11, 16, 14), int16] */;
  %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%554, dtype="int16") /* ty=Tensor[(11, 16, 14), int16] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %559 = @func_3651() /* ty=(Tensor[(11, ?, 14), int32], Tensor[(11, ?, 14), int16], Tensor[(11, 6, 14), int8], Tensor[(5), float64]) */;
  %560 = %559.2;
  %561 = cast(%560, dtype="bool") /* ty=Tensor[(11, 6, 14), bool] */;
  %562 = cast(%551, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %563 = right_shift(%557, %558) /* ty=Tensor[(11, 16, 14), int16] */;
  %564 = greater_equal(%561, %562) /* ty=Tensor[(11, 6, 14), bool] */;
  (%563, %564)
}

def @func_3466(%var_3461: Tensor[(14, 8, 10), uint16]) -> (Tensor[(14, 8, 10), uint16],) {
  %565 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 8, 10), uint16] */, dtype="uint16") /* ty=Tensor[(14, 8, 10), uint16] */;
  %566 = shape_of(%var_3461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%var_3461, dtype="uint16") /* ty=Tensor[(14, 8, 10), uint16] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %569 = bitwise_and(%567, %568) /* ty=Tensor[(14, 8, 10), uint16] */;
  (%569,)
}

def @func_3685() -> (Tensor[(11, 1, 14), float32],) {
  %570 = @func_2220() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %571 = %570.0;
  (%571,)
}

def @func_5161() -> (Tensor[(11, 1, 14), float32],) {
  %573 = fn () -> (Tensor[(11, 1, 14), float32],) {
    %572 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
    (%572,)
  };
  %573() /* ty=(Tensor[(11, 1, 14), float32],) */
}

def @func_1663(%var_1661: Tensor[(11, 9, 14), float32]) -> (Tensor[(11, 9, 14), int32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float32]) {
  @func_1660(%var_1661) /* ty=(Tensor[(11, 9, 14), int32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float32]) */
}

def @func_5407() -> (Tensor[(11, 1, 14), float32],) {
  %574 = @func_2200() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %575 = %574.0;
  (%575,)
}

def @func_3369() -> (Tensor[(11, ?, 14), uint8],) {
  @func_3367() /* ty=(Tensor[(11, ?, 14), uint8],) */
}

def @func_2517() -> (Tensor[(1, 7, 9), float32], Tensor[(7, 9), float32], Tensor[(11, ?, 14), uint8], Tensor[(11, ?, 14), uint8]) {
  @func_2515() /* ty=(Tensor[(1, 7, 9), float32], Tensor[(7, 9), float32], Tensor[(11, ?, 14), uint8], Tensor[(11, ?, 14), uint8]) */
}

def @func_5259(%var_5258: Tensor[(11, 9, 14), float32]) -> (Tensor[(11, 9, 14), float32],) {
  %581 = fn (%var_5245: Tensor[(11, 9, 14), float32]) -> (Tensor[(11, 9, 14), float32],) {
    %576 = @func_1823() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
    %577 = %576.1;
    %578 = cast(%577, dtype="float32") /* ty=Tensor[(11, 1, 14), float32] */;
    %579 = cast(%var_5245, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
    %580 = power(%578, %579) /* ty=Tensor[(11, 9, 14), float32] */;
    (%580,)
  };
  %581(%var_5258) /* ty=(Tensor[(11, 9, 14), float32],) */
}

def @func_5062(%var_5060: uint16, %var_5061: Tensor[(3, 4, 1), uint16]) -> Tensor[(3, 4, ?), bool] {
  @func_5058(%var_5060, %var_5061) /* ty=Tensor[(3, 4, ?), bool] */
}

def @func_4543() -> (Tensor[(11, 1, 14), float64], Tensor[(11, 1, 14), float32]) {
  %585 = fn () -> (Tensor[(11, 1, 14), float64], Tensor[(11, 1, 14), float32]) {
    %582 = @func_160() /* ty=(Tensor[(5), float64], Tensor[(11, ?, 14), int64], Tensor[(11, ?, 14), float32], Tensor[(5, 1, 1), bool], Tensor[(11, 1, 14), float32]) */;
    %583 = @func_1686() /* ty=Tensor[(11, 1, 14), float64] */;
    %584 = %582.4;
    (%583, %584)
  };
  %585() /* ty=(Tensor[(11, 1, 14), float64], Tensor[(11, 1, 14), float32]) */
}

def @func_2010() -> Tensor[(11, 1, 14), float32] {
  %586 = fn () -> Tensor[(11, 1, 14), float32] {
    @func_1560() /* ty=Tensor[(11, 1, 14), float32] */
  };
  %586() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_4166() -> (Tensor[(11, 1, 14), float32],) {
  %588 = fn () -> (Tensor[(11, 1, 14), float32],) {
    %587 = @func_2966() /* ty=Tensor[(11, 1, 14), float32] */;
    (%587,)
  };
  %588() /* ty=(Tensor[(11, 1, 14), float32],) */
}

def @func_4447(%var_4426: Tensor[(77, 4), float32], %var_4428: Tensor[(1694), float32]) -> (Tensor[(11, 9, 14), int8], Tensor[(11, 1, 14), float32], Tensor[(77, 4), float32], Tensor[(64), bool], Tensor[(1694), float32], Tensor[(11, 1, 14), float32]) {
  %589 = @func_2736() /* ty=(Tensor[(11, 9, 14), int8],) */;
  %590 = cast(%var_4426, dtype="float32") /* ty=Tensor[(77, 4), float32] */;
  %591 = cast(meta[relay.Constant][21] /* ty=Tensor[(64), bool] */, dtype="bool") /* ty=Tensor[(64), bool] */;
  %592 = cast(%var_4428, dtype="float32") /* ty=Tensor[(1694), float32] */;
  %593 = reshape(%590, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %594 = reshape(%591, newshape=[64]) /* ty=Tensor[(64), bool] */;
  %595 = reshape(%592, newshape=[847, 2]) /* ty=Tensor[(847, 2), float32] */;
  %596 = @func_3059(%593, %594, %595) /* ty=(Tensor[(11, 1, 14), float32], Tensor[(924), float32], Tensor[(308), float32], Tensor[(64), bool], Tensor[(11, 9, 14), uint16], Tensor[(11, ?, 14), bool], Tensor[(11, 11, 14), int8], Tensor[(847, 2), float32], Tensor[(11, 1, 14), float32]) */;
  %597 = %589.0;
  %598 = %596.8;
  %599 = @func_2966() /* ty=Tensor[(11, 1, 14), float32] */;
  (%597, %598, %var_4426, meta[relay.Constant][21] /* ty=Tensor[(64), bool] */, %var_4428, %599)
}

def @func_5058(%var_5038: uint16, %var_5039: Tensor[(3, 4, 1), uint16]) -> Tensor[(3, 4, ?), bool] {
  %600 = cast(%var_5038, dtype="uint16") /* ty=uint16 */;
  %601 = cast(%var_5039, dtype="uint16") /* ty=Tensor[(3, 4, 1), uint16] */;
  %602 = left_shift(%600, %601) /* ty=Tensor[(3, 4, 1), uint16] */;
  %603 = cast(%var_5039, dtype="bool") /* ty=Tensor[(3, 4, 1), bool] */;
  %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(%602, dtype="bool") /* ty=Tensor[(3, 4, 1), bool] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%605, %606) /* ty=Tensor[(3, 4, ?), bool] */
}

def @func_6220() -> (Tensor[(11, 1, 14), float32],) {
  %608 = fn () -> (Tensor[(11, 1, 14), float32],) {
    %607 = @func_5198() /* ty=Tensor[(11, 1, 14), float32] */;
    (%607,)
  };
  %608() /* ty=(Tensor[(11, 1, 14), float32],) */
}

def @func_5317() -> Tensor[(11, ?, 14), float64] {
  %609 = @func_1083() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, ?, 14), float64], Tensor[(11, 11, 14), int8], Tensor[(1694), float32]) */;
  %609.1
}

def @func_848() -> (Tensor[(11, ?, 14), int16], Tensor[(11, 1, 14), float32]) {
  %610 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %611 = %610.0;
  %612 = @func_435() /* ty=Tensor[(11, 1, 14), float32] */;
  %613 = cast(%612, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %614 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%611, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %617 = equal(%615, %616) /* ty=Tensor[(11, ?, 14), bool] */;
  %618 = cast(%612, dtype="int16") /* ty=Tensor[(11, 1, 14), int16] */;
  %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%617, dtype="int16") /* ty=Tensor[(11, ?, 14), int16] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %622 = @func_523() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %623 = right_shift(%620, %621) /* ty=Tensor[(11, ?, 14), int16] */;
  %624 = %622.0;
  (%623, %624)
}

def @func_3247() -> Tensor[(11, 1, 14), float64] {
  %625 = @func_1177() /* ty=(Tensor[(11, 1, 14), float64], Tensor[(11, ?, 14), bool]) */;
  %625.0
}

def @func_5483(%var_5480: Tensor[(11, 12, 16), float64], %var_5481: Tensor[(11, 12, 16), float64], %var_5482: Tensor[(2, 784), int8]) -> (Tensor[(11, 12, 16), bool], Tensor[(1, 1386), float32], Tensor[(14, 8, 14), int8], Tensor[(2, 784), int8], Tensor[(11, 12, 16), float64], Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float64]) {
  %643 = fn (%var_5438: Tensor[(11, 12, 16), float64], %var_5439: Tensor[(11, 12, 16), float64], %var_5459: Tensor[(2, 784), int8]) -> (Tensor[(11, 12, 16), bool], Tensor[(1, 1386), float32], Tensor[(14, 8, 14), int8], Tensor[(2, 784), int8], Tensor[(11, 12, 16), float64], Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float64]) {
    %626 = cast(%var_5439, dtype="bool") /* ty=Tensor[(11, 12, 16), bool] */;
    %627 = shape_of(%var_5438, dtype="int32") /* ty=Tensor[(3), int32] */;
    %628 = cast(%var_5438, dtype="bool") /* ty=Tensor[(11, 12, 16), bool] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %630 = cast(%var_5459, dtype="int8") /* ty=Tensor[(2, 784), int8] */;
    %631 = reshape(%630, newshape=[14, 8, 14]) /* ty=Tensor[(14, 8, 14), int8] */;
    %632 = cast(%var_5438, dtype="float64") /* ty=Tensor[(11, 12, 16), float64] */;
    %633 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 1386), float32] */, dtype="float32") /* ty=Tensor[(1, 1386), float32] */;
    %634 = reshape(%633, newshape=[11, 9, 14]) /* ty=Tensor[(11, 9, 14), float32] */;
    %635 = @func_5257(%634) /* ty=(Tensor[(11, 9, 14), float32],) */;
    %636 = %635.0;
    %637 = cast(%636, dtype="float64") /* ty=Tensor[(11, 9, 14), float64] */;
    %638 = less(%628, %629) /* ty=Tensor[(11, 12, 16), bool] */;
    %639 = @func_4770(%631) /* ty=Tensor[(14, 8, 14), int8] */;
    %640 = log2(%632) /* ty=Tensor[(11, 12, 16), float64] */;
    %641 = @func_2966() /* ty=Tensor[(11, 1, 14), float32] */;
    %642 = exp(%637) /* ty=Tensor[(11, 9, 14), float64] */;
    (%638, meta[relay.Constant][22] /* ty=Tensor[(1, 1386), float32] */, %639, %var_5459, %640, %641, %642)
  };
  %643(%var_5480, %var_5481, %var_5482) /* ty=(Tensor[(11, 12, 16), bool], Tensor[(1, 1386), float32], Tensor[(14, 8, 14), int8], Tensor[(2, 784), int8], Tensor[(11, 12, 16), float64], Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float64]) */
}

def @func_2826() -> Tensor[(11, 1, 14), float32] {
  %644 = @func_2220() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %644.0
}

def @func_161() -> (Tensor[(5), float64], Tensor[(11, ?, 14), int64], Tensor[(11, ?, 14), float32], Tensor[(5, 1, 1), bool], Tensor[(11, 1, 14), float32]) {
  %677 = fn () -> (Tensor[(5), float64], Tensor[(11, ?, 14), int64], Tensor[(11, ?, 14), float32], Tensor[(5, 1, 1), bool], Tensor[(11, 1, 14), float32]) {
    %645 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
    %646 = cast(%645, dtype="float32") /* ty=Tensor[(11, 1, 14), float32] */;
    %647 = sqrt(%646) /* ty=Tensor[(11, 1, 14), float32] */;
    %648 = cast(%645, dtype="int64") /* ty=Tensor[(11, 1, 14), int64] */;
    %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
    %650 = cast(%647, dtype="int64") /* ty=Tensor[(11, 1, 14), int64] */;
    %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %652 = add(%650, %651) /* ty=Tensor[(11, ?, 14), int64] */;
    %653 = cast(%652, dtype="int64") /* ty=Tensor[(11, ?, 14), int64] */;
    %654 = cast(0.053013f64 /* ty=float64 */, dtype="int64") /* ty=int64 */;
    %655 = cast(%645, dtype="int16") /* ty=Tensor[(11, 1, 14), int16] */;
    %656 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
    %657 = cast(%647, dtype="int16") /* ty=Tensor[(11, 1, 14), int16] */;
    %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %659 = bitwise_and(%657, %658) /* ty=Tensor[(11, ?, 14), int16] */;
    %660 = @func_77() /* ty=Tensor[(11, 1, 14), float32] */;
    %661 = cast(%660, dtype="float32") /* ty=Tensor[(11, 1, 14), float32] */;
    %662 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
    %663 = cast(%659, dtype="float32") /* ty=Tensor[(11, ?, 14), float32] */;
    %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %665 = cast(0.053013f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %666 = cast(meta[relay.Constant][23] /* ty=Tensor[(5), float64] */, dtype="float64") /* ty=Tensor[(5), float64] */;
    %667 = reshape(%665, newshape=[]) /* ty=float64 */;
    %668 = reshape(%666, newshape=[5, 1, 1]) /* ty=Tensor[(5, 1, 1), float64] */;
    %669 = @func_47(%667, %668) /* ty=(Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) */;
    %670 = %669.1;
    %671 = cast(%670, dtype="bool") /* ty=Tensor[(5, 1, 1), bool] */;
    %672 = cast(0.053013f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
    %673 = subtract(%653, %654) /* ty=Tensor[(11, ?, 14), int64] */;
    %674 = mod(%663, %664) /* ty=Tensor[(11, ?, 14), float32] */;
    %675 = greater(%671, %672) /* ty=Tensor[(5, 1, 1), bool] */;
    %676 = @func_64() /* ty=Tensor[(11, 1, 14), float32] */;
    (meta[relay.Constant][23] /* ty=Tensor[(5), float64] */, %673, %674, %675, %676)
  };
  %677() /* ty=(Tensor[(5), float64], Tensor[(11, ?, 14), int64], Tensor[(11, ?, 14), float32], Tensor[(5, 1, 1), bool], Tensor[(11, 1, 14), float32]) */
}

def @func_2828() -> Tensor[(11, 1, 14), float32] {
  @func_2826() /* ty=Tensor[(11, 1, 14), float32] */
}

def @func_4772(%var_4771: Tensor[(14, 8, 14), int8]) -> Tensor[(14, 8, 14), int8] {
  %682 = fn (%var_4765: Tensor[(14, 8, 14), int8]) -> Tensor[(14, 8, 14), int8] {
    %678 = cast(%var_4765, dtype="int8") /* ty=Tensor[(14, 8, 14), int8] */;
    %679 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(14, 8, 14), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %680 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 8, 14), int8] */, dtype="int8") /* ty=Tensor[(14, 8, 14), int8] */;
    %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    right_shift(%680, %681) /* ty=Tensor[(14, 8, 14), int8] */
  };
  %682(%var_4771) /* ty=Tensor[(14, 8, 14), int8] */
}

def @func_5582(%var_5580: Tensor[(2464), float32]) -> (Tensor[(11, 8, 14), bool], Tensor[(11, 6, 14), bool], Tensor[(2464), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  @func_5579(%var_5580) /* ty=(Tensor[(11, 8, 14), bool], Tensor[(11, 6, 14), bool], Tensor[(2464), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */
}

def @func_6122(%var_6008: float64, %var_6009: Tensor[(5), float64], %var_6075: Tensor[(1120), uint16], %var_6078: Tensor[(156), float64], %var_6113: Tensor[(308), float32]) -> (Tensor[(11, 1, 14), float32], Tensor[(5), float64], Tensor[(11, 1, 14), float32], Tensor[(14, 8, 10), uint16], Tensor[(5), float64], Tensor[(156), float64], Tensor[(11, ?, 14), float64], Tensor[(5, 1, 1120), bool], Tensor[(924), float32], Tensor[(308), float32], Tensor[(64), bool], Tensor[(5, 1, 1120), float64]) {
  %683 = @func_2698() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %684 = @func_614() /* ty=(Tensor[(11, 1, 14), float32],) */;
  %685 = cast(%var_6075, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %686 = reshape(%685, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), uint16] */;
  %687 = @func_3466(%686) /* ty=(Tensor[(14, 8, 10), uint16],) */;
  %688 = cast(%var_6078, dtype="float64") /* ty=Tensor[(156), float64] */;
  %689 = cast(%var_6078, dtype="float64") /* ty=Tensor[(156), float64] */;
  %690 = cast(%var_6008, dtype="float64") /* ty=float64 */;
  %691 = cast(%var_6008, dtype="float64") /* ty=float64 */;
  %692 = cast(%var_6009, dtype="float64") /* ty=Tensor[(5), float64] */;
  %693 = reshape(%691, newshape=[]) /* ty=float64 */;
  %694 = reshape(%692, newshape=[5, 1, 1]) /* ty=Tensor[(5, 1, 1), float64] */;
  %695 = @func_47(%693, %694) /* ty=(Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) */;
  %696 = %695.0;
  %697 = cast(%696, dtype="float32") /* ty=Tensor[(5, 1, 1), float32] */;
  %698 = rsqrt(%697) /* ty=Tensor[(5, 1, 1), float32] */;
  %699 = cast(%698, dtype="float64") /* ty=Tensor[(5, 1, 1), float64] */;
  %700 = cast(%var_6078, dtype="float32") /* ty=Tensor[(156), float32] */;
  %701 = reshape(%688, newshape=[3, 13, 4]) /* ty=Tensor[(3, 13, 4), float64] */;
  %702 = reshape(%689, newshape=[3, 13, 4]) /* ty=Tensor[(3, 13, 4), float64] */;
  %703 = reshape(%690, newshape=[]) /* ty=float64 */;
  %704 = reshape(%699, newshape=[5]) /* ty=Tensor[(5), float64] */;
  %705 = reshape(%700, newshape=[3, 13, 4]) /* ty=Tensor[(3, 13, 4), float32] */;
  %706 = @func_926(%701, %702, %703, %704, %705) /* ty=(Tensor[(5, 1, 1), float64], float64, Tensor[(5), float64], Tensor[(3, 13, 4), float32], Tensor[(3, 13, 4), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %707 = @func_5543() /* ty=(Tensor[(11, ?, 14), float64], Tensor[(11, 1, 14), float32]) */;
  %708 = cast(%698, dtype="bool") /* ty=Tensor[(5, 1, 1), bool] */;
  %709 = cast(%var_6075, dtype="bool") /* ty=Tensor[(1120), bool] */;
  %710 = greater(%708, %709) /* ty=Tensor[(5, 1, 1120), bool] */;
  %711 = cast(%710, dtype="bool") /* ty=Tensor[(5, 1, 1120), bool] */;
  %712 = cast(%var_6008, dtype="bool") /* ty=bool */;
  %713 = cast(%var_6113, dtype="float32") /* ty=Tensor[(308), float32] */;
  %714 = cast(meta[relay.Constant][25] /* ty=Tensor[(64), bool] */, dtype="bool") /* ty=Tensor[(64), bool] */;
  %715 = reshape(%713, newshape=[11, 2, 14]) /* ty=Tensor[(11, 2, 14), float32] */;
  %716 = reshape(%714, newshape=[64]) /* ty=Tensor[(64), bool] */;
  %717 = @func_2652(%715, %716) /* ty=(Tensor[(11, 2, 14), bool], Tensor[(2, 4, 8), bool], Tensor[(64), bool], Tensor[(924), float32], Tensor[(11, 2, 14), bool]) */;
  %718 = cast(%698, dtype="float64") /* ty=Tensor[(5, 1, 1), float64] */;
  %719 = cast(%var_6075, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %720 = %683.0;
  %721 = %684.0;
  %722 = %687.0;
  %723 = %706.2;
  %724 = %707.0;
  %725 = not_equal(%711, %712) /* ty=Tensor[(5, 1, 1120), bool] */;
  %726 = %717.3;
  %727 = mod(%718, %719) /* ty=Tensor[(5, 1, 1120), float64] */;
  (%720, %var_6009, %721, %722, %723, %var_6078, %724, %725, %726, %var_6113, meta[relay.Constant][25] /* ty=Tensor[(64), bool] */, %727)
}

def @func_3343() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
  %732 = fn () -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) {
    %728 = @func_1015() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
    %729 = @func_167() /* ty=(Tensor[(11, 1, 14), float32],) */;
    %730 = %728.0;
    %731 = %729.0;
    (%730, %731)
  };
  %732() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */
}

def @func_5319() -> Tensor[(11, ?, 14), float64] {
  @func_5317() /* ty=Tensor[(11, ?, 14), float64] */
}

def @func_2693() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), uint16]) {
  %733 = @func_389() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %734 = @func_735() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 9, 14), float32]) */;
  %735 = %734.1;
  %736 = cast(meta[relay.Constant][26] /* ty=Tensor[(11, 9, 14), float32] */, dtype="uint16") /* ty=Tensor[(11, 9, 14), uint16] */;
  %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%735, dtype="uint16") /* ty=Tensor[(11, 9, 14), uint16] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %740 = %733.0;
  %741 = bitwise_and(%738, %739) /* ty=Tensor[(11, 9, 14), uint16] */;
  (%740, %741)
}

def @func_3282(%var_3280: Tensor[(16, 15, 16), uint16]) -> Tensor[(16, 15, 16), bool] {
  @func_3279(%var_3280) /* ty=Tensor[(16, 15, 16), bool] */
}

def @func_3455() -> (Tensor[(11, 9, 14), uint16], Tensor[(11, 1, 14), float32]) {
  @func_3453() /* ty=(Tensor[(11, 9, 14), uint16], Tensor[(11, 1, 14), float32]) */
}

def @func_5544() -> (Tensor[(11, ?, 14), float64], Tensor[(11, 1, 14), float32]) {
  %751 = fn () -> (Tensor[(11, ?, 14), float64], Tensor[(11, 1, 14), float32]) {
    %742 = @func_5198() /* ty=Tensor[(11, 1, 14), float32] */;
    %743 = @func_1015() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
    %744 = %743.1;
    %745 = cast(%744, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
    %746 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
    %747 = cast(%742, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
    %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %749 = floor_divide(%747, %748) /* ty=Tensor[(11, ?, 14), float64] */;
    %750 = @func_4848() /* ty=Tensor[(11, 1, 14), float32] */;
    (%749, %750)
  };
  %751() /* ty=(Tensor[(11, ?, 14), float64], Tensor[(11, 1, 14), float32]) */
}

def @func_1969() -> (Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(5, 1, 1), bool], float64, Tensor[(5), float64]) {
  %752 = @func_389() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %753 = @func_496() /* ty=(Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32], Tensor[(11, 1, 14), float32]) */;
  %754 = cast(8.03715f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %755 = cast(meta[relay.Constant][27] /* ty=Tensor[(5), float64] */, dtype="float64") /* ty=Tensor[(5), float64] */;
  %756 = reshape(%754, newshape=[]) /* ty=float64 */;
  %757 = reshape(%755, newshape=[5, 1, 1]) /* ty=Tensor[(5, 1, 1), float64] */;
  %758 = @func_47(%756, %757) /* ty=(Tensor[(5, 1, 1), float64], Tensor[(5, 1, 1), bool]) */;
  %759 = %752.1;
  %760 = @func_573() /* ty=Tensor[(11, 1, 14), float32] */;
  %761 = %753.1;
  %762 = %758.1;
  (%759, %760, %761, %762, 8.03715f64 /* ty=float64 */, meta[relay.Constant][27] /* ty=Tensor[(5), float64] */)
}

def @func_5506() -> (Tensor[(11, ?, 14), bool],) {
  %763 = @func_1425() /* ty=(Tensor[(11, ?, 14), float32], Tensor[(11, ?, 14), bool], Tensor[(11, ?, 14), bool]) */;
  %764 = %763.2;
  (%764,)
}

def @func_3652() -> (Tensor[(11, ?, 14), int32], Tensor[(11, ?, 14), int16], Tensor[(11, 6, 14), int8], Tensor[(5), float64]) {
  %780 = fn () -> (Tensor[(11, ?, 14), int32], Tensor[(11, ?, 14), int16], Tensor[(11, 6, 14), int8], Tensor[(5), float64]) {
    %765 = @func_1560() /* ty=Tensor[(11, 1, 14), float32] */;
    %766 = cast(%765, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
    %767 = exp(%766) /* ty=Tensor[(11, 1, 14), float64] */;
    %768 = cast(%765, dtype="int32") /* ty=Tensor[(11, 1, 14), int32] */;
    %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
    %770 = cast(%767, dtype="int32") /* ty=Tensor[(11, 1, 14), int32] */;
    %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %772 = @func_848() /* ty=(Tensor[(11, ?, 14), int16], Tensor[(11, 1, 14), float32]) */;
    %773 = cast(%767, dtype="int8") /* ty=Tensor[(11, 1, 14), int8] */;
    %774 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 6, 14), float64] */, dtype="int8") /* ty=Tensor[(11, 6, 14), int8] */;
    %775 = @func_160() /* ty=(Tensor[(5), float64], Tensor[(11, ?, 14), int64], Tensor[(11, ?, 14), float32], Tensor[(5, 1, 1), bool], Tensor[(11, 1, 14), float32]) */;
    %776 = multiply(%770, %771) /* ty=Tensor[(11, ?, 14), int32] */;
    %777 = %772.0;
    %778 = bitwise_or(%773, %774) /* ty=Tensor[(11, 6, 14), int8] */;
    %779 = %775.0;
    (%776, %777, %778, %779)
  };
  %780() /* ty=(Tensor[(11, ?, 14), int32], Tensor[(11, ?, 14), int16], Tensor[(11, 6, 14), int8], Tensor[(5), float64]) */
}

def @func_6294() -> Tensor[(11, 1, 14), float64] {
  @func_6292() /* ty=Tensor[(11, 1, 14), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
