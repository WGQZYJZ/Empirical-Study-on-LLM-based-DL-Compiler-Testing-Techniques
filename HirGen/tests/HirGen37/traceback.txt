==========mod==========
#[version = "0.0.5"]
def @func_3619(%var_3599: Tensor[(968), uint16]) -> (int32, Tensor[(8, 11, 11), bool], Tensor[(968), uint16]) {
  %0 = @func_3320() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(1, 10, 2), bool], int32, Tensor[(5, 4), int32]) */;
  %1 = cast(%var_3599, dtype="uint16") /* ty=Tensor[(968), uint16] */;
  %2 = reshape(%1, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), uint16] */;
  %3 = %0.2;
  %4 = @func_107(%2) /* ty=Tensor[(8, 11, 11), bool] */;
  (%3, %4, %var_3599)
}

def @func_2714(%var_2683: int8, %var_2686: Tensor[(8, 240), uint16]) -> (Tensor[(4, 11), float64], int8, Tensor[(16, 10, 12), uint16], Tensor[(8, 240), uint16], Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(15, 10, 8), uint16], Tensor[(1, 10, 2), bool], Tensor[(770), float32], Tensor[(20), int32]) {
  %5 = cast(%var_2683, dtype="int8") /* ty=int8 */;
  %6 = reshape(%5, newshape=[]) /* ty=int8 */;
  %7 = @func_1765(%6) /* ty=(Tensor[(6, 1, 10), int8], Tensor[(4, 11), float64], Tensor[(44), float64]) */;
  %8 = cast(%var_2683, dtype="uint16") /* ty=uint16 */;
  %9 = cast(%var_2686, dtype="uint16") /* ty=Tensor[(8, 240), uint16] */;
  %10 = reshape(%8, newshape=[]) /* ty=uint16 */;
  %11 = reshape(%9, newshape=[16, 10, 12]) /* ty=Tensor[(16, 10, 12), uint16] */;
  %12 = @func_2371(%10, %11) /* ty=(Tensor[(16, 10, 12), uint16], Tensor[(16, 10, 12), float32]) */;
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(968), uint16] */, dtype="uint16") /* ty=Tensor[(968), uint16] */;
  %14 = reshape(%13, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), uint16] */;
  %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 10, 8), float32] */, dtype="float32") /* ty=Tensor[(15, 10, 8), float32] */;
  %16 = rsqrt(%15) /* ty=Tensor[(15, 10, 8), float32] */;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 10, 8), float32] */, dtype="int32") /* ty=Tensor[(15, 10, 8), int32] */;
  %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%16, dtype="int32") /* ty=Tensor[(15, 10, 8), int32] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %21 = add(%19, %20) /* ty=Tensor[(15, 10, 8), int32] */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 10, 8), float32] */, dtype="uint16") /* ty=Tensor[(15, 10, 8), uint16] */;
  %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%21, dtype="uint16") /* ty=Tensor[(15, 10, 8), uint16] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %26 = cast(meta[relay.Constant][2] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %27 = cast(meta[relay.Constant][2] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %29 = cast(%var_2683, dtype="int32") /* ty=int32 */;
  %30 = cast(meta[relay.Constant][3] /* ty=Tensor[(20), int32] */, dtype="int32") /* ty=Tensor[(20), int32] */;
  %31 = reshape(%26, newshape=[11, 10, 7]) /* ty=Tensor[(11, 10, 7), float32] */;
  %32 = reshape(%27, newshape=[11, 10, 7]) /* ty=Tensor[(11, 10, 7), float32] */;
  %33 = reshape(%28, newshape=[11, 10, 7]) /* ty=Tensor[(11, 10, 7), float32] */;
  %34 = reshape(%29, newshape=[]) /* ty=int32 */;
  %35 = reshape(%30, newshape=[20]) /* ty=Tensor[(20), int32] */;
  %36 = @func_466(%31, %32, %33, %34, %35) /* ty=(Tensor[(11, 10, 7), int64], Tensor[(11, 10, 7), int64], Tensor[(1, 10, 2), bool], int32, Tensor[(20), int32], Tensor[(1, 10, 2), bool], Tensor[(11, 10, 7), bool]) */;
  %37 = %7.1;
  %38 = %12.0;
  %39 = @func_107(%14) /* ty=Tensor[(8, 11, 11), bool] */;
  %40 = maximum(%24, %25) /* ty=Tensor[(15, 10, 8), uint16] */;
  %41 = %36.5;
  (%37, %var_2683, %38, %var_2686, %39, meta[relay.Constant][0] /* ty=Tensor[(968), uint16] */, %40, %41, meta[relay.Constant][2] /* ty=Tensor[(770), float32] */, meta[relay.Constant][3] /* ty=Tensor[(20), int32] */)
}

def @func_5438() -> (Tensor[(1, 968), uint16], float64, Tensor[(10, 45), bool]) {
  %42 = @func_4816() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(968), uint16], Tensor[(1260), int64], Tensor[(1, 968), uint16]) */;
  %43 = cast(-9.03692f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %44 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 45), bool] */, dtype="bool") /* ty=Tensor[(10, 45), bool] */;
  %45 = reshape(%43, newshape=[]) /* ty=float64 */;
  %46 = reshape(%44, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), bool] */;
  %47 = @func_3020(%45, %46) /* ty=(Tensor[(?, 10, 9), int16], Tensor[(5, 10, 9), float64], Tensor[(5, 10, 9), float32]) */;
  %48 = %47.1;
  %49 = cast(%48, dtype="bool") /* ty=Tensor[(5, 10, 9), bool] */;
  %50 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(10, 45), bool] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %51 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 45), bool] */, dtype="bool") /* ty=Tensor[(10, 45), bool] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %53 = %42.3;
  %54 = less_equal(%51, %52) /* ty=Tensor[(10, 45), bool] */;
  (%53, -9.03692f64 /* ty=float64 */, %54)
}

def @func_5477(%var_5468: Tensor[(13, 3, 12), float64]) -> Tensor[(13, 3, 12), uint16] {
  %55 = @func_5257() /* ty=(Tensor[(13, 3, 12), float64],) */;
  %56 = %55.0;
  %57 = cast(%var_5468, dtype="uint16") /* ty=Tensor[(13, 3, 12), uint16] */;
  %58 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%56, dtype="uint16") /* ty=Tensor[(13, 3, 12), uint16] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%59, %60) /* ty=Tensor[(13, 3, 12), uint16] */
}

def @func_927(%var_915: Tensor[(15, 7, 12), int64], %var_916: Tensor[(15, 7, 12), int64], %var_924: Tensor[(968), uint16]) -> (Tensor[(15, 7, 12), bool], Tensor[(8, 11, 11), bool], Tensor[(968), uint16]) {
  %61 = cast(%var_916, dtype="bool") /* ty=Tensor[(15, 7, 12), bool] */;
  %62 = shape_of(%var_915, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%var_915, dtype="bool") /* ty=Tensor[(15, 7, 12), bool] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %65 = cast(%var_924, dtype="uint16") /* ty=Tensor[(968), uint16] */;
  %66 = reshape(%65, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), uint16] */;
  %67 = less_equal(%63, %64) /* ty=Tensor[(15, 7, 12), bool] */;
  %68 = @func_107(%66) /* ty=Tensor[(8, 11, 11), bool] */;
  (%67, %68, %var_924)
}

def @func_3073(%var_3051: Tensor[(11, 16, 14), float64], %var_3063: uint64) -> (Tensor[(11, 16, 14), float64], Tensor[(4, 4, 4), uint64], uint64) {
  %69 = cast(%var_3051, dtype="float64") /* ty=Tensor[(11, 16, 14), float64] */;
  %70 = cast(%var_3063, dtype="uint64") /* ty=uint64 */;
  %71 = reshape(%70, newshape=[]) /* ty=uint64 */;
  %72 = @func_1598(%71) /* ty=(Tensor[(4, 4, 4), uint64],) */;
  %73 = atanh(%69) /* ty=Tensor[(11, 16, 14), float64] */;
  %74 = %72.0;
  (%73, %74, %var_3063)
}

def @func_2036(%var_2026: Tensor[(16, 9, 6), int16], %var_2027: Tensor[(16, 9, 6), int16]) -> (Tensor[(16, 9, 6), bool],) {
  %75 = cast(%var_2027, dtype="bool") /* ty=Tensor[(16, 9, 6), bool] */;
  %76 = shape_of(%var_2026, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%var_2026, dtype="bool") /* ty=Tensor[(16, 9, 6), bool] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %79 = greater_equal(%77, %78) /* ty=Tensor[(16, 9, 6), bool] */;
  (%79,)
}

def @func_4964(%var_4933: Tensor[(4, 15, 7), float32], %var_4941: Tensor[(840, 4), float32], %var_4950: Tensor[(4, 15, 7), float64]) -> (Tensor[(420, 8), float64], Tensor[(840, 4), float32], Tensor[(4, 15, 7), float64]) {
  %80 = cast(%var_4941, dtype="float32") /* ty=Tensor[(840, 4), float32] */;
  %81 = reshape(%80, newshape=[420, 8]) /* ty=Tensor[(420, 8), float32] */;
  %82 = @func_4627(%81) /* ty=(Tensor[(420, 8), float64],) */;
  %83 = @func_4723() /* ty=(Tensor[(4, 15, 7), float32],) */;
  %84 = %83.0;
  %85 = cast(%var_4933, dtype="int16") /* ty=Tensor[(4, 15, 7), int16] */;
  %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%84, dtype="int16") /* ty=Tensor[(4, 15, 7), int16] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %89 = bitwise_and(%87, %88) /* ty=Tensor[(4, 15, 7), int16] */;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %91 = tan(%90) /* ty=Tensor[(4, 15, 7), float64] */;
  %92 = cast(%var_4950, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %96 = %82.0;
  %97 = mod(%94, %95) /* ty=Tensor[(4, 15, 7), float64] */;
  (%96, %var_4941, %97)
}

def @func_4598(%var_4568: Tensor[(2160), float64], %var_4569: Tensor[(1260), int64]) -> (Tensor[(13, 3, 12), float64], int32, Tensor[(1920), uint16], Tensor[(8, 11, 11), bool], Tensor[(2160), float64], Tensor[(1260), int64], int32, Tensor[(15, 10, 8), uint16]) {
  %98 = cast(meta[relay.Constant][5] /* ty=Tensor[(1920), uint16] */, dtype="uint16") /* ty=Tensor[(1920), uint16] */;
  %99 = reshape(%98, newshape=[1920]) /* ty=Tensor[(1920), uint16] */;
  %100 = @func_3653(%99) /* ty=(int32, Tensor[(16, 10, 12), float32], Tensor[(1920), uint16]) */;
  %101 = cast(%var_4568, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %102 = cast(%var_4569, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %103 = reshape(%101, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float64] */;
  %104 = reshape(%102, newshape=[1260]) /* ty=Tensor[(1260), int64] */;
  %105 = @func_984(%103, %104) /* ty=(Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(15, 7, 12), bool], Tensor[(1260), int64], Tensor[(9, 15, 16), float64]) */;
  %106 = cast(meta[relay.Constant][5] /* ty=Tensor[(1920), uint16] */, dtype="uint16") /* ty=Tensor[(1920), uint16] */;
  %107 = reshape(%106, newshape=[1920]) /* ty=Tensor[(1920), uint16] */;
  %108 = @func_3653(%107) /* ty=(int32, Tensor[(16, 10, 12), float32], Tensor[(1920), uint16]) */;
  %109 = %100.0;
  %110 = cast(%109, dtype="int8") /* ty=int8 */;
  %111 = cast(meta[relay.Constant][5] /* ty=Tensor[(1920), uint16] */, dtype="uint16") /* ty=Tensor[(1920), uint16] */;
  %112 = reshape(%110, newshape=[]) /* ty=int8 */;
  %113 = reshape(%111, newshape=[8, 240]) /* ty=Tensor[(8, 240), uint16] */;
  %114 = @func_2714(%112, %113) /* ty=(Tensor[(4, 11), float64], int8, Tensor[(16, 10, 12), uint16], Tensor[(8, 240), uint16], Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(15, 10, 8), uint16], Tensor[(1, 10, 2), bool], Tensor[(770), float32], Tensor[(20), int32]) */;
  %115 = @func_3948() /* ty=Tensor[(13, 3, 12), float64] */;
  %116 = %105.0;
  %117 = %108.0;
  %118 = %114.6;
  (%115, %109, meta[relay.Constant][5] /* ty=Tensor[(1920), uint16] */, %116, %var_4568, %var_4569, %117, %118)
}

def @func_4537(%var_4517: Tensor[(14, 11, 15), int16], %var_4518: Tensor[(14, 11, 15), int16]) -> (Tensor[(14, 11, 15), int16], Tensor[(12, 7, 6), float64], Tensor[(504), float64]) {
  %119 = cast(%var_4518, dtype="int16") /* ty=Tensor[(14, 11, 15), int16] */;
  %120 = shape_of(%var_4517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%var_4517, dtype="int16") /* ty=Tensor[(14, 11, 15), int16] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %123 = cast(meta[relay.Constant][6] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %124 = reshape(%123, newshape=[12, 7, 6]) /* ty=Tensor[(12, 7, 6), float64] */;
  %125 = add(%121, %122) /* ty=Tensor[(14, 11, 15), int16] */;
  %126 = @func_2091(%124) /* ty=Tensor[(12, 7, 6), float64] */;
  (%125, %126, meta[relay.Constant][6] /* ty=Tensor[(504), float64] */)
}

def @func_653(%var_515: int8, %var_516: Tensor[(13, 9, 2), int8], %var_521: Tensor[(770), float32], %var_537: Tensor[(20, 12), int32], %var_558: Tensor[(8, 10, 2), float64], %var_608: Tensor[(8, 10, 2), int16]) -> (Tensor[(13, 9, 2), bool], Tensor[(770), float32], Tensor[(1, 10, 2), bool], Tensor[(20, 12), float32], Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(8, 10, 2), bool], Tensor[(8, 10, 2), bool], Tensor[(8, 10, 2), uint64]) {
  %127 = cast(%var_515, dtype="bool") /* ty=bool */;
  %128 = cast(%var_516, dtype="bool") /* ty=Tensor[(13, 9, 2), bool] */;
  %129 = cast(%var_515, dtype="int32") /* ty=int32 */;
  %130 = cast(%var_521, dtype="float32") /* ty=Tensor[(770), float32] */;
  %131 = cast(%var_521, dtype="float32") /* ty=Tensor[(770), float32] */;
  %132 = cast(%var_521, dtype="float32") /* ty=Tensor[(770), float32] */;
  %133 = cast(%var_515, dtype="int32") /* ty=int32 */;
  %134 = cast(meta[relay.Constant][7] /* ty=Tensor[(20, 1), int32] */, dtype="int32") /* ty=Tensor[(20, 1), int32] */;
  %135 = reshape(%130, newshape=[11, 10, 7]) /* ty=Tensor[(11, 10, 7), float32] */;
  %136 = reshape(%131, newshape=[11, 10, 7]) /* ty=Tensor[(11, 10, 7), float32] */;
  %137 = reshape(%132, newshape=[11, 10, 7]) /* ty=Tensor[(11, 10, 7), float32] */;
  %138 = reshape(%133, newshape=[]) /* ty=int32 */;
  %139 = reshape(%134, newshape=[20]) /* ty=Tensor[(20), int32] */;
  %140 = @func_466(%135, %136, %137, %138, %139) /* ty=(Tensor[(11, 10, 7), int64], Tensor[(11, 10, 7), int64], Tensor[(1, 10, 2), bool], int32, Tensor[(20), int32], Tensor[(1, 10, 2), bool], Tensor[(11, 10, 7), bool]) */;
  %141 = %140.5;
  %142 = cast(%141, dtype="int32") /* ty=Tensor[(1, 10, 2), int32] */;
  %143 = reshape(%129, newshape=[]) /* ty=int32 */;
  %144 = reshape(%142, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), int32] */;
  %145 = cast(meta[relay.Constant][7] /* ty=Tensor[(20, 1), int32] */, dtype="float32") /* ty=Tensor[(20, 1), float32] */;
  %146 = cast(%var_537, dtype="float32") /* ty=Tensor[(20, 12), float32] */;
  %147 = cast(meta[relay.Constant][8] /* ty=Tensor[(968), uint16] */, dtype="uint16") /* ty=Tensor[(968), uint16] */;
  %148 = reshape(%147, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), uint16] */;
  %149 = cast(meta[relay.Constant][7] /* ty=Tensor[(20, 1), int32] */, dtype="int64") /* ty=Tensor[(20, 1), int64] */;
  %150 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%141, dtype="int64") /* ty=Tensor[(1, 10, 2), int64] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %153 = left_shift(%151, %152) /* ty=Tensor[(?, 10, 2), int64] */;
  %154 = cast(%153, dtype="float64") /* ty=Tensor[(?, 10, 2), float64] */;
  %155 = sigmoid(%154) /* ty=Tensor[(?, 10, 2), float64] */;
  %156 = cast(%155, dtype="float32") /* ty=Tensor[(?, 10, 2), float32] */;
  %157 = cast(%var_558, dtype="float32") /* ty=Tensor[(8, 10, 2), float32] */;
  %158 = mod(%156, %157) /* ty=Tensor[(8, 10, 2), float32] */;
  %159 = cast(%158, dtype="bool") /* ty=Tensor[(8, 10, 2), bool] */;
  %160 = cast(%141, dtype="bool") /* ty=Tensor[(1, 10, 2), bool] */;
  %161 = cast(%158, dtype="float64") /* ty=Tensor[(8, 10, 2), float64] */;
  %162 = sin(%161) /* ty=Tensor[(8, 10, 2), float64] */;
  %163 = cast(%162, dtype="int16") /* ty=Tensor[(8, 10, 2), int16] */;
  %164 = cast(%141, dtype="int16") /* ty=Tensor[(1, 10, 2), int16] */;
  %165 = subtract(%163, %164) /* ty=Tensor[(8, 10, 2), int16] */;
  %166 = cast(%var_608, dtype="bool") /* ty=Tensor[(8, 10, 2), bool] */;
  %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%165, dtype="bool") /* ty=Tensor[(8, 10, 2), bool] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %170 = logical_or(%168, %169) /* ty=Tensor[(8, 10, 2), bool] */;
  %171 = cast(%165, dtype="int16") /* ty=Tensor[(8, 10, 2), int16] */;
  %172 = shape_of(%170, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%170, dtype="int16") /* ty=Tensor[(8, 10, 2), int16] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %175 = left_shift(%173, %174) /* ty=Tensor[(8, 10, 2), int16] */;
  %176 = cast(%165, dtype="bool") /* ty=Tensor[(8, 10, 2), bool] */;
  %177 = shape_of(%175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(%175, dtype="bool") /* ty=Tensor[(8, 10, 2), bool] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %180 = cast(%155, dtype="uint64") /* ty=Tensor[(?, 10, 2), uint64] */;
  %181 = cast(%175, dtype="uint64") /* ty=Tensor[(8, 10, 2), uint64] */;
  %182 = not_equal(%127, %128) /* ty=Tensor[(13, 9, 2), bool] */;
  %183 = @func_50(%143, %144) /* ty=Tensor[(1, 10, 2), bool] */;
  %184 = divide(%145, %146) /* ty=Tensor[(20, 12), float32] */;
  %185 = @func_107(%148) /* ty=Tensor[(8, 11, 11), bool] */;
  %186 = less(%159, %160) /* ty=Tensor[(8, 10, 2), bool] */;
  %187 = greater_equal(%178, %179) /* ty=Tensor[(8, 10, 2), bool] */;
  %188 = add(%180, %181) /* ty=Tensor[(8, 10, 2), uint64] */;
  (%182, %var_521, %183, %184, %185, meta[relay.Constant][8] /* ty=Tensor[(968), uint16] */, %186, %187, %188)
}

def @func_466(%var_425: Tensor[(11, 10, 7), float32], %var_432: Tensor[(11, 10, 7), float32], %var_441: Tensor[(11, 10, 7), float32], %var_450: int32, %var_451: Tensor[(20), int32]) -> (Tensor[(11, 10, 7), int64], Tensor[(11, 10, 7), int64], Tensor[(1, 10, 2), bool], int32, Tensor[(20), int32], Tensor[(1, 10, 2), bool], Tensor[(11, 10, 7), bool]) {
  %189 = cast(%var_432, dtype="int64") /* ty=Tensor[(11, 10, 7), int64] */;
  %190 = shape_of(%var_425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%var_425, dtype="int64") /* ty=Tensor[(11, 10, 7), int64] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %193 = cast(%var_425, dtype="float32") /* ty=Tensor[(11, 10, 7), float32] */;
  %194 = tan(%193) /* ty=Tensor[(11, 10, 7), float32] */;
  %195 = cast(%var_441, dtype="int64") /* ty=Tensor[(11, 10, 7), int64] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="int64") /* ty=Tensor[(11, 10, 7), int64] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %199 = cast(%var_450, dtype="int32") /* ty=int32 */;
  %200 = cast(%var_451, dtype="int32") /* ty=Tensor[(20), int32] */;
  %201 = reshape(%199, newshape=[]) /* ty=int32 */;
  %202 = reshape(%200, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), int32] */;
  %203 = cast(%var_450, dtype="int32") /* ty=int32 */;
  %204 = cast(%var_451, dtype="int32") /* ty=Tensor[(20), int32] */;
  %205 = reshape(%203, newshape=[]) /* ty=int32 */;
  %206 = reshape(%204, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), int32] */;
  %207 = cast(%194, dtype="float64") /* ty=Tensor[(11, 10, 7), float64] */;
  %208 = acos(%207) /* ty=Tensor[(11, 10, 7), float64] */;
  %209 = cast(%194, dtype="bool") /* ty=Tensor[(11, 10, 7), bool] */;
  %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%208, dtype="bool") /* ty=Tensor[(11, 10, 7), bool] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %213 = bitwise_and(%191, %192) /* ty=Tensor[(11, 10, 7), int64] */;
  %214 = subtract(%197, %198) /* ty=Tensor[(11, 10, 7), int64] */;
  %215 = @func_50(%201, %202) /* ty=Tensor[(1, 10, 2), bool] */;
  %216 = @func_50(%205, %206) /* ty=Tensor[(1, 10, 2), bool] */;
  %217 = not_equal(%211, %212) /* ty=Tensor[(11, 10, 7), bool] */;
  (%213, %214, %215, %var_450, %var_451, %216, %217)
}

def @func_984(%var_947: Tensor[(9, 15, 16), float64], %var_962: Tensor[(1260), int64]) -> (Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(15, 7, 12), bool], Tensor[(1260), int64], Tensor[(9, 15, 16), float64]) {
  %218 = cast(meta[relay.Constant][9] /* ty=Tensor[(968), uint16] */, dtype="uint16") /* ty=Tensor[(968), uint16] */;
  %219 = reshape(%218, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), uint16] */;
  %220 = cast(%var_962, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %221 = cast(%var_962, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %222 = cast(meta[relay.Constant][9] /* ty=Tensor[(968), uint16] */, dtype="uint16") /* ty=Tensor[(968), uint16] */;
  %223 = reshape(%220, newshape=[15, 7, 12]) /* ty=Tensor[(15, 7, 12), int64] */;
  %224 = reshape(%221, newshape=[15, 7, 12]) /* ty=Tensor[(15, 7, 12), int64] */;
  %225 = reshape(%222, newshape=[968]) /* ty=Tensor[(968), uint16] */;
  %226 = @func_927(%223, %224, %225) /* ty=(Tensor[(15, 7, 12), bool], Tensor[(8, 11, 11), bool], Tensor[(968), uint16]) */;
  %227 = cast(%var_947, dtype="float64") /* ty=Tensor[(9, 15, 16), float64] */;
  %228 = rsqrt(%227) /* ty=Tensor[(9, 15, 16), float64] */;
  %229 = cast(%228, dtype="float64") /* ty=Tensor[(9, 15, 16), float64] */;
  %230 = @func_107(%219) /* ty=Tensor[(8, 11, 11), bool] */;
  %231 = %226.0;
  %232 = acos(%229) /* ty=Tensor[(9, 15, 16), float64] */;
  (%230, meta[relay.Constant][9] /* ty=Tensor[(968), uint16] */, %231, %var_962, %232)
}

def @func_2091(%var_2087: Tensor[(12, 7, 6), float64]) -> Tensor[(12, 7, 6), float64] {
  %233 = cast(0.017149f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %234 = cast(%var_2087, dtype="float64") /* ty=Tensor[(12, 7, 6), float64] */;
  floor_divide(%233, %234) /* ty=Tensor[(12, 7, 6), float64] */
}

def @func_4674(%var_4661: Tensor[(6, 6, 16), float32]) -> (Tensor[(6, 6, 16), float32],) {
  %235 = cast(%var_4661, dtype="float32") /* ty=Tensor[(6, 6, 16), float32] */;
  %236 = cosh(%235) /* ty=Tensor[(6, 6, 16), float32] */;
  (%236,)
}

def @func_3177(%var_3169: Tensor[(4, 9, 14), float32]) -> (Tensor[(4, 9, 14), float32],) {
  %237 = cast(2.96872f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %238 = cast(%var_3169, dtype="float32") /* ty=Tensor[(4, 9, 14), float32] */;
  %239 = floor_divide(%237, %238) /* ty=Tensor[(4, 9, 14), float32] */;
  (%239,)
}

def @func_2371(%var_2353: uint16, %var_2354: Tensor[(16, 10, 12), uint16]) -> (Tensor[(16, 10, 12), uint16], Tensor[(16, 10, 12), float32]) {
  %240 = cast(%var_2353, dtype="uint16") /* ty=uint16 */;
  %241 = cast(%var_2354, dtype="uint16") /* ty=Tensor[(16, 10, 12), uint16] */;
  %242 = cast(%var_2354, dtype="float32") /* ty=Tensor[(16, 10, 12), float32] */;
  %243 = left_shift(%240, %241) /* ty=Tensor[(16, 10, 12), uint16] */;
  %244 = log(%242) /* ty=Tensor[(16, 10, 12), float32] */;
  (%243, %244)
}

def @main(%var_5724: Tensor[(8, 12, 10), uint32], %var_5732: Tensor[(420), float32]) -> (Tensor[(8, 16, 3), uint32], Tensor[(8, 12, 10), int64], Tensor[(8, 16, 3), int32], Tensor[(420), float32], Tensor[(840, 4), float32], Tensor[(4, 15, 7), float32], Tensor[(8, 840, 4), int16]) {
  %245 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 1, 1), uint32] */, dtype="uint32") /* ty=Tensor[(8, 1, 1), uint32] */;
  %246 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 16, 3), uint32] */, dtype="uint32") /* ty=Tensor[(8, 16, 3), uint32] */;
  %247 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 1, 1), uint32] */, dtype="int64") /* ty=Tensor[(8, 1, 1), int64] */;
  %248 = cast(%var_5724, dtype="int64") /* ty=Tensor[(8, 12, 10), int64] */;
  %249 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 16, 3), uint32] */, dtype="int32") /* ty=Tensor[(8, 16, 3), int32] */;
  %250 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 1, 1), uint32] */, dtype="int32") /* ty=Tensor[(8, 1, 1), int32] */;
  %251 = cast(%var_5732, dtype="float32") /* ty=Tensor[(420), float32] */;
  %252 = reshape(%251, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float32] */;
  %253 = cast(%var_5732, dtype="float32") /* ty=Tensor[(420), float32] */;
  %254 = cast(meta[relay.Constant][12] /* ty=Tensor[(840, 4), float32] */, dtype="float32") /* ty=Tensor[(840, 4), float32] */;
  %255 = cast(%var_5732, dtype="float64") /* ty=Tensor[(420), float64] */;
  %256 = reshape(%253, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float32] */;
  %257 = reshape(%254, newshape=[840, 4]) /* ty=Tensor[(840, 4), float32] */;
  %258 = reshape(%255, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %259 = @func_4964(%256, %257, %258) /* ty=(Tensor[(420, 8), float64], Tensor[(840, 4), float32], Tensor[(4, 15, 7), float64]) */;
  %260 = %259.1;
  %261 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 1, 1), uint32] */, dtype="int16") /* ty=Tensor[(8, 1, 1), int16] */;
  %262 = cast(%260, dtype="int16") /* ty=Tensor[(840, 4), int16] */;
  %263 = bitwise_and(%245, %246) /* ty=Tensor[(8, 16, 3), uint32] */;
  %264 = logical_xor(%247, %248) /* ty=Tensor[(8, 12, 10), int64] */;
  %265 = bitwise_or(%249, %250) /* ty=Tensor[(8, 16, 3), int32] */;
  %266 = @func_1266(%252) /* ty=Tensor[(4, 15, 7), float32] */;
  %267 = add(%261, %262) /* ty=Tensor[(8, 840, 4), int16] */;
  (%263, %264, %265, %var_5732, meta[relay.Constant][12] /* ty=Tensor[(840, 4), float32] */, %266, %267)
}

def @func_4753() -> (Tensor[(420, 1), float32], Tensor[(968), uint16], Tensor[(2160), float64], Tensor[(90, 14), int64], Tensor[(14, 240), float32], Tensor[(420, 8), float32]) {
  %268 = @func_3709() /* ty=(Tensor[(420, 1), float32],) */;
  %269 = cast(meta[relay.Constant][13] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %270 = cast(meta[relay.Constant][14] /* ty=Tensor[(90, 14), int64] */, dtype="int64") /* ty=Tensor[(90, 14), int64] */;
  %271 = reshape(%269, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float64] */;
  %272 = reshape(%270, newshape=[1260]) /* ty=Tensor[(1260), int64] */;
  %273 = @func_984(%271, %272) /* ty=(Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(15, 7, 12), bool], Tensor[(1260), int64], Tensor[(9, 15, 16), float64]) */;
  %274 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 240), float32] */, dtype="float32") /* ty=Tensor[(14, 240), float32] */;
  %275 = reshape(%274, newshape=[420, 8]) /* ty=Tensor[(420, 8), float32] */;
  %276 = @func_4627(%275) /* ty=(Tensor[(420, 8), float64],) */;
  %277 = %276.0;
  %278 = cast(%277, dtype="float32") /* ty=Tensor[(420, 8), float32] */;
  %279 = %268.0;
  %280 = %273.1;
  %281 = log(%278) /* ty=Tensor[(420, 8), float32] */;
  (%279, %280, meta[relay.Constant][13] /* ty=Tensor[(2160), float64] */, meta[relay.Constant][14] /* ty=Tensor[(90, 14), int64] */, meta[relay.Constant][15] /* ty=Tensor[(14, 240), float32] */, %281)
}

def @func_5556() -> (Tensor[(15, 13, 12), bool],) {
  %282 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 13, 12), float64] */, dtype="float64") /* ty=Tensor[(15, 13, 12), float64] */;
  %283 = acos(%282) /* ty=Tensor[(15, 13, 12), float64] */;
  %284 = cast(%283, dtype="float64") /* ty=Tensor[(15, 13, 12), float64] */;
  %285 = asinh(%284) /* ty=Tensor[(15, 13, 12), float64] */;
  %286 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 13, 12), float64] */, dtype="bool") /* ty=Tensor[(15, 13, 12), bool] */;
  %287 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%285, dtype="bool") /* ty=Tensor[(15, 13, 12), bool] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %290 = logical_and(%288, %289) /* ty=Tensor[(15, 13, 12), bool] */;
  (%290,)
}

def @func_2413(%var_2408: Tensor[(14, 5, 4), float32]) -> (Tensor[(14, 5, 4), float32], Tensor[(14, 5, 4), bool]) {
  %291 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 5, 4), float32] */, dtype="float32") /* ty=Tensor[(14, 5, 4), float32] */;
  %292 = cast(%var_2408, dtype="bool") /* ty=Tensor[(14, 5, 4), bool] */;
  %293 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(14, 5, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 5, 4), float32] */, dtype="bool") /* ty=Tensor[(14, 5, 4), bool] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %296 = atan(%291) /* ty=Tensor[(14, 5, 4), float32] */;
  %297 = logical_or(%294, %295) /* ty=Tensor[(14, 5, 4), bool] */;
  (%296, %297)
}

def @func_107(%var_101: Tensor[(8, 11, 11), uint16]) -> Tensor[(8, 11, 11), bool] {
  %298 = cast(%var_101, dtype="bool") /* ty=Tensor[(8, 11, 11), bool] */;
  %299 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(8, 11, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 11, 11), uint16] */, dtype="bool") /* ty=Tensor[(8, 11, 11), bool] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%300, %301) /* ty=Tensor[(8, 11, 11), bool] */
}

def @func_3568(%var_3563: Tensor[(6, 9, 3), bool], %var_3564: Tensor[(6, 9, 3), bool]) -> (Tensor[(6, 9, 3), bool],) {
  %302 = cast(%var_3564, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %303 = shape_of(%var_3563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%var_3563, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %306 = logical_and(%304, %305) /* ty=Tensor[(6, 9, 3), bool] */;
  (%306,)
}

def @func_5257() -> (Tensor[(13, 3, 12), float64],) {
  %307 = @func_4907() /* ty=(Tensor[(13, 3, 12), float64],) */;
  %308 = %307.0;
  (%308,)
}

def @func_2295(%var_2292: Tensor[(3, 15, 4), float64]) -> Tensor[(3, 15, 4), float64] {
  %309 = cast(%var_2292, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  acosh(%309) /* ty=Tensor[(3, 15, 4), float64] */
}

def @func_50(%var_8: int32, %var_9: Tensor[(1, 10, 2), int32]) -> Tensor[(1, 10, 2), bool] {
  %310 = cast(%var_8, dtype="bool") /* ty=bool */;
  %311 = cast(%var_9, dtype="bool") /* ty=Tensor[(1, 10, 2), bool] */;
  greater_equal(%310, %311) /* ty=Tensor[(1, 10, 2), bool] */
}

def @func_5003(%var_4992: Tensor[(4, 15, 7), float32]) -> (Tensor[(4, 15, 7), int8], Tensor[(4, 15, 7), float64]) {
  %312 = @func_3320() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(1, 10, 2), bool], int32, Tensor[(5, 4), int32]) */;
  %313 = %312.0;
  %314 = cast(%var_4992, dtype="int8") /* ty=Tensor[(4, 15, 7), int8] */;
  %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%313, dtype="int8") /* ty=Tensor[(4, 15, 7), int8] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %318 = cast(%var_4992, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %319 = bitwise_or(%316, %317) /* ty=Tensor[(4, 15, 7), int8] */;
  %320 = atanh(%318) /* ty=Tensor[(4, 15, 7), float64] */;
  (%319, %320)
}

def @func_4723() -> (Tensor[(4, 15, 7), float32],) {
  %321 = @func_3248() /* ty=(Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) */;
  %322 = %321.1;
  (%322,)
}

def @func_1765(%var_1752: int8) -> (Tensor[(6, 1, 10), int8], Tensor[(4, 11), float64], Tensor[(44), float64]) {
  %323 = cast(%var_1752, dtype="int8") /* ty=int8 */;
  %324 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 1, 10), int8] */, dtype="int8") /* ty=Tensor[(6, 1, 10), int8] */;
  %325 = cast(meta[relay.Constant][21] /* ty=Tensor[(44), float64] */, dtype="float64") /* ty=Tensor[(44), float64] */;
  %326 = reshape(%325, newshape=[4, 11]) /* ty=Tensor[(4, 11), float64] */;
  %327 = bitwise_or(%323, %324) /* ty=Tensor[(6, 1, 10), int8] */;
  %328 = @func_1144(%326) /* ty=Tensor[(4, 11), float64] */;
  (%327, %328, meta[relay.Constant][21] /* ty=Tensor[(44), float64] */)
}

def @func_3320() -> (Tensor[(4, 15, 7), float32], Tensor[(1, 10, 2), bool], int32, Tensor[(5, 4), int32]) {
  %329 = @func_3248() /* ty=(Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) */;
  %330 = cast(3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %331 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 4), int32] */, dtype="int32") /* ty=Tensor[(5, 4), int32] */;
  %332 = reshape(%330, newshape=[]) /* ty=int32 */;
  %333 = reshape(%331, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), int32] */;
  %334 = %329.1;
  %335 = @func_50(%332, %333) /* ty=Tensor[(1, 10, 2), bool] */;
  (%334, %335, 3 /* ty=int32 */, meta[relay.Constant][22] /* ty=Tensor[(5, 4), int32] */)
}

def @func_1960(%var_1957: Tensor[(14, 3, 2), float32]) -> Tensor[(14, 3, 2), float32] {
  %336 = cast(%var_1957, dtype="float32") /* ty=Tensor[(14, 3, 2), float32] */;
  log2(%336) /* ty=Tensor[(14, 3, 2), float32] */
}

def @func_397(%var_378: Tensor[(546), int8]) -> (Tensor[(14, 4, 7), float64], Tensor[(6, 13, 7), bool], Tensor[(546), int8], Tensor[(8, 11, 11), bool], Tensor[(968), uint16]) {
  %337 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 4, 7), float64] */, dtype="float64") /* ty=Tensor[(14, 4, 7), float64] */;
  %338 = cast(%var_378, dtype="int8") /* ty=Tensor[(546), int8] */;
  %339 = cast(%var_378, dtype="int8") /* ty=Tensor[(546), int8] */;
  %340 = reshape(%338, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int8] */;
  %341 = reshape(%339, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int8] */;
  %342 = @func_363(%340, %341) /* ty=(Tensor[(6, 13, 7), bool],) */;
  %343 = cast(meta[relay.Constant][24] /* ty=Tensor[(968), uint16] */, dtype="uint16") /* ty=Tensor[(968), uint16] */;
  %344 = reshape(%343, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), uint16] */;
  %345 = atan(%337) /* ty=Tensor[(14, 4, 7), float64] */;
  %346 = %342.0;
  %347 = @func_107(%344) /* ty=Tensor[(8, 11, 11), bool] */;
  (%345, %346, %var_378, %347, meta[relay.Constant][24] /* ty=Tensor[(968), uint16] */)
}

def @func_4075() -> Tensor[(420, 1), float32] {
  %348 = @func_3709() /* ty=(Tensor[(420, 1), float32],) */;
  %348.0
}

def @func_4035(%var_4015: Tensor[(1, 9, 16), float32], %var_4024: Tensor[(864), int16], %var_4025: Tensor[(1, 6720), float32]) -> (Tensor[(16, 9, 6), bool], Tensor[(864), int16], Tensor[(1, 6720), float32], Tensor[(1, 9, 16), float64]) {
  %349 = cast(%var_4024, dtype="int16") /* ty=Tensor[(864), int16] */;
  %350 = cast(%var_4025, dtype="float32") /* ty=Tensor[(1, 6720), float32] */;
  %351 = reshape(%349, newshape=[864]) /* ty=Tensor[(864), int16] */;
  %352 = reshape(%350, newshape=[420, 16]) /* ty=Tensor[(420, 16), float32] */;
  %353 = @func_3867(%351, %352) /* ty=(Tensor[(16, 9, 6), bool], Tensor[(864), int16], Tensor[(420, 16), float64]) */;
  %354 = cast(%var_4015, dtype="float32") /* ty=Tensor[(1, 9, 16), float32] */;
  %355 = cos(%354) /* ty=Tensor[(1, 9, 16), float32] */;
  %356 = cast(%355, dtype="float64") /* ty=Tensor[(1, 9, 16), float64] */;
  %357 = %353.0;
  %358 = log(%356) /* ty=Tensor[(1, 9, 16), float64] */;
  (%357, %var_4024, %var_4025, %358)
}

def @func_3020(%var_2958: float64, %var_3004: Tensor[(5, 10, 9), bool]) -> (Tensor[(?, 10, 9), int16], Tensor[(5, 10, 9), float64], Tensor[(5, 10, 9), float32]) {
  %359 = cast(%var_2958, dtype="float64") /* ty=float64 */;
  %360 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(1, 10, 9), float64] */;
  %361 = floor_mod(%359, %360) /* ty=Tensor[(1, 10, 9), float64] */;
  %362 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 10, 9), float64] */, dtype="int8") /* ty=Tensor[(1, 10, 9), int8] */;
  %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%361, dtype="int8") /* ty=Tensor[(1, 10, 9), int8] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %366 = bitwise_and(%364, %365) /* ty=Tensor[(?, 10, 9), int8] */;
  %367 = cast(%366, dtype="int16") /* ty=Tensor[(?, 10, 9), int16] */;
  %368 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(1, 10, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 10, 9), float64] */, dtype="int16") /* ty=Tensor[(1, 10, 9), int16] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %371 = cast(%361, dtype="bool") /* ty=Tensor[(1, 10, 9), bool] */;
  %372 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%366, dtype="bool") /* ty=Tensor[(?, 10, 9), bool] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %375 = not_equal(%373, %374) /* ty=Tensor[(?, 10, 9), bool] */;
  %376 = cast(%375, dtype="float64") /* ty=Tensor[(?, 10, 9), float64] */;
  %377 = cast(%var_3004, dtype="float64") /* ty=Tensor[(5, 10, 9), float64] */;
  %378 = cast(%var_3004, dtype="float32") /* ty=Tensor[(5, 10, 9), float32] */;
  %379 = cast(%375, dtype="float32") /* ty=Tensor[(?, 10, 9), float32] */;
  %380 = logical_xor(%369, %370) /* ty=Tensor[(?, 10, 9), int16] */;
  %381 = floor_divide(%376, %377) /* ty=Tensor[(5, 10, 9), float64] */;
  %382 = mod(%378, %379) /* ty=Tensor[(5, 10, 9), float32] */;
  (%380, %381, %382)
}

def @func_3248() -> (Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) {
  %383 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 3, 12), int32] */, dtype="int32") /* ty=Tensor[(13, 3, 12), int32] */;
  %384 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(13, 3, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 3, 12), int32] */, dtype="int32") /* ty=Tensor[(13, 3, 12), int32] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %387 = cast(meta[relay.Constant][28] /* ty=Tensor[(420, 1), float32] */, dtype="float32") /* ty=Tensor[(420, 1), float32] */;
  %388 = reshape(%387, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float32] */;
  %389 = maximum(%385, %386) /* ty=Tensor[(13, 3, 12), int32] */;
  %390 = @func_1266(%388) /* ty=Tensor[(4, 15, 7), float32] */;
  (%389, %390, meta[relay.Constant][28] /* ty=Tensor[(420, 1), float32] */)
}

def @func_4415(%var_4399: Tensor[(420, 7), bool]) -> Tensor[(420, 7), uint64] {
  %391 = @func_4350() /* ty=Tensor[(420, 7), bool] */;
  %392 = cast(%var_4399, dtype="uint64") /* ty=Tensor[(420, 7), uint64] */;
  %393 = shape_of(%391, dtype="int32") /* ty=Tensor[(2), int32] */;
  %394 = cast(%391, dtype="uint64") /* ty=Tensor[(420, 7), uint64] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  logical_xor(%394, %395) /* ty=Tensor[(420, 7), uint64] */
}

def @func_2750(%var_2735: Tensor[(13, 10, 3), float64]) -> (Tensor[(13, 10, 3), float64], Tensor[(14, 3, 2), float32], Tensor[(84), float32]) {
  %396 = cast(%var_2735, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %397 = exp(%396) /* ty=Tensor[(13, 10, 3), float64] */;
  %398 = cast(%397, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %399 = cast(meta[relay.Constant][29] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %400 = reshape(%399, newshape=[14, 3, 2]) /* ty=Tensor[(14, 3, 2), float32] */;
  %401 = acosh(%398) /* ty=Tensor[(13, 10, 3), float64] */;
  %402 = @func_1960(%400) /* ty=Tensor[(14, 3, 2), float32] */;
  (%401, %402, meta[relay.Constant][29] /* ty=Tensor[(84), float32] */)
}

def @func_4651(%var_4641: Tensor[(3, 6, 7), float64], %var_4644: Tensor[(3, 6, 7), float64]) -> (Tensor[(3, 6, 7), bool],) {
  %403 = cast(%var_4641, dtype="float64") /* ty=Tensor[(3, 6, 7), float64] */;
  %404 = exp(%403) /* ty=Tensor[(3, 6, 7), float64] */;
  %405 = cast(%var_4644, dtype="bool") /* ty=Tensor[(3, 6, 7), bool] */;
  %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%404, dtype="bool") /* ty=Tensor[(3, 6, 7), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %409 = not_equal(%407, %408) /* ty=Tensor[(3, 6, 7), bool] */;
  (%409,)
}

def @func_3294(%var_3274: Tensor[(2464), float64], %var_3280: Tensor[(864), int16]) -> (Tensor[(4, 15, 7), float32], Tensor[(4, 4, 4), uint64], Tensor[(2464), float64], uint64, Tensor[(16, 9, 6), bool], Tensor[(864), int16], Tensor[(11, 16, 14), float64]) {
  %410 = @func_3248() /* ty=(Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) */;
  %411 = cast(%var_3274, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %412 = cast(meta[relay.Constant][30] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %413 = reshape(%411, newshape=[11, 16, 14]) /* ty=Tensor[(11, 16, 14), float64] */;
  %414 = reshape(%412, newshape=[]) /* ty=uint64 */;
  %415 = @func_3073(%413, %414) /* ty=(Tensor[(11, 16, 14), float64], Tensor[(4, 4, 4), uint64], uint64) */;
  %416 = cast(%var_3280, dtype="int16") /* ty=Tensor[(864), int16] */;
  %417 = cast(%var_3280, dtype="int16") /* ty=Tensor[(864), int16] */;
  %418 = reshape(%416, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), int16] */;
  %419 = reshape(%417, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), int16] */;
  %420 = @func_2036(%418, %419) /* ty=(Tensor[(16, 9, 6), bool],) */;
  %421 = cast(%var_3274, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %422 = cast(meta[relay.Constant][30] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %423 = reshape(%421, newshape=[11, 16, 14]) /* ty=Tensor[(11, 16, 14), float64] */;
  %424 = reshape(%422, newshape=[]) /* ty=uint64 */;
  %425 = @func_3073(%423, %424) /* ty=(Tensor[(11, 16, 14), float64], Tensor[(4, 4, 4), uint64], uint64) */;
  %426 = %410.1;
  %427 = %415.1;
  %428 = %420.0;
  %429 = %425.0;
  (%426, %427, %var_3274, meta[relay.Constant][30] /* ty=uint64 */, %428, %var_3280, %429)
}

def @func_5394(%var_5378: Tensor[(15, 9, 14), uint64]) -> Tensor[(15, 9, 14), uint64] {
  %430 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 9, 14), uint64] */, dtype="uint64") /* ty=Tensor[(15, 9, 14), uint64] */;
  %431 = shape_of(%var_5378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%var_5378, dtype="uint64") /* ty=Tensor[(15, 9, 14), uint64] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%432, %433) /* ty=Tensor[(15, 9, 14), uint64] */
}

def @func_4474(%var_4463: Tensor[(546), int8], %var_4470: Tensor[(6720), float32]) -> (Tensor[(14, 6, 4), float64], Tensor[(6, 13, 7), bool], Tensor[(546), int8], Tensor[(420, 16), float32], Tensor[(6720), float32]) {
  %434 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 6, 4), float64] */, dtype="float64") /* ty=Tensor[(14, 6, 4), float64] */;
  %435 = cast(%var_4463, dtype="int8") /* ty=Tensor[(546), int8] */;
  %436 = cast(%var_4463, dtype="int8") /* ty=Tensor[(546), int8] */;
  %437 = reshape(%435, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int8] */;
  %438 = reshape(%436, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int8] */;
  %439 = @func_363(%437, %438) /* ty=(Tensor[(6, 13, 7), bool],) */;
  %440 = cast(%var_4470, dtype="float32") /* ty=Tensor[(6720), float32] */;
  %441 = reshape(%440, newshape=[420, 16]) /* ty=Tensor[(420, 16), float32] */;
  %442 = @func_3916(%441) /* ty=(Tensor[(420, 16), float32],) */;
  %443 = cos(%434) /* ty=Tensor[(14, 6, 4), float64] */;
  %444 = %439.0;
  %445 = %442.0;
  (%443, %444, %var_4463, %445, %var_4470)
}

def @func_4002(%var_3986: Tensor[(16, 9, 6), bool]) -> (Tensor[(16, 9, 6), float64], Tensor[(420, 1), float32]) {
  %446 = @func_3434() /* ty=(Tensor[(5, 4), int32], Tensor[(16, 9, 6), bool]) */;
  %447 = %446.1;
  %448 = cast(%var_3986, dtype="float64") /* ty=Tensor[(16, 9, 6), float64] */;
  %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%447, dtype="float64") /* ty=Tensor[(16, 9, 6), float64] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %452 = @func_3709() /* ty=(Tensor[(420, 1), float32],) */;
  %453 = floor_mod(%450, %451) /* ty=Tensor[(16, 9, 6), float64] */;
  %454 = %452.0;
  (%453, %454)
}

def @func_3916(%var_3909: Tensor[(420, 16), float32]) -> (Tensor[(420, 16), float32],) {
  %455 = @func_3692() /* ty=(Tensor[(420, 1), float32], Tensor[(3, 15, 4), int64]) */;
  %456 = %455.0;
  %457 = cast(%456, dtype="float32") /* ty=Tensor[(420, 1), float32] */;
  %458 = cast(%var_3909, dtype="float32") /* ty=Tensor[(420, 16), float32] */;
  %459 = floor_divide(%457, %458) /* ty=Tensor[(420, 16), float32] */;
  (%459,)
}

def @func_5496() -> (Tensor[(420, 11), int64],) {
  %460 = @func_4075() /* ty=Tensor[(420, 1), float32] */;
  %461 = cast(%460, dtype="int64") /* ty=Tensor[(420, 1), int64] */;
  %462 = cast(meta[relay.Constant][33] /* ty=Tensor[(420, 11), float32] */, dtype="int64") /* ty=Tensor[(420, 11), int64] */;
  %463 = logical_xor(%461, %462) /* ty=Tensor[(420, 11), int64] */;
  (%463,)
}

def @func_3692() -> (Tensor[(420, 1), float32], Tensor[(3, 15, 4), int64]) {
  %464 = cast(meta[relay.Constant][34] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %465 = reshape(%464, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), float64] */;
  %466 = @func_2295(%465) /* ty=Tensor[(3, 15, 4), float64] */;
  %467 = cast(meta[relay.Constant][34] /* ty=Tensor[(180), float64] */, dtype="int64") /* ty=Tensor[(180), int64] */;
  %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%466, dtype="int64") /* ty=Tensor[(3, 15, 4), int64] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %471 = @func_3347() /* ty=Tensor[(420, 1), float32] */;
  %472 = multiply(%469, %470) /* ty=Tensor[(3, 15, 4), int64] */;
  (%471, %472)
}

def @func_3709() -> (Tensor[(420, 1), float32],) {
  %473 = @func_3347() /* ty=Tensor[(420, 1), float32] */;
  (%473,)
}

def @func_1598(%var_1592: uint64) -> (Tensor[(4, 4, 4), uint64],) {
  %474 = cast(%var_1592, dtype="uint64") /* ty=uint64 */;
  %475 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 4, 4), uint64] */, dtype="uint64") /* ty=Tensor[(4, 4, 4), uint64] */;
  %476 = subtract(%474, %475) /* ty=Tensor[(4, 4, 4), uint64] */;
  (%476,)
}

def @func_3867(%var_3804: Tensor[(864), int16], %var_3806: Tensor[(420, 16), float32]) -> (Tensor[(16, 9, 6), bool], Tensor[(864), int16], Tensor[(420, 16), float64]) {
  %477 = cast(%var_3804, dtype="int16") /* ty=Tensor[(864), int16] */;
  %478 = cast(%var_3804, dtype="int16") /* ty=Tensor[(864), int16] */;
  %479 = reshape(%477, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), int16] */;
  %480 = reshape(%478, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), int16] */;
  %481 = @func_2036(%479, %480) /* ty=(Tensor[(16, 9, 6), bool],) */;
  %482 = @func_3347() /* ty=Tensor[(420, 1), float32] */;
  %483 = cast(%482, dtype="bool") /* ty=Tensor[(420, 1), bool] */;
  %484 = cast(%var_3806, dtype="bool") /* ty=Tensor[(420, 16), bool] */;
  %485 = less(%483, %484) /* ty=Tensor[(420, 16), bool] */;
  %486 = cast(%485, dtype="float64") /* ty=Tensor[(420, 16), float64] */;
  %487 = asinh(%486) /* ty=Tensor[(420, 16), float64] */;
  %488 = cast(%487, dtype="float32") /* ty=Tensor[(420, 16), float32] */;
  %489 = cast(%482, dtype="float32") /* ty=Tensor[(420, 1), float32] */;
  %490 = mod(%488, %489) /* ty=Tensor[(420, 16), float32] */;
  %491 = cast(%490, dtype="uint8") /* ty=Tensor[(420, 16), uint8] */;
  %492 = shape_of(%487, dtype="int32") /* ty=Tensor[(2), int32] */;
  %493 = cast(%487, dtype="uint8") /* ty=Tensor[(420, 16), uint8] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %495 = bitwise_and(%493, %494) /* ty=Tensor[(420, 16), uint8] */;
  %496 = cast(%var_3806, dtype="float64") /* ty=Tensor[(420, 16), float64] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(2), int32] */;
  %498 = cast(%495, dtype="float64") /* ty=Tensor[(420, 16), float64] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %500 = %481.0;
  %501 = subtract(%498, %499) /* ty=Tensor[(420, 16), float64] */;
  (%500, %var_3804, %501)
}

def @func_4775() -> Tensor[(420, 1), float32] {
  %502 = @func_4753() /* ty=(Tensor[(420, 1), float32], Tensor[(968), uint16], Tensor[(2160), float64], Tensor[(90, 14), int64], Tensor[(14, 240), float32], Tensor[(420, 8), float32]) */;
  %502.0
}

def @func_5324(%var_5285: Tensor[(9, 8, 1), uint8], %var_5286: Tensor[(9, 8, 14), uint8]) -> (Tensor[(9, 8, 14), uint8], Tensor[(420, 1), float32], Tensor[(9, 8, ?), uint32]) {
  %503 = cast(%var_5285, dtype="uint8") /* ty=Tensor[(9, 8, 1), uint8] */;
  %504 = cast(%var_5286, dtype="uint8") /* ty=Tensor[(9, 8, 14), uint8] */;
  %505 = cast(%var_5285, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
  %506 = atanh(%505) /* ty=Tensor[(9, 8, 1), float32] */;
  %507 = cast(%506, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
  %508 = tan(%507) /* ty=Tensor[(9, 8, 1), float32] */;
  %509 = cast(%506, dtype="uint32") /* ty=Tensor[(9, 8, 1), uint32] */;
  %510 = shape_of(%508, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(%508, dtype="uint32") /* ty=Tensor[(9, 8, 1), uint32] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %513 = bitwise_xor(%503, %504) /* ty=Tensor[(9, 8, 14), uint8] */;
  %514 = @func_4075() /* ty=Tensor[(420, 1), float32] */;
  %515 = bitwise_xor(%511, %512) /* ty=Tensor[(9, 8, ?), uint32] */;
  (%513, %514, %515)
}

def @func_5685(%var_5671: Tensor[(4, 15, 7), float32]) -> (Tensor[(4, 15, 7), bool],) {
  %516 = @func_3248() /* ty=(Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) */;
  %517 = %516.1;
  %518 = cast(%517, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
  %519 = rsqrt(%518) /* ty=Tensor[(4, 15, 7), float32] */;
  %520 = cast(%var_5671, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%519, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %524 = logical_and(%522, %523) /* ty=Tensor[(4, 15, 7), bool] */;
  (%524,)
}

def @func_3653(%var_3641: Tensor[(1920), uint16]) -> (int32, Tensor[(16, 10, 12), float32], Tensor[(1920), uint16]) {
  %525 = @func_3320() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(1, 10, 2), bool], int32, Tensor[(5, 4), int32]) */;
  %526 = %525.2;
  %527 = cast(%526, dtype="uint16") /* ty=uint16 */;
  %528 = cast(%var_3641, dtype="uint16") /* ty=Tensor[(1920), uint16] */;
  %529 = reshape(%527, newshape=[]) /* ty=uint16 */;
  %530 = reshape(%528, newshape=[16, 10, 12]) /* ty=Tensor[(16, 10, 12), uint16] */;
  %531 = @func_2371(%529, %530) /* ty=(Tensor[(16, 10, 12), uint16], Tensor[(16, 10, 12), float32]) */;
  %532 = %531.1;
  (%526, %532, %var_3641)
}

def @func_5246() -> Tensor[(13, 3, 12), float64] {
  @func_3948() /* ty=Tensor[(13, 3, 12), float64] */
}

def @func_1266(%var_1260: Tensor[(4, 15, 7), float32]) -> Tensor[(4, 15, 7), float32] {
  %533 = cast(%var_1260, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
  asin(%533) /* ty=Tensor[(4, 15, 7), float32] */
}

def @func_3948() -> Tensor[(13, 3, 12), float64] {
  %534 = @func_3248() /* ty=(Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) */;
  %535 = %534.0;
  %536 = cast(%535, dtype="float64") /* ty=Tensor[(13, 3, 12), float64] */;
  log10(%536) /* ty=Tensor[(13, 3, 12), float64] */
}

def @func_3347() -> Tensor[(420, 1), float32] {
  %537 = @func_3248() /* ty=(Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) */;
  %537.2
}

def @func_5142() -> (Tensor[(420, 1), float64], Tensor[(22, 44), float64], Tensor[(4, 15, 7), float32]) {
  %538 = @func_3709() /* ty=(Tensor[(420, 1), float32],) */;
  %539 = %538.0;
  %540 = cast(%539, dtype="float64") /* ty=Tensor[(420, 1), float64] */;
  %541 = cast(meta[relay.Constant][36] /* ty=Tensor[(22, 44), uint16] */, dtype="uint16") /* ty=Tensor[(22, 44), uint16] */;
  %542 = reshape(%541, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), uint16] */;
  %543 = @func_107(%542) /* ty=Tensor[(8, 11, 11), bool] */;
  %544 = cast(%543, dtype="float64") /* ty=Tensor[(8, 11, 11), float64] */;
  %545 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(22, 44), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %546 = cast(meta[relay.Constant][36] /* ty=Tensor[(22, 44), uint16] */, dtype="float64") /* ty=Tensor[(22, 44), float64] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %548 = @func_4723() /* ty=(Tensor[(4, 15, 7), float32],) */;
  %549 = log10(%540) /* ty=Tensor[(420, 1), float64] */;
  %550 = power(%546, %547) /* ty=Tensor[(22, 44), float64] */;
  %551 = %548.0;
  (%549, %550, %551)
}

def @func_2488(%var_2483: Tensor[(15, 3, 1), float32]) -> (Tensor[(15, 3, 1), float32],) {
  %552 = cast(%var_2483, dtype="float32") /* ty=Tensor[(15, 3, 1), float32] */;
  %553 = asin(%552) /* ty=Tensor[(15, 3, 1), float32] */;
  (%553,)
}

def @func_363(%var_335: Tensor[(6, 13, 7), int8], %var_336: Tensor[(6, 13, 7), int8]) -> (Tensor[(6, 13, 7), bool],) {
  %554 = cast(%var_336, dtype="bool") /* ty=Tensor[(6, 13, 7), bool] */;
  %555 = shape_of(%var_335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%var_335, dtype="bool") /* ty=Tensor[(6, 13, 7), bool] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %558 = less_equal(%556, %557) /* ty=Tensor[(6, 13, 7), bool] */;
  (%558,)
}

def @func_1144(%var_1139: Tensor[(4, 11), float64]) -> Tensor[(4, 11), float64] {
  %559 = cast(%var_1139, dtype="float64") /* ty=Tensor[(4, 11), float64] */;
  sqrt(%559) /* ty=Tensor[(4, 11), float64] */
}

def @func_4816() -> (Tensor[(4, 15, 7), float32], Tensor[(968), uint16], Tensor[(1260), int64], Tensor[(1, 968), uint16]) {
  %560 = @func_3248() /* ty=(Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) */;
  %561 = cast(meta[relay.Constant][37] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %562 = cast(meta[relay.Constant][37] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %563 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 968), uint16] */, dtype="uint16") /* ty=Tensor[(1, 968), uint16] */;
  %564 = reshape(%561, newshape=[15, 7, 12]) /* ty=Tensor[(15, 7, 12), int64] */;
  %565 = reshape(%562, newshape=[15, 7, 12]) /* ty=Tensor[(15, 7, 12), int64] */;
  %566 = reshape(%563, newshape=[968]) /* ty=Tensor[(968), uint16] */;
  %567 = @func_927(%564, %565, %566) /* ty=(Tensor[(15, 7, 12), bool], Tensor[(8, 11, 11), bool], Tensor[(968), uint16]) */;
  %568 = %560.1;
  %569 = %567.2;
  (%568, %569, meta[relay.Constant][37] /* ty=Tensor[(1260), int64] */, meta[relay.Constant][38] /* ty=Tensor[(1, 968), uint16] */)
}

def @func_4350() -> Tensor[(420, 7), bool] {
  %570 = @func_3709() /* ty=(Tensor[(420, 1), float32],) */;
  %571 = %570.0;
  %572 = cast(%571, dtype="bool") /* ty=Tensor[(420, 1), bool] */;
  %573 = cast(meta[relay.Constant][39] /* ty=Tensor[(420, 7), float32] */, dtype="bool") /* ty=Tensor[(420, 7), bool] */;
  less_equal(%572, %573) /* ty=Tensor[(420, 7), bool] */
}

def @func_3434() -> (Tensor[(5, 4), int32], Tensor[(16, 9, 6), bool]) {
  %574 = @func_3320() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(1, 10, 2), bool], int32, Tensor[(5, 4), int32]) */;
  %575 = cast(meta[relay.Constant][40] /* ty=Tensor[(864), int16] */, dtype="int16") /* ty=Tensor[(864), int16] */;
  %576 = cast(meta[relay.Constant][40] /* ty=Tensor[(864), int16] */, dtype="int16") /* ty=Tensor[(864), int16] */;
  %577 = reshape(%575, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), int16] */;
  %578 = reshape(%576, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), int16] */;
  %579 = @func_2036(%577, %578) /* ty=(Tensor[(16, 9, 6), bool],) */;
  %580 = %579.0;
  %581 = cast(meta[relay.Constant][40] /* ty=Tensor[(864), int16] */, dtype="bool") /* ty=Tensor[(864), bool] */;
  %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%580, dtype="bool") /* ty=Tensor[(16, 9, 6), bool] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %585 = %574.3;
  %586 = logical_or(%583, %584) /* ty=Tensor[(16, 9, 6), bool] */;
  (%585, %586)
}

def @func_4277(%var_4245: Tensor[(450), bool], %var_4250: Tensor[(2464), float64], %var_4265: Tensor[(18, 9), bool]) -> (Tensor[(13, 3, 12), float64], Tensor[(?, 10, 9), int16], float64, Tensor[(450), bool], Tensor[(16, 9, 6), bool], Tensor[(2464), float64], Tensor[(864, 1), int16], Tensor[(6, 9, 3), bool], Tensor[(18, 9), float32], Tensor[(16, 9, 6), bool]) {
  %587 = cast(-1.68955f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %588 = cast(%var_4245, dtype="bool") /* ty=Tensor[(450), bool] */;
  %589 = reshape(%587, newshape=[]) /* ty=float64 */;
  %590 = reshape(%588, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), bool] */;
  %591 = @func_3020(%589, %590) /* ty=(Tensor[(?, 10, 9), int16], Tensor[(5, 10, 9), float64], Tensor[(5, 10, 9), float32]) */;
  %592 = cast(%var_4250, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %593 = cast(meta[relay.Constant][41] /* ty=Tensor[(864, 1), int16] */, dtype="int16") /* ty=Tensor[(864, 1), int16] */;
  %594 = reshape(%592, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %595 = reshape(%593, newshape=[864]) /* ty=Tensor[(864), int16] */;
  %596 = @func_3294(%594, %595) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 4, 4), uint64], Tensor[(2464), float64], uint64, Tensor[(16, 9, 6), bool], Tensor[(864), int16], Tensor[(11, 16, 14), float64]) */;
  %597 = cast(%var_4265, dtype="bool") /* ty=Tensor[(18, 9), bool] */;
  %598 = cast(%var_4265, dtype="bool") /* ty=Tensor[(18, 9), bool] */;
  %599 = reshape(%597, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), bool] */;
  %600 = reshape(%598, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), bool] */;
  %601 = @func_3568(%599, %600) /* ty=(Tensor[(6, 9, 3), bool],) */;
  %602 = cast(%var_4265, dtype="float32") /* ty=Tensor[(18, 9), float32] */;
  %603 = %596.4;
  %604 = cast(%603, dtype="int16") /* ty=Tensor[(16, 9, 6), int16] */;
  %605 = cast(%603, dtype="int16") /* ty=Tensor[(16, 9, 6), int16] */;
  %606 = reshape(%604, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), int16] */;
  %607 = reshape(%605, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), int16] */;
  %608 = @func_2036(%606, %607) /* ty=(Tensor[(16, 9, 6), bool],) */;
  %609 = @func_3948() /* ty=Tensor[(13, 3, 12), float64] */;
  %610 = %591.0;
  %611 = %601.0;
  %612 = sinh(%602) /* ty=Tensor[(18, 9), float32] */;
  %613 = %608.0;
  (%609, %610, -1.68955f64 /* ty=float64 */, %var_4245, %603, %var_4250, meta[relay.Constant][41] /* ty=Tensor[(864, 1), int16] */, %611, %612, %613)
}

def @func_5212(%var_5188: Tensor[(13, 3, 12), float64]) -> (Tensor[(13, 3, 12), int64], Tensor[(13, 3, 12), float32]) {
  %614 = @func_3948() /* ty=Tensor[(13, 3, 12), float64] */;
  %615 = cast(%var_5188, dtype="int64") /* ty=Tensor[(13, 3, 12), int64] */;
  %616 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%614, dtype="int64") /* ty=Tensor[(13, 3, 12), int64] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %619 = cast(%var_5188, dtype="float32") /* ty=Tensor[(13, 3, 12), float32] */;
  %620 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%614, dtype="float32") /* ty=Tensor[(13, 3, 12), float32] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %623 = subtract(%617, %618) /* ty=Tensor[(13, 3, 12), int64] */;
  %624 = divide(%621, %622) /* ty=Tensor[(13, 3, 12), float32] */;
  (%623, %624)
}

def @func_4627(%var_4614: Tensor[(420, 8), float32]) -> (Tensor[(420, 8), float64],) {
  %625 = @func_3347() /* ty=Tensor[(420, 1), float32] */;
  %626 = cast(%625, dtype="float64") /* ty=Tensor[(420, 1), float64] */;
  %627 = cast(%var_4614, dtype="float64") /* ty=Tensor[(420, 8), float64] */;
  %628 = power(%626, %627) /* ty=Tensor[(420, 8), float64] */;
  (%628,)
}

def @func_4907() -> (Tensor[(13, 3, 12), float64],) {
  %629 = @func_3948() /* ty=Tensor[(13, 3, 12), float64] */;
  (%629,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4040(%var_4037: Tensor[(1, 9, 16), float32], %var_4038: Tensor[(864), int16], %var_4039: Tensor[(1, 6720), float32]) -> (Tensor[(16, 9, 6), bool], Tensor[(864), int16], Tensor[(1, 6720), float32], Tensor[(1, 9, 16), float64]) {
  @func_4035(%var_4037, %var_4038, %var_4039) /* ty=(Tensor[(16, 9, 6), bool], Tensor[(864), int16], Tensor[(1, 6720), float32], Tensor[(1, 9, 16), float64]) */
}

def @func_472(%var_467: Tensor[(11, 10, 7), float32], %var_468: Tensor[(11, 10, 7), float32], %var_469: Tensor[(11, 10, 7), float32], %var_470: int32, %var_471: Tensor[(20), int32]) -> (Tensor[(11, 10, 7), int64], Tensor[(11, 10, 7), int64], Tensor[(1, 10, 2), bool], int32, Tensor[(20), int32], Tensor[(1, 10, 2), bool], Tensor[(11, 10, 7), bool]) {
  %29 = fn (%var_425: Tensor[(11, 10, 7), float32], %var_432: Tensor[(11, 10, 7), float32], %var_441: Tensor[(11, 10, 7), float32], %var_450: int32, %var_451: Tensor[(20), int32]) -> (Tensor[(11, 10, 7), int64], Tensor[(11, 10, 7), int64], Tensor[(1, 10, 2), bool], int32, Tensor[(20), int32], Tensor[(1, 10, 2), bool], Tensor[(11, 10, 7), bool]) {
    %0 = cast(%var_432, dtype="int64") /* ty=Tensor[(11, 10, 7), int64] */;
    %1 = shape_of(%var_425, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_425, dtype="int64") /* ty=Tensor[(11, 10, 7), int64] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %4 = cast(%var_425, dtype="float32") /* ty=Tensor[(11, 10, 7), float32] */;
    %5 = tan(%4) /* ty=Tensor[(11, 10, 7), float32] */;
    %6 = cast(%var_441, dtype="int64") /* ty=Tensor[(11, 10, 7), int64] */;
    %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
    %8 = cast(%5, dtype="int64") /* ty=Tensor[(11, 10, 7), int64] */;
    %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %10 = cast(%var_450, dtype="int32") /* ty=int32 */;
    %11 = cast(%var_451, dtype="int32") /* ty=Tensor[(20), int32] */;
    %12 = reshape(%10, newshape=[]) /* ty=int32 */;
    %13 = reshape(%11, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), int32] */;
    %14 = cast(%var_450, dtype="int32") /* ty=int32 */;
    %15 = cast(%var_451, dtype="int32") /* ty=Tensor[(20), int32] */;
    %16 = reshape(%14, newshape=[]) /* ty=int32 */;
    %17 = reshape(%15, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), int32] */;
    %18 = cast(%5, dtype="float64") /* ty=Tensor[(11, 10, 7), float64] */;
    %19 = acos(%18) /* ty=Tensor[(11, 10, 7), float64] */;
    %20 = cast(%5, dtype="bool") /* ty=Tensor[(11, 10, 7), bool] */;
    %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
    %22 = cast(%19, dtype="bool") /* ty=Tensor[(11, 10, 7), bool] */;
    %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %24 = bitwise_and(%2, %3) /* ty=Tensor[(11, 10, 7), int64] */;
    %25 = subtract(%8, %9) /* ty=Tensor[(11, 10, 7), int64] */;
    %26 = @func_50(%12, %13) /* ty=Tensor[(1, 10, 2), bool] */;
    %27 = @func_50(%16, %17) /* ty=Tensor[(1, 10, 2), bool] */;
    %28 = not_equal(%22, %23) /* ty=Tensor[(11, 10, 7), bool] */;
    (%24, %25, %26, %var_450, %var_451, %27, %28)
  };
  %29(%var_467, %var_468, %var_469, %var_470, %var_471) /* ty=(Tensor[(11, 10, 7), int64], Tensor[(11, 10, 7), int64], Tensor[(1, 10, 2), bool], int32, Tensor[(20), int32], Tensor[(1, 10, 2), bool], Tensor[(11, 10, 7), bool]) */
}

def @func_1962(%var_1961: Tensor[(14, 3, 2), float32]) -> Tensor[(14, 3, 2), float32] {
  %31 = fn (%var_1957: Tensor[(14, 3, 2), float32]) -> Tensor[(14, 3, 2), float32] {
    %30 = cast(%var_1957, dtype="float32") /* ty=Tensor[(14, 3, 2), float32] */;
    log2(%30) /* ty=Tensor[(14, 3, 2), float32] */
  };
  %31(%var_1961) /* ty=Tensor[(14, 3, 2), float32] */
}

def @func_3709() -> (Tensor[(420, 1), float32],) {
  %32 = @func_3347() /* ty=Tensor[(420, 1), float32] */;
  (%32,)
}

def @func_2718(%var_2716: int8, %var_2717: Tensor[(8, 240), uint16]) -> (Tensor[(4, 11), float64], int8, Tensor[(16, 10, 12), uint16], Tensor[(8, 240), uint16], Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(15, 10, 8), uint16], Tensor[(1, 10, 2), bool], Tensor[(770), float32], Tensor[(20), int32]) {
  @func_2714(%var_2716, %var_2717) /* ty=(Tensor[(4, 11), float64], int8, Tensor[(16, 10, 12), uint16], Tensor[(8, 240), uint16], Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(15, 10, 8), uint16], Tensor[(1, 10, 2), bool], Tensor[(770), float32], Tensor[(20), int32]) */
}

def @func_5439() -> (Tensor[(1, 968), uint16], float64, Tensor[(10, 45), bool]) {
  %46 = fn () -> (Tensor[(1, 968), uint16], float64, Tensor[(10, 45), bool]) {
    %33 = @func_4816() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(968), uint16], Tensor[(1260), int64], Tensor[(1, 968), uint16]) */;
    %34 = cast(-9.03692f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %35 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 45), bool] */, dtype="bool") /* ty=Tensor[(10, 45), bool] */;
    %36 = reshape(%34, newshape=[]) /* ty=float64 */;
    %37 = reshape(%35, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), bool] */;
    %38 = @func_3020(%36, %37) /* ty=(Tensor[(?, 10, 9), int16], Tensor[(5, 10, 9), float64], Tensor[(5, 10, 9), float32]) */;
    %39 = %38.1;
    %40 = cast(%39, dtype="bool") /* ty=Tensor[(5, 10, 9), bool] */;
    %41 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(10, 45), bool] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %42 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 45), bool] */, dtype="bool") /* ty=Tensor[(10, 45), bool] */;
    %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %44 = %33.3;
    %45 = less_equal(%42, %43) /* ty=Tensor[(10, 45), bool] */;
    (%44, -9.03692f64 /* ty=float64 */, %45)
  };
  %46() /* ty=(Tensor[(1, 968), uint16], float64, Tensor[(10, 45), bool]) */
}

def @func_2753(%var_2751: Tensor[(13, 10, 3), float64]) -> (Tensor[(13, 10, 3), float64], Tensor[(14, 3, 2), float32], Tensor[(84), float32]) {
  @func_2750(%var_2751) /* ty=(Tensor[(13, 10, 3), float64], Tensor[(14, 3, 2), float32], Tensor[(84), float32]) */
}

def @func_4630(%var_4628: Tensor[(420, 8), float32]) -> (Tensor[(420, 8), float64],) {
  @func_4627(%var_4628) /* ty=(Tensor[(420, 8), float64],) */
}

def @main(%var_5724: Tensor[(8, 12, 10), uint32], %var_5732: Tensor[(420), float32]) -> (Tensor[(8, 16, 3), uint32], Tensor[(8, 12, 10), int64], Tensor[(8, 16, 3), int32], Tensor[(420), float32], Tensor[(840, 4), float32], Tensor[(4, 15, 7), float32], Tensor[(8, 840, 4), int16]) {
  %47 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 1, 1), uint32] */, dtype="uint32") /* ty=Tensor[(8, 1, 1), uint32] */;
  %48 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 16, 3), uint32] */, dtype="uint32") /* ty=Tensor[(8, 16, 3), uint32] */;
  %49 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 1, 1), uint32] */, dtype="int64") /* ty=Tensor[(8, 1, 1), int64] */;
  %50 = cast(%var_5724, dtype="int64") /* ty=Tensor[(8, 12, 10), int64] */;
  %51 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 16, 3), uint32] */, dtype="int32") /* ty=Tensor[(8, 16, 3), int32] */;
  %52 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 1, 1), uint32] */, dtype="int32") /* ty=Tensor[(8, 1, 1), int32] */;
  %53 = cast(%var_5732, dtype="float32") /* ty=Tensor[(420), float32] */;
  %54 = reshape(%53, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float32] */;
  %55 = cast(%var_5732, dtype="float32") /* ty=Tensor[(420), float32] */;
  %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(840, 4), float32] */, dtype="float32") /* ty=Tensor[(840, 4), float32] */;
  %57 = cast(%var_5732, dtype="float64") /* ty=Tensor[(420), float64] */;
  %58 = reshape(%55, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float32] */;
  %59 = reshape(%56, newshape=[840, 4]) /* ty=Tensor[(840, 4), float32] */;
  %60 = reshape(%57, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %61 = @func_4969(%58, %59, %60) /* ty=(Tensor[(420, 8), float64], Tensor[(840, 4), float32], Tensor[(4, 15, 7), float64]) */;
  %62 = %61.1;
  %63 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 1, 1), uint32] */, dtype="int16") /* ty=Tensor[(8, 1, 1), int16] */;
  %64 = cast(%62, dtype="int16") /* ty=Tensor[(840, 4), int16] */;
  %65 = bitwise_and(%47, %48) /* ty=Tensor[(8, 16, 3), uint32] */;
  %66 = logical_xor(%49, %50) /* ty=Tensor[(8, 12, 10), int64] */;
  %67 = bitwise_or(%51, %52) /* ty=Tensor[(8, 16, 3), int32] */;
  %68 = @func_1266(%54) /* ty=Tensor[(4, 15, 7), float32] */;
  %69 = add(%63, %64) /* ty=Tensor[(8, 840, 4), int16] */;
  (%65, %66, %67, %var_5732, meta[relay.Constant][3] /* ty=Tensor[(840, 4), float32] */, %68, %69)
}

def @func_4415(%var_4399: Tensor[(420, 7), bool]) -> Tensor[(420, 7), uint64] {
  %70 = @func_4350() /* ty=Tensor[(420, 7), bool] */;
  %71 = cast(%var_4399, dtype="uint64") /* ty=Tensor[(420, 7), uint64] */;
  %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(2), int32] */;
  %73 = cast(%70, dtype="uint64") /* ty=Tensor[(420, 7), uint64] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  logical_xor(%73, %74) /* ty=Tensor[(420, 7), uint64] */
}

def @func_3711() -> (Tensor[(420, 1), float32],) {
  @func_3709() /* ty=(Tensor[(420, 1), float32],) */
}

def @func_4035(%var_4015: Tensor[(1, 9, 16), float32], %var_4024: Tensor[(864), int16], %var_4025: Tensor[(1, 6720), float32]) -> (Tensor[(16, 9, 6), bool], Tensor[(864), int16], Tensor[(1, 6720), float32], Tensor[(1, 9, 16), float64]) {
  %75 = cast(%var_4024, dtype="int16") /* ty=Tensor[(864), int16] */;
  %76 = cast(%var_4025, dtype="float32") /* ty=Tensor[(1, 6720), float32] */;
  %77 = reshape(%75, newshape=[864]) /* ty=Tensor[(864), int16] */;
  %78 = reshape(%76, newshape=[420, 16]) /* ty=Tensor[(420, 16), float32] */;
  %79 = @func_3867(%77, %78) /* ty=(Tensor[(16, 9, 6), bool], Tensor[(864), int16], Tensor[(420, 16), float64]) */;
  %80 = cast(%var_4015, dtype="float32") /* ty=Tensor[(1, 9, 16), float32] */;
  %81 = cos(%80) /* ty=Tensor[(1, 9, 16), float32] */;
  %82 = cast(%81, dtype="float64") /* ty=Tensor[(1, 9, 16), float64] */;
  %83 = %79.0;
  %84 = log(%82) /* ty=Tensor[(1, 9, 16), float64] */;
  (%83, %var_4024, %var_4025, %84)
}

def @func_1144(%var_1139: Tensor[(4, 11), float64]) -> Tensor[(4, 11), float64] {
  %85 = cast(%var_1139, dtype="float64") /* ty=Tensor[(4, 11), float64] */;
  sqrt(%85) /* ty=Tensor[(4, 11), float64] */
}

def @func_3180(%var_3178: Tensor[(4, 9, 14), float32]) -> (Tensor[(4, 9, 14), float32],) {
  @func_3177(%var_3178) /* ty=(Tensor[(4, 9, 14), float32],) */
}

def @func_4077() -> Tensor[(420, 1), float32] {
  @func_4075() /* ty=Tensor[(420, 1), float32] */
}

def @func_4602(%var_4600: Tensor[(2160), float64], %var_4601: Tensor[(1260), int64]) -> (Tensor[(13, 3, 12), float64], int32, Tensor[(1920), uint16], Tensor[(8, 11, 11), bool], Tensor[(2160), float64], Tensor[(1260), int64], int32, Tensor[(15, 10, 8), uint16]) {
  @func_4598(%var_4600, %var_4601) /* ty=(Tensor[(13, 3, 12), float64], int32, Tensor[(1920), uint16], Tensor[(8, 11, 11), bool], Tensor[(2160), float64], Tensor[(1260), int64], int32, Tensor[(15, 10, 8), uint16]) */
}

def @func_2039(%var_2037: Tensor[(16, 9, 6), int16], %var_2038: Tensor[(16, 9, 6), int16]) -> (Tensor[(16, 9, 6), bool],) {
  %91 = fn (%var_2026: Tensor[(16, 9, 6), int16], %var_2027: Tensor[(16, 9, 6), int16]) -> (Tensor[(16, 9, 6), bool],) {
    %86 = cast(%var_2027, dtype="bool") /* ty=Tensor[(16, 9, 6), bool] */;
    %87 = shape_of(%var_2026, dtype="int32") /* ty=Tensor[(3), int32] */;
    %88 = cast(%var_2026, dtype="bool") /* ty=Tensor[(16, 9, 6), bool] */;
    %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %90 = greater_equal(%88, %89) /* ty=Tensor[(16, 9, 6), bool] */;
    (%90,)
  };
  %91(%var_2037, %var_2038) /* ty=(Tensor[(16, 9, 6), bool],) */
}

def @func_987(%var_985: Tensor[(9, 15, 16), float64], %var_986: Tensor[(1260), int64]) -> (Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(15, 7, 12), bool], Tensor[(1260), int64], Tensor[(9, 15, 16), float64]) {
  %107 = fn (%var_947: Tensor[(9, 15, 16), float64], %var_962: Tensor[(1260), int64]) -> (Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(15, 7, 12), bool], Tensor[(1260), int64], Tensor[(9, 15, 16), float64]) {
    %92 = cast(meta[relay.Constant][4] /* ty=Tensor[(968), uint16] */, dtype="uint16") /* ty=Tensor[(968), uint16] */;
    %93 = reshape(%92, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), uint16] */;
    %94 = cast(%var_962, dtype="int64") /* ty=Tensor[(1260), int64] */;
    %95 = cast(%var_962, dtype="int64") /* ty=Tensor[(1260), int64] */;
    %96 = cast(meta[relay.Constant][4] /* ty=Tensor[(968), uint16] */, dtype="uint16") /* ty=Tensor[(968), uint16] */;
    %97 = reshape(%94, newshape=[15, 7, 12]) /* ty=Tensor[(15, 7, 12), int64] */;
    %98 = reshape(%95, newshape=[15, 7, 12]) /* ty=Tensor[(15, 7, 12), int64] */;
    %99 = reshape(%96, newshape=[968]) /* ty=Tensor[(968), uint16] */;
    %100 = @func_927(%97, %98, %99) /* ty=(Tensor[(15, 7, 12), bool], Tensor[(8, 11, 11), bool], Tensor[(968), uint16]) */;
    %101 = cast(%var_947, dtype="float64") /* ty=Tensor[(9, 15, 16), float64] */;
    %102 = rsqrt(%101) /* ty=Tensor[(9, 15, 16), float64] */;
    %103 = cast(%102, dtype="float64") /* ty=Tensor[(9, 15, 16), float64] */;
    %104 = @func_107(%93) /* ty=Tensor[(8, 11, 11), bool] */;
    %105 = %100.0;
    %106 = acos(%103) /* ty=Tensor[(9, 15, 16), float64] */;
    (%104, meta[relay.Constant][4] /* ty=Tensor[(968), uint16] */, %105, %var_962, %106)
  };
  %107(%var_985, %var_986) /* ty=(Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(15, 7, 12), bool], Tensor[(1260), int64], Tensor[(9, 15, 16), float64]) */
}

def @func_3572(%var_3570: Tensor[(6, 9, 3), bool], %var_3571: Tensor[(6, 9, 3), bool]) -> (Tensor[(6, 9, 3), bool],) {
  @func_3568(%var_3570, %var_3571) /* ty=(Tensor[(6, 9, 3), bool],) */
}

def @func_4627(%var_4614: Tensor[(420, 8), float32]) -> (Tensor[(420, 8), float64],) {
  %108 = @func_3347() /* ty=Tensor[(420, 1), float32] */;
  %109 = cast(%108, dtype="float64") /* ty=Tensor[(420, 1), float64] */;
  %110 = cast(%var_4614, dtype="float64") /* ty=Tensor[(420, 8), float64] */;
  %111 = power(%109, %110) /* ty=Tensor[(420, 8), float64] */;
  (%111,)
}

def @func_4651(%var_4641: Tensor[(3, 6, 7), float64], %var_4644: Tensor[(3, 6, 7), float64]) -> (Tensor[(3, 6, 7), bool],) {
  %112 = cast(%var_4641, dtype="float64") /* ty=Tensor[(3, 6, 7), float64] */;
  %113 = exp(%112) /* ty=Tensor[(3, 6, 7), float64] */;
  %114 = cast(%var_4644, dtype="bool") /* ty=Tensor[(3, 6, 7), bool] */;
  %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%113, dtype="bool") /* ty=Tensor[(3, 6, 7), bool] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %118 = not_equal(%116, %117) /* ty=Tensor[(3, 6, 7), bool] */;
  (%118,)
}

def @func_3871(%var_3869: Tensor[(864), int16], %var_3870: Tensor[(420, 16), float32]) -> (Tensor[(16, 9, 6), bool], Tensor[(864), int16], Tensor[(420, 16), float64]) {
  @func_3867(%var_3869, %var_3870) /* ty=(Tensor[(16, 9, 6), bool], Tensor[(864), int16], Tensor[(420, 16), float64]) */
}

def @func_5248() -> Tensor[(13, 3, 12), float64] {
  @func_5246() /* ty=Tensor[(13, 3, 12), float64] */
}

def @func_2416(%var_2414: Tensor[(14, 5, 4), float32]) -> (Tensor[(14, 5, 4), float32], Tensor[(14, 5, 4), bool]) {
  @func_2413(%var_2414) /* ty=(Tensor[(14, 5, 4), float32], Tensor[(14, 5, 4), bool]) */
}

def @func_5258() -> (Tensor[(13, 3, 12), float64],) {
  %121 = fn () -> (Tensor[(13, 3, 12), float64],) {
    %119 = @func_4907() /* ty=(Tensor[(13, 3, 12), float64],) */;
    %120 = %119.0;
    (%120,)
  };
  %121() /* ty=(Tensor[(13, 3, 12), float64],) */
}

def @func_3298(%var_3296: Tensor[(2464), float64], %var_3297: Tensor[(864), int16]) -> (Tensor[(4, 15, 7), float32], Tensor[(4, 4, 4), uint64], Tensor[(2464), float64], uint64, Tensor[(16, 9, 6), bool], Tensor[(864), int16], Tensor[(11, 16, 14), float64]) {
  @func_3294(%var_3296, %var_3297) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 4, 4), uint64], Tensor[(2464), float64], uint64, Tensor[(16, 9, 6), bool], Tensor[(864), int16], Tensor[(11, 16, 14), float64]) */
}

def @func_5497() -> (Tensor[(420, 11), int64],) {
  %126 = fn () -> (Tensor[(420, 11), int64],) {
    %122 = @func_4075() /* ty=Tensor[(420, 1), float32] */;
    %123 = cast(%122, dtype="int64") /* ty=Tensor[(420, 1), int64] */;
    %124 = cast(meta[relay.Constant][5] /* ty=Tensor[(420, 11), float32] */, dtype="int64") /* ty=Tensor[(420, 11), int64] */;
    %125 = logical_xor(%123, %124) /* ty=Tensor[(420, 11), int64] */;
    (%125,)
  };
  %126() /* ty=(Tensor[(420, 11), int64],) */
}

def @func_5687(%var_5686: Tensor[(4, 15, 7), float32]) -> (Tensor[(4, 15, 7), bool],) {
  %136 = fn (%var_5671: Tensor[(4, 15, 7), float32]) -> (Tensor[(4, 15, 7), bool],) {
    %127 = @func_3248() /* ty=(Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) */;
    %128 = %127.1;
    %129 = cast(%128, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
    %130 = rsqrt(%129) /* ty=Tensor[(4, 15, 7), float32] */;
    %131 = cast(%var_5671, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
    %132 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
    %133 = cast(%130, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
    %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %135 = logical_and(%133, %134) /* ty=Tensor[(4, 15, 7), bool] */;
    (%135,)
  };
  %136(%var_5686) /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_4351() -> Tensor[(420, 7), bool] {
  %141 = fn () -> Tensor[(420, 7), bool] {
    %137 = @func_3709() /* ty=(Tensor[(420, 1), float32],) */;
    %138 = %137.0;
    %139 = cast(%138, dtype="bool") /* ty=Tensor[(420, 1), bool] */;
    %140 = cast(meta[relay.Constant][6] /* ty=Tensor[(420, 7), float32] */, dtype="bool") /* ty=Tensor[(420, 7), bool] */;
    less_equal(%139, %140) /* ty=Tensor[(420, 7), bool] */
  };
  %141() /* ty=Tensor[(420, 7), bool] */
}

def @func_4477(%var_4475: Tensor[(546), int8], %var_4476: Tensor[(6720), float32]) -> (Tensor[(14, 6, 4), float64], Tensor[(6, 13, 7), bool], Tensor[(546), int8], Tensor[(420, 16), float32], Tensor[(6720), float32]) {
  %154 = fn (%var_4463: Tensor[(546), int8], %var_4470: Tensor[(6720), float32]) -> (Tensor[(14, 6, 4), float64], Tensor[(6, 13, 7), bool], Tensor[(546), int8], Tensor[(420, 16), float32], Tensor[(6720), float32]) {
    %142 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 6, 4), float64] */, dtype="float64") /* ty=Tensor[(14, 6, 4), float64] */;
    %143 = cast(%var_4463, dtype="int8") /* ty=Tensor[(546), int8] */;
    %144 = cast(%var_4463, dtype="int8") /* ty=Tensor[(546), int8] */;
    %145 = reshape(%143, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int8] */;
    %146 = reshape(%144, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int8] */;
    %147 = @func_363(%145, %146) /* ty=(Tensor[(6, 13, 7), bool],) */;
    %148 = cast(%var_4470, dtype="float32") /* ty=Tensor[(6720), float32] */;
    %149 = reshape(%148, newshape=[420, 16]) /* ty=Tensor[(420, 16), float32] */;
    %150 = @func_3916(%149) /* ty=(Tensor[(420, 16), float32],) */;
    %151 = cos(%142) /* ty=Tensor[(14, 6, 4), float64] */;
    %152 = %147.0;
    %153 = %150.0;
    (%151, %152, %var_4463, %153, %var_4470)
  };
  %154(%var_4475, %var_4476) /* ty=(Tensor[(14, 6, 4), float64], Tensor[(6, 13, 7), bool], Tensor[(546), int8], Tensor[(420, 16), float32], Tensor[(6720), float32]) */
}

def @func_3916(%var_3909: Tensor[(420, 16), float32]) -> (Tensor[(420, 16), float32],) {
  %155 = @func_3692() /* ty=(Tensor[(420, 1), float32], Tensor[(3, 15, 4), int64]) */;
  %156 = %155.0;
  %157 = cast(%156, dtype="float32") /* ty=Tensor[(420, 1), float32] */;
  %158 = cast(%var_3909, dtype="float32") /* ty=Tensor[(420, 16), float32] */;
  %159 = floor_divide(%157, %158) /* ty=Tensor[(420, 16), float32] */;
  (%159,)
}

def @func_3655(%var_3654: Tensor[(1920), uint16]) -> (int32, Tensor[(16, 10, 12), float32], Tensor[(1920), uint16]) {
  %168 = fn (%var_3641: Tensor[(1920), uint16]) -> (int32, Tensor[(16, 10, 12), float32], Tensor[(1920), uint16]) {
    %160 = @func_3320() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(1, 10, 2), bool], int32, Tensor[(5, 4), int32]) */;
    %161 = %160.2;
    %162 = cast(%161, dtype="uint16") /* ty=uint16 */;
    %163 = cast(%var_3641, dtype="uint16") /* ty=Tensor[(1920), uint16] */;
    %164 = reshape(%162, newshape=[]) /* ty=uint16 */;
    %165 = reshape(%163, newshape=[16, 10, 12]) /* ty=Tensor[(16, 10, 12), uint16] */;
    %166 = @func_2371(%164, %165) /* ty=(Tensor[(16, 10, 12), uint16], Tensor[(16, 10, 12), float32]) */;
    %167 = %166.1;
    (%161, %167, %var_3641)
  };
  %168(%var_3654) /* ty=(int32, Tensor[(16, 10, 12), float32], Tensor[(1920), uint16]) */
}

def @func_4540(%var_4538: Tensor[(14, 11, 15), int16], %var_4539: Tensor[(14, 11, 15), int16]) -> (Tensor[(14, 11, 15), int16], Tensor[(12, 7, 6), float64], Tensor[(504), float64]) {
  %177 = fn (%var_4517: Tensor[(14, 11, 15), int16], %var_4518: Tensor[(14, 11, 15), int16]) -> (Tensor[(14, 11, 15), int16], Tensor[(12, 7, 6), float64], Tensor[(504), float64]) {
    %169 = cast(%var_4518, dtype="int16") /* ty=Tensor[(14, 11, 15), int16] */;
    %170 = shape_of(%var_4517, dtype="int32") /* ty=Tensor[(3), int32] */;
    %171 = cast(%var_4517, dtype="int16") /* ty=Tensor[(14, 11, 15), int16] */;
    %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %173 = cast(meta[relay.Constant][8] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
    %174 = reshape(%173, newshape=[12, 7, 6]) /* ty=Tensor[(12, 7, 6), float64] */;
    %175 = add(%171, %172) /* ty=Tensor[(14, 11, 15), int16] */;
    %176 = @func_2091(%174) /* ty=Tensor[(12, 7, 6), float64] */;
    (%175, %176, meta[relay.Constant][8] /* ty=Tensor[(504), float64] */)
  };
  %177(%var_4538, %var_4539) /* ty=(Tensor[(14, 11, 15), int16], Tensor[(12, 7, 6), float64], Tensor[(504), float64]) */
}

def @func_366(%var_364: Tensor[(6, 13, 7), int8], %var_365: Tensor[(6, 13, 7), int8]) -> (Tensor[(6, 13, 7), bool],) {
  %183 = fn (%var_335: Tensor[(6, 13, 7), int8], %var_336: Tensor[(6, 13, 7), int8]) -> (Tensor[(6, 13, 7), bool],) {
    %178 = cast(%var_336, dtype="bool") /* ty=Tensor[(6, 13, 7), bool] */;
    %179 = shape_of(%var_335, dtype="int32") /* ty=Tensor[(3), int32] */;
    %180 = cast(%var_335, dtype="bool") /* ty=Tensor[(6, 13, 7), bool] */;
    %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %182 = less_equal(%180, %181) /* ty=Tensor[(6, 13, 7), bool] */;
    (%182,)
  };
  %183(%var_364, %var_365) /* ty=(Tensor[(6, 13, 7), bool],) */
}

def @func_1147(%var_1145: Tensor[(4, 11), float64]) -> Tensor[(4, 11), float64] {
  @func_1144(%var_1145) /* ty=Tensor[(4, 11), float64] */
}

def @func_927(%var_915: Tensor[(15, 7, 12), int64], %var_916: Tensor[(15, 7, 12), int64], %var_924: Tensor[(968), uint16]) -> (Tensor[(15, 7, 12), bool], Tensor[(8, 11, 11), bool], Tensor[(968), uint16]) {
  %184 = cast(%var_916, dtype="bool") /* ty=Tensor[(15, 7, 12), bool] */;
  %185 = shape_of(%var_915, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%var_915, dtype="bool") /* ty=Tensor[(15, 7, 12), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %188 = cast(%var_924, dtype="uint16") /* ty=Tensor[(968), uint16] */;
  %189 = reshape(%188, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), uint16] */;
  %190 = less_equal(%186, %187) /* ty=Tensor[(15, 7, 12), bool] */;
  %191 = @func_107(%189) /* ty=Tensor[(8, 11, 11), bool] */;
  (%190, %191, %var_924)
}

def @func_661(%var_655: int8, %var_656: Tensor[(13, 9, 2), int8], %var_657: Tensor[(770), float32], %var_658: Tensor[(20, 12), int32], %var_659: Tensor[(8, 10, 2), float64], %var_660: Tensor[(8, 10, 2), int16]) -> (Tensor[(13, 9, 2), bool], Tensor[(770), float32], Tensor[(1, 10, 2), bool], Tensor[(20, 12), float32], Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(8, 10, 2), bool], Tensor[(8, 10, 2), bool], Tensor[(8, 10, 2), uint64]) {
  @func_653(%var_655, %var_656, %var_657, %var_658, %var_659, %var_660) /* ty=(Tensor[(13, 9, 2), bool], Tensor[(770), float32], Tensor[(1, 10, 2), bool], Tensor[(20, 12), float32], Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(8, 10, 2), bool], Tensor[(8, 10, 2), bool], Tensor[(8, 10, 2), uint64]) */
}

def @func_653(%var_515: int8, %var_516: Tensor[(13, 9, 2), int8], %var_521: Tensor[(770), float32], %var_537: Tensor[(20, 12), int32], %var_558: Tensor[(8, 10, 2), float64], %var_608: Tensor[(8, 10, 2), int16]) -> (Tensor[(13, 9, 2), bool], Tensor[(770), float32], Tensor[(1, 10, 2), bool], Tensor[(20, 12), float32], Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(8, 10, 2), bool], Tensor[(8, 10, 2), bool], Tensor[(8, 10, 2), uint64]) {
  %192 = cast(%var_515, dtype="bool") /* ty=bool */;
  %193 = cast(%var_516, dtype="bool") /* ty=Tensor[(13, 9, 2), bool] */;
  %194 = cast(%var_515, dtype="int32") /* ty=int32 */;
  %195 = cast(%var_521, dtype="float32") /* ty=Tensor[(770), float32] */;
  %196 = cast(%var_521, dtype="float32") /* ty=Tensor[(770), float32] */;
  %197 = cast(%var_521, dtype="float32") /* ty=Tensor[(770), float32] */;
  %198 = cast(%var_515, dtype="int32") /* ty=int32 */;
  %199 = cast(meta[relay.Constant][9] /* ty=Tensor[(20, 1), int32] */, dtype="int32") /* ty=Tensor[(20, 1), int32] */;
  %200 = reshape(%195, newshape=[11, 10, 7]) /* ty=Tensor[(11, 10, 7), float32] */;
  %201 = reshape(%196, newshape=[11, 10, 7]) /* ty=Tensor[(11, 10, 7), float32] */;
  %202 = reshape(%197, newshape=[11, 10, 7]) /* ty=Tensor[(11, 10, 7), float32] */;
  %203 = reshape(%198, newshape=[]) /* ty=int32 */;
  %204 = reshape(%199, newshape=[20]) /* ty=Tensor[(20), int32] */;
  %205 = @func_466(%200, %201, %202, %203, %204) /* ty=(Tensor[(11, 10, 7), int64], Tensor[(11, 10, 7), int64], Tensor[(1, 10, 2), bool], int32, Tensor[(20), int32], Tensor[(1, 10, 2), bool], Tensor[(11, 10, 7), bool]) */;
  %206 = %205.5;
  %207 = cast(%206, dtype="int32") /* ty=Tensor[(1, 10, 2), int32] */;
  %208 = reshape(%194, newshape=[]) /* ty=int32 */;
  %209 = reshape(%207, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), int32] */;
  %210 = cast(meta[relay.Constant][9] /* ty=Tensor[(20, 1), int32] */, dtype="float32") /* ty=Tensor[(20, 1), float32] */;
  %211 = cast(%var_537, dtype="float32") /* ty=Tensor[(20, 12), float32] */;
  %212 = cast(meta[relay.Constant][10] /* ty=Tensor[(968), uint16] */, dtype="uint16") /* ty=Tensor[(968), uint16] */;
  %213 = reshape(%212, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), uint16] */;
  %214 = cast(meta[relay.Constant][9] /* ty=Tensor[(20, 1), int32] */, dtype="int64") /* ty=Tensor[(20, 1), int64] */;
  %215 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%206, dtype="int64") /* ty=Tensor[(1, 10, 2), int64] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %218 = left_shift(%216, %217) /* ty=Tensor[(?, 10, 2), int64] */;
  %219 = cast(%218, dtype="float64") /* ty=Tensor[(?, 10, 2), float64] */;
  %220 = sigmoid(%219) /* ty=Tensor[(?, 10, 2), float64] */;
  %221 = cast(%220, dtype="float32") /* ty=Tensor[(?, 10, 2), float32] */;
  %222 = cast(%var_558, dtype="float32") /* ty=Tensor[(8, 10, 2), float32] */;
  %223 = mod(%221, %222) /* ty=Tensor[(8, 10, 2), float32] */;
  %224 = cast(%223, dtype="bool") /* ty=Tensor[(8, 10, 2), bool] */;
  %225 = cast(%206, dtype="bool") /* ty=Tensor[(1, 10, 2), bool] */;
  %226 = cast(%223, dtype="float64") /* ty=Tensor[(8, 10, 2), float64] */;
  %227 = sin(%226) /* ty=Tensor[(8, 10, 2), float64] */;
  %228 = cast(%227, dtype="int16") /* ty=Tensor[(8, 10, 2), int16] */;
  %229 = cast(%206, dtype="int16") /* ty=Tensor[(1, 10, 2), int16] */;
  %230 = subtract(%228, %229) /* ty=Tensor[(8, 10, 2), int16] */;
  %231 = cast(%var_608, dtype="bool") /* ty=Tensor[(8, 10, 2), bool] */;
  %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%230, dtype="bool") /* ty=Tensor[(8, 10, 2), bool] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %235 = logical_or(%233, %234) /* ty=Tensor[(8, 10, 2), bool] */;
  %236 = cast(%230, dtype="int16") /* ty=Tensor[(8, 10, 2), int16] */;
  %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%235, dtype="int16") /* ty=Tensor[(8, 10, 2), int16] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %240 = left_shift(%238, %239) /* ty=Tensor[(8, 10, 2), int16] */;
  %241 = cast(%230, dtype="bool") /* ty=Tensor[(8, 10, 2), bool] */;
  %242 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%240, dtype="bool") /* ty=Tensor[(8, 10, 2), bool] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %245 = cast(%220, dtype="uint64") /* ty=Tensor[(?, 10, 2), uint64] */;
  %246 = cast(%240, dtype="uint64") /* ty=Tensor[(8, 10, 2), uint64] */;
  %247 = not_equal(%192, %193) /* ty=Tensor[(13, 9, 2), bool] */;
  %248 = @func_50(%208, %209) /* ty=Tensor[(1, 10, 2), bool] */;
  %249 = divide(%210, %211) /* ty=Tensor[(20, 12), float32] */;
  %250 = @func_107(%213) /* ty=Tensor[(8, 11, 11), bool] */;
  %251 = less(%224, %225) /* ty=Tensor[(8, 10, 2), bool] */;
  %252 = greater_equal(%243, %244) /* ty=Tensor[(8, 10, 2), bool] */;
  %253 = add(%245, %246) /* ty=Tensor[(8, 10, 2), uint64] */;
  (%247, %var_521, %248, %249, %250, meta[relay.Constant][10] /* ty=Tensor[(968), uint16] */, %251, %252, %253)
}

def @func_4655(%var_4653: Tensor[(3, 6, 7), float64], %var_4654: Tensor[(3, 6, 7), float64]) -> (Tensor[(3, 6, 7), bool],) {
  @func_4651(%var_4653, %var_4654) /* ty=(Tensor[(3, 6, 7), bool],) */
}

def @func_1269(%var_1267: Tensor[(4, 15, 7), float32]) -> Tensor[(4, 15, 7), float32] {
  @func_1266(%var_1267) /* ty=Tensor[(4, 15, 7), float32] */
}

def @func_2714(%var_2683: int8, %var_2686: Tensor[(8, 240), uint16]) -> (Tensor[(4, 11), float64], int8, Tensor[(16, 10, 12), uint16], Tensor[(8, 240), uint16], Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(15, 10, 8), uint16], Tensor[(1, 10, 2), bool], Tensor[(770), float32], Tensor[(20), int32]) {
  %254 = cast(%var_2683, dtype="int8") /* ty=int8 */;
  %255 = reshape(%254, newshape=[]) /* ty=int8 */;
  %256 = @func_1765(%255) /* ty=(Tensor[(6, 1, 10), int8], Tensor[(4, 11), float64], Tensor[(44), float64]) */;
  %257 = cast(%var_2683, dtype="uint16") /* ty=uint16 */;
  %258 = cast(%var_2686, dtype="uint16") /* ty=Tensor[(8, 240), uint16] */;
  %259 = reshape(%257, newshape=[]) /* ty=uint16 */;
  %260 = reshape(%258, newshape=[16, 10, 12]) /* ty=Tensor[(16, 10, 12), uint16] */;
  %261 = @func_2371(%259, %260) /* ty=(Tensor[(16, 10, 12), uint16], Tensor[(16, 10, 12), float32]) */;
  %262 = cast(meta[relay.Constant][11] /* ty=Tensor[(968), uint16] */, dtype="uint16") /* ty=Tensor[(968), uint16] */;
  %263 = reshape(%262, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), uint16] */;
  %264 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 10, 8), float32] */, dtype="float32") /* ty=Tensor[(15, 10, 8), float32] */;
  %265 = rsqrt(%264) /* ty=Tensor[(15, 10, 8), float32] */;
  %266 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 10, 8), float32] */, dtype="int32") /* ty=Tensor[(15, 10, 8), int32] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%265, dtype="int32") /* ty=Tensor[(15, 10, 8), int32] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %270 = add(%268, %269) /* ty=Tensor[(15, 10, 8), int32] */;
  %271 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 10, 8), float32] */, dtype="uint16") /* ty=Tensor[(15, 10, 8), uint16] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="uint16") /* ty=Tensor[(15, 10, 8), uint16] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %275 = cast(meta[relay.Constant][13] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %276 = cast(meta[relay.Constant][13] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %277 = cast(meta[relay.Constant][13] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %278 = cast(%var_2683, dtype="int32") /* ty=int32 */;
  %279 = cast(meta[relay.Constant][14] /* ty=Tensor[(20), int32] */, dtype="int32") /* ty=Tensor[(20), int32] */;
  %280 = reshape(%275, newshape=[11, 10, 7]) /* ty=Tensor[(11, 10, 7), float32] */;
  %281 = reshape(%276, newshape=[11, 10, 7]) /* ty=Tensor[(11, 10, 7), float32] */;
  %282 = reshape(%277, newshape=[11, 10, 7]) /* ty=Tensor[(11, 10, 7), float32] */;
  %283 = reshape(%278, newshape=[]) /* ty=int32 */;
  %284 = reshape(%279, newshape=[20]) /* ty=Tensor[(20), int32] */;
  %285 = @func_466(%280, %281, %282, %283, %284) /* ty=(Tensor[(11, 10, 7), int64], Tensor[(11, 10, 7), int64], Tensor[(1, 10, 2), bool], int32, Tensor[(20), int32], Tensor[(1, 10, 2), bool], Tensor[(11, 10, 7), bool]) */;
  %286 = %256.1;
  %287 = %261.0;
  %288 = @func_107(%263) /* ty=Tensor[(8, 11, 11), bool] */;
  %289 = maximum(%273, %274) /* ty=Tensor[(15, 10, 8), uint16] */;
  %290 = %285.5;
  (%286, %var_2683, %287, %var_2686, %288, meta[relay.Constant][11] /* ty=Tensor[(968), uint16] */, %289, %290, meta[relay.Constant][13] /* ty=Tensor[(770), float32] */, meta[relay.Constant][14] /* ty=Tensor[(20), int32] */)
}

def @func_5005(%var_5004: Tensor[(4, 15, 7), float32]) -> (Tensor[(4, 15, 7), int8], Tensor[(4, 15, 7), float64]) {
  %300 = fn (%var_4992: Tensor[(4, 15, 7), float32]) -> (Tensor[(4, 15, 7), int8], Tensor[(4, 15, 7), float64]) {
    %291 = @func_3320() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(1, 10, 2), bool], int32, Tensor[(5, 4), int32]) */;
    %292 = %291.0;
    %293 = cast(%var_4992, dtype="int8") /* ty=Tensor[(4, 15, 7), int8] */;
    %294 = shape_of(%292, dtype="int32") /* ty=Tensor[(3), int32] */;
    %295 = cast(%292, dtype="int8") /* ty=Tensor[(4, 15, 7), int8] */;
    %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %297 = cast(%var_4992, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
    %298 = bitwise_or(%295, %296) /* ty=Tensor[(4, 15, 7), int8] */;
    %299 = atanh(%297) /* ty=Tensor[(4, 15, 7), float64] */;
    (%298, %299)
  };
  %300(%var_5004) /* ty=(Tensor[(4, 15, 7), int8], Tensor[(4, 15, 7), float64]) */
}

def @func_3435() -> (Tensor[(5, 4), int32], Tensor[(16, 9, 6), bool]) {
  %314 = fn () -> (Tensor[(5, 4), int32], Tensor[(16, 9, 6), bool]) {
    %301 = @func_3320() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(1, 10, 2), bool], int32, Tensor[(5, 4), int32]) */;
    %302 = cast(meta[relay.Constant][15] /* ty=Tensor[(864), int16] */, dtype="int16") /* ty=Tensor[(864), int16] */;
    %303 = cast(meta[relay.Constant][15] /* ty=Tensor[(864), int16] */, dtype="int16") /* ty=Tensor[(864), int16] */;
    %304 = reshape(%302, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), int16] */;
    %305 = reshape(%303, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), int16] */;
    %306 = @func_2036(%304, %305) /* ty=(Tensor[(16, 9, 6), bool],) */;
    %307 = %306.0;
    %308 = cast(meta[relay.Constant][15] /* ty=Tensor[(864), int16] */, dtype="bool") /* ty=Tensor[(864), bool] */;
    %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
    %310 = cast(%307, dtype="bool") /* ty=Tensor[(16, 9, 6), bool] */;
    %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %312 = %301.3;
    %313 = logical_or(%310, %311) /* ty=Tensor[(16, 9, 6), bool] */;
    (%312, %313)
  };
  %314() /* ty=(Tensor[(5, 4), int32], Tensor[(16, 9, 6), bool]) */
}

def @func_5246() -> Tensor[(13, 3, 12), float64] {
  @func_3948() /* ty=Tensor[(13, 3, 12), float64] */
}

def @func_4002(%var_3986: Tensor[(16, 9, 6), bool]) -> (Tensor[(16, 9, 6), float64], Tensor[(420, 1), float32]) {
  %315 = @func_3434() /* ty=(Tensor[(5, 4), int32], Tensor[(16, 9, 6), bool]) */;
  %316 = %315.1;
  %317 = cast(%var_3986, dtype="float64") /* ty=Tensor[(16, 9, 6), float64] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%316, dtype="float64") /* ty=Tensor[(16, 9, 6), float64] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %321 = @func_3709() /* ty=(Tensor[(420, 1), float32],) */;
  %322 = floor_mod(%319, %320) /* ty=Tensor[(16, 9, 6), float64] */;
  %323 = %321.0;
  (%322, %323)
}

def @func_4075() -> Tensor[(420, 1), float32] {
  %324 = @func_3709() /* ty=(Tensor[(420, 1), float32],) */;
  %324.0
}

def @func_50(%var_8: int32, %var_9: Tensor[(1, 10, 2), int32]) -> Tensor[(1, 10, 2), bool] {
  %325 = cast(%var_8, dtype="bool") /* ty=bool */;
  %326 = cast(%var_9, dtype="bool") /* ty=Tensor[(1, 10, 2), bool] */;
  greater_equal(%325, %326) /* ty=Tensor[(1, 10, 2), bool] */
}

def @func_4724() -> (Tensor[(4, 15, 7), float32],) {
  %329 = fn () -> (Tensor[(4, 15, 7), float32],) {
    %327 = @func_3248() /* ty=(Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) */;
    %328 = %327.1;
    (%328,)
  };
  %329() /* ty=(Tensor[(4, 15, 7), float32],) */
}

def @func_2490(%var_2489: Tensor[(15, 3, 1), float32]) -> (Tensor[(15, 3, 1), float32],) {
  %332 = fn (%var_2483: Tensor[(15, 3, 1), float32]) -> (Tensor[(15, 3, 1), float32],) {
    %330 = cast(%var_2483, dtype="float32") /* ty=Tensor[(15, 3, 1), float32] */;
    %331 = asin(%330) /* ty=Tensor[(15, 3, 1), float32] */;
    (%331,)
  };
  %332(%var_2489) /* ty=(Tensor[(15, 3, 1), float32],) */
}

def @func_54(%var_52: int32, %var_53: Tensor[(1, 10, 2), int32]) -> Tensor[(1, 10, 2), bool] {
  @func_50(%var_52, %var_53) /* ty=Tensor[(1, 10, 2), bool] */
}

def @func_2091(%var_2087: Tensor[(12, 7, 6), float64]) -> Tensor[(12, 7, 6), float64] {
  %333 = cast(0.017149f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %334 = cast(%var_2087, dtype="float64") /* ty=Tensor[(12, 7, 6), float64] */;
  floor_divide(%333, %334) /* ty=Tensor[(12, 7, 6), float64] */
}

def @func_2094(%var_2092: Tensor[(12, 7, 6), float64]) -> Tensor[(12, 7, 6), float64] {
  @func_2091(%var_2092) /* ty=Tensor[(12, 7, 6), float64] */
}

def @func_3621(%var_3620: Tensor[(968), uint16]) -> (int32, Tensor[(8, 11, 11), bool], Tensor[(968), uint16]) {
  %340 = fn (%var_3599: Tensor[(968), uint16]) -> (int32, Tensor[(8, 11, 11), bool], Tensor[(968), uint16]) {
    %335 = @func_3320() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(1, 10, 2), bool], int32, Tensor[(5, 4), int32]) */;
    %336 = cast(%var_3599, dtype="uint16") /* ty=Tensor[(968), uint16] */;
    %337 = reshape(%336, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), uint16] */;
    %338 = %335.2;
    %339 = @func_107(%337) /* ty=Tensor[(8, 11, 11), bool] */;
    (%338, %339, %var_3599)
  };
  %340(%var_3620) /* ty=(int32, Tensor[(8, 11, 11), bool], Tensor[(968), uint16]) */
}

def @func_2298(%var_2296: Tensor[(3, 15, 4), float64]) -> Tensor[(3, 15, 4), float64] {
  @func_2295(%var_2296) /* ty=Tensor[(3, 15, 4), float64] */
}

def @func_5212(%var_5188: Tensor[(13, 3, 12), float64]) -> (Tensor[(13, 3, 12), int64], Tensor[(13, 3, 12), float32]) {
  %341 = @func_3948() /* ty=Tensor[(13, 3, 12), float64] */;
  %342 = cast(%var_5188, dtype="int64") /* ty=Tensor[(13, 3, 12), int64] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="int64") /* ty=Tensor[(13, 3, 12), int64] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %346 = cast(%var_5188, dtype="float32") /* ty=Tensor[(13, 3, 12), float32] */;
  %347 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%341, dtype="float32") /* ty=Tensor[(13, 3, 12), float32] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %350 = subtract(%344, %345) /* ty=Tensor[(13, 3, 12), int64] */;
  %351 = divide(%348, %349) /* ty=Tensor[(13, 3, 12), float32] */;
  (%350, %351)
}

def @func_5556() -> (Tensor[(15, 13, 12), bool],) {
  %352 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 13, 12), float64] */, dtype="float64") /* ty=Tensor[(15, 13, 12), float64] */;
  %353 = acos(%352) /* ty=Tensor[(15, 13, 12), float64] */;
  %354 = cast(%353, dtype="float64") /* ty=Tensor[(15, 13, 12), float64] */;
  %355 = asinh(%354) /* ty=Tensor[(15, 13, 12), float64] */;
  %356 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 13, 12), float64] */, dtype="bool") /* ty=Tensor[(15, 13, 12), bool] */;
  %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%355, dtype="bool") /* ty=Tensor[(15, 13, 12), bool] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %360 = logical_and(%358, %359) /* ty=Tensor[(15, 13, 12), bool] */;
  (%360,)
}

def @func_4281(%var_4278: Tensor[(450), bool], %var_4279: Tensor[(2464), float64], %var_4280: Tensor[(18, 9), bool]) -> (Tensor[(13, 3, 12), float64], Tensor[(?, 10, 9), int16], float64, Tensor[(450), bool], Tensor[(16, 9, 6), bool], Tensor[(2464), float64], Tensor[(864, 1), int16], Tensor[(6, 9, 3), bool], Tensor[(18, 9), float32], Tensor[(16, 9, 6), bool]) {
  %388 = fn (%var_4245: Tensor[(450), bool], %var_4250: Tensor[(2464), float64], %var_4265: Tensor[(18, 9), bool]) -> (Tensor[(13, 3, 12), float64], Tensor[(?, 10, 9), int16], float64, Tensor[(450), bool], Tensor[(16, 9, 6), bool], Tensor[(2464), float64], Tensor[(864, 1), int16], Tensor[(6, 9, 3), bool], Tensor[(18, 9), float32], Tensor[(16, 9, 6), bool]) {
    %361 = cast(-1.68955f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %362 = cast(%var_4245, dtype="bool") /* ty=Tensor[(450), bool] */;
    %363 = reshape(%361, newshape=[]) /* ty=float64 */;
    %364 = reshape(%362, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), bool] */;
    %365 = @func_3020(%363, %364) /* ty=(Tensor[(?, 10, 9), int16], Tensor[(5, 10, 9), float64], Tensor[(5, 10, 9), float32]) */;
    %366 = cast(%var_4250, dtype="float64") /* ty=Tensor[(2464), float64] */;
    %367 = cast(meta[relay.Constant][18] /* ty=Tensor[(864, 1), int16] */, dtype="int16") /* ty=Tensor[(864, 1), int16] */;
    %368 = reshape(%366, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
    %369 = reshape(%367, newshape=[864]) /* ty=Tensor[(864), int16] */;
    %370 = @func_3294(%368, %369) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 4, 4), uint64], Tensor[(2464), float64], uint64, Tensor[(16, 9, 6), bool], Tensor[(864), int16], Tensor[(11, 16, 14), float64]) */;
    %371 = cast(%var_4265, dtype="bool") /* ty=Tensor[(18, 9), bool] */;
    %372 = cast(%var_4265, dtype="bool") /* ty=Tensor[(18, 9), bool] */;
    %373 = reshape(%371, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), bool] */;
    %374 = reshape(%372, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), bool] */;
    %375 = @func_3568(%373, %374) /* ty=(Tensor[(6, 9, 3), bool],) */;
    %376 = cast(%var_4265, dtype="float32") /* ty=Tensor[(18, 9), float32] */;
    %377 = %370.4;
    %378 = cast(%377, dtype="int16") /* ty=Tensor[(16, 9, 6), int16] */;
    %379 = cast(%377, dtype="int16") /* ty=Tensor[(16, 9, 6), int16] */;
    %380 = reshape(%378, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), int16] */;
    %381 = reshape(%379, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), int16] */;
    %382 = @func_2036(%380, %381) /* ty=(Tensor[(16, 9, 6), bool],) */;
    %383 = @func_3948() /* ty=Tensor[(13, 3, 12), float64] */;
    %384 = %365.0;
    %385 = %375.0;
    %386 = sinh(%376) /* ty=Tensor[(18, 9), float32] */;
    %387 = %382.0;
    (%383, %384, -1.68955f64 /* ty=float64 */, %var_4245, %377, %var_4250, meta[relay.Constant][18] /* ty=Tensor[(864, 1), int16] */, %385, %386, %387)
  };
  %388(%var_4278, %var_4279, %var_4280) /* ty=(Tensor[(13, 3, 12), float64], Tensor[(?, 10, 9), int16], float64, Tensor[(450), bool], Tensor[(16, 9, 6), bool], Tensor[(2464), float64], Tensor[(864, 1), int16], Tensor[(6, 9, 3), bool], Tensor[(18, 9), float32], Tensor[(16, 9, 6), bool]) */
}

def @func_2750(%var_2735: Tensor[(13, 10, 3), float64]) -> (Tensor[(13, 10, 3), float64], Tensor[(14, 3, 2), float32], Tensor[(84), float32]) {
  %389 = cast(%var_2735, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %390 = exp(%389) /* ty=Tensor[(13, 10, 3), float64] */;
  %391 = cast(%390, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %392 = cast(meta[relay.Constant][19] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %393 = reshape(%392, newshape=[14, 3, 2]) /* ty=Tensor[(14, 3, 2), float32] */;
  %394 = acosh(%391) /* ty=Tensor[(13, 10, 3), float64] */;
  %395 = @func_1960(%393) /* ty=Tensor[(14, 3, 2), float32] */;
  (%394, %395, meta[relay.Constant][19] /* ty=Tensor[(84), float32] */)
}

def @func_4969(%var_4966: Tensor[(4, 15, 7), float32], %var_4967: Tensor[(840, 4), float32], %var_4968: Tensor[(4, 15, 7), float64]) -> (Tensor[(420, 8), float64], Tensor[(840, 4), float32], Tensor[(4, 15, 7), float64]) {
  @func_4964(%var_4966, %var_4967, %var_4968) /* ty=(Tensor[(420, 8), float64], Tensor[(840, 4), float32], Tensor[(4, 15, 7), float64]) */
}

def @func_3321() -> (Tensor[(4, 15, 7), float32], Tensor[(1, 10, 2), bool], int32, Tensor[(5, 4), int32]) {
  %403 = fn () -> (Tensor[(4, 15, 7), float32], Tensor[(1, 10, 2), bool], int32, Tensor[(5, 4), int32]) {
    %396 = @func_3248() /* ty=(Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) */;
    %397 = cast(3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %398 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 4), int32] */, dtype="int32") /* ty=Tensor[(5, 4), int32] */;
    %399 = reshape(%397, newshape=[]) /* ty=int32 */;
    %400 = reshape(%398, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), int32] */;
    %401 = %396.1;
    %402 = @func_50(%399, %400) /* ty=Tensor[(1, 10, 2), bool] */;
    (%401, %402, 3 /* ty=int32 */, meta[relay.Constant][20] /* ty=Tensor[(5, 4), int32] */)
  };
  %403() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(1, 10, 2), bool], int32, Tensor[(5, 4), int32]) */
}

def @func_3249() -> (Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) {
  %412 = fn () -> (Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) {
    %404 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 3, 12), int32] */, dtype="int32") /* ty=Tensor[(13, 3, 12), int32] */;
    %405 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(13, 3, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %406 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 3, 12), int32] */, dtype="int32") /* ty=Tensor[(13, 3, 12), int32] */;
    %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %408 = cast(meta[relay.Constant][23] /* ty=Tensor[(420, 1), float32] */, dtype="float32") /* ty=Tensor[(420, 1), float32] */;
    %409 = reshape(%408, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float32] */;
    %410 = maximum(%406, %407) /* ty=Tensor[(13, 3, 12), int32] */;
    %411 = @func_1266(%409) /* ty=Tensor[(4, 15, 7), float32] */;
    (%410, %411, meta[relay.Constant][23] /* ty=Tensor[(420, 1), float32] */)
  };
  %412() /* ty=(Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) */
}

def @func_3023(%var_3021: float64, %var_3022: Tensor[(5, 10, 9), bool]) -> (Tensor[(?, 10, 9), int16], Tensor[(5, 10, 9), float64], Tensor[(5, 10, 9), float32]) {
  %437 = fn (%var_2958: float64, %var_3004: Tensor[(5, 10, 9), bool]) -> (Tensor[(?, 10, 9), int16], Tensor[(5, 10, 9), float64], Tensor[(5, 10, 9), float32]) {
    %413 = cast(%var_2958, dtype="float64") /* ty=float64 */;
    %414 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(1, 10, 9), float64] */;
    %415 = floor_mod(%413, %414) /* ty=Tensor[(1, 10, 9), float64] */;
    %416 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 10, 9), float64] */, dtype="int8") /* ty=Tensor[(1, 10, 9), int8] */;
    %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
    %418 = cast(%415, dtype="int8") /* ty=Tensor[(1, 10, 9), int8] */;
    %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %420 = bitwise_and(%418, %419) /* ty=Tensor[(?, 10, 9), int8] */;
    %421 = cast(%420, dtype="int16") /* ty=Tensor[(?, 10, 9), int16] */;
    %422 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(1, 10, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %423 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 10, 9), float64] */, dtype="int16") /* ty=Tensor[(1, 10, 9), int16] */;
    %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %425 = cast(%415, dtype="bool") /* ty=Tensor[(1, 10, 9), bool] */;
    %426 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
    %427 = cast(%420, dtype="bool") /* ty=Tensor[(?, 10, 9), bool] */;
    %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %429 = not_equal(%427, %428) /* ty=Tensor[(?, 10, 9), bool] */;
    %430 = cast(%429, dtype="float64") /* ty=Tensor[(?, 10, 9), float64] */;
    %431 = cast(%var_3004, dtype="float64") /* ty=Tensor[(5, 10, 9), float64] */;
    %432 = cast(%var_3004, dtype="float32") /* ty=Tensor[(5, 10, 9), float32] */;
    %433 = cast(%429, dtype="float32") /* ty=Tensor[(?, 10, 9), float32] */;
    %434 = logical_xor(%423, %424) /* ty=Tensor[(?, 10, 9), int16] */;
    %435 = floor_divide(%430, %431) /* ty=Tensor[(5, 10, 9), float64] */;
    %436 = mod(%432, %433) /* ty=Tensor[(5, 10, 9), float32] */;
    (%434, %435, %436)
  };
  %437(%var_3021, %var_3022) /* ty=(Tensor[(?, 10, 9), int16], Tensor[(5, 10, 9), float64], Tensor[(5, 10, 9), float32]) */
}

def @func_932(%var_929: Tensor[(15, 7, 12), int64], %var_930: Tensor[(15, 7, 12), int64], %var_931: Tensor[(968), uint16]) -> (Tensor[(15, 7, 12), bool], Tensor[(8, 11, 11), bool], Tensor[(968), uint16]) {
  @func_927(%var_929, %var_930, %var_931) /* ty=(Tensor[(15, 7, 12), bool], Tensor[(8, 11, 11), bool], Tensor[(968), uint16]) */
}

def @func_4908() -> (Tensor[(13, 3, 12), float64],) {
  %439 = fn () -> (Tensor[(13, 3, 12), float64],) {
    %438 = @func_3948() /* ty=Tensor[(13, 3, 12), float64] */;
    (%438,)
  };
  %439() /* ty=(Tensor[(13, 3, 12), float64],) */
}

def @func_1767(%var_1766: int8) -> (Tensor[(6, 1, 10), int8], Tensor[(4, 11), float64], Tensor[(44), float64]) {
  %446 = fn (%var_1752: int8) -> (Tensor[(6, 1, 10), int8], Tensor[(4, 11), float64], Tensor[(44), float64]) {
    %440 = cast(%var_1752, dtype="int8") /* ty=int8 */;
    %441 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 1, 10), int8] */, dtype="int8") /* ty=Tensor[(6, 1, 10), int8] */;
    %442 = cast(meta[relay.Constant][26] /* ty=Tensor[(44), float64] */, dtype="float64") /* ty=Tensor[(44), float64] */;
    %443 = reshape(%442, newshape=[4, 11]) /* ty=Tensor[(4, 11), float64] */;
    %444 = bitwise_or(%440, %441) /* ty=Tensor[(6, 1, 10), int8] */;
    %445 = @func_1144(%443) /* ty=Tensor[(4, 11), float64] */;
    (%444, %445, meta[relay.Constant][26] /* ty=Tensor[(44), float64] */)
  };
  %446(%var_1766) /* ty=(Tensor[(6, 1, 10), int8], Tensor[(4, 11), float64], Tensor[(44), float64]) */
}

def @func_3950() -> Tensor[(13, 3, 12), float64] {
  @func_3948() /* ty=Tensor[(13, 3, 12), float64] */
}

def @func_109(%var_108: Tensor[(8, 11, 11), uint16]) -> Tensor[(8, 11, 11), bool] {
  %451 = fn (%var_101: Tensor[(8, 11, 11), uint16]) -> Tensor[(8, 11, 11), bool] {
    %447 = cast(%var_101, dtype="bool") /* ty=Tensor[(8, 11, 11), bool] */;
    %448 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(8, 11, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %449 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 11, 11), uint16] */, dtype="bool") /* ty=Tensor[(8, 11, 11), bool] */;
    %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%449, %450) /* ty=Tensor[(8, 11, 11), bool] */
  };
  %451(%var_108) /* ty=Tensor[(8, 11, 11), bool] */
}

def @func_3177(%var_3169: Tensor[(4, 9, 14), float32]) -> (Tensor[(4, 9, 14), float32],) {
  %452 = cast(2.96872f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %453 = cast(%var_3169, dtype="float32") /* ty=Tensor[(4, 9, 14), float32] */;
  %454 = floor_divide(%452, %453) /* ty=Tensor[(4, 9, 14), float32] */;
  (%454,)
}

def @func_3568(%var_3563: Tensor[(6, 9, 3), bool], %var_3564: Tensor[(6, 9, 3), bool]) -> (Tensor[(6, 9, 3), bool],) {
  %455 = cast(%var_3564, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %456 = shape_of(%var_3563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%var_3563, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %459 = logical_and(%457, %458) /* ty=Tensor[(6, 9, 3), bool] */;
  (%459,)
}

def @func_4754() -> (Tensor[(420, 1), float32], Tensor[(968), uint16], Tensor[(2160), float64], Tensor[(90, 14), int64], Tensor[(14, 240), float32], Tensor[(420, 8), float32]) {
  %474 = fn () -> (Tensor[(420, 1), float32], Tensor[(968), uint16], Tensor[(2160), float64], Tensor[(90, 14), int64], Tensor[(14, 240), float32], Tensor[(420, 8), float32]) {
    %460 = @func_3709() /* ty=(Tensor[(420, 1), float32],) */;
    %461 = cast(meta[relay.Constant][28] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
    %462 = cast(meta[relay.Constant][29] /* ty=Tensor[(90, 14), int64] */, dtype="int64") /* ty=Tensor[(90, 14), int64] */;
    %463 = reshape(%461, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float64] */;
    %464 = reshape(%462, newshape=[1260]) /* ty=Tensor[(1260), int64] */;
    %465 = @func_984(%463, %464) /* ty=(Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(15, 7, 12), bool], Tensor[(1260), int64], Tensor[(9, 15, 16), float64]) */;
    %466 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 240), float32] */, dtype="float32") /* ty=Tensor[(14, 240), float32] */;
    %467 = reshape(%466, newshape=[420, 8]) /* ty=Tensor[(420, 8), float32] */;
    %468 = @func_4627(%467) /* ty=(Tensor[(420, 8), float64],) */;
    %469 = %468.0;
    %470 = cast(%469, dtype="float32") /* ty=Tensor[(420, 8), float32] */;
    %471 = %460.0;
    %472 = %465.1;
    %473 = log(%470) /* ty=Tensor[(420, 8), float32] */;
    (%471, %472, meta[relay.Constant][28] /* ty=Tensor[(2160), float64] */, meta[relay.Constant][29] /* ty=Tensor[(90, 14), int64] */, meta[relay.Constant][30] /* ty=Tensor[(14, 240), float32] */, %473)
  };
  %474() /* ty=(Tensor[(420, 1), float32], Tensor[(968), uint16], Tensor[(2160), float64], Tensor[(90, 14), int64], Tensor[(14, 240), float32], Tensor[(420, 8), float32]) */
}

def @func_5215(%var_5213: Tensor[(13, 3, 12), float64]) -> (Tensor[(13, 3, 12), int64], Tensor[(13, 3, 12), float32]) {
  @func_5212(%var_5213) /* ty=(Tensor[(13, 3, 12), int64], Tensor[(13, 3, 12), float32]) */
}

def @func_3948() -> Tensor[(13, 3, 12), float64] {
  %475 = @func_3248() /* ty=(Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) */;
  %476 = %475.0;
  %477 = cast(%476, dtype="float64") /* ty=Tensor[(13, 3, 12), float64] */;
  log10(%477) /* ty=Tensor[(13, 3, 12), float64] */
}

def @func_5396(%var_5395: Tensor[(15, 9, 14), uint64]) -> Tensor[(15, 9, 14), uint64] {
  %482 = fn (%var_5378: Tensor[(15, 9, 14), uint64]) -> Tensor[(15, 9, 14), uint64] {
    %478 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 9, 14), uint64] */, dtype="uint64") /* ty=Tensor[(15, 9, 14), uint64] */;
    %479 = shape_of(%var_5378, dtype="int32") /* ty=Tensor[(3), int32] */;
    %480 = cast(%var_5378, dtype="uint64") /* ty=Tensor[(15, 9, 14), uint64] */;
    %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    logical_xor(%480, %481) /* ty=Tensor[(15, 9, 14), uint64] */
  };
  %482(%var_5395) /* ty=Tensor[(15, 9, 14), uint64] */
}

def @func_4677(%var_4675: Tensor[(6, 6, 16), float32]) -> (Tensor[(6, 6, 16), float32],) {
  @func_4674(%var_4675) /* ty=(Tensor[(6, 6, 16), float32],) */
}

def @func_5477(%var_5468: Tensor[(13, 3, 12), float64]) -> Tensor[(13, 3, 12), uint16] {
  %483 = @func_5257() /* ty=(Tensor[(13, 3, 12), float64],) */;
  %484 = %483.0;
  %485 = cast(%var_5468, dtype="uint16") /* ty=Tensor[(13, 3, 12), uint16] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="uint16") /* ty=Tensor[(13, 3, 12), uint16] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%487, %488) /* ty=Tensor[(13, 3, 12), uint16] */
}

def @func_5480(%var_5478: Tensor[(13, 3, 12), float64]) -> Tensor[(13, 3, 12), uint16] {
  @func_5477(%var_5478) /* ty=Tensor[(13, 3, 12), uint16] */
}

def @func_5324(%var_5285: Tensor[(9, 8, 1), uint8], %var_5286: Tensor[(9, 8, 14), uint8]) -> (Tensor[(9, 8, 14), uint8], Tensor[(420, 1), float32], Tensor[(9, 8, ?), uint32]) {
  %489 = cast(%var_5285, dtype="uint8") /* ty=Tensor[(9, 8, 1), uint8] */;
  %490 = cast(%var_5286, dtype="uint8") /* ty=Tensor[(9, 8, 14), uint8] */;
  %491 = cast(%var_5285, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
  %492 = atanh(%491) /* ty=Tensor[(9, 8, 1), float32] */;
  %493 = cast(%492, dtype="float32") /* ty=Tensor[(9, 8, 1), float32] */;
  %494 = tan(%493) /* ty=Tensor[(9, 8, 1), float32] */;
  %495 = cast(%492, dtype="uint32") /* ty=Tensor[(9, 8, 1), uint32] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%494, dtype="uint32") /* ty=Tensor[(9, 8, 1), uint32] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %499 = bitwise_xor(%489, %490) /* ty=Tensor[(9, 8, 14), uint8] */;
  %500 = @func_4075() /* ty=Tensor[(420, 1), float32] */;
  %501 = bitwise_xor(%497, %498) /* ty=Tensor[(9, 8, ?), uint32] */;
  (%499, %500, %501)
}

def @func_400(%var_398: Tensor[(546), int8]) -> (Tensor[(14, 4, 7), float64], Tensor[(6, 13, 7), bool], Tensor[(546), int8], Tensor[(8, 11, 11), bool], Tensor[(968), uint16]) {
  @func_397(%var_398) /* ty=(Tensor[(14, 4, 7), float64], Tensor[(6, 13, 7), bool], Tensor[(546), int8], Tensor[(8, 11, 11), bool], Tensor[(968), uint16]) */
}

def @func_5558() -> (Tensor[(15, 13, 12), bool],) {
  @func_5556() /* ty=(Tensor[(15, 13, 12), bool],) */
}

def @func_4418(%var_4416: Tensor[(420, 7), bool]) -> Tensor[(420, 7), uint64] {
  @func_4415(%var_4416) /* ty=Tensor[(420, 7), uint64] */
}

def @func_3693() -> (Tensor[(420, 1), float32], Tensor[(3, 15, 4), int64]) {
  %511 = fn () -> (Tensor[(420, 1), float32], Tensor[(3, 15, 4), int64]) {
    %502 = cast(meta[relay.Constant][32] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %503 = reshape(%502, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), float64] */;
    %504 = @func_2295(%503) /* ty=Tensor[(3, 15, 4), float64] */;
    %505 = cast(meta[relay.Constant][32] /* ty=Tensor[(180), float64] */, dtype="int64") /* ty=Tensor[(180), int64] */;
    %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
    %507 = cast(%504, dtype="int64") /* ty=Tensor[(3, 15, 4), int64] */;
    %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %509 = @func_3347() /* ty=Tensor[(420, 1), float32] */;
    %510 = multiply(%507, %508) /* ty=Tensor[(3, 15, 4), int64] */;
    (%509, %510)
  };
  %511() /* ty=(Tensor[(420, 1), float32], Tensor[(3, 15, 4), int64]) */
}

def @func_4005(%var_4003: Tensor[(16, 9, 6), bool]) -> (Tensor[(16, 9, 6), float64], Tensor[(420, 1), float32]) {
  @func_4002(%var_4003) /* ty=(Tensor[(16, 9, 6), float64], Tensor[(420, 1), float32]) */
}

def @func_3919(%var_3917: Tensor[(420, 16), float32]) -> (Tensor[(420, 16), float32],) {
  @func_3916(%var_3917) /* ty=(Tensor[(420, 16), float32],) */
}

def @func_397(%var_378: Tensor[(546), int8]) -> (Tensor[(14, 4, 7), float64], Tensor[(6, 13, 7), bool], Tensor[(546), int8], Tensor[(8, 11, 11), bool], Tensor[(968), uint16]) {
  %512 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 4, 7), float64] */, dtype="float64") /* ty=Tensor[(14, 4, 7), float64] */;
  %513 = cast(%var_378, dtype="int8") /* ty=Tensor[(546), int8] */;
  %514 = cast(%var_378, dtype="int8") /* ty=Tensor[(546), int8] */;
  %515 = reshape(%513, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int8] */;
  %516 = reshape(%514, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int8] */;
  %517 = @func_363(%515, %516) /* ty=(Tensor[(6, 13, 7), bool],) */;
  %518 = cast(meta[relay.Constant][34] /* ty=Tensor[(968), uint16] */, dtype="uint16") /* ty=Tensor[(968), uint16] */;
  %519 = reshape(%518, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), uint16] */;
  %520 = atan(%512) /* ty=Tensor[(14, 4, 7), float64] */;
  %521 = %517.0;
  %522 = @func_107(%519) /* ty=Tensor[(8, 11, 11), bool] */;
  (%520, %521, %var_378, %522, meta[relay.Constant][34] /* ty=Tensor[(968), uint16] */)
}

def @func_2413(%var_2408: Tensor[(14, 5, 4), float32]) -> (Tensor[(14, 5, 4), float32], Tensor[(14, 5, 4), bool]) {
  %523 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 5, 4), float32] */, dtype="float32") /* ty=Tensor[(14, 5, 4), float32] */;
  %524 = cast(%var_2408, dtype="bool") /* ty=Tensor[(14, 5, 4), bool] */;
  %525 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(14, 5, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 5, 4), float32] */, dtype="bool") /* ty=Tensor[(14, 5, 4), bool] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %528 = atan(%523) /* ty=Tensor[(14, 5, 4), float32] */;
  %529 = logical_or(%526, %527) /* ty=Tensor[(14, 5, 4), bool] */;
  (%528, %529)
}

def @func_2374(%var_2372: uint16, %var_2373: Tensor[(16, 10, 12), uint16]) -> (Tensor[(16, 10, 12), uint16], Tensor[(16, 10, 12), float32]) {
  %535 = fn (%var_2353: uint16, %var_2354: Tensor[(16, 10, 12), uint16]) -> (Tensor[(16, 10, 12), uint16], Tensor[(16, 10, 12), float32]) {
    %530 = cast(%var_2353, dtype="uint16") /* ty=uint16 */;
    %531 = cast(%var_2354, dtype="uint16") /* ty=Tensor[(16, 10, 12), uint16] */;
    %532 = cast(%var_2354, dtype="float32") /* ty=Tensor[(16, 10, 12), float32] */;
    %533 = left_shift(%530, %531) /* ty=Tensor[(16, 10, 12), uint16] */;
    %534 = log(%532) /* ty=Tensor[(16, 10, 12), float32] */;
    (%533, %534)
  };
  %535(%var_2372, %var_2373) /* ty=(Tensor[(16, 10, 12), uint16], Tensor[(16, 10, 12), float32]) */
}

def @func_3076(%var_3074: Tensor[(11, 16, 14), float64], %var_3075: uint64) -> (Tensor[(11, 16, 14), float64], Tensor[(4, 4, 4), uint64], uint64) {
  %542 = fn (%var_3051: Tensor[(11, 16, 14), float64], %var_3063: uint64) -> (Tensor[(11, 16, 14), float64], Tensor[(4, 4, 4), uint64], uint64) {
    %536 = cast(%var_3051, dtype="float64") /* ty=Tensor[(11, 16, 14), float64] */;
    %537 = cast(%var_3063, dtype="uint64") /* ty=uint64 */;
    %538 = reshape(%537, newshape=[]) /* ty=uint64 */;
    %539 = @func_1598(%538) /* ty=(Tensor[(4, 4, 4), uint64],) */;
    %540 = atanh(%536) /* ty=Tensor[(11, 16, 14), float64] */;
    %541 = %539.0;
    (%540, %541, %var_3063)
  };
  %542(%var_3074, %var_3075) /* ty=(Tensor[(11, 16, 14), float64], Tensor[(4, 4, 4), uint64], uint64) */
}

def @func_4817() -> (Tensor[(4, 15, 7), float32], Tensor[(968), uint16], Tensor[(1260), int64], Tensor[(1, 968), uint16]) {
  %553 = fn () -> (Tensor[(4, 15, 7), float32], Tensor[(968), uint16], Tensor[(1260), int64], Tensor[(1, 968), uint16]) {
    %543 = @func_3248() /* ty=(Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) */;
    %544 = cast(meta[relay.Constant][36] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
    %545 = cast(meta[relay.Constant][36] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
    %546 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 968), uint16] */, dtype="uint16") /* ty=Tensor[(1, 968), uint16] */;
    %547 = reshape(%544, newshape=[15, 7, 12]) /* ty=Tensor[(15, 7, 12), int64] */;
    %548 = reshape(%545, newshape=[15, 7, 12]) /* ty=Tensor[(15, 7, 12), int64] */;
    %549 = reshape(%546, newshape=[968]) /* ty=Tensor[(968), uint16] */;
    %550 = @func_927(%547, %548, %549) /* ty=(Tensor[(15, 7, 12), bool], Tensor[(8, 11, 11), bool], Tensor[(968), uint16]) */;
    %551 = %543.1;
    %552 = %550.2;
    (%551, %552, meta[relay.Constant][36] /* ty=Tensor[(1260), int64] */, meta[relay.Constant][37] /* ty=Tensor[(1, 968), uint16] */)
  };
  %553() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(968), uint16], Tensor[(1260), int64], Tensor[(1, 968), uint16]) */
}

def @func_4776() -> Tensor[(420, 1), float32] {
  %555 = fn () -> Tensor[(420, 1), float32] {
    %554 = @func_4753() /* ty=(Tensor[(420, 1), float32], Tensor[(968), uint16], Tensor[(2160), float64], Tensor[(90, 14), int64], Tensor[(14, 240), float32], Tensor[(420, 8), float32]) */;
    %554.0
  };
  %555() /* ty=Tensor[(420, 1), float32] */
}

def @func_4964(%var_4933: Tensor[(4, 15, 7), float32], %var_4941: Tensor[(840, 4), float32], %var_4950: Tensor[(4, 15, 7), float64]) -> (Tensor[(420, 8), float64], Tensor[(840, 4), float32], Tensor[(4, 15, 7), float64]) {
  %556 = cast(%var_4941, dtype="float32") /* ty=Tensor[(840, 4), float32] */;
  %557 = reshape(%556, newshape=[420, 8]) /* ty=Tensor[(420, 8), float32] */;
  %558 = @func_4627(%557) /* ty=(Tensor[(420, 8), float64],) */;
  %559 = @func_4723() /* ty=(Tensor[(4, 15, 7), float32],) */;
  %560 = %559.0;
  %561 = cast(%var_4933, dtype="int16") /* ty=Tensor[(4, 15, 7), int16] */;
  %562 = shape_of(%560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%560, dtype="int16") /* ty=Tensor[(4, 15, 7), int16] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %565 = bitwise_and(%563, %564) /* ty=Tensor[(4, 15, 7), int16] */;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %567 = tan(%566) /* ty=Tensor[(4, 15, 7), float64] */;
  %568 = cast(%var_4950, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%567, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %572 = %558.0;
  %573 = mod(%570, %571) /* ty=Tensor[(4, 15, 7), float64] */;
  (%572, %var_4941, %573)
}

def @func_2295(%var_2292: Tensor[(3, 15, 4), float64]) -> Tensor[(3, 15, 4), float64] {
  %574 = cast(%var_2292, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  acosh(%574) /* ty=Tensor[(3, 15, 4), float64] */
}

def @func_5328(%var_5326: Tensor[(9, 8, 1), uint8], %var_5327: Tensor[(9, 8, 14), uint8]) -> (Tensor[(9, 8, 14), uint8], Tensor[(420, 1), float32], Tensor[(9, 8, ?), uint32]) {
  @func_5324(%var_5326, %var_5327) /* ty=(Tensor[(9, 8, 14), uint8], Tensor[(420, 1), float32], Tensor[(9, 8, ?), uint32]) */
}

def @func_1266(%var_1260: Tensor[(4, 15, 7), float32]) -> Tensor[(4, 15, 7), float32] {
  %575 = cast(%var_1260, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
  asin(%575) /* ty=Tensor[(4, 15, 7), float32] */
}

def @func_4598(%var_4568: Tensor[(2160), float64], %var_4569: Tensor[(1260), int64]) -> (Tensor[(13, 3, 12), float64], int32, Tensor[(1920), uint16], Tensor[(8, 11, 11), bool], Tensor[(2160), float64], Tensor[(1260), int64], int32, Tensor[(15, 10, 8), uint16]) {
  %576 = cast(meta[relay.Constant][38] /* ty=Tensor[(1920), uint16] */, dtype="uint16") /* ty=Tensor[(1920), uint16] */;
  %577 = reshape(%576, newshape=[1920]) /* ty=Tensor[(1920), uint16] */;
  %578 = @func_3653(%577) /* ty=(int32, Tensor[(16, 10, 12), float32], Tensor[(1920), uint16]) */;
  %579 = cast(%var_4568, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %580 = cast(%var_4569, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %581 = reshape(%579, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float64] */;
  %582 = reshape(%580, newshape=[1260]) /* ty=Tensor[(1260), int64] */;
  %583 = @func_984(%581, %582) /* ty=(Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(15, 7, 12), bool], Tensor[(1260), int64], Tensor[(9, 15, 16), float64]) */;
  %584 = cast(meta[relay.Constant][38] /* ty=Tensor[(1920), uint16] */, dtype="uint16") /* ty=Tensor[(1920), uint16] */;
  %585 = reshape(%584, newshape=[1920]) /* ty=Tensor[(1920), uint16] */;
  %586 = @func_3653(%585) /* ty=(int32, Tensor[(16, 10, 12), float32], Tensor[(1920), uint16]) */;
  %587 = %578.0;
  %588 = cast(%587, dtype="int8") /* ty=int8 */;
  %589 = cast(meta[relay.Constant][38] /* ty=Tensor[(1920), uint16] */, dtype="uint16") /* ty=Tensor[(1920), uint16] */;
  %590 = reshape(%588, newshape=[]) /* ty=int8 */;
  %591 = reshape(%589, newshape=[8, 240]) /* ty=Tensor[(8, 240), uint16] */;
  %592 = @func_2714(%590, %591) /* ty=(Tensor[(4, 11), float64], int8, Tensor[(16, 10, 12), uint16], Tensor[(8, 240), uint16], Tensor[(8, 11, 11), bool], Tensor[(968), uint16], Tensor[(15, 10, 8), uint16], Tensor[(1, 10, 2), bool], Tensor[(770), float32], Tensor[(20), int32]) */;
  %593 = @func_3948() /* ty=Tensor[(13, 3, 12), float64] */;
  %594 = %583.0;
  %595 = %586.0;
  %596 = %592.6;
  (%593, %587, meta[relay.Constant][38] /* ty=Tensor[(1920), uint16] */, %594, %var_4568, %var_4569, %595, %596)
}

def @func_5142() -> (Tensor[(420, 1), float64], Tensor[(22, 44), float64], Tensor[(4, 15, 7), float32]) {
  %597 = @func_3709() /* ty=(Tensor[(420, 1), float32],) */;
  %598 = %597.0;
  %599 = cast(%598, dtype="float64") /* ty=Tensor[(420, 1), float64] */;
  %600 = cast(meta[relay.Constant][39] /* ty=Tensor[(22, 44), uint16] */, dtype="uint16") /* ty=Tensor[(22, 44), uint16] */;
  %601 = reshape(%600, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), uint16] */;
  %602 = @func_107(%601) /* ty=Tensor[(8, 11, 11), bool] */;
  %603 = cast(%602, dtype="float64") /* ty=Tensor[(8, 11, 11), float64] */;
  %604 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(22, 44), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %605 = cast(meta[relay.Constant][39] /* ty=Tensor[(22, 44), uint16] */, dtype="float64") /* ty=Tensor[(22, 44), float64] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %607 = @func_4723() /* ty=(Tensor[(4, 15, 7), float32],) */;
  %608 = log10(%599) /* ty=Tensor[(420, 1), float64] */;
  %609 = power(%605, %606) /* ty=Tensor[(22, 44), float64] */;
  %610 = %607.0;
  (%608, %609, %610)
}

def @func_3348() -> Tensor[(420, 1), float32] {
  %612 = fn () -> Tensor[(420, 1), float32] {
    %611 = @func_3248() /* ty=(Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) */;
    %611.2
  };
  %612() /* ty=Tensor[(420, 1), float32] */
}

def @func_3294(%var_3274: Tensor[(2464), float64], %var_3280: Tensor[(864), int16]) -> (Tensor[(4, 15, 7), float32], Tensor[(4, 4, 4), uint64], Tensor[(2464), float64], uint64, Tensor[(16, 9, 6), bool], Tensor[(864), int16], Tensor[(11, 16, 14), float64]) {
  %613 = @func_3248() /* ty=(Tensor[(13, 3, 12), int32], Tensor[(4, 15, 7), float32], Tensor[(420, 1), float32]) */;
  %614 = cast(%var_3274, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %615 = cast(meta[relay.Constant][40] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %616 = reshape(%614, newshape=[11, 16, 14]) /* ty=Tensor[(11, 16, 14), float64] */;
  %617 = reshape(%615, newshape=[]) /* ty=uint64 */;
  %618 = @func_3073(%616, %617) /* ty=(Tensor[(11, 16, 14), float64], Tensor[(4, 4, 4), uint64], uint64) */;
  %619 = cast(%var_3280, dtype="int16") /* ty=Tensor[(864), int16] */;
  %620 = cast(%var_3280, dtype="int16") /* ty=Tensor[(864), int16] */;
  %621 = reshape(%619, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), int16] */;
  %622 = reshape(%620, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), int16] */;
  %623 = @func_2036(%621, %622) /* ty=(Tensor[(16, 9, 6), bool],) */;
  %624 = cast(%var_3274, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %625 = cast(meta[relay.Constant][40] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %626 = reshape(%624, newshape=[11, 16, 14]) /* ty=Tensor[(11, 16, 14), float64] */;
  %627 = reshape(%625, newshape=[]) /* ty=uint64 */;
  %628 = @func_3073(%626, %627) /* ty=(Tensor[(11, 16, 14), float64], Tensor[(4, 4, 4), uint64], uint64) */;
  %629 = %613.1;
  %630 = %618.1;
  %631 = %623.0;
  %632 = %628.0;
  (%629, %630, %var_3274, meta[relay.Constant][40] /* ty=uint64 */, %631, %var_3280, %632)
}

def @func_1600(%var_1599: uint64) -> (Tensor[(4, 4, 4), uint64],) {
  %636 = fn (%var_1592: uint64) -> (Tensor[(4, 4, 4), uint64],) {
    %633 = cast(%var_1592, dtype="uint64") /* ty=uint64 */;
    %634 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 4, 4), uint64] */, dtype="uint64") /* ty=Tensor[(4, 4, 4), uint64] */;
    %635 = subtract(%633, %634) /* ty=Tensor[(4, 4, 4), uint64] */;
    (%635,)
  };
  %636(%var_1599) /* ty=(Tensor[(4, 4, 4), uint64],) */
}

def @func_5144() -> (Tensor[(420, 1), float64], Tensor[(22, 44), float64], Tensor[(4, 15, 7), float32]) {
  @func_5142() /* ty=(Tensor[(420, 1), float64], Tensor[(22, 44), float64], Tensor[(4, 15, 7), float32]) */
}

def @func_3867(%var_3804: Tensor[(864), int16], %var_3806: Tensor[(420, 16), float32]) -> (Tensor[(16, 9, 6), bool], Tensor[(864), int16], Tensor[(420, 16), float64]) {
  %637 = cast(%var_3804, dtype="int16") /* ty=Tensor[(864), int16] */;
  %638 = cast(%var_3804, dtype="int16") /* ty=Tensor[(864), int16] */;
  %639 = reshape(%637, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), int16] */;
  %640 = reshape(%638, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), int16] */;
  %641 = @func_2036(%639, %640) /* ty=(Tensor[(16, 9, 6), bool],) */;
  %642 = @func_3347() /* ty=Tensor[(420, 1), float32] */;
  %643 = cast(%642, dtype="bool") /* ty=Tensor[(420, 1), bool] */;
  %644 = cast(%var_3806, dtype="bool") /* ty=Tensor[(420, 16), bool] */;
  %645 = less(%643, %644) /* ty=Tensor[(420, 16), bool] */;
  %646 = cast(%645, dtype="float64") /* ty=Tensor[(420, 16), float64] */;
  %647 = asinh(%646) /* ty=Tensor[(420, 16), float64] */;
  %648 = cast(%647, dtype="float32") /* ty=Tensor[(420, 16), float32] */;
  %649 = cast(%642, dtype="float32") /* ty=Tensor[(420, 1), float32] */;
  %650 = mod(%648, %649) /* ty=Tensor[(420, 16), float32] */;
  %651 = cast(%650, dtype="uint8") /* ty=Tensor[(420, 16), uint8] */;
  %652 = shape_of(%647, dtype="int32") /* ty=Tensor[(2), int32] */;
  %653 = cast(%647, dtype="uint8") /* ty=Tensor[(420, 16), uint8] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %655 = bitwise_and(%653, %654) /* ty=Tensor[(420, 16), uint8] */;
  %656 = cast(%var_3806, dtype="float64") /* ty=Tensor[(420, 16), float64] */;
  %657 = shape_of(%655, dtype="int32") /* ty=Tensor[(2), int32] */;
  %658 = cast(%655, dtype="float64") /* ty=Tensor[(420, 16), float64] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %660 = %641.0;
  %661 = subtract(%658, %659) /* ty=Tensor[(420, 16), float64] */;
  (%660, %var_3804, %661)
}

def @func_4674(%var_4661: Tensor[(6, 6, 16), float32]) -> (Tensor[(6, 6, 16), float32],) {
  %662 = cast(%var_4661, dtype="float32") /* ty=Tensor[(6, 6, 16), float32] */;
  %663 = cosh(%662) /* ty=Tensor[(6, 6, 16), float32] */;
  (%663,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen37/build/output.py", line 1436, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:45:35] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

