==========mod==========
#[version = "0.0.5"]
def @func_6205() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint32], Tensor[(10, 8, 12), uint8]) {
  %0 = @func_3688() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) */;
  %1 = %0.1;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %3 = reshape(%2, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
  %4 = @func_647(%3) /* ty=(Tensor[(10, 8, 12), uint32],) */;
  %5 = cast(%1, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %6 = reshape(%5, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
  %7 = @func_321(%6) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) */;
  %8 = %4.0;
  %9 = %7.1;
  (%1, %8, %9)
}

def @func_5406() -> Tensor[(10, 8, 12), float64] {
  @func_3961() /* ty=Tensor[(10, 8, 12), float64] */
}

def @func_6711(%var_6705: Tensor[(13, 1, 5), float64]) -> (Tensor[(13, 1, 5), float64],) {
  %10 = cast(%var_6705, dtype="float64") /* ty=Tensor[(13, 1, 5), float64] */;
  %11 = sinh(%10) /* ty=Tensor[(13, 1, 5), float64] */;
  (%11,)
}

def @func_6723() -> Tensor[(10, 8, 12), float32] {
  @func_5016() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_6522() -> (Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float32]) {
  %12 = @func_859() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8]) */;
  %13 = %12.1;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 8, 12), uint8] */, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %18 = cast(%13, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %19 = greater_equal(%16, %17) /* ty=Tensor[(10, 8, 12), bool] */;
  %20 = asinh(%18) /* ty=Tensor[(10, 8, 12), float32] */;
  (%19, %20)
}

def @func_321(%var_309: Tensor[(10, 8, 12), float32]) -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) {
  %21 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  %22 = cast(%21, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %23 = erf(%22) /* ty=Tensor[(10, 8, 12), float32] */;
  %24 = cast(%var_309, dtype="uint8") /* ty=Tensor[(10, 8, 12), uint8] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%23, dtype="uint8") /* ty=Tensor[(10, 8, 12), uint8] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %28 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  %29 = add(%26, %27) /* ty=Tensor[(10, 8, 12), uint8] */;
  %30 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  (%28, %29, %30)
}

def @func_2118() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 2, 4), int16], Tensor[(80), int16]) {
  %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(80), int16] */, dtype="int16") /* ty=Tensor[(80), int16] */;
  %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(80), int16] */, dtype="int16") /* ty=Tensor[(80), int16] */;
  %33 = reshape(%31, newshape=[10, 2, 4]) /* ty=Tensor[(10, 2, 4), int16] */;
  %34 = reshape(%32, newshape=[10, 2, 4]) /* ty=Tensor[(10, 2, 4), int16] */;
  %35 = @func_1546(%33, %34) /* ty=(Tensor[(10, 2, 4), int16], Tensor[(10, 2, 4), float32]) */;
  %36 = @func_1638() /* ty=Tensor[(10, 8, 12), float32] */;
  %37 = %35.0;
  (%36, %37, meta[relay.Constant][1] /* ty=Tensor[(80), int16] */)
}

def @func_3908() -> Tensor[(10, 8, 12), bool] {
  %38 = @func_2842() /* ty=Tensor[(10, 8, 12), float32] */;
  %39 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 8, 12), float32] */, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %40 = shape_of(%38, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%38, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%41, %42) /* ty=Tensor[(10, 8, 12), bool] */
}

def @func_3760(%var_3719: int64, %var_3720: Tensor[(1, 14, 16), int64]) -> (Tensor[(10, 8, 12), float64], Tensor[(32), float64], Tensor[(?, 14, 16), bool], Tensor[(10, 8, 12), float32], Tensor[(1, 14, 16), float64]) {
  %43 = cast(meta[relay.Constant][3] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %44 = reshape(%43, newshape=[2, 16]) /* ty=Tensor[(2, 16), float64] */;
  %45 = @func_1862(%44) /* ty=(Tensor[(2, 16), float64], Tensor[(10, 8, 12), float64]) */;
  %46 = cast(%var_3719, dtype="bool") /* ty=bool */;
  %47 = cast(%var_3720, dtype="bool") /* ty=Tensor[(1, 14, 16), bool] */;
  %48 = less_equal(%46, %47) /* ty=Tensor[(1, 14, 16), bool] */;
  %49 = cast(%48, dtype="bool") /* ty=Tensor[(1, 14, 16), bool] */;
  %50 = shape_of(%var_3720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(%var_3720, dtype="bool") /* ty=Tensor[(1, 14, 16), bool] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %53 = @func_2613() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) */;
  %54 = cast(%48, dtype="float32") /* ty=Tensor[(1, 14, 16), float32] */;
  %55 = cast(%var_3719, dtype="float32") /* ty=float32 */;
  %56 = maximum(%54, %55) /* ty=Tensor[(1, 14, 16), float32] */;
  %57 = cast(%56, dtype="float64") /* ty=Tensor[(1, 14, 16), float64] */;
  %58 = %45.1;
  %59 = less(%51, %52) /* ty=Tensor[(?, 14, 16), bool] */;
  %60 = %53.0;
  %61 = asinh(%57) /* ty=Tensor[(1, 14, 16), float64] */;
  (%58, meta[relay.Constant][3] /* ty=Tensor[(32), float64] */, %59, %60, %61)
}

def @func_818() -> (Tensor[(10, 8, 12), int8],) {
  %62 = @func_774() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %63 = %62.0;
  %64 = cast(%63, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %65 = acosh(%64) /* ty=Tensor[(10, 8, 12), float32] */;
  %66 = cast(%63, dtype="int8") /* ty=Tensor[(10, 8, 12), int8] */;
  %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%65, dtype="int8") /* ty=Tensor[(10, 8, 12), int8] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %70 = left_shift(%68, %69) /* ty=Tensor[(10, 8, 12), int8] */;
  (%70,)
}

def @func_928() -> Tensor[(10, 8, 12), float64] {
  %71 = @func_859() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8]) */;
  %72 = %71.0;
  %73 = cast(%72, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
  sin(%73) /* ty=Tensor[(10, 8, 12), float64] */
}

def @func_3961() -> Tensor[(10, 8, 12), float64] {
  %74 = @func_3562() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %74.0
}

def @func_1709(%var_1682: Tensor[(13, 7, 11), uint32], %var_1683: Tensor[(13, 7, 11), uint32]) -> (Tensor[(13, 7, 11), uint32], Tensor[(10, 8, 12), uint8]) {
  %75 = cast(%var_1683, dtype="uint32") /* ty=Tensor[(13, 7, 11), uint32] */;
  %76 = shape_of(%var_1682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%var_1682, dtype="uint32") /* ty=Tensor[(13, 7, 11), uint32] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %79 = @func_859() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8]) */;
  %80 = left_shift(%77, %78) /* ty=Tensor[(13, 7, 11), uint32] */;
  %81 = %79.1;
  (%80, %81)
}

def @func_4635(%var_4614: Tensor[(9, 2, 16), float32]) -> (Tensor[(9, 2, 16), float32], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float64]) {
  %82 = cast(%var_4614, dtype="float32") /* ty=Tensor[(9, 2, 16), float32] */;
  %83 = cast(meta[relay.Constant][4] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
  %84 = reshape(%83, newshape=[462]) /* ty=Tensor[(462), int16] */;
  %85 = @func_3456(%84) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(11, 6, 7), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %86 = %85.4;
  %87 = cast(%86, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %88 = reshape(%87, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
  %89 = sqrt(%82) /* ty=Tensor[(9, 2, 16), float32] */;
  %90 = @func_3669(%88) /* ty=Tensor[(10, 8, 12), float64] */;
  (%89, %86, meta[relay.Constant][4] /* ty=Tensor[(462), int16] */, %90)
}

def @func_1862(%var_1847: Tensor[(2, 16), float64]) -> (Tensor[(2, 16), float64], Tensor[(10, 8, 12), float64]) {
  %91 = cast(%var_1847, dtype="float64") /* ty=Tensor[(2, 16), float64] */;
  %92 = @func_1253() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %93 = rsqrt(%91) /* ty=Tensor[(2, 16), float64] */;
  %94 = %92.0;
  (%93, %94)
}

def @func_5003() -> Tensor[(80), int16] {
  @func_4276() /* ty=Tensor[(80), int16] */
}

def @func_1638() -> Tensor[(10, 8, 12), float32] {
  @func_385() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_501(%var_495: Tensor[(462), int16]) -> (Tensor[(10, 7, 8), float64], Tensor[(10, 7, 8), float32], Tensor[(10, 8, 12), float64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) {
  %95 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 7, 8), float64] */, dtype="float64") /* ty=Tensor[(10, 7, 8), float64] */;
  %96 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 7, 8), float64] */, dtype="float32") /* ty=Tensor[(10, 7, 8), float32] */;
  %97 = @func_353() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %98 = cast(%var_495, dtype="int16") /* ty=Tensor[(462), int16] */;
  %99 = cast(%var_495, dtype="int16") /* ty=Tensor[(462), int16] */;
  %100 = reshape(%98, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
  %101 = reshape(%99, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
  %102 = @func_107(%100, %101) /* ty=(Tensor[(11, 6, 7), float64],) */;
  %103 = atan(%95) /* ty=Tensor[(10, 7, 8), float64] */;
  %104 = cos(%96) /* ty=Tensor[(10, 7, 8), float32] */;
  %105 = %97.1;
  %106 = %102.0;
  (%103, %104, %105, %106, %var_495)
}

def @func_2099() -> Tensor[(10, 8, 12), float32] {
  %107 = @func_1917() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8]) */;
  %107.0
}

def @func_107(%var_86: Tensor[(11, 6, 7), int16], %var_87: Tensor[(11, 6, 7), int16]) -> (Tensor[(11, 6, 7), float64],) {
  %108 = cast(%var_87, dtype="int16") /* ty=Tensor[(11, 6, 7), int16] */;
  %109 = shape_of(%var_86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%var_86, dtype="int16") /* ty=Tensor[(11, 6, 7), int16] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %112 = bitwise_or(%110, %111) /* ty=Tensor[(11, 6, 7), int16] */;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
  %114 = atan(%113) /* ty=Tensor[(11, 6, 7), float64] */;
  (%114,)
}

def @func_2705() -> Tensor[(10, 8, 12), float64] {
  %115 = @func_1638() /* ty=Tensor[(10, 8, 12), float32] */;
  %116 = cast(%115, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
  acos(%116) /* ty=Tensor[(10, 8, 12), float64] */
}

def @func_4962() -> (Tensor[(10, 8, 12), float64],) {
  %117 = @func_928() /* ty=Tensor[(10, 8, 12), float64] */;
  (%117,)
}

def @func_5131(%var_5052: Tensor[(3, 14, 6), int64]) -> (Tensor[(3, 14, 6), bool], Tensor[(3, 14, 6), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) {
  %118 = cast(%var_5052, dtype="bool") /* ty=Tensor[(3, 14, 6), bool] */;
  %119 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(3, 14, 6), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 14, 6), int64] */, dtype="bool") /* ty=Tensor[(3, 14, 6), bool] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %122 = greater(%120, %121) /* ty=Tensor[(3, 14, 6), bool] */;
  %123 = cast(%var_5052, dtype="bool") /* ty=Tensor[(3, 14, 6), bool] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%122, dtype="bool") /* ty=Tensor[(3, 14, 6), bool] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %127 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 14, 6), int64] */, dtype="float32") /* ty=Tensor[(3, 14, 6), float32] */;
  %128 = not_equal(%125, %126) /* ty=Tensor[(3, 14, 6), bool] */;
  %129 = sinh(%127) /* ty=Tensor[(3, 14, 6), float32] */;
  %130 = @func_2979() /* ty=Tensor[(10, 8, 12), float32] */;
  %131 = @func_385() /* ty=Tensor[(10, 8, 12), float32] */;
  (%128, %129, %130, %131)
}

def @func_3642(%var_3572: Tensor[(12, 3, 10), float64], %var_3573: Tensor[(12, 3, 10), float64]) -> (Tensor[(12, 3, 10), float64], Tensor[(12, 3, 10), float32], Tensor[(10, 8, 12), float64], Tensor[(12, 3, 10), bool], Tensor[(10, 8, 12), float64]) {
  %132 = cast(%var_3573, dtype="float64") /* ty=Tensor[(12, 3, 10), float64] */;
  %133 = shape_of(%var_3572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%var_3572, dtype="float64") /* ty=Tensor[(12, 3, 10), float64] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %136 = cast(%var_3572, dtype="float32") /* ty=Tensor[(12, 3, 10), float32] */;
  %137 = @func_774() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %138 = cast(%var_3572, dtype="bool") /* ty=Tensor[(12, 3, 10), bool] */;
  %139 = shape_of(%var_3573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%var_3573, dtype="bool") /* ty=Tensor[(12, 3, 10), bool] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %142 = greater_equal(%140, %141) /* ty=Tensor[(12, 3, 10), bool] */;
  %143 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 3, 10), float64] */, dtype="int64") /* ty=Tensor[(12, 3, 10), int64] */;
  %144 = shape_of(%var_3573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%var_3573, dtype="int64") /* ty=Tensor[(12, 3, 10), int64] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %147 = bitwise_and(%145, %146) /* ty=Tensor[(12, 3, 10), int64] */;
  %148 = cast(%147, dtype="bool") /* ty=Tensor[(12, 3, 10), bool] */;
  %149 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%142, dtype="bool") /* ty=Tensor[(12, 3, 10), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %152 = @func_1253() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %153 = floor_divide(%134, %135) /* ty=Tensor[(12, 3, 10), float64] */;
  %154 = rsqrt(%136) /* ty=Tensor[(12, 3, 10), float32] */;
  %155 = %137.0;
  %156 = equal(%150, %151) /* ty=Tensor[(12, 3, 10), bool] */;
  %157 = %152.0;
  (%153, %154, %155, %156, %157)
}

def @func_3403() -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) {
  %158 = @func_3322() /* ty=(Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), bool]) */;
  %159 = @func_3006() /* ty=Tensor[(10, 8, 12), float64] */;
  %160 = %158.0;
  %161 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  (%159, %160, %161)
}

def @func_5817() -> (Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float32]) {
  %162 = @func_4657() /* ty=(Tensor[(10, 8, 12), bool],) */;
  %163 = @func_3789() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %164 = %162.0;
  %165 = %163.0;
  (%164, %165)
}

def @func_859() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8]) {
  %166 = @func_774() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %167 = %166.0;
  %168 = @func_385() /* ty=Tensor[(10, 8, 12), float32] */;
  %169 = cast(%168, dtype="uint8") /* ty=Tensor[(10, 8, 12), uint8] */;
  %170 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%167, dtype="uint8") /* ty=Tensor[(10, 8, 12), uint8] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %173 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  %174 = bitwise_xor(%171, %172) /* ty=Tensor[(10, 8, 12), uint8] */;
  (%173, %174)
}

def @func_2416(%var_2395: Tensor[(40, 2), int16]) -> (Tensor[(10, 8, 12), float64], Tensor[(10, 2, 4), float32], Tensor[(40, 2), float64]) {
  %175 = @func_698() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %176 = cast(%var_2395, dtype="int16") /* ty=Tensor[(40, 2), int16] */;
  %177 = cast(%var_2395, dtype="int16") /* ty=Tensor[(40, 2), int16] */;
  %178 = reshape(%176, newshape=[10, 2, 4]) /* ty=Tensor[(10, 2, 4), int16] */;
  %179 = reshape(%177, newshape=[10, 2, 4]) /* ty=Tensor[(10, 2, 4), int16] */;
  %180 = @func_1546(%178, %179) /* ty=(Tensor[(10, 2, 4), int16], Tensor[(10, 2, 4), float32]) */;
  %181 = cast(%var_2395, dtype="float64") /* ty=Tensor[(40, 2), float64] */;
  %182 = %175.2;
  %183 = %180.1;
  %184 = atanh(%181) /* ty=Tensor[(40, 2), float64] */;
  (%182, %183, %184)
}

def @func_4229(%var_4204: uint64, %var_4206: Tensor[(1, 462), int16], %var_4221: Tensor[(8, 462), int16]) -> (Tensor[(10, 8, 12), float32], Tensor[(462), int16], uint64, Tensor[(275), uint64], Tensor[(8, 462), bool]) {
  %185 = @func_2816() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8]) */;
  %186 = cast(%var_4204, dtype="uint64") /* ty=uint64 */;
  %187 = cast(meta[relay.Constant][8] /* ty=Tensor[(275), uint64] */, dtype="uint64") /* ty=Tensor[(275), uint64] */;
  %188 = cast(%var_4206, dtype="int16") /* ty=Tensor[(1, 462), int16] */;
  %189 = reshape(%186, newshape=[]) /* ty=uint64 */;
  %190 = reshape(%187, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint64] */;
  %191 = reshape(%188, newshape=[462]) /* ty=Tensor[(462), int16] */;
  %192 = @func_2082(%189, %190, %191) /* ty=(Tensor[(11, 5, 5), int64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) */;
  %193 = cast(%var_4206, dtype="bool") /* ty=Tensor[(1, 462), bool] */;
  %194 = cast(%var_4221, dtype="bool") /* ty=Tensor[(8, 462), bool] */;
  %195 = %185.1;
  %196 = %192.2;
  %197 = not_equal(%193, %194) /* ty=Tensor[(8, 462), bool] */;
  (%195, %196, %var_4204, meta[relay.Constant][8] /* ty=Tensor[(275), uint64] */, %197)
}

def @func_774() -> (Tensor[(10, 8, 12), float64],) {
  %198 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  %199 = cast(%198, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %200 = reshape(%199, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
  %201 = @func_321(%200) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) */;
  %202 = %201.1;
  %203 = cast(%198, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %204 = shape_of(%202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%202, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %207 = logical_or(%205, %206) /* ty=Tensor[(10, 8, 12), bool] */;
  %208 = cast(%207, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
  %209 = asin(%208) /* ty=Tensor[(10, 8, 12), float64] */;
  (%209,)
}

def @func_5329() -> Tensor[(80), int16] {
  @func_4333() /* ty=Tensor[(80), int16] */
}

def @func_5633(%var_5618: Tensor[(14, 15, 8), uint16], %var_5619: Tensor[(14, 15, 8), uint16]) -> Tensor[(14, 15, 8), uint16] {
  %210 = cast(%var_5619, dtype="uint16") /* ty=Tensor[(14, 15, 8), uint16] */;
  %211 = shape_of(%var_5618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%var_5618, dtype="uint16") /* ty=Tensor[(14, 15, 8), uint16] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  multiply(%212, %213) /* ty=Tensor[(14, 15, 8), uint16] */
}

def @func_4994() -> Tensor[(10, 8, 12), float64] {
  @func_3961() /* ty=Tensor[(10, 8, 12), float64] */
}

def @func_2979() -> Tensor[(10, 8, 12), float32] {
  @func_2030() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_3669(%var_3661: Tensor[(10, 8, 12), float32]) -> Tensor[(10, 8, 12), float64] {
  %214 = @func_1638() /* ty=Tensor[(10, 8, 12), float32] */;
  %215 = cast(%var_3661, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
  %216 = shape_of(%214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%214, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%217, %218) /* ty=Tensor[(10, 8, 12), float64] */
}

def @func_5844() -> Tensor[(10, 8, 12), uint8] {
  %219 = @func_859() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8]) */;
  %219.1
}

def @func_4880() -> (Tensor[(10, 8, 12), float64],) {
  %220 = @func_928() /* ty=Tensor[(10, 8, 12), float64] */;
  (%220,)
}

def @func_6279(%var_6268: Tensor[(462), int16]) -> (Tensor[(10, 8, 12), float32], Tensor[(12, 3, 10), float32], Tensor[(360), float64], Tensor[(10, 7, 8), float64], Tensor[(462), int16], Tensor[(10, 8, 12), uint8]) {
  %221 = cast(meta[relay.Constant][9] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %222 = cast(meta[relay.Constant][9] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %223 = reshape(%221, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), float64] */;
  %224 = reshape(%222, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), float64] */;
  %225 = @func_3642(%223, %224) /* ty=(Tensor[(12, 3, 10), float64], Tensor[(12, 3, 10), float32], Tensor[(10, 8, 12), float64], Tensor[(12, 3, 10), bool], Tensor[(10, 8, 12), float64]) */;
  %226 = cast(%var_6268, dtype="int16") /* ty=Tensor[(462), int16] */;
  %227 = reshape(%226, newshape=[462]) /* ty=Tensor[(462), int16] */;
  %228 = @func_501(%227) /* ty=(Tensor[(10, 7, 8), float64], Tensor[(10, 7, 8), float32], Tensor[(10, 8, 12), float64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) */;
  %229 = @func_3403() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) */;
  %230 = @func_2842() /* ty=Tensor[(10, 8, 12), float32] */;
  %231 = %225.1;
  %232 = %228.0;
  %233 = %229.1;
  (%230, %231, meta[relay.Constant][9] /* ty=Tensor[(360), float64] */, %232, %var_6268, %233)
}

def @func_2316() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) {
  %234 = cast(meta[relay.Constant][10] /* ty=Tensor[(1573, 1), int8] */, dtype="int8") /* ty=Tensor[(1573, 1), int8] */;
  %235 = reshape(%234, newshape=[1573]) /* ty=Tensor[(1573), int8] */;
  %236 = @func_2230(%235) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) */;
  %237 = @func_698() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %238 = cast(meta[relay.Constant][10] /* ty=Tensor[(1573, 1), int8] */, dtype="int8") /* ty=Tensor[(1573, 1), int8] */;
  %239 = reshape(%238, newshape=[1573]) /* ty=Tensor[(1573), int8] */;
  %240 = @func_2230(%239) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) */;
  %241 = @func_2099() /* ty=Tensor[(10, 8, 12), float32] */;
  %242 = %236.1;
  %243 = %237.1;
  %244 = %240.2;
  %245 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  (%241, %242, meta[relay.Constant][10] /* ty=Tensor[(1573, 1), int8] */, %243, %244, %245)
}

def @func_6860(%var_6827: Tensor[(10, 8, 12), float32]) -> (Tensor[(10, 8, 12), int16],) {
  %246 = @func_1619() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %247 = %246.0;
  %248 = cast(%var_6827, dtype="int16") /* ty=Tensor[(10, 8, 12), int16] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%247, dtype="int16") /* ty=Tensor[(10, 8, 12), int16] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %252 = bitwise_and(%250, %251) /* ty=Tensor[(10, 8, 12), int16] */;
  (%252,)
}

def @func_2230(%var_2210: Tensor[(1573), int8]) -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) {
  %253 = @func_698() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %254 = @func_774() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %255 = cast(%var_2210, dtype="int8") /* ty=Tensor[(1573), int8] */;
  %256 = reshape(%255, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), int8] */;
  %257 = @func_998(%256) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(11, 11, 13), uint64], Tensor[(10, 8, 12), float64]) */;
  %258 = %253.0;
  %259 = %254.0;
  %260 = %257.2;
  (%258, %259, %260, %var_2210)
}

def @func_2842() -> Tensor[(10, 8, 12), float32] {
  %261 = @func_859() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8]) */;
  %261.0
}

def @func_2963() -> (Tensor[(80), int16],) {
  %262 = @func_2118() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 2, 4), int16], Tensor[(80), int16]) */;
  %263 = %262.2;
  (%263,)
}

def @func_2082(%var_2044: uint64, %var_2045: Tensor[(11, 5, 5), uint64], %var_2071: Tensor[(462), int16]) -> (Tensor[(11, 5, 5), int64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) {
  %264 = cast(%var_2044, dtype="uint64") /* ty=uint64 */;
  %265 = cast(%var_2045, dtype="uint64") /* ty=Tensor[(11, 5, 5), uint64] */;
  %266 = bitwise_xor(%264, %265) /* ty=Tensor[(11, 5, 5), uint64] */;
  %267 = cast(%266, dtype="float64") /* ty=Tensor[(11, 5, 5), float64] */;
  %268 = asin(%267) /* ty=Tensor[(11, 5, 5), float64] */;
  %269 = cast(%266, dtype="int64") /* ty=Tensor[(11, 5, 5), int64] */;
  %270 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%268, dtype="int64") /* ty=Tensor[(11, 5, 5), int64] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %273 = cast(%var_2071, dtype="int16") /* ty=Tensor[(462), int16] */;
  %274 = cast(%var_2071, dtype="int16") /* ty=Tensor[(462), int16] */;
  %275 = reshape(%273, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
  %276 = reshape(%274, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
  %277 = @func_107(%275, %276) /* ty=(Tensor[(11, 6, 7), float64],) */;
  %278 = bitwise_or(%271, %272) /* ty=Tensor[(11, 5, 5), int64] */;
  %279 = %277.0;
  (%278, %279, %var_2071)
}

def @func_3688() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) {
  %280 = @func_1619() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %281 = %280.0;
  %282 = @func_3534() /* ty=Tensor[(10, 8, 12), float32] */;
  %283 = @func_1638() /* ty=Tensor[(10, 8, 12), float32] */;
  (%281, %282, %283)
}

def @func_1482(%var_1395: Tensor[(7, 4, 13), uint16]) -> (Tensor[(7, 4, 13), uint16], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) {
  %284 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 4, 13), uint16] */, dtype="uint16") /* ty=Tensor[(1, 4, 13), uint16] */;
  %285 = cast(%var_1395, dtype="uint16") /* ty=Tensor[(7, 4, 13), uint16] */;
  %286 = cast(meta[relay.Constant][12] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
  %287 = reshape(%286, newshape=[462]) /* ty=Tensor[(462), int16] */;
  %288 = @func_501(%287) /* ty=(Tensor[(10, 7, 8), float64], Tensor[(10, 7, 8), float32], Tensor[(10, 8, 12), float64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) */;
  %289 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  %290 = cast(%289, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %291 = %288.2;
  %292 = cast(%291, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %293 = reshape(%292, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
  %294 = @func_321(%293) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) */;
  %295 = right_shift(%284, %285) /* ty=Tensor[(7, 4, 13), uint16] */;
  %296 = log10(%290) /* ty=Tensor[(10, 8, 12), float32] */;
  %297 = %294.2;
  (%295, %291, meta[relay.Constant][12] /* ty=Tensor[(462), int16] */, %296, %297)
}

def @func_5016() -> Tensor[(10, 8, 12), float32] {
  @func_1982() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_6375() -> (Tensor[(10, 8, 12), float64],) {
  %298 = @func_4383() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64]) */;
  %299 = %298.1;
  (%299,)
}

def @func_6409(%var_6392: Tensor[(16, 5, 9), int32]) -> (Tensor[(16, 5, 9), int32], Tensor[(40, 1), bool], Tensor[(40), bool], Tensor[(10, 8, 12), float32]) {
  %300 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 5, 9), int32] */, dtype="int32") /* ty=Tensor[(16, 5, 9), int32] */;
  %301 = shape_of(%var_6392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%var_6392, dtype="int32") /* ty=Tensor[(16, 5, 9), int32] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %304 = cast(meta[relay.Constant][14] /* ty=Tensor[(40), bool] */, dtype="bool") /* ty=Tensor[(40), bool] */;
  %305 = reshape(%304, newshape=[40, 1]) /* ty=Tensor[(40, 1), bool] */;
  %306 = @func_4582(%305) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1, 4, 10), bool], Tensor[(40, 1), bool], Tensor[(462), int16], Tensor[(1, 80), bool], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), bool]) */;
  %307 = @func_3948() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %308 = minimum(%302, %303) /* ty=Tensor[(16, 5, 9), int32] */;
  %309 = %306.5;
  %310 = %307.0;
  (%308, %309, meta[relay.Constant][14] /* ty=Tensor[(40), bool] */, %310)
}

def @func_4276() -> Tensor[(80), int16] {
  %311 = @func_2963() /* ty=(Tensor[(80), int16],) */;
  %311.0
}

def @func_4362(%var_4339: Tensor[(16, 9, 6), uint64]) -> (Tensor[(16, 9, 6), uint64], Tensor[(10, 8, 12), bool], Tensor[(16, 9, 6), float32]) {
  %312 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 9, 6), uint64] */, dtype="uint64") /* ty=Tensor[(1, 9, 6), uint64] */;
  %313 = cast(%var_4339, dtype="uint64") /* ty=Tensor[(16, 9, 6), uint64] */;
  %314 = cast(%var_4339, dtype="float32") /* ty=Tensor[(16, 9, 6), float32] */;
  %315 = left_shift(%312, %313) /* ty=Tensor[(16, 9, 6), uint64] */;
  %316 = @func_3908() /* ty=Tensor[(10, 8, 12), bool] */;
  %317 = cosh(%314) /* ty=Tensor[(16, 9, 6), float32] */;
  (%315, %316, %317)
}

def @func_385() -> Tensor[(10, 8, 12), float32] {
  %318 = @func_353() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %319 = %318.0;
  %320 = cast(%319, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  log(%320) /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_4941() -> (Tensor[(10, 8, 12), int32],) {
  %321 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  %322 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 8, 12), float32] */, dtype="int32") /* ty=Tensor[(10, 8, 12), int32] */;
  %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%321, dtype="int32") /* ty=Tensor[(10, 8, 12), int32] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %326 = maximum(%324, %325) /* ty=Tensor[(10, 8, 12), int32] */;
  (%326,)
}

def @func_6664() -> Tensor[(10, 8, 12), float32] {
  %327 = @func_1917() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8]) */;
  %327.0
}

def @main(%var_7018: Tensor[(5, 2, 1), float64]) -> Tensor[(5, 2, 1), float64] {
  %328 = cast(%var_7018, dtype="float64") /* ty=Tensor[(5, 2, 1), float64] */;
  sin(%328) /* ty=Tensor[(5, 2, 1), float64] */
}

def @func_4383() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64]) {
  %329 = @func_3181() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %330 = @func_774() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %331 = @func_1585() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %332 = %329.0;
  %333 = %330.0;
  %334 = %331.2;
  (%332, %333, %334)
}

def @func_5956() -> (Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
  %335 = @func_3322() /* ty=(Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), bool]) */;
  %336 = %335.1;
  %337 = @func_2842() /* ty=Tensor[(10, 8, 12), float32] */;
  %338 = @func_4994() /* ty=Tensor[(10, 8, 12), float64] */;
  (%336, %337, %338)
}

def @func_5201(%var_5138: Tensor[(1, 11, 15), float64]) -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 2, 1), float64], Tensor[(10, 1), float64], Tensor[(10, 8, 12), bool], Tensor[(?, 11, 15), int32]) {
  %339 = @func_3948() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %340 = @func_1619() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %341 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 1), float64] */;
  %342 = reshape(%341, newshape=[10]) /* ty=Tensor[(10), float64] */;
  %343 = @func_4425(%342) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1183), bool], Tensor[(10, 2, 1), float64], Tensor[(10), float64], Tensor[(20), float64]) */;
  %344 = %340.0;
  %345 = cast(%344, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %346 = reshape(%345, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
  %347 = @func_321(%346) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) */;
  %348 = %347.0;
  %349 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 8, 12), float32] */, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%348, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %353 = cast(%var_5138, dtype="float64") /* ty=Tensor[(1, 11, 15), float64] */;
  %354 = atanh(%353) /* ty=Tensor[(1, 11, 15), float64] */;
  %355 = cast(%var_5138, dtype="int32") /* ty=Tensor[(1, 11, 15), int32] */;
  %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%354, dtype="int32") /* ty=Tensor[(1, 11, 15), int32] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %359 = %339.0;
  %360 = %343.3;
  %361 = less(%351, %352) /* ty=Tensor[(10, 8, 12), bool] */;
  %362 = bitwise_xor(%357, %358) /* ty=Tensor[(?, 11, 15), int32] */;
  (%359, %344, %360, meta[relay.Constant][17] /* ty=Tensor[(10, 1), float64] */, %361, %362)
}

def @func_2341() -> (Tensor[(10, 8, 12), float64],) {
  %363 = @func_2316() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) */;
  %364 = %363.5;
  %365 = cast(%364, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
  %366 = tan(%365) /* ty=Tensor[(10, 8, 12), float64] */;
  (%366,)
}

def @func_1253() -> (Tensor[(10, 8, 12), float64],) {
  %367 = @func_928() /* ty=Tensor[(10, 8, 12), float64] */;
  (%367,)
}

def @func_2613() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) {
  %368 = @func_1074() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %369 = @func_2118() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 2, 4), int16], Tensor[(80), int16]) */;
  %370 = @func_385() /* ty=Tensor[(10, 8, 12), float32] */;
  %371 = %368.0;
  %372 = %369.0;
  (%370, %371, %372)
}

def @func_3505(%var_3481: Tensor[(1183), bool]) -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1183), bool]) {
  %373 = @func_1253() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %374 = @func_1253() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %375 = cast(%var_3481, dtype="bool") /* ty=Tensor[(1183), bool] */;
  %376 = reshape(%375, newshape=[13, 13, 7]) /* ty=Tensor[(13, 13, 7), bool] */;
  %377 = @func_2468(%376) /* ty=(Tensor[(13, 13, 7), bool], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) */;
  %378 = %373.0;
  %379 = %374.0;
  %380 = %377.1;
  (%378, %379, %380, %var_3481)
}

def @func_4657() -> (Tensor[(10, 8, 12), bool],) {
  %381 = @func_3322() /* ty=(Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), bool]) */;
  %382 = %381.1;
  (%382,)
}

def @func_1982() -> Tensor[(10, 8, 12), float32] {
  %383 = @func_353() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %383.0
}

def @func_3006() -> Tensor[(10, 8, 12), float64] {
  %384 = @func_2613() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) */;
  %384.1
}

def @func_3534() -> Tensor[(10, 8, 12), float32] {
  @func_254() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_4824() -> (Tensor[(10, 8, 12), float64], Tensor[(2184), float64], Tensor[(10, 2, 4), int16], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(12, 14, 13), bool]) {
  %385 = @func_1253() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %386 = @func_2118() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 2, 4), int16], Tensor[(80), int16]) */;
  %387 = cast(meta[relay.Constant][20] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
  %388 = reshape(%387, newshape=[462]) /* ty=Tensor[(462), int16] */;
  %389 = @func_1060(%388) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint32], Tensor[(10, 7, 8), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(462), float64]) */;
  %390 = cast(meta[relay.Constant][19] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %391 = reshape(%390, newshape=[12, 14, 13]) /* ty=Tensor[(12, 14, 13), float64] */;
  %392 = @func_4668(%391) /* ty=(Tensor[(12, 14, 13), float64], Tensor[(12, 14, 13), float64]) */;
  %393 = %392.0;
  %394 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 14, 13), float64] */, dtype="bool") /* ty=Tensor[(12, 14, 13), bool] */;
  %395 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(%393, dtype="bool") /* ty=Tensor[(12, 14, 13), bool] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %398 = %385.0;
  %399 = %386.1;
  %400 = %389.0;
  %401 = greater_equal(%396, %397) /* ty=Tensor[(12, 14, 13), bool] */;
  (%398, meta[relay.Constant][19] /* ty=Tensor[(2184), float64] */, %399, %400, meta[relay.Constant][20] /* ty=Tensor[(462), int16] */, %401)
}

def @func_1074() -> (Tensor[(10, 8, 12), float64],) {
  %402 = @func_353() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %403 = %402.1;
  (%403,)
}

def @func_6550(%var_6546: Tensor[(13, 12, 3), float64]) -> Tensor[(13, 12, 3), float64] {
  %404 = cast(%var_6546, dtype="float64") /* ty=Tensor[(13, 12, 3), float64] */;
  acos(%404) /* ty=Tensor[(13, 12, 3), float64] */
}

def @func_3359(%var_3329: Tensor[(10, 8, 12), float32]) -> Tensor[(10, 8, 12), float32] {
  %405 = @func_1982() /* ty=Tensor[(10, 8, 12), float32] */;
  %406 = cast(%var_3329, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%405, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%408, %409) /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_5917() -> (Tensor[(80), int16], Tensor[(10, 8, 12), float32]) {
  %410 = @func_5329() /* ty=Tensor[(80), int16] */;
  %411 = @func_5016() /* ty=Tensor[(10, 8, 12), float32] */;
  (%410, %411)
}

def @func_1917() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8]) {
  %412 = @func_818() /* ty=(Tensor[(10, 8, 12), int8],) */;
  %413 = @func_1638() /* ty=Tensor[(10, 8, 12), float32] */;
  %414 = %412.0;
  (%413, %414)
}

def @func_5736() -> (Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float64]) {
  %415 = @func_5393() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), int8]) */;
  %416 = @func_2316() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) */;
  %417 = @func_5393() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), int8]) */;
  %418 = @func_4966() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %419 = %415.1;
  %420 = %416.3;
  %421 = %417.1;
  %422 = %418.0;
  (%419, %420, %421, %422)
}

def @func_6289() -> (Tensor[(10, 8, 12), uint8],) {
  %423 = @func_5844() /* ty=Tensor[(10, 8, 12), uint8] */;
  (%423,)
}

def @func_1585() -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
  %424 = @func_353() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %425 = %424.1;
  %426 = cast(%425, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %427 = reshape(%426, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
  %428 = @func_321(%427) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) */;
  %429 = @func_774() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %430 = %428.0;
  %431 = %429.0;
  (%425, %430, %431)
}

def @func_647(%var_634: Tensor[(10, 8, 12), float32]) -> (Tensor[(10, 8, 12), uint32],) {
  %432 = @func_353() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %433 = %432.0;
  %434 = cast(%var_634, dtype="uint32") /* ty=Tensor[(10, 8, 12), uint32] */;
  %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%433, dtype="uint32") /* ty=Tensor[(10, 8, 12), uint32] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %438 = minimum(%436, %437) /* ty=Tensor[(10, 8, 12), uint32] */;
  (%438,)
}

def @func_3789() -> (Tensor[(10, 8, 12), float32],) {
  %439 = @func_1619() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %440 = %439.0;
  (%440,)
}

def @func_2030() -> Tensor[(10, 8, 12), float32] {
  @func_385() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_4333() -> Tensor[(80), int16] {
  %441 = @func_2963() /* ty=(Tensor[(80), int16],) */;
  %441.0
}

def @func_2816() -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8]) {
  %442 = @func_1619() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %443 = @func_1917() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8]) */;
  %444 = %443.0;
  %445 = cast(%444, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
  %446 = @func_2316() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) */;
  %447 = @func_2705() /* ty=Tensor[(10, 8, 12), float64] */;
  %448 = %442.0;
  %449 = cos(%445) /* ty=Tensor[(10, 8, 12), float64] */;
  %450 = %446.2;
  (%447, %448, %449, %450)
}

def @func_5251() -> (Tensor[(80), int16], Tensor[(11, 6, 7), float64], Tensor[(231, 2), int16], Tensor[(11, 6, 7), float64]) {
  %451 = cast(meta[relay.Constant][22] /* ty=Tensor[(231, 2), int16] */, dtype="int16") /* ty=Tensor[(231, 2), int16] */;
  %452 = cast(meta[relay.Constant][22] /* ty=Tensor[(231, 2), int16] */, dtype="int16") /* ty=Tensor[(231, 2), int16] */;
  %453 = reshape(%451, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
  %454 = reshape(%452, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
  %455 = @func_107(%453, %454) /* ty=(Tensor[(11, 6, 7), float64],) */;
  %456 = %455.0;
  %457 = cast(%456, dtype="int16") /* ty=Tensor[(11, 6, 7), int16] */;
  %458 = cast(%456, dtype="int16") /* ty=Tensor[(11, 6, 7), int16] */;
  %459 = reshape(%457, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
  %460 = reshape(%458, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
  %461 = @func_107(%459, %460) /* ty=(Tensor[(11, 6, 7), float64],) */;
  %462 = @func_4276() /* ty=Tensor[(80), int16] */;
  %463 = %461.0;
  (%462, %456, meta[relay.Constant][22] /* ty=Tensor[(231, 2), int16] */, %463)
}

def @func_5267(%var_5257: Tensor[(80), int16], %var_5258: Tensor[(2548), uint16], %var_5259: Tensor[(4004), uint16]) -> (Tensor[(10, 8, 12), float64], Tensor[(7, 364), bool], Tensor[(7, 52), uint16], Tensor[(80), int16], Tensor[(2548), uint16], Tensor[(4004), uint16], Tensor[(10, 8, 12), float64]) {
  %464 = @func_4383() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64]) */;
  %465 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 52), uint16] */, dtype="uint16") /* ty=Tensor[(7, 52), uint16] */;
  %466 = cast(%var_5257, dtype="int16") /* ty=Tensor[(80), int16] */;
  %467 = cast(%var_5258, dtype="uint16") /* ty=Tensor[(2548), uint16] */;
  %468 = cast(%var_5258, dtype="float32") /* ty=Tensor[(2548), float32] */;
  %469 = cast(%var_5259, dtype="uint16") /* ty=Tensor[(4004), uint16] */;
  %470 = reshape(%465, newshape=[1, 364]) /* ty=Tensor[(1, 364), uint16] */;
  %471 = reshape(%466, newshape=[80]) /* ty=Tensor[(80), int16] */;
  %472 = reshape(%467, newshape=[7, 364]) /* ty=Tensor[(7, 364), uint16] */;
  %473 = reshape(%468, newshape=[7, 364]) /* ty=Tensor[(7, 364), float32] */;
  %474 = reshape(%469, newshape=[11, 364]) /* ty=Tensor[(11, 364), uint16] */;
  %475 = @func_2584(%470, %471, %472, %473, %474) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(462), int16], Tensor[(10, 2, 4), float32], Tensor[(80), int16], Tensor[(10, 8, 12), float32], Tensor[(7, 364), float64], Tensor[(7, 364), bool], Tensor[(11, 364), uint8], Tensor[(10, 8, 12), float32], Tensor[(11, 6, 7), float64], Tensor[(10, 8, 12), float32]) */;
  %476 = %464.2;
  %477 = %475.6;
  %478 = @func_928() /* ty=Tensor[(10, 8, 12), float64] */;
  (%476, %477, meta[relay.Constant][23] /* ty=Tensor[(7, 52), uint16] */, %var_5257, %var_5258, %var_5259, %478)
}

def @func_4668(%var_4659: Tensor[(12, 14, 13), float64]) -> (Tensor[(12, 14, 13), float64], Tensor[(12, 14, 13), float64]) {
  %479 = cast(%var_4659, dtype="float64") /* ty=Tensor[(12, 14, 13), float64] */;
  %480 = cast(%var_4659, dtype="float64") /* ty=Tensor[(12, 14, 13), float64] */;
  %481 = asinh(%479) /* ty=Tensor[(12, 14, 13), float64] */;
  %482 = sigmoid(%480) /* ty=Tensor[(12, 14, 13), float64] */;
  (%481, %482)
}

def @func_6694() -> Tensor[(10, 8, 12), float32] {
  @func_2979() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_5560() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10), float64]) {
  %483 = @func_1619() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %484 = cast(meta[relay.Constant][24] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
  %485 = reshape(%484, newshape=[10]) /* ty=Tensor[(10), float64] */;
  %486 = @func_4425(%485) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1183), bool], Tensor[(10, 2, 1), float64], Tensor[(10), float64], Tensor[(20), float64]) */;
  %487 = %483.0;
  %488 = %486.1;
  (%487, %488, meta[relay.Constant][24] /* ty=Tensor[(10), float64] */)
}

def @func_6918() -> (Tensor[(10, 8, 12), float64],) {
  %489 = @func_5406() /* ty=Tensor[(10, 8, 12), float64] */;
  (%489,)
}

def @func_4425(%var_4420: Tensor[(10), float64]) -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1183), bool], Tensor[(10, 2, 1), float64], Tensor[(10), float64], Tensor[(20), float64]) {
  %490 = @func_1128() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %491 = cast(meta[relay.Constant][25] /* ty=Tensor[(1183), bool] */, dtype="bool") /* ty=Tensor[(1183), bool] */;
  %492 = reshape(%491, newshape=[13, 13, 7]) /* ty=Tensor[(13, 13, 7), bool] */;
  %493 = @func_2468(%492) /* ty=(Tensor[(13, 13, 7), bool], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) */;
  %494 = cast(%var_4420, dtype="float64") /* ty=Tensor[(10), float64] */;
  %495 = cast(meta[relay.Constant][26] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %496 = reshape(%494, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float64] */;
  %497 = reshape(%495, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float64] */;
  %498 = @func_1168(%496, %497) /* ty=(Tensor[(10, 2, 1), bool], Tensor[(10, 2, 1), float64]) */;
  %499 = %490.0;
  %500 = %493.1;
  %501 = %498.1;
  (%499, %500, meta[relay.Constant][25] /* ty=Tensor[(1183), bool] */, %501, %var_4420, meta[relay.Constant][26] /* ty=Tensor[(20), float64] */)
}

def @func_1060(%var_1037: Tensor[(462), int16]) -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint32], Tensor[(10, 7, 8), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(462), float64]) {
  %502 = @func_818() /* ty=(Tensor[(10, 8, 12), int8],) */;
  %503 = @func_928() /* ty=Tensor[(10, 8, 12), float64] */;
  %504 = cast(%503, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %505 = reshape(%504, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
  %506 = @func_647(%505) /* ty=(Tensor[(10, 8, 12), uint32],) */;
  %507 = cast(%var_1037, dtype="int16") /* ty=Tensor[(462), int16] */;
  %508 = reshape(%507, newshape=[462]) /* ty=Tensor[(462), int16] */;
  %509 = @func_501(%508) /* ty=(Tensor[(10, 7, 8), float64], Tensor[(10, 7, 8), float32], Tensor[(10, 8, 12), float64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) */;
  %510 = @func_353() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %511 = cast(%var_1037, dtype="float64") /* ty=Tensor[(462), float64] */;
  %512 = %502.0;
  %513 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  %514 = %506.0;
  %515 = %509.0;
  %516 = %510.0;
  %517 = @func_928() /* ty=Tensor[(10, 8, 12), float64] */;
  %518 = sin(%511) /* ty=Tensor[(462), float64] */;
  (%503, %512, %513, %514, %515, %516, %517, %518)
}

def @func_1619() -> (Tensor[(10, 8, 12), float32],) {
  %519 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  (%519,)
}

def @func_1128() -> (Tensor[(10, 8, 12), float64],) {
  %520 = @func_1074() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %521 = %520.0;
  (%521,)
}

def @func_353() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
  %522 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  %523 = cast(%522, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %524 = reshape(%523, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
  %525 = @func_321(%524) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) */;
  %526 = %525.2;
  %527 = cast(%526, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
  %528 = sigmoid(%527) /* ty=Tensor[(10, 8, 12), float64] */;
  (%522, %528)
}

def @func_3145(%var_3071: Tensor[(1001), uint32], %var_3094: Tensor[(1001), uint32]) -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32], Tensor[(1001), int16], Tensor[(1001), uint64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float64]) {
  %529 = cast(%var_3071, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
  %530 = cast(%var_3071, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
  %531 = reshape(%529, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), uint32] */;
  %532 = reshape(%530, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), uint32] */;
  %533 = @func_1709(%531, %532) /* ty=(Tensor[(13, 7, 11), uint32], Tensor[(10, 8, 12), uint8]) */;
  %534 = cast(%var_3094, dtype="int16") /* ty=Tensor[(1001), int16] */;
  %535 = shape_of(%var_3071, dtype="int32") /* ty=Tensor[(1), int32] */;
  %536 = cast(%var_3071, dtype="int16") /* ty=Tensor[(1001), int16] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?), int16] */;
  %538 = cast(%var_3071, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %539 = rsqrt(%538) /* ty=Tensor[(1001), float32] */;
  %540 = cast(%var_3071, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %541 = shape_of(%539, dtype="int32") /* ty=Tensor[(1), int32] */;
  %542 = cast(%539, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?), bool] */;
  %544 = less(%542, %543) /* ty=Tensor[(1001), bool] */;
  %545 = cast(%539, dtype="uint64") /* ty=Tensor[(1001), uint64] */;
  %546 = shape_of(%544, dtype="int32") /* ty=Tensor[(1), int32] */;
  %547 = cast(%544, dtype="uint64") /* ty=Tensor[(1001), uint64] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %549 = cast(meta[relay.Constant][27] /* ty=Tensor[(1573, 1), int8] */, dtype="int8") /* ty=Tensor[(1573, 1), int8] */;
  %550 = reshape(%549, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), int8] */;
  %551 = @func_998(%550) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(11, 11, 13), uint64], Tensor[(10, 8, 12), float64]) */;
  %552 = @func_2099() /* ty=Tensor[(10, 8, 12), float32] */;
  %553 = %533.1;
  %554 = @func_1982() /* ty=Tensor[(10, 8, 12), float32] */;
  %555 = bitwise_and(%536, %537) /* ty=Tensor[(1001), int16] */;
  %556 = add(%547, %548) /* ty=Tensor[(1001), uint64] */;
  %557 = @func_1638() /* ty=Tensor[(10, 8, 12), float32] */;
  %558 = %551.2;
  %559 = @func_2705() /* ty=Tensor[(10, 8, 12), float64] */;
  (%552, %553, %554, %555, %556, %557, %558, meta[relay.Constant][27] /* ty=Tensor[(1573, 1), int8] */, %559)
}

def @func_3416(%var_3409: Tensor[(11, 13, 5), uint32], %var_3410: Tensor[(11, 13, 5), uint32]) -> (Tensor[(11, 13, 5), uint32],) {
  %560 = cast(%var_3410, dtype="uint32") /* ty=Tensor[(11, 13, 5), uint32] */;
  %561 = shape_of(%var_3409, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%var_3409, dtype="uint32") /* ty=Tensor[(11, 13, 5), uint32] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %564 = left_shift(%562, %563) /* ty=Tensor[(11, 13, 5), uint32] */;
  (%564,)
}

def @func_6659() -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) {
  %565 = @func_4880() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %566 = @func_3181() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %567 = %565.0;
  %568 = %566.0;
  (%567, %568)
}

def @func_3871(%var_3808: Tensor[(6, 8, 10), float64], %var_3852: Tensor[(715), uint32], %var_3857: Tensor[(6, 8, 10), float64]) -> (Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float32], Tensor[(6, 8, 10), float32], Tensor[(11, 13, 5), uint32], Tensor[(715), uint32], Tensor[(6, 8, 10), int64], Tensor[(10, 8, 12), float64]) {
  %569 = @func_2816() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8]) */;
  %570 = @func_3688() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) */;
  %571 = cast(%var_3808, dtype="float64") /* ty=Tensor[(6, 8, 10), float64] */;
  %572 = cosh(%571) /* ty=Tensor[(6, 8, 10), float64] */;
  %573 = cast(%572, dtype="bool") /* ty=Tensor[(6, 8, 10), bool] */;
  %574 = shape_of(%var_3808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%var_3808, dtype="bool") /* ty=Tensor[(6, 8, 10), bool] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %577 = not_equal(%575, %576) /* ty=Tensor[(6, 8, 10), bool] */;
  %578 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 8, 10), bool] */, dtype="int64") /* ty=Tensor[(6, 8, 10), int64] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%577, dtype="int64") /* ty=Tensor[(6, 8, 10), int64] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %582 = bitwise_or(%580, %581) /* ty=Tensor[(6, 8, 10), int64] */;
  %583 = cast(%var_3808, dtype="bool") /* ty=Tensor[(6, 8, 10), bool] */;
  %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%582, dtype="bool") /* ty=Tensor[(6, 8, 10), bool] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %587 = greater_equal(%585, %586) /* ty=Tensor[(6, 8, 10), bool] */;
  %588 = cast(%587, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
  %589 = log(%588) /* ty=Tensor[(6, 8, 10), float32] */;
  %590 = cast(%572, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
  %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%589, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %594 = cast(%var_3852, dtype="uint32") /* ty=Tensor[(715), uint32] */;
  %595 = cast(%var_3852, dtype="uint32") /* ty=Tensor[(715), uint32] */;
  %596 = reshape(%594, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), uint32] */;
  %597 = reshape(%595, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), uint32] */;
  %598 = @func_3416(%596, %597) /* ty=(Tensor[(11, 13, 5), uint32],) */;
  %599 = cast(%var_3857, dtype="int64") /* ty=Tensor[(6, 8, 10), int64] */;
  %600 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%572, dtype="int64") /* ty=Tensor[(6, 8, 10), int64] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %603 = %569.3;
  %604 = cast(%603, dtype="int8") /* ty=Tensor[(1573, 1), int8] */;
  %605 = reshape(%604, newshape=[1573]) /* ty=Tensor[(1573), int8] */;
  %606 = @func_2230(%605) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) */;
  %607 = %570.0;
  %608 = mod(%592, %593) /* ty=Tensor[(6, 8, 10), float32] */;
  %609 = %598.0;
  %610 = right_shift(%601, %602) /* ty=Tensor[(6, 8, 10), int64] */;
  %611 = %606.2;
  (%603, %607, %608, %609, %var_3852, %610, %611)
}

def @func_4759() -> (Tensor[(10, 8, 12), int8],) {
  %612 = @func_818() /* ty=(Tensor[(10, 8, 12), int8],) */;
  %613 = %612.0;
  (%613,)
}

def @func_6559() -> (Tensor[(10, 8, 12), int8],) {
  %614 = @func_4759() /* ty=(Tensor[(10, 8, 12), int8],) */;
  %615 = %614.0;
  (%615,)
}

def @func_5288(%var_5284: Tensor[(12, 2, 1), float32]) -> Tensor[(12, 2, 1), float32] {
  %616 = cast(-4.64707f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %617 = cast(%var_5284, dtype="float32") /* ty=Tensor[(12, 2, 1), float32] */;
  divide(%616, %617) /* ty=Tensor[(12, 2, 1), float32] */
}

def @func_6386() -> (Tensor[(10, 8, 12), int8],) {
  %618 = @func_818() /* ty=(Tensor[(10, 8, 12), int8],) */;
  %619 = %618.0;
  (%619,)
}

def @func_2468(%var_2424: Tensor[(13, 13, 7), bool]) -> (Tensor[(13, 13, 7), bool], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) {
  %620 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 13, 7), bool] */, dtype="bool") /* ty=Tensor[(1, 13, 7), bool] */;
  %621 = cast(%var_2424, dtype="bool") /* ty=Tensor[(13, 13, 7), bool] */;
  %622 = @func_1585() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %623 = @func_1128() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %624 = cast(meta[relay.Constant][30] /* ty=Tensor[(1573), int8] */, dtype="int8") /* ty=Tensor[(1573), int8] */;
  %625 = reshape(%624, newshape=[1573]) /* ty=Tensor[(1573), int8] */;
  %626 = @func_2230(%625) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) */;
  %627 = logical_or(%620, %621) /* ty=Tensor[(13, 13, 7), bool] */;
  %628 = %622.1;
  %629 = %623.0;
  %630 = %626.1;
  (%627, %628, %629, %630, meta[relay.Constant][30] /* ty=Tensor[(1573), int8] */)
}

def @func_6380() -> (Tensor[(10, 8, 12), float32],) {
  %631 = @func_3181() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %632 = %631.0;
  (%632,)
}

def @func_4966() -> (Tensor[(10, 8, 12), float64],) {
  %633 = @func_4383() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64]) */;
  %634 = %633.2;
  (%634,)
}

def @func_6458() -> (Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float64]) {
  %635 = @func_4657() /* ty=(Tensor[(10, 8, 12), bool],) */;
  %636 = @func_4880() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %637 = %635.0;
  %638 = %636.0;
  (%637, %638)
}

def @func_998(%var_966: Tensor[(11, 11, 13), int8]) -> (Tensor[(10, 8, 12), float64], Tensor[(11, 11, 13), uint64], Tensor[(10, 8, 12), float64]) {
  %639 = cast(%var_966, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %640 = sqrt(%639) /* ty=Tensor[(11, 11, 13), float32] */;
  %641 = cast(%640, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %642 = asinh(%641) /* ty=Tensor[(11, 11, 13), float32] */;
  %643 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 1, 13), int8] */, dtype="int8") /* ty=Tensor[(11, 1, 13), int8] */;
  %644 = cast(%var_966, dtype="int8") /* ty=Tensor[(11, 11, 13), int8] */;
  %645 = logical_xor(%643, %644) /* ty=Tensor[(11, 11, 13), int8] */;
  %646 = cast(%645, dtype="uint64") /* ty=Tensor[(11, 11, 13), uint64] */;
  %647 = shape_of(%642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%642, dtype="uint64") /* ty=Tensor[(11, 11, 13), uint64] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %650 = @func_928() /* ty=Tensor[(10, 8, 12), float64] */;
  %651 = bitwise_or(%648, %649) /* ty=Tensor[(11, 11, 13), uint64] */;
  %652 = @func_928() /* ty=Tensor[(10, 8, 12), float64] */;
  (%650, %651, %652)
}

def @func_3213() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
  %653 = @func_2316() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) */;
  %654 = @func_2341() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %655 = %653.0;
  %656 = %654.0;
  (%655, %656)
}

def @func_5589() -> Tensor[(10, 8, 12), float32] {
  @func_385() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_1331(%var_1296: bool, %var_1297: Tensor[(1, 4, 10), bool], %var_1302: Tensor[(462), int16]) -> (Tensor[(1, 4, 10), bool], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float32]) {
  %657 = cast(%var_1296, dtype="bool") /* ty=bool */;
  %658 = cast(%var_1297, dtype="bool") /* ty=Tensor[(1, 4, 10), bool] */;
  %659 = cast(%var_1302, dtype="int16") /* ty=Tensor[(462), int16] */;
  %660 = reshape(%659, newshape=[462]) /* ty=Tensor[(462), int16] */;
  %661 = @func_501(%660) /* ty=(Tensor[(10, 7, 8), float64], Tensor[(10, 7, 8), float32], Tensor[(10, 8, 12), float64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) */;
  %662 = @func_818() /* ty=(Tensor[(10, 8, 12), int8],) */;
  %663 = logical_and(%657, %658) /* ty=Tensor[(1, 4, 10), bool] */;
  %664 = %661.2;
  %665 = %662.0;
  %666 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  (%663, %664, %var_1302, %665, %666)
}

def @func_6054() -> (Tensor[(10, 8, 12), float64],) {
  %667 = @func_4994() /* ty=Tensor[(10, 8, 12), float64] */;
  (%667,)
}

def @func_5393() -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), int8]) {
  %668 = @func_2816() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8]) */;
  %669 = @func_818() /* ty=(Tensor[(10, 8, 12), int8],) */;
  %670 = %668.2;
  %671 = %669.0;
  (%670, %671)
}

def @func_254() -> Tensor[(10, 8, 12), float32] {
  %672 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 8, 12), float32] */, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  sinh(%672) /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_5892(%var_5885: Tensor[(5, 10, 16), float64]) -> (Tensor[(5, 10, 16), float64],) {
  %673 = cast(%var_5885, dtype="float64") /* ty=Tensor[(5, 10, 16), float64] */;
  %674 = sigmoid(%673) /* ty=Tensor[(5, 10, 16), float64] */;
  (%674,)
}

def @func_6436() -> (Tensor[(10, 8, 12), float64],) {
  %675 = @func_4994() /* ty=Tensor[(10, 8, 12), float64] */;
  (%675,)
}

def @func_698() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
  %676 = @func_353() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %677 = @func_385() /* ty=Tensor[(10, 8, 12), float32] */;
  %678 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  %679 = %676.1;
  (%677, %678, %679)
}

def @func_3948() -> (Tensor[(10, 8, 12), float32],) {
  %680 = @func_2099() /* ty=Tensor[(10, 8, 12), float32] */;
  (%680,)
}

def @func_3181() -> (Tensor[(10, 8, 12), float32],) {
  %681 = @func_385() /* ty=Tensor[(10, 8, 12), float32] */;
  (%681,)
}

def @func_3322() -> (Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), bool]) {
  %682 = @func_1074() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %683 = %682.0;
  %684 = @func_1917() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8]) */;
  %685 = %684.1;
  %686 = cast(%685, dtype="uint8") /* ty=Tensor[(10, 8, 12), uint8] */;
  %687 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %688 = cast(%683, dtype="uint8") /* ty=Tensor[(10, 8, 12), uint8] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %690 = cast(%685, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %691 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%683, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %694 = logical_xor(%688, %689) /* ty=Tensor[(10, 8, 12), uint8] */;
  %695 = logical_and(%692, %693) /* ty=Tensor[(10, 8, 12), bool] */;
  (%694, %695)
}

def @func_3562() -> (Tensor[(10, 8, 12), float64],) {
  %696 = @func_3213() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %697 = %696.1;
  (%697,)
}

def @func_6976() -> (Tensor[(10, 8, 12), uint64],) {
  %698 = @func_6918() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %699 = %698.0;
  %700 = cast(%699, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %701 = reshape(%700, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
  %702 = @func_6860(%701) /* ty=(Tensor[(10, 8, 12), int16],) */;
  %703 = %702.0;
  %704 = cast(%703, dtype="uint64") /* ty=Tensor[(10, 8, 12), uint64] */;
  %705 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%699, dtype="uint64") /* ty=Tensor[(10, 8, 12), uint64] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %708 = bitwise_or(%706, %707) /* ty=Tensor[(10, 8, 12), uint64] */;
  (%708,)
}

def @func_1546(%var_1521: Tensor[(10, 2, 4), int16], %var_1522: Tensor[(10, 2, 4), int16]) -> (Tensor[(10, 2, 4), int16], Tensor[(10, 2, 4), float32]) {
  %709 = cast(%var_1522, dtype="int16") /* ty=Tensor[(10, 2, 4), int16] */;
  %710 = shape_of(%var_1521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%var_1521, dtype="int16") /* ty=Tensor[(10, 2, 4), int16] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %713 = cast(%var_1522, dtype="float32") /* ty=Tensor[(10, 2, 4), float32] */;
  %714 = bitwise_or(%711, %712) /* ty=Tensor[(10, 2, 4), int16] */;
  %715 = cosh(%713) /* ty=Tensor[(10, 2, 4), float32] */;
  (%714, %715)
}

def @func_2584(%var_2479: Tensor[(1, 364), uint16], %var_2482: Tensor[(80), int16], %var_2520: Tensor[(7, 364), uint16], %var_2540: Tensor[(7, 364), float32], %var_2561: Tensor[(11, 364), uint16]) -> (Tensor[(10, 8, 12), float32], Tensor[(462), int16], Tensor[(10, 2, 4), float32], Tensor[(80), int16], Tensor[(10, 8, 12), float32], Tensor[(7, 364), float64], Tensor[(7, 364), bool], Tensor[(11, 364), uint8], Tensor[(10, 8, 12), float32], Tensor[(11, 6, 7), float64], Tensor[(10, 8, 12), float32]) {
  %716 = cast(%var_2479, dtype="uint16") /* ty=Tensor[(1, 364), uint16] */;
  %717 = reshape(%716, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
  %718 = @func_1482(%717) /* ty=(Tensor[(7, 4, 13), uint16], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) */;
  %719 = cast(%var_2482, dtype="int16") /* ty=Tensor[(80), int16] */;
  %720 = cast(%var_2482, dtype="int16") /* ty=Tensor[(80), int16] */;
  %721 = reshape(%719, newshape=[10, 2, 4]) /* ty=Tensor[(10, 2, 4), int16] */;
  %722 = reshape(%720, newshape=[10, 2, 4]) /* ty=Tensor[(10, 2, 4), int16] */;
  %723 = @func_1546(%721, %722) /* ty=(Tensor[(10, 2, 4), int16], Tensor[(10, 2, 4), float32]) */;
  %724 = cast(%var_2479, dtype="uint16") /* ty=Tensor[(1, 364), uint16] */;
  %725 = reshape(%724, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
  %726 = @func_1482(%725) /* ty=(Tensor[(7, 4, 13), uint16], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) */;
  %727 = cast(%var_2520, dtype="float32") /* ty=Tensor[(7, 364), float32] */;
  %728 = log2(%727) /* ty=Tensor[(7, 364), float32] */;
  %729 = cast(%728, dtype="float64") /* ty=Tensor[(7, 364), float64] */;
  %730 = cast(%var_2540, dtype="int64") /* ty=Tensor[(7, 364), int64] */;
  %731 = shape_of(%728, dtype="int32") /* ty=Tensor[(2), int32] */;
  %732 = cast(%728, dtype="int64") /* ty=Tensor[(7, 364), int64] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %734 = bitwise_xor(%732, %733) /* ty=Tensor[(7, 364), int64] */;
  %735 = cast(%var_2479, dtype="uint64") /* ty=Tensor[(1, 364), uint64] */;
  %736 = cast(%var_2520, dtype="uint64") /* ty=Tensor[(7, 364), uint64] */;
  %737 = add(%735, %736) /* ty=Tensor[(7, 364), uint64] */;
  %738 = cast(%737, dtype="bool") /* ty=Tensor[(7, 364), bool] */;
  %739 = shape_of(%734, dtype="int32") /* ty=Tensor[(2), int32] */;
  %740 = cast(%734, dtype="bool") /* ty=Tensor[(7, 364), bool] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %742 = cast(%var_2479, dtype="uint8") /* ty=Tensor[(1, 364), uint8] */;
  %743 = cast(%var_2561, dtype="uint8") /* ty=Tensor[(11, 364), uint8] */;
  %744 = @func_1917() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8]) */;
  %745 = %718.2;
  %746 = cast(%745, dtype="int16") /* ty=Tensor[(462), int16] */;
  %747 = cast(%745, dtype="int16") /* ty=Tensor[(462), int16] */;
  %748 = reshape(%746, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
  %749 = reshape(%747, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
  %750 = @func_107(%748, %749) /* ty=(Tensor[(11, 6, 7), float64],) */;
  %751 = @func_2030() /* ty=Tensor[(10, 8, 12), float32] */;
  %752 = %723.1;
  %753 = %726.3;
  %754 = asinh(%729) /* ty=Tensor[(7, 364), float64] */;
  %755 = logical_and(%740, %741) /* ty=Tensor[(7, 364), bool] */;
  %756 = subtract(%742, %743) /* ty=Tensor[(11, 364), uint8] */;
  %757 = %744.0;
  %758 = %750.0;
  %759 = @func_1638() /* ty=Tensor[(10, 8, 12), float32] */;
  (%751, %745, %752, %var_2482, %753, %754, %755, %756, %757, %758, %759)
}

def @func_4582(%var_4551: Tensor[(40, 1), bool]) -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1, 4, 10), bool], Tensor[(40, 1), bool], Tensor[(462), int16], Tensor[(1, 80), bool], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), bool]) {
  %760 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 80), int16] */, dtype="int16") /* ty=Tensor[(1, 80), int16] */;
  %761 = reshape(%760, newshape=[40, 2]) /* ty=Tensor[(40, 2), int16] */;
  %762 = @func_2416(%761) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 2, 4), float32], Tensor[(40, 2), float64]) */;
  %763 = @func_3562() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %764 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %765 = cast(%var_4551, dtype="bool") /* ty=Tensor[(40, 1), bool] */;
  %766 = cast(meta[relay.Constant][34] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
  %767 = reshape(%764, newshape=[]) /* ty=bool */;
  %768 = reshape(%765, newshape=[1, 4, 10]) /* ty=Tensor[(1, 4, 10), bool] */;
  %769 = reshape(%766, newshape=[462]) /* ty=Tensor[(462), int16] */;
  %770 = @func_1331(%767, %768, %769) /* ty=(Tensor[(1, 4, 10), bool], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float32]) */;
  %771 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 80), int16] */, dtype="bool") /* ty=Tensor[(1, 80), bool] */;
  %772 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %773 = @func_3961() /* ty=Tensor[(10, 8, 12), float64] */;
  %774 = cast(%773, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
  %775 = cosh(%774) /* ty=Tensor[(10, 8, 12), float64] */;
  %776 = cast(%773, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%775, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %780 = equal(%778, %779) /* ty=Tensor[(10, 8, 12), bool] */;
  %781 = cast(False /* ty=bool */, dtype="float64") /* ty=float64 */;
  %782 = cast(%780, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
  %783 = %762.0;
  %784 = @func_3908() /* ty=Tensor[(10, 8, 12), bool] */;
  %785 = %763.0;
  %786 = @func_1982() /* ty=Tensor[(10, 8, 12), float32] */;
  %787 = %770.0;
  %788 = logical_and(%771, %772) /* ty=Tensor[(1, 80), bool] */;
  %789 = divide(%781, %782) /* ty=Tensor[(10, 8, 12), float64] */;
  %790 = @func_3908() /* ty=Tensor[(10, 8, 12), bool] */;
  (%783, %784, %785, %786, %787, %var_4551, meta[relay.Constant][34] /* ty=Tensor[(462), int16] */, %788, %789, %790)
}

def @func_5317() -> Tensor[(10, 8, 12), float32] {
  %791 = @func_1619() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %791.0
}

def @func_1168(%var_1140: Tensor[(10, 1, 1), float64], %var_1141: Tensor[(10, 2, 1), float64]) -> (Tensor[(10, 2, 1), bool], Tensor[(10, 2, 1), float64]) {
  %792 = cast(%var_1140, dtype="bool") /* ty=Tensor[(10, 1, 1), bool] */;
  %793 = cast(%var_1141, dtype="bool") /* ty=Tensor[(10, 2, 1), bool] */;
  %794 = cast(%var_1140, dtype="bool") /* ty=Tensor[(10, 1, 1), bool] */;
  %795 = cast(%var_1141, dtype="bool") /* ty=Tensor[(10, 2, 1), bool] */;
  %796 = greater(%794, %795) /* ty=Tensor[(10, 2, 1), bool] */;
  %797 = cast(%796, dtype="float64") /* ty=Tensor[(10, 2, 1), float64] */;
  %798 = less_equal(%792, %793) /* ty=Tensor[(10, 2, 1), bool] */;
  %799 = cos(%797) /* ty=Tensor[(10, 2, 1), float64] */;
  (%798, %799)
}

def @func_3456(%var_3447: Tensor[(462), int16]) -> (Tensor[(10, 8, 12), float32], Tensor[(11, 6, 7), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
  %800 = @func_3181() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %801 = cast(%var_3447, dtype="int16") /* ty=Tensor[(462), int16] */;
  %802 = cast(%var_3447, dtype="int16") /* ty=Tensor[(462), int16] */;
  %803 = reshape(%801, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
  %804 = reshape(%802, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
  %805 = @func_107(%803, %804) /* ty=(Tensor[(11, 6, 7), float64],) */;
  %806 = @func_1585() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %807 = @func_774() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %808 = %800.0;
  %809 = %805.0;
  %810 = %806.1;
  %811 = %807.0;
  (%808, %809, %var_3447, %810, %811)
}

def @func_5494() -> (Tensor[(10, 8, 12), float32],) {
  %812 = @func_3948() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %813 = %812.0;
  (%813,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5329() -> Tensor[(80), int16] {
  @func_4333() /* ty=Tensor[(80), int16] */
}

def @func_5591() -> Tensor[(10, 8, 12), float32] {
  @func_5589() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_5819() -> (Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float32]) {
  @func_5817() /* ty=(Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float32]) */
}

def @func_6860(%var_6827: Tensor[(10, 8, 12), float32]) -> (Tensor[(10, 8, 12), int16],) {
  %0 = @func_1619() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %1 = %0.0;
  %2 = cast(%var_6827, dtype="int16") /* ty=Tensor[(10, 8, 12), int16] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="int16") /* ty=Tensor[(10, 8, 12), int16] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %6 = bitwise_and(%4, %5) /* ty=Tensor[(10, 8, 12), int16] */;
  (%6,)
}

def @func_6437() -> (Tensor[(10, 8, 12), float64],) {
  %8 = fn () -> (Tensor[(10, 8, 12), float64],) {
    %7 = @func_4994() /* ty=Tensor[(10, 8, 12), float64] */;
    (%7,)
  };
  %8() /* ty=(Tensor[(10, 8, 12), float64],) */
}

def @func_1919() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8]) {
  @func_1917() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8]) */
}

def @func_255() -> Tensor[(10, 8, 12), float32] {
  %10 = fn () -> Tensor[(10, 8, 12), float32] {
    %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 8, 12), float32] */, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
    sinh(%9) /* ty=Tensor[(10, 8, 12), float32] */
  };
  %10() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_861() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8]) {
  @func_859() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8]) */
}

def @func_5633(%var_5618: Tensor[(14, 15, 8), uint16], %var_5619: Tensor[(14, 15, 8), uint16]) -> Tensor[(14, 15, 8), uint16] {
  %11 = cast(%var_5619, dtype="uint16") /* ty=Tensor[(14, 15, 8), uint16] */;
  %12 = shape_of(%var_5618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%var_5618, dtype="uint16") /* ty=Tensor[(14, 15, 8), uint16] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  multiply(%13, %14) /* ty=Tensor[(14, 15, 8), uint16] */
}

def @func_5319() -> Tensor[(10, 8, 12), float32] {
  @func_5317() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_5291(%var_5289: Tensor[(12, 2, 1), float32]) -> Tensor[(12, 2, 1), float32] {
  @func_5288(%var_5289) /* ty=Tensor[(12, 2, 1), float32] */
}

def @func_2342() -> (Tensor[(10, 8, 12), float64],) {
  %19 = fn () -> (Tensor[(10, 8, 12), float64],) {
    %15 = @func_2316() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) */;
    %16 = %15.5;
    %17 = cast(%16, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
    %18 = tan(%17) /* ty=Tensor[(10, 8, 12), float64] */;
    (%18,)
  };
  %19() /* ty=(Tensor[(10, 8, 12), float64],) */
}

def @func_2706() -> Tensor[(10, 8, 12), float64] {
  %22 = fn () -> Tensor[(10, 8, 12), float64] {
    %20 = @func_1638() /* ty=Tensor[(10, 8, 12), float32] */;
    %21 = cast(%20, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
    acos(%21) /* ty=Tensor[(10, 8, 12), float64] */
  };
  %22() /* ty=Tensor[(10, 8, 12), float64] */
}

def @func_647(%var_634: Tensor[(10, 8, 12), float32]) -> (Tensor[(10, 8, 12), uint32],) {
  %23 = @func_353() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %24 = %23.0;
  %25 = cast(%var_634, dtype="uint32") /* ty=Tensor[(10, 8, 12), uint32] */;
  %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%24, dtype="uint32") /* ty=Tensor[(10, 8, 12), uint32] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %29 = minimum(%27, %28) /* ty=Tensor[(10, 8, 12), uint32] */;
  (%29,)
}

def @func_3007() -> Tensor[(10, 8, 12), float64] {
  %31 = fn () -> Tensor[(10, 8, 12), float64] {
    %30 = @func_2613() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) */;
    %30.1
  };
  %31() /* ty=Tensor[(10, 8, 12), float64] */
}

def @func_4229(%var_4204: uint64, %var_4206: Tensor[(1, 462), int16], %var_4221: Tensor[(8, 462), int16]) -> (Tensor[(10, 8, 12), float32], Tensor[(462), int16], uint64, Tensor[(275), uint64], Tensor[(8, 462), bool]) {
  %32 = @func_2816() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8]) */;
  %33 = cast(%var_4204, dtype="uint64") /* ty=uint64 */;
  %34 = cast(meta[relay.Constant][1] /* ty=Tensor[(275), uint64] */, dtype="uint64") /* ty=Tensor[(275), uint64] */;
  %35 = cast(%var_4206, dtype="int16") /* ty=Tensor[(1, 462), int16] */;
  %36 = reshape(%33, newshape=[]) /* ty=uint64 */;
  %37 = reshape(%34, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint64] */;
  %38 = reshape(%35, newshape=[462]) /* ty=Tensor[(462), int16] */;
  %39 = @func_2082(%36, %37, %38) /* ty=(Tensor[(11, 5, 5), int64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) */;
  %40 = cast(%var_4206, dtype="bool") /* ty=Tensor[(1, 462), bool] */;
  %41 = cast(%var_4221, dtype="bool") /* ty=Tensor[(8, 462), bool] */;
  %42 = %32.1;
  %43 = %39.2;
  %44 = not_equal(%40, %41) /* ty=Tensor[(8, 462), bool] */;
  (%42, %43, %var_4204, meta[relay.Constant][1] /* ty=Tensor[(275), uint64] */, %44)
}

def @func_2118() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 2, 4), int16], Tensor[(80), int16]) {
  %45 = cast(meta[relay.Constant][2] /* ty=Tensor[(80), int16] */, dtype="int16") /* ty=Tensor[(80), int16] */;
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(80), int16] */, dtype="int16") /* ty=Tensor[(80), int16] */;
  %47 = reshape(%45, newshape=[10, 2, 4]) /* ty=Tensor[(10, 2, 4), int16] */;
  %48 = reshape(%46, newshape=[10, 2, 4]) /* ty=Tensor[(10, 2, 4), int16] */;
  %49 = @func_1546(%47, %48) /* ty=(Tensor[(10, 2, 4), int16], Tensor[(10, 2, 4), float32]) */;
  %50 = @func_1638() /* ty=Tensor[(10, 8, 12), float32] */;
  %51 = %49.0;
  (%50, %51, meta[relay.Constant][2] /* ty=Tensor[(80), int16] */)
}

def @func_5016() -> Tensor[(10, 8, 12), float32] {
  @func_1982() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_5561() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10), float64]) {
  %58 = fn () -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10), float64]) {
    %52 = @func_1619() /* ty=(Tensor[(10, 8, 12), float32],) */;
    %53 = cast(meta[relay.Constant][3] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
    %54 = reshape(%53, newshape=[10]) /* ty=Tensor[(10), float64] */;
    %55 = @func_4425(%54) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1183), bool], Tensor[(10, 2, 1), float64], Tensor[(10), float64], Tensor[(20), float64]) */;
    %56 = %52.0;
    %57 = %55.1;
    (%56, %57, meta[relay.Constant][3] /* ty=Tensor[(10), float64] */)
  };
  %58() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10), float64]) */
}

def @func_775() -> (Tensor[(10, 8, 12), float64],) {
  %71 = fn () -> (Tensor[(10, 8, 12), float64],) {
    %59 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
    %60 = cast(%59, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
    %61 = reshape(%60, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
    %62 = @func_321(%61) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) */;
    %63 = %62.1;
    %64 = cast(%59, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
    %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
    %66 = cast(%63, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
    %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %68 = logical_or(%66, %67) /* ty=Tensor[(10, 8, 12), bool] */;
    %69 = cast(%68, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
    %70 = asin(%69) /* ty=Tensor[(10, 8, 12), float64] */;
    (%70,)
  };
  %71() /* ty=(Tensor[(10, 8, 12), float64],) */
}

def @func_5495() -> (Tensor[(10, 8, 12), float32],) {
  %74 = fn () -> (Tensor[(10, 8, 12), float32],) {
    %72 = @func_3948() /* ty=(Tensor[(10, 8, 12), float32],) */;
    %73 = %72.0;
    (%73,)
  };
  %74() /* ty=(Tensor[(10, 8, 12), float32],) */
}

def @func_3404() -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) {
  %79 = fn () -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) {
    %75 = @func_3322() /* ty=(Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), bool]) */;
    %76 = @func_3006() /* ty=Tensor[(10, 8, 12), float64] */;
    %77 = %75.0;
    %78 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
    (%76, %77, %78)
  };
  %79() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) */
}

def @func_930() -> Tensor[(10, 8, 12), float64] {
  @func_928() /* ty=Tensor[(10, 8, 12), float64] */
}

def @func_6411(%var_6410: Tensor[(16, 5, 9), int32]) -> (Tensor[(16, 5, 9), int32], Tensor[(40, 1), bool], Tensor[(40), bool], Tensor[(10, 8, 12), float32]) {
  %91 = fn (%var_6392: Tensor[(16, 5, 9), int32]) -> (Tensor[(16, 5, 9), int32], Tensor[(40, 1), bool], Tensor[(40), bool], Tensor[(10, 8, 12), float32]) {
    %80 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 5, 9), int32] */, dtype="int32") /* ty=Tensor[(16, 5, 9), int32] */;
    %81 = shape_of(%var_6392, dtype="int32") /* ty=Tensor[(3), int32] */;
    %82 = cast(%var_6392, dtype="int32") /* ty=Tensor[(16, 5, 9), int32] */;
    %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %84 = cast(meta[relay.Constant][5] /* ty=Tensor[(40), bool] */, dtype="bool") /* ty=Tensor[(40), bool] */;
    %85 = reshape(%84, newshape=[40, 1]) /* ty=Tensor[(40, 1), bool] */;
    %86 = @func_4582(%85) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1, 4, 10), bool], Tensor[(40, 1), bool], Tensor[(462), int16], Tensor[(1, 80), bool], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), bool]) */;
    %87 = @func_3948() /* ty=(Tensor[(10, 8, 12), float32],) */;
    %88 = minimum(%82, %83) /* ty=Tensor[(16, 5, 9), int32] */;
    %89 = %86.5;
    %90 = %87.0;
    (%88, %89, meta[relay.Constant][5] /* ty=Tensor[(40), bool] */, %90)
  };
  %91(%var_6410) /* ty=(Tensor[(16, 5, 9), int32], Tensor[(40, 1), bool], Tensor[(40), bool], Tensor[(10, 8, 12), float32]) */
}

def @func_1074() -> (Tensor[(10, 8, 12), float64],) {
  %92 = @func_353() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %93 = %92.1;
  (%93,)
}

def @func_1253() -> (Tensor[(10, 8, 12), float64],) {
  %94 = @func_928() /* ty=Tensor[(10, 8, 12), float64] */;
  (%94,)
}

def @func_3642(%var_3572: Tensor[(12, 3, 10), float64], %var_3573: Tensor[(12, 3, 10), float64]) -> (Tensor[(12, 3, 10), float64], Tensor[(12, 3, 10), float32], Tensor[(10, 8, 12), float64], Tensor[(12, 3, 10), bool], Tensor[(10, 8, 12), float64]) {
  %95 = cast(%var_3573, dtype="float64") /* ty=Tensor[(12, 3, 10), float64] */;
  %96 = shape_of(%var_3572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%var_3572, dtype="float64") /* ty=Tensor[(12, 3, 10), float64] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %99 = cast(%var_3572, dtype="float32") /* ty=Tensor[(12, 3, 10), float32] */;
  %100 = @func_774() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %101 = cast(%var_3572, dtype="bool") /* ty=Tensor[(12, 3, 10), bool] */;
  %102 = shape_of(%var_3573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%var_3573, dtype="bool") /* ty=Tensor[(12, 3, 10), bool] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %105 = greater_equal(%103, %104) /* ty=Tensor[(12, 3, 10), bool] */;
  %106 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 3, 10), float64] */, dtype="int64") /* ty=Tensor[(12, 3, 10), int64] */;
  %107 = shape_of(%var_3573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%var_3573, dtype="int64") /* ty=Tensor[(12, 3, 10), int64] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %110 = bitwise_and(%108, %109) /* ty=Tensor[(12, 3, 10), int64] */;
  %111 = cast(%110, dtype="bool") /* ty=Tensor[(12, 3, 10), bool] */;
  %112 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%105, dtype="bool") /* ty=Tensor[(12, 3, 10), bool] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %115 = @func_1253() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %116 = floor_divide(%97, %98) /* ty=Tensor[(12, 3, 10), float64] */;
  %117 = rsqrt(%99) /* ty=Tensor[(12, 3, 10), float32] */;
  %118 = %100.0;
  %119 = equal(%113, %114) /* ty=Tensor[(12, 3, 10), bool] */;
  %120 = %115.0;
  (%116, %117, %118, %119, %120)
}

def @func_4967() -> (Tensor[(10, 8, 12), float64],) {
  %123 = fn () -> (Tensor[(10, 8, 12), float64],) {
    %121 = @func_4383() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64]) */;
    %122 = %121.2;
    (%122,)
  };
  %123() /* ty=(Tensor[(10, 8, 12), float64],) */
}

def @func_5005() -> Tensor[(80), int16] {
  @func_5003() /* ty=Tensor[(80), int16] */
}

def @func_928() -> Tensor[(10, 8, 12), float64] {
  %124 = @func_859() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8]) */;
  %125 = %124.0;
  %126 = cast(%125, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
  sin(%126) /* ty=Tensor[(10, 8, 12), float64] */
}

def @func_2418(%var_2417: Tensor[(40, 2), int16]) -> (Tensor[(10, 8, 12), float64], Tensor[(10, 2, 4), float32], Tensor[(40, 2), float64]) {
  %137 = fn (%var_2395: Tensor[(40, 2), int16]) -> (Tensor[(10, 8, 12), float64], Tensor[(10, 2, 4), float32], Tensor[(40, 2), float64]) {
    %127 = @func_698() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
    %128 = cast(%var_2395, dtype="int16") /* ty=Tensor[(40, 2), int16] */;
    %129 = cast(%var_2395, dtype="int16") /* ty=Tensor[(40, 2), int16] */;
    %130 = reshape(%128, newshape=[10, 2, 4]) /* ty=Tensor[(10, 2, 4), int16] */;
    %131 = reshape(%129, newshape=[10, 2, 4]) /* ty=Tensor[(10, 2, 4), int16] */;
    %132 = @func_1546(%130, %131) /* ty=(Tensor[(10, 2, 4), int16], Tensor[(10, 2, 4), float32]) */;
    %133 = cast(%var_2395, dtype="float64") /* ty=Tensor[(40, 2), float64] */;
    %134 = %127.2;
    %135 = %132.1;
    %136 = atanh(%133) /* ty=Tensor[(40, 2), float64] */;
    (%134, %135, %136)
  };
  %137(%var_2417) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 2, 4), float32], Tensor[(40, 2), float64]) */
}

def @func_3760(%var_3719: int64, %var_3720: Tensor[(1, 14, 16), int64]) -> (Tensor[(10, 8, 12), float64], Tensor[(32), float64], Tensor[(?, 14, 16), bool], Tensor[(10, 8, 12), float32], Tensor[(1, 14, 16), float64]) {
  %138 = cast(meta[relay.Constant][7] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %139 = reshape(%138, newshape=[2, 16]) /* ty=Tensor[(2, 16), float64] */;
  %140 = @func_1862(%139) /* ty=(Tensor[(2, 16), float64], Tensor[(10, 8, 12), float64]) */;
  %141 = cast(%var_3719, dtype="bool") /* ty=bool */;
  %142 = cast(%var_3720, dtype="bool") /* ty=Tensor[(1, 14, 16), bool] */;
  %143 = less_equal(%141, %142) /* ty=Tensor[(1, 14, 16), bool] */;
  %144 = cast(%143, dtype="bool") /* ty=Tensor[(1, 14, 16), bool] */;
  %145 = shape_of(%var_3720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%var_3720, dtype="bool") /* ty=Tensor[(1, 14, 16), bool] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %148 = @func_2613() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) */;
  %149 = cast(%143, dtype="float32") /* ty=Tensor[(1, 14, 16), float32] */;
  %150 = cast(%var_3719, dtype="float32") /* ty=float32 */;
  %151 = maximum(%149, %150) /* ty=Tensor[(1, 14, 16), float32] */;
  %152 = cast(%151, dtype="float64") /* ty=Tensor[(1, 14, 16), float64] */;
  %153 = %140.1;
  %154 = less(%146, %147) /* ty=Tensor[(?, 14, 16), bool] */;
  %155 = %148.0;
  %156 = asinh(%152) /* ty=Tensor[(1, 14, 16), float64] */;
  (%153, meta[relay.Constant][7] /* ty=Tensor[(32), float64] */, %154, %155, %156)
}

def @func_3962() -> Tensor[(10, 8, 12), float64] {
  %158 = fn () -> Tensor[(10, 8, 12), float64] {
    %157 = @func_3562() /* ty=(Tensor[(10, 8, 12), float64],) */;
    %157.0
  };
  %158() /* ty=Tensor[(10, 8, 12), float64] */
}

def @func_1982() -> Tensor[(10, 8, 12), float32] {
  %159 = @func_353() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %159.0
}

def @func_4335() -> Tensor[(80), int16] {
  @func_4333() /* ty=Tensor[(80), int16] */
}

def @func_700() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
  @func_698() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */
}

def @func_1255() -> (Tensor[(10, 8, 12), float64],) {
  @func_1253() /* ty=(Tensor[(10, 8, 12), float64],) */
}

def @func_5252() -> (Tensor[(80), int16], Tensor[(11, 6, 7), float64], Tensor[(231, 2), int16], Tensor[(11, 6, 7), float64]) {
  %173 = fn () -> (Tensor[(80), int16], Tensor[(11, 6, 7), float64], Tensor[(231, 2), int16], Tensor[(11, 6, 7), float64]) {
    %160 = cast(meta[relay.Constant][8] /* ty=Tensor[(231, 2), int16] */, dtype="int16") /* ty=Tensor[(231, 2), int16] */;
    %161 = cast(meta[relay.Constant][8] /* ty=Tensor[(231, 2), int16] */, dtype="int16") /* ty=Tensor[(231, 2), int16] */;
    %162 = reshape(%160, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
    %163 = reshape(%161, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
    %164 = @func_107(%162, %163) /* ty=(Tensor[(11, 6, 7), float64],) */;
    %165 = %164.0;
    %166 = cast(%165, dtype="int16") /* ty=Tensor[(11, 6, 7), int16] */;
    %167 = cast(%165, dtype="int16") /* ty=Tensor[(11, 6, 7), int16] */;
    %168 = reshape(%166, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
    %169 = reshape(%167, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
    %170 = @func_107(%168, %169) /* ty=(Tensor[(11, 6, 7), float64],) */;
    %171 = @func_4276() /* ty=Tensor[(80), int16] */;
    %172 = %170.0;
    (%171, %165, meta[relay.Constant][8] /* ty=Tensor[(231, 2), int16] */, %172)
  };
  %173() /* ty=(Tensor[(80), int16], Tensor[(11, 6, 7), float64], Tensor[(231, 2), int16], Tensor[(11, 6, 7), float64]) */
}

def @func_698() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
  %174 = @func_353() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %175 = @func_385() /* ty=Tensor[(10, 8, 12), float32] */;
  %176 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  %177 = %174.1;
  (%175, %176, %177)
}

def @func_650(%var_648: Tensor[(10, 8, 12), float32]) -> (Tensor[(10, 8, 12), uint32],) {
  @func_647(%var_648) /* ty=(Tensor[(10, 8, 12), uint32],) */
}

def @func_4761() -> (Tensor[(10, 8, 12), int8],) {
  @func_4759() /* ty=(Tensor[(10, 8, 12), int8],) */
}

def @func_4826() -> (Tensor[(10, 8, 12), float64], Tensor[(2184), float64], Tensor[(10, 2, 4), int16], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(12, 14, 13), bool]) {
  @func_4824() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(2184), float64], Tensor[(10, 2, 4), int16], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(12, 14, 13), bool]) */
}

def @func_4364(%var_4363: Tensor[(16, 9, 6), uint64]) -> (Tensor[(16, 9, 6), uint64], Tensor[(10, 8, 12), bool], Tensor[(16, 9, 6), float32]) {
  %184 = fn (%var_4339: Tensor[(16, 9, 6), uint64]) -> (Tensor[(16, 9, 6), uint64], Tensor[(10, 8, 12), bool], Tensor[(16, 9, 6), float32]) {
    %178 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 9, 6), uint64] */, dtype="uint64") /* ty=Tensor[(1, 9, 6), uint64] */;
    %179 = cast(%var_4339, dtype="uint64") /* ty=Tensor[(16, 9, 6), uint64] */;
    %180 = cast(%var_4339, dtype="float32") /* ty=Tensor[(16, 9, 6), float32] */;
    %181 = left_shift(%178, %179) /* ty=Tensor[(16, 9, 6), uint64] */;
    %182 = @func_3908() /* ty=Tensor[(10, 8, 12), bool] */;
    %183 = cosh(%180) /* ty=Tensor[(16, 9, 6), float32] */;
    (%181, %182, %183)
  };
  %184(%var_4363) /* ty=(Tensor[(16, 9, 6), uint64], Tensor[(10, 8, 12), bool], Tensor[(16, 9, 6), float32]) */
}

def @func_5317() -> Tensor[(10, 8, 12), float32] {
  %185 = @func_1619() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %185.0
}

def @func_504(%var_502: Tensor[(462), int16]) -> (Tensor[(10, 7, 8), float64], Tensor[(10, 7, 8), float32], Tensor[(10, 8, 12), float64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) {
  @func_501(%var_502) /* ty=(Tensor[(10, 7, 8), float64], Tensor[(10, 7, 8), float32], Tensor[(10, 8, 12), float64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) */
}

def @func_4658() -> (Tensor[(10, 8, 12), bool],) {
  %188 = fn () -> (Tensor[(10, 8, 12), bool],) {
    %186 = @func_3322() /* ty=(Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), bool]) */;
    %187 = %186.1;
    (%187,)
  };
  %188() /* ty=(Tensor[(10, 8, 12), bool],) */
}

def @func_4333() -> Tensor[(80), int16] {
  %189 = @func_2963() /* ty=(Tensor[(80), int16],) */;
  %189.0
}

def @func_2099() -> Tensor[(10, 8, 12), float32] {
  %190 = @func_1917() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8]) */;
  %190.0
}

def @func_3876(%var_3873: Tensor[(6, 8, 10), float64], %var_3874: Tensor[(715), uint32], %var_3875: Tensor[(6, 8, 10), float64]) -> (Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float32], Tensor[(6, 8, 10), float32], Tensor[(11, 13, 5), uint32], Tensor[(715), uint32], Tensor[(6, 8, 10), int64], Tensor[(10, 8, 12), float64]) {
  @func_3871(%var_3873, %var_3874, %var_3875) /* ty=(Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float32], Tensor[(6, 8, 10), float32], Tensor[(11, 13, 5), uint32], Tensor[(715), uint32], Tensor[(6, 8, 10), int64], Tensor[(10, 8, 12), float64]) */
}

def @func_3361(%var_3360: Tensor[(10, 8, 12), float32]) -> Tensor[(10, 8, 12), float32] {
  %196 = fn (%var_3329: Tensor[(10, 8, 12), float32]) -> Tensor[(10, 8, 12), float32] {
    %191 = @func_1982() /* ty=Tensor[(10, 8, 12), float32] */;
    %192 = cast(%var_3329, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
    %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(3), int32] */;
    %194 = cast(%191, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
    %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%194, %195) /* ty=Tensor[(10, 8, 12), float32] */
  };
  %196(%var_3360) /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_2318() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) {
  @func_2316() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) */
}

def @func_998(%var_966: Tensor[(11, 11, 13), int8]) -> (Tensor[(10, 8, 12), float64], Tensor[(11, 11, 13), uint64], Tensor[(10, 8, 12), float64]) {
  %197 = cast(%var_966, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %198 = sqrt(%197) /* ty=Tensor[(11, 11, 13), float32] */;
  %199 = cast(%198, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %200 = asinh(%199) /* ty=Tensor[(11, 11, 13), float32] */;
  %201 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 1, 13), int8] */, dtype="int8") /* ty=Tensor[(11, 1, 13), int8] */;
  %202 = cast(%var_966, dtype="int8") /* ty=Tensor[(11, 11, 13), int8] */;
  %203 = logical_xor(%201, %202) /* ty=Tensor[(11, 11, 13), int8] */;
  %204 = cast(%203, dtype="uint64") /* ty=Tensor[(11, 11, 13), uint64] */;
  %205 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
  %206 = cast(%200, dtype="uint64") /* ty=Tensor[(11, 11, 13), uint64] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %208 = @func_928() /* ty=Tensor[(10, 8, 12), float64] */;
  %209 = bitwise_or(%206, %207) /* ty=Tensor[(11, 11, 13), uint64] */;
  %210 = @func_928() /* ty=Tensor[(10, 8, 12), float64] */;
  (%208, %209, %210)
}

def @func_2584(%var_2479: Tensor[(1, 364), uint16], %var_2482: Tensor[(80), int16], %var_2520: Tensor[(7, 364), uint16], %var_2540: Tensor[(7, 364), float32], %var_2561: Tensor[(11, 364), uint16]) -> (Tensor[(10, 8, 12), float32], Tensor[(462), int16], Tensor[(10, 2, 4), float32], Tensor[(80), int16], Tensor[(10, 8, 12), float32], Tensor[(7, 364), float64], Tensor[(7, 364), bool], Tensor[(11, 364), uint8], Tensor[(10, 8, 12), float32], Tensor[(11, 6, 7), float64], Tensor[(10, 8, 12), float32]) {
  %211 = cast(%var_2479, dtype="uint16") /* ty=Tensor[(1, 364), uint16] */;
  %212 = reshape(%211, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
  %213 = @func_1482(%212) /* ty=(Tensor[(7, 4, 13), uint16], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) */;
  %214 = cast(%var_2482, dtype="int16") /* ty=Tensor[(80), int16] */;
  %215 = cast(%var_2482, dtype="int16") /* ty=Tensor[(80), int16] */;
  %216 = reshape(%214, newshape=[10, 2, 4]) /* ty=Tensor[(10, 2, 4), int16] */;
  %217 = reshape(%215, newshape=[10, 2, 4]) /* ty=Tensor[(10, 2, 4), int16] */;
  %218 = @func_1546(%216, %217) /* ty=(Tensor[(10, 2, 4), int16], Tensor[(10, 2, 4), float32]) */;
  %219 = cast(%var_2479, dtype="uint16") /* ty=Tensor[(1, 364), uint16] */;
  %220 = reshape(%219, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
  %221 = @func_1482(%220) /* ty=(Tensor[(7, 4, 13), uint16], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) */;
  %222 = cast(%var_2520, dtype="float32") /* ty=Tensor[(7, 364), float32] */;
  %223 = log2(%222) /* ty=Tensor[(7, 364), float32] */;
  %224 = cast(%223, dtype="float64") /* ty=Tensor[(7, 364), float64] */;
  %225 = cast(%var_2540, dtype="int64") /* ty=Tensor[(7, 364), int64] */;
  %226 = shape_of(%223, dtype="int32") /* ty=Tensor[(2), int32] */;
  %227 = cast(%223, dtype="int64") /* ty=Tensor[(7, 364), int64] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %229 = bitwise_xor(%227, %228) /* ty=Tensor[(7, 364), int64] */;
  %230 = cast(%var_2479, dtype="uint64") /* ty=Tensor[(1, 364), uint64] */;
  %231 = cast(%var_2520, dtype="uint64") /* ty=Tensor[(7, 364), uint64] */;
  %232 = add(%230, %231) /* ty=Tensor[(7, 364), uint64] */;
  %233 = cast(%232, dtype="bool") /* ty=Tensor[(7, 364), bool] */;
  %234 = shape_of(%229, dtype="int32") /* ty=Tensor[(2), int32] */;
  %235 = cast(%229, dtype="bool") /* ty=Tensor[(7, 364), bool] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %237 = cast(%var_2479, dtype="uint8") /* ty=Tensor[(1, 364), uint8] */;
  %238 = cast(%var_2561, dtype="uint8") /* ty=Tensor[(11, 364), uint8] */;
  %239 = @func_1917() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8]) */;
  %240 = %213.2;
  %241 = cast(%240, dtype="int16") /* ty=Tensor[(462), int16] */;
  %242 = cast(%240, dtype="int16") /* ty=Tensor[(462), int16] */;
  %243 = reshape(%241, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
  %244 = reshape(%242, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
  %245 = @func_107(%243, %244) /* ty=(Tensor[(11, 6, 7), float64],) */;
  %246 = @func_2030() /* ty=Tensor[(10, 8, 12), float32] */;
  %247 = %218.1;
  %248 = %221.3;
  %249 = asinh(%224) /* ty=Tensor[(7, 364), float64] */;
  %250 = logical_and(%235, %236) /* ty=Tensor[(7, 364), bool] */;
  %251 = subtract(%237, %238) /* ty=Tensor[(11, 364), uint8] */;
  %252 = %239.0;
  %253 = %245.0;
  %254 = @func_1638() /* ty=Tensor[(10, 8, 12), float32] */;
  (%246, %240, %247, %var_2482, %248, %249, %250, %251, %252, %253, %254)
}

def @func_4637(%var_4636: Tensor[(9, 2, 16), float32]) -> (Tensor[(9, 2, 16), float32], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float64]) {
  %264 = fn (%var_4614: Tensor[(9, 2, 16), float32]) -> (Tensor[(9, 2, 16), float32], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float64]) {
    %255 = cast(%var_4614, dtype="float32") /* ty=Tensor[(9, 2, 16), float32] */;
    %256 = cast(meta[relay.Constant][11] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
    %257 = reshape(%256, newshape=[462]) /* ty=Tensor[(462), int16] */;
    %258 = @func_3456(%257) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(11, 6, 7), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
    %259 = %258.4;
    %260 = cast(%259, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
    %261 = reshape(%260, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
    %262 = sqrt(%255) /* ty=Tensor[(9, 2, 16), float32] */;
    %263 = @func_3669(%261) /* ty=Tensor[(10, 8, 12), float64] */;
    (%262, %259, meta[relay.Constant][11] /* ty=Tensor[(462), int16] */, %263)
  };
  %264(%var_4636) /* ty=(Tensor[(9, 2, 16), float32], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float64]) */
}

def @func_5003() -> Tensor[(80), int16] {
  @func_4276() /* ty=Tensor[(80), int16] */
}

def @func_3909() -> Tensor[(10, 8, 12), bool] {
  %270 = fn () -> Tensor[(10, 8, 12), bool] {
    %265 = @func_2842() /* ty=Tensor[(10, 8, 12), float32] */;
    %266 = cast(meta[relay.Constant][12] /* ty=Tensor[(10, 8, 12), float32] */, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
    %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
    %268 = cast(%265, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
    %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%268, %269) /* ty=Tensor[(10, 8, 12), bool] */
  };
  %270() /* ty=Tensor[(10, 8, 12), bool] */
}

def @func_6056() -> (Tensor[(10, 8, 12), float64],) {
  @func_6054() /* ty=(Tensor[(10, 8, 12), float64],) */
}

def @func_1638() -> Tensor[(10, 8, 12), float32] {
  @func_385() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_5817() -> (Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float32]) {
  %271 = @func_4657() /* ty=(Tensor[(10, 8, 12), bool],) */;
  %272 = @func_3789() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %273 = %271.0;
  %274 = %272.0;
  (%273, %274)
}

def @func_4881() -> (Tensor[(10, 8, 12), float64],) {
  %276 = fn () -> (Tensor[(10, 8, 12), float64],) {
    %275 = @func_928() /* ty=Tensor[(10, 8, 12), float64] */;
    (%275,)
  };
  %276() /* ty=(Tensor[(10, 8, 12), float64],) */
}

def @func_2030() -> Tensor[(10, 8, 12), float32] {
  @func_385() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_2843() -> Tensor[(10, 8, 12), float32] {
  %278 = fn () -> Tensor[(10, 8, 12), float32] {
    %277 = @func_859() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8]) */;
    %277.0
  };
  %278() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_5018() -> Tensor[(10, 8, 12), float32] {
  @func_5016() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_2964() -> (Tensor[(80), int16],) {
  %281 = fn () -> (Tensor[(80), int16],) {
    %279 = @func_2118() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 2, 4), int16], Tensor[(80), int16]) */;
    %280 = %279.2;
    (%280,)
  };
  %281() /* ty=(Tensor[(80), int16],) */
}

def @func_4582(%var_4551: Tensor[(40, 1), bool]) -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1, 4, 10), bool], Tensor[(40, 1), bool], Tensor[(462), int16], Tensor[(1, 80), bool], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), bool]) {
  %282 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 80), int16] */, dtype="int16") /* ty=Tensor[(1, 80), int16] */;
  %283 = reshape(%282, newshape=[40, 2]) /* ty=Tensor[(40, 2), int16] */;
  %284 = @func_2416(%283) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 2, 4), float32], Tensor[(40, 2), float64]) */;
  %285 = @func_3562() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %286 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %287 = cast(%var_4551, dtype="bool") /* ty=Tensor[(40, 1), bool] */;
  %288 = cast(meta[relay.Constant][14] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
  %289 = reshape(%286, newshape=[]) /* ty=bool */;
  %290 = reshape(%287, newshape=[1, 4, 10]) /* ty=Tensor[(1, 4, 10), bool] */;
  %291 = reshape(%288, newshape=[462]) /* ty=Tensor[(462), int16] */;
  %292 = @func_1331(%289, %290, %291) /* ty=(Tensor[(1, 4, 10), bool], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float32]) */;
  %293 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 80), int16] */, dtype="bool") /* ty=Tensor[(1, 80), bool] */;
  %294 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %295 = @func_3961() /* ty=Tensor[(10, 8, 12), float64] */;
  %296 = cast(%295, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
  %297 = cosh(%296) /* ty=Tensor[(10, 8, 12), float64] */;
  %298 = cast(%295, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%297, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %302 = equal(%300, %301) /* ty=Tensor[(10, 8, 12), bool] */;
  %303 = cast(False /* ty=bool */, dtype="float64") /* ty=float64 */;
  %304 = cast(%302, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
  %305 = %284.0;
  %306 = @func_3908() /* ty=Tensor[(10, 8, 12), bool] */;
  %307 = %285.0;
  %308 = @func_1982() /* ty=Tensor[(10, 8, 12), float32] */;
  %309 = %292.0;
  %310 = logical_and(%293, %294) /* ty=Tensor[(1, 80), bool] */;
  %311 = divide(%303, %304) /* ty=Tensor[(10, 8, 12), float64] */;
  %312 = @func_3908() /* ty=Tensor[(10, 8, 12), bool] */;
  (%305, %306, %307, %308, %309, %var_4551, meta[relay.Constant][14] /* ty=Tensor[(462), int16] */, %310, %311, %312)
}

def @func_3323() -> (Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), bool]) {
  %327 = fn () -> (Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), bool]) {
    %313 = @func_1074() /* ty=(Tensor[(10, 8, 12), float64],) */;
    %314 = %313.0;
    %315 = @func_1917() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8]) */;
    %316 = %315.1;
    %317 = cast(%316, dtype="uint8") /* ty=Tensor[(10, 8, 12), uint8] */;
    %318 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
    %319 = cast(%314, dtype="uint8") /* ty=Tensor[(10, 8, 12), uint8] */;
    %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %321 = cast(%316, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
    %322 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
    %323 = cast(%314, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
    %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %325 = logical_xor(%319, %320) /* ty=Tensor[(10, 8, 12), uint8] */;
    %326 = logical_and(%323, %324) /* ty=Tensor[(10, 8, 12), bool] */;
    (%325, %326)
  };
  %327() /* ty=(Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), bool]) */
}

def @func_4668(%var_4659: Tensor[(12, 14, 13), float64]) -> (Tensor[(12, 14, 13), float64], Tensor[(12, 14, 13), float64]) {
  %328 = cast(%var_4659, dtype="float64") /* ty=Tensor[(12, 14, 13), float64] */;
  %329 = cast(%var_4659, dtype="float64") /* ty=Tensor[(12, 14, 13), float64] */;
  %330 = asinh(%328) /* ty=Tensor[(12, 14, 13), float64] */;
  %331 = sigmoid(%329) /* ty=Tensor[(12, 14, 13), float64] */;
  (%330, %331)
}

def @func_6665() -> Tensor[(10, 8, 12), float32] {
  %333 = fn () -> Tensor[(10, 8, 12), float32] {
    %332 = @func_1917() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8]) */;
    %332.0
  };
  %333() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_3562() -> (Tensor[(10, 8, 12), float64],) {
  %334 = @func_3213() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %335 = %334.1;
  (%335,)
}

def @func_2471(%var_2469: Tensor[(13, 13, 7), bool]) -> (Tensor[(13, 13, 7), bool], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) {
  @func_2468(%var_2469) /* ty=(Tensor[(13, 13, 7), bool], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) */
}

def @func_4996() -> Tensor[(10, 8, 12), float64] {
  @func_4994() /* ty=Tensor[(10, 8, 12), float64] */
}

def @func_6207() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint32], Tensor[(10, 8, 12), uint8]) {
  @func_6205() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint32], Tensor[(10, 8, 12), uint8]) */
}

def @func_6388() -> (Tensor[(10, 8, 12), int8],) {
  @func_6386() /* ty=(Tensor[(10, 8, 12), int8],) */
}

def @func_859() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8]) {
  %336 = @func_774() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %337 = %336.0;
  %338 = @func_385() /* ty=Tensor[(10, 8, 12), float32] */;
  %339 = cast(%338, dtype="uint8") /* ty=Tensor[(10, 8, 12), uint8] */;
  %340 = shape_of(%337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%337, dtype="uint8") /* ty=Tensor[(10, 8, 12), uint8] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %343 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  %344 = bitwise_xor(%341, %342) /* ty=Tensor[(10, 8, 12), uint8] */;
  (%343, %344)
}

def @func_321(%var_309: Tensor[(10, 8, 12), float32]) -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) {
  %345 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  %346 = cast(%345, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %347 = erf(%346) /* ty=Tensor[(10, 8, 12), float32] */;
  %348 = cast(%var_309, dtype="uint8") /* ty=Tensor[(10, 8, 12), uint8] */;
  %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%347, dtype="uint8") /* ty=Tensor[(10, 8, 12), uint8] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %352 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  %353 = add(%350, %351) /* ty=Tensor[(10, 8, 12), uint8] */;
  %354 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  (%352, %353, %354)
}

def @func_3419(%var_3417: Tensor[(11, 13, 5), uint32], %var_3418: Tensor[(11, 13, 5), uint32]) -> (Tensor[(11, 13, 5), uint32],) {
  %360 = fn (%var_3409: Tensor[(11, 13, 5), uint32], %var_3410: Tensor[(11, 13, 5), uint32]) -> (Tensor[(11, 13, 5), uint32],) {
    %355 = cast(%var_3410, dtype="uint32") /* ty=Tensor[(11, 13, 5), uint32] */;
    %356 = shape_of(%var_3409, dtype="int32") /* ty=Tensor[(3), int32] */;
    %357 = cast(%var_3409, dtype="uint32") /* ty=Tensor[(11, 13, 5), uint32] */;
    %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %359 = left_shift(%357, %358) /* ty=Tensor[(11, 13, 5), uint32] */;
    (%359,)
  };
  %360(%var_3417, %var_3418) /* ty=(Tensor[(11, 13, 5), uint32],) */
}

def @func_1864(%var_1863: Tensor[(2, 16), float64]) -> (Tensor[(2, 16), float64], Tensor[(10, 8, 12), float64]) {
  %365 = fn (%var_1847: Tensor[(2, 16), float64]) -> (Tensor[(2, 16), float64], Tensor[(10, 8, 12), float64]) {
    %361 = cast(%var_1847, dtype="float64") /* ty=Tensor[(2, 16), float64] */;
    %362 = @func_1253() /* ty=(Tensor[(10, 8, 12), float64],) */;
    %363 = rsqrt(%361) /* ty=Tensor[(2, 16), float64] */;
    %364 = %362.0;
    (%363, %364)
  };
  %365(%var_1863) /* ty=(Tensor[(2, 16), float64], Tensor[(10, 8, 12), float64]) */
}

def @func_1062(%var_1061: Tensor[(462), int16]) -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint32], Tensor[(10, 7, 8), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(462), float64]) {
  %383 = fn (%var_1037: Tensor[(462), int16]) -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint32], Tensor[(10, 7, 8), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(462), float64]) {
    %366 = @func_818() /* ty=(Tensor[(10, 8, 12), int8],) */;
    %367 = @func_928() /* ty=Tensor[(10, 8, 12), float64] */;
    %368 = cast(%367, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
    %369 = reshape(%368, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
    %370 = @func_647(%369) /* ty=(Tensor[(10, 8, 12), uint32],) */;
    %371 = cast(%var_1037, dtype="int16") /* ty=Tensor[(462), int16] */;
    %372 = reshape(%371, newshape=[462]) /* ty=Tensor[(462), int16] */;
    %373 = @func_501(%372) /* ty=(Tensor[(10, 7, 8), float64], Tensor[(10, 7, 8), float32], Tensor[(10, 8, 12), float64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) */;
    %374 = @func_353() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
    %375 = cast(%var_1037, dtype="float64") /* ty=Tensor[(462), float64] */;
    %376 = %366.0;
    %377 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
    %378 = %370.0;
    %379 = %373.0;
    %380 = %374.0;
    %381 = @func_928() /* ty=Tensor[(10, 8, 12), float64] */;
    %382 = sin(%375) /* ty=Tensor[(462), float64] */;
    (%367, %376, %377, %378, %379, %380, %381, %382)
  };
  %383(%var_1061) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint32], Tensor[(10, 7, 8), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(462), float64]) */
}

def @func_1485(%var_1483: Tensor[(7, 4, 13), uint16]) -> (Tensor[(7, 4, 13), uint16], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) {
  @func_1482(%var_1483) /* ty=(Tensor[(7, 4, 13), uint16], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) */
}

def @func_1586() -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
  %392 = fn () -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
    %384 = @func_353() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
    %385 = %384.1;
    %386 = cast(%385, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
    %387 = reshape(%386, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
    %388 = @func_321(%387) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) */;
    %389 = @func_774() /* ty=(Tensor[(10, 8, 12), float64],) */;
    %390 = %388.0;
    %391 = %389.0;
    (%385, %390, %391)
  };
  %392() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */
}

def @func_5203(%var_5202: Tensor[(1, 11, 15), float64]) -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 2, 1), float64], Tensor[(10, 1), float64], Tensor[(10, 8, 12), bool], Tensor[(?, 11, 15), int32]) {
  %417 = fn (%var_5138: Tensor[(1, 11, 15), float64]) -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 2, 1), float64], Tensor[(10, 1), float64], Tensor[(10, 8, 12), bool], Tensor[(?, 11, 15), int32]) {
    %393 = @func_3948() /* ty=(Tensor[(10, 8, 12), float32],) */;
    %394 = @func_1619() /* ty=(Tensor[(10, 8, 12), float32],) */;
    %395 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 1), float64] */;
    %396 = reshape(%395, newshape=[10]) /* ty=Tensor[(10), float64] */;
    %397 = @func_4425(%396) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1183), bool], Tensor[(10, 2, 1), float64], Tensor[(10), float64], Tensor[(20), float64]) */;
    %398 = %394.0;
    %399 = cast(%398, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
    %400 = reshape(%399, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
    %401 = @func_321(%400) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) */;
    %402 = %401.0;
    %403 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 8, 12), float32] */, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
    %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
    %405 = cast(%402, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
    %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %407 = cast(%var_5138, dtype="float64") /* ty=Tensor[(1, 11, 15), float64] */;
    %408 = atanh(%407) /* ty=Tensor[(1, 11, 15), float64] */;
    %409 = cast(%var_5138, dtype="int32") /* ty=Tensor[(1, 11, 15), int32] */;
    %410 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
    %411 = cast(%408, dtype="int32") /* ty=Tensor[(1, 11, 15), int32] */;
    %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %413 = %393.0;
    %414 = %397.3;
    %415 = less(%405, %406) /* ty=Tensor[(10, 8, 12), bool] */;
    %416 = bitwise_xor(%411, %412) /* ty=Tensor[(?, 11, 15), int32] */;
    (%413, %398, %414, meta[relay.Constant][15] /* ty=Tensor[(10, 1), float64] */, %415, %416)
  };
  %417(%var_5202) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 2, 1), float64], Tensor[(10, 1), float64], Tensor[(10, 8, 12), bool], Tensor[(?, 11, 15), int32]) */
}

def @func_6714(%var_6712: Tensor[(13, 1, 5), float64]) -> (Tensor[(13, 1, 5), float64],) {
  @func_6711(%var_6712) /* ty=(Tensor[(13, 1, 5), float64],) */
}

def @func_5272(%var_5269: Tensor[(80), int16], %var_5270: Tensor[(2548), uint16], %var_5271: Tensor[(4004), uint16]) -> (Tensor[(10, 8, 12), float64], Tensor[(7, 364), bool], Tensor[(7, 52), uint16], Tensor[(80), int16], Tensor[(2548), uint16], Tensor[(4004), uint16], Tensor[(10, 8, 12), float64]) {
  @func_5267(%var_5269, %var_5270, %var_5271) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(7, 364), bool], Tensor[(7, 52), uint16], Tensor[(80), int16], Tensor[(2548), uint16], Tensor[(4004), uint16], Tensor[(10, 8, 12), float64]) */
}

def @func_4942() -> (Tensor[(10, 8, 12), int32],) {
  %424 = fn () -> (Tensor[(10, 8, 12), int32],) {
    %418 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
    %419 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 8, 12), float32] */, dtype="int32") /* ty=Tensor[(10, 8, 12), int32] */;
    %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
    %421 = cast(%418, dtype="int32") /* ty=Tensor[(10, 8, 12), int32] */;
    %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %423 = maximum(%421, %422) /* ty=Tensor[(10, 8, 12), int32] */;
    (%423,)
  };
  %424() /* ty=(Tensor[(10, 8, 12), int32],) */
}

def @func_3182() -> (Tensor[(10, 8, 12), float32],) {
  %426 = fn () -> (Tensor[(10, 8, 12), float32],) {
    %425 = @func_385() /* ty=Tensor[(10, 8, 12), float32] */;
    (%425,)
  };
  %426() /* ty=(Tensor[(10, 8, 12), float32],) */
}

def @func_5894(%var_5893: Tensor[(5, 10, 16), float64]) -> (Tensor[(5, 10, 16), float64],) {
  %429 = fn (%var_5885: Tensor[(5, 10, 16), float64]) -> (Tensor[(5, 10, 16), float64],) {
    %427 = cast(%var_5885, dtype="float64") /* ty=Tensor[(5, 10, 16), float64] */;
    %428 = sigmoid(%427) /* ty=Tensor[(5, 10, 16), float64] */;
    (%428,)
  };
  %429(%var_5893) /* ty=(Tensor[(5, 10, 16), float64],) */
}

def @func_4427(%var_4426: Tensor[(10), float64]) -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1183), bool], Tensor[(10, 2, 1), float64], Tensor[(10), float64], Tensor[(20), float64]) {
  %442 = fn (%var_4420: Tensor[(10), float64]) -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1183), bool], Tensor[(10, 2, 1), float64], Tensor[(10), float64], Tensor[(20), float64]) {
    %430 = @func_1128() /* ty=(Tensor[(10, 8, 12), float64],) */;
    %431 = cast(meta[relay.Constant][18] /* ty=Tensor[(1183), bool] */, dtype="bool") /* ty=Tensor[(1183), bool] */;
    %432 = reshape(%431, newshape=[13, 13, 7]) /* ty=Tensor[(13, 13, 7), bool] */;
    %433 = @func_2468(%432) /* ty=(Tensor[(13, 13, 7), bool], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) */;
    %434 = cast(%var_4420, dtype="float64") /* ty=Tensor[(10), float64] */;
    %435 = cast(meta[relay.Constant][19] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
    %436 = reshape(%434, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float64] */;
    %437 = reshape(%435, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float64] */;
    %438 = @func_1168(%436, %437) /* ty=(Tensor[(10, 2, 1), bool], Tensor[(10, 2, 1), float64]) */;
    %439 = %430.0;
    %440 = %433.1;
    %441 = %438.1;
    (%439, %440, meta[relay.Constant][18] /* ty=Tensor[(1183), bool] */, %441, %var_4420, meta[relay.Constant][19] /* ty=Tensor[(20), float64] */)
  };
  %442(%var_4426) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1183), bool], Tensor[(10, 2, 1), float64], Tensor[(10), float64], Tensor[(20), float64]) */
}

def @func_3789() -> (Tensor[(10, 8, 12), float32],) {
  %443 = @func_1619() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %444 = %443.0;
  (%444,)
}

def @func_4384() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64]) {
  %451 = fn () -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64]) {
    %445 = @func_3181() /* ty=(Tensor[(10, 8, 12), float32],) */;
    %446 = @func_774() /* ty=(Tensor[(10, 8, 12), float64],) */;
    %447 = @func_1585() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
    %448 = %445.0;
    %449 = %446.0;
    %450 = %447.2;
    (%448, %449, %450)
  };
  %451() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64]) */
}

def @func_1076() -> (Tensor[(10, 8, 12), float64],) {
  @func_1074() /* ty=(Tensor[(10, 8, 12), float64],) */
}

def @func_5918() -> (Tensor[(80), int16], Tensor[(10, 8, 12), float32]) {
  %454 = fn () -> (Tensor[(80), int16], Tensor[(10, 8, 12), float32]) {
    %452 = @func_5329() /* ty=Tensor[(80), int16] */;
    %453 = @func_5016() /* ty=Tensor[(10, 8, 12), float32] */;
    (%452, %453)
  };
  %454() /* ty=(Tensor[(80), int16], Tensor[(10, 8, 12), float32]) */
}

def @func_6460() -> (Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float64]) {
  @func_6458() /* ty=(Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float64]) */
}

def @func_4963() -> (Tensor[(10, 8, 12), float64],) {
  %456 = fn () -> (Tensor[(10, 8, 12), float64],) {
    %455 = @func_928() /* ty=Tensor[(10, 8, 12), float64] */;
    (%455,)
  };
  %456() /* ty=(Tensor[(10, 8, 12), float64],) */
}

def @func_6863(%var_6861: Tensor[(10, 8, 12), float32]) -> (Tensor[(10, 8, 12), int16],) {
  @func_6860(%var_6861) /* ty=(Tensor[(10, 8, 12), int16],) */
}

def @func_5393() -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), int8]) {
  %457 = @func_2816() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8]) */;
  %458 = @func_818() /* ty=(Tensor[(10, 8, 12), int8],) */;
  %459 = %457.2;
  %460 = %458.0;
  (%459, %460)
}

def @func_6377() -> (Tensor[(10, 8, 12), float64],) {
  @func_6375() /* ty=(Tensor[(10, 8, 12), float64],) */
}

def @func_2980() -> Tensor[(10, 8, 12), float32] {
  %461 = fn () -> Tensor[(10, 8, 12), float32] {
    @func_2030() /* ty=Tensor[(10, 8, 12), float32] */
  };
  %461() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_5958() -> (Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
  @func_5956() /* ty=(Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */
}

def @func_6711(%var_6705: Tensor[(13, 1, 5), float64]) -> (Tensor[(13, 1, 5), float64],) {
  %462 = cast(%var_6705, dtype="float64") /* ty=Tensor[(13, 1, 5), float64] */;
  %463 = sinh(%462) /* ty=Tensor[(13, 1, 5), float64] */;
  (%463,)
}

def @func_501(%var_495: Tensor[(462), int16]) -> (Tensor[(10, 7, 8), float64], Tensor[(10, 7, 8), float32], Tensor[(10, 8, 12), float64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) {
  %464 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 7, 8), float64] */, dtype="float64") /* ty=Tensor[(10, 7, 8), float64] */;
  %465 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 7, 8), float64] */, dtype="float32") /* ty=Tensor[(10, 7, 8), float32] */;
  %466 = @func_353() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %467 = cast(%var_495, dtype="int16") /* ty=Tensor[(462), int16] */;
  %468 = cast(%var_495, dtype="int16") /* ty=Tensor[(462), int16] */;
  %469 = reshape(%467, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
  %470 = reshape(%468, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
  %471 = @func_107(%469, %470) /* ty=(Tensor[(11, 6, 7), float64],) */;
  %472 = atan(%464) /* ty=Tensor[(10, 7, 8), float64] */;
  %473 = cos(%465) /* ty=Tensor[(10, 7, 8), float32] */;
  %474 = %466.1;
  %475 = %471.0;
  (%472, %473, %474, %475, %var_495)
}

def @func_3507(%var_3506: Tensor[(1183), bool]) -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1183), bool]) {
  %484 = fn (%var_3481: Tensor[(1183), bool]) -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1183), bool]) {
    %476 = @func_1253() /* ty=(Tensor[(10, 8, 12), float64],) */;
    %477 = @func_1253() /* ty=(Tensor[(10, 8, 12), float64],) */;
    %478 = cast(%var_3481, dtype="bool") /* ty=Tensor[(1183), bool] */;
    %479 = reshape(%478, newshape=[13, 13, 7]) /* ty=Tensor[(13, 13, 7), bool] */;
    %480 = @func_2468(%479) /* ty=(Tensor[(13, 13, 7), bool], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) */;
    %481 = %476.0;
    %482 = %477.0;
    %483 = %480.1;
    (%481, %482, %483, %var_3481)
  };
  %484(%var_3506) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1183), bool]) */
}

def @func_5736() -> (Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float64]) {
  %485 = @func_5393() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), int8]) */;
  %486 = @func_2316() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) */;
  %487 = @func_5393() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), int8]) */;
  %488 = @func_4966() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %489 = %485.1;
  %490 = %486.3;
  %491 = %487.1;
  %492 = %488.0;
  (%489, %490, %491, %492)
}

def @func_3764(%var_3762: int64, %var_3763: Tensor[(1, 14, 16), int64]) -> (Tensor[(10, 8, 12), float64], Tensor[(32), float64], Tensor[(?, 14, 16), bool], Tensor[(10, 8, 12), float32], Tensor[(1, 14, 16), float64]) {
  @func_3760(%var_3762, %var_3763) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(32), float64], Tensor[(?, 14, 16), bool], Tensor[(10, 8, 12), float32], Tensor[(1, 14, 16), float64]) */
}

def @func_6054() -> (Tensor[(10, 8, 12), float64],) {
  %493 = @func_4994() /* ty=Tensor[(10, 8, 12), float64] */;
  (%493,)
}

def @func_1129() -> (Tensor[(10, 8, 12), float64],) {
  %496 = fn () -> (Tensor[(10, 8, 12), float64],) {
    %494 = @func_1074() /* ty=(Tensor[(10, 8, 12), float64],) */;
    %495 = %494.0;
    (%495,)
  };
  %496() /* ty=(Tensor[(10, 8, 12), float64],) */
}

def @func_2233(%var_2231: Tensor[(1573), int8]) -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) {
  @func_2230(%var_2231) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) */
}

def @func_6561() -> (Tensor[(10, 8, 12), int8],) {
  @func_6559() /* ty=(Tensor[(10, 8, 12), int8],) */
}

def @func_4824() -> (Tensor[(10, 8, 12), float64], Tensor[(2184), float64], Tensor[(10, 2, 4), int16], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(12, 14, 13), bool]) {
  %497 = @func_1253() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %498 = @func_2118() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 2, 4), int16], Tensor[(80), int16]) */;
  %499 = cast(meta[relay.Constant][22] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
  %500 = reshape(%499, newshape=[462]) /* ty=Tensor[(462), int16] */;
  %501 = @func_1060(%500) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint32], Tensor[(10, 7, 8), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(462), float64]) */;
  %502 = cast(meta[relay.Constant][21] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %503 = reshape(%502, newshape=[12, 14, 13]) /* ty=Tensor[(12, 14, 13), float64] */;
  %504 = @func_4668(%503) /* ty=(Tensor[(12, 14, 13), float64], Tensor[(12, 14, 13), float64]) */;
  %505 = %504.0;
  %506 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 14, 13), float64] */, dtype="bool") /* ty=Tensor[(12, 14, 13), bool] */;
  %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%505, dtype="bool") /* ty=Tensor[(12, 14, 13), bool] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %510 = %497.0;
  %511 = %498.1;
  %512 = %501.0;
  %513 = greater_equal(%508, %509) /* ty=Tensor[(12, 14, 13), bool] */;
  (%510, meta[relay.Constant][21] /* ty=Tensor[(2184), float64] */, %511, %512, meta[relay.Constant][22] /* ty=Tensor[(462), int16] */, %513)
}

def @func_2230(%var_2210: Tensor[(1573), int8]) -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) {
  %514 = @func_698() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %515 = @func_774() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %516 = cast(%var_2210, dtype="int8") /* ty=Tensor[(1573), int8] */;
  %517 = reshape(%516, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), int8] */;
  %518 = @func_998(%517) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(11, 11, 13), uint64], Tensor[(10, 8, 12), float64]) */;
  %519 = %514.0;
  %520 = %515.0;
  %521 = %518.2;
  (%519, %520, %521, %var_2210)
}

def @func_4759() -> (Tensor[(10, 8, 12), int8],) {
  %522 = @func_818() /* ty=(Tensor[(10, 8, 12), int8],) */;
  %523 = %522.0;
  (%523,)
}

def @func_5845() -> Tensor[(10, 8, 12), uint8] {
  %525 = fn () -> Tensor[(10, 8, 12), uint8] {
    %524 = @func_859() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8]) */;
    %524.1
  };
  %525() /* ty=Tensor[(10, 8, 12), uint8] */
}

def @func_3646(%var_3644: Tensor[(12, 3, 10), float64], %var_3645: Tensor[(12, 3, 10), float64]) -> (Tensor[(12, 3, 10), float64], Tensor[(12, 3, 10), float32], Tensor[(10, 8, 12), float64], Tensor[(12, 3, 10), bool], Tensor[(10, 8, 12), float64]) {
  @func_3642(%var_3644, %var_3645) /* ty=(Tensor[(12, 3, 10), float64], Tensor[(12, 3, 10), float32], Tensor[(10, 8, 12), float64], Tensor[(12, 3, 10), bool], Tensor[(10, 8, 12), float64]) */
}

def @func_6458() -> (Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float64]) {
  %526 = @func_4657() /* ty=(Tensor[(10, 8, 12), bool],) */;
  %527 = @func_4880() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %528 = %526.0;
  %529 = %527.0;
  (%528, %529)
}

def @func_386() -> Tensor[(10, 8, 12), float32] {
  %533 = fn () -> Tensor[(10, 8, 12), float32] {
    %530 = @func_353() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
    %531 = %530.0;
    %532 = cast(%531, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
    log(%532) /* ty=Tensor[(10, 8, 12), float32] */
  };
  %533() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_6523() -> (Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float32]) {
  %543 = fn () -> (Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float32]) {
    %534 = @func_859() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8]) */;
    %535 = %534.1;
    %536 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 8, 12), uint8] */, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
    %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
    %538 = cast(%535, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
    %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %540 = cast(%535, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
    %541 = greater_equal(%538, %539) /* ty=Tensor[(10, 8, 12), bool] */;
    %542 = asinh(%540) /* ty=Tensor[(10, 8, 12), float32] */;
    (%541, %542)
  };
  %543() /* ty=(Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float32]) */
}

def @func_6660() -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) {
  %548 = fn () -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) {
    %544 = @func_4880() /* ty=(Tensor[(10, 8, 12), float64],) */;
    %545 = @func_3181() /* ty=(Tensor[(10, 8, 12), float32],) */;
    %546 = %544.0;
    %547 = %545.0;
    (%546, %547)
  };
  %548() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) */
}

def @func_5406() -> Tensor[(10, 8, 12), float64] {
  @func_3961() /* ty=Tensor[(10, 8, 12), float64] */
}

def @func_3871(%var_3808: Tensor[(6, 8, 10), float64], %var_3852: Tensor[(715), uint32], %var_3857: Tensor[(6, 8, 10), float64]) -> (Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float32], Tensor[(6, 8, 10), float32], Tensor[(11, 13, 5), uint32], Tensor[(715), uint32], Tensor[(6, 8, 10), int64], Tensor[(10, 8, 12), float64]) {
  %549 = @func_2816() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8]) */;
  %550 = @func_3688() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) */;
  %551 = cast(%var_3808, dtype="float64") /* ty=Tensor[(6, 8, 10), float64] */;
  %552 = cosh(%551) /* ty=Tensor[(6, 8, 10), float64] */;
  %553 = cast(%552, dtype="bool") /* ty=Tensor[(6, 8, 10), bool] */;
  %554 = shape_of(%var_3808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%var_3808, dtype="bool") /* ty=Tensor[(6, 8, 10), bool] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %557 = not_equal(%555, %556) /* ty=Tensor[(6, 8, 10), bool] */;
  %558 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 8, 10), bool] */, dtype="int64") /* ty=Tensor[(6, 8, 10), int64] */;
  %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%557, dtype="int64") /* ty=Tensor[(6, 8, 10), int64] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %562 = bitwise_or(%560, %561) /* ty=Tensor[(6, 8, 10), int64] */;
  %563 = cast(%var_3808, dtype="bool") /* ty=Tensor[(6, 8, 10), bool] */;
  %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(%562, dtype="bool") /* ty=Tensor[(6, 8, 10), bool] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %567 = greater_equal(%565, %566) /* ty=Tensor[(6, 8, 10), bool] */;
  %568 = cast(%567, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
  %569 = log(%568) /* ty=Tensor[(6, 8, 10), float32] */;
  %570 = cast(%552, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%569, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %574 = cast(%var_3852, dtype="uint32") /* ty=Tensor[(715), uint32] */;
  %575 = cast(%var_3852, dtype="uint32") /* ty=Tensor[(715), uint32] */;
  %576 = reshape(%574, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), uint32] */;
  %577 = reshape(%575, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), uint32] */;
  %578 = @func_3416(%576, %577) /* ty=(Tensor[(11, 13, 5), uint32],) */;
  %579 = cast(%var_3857, dtype="int64") /* ty=Tensor[(6, 8, 10), int64] */;
  %580 = shape_of(%552, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%552, dtype="int64") /* ty=Tensor[(6, 8, 10), int64] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %583 = %549.3;
  %584 = cast(%583, dtype="int8") /* ty=Tensor[(1573, 1), int8] */;
  %585 = reshape(%584, newshape=[1573]) /* ty=Tensor[(1573), int8] */;
  %586 = @func_2230(%585) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) */;
  %587 = %550.0;
  %588 = mod(%572, %573) /* ty=Tensor[(6, 8, 10), float32] */;
  %589 = %578.0;
  %590 = right_shift(%581, %582) /* ty=Tensor[(6, 8, 10), int64] */;
  %591 = %586.2;
  (%583, %587, %588, %589, %var_3852, %590, %591)
}

def @func_6386() -> (Tensor[(10, 8, 12), int8],) {
  %592 = @func_818() /* ty=(Tensor[(10, 8, 12), int8],) */;
  %593 = %592.0;
  (%593,)
}

def @func_324(%var_322: Tensor[(10, 8, 12), float32]) -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) {
  @func_321(%var_322) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) */
}

def @func_6919() -> (Tensor[(10, 8, 12), float64],) {
  %595 = fn () -> (Tensor[(10, 8, 12), float64],) {
    %594 = @func_5406() /* ty=Tensor[(10, 8, 12), float64] */;
    (%594,)
  };
  %595() /* ty=(Tensor[(10, 8, 12), float64],) */
}

def @func_2086(%var_2083: uint64, %var_2084: Tensor[(11, 5, 5), uint64], %var_2085: Tensor[(462), int16]) -> (Tensor[(11, 5, 5), int64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) {
  %612 = fn (%var_2044: uint64, %var_2045: Tensor[(11, 5, 5), uint64], %var_2071: Tensor[(462), int16]) -> (Tensor[(11, 5, 5), int64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) {
    %596 = cast(%var_2044, dtype="uint64") /* ty=uint64 */;
    %597 = cast(%var_2045, dtype="uint64") /* ty=Tensor[(11, 5, 5), uint64] */;
    %598 = bitwise_xor(%596, %597) /* ty=Tensor[(11, 5, 5), uint64] */;
    %599 = cast(%598, dtype="float64") /* ty=Tensor[(11, 5, 5), float64] */;
    %600 = asin(%599) /* ty=Tensor[(11, 5, 5), float64] */;
    %601 = cast(%598, dtype="int64") /* ty=Tensor[(11, 5, 5), int64] */;
    %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
    %603 = cast(%600, dtype="int64") /* ty=Tensor[(11, 5, 5), int64] */;
    %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %605 = cast(%var_2071, dtype="int16") /* ty=Tensor[(462), int16] */;
    %606 = cast(%var_2071, dtype="int16") /* ty=Tensor[(462), int16] */;
    %607 = reshape(%605, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
    %608 = reshape(%606, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
    %609 = @func_107(%607, %608) /* ty=(Tensor[(11, 6, 7), float64],) */;
    %610 = bitwise_or(%603, %604) /* ty=Tensor[(11, 5, 5), int64] */;
    %611 = %609.0;
    (%610, %611, %var_2071)
  };
  %612(%var_2083, %var_2084, %var_2085) /* ty=(Tensor[(11, 5, 5), int64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) */
}

def @func_5267(%var_5257: Tensor[(80), int16], %var_5258: Tensor[(2548), uint16], %var_5259: Tensor[(4004), uint16]) -> (Tensor[(10, 8, 12), float64], Tensor[(7, 364), bool], Tensor[(7, 52), uint16], Tensor[(80), int16], Tensor[(2548), uint16], Tensor[(4004), uint16], Tensor[(10, 8, 12), float64]) {
  %613 = @func_4383() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64]) */;
  %614 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 52), uint16] */, dtype="uint16") /* ty=Tensor[(7, 52), uint16] */;
  %615 = cast(%var_5257, dtype="int16") /* ty=Tensor[(80), int16] */;
  %616 = cast(%var_5258, dtype="uint16") /* ty=Tensor[(2548), uint16] */;
  %617 = cast(%var_5258, dtype="float32") /* ty=Tensor[(2548), float32] */;
  %618 = cast(%var_5259, dtype="uint16") /* ty=Tensor[(4004), uint16] */;
  %619 = reshape(%614, newshape=[1, 364]) /* ty=Tensor[(1, 364), uint16] */;
  %620 = reshape(%615, newshape=[80]) /* ty=Tensor[(80), int16] */;
  %621 = reshape(%616, newshape=[7, 364]) /* ty=Tensor[(7, 364), uint16] */;
  %622 = reshape(%617, newshape=[7, 364]) /* ty=Tensor[(7, 364), float32] */;
  %623 = reshape(%618, newshape=[11, 364]) /* ty=Tensor[(11, 364), uint16] */;
  %624 = @func_2584(%619, %620, %621, %622, %623) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(462), int16], Tensor[(10, 2, 4), float32], Tensor[(80), int16], Tensor[(10, 8, 12), float32], Tensor[(7, 364), float64], Tensor[(7, 364), bool], Tensor[(11, 364), uint8], Tensor[(10, 8, 12), float32], Tensor[(11, 6, 7), float64], Tensor[(10, 8, 12), float32]) */;
  %625 = %613.2;
  %626 = %624.6;
  %627 = @func_928() /* ty=Tensor[(10, 8, 12), float64] */;
  (%625, %626, meta[relay.Constant][26] /* ty=Tensor[(7, 52), uint16] */, %var_5257, %var_5258, %var_5259, %627)
}

def @func_2613() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) {
  %628 = @func_1074() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %629 = @func_2118() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 2, 4), int16], Tensor[(80), int16]) */;
  %630 = @func_385() /* ty=Tensor[(10, 8, 12), float32] */;
  %631 = %628.0;
  %632 = %629.0;
  (%630, %631, %632)
}

def @func_3689() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) {
  %637 = fn () -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) {
    %633 = @func_1619() /* ty=(Tensor[(10, 8, 12), float32],) */;
    %634 = %633.0;
    %635 = @func_3534() /* ty=Tensor[(10, 8, 12), float32] */;
    %636 = @func_1638() /* ty=Tensor[(10, 8, 12), float32] */;
    (%634, %635, %636)
  };
  %637() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) */
}

def @func_5738() -> (Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float64]) {
  @func_5736() /* ty=(Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float64]) */
}

def @func_5956() -> (Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
  %638 = @func_3322() /* ty=(Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), bool]) */;
  %639 = %638.1;
  %640 = @func_2842() /* ty=Tensor[(10, 8, 12), float32] */;
  %641 = @func_4994() /* ty=Tensor[(10, 8, 12), float64] */;
  (%639, %640, %641)
}

def @func_6205() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint32], Tensor[(10, 8, 12), uint8]) {
  %642 = @func_3688() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) */;
  %643 = %642.1;
  %644 = cast(%643, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %645 = reshape(%644, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
  %646 = @func_647(%645) /* ty=(Tensor[(10, 8, 12), uint32],) */;
  %647 = cast(%643, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %648 = reshape(%647, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
  %649 = @func_321(%648) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) */;
  %650 = %646.0;
  %651 = %649.1;
  (%643, %650, %651)
}

def @func_2120() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 2, 4), int16], Tensor[(80), int16]) {
  @func_2118() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 2, 4), int16], Tensor[(80), int16]) */
}

def @func_5395() -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), int8]) {
  @func_5393() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), int8]) */
}

def @func_3949() -> (Tensor[(10, 8, 12), float32],) {
  %653 = fn () -> (Tensor[(10, 8, 12), float32],) {
    %652 = @func_2099() /* ty=Tensor[(10, 8, 12), float32] */;
    (%652,)
  };
  %653() /* ty=(Tensor[(10, 8, 12), float32],) */
}

def @func_111(%var_109: Tensor[(11, 6, 7), int16], %var_110: Tensor[(11, 6, 7), int16]) -> (Tensor[(11, 6, 7), float64],) {
  @func_107(%var_109, %var_110) /* ty=(Tensor[(11, 6, 7), float64],) */
}

def @func_3458(%var_3457: Tensor[(462), int16]) -> (Tensor[(10, 8, 12), float32], Tensor[(11, 6, 7), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
  %666 = fn (%var_3447: Tensor[(462), int16]) -> (Tensor[(10, 8, 12), float32], Tensor[(11, 6, 7), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
    %654 = @func_3181() /* ty=(Tensor[(10, 8, 12), float32],) */;
    %655 = cast(%var_3447, dtype="int16") /* ty=Tensor[(462), int16] */;
    %656 = cast(%var_3447, dtype="int16") /* ty=Tensor[(462), int16] */;
    %657 = reshape(%655, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
    %658 = reshape(%656, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int16] */;
    %659 = @func_107(%657, %658) /* ty=(Tensor[(11, 6, 7), float64],) */;
    %660 = @func_1585() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
    %661 = @func_774() /* ty=(Tensor[(10, 8, 12), float64],) */;
    %662 = %654.0;
    %663 = %659.0;
    %664 = %660.1;
    %665 = %661.0;
    (%662, %663, %var_3447, %664, %665)
  };
  %666(%var_3457) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(11, 6, 7), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */
}

def @func_6695() -> Tensor[(10, 8, 12), float32] {
  %667 = fn () -> Tensor[(10, 8, 12), float32] {
    @func_2979() /* ty=Tensor[(10, 8, 12), float32] */
  };
  %667() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_5637(%var_5635: Tensor[(14, 15, 8), uint16], %var_5636: Tensor[(14, 15, 8), uint16]) -> Tensor[(14, 15, 8), uint16] {
  @func_5633(%var_5635, %var_5636) /* ty=Tensor[(14, 15, 8), uint16] */
}

def @func_1001(%var_999: Tensor[(11, 11, 13), int8]) -> (Tensor[(10, 8, 12), float64], Tensor[(11, 11, 13), uint64], Tensor[(10, 8, 12), float64]) {
  @func_998(%var_999) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(11, 11, 13), uint64], Tensor[(10, 8, 12), float64]) */
}

def @func_1917() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8]) {
  %668 = @func_818() /* ty=(Tensor[(10, 8, 12), int8],) */;
  %669 = @func_1638() /* ty=Tensor[(10, 8, 12), float32] */;
  %670 = %668.0;
  (%669, %670)
}

def @func_2615() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) {
  @func_2613() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) */
}

def @func_2032() -> Tensor[(10, 8, 12), float32] {
  @func_2030() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_3535() -> Tensor[(10, 8, 12), float32] {
  %671 = fn () -> Tensor[(10, 8, 12), float32] {
    @func_254() /* ty=Tensor[(10, 8, 12), float32] */
  };
  %671() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_6976() -> (Tensor[(10, 8, 12), uint64],) {
  %672 = @func_6918() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %673 = %672.0;
  %674 = cast(%673, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %675 = reshape(%674, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
  %676 = @func_6860(%675) /* ty=(Tensor[(10, 8, 12), int16],) */;
  %677 = %676.0;
  %678 = cast(%677, dtype="uint64") /* ty=Tensor[(10, 8, 12), uint64] */;
  %679 = shape_of(%673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%673, dtype="uint64") /* ty=Tensor[(10, 8, 12), uint64] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %682 = bitwise_or(%680, %681) /* ty=Tensor[(10, 8, 12), uint64] */;
  (%682,)
}

def @func_3148(%var_3146: Tensor[(1001), uint32], %var_3147: Tensor[(1001), uint32]) -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32], Tensor[(1001), int16], Tensor[(1001), uint64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float64]) {
  %714 = fn (%var_3071: Tensor[(1001), uint32], %var_3094: Tensor[(1001), uint32]) -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32], Tensor[(1001), int16], Tensor[(1001), uint64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float64]) {
    %683 = cast(%var_3071, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
    %684 = cast(%var_3071, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
    %685 = reshape(%683, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), uint32] */;
    %686 = reshape(%684, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), uint32] */;
    %687 = @func_1709(%685, %686) /* ty=(Tensor[(13, 7, 11), uint32], Tensor[(10, 8, 12), uint8]) */;
    %688 = cast(%var_3094, dtype="int16") /* ty=Tensor[(1001), int16] */;
    %689 = shape_of(%var_3071, dtype="int32") /* ty=Tensor[(1), int32] */;
    %690 = cast(%var_3071, dtype="int16") /* ty=Tensor[(1001), int16] */;
    %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?), int16] */;
    %692 = cast(%var_3071, dtype="float32") /* ty=Tensor[(1001), float32] */;
    %693 = rsqrt(%692) /* ty=Tensor[(1001), float32] */;
    %694 = cast(%var_3071, dtype="bool") /* ty=Tensor[(1001), bool] */;
    %695 = shape_of(%693, dtype="int32") /* ty=Tensor[(1), int32] */;
    %696 = cast(%693, dtype="bool") /* ty=Tensor[(1001), bool] */;
    %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?), bool] */;
    %698 = less(%696, %697) /* ty=Tensor[(1001), bool] */;
    %699 = cast(%693, dtype="uint64") /* ty=Tensor[(1001), uint64] */;
    %700 = shape_of(%698, dtype="int32") /* ty=Tensor[(1), int32] */;
    %701 = cast(%698, dtype="uint64") /* ty=Tensor[(1001), uint64] */;
    %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %703 = cast(meta[relay.Constant][27] /* ty=Tensor[(1573, 1), int8] */, dtype="int8") /* ty=Tensor[(1573, 1), int8] */;
    %704 = reshape(%703, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), int8] */;
    %705 = @func_998(%704) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(11, 11, 13), uint64], Tensor[(10, 8, 12), float64]) */;
    %706 = @func_2099() /* ty=Tensor[(10, 8, 12), float32] */;
    %707 = %687.1;
    %708 = @func_1982() /* ty=Tensor[(10, 8, 12), float32] */;
    %709 = bitwise_and(%690, %691) /* ty=Tensor[(1001), int16] */;
    %710 = add(%701, %702) /* ty=Tensor[(1001), uint64] */;
    %711 = @func_1638() /* ty=Tensor[(10, 8, 12), float32] */;
    %712 = %705.2;
    %713 = @func_2705() /* ty=Tensor[(10, 8, 12), float64] */;
    (%706, %707, %708, %709, %710, %711, %712, meta[relay.Constant][27] /* ty=Tensor[(1573, 1), int8] */, %713)
  };
  %714(%var_3146, %var_3147) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32], Tensor[(1001), int16], Tensor[(1001), uint64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float64]) */
}

def @func_6559() -> (Tensor[(10, 8, 12), int8],) {
  %715 = @func_4759() /* ty=(Tensor[(10, 8, 12), int8],) */;
  %716 = %715.0;
  (%716,)
}

def @func_2591(%var_2586: Tensor[(1, 364), uint16], %var_2587: Tensor[(80), int16], %var_2588: Tensor[(7, 364), uint16], %var_2589: Tensor[(7, 364), float32], %var_2590: Tensor[(11, 364), uint16]) -> (Tensor[(10, 8, 12), float32], Tensor[(462), int16], Tensor[(10, 2, 4), float32], Tensor[(80), int16], Tensor[(10, 8, 12), float32], Tensor[(7, 364), float64], Tensor[(7, 364), bool], Tensor[(11, 364), uint8], Tensor[(10, 8, 12), float32], Tensor[(11, 6, 7), float64], Tensor[(10, 8, 12), float32]) {
  @func_2584(%var_2586, %var_2587, %var_2588, %var_2589, %var_2590) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(462), int16], Tensor[(10, 2, 4), float32], Tensor[(80), int16], Tensor[(10, 8, 12), float32], Tensor[(7, 364), float64], Tensor[(7, 364), bool], Tensor[(11, 364), uint8], Tensor[(10, 8, 12), float32], Tensor[(11, 6, 7), float64], Tensor[(10, 8, 12), float32]) */
}

def @func_1482(%var_1395: Tensor[(7, 4, 13), uint16]) -> (Tensor[(7, 4, 13), uint16], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) {
  %717 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 4, 13), uint16] */, dtype="uint16") /* ty=Tensor[(1, 4, 13), uint16] */;
  %718 = cast(%var_1395, dtype="uint16") /* ty=Tensor[(7, 4, 13), uint16] */;
  %719 = cast(meta[relay.Constant][29] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
  %720 = reshape(%719, newshape=[462]) /* ty=Tensor[(462), int16] */;
  %721 = @func_501(%720) /* ty=(Tensor[(10, 7, 8), float64], Tensor[(10, 7, 8), float32], Tensor[(10, 8, 12), float64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) */;
  %722 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  %723 = cast(%722, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %724 = %721.2;
  %725 = cast(%724, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %726 = reshape(%725, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
  %727 = @func_321(%726) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) */;
  %728 = right_shift(%717, %718) /* ty=Tensor[(7, 4, 13), uint16] */;
  %729 = log10(%723) /* ty=Tensor[(10, 8, 12), float32] */;
  %730 = %727.2;
  (%728, %724, meta[relay.Constant][29] /* ty=Tensor[(462), int16] */, %729, %730)
}

def @func_6380() -> (Tensor[(10, 8, 12), float32],) {
  %731 = @func_3181() /* ty=(Tensor[(10, 8, 12), float32],) */;
  %732 = %731.0;
  (%732,)
}

def @func_4234(%var_4231: uint64, %var_4232: Tensor[(1, 462), int16], %var_4233: Tensor[(8, 462), int16]) -> (Tensor[(10, 8, 12), float32], Tensor[(462), int16], uint64, Tensor[(275), uint64], Tensor[(8, 462), bool]) {
  @func_4229(%var_4231, %var_4232, %var_4233) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(462), int16], uint64, Tensor[(275), uint64], Tensor[(8, 462), bool]) */
}

def @func_3791() -> (Tensor[(10, 8, 12), float32],) {
  @func_3789() /* ty=(Tensor[(10, 8, 12), float32],) */
}

def @func_6290() -> (Tensor[(10, 8, 12), uint8],) {
  %734 = fn () -> (Tensor[(10, 8, 12), uint8],) {
    %733 = @func_5844() /* ty=Tensor[(10, 8, 12), uint8] */;
    (%733,)
  };
  %734() /* ty=(Tensor[(10, 8, 12), uint8],) */
}

def @func_4671(%var_4669: Tensor[(12, 14, 13), float64]) -> (Tensor[(12, 14, 13), float64], Tensor[(12, 14, 13), float64]) {
  @func_4668(%var_4669) /* ty=(Tensor[(12, 14, 13), float64], Tensor[(12, 14, 13), float64]) */
}

def @func_819() -> (Tensor[(10, 8, 12), int8],) {
  %744 = fn () -> (Tensor[(10, 8, 12), int8],) {
    %735 = @func_774() /* ty=(Tensor[(10, 8, 12), float64],) */;
    %736 = %735.0;
    %737 = cast(%736, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
    %738 = acosh(%737) /* ty=Tensor[(10, 8, 12), float32] */;
    %739 = cast(%736, dtype="int8") /* ty=Tensor[(10, 8, 12), int8] */;
    %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
    %741 = cast(%738, dtype="int8") /* ty=Tensor[(10, 8, 12), int8] */;
    %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %743 = left_shift(%741, %742) /* ty=Tensor[(10, 8, 12), int8] */;
    (%743,)
  };
  %744() /* ty=(Tensor[(10, 8, 12), int8],) */
}

def @func_1335(%var_1332: bool, %var_1333: Tensor[(1, 4, 10), bool], %var_1334: Tensor[(462), int16]) -> (Tensor[(1, 4, 10), bool], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float32]) {
  %755 = fn (%var_1296: bool, %var_1297: Tensor[(1, 4, 10), bool], %var_1302: Tensor[(462), int16]) -> (Tensor[(1, 4, 10), bool], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float32]) {
    %745 = cast(%var_1296, dtype="bool") /* ty=bool */;
    %746 = cast(%var_1297, dtype="bool") /* ty=Tensor[(1, 4, 10), bool] */;
    %747 = cast(%var_1302, dtype="int16") /* ty=Tensor[(462), int16] */;
    %748 = reshape(%747, newshape=[462]) /* ty=Tensor[(462), int16] */;
    %749 = @func_501(%748) /* ty=(Tensor[(10, 7, 8), float64], Tensor[(10, 7, 8), float32], Tensor[(10, 8, 12), float64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) */;
    %750 = @func_818() /* ty=(Tensor[(10, 8, 12), int8],) */;
    %751 = logical_and(%745, %746) /* ty=Tensor[(1, 4, 10), bool] */;
    %752 = %749.2;
    %753 = %750.0;
    %754 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
    (%751, %752, %var_1302, %753, %754)
  };
  %755(%var_1332, %var_1333, %var_1334) /* ty=(Tensor[(1, 4, 10), bool], Tensor[(10, 8, 12), float64], Tensor[(462), int16], Tensor[(10, 8, 12), int8], Tensor[(10, 8, 12), float32]) */
}

def @func_3214() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
  %760 = fn () -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
    %756 = @func_2316() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) */;
    %757 = @func_2341() /* ty=(Tensor[(10, 8, 12), float64],) */;
    %758 = %756.0;
    %759 = %757.0;
    (%758, %759)
  };
  %760() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */
}

def @func_5134(%var_5132: Tensor[(3, 14, 6), int64]) -> (Tensor[(3, 14, 6), bool], Tensor[(3, 14, 6), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) {
  @func_5131(%var_5132) /* ty=(Tensor[(3, 14, 6), bool], Tensor[(3, 14, 6), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) */
}

def @func_5131(%var_5052: Tensor[(3, 14, 6), int64]) -> (Tensor[(3, 14, 6), bool], Tensor[(3, 14, 6), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32]) {
  %761 = cast(%var_5052, dtype="bool") /* ty=Tensor[(3, 14, 6), bool] */;
  %762 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(3, 14, 6), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 14, 6), int64] */, dtype="bool") /* ty=Tensor[(3, 14, 6), bool] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %765 = greater(%763, %764) /* ty=Tensor[(3, 14, 6), bool] */;
  %766 = cast(%var_5052, dtype="bool") /* ty=Tensor[(3, 14, 6), bool] */;
  %767 = shape_of(%765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%765, dtype="bool") /* ty=Tensor[(3, 14, 6), bool] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %770 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 14, 6), int64] */, dtype="float32") /* ty=Tensor[(3, 14, 6), float32] */;
  %771 = not_equal(%768, %769) /* ty=Tensor[(3, 14, 6), bool] */;
  %772 = sinh(%770) /* ty=Tensor[(3, 14, 6), float32] */;
  %773 = @func_2979() /* ty=Tensor[(10, 8, 12), float32] */;
  %774 = @func_385() /* ty=Tensor[(10, 8, 12), float32] */;
  (%771, %772, %773, %774)
}

def @func_1171(%var_1169: Tensor[(10, 1, 1), float64], %var_1170: Tensor[(10, 2, 1), float64]) -> (Tensor[(10, 2, 1), bool], Tensor[(10, 2, 1), float64]) {
  %783 = fn (%var_1140: Tensor[(10, 1, 1), float64], %var_1141: Tensor[(10, 2, 1), float64]) -> (Tensor[(10, 2, 1), bool], Tensor[(10, 2, 1), float64]) {
    %775 = cast(%var_1140, dtype="bool") /* ty=Tensor[(10, 1, 1), bool] */;
    %776 = cast(%var_1141, dtype="bool") /* ty=Tensor[(10, 2, 1), bool] */;
    %777 = cast(%var_1140, dtype="bool") /* ty=Tensor[(10, 1, 1), bool] */;
    %778 = cast(%var_1141, dtype="bool") /* ty=Tensor[(10, 2, 1), bool] */;
    %779 = greater(%777, %778) /* ty=Tensor[(10, 2, 1), bool] */;
    %780 = cast(%779, dtype="float64") /* ty=Tensor[(10, 2, 1), float64] */;
    %781 = less_equal(%775, %776) /* ty=Tensor[(10, 2, 1), bool] */;
    %782 = cos(%780) /* ty=Tensor[(10, 2, 1), float64] */;
    (%781, %782)
  };
  %783(%var_1169, %var_1170) /* ty=(Tensor[(10, 2, 1), bool], Tensor[(10, 2, 1), float64]) */
}

def @main(%var_7018: Tensor[(5, 2, 1), float64]) -> Tensor[(5, 2, 1), float64] {
  %784 = cast(%var_7018, dtype="float64") /* ty=Tensor[(5, 2, 1), float64] */;
  sin(%784) /* ty=Tensor[(5, 2, 1), float64] */
}

def @func_354() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
  %792 = fn () -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) {
    %785 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
    %786 = cast(%785, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
    %787 = reshape(%786, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
    %788 = @func_321(%787) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) */;
    %789 = %788.2;
    %790 = cast(%789, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
    %791 = sigmoid(%790) /* ty=Tensor[(10, 8, 12), float64] */;
    (%785, %791)
  };
  %792() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */
}

def @func_2316() -> (Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) {
  %793 = cast(meta[relay.Constant][31] /* ty=Tensor[(1573, 1), int8] */, dtype="int8") /* ty=Tensor[(1573, 1), int8] */;
  %794 = reshape(%793, newshape=[1573]) /* ty=Tensor[(1573), int8] */;
  %795 = @func_2230(%794) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) */;
  %796 = @func_698() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %797 = cast(meta[relay.Constant][31] /* ty=Tensor[(1573, 1), int8] */, dtype="int8") /* ty=Tensor[(1573, 1), int8] */;
  %798 = reshape(%797, newshape=[1573]) /* ty=Tensor[(1573), int8] */;
  %799 = @func_2230(%798) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) */;
  %800 = @func_2099() /* ty=Tensor[(10, 8, 12), float32] */;
  %801 = %795.1;
  %802 = %796.1;
  %803 = %799.2;
  %804 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
  (%800, %801, meta[relay.Constant][31] /* ty=Tensor[(1573, 1), int8] */, %802, %803, %804)
}

def @func_107(%var_86: Tensor[(11, 6, 7), int16], %var_87: Tensor[(11, 6, 7), int16]) -> (Tensor[(11, 6, 7), float64],) {
  %805 = cast(%var_87, dtype="int16") /* ty=Tensor[(11, 6, 7), int16] */;
  %806 = shape_of(%var_86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %807 = cast(%var_86, dtype="int16") /* ty=Tensor[(11, 6, 7), int16] */;
  %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %809 = bitwise_or(%807, %808) /* ty=Tensor[(11, 6, 7), int16] */;
  %810 = cast(%809, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
  %811 = atan(%810) /* ty=Tensor[(11, 6, 7), float64] */;
  (%811,)
}

def @func_1620() -> (Tensor[(10, 8, 12), float32],) {
  %813 = fn () -> (Tensor[(10, 8, 12), float32],) {
    %812 = @func_254() /* ty=Tensor[(10, 8, 12), float32] */;
    (%812,)
  };
  %813() /* ty=(Tensor[(10, 8, 12), float32],) */
}

def @func_1550(%var_1548: Tensor[(10, 2, 4), int16], %var_1549: Tensor[(10, 2, 4), int16]) -> (Tensor[(10, 2, 4), int16], Tensor[(10, 2, 4), float32]) {
  @func_1546(%var_1548, %var_1549) /* ty=(Tensor[(10, 2, 4), int16], Tensor[(10, 2, 4), float32]) */
}

def @func_3564() -> (Tensor[(10, 8, 12), float64],) {
  @func_3562() /* ty=(Tensor[(10, 8, 12), float64],) */
}

def @func_1640() -> Tensor[(10, 8, 12), float32] {
  @func_1638() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_5288(%var_5284: Tensor[(12, 2, 1), float32]) -> Tensor[(12, 2, 1), float32] {
  %814 = cast(-4.64707f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %815 = cast(%var_5284, dtype="float32") /* ty=Tensor[(12, 2, 1), float32] */;
  divide(%814, %815) /* ty=Tensor[(12, 2, 1), float32] */
}

def @func_4278() -> Tensor[(80), int16] {
  @func_4276() /* ty=Tensor[(80), int16] */
}

def @func_6375() -> (Tensor[(10, 8, 12), float64],) {
  %816 = @func_4383() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64]) */;
  %817 = %816.1;
  (%817,)
}

def @func_5408() -> Tensor[(10, 8, 12), float64] {
  @func_5406() /* ty=Tensor[(10, 8, 12), float64] */
}

def @func_4585(%var_4583: Tensor[(40, 1), bool]) -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1, 4, 10), bool], Tensor[(40, 1), bool], Tensor[(462), int16], Tensor[(1, 80), bool], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), bool]) {
  @func_4582(%var_4583) /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), bool], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(1, 4, 10), bool], Tensor[(40, 1), bool], Tensor[(462), int16], Tensor[(1, 80), bool], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), bool]) */
}

def @func_2101() -> Tensor[(10, 8, 12), float32] {
  @func_2099() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_2468(%var_2424: Tensor[(13, 13, 7), bool]) -> (Tensor[(13, 13, 7), bool], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) {
  %818 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 13, 7), bool] */, dtype="bool") /* ty=Tensor[(1, 13, 7), bool] */;
  %819 = cast(%var_2424, dtype="bool") /* ty=Tensor[(13, 13, 7), bool] */;
  %820 = @func_1585() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64]) */;
  %821 = @func_1128() /* ty=(Tensor[(10, 8, 12), float64],) */;
  %822 = cast(meta[relay.Constant][33] /* ty=Tensor[(1573), int8] */, dtype="int8") /* ty=Tensor[(1573), int8] */;
  %823 = reshape(%822, newshape=[1573]) /* ty=Tensor[(1573), int8] */;
  %824 = @func_2230(%823) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float64], Tensor[(1573), int8]) */;
  %825 = logical_or(%818, %819) /* ty=Tensor[(13, 13, 7), bool] */;
  %826 = %820.1;
  %827 = %821.0;
  %828 = %824.1;
  (%825, %826, %827, %828, meta[relay.Constant][33] /* ty=Tensor[(1573), int8] */)
}

def @func_1546(%var_1521: Tensor[(10, 2, 4), int16], %var_1522: Tensor[(10, 2, 4), int16]) -> (Tensor[(10, 2, 4), int16], Tensor[(10, 2, 4), float32]) {
  %829 = cast(%var_1522, dtype="int16") /* ty=Tensor[(10, 2, 4), int16] */;
  %830 = shape_of(%var_1521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %831 = cast(%var_1521, dtype="int16") /* ty=Tensor[(10, 2, 4), int16] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %833 = cast(%var_1522, dtype="float32") /* ty=Tensor[(10, 2, 4), float32] */;
  %834 = bitwise_or(%831, %832) /* ty=Tensor[(10, 2, 4), int16] */;
  %835 = cosh(%833) /* ty=Tensor[(10, 2, 4), float32] */;
  (%834, %835)
}

def @func_6281(%var_6280: Tensor[(462), int16]) -> (Tensor[(10, 8, 12), float32], Tensor[(12, 3, 10), float32], Tensor[(360), float64], Tensor[(10, 7, 8), float64], Tensor[(462), int16], Tensor[(10, 8, 12), uint8]) {
  %849 = fn (%var_6268: Tensor[(462), int16]) -> (Tensor[(10, 8, 12), float32], Tensor[(12, 3, 10), float32], Tensor[(360), float64], Tensor[(10, 7, 8), float64], Tensor[(462), int16], Tensor[(10, 8, 12), uint8]) {
    %836 = cast(meta[relay.Constant][34] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %837 = cast(meta[relay.Constant][34] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %838 = reshape(%836, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), float64] */;
    %839 = reshape(%837, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), float64] */;
    %840 = @func_3642(%838, %839) /* ty=(Tensor[(12, 3, 10), float64], Tensor[(12, 3, 10), float32], Tensor[(10, 8, 12), float64], Tensor[(12, 3, 10), bool], Tensor[(10, 8, 12), float64]) */;
    %841 = cast(%var_6268, dtype="int16") /* ty=Tensor[(462), int16] */;
    %842 = reshape(%841, newshape=[462]) /* ty=Tensor[(462), int16] */;
    %843 = @func_501(%842) /* ty=(Tensor[(10, 7, 8), float64], Tensor[(10, 7, 8), float32], Tensor[(10, 8, 12), float64], Tensor[(11, 6, 7), float64], Tensor[(462), int16]) */;
    %844 = @func_3403() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), uint8], Tensor[(10, 8, 12), float32]) */;
    %845 = @func_2842() /* ty=Tensor[(10, 8, 12), float32] */;
    %846 = %840.1;
    %847 = %843.0;
    %848 = %844.1;
    (%845, %846, meta[relay.Constant][34] /* ty=Tensor[(360), float64] */, %847, %var_6268, %848)
  };
  %849(%var_6280) /* ty=(Tensor[(10, 8, 12), float32], Tensor[(12, 3, 10), float32], Tensor[(360), float64], Tensor[(10, 7, 8), float64], Tensor[(462), int16], Tensor[(10, 8, 12), uint8]) */
}

def @func_6552(%var_6551: Tensor[(13, 12, 3), float64]) -> Tensor[(13, 12, 3), float64] {
  %851 = fn (%var_6546: Tensor[(13, 12, 3), float64]) -> Tensor[(13, 12, 3), float64] {
    %850 = cast(%var_6546, dtype="float64") /* ty=Tensor[(13, 12, 3), float64] */;
    acos(%850) /* ty=Tensor[(13, 12, 3), float64] */
  };
  %851(%var_6551) /* ty=Tensor[(13, 12, 3), float64] */
}

def @func_1712(%var_1710: Tensor[(13, 7, 11), uint32], %var_1711: Tensor[(13, 7, 11), uint32]) -> (Tensor[(13, 7, 11), uint32], Tensor[(10, 8, 12), uint8]) {
  %859 = fn (%var_1682: Tensor[(13, 7, 11), uint32], %var_1683: Tensor[(13, 7, 11), uint32]) -> (Tensor[(13, 7, 11), uint32], Tensor[(10, 8, 12), uint8]) {
    %852 = cast(%var_1683, dtype="uint32") /* ty=Tensor[(13, 7, 11), uint32] */;
    %853 = shape_of(%var_1682, dtype="int32") /* ty=Tensor[(3), int32] */;
    %854 = cast(%var_1682, dtype="uint32") /* ty=Tensor[(13, 7, 11), uint32] */;
    %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %856 = @func_859() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), uint8]) */;
    %857 = left_shift(%854, %855) /* ty=Tensor[(13, 7, 11), uint32] */;
    %858 = %856.1;
    (%857, %858)
  };
  %859(%var_1710, %var_1711) /* ty=(Tensor[(13, 7, 11), uint32], Tensor[(10, 8, 12), uint8]) */
}

def @func_2817() -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8]) {
  %869 = fn () -> (Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8]) {
    %860 = @func_1619() /* ty=(Tensor[(10, 8, 12), float32],) */;
    %861 = @func_1917() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), int8]) */;
    %862 = %861.0;
    %863 = cast(%862, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
    %864 = @func_2316() /* ty=(Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32]) */;
    %865 = @func_2705() /* ty=Tensor[(10, 8, 12), float64] */;
    %866 = %860.0;
    %867 = cos(%863) /* ty=Tensor[(10, 8, 12), float64] */;
    %868 = %864.2;
    (%865, %866, %867, %868)
  };
  %869() /* ty=(Tensor[(10, 8, 12), float64], Tensor[(10, 8, 12), float32], Tensor[(10, 8, 12), float64], Tensor[(1573, 1), int8]) */
}

def @func_1984() -> Tensor[(10, 8, 12), float32] {
  @func_1982() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_6724() -> Tensor[(10, 8, 12), float32] {
  %870 = fn () -> Tensor[(10, 8, 12), float32] {
    @func_5016() /* ty=Tensor[(10, 8, 12), float32] */
  };
  %870() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_3671(%var_3670: Tensor[(10, 8, 12), float32]) -> Tensor[(10, 8, 12), float64] {
  %876 = fn (%var_3661: Tensor[(10, 8, 12), float32]) -> Tensor[(10, 8, 12), float64] {
    %871 = @func_1638() /* ty=Tensor[(10, 8, 12), float32] */;
    %872 = cast(%var_3661, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
    %873 = shape_of(%871, dtype="int32") /* ty=Tensor[(3), int32] */;
    %874 = cast(%871, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
    %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%874, %875) /* ty=Tensor[(10, 8, 12), float64] */
  };
  %876(%var_3670) /* ty=Tensor[(10, 8, 12), float64] */
}

def @func_6978() -> (Tensor[(10, 8, 12), uint64],) {
  @func_6976() /* ty=(Tensor[(10, 8, 12), uint64],) */
}

def @func_5331() -> Tensor[(80), int16] {
  @func_5329() /* ty=Tensor[(80), int16] */
}

def @func_4276() -> Tensor[(80), int16] {
  %877 = @func_2963() /* ty=(Tensor[(80), int16],) */;
  %877.0
}

def @func_5589() -> Tensor[(10, 8, 12), float32] {
  @func_385() /* ty=Tensor[(10, 8, 12), float32] */
}

def @func_4994() -> Tensor[(10, 8, 12), float64] {
  @func_3961() /* ty=Tensor[(10, 8, 12), float64] */
}

def @func_6382() -> (Tensor[(10, 8, 12), float32],) {
  @func_6380() /* ty=(Tensor[(10, 8, 12), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen75/build/output.py:2554: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen75/build/output.py", line 2559, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(10) tvmgen_default_fused_sin_kernel0(double* __restrict__ T_sin, double* __restrict__ placeholder) {
  T_sin[(((int)threadIdx.x))] = sin(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

