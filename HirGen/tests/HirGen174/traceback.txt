==========mod==========
#[version = "0.0.5"]
def @func_2278() -> Tensor[(2, 1, 8), float64] {
  %0 = @func_2252() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(2, 1, 8), float64] */;
  asin(%2) /* ty=Tensor[(2, 1, 8), float64] */
}

def @func_5688() -> (Tensor[(2, 1, 8), float32], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(250, 2), float64], Tensor[(500), float32], Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float64]) {
  %3 = @func_3427() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %5 = reshape(%4, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float64] */;
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
  %7 = reshape(%6, newshape=[250, 2]) /* ty=Tensor[(250, 2), float32] */;
  %8 = @func_4479(%7) /* ty=(Tensor[(2, 1, 8), float32], Tensor[(250, 2), uint64], Tensor[(250, 2), float64]) */;
  %9 = @func_2307() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %10 = %3.0;
  %11 = @func_1423(%5) /* ty=Tensor[(16, 5, 2), float64] */;
  %12 = %8.2;
  %13 = %9.0;
  %14 = @func_3267() /* ty=Tensor[(2, 1, 8), float64] */;
  (%10, %11, meta[relay.Constant][0] /* ty=Tensor[(160), float64] */, %12, meta[relay.Constant][1] /* ty=Tensor[(500), float32] */, %13, %14)
}

def @func_5947(%var_5838: Tensor[(8, 5, 6), int8], %var_5839: Tensor[(8, 5, 6), int8], %var_5933: Tensor[(1024), uint8], %var_5934: Tensor[(3120), uint8], %var_5936: Tensor[(500), float32]) -> (Tensor[(8, 5, 6), int8], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(252, 1755), bool], Tensor[(1755), float64], Tensor[(16, 15, 13), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(500), float32], Tensor[(9, 13, 15), float32], Tensor[(2, 1, 8), float32]) {
  %15 = cast(%var_5839, dtype="int8") /* ty=Tensor[(8, 5, 6), int8] */;
  %16 = shape_of(%var_5838, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%var_5838, dtype="int8") /* ty=Tensor[(8, 5, 6), int8] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %19 = cast(meta[relay.Constant][2] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %20 = reshape(%19, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float64] */;
  %21 = cast(meta[relay.Constant][3] /* ty=Tensor[(1755), float32] */, dtype="bool") /* ty=Tensor[(1755), bool] */;
  %22 = cast(meta[relay.Constant][4] /* ty=Tensor[(252, 1), int32] */, dtype="bool") /* ty=Tensor[(252, 1), bool] */;
  %23 = less(%21, %22) /* ty=Tensor[(252, 1755), bool] */;
  %24 = cast(%23, dtype="bool") /* ty=Tensor[(252, 1755), bool] */;
  %25 = cast(meta[relay.Constant][3] /* ty=Tensor[(1755), float32] */, dtype="bool") /* ty=Tensor[(1755), bool] */;
  %26 = cast(meta[relay.Constant][3] /* ty=Tensor[(1755), float32] */, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %27 = log2(%26) /* ty=Tensor[(1755), float64] */;
  %28 = cast(meta[relay.Constant][4] /* ty=Tensor[(252, 1), int32] */, dtype="int32") /* ty=Tensor[(252, 1), int32] */;
  %29 = cast(meta[relay.Constant][3] /* ty=Tensor[(1755), float32] */, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %30 = reshape(%28, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %31 = reshape(%29, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
  %32 = @func_1341(%30, %31) /* ty=(Tensor[(9, 15, 15), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1755), float32], Tensor[(9, 13, 15), float32]) */;
  %33 = %32.1;
  %34 = cast(%33, dtype="uint32") /* ty=Tensor[(9, 13, 15), uint32] */;
  %35 = shape_of(%27, dtype="int32") /* ty=Tensor[(1), int32] */;
  %36 = cast(%27, dtype="uint32") /* ty=Tensor[(1755), uint32] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %38 = bitwise_xor(%36, %37) /* ty=Tensor[(1755), uint32] */;
  %39 = cast(%38, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %40 = cast(%var_5933, dtype="uint8") /* ty=Tensor[(1024), uint8] */;
  %41 = cast(%var_5934, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %42 = cast(meta[relay.Constant][5] /* ty=Tensor[(275), uint8] */, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %43 = cast(%var_5936, dtype="float32") /* ty=Tensor[(500), float32] */;
  %44 = reshape(%40, newshape=[1024]) /* ty=Tensor[(1024), uint8] */;
  %45 = reshape(%41, newshape=[3120]) /* ty=Tensor[(3120), uint8] */;
  %46 = reshape(%42, newshape=[275]) /* ty=Tensor[(275), uint8] */;
  %47 = reshape(%43, newshape=[10, 50]) /* ty=Tensor[(10, 50), float32] */;
  %48 = @func_2626(%44, %45, %46, %47) /* ty=(Tensor[(2, 1, 8), float64], float32, Tensor[(2, 1, 8), float32], Tensor[(16, 15, 13), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(2, 1, 8), float32], Tensor[(10, 5, 10), uint16], Tensor[(10, 50), float32], Tensor[(6, 12, 8), float32]) */;
  %49 = cast(meta[relay.Constant][4] /* ty=Tensor[(252, 1), int32] */, dtype="int32") /* ty=Tensor[(252, 1), int32] */;
  %50 = cast(%33, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
  %51 = reshape(%49, newshape=[4, 7, 9]) /* ty=Tensor[(4, 7, 9), int32] */;
  %52 = reshape(%50, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
  %53 = @func_385(%51, %52) /* ty=(Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), uint16], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), int8], Tensor[(1755), float64]) */;
  %54 = bitwise_xor(%17, %18) /* ty=Tensor[(8, 5, 6), int8] */;
  %55 = @func_1423(%20) /* ty=Tensor[(16, 5, 2), float64] */;
  %56 = greater(%24, %25) /* ty=Tensor[(252, 1755), bool] */;
  %57 = acosh(%39) /* ty=Tensor[(1755), float64] */;
  %58 = %48.3;
  %59 = %53.4;
  %60 = @func_3918() /* ty=Tensor[(2, 1, 8), float32] */;
  (%54, %55, meta[relay.Constant][2] /* ty=Tensor[(160), float64] */, %56, %57, %58, %var_5933, %var_5934, meta[relay.Constant][5] /* ty=Tensor[(275), uint8] */, %var_5936, %59, %60)
}

def @func_3918() -> Tensor[(2, 1, 8), float32] {
  %61 = @func_3123() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %61.0
}

def @func_6076(%var_6065: Tensor[(2, 9, 8), float64]) -> (Tensor[(2, 9, 8), uint16],) {
  %62 = @func_2278() /* ty=Tensor[(2, 1, 8), float64] */;
  %63 = cast(%62, dtype="uint16") /* ty=Tensor[(2, 1, 8), uint16] */;
  %64 = cast(%var_6065, dtype="uint16") /* ty=Tensor[(2, 9, 8), uint16] */;
  %65 = minimum(%63, %64) /* ty=Tensor[(2, 9, 8), uint16] */;
  (%65,)
}

def @func_2802() -> Tensor[(2, 1, 8), float32] {
  @func_2200() /* ty=Tensor[(2, 1, 8), float32] */
}

def @func_4165() -> Tensor[(2, 1, 8), float32] {
  %66 = @func_3427() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %66.0
}

def @func_4927() -> (Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float32]) {
  %67 = @func_3896() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %68 = %67.0;
  %69 = cast(%68, dtype="float32") /* ty=Tensor[(2, 1, 8), float32] */;
  %70 = @func_2644() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %71 = tan(%69) /* ty=Tensor[(2, 1, 8), float32] */;
  %72 = %70.0;
  (%71, %72)
}

def @func_2050(%var_2004: Tensor[(3, 12, 1), int16], %var_2013: Tensor[(275), uint8], %var_2020: Tensor[(120), int64]) -> (Tensor[(11, 5, 5), int8], Tensor[(275), uint8], Tensor[(3, 12, ?), float64], Tensor[(4, 10, 3), int64], Tensor[(120), int64], Tensor[(3120), uint8], Tensor[(1, 132), uint32], Tensor[(275, 1), uint8], Tensor[(11, 5, 5), int8]) {
  %73 = cast(%var_2013, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %74 = cast(%var_2013, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %75 = cast(%var_2013, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %76 = reshape(%73, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
  %77 = reshape(%74, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
  %78 = reshape(%75, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
  %79 = @func_668(%76, %77, %78) /* ty=(Tensor[(11, 5, 5), float32], Tensor[(11, 5, 5), int8], Tensor[(11, 5, 5), float32]) */;
  %80 = cast(meta[relay.Constant][6] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %81 = cast(%var_2004, dtype="bool") /* ty=Tensor[(3, 12, 1), bool] */;
  %82 = greater(%80, %81) /* ty=Tensor[(3, 12, 1), bool] */;
  %83 = cast(%var_2004, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %87 = cast(%var_2020, dtype="int64") /* ty=Tensor[(120), int64] */;
  %88 = cast(%var_2020, dtype="int64") /* ty=Tensor[(120), int64] */;
  %89 = reshape(%87, newshape=[4, 10, 3]) /* ty=Tensor[(4, 10, 3), int64] */;
  %90 = reshape(%88, newshape=[4, 10, 3]) /* ty=Tensor[(4, 10, 3), int64] */;
  %91 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 132), uint32] */, dtype="uint32") /* ty=Tensor[(1, 132), uint32] */;
  %92 = reshape(%91, newshape=[3, 4, 11]) /* ty=Tensor[(3, 4, 11), uint32] */;
  %93 = @func_1632(%92) /* ty=(Tensor[(3, 4, 11), uint32], Tensor[(1755), float32], Tensor[(3120), uint8]) */;
  %94 = %93.2;
  %95 = cast(%94, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %96 = reshape(%95, newshape=[16, 15, 13]) /* ty=Tensor[(16, 15, 13), uint8] */;
  %97 = @func_709(%96) /* ty=(Tensor[(16, 15, 13), uint8], Tensor[(11, 5, 5), float32], Tensor[(275, 1), uint8]) */;
  %98 = cast(%var_2013, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %99 = cast(%var_2013, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %100 = %79.1;
  %101 = cast(%100, dtype="uint8") /* ty=Tensor[(11, 5, 5), uint8] */;
  %102 = reshape(%98, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
  %103 = reshape(%99, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
  %104 = reshape(%101, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
  %105 = @func_668(%102, %103, %104) /* ty=(Tensor[(11, 5, 5), float32], Tensor[(11, 5, 5), int8], Tensor[(11, 5, 5), float32]) */;
  %106 = floor_divide(%85, %86) /* ty=Tensor[(3, 12, ?), float64] */;
  %107 = @func_1598(%89, %90) /* ty=Tensor[(4, 10, 3), int64] */;
  %108 = %97.2;
  %109 = %105.1;
  (%100, %var_2013, %106, %107, %var_2020, %94, meta[relay.Constant][7] /* ty=Tensor[(1, 132), uint32] */, %108, %109)
}

def @func_796(%var_761: Tensor[(156, 20), uint8]) -> (Tensor[(9, 13, 15), float32], Tensor[(1755), float32], Tensor[(16, 15, 13), uint8], Tensor[(156, 20), uint8], Tensor[(3, ?, 14), uint16], Tensor[(3, 1, 14), float64], Tensor[(3, 1, 14), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32]) {
  %110 = cast(meta[relay.Constant][8] /* ty=Tensor[(1755), float32] */, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %111 = reshape(%110, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), float32] */;
  %112 = @func_22(%111) /* ty=(Tensor[(9, 13, 15), float32],) */;
  %113 = cast(%var_761, dtype="uint8") /* ty=Tensor[(156, 20), uint8] */;
  %114 = reshape(%113, newshape=[16, 15, 13]) /* ty=Tensor[(16, 15, 13), uint8] */;
  %115 = @func_709(%114) /* ty=(Tensor[(16, 15, 13), uint8], Tensor[(11, 5, 5), float32], Tensor[(275, 1), uint8]) */;
  %116 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 1, 14), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 14), float64] */;
  %117 = sqrt(%116) /* ty=Tensor[(3, 1, 14), float64] */;
  %118 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 1, 14), float64] */, dtype="uint16") /* ty=Tensor[(3, 1, 14), uint16] */;
  %119 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%117, dtype="uint16") /* ty=Tensor[(3, 1, 14), uint16] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %122 = cast(%117, dtype="float32") /* ty=Tensor[(3, 1, 14), float32] */;
  %123 = erf(%122) /* ty=Tensor[(3, 1, 14), float32] */;
  %124 = cast(%123, dtype="float64") /* ty=Tensor[(3, 1, 14), float64] */;
  %125 = cast(%123, dtype="float64") /* ty=Tensor[(3, 1, 14), float64] */;
  %126 = cast(meta[relay.Constant][10] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %127 = %112.0;
  %128 = cast(%127, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
  %129 = reshape(%126, newshape=[4, 7, 9]) /* ty=Tensor[(4, 7, 9), int32] */;
  %130 = reshape(%128, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
  %131 = @func_385(%129, %130) /* ty=(Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), uint16], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), int8], Tensor[(1755), float64]) */;
  %132 = %115.0;
  %133 = right_shift(%120, %121) /* ty=Tensor[(3, ?, 14), uint16] */;
  %134 = tan(%124) /* ty=Tensor[(3, 1, 14), float64] */;
  %135 = cosh(%125) /* ty=Tensor[(3, 1, 14), float64] */;
  %136 = %131.5;
  (%127, meta[relay.Constant][8] /* ty=Tensor[(1755), float32] */, %132, %var_761, %133, %134, %135, %136, meta[relay.Constant][10] /* ty=Tensor[(252), int32] */)
}

def @func_3772() -> (Tensor[(15, 15, ?), int8],) {
  %137 = @func_3363() /* ty=(Tensor[(2, 1, 8), float32], Tensor[(15, 15, ?), int8]) */;
  %138 = %137.1;
  (%138,)
}

def @func_4865(%var_4830: Tensor[(4, 16, 7), float64]) -> (Tensor[(4, 16, 7), int32], Tensor[(4, 16, 7), bool], Tensor[(4, 16, 7), float32]) {
  %139 = cast(%var_4830, dtype="float64") /* ty=Tensor[(4, 16, 7), float64] */;
  %140 = acos(%139) /* ty=Tensor[(4, 16, 7), float64] */;
  %141 = cast(%140, dtype="int32") /* ty=Tensor[(4, 16, 7), int32] */;
  %142 = shape_of(%var_4830, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%var_4830, dtype="int32") /* ty=Tensor[(4, 16, 7), int32] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %145 = cast(%var_4830, dtype="bool") /* ty=Tensor[(4, 16, 7), bool] */;
  %146 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%140, dtype="bool") /* ty=Tensor[(4, 16, 7), bool] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %149 = cast(%var_4830, dtype="float32") /* ty=Tensor[(4, 16, 7), float32] */;
  %150 = minimum(%143, %144) /* ty=Tensor[(4, 16, 7), int32] */;
  %151 = logical_and(%147, %148) /* ty=Tensor[(4, 16, 7), bool] */;
  %152 = sin(%149) /* ty=Tensor[(4, 16, 7), float32] */;
  (%150, %151, %152)
}

def @func_5630() -> (Tensor[(250, 2), float32],) {
  %153 = @func_4141() /* ty=Tensor[(250, 2), float32] */;
  (%153,)
}

def @func_6003() -> (Tensor[(2, 1, 8), float64],) {
  %154 = @func_3896() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %155 = %154.0;
  (%155,)
}

def @func_3493() -> Tensor[(160), float64] {
  %156 = @func_2900() /* ty=(Tensor[(240), float32], Tensor[(2, ?, 8), int16], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) */;
  %156.3
}

def @main(%var_6455: Tensor[(14, 4, 6), bool], %var_6456: Tensor[(14, 4, 6), bool]) -> (Tensor[(14, 4, 6), bool],) {
  %157 = cast(%var_6456, dtype="bool") /* ty=Tensor[(14, 4, 6), bool] */;
  %158 = shape_of(%var_6455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%var_6455, dtype="bool") /* ty=Tensor[(14, 4, 6), bool] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %161 = logical_or(%159, %160) /* ty=Tensor[(14, 4, 6), bool] */;
  (%161,)
}

def @func_5582() -> (Tensor[(2, 1, 8), float64],) {
  %162 = @func_5227() /* ty=(Tensor[(4, 10, 3), int64], Tensor[(2, 1, 8), float64]) */;
  %163 = %162.1;
  (%163,)
}

def @func_4389(%var_4352: Tensor[(16, 5, 2), float64], %var_4375: Tensor[(462), float64]) -> (Tensor[(160), float64], Tensor[(16, 5, 2), float32], Tensor[(14, 11, 3), float64], Tensor[(462), float64], Tensor[(1755), float32]) {
  %164 = @func_3493() /* ty=Tensor[(160), float64] */;
  %165 = cast(%164, dtype="float64") /* ty=Tensor[(160), float64] */;
  %166 = reshape(%165, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float64] */;
  %167 = @func_1423(%166) /* ty=Tensor[(16, 5, 2), float64] */;
  %168 = cast(%var_4352, dtype="float32") /* ty=Tensor[(16, 5, 2), float32] */;
  %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%167, dtype="float32") /* ty=Tensor[(16, 5, 2), float32] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %172 = floor_divide(%170, %171) /* ty=Tensor[(16, 5, 2), float32] */;
  %173 = cast(%172, dtype="float32") /* ty=Tensor[(16, 5, 2), float32] */;
  %174 = cast(%var_4375, dtype="float64") /* ty=Tensor[(462), float64] */;
  %175 = cast(%var_4375, dtype="float64") /* ty=Tensor[(462), float64] */;
  %176 = reshape(%174, newshape=[14, 11, 3]) /* ty=Tensor[(14, 11, 3), float64] */;
  %177 = reshape(%175, newshape=[14, 11, 3]) /* ty=Tensor[(14, 11, 3), float64] */;
  %178 = @func_3742() /* ty=(Tensor[(240), float32], Tensor[(252), int32], Tensor[(252), int32], Tensor[(1755), float32]) */;
  %179 = erf(%173) /* ty=Tensor[(16, 5, 2), float32] */;
  %180 = @func_2699(%176, %177) /* ty=Tensor[(14, 11, 3), float64] */;
  %181 = %178.3;
  (%164, %179, %180, %var_4375, %181)
}

def @func_4141() -> Tensor[(250, 2), float32] {
  %182 = @func_3341() /* ty=(Tensor[(240), float32], Tensor[(8, 8, 16), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(10, 5, 10), uint16], Tensor[(250, 2), float32]) */;
  %183 = %182.6;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(250, 2), float32] */;
  tan(%184) /* ty=Tensor[(250, 2), float32] */
}

def @func_2539(%var_2495: Tensor[(2, 5, 8), float32], %var_2507: float32) -> (Tensor[(6, 12, 8), float32], float32, Tensor[(2, 5, 8), bool], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) {
  %185 = cast(%var_2507, dtype="float32") /* ty=float32 */;
  %186 = reshape(%185, newshape=[]) /* ty=float32 */;
  %187 = @func_1748(%186) /* ty=(Tensor[(6, 12, 8), float32],) */;
  %188 = @func_2252() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %189 = %188.0;
  %190 = @func_2252() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %191 = %190.0;
  %192 = cast(%191, dtype="int32") /* ty=Tensor[(2, 1, 8), int32] */;
  %193 = cast(%var_2495, dtype="int32") /* ty=Tensor[(2, 5, 8), int32] */;
  %194 = subtract(%192, %193) /* ty=Tensor[(2, 5, 8), int32] */;
  %195 = cast(%189, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
  %196 = cast(%194, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
  %197 = @func_2252() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %198 = %187.0;
  %199 = logical_and(%195, %196) /* ty=Tensor[(2, 5, 8), bool] */;
  %200 = %197.0;
  %201 = @func_2200() /* ty=Tensor[(2, 1, 8), float32] */;
  %202 = @func_2278() /* ty=Tensor[(2, 1, 8), float64] */;
  (%198, %var_2507, %199, %200, %201, %202)
}

def @func_2900() -> (Tensor[(240), float32], Tensor[(2, ?, 8), int16], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) {
  %203 = @func_2644() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %204 = %203.0;
  %205 = cast(meta[relay.Constant][11] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %206 = reshape(%205, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), float32] */;
  %207 = @func_2675(%206) /* ty=(Tensor[(2, 15, 8), bool], Tensor[(2, ?, 8), uint64]) */;
  %208 = %207.1;
  %209 = cast(%208, dtype="int16") /* ty=Tensor[(2, ?, 8), int16] */;
  %210 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%204, dtype="int16") /* ty=Tensor[(2, 1, 8), int16] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %213 = cast(meta[relay.Constant][12] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %214 = reshape(%213, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float64] */;
  %215 = subtract(%211, %212) /* ty=Tensor[(2, ?, 8), int16] */;
  %216 = @func_1423(%214) /* ty=Tensor[(16, 5, 2), float64] */;
  (meta[relay.Constant][11] /* ty=Tensor[(240), float32] */, %215, %216, meta[relay.Constant][12] /* ty=Tensor[(160), float64] */)
}

def @func_1748(%var_1738: float32) -> (Tensor[(6, 12, 8), float32],) {
  %217 = cast(%var_1738, dtype="float32") /* ty=float32 */;
  %218 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 12, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 8), float32] */;
  %219 = multiply(%217, %218) /* ty=Tensor[(6, 12, 8), float32] */;
  (%219,)
}

def @func_5366(%var_5344: Tensor[(2, 1, 8), float32], %var_5359: Tensor[(252), int32]) -> (Tensor[(2, ?, 8), uint16], Tensor[(9, 15, 15), float64], Tensor[(252), int32], Tensor[(1755, 1), float32], Tensor[(240), float32]) {
  %220 = @func_5213() /* ty=Tensor[(2, 1, 8), float32] */;
  %221 = cast(%var_5344, dtype="uint16") /* ty=Tensor[(2, 1, 8), uint16] */;
  %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%220, dtype="uint16") /* ty=Tensor[(2, 1, 8), uint16] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %225 = cast(%var_5359, dtype="int32") /* ty=Tensor[(252), int32] */;
  %226 = cast(meta[relay.Constant][14] /* ty=Tensor[(1755, 1), float32] */, dtype="float32") /* ty=Tensor[(1755, 1), float32] */;
  %227 = reshape(%225, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %228 = reshape(%226, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
  %229 = @func_1341(%227, %228) /* ty=(Tensor[(9, 15, 15), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1755), float32], Tensor[(9, 13, 15), float32]) */;
  %230 = right_shift(%223, %224) /* ty=Tensor[(2, ?, 8), uint16] */;
  %231 = %229.0;
  %232 = @func_3302() /* ty=Tensor[(240), float32] */;
  (%230, %231, %var_5359, meta[relay.Constant][14] /* ty=Tensor[(1755, 1), float32] */, %232)
}

def @func_5227() -> (Tensor[(4, 10, 3), int64], Tensor[(2, 1, 8), float64]) {
  %233 = @func_3175() /* ty=(Tensor[(160), float64], Tensor[(4, 10, 3), int64], Tensor[(120), int64]) */;
  %234 = @func_3896() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %235 = %233.1;
  %236 = %234.0;
  (%235, %236)
}

def @func_3175() -> (Tensor[(160), float64], Tensor[(4, 10, 3), int64], Tensor[(120), int64]) {
  %237 = @func_2900() /* ty=(Tensor[(240), float32], Tensor[(2, ?, 8), int16], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) */;
  %238 = cast(meta[relay.Constant][15] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
  %239 = cast(meta[relay.Constant][15] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
  %240 = reshape(%238, newshape=[4, 10, 3]) /* ty=Tensor[(4, 10, 3), int64] */;
  %241 = reshape(%239, newshape=[4, 10, 3]) /* ty=Tensor[(4, 10, 3), int64] */;
  %242 = %237.3;
  %243 = @func_1598(%240, %241) /* ty=Tensor[(4, 10, 3), int64] */;
  (%242, %243, meta[relay.Constant][15] /* ty=Tensor[(120), int64] */)
}

def @func_4246() -> (Tensor[(14, 11, 3), float64],) {
  %244 = @func_4222() /* ty=(Tensor[(2, 1, 8), float64], Tensor[(14, 11, 3), float64], Tensor[(462), float64], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) */;
  %245 = %244.1;
  (%245,)
}

def @func_3341() -> (Tensor[(240), float32], Tensor[(8, 8, 16), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(10, 5, 10), uint16], Tensor[(250, 2), float32]) {
  %246 = @func_2900() /* ty=(Tensor[(240), float32], Tensor[(2, ?, 8), int16], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) */;
  %247 = cast(meta[relay.Constant][16] /* ty=Tensor[(1024), uint8] */, dtype="uint8") /* ty=Tensor[(1024), uint8] */;
  %248 = cast(meta[relay.Constant][17] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %249 = cast(meta[relay.Constant][18] /* ty=Tensor[(275), uint8] */, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %250 = reshape(%247, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), uint8] */;
  %251 = reshape(%248, newshape=[780, 4]) /* ty=Tensor[(780, 4), uint8] */;
  %252 = reshape(%249, newshape=[275]) /* ty=Tensor[(275), uint8] */;
  %253 = @func_2181(%250, %251, %252) /* ty=(Tensor[(8, 8, 16), uint8], Tensor[(16, 15, 13), uint8], Tensor[(780, 4), uint8], Tensor[(11, 5, 5), float32], Tensor[(275), uint8]) */;
  %254 = cast(meta[relay.Constant][19] /* ty=Tensor[(250, 2), float32] */, dtype="float32") /* ty=Tensor[(250, 2), float32] */;
  %255 = reshape(%254, newshape=[10, 5, 10]) /* ty=Tensor[(10, 5, 10), float32] */;
  %256 = @func_1791(%255) /* ty=(Tensor[(10, 5, 10), uint16],) */;
  %257 = %246.0;
  %258 = %253.0;
  %259 = %256.0;
  (%257, %258, meta[relay.Constant][16] /* ty=Tensor[(1024), uint8] */, meta[relay.Constant][17] /* ty=Tensor[(3120), uint8] */, meta[relay.Constant][18] /* ty=Tensor[(275), uint8] */, %259, meta[relay.Constant][19] /* ty=Tensor[(250, 2), float32] */)
}

def @func_3569(%var_3555: Tensor[(252), int32], %var_3556: Tensor[(1755), float32]) -> (Tensor[(2, 1, 8), float32], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1755), float32]) {
  %260 = cast(%var_3555, dtype="int32") /* ty=Tensor[(252), int32] */;
  %261 = cast(%var_3556, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %262 = reshape(%260, newshape=[4, 7, 9]) /* ty=Tensor[(4, 7, 9), int32] */;
  %263 = reshape(%261, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
  %264 = @func_385(%262, %263) /* ty=(Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), uint16], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), int8], Tensor[(1755), float64]) */;
  %265 = @func_2802() /* ty=Tensor[(2, 1, 8), float32] */;
  %266 = %264.1;
  (%265, %266, %var_3555, %var_3556)
}

def @func_2252() -> (Tensor[(2, 1, 8), float32],) {
  %267 = @func_2200() /* ty=Tensor[(2, 1, 8), float32] */;
  (%267,)
}

def @func_4578(%var_4507: int8, %var_4508: Tensor[(10, 5, 12), int8]) -> Tensor[(10, 5, 12), float32] {
  %268 = cast(%var_4507, dtype="int8") /* ty=int8 */;
  %269 = cast(%var_4508, dtype="int8") /* ty=Tensor[(10, 5, 12), int8] */;
  %270 = logical_xor(%268, %269) /* ty=Tensor[(10, 5, 12), int8] */;
  %271 = cast(%var_4507, dtype="float32") /* ty=float32 */;
  %272 = cast(%270, dtype="float32") /* ty=Tensor[(10, 5, 12), float32] */;
  divide(%271, %272) /* ty=Tensor[(10, 5, 12), float32] */
}

def @func_2675(%var_2659: Tensor[(2, 15, 8), float32]) -> (Tensor[(2, 15, 8), bool], Tensor[(2, ?, 8), uint64]) {
  %273 = @func_2252() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %274 = %273.0;
  %275 = cast(%274, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
  %276 = cast(%var_2659, dtype="bool") /* ty=Tensor[(2, 15, 8), bool] */;
  %277 = @func_2307() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %278 = %277.0;
  %279 = cast(%274, dtype="uint64") /* ty=Tensor[(2, 1, 8), uint64] */;
  %280 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%278, dtype="uint64") /* ty=Tensor[(2, 1, 8), uint64] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %283 = not_equal(%275, %276) /* ty=Tensor[(2, 15, 8), bool] */;
  %284 = add(%281, %282) /* ty=Tensor[(2, ?, 8), uint64] */;
  (%283, %284)
}

def @func_4807() -> (Tensor[(160), float64],) {
  %285 = @func_2900() /* ty=(Tensor[(240), float32], Tensor[(2, ?, 8), int16], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) */;
  %286 = %285.3;
  (%286,)
}

def @func_4323(%var_4306: Tensor[(1, 2, 11), uint64]) -> (Tensor[(1, 2, 11), uint64], Tensor[(36), float64], Tensor[(120), int64]) {
  %287 = cast(meta[relay.Constant][20] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %288 = cast(%var_4306, dtype="uint64") /* ty=Tensor[(1, 2, 11), uint64] */;
  %289 = cast(meta[relay.Constant][21] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
  %290 = reshape(%289, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %291 = @func_2734(%290) /* ty=(Tensor[(2, 1, 8), float32], Tensor[(1, 132), uint32], Tensor[(275), uint8], Tensor[(120), int64], Tensor[(36), float64]) */;
  %292 = logical_xor(%287, %288) /* ty=Tensor[(1, 2, 11), uint64] */;
  %293 = %291.4;
  (%292, %293, meta[relay.Constant][21] /* ty=Tensor[(120), int64] */)
}

def @func_1423(%var_1409: Tensor[(16, 5, 2), float64]) -> Tensor[(16, 5, 2), float64] {
  %294 = cast(%var_1409, dtype="float64") /* ty=Tensor[(16, 5, 2), float64] */;
  acosh(%294) /* ty=Tensor[(16, 5, 2), float64] */
}

def @func_2971(%var_2965: Tensor[(2, 7, 8), float32]) -> Tensor[(2, 7, 8), bool] {
  %295 = @func_2252() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %296 = %295.0;
  %297 = cast(%296, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
  %298 = cast(%var_2965, dtype="bool") /* ty=Tensor[(2, 7, 8), bool] */;
  greater_equal(%297, %298) /* ty=Tensor[(2, 7, 8), bool] */
}

def @func_5309(%var_5301: Tensor[(13, 13, 16), int8], %var_5302: Tensor[(13, 13, 16), int8]) -> Tensor[(13, 13, 16), bool] {
  %299 = cast(%var_5302, dtype="bool") /* ty=Tensor[(13, 13, 16), bool] */;
  %300 = shape_of(%var_5301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%var_5301, dtype="bool") /* ty=Tensor[(13, 13, 16), bool] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%301, %302) /* ty=Tensor[(13, 13, 16), bool] */
}

def @func_6259(%var_6234: Tensor[(2, 8, 8), float32], %var_6240: Tensor[(11, 2), uint64]) -> (Tensor[(2, 8, 8), uint64], Tensor[(120), int64], Tensor[(11, 2), uint64], Tensor[(2, 8, 8), bool], Tensor[(1, 2, 11), uint64]) {
  %303 = @func_4165() /* ty=Tensor[(2, 1, 8), float32] */;
  %304 = cast(%303, dtype="uint64") /* ty=Tensor[(2, 1, 8), uint64] */;
  %305 = cast(%var_6234, dtype="uint64") /* ty=Tensor[(2, 8, 8), uint64] */;
  %306 = cast(%var_6240, dtype="uint64") /* ty=Tensor[(11, 2), uint64] */;
  %307 = reshape(%306, newshape=[1, 2, 11]) /* ty=Tensor[(1, 2, 11), uint64] */;
  %308 = @func_4323(%307) /* ty=(Tensor[(1, 2, 11), uint64], Tensor[(36), float64], Tensor[(120), int64]) */;
  %309 = cast(%303, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
  %310 = cast(%var_6234, dtype="bool") /* ty=Tensor[(2, 8, 8), bool] */;
  %311 = cast(%var_6240, dtype="uint64") /* ty=Tensor[(11, 2), uint64] */;
  %312 = reshape(%311, newshape=[1, 2, 11]) /* ty=Tensor[(1, 2, 11), uint64] */;
  %313 = @func_4323(%312) /* ty=(Tensor[(1, 2, 11), uint64], Tensor[(36), float64], Tensor[(120), int64]) */;
  %314 = add(%304, %305) /* ty=Tensor[(2, 8, 8), uint64] */;
  %315 = %308.2;
  %316 = equal(%309, %310) /* ty=Tensor[(2, 8, 8), bool] */;
  %317 = %313.0;
  (%314, %315, %var_6240, %316, %317)
}

def @func_3676(%var_3655: Tensor[(132), uint32]) -> (Tensor[(2, ?, 8), bool], Tensor[(3, 4, 11), uint32], Tensor[(132), uint32], Tensor[(4, 10, 3), int64], Tensor[(120), int64], Tensor[(2, 1, 8), float32]) {
  %318 = @func_2445() /* ty=(Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) */;
  %319 = %318.1;
  %320 = cast(%319, dtype="float64") /* ty=Tensor[(2, 1, 8), float64] */;
  %321 = acosh(%320) /* ty=Tensor[(2, 1, 8), float64] */;
  %322 = cast(%319, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
  %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%321, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %326 = cast(%var_3655, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %327 = reshape(%326, newshape=[3, 4, 11]) /* ty=Tensor[(3, 4, 11), uint32] */;
  %328 = @func_1632(%327) /* ty=(Tensor[(3, 4, 11), uint32], Tensor[(1755), float32], Tensor[(3120), uint8]) */;
  %329 = cast(meta[relay.Constant][22] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
  %330 = cast(meta[relay.Constant][22] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
  %331 = reshape(%329, newshape=[4, 10, 3]) /* ty=Tensor[(4, 10, 3), int64] */;
  %332 = reshape(%330, newshape=[4, 10, 3]) /* ty=Tensor[(4, 10, 3), int64] */;
  %333 = @func_3363() /* ty=(Tensor[(2, 1, 8), float32], Tensor[(15, 15, ?), int8]) */;
  %334 = not_equal(%324, %325) /* ty=Tensor[(2, ?, 8), bool] */;
  %335 = %328.0;
  %336 = @func_1598(%331, %332) /* ty=Tensor[(4, 10, 3), int64] */;
  %337 = %333.0;
  (%334, %335, %var_3655, %336, meta[relay.Constant][22] /* ty=Tensor[(120), int64] */, %337)
}

def @func_2181(%var_2157: Tensor[(8, 8, 16), uint8], %var_2174: Tensor[(780, 4), uint8], %var_2179: Tensor[(275), uint8]) -> (Tensor[(8, 8, 16), uint8], Tensor[(16, 15, 13), uint8], Tensor[(780, 4), uint8], Tensor[(11, 5, 5), float32], Tensor[(275), uint8]) {
  %338 = cast(%var_2157, dtype="uint8") /* ty=Tensor[(8, 8, 16), uint8] */;
  %339 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(8, 8, 16), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 8, 16), uint8] */, dtype="uint8") /* ty=Tensor[(8, 8, 16), uint8] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %342 = cast(%var_2174, dtype="uint8") /* ty=Tensor[(780, 4), uint8] */;
  %343 = reshape(%342, newshape=[156, 20]) /* ty=Tensor[(156, 20), uint8] */;
  %344 = @func_796(%343) /* ty=(Tensor[(9, 13, 15), float32], Tensor[(1755), float32], Tensor[(16, 15, 13), uint8], Tensor[(156, 20), uint8], Tensor[(3, ?, 14), uint16], Tensor[(3, 1, 14), float64], Tensor[(3, 1, 14), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32]) */;
  %345 = cast(%var_2179, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %346 = cast(%var_2179, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %347 = cast(%var_2179, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %348 = reshape(%345, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
  %349 = reshape(%346, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
  %350 = reshape(%347, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
  %351 = @func_668(%348, %349, %350) /* ty=(Tensor[(11, 5, 5), float32], Tensor[(11, 5, 5), int8], Tensor[(11, 5, 5), float32]) */;
  %352 = left_shift(%340, %341) /* ty=Tensor[(8, 8, 16), uint8] */;
  %353 = %344.2;
  %354 = %351.0;
  (%352, %353, %var_2174, %354, %var_2179)
}

def @func_2945(%var_2914: Tensor[(2, 11, 8), float32], %var_2939: Tensor[(275), uint8], %var_2940: Tensor[(500), float32]) -> (Tensor[(2, 11, 8), uint8], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(10, 5, 10), uint16], Tensor[(1024), uint8], Tensor[(156, 20), uint8], Tensor[(275), uint8], Tensor[(500), float32]) {
  %355 = @func_2445() /* ty=(Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) */;
  %356 = %355.1;
  %357 = cast(%356, dtype="uint8") /* ty=Tensor[(2, 1, 8), uint8] */;
  %358 = cast(%var_2914, dtype="uint8") /* ty=Tensor[(2, 11, 8), uint8] */;
  %359 = cast(meta[relay.Constant][24] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %360 = reshape(%359, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float64] */;
  %361 = cast(meta[relay.Constant][25] /* ty=Tensor[(1024), uint8] */, dtype="uint8") /* ty=Tensor[(1024), uint8] */;
  %362 = cast(meta[relay.Constant][26] /* ty=Tensor[(156, 20), uint8] */, dtype="uint8") /* ty=Tensor[(156, 20), uint8] */;
  %363 = cast(%var_2939, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %364 = cast(%var_2940, dtype="float32") /* ty=Tensor[(500), float32] */;
  %365 = reshape(%361, newshape=[1024]) /* ty=Tensor[(1024), uint8] */;
  %366 = reshape(%362, newshape=[3120]) /* ty=Tensor[(3120), uint8] */;
  %367 = reshape(%363, newshape=[275]) /* ty=Tensor[(275), uint8] */;
  %368 = reshape(%364, newshape=[10, 50]) /* ty=Tensor[(10, 50), float32] */;
  %369 = @func_2626(%365, %366, %367, %368) /* ty=(Tensor[(2, 1, 8), float64], float32, Tensor[(2, 1, 8), float32], Tensor[(16, 15, 13), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(2, 1, 8), float32], Tensor[(10, 5, 10), uint16], Tensor[(10, 50), float32], Tensor[(6, 12, 8), float32]) */;
  %370 = bitwise_and(%357, %358) /* ty=Tensor[(2, 11, 8), uint8] */;
  %371 = @func_1423(%360) /* ty=Tensor[(16, 5, 2), float64] */;
  %372 = %369.8;
  (%370, %371, meta[relay.Constant][24] /* ty=Tensor[(160), float64] */, %372, meta[relay.Constant][25] /* ty=Tensor[(1024), uint8] */, meta[relay.Constant][26] /* ty=Tensor[(156, 20), uint8] */, %var_2939, %var_2940)
}

def @func_385(%var_278: Tensor[(4, 7, 9), int32], %var_284: Tensor[(1755), float32]) -> (Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), uint16], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), int8], Tensor[(1755), float64]) {
  %373 = cast(%var_284, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %374 = reshape(%373, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), float32] */;
  %375 = @func_22(%374) /* ty=(Tensor[(9, 13, 15), float32],) */;
  %376 = cast(%var_284, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %377 = reshape(%376, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), float32] */;
  %378 = @func_22(%377) /* ty=(Tensor[(9, 13, 15), float32],) */;
  %379 = cast(%var_278, dtype="int32") /* ty=Tensor[(4, 7, 9), int32] */;
  %380 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(4, 7, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 7, 9), int32] */, dtype="int32") /* ty=Tensor[(4, 7, 9), int32] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %383 = multiply(%381, %382) /* ty=Tensor[(4, 7, 9), int32] */;
  %384 = cast(%383, dtype="uint16") /* ty=Tensor[(4, 7, 9), uint16] */;
  %385 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(4, 7, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 7, 9), int32] */, dtype="uint16") /* ty=Tensor[(4, 7, 9), uint16] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %388 = %375.0;
  %389 = cast(%388, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
  %390 = reshape(%389, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), float32] */;
  %391 = @func_22(%390) /* ty=(Tensor[(9, 13, 15), float32],) */;
  %392 = cast(%var_284, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %393 = reshape(%392, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), float32] */;
  %394 = @func_22(%393) /* ty=(Tensor[(9, 13, 15), float32],) */;
  %395 = %394.0;
  %396 = cast(%395, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
  %397 = reshape(%396, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), float32] */;
  %398 = @func_22(%397) /* ty=(Tensor[(9, 13, 15), float32],) */;
  %399 = cast(%388, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
  %400 = reshape(%399, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), float32] */;
  %401 = @func_22(%400) /* ty=(Tensor[(9, 13, 15), float32],) */;
  %402 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 7, 9), int32] */, dtype="int8") /* ty=Tensor[(4, 7, 9), int8] */;
  %403 = shape_of(%383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%383, dtype="int8") /* ty=Tensor[(4, 7, 9), int8] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %406 = cast(%395, dtype="bool") /* ty=Tensor[(9, 13, 15), bool] */;
  %407 = shape_of(%var_284, dtype="int32") /* ty=Tensor[(1), int32] */;
  %408 = cast(%var_284, dtype="bool") /* ty=Tensor[(1755), bool] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?), bool] */;
  %410 = equal(%408, %409) /* ty=Tensor[(1755), bool] */;
  %411 = cast(meta[relay.Constant][28] /* ty=Tensor[(1755), bool] */, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(1), int32] */;
  %413 = cast(%410, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?), float64] */;
  %415 = %378.0;
  %416 = bitwise_xor(%386, %387) /* ty=Tensor[(4, 7, 9), uint16] */;
  %417 = %391.0;
  %418 = %398.0;
  %419 = %401.0;
  %420 = bitwise_or(%404, %405) /* ty=Tensor[(4, 7, 9), int8] */;
  %421 = floor_divide(%413, %414) /* ty=Tensor[(1755), float64] */;
  (%388, %415, %416, %417, %418, %419, %420, %421)
}

def @func_5472(%var_5378: Tensor[(176), float32], %var_5379: Tensor[(275), uint8], %var_5380: Tensor[(500), float32], %var_5431: Tensor[(1, 132), uint32]) -> (Tensor[(2, 1, 8), float32], Tensor[(1024), uint8], Tensor[(176), float32], Tensor[(500), float32], Tensor[(160), float64], Tensor[(250, 2), uint64], Tensor[(1755), float32], Tensor[(1, 132), uint32], Tensor[(2, 1, 8), float64], Tensor[(15, 15, ?), int8], Tensor[(275), uint32], Tensor[(6, 12, 8), float32], float32, Tensor[(156, 20), uint8], Tensor[(250, 2), float32], Tensor[(275), float32]) {
  %422 = cast(%var_5378, dtype="float32") /* ty=Tensor[(176), float32] */;
  %423 = cast(%var_5379, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %424 = cast(%var_5380, dtype="float32") /* ty=Tensor[(500), float32] */;
  %425 = reshape(%422, newshape=[2, 11, 8]) /* ty=Tensor[(2, 11, 8), float32] */;
  %426 = reshape(%423, newshape=[275]) /* ty=Tensor[(275), uint8] */;
  %427 = reshape(%424, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %428 = @func_2945(%425, %426, %427) /* ty=(Tensor[(2, 11, 8), uint8], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(10, 5, 10), uint16], Tensor[(1024), uint8], Tensor[(156, 20), uint8], Tensor[(275), uint8], Tensor[(500), float32]) */;
  %429 = cast(%var_5380, dtype="float32") /* ty=Tensor[(500), float32] */;
  %430 = reshape(%429, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %431 = @func_5166(%430) /* ty=(Tensor[(14, 11, 3), float64], Tensor[(250, 2), uint64], Tensor[(500), float32], Tensor[(14, 11, 3), float64]) */;
  %432 = cast(%var_5431, dtype="uint32") /* ty=Tensor[(1, 132), uint32] */;
  %433 = reshape(%432, newshape=[3, 4, 11]) /* ty=Tensor[(3, 4, 11), uint32] */;
  %434 = @func_1632(%433) /* ty=(Tensor[(3, 4, 11), uint32], Tensor[(1755), float32], Tensor[(3120), uint8]) */;
  %435 = @func_3363() /* ty=(Tensor[(2, 1, 8), float32], Tensor[(15, 15, ?), int8]) */;
  %436 = cast(%var_5379, dtype="float32") /* ty=Tensor[(275), float32] */;
  %437 = log(%436) /* ty=Tensor[(275), float32] */;
  %438 = cast(%var_5379, dtype="int16") /* ty=Tensor[(275), int16] */;
  %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(1), int32] */;
  %440 = cast(%437, dtype="int16") /* ty=Tensor[(275), int16] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?), int16] */;
  %442 = bitwise_xor(%440, %441) /* ty=Tensor[(275), int16] */;
  %443 = cast(%442, dtype="float64") /* ty=Tensor[(275), float64] */;
  %444 = asin(%443) /* ty=Tensor[(275), float64] */;
  %445 = cast(%437, dtype="int32") /* ty=Tensor[(275), int32] */;
  %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(1), int32] */;
  %447 = cast(%444, dtype="int32") /* ty=Tensor[(275), int32] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?), int32] */;
  %449 = add(%447, %448) /* ty=Tensor[(275), int32] */;
  %450 = cast(%449, dtype="float32") /* ty=Tensor[(275), float32] */;
  %451 = asinh(%450) /* ty=Tensor[(275), float32] */;
  %452 = cast(%var_5379, dtype="uint32") /* ty=Tensor[(275), uint32] */;
  %453 = shape_of(%451, dtype="int32") /* ty=Tensor[(1), int32] */;
  %454 = cast(%451, dtype="uint32") /* ty=Tensor[(275), uint32] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %456 = cast(-6.81744f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %457 = reshape(%456, newshape=[]) /* ty=float32 */;
  %458 = @func_1748(%457) /* ty=(Tensor[(6, 12, 8), float32],) */;
  %459 = cast(%var_5378, dtype="float32") /* ty=Tensor[(176), float32] */;
  %460 = cast(%451, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %461 = cast(%var_5380, dtype="float32") /* ty=Tensor[(500), float32] */;
  %462 = reshape(%459, newshape=[2, 11, 8]) /* ty=Tensor[(2, 11, 8), float32] */;
  %463 = reshape(%460, newshape=[275]) /* ty=Tensor[(275), uint8] */;
  %464 = reshape(%461, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %465 = @func_2945(%462, %463, %464) /* ty=(Tensor[(2, 11, 8), uint8], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(10, 5, 10), uint16], Tensor[(1024), uint8], Tensor[(156, 20), uint8], Tensor[(275), uint8], Tensor[(500), float32]) */;
  %466 = cast(meta[relay.Constant][29] /* ty=Tensor[(275), float32] */, dtype="float32") /* ty=Tensor[(275), float32] */;
  %467 = shape_of(%451, dtype="int32") /* ty=Tensor[(1), int32] */;
  %468 = cast(%451, dtype="float32") /* ty=Tensor[(275), float32] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?), float32] */;
  %470 = @func_3918() /* ty=Tensor[(2, 1, 8), float32] */;
  %471 = %428.4;
  %472 = @func_3493() /* ty=Tensor[(160), float64] */;
  %473 = %431.1;
  %474 = %434.1;
  %475 = @func_4238() /* ty=Tensor[(2, 1, 8), float64] */;
  %476 = %435.1;
  %477 = multiply(%454, %455) /* ty=Tensor[(275), uint32] */;
  %478 = %458.0;
  %479 = %465.5;
  %480 = @func_4141() /* ty=Tensor[(250, 2), float32] */;
  %481 = floor_mod(%468, %469) /* ty=Tensor[(275), float32] */;
  (%470, %471, %var_5378, %var_5380, %472, %473, %474, %var_5431, %475, %476, %477, %478, -6.81744f /* ty=float32 */, %479, %480, %481)
}

def @func_3302() -> Tensor[(240), float32] {
  %482 = @func_2900() /* ty=(Tensor[(240), float32], Tensor[(2, ?, 8), int16], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) */;
  %482.0
}

def @func_3427() -> (Tensor[(2, 1, 8), float32],) {
  %483 = @func_2252() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %484 = %483.0;
  (%484,)
}

def @func_4989(%var_4960: Tensor[(2, 9, 8), float64], %var_4985: Tensor[(44), float64]) -> (Tensor[(2, 1, 8), float64], Tensor[(2, 9, 8), uint16], Tensor[(2, 2, 11), float64], Tensor[(44), float64]) {
  %485 = @func_2307() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %486 = @func_3267() /* ty=Tensor[(2, 1, 8), float64] */;
  %487 = cast(%486, dtype="uint16") /* ty=Tensor[(2, 1, 8), uint16] */;
  %488 = cast(%var_4960, dtype="uint16") /* ty=Tensor[(2, 9, 8), uint16] */;
  %489 = cast(%var_4985, dtype="float64") /* ty=Tensor[(44), float64] */;
  %490 = cast(%var_4985, dtype="float64") /* ty=Tensor[(44), float64] */;
  %491 = reshape(%489, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), float64] */;
  %492 = reshape(%490, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), float64] */;
  %493 = @func_1866(%491, %492) /* ty=(Tensor[(2, 2, 11), float64],) */;
  %494 = %485.0;
  %495 = right_shift(%487, %488) /* ty=Tensor[(2, 9, 8), uint16] */;
  %496 = %493.0;
  (%494, %495, %496, %var_4985)
}

def @func_4479(%var_4470: Tensor[(250, 2), float32]) -> (Tensor[(2, 1, 8), float32], Tensor[(250, 2), uint64], Tensor[(250, 2), float64]) {
  %497 = @func_4141() /* ty=Tensor[(250, 2), float32] */;
  %498 = cast(%var_4470, dtype="uint64") /* ty=Tensor[(250, 2), uint64] */;
  %499 = shape_of(%497, dtype="int32") /* ty=Tensor[(2), int32] */;
  %500 = cast(%497, dtype="uint64") /* ty=Tensor[(250, 2), uint64] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %502 = cast(%var_4470, dtype="float64") /* ty=Tensor[(250, 2), float64] */;
  %503 = @func_4165() /* ty=Tensor[(2, 1, 8), float32] */;
  %504 = bitwise_and(%500, %501) /* ty=Tensor[(250, 2), uint64] */;
  %505 = asinh(%502) /* ty=Tensor[(250, 2), float64] */;
  (%503, %504, %505)
}

def @func_5789() -> (Tensor[(2, 1, 8), float32], Tensor[(176), float32], Tensor[(13, 13, 16), bool], Tensor[(2704), int8], Tensor[(22), bool], Tensor[(10, 5, 12), float32], int8, Tensor[(1, 600), int8], Tensor[(2, 11, 8), bool]) {
  %506 = @func_5492() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %507 = cast(meta[relay.Constant][31] /* ty=Tensor[(2704), int8] */, dtype="int8") /* ty=Tensor[(2704), int8] */;
  %508 = cast(meta[relay.Constant][31] /* ty=Tensor[(2704), int8] */, dtype="int8") /* ty=Tensor[(2704), int8] */;
  %509 = reshape(%507, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), int8] */;
  %510 = reshape(%508, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), int8] */;
  %511 = cast(meta[relay.Constant][32] /* ty=Tensor[(22), uint64] */, dtype="uint64") /* ty=Tensor[(22), uint64] */;
  %512 = reshape(%511, newshape=[1, 2, 11]) /* ty=Tensor[(1, 2, 11), uint64] */;
  %513 = @func_4323(%512) /* ty=(Tensor[(1, 2, 11), uint64], Tensor[(36), float64], Tensor[(120), int64]) */;
  %514 = %513.0;
  %515 = cast(%514, dtype="bool") /* ty=Tensor[(1, 2, 11), bool] */;
  %516 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(22), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %517 = cast(meta[relay.Constant][32] /* ty=Tensor[(22), uint64] */, dtype="bool") /* ty=Tensor[(22), bool] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?), bool] */;
  %519 = cast(meta[relay.Constant][33] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %520 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 600), int8] */, dtype="int8") /* ty=Tensor[(1, 600), int8] */;
  %521 = reshape(%519, newshape=[]) /* ty=int8 */;
  %522 = reshape(%520, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), int8] */;
  %523 = cast(meta[relay.Constant][30] /* ty=Tensor[(176), float32] */, dtype="float32") /* ty=Tensor[(176), float32] */;
  %524 = reshape(%523, newshape=[2, 11, 8]) /* ty=Tensor[(2, 11, 8), float32] */;
  %525 = @func_5279(%524) /* ty=(Tensor[(2, 11, 8), int64],) */;
  %526 = %525.0;
  %527 = cast(%526, dtype="float64") /* ty=Tensor[(2, 11, 8), float64] */;
  %528 = acos(%527) /* ty=Tensor[(2, 11, 8), float64] */;
  %529 = cast(%526, dtype="bool") /* ty=Tensor[(2, 11, 8), bool] */;
  %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%528, dtype="bool") /* ty=Tensor[(2, 11, 8), bool] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %533 = %506.0;
  %534 = @func_5309(%509, %510) /* ty=Tensor[(13, 13, 16), bool] */;
  %535 = less_equal(%517, %518) /* ty=Tensor[(22), bool] */;
  %536 = @func_4578(%521, %522) /* ty=Tensor[(10, 5, 12), float32] */;
  %537 = less_equal(%531, %532) /* ty=Tensor[(2, 11, 8), bool] */;
  (%533, meta[relay.Constant][30] /* ty=Tensor[(176), float32] */, %534, meta[relay.Constant][31] /* ty=Tensor[(2704), int8] */, %535, %536, meta[relay.Constant][33] /* ty=int8 */, meta[relay.Constant][34] /* ty=Tensor[(1, 600), int8] */, %537)
}

def @func_3034(%var_2998: Tensor[(9, 8, 11), uint32]) -> (Tensor[(9, 8, 11), bool],) {
  %538 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 8, 11), uint32] */, dtype="bool") /* ty=Tensor[(9, 8, 11), bool] */;
  %539 = shape_of(%var_2998, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%var_2998, dtype="bool") /* ty=Tensor[(9, 8, 11), bool] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %542 = greater(%540, %541) /* ty=Tensor[(9, 8, 11), bool] */;
  (%542,)
}

def @func_5601() -> (Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float64]) {
  %543 = @func_2307() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %544 = @func_2278() /* ty=Tensor[(2, 1, 8), float64] */;
  %545 = %543.0;
  (%544, %545)
}

def @func_2734(%var_2724: Tensor[(120), int64]) -> (Tensor[(2, 1, 8), float32], Tensor[(1, 132), uint32], Tensor[(275), uint8], Tensor[(120), int64], Tensor[(36), float64]) {
  %546 = @func_2644() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %547 = cast(meta[relay.Constant][36] /* ty=Tensor[(36), int16] */, dtype="int16") /* ty=Tensor[(36), int16] */;
  %548 = cast(meta[relay.Constant][37] /* ty=Tensor[(275), uint8] */, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %549 = cast(%var_2724, dtype="int64") /* ty=Tensor[(120), int64] */;
  %550 = reshape(%547, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), int16] */;
  %551 = reshape(%548, newshape=[275]) /* ty=Tensor[(275), uint8] */;
  %552 = reshape(%549, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %553 = @func_2050(%550, %551, %552) /* ty=(Tensor[(11, 5, 5), int8], Tensor[(275), uint8], Tensor[(3, 12, ?), float64], Tensor[(4, 10, 3), int64], Tensor[(120), int64], Tensor[(3120), uint8], Tensor[(1, 132), uint32], Tensor[(275, 1), uint8], Tensor[(11, 5, 5), int8]) */;
  %554 = cast(meta[relay.Constant][36] /* ty=Tensor[(36), int16] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %555 = %546.0;
  %556 = %553.6;
  %557 = sin(%554) /* ty=Tensor[(36), float64] */;
  (%555, %556, meta[relay.Constant][37] /* ty=Tensor[(275), uint8] */, %var_2724, %557)
}

def @func_1791(%var_1771: Tensor[(10, 5, 10), float32]) -> (Tensor[(10, 5, 10), uint16],) {
  %558 = cast(%var_1771, dtype="float32") /* ty=Tensor[(10, 5, 10), float32] */;
  %559 = sinh(%558) /* ty=Tensor[(10, 5, 10), float32] */;
  %560 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 5, 10), float32] */, dtype="uint16") /* ty=Tensor[(10, 5, 10), uint16] */;
  %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%559, dtype="uint16") /* ty=Tensor[(10, 5, 10), uint16] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %564 = bitwise_and(%562, %563) /* ty=Tensor[(10, 5, 10), uint16] */;
  (%564,)
}

def @func_2412(%var_2366: Tensor[(2, 16, 15), float32], %var_2367: Tensor[(2, 16, 15), float32]) -> (Tensor[(2, 16, 15), float32], Tensor[(2, 16, 15), float64]) {
  %565 = cast(%var_2367, dtype="float32") /* ty=Tensor[(2, 16, 15), float32] */;
  %566 = shape_of(%var_2366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%var_2366, dtype="float32") /* ty=Tensor[(2, 16, 15), float32] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %569 = cast(%var_2367, dtype="float32") /* ty=Tensor[(2, 16, 15), float32] */;
  %570 = sinh(%569) /* ty=Tensor[(2, 16, 15), float32] */;
  %571 = cast(%570, dtype="float64") /* ty=Tensor[(2, 16, 15), float64] */;
  %572 = floor_divide(%567, %568) /* ty=Tensor[(2, 16, 15), float32] */;
  %573 = log(%571) /* ty=Tensor[(2, 16, 15), float64] */;
  (%572, %573)
}

def @func_4630() -> (Tensor[(2, ?, 8), float32],) {
  %574 = @func_2278() /* ty=Tensor[(2, 1, 8), float64] */;
  %575 = @func_3918() /* ty=Tensor[(2, 1, 8), float32] */;
  %576 = cast(%575, dtype="float32") /* ty=Tensor[(2, 1, 8), float32] */;
  %577 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%574, dtype="float32") /* ty=Tensor[(2, 1, 8), float32] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %580 = floor_mod(%578, %579) /* ty=Tensor[(2, ?, 8), float32] */;
  (%580,)
}

def @func_1866(%var_1859: Tensor[(2, 2, 11), float64], %var_1860: Tensor[(2, 2, 11), float64]) -> (Tensor[(2, 2, 11), float64],) {
  %581 = cast(%var_1860, dtype="float64") /* ty=Tensor[(2, 2, 11), float64] */;
  %582 = shape_of(%var_1859, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%var_1859, dtype="float64") /* ty=Tensor[(2, 2, 11), float64] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %585 = maximum(%583, %584) /* ty=Tensor[(2, 2, 11), float64] */;
  (%585,)
}

def @func_6382(%var_6326: Tensor[(250, 2), float32], %var_6360: Tensor[(30, 4), int64]) -> (Tensor[(15, 15, ?), int8], Tensor[(2, ?, 8), int8], Tensor[(250, 2), bool], Tensor[(2, 1, 8), float64], Tensor[(14, 11, 3), float64], Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(30, 4), int64], Tensor[(500), float32]) {
  %586 = @func_3772() /* ty=(Tensor[(15, 15, ?), int8],) */;
  %587 = @func_6108() /* ty=(Tensor[(2, ?, 8), int8],) */;
  %588 = cast(meta[relay.Constant][39] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
  %589 = reshape(%588, newshape=[250, 2]) /* ty=Tensor[(250, 2), float32] */;
  %590 = @func_4479(%589) /* ty=(Tensor[(2, 1, 8), float32], Tensor[(250, 2), uint64], Tensor[(250, 2), float64]) */;
  %591 = %590.2;
  %592 = cast(%591, dtype="float32") /* ty=Tensor[(250, 2), float32] */;
  %593 = log(%592) /* ty=Tensor[(250, 2), float32] */;
  %594 = cast(%var_6326, dtype="bool") /* ty=Tensor[(250, 2), bool] */;
  %595 = shape_of(%593, dtype="int32") /* ty=Tensor[(2), int32] */;
  %596 = cast(%593, dtype="bool") /* ty=Tensor[(250, 2), bool] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %598 = @func_5582() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %599 = cast(%591, dtype="float32") /* ty=Tensor[(250, 2), float32] */;
  %600 = reshape(%599, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %601 = @func_5166(%600) /* ty=(Tensor[(14, 11, 3), float64], Tensor[(250, 2), uint64], Tensor[(500), float32], Tensor[(14, 11, 3), float64]) */;
  %602 = @func_6003() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %603 = cast(%var_6360, dtype="int64") /* ty=Tensor[(30, 4), int64] */;
  %604 = reshape(%603, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %605 = @func_2734(%604) /* ty=(Tensor[(2, 1, 8), float32], Tensor[(1, 132), uint32], Tensor[(275), uint8], Tensor[(120), int64], Tensor[(36), float64]) */;
  %606 = cast(meta[relay.Constant][39] /* ty=Tensor[(500), float32] */, dtype="float64") /* ty=Tensor[(500), float64] */;
  %607 = sigmoid(%606) /* ty=Tensor[(500), float64] */;
  %608 = cast(%607, dtype="float32") /* ty=Tensor[(500), float32] */;
  %609 = %586.0;
  %610 = %587.0;
  %611 = greater(%596, %597) /* ty=Tensor[(250, 2), bool] */;
  %612 = %598.0;
  %613 = %601.0;
  %614 = %602.0;
  %615 = %605.0;
  %616 = erf(%608) /* ty=Tensor[(500), float32] */;
  (%609, %610, %611, %612, %613, %614, %615, %var_6360, %616)
}

def @func_2307() -> (Tensor[(2, 1, 8), float64],) {
  %617 = @func_2278() /* ty=Tensor[(2, 1, 8), float64] */;
  (%617,)
}

def @func_6274() -> (Tensor[(15, 15, ?), int8],) {
  %618 = @func_3772() /* ty=(Tensor[(15, 15, ?), int8],) */;
  %619 = %618.0;
  (%619,)
}

def @func_2445() -> (Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) {
  %620 = @func_2252() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %621 = @func_2278() /* ty=Tensor[(2, 1, 8), float64] */;
  %622 = %620.0;
  %623 = @func_2278() /* ty=Tensor[(2, 1, 8), float64] */;
  (%621, %622, %623)
}

def @func_4222() -> (Tensor[(2, 1, 8), float64], Tensor[(14, 11, 3), float64], Tensor[(462), float64], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) {
  %624 = @func_2278() /* ty=Tensor[(2, 1, 8), float64] */;
  %625 = cast(%624, dtype="float64") /* ty=Tensor[(2, 1, 8), float64] */;
  %626 = cast(meta[relay.Constant][40] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %627 = cast(meta[relay.Constant][40] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %628 = reshape(%626, newshape=[14, 11, 3]) /* ty=Tensor[(14, 11, 3), float64] */;
  %629 = reshape(%627, newshape=[14, 11, 3]) /* ty=Tensor[(14, 11, 3), float64] */;
  %630 = cast(meta[relay.Constant][41] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %631 = reshape(%630, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float64] */;
  %632 = sqrt(%625) /* ty=Tensor[(2, 1, 8), float64] */;
  %633 = @func_2699(%628, %629) /* ty=Tensor[(14, 11, 3), float64] */;
  %634 = @func_1423(%631) /* ty=Tensor[(16, 5, 2), float64] */;
  (%632, %633, meta[relay.Constant][40] /* ty=Tensor[(462), float64] */, %634, meta[relay.Constant][41] /* ty=Tensor[(160), float64] */)
}

def @func_1598(%var_1593: Tensor[(4, 10, 3), int64], %var_1594: Tensor[(4, 10, 3), int64]) -> Tensor[(4, 10, 3), int64] {
  %635 = cast(%var_1594, dtype="int64") /* ty=Tensor[(4, 10, 3), int64] */;
  %636 = shape_of(%var_1593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%var_1593, dtype="int64") /* ty=Tensor[(4, 10, 3), int64] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  maximum(%637, %638) /* ty=Tensor[(4, 10, 3), int64] */
}

def @func_2699(%var_2694: Tensor[(14, 11, 3), float64], %var_2695: Tensor[(14, 11, 3), float64]) -> Tensor[(14, 11, 3), float64] {
  %639 = cast(%var_2695, dtype="float64") /* ty=Tensor[(14, 11, 3), float64] */;
  %640 = shape_of(%var_2694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%var_2694, dtype="float64") /* ty=Tensor[(14, 11, 3), float64] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  subtract(%641, %642) /* ty=Tensor[(14, 11, 3), float64] */
}

def @func_3930() -> (Tensor[(2, 1, 8), float32],) {
  %643 = @func_3918() /* ty=Tensor[(2, 1, 8), float32] */;
  (%643,)
}

def @func_2626(%var_2591: Tensor[(1024), uint8], %var_2592: Tensor[(3120), uint8], %var_2593: Tensor[(275), uint8], %var_2605: Tensor[(10, 50), float32]) -> (Tensor[(2, 1, 8), float64], float32, Tensor[(2, 1, 8), float32], Tensor[(16, 15, 13), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(2, 1, 8), float32], Tensor[(10, 5, 10), uint16], Tensor[(10, 50), float32], Tensor[(6, 12, 8), float32]) {
  %644 = @func_2307() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %645 = @func_2445() /* ty=(Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) */;
  %646 = cast(%var_2591, dtype="uint8") /* ty=Tensor[(1024), uint8] */;
  %647 = cast(%var_2592, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %648 = cast(%var_2593, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %649 = reshape(%646, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), uint8] */;
  %650 = reshape(%647, newshape=[780, 4]) /* ty=Tensor[(780, 4), uint8] */;
  %651 = reshape(%648, newshape=[275]) /* ty=Tensor[(275), uint8] */;
  %652 = @func_2181(%649, %650, %651) /* ty=(Tensor[(8, 8, 16), uint8], Tensor[(16, 15, 13), uint8], Tensor[(780, 4), uint8], Tensor[(11, 5, 5), float32], Tensor[(275), uint8]) */;
  %653 = cast(%var_2605, dtype="float32") /* ty=Tensor[(10, 50), float32] */;
  %654 = reshape(%653, newshape=[10, 5, 10]) /* ty=Tensor[(10, 5, 10), float32] */;
  %655 = @func_1791(%654) /* ty=(Tensor[(10, 5, 10), uint16],) */;
  %656 = cast(-0.497572f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %657 = reshape(%656, newshape=[]) /* ty=float32 */;
  %658 = @func_1748(%657) /* ty=(Tensor[(6, 12, 8), float32],) */;
  %659 = %658.0;
  %660 = cast(%659, dtype="float32") /* ty=Tensor[(6, 12, 8), float32] */;
  %661 = %644.0;
  %662 = %645.1;
  %663 = %652.1;
  %664 = @func_2200() /* ty=Tensor[(2, 1, 8), float32] */;
  %665 = %655.0;
  %666 = exp(%660) /* ty=Tensor[(6, 12, 8), float32] */;
  (%661, -0.497572f /* ty=float32 */, %662, %663, %var_2591, %var_2592, %var_2593, %664, %665, %var_2605, %666)
}

def @func_668(%var_640: Tensor[(11, 5, 5), uint8], %var_641: Tensor[(11, 5, 5), uint8], %var_658: Tensor[(11, 5, 5), uint8]) -> (Tensor[(11, 5, 5), float32], Tensor[(11, 5, 5), int8], Tensor[(11, 5, 5), float32]) {
  %667 = cast(%var_641, dtype="bool") /* ty=Tensor[(11, 5, 5), bool] */;
  %668 = shape_of(%var_640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%var_640, dtype="bool") /* ty=Tensor[(11, 5, 5), bool] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %671 = not_equal(%669, %670) /* ty=Tensor[(11, 5, 5), bool] */;
  %672 = cast(%671, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %673 = shape_of(%var_640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%var_640, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %676 = cast(%var_658, dtype="int8") /* ty=Tensor[(11, 5, 5), int8] */;
  %677 = shape_of(%var_640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%var_640, dtype="int8") /* ty=Tensor[(11, 5, 5), int8] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %680 = cast(meta[relay.Constant][42] /* ty=Tensor[(11, 5, 5), uint8] */, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %681 = shape_of(%var_640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %682 = cast(%var_640, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %684 = divide(%674, %675) /* ty=Tensor[(11, 5, 5), float32] */;
  %685 = bitwise_and(%678, %679) /* ty=Tensor[(11, 5, 5), int8] */;
  %686 = floor_mod(%682, %683) /* ty=Tensor[(11, 5, 5), float32] */;
  (%684, %685, %686)
}

def @func_3267() -> Tensor[(2, 1, 8), float64] {
  @func_2278() /* ty=Tensor[(2, 1, 8), float64] */
}

def @func_4238() -> Tensor[(2, 1, 8), float64] {
  @func_3267() /* ty=Tensor[(2, 1, 8), float64] */
}

def @func_1341(%var_1319: Tensor[(252), int32], %var_1320: Tensor[(1755), float32]) -> (Tensor[(9, 15, 15), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1755), float32], Tensor[(9, 13, 15), float32]) {
  %687 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 15, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 15), float64] */;
  %688 = cast(%var_1319, dtype="int32") /* ty=Tensor[(252), int32] */;
  %689 = cast(%var_1320, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %690 = reshape(%688, newshape=[4, 7, 9]) /* ty=Tensor[(4, 7, 9), int32] */;
  %691 = reshape(%689, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
  %692 = @func_385(%690, %691) /* ty=(Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), uint16], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), int8], Tensor[(1755), float64]) */;
  %693 = cast(%var_1320, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %694 = reshape(%693, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), float32] */;
  %695 = @func_22(%694) /* ty=(Tensor[(9, 13, 15), float32],) */;
  %696 = sinh(%687) /* ty=Tensor[(9, 15, 15), float64] */;
  %697 = %692.5;
  %698 = %695.0;
  (%696, %697, %var_1319, %var_1320, %698)
}

def @func_2644() -> (Tensor[(2, 1, 8), float32],) {
  %699 = @func_2445() /* ty=(Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) */;
  %700 = %699.1;
  (%700,)
}

def @func_3123() -> (Tensor[(2, 1, 8), float32],) {
  %701 = @func_2802() /* ty=Tensor[(2, 1, 8), float32] */;
  (%701,)
}

def @func_5213() -> Tensor[(2, 1, 8), float32] {
  @func_4689() /* ty=Tensor[(2, 1, 8), float32] */
}

def @func_5823(%var_5804: Tensor[(7, 4, 11), int64]) -> (Tensor[(6, 12, 8), float32], float32, Tensor[(7, 4, 11), uint8]) {
  %702 = cast(-3.0485f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %703 = reshape(%702, newshape=[]) /* ty=float32 */;
  %704 = @func_1748(%703) /* ty=(Tensor[(6, 12, 8), float32],) */;
  %705 = cast(%var_5804, dtype="bool") /* ty=Tensor[(7, 4, 11), bool] */;
  %706 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(7, 4, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(meta[relay.Constant][44] /* ty=Tensor[(7, 4, 11), int64] */, dtype="bool") /* ty=Tensor[(7, 4, 11), bool] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %709 = greater(%707, %708) /* ty=Tensor[(7, 4, 11), bool] */;
  %710 = cast(%var_5804, dtype="uint8") /* ty=Tensor[(7, 4, 11), uint8] */;
  %711 = shape_of(%709, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%709, dtype="uint8") /* ty=Tensor[(7, 4, 11), uint8] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %714 = %704.0;
  %715 = minimum(%712, %713) /* ty=Tensor[(7, 4, 11), uint8] */;
  (%714, -3.0485f /* ty=float32 */, %715)
}

def @func_709(%var_696: Tensor[(16, 15, 13), uint8]) -> (Tensor[(16, 15, 13), uint8], Tensor[(11, 5, 5), float32], Tensor[(275, 1), uint8]) {
  %716 = cast(%var_696, dtype="uint8") /* ty=Tensor[(16, 15, 13), uint8] */;
  %717 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(16, 15, 13), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %718 = cast(meta[relay.Constant][45] /* ty=Tensor[(16, 15, 13), uint8] */, dtype="uint8") /* ty=Tensor[(16, 15, 13), uint8] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %720 = cast(meta[relay.Constant][46] /* ty=Tensor[(275, 1), uint8] */, dtype="uint8") /* ty=Tensor[(275, 1), uint8] */;
  %721 = cast(meta[relay.Constant][46] /* ty=Tensor[(275, 1), uint8] */, dtype="uint8") /* ty=Tensor[(275, 1), uint8] */;
  %722 = cast(meta[relay.Constant][46] /* ty=Tensor[(275, 1), uint8] */, dtype="uint8") /* ty=Tensor[(275, 1), uint8] */;
  %723 = reshape(%720, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
  %724 = reshape(%721, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
  %725 = reshape(%722, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
  %726 = @func_668(%723, %724, %725) /* ty=(Tensor[(11, 5, 5), float32], Tensor[(11, 5, 5), int8], Tensor[(11, 5, 5), float32]) */;
  %727 = left_shift(%718, %719) /* ty=Tensor[(16, 15, 13), uint8] */;
  %728 = %726.2;
  (%727, %728, meta[relay.Constant][46] /* ty=Tensor[(275, 1), uint8] */)
}

def @func_3742() -> (Tensor[(240), float32], Tensor[(252), int32], Tensor[(252), int32], Tensor[(1755), float32]) {
  %729 = @func_2900() /* ty=(Tensor[(240), float32], Tensor[(2, ?, 8), int16], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) */;
  %730 = cast(meta[relay.Constant][47] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %731 = cast(meta[relay.Constant][48] /* ty=Tensor[(1755), float32] */, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %732 = reshape(%730, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %733 = reshape(%731, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
  %734 = @func_3569(%732, %733) /* ty=(Tensor[(2, 1, 8), float32], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1755), float32]) */;
  %735 = %729.0;
  %736 = %734.2;
  (%735, %736, meta[relay.Constant][47] /* ty=Tensor[(252), int32] */, meta[relay.Constant][48] /* ty=Tensor[(1755), float32] */)
}

def @func_22(%var_10: Tensor[(9, 13, 15), float32]) -> (Tensor[(9, 13, 15), float32],) {
  %737 = cast(%var_10, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
  %738 = tan(%737) /* ty=Tensor[(9, 13, 15), float32] */;
  (%738,)
}

def @func_4689() -> Tensor[(2, 1, 8), float32] {
  @func_4165() /* ty=Tensor[(2, 1, 8), float32] */
}

def @func_1632(%var_1621: Tensor[(3, 4, 11), uint32]) -> (Tensor[(3, 4, 11), uint32], Tensor[(1755), float32], Tensor[(3120), uint8]) {
  %739 = cast(%var_1621, dtype="uint32") /* ty=Tensor[(3, 4, 11), uint32] */;
  %740 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(3, 4, 11), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(meta[relay.Constant][49] /* ty=Tensor[(3, 4, 11), uint32] */, dtype="uint32") /* ty=Tensor[(3, 4, 11), uint32] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %743 = cast(meta[relay.Constant][50] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %744 = reshape(%743, newshape=[156, 20]) /* ty=Tensor[(156, 20), uint8] */;
  %745 = @func_796(%744) /* ty=(Tensor[(9, 13, 15), float32], Tensor[(1755), float32], Tensor[(16, 15, 13), uint8], Tensor[(156, 20), uint8], Tensor[(3, ?, 14), uint16], Tensor[(3, 1, 14), float64], Tensor[(3, 1, 14), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32]) */;
  %746 = multiply(%741, %742) /* ty=Tensor[(3, 4, 11), uint32] */;
  %747 = %745.1;
  (%746, %747, meta[relay.Constant][50] /* ty=Tensor[(3120), uint8] */)
}

def @func_3543(%var_3532: Tensor[(275), uint8]) -> (Tensor[(275), int16],) {
  %748 = @func_3341() /* ty=(Tensor[(240), float32], Tensor[(8, 8, 16), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(10, 5, 10), uint16], Tensor[(250, 2), float32]) */;
  %749 = %748.4;
  %750 = cast(%var_3532, dtype="int16") /* ty=Tensor[(275), int16] */;
  %751 = shape_of(%749, dtype="int32") /* ty=Tensor[(1), int32] */;
  %752 = cast(%749, dtype="int16") /* ty=Tensor[(275), int16] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?), int16] */;
  %754 = bitwise_or(%752, %753) /* ty=Tensor[(275), int16] */;
  (%754,)
}

def @func_4068(%var_4032: Tensor[(80), float32], %var_4033: float32) -> (Tensor[(2, 1, 8), float64], Tensor[(240), float32], Tensor[(6, 12, 8), float32], Tensor[(80), float32], float32) {
  %755 = @func_2445() /* ty=(Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) */;
  %756 = cast(%var_4032, dtype="float32") /* ty=Tensor[(80), float32] */;
  %757 = cast(%var_4033, dtype="float32") /* ty=float32 */;
  %758 = reshape(%756, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float32] */;
  %759 = reshape(%757, newshape=[]) /* ty=float32 */;
  %760 = @func_2539(%758, %759) /* ty=(Tensor[(6, 12, 8), float32], float32, Tensor[(2, 5, 8), bool], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) */;
  %761 = %755.0;
  %762 = @func_3302() /* ty=Tensor[(240), float32] */;
  %763 = %760.0;
  (%761, %762, %763, %var_4032, %var_4033)
}

def @func_5492() -> (Tensor[(2, 1, 8), float32],) {
  %764 = @func_3427() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %765 = %764.0;
  (%765,)
}

def @func_6194() -> (Tensor[(2, 1, 8), float32],) {
  %766 = @func_4165() /* ty=Tensor[(2, 1, 8), float32] */;
  (%766,)
}

def @func_5279(%var_5268: Tensor[(2, 11, 8), float32]) -> (Tensor[(2, 11, 8), int64],) {
  %767 = @func_4689() /* ty=Tensor[(2, 1, 8), float32] */;
  %768 = cast(%767, dtype="int64") /* ty=Tensor[(2, 1, 8), int64] */;
  %769 = cast(%var_5268, dtype="int64") /* ty=Tensor[(2, 11, 8), int64] */;
  %770 = maximum(%768, %769) /* ty=Tensor[(2, 11, 8), int64] */;
  (%770,)
}

def @func_3896() -> (Tensor[(2, 1, 8), float64],) {
  %771 = @func_2307() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %772 = %771.0;
  (%772,)
}

def @func_5166(%var_5157: Tensor[(500), float32]) -> (Tensor[(14, 11, 3), float64], Tensor[(250, 2), uint64], Tensor[(500), float32], Tensor[(14, 11, 3), float64]) {
  %773 = @func_4246() /* ty=(Tensor[(14, 11, 3), float64],) */;
  %774 = cast(%var_5157, dtype="float32") /* ty=Tensor[(500), float32] */;
  %775 = reshape(%774, newshape=[250, 2]) /* ty=Tensor[(250, 2), float32] */;
  %776 = @func_4479(%775) /* ty=(Tensor[(2, 1, 8), float32], Tensor[(250, 2), uint64], Tensor[(250, 2), float64]) */;
  %777 = @func_4246() /* ty=(Tensor[(14, 11, 3), float64],) */;
  %778 = %773.0;
  %779 = %776.1;
  %780 = %777.0;
  (%778, %779, %var_5157, %780)
}

def @func_2831(%var_2819: Tensor[(8, 4, 11), int16], %var_2820: Tensor[(8, 4, 11), int16]) -> Tensor[(8, 4, 11), bool] {
  %781 = cast(%var_2820, dtype="int16") /* ty=Tensor[(8, 4, 11), int16] */;
  %782 = shape_of(%var_2819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %783 = cast(%var_2819, dtype="int16") /* ty=Tensor[(8, 4, 11), int16] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %785 = right_shift(%783, %784) /* ty=Tensor[(8, 4, 11), int16] */;
  %786 = cast(%785, dtype="bool") /* ty=Tensor[(8, 4, 11), bool] */;
  %787 = shape_of(%var_2820, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%var_2820, dtype="bool") /* ty=Tensor[(8, 4, 11), bool] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%788, %789) /* ty=Tensor[(8, 4, 11), bool] */
}

def @func_5121(%var_5075: Tensor[(2, 13, 8), float64], %var_5095: Tensor[(448), float64], %var_5098: Tensor[(480), float32], %var_5110: Tensor[(176), float32], %var_5111: Tensor[(11, 25), uint8]) -> (Tensor[(2, 13, 8), int64], Tensor[(2, 1, 8), float32], Tensor[(4, 16, 7), bool], Tensor[(448), float64], Tensor[(2, 16, 15), float32], Tensor[(480), float32], Tensor[(1024), uint8], Tensor[(176), float32], Tensor[(11, 25), uint8], Tensor[(500), float32]) {
  %790 = @func_3896() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %791 = %790.0;
  %792 = cast(%791, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
  %793 = cast(%var_5075, dtype="bool") /* ty=Tensor[(2, 13, 8), bool] */;
  %794 = equal(%792, %793) /* ty=Tensor[(2, 13, 8), bool] */;
  %795 = cast(%var_5075, dtype="int64") /* ty=Tensor[(2, 13, 8), int64] */;
  %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(%794, dtype="int64") /* ty=Tensor[(2, 13, 8), int64] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %799 = @func_4927() /* ty=(Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float32]) */;
  %800 = cast(%var_5095, dtype="float64") /* ty=Tensor[(448), float64] */;
  %801 = reshape(%800, newshape=[4, 16, 7]) /* ty=Tensor[(4, 16, 7), float64] */;
  %802 = @func_4865(%801) /* ty=(Tensor[(4, 16, 7), int32], Tensor[(4, 16, 7), bool], Tensor[(4, 16, 7), float32]) */;
  %803 = cast(%var_5098, dtype="float32") /* ty=Tensor[(480), float32] */;
  %804 = cast(%var_5098, dtype="float32") /* ty=Tensor[(480), float32] */;
  %805 = reshape(%803, newshape=[2, 16, 15]) /* ty=Tensor[(2, 16, 15), float32] */;
  %806 = reshape(%804, newshape=[2, 16, 15]) /* ty=Tensor[(2, 16, 15), float32] */;
  %807 = @func_2412(%805, %806) /* ty=(Tensor[(2, 16, 15), float32], Tensor[(2, 16, 15), float64]) */;
  %808 = cast(%var_5110, dtype="float32") /* ty=Tensor[(176), float32] */;
  %809 = cast(%var_5111, dtype="uint8") /* ty=Tensor[(11, 25), uint8] */;
  %810 = cast(meta[relay.Constant][51] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
  %811 = reshape(%808, newshape=[2, 11, 8]) /* ty=Tensor[(2, 11, 8), float32] */;
  %812 = reshape(%809, newshape=[275]) /* ty=Tensor[(275), uint8] */;
  %813 = reshape(%810, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %814 = @func_2945(%811, %812, %813) /* ty=(Tensor[(2, 11, 8), uint8], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(10, 5, 10), uint16], Tensor[(1024), uint8], Tensor[(156, 20), uint8], Tensor[(275), uint8], Tensor[(500), float32]) */;
  %815 = bitwise_and(%797, %798) /* ty=Tensor[(2, 13, 8), int64] */;
  %816 = %799.0;
  %817 = %802.1;
  %818 = %807.0;
  %819 = %814.4;
  (%815, %816, %817, %var_5095, %818, %var_5098, %819, %var_5110, %var_5111, meta[relay.Constant][51] /* ty=Tensor[(500), float32] */)
}

def @func_3363() -> (Tensor[(2, 1, 8), float32], Tensor[(15, 15, ?), int8]) {
  %820 = cast(meta[relay.Constant][52] /* ty=Tensor[(15, 15, 1), float32] */, dtype="float32") /* ty=Tensor[(15, 15, 1), float32] */;
  %821 = rsqrt(%820) /* ty=Tensor[(15, 15, 1), float32] */;
  %822 = cast(%821, dtype="int8") /* ty=Tensor[(15, 15, 1), int8] */;
  %823 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(15, 15, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(meta[relay.Constant][52] /* ty=Tensor[(15, 15, 1), float32] */, dtype="int8") /* ty=Tensor[(15, 15, 1), int8] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %826 = @func_2200() /* ty=Tensor[(2, 1, 8), float32] */;
  %827 = subtract(%824, %825) /* ty=Tensor[(15, 15, ?), int8] */;
  (%826, %827)
}

def @func_3851(%var_3839: Tensor[(252), int32], %var_3840: Tensor[(1, 1755), float32]) -> (Tensor[(2, 7, 8), bool], Tensor[(28, 4), float32], Tensor[(2, 4, 8), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1, 1755), float32], Tensor[(3120), uint8]) {
  %828 = cast(meta[relay.Constant][53] /* ty=Tensor[(28, 4), float32] */, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
  %829 = reshape(%828, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
  %830 = @func_3427() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %831 = %830.0;
  %832 = cast(%831, dtype="float64") /* ty=Tensor[(2, 1, 8), float64] */;
  %833 = cos(%832) /* ty=Tensor[(2, 1, 8), float64] */;
  %834 = cast(%833, dtype="float64") /* ty=Tensor[(2, 1, 8), float64] */;
  %835 = cast(meta[relay.Constant][54] /* ty=Tensor[(2, 4, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 4, 8), float64] */;
  %836 = cast(%var_3839, dtype="int32") /* ty=Tensor[(252), int32] */;
  %837 = cast(%var_3840, dtype="float32") /* ty=Tensor[(1, 1755), float32] */;
  %838 = reshape(%836, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %839 = reshape(%837, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
  %840 = @func_1341(%838, %839) /* ty=(Tensor[(9, 15, 15), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1755), float32], Tensor[(9, 13, 15), float32]) */;
  %841 = @func_3341() /* ty=(Tensor[(240), float32], Tensor[(8, 8, 16), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(10, 5, 10), uint16], Tensor[(250, 2), float32]) */;
  %842 = @func_2971(%829) /* ty=Tensor[(2, 7, 8), bool] */;
  %843 = floor_divide(%834, %835) /* ty=Tensor[(2, 4, 8), float64] */;
  %844 = %840.1;
  %845 = %841.3;
  (%842, meta[relay.Constant][53] /* ty=Tensor[(28, 4), float32] */, %843, %844, %var_3839, %var_3840, %845)
}

def @func_2200() -> Tensor[(2, 1, 8), float32] {
  %846 = cast(meta[relay.Constant][55] /* ty=Tensor[(2, 1, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 1, 8), float32] */;
  atan(%846) /* ty=Tensor[(2, 1, 8), float32] */
}

def @func_6108() -> (Tensor[(2, ?, 8), int8],) {
  %847 = @func_5582() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %848 = %847.0;
  %849 = @func_2307() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %850 = %849.0;
  %851 = cast(%850, dtype="int8") /* ty=Tensor[(2, 1, 8), int8] */;
  %852 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %853 = cast(%848, dtype="int8") /* ty=Tensor[(2, 1, 8), int8] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %855 = logical_xor(%853, %854) /* ty=Tensor[(2, ?, 8), int8] */;
  (%855,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3896() -> (Tensor[(2, 1, 8), float64],) {
  %0 = @func_2307() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %1 = %0.0;
  (%1,)
}

def @func_3124() -> (Tensor[(2, 1, 8), float32],) {
  %3 = fn () -> (Tensor[(2, 1, 8), float32],) {
    %2 = @func_2802() /* ty=Tensor[(2, 1, 8), float32] */;
    (%2,)
  };
  %3() /* ty=(Tensor[(2, 1, 8), float32],) */
}

def @func_2054(%var_2051: Tensor[(3, 12, 1), int16], %var_2052: Tensor[(275), uint8], %var_2053: Tensor[(120), int64]) -> (Tensor[(11, 5, 5), int8], Tensor[(275), uint8], Tensor[(3, 12, ?), float64], Tensor[(4, 10, 3), int64], Tensor[(120), int64], Tensor[(3120), uint8], Tensor[(1, 132), uint32], Tensor[(275, 1), uint8], Tensor[(11, 5, 5), int8]) {
  %41 = fn (%var_2004: Tensor[(3, 12, 1), int16], %var_2013: Tensor[(275), uint8], %var_2020: Tensor[(120), int64]) -> (Tensor[(11, 5, 5), int8], Tensor[(275), uint8], Tensor[(3, 12, ?), float64], Tensor[(4, 10, 3), int64], Tensor[(120), int64], Tensor[(3120), uint8], Tensor[(1, 132), uint32], Tensor[(275, 1), uint8], Tensor[(11, 5, 5), int8]) {
    %4 = cast(%var_2013, dtype="uint8") /* ty=Tensor[(275), uint8] */;
    %5 = cast(%var_2013, dtype="uint8") /* ty=Tensor[(275), uint8] */;
    %6 = cast(%var_2013, dtype="uint8") /* ty=Tensor[(275), uint8] */;
    %7 = reshape(%4, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
    %8 = reshape(%5, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
    %9 = reshape(%6, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
    %10 = @func_668(%7, %8, %9) /* ty=(Tensor[(11, 5, 5), float32], Tensor[(11, 5, 5), int8], Tensor[(11, 5, 5), float32]) */;
    %11 = cast(meta[relay.Constant][0] /* ty=int16 */, dtype="bool") /* ty=bool */;
    %12 = cast(%var_2004, dtype="bool") /* ty=Tensor[(3, 12, 1), bool] */;
    %13 = greater(%11, %12) /* ty=Tensor[(3, 12, 1), bool] */;
    %14 = cast(%var_2004, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
    %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
    %16 = cast(%13, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
    %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %18 = cast(%var_2020, dtype="int64") /* ty=Tensor[(120), int64] */;
    %19 = cast(%var_2020, dtype="int64") /* ty=Tensor[(120), int64] */;
    %20 = reshape(%18, newshape=[4, 10, 3]) /* ty=Tensor[(4, 10, 3), int64] */;
    %21 = reshape(%19, newshape=[4, 10, 3]) /* ty=Tensor[(4, 10, 3), int64] */;
    %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 132), uint32] */, dtype="uint32") /* ty=Tensor[(1, 132), uint32] */;
    %23 = reshape(%22, newshape=[3, 4, 11]) /* ty=Tensor[(3, 4, 11), uint32] */;
    %24 = @func_1632(%23) /* ty=(Tensor[(3, 4, 11), uint32], Tensor[(1755), float32], Tensor[(3120), uint8]) */;
    %25 = %24.2;
    %26 = cast(%25, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
    %27 = reshape(%26, newshape=[16, 15, 13]) /* ty=Tensor[(16, 15, 13), uint8] */;
    %28 = @func_709(%27) /* ty=(Tensor[(16, 15, 13), uint8], Tensor[(11, 5, 5), float32], Tensor[(275, 1), uint8]) */;
    %29 = cast(%var_2013, dtype="uint8") /* ty=Tensor[(275), uint8] */;
    %30 = cast(%var_2013, dtype="uint8") /* ty=Tensor[(275), uint8] */;
    %31 = %10.1;
    %32 = cast(%31, dtype="uint8") /* ty=Tensor[(11, 5, 5), uint8] */;
    %33 = reshape(%29, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
    %34 = reshape(%30, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
    %35 = reshape(%32, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
    %36 = @func_668(%33, %34, %35) /* ty=(Tensor[(11, 5, 5), float32], Tensor[(11, 5, 5), int8], Tensor[(11, 5, 5), float32]) */;
    %37 = floor_divide(%16, %17) /* ty=Tensor[(3, 12, ?), float64] */;
    %38 = @func_1598(%20, %21) /* ty=Tensor[(4, 10, 3), int64] */;
    %39 = %28.2;
    %40 = %36.1;
    (%31, %var_2013, %37, %38, %var_2020, %25, meta[relay.Constant][1] /* ty=Tensor[(1, 132), uint32] */, %39, %40)
  };
  %41(%var_2051, %var_2052, %var_2053) /* ty=(Tensor[(11, 5, 5), int8], Tensor[(275), uint8], Tensor[(3, 12, ?), float64], Tensor[(4, 10, 3), int64], Tensor[(120), int64], Tensor[(3120), uint8], Tensor[(1, 132), uint32], Tensor[(275, 1), uint8], Tensor[(11, 5, 5), int8]) */
}

def @func_6385(%var_6383: Tensor[(250, 2), float32], %var_6384: Tensor[(30, 4), int64]) -> (Tensor[(15, 15, ?), int8], Tensor[(2, ?, 8), int8], Tensor[(250, 2), bool], Tensor[(2, 1, 8), float64], Tensor[(14, 11, 3), float64], Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(30, 4), int64], Tensor[(500), float32]) {
  %73 = fn (%var_6326: Tensor[(250, 2), float32], %var_6360: Tensor[(30, 4), int64]) -> (Tensor[(15, 15, ?), int8], Tensor[(2, ?, 8), int8], Tensor[(250, 2), bool], Tensor[(2, 1, 8), float64], Tensor[(14, 11, 3), float64], Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(30, 4), int64], Tensor[(500), float32]) {
    %42 = @func_3772() /* ty=(Tensor[(15, 15, ?), int8],) */;
    %43 = @func_6108() /* ty=(Tensor[(2, ?, 8), int8],) */;
    %44 = cast(meta[relay.Constant][2] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
    %45 = reshape(%44, newshape=[250, 2]) /* ty=Tensor[(250, 2), float32] */;
    %46 = @func_4479(%45) /* ty=(Tensor[(2, 1, 8), float32], Tensor[(250, 2), uint64], Tensor[(250, 2), float64]) */;
    %47 = %46.2;
    %48 = cast(%47, dtype="float32") /* ty=Tensor[(250, 2), float32] */;
    %49 = log(%48) /* ty=Tensor[(250, 2), float32] */;
    %50 = cast(%var_6326, dtype="bool") /* ty=Tensor[(250, 2), bool] */;
    %51 = shape_of(%49, dtype="int32") /* ty=Tensor[(2), int32] */;
    %52 = cast(%49, dtype="bool") /* ty=Tensor[(250, 2), bool] */;
    %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %54 = @func_5582() /* ty=(Tensor[(2, 1, 8), float64],) */;
    %55 = cast(%47, dtype="float32") /* ty=Tensor[(250, 2), float32] */;
    %56 = reshape(%55, newshape=[500]) /* ty=Tensor[(500), float32] */;
    %57 = @func_5166(%56) /* ty=(Tensor[(14, 11, 3), float64], Tensor[(250, 2), uint64], Tensor[(500), float32], Tensor[(14, 11, 3), float64]) */;
    %58 = @func_6003() /* ty=(Tensor[(2, 1, 8), float64],) */;
    %59 = cast(%var_6360, dtype="int64") /* ty=Tensor[(30, 4), int64] */;
    %60 = reshape(%59, newshape=[120]) /* ty=Tensor[(120), int64] */;
    %61 = @func_2734(%60) /* ty=(Tensor[(2, 1, 8), float32], Tensor[(1, 132), uint32], Tensor[(275), uint8], Tensor[(120), int64], Tensor[(36), float64]) */;
    %62 = cast(meta[relay.Constant][2] /* ty=Tensor[(500), float32] */, dtype="float64") /* ty=Tensor[(500), float64] */;
    %63 = sigmoid(%62) /* ty=Tensor[(500), float64] */;
    %64 = cast(%63, dtype="float32") /* ty=Tensor[(500), float32] */;
    %65 = %42.0;
    %66 = %43.0;
    %67 = greater(%52, %53) /* ty=Tensor[(250, 2), bool] */;
    %68 = %54.0;
    %69 = %57.0;
    %70 = %58.0;
    %71 = %61.0;
    %72 = erf(%64) /* ty=Tensor[(500), float32] */;
    (%65, %66, %67, %68, %69, %70, %71, %var_6360, %72)
  };
  %73(%var_6383, %var_6384) /* ty=(Tensor[(15, 15, ?), int8], Tensor[(2, ?, 8), int8], Tensor[(250, 2), bool], Tensor[(2, 1, 8), float64], Tensor[(14, 11, 3), float64], Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(30, 4), int64], Tensor[(500), float32]) */
}

def @main(%var_6455: Tensor[(14, 4, 6), bool], %var_6456: Tensor[(14, 4, 6), bool]) -> (Tensor[(14, 4, 6), bool],) {
  %74 = cast(%var_6456, dtype="bool") /* ty=Tensor[(14, 4, 6), bool] */;
  %75 = shape_of(%var_6455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%var_6455, dtype="bool") /* ty=Tensor[(14, 4, 6), bool] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %78 = logical_or(%76, %77) /* ty=Tensor[(14, 4, 6), bool] */;
  (%78,)
}

def @func_2542(%var_2540: Tensor[(2, 5, 8), float32], %var_2541: float32) -> (Tensor[(6, 12, 8), float32], float32, Tensor[(2, 5, 8), bool], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) {
  %97 = fn (%var_2495: Tensor[(2, 5, 8), float32], %var_2507: float32) -> (Tensor[(6, 12, 8), float32], float32, Tensor[(2, 5, 8), bool], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) {
    %79 = cast(%var_2507, dtype="float32") /* ty=float32 */;
    %80 = reshape(%79, newshape=[]) /* ty=float32 */;
    %81 = @func_1748(%80) /* ty=(Tensor[(6, 12, 8), float32],) */;
    %82 = @func_2252() /* ty=(Tensor[(2, 1, 8), float32],) */;
    %83 = %82.0;
    %84 = @func_2252() /* ty=(Tensor[(2, 1, 8), float32],) */;
    %85 = %84.0;
    %86 = cast(%85, dtype="int32") /* ty=Tensor[(2, 1, 8), int32] */;
    %87 = cast(%var_2495, dtype="int32") /* ty=Tensor[(2, 5, 8), int32] */;
    %88 = subtract(%86, %87) /* ty=Tensor[(2, 5, 8), int32] */;
    %89 = cast(%83, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
    %90 = cast(%88, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
    %91 = @func_2252() /* ty=(Tensor[(2, 1, 8), float32],) */;
    %92 = %81.0;
    %93 = logical_and(%89, %90) /* ty=Tensor[(2, 5, 8), bool] */;
    %94 = %91.0;
    %95 = @func_2200() /* ty=Tensor[(2, 1, 8), float32] */;
    %96 = @func_2278() /* ty=Tensor[(2, 1, 8), float64] */;
    (%92, %var_2507, %93, %94, %95, %96)
  };
  %97(%var_2540, %var_2541) /* ty=(Tensor[(6, 12, 8), float32], float32, Tensor[(2, 5, 8), bool], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) */
}

def @func_388(%var_386: Tensor[(4, 7, 9), int32], %var_387: Tensor[(1755), float32]) -> (Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), uint16], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), int8], Tensor[(1755), float64]) {
  %147 = fn (%var_278: Tensor[(4, 7, 9), int32], %var_284: Tensor[(1755), float32]) -> (Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), uint16], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), int8], Tensor[(1755), float64]) {
    %98 = cast(%var_284, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %99 = reshape(%98, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), float32] */;
    %100 = @func_22(%99) /* ty=(Tensor[(9, 13, 15), float32],) */;
    %101 = cast(%var_284, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %102 = reshape(%101, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), float32] */;
    %103 = @func_22(%102) /* ty=(Tensor[(9, 13, 15), float32],) */;
    %104 = cast(%var_278, dtype="int32") /* ty=Tensor[(4, 7, 9), int32] */;
    %105 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(4, 7, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %106 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 7, 9), int32] */, dtype="int32") /* ty=Tensor[(4, 7, 9), int32] */;
    %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %108 = multiply(%106, %107) /* ty=Tensor[(4, 7, 9), int32] */;
    %109 = cast(%108, dtype="uint16") /* ty=Tensor[(4, 7, 9), uint16] */;
    %110 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(4, 7, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %111 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 7, 9), int32] */, dtype="uint16") /* ty=Tensor[(4, 7, 9), uint16] */;
    %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %113 = %100.0;
    %114 = cast(%113, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
    %115 = reshape(%114, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), float32] */;
    %116 = @func_22(%115) /* ty=(Tensor[(9, 13, 15), float32],) */;
    %117 = cast(%var_284, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %118 = reshape(%117, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), float32] */;
    %119 = @func_22(%118) /* ty=(Tensor[(9, 13, 15), float32],) */;
    %120 = %119.0;
    %121 = cast(%120, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
    %122 = reshape(%121, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), float32] */;
    %123 = @func_22(%122) /* ty=(Tensor[(9, 13, 15), float32],) */;
    %124 = cast(%113, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
    %125 = reshape(%124, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), float32] */;
    %126 = @func_22(%125) /* ty=(Tensor[(9, 13, 15), float32],) */;
    %127 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 7, 9), int32] */, dtype="int8") /* ty=Tensor[(4, 7, 9), int8] */;
    %128 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
    %129 = cast(%108, dtype="int8") /* ty=Tensor[(4, 7, 9), int8] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %131 = cast(%120, dtype="bool") /* ty=Tensor[(9, 13, 15), bool] */;
    %132 = shape_of(%var_284, dtype="int32") /* ty=Tensor[(1), int32] */;
    %133 = cast(%var_284, dtype="bool") /* ty=Tensor[(1755), bool] */;
    %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?), bool] */;
    %135 = equal(%133, %134) /* ty=Tensor[(1755), bool] */;
    %136 = cast(meta[relay.Constant][4] /* ty=Tensor[(1755), bool] */, dtype="float64") /* ty=Tensor[(1755), float64] */;
    %137 = shape_of(%135, dtype="int32") /* ty=Tensor[(1), int32] */;
    %138 = cast(%135, dtype="float64") /* ty=Tensor[(1755), float64] */;
    %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?), float64] */;
    %140 = %103.0;
    %141 = bitwise_xor(%111, %112) /* ty=Tensor[(4, 7, 9), uint16] */;
    %142 = %116.0;
    %143 = %123.0;
    %144 = %126.0;
    %145 = bitwise_or(%129, %130) /* ty=Tensor[(4, 7, 9), int8] */;
    %146 = floor_divide(%138, %139) /* ty=Tensor[(1755), float64] */;
    (%113, %140, %141, %142, %143, %144, %145, %146)
  };
  %147(%var_386, %var_387) /* ty=(Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), uint16], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), int8], Tensor[(1755), float64]) */
}

def @func_2278() -> Tensor[(2, 1, 8), float64] {
  %148 = @func_2252() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %149 = %148.0;
  %150 = cast(%149, dtype="float64") /* ty=Tensor[(2, 1, 8), float64] */;
  asin(%150) /* ty=Tensor[(2, 1, 8), float64] */
}

def @func_5166(%var_5157: Tensor[(500), float32]) -> (Tensor[(14, 11, 3), float64], Tensor[(250, 2), uint64], Tensor[(500), float32], Tensor[(14, 11, 3), float64]) {
  %151 = @func_4246() /* ty=(Tensor[(14, 11, 3), float64],) */;
  %152 = cast(%var_5157, dtype="float32") /* ty=Tensor[(500), float32] */;
  %153 = reshape(%152, newshape=[250, 2]) /* ty=Tensor[(250, 2), float32] */;
  %154 = @func_4479(%153) /* ty=(Tensor[(2, 1, 8), float32], Tensor[(250, 2), uint64], Tensor[(250, 2), float64]) */;
  %155 = @func_4246() /* ty=(Tensor[(14, 11, 3), float64],) */;
  %156 = %151.0;
  %157 = %154.1;
  %158 = %155.0;
  (%156, %157, %var_5157, %158)
}

def @func_2699(%var_2694: Tensor[(14, 11, 3), float64], %var_2695: Tensor[(14, 11, 3), float64]) -> Tensor[(14, 11, 3), float64] {
  %159 = cast(%var_2695, dtype="float64") /* ty=Tensor[(14, 11, 3), float64] */;
  %160 = shape_of(%var_2694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%var_2694, dtype="float64") /* ty=Tensor[(14, 11, 3), float64] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  subtract(%161, %162) /* ty=Tensor[(14, 11, 3), float64] */
}

def @func_1870(%var_1868: Tensor[(2, 2, 11), float64], %var_1869: Tensor[(2, 2, 11), float64]) -> (Tensor[(2, 2, 11), float64],) {
  @func_1866(%var_1868, %var_1869) /* ty=(Tensor[(2, 2, 11), float64],) */
}

def @func_5825(%var_5824: Tensor[(7, 4, 11), int64]) -> (Tensor[(6, 12, 8), float32], float32, Tensor[(7, 4, 11), uint8]) {
  %177 = fn (%var_5804: Tensor[(7, 4, 11), int64]) -> (Tensor[(6, 12, 8), float32], float32, Tensor[(7, 4, 11), uint8]) {
    %163 = cast(-3.0485f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %164 = reshape(%163, newshape=[]) /* ty=float32 */;
    %165 = @func_1748(%164) /* ty=(Tensor[(6, 12, 8), float32],) */;
    %166 = cast(%var_5804, dtype="bool") /* ty=Tensor[(7, 4, 11), bool] */;
    %167 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(7, 4, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %168 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 4, 11), int64] */, dtype="bool") /* ty=Tensor[(7, 4, 11), bool] */;
    %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %170 = greater(%168, %169) /* ty=Tensor[(7, 4, 11), bool] */;
    %171 = cast(%var_5804, dtype="uint8") /* ty=Tensor[(7, 4, 11), uint8] */;
    %172 = shape_of(%170, dtype="int32") /* ty=Tensor[(3), int32] */;
    %173 = cast(%170, dtype="uint8") /* ty=Tensor[(7, 4, 11), uint8] */;
    %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %175 = %165.0;
    %176 = minimum(%173, %174) /* ty=Tensor[(7, 4, 11), uint8] */;
    (%175, -3.0485f /* ty=float32 */, %176)
  };
  %177(%var_5824) /* ty=(Tensor[(6, 12, 8), float32], float32, Tensor[(7, 4, 11), uint8]) */
}

def @func_3545(%var_3544: Tensor[(275), uint8]) -> (Tensor[(275), int16],) {
  %185 = fn (%var_3532: Tensor[(275), uint8]) -> (Tensor[(275), int16],) {
    %178 = @func_3341() /* ty=(Tensor[(240), float32], Tensor[(8, 8, 16), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(10, 5, 10), uint16], Tensor[(250, 2), float32]) */;
    %179 = %178.4;
    %180 = cast(%var_3532, dtype="int16") /* ty=Tensor[(275), int16] */;
    %181 = shape_of(%179, dtype="int32") /* ty=Tensor[(1), int32] */;
    %182 = cast(%179, dtype="int16") /* ty=Tensor[(275), int16] */;
    %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?), int16] */;
    %184 = bitwise_or(%182, %183) /* ty=Tensor[(275), int16] */;
    (%184,)
  };
  %185(%var_3544) /* ty=(Tensor[(275), int16],) */
}

def @func_4582(%var_4580: int8, %var_4581: Tensor[(10, 5, 12), int8]) -> Tensor[(10, 5, 12), float32] {
  @func_4578(%var_4580, %var_4581) /* ty=Tensor[(10, 5, 12), float32] */
}

def @func_6076(%var_6065: Tensor[(2, 9, 8), float64]) -> (Tensor[(2, 9, 8), uint16],) {
  %186 = @func_2278() /* ty=Tensor[(2, 1, 8), float64] */;
  %187 = cast(%186, dtype="uint16") /* ty=Tensor[(2, 1, 8), uint16] */;
  %188 = cast(%var_6065, dtype="uint16") /* ty=Tensor[(2, 9, 8), uint16] */;
  %189 = minimum(%187, %188) /* ty=Tensor[(2, 9, 8), uint16] */;
  (%189,)
}

def @func_5366(%var_5344: Tensor[(2, 1, 8), float32], %var_5359: Tensor[(252), int32]) -> (Tensor[(2, ?, 8), uint16], Tensor[(9, 15, 15), float64], Tensor[(252), int32], Tensor[(1755, 1), float32], Tensor[(240), float32]) {
  %190 = @func_5213() /* ty=Tensor[(2, 1, 8), float32] */;
  %191 = cast(%var_5344, dtype="uint16") /* ty=Tensor[(2, 1, 8), uint16] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%190, dtype="uint16") /* ty=Tensor[(2, 1, 8), uint16] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %195 = cast(%var_5359, dtype="int32") /* ty=Tensor[(252), int32] */;
  %196 = cast(meta[relay.Constant][6] /* ty=Tensor[(1755, 1), float32] */, dtype="float32") /* ty=Tensor[(1755, 1), float32] */;
  %197 = reshape(%195, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %198 = reshape(%196, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
  %199 = @func_1341(%197, %198) /* ty=(Tensor[(9, 15, 15), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1755), float32], Tensor[(9, 13, 15), float32]) */;
  %200 = right_shift(%193, %194) /* ty=Tensor[(2, ?, 8), uint16] */;
  %201 = %199.0;
  %202 = @func_3302() /* ty=Tensor[(240), float32] */;
  (%200, %201, %var_5359, meta[relay.Constant][6] /* ty=Tensor[(1755, 1), float32] */, %202)
}

def @func_2736(%var_2735: Tensor[(120), int64]) -> (Tensor[(2, 1, 8), float32], Tensor[(1, 132), uint32], Tensor[(275), uint8], Tensor[(120), int64], Tensor[(36), float64]) {
  %215 = fn (%var_2724: Tensor[(120), int64]) -> (Tensor[(2, 1, 8), float32], Tensor[(1, 132), uint32], Tensor[(275), uint8], Tensor[(120), int64], Tensor[(36), float64]) {
    %203 = @func_2644() /* ty=(Tensor[(2, 1, 8), float32],) */;
    %204 = cast(meta[relay.Constant][7] /* ty=Tensor[(36), int16] */, dtype="int16") /* ty=Tensor[(36), int16] */;
    %205 = cast(meta[relay.Constant][8] /* ty=Tensor[(275), uint8] */, dtype="uint8") /* ty=Tensor[(275), uint8] */;
    %206 = cast(%var_2724, dtype="int64") /* ty=Tensor[(120), int64] */;
    %207 = reshape(%204, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), int16] */;
    %208 = reshape(%205, newshape=[275]) /* ty=Tensor[(275), uint8] */;
    %209 = reshape(%206, newshape=[120]) /* ty=Tensor[(120), int64] */;
    %210 = @func_2050(%207, %208, %209) /* ty=(Tensor[(11, 5, 5), int8], Tensor[(275), uint8], Tensor[(3, 12, ?), float64], Tensor[(4, 10, 3), int64], Tensor[(120), int64], Tensor[(3120), uint8], Tensor[(1, 132), uint32], Tensor[(275, 1), uint8], Tensor[(11, 5, 5), int8]) */;
    %211 = cast(meta[relay.Constant][7] /* ty=Tensor[(36), int16] */, dtype="float64") /* ty=Tensor[(36), float64] */;
    %212 = %203.0;
    %213 = %210.6;
    %214 = sin(%211) /* ty=Tensor[(36), float64] */;
    (%212, %213, meta[relay.Constant][8] /* ty=Tensor[(275), uint8] */, %var_2724, %214)
  };
  %215(%var_2735) /* ty=(Tensor[(2, 1, 8), float32], Tensor[(1, 132), uint32], Tensor[(275), uint8], Tensor[(120), int64], Tensor[(36), float64]) */
}

def @func_3034(%var_2998: Tensor[(9, 8, 11), uint32]) -> (Tensor[(9, 8, 11), bool],) {
  %216 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 8, 11), uint32] */, dtype="bool") /* ty=Tensor[(9, 8, 11), bool] */;
  %217 = shape_of(%var_2998, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%var_2998, dtype="bool") /* ty=Tensor[(9, 8, 11), bool] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %220 = greater(%218, %219) /* ty=Tensor[(9, 8, 11), bool] */;
  (%220,)
}

def @func_5282(%var_5280: Tensor[(2, 11, 8), float32]) -> (Tensor[(2, 11, 8), int64],) {
  @func_5279(%var_5280) /* ty=(Tensor[(2, 11, 8), int64],) */
}

def @func_3679(%var_3677: Tensor[(132), uint32]) -> (Tensor[(2, ?, 8), bool], Tensor[(3, 4, 11), uint32], Tensor[(132), uint32], Tensor[(4, 10, 3), int64], Tensor[(120), int64], Tensor[(2, 1, 8), float32]) {
  @func_3676(%var_3677) /* ty=(Tensor[(2, ?, 8), bool], Tensor[(3, 4, 11), uint32], Tensor[(132), uint32], Tensor[(4, 10, 3), int64], Tensor[(120), int64], Tensor[(2, 1, 8), float32]) */
}

def @func_3931() -> (Tensor[(2, 1, 8), float32],) {
  %222 = fn () -> (Tensor[(2, 1, 8), float32],) {
    %221 = @func_3918() /* ty=Tensor[(2, 1, 8), float32] */;
    (%221,)
  };
  %222() /* ty=(Tensor[(2, 1, 8), float32],) */
}

def @func_3175() -> (Tensor[(160), float64], Tensor[(4, 10, 3), int64], Tensor[(120), int64]) {
  %223 = @func_2900() /* ty=(Tensor[(240), float32], Tensor[(2, ?, 8), int16], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) */;
  %224 = cast(meta[relay.Constant][10] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
  %225 = cast(meta[relay.Constant][10] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
  %226 = reshape(%224, newshape=[4, 10, 3]) /* ty=Tensor[(4, 10, 3), int64] */;
  %227 = reshape(%225, newshape=[4, 10, 3]) /* ty=Tensor[(4, 10, 3), int64] */;
  %228 = %223.3;
  %229 = @func_1598(%226, %227) /* ty=Tensor[(4, 10, 3), int64] */;
  (%228, %229, meta[relay.Constant][10] /* ty=Tensor[(120), int64] */)
}

def @func_2280() -> Tensor[(2, 1, 8), float64] {
  @func_2278() /* ty=Tensor[(2, 1, 8), float64] */
}

def @func_6004() -> (Tensor[(2, 1, 8), float64],) {
  %232 = fn () -> (Tensor[(2, 1, 8), float64],) {
    %230 = @func_3896() /* ty=(Tensor[(2, 1, 8), float64],) */;
    %231 = %230.0;
    (%231,)
  };
  %232() /* ty=(Tensor[(2, 1, 8), float64],) */
}

def @func_2309() -> (Tensor[(2, 1, 8), float64],) {
  @func_2307() /* ty=(Tensor[(2, 1, 8), float64],) */
}

def @func_1866(%var_1859: Tensor[(2, 2, 11), float64], %var_1860: Tensor[(2, 2, 11), float64]) -> (Tensor[(2, 2, 11), float64],) {
  %233 = cast(%var_1860, dtype="float64") /* ty=Tensor[(2, 2, 11), float64] */;
  %234 = shape_of(%var_1859, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%var_1859, dtype="float64") /* ty=Tensor[(2, 2, 11), float64] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %237 = maximum(%235, %236) /* ty=Tensor[(2, 2, 11), float64] */;
  (%237,)
}

def @func_3742() -> (Tensor[(240), float32], Tensor[(252), int32], Tensor[(252), int32], Tensor[(1755), float32]) {
  %238 = @func_2900() /* ty=(Tensor[(240), float32], Tensor[(2, ?, 8), int16], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) */;
  %239 = cast(meta[relay.Constant][11] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %240 = cast(meta[relay.Constant][12] /* ty=Tensor[(1755), float32] */, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %241 = reshape(%239, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %242 = reshape(%240, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
  %243 = @func_3569(%241, %242) /* ty=(Tensor[(2, 1, 8), float32], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1755), float32]) */;
  %244 = %238.0;
  %245 = %243.2;
  (%244, %245, meta[relay.Constant][11] /* ty=Tensor[(252), int32] */, meta[relay.Constant][12] /* ty=Tensor[(1755), float32] */)
}

def @func_3037(%var_3035: Tensor[(9, 8, 11), uint32]) -> (Tensor[(9, 8, 11), bool],) {
  @func_3034(%var_3035) /* ty=(Tensor[(9, 8, 11), bool],) */
}

def @func_6262(%var_6260: Tensor[(2, 8, 8), float32], %var_6261: Tensor[(11, 2), uint64]) -> (Tensor[(2, 8, 8), uint64], Tensor[(120), int64], Tensor[(11, 2), uint64], Tensor[(2, 8, 8), bool], Tensor[(1, 2, 11), uint64]) {
  %261 = fn (%var_6234: Tensor[(2, 8, 8), float32], %var_6240: Tensor[(11, 2), uint64]) -> (Tensor[(2, 8, 8), uint64], Tensor[(120), int64], Tensor[(11, 2), uint64], Tensor[(2, 8, 8), bool], Tensor[(1, 2, 11), uint64]) {
    %246 = @func_4165() /* ty=Tensor[(2, 1, 8), float32] */;
    %247 = cast(%246, dtype="uint64") /* ty=Tensor[(2, 1, 8), uint64] */;
    %248 = cast(%var_6234, dtype="uint64") /* ty=Tensor[(2, 8, 8), uint64] */;
    %249 = cast(%var_6240, dtype="uint64") /* ty=Tensor[(11, 2), uint64] */;
    %250 = reshape(%249, newshape=[1, 2, 11]) /* ty=Tensor[(1, 2, 11), uint64] */;
    %251 = @func_4323(%250) /* ty=(Tensor[(1, 2, 11), uint64], Tensor[(36), float64], Tensor[(120), int64]) */;
    %252 = cast(%246, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
    %253 = cast(%var_6234, dtype="bool") /* ty=Tensor[(2, 8, 8), bool] */;
    %254 = cast(%var_6240, dtype="uint64") /* ty=Tensor[(11, 2), uint64] */;
    %255 = reshape(%254, newshape=[1, 2, 11]) /* ty=Tensor[(1, 2, 11), uint64] */;
    %256 = @func_4323(%255) /* ty=(Tensor[(1, 2, 11), uint64], Tensor[(36), float64], Tensor[(120), int64]) */;
    %257 = add(%247, %248) /* ty=Tensor[(2, 8, 8), uint64] */;
    %258 = %251.2;
    %259 = equal(%252, %253) /* ty=Tensor[(2, 8, 8), bool] */;
    %260 = %256.0;
    (%257, %258, %var_6240, %259, %260)
  };
  %261(%var_6260, %var_6261) /* ty=(Tensor[(2, 8, 8), uint64], Tensor[(120), int64], Tensor[(11, 2), uint64], Tensor[(2, 8, 8), bool], Tensor[(1, 2, 11), uint64]) */
}

def @func_4578(%var_4507: int8, %var_4508: Tensor[(10, 5, 12), int8]) -> Tensor[(10, 5, 12), float32] {
  %262 = cast(%var_4507, dtype="int8") /* ty=int8 */;
  %263 = cast(%var_4508, dtype="int8") /* ty=Tensor[(10, 5, 12), int8] */;
  %264 = logical_xor(%262, %263) /* ty=Tensor[(10, 5, 12), int8] */;
  %265 = cast(%var_4507, dtype="float32") /* ty=float32 */;
  %266 = cast(%264, dtype="float32") /* ty=Tensor[(10, 5, 12), float32] */;
  divide(%265, %266) /* ty=Tensor[(10, 5, 12), float32] */
}

def @func_4238() -> Tensor[(2, 1, 8), float64] {
  @func_3267() /* ty=Tensor[(2, 1, 8), float64] */
}

def @func_4240() -> Tensor[(2, 1, 8), float64] {
  @func_4238() /* ty=Tensor[(2, 1, 8), float64] */
}

def @func_3303() -> Tensor[(240), float32] {
  %268 = fn () -> Tensor[(240), float32] {
    %267 = @func_2900() /* ty=(Tensor[(240), float32], Tensor[(2, ?, 8), int16], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) */;
    %267.0
  };
  %268() /* ty=Tensor[(240), float32] */
}

def @func_5953(%var_5948: Tensor[(8, 5, 6), int8], %var_5949: Tensor[(8, 5, 6), int8], %var_5950: Tensor[(1024), uint8], %var_5951: Tensor[(3120), uint8], %var_5952: Tensor[(500), float32]) -> (Tensor[(8, 5, 6), int8], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(252, 1755), bool], Tensor[(1755), float64], Tensor[(16, 15, 13), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(500), float32], Tensor[(9, 13, 15), float32], Tensor[(2, 1, 8), float32]) {
  %315 = fn (%var_5838: Tensor[(8, 5, 6), int8], %var_5839: Tensor[(8, 5, 6), int8], %var_5933: Tensor[(1024), uint8], %var_5934: Tensor[(3120), uint8], %var_5936: Tensor[(500), float32]) -> (Tensor[(8, 5, 6), int8], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(252, 1755), bool], Tensor[(1755), float64], Tensor[(16, 15, 13), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(500), float32], Tensor[(9, 13, 15), float32], Tensor[(2, 1, 8), float32]) {
    %269 = cast(%var_5839, dtype="int8") /* ty=Tensor[(8, 5, 6), int8] */;
    %270 = shape_of(%var_5838, dtype="int32") /* ty=Tensor[(3), int32] */;
    %271 = cast(%var_5838, dtype="int8") /* ty=Tensor[(8, 5, 6), int8] */;
    %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %273 = cast(meta[relay.Constant][13] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %274 = reshape(%273, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float64] */;
    %275 = cast(meta[relay.Constant][14] /* ty=Tensor[(1755), float32] */, dtype="bool") /* ty=Tensor[(1755), bool] */;
    %276 = cast(meta[relay.Constant][15] /* ty=Tensor[(252, 1), int32] */, dtype="bool") /* ty=Tensor[(252, 1), bool] */;
    %277 = less(%275, %276) /* ty=Tensor[(252, 1755), bool] */;
    %278 = cast(%277, dtype="bool") /* ty=Tensor[(252, 1755), bool] */;
    %279 = cast(meta[relay.Constant][14] /* ty=Tensor[(1755), float32] */, dtype="bool") /* ty=Tensor[(1755), bool] */;
    %280 = cast(meta[relay.Constant][14] /* ty=Tensor[(1755), float32] */, dtype="float64") /* ty=Tensor[(1755), float64] */;
    %281 = log2(%280) /* ty=Tensor[(1755), float64] */;
    %282 = cast(meta[relay.Constant][15] /* ty=Tensor[(252, 1), int32] */, dtype="int32") /* ty=Tensor[(252, 1), int32] */;
    %283 = cast(meta[relay.Constant][14] /* ty=Tensor[(1755), float32] */, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %284 = reshape(%282, newshape=[252]) /* ty=Tensor[(252), int32] */;
    %285 = reshape(%283, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
    %286 = @func_1341(%284, %285) /* ty=(Tensor[(9, 15, 15), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1755), float32], Tensor[(9, 13, 15), float32]) */;
    %287 = %286.1;
    %288 = cast(%287, dtype="uint32") /* ty=Tensor[(9, 13, 15), uint32] */;
    %289 = shape_of(%281, dtype="int32") /* ty=Tensor[(1), int32] */;
    %290 = cast(%281, dtype="uint32") /* ty=Tensor[(1755), uint32] */;
    %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %292 = bitwise_xor(%290, %291) /* ty=Tensor[(1755), uint32] */;
    %293 = cast(%292, dtype="float64") /* ty=Tensor[(1755), float64] */;
    %294 = cast(%var_5933, dtype="uint8") /* ty=Tensor[(1024), uint8] */;
    %295 = cast(%var_5934, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
    %296 = cast(meta[relay.Constant][16] /* ty=Tensor[(275), uint8] */, dtype="uint8") /* ty=Tensor[(275), uint8] */;
    %297 = cast(%var_5936, dtype="float32") /* ty=Tensor[(500), float32] */;
    %298 = reshape(%294, newshape=[1024]) /* ty=Tensor[(1024), uint8] */;
    %299 = reshape(%295, newshape=[3120]) /* ty=Tensor[(3120), uint8] */;
    %300 = reshape(%296, newshape=[275]) /* ty=Tensor[(275), uint8] */;
    %301 = reshape(%297, newshape=[10, 50]) /* ty=Tensor[(10, 50), float32] */;
    %302 = @func_2626(%298, %299, %300, %301) /* ty=(Tensor[(2, 1, 8), float64], float32, Tensor[(2, 1, 8), float32], Tensor[(16, 15, 13), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(2, 1, 8), float32], Tensor[(10, 5, 10), uint16], Tensor[(10, 50), float32], Tensor[(6, 12, 8), float32]) */;
    %303 = cast(meta[relay.Constant][15] /* ty=Tensor[(252, 1), int32] */, dtype="int32") /* ty=Tensor[(252, 1), int32] */;
    %304 = cast(%287, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
    %305 = reshape(%303, newshape=[4, 7, 9]) /* ty=Tensor[(4, 7, 9), int32] */;
    %306 = reshape(%304, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
    %307 = @func_385(%305, %306) /* ty=(Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), uint16], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), int8], Tensor[(1755), float64]) */;
    %308 = bitwise_xor(%271, %272) /* ty=Tensor[(8, 5, 6), int8] */;
    %309 = @func_1423(%274) /* ty=Tensor[(16, 5, 2), float64] */;
    %310 = greater(%278, %279) /* ty=Tensor[(252, 1755), bool] */;
    %311 = acosh(%293) /* ty=Tensor[(1755), float64] */;
    %312 = %302.3;
    %313 = %307.4;
    %314 = @func_3918() /* ty=Tensor[(2, 1, 8), float32] */;
    (%308, %309, meta[relay.Constant][13] /* ty=Tensor[(160), float64] */, %310, %311, %312, %var_5933, %var_5934, meta[relay.Constant][16] /* ty=Tensor[(275), uint8] */, %var_5936, %313, %314)
  };
  %315(%var_5948, %var_5949, %var_5950, %var_5951, %var_5952) /* ty=(Tensor[(8, 5, 6), int8], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(252, 1755), bool], Tensor[(1755), float64], Tensor[(16, 15, 13), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(500), float32], Tensor[(9, 13, 15), float32], Tensor[(2, 1, 8), float32]) */
}

def @func_2834(%var_2832: Tensor[(8, 4, 11), int16], %var_2833: Tensor[(8, 4, 11), int16]) -> Tensor[(8, 4, 11), bool] {
  %325 = fn (%var_2819: Tensor[(8, 4, 11), int16], %var_2820: Tensor[(8, 4, 11), int16]) -> Tensor[(8, 4, 11), bool] {
    %316 = cast(%var_2820, dtype="int16") /* ty=Tensor[(8, 4, 11), int16] */;
    %317 = shape_of(%var_2819, dtype="int32") /* ty=Tensor[(3), int32] */;
    %318 = cast(%var_2819, dtype="int16") /* ty=Tensor[(8, 4, 11), int16] */;
    %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %320 = right_shift(%318, %319) /* ty=Tensor[(8, 4, 11), int16] */;
    %321 = cast(%320, dtype="bool") /* ty=Tensor[(8, 4, 11), bool] */;
    %322 = shape_of(%var_2820, dtype="int32") /* ty=Tensor[(3), int32] */;
    %323 = cast(%var_2820, dtype="bool") /* ty=Tensor[(8, 4, 11), bool] */;
    %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%323, %324) /* ty=Tensor[(8, 4, 11), bool] */
  };
  %325(%var_2832, %var_2833) /* ty=Tensor[(8, 4, 11), bool] */
}

def @func_1426(%var_1424: Tensor[(16, 5, 2), float64]) -> Tensor[(16, 5, 2), float64] {
  @func_1423(%var_1424) /* ty=Tensor[(16, 5, 2), float64] */
}

def @func_4865(%var_4830: Tensor[(4, 16, 7), float64]) -> (Tensor[(4, 16, 7), int32], Tensor[(4, 16, 7), bool], Tensor[(4, 16, 7), float32]) {
  %326 = cast(%var_4830, dtype="float64") /* ty=Tensor[(4, 16, 7), float64] */;
  %327 = acos(%326) /* ty=Tensor[(4, 16, 7), float64] */;
  %328 = cast(%327, dtype="int32") /* ty=Tensor[(4, 16, 7), int32] */;
  %329 = shape_of(%var_4830, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%var_4830, dtype="int32") /* ty=Tensor[(4, 16, 7), int32] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %332 = cast(%var_4830, dtype="bool") /* ty=Tensor[(4, 16, 7), bool] */;
  %333 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%327, dtype="bool") /* ty=Tensor[(4, 16, 7), bool] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %336 = cast(%var_4830, dtype="float32") /* ty=Tensor[(4, 16, 7), float32] */;
  %337 = minimum(%330, %331) /* ty=Tensor[(4, 16, 7), int32] */;
  %338 = logical_and(%334, %335) /* ty=Tensor[(4, 16, 7), bool] */;
  %339 = sin(%336) /* ty=Tensor[(4, 16, 7), float32] */;
  (%337, %338, %339)
}

def @func_2949(%var_2946: Tensor[(2, 11, 8), float32], %var_2947: Tensor[(275), uint8], %var_2948: Tensor[(500), float32]) -> (Tensor[(2, 11, 8), uint8], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(10, 5, 10), uint16], Tensor[(1024), uint8], Tensor[(156, 20), uint8], Tensor[(275), uint8], Tensor[(500), float32]) {
  %358 = fn (%var_2914: Tensor[(2, 11, 8), float32], %var_2939: Tensor[(275), uint8], %var_2940: Tensor[(500), float32]) -> (Tensor[(2, 11, 8), uint8], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(10, 5, 10), uint16], Tensor[(1024), uint8], Tensor[(156, 20), uint8], Tensor[(275), uint8], Tensor[(500), float32]) {
    %340 = @func_2445() /* ty=(Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) */;
    %341 = %340.1;
    %342 = cast(%341, dtype="uint8") /* ty=Tensor[(2, 1, 8), uint8] */;
    %343 = cast(%var_2914, dtype="uint8") /* ty=Tensor[(2, 11, 8), uint8] */;
    %344 = cast(meta[relay.Constant][17] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %345 = reshape(%344, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float64] */;
    %346 = cast(meta[relay.Constant][18] /* ty=Tensor[(1024), uint8] */, dtype="uint8") /* ty=Tensor[(1024), uint8] */;
    %347 = cast(meta[relay.Constant][19] /* ty=Tensor[(156, 20), uint8] */, dtype="uint8") /* ty=Tensor[(156, 20), uint8] */;
    %348 = cast(%var_2939, dtype="uint8") /* ty=Tensor[(275), uint8] */;
    %349 = cast(%var_2940, dtype="float32") /* ty=Tensor[(500), float32] */;
    %350 = reshape(%346, newshape=[1024]) /* ty=Tensor[(1024), uint8] */;
    %351 = reshape(%347, newshape=[3120]) /* ty=Tensor[(3120), uint8] */;
    %352 = reshape(%348, newshape=[275]) /* ty=Tensor[(275), uint8] */;
    %353 = reshape(%349, newshape=[10, 50]) /* ty=Tensor[(10, 50), float32] */;
    %354 = @func_2626(%350, %351, %352, %353) /* ty=(Tensor[(2, 1, 8), float64], float32, Tensor[(2, 1, 8), float32], Tensor[(16, 15, 13), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(2, 1, 8), float32], Tensor[(10, 5, 10), uint16], Tensor[(10, 50), float32], Tensor[(6, 12, 8), float32]) */;
    %355 = bitwise_and(%342, %343) /* ty=Tensor[(2, 11, 8), uint8] */;
    %356 = @func_1423(%345) /* ty=Tensor[(16, 5, 2), float64] */;
    %357 = %354.8;
    (%355, %356, meta[relay.Constant][17] /* ty=Tensor[(160), float64] */, %357, meta[relay.Constant][18] /* ty=Tensor[(1024), uint8] */, meta[relay.Constant][19] /* ty=Tensor[(156, 20), uint8] */, %var_2939, %var_2940)
  };
  %358(%var_2946, %var_2947, %var_2948) /* ty=(Tensor[(2, 11, 8), uint8], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(10, 5, 10), uint16], Tensor[(1024), uint8], Tensor[(156, 20), uint8], Tensor[(275), uint8], Tensor[(500), float32]) */
}

def @func_4482(%var_4480: Tensor[(250, 2), float32]) -> (Tensor[(2, 1, 8), float32], Tensor[(250, 2), uint64], Tensor[(250, 2), float64]) {
  @func_4479(%var_4480) /* ty=(Tensor[(2, 1, 8), float32], Tensor[(250, 2), uint64], Tensor[(250, 2), float64]) */
}

def @func_5689() -> (Tensor[(2, 1, 8), float32], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(250, 2), float64], Tensor[(500), float32], Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float64]) {
  %371 = fn () -> (Tensor[(2, 1, 8), float32], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(250, 2), float64], Tensor[(500), float32], Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float64]) {
    %359 = @func_3427() /* ty=(Tensor[(2, 1, 8), float32],) */;
    %360 = cast(meta[relay.Constant][20] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %361 = reshape(%360, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float64] */;
    %362 = cast(meta[relay.Constant][21] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
    %363 = reshape(%362, newshape=[250, 2]) /* ty=Tensor[(250, 2), float32] */;
    %364 = @func_4479(%363) /* ty=(Tensor[(2, 1, 8), float32], Tensor[(250, 2), uint64], Tensor[(250, 2), float64]) */;
    %365 = @func_2307() /* ty=(Tensor[(2, 1, 8), float64],) */;
    %366 = %359.0;
    %367 = @func_1423(%361) /* ty=Tensor[(16, 5, 2), float64] */;
    %368 = %364.2;
    %369 = %365.0;
    %370 = @func_3267() /* ty=Tensor[(2, 1, 8), float64] */;
    (%366, %367, meta[relay.Constant][20] /* ty=Tensor[(160), float64] */, %368, meta[relay.Constant][21] /* ty=Tensor[(500), float32] */, %369, %370)
  };
  %371() /* ty=(Tensor[(2, 1, 8), float32], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(250, 2), float64], Tensor[(500), float32], Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float64]) */
}

def @func_4691() -> Tensor[(2, 1, 8), float32] {
  @func_4689() /* ty=Tensor[(2, 1, 8), float32] */
}

def @func_6108() -> (Tensor[(2, ?, 8), int8],) {
  %372 = @func_5582() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %373 = %372.0;
  %374 = @func_2307() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %375 = %374.0;
  %376 = cast(%375, dtype="int8") /* ty=Tensor[(2, 1, 8), int8] */;
  %377 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%373, dtype="int8") /* ty=Tensor[(2, 1, 8), int8] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %380 = logical_xor(%378, %379) /* ty=Tensor[(2, ?, 8), int8] */;
  (%380,)
}

def @func_5791() -> (Tensor[(2, 1, 8), float32], Tensor[(176), float32], Tensor[(13, 13, 16), bool], Tensor[(2704), int8], Tensor[(22), bool], Tensor[(10, 5, 12), float32], int8, Tensor[(1, 600), int8], Tensor[(2, 11, 8), bool]) {
  @func_5789() /* ty=(Tensor[(2, 1, 8), float32], Tensor[(176), float32], Tensor[(13, 13, 16), bool], Tensor[(2704), int8], Tensor[(22), bool], Tensor[(10, 5, 12), float32], int8, Tensor[(1, 600), int8], Tensor[(2, 11, 8), bool]) */
}

def @func_5603() -> (Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float64]) {
  @func_5601() /* ty=(Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float64]) */
}

def @func_3494() -> Tensor[(160), float64] {
  %382 = fn () -> Tensor[(160), float64] {
    %381 = @func_2900() /* ty=(Tensor[(240), float32], Tensor[(2, ?, 8), int16], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) */;
    %381.3
  };
  %382() /* ty=Tensor[(160), float64] */
}

def @func_2416(%var_2414: Tensor[(2, 16, 15), float32], %var_2415: Tensor[(2, 16, 15), float32]) -> (Tensor[(2, 16, 15), float32], Tensor[(2, 16, 15), float64]) {
  @func_2412(%var_2414, %var_2415) /* ty=(Tensor[(2, 16, 15), float32], Tensor[(2, 16, 15), float64]) */
}

def @func_4689() -> Tensor[(2, 1, 8), float32] {
  @func_4165() /* ty=Tensor[(2, 1, 8), float32] */
}

def @func_2646() -> (Tensor[(2, 1, 8), float32],) {
  @func_2644() /* ty=(Tensor[(2, 1, 8), float32],) */
}

def @func_5472(%var_5378: Tensor[(176), float32], %var_5379: Tensor[(275), uint8], %var_5380: Tensor[(500), float32], %var_5431: Tensor[(1, 132), uint32]) -> (Tensor[(2, 1, 8), float32], Tensor[(1024), uint8], Tensor[(176), float32], Tensor[(500), float32], Tensor[(160), float64], Tensor[(250, 2), uint64], Tensor[(1755), float32], Tensor[(1, 132), uint32], Tensor[(2, 1, 8), float64], Tensor[(15, 15, ?), int8], Tensor[(275), uint32], Tensor[(6, 12, 8), float32], float32, Tensor[(156, 20), uint8], Tensor[(250, 2), float32], Tensor[(275), float32]) {
  %383 = cast(%var_5378, dtype="float32") /* ty=Tensor[(176), float32] */;
  %384 = cast(%var_5379, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %385 = cast(%var_5380, dtype="float32") /* ty=Tensor[(500), float32] */;
  %386 = reshape(%383, newshape=[2, 11, 8]) /* ty=Tensor[(2, 11, 8), float32] */;
  %387 = reshape(%384, newshape=[275]) /* ty=Tensor[(275), uint8] */;
  %388 = reshape(%385, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %389 = @func_2945(%386, %387, %388) /* ty=(Tensor[(2, 11, 8), uint8], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(10, 5, 10), uint16], Tensor[(1024), uint8], Tensor[(156, 20), uint8], Tensor[(275), uint8], Tensor[(500), float32]) */;
  %390 = cast(%var_5380, dtype="float32") /* ty=Tensor[(500), float32] */;
  %391 = reshape(%390, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %392 = @func_5166(%391) /* ty=(Tensor[(14, 11, 3), float64], Tensor[(250, 2), uint64], Tensor[(500), float32], Tensor[(14, 11, 3), float64]) */;
  %393 = cast(%var_5431, dtype="uint32") /* ty=Tensor[(1, 132), uint32] */;
  %394 = reshape(%393, newshape=[3, 4, 11]) /* ty=Tensor[(3, 4, 11), uint32] */;
  %395 = @func_1632(%394) /* ty=(Tensor[(3, 4, 11), uint32], Tensor[(1755), float32], Tensor[(3120), uint8]) */;
  %396 = @func_3363() /* ty=(Tensor[(2, 1, 8), float32], Tensor[(15, 15, ?), int8]) */;
  %397 = cast(%var_5379, dtype="float32") /* ty=Tensor[(275), float32] */;
  %398 = log(%397) /* ty=Tensor[(275), float32] */;
  %399 = cast(%var_5379, dtype="int16") /* ty=Tensor[(275), int16] */;
  %400 = shape_of(%398, dtype="int32") /* ty=Tensor[(1), int32] */;
  %401 = cast(%398, dtype="int16") /* ty=Tensor[(275), int16] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?), int16] */;
  %403 = bitwise_xor(%401, %402) /* ty=Tensor[(275), int16] */;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(275), float64] */;
  %405 = asin(%404) /* ty=Tensor[(275), float64] */;
  %406 = cast(%398, dtype="int32") /* ty=Tensor[(275), int32] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(1), int32] */;
  %408 = cast(%405, dtype="int32") /* ty=Tensor[(275), int32] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?), int32] */;
  %410 = add(%408, %409) /* ty=Tensor[(275), int32] */;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(275), float32] */;
  %412 = asinh(%411) /* ty=Tensor[(275), float32] */;
  %413 = cast(%var_5379, dtype="uint32") /* ty=Tensor[(275), uint32] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(1), int32] */;
  %415 = cast(%412, dtype="uint32") /* ty=Tensor[(275), uint32] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %417 = cast(-6.81744f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %418 = reshape(%417, newshape=[]) /* ty=float32 */;
  %419 = @func_1748(%418) /* ty=(Tensor[(6, 12, 8), float32],) */;
  %420 = cast(%var_5378, dtype="float32") /* ty=Tensor[(176), float32] */;
  %421 = cast(%412, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %422 = cast(%var_5380, dtype="float32") /* ty=Tensor[(500), float32] */;
  %423 = reshape(%420, newshape=[2, 11, 8]) /* ty=Tensor[(2, 11, 8), float32] */;
  %424 = reshape(%421, newshape=[275]) /* ty=Tensor[(275), uint8] */;
  %425 = reshape(%422, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %426 = @func_2945(%423, %424, %425) /* ty=(Tensor[(2, 11, 8), uint8], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(10, 5, 10), uint16], Tensor[(1024), uint8], Tensor[(156, 20), uint8], Tensor[(275), uint8], Tensor[(500), float32]) */;
  %427 = cast(meta[relay.Constant][22] /* ty=Tensor[(275), float32] */, dtype="float32") /* ty=Tensor[(275), float32] */;
  %428 = shape_of(%412, dtype="int32") /* ty=Tensor[(1), int32] */;
  %429 = cast(%412, dtype="float32") /* ty=Tensor[(275), float32] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?), float32] */;
  %431 = @func_3918() /* ty=Tensor[(2, 1, 8), float32] */;
  %432 = %389.4;
  %433 = @func_3493() /* ty=Tensor[(160), float64] */;
  %434 = %392.1;
  %435 = %395.1;
  %436 = @func_4238() /* ty=Tensor[(2, 1, 8), float64] */;
  %437 = %396.1;
  %438 = multiply(%415, %416) /* ty=Tensor[(275), uint32] */;
  %439 = %419.0;
  %440 = %426.5;
  %441 = @func_4141() /* ty=Tensor[(250, 2), float32] */;
  %442 = floor_mod(%429, %430) /* ty=Tensor[(275), float32] */;
  (%431, %432, %var_5378, %var_5380, %433, %434, %435, %var_5431, %436, %437, %438, %439, -6.81744f /* ty=float32 */, %440, %441, %442)
}

def @func_2971(%var_2965: Tensor[(2, 7, 8), float32]) -> Tensor[(2, 7, 8), bool] {
  %443 = @func_2252() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %444 = %443.0;
  %445 = cast(%444, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
  %446 = cast(%var_2965, dtype="bool") /* ty=Tensor[(2, 7, 8), bool] */;
  greater_equal(%445, %446) /* ty=Tensor[(2, 7, 8), bool] */
}

def @func_5309(%var_5301: Tensor[(13, 13, 16), int8], %var_5302: Tensor[(13, 13, 16), int8]) -> Tensor[(13, 13, 16), bool] {
  %447 = cast(%var_5302, dtype="bool") /* ty=Tensor[(13, 13, 16), bool] */;
  %448 = shape_of(%var_5301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%var_5301, dtype="bool") /* ty=Tensor[(13, 13, 16), bool] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%449, %450) /* ty=Tensor[(13, 13, 16), bool] */
}

def @func_2703(%var_2701: Tensor[(14, 11, 3), float64], %var_2702: Tensor[(14, 11, 3), float64]) -> Tensor[(14, 11, 3), float64] {
  @func_2699(%var_2701, %var_2702) /* ty=Tensor[(14, 11, 3), float64] */
}

def @func_2901() -> (Tensor[(240), float32], Tensor[(2, ?, 8), int16], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) {
  %465 = fn () -> (Tensor[(240), float32], Tensor[(2, ?, 8), int16], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) {
    %451 = @func_2644() /* ty=(Tensor[(2, 1, 8), float32],) */;
    %452 = %451.0;
    %453 = cast(meta[relay.Constant][23] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %454 = reshape(%453, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), float32] */;
    %455 = @func_2675(%454) /* ty=(Tensor[(2, 15, 8), bool], Tensor[(2, ?, 8), uint64]) */;
    %456 = %455.1;
    %457 = cast(%456, dtype="int16") /* ty=Tensor[(2, ?, 8), int16] */;
    %458 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
    %459 = cast(%452, dtype="int16") /* ty=Tensor[(2, 1, 8), int16] */;
    %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %461 = cast(meta[relay.Constant][24] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %462 = reshape(%461, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float64] */;
    %463 = subtract(%459, %460) /* ty=Tensor[(2, ?, 8), int16] */;
    %464 = @func_1423(%462) /* ty=Tensor[(16, 5, 2), float64] */;
    (meta[relay.Constant][23] /* ty=Tensor[(240), float32] */, %463, %464, meta[relay.Constant][24] /* ty=Tensor[(160), float64] */)
  };
  %465() /* ty=(Tensor[(240), float32], Tensor[(2, ?, 8), int16], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) */
}

def @func_5127(%var_5122: Tensor[(2, 13, 8), float64], %var_5123: Tensor[(448), float64], %var_5124: Tensor[(480), float32], %var_5125: Tensor[(176), float32], %var_5126: Tensor[(11, 25), uint8]) -> (Tensor[(2, 13, 8), int64], Tensor[(2, 1, 8), float32], Tensor[(4, 16, 7), bool], Tensor[(448), float64], Tensor[(2, 16, 15), float32], Tensor[(480), float32], Tensor[(1024), uint8], Tensor[(176), float32], Tensor[(11, 25), uint8], Tensor[(500), float32]) {
  %496 = fn (%var_5075: Tensor[(2, 13, 8), float64], %var_5095: Tensor[(448), float64], %var_5098: Tensor[(480), float32], %var_5110: Tensor[(176), float32], %var_5111: Tensor[(11, 25), uint8]) -> (Tensor[(2, 13, 8), int64], Tensor[(2, 1, 8), float32], Tensor[(4, 16, 7), bool], Tensor[(448), float64], Tensor[(2, 16, 15), float32], Tensor[(480), float32], Tensor[(1024), uint8], Tensor[(176), float32], Tensor[(11, 25), uint8], Tensor[(500), float32]) {
    %466 = @func_3896() /* ty=(Tensor[(2, 1, 8), float64],) */;
    %467 = %466.0;
    %468 = cast(%467, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
    %469 = cast(%var_5075, dtype="bool") /* ty=Tensor[(2, 13, 8), bool] */;
    %470 = equal(%468, %469) /* ty=Tensor[(2, 13, 8), bool] */;
    %471 = cast(%var_5075, dtype="int64") /* ty=Tensor[(2, 13, 8), int64] */;
    %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
    %473 = cast(%470, dtype="int64") /* ty=Tensor[(2, 13, 8), int64] */;
    %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %475 = @func_4927() /* ty=(Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float32]) */;
    %476 = cast(%var_5095, dtype="float64") /* ty=Tensor[(448), float64] */;
    %477 = reshape(%476, newshape=[4, 16, 7]) /* ty=Tensor[(4, 16, 7), float64] */;
    %478 = @func_4865(%477) /* ty=(Tensor[(4, 16, 7), int32], Tensor[(4, 16, 7), bool], Tensor[(4, 16, 7), float32]) */;
    %479 = cast(%var_5098, dtype="float32") /* ty=Tensor[(480), float32] */;
    %480 = cast(%var_5098, dtype="float32") /* ty=Tensor[(480), float32] */;
    %481 = reshape(%479, newshape=[2, 16, 15]) /* ty=Tensor[(2, 16, 15), float32] */;
    %482 = reshape(%480, newshape=[2, 16, 15]) /* ty=Tensor[(2, 16, 15), float32] */;
    %483 = @func_2412(%481, %482) /* ty=(Tensor[(2, 16, 15), float32], Tensor[(2, 16, 15), float64]) */;
    %484 = cast(%var_5110, dtype="float32") /* ty=Tensor[(176), float32] */;
    %485 = cast(%var_5111, dtype="uint8") /* ty=Tensor[(11, 25), uint8] */;
    %486 = cast(meta[relay.Constant][25] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
    %487 = reshape(%484, newshape=[2, 11, 8]) /* ty=Tensor[(2, 11, 8), float32] */;
    %488 = reshape(%485, newshape=[275]) /* ty=Tensor[(275), uint8] */;
    %489 = reshape(%486, newshape=[500]) /* ty=Tensor[(500), float32] */;
    %490 = @func_2945(%487, %488, %489) /* ty=(Tensor[(2, 11, 8), uint8], Tensor[(16, 5, 2), float64], Tensor[(160), float64], Tensor[(10, 5, 10), uint16], Tensor[(1024), uint8], Tensor[(156, 20), uint8], Tensor[(275), uint8], Tensor[(500), float32]) */;
    %491 = bitwise_and(%473, %474) /* ty=Tensor[(2, 13, 8), int64] */;
    %492 = %475.0;
    %493 = %478.1;
    %494 = %483.0;
    %495 = %490.4;
    (%491, %492, %493, %var_5095, %494, %var_5098, %495, %var_5110, %var_5111, meta[relay.Constant][25] /* ty=Tensor[(500), float32] */)
  };
  %496(%var_5122, %var_5123, %var_5124, %var_5125, %var_5126) /* ty=(Tensor[(2, 13, 8), int64], Tensor[(2, 1, 8), float32], Tensor[(4, 16, 7), bool], Tensor[(448), float64], Tensor[(2, 16, 15), float32], Tensor[(480), float32], Tensor[(1024), uint8], Tensor[(176), float32], Tensor[(11, 25), uint8], Tensor[(500), float32]) */
}

def @func_3920() -> Tensor[(2, 1, 8), float32] {
  @func_3918() /* ty=Tensor[(2, 1, 8), float32] */
}

def @func_4323(%var_4306: Tensor[(1, 2, 11), uint64]) -> (Tensor[(1, 2, 11), uint64], Tensor[(36), float64], Tensor[(120), int64]) {
  %497 = cast(meta[relay.Constant][26] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %498 = cast(%var_4306, dtype="uint64") /* ty=Tensor[(1, 2, 11), uint64] */;
  %499 = cast(meta[relay.Constant][27] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
  %500 = reshape(%499, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %501 = @func_2734(%500) /* ty=(Tensor[(2, 1, 8), float32], Tensor[(1, 132), uint32], Tensor[(275), uint8], Tensor[(120), int64], Tensor[(36), float64]) */;
  %502 = logical_xor(%497, %498) /* ty=Tensor[(1, 2, 11), uint64] */;
  %503 = %501.4;
  (%502, %503, meta[relay.Constant][27] /* ty=Tensor[(120), int64] */)
}

def @func_3428() -> (Tensor[(2, 1, 8), float32],) {
  %506 = fn () -> (Tensor[(2, 1, 8), float32],) {
    %504 = @func_2252() /* ty=(Tensor[(2, 1, 8), float32],) */;
    %505 = %504.0;
    (%505,)
  };
  %506() /* ty=(Tensor[(2, 1, 8), float32],) */
}

def @func_5630() -> (Tensor[(250, 2), float32],) {
  %507 = @func_4141() /* ty=Tensor[(250, 2), float32] */;
  (%507,)
}

def @func_5214() -> Tensor[(2, 1, 8), float32] {
  %508 = fn () -> Tensor[(2, 1, 8), float32] {
    @func_4689() /* ty=Tensor[(2, 1, 8), float32] */
  };
  %508() /* ty=Tensor[(2, 1, 8), float32] */
}

def @func_5279(%var_5268: Tensor[(2, 11, 8), float32]) -> (Tensor[(2, 11, 8), int64],) {
  %509 = @func_4689() /* ty=Tensor[(2, 1, 8), float32] */;
  %510 = cast(%509, dtype="int64") /* ty=Tensor[(2, 1, 8), int64] */;
  %511 = cast(%var_5268, dtype="int64") /* ty=Tensor[(2, 11, 8), int64] */;
  %512 = maximum(%510, %511) /* ty=Tensor[(2, 11, 8), int64] */;
  (%512,)
}

def @func_4326(%var_4324: Tensor[(1, 2, 11), uint64]) -> (Tensor[(1, 2, 11), uint64], Tensor[(36), float64], Tensor[(120), int64]) {
  @func_4323(%var_4324) /* ty=(Tensor[(1, 2, 11), uint64], Tensor[(36), float64], Tensor[(120), int64]) */
}

def @func_4479(%var_4470: Tensor[(250, 2), float32]) -> (Tensor[(2, 1, 8), float32], Tensor[(250, 2), uint64], Tensor[(250, 2), float64]) {
  %513 = @func_4141() /* ty=Tensor[(250, 2), float32] */;
  %514 = cast(%var_4470, dtype="uint64") /* ty=Tensor[(250, 2), uint64] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(2), int32] */;
  %516 = cast(%513, dtype="uint64") /* ty=Tensor[(250, 2), uint64] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %518 = cast(%var_4470, dtype="float64") /* ty=Tensor[(250, 2), float64] */;
  %519 = @func_4165() /* ty=Tensor[(2, 1, 8), float32] */;
  %520 = bitwise_and(%516, %517) /* ty=Tensor[(250, 2), uint64] */;
  %521 = asinh(%518) /* ty=Tensor[(250, 2), float64] */;
  (%519, %520, %521)
}

def @func_1601(%var_1599: Tensor[(4, 10, 3), int64], %var_1600: Tensor[(4, 10, 3), int64]) -> Tensor[(4, 10, 3), int64] {
  %526 = fn (%var_1593: Tensor[(4, 10, 3), int64], %var_1594: Tensor[(4, 10, 3), int64]) -> Tensor[(4, 10, 3), int64] {
    %522 = cast(%var_1594, dtype="int64") /* ty=Tensor[(4, 10, 3), int64] */;
    %523 = shape_of(%var_1593, dtype="int32") /* ty=Tensor[(3), int32] */;
    %524 = cast(%var_1593, dtype="int64") /* ty=Tensor[(4, 10, 3), int64] */;
    %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    maximum(%524, %525) /* ty=Tensor[(4, 10, 3), int64] */
  };
  %526(%var_1599, %var_1600) /* ty=Tensor[(4, 10, 3), int64] */
}

def @func_3744() -> (Tensor[(240), float32], Tensor[(252), int32], Tensor[(252), int32], Tensor[(1755), float32]) {
  @func_3742() /* ty=(Tensor[(240), float32], Tensor[(252), int32], Tensor[(252), int32], Tensor[(1755), float32]) */
}

def @func_4166() -> Tensor[(2, 1, 8), float32] {
  %528 = fn () -> Tensor[(2, 1, 8), float32] {
    %527 = @func_3427() /* ty=(Tensor[(2, 1, 8), float32],) */;
    %527.0
  };
  %528() /* ty=Tensor[(2, 1, 8), float32] */
}

def @func_4807() -> (Tensor[(160), float64],) {
  %529 = @func_2900() /* ty=(Tensor[(240), float32], Tensor[(2, ?, 8), int16], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) */;
  %530 = %529.3;
  (%530,)
}

def @func_5169(%var_5167: Tensor[(500), float32]) -> (Tensor[(14, 11, 3), float64], Tensor[(250, 2), uint64], Tensor[(500), float32], Tensor[(14, 11, 3), float64]) {
  @func_5166(%var_5167) /* ty=(Tensor[(14, 11, 3), float64], Tensor[(250, 2), uint64], Tensor[(500), float32], Tensor[(14, 11, 3), float64]) */
}

def @func_4393(%var_4391: Tensor[(16, 5, 2), float64], %var_4392: Tensor[(462), float64]) -> (Tensor[(160), float64], Tensor[(16, 5, 2), float32], Tensor[(14, 11, 3), float64], Tensor[(462), float64], Tensor[(1755), float32]) {
  @func_4389(%var_4391, %var_4392) /* ty=(Tensor[(160), float64], Tensor[(16, 5, 2), float32], Tensor[(14, 11, 3), float64], Tensor[(462), float64], Tensor[(1755), float32]) */
}

def @func_4247() -> (Tensor[(14, 11, 3), float64],) {
  %533 = fn () -> (Tensor[(14, 11, 3), float64],) {
    %531 = @func_4222() /* ty=(Tensor[(2, 1, 8), float64], Tensor[(14, 11, 3), float64], Tensor[(462), float64], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) */;
    %532 = %531.1;
    (%532,)
  };
  %533() /* ty=(Tensor[(14, 11, 3), float64],) */
}

def @func_5583() -> (Tensor[(2, 1, 8), float64],) {
  %536 = fn () -> (Tensor[(2, 1, 8), float64],) {
    %534 = @func_5227() /* ty=(Tensor[(4, 10, 3), int64], Tensor[(2, 1, 8), float64]) */;
    %535 = %534.1;
    (%535,)
  };
  %536() /* ty=(Tensor[(2, 1, 8), float64],) */
}

def @func_2446() -> (Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) {
  %541 = fn () -> (Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) {
    %537 = @func_2252() /* ty=(Tensor[(2, 1, 8), float32],) */;
    %538 = @func_2278() /* ty=Tensor[(2, 1, 8), float64] */;
    %539 = %537.0;
    %540 = @func_2278() /* ty=Tensor[(2, 1, 8), float64] */;
    (%538, %539, %540)
  };
  %541() /* ty=(Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) */
}

def @func_3855(%var_3853: Tensor[(252), int32], %var_3854: Tensor[(1, 1755), float32]) -> (Tensor[(2, 7, 8), bool], Tensor[(28, 4), float32], Tensor[(2, 4, 8), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1, 1755), float32], Tensor[(3120), uint8]) {
  @func_3851(%var_3853, %var_3854) /* ty=(Tensor[(2, 7, 8), bool], Tensor[(28, 4), float32], Tensor[(2, 4, 8), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1, 1755), float32], Tensor[(3120), uint8]) */
}

def @func_4223() -> (Tensor[(2, 1, 8), float64], Tensor[(14, 11, 3), float64], Tensor[(462), float64], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) {
  %553 = fn () -> (Tensor[(2, 1, 8), float64], Tensor[(14, 11, 3), float64], Tensor[(462), float64], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) {
    %542 = @func_2278() /* ty=Tensor[(2, 1, 8), float64] */;
    %543 = cast(%542, dtype="float64") /* ty=Tensor[(2, 1, 8), float64] */;
    %544 = cast(meta[relay.Constant][28] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
    %545 = cast(meta[relay.Constant][28] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
    %546 = reshape(%544, newshape=[14, 11, 3]) /* ty=Tensor[(14, 11, 3), float64] */;
    %547 = reshape(%545, newshape=[14, 11, 3]) /* ty=Tensor[(14, 11, 3), float64] */;
    %548 = cast(meta[relay.Constant][29] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %549 = reshape(%548, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float64] */;
    %550 = sqrt(%543) /* ty=Tensor[(2, 1, 8), float64] */;
    %551 = @func_2699(%546, %547) /* ty=Tensor[(14, 11, 3), float64] */;
    %552 = @func_1423(%549) /* ty=Tensor[(16, 5, 2), float64] */;
    (%550, %551, meta[relay.Constant][28] /* ty=Tensor[(462), float64] */, %552, meta[relay.Constant][29] /* ty=Tensor[(160), float64] */)
  };
  %553() /* ty=(Tensor[(2, 1, 8), float64], Tensor[(14, 11, 3), float64], Tensor[(462), float64], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) */
}

def @func_3676(%var_3655: Tensor[(132), uint32]) -> (Tensor[(2, ?, 8), bool], Tensor[(3, 4, 11), uint32], Tensor[(132), uint32], Tensor[(4, 10, 3), int64], Tensor[(120), int64], Tensor[(2, 1, 8), float32]) {
  %554 = @func_2445() /* ty=(Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) */;
  %555 = %554.1;
  %556 = cast(%555, dtype="float64") /* ty=Tensor[(2, 1, 8), float64] */;
  %557 = acosh(%556) /* ty=Tensor[(2, 1, 8), float64] */;
  %558 = cast(%555, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
  %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%557, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %562 = cast(%var_3655, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %563 = reshape(%562, newshape=[3, 4, 11]) /* ty=Tensor[(3, 4, 11), uint32] */;
  %564 = @func_1632(%563) /* ty=(Tensor[(3, 4, 11), uint32], Tensor[(1755), float32], Tensor[(3120), uint8]) */;
  %565 = cast(meta[relay.Constant][30] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
  %566 = cast(meta[relay.Constant][30] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
  %567 = reshape(%565, newshape=[4, 10, 3]) /* ty=Tensor[(4, 10, 3), int64] */;
  %568 = reshape(%566, newshape=[4, 10, 3]) /* ty=Tensor[(4, 10, 3), int64] */;
  %569 = @func_3363() /* ty=(Tensor[(2, 1, 8), float32], Tensor[(15, 15, ?), int8]) */;
  %570 = not_equal(%560, %561) /* ty=Tensor[(2, ?, 8), bool] */;
  %571 = %564.0;
  %572 = @func_1598(%567, %568) /* ty=Tensor[(4, 10, 3), int64] */;
  %573 = %569.0;
  (%570, %571, %var_3655, %572, meta[relay.Constant][30] /* ty=Tensor[(120), int64] */, %573)
}

def @func_5492() -> (Tensor[(2, 1, 8), float32],) {
  %574 = @func_3427() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %575 = %574.0;
  (%575,)
}

def @func_25(%var_23: Tensor[(9, 13, 15), float32]) -> (Tensor[(9, 13, 15), float32],) {
  @func_22(%var_23) /* ty=(Tensor[(9, 13, 15), float32],) */
}

def @func_2626(%var_2591: Tensor[(1024), uint8], %var_2592: Tensor[(3120), uint8], %var_2593: Tensor[(275), uint8], %var_2605: Tensor[(10, 50), float32]) -> (Tensor[(2, 1, 8), float64], float32, Tensor[(2, 1, 8), float32], Tensor[(16, 15, 13), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(2, 1, 8), float32], Tensor[(10, 5, 10), uint16], Tensor[(10, 50), float32], Tensor[(6, 12, 8), float32]) {
  %576 = @func_2307() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %577 = @func_2445() /* ty=(Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) */;
  %578 = cast(%var_2591, dtype="uint8") /* ty=Tensor[(1024), uint8] */;
  %579 = cast(%var_2592, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %580 = cast(%var_2593, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %581 = reshape(%578, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), uint8] */;
  %582 = reshape(%579, newshape=[780, 4]) /* ty=Tensor[(780, 4), uint8] */;
  %583 = reshape(%580, newshape=[275]) /* ty=Tensor[(275), uint8] */;
  %584 = @func_2181(%581, %582, %583) /* ty=(Tensor[(8, 8, 16), uint8], Tensor[(16, 15, 13), uint8], Tensor[(780, 4), uint8], Tensor[(11, 5, 5), float32], Tensor[(275), uint8]) */;
  %585 = cast(%var_2605, dtype="float32") /* ty=Tensor[(10, 50), float32] */;
  %586 = reshape(%585, newshape=[10, 5, 10]) /* ty=Tensor[(10, 5, 10), float32] */;
  %587 = @func_1791(%586) /* ty=(Tensor[(10, 5, 10), uint16],) */;
  %588 = cast(-0.497572f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %589 = reshape(%588, newshape=[]) /* ty=float32 */;
  %590 = @func_1748(%589) /* ty=(Tensor[(6, 12, 8), float32],) */;
  %591 = %590.0;
  %592 = cast(%591, dtype="float32") /* ty=Tensor[(6, 12, 8), float32] */;
  %593 = %576.0;
  %594 = %577.1;
  %595 = %584.1;
  %596 = @func_2200() /* ty=Tensor[(2, 1, 8), float32] */;
  %597 = %587.0;
  %598 = exp(%592) /* ty=Tensor[(6, 12, 8), float32] */;
  (%593, -0.497572f /* ty=float32 */, %594, %595, %var_2591, %var_2592, %var_2593, %596, %597, %var_2605, %598)
}

def @func_711(%var_710: Tensor[(16, 15, 13), uint8]) -> (Tensor[(16, 15, 13), uint8], Tensor[(11, 5, 5), float32], Tensor[(275, 1), uint8]) {
  %612 = fn (%var_696: Tensor[(16, 15, 13), uint8]) -> (Tensor[(16, 15, 13), uint8], Tensor[(11, 5, 5), float32], Tensor[(275, 1), uint8]) {
    %599 = cast(%var_696, dtype="uint8") /* ty=Tensor[(16, 15, 13), uint8] */;
    %600 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(16, 15, 13), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %601 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 15, 13), uint8] */, dtype="uint8") /* ty=Tensor[(16, 15, 13), uint8] */;
    %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %603 = cast(meta[relay.Constant][32] /* ty=Tensor[(275, 1), uint8] */, dtype="uint8") /* ty=Tensor[(275, 1), uint8] */;
    %604 = cast(meta[relay.Constant][32] /* ty=Tensor[(275, 1), uint8] */, dtype="uint8") /* ty=Tensor[(275, 1), uint8] */;
    %605 = cast(meta[relay.Constant][32] /* ty=Tensor[(275, 1), uint8] */, dtype="uint8") /* ty=Tensor[(275, 1), uint8] */;
    %606 = reshape(%603, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
    %607 = reshape(%604, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
    %608 = reshape(%605, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
    %609 = @func_668(%606, %607, %608) /* ty=(Tensor[(11, 5, 5), float32], Tensor[(11, 5, 5), int8], Tensor[(11, 5, 5), float32]) */;
    %610 = left_shift(%601, %602) /* ty=Tensor[(16, 15, 13), uint8] */;
    %611 = %609.2;
    (%610, %611, meta[relay.Constant][32] /* ty=Tensor[(275, 1), uint8] */)
  };
  %612(%var_710) /* ty=(Tensor[(16, 15, 13), uint8], Tensor[(11, 5, 5), float32], Tensor[(275, 1), uint8]) */
}

def @func_3918() -> Tensor[(2, 1, 8), float32] {
  %613 = @func_3123() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %613.0
}

def @func_22(%var_10: Tensor[(9, 13, 15), float32]) -> (Tensor[(9, 13, 15), float32],) {
  %614 = cast(%var_10, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
  %615 = tan(%614) /* ty=Tensor[(9, 13, 15), float32] */;
  (%615,)
}

def @func_4068(%var_4032: Tensor[(80), float32], %var_4033: float32) -> (Tensor[(2, 1, 8), float64], Tensor[(240), float32], Tensor[(6, 12, 8), float32], Tensor[(80), float32], float32) {
  %616 = @func_2445() /* ty=(Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) */;
  %617 = cast(%var_4032, dtype="float32") /* ty=Tensor[(80), float32] */;
  %618 = cast(%var_4033, dtype="float32") /* ty=float32 */;
  %619 = reshape(%617, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float32] */;
  %620 = reshape(%618, newshape=[]) /* ty=float32 */;
  %621 = @func_2539(%619, %620) /* ty=(Tensor[(6, 12, 8), float32], float32, Tensor[(2, 5, 8), bool], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) */;
  %622 = %616.0;
  %623 = @func_3302() /* ty=Tensor[(240), float32] */;
  %624 = %621.0;
  (%622, %623, %624, %var_4032, %var_4033)
}

def @func_4389(%var_4352: Tensor[(16, 5, 2), float64], %var_4375: Tensor[(462), float64]) -> (Tensor[(160), float64], Tensor[(16, 5, 2), float32], Tensor[(14, 11, 3), float64], Tensor[(462), float64], Tensor[(1755), float32]) {
  %625 = @func_3493() /* ty=Tensor[(160), float64] */;
  %626 = cast(%625, dtype="float64") /* ty=Tensor[(160), float64] */;
  %627 = reshape(%626, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float64] */;
  %628 = @func_1423(%627) /* ty=Tensor[(16, 5, 2), float64] */;
  %629 = cast(%var_4352, dtype="float32") /* ty=Tensor[(16, 5, 2), float32] */;
  %630 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%628, dtype="float32") /* ty=Tensor[(16, 5, 2), float32] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %633 = floor_divide(%631, %632) /* ty=Tensor[(16, 5, 2), float32] */;
  %634 = cast(%633, dtype="float32") /* ty=Tensor[(16, 5, 2), float32] */;
  %635 = cast(%var_4375, dtype="float64") /* ty=Tensor[(462), float64] */;
  %636 = cast(%var_4375, dtype="float64") /* ty=Tensor[(462), float64] */;
  %637 = reshape(%635, newshape=[14, 11, 3]) /* ty=Tensor[(14, 11, 3), float64] */;
  %638 = reshape(%636, newshape=[14, 11, 3]) /* ty=Tensor[(14, 11, 3), float64] */;
  %639 = @func_3742() /* ty=(Tensor[(240), float32], Tensor[(252), int32], Tensor[(252), int32], Tensor[(1755), float32]) */;
  %640 = erf(%634) /* ty=Tensor[(16, 5, 2), float32] */;
  %641 = @func_2699(%637, %638) /* ty=Tensor[(14, 11, 3), float64] */;
  %642 = %639.3;
  (%625, %640, %641, %var_4375, %642)
}

def @func_1635(%var_1633: Tensor[(3, 4, 11), uint32]) -> (Tensor[(3, 4, 11), uint32], Tensor[(1755), float32], Tensor[(3120), uint8]) {
  @func_1632(%var_1633) /* ty=(Tensor[(3, 4, 11), uint32], Tensor[(1755), float32], Tensor[(3120), uint8]) */
}

def @func_798(%var_797: Tensor[(156, 20), uint8]) -> (Tensor[(9, 13, 15), float32], Tensor[(1755), float32], Tensor[(16, 15, 13), uint8], Tensor[(156, 20), uint8], Tensor[(3, ?, 14), uint16], Tensor[(3, 1, 14), float64], Tensor[(3, 1, 14), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32]) {
  %670 = fn (%var_761: Tensor[(156, 20), uint8]) -> (Tensor[(9, 13, 15), float32], Tensor[(1755), float32], Tensor[(16, 15, 13), uint8], Tensor[(156, 20), uint8], Tensor[(3, ?, 14), uint16], Tensor[(3, 1, 14), float64], Tensor[(3, 1, 14), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32]) {
    %643 = cast(meta[relay.Constant][33] /* ty=Tensor[(1755), float32] */, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %644 = reshape(%643, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), float32] */;
    %645 = @func_22(%644) /* ty=(Tensor[(9, 13, 15), float32],) */;
    %646 = cast(%var_761, dtype="uint8") /* ty=Tensor[(156, 20), uint8] */;
    %647 = reshape(%646, newshape=[16, 15, 13]) /* ty=Tensor[(16, 15, 13), uint8] */;
    %648 = @func_709(%647) /* ty=(Tensor[(16, 15, 13), uint8], Tensor[(11, 5, 5), float32], Tensor[(275, 1), uint8]) */;
    %649 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 1, 14), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 14), float64] */;
    %650 = sqrt(%649) /* ty=Tensor[(3, 1, 14), float64] */;
    %651 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 1, 14), float64] */, dtype="uint16") /* ty=Tensor[(3, 1, 14), uint16] */;
    %652 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
    %653 = cast(%650, dtype="uint16") /* ty=Tensor[(3, 1, 14), uint16] */;
    %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %655 = cast(%650, dtype="float32") /* ty=Tensor[(3, 1, 14), float32] */;
    %656 = erf(%655) /* ty=Tensor[(3, 1, 14), float32] */;
    %657 = cast(%656, dtype="float64") /* ty=Tensor[(3, 1, 14), float64] */;
    %658 = cast(%656, dtype="float64") /* ty=Tensor[(3, 1, 14), float64] */;
    %659 = cast(meta[relay.Constant][35] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
    %660 = %645.0;
    %661 = cast(%660, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
    %662 = reshape(%659, newshape=[4, 7, 9]) /* ty=Tensor[(4, 7, 9), int32] */;
    %663 = reshape(%661, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
    %664 = @func_385(%662, %663) /* ty=(Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), uint16], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), int8], Tensor[(1755), float64]) */;
    %665 = %648.0;
    %666 = right_shift(%653, %654) /* ty=Tensor[(3, ?, 14), uint16] */;
    %667 = tan(%657) /* ty=Tensor[(3, 1, 14), float64] */;
    %668 = cosh(%658) /* ty=Tensor[(3, 1, 14), float64] */;
    %669 = %664.5;
    (%660, meta[relay.Constant][33] /* ty=Tensor[(1755), float32] */, %665, %var_761, %666, %667, %668, %669, meta[relay.Constant][35] /* ty=Tensor[(252), int32] */)
  };
  %670(%var_797) /* ty=(Tensor[(9, 13, 15), float32], Tensor[(1755), float32], Tensor[(16, 15, 13), uint8], Tensor[(156, 20), uint8], Tensor[(3, ?, 14), uint16], Tensor[(3, 1, 14), float64], Tensor[(3, 1, 14), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32]) */
}

def @func_5370(%var_5368: Tensor[(2, 1, 8), float32], %var_5369: Tensor[(252), int32]) -> (Tensor[(2, ?, 8), uint16], Tensor[(9, 15, 15), float64], Tensor[(252), int32], Tensor[(1755, 1), float32], Tensor[(240), float32]) {
  @func_5366(%var_5368, %var_5369) /* ty=(Tensor[(2, ?, 8), uint16], Tensor[(9, 15, 15), float64], Tensor[(252), int32], Tensor[(1755, 1), float32], Tensor[(240), float32]) */
}

def @func_2412(%var_2366: Tensor[(2, 16, 15), float32], %var_2367: Tensor[(2, 16, 15), float32]) -> (Tensor[(2, 16, 15), float32], Tensor[(2, 16, 15), float64]) {
  %671 = cast(%var_2367, dtype="float32") /* ty=Tensor[(2, 16, 15), float32] */;
  %672 = shape_of(%var_2366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%var_2366, dtype="float32") /* ty=Tensor[(2, 16, 15), float32] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %675 = cast(%var_2367, dtype="float32") /* ty=Tensor[(2, 16, 15), float32] */;
  %676 = sinh(%675) /* ty=Tensor[(2, 16, 15), float32] */;
  %677 = cast(%676, dtype="float64") /* ty=Tensor[(2, 16, 15), float64] */;
  %678 = floor_divide(%673, %674) /* ty=Tensor[(2, 16, 15), float32] */;
  %679 = log(%677) /* ty=Tensor[(2, 16, 15), float64] */;
  (%678, %679)
}

def @func_4631() -> (Tensor[(2, ?, 8), float32],) {
  %687 = fn () -> (Tensor[(2, ?, 8), float32],) {
    %680 = @func_2278() /* ty=Tensor[(2, 1, 8), float64] */;
    %681 = @func_3918() /* ty=Tensor[(2, 1, 8), float32] */;
    %682 = cast(%681, dtype="float32") /* ty=Tensor[(2, 1, 8), float32] */;
    %683 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
    %684 = cast(%680, dtype="float32") /* ty=Tensor[(2, 1, 8), float32] */;
    %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %686 = floor_mod(%684, %685) /* ty=Tensor[(2, ?, 8), float32] */;
    (%686,)
  };
  %687() /* ty=(Tensor[(2, ?, 8), float32],) */
}

def @func_672(%var_669: Tensor[(11, 5, 5), uint8], %var_670: Tensor[(11, 5, 5), uint8], %var_671: Tensor[(11, 5, 5), uint8]) -> (Tensor[(11, 5, 5), float32], Tensor[(11, 5, 5), int8], Tensor[(11, 5, 5), float32]) {
  %708 = fn (%var_640: Tensor[(11, 5, 5), uint8], %var_641: Tensor[(11, 5, 5), uint8], %var_658: Tensor[(11, 5, 5), uint8]) -> (Tensor[(11, 5, 5), float32], Tensor[(11, 5, 5), int8], Tensor[(11, 5, 5), float32]) {
    %688 = cast(%var_641, dtype="bool") /* ty=Tensor[(11, 5, 5), bool] */;
    %689 = shape_of(%var_640, dtype="int32") /* ty=Tensor[(3), int32] */;
    %690 = cast(%var_640, dtype="bool") /* ty=Tensor[(11, 5, 5), bool] */;
    %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %692 = not_equal(%690, %691) /* ty=Tensor[(11, 5, 5), bool] */;
    %693 = cast(%692, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
    %694 = shape_of(%var_640, dtype="int32") /* ty=Tensor[(3), int32] */;
    %695 = cast(%var_640, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
    %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %697 = cast(%var_658, dtype="int8") /* ty=Tensor[(11, 5, 5), int8] */;
    %698 = shape_of(%var_640, dtype="int32") /* ty=Tensor[(3), int32] */;
    %699 = cast(%var_640, dtype="int8") /* ty=Tensor[(11, 5, 5), int8] */;
    %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %701 = cast(meta[relay.Constant][36] /* ty=Tensor[(11, 5, 5), uint8] */, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
    %702 = shape_of(%var_640, dtype="int32") /* ty=Tensor[(3), int32] */;
    %703 = cast(%var_640, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
    %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %705 = divide(%695, %696) /* ty=Tensor[(11, 5, 5), float32] */;
    %706 = bitwise_and(%699, %700) /* ty=Tensor[(11, 5, 5), int8] */;
    %707 = floor_mod(%703, %704) /* ty=Tensor[(11, 5, 5), float32] */;
    (%705, %706, %707)
  };
  %708(%var_669, %var_670, %var_671) /* ty=(Tensor[(11, 5, 5), float32], Tensor[(11, 5, 5), int8], Tensor[(11, 5, 5), float32]) */
}

def @func_5632() -> (Tensor[(250, 2), float32],) {
  @func_5630() /* ty=(Tensor[(250, 2), float32],) */
}

def @func_4929() -> (Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float32]) {
  @func_4927() /* ty=(Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float32]) */
}

def @func_4993(%var_4991: Tensor[(2, 9, 8), float64], %var_4992: Tensor[(44), float64]) -> (Tensor[(2, 1, 8), float64], Tensor[(2, 9, 8), uint16], Tensor[(2, 2, 11), float64], Tensor[(44), float64]) {
  @func_4989(%var_4991, %var_4992) /* ty=(Tensor[(2, 1, 8), float64], Tensor[(2, 9, 8), uint16], Tensor[(2, 2, 11), float64], Tensor[(44), float64]) */
}

def @func_5228() -> (Tensor[(4, 10, 3), int64], Tensor[(2, 1, 8), float64]) {
  %713 = fn () -> (Tensor[(4, 10, 3), int64], Tensor[(2, 1, 8), float64]) {
    %709 = @func_3175() /* ty=(Tensor[(160), float64], Tensor[(4, 10, 3), int64], Tensor[(120), int64]) */;
    %710 = @func_3896() /* ty=(Tensor[(2, 1, 8), float64],) */;
    %711 = %709.1;
    %712 = %710.0;
    (%711, %712)
  };
  %713() /* ty=(Tensor[(4, 10, 3), int64], Tensor[(2, 1, 8), float64]) */
}

def @func_2307() -> (Tensor[(2, 1, 8), float64],) {
  %714 = @func_2278() /* ty=Tensor[(2, 1, 8), float64] */;
  (%714,)
}

def @func_4989(%var_4960: Tensor[(2, 9, 8), float64], %var_4985: Tensor[(44), float64]) -> (Tensor[(2, 1, 8), float64], Tensor[(2, 9, 8), uint16], Tensor[(2, 2, 11), float64], Tensor[(44), float64]) {
  %715 = @func_2307() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %716 = @func_3267() /* ty=Tensor[(2, 1, 8), float64] */;
  %717 = cast(%716, dtype="uint16") /* ty=Tensor[(2, 1, 8), uint16] */;
  %718 = cast(%var_4960, dtype="uint16") /* ty=Tensor[(2, 9, 8), uint16] */;
  %719 = cast(%var_4985, dtype="float64") /* ty=Tensor[(44), float64] */;
  %720 = cast(%var_4985, dtype="float64") /* ty=Tensor[(44), float64] */;
  %721 = reshape(%719, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), float64] */;
  %722 = reshape(%720, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), float64] */;
  %723 = @func_1866(%721, %722) /* ty=(Tensor[(2, 2, 11), float64],) */;
  %724 = %715.0;
  %725 = right_shift(%717, %718) /* ty=Tensor[(2, 9, 8), uint16] */;
  %726 = %723.0;
  (%724, %725, %726, %var_4985)
}

def @func_6196() -> (Tensor[(2, 1, 8), float32],) {
  @func_6194() /* ty=(Tensor[(2, 1, 8), float32],) */
}

def @func_1793(%var_1792: Tensor[(10, 5, 10), float32]) -> (Tensor[(10, 5, 10), uint16],) {
  %734 = fn (%var_1771: Tensor[(10, 5, 10), float32]) -> (Tensor[(10, 5, 10), uint16],) {
    %727 = cast(%var_1771, dtype="float32") /* ty=Tensor[(10, 5, 10), float32] */;
    %728 = sinh(%727) /* ty=Tensor[(10, 5, 10), float32] */;
    %729 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 5, 10), float32] */, dtype="uint16") /* ty=Tensor[(10, 5, 10), uint16] */;
    %730 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
    %731 = cast(%728, dtype="uint16") /* ty=Tensor[(10, 5, 10), uint16] */;
    %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %733 = bitwise_and(%731, %732) /* ty=Tensor[(10, 5, 10), uint16] */;
    (%733,)
  };
  %734(%var_1792) /* ty=(Tensor[(10, 5, 10), uint16],) */
}

def @func_3364() -> (Tensor[(2, 1, 8), float32], Tensor[(15, 15, ?), int8]) {
  %743 = fn () -> (Tensor[(2, 1, 8), float32], Tensor[(15, 15, ?), int8]) {
    %735 = cast(meta[relay.Constant][38] /* ty=Tensor[(15, 15, 1), float32] */, dtype="float32") /* ty=Tensor[(15, 15, 1), float32] */;
    %736 = rsqrt(%735) /* ty=Tensor[(15, 15, 1), float32] */;
    %737 = cast(%736, dtype="int8") /* ty=Tensor[(15, 15, 1), int8] */;
    %738 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(15, 15, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %739 = cast(meta[relay.Constant][38] /* ty=Tensor[(15, 15, 1), float32] */, dtype="int8") /* ty=Tensor[(15, 15, 1), int8] */;
    %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %741 = @func_2200() /* ty=Tensor[(2, 1, 8), float32] */;
    %742 = subtract(%739, %740) /* ty=Tensor[(15, 15, ?), int8] */;
    (%741, %742)
  };
  %743() /* ty=(Tensor[(2, 1, 8), float32], Tensor[(15, 15, ?), int8]) */
}

def @func_1423(%var_1409: Tensor[(16, 5, 2), float64]) -> Tensor[(16, 5, 2), float64] {
  %744 = cast(%var_1409, dtype="float64") /* ty=Tensor[(16, 5, 2), float64] */;
  acosh(%744) /* ty=Tensor[(16, 5, 2), float64] */
}

def @func_6194() -> (Tensor[(2, 1, 8), float32],) {
  %745 = @func_4165() /* ty=Tensor[(2, 1, 8), float32] */;
  (%745,)
}

def @func_3773() -> (Tensor[(15, 15, ?), int8],) {
  %748 = fn () -> (Tensor[(15, 15, ?), int8],) {
    %746 = @func_3363() /* ty=(Tensor[(2, 1, 8), float32], Tensor[(15, 15, ?), int8]) */;
    %747 = %746.1;
    (%747,)
  };
  %748() /* ty=(Tensor[(15, 15, ?), int8],) */
}

def @func_2974(%var_2972: Tensor[(2, 7, 8), float32]) -> Tensor[(2, 7, 8), bool] {
  @func_2971(%var_2972) /* ty=Tensor[(2, 7, 8), bool] */
}

def @func_3177() -> (Tensor[(160), float64], Tensor[(4, 10, 3), int64], Tensor[(120), int64]) {
  @func_3175() /* ty=(Tensor[(160), float64], Tensor[(4, 10, 3), int64], Tensor[(120), int64]) */
}

def @func_4868(%var_4866: Tensor[(4, 16, 7), float64]) -> (Tensor[(4, 16, 7), int32], Tensor[(4, 16, 7), bool], Tensor[(4, 16, 7), float32]) {
  @func_4865(%var_4866) /* ty=(Tensor[(4, 16, 7), int32], Tensor[(4, 16, 7), bool], Tensor[(4, 16, 7), float32]) */
}

def @func_2804() -> Tensor[(2, 1, 8), float32] {
  @func_2802() /* ty=Tensor[(2, 1, 8), float32] */
}

def @func_6079(%var_6077: Tensor[(2, 9, 8), float64]) -> (Tensor[(2, 9, 8), uint16],) {
  @func_6076(%var_6077) /* ty=(Tensor[(2, 9, 8), uint16],) */
}

def @func_2632(%var_2628: Tensor[(1024), uint8], %var_2629: Tensor[(3120), uint8], %var_2630: Tensor[(275), uint8], %var_2631: Tensor[(10, 50), float32]) -> (Tensor[(2, 1, 8), float64], float32, Tensor[(2, 1, 8), float32], Tensor[(16, 15, 13), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(2, 1, 8), float32], Tensor[(10, 5, 10), uint16], Tensor[(10, 50), float32], Tensor[(6, 12, 8), float32]) {
  @func_2626(%var_2628, %var_2629, %var_2630, %var_2631) /* ty=(Tensor[(2, 1, 8), float64], float32, Tensor[(2, 1, 8), float32], Tensor[(16, 15, 13), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(2, 1, 8), float32], Tensor[(10, 5, 10), uint16], Tensor[(10, 50), float32], Tensor[(6, 12, 8), float32]) */
}

def @func_2201() -> Tensor[(2, 1, 8), float32] {
  %750 = fn () -> Tensor[(2, 1, 8), float32] {
    %749 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 1, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 1, 8), float32] */;
    atan(%749) /* ty=Tensor[(2, 1, 8), float32] */
  };
  %750() /* ty=Tensor[(2, 1, 8), float32] */
}

def @func_1750(%var_1749: float32) -> (Tensor[(6, 12, 8), float32],) {
  %754 = fn (%var_1738: float32) -> (Tensor[(6, 12, 8), float32],) {
    %751 = cast(%var_1738, dtype="float32") /* ty=float32 */;
    %752 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 12, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 8), float32] */;
    %753 = multiply(%751, %752) /* ty=Tensor[(6, 12, 8), float32] */;
    (%753,)
  };
  %754(%var_1749) /* ty=(Tensor[(6, 12, 8), float32],) */
}

def @func_3342() -> (Tensor[(240), float32], Tensor[(8, 8, 16), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(10, 5, 10), uint16], Tensor[(250, 2), float32]) {
  %769 = fn () -> (Tensor[(240), float32], Tensor[(8, 8, 16), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(10, 5, 10), uint16], Tensor[(250, 2), float32]) {
    %755 = @func_2900() /* ty=(Tensor[(240), float32], Tensor[(2, ?, 8), int16], Tensor[(16, 5, 2), float64], Tensor[(160), float64]) */;
    %756 = cast(meta[relay.Constant][41] /* ty=Tensor[(1024), uint8] */, dtype="uint8") /* ty=Tensor[(1024), uint8] */;
    %757 = cast(meta[relay.Constant][42] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
    %758 = cast(meta[relay.Constant][43] /* ty=Tensor[(275), uint8] */, dtype="uint8") /* ty=Tensor[(275), uint8] */;
    %759 = reshape(%756, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), uint8] */;
    %760 = reshape(%757, newshape=[780, 4]) /* ty=Tensor[(780, 4), uint8] */;
    %761 = reshape(%758, newshape=[275]) /* ty=Tensor[(275), uint8] */;
    %762 = @func_2181(%759, %760, %761) /* ty=(Tensor[(8, 8, 16), uint8], Tensor[(16, 15, 13), uint8], Tensor[(780, 4), uint8], Tensor[(11, 5, 5), float32], Tensor[(275), uint8]) */;
    %763 = cast(meta[relay.Constant][44] /* ty=Tensor[(250, 2), float32] */, dtype="float32") /* ty=Tensor[(250, 2), float32] */;
    %764 = reshape(%763, newshape=[10, 5, 10]) /* ty=Tensor[(10, 5, 10), float32] */;
    %765 = @func_1791(%764) /* ty=(Tensor[(10, 5, 10), uint16],) */;
    %766 = %755.0;
    %767 = %762.0;
    %768 = %765.0;
    (%766, %767, meta[relay.Constant][41] /* ty=Tensor[(1024), uint8] */, meta[relay.Constant][42] /* ty=Tensor[(3120), uint8] */, meta[relay.Constant][43] /* ty=Tensor[(275), uint8] */, %768, meta[relay.Constant][44] /* ty=Tensor[(250, 2), float32] */)
  };
  %769() /* ty=(Tensor[(240), float32], Tensor[(8, 8, 16), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(10, 5, 10), uint16], Tensor[(250, 2), float32]) */
}

def @func_3851(%var_3839: Tensor[(252), int32], %var_3840: Tensor[(1, 1755), float32]) -> (Tensor[(2, 7, 8), bool], Tensor[(28, 4), float32], Tensor[(2, 4, 8), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1, 1755), float32], Tensor[(3120), uint8]) {
  %770 = cast(meta[relay.Constant][45] /* ty=Tensor[(28, 4), float32] */, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
  %771 = reshape(%770, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
  %772 = @func_3427() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %773 = %772.0;
  %774 = cast(%773, dtype="float64") /* ty=Tensor[(2, 1, 8), float64] */;
  %775 = cos(%774) /* ty=Tensor[(2, 1, 8), float64] */;
  %776 = cast(%775, dtype="float64") /* ty=Tensor[(2, 1, 8), float64] */;
  %777 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 4, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 4, 8), float64] */;
  %778 = cast(%var_3839, dtype="int32") /* ty=Tensor[(252), int32] */;
  %779 = cast(%var_3840, dtype="float32") /* ty=Tensor[(1, 1755), float32] */;
  %780 = reshape(%778, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %781 = reshape(%779, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
  %782 = @func_1341(%780, %781) /* ty=(Tensor[(9, 15, 15), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1755), float32], Tensor[(9, 13, 15), float32]) */;
  %783 = @func_3341() /* ty=(Tensor[(240), float32], Tensor[(8, 8, 16), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(10, 5, 10), uint16], Tensor[(250, 2), float32]) */;
  %784 = @func_2971(%771) /* ty=Tensor[(2, 7, 8), bool] */;
  %785 = floor_divide(%776, %777) /* ty=Tensor[(2, 4, 8), float64] */;
  %786 = %782.1;
  %787 = %783.3;
  (%784, meta[relay.Constant][45] /* ty=Tensor[(28, 4), float32] */, %785, %786, %var_3839, %var_3840, %787)
}

def @func_4072(%var_4070: Tensor[(80), float32], %var_4071: float32) -> (Tensor[(2, 1, 8), float64], Tensor[(240), float32], Tensor[(6, 12, 8), float32], Tensor[(80), float32], float32) {
  @func_4068(%var_4070, %var_4071) /* ty=(Tensor[(2, 1, 8), float64], Tensor[(240), float32], Tensor[(6, 12, 8), float32], Tensor[(80), float32], float32) */
}

def @func_6274() -> (Tensor[(15, 15, ?), int8],) {
  %788 = @func_3772() /* ty=(Tensor[(15, 15, ?), int8],) */;
  %789 = %788.0;
  (%789,)
}

def @func_6276() -> (Tensor[(15, 15, ?), int8],) {
  @func_6274() /* ty=(Tensor[(15, 15, ?), int8],) */
}

def @func_5313(%var_5311: Tensor[(13, 13, 16), int8], %var_5312: Tensor[(13, 13, 16), int8]) -> Tensor[(13, 13, 16), bool] {
  @func_5309(%var_5311, %var_5312) /* ty=Tensor[(13, 13, 16), bool] */
}

def @func_2677(%var_2676: Tensor[(2, 15, 8), float32]) -> (Tensor[(2, 15, 8), bool], Tensor[(2, ?, 8), uint64]) {
  %802 = fn (%var_2659: Tensor[(2, 15, 8), float32]) -> (Tensor[(2, 15, 8), bool], Tensor[(2, ?, 8), uint64]) {
    %790 = @func_2252() /* ty=(Tensor[(2, 1, 8), float32],) */;
    %791 = %790.0;
    %792 = cast(%791, dtype="bool") /* ty=Tensor[(2, 1, 8), bool] */;
    %793 = cast(%var_2659, dtype="bool") /* ty=Tensor[(2, 15, 8), bool] */;
    %794 = @func_2307() /* ty=(Tensor[(2, 1, 8), float64],) */;
    %795 = %794.0;
    %796 = cast(%791, dtype="uint64") /* ty=Tensor[(2, 1, 8), uint64] */;
    %797 = shape_of(%795, dtype="int32") /* ty=Tensor[(3), int32] */;
    %798 = cast(%795, dtype="uint64") /* ty=Tensor[(2, 1, 8), uint64] */;
    %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %800 = not_equal(%792, %793) /* ty=Tensor[(2, 15, 8), bool] */;
    %801 = add(%798, %799) /* ty=Tensor[(2, ?, 8), uint64] */;
    (%800, %801)
  };
  %802(%var_2676) /* ty=(Tensor[(2, 15, 8), bool], Tensor[(2, ?, 8), uint64]) */
}

def @func_6110() -> (Tensor[(2, ?, 8), int8],) {
  @func_6108() /* ty=(Tensor[(2, ?, 8), int8],) */
}

def @func_2644() -> (Tensor[(2, 1, 8), float32],) {
  %803 = @func_2445() /* ty=(Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float64]) */;
  %804 = %803.1;
  (%804,)
}

def @func_3268() -> Tensor[(2, 1, 8), float64] {
  %805 = fn () -> Tensor[(2, 1, 8), float64] {
    @func_2278() /* ty=Tensor[(2, 1, 8), float64] */
  };
  %805() /* ty=Tensor[(2, 1, 8), float64] */
}

def @func_2254() -> (Tensor[(2, 1, 8), float32],) {
  @func_2252() /* ty=(Tensor[(2, 1, 8), float32],) */
}

def @func_2802() -> Tensor[(2, 1, 8), float32] {
  @func_2200() /* ty=Tensor[(2, 1, 8), float32] */
}

def @func_3572(%var_3570: Tensor[(252), int32], %var_3571: Tensor[(1755), float32]) -> (Tensor[(2, 1, 8), float32], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1755), float32]) {
  %813 = fn (%var_3555: Tensor[(252), int32], %var_3556: Tensor[(1755), float32]) -> (Tensor[(2, 1, 8), float32], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1755), float32]) {
    %806 = cast(%var_3555, dtype="int32") /* ty=Tensor[(252), int32] */;
    %807 = cast(%var_3556, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %808 = reshape(%806, newshape=[4, 7, 9]) /* ty=Tensor[(4, 7, 9), int32] */;
    %809 = reshape(%807, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
    %810 = @func_385(%808, %809) /* ty=(Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), uint16], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), int8], Tensor[(1755), float64]) */;
    %811 = @func_2802() /* ty=Tensor[(2, 1, 8), float32] */;
    %812 = %810.1;
    (%811, %812, %var_3555, %var_3556)
  };
  %813(%var_3570, %var_3571) /* ty=(Tensor[(2, 1, 8), float32], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1755), float32]) */
}

def @func_5601() -> (Tensor[(2, 1, 8), float64], Tensor[(2, 1, 8), float64]) {
  %814 = @func_2307() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %815 = @func_2278() /* ty=Tensor[(2, 1, 8), float64] */;
  %816 = %814.0;
  (%815, %816)
}

def @func_1632(%var_1621: Tensor[(3, 4, 11), uint32]) -> (Tensor[(3, 4, 11), uint32], Tensor[(1755), float32], Tensor[(3120), uint8]) {
  %817 = cast(%var_1621, dtype="uint32") /* ty=Tensor[(3, 4, 11), uint32] */;
  %818 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(3, 4, 11), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %819 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 4, 11), uint32] */, dtype="uint32") /* ty=Tensor[(3, 4, 11), uint32] */;
  %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %821 = cast(meta[relay.Constant][48] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %822 = reshape(%821, newshape=[156, 20]) /* ty=Tensor[(156, 20), uint8] */;
  %823 = @func_796(%822) /* ty=(Tensor[(9, 13, 15), float32], Tensor[(1755), float32], Tensor[(16, 15, 13), uint8], Tensor[(156, 20), uint8], Tensor[(3, ?, 14), uint16], Tensor[(3, 1, 14), float64], Tensor[(3, 1, 14), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32]) */;
  %824 = multiply(%819, %820) /* ty=Tensor[(3, 4, 11), uint32] */;
  %825 = %823.1;
  (%824, %825, meta[relay.Constant][48] /* ty=Tensor[(3120), uint8] */)
}

def @func_5478(%var_5474: Tensor[(176), float32], %var_5475: Tensor[(275), uint8], %var_5476: Tensor[(500), float32], %var_5477: Tensor[(1, 132), uint32]) -> (Tensor[(2, 1, 8), float32], Tensor[(1024), uint8], Tensor[(176), float32], Tensor[(500), float32], Tensor[(160), float64], Tensor[(250, 2), uint64], Tensor[(1755), float32], Tensor[(1, 132), uint32], Tensor[(2, 1, 8), float64], Tensor[(15, 15, ?), int8], Tensor[(275), uint32], Tensor[(6, 12, 8), float32], float32, Tensor[(156, 20), uint8], Tensor[(250, 2), float32], Tensor[(275), float32]) {
  @func_5472(%var_5474, %var_5475, %var_5476, %var_5477) /* ty=(Tensor[(2, 1, 8), float32], Tensor[(1024), uint8], Tensor[(176), float32], Tensor[(500), float32], Tensor[(160), float64], Tensor[(250, 2), uint64], Tensor[(1755), float32], Tensor[(1, 132), uint32], Tensor[(2, 1, 8), float64], Tensor[(15, 15, ?), int8], Tensor[(275), uint32], Tensor[(6, 12, 8), float32], float32, Tensor[(156, 20), uint8], Tensor[(250, 2), float32], Tensor[(275), float32]) */
}

def @func_2252() -> (Tensor[(2, 1, 8), float32],) {
  %826 = @func_2200() /* ty=Tensor[(2, 1, 8), float32] */;
  (%826,)
}

def @func_4927() -> (Tensor[(2, 1, 8), float32], Tensor[(2, 1, 8), float32]) {
  %827 = @func_3896() /* ty=(Tensor[(2, 1, 8), float64],) */;
  %828 = %827.0;
  %829 = cast(%828, dtype="float32") /* ty=Tensor[(2, 1, 8), float32] */;
  %830 = @func_2644() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %831 = tan(%829) /* ty=Tensor[(2, 1, 8), float32] */;
  %832 = %830.0;
  (%831, %832)
}

def @func_5789() -> (Tensor[(2, 1, 8), float32], Tensor[(176), float32], Tensor[(13, 13, 16), bool], Tensor[(2704), int8], Tensor[(22), bool], Tensor[(10, 5, 12), float32], int8, Tensor[(1, 600), int8], Tensor[(2, 11, 8), bool]) {
  %833 = @func_5492() /* ty=(Tensor[(2, 1, 8), float32],) */;
  %834 = cast(meta[relay.Constant][50] /* ty=Tensor[(2704), int8] */, dtype="int8") /* ty=Tensor[(2704), int8] */;
  %835 = cast(meta[relay.Constant][50] /* ty=Tensor[(2704), int8] */, dtype="int8") /* ty=Tensor[(2704), int8] */;
  %836 = reshape(%834, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), int8] */;
  %837 = reshape(%835, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), int8] */;
  %838 = cast(meta[relay.Constant][51] /* ty=Tensor[(22), uint64] */, dtype="uint64") /* ty=Tensor[(22), uint64] */;
  %839 = reshape(%838, newshape=[1, 2, 11]) /* ty=Tensor[(1, 2, 11), uint64] */;
  %840 = @func_4323(%839) /* ty=(Tensor[(1, 2, 11), uint64], Tensor[(36), float64], Tensor[(120), int64]) */;
  %841 = %840.0;
  %842 = cast(%841, dtype="bool") /* ty=Tensor[(1, 2, 11), bool] */;
  %843 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(22), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %844 = cast(meta[relay.Constant][51] /* ty=Tensor[(22), uint64] */, dtype="bool") /* ty=Tensor[(22), bool] */;
  %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?), bool] */;
  %846 = cast(meta[relay.Constant][52] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %847 = cast(meta[relay.Constant][53] /* ty=Tensor[(1, 600), int8] */, dtype="int8") /* ty=Tensor[(1, 600), int8] */;
  %848 = reshape(%846, newshape=[]) /* ty=int8 */;
  %849 = reshape(%847, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), int8] */;
  %850 = cast(meta[relay.Constant][49] /* ty=Tensor[(176), float32] */, dtype="float32") /* ty=Tensor[(176), float32] */;
  %851 = reshape(%850, newshape=[2, 11, 8]) /* ty=Tensor[(2, 11, 8), float32] */;
  %852 = @func_5279(%851) /* ty=(Tensor[(2, 11, 8), int64],) */;
  %853 = %852.0;
  %854 = cast(%853, dtype="float64") /* ty=Tensor[(2, 11, 8), float64] */;
  %855 = acos(%854) /* ty=Tensor[(2, 11, 8), float64] */;
  %856 = cast(%853, dtype="bool") /* ty=Tensor[(2, 11, 8), bool] */;
  %857 = shape_of(%855, dtype="int32") /* ty=Tensor[(3), int32] */;
  %858 = cast(%855, dtype="bool") /* ty=Tensor[(2, 11, 8), bool] */;
  %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %860 = %833.0;
  %861 = @func_5309(%836, %837) /* ty=Tensor[(13, 13, 16), bool] */;
  %862 = less_equal(%844, %845) /* ty=Tensor[(22), bool] */;
  %863 = @func_4578(%848, %849) /* ty=Tensor[(10, 5, 12), float32] */;
  %864 = less_equal(%858, %859) /* ty=Tensor[(2, 11, 8), bool] */;
  (%860, meta[relay.Constant][49] /* ty=Tensor[(176), float32] */, %861, meta[relay.Constant][50] /* ty=Tensor[(2704), int8] */, %862, %863, meta[relay.Constant][52] /* ty=int8 */, meta[relay.Constant][53] /* ty=Tensor[(1, 600), int8] */, %864)
}

def @func_1344(%var_1342: Tensor[(252), int32], %var_1343: Tensor[(1755), float32]) -> (Tensor[(9, 15, 15), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1755), float32], Tensor[(9, 13, 15), float32]) {
  %877 = fn (%var_1319: Tensor[(252), int32], %var_1320: Tensor[(1755), float32]) -> (Tensor[(9, 15, 15), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1755), float32], Tensor[(9, 13, 15), float32]) {
    %865 = cast(meta[relay.Constant][54] /* ty=Tensor[(9, 15, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 15), float64] */;
    %866 = cast(%var_1319, dtype="int32") /* ty=Tensor[(252), int32] */;
    %867 = cast(%var_1320, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %868 = reshape(%866, newshape=[4, 7, 9]) /* ty=Tensor[(4, 7, 9), int32] */;
    %869 = reshape(%867, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
    %870 = @func_385(%868, %869) /* ty=(Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), uint16], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(9, 13, 15), float32], Tensor[(4, 7, 9), int8], Tensor[(1755), float64]) */;
    %871 = cast(%var_1320, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %872 = reshape(%871, newshape=[9, 13, 15]) /* ty=Tensor[(9, 13, 15), float32] */;
    %873 = @func_22(%872) /* ty=(Tensor[(9, 13, 15), float32],) */;
    %874 = sinh(%865) /* ty=Tensor[(9, 15, 15), float64] */;
    %875 = %870.5;
    %876 = %873.0;
    (%874, %875, %var_1319, %var_1320, %876)
  };
  %877(%var_1342, %var_1343) /* ty=(Tensor[(9, 15, 15), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32], Tensor[(1755), float32], Tensor[(9, 13, 15), float32]) */
}

def @func_4809() -> (Tensor[(160), float64],) {
  @func_4807() /* ty=(Tensor[(160), float64],) */
}

def @func_2185(%var_2182: Tensor[(8, 8, 16), uint8], %var_2183: Tensor[(780, 4), uint8], %var_2184: Tensor[(275), uint8]) -> (Tensor[(8, 8, 16), uint8], Tensor[(16, 15, 13), uint8], Tensor[(780, 4), uint8], Tensor[(11, 5, 5), float32], Tensor[(275), uint8]) {
  %895 = fn (%var_2157: Tensor[(8, 8, 16), uint8], %var_2174: Tensor[(780, 4), uint8], %var_2179: Tensor[(275), uint8]) -> (Tensor[(8, 8, 16), uint8], Tensor[(16, 15, 13), uint8], Tensor[(780, 4), uint8], Tensor[(11, 5, 5), float32], Tensor[(275), uint8]) {
    %878 = cast(%var_2157, dtype="uint8") /* ty=Tensor[(8, 8, 16), uint8] */;
    %879 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(8, 8, 16), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %880 = cast(meta[relay.Constant][55] /* ty=Tensor[(8, 8, 16), uint8] */, dtype="uint8") /* ty=Tensor[(8, 8, 16), uint8] */;
    %881 = dyn.reshape(%878, %879, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %882 = cast(%var_2174, dtype="uint8") /* ty=Tensor[(780, 4), uint8] */;
    %883 = reshape(%882, newshape=[156, 20]) /* ty=Tensor[(156, 20), uint8] */;
    %884 = @func_796(%883) /* ty=(Tensor[(9, 13, 15), float32], Tensor[(1755), float32], Tensor[(16, 15, 13), uint8], Tensor[(156, 20), uint8], Tensor[(3, ?, 14), uint16], Tensor[(3, 1, 14), float64], Tensor[(3, 1, 14), float64], Tensor[(9, 13, 15), float32], Tensor[(252), int32]) */;
    %885 = cast(%var_2179, dtype="uint8") /* ty=Tensor[(275), uint8] */;
    %886 = cast(%var_2179, dtype="uint8") /* ty=Tensor[(275), uint8] */;
    %887 = cast(%var_2179, dtype="uint8") /* ty=Tensor[(275), uint8] */;
    %888 = reshape(%885, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
    %889 = reshape(%886, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
    %890 = reshape(%887, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), uint8] */;
    %891 = @func_668(%888, %889, %890) /* ty=(Tensor[(11, 5, 5), float32], Tensor[(11, 5, 5), int8], Tensor[(11, 5, 5), float32]) */;
    %892 = left_shift(%880, %881) /* ty=Tensor[(8, 8, 16), uint8] */;
    %893 = %884.2;
    %894 = %891.0;
    (%892, %893, %var_2174, %894, %var_2179)
  };
  %895(%var_2182, %var_2183, %var_2184) /* ty=(Tensor[(8, 8, 16), uint8], Tensor[(16, 15, 13), uint8], Tensor[(780, 4), uint8], Tensor[(11, 5, 5), float32], Tensor[(275), uint8]) */
}

def @func_5494() -> (Tensor[(2, 1, 8), float32],) {
  @func_5492() /* ty=(Tensor[(2, 1, 8), float32],) */
}

def @func_4142() -> Tensor[(250, 2), float32] {
  %899 = fn () -> Tensor[(250, 2), float32] {
    %896 = @func_3341() /* ty=(Tensor[(240), float32], Tensor[(8, 8, 16), uint8], Tensor[(1024), uint8], Tensor[(3120), uint8], Tensor[(275), uint8], Tensor[(10, 5, 10), uint16], Tensor[(250, 2), float32]) */;
    %897 = %896.6;
    %898 = cast(%897, dtype="float32") /* ty=Tensor[(250, 2), float32] */;
    tan(%898) /* ty=Tensor[(250, 2), float32] */
  };
  %899() /* ty=Tensor[(250, 2), float32] */
}

def @func_3898() -> (Tensor[(2, 1, 8), float64],) {
  @func_3896() /* ty=(Tensor[(2, 1, 8), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen174/build/output.py:2030: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen174/build/output.py", line 2035, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(336) tvmgen_default_fused_reshape_logical_or_kernel0(signed char* __restrict__ T_logical_or, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_logical_or[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) || ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

