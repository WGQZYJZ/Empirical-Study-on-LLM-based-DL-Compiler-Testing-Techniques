==========mod==========
#[version = "0.0.5"]
def @func_2547() -> Tensor[(4, 14, 6), float32] {
  %0 = @func_1985() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %0.1
}

def @func_9660(%var_9647: Tensor[(14, 4, 5), float64]) -> (Tensor[(14, 4, 5), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %1 = cast(%var_9647, dtype="float64") /* ty=Tensor[(14, 4, 5), float64] */;
  %2 = @func_9274() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %3 = %2.0;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
  %5 = reshape(%4, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), float32] */;
  %6 = rsqrt(%1) /* ty=Tensor[(14, 4, 5), float64] */;
  %7 = @func_2240(%5) /* ty=Tensor[(4, 14, 6), float32] */;
  (%6, %3, %7)
}

def @func_1721(%var_1691: Tensor[(4, 14, 6), float64]) -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool]) {
  %8 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %9 = %8.0;
  %10 = cast(%var_1691, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%9, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %14 = cast(%9, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
  %15 = shape_of(%var_1691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%var_1691, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %18 = multiply(%12, %13) /* ty=Tensor[(4, 14, 6), float64] */;
  %19 = logical_or(%16, %17) /* ty=Tensor[(4, 14, 6), bool] */;
  (%18, %19)
}

def @func_12836() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), uint32]) {
  %20 = @func_11051() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %21 = @func_12642() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(280), float64]) */;
  %22 = @func_4417() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), bool]) */;
  %23 = %22.2;
  %24 = cast(%23, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
  %25 = reshape(%24, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float64] */;
  %26 = @func_2576(%25) /* ty=Tensor[(14, 4, 15), bool] */;
  %27 = cast(%26, dtype="uint32") /* ty=Tensor[(14, 4, 15), uint32] */;
  %28 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%23, dtype="uint32") /* ty=Tensor[(14, 4, 15), uint32] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %31 = %20.0;
  %32 = %21.1;
  %33 = bitwise_xor(%29, %30) /* ty=Tensor[(14, 4, 15), uint32] */;
  (%31, %32, %33)
}

def @func_1339() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) {
  %34 = @func_814() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %35 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %36 = %34.0;
  %37 = %35.0;
  (%36, %37)
}

def @func_4252() -> (Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64]) {
  %38 = @func_2907() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(14, 4, 15), bool]) */;
  %39 = @func_1128() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
  %40 = %38.0;
  %41 = %39.1;
  (%40, %41)
}

def @func_2647() -> (Tensor[(4, 14, 6), float64],) {
  %42 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %43 = %42.1;
  (%43,)
}

def @func_15026() -> Tensor[(4, 14, 6), float32] {
  %44 = @func_10858() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %44.0
}

def @func_10371(%var_10326: Tensor[(2, 2, 12), float32], %var_10335: Tensor[(840), float64], %var_10357: Tensor[(64), float32]) -> (Tensor[(2, 2, 12), bool], Tensor[(4, 14, 6), float32], Tensor[(840), float64], Tensor[(14, 4, 15), float64], Tensor[(12, 16, 12), float64], Tensor[(192, 12), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float64]) {
  %45 = cast(%var_10326, dtype="bool") /* ty=Tensor[(2, 2, 12), bool] */;
  %46 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(2, 2, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 2, 12), float32] */, dtype="bool") /* ty=Tensor[(2, 2, 12), bool] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %49 = cast(%var_10335, dtype="float64") /* ty=Tensor[(840), float64] */;
  %50 = reshape(%49, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float64] */;
  %51 = @func_1236(%50) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
  %52 = @func_10144() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %53 = cast(meta[relay.Constant][1] /* ty=Tensor[(192, 12), float64] */, dtype="float64") /* ty=Tensor[(192, 12), float64] */;
  %54 = reshape(%53, newshape=[12, 16, 12]) /* ty=Tensor[(12, 16, 12), float64] */;
  %55 = cast(%var_10357, dtype="float32") /* ty=Tensor[(64), float32] */;
  %56 = reshape(%55, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float32] */;
  %57 = not_equal(%47, %48) /* ty=Tensor[(2, 2, 12), bool] */;
  %58 = %51.4;
  %59 = %52.1;
  %60 = @func_3403(%54) /* ty=Tensor[(12, 16, 12), float64] */;
  %61 = @func_2128(%56) /* ty=Tensor[(4, 4, 4), float32] */;
  %62 = @func_4510() /* ty=Tensor[(4, 14, 6), float64] */;
  (%57, %58, %var_10335, %59, %60, meta[relay.Constant][1] /* ty=Tensor[(192, 12), float64] */, %61, %var_10357, %62)
}

def @func_9466() -> (Tensor[(14, 4, 15), float64],) {
  %63 = @func_6455() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %64 = %63.0;
  (%64,)
}

def @func_15766(%var_15745: Tensor[(12, 4, 5), int16], %var_15746: Tensor[(12, 4, 5), int16], %var_15753: Tensor[(150, 2), bool], %var_15754: Tensor[(16, 4), float32]) -> (Tensor[(12, 4, 5), int16], Tensor[(5, 5, 12), bool], Tensor[(150, 2), bool], Tensor[(16, 4), float32], Tensor[(4, 5, 1), float64]) {
  %65 = cast(%var_15746, dtype="int16") /* ty=Tensor[(12, 4, 5), int16] */;
  %66 = shape_of(%var_15745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%var_15745, dtype="int16") /* ty=Tensor[(12, 4, 5), int16] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %69 = cast(%var_15753, dtype="bool") /* ty=Tensor[(150, 2), bool] */;
  %70 = cast(%var_15753, dtype="bool") /* ty=Tensor[(150, 2), bool] */;
  %71 = cast(%var_15754, dtype="float32") /* ty=Tensor[(16, 4), float32] */;
  %72 = reshape(%69, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), bool] */;
  %73 = reshape(%70, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), bool] */;
  %74 = reshape(%71, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %75 = @func_3043(%72, %73, %74) /* ty=(Tensor[(5, 5, 12), bool], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %76 = @func_9738() /* ty=(Tensor[(4, 5, 1), float64],) */;
  %77 = bitwise_and(%67, %68) /* ty=Tensor[(12, 4, 5), int16] */;
  %78 = %75.0;
  %79 = %76.0;
  (%77, %78, %var_15753, %var_15754, %79)
}

def @func_11953() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) {
  %80 = @func_9274() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %81 = @func_2547() /* ty=Tensor[(4, 14, 6), float32] */;
  %82 = %80.0;
  (%81, %82)
}

def @func_1128() -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) {
  %83 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %84 = @func_667() /* ty=(Tensor[(15, 3, 2), float64],) */;
  %85 = @func_657() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %86 = %83.0;
  %87 = %84.0;
  %88 = %85.1;
  (%86, %87, %88)
}

def @func_1883() -> Tensor[(4, 14, 6), float32] {
  %89 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %89.0
}

def @func_6087() -> (Tensor[(15, 3, 2), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 5, 1), float64]) {
  %90 = @func_5773() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %91 = @func_814() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %92 = @func_2361() /* ty=Tensor[(15, 3, 2), float64] */;
  %93 = %90.1;
  %94 = %91.1;
  %95 = @func_4151() /* ty=Tensor[(4, 5, 1), float64] */;
  (%92, %93, %94, %95)
}

def @func_4066() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %96 = @func_3317() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64]) */;
  %97 = @func_995() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %98 = @func_1846() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %99 = %96.0;
  %100 = %97.0;
  %101 = %98.0;
  (%99, %100, %101)
}

def @func_10590() -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
  %102 = @func_5540() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %103 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %104 = %102.3;
  %105 = %103.1;
  (%104, %105)
}

def @func_9933(%var_9913: Tensor[(12, 14, 16), int16], %var_9914: Tensor[(12, 14, 16), int16]) -> (Tensor[(12, 14, 16), int16],) {
  %106 = cast(%var_9914, dtype="int16") /* ty=Tensor[(12, 14, 16), int16] */;
  %107 = shape_of(%var_9913, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%var_9913, dtype="int16") /* ty=Tensor[(12, 14, 16), int16] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %110 = add(%108, %109) /* ty=Tensor[(12, 14, 16), int16] */;
  (%110,)
}

def @func_2095() -> Tensor[(4, 14, 6), float32] {
  %111 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %111.0
}

def @func_12084() -> (Tensor[(15, 3, 2), float64],) {
  %112 = @func_2361() /* ty=Tensor[(15, 3, 2), float64] */;
  (%112,)
}

def @func_4442() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %113 = @func_657() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %114 = %113.1;
  %115 = @func_2095() /* ty=Tensor[(4, 14, 6), float32] */;
  (%114, %115)
}

def @func_12714(%var_12690: Tensor[(300), bool]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(64), float32], Tensor[(12, 3, 7), float32]) {
  %116 = @func_4385() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %117 = cast(%var_12690, dtype="bool") /* ty=Tensor[(300), bool] */;
  %118 = cast(meta[relay.Constant][2] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %119 = reshape(%117, newshape=[300]) /* ty=Tensor[(300), bool] */;
  %120 = reshape(%118, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %121 = @func_7784(%119, %120) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(840), float64], Tensor[(4, 14, 6), float32], Tensor[(64), float32]) */;
  %122 = @func_12019() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(12, 3, 7), float32], Tensor[(252, 1), float32]) */;
  %123 = %116.0;
  %124 = %121.0;
  %125 = %122.1;
  (%123, %124, %var_12690, meta[relay.Constant][2] /* ty=Tensor[(64), float32] */, %125)
}

def @func_13974() -> (Tensor[(4, 14, 6), float64], Tensor[(6, 12, 16), uint8], Tensor[(4, 14, 6), float32]) {
  %126 = @func_13573() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %127 = @func_5540() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %128 = %126.0;
  %129 = @func_8594() /* ty=Tensor[(6, 12, 16), uint8] */;
  %130 = %127.3;
  (%128, %129, %130)
}

def @func_10464() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) {
  %131 = @func_3070() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %132 = @func_5620() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %133 = %131.0;
  %134 = %132.0;
  (%133, %134)
}

def @func_12728() -> (Tensor[(14, 4, 15), float64],) {
  %135 = @func_4417() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), bool]) */;
  %136 = %135.1;
  (%136,)
}

def @func_13634() -> Tensor[(4, 14, 6), float32] {
  %137 = @func_10590() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %137.0
}

def @func_16031() -> Tensor[(4, 14, 6), float32] {
  %138 = @func_15660() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %138.2
}

def @func_12428() -> Tensor[(4, 14, 6), float32] {
  @func_8926() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_2361() -> Tensor[(15, 3, 2), float64] {
  %139 = @func_1396() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %139.1
}

def @func_8729() -> (Tensor[(15, 3, 2), float64],) {
  %140 = @func_8554() /* ty=(Tensor[(15, 3, 2), float64],) */;
  %141 = %140.0;
  (%141,)
}

def @func_1795() -> (Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) {
  %142 = @func_1191() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %143 = @func_1191() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %144 = @func_667() /* ty=(Tensor[(15, 3, 2), float64],) */;
  %145 = %142.1;
  %146 = %143.1;
  %147 = @func_876() /* ty=Tensor[(4, 14, 6), float64] */;
  %148 = %144.0;
  (%145, %146, %147, %148)
}

def @func_8076(%var_8036: int64) -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], int64, Tensor[(8, 1), bool], Tensor[(4, 14, 6), float32]) {
  %149 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %150 = cast(%var_8036, dtype="int64") /* ty=int64 */;
  %151 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 1), int64] */, dtype="int64") /* ty=Tensor[(8, 1), int64] */;
  %152 = reshape(%150, newshape=[]) /* ty=int64 */;
  %153 = reshape(%151, newshape=[8]) /* ty=Tensor[(8), int64] */;
  %154 = @func_2953(%152, %153) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], int64, Tensor[(8), int64]) */;
  %155 = %154.2;
  %156 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 1), int64] */, dtype="bool") /* ty=Tensor[(8, 1), bool] */;
  %157 = cast(%155, dtype="bool") /* ty=bool */;
  %158 = @func_5943() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %159 = %149.1;
  %160 = @func_876() /* ty=Tensor[(4, 14, 6), float64] */;
  %161 = equal(%156, %157) /* ty=Tensor[(8, 1), bool] */;
  %162 = %158.1;
  (%159, %160, %var_8036, %161, %162)
}

def @func_4471() -> Tensor[(4, 14, 6), float64] {
  %163 = @func_657() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %164 = %163.0;
  %165 = cast(%164, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  tan(%165) /* ty=Tensor[(4, 14, 6), float64] */
}

def @func_9184() -> (Tensor[(4, 14, 6), float64],) {
  %166 = @func_2647() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %167 = %166.0;
  (%167,)
}

def @func_2169() -> Tensor[(4, 14, 6), float32] {
  %168 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %168.0
}

def @func_10948() -> Tensor[(4, 14, 6), float32] {
  %169 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %169.0
}

def @func_6784() -> Tensor[(4, 14, 6), float32] {
  %170 = @func_6016() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %170.0
}

def @func_15153() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %171 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %172 = @func_11009() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %173 = %171.0;
  %174 = %172.0;
  %175 = @func_6992() /* ty=Tensor[(4, 14, 6), float32] */;
  (%173, %174, %175)
}

def @func_8594() -> Tensor[(6, 12, 16), uint8] {
  %176 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 12, 16), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 16), float32] */;
  %177 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(6, 12, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 12, 16), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 16), float32] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %180 = mod(%178, %179) /* ty=Tensor[(6, 12, 16), float32] */;
  %181 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 12, 16), float32] */, dtype="uint8") /* ty=Tensor[(6, 12, 16), uint8] */;
  %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%180, dtype="uint8") /* ty=Tensor[(6, 12, 16), uint8] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  minimum(%183, %184) /* ty=Tensor[(6, 12, 16), uint8] */
}

def @func_10283() -> (Tensor[(14, 4, 15), bool], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %185 = @func_9466() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %186 = %185.0;
  %187 = cast(%186, dtype="float32") /* ty=Tensor[(14, 4, 15), float32] */;
  %188 = atan(%187) /* ty=Tensor[(14, 4, 15), float32] */;
  %189 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 4, 15), float32] */, dtype="bool") /* ty=Tensor[(14, 4, 15), bool] */;
  %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%188, dtype="bool") /* ty=Tensor[(14, 4, 15), bool] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %193 = @func_9585() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64]) */;
  %194 = @func_4844() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %195 = less_equal(%191, %192) /* ty=Tensor[(14, 4, 15), bool] */;
  %196 = %193.0;
  %197 = %194.2;
  (%195, %196, %197)
}

def @func_15660() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %198 = @func_9232() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(64), float32]) */;
  %199 = @func_2169() /* ty=Tensor[(4, 14, 6), float32] */;
  %200 = @func_2547() /* ty=Tensor[(4, 14, 6), float32] */;
  %201 = %198.2;
  (%199, %200, %201)
}

def @func_8540() -> Tensor[(14, 4, 15), float64] {
  %202 = @func_3655() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
  %202.1
}

def @func_5890(%var_5883: Tensor[(10, 30), bool]) -> (Tensor[(4, 14, 6), float64], Tensor[(64), float32], Tensor[(10, 30), bool], Tensor[(2, 32), float32]) {
  %203 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %204 = cast(%var_5883, dtype="bool") /* ty=Tensor[(10, 30), bool] */;
  %205 = cast(%var_5883, dtype="bool") /* ty=Tensor[(10, 30), bool] */;
  %206 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 32), float32] */, dtype="float32") /* ty=Tensor[(2, 32), float32] */;
  %207 = reshape(%204, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), bool] */;
  %208 = reshape(%205, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), bool] */;
  %209 = reshape(%206, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %210 = @func_3043(%207, %208, %209) /* ty=(Tensor[(5, 5, 12), bool], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %211 = %203.1;
  %212 = %210.3;
  (%211, %212, %var_5883, meta[relay.Constant][7] /* ty=Tensor[(2, 32), float32] */)
}

def @func_4551() -> (Tensor[(13, 10, 8), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %213 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 10, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 10, 8), float64] */;
  %214 = @func_1846() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %215 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %216 = atanh(%213) /* ty=Tensor[(13, 10, 8), float64] */;
  %217 = %214.0;
  %218 = %215.0;
  (%216, %217, %218)
}

def @func_4510() -> Tensor[(4, 14, 6), float64] {
  %219 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %219.0
}

def @func_5179() -> (Tensor[(15, 3, 2), float64],) {
  %220 = @func_1795() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) */;
  %221 = %220.3;
  %222 = cast(%221, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
  %223 = tan(%222) /* ty=Tensor[(15, 3, 2), float64] */;
  (%223,)
}

def @func_5773() -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
  %224 = @func_1597() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %225 = @func_4252() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64]) */;
  %226 = %224.0;
  %227 = %225.1;
  (%226, %227)
}

def @func_8949() -> (Tensor[(15, 3, 2), float32],) {
  %228 = @func_7552() /* ty=Tensor[(15, 3, 2), float32] */;
  (%228,)
}

def @func_14135() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %229 = @func_12927() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
  %230 = @func_8975() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %231 = %229.0;
  %232 = %230.0;
  (%231, %232)
}

def @func_3160(%var_3140: Tensor[(4, 14, 6), float32]) -> Tensor[(4, 14, 6), bool] {
  %233 = @func_467() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %234 = %233.0;
  %235 = cast(%var_3140, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
  %236 = shape_of(%234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %237 = cast(%234, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%237, %238) /* ty=Tensor[(4, 14, 6), bool] */
}

def @func_11585() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %239 = @func_2146() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
  %240 = %239.0;
  %241 = cast(%240, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
  %242 = reshape(%241, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), float32] */;
  %243 = @func_4891() /* ty=Tensor[(14, 4, 15), float64] */;
  %244 = @func_2240(%242) /* ty=Tensor[(4, 14, 6), float32] */;
  (%243, %240, %244)
}

def @func_12304() -> (Tensor[(4, 14, 6), float64],) {
  %245 = @func_9683() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %246 = %245.0;
  (%246,)
}

def @func_7890() -> Tensor[(4, 14, 6), float32] {
  @func_5394() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_14320() -> (Tensor[(4, 14, 6), float32],) {
  %247 = @func_8850() /* ty=Tensor[(4, 14, 6), float32] */;
  (%247,)
}

def @func_2146() -> (Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) {
  %248 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %249 = @func_1795() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) */;
  %250 = %248.0;
  %251 = %249.0;
  (%250, %251)
}

def @func_4151() -> Tensor[(4, 5, 1), float64] {
  %252 = @func_3500() /* ty=(Tensor[(4, 5, 1), float64],) */;
  %252.0
}

def @func_13338(%var_13331: Tensor[(8), int64]) -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], int64, Tensor[(8), int64]) {
  %253 = @func_3465() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %254 = cast(-10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %255 = cast(%var_13331, dtype="int64") /* ty=Tensor[(8), int64] */;
  %256 = reshape(%254, newshape=[]) /* ty=int64 */;
  %257 = reshape(%255, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), int64] */;
  %258 = @func_2831(%256, %257) /* ty=(Tensor[(1, 4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(840), float64]) */;
  %259 = @func_6283() /* ty=Tensor[(4, 14, 6), float32] */;
  %260 = %253.0;
  %261 = %258.1;
  (%259, %260, %261, -10 /* ty=int64 */, %var_13331)
}

def @func_10000() -> Tensor[(4, 14, 6), float32] {
  @func_939() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_5295(%var_5240: Tensor[(15, 13, 6), float64], %var_5273: Tensor[(64), float32]) -> (Tensor[(15, 13, 6), float64], Tensor[(15, 13, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(300), bool], Tensor[(64), float32]) {
  %262 = cast(%var_5240, dtype="float64") /* ty=Tensor[(15, 13, 6), float64] */;
  %263 = cast(%var_5240, dtype="float32") /* ty=Tensor[(15, 13, 6), float32] */;
  %264 = @func_2907() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(14, 4, 15), bool]) */;
  %265 = @func_3070() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %266 = cast(meta[relay.Constant][9] /* ty=Tensor[(300), bool] */, dtype="bool") /* ty=Tensor[(300), bool] */;
  %267 = cast(meta[relay.Constant][9] /* ty=Tensor[(300), bool] */, dtype="bool") /* ty=Tensor[(300), bool] */;
  %268 = cast(%var_5273, dtype="float32") /* ty=Tensor[(64), float32] */;
  %269 = reshape(%266, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), bool] */;
  %270 = reshape(%267, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), bool] */;
  %271 = reshape(%268, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %272 = @func_3043(%269, %270, %271) /* ty=(Tensor[(5, 5, 12), bool], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %273 = acos(%262) /* ty=Tensor[(15, 13, 6), float64] */;
  %274 = atanh(%263) /* ty=Tensor[(15, 13, 6), float32] */;
  %275 = %264.0;
  %276 = %265.0;
  %277 = %272.2;
  (%273, %274, %275, %276, %277, meta[relay.Constant][9] /* ty=Tensor[(300), bool] */, %var_5273)
}

def @func_8926() -> Tensor[(4, 14, 6), float32] {
  %278 = @func_4137() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %278.0
}

def @func_14963() -> (Tensor[(4, 14, 6), float32],) {
  %279 = @func_6283() /* ty=Tensor[(4, 14, 6), float32] */;
  (%279,)
}

def @func_6992() -> Tensor[(4, 14, 6), float32] {
  @func_6283() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_14171() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %280 = @func_4120() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
  %281 = @func_4962() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %282 = %280.1;
  %283 = %281.0;
  (%282, %283)
}

def @func_15635() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %284 = @func_9274() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %285 = %284.0;
  %286 = @func_1883() /* ty=Tensor[(4, 14, 6), float32] */;
  (%285, %286)
}

def @func_16049() -> (Tensor[(4, 14, 6), float64],) {
  %287 = @func_12499() /* ty=Tensor[(4, 14, 6), float64] */;
  (%287,)
}

def @func_9418() -> Tensor[(14, 4, 15), float64] {
  %288 = @func_3465() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %288.0
}

def @func_12364() -> (Tensor[(4, 14, 6), float32],) {
  %289 = @func_6016() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %290 = %289.0;
  (%290,)
}

def @func_7794() -> (Tensor[(4, 14, 6), float64],) {
  %291 = @func_5037() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %292 = %291.0;
  (%292,)
}

def @func_978() -> Tensor[(4, 14, 6), float32] {
  %293 = @func_557() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %293.0
}

def @func_7407() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), bool]) {
  %294 = cast(-8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %295 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 2), int64] */, dtype="int64") /* ty=Tensor[(4, 2), int64] */;
  %296 = reshape(%294, newshape=[]) /* ty=int64 */;
  %297 = reshape(%295, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), int64] */;
  %298 = @func_2831(%296, %297) /* ty=(Tensor[(1, 4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(840), float64]) */;
  %299 = @func_4551() /* ty=(Tensor[(13, 10, 8), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %300 = @func_6579() /* ty=(Tensor[(15, 3, 2), float32], Tensor[(4, 14, 6), float32]) */;
  %301 = %300.0;
  %302 = cast(-8 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %303 = cast(%301, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
  %304 = %298.1;
  %305 = %299.1;
  %306 = not_equal(%302, %303) /* ty=Tensor[(15, 3, 2), bool] */;
  (%304, meta[relay.Constant][10] /* ty=Tensor[(4, 2), int64] */, %305, %306)
}

def @func_12613() -> (Tensor[(4, 14, 6), float32],) {
  %307 = @func_7260() /* ty=Tensor[(4, 14, 6), float32] */;
  (%307,)
}

def @func_11285() -> (Tensor[(4, 5, 1), float64], Tensor[(14, 4, 15), float64], Tensor[(12, 14, 16), int16], Tensor[(8, 336), int16], Tensor[(14, 4, 15), float64]) {
  %308 = @func_2415() /* ty=(Tensor[(4, 5, 1), float64],) */;
  %309 = %308.0;
  %310 = cast(%309, dtype="float64") /* ty=Tensor[(4, 5, 1), float64] */;
  %311 = @func_4599() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %312 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 336), int16] */, dtype="int16") /* ty=Tensor[(8, 336), int16] */;
  %313 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 336), int16] */, dtype="int16") /* ty=Tensor[(8, 336), int16] */;
  %314 = reshape(%312, newshape=[12, 14, 16]) /* ty=Tensor[(12, 14, 16), int16] */;
  %315 = reshape(%313, newshape=[12, 14, 16]) /* ty=Tensor[(12, 14, 16), int16] */;
  %316 = @func_9933(%314, %315) /* ty=(Tensor[(12, 14, 16), int16],) */;
  %317 = asin(%310) /* ty=Tensor[(4, 5, 1), float64] */;
  %318 = %311.0;
  %319 = %316.0;
  %320 = @func_2254() /* ty=Tensor[(14, 4, 15), float64] */;
  (%317, %318, %319, meta[relay.Constant][11] /* ty=Tensor[(8, 336), int16] */, %320)
}

def @func_12873() -> (Tensor[(15, 3, 2), float32],) {
  %321 = @func_7552() /* ty=Tensor[(15, 3, 2), float32] */;
  (%321,)
}

def @func_3043(%var_2988: Tensor[(5, 5, 12), bool], %var_2989: Tensor[(5, 5, 12), bool], %var_3016: Tensor[(64), float32]) -> (Tensor[(5, 5, 12), bool], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %322 = cast(%var_2989, dtype="bool") /* ty=Tensor[(5, 5, 12), bool] */;
  %323 = shape_of(%var_2988, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%var_2988, dtype="bool") /* ty=Tensor[(5, 5, 12), bool] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %326 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %327 = cast(%var_3016, dtype="float32") /* ty=Tensor[(64), float32] */;
  %328 = reshape(%327, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float32] */;
  %329 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %330 = @func_1846() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %331 = logical_and(%324, %325) /* ty=Tensor[(5, 5, 12), bool] */;
  %332 = %326.0;
  %333 = @func_2128(%328) /* ty=Tensor[(4, 4, 4), float32] */;
  %334 = %329.0;
  %335 = %330.0;
  (%331, %332, %333, %var_3016, %334, %335)
}

def @func_9232() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(64), float32]) {
  %336 = @func_2647() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %337 = %336.0;
  %338 = cast(%337, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  %339 = reshape(%338, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), float64] */;
  %340 = @func_1721(%339) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool]) */;
  %341 = cast(meta[relay.Constant][12] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %342 = reshape(%341, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %343 = @func_4290(%342) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 4, 4), float32], Tensor[(64), float32]) */;
  %344 = %340.1;
  %345 = %343.0;
  (%337, %344, %345, meta[relay.Constant][12] /* ty=Tensor[(64), float32] */)
}

def @func_5829() -> (Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(1170), float64], Tensor[(64), float32]) {
  %346 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %347 = cast(meta[relay.Constant][13] /* ty=Tensor[(1170), float64] */, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %348 = cast(meta[relay.Constant][14] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %349 = reshape(%347, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), float64] */;
  %350 = reshape(%348, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %351 = @func_5295(%349, %350) /* ty=(Tensor[(15, 13, 6), float64], Tensor[(15, 13, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(300), bool], Tensor[(64), float32]) */;
  %352 = %346.0;
  %353 = %351.5;
  (%352, %353, meta[relay.Constant][13] /* ty=Tensor[(1170), float64] */, meta[relay.Constant][14] /* ty=Tensor[(64), float32] */)
}

def @func_4385() -> (Tensor[(4, 14, 6), float32],) {
  %354 = @func_995() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %355 = %354.1;
  (%355,)
}

def @func_11452(%var_11434: Tensor[(15, 1, 3), float32]) -> (Tensor[(15, 4, 3), uint32], Tensor[(15, 3, 2), float64]) {
  %356 = cast(%var_11434, dtype="float32") /* ty=Tensor[(15, 1, 3), float32] */;
  %357 = cosh(%356) /* ty=Tensor[(15, 1, 3), float32] */;
  %358 = cast(%357, dtype="uint32") /* ty=Tensor[(15, 1, 3), uint32] */;
  %359 = cast(meta[relay.Constant][15] /* ty=Tensor[(15, 4, 3), float32] */, dtype="uint32") /* ty=Tensor[(15, 4, 3), uint32] */;
  %360 = @func_10722() /* ty=(Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
  %361 = logical_xor(%358, %359) /* ty=Tensor[(15, 4, 3), uint32] */;
  %362 = %360.2;
  (%361, %362)
}

def @func_10722() -> (Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) {
  %363 = @func_9344() /* ty=(Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) */;
  %364 = @func_7816() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %365 = %364.0;
  %366 = cast(%365, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
  %367 = @func_1396() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %368 = @func_1597() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %369 = %363.0;
  %370 = sigmoid(%366) /* ty=Tensor[(14, 4, 15), float64] */;
  %371 = %367.1;
  %372 = %368.0;
  (%369, %370, %371, %372)
}

def @func_6400() -> (Tensor[(4, 14, 6), float32],) {
  %373 = @func_5394() /* ty=Tensor[(4, 14, 6), float32] */;
  (%373,)
}

def @func_557() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %374 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %375 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %376 = %374.0;
  %377 = %375.0;
  (%376, %377)
}

def @func_749() -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
  %378 = @func_657() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %379 = @func_667() /* ty=(Tensor[(15, 3, 2), float64],) */;
  %380 = %378.1;
  %381 = %379.0;
  (%380, %381)
}

def @func_5979() -> Tensor[(4, 14, 6), float32] {
  @func_939() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_6579() -> (Tensor[(15, 3, 2), float32], Tensor[(4, 14, 6), float32]) {
  %382 = @func_4813() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float32]) */;
  %383 = @func_4066() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %384 = %382.2;
  %385 = %383.2;
  (%384, %385)
}

def @func_14071() -> Tensor[(4, 14, 6), float64] {
  %386 = @func_6741() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %386.4
}

def @func_4004(%var_3985: Tensor[(14, 4, 15), float64]) -> (Tensor[(14, 4, 15), uint64], Tensor[(4, 14, 6), float32]) {
  %387 = @func_868() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %388 = %387.0;
  %389 = cast(%var_3985, dtype="uint64") /* ty=Tensor[(14, 4, 15), uint64] */;
  %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%388, dtype="uint64") /* ty=Tensor[(14, 4, 15), uint64] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %393 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %394 = logical_xor(%391, %392) /* ty=Tensor[(14, 4, 15), uint64] */;
  %395 = %393.1;
  (%394, %395)
}

def @func_12642() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(280), float64]) {
  %396 = cast(meta[relay.Constant][16] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %397 = reshape(%396, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), float64] */;
  %398 = @func_9660(%397) /* ty=(Tensor[(14, 4, 5), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %399 = @func_2254() /* ty=Tensor[(14, 4, 15), float64] */;
  %400 = %398.2;
  (%399, %400, meta[relay.Constant][16] /* ty=Tensor[(280), float64] */)
}

def @func_13151(%var_13133: Tensor[(10, 9, 5), int32], %var_13134: Tensor[(10, 9, 5), int32], %var_13142: Tensor[(10, 9, 5), int32]) -> (Tensor[(10, 9, 5), bool], Tensor[(10, 9, 5), float32]) {
  %401 = cast(%var_13134, dtype="bool") /* ty=Tensor[(10, 9, 5), bool] */;
  %402 = shape_of(%var_13133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%var_13133, dtype="bool") /* ty=Tensor[(10, 9, 5), bool] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %405 = cast(%var_13142, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
  %406 = shape_of(%var_13133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%var_13133, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %409 = not_equal(%403, %404) /* ty=Tensor[(10, 9, 5), bool] */;
  %410 = mod(%407, %408) /* ty=Tensor[(10, 9, 5), float32] */;
  (%409, %410)
}

def @func_14544() -> Tensor[(4, 14, 6), float32] {
  %411 = @func_10858() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %411.0
}

def @func_3403(%var_3356: Tensor[(12, 16, 12), float64]) -> Tensor[(12, 16, 12), float64] {
  %412 = cast(%var_3356, dtype="float64") /* ty=Tensor[(12, 16, 12), float64] */;
  log2(%412) /* ty=Tensor[(12, 16, 12), float64] */
}

def @func_4217(%var_4185: uint8, %var_4186: Tensor[(9, 10, 15), uint8]) -> (Tensor[(9, 10, 15), bool], Tensor[(9, 10, 15), uint16], Tensor[(4, 14, 6), float64]) {
  %413 = cast(%var_4185, dtype="bool") /* ty=bool */;
  %414 = cast(%var_4186, dtype="bool") /* ty=Tensor[(9, 10, 15), bool] */;
  %415 = cast(%var_4186, dtype="uint16") /* ty=Tensor[(9, 10, 15), uint16] */;
  %416 = cast(%var_4185, dtype="uint16") /* ty=uint16 */;
  %417 = @func_3070() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %418 = greater_equal(%413, %414) /* ty=Tensor[(9, 10, 15), bool] */;
  %419 = minimum(%415, %416) /* ty=Tensor[(9, 10, 15), uint16] */;
  %420 = %417.0;
  (%418, %419, %420)
}

def @func_3500() -> (Tensor[(4, 5, 1), float64],) {
  %421 = @func_2415() /* ty=(Tensor[(4, 5, 1), float64],) */;
  %422 = %421.0;
  (%422,)
}

def @func_9897() -> (Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) {
  %423 = @func_6455() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %424 = @func_4252() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64]) */;
  %425 = %423.0;
  %426 = %424.1;
  %427 = @func_3856() /* ty=Tensor[(14, 4, 15), float64] */;
  (%425, %426, %427)
}

def @func_3925() -> Tensor[(14, 4, 15), float64] {
  @func_2402() /* ty=Tensor[(14, 4, 15), float64] */
}

def @func_9131() -> Tensor[(4, 14, 6), float32] {
  %428 = @func_4551() /* ty=(Tensor[(13, 10, 8), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %428.1
}

def @func_15727() -> Tensor[(14, 4, 15), float64] {
  %429 = @func_9466() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %429.0
}

def @func_3856() -> Tensor[(14, 4, 15), float64] {
  %430 = @func_3465() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %430.0
}

def @func_667() -> (Tensor[(15, 3, 2), float64],) {
  %431 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
  %432 = rsqrt(%431) /* ty=Tensor[(15, 3, 2), float64] */;
  (%432,)
}

def @func_2193() -> Tensor[(4, 14, 6), float32] {
  %433 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %433.1
}

def @func_10173(%var_10166: int64) -> (Tensor[(6, 12, 16), uint8], Tensor[(8, 1), bool], int64) {
  %434 = cast(%var_10166, dtype="int64") /* ty=int64 */;
  %435 = reshape(%434, newshape=[]) /* ty=int64 */;
  %436 = @func_8076(%435) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], int64, Tensor[(8, 1), bool], Tensor[(4, 14, 6), float32]) */;
  %437 = @func_8594() /* ty=Tensor[(6, 12, 16), uint8] */;
  %438 = %436.3;
  (%437, %438, %var_10166)
}

def @func_10040() -> (Tensor[(14, 4, 15), float64],) {
  %439 = @func_6042() /* ty=Tensor[(14, 4, 15), float64] */;
  (%439,)
}

def @func_14052() -> (Tensor[(4, 14, 6), float32],) {
  %440 = @func_8926() /* ty=Tensor[(4, 14, 6), float32] */;
  (%440,)
}

def @func_11168() -> (Tensor[(4, 14, 6), float64],) {
  %441 = @func_10464() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %442 = %441.0;
  (%442,)
}

def @func_4962() -> (Tensor[(4, 14, 6), float32],) {
  %443 = @func_4417() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), bool]) */;
  %444 = %443.0;
  (%444,)
}

def @func_9766() -> (Tensor[(4, 14, 6), float32],) {
  %445 = @func_4551() /* ty=(Tensor[(13, 10, 8), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %446 = %445.1;
  (%446,)
}

def @func_2128(%var_2116: Tensor[(4, 4, 4), float32]) -> Tensor[(4, 4, 4), float32] {
  %447 = cast(%var_2116, dtype="float32") /* ty=Tensor[(4, 4, 4), float32] */;
  asinh(%447) /* ty=Tensor[(4, 4, 4), float32] */
}

def @func_4044(%var_4040: uint64, %var_4041: Tensor[(112), uint64]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 4, 7), bool], uint64, Tensor[(112), uint64]) {
  %448 = @func_1985() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %449 = @func_1846() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %450 = cast(%var_4040, dtype="uint64") /* ty=uint64 */;
  %451 = cast(%var_4041, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %452 = reshape(%450, newshape=[]) /* ty=uint64 */;
  %453 = reshape(%451, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), uint64] */;
  %454 = %448.1;
  %455 = %449.0;
  %456 = @func_2438(%452, %453) /* ty=Tensor[(4, 4, 7), bool] */;
  (%454, %455, %456, %var_4040, %var_4041)
}

def @func_9571() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool]) {
  %457 = @func_6752() /* ty=Tensor[(4, 14, 6), float64] */;
  %458 = cast(%457, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  %459 = reshape(%458, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), float64] */;
  %460 = @func_1721(%459) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool]) */;
  %461 = %460.1;
  (%457, %461)
}

def @func_13573() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) {
  %462 = @func_9232() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(64), float32]) */;
  %463 = @func_9571() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool]) */;
  %464 = %462.0;
  %465 = @func_12499() /* ty=Tensor[(4, 14, 6), float64] */;
  %466 = %463.0;
  (%464, %465, %466)
}

def @func_467() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %467 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %468 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %469 = %467.0;
  %470 = %468.0;
  (%469, %470)
}

def @func_6349(%var_6318: uint64, %var_6319: Tensor[(112), uint64]) -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], uint64, Tensor[(112), uint64], Tensor[(4, 4, 7), float64]) {
  %471 = @func_995() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %472 = @func_5329() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %473 = cast(%var_6318, dtype="uint64") /* ty=uint64 */;
  %474 = cast(%var_6319, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %475 = reshape(%473, newshape=[]) /* ty=uint64 */;
  %476 = reshape(%474, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), uint64] */;
  %477 = @func_2438(%475, %476) /* ty=Tensor[(4, 4, 7), bool] */;
  %478 = cast(%477, dtype="float64") /* ty=Tensor[(4, 4, 7), float64] */;
  %479 = %471.0;
  %480 = %472.2;
  %481 = sqrt(%478) /* ty=Tensor[(4, 4, 7), float64] */;
  (%479, %480, %var_6318, %var_6319, %481)
}

def @func_10323() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64]) {
  %482 = @func_10283() /* ty=(Tensor[(14, 4, 15), bool], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
  %483 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %484 = %482.1;
  %485 = %483.0;
  (%484, %485)
}

def @func_14020() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %486 = @func_8306() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %487 = @func_6752() /* ty=Tensor[(4, 14, 6), float64] */;
  %488 = %486.0;
  (%487, %488)
}

def @func_520() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) {
  %489 = @func_467() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %490 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %491 = %490.0;
  %492 = cast(%491, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  %493 = %489.0;
  %494 = acos(%492) /* ty=Tensor[(4, 14, 6), float64] */;
  (%493, %494)
}

def @func_10661() -> (Tensor[(4, 14, 6), float32], Tensor[(10, 11, 2), float32], Tensor[(15, 3, 2), float32]) {
  %495 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 11, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 11, 2), float64] */;
  %496 = acos(%495) /* ty=Tensor[(10, 11, 2), float64] */;
  %497 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 11, 2), float64] */, dtype="float32") /* ty=Tensor[(10, 11, 2), float32] */;
  %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%496, dtype="float32") /* ty=Tensor[(10, 11, 2), float32] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %501 = @func_8949() /* ty=(Tensor[(15, 3, 2), float32],) */;
  %502 = @func_5133() /* ty=Tensor[(4, 14, 6), float32] */;
  %503 = floor_divide(%499, %500) /* ty=Tensor[(10, 11, 2), float32] */;
  %504 = %501.0;
  (%502, %503, %504)
}

def @func_3070() -> (Tensor[(4, 14, 6), float64],) {
  %505 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %506 = %505.1;
  (%506,)
}

def @func_12927() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %507 = @func_6741() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %508 = @func_4551() /* ty=(Tensor[(13, 10, 8), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %509 = %507.1;
  %510 = %508.2;
  (%509, %510)
}

def @func_4706(%var_4694: Tensor[(4, 5, 6), float64]) -> Tensor[(4, 5, 6), float64] {
  %511 = @func_4151() /* ty=Tensor[(4, 5, 1), float64] */;
  %512 = cast(%511, dtype="uint32") /* ty=Tensor[(4, 5, 1), uint32] */;
  %513 = cast(%var_4694, dtype="uint32") /* ty=Tensor[(4, 5, 6), uint32] */;
  %514 = right_shift(%512, %513) /* ty=Tensor[(4, 5, 6), uint32] */;
  %515 = cast(%514, dtype="float64") /* ty=Tensor[(4, 5, 6), float64] */;
  exp(%515) /* ty=Tensor[(4, 5, 6), float64] */
}

def @func_11009() -> (Tensor[(4, 14, 6), float32],) {
  %516 = @func_467() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %517 = %516.0;
  (%517,)
}

def @func_13662() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %518 = @func_8257() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %519 = @func_4417() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), bool]) */;
  %520 = %518.0;
  %521 = %519.0;
  (%520, %521)
}

def @func_2329() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
  %522 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %523 = @func_1998() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %524 = @func_1191() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %525 = %522.0;
  %526 = %523.0;
  %527 = %524.1;
  (%525, %526, %527)
}

def @func_12963() -> (Tensor[(4, 5, 1), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %528 = @func_9766() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %529 = @func_5540() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %530 = @func_4844() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %531 = @func_4151() /* ty=Tensor[(4, 5, 1), float64] */;
  %532 = %528.0;
  %533 = %529.3;
  %534 = %530.2;
  (%531, %532, %533, %534)
}

def @func_9683() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %535 = @func_9274() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %536 = %535.0;
  %537 = @func_978() /* ty=Tensor[(4, 14, 6), float32] */;
  (%536, %537)
}

def @func_14951() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 5, 1), float64], Tensor[(14, 4, 15), float32]) {
  %538 = @func_11168() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %539 = @func_12483() /* ty=Tensor[(4, 5, 1), float64] */;
  %540 = cast(%539, dtype="float64") /* ty=Tensor[(4, 5, 1), float64] */;
  %541 = @func_12927() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
  %542 = %541.0;
  %543 = cast(%542, dtype="float32") /* ty=Tensor[(14, 4, 15), float32] */;
  %544 = %538.0;
  %545 = sin(%540) /* ty=Tensor[(4, 5, 1), float64] */;
  %546 = asin(%543) /* ty=Tensor[(14, 4, 15), float32] */;
  (%544, %545, %546)
}

def @func_13131() -> (Tensor[(4, 14, 6), float32],) {
  %547 = @func_6400() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %548 = %547.0;
  (%548,)
}

def @func_11654() -> Tensor[(4, 14, 6), float32] {
  @func_2517() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_5620() -> (Tensor[(4, 14, 6), float64],) {
  %549 = @func_3317() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64]) */;
  %550 = %549.1;
  (%550,)
}

def @func_7450() -> Tensor[(4, 5, 1), float64] {
  @func_4635() /* ty=Tensor[(4, 5, 1), float64] */
}

def @func_2953(%var_2950: int64, %var_2951: Tensor[(8), int64]) -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], int64, Tensor[(8), int64]) {
  %551 = @func_978() /* ty=Tensor[(4, 14, 6), float32] */;
  %552 = cast(%551, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  %553 = cast(%var_2950, dtype="int64") /* ty=int64 */;
  %554 = cast(%var_2951, dtype="int64") /* ty=Tensor[(8), int64] */;
  %555 = reshape(%553, newshape=[]) /* ty=int64 */;
  %556 = reshape(%554, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), int64] */;
  %557 = @func_2831(%555, %556) /* ty=(Tensor[(1, 4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(840), float64]) */;
  %558 = exp(%552) /* ty=Tensor[(4, 14, 6), float64] */;
  %559 = %557.1;
  (%558, %559, %var_2950, %var_2951)
}

def @func_4668(%var_4664: int64, %var_4665: Tensor[(1, 8), int64]) -> (Tensor[(4, 14, 6), float64], Tensor[(1, 4, 2), int64], int64, Tensor[(1, 8), int64]) {
  %560 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %561 = cast(%var_4664, dtype="int64") /* ty=int64 */;
  %562 = cast(%var_4665, dtype="int64") /* ty=Tensor[(1, 8), int64] */;
  %563 = reshape(%561, newshape=[]) /* ty=int64 */;
  %564 = reshape(%562, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), int64] */;
  %565 = @func_2831(%563, %564) /* ty=(Tensor[(1, 4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(840), float64]) */;
  %566 = %560.0;
  %567 = %565.0;
  (%566, %567, %var_4664, %var_4665)
}

def @func_9274() -> (Tensor[(4, 14, 6), float64],) {
  %568 = @func_814() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %569 = %568.1;
  (%569,)
}

def @func_15567(%var_15534: Tensor[(1, 840), float64]) -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(1, 840), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %570 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %571 = cast(%var_15534, dtype="float64") /* ty=Tensor[(1, 840), float64] */;
  %572 = reshape(%571, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float64] */;
  %573 = @func_1236(%572) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
  %574 = @func_7794() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %575 = %570.0;
  %576 = %573.1;
  %577 = %574.0;
  %578 = @func_8317() /* ty=Tensor[(4, 14, 6), float32] */;
  (%575, %576, %var_15534, %577, %578)
}

def @func_1191() -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
  %579 = @func_995() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %580 = @func_868() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %581 = %580.0;
  %582 = cast(%581, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
  %583 = %579.1;
  %584 = erf(%582) /* ty=Tensor[(14, 4, 15), float64] */;
  (%583, %584)
}

def @func_16119(%var_16109: Tensor[(252), float32]) -> (Tensor[(14, 4, 15), float64], Tensor[(12, 3, 7), float32], Tensor[(252), float32]) {
  %585 = @func_3317() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64]) */;
  %586 = cast(%var_16109, dtype="float32") /* ty=Tensor[(252), float32] */;
  %587 = reshape(%586, newshape=[12, 3, 7]) /* ty=Tensor[(12, 3, 7), float32] */;
  %588 = %585.4;
  %589 = @func_7102(%587) /* ty=Tensor[(12, 3, 7), float32] */;
  (%588, %589, %var_16109)
}

def @func_10134() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 5, 6), float64], Tensor[(120), float64], Tensor[(64), float32], Tensor[(15, 3, 2), float64]) {
  %590 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %591 = cast(meta[relay.Constant][19] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %592 = reshape(%591, newshape=[4, 5, 6]) /* ty=Tensor[(4, 5, 6), float64] */;
  %593 = @func_2907() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(14, 4, 15), bool]) */;
  %594 = @func_9344() /* ty=(Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) */;
  %595 = %590.0;
  %596 = @func_4706(%592) /* ty=Tensor[(4, 5, 6), float64] */;
  %597 = %593.2;
  %598 = %594.0;
  (%595, %596, meta[relay.Constant][19] /* ty=Tensor[(120), float64] */, %597, %598)
}

def @func_2576(%var_2560: Tensor[(14, 4, 15), float64]) -> Tensor[(14, 4, 15), bool] {
  %599 = @func_1191() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %600 = %599.1;
  %601 = cast(%var_2560, dtype="bool") /* ty=Tensor[(14, 4, 15), bool] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="bool") /* ty=Tensor[(14, 4, 15), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%603, %604) /* ty=Tensor[(14, 4, 15), bool] */
}

def @func_6455() -> (Tensor[(14, 4, 15), float64],) {
  %605 = @func_2767() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
  %606 = %605.1;
  (%606,)
}

def @func_15859() -> (Tensor[(4, 14, 6), float32],) {
  %607 = @func_12428() /* ty=Tensor[(4, 14, 6), float32] */;
  (%607,)
}

def @func_6283() -> Tensor[(4, 14, 6), float32] {
  @func_5133() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_8975() -> (Tensor[(4, 14, 6), float32],) {
  %608 = @func_8257() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %609 = %608.0;
  (%609,)
}

def @func_9816() -> Tensor[(8, 8, 16), float32] {
  %610 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 8, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 8, 16), float32] */;
  %611 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(8, 8, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 8, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 8, 16), float32] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  multiply(%612, %613) /* ty=Tensor[(8, 8, 16), float32] */
}

def @func_4599() -> (Tensor[(14, 4, 15), float64],) {
  %614 = @func_3655() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
  %615 = %614.1;
  (%615,)
}

def @main(%var_16139: Tensor[(300), bool], %var_16140: Tensor[(32, 2), float32]) -> (Tensor[(4, 14, 6), float64], Tensor[(64), float32], Tensor[(300), bool], Tensor[(32, 2), float32], Tensor[(14, 4, 15), float64]) {
  %616 = @func_9571() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool]) */;
  %617 = cast(%var_16139, dtype="bool") /* ty=Tensor[(300), bool] */;
  %618 = cast(%var_16139, dtype="bool") /* ty=Tensor[(300), bool] */;
  %619 = cast(%var_16140, dtype="float32") /* ty=Tensor[(32, 2), float32] */;
  %620 = reshape(%617, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), bool] */;
  %621 = reshape(%618, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), bool] */;
  %622 = reshape(%619, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %623 = @func_3043(%620, %621, %622) /* ty=(Tensor[(5, 5, 12), bool], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %624 = @func_14135() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
  %625 = %624.0;
  %626 = cast(%625, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
  %627 = %616.0;
  %628 = %623.3;
  %629 = sin(%626) /* ty=Tensor[(14, 4, 15), float64] */;
  (%627, %628, %var_16139, %var_16140, %629)
}

def @func_15230() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %630 = @func_4442() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %631 = %630.0;
  %632 = @func_15099() /* ty=Tensor[(4, 14, 6), float32] */;
  (%631, %632)
}

def @func_11494(%var_11481: uint64) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 4, 7), float64], uint64, Tensor[(112), uint64], Tensor[(64), float32], Tensor[(16, 4), float32]) {
  %633 = @func_4844() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %634 = cast(%var_11481, dtype="uint64") /* ty=uint64 */;
  %635 = cast(meta[relay.Constant][22] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %636 = reshape(%634, newshape=[]) /* ty=uint64 */;
  %637 = reshape(%635, newshape=[112]) /* ty=Tensor[(112), uint64] */;
  %638 = @func_6349(%636, %637) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], uint64, Tensor[(112), uint64], Tensor[(4, 4, 7), float64]) */;
  %639 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 4), float32] */;
  %640 = reshape(%639, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %641 = @func_4290(%640) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 4, 4), float32], Tensor[(64), float32]) */;
  %642 = %633.0;
  %643 = %638.4;
  %644 = %641.2;
  (%642, %643, %var_11481, meta[relay.Constant][22] /* ty=Tensor[(112), uint64] */, %644, meta[relay.Constant][23] /* ty=Tensor[(16, 4), float32] */)
}

def @func_12499() -> Tensor[(4, 14, 6), float64] {
  @func_5696() /* ty=Tensor[(4, 14, 6), float64] */
}

def @func_15820() -> Tensor[(4, 14, 6), float32] {
  @func_8926() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_4844() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %645 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %646 = @func_4442() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %647 = @func_4813() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float32]) */;
  %648 = %645.1;
  %649 = %646.1;
  %650 = %647.0;
  (%648, %649, %650)
}

def @func_4137() -> (Tensor[(4, 14, 6), float32],) {
  %651 = @func_3317() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64]) */;
  %652 = %651.3;
  (%652,)
}

def @func_13448() -> (Tensor[(120), float64], Tensor[(4, 14, 6), float32], Tensor[(300), bool]) {
  %653 = @func_10134() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 5, 6), float64], Tensor[(120), float64], Tensor[(64), float32], Tensor[(15, 3, 2), float64]) */;
  %654 = @func_995() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %655 = @func_5829() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(1170), float64], Tensor[(64), float32]) */;
  %656 = %653.2;
  %657 = %654.0;
  %658 = %655.1;
  (%656, %657, %658)
}

def @func_1236(%var_1205: Tensor[(14, 4, 15), float64]) -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %659 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %660 = @func_868() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %661 = %660.0;
  %662 = cast(%var_1205, dtype="bool") /* ty=Tensor[(14, 4, 15), bool] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%661, dtype="bool") /* ty=Tensor[(14, 4, 15), bool] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %666 = @func_1128() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
  %667 = cast(%661, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
  %668 = @func_914() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %669 = %659.0;
  %670 = logical_and(%664, %665) /* ty=Tensor[(14, 4, 15), bool] */;
  %671 = %666.1;
  %672 = rsqrt(%667) /* ty=Tensor[(14, 4, 15), float64] */;
  %673 = %668.1;
  (%669, %670, %671, %672, %673)
}

def @func_1597() -> (Tensor[(4, 14, 6), float32],) {
  %674 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %675 = %674.0;
  (%675,)
}

def @func_13021() -> Tensor[(14, 4, 15), float64] {
  @func_7249() /* ty=Tensor[(14, 4, 15), float64] */
}

def @func_11642() -> Tensor[(5, 7, 11), float64] {
  %676 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 7, 11), float64] */, dtype="float64") /* ty=Tensor[(5, 7, 11), float64] */;
  rsqrt(%676) /* ty=Tensor[(5, 7, 11), float64] */
}

def @func_8146(%var_8122: Tensor[(13, 6, 6), int16], %var_8133: Tensor[(64), float32]) -> (Tensor[(13, 6, 6), bool], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float32]) {
  %677 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 6, 6), int16] */, dtype="int16") /* ty=Tensor[(13, 6, 6), int16] */;
  %678 = shape_of(%var_8122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%var_8122, dtype="int16") /* ty=Tensor[(13, 6, 6), int16] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %681 = logical_xor(%679, %680) /* ty=Tensor[(13, 6, 6), int16] */;
  %682 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 6, 6), int16] */, dtype="bool") /* ty=Tensor[(13, 6, 6), bool] */;
  %683 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%681, dtype="bool") /* ty=Tensor[(13, 6, 6), bool] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %686 = cast(%var_8133, dtype="float32") /* ty=Tensor[(64), float32] */;
  %687 = reshape(%686, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float32] */;
  %688 = logical_or(%684, %685) /* ty=Tensor[(13, 6, 6), bool] */;
  %689 = @func_2128(%687) /* ty=Tensor[(4, 4, 4), float32] */;
  %690 = @func_2517() /* ty=Tensor[(4, 14, 6), float32] */;
  (%688, %689, %var_8133, %690)
}

def @func_6741() -> (Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) {
  %691 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %692 = @func_5829() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(1170), float64], Tensor[(64), float32]) */;
  %693 = @func_4813() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float32]) */;
  %694 = @func_2329() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %695 = %691.0;
  %696 = @func_4891() /* ty=Tensor[(14, 4, 15), float64] */;
  %697 = %692.3;
  %698 = %693.0;
  %699 = %694.0;
  (%695, %696, %697, %698, %699)
}

def @func_5037() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %700 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %701 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %702 = @func_4120() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
  %703 = %702.0;
  %704 = cast(%703, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
  %705 = @func_1846() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %706 = %700.0;
  %707 = %701.0;
  %708 = erf(%704) /* ty=Tensor[(4, 14, 6), float32] */;
  %709 = %705.0;
  (%706, %707, %708, %709)
}

def @func_14239(%var_14195: Tensor[(1, 252), float32], %var_14205: Tensor[(15, 252), float32], %var_14235: uint8) -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(15, 252), int8], Tensor[(4, 5, 1), float64], Tensor[(15, 252), uint16], Tensor[(4, 14, 6), float32], Tensor[(15, 252), float64], Tensor[(9, 10, 15), bool], uint8, Tensor[(1350), uint8]) {
  %710 = cast(%var_14195, dtype="float32") /* ty=Tensor[(1, 252), float32] */;
  %711 = reshape(%710, newshape=[252]) /* ty=Tensor[(252), float32] */;
  %712 = @func_12214(%711) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(12, 3, 7), float32], Tensor[(252), float32]) */;
  %713 = cast(%var_14195, dtype="int8") /* ty=Tensor[(1, 252), int8] */;
  %714 = cast(%var_14205, dtype="int8") /* ty=Tensor[(15, 252), int8] */;
  %715 = @func_2415() /* ty=(Tensor[(4, 5, 1), float64],) */;
  %716 = cast(%var_14205, dtype="uint16") /* ty=Tensor[(15, 252), uint16] */;
  %717 = cast(%var_14195, dtype="uint16") /* ty=Tensor[(1, 252), uint16] */;
  %718 = @func_12642() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(280), float64]) */;
  %719 = cast(%var_14205, dtype="float64") /* ty=Tensor[(15, 252), float64] */;
  %720 = cast(%var_14235, dtype="uint8") /* ty=uint8 */;
  %721 = cast(meta[relay.Constant][26] /* ty=Tensor[(1350), uint8] */, dtype="uint8") /* ty=Tensor[(1350), uint8] */;
  %722 = reshape(%720, newshape=[]) /* ty=uint8 */;
  %723 = reshape(%721, newshape=[9, 10, 15]) /* ty=Tensor[(9, 10, 15), uint8] */;
  %724 = @func_4217(%722, %723) /* ty=(Tensor[(9, 10, 15), bool], Tensor[(9, 10, 15), uint16], Tensor[(4, 14, 6), float64]) */;
  %725 = @func_12499() /* ty=Tensor[(4, 14, 6), float64] */;
  %726 = %712.0;
  %727 = right_shift(%713, %714) /* ty=Tensor[(15, 252), int8] */;
  %728 = %715.0;
  %729 = maximum(%716, %717) /* ty=Tensor[(15, 252), uint16] */;
  %730 = %718.1;
  %731 = acosh(%719) /* ty=Tensor[(15, 252), float64] */;
  %732 = %724.0;
  (%725, %726, %727, %728, %729, %730, %731, %732, %var_14235, meta[relay.Constant][26] /* ty=Tensor[(1350), uint8] */)
}

def @func_9025() -> Tensor[(4, 14, 6), float32] {
  @func_939() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_12483() -> Tensor[(4, 5, 1), float64] {
  %733 = @func_2415() /* ty=(Tensor[(4, 5, 1), float64],) */;
  %733.0
}

def @func_12019() -> (Tensor[(4, 14, 6), float32], Tensor[(12, 3, 7), float32], Tensor[(252, 1), float32]) {
  %734 = cast(meta[relay.Constant][27] /* ty=Tensor[(252, 1), float32] */, dtype="float32") /* ty=Tensor[(252, 1), float32] */;
  %735 = reshape(%734, newshape=[12, 3, 7]) /* ty=Tensor[(12, 3, 7), float32] */;
  %736 = @func_10948() /* ty=Tensor[(4, 14, 6), float32] */;
  %737 = @func_7102(%735) /* ty=Tensor[(12, 3, 7), float32] */;
  (%736, %737, meta[relay.Constant][27] /* ty=Tensor[(252, 1), float32] */)
}

def @func_13010() -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
  %738 = @func_4385() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %739 = @func_12250() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
  %740 = %738.0;
  %741 = %739.1;
  (%740, %741)
}

def @func_814() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) {
  %742 = @func_467() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %743 = %742.0;
  %744 = cast(%743, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  %745 = acosh(%744) /* ty=Tensor[(4, 14, 6), float64] */;
  %746 = cast(%745, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  %747 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %748 = atanh(%746) /* ty=Tensor[(4, 14, 6), float64] */;
  %749 = %747.1;
  (%748, %749)
}

def @func_12679() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), bool]) {
  %750 = @func_9131() /* ty=Tensor[(4, 14, 6), float32] */;
  %751 = cast(%750, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
  %752 = reshape(%751, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), float32] */;
  %753 = @func_3160(%752) /* ty=Tensor[(4, 14, 6), bool] */;
  (%750, %753)
}

def @func_5472(%var_5450: Tensor[(4, 13, 7), uint32]) -> (Tensor[(4, 13, 7), bool],) {
  %754 = cast(meta[relay.Constant][28] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %755 = cast(%var_5450, dtype="bool") /* ty=Tensor[(4, 13, 7), bool] */;
  %756 = greater_equal(%754, %755) /* ty=Tensor[(4, 13, 7), bool] */;
  (%756,)
}

def @func_5572() -> (Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) {
  %757 = @func_1795() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) */;
  %758 = @func_467() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %759 = @func_876() /* ty=Tensor[(4, 14, 6), float64] */;
  %760 = %757.3;
  %761 = %758.1;
  (%759, %760, %761)
}

def @func_10858() -> (Tensor[(4, 14, 6), float32],) {
  %762 = @func_10134() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 5, 6), float64], Tensor[(120), float64], Tensor[(64), float32], Tensor[(15, 3, 2), float64]) */;
  %763 = %762.0;
  (%763,)
}

def @func_15432(%var_15396: Tensor[(5, 60), bool]) -> (Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(5, 60), bool], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
  %764 = @func_9897() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) */;
  %765 = @func_3465() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %766 = cast(%var_15396, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %767 = reshape(%766, newshape=[10, 30]) /* ty=Tensor[(10, 30), bool] */;
  %768 = @func_5890(%767) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(64), float32], Tensor[(10, 30), bool], Tensor[(2, 32), float32]) */;
  %769 = @func_9683() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %770 = @func_9466() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %771 = %764.0;
  %772 = %765.0;
  %773 = %768.0;
  %774 = %769.1;
  %775 = %770.0;
  (%771, %772, %773, %var_15396, %774, %775)
}

def @func_12214(%var_12205: Tensor[(252), float32]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(12, 3, 7), float32], Tensor[(252), float32]) {
  %776 = @func_5230() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(7, 8, 2), float64]) */;
  %777 = @func_557() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %778 = cast(%var_12205, dtype="float32") /* ty=Tensor[(252), float32] */;
  %779 = reshape(%778, newshape=[12, 3, 7]) /* ty=Tensor[(12, 3, 7), float32] */;
  %780 = %776.0;
  %781 = %777.0;
  %782 = @func_7102(%779) /* ty=Tensor[(12, 3, 7), float32] */;
  (%780, %781, %782, %var_12205)
}

def @func_7102(%var_7099: Tensor[(12, 3, 7), float32]) -> Tensor[(12, 3, 7), float32] {
  %783 = cast(%var_7099, dtype="float32") /* ty=Tensor[(12, 3, 7), float32] */;
  erf(%783) /* ty=Tensor[(12, 3, 7), float32] */
}

def @func_11781() -> Tensor[(15, 3, 2), float64] {
  %784 = @func_1396() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %784.1
}

def @func_1985() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %785 = @func_1597() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %786 = %785.0;
  %787 = @func_978() /* ty=Tensor[(4, 14, 6), float32] */;
  (%786, %787)
}

def @func_9645() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %788 = @func_467() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %789 = @func_8317() /* ty=Tensor[(4, 14, 6), float32] */;
  %790 = %788.0;
  (%789, %790)
}

def @func_3655() -> (Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) {
  %791 = @func_814() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %792 = @func_3465() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %793 = %791.1;
  %794 = %792.0;
  (%793, %794)
}

def @func_11142(%var_11138: bool, %var_11139: Tensor[(36), bool]) -> (Tensor[(4, 14, 6), float32], Tensor[(3, 1, 12), uint32], bool, Tensor[(36), bool]) {
  %795 = @func_10858() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %796 = cast(%var_11138, dtype="bool") /* ty=bool */;
  %797 = cast(%var_11139, dtype="bool") /* ty=Tensor[(36), bool] */;
  %798 = reshape(%796, newshape=[]) /* ty=bool */;
  %799 = reshape(%797, newshape=[3, 1, 12]) /* ty=Tensor[(3, 1, 12), bool] */;
  %800 = @func_3267(%798, %799) /* ty=(Tensor[(3, 1, 12), int32], Tensor[(3, ?, 12), int8], Tensor[(3, 1, 12), uint32], Tensor[(3, ?, 12), bool]) */;
  %801 = %795.0;
  %802 = %800.2;
  (%801, %802, %var_11138, %var_11139)
}

def @func_6016() -> (Tensor[(4, 14, 6), float32],) {
  %803 = @func_1191() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %804 = %803.0;
  (%804,)
}

def @func_7784(%var_7695: Tensor[(300), bool], %var_7776: Tensor[(64), float32]) -> (Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(840), float64], Tensor[(4, 14, 6), float32], Tensor[(64), float32]) {
  %805 = @func_5773() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %806 = @func_4962() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %807 = @func_4844() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %808 = @func_3925() /* ty=Tensor[(14, 4, 15), float64] */;
  %809 = cast(%808, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
  %810 = reshape(%809, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %811 = @func_3734(%810) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(840), float64], Tensor[(4, 14, 6), float64]) */;
  %812 = cast(%var_7695, dtype="bool") /* ty=Tensor[(300), bool] */;
  %813 = reshape(%812, newshape=[10, 30]) /* ty=Tensor[(10, 30), bool] */;
  %814 = @func_5890(%813) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(64), float32], Tensor[(10, 30), bool], Tensor[(2, 32), float32]) */;
  %815 = %814.1;
  %816 = cast(%var_7776, dtype="float32") /* ty=Tensor[(64), float32] */;
  %817 = shape_of(%815, dtype="int32") /* ty=Tensor[(1), int32] */;
  %818 = cast(%815, dtype="float32") /* ty=Tensor[(64), float32] */;
  %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?), float32] */;
  %820 = %805.0;
  %821 = %806.0;
  %822 = %807.2;
  %823 = @func_6283() /* ty=Tensor[(4, 14, 6), float32] */;
  %824 = @func_7260() /* ty=Tensor[(4, 14, 6), float32] */;
  %825 = %811.2;
  %826 = @func_978() /* ty=Tensor[(4, 14, 6), float32] */;
  %827 = mod(%818, %819) /* ty=Tensor[(64), float32] */;
  (%820, %var_7695, %808, %821, %822, %823, %824, %825, %826, %827)
}

def @func_4290(%var_4271: Tensor[(64), float32]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 4, 4), float32], Tensor[(64), float32]) {
  %828 = @func_1998() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %829 = cast(%var_4271, dtype="float32") /* ty=Tensor[(64), float32] */;
  %830 = reshape(%829, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float32] */;
  %831 = %828.0;
  %832 = @func_2128(%830) /* ty=Tensor[(4, 4, 4), float32] */;
  (%831, %832, %var_4271)
}

def @func_14841() -> (Tensor[(14, 4, 15), float32],) {
  %833 = @func_868() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %834 = %833.0;
  %835 = cast(%834, dtype="float32") /* ty=Tensor[(14, 4, 15), float32] */;
  %836 = sinh(%835) /* ty=Tensor[(14, 4, 15), float32] */;
  (%836,)
}

def @func_14684(%var_14667: int64) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 5, 6), float64], Tensor[(120), float64], Tensor[(4, 14, 6), float32], int64, Tensor[(4, 2), int64], Tensor[(4, 14, 6), float64]) {
  %837 = @func_11009() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %838 = cast(meta[relay.Constant][29] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %839 = reshape(%838, newshape=[4, 5, 6]) /* ty=Tensor[(4, 5, 6), float64] */;
  %840 = cast(%var_14667, dtype="int64") /* ty=int64 */;
  %841 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 2), int64] */, dtype="int64") /* ty=Tensor[(4, 2), int64] */;
  %842 = reshape(%840, newshape=[]) /* ty=int64 */;
  %843 = reshape(%841, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), int64] */;
  %844 = @func_2831(%842, %843) /* ty=(Tensor[(1, 4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(840), float64]) */;
  %845 = cast(%var_14667, dtype="int64") /* ty=int64 */;
  %846 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 2), int64] */, dtype="int64") /* ty=Tensor[(4, 2), int64] */;
  %847 = reshape(%845, newshape=[]) /* ty=int64 */;
  %848 = reshape(%846, newshape=[8]) /* ty=Tensor[(8), int64] */;
  %849 = @func_2953(%847, %848) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], int64, Tensor[(8), int64]) */;
  %850 = %837.0;
  %851 = @func_4706(%839) /* ty=Tensor[(4, 5, 6), float64] */;
  %852 = %844.1;
  %853 = %849.0;
  (%850, %851, meta[relay.Constant][29] /* ty=Tensor[(120), float64] */, %852, %var_14667, meta[relay.Constant][30] /* ty=Tensor[(4, 2), int64] */, %853)
}

def @func_3465() -> (Tensor[(14, 4, 15), float64],) {
  %854 = @func_2146() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
  %855 = %854.1;
  (%855,)
}

def @func_10980(%var_10965: bool, %var_10966: Tensor[(36), bool]) -> (Tensor[(4, 14, 6), float32], Tensor[(3, 1, 12), uint32], bool, Tensor[(36), bool], Tensor[(4, 14, 6), float32]) {
  %856 = cast(%var_10965, dtype="bool") /* ty=bool */;
  %857 = cast(%var_10966, dtype="bool") /* ty=Tensor[(36), bool] */;
  %858 = reshape(%856, newshape=[]) /* ty=bool */;
  %859 = reshape(%857, newshape=[3, 1, 12]) /* ty=Tensor[(3, 1, 12), bool] */;
  %860 = @func_3267(%858, %859) /* ty=(Tensor[(3, 1, 12), int32], Tensor[(3, ?, 12), int8], Tensor[(3, 1, 12), uint32], Tensor[(3, ?, 12), bool]) */;
  %861 = @func_914() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %862 = @func_6992() /* ty=Tensor[(4, 14, 6), float32] */;
  %863 = %860.2;
  %864 = %861.0;
  (%862, %863, %var_10965, %var_10966, %864)
}

def @func_7260() -> Tensor[(4, 14, 6), float32] {
  %865 = @func_6870() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %865.0
}

def @func_7816() -> (Tensor[(14, 4, 15), float64],) {
  %866 = @func_1795() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) */;
  %867 = %866.1;
  (%867,)
}

def @func_9738() -> (Tensor[(4, 5, 1), float64],) {
  %868 = @func_3500() /* ty=(Tensor[(4, 5, 1), float64],) */;
  %869 = %868.0;
  (%869,)
}

def @func_12626() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 4, 4), float32], Tensor[(8, 8), float32]) {
  %870 = @func_9645() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %871 = cast(meta[relay.Constant][31] /* ty=Tensor[(8, 8), float32] */, dtype="float32") /* ty=Tensor[(8, 8), float32] */;
  %872 = reshape(%871, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float32] */;
  %873 = %870.0;
  %874 = @func_2128(%872) /* ty=Tensor[(4, 4, 4), float32] */;
  (%873, %874, meta[relay.Constant][31] /* ty=Tensor[(8, 8), float32] */)
}

def @func_3317() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64]) {
  %875 = @func_2146() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
  %876 = %875.0;
  %877 = cast(%876, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
  %878 = reshape(%877, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), float32] */;
  %879 = @func_1128() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
  %880 = @func_1883() /* ty=Tensor[(4, 14, 6), float32] */;
  %881 = @func_3160(%878) /* ty=Tensor[(4, 14, 6), bool] */;
  %882 = %879.2;
  %883 = @func_2402() /* ty=Tensor[(14, 4, 15), float64] */;
  %884 = @func_2254() /* ty=Tensor[(14, 4, 15), float64] */;
  (%880, %876, %881, %882, %883, %884)
}

def @func_8257() -> (Tensor[(4, 14, 6), float32],) {
  %885 = @func_6992() /* ty=Tensor[(4, 14, 6), float32] */;
  (%885,)
}

def @func_14438() -> (Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), bool], Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64], Tensor[(15, 3, 2), float32]) {
  %886 = @func_5572() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
  %887 = @func_7407() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), bool]) */;
  %888 = @func_1795() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) */;
  %889 = @func_9032() /* ty=Tensor[(15, 3, 2), float64] */;
  %890 = cast(%889, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
  %891 = cast(%889, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
  %892 = sinh(%891) /* ty=Tensor[(15, 3, 2), float64] */;
  %893 = cast(%892, dtype="float32") /* ty=Tensor[(15, 3, 2), float32] */;
  %894 = %886.0;
  %895 = %887.3;
  %896 = %888.0;
  %897 = acos(%890) /* ty=Tensor[(15, 3, 2), float64] */;
  %898 = exp(%893) /* ty=Tensor[(15, 3, 2), float32] */;
  (%894, %895, %896, %897, %898)
}

def @func_6870() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) {
  %899 = @func_4066() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %900 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %901 = %899.0;
  %902 = %900.0;
  (%901, %902)
}

def @func_7495(%var_7459: Tensor[(8, 2, 2), float32]) -> (Tensor[(8, 2, 2), float32], Tensor[(1, 4, 2), int64], int64, Tensor[(2, 4), int64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %903 = cast(%var_7459, dtype="float32") /* ty=Tensor[(8, 2, 2), float32] */;
  %904 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %905 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 4), int64] */, dtype="int64") /* ty=Tensor[(2, 4), int64] */;
  %906 = reshape(%904, newshape=[]) /* ty=int64 */;
  %907 = reshape(%905, newshape=[1, 8]) /* ty=Tensor[(1, 8), int64] */;
  %908 = @func_4668(%906, %907) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(1, 4, 2), int64], int64, Tensor[(1, 8), int64]) */;
  %909 = @func_3655() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
  %910 = @func_5540() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %911 = log(%903) /* ty=Tensor[(8, 2, 2), float32] */;
  %912 = %908.1;
  %913 = %909.0;
  %914 = %910.4;
  (%911, %912, 6 /* ty=int64 */, meta[relay.Constant][32] /* ty=Tensor[(2, 4), int64] */, %913, %914)
}

def @func_8850() -> Tensor[(4, 14, 6), float32] {
  %915 = @func_5572() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
  %915.2
}

def @func_13903() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], bool, bool, Tensor[(36), bool], Tensor[(4, 14, 6), float32]) {
  %916 = @func_13131() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %917 = @func_11168() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %918 = @func_9466() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %919 = @func_8457() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) */;
  %920 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %921 = cast(meta[relay.Constant][33] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %922 = reshape(%920, newshape=[]) /* ty=bool */;
  %923 = reshape(%921, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %924 = @func_11142(%922, %923) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(3, 1, 12), uint32], bool, Tensor[(36), bool]) */;
  %925 = %916.0;
  %926 = %917.0;
  %927 = %918.0;
  %928 = %919.2;
  %929 = %924.2;
  %930 = @func_8850() /* ty=Tensor[(4, 14, 6), float32] */;
  (%925, %926, %927, %928, %929, True /* ty=bool */, meta[relay.Constant][33] /* ty=Tensor[(36), bool] */, %930)
}

def @func_15099() -> Tensor[(4, 14, 6), float32] {
  %931 = @func_11009() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %931.0
}

def @func_2517() -> Tensor[(4, 14, 6), float32] {
  %932 = @func_467() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %932.0
}

def @func_9585() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64]) {
  %933 = @func_2647() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %934 = @func_6042() /* ty=Tensor[(14, 4, 15), float64] */;
  %935 = %933.0;
  (%934, %935)
}

def @func_9032() -> Tensor[(15, 3, 2), float64] {
  %936 = @func_5572() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
  %936.1
}

def @func_12325() -> (Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) {
  %937 = @func_5179() /* ty=(Tensor[(15, 3, 2), float64],) */;
  %938 = %937.0;
  %939 = cast(%938, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
  %940 = @func_6752() /* ty=Tensor[(4, 14, 6), float64] */;
  %941 = atanh(%939) /* ty=Tensor[(15, 3, 2), float64] */;
  (%940, %941)
}

def @func_1470(%var_1432: Tensor[(4, 14, 6), float32]) -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) {
  %942 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %943 = %942.0;
  %944 = cast(%var_1432, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  %945 = shape_of(%943, dtype="int32") /* ty=Tensor[(3), int32] */;
  %946 = cast(%943, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  %947 = dyn.reshape(%944, %945, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %948 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %949 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %950 = @func_1191() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %951 = maximum(%946, %947) /* ty=Tensor[(4, 14, 6), float64] */;
  %952 = %948.1;
  %953 = %949.1;
  %954 = %950.1;
  (%951, %952, %953, %954)
}

def @func_10144() -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
  %955 = @func_2095() /* ty=Tensor[(4, 14, 6), float32] */;
  %956 = @func_4891() /* ty=Tensor[(14, 4, 15), float64] */;
  (%955, %956)
}

def @func_2767() -> (Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) {
  %957 = @func_2647() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %958 = %957.0;
  %959 = @func_2402() /* ty=Tensor[(14, 4, 15), float64] */;
  (%958, %959)
}

def @func_5329() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
  %960 = @func_4066() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %961 = @func_2329() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %962 = @func_1396() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %963 = %960.2;
  %964 = %961.1;
  %965 = %962.1;
  (%963, %964, %965)
}

def @func_876() -> Tensor[(4, 14, 6), float64] {
  %966 = @func_814() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %966.0
}

def @func_8317() -> Tensor[(4, 14, 6), float32] {
  %967 = @func_5829() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(1170), float64], Tensor[(64), float32]) */;
  %967.0
}

def @func_12061() -> Tensor[(4, 14, 6), float64] {
  %968 = @func_2329() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %968.0
}

def @func_11720() -> Tensor[(64), float32] {
  %969 = @func_5829() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(1170), float64], Tensor[(64), float32]) */;
  %969.3
}

def @func_8306() -> (Tensor[(4, 14, 6), float32],) {
  %970 = @func_2193() /* ty=Tensor[(4, 14, 6), float32] */;
  (%970,)
}

def @func_6042() -> Tensor[(14, 4, 15), float64] {
  %971 = @func_4599() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %971.0
}

def @func_939() -> Tensor[(4, 14, 6), float32] {
  %972 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %972.0
}

def @func_5540() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %973 = @func_4442() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %974 = @func_1128() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
  %975 = @func_3465() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %976 = @func_4137() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %977 = @func_995() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %978 = %973.0;
  %979 = %974.2;
  %980 = %975.0;
  %981 = %976.0;
  %982 = %977.0;
  (%978, %979, %980, %981, %982)
}

def @func_1396() -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
  %983 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %984 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %985 = %983.1;
  %986 = %984.1;
  (%985, %986)
}

def @func_4813() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float32]) {
  %987 = @func_2767() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
  %988 = @func_1128() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
  %989 = %988.1;
  %990 = cast(%989, dtype="float32") /* ty=Tensor[(15, 3, 2), float32] */;
  %991 = @func_939() /* ty=Tensor[(4, 14, 6), float32] */;
  %992 = %987.0;
  %993 = asin(%990) /* ty=Tensor[(15, 3, 2), float32] */;
  (%991, %992, %993)
}

def @func_6648() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64]) {
  %994 = @func_3465() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %995 = %994.0;
  %996 = @func_876() /* ty=Tensor[(4, 14, 6), float64] */;
  (%995, %996)
}

def @func_5347(%var_5343: Tensor[(14, 5, 12), float32]) -> Tensor[(14, 5, 12), float32] {
  %997 = cast(%var_5343, dtype="float32") /* ty=Tensor[(14, 5, 12), float32] */;
  log10(%997) /* ty=Tensor[(14, 5, 12), float32] */
}

def @func_4417() -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), bool]) {
  %998 = @func_4385() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %999 = @func_2329() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %1000 = %999.2;
  %1001 = cast(%1000, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
  %1002 = reshape(%1001, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float64] */;
  %1003 = %998.0;
  %1004 = @func_2576(%1002) /* ty=Tensor[(14, 4, 15), bool] */;
  (%1003, %1000, %1004)
}

def @func_15183() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %1005 = @func_6400() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %1006 = %1005.0;
  %1007 = @func_13634() /* ty=Tensor[(4, 14, 6), float32] */;
  (%1006, %1007)
}

def @func_1998() -> (Tensor[(4, 14, 6), float32],) {
  %1008 = @func_1846() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %1009 = %1008.0;
  (%1009,)
}

def @func_5073() -> (Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) {
  %1010 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %1011 = %1010.1;
  %1012 = @func_2254() /* ty=Tensor[(14, 4, 15), float64] */;
  (%1011, %1012)
}

def @func_5943() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %1013 = @func_4471() /* ty=Tensor[(4, 14, 6), float64] */;
  %1014 = @func_1883() /* ty=Tensor[(4, 14, 6), float32] */;
  (%1013, %1014)
}

def @func_15074() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) {
  %1015 = @func_4066() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %1016 = @func_13974() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(6, 12, 16), uint8], Tensor[(4, 14, 6), float32]) */;
  %1017 = %1015.2;
  %1018 = %1016.0;
  (%1017, %1018)
}

def @func_9344() -> (Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) {
  %1019 = @func_5179() /* ty=(Tensor[(15, 3, 2), float64],) */;
  %1020 = %1019.0;
  %1021 = @func_4891() /* ty=Tensor[(14, 4, 15), float64] */;
  (%1020, %1021)
}

def @func_868() -> (Tensor[(14, 4, 15), float64],) {
  %1022 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 4, 15), float64] */, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
  %1023 = asinh(%1022) /* ty=Tensor[(14, 4, 15), float64] */;
  (%1023,)
}

def @func_7654(%var_7596: float32, %var_7628: Tensor[(1, 840), float32]) -> (Tensor[(6, 5, 4), float32], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 5, 12), float32], Tensor[(4, 14, 6), float32], Tensor[(1, 840), float32]) {
  %1024 = cast(%var_7596, dtype="float32") /* ty=float32 */;
  %1025 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 5, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 5, 4), float32] */;
  %1026 = @func_6648() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64]) */;
  %1027 = @func_4385() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %1028 = cast(%var_7628, dtype="float32") /* ty=Tensor[(1, 840), float32] */;
  %1029 = reshape(%1028, newshape=[14, 5, 12]) /* ty=Tensor[(14, 5, 12), float32] */;
  %1030 = cast(%var_7628, dtype="float32") /* ty=Tensor[(1, 840), float32] */;
  %1031 = power(%1024, %1025) /* ty=Tensor[(6, 5, 4), float32] */;
  %1032 = %1026.1;
  %1033 = %1027.0;
  %1034 = @func_5347(%1029) /* ty=Tensor[(14, 5, 12), float32] */;
  %1035 = @func_1883() /* ty=Tensor[(4, 14, 6), float32] */;
  %1036 = atanh(%1030) /* ty=Tensor[(1, 840), float32] */;
  (%1031, %1032, %1033, %1034, %1035, %1036)
}

def @func_995() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %1037 = @func_467() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %1038 = @func_657() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %1039 = %1037.0;
  %1040 = %1038.1;
  (%1039, %1040)
}

def @func_13066() -> Tensor[(4, 14, 6), float32] {
  @func_2547() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_6752() -> Tensor[(4, 14, 6), float64] {
  %1041 = @func_3070() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %1041.0
}

def @func_9844(%var_9826: Tensor[(2, 2, 16), float64]) -> Tensor[(2, 2, 16), float64] {
  %1042 = cast(%var_9826, dtype="float64") /* ty=Tensor[(2, 2, 16), float64] */;
  acos(%1042) /* ty=Tensor[(2, 2, 16), float64] */
}

def @func_2254() -> Tensor[(14, 4, 15), float64] {
  %1043 = @func_1795() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) */;
  %1043.1
}

def @func_5394() -> Tensor[(4, 14, 6), float32] {
  %1044 = @func_4137() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %1044.0
}

def @func_9705(%var_9695: Tensor[(11, 9, 11), uint8], %var_9696: Tensor[(11, 9, 11), uint8]) -> (Tensor[(11, 9, 11), uint8], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
  %1045 = cast(%var_9696, dtype="uint8") /* ty=Tensor[(11, 9, 11), uint8] */;
  %1046 = shape_of(%var_9695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1047 = cast(%var_9695, dtype="uint8") /* ty=Tensor[(11, 9, 11), uint8] */;
  %1048 = dyn.reshape(%1045, %1046, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1049 = @func_4417() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), bool]) */;
  %1050 = bitwise_or(%1047, %1048) /* ty=Tensor[(11, 9, 11), uint8] */;
  %1051 = @func_2547() /* ty=Tensor[(4, 14, 6), float32] */;
  %1052 = %1049.1;
  (%1050, %1051, %1052)
}

def @func_2907() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(14, 4, 15), bool]) {
  %1053 = cast(meta[relay.Constant][36] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1054 = reshape(%1053, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float32] */;
  %1055 = @func_2254() /* ty=Tensor[(14, 4, 15), float64] */;
  %1056 = cast(%1055, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
  %1057 = reshape(%1056, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float64] */;
  %1058 = @func_2128(%1054) /* ty=Tensor[(4, 4, 4), float32] */;
  %1059 = @func_2576(%1057) /* ty=Tensor[(14, 4, 15), bool] */;
  (%1055, %1058, meta[relay.Constant][36] /* ty=Tensor[(64), float32] */, %1059)
}

def @func_8868() -> (Tensor[(14, 4, 15), float64],) {
  %1060 = @func_868() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %1061 = %1060.0;
  (%1061,)
}

def @func_7249() -> Tensor[(14, 4, 15), float64] {
  @func_3856() /* ty=Tensor[(14, 4, 15), float64] */
}

def @func_914() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %1062 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %1063 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %1064 = %1062.0;
  %1065 = %1063.0;
  (%1064, %1065)
}

def @func_15840() -> Tensor[(4, 14, 6), float32] {
  %1066 = @func_14320() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %1066.0
}

def @func_11187() -> (Tensor[(4, 14, 6), float32],) {
  %1067 = @func_8257() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %1068 = %1067.0;
  (%1068,)
}

def @func_14758() -> Tensor[(4, 14, 6), float32] {
  %1069 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %1069.0
}

def @func_7077() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %1070 = @func_5073() /* ty=(Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) */;
  %1071 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %1072 = %1070.1;
  %1073 = %1071.0;
  (%1072, %1073)
}

def @func_6537(%var_6523: Tensor[(2304), float64]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(12, 16, 12), float64], Tensor[(2304), float64]) {
  %1074 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %1075 = cast(%var_6523, dtype="float64") /* ty=Tensor[(2304), float64] */;
  %1076 = reshape(%1075, newshape=[12, 16, 12]) /* ty=Tensor[(12, 16, 12), float64] */;
  %1077 = %1074.0;
  %1078 = @func_1883() /* ty=Tensor[(4, 14, 6), float32] */;
  %1079 = @func_3403(%1076) /* ty=Tensor[(12, 16, 12), float64] */;
  (%1077, %1078, %1079, %var_6523)
}

def @func_14521() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 5, ?), bool]) {
  %1080 = @func_9738() /* ty=(Tensor[(4, 5, 1), float64],) */;
  %1081 = %1080.0;
  %1082 = cast(%1081, dtype="float64") /* ty=Tensor[(4, 5, 1), float64] */;
  %1083 = atanh(%1082) /* ty=Tensor[(4, 5, 1), float64] */;
  %1084 = cast(%1081, dtype="int8") /* ty=Tensor[(4, 5, 1), int8] */;
  %1085 = shape_of(%1083, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1086 = cast(%1083, dtype="int8") /* ty=Tensor[(4, 5, 1), int8] */;
  %1087 = dyn.reshape(%1084, %1085, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1088 = bitwise_or(%1086, %1087) /* ty=Tensor[(4, 5, ?), int8] */;
  %1089 = cast(%1083, dtype="bool") /* ty=Tensor[(4, 5, 1), bool] */;
  %1090 = shape_of(%1088, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1091 = cast(%1088, dtype="bool") /* ty=Tensor[(4, 5, ?), bool] */;
  %1092 = dyn.reshape(%1089, %1090, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1093 = @func_7249() /* ty=Tensor[(14, 4, 15), float64] */;
  %1094 = greater(%1091, %1092) /* ty=Tensor[(4, 5, ?), bool] */;
  (%1093, %1094)
}

def @func_14481() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
  %1095 = @func_4599() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %1096 = @func_2329() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %1097 = @func_4385() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %1098 = @func_10144() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %1099 = @func_1846() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %1100 = %1095.0;
  %1101 = %1096.0;
  %1102 = %1097.0;
  %1103 = %1098.1;
  %1104 = %1099.0;
  %1105 = @func_2361() /* ty=Tensor[(15, 3, 2), float64] */;
  (%1100, %1101, %1102, %1103, %1104, %1105)
}

def @func_11921(%var_11854: bool) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], bool, bool, Tensor[(36), bool], Tensor[(3, 1, 12), float64]) {
  %1106 = @func_868() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %1107 = @func_1191() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %1108 = cast(%var_11854, dtype="bool") /* ty=bool */;
  %1109 = cast(meta[relay.Constant][37] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %1110 = reshape(%1108, newshape=[]) /* ty=bool */;
  %1111 = reshape(%1109, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %1112 = @func_10980(%1110, %1111) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(3, 1, 12), uint32], bool, Tensor[(36), bool], Tensor[(4, 14, 6), float32]) */;
  %1113 = cast(%var_11854, dtype="bool") /* ty=bool */;
  %1114 = cast(meta[relay.Constant][37] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %1115 = reshape(%1113, newshape=[]) /* ty=bool */;
  %1116 = reshape(%1114, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %1117 = @func_11142(%1115, %1116) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(3, 1, 12), uint32], bool, Tensor[(36), bool]) */;
  %1118 = %1117.1;
  %1119 = cast(%1118, dtype="float64") /* ty=Tensor[(3, 1, 12), float64] */;
  %1120 = @func_939() /* ty=Tensor[(4, 14, 6), float32] */;
  %1121 = @func_2517() /* ty=Tensor[(4, 14, 6), float32] */;
  %1122 = %1106.0;
  %1123 = %1107.0;
  %1124 = %1112.2;
  %1125 = atan(%1119) /* ty=Tensor[(3, 1, 12), float64] */;
  (%1120, %1121, %1122, %1123, %1124, %var_11854, meta[relay.Constant][37] /* ty=Tensor[(36), bool] */, %1125)
}

def @func_8457() -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) {
  %1126 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %1127 = @func_667() /* ty=(Tensor[(15, 3, 2), float64],) */;
  %1128 = @func_3465() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %1129 = %1126.0;
  %1130 = %1127.0;
  %1131 = %1128.0;
  (%1129, %1130, %1131)
}

def @func_4891() -> Tensor[(14, 4, 15), float64] {
  @func_2254() /* ty=Tensor[(14, 4, 15), float64] */
}

def @func_5230() -> (Tensor[(4, 14, 6), float32], Tensor[(7, 8, 2), float64]) {
  %1132 = @func_4962() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %1133 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(7, 8, 2), float64] */;
  %1134 = sin(%1133) /* ty=Tensor[(7, 8, 2), float64] */;
  %1135 = cast(%1134, dtype="float64") /* ty=Tensor[(7, 8, 2), float64] */;
  %1136 = %1132.0;
  %1137 = tan(%1135) /* ty=Tensor[(7, 8, 2), float64] */;
  (%1136, %1137)
}

def @func_420() -> (Tensor[(4, 14, 6), float32],) {
  %1138 = cast(meta[relay.Constant][40] /* ty=Tensor[(4, 14, 6), float32] */, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
  %1139 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(4, 14, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1140 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 14, 6), float32] */, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
  %1141 = dyn.reshape(%1138, %1139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1142 = equal(%1140, %1141) /* ty=Tensor[(4, 14, 6), bool] */;
  %1143 = cast(%1142, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
  %1144 = sigmoid(%1143) /* ty=Tensor[(4, 14, 6), float32] */;
  %1145 = cast(%1144, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
  %1146 = sinh(%1145) /* ty=Tensor[(4, 14, 6), float32] */;
  (%1146,)
}

def @func_1045() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %1147 = @func_814() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %1148 = @func_914() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %1149 = %1147.1;
  %1150 = %1148.0;
  (%1149, %1150)
}

def @func_12337() -> (Tensor[(4, 14, 6), float32],) {
  %1151 = @func_8306() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %1152 = %1151.0;
  (%1152,)
}

def @func_657() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %1153 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %1154 = @func_557() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %1155 = %1153.1;
  %1156 = %1154.1;
  (%1155, %1156)
}

def @func_3433() -> Tensor[(15, 3, 2), float64] {
  %1157 = @func_1396() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %1157.1
}

def @func_7552() -> Tensor[(15, 3, 2), float32] {
  %1158 = @func_3433() /* ty=Tensor[(15, 3, 2), float64] */;
  %1159 = cast(%1158, dtype="float32") /* ty=Tensor[(15, 3, 2), float32] */;
  log(%1159) /* ty=Tensor[(15, 3, 2), float32] */
}

def @func_5133() -> Tensor[(4, 14, 6), float32] {
  %1160 = @func_657() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %1160.1
}

def @func_10424() -> (Tensor[(4, 14, 6), float64],) {
  %1161 = @func_2146() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
  %1162 = %1161.0;
  (%1162,)
}

def @func_12880() -> (Tensor[(4, 14, 6), float32],) {
  %1163 = @func_12250() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
  %1164 = %1163.3;
  (%1164,)
}

def @func_2240(%var_2235: Tensor[(4, 14, 6), float32]) -> Tensor[(4, 14, 6), float32] {
  %1165 = @func_1985() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %1166 = %1165.0;
  %1167 = cast(%var_2235, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
  %1168 = shape_of(%1166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1169 = cast(%1166, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
  %1170 = dyn.reshape(%1167, %1168, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%1169, %1170) /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_8554() -> (Tensor[(15, 3, 2), float64],) {
  %1171 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %1172 = %1171.1;
  (%1172,)
}

def @func_11051() -> (Tensor[(4, 14, 6), float32],) {
  %1173 = @func_5230() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(7, 8, 2), float64]) */;
  %1174 = %1173.0;
  (%1174,)
}

def @func_10218(%var_10193: Tensor[(14, 4, 15), float64]) -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %1175 = @func_9344() /* ty=(Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) */;
  %1176 = %1175.1;
  %1177 = cast(%var_10193, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
  %1178 = shape_of(%1176, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1179 = cast(%1176, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
  %1180 = dyn.reshape(%1177, %1178, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1181 = @func_5329() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %1182 = mod(%1179, %1180) /* ty=Tensor[(14, 4, 15), float64] */;
  %1183 = %1181.1;
  (%1182, %1183)
}

def @func_4120() -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %1184 = @func_868() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %1185 = @func_4066() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %1186 = @func_2517() /* ty=Tensor[(4, 14, 6), float32] */;
  %1187 = %1184.0;
  %1188 = %1185.0;
  (%1186, %1187, %1188)
}

def @func_2415() -> (Tensor[(4, 5, 1), float64],) {
  %1189 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 5, 1), float64] */, dtype="float64") /* ty=Tensor[(4, 5, 1), float64] */;
  %1190 = exp(%1189) /* ty=Tensor[(4, 5, 1), float64] */;
  (%1190,)
}

def @func_7979(%var_7968: Tensor[(3, 16, 2), float64], %var_7969: Tensor[(3, 16, 2), float64]) -> (Tensor[(3, 16, 2), float64],) {
  %1191 = cast(%var_7969, dtype="float64") /* ty=Tensor[(3, 16, 2), float64] */;
  %1192 = shape_of(%var_7968, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1193 = cast(%var_7968, dtype="float64") /* ty=Tensor[(3, 16, 2), float64] */;
  %1194 = dyn.reshape(%1191, %1192, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1195 = floor_divide(%1193, %1194) /* ty=Tensor[(3, 16, 2), float64] */;
  (%1195,)
}

def @func_12668() -> Tensor[(15, 3, 2), float64] {
  @func_3433() /* ty=Tensor[(15, 3, 2), float64] */
}

def @func_1846() -> (Tensor[(4, 14, 6), float32],) {
  %1196 = @func_1128() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
  %1197 = %1196.0;
  (%1197,)
}

def @func_4635() -> Tensor[(4, 5, 1), float64] {
  %1198 = @func_3500() /* ty=(Tensor[(4, 5, 1), float64],) */;
  %1198.0
}

def @func_5696() -> Tensor[(4, 14, 6), float64] {
  %1199 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %1199.1
}

def @func_3267(%var_3198: bool, %var_3199: Tensor[(3, 1, 12), bool]) -> (Tensor[(3, 1, 12), int32], Tensor[(3, ?, 12), int8], Tensor[(3, 1, 12), uint32], Tensor[(3, ?, 12), bool]) {
  %1200 = cast(%var_3198, dtype="bool") /* ty=bool */;
  %1201 = cast(%var_3199, dtype="bool") /* ty=Tensor[(3, 1, 12), bool] */;
  %1202 = logical_and(%1200, %1201) /* ty=Tensor[(3, 1, 12), bool] */;
  %1203 = cast(%1202, dtype="int32") /* ty=Tensor[(3, 1, 12), int32] */;
  %1204 = cast(%var_3198, dtype="int32") /* ty=int32 */;
  %1205 = cast(%1202, dtype="bool") /* ty=Tensor[(3, 1, 12), bool] */;
  %1206 = cast(%var_3198, dtype="bool") /* ty=bool */;
  %1207 = less_equal(%1205, %1206) /* ty=Tensor[(3, 1, 12), bool] */;
  %1208 = cast(%1207, dtype="float64") /* ty=Tensor[(3, 1, 12), float64] */;
  %1209 = shape_of(%1202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1210 = cast(%1202, dtype="float64") /* ty=Tensor[(3, 1, 12), float64] */;
  %1211 = dyn.reshape(%1208, %1209, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1212 = divide(%1210, %1211) /* ty=Tensor[(3, ?, 12), float64] */;
  %1213 = cast(%1212, dtype="int8") /* ty=Tensor[(3, ?, 12), int8] */;
  %1214 = shape_of(%1207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1215 = cast(%1207, dtype="int8") /* ty=Tensor[(3, 1, 12), int8] */;
  %1216 = dyn.reshape(%1213, %1214, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1217 = cast(%var_3199, dtype="uint32") /* ty=Tensor[(3, 1, 12), uint32] */;
  %1218 = cast(%var_3198, dtype="uint32") /* ty=uint32 */;
  %1219 = cast(%var_3199, dtype="bool") /* ty=Tensor[(3, 1, 12), bool] */;
  %1220 = shape_of(%1202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1221 = cast(%1202, dtype="bool") /* ty=Tensor[(3, 1, 12), bool] */;
  %1222 = dyn.reshape(%1219, %1220, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1223 = add(%1203, %1204) /* ty=Tensor[(3, 1, 12), int32] */;
  %1224 = bitwise_and(%1215, %1216) /* ty=Tensor[(3, ?, 12), int8] */;
  %1225 = right_shift(%1217, %1218) /* ty=Tensor[(3, 1, 12), uint32] */;
  %1226 = not_equal(%1221, %1222) /* ty=Tensor[(3, ?, 12), bool] */;
  (%1223, %1224, %1225, %1226)
}

def @func_2438(%var_2430: uint64, %var_2431: Tensor[(4, 4, 7), uint64]) -> Tensor[(4, 4, 7), bool] {
  %1227 = cast(%var_2430, dtype="bool") /* ty=bool */;
  %1228 = cast(%var_2431, dtype="bool") /* ty=Tensor[(4, 4, 7), bool] */;
  greater_equal(%1227, %1228) /* ty=Tensor[(4, 4, 7), bool] */
}

def @func_2831(%var_2794: int64, %var_2795: Tensor[(1, 4, 2), int64]) -> (Tensor[(1, 4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(840), float64]) {
  %1229 = cast(%var_2794, dtype="int64") /* ty=int64 */;
  %1230 = cast(%var_2795, dtype="int64") /* ty=Tensor[(1, 4, 2), int64] */;
  %1231 = cast(meta[relay.Constant][42] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %1232 = reshape(%1231, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float64] */;
  %1233 = left_shift(%1229, %1230) /* ty=Tensor[(1, 4, 2), int64] */;
  %1234 = @func_2193() /* ty=Tensor[(4, 14, 6), float32] */;
  %1235 = @func_2576(%1232) /* ty=Tensor[(14, 4, 15), bool] */;
  (%1233, %1234, %1235, meta[relay.Constant][42] /* ty=Tensor[(840), float64] */)
}

def @func_12250() -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %1236 = @func_2329() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %1237 = @func_2146() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
  %1238 = @func_4066() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %1239 = %1236.1;
  %1240 = %1237.1;
  %1241 = @func_2402() /* ty=Tensor[(14, 4, 15), float64] */;
  %1242 = %1238.2;
  (%1239, %1240, %1241, %1242)
}

def @func_7961(%var_7924: Tensor[(112), uint64]) -> (Tensor[(4, 14, 6), float32], uint64, Tensor[(112), uint64], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 7), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 4, 7), float64]) {
  %1243 = @func_4813() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float32]) */;
  %1244 = cast(meta[relay.Constant][43] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %1245 = cast(%var_7924, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %1246 = reshape(%1244, newshape=[]) /* ty=uint64 */;
  %1247 = reshape(%1245, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), uint64] */;
  %1248 = @func_2438(%1246, %1247) /* ty=Tensor[(4, 4, 7), bool] */;
  %1249 = cast(%1248, dtype="float32") /* ty=Tensor[(4, 4, 7), float32] */;
  %1250 = sin(%1249) /* ty=Tensor[(4, 4, 7), float32] */;
  %1251 = cast(%1250, dtype="float64") /* ty=Tensor[(4, 4, 7), float64] */;
  %1252 = @func_2146() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
  %1253 = cast(%1248, dtype="float64") /* ty=Tensor[(4, 4, 7), float64] */;
  %1254 = @func_5979() /* ty=Tensor[(4, 14, 6), float32] */;
  %1255 = %1243.1;
  %1256 = asinh(%1251) /* ty=Tensor[(4, 4, 7), float64] */;
  %1257 = %1252.1;
  %1258 = acosh(%1253) /* ty=Tensor[(4, 4, 7), float64] */;
  (%1254, meta[relay.Constant][43] /* ty=uint64 */, %var_7924, %1255, %1256, %1257, %1258)
}

def @func_14785() -> (Tensor[(4, 14, 6), float64],) {
  %1259 = @func_2647() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %1260 = %1259.0;
  (%1260,)
}

def @func_13726(%var_13720: Tensor[(2, 1, 1), bool], %var_13721: Tensor[(2, 3, 3), bool]) -> Tensor[(2, 3, 3), bool] {
  %1261 = cast(%var_13720, dtype="bool") /* ty=Tensor[(2, 1, 1), bool] */;
  %1262 = cast(%var_13721, dtype="bool") /* ty=Tensor[(2, 3, 3), bool] */;
  logical_or(%1261, %1262) /* ty=Tensor[(2, 3, 3), bool] */
}

def @func_3734(%var_3718: Tensor[(840), float64]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(840), float64], Tensor[(4, 14, 6), float64]) {
  %1263 = @func_1597() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %1264 = cast(%var_3718, dtype="float64") /* ty=Tensor[(840), float64] */;
  %1265 = reshape(%1264, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float64] */;
  %1266 = @func_1236(%1265) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
  %1267 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %1268 = %1263.0;
  %1269 = %1266.4;
  %1270 = %1267.1;
  (%1268, %1269, %var_3718, %1270)
}

def @func_2402() -> Tensor[(14, 4, 15), float64] {
  %1271 = @func_1795() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) */;
  %1271.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_996() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %4 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
    %0 = @func_467() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %1 = @func_657() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
    %2 = %0.0;
    %3 = %1.1;
    (%2, %3)
  };
  %4() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_2442(%var_2440: uint64, %var_2441: Tensor[(4, 4, 7), uint64]) -> Tensor[(4, 4, 7), bool] {
  @func_2438(%var_2440, %var_2441) /* ty=Tensor[(4, 4, 7), bool] */
}

def @func_4844() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %5 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %6 = @func_4442() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %7 = @func_4813() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float32]) */;
  %8 = %5.1;
  %9 = %6.1;
  %10 = %7.0;
  (%8, %9, %10)
}

def @func_9571() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool]) {
  %11 = @func_6752() /* ty=Tensor[(4, 14, 6), float64] */;
  %12 = cast(%11, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  %13 = reshape(%12, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), float64] */;
  %14 = @func_1721(%13) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool]) */;
  %15 = %14.1;
  (%11, %15)
}

def @func_5349(%var_5348: Tensor[(14, 5, 12), float32]) -> Tensor[(14, 5, 12), float32] {
  %17 = fn (%var_5343: Tensor[(14, 5, 12), float32]) -> Tensor[(14, 5, 12), float32] {
    %16 = cast(%var_5343, dtype="float32") /* ty=Tensor[(14, 5, 12), float32] */;
    log10(%16) /* ty=Tensor[(14, 5, 12), float32] */
  };
  %17(%var_5348) /* ty=Tensor[(14, 5, 12), float32] */
}

def @func_4671(%var_4669: int64, %var_4670: Tensor[(1, 8), int64]) -> (Tensor[(4, 14, 6), float64], Tensor[(1, 4, 2), int64], int64, Tensor[(1, 8), int64]) {
  %26 = fn (%var_4664: int64, %var_4665: Tensor[(1, 8), int64]) -> (Tensor[(4, 14, 6), float64], Tensor[(1, 4, 2), int64], int64, Tensor[(1, 8), int64]) {
    %18 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
    %19 = cast(%var_4664, dtype="int64") /* ty=int64 */;
    %20 = cast(%var_4665, dtype="int64") /* ty=Tensor[(1, 8), int64] */;
    %21 = reshape(%19, newshape=[]) /* ty=int64 */;
    %22 = reshape(%20, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), int64] */;
    %23 = @func_2831(%21, %22) /* ty=(Tensor[(1, 4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(840), float64]) */;
    %24 = %18.0;
    %25 = %23.0;
    (%24, %25, %var_4664, %var_4665)
  };
  %26(%var_4669, %var_4670) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(1, 4, 2), int64], int64, Tensor[(1, 8), int64]) */
}

def @func_6786() -> Tensor[(4, 14, 6), float32] {
  @func_6784() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_10980(%var_10965: bool, %var_10966: Tensor[(36), bool]) -> (Tensor[(4, 14, 6), float32], Tensor[(3, 1, 12), uint32], bool, Tensor[(36), bool], Tensor[(4, 14, 6), float32]) {
  %27 = cast(%var_10965, dtype="bool") /* ty=bool */;
  %28 = cast(%var_10966, dtype="bool") /* ty=Tensor[(36), bool] */;
  %29 = reshape(%27, newshape=[]) /* ty=bool */;
  %30 = reshape(%28, newshape=[3, 1, 12]) /* ty=Tensor[(3, 1, 12), bool] */;
  %31 = @func_3267(%29, %30) /* ty=(Tensor[(3, 1, 12), int32], Tensor[(3, ?, 12), int8], Tensor[(3, 1, 12), uint32], Tensor[(3, ?, 12), bool]) */;
  %32 = @func_914() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %33 = @func_6992() /* ty=Tensor[(4, 14, 6), float32] */;
  %34 = %31.2;
  %35 = %32.0;
  (%33, %34, %var_10965, %var_10966, %35)
}

def @func_1883() -> Tensor[(4, 14, 6), float32] {
  %36 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %36.0
}

def @func_14951() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 5, 1), float64], Tensor[(14, 4, 15), float32]) {
  %37 = @func_11168() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %38 = @func_12483() /* ty=Tensor[(4, 5, 1), float64] */;
  %39 = cast(%38, dtype="float64") /* ty=Tensor[(4, 5, 1), float64] */;
  %40 = @func_12927() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
  %41 = %40.0;
  %42 = cast(%41, dtype="float32") /* ty=Tensor[(14, 4, 15), float32] */;
  %43 = %37.0;
  %44 = sin(%39) /* ty=Tensor[(4, 5, 1), float64] */;
  %45 = asin(%42) /* ty=Tensor[(14, 4, 15), float32] */;
  (%43, %44, %45)
}

def @func_4814() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float32]) {
  %53 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float32]) {
    %46 = @func_2767() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
    %47 = @func_1128() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
    %48 = %47.1;
    %49 = cast(%48, dtype="float32") /* ty=Tensor[(15, 3, 2), float32] */;
    %50 = @func_939() /* ty=Tensor[(4, 14, 6), float32] */;
    %51 = %46.0;
    %52 = asin(%49) /* ty=Tensor[(15, 3, 2), float32] */;
    (%50, %51, %52)
  };
  %53() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float32]) */
}

def @func_6087() -> (Tensor[(15, 3, 2), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 5, 1), float64]) {
  %54 = @func_5773() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %55 = @func_814() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %56 = @func_2361() /* ty=Tensor[(15, 3, 2), float64] */;
  %57 = %54.1;
  %58 = %55.1;
  %59 = @func_4151() /* ty=Tensor[(4, 5, 1), float64] */;
  (%56, %57, %58, %59)
}

def @func_10145() -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
  %62 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
    %60 = @func_2095() /* ty=Tensor[(4, 14, 6), float32] */;
    %61 = @func_4891() /* ty=Tensor[(14, 4, 15), float64] */;
    (%60, %61)
  };
  %62() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */
}

def @func_9276() -> (Tensor[(4, 14, 6), float64],) {
  @func_9274() /* ty=(Tensor[(4, 14, 6), float64],) */
}

def @func_11145(%var_11143: bool, %var_11144: Tensor[(36), bool]) -> (Tensor[(4, 14, 6), float32], Tensor[(3, 1, 12), uint32], bool, Tensor[(36), bool]) {
  %71 = fn (%var_11138: bool, %var_11139: Tensor[(36), bool]) -> (Tensor[(4, 14, 6), float32], Tensor[(3, 1, 12), uint32], bool, Tensor[(36), bool]) {
    %63 = @func_10858() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %64 = cast(%var_11138, dtype="bool") /* ty=bool */;
    %65 = cast(%var_11139, dtype="bool") /* ty=Tensor[(36), bool] */;
    %66 = reshape(%64, newshape=[]) /* ty=bool */;
    %67 = reshape(%65, newshape=[3, 1, 12]) /* ty=Tensor[(3, 1, 12), bool] */;
    %68 = @func_3267(%66, %67) /* ty=(Tensor[(3, 1, 12), int32], Tensor[(3, ?, 12), int8], Tensor[(3, 1, 12), uint32], Tensor[(3, ?, 12), bool]) */;
    %69 = %63.0;
    %70 = %68.2;
    (%69, %70, %var_11138, %var_11139)
  };
  %71(%var_11143, %var_11144) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(3, 1, 12), uint32], bool, Tensor[(36), bool]) */
}

def @func_2648() -> (Tensor[(4, 14, 6), float64],) {
  %74 = fn () -> (Tensor[(4, 14, 6), float64],) {
    %72 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
    %73 = %72.1;
    (%73,)
  };
  %74() /* ty=(Tensor[(4, 14, 6), float64],) */
}

def @func_6017() -> (Tensor[(4, 14, 6), float32],) {
  %77 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %75 = @func_1191() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
    %76 = %75.0;
    (%76,)
  };
  %77() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_9685() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  @func_9683() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_2130(%var_2129: Tensor[(4, 4, 4), float32]) -> Tensor[(4, 4, 4), float32] {
  %79 = fn (%var_2116: Tensor[(4, 4, 4), float32]) -> Tensor[(4, 4, 4), float32] {
    %78 = cast(%var_2116, dtype="float32") /* ty=Tensor[(4, 4, 4), float32] */;
    asinh(%78) /* ty=Tensor[(4, 4, 4), float32] */
  };
  %79(%var_2129) /* ty=Tensor[(4, 4, 4), float32] */
}

def @func_557() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %80 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %81 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %82 = %80.0;
  %83 = %81.0;
  (%82, %83)
}

def @func_1998() -> (Tensor[(4, 14, 6), float32],) {
  %84 = @func_1846() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %85 = %84.0;
  (%85,)
}

def @func_11455(%var_11453: Tensor[(15, 1, 3), float32]) -> (Tensor[(15, 4, 3), uint32], Tensor[(15, 3, 2), float64]) {
  @func_11452(%var_11453) /* ty=(Tensor[(15, 4, 3), uint32], Tensor[(15, 3, 2), float64]) */
}

def @func_2330() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
  %92 = fn () -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
    %86 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
    %87 = @func_1998() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %88 = @func_1191() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
    %89 = %86.0;
    %90 = %87.0;
    %91 = %88.1;
    (%89, %90, %91)
  };
  %92() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */
}

def @func_4443() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %96 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
    %93 = @func_657() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
    %94 = %93.1;
    %95 = @func_2095() /* ty=Tensor[(4, 14, 6), float32] */;
    (%94, %95)
  };
  %96() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_12086() -> (Tensor[(15, 3, 2), float64],) {
  @func_12084() /* ty=(Tensor[(15, 3, 2), float64],) */
}

def @func_10722() -> (Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) {
  %97 = @func_9344() /* ty=(Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) */;
  %98 = @func_7816() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %99 = %98.0;
  %100 = cast(%99, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
  %101 = @func_1396() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %102 = @func_1597() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %103 = %97.0;
  %104 = sigmoid(%100) /* ty=Tensor[(14, 4, 15), float64] */;
  %105 = %101.1;
  %106 = %102.0;
  (%103, %104, %105, %106)
}

def @func_5775() -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
  @func_5773() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */
}

def @func_4047(%var_4045: uint64, %var_4046: Tensor[(112), uint64]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 4, 7), bool], uint64, Tensor[(112), uint64]) {
  %116 = fn (%var_4040: uint64, %var_4041: Tensor[(112), uint64]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 4, 7), bool], uint64, Tensor[(112), uint64]) {
    %107 = @func_1985() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %108 = @func_1846() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %109 = cast(%var_4040, dtype="uint64") /* ty=uint64 */;
    %110 = cast(%var_4041, dtype="uint64") /* ty=Tensor[(112), uint64] */;
    %111 = reshape(%109, newshape=[]) /* ty=uint64 */;
    %112 = reshape(%110, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), uint64] */;
    %113 = %107.1;
    %114 = %108.0;
    %115 = @func_2438(%111, %112) /* ty=Tensor[(4, 4, 7), bool] */;
    (%113, %114, %115, %var_4040, %var_4041)
  };
  %116(%var_4045, %var_4046) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 4, 7), bool], uint64, Tensor[(112), uint64]) */
}

def @func_7796() -> (Tensor[(4, 14, 6), float64],) {
  @func_7794() /* ty=(Tensor[(4, 14, 6), float64],) */
}

def @func_9937(%var_9935: Tensor[(12, 14, 16), int16], %var_9936: Tensor[(12, 14, 16), int16]) -> (Tensor[(12, 14, 16), int16],) {
  @func_9933(%var_9935, %var_9936) /* ty=(Tensor[(12, 14, 16), int16],) */
}

def @func_15435(%var_15433: Tensor[(5, 60), bool]) -> (Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(5, 60), bool], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
  @func_15432(%var_15433) /* ty=(Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(5, 60), bool], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */
}

def @func_1985() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %117 = @func_1597() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %118 = %117.0;
  %119 = @func_978() /* ty=Tensor[(4, 14, 6), float32] */;
  (%118, %119)
}

def @func_3858() -> Tensor[(14, 4, 15), float64] {
  @func_3856() /* ty=Tensor[(14, 4, 15), float64] */
}

def @func_1472(%var_1471: Tensor[(4, 14, 6), float32]) -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) {
  %133 = fn (%var_1432: Tensor[(4, 14, 6), float32]) -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) {
    %120 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %121 = %120.0;
    %122 = cast(%var_1432, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
    %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
    %124 = cast(%121, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
    %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %126 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
    %127 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
    %128 = @func_1191() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
    %129 = maximum(%124, %125) /* ty=Tensor[(4, 14, 6), float64] */;
    %130 = %126.1;
    %131 = %127.1;
    %132 = %128.1;
    (%129, %130, %131, %132)
  };
  %133(%var_1471) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */
}

def @func_7078() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %138 = fn () -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
    %134 = @func_5073() /* ty=(Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) */;
    %135 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
    %136 = %134.1;
    %137 = %135.0;
    (%136, %137)
  };
  %138() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_816() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) {
  @func_814() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */
}

def @func_13011() -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
  %143 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
    %139 = @func_4385() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %140 = @func_12250() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
    %141 = %139.0;
    %142 = %140.1;
    (%141, %142)
  };
  %143() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */
}

def @func_2255() -> Tensor[(14, 4, 15), float64] {
  %145 = fn () -> Tensor[(14, 4, 15), float64] {
    %144 = @func_1795() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) */;
    %144.1
  };
  %145() /* ty=Tensor[(14, 4, 15), float64] */
}

def @func_11721() -> Tensor[(64), float32] {
  %147 = fn () -> Tensor[(64), float32] {
    %146 = @func_5829() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(1170), float64], Tensor[(64), float32]) */;
    %146.3
  };
  %147() /* ty=Tensor[(64), float32] */
}

def @func_3656() -> (Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) {
  %152 = fn () -> (Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) {
    %148 = @func_814() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
    %149 = @func_3465() /* ty=(Tensor[(14, 4, 15), float64],) */;
    %150 = %148.1;
    %151 = %149.0;
    (%150, %151)
  };
  %152() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */
}

def @func_3406(%var_3404: Tensor[(12, 16, 12), float64]) -> Tensor[(12, 16, 12), float64] {
  @func_3403(%var_3404) /* ty=Tensor[(12, 16, 12), float64] */
}

def @func_8555() -> (Tensor[(15, 3, 2), float64],) {
  %155 = fn () -> (Tensor[(15, 3, 2), float64],) {
    %153 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
    %154 = %153.1;
    (%154,)
  };
  %155() /* ty=(Tensor[(15, 3, 2), float64],) */
}

def @func_12327() -> (Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) {
  @func_12325() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) */
}

def @func_8259() -> (Tensor[(4, 14, 6), float32],) {
  @func_8257() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_2095() -> Tensor[(4, 14, 6), float32] {
  %156 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %156.0
}

def @func_979() -> Tensor[(4, 14, 6), float32] {
  %158 = fn () -> Tensor[(4, 14, 6), float32] {
    %157 = @func_557() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %157.0
  };
  %158() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_10663() -> (Tensor[(4, 14, 6), float32], Tensor[(10, 11, 2), float32], Tensor[(15, 3, 2), float32]) {
  @func_10661() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(10, 11, 2), float32], Tensor[(15, 3, 2), float32]) */
}

def @func_12061() -> Tensor[(4, 14, 6), float64] {
  %159 = @func_2329() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %159.0
}

def @func_15101() -> Tensor[(4, 14, 6), float32] {
  @func_15099() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_12644() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(280), float64]) {
  @func_12642() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(280), float64]) */
}

def @func_5893(%var_5891: Tensor[(10, 30), bool]) -> (Tensor[(4, 14, 6), float64], Tensor[(64), float32], Tensor[(10, 30), bool], Tensor[(2, 32), float32]) {
  @func_5890(%var_5891) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(64), float32], Tensor[(10, 30), bool], Tensor[(2, 32), float32]) */
}

def @func_15026() -> Tensor[(4, 14, 6), float32] {
  %160 = @func_10858() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %160.0
}

def @func_9420() -> Tensor[(14, 4, 15), float64] {
  @func_9418() /* ty=Tensor[(14, 4, 15), float64] */
}

def @func_11955() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) {
  @func_11953() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */
}

def @func_11452(%var_11434: Tensor[(15, 1, 3), float32]) -> (Tensor[(15, 4, 3), uint32], Tensor[(15, 3, 2), float64]) {
  %161 = cast(%var_11434, dtype="float32") /* ty=Tensor[(15, 1, 3), float32] */;
  %162 = cosh(%161) /* ty=Tensor[(15, 1, 3), float32] */;
  %163 = cast(%162, dtype="uint32") /* ty=Tensor[(15, 1, 3), uint32] */;
  %164 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 4, 3), float32] */, dtype="uint32") /* ty=Tensor[(15, 4, 3), uint32] */;
  %165 = @func_10722() /* ty=(Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
  %166 = logical_xor(%163, %164) /* ty=Tensor[(15, 4, 3), uint32] */;
  %167 = %165.2;
  (%166, %167)
}

def @func_8317() -> Tensor[(4, 14, 6), float32] {
  %168 = @func_5829() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(1170), float64], Tensor[(64), float32]) */;
  %168.0
}

def @func_5943() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %169 = @func_4471() /* ty=Tensor[(4, 14, 6), float64] */;
  %170 = @func_1883() /* ty=Tensor[(4, 14, 6), float32] */;
  (%169, %170)
}

def @func_4121() -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %176 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
    %171 = @func_868() /* ty=(Tensor[(14, 4, 15), float64],) */;
    %172 = @func_4066() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %173 = @func_2517() /* ty=Tensor[(4, 14, 6), float32] */;
    %174 = %171.0;
    %175 = %172.0;
    (%173, %174, %175)
  };
  %176() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_7890() -> Tensor[(4, 14, 6), float32] {
  @func_5394() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_9185() -> (Tensor[(4, 14, 6), float64],) {
  %179 = fn () -> (Tensor[(4, 14, 6), float64],) {
    %177 = @func_2647() /* ty=(Tensor[(4, 14, 6), float64],) */;
    %178 = %177.0;
    (%178,)
  };
  %179() /* ty=(Tensor[(4, 14, 6), float64],) */
}

def @func_12679() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), bool]) {
  %180 = @func_9131() /* ty=Tensor[(4, 14, 6), float32] */;
  %181 = cast(%180, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
  %182 = reshape(%181, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), float32] */;
  %183 = @func_3160(%182) /* ty=Tensor[(4, 14, 6), bool] */;
  (%180, %183)
}

def @func_1130() -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) {
  @func_1128() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_4292(%var_4291: Tensor[(64), float32]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 4, 4), float32], Tensor[(64), float32]) {
  %189 = fn (%var_4271: Tensor[(64), float32]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 4, 4), float32], Tensor[(64), float32]) {
    %184 = @func_1998() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %185 = cast(%var_4271, dtype="float32") /* ty=Tensor[(64), float32] */;
    %186 = reshape(%185, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float32] */;
    %187 = %184.0;
    %188 = @func_2128(%186) /* ty=Tensor[(4, 4, 4), float32] */;
    (%187, %188, %var_4271)
  };
  %189(%var_4291) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 4, 4), float32], Tensor[(64), float32]) */
}

def @func_10465() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) {
  %194 = fn () -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) {
    %190 = @func_3070() /* ty=(Tensor[(4, 14, 6), float64],) */;
    %191 = @func_5620() /* ty=(Tensor[(4, 14, 6), float64],) */;
    %192 = %190.0;
    %193 = %191.0;
    (%192, %193)
  };
  %194() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */
}

def @func_14137() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  @func_14135() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_7105(%var_7103: Tensor[(12, 3, 7), float32]) -> Tensor[(12, 3, 7), float32] {
  @func_7102(%var_7103) /* ty=Tensor[(12, 3, 7), float32] */
}

def @func_14321() -> (Tensor[(4, 14, 6), float32],) {
  %196 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %195 = @func_8850() /* ty=Tensor[(4, 14, 6), float32] */;
    (%195,)
  };
  %196() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_12337() -> (Tensor[(4, 14, 6), float32],) {
  %197 = @func_8306() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %198 = %197.0;
  (%198,)
}

def @func_2000() -> (Tensor[(4, 14, 6), float32],) {
  @func_1998() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_15099() -> Tensor[(4, 14, 6), float32] {
  %199 = @func_11009() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %199.0
}

def @func_3435() -> Tensor[(15, 3, 2), float64] {
  @func_3433() /* ty=Tensor[(15, 3, 2), float64] */
}

def @func_12429() -> Tensor[(4, 14, 6), float32] {
  %200 = fn () -> Tensor[(4, 14, 6), float32] {
    @func_8926() /* ty=Tensor[(4, 14, 6), float32] */
  };
  %200() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_10950() -> Tensor[(4, 14, 6), float32] {
  @func_10948() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_14482() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
  %212 = fn () -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
    %201 = @func_4599() /* ty=(Tensor[(14, 4, 15), float64],) */;
    %202 = @func_2329() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
    %203 = @func_4385() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %204 = @func_10144() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
    %205 = @func_1846() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %206 = %201.0;
    %207 = %202.0;
    %208 = %203.0;
    %209 = %204.1;
    %210 = %205.0;
    %211 = @func_2361() /* ty=Tensor[(15, 3, 2), float64] */;
    (%206, %207, %208, %209, %210, %211)
  };
  %212() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */
}

def @func_6537(%var_6523: Tensor[(2304), float64]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(12, 16, 12), float64], Tensor[(2304), float64]) {
  %213 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %214 = cast(%var_6523, dtype="float64") /* ty=Tensor[(2304), float64] */;
  %215 = reshape(%214, newshape=[12, 16, 12]) /* ty=Tensor[(12, 16, 12), float64] */;
  %216 = %213.0;
  %217 = @func_1883() /* ty=Tensor[(4, 14, 6), float32] */;
  %218 = @func_3403(%215) /* ty=Tensor[(12, 16, 12), float64] */;
  (%216, %217, %218, %var_6523)
}

def @func_11585() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %219 = @func_2146() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
  %220 = %219.0;
  %221 = cast(%220, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
  %222 = reshape(%221, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), float32] */;
  %223 = @func_4891() /* ty=Tensor[(14, 4, 15), float64] */;
  %224 = @func_2240(%222) /* ty=Tensor[(4, 14, 6), float32] */;
  (%223, %220, %224)
}

def @func_8950() -> (Tensor[(15, 3, 2), float32],) {
  %226 = fn () -> (Tensor[(15, 3, 2), float32],) {
    %225 = @func_7552() /* ty=Tensor[(15, 3, 2), float32] */;
    (%225,)
  };
  %226() /* ty=(Tensor[(15, 3, 2), float32],) */
}

def @func_14687(%var_14685: int64) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 5, 6), float64], Tensor[(120), float64], Tensor[(4, 14, 6), float32], int64, Tensor[(4, 2), int64], Tensor[(4, 14, 6), float64]) {
  @func_14684(%var_14685) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 5, 6), float64], Tensor[(120), float64], Tensor[(4, 14, 6), float32], int64, Tensor[(4, 2), int64], Tensor[(4, 14, 6), float64]) */
}

def @func_10376(%var_10373: Tensor[(2, 2, 12), float32], %var_10374: Tensor[(840), float64], %var_10375: Tensor[(64), float32]) -> (Tensor[(2, 2, 12), bool], Tensor[(4, 14, 6), float32], Tensor[(840), float64], Tensor[(14, 4, 15), float64], Tensor[(12, 16, 12), float64], Tensor[(192, 12), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float64]) {
  @func_10371(%var_10373, %var_10374, %var_10375) /* ty=(Tensor[(2, 2, 12), bool], Tensor[(4, 14, 6), float32], Tensor[(840), float64], Tensor[(14, 4, 15), float64], Tensor[(12, 16, 12), float64], Tensor[(192, 12), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float64]) */
}

def @func_5773() -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
  %227 = @func_1597() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %228 = @func_4252() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64]) */;
  %229 = %227.0;
  %230 = %228.1;
  (%229, %230)
}

def @func_2579(%var_2577: Tensor[(14, 4, 15), float64]) -> Tensor[(14, 4, 15), bool] {
  @func_2576(%var_2577) /* ty=Tensor[(14, 4, 15), bool] */
}

def @func_9739() -> (Tensor[(4, 5, 1), float64],) {
  %233 = fn () -> (Tensor[(4, 5, 1), float64],) {
    %231 = @func_3500() /* ty=(Tensor[(4, 5, 1), float64],) */;
    %232 = %231.0;
    (%232,)
  };
  %233() /* ty=(Tensor[(4, 5, 1), float64],) */
}

def @func_12019() -> (Tensor[(4, 14, 6), float32], Tensor[(12, 3, 7), float32], Tensor[(252, 1), float32]) {
  %234 = cast(meta[relay.Constant][1] /* ty=Tensor[(252, 1), float32] */, dtype="float32") /* ty=Tensor[(252, 1), float32] */;
  %235 = reshape(%234, newshape=[12, 3, 7]) /* ty=Tensor[(12, 3, 7), float32] */;
  %236 = @func_10948() /* ty=Tensor[(4, 14, 6), float32] */;
  %237 = @func_7102(%235) /* ty=Tensor[(12, 3, 7), float32] */;
  (%236, %237, meta[relay.Constant][1] /* ty=Tensor[(252, 1), float32] */)
}

def @func_3317() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64]) {
  %238 = @func_2146() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
  %239 = %238.0;
  %240 = cast(%239, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
  %241 = reshape(%240, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), float32] */;
  %242 = @func_1128() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
  %243 = @func_1883() /* ty=Tensor[(4, 14, 6), float32] */;
  %244 = @func_3160(%241) /* ty=Tensor[(4, 14, 6), bool] */;
  %245 = %242.2;
  %246 = @func_2402() /* ty=Tensor[(14, 4, 15), float64] */;
  %247 = @func_2254() /* ty=Tensor[(14, 4, 15), float64] */;
  (%243, %239, %244, %245, %246, %247)
}

def @func_14842() -> (Tensor[(14, 4, 15), float32],) {
  %252 = fn () -> (Tensor[(14, 4, 15), float32],) {
    %248 = @func_868() /* ty=(Tensor[(14, 4, 15), float64],) */;
    %249 = %248.0;
    %250 = cast(%249, dtype="float32") /* ty=Tensor[(14, 4, 15), float32] */;
    %251 = sinh(%250) /* ty=Tensor[(14, 4, 15), float32] */;
    (%251,)
  };
  %252() /* ty=(Tensor[(14, 4, 15), float32],) */
}

def @func_4253() -> (Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64]) {
  %257 = fn () -> (Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64]) {
    %253 = @func_2907() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(14, 4, 15), bool]) */;
    %254 = @func_1128() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
    %255 = %253.0;
    %256 = %254.1;
    (%255, %256)
  };
  %257() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64]) */
}

def @func_5697() -> Tensor[(4, 14, 6), float64] {
  %259 = fn () -> Tensor[(4, 14, 6), float64] {
    %258 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
    %258.1
  };
  %259() /* ty=Tensor[(4, 14, 6), float64] */
}

def @func_3734(%var_3718: Tensor[(840), float64]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(840), float64], Tensor[(4, 14, 6), float64]) {
  %260 = @func_1597() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %261 = cast(%var_3718, dtype="float64") /* ty=Tensor[(840), float64] */;
  %262 = reshape(%261, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float64] */;
  %263 = @func_1236(%262) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
  %264 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %265 = %260.0;
  %266 = %263.4;
  %267 = %264.1;
  (%265, %266, %var_3718, %267)
}

def @func_10040() -> (Tensor[(14, 4, 15), float64],) {
  %268 = @func_6042() /* ty=Tensor[(14, 4, 15), float64] */;
  (%268,)
}

def @func_11642() -> Tensor[(5, 7, 11), float64] {
  %269 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 7, 11), float64] */, dtype="float64") /* ty=Tensor[(5, 7, 11), float64] */;
  rsqrt(%269) /* ty=Tensor[(5, 7, 11), float64] */
}

def @func_4892() -> Tensor[(14, 4, 15), float64] {
  %270 = fn () -> Tensor[(14, 4, 15), float64] {
    @func_2254() /* ty=Tensor[(14, 4, 15), float64] */
  };
  %270() /* ty=Tensor[(14, 4, 15), float64] */
}

def @func_4637() -> Tensor[(4, 5, 1), float64] {
  @func_4635() /* ty=Tensor[(4, 5, 1), float64] */
}

def @func_6753() -> Tensor[(4, 14, 6), float64] {
  %272 = fn () -> Tensor[(4, 14, 6), float64] {
    %271 = @func_3070() /* ty=(Tensor[(4, 14, 6), float64],) */;
    %271.0
  };
  %272() /* ty=Tensor[(4, 14, 6), float64] */
}

def @func_12928() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %277 = fn () -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
    %273 = @func_6741() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
    %274 = @func_4551() /* ty=(Tensor[(13, 10, 8), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %275 = %273.1;
    %276 = %274.2;
    (%275, %276)
  };
  %277() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_15772(%var_15768: Tensor[(12, 4, 5), int16], %var_15769: Tensor[(12, 4, 5), int16], %var_15770: Tensor[(150, 2), bool], %var_15771: Tensor[(16, 4), float32]) -> (Tensor[(12, 4, 5), int16], Tensor[(5, 5, 12), bool], Tensor[(150, 2), bool], Tensor[(16, 4), float32], Tensor[(4, 5, 1), float64]) {
  @func_15766(%var_15768, %var_15769, %var_15770, %var_15771) /* ty=(Tensor[(12, 4, 5), int16], Tensor[(5, 5, 12), bool], Tensor[(150, 2), bool], Tensor[(16, 4), float32], Tensor[(4, 5, 1), float64]) */
}

def @func_2097() -> Tensor[(4, 14, 6), float32] {
  @func_2095() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_1796() -> (Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) {
  %285 = fn () -> (Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) {
    %278 = @func_1191() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
    %279 = @func_1191() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
    %280 = @func_667() /* ty=(Tensor[(15, 3, 2), float64],) */;
    %281 = %278.1;
    %282 = %279.1;
    %283 = @func_876() /* ty=Tensor[(4, 14, 6), float64] */;
    %284 = %280.0;
    (%281, %282, %283, %284)
  };
  %285() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) */
}

def @func_4846() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  @func_4844() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_939() -> Tensor[(4, 14, 6), float32] {
  %286 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %286.0
}

def @func_4601() -> (Tensor[(14, 4, 15), float64],) {
  @func_4599() /* ty=(Tensor[(14, 4, 15), float64],) */
}

def @func_12642() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(280), float64]) {
  %287 = cast(meta[relay.Constant][3] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %288 = reshape(%287, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), float64] */;
  %289 = @func_9660(%288) /* ty=(Tensor[(14, 4, 5), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %290 = @func_2254() /* ty=Tensor[(14, 4, 15), float64] */;
  %291 = %289.2;
  (%290, %291, meta[relay.Constant][3] /* ty=Tensor[(280), float64] */)
}

def @func_14759() -> Tensor[(4, 14, 6), float32] {
  %293 = fn () -> Tensor[(4, 14, 6), float32] {
    %292 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %292.0
  };
  %293() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_13635() -> Tensor[(4, 14, 6), float32] {
  %295 = fn () -> Tensor[(4, 14, 6), float32] {
    %294 = @func_10590() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
    %294.0
  };
  %295() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_1047() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_15075() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) {
  %300 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) {
    %296 = @func_4066() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %297 = @func_13974() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(6, 12, 16), uint8], Tensor[(4, 14, 6), float32]) */;
    %298 = %296.2;
    %299 = %297.0;
    (%298, %299)
  };
  %300() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */
}

def @func_2835(%var_2833: int64, %var_2834: Tensor[(1, 4, 2), int64]) -> (Tensor[(1, 4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(840), float64]) {
  @func_2831(%var_2833, %var_2834) /* ty=(Tensor[(1, 4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(840), float64]) */
}

def @func_13156(%var_13153: Tensor[(10, 9, 5), int32], %var_13154: Tensor[(10, 9, 5), int32], %var_13155: Tensor[(10, 9, 5), int32]) -> (Tensor[(10, 9, 5), bool], Tensor[(10, 9, 5), float32]) {
  @func_13151(%var_13153, %var_13154, %var_13155) /* ty=(Tensor[(10, 9, 5), bool], Tensor[(10, 9, 5), float32]) */
}

def @func_8319() -> Tensor[(4, 14, 6), float32] {
  @func_8317() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_6650() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64]) {
  @func_6648() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64]) */
}

def @func_5620() -> (Tensor[(4, 14, 6), float64],) {
  %301 = @func_3317() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64]) */;
  %302 = %301.1;
  (%302,)
}

def @func_15153() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %303 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %304 = @func_11009() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %305 = %303.0;
  %306 = %304.0;
  %307 = @func_6992() /* ty=Tensor[(4, 14, 6), float32] */;
  (%305, %306, %307)
}

def @func_15185() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  @func_15183() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_5134() -> Tensor[(4, 14, 6), float32] {
  %309 = fn () -> Tensor[(4, 14, 6), float32] {
    %308 = @func_657() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
    %308.1
  };
  %309() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_6992() -> Tensor[(4, 14, 6), float32] {
  @func_6283() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_7554() -> Tensor[(15, 3, 2), float32] {
  @func_7552() /* ty=Tensor[(15, 3, 2), float32] */
}

def @func_8079(%var_8077: int64) -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], int64, Tensor[(8, 1), bool], Tensor[(4, 14, 6), float32]) {
  @func_8076(%var_8077) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], int64, Tensor[(8, 1), bool], Tensor[(4, 14, 6), float32]) */
}

def @func_7892() -> Tensor[(4, 14, 6), float32] {
  @func_7890() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_13663() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %314 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
    %310 = @func_8257() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %311 = @func_4417() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), bool]) */;
    %312 = %310.0;
    %313 = %311.0;
    (%312, %313)
  };
  %314() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_6402() -> (Tensor[(4, 14, 6), float32],) {
  @func_6400() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_421() -> (Tensor[(4, 14, 6), float32],) {
  %324 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %315 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 14, 6), float32] */, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
    %316 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(4, 14, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %317 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 14, 6), float32] */, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
    %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %319 = equal(%317, %318) /* ty=Tensor[(4, 14, 6), bool] */;
    %320 = cast(%319, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
    %321 = sigmoid(%320) /* ty=Tensor[(4, 14, 6), float32] */;
    %322 = cast(%321, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
    %323 = sinh(%322) /* ty=Tensor[(4, 14, 6), float32] */;
    (%323,)
  };
  %324() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_2518() -> Tensor[(4, 14, 6), float32] {
  %326 = fn () -> Tensor[(4, 14, 6), float32] {
    %325 = @func_467() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %325.0
  };
  %326() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_12339() -> (Tensor[(4, 14, 6), float32],) {
  @func_12337() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_12305() -> (Tensor[(4, 14, 6), float64],) {
  %329 = fn () -> (Tensor[(4, 14, 6), float64],) {
    %327 = @func_9683() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
    %328 = %327.0;
    (%328,)
  };
  %329() /* ty=(Tensor[(4, 14, 6), float64],) */
}

def @func_15729() -> Tensor[(14, 4, 15), float64] {
  @func_15727() /* ty=Tensor[(14, 4, 15), float64] */
}

def @func_16050() -> (Tensor[(4, 14, 6), float64],) {
  %331 = fn () -> (Tensor[(4, 14, 6), float64],) {
    %330 = @func_12499() /* ty=Tensor[(4, 14, 6), float64] */;
    (%330,)
  };
  %331() /* ty=(Tensor[(4, 14, 6), float64],) */
}

def @func_14172() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %336 = fn () -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
    %332 = @func_4120() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
    %333 = @func_4962() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %334 = %332.1;
    %335 = %333.0;
    (%334, %335)
  };
  %336() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_8458() -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) {
  %343 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) {
    %337 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %338 = @func_667() /* ty=(Tensor[(15, 3, 2), float64],) */;
    %339 = @func_3465() /* ty=(Tensor[(14, 4, 15), float64],) */;
    %340 = %337.0;
    %341 = %338.0;
    %342 = %339.0;
    (%340, %341, %342)
  };
  %343() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) */
}

def @func_10220(%var_10219: Tensor[(14, 4, 15), float64]) -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %353 = fn (%var_10193: Tensor[(14, 4, 15), float64]) -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
    %344 = @func_9344() /* ty=(Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) */;
    %345 = %344.1;
    %346 = cast(%var_10193, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
    %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(3), int32] */;
    %348 = cast(%345, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
    %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %350 = @func_5329() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
    %351 = mod(%348, %349) /* ty=Tensor[(14, 4, 15), float64] */;
    %352 = %350.1;
    (%351, %352)
  };
  %353(%var_10219) /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_14787() -> (Tensor[(4, 14, 6), float64],) {
  @func_14785() /* ty=(Tensor[(4, 14, 6), float64],) */
}

def @func_4067() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %360 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
    %354 = @func_3317() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64]) */;
    %355 = @func_995() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %356 = @func_1846() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %357 = %354.0;
    %358 = %355.0;
    %359 = %356.0;
    (%357, %358, %359)
  };
  %360() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_15841() -> Tensor[(4, 14, 6), float32] {
  %362 = fn () -> Tensor[(4, 14, 6), float32] {
    %361 = @func_14320() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %361.0
  };
  %362() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_750() -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
  %367 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
    %363 = @func_657() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
    %364 = @func_667() /* ty=(Tensor[(15, 3, 2), float64],) */;
    %365 = %363.1;
    %366 = %364.0;
    (%365, %366)
  };
  %367() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */
}

def @func_7407() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), bool]) {
  %368 = cast(-8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %369 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 2), int64] */, dtype="int64") /* ty=Tensor[(4, 2), int64] */;
  %370 = reshape(%368, newshape=[]) /* ty=int64 */;
  %371 = reshape(%369, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), int64] */;
  %372 = @func_2831(%370, %371) /* ty=(Tensor[(1, 4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(840), float64]) */;
  %373 = @func_4551() /* ty=(Tensor[(13, 10, 8), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %374 = @func_6579() /* ty=(Tensor[(15, 3, 2), float32], Tensor[(4, 14, 6), float32]) */;
  %375 = %374.0;
  %376 = cast(-8 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %377 = cast(%375, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
  %378 = %372.1;
  %379 = %373.1;
  %380 = not_equal(%376, %377) /* ty=Tensor[(15, 3, 2), bool] */;
  (%378, meta[relay.Constant][6] /* ty=Tensor[(4, 2), int64] */, %379, %380)
}

def @func_12670() -> Tensor[(15, 3, 2), float64] {
  @func_12668() /* ty=Tensor[(15, 3, 2), float64] */
}

def @func_14963() -> (Tensor[(4, 14, 6), float32],) {
  %381 = @func_6283() /* ty=Tensor[(4, 14, 6), float32] */;
  (%381,)
}

def @func_12084() -> (Tensor[(15, 3, 2), float64],) {
  %382 = @func_2361() /* ty=Tensor[(15, 3, 2), float64] */;
  (%382,)
}

def @func_1987() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  @func_1985() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_6455() -> (Tensor[(14, 4, 15), float64],) {
  %383 = @func_2767() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
  %384 = %383.1;
  (%384,)
}

def @func_10001() -> Tensor[(4, 14, 6), float32] {
  %385 = fn () -> Tensor[(4, 14, 6), float32] {
    @func_939() /* ty=Tensor[(4, 14, 6), float32] */
  };
  %385() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_1238(%var_1237: Tensor[(14, 4, 15), float64]) -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %401 = fn (%var_1205: Tensor[(14, 4, 15), float64]) -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
    %386 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
    %387 = @func_868() /* ty=(Tensor[(14, 4, 15), float64],) */;
    %388 = %387.0;
    %389 = cast(%var_1205, dtype="bool") /* ty=Tensor[(14, 4, 15), bool] */;
    %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
    %391 = cast(%388, dtype="bool") /* ty=Tensor[(14, 4, 15), bool] */;
    %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %393 = @func_1128() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
    %394 = cast(%388, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
    %395 = @func_914() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %396 = %386.0;
    %397 = logical_and(%391, %392) /* ty=Tensor[(14, 4, 15), bool] */;
    %398 = %393.1;
    %399 = rsqrt(%394) /* ty=Tensor[(14, 4, 15), float64] */;
    %400 = %395.1;
    (%396, %397, %398, %399, %400)
  };
  %401(%var_1237) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_12251() -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %409 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
    %402 = @func_2329() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
    %403 = @func_2146() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
    %404 = @func_4066() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %405 = %402.1;
    %406 = %403.1;
    %407 = @func_2402() /* ty=Tensor[(14, 4, 15), float64] */;
    %408 = %404.2;
    (%405, %406, %407, %408)
  };
  %409() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_7817() -> (Tensor[(14, 4, 15), float64],) {
  %412 = fn () -> (Tensor[(14, 4, 15), float64],) {
    %410 = @func_1795() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) */;
    %411 = %410.1;
    (%411,)
  };
  %412() /* ty=(Tensor[(14, 4, 15), float64],) */
}

def @func_2148() -> (Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) {
  @func_2146() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */
}

def @func_10134() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 5, 6), float64], Tensor[(120), float64], Tensor[(64), float32], Tensor[(15, 3, 2), float64]) {
  %413 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %414 = cast(meta[relay.Constant][7] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %415 = reshape(%414, newshape=[4, 5, 6]) /* ty=Tensor[(4, 5, 6), float64] */;
  %416 = @func_2907() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(14, 4, 15), bool]) */;
  %417 = @func_9344() /* ty=(Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) */;
  %418 = %413.0;
  %419 = @func_4706(%415) /* ty=Tensor[(4, 5, 6), float64] */;
  %420 = %416.2;
  %421 = %417.0;
  (%418, %419, meta[relay.Constant][7] /* ty=Tensor[(120), float64] */, %420, %421)
}

def @func_15660() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %422 = @func_9232() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(64), float32]) */;
  %423 = @func_2169() /* ty=Tensor[(4, 14, 6), float32] */;
  %424 = @func_2547() /* ty=Tensor[(4, 14, 6), float32] */;
  %425 = %422.2;
  (%423, %424, %425)
}

def @func_521() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) {
  %432 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) {
    %426 = @func_467() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %427 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %428 = %427.0;
    %429 = cast(%428, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
    %430 = %426.0;
    %431 = acos(%429) /* ty=Tensor[(4, 14, 6), float64] */;
    (%430, %431)
  };
  %432() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */
}

def @func_9846(%var_9845: Tensor[(2, 2, 16), float64]) -> Tensor[(2, 2, 16), float64] {
  %434 = fn (%var_9826: Tensor[(2, 2, 16), float64]) -> Tensor[(2, 2, 16), float64] {
    %433 = cast(%var_9826, dtype="float64") /* ty=Tensor[(2, 2, 16), float64] */;
    acos(%433) /* ty=Tensor[(2, 2, 16), float64] */
  };
  %434(%var_9845) /* ty=Tensor[(2, 2, 16), float64] */
}

def @func_10173(%var_10166: int64) -> (Tensor[(6, 12, 16), uint8], Tensor[(8, 1), bool], int64) {
  %435 = cast(%var_10166, dtype="int64") /* ty=int64 */;
  %436 = reshape(%435, newshape=[]) /* ty=int64 */;
  %437 = @func_8076(%436) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], int64, Tensor[(8, 1), bool], Tensor[(4, 14, 6), float32]) */;
  %438 = @func_8594() /* ty=Tensor[(6, 12, 16), uint8] */;
  %439 = %437.3;
  (%438, %439, %var_10166)
}

def @func_13575() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) {
  @func_13573() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */
}

def @func_12485() -> Tensor[(4, 5, 1), float64] {
  @func_12483() /* ty=Tensor[(4, 5, 1), float64] */
}

def @func_3856() -> Tensor[(14, 4, 15), float64] {
  %440 = @func_3465() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %440.0
}

def @func_9573() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool]) {
  @func_9571() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool]) */
}

def @func_9767() -> (Tensor[(4, 14, 6), float32],) {
  %443 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %441 = @func_4551() /* ty=(Tensor[(13, 10, 8), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %442 = %441.1;
    (%442,)
  };
  %443() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_1847() -> (Tensor[(4, 14, 6), float32],) {
  %446 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %444 = @func_1128() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
    %445 = %444.0;
    (%445,)
  };
  %446() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_15570(%var_15568: Tensor[(1, 840), float64]) -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(1, 840), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  @func_15567(%var_15568) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(1, 840), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_11924(%var_11922: bool) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], bool, bool, Tensor[(36), bool], Tensor[(3, 1, 12), float64]) {
  @func_11921(%var_11922) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], bool, bool, Tensor[(36), bool], Tensor[(3, 1, 12), float64]) */
}

def @func_814() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) {
  %447 = @func_467() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %448 = %447.0;
  %449 = cast(%448, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  %450 = acosh(%449) /* ty=Tensor[(4, 14, 6), float64] */;
  %451 = cast(%450, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
  %452 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %453 = atanh(%451) /* ty=Tensor[(4, 14, 6), float64] */;
  %454 = %452.1;
  (%453, %454)
}

def @func_13729(%var_13727: Tensor[(2, 1, 1), bool], %var_13728: Tensor[(2, 3, 3), bool]) -> Tensor[(2, 3, 3), bool] {
  %457 = fn (%var_13720: Tensor[(2, 1, 1), bool], %var_13721: Tensor[(2, 3, 3), bool]) -> Tensor[(2, 3, 3), bool] {
    %455 = cast(%var_13720, dtype="bool") /* ty=Tensor[(2, 1, 1), bool] */;
    %456 = cast(%var_13721, dtype="bool") /* ty=Tensor[(2, 3, 3), bool] */;
    logical_or(%455, %456) /* ty=Tensor[(2, 3, 3), bool] */
  };
  %457(%var_13727, %var_13728) /* ty=Tensor[(2, 3, 3), bool] */
}

def @func_5541() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %468 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
    %458 = @func_4442() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %459 = @func_1128() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
    %460 = @func_3465() /* ty=(Tensor[(14, 4, 15), float64],) */;
    %461 = @func_4137() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %462 = @func_995() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %463 = %458.0;
    %464 = %459.2;
    %465 = %460.0;
    %466 = %461.0;
    %467 = %462.0;
    (%463, %464, %465, %466, %467)
  };
  %468() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_15567(%var_15534: Tensor[(1, 840), float64]) -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(1, 840), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %469 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %470 = cast(%var_15534, dtype="float64") /* ty=Tensor[(1, 840), float64] */;
  %471 = reshape(%470, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float64] */;
  %472 = @func_1236(%471) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
  %473 = @func_7794() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %474 = %469.0;
  %475 = %472.1;
  %476 = %473.0;
  %477 = @func_8317() /* ty=Tensor[(4, 14, 6), float32] */;
  (%474, %475, %var_15534, %476, %477)
}

def @func_11496(%var_11495: uint64) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 4, 7), float64], uint64, Tensor[(112), uint64], Tensor[(64), float32], Tensor[(16, 4), float32]) {
  %490 = fn (%var_11481: uint64) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 4, 7), float64], uint64, Tensor[(112), uint64], Tensor[(64), float32], Tensor[(16, 4), float32]) {
    %478 = @func_4844() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %479 = cast(%var_11481, dtype="uint64") /* ty=uint64 */;
    %480 = cast(meta[relay.Constant][8] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
    %481 = reshape(%479, newshape=[]) /* ty=uint64 */;
    %482 = reshape(%480, newshape=[112]) /* ty=Tensor[(112), uint64] */;
    %483 = @func_6349(%481, %482) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], uint64, Tensor[(112), uint64], Tensor[(4, 4, 7), float64]) */;
    %484 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 4), float32] */;
    %485 = reshape(%484, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %486 = @func_4290(%485) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 4, 4), float32], Tensor[(64), float32]) */;
    %487 = %478.0;
    %488 = %483.4;
    %489 = %486.2;
    (%487, %488, %var_11481, meta[relay.Constant][8] /* ty=Tensor[(112), uint64] */, %489, meta[relay.Constant][9] /* ty=Tensor[(16, 4), float32] */)
  };
  %490(%var_11495) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 4, 7), float64], uint64, Tensor[(112), uint64], Tensor[(64), float32], Tensor[(16, 4), float32]) */
}

def @func_1128() -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) {
  %491 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %492 = @func_667() /* ty=(Tensor[(15, 3, 2), float64],) */;
  %493 = @func_657() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %494 = %491.0;
  %495 = %492.0;
  %496 = %493.1;
  (%494, %495, %496)
}

def @func_12365() -> (Tensor[(4, 14, 6), float32],) {
  %499 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %497 = @func_6016() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %498 = %497.0;
    (%498,)
  };
  %499() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_9709(%var_9707: Tensor[(11, 9, 11), uint8], %var_9708: Tensor[(11, 9, 11), uint8]) -> (Tensor[(11, 9, 11), uint8], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
  @func_9705(%var_9707, %var_9708) /* ty=(Tensor[(11, 9, 11), uint8], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */
}

def @func_16121(%var_16120: Tensor[(252), float32]) -> (Tensor[(14, 4, 15), float64], Tensor[(12, 3, 7), float32], Tensor[(252), float32]) {
  %505 = fn (%var_16109: Tensor[(252), float32]) -> (Tensor[(14, 4, 15), float64], Tensor[(12, 3, 7), float32], Tensor[(252), float32]) {
    %500 = @func_3317() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64]) */;
    %501 = cast(%var_16109, dtype="float32") /* ty=Tensor[(252), float32] */;
    %502 = reshape(%501, newshape=[12, 3, 7]) /* ty=Tensor[(12, 3, 7), float32] */;
    %503 = %500.4;
    %504 = @func_7102(%502) /* ty=Tensor[(12, 3, 7), float32] */;
    (%503, %504, %var_16109)
  };
  %505(%var_16120) /* ty=(Tensor[(14, 4, 15), float64], Tensor[(12, 3, 7), float32], Tensor[(252), float32]) */
}

def @func_14135() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %506 = @func_12927() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
  %507 = @func_8975() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %508 = %506.0;
  %509 = %507.0;
  (%508, %509)
}

def @func_14965() -> (Tensor[(4, 14, 6), float32],) {
  @func_14963() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_5396() -> Tensor[(4, 14, 6), float32] {
  @func_5394() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_9132() -> Tensor[(4, 14, 6), float32] {
  %511 = fn () -> Tensor[(4, 14, 6), float32] {
    %510 = @func_4551() /* ty=(Tensor[(13, 10, 8), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %510.1
  };
  %511() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_11188() -> (Tensor[(4, 14, 6), float32],) {
  %514 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %512 = @func_8257() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %513 = %512.0;
    (%513,)
  };
  %514() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_3070() -> (Tensor[(4, 14, 6), float64],) {
  %515 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %516 = %515.1;
  (%516,)
}

def @func_6352(%var_6350: uint64, %var_6351: Tensor[(112), uint64]) -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], uint64, Tensor[(112), uint64], Tensor[(4, 4, 7), float64]) {
  %528 = fn (%var_6318: uint64, %var_6319: Tensor[(112), uint64]) -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], uint64, Tensor[(112), uint64], Tensor[(4, 4, 7), float64]) {
    %517 = @func_995() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %518 = @func_5329() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
    %519 = cast(%var_6318, dtype="uint64") /* ty=uint64 */;
    %520 = cast(%var_6319, dtype="uint64") /* ty=Tensor[(112), uint64] */;
    %521 = reshape(%519, newshape=[]) /* ty=uint64 */;
    %522 = reshape(%520, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), uint64] */;
    %523 = @func_2438(%521, %522) /* ty=Tensor[(4, 4, 7), bool] */;
    %524 = cast(%523, dtype="float64") /* ty=Tensor[(4, 4, 7), float64] */;
    %525 = %517.0;
    %526 = %518.2;
    %527 = sqrt(%524) /* ty=Tensor[(4, 4, 7), float64] */;
    (%525, %526, %var_6318, %var_6319, %527)
  };
  %528(%var_6350, %var_6351) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], uint64, Tensor[(112), uint64], Tensor[(4, 4, 7), float64]) */
}

def @func_8541() -> Tensor[(14, 4, 15), float64] {
  %530 = fn () -> Tensor[(14, 4, 15), float64] {
    %529 = @func_3655() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
    %529.1
  };
  %530() /* ty=Tensor[(14, 4, 15), float64] */
}

def @func_9663(%var_9661: Tensor[(14, 4, 5), float64]) -> (Tensor[(14, 4, 5), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  @func_9660(%var_9661) /* ty=(Tensor[(14, 4, 5), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_11921(%var_11854: bool) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], bool, bool, Tensor[(36), bool], Tensor[(3, 1, 12), float64]) {
  %531 = @func_868() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %532 = @func_1191() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %533 = cast(%var_11854, dtype="bool") /* ty=bool */;
  %534 = cast(meta[relay.Constant][10] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %535 = reshape(%533, newshape=[]) /* ty=bool */;
  %536 = reshape(%534, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %537 = @func_10980(%535, %536) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(3, 1, 12), uint32], bool, Tensor[(36), bool], Tensor[(4, 14, 6), float32]) */;
  %538 = cast(%var_11854, dtype="bool") /* ty=bool */;
  %539 = cast(meta[relay.Constant][10] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %540 = reshape(%538, newshape=[]) /* ty=bool */;
  %541 = reshape(%539, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %542 = @func_11142(%540, %541) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(3, 1, 12), uint32], bool, Tensor[(36), bool]) */;
  %543 = %542.1;
  %544 = cast(%543, dtype="float64") /* ty=Tensor[(3, 1, 12), float64] */;
  %545 = @func_939() /* ty=Tensor[(4, 14, 6), float32] */;
  %546 = @func_2517() /* ty=Tensor[(4, 14, 6), float32] */;
  %547 = %531.0;
  %548 = %532.0;
  %549 = %537.2;
  %550 = atan(%544) /* ty=Tensor[(3, 1, 12), float64] */;
  (%545, %546, %547, %548, %549, %var_11854, meta[relay.Constant][10] /* ty=Tensor[(36), bool] */, %550)
}

def @func_916() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  @func_914() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_11052() -> (Tensor[(4, 14, 6), float32],) {
  %553 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %551 = @func_5230() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(7, 8, 2), float64]) */;
    %552 = %551.0;
    (%552,)
  };
  %553() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_2548() -> Tensor[(4, 14, 6), float32] {
  %555 = fn () -> Tensor[(4, 14, 6), float32] {
    %554 = @func_1985() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %554.1
  };
  %555() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_7983(%var_7981: Tensor[(3, 16, 2), float64], %var_7982: Tensor[(3, 16, 2), float64]) -> (Tensor[(3, 16, 2), float64],) {
  @func_7979(%var_7981, %var_7982) /* ty=(Tensor[(3, 16, 2), float64],) */
}

def @func_4709(%var_4707: Tensor[(4, 5, 6), float64]) -> Tensor[(4, 5, 6), float64] {
  @func_4706(%var_4707) /* ty=Tensor[(4, 5, 6), float64] */
}

def @func_2195() -> Tensor[(4, 14, 6), float32] {
  @func_2193() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_8150(%var_8148: Tensor[(13, 6, 6), int16], %var_8149: Tensor[(64), float32]) -> (Tensor[(13, 6, 6), bool], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float32]) {
  @func_8146(%var_8148, %var_8149) /* ty=(Tensor[(13, 6, 6), bool], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_10591() -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
  %560 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
    %556 = @func_5540() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %557 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
    %558 = %556.3;
    %559 = %557.1;
    (%558, %559)
  };
  %560() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */
}

def @func_14244(%var_14241: Tensor[(1, 252), float32], %var_14242: Tensor[(15, 252), float32], %var_14243: uint8) -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(15, 252), int8], Tensor[(4, 5, 1), float64], Tensor[(15, 252), uint16], Tensor[(4, 14, 6), float32], Tensor[(15, 252), float64], Tensor[(9, 10, 15), bool], uint8, Tensor[(1350), uint8]) {
  @func_14239(%var_14241, %var_14242, %var_14243) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(15, 252), int8], Tensor[(4, 5, 1), float64], Tensor[(15, 252), uint16], Tensor[(4, 14, 6), float32], Tensor[(15, 252), float64], Tensor[(9, 10, 15), bool], uint8, Tensor[(1350), uint8]) */
}

def @func_1597() -> (Tensor[(4, 14, 6), float32],) {
  %561 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %562 = %561.0;
  (%562,)
}

def @func_3433() -> Tensor[(15, 3, 2), float64] {
  %563 = @func_1396() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %563.1
}

def @func_9817() -> Tensor[(8, 8, 16), float32] {
  %568 = fn () -> Tensor[(8, 8, 16), float32] {
    %564 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 8, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 8, 16), float32] */;
    %565 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(8, 8, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %566 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 8, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 8, 16), float32] */;
    %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    multiply(%566, %567) /* ty=Tensor[(8, 8, 16), float32] */
  };
  %568() /* ty=Tensor[(8, 8, 16), float32] */
}

def @func_6400() -> (Tensor[(4, 14, 6), float32],) {
  %569 = @func_5394() /* ty=Tensor[(4, 14, 6), float32] */;
  (%569,)
}

def @func_7409() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), bool]) {
  @func_7407() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), bool]) */
}

def @func_13976() -> (Tensor[(4, 14, 6), float64], Tensor[(6, 12, 16), uint8], Tensor[(4, 14, 6), float32]) {
  @func_13974() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(6, 12, 16), uint8], Tensor[(4, 14, 6), float32]) */
}

def @func_2402() -> Tensor[(14, 4, 15), float64] {
  %570 = @func_1795() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) */;
  %570.0
}

def @func_5394() -> Tensor[(4, 14, 6), float32] {
  %571 = @func_4137() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %571.0
}

def @func_7261() -> Tensor[(4, 14, 6), float32] {
  %573 = fn () -> Tensor[(4, 14, 6), float32] {
    %572 = @func_6870() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
    %572.0
  };
  %573() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_5181() -> (Tensor[(15, 3, 2), float64],) {
  @func_5179() /* ty=(Tensor[(15, 3, 2), float64],) */
}

def @func_15231() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %577 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
    %574 = @func_4442() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %575 = %574.0;
    %576 = @func_15099() /* ty=Tensor[(4, 14, 6), float32] */;
    (%575, %576)
  };
  %577() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_12627() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 4, 4), float32], Tensor[(8, 8), float32]) {
  %583 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(4, 4, 4), float32], Tensor[(8, 8), float32]) {
    %578 = @func_9645() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %579 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 8), float32] */, dtype="float32") /* ty=Tensor[(8, 8), float32] */;
    %580 = reshape(%579, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float32] */;
    %581 = %578.0;
    %582 = @func_2128(%580) /* ty=Tensor[(4, 4, 4), float32] */;
    (%581, %582, meta[relay.Constant][13] /* ty=Tensor[(8, 8), float32] */)
  };
  %583() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 4, 4), float32], Tensor[(8, 8), float32]) */
}

def @func_7961(%var_7924: Tensor[(112), uint64]) -> (Tensor[(4, 14, 6), float32], uint64, Tensor[(112), uint64], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 7), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 4, 7), float64]) {
  %584 = @func_4813() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float32]) */;
  %585 = cast(meta[relay.Constant][14] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %586 = cast(%var_7924, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %587 = reshape(%585, newshape=[]) /* ty=uint64 */;
  %588 = reshape(%586, newshape=[4, 4, 7]) /* ty=Tensor[(4, 4, 7), uint64] */;
  %589 = @func_2438(%587, %588) /* ty=Tensor[(4, 4, 7), bool] */;
  %590 = cast(%589, dtype="float32") /* ty=Tensor[(4, 4, 7), float32] */;
  %591 = sin(%590) /* ty=Tensor[(4, 4, 7), float32] */;
  %592 = cast(%591, dtype="float64") /* ty=Tensor[(4, 4, 7), float64] */;
  %593 = @func_2146() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
  %594 = cast(%589, dtype="float64") /* ty=Tensor[(4, 4, 7), float64] */;
  %595 = @func_5979() /* ty=Tensor[(4, 14, 6), float32] */;
  %596 = %584.1;
  %597 = asinh(%592) /* ty=Tensor[(4, 4, 7), float64] */;
  %598 = %593.1;
  %599 = acosh(%594) /* ty=Tensor[(4, 4, 7), float64] */;
  (%595, meta[relay.Constant][14] /* ty=uint64 */, %var_7924, %596, %597, %598, %599)
}

def @func_8926() -> Tensor[(4, 14, 6), float32] {
  %600 = @func_4137() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %600.0
}

def @func_3737(%var_3735: Tensor[(840), float64]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(840), float64], Tensor[(4, 14, 6), float64]) {
  @func_3734(%var_3735) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(840), float64], Tensor[(4, 14, 6), float64]) */
}

def @func_3403(%var_3356: Tensor[(12, 16, 12), float64]) -> Tensor[(12, 16, 12), float64] {
  %601 = cast(%var_3356, dtype="float64") /* ty=Tensor[(12, 16, 12), float64] */;
  log2(%601) /* ty=Tensor[(12, 16, 12), float64] */
}

def @func_6089() -> (Tensor[(15, 3, 2), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 5, 1), float64]) {
  @func_6087() /* ty=(Tensor[(15, 3, 2), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 5, 1), float64]) */
}

def @func_8869() -> (Tensor[(14, 4, 15), float64],) {
  %604 = fn () -> (Tensor[(14, 4, 15), float64],) {
    %602 = @func_868() /* ty=(Tensor[(14, 4, 15), float64],) */;
    %603 = %602.0;
    (%603,)
  };
  %604() /* ty=(Tensor[(14, 4, 15), float64],) */
}

def @func_8076(%var_8036: int64) -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], int64, Tensor[(8, 1), bool], Tensor[(4, 14, 6), float32]) {
  %605 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %606 = cast(%var_8036, dtype="int64") /* ty=int64 */;
  %607 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 1), int64] */, dtype="int64") /* ty=Tensor[(8, 1), int64] */;
  %608 = reshape(%606, newshape=[]) /* ty=int64 */;
  %609 = reshape(%607, newshape=[8]) /* ty=Tensor[(8), int64] */;
  %610 = @func_2953(%608, %609) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], int64, Tensor[(8), int64]) */;
  %611 = %610.2;
  %612 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 1), int64] */, dtype="bool") /* ty=Tensor[(8, 1), bool] */;
  %613 = cast(%611, dtype="bool") /* ty=bool */;
  %614 = @func_5943() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %615 = %605.1;
  %616 = @func_876() /* ty=Tensor[(4, 14, 6), float64] */;
  %617 = equal(%612, %613) /* ty=Tensor[(8, 1), bool] */;
  %618 = %614.1;
  (%615, %616, %var_8036, %617, %618)
}

def @func_6743() -> (Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) {
  @func_6741() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */
}

def @func_10724() -> (Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) {
  @func_10722() /* ty=(Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_6741() -> (Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) {
  %619 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %620 = @func_5829() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(1170), float64], Tensor[(64), float32]) */;
  %621 = @func_4813() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float32]) */;
  %622 = @func_2329() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %623 = %619.0;
  %624 = @func_4891() /* ty=Tensor[(14, 4, 15), float64] */;
  %625 = %620.3;
  %626 = %621.0;
  %627 = %622.0;
  (%623, %624, %625, %626, %627)
}

def @func_2416() -> (Tensor[(4, 5, 1), float64],) {
  %630 = fn () -> (Tensor[(4, 5, 1), float64],) {
    %628 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 5, 1), float64] */, dtype="float64") /* ty=Tensor[(4, 5, 1), float64] */;
    %629 = exp(%628) /* ty=Tensor[(4, 5, 1), float64] */;
    (%629,)
  };
  %630() /* ty=(Tensor[(4, 5, 1), float64],) */
}

def @func_7787(%var_7785: Tensor[(300), bool], %var_7786: Tensor[(64), float32]) -> (Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(840), float64], Tensor[(4, 14, 6), float32], Tensor[(64), float32]) {
  %654 = fn (%var_7695: Tensor[(300), bool], %var_7776: Tensor[(64), float32]) -> (Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(840), float64], Tensor[(4, 14, 6), float32], Tensor[(64), float32]) {
    %631 = @func_5773() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
    %632 = @func_4962() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %633 = @func_4844() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %634 = @func_3925() /* ty=Tensor[(14, 4, 15), float64] */;
    %635 = cast(%634, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
    %636 = reshape(%635, newshape=[840]) /* ty=Tensor[(840), float64] */;
    %637 = @func_3734(%636) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(840), float64], Tensor[(4, 14, 6), float64]) */;
    %638 = cast(%var_7695, dtype="bool") /* ty=Tensor[(300), bool] */;
    %639 = reshape(%638, newshape=[10, 30]) /* ty=Tensor[(10, 30), bool] */;
    %640 = @func_5890(%639) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(64), float32], Tensor[(10, 30), bool], Tensor[(2, 32), float32]) */;
    %641 = %640.1;
    %642 = cast(%var_7776, dtype="float32") /* ty=Tensor[(64), float32] */;
    %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(1), int32] */;
    %644 = cast(%641, dtype="float32") /* ty=Tensor[(64), float32] */;
    %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?), float32] */;
    %646 = %631.0;
    %647 = %632.0;
    %648 = %633.2;
    %649 = @func_6283() /* ty=Tensor[(4, 14, 6), float32] */;
    %650 = @func_7260() /* ty=Tensor[(4, 14, 6), float32] */;
    %651 = %637.2;
    %652 = @func_978() /* ty=Tensor[(4, 14, 6), float32] */;
    %653 = mod(%644, %645) /* ty=Tensor[(64), float32] */;
    (%646, %var_7695, %634, %647, %648, %649, %650, %651, %652, %653)
  };
  %654(%var_7785, %var_7786) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(840), float64], Tensor[(4, 14, 6), float32], Tensor[(64), float32]) */
}

def @func_6457() -> (Tensor[(14, 4, 15), float64],) {
  @func_6455() /* ty=(Tensor[(14, 4, 15), float64],) */
}

def @func_914() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %655 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %656 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %657 = %655.0;
  %658 = %656.0;
  (%657, %658)
}

def @func_8976() -> (Tensor[(4, 14, 6), float32],) {
  %661 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %659 = @func_8257() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %660 = %659.0;
    (%660,)
  };
  %661() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_2171() -> Tensor[(4, 14, 6), float32] {
  @func_2169() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_4472() -> Tensor[(4, 14, 6), float64] {
  %665 = fn () -> Tensor[(4, 14, 6), float64] {
    %662 = @func_657() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
    %663 = %662.0;
    %664 = cast(%663, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
    tan(%664) /* ty=Tensor[(4, 14, 6), float64] */
  };
  %665() /* ty=Tensor[(4, 14, 6), float64] */
}

def @func_5038() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %676 = fn () -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
    %666 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
    %667 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %668 = @func_4120() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
    %669 = %668.0;
    %670 = cast(%669, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
    %671 = @func_1846() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %672 = %666.0;
    %673 = %667.0;
    %674 = erf(%670) /* ty=Tensor[(4, 14, 6), float32] */;
    %675 = %671.0;
    (%672, %673, %674, %675)
  };
  %676() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_559() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  @func_557() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_3501() -> (Tensor[(4, 5, 1), float64],) {
  %679 = fn () -> (Tensor[(4, 5, 1), float64],) {
    %677 = @func_2415() /* ty=(Tensor[(4, 5, 1), float64],) */;
    %678 = %677.0;
    (%678,)
  };
  %679() /* ty=(Tensor[(4, 5, 1), float64],) */
}

def @func_5329() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
  %680 = @func_4066() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %681 = @func_2329() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %682 = @func_1396() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %683 = %680.2;
  %684 = %681.1;
  %685 = %682.1;
  (%683, %684, %685)
}

def @func_14239(%var_14195: Tensor[(1, 252), float32], %var_14205: Tensor[(15, 252), float32], %var_14235: uint8) -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(15, 252), int8], Tensor[(4, 5, 1), float64], Tensor[(15, 252), uint16], Tensor[(4, 14, 6), float32], Tensor[(15, 252), float64], Tensor[(9, 10, 15), bool], uint8, Tensor[(1350), uint8]) {
  %686 = cast(%var_14195, dtype="float32") /* ty=Tensor[(1, 252), float32] */;
  %687 = reshape(%686, newshape=[252]) /* ty=Tensor[(252), float32] */;
  %688 = @func_12214(%687) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(12, 3, 7), float32], Tensor[(252), float32]) */;
  %689 = cast(%var_14195, dtype="int8") /* ty=Tensor[(1, 252), int8] */;
  %690 = cast(%var_14205, dtype="int8") /* ty=Tensor[(15, 252), int8] */;
  %691 = @func_2415() /* ty=(Tensor[(4, 5, 1), float64],) */;
  %692 = cast(%var_14205, dtype="uint16") /* ty=Tensor[(15, 252), uint16] */;
  %693 = cast(%var_14195, dtype="uint16") /* ty=Tensor[(1, 252), uint16] */;
  %694 = @func_12642() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(280), float64]) */;
  %695 = cast(%var_14205, dtype="float64") /* ty=Tensor[(15, 252), float64] */;
  %696 = cast(%var_14235, dtype="uint8") /* ty=uint8 */;
  %697 = cast(meta[relay.Constant][17] /* ty=Tensor[(1350), uint8] */, dtype="uint8") /* ty=Tensor[(1350), uint8] */;
  %698 = reshape(%696, newshape=[]) /* ty=uint8 */;
  %699 = reshape(%697, newshape=[9, 10, 15]) /* ty=Tensor[(9, 10, 15), uint8] */;
  %700 = @func_4217(%698, %699) /* ty=(Tensor[(9, 10, 15), bool], Tensor[(9, 10, 15), uint16], Tensor[(4, 14, 6), float64]) */;
  %701 = @func_12499() /* ty=Tensor[(4, 14, 6), float64] */;
  %702 = %688.0;
  %703 = right_shift(%689, %690) /* ty=Tensor[(15, 252), int8] */;
  %704 = %691.0;
  %705 = maximum(%692, %693) /* ty=Tensor[(15, 252), uint16] */;
  %706 = %694.1;
  %707 = acosh(%695) /* ty=Tensor[(15, 252), float64] */;
  %708 = %700.0;
  (%701, %702, %703, %704, %705, %706, %707, %708, %var_14235, meta[relay.Constant][17] /* ty=Tensor[(1350), uint8] */)
}

def @func_5945() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  @func_5943() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_9346() -> (Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) {
  @func_9344() /* ty=(Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) */
}

def @func_8928() -> Tensor[(4, 14, 6), float32] {
  @func_8926() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_14545() -> Tensor[(4, 14, 6), float32] {
  %710 = fn () -> Tensor[(4, 14, 6), float32] {
    %709 = @func_10858() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %709.0
  };
  %710() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_9466() -> (Tensor[(14, 4, 15), float64],) {
  %711 = @func_6455() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %712 = %711.0;
  (%712,)
}

def @func_1396() -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
  %713 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %714 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %715 = %713.1;
  %716 = %714.1;
  (%715, %716)
}

def @func_11169() -> (Tensor[(4, 14, 6), float64],) {
  %719 = fn () -> (Tensor[(4, 14, 6), float64],) {
    %717 = @func_10464() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
    %718 = %717.0;
    (%718,)
  };
  %719() /* ty=(Tensor[(4, 14, 6), float64],) */
}

def @func_4007(%var_4005: Tensor[(14, 4, 15), float64]) -> (Tensor[(14, 4, 15), uint64], Tensor[(4, 14, 6), float32]) {
  @func_4004(%var_4005) /* ty=(Tensor[(14, 4, 15), uint64], Tensor[(4, 14, 6), float32]) */
}

def @func_3270(%var_3268: bool, %var_3269: Tensor[(3, 1, 12), bool]) -> (Tensor[(3, 1, 12), int32], Tensor[(3, ?, 12), int8], Tensor[(3, 1, 12), uint32], Tensor[(3, ?, 12), bool]) {
  %747 = fn (%var_3198: bool, %var_3199: Tensor[(3, 1, 12), bool]) -> (Tensor[(3, 1, 12), int32], Tensor[(3, ?, 12), int8], Tensor[(3, 1, 12), uint32], Tensor[(3, ?, 12), bool]) {
    %720 = cast(%var_3198, dtype="bool") /* ty=bool */;
    %721 = cast(%var_3199, dtype="bool") /* ty=Tensor[(3, 1, 12), bool] */;
    %722 = logical_and(%720, %721) /* ty=Tensor[(3, 1, 12), bool] */;
    %723 = cast(%722, dtype="int32") /* ty=Tensor[(3, 1, 12), int32] */;
    %724 = cast(%var_3198, dtype="int32") /* ty=int32 */;
    %725 = cast(%722, dtype="bool") /* ty=Tensor[(3, 1, 12), bool] */;
    %726 = cast(%var_3198, dtype="bool") /* ty=bool */;
    %727 = less_equal(%725, %726) /* ty=Tensor[(3, 1, 12), bool] */;
    %728 = cast(%727, dtype="float64") /* ty=Tensor[(3, 1, 12), float64] */;
    %729 = shape_of(%722, dtype="int32") /* ty=Tensor[(3), int32] */;
    %730 = cast(%722, dtype="float64") /* ty=Tensor[(3, 1, 12), float64] */;
    %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %732 = divide(%730, %731) /* ty=Tensor[(3, ?, 12), float64] */;
    %733 = cast(%732, dtype="int8") /* ty=Tensor[(3, ?, 12), int8] */;
    %734 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
    %735 = cast(%727, dtype="int8") /* ty=Tensor[(3, 1, 12), int8] */;
    %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %737 = cast(%var_3199, dtype="uint32") /* ty=Tensor[(3, 1, 12), uint32] */;
    %738 = cast(%var_3198, dtype="uint32") /* ty=uint32 */;
    %739 = cast(%var_3199, dtype="bool") /* ty=Tensor[(3, 1, 12), bool] */;
    %740 = shape_of(%722, dtype="int32") /* ty=Tensor[(3), int32] */;
    %741 = cast(%722, dtype="bool") /* ty=Tensor[(3, 1, 12), bool] */;
    %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %743 = add(%723, %724) /* ty=Tensor[(3, 1, 12), int32] */;
    %744 = bitwise_and(%735, %736) /* ty=Tensor[(3, ?, 12), int8] */;
    %745 = right_shift(%737, %738) /* ty=Tensor[(3, 1, 12), uint32] */;
    %746 = not_equal(%741, %742) /* ty=Tensor[(3, ?, 12), bool] */;
    (%743, %744, %745, %746)
  };
  %747(%var_3268, %var_3269) /* ty=(Tensor[(3, 1, 12), int32], Tensor[(3, ?, 12), int8], Tensor[(3, 1, 12), uint32], Tensor[(3, ?, 12), bool]) */
}

def @func_3467() -> (Tensor[(14, 4, 15), float64],) {
  @func_3465() /* ty=(Tensor[(14, 4, 15), float64],) */
}

def @func_2404() -> Tensor[(14, 4, 15), float64] {
  @func_2402() /* ty=Tensor[(14, 4, 15), float64] */
}

def @func_1340() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) {
  %752 = fn () -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) {
    %748 = @func_814() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
    %749 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
    %750 = %748.0;
    %751 = %749.0;
    (%750, %751)
  };
  %752() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */
}

def @func_15662() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  @func_15660() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_1885() -> Tensor[(4, 14, 6), float32] {
  @func_1883() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_4963() -> (Tensor[(4, 14, 6), float32],) {
  %755 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %753 = @func_4417() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), bool]) */;
    %754 = %753.0;
    (%754,)
  };
  %755() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_12874() -> (Tensor[(15, 3, 2), float32],) {
  %757 = fn () -> (Tensor[(15, 3, 2), float32],) {
    %756 = @func_7552() /* ty=Tensor[(15, 3, 2), float32] */;
    (%756,)
  };
  %757() /* ty=(Tensor[(15, 3, 2), float32],) */
}

def @func_12729() -> (Tensor[(14, 4, 15), float64],) {
  %760 = fn () -> (Tensor[(14, 4, 15), float64],) {
    %758 = @func_4417() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), bool]) */;
    %759 = %758.1;
    (%759,)
  };
  %760() /* ty=(Tensor[(14, 4, 15), float64],) */
}

def @func_11010() -> (Tensor[(4, 14, 6), float32],) {
  %763 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %761 = @func_467() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %762 = %761.0;
    (%762,)
  };
  %763() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_12881() -> (Tensor[(4, 14, 6), float32],) {
  %766 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %764 = @func_12250() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
    %765 = %764.3;
    (%765,)
  };
  %766() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_2831(%var_2794: int64, %var_2795: Tensor[(1, 4, 2), int64]) -> (Tensor[(1, 4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(840), float64]) {
  %767 = cast(%var_2794, dtype="int64") /* ty=int64 */;
  %768 = cast(%var_2795, dtype="int64") /* ty=Tensor[(1, 4, 2), int64] */;
  %769 = cast(meta[relay.Constant][18] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %770 = reshape(%769, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float64] */;
  %771 = left_shift(%767, %768) /* ty=Tensor[(1, 4, 2), int64] */;
  %772 = @func_2193() /* ty=Tensor[(4, 14, 6), float32] */;
  %773 = @func_2576(%770) /* ty=Tensor[(14, 4, 15), bool] */;
  (%771, %772, %773, meta[relay.Constant][18] /* ty=Tensor[(840), float64] */)
}

def @func_5980() -> Tensor[(4, 14, 6), float32] {
  %774 = fn () -> Tensor[(4, 14, 6), float32] {
    @func_939() /* ty=Tensor[(4, 14, 6), float32] */
  };
  %774() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_2362() -> Tensor[(15, 3, 2), float64] {
  %776 = fn () -> Tensor[(15, 3, 2), float64] {
    %775 = @func_1396() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
    %775.1
  };
  %776() /* ty=Tensor[(15, 3, 2), float64] */
}

def @func_6044() -> Tensor[(14, 4, 15), float64] {
  @func_6042() /* ty=Tensor[(14, 4, 15), float64] */
}

def @func_12614() -> (Tensor[(4, 14, 6), float32],) {
  %778 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %777 = @func_7260() /* ty=Tensor[(4, 14, 6), float32] */;
    (%777,)
  };
  %778() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_13068() -> Tensor[(4, 14, 6), float32] {
  @func_13066() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_9026() -> Tensor[(4, 14, 6), float32] {
  %779 = fn () -> Tensor[(4, 14, 6), float32] {
    @func_939() /* ty=Tensor[(4, 14, 6), float32] */
  };
  %779() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_878() -> Tensor[(4, 14, 6), float64] {
  @func_876() /* ty=Tensor[(4, 14, 6), float64] */
}

def @func_15432(%var_15396: Tensor[(5, 60), bool]) -> (Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(5, 60), bool], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
  %780 = @func_9897() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) */;
  %781 = @func_3465() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %782 = cast(%var_15396, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %783 = reshape(%782, newshape=[10, 30]) /* ty=Tensor[(10, 30), bool] */;
  %784 = @func_5890(%783) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(64), float32], Tensor[(10, 30), bool], Tensor[(2, 32), float32]) */;
  %785 = @func_9683() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %786 = @func_9466() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %787 = %780.0;
  %788 = %781.0;
  %789 = %784.0;
  %790 = %785.1;
  %791 = %786.0;
  (%787, %788, %789, %var_15396, %790, %791)
}

def @func_11953() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) {
  %792 = @func_9274() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %793 = @func_2547() /* ty=Tensor[(4, 14, 6), float32] */;
  %794 = %792.0;
  (%793, %794)
}

def @func_5331() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
  @func_5329() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */
}

def @func_6994() -> Tensor[(4, 14, 6), float32] {
  @func_6992() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_7657(%var_7655: float32, %var_7656: Tensor[(1, 840), float32]) -> (Tensor[(6, 5, 4), float32], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 5, 12), float32], Tensor[(4, 14, 6), float32], Tensor[(1, 840), float32]) {
  %808 = fn (%var_7596: float32, %var_7628: Tensor[(1, 840), float32]) -> (Tensor[(6, 5, 4), float32], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 5, 12), float32], Tensor[(4, 14, 6), float32], Tensor[(1, 840), float32]) {
    %795 = cast(%var_7596, dtype="float32") /* ty=float32 */;
    %796 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 5, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 5, 4), float32] */;
    %797 = @func_6648() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64]) */;
    %798 = @func_4385() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %799 = cast(%var_7628, dtype="float32") /* ty=Tensor[(1, 840), float32] */;
    %800 = reshape(%799, newshape=[14, 5, 12]) /* ty=Tensor[(14, 5, 12), float32] */;
    %801 = cast(%var_7628, dtype="float32") /* ty=Tensor[(1, 840), float32] */;
    %802 = power(%795, %796) /* ty=Tensor[(6, 5, 4), float32] */;
    %803 = %797.1;
    %804 = %798.0;
    %805 = @func_5347(%800) /* ty=Tensor[(14, 5, 12), float32] */;
    %806 = @func_1883() /* ty=Tensor[(4, 14, 6), float32] */;
    %807 = atanh(%801) /* ty=Tensor[(1, 840), float32] */;
    (%802, %803, %804, %805, %806, %807)
  };
  %808(%var_7655, %var_7656) /* ty=(Tensor[(6, 5, 4), float32], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 5, 12), float32], Tensor[(4, 14, 6), float32], Tensor[(1, 840), float32]) */
}

def @func_9418() -> Tensor[(14, 4, 15), float64] {
  %809 = @func_3465() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %809.0
}

def @func_5074() -> (Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) {
  %813 = fn () -> (Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) {
    %810 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
    %811 = %810.1;
    %812 = @func_2254() /* ty=Tensor[(14, 4, 15), float64] */;
    (%811, %812)
  };
  %813() /* ty=(Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) */
}

def @func_13132() -> (Tensor[(4, 14, 6), float32],) {
  %816 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %814 = @func_6400() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %815 = %814.0;
    (%815,)
  };
  %816() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_12838() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), uint32]) {
  @func_12836() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), uint32]) */
}

def @func_7964(%var_7962: Tensor[(112), uint64]) -> (Tensor[(4, 14, 6), float32], uint64, Tensor[(112), uint64], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 7), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 4, 7), float64]) {
  @func_7961(%var_7962) /* ty=(Tensor[(4, 14, 6), float32], uint64, Tensor[(112), uint64], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 7), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 4, 7), float64]) */
}

def @func_8146(%var_8122: Tensor[(13, 6, 6), int16], %var_8133: Tensor[(64), float32]) -> (Tensor[(13, 6, 6), bool], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float32]) {
  %817 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 6, 6), int16] */, dtype="int16") /* ty=Tensor[(13, 6, 6), int16] */;
  %818 = shape_of(%var_8122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %819 = cast(%var_8122, dtype="int16") /* ty=Tensor[(13, 6, 6), int16] */;
  %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %821 = logical_xor(%819, %820) /* ty=Tensor[(13, 6, 6), int16] */;
  %822 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 6, 6), int16] */, dtype="bool") /* ty=Tensor[(13, 6, 6), bool] */;
  %823 = shape_of(%821, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%821, dtype="bool") /* ty=Tensor[(13, 6, 6), bool] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %826 = cast(%var_8133, dtype="float32") /* ty=Tensor[(64), float32] */;
  %827 = reshape(%826, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float32] */;
  %828 = logical_or(%824, %825) /* ty=Tensor[(13, 6, 6), bool] */;
  %829 = @func_2128(%827) /* ty=Tensor[(4, 4, 4), float32] */;
  %830 = @func_2517() /* ty=Tensor[(4, 14, 6), float32] */;
  (%828, %829, %var_8133, %830)
}

def @func_12668() -> Tensor[(15, 3, 2), float64] {
  @func_3433() /* ty=Tensor[(15, 3, 2), float64] */
}

def @func_14021() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %834 = fn () -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
    %831 = @func_8306() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %832 = @func_6752() /* ty=Tensor[(4, 14, 6), float64] */;
    %833 = %831.0;
    (%832, %833)
  };
  %834() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_7450() -> Tensor[(4, 5, 1), float64] {
  @func_4635() /* ty=Tensor[(4, 5, 1), float64] */
}

def @func_13974() -> (Tensor[(4, 14, 6), float64], Tensor[(6, 12, 16), uint8], Tensor[(4, 14, 6), float32]) {
  %835 = @func_13573() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %836 = @func_5540() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %837 = %835.0;
  %838 = @func_8594() /* ty=Tensor[(6, 12, 16), uint8] */;
  %839 = %836.3;
  (%837, %838, %839)
}

def @func_12716(%var_12715: Tensor[(300), bool]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(64), float32], Tensor[(12, 3, 7), float32]) {
  %850 = fn (%var_12690: Tensor[(300), bool]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(64), float32], Tensor[(12, 3, 7), float32]) {
    %840 = @func_4385() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %841 = cast(%var_12690, dtype="bool") /* ty=Tensor[(300), bool] */;
    %842 = cast(meta[relay.Constant][21] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %843 = reshape(%841, newshape=[300]) /* ty=Tensor[(300), bool] */;
    %844 = reshape(%842, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %845 = @func_7784(%843, %844) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(840), float64], Tensor[(4, 14, 6), float32], Tensor[(64), float32]) */;
    %846 = @func_12019() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(12, 3, 7), float32], Tensor[(252, 1), float32]) */;
    %847 = %840.0;
    %848 = %845.0;
    %849 = %846.1;
    (%847, %848, %var_12690, meta[relay.Constant][21] /* ty=Tensor[(64), float32] */, %849)
  };
  %850(%var_12715) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(64), float32], Tensor[(12, 3, 7), float32]) */
}

def @func_14785() -> (Tensor[(4, 14, 6), float64],) {
  %851 = @func_2647() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %852 = %851.0;
  (%852,)
}

def @func_1398() -> (Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) {
  @func_1396() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */
}

def @func_6284() -> Tensor[(4, 14, 6), float32] {
  %853 = fn () -> Tensor[(4, 14, 6), float32] {
    @func_5133() /* ty=Tensor[(4, 14, 6), float32] */
  };
  %853() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_6784() -> Tensor[(4, 14, 6), float32] {
  %854 = @func_6016() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %854.0
}

def @func_6042() -> Tensor[(14, 4, 15), float64] {
  %855 = @func_4599() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %855.0
}

def @func_15155() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  @func_15153() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_15820() -> Tensor[(4, 14, 6), float32] {
  @func_8926() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_10661() -> (Tensor[(4, 14, 6), float32], Tensor[(10, 11, 2), float32], Tensor[(15, 3, 2), float32]) {
  %856 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 11, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 11, 2), float64] */;
  %857 = acos(%856) /* ty=Tensor[(10, 11, 2), float64] */;
  %858 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 11, 2), float64] */, dtype="float32") /* ty=Tensor[(10, 11, 2), float32] */;
  %859 = shape_of(%857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(%857, dtype="float32") /* ty=Tensor[(10, 11, 2), float32] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %862 = @func_8949() /* ty=(Tensor[(15, 3, 2), float32],) */;
  %863 = @func_5133() /* ty=Tensor[(4, 14, 6), float32] */;
  %864 = floor_divide(%860, %861) /* ty=Tensor[(10, 11, 2), float32] */;
  %865 = %862.0;
  (%863, %864, %865)
}

def @func_2909() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(14, 4, 15), bool]) {
  @func_2907() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(14, 4, 15), bool]) */
}

def @func_15028() -> Tensor[(4, 14, 6), float32] {
  @func_15026() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_12021() -> (Tensor[(4, 14, 6), float32], Tensor[(12, 3, 7), float32], Tensor[(252, 1), float32]) {
  @func_12019() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(12, 3, 7), float32], Tensor[(252, 1), float32]) */
}

def @func_2576(%var_2560: Tensor[(14, 4, 15), float64]) -> Tensor[(14, 4, 15), bool] {
  %866 = @func_1191() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %867 = %866.1;
  %868 = cast(%var_2560, dtype="bool") /* ty=Tensor[(14, 4, 15), bool] */;
  %869 = shape_of(%867, dtype="int32") /* ty=Tensor[(3), int32] */;
  %870 = cast(%867, dtype="bool") /* ty=Tensor[(14, 4, 15), bool] */;
  %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%870, %871) /* ty=Tensor[(14, 4, 15), bool] */
}

def @func_10425() -> (Tensor[(4, 14, 6), float64],) {
  %874 = fn () -> (Tensor[(4, 14, 6), float64],) {
    %872 = @func_2146() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
    %873 = %872.0;
    (%873,)
  };
  %874() /* ty=(Tensor[(4, 14, 6), float64],) */
}

def @func_10984(%var_10982: bool, %var_10983: Tensor[(36), bool]) -> (Tensor[(4, 14, 6), float32], Tensor[(3, 1, 12), uint32], bool, Tensor[(36), bool], Tensor[(4, 14, 6), float32]) {
  @func_10980(%var_10982, %var_10983) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(3, 1, 12), uint32], bool, Tensor[(36), bool], Tensor[(4, 14, 6), float32]) */
}

def @func_5573() -> (Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) {
  %880 = fn () -> (Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) {
    %875 = @func_1795() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) */;
    %876 = @func_467() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %877 = @func_876() /* ty=Tensor[(4, 14, 6), float64] */;
    %878 = %875.3;
    %879 = %876.1;
    (%877, %878, %879)
  };
  %880() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_9898() -> (Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) {
  %886 = fn () -> (Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) {
    %881 = @func_6455() /* ty=(Tensor[(14, 4, 15), float64],) */;
    %882 = @func_4252() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64]) */;
    %883 = %881.0;
    %884 = %882.1;
    %885 = @func_3856() /* ty=Tensor[(14, 4, 15), float64] */;
    (%883, %884, %885)
  };
  %886() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) */
}

def @func_667() -> (Tensor[(15, 3, 2), float64],) {
  %887 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
  %888 = rsqrt(%887) /* ty=Tensor[(15, 3, 2), float64] */;
  (%888,)
}

def @func_12681() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), bool]) {
  @func_12679() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), bool]) */
}

def @func_2169() -> Tensor[(4, 14, 6), float32] {
  %889 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %889.0
}

def @func_13450() -> (Tensor[(120), float64], Tensor[(4, 14, 6), float32], Tensor[(300), bool]) {
  @func_13448() /* ty=(Tensor[(120), float64], Tensor[(4, 14, 6), float32], Tensor[(300), bool]) */
}

def @func_13904() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], bool, bool, Tensor[(36), bool], Tensor[(4, 14, 6), float32]) {
  %905 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], bool, bool, Tensor[(36), bool], Tensor[(4, 14, 6), float32]) {
    %890 = @func_13131() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %891 = @func_11168() /* ty=(Tensor[(4, 14, 6), float64],) */;
    %892 = @func_9466() /* ty=(Tensor[(14, 4, 15), float64],) */;
    %893 = @func_8457() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) */;
    %894 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %895 = cast(meta[relay.Constant][24] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
    %896 = reshape(%894, newshape=[]) /* ty=bool */;
    %897 = reshape(%895, newshape=[36]) /* ty=Tensor[(36), bool] */;
    %898 = @func_11142(%896, %897) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(3, 1, 12), uint32], bool, Tensor[(36), bool]) */;
    %899 = %890.0;
    %900 = %891.0;
    %901 = %892.0;
    %902 = %893.2;
    %903 = %898.2;
    %904 = @func_8850() /* ty=Tensor[(4, 14, 6), float32] */;
    (%899, %900, %901, %902, %903, True /* ty=bool */, meta[relay.Constant][24] /* ty=Tensor[(36), bool] */, %904)
  };
  %905() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], bool, bool, Tensor[(36), bool], Tensor[(4, 14, 6), float32]) */
}

def @func_15636() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %909 = fn () -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
    %906 = @func_9274() /* ty=(Tensor[(4, 14, 6), float64],) */;
    %907 = %906.0;
    %908 = @func_1883() /* ty=Tensor[(4, 14, 6), float32] */;
    (%907, %908)
  };
  %909() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_14053() -> (Tensor[(4, 14, 6), float32],) {
  %911 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %910 = @func_8926() /* ty=Tensor[(4, 14, 6), float32] */;
    (%910,)
  };
  %911() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_3072() -> (Tensor[(4, 14, 6), float64],) {
  @func_3070() /* ty=(Tensor[(4, 14, 6), float64],) */
}

def @func_12965() -> (Tensor[(4, 5, 1), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  @func_12963() /* ty=(Tensor[(4, 5, 1), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_6580() -> (Tensor[(15, 3, 2), float32], Tensor[(4, 14, 6), float32]) {
  %916 = fn () -> (Tensor[(15, 3, 2), float32], Tensor[(4, 14, 6), float32]) {
    %912 = @func_4813() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float32]) */;
    %913 = @func_4066() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %914 = %912.2;
    %915 = %913.2;
    (%914, %915)
  };
  %916() /* ty=(Tensor[(15, 3, 2), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_15727() -> Tensor[(14, 4, 15), float64] {
  %917 = @func_9466() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %917.0
}

def @func_4511() -> Tensor[(4, 14, 6), float64] {
  %919 = fn () -> Tensor[(4, 14, 6), float64] {
    %918 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
    %918.0
  };
  %919() /* ty=Tensor[(4, 14, 6), float64] */
}

def @func_2193() -> Tensor[(4, 14, 6), float32] {
  %920 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %920.1
}

def @func_3465() -> (Tensor[(14, 4, 15), float64],) {
  %921 = @func_2146() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
  %922 = %921.1;
  (%922,)
}

def @func_7452() -> Tensor[(4, 5, 1), float64] {
  @func_7450() /* ty=Tensor[(4, 5, 1), float64] */
}

def @func_6540(%var_6538: Tensor[(2304), float64]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(12, 16, 12), float64], Tensor[(2304), float64]) {
  @func_6537(%var_6538) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(12, 16, 12), float64], Tensor[(2304), float64]) */
}

def @func_8730() -> (Tensor[(15, 3, 2), float64],) {
  %925 = fn () -> (Tensor[(15, 3, 2), float64],) {
    %923 = @func_8554() /* ty=(Tensor[(15, 3, 2), float64],) */;
    %924 = %923.0;
    (%924,)
  };
  %925() /* ty=(Tensor[(15, 3, 2), float64],) */
}

def @func_15766(%var_15745: Tensor[(12, 4, 5), int16], %var_15746: Tensor[(12, 4, 5), int16], %var_15753: Tensor[(150, 2), bool], %var_15754: Tensor[(16, 4), float32]) -> (Tensor[(12, 4, 5), int16], Tensor[(5, 5, 12), bool], Tensor[(150, 2), bool], Tensor[(16, 4), float32], Tensor[(4, 5, 1), float64]) {
  %926 = cast(%var_15746, dtype="int16") /* ty=Tensor[(12, 4, 5), int16] */;
  %927 = shape_of(%var_15745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %928 = cast(%var_15745, dtype="int16") /* ty=Tensor[(12, 4, 5), int16] */;
  %929 = dyn.reshape(%926, %927, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %930 = cast(%var_15753, dtype="bool") /* ty=Tensor[(150, 2), bool] */;
  %931 = cast(%var_15753, dtype="bool") /* ty=Tensor[(150, 2), bool] */;
  %932 = cast(%var_15754, dtype="float32") /* ty=Tensor[(16, 4), float32] */;
  %933 = reshape(%930, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), bool] */;
  %934 = reshape(%931, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), bool] */;
  %935 = reshape(%932, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %936 = @func_3043(%933, %934, %935) /* ty=(Tensor[(5, 5, 12), bool], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %937 = @func_9738() /* ty=(Tensor[(4, 5, 1), float64],) */;
  %938 = bitwise_and(%928, %929) /* ty=Tensor[(12, 4, 5), int16] */;
  %939 = %936.0;
  %940 = %937.0;
  (%938, %939, %var_15753, %var_15754, %940)
}

def @func_13151(%var_13133: Tensor[(10, 9, 5), int32], %var_13134: Tensor[(10, 9, 5), int32], %var_13142: Tensor[(10, 9, 5), int32]) -> (Tensor[(10, 9, 5), bool], Tensor[(10, 9, 5), float32]) {
  %941 = cast(%var_13134, dtype="bool") /* ty=Tensor[(10, 9, 5), bool] */;
  %942 = shape_of(%var_13133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%var_13133, dtype="bool") /* ty=Tensor[(10, 9, 5), bool] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %945 = cast(%var_13142, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
  %946 = shape_of(%var_13133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %947 = cast(%var_13133, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
  %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %949 = not_equal(%943, %944) /* ty=Tensor[(10, 9, 5), bool] */;
  %950 = mod(%947, %948) /* ty=Tensor[(10, 9, 5), float32] */;
  (%949, %950)
}

def @func_7102(%var_7099: Tensor[(12, 3, 7), float32]) -> Tensor[(12, 3, 7), float32] {
  %951 = cast(%var_7099, dtype="float32") /* ty=Tensor[(12, 3, 7), float32] */;
  erf(%951) /* ty=Tensor[(12, 3, 7), float32] */
}

def @func_5474(%var_5473: Tensor[(4, 13, 7), uint32]) -> (Tensor[(4, 13, 7), bool],) {
  %955 = fn (%var_5450: Tensor[(4, 13, 7), uint32]) -> (Tensor[(4, 13, 7), bool],) {
    %952 = cast(meta[relay.Constant][25] /* ty=uint32 */, dtype="bool") /* ty=bool */;
    %953 = cast(%var_5450, dtype="bool") /* ty=Tensor[(4, 13, 7), bool] */;
    %954 = greater_equal(%952, %953) /* ty=Tensor[(4, 13, 7), bool] */;
    (%954,)
  };
  %955(%var_5473) /* ty=(Tensor[(4, 13, 7), bool],) */
}

def @func_13573() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) {
  %956 = @func_9232() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(64), float32]) */;
  %957 = @func_9571() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool]) */;
  %958 = %956.0;
  %959 = @func_12499() /* ty=Tensor[(4, 14, 6), float64] */;
  %960 = %957.0;
  (%958, %959, %960)
}

def @func_468() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %965 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
    %961 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %962 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %963 = %961.0;
    %964 = %962.0;
    (%963, %964)
  };
  %965() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_8257() -> (Tensor[(4, 14, 6), float32],) {
  %966 = @func_6992() /* ty=Tensor[(4, 14, 6), float32] */;
  (%966,)
}

def @func_11644() -> Tensor[(5, 7, 11), float64] {
  @func_11642() /* ty=Tensor[(5, 7, 11), float64] */
}

def @func_11587() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  @func_11585() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_14684(%var_14667: int64) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 5, 6), float64], Tensor[(120), float64], Tensor[(4, 14, 6), float32], int64, Tensor[(4, 2), int64], Tensor[(4, 14, 6), float64]) {
  %967 = @func_11009() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %968 = cast(meta[relay.Constant][26] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %969 = reshape(%968, newshape=[4, 5, 6]) /* ty=Tensor[(4, 5, 6), float64] */;
  %970 = cast(%var_14667, dtype="int64") /* ty=int64 */;
  %971 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 2), int64] */, dtype="int64") /* ty=Tensor[(4, 2), int64] */;
  %972 = reshape(%970, newshape=[]) /* ty=int64 */;
  %973 = reshape(%971, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), int64] */;
  %974 = @func_2831(%972, %973) /* ty=(Tensor[(1, 4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(840), float64]) */;
  %975 = cast(%var_14667, dtype="int64") /* ty=int64 */;
  %976 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 2), int64] */, dtype="int64") /* ty=Tensor[(4, 2), int64] */;
  %977 = reshape(%975, newshape=[]) /* ty=int64 */;
  %978 = reshape(%976, newshape=[8]) /* ty=Tensor[(8), int64] */;
  %979 = @func_2953(%977, %978) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], int64, Tensor[(8), int64]) */;
  %980 = %967.0;
  %981 = @func_4706(%969) /* ty=Tensor[(4, 5, 6), float64] */;
  %982 = %974.1;
  %983 = %979.0;
  (%980, %981, meta[relay.Constant][26] /* ty=Tensor[(120), float64] */, %982, %var_14667, meta[relay.Constant][27] /* ty=Tensor[(4, 2), int64] */, %983)
}

def @func_15183() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %984 = @func_6400() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %985 = %984.0;
  %986 = @func_13634() /* ty=Tensor[(4, 14, 6), float32] */;
  (%985, %986)
}

def @func_4599() -> (Tensor[(14, 4, 15), float64],) {
  %987 = @func_3655() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
  %988 = %987.1;
  (%988,)
}

def @func_1723(%var_1722: Tensor[(4, 14, 6), float64]) -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool]) {
  %1001 = fn (%var_1691: Tensor[(4, 14, 6), float64]) -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool]) {
    %989 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
    %990 = %989.0;
    %991 = cast(%var_1691, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
    %992 = shape_of(%990, dtype="int32") /* ty=Tensor[(3), int32] */;
    %993 = cast(%990, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
    %994 = dyn.reshape(%991, %992, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %995 = cast(%990, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
    %996 = shape_of(%var_1691, dtype="int32") /* ty=Tensor[(3), int32] */;
    %997 = cast(%var_1691, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
    %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %999 = multiply(%993, %994) /* ty=Tensor[(4, 14, 6), float64] */;
    %1000 = logical_or(%997, %998) /* ty=Tensor[(4, 14, 6), bool] */;
    (%999, %1000)
  };
  %1001(%var_1722) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool]) */
}

def @func_3162(%var_3161: Tensor[(4, 14, 6), float32]) -> Tensor[(4, 14, 6), bool] {
  %1008 = fn (%var_3140: Tensor[(4, 14, 6), float32]) -> Tensor[(4, 14, 6), bool] {
    %1002 = @func_467() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %1003 = %1002.0;
    %1004 = cast(%var_3140, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
    %1005 = shape_of(%1003, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1006 = cast(%1003, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
    %1007 = dyn.reshape(%1004, %1005, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%1006, %1007) /* ty=Tensor[(4, 14, 6), bool] */
  };
  %1008(%var_3161) /* ty=Tensor[(4, 14, 6), bool] */
}

def @func_5830() -> (Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(1170), float64], Tensor[(64), float32]) {
  %1017 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(1170), float64], Tensor[(64), float32]) {
    %1009 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
    %1010 = cast(meta[relay.Constant][28] /* ty=Tensor[(1170), float64] */, dtype="float64") /* ty=Tensor[(1170), float64] */;
    %1011 = cast(meta[relay.Constant][29] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %1012 = reshape(%1010, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), float64] */;
    %1013 = reshape(%1011, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %1014 = @func_5295(%1012, %1013) /* ty=(Tensor[(15, 13, 6), float64], Tensor[(15, 13, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(300), bool], Tensor[(64), float32]) */;
    %1015 = %1009.0;
    %1016 = %1014.5;
    (%1015, %1016, meta[relay.Constant][28] /* ty=Tensor[(1170), float64] */, meta[relay.Constant][29] /* ty=Tensor[(64), float32] */)
  };
  %1017() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(1170), float64], Tensor[(64), float32]) */
}

def @func_4418() -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), bool]) {
  %1025 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), bool]) {
    %1018 = @func_4385() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %1019 = @func_2329() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
    %1020 = %1019.2;
    %1021 = cast(%1020, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
    %1022 = reshape(%1021, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float64] */;
    %1023 = %1018.0;
    %1024 = @func_2576(%1022) /* ty=Tensor[(14, 4, 15), bool] */;
    (%1023, %1020, %1024)
  };
  %1025() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), bool]) */
}

def @func_10176(%var_10174: int64) -> (Tensor[(6, 12, 16), uint8], Tensor[(8, 1), bool], int64) {
  @func_10173(%var_10174) /* ty=(Tensor[(6, 12, 16), uint8], Tensor[(8, 1), bool], int64) */
}

def @func_3926() -> Tensor[(14, 4, 15), float64] {
  %1026 = fn () -> Tensor[(14, 4, 15), float64] {
    @func_2402() /* ty=Tensor[(14, 4, 15), float64] */
  };
  %1026() /* ty=Tensor[(14, 4, 15), float64] */
}

def @func_7497(%var_7496: Tensor[(8, 2, 2), float32]) -> (Tensor[(8, 2, 2), float32], Tensor[(1, 4, 2), int64], int64, Tensor[(2, 4), int64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %1039 = fn (%var_7459: Tensor[(8, 2, 2), float32]) -> (Tensor[(8, 2, 2), float32], Tensor[(1, 4, 2), int64], int64, Tensor[(2, 4), int64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
    %1027 = cast(%var_7459, dtype="float32") /* ty=Tensor[(8, 2, 2), float32] */;
    %1028 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %1029 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 4), int64] */, dtype="int64") /* ty=Tensor[(2, 4), int64] */;
    %1030 = reshape(%1028, newshape=[]) /* ty=int64 */;
    %1031 = reshape(%1029, newshape=[1, 8]) /* ty=Tensor[(1, 8), int64] */;
    %1032 = @func_4668(%1030, %1031) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(1, 4, 2), int64], int64, Tensor[(1, 8), int64]) */;
    %1033 = @func_3655() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */;
    %1034 = @func_5540() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %1035 = log(%1027) /* ty=Tensor[(8, 2, 2), float32] */;
    %1036 = %1032.1;
    %1037 = %1033.0;
    %1038 = %1034.4;
    (%1035, %1036, 6 /* ty=int64 */, meta[relay.Constant][30] /* ty=Tensor[(2, 4), int64] */, %1037, %1038)
  };
  %1039(%var_7496) /* ty=(Tensor[(8, 2, 2), float32], Tensor[(1, 4, 2), int64], int64, Tensor[(2, 4), int64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_8307() -> (Tensor[(4, 14, 6), float32],) {
  %1041 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %1040 = @func_2193() /* ty=Tensor[(4, 14, 6), float32] */;
    (%1040,)
  };
  %1041() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_2242(%var_2241: Tensor[(4, 14, 6), float32]) -> Tensor[(4, 14, 6), float32] {
  %1048 = fn (%var_2235: Tensor[(4, 14, 6), float32]) -> Tensor[(4, 14, 6), float32] {
    %1042 = @func_1985() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %1043 = %1042.0;
    %1044 = cast(%var_2235, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
    %1045 = shape_of(%1043, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1046 = cast(%1043, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
    %1047 = dyn.reshape(%1044, %1045, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%1046, %1047) /* ty=Tensor[(4, 14, 6), float32] */
  };
  %1048(%var_2241) /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_2768() -> (Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) {
  %1052 = fn () -> (Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) {
    %1049 = @func_2647() /* ty=(Tensor[(4, 14, 6), float64],) */;
    %1050 = %1049.0;
    %1051 = @func_2402() /* ty=Tensor[(14, 4, 15), float64] */;
    (%1050, %1051)
  };
  %1052() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) */
}

def @func_2956(%var_2954: int64, %var_2955: Tensor[(8), int64]) -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], int64, Tensor[(8), int64]) {
  %1062 = fn (%var_2950: int64, %var_2951: Tensor[(8), int64]) -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], int64, Tensor[(8), int64]) {
    %1053 = @func_978() /* ty=Tensor[(4, 14, 6), float32] */;
    %1054 = cast(%1053, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
    %1055 = cast(%var_2950, dtype="int64") /* ty=int64 */;
    %1056 = cast(%var_2951, dtype="int64") /* ty=Tensor[(8), int64] */;
    %1057 = reshape(%1055, newshape=[]) /* ty=int64 */;
    %1058 = reshape(%1056, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), int64] */;
    %1059 = @func_2831(%1057, %1058) /* ty=(Tensor[(1, 4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(840), float64]) */;
    %1060 = exp(%1054) /* ty=Tensor[(4, 14, 6), float64] */;
    %1061 = %1059.1;
    (%1060, %1061, %var_2950, %var_2951)
  };
  %1062(%var_2954, %var_2955) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], int64, Tensor[(8), int64]) */
}

def @func_11655() -> Tensor[(4, 14, 6), float32] {
  %1063 = fn () -> Tensor[(4, 14, 6), float32] {
    @func_2517() /* ty=Tensor[(4, 14, 6), float32] */
  };
  %1063() /* ty=Tensor[(4, 14, 6), float32] */
}

def @main(%var_16139: Tensor[(300), bool], %var_16140: Tensor[(32, 2), float32]) -> (Tensor[(4, 14, 6), float64], Tensor[(64), float32], Tensor[(300), bool], Tensor[(32, 2), float32], Tensor[(14, 4, 15), float64]) {
  %1064 = @func_9573() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool]) */;
  %1065 = cast(%var_16139, dtype="bool") /* ty=Tensor[(300), bool] */;
  %1066 = cast(%var_16139, dtype="bool") /* ty=Tensor[(300), bool] */;
  %1067 = cast(%var_16140, dtype="float32") /* ty=Tensor[(32, 2), float32] */;
  %1068 = reshape(%1065, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), bool] */;
  %1069 = reshape(%1066, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), bool] */;
  %1070 = reshape(%1067, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %1071 = @func_3047(%1068, %1069, %1070) /* ty=(Tensor[(5, 5, 12), bool], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %1072 = @func_14137() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
  %1073 = %1072.0;
  %1074 = cast(%1073, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
  %1075 = %1064.0;
  %1076 = %1071.3;
  %1077 = sin(%1074) /* ty=Tensor[(14, 4, 15), float64] */;
  (%1075, %1076, %var_16139, %var_16140, %1077)
}

def @func_876() -> Tensor[(4, 14, 6), float64] {
  %1078 = @func_814() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %1078.0
}

def @func_9586() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64]) {
  %1082 = fn () -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64]) {
    %1079 = @func_2647() /* ty=(Tensor[(4, 14, 6), float64],) */;
    %1080 = @func_6042() /* ty=Tensor[(14, 4, 15), float64] */;
    %1081 = %1079.0;
    (%1080, %1081)
  };
  %1082() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64]) */
}

def @func_15859() -> (Tensor[(4, 14, 6), float32],) {
  %1083 = @func_12428() /* ty=Tensor[(4, 14, 6), float32] */;
  (%1083,)
}

def @func_6648() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64]) {
  %1084 = @func_3465() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %1085 = %1084.0;
  %1086 = @func_876() /* ty=Tensor[(4, 14, 6), float64] */;
  (%1085, %1086)
}

def @func_10371(%var_10326: Tensor[(2, 2, 12), float32], %var_10335: Tensor[(840), float64], %var_10357: Tensor[(64), float32]) -> (Tensor[(2, 2, 12), bool], Tensor[(4, 14, 6), float32], Tensor[(840), float64], Tensor[(14, 4, 15), float64], Tensor[(12, 16, 12), float64], Tensor[(192, 12), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float64]) {
  %1087 = cast(%var_10326, dtype="bool") /* ty=Tensor[(2, 2, 12), bool] */;
  %1088 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(2, 2, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1089 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 2, 12), float32] */, dtype="bool") /* ty=Tensor[(2, 2, 12), bool] */;
  %1090 = dyn.reshape(%1087, %1088, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1091 = cast(%var_10335, dtype="float64") /* ty=Tensor[(840), float64] */;
  %1092 = reshape(%1091, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float64] */;
  %1093 = @func_1236(%1092) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
  %1094 = @func_10144() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */;
  %1095 = cast(meta[relay.Constant][32] /* ty=Tensor[(192, 12), float64] */, dtype="float64") /* ty=Tensor[(192, 12), float64] */;
  %1096 = reshape(%1095, newshape=[12, 16, 12]) /* ty=Tensor[(12, 16, 12), float64] */;
  %1097 = cast(%var_10357, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1098 = reshape(%1097, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float32] */;
  %1099 = not_equal(%1089, %1090) /* ty=Tensor[(2, 2, 12), bool] */;
  %1100 = %1093.4;
  %1101 = %1094.1;
  %1102 = @func_3403(%1096) /* ty=Tensor[(12, 16, 12), float64] */;
  %1103 = @func_2128(%1098) /* ty=Tensor[(4, 4, 4), float32] */;
  %1104 = @func_4510() /* ty=Tensor[(4, 14, 6), float64] */;
  (%1099, %1100, %var_10335, %1101, %1102, meta[relay.Constant][32] /* ty=Tensor[(192, 12), float64] */, %1103, %var_10357, %1104)
}

def @func_5231() -> (Tensor[(4, 14, 6), float32], Tensor[(7, 8, 2), float64]) {
  %1111 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(7, 8, 2), float64]) {
    %1105 = @func_4962() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %1106 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(7, 8, 2), float64] */;
    %1107 = sin(%1106) /* ty=Tensor[(7, 8, 2), float64] */;
    %1108 = cast(%1107, dtype="float64") /* ty=Tensor[(7, 8, 2), float64] */;
    %1109 = %1105.0;
    %1110 = tan(%1108) /* ty=Tensor[(7, 8, 2), float64] */;
    (%1109, %1110)
  };
  %1111() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(7, 8, 2), float64]) */
}

def @func_9274() -> (Tensor[(4, 14, 6), float64],) {
  %1112 = @func_814() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %1113 = %1112.1;
  (%1113,)
}

def @func_10284() -> (Tensor[(14, 4, 15), bool], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
  %1127 = fn () -> (Tensor[(14, 4, 15), bool], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) {
    %1114 = @func_9466() /* ty=(Tensor[(14, 4, 15), float64],) */;
    %1115 = %1114.0;
    %1116 = cast(%1115, dtype="float32") /* ty=Tensor[(14, 4, 15), float32] */;
    %1117 = atan(%1116) /* ty=Tensor[(14, 4, 15), float32] */;
    %1118 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 4, 15), float32] */, dtype="bool") /* ty=Tensor[(14, 4, 15), bool] */;
    %1119 = shape_of(%1117, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1120 = cast(%1117, dtype="bool") /* ty=Tensor[(14, 4, 15), bool] */;
    %1121 = dyn.reshape(%1118, %1119, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1122 = @func_9585() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64]) */;
    %1123 = @func_4844() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %1124 = less_equal(%1120, %1121) /* ty=Tensor[(14, 4, 15), bool] */;
    %1125 = %1122.0;
    %1126 = %1123.2;
    (%1124, %1125, %1126)
  };
  %1127() /* ty=(Tensor[(14, 4, 15), bool], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */
}

def @func_12483() -> Tensor[(4, 5, 1), float64] {
  %1128 = @func_2415() /* ty=(Tensor[(4, 5, 1), float64],) */;
  %1128.0
}

def @func_5298(%var_5296: Tensor[(15, 13, 6), float64], %var_5297: Tensor[(64), float32]) -> (Tensor[(15, 13, 6), float64], Tensor[(15, 13, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(300), bool], Tensor[(64), float32]) {
  %1145 = fn (%var_5240: Tensor[(15, 13, 6), float64], %var_5273: Tensor[(64), float32]) -> (Tensor[(15, 13, 6), float64], Tensor[(15, 13, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(300), bool], Tensor[(64), float32]) {
    %1129 = cast(%var_5240, dtype="float64") /* ty=Tensor[(15, 13, 6), float64] */;
    %1130 = cast(%var_5240, dtype="float32") /* ty=Tensor[(15, 13, 6), float32] */;
    %1131 = @func_2907() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(14, 4, 15), bool]) */;
    %1132 = @func_3070() /* ty=(Tensor[(4, 14, 6), float64],) */;
    %1133 = cast(meta[relay.Constant][35] /* ty=Tensor[(300), bool] */, dtype="bool") /* ty=Tensor[(300), bool] */;
    %1134 = cast(meta[relay.Constant][35] /* ty=Tensor[(300), bool] */, dtype="bool") /* ty=Tensor[(300), bool] */;
    %1135 = cast(%var_5273, dtype="float32") /* ty=Tensor[(64), float32] */;
    %1136 = reshape(%1133, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), bool] */;
    %1137 = reshape(%1134, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), bool] */;
    %1138 = reshape(%1135, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %1139 = @func_3043(%1136, %1137, %1138) /* ty=(Tensor[(5, 5, 12), bool], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %1140 = acos(%1129) /* ty=Tensor[(15, 13, 6), float64] */;
    %1141 = atanh(%1130) /* ty=Tensor[(15, 13, 6), float32] */;
    %1142 = %1131.0;
    %1143 = %1132.0;
    %1144 = %1139.2;
    (%1140, %1141, %1142, %1143, %1144, meta[relay.Constant][35] /* ty=Tensor[(300), bool] */, %var_5273)
  };
  %1145(%var_5296, %var_5297) /* ty=(Tensor[(15, 13, 6), float64], Tensor[(15, 13, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(300), bool], Tensor[(64), float32]) */
}

def @func_4220(%var_4218: uint8, %var_4219: Tensor[(9, 10, 15), uint8]) -> (Tensor[(9, 10, 15), bool], Tensor[(9, 10, 15), uint16], Tensor[(4, 14, 6), float64]) {
  %1154 = fn (%var_4185: uint8, %var_4186: Tensor[(9, 10, 15), uint8]) -> (Tensor[(9, 10, 15), bool], Tensor[(9, 10, 15), uint16], Tensor[(4, 14, 6), float64]) {
    %1146 = cast(%var_4185, dtype="bool") /* ty=bool */;
    %1147 = cast(%var_4186, dtype="bool") /* ty=Tensor[(9, 10, 15), bool] */;
    %1148 = cast(%var_4186, dtype="uint16") /* ty=Tensor[(9, 10, 15), uint16] */;
    %1149 = cast(%var_4185, dtype="uint16") /* ty=uint16 */;
    %1150 = @func_3070() /* ty=(Tensor[(4, 14, 6), float64],) */;
    %1151 = greater_equal(%1146, %1147) /* ty=Tensor[(9, 10, 15), bool] */;
    %1152 = minimum(%1148, %1149) /* ty=Tensor[(9, 10, 15), uint16] */;
    %1153 = %1150.0;
    (%1151, %1152, %1153)
  };
  %1154(%var_4218, %var_4219) /* ty=(Tensor[(9, 10, 15), bool], Tensor[(9, 10, 15), uint16], Tensor[(4, 14, 6), float64]) */
}

def @func_9468() -> (Tensor[(14, 4, 15), float64],) {
  @func_9466() /* ty=(Tensor[(14, 4, 15), float64],) */
}

def @func_4004(%var_3985: Tensor[(14, 4, 15), float64]) -> (Tensor[(14, 4, 15), uint64], Tensor[(4, 14, 6), float32]) {
  %1155 = @func_868() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %1156 = %1155.0;
  %1157 = cast(%var_3985, dtype="uint64") /* ty=Tensor[(14, 4, 15), uint64] */;
  %1158 = shape_of(%1156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1159 = cast(%1156, dtype="uint64") /* ty=Tensor[(14, 4, 15), uint64] */;
  %1160 = dyn.reshape(%1157, %1158, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1161 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
  %1162 = logical_xor(%1159, %1160) /* ty=Tensor[(14, 4, 15), uint64] */;
  %1163 = %1161.1;
  (%1162, %1163)
}

def @func_8595() -> Tensor[(6, 12, 16), uint8] {
  %1173 = fn () -> Tensor[(6, 12, 16), uint8] {
    %1164 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 12, 16), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 16), float32] */;
    %1165 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(6, 12, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1166 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 12, 16), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 16), float32] */;
    %1167 = dyn.reshape(%1164, %1165, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1168 = mod(%1166, %1167) /* ty=Tensor[(6, 12, 16), float32] */;
    %1169 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 12, 16), float32] */, dtype="uint8") /* ty=Tensor[(6, 12, 16), uint8] */;
    %1170 = shape_of(%1168, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1171 = cast(%1168, dtype="uint8") /* ty=Tensor[(6, 12, 16), uint8] */;
    %1172 = dyn.reshape(%1169, %1170, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    minimum(%1171, %1172) /* ty=Tensor[(6, 12, 16), uint8] */
  };
  %1173() /* ty=Tensor[(6, 12, 16), uint8] */
}

def @func_669() -> (Tensor[(15, 3, 2), float64],) {
  @func_667() /* ty=(Tensor[(15, 3, 2), float64],) */
}

def @func_12836() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), uint32]) {
  %1174 = @func_11051() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %1175 = @func_12642() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(280), float64]) */;
  %1176 = @func_4417() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), bool]) */;
  %1177 = %1176.2;
  %1178 = cast(%1177, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
  %1179 = reshape(%1178, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float64] */;
  %1180 = @func_2576(%1179) /* ty=Tensor[(14, 4, 15), bool] */;
  %1181 = cast(%1180, dtype="uint32") /* ty=Tensor[(14, 4, 15), uint32] */;
  %1182 = shape_of(%1177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1183 = cast(%1177, dtype="uint32") /* ty=Tensor[(14, 4, 15), uint32] */;
  %1184 = dyn.reshape(%1181, %1182, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1185 = %1174.0;
  %1186 = %1175.1;
  %1187 = bitwise_xor(%1183, %1184) /* ty=Tensor[(14, 4, 15), uint32] */;
  (%1185, %1186, %1187)
}

def @func_2438(%var_2430: uint64, %var_2431: Tensor[(4, 4, 7), uint64]) -> Tensor[(4, 4, 7), bool] {
  %1188 = cast(%var_2430, dtype="bool") /* ty=bool */;
  %1189 = cast(%var_2431, dtype="bool") /* ty=Tensor[(4, 4, 7), bool] */;
  greater_equal(%1188, %1189) /* ty=Tensor[(4, 4, 7), bool] */
}

def @func_10859() -> (Tensor[(4, 14, 6), float32],) {
  %1192 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %1190 = @func_10134() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 5, 6), float64], Tensor[(120), float64], Tensor[(64), float32], Tensor[(15, 3, 2), float64]) */;
    %1191 = %1190.0;
    (%1191,)
  };
  %1192() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_10042() -> (Tensor[(14, 4, 15), float64],) {
  @func_10040() /* ty=(Tensor[(14, 4, 15), float64],) */
}

def @func_9344() -> (Tensor[(15, 3, 2), float64], Tensor[(14, 4, 15), float64]) {
  %1193 = @func_5179() /* ty=(Tensor[(15, 3, 2), float64],) */;
  %1194 = %1193.0;
  %1195 = @func_4891() /* ty=Tensor[(14, 4, 15), float64] */;
  (%1194, %1195)
}

def @func_14072() -> Tensor[(4, 14, 6), float64] {
  %1197 = fn () -> Tensor[(4, 14, 6), float64] {
    %1196 = @func_6741() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
    %1196.4
  };
  %1197() /* ty=Tensor[(4, 14, 6), float64] */
}

def @func_9705(%var_9695: Tensor[(11, 9, 11), uint8], %var_9696: Tensor[(11, 9, 11), uint8]) -> (Tensor[(11, 9, 11), uint8], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
  %1198 = cast(%var_9696, dtype="uint8") /* ty=Tensor[(11, 9, 11), uint8] */;
  %1199 = shape_of(%var_9695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1200 = cast(%var_9695, dtype="uint8") /* ty=Tensor[(11, 9, 11), uint8] */;
  %1201 = dyn.reshape(%1198, %1199, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1202 = @func_4417() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), bool]) */;
  %1203 = bitwise_or(%1200, %1201) /* ty=Tensor[(11, 9, 11), uint8] */;
  %1204 = @func_2547() /* ty=Tensor[(4, 14, 6), float32] */;
  %1205 = %1202.1;
  (%1203, %1204, %1205)
}

def @func_12963() -> (Tensor[(4, 5, 1), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %1206 = @func_9766() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %1207 = @func_5540() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %1208 = @func_4844() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %1209 = @func_4151() /* ty=Tensor[(4, 5, 1), float64] */;
  %1210 = %1206.0;
  %1211 = %1207.3;
  %1212 = %1208.2;
  (%1209, %1210, %1211, %1212)
}

def @func_4138() -> (Tensor[(4, 14, 6), float32],) {
  %1215 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %1213 = @func_3317() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64]) */;
    %1214 = %1213.3;
    (%1214,)
  };
  %1215() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_7552() -> Tensor[(15, 3, 2), float32] {
  %1216 = @func_3433() /* ty=Tensor[(15, 3, 2), float64] */;
  %1217 = cast(%1216, dtype="float32") /* ty=Tensor[(15, 3, 2), float32] */;
  log(%1217) /* ty=Tensor[(15, 3, 2), float32] */
}

def @func_12216(%var_12215: Tensor[(252), float32]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(12, 3, 7), float32], Tensor[(252), float32]) {
  %1225 = fn (%var_12205: Tensor[(252), float32]) -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(12, 3, 7), float32], Tensor[(252), float32]) {
    %1218 = @func_5230() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(7, 8, 2), float64]) */;
    %1219 = @func_557() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %1220 = cast(%var_12205, dtype="float32") /* ty=Tensor[(252), float32] */;
    %1221 = reshape(%1220, newshape=[12, 3, 7]) /* ty=Tensor[(12, 3, 7), float32] */;
    %1222 = %1218.0;
    %1223 = %1219.0;
    %1224 = @func_7102(%1221) /* ty=Tensor[(12, 3, 7), float32] */;
    (%1222, %1223, %1224, %var_12205)
  };
  %1225(%var_12215) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(12, 3, 7), float32], Tensor[(252), float32]) */
}

def @func_9933(%var_9913: Tensor[(12, 14, 16), int16], %var_9914: Tensor[(12, 14, 16), int16]) -> (Tensor[(12, 14, 16), int16],) {
  %1226 = cast(%var_9914, dtype="int16") /* ty=Tensor[(12, 14, 16), int16] */;
  %1227 = shape_of(%var_9913, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1228 = cast(%var_9913, dtype="int16") /* ty=Tensor[(12, 14, 16), int16] */;
  %1229 = dyn.reshape(%1226, %1227, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1230 = add(%1228, %1229) /* ty=Tensor[(12, 14, 16), int16] */;
  (%1230,)
}

def @func_9683() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %1231 = @func_9274() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %1232 = %1231.0;
  %1233 = @func_978() /* ty=Tensor[(4, 14, 6), float32] */;
  (%1232, %1233)
}

def @func_12325() -> (Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) {
  %1234 = @func_5179() /* ty=(Tensor[(15, 3, 2), float64],) */;
  %1235 = %1234.0;
  %1236 = cast(%1235, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
  %1237 = @func_6752() /* ty=Tensor[(4, 14, 6), float64] */;
  %1238 = atanh(%1236) /* ty=Tensor[(15, 3, 2), float64] */;
  (%1237, %1238)
}

def @func_10324() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64]) {
  %1243 = fn () -> (Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64]) {
    %1239 = @func_10283() /* ty=(Tensor[(14, 4, 15), bool], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32]) */;
    %1240 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
    %1241 = %1239.1;
    %1242 = %1240.0;
    (%1241, %1242)
  };
  %1243() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64]) */
}

def @func_941() -> Tensor[(4, 14, 6), float32] {
  @func_939() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_11286() -> (Tensor[(4, 5, 1), float64], Tensor[(14, 4, 15), float64], Tensor[(12, 14, 16), int16], Tensor[(8, 336), int16], Tensor[(14, 4, 15), float64]) {
  %1257 = fn () -> (Tensor[(4, 5, 1), float64], Tensor[(14, 4, 15), float64], Tensor[(12, 14, 16), int16], Tensor[(8, 336), int16], Tensor[(14, 4, 15), float64]) {
    %1244 = @func_2415() /* ty=(Tensor[(4, 5, 1), float64],) */;
    %1245 = %1244.0;
    %1246 = cast(%1245, dtype="float64") /* ty=Tensor[(4, 5, 1), float64] */;
    %1247 = @func_4599() /* ty=(Tensor[(14, 4, 15), float64],) */;
    %1248 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 336), int16] */, dtype="int16") /* ty=Tensor[(8, 336), int16] */;
    %1249 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 336), int16] */, dtype="int16") /* ty=Tensor[(8, 336), int16] */;
    %1250 = reshape(%1248, newshape=[12, 14, 16]) /* ty=Tensor[(12, 14, 16), int16] */;
    %1251 = reshape(%1249, newshape=[12, 14, 16]) /* ty=Tensor[(12, 14, 16), int16] */;
    %1252 = @func_9933(%1250, %1251) /* ty=(Tensor[(12, 14, 16), int16],) */;
    %1253 = asin(%1246) /* ty=Tensor[(4, 5, 1), float64] */;
    %1254 = %1247.0;
    %1255 = %1252.0;
    %1256 = @func_2254() /* ty=Tensor[(14, 4, 15), float64] */;
    (%1253, %1254, %1255, meta[relay.Constant][38] /* ty=Tensor[(8, 336), int16] */, %1256)
  };
  %1257() /* ty=(Tensor[(4, 5, 1), float64], Tensor[(14, 4, 15), float64], Tensor[(12, 14, 16), int16], Tensor[(8, 336), int16], Tensor[(14, 4, 15), float64]) */
}

def @func_12063() -> Tensor[(4, 14, 6), float64] {
  @func_12061() /* ty=Tensor[(4, 14, 6), float64] */
}

def @func_10136() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 5, 6), float64], Tensor[(120), float64], Tensor[(64), float32], Tensor[(15, 3, 2), float64]) {
  @func_10134() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 5, 6), float64], Tensor[(120), float64], Tensor[(64), float32], Tensor[(15, 3, 2), float64]) */
}

def @func_7979(%var_7968: Tensor[(3, 16, 2), float64], %var_7969: Tensor[(3, 16, 2), float64]) -> (Tensor[(3, 16, 2), float64],) {
  %1258 = cast(%var_7969, dtype="float64") /* ty=Tensor[(3, 16, 2), float64] */;
  %1259 = shape_of(%var_7968, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1260 = cast(%var_7968, dtype="float64") /* ty=Tensor[(3, 16, 2), float64] */;
  %1261 = dyn.reshape(%1258, %1259, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1262 = floor_divide(%1260, %1261) /* ty=Tensor[(3, 16, 2), float64] */;
  (%1262,)
}

def @func_4635() -> Tensor[(4, 5, 1), float64] {
  %1263 = @func_3500() /* ty=(Tensor[(4, 5, 1), float64],) */;
  %1263.0
}

def @func_7250() -> Tensor[(14, 4, 15), float64] {
  %1264 = fn () -> Tensor[(14, 4, 15), float64] {
    @func_3856() /* ty=Tensor[(14, 4, 15), float64] */
  };
  %1264() /* ty=Tensor[(14, 4, 15), float64] */
}

def @func_6871() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) {
  %1269 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) {
    %1265 = @func_4066() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %1266 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
    %1267 = %1265.0;
    %1268 = %1266.0;
    (%1267, %1268)
  };
  %1269() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */
}

def @func_4386() -> (Tensor[(4, 14, 6), float32],) {
  %1272 = fn () -> (Tensor[(4, 14, 6), float32],) {
    %1270 = @func_995() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %1271 = %1270.1;
    (%1271,)
  };
  %1272() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_2146() -> (Tensor[(4, 14, 6), float64], Tensor[(14, 4, 15), float64]) {
  %1273 = @func_1339() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %1274 = @func_1795() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) */;
  %1275 = %1273.0;
  %1276 = %1274.0;
  (%1275, %1276)
}

def @func_2907() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(14, 4, 15), bool]) {
  %1277 = cast(meta[relay.Constant][39] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1278 = reshape(%1277, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float32] */;
  %1279 = @func_2254() /* ty=Tensor[(14, 4, 15), float64] */;
  %1280 = cast(%1279, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
  %1281 = reshape(%1280, newshape=[14, 4, 15]) /* ty=Tensor[(14, 4, 15), float64] */;
  %1282 = @func_2128(%1278) /* ty=Tensor[(4, 4, 4), float32] */;
  %1283 = @func_2576(%1281) /* ty=Tensor[(14, 4, 15), bool] */;
  (%1279, %1282, meta[relay.Constant][39] /* ty=Tensor[(64), float32] */, %1283)
}

def @func_4553() -> (Tensor[(13, 10, 8), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  @func_4551() /* ty=(Tensor[(13, 10, 8), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_1192() -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
  %1290 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) {
    %1284 = @func_995() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %1285 = @func_868() /* ty=(Tensor[(14, 4, 15), float64],) */;
    %1286 = %1285.0;
    %1287 = cast(%1286, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
    %1288 = %1284.1;
    %1289 = erf(%1287) /* ty=Tensor[(14, 4, 15), float64] */;
    (%1288, %1289)
  };
  %1290() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64]) */
}

def @func_7794() -> (Tensor[(4, 14, 6), float64],) {
  %1291 = @func_5037() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %1292 = %1291.0;
  (%1292,)
}

def @func_8851() -> Tensor[(4, 14, 6), float32] {
  %1294 = fn () -> Tensor[(4, 14, 6), float32] {
    %1293 = @func_5572() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
    %1293.2
  };
  %1294() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_4706(%var_4694: Tensor[(4, 5, 6), float64]) -> Tensor[(4, 5, 6), float64] {
  %1295 = @func_4151() /* ty=Tensor[(4, 5, 1), float64] */;
  %1296 = cast(%1295, dtype="uint32") /* ty=Tensor[(4, 5, 1), uint32] */;
  %1297 = cast(%var_4694, dtype="uint32") /* ty=Tensor[(4, 5, 6), uint32] */;
  %1298 = right_shift(%1296, %1297) /* ty=Tensor[(4, 5, 6), uint32] */;
  %1299 = cast(%1298, dtype="float64") /* ty=Tensor[(4, 5, 6), float64] */;
  exp(%1299) /* ty=Tensor[(4, 5, 6), float64] */
}

def @func_13066() -> Tensor[(4, 14, 6), float32] {
  @func_2547() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_15822() -> Tensor[(4, 14, 6), float32] {
  @func_15820() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_13448() -> (Tensor[(120), float64], Tensor[(4, 14, 6), float32], Tensor[(300), bool]) {
  %1300 = @func_10134() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 5, 6), float64], Tensor[(120), float64], Tensor[(64), float32], Tensor[(15, 3, 2), float64]) */;
  %1301 = @func_995() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %1302 = @func_5829() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(300), bool], Tensor[(1170), float64], Tensor[(64), float32]) */;
  %1303 = %1300.2;
  %1304 = %1301.0;
  %1305 = %1302.1;
  (%1303, %1304, %1305)
}

def @func_4152() -> Tensor[(4, 5, 1), float64] {
  %1307 = fn () -> Tensor[(4, 5, 1), float64] {
    %1306 = @func_3500() /* ty=(Tensor[(4, 5, 1), float64],) */;
    %1306.0
  };
  %1307() /* ty=Tensor[(4, 5, 1), float64] */
}

def @func_5890(%var_5883: Tensor[(10, 30), bool]) -> (Tensor[(4, 14, 6), float64], Tensor[(64), float32], Tensor[(10, 30), bool], Tensor[(2, 32), float32]) {
  %1308 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %1309 = cast(%var_5883, dtype="bool") /* ty=Tensor[(10, 30), bool] */;
  %1310 = cast(%var_5883, dtype="bool") /* ty=Tensor[(10, 30), bool] */;
  %1311 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 32), float32] */, dtype="float32") /* ty=Tensor[(2, 32), float32] */;
  %1312 = reshape(%1309, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), bool] */;
  %1313 = reshape(%1310, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), bool] */;
  %1314 = reshape(%1311, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %1315 = @func_3043(%1312, %1313, %1314) /* ty=(Tensor[(5, 5, 12), bool], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %1316 = %1308.1;
  %1317 = %1315.3;
  (%1316, %1317, %var_5883, meta[relay.Constant][40] /* ty=Tensor[(2, 32), float32] */)
}

def @func_1599() -> (Tensor[(4, 14, 6), float32],) {
  @func_1597() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_12500() -> Tensor[(4, 14, 6), float64] {
  %1318 = fn () -> Tensor[(4, 14, 6), float64] {
    @func_5696() /* ty=Tensor[(4, 14, 6), float64] */
  };
  %1318() /* ty=Tensor[(4, 14, 6), float64] */
}

def @func_14439() -> (Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), bool], Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64], Tensor[(15, 3, 2), float32]) {
  %1332 = fn () -> (Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), bool], Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64], Tensor[(15, 3, 2), float32]) {
    %1319 = @func_5572() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
    %1320 = @func_7407() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), bool]) */;
    %1321 = @func_1795() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) */;
    %1322 = @func_9032() /* ty=Tensor[(15, 3, 2), float64] */;
    %1323 = cast(%1322, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
    %1324 = cast(%1322, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
    %1325 = sinh(%1324) /* ty=Tensor[(15, 3, 2), float64] */;
    %1326 = cast(%1325, dtype="float32") /* ty=Tensor[(15, 3, 2), float32] */;
    %1327 = %1319.0;
    %1328 = %1320.3;
    %1329 = %1321.0;
    %1330 = acos(%1323) /* ty=Tensor[(15, 3, 2), float64] */;
    %1331 = exp(%1326) /* ty=Tensor[(15, 3, 2), float32] */;
    (%1327, %1328, %1329, %1330, %1331)
  };
  %1332() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), bool], Tensor[(14, 4, 15), float64], Tensor[(15, 3, 2), float64], Tensor[(15, 3, 2), float32]) */
}

def @func_14953() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 5, 1), float64], Tensor[(14, 4, 15), float32]) {
  @func_14951() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 5, 1), float64], Tensor[(14, 4, 15), float32]) */
}

def @func_1045() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %1333 = @func_814() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float64]) */;
  %1334 = @func_914() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
  %1335 = %1333.1;
  %1336 = %1334.0;
  (%1335, %1336)
}

def @func_5179() -> (Tensor[(15, 3, 2), float64],) {
  %1337 = @func_1795() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64]) */;
  %1338 = %1337.3;
  %1339 = cast(%1338, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
  %1340 = tan(%1339) /* ty=Tensor[(15, 3, 2), float64] */;
  (%1340,)
}

def @func_13340(%var_13339: Tensor[(8), int64]) -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], int64, Tensor[(8), int64]) {
  %1350 = fn (%var_13331: Tensor[(8), int64]) -> (Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], int64, Tensor[(8), int64]) {
    %1341 = @func_3465() /* ty=(Tensor[(14, 4, 15), float64],) */;
    %1342 = cast(-10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %1343 = cast(%var_13331, dtype="int64") /* ty=Tensor[(8), int64] */;
    %1344 = reshape(%1342, newshape=[]) /* ty=int64 */;
    %1345 = reshape(%1343, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), int64] */;
    %1346 = @func_2831(%1344, %1345) /* ty=(Tensor[(1, 4, 2), int64], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), bool], Tensor[(840), float64]) */;
    %1347 = @func_6283() /* ty=Tensor[(4, 14, 6), float32] */;
    %1348 = %1341.0;
    %1349 = %1346.1;
    (%1347, %1348, %1349, -10 /* ty=int64 */, %var_13331)
  };
  %1350(%var_13339) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(4, 14, 6), float32], int64, Tensor[(8), int64]) */
}

def @func_9233() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(64), float32]) {
  %1361 = fn () -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(64), float32]) {
    %1351 = @func_2647() /* ty=(Tensor[(4, 14, 6), float64],) */;
    %1352 = %1351.0;
    %1353 = cast(%1352, dtype="float64") /* ty=Tensor[(4, 14, 6), float64] */;
    %1354 = reshape(%1353, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), float64] */;
    %1355 = @func_1721(%1354) /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool]) */;
    %1356 = cast(meta[relay.Constant][41] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %1357 = reshape(%1356, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %1358 = @func_4290(%1357) /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 4, 4), float32], Tensor[(64), float32]) */;
    %1359 = %1355.1;
    %1360 = %1358.0;
    (%1352, %1359, %1360, meta[relay.Constant][41] /* ty=Tensor[(64), float32] */)
  };
  %1361() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(64), float32]) */
}

def @func_869() -> (Tensor[(14, 4, 15), float64],) {
  %1364 = fn () -> (Tensor[(14, 4, 15), float64],) {
    %1362 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 4, 15), float64] */, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
    %1363 = asinh(%1362) /* ty=Tensor[(14, 4, 15), float64] */;
    (%1363,)
  };
  %1364() /* ty=(Tensor[(14, 4, 15), float64],) */
}

def @func_5622() -> (Tensor[(4, 14, 6), float64],) {
  @func_5620() /* ty=(Tensor[(4, 14, 6), float64],) */
}

def @func_14522() -> (Tensor[(14, 4, 15), float64], Tensor[(4, 5, ?), bool]) {
  %1380 = fn () -> (Tensor[(14, 4, 15), float64], Tensor[(4, 5, ?), bool]) {
    %1365 = @func_9738() /* ty=(Tensor[(4, 5, 1), float64],) */;
    %1366 = %1365.0;
    %1367 = cast(%1366, dtype="float64") /* ty=Tensor[(4, 5, 1), float64] */;
    %1368 = atanh(%1367) /* ty=Tensor[(4, 5, 1), float64] */;
    %1369 = cast(%1366, dtype="int8") /* ty=Tensor[(4, 5, 1), int8] */;
    %1370 = shape_of(%1368, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1371 = cast(%1368, dtype="int8") /* ty=Tensor[(4, 5, 1), int8] */;
    %1372 = dyn.reshape(%1369, %1370, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %1373 = bitwise_or(%1371, %1372) /* ty=Tensor[(4, 5, ?), int8] */;
    %1374 = cast(%1368, dtype="bool") /* ty=Tensor[(4, 5, 1), bool] */;
    %1375 = shape_of(%1373, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1376 = cast(%1373, dtype="bool") /* ty=Tensor[(4, 5, ?), bool] */;
    %1377 = dyn.reshape(%1374, %1375, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1378 = @func_7249() /* ty=Tensor[(14, 4, 15), float64] */;
    %1379 = greater(%1376, %1377) /* ty=Tensor[(4, 5, ?), bool] */;
    (%1378, %1379)
  };
  %1380() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(4, 5, ?), bool]) */
}

def @func_9646() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %1384 = fn () -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
    %1381 = @func_467() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %1382 = @func_8317() /* ty=Tensor[(4, 14, 6), float32] */;
    %1383 = %1381.0;
    (%1382, %1383)
  };
  %1384() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_4551() -> (Tensor[(13, 10, 8), float64], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %1385 = cast(meta[relay.Constant][43] /* ty=Tensor[(13, 10, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 10, 8), float64] */;
  %1386 = @func_1846() /* ty=(Tensor[(4, 14, 6), float32],) */;
  %1387 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
  %1388 = atanh(%1385) /* ty=Tensor[(13, 10, 8), float64] */;
  %1389 = %1386.0;
  %1390 = %1387.0;
  (%1388, %1389, %1390)
}

def @func_3319() -> (Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64]) {
  @func_3317() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), bool], Tensor[(4, 14, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(14, 4, 15), float64]) */
}

def @func_13022() -> Tensor[(14, 4, 15), float64] {
  %1391 = fn () -> Tensor[(14, 4, 15), float64] {
    @func_7249() /* ty=Tensor[(14, 4, 15), float64] */
  };
  %1391() /* ty=Tensor[(14, 4, 15), float64] */
}

def @func_15861() -> (Tensor[(4, 14, 6), float32],) {
  @func_15859() /* ty=(Tensor[(4, 14, 6), float32],) */
}

def @func_10948() -> Tensor[(4, 14, 6), float32] {
  %1392 = @func_749() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
  %1392.0
}

def @func_3047(%var_3044: Tensor[(5, 5, 12), bool], %var_3045: Tensor[(5, 5, 12), bool], %var_3046: Tensor[(64), float32]) -> (Tensor[(5, 5, 12), bool], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
  %1407 = fn (%var_2988: Tensor[(5, 5, 12), bool], %var_2989: Tensor[(5, 5, 12), bool], %var_3016: Tensor[(64), float32]) -> (Tensor[(5, 5, 12), bool], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) {
    %1393 = cast(%var_2989, dtype="bool") /* ty=Tensor[(5, 5, 12), bool] */;
    %1394 = shape_of(%var_2988, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1395 = cast(%var_2988, dtype="bool") /* ty=Tensor[(5, 5, 12), bool] */;
    %1396 = dyn.reshape(%1393, %1394, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1397 = @func_1045() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */;
    %1398 = cast(%var_3016, dtype="float32") /* ty=Tensor[(64), float32] */;
    %1399 = reshape(%1398, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float32] */;
    %1400 = @func_420() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %1401 = @func_1846() /* ty=(Tensor[(4, 14, 6), float32],) */;
    %1402 = logical_and(%1395, %1396) /* ty=Tensor[(5, 5, 12), bool] */;
    %1403 = %1397.0;
    %1404 = @func_2128(%1399) /* ty=Tensor[(4, 4, 4), float32] */;
    %1405 = %1400.0;
    %1406 = %1401.0;
    (%1402, %1403, %1404, %var_3016, %1405, %1406)
  };
  %1407(%var_3044, %var_3045, %var_3046) /* ty=(Tensor[(5, 5, 12), bool], Tensor[(4, 14, 6), float64], Tensor[(4, 4, 4), float32], Tensor[(64), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */
}

def @func_11782() -> Tensor[(15, 3, 2), float64] {
  %1409 = fn () -> Tensor[(15, 3, 2), float64] {
    %1408 = @func_1396() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(15, 3, 2), float64]) */;
    %1408.1
  };
  %1409() /* ty=Tensor[(15, 3, 2), float64] */
}

def @func_9033() -> Tensor[(15, 3, 2), float64] {
  %1411 = fn () -> Tensor[(15, 3, 2), float64] {
    %1410 = @func_5572() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(15, 3, 2), float64], Tensor[(4, 14, 6), float32]) */;
    %1410.1
  };
  %1411() /* ty=Tensor[(15, 3, 2), float64] */
}

def @func_9660(%var_9647: Tensor[(14, 4, 5), float64]) -> (Tensor[(14, 4, 5), float64], Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %1412 = cast(%var_9647, dtype="float64") /* ty=Tensor[(14, 4, 5), float64] */;
  %1413 = @func_9274() /* ty=(Tensor[(4, 14, 6), float64],) */;
  %1414 = %1413.0;
  %1415 = cast(%1414, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
  %1416 = reshape(%1415, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), float32] */;
  %1417 = rsqrt(%1412) /* ty=Tensor[(14, 4, 5), float64] */;
  %1418 = @func_2240(%1416) /* ty=Tensor[(4, 14, 6), float32] */;
  (%1417, %1414, %1418)
}

def @func_16032() -> Tensor[(4, 14, 6), float32] {
  %1420 = fn () -> Tensor[(4, 14, 6), float32] {
    %1419 = @func_15660() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %1419.2
  };
  %1420() /* ty=Tensor[(4, 14, 6), float32] */
}

def @func_658() -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
  %1425 = fn () -> (Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) {
    %1421 = @func_520() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float64]) */;
    %1422 = @func_557() /* ty=(Tensor[(4, 14, 6), float32], Tensor[(4, 14, 6), float32]) */;
    %1423 = %1421.1;
    %1424 = %1422.1;
    (%1423, %1424)
  };
  %1425() /* ty=(Tensor[(4, 14, 6), float64], Tensor[(4, 14, 6), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen696/build/output.py", line 5295, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:54:28] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

