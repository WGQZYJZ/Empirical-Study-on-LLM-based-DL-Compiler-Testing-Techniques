==========mod==========
#[version = "0.0.5"]
def @func_1511() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
  %0 = @func_1255() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %1 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %2 = @func_1326() /* ty=Tensor[(2, 8, 12), float32] */;
  %3 = %0.0;
  %4 = %1.2;
  (%2, %3, %4)
}

def @func_3270(%var_3256: uint8, %var_3257: Tensor[(5, 3, 1), uint8], %var_3265: Tensor[(192), float32]) -> (Tensor[(5, 3, 1), uint8], Tensor[(2, 8, 12), float32], Tensor[(192), float32]) {
  %5 = cast(%var_3256, dtype="uint8") /* ty=uint8 */;
  %6 = cast(%var_3257, dtype="uint8") /* ty=Tensor[(5, 3, 1), uint8] */;
  %7 = cast(%var_3265, dtype="float32") /* ty=Tensor[(192), float32] */;
  %8 = reshape(%7, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float32] */;
  %9 = @func_666(%8) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
  %10 = logical_xor(%5, %6) /* ty=Tensor[(5, 3, 1), uint8] */;
  %11 = %9.4;
  (%10, %11, %var_3265)
}

def @func_5611() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) {
  %12 = @func_4504() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %13 = %12.0;
  %14 = @func_2241() /* ty=Tensor[(2, 8, 12), float64] */;
  (%13, %14)
}

def @func_7293() -> (Tensor[(7, 8, 11), bool],) {
  %15 = @func_3590() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(7, 8, 11), bool], Tensor[(616, 1), float32]) */;
  %16 = %15.2;
  (%16,)
}

def @func_845(%var_812: Tensor[(2, 8, 12), float64], %var_829: Tensor[(72), float64]) -> (Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32]) {
  %17 = @func_760() /* ty=Tensor[(2, 8, 12), float64] */;
  %18 = cast(%var_812, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %19 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%17, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %22 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %23 = cast(%var_829, dtype="float64") /* ty=Tensor[(72), float64] */;
  %24 = reshape(%23, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %25 = @func_690(%24) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
  %26 = logical_or(%20, %21) /* ty=Tensor[(2, 8, 12), bool] */;
  %27 = cast(%26, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %28 = reshape(%27, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
  %29 = cast(%var_812, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %30 = reshape(%29, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
  %31 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %32 = %22.0;
  %33 = %25.0;
  %34 = @func_542(%28) /* ty=Tensor[(2, 8, 12), uint64] */;
  %35 = @func_542(%30) /* ty=Tensor[(2, 8, 12), uint64] */;
  %36 = %31.3;
  (%26, %32, %33, %var_829, %34, %35, %36)
}

def @func_2591() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) {
  %37 = @func_2041() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(72), float64]) */;
  %38 = @func_1768() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %39 = %38.0;
  %40 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 8, 12), float32] */, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %41 = shape_of(%39, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%39, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %44 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 8, 12), float32] */, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %45 = %37.2;
  %46 = cast(%45, dtype="float64") /* ty=Tensor[(72), float64] */;
  %47 = reshape(%44, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
  %48 = reshape(%46, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %49 = @func_845(%47, %48) /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32]) */;
  %50 = floor_divide(%42, %43) /* ty=Tensor[(2, 8, 12), float32] */;
  %51 = %49.2;
  (%45, %50, %51)
}

def @func_10878() -> (Tensor[(2, 8, 12), float64], Tensor[(6, 6, 3), bool]) {
  %52 = @func_10018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %53 = %52.0;
  %54 = @func_5943() /* ty=Tensor[(6, 6, 3), bool] */;
  (%53, %54)
}

def @func_2478() -> (Tensor[(72), float64],) {
  %55 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
  %56 = %55.2;
  (%56,)
}

def @func_9956() -> Tensor[(2, 8, 12), float64] {
  @func_9649() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_4140() -> Tensor[(72), float64] {
  %57 = @func_2450() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64]) */;
  %57.0
}

def @func_7814() -> Tensor[(72), float64] {
  @func_4746() /* ty=Tensor[(72), float64] */
}

def @func_3867(%var_3835: Tensor[(192), float32]) -> (Tensor[(2, 8, 12), float32], Tensor[(192), float32], Tensor[(72), float64]) {
  %58 = cast(%var_3835, dtype="float32") /* ty=Tensor[(192), float32] */;
  %59 = reshape(%58, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float32] */;
  %60 = @func_666(%59) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
  %61 = @func_2181() /* ty=(Tensor[(72), float64],) */;
  %62 = %61.0;
  %63 = cast(%62, dtype="float64") /* ty=Tensor[(72), float64] */;
  %64 = %60.3;
  %65 = asinh(%63) /* ty=Tensor[(72), float64] */;
  (%64, %var_3835, %65)
}

def @func_7169() -> Tensor[(72), float64] {
  %66 = @func_2478() /* ty=(Tensor[(72), float64],) */;
  %66.0
}

def @func_9976() -> (Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(180), uint8]) {
  %67 = cast(meta[relay.Constant][1] /* ty=Tensor[(180), uint8] */, dtype="uint8") /* ty=Tensor[(180), uint8] */;
  %68 = cast(meta[relay.Constant][1] /* ty=Tensor[(180), uint8] */, dtype="uint8") /* ty=Tensor[(180), uint8] */;
  %69 = reshape(%67, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), uint8] */;
  %70 = reshape(%68, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), uint8] */;
  %71 = @func_965(%69, %70) /* ty=(Tensor[(3, 10, 6), bool], Tensor[(72), float64]) */;
  %72 = @func_9364() /* ty=Tensor[(2, 8, 12), float32] */;
  %73 = %71.1;
  (%72, %73, meta[relay.Constant][1] /* ty=Tensor[(180), uint8] */)
}

def @func_7783() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64]) {
  %74 = @func_2237() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %75 = @func_7169() /* ty=Tensor[(72), float64] */;
  %76 = %74.0;
  (%75, %76)
}

def @func_7386() -> Tensor[(72), float64] {
  @func_7169() /* ty=Tensor[(72), float64] */
}

def @func_11214(%var_11204: Tensor[(11, 15, 2), float64]) -> Tensor[(11, 15, 2), float64] {
  %77 = cast(%var_11204, dtype="float64") /* ty=Tensor[(11, 15, 2), float64] */;
  log(%77) /* ty=Tensor[(11, 15, 2), float64] */
}

def @func_1296() -> (Tensor[(72), float64],) {
  %78 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
  %79 = %78.2;
  (%79,)
}

def @func_3215() -> Tensor[(2, 8, 12), float64] {
  %80 = @func_1349() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %80.0
}

def @func_2518() -> Tensor[(72), float64] {
  %81 = @func_2286() /* ty=(Tensor[(72), float64],) */;
  %81.0
}

def @func_9569() -> (Tensor[(72), float64],) {
  %82 = @func_4746() /* ty=Tensor[(72), float64] */;
  (%82,)
}

def @func_9508() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  %83 = @func_8518() /* ty=(Tensor[(56), float64], Tensor[(2, 8, 12), float64]) */;
  %84 = @func_9373() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %85 = @func_4746() /* ty=Tensor[(72), float64] */;
  %86 = %83.1;
  %87 = %84.0;
  (%85, %86, %87)
}

def @func_11377() -> Tensor[(2, 8, 12), float32] {
  %88 = @func_1461() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %88.1
}

def @func_992() -> Tensor[(2, 8, 12), float32] {
  %89 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %89.3
}

def @func_2041() -> (Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(72), float64]) {
  %90 = @func_1511() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %91 = %90.2;
  %92 = cast(%91, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %93 = @func_1523() /* ty=(Tensor[(72), float64],) */;
  %94 = @func_1523() /* ty=(Tensor[(72), float64],) */;
  %95 = cos(%92) /* ty=Tensor[(2, 8, 12), float32] */;
  %96 = %93.0;
  %97 = %94.0;
  (%95, %96, %97)
}

def @func_4550() -> (Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(2, 8, 12), float64]) {
  %98 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %99 = @func_2041() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(72), float64]) */;
  %100 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %101 = %98.0;
  %102 = %99.1;
  %103 = %100.1;
  (%101, %102, %103)
}

def @func_4504() -> (Tensor[(2, 8, 12), float32],) {
  %104 = @func_3970() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
  %105 = %104.1;
  (%105,)
}

def @func_5943() -> Tensor[(6, 6, 3), bool] {
  %106 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 6, 3), float64] */, dtype="bool") /* ty=Tensor[(6, 6, 3), bool] */;
  %107 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(6, 6, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 6, 3), float64] */, dtype="bool") /* ty=Tensor[(6, 6, 3), bool] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%108, %109) /* ty=Tensor[(6, 6, 3), bool] */
}

def @func_965(%var_953: Tensor[(3, 10, 6), uint8], %var_954: Tensor[(3, 10, 6), uint8]) -> (Tensor[(3, 10, 6), bool], Tensor[(72), float64]) {
  %110 = cast(%var_954, dtype="bool") /* ty=Tensor[(3, 10, 6), bool] */;
  %111 = shape_of(%var_953, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%var_953, dtype="bool") /* ty=Tensor[(3, 10, 6), bool] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %114 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
  %115 = less_equal(%112, %113) /* ty=Tensor[(3, 10, 6), bool] */;
  %116 = %114.2;
  (%115, %116)
}

def @func_666(%var_636: Tensor[(2, 8, 12), float32]) -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) {
  %117 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %118 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %119 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %120 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %121 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %122 = %121.0;
  %123 = cast(%122, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %124 = %120.3;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %126 = reshape(%125, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
  %127 = @func_460(%126) /* ty=(Tensor[(2, 8, 12), uint64],) */;
  %128 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %129 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %130 = %129.1;
  %131 = cast(%var_636, dtype="uint32") /* ty=Tensor[(2, 8, 12), uint32] */;
  %132 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%130, dtype="uint32") /* ty=Tensor[(2, 8, 12), uint32] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %135 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %136 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %137 = %117.0;
  %138 = %118.3;
  %139 = %119.0;
  %140 = atan(%123) /* ty=Tensor[(2, 8, 12), float32] */;
  %141 = %127.0;
  %142 = %128.0;
  %143 = bitwise_xor(%133, %134) /* ty=Tensor[(2, 8, 12), uint32] */;
  %144 = %135.0;
  %145 = %136.0;
  (%137, %138, %139, %124, %140, %141, %142, %143, %144, %145)
}

def @func_7128() -> (Tensor[(2, 8, 12), float64], Tensor[(72), float64]) {
  %146 = @func_2863() /* ty=(Tensor[(72), float64],) */;
  %147 = @func_3215() /* ty=Tensor[(2, 8, 12), float64] */;
  %148 = %146.0;
  (%147, %148)
}

def @func_2450() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64]) {
  %149 = @func_2181() /* ty=(Tensor[(72), float64],) */;
  %150 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %151 = %149.0;
  %152 = %150.0;
  (%151, %152)
}

def @func_7835() -> Tensor[(2, 8, 12), float64] {
  %153 = @func_7128() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(72), float64]) */;
  %153.0
}

def @func_10175(%var_10144: Tensor[(11, 4, 16), float64]) -> (Tensor[(11, 4, 16), float64], Tensor[(11, 4, 16), float32], Tensor[(2, 8, 12), float32]) {
  %154 = cast(%var_10144, dtype="float64") /* ty=Tensor[(11, 4, 16), float64] */;
  %155 = cast(%var_10144, dtype="float32") /* ty=Tensor[(11, 4, 16), float32] */;
  %156 = log10(%154) /* ty=Tensor[(11, 4, 16), float64] */;
  %157 = atan(%155) /* ty=Tensor[(11, 4, 16), float32] */;
  %158 = @func_7580() /* ty=Tensor[(2, 8, 12), float32] */;
  (%156, %157, %158)
}

def @func_10037() -> Tensor[(2, 8, 12), float64] {
  %159 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %159.0
}

def @func_11117() -> (Tensor[(72), float64],) {
  %160 = @func_7792() /* ty=Tensor[(72), float64] */;
  (%160,)
}

def @func_863() -> (Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) {
  %161 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %162 = cast(meta[relay.Constant][4] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %163 = reshape(%162, newshape=[3, 12, 2]) /* ty=Tensor[(3, 12, 2), float64] */;
  %164 = @func_378(%163) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %165 = %161.0;
  %166 = %164.0;
  (%165, %166, meta[relay.Constant][4] /* ty=Tensor[(72), float64] */)
}

def @func_9409() -> Tensor[(72), float64] {
  %167 = @func_4321() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
  %167.0
}

def @func_2148() -> Tensor[(2, 8, 12), float32] {
  %168 = @func_1850() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
  %168.1
}

def @func_9373() -> (Tensor[(2, 8, 12), float32],) {
  %169 = @func_8822() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
  %170 = %169.1;
  (%170,)
}

def @func_10272(%var_10194: Tensor[(13, 14, 1), float64], %var_10246: Tensor[(72), float64]) -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(13, 14, 72), float64], Tensor[(13, 14, ?), uint64]) {
  %171 = @func_9508() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %172 = cast(%var_10246, dtype="float64") /* ty=Tensor[(72), float64] */;
  %173 = reshape(%172, newshape=[3, 12, 2]) /* ty=Tensor[(3, 12, 2), float64] */;
  %174 = @func_378(%173) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %175 = cast(%var_10194, dtype="float64") /* ty=Tensor[(13, 14, 1), float64] */;
  %176 = cosh(%175) /* ty=Tensor[(13, 14, 1), float64] */;
  %177 = cast(%176, dtype="float64") /* ty=Tensor[(13, 14, 1), float64] */;
  %178 = cast(%var_10246, dtype="float64") /* ty=Tensor[(72), float64] */;
  %179 = cast(%var_10194, dtype="uint64") /* ty=Tensor[(13, 14, 1), uint64] */;
  %180 = shape_of(%176, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%176, dtype="uint64") /* ty=Tensor[(13, 14, 1), uint64] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %183 = @func_6315() /* ty=Tensor[(2, 8, 12), float32] */;
  %184 = %171.2;
  %185 = %174.1;
  %186 = multiply(%177, %178) /* ty=Tensor[(13, 14, 72), float64] */;
  %187 = left_shift(%181, %182) /* ty=Tensor[(13, 14, ?), uint64] */;
  (%183, %184, %185, %186, %187)
}

def @func_6047(%var_6037: Tensor[(2, 28), float64]) -> (Tensor[(72), float64], Tensor[(1, 8, 7), float64], Tensor[(2, 28), float64]) {
  %188 = @func_4855() /* ty=(Tensor[(192), float32], Tensor[(72), float64]) */;
  %189 = cast(%var_6037, dtype="float64") /* ty=Tensor[(2, 28), float64] */;
  %190 = reshape(%189, newshape=[1, 8, 7]) /* ty=Tensor[(1, 8, 7), float64] */;
  %191 = @func_2369(%190) /* ty=(Tensor[(1, 8, 7), float64],) */;
  %192 = %188.1;
  %193 = %191.0;
  (%192, %193, %var_6037)
}

def @func_10604() -> (Tensor[(192), float32],) {
  %194 = @func_4855() /* ty=(Tensor[(192), float32], Tensor[(72), float64]) */;
  %195 = %194.0;
  (%195,)
}

def @func_542(%var_533: Tensor[(2, 8, 12), float64]) -> Tensor[(2, 8, 12), uint64] {
  %196 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %197 = %196.0;
  %198 = cast(%var_533, dtype="uint64") /* ty=Tensor[(2, 8, 12), uint64] */;
  %199 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%197, dtype="uint64") /* ty=Tensor[(2, 8, 12), uint64] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%200, %201) /* ty=Tensor[(2, 8, 12), uint64] */
}

def @func_2811(%var_2788: Tensor[(616), float32]) -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(180), uint8], Tensor[(2, 8, 12), bool], Tensor[(72), float64], Tensor[(7, 8, 11), bool], Tensor[(616), float32], Tensor[(7, 8, 11), bool], Tensor[(72), float64], Tensor[(72), float64]) {
  %202 = @func_2407() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %203 = cast(meta[relay.Constant][5] /* ty=Tensor[(180), uint8] */, dtype="uint8") /* ty=Tensor[(180), uint8] */;
  %204 = cast(meta[relay.Constant][5] /* ty=Tensor[(180), uint8] */, dtype="uint8") /* ty=Tensor[(180), uint8] */;
  %205 = reshape(%203, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), uint8] */;
  %206 = reshape(%204, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), uint8] */;
  %207 = @func_965(%205, %206) /* ty=(Tensor[(3, 10, 6), bool], Tensor[(72), float64]) */;
  %208 = @func_1125() /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(180), uint8], Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
  %209 = %208.1;
  %210 = @func_1125() /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(180), uint8], Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
  %211 = %210.7;
  %212 = cast(%211, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %213 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%209, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %216 = @func_2181() /* ty=(Tensor[(72), float64],) */;
  %217 = cast(%var_2788, dtype="float32") /* ty=Tensor[(616), float32] */;
  %218 = cast(%var_2788, dtype="bool") /* ty=Tensor[(616), bool] */;
  %219 = reshape(%217, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
  %220 = reshape(%218, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), bool] */;
  %221 = @func_908(%219, %220) /* ty=(Tensor[(7, 8, 11), bool],) */;
  %222 = %221.0;
  %223 = cast(%222, dtype="float32") /* ty=Tensor[(7, 8, 11), float32] */;
  %224 = cast(%var_2788, dtype="bool") /* ty=Tensor[(616), bool] */;
  %225 = reshape(%223, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
  %226 = reshape(%224, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), bool] */;
  %227 = @func_908(%225, %226) /* ty=(Tensor[(7, 8, 11), bool],) */;
  %228 = @func_2181() /* ty=(Tensor[(72), float64],) */;
  %229 = @func_1296() /* ty=(Tensor[(72), float64],) */;
  %230 = %202.0;
  %231 = @func_760() /* ty=Tensor[(2, 8, 12), float64] */;
  %232 = %207.1;
  %233 = not_equal(%214, %215) /* ty=Tensor[(2, 8, 12), bool] */;
  %234 = %216.0;
  %235 = %227.0;
  %236 = %228.0;
  %237 = %229.0;
  (%230, %231, %232, meta[relay.Constant][5] /* ty=Tensor[(180), uint8] */, %233, %234, %222, %var_2788, %235, %236, %237)
}

def @func_9649() -> Tensor[(2, 8, 12), float64] {
  @func_3818() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_760() -> Tensor[(2, 8, 12), float64] {
  %238 = @func_731() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %238.0
}

def @func_460(%var_451: Tensor[(2, 8, 12), float64]) -> (Tensor[(2, 8, 12), uint64],) {
  %239 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %240 = %239.2;
  %241 = cast(%var_451, dtype="uint64") /* ty=Tensor[(2, 8, 12), uint64] */;
  %242 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%240, dtype="uint64") /* ty=Tensor[(2, 8, 12), uint64] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %245 = maximum(%243, %244) /* ty=Tensor[(2, 8, 12), uint64] */;
  (%245,)
}

def @func_5656(%var_5642: Tensor[(16, 16, 9), uint16], %var_5643: Tensor[(16, 16, 9), uint16]) -> (Tensor[(16, 16, 9), uint16],) {
  %246 = cast(%var_5643, dtype="uint16") /* ty=Tensor[(16, 16, 9), uint16] */;
  %247 = shape_of(%var_5642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%var_5642, dtype="uint16") /* ty=Tensor[(16, 16, 9), uint16] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %250 = subtract(%248, %249) /* ty=Tensor[(16, 16, 9), uint16] */;
  (%250,)
}

def @func_2885() -> (Tensor[(2, 8, 12), float64],) {
  %251 = @func_1582() /* ty=Tensor[(2, 8, 12), float64] */;
  (%251,)
}

def @func_3735() -> (Tensor[(2, 8, 12), float64],) {
  %252 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %253 = %252.1;
  (%253,)
}

def @func_11321(%var_11300: Tensor[(9, 7, 8), float32]) -> (Tensor[(9, 7, 8), bool], Tensor[(9, 7, 8), bool]) {
  %254 = cast(%var_11300, dtype="float32") /* ty=Tensor[(9, 7, 8), float32] */;
  %255 = acos(%254) /* ty=Tensor[(9, 7, 8), float32] */;
  %256 = cast(%var_11300, dtype="bool") /* ty=Tensor[(9, 7, 8), bool] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%255, dtype="bool") /* ty=Tensor[(9, 7, 8), bool] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %260 = cast(%var_11300, dtype="bool") /* ty=Tensor[(9, 7, 8), bool] */;
  %261 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%255, dtype="bool") /* ty=Tensor[(9, 7, 8), bool] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %264 = equal(%258, %259) /* ty=Tensor[(9, 7, 8), bool] */;
  %265 = less_equal(%262, %263) /* ty=Tensor[(9, 7, 8), bool] */;
  (%264, %265)
}

def @func_317() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  %266 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %267 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %268 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %269 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %270 = %266.0;
  %271 = %267.0;
  %272 = %268.0;
  %273 = %269.1;
  (%270, %271, %272, %273)
}

def @func_4281(%var_4240: float64, %var_4241: Tensor[(1, 270), float64], %var_4242: Tensor[(576), float64]) -> (Tensor[(5, 6, 9), float64], Tensor[(576), float64], Tensor[(2, 8, 12), float32], Tensor[(1, 270), bool]) {
  %274 = cast(%var_4240, dtype="float64") /* ty=float64 */;
  %275 = cast(%var_4241, dtype="float64") /* ty=Tensor[(1, 270), float64] */;
  %276 = cast(%var_4242, dtype="float64") /* ty=Tensor[(576), float64] */;
  %277 = reshape(%274, newshape=[]) /* ty=float64 */;
  %278 = reshape(%275, newshape=[5, 6, 9]) /* ty=Tensor[(5, 6, 9), float64] */;
  %279 = reshape(%276, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), float64] */;
  %280 = @func_3355(%277, %278, %279) /* ty=(Tensor[(5, 6, 9), float64], Tensor[(6, 8, 12), float32], Tensor[(6, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(4, 48), float32]) */;
  %281 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %282 = %281.0;
  %283 = cast(%282, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %284 = cast(%var_4241, dtype="bool") /* ty=Tensor[(1, 270), bool] */;
  %285 = cast(%var_4240, dtype="bool") /* ty=bool */;
  %286 = %280.0;
  %287 = log(%283) /* ty=Tensor[(2, 8, 12), float32] */;
  %288 = logical_and(%284, %285) /* ty=Tensor[(1, 270), bool] */;
  (%286, %var_4242, %287, %288)
}

def @func_5133() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
  %289 = @func_2181() /* ty=(Tensor[(72), float64],) */;
  %290 = %289.0;
  %291 = @func_3629() /* ty=Tensor[(2, 8, 12), float64] */;
  %292 = @func_3955() /* ty=Tensor[(2, 8, 12), float64] */;
  (%290, %291, %292)
}

def @func_7261(%var_7228: Tensor[(15, 12, 11), float32], %var_7246: Tensor[(2100), uint16], %var_7251: Tensor[(693), float32]) -> (Tensor[(15, 12, 11), float32], Tensor[(10, 15, 14), bool], Tensor[(2100), uint16], Tensor[(9, 7, 11), float32], Tensor[(693), float32]) {
  %293 = cast(%var_7228, dtype="float32") /* ty=Tensor[(15, 12, 11), float32] */;
  %294 = cast(%var_7246, dtype="uint16") /* ty=Tensor[(2100), uint16] */;
  %295 = cast(%var_7246, dtype="uint16") /* ty=Tensor[(2100), uint16] */;
  %296 = reshape(%294, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), uint16] */;
  %297 = reshape(%295, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), uint16] */;
  %298 = @func_3114(%296, %297) /* ty=(Tensor[(10, 15, 14), bool], Tensor[(3, 12, 2), bool]) */;
  %299 = cast(%var_7251, dtype="float32") /* ty=Tensor[(693), float32] */;
  %300 = reshape(%299, newshape=[9, 7, 11]) /* ty=Tensor[(9, 7, 11), float32] */;
  %301 = @func_4487(%300) /* ty=(Tensor[(72), float64], Tensor[(9, 7, 11), float32]) */;
  %302 = acos(%293) /* ty=Tensor[(15, 12, 11), float32] */;
  %303 = %298.0;
  %304 = %301.1;
  (%302, %303, %var_7246, %304, %var_7251)
}

def @func_9531() -> (Tensor[(2, 8, 12), float64], Tensor[(192), float32]) {
  %305 = @func_8103() /* ty=(Tensor[(192), float32], Tensor[(72), float64]) */;
  %306 = @func_3818() /* ty=Tensor[(2, 8, 12), float64] */;
  %307 = %305.0;
  (%306, %307)
}

def @main(%var_11756: Tensor[(1050, 2), uint16]) -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(1050, 2), float64], Tensor[(1050, 2), bool]) {
  %308 = cast(meta[relay.Constant][6] /* ty=Tensor[(1050, 2), uint16] */, dtype="uint16") /* ty=Tensor[(1050, 2), uint16] */;
  %309 = cast(meta[relay.Constant][6] /* ty=Tensor[(1050, 2), uint16] */, dtype="float64") /* ty=Tensor[(1050, 2), float64] */;
  %310 = reshape(%308, newshape=[15, 140]) /* ty=Tensor[(15, 140), uint16] */;
  %311 = reshape(%309, newshape=[15, 140]) /* ty=Tensor[(15, 140), float64] */;
  %312 = @func_10554(%310, %311) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(15, 12, 11), float32], Tensor[(77, 9), float32], Tensor[(2, 8, 12), float64], Tensor[(704), float64], Tensor[(72), float64], Tensor[(11, 4, 16), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(15, 140), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(15, 140), bool], Tensor[(1980), float32], Tensor[(2, 8, 12), float64], Tensor[(15, 140), bool]) */;
  %313 = cast(meta[relay.Constant][6] /* ty=Tensor[(1050, 2), uint16] */, dtype="float64") /* ty=Tensor[(1050, 2), float64] */;
  %314 = cast(%var_11756, dtype="bool") /* ty=Tensor[(1050, 2), bool] */;
  %315 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(1050, 2), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %316 = cast(meta[relay.Constant][6] /* ty=Tensor[(1050, 2), uint16] */, dtype="bool") /* ty=Tensor[(1050, 2), bool] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %318 = @func_9364() /* ty=Tensor[(2, 8, 12), float32] */;
  %319 = %312.7;
  %320 = exp(%313) /* ty=Tensor[(1050, 2), float64] */;
  %321 = less_equal(%316, %317) /* ty=Tensor[(1050, 2), bool] */;
  (%318, %319, %320, %321)
}

def @func_7884() -> (Tensor[(72), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float32]) {
  %322 = @func_2863() /* ty=(Tensor[(72), float64],) */;
  %323 = %322.0;
  %324 = @func_7169() /* ty=Tensor[(72), float64] */;
  %325 = @func_6315() /* ty=Tensor[(2, 8, 12), float32] */;
  (%323, %324, %325)
}

def @func_1768() -> (Tensor[(2, 8, 12), float32],) {
  %326 = @func_1326() /* ty=Tensor[(2, 8, 12), float32] */;
  (%326,)
}

def @func_4899(%var_4860: Tensor[(13, 7, 6), float32]) -> (Tensor[(72), float64], Tensor[(13, 7, 6), int16]) {
  %327 = @func_2181() /* ty=(Tensor[(72), float64],) */;
  %328 = cast(%var_4860, dtype="float32") /* ty=Tensor[(13, 7, 6), float32] */;
  %329 = log2(%328) /* ty=Tensor[(13, 7, 6), float32] */;
  %330 = cast(%var_4860, dtype="int16") /* ty=Tensor[(13, 7, 6), int16] */;
  %331 = shape_of(%329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%329, dtype="int16") /* ty=Tensor[(13, 7, 6), int16] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %334 = %327.0;
  %335 = logical_xor(%332, %333) /* ty=Tensor[(13, 7, 6), int16] */;
  (%334, %335)
}

def @func_10305(%var_10293: Tensor[(6, 2, 16), bool], %var_10294: Tensor[(6, 2, 16), bool]) -> Tensor[(6, 2, 16), bool] {
  %336 = cast(%var_10294, dtype="bool") /* ty=Tensor[(6, 2, 16), bool] */;
  %337 = shape_of(%var_10293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%var_10293, dtype="bool") /* ty=Tensor[(6, 2, 16), bool] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%338, %339) /* ty=Tensor[(6, 2, 16), bool] */
}

def @func_7474() -> (Tensor[(2, 8, 12), uint64],) {
  %340 = @func_1642() /* ty=(Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float64]) */;
  %341 = %340.2;
  (%341,)
}

def @func_1582() -> Tensor[(2, 8, 12), float64] {
  %342 = @func_1511() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %342.2
}

def @func_7549(%var_7533: float64) -> (Tensor[(2, 8, 12), float64], Tensor[(1, 270), bool], float64, Tensor[(270), float64], Tensor[(576), float64], Tensor[(1188), float32], Tensor[(715), float32], Tensor[(1188), float32]) {
  %343 = @func_5330() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %344 = cast(%var_7533, dtype="float64") /* ty=float64 */;
  %345 = cast(meta[relay.Constant][7] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %346 = cast(meta[relay.Constant][8] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %347 = reshape(%344, newshape=[]) /* ty=float64 */;
  %348 = reshape(%345, newshape=[1, 270]) /* ty=Tensor[(1, 270), float64] */;
  %349 = reshape(%346, newshape=[576]) /* ty=Tensor[(576), float64] */;
  %350 = @func_4281(%347, %348, %349) /* ty=(Tensor[(5, 6, 9), float64], Tensor[(576), float64], Tensor[(2, 8, 12), float32], Tensor[(1, 270), bool]) */;
  %351 = cast(meta[relay.Constant][9] /* ty=Tensor[(715), float32] */, dtype="float32") /* ty=Tensor[(715), float32] */;
  %352 = cast(meta[relay.Constant][10] /* ty=Tensor[(1188), float32] */, dtype="float32") /* ty=Tensor[(1188), float32] */;
  %353 = reshape(%351, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), float32] */;
  %354 = reshape(%352, newshape=[1188]) /* ty=Tensor[(1188), float32] */;
  %355 = @func_7425(%353, %354) /* ty=(Tensor[(11, 13, 5), float32], Tensor[(6, 6, 3), bool], Tensor[(72), float64], Tensor[(1188), float32]) */;
  %356 = %343.0;
  %357 = %350.3;
  %358 = %355.3;
  (%356, %357, %var_7533, meta[relay.Constant][7] /* ty=Tensor[(270), float64] */, meta[relay.Constant][8] /* ty=Tensor[(576), float64] */, %358, meta[relay.Constant][9] /* ty=Tensor[(715), float32] */, meta[relay.Constant][10] /* ty=Tensor[(1188), float32] */)
}

def @func_11171(%var_11157: Tensor[(12, 14, 1), uint32]) -> (Tensor[(12, 14, 14), bool],) {
  %359 = cast(%var_11157, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %360 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 14, 14), uint32] */, dtype="bool") /* ty=Tensor[(12, 14, 14), bool] */;
  %361 = not_equal(%359, %360) /* ty=Tensor[(12, 14, 14), bool] */;
  %362 = cast(%361, dtype="float32") /* ty=Tensor[(12, 14, 14), float32] */;
  %363 = asin(%362) /* ty=Tensor[(12, 14, 14), float32] */;
  %364 = cast(%363, dtype="bool") /* ty=Tensor[(12, 14, 14), bool] */;
  %365 = cast(%var_11157, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %366 = less(%364, %365) /* ty=Tensor[(12, 14, 14), bool] */;
  (%366,)
}

def @func_5236() -> Tensor[(192), float32] {
  %367 = @func_4855() /* ty=(Tensor[(192), float32], Tensor[(72), float64]) */;
  %367.0
}

def @func_3650() -> (Tensor[(2, 8, 12), float32],) {
  %368 = @func_1326() /* ty=Tensor[(2, 8, 12), float32] */;
  (%368,)
}

def @func_6397() -> Tensor[(72), float64] {
  %369 = @func_2478() /* ty=(Tensor[(72), float64],) */;
  %369.0
}

def @func_7516() -> Tensor[(2, 8, 12), float64] {
  %370 = @func_3735() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %370.0
}

def @func_3818() -> Tensor[(2, 8, 12), float64] {
  %371 = @func_1255() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %371.0
}

def @func_8217() -> Tensor[(2, 8, 12), float32] {
  %372 = @func_4321() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
  %372.1
}

def @func_1523() -> (Tensor[(72), float64],) {
  %373 = @func_1296() /* ty=(Tensor[(72), float64],) */;
  %374 = %373.0;
  (%374,)
}

def @func_1326() -> Tensor[(2, 8, 12), float32] {
  @func_992() /* ty=Tensor[(2, 8, 12), float32] */
}

def @func_3629() -> Tensor[(2, 8, 12), float64] {
  %375 = @func_1975() /* ty=Tensor[(2, 8, 12), float32] */;
  %376 = cast(%375, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  erf(%376) /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_9795() -> (Tensor[(2, 8, 12), float32],) {
  %377 = @func_4321() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
  %378 = %377.1;
  (%378,)
}

def @func_6205() -> (Tensor[(2, 8, 12), float32], Tensor[(5, 3, 1), uint8], uint8, Tensor[(15), uint8], Tensor[(72), float64]) {
  %379 = cast(meta[relay.Constant][12] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %380 = cast(meta[relay.Constant][13] /* ty=Tensor[(15), uint8] */, dtype="uint8") /* ty=Tensor[(15), uint8] */;
  %381 = @func_992() /* ty=Tensor[(2, 8, 12), float32] */;
  %382 = cast(%381, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %383 = reshape(%379, newshape=[]) /* ty=uint8 */;
  %384 = reshape(%380, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), uint8] */;
  %385 = reshape(%382, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %386 = @func_3270(%383, %384, %385) /* ty=(Tensor[(5, 3, 1), uint8], Tensor[(2, 8, 12), float32], Tensor[(192), float32]) */;
  %387 = @func_1296() /* ty=(Tensor[(72), float64],) */;
  %388 = %386.0;
  %389 = %387.0;
  (%381, %388, meta[relay.Constant][12] /* ty=uint8 */, meta[relay.Constant][13] /* ty=Tensor[(15), uint8] */, %389)
}

def @func_2458() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64]) {
  %390 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %391 = %390.1;
  %392 = cast(%391, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %393 = reshape(%392, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
  %394 = @func_460(%393) /* ty=(Tensor[(2, 8, 12), uint64],) */;
  %395 = %394.0;
  (%391, %395)
}

def @func_11262() -> (Tensor[(7, 15, 15), float32],) {
  %396 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 15, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 15, 15), float32] */;
  %397 = asin(%396) /* ty=Tensor[(7, 15, 15), float32] */;
  (%397,)
}

def @func_7425(%var_7396: Tensor[(11, 13, 5), float32], %var_7423: Tensor[(1188), float32]) -> (Tensor[(11, 13, 5), float32], Tensor[(6, 6, 3), bool], Tensor[(72), float64], Tensor[(1188), float32]) {
  %398 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 13, 5), float32] */;
  %399 = shape_of(%var_7396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%var_7396, dtype="float32") /* ty=Tensor[(11, 13, 5), float32] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %402 = cast(%var_7423, dtype="float32") /* ty=Tensor[(1188), float32] */;
  %403 = reshape(%402, newshape=[18, 66]) /* ty=Tensor[(18, 66), float32] */;
  %404 = @func_6740(%403) /* ty=(Tensor[(72), float64], Tensor[(72), float64], Tensor[(11, 9, 12), float32], Tensor[(18, 66), float32]) */;
  %405 = mod(%400, %401) /* ty=Tensor[(11, 13, 5), float32] */;
  %406 = @func_5943() /* ty=Tensor[(6, 6, 3), bool] */;
  %407 = %404.1;
  (%405, %406, %407, %var_7423)
}

def @func_4746() -> Tensor[(72), float64] {
  %408 = @func_2863() /* ty=(Tensor[(72), float64],) */;
  %408.0
}

def @func_6767() -> Tensor[(3, 12, 2), bool] {
  %409 = @func_5972() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), bool], Tensor[(1, 2100), uint16]) */;
  %409.2
}

def @func_7050(%var_7027: Tensor[(2, 8, 12), float32], %var_7040: Tensor[(18, 4), float64]) -> (Tensor[(2, 8, 12), int8], Tensor[(72), float64], Tensor[(18, 4), float64], Tensor[(2, 8, 12), float64]) {
  %410 = @func_1975() /* ty=Tensor[(2, 8, 12), float32] */;
  %411 = cast(%var_7027, dtype="int8") /* ty=Tensor[(2, 8, 12), int8] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="int8") /* ty=Tensor[(2, 8, 12), int8] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %415 = left_shift(%413, %414) /* ty=Tensor[(2, 8, 12), int8] */;
  %416 = cast(%415, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %417 = cast(%var_7040, dtype="float64") /* ty=Tensor[(18, 4), float64] */;
  %418 = reshape(%416, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
  %419 = reshape(%417, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %420 = @func_845(%418, %419) /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32]) */;
  %421 = %420.3;
  %422 = @func_3629() /* ty=Tensor[(2, 8, 12), float64] */;
  (%415, %421, %var_7040, %422)
}

def @func_8547(%var_8536: bool, %var_8537: Tensor[(3, 1, 2), bool]) -> (Tensor[(3, 1, 2), float32],) {
  %423 = cast(%var_8536, dtype="bool") /* ty=bool */;
  %424 = cast(%var_8537, dtype="bool") /* ty=Tensor[(3, 1, 2), bool] */;
  %425 = logical_or(%423, %424) /* ty=Tensor[(3, 1, 2), bool] */;
  %426 = cast(%425, dtype="float32") /* ty=Tensor[(3, 1, 2), float32] */;
  %427 = cast(%var_8536, dtype="float32") /* ty=float32 */;
  %428 = power(%426, %427) /* ty=Tensor[(3, 1, 2), float32] */;
  (%428,)
}

def @func_2181() -> (Tensor[(72), float64],) {
  %429 = @func_1296() /* ty=(Tensor[(72), float64],) */;
  %430 = %429.0;
  (%430,)
}

def @func_1214(%var_1148: Tensor[(2, 8, 12), float64]) -> (Tensor[(2, 8, 12), uint16], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(2, 8, 12), uint64]) {
  %431 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %432 = %431.0;
  %433 = cast(%var_1148, dtype="uint16") /* ty=Tensor[(2, 8, 12), uint16] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="uint16") /* ty=Tensor[(2, 8, 12), uint16] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %437 = cast(%var_1148, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %438 = reshape(%437, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float32] */;
  %439 = @func_666(%438) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
  %440 = cast(meta[relay.Constant][16] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %441 = reshape(%440, newshape=[3, 12, 2]) /* ty=Tensor[(3, 12, 2), float64] */;
  %442 = @func_378(%441) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %443 = cast(%432, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %444 = reshape(%443, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
  %445 = @func_460(%444) /* ty=(Tensor[(2, 8, 12), uint64],) */;
  %446 = right_shift(%435, %436) /* ty=Tensor[(2, 8, 12), uint16] */;
  %447 = %439.8;
  %448 = %442.1;
  %449 = %445.0;
  (%446, %447, %448, meta[relay.Constant][16] /* ty=Tensor[(72), float64] */, %449)
}

def @func_10706() -> Tensor[(2, 8, 12), float64] {
  %450 = @func_4223() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %450.1
}

def @func_4938(%var_4928: Tensor[(2, 12, 8), bool]) -> Tensor[(2, 12, 8), bool] {
  %451 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %452 = cast(%var_4928, dtype="bool") /* ty=Tensor[(2, 12, 8), bool] */;
  logical_and(%451, %452) /* ty=Tensor[(2, 12, 8), bool] */
}

def @func_4808() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) {
  %453 = @func_3650() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %454 = %453.0;
  %455 = @func_1582() /* ty=Tensor[(2, 8, 12), float64] */;
  (%454, %455)
}

def @func_5006(%var_4970: Tensor[(1, 56), float64]) -> (Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(1, 56), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) {
  %456 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %457 = cast(%var_4970, dtype="float64") /* ty=Tensor[(1, 56), float64] */;
  %458 = reshape(%457, newshape=[1, 8, 7]) /* ty=Tensor[(1, 8, 7), float64] */;
  %459 = @func_2369(%458) /* ty=(Tensor[(1, 8, 7), float64],) */;
  %460 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %461 = @func_2458() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64]) */;
  %462 = %460.1;
  %463 = cast(%462, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %464 = cast(meta[relay.Constant][17] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %465 = reshape(%463, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
  %466 = reshape(%464, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %467 = @func_845(%465, %466) /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32]) */;
  %468 = %456.3;
  %469 = %459.0;
  %470 = %461.1;
  %471 = %467.2;
  (%468, %469, %var_4970, %462, %470, %471, meta[relay.Constant][17] /* ty=Tensor[(72), float64] */)
}

def @func_8103() -> (Tensor[(192), float32], Tensor[(72), float64]) {
  %472 = @func_4855() /* ty=(Tensor[(192), float32], Tensor[(72), float64]) */;
  %473 = @func_7128() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(72), float64]) */;
  %474 = %472.0;
  %475 = %473.1;
  (%474, %475)
}

def @func_6837(%var_6830: Tensor[(13, 6, 14), uint8]) -> Tensor[(13, 6, 14), uint8] {
  %476 = cast(meta[relay.Constant][18] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %477 = cast(%var_6830, dtype="uint8") /* ty=Tensor[(13, 6, 14), uint8] */;
  logical_xor(%476, %477) /* ty=Tensor[(13, 6, 14), uint8] */
}

def @func_10805(%var_10782: Tensor[(616), float32]) -> (Tensor[(72), float64], Tensor[(2, 8, 12), bool], Tensor[(616), float32]) {
  %478 = cast(%var_10782, dtype="float32") /* ty=Tensor[(616), float32] */;
  %479 = reshape(%478, newshape=[616]) /* ty=Tensor[(616), float32] */;
  %480 = @func_2811(%479) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(180), uint8], Tensor[(2, 8, 12), bool], Tensor[(72), float64], Tensor[(7, 8, 11), bool], Tensor[(616), float32], Tensor[(7, 8, 11), bool], Tensor[(72), float64], Tensor[(72), float64]) */;
  %481 = @func_7169() /* ty=Tensor[(72), float64] */;
  %482 = %480.4;
  (%481, %482, %var_10782)
}

def @func_6287() -> (Tensor[(2, 8, 12), float64],) {
  %483 = @func_1582() /* ty=Tensor[(2, 8, 12), float64] */;
  (%483,)
}

def @func_7279() -> (Tensor[(72), float64],) {
  %484 = @func_1523() /* ty=(Tensor[(72), float64],) */;
  %485 = %484.0;
  (%485,)
}

def @func_10608() -> Tensor[(2, 8, 12), float64] {
  %486 = @func_6995() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %486.0
}

def @func_6112(%var_6104: Tensor[(576), float64]) -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(5, 6, 9), float64], float64, Tensor[(270), float64], Tensor[(576), float64]) {
  %487 = @func_4746() /* ty=Tensor[(72), float64] */;
  %488 = cast(%487, dtype="float64") /* ty=Tensor[(72), float64] */;
  %489 = reshape(%488, newshape=[3, 12, 2]) /* ty=Tensor[(3, 12, 2), float64] */;
  %490 = @func_378(%489) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %491 = cast(3.1391f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %492 = cast(meta[relay.Constant][19] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %493 = cast(%var_6104, dtype="float64") /* ty=Tensor[(576), float64] */;
  %494 = reshape(%491, newshape=[]) /* ty=float64 */;
  %495 = reshape(%492, newshape=[5, 6, 9]) /* ty=Tensor[(5, 6, 9), float64] */;
  %496 = reshape(%493, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), float64] */;
  %497 = @func_3355(%494, %495, %496) /* ty=(Tensor[(5, 6, 9), float64], Tensor[(6, 8, 12), float32], Tensor[(6, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(4, 48), float32]) */;
  %498 = %490.1;
  %499 = %497.0;
  (%487, %498, %499, 3.1391f64 /* ty=float64 */, meta[relay.Constant][19] /* ty=Tensor[(270), float64] */, %var_6104)
}

def @func_5886(%var_5880: Tensor[(2100), uint16]) -> (Tensor[(2, 8, 12), float64], Tensor[(10, 15, 14), bool], Tensor[(2100), uint16]) {
  %500 = @func_1642() /* ty=(Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float64]) */;
  %501 = cast(%var_5880, dtype="uint16") /* ty=Tensor[(2100), uint16] */;
  %502 = cast(%var_5880, dtype="uint16") /* ty=Tensor[(2100), uint16] */;
  %503 = reshape(%501, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), uint16] */;
  %504 = reshape(%502, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), uint16] */;
  %505 = @func_3114(%503, %504) /* ty=(Tensor[(10, 15, 14), bool], Tensor[(3, 12, 2), bool]) */;
  %506 = %500.3;
  %507 = %505.0;
  (%506, %507, %var_5880)
}

def @func_10105() -> (Tensor[(72), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float64]) {
  %508 = @func_2863() /* ty=(Tensor[(72), float64],) */;
  %509 = %508.0;
  %510 = @func_9409() /* ty=Tensor[(72), float64] */;
  %511 = @func_3818() /* ty=Tensor[(2, 8, 12), float64] */;
  (%509, %510, %511)
}

def @func_10941(%var_10884: Tensor[(11, 7, 10), int64]) -> (Tensor[(11, 7, 10), int64], Tensor[(11, 7, 10), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  %512 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 7, 10), int64] */, dtype="int64") /* ty=Tensor[(11, 7, 10), int64] */;
  %513 = shape_of(%var_10884, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%var_10884, dtype="int64") /* ty=Tensor[(11, 7, 10), int64] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %516 = cast(%var_10884, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %517 = @func_3735() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %518 = bitwise_and(%514, %515) /* ty=Tensor[(11, 7, 10), int64] */;
  %519 = sin(%516) /* ty=Tensor[(11, 7, 10), float32] */;
  %520 = %517.0;
  %521 = @func_8217() /* ty=Tensor[(2, 8, 12), float32] */;
  (%518, %519, %520, %521)
}

def @func_2369(%var_2366: Tensor[(1, 8, 7), float64]) -> (Tensor[(1, 8, 7), float64],) {
  %522 = cast(%var_2366, dtype="float64") /* ty=Tensor[(1, 8, 7), float64] */;
  %523 = log2(%522) /* ty=Tensor[(1, 8, 7), float64] */;
  (%523,)
}

def @func_5330() -> (Tensor[(2, 8, 12), float64],) {
  %524 = @func_4725() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %525 = %524.0;
  (%525,)
}

def @func_2286() -> (Tensor[(72), float64],) {
  %526 = @func_1523() /* ty=(Tensor[(72), float64],) */;
  %527 = %526.0;
  (%527,)
}

def @func_8879() -> (Tensor[(2, 8, 12), float64], Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(13, 13, 8), float32]) {
  %528 = @func_6850() /* ty=(Tensor[(13, 13, 8), float64],) */;
  %529 = @func_1642() /* ty=(Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float64]) */;
  %530 = @func_4504() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %531 = @func_3686() /* ty=(Tensor[(13, 13, 8), float64],) */;
  %532 = %531.0;
  %533 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 13, 8), float64] */, dtype="float32") /* ty=Tensor[(13, 13, 8), float32] */;
  %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%532, dtype="float32") /* ty=Tensor[(13, 13, 8), float32] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %537 = @func_7222() /* ty=Tensor[(2, 8, 12), float64] */;
  %538 = %528.0;
  %539 = %529.3;
  %540 = %530.0;
  %541 = floor_mod(%535, %536) /* ty=Tensor[(13, 13, 8), float32] */;
  (%537, %538, %539, %540, %541)
}

def @func_6850() -> (Tensor[(13, 13, 8), float64],) {
  %542 = @func_3686() /* ty=(Tensor[(13, 13, 8), float64],) */;
  %543 = %542.0;
  (%543,)
}

def @func_253() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  %544 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 8, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %545 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 8, 12), float64] */, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %546 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(2, 8, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 8, 12), float64] */, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %549 = asin(%544) /* ty=Tensor[(2, 8, 12), float64] */;
  %550 = add(%547, %548) /* ty=Tensor[(2, 8, 12), float32] */;
  (%549, %550)
}

def @func_3955() -> Tensor[(2, 8, 12), float64] {
  %551 = @func_731() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %551.1
}

def @func_6361() -> (Tensor[(2, 8, 12), float64],) {
  %552 = @func_4651() /* ty=Tensor[(2, 8, 12), float64] */;
  (%552,)
}

def @func_4361() -> (Tensor[(2, 8, 12), float32],) {
  %553 = @func_4321() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
  %554 = %553.1;
  (%554,)
}

def @func_6995() -> (Tensor[(2, 8, 12), float64],) {
  %555 = @func_1349() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %556 = %555.0;
  (%556,)
}

def @func_10554(%var_10404: Tensor[(15, 140), uint16], %var_10484: Tensor[(15, 140), float64]) -> (Tensor[(2, 8, 12), float64], Tensor[(15, 12, 11), float32], Tensor[(77, 9), float32], Tensor[(2, 8, 12), float64], Tensor[(704), float64], Tensor[(72), float64], Tensor[(11, 4, 16), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(15, 140), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(15, 140), bool], Tensor[(1980), float32], Tensor[(2, 8, 12), float64], Tensor[(15, 140), bool]) {
  %557 = @func_2885() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %558 = cast(meta[relay.Constant][24] /* ty=Tensor[(1980), float32] */, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %559 = cast(%var_10404, dtype="uint16") /* ty=Tensor[(15, 140), uint16] */;
  %560 = cast(meta[relay.Constant][25] /* ty=Tensor[(77, 9), float32] */, dtype="float32") /* ty=Tensor[(77, 9), float32] */;
  %561 = reshape(%558, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), float32] */;
  %562 = reshape(%559, newshape=[2100]) /* ty=Tensor[(2100), uint16] */;
  %563 = reshape(%560, newshape=[693]) /* ty=Tensor[(693), float32] */;
  %564 = @func_7261(%561, %562, %563) /* ty=(Tensor[(15, 12, 11), float32], Tensor[(10, 15, 14), bool], Tensor[(2100), uint16], Tensor[(9, 7, 11), float32], Tensor[(693), float32]) */;
  %565 = @func_2407() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %566 = @func_9508() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %567 = cast(meta[relay.Constant][26] /* ty=Tensor[(704), float64] */, dtype="float64") /* ty=Tensor[(704), float64] */;
  %568 = reshape(%567, newshape=[11, 4, 16]) /* ty=Tensor[(11, 4, 16), float64] */;
  %569 = @func_10175(%568) /* ty=(Tensor[(11, 4, 16), float64], Tensor[(11, 4, 16), float32], Tensor[(2, 8, 12), float32]) */;
  %570 = %569.0;
  %571 = cast(%570, dtype="float64") /* ty=Tensor[(11, 4, 16), float64] */;
  %572 = @func_7067() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %573 = cast(%var_10404, dtype="float64") /* ty=Tensor[(15, 140), float64] */;
  %574 = exp(%573) /* ty=Tensor[(15, 140), float64] */;
  %575 = cast(%var_10484, dtype="float64") /* ty=Tensor[(15, 140), float64] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(2), int32] */;
  %577 = cast(%574, dtype="float64") /* ty=Tensor[(15, 140), float64] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %579 = @func_1349() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %580 = cast(%var_10484, dtype="float32") /* ty=Tensor[(15, 140), float32] */;
  %581 = sigmoid(%580) /* ty=Tensor[(15, 140), float32] */;
  %582 = cast(%581, dtype="float32") /* ty=Tensor[(15, 140), float32] */;
  %583 = log2(%582) /* ty=Tensor[(15, 140), float32] */;
  %584 = cast(%583, dtype="float32") /* ty=Tensor[(15, 140), float32] */;
  %585 = sinh(%584) /* ty=Tensor[(15, 140), float32] */;
  %586 = cast(%574, dtype="bool") /* ty=Tensor[(15, 140), bool] */;
  %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(2), int32] */;
  %588 = cast(%585, dtype="bool") /* ty=Tensor[(15, 140), bool] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %590 = cast(meta[relay.Constant][24] /* ty=Tensor[(1980), float32] */, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %591 = @func_1850() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
  %592 = cast(%var_10404, dtype="bool") /* ty=Tensor[(15, 140), bool] */;
  %593 = shape_of(%574, dtype="int32") /* ty=Tensor[(2), int32] */;
  %594 = cast(%574, dtype="bool") /* ty=Tensor[(15, 140), bool] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %596 = less(%594, %595) /* ty=Tensor[(15, 140), bool] */;
  %597 = cast(%596, dtype="bool") /* ty=Tensor[(15, 140), bool] */;
  %598 = shape_of(%585, dtype="int32") /* ty=Tensor[(2), int32] */;
  %599 = cast(%585, dtype="bool") /* ty=Tensor[(15, 140), bool] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %601 = %557.0;
  %602 = %564.0;
  %603 = %565.0;
  %604 = %566.0;
  %605 = cos(%571) /* ty=Tensor[(11, 4, 16), float64] */;
  %606 = %572.0;
  %607 = @func_992() /* ty=Tensor[(2, 8, 12), float32] */;
  %608 = floor_divide(%577, %578) /* ty=Tensor[(15, 140), float64] */;
  %609 = @func_3955() /* ty=Tensor[(2, 8, 12), float64] */;
  %610 = %579.1;
  %611 = less_equal(%588, %589) /* ty=Tensor[(15, 140), bool] */;
  %612 = cosh(%590) /* ty=Tensor[(1980), float32] */;
  %613 = %591.0;
  %614 = greater(%599, %600) /* ty=Tensor[(15, 140), bool] */;
  (%601, %602, meta[relay.Constant][25] /* ty=Tensor[(77, 9), float32] */, %603, meta[relay.Constant][26] /* ty=Tensor[(704), float64] */, %604, %605, %606, %607, %608, %609, %610, %611, %612, %613, %614)
}

def @func_5162() -> (Tensor[(2, 8, 12), float64],) {
  %615 = @func_1461() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %616 = %615.0;
  (%616,)
}

def @func_8518() -> (Tensor[(56), float64], Tensor[(2, 8, 12), float64]) {
  %617 = @func_5073() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(56), float64], Tensor[(72), float64]) */;
  %618 = %617.2;
  %619 = @func_3955() /* ty=Tensor[(2, 8, 12), float64] */;
  (%618, %619)
}

def @func_501() -> (Tensor[(2, 8, 12), float32],) {
  %620 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %621 = %620.1;
  (%621,)
}

def @func_2237() -> (Tensor[(2, 8, 12), float64],) {
  %622 = @func_1850() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
  %623 = %622.1;
  %624 = cast(%623, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %625 = tan(%624) /* ty=Tensor[(2, 8, 12), float64] */;
  (%625,)
}

def @func_1850() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) {
  %626 = @func_1461() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %627 = cast(meta[relay.Constant][27] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %628 = reshape(%627, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %629 = @func_690(%628) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
  %630 = %626.0;
  %631 = %629.0;
  (%630, %631, meta[relay.Constant][27] /* ty=Tensor[(72), float64] */)
}

def @func_6870() -> (Tensor[(2, 8, 12), float64],) {
  %632 = @func_5807() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) */;
  %633 = %632.6;
  (%633,)
}

def @func_1975() -> Tensor[(2, 8, 12), float32] {
  %634 = @func_1461() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %634.1
}

def @func_731() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
  %635 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %636 = %635.2;
  %637 = cast(%636, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %638 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %639 = rsqrt(%637) /* ty=Tensor[(2, 8, 12), float64] */;
  %640 = %638.2;
  (%639, %640)
}

def @func_4462() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float32]) {
  %641 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %642 = @func_2241() /* ty=Tensor[(2, 8, 12), float64] */;
  %643 = cast(%642, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %644 = reshape(%643, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %645 = @func_3867(%644) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(192), float32], Tensor[(72), float64]) */;
  %646 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %647 = %641.0;
  %648 = %645.1;
  %649 = %646.1;
  (%647, %642, %648, %649)
}

def @func_5224() -> (Tensor[(2, 8, 12), float64], Tensor[(72), float64]) {
  %650 = @func_760() /* ty=Tensor[(2, 8, 12), float64] */;
  %651 = @func_4746() /* ty=Tensor[(72), float64] */;
  (%650, %651)
}

def @func_4223() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
  %652 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
  %653 = @func_3629() /* ty=Tensor[(2, 8, 12), float64] */;
  %654 = %652.0;
  (%653, %654)
}

def @func_5022() -> Tensor[(72), float64] {
  %655 = @func_3970() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
  %655.0
}

def @func_4632() -> (Tensor[(2, 8, 12), float32],) {
  %656 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %657 = %656.3;
  (%657,)
}

def @func_6242() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  %658 = @func_4462() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float32]) */;
  %659 = @func_3818() /* ty=Tensor[(2, 8, 12), float64] */;
  %660 = %658.3;
  (%659, %660)
}

def @func_4030(%var_4004: uint8) -> (Tensor[(2, 8, 12), float32], Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float32], Tensor[(5, 3, 1), uint8], uint8, Tensor[(15), uint8], Tensor[(2, 8, 12), uint16], Tensor[(2, 8, 12), float64]) {
  %661 = @func_3686() /* ty=(Tensor[(13, 13, 8), float64],) */;
  %662 = @func_3590() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(7, 8, 11), bool], Tensor[(616, 1), float32]) */;
  %663 = cast(%var_4004, dtype="uint8") /* ty=uint8 */;
  %664 = cast(meta[relay.Constant][28] /* ty=Tensor[(15), uint8] */, dtype="uint8") /* ty=Tensor[(15), uint8] */;
  %665 = @func_992() /* ty=Tensor[(2, 8, 12), float32] */;
  %666 = cast(%665, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %667 = reshape(%663, newshape=[]) /* ty=uint8 */;
  %668 = reshape(%664, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), uint8] */;
  %669 = reshape(%666, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %670 = @func_3270(%667, %668, %669) /* ty=(Tensor[(5, 3, 1), uint8], Tensor[(2, 8, 12), float32], Tensor[(192), float32]) */;
  %671 = %662.0;
  %672 = cast(%671, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %673 = reshape(%672, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
  %674 = @func_1214(%673) /* ty=(Tensor[(2, 8, 12), uint16], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(2, 8, 12), uint64]) */;
  %675 = %661.0;
  %676 = %670.0;
  %677 = %674.0;
  %678 = @func_1582() /* ty=Tensor[(2, 8, 12), float64] */;
  (%665, %675, %671, %676, %var_4004, meta[relay.Constant][28] /* ty=Tensor[(15), uint8] */, %677, %678)
}

def @func_5573(%var_5550: Tensor[(11, 9, 12), float32]) -> Tensor[(11, 9, 12), float32] {
  %679 = cast(%var_5550, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
  %680 = sinh(%679) /* ty=Tensor[(11, 9, 12), float32] */;
  %681 = cast(%680, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
  acosh(%681) /* ty=Tensor[(11, 9, 12), float32] */
}

def @func_6315() -> Tensor[(2, 8, 12), float32] {
  %682 = @func_4632() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %682.0
}

def @func_1018() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
  %683 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %684 = @func_760() /* ty=Tensor[(2, 8, 12), float64] */;
  %685 = %683.0;
  (%684, %685)
}

def @func_11694() -> (Tensor[(2, 8, 12), float64],) {
  %686 = @func_10037() /* ty=Tensor[(2, 8, 12), float64] */;
  (%686,)
}

def @func_3590() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(7, 8, 11), bool], Tensor[(616, 1), float32]) {
  %687 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %688 = cast(meta[relay.Constant][29] /* ty=Tensor[(616, 1), float32] */, dtype="float32") /* ty=Tensor[(616, 1), float32] */;
  %689 = cast(meta[relay.Constant][29] /* ty=Tensor[(616, 1), float32] */, dtype="bool") /* ty=Tensor[(616, 1), bool] */;
  %690 = reshape(%688, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
  %691 = reshape(%689, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), bool] */;
  %692 = @func_908(%690, %691) /* ty=(Tensor[(7, 8, 11), bool],) */;
  %693 = cast(meta[relay.Constant][29] /* ty=Tensor[(616, 1), float32] */, dtype="float32") /* ty=Tensor[(616, 1), float32] */;
  %694 = @func_1326() /* ty=Tensor[(2, 8, 12), float32] */;
  %695 = %687.1;
  %696 = %692.0;
  %697 = asinh(%693) /* ty=Tensor[(616, 1), float32] */;
  (%694, %695, %696, %697)
}

def @func_4683(%var_4676: Tensor[(6, 16, 10), float64]) -> (Tensor[(6, 16, 10), float64],) {
  %698 = cast(%var_4676, dtype="float64") /* ty=Tensor[(6, 16, 10), float64] */;
  %699 = erf(%698) /* ty=Tensor[(6, 16, 10), float64] */;
  (%699,)
}

def @func_5972() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), bool], Tensor[(1, 2100), uint16]) {
  %700 = @func_5224() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(72), float64]) */;
  %701 = @func_4725() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %702 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 2100), uint16] */, dtype="uint16") /* ty=Tensor[(1, 2100), uint16] */;
  %703 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 2100), uint16] */, dtype="uint16") /* ty=Tensor[(1, 2100), uint16] */;
  %704 = reshape(%702, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), uint16] */;
  %705 = reshape(%703, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), uint16] */;
  %706 = @func_3114(%704, %705) /* ty=(Tensor[(10, 15, 14), bool], Tensor[(3, 12, 2), bool]) */;
  %707 = %700.1;
  %708 = %701.0;
  %709 = %706.1;
  (%707, %708, %709, meta[relay.Constant][30] /* ty=Tensor[(1, 2100), uint16] */)
}

def @func_9364() -> Tensor[(2, 8, 12), float32] {
  %710 = @func_1850() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
  %710.1
}

def @func_9360() -> (Tensor[(72), float64], Tensor[(3, 1, 2), float32], bool, Tensor[(6), bool], Tensor[(2, 8, 12), float32]) {
  %711 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
  %712 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %713 = cast(meta[relay.Constant][31] /* ty=Tensor[(6), bool] */, dtype="bool") /* ty=Tensor[(6), bool] */;
  %714 = reshape(%712, newshape=[]) /* ty=bool */;
  %715 = reshape(%713, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), bool] */;
  %716 = @func_8547(%714, %715) /* ty=(Tensor[(3, 1, 2), float32],) */;
  %717 = @func_4808() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) */;
  %718 = %711.2;
  %719 = %716.0;
  %720 = %717.0;
  (%718, %719, False /* ty=bool */, meta[relay.Constant][31] /* ty=Tensor[(6), bool] */, %720)
}

def @func_10018() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  %721 = @func_4550() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(2, 8, 12), float64]) */;
  %722 = @func_8822() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
  %723 = %721.2;
  %724 = %722.1;
  (%723, %724)
}

def @func_4662() -> (Tensor[(2, 8, 12), float64],) {
  %725 = @func_2591() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
  %726 = %725.2;
  %727 = cast(%726, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %728 = atanh(%727) /* ty=Tensor[(2, 8, 12), float64] */;
  (%728,)
}

def @func_10647() -> (Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float64]) {
  %729 = @func_5611() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) */;
  %730 = %729.1;
  %731 = @func_5022() /* ty=Tensor[(72), float64] */;
  %732 = @func_1934() /* ty=Tensor[(2, 8, 12), float64] */;
  (%730, %731, %732)
}

def @func_5373() -> (Tensor[(2, 8, 12), float64],) {
  %733 = @func_1934() /* ty=Tensor[(2, 8, 12), float64] */;
  (%733,)
}

def @func_7580() -> Tensor[(2, 8, 12), float32] {
  %734 = @func_1125() /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(180), uint8], Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
  %734.6
}

def @func_5073() -> (Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(56), float64], Tensor[(72), float64]) {
  %735 = @func_2591() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
  %736 = cast(meta[relay.Constant][32] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %737 = reshape(%736, newshape=[1, 56]) /* ty=Tensor[(1, 56), float64] */;
  %738 = @func_5006(%737) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(1, 56), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
  %739 = @func_2286() /* ty=(Tensor[(72), float64],) */;
  %740 = %735.1;
  %741 = %738.1;
  %742 = %739.0;
  (%740, %741, meta[relay.Constant][32] /* ty=Tensor[(56), float64] */, %742)
}

def @func_7067() -> (Tensor[(2, 8, 12), float64],) {
  %743 = @func_4725() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %744 = %743.0;
  (%744,)
}

def @func_8174() -> (Tensor[(7, 8, 11), bool],) {
  %745 = @func_7293() /* ty=(Tensor[(7, 8, 11), bool],) */;
  %746 = %745.0;
  (%746,)
}

def @func_6429() -> Tensor[(6, 6, 3), bool] {
  @func_5943() /* ty=Tensor[(6, 6, 3), bool] */
}

def @func_1334(%var_1332: Tensor[(180), uint8]) -> (Tensor[(2, 8, 12), float64], Tensor[(3, 10, 6), bool], Tensor[(180), uint8]) {
  %747 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %748 = cast(%var_1332, dtype="uint8") /* ty=Tensor[(180), uint8] */;
  %749 = cast(%var_1332, dtype="uint8") /* ty=Tensor[(180), uint8] */;
  %750 = reshape(%748, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), uint8] */;
  %751 = reshape(%749, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), uint8] */;
  %752 = @func_965(%750, %751) /* ty=(Tensor[(3, 10, 6), bool], Tensor[(72), float64]) */;
  %753 = %747.2;
  %754 = %752.0;
  (%753, %754, %var_1332)
}

def @func_7672(%var_7664: Tensor[(360), float64]) -> (Tensor[(72), float64], Tensor[(10, 6, 6), float64], Tensor[(360), float64], uint8) {
  %755 = @func_1296() /* ty=(Tensor[(72), float64],) */;
  %756 = cast(%var_7664, dtype="float64") /* ty=Tensor[(360), float64] */;
  %757 = cast(meta[relay.Constant][33] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %758 = reshape(%756, newshape=[10, 6, 6]) /* ty=Tensor[(10, 6, 6), float64] */;
  %759 = reshape(%757, newshape=[]) /* ty=uint8 */;
  %760 = @func_6627(%758, %759) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float32], uint8, Tensor[(10, 6, 6), float64]) */;
  %761 = %755.0;
  %762 = %760.4;
  (%761, %762, %var_7664, meta[relay.Constant][33] /* ty=uint8 */)
}

def @func_1255() -> (Tensor[(2, 8, 12), float64],) {
  %763 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %764 = %763.0;
  (%764,)
}

def @func_9184(%var_9162: Tensor[(1, 72), float64]) -> (Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float64], Tensor[(1, 72), float64], Tensor[(192), float32]) {
  %765 = @func_2458() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64]) */;
  %766 = cast(%var_9162, dtype="float64") /* ty=Tensor[(1, 72), float64] */;
  %767 = reshape(%766, newshape=[3, 12, 2]) /* ty=Tensor[(3, 12, 2), float64] */;
  %768 = @func_378(%767) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %769 = @func_5807() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) */;
  %770 = %765.1;
  %771 = %768.1;
  %772 = %769.3;
  (%770, %771, %var_9162, %772)
}

def @func_6740(%var_6735: Tensor[(18, 66), float32]) -> (Tensor[(72), float64], Tensor[(72), float64], Tensor[(11, 9, 12), float32], Tensor[(18, 66), float32]) {
  %773 = @func_2041() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(72), float64]) */;
  %774 = @func_1523() /* ty=(Tensor[(72), float64],) */;
  %775 = cast(%var_6735, dtype="float32") /* ty=Tensor[(18, 66), float32] */;
  %776 = reshape(%775, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), float32] */;
  %777 = %773.2;
  %778 = %774.0;
  %779 = @func_5573(%776) /* ty=Tensor[(11, 9, 12), float32] */;
  (%777, %778, %779, %var_6735)
}

def @func_6947(%var_6933: uint8) -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], uint8, Tensor[(72), float64]) {
  %780 = @func_6870() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %781 = @func_1349() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %782 = cast(%var_6933, dtype="uint8") /* ty=uint8 */;
  %783 = reshape(%782, newshape=[]) /* ty=uint8 */;
  %784 = @func_4030(%783) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float32], Tensor[(5, 3, 1), uint8], uint8, Tensor[(15), uint8], Tensor[(2, 8, 12), uint16], Tensor[(2, 8, 12), float64]) */;
  %785 = %780.0;
  %786 = %781.0;
  %787 = %784.0;
  %788 = @func_6397() /* ty=Tensor[(72), float64] */;
  (%785, %786, %787, %var_6933, %788)
}

def @func_9657() -> (Tensor[(72), float64],) {
  %789 = @func_7783() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64]) */;
  %790 = %789.0;
  (%790,)
}

def @func_9127() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) {
  %791 = @func_1511() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %792 = @func_2148() /* ty=Tensor[(2, 8, 12), float32] */;
  %793 = %791.1;
  (%792, %793)
}

def @func_10990() -> Tensor[(2, 8, 12), float32] {
  %794 = @func_9795() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %794.0
}

def @func_10973() -> (Tensor[(72), float64], Tensor[(72), float64], Tensor[(72), float64]) {
  %795 = @func_9569() /* ty=(Tensor[(72), float64],) */;
  %796 = @func_7783() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64]) */;
  %797 = @func_2518() /* ty=Tensor[(72), float64] */;
  %798 = %795.0;
  %799 = %796.0;
  (%797, %798, %799)
}

def @func_11036() -> Tensor[(2, 8, 12), float32] {
  @func_2148() /* ty=Tensor[(2, 8, 12), float32] */
}

def @func_7222() -> Tensor[(2, 8, 12), float64] {
  %800 = @func_4462() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float32]) */;
  %800.1
}

def @func_2863() -> (Tensor[(72), float64],) {
  %801 = @func_1296() /* ty=(Tensor[(72), float64],) */;
  %802 = %801.0;
  (%802,)
}

def @func_3970() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float32]) {
  %803 = @func_2478() /* ty=(Tensor[(72), float64],) */;
  %804 = %803.0;
  %805 = @func_1975() /* ty=Tensor[(2, 8, 12), float32] */;
  (%804, %805)
}

def @func_1934() -> Tensor[(2, 8, 12), float64] {
  %806 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %806.0
}

def @func_4129(%var_4080: Tensor[(1, 6, 1), float32], %var_4099: Tensor[(9, 6, 11), float32]) -> (Tensor[(9, 6, 11), bool], Tensor[(?, 6, ?), uint16]) {
  %807 = cast(%var_4080, dtype="float32") /* ty=Tensor[(1, 6, 1), float32] */;
  %808 = sin(%807) /* ty=Tensor[(1, 6, 1), float32] */;
  %809 = cast(%var_4080, dtype="int64") /* ty=Tensor[(1, 6, 1), int64] */;
  %810 = shape_of(%808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%808, dtype="int64") /* ty=Tensor[(1, 6, 1), int64] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %813 = bitwise_and(%811, %812) /* ty=Tensor[(?, 6, ?), int64] */;
  %814 = cast(%813, dtype="float64") /* ty=Tensor[(?, 6, ?), float64] */;
  %815 = exp(%814) /* ty=Tensor[(?, 6, ?), float64] */;
  %816 = cast(%815, dtype="float32") /* ty=Tensor[(?, 6, ?), float32] */;
  %817 = shape_of(%808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %818 = cast(%808, dtype="float32") /* ty=Tensor[(1, 6, 1), float32] */;
  %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %820 = floor_divide(%818, %819) /* ty=Tensor[(?, 6, ?), float32] */;
  %821 = cast(%820, dtype="bool") /* ty=Tensor[(?, 6, ?), bool] */;
  %822 = cast(%var_4099, dtype="bool") /* ty=Tensor[(9, 6, 11), bool] */;
  %823 = cast(%813, dtype="uint16") /* ty=Tensor[(?, 6, ?), uint16] */;
  %824 = shape_of(%808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%808, dtype="uint16") /* ty=Tensor[(1, 6, 1), uint16] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %827 = less(%821, %822) /* ty=Tensor[(9, 6, 11), bool] */;
  %828 = maximum(%825, %826) /* ty=Tensor[(?, 6, ?), uint16] */;
  (%827, %828)
}

def @func_9608(%var_9572: Tensor[(15, 13, 9), float32]) -> (Tensor[(15, 13, 9), float32], Tensor[(72), float64]) {
  %829 = cast(%var_9572, dtype="float32") /* ty=Tensor[(15, 13, 9), float32] */;
  %830 = @func_8822() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
  %831 = tan(%829) /* ty=Tensor[(15, 13, 9), float32] */;
  %832 = %830.0;
  (%831, %832)
}

def @func_8822() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float32]) {
  %833 = @func_6780() /* ty=(Tensor[(72), float64],) */;
  %834 = %833.0;
  %835 = @func_1975() /* ty=Tensor[(2, 8, 12), float32] */;
  (%834, %835)
}

def @func_4651() -> Tensor[(2, 8, 12), float64] {
  @func_760() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_3355(%var_3321: float64, %var_3322: Tensor[(5, 6, 9), float64], %var_3337: Tensor[(6, 8, 12), float64]) -> (Tensor[(5, 6, 9), float64], Tensor[(6, 8, 12), float32], Tensor[(6, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(4, 48), float32]) {
  %836 = cast(%var_3321, dtype="float64") /* ty=float64 */;
  %837 = cast(%var_3322, dtype="float64") /* ty=Tensor[(5, 6, 9), float64] */;
  %838 = cast(%var_3321, dtype="float32") /* ty=float32 */;
  %839 = cast(%var_3337, dtype="float32") /* ty=Tensor[(6, 8, 12), float32] */;
  %840 = cast(%var_3337, dtype="float64") /* ty=Tensor[(6, 8, 12), float64] */;
  %841 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 48), float32] */, dtype="float32") /* ty=Tensor[(4, 48), float32] */;
  %842 = reshape(%841, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float32] */;
  %843 = @func_666(%842) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
  %844 = divide(%836, %837) /* ty=Tensor[(5, 6, 9), float64] */;
  %845 = mod(%838, %839) /* ty=Tensor[(6, 8, 12), float32] */;
  %846 = atanh(%840) /* ty=Tensor[(6, 8, 12), float64] */;
  %847 = %843.0;
  (%844, %845, %846, %847, meta[relay.Constant][34] /* ty=Tensor[(4, 48), float32] */)
}

def @func_3114(%var_3034: Tensor[(10, 15, 14), uint16], %var_3035: Tensor[(10, 15, 14), uint16]) -> (Tensor[(10, 15, 14), bool], Tensor[(3, 12, 2), bool]) {
  %848 = cast(%var_3035, dtype="bool") /* ty=Tensor[(10, 15, 14), bool] */;
  %849 = shape_of(%var_3034, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%var_3034, dtype="bool") /* ty=Tensor[(10, 15, 14), bool] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %852 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
  %853 = %852.1;
  %854 = cast(%853, dtype="float64") /* ty=Tensor[(3, 12, 2), float64] */;
  %855 = log10(%854) /* ty=Tensor[(3, 12, 2), float64] */;
  %856 = cast(%855, dtype="float64") /* ty=Tensor[(3, 12, 2), float64] */;
  %857 = sqrt(%856) /* ty=Tensor[(3, 12, 2), float64] */;
  %858 = cast(%857, dtype="float32") /* ty=Tensor[(3, 12, 2), float32] */;
  %859 = cosh(%858) /* ty=Tensor[(3, 12, 2), float32] */;
  %860 = cast(%855, dtype="bool") /* ty=Tensor[(3, 12, 2), bool] */;
  %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(3), int32] */;
  %862 = cast(%859, dtype="bool") /* ty=Tensor[(3, 12, 2), bool] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %864 = greater_equal(%850, %851) /* ty=Tensor[(10, 15, 14), bool] */;
  %865 = equal(%862, %863) /* ty=Tensor[(3, 12, 2), bool] */;
  (%864, %865)
}

def @func_5807() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) {
  %866 = @func_3650() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %867 = @func_2885() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %868 = @func_4662() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %869 = %866.0;
  %870 = @func_760() /* ty=Tensor[(2, 8, 12), float64] */;
  %871 = %867.0;
  %872 = @func_5236() /* ty=Tensor[(192), float32] */;
  %873 = %868.0;
  %874 = @func_1326() /* ty=Tensor[(2, 8, 12), float32] */;
  %875 = @func_2241() /* ty=Tensor[(2, 8, 12), float64] */;
  (%869, %870, %871, %872, %873, %874, %875)
}

def @func_8411() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(56), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(11, 9, 12), int32], Tensor[(72), float64], Tensor[(693), float64]) {
  %876 = @func_4321() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
  %877 = @func_5073() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(56), float64], Tensor[(72), float64]) */;
  %878 = cast(meta[relay.Constant][35] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %879 = reshape(%878, newshape=[1, 56]) /* ty=Tensor[(1, 56), float64] */;
  %880 = @func_5006(%879) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(1, 56), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
  %881 = cast(meta[relay.Constant][36] /* ty=Tensor[(693), float32] */, dtype="float32") /* ty=Tensor[(693), float32] */;
  %882 = reshape(%881, newshape=[9, 7, 11]) /* ty=Tensor[(9, 7, 11), float32] */;
  %883 = @func_4487(%882) /* ty=(Tensor[(72), float64], Tensor[(9, 7, 11), float32]) */;
  %884 = @func_5373() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %885 = cast(meta[relay.Constant][37] /* ty=Tensor[(1188), float32] */, dtype="float32") /* ty=Tensor[(1188), float32] */;
  %886 = reshape(%885, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), float32] */;
  %887 = @func_5573(%886) /* ty=Tensor[(11, 9, 12), float32] */;
  %888 = cast(meta[relay.Constant][37] /* ty=Tensor[(1188), float32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
  %889 = shape_of(%887, dtype="int32") /* ty=Tensor[(3), int32] */;
  %890 = cast(%887, dtype="int32") /* ty=Tensor[(11, 9, 12), int32] */;
  %891 = dyn.reshape(%888, %889, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %892 = cast(meta[relay.Constant][36] /* ty=Tensor[(693), float32] */, dtype="float32") /* ty=Tensor[(693), float32] */;
  %893 = reshape(%892, newshape=[9, 7, 11]) /* ty=Tensor[(9, 7, 11), float32] */;
  %894 = @func_4487(%893) /* ty=(Tensor[(72), float64], Tensor[(9, 7, 11), float32]) */;
  %895 = cast(meta[relay.Constant][36] /* ty=Tensor[(693), float32] */, dtype="float64") /* ty=Tensor[(693), float64] */;
  %896 = %876.1;
  %897 = %877.0;
  %898 = %880.1;
  %899 = %883.0;
  %900 = %884.0;
  %901 = logical_xor(%890, %891) /* ty=Tensor[(11, 9, 12), int32] */;
  %902 = %894.0;
  %903 = sinh(%895) /* ty=Tensor[(693), float64] */;
  (%896, %897, %898, meta[relay.Constant][35] /* ty=Tensor[(56), float64] */, %899, %900, %901, %902, %903)
}

def @func_8276() -> (Tensor[(2, 8, 12), float64], Tensor[(13, 6, 14), uint8], Tensor[(1092), uint8], Tensor[(2, 8, 12), float64]) {
  %904 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %905 = cast(meta[relay.Constant][38] /* ty=Tensor[(1092), uint8] */, dtype="uint8") /* ty=Tensor[(1092), uint8] */;
  %906 = reshape(%905, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), uint8] */;
  %907 = @func_4662() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %908 = %904.0;
  %909 = @func_6837(%906) /* ty=Tensor[(13, 6, 14), uint8] */;
  %910 = %907.0;
  (%908, %909, meta[relay.Constant][38] /* ty=Tensor[(1092), uint8] */, %910)
}

def @func_10133() -> (Tensor[(2, 8, 12), float64], Tensor[(16, 16, 9), uint16], Tensor[(2304), uint16]) {
  %911 = @func_5162() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %912 = cast(meta[relay.Constant][39] /* ty=Tensor[(2304), uint16] */, dtype="uint16") /* ty=Tensor[(2304), uint16] */;
  %913 = cast(meta[relay.Constant][39] /* ty=Tensor[(2304), uint16] */, dtype="uint16") /* ty=Tensor[(2304), uint16] */;
  %914 = reshape(%912, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), uint16] */;
  %915 = reshape(%913, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), uint16] */;
  %916 = @func_5656(%914, %915) /* ty=(Tensor[(16, 16, 9), uint16],) */;
  %917 = %911.0;
  %918 = %916.0;
  (%917, %918, meta[relay.Constant][39] /* ty=Tensor[(2304), uint16] */)
}

def @func_9841(%var_9825: Tensor[(5, 3, 14), float64], %var_9826: Tensor[(5, 3, 14), float64], %var_9838: uint8) -> (Tensor[(5, 3, 14), float64], Tensor[(5, 3, 14), float32], Tensor[(2, 8, 12), float32], Tensor[(360), float64], uint8) {
  %919 = cast(%var_9826, dtype="float64") /* ty=Tensor[(5, 3, 14), float64] */;
  %920 = shape_of(%var_9825, dtype="int32") /* ty=Tensor[(3), int32] */;
  %921 = cast(%var_9825, dtype="float64") /* ty=Tensor[(5, 3, 14), float64] */;
  %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %923 = cast(%var_9825, dtype="float32") /* ty=Tensor[(5, 3, 14), float32] */;
  %924 = cast(meta[relay.Constant][40] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %925 = cast(%var_9838, dtype="uint8") /* ty=uint8 */;
  %926 = reshape(%924, newshape=[10, 6, 6]) /* ty=Tensor[(10, 6, 6), float64] */;
  %927 = reshape(%925, newshape=[]) /* ty=uint8 */;
  %928 = @func_6627(%926, %927) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float32], uint8, Tensor[(10, 6, 6), float64]) */;
  %929 = divide(%921, %922) /* ty=Tensor[(5, 3, 14), float64] */;
  %930 = erf(%923) /* ty=Tensor[(5, 3, 14), float32] */;
  %931 = %928.2;
  (%929, %930, %931, meta[relay.Constant][40] /* ty=Tensor[(360), float64] */, %var_9838)
}

def @func_908(%var_872: Tensor[(7, 8, 11), float32], %var_899: Tensor[(7, 8, 11), bool]) -> (Tensor[(7, 8, 11), bool],) {
  %932 = cast(%var_872, dtype="float32") /* ty=Tensor[(7, 8, 11), float32] */;
  %933 = log10(%932) /* ty=Tensor[(7, 8, 11), float32] */;
  %934 = cast(%var_872, dtype="bool") /* ty=Tensor[(7, 8, 11), bool] */;
  %935 = shape_of(%933, dtype="int32") /* ty=Tensor[(3), int32] */;
  %936 = cast(%933, dtype="bool") /* ty=Tensor[(7, 8, 11), bool] */;
  %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %938 = logical_or(%936, %937) /* ty=Tensor[(7, 8, 11), bool] */;
  %939 = cast(%var_899, dtype="bool") /* ty=Tensor[(7, 8, 11), bool] */;
  %940 = shape_of(%938, dtype="int32") /* ty=Tensor[(3), int32] */;
  %941 = cast(%938, dtype="bool") /* ty=Tensor[(7, 8, 11), bool] */;
  %942 = dyn.reshape(%939, %940, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %943 = not_equal(%941, %942) /* ty=Tensor[(7, 8, 11), bool] */;
  (%943,)
}

def @func_9885() -> (Tensor[(72), float64], Tensor[(72), float64]) {
  %944 = @func_8411() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(56), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(11, 9, 12), int32], Tensor[(72), float64], Tensor[(693), float64]) */;
  %945 = @func_7783() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64]) */;
  %946 = %944.4;
  %947 = %945.0;
  (%946, %947)
}

def @func_10374() -> (Tensor[(3, 12, 2), bool],) {
  %948 = @func_6767() /* ty=Tensor[(3, 12, 2), bool] */;
  (%948,)
}

def @func_4487(%var_4477: Tensor[(9, 7, 11), float32]) -> (Tensor[(72), float64], Tensor[(9, 7, 11), float32]) {
  %949 = @func_1523() /* ty=(Tensor[(72), float64],) */;
  %950 = cast(%var_4477, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
  %951 = cosh(%950) /* ty=Tensor[(9, 7, 11), float32] */;
  %952 = cast(%951, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
  %953 = shape_of(%var_4477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %954 = cast(%var_4477, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
  %955 = dyn.reshape(%952, %953, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %956 = %949.0;
  %957 = floor_mod(%954, %955) /* ty=Tensor[(9, 7, 11), float32] */;
  (%956, %957)
}

def @func_10727() -> Tensor[(2, 8, 12), float64] {
  @func_10706() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_11615() -> (Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(72), float64], Tensor[(72), float64]) {
  %958 = @func_9885() /* ty=(Tensor[(72), float64], Tensor[(72), float64]) */;
  %959 = @func_9569() /* ty=(Tensor[(72), float64],) */;
  %960 = @func_9569() /* ty=(Tensor[(72), float64],) */;
  %961 = @func_3215() /* ty=Tensor[(2, 8, 12), float64] */;
  %962 = %958.1;
  %963 = @func_1326() /* ty=Tensor[(2, 8, 12), float32] */;
  %964 = @func_7814() /* ty=Tensor[(72), float64] */;
  %965 = %959.0;
  %966 = %960.0;
  (%961, %962, %963, %964, %965, %966)
}

def @func_8771(%var_8759: Tensor[(2100), uint16]) -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2100), uint16]) {
  %967 = @func_5224() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(72), float64]) */;
  %968 = %967.0;
  %969 = cast(%968, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %970 = reshape(%969, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float32] */;
  %971 = @func_666(%970) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
  %972 = cast(%var_8759, dtype="uint16") /* ty=Tensor[(2100), uint16] */;
  %973 = reshape(%972, newshape=[2100]) /* ty=Tensor[(2100), uint16] */;
  %974 = @func_4160(%973) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(10, 15, 14), bool], Tensor[(2100), uint16]) */;
  %975 = @func_3955() /* ty=Tensor[(2, 8, 12), float64] */;
  %976 = @func_6315() /* ty=Tensor[(2, 8, 12), float32] */;
  %977 = %971.6;
  %978 = @func_760() /* ty=Tensor[(2, 8, 12), float64] */;
  %979 = %974.0;
  (%975, %968, %976, %977, %978, %979, %var_8759)
}

def @func_4321() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float32]) {
  %980 = @func_3970() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
  %981 = %980.0;
  %982 = @func_1975() /* ty=Tensor[(2, 8, 12), float32] */;
  (%981, %982)
}

def @func_4712() -> (Tensor[(2, 8, 12), float64],) {
  %983 = @func_4651() /* ty=Tensor[(2, 8, 12), float64] */;
  (%983,)
}

def @func_6780() -> (Tensor[(72), float64],) {
  %984 = @func_1523() /* ty=(Tensor[(72), float64],) */;
  %985 = %984.0;
  (%985,)
}

def @func_378(%var_347: Tensor[(3, 12, 2), float64]) -> (Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  %986 = cast(%var_347, dtype="float64") /* ty=Tensor[(3, 12, 2), float64] */;
  %987 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %988 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %989 = atanh(%986) /* ty=Tensor[(3, 12, 2), float64] */;
  %990 = %987.2;
  %991 = %988.3;
  (%989, %990, %991)
}

def @func_1461() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  %992 = @func_731() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %993 = @func_1349() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %994 = %993.1;
  %995 = cast(%994, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %996 = %992.1;
  %997 = cosh(%995) /* ty=Tensor[(2, 8, 12), float32] */;
  (%996, %997)
}

def @func_4725() -> (Tensor[(2, 8, 12), float64],) {
  %998 = @func_3818() /* ty=Tensor[(2, 8, 12), float64] */;
  (%998,)
}

def @func_3686() -> (Tensor[(13, 13, 8), float64],) {
  %999 = @func_1642() /* ty=(Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float64]) */;
  %1000 = %999.0;
  (%1000,)
}

def @func_10366() -> Tensor[(13, 13, 8), float64] {
  %1001 = @func_6850() /* ty=(Tensor[(13, 13, 8), float64],) */;
  %1001.0
}

def @func_8998(%var_8983: Tensor[(12, 48), float64]) -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(72), float32], Tensor[(2, 8, 12), float32], Tensor[(5, 6, 9), float64], float64, Tensor[(12, 48), float64], Tensor[(270), float32]) {
  %1002 = @func_7814() /* ty=Tensor[(72), float64] */;
  %1003 = cast(%1002, dtype="float32") /* ty=Tensor[(72), float32] */;
  %1004 = @func_2041() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(72), float64]) */;
  %1005 = cast(3.97837f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1006 = cast(meta[relay.Constant][41] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %1007 = cast(%var_8983, dtype="float64") /* ty=Tensor[(12, 48), float64] */;
  %1008 = reshape(%1005, newshape=[]) /* ty=float64 */;
  %1009 = reshape(%1006, newshape=[1, 270]) /* ty=Tensor[(1, 270), float64] */;
  %1010 = reshape(%1007, newshape=[576]) /* ty=Tensor[(576), float64] */;
  %1011 = @func_4281(%1008, %1009, %1010) /* ty=(Tensor[(5, 6, 9), float64], Tensor[(576), float64], Tensor[(2, 8, 12), float32], Tensor[(1, 270), bool]) */;
  %1012 = cast(meta[relay.Constant][41] /* ty=Tensor[(270), float64] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %1013 = @func_3629() /* ty=Tensor[(2, 8, 12), float64] */;
  %1014 = @func_7835() /* ty=Tensor[(2, 8, 12), float64] */;
  %1015 = rsqrt(%1003) /* ty=Tensor[(72), float32] */;
  %1016 = %1004.0;
  %1017 = %1011.0;
  %1018 = sinh(%1012) /* ty=Tensor[(270), float32] */;
  (%1013, %1014, %1015, %1016, %1017, 3.97837f64 /* ty=float64 */, %var_8983, %1018)
}

def @func_4160(%var_4154: Tensor[(2100), uint16]) -> (Tensor[(2, 8, 12), float64], Tensor[(10, 15, 14), bool], Tensor[(2100), uint16]) {
  %1019 = @func_1349() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %1020 = cast(%var_4154, dtype="uint16") /* ty=Tensor[(2100), uint16] */;
  %1021 = cast(%var_4154, dtype="uint16") /* ty=Tensor[(2100), uint16] */;
  %1022 = reshape(%1020, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), uint16] */;
  %1023 = reshape(%1021, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), uint16] */;
  %1024 = @func_3114(%1022, %1023) /* ty=(Tensor[(10, 15, 14), bool], Tensor[(3, 12, 2), bool]) */;
  %1025 = %1019.1;
  %1026 = %1024.0;
  (%1025, %1026, %var_4154)
}

def @func_7792() -> Tensor[(72), float64] {
  %1027 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
  %1027.2
}

def @func_6627(%var_6584: Tensor[(10, 6, 6), float64], %var_6612: uint8) -> (Tensor[(3, 12, 2), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float32], uint8, Tensor[(10, 6, 6), float64]) {
  %1028 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
  %1029 = @func_5972() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), bool], Tensor[(1, 2100), uint16]) */;
  %1030 = cast(%var_6612, dtype="uint8") /* ty=uint8 */;
  %1031 = reshape(%1030, newshape=[]) /* ty=uint8 */;
  %1032 = @func_4030(%1031) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float32], Tensor[(5, 3, 1), uint8], uint8, Tensor[(15), uint8], Tensor[(2, 8, 12), uint16], Tensor[(2, 8, 12), float64]) */;
  %1033 = cast(%var_6584, dtype="float64") /* ty=Tensor[(10, 6, 6), float64] */;
  %1034 = atan(%1033) /* ty=Tensor[(10, 6, 6), float64] */;
  %1035 = cast(%1034, dtype="float64") /* ty=Tensor[(10, 6, 6), float64] */;
  %1036 = %1028.1;
  %1037 = %1029.0;
  %1038 = %1032.2;
  %1039 = sin(%1035) /* ty=Tensor[(10, 6, 6), float64] */;
  (%1036, %1037, %1038, %var_6612, %1039)
}

def @func_2407() -> (Tensor[(2, 8, 12), float64],) {
  %1040 = @func_1850() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
  %1041 = %1040.0;
  (%1041,)
}

def @func_4855() -> (Tensor[(192), float32], Tensor[(72), float64]) {
  %1042 = @func_4462() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float32]) */;
  %1043 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
  %1044 = %1042.2;
  %1045 = %1043.2;
  (%1044, %1045)
}

def @func_690(%var_685: Tensor[(72), float64]) -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) {
  %1046 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %1047 = %1046.1;
  %1048 = cast(%1047, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %1049 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %1050 = cast(%var_685, dtype="float64") /* ty=Tensor[(72), float64] */;
  %1051 = reshape(%1050, newshape=[3, 12, 2]) /* ty=Tensor[(3, 12, 2), float64] */;
  %1052 = @func_378(%1051) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %1053 = sin(%1048) /* ty=Tensor[(2, 8, 12), float32] */;
  %1054 = %1049.2;
  %1055 = %1052.2;
  (%1053, %1054, %1055, %var_685)
}

def @func_1349() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
  %1056 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %1057 = @func_1255() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %1058 = %1056.1;
  %1059 = %1057.0;
  (%1058, %1059)
}

def @func_1642() -> (Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float64]) {
  %1060 = cast(meta[relay.Constant][42] /* ty=Tensor[(13, 13, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 13, 8), float64] */;
  %1061 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
  %1062 = %1061.0;
  %1063 = cast(%1062, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %1064 = reshape(%1063, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
  %1065 = @func_1214(%1064) /* ty=(Tensor[(2, 8, 12), uint16], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(2, 8, 12), uint64]) */;
  %1066 = sin(%1060) /* ty=Tensor[(13, 13, 8), float64] */;
  %1067 = %1065.4;
  %1068 = @func_1582() /* ty=Tensor[(2, 8, 12), float64] */;
  (%1066, %1062, %1067, %1068)
}

def @func_2241() -> Tensor[(2, 8, 12), float64] {
  %1069 = @func_731() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %1069.0
}

def @func_1125() -> (Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(180), uint8], Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) {
  %1070 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
  %1071 = %1070.1;
  %1072 = cast(%1071, dtype="float64") /* ty=Tensor[(3, 12, 2), float64] */;
  %1073 = reshape(%1072, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %1074 = @func_690(%1073) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
  %1075 = cast(meta[relay.Constant][43] /* ty=Tensor[(180), uint8] */, dtype="uint8") /* ty=Tensor[(180), uint8] */;
  %1076 = cast(meta[relay.Constant][43] /* ty=Tensor[(180), uint8] */, dtype="uint8") /* ty=Tensor[(180), uint8] */;
  %1077 = reshape(%1075, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), uint8] */;
  %1078 = reshape(%1076, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), uint8] */;
  %1079 = @func_965(%1077, %1078) /* ty=(Tensor[(3, 10, 6), bool], Tensor[(72), float64]) */;
  %1080 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %1081 = %1080.1;
  %1082 = cast(%1081, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %1083 = exp(%1082) /* ty=Tensor[(2, 8, 12), float32] */;
  %1084 = cast(%1083, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %1085 = log10(%1084) /* ty=Tensor[(2, 8, 12), float64] */;
  %1086 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %1087 = %1086.0;
  %1088 = cast(%1087, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %1089 = shape_of(%1085, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1090 = cast(%1085, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %1091 = dyn.reshape(%1088, %1089, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1092 = cast(%1083, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %1093 = reshape(%1092, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float32] */;
  %1094 = @func_666(%1093) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
  %1095 = %1079.1;
  %1096 = cast(%1095, dtype="float64") /* ty=Tensor[(72), float64] */;
  %1097 = reshape(%1096, newshape=[3, 12, 2]) /* ty=Tensor[(3, 12, 2), float64] */;
  %1098 = @func_378(%1097) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %1099 = %1074.2;
  %1100 = equal(%1090, %1091) /* ty=Tensor[(2, 8, 12), bool] */;
  %1101 = %1094.1;
  %1102 = %1098.2;
  %1103 = @func_992() /* ty=Tensor[(2, 8, 12), float32] */;
  (%1071, %1099, %1095, meta[relay.Constant][43] /* ty=Tensor[(180), uint8] */, %1100, %1101, %1102, %1103)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_9001(%var_8999: Tensor[(12, 48), float64]) -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(72), float32], Tensor[(2, 8, 12), float32], Tensor[(5, 6, 9), float64], float64, Tensor[(12, 48), float64], Tensor[(270), float32]) {
  @func_8998(%var_8999) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(72), float32], Tensor[(2, 8, 12), float32], Tensor[(5, 6, 9), float64], float64, Tensor[(12, 48), float64], Tensor[(270), float32]) */
}

def @func_6049(%var_6048: Tensor[(2, 28), float64]) -> (Tensor[(72), float64], Tensor[(1, 8, 7), float64], Tensor[(2, 28), float64]) {
  %6 = fn (%var_6037: Tensor[(2, 28), float64]) -> (Tensor[(72), float64], Tensor[(1, 8, 7), float64], Tensor[(2, 28), float64]) {
    %0 = @func_4855() /* ty=(Tensor[(192), float32], Tensor[(72), float64]) */;
    %1 = cast(%var_6037, dtype="float64") /* ty=Tensor[(2, 28), float64] */;
    %2 = reshape(%1, newshape=[1, 8, 7]) /* ty=Tensor[(1, 8, 7), float64] */;
    %3 = @func_2369(%2) /* ty=(Tensor[(1, 8, 7), float64],) */;
    %4 = %0.1;
    %5 = %3.0;
    (%4, %5, %var_6037)
  };
  %6(%var_6048) /* ty=(Tensor[(72), float64], Tensor[(1, 8, 7), float64], Tensor[(2, 28), float64]) */
}

def @func_10943(%var_10942: Tensor[(11, 7, 10), int64]) -> (Tensor[(11, 7, 10), int64], Tensor[(11, 7, 10), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  %17 = fn (%var_10884: Tensor[(11, 7, 10), int64]) -> (Tensor[(11, 7, 10), int64], Tensor[(11, 7, 10), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
    %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 7, 10), int64] */, dtype="int64") /* ty=Tensor[(11, 7, 10), int64] */;
    %8 = shape_of(%var_10884, dtype="int32") /* ty=Tensor[(3), int32] */;
    %9 = cast(%var_10884, dtype="int64") /* ty=Tensor[(11, 7, 10), int64] */;
    %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %11 = cast(%var_10884, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
    %12 = @func_3735() /* ty=(Tensor[(2, 8, 12), float64],) */;
    %13 = bitwise_and(%9, %10) /* ty=Tensor[(11, 7, 10), int64] */;
    %14 = sin(%11) /* ty=Tensor[(11, 7, 10), float32] */;
    %15 = %12.0;
    %16 = @func_8217() /* ty=Tensor[(2, 8, 12), float32] */;
    (%13, %14, %15, %16)
  };
  %17(%var_10942) /* ty=(Tensor[(11, 7, 10), int64], Tensor[(11, 7, 10), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */
}

def @func_5611() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) {
  %18 = @func_4504() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %19 = %18.0;
  %20 = @func_2241() /* ty=Tensor[(2, 8, 12), float64] */;
  (%19, %20)
}

def @func_968(%var_966: Tensor[(3, 10, 6), uint8], %var_967: Tensor[(3, 10, 6), uint8]) -> (Tensor[(3, 10, 6), bool], Tensor[(72), float64]) {
  %28 = fn (%var_953: Tensor[(3, 10, 6), uint8], %var_954: Tensor[(3, 10, 6), uint8]) -> (Tensor[(3, 10, 6), bool], Tensor[(72), float64]) {
    %21 = cast(%var_954, dtype="bool") /* ty=Tensor[(3, 10, 6), bool] */;
    %22 = shape_of(%var_953, dtype="int32") /* ty=Tensor[(3), int32] */;
    %23 = cast(%var_953, dtype="bool") /* ty=Tensor[(3, 10, 6), bool] */;
    %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %25 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
    %26 = less_equal(%23, %24) /* ty=Tensor[(3, 10, 6), bool] */;
    %27 = %25.2;
    (%26, %27)
  };
  %28(%var_966, %var_967) /* ty=(Tensor[(3, 10, 6), bool], Tensor[(72), float64]) */
}

def @func_4224() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
  %32 = fn () -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
    %29 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
    %30 = @func_3629() /* ty=Tensor[(2, 8, 12), float64] */;
    %31 = %29.0;
    (%30, %31)
  };
  %32() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */
}

def @func_2814(%var_2812: Tensor[(616), float32]) -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(180), uint8], Tensor[(2, 8, 12), bool], Tensor[(72), float64], Tensor[(7, 8, 11), bool], Tensor[(616), float32], Tensor[(7, 8, 11), bool], Tensor[(72), float64], Tensor[(72), float64]) {
  @func_2811(%var_2812) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(180), uint8], Tensor[(2, 8, 12), bool], Tensor[(72), float64], Tensor[(7, 8, 11), bool], Tensor[(616), float32], Tensor[(7, 8, 11), bool], Tensor[(72), float64], Tensor[(72), float64]) */
}

def @func_2241() -> Tensor[(2, 8, 12), float64] {
  %33 = @func_731() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %33.0
}

def @func_4464() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float32]) {
  @func_4462() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float32]) */
}

def @func_1214(%var_1148: Tensor[(2, 8, 12), float64]) -> (Tensor[(2, 8, 12), uint16], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(2, 8, 12), uint64]) {
  %34 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %35 = %34.0;
  %36 = cast(%var_1148, dtype="uint16") /* ty=Tensor[(2, 8, 12), uint16] */;
  %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%35, dtype="uint16") /* ty=Tensor[(2, 8, 12), uint16] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %40 = cast(%var_1148, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %41 = reshape(%40, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float32] */;
  %42 = @func_666(%41) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
  %43 = cast(meta[relay.Constant][1] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %44 = reshape(%43, newshape=[3, 12, 2]) /* ty=Tensor[(3, 12, 2), float64] */;
  %45 = @func_378(%44) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %46 = cast(%35, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %47 = reshape(%46, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
  %48 = @func_460(%47) /* ty=(Tensor[(2, 8, 12), uint64],) */;
  %49 = right_shift(%38, %39) /* ty=Tensor[(2, 8, 12), uint16] */;
  %50 = %42.8;
  %51 = %45.1;
  %52 = %48.0;
  (%49, %50, %51, meta[relay.Constant][1] /* ty=Tensor[(72), float64] */, %52)
}

def @func_5373() -> (Tensor[(2, 8, 12), float64],) {
  %53 = @func_1934() /* ty=Tensor[(2, 8, 12), float64] */;
  (%53,)
}

def @func_10107() -> (Tensor[(72), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float64]) {
  @func_10105() /* ty=(Tensor[(72), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float64]) */
}

def @func_2593() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) {
  @func_2591() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */
}

def @func_4634() -> (Tensor[(2, 8, 12), float32],) {
  @func_4632() /* ty=(Tensor[(2, 8, 12), float32],) */
}

def @func_10368() -> Tensor[(13, 13, 8), float64] {
  @func_10366() /* ty=Tensor[(13, 13, 8), float64] */
}

def @func_1463() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  @func_1461() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */
}

def @func_7816() -> Tensor[(72), float64] {
  @func_7814() /* ty=Tensor[(72), float64] */
}

def @func_3867(%var_3835: Tensor[(192), float32]) -> (Tensor[(2, 8, 12), float32], Tensor[(192), float32], Tensor[(72), float64]) {
  %54 = cast(%var_3835, dtype="float32") /* ty=Tensor[(192), float32] */;
  %55 = reshape(%54, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float32] */;
  %56 = @func_666(%55) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
  %57 = @func_2181() /* ty=(Tensor[(72), float64],) */;
  %58 = %57.0;
  %59 = cast(%58, dtype="float64") /* ty=Tensor[(72), float64] */;
  %60 = %56.3;
  %61 = asinh(%59) /* ty=Tensor[(72), float64] */;
  (%60, %var_3835, %61)
}

def @func_7387() -> Tensor[(72), float64] {
  %62 = fn () -> Tensor[(72), float64] {
    @func_7169() /* ty=Tensor[(72), float64] */
  };
  %62() /* ty=Tensor[(72), float64] */
}

def @func_4361() -> (Tensor[(2, 8, 12), float32],) {
  %63 = @func_4321() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
  %64 = %63.1;
  (%64,)
}

def @func_11174(%var_11172: Tensor[(12, 14, 1), uint32]) -> (Tensor[(12, 14, 14), bool],) {
  @func_11171(%var_11172) /* ty=(Tensor[(12, 14, 14), bool],) */
}

def @func_7581() -> Tensor[(2, 8, 12), float32] {
  %66 = fn () -> Tensor[(2, 8, 12), float32] {
    %65 = @func_1125() /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(180), uint8], Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
    %65.6
  };
  %66() /* ty=Tensor[(2, 8, 12), float32] */
}

def @func_10727() -> Tensor[(2, 8, 12), float64] {
  @func_10706() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_8881() -> (Tensor[(2, 8, 12), float64], Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(13, 13, 8), float32]) {
  @func_8879() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(13, 13, 8), float32]) */
}

def @func_2459() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64]) {
  %73 = fn () -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64]) {
    %67 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %68 = %67.1;
    %69 = cast(%68, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
    %70 = reshape(%69, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
    %71 = @func_460(%70) /* ty=(Tensor[(2, 8, 12), uint64],) */;
    %72 = %71.0;
    (%68, %72)
  };
  %73() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64]) */
}

def @func_5659(%var_5657: Tensor[(16, 16, 9), uint16], %var_5658: Tensor[(16, 16, 9), uint16]) -> (Tensor[(16, 16, 9), uint16],) {
  %79 = fn (%var_5642: Tensor[(16, 16, 9), uint16], %var_5643: Tensor[(16, 16, 9), uint16]) -> (Tensor[(16, 16, 9), uint16],) {
    %74 = cast(%var_5643, dtype="uint16") /* ty=Tensor[(16, 16, 9), uint16] */;
    %75 = shape_of(%var_5642, dtype="int32") /* ty=Tensor[(3), int32] */;
    %76 = cast(%var_5642, dtype="uint16") /* ty=Tensor[(16, 16, 9), uint16] */;
    %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %78 = subtract(%76, %77) /* ty=Tensor[(16, 16, 9), uint16] */;
    (%78,)
  };
  %79(%var_5657, %var_5658) /* ty=(Tensor[(16, 16, 9), uint16],) */
}

def @func_6780() -> (Tensor[(72), float64],) {
  %80 = @func_1523() /* ty=(Tensor[(72), float64],) */;
  %81 = %80.0;
  (%81,)
}

def @func_10105() -> (Tensor[(72), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float64]) {
  %82 = @func_2863() /* ty=(Tensor[(72), float64],) */;
  %83 = %82.0;
  %84 = @func_9409() /* ty=Tensor[(72), float64] */;
  %85 = @func_3818() /* ty=Tensor[(2, 8, 12), float64] */;
  (%83, %84, %85)
}

def @func_3687() -> (Tensor[(13, 13, 8), float64],) {
  %88 = fn () -> (Tensor[(13, 13, 8), float64],) {
    %86 = @func_1642() /* ty=(Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float64]) */;
    %87 = %86.0;
    (%87,)
  };
  %88() /* ty=(Tensor[(13, 13, 8), float64],) */
}

def @func_6840(%var_6838: Tensor[(13, 6, 14), uint8]) -> Tensor[(13, 6, 14), uint8] {
  @func_6837(%var_6838) /* ty=Tensor[(13, 6, 14), uint8] */
}

def @func_5888(%var_5887: Tensor[(2100), uint16]) -> (Tensor[(2, 8, 12), float64], Tensor[(10, 15, 14), bool], Tensor[(2100), uint16]) {
  %97 = fn (%var_5880: Tensor[(2100), uint16]) -> (Tensor[(2, 8, 12), float64], Tensor[(10, 15, 14), bool], Tensor[(2100), uint16]) {
    %89 = @func_1642() /* ty=(Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float64]) */;
    %90 = cast(%var_5880, dtype="uint16") /* ty=Tensor[(2100), uint16] */;
    %91 = cast(%var_5880, dtype="uint16") /* ty=Tensor[(2100), uint16] */;
    %92 = reshape(%90, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), uint16] */;
    %93 = reshape(%91, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), uint16] */;
    %94 = @func_3114(%92, %93) /* ty=(Tensor[(10, 15, 14), bool], Tensor[(3, 12, 2), bool]) */;
    %95 = %89.3;
    %96 = %94.0;
    (%95, %96, %var_5880)
  };
  %97(%var_5887) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(10, 15, 14), bool], Tensor[(2100), uint16]) */
}

def @func_9795() -> (Tensor[(2, 8, 12), float32],) {
  %98 = @func_4321() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
  %99 = %98.1;
  (%99,)
}

def @func_4489(%var_4488: Tensor[(9, 7, 11), float32]) -> (Tensor[(72), float64], Tensor[(9, 7, 11), float32]) {
  %109 = fn (%var_4477: Tensor[(9, 7, 11), float32]) -> (Tensor[(72), float64], Tensor[(9, 7, 11), float32]) {
    %100 = @func_1523() /* ty=(Tensor[(72), float64],) */;
    %101 = cast(%var_4477, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
    %102 = cosh(%101) /* ty=Tensor[(9, 7, 11), float32] */;
    %103 = cast(%102, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
    %104 = shape_of(%var_4477, dtype="int32") /* ty=Tensor[(3), int32] */;
    %105 = cast(%var_4477, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
    %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %107 = %100.0;
    %108 = floor_mod(%105, %106) /* ty=Tensor[(9, 7, 11), float32] */;
    (%107, %108)
  };
  %109(%var_4488) /* ty=(Tensor[(72), float64], Tensor[(9, 7, 11), float32]) */
}

def @func_9409() -> Tensor[(72), float64] {
  %110 = @func_4321() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
  %110.0
}

def @func_4505() -> (Tensor[(2, 8, 12), float32],) {
  %113 = fn () -> (Tensor[(2, 8, 12), float32],) {
    %111 = @func_3970() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
    %112 = %111.1;
    (%112,)
  };
  %113() /* ty=(Tensor[(2, 8, 12), float32],) */
}

def @func_319() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */
}

def @func_4941(%var_4939: Tensor[(2, 12, 8), bool]) -> Tensor[(2, 12, 8), bool] {
  @func_4938(%var_4939) /* ty=Tensor[(2, 12, 8), bool] */
}

def @func_6740(%var_6735: Tensor[(18, 66), float32]) -> (Tensor[(72), float64], Tensor[(72), float64], Tensor[(11, 9, 12), float32], Tensor[(18, 66), float32]) {
  %114 = @func_2041() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(72), float64]) */;
  %115 = @func_1523() /* ty=(Tensor[(72), float64],) */;
  %116 = cast(%var_6735, dtype="float32") /* ty=Tensor[(18, 66), float32] */;
  %117 = reshape(%116, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), float32] */;
  %118 = %114.2;
  %119 = %115.0;
  %120 = @func_5573(%117) /* ty=Tensor[(11, 9, 12), float32] */;
  (%118, %119, %120, %var_6735)
}

def @func_6362() -> (Tensor[(2, 8, 12), float64],) {
  %122 = fn () -> (Tensor[(2, 8, 12), float64],) {
    %121 = @func_4651() /* ty=Tensor[(2, 8, 12), float64] */;
    (%121,)
  };
  %122() /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_10038() -> Tensor[(2, 8, 12), float64] {
  %124 = fn () -> Tensor[(2, 8, 12), float64] {
    %123 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
    %123.0
  };
  %124() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_10708() -> Tensor[(2, 8, 12), float64] {
  @func_10706() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_4141() -> Tensor[(72), float64] {
  %126 = fn () -> Tensor[(72), float64] {
    %125 = @func_2450() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64]) */;
    %125.0
  };
  %126() /* ty=Tensor[(72), float64] */
}

def @func_6242() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  %127 = @func_4462() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float32]) */;
  %128 = @func_3818() /* ty=Tensor[(2, 8, 12), float64] */;
  %129 = %127.3;
  (%128, %129)
}

def @func_10992() -> Tensor[(2, 8, 12), float32] {
  @func_10990() /* ty=Tensor[(2, 8, 12), float32] */
}

def @func_4662() -> (Tensor[(2, 8, 12), float64],) {
  %130 = @func_2591() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
  %131 = %130.2;
  %132 = cast(%131, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %133 = atanh(%132) /* ty=Tensor[(2, 8, 12), float64] */;
  (%133,)
}

def @func_4286(%var_4283: float64, %var_4284: Tensor[(1, 270), float64], %var_4285: Tensor[(576), float64]) -> (Tensor[(5, 6, 9), float64], Tensor[(576), float64], Tensor[(2, 8, 12), float32], Tensor[(1, 270), bool]) {
  @func_4281(%var_4283, %var_4284, %var_4285) /* ty=(Tensor[(5, 6, 9), float64], Tensor[(576), float64], Tensor[(2, 8, 12), float32], Tensor[(1, 270), bool]) */
}

def @func_10308(%var_10306: Tensor[(6, 2, 16), bool], %var_10307: Tensor[(6, 2, 16), bool]) -> Tensor[(6, 2, 16), bool] {
  %138 = fn (%var_10293: Tensor[(6, 2, 16), bool], %var_10294: Tensor[(6, 2, 16), bool]) -> Tensor[(6, 2, 16), bool] {
    %134 = cast(%var_10294, dtype="bool") /* ty=Tensor[(6, 2, 16), bool] */;
    %135 = shape_of(%var_10293, dtype="int32") /* ty=Tensor[(3), int32] */;
    %136 = cast(%var_10293, dtype="bool") /* ty=Tensor[(6, 2, 16), bool] */;
    %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%136, %137) /* ty=Tensor[(6, 2, 16), bool] */
  };
  %138(%var_10306, %var_10307) /* ty=Tensor[(6, 2, 16), bool] */
}

def @func_9532() -> (Tensor[(2, 8, 12), float64], Tensor[(192), float32]) {
  %142 = fn () -> (Tensor[(2, 8, 12), float64], Tensor[(192), float32]) {
    %139 = @func_8103() /* ty=(Tensor[(192), float32], Tensor[(72), float64]) */;
    %140 = @func_3818() /* ty=Tensor[(2, 8, 12), float64] */;
    %141 = %139.0;
    (%140, %141)
  };
  %142() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(192), float32]) */
}

def @func_11379() -> Tensor[(2, 8, 12), float32] {
  @func_11377() /* ty=Tensor[(2, 8, 12), float32] */
}

def @func_2478() -> (Tensor[(72), float64],) {
  %143 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
  %144 = %143.2;
  (%144,)
}

def @func_2865() -> (Tensor[(72), float64],) {
  @func_2863() /* ty=(Tensor[(72), float64],) */
}

def @func_1769() -> (Tensor[(2, 8, 12), float32],) {
  %146 = fn () -> (Tensor[(2, 8, 12), float32],) {
    %145 = @func_1326() /* ty=Tensor[(2, 8, 12), float32] */;
    (%145,)
  };
  %146() /* ty=(Tensor[(2, 8, 12), float32],) */
}

def @func_993() -> Tensor[(2, 8, 12), float32] {
  %148 = fn () -> Tensor[(2, 8, 12), float32] {
    %147 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %147.3
  };
  %148() /* ty=Tensor[(2, 8, 12), float32] */
}

def @func_8998(%var_8983: Tensor[(12, 48), float64]) -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(72), float32], Tensor[(2, 8, 12), float32], Tensor[(5, 6, 9), float64], float64, Tensor[(12, 48), float64], Tensor[(270), float32]) {
  %149 = @func_7814() /* ty=Tensor[(72), float64] */;
  %150 = cast(%149, dtype="float32") /* ty=Tensor[(72), float32] */;
  %151 = @func_2041() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(72), float64]) */;
  %152 = cast(3.97837f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %153 = cast(meta[relay.Constant][2] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %154 = cast(%var_8983, dtype="float64") /* ty=Tensor[(12, 48), float64] */;
  %155 = reshape(%152, newshape=[]) /* ty=float64 */;
  %156 = reshape(%153, newshape=[1, 270]) /* ty=Tensor[(1, 270), float64] */;
  %157 = reshape(%154, newshape=[576]) /* ty=Tensor[(576), float64] */;
  %158 = @func_4281(%155, %156, %157) /* ty=(Tensor[(5, 6, 9), float64], Tensor[(576), float64], Tensor[(2, 8, 12), float32], Tensor[(1, 270), bool]) */;
  %159 = cast(meta[relay.Constant][2] /* ty=Tensor[(270), float64] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %160 = @func_3629() /* ty=Tensor[(2, 8, 12), float64] */;
  %161 = @func_7835() /* ty=Tensor[(2, 8, 12), float64] */;
  %162 = rsqrt(%150) /* ty=Tensor[(72), float32] */;
  %163 = %151.0;
  %164 = %158.0;
  %165 = sinh(%159) /* ty=Tensor[(270), float32] */;
  (%160, %161, %162, %163, %164, 3.97837f64 /* ty=float64 */, %var_8983, %165)
}

def @func_3359(%var_3356: float64, %var_3357: Tensor[(5, 6, 9), float64], %var_3358: Tensor[(6, 8, 12), float64]) -> (Tensor[(5, 6, 9), float64], Tensor[(6, 8, 12), float32], Tensor[(6, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(4, 48), float32]) {
  %178 = fn (%var_3321: float64, %var_3322: Tensor[(5, 6, 9), float64], %var_3337: Tensor[(6, 8, 12), float64]) -> (Tensor[(5, 6, 9), float64], Tensor[(6, 8, 12), float32], Tensor[(6, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(4, 48), float32]) {
    %166 = cast(%var_3321, dtype="float64") /* ty=float64 */;
    %167 = cast(%var_3322, dtype="float64") /* ty=Tensor[(5, 6, 9), float64] */;
    %168 = cast(%var_3321, dtype="float32") /* ty=float32 */;
    %169 = cast(%var_3337, dtype="float32") /* ty=Tensor[(6, 8, 12), float32] */;
    %170 = cast(%var_3337, dtype="float64") /* ty=Tensor[(6, 8, 12), float64] */;
    %171 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 48), float32] */, dtype="float32") /* ty=Tensor[(4, 48), float32] */;
    %172 = reshape(%171, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float32] */;
    %173 = @func_666(%172) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
    %174 = divide(%166, %167) /* ty=Tensor[(5, 6, 9), float64] */;
    %175 = mod(%168, %169) /* ty=Tensor[(6, 8, 12), float32] */;
    %176 = atanh(%170) /* ty=Tensor[(6, 8, 12), float64] */;
    %177 = %173.0;
    (%174, %175, %176, %177, meta[relay.Constant][3] /* ty=Tensor[(4, 48), float32] */)
  };
  %178(%var_3356, %var_3357, %var_3358) /* ty=(Tensor[(5, 6, 9), float64], Tensor[(6, 8, 12), float32], Tensor[(6, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(4, 48), float32]) */
}

def @func_8219() -> Tensor[(2, 8, 12), float32] {
  @func_8217() /* ty=Tensor[(2, 8, 12), float32] */
}

def @func_11377() -> Tensor[(2, 8, 12), float32] {
  %179 = @func_1461() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %179.1
}

def @func_8774(%var_8772: Tensor[(2100), uint16]) -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2100), uint16]) {
  @func_8771(%var_8772) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2100), uint16]) */
}

def @func_10729() -> Tensor[(2, 8, 12), float64] {
  @func_10727() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_2863() -> (Tensor[(72), float64],) {
  %180 = @func_1296() /* ty=(Tensor[(72), float64],) */;
  %181 = %180.0;
  (%181,)
}

def @func_6114(%var_6113: Tensor[(576), float64]) -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(5, 6, 9), float64], float64, Tensor[(270), float64], Tensor[(576), float64]) {
  %195 = fn (%var_6104: Tensor[(576), float64]) -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(5, 6, 9), float64], float64, Tensor[(270), float64], Tensor[(576), float64]) {
    %182 = @func_4746() /* ty=Tensor[(72), float64] */;
    %183 = cast(%182, dtype="float64") /* ty=Tensor[(72), float64] */;
    %184 = reshape(%183, newshape=[3, 12, 2]) /* ty=Tensor[(3, 12, 2), float64] */;
    %185 = @func_378(%184) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %186 = cast(3.1391f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %187 = cast(meta[relay.Constant][4] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
    %188 = cast(%var_6104, dtype="float64") /* ty=Tensor[(576), float64] */;
    %189 = reshape(%186, newshape=[]) /* ty=float64 */;
    %190 = reshape(%187, newshape=[5, 6, 9]) /* ty=Tensor[(5, 6, 9), float64] */;
    %191 = reshape(%188, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), float64] */;
    %192 = @func_3355(%189, %190, %191) /* ty=(Tensor[(5, 6, 9), float64], Tensor[(6, 8, 12), float32], Tensor[(6, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(4, 48), float32]) */;
    %193 = %185.1;
    %194 = %192.0;
    (%182, %193, %194, 3.1391f64 /* ty=float64 */, meta[relay.Constant][4] /* ty=Tensor[(270), float64] */, %var_6104)
  };
  %195(%var_6113) /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(5, 6, 9), float64], float64, Tensor[(270), float64], Tensor[(576), float64]) */
}

def @func_693(%var_691: Tensor[(72), float64]) -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) {
  @func_690(%var_691) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */
}

def @func_5972() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), bool], Tensor[(1, 2100), uint16]) {
  %196 = @func_5224() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(72), float64]) */;
  %197 = @func_4725() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %198 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 2100), uint16] */, dtype="uint16") /* ty=Tensor[(1, 2100), uint16] */;
  %199 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 2100), uint16] */, dtype="uint16") /* ty=Tensor[(1, 2100), uint16] */;
  %200 = reshape(%198, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), uint16] */;
  %201 = reshape(%199, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), uint16] */;
  %202 = @func_3114(%200, %201) /* ty=(Tensor[(10, 15, 14), bool], Tensor[(3, 12, 2), bool]) */;
  %203 = %196.1;
  %204 = %197.0;
  %205 = %202.1;
  (%203, %204, %205, meta[relay.Constant][5] /* ty=Tensor[(1, 2100), uint16] */)
}

def @func_6244() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  @func_6242() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */
}

def @func_9569() -> (Tensor[(72), float64],) {
  %206 = @func_4746() /* ty=Tensor[(72), float64] */;
  (%206,)
}

def @func_7476() -> (Tensor[(2, 8, 12), uint64],) {
  @func_7474() /* ty=(Tensor[(2, 8, 12), uint64],) */
}

def @func_1642() -> (Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float64]) {
  %207 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 13, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 13, 8), float64] */;
  %208 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
  %209 = %208.0;
  %210 = cast(%209, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %211 = reshape(%210, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
  %212 = @func_1214(%211) /* ty=(Tensor[(2, 8, 12), uint16], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(2, 8, 12), uint64]) */;
  %213 = sin(%207) /* ty=Tensor[(13, 13, 8), float64] */;
  %214 = %212.4;
  %215 = @func_1582() /* ty=Tensor[(2, 8, 12), float64] */;
  (%213, %209, %214, %215)
}

def @func_9958() -> Tensor[(2, 8, 12), float64] {
  @func_9956() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_668(%var_667: Tensor[(2, 8, 12), float32]) -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) {
  %245 = fn (%var_636: Tensor[(2, 8, 12), float32]) -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) {
    %216 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %217 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %218 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
    %219 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %220 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
    %221 = %220.0;
    %222 = cast(%221, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
    %223 = %219.3;
    %224 = cast(%223, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
    %225 = reshape(%224, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
    %226 = @func_460(%225) /* ty=(Tensor[(2, 8, 12), uint64],) */;
    %227 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
    %228 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %229 = %228.1;
    %230 = cast(%var_636, dtype="uint32") /* ty=Tensor[(2, 8, 12), uint32] */;
    %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(3), int32] */;
    %232 = cast(%229, dtype="uint32") /* ty=Tensor[(2, 8, 12), uint32] */;
    %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %234 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
    %235 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
    %236 = %216.0;
    %237 = %217.3;
    %238 = %218.0;
    %239 = atan(%222) /* ty=Tensor[(2, 8, 12), float32] */;
    %240 = %226.0;
    %241 = %227.0;
    %242 = bitwise_xor(%232, %233) /* ty=Tensor[(2, 8, 12), uint32] */;
    %243 = %234.0;
    %244 = %235.0;
    (%236, %237, %238, %223, %239, %240, %241, %242, %243, %244)
  };
  %245(%var_667) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */
}

def @func_4714() -> (Tensor[(2, 8, 12), float64],) {
  @func_4712() /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_7474() -> (Tensor[(2, 8, 12), uint64],) {
  %246 = @func_1642() /* ty=(Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float64]) */;
  %247 = %246.2;
  (%247,)
}

def @func_3652() -> (Tensor[(2, 8, 12), float32],) {
  @func_3650() /* ty=(Tensor[(2, 8, 12), float32],) */
}

def @func_10558(%var_10556: Tensor[(15, 140), uint16], %var_10557: Tensor[(15, 140), float64]) -> (Tensor[(2, 8, 12), float64], Tensor[(15, 12, 11), float32], Tensor[(77, 9), float32], Tensor[(2, 8, 12), float64], Tensor[(704), float64], Tensor[(72), float64], Tensor[(11, 4, 16), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(15, 140), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(15, 140), bool], Tensor[(1980), float32], Tensor[(2, 8, 12), float64], Tensor[(15, 140), bool]) {
  @func_10554(%var_10556, %var_10557) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(15, 12, 11), float32], Tensor[(77, 9), float32], Tensor[(2, 8, 12), float64], Tensor[(704), float64], Tensor[(72), float64], Tensor[(11, 4, 16), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(15, 140), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(15, 140), bool], Tensor[(1980), float32], Tensor[(2, 8, 12), float64], Tensor[(15, 140), bool]) */
}

def @func_4033(%var_4031: uint8) -> (Tensor[(2, 8, 12), float32], Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float32], Tensor[(5, 3, 1), uint8], uint8, Tensor[(15), uint8], Tensor[(2, 8, 12), uint16], Tensor[(2, 8, 12), float64]) {
  @func_4030(%var_4031) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float32], Tensor[(5, 3, 1), uint8], uint8, Tensor[(15), uint8], Tensor[(2, 8, 12), uint16], Tensor[(2, 8, 12), float64]) */
}

def @func_2182() -> (Tensor[(72), float64],) {
  %250 = fn () -> (Tensor[(72), float64],) {
    %248 = @func_1296() /* ty=(Tensor[(72), float64],) */;
    %249 = %248.0;
    (%249,)
  };
  %250() /* ty=(Tensor[(72), float64],) */
}

def @func_1525() -> (Tensor[(72), float64],) {
  @func_1523() /* ty=(Tensor[(72), float64],) */
}

def @func_4321() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float32]) {
  %251 = @func_3970() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
  %252 = %251.0;
  %253 = @func_1975() /* ty=Tensor[(2, 8, 12), float32] */;
  (%252, %253)
}

def @func_4685(%var_4684: Tensor[(6, 16, 10), float64]) -> (Tensor[(6, 16, 10), float64],) {
  %256 = fn (%var_4676: Tensor[(6, 16, 10), float64]) -> (Tensor[(6, 16, 10), float64],) {
    %254 = cast(%var_4676, dtype="float64") /* ty=Tensor[(6, 16, 10), float64] */;
    %255 = erf(%254) /* ty=Tensor[(6, 16, 10), float64] */;
    (%255,)
  };
  %256(%var_4684) /* ty=(Tensor[(6, 16, 10), float64],) */
}

def @func_1977() -> Tensor[(2, 8, 12), float32] {
  @func_1975() /* ty=Tensor[(2, 8, 12), float32] */
}

def @func_4725() -> (Tensor[(2, 8, 12), float64],) {
  %257 = @func_3818() /* ty=Tensor[(2, 8, 12), float64] */;
  (%257,)
}

def @func_10808(%var_10806: Tensor[(616), float32]) -> (Tensor[(72), float64], Tensor[(2, 8, 12), bool], Tensor[(616), float32]) {
  @func_10805(%var_10806) /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), bool], Tensor[(616), float32]) */
}

def @func_3650() -> (Tensor[(2, 8, 12), float32],) {
  %258 = @func_1326() /* ty=Tensor[(2, 8, 12), float32] */;
  (%258,)
}

def @func_7281() -> (Tensor[(72), float64],) {
  @func_7279() /* ty=(Tensor[(72), float64],) */
}

def @func_9885() -> (Tensor[(72), float64], Tensor[(72), float64]) {
  %259 = @func_8411() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(56), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(11, 9, 12), int32], Tensor[(72), float64], Tensor[(693), float64]) */;
  %260 = @func_7783() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64]) */;
  %261 = %259.4;
  %262 = %260.0;
  (%261, %262)
}

def @func_10647() -> (Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float64]) {
  %263 = @func_5611() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) */;
  %264 = %263.1;
  %265 = @func_5022() /* ty=Tensor[(72), float64] */;
  %266 = @func_1934() /* ty=Tensor[(2, 8, 12), float64] */;
  (%264, %265, %266)
}

def @func_733() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
  @func_731() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */
}

def @func_10990() -> Tensor[(2, 8, 12), float32] {
  %267 = @func_9795() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %267.0
}

def @func_6852() -> (Tensor[(13, 13, 8), float64],) {
  @func_6850() /* ty=(Tensor[(13, 13, 8), float64],) */
}

def @func_3957() -> Tensor[(2, 8, 12), float64] {
  @func_3955() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_9610(%var_9609: Tensor[(15, 13, 9), float32]) -> (Tensor[(15, 13, 9), float32], Tensor[(72), float64]) {
  %272 = fn (%var_9572: Tensor[(15, 13, 9), float32]) -> (Tensor[(15, 13, 9), float32], Tensor[(72), float64]) {
    %268 = cast(%var_9572, dtype="float32") /* ty=Tensor[(15, 13, 9), float32] */;
    %269 = @func_8822() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
    %270 = tan(%268) /* ty=Tensor[(15, 13, 9), float32] */;
    %271 = %269.0;
    (%270, %271)
  };
  %272(%var_9609) /* ty=(Tensor[(15, 13, 9), float32], Tensor[(72), float64]) */
}

def @func_6430() -> Tensor[(6, 6, 3), bool] {
  %273 = fn () -> Tensor[(6, 6, 3), bool] {
    @func_5943() /* ty=Tensor[(6, 6, 3), bool] */
  };
  %273() /* ty=Tensor[(6, 6, 3), bool] */
}

def @func_7886() -> (Tensor[(72), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float32]) {
  @func_7884() /* ty=(Tensor[(72), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */
}

def @func_6850() -> (Tensor[(13, 13, 8), float64],) {
  %274 = @func_3686() /* ty=(Tensor[(13, 13, 8), float64],) */;
  %275 = %274.0;
  (%275,)
}

def @func_1019() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
  %279 = fn () -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
    %276 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %277 = @func_760() /* ty=Tensor[(2, 8, 12), float64] */;
    %278 = %276.0;
    (%277, %278)
  };
  %279() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */
}

def @func_9649() -> Tensor[(2, 8, 12), float64] {
  @func_3818() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_1255() -> (Tensor[(2, 8, 12), float64],) {
  %280 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %281 = %280.0;
  (%281,)
}

def @func_9364() -> Tensor[(2, 8, 12), float32] {
  %282 = @func_1850() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
  %282.1
}

def @func_4727() -> (Tensor[(2, 8, 12), float64],) {
  @func_4725() /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_1334(%var_1332: Tensor[(180), uint8]) -> (Tensor[(2, 8, 12), float64], Tensor[(3, 10, 6), bool], Tensor[(180), uint8]) {
  %283 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %284 = cast(%var_1332, dtype="uint8") /* ty=Tensor[(180), uint8] */;
  %285 = cast(%var_1332, dtype="uint8") /* ty=Tensor[(180), uint8] */;
  %286 = reshape(%284, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), uint8] */;
  %287 = reshape(%285, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), uint8] */;
  %288 = @func_965(%286, %287) /* ty=(Tensor[(3, 10, 6), bool], Tensor[(72), float64]) */;
  %289 = %283.2;
  %290 = %288.0;
  (%289, %290, %var_1332)
}

def @func_7261(%var_7228: Tensor[(15, 12, 11), float32], %var_7246: Tensor[(2100), uint16], %var_7251: Tensor[(693), float32]) -> (Tensor[(15, 12, 11), float32], Tensor[(10, 15, 14), bool], Tensor[(2100), uint16], Tensor[(9, 7, 11), float32], Tensor[(693), float32]) {
  %291 = cast(%var_7228, dtype="float32") /* ty=Tensor[(15, 12, 11), float32] */;
  %292 = cast(%var_7246, dtype="uint16") /* ty=Tensor[(2100), uint16] */;
  %293 = cast(%var_7246, dtype="uint16") /* ty=Tensor[(2100), uint16] */;
  %294 = reshape(%292, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), uint16] */;
  %295 = reshape(%293, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), uint16] */;
  %296 = @func_3114(%294, %295) /* ty=(Tensor[(10, 15, 14), bool], Tensor[(3, 12, 2), bool]) */;
  %297 = cast(%var_7251, dtype="float32") /* ty=Tensor[(693), float32] */;
  %298 = reshape(%297, newshape=[9, 7, 11]) /* ty=Tensor[(9, 7, 11), float32] */;
  %299 = @func_4487(%298) /* ty=(Tensor[(72), float64], Tensor[(9, 7, 11), float32]) */;
  %300 = acos(%291) /* ty=Tensor[(15, 12, 11), float32] */;
  %301 = %296.0;
  %302 = %299.1;
  (%300, %301, %var_7246, %302, %var_7251)
}

def @func_9508() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  %303 = @func_8518() /* ty=(Tensor[(56), float64], Tensor[(2, 8, 12), float64]) */;
  %304 = @func_9373() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %305 = @func_4746() /* ty=Tensor[(72), float64] */;
  %306 = %303.1;
  %307 = %304.0;
  (%305, %306, %307)
}

def @func_690(%var_685: Tensor[(72), float64]) -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) {
  %308 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %309 = %308.1;
  %310 = cast(%309, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %311 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %312 = cast(%var_685, dtype="float64") /* ty=Tensor[(72), float64] */;
  %313 = reshape(%312, newshape=[3, 12, 2]) /* ty=Tensor[(3, 12, 2), float64] */;
  %314 = @func_378(%313) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %315 = sin(%310) /* ty=Tensor[(2, 8, 12), float32] */;
  %316 = %311.2;
  %317 = %314.2;
  (%315, %316, %317, %var_685)
}

def @func_7068() -> (Tensor[(2, 8, 12), float64],) {
  %320 = fn () -> (Tensor[(2, 8, 12), float64],) {
    %318 = @func_4725() /* ty=(Tensor[(2, 8, 12), float64],) */;
    %319 = %318.0;
    (%319,)
  };
  %320() /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_1584() -> Tensor[(2, 8, 12), float64] {
  @func_1582() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_6837(%var_6830: Tensor[(13, 6, 14), uint8]) -> Tensor[(13, 6, 14), uint8] {
  %321 = cast(meta[relay.Constant][7] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %322 = cast(%var_6830, dtype="uint8") /* ty=Tensor[(13, 6, 14), uint8] */;
  logical_xor(%321, %322) /* ty=Tensor[(13, 6, 14), uint8] */
}

def @func_9366() -> Tensor[(2, 8, 12), float32] {
  @func_9364() /* ty=Tensor[(2, 8, 12), float32] */
}

def @func_1328() -> Tensor[(2, 8, 12), float32] {
  @func_1326() /* ty=Tensor[(2, 8, 12), float32] */
}

def @func_8276() -> (Tensor[(2, 8, 12), float64], Tensor[(13, 6, 14), uint8], Tensor[(1092), uint8], Tensor[(2, 8, 12), float64]) {
  %323 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %324 = cast(meta[relay.Constant][8] /* ty=Tensor[(1092), uint8] */, dtype="uint8") /* ty=Tensor[(1092), uint8] */;
  %325 = reshape(%324, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), uint8] */;
  %326 = @func_4662() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %327 = %323.0;
  %328 = @func_6837(%325) /* ty=Tensor[(13, 6, 14), uint8] */;
  %329 = %326.0;
  (%327, %328, meta[relay.Constant][8] /* ty=Tensor[(1092), uint8] */, %329)
}

def @func_3590() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(7, 8, 11), bool], Tensor[(616, 1), float32]) {
  %330 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %331 = cast(meta[relay.Constant][9] /* ty=Tensor[(616, 1), float32] */, dtype="float32") /* ty=Tensor[(616, 1), float32] */;
  %332 = cast(meta[relay.Constant][9] /* ty=Tensor[(616, 1), float32] */, dtype="bool") /* ty=Tensor[(616, 1), bool] */;
  %333 = reshape(%331, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
  %334 = reshape(%332, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), bool] */;
  %335 = @func_908(%333, %334) /* ty=(Tensor[(7, 8, 11), bool],) */;
  %336 = cast(meta[relay.Constant][9] /* ty=Tensor[(616, 1), float32] */, dtype="float32") /* ty=Tensor[(616, 1), float32] */;
  %337 = @func_1326() /* ty=Tensor[(2, 8, 12), float32] */;
  %338 = %330.1;
  %339 = %335.0;
  %340 = asinh(%336) /* ty=Tensor[(616, 1), float32] */;
  (%337, %338, %339, %340)
}

def @func_1298() -> (Tensor[(72), float64],) {
  @func_1296() /* ty=(Tensor[(72), float64],) */
}

def @func_8412() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(56), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(11, 9, 12), int32], Tensor[(72), float64], Tensor[(693), float64]) {
  %369 = fn () -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(56), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(11, 9, 12), int32], Tensor[(72), float64], Tensor[(693), float64]) {
    %341 = @func_4321() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
    %342 = @func_5073() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(56), float64], Tensor[(72), float64]) */;
    %343 = cast(meta[relay.Constant][10] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
    %344 = reshape(%343, newshape=[1, 56]) /* ty=Tensor[(1, 56), float64] */;
    %345 = @func_5006(%344) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(1, 56), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
    %346 = cast(meta[relay.Constant][11] /* ty=Tensor[(693), float32] */, dtype="float32") /* ty=Tensor[(693), float32] */;
    %347 = reshape(%346, newshape=[9, 7, 11]) /* ty=Tensor[(9, 7, 11), float32] */;
    %348 = @func_4487(%347) /* ty=(Tensor[(72), float64], Tensor[(9, 7, 11), float32]) */;
    %349 = @func_5373() /* ty=(Tensor[(2, 8, 12), float64],) */;
    %350 = cast(meta[relay.Constant][12] /* ty=Tensor[(1188), float32] */, dtype="float32") /* ty=Tensor[(1188), float32] */;
    %351 = reshape(%350, newshape=[11, 9, 12]) /* ty=Tensor[(11, 9, 12), float32] */;
    %352 = @func_5573(%351) /* ty=Tensor[(11, 9, 12), float32] */;
    %353 = cast(meta[relay.Constant][12] /* ty=Tensor[(1188), float32] */, dtype="int32") /* ty=Tensor[(1188), int32] */;
    %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
    %355 = cast(%352, dtype="int32") /* ty=Tensor[(11, 9, 12), int32] */;
    %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %357 = cast(meta[relay.Constant][11] /* ty=Tensor[(693), float32] */, dtype="float32") /* ty=Tensor[(693), float32] */;
    %358 = reshape(%357, newshape=[9, 7, 11]) /* ty=Tensor[(9, 7, 11), float32] */;
    %359 = @func_4487(%358) /* ty=(Tensor[(72), float64], Tensor[(9, 7, 11), float32]) */;
    %360 = cast(meta[relay.Constant][11] /* ty=Tensor[(693), float32] */, dtype="float64") /* ty=Tensor[(693), float64] */;
    %361 = %341.1;
    %362 = %342.0;
    %363 = %345.1;
    %364 = %348.0;
    %365 = %349.0;
    %366 = logical_xor(%355, %356) /* ty=Tensor[(11, 9, 12), int32] */;
    %367 = %359.0;
    %368 = sinh(%360) /* ty=Tensor[(693), float64] */;
    (%361, %362, %363, meta[relay.Constant][10] /* ty=Tensor[(56), float64] */, %364, %365, %366, %367, %368)
  };
  %369() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(56), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(11, 9, 12), int32], Tensor[(72), float64], Tensor[(693), float64]) */
}

def @func_4030(%var_4004: uint8) -> (Tensor[(2, 8, 12), float32], Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float32], Tensor[(5, 3, 1), uint8], uint8, Tensor[(15), uint8], Tensor[(2, 8, 12), uint16], Tensor[(2, 8, 12), float64]) {
  %370 = @func_3686() /* ty=(Tensor[(13, 13, 8), float64],) */;
  %371 = @func_3590() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(7, 8, 11), bool], Tensor[(616, 1), float32]) */;
  %372 = cast(%var_4004, dtype="uint8") /* ty=uint8 */;
  %373 = cast(meta[relay.Constant][13] /* ty=Tensor[(15), uint8] */, dtype="uint8") /* ty=Tensor[(15), uint8] */;
  %374 = @func_992() /* ty=Tensor[(2, 8, 12), float32] */;
  %375 = cast(%374, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %376 = reshape(%372, newshape=[]) /* ty=uint8 */;
  %377 = reshape(%373, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), uint8] */;
  %378 = reshape(%375, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %379 = @func_3270(%376, %377, %378) /* ty=(Tensor[(5, 3, 1), uint8], Tensor[(2, 8, 12), float32], Tensor[(192), float32]) */;
  %380 = %371.0;
  %381 = cast(%380, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %382 = reshape(%381, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
  %383 = @func_1214(%382) /* ty=(Tensor[(2, 8, 12), uint16], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(2, 8, 12), uint64]) */;
  %384 = %370.0;
  %385 = %379.0;
  %386 = %383.0;
  %387 = @func_1582() /* ty=Tensor[(2, 8, 12), float64] */;
  (%374, %384, %380, %385, %var_4004, meta[relay.Constant][13] /* ty=Tensor[(15), uint8] */, %386, %387)
}

def @func_5974() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), bool], Tensor[(1, 2100), uint16]) {
  @func_5972() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), bool], Tensor[(1, 2100), uint16]) */
}

def @func_544(%var_543: Tensor[(2, 8, 12), float64]) -> Tensor[(2, 8, 12), uint64] {
  %394 = fn (%var_533: Tensor[(2, 8, 12), float64]) -> Tensor[(2, 8, 12), uint64] {
    %388 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %389 = %388.0;
    %390 = cast(%var_533, dtype="uint64") /* ty=Tensor[(2, 8, 12), uint64] */;
    %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
    %392 = cast(%389, dtype="uint64") /* ty=Tensor[(2, 8, 12), uint64] */;
    %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    multiply(%392, %393) /* ty=Tensor[(2, 8, 12), uint64] */
  };
  %394(%var_543) /* ty=Tensor[(2, 8, 12), uint64] */
}

def @func_7293() -> (Tensor[(7, 8, 11), bool],) {
  %395 = @func_3590() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(7, 8, 11), bool], Tensor[(616, 1), float32]) */;
  %396 = %395.2;
  (%396,)
}

def @func_1644() -> (Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float64]) {
  @func_1642() /* ty=(Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float64]) */
}

def @func_4809() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) {
  %400 = fn () -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) {
    %397 = @func_3650() /* ty=(Tensor[(2, 8, 12), float32],) */;
    %398 = %397.0;
    %399 = @func_1582() /* ty=Tensor[(2, 8, 12), float64] */;
    (%398, %399)
  };
  %400() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) */
}

def @func_5330() -> (Tensor[(2, 8, 12), float64],) {
  %401 = @func_4725() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %402 = %401.0;
  (%402,)
}

def @func_8771(%var_8759: Tensor[(2100), uint16]) -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2100), uint16]) {
  %403 = @func_5224() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(72), float64]) */;
  %404 = %403.0;
  %405 = cast(%404, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %406 = reshape(%405, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float32] */;
  %407 = @func_666(%406) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
  %408 = cast(%var_8759, dtype="uint16") /* ty=Tensor[(2100), uint16] */;
  %409 = reshape(%408, newshape=[2100]) /* ty=Tensor[(2100), uint16] */;
  %410 = @func_4160(%409) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(10, 15, 14), bool], Tensor[(2100), uint16]) */;
  %411 = @func_3955() /* ty=Tensor[(2, 8, 12), float64] */;
  %412 = @func_6315() /* ty=Tensor[(2, 8, 12), float32] */;
  %413 = %407.6;
  %414 = @func_760() /* ty=Tensor[(2, 8, 12), float64] */;
  %415 = %410.0;
  (%411, %404, %412, %413, %414, %415, %var_8759)
}

def @func_2519() -> Tensor[(72), float64] {
  %417 = fn () -> Tensor[(72), float64] {
    %416 = @func_2286() /* ty=(Tensor[(72), float64],) */;
    %416.0
  };
  %417() /* ty=Tensor[(72), float64] */
}

def @func_2409() -> (Tensor[(2, 8, 12), float64],) {
  @func_2407() /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_5008(%var_5007: Tensor[(1, 56), float64]) -> (Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(1, 56), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) {
  %434 = fn (%var_4970: Tensor[(1, 56), float64]) -> (Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(1, 56), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) {
    %418 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %419 = cast(%var_4970, dtype="float64") /* ty=Tensor[(1, 56), float64] */;
    %420 = reshape(%419, newshape=[1, 8, 7]) /* ty=Tensor[(1, 8, 7), float64] */;
    %421 = @func_2369(%420) /* ty=(Tensor[(1, 8, 7), float64],) */;
    %422 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
    %423 = @func_2458() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64]) */;
    %424 = %422.1;
    %425 = cast(%424, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
    %426 = cast(meta[relay.Constant][14] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
    %427 = reshape(%425, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
    %428 = reshape(%426, newshape=[72]) /* ty=Tensor[(72), float64] */;
    %429 = @func_845(%427, %428) /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32]) */;
    %430 = %418.3;
    %431 = %421.0;
    %432 = %423.1;
    %433 = %429.2;
    (%430, %431, %var_4970, %424, %432, %433, meta[relay.Constant][14] /* ty=Tensor[(72), float64] */)
  };
  %434(%var_5007) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(1, 56), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */
}

def @func_4857() -> (Tensor[(192), float32], Tensor[(72), float64]) {
  @func_4855() /* ty=(Tensor[(192), float32], Tensor[(72), float64]) */
}

def @func_10609() -> Tensor[(2, 8, 12), float64] {
  %436 = fn () -> Tensor[(2, 8, 12), float64] {
    %435 = @func_6995() /* ty=(Tensor[(2, 8, 12), float64],) */;
    %435.0
  };
  %436() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_2886() -> (Tensor[(2, 8, 12), float64],) {
  %438 = fn () -> (Tensor[(2, 8, 12), float64],) {
    %437 = @func_1582() /* ty=Tensor[(2, 8, 12), float64] */;
    (%437,)
  };
  %438() /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_3818() -> Tensor[(2, 8, 12), float64] {
  %439 = @func_1255() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %439.0
}

def @func_4901(%var_4900: Tensor[(13, 7, 6), float32]) -> (Tensor[(72), float64], Tensor[(13, 7, 6), int16]) {
  %449 = fn (%var_4860: Tensor[(13, 7, 6), float32]) -> (Tensor[(72), float64], Tensor[(13, 7, 6), int16]) {
    %440 = @func_2181() /* ty=(Tensor[(72), float64],) */;
    %441 = cast(%var_4860, dtype="float32") /* ty=Tensor[(13, 7, 6), float32] */;
    %442 = log2(%441) /* ty=Tensor[(13, 7, 6), float32] */;
    %443 = cast(%var_4860, dtype="int16") /* ty=Tensor[(13, 7, 6), int16] */;
    %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
    %445 = cast(%442, dtype="int16") /* ty=Tensor[(13, 7, 6), int16] */;
    %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %447 = %440.0;
    %448 = logical_xor(%445, %446) /* ty=Tensor[(13, 7, 6), int16] */;
    (%447, %448)
  };
  %449(%var_4900) /* ty=(Tensor[(72), float64], Tensor[(13, 7, 6), int16]) */
}

def @func_2369(%var_2366: Tensor[(1, 8, 7), float64]) -> (Tensor[(1, 8, 7), float64],) {
  %450 = cast(%var_2366, dtype="float64") /* ty=Tensor[(1, 8, 7), float64] */;
  %451 = log2(%450) /* ty=Tensor[(1, 8, 7), float64] */;
  (%451,)
}

def @func_7675(%var_7673: Tensor[(360), float64]) -> (Tensor[(72), float64], Tensor[(10, 6, 6), float64], Tensor[(360), float64], uint8) {
  @func_7672(%var_7673) /* ty=(Tensor[(72), float64], Tensor[(10, 6, 6), float64], Tensor[(360), float64], uint8) */
}

def @func_7224() -> Tensor[(2, 8, 12), float64] {
  @func_7222() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_1936() -> Tensor[(2, 8, 12), float64] {
  @func_1934() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_7279() -> (Tensor[(72), float64],) {
  %452 = @func_1523() /* ty=(Tensor[(72), float64],) */;
  %453 = %452.0;
  (%453,)
}

def @func_731() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
  %454 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %455 = %454.2;
  %456 = cast(%455, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %457 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %458 = rsqrt(%456) /* ty=Tensor[(2, 8, 12), float64] */;
  %459 = %457.2;
  (%458, %459)
}

def @func_7295() -> (Tensor[(7, 8, 11), bool],) {
  @func_7293() /* ty=(Tensor[(7, 8, 11), bool],) */
}

def @func_2150() -> Tensor[(2, 8, 12), float32] {
  @func_2148() /* ty=Tensor[(2, 8, 12), float32] */
}

def @func_4323() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float32]) {
  @func_4321() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */
}

def @func_8174() -> (Tensor[(7, 8, 11), bool],) {
  %460 = @func_7293() /* ty=(Tensor[(7, 8, 11), bool],) */;
  %461 = %460.0;
  (%461,)
}

def @func_3820() -> Tensor[(2, 8, 12), float64] {
  @func_3818() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_2591() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) {
  %462 = @func_2041() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(72), float64]) */;
  %463 = @func_1768() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %464 = %463.0;
  %465 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 8, 12), float32] */, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%464, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %469 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 8, 12), float32] */, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %470 = %462.2;
  %471 = cast(%470, dtype="float64") /* ty=Tensor[(72), float64] */;
  %472 = reshape(%469, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
  %473 = reshape(%471, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %474 = @func_845(%472, %473) /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32]) */;
  %475 = floor_divide(%467, %468) /* ty=Tensor[(2, 8, 12), float32] */;
  %476 = %474.2;
  (%470, %475, %476)
}

def @func_10880() -> (Tensor[(2, 8, 12), float64], Tensor[(6, 6, 3), bool]) {
  @func_10878() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(6, 6, 3), bool]) */
}

def @func_11264() -> (Tensor[(7, 15, 15), float32],) {
  @func_11262() /* ty=(Tensor[(7, 15, 15), float32],) */
}

def @func_7884() -> (Tensor[(72), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float32]) {
  %477 = @func_2863() /* ty=(Tensor[(72), float64],) */;
  %478 = %477.0;
  %479 = @func_7169() /* ty=Tensor[(72), float64] */;
  %480 = @func_6315() /* ty=Tensor[(2, 8, 12), float32] */;
  (%478, %479, %480)
}

def @func_2480() -> (Tensor[(72), float64],) {
  @func_2478() /* ty=(Tensor[(72), float64],) */
}

def @func_3870(%var_3868: Tensor[(192), float32]) -> (Tensor[(2, 8, 12), float32], Tensor[(192), float32], Tensor[(72), float64]) {
  @func_3867(%var_3868) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(192), float32], Tensor[(72), float64]) */
}

def @func_4855() -> (Tensor[(192), float32], Tensor[(72), float64]) {
  %481 = @func_4462() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float32]) */;
  %482 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
  %483 = %481.2;
  %484 = %482.2;
  (%483, %484)
}

def @func_4163(%var_4161: Tensor[(2100), uint16]) -> (Tensor[(2, 8, 12), float64], Tensor[(10, 15, 14), bool], Tensor[(2100), uint16]) {
  @func_4160(%var_4161) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(10, 15, 14), bool], Tensor[(2100), uint16]) */
}

def @func_6630(%var_6628: Tensor[(10, 6, 6), float64], %var_6629: uint8) -> (Tensor[(3, 12, 2), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float32], uint8, Tensor[(10, 6, 6), float64]) {
  %497 = fn (%var_6584: Tensor[(10, 6, 6), float64], %var_6612: uint8) -> (Tensor[(3, 12, 2), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float32], uint8, Tensor[(10, 6, 6), float64]) {
    %485 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
    %486 = @func_5972() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), bool], Tensor[(1, 2100), uint16]) */;
    %487 = cast(%var_6612, dtype="uint8") /* ty=uint8 */;
    %488 = reshape(%487, newshape=[]) /* ty=uint8 */;
    %489 = @func_4030(%488) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float32], Tensor[(5, 3, 1), uint8], uint8, Tensor[(15), uint8], Tensor[(2, 8, 12), uint16], Tensor[(2, 8, 12), float64]) */;
    %490 = cast(%var_6584, dtype="float64") /* ty=Tensor[(10, 6, 6), float64] */;
    %491 = atan(%490) /* ty=Tensor[(10, 6, 6), float64] */;
    %492 = cast(%491, dtype="float64") /* ty=Tensor[(10, 6, 6), float64] */;
    %493 = %485.1;
    %494 = %486.0;
    %495 = %489.2;
    %496 = sin(%492) /* ty=Tensor[(10, 6, 6), float64] */;
    (%493, %494, %495, %var_6612, %496)
  };
  %497(%var_6628, %var_6629) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float32], uint8, Tensor[(10, 6, 6), float64]) */
}

def @func_2407() -> (Tensor[(2, 8, 12), float64],) {
  %498 = @func_1850() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
  %499 = %498.0;
  (%499,)
}

def @func_9658() -> (Tensor[(72), float64],) {
  %502 = fn () -> (Tensor[(72), float64],) {
    %500 = @func_7783() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64]) */;
    %501 = %500.0;
    (%501,)
  };
  %502() /* ty=(Tensor[(72), float64],) */
}

def @func_5163() -> (Tensor[(2, 8, 12), float64],) {
  %505 = fn () -> (Tensor[(2, 8, 12), float64],) {
    %503 = @func_1461() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %504 = %503.0;
    (%504,)
  };
  %505() /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_5375() -> (Tensor[(2, 8, 12), float64],) {
  @func_5373() /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_8217() -> Tensor[(2, 8, 12), float32] {
  %506 = @func_4321() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
  %506.1
}

def @func_255() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */
}

def @func_5332() -> (Tensor[(2, 8, 12), float64],) {
  @func_5330() /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_9841(%var_9825: Tensor[(5, 3, 14), float64], %var_9826: Tensor[(5, 3, 14), float64], %var_9838: uint8) -> (Tensor[(5, 3, 14), float64], Tensor[(5, 3, 14), float32], Tensor[(2, 8, 12), float32], Tensor[(360), float64], uint8) {
  %507 = cast(%var_9826, dtype="float64") /* ty=Tensor[(5, 3, 14), float64] */;
  %508 = shape_of(%var_9825, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%var_9825, dtype="float64") /* ty=Tensor[(5, 3, 14), float64] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %511 = cast(%var_9825, dtype="float32") /* ty=Tensor[(5, 3, 14), float32] */;
  %512 = cast(meta[relay.Constant][16] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %513 = cast(%var_9838, dtype="uint8") /* ty=uint8 */;
  %514 = reshape(%512, newshape=[10, 6, 6]) /* ty=Tensor[(10, 6, 6), float64] */;
  %515 = reshape(%513, newshape=[]) /* ty=uint8 */;
  %516 = @func_6627(%514, %515) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float32], uint8, Tensor[(10, 6, 6), float64]) */;
  %517 = divide(%509, %510) /* ty=Tensor[(5, 3, 14), float64] */;
  %518 = erf(%511) /* ty=Tensor[(5, 3, 14), float32] */;
  %519 = %516.2;
  (%517, %518, %519, meta[relay.Constant][16] /* ty=Tensor[(360), float64] */, %var_9838)
}

def @func_11321(%var_11300: Tensor[(9, 7, 8), float32]) -> (Tensor[(9, 7, 8), bool], Tensor[(9, 7, 8), bool]) {
  %520 = cast(%var_11300, dtype="float32") /* ty=Tensor[(9, 7, 8), float32] */;
  %521 = acos(%520) /* ty=Tensor[(9, 7, 8), float32] */;
  %522 = cast(%var_11300, dtype="bool") /* ty=Tensor[(9, 7, 8), bool] */;
  %523 = shape_of(%521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%521, dtype="bool") /* ty=Tensor[(9, 7, 8), bool] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %526 = cast(%var_11300, dtype="bool") /* ty=Tensor[(9, 7, 8), bool] */;
  %527 = shape_of(%521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%521, dtype="bool") /* ty=Tensor[(9, 7, 8), bool] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %530 = equal(%524, %525) /* ty=Tensor[(9, 7, 8), bool] */;
  %531 = less_equal(%528, %529) /* ty=Tensor[(9, 7, 8), bool] */;
  (%530, %531)
}

def @func_6871() -> (Tensor[(2, 8, 12), float64],) {
  %534 = fn () -> (Tensor[(2, 8, 12), float64],) {
    %532 = @func_5807() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) */;
    %533 = %532.6;
    (%533,)
  };
  %534() /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_11695() -> (Tensor[(2, 8, 12), float64],) {
  %536 = fn () -> (Tensor[(2, 8, 12), float64],) {
    %535 = @func_10037() /* ty=Tensor[(2, 8, 12), float64] */;
    (%535,)
  };
  %536() /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_863() -> (Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) {
  %537 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %538 = cast(meta[relay.Constant][17] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %539 = reshape(%538, newshape=[3, 12, 2]) /* ty=Tensor[(3, 12, 2), float64] */;
  %540 = @func_378(%539) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %541 = %537.0;
  %542 = %540.0;
  (%541, %542, meta[relay.Constant][17] /* ty=Tensor[(72), float64] */)
}

def @func_9129() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) {
  @func_9127() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) */
}

def @func_3118(%var_3116: Tensor[(10, 15, 14), uint16], %var_3117: Tensor[(10, 15, 14), uint16]) -> (Tensor[(10, 15, 14), bool], Tensor[(3, 12, 2), bool]) {
  @func_3114(%var_3116, %var_3117) /* ty=(Tensor[(10, 15, 14), bool], Tensor[(3, 12, 2), bool]) */
}

def @func_7053(%var_7051: Tensor[(2, 8, 12), float32], %var_7052: Tensor[(18, 4), float64]) -> (Tensor[(2, 8, 12), int8], Tensor[(72), float64], Tensor[(18, 4), float64], Tensor[(2, 8, 12), float64]) {
  %556 = fn (%var_7027: Tensor[(2, 8, 12), float32], %var_7040: Tensor[(18, 4), float64]) -> (Tensor[(2, 8, 12), int8], Tensor[(72), float64], Tensor[(18, 4), float64], Tensor[(2, 8, 12), float64]) {
    %543 = @func_1975() /* ty=Tensor[(2, 8, 12), float32] */;
    %544 = cast(%var_7027, dtype="int8") /* ty=Tensor[(2, 8, 12), int8] */;
    %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
    %546 = cast(%543, dtype="int8") /* ty=Tensor[(2, 8, 12), int8] */;
    %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %548 = left_shift(%546, %547) /* ty=Tensor[(2, 8, 12), int8] */;
    %549 = cast(%548, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
    %550 = cast(%var_7040, dtype="float64") /* ty=Tensor[(18, 4), float64] */;
    %551 = reshape(%549, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
    %552 = reshape(%550, newshape=[72]) /* ty=Tensor[(72), float64] */;
    %553 = @func_845(%551, %552) /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32]) */;
    %554 = %553.3;
    %555 = @func_3629() /* ty=Tensor[(2, 8, 12), float64] */;
    (%548, %554, %var_7040, %555)
  };
  %556(%var_7051, %var_7052) /* ty=(Tensor[(2, 8, 12), int8], Tensor[(72), float64], Tensor[(18, 4), float64], Tensor[(2, 8, 12), float64]) */
}

def @func_911(%var_909: Tensor[(7, 8, 11), float32], %var_910: Tensor[(7, 8, 11), bool]) -> (Tensor[(7, 8, 11), bool],) {
  %569 = fn (%var_872: Tensor[(7, 8, 11), float32], %var_899: Tensor[(7, 8, 11), bool]) -> (Tensor[(7, 8, 11), bool],) {
    %557 = cast(%var_872, dtype="float32") /* ty=Tensor[(7, 8, 11), float32] */;
    %558 = log10(%557) /* ty=Tensor[(7, 8, 11), float32] */;
    %559 = cast(%var_872, dtype="bool") /* ty=Tensor[(7, 8, 11), bool] */;
    %560 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
    %561 = cast(%558, dtype="bool") /* ty=Tensor[(7, 8, 11), bool] */;
    %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %563 = logical_or(%561, %562) /* ty=Tensor[(7, 8, 11), bool] */;
    %564 = cast(%var_899, dtype="bool") /* ty=Tensor[(7, 8, 11), bool] */;
    %565 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
    %566 = cast(%563, dtype="bool") /* ty=Tensor[(7, 8, 11), bool] */;
    %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %568 = not_equal(%566, %567) /* ty=Tensor[(7, 8, 11), bool] */;
    (%568,)
  };
  %569(%var_909, %var_910) /* ty=(Tensor[(7, 8, 11), bool],) */
}

def @func_4712() -> (Tensor[(2, 8, 12), float64],) {
  %570 = @func_4651() /* ty=Tensor[(2, 8, 12), float64] */;
  (%570,)
}

def @func_5023() -> Tensor[(72), float64] {
  %572 = fn () -> Tensor[(72), float64] {
    %571 = @func_3970() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
    %571.0
  };
  %572() /* ty=Tensor[(72), float64] */
}

def @func_4747() -> Tensor[(72), float64] {
  %574 = fn () -> Tensor[(72), float64] {
    %573 = @func_2863() /* ty=(Tensor[(72), float64],) */;
    %573.0
  };
  %574() /* ty=Tensor[(72), float64] */
}

def @func_6316() -> Tensor[(2, 8, 12), float32] {
  %576 = fn () -> Tensor[(2, 8, 12), float32] {
    %575 = @func_4632() /* ty=(Tensor[(2, 8, 12), float32],) */;
    %575.0
  };
  %576() /* ty=Tensor[(2, 8, 12), float32] */
}

def @func_10366() -> Tensor[(13, 13, 8), float64] {
  %577 = @func_6850() /* ty=(Tensor[(13, 13, 8), float64],) */;
  %577.0
}

def @func_9361() -> (Tensor[(72), float64], Tensor[(3, 1, 2), float32], bool, Tensor[(6), bool], Tensor[(2, 8, 12), float32]) {
  %588 = fn () -> (Tensor[(72), float64], Tensor[(3, 1, 2), float32], bool, Tensor[(6), bool], Tensor[(2, 8, 12), float32]) {
    %578 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
    %579 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %580 = cast(meta[relay.Constant][18] /* ty=Tensor[(6), bool] */, dtype="bool") /* ty=Tensor[(6), bool] */;
    %581 = reshape(%579, newshape=[]) /* ty=bool */;
    %582 = reshape(%580, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), bool] */;
    %583 = @func_8547(%581, %582) /* ty=(Tensor[(3, 1, 2), float32],) */;
    %584 = @func_4808() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) */;
    %585 = %578.2;
    %586 = %583.0;
    %587 = %584.0;
    (%585, %586, False /* ty=bool */, meta[relay.Constant][18] /* ty=Tensor[(6), bool] */, %587)
  };
  %588() /* ty=(Tensor[(72), float64], Tensor[(3, 1, 2), float32], bool, Tensor[(6), bool], Tensor[(2, 8, 12), float32]) */
}

def @func_1326() -> Tensor[(2, 8, 12), float32] {
  @func_992() /* ty=Tensor[(2, 8, 12), float32] */
}

def @func_865() -> (Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) {
  @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */
}

def @func_1582() -> Tensor[(2, 8, 12), float64] {
  %589 = @func_1511() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %589.2
}

def @func_3629() -> Tensor[(2, 8, 12), float64] {
  %590 = @func_1975() /* ty=Tensor[(2, 8, 12), float32] */;
  %591 = cast(%590, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  erf(%591) /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_7129() -> (Tensor[(2, 8, 12), float64], Tensor[(72), float64]) {
  %595 = fn () -> (Tensor[(2, 8, 12), float64], Tensor[(72), float64]) {
    %592 = @func_2863() /* ty=(Tensor[(72), float64],) */;
    %593 = @func_3215() /* ty=Tensor[(2, 8, 12), float64] */;
    %594 = %592.0;
    (%593, %594)
  };
  %595() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(72), float64]) */
}

def @func_2148() -> Tensor[(2, 8, 12), float32] {
  %596 = @func_1850() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
  %596.1
}

def @func_9846(%var_9843: Tensor[(5, 3, 14), float64], %var_9844: Tensor[(5, 3, 14), float64], %var_9845: uint8) -> (Tensor[(5, 3, 14), float64], Tensor[(5, 3, 14), float32], Tensor[(2, 8, 12), float32], Tensor[(360), float64], uint8) {
  @func_9841(%var_9843, %var_9844, %var_9845) /* ty=(Tensor[(5, 3, 14), float64], Tensor[(5, 3, 14), float32], Tensor[(2, 8, 12), float32], Tensor[(360), float64], uint8) */
}

def @func_1217(%var_1215: Tensor[(2, 8, 12), float64]) -> (Tensor[(2, 8, 12), uint16], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(2, 8, 12), uint64]) {
  @func_1214(%var_1215) /* ty=(Tensor[(2, 8, 12), uint16], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(2, 8, 12), uint64]) */
}

def @func_1850() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) {
  %597 = @func_1461() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %598 = cast(meta[relay.Constant][19] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %599 = reshape(%598, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %600 = @func_690(%599) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
  %601 = %597.0;
  %602 = %600.0;
  (%601, %602, meta[relay.Constant][19] /* ty=Tensor[(72), float64] */)
}

def @func_7814() -> Tensor[(72), float64] {
  @func_4746() /* ty=Tensor[(72), float64] */
}

def @func_9797() -> (Tensor[(2, 8, 12), float32],) {
  @func_9795() /* ty=(Tensor[(2, 8, 12), float32],) */
}

def @func_1461() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  %603 = @func_731() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %604 = @func_1349() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %605 = %604.1;
  %606 = cast(%605, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %607 = %603.1;
  %608 = cosh(%606) /* ty=Tensor[(2, 8, 12), float32] */;
  (%607, %608)
}

def @func_4160(%var_4154: Tensor[(2100), uint16]) -> (Tensor[(2, 8, 12), float64], Tensor[(10, 15, 14), bool], Tensor[(2100), uint16]) {
  %609 = @func_1349() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %610 = cast(%var_4154, dtype="uint16") /* ty=Tensor[(2100), uint16] */;
  %611 = cast(%var_4154, dtype="uint16") /* ty=Tensor[(2100), uint16] */;
  %612 = reshape(%610, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), uint16] */;
  %613 = reshape(%611, newshape=[10, 15, 14]) /* ty=Tensor[(10, 15, 14), uint16] */;
  %614 = @func_3114(%612, %613) /* ty=(Tensor[(10, 15, 14), bool], Tensor[(3, 12, 2), bool]) */;
  %615 = %609.1;
  %616 = %614.0;
  (%615, %616, %var_4154)
}

def @func_381(%var_379: Tensor[(3, 12, 2), float64]) -> (Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  @func_378(%var_379) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */
}

def @func_7835() -> Tensor[(2, 8, 12), float64] {
  %617 = @func_7128() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(72), float64]) */;
  %617.0
}

def @func_5074() -> (Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(56), float64], Tensor[(72), float64]) {
  %626 = fn () -> (Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(56), float64], Tensor[(72), float64]) {
    %618 = @func_2591() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
    %619 = cast(meta[relay.Constant][20] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
    %620 = reshape(%619, newshape=[1, 56]) /* ty=Tensor[(1, 56), float64] */;
    %621 = @func_5006(%620) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(1, 56), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
    %622 = @func_2286() /* ty=(Tensor[(72), float64],) */;
    %623 = %618.1;
    %624 = %621.1;
    %625 = %622.0;
    (%623, %624, meta[relay.Constant][20] /* ty=Tensor[(56), float64] */, %625)
  };
  %626() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(56), float64], Tensor[(72), float64]) */
}

def @func_8551(%var_8549: bool, %var_8550: Tensor[(3, 1, 2), bool]) -> (Tensor[(3, 1, 2), float32],) {
  @func_8547(%var_8549, %var_8550) /* ty=(Tensor[(3, 1, 2), float32],) */
}

def @func_1257() -> (Tensor[(2, 8, 12), float64],) {
  @func_1255() /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_7794() -> Tensor[(72), float64] {
  @func_7792() /* ty=Tensor[(72), float64] */
}

def @func_9977() -> (Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(180), uint8]) {
  %634 = fn () -> (Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(180), uint8]) {
    %627 = cast(meta[relay.Constant][21] /* ty=Tensor[(180), uint8] */, dtype="uint8") /* ty=Tensor[(180), uint8] */;
    %628 = cast(meta[relay.Constant][21] /* ty=Tensor[(180), uint8] */, dtype="uint8") /* ty=Tensor[(180), uint8] */;
    %629 = reshape(%627, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), uint8] */;
    %630 = reshape(%628, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), uint8] */;
    %631 = @func_965(%629, %630) /* ty=(Tensor[(3, 10, 6), bool], Tensor[(72), float64]) */;
    %632 = @func_9364() /* ty=Tensor[(2, 8, 12), float32] */;
    %633 = %631.1;
    (%632, %633, meta[relay.Constant][21] /* ty=Tensor[(180), uint8] */)
  };
  %634() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(180), uint8]) */
}

def @func_10974() -> (Tensor[(72), float64], Tensor[(72), float64], Tensor[(72), float64]) {
  %640 = fn () -> (Tensor[(72), float64], Tensor[(72), float64], Tensor[(72), float64]) {
    %635 = @func_9569() /* ty=(Tensor[(72), float64],) */;
    %636 = @func_7783() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64]) */;
    %637 = @func_2518() /* ty=Tensor[(72), float64] */;
    %638 = %635.0;
    %639 = %636.0;
    (%637, %638, %639)
  };
  %640() /* ty=(Tensor[(72), float64], Tensor[(72), float64], Tensor[(72), float64]) */
}

def @func_11171(%var_11157: Tensor[(12, 14, 1), uint32]) -> (Tensor[(12, 14, 14), bool],) {
  %641 = cast(%var_11157, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %642 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 14, 14), uint32] */, dtype="bool") /* ty=Tensor[(12, 14, 14), bool] */;
  %643 = not_equal(%641, %642) /* ty=Tensor[(12, 14, 14), bool] */;
  %644 = cast(%643, dtype="float32") /* ty=Tensor[(12, 14, 14), float32] */;
  %645 = asin(%644) /* ty=Tensor[(12, 14, 14), float32] */;
  %646 = cast(%645, dtype="bool") /* ty=Tensor[(12, 14, 14), bool] */;
  %647 = cast(%var_11157, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %648 = less(%646, %647) /* ty=Tensor[(12, 14, 14), bool] */;
  (%648,)
}

def @func_2452() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64]) {
  @func_2450() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64]) */
}

def @func_7792() -> Tensor[(72), float64] {
  %649 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
  %649.2
}

def @func_7222() -> Tensor[(2, 8, 12), float64] {
  %650 = @func_4462() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float32]) */;
  %650.1
}

def @func_10275(%var_10273: Tensor[(13, 14, 1), float64], %var_10274: Tensor[(72), float64]) -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(13, 14, 72), float64], Tensor[(13, 14, ?), uint64]) {
  %668 = fn (%var_10194: Tensor[(13, 14, 1), float64], %var_10246: Tensor[(72), float64]) -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(13, 14, 72), float64], Tensor[(13, 14, ?), uint64]) {
    %651 = @func_9508() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %652 = cast(%var_10246, dtype="float64") /* ty=Tensor[(72), float64] */;
    %653 = reshape(%652, newshape=[3, 12, 2]) /* ty=Tensor[(3, 12, 2), float64] */;
    %654 = @func_378(%653) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %655 = cast(%var_10194, dtype="float64") /* ty=Tensor[(13, 14, 1), float64] */;
    %656 = cosh(%655) /* ty=Tensor[(13, 14, 1), float64] */;
    %657 = cast(%656, dtype="float64") /* ty=Tensor[(13, 14, 1), float64] */;
    %658 = cast(%var_10246, dtype="float64") /* ty=Tensor[(72), float64] */;
    %659 = cast(%var_10194, dtype="uint64") /* ty=Tensor[(13, 14, 1), uint64] */;
    %660 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
    %661 = cast(%656, dtype="uint64") /* ty=Tensor[(13, 14, 1), uint64] */;
    %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %663 = @func_6315() /* ty=Tensor[(2, 8, 12), float32] */;
    %664 = %651.2;
    %665 = %654.1;
    %666 = multiply(%657, %658) /* ty=Tensor[(13, 14, 72), float64] */;
    %667 = left_shift(%661, %662) /* ty=Tensor[(13, 14, ?), uint64] */;
    (%663, %664, %665, %666, %667)
  };
  %668(%var_10273, %var_10274) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(13, 14, 72), float64], Tensor[(13, 14, ?), uint64]) */
}

def @func_1512() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
  %674 = fn () -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
    %669 = @func_1255() /* ty=(Tensor[(2, 8, 12), float64],) */;
    %670 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %671 = @func_1326() /* ty=Tensor[(2, 8, 12), float32] */;
    %672 = %669.0;
    %673 = %670.2;
    (%671, %672, %673)
  };
  %674() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */
}

def @func_3736() -> (Tensor[(2, 8, 12), float64],) {
  %677 = fn () -> (Tensor[(2, 8, 12), float64],) {
    %675 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
    %676 = %675.1;
    (%676,)
  };
  %677() /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_6288() -> (Tensor[(2, 8, 12), float64],) {
  %679 = fn () -> (Tensor[(2, 8, 12), float64],) {
    %678 = @func_1582() /* ty=Tensor[(2, 8, 12), float64] */;
    (%678,)
  };
  %679() /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_3971() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float32]) {
  %683 = fn () -> (Tensor[(72), float64], Tensor[(2, 8, 12), float32]) {
    %680 = @func_2478() /* ty=(Tensor[(72), float64],) */;
    %681 = %680.0;
    %682 = @func_1975() /* ty=Tensor[(2, 8, 12), float32] */;
    (%681, %682)
  };
  %683() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */
}

def @func_1350() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
  %688 = fn () -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
    %684 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
    %685 = @func_1255() /* ty=(Tensor[(2, 8, 12), float64],) */;
    %686 = %684.1;
    %687 = %685.0;
    (%686, %687)
  };
  %688() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */
}

def @func_7785() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64]) {
  @func_7783() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64]) */
}

def @func_2287() -> (Tensor[(72), float64],) {
  %691 = fn () -> (Tensor[(72), float64],) {
    %689 = @func_1523() /* ty=(Tensor[(72), float64],) */;
    %690 = %689.0;
    (%690,)
  };
  %691() /* ty=(Tensor[(72), float64],) */
}

def @func_6206() -> (Tensor[(2, 8, 12), float32], Tensor[(5, 3, 1), uint8], uint8, Tensor[(15), uint8], Tensor[(72), float64]) {
  %703 = fn () -> (Tensor[(2, 8, 12), float32], Tensor[(5, 3, 1), uint8], uint8, Tensor[(15), uint8], Tensor[(72), float64]) {
    %692 = cast(meta[relay.Constant][23] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %693 = cast(meta[relay.Constant][24] /* ty=Tensor[(15), uint8] */, dtype="uint8") /* ty=Tensor[(15), uint8] */;
    %694 = @func_992() /* ty=Tensor[(2, 8, 12), float32] */;
    %695 = cast(%694, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
    %696 = reshape(%692, newshape=[]) /* ty=uint8 */;
    %697 = reshape(%693, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), uint8] */;
    %698 = reshape(%695, newshape=[192]) /* ty=Tensor[(192), float32] */;
    %699 = @func_3270(%696, %697, %698) /* ty=(Tensor[(5, 3, 1), uint8], Tensor[(2, 8, 12), float32], Tensor[(192), float32]) */;
    %700 = @func_1296() /* ty=(Tensor[(72), float64],) */;
    %701 = %699.0;
    %702 = %700.0;
    (%694, %701, meta[relay.Constant][23] /* ty=uint8 */, meta[relay.Constant][24] /* ty=Tensor[(15), uint8] */, %702)
  };
  %703() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(5, 3, 1), uint8], uint8, Tensor[(15), uint8], Tensor[(72), float64]) */
}

def @func_5237() -> Tensor[(192), float32] {
  %705 = fn () -> Tensor[(192), float32] {
    %704 = @func_4855() /* ty=(Tensor[(192), float32], Tensor[(72), float64]) */;
    %704.0
  };
  %705() /* ty=Tensor[(192), float32] */
}

def @func_11617() -> (Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(72), float64], Tensor[(72), float64]) {
  @func_11615() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(72), float64], Tensor[(72), float64]) */
}

def @func_9571() -> (Tensor[(72), float64],) {
  @func_9569() /* ty=(Tensor[(72), float64],) */
}

def @func_2811(%var_2788: Tensor[(616), float32]) -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(180), uint8], Tensor[(2, 8, 12), bool], Tensor[(72), float64], Tensor[(7, 8, 11), bool], Tensor[(616), float32], Tensor[(7, 8, 11), bool], Tensor[(72), float64], Tensor[(72), float64]) {
  %706 = @func_2407() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %707 = cast(meta[relay.Constant][25] /* ty=Tensor[(180), uint8] */, dtype="uint8") /* ty=Tensor[(180), uint8] */;
  %708 = cast(meta[relay.Constant][25] /* ty=Tensor[(180), uint8] */, dtype="uint8") /* ty=Tensor[(180), uint8] */;
  %709 = reshape(%707, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), uint8] */;
  %710 = reshape(%708, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), uint8] */;
  %711 = @func_965(%709, %710) /* ty=(Tensor[(3, 10, 6), bool], Tensor[(72), float64]) */;
  %712 = @func_1125() /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(180), uint8], Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
  %713 = %712.1;
  %714 = @func_1125() /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(180), uint8], Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
  %715 = %714.7;
  %716 = cast(%715, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %717 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %718 = cast(%713, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %720 = @func_2181() /* ty=(Tensor[(72), float64],) */;
  %721 = cast(%var_2788, dtype="float32") /* ty=Tensor[(616), float32] */;
  %722 = cast(%var_2788, dtype="bool") /* ty=Tensor[(616), bool] */;
  %723 = reshape(%721, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
  %724 = reshape(%722, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), bool] */;
  %725 = @func_908(%723, %724) /* ty=(Tensor[(7, 8, 11), bool],) */;
  %726 = %725.0;
  %727 = cast(%726, dtype="float32") /* ty=Tensor[(7, 8, 11), float32] */;
  %728 = cast(%var_2788, dtype="bool") /* ty=Tensor[(616), bool] */;
  %729 = reshape(%727, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
  %730 = reshape(%728, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), bool] */;
  %731 = @func_908(%729, %730) /* ty=(Tensor[(7, 8, 11), bool],) */;
  %732 = @func_2181() /* ty=(Tensor[(72), float64],) */;
  %733 = @func_1296() /* ty=(Tensor[(72), float64],) */;
  %734 = %706.0;
  %735 = @func_760() /* ty=Tensor[(2, 8, 12), float64] */;
  %736 = %711.1;
  %737 = not_equal(%718, %719) /* ty=Tensor[(2, 8, 12), bool] */;
  %738 = %720.0;
  %739 = %731.0;
  %740 = %732.0;
  %741 = %733.0;
  (%734, %735, %736, meta[relay.Constant][25] /* ty=Tensor[(180), uint8] */, %737, %738, %726, %var_2788, %739, %740, %741)
}

def @func_3955() -> Tensor[(2, 8, 12), float64] {
  %742 = @func_731() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %742.1
}

def @func_10605() -> (Tensor[(192), float32],) {
  %745 = fn () -> (Tensor[(192), float32],) {
    %743 = @func_4855() /* ty=(Tensor[(192), float32], Tensor[(72), float64]) */;
    %744 = %743.0;
    (%744,)
  };
  %745() /* ty=(Tensor[(192), float32],) */
}

def @func_7170() -> Tensor[(72), float64] {
  %747 = fn () -> Tensor[(72), float64] {
    %746 = @func_2478() /* ty=(Tensor[(72), float64],) */;
    %746.0
  };
  %747() /* ty=Tensor[(72), float64] */
}

def @func_10175(%var_10144: Tensor[(11, 4, 16), float64]) -> (Tensor[(11, 4, 16), float64], Tensor[(11, 4, 16), float32], Tensor[(2, 8, 12), float32]) {
  %748 = cast(%var_10144, dtype="float64") /* ty=Tensor[(11, 4, 16), float64] */;
  %749 = cast(%var_10144, dtype="float32") /* ty=Tensor[(11, 4, 16), float32] */;
  %750 = log10(%748) /* ty=Tensor[(11, 4, 16), float64] */;
  %751 = atan(%749) /* ty=Tensor[(11, 4, 16), float32] */;
  %752 = @func_7580() /* ty=Tensor[(2, 8, 12), float32] */;
  (%750, %751, %752)
}

def @func_10178(%var_10176: Tensor[(11, 4, 16), float64]) -> (Tensor[(11, 4, 16), float64], Tensor[(11, 4, 16), float32], Tensor[(2, 8, 12), float32]) {
  @func_10175(%var_10176) /* ty=(Tensor[(11, 4, 16), float64], Tensor[(11, 4, 16), float32], Tensor[(2, 8, 12), float32]) */
}

def @func_3216() -> Tensor[(2, 8, 12), float64] {
  %754 = fn () -> Tensor[(2, 8, 12), float64] {
    %753 = @func_1349() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
    %753.0
  };
  %754() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_10649() -> (Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float64]) {
  @func_10647() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float64]) */
}

def @func_2243() -> Tensor[(2, 8, 12), float64] {
  @func_2241() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_9956() -> Tensor[(2, 8, 12), float64] {
  @func_9649() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_4632() -> (Tensor[(2, 8, 12), float32],) {
  %755 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %756 = %755.3;
  (%756,)
}

def @func_1852() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) {
  @func_1850() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */
}

def @func_7428(%var_7426: Tensor[(11, 13, 5), float32], %var_7427: Tensor[(1188), float32]) -> (Tensor[(11, 13, 5), float32], Tensor[(6, 6, 3), bool], Tensor[(72), float64], Tensor[(1188), float32]) {
  %767 = fn (%var_7396: Tensor[(11, 13, 5), float32], %var_7423: Tensor[(1188), float32]) -> (Tensor[(11, 13, 5), float32], Tensor[(6, 6, 3), bool], Tensor[(72), float64], Tensor[(1188), float32]) {
    %757 = cast(meta[relay.Constant][26] /* ty=Tensor[(11, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 13, 5), float32] */;
    %758 = shape_of(%var_7396, dtype="int32") /* ty=Tensor[(3), int32] */;
    %759 = cast(%var_7396, dtype="float32") /* ty=Tensor[(11, 13, 5), float32] */;
    %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %761 = cast(%var_7423, dtype="float32") /* ty=Tensor[(1188), float32] */;
    %762 = reshape(%761, newshape=[18, 66]) /* ty=Tensor[(18, 66), float32] */;
    %763 = @func_6740(%762) /* ty=(Tensor[(72), float64], Tensor[(72), float64], Tensor[(11, 9, 12), float32], Tensor[(18, 66), float32]) */;
    %764 = mod(%759, %760) /* ty=Tensor[(11, 13, 5), float32] */;
    %765 = @func_5943() /* ty=Tensor[(6, 6, 3), bool] */;
    %766 = %763.1;
    (%764, %765, %766, %var_7423)
  };
  %767(%var_7426, %var_7427) /* ty=(Tensor[(11, 13, 5), float32], Tensor[(6, 6, 3), bool], Tensor[(72), float64], Tensor[(1188), float32]) */
}

def @func_11262() -> (Tensor[(7, 15, 15), float32],) {
  %768 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 15, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 15, 15), float32] */;
  %769 = asin(%768) /* ty=Tensor[(7, 15, 15), float32] */;
  (%769,)
}

def @func_11216(%var_11215: Tensor[(11, 15, 2), float64]) -> Tensor[(11, 15, 2), float64] {
  %771 = fn (%var_11204: Tensor[(11, 15, 2), float64]) -> Tensor[(11, 15, 2), float64] {
    %770 = cast(%var_11204, dtype="float64") /* ty=Tensor[(11, 15, 2), float64] */;
    log(%770) /* ty=Tensor[(11, 15, 2), float64] */
  };
  %771(%var_11215) /* ty=Tensor[(11, 15, 2), float64] */
}

def @func_11615() -> (Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(72), float64], Tensor[(72), float64]) {
  %772 = @func_9885() /* ty=(Tensor[(72), float64], Tensor[(72), float64]) */;
  %773 = @func_9569() /* ty=(Tensor[(72), float64],) */;
  %774 = @func_9569() /* ty=(Tensor[(72), float64],) */;
  %775 = @func_3215() /* ty=Tensor[(2, 8, 12), float64] */;
  %776 = %772.1;
  %777 = @func_1326() /* ty=Tensor[(2, 8, 12), float32] */;
  %778 = @func_7814() /* ty=Tensor[(72), float64] */;
  %779 = %773.0;
  %780 = %774.0;
  (%775, %776, %777, %778, %779, %780)
}

def @func_6996() -> (Tensor[(2, 8, 12), float64],) {
  %783 = fn () -> (Tensor[(2, 8, 12), float64],) {
    %781 = @func_1349() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
    %782 = %781.0;
    (%782,)
  };
  %783() /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_502() -> (Tensor[(2, 8, 12), float32],) {
  %786 = fn () -> (Tensor[(2, 8, 12), float32],) {
    %784 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %785 = %784.1;
    (%785,)
  };
  %786() /* ty=(Tensor[(2, 8, 12), float32],) */
}

def @func_2238() -> (Tensor[(2, 8, 12), float64],) {
  %791 = fn () -> (Tensor[(2, 8, 12), float64],) {
    %787 = @func_1850() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
    %788 = %787.1;
    %789 = cast(%788, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
    %790 = tan(%789) /* ty=Tensor[(2, 8, 12), float64] */;
    (%790,)
  };
  %791() /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_7783() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64]) {
  %792 = @func_2237() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %793 = @func_7169() /* ty=Tensor[(72), float64] */;
  %794 = %792.0;
  (%793, %794)
}

def @func_6398() -> Tensor[(72), float64] {
  %796 = fn () -> Tensor[(72), float64] {
    %795 = @func_2478() /* ty=(Tensor[(72), float64],) */;
    %795.0
  };
  %796() /* ty=Tensor[(72), float64] */
}

def @func_5134() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
  %801 = fn () -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) {
    %797 = @func_2181() /* ty=(Tensor[(72), float64],) */;
    %798 = %797.0;
    %799 = @func_3629() /* ty=Tensor[(2, 8, 12), float64] */;
    %800 = @func_3955() /* ty=Tensor[(2, 8, 12), float64] */;
    (%798, %799, %800)
  };
  %801() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */
}

def @func_2372(%var_2370: Tensor[(1, 8, 7), float64]) -> (Tensor[(1, 8, 7), float64],) {
  @func_2369(%var_2370) /* ty=(Tensor[(1, 8, 7), float64],) */
}

def @func_3592() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(7, 8, 11), bool], Tensor[(616, 1), float32]) {
  @func_3590() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(7, 8, 11), bool], Tensor[(616, 1), float32]) */
}

def @func_7551(%var_7550: float64) -> (Tensor[(2, 8, 12), float64], Tensor[(1, 270), bool], float64, Tensor[(270), float64], Tensor[(576), float64], Tensor[(1188), float32], Tensor[(715), float32], Tensor[(1188), float32]) {
  %818 = fn (%var_7533: float64) -> (Tensor[(2, 8, 12), float64], Tensor[(1, 270), bool], float64, Tensor[(270), float64], Tensor[(576), float64], Tensor[(1188), float32], Tensor[(715), float32], Tensor[(1188), float32]) {
    %802 = @func_5330() /* ty=(Tensor[(2, 8, 12), float64],) */;
    %803 = cast(%var_7533, dtype="float64") /* ty=float64 */;
    %804 = cast(meta[relay.Constant][28] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
    %805 = cast(meta[relay.Constant][29] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
    %806 = reshape(%803, newshape=[]) /* ty=float64 */;
    %807 = reshape(%804, newshape=[1, 270]) /* ty=Tensor[(1, 270), float64] */;
    %808 = reshape(%805, newshape=[576]) /* ty=Tensor[(576), float64] */;
    %809 = @func_4281(%806, %807, %808) /* ty=(Tensor[(5, 6, 9), float64], Tensor[(576), float64], Tensor[(2, 8, 12), float32], Tensor[(1, 270), bool]) */;
    %810 = cast(meta[relay.Constant][30] /* ty=Tensor[(715), float32] */, dtype="float32") /* ty=Tensor[(715), float32] */;
    %811 = cast(meta[relay.Constant][31] /* ty=Tensor[(1188), float32] */, dtype="float32") /* ty=Tensor[(1188), float32] */;
    %812 = reshape(%810, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), float32] */;
    %813 = reshape(%811, newshape=[1188]) /* ty=Tensor[(1188), float32] */;
    %814 = @func_7425(%812, %813) /* ty=(Tensor[(11, 13, 5), float32], Tensor[(6, 6, 3), bool], Tensor[(72), float64], Tensor[(1188), float32]) */;
    %815 = %802.0;
    %816 = %809.3;
    %817 = %814.3;
    (%815, %816, %var_7533, meta[relay.Constant][28] /* ty=Tensor[(270), float64] */, meta[relay.Constant][29] /* ty=Tensor[(576), float64] */, %817, meta[relay.Constant][30] /* ty=Tensor[(715), float32] */, meta[relay.Constant][31] /* ty=Tensor[(1188), float32] */)
  };
  %818(%var_7550) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(1, 270), bool], float64, Tensor[(270), float64], Tensor[(576), float64], Tensor[(1188), float32], Tensor[(715), float32], Tensor[(1188), float32]) */
}

def @func_5225() -> (Tensor[(2, 8, 12), float64], Tensor[(72), float64]) {
  %821 = fn () -> (Tensor[(2, 8, 12), float64], Tensor[(72), float64]) {
    %819 = @func_760() /* ty=Tensor[(2, 8, 12), float64] */;
    %820 = @func_4746() /* ty=Tensor[(72), float64] */;
    (%819, %820)
  };
  %821() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(72), float64]) */
}

def @func_10019() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  %826 = fn () -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
    %822 = @func_4550() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(2, 8, 12), float64]) */;
    %823 = @func_8822() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
    %824 = %822.2;
    %825 = %823.1;
    (%824, %825)
  };
  %826() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */
}

def @func_9651() -> Tensor[(2, 8, 12), float64] {
  @func_9649() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_2450() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64]) {
  %827 = @func_2181() /* ty=(Tensor[(72), float64],) */;
  %828 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %829 = %827.0;
  %830 = %828.0;
  (%829, %830)
}

def @func_760() -> Tensor[(2, 8, 12), float64] {
  %831 = @func_731() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %831.0
}

def @func_8278() -> (Tensor[(2, 8, 12), float64], Tensor[(13, 6, 14), uint8], Tensor[(1092), uint8], Tensor[(2, 8, 12), float64]) {
  @func_8276() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(13, 6, 14), uint8], Tensor[(1092), uint8], Tensor[(2, 8, 12), float64]) */
}

def @func_11037() -> Tensor[(2, 8, 12), float32] {
  %832 = fn () -> Tensor[(2, 8, 12), float32] {
    @func_2148() /* ty=Tensor[(2, 8, 12), float32] */
  };
  %832() /* ty=Tensor[(2, 8, 12), float32] */
}

def @func_1126() -> (Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(180), uint8], Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) {
  %867 = fn () -> (Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(180), uint8], Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) {
    %833 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
    %834 = %833.1;
    %835 = cast(%834, dtype="float64") /* ty=Tensor[(3, 12, 2), float64] */;
    %836 = reshape(%835, newshape=[72]) /* ty=Tensor[(72), float64] */;
    %837 = @func_690(%836) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
    %838 = cast(meta[relay.Constant][32] /* ty=Tensor[(180), uint8] */, dtype="uint8") /* ty=Tensor[(180), uint8] */;
    %839 = cast(meta[relay.Constant][32] /* ty=Tensor[(180), uint8] */, dtype="uint8") /* ty=Tensor[(180), uint8] */;
    %840 = reshape(%838, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), uint8] */;
    %841 = reshape(%839, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), uint8] */;
    %842 = @func_965(%840, %841) /* ty=(Tensor[(3, 10, 6), bool], Tensor[(72), float64]) */;
    %843 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
    %844 = %843.1;
    %845 = cast(%844, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
    %846 = exp(%845) /* ty=Tensor[(2, 8, 12), float32] */;
    %847 = cast(%846, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
    %848 = log10(%847) /* ty=Tensor[(2, 8, 12), float64] */;
    %849 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
    %850 = %849.0;
    %851 = cast(%850, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
    %852 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
    %853 = cast(%848, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
    %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %855 = cast(%846, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
    %856 = reshape(%855, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float32] */;
    %857 = @func_666(%856) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
    %858 = %842.1;
    %859 = cast(%858, dtype="float64") /* ty=Tensor[(72), float64] */;
    %860 = reshape(%859, newshape=[3, 12, 2]) /* ty=Tensor[(3, 12, 2), float64] */;
    %861 = @func_378(%860) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %862 = %837.2;
    %863 = equal(%853, %854) /* ty=Tensor[(2, 8, 12), bool] */;
    %864 = %857.1;
    %865 = %861.2;
    %866 = @func_992() /* ty=Tensor[(2, 8, 12), float32] */;
    (%834, %862, %858, meta[relay.Constant][32] /* ty=Tensor[(180), uint8] */, %863, %864, %865, %866)
  };
  %867() /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(180), uint8], Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */
}

def @func_9887() -> (Tensor[(72), float64], Tensor[(72), float64]) {
  @func_9885() /* ty=(Tensor[(72), float64], Tensor[(72), float64]) */
}

def @func_3114(%var_3034: Tensor[(10, 15, 14), uint16], %var_3035: Tensor[(10, 15, 14), uint16]) -> (Tensor[(10, 15, 14), bool], Tensor[(3, 12, 2), bool]) {
  %868 = cast(%var_3035, dtype="bool") /* ty=Tensor[(10, 15, 14), bool] */;
  %869 = shape_of(%var_3034, dtype="int32") /* ty=Tensor[(3), int32] */;
  %870 = cast(%var_3034, dtype="bool") /* ty=Tensor[(10, 15, 14), bool] */;
  %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %872 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
  %873 = %872.1;
  %874 = cast(%873, dtype="float64") /* ty=Tensor[(3, 12, 2), float64] */;
  %875 = log10(%874) /* ty=Tensor[(3, 12, 2), float64] */;
  %876 = cast(%875, dtype="float64") /* ty=Tensor[(3, 12, 2), float64] */;
  %877 = sqrt(%876) /* ty=Tensor[(3, 12, 2), float64] */;
  %878 = cast(%877, dtype="float32") /* ty=Tensor[(3, 12, 2), float32] */;
  %879 = cosh(%878) /* ty=Tensor[(3, 12, 2), float32] */;
  %880 = cast(%875, dtype="bool") /* ty=Tensor[(3, 12, 2), bool] */;
  %881 = shape_of(%879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(%879, dtype="bool") /* ty=Tensor[(3, 12, 2), bool] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %884 = greater_equal(%870, %871) /* ty=Tensor[(10, 15, 14), bool] */;
  %885 = equal(%882, %883) /* ty=Tensor[(3, 12, 2), bool] */;
  (%884, %885)
}

def @func_4132(%var_4130: Tensor[(1, 6, 1), float32], %var_4131: Tensor[(9, 6, 11), float32]) -> (Tensor[(9, 6, 11), bool], Tensor[(?, 6, ?), uint16]) {
  %908 = fn (%var_4080: Tensor[(1, 6, 1), float32], %var_4099: Tensor[(9, 6, 11), float32]) -> (Tensor[(9, 6, 11), bool], Tensor[(?, 6, ?), uint16]) {
    %886 = cast(%var_4080, dtype="float32") /* ty=Tensor[(1, 6, 1), float32] */;
    %887 = sin(%886) /* ty=Tensor[(1, 6, 1), float32] */;
    %888 = cast(%var_4080, dtype="int64") /* ty=Tensor[(1, 6, 1), int64] */;
    %889 = shape_of(%887, dtype="int32") /* ty=Tensor[(3), int32] */;
    %890 = cast(%887, dtype="int64") /* ty=Tensor[(1, 6, 1), int64] */;
    %891 = dyn.reshape(%888, %889, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %892 = bitwise_and(%890, %891) /* ty=Tensor[(?, 6, ?), int64] */;
    %893 = cast(%892, dtype="float64") /* ty=Tensor[(?, 6, ?), float64] */;
    %894 = exp(%893) /* ty=Tensor[(?, 6, ?), float64] */;
    %895 = cast(%894, dtype="float32") /* ty=Tensor[(?, 6, ?), float32] */;
    %896 = shape_of(%887, dtype="int32") /* ty=Tensor[(3), int32] */;
    %897 = cast(%887, dtype="float32") /* ty=Tensor[(1, 6, 1), float32] */;
    %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %899 = floor_divide(%897, %898) /* ty=Tensor[(?, 6, ?), float32] */;
    %900 = cast(%899, dtype="bool") /* ty=Tensor[(?, 6, ?), bool] */;
    %901 = cast(%var_4099, dtype="bool") /* ty=Tensor[(9, 6, 11), bool] */;
    %902 = cast(%892, dtype="uint16") /* ty=Tensor[(?, 6, ?), uint16] */;
    %903 = shape_of(%887, dtype="int32") /* ty=Tensor[(3), int32] */;
    %904 = cast(%887, dtype="uint16") /* ty=Tensor[(1, 6, 1), uint16] */;
    %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %906 = less(%900, %901) /* ty=Tensor[(9, 6, 11), bool] */;
    %907 = maximum(%904, %905) /* ty=Tensor[(?, 6, ?), uint16] */;
    (%906, %907)
  };
  %908(%var_4130, %var_4131) /* ty=(Tensor[(9, 6, 11), bool], Tensor[(?, 6, ?), uint16]) */
}

def @func_4652() -> Tensor[(2, 8, 12), float64] {
  %909 = fn () -> Tensor[(2, 8, 12), float64] {
    @func_760() /* ty=Tensor[(2, 8, 12), float64] */
  };
  %909() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_4281(%var_4240: float64, %var_4241: Tensor[(1, 270), float64], %var_4242: Tensor[(576), float64]) -> (Tensor[(5, 6, 9), float64], Tensor[(576), float64], Tensor[(2, 8, 12), float32], Tensor[(1, 270), bool]) {
  %910 = cast(%var_4240, dtype="float64") /* ty=float64 */;
  %911 = cast(%var_4241, dtype="float64") /* ty=Tensor[(1, 270), float64] */;
  %912 = cast(%var_4242, dtype="float64") /* ty=Tensor[(576), float64] */;
  %913 = reshape(%910, newshape=[]) /* ty=float64 */;
  %914 = reshape(%911, newshape=[5, 6, 9]) /* ty=Tensor[(5, 6, 9), float64] */;
  %915 = reshape(%912, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), float64] */;
  %916 = @func_3355(%913, %914, %915) /* ty=(Tensor[(5, 6, 9), float64], Tensor[(6, 8, 12), float32], Tensor[(6, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(4, 48), float32]) */;
  %917 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %918 = %917.0;
  %919 = cast(%918, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %920 = cast(%var_4241, dtype="bool") /* ty=Tensor[(1, 270), bool] */;
  %921 = cast(%var_4240, dtype="bool") /* ty=bool */;
  %922 = %916.0;
  %923 = log(%919) /* ty=Tensor[(2, 8, 12), float32] */;
  %924 = logical_and(%920, %921) /* ty=Tensor[(1, 270), bool] */;
  (%922, %var_4242, %923, %924)
}

def @func_762() -> Tensor[(2, 8, 12), float64] {
  @func_760() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_6949(%var_6948: uint8) -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], uint8, Tensor[(72), float64]) {
  %934 = fn (%var_6933: uint8) -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], uint8, Tensor[(72), float64]) {
    %925 = @func_6870() /* ty=(Tensor[(2, 8, 12), float64],) */;
    %926 = @func_1349() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
    %927 = cast(%var_6933, dtype="uint8") /* ty=uint8 */;
    %928 = reshape(%927, newshape=[]) /* ty=uint8 */;
    %929 = @func_4030(%928) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float32], Tensor[(5, 3, 1), uint8], uint8, Tensor[(15), uint8], Tensor[(2, 8, 12), uint16], Tensor[(2, 8, 12), float64]) */;
    %930 = %925.0;
    %931 = %926.0;
    %932 = %929.0;
    %933 = @func_6397() /* ty=Tensor[(72), float64] */;
    (%930, %931, %932, %var_6933, %933)
  };
  %934(%var_6948) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], uint8, Tensor[(72), float64]) */
}

def @func_10135() -> (Tensor[(2, 8, 12), float64], Tensor[(16, 16, 9), uint16], Tensor[(2304), uint16]) {
  @func_10133() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(16, 16, 9), uint16], Tensor[(2304), uint16]) */
}

def @func_8879() -> (Tensor[(2, 8, 12), float64], Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(13, 13, 8), float32]) {
  %935 = @func_6850() /* ty=(Tensor[(13, 13, 8), float64],) */;
  %936 = @func_1642() /* ty=(Tensor[(13, 13, 8), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float64]) */;
  %937 = @func_4504() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %938 = @func_3686() /* ty=(Tensor[(13, 13, 8), float64],) */;
  %939 = %938.0;
  %940 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 13, 8), float64] */, dtype="float32") /* ty=Tensor[(13, 13, 8), float32] */;
  %941 = shape_of(%939, dtype="int32") /* ty=Tensor[(3), int32] */;
  %942 = cast(%939, dtype="float32") /* ty=Tensor[(13, 13, 8), float32] */;
  %943 = dyn.reshape(%940, %941, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %944 = @func_7222() /* ty=Tensor[(2, 8, 12), float64] */;
  %945 = %935.0;
  %946 = %936.3;
  %947 = %937.0;
  %948 = floor_mod(%942, %943) /* ty=Tensor[(13, 13, 8), float32] */;
  (%944, %945, %946, %947, %948)
}

def @func_9411() -> Tensor[(72), float64] {
  @func_9409() /* ty=Tensor[(72), float64] */
}

def @func_4462() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float32]) {
  %949 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
  %950 = @func_2241() /* ty=Tensor[(2, 8, 12), float64] */;
  %951 = cast(%950, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %952 = reshape(%951, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %953 = @func_3867(%952) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(192), float32], Tensor[(72), float64]) */;
  %954 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %955 = %949.0;
  %956 = %953.1;
  %957 = %954.1;
  (%955, %950, %956, %957)
}

def @func_11118() -> (Tensor[(72), float64],) {
  %959 = fn () -> (Tensor[(72), float64],) {
    %958 = @func_7792() /* ty=Tensor[(72), float64] */;
    (%958,)
  };
  %959() /* ty=(Tensor[(72), float64],) */
}

def @func_9374() -> (Tensor[(2, 8, 12), float32],) {
  %962 = fn () -> (Tensor[(2, 8, 12), float32],) {
    %960 = @func_8822() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */;
    %961 = %960.1;
    (%961,)
  };
  %962() /* ty=(Tensor[(2, 8, 12), float32],) */
}

def @func_1337(%var_1335: Tensor[(180), uint8]) -> (Tensor[(2, 8, 12), float64], Tensor[(3, 10, 6), bool], Tensor[(180), uint8]) {
  @func_1334(%var_1335) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 10, 6), bool], Tensor[(180), uint8]) */
}

def @func_317() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  %963 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %964 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %965 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %966 = @func_253() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %967 = %963.0;
  %968 = %964.0;
  %969 = %965.0;
  %970 = %966.1;
  (%967, %968, %969, %970)
}

def @func_7672(%var_7664: Tensor[(360), float64]) -> (Tensor[(72), float64], Tensor[(10, 6, 6), float64], Tensor[(360), float64], uint8) {
  %971 = @func_1296() /* ty=(Tensor[(72), float64],) */;
  %972 = cast(%var_7664, dtype="float64") /* ty=Tensor[(360), float64] */;
  %973 = cast(meta[relay.Constant][34] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %974 = reshape(%972, newshape=[10, 6, 6]) /* ty=Tensor[(10, 6, 6), float64] */;
  %975 = reshape(%973, newshape=[]) /* ty=uint8 */;
  %976 = @func_6627(%974, %975) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(72), float64], Tensor[(2, 8, 12), float32], uint8, Tensor[(10, 6, 6), float64]) */;
  %977 = %971.0;
  %978 = %976.4;
  (%977, %978, %var_7664, meta[relay.Constant][34] /* ty=uint8 */)
}

def @func_4551() -> (Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(2, 8, 12), float64]) {
  %985 = fn () -> (Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(2, 8, 12), float64]) {
    %979 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
    %980 = @func_2041() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(72), float64]) */;
    %981 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
    %982 = %979.0;
    %983 = %980.1;
    %984 = %981.1;
    (%982, %983, %984)
  };
  %985() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(2, 8, 12), float64]) */
}

def @func_8519() -> (Tensor[(56), float64], Tensor[(2, 8, 12), float64]) {
  %989 = fn () -> (Tensor[(56), float64], Tensor[(2, 8, 12), float64]) {
    %986 = @func_5073() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(1, 8, 7), float64], Tensor[(56), float64], Tensor[(72), float64]) */;
    %987 = %986.2;
    %988 = @func_3955() /* ty=Tensor[(2, 8, 12), float64] */;
    (%987, %988)
  };
  %989() /* ty=(Tensor[(56), float64], Tensor[(2, 8, 12), float64]) */
}

def @main(%var_11756: Tensor[(1050, 2), uint16]) -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(1050, 2), float64], Tensor[(1050, 2), bool]) {
  %990 = cast(meta[relay.Constant][35] /* ty=Tensor[(1050, 2), uint16] */, dtype="uint16") /* ty=Tensor[(1050, 2), uint16] */;
  %991 = cast(meta[relay.Constant][35] /* ty=Tensor[(1050, 2), uint16] */, dtype="float64") /* ty=Tensor[(1050, 2), float64] */;
  %992 = reshape(%990, newshape=[15, 140]) /* ty=Tensor[(15, 140), uint16] */;
  %993 = reshape(%991, newshape=[15, 140]) /* ty=Tensor[(15, 140), float64] */;
  %994 = @func_10558(%992, %993) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(15, 12, 11), float32], Tensor[(77, 9), float32], Tensor[(2, 8, 12), float64], Tensor[(704), float64], Tensor[(72), float64], Tensor[(11, 4, 16), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(15, 140), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(15, 140), bool], Tensor[(1980), float32], Tensor[(2, 8, 12), float64], Tensor[(15, 140), bool]) */;
  %995 = cast(meta[relay.Constant][35] /* ty=Tensor[(1050, 2), uint16] */, dtype="float64") /* ty=Tensor[(1050, 2), float64] */;
  %996 = cast(%var_11756, dtype="bool") /* ty=Tensor[(1050, 2), bool] */;
  %997 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(1050, 2), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %998 = cast(meta[relay.Constant][35] /* ty=Tensor[(1050, 2), uint16] */, dtype="bool") /* ty=Tensor[(1050, 2), bool] */;
  %999 = dyn.reshape(%996, %997, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1000 = @func_9364() /* ty=Tensor[(2, 8, 12), float32] */;
  %1001 = %994.7;
  %1002 = exp(%995) /* ty=Tensor[(1050, 2), float64] */;
  %1003 = less_equal(%998, %999) /* ty=Tensor[(1050, 2), bool] */;
  (%1000, %1001, %1002, %1003)
}

def @func_10375() -> (Tensor[(3, 12, 2), bool],) {
  %1005 = fn () -> (Tensor[(3, 12, 2), bool],) {
    %1004 = @func_6767() /* ty=Tensor[(3, 12, 2), bool] */;
    (%1004,)
  };
  %1005() /* ty=(Tensor[(3, 12, 2), bool],) */
}

def @func_4664() -> (Tensor[(2, 8, 12), float64],) {
  @func_4662() /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_2043() -> (Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(72), float64]) {
  @func_2041() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(72), float64]) */
}

def @func_7516() -> Tensor[(2, 8, 12), float64] {
  %1006 = @func_3735() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %1006.0
}

def @func_253() -> (Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  %1007 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 8, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %1008 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 8, 12), float64] */, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %1009 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(2, 8, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1010 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 8, 12), float64] */, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %1011 = dyn.reshape(%1008, %1009, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1012 = asin(%1007) /* ty=Tensor[(2, 8, 12), float64] */;
  %1013 = add(%1010, %1011) /* ty=Tensor[(2, 8, 12), float32] */;
  (%1012, %1013)
}

def @func_5613() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) {
  @func_5611() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) */
}

def @func_10133() -> (Tensor[(2, 8, 12), float64], Tensor[(16, 16, 9), uint16], Tensor[(2304), uint16]) {
  %1014 = @func_5162() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %1015 = cast(meta[relay.Constant][38] /* ty=Tensor[(2304), uint16] */, dtype="uint16") /* ty=Tensor[(2304), uint16] */;
  %1016 = cast(meta[relay.Constant][38] /* ty=Tensor[(2304), uint16] */, dtype="uint16") /* ty=Tensor[(2304), uint16] */;
  %1017 = reshape(%1015, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), uint16] */;
  %1018 = reshape(%1016, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), uint16] */;
  %1019 = @func_5656(%1017, %1018) /* ty=(Tensor[(16, 16, 9), uint16],) */;
  %1020 = %1014.0;
  %1021 = %1019.0;
  (%1020, %1021, meta[relay.Constant][38] /* ty=Tensor[(2304), uint16] */)
}

def @func_3274(%var_3271: uint8, %var_3272: Tensor[(5, 3, 1), uint8], %var_3273: Tensor[(192), float32]) -> (Tensor[(5, 3, 1), uint8], Tensor[(2, 8, 12), float32], Tensor[(192), float32]) {
  %1029 = fn (%var_3256: uint8, %var_3257: Tensor[(5, 3, 1), uint8], %var_3265: Tensor[(192), float32]) -> (Tensor[(5, 3, 1), uint8], Tensor[(2, 8, 12), float32], Tensor[(192), float32]) {
    %1022 = cast(%var_3256, dtype="uint8") /* ty=uint8 */;
    %1023 = cast(%var_3257, dtype="uint8") /* ty=Tensor[(5, 3, 1), uint8] */;
    %1024 = cast(%var_3265, dtype="float32") /* ty=Tensor[(192), float32] */;
    %1025 = reshape(%1024, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float32] */;
    %1026 = @func_666(%1025) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint32], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32]) */;
    %1027 = logical_xor(%1022, %1023) /* ty=Tensor[(5, 3, 1), uint8] */;
    %1028 = %1026.4;
    (%1027, %1028, %var_3265)
  };
  %1029(%var_3271, %var_3272, %var_3273) /* ty=(Tensor[(5, 3, 1), uint8], Tensor[(2, 8, 12), float32], Tensor[(192), float32]) */
}

def @func_4363() -> (Tensor[(2, 8, 12), float32],) {
  @func_4361() /* ty=(Tensor[(2, 8, 12), float32],) */
}

def @func_10805(%var_10782: Tensor[(616), float32]) -> (Tensor[(72), float64], Tensor[(2, 8, 12), bool], Tensor[(616), float32]) {
  %1030 = cast(%var_10782, dtype="float32") /* ty=Tensor[(616), float32] */;
  %1031 = reshape(%1030, newshape=[616]) /* ty=Tensor[(616), float32] */;
  %1032 = @func_2811(%1031) /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(72), float64], Tensor[(180), uint8], Tensor[(2, 8, 12), bool], Tensor[(72), float64], Tensor[(7, 8, 11), bool], Tensor[(616), float32], Tensor[(7, 8, 11), bool], Tensor[(72), float64], Tensor[(72), float64]) */;
  %1033 = @func_7169() /* ty=Tensor[(72), float64] */;
  %1034 = %1032.4;
  (%1033, %1034, %var_10782)
}

def @func_9510() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  @func_9508() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */
}

def @func_8103() -> (Tensor[(192), float32], Tensor[(72), float64]) {
  %1035 = @func_4855() /* ty=(Tensor[(192), float32], Tensor[(72), float64]) */;
  %1036 = @func_7128() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(72), float64]) */;
  %1037 = %1035.0;
  %1038 = %1036.1;
  (%1037, %1038)
}

def @func_4938(%var_4928: Tensor[(2, 12, 8), bool]) -> Tensor[(2, 12, 8), bool] {
  %1039 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %1040 = cast(%var_4928, dtype="bool") /* ty=Tensor[(2, 12, 8), bool] */;
  logical_and(%1039, %1040) /* ty=Tensor[(2, 12, 8), bool] */
}

def @func_5808() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) {
  %1051 = fn () -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) {
    %1041 = @func_3650() /* ty=(Tensor[(2, 8, 12), float32],) */;
    %1042 = @func_2885() /* ty=(Tensor[(2, 8, 12), float64],) */;
    %1043 = @func_4662() /* ty=(Tensor[(2, 8, 12), float64],) */;
    %1044 = %1041.0;
    %1045 = @func_760() /* ty=Tensor[(2, 8, 12), float64] */;
    %1046 = %1042.0;
    %1047 = @func_5236() /* ty=Tensor[(192), float32] */;
    %1048 = %1043.0;
    %1049 = @func_1326() /* ty=Tensor[(2, 8, 12), float32] */;
    %1050 = @func_2241() /* ty=Tensor[(2, 8, 12), float64] */;
    (%1044, %1045, %1046, %1047, %1048, %1049, %1050)
  };
  %1051() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) */
}

def @func_1975() -> Tensor[(2, 8, 12), float32] {
  %1052 = @func_1461() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %1052.1
}

def @func_7266(%var_7263: Tensor[(15, 12, 11), float32], %var_7264: Tensor[(2100), uint16], %var_7265: Tensor[(693), float32]) -> (Tensor[(15, 12, 11), float32], Tensor[(10, 15, 14), bool], Tensor[(2100), uint16], Tensor[(9, 7, 11), float32], Tensor[(693), float32]) {
  @func_7261(%var_7263, %var_7264, %var_7265) /* ty=(Tensor[(15, 12, 11), float32], Tensor[(10, 15, 14), bool], Tensor[(2100), uint16], Tensor[(9, 7, 11), float32], Tensor[(693), float32]) */
}

def @func_6782() -> (Tensor[(72), float64],) {
  @func_6780() /* ty=(Tensor[(72), float64],) */
}

def @func_9127() -> (Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) {
  %1053 = @func_1511() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %1054 = @func_2148() /* ty=Tensor[(2, 8, 12), float32] */;
  %1055 = %1053.1;
  (%1054, %1055)
}

def @func_8176() -> (Tensor[(7, 8, 11), bool],) {
  @func_8174() /* ty=(Tensor[(7, 8, 11), bool],) */
}

def @func_11324(%var_11322: Tensor[(9, 7, 8), float32]) -> (Tensor[(9, 7, 8), bool], Tensor[(9, 7, 8), bool]) {
  @func_11321(%var_11322) /* ty=(Tensor[(9, 7, 8), bool], Tensor[(9, 7, 8), bool]) */
}

def @func_7518() -> Tensor[(2, 8, 12), float64] {
  @func_7516() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_848(%var_846: Tensor[(2, 8, 12), float64], %var_847: Tensor[(72), float64]) -> (Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32]) {
  %1076 = fn (%var_812: Tensor[(2, 8, 12), float64], %var_829: Tensor[(72), float64]) -> (Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32]) {
    %1056 = @func_760() /* ty=Tensor[(2, 8, 12), float64] */;
    %1057 = cast(%var_812, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
    %1058 = shape_of(%1056, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1059 = cast(%1056, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
    %1060 = dyn.reshape(%1057, %1058, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1061 = @func_501() /* ty=(Tensor[(2, 8, 12), float32],) */;
    %1062 = cast(%var_829, dtype="float64") /* ty=Tensor[(72), float64] */;
    %1063 = reshape(%1062, newshape=[72]) /* ty=Tensor[(72), float64] */;
    %1064 = @func_690(%1063) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
    %1065 = logical_or(%1059, %1060) /* ty=Tensor[(2, 8, 12), bool] */;
    %1066 = cast(%1065, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
    %1067 = reshape(%1066, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
    %1068 = cast(%var_812, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
    %1069 = reshape(%1068, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), float64] */;
    %1070 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %1071 = %1061.0;
    %1072 = %1064.0;
    %1073 = @func_542(%1067) /* ty=Tensor[(2, 8, 12), uint64] */;
    %1074 = @func_542(%1069) /* ty=Tensor[(2, 8, 12), uint64] */;
    %1075 = %1070.3;
    (%1065, %1071, %1072, %var_829, %1073, %1074, %1075)
  };
  %1076(%var_846, %var_847) /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float32]) */
}

def @func_5575(%var_5574: Tensor[(11, 9, 12), float32]) -> Tensor[(11, 9, 12), float32] {
  %1080 = fn (%var_5550: Tensor[(11, 9, 12), float32]) -> Tensor[(11, 9, 12), float32] {
    %1077 = cast(%var_5550, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
    %1078 = sinh(%1077) /* ty=Tensor[(11, 9, 12), float32] */;
    %1079 = cast(%1078, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
    acosh(%1079) /* ty=Tensor[(11, 9, 12), float32] */
  };
  %1080(%var_5574) /* ty=Tensor[(11, 9, 12), float32] */
}

def @func_5944() -> Tensor[(6, 6, 3), bool] {
  %1085 = fn () -> Tensor[(6, 6, 3), bool] {
    %1081 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 6, 3), float64] */, dtype="bool") /* ty=Tensor[(6, 6, 3), bool] */;
    %1082 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(6, 6, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1083 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 6, 3), float64] */, dtype="bool") /* ty=Tensor[(6, 6, 3), bool] */;
    %1084 = dyn.reshape(%1081, %1082, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%1083, %1084) /* ty=Tensor[(6, 6, 3), bool] */
  };
  %1085() /* ty=Tensor[(6, 6, 3), bool] */
}

def @func_8105() -> (Tensor[(192), float32], Tensor[(72), float64]) {
  @func_8103() /* ty=(Tensor[(192), float32], Tensor[(72), float64]) */
}

def @func_10878() -> (Tensor[(2, 8, 12), float64], Tensor[(6, 6, 3), bool]) {
  %1086 = @func_10018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %1087 = %1086.0;
  %1088 = @func_5943() /* ty=Tensor[(6, 6, 3), bool] */;
  (%1087, %1088)
}

def @func_378(%var_347: Tensor[(3, 12, 2), float64]) -> (Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) {
  %1089 = cast(%var_347, dtype="float64") /* ty=Tensor[(3, 12, 2), float64] */;
  %1090 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %1091 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %1092 = atanh(%1089) /* ty=Tensor[(3, 12, 2), float64] */;
  %1093 = %1090.2;
  %1094 = %1091.3;
  (%1092, %1093, %1094)
}

def @func_3631() -> Tensor[(2, 8, 12), float64] {
  @func_3629() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_8823() -> (Tensor[(72), float64], Tensor[(2, 8, 12), float32]) {
  %1098 = fn () -> (Tensor[(72), float64], Tensor[(2, 8, 12), float32]) {
    %1095 = @func_6780() /* ty=(Tensor[(72), float64],) */;
    %1096 = %1095.0;
    %1097 = @func_1975() /* ty=Tensor[(2, 8, 12), float32] */;
    (%1096, %1097)
  };
  %1098() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float32]) */
}

def @func_462(%var_461: Tensor[(2, 8, 12), float64]) -> (Tensor[(2, 8, 12), uint64],) {
  %1106 = fn (%var_451: Tensor[(2, 8, 12), float64]) -> (Tensor[(2, 8, 12), uint64],) {
    %1099 = @func_317() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %1100 = %1099.2;
    %1101 = cast(%var_451, dtype="uint64") /* ty=Tensor[(2, 8, 12), uint64] */;
    %1102 = shape_of(%1100, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1103 = cast(%1100, dtype="uint64") /* ty=Tensor[(2, 8, 12), uint64] */;
    %1104 = dyn.reshape(%1101, %1102, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1105 = maximum(%1103, %1104) /* ty=Tensor[(2, 8, 12), uint64] */;
    (%1105,)
  };
  %1106(%var_461) /* ty=(Tensor[(2, 8, 12), uint64],) */
}

def @func_1296() -> (Tensor[(72), float64],) {
  %1107 = @func_863() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), float64], Tensor[(72), float64]) */;
  %1108 = %1107.2;
  (%1108,)
}

def @func_6768() -> Tensor[(3, 12, 2), bool] {
  %1110 = fn () -> Tensor[(3, 12, 2), bool] {
    %1109 = @func_5972() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(3, 12, 2), bool], Tensor[(1, 2100), uint16]) */;
    %1109.2
  };
  %1110() /* ty=Tensor[(3, 12, 2), bool] */
}

def @func_2041() -> (Tensor[(2, 8, 12), float32], Tensor[(72), float64], Tensor[(72), float64]) {
  %1111 = @func_1511() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %1112 = %1111.2;
  %1113 = cast(%1112, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %1114 = @func_1523() /* ty=(Tensor[(72), float64],) */;
  %1115 = @func_1523() /* ty=(Tensor[(72), float64],) */;
  %1116 = cos(%1113) /* ty=Tensor[(2, 8, 12), float32] */;
  %1117 = %1114.0;
  %1118 = %1115.0;
  (%1116, %1117, %1118)
}

def @func_6743(%var_6741: Tensor[(18, 66), float32]) -> (Tensor[(72), float64], Tensor[(72), float64], Tensor[(11, 9, 12), float32], Tensor[(18, 66), float32]) {
  @func_6740(%var_6741) /* ty=(Tensor[(72), float64], Tensor[(72), float64], Tensor[(11, 9, 12), float32], Tensor[(18, 66), float32]) */
}

def @func_1523() -> (Tensor[(72), float64],) {
  %1119 = @func_1296() /* ty=(Tensor[(72), float64],) */;
  %1120 = %1119.0;
  (%1120,)
}

def @func_9186(%var_9185: Tensor[(1, 72), float64]) -> (Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float64], Tensor[(1, 72), float64], Tensor[(192), float32]) {
  %1129 = fn (%var_9162: Tensor[(1, 72), float64]) -> (Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float64], Tensor[(1, 72), float64], Tensor[(192), float32]) {
    %1121 = @func_2458() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), uint64]) */;
    %1122 = cast(%var_9162, dtype="float64") /* ty=Tensor[(1, 72), float64] */;
    %1123 = reshape(%1122, newshape=[3, 12, 2]) /* ty=Tensor[(3, 12, 2), float64] */;
    %1124 = @func_378(%1123) /* ty=(Tensor[(3, 12, 2), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
    %1125 = @func_5807() /* ty=(Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(192), float32], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(2, 8, 12), float64]) */;
    %1126 = %1121.1;
    %1127 = %1124.1;
    %1128 = %1125.3;
    (%1126, %1127, %var_9162, %1128)
  };
  %1129(%var_9185) /* ty=(Tensor[(2, 8, 12), uint64], Tensor[(2, 8, 12), float64], Tensor[(1, 72), float64], Tensor[(192), float32]) */
}

def @func_7837() -> Tensor[(2, 8, 12), float64] {
  @func_7835() /* ty=Tensor[(2, 8, 12), float64] */
}

def @func_10706() -> Tensor[(2, 8, 12), float64] {
  %1130 = @func_4223() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %1130.1
}

def @func_10554(%var_10404: Tensor[(15, 140), uint16], %var_10484: Tensor[(15, 140), float64]) -> (Tensor[(2, 8, 12), float64], Tensor[(15, 12, 11), float32], Tensor[(77, 9), float32], Tensor[(2, 8, 12), float64], Tensor[(704), float64], Tensor[(72), float64], Tensor[(11, 4, 16), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(15, 140), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64], Tensor[(15, 140), bool], Tensor[(1980), float32], Tensor[(2, 8, 12), float64], Tensor[(15, 140), bool]) {
  %1131 = @func_2885() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %1132 = cast(meta[relay.Constant][41] /* ty=Tensor[(1980), float32] */, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %1133 = cast(%var_10404, dtype="uint16") /* ty=Tensor[(15, 140), uint16] */;
  %1134 = cast(meta[relay.Constant][42] /* ty=Tensor[(77, 9), float32] */, dtype="float32") /* ty=Tensor[(77, 9), float32] */;
  %1135 = reshape(%1132, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), float32] */;
  %1136 = reshape(%1133, newshape=[2100]) /* ty=Tensor[(2100), uint16] */;
  %1137 = reshape(%1134, newshape=[693]) /* ty=Tensor[(693), float32] */;
  %1138 = @func_7261(%1135, %1136, %1137) /* ty=(Tensor[(15, 12, 11), float32], Tensor[(10, 15, 14), bool], Tensor[(2100), uint16], Tensor[(9, 7, 11), float32], Tensor[(693), float32]) */;
  %1139 = @func_2407() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %1140 = @func_9508() /* ty=(Tensor[(72), float64], Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32]) */;
  %1141 = cast(meta[relay.Constant][43] /* ty=Tensor[(704), float64] */, dtype="float64") /* ty=Tensor[(704), float64] */;
  %1142 = reshape(%1141, newshape=[11, 4, 16]) /* ty=Tensor[(11, 4, 16), float64] */;
  %1143 = @func_10175(%1142) /* ty=(Tensor[(11, 4, 16), float64], Tensor[(11, 4, 16), float32], Tensor[(2, 8, 12), float32]) */;
  %1144 = %1143.0;
  %1145 = cast(%1144, dtype="float64") /* ty=Tensor[(11, 4, 16), float64] */;
  %1146 = @func_7067() /* ty=(Tensor[(2, 8, 12), float64],) */;
  %1147 = cast(%var_10404, dtype="float64") /* ty=Tensor[(15, 140), float64] */;
  %1148 = exp(%1147) /* ty=Tensor[(15, 140), float64] */;
  %1149 = cast(%var_10484, dtype="float64") /* ty=Tensor[(15, 140), float64] */;
  %1150 = shape_of(%1148, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1151 = cast(%1148, dtype="float64") /* ty=Tensor[(15, 140), float64] */;
  %1152 = dyn.reshape(%1149, %1150, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1153 = @func_1349() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %1154 = cast(%var_10484, dtype="float32") /* ty=Tensor[(15, 140), float32] */;
  %1155 = sigmoid(%1154) /* ty=Tensor[(15, 140), float32] */;
  %1156 = cast(%1155, dtype="float32") /* ty=Tensor[(15, 140), float32] */;
  %1157 = log2(%1156) /* ty=Tensor[(15, 140), float32] */;
  %1158 = cast(%1157, dtype="float32") /* ty=Tensor[(15, 140), float32] */;
  %1159 = sinh(%1158) /* ty=Tensor[(15, 140), float32] */;
  %1160 = cast(%1148, dtype="bool") /* ty=Tensor[(15, 140), bool] */;
  %1161 = shape_of(%1159, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1162 = cast(%1159, dtype="bool") /* ty=Tensor[(15, 140), bool] */;
  %1163 = dyn.reshape(%1160, %1161, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1164 = cast(meta[relay.Constant][41] /* ty=Tensor[(1980), float32] */, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %1165 = @func_1850() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float32], Tensor[(72), float64]) */;
  %1166 = cast(%var_10404, dtype="bool") /* ty=Tensor[(15, 140), bool] */;
  %1167 = shape_of(%1148, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1168 = cast(%1148, dtype="bool") /* ty=Tensor[(15, 140), bool] */;
  %1169 = dyn.reshape(%1166, %1167, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1170 = less(%1168, %1169) /* ty=Tensor[(15, 140), bool] */;
  %1171 = cast(%1170, dtype="bool") /* ty=Tensor[(15, 140), bool] */;
  %1172 = shape_of(%1159, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1173 = cast(%1159, dtype="bool") /* ty=Tensor[(15, 140), bool] */;
  %1174 = dyn.reshape(%1171, %1172, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1175 = %1131.0;
  %1176 = %1138.0;
  %1177 = %1139.0;
  %1178 = %1140.0;
  %1179 = cos(%1145) /* ty=Tensor[(11, 4, 16), float64] */;
  %1180 = %1146.0;
  %1181 = @func_992() /* ty=Tensor[(2, 8, 12), float32] */;
  %1182 = floor_divide(%1151, %1152) /* ty=Tensor[(15, 140), float64] */;
  %1183 = @func_3955() /* ty=Tensor[(2, 8, 12), float64] */;
  %1184 = %1153.1;
  %1185 = less_equal(%1162, %1163) /* ty=Tensor[(15, 140), bool] */;
  %1186 = cosh(%1164) /* ty=Tensor[(1980), float32] */;
  %1187 = %1165.0;
  %1188 = greater(%1173, %1174) /* ty=Tensor[(15, 140), bool] */;
  (%1175, %1176, meta[relay.Constant][42] /* ty=Tensor[(77, 9), float32] */, %1177, meta[relay.Constant][43] /* ty=Tensor[(704), float64] */, %1178, %1179, %1180, %1181, %1182, %1183, %1184, %1185, %1186, %1187, %1188)
}

def @func_1934() -> Tensor[(2, 8, 12), float64] {
  %1189 = @func_1018() /* ty=(Tensor[(2, 8, 12), float64], Tensor[(2, 8, 12), float64]) */;
  %1189.0
}

def @func_8547(%var_8536: bool, %var_8537: Tensor[(3, 1, 2), bool]) -> (Tensor[(3, 1, 2), float32],) {
  %1190 = cast(%var_8536, dtype="bool") /* ty=bool */;
  %1191 = cast(%var_8537, dtype="bool") /* ty=Tensor[(3, 1, 2), bool] */;
  %1192 = logical_or(%1190, %1191) /* ty=Tensor[(3, 1, 2), bool] */;
  %1193 = cast(%1192, dtype="float32") /* ty=Tensor[(3, 1, 2), float32] */;
  %1194 = cast(%var_8536, dtype="float32") /* ty=float32 */;
  %1195 = power(%1193, %1194) /* ty=Tensor[(3, 1, 2), float32] */;
  (%1195,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen473/build/output.py", line 3965, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:21:25] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

