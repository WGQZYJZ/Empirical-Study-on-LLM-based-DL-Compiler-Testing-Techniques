==========mod==========
#[version = "0.0.5"]
def @func_6263() -> (Tensor[(4, 7, 16), int32], Tensor[(4, 7, 16), float32]) {
  %0 = @func_5761() /* ty=Tensor[(4, 7, 16), float32] */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 7, 16), float32] */, dtype="int32") /* ty=Tensor[(4, 7, 16), int32] */;
  %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%0, dtype="int32") /* ty=Tensor[(4, 7, 16), int32] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %5 = cast(%0, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  %6 = left_shift(%3, %4) /* ty=Tensor[(4, 7, 16), int32] */;
  %7 = exp(%5) /* ty=Tensor[(4, 7, 16), float32] */;
  (%6, %7)
}

def @func_8772() -> Tensor[(4, 7, 16), uint64] {
  @func_4365() /* ty=Tensor[(4, 7, 16), uint64] */
}

def @func_4025(%var_4018: Tensor[(1, 15, 11), float32]) -> Tensor[(1, 15, 11), float32] {
  %8 = cast(%var_4018, dtype="float32") /* ty=Tensor[(1, 15, 11), float32] */;
  acosh(%8) /* ty=Tensor[(1, 15, 11), float32] */
}

def @func_7762(%var_7725: Tensor[(1008), float32], %var_7737: Tensor[(198), int8]) -> (Tensor[(4, 7, 16), uint64], Tensor[(14, 9, 8), int16], Tensor[(1008), float32], Tensor[(126), int16], Tensor[(2, 9, 11), bool], Tensor[(7, 10, 10), bool], Tensor[(700), float32], Tensor[(198), uint8]) {
  %9 = @func_7479() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32], Tensor[(162), float32], Tensor[(4, 7, 16), uint64]) */;
  %10 = cast(%var_7725, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(126), int16] */, dtype="int16") /* ty=Tensor[(126), int16] */;
  %12 = reshape(%10, newshape=[14, 9, 8]) /* ty=Tensor[(14, 9, 8), float32] */;
  %13 = reshape(%11, newshape=[126]) /* ty=Tensor[(126), int16] */;
  %14 = @func_5620(%12, %13) /* ty=(Tensor[(14, 9, 8), int16], Tensor[(?, 3, 13), bool], Tensor[(6, 3, 7), float64], Tensor[(126), int16]) */;
  %15 = cast(%var_7737, dtype="int8") /* ty=Tensor[(198), int8] */;
  %16 = reshape(%15, newshape=[2, 9, 11]) /* ty=Tensor[(2, 9, 11), int8] */;
  %17 = @func_719(%16) /* ty=(Tensor[(2, 9, 11), bool], Tensor[(2, 9, 11), float64]) */;
  %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %19 = cast(meta[relay.Constant][2] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %20 = reshape(%18, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float32] */;
  %21 = reshape(%19, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float32] */;
  %22 = @func_507(%20, %21) /* ty=(Tensor[(7, 10, 10), bool], Tensor[(7, 10, 10), float64], Tensor[(7, 10, 10), int32], Tensor[(7, 10, 10), float32]) */;
  %23 = cast(%var_7737, dtype="float64") /* ty=Tensor[(198), float64] */;
  %24 = atanh(%23) /* ty=Tensor[(198), float64] */;
  %25 = cast(%var_7737, dtype="uint8") /* ty=Tensor[(198), uint8] */;
  %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(1), int32] */;
  %27 = cast(%24, dtype="uint8") /* ty=Tensor[(198), uint8] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %29 = %9.3;
  %30 = %14.0;
  %31 = %17.0;
  %32 = %22.0;
  %33 = right_shift(%27, %28) /* ty=Tensor[(198), uint8] */;
  (%29, %30, %var_7725, meta[relay.Constant][1] /* ty=Tensor[(126), int16] */, %31, %32, meta[relay.Constant][2] /* ty=Tensor[(700), float32] */, %33)
}

def @func_8740(%var_8716: int16) -> (Tensor[(4, 7, 16), uint64], Tensor[(165), float32], int16, Tensor[(1, 960), float32]) {
  %34 = @func_7424() /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(165), float32], Tensor[(4, 7, 16), bool]) */;
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 960), bool] */, dtype="bool") /* ty=Tensor[(1, 960), bool] */;
  %36 = cast(%var_8716, dtype="int16") /* ty=int16 */;
  %37 = reshape(%35, newshape=[960]) /* ty=Tensor[(960), bool] */;
  %38 = reshape(%36, newshape=[]) /* ty=int16 */;
  %39 = @func_8518(%37, %38) /* ty=(Tensor[(165), float32], Tensor[(16, 10), int8], Tensor[(960), bool], int16, Tensor[(4, 7, 16), uint16]) */;
  %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 960), bool] */, dtype="float32") /* ty=Tensor[(1, 960), float32] */;
  %41 = %34.0;
  %42 = %39.0;
  %43 = sigmoid(%40) /* ty=Tensor[(1, 960), float32] */;
  (%41, %42, %var_8716, %43)
}

def @func_4139(%var_4096: Tensor[(2, 5, 16), int8], %var_4100: Tensor[(2, 5, 16), int8]) -> (Tensor[(2, 5, 16), bool], Tensor[(?, 3, 13), float64], Tensor[(39), float64], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(2, 5, 16), float32], Tensor[(13, 5, 15), float32]) {
  %44 = cast(%var_4096, dtype="int8") /* ty=Tensor[(2, 5, 16), int8] */;
  %45 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(2, 5, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 5, 16), int8] */, dtype="int8") /* ty=Tensor[(2, 5, 16), int8] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %48 = right_shift(%46, %47) /* ty=Tensor[(2, 5, 16), int8] */;
  %49 = cast(%var_4100, dtype="bool") /* ty=Tensor[(2, 5, 16), bool] */;
  %50 = shape_of(%48, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(%48, dtype="bool") /* ty=Tensor[(2, 5, 16), bool] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %53 = cast(meta[relay.Constant][5] /* ty=Tensor[(39), float64] */, dtype="float64") /* ty=Tensor[(39), float64] */;
  %54 = reshape(%53, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float64] */;
  %55 = @func_3946(%54) /* ty=(Tensor[(?, 3, 13), float64],) */;
  %56 = cast(meta[relay.Constant][6] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %57 = cast(meta[relay.Constant][7] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
  %58 = reshape(%56, newshape=[]) /* ty=int16 */;
  %59 = reshape(%57, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
  %60 = @func_32(%58, %59) /* ty=(Tensor[(16, 13, 6), float64],) */;
  %61 = cast(%var_4100, dtype="float32") /* ty=Tensor[(2, 5, 16), float32] */;
  %62 = cast(meta[relay.Constant][6] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %63 = reshape(%62, newshape=[]) /* ty=int16 */;
  %64 = @func_1189(%63) /* ty=(Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(13, 5, 15), float32]) */;
  %65 = less(%51, %52) /* ty=Tensor[(2, 5, 16), bool] */;
  %66 = %55.0;
  %67 = %60.0;
  %68 = atan(%61) /* ty=Tensor[(2, 5, 16), float32] */;
  %69 = %64.3;
  (%65, %66, meta[relay.Constant][5] /* ty=Tensor[(39), float64] */, %67, meta[relay.Constant][6] /* ty=int16 */, meta[relay.Constant][7] /* ty=Tensor[(1248), int16] */, %68, %69)
}

def @func_8993() -> (int16,) {
  %70 = @func_6048() /* ty=(int16, Tensor[(13, 5, 15), float32]) */;
  %71 = %70.0;
  (%71,)
}

def @func_8617() -> Tensor[(4, 7, 16), float32] {
  @func_5510() /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_6340() -> (Tensor[(4, 7, 16), uint64],) {
  %72 = @func_4092() /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(288), int8], Tensor[(4, 7, 16), uint16], Tensor[(7, 10, 10), float32], Tensor[(700), float32]) */;
  %73 = %72.0;
  (%73,)
}

def @func_7943() -> Tensor[(4, 7, 16), uint64] {
  %74 = @func_6340() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %74.0
}

def @func_8109(%var_8095: Tensor[(1008), float32]) -> (Tensor[(4, 7, 16), float32], Tensor[(6, 3, 7), float64], Tensor[(1008), float32], Tensor[(126), int16]) {
  %75 = cast(%var_8095, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %76 = cast(meta[relay.Constant][8] /* ty=Tensor[(126), int16] */, dtype="int16") /* ty=Tensor[(126), int16] */;
  %77 = reshape(%75, newshape=[14, 9, 8]) /* ty=Tensor[(14, 9, 8), float32] */;
  %78 = reshape(%76, newshape=[126]) /* ty=Tensor[(126), int16] */;
  %79 = @func_5620(%77, %78) /* ty=(Tensor[(14, 9, 8), int16], Tensor[(?, 3, 13), bool], Tensor[(6, 3, 7), float64], Tensor[(126), int16]) */;
  %80 = @func_7525() /* ty=Tensor[(4, 7, 16), float32] */;
  %81 = %79.2;
  (%80, %81, %var_8095, meta[relay.Constant][8] /* ty=Tensor[(126), int16] */)
}

def @func_5997(%var_5957: int16, %var_5958: Tensor[(1248), int16]) -> (int16, Tensor[(672), float32], int16, Tensor[(1248), int16], Tensor[(4, 7, 16), bool]) {
  %82 = cast(meta[relay.Constant][9] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %83 = cast(%var_5957, dtype="int16") /* ty=int16 */;
  %84 = cast(%var_5958, dtype="int16") /* ty=Tensor[(1248), int16] */;
  %85 = reshape(%82, newshape=[12, 14, 4]) /* ty=Tensor[(12, 14, 4), float32] */;
  %86 = reshape(%83, newshape=[]) /* ty=int16 */;
  %87 = reshape(%84, newshape=[1248, 1]) /* ty=Tensor[(1248, 1), int16] */;
  %88 = @func_3535(%85, %86, %87) /* ty=(Tensor[(12, 14, 4), bool], Tensor[(16, 13, 6), float64], int16, Tensor[(1248, 1), int16], Tensor[(16, 13, 6), float64]) */;
  %89 = @func_4216() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %90 = %89.0;
  %91 = @func_3849() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %92 = %91.0;
  %93 = cast(%92, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %94 = shape_of(%90, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%90, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %97 = %88.2;
  %98 = less_equal(%95, %96) /* ty=Tensor[(4, 7, 16), bool] */;
  (%97, meta[relay.Constant][9] /* ty=Tensor[(672), float32] */, %var_5957, %var_5958, %98)
}

def @func_4592() -> (Tensor[(?, 15, 11), int16],) {
  %99 = @func_4416() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) */;
  %100 = %99.3;
  (%100,)
}

def @func_9058() -> (int16,) {
  %101 = @func_4416() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) */;
  %102 = %101.1;
  (%102,)
}

def @func_7350() -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint64]) {
  %103 = @func_4633() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %104 = @func_6340() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %105 = %103.0;
  %106 = %104.0;
  (%105, %106)
}

def @func_8660() -> Tensor[(4, 7, 16), float32] {
  %107 = @func_6263() /* ty=(Tensor[(4, 7, 16), int32], Tensor[(4, 7, 16), float32]) */;
  %107.1
}

def @func_6408() -> Tensor[(165), float32] {
  %108 = @func_6324() /* ty=(Tensor[(165), float32],) */;
  %108.0
}

def @func_5282() -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint64]) {
  %109 = @func_4416() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) */;
  %110 = @func_4216() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %111 = %109.0;
  %112 = %110.0;
  (%111, %112)
}

def @func_7424() -> (Tensor[(4, 7, 16), uint64], Tensor[(165), float32], Tensor[(4, 7, 16), bool]) {
  %113 = @func_6717() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %114 = %113.0;
  %115 = cast(%114, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  %116 = reshape(%115, newshape=[4, 7, 16]) /* ty=Tensor[(4, 7, 16), float32] */;
  %117 = @func_6489(%116) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), bool], Tensor[(1, 15, 11), float32], Tensor[(165), float32]) */;
  %118 = @func_6408() /* ty=Tensor[(165), float32] */;
  %119 = %117.2;
  (%114, %118, %119)
}

def @func_4200() -> (Tensor[(4, 7, 16), float32],) {
  %120 = @func_3974() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %121 = %120.0;
  (%121,)
}

def @func_8894() -> Tensor[(13, 5, 15), float32] {
  %122 = @func_6048() /* ty=(int16, Tensor[(13, 5, 15), float32]) */;
  %122.1
}

def @func_9170() -> (Tensor[(13, 5, 15), float32],) {
  %123 = @func_6048() /* ty=(int16, Tensor[(13, 5, 15), float32]) */;
  %124 = %123.1;
  (%124,)
}

def @func_32(%var_8: int16, %var_9: Tensor[(16, 13, 6), int16]) -> (Tensor[(16, 13, 6), float64],) {
  %125 = cast(%var_8, dtype="bool") /* ty=bool */;
  %126 = cast(%var_9, dtype="bool") /* ty=Tensor[(16, 13, 6), bool] */;
  %127 = greater_equal(%125, %126) /* ty=Tensor[(16, 13, 6), bool] */;
  %128 = cast(%127, dtype="float64") /* ty=Tensor[(16, 13, 6), float64] */;
  %129 = shape_of(%var_9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%var_9, dtype="float64") /* ty=Tensor[(16, 13, 6), float64] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %132 = mod(%130, %131) /* ty=Tensor[(16, 13, 6), float64] */;
  (%132,)
}

def @func_5439(%var_5423: uint8, %var_5424: Tensor[(8, 1, 11), uint8]) -> Tensor[(8, 1, 11), uint8] {
  %133 = cast(%var_5423, dtype="uint8") /* ty=uint8 */;
  %134 = cast(%var_5424, dtype="uint8") /* ty=Tensor[(8, 1, 11), uint8] */;
  bitwise_xor(%133, %134) /* ty=Tensor[(8, 1, 11), uint8] */
}

def @func_3535(%var_3504: Tensor[(12, 14, 4), float32], %var_3516: int16, %var_3517: Tensor[(1248, 1), int16]) -> (Tensor[(12, 14, 4), bool], Tensor[(16, 13, 6), float64], int16, Tensor[(1248, 1), int16], Tensor[(16, 13, 6), float64]) {
  %135 = cast(%var_3504, dtype="bool") /* ty=Tensor[(12, 14, 4), bool] */;
  %136 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(12, 14, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 14, 4), float32] */, dtype="bool") /* ty=Tensor[(12, 14, 4), bool] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %139 = cast(%var_3516, dtype="int16") /* ty=int16 */;
  %140 = cast(%var_3517, dtype="int16") /* ty=Tensor[(1248, 1), int16] */;
  %141 = reshape(%139, newshape=[]) /* ty=int16 */;
  %142 = reshape(%140, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
  %143 = @func_32(%141, %142) /* ty=(Tensor[(16, 13, 6), float64],) */;
  %144 = cast(%var_3516, dtype="int16") /* ty=int16 */;
  %145 = %143.0;
  %146 = cast(%145, dtype="int16") /* ty=Tensor[(16, 13, 6), int16] */;
  %147 = reshape(%144, newshape=[]) /* ty=int16 */;
  %148 = reshape(%146, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
  %149 = @func_32(%147, %148) /* ty=(Tensor[(16, 13, 6), float64],) */;
  %150 = equal(%137, %138) /* ty=Tensor[(12, 14, 4), bool] */;
  %151 = %149.0;
  (%150, %145, %var_3516, %var_3517, %151)
}

def @func_6717() -> (Tensor[(4, 7, 16), uint64],) {
  %152 = @func_3849() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %153 = %152.0;
  (%153,)
}

def @func_6865() -> (int16, Tensor[(11, 9, 10), uint32], Tensor[(550), int16]) {
  %154 = @func_4488() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
  %155 = cast(meta[relay.Constant][11] /* ty=Tensor[(550), int16] */, dtype="int16") /* ty=Tensor[(550), int16] */;
  %156 = cast(meta[relay.Constant][11] /* ty=Tensor[(550), int16] */, dtype="int16") /* ty=Tensor[(550), int16] */;
  %157 = cast(meta[relay.Constant][11] /* ty=Tensor[(550), int16] */, dtype="int16") /* ty=Tensor[(550), int16] */;
  %158 = reshape(%155, newshape=[10, 5, 11]) /* ty=Tensor[(10, 5, 11), int16] */;
  %159 = reshape(%156, newshape=[10, 5, 11]) /* ty=Tensor[(10, 5, 11), int16] */;
  %160 = reshape(%157, newshape=[10, 5, 11]) /* ty=Tensor[(10, 5, 11), int16] */;
  %161 = @func_2211(%158, %159, %160) /* ty=(Tensor[(10, 5, 11), int16], Tensor[(11, 9, 10), uint32], Tensor[(990), uint32], Tensor[(10, 5, 11), float32]) */;
  %162 = %154.2;
  %163 = %161.1;
  (%162, %163, meta[relay.Constant][11] /* ty=Tensor[(550), int16] */)
}

def @func_6129(%var_6125: Tensor[(672), float32]) -> (Tensor[(4, 7, 16), float32], Tensor[(1248, 1), int16], Tensor[(672), float32], int16, Tensor[(1248), int16]) {
  %164 = @func_4633() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %165 = cast(%var_6125, dtype="float32") /* ty=Tensor[(672), float32] */;
  %166 = cast(meta[relay.Constant][12] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %167 = cast(meta[relay.Constant][13] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
  %168 = reshape(%165, newshape=[12, 14, 4]) /* ty=Tensor[(12, 14, 4), float32] */;
  %169 = reshape(%166, newshape=[]) /* ty=int16 */;
  %170 = reshape(%167, newshape=[1248, 1]) /* ty=Tensor[(1248, 1), int16] */;
  %171 = @func_3535(%168, %169, %170) /* ty=(Tensor[(12, 14, 4), bool], Tensor[(16, 13, 6), float64], int16, Tensor[(1248, 1), int16], Tensor[(16, 13, 6), float64]) */;
  %172 = %164.0;
  %173 = %171.3;
  (%172, %173, %var_6125, meta[relay.Constant][12] /* ty=int16 */, meta[relay.Constant][13] /* ty=Tensor[(1248), int16] */)
}

def @func_7974(%var_7966: Tensor[(4, 7, 16), uint64]) -> (Tensor[(4, 7, 16), float32],) {
  %174 = @func_6717() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %175 = %174.0;
  %176 = cast(%var_7966, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  %177 = shape_of(%175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(%175, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %180 = floor_mod(%178, %179) /* ty=Tensor[(4, 7, 16), float32] */;
  (%180,)
}

def @func_8482() -> (Tensor[(4, 7, 16), float32],) {
  %181 = @func_7525() /* ty=Tensor[(4, 7, 16), float32] */;
  (%181,)
}

def @func_3739(%var_3707: Tensor[(8, 4, 9), int8]) -> (Tensor[(4, 7, 16), uint64], Tensor[(8, 4, 9), bool]) {
  %182 = @func_3378() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %183 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 4, 9), int8] */, dtype="int8") /* ty=Tensor[(8, 4, 9), int8] */;
  %184 = shape_of(%var_3707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%var_3707, dtype="int8") /* ty=Tensor[(8, 4, 9), int8] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %187 = maximum(%185, %186) /* ty=Tensor[(8, 4, 9), int8] */;
  %188 = cast(%var_3707, dtype="bool") /* ty=Tensor[(8, 4, 9), bool] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%187, dtype="bool") /* ty=Tensor[(8, 4, 9), bool] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %192 = %182.0;
  %193 = greater(%190, %191) /* ty=Tensor[(8, 4, 9), bool] */;
  (%192, %193)
}

def @func_3245(%var_3234: Tensor[(968), int32]) -> (Tensor[(16, 3, 10), float64], Tensor[(8, 11, 11), int32], Tensor[(968), float32]) {
  %194 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 3, 10), float64] */, dtype="float64") /* ty=Tensor[(16, 3, 10), float64] */;
  %195 = cast(%var_3234, dtype="int32") /* ty=Tensor[(968), int32] */;
  %196 = reshape(%195, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), int32] */;
  %197 = @func_1271(%196) /* ty=(Tensor[(8, 11, 11), int32],) */;
  %198 = cast(%var_3234, dtype="float32") /* ty=Tensor[(968), float32] */;
  %199 = log2(%194) /* ty=Tensor[(16, 3, 10), float64] */;
  %200 = %197.0;
  %201 = cosh(%198) /* ty=Tensor[(968), float32] */;
  (%199, %200, %201)
}

def @func_4416() -> (Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) {
  %202 = @func_4200() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %203 = cast(meta[relay.Constant][16] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %204 = reshape(%203, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
  %205 = @func_134(%204) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(8, 156), int16]) */;
  %206 = cast(meta[relay.Constant][17] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %207 = reshape(%206, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), float32] */;
  %208 = @func_4025(%207) /* ty=Tensor[(1, 15, 11), float32] */;
  %209 = cast(meta[relay.Constant][17] /* ty=Tensor[(165), float32] */, dtype="int16") /* ty=Tensor[(165), int16] */;
  %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%208, dtype="int16") /* ty=Tensor[(1, 15, 11), int16] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %213 = cast(meta[relay.Constant][17] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %214 = %202.0;
  %215 = %205.2;
  %216 = right_shift(%211, %212) /* ty=Tensor[(?, 15, 11), int16] */;
  %217 = cosh(%213) /* ty=Tensor[(165), float32] */;
  (%214, %215, meta[relay.Constant][16] /* ty=Tensor[(48), float32] */, %216, %217)
}

def @func_3900(%var_3885: Tensor[(672), float32]) -> (Tensor[(4, 7, 16), uint64], int16, Tensor[(672), float32], int16, Tensor[(1248), int16]) {
  %218 = @func_3378() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %219 = cast(%var_3885, dtype="float32") /* ty=Tensor[(672), float32] */;
  %220 = cast(meta[relay.Constant][18] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %221 = cast(meta[relay.Constant][19] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
  %222 = reshape(%219, newshape=[12, 14, 4]) /* ty=Tensor[(12, 14, 4), float32] */;
  %223 = reshape(%220, newshape=[]) /* ty=int16 */;
  %224 = reshape(%221, newshape=[1248, 1]) /* ty=Tensor[(1248, 1), int16] */;
  %225 = @func_3535(%222, %223, %224) /* ty=(Tensor[(12, 14, 4), bool], Tensor[(16, 13, 6), float64], int16, Tensor[(1248, 1), int16], Tensor[(16, 13, 6), float64]) */;
  %226 = %218.0;
  %227 = %225.2;
  (%226, %227, %var_3885, meta[relay.Constant][18] /* ty=int16 */, meta[relay.Constant][19] /* ty=Tensor[(1248), int16] */)
}

def @func_5925(%var_5909: Tensor[(198), int8]) -> (Tensor[(4, 7, 16), uint64], Tensor[(2, 9, 11), bool], Tensor[(198), int8], Tensor[(4, 7, 16), int32]) {
  %228 = cast(%var_5909, dtype="int8") /* ty=Tensor[(198), int8] */;
  %229 = reshape(%228, newshape=[2, 9, 11]) /* ty=Tensor[(2, 9, 11), int8] */;
  %230 = @func_719(%229) /* ty=(Tensor[(2, 9, 11), bool], Tensor[(2, 9, 11), float64]) */;
  %231 = @func_5393() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) */;
  %232 = %231.0;
  %233 = @func_5393() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) */;
  %234 = %233.1;
  %235 = cast(%234, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  %236 = erf(%235) /* ty=Tensor[(4, 7, 16), float32] */;
  %237 = cast(%236, dtype="int32") /* ty=Tensor[(4, 7, 16), int32] */;
  %238 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%232, dtype="int32") /* ty=Tensor[(4, 7, 16), int32] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %241 = @func_5775() /* ty=Tensor[(4, 7, 16), uint64] */;
  %242 = %230.0;
  %243 = subtract(%239, %240) /* ty=Tensor[(4, 7, 16), int32] */;
  (%241, %242, %var_5909, %243)
}

def @func_5485(%var_5458: Tensor[(4, 15, 16), bool], %var_5459: Tensor[(4, 15, 16), bool], %var_5479: int16) -> (Tensor[(4, 15, 16), bool], Tensor[(4, 7, 16), bool], Tensor[(16, 10), int8], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) {
  %244 = cast(%var_5459, dtype="bool") /* ty=Tensor[(4, 15, 16), bool] */;
  %245 = shape_of(%var_5458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%var_5458, dtype="bool") /* ty=Tensor[(4, 15, 16), bool] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %248 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 10), int8] */, dtype="int8") /* ty=Tensor[(16, 10), int8] */;
  %249 = reshape(%248, newshape=[160]) /* ty=Tensor[(160), int8] */;
  %250 = @func_4320(%249) /* ty=(Tensor[(160), int8], Tensor[(4, 7, 16), bool], Tensor[(2, 5, 16), float32], Tensor[(4, 7, 16), bool]) */;
  %251 = cast(%var_5479, dtype="int16") /* ty=int16 */;
  %252 = cast(meta[relay.Constant][21] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
  %253 = reshape(%251, newshape=[]) /* ty=int16 */;
  %254 = reshape(%252, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
  %255 = @func_32(%253, %254) /* ty=(Tensor[(16, 13, 6), float64],) */;
  %256 = logical_or(%246, %247) /* ty=Tensor[(4, 15, 16), bool] */;
  %257 = %250.3;
  %258 = %255.0;
  (%256, %257, meta[relay.Constant][20] /* ty=Tensor[(16, 10), int8] */, %258, %var_5479, meta[relay.Constant][21] /* ty=Tensor[(1248), int16] */)
}

def @func_7318() -> (Tensor[(4, 7, 16), float32], int16, Tensor[(960), bool], int16) {
  %259 = @func_4633() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %260 = cast(meta[relay.Constant][22] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
  %261 = cast(meta[relay.Constant][22] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
  %262 = cast(meta[relay.Constant][23] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %263 = reshape(%260, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
  %264 = reshape(%261, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
  %265 = reshape(%262, newshape=[]) /* ty=int16 */;
  %266 = @func_5485(%263, %264, %265) /* ty=(Tensor[(4, 15, 16), bool], Tensor[(4, 7, 16), bool], Tensor[(16, 10), int8], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
  %267 = %259.0;
  %268 = %266.4;
  (%267, %268, meta[relay.Constant][22] /* ty=Tensor[(960), bool] */, meta[relay.Constant][23] /* ty=int16 */)
}

def @func_8647(%var_8640: Tensor[(4, 7, 16), uint64]) -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), bool]) {
  %269 = @func_7004() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), bool]) */;
  %270 = @func_6340() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %271 = %270.0;
  %272 = cast(%var_8640, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%271, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %276 = %269.0;
  %277 = not_equal(%274, %275) /* ty=Tensor[(4, 7, 16), bool] */;
  (%276, %277)
}

def @func_1706(%var_1696: Tensor[(11, 9, 10), uint32]) -> (Tensor[(11, 9, 10), uint32],) {
  %278 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 9, 10), uint32] */, dtype="uint32") /* ty=Tensor[(11, 9, 10), uint32] */;
  %279 = shape_of(%var_1696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%var_1696, dtype="uint32") /* ty=Tensor[(11, 9, 10), uint32] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %282 = maximum(%280, %281) /* ty=Tensor[(11, 9, 10), uint32] */;
  (%282,)
}

def @func_5103() -> (Tensor[(4, 7, 16), uint64], Tensor[(8, 11, 11), int32], Tensor[(968), int32]) {
  %283 = @func_3378() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %284 = cast(meta[relay.Constant][25] /* ty=Tensor[(968), int32] */, dtype="int32") /* ty=Tensor[(968), int32] */;
  %285 = reshape(%284, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), int32] */;
  %286 = @func_1271(%285) /* ty=(Tensor[(8, 11, 11), int32],) */;
  %287 = %283.0;
  %288 = %286.0;
  (%287, %288, meta[relay.Constant][25] /* ty=Tensor[(968), int32] */)
}

def @func_3378() -> (Tensor[(4, 7, 16), uint64],) {
  %289 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 7, 16), uint64] */, dtype="uint64") /* ty=Tensor[(4, 7, 16), uint64] */;
  %290 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(4, 7, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 7, 16), uint64] */, dtype="uint64") /* ty=Tensor[(4, 7, 16), uint64] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %293 = maximum(%291, %292) /* ty=Tensor[(4, 7, 16), uint64] */;
  (%293,)
}

def @func_7248(%var_7208: int16) -> (Tensor[(4, 7, 16), uint64], Tensor[(120, 8), bool], int16, Tensor[(960), bool], Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float64]) {
  %294 = @func_5103() /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(8, 11, 11), int32], Tensor[(968), int32]) */;
  %295 = cast(%var_7208, dtype="int16") /* ty=int16 */;
  %296 = cast(meta[relay.Constant][28] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
  %297 = reshape(%295, newshape=[]) /* ty=int16 */;
  %298 = reshape(%296, newshape=[120, 8]) /* ty=Tensor[(120, 8), bool] */;
  %299 = @func_6802(%297, %298) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(16, 13, 6), float64], int16, Tensor[(4, 7, 16), float32], Tensor[(120, 8), bool]) */;
  %300 = @func_5282() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint64]) */;
  %301 = @func_5775() /* ty=Tensor[(4, 7, 16), uint64] */;
  %302 = cast(%301, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
  %303 = %294.0;
  %304 = %299.4;
  %305 = %300.0;
  %306 = log2(%302) /* ty=Tensor[(4, 7, 16), float64] */;
  (%303, %304, %var_7208, meta[relay.Constant][28] /* ty=Tensor[(960), bool] */, %305, %306)
}

def @func_4699() -> Tensor[(4, 7, 16), float32] {
  %307 = @func_4200() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %308 = %307.0;
  %309 = cast(%308, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
  %310 = log(%309) /* ty=Tensor[(4, 7, 16), float64] */;
  %311 = cast(%310, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  asinh(%311) /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_5114() -> Tensor[(4, 7, 16), float32] {
  %312 = @func_4488() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
  %312.0
}

def @func_6936() -> (Tensor[(4, 7, 16), uint16], Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), float32]) {
  %313 = @func_5393() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) */;
  %314 = @func_6340() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %315 = %313.1;
  %316 = %314.0;
  %317 = @func_5761() /* ty=Tensor[(4, 7, 16), float32] */;
  (%315, %316, %317)
}

def @func_3659(%var_3647: Tensor[(10, 15, 14), float64], %var_3654: int16) -> (Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(10, 15, 14), float64]) {
  %318 = cast(%var_3654, dtype="int16") /* ty=int16 */;
  %319 = cast(meta[relay.Constant][29] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
  %320 = reshape(%318, newshape=[]) /* ty=int16 */;
  %321 = reshape(%319, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
  %322 = @func_32(%320, %321) /* ty=(Tensor[(16, 13, 6), float64],) */;
  %323 = cast(%var_3647, dtype="float64") /* ty=Tensor[(10, 15, 14), float64] */;
  %324 = exp(%323) /* ty=Tensor[(10, 15, 14), float64] */;
  %325 = cast(%324, dtype="float64") /* ty=Tensor[(10, 15, 14), float64] */;
  %326 = %322.0;
  %327 = cos(%325) /* ty=Tensor[(10, 15, 14), float64] */;
  (%326, %var_3654, meta[relay.Constant][29] /* ty=Tensor[(1248), int16] */, %327)
}

def @func_5849(%var_5847: Tensor[(126), int16]) -> (Tensor[(968), int32], Tensor[(7, 10, 10), bool], Tensor[(700), float32], Tensor[(4, 7, 16), uint16], Tensor[(126), int16]) {
  %328 = @func_5103() /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(8, 11, 11), int32], Tensor[(968), int32]) */;
  %329 = cast(meta[relay.Constant][30] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %330 = cast(meta[relay.Constant][30] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %331 = reshape(%329, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float32] */;
  %332 = reshape(%330, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float32] */;
  %333 = @func_507(%331, %332) /* ty=(Tensor[(7, 10, 10), bool], Tensor[(7, 10, 10), float64], Tensor[(7, 10, 10), int32], Tensor[(7, 10, 10), float32]) */;
  %334 = cast(%var_5847, dtype="int16") /* ty=Tensor[(126), int16] */;
  %335 = reshape(%334, newshape=[6, 3, 7]) /* ty=Tensor[(6, 3, 7), int16] */;
  %336 = @func_4929(%335) /* ty=(Tensor[(6, 3, 7), bool], Tensor[(4, 7, 16), uint64], Tensor[(?, 15, 11), int16], Tensor[(4, 7, 16), uint16], Tensor[(6, 3, 7), float64]) */;
  %337 = %328.2;
  %338 = %333.0;
  %339 = %336.3;
  (%337, %338, meta[relay.Constant][30] /* ty=Tensor[(700), float32] */, %339, %var_5847)
}

def @func_8948(%var_8910: Tensor[(1008), float32]) -> (Tensor[(4, 7, 16), float32], Tensor[(1008), float32], Tensor[(33, 6), int8], Tensor[(4, 7, 16), float32], Tensor[(504, 2), float64]) {
  %340 = @func_4200() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %341 = cast(%var_8910, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %342 = cast(meta[relay.Constant][31] /* ty=Tensor[(33, 6), int8] */, dtype="int8") /* ty=Tensor[(33, 6), int8] */;
  %343 = cast(%var_8910, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %344 = reshape(%341, newshape=[504, 2]) /* ty=Tensor[(504, 2), float32] */;
  %345 = reshape(%342, newshape=[1, 198]) /* ty=Tensor[(1, 198), int8] */;
  %346 = reshape(%343, newshape=[504, 2]) /* ty=Tensor[(504, 2), float32] */;
  %347 = @func_8858(%344, %345, %346) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint64], Tensor[(1, 198), int8], Tensor[(504, 2), float64]) */;
  %348 = %347.3;
  %349 = cast(%348, dtype="float64") /* ty=Tensor[(504, 2), float64] */;
  %350 = @func_8255() /* ty=Tensor[(4, 7, 16), float32] */;
  %351 = %340.0;
  %352 = asin(%349) /* ty=Tensor[(504, 2), float64] */;
  (%350, %var_8910, meta[relay.Constant][31] /* ty=Tensor[(33, 6), int8] */, %351, %352)
}

def @func_673(%var_627: Tensor[(10, 1, 13), float32]) -> (Tensor[(10, 16, 13), int32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(10, 16, 13), float32], Tensor[(8, 156), int16], Tensor[(4, 12), float32], Tensor[(8, 156), int16]) {
  %353 = cast(%var_627, dtype="int32") /* ty=Tensor[(10, 1, 13), int32] */;
  %354 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 16, 13), float32] */, dtype="int32") /* ty=Tensor[(10, 16, 13), int32] */;
  %355 = cast(meta[relay.Constant][33] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %356 = cast(meta[relay.Constant][34] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
  %357 = reshape(%355, newshape=[]) /* ty=int16 */;
  %358 = reshape(%356, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
  %359 = @func_32(%357, %358) /* ty=(Tensor[(16, 13, 6), float64],) */;
  %360 = cast(%var_627, dtype="bool") /* ty=Tensor[(10, 1, 13), bool] */;
  %361 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 16, 13), float32] */, dtype="bool") /* ty=Tensor[(10, 16, 13), bool] */;
  %362 = equal(%360, %361) /* ty=Tensor[(10, 16, 13), bool] */;
  %363 = cast(%362, dtype="float32") /* ty=Tensor[(10, 16, 13), float32] */;
  %364 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 12), float32] */, dtype="float32") /* ty=Tensor[(4, 12), float32] */;
  %365 = reshape(%364, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
  %366 = @func_134(%365) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(8, 156), int16]) */;
  %367 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 12), float32] */, dtype="float32") /* ty=Tensor[(4, 12), float32] */;
  %368 = reshape(%367, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
  %369 = @func_134(%368) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(8, 156), int16]) */;
  %370 = logical_xor(%353, %354) /* ty=Tensor[(10, 16, 13), int32] */;
  %371 = %359.0;
  %372 = asin(%363) /* ty=Tensor[(10, 16, 13), float32] */;
  %373 = %366.3;
  %374 = %369.3;
  (%370, %371, meta[relay.Constant][33] /* ty=int16 */, meta[relay.Constant][34] /* ty=Tensor[(1248), int16] */, %372, %373, meta[relay.Constant][35] /* ty=Tensor[(4, 12), float32] */, %374)
}

def @func_6187(%var_6173: Tensor[(14, 15, 4), float64]) -> Tensor[(14, 15, 4), float64] {
  %375 = cast(%var_6173, dtype="float64") /* ty=Tensor[(14, 15, 4), float64] */;
  sigmoid(%375) /* ty=Tensor[(14, 15, 4), float64] */
}

def @func_8858(%var_8837: Tensor[(504, 2), float32], %var_8838: Tensor[(1, 198), int8], %var_8849: Tensor[(504, 2), float32]) -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint64], Tensor[(1, 198), int8], Tensor[(504, 2), float64]) {
  %376 = cast(%var_8837, dtype="float32") /* ty=Tensor[(504, 2), float32] */;
  %377 = cast(%var_8838, dtype="int8") /* ty=Tensor[(1, 198), int8] */;
  %378 = reshape(%376, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
  %379 = reshape(%377, newshape=[198]) /* ty=Tensor[(198), int8] */;
  %380 = @func_7762(%378, %379) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(14, 9, 8), int16], Tensor[(1008), float32], Tensor[(126), int16], Tensor[(2, 9, 11), bool], Tensor[(7, 10, 10), bool], Tensor[(700), float32], Tensor[(198), uint8]) */;
  %381 = cast(%var_8849, dtype="float64") /* ty=Tensor[(504, 2), float64] */;
  %382 = shape_of(%var_8837, dtype="int32") /* ty=Tensor[(2), int32] */;
  %383 = cast(%var_8837, dtype="float64") /* ty=Tensor[(504, 2), float64] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %385 = @func_6948() /* ty=Tensor[(4, 7, 16), float32] */;
  %386 = %380.0;
  %387 = mod(%383, %384) /* ty=Tensor[(504, 2), float64] */;
  (%385, %386, %var_8838, %387)
}

def @func_9118() -> (Tensor[(4, 7, 16), float32],) {
  %388 = @func_8361() /* ty=Tensor[(4, 7, 16), float32] */;
  (%388,)
}

def @func_8242(%var_8235: Tensor[(968), int32]) -> (Tensor[(4, 7, 16), float32], Tensor[(8, 11, 11), int32], Tensor[(968), int32]) {
  %389 = @func_6936() /* ty=(Tensor[(4, 7, 16), uint16], Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), float32]) */;
  %390 = cast(%var_8235, dtype="int32") /* ty=Tensor[(968), int32] */;
  %391 = reshape(%390, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), int32] */;
  %392 = @func_1271(%391) /* ty=(Tensor[(8, 11, 11), int32],) */;
  %393 = %389.2;
  %394 = %392.0;
  (%393, %394, %var_8235)
}

def @func_507(%var_469: Tensor[(7, 10, 10), float32], %var_493: Tensor[(7, 10, 10), float32]) -> (Tensor[(7, 10, 10), bool], Tensor[(7, 10, 10), float64], Tensor[(7, 10, 10), int32], Tensor[(7, 10, 10), float32]) {
  %395 = cast(%var_469, dtype="float32") /* ty=Tensor[(7, 10, 10), float32] */;
  %396 = sin(%395) /* ty=Tensor[(7, 10, 10), float32] */;
  %397 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 10, 10), float32] */, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %398 = shape_of(%var_469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%var_469, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %401 = greater_equal(%399, %400) /* ty=Tensor[(7, 10, 10), bool] */;
  %402 = cast(%401, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %403 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%396, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %406 = cast(%401, dtype="float64") /* ty=Tensor[(7, 10, 10), float64] */;
  %407 = cast(%var_493, dtype="int32") /* ty=Tensor[(7, 10, 10), int32] */;
  %408 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%396, dtype="int32") /* ty=Tensor[(7, 10, 10), int32] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %411 = cast(%396, dtype="float32") /* ty=Tensor[(7, 10, 10), float32] */;
  %412 = not_equal(%404, %405) /* ty=Tensor[(7, 10, 10), bool] */;
  %413 = atanh(%406) /* ty=Tensor[(7, 10, 10), float64] */;
  %414 = maximum(%409, %410) /* ty=Tensor[(7, 10, 10), int32] */;
  %415 = rsqrt(%411) /* ty=Tensor[(7, 10, 10), float32] */;
  (%412, %413, %414, %415)
}

def @func_8316(%var_8309: Tensor[(3, 8, 6), float64]) -> (Tensor[(3, 8, 6), float64],) {
  %416 = cast(%var_8309, dtype="float64") /* ty=Tensor[(3, 8, 6), float64] */;
  %417 = log(%416) /* ty=Tensor[(3, 8, 6), float64] */;
  (%417,)
}

def @func_2211(%var_2166: Tensor[(10, 5, 11), int16], %var_2167: Tensor[(10, 5, 11), int16], %var_2174: Tensor[(10, 5, 11), int16]) -> (Tensor[(10, 5, 11), int16], Tensor[(11, 9, 10), uint32], Tensor[(990), uint32], Tensor[(10, 5, 11), float32]) {
  %418 = cast(%var_2167, dtype="int16") /* ty=Tensor[(10, 5, 11), int16] */;
  %419 = shape_of(%var_2166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%var_2166, dtype="int16") /* ty=Tensor[(10, 5, 11), int16] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %422 = cast(meta[relay.Constant][37] /* ty=Tensor[(990), uint32] */, dtype="uint32") /* ty=Tensor[(990), uint32] */;
  %423 = reshape(%422, newshape=[11, 9, 10]) /* ty=Tensor[(11, 9, 10), uint32] */;
  %424 = @func_1706(%423) /* ty=(Tensor[(11, 9, 10), uint32],) */;
  %425 = cast(%var_2174, dtype="float32") /* ty=Tensor[(10, 5, 11), float32] */;
  %426 = shape_of(%var_2166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%var_2166, dtype="float32") /* ty=Tensor[(10, 5, 11), float32] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %429 = left_shift(%420, %421) /* ty=Tensor[(10, 5, 11), int16] */;
  %430 = %424.0;
  %431 = divide(%427, %428) /* ty=Tensor[(10, 5, 11), float32] */;
  (%429, %430, meta[relay.Constant][37] /* ty=Tensor[(990), uint32] */, %431)
}

def @func_6948() -> Tensor[(4, 7, 16), float32] {
  %432 = @func_5393() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) */;
  %432.0
}

def @func_7479() -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32], Tensor[(162), float32], Tensor[(4, 7, 16), uint64]) {
  %433 = @func_4488() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
  %434 = @func_6263() /* ty=(Tensor[(4, 7, 16), int32], Tensor[(4, 7, 16), float32]) */;
  %435 = cast(meta[relay.Constant][38] /* ty=Tensor[(162), uint64] */, dtype="uint64") /* ty=Tensor[(162), uint64] */;
  %436 = reshape(%435, newshape=[162]) /* ty=Tensor[(162), uint64] */;
  %437 = @func_5373(%436) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(162), uint64]) */;
  %438 = %437.1;
  %439 = cast(%438, dtype="bool") /* ty=Tensor[(6, 3, 9), bool] */;
  %440 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(162), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %441 = cast(meta[relay.Constant][38] /* ty=Tensor[(162), uint64] */, dtype="bool") /* ty=Tensor[(162), bool] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?), bool] */;
  %443 = greater_equal(%441, %442) /* ty=Tensor[(162), bool] */;
  %444 = cast(%443, dtype="float32") /* ty=Tensor[(162), float32] */;
  %445 = @func_3849() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %446 = %433.0;
  %447 = %434.1;
  %448 = exp(%444) /* ty=Tensor[(162), float32] */;
  %449 = %445.0;
  (%446, %447, %448, %449)
}

def @func_5775() -> Tensor[(4, 7, 16), uint64] {
  %450 = @func_4216() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %450.0
}

def @func_5510() -> Tensor[(4, 7, 16), float32] {
  %451 = @func_4200() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %451.0
}

def @func_3974() -> (Tensor[(4, 7, 16), float32],) {
  %452 = @func_3378() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %453 = %452.0;
  %454 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 7, 16), uint64] */, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  %455 = shape_of(%453, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%453, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %458 = add(%456, %457) /* ty=Tensor[(4, 7, 16), float32] */;
  (%458,)
}

def @func_4929(%var_4880: Tensor[(6, 3, 7), int16]) -> (Tensor[(6, 3, 7), bool], Tensor[(4, 7, 16), uint64], Tensor[(?, 15, 11), int16], Tensor[(4, 7, 16), uint16], Tensor[(6, 3, 7), float64]) {
  %459 = @func_4416() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) */;
  %460 = %459.1;
  %461 = cast(%460, dtype="bool") /* ty=bool */;
  %462 = cast(%var_4880, dtype="bool") /* ty=Tensor[(6, 3, 7), bool] */;
  %463 = @func_4216() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %464 = @func_4592() /* ty=(Tensor[(?, 15, 11), int16],) */;
  %465 = @func_4092() /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(288), int8], Tensor[(4, 7, 16), uint16], Tensor[(7, 10, 10), float32], Tensor[(700), float32]) */;
  %466 = cast(%var_4880, dtype="float64") /* ty=Tensor[(6, 3, 7), float64] */;
  %467 = logical_or(%461, %462) /* ty=Tensor[(6, 3, 7), bool] */;
  %468 = %463.0;
  %469 = %464.0;
  %470 = %465.2;
  %471 = cosh(%466) /* ty=Tensor[(6, 3, 7), float64] */;
  (%467, %468, %469, %470, %471)
}

def @func_7004() -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), bool]) {
  %472 = @func_6904() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32]) */;
  %473 = %472.1;
  %474 = cast(%473, dtype="uint64") /* ty=Tensor[(4, 7, 16), uint64] */;
  %475 = reshape(%474, newshape=[4, 7, 16]) /* ty=Tensor[(4, 7, 16), uint64] */;
  %476 = @func_5799(%475) /* ty=(Tensor[(4, 7, 16), bool],) */;
  %477 = %476.0;
  (%473, %477)
}

def @func_8689(%var_8666: Tensor[(162), uint64], %var_8671: Tensor[(960), bool], %var_8676: Tensor[(1008), float32], %var_8677: Tensor[(198), int8], %var_8682: Tensor[(144), float64], %var_8684: Tensor[(8, 11, 8), int16]) -> (Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(162), uint64], int16, Tensor[(960), bool], Tensor[(2, 9, 11), bool], Tensor[(1008), float32], Tensor[(198), int8], Tensor[(2, 8, 9), bool], Tensor[(144), float64], Tensor[(8, 11, 8), bool]) {
  %478 = @func_3974() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %479 = cast(%var_8666, dtype="uint64") /* ty=Tensor[(162), uint64] */;
  %480 = cast(%var_8666, dtype="uint64") /* ty=Tensor[(162), uint64] */;
  %481 = reshape(%479, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), uint64] */;
  %482 = reshape(%480, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), uint64] */;
  %483 = @func_3558(%481, %482) /* ty=(Tensor[(6, 3, 9), uint64],) */;
  %484 = cast(%var_8671, dtype="bool") /* ty=Tensor[(960), bool] */;
  %485 = cast(meta[relay.Constant][40] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %486 = reshape(%484, newshape=[960]) /* ty=Tensor[(960), bool] */;
  %487 = reshape(%485, newshape=[]) /* ty=int16 */;
  %488 = @func_6116(%486, %487) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(1, 162), uint64], int16, Tensor[(960), bool], int16) */;
  %489 = cast(%var_8676, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %490 = cast(%var_8677, dtype="int8") /* ty=Tensor[(198), int8] */;
  %491 = reshape(%489, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
  %492 = reshape(%490, newshape=[198]) /* ty=Tensor[(198), int8] */;
  %493 = @func_7762(%491, %492) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(14, 9, 8), int16], Tensor[(1008), float32], Tensor[(126), int16], Tensor[(2, 9, 11), bool], Tensor[(7, 10, 10), bool], Tensor[(700), float32], Tensor[(198), uint8]) */;
  %494 = cast(%var_8682, dtype="float64") /* ty=Tensor[(144), float64] */;
  %495 = reshape(%494, newshape=[2, 8, 9]) /* ty=Tensor[(2, 8, 9), float64] */;
  %496 = @func_8431(%495) /* ty=(Tensor[(2, 8, 9), float64], Tensor[(2, 8, 9), bool], Tensor[(4, 7, 16), uint64]) */;
  %497 = cast(meta[relay.Constant][40] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %498 = cast(%var_8684, dtype="bool") /* ty=Tensor[(8, 11, 8), bool] */;
  %499 = %478.0;
  %500 = %483.0;
  %501 = %488.5;
  %502 = %493.4;
  %503 = %496.1;
  %504 = greater(%497, %498) /* ty=Tensor[(8, 11, 8), bool] */;
  (%499, %500, %var_8666, %501, %var_8671, %502, %var_8676, %var_8677, %503, %var_8682, %504)
}

def @func_6048() -> (int16, Tensor[(13, 5, 15), float32]) {
  %505 = @func_4416() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) */;
  %506 = %505.1;
  %507 = cast(%506, dtype="int16") /* ty=int16 */;
  %508 = reshape(%507, newshape=[]) /* ty=int16 */;
  %509 = @func_1189(%508) /* ty=(Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(13, 5, 15), float32]) */;
  %510 = %509.3;
  (%506, %510)
}

def @func_1271(%var_1257: Tensor[(8, 11, 11), int32]) -> (Tensor[(8, 11, 11), int32],) {
  %511 = cast(meta[relay.Constant][41] /* ty=Tensor[(8, 11, 11), int32] */, dtype="int32") /* ty=Tensor[(8, 11, 11), int32] */;
  %512 = shape_of(%var_1257, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%var_1257, dtype="int32") /* ty=Tensor[(8, 11, 11), int32] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %515 = logical_xor(%513, %514) /* ty=Tensor[(8, 11, 11), int32] */;
  (%515,)
}

def @func_3849() -> (Tensor[(4, 7, 16), uint64],) {
  %516 = @func_3378() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %517 = %516.0;
  (%517,)
}

def @func_134(%var_122: Tensor[(16, 3, 1), float32]) -> (Tensor[(16, 3, 1), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(8, 156), int16]) {
  %518 = cast(%var_122, dtype="float32") /* ty=Tensor[(16, 3, 1), float32] */;
  %519 = cast(meta[relay.Constant][42] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %520 = cast(meta[relay.Constant][43] /* ty=Tensor[(8, 156), int16] */, dtype="int16") /* ty=Tensor[(8, 156), int16] */;
  %521 = reshape(%519, newshape=[]) /* ty=int16 */;
  %522 = reshape(%520, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
  %523 = @func_32(%521, %522) /* ty=(Tensor[(16, 13, 6), float64],) */;
  %524 = cosh(%518) /* ty=Tensor[(16, 3, 1), float32] */;
  %525 = %523.0;
  (%524, %525, meta[relay.Constant][42] /* ty=int16 */, meta[relay.Constant][43] /* ty=Tensor[(8, 156), int16] */)
}

def @func_4365() -> Tensor[(4, 7, 16), uint64] {
  %526 = @func_3849() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %526.0
}

def @func_4488() -> (Tensor[(4, 7, 16), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) {
  %527 = @func_3974() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %528 = cast(meta[relay.Constant][44] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %529 = cast(meta[relay.Constant][45] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
  %530 = reshape(%528, newshape=[]) /* ty=int16 */;
  %531 = reshape(%529, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
  %532 = @func_32(%530, %531) /* ty=(Tensor[(16, 13, 6), float64],) */;
  %533 = %527.0;
  %534 = %532.0;
  (%533, %534, meta[relay.Constant][44] /* ty=int16 */, meta[relay.Constant][45] /* ty=Tensor[(1248), int16] */)
}

def @func_7362() -> (Tensor[(4, 7, 16), float32],) {
  %535 = @func_5645() /* ty=Tensor[(4, 7, 16), float32] */;
  (%535,)
}

def @func_9054() -> (Tensor[(4, 7, 16), float32],) {
  %536 = @func_7525() /* ty=Tensor[(4, 7, 16), float32] */;
  (%536,)
}

def @func_8204(%var_8148: Tensor[(4, 7, 16), float32], %var_8197: Tensor[(1760), float64]) -> (Tensor[(4, 7, 16), int16], Tensor[(4, 7, 16), float32], Tensor[(1248), int16], int16, Tensor[(968), int32], Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), int32], Tensor[(11, 10, 16), float64], Tensor[(1760), float64]) {
  %537 = @func_7362() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %538 = %537.0;
  %539 = cast(%var_8148, dtype="int16") /* ty=Tensor[(4, 7, 16), int16] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="int16") /* ty=Tensor[(4, 7, 16), int16] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %543 = @func_5393() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) */;
  %544 = cast(meta[relay.Constant][46] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %545 = cast(meta[relay.Constant][47] /* ty=Tensor[(968), int32] */, dtype="int32") /* ty=Tensor[(968), int32] */;
  %546 = reshape(%544, newshape=[]) /* ty=int16 */;
  %547 = reshape(%545, newshape=[484, 2]) /* ty=Tensor[(484, 2), int32] */;
  %548 = @func_5188(%546, %547) /* ty=(Tensor[(?, 15, 11), int16], int16, int16, Tensor[(8, 11, 11), bool], Tensor[(16, 13, 6), float64], Tensor[(1248), int16]) */;
  %549 = @func_7004() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), bool]) */;
  %550 = @func_3974() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %551 = @func_7686() /* ty=(Tensor[(4, 7, 16), float64], Tensor[(4, 7, 16), int32], Tensor[(4, 7, 16), uint64]) */;
  %552 = cast(%var_8197, dtype="float64") /* ty=Tensor[(1760), float64] */;
  %553 = reshape(%552, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
  %554 = @func_6243(%553) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(4, 7, 16), uint64], Tensor[(11, 10, 16), float32], Tensor[(126), int16], Tensor[(1008), float32], Tensor[(126), int16]) */;
  %555 = bitwise_or(%541, %542) /* ty=Tensor[(4, 7, 16), int16] */;
  %556 = %543.0;
  %557 = %548.5;
  %558 = %549.0;
  %559 = %550.0;
  %560 = %551.1;
  %561 = %554.0;
  (%555, %556, %557, meta[relay.Constant][46] /* ty=int16 */, meta[relay.Constant][47] /* ty=Tensor[(968), int32] */, %558, %559, %560, %561, %var_8197)
}

def @func_3946(%var_3936: Tensor[(1, 3, 13), float64]) -> (Tensor[(?, 3, 13), float64],) {
  %562 = cast(%var_3936, dtype="float64") /* ty=Tensor[(1, 3, 13), float64] */;
  %563 = asin(%562) /* ty=Tensor[(1, 3, 13), float64] */;
  %564 = cast(%var_3936, dtype="float64") /* ty=Tensor[(1, 3, 13), float64] */;
  %565 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%563, dtype="float64") /* ty=Tensor[(1, 3, 13), float64] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %568 = mod(%566, %567) /* ty=Tensor[(?, 3, 13), float64] */;
  %569 = cast(%568, dtype="float64") /* ty=Tensor[(?, 3, 13), float64] */;
  %570 = tan(%569) /* ty=Tensor[(?, 3, 13), float64] */;
  (%570,)
}

def @func_9144() -> (Tensor[(4, 7, 16), float32],) {
  %571 = @func_7362() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %572 = %571.0;
  (%572,)
}

def @main(%var_9213: Tensor[(3, 13, 16), int16]) -> (Tensor[(3, 13, 16), bool], int16, Tensor[(3, 13, 16), float64]) {
  %573 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 13, 16), int16] */, dtype="bool") /* ty=Tensor[(3, 13, 16), bool] */;
  %574 = shape_of(%var_9213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%var_9213, dtype="bool") /* ty=Tensor[(3, 13, 16), bool] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %577 = @func_6048() /* ty=(int16, Tensor[(13, 5, 15), float32]) */;
  %578 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 13, 16), int16] */, dtype="float64") /* ty=Tensor[(3, 13, 16), float64] */;
  %579 = shape_of(%var_9213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%var_9213, dtype="float64") /* ty=Tensor[(3, 13, 16), float64] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %582 = not_equal(%575, %576) /* ty=Tensor[(3, 13, 16), bool] */;
  %583 = %577.0;
  %584 = power(%580, %581) /* ty=Tensor[(3, 13, 16), float64] */;
  (%582, %583, %584)
}

def @func_6550() -> (Tensor[(165), float32], Tensor[(4, 7, 16), uint64]) {
  %585 = @func_4216() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %586 = @func_6408() /* ty=Tensor[(165), float32] */;
  %587 = %585.0;
  (%586, %587)
}

def @func_3558(%var_3548: Tensor[(6, 3, 9), uint64], %var_3549: Tensor[(6, 3, 9), uint64]) -> (Tensor[(6, 3, 9), uint64],) {
  %588 = cast(%var_3549, dtype="uint64") /* ty=Tensor[(6, 3, 9), uint64] */;
  %589 = shape_of(%var_3548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%var_3548, dtype="uint64") /* ty=Tensor[(6, 3, 9), uint64] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %592 = bitwise_xor(%590, %591) /* ty=Tensor[(6, 3, 9), uint64] */;
  (%592,)
}

def @func_7525() -> Tensor[(4, 7, 16), float32] {
  %593 = @func_7318() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(960), bool], int16) */;
  %593.0
}

def @func_4216() -> (Tensor[(4, 7, 16), uint64],) {
  %594 = @func_3378() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %595 = %594.0;
  (%595,)
}

def @func_6489(%var_6428: Tensor[(4, 7, 16), float32]) -> (Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), bool], Tensor[(1, 15, 11), float32], Tensor[(165), float32]) {
  %596 = @func_3849() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %597 = @func_4216() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %598 = cast(%var_6428, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  %599 = acos(%598) /* ty=Tensor[(4, 7, 16), float32] */;
  %600 = @func_5114() /* ty=Tensor[(4, 7, 16), float32] */;
  %601 = cast(%var_6428, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %605 = greater(%603, %604) /* ty=Tensor[(4, 7, 16), bool] */;
  %606 = cast(%605, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %607 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%599, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %610 = cast(meta[relay.Constant][49] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %611 = reshape(%610, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), float32] */;
  %612 = %596.0;
  %613 = %597.0;
  %614 = greater_equal(%608, %609) /* ty=Tensor[(4, 7, 16), bool] */;
  %615 = @func_4025(%611) /* ty=Tensor[(1, 15, 11), float32] */;
  (%612, %613, %614, %615, meta[relay.Constant][49] /* ty=Tensor[(165), float32] */)
}

def @func_8255() -> Tensor[(4, 7, 16), float32] {
  %616 = @func_6904() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32]) */;
  %616.1
}

def @func_6116(%var_6113: Tensor[(960), bool], %var_6114: int16) -> (Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(1, 162), uint64], int16, Tensor[(960), bool], int16) {
  %617 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 162), uint64] */, dtype="uint64") /* ty=Tensor[(1, 162), uint64] */;
  %618 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 162), uint64] */, dtype="uint64") /* ty=Tensor[(1, 162), uint64] */;
  %619 = reshape(%617, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), uint64] */;
  %620 = reshape(%618, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), uint64] */;
  %621 = @func_3558(%619, %620) /* ty=(Tensor[(6, 3, 9), uint64],) */;
  %622 = cast(%var_6113, dtype="bool") /* ty=Tensor[(960), bool] */;
  %623 = cast(%var_6113, dtype="bool") /* ty=Tensor[(960), bool] */;
  %624 = cast(%var_6114, dtype="int16") /* ty=int16 */;
  %625 = reshape(%622, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
  %626 = reshape(%623, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
  %627 = reshape(%624, newshape=[]) /* ty=int16 */;
  %628 = @func_5485(%625, %626, %627) /* ty=(Tensor[(4, 15, 16), bool], Tensor[(4, 7, 16), bool], Tensor[(16, 10), int8], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
  %629 = @func_5510() /* ty=Tensor[(4, 7, 16), float32] */;
  %630 = %621.0;
  %631 = %628.4;
  (%629, %630, meta[relay.Constant][50] /* ty=Tensor[(1, 162), uint64] */, %631, %var_6113, %var_6114)
}

def @func_1189(%var_1167: int16) -> (Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(13, 5, 15), float32]) {
  %632 = cast(%var_1167, dtype="int16") /* ty=int16 */;
  %633 = cast(meta[relay.Constant][51] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
  %634 = reshape(%632, newshape=[]) /* ty=int16 */;
  %635 = reshape(%633, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
  %636 = @func_32(%634, %635) /* ty=(Tensor[(16, 13, 6), float64],) */;
  %637 = cast(meta[relay.Constant][52] /* ty=Tensor[(13, 5, 15), float32] */, dtype="float32") /* ty=Tensor[(13, 5, 15), float32] */;
  %638 = erf(%637) /* ty=Tensor[(13, 5, 15), float32] */;
  %639 = cast(%638, dtype="float32") /* ty=Tensor[(13, 5, 15), float32] */;
  %640 = %636.0;
  %641 = atan(%639) /* ty=Tensor[(13, 5, 15), float32] */;
  (%640, %var_1167, meta[relay.Constant][51] /* ty=Tensor[(1248), int16] */, %641)
}

def @func_5373(%var_5347: Tensor[(162), uint64]) -> (Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(162), uint64]) {
  %642 = @func_4633() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %643 = cast(%var_5347, dtype="uint64") /* ty=Tensor[(162), uint64] */;
  %644 = cast(%var_5347, dtype="uint64") /* ty=Tensor[(162), uint64] */;
  %645 = reshape(%643, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), uint64] */;
  %646 = reshape(%644, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), uint64] */;
  %647 = @func_3558(%645, %646) /* ty=(Tensor[(6, 3, 9), uint64],) */;
  %648 = %642.0;
  %649 = %647.0;
  (%648, %649, %var_5347)
}

def @func_1374(%var_1363: Tensor[(9, 14, 6), int64], %var_1364: Tensor[(9, 14, 6), int64]) -> (Tensor[(9, 14, 6), bool], Tensor[(9, 14, 6), uint8]) {
  %650 = cast(%var_1364, dtype="bool") /* ty=Tensor[(9, 14, 6), bool] */;
  %651 = shape_of(%var_1363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%var_1363, dtype="bool") /* ty=Tensor[(9, 14, 6), bool] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %654 = cast(%var_1363, dtype="uint8") /* ty=Tensor[(9, 14, 6), uint8] */;
  %655 = shape_of(%var_1364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%var_1364, dtype="uint8") /* ty=Tensor[(9, 14, 6), uint8] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %658 = greater(%652, %653) /* ty=Tensor[(9, 14, 6), bool] */;
  %659 = bitwise_xor(%656, %657) /* ty=Tensor[(9, 14, 6), uint8] */;
  (%658, %659)
}

def @func_3018(%var_2998: Tensor[(3, 5, 3), float32]) -> (Tensor[(3, 5, 3), bool],) {
  %660 = cast(%var_2998, dtype="float32") /* ty=Tensor[(3, 5, 3), float32] */;
  %661 = sin(%660) /* ty=Tensor[(3, 5, 3), float32] */;
  %662 = cast(%var_2998, dtype="float64") /* ty=Tensor[(3, 5, 3), float64] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%661, dtype="float64") /* ty=Tensor[(3, 5, 3), float64] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %666 = floor_divide(%664, %665) /* ty=Tensor[(3, 5, 3), float64] */;
  %667 = cast(%var_2998, dtype="bool") /* ty=Tensor[(3, 5, 3), bool] */;
  %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%666, dtype="bool") /* ty=Tensor[(3, 5, 3), bool] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %671 = less_equal(%669, %670) /* ty=Tensor[(3, 5, 3), bool] */;
  (%671,)
}

def @func_5799(%var_5794: Tensor[(4, 7, 16), uint64]) -> (Tensor[(4, 7, 16), bool],) {
  %672 = @func_3849() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %673 = %672.0;
  %674 = cast(%var_5794, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %675 = shape_of(%673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%673, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %678 = logical_or(%676, %677) /* ty=Tensor[(4, 7, 16), bool] */;
  (%678,)
}

def @func_9092() -> (Tensor[(11, 9, 10), uint32], Tensor[(4, 7, 16), bool], Tensor[(160), int8]) {
  %679 = @func_6865() /* ty=(int16, Tensor[(11, 9, 10), uint32], Tensor[(550), int16]) */;
  %680 = cast(meta[relay.Constant][53] /* ty=Tensor[(160), int8] */, dtype="int8") /* ty=Tensor[(160), int8] */;
  %681 = reshape(%680, newshape=[160]) /* ty=Tensor[(160), int8] */;
  %682 = @func_4320(%681) /* ty=(Tensor[(160), int8], Tensor[(4, 7, 16), bool], Tensor[(2, 5, 16), float32], Tensor[(4, 7, 16), bool]) */;
  %683 = %679.1;
  %684 = %682.1;
  (%683, %684, meta[relay.Constant][53] /* ty=Tensor[(160), int8] */)
}

def @func_5645() -> Tensor[(4, 7, 16), float32] {
  @func_5114() /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_6601() -> (int16, Tensor[(4, 7, 16), float32]) {
  %685 = @func_6048() /* ty=(int16, Tensor[(13, 5, 15), float32]) */;
  %686 = @func_5393() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) */;
  %687 = %685.0;
  %688 = %686.0;
  (%687, %688)
}

def @func_8431(%var_8408: Tensor[(2, 8, 9), float64]) -> (Tensor[(2, 8, 9), float64], Tensor[(2, 8, 9), bool], Tensor[(4, 7, 16), uint64]) {
  %689 = cast(%var_8408, dtype="float64") /* ty=Tensor[(2, 8, 9), float64] */;
  %690 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(2, 8, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(meta[relay.Constant][54] /* ty=Tensor[(2, 8, 9), float64] */, dtype="float64") /* ty=Tensor[(2, 8, 9), float64] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %693 = cast(meta[relay.Constant][54] /* ty=Tensor[(2, 8, 9), float64] */, dtype="bool") /* ty=Tensor[(2, 8, 9), bool] */;
  %694 = shape_of(%var_8408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%var_8408, dtype="bool") /* ty=Tensor[(2, 8, 9), bool] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %697 = power(%691, %692) /* ty=Tensor[(2, 8, 9), float64] */;
  %698 = greater(%695, %696) /* ty=Tensor[(2, 8, 9), bool] */;
  %699 = @func_5775() /* ty=Tensor[(4, 7, 16), uint64] */;
  (%697, %698, %699)
}

def @func_6802(%var_6775: int16, %var_6782: Tensor[(120, 8), bool]) -> (Tensor[(4, 7, 16), uint64], Tensor[(16, 13, 6), float64], int16, Tensor[(4, 7, 16), float32], Tensor[(120, 8), bool]) {
  %700 = @func_3378() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %701 = cast(%var_6775, dtype="int16") /* ty=int16 */;
  %702 = reshape(%701, newshape=[]) /* ty=int16 */;
  %703 = @func_1189(%702) /* ty=(Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(13, 5, 15), float32]) */;
  %704 = cast(%var_6782, dtype="bool") /* ty=Tensor[(120, 8), bool] */;
  %705 = cast(%var_6775, dtype="int16") /* ty=int16 */;
  %706 = reshape(%704, newshape=[960]) /* ty=Tensor[(960), bool] */;
  %707 = reshape(%705, newshape=[]) /* ty=int16 */;
  %708 = @func_6116(%706, %707) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(1, 162), uint64], int16, Tensor[(960), bool], int16) */;
  %709 = %700.0;
  %710 = %703.0;
  %711 = %708.0;
  (%709, %710, %var_6775, %711, %var_6782)
}

def @func_6578(%var_6567: Tensor[(16, 13, 6), float64]) -> (Tensor[(16, 13, 6), float32],) {
  %712 = @func_4488() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
  %713 = %712.1;
  %714 = cast(%var_6567, dtype="float32") /* ty=Tensor[(16, 13, 6), float32] */;
  %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%713, dtype="float32") /* ty=Tensor[(16, 13, 6), float32] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %718 = power(%716, %717) /* ty=Tensor[(16, 13, 6), float32] */;
  (%718,)
}

def @func_6904() -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32]) {
  %719 = @func_4633() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %720 = %719.0;
  %721 = @func_5645() /* ty=Tensor[(4, 7, 16), float32] */;
  (%720, %721)
}

def @func_8518(%var_8501: Tensor[(960), bool], %var_8502: int16) -> (Tensor[(165), float32], Tensor[(16, 10), int8], Tensor[(960), bool], int16, Tensor[(4, 7, 16), uint16]) {
  %722 = cast(%var_8501, dtype="bool") /* ty=Tensor[(960), bool] */;
  %723 = cast(%var_8501, dtype="bool") /* ty=Tensor[(960), bool] */;
  %724 = cast(%var_8502, dtype="int16") /* ty=int16 */;
  %725 = reshape(%722, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
  %726 = reshape(%723, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
  %727 = reshape(%724, newshape=[]) /* ty=int16 */;
  %728 = @func_5485(%725, %726, %727) /* ty=(Tensor[(4, 15, 16), bool], Tensor[(4, 7, 16), bool], Tensor[(16, 10), int8], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
  %729 = @func_6936() /* ty=(Tensor[(4, 7, 16), uint16], Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), float32]) */;
  %730 = @func_6408() /* ty=Tensor[(165), float32] */;
  %731 = %728.2;
  %732 = %729.0;
  (%730, %731, %var_8501, %var_8502, %732)
}

def @func_4633() -> (Tensor[(4, 7, 16), float32],) {
  %733 = @func_3974() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %734 = %733.0;
  (%734,)
}

def @func_6243(%var_6219: Tensor[(11, 10, 16), float64]) -> (Tensor[(11, 10, 16), float64], Tensor[(4, 7, 16), uint64], Tensor[(11, 10, 16), float32], Tensor[(126), int16], Tensor[(1008), float32], Tensor[(126), int16]) {
  %735 = cast(%var_6219, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %736 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(11, 10, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(meta[relay.Constant][55] /* ty=Tensor[(11, 10, 16), float64] */, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %739 = cast(%var_6219, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %740 = atanh(%739) /* ty=Tensor[(11, 10, 16), float64] */;
  %741 = cast(%740, dtype="float32") /* ty=Tensor[(11, 10, 16), float32] */;
  %742 = cast(meta[relay.Constant][56] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %743 = cast(meta[relay.Constant][57] /* ty=Tensor[(126), int16] */, dtype="int16") /* ty=Tensor[(126), int16] */;
  %744 = reshape(%742, newshape=[14, 9, 8]) /* ty=Tensor[(14, 9, 8), float32] */;
  %745 = reshape(%743, newshape=[126]) /* ty=Tensor[(126), int16] */;
  %746 = @func_5620(%744, %745) /* ty=(Tensor[(14, 9, 8), int16], Tensor[(?, 3, 13), bool], Tensor[(6, 3, 7), float64], Tensor[(126), int16]) */;
  %747 = power(%737, %738) /* ty=Tensor[(11, 10, 16), float64] */;
  %748 = @func_5775() /* ty=Tensor[(4, 7, 16), uint64] */;
  %749 = sinh(%741) /* ty=Tensor[(11, 10, 16), float32] */;
  %750 = %746.3;
  (%747, %748, %749, %750, meta[relay.Constant][56] /* ty=Tensor[(1008), float32] */, meta[relay.Constant][57] /* ty=Tensor[(126), int16] */)
}

def @func_7848(%var_7831: int16) -> (Tensor[(165), float32], Tensor[(16, 10), int8], Tensor[(960), bool], int16, Tensor[(3, 5, 3), bool], Tensor[(45), float32]) {
  %751 = cast(meta[relay.Constant][58] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
  %752 = cast(meta[relay.Constant][58] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
  %753 = cast(%var_7831, dtype="int16") /* ty=int16 */;
  %754 = reshape(%751, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
  %755 = reshape(%752, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
  %756 = reshape(%753, newshape=[]) /* ty=int16 */;
  %757 = @func_5485(%754, %755, %756) /* ty=(Tensor[(4, 15, 16), bool], Tensor[(4, 7, 16), bool], Tensor[(16, 10), int8], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
  %758 = cast(meta[relay.Constant][59] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
  %759 = reshape(%758, newshape=[3, 5, 3]) /* ty=Tensor[(3, 5, 3), float32] */;
  %760 = @func_3018(%759) /* ty=(Tensor[(3, 5, 3), bool],) */;
  %761 = @func_6408() /* ty=Tensor[(165), float32] */;
  %762 = %757.2;
  %763 = %760.0;
  (%761, %762, meta[relay.Constant][58] /* ty=Tensor[(960), bool] */, %var_7831, %763, meta[relay.Constant][59] /* ty=Tensor[(45), float32] */)
}

def @func_8361() -> Tensor[(4, 7, 16), float32] {
  %764 = @func_7004() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), bool]) */;
  %764.0
}

def @func_4320(%var_4249: Tensor[(160), int8]) -> (Tensor[(160), int8], Tensor[(4, 7, 16), bool], Tensor[(2, 5, 16), float32], Tensor[(4, 7, 16), bool]) {
  %765 = @func_4200() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %766 = %765.0;
  %767 = cast(meta[relay.Constant][60] /* ty=Tensor[(4, 7, 16), float32] */, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%766, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %771 = cast(%var_4249, dtype="int8") /* ty=Tensor[(160), int8] */;
  %772 = cast(%var_4249, dtype="int8") /* ty=Tensor[(160), int8] */;
  %773 = reshape(%771, newshape=[2, 5, 16]) /* ty=Tensor[(2, 5, 16), int8] */;
  %774 = reshape(%772, newshape=[2, 5, 16]) /* ty=Tensor[(2, 5, 16), int8] */;
  %775 = @func_4139(%773, %774) /* ty=(Tensor[(2, 5, 16), bool], Tensor[(?, 3, 13), float64], Tensor[(39), float64], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(2, 5, 16), float32], Tensor[(13, 5, 15), float32]) */;
  %776 = %775.0;
  %777 = cast(%776, dtype="float32") /* ty=Tensor[(2, 5, 16), float32] */;
  %778 = cast(%766, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %779 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(4, 7, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(meta[relay.Constant][60] /* ty=Tensor[(4, 7, 16), float32] */, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %782 = less(%769, %770) /* ty=Tensor[(4, 7, 16), bool] */;
  %783 = sqrt(%777) /* ty=Tensor[(2, 5, 16), float32] */;
  %784 = equal(%780, %781) /* ty=Tensor[(4, 7, 16), bool] */;
  (%var_4249, %782, %783, %784)
}

def @func_8564(%var_8558: Tensor[(8, 4, 7), float64]) -> Tensor[(8, 4, 7), float64] {
  %785 = cast(%var_8558, dtype="float64") /* ty=Tensor[(8, 4, 7), float64] */;
  tan(%785) /* ty=Tensor[(8, 4, 7), float64] */
}

def @func_6959() -> Tensor[(4, 7, 16), float32] {
  @func_5114() /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_3465(%var_3443: Tensor[(198), int8], %var_3449: Tensor[(45), float32]) -> (Tensor[(16, 5, 4), float64], Tensor[(2, 9, 11), float64], Tensor[(198), int8], Tensor[(3, 5, 3), bool], Tensor[(45), float32], Tensor[(11, 9, 10), uint32], Tensor[(330, 3), uint32]) {
  %786 = cast(2.07545f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %787 = cast(meta[relay.Constant][61] /* ty=Tensor[(16, 5, 4), float64] */, dtype="float64") /* ty=Tensor[(16, 5, 4), float64] */;
  %788 = cast(%var_3443, dtype="int8") /* ty=Tensor[(198), int8] */;
  %789 = reshape(%788, newshape=[2, 9, 11]) /* ty=Tensor[(2, 9, 11), int8] */;
  %790 = @func_719(%789) /* ty=(Tensor[(2, 9, 11), bool], Tensor[(2, 9, 11), float64]) */;
  %791 = cast(%var_3449, dtype="float32") /* ty=Tensor[(45), float32] */;
  %792 = reshape(%791, newshape=[3, 5, 3]) /* ty=Tensor[(3, 5, 3), float32] */;
  %793 = @func_3018(%792) /* ty=(Tensor[(3, 5, 3), bool],) */;
  %794 = cast(meta[relay.Constant][62] /* ty=Tensor[(330, 3), uint32] */, dtype="uint32") /* ty=Tensor[(330, 3), uint32] */;
  %795 = reshape(%794, newshape=[11, 9, 10]) /* ty=Tensor[(11, 9, 10), uint32] */;
  %796 = @func_1706(%795) /* ty=(Tensor[(11, 9, 10), uint32],) */;
  %797 = floor_divide(%786, %787) /* ty=Tensor[(16, 5, 4), float64] */;
  %798 = %790.1;
  %799 = %793.0;
  %800 = %796.0;
  (%797, %798, %var_3443, %799, %var_3449, %800, meta[relay.Constant][62] /* ty=Tensor[(330, 3), uint32] */)
}

def @func_5761() -> Tensor[(4, 7, 16), float32] {
  %801 = @func_4488() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
  %801.0
}

def @func_5620(%var_5575: Tensor[(14, 9, 8), float32], %var_5615: Tensor[(126), int16]) -> (Tensor[(14, 9, 8), int16], Tensor[(?, 3, 13), bool], Tensor[(6, 3, 7), float64], Tensor[(126), int16]) {
  %802 = cast(%var_5575, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
  %803 = sin(%802) /* ty=Tensor[(14, 9, 8), float32] */;
  %804 = cast(%803, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
  %805 = sinh(%804) /* ty=Tensor[(14, 9, 8), float32] */;
  %806 = cast(%805, dtype="int16") /* ty=Tensor[(14, 9, 8), int16] */;
  %807 = shape_of(%803, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%803, dtype="int16") /* ty=Tensor[(14, 9, 8), int16] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %810 = cast(meta[relay.Constant][63] /* ty=Tensor[(39), float64] */, dtype="float64") /* ty=Tensor[(39), float64] */;
  %811 = reshape(%810, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float64] */;
  %812 = @func_3946(%811) /* ty=(Tensor[(?, 3, 13), float64],) */;
  %813 = %812.0;
  %814 = cast(meta[relay.Constant][63] /* ty=Tensor[(39), float64] */, dtype="bool") /* ty=Tensor[(39), bool] */;
  %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%813, dtype="bool") /* ty=Tensor[(?, 3, 13), bool] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %818 = cast(%var_5615, dtype="int16") /* ty=Tensor[(126), int16] */;
  %819 = reshape(%818, newshape=[6, 3, 7]) /* ty=Tensor[(6, 3, 7), int16] */;
  %820 = @func_4929(%819) /* ty=(Tensor[(6, 3, 7), bool], Tensor[(4, 7, 16), uint64], Tensor[(?, 15, 11), int16], Tensor[(4, 7, 16), uint16], Tensor[(6, 3, 7), float64]) */;
  %821 = bitwise_or(%808, %809) /* ty=Tensor[(14, 9, 8), int16] */;
  %822 = logical_and(%816, %817) /* ty=Tensor[(?, 3, 13), bool] */;
  %823 = %820.4;
  (%821, %822, %823, %var_5615)
}

def @func_719(%var_693: Tensor[(2, 9, 11), int8]) -> (Tensor[(2, 9, 11), bool], Tensor[(2, 9, 11), float64]) {
  %824 = cast(%var_693, dtype="bool") /* ty=Tensor[(2, 9, 11), bool] */;
  %825 = shape_of(meta[relay.Constant][64] /* ty=Tensor[(2, 9, 11), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(meta[relay.Constant][64] /* ty=Tensor[(2, 9, 11), int8] */, dtype="bool") /* ty=Tensor[(2, 9, 11), bool] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %828 = cast(%var_693, dtype="float64") /* ty=Tensor[(2, 9, 11), float64] */;
  %829 = greater(%826, %827) /* ty=Tensor[(2, 9, 11), bool] */;
  %830 = acos(%828) /* ty=Tensor[(2, 9, 11), float64] */;
  (%829, %830)
}

def @func_6324() -> (Tensor[(165), float32],) {
  %831 = @func_4416() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) */;
  %832 = %831.4;
  (%832,)
}

def @func_4957(%var_4955: Tensor[(242, 4), int32]) -> (Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), float32], Tensor[(16, 3, 10), float64], Tensor[(242, 4), int32]) {
  %833 = @func_3378() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %834 = cast(%var_4955, dtype="int32") /* ty=Tensor[(242, 4), int32] */;
  %835 = reshape(%834, newshape=[968]) /* ty=Tensor[(968), int32] */;
  %836 = @func_3245(%835) /* ty=(Tensor[(16, 3, 10), float64], Tensor[(8, 11, 11), int32], Tensor[(968), float32]) */;
  %837 = %833.0;
  %838 = @func_4699() /* ty=Tensor[(4, 7, 16), float32] */;
  %839 = %836.0;
  (%837, %838, %839, %var_4955)
}

def @func_4092() -> (Tensor[(4, 7, 16), uint64], Tensor[(288), int8], Tensor[(4, 7, 16), uint16], Tensor[(7, 10, 10), float32], Tensor[(700), float32]) {
  %840 = cast(meta[relay.Constant][65] /* ty=Tensor[(288), int8] */, dtype="int8") /* ty=Tensor[(288), int8] */;
  %841 = reshape(%840, newshape=[8, 4, 9]) /* ty=Tensor[(8, 4, 9), int8] */;
  %842 = @func_3739(%841) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(8, 4, 9), bool]) */;
  %843 = @func_3849() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %844 = %843.0;
  %845 = cast(%844, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  %846 = cos(%845) /* ty=Tensor[(4, 7, 16), float32] */;
  %847 = cast(%844, dtype="int8") /* ty=Tensor[(4, 7, 16), int8] */;
  %848 = shape_of(%846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%846, dtype="int8") /* ty=Tensor[(4, 7, 16), int8] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %851 = multiply(%849, %850) /* ty=Tensor[(4, 7, 16), int8] */;
  %852 = cast(%846, dtype="uint16") /* ty=Tensor[(4, 7, 16), uint16] */;
  %853 = shape_of(%851, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%851, dtype="uint16") /* ty=Tensor[(4, 7, 16), uint16] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %856 = cast(meta[relay.Constant][66] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %857 = cast(meta[relay.Constant][66] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %858 = reshape(%856, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float32] */;
  %859 = reshape(%857, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float32] */;
  %860 = @func_507(%858, %859) /* ty=(Tensor[(7, 10, 10), bool], Tensor[(7, 10, 10), float64], Tensor[(7, 10, 10), int32], Tensor[(7, 10, 10), float32]) */;
  %861 = %842.0;
  %862 = bitwise_and(%854, %855) /* ty=Tensor[(4, 7, 16), uint16] */;
  %863 = %860.3;
  (%861, meta[relay.Constant][65] /* ty=Tensor[(288), int8] */, %862, %863, meta[relay.Constant][66] /* ty=Tensor[(700), float32] */)
}

def @func_6658(%var_6635: Tensor[(4, 7, 16), uint16]) -> Tensor[(4, 7, 16), float32] {
  %864 = @func_5393() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) */;
  %865 = %864.1;
  %866 = cast(%var_6635, dtype="uint64") /* ty=Tensor[(4, 7, 16), uint64] */;
  %867 = shape_of(%865, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(%865, dtype="uint64") /* ty=Tensor[(4, 7, 16), uint64] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %870 = minimum(%868, %869) /* ty=Tensor[(4, 7, 16), uint64] */;
  %871 = cast(%870, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  asin(%871) /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_5393() -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) {
  %872 = @func_4092() /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(288), int8], Tensor[(4, 7, 16), uint16], Tensor[(7, 10, 10), float32], Tensor[(700), float32]) */;
  %873 = @func_5114() /* ty=Tensor[(4, 7, 16), float32] */;
  %874 = %872.2;
  (%873, %874)
}

def @func_7686() -> (Tensor[(4, 7, 16), float64], Tensor[(4, 7, 16), int32], Tensor[(4, 7, 16), uint64]) {
  %875 = @func_6340() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %876 = %875.0;
  %877 = cast(%876, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  %878 = sin(%877) /* ty=Tensor[(4, 7, 16), float32] */;
  %879 = cast(%878, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
  %880 = @func_6263() /* ty=(Tensor[(4, 7, 16), int32], Tensor[(4, 7, 16), float32]) */;
  %881 = @func_6340() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %882 = cosh(%879) /* ty=Tensor[(4, 7, 16), float64] */;
  %883 = %880.0;
  %884 = %881.0;
  (%882, %883, %884)
}

def @func_7558(%var_7556: int16) -> (Tensor[(4, 7, 16), float32], Tensor[(4, 15, 16), bool], Tensor[(960), bool], int16) {
  %885 = @func_4200() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %886 = cast(meta[relay.Constant][67] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
  %887 = cast(meta[relay.Constant][67] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
  %888 = cast(%var_7556, dtype="int16") /* ty=int16 */;
  %889 = reshape(%886, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
  %890 = reshape(%887, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
  %891 = reshape(%888, newshape=[]) /* ty=int16 */;
  %892 = @func_5485(%889, %890, %891) /* ty=(Tensor[(4, 15, 16), bool], Tensor[(4, 7, 16), bool], Tensor[(16, 10), int8], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
  %893 = %885.0;
  %894 = %892.0;
  (%893, %894, meta[relay.Constant][67] /* ty=Tensor[(960), bool] */, %var_7556)
}

def @func_8305(%var_8287: Tensor[(6, 5, 7), float64]) -> Tensor[(6, 5, 7), float64] {
  %895 = cast(%var_8287, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  %896 = atan(%895) /* ty=Tensor[(6, 5, 7), float64] */;
  %897 = cast(%896, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  %898 = shape_of(%var_8287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %899 = cast(%var_8287, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%899, %900) /* ty=Tensor[(6, 5, 7), float64] */
}

def @func_5188(%var_5122: int16, %var_5166: Tensor[(484, 2), int32]) -> (Tensor[(?, 15, 11), int16], int16, int16, Tensor[(8, 11, 11), bool], Tensor[(16, 13, 6), float64], Tensor[(1248), int16]) {
  %901 = @func_4416() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) */;
  %902 = cast(%var_5122, dtype="int16") /* ty=int16 */;
  %903 = reshape(%902, newshape=[]) /* ty=int16 */;
  %904 = @func_1189(%903) /* ty=(Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(13, 5, 15), float32]) */;
  %905 = cast(%var_5166, dtype="int32") /* ty=Tensor[(484, 2), int32] */;
  %906 = reshape(%905, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), int32] */;
  %907 = @func_1271(%906) /* ty=(Tensor[(8, 11, 11), int32],) */;
  %908 = %907.0;
  %909 = cast(%var_5166, dtype="bool") /* ty=Tensor[(484, 2), bool] */;
  %910 = shape_of(%908, dtype="int32") /* ty=Tensor[(3), int32] */;
  %911 = cast(%908, dtype="bool") /* ty=Tensor[(8, 11, 11), bool] */;
  %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %913 = cast(%var_5122, dtype="int16") /* ty=int16 */;
  %914 = cast(meta[relay.Constant][68] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
  %915 = reshape(%913, newshape=[]) /* ty=int16 */;
  %916 = reshape(%914, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
  %917 = @func_32(%915, %916) /* ty=(Tensor[(16, 13, 6), float64],) */;
  %918 = %901.3;
  %919 = %904.1;
  %920 = logical_and(%911, %912) /* ty=Tensor[(8, 11, 11), bool] */;
  %921 = %917.0;
  (%918, %919, %var_5122, %920, %921, meta[relay.Constant][68] /* ty=Tensor[(1248), int16] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5115() -> Tensor[(4, 7, 16), float32] {
  %1 = fn () -> Tensor[(4, 7, 16), float32] {
    %0 = @func_4488() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
    %0.0
  };
  %1() /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_4489() -> (Tensor[(4, 7, 16), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) {
  %10 = fn () -> (Tensor[(4, 7, 16), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) {
    %2 = @func_3974() /* ty=(Tensor[(4, 7, 16), float32],) */;
    %3 = cast(meta[relay.Constant][0] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
    %5 = reshape(%3, newshape=[]) /* ty=int16 */;
    %6 = reshape(%4, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
    %7 = @func_32(%5, %6) /* ty=(Tensor[(16, 13, 6), float64],) */;
    %8 = %2.0;
    %9 = %7.0;
    (%8, %9, meta[relay.Constant][0] /* ty=int16 */, meta[relay.Constant][1] /* ty=Tensor[(1248), int16] */)
  };
  %10() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */
}

def @func_1378(%var_1376: Tensor[(9, 14, 6), int64], %var_1377: Tensor[(9, 14, 6), int64]) -> (Tensor[(9, 14, 6), bool], Tensor[(9, 14, 6), uint8]) {
  @func_1374(%var_1376, %var_1377) /* ty=(Tensor[(9, 14, 6), bool], Tensor[(9, 14, 6), uint8]) */
}

def @func_4092() -> (Tensor[(4, 7, 16), uint64], Tensor[(288), int8], Tensor[(4, 7, 16), uint16], Tensor[(7, 10, 10), float32], Tensor[(700), float32]) {
  %11 = cast(meta[relay.Constant][2] /* ty=Tensor[(288), int8] */, dtype="int8") /* ty=Tensor[(288), int8] */;
  %12 = reshape(%11, newshape=[8, 4, 9]) /* ty=Tensor[(8, 4, 9), int8] */;
  %13 = @func_3739(%12) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(8, 4, 9), bool]) */;
  %14 = @func_3849() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %15 = %14.0;
  %16 = cast(%15, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  %17 = cos(%16) /* ty=Tensor[(4, 7, 16), float32] */;
  %18 = cast(%15, dtype="int8") /* ty=Tensor[(4, 7, 16), int8] */;
  %19 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%17, dtype="int8") /* ty=Tensor[(4, 7, 16), int8] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %22 = multiply(%20, %21) /* ty=Tensor[(4, 7, 16), int8] */;
  %23 = cast(%17, dtype="uint16") /* ty=Tensor[(4, 7, 16), uint16] */;
  %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%22, dtype="uint16") /* ty=Tensor[(4, 7, 16), uint16] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %27 = cast(meta[relay.Constant][3] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %28 = cast(meta[relay.Constant][3] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %29 = reshape(%27, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float32] */;
  %30 = reshape(%28, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float32] */;
  %31 = @func_507(%29, %30) /* ty=(Tensor[(7, 10, 10), bool], Tensor[(7, 10, 10), float64], Tensor[(7, 10, 10), int32], Tensor[(7, 10, 10), float32]) */;
  %32 = %13.0;
  %33 = bitwise_and(%25, %26) /* ty=Tensor[(4, 7, 16), uint16] */;
  %34 = %31.3;
  (%32, meta[relay.Constant][2] /* ty=Tensor[(288), int8] */, %33, %34, meta[relay.Constant][3] /* ty=Tensor[(700), float32] */)
}

def @func_4217() -> (Tensor[(4, 7, 16), uint64],) {
  %37 = fn () -> (Tensor[(4, 7, 16), uint64],) {
    %35 = @func_3378() /* ty=(Tensor[(4, 7, 16), uint64],) */;
    %36 = %35.0;
    (%36,)
  };
  %37() /* ty=(Tensor[(4, 7, 16), uint64],) */
}

def @func_4094() -> (Tensor[(4, 7, 16), uint64], Tensor[(288), int8], Tensor[(4, 7, 16), uint16], Tensor[(7, 10, 10), float32], Tensor[(700), float32]) {
  @func_4092() /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(288), int8], Tensor[(4, 7, 16), uint16], Tensor[(7, 10, 10), float32], Tensor[(700), float32]) */
}

def @func_6489(%var_6428: Tensor[(4, 7, 16), float32]) -> (Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), bool], Tensor[(1, 15, 11), float32], Tensor[(165), float32]) {
  %38 = @func_3849() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %39 = @func_4216() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %40 = cast(%var_6428, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  %41 = acos(%40) /* ty=Tensor[(4, 7, 16), float32] */;
  %42 = @func_5114() /* ty=Tensor[(4, 7, 16), float32] */;
  %43 = cast(%var_6428, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%42, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %47 = greater(%45, %46) /* ty=Tensor[(4, 7, 16), bool] */;
  %48 = cast(%47, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %49 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%41, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %52 = cast(meta[relay.Constant][4] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %53 = reshape(%52, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), float32] */;
  %54 = %38.0;
  %55 = %39.0;
  %56 = greater_equal(%50, %51) /* ty=Tensor[(4, 7, 16), bool] */;
  %57 = @func_4025(%53) /* ty=Tensor[(1, 15, 11), float32] */;
  (%54, %55, %56, %57, meta[relay.Constant][4] /* ty=Tensor[(165), float32] */)
}

def @func_7362() -> (Tensor[(4, 7, 16), float32],) {
  %58 = @func_5645() /* ty=Tensor[(4, 7, 16), float32] */;
  (%58,)
}

def @func_3020(%var_3019: Tensor[(3, 5, 3), float32]) -> (Tensor[(3, 5, 3), bool],) {
  %71 = fn (%var_2998: Tensor[(3, 5, 3), float32]) -> (Tensor[(3, 5, 3), bool],) {
    %59 = cast(%var_2998, dtype="float32") /* ty=Tensor[(3, 5, 3), float32] */;
    %60 = sin(%59) /* ty=Tensor[(3, 5, 3), float32] */;
    %61 = cast(%var_2998, dtype="float64") /* ty=Tensor[(3, 5, 3), float64] */;
    %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
    %63 = cast(%60, dtype="float64") /* ty=Tensor[(3, 5, 3), float64] */;
    %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %65 = floor_divide(%63, %64) /* ty=Tensor[(3, 5, 3), float64] */;
    %66 = cast(%var_2998, dtype="bool") /* ty=Tensor[(3, 5, 3), bool] */;
    %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
    %68 = cast(%65, dtype="bool") /* ty=Tensor[(3, 5, 3), bool] */;
    %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %70 = less_equal(%68, %69) /* ty=Tensor[(3, 5, 3), bool] */;
    (%70,)
  };
  %71(%var_3019) /* ty=(Tensor[(3, 5, 3), bool],) */
}

def @func_6263() -> (Tensor[(4, 7, 16), int32], Tensor[(4, 7, 16), float32]) {
  %72 = @func_5761() /* ty=Tensor[(4, 7, 16), float32] */;
  %73 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 7, 16), float32] */, dtype="int32") /* ty=Tensor[(4, 7, 16), int32] */;
  %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%72, dtype="int32") /* ty=Tensor[(4, 7, 16), int32] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %77 = cast(%72, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  %78 = left_shift(%75, %76) /* ty=Tensor[(4, 7, 16), int32] */;
  %79 = exp(%77) /* ty=Tensor[(4, 7, 16), float32] */;
  (%78, %79)
}

def @func_5777() -> Tensor[(4, 7, 16), uint64] {
  @func_5775() /* ty=Tensor[(4, 7, 16), uint64] */
}

def @func_6492(%var_6490: Tensor[(4, 7, 16), float32]) -> (Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), bool], Tensor[(1, 15, 11), float32], Tensor[(165), float32]) {
  @func_6489(%var_6490) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), bool], Tensor[(1, 15, 11), float32], Tensor[(165), float32]) */
}

def @func_7527() -> Tensor[(4, 7, 16), float32] {
  @func_7525() /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_3849() -> (Tensor[(4, 7, 16), uint64],) {
  %80 = @func_3378() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %81 = %80.0;
  (%81,)
}

def @func_3663(%var_3661: Tensor[(10, 15, 14), float64], %var_3662: int16) -> (Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(10, 15, 14), float64]) {
  @func_3659(%var_3661, %var_3662) /* ty=(Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(10, 15, 14), float64]) */
}

def @func_8255() -> Tensor[(4, 7, 16), float32] {
  %82 = @func_6904() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32]) */;
  %82.1
}

def @func_3468(%var_3466: Tensor[(198), int8], %var_3467: Tensor[(45), float32]) -> (Tensor[(16, 5, 4), float64], Tensor[(2, 9, 11), float64], Tensor[(198), int8], Tensor[(3, 5, 3), bool], Tensor[(45), float32], Tensor[(11, 9, 10), uint32], Tensor[(330, 3), uint32]) {
  %98 = fn (%var_3443: Tensor[(198), int8], %var_3449: Tensor[(45), float32]) -> (Tensor[(16, 5, 4), float64], Tensor[(2, 9, 11), float64], Tensor[(198), int8], Tensor[(3, 5, 3), bool], Tensor[(45), float32], Tensor[(11, 9, 10), uint32], Tensor[(330, 3), uint32]) {
    %83 = cast(2.07545f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %84 = cast(meta[relay.Constant][6] /* ty=Tensor[(16, 5, 4), float64] */, dtype="float64") /* ty=Tensor[(16, 5, 4), float64] */;
    %85 = cast(%var_3443, dtype="int8") /* ty=Tensor[(198), int8] */;
    %86 = reshape(%85, newshape=[2, 9, 11]) /* ty=Tensor[(2, 9, 11), int8] */;
    %87 = @func_719(%86) /* ty=(Tensor[(2, 9, 11), bool], Tensor[(2, 9, 11), float64]) */;
    %88 = cast(%var_3449, dtype="float32") /* ty=Tensor[(45), float32] */;
    %89 = reshape(%88, newshape=[3, 5, 3]) /* ty=Tensor[(3, 5, 3), float32] */;
    %90 = @func_3018(%89) /* ty=(Tensor[(3, 5, 3), bool],) */;
    %91 = cast(meta[relay.Constant][7] /* ty=Tensor[(330, 3), uint32] */, dtype="uint32") /* ty=Tensor[(330, 3), uint32] */;
    %92 = reshape(%91, newshape=[11, 9, 10]) /* ty=Tensor[(11, 9, 10), uint32] */;
    %93 = @func_1706(%92) /* ty=(Tensor[(11, 9, 10), uint32],) */;
    %94 = floor_divide(%83, %84) /* ty=Tensor[(16, 5, 4), float64] */;
    %95 = %87.1;
    %96 = %90.0;
    %97 = %93.0;
    (%94, %95, %var_3443, %96, %var_3449, %97, meta[relay.Constant][7] /* ty=Tensor[(330, 3), uint32] */)
  };
  %98(%var_3466, %var_3467) /* ty=(Tensor[(16, 5, 4), float64], Tensor[(2, 9, 11), float64], Tensor[(198), int8], Tensor[(3, 5, 3), bool], Tensor[(45), float32], Tensor[(11, 9, 10), uint32], Tensor[(330, 3), uint32]) */
}

def @func_6661(%var_6659: Tensor[(4, 7, 16), uint16]) -> Tensor[(4, 7, 16), float32] {
  @func_6658(%var_6659) /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_3535(%var_3504: Tensor[(12, 14, 4), float32], %var_3516: int16, %var_3517: Tensor[(1248, 1), int16]) -> (Tensor[(12, 14, 4), bool], Tensor[(16, 13, 6), float64], int16, Tensor[(1248, 1), int16], Tensor[(16, 13, 6), float64]) {
  %99 = cast(%var_3504, dtype="bool") /* ty=Tensor[(12, 14, 4), bool] */;
  %100 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(12, 14, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 14, 4), float32] */, dtype="bool") /* ty=Tensor[(12, 14, 4), bool] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %103 = cast(%var_3516, dtype="int16") /* ty=int16 */;
  %104 = cast(%var_3517, dtype="int16") /* ty=Tensor[(1248, 1), int16] */;
  %105 = reshape(%103, newshape=[]) /* ty=int16 */;
  %106 = reshape(%104, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
  %107 = @func_32(%105, %106) /* ty=(Tensor[(16, 13, 6), float64],) */;
  %108 = cast(%var_3516, dtype="int16") /* ty=int16 */;
  %109 = %107.0;
  %110 = cast(%109, dtype="int16") /* ty=Tensor[(16, 13, 6), int16] */;
  %111 = reshape(%108, newshape=[]) /* ty=int16 */;
  %112 = reshape(%110, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
  %113 = @func_32(%111, %112) /* ty=(Tensor[(16, 13, 6), float64],) */;
  %114 = equal(%101, %102) /* ty=Tensor[(12, 14, 4), bool] */;
  %115 = %113.0;
  (%114, %109, %var_3516, %var_3517, %115)
}

def @func_3248(%var_3246: Tensor[(968), int32]) -> (Tensor[(16, 3, 10), float64], Tensor[(8, 11, 11), int32], Tensor[(968), float32]) {
  @func_3245(%var_3246) /* ty=(Tensor[(16, 3, 10), float64], Tensor[(8, 11, 11), int32], Tensor[(968), float32]) */
}

def @func_4931(%var_4930: Tensor[(6, 3, 7), int16]) -> (Tensor[(6, 3, 7), bool], Tensor[(4, 7, 16), uint64], Tensor[(?, 15, 11), int16], Tensor[(4, 7, 16), uint16], Tensor[(6, 3, 7), float64]) {
  %129 = fn (%var_4880: Tensor[(6, 3, 7), int16]) -> (Tensor[(6, 3, 7), bool], Tensor[(4, 7, 16), uint64], Tensor[(?, 15, 11), int16], Tensor[(4, 7, 16), uint16], Tensor[(6, 3, 7), float64]) {
    %116 = @func_4416() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) */;
    %117 = %116.1;
    %118 = cast(%117, dtype="bool") /* ty=bool */;
    %119 = cast(%var_4880, dtype="bool") /* ty=Tensor[(6, 3, 7), bool] */;
    %120 = @func_4216() /* ty=(Tensor[(4, 7, 16), uint64],) */;
    %121 = @func_4592() /* ty=(Tensor[(?, 15, 11), int16],) */;
    %122 = @func_4092() /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(288), int8], Tensor[(4, 7, 16), uint16], Tensor[(7, 10, 10), float32], Tensor[(700), float32]) */;
    %123 = cast(%var_4880, dtype="float64") /* ty=Tensor[(6, 3, 7), float64] */;
    %124 = logical_or(%118, %119) /* ty=Tensor[(6, 3, 7), bool] */;
    %125 = %120.0;
    %126 = %121.0;
    %127 = %122.2;
    %128 = cosh(%123) /* ty=Tensor[(6, 3, 7), float64] */;
    (%124, %125, %126, %127, %128)
  };
  %129(%var_4930) /* ty=(Tensor[(6, 3, 7), bool], Tensor[(4, 7, 16), uint64], Tensor[(?, 15, 11), int16], Tensor[(4, 7, 16), uint16], Tensor[(6, 3, 7), float64]) */
}

def @func_32(%var_8: int16, %var_9: Tensor[(16, 13, 6), int16]) -> (Tensor[(16, 13, 6), float64],) {
  %130 = cast(%var_8, dtype="bool") /* ty=bool */;
  %131 = cast(%var_9, dtype="bool") /* ty=Tensor[(16, 13, 6), bool] */;
  %132 = greater_equal(%130, %131) /* ty=Tensor[(16, 13, 6), bool] */;
  %133 = cast(%132, dtype="float64") /* ty=Tensor[(16, 13, 6), float64] */;
  %134 = shape_of(%var_9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%var_9, dtype="float64") /* ty=Tensor[(16, 13, 6), float64] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %137 = mod(%135, %136) /* ty=Tensor[(16, 13, 6), float64] */;
  (%137,)
}

def @func_2211(%var_2166: Tensor[(10, 5, 11), int16], %var_2167: Tensor[(10, 5, 11), int16], %var_2174: Tensor[(10, 5, 11), int16]) -> (Tensor[(10, 5, 11), int16], Tensor[(11, 9, 10), uint32], Tensor[(990), uint32], Tensor[(10, 5, 11), float32]) {
  %138 = cast(%var_2167, dtype="int16") /* ty=Tensor[(10, 5, 11), int16] */;
  %139 = shape_of(%var_2166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%var_2166, dtype="int16") /* ty=Tensor[(10, 5, 11), int16] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %142 = cast(meta[relay.Constant][9] /* ty=Tensor[(990), uint32] */, dtype="uint32") /* ty=Tensor[(990), uint32] */;
  %143 = reshape(%142, newshape=[11, 9, 10]) /* ty=Tensor[(11, 9, 10), uint32] */;
  %144 = @func_1706(%143) /* ty=(Tensor[(11, 9, 10), uint32],) */;
  %145 = cast(%var_2174, dtype="float32") /* ty=Tensor[(10, 5, 11), float32] */;
  %146 = shape_of(%var_2166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%var_2166, dtype="float32") /* ty=Tensor[(10, 5, 11), float32] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %149 = left_shift(%140, %141) /* ty=Tensor[(10, 5, 11), int16] */;
  %150 = %144.0;
  %151 = divide(%147, %148) /* ty=Tensor[(10, 5, 11), float32] */;
  (%149, %150, meta[relay.Constant][9] /* ty=Tensor[(990), uint32] */, %151)
}

def @func_3245(%var_3234: Tensor[(968), int32]) -> (Tensor[(16, 3, 10), float64], Tensor[(8, 11, 11), int32], Tensor[(968), float32]) {
  %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(16, 3, 10), float64] */, dtype="float64") /* ty=Tensor[(16, 3, 10), float64] */;
  %153 = cast(%var_3234, dtype="int32") /* ty=Tensor[(968), int32] */;
  %154 = reshape(%153, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), int32] */;
  %155 = @func_1271(%154) /* ty=(Tensor[(8, 11, 11), int32],) */;
  %156 = cast(%var_3234, dtype="float32") /* ty=Tensor[(968), float32] */;
  %157 = log2(%152) /* ty=Tensor[(16, 3, 10), float64] */;
  %158 = %155.0;
  %159 = cosh(%156) /* ty=Tensor[(968), float32] */;
  (%157, %158, %159)
}

def @func_6189(%var_6188: Tensor[(14, 15, 4), float64]) -> Tensor[(14, 15, 4), float64] {
  %161 = fn (%var_6173: Tensor[(14, 15, 4), float64]) -> Tensor[(14, 15, 4), float64] {
    %160 = cast(%var_6173, dtype="float64") /* ty=Tensor[(14, 15, 4), float64] */;
    sigmoid(%160) /* ty=Tensor[(14, 15, 4), float64] */
  };
  %161(%var_6188) /* ty=Tensor[(14, 15, 4), float64] */
}

def @func_1274(%var_1272: Tensor[(8, 11, 11), int32]) -> (Tensor[(8, 11, 11), int32],) {
  @func_1271(%var_1272) /* ty=(Tensor[(8, 11, 11), int32],) */
}

def @func_511(%var_509: Tensor[(7, 10, 10), float32], %var_510: Tensor[(7, 10, 10), float32]) -> (Tensor[(7, 10, 10), bool], Tensor[(7, 10, 10), float64], Tensor[(7, 10, 10), int32], Tensor[(7, 10, 10), float32]) {
  @func_507(%var_509, %var_510) /* ty=(Tensor[(7, 10, 10), bool], Tensor[(7, 10, 10), float64], Tensor[(7, 10, 10), int32], Tensor[(7, 10, 10), float32]) */
}

def @func_6601() -> (int16, Tensor[(4, 7, 16), float32]) {
  %162 = @func_6048() /* ty=(int16, Tensor[(13, 5, 15), float32]) */;
  %163 = @func_5393() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) */;
  %164 = %162.0;
  %165 = %163.0;
  (%164, %165)
}

def @func_1706(%var_1696: Tensor[(11, 9, 10), uint32]) -> (Tensor[(11, 9, 10), uint32],) {
  %166 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 9, 10), uint32] */, dtype="uint32") /* ty=Tensor[(11, 9, 10), uint32] */;
  %167 = shape_of(%var_1696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%var_1696, dtype="uint32") /* ty=Tensor[(11, 9, 10), uint32] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %170 = maximum(%168, %169) /* ty=Tensor[(11, 9, 10), uint32] */;
  (%170,)
}

def @func_5105() -> (Tensor[(4, 7, 16), uint64], Tensor[(8, 11, 11), int32], Tensor[(968), int32]) {
  @func_5103() /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(8, 11, 11), int32], Tensor[(968), int32]) */
}

def @func_3558(%var_3548: Tensor[(6, 3, 9), uint64], %var_3549: Tensor[(6, 3, 9), uint64]) -> (Tensor[(6, 3, 9), uint64],) {
  %171 = cast(%var_3549, dtype="uint64") /* ty=Tensor[(6, 3, 9), uint64] */;
  %172 = shape_of(%var_3548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%var_3548, dtype="uint64") /* ty=Tensor[(6, 3, 9), uint64] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %175 = bitwise_xor(%173, %174) /* ty=Tensor[(6, 3, 9), uint64] */;
  (%175,)
}

def @func_7320() -> (Tensor[(4, 7, 16), float32], int16, Tensor[(960), bool], int16) {
  @func_7318() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(960), bool], int16) */
}

def @func_8649(%var_8648: Tensor[(4, 7, 16), uint64]) -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), bool]) {
  %185 = fn (%var_8640: Tensor[(4, 7, 16), uint64]) -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), bool]) {
    %176 = @func_7004() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), bool]) */;
    %177 = @func_6340() /* ty=(Tensor[(4, 7, 16), uint64],) */;
    %178 = %177.0;
    %179 = cast(%var_8640, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
    %180 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
    %181 = cast(%178, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
    %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %183 = %176.0;
    %184 = not_equal(%181, %182) /* ty=Tensor[(4, 7, 16), bool] */;
    (%183, %184)
  };
  %185(%var_8648) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), bool]) */
}

def @func_8858(%var_8837: Tensor[(504, 2), float32], %var_8838: Tensor[(1, 198), int8], %var_8849: Tensor[(504, 2), float32]) -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint64], Tensor[(1, 198), int8], Tensor[(504, 2), float64]) {
  %186 = cast(%var_8837, dtype="float32") /* ty=Tensor[(504, 2), float32] */;
  %187 = cast(%var_8838, dtype="int8") /* ty=Tensor[(1, 198), int8] */;
  %188 = reshape(%186, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
  %189 = reshape(%187, newshape=[198]) /* ty=Tensor[(198), int8] */;
  %190 = @func_7762(%188, %189) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(14, 9, 8), int16], Tensor[(1008), float32], Tensor[(126), int16], Tensor[(2, 9, 11), bool], Tensor[(7, 10, 10), bool], Tensor[(700), float32], Tensor[(198), uint8]) */;
  %191 = cast(%var_8849, dtype="float64") /* ty=Tensor[(504, 2), float64] */;
  %192 = shape_of(%var_8837, dtype="int32") /* ty=Tensor[(2), int32] */;
  %193 = cast(%var_8837, dtype="float64") /* ty=Tensor[(504, 2), float64] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %195 = @func_6948() /* ty=Tensor[(4, 7, 16), float32] */;
  %196 = %190.0;
  %197 = mod(%193, %194) /* ty=Tensor[(504, 2), float64] */;
  (%195, %196, %var_8838, %197)
}

def @func_8742(%var_8741: int16) -> (Tensor[(4, 7, 16), uint64], Tensor[(165), float32], int16, Tensor[(1, 960), float32]) {
  %208 = fn (%var_8716: int16) -> (Tensor[(4, 7, 16), uint64], Tensor[(165), float32], int16, Tensor[(1, 960), float32]) {
    %198 = @func_7424() /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(165), float32], Tensor[(4, 7, 16), bool]) */;
    %199 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 960), bool] */, dtype="bool") /* ty=Tensor[(1, 960), bool] */;
    %200 = cast(%var_8716, dtype="int16") /* ty=int16 */;
    %201 = reshape(%199, newshape=[960]) /* ty=Tensor[(960), bool] */;
    %202 = reshape(%200, newshape=[]) /* ty=int16 */;
    %203 = @func_8518(%201, %202) /* ty=(Tensor[(165), float32], Tensor[(16, 10), int8], Tensor[(960), bool], int16, Tensor[(4, 7, 16), uint16]) */;
    %204 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 960), bool] */, dtype="float32") /* ty=Tensor[(1, 960), float32] */;
    %205 = %198.0;
    %206 = %203.0;
    %207 = sigmoid(%204) /* ty=Tensor[(1, 960), float32] */;
    (%205, %206, %var_8716, %207)
  };
  %208(%var_8741) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(165), float32], int16, Tensor[(1, 960), float32]) */
}

def @func_7687() -> (Tensor[(4, 7, 16), float64], Tensor[(4, 7, 16), int32], Tensor[(4, 7, 16), uint64]) {
  %219 = fn () -> (Tensor[(4, 7, 16), float64], Tensor[(4, 7, 16), int32], Tensor[(4, 7, 16), uint64]) {
    %209 = @func_6340() /* ty=(Tensor[(4, 7, 16), uint64],) */;
    %210 = %209.0;
    %211 = cast(%210, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
    %212 = sin(%211) /* ty=Tensor[(4, 7, 16), float32] */;
    %213 = cast(%212, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
    %214 = @func_6263() /* ty=(Tensor[(4, 7, 16), int32], Tensor[(4, 7, 16), float32]) */;
    %215 = @func_6340() /* ty=(Tensor[(4, 7, 16), uint64],) */;
    %216 = cosh(%213) /* ty=Tensor[(4, 7, 16), float64] */;
    %217 = %214.0;
    %218 = %215.0;
    (%216, %217, %218)
  };
  %219() /* ty=(Tensor[(4, 7, 16), float64], Tensor[(4, 7, 16), int32], Tensor[(4, 7, 16), uint64]) */
}

def @func_7765(%var_7763: Tensor[(1008), float32], %var_7764: Tensor[(198), int8]) -> (Tensor[(4, 7, 16), uint64], Tensor[(14, 9, 8), int16], Tensor[(1008), float32], Tensor[(126), int16], Tensor[(2, 9, 11), bool], Tensor[(7, 10, 10), bool], Tensor[(700), float32], Tensor[(198), uint8]) {
  %245 = fn (%var_7725: Tensor[(1008), float32], %var_7737: Tensor[(198), int8]) -> (Tensor[(4, 7, 16), uint64], Tensor[(14, 9, 8), int16], Tensor[(1008), float32], Tensor[(126), int16], Tensor[(2, 9, 11), bool], Tensor[(7, 10, 10), bool], Tensor[(700), float32], Tensor[(198), uint8]) {
    %220 = @func_7479() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32], Tensor[(162), float32], Tensor[(4, 7, 16), uint64]) */;
    %221 = cast(%var_7725, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %222 = cast(meta[relay.Constant][13] /* ty=Tensor[(126), int16] */, dtype="int16") /* ty=Tensor[(126), int16] */;
    %223 = reshape(%221, newshape=[14, 9, 8]) /* ty=Tensor[(14, 9, 8), float32] */;
    %224 = reshape(%222, newshape=[126]) /* ty=Tensor[(126), int16] */;
    %225 = @func_5620(%223, %224) /* ty=(Tensor[(14, 9, 8), int16], Tensor[(?, 3, 13), bool], Tensor[(6, 3, 7), float64], Tensor[(126), int16]) */;
    %226 = cast(%var_7737, dtype="int8") /* ty=Tensor[(198), int8] */;
    %227 = reshape(%226, newshape=[2, 9, 11]) /* ty=Tensor[(2, 9, 11), int8] */;
    %228 = @func_719(%227) /* ty=(Tensor[(2, 9, 11), bool], Tensor[(2, 9, 11), float64]) */;
    %229 = cast(meta[relay.Constant][14] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
    %230 = cast(meta[relay.Constant][14] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
    %231 = reshape(%229, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float32] */;
    %232 = reshape(%230, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float32] */;
    %233 = @func_507(%231, %232) /* ty=(Tensor[(7, 10, 10), bool], Tensor[(7, 10, 10), float64], Tensor[(7, 10, 10), int32], Tensor[(7, 10, 10), float32]) */;
    %234 = cast(%var_7737, dtype="float64") /* ty=Tensor[(198), float64] */;
    %235 = atanh(%234) /* ty=Tensor[(198), float64] */;
    %236 = cast(%var_7737, dtype="uint8") /* ty=Tensor[(198), uint8] */;
    %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(1), int32] */;
    %238 = cast(%235, dtype="uint8") /* ty=Tensor[(198), uint8] */;
    %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %240 = %220.3;
    %241 = %225.0;
    %242 = %228.0;
    %243 = %233.0;
    %244 = right_shift(%238, %239) /* ty=Tensor[(198), uint8] */;
    (%240, %241, %var_7725, meta[relay.Constant][13] /* ty=Tensor[(126), int16] */, %242, %243, meta[relay.Constant][14] /* ty=Tensor[(700), float32] */, %244)
  };
  %245(%var_7763, %var_7764) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(14, 9, 8), int16], Tensor[(1008), float32], Tensor[(126), int16], Tensor[(2, 9, 11), bool], Tensor[(7, 10, 10), bool], Tensor[(700), float32], Tensor[(198), uint8]) */
}

def @func_7250(%var_7249: int16) -> (Tensor[(4, 7, 16), uint64], Tensor[(120, 8), bool], int16, Tensor[(960), bool], Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float64]) {
  %259 = fn (%var_7208: int16) -> (Tensor[(4, 7, 16), uint64], Tensor[(120, 8), bool], int16, Tensor[(960), bool], Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float64]) {
    %246 = @func_5103() /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(8, 11, 11), int32], Tensor[(968), int32]) */;
    %247 = cast(%var_7208, dtype="int16") /* ty=int16 */;
    %248 = cast(meta[relay.Constant][15] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
    %249 = reshape(%247, newshape=[]) /* ty=int16 */;
    %250 = reshape(%248, newshape=[120, 8]) /* ty=Tensor[(120, 8), bool] */;
    %251 = @func_6802(%249, %250) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(16, 13, 6), float64], int16, Tensor[(4, 7, 16), float32], Tensor[(120, 8), bool]) */;
    %252 = @func_5282() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint64]) */;
    %253 = @func_5775() /* ty=Tensor[(4, 7, 16), uint64] */;
    %254 = cast(%253, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
    %255 = %246.0;
    %256 = %251.4;
    %257 = %252.0;
    %258 = log2(%254) /* ty=Tensor[(4, 7, 16), float64] */;
    (%255, %256, %var_7208, meta[relay.Constant][15] /* ty=Tensor[(960), bool] */, %257, %258)
  };
  %259(%var_7249) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(120, 8), bool], int16, Tensor[(960), bool], Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float64]) */
}

def @func_8242(%var_8235: Tensor[(968), int32]) -> (Tensor[(4, 7, 16), float32], Tensor[(8, 11, 11), int32], Tensor[(968), int32]) {
  %260 = @func_6936() /* ty=(Tensor[(4, 7, 16), uint16], Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), float32]) */;
  %261 = cast(%var_8235, dtype="int32") /* ty=Tensor[(968), int32] */;
  %262 = reshape(%261, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), int32] */;
  %263 = @func_1271(%262) /* ty=(Tensor[(8, 11, 11), int32],) */;
  %264 = %260.2;
  %265 = %263.0;
  (%264, %265, %var_8235)
}

def @func_9120() -> (Tensor[(4, 7, 16), float32],) {
  @func_9118() /* ty=(Tensor[(4, 7, 16), float32],) */
}

def @func_7426() -> (Tensor[(4, 7, 16), uint64], Tensor[(165), float32], Tensor[(4, 7, 16), bool]) {
  @func_7424() /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(165), float32], Tensor[(4, 7, 16), bool]) */
}

def @func_8204(%var_8148: Tensor[(4, 7, 16), float32], %var_8197: Tensor[(1760), float64]) -> (Tensor[(4, 7, 16), int16], Tensor[(4, 7, 16), float32], Tensor[(1248), int16], int16, Tensor[(968), int32], Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), int32], Tensor[(11, 10, 16), float64], Tensor[(1760), float64]) {
  %266 = @func_7362() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %267 = %266.0;
  %268 = cast(%var_8148, dtype="int16") /* ty=Tensor[(4, 7, 16), int16] */;
  %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%267, dtype="int16") /* ty=Tensor[(4, 7, 16), int16] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %272 = @func_5393() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) */;
  %273 = cast(meta[relay.Constant][16] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %274 = cast(meta[relay.Constant][17] /* ty=Tensor[(968), int32] */, dtype="int32") /* ty=Tensor[(968), int32] */;
  %275 = reshape(%273, newshape=[]) /* ty=int16 */;
  %276 = reshape(%274, newshape=[484, 2]) /* ty=Tensor[(484, 2), int32] */;
  %277 = @func_5188(%275, %276) /* ty=(Tensor[(?, 15, 11), int16], int16, int16, Tensor[(8, 11, 11), bool], Tensor[(16, 13, 6), float64], Tensor[(1248), int16]) */;
  %278 = @func_7004() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), bool]) */;
  %279 = @func_3974() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %280 = @func_7686() /* ty=(Tensor[(4, 7, 16), float64], Tensor[(4, 7, 16), int32], Tensor[(4, 7, 16), uint64]) */;
  %281 = cast(%var_8197, dtype="float64") /* ty=Tensor[(1760), float64] */;
  %282 = reshape(%281, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
  %283 = @func_6243(%282) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(4, 7, 16), uint64], Tensor[(11, 10, 16), float32], Tensor[(126), int16], Tensor[(1008), float32], Tensor[(126), int16]) */;
  %284 = bitwise_or(%270, %271) /* ty=Tensor[(4, 7, 16), int16] */;
  %285 = %272.0;
  %286 = %277.5;
  %287 = %278.0;
  %288 = %279.0;
  %289 = %280.1;
  %290 = %283.0;
  (%284, %285, %286, meta[relay.Constant][16] /* ty=int16 */, meta[relay.Constant][17] /* ty=Tensor[(968), int32] */, %287, %288, %289, %290, %var_8197)
}

def @func_8895() -> Tensor[(13, 5, 15), float32] {
  %292 = fn () -> Tensor[(13, 5, 15), float32] {
    %291 = @func_6048() /* ty=(int16, Tensor[(13, 5, 15), float32]) */;
    %291.1
  };
  %292() /* ty=Tensor[(13, 5, 15), float32] */
}

def @func_675(%var_674: Tensor[(10, 1, 13), float32]) -> (Tensor[(10, 16, 13), int32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(10, 16, 13), float32], Tensor[(8, 156), int16], Tensor[(4, 12), float32], Tensor[(8, 156), int16]) {
  %315 = fn (%var_627: Tensor[(10, 1, 13), float32]) -> (Tensor[(10, 16, 13), int32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(10, 16, 13), float32], Tensor[(8, 156), int16], Tensor[(4, 12), float32], Tensor[(8, 156), int16]) {
    %293 = cast(%var_627, dtype="int32") /* ty=Tensor[(10, 1, 13), int32] */;
    %294 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 16, 13), float32] */, dtype="int32") /* ty=Tensor[(10, 16, 13), int32] */;
    %295 = cast(meta[relay.Constant][19] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %296 = cast(meta[relay.Constant][20] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
    %297 = reshape(%295, newshape=[]) /* ty=int16 */;
    %298 = reshape(%296, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
    %299 = @func_32(%297, %298) /* ty=(Tensor[(16, 13, 6), float64],) */;
    %300 = cast(%var_627, dtype="bool") /* ty=Tensor[(10, 1, 13), bool] */;
    %301 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 16, 13), float32] */, dtype="bool") /* ty=Tensor[(10, 16, 13), bool] */;
    %302 = equal(%300, %301) /* ty=Tensor[(10, 16, 13), bool] */;
    %303 = cast(%302, dtype="float32") /* ty=Tensor[(10, 16, 13), float32] */;
    %304 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 12), float32] */, dtype="float32") /* ty=Tensor[(4, 12), float32] */;
    %305 = reshape(%304, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
    %306 = @func_134(%305) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(8, 156), int16]) */;
    %307 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 12), float32] */, dtype="float32") /* ty=Tensor[(4, 12), float32] */;
    %308 = reshape(%307, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
    %309 = @func_134(%308) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(8, 156), int16]) */;
    %310 = logical_xor(%293, %294) /* ty=Tensor[(10, 16, 13), int32] */;
    %311 = %299.0;
    %312 = asin(%303) /* ty=Tensor[(10, 16, 13), float32] */;
    %313 = %306.3;
    %314 = %309.3;
    (%310, %311, meta[relay.Constant][19] /* ty=int16 */, meta[relay.Constant][20] /* ty=Tensor[(1248), int16] */, %312, %313, meta[relay.Constant][21] /* ty=Tensor[(4, 12), float32] */, %314)
  };
  %315(%var_674) /* ty=(Tensor[(10, 16, 13), int32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(10, 16, 13), float32], Tensor[(8, 156), int16], Tensor[(4, 12), float32], Tensor[(8, 156), int16]) */
}

def @func_4959(%var_4958: Tensor[(242, 4), int32]) -> (Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), float32], Tensor[(16, 3, 10), float64], Tensor[(242, 4), int32]) {
  %323 = fn (%var_4955: Tensor[(242, 4), int32]) -> (Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), float32], Tensor[(16, 3, 10), float64], Tensor[(242, 4), int32]) {
    %316 = @func_3378() /* ty=(Tensor[(4, 7, 16), uint64],) */;
    %317 = cast(%var_4955, dtype="int32") /* ty=Tensor[(242, 4), int32] */;
    %318 = reshape(%317, newshape=[968]) /* ty=Tensor[(968), int32] */;
    %319 = @func_3245(%318) /* ty=(Tensor[(16, 3, 10), float64], Tensor[(8, 11, 11), int32], Tensor[(968), float32]) */;
    %320 = %316.0;
    %321 = @func_4699() /* ty=Tensor[(4, 7, 16), float32] */;
    %322 = %319.0;
    (%320, %321, %322, %var_4955)
  };
  %323(%var_4958) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), float32], Tensor[(16, 3, 10), float64], Tensor[(242, 4), int32]) */
}

def @func_5849(%var_5847: Tensor[(126), int16]) -> (Tensor[(968), int32], Tensor[(7, 10, 10), bool], Tensor[(700), float32], Tensor[(4, 7, 16), uint16], Tensor[(126), int16]) {
  %324 = @func_5103() /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(8, 11, 11), int32], Tensor[(968), int32]) */;
  %325 = cast(meta[relay.Constant][22] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %326 = cast(meta[relay.Constant][22] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %327 = reshape(%325, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float32] */;
  %328 = reshape(%326, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float32] */;
  %329 = @func_507(%327, %328) /* ty=(Tensor[(7, 10, 10), bool], Tensor[(7, 10, 10), float64], Tensor[(7, 10, 10), int32], Tensor[(7, 10, 10), float32]) */;
  %330 = cast(%var_5847, dtype="int16") /* ty=Tensor[(126), int16] */;
  %331 = reshape(%330, newshape=[6, 3, 7]) /* ty=Tensor[(6, 3, 7), int16] */;
  %332 = @func_4929(%331) /* ty=(Tensor[(6, 3, 7), bool], Tensor[(4, 7, 16), uint64], Tensor[(?, 15, 11), int16], Tensor[(4, 7, 16), uint16], Tensor[(6, 3, 7), float64]) */;
  %333 = %324.2;
  %334 = %329.0;
  %335 = %332.3;
  (%333, %334, meta[relay.Constant][22] /* ty=Tensor[(700), float32] */, %335, %var_5847)
}

def @func_9093() -> (Tensor[(11, 9, 10), uint32], Tensor[(4, 7, 16), bool], Tensor[(160), int8]) {
  %342 = fn () -> (Tensor[(11, 9, 10), uint32], Tensor[(4, 7, 16), bool], Tensor[(160), int8]) {
    %336 = @func_6865() /* ty=(int16, Tensor[(11, 9, 10), uint32], Tensor[(550), int16]) */;
    %337 = cast(meta[relay.Constant][23] /* ty=Tensor[(160), int8] */, dtype="int8") /* ty=Tensor[(160), int8] */;
    %338 = reshape(%337, newshape=[160]) /* ty=Tensor[(160), int8] */;
    %339 = @func_4320(%338) /* ty=(Tensor[(160), int8], Tensor[(4, 7, 16), bool], Tensor[(2, 5, 16), float32], Tensor[(4, 7, 16), bool]) */;
    %340 = %336.1;
    %341 = %339.1;
    (%340, %341, meta[relay.Constant][23] /* ty=Tensor[(160), int8] */)
  };
  %342() /* ty=(Tensor[(11, 9, 10), uint32], Tensor[(4, 7, 16), bool], Tensor[(160), int8]) */
}

def @func_9055() -> (Tensor[(4, 7, 16), float32],) {
  %344 = fn () -> (Tensor[(4, 7, 16), float32],) {
    %343 = @func_7525() /* ty=Tensor[(4, 7, 16), float32] */;
    (%343,)
  };
  %344() /* ty=(Tensor[(4, 7, 16), float32],) */
}

def @func_6552() -> (Tensor[(165), float32], Tensor[(4, 7, 16), uint64]) {
  @func_6550() /* ty=(Tensor[(165), float32], Tensor[(4, 7, 16), uint64]) */
}

def @func_3974() -> (Tensor[(4, 7, 16), float32],) {
  %345 = @func_3378() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %346 = %345.0;
  %347 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 7, 16), uint64] */, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%346, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %351 = add(%349, %350) /* ty=Tensor[(4, 7, 16), float32] */;
  (%351,)
}

def @func_5624(%var_5622: Tensor[(14, 9, 8), float32], %var_5623: Tensor[(126), int16]) -> (Tensor[(14, 9, 8), int16], Tensor[(?, 3, 13), bool], Tensor[(6, 3, 7), float64], Tensor[(126), int16]) {
  @func_5620(%var_5622, %var_5623) /* ty=(Tensor[(14, 9, 8), int16], Tensor[(?, 3, 13), bool], Tensor[(6, 3, 7), float64], Tensor[(126), int16]) */
}

def @func_6959() -> Tensor[(4, 7, 16), float32] {
  @func_5114() /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_4367() -> Tensor[(4, 7, 16), uint64] {
  @func_4365() /* ty=Tensor[(4, 7, 16), uint64] */
}

def @func_6326() -> (Tensor[(165), float32],) {
  @func_6324() /* ty=(Tensor[(165), float32],) */
}

def @func_3379() -> (Tensor[(4, 7, 16), uint64],) {
  %357 = fn () -> (Tensor[(4, 7, 16), uint64],) {
    %352 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 7, 16), uint64] */, dtype="uint64") /* ty=Tensor[(4, 7, 16), uint64] */;
    %353 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(4, 7, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %354 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 7, 16), uint64] */, dtype="uint64") /* ty=Tensor[(4, 7, 16), uint64] */;
    %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %356 = maximum(%354, %355) /* ty=Tensor[(4, 7, 16), uint64] */;
    (%356,)
  };
  %357() /* ty=(Tensor[(4, 7, 16), uint64],) */
}

def @func_4418() -> (Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) {
  @func_4416() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) */
}

def @func_8316(%var_8309: Tensor[(3, 8, 6), float64]) -> (Tensor[(3, 8, 6), float64],) {
  %358 = cast(%var_8309, dtype="float64") /* ty=Tensor[(3, 8, 6), float64] */;
  %359 = log(%358) /* ty=Tensor[(3, 8, 6), float64] */;
  (%359,)
}

def @func_5620(%var_5575: Tensor[(14, 9, 8), float32], %var_5615: Tensor[(126), int16]) -> (Tensor[(14, 9, 8), int16], Tensor[(?, 3, 13), bool], Tensor[(6, 3, 7), float64], Tensor[(126), int16]) {
  %360 = cast(%var_5575, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
  %361 = sin(%360) /* ty=Tensor[(14, 9, 8), float32] */;
  %362 = cast(%361, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
  %363 = sinh(%362) /* ty=Tensor[(14, 9, 8), float32] */;
  %364 = cast(%363, dtype="int16") /* ty=Tensor[(14, 9, 8), int16] */;
  %365 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%361, dtype="int16") /* ty=Tensor[(14, 9, 8), int16] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %368 = cast(meta[relay.Constant][27] /* ty=Tensor[(39), float64] */, dtype="float64") /* ty=Tensor[(39), float64] */;
  %369 = reshape(%368, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float64] */;
  %370 = @func_3946(%369) /* ty=(Tensor[(?, 3, 13), float64],) */;
  %371 = %370.0;
  %372 = cast(meta[relay.Constant][27] /* ty=Tensor[(39), float64] */, dtype="bool") /* ty=Tensor[(39), bool] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%371, dtype="bool") /* ty=Tensor[(?, 3, 13), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %376 = cast(%var_5615, dtype="int16") /* ty=Tensor[(126), int16] */;
  %377 = reshape(%376, newshape=[6, 3, 7]) /* ty=Tensor[(6, 3, 7), int16] */;
  %378 = @func_4929(%377) /* ty=(Tensor[(6, 3, 7), bool], Tensor[(4, 7, 16), uint64], Tensor[(?, 15, 11), int16], Tensor[(4, 7, 16), uint16], Tensor[(6, 3, 7), float64]) */;
  %379 = bitwise_or(%366, %367) /* ty=Tensor[(14, 9, 8), int16] */;
  %380 = logical_and(%374, %375) /* ty=Tensor[(?, 3, 13), bool] */;
  %381 = %378.4;
  (%379, %380, %381, %var_5615)
}

def @func_6116(%var_6113: Tensor[(960), bool], %var_6114: int16) -> (Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(1, 162), uint64], int16, Tensor[(960), bool], int16) {
  %382 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 162), uint64] */, dtype="uint64") /* ty=Tensor[(1, 162), uint64] */;
  %383 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 162), uint64] */, dtype="uint64") /* ty=Tensor[(1, 162), uint64] */;
  %384 = reshape(%382, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), uint64] */;
  %385 = reshape(%383, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), uint64] */;
  %386 = @func_3558(%384, %385) /* ty=(Tensor[(6, 3, 9), uint64],) */;
  %387 = cast(%var_6113, dtype="bool") /* ty=Tensor[(960), bool] */;
  %388 = cast(%var_6113, dtype="bool") /* ty=Tensor[(960), bool] */;
  %389 = cast(%var_6114, dtype="int16") /* ty=int16 */;
  %390 = reshape(%387, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
  %391 = reshape(%388, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
  %392 = reshape(%389, newshape=[]) /* ty=int16 */;
  %393 = @func_5485(%390, %391, %392) /* ty=(Tensor[(4, 15, 16), bool], Tensor[(4, 7, 16), bool], Tensor[(16, 10), int8], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
  %394 = @func_5510() /* ty=Tensor[(4, 7, 16), float32] */;
  %395 = %386.0;
  %396 = %393.4;
  (%394, %395, meta[relay.Constant][28] /* ty=Tensor[(1, 162), uint64] */, %396, %var_6113, %var_6114)
}

def @func_5489(%var_5486: Tensor[(4, 15, 16), bool], %var_5487: Tensor[(4, 15, 16), bool], %var_5488: int16) -> (Tensor[(4, 15, 16), bool], Tensor[(4, 7, 16), bool], Tensor[(16, 10), int8], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) {
  %412 = fn (%var_5458: Tensor[(4, 15, 16), bool], %var_5459: Tensor[(4, 15, 16), bool], %var_5479: int16) -> (Tensor[(4, 15, 16), bool], Tensor[(4, 7, 16), bool], Tensor[(16, 10), int8], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) {
    %397 = cast(%var_5459, dtype="bool") /* ty=Tensor[(4, 15, 16), bool] */;
    %398 = shape_of(%var_5458, dtype="int32") /* ty=Tensor[(3), int32] */;
    %399 = cast(%var_5458, dtype="bool") /* ty=Tensor[(4, 15, 16), bool] */;
    %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %401 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 10), int8] */, dtype="int8") /* ty=Tensor[(16, 10), int8] */;
    %402 = reshape(%401, newshape=[160]) /* ty=Tensor[(160), int8] */;
    %403 = @func_4320(%402) /* ty=(Tensor[(160), int8], Tensor[(4, 7, 16), bool], Tensor[(2, 5, 16), float32], Tensor[(4, 7, 16), bool]) */;
    %404 = cast(%var_5479, dtype="int16") /* ty=int16 */;
    %405 = cast(meta[relay.Constant][30] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
    %406 = reshape(%404, newshape=[]) /* ty=int16 */;
    %407 = reshape(%405, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
    %408 = @func_32(%406, %407) /* ty=(Tensor[(16, 13, 6), float64],) */;
    %409 = logical_or(%399, %400) /* ty=Tensor[(4, 15, 16), bool] */;
    %410 = %403.3;
    %411 = %408.0;
    (%409, %410, meta[relay.Constant][29] /* ty=Tensor[(16, 10), int8] */, %411, %var_5479, meta[relay.Constant][30] /* ty=Tensor[(1248), int16] */)
  };
  %412(%var_5486, %var_5487, %var_5488) /* ty=(Tensor[(4, 15, 16), bool], Tensor[(4, 7, 16), bool], Tensor[(16, 10), int8], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */
}

def @func_7525() -> Tensor[(4, 7, 16), float32] {
  %413 = @func_7318() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(960), bool], int16) */;
  %413.0
}

def @func_4200() -> (Tensor[(4, 7, 16), float32],) {
  %414 = @func_3974() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %415 = %414.0;
  (%415,)
}

def @func_6961() -> Tensor[(4, 7, 16), float32] {
  @func_6959() /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_6550() -> (Tensor[(165), float32], Tensor[(4, 7, 16), uint64]) {
  %416 = @func_4216() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %417 = @func_6408() /* ty=Tensor[(165), float32] */;
  %418 = %416.0;
  (%417, %418)
}

def @func_8522(%var_8520: Tensor[(960), bool], %var_8521: int16) -> (Tensor[(165), float32], Tensor[(16, 10), int8], Tensor[(960), bool], int16, Tensor[(4, 7, 16), uint16]) {
  @func_8518(%var_8520, %var_8521) /* ty=(Tensor[(165), float32], Tensor[(16, 10), int8], Tensor[(960), bool], int16, Tensor[(4, 7, 16), uint16]) */
}

def @func_8661() -> Tensor[(4, 7, 16), float32] {
  %420 = fn () -> Tensor[(4, 7, 16), float32] {
    %419 = @func_6263() /* ty=(Tensor[(4, 7, 16), int32], Tensor[(4, 7, 16), float32]) */;
    %419.1
  };
  %420() /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_8431(%var_8408: Tensor[(2, 8, 9), float64]) -> (Tensor[(2, 8, 9), float64], Tensor[(2, 8, 9), bool], Tensor[(4, 7, 16), uint64]) {
  %421 = cast(%var_8408, dtype="float64") /* ty=Tensor[(2, 8, 9), float64] */;
  %422 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(2, 8, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 8, 9), float64] */, dtype="float64") /* ty=Tensor[(2, 8, 9), float64] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %425 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 8, 9), float64] */, dtype="bool") /* ty=Tensor[(2, 8, 9), bool] */;
  %426 = shape_of(%var_8408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%var_8408, dtype="bool") /* ty=Tensor[(2, 8, 9), bool] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %429 = power(%423, %424) /* ty=Tensor[(2, 8, 9), float64] */;
  %430 = greater(%427, %428) /* ty=Tensor[(2, 8, 9), bool] */;
  %431 = @func_5775() /* ty=Tensor[(4, 7, 16), uint64] */;
  (%429, %430, %431)
}

def @func_4700() -> Tensor[(4, 7, 16), float32] {
  %437 = fn () -> Tensor[(4, 7, 16), float32] {
    %432 = @func_4200() /* ty=(Tensor[(4, 7, 16), float32],) */;
    %433 = %432.0;
    %434 = cast(%433, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
    %435 = log(%434) /* ty=Tensor[(4, 7, 16), float64] */;
    %436 = cast(%435, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
    asinh(%436) /* ty=Tensor[(4, 7, 16), float32] */
  };
  %437() /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_1709(%var_1707: Tensor[(11, 9, 10), uint32]) -> (Tensor[(11, 9, 10), uint32],) {
  @func_1706(%var_1707) /* ty=(Tensor[(11, 9, 10), uint32],) */
}

def @func_6265() -> (Tensor[(4, 7, 16), int32], Tensor[(4, 7, 16), float32]) {
  @func_6263() /* ty=(Tensor[(4, 7, 16), int32], Tensor[(4, 7, 16), float32]) */
}

def @func_4592() -> (Tensor[(?, 15, 11), int16],) {
  %438 = @func_4416() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) */;
  %439 = %438.3;
  (%439,)
}

def @func_8774() -> Tensor[(4, 7, 16), uint64] {
  @func_8772() /* ty=Tensor[(4, 7, 16), uint64] */
}

def @func_5762() -> Tensor[(4, 7, 16), float32] {
  %441 = fn () -> Tensor[(4, 7, 16), float32] {
    %440 = @func_4488() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
    %440.0
  };
  %441() /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_5512() -> Tensor[(4, 7, 16), float32] {
  @func_5510() /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_8111(%var_8110: Tensor[(1008), float32]) -> (Tensor[(4, 7, 16), float32], Tensor[(6, 3, 7), float64], Tensor[(1008), float32], Tensor[(126), int16]) {
  %449 = fn (%var_8095: Tensor[(1008), float32]) -> (Tensor[(4, 7, 16), float32], Tensor[(6, 3, 7), float64], Tensor[(1008), float32], Tensor[(126), int16]) {
    %442 = cast(%var_8095, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %443 = cast(meta[relay.Constant][32] /* ty=Tensor[(126), int16] */, dtype="int16") /* ty=Tensor[(126), int16] */;
    %444 = reshape(%442, newshape=[14, 9, 8]) /* ty=Tensor[(14, 9, 8), float32] */;
    %445 = reshape(%443, newshape=[126]) /* ty=Tensor[(126), int16] */;
    %446 = @func_5620(%444, %445) /* ty=(Tensor[(14, 9, 8), int16], Tensor[(?, 3, 13), bool], Tensor[(6, 3, 7), float64], Tensor[(126), int16]) */;
    %447 = @func_7525() /* ty=Tensor[(4, 7, 16), float32] */;
    %448 = %446.2;
    (%447, %448, %var_8095, meta[relay.Constant][32] /* ty=Tensor[(126), int16] */)
  };
  %449(%var_8110) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(6, 3, 7), float64], Tensor[(1008), float32], Tensor[(126), int16]) */
}

def @func_5775() -> Tensor[(4, 7, 16), uint64] {
  %450 = @func_4216() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %450.0
}

def @func_6410() -> Tensor[(165), float32] {
  @func_6408() /* ty=Tensor[(165), float32] */
}

def @func_134(%var_122: Tensor[(16, 3, 1), float32]) -> (Tensor[(16, 3, 1), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(8, 156), int16]) {
  %451 = cast(%var_122, dtype="float32") /* ty=Tensor[(16, 3, 1), float32] */;
  %452 = cast(meta[relay.Constant][33] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %453 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 156), int16] */, dtype="int16") /* ty=Tensor[(8, 156), int16] */;
  %454 = reshape(%452, newshape=[]) /* ty=int16 */;
  %455 = reshape(%453, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
  %456 = @func_32(%454, %455) /* ty=(Tensor[(16, 13, 6), float64],) */;
  %457 = cosh(%451) /* ty=Tensor[(16, 3, 1), float32] */;
  %458 = %456.0;
  (%457, %458, meta[relay.Constant][33] /* ty=int16 */, meta[relay.Constant][34] /* ty=Tensor[(8, 156), int16] */)
}

def @func_6805(%var_6803: int16, %var_6804: Tensor[(120, 8), bool]) -> (Tensor[(4, 7, 16), uint64], Tensor[(16, 13, 6), float64], int16, Tensor[(4, 7, 16), float32], Tensor[(120, 8), bool]) {
  %471 = fn (%var_6775: int16, %var_6782: Tensor[(120, 8), bool]) -> (Tensor[(4, 7, 16), uint64], Tensor[(16, 13, 6), float64], int16, Tensor[(4, 7, 16), float32], Tensor[(120, 8), bool]) {
    %459 = @func_3378() /* ty=(Tensor[(4, 7, 16), uint64],) */;
    %460 = cast(%var_6775, dtype="int16") /* ty=int16 */;
    %461 = reshape(%460, newshape=[]) /* ty=int16 */;
    %462 = @func_1189(%461) /* ty=(Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(13, 5, 15), float32]) */;
    %463 = cast(%var_6782, dtype="bool") /* ty=Tensor[(120, 8), bool] */;
    %464 = cast(%var_6775, dtype="int16") /* ty=int16 */;
    %465 = reshape(%463, newshape=[960]) /* ty=Tensor[(960), bool] */;
    %466 = reshape(%464, newshape=[]) /* ty=int16 */;
    %467 = @func_6116(%465, %466) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(1, 162), uint64], int16, Tensor[(960), bool], int16) */;
    %468 = %459.0;
    %469 = %462.0;
    %470 = %467.0;
    (%468, %469, %var_6775, %470, %var_6782)
  };
  %471(%var_6803, %var_6804) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(16, 13, 6), float64], int16, Tensor[(4, 7, 16), float32], Tensor[(120, 8), bool]) */
}

def @func_7560(%var_7559: int16) -> (Tensor[(4, 7, 16), float32], Tensor[(4, 15, 16), bool], Tensor[(960), bool], int16) {
  %482 = fn (%var_7556: int16) -> (Tensor[(4, 7, 16), float32], Tensor[(4, 15, 16), bool], Tensor[(960), bool], int16) {
    %472 = @func_4200() /* ty=(Tensor[(4, 7, 16), float32],) */;
    %473 = cast(meta[relay.Constant][35] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
    %474 = cast(meta[relay.Constant][35] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
    %475 = cast(%var_7556, dtype="int16") /* ty=int16 */;
    %476 = reshape(%473, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
    %477 = reshape(%474, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
    %478 = reshape(%475, newshape=[]) /* ty=int16 */;
    %479 = @func_5485(%476, %477, %478) /* ty=(Tensor[(4, 15, 16), bool], Tensor[(4, 7, 16), bool], Tensor[(16, 10), int8], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
    %480 = %472.0;
    %481 = %479.0;
    (%480, %481, meta[relay.Constant][35] /* ty=Tensor[(960), bool] */, %var_7556)
  };
  %482(%var_7559) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 15, 16), bool], Tensor[(960), bool], int16) */
}

def @func_5103() -> (Tensor[(4, 7, 16), uint64], Tensor[(8, 11, 11), int32], Tensor[(968), int32]) {
  %483 = @func_3378() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %484 = cast(meta[relay.Constant][36] /* ty=Tensor[(968), int32] */, dtype="int32") /* ty=Tensor[(968), int32] */;
  %485 = reshape(%484, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), int32] */;
  %486 = @func_1271(%485) /* ty=(Tensor[(8, 11, 11), int32],) */;
  %487 = %483.0;
  %488 = %486.0;
  (%487, %488, meta[relay.Constant][36] /* ty=Tensor[(968), int32] */)
}

def @func_5647() -> Tensor[(4, 7, 16), float32] {
  @func_5645() /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_4416() -> (Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) {
  %489 = @func_4200() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %490 = cast(meta[relay.Constant][37] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %491 = reshape(%490, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
  %492 = @func_134(%491) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(8, 156), int16]) */;
  %493 = cast(meta[relay.Constant][38] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %494 = reshape(%493, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), float32] */;
  %495 = @func_4025(%494) /* ty=Tensor[(1, 15, 11), float32] */;
  %496 = cast(meta[relay.Constant][38] /* ty=Tensor[(165), float32] */, dtype="int16") /* ty=Tensor[(165), int16] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%495, dtype="int16") /* ty=Tensor[(1, 15, 11), int16] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %500 = cast(meta[relay.Constant][38] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %501 = %489.0;
  %502 = %492.2;
  %503 = right_shift(%498, %499) /* ty=Tensor[(?, 15, 11), int16] */;
  %504 = cosh(%500) /* ty=Tensor[(165), float32] */;
  (%501, %502, meta[relay.Constant][37] /* ty=Tensor[(48), float32] */, %503, %504)
}

def @func_3659(%var_3647: Tensor[(10, 15, 14), float64], %var_3654: int16) -> (Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(10, 15, 14), float64]) {
  %505 = cast(%var_3654, dtype="int16") /* ty=int16 */;
  %506 = cast(meta[relay.Constant][39] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
  %507 = reshape(%505, newshape=[]) /* ty=int16 */;
  %508 = reshape(%506, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
  %509 = @func_32(%507, %508) /* ty=(Tensor[(16, 13, 6), float64],) */;
  %510 = cast(%var_3647, dtype="float64") /* ty=Tensor[(10, 15, 14), float64] */;
  %511 = exp(%510) /* ty=Tensor[(10, 15, 14), float64] */;
  %512 = cast(%511, dtype="float64") /* ty=Tensor[(10, 15, 14), float64] */;
  %513 = %509.0;
  %514 = cos(%512) /* ty=Tensor[(10, 15, 14), float64] */;
  (%513, %var_3654, meta[relay.Constant][39] /* ty=Tensor[(1248), int16] */, %514)
}

def @func_1374(%var_1363: Tensor[(9, 14, 6), int64], %var_1364: Tensor[(9, 14, 6), int64]) -> (Tensor[(9, 14, 6), bool], Tensor[(9, 14, 6), uint8]) {
  %515 = cast(%var_1364, dtype="bool") /* ty=Tensor[(9, 14, 6), bool] */;
  %516 = shape_of(%var_1363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%var_1363, dtype="bool") /* ty=Tensor[(9, 14, 6), bool] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %519 = cast(%var_1363, dtype="uint8") /* ty=Tensor[(9, 14, 6), uint8] */;
  %520 = shape_of(%var_1364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%var_1364, dtype="uint8") /* ty=Tensor[(9, 14, 6), uint8] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %523 = greater(%517, %518) /* ty=Tensor[(9, 14, 6), bool] */;
  %524 = bitwise_xor(%521, %522) /* ty=Tensor[(9, 14, 6), uint8] */;
  (%523, %524)
}

def @func_6938() -> (Tensor[(4, 7, 16), uint16], Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), float32]) {
  @func_6936() /* ty=(Tensor[(4, 7, 16), uint16], Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), float32]) */
}

def @func_8307(%var_8306: Tensor[(6, 5, 7), float64]) -> Tensor[(6, 5, 7), float64] {
  %531 = fn (%var_8287: Tensor[(6, 5, 7), float64]) -> Tensor[(6, 5, 7), float64] {
    %525 = cast(%var_8287, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
    %526 = atan(%525) /* ty=Tensor[(6, 5, 7), float64] */;
    %527 = cast(%526, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
    %528 = shape_of(%var_8287, dtype="int32") /* ty=Tensor[(3), int32] */;
    %529 = cast(%var_8287, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
    %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%529, %530) /* ty=Tensor[(6, 5, 7), float64] */
  };
  %531(%var_8306) /* ty=Tensor[(6, 5, 7), float64] */
}

def @func_6603() -> (int16, Tensor[(4, 7, 16), float32]) {
  @func_6601() /* ty=(int16, Tensor[(4, 7, 16), float32]) */
}

def @func_5801(%var_5800: Tensor[(4, 7, 16), uint64]) -> (Tensor[(4, 7, 16), bool],) {
  %539 = fn (%var_5794: Tensor[(4, 7, 16), uint64]) -> (Tensor[(4, 7, 16), bool],) {
    %532 = @func_3849() /* ty=(Tensor[(4, 7, 16), uint64],) */;
    %533 = %532.0;
    %534 = cast(%var_5794, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
    %535 = shape_of(%533, dtype="int32") /* ty=Tensor[(3), int32] */;
    %536 = cast(%533, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
    %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %538 = logical_or(%536, %537) /* ty=Tensor[(4, 7, 16), bool] */;
    (%538,)
  };
  %539(%var_5800) /* ty=(Tensor[(4, 7, 16), bool],) */
}

def @func_7318() -> (Tensor[(4, 7, 16), float32], int16, Tensor[(960), bool], int16) {
  %540 = @func_4633() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %541 = cast(meta[relay.Constant][40] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
  %542 = cast(meta[relay.Constant][40] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
  %543 = cast(meta[relay.Constant][41] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %544 = reshape(%541, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
  %545 = reshape(%542, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
  %546 = reshape(%543, newshape=[]) /* ty=int16 */;
  %547 = @func_5485(%544, %545, %546) /* ty=(Tensor[(4, 15, 16), bool], Tensor[(4, 7, 16), bool], Tensor[(16, 10), int8], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
  %548 = %540.0;
  %549 = %547.4;
  (%548, %549, meta[relay.Constant][40] /* ty=Tensor[(960), bool] */, meta[relay.Constant][41] /* ty=int16 */)
}

def @func_7424() -> (Tensor[(4, 7, 16), uint64], Tensor[(165), float32], Tensor[(4, 7, 16), bool]) {
  %550 = @func_6717() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %551 = %550.0;
  %552 = cast(%551, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  %553 = reshape(%552, newshape=[4, 7, 16]) /* ty=Tensor[(4, 7, 16), float32] */;
  %554 = @func_6489(%553) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), bool], Tensor[(1, 15, 11), float32], Tensor[(165), float32]) */;
  %555 = @func_6408() /* ty=Tensor[(165), float32] */;
  %556 = %554.2;
  (%551, %555, %556)
}

def @func_8319(%var_8317: Tensor[(3, 8, 6), float64]) -> (Tensor[(3, 8, 6), float64],) {
  @func_8316(%var_8317) /* ty=(Tensor[(3, 8, 6), float64],) */
}

def @func_9170() -> (Tensor[(13, 5, 15), float32],) {
  %557 = @func_6048() /* ty=(int16, Tensor[(13, 5, 15), float32]) */;
  %558 = %557.1;
  (%558,)
}

def @func_6324() -> (Tensor[(165), float32],) {
  %559 = @func_4416() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) */;
  %560 = %559.4;
  (%560,)
}

def @func_7943() -> Tensor[(4, 7, 16), uint64] {
  %561 = @func_6340() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %561.0
}

def @func_6936() -> (Tensor[(4, 7, 16), uint16], Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), float32]) {
  %562 = @func_5393() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) */;
  %563 = @func_6340() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %564 = %562.1;
  %565 = %563.0;
  %566 = @func_5761() /* ty=Tensor[(4, 7, 16), float32] */;
  (%564, %565, %566)
}

def @func_9060() -> (int16,) {
  @func_9058() /* ty=(int16,) */
}

def @func_6050() -> (int16, Tensor[(13, 5, 15), float32]) {
  @func_6048() /* ty=(int16, Tensor[(13, 5, 15), float32]) */
}

def @func_9118() -> (Tensor[(4, 7, 16), float32],) {
  %567 = @func_8361() /* ty=Tensor[(4, 7, 16), float32] */;
  (%567,)
}

def @func_5925(%var_5909: Tensor[(198), int8]) -> (Tensor[(4, 7, 16), uint64], Tensor[(2, 9, 11), bool], Tensor[(198), int8], Tensor[(4, 7, 16), int32]) {
  %568 = cast(%var_5909, dtype="int8") /* ty=Tensor[(198), int8] */;
  %569 = reshape(%568, newshape=[2, 9, 11]) /* ty=Tensor[(2, 9, 11), int8] */;
  %570 = @func_719(%569) /* ty=(Tensor[(2, 9, 11), bool], Tensor[(2, 9, 11), float64]) */;
  %571 = @func_5393() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) */;
  %572 = %571.0;
  %573 = @func_5393() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) */;
  %574 = %573.1;
  %575 = cast(%574, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  %576 = erf(%575) /* ty=Tensor[(4, 7, 16), float32] */;
  %577 = cast(%576, dtype="int32") /* ty=Tensor[(4, 7, 16), int32] */;
  %578 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%572, dtype="int32") /* ty=Tensor[(4, 7, 16), int32] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %581 = @func_5775() /* ty=Tensor[(4, 7, 16), uint64] */;
  %582 = %570.0;
  %583 = subtract(%579, %580) /* ty=Tensor[(4, 7, 16), int32] */;
  (%581, %582, %var_5909, %583)
}

def @func_6048() -> (int16, Tensor[(13, 5, 15), float32]) {
  %584 = @func_4416() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) */;
  %585 = %584.1;
  %586 = cast(%585, dtype="int16") /* ty=int16 */;
  %587 = reshape(%586, newshape=[]) /* ty=int16 */;
  %588 = @func_1189(%587) /* ty=(Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(13, 5, 15), float32]) */;
  %589 = %588.3;
  (%585, %589)
}

def @func_8482() -> (Tensor[(4, 7, 16), float32],) {
  %590 = @func_7525() /* ty=Tensor[(4, 7, 16), float32] */;
  (%590,)
}

def @func_5282() -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint64]) {
  %591 = @func_4416() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) */;
  %592 = @func_4216() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %593 = %591.0;
  %594 = %592.0;
  (%593, %594)
}

def @func_7976(%var_7975: Tensor[(4, 7, 16), uint64]) -> (Tensor[(4, 7, 16), float32],) {
  %602 = fn (%var_7966: Tensor[(4, 7, 16), uint64]) -> (Tensor[(4, 7, 16), float32],) {
    %595 = @func_6717() /* ty=(Tensor[(4, 7, 16), uint64],) */;
    %596 = %595.0;
    %597 = cast(%var_7966, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
    %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(3), int32] */;
    %599 = cast(%596, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
    %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %601 = floor_mod(%599, %600) /* ty=Tensor[(4, 7, 16), float32] */;
    (%601,)
  };
  %602(%var_7975) /* ty=(Tensor[(4, 7, 16), float32],) */
}

def @func_6131(%var_6130: Tensor[(672), float32]) -> (Tensor[(4, 7, 16), float32], Tensor[(1248, 1), int16], Tensor[(672), float32], int16, Tensor[(1248), int16]) {
  %613 = fn (%var_6125: Tensor[(672), float32]) -> (Tensor[(4, 7, 16), float32], Tensor[(1248, 1), int16], Tensor[(672), float32], int16, Tensor[(1248), int16]) {
    %603 = @func_4633() /* ty=(Tensor[(4, 7, 16), float32],) */;
    %604 = cast(%var_6125, dtype="float32") /* ty=Tensor[(672), float32] */;
    %605 = cast(meta[relay.Constant][42] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %606 = cast(meta[relay.Constant][43] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
    %607 = reshape(%604, newshape=[12, 14, 4]) /* ty=Tensor[(12, 14, 4), float32] */;
    %608 = reshape(%605, newshape=[]) /* ty=int16 */;
    %609 = reshape(%606, newshape=[1248, 1]) /* ty=Tensor[(1248, 1), int16] */;
    %610 = @func_3535(%607, %608, %609) /* ty=(Tensor[(12, 14, 4), bool], Tensor[(16, 13, 6), float64], int16, Tensor[(1248, 1), int16], Tensor[(16, 13, 6), float64]) */;
    %611 = %603.0;
    %612 = %610.3;
    (%611, %612, %var_6125, meta[relay.Constant][42] /* ty=int16 */, meta[relay.Constant][43] /* ty=Tensor[(1248), int16] */)
  };
  %613(%var_6130) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(1248, 1), int16], Tensor[(672), float32], int16, Tensor[(1248), int16]) */
}

def @func_4027(%var_4026: Tensor[(1, 15, 11), float32]) -> Tensor[(1, 15, 11), float32] {
  %615 = fn (%var_4018: Tensor[(1, 15, 11), float32]) -> Tensor[(1, 15, 11), float32] {
    %614 = cast(%var_4018, dtype="float32") /* ty=Tensor[(1, 15, 11), float32] */;
    acosh(%614) /* ty=Tensor[(1, 15, 11), float32] */
  };
  %615(%var_4026) /* ty=Tensor[(1, 15, 11), float32] */
}

def @func_3851() -> (Tensor[(4, 7, 16), uint64],) {
  @func_3849() /* ty=(Tensor[(4, 7, 16), uint64],) */
}

def @func_4323(%var_4321: Tensor[(160), int8]) -> (Tensor[(160), int8], Tensor[(4, 7, 16), bool], Tensor[(2, 5, 16), float32], Tensor[(4, 7, 16), bool]) {
  @func_4320(%var_4321) /* ty=(Tensor[(160), int8], Tensor[(4, 7, 16), bool], Tensor[(2, 5, 16), float32], Tensor[(4, 7, 16), bool]) */
}

def @func_4594() -> (Tensor[(?, 15, 11), int16],) {
  @func_4592() /* ty=(Tensor[(?, 15, 11), int16],) */
}

def @func_6000(%var_5998: int16, %var_5999: Tensor[(1248), int16]) -> (int16, Tensor[(672), float32], int16, Tensor[(1248), int16], Tensor[(4, 7, 16), bool]) {
  %633 = fn (%var_5957: int16, %var_5958: Tensor[(1248), int16]) -> (int16, Tensor[(672), float32], int16, Tensor[(1248), int16], Tensor[(4, 7, 16), bool]) {
    %616 = cast(meta[relay.Constant][44] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
    %617 = cast(%var_5957, dtype="int16") /* ty=int16 */;
    %618 = cast(%var_5958, dtype="int16") /* ty=Tensor[(1248), int16] */;
    %619 = reshape(%616, newshape=[12, 14, 4]) /* ty=Tensor[(12, 14, 4), float32] */;
    %620 = reshape(%617, newshape=[]) /* ty=int16 */;
    %621 = reshape(%618, newshape=[1248, 1]) /* ty=Tensor[(1248, 1), int16] */;
    %622 = @func_3535(%619, %620, %621) /* ty=(Tensor[(12, 14, 4), bool], Tensor[(16, 13, 6), float64], int16, Tensor[(1248, 1), int16], Tensor[(16, 13, 6), float64]) */;
    %623 = @func_4216() /* ty=(Tensor[(4, 7, 16), uint64],) */;
    %624 = %623.0;
    %625 = @func_3849() /* ty=(Tensor[(4, 7, 16), uint64],) */;
    %626 = %625.0;
    %627 = cast(%626, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
    %628 = shape_of(%624, dtype="int32") /* ty=Tensor[(3), int32] */;
    %629 = cast(%624, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
    %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %631 = %622.2;
    %632 = less_equal(%629, %630) /* ty=Tensor[(4, 7, 16), bool] */;
    (%631, meta[relay.Constant][44] /* ty=Tensor[(672), float32] */, %var_5957, %var_5958, %632)
  };
  %633(%var_5998, %var_5999) /* ty=(int16, Tensor[(672), float32], int16, Tensor[(1248), int16], Tensor[(4, 7, 16), bool]) */
}

def @func_8245(%var_8243: Tensor[(968), int32]) -> (Tensor[(4, 7, 16), float32], Tensor[(8, 11, 11), int32], Tensor[(968), int32]) {
  @func_8242(%var_8243) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(8, 11, 11), int32], Tensor[(968), int32]) */
}

def @func_8363() -> Tensor[(4, 7, 16), float32] {
  @func_8361() /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_8863(%var_8860: Tensor[(504, 2), float32], %var_8861: Tensor[(1, 198), int8], %var_8862: Tensor[(504, 2), float32]) -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint64], Tensor[(1, 198), int8], Tensor[(504, 2), float64]) {
  @func_8858(%var_8860, %var_8861, %var_8862) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint64], Tensor[(1, 198), int8], Tensor[(504, 2), float64]) */
}

def @func_4139(%var_4096: Tensor[(2, 5, 16), int8], %var_4100: Tensor[(2, 5, 16), int8]) -> (Tensor[(2, 5, 16), bool], Tensor[(?, 3, 13), float64], Tensor[(39), float64], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(2, 5, 16), float32], Tensor[(13, 5, 15), float32]) {
  %634 = cast(%var_4096, dtype="int8") /* ty=Tensor[(2, 5, 16), int8] */;
  %635 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(2, 5, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 5, 16), int8] */, dtype="int8") /* ty=Tensor[(2, 5, 16), int8] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %638 = right_shift(%636, %637) /* ty=Tensor[(2, 5, 16), int8] */;
  %639 = cast(%var_4100, dtype="bool") /* ty=Tensor[(2, 5, 16), bool] */;
  %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%638, dtype="bool") /* ty=Tensor[(2, 5, 16), bool] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %643 = cast(meta[relay.Constant][46] /* ty=Tensor[(39), float64] */, dtype="float64") /* ty=Tensor[(39), float64] */;
  %644 = reshape(%643, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float64] */;
  %645 = @func_3946(%644) /* ty=(Tensor[(?, 3, 13), float64],) */;
  %646 = cast(meta[relay.Constant][47] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %647 = cast(meta[relay.Constant][48] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
  %648 = reshape(%646, newshape=[]) /* ty=int16 */;
  %649 = reshape(%647, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
  %650 = @func_32(%648, %649) /* ty=(Tensor[(16, 13, 6), float64],) */;
  %651 = cast(%var_4100, dtype="float32") /* ty=Tensor[(2, 5, 16), float32] */;
  %652 = cast(meta[relay.Constant][47] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %653 = reshape(%652, newshape=[]) /* ty=int16 */;
  %654 = @func_1189(%653) /* ty=(Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(13, 5, 15), float32]) */;
  %655 = less(%641, %642) /* ty=Tensor[(2, 5, 16), bool] */;
  %656 = %645.0;
  %657 = %650.0;
  %658 = atan(%651) /* ty=Tensor[(2, 5, 16), float32] */;
  %659 = %654.3;
  (%655, %656, meta[relay.Constant][46] /* ty=Tensor[(39), float64] */, %657, meta[relay.Constant][47] /* ty=int16 */, meta[relay.Constant][48] /* ty=Tensor[(1248), int16] */, %658, %659)
}

def @func_9172() -> (Tensor[(13, 5, 15), float32],) {
  @func_9170() /* ty=(Tensor[(13, 5, 15), float32],) */
}

def @func_8361() -> Tensor[(4, 7, 16), float32] {
  %660 = @func_7004() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), bool]) */;
  %660.0
}

def @func_3741(%var_3740: Tensor[(8, 4, 9), int8]) -> (Tensor[(4, 7, 16), uint64], Tensor[(8, 4, 9), bool]) {
  %673 = fn (%var_3707: Tensor[(8, 4, 9), int8]) -> (Tensor[(4, 7, 16), uint64], Tensor[(8, 4, 9), bool]) {
    %661 = @func_3378() /* ty=(Tensor[(4, 7, 16), uint64],) */;
    %662 = cast(meta[relay.Constant][49] /* ty=Tensor[(8, 4, 9), int8] */, dtype="int8") /* ty=Tensor[(8, 4, 9), int8] */;
    %663 = shape_of(%var_3707, dtype="int32") /* ty=Tensor[(3), int32] */;
    %664 = cast(%var_3707, dtype="int8") /* ty=Tensor[(8, 4, 9), int8] */;
    %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %666 = maximum(%664, %665) /* ty=Tensor[(8, 4, 9), int8] */;
    %667 = cast(%var_3707, dtype="bool") /* ty=Tensor[(8, 4, 9), bool] */;
    %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(3), int32] */;
    %669 = cast(%666, dtype="bool") /* ty=Tensor[(8, 4, 9), bool] */;
    %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %671 = %661.0;
    %672 = greater(%669, %670) /* ty=Tensor[(8, 4, 9), bool] */;
    (%671, %672)
  };
  %673(%var_3740) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(8, 4, 9), bool]) */
}

def @func_6717() -> (Tensor[(4, 7, 16), uint64],) {
  %674 = @func_3849() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %675 = %674.0;
  (%675,)
}

def @func_4320(%var_4249: Tensor[(160), int8]) -> (Tensor[(160), int8], Tensor[(4, 7, 16), bool], Tensor[(2, 5, 16), float32], Tensor[(4, 7, 16), bool]) {
  %676 = @func_4200() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %677 = %676.0;
  %678 = cast(meta[relay.Constant][50] /* ty=Tensor[(4, 7, 16), float32] */, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %679 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%677, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %682 = cast(%var_4249, dtype="int8") /* ty=Tensor[(160), int8] */;
  %683 = cast(%var_4249, dtype="int8") /* ty=Tensor[(160), int8] */;
  %684 = reshape(%682, newshape=[2, 5, 16]) /* ty=Tensor[(2, 5, 16), int8] */;
  %685 = reshape(%683, newshape=[2, 5, 16]) /* ty=Tensor[(2, 5, 16), int8] */;
  %686 = @func_4139(%684, %685) /* ty=(Tensor[(2, 5, 16), bool], Tensor[(?, 3, 13), float64], Tensor[(39), float64], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(2, 5, 16), float32], Tensor[(13, 5, 15), float32]) */;
  %687 = %686.0;
  %688 = cast(%687, dtype="float32") /* ty=Tensor[(2, 5, 16), float32] */;
  %689 = cast(%677, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %690 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(4, 7, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(meta[relay.Constant][50] /* ty=Tensor[(4, 7, 16), float32] */, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %693 = less(%680, %681) /* ty=Tensor[(4, 7, 16), bool] */;
  %694 = sqrt(%688) /* ty=Tensor[(2, 5, 16), float32] */;
  %695 = equal(%691, %692) /* ty=Tensor[(4, 7, 16), bool] */;
  (%var_4249, %693, %694, %695)
}

def @func_6719() -> (Tensor[(4, 7, 16), uint64],) {
  @func_6717() /* ty=(Tensor[(4, 7, 16), uint64],) */
}

def @func_8257() -> Tensor[(4, 7, 16), float32] {
  @func_8255() /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_8564(%var_8558: Tensor[(8, 4, 7), float64]) -> Tensor[(8, 4, 7), float64] {
  %696 = cast(%var_8558, dtype="float64") /* ty=Tensor[(8, 4, 7), float64] */;
  tan(%696) /* ty=Tensor[(8, 4, 7), float64] */
}

def @func_137(%var_135: Tensor[(16, 3, 1), float32]) -> (Tensor[(16, 3, 1), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(8, 156), int16]) {
  @func_134(%var_135) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(8, 156), int16]) */
}

def @func_36(%var_34: int16, %var_35: Tensor[(16, 13, 6), int16]) -> (Tensor[(16, 13, 6), float64],) {
  @func_32(%var_34, %var_35) /* ty=(Tensor[(16, 13, 6), float64],) */
}

def @func_3562(%var_3560: Tensor[(6, 3, 9), uint64], %var_3561: Tensor[(6, 3, 9), uint64]) -> (Tensor[(6, 3, 9), uint64],) {
  @func_3558(%var_3560, %var_3561) /* ty=(Tensor[(6, 3, 9), uint64],) */
}

def @func_3948(%var_3947: Tensor[(1, 3, 13), float64]) -> (Tensor[(?, 3, 13), float64],) {
  %706 = fn (%var_3936: Tensor[(1, 3, 13), float64]) -> (Tensor[(?, 3, 13), float64],) {
    %697 = cast(%var_3936, dtype="float64") /* ty=Tensor[(1, 3, 13), float64] */;
    %698 = asin(%697) /* ty=Tensor[(1, 3, 13), float64] */;
    %699 = cast(%var_3936, dtype="float64") /* ty=Tensor[(1, 3, 13), float64] */;
    %700 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
    %701 = cast(%698, dtype="float64") /* ty=Tensor[(1, 3, 13), float64] */;
    %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %703 = mod(%701, %702) /* ty=Tensor[(?, 3, 13), float64] */;
    %704 = cast(%703, dtype="float64") /* ty=Tensor[(?, 3, 13), float64] */;
    %705 = tan(%704) /* ty=Tensor[(?, 3, 13), float64] */;
    (%705,)
  };
  %706(%var_3947) /* ty=(Tensor[(?, 3, 13), float64],) */
}

def @func_6120(%var_6118: Tensor[(960), bool], %var_6119: int16) -> (Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(1, 162), uint64], int16, Tensor[(960), bool], int16) {
  @func_6116(%var_6118, %var_6119) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(1, 162), uint64], int16, Tensor[(960), bool], int16) */
}

def @func_8994() -> (int16,) {
  %709 = fn () -> (int16,) {
    %707 = @func_6048() /* ty=(int16, Tensor[(13, 5, 15), float32]) */;
    %708 = %707.0;
    (%708,)
  };
  %709() /* ty=(int16,) */
}

def @func_6243(%var_6219: Tensor[(11, 10, 16), float64]) -> (Tensor[(11, 10, 16), float64], Tensor[(4, 7, 16), uint64], Tensor[(11, 10, 16), float32], Tensor[(126), int16], Tensor[(1008), float32], Tensor[(126), int16]) {
  %710 = cast(%var_6219, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %711 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(11, 10, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(meta[relay.Constant][51] /* ty=Tensor[(11, 10, 16), float64] */, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %714 = cast(%var_6219, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %715 = atanh(%714) /* ty=Tensor[(11, 10, 16), float64] */;
  %716 = cast(%715, dtype="float32") /* ty=Tensor[(11, 10, 16), float32] */;
  %717 = cast(meta[relay.Constant][52] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %718 = cast(meta[relay.Constant][53] /* ty=Tensor[(126), int16] */, dtype="int16") /* ty=Tensor[(126), int16] */;
  %719 = reshape(%717, newshape=[14, 9, 8]) /* ty=Tensor[(14, 9, 8), float32] */;
  %720 = reshape(%718, newshape=[126]) /* ty=Tensor[(126), int16] */;
  %721 = @func_5620(%719, %720) /* ty=(Tensor[(14, 9, 8), int16], Tensor[(?, 3, 13), bool], Tensor[(6, 3, 7), float64], Tensor[(126), int16]) */;
  %722 = power(%712, %713) /* ty=Tensor[(11, 10, 16), float64] */;
  %723 = @func_5775() /* ty=Tensor[(4, 7, 16), uint64] */;
  %724 = sinh(%716) /* ty=Tensor[(11, 10, 16), float32] */;
  %725 = %721.3;
  (%722, %723, %724, %725, meta[relay.Constant][52] /* ty=Tensor[(1008), float32] */, meta[relay.Constant][53] /* ty=Tensor[(126), int16] */)
}

def @func_4202() -> (Tensor[(4, 7, 16), float32],) {
  @func_4200() /* ty=(Tensor[(4, 7, 16), float32],) */
}

def @func_5375(%var_5374: Tensor[(162), uint64]) -> (Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(162), uint64]) {
  %734 = fn (%var_5347: Tensor[(162), uint64]) -> (Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(162), uint64]) {
    %726 = @func_4633() /* ty=(Tensor[(4, 7, 16), float32],) */;
    %727 = cast(%var_5347, dtype="uint64") /* ty=Tensor[(162), uint64] */;
    %728 = cast(%var_5347, dtype="uint64") /* ty=Tensor[(162), uint64] */;
    %729 = reshape(%727, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), uint64] */;
    %730 = reshape(%728, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), uint64] */;
    %731 = @func_3558(%729, %730) /* ty=(Tensor[(6, 3, 9), uint64],) */;
    %732 = %726.0;
    %733 = %731.0;
    (%732, %733, %var_5347)
  };
  %734(%var_5374) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(162), uint64]) */
}

def @func_6246(%var_6244: Tensor[(11, 10, 16), float64]) -> (Tensor[(11, 10, 16), float64], Tensor[(4, 7, 16), uint64], Tensor[(11, 10, 16), float32], Tensor[(126), int16], Tensor[(1008), float32], Tensor[(126), int16]) {
  @func_6243(%var_6244) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(4, 7, 16), uint64], Tensor[(11, 10, 16), float32], Tensor[(126), int16], Tensor[(1008), float32], Tensor[(126), int16]) */
}

def @main(%var_9213: Tensor[(3, 13, 16), int16]) -> (Tensor[(3, 13, 16), bool], int16, Tensor[(3, 13, 16), float64]) {
  %735 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 13, 16), int16] */, dtype="bool") /* ty=Tensor[(3, 13, 16), bool] */;
  %736 = shape_of(%var_9213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%var_9213, dtype="bool") /* ty=Tensor[(3, 13, 16), bool] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %739 = @func_6050() /* ty=(int16, Tensor[(13, 5, 15), float32]) */;
  %740 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 13, 16), int16] */, dtype="float64") /* ty=Tensor[(3, 13, 16), float64] */;
  %741 = shape_of(%var_9213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%var_9213, dtype="float64") /* ty=Tensor[(3, 13, 16), float64] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %744 = not_equal(%737, %738) /* ty=Tensor[(3, 13, 16), bool] */;
  %745 = %739.0;
  %746 = power(%742, %743) /* ty=Tensor[(3, 13, 16), float64] */;
  (%744, %745, %746)
}

def @func_3903(%var_3901: Tensor[(672), float32]) -> (Tensor[(4, 7, 16), uint64], int16, Tensor[(672), float32], int16, Tensor[(1248), int16]) {
  @func_3900(%var_3901) /* ty=(Tensor[(4, 7, 16), uint64], int16, Tensor[(672), float32], int16, Tensor[(1248), int16]) */
}

def @func_6580(%var_6579: Tensor[(16, 13, 6), float64]) -> (Tensor[(16, 13, 6), float32],) {
  %754 = fn (%var_6567: Tensor[(16, 13, 6), float64]) -> (Tensor[(16, 13, 6), float32],) {
    %747 = @func_4488() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
    %748 = %747.1;
    %749 = cast(%var_6567, dtype="float32") /* ty=Tensor[(16, 13, 6), float32] */;
    %750 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
    %751 = cast(%748, dtype="float32") /* ty=Tensor[(16, 13, 6), float32] */;
    %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %753 = power(%751, %752) /* ty=Tensor[(16, 13, 6), float32] */;
    (%753,)
  };
  %754(%var_6579) /* ty=(Tensor[(16, 13, 6), float32],) */
}

def @func_6905() -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32]) {
  %758 = fn () -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32]) {
    %755 = @func_4633() /* ty=(Tensor[(4, 7, 16), float32],) */;
    %756 = %755.0;
    %757 = @func_5645() /* ty=Tensor[(4, 7, 16), float32] */;
    (%756, %757)
  };
  %758() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32]) */
}

def @func_8484() -> (Tensor[(4, 7, 16), float32],) {
  @func_8482() /* ty=(Tensor[(4, 7, 16), float32],) */
}

def @func_5191(%var_5189: int16, %var_5190: Tensor[(484, 2), int32]) -> (Tensor[(?, 15, 11), int16], int16, int16, Tensor[(8, 11, 11), bool], Tensor[(16, 13, 6), float64], Tensor[(1248), int16]) {
  %780 = fn (%var_5122: int16, %var_5166: Tensor[(484, 2), int32]) -> (Tensor[(?, 15, 11), int16], int16, int16, Tensor[(8, 11, 11), bool], Tensor[(16, 13, 6), float64], Tensor[(1248), int16]) {
    %759 = @func_4416() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) */;
    %760 = cast(%var_5122, dtype="int16") /* ty=int16 */;
    %761 = reshape(%760, newshape=[]) /* ty=int16 */;
    %762 = @func_1189(%761) /* ty=(Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(13, 5, 15), float32]) */;
    %763 = cast(%var_5166, dtype="int32") /* ty=Tensor[(484, 2), int32] */;
    %764 = reshape(%763, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), int32] */;
    %765 = @func_1271(%764) /* ty=(Tensor[(8, 11, 11), int32],) */;
    %766 = %765.0;
    %767 = cast(%var_5166, dtype="bool") /* ty=Tensor[(484, 2), bool] */;
    %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
    %769 = cast(%766, dtype="bool") /* ty=Tensor[(8, 11, 11), bool] */;
    %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %771 = cast(%var_5122, dtype="int16") /* ty=int16 */;
    %772 = cast(meta[relay.Constant][55] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
    %773 = reshape(%771, newshape=[]) /* ty=int16 */;
    %774 = reshape(%772, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
    %775 = @func_32(%773, %774) /* ty=(Tensor[(16, 13, 6), float64],) */;
    %776 = %759.3;
    %777 = %762.1;
    %778 = logical_and(%769, %770) /* ty=Tensor[(8, 11, 11), bool] */;
    %779 = %775.0;
    (%776, %777, %var_5122, %778, %779, meta[relay.Constant][55] /* ty=Tensor[(1248), int16] */)
  };
  %780(%var_5189, %var_5190) /* ty=(Tensor[(?, 15, 11), int16], int16, int16, Tensor[(8, 11, 11), bool], Tensor[(16, 13, 6), float64], Tensor[(1248), int16]) */
}

def @func_7005() -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), bool]) {
  %787 = fn () -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), bool]) {
    %781 = @func_6904() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32]) */;
    %782 = %781.1;
    %783 = cast(%782, dtype="uint64") /* ty=Tensor[(4, 7, 16), uint64] */;
    %784 = reshape(%783, newshape=[4, 7, 16]) /* ty=Tensor[(4, 7, 16), uint64] */;
    %785 = @func_5799(%784) /* ty=(Tensor[(4, 7, 16), bool],) */;
    %786 = %785.0;
    (%782, %786)
  };
  %787() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), bool]) */
}

def @func_6341() -> (Tensor[(4, 7, 16), uint64],) {
  %790 = fn () -> (Tensor[(4, 7, 16), uint64],) {
    %788 = @func_4092() /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(288), int8], Tensor[(4, 7, 16), uint16], Tensor[(7, 10, 10), float32], Tensor[(700), float32]) */;
    %789 = %788.0;
    (%789,)
  };
  %790() /* ty=(Tensor[(4, 7, 16), uint64],) */
}

def @func_8950(%var_8949: Tensor[(1008), float32]) -> (Tensor[(4, 7, 16), float32], Tensor[(1008), float32], Tensor[(33, 6), int8], Tensor[(4, 7, 16), float32], Tensor[(504, 2), float64]) {
  %804 = fn (%var_8910: Tensor[(1008), float32]) -> (Tensor[(4, 7, 16), float32], Tensor[(1008), float32], Tensor[(33, 6), int8], Tensor[(4, 7, 16), float32], Tensor[(504, 2), float64]) {
    %791 = @func_4200() /* ty=(Tensor[(4, 7, 16), float32],) */;
    %792 = cast(%var_8910, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %793 = cast(meta[relay.Constant][56] /* ty=Tensor[(33, 6), int8] */, dtype="int8") /* ty=Tensor[(33, 6), int8] */;
    %794 = cast(%var_8910, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %795 = reshape(%792, newshape=[504, 2]) /* ty=Tensor[(504, 2), float32] */;
    %796 = reshape(%793, newshape=[1, 198]) /* ty=Tensor[(1, 198), int8] */;
    %797 = reshape(%794, newshape=[504, 2]) /* ty=Tensor[(504, 2), float32] */;
    %798 = @func_8858(%795, %796, %797) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint64], Tensor[(1, 198), int8], Tensor[(504, 2), float64]) */;
    %799 = %798.3;
    %800 = cast(%799, dtype="float64") /* ty=Tensor[(504, 2), float64] */;
    %801 = @func_8255() /* ty=Tensor[(4, 7, 16), float32] */;
    %802 = %791.0;
    %803 = asin(%800) /* ty=Tensor[(504, 2), float64] */;
    (%801, %var_8910, meta[relay.Constant][56] /* ty=Tensor[(33, 6), int8] */, %802, %803)
  };
  %804(%var_8949) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(1008), float32], Tensor[(33, 6), int8], Tensor[(4, 7, 16), float32], Tensor[(504, 2), float64]) */
}

def @func_5394() -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) {
  %808 = fn () -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) {
    %805 = @func_4092() /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(288), int8], Tensor[(4, 7, 16), uint16], Tensor[(7, 10, 10), float32], Tensor[(700), float32]) */;
    %806 = @func_5114() /* ty=Tensor[(4, 7, 16), float32] */;
    %807 = %805.2;
    (%806, %807)
  };
  %808() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) */
}

def @func_3976() -> (Tensor[(4, 7, 16), float32],) {
  @func_3974() /* ty=(Tensor[(4, 7, 16), float32],) */
}

def @func_7945() -> Tensor[(4, 7, 16), uint64] {
  @func_7943() /* ty=Tensor[(4, 7, 16), uint64] */
}

def @func_507(%var_469: Tensor[(7, 10, 10), float32], %var_493: Tensor[(7, 10, 10), float32]) -> (Tensor[(7, 10, 10), bool], Tensor[(7, 10, 10), float64], Tensor[(7, 10, 10), int32], Tensor[(7, 10, 10), float32]) {
  %809 = cast(%var_469, dtype="float32") /* ty=Tensor[(7, 10, 10), float32] */;
  %810 = sin(%809) /* ty=Tensor[(7, 10, 10), float32] */;
  %811 = cast(meta[relay.Constant][57] /* ty=Tensor[(7, 10, 10), float32] */, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %812 = shape_of(%var_469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %813 = cast(%var_469, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %815 = greater_equal(%813, %814) /* ty=Tensor[(7, 10, 10), bool] */;
  %816 = cast(%815, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %817 = shape_of(%810, dtype="int32") /* ty=Tensor[(3), int32] */;
  %818 = cast(%810, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %820 = cast(%815, dtype="float64") /* ty=Tensor[(7, 10, 10), float64] */;
  %821 = cast(%var_493, dtype="int32") /* ty=Tensor[(7, 10, 10), int32] */;
  %822 = shape_of(%810, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%810, dtype="int32") /* ty=Tensor[(7, 10, 10), int32] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %825 = cast(%810, dtype="float32") /* ty=Tensor[(7, 10, 10), float32] */;
  %826 = not_equal(%818, %819) /* ty=Tensor[(7, 10, 10), bool] */;
  %827 = atanh(%820) /* ty=Tensor[(7, 10, 10), float64] */;
  %828 = maximum(%823, %824) /* ty=Tensor[(7, 10, 10), int32] */;
  %829 = rsqrt(%825) /* ty=Tensor[(7, 10, 10), float32] */;
  (%826, %827, %828, %829)
}

def @func_7850(%var_7849: int16) -> (Tensor[(165), float32], Tensor[(16, 10), int8], Tensor[(960), bool], int16, Tensor[(3, 5, 3), bool], Tensor[(45), float32]) {
  %843 = fn (%var_7831: int16) -> (Tensor[(165), float32], Tensor[(16, 10), int8], Tensor[(960), bool], int16, Tensor[(3, 5, 3), bool], Tensor[(45), float32]) {
    %830 = cast(meta[relay.Constant][58] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
    %831 = cast(meta[relay.Constant][58] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
    %832 = cast(%var_7831, dtype="int16") /* ty=int16 */;
    %833 = reshape(%830, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
    %834 = reshape(%831, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
    %835 = reshape(%832, newshape=[]) /* ty=int16 */;
    %836 = @func_5485(%833, %834, %835) /* ty=(Tensor[(4, 15, 16), bool], Tensor[(4, 7, 16), bool], Tensor[(16, 10), int8], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
    %837 = cast(meta[relay.Constant][59] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
    %838 = reshape(%837, newshape=[3, 5, 3]) /* ty=Tensor[(3, 5, 3), float32] */;
    %839 = @func_3018(%838) /* ty=(Tensor[(3, 5, 3), bool],) */;
    %840 = @func_6408() /* ty=Tensor[(165), float32] */;
    %841 = %836.2;
    %842 = %839.0;
    (%840, %841, meta[relay.Constant][58] /* ty=Tensor[(960), bool] */, %var_7831, %842, meta[relay.Constant][59] /* ty=Tensor[(45), float32] */)
  };
  %843(%var_7849) /* ty=(Tensor[(165), float32], Tensor[(16, 10), int8], Tensor[(960), bool], int16, Tensor[(3, 5, 3), bool], Tensor[(45), float32]) */
}

def @func_6408() -> Tensor[(165), float32] {
  %844 = @func_6324() /* ty=(Tensor[(165), float32],) */;
  %844.0
}

def @func_8772() -> Tensor[(4, 7, 16), uint64] {
  @func_4365() /* ty=Tensor[(4, 7, 16), uint64] */
}

def @func_4634() -> (Tensor[(4, 7, 16), float32],) {
  %847 = fn () -> (Tensor[(4, 7, 16), float32],) {
    %845 = @func_3974() /* ty=(Tensor[(4, 7, 16), float32],) */;
    %846 = %845.0;
    (%846,)
  };
  %847() /* ty=(Tensor[(4, 7, 16), float32],) */
}

def @func_8208(%var_8206: Tensor[(4, 7, 16), float32], %var_8207: Tensor[(1760), float64]) -> (Tensor[(4, 7, 16), int16], Tensor[(4, 7, 16), float32], Tensor[(1248), int16], int16, Tensor[(968), int32], Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), int32], Tensor[(11, 10, 16), float64], Tensor[(1760), float64]) {
  @func_8204(%var_8206, %var_8207) /* ty=(Tensor[(4, 7, 16), int16], Tensor[(4, 7, 16), float32], Tensor[(1248), int16], int16, Tensor[(968), int32], Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), int32], Tensor[(11, 10, 16), float64], Tensor[(1760), float64]) */
}

def @func_2216(%var_2213: Tensor[(10, 5, 11), int16], %var_2214: Tensor[(10, 5, 11), int16], %var_2215: Tensor[(10, 5, 11), int16]) -> (Tensor[(10, 5, 11), int16], Tensor[(11, 9, 10), uint32], Tensor[(990), uint32], Tensor[(10, 5, 11), float32]) {
  @func_2211(%var_2213, %var_2214, %var_2215) /* ty=(Tensor[(10, 5, 11), int16], Tensor[(11, 9, 10), uint32], Tensor[(990), uint32], Tensor[(10, 5, 11), float32]) */
}

def @func_4365() -> Tensor[(4, 7, 16), uint64] {
  %848 = @func_3849() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %848.0
}

def @func_7351() -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint64]) {
  %853 = fn () -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint64]) {
    %849 = @func_4633() /* ty=(Tensor[(4, 7, 16), float32],) */;
    %850 = @func_6340() /* ty=(Tensor[(4, 7, 16), uint64],) */;
    %851 = %849.0;
    %852 = %850.0;
    (%851, %852)
  };
  %853() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint64]) */
}

def @func_9058() -> (int16,) {
  %854 = @func_4416() /* ty=(Tensor[(4, 7, 16), float32], int16, Tensor[(48), float32], Tensor[(?, 15, 11), int16], Tensor[(165), float32]) */;
  %855 = %854.1;
  (%855,)
}

def @func_6658(%var_6635: Tensor[(4, 7, 16), uint16]) -> Tensor[(4, 7, 16), float32] {
  %856 = @func_5393() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) */;
  %857 = %856.1;
  %858 = cast(%var_6635, dtype="uint64") /* ty=Tensor[(4, 7, 16), uint64] */;
  %859 = shape_of(%857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(%857, dtype="uint64") /* ty=Tensor[(4, 7, 16), uint64] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %862 = minimum(%860, %861) /* ty=Tensor[(4, 7, 16), uint64] */;
  %863 = cast(%862, dtype="float32") /* ty=Tensor[(4, 7, 16), float32] */;
  asin(%863) /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_5852(%var_5850: Tensor[(126), int16]) -> (Tensor[(968), int32], Tensor[(7, 10, 10), bool], Tensor[(700), float32], Tensor[(4, 7, 16), uint16], Tensor[(126), int16]) {
  @func_5849(%var_5850) /* ty=(Tensor[(968), int32], Tensor[(7, 10, 10), bool], Tensor[(700), float32], Tensor[(4, 7, 16), uint16], Tensor[(126), int16]) */
}

def @func_8518(%var_8501: Tensor[(960), bool], %var_8502: int16) -> (Tensor[(165), float32], Tensor[(16, 10), int8], Tensor[(960), bool], int16, Tensor[(4, 7, 16), uint16]) {
  %864 = cast(%var_8501, dtype="bool") /* ty=Tensor[(960), bool] */;
  %865 = cast(%var_8501, dtype="bool") /* ty=Tensor[(960), bool] */;
  %866 = cast(%var_8502, dtype="int16") /* ty=int16 */;
  %867 = reshape(%864, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
  %868 = reshape(%865, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), bool] */;
  %869 = reshape(%866, newshape=[]) /* ty=int16 */;
  %870 = @func_5485(%867, %868, %869) /* ty=(Tensor[(4, 15, 16), bool], Tensor[(4, 7, 16), bool], Tensor[(16, 10), int8], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
  %871 = @func_6936() /* ty=(Tensor[(4, 7, 16), uint16], Tensor[(4, 7, 16), uint64], Tensor[(4, 7, 16), float32]) */;
  %872 = @func_6408() /* ty=Tensor[(165), float32] */;
  %873 = %870.2;
  %874 = %871.0;
  (%872, %873, %var_8501, %var_8502, %874)
}

def @func_3540(%var_3537: Tensor[(12, 14, 4), float32], %var_3538: int16, %var_3539: Tensor[(1248, 1), int16]) -> (Tensor[(12, 14, 4), bool], Tensor[(16, 13, 6), float64], int16, Tensor[(1248, 1), int16], Tensor[(16, 13, 6), float64]) {
  @func_3535(%var_3537, %var_3538, %var_3539) /* ty=(Tensor[(12, 14, 4), bool], Tensor[(16, 13, 6), float64], int16, Tensor[(1248, 1), int16], Tensor[(16, 13, 6), float64]) */
}

def @func_1271(%var_1257: Tensor[(8, 11, 11), int32]) -> (Tensor[(8, 11, 11), int32],) {
  %875 = cast(meta[relay.Constant][60] /* ty=Tensor[(8, 11, 11), int32] */, dtype="int32") /* ty=Tensor[(8, 11, 11), int32] */;
  %876 = shape_of(%var_1257, dtype="int32") /* ty=Tensor[(3), int32] */;
  %877 = cast(%var_1257, dtype="int32") /* ty=Tensor[(8, 11, 11), int32] */;
  %878 = dyn.reshape(%875, %876, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %879 = logical_xor(%877, %878) /* ty=Tensor[(8, 11, 11), int32] */;
  (%879,)
}

def @func_5510() -> Tensor[(4, 7, 16), float32] {
  %880 = @func_4200() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %880.0
}

def @func_5645() -> Tensor[(4, 7, 16), float32] {
  @func_5114() /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_6949() -> Tensor[(4, 7, 16), float32] {
  %882 = fn () -> Tensor[(4, 7, 16), float32] {
    %881 = @func_5393() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint16]) */;
    %881.0
  };
  %882() /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_9145() -> (Tensor[(4, 7, 16), float32],) {
  %885 = fn () -> (Tensor[(4, 7, 16), float32],) {
    %883 = @func_7362() /* ty=(Tensor[(4, 7, 16), float32],) */;
    %884 = %883.0;
    (%884,)
  };
  %885() /* ty=(Tensor[(4, 7, 16), float32],) */
}

def @func_8697(%var_8691: Tensor[(162), uint64], %var_8692: Tensor[(960), bool], %var_8693: Tensor[(1008), float32], %var_8694: Tensor[(198), int8], %var_8695: Tensor[(144), float64], %var_8696: Tensor[(8, 11, 8), int16]) -> (Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(162), uint64], int16, Tensor[(960), bool], Tensor[(2, 9, 11), bool], Tensor[(1008), float32], Tensor[(198), int8], Tensor[(2, 8, 9), bool], Tensor[(144), float64], Tensor[(8, 11, 8), bool]) {
  @func_8689(%var_8691, %var_8692, %var_8693, %var_8694, %var_8695, %var_8696) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(162), uint64], int16, Tensor[(960), bool], Tensor[(2, 9, 11), bool], Tensor[(1008), float32], Tensor[(198), int8], Tensor[(2, 8, 9), bool], Tensor[(144), float64], Tensor[(8, 11, 8), bool]) */
}

def @func_721(%var_720: Tensor[(2, 9, 11), int8]) -> (Tensor[(2, 9, 11), bool], Tensor[(2, 9, 11), float64]) {
  %893 = fn (%var_693: Tensor[(2, 9, 11), int8]) -> (Tensor[(2, 9, 11), bool], Tensor[(2, 9, 11), float64]) {
    %886 = cast(%var_693, dtype="bool") /* ty=Tensor[(2, 9, 11), bool] */;
    %887 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(2, 9, 11), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %888 = cast(meta[relay.Constant][61] /* ty=Tensor[(2, 9, 11), int8] */, dtype="bool") /* ty=Tensor[(2, 9, 11), bool] */;
    %889 = dyn.reshape(%886, %887, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %890 = cast(%var_693, dtype="float64") /* ty=Tensor[(2, 9, 11), float64] */;
    %891 = greater(%888, %889) /* ty=Tensor[(2, 9, 11), bool] */;
    %892 = acos(%890) /* ty=Tensor[(2, 9, 11), float64] */;
    (%891, %892)
  };
  %893(%var_720) /* ty=(Tensor[(2, 9, 11), bool], Tensor[(2, 9, 11), float64]) */
}

def @func_8618() -> Tensor[(4, 7, 16), float32] {
  %894 = fn () -> Tensor[(4, 7, 16), float32] {
    @func_5510() /* ty=Tensor[(4, 7, 16), float32] */
  };
  %894() /* ty=Tensor[(4, 7, 16), float32] */
}

def @func_4143(%var_4141: Tensor[(2, 5, 16), int8], %var_4142: Tensor[(2, 5, 16), int8]) -> (Tensor[(2, 5, 16), bool], Tensor[(?, 3, 13), float64], Tensor[(39), float64], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(2, 5, 16), float32], Tensor[(13, 5, 15), float32]) {
  @func_4139(%var_4141, %var_4142) /* ty=(Tensor[(2, 5, 16), bool], Tensor[(?, 3, 13), float64], Tensor[(39), float64], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(2, 5, 16), float32], Tensor[(13, 5, 15), float32]) */
}

def @func_5928(%var_5926: Tensor[(198), int8]) -> (Tensor[(4, 7, 16), uint64], Tensor[(2, 9, 11), bool], Tensor[(198), int8], Tensor[(4, 7, 16), int32]) {
  @func_5925(%var_5926) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(2, 9, 11), bool], Tensor[(198), int8], Tensor[(4, 7, 16), int32]) */
}

def @func_3900(%var_3885: Tensor[(672), float32]) -> (Tensor[(4, 7, 16), uint64], int16, Tensor[(672), float32], int16, Tensor[(1248), int16]) {
  %895 = @func_3378() /* ty=(Tensor[(4, 7, 16), uint64],) */;
  %896 = cast(%var_3885, dtype="float32") /* ty=Tensor[(672), float32] */;
  %897 = cast(meta[relay.Constant][62] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %898 = cast(meta[relay.Constant][63] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
  %899 = reshape(%896, newshape=[12, 14, 4]) /* ty=Tensor[(12, 14, 4), float32] */;
  %900 = reshape(%897, newshape=[]) /* ty=int16 */;
  %901 = reshape(%898, newshape=[1248, 1]) /* ty=Tensor[(1248, 1), int16] */;
  %902 = @func_3535(%899, %900, %901) /* ty=(Tensor[(12, 14, 4), bool], Tensor[(16, 13, 6), float64], int16, Tensor[(1248, 1), int16], Tensor[(16, 13, 6), float64]) */;
  %903 = %895.0;
  %904 = %902.2;
  (%903, %904, %var_3885, meta[relay.Constant][62] /* ty=int16 */, meta[relay.Constant][63] /* ty=Tensor[(1248), int16] */)
}

def @func_5284() -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint64]) {
  @func_5282() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), uint64]) */
}

def @func_6867() -> (int16, Tensor[(11, 9, 10), uint32], Tensor[(550), int16]) {
  @func_6865() /* ty=(int16, Tensor[(11, 9, 10), uint32], Tensor[(550), int16]) */
}

def @func_8567(%var_8565: Tensor[(8, 4, 7), float64]) -> Tensor[(8, 4, 7), float64] {
  @func_8564(%var_8565) /* ty=Tensor[(8, 4, 7), float64] */
}

def @func_7480() -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32], Tensor[(162), float32], Tensor[(4, 7, 16), uint64]) {
  %922 = fn () -> (Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32], Tensor[(162), float32], Tensor[(4, 7, 16), uint64]) {
    %905 = @func_4488() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
    %906 = @func_6263() /* ty=(Tensor[(4, 7, 16), int32], Tensor[(4, 7, 16), float32]) */;
    %907 = cast(meta[relay.Constant][64] /* ty=Tensor[(162), uint64] */, dtype="uint64") /* ty=Tensor[(162), uint64] */;
    %908 = reshape(%907, newshape=[162]) /* ty=Tensor[(162), uint64] */;
    %909 = @func_5373(%908) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(162), uint64]) */;
    %910 = %909.1;
    %911 = cast(%910, dtype="bool") /* ty=Tensor[(6, 3, 9), bool] */;
    %912 = shape_of(meta[relay.Constant][64] /* ty=Tensor[(162), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %913 = cast(meta[relay.Constant][64] /* ty=Tensor[(162), uint64] */, dtype="bool") /* ty=Tensor[(162), bool] */;
    %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?), bool] */;
    %915 = greater_equal(%913, %914) /* ty=Tensor[(162), bool] */;
    %916 = cast(%915, dtype="float32") /* ty=Tensor[(162), float32] */;
    %917 = @func_3849() /* ty=(Tensor[(4, 7, 16), uint64],) */;
    %918 = %905.0;
    %919 = %906.1;
    %920 = exp(%916) /* ty=Tensor[(162), float32] */;
    %921 = %917.0;
    (%918, %919, %920, %921)
  };
  %922() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(4, 7, 16), float32], Tensor[(162), float32], Tensor[(4, 7, 16), uint64]) */
}

def @func_7364() -> (Tensor[(4, 7, 16), float32],) {
  @func_7362() /* ty=(Tensor[(4, 7, 16), float32],) */
}

def @func_1192(%var_1190: int16) -> (Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(13, 5, 15), float32]) {
  @func_1189(%var_1190) /* ty=(Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(13, 5, 15), float32]) */
}

def @func_6865() -> (int16, Tensor[(11, 9, 10), uint32], Tensor[(550), int16]) {
  %923 = @func_4488() /* ty=(Tensor[(4, 7, 16), float32], Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16]) */;
  %924 = cast(meta[relay.Constant][65] /* ty=Tensor[(550), int16] */, dtype="int16") /* ty=Tensor[(550), int16] */;
  %925 = cast(meta[relay.Constant][65] /* ty=Tensor[(550), int16] */, dtype="int16") /* ty=Tensor[(550), int16] */;
  %926 = cast(meta[relay.Constant][65] /* ty=Tensor[(550), int16] */, dtype="int16") /* ty=Tensor[(550), int16] */;
  %927 = reshape(%924, newshape=[10, 5, 11]) /* ty=Tensor[(10, 5, 11), int16] */;
  %928 = reshape(%925, newshape=[10, 5, 11]) /* ty=Tensor[(10, 5, 11), int16] */;
  %929 = reshape(%926, newshape=[10, 5, 11]) /* ty=Tensor[(10, 5, 11), int16] */;
  %930 = @func_2211(%927, %928, %929) /* ty=(Tensor[(10, 5, 11), int16], Tensor[(11, 9, 10), uint32], Tensor[(990), uint32], Tensor[(10, 5, 11), float32]) */;
  %931 = %923.2;
  %932 = %930.1;
  (%931, %932, meta[relay.Constant][65] /* ty=Tensor[(550), int16] */)
}

def @func_1189(%var_1167: int16) -> (Tensor[(16, 13, 6), float64], int16, Tensor[(1248), int16], Tensor[(13, 5, 15), float32]) {
  %933 = cast(%var_1167, dtype="int16") /* ty=int16 */;
  %934 = cast(meta[relay.Constant][66] /* ty=Tensor[(1248), int16] */, dtype="int16") /* ty=Tensor[(1248), int16] */;
  %935 = reshape(%933, newshape=[]) /* ty=int16 */;
  %936 = reshape(%934, newshape=[16, 13, 6]) /* ty=Tensor[(16, 13, 6), int16] */;
  %937 = @func_32(%935, %936) /* ty=(Tensor[(16, 13, 6), float64],) */;
  %938 = cast(meta[relay.Constant][67] /* ty=Tensor[(13, 5, 15), float32] */, dtype="float32") /* ty=Tensor[(13, 5, 15), float32] */;
  %939 = erf(%938) /* ty=Tensor[(13, 5, 15), float32] */;
  %940 = cast(%939, dtype="float32") /* ty=Tensor[(13, 5, 15), float32] */;
  %941 = %937.0;
  %942 = atan(%940) /* ty=Tensor[(13, 5, 15), float32] */;
  (%941, %var_1167, meta[relay.Constant][66] /* ty=Tensor[(1248), int16] */, %942)
}

def @func_8689(%var_8666: Tensor[(162), uint64], %var_8671: Tensor[(960), bool], %var_8676: Tensor[(1008), float32], %var_8677: Tensor[(198), int8], %var_8682: Tensor[(144), float64], %var_8684: Tensor[(8, 11, 8), int16]) -> (Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(162), uint64], int16, Tensor[(960), bool], Tensor[(2, 9, 11), bool], Tensor[(1008), float32], Tensor[(198), int8], Tensor[(2, 8, 9), bool], Tensor[(144), float64], Tensor[(8, 11, 8), bool]) {
  %943 = @func_3974() /* ty=(Tensor[(4, 7, 16), float32],) */;
  %944 = cast(%var_8666, dtype="uint64") /* ty=Tensor[(162), uint64] */;
  %945 = cast(%var_8666, dtype="uint64") /* ty=Tensor[(162), uint64] */;
  %946 = reshape(%944, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), uint64] */;
  %947 = reshape(%945, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), uint64] */;
  %948 = @func_3558(%946, %947) /* ty=(Tensor[(6, 3, 9), uint64],) */;
  %949 = cast(%var_8671, dtype="bool") /* ty=Tensor[(960), bool] */;
  %950 = cast(meta[relay.Constant][68] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %951 = reshape(%949, newshape=[960]) /* ty=Tensor[(960), bool] */;
  %952 = reshape(%950, newshape=[]) /* ty=int16 */;
  %953 = @func_6116(%951, %952) /* ty=(Tensor[(4, 7, 16), float32], Tensor[(6, 3, 9), uint64], Tensor[(1, 162), uint64], int16, Tensor[(960), bool], int16) */;
  %954 = cast(%var_8676, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %955 = cast(%var_8677, dtype="int8") /* ty=Tensor[(198), int8] */;
  %956 = reshape(%954, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
  %957 = reshape(%955, newshape=[198]) /* ty=Tensor[(198), int8] */;
  %958 = @func_7762(%956, %957) /* ty=(Tensor[(4, 7, 16), uint64], Tensor[(14, 9, 8), int16], Tensor[(1008), float32], Tensor[(126), int16], Tensor[(2, 9, 11), bool], Tensor[(7, 10, 10), bool], Tensor[(700), float32], Tensor[(198), uint8]) */;
  %959 = cast(%var_8682, dtype="float64") /* ty=Tensor[(144), float64] */;
  %960 = reshape(%959, newshape=[2, 8, 9]) /* ty=Tensor[(2, 8, 9), float64] */;
  %961 = @func_8431(%960) /* ty=(Tensor[(2, 8, 9), float64], Tensor[(2, 8, 9), bool], Tensor[(4, 7, 16), uint64]) */;
  %962 = cast(meta[relay.Constant][68] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %963 = cast(%var_8684, dtype="bool") /* ty=Tensor[(8, 11, 8), bool] */;
  %964 = %943.0;
  %965 = %948.0;
  %966 = %953.5;
  %967 = %958.4;
  %968 = %961.1;
  %969 = greater(%962, %963) /* ty=Tensor[(8, 11, 8), bool] */;
  (%964, %965, %var_8666, %966, %var_8671, %967, %var_8676, %var_8677, %968, %var_8682, %969)
}

def @func_8434(%var_8432: Tensor[(2, 8, 9), float64]) -> (Tensor[(2, 8, 9), float64], Tensor[(2, 8, 9), bool], Tensor[(4, 7, 16), uint64]) {
  @func_8431(%var_8432) /* ty=(Tensor[(2, 8, 9), float64], Tensor[(2, 8, 9), bool], Tensor[(4, 7, 16), uint64]) */
}

def @func_5442(%var_5440: uint8, %var_5441: Tensor[(8, 1, 11), uint8]) -> Tensor[(8, 1, 11), uint8] {
  %972 = fn (%var_5423: uint8, %var_5424: Tensor[(8, 1, 11), uint8]) -> Tensor[(8, 1, 11), uint8] {
    %970 = cast(%var_5423, dtype="uint8") /* ty=uint8 */;
    %971 = cast(%var_5424, dtype="uint8") /* ty=Tensor[(8, 1, 11), uint8] */;
    bitwise_xor(%970, %971) /* ty=Tensor[(8, 1, 11), uint8] */
  };
  %972(%var_5440, %var_5441) /* ty=Tensor[(8, 1, 11), uint8] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen304/build/output.py", line 2453, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:05:25] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

