==========mod==========
#[version = "0.0.5"]
def @func_4129(%var_4123: Tensor[(12, 9, 1), float64]) -> (Tensor[(12, 9, 1), float64],) {
  %0 = cast(%var_4123, dtype="float64") /* ty=Tensor[(12, 9, 1), float64] */;
  %1 = asin(%0) /* ty=Tensor[(12, 9, 1), float64] */;
  (%1,)
}

def @func_6743(%var_6736: Tensor[(13), float32], %var_6737: Tensor[(405), uint16]) -> (Tensor[(11, 13, 8), uint8], Tensor[(15, 3, 9), float64], Tensor[(13), float32], Tensor[(405), uint16]) {
  %2 = cast(%var_6736, dtype="float32") /* ty=Tensor[(13), float32] */;
  %3 = cast(%var_6737, dtype="uint16") /* ty=Tensor[(405), uint16] */;
  %4 = reshape(%2, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %5 = reshape(%3, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), uint16] */;
  %6 = @func_2886(%4, %5) /* ty=(Tensor[(528), int32], Tensor[(13), float32], Tensor[(15, 3, 9), float64], Tensor[(15, 3, 9), float64]) */;
  %7 = @func_4748() /* ty=Tensor[(11, 13, 8), uint8] */;
  %8 = %6.2;
  (%7, %8, %var_6736, %var_6737)
}

def @func_1042(%var_1012: Tensor[(3, 8, 4), uint8]) -> (Tensor[(3, 8, 4), bool], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(6, 8, 11), bool]) {
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 8, 1), uint8] */, dtype="bool") /* ty=Tensor[(3, 8, 1), bool] */;
  %10 = cast(%var_1012, dtype="bool") /* ty=Tensor[(3, 8, 4), bool] */;
  %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(13), float32] */, dtype="float32") /* ty=Tensor[(13), float32] */;
  %12 = reshape(%11, newshape=[13, 1]) /* ty=Tensor[(13, 1), float32] */;
  %13 = @func_68(%12) /* ty=(Tensor[(13, 1), float32],) */;
  %14 = @func_988() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %15 = greater_equal(%9, %10) /* ty=Tensor[(3, 8, 4), bool] */;
  %16 = %13.0;
  %17 = %14.1;
  (%15, %16, meta[relay.Constant][1] /* ty=Tensor[(13), float32] */, %17)
}

def @func_2648() -> Tensor[(6, 8, 11), float64] {
  %18 = @func_2123() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %19 = %18.0;
  %20 = cast(%19, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
  acosh(%20) /* ty=Tensor[(6, 8, 11), float64] */
}

def @func_5732(%var_5728: Tensor[(11, 13, 3), float64]) -> Tensor[(11, 13, 3), bool] {
  %21 = cast(%var_5728, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
  %22 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(11, 13, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 13, 3), float64] */, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%23, %24) /* ty=Tensor[(11, 13, 3), bool] */
}

def @func_1900(%var_1885: Tensor[(96), uint8]) -> (Tensor[(6, 8, 11), float64], Tensor[(96), float32], Tensor[(96), float32]) {
  %25 = cast(%var_1885, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %26 = reshape(%25, newshape=[96]) /* ty=Tensor[(96), uint8] */;
  %27 = @func_1632(%26) /* ty=(Tensor[(96), float32],) */;
  %28 = cast(%var_1885, dtype="float32") /* ty=Tensor[(96), float32] */;
  %29 = @func_1502() /* ty=Tensor[(6, 8, 11), float64] */;
  %30 = %27.0;
  %31 = atan(%28) /* ty=Tensor[(96), float32] */;
  (%29, %30, %31)
}

def @func_2364() -> (Tensor[(15, 3, 9), uint16],) {
  %32 = @func_1291() /* ty=Tensor[(15, 3, 9), uint16] */;
  (%32,)
}

def @func_7788() -> (Tensor[(6, 8, 11), float64], Tensor[(11, 13, 8), float64], Tensor[(96), float32], Tensor[(96), uint8]) {
  %33 = @func_988() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %34 = @func_6507() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(11, 13, 8), uint8]) */;
  %35 = %34.1;
  %36 = cast(%35, dtype="float64") /* ty=Tensor[(11, 13, 8), float64] */;
  %37 = cast(meta[relay.Constant][3] /* ty=Tensor[(96), uint8] */, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %38 = reshape(%37, newshape=[96]) /* ty=Tensor[(96), uint8] */;
  %39 = @func_1900(%38) /* ty=(Tensor[(6, 8, 11), float64], Tensor[(96), float32], Tensor[(96), float32]) */;
  %40 = %33.0;
  %41 = acos(%36) /* ty=Tensor[(11, 13, 8), float64] */;
  %42 = %39.1;
  (%40, %41, %42, meta[relay.Constant][3] /* ty=Tensor[(96), uint8] */)
}

def @func_3119() -> (Tensor[(6, 8, 11), float32],) {
  %43 = @func_2451() /* ty=Tensor[(6, 8, 11), float32] */;
  (%43,)
}

def @func_4450(%var_4438: Tensor[(3, 8), float32]) -> Tensor[(3, 8), float32] {
  %44 = cast(%var_4438, dtype="float32") /* ty=Tensor[(3, 8), float32] */;
  atanh(%44) /* ty=Tensor[(3, 8), float32] */
}

def @func_68(%var_40: Tensor[(13, 1), float32]) -> (Tensor[(13, 1), float32],) {
  %45 = cast(%var_40, dtype="float32") /* ty=Tensor[(13, 1), float32] */;
  %46 = asinh(%45) /* ty=Tensor[(13, 1), float32] */;
  (%46,)
}

def @func_5430() -> (Tensor[(15, 3, 9), uint16],) {
  %47 = @func_4854() /* ty=Tensor[(15, 3, 9), uint16] */;
  (%47,)
}

def @func_7596(%var_7569: Tensor[(8, 1, 16), float32], %var_7585: Tensor[(88), bool], %var_7586: uint16, %var_7587: Tensor[(13, 1), float32]) -> (Tensor[(8, 1, 16), float32], Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), float64], Tensor[(13), float32], Tensor[(88), bool], uint16, Tensor[(13, 1), float32]) {
  %48 = cast(%var_7569, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
  %49 = @func_6132() /* ty=(Tensor[(13, 1), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float32]) */;
  %50 = %49.1;
  %51 = cast(%50, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %52 = reshape(%51, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %53 = @func_1097(%52) /* ty=(Tensor[(15, 3, 9), bool], Tensor[(15, 3, 9), float64]) */;
  %54 = cast(%var_7585, dtype="bool") /* ty=Tensor[(88), bool] */;
  %55 = cast(%var_7585, dtype="bool") /* ty=Tensor[(88), bool] */;
  %56 = cast(%var_7586, dtype="uint16") /* ty=uint16 */;
  %57 = cast(%var_7587, dtype="float32") /* ty=Tensor[(13, 1), float32] */;
  %58 = reshape(%54, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), bool] */;
  %59 = reshape(%55, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), bool] */;
  %60 = reshape(%56, newshape=[]) /* ty=uint16 */;
  %61 = reshape(%57, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %62 = @func_530(%58, %59, %60, %61) /* ty=(Tensor[(11, 2, 4), bool], Tensor[(13), float32], uint16, Tensor[(72), uint16], Tensor[(13), float32], Tensor[(13, 1), float32]) */;
  %63 = atanh(%48) /* ty=Tensor[(8, 1, 16), float32] */;
  %64 = %53.1;
  %65 = %62.1;
  (%63, %50, %64, %65, %var_7585, %var_7586, %var_7587)
}

def @func_5590() -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) {
  %66 = @func_4818() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64], Tensor[(1, 13), float32], Tensor[(13, 1), float32]) */;
  %67 = @func_5157() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %68 = %66.0;
  %69 = %67.0;
  (%68, %69)
}

def @func_988() -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) {
  %70 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %71 = %70.1;
  %72 = cast(%71, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
  %73 = cast(%71, dtype="int32") /* ty=Tensor[(6, 8, 11), int32] */;
  %74 = reshape(%73, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), int32] */;
  %75 = exp(%72) /* ty=Tensor[(6, 8, 11), float64] */;
  %76 = @func_606(%74) /* ty=Tensor[(6, 8, 11), bool] */;
  (%75, %76)
}

def @func_3825(%var_3814: Tensor[(702), uint16], %var_3817: Tensor[(1, 13), float32]) -> (Tensor[(6, 8, 11), bool], Tensor[(6, 8, 11), float32], Tensor[(702), uint16], Tensor[(405), float32], Tensor[(88, 1), bool], Tensor[(1, 13), float32], Tensor[(15, 3, 9), uint16]) {
  %77 = @func_988() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %78 = cast(%var_3814, dtype="uint16") /* ty=Tensor[(702), uint16] */;
  %79 = %77.1;
  %80 = cast(%79, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %81 = cast(meta[relay.Constant][4] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %82 = cast(meta[relay.Constant][5] /* ty=Tensor[(88, 1), bool] */, dtype="bool") /* ty=Tensor[(88, 1), bool] */;
  %83 = cast(%var_3817, dtype="float32") /* ty=Tensor[(1, 13), float32] */;
  %84 = reshape(%78, newshape=[1, 702]) /* ty=Tensor[(1, 702), uint16] */;
  %85 = reshape(%80, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), bool] */;
  %86 = reshape(%81, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %87 = reshape(%82, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %88 = reshape(%83, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %89 = @func_1218(%84, %85, %86, %87, %88) /* ty=(Tensor[(528), int32], Tensor[(9, 13, 6), bool], Tensor[(1, 702), uint16], Tensor[(6, 8, 11), uint16], Tensor[(6, 8, 11), float32], Tensor[(405), float32], Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), float32], Tensor[(13, 1), float32], Tensor[(88), bool], Tensor[(13), float32]) */;
  %90 = cast(meta[relay.Constant][4] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %91 = reshape(%90, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %92 = @func_743(%91) /* ty=(Tensor[(15, 3, 9), float32], uint16, Tensor[(88), bool], uint16, Tensor[(13), float32], Tensor[(15, 3, 9), uint16]) */;
  %93 = %89.4;
  %94 = %92.5;
  (%79, %93, %var_3814, meta[relay.Constant][4] /* ty=Tensor[(405), float32] */, meta[relay.Constant][5] /* ty=Tensor[(88, 1), bool] */, %var_3817, %94)
}

def @func_7932(%var_7928: Tensor[(405), float32], %var_7929: Tensor[(1, 88), bool]) -> (Tensor[(6, 8, 11), uint8], Tensor[(9, 13, 6), bool], Tensor[(702), uint16], Tensor[(405), float32], Tensor[(1, 88), bool], Tensor[(13, 1), float32]) {
  %95 = @func_6142() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) */;
  %96 = cast(meta[relay.Constant][6] /* ty=Tensor[(702), uint16] */, dtype="uint16") /* ty=Tensor[(702), uint16] */;
  %97 = %95.1;
  %98 = cast(%97, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %99 = cast(%var_7928, dtype="float32") /* ty=Tensor[(405), float32] */;
  %100 = cast(%var_7929, dtype="bool") /* ty=Tensor[(1, 88), bool] */;
  %101 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 1), float32] */;
  %102 = reshape(%96, newshape=[1, 702]) /* ty=Tensor[(1, 702), uint16] */;
  %103 = reshape(%98, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), bool] */;
  %104 = reshape(%99, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %105 = reshape(%100, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %106 = reshape(%101, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %107 = @func_1218(%102, %103, %104, %105, %106) /* ty=(Tensor[(528), int32], Tensor[(9, 13, 6), bool], Tensor[(1, 702), uint16], Tensor[(6, 8, 11), uint16], Tensor[(6, 8, 11), float32], Tensor[(405), float32], Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), float32], Tensor[(13, 1), float32], Tensor[(88), bool], Tensor[(13), float32]) */;
  %108 = %107.1;
  (%97, %108, meta[relay.Constant][6] /* ty=Tensor[(702), uint16] */, %var_7928, %var_7929, meta[relay.Constant][7] /* ty=Tensor[(13, 1), float32] */)
}

def @func_4028() -> Tensor[(6, 8, 11), float64] {
  %109 = @func_1123() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %109.0
}

def @func_2224(%var_2205: Tensor[(15, 3, 9), float64]) -> (Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), uint64]) {
  %110 = @func_1291() /* ty=Tensor[(15, 3, 9), uint16] */;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %112 = reshape(%111, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %113 = @func_1097(%112) /* ty=(Tensor[(15, 3, 9), bool], Tensor[(15, 3, 9), float64]) */;
  %114 = %113.1;
  %115 = cast(%var_2205, dtype="uint64") /* ty=Tensor[(15, 3, 9), uint64] */;
  %116 = shape_of(%114, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(%114, dtype="uint64") /* ty=Tensor[(15, 3, 9), uint64] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %119 = minimum(%117, %118) /* ty=Tensor[(15, 3, 9), uint64] */;
  (%110, %119)
}

def @func_1097(%var_1068: Tensor[(15, 3, 9), float32]) -> (Tensor[(15, 3, 9), bool], Tensor[(15, 3, 9), float64]) {
  %120 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
  %121 = %120.0;
  %122 = cast(%var_1068, dtype="bool") /* ty=Tensor[(15, 3, 9), bool] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="bool") /* ty=Tensor[(15, 3, 9), bool] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %126 = cast(%var_1068, dtype="float64") /* ty=Tensor[(15, 3, 9), float64] */;
  %127 = not_equal(%124, %125) /* ty=Tensor[(15, 3, 9), bool] */;
  %128 = cosh(%126) /* ty=Tensor[(15, 3, 9), float64] */;
  (%127, %128)
}

def @func_680() -> (Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) {
  %129 = cast(meta[relay.Constant][8] /* ty=Tensor[(15, 3, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %130 = cast(meta[relay.Constant][8] /* ty=Tensor[(15, 3, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %131 = tan(%130) /* ty=Tensor[(15, 3, 9), float32] */;
  %132 = cast(%131, dtype="uint16") /* ty=Tensor[(15, 3, 9), uint16] */;
  %133 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(15, 3, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(meta[relay.Constant][8] /* ty=Tensor[(15, 3, 9), float32] */, dtype="uint16") /* ty=Tensor[(15, 3, 9), uint16] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %136 = sinh(%129) /* ty=Tensor[(15, 3, 9), float32] */;
  %137 = add(%134, %135) /* ty=Tensor[(15, 3, 9), uint16] */;
  (%136, %137)
}

def @func_1571() -> Tensor[(6, 8, 11), bool] {
  %138 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %138.1
}

def @func_7462() -> (Tensor[(6, 8, 11), float32], Tensor[(6, 8, 11), bool]) {
  %139 = @func_5244() /* ty=(Tensor[(6, 8, 11), float32],) */;
  %140 = %139.0;
  %141 = @func_5164() /* ty=Tensor[(6, 8, 11), bool] */;
  (%140, %141)
}

def @func_7482() -> Tensor[(6, 8, 11), float64] {
  %142 = @func_7310() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) */;
  %142.2
}

def @func_3856() -> Tensor[(6, 8, 11), float32] {
  %143 = @func_1729() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %144 = %143.0;
  %145 = cast(%144, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
  log10(%145) /* ty=Tensor[(6, 8, 11), float32] */
}

def @func_2886(%var_2859: Tensor[(13), float32], %var_2861: Tensor[(15, 3, 9), uint16]) -> (Tensor[(528), int32], Tensor[(13), float32], Tensor[(15, 3, 9), float64], Tensor[(15, 3, 9), float64]) {
  %146 = cast(%var_2859, dtype="float32") /* ty=Tensor[(13), float32] */;
  %147 = reshape(%146, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %148 = @func_946(%147) /* ty=(Tensor[(528), int32], Tensor[(13, 1), float32], Tensor[(13), float32]) */;
  %149 = @func_2364() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %150 = %149.0;
  %151 = cast(%var_2861, dtype="float64") /* ty=Tensor[(15, 3, 9), float64] */;
  %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%150, dtype="float64") /* ty=Tensor[(15, 3, 9), float64] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %155 = cast(%var_2861, dtype="float64") /* ty=Tensor[(15, 3, 9), float64] */;
  %156 = %148.0;
  %157 = mod(%153, %154) /* ty=Tensor[(15, 3, 9), float64] */;
  %158 = sin(%155) /* ty=Tensor[(15, 3, 9), float64] */;
  (%156, %var_2859, %157, %158)
}

def @func_6551() -> (Tensor[(6, 8, 11), bool],) {
  %159 = @func_4534() /* ty=(Tensor[(6, 8, 11), bool],) */;
  %160 = %159.0;
  (%160,)
}

def @func_375(%var_346: uint16, %var_347: Tensor[(6, 12, 1), uint16], %var_353: Tensor[(13), float32]) -> (Tensor[(6, 12, 1), uint16], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(13, 1), float32]) {
  %161 = cast(%var_346, dtype="uint16") /* ty=uint16 */;
  %162 = cast(%var_347, dtype="uint16") /* ty=Tensor[(6, 12, 1), uint16] */;
  %163 = cast(%var_353, dtype="float32") /* ty=Tensor[(13), float32] */;
  %164 = reshape(%163, newshape=[13, 1]) /* ty=Tensor[(13, 1), float32] */;
  %165 = @func_68(%164) /* ty=(Tensor[(13, 1), float32],) */;
  %166 = %165.0;
  %167 = cast(%166, dtype="float32") /* ty=Tensor[(13, 1), float32] */;
  %168 = reshape(%167, newshape=[13, 1]) /* ty=Tensor[(13, 1), float32] */;
  %169 = @func_68(%168) /* ty=(Tensor[(13, 1), float32],) */;
  %170 = right_shift(%161, %162) /* ty=Tensor[(6, 12, 1), uint16] */;
  %171 = %169.0;
  (%170, %166, %var_353, %171)
}

def @func_1859() -> Tensor[(6, 8, 11), float64] {
  %172 = @func_1729() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %172.0
}

def @func_3967() -> (Tensor[(6, 8, 11), float64],) {
  %173 = @func_1502() /* ty=Tensor[(6, 8, 11), float64] */;
  (%173,)
}

def @func_5635() -> (Tensor[(15, 3, 9), uint16],) {
  %174 = @func_1666() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %175 = %174.0;
  (%175,)
}

def @func_7671() -> (Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), float64], Tensor[(405), float32]) {
  %176 = @func_6296() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), uint16]) */;
  %177 = cast(meta[relay.Constant][9] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %178 = reshape(%177, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %179 = @func_1097(%178) /* ty=(Tensor[(15, 3, 9), bool], Tensor[(15, 3, 9), float64]) */;
  %180 = %176.0;
  %181 = %179.1;
  (%180, %181, meta[relay.Constant][9] /* ty=Tensor[(405), float32] */)
}

def @func_3348(%var_3338: Tensor[(2, 44), bool], %var_3339: uint16) -> (Tensor[(6, 8, 11), float32], Tensor[(72), uint16], Tensor[(2, 44), bool], uint16, Tensor[(13), float32]) {
  %182 = @func_3119() /* ty=(Tensor[(6, 8, 11), float32],) */;
  %183 = cast(%var_3338, dtype="bool") /* ty=Tensor[(2, 44), bool] */;
  %184 = cast(%var_3338, dtype="bool") /* ty=Tensor[(2, 44), bool] */;
  %185 = cast(%var_3339, dtype="uint16") /* ty=uint16 */;
  %186 = cast(meta[relay.Constant][10] /* ty=Tensor[(13), float32] */, dtype="float32") /* ty=Tensor[(13), float32] */;
  %187 = reshape(%183, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), bool] */;
  %188 = reshape(%184, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), bool] */;
  %189 = reshape(%185, newshape=[]) /* ty=uint16 */;
  %190 = reshape(%186, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %191 = @func_530(%187, %188, %189, %190) /* ty=(Tensor[(11, 2, 4), bool], Tensor[(13), float32], uint16, Tensor[(72), uint16], Tensor[(13), float32], Tensor[(13, 1), float32]) */;
  %192 = %182.0;
  %193 = %191.3;
  (%192, %193, %var_3338, %var_3339, meta[relay.Constant][10] /* ty=Tensor[(13), float32] */)
}

def @func_6658() -> (Tensor[(1, 13), float32], Tensor[(15, 3, 9), uint16]) {
  %194 = @func_4818() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64], Tensor[(1, 13), float32], Tensor[(13, 1), float32]) */;
  %195 = @func_4198() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %196 = %194.2;
  %197 = %195.0;
  (%196, %197)
}

def @func_5756() -> Tensor[(11, 13, 8), uint8] {
  @func_4748() /* ty=Tensor[(11, 13, 8), uint8] */
}

def @func_5284(%var_5274: Tensor[(6, 8, 11), float64]) -> Tensor[(6, 8, 11), int32] {
  %198 = @func_5157() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %199 = %198.0;
  %200 = cast(%var_5274, dtype="int32") /* ty=Tensor[(6, 8, 11), int32] */;
  %201 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%199, dtype="int32") /* ty=Tensor[(6, 8, 11), int32] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%202, %203) /* ty=Tensor[(6, 8, 11), int32] */
}

def @func_4534() -> (Tensor[(6, 8, 11), bool],) {
  %204 = @func_1571() /* ty=Tensor[(6, 8, 11), bool] */;
  (%204,)
}

def @func_6861() -> Tensor[(15, 3, 9), uint16] {
  @func_1291() /* ty=Tensor[(15, 3, 9), uint16] */
}

def @func_1502() -> Tensor[(6, 8, 11), float64] {
  %205 = @func_1459() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) */;
  %205.2
}

def @func_3516() -> (Tensor[(6, 8, 11), bool],) {
  %206 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %207 = %206.1;
  (%207,)
}

def @func_1833(%var_1815: Tensor[(6, 8, 11), float64], %var_1826: Tensor[(1, 13), float32]) -> (Tensor[(6, 8, 11), bool], Tensor[(13, 1), float32], Tensor[(1, 13), float32]) {
  %208 = @func_1459() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) */;
  %209 = %208.2;
  %210 = cast(%var_1815, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%209, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %214 = cast(%var_1826, dtype="float32") /* ty=Tensor[(1, 13), float32] */;
  %215 = reshape(%214, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %216 = @func_946(%215) /* ty=(Tensor[(528), int32], Tensor[(13, 1), float32], Tensor[(13), float32]) */;
  %217 = logical_or(%212, %213) /* ty=Tensor[(6, 8, 11), bool] */;
  %218 = %216.1;
  (%217, %218, %var_1826)
}

def @func_3723(%var_3655: Tensor[(15, 3, 9), float32], %var_3708: Tensor[(1, 32), bool], %var_3711: Tensor[(528), bool]) -> (Tensor[(15, 3, 9), float32], Tensor[(405), float64], Tensor[(36, 2), float32], Tensor[(36, 2), float64], Tensor[(88), bool], Tensor[(1, 32), bool], Tensor[(4, 16), bool], Tensor[(702), uint16], Tensor[(528), bool], Tensor[(13), float32]) {
  %219 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
  %220 = %219.0;
  %221 = cast(%var_3655, dtype="int8") /* ty=Tensor[(15, 3, 9), int8] */;
  %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%220, dtype="int8") /* ty=Tensor[(15, 3, 9), int8] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %225 = bitwise_or(%223, %224) /* ty=Tensor[(15, 3, 9), int8] */;
  %226 = cast(%var_3655, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%225, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %230 = cast(meta[relay.Constant][11] /* ty=Tensor[(36, 2), uint16] */, dtype="uint16") /* ty=Tensor[(36, 2), uint16] */;
  %231 = cast(%225, dtype="float64") /* ty=Tensor[(15, 3, 9), float64] */;
  %232 = reshape(%230, newshape=[72]) /* ty=Tensor[(72), uint16] */;
  %233 = reshape(%231, newshape=[405]) /* ty=Tensor[(405), float64] */;
  %234 = @func_2987(%232, %233) /* ty=(Tensor[(13), float32], Tensor[(72), uint16], Tensor[(13), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float64], Tensor[(6, 8, 11), bool], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) */;
  %235 = cast(meta[relay.Constant][11] /* ty=Tensor[(36, 2), uint16] */, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %236 = cast(meta[relay.Constant][11] /* ty=Tensor[(36, 2), uint16] */, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
  %237 = sigmoid(%236) /* ty=Tensor[(36, 2), float64] */;
  %238 = cast(%237, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
  %239 = cast(%var_3708, dtype="bool") /* ty=Tensor[(1, 32), bool] */;
  %240 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 16), bool] */, dtype="bool") /* ty=Tensor[(4, 16), bool] */;
  %241 = cast(meta[relay.Constant][13] /* ty=Tensor[(702), uint16] */, dtype="uint16") /* ty=Tensor[(702), uint16] */;
  %242 = cast(%var_3711, dtype="bool") /* ty=Tensor[(528), bool] */;
  %243 = cast(%225, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %244 = cast(meta[relay.Constant][14] /* ty=Tensor[(13), float32] */, dtype="float32") /* ty=Tensor[(13), float32] */;
  %245 = reshape(%239, newshape=[4, 8, 1]) /* ty=Tensor[(4, 8, 1), bool] */;
  %246 = reshape(%240, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), bool] */;
  %247 = reshape(%241, newshape=[702]) /* ty=Tensor[(702), uint16] */;
  %248 = reshape(%242, newshape=[528]) /* ty=Tensor[(528), bool] */;
  %249 = reshape(%243, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %250 = reshape(%244, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %251 = @func_2284(%245, %246, %247, %248, %249, %250) /* ty=(Tensor[(4, 8, 2), bool], Tensor[(88), bool], Tensor[(702), uint16], Tensor[(528), bool], Tensor[(405), float32], Tensor[(13), float32], Tensor[(13, 1), float32], Tensor[(4, 8, 88), uint64], Tensor[(6, 8, 11), float64], Tensor[(4, 8, 1), float32]) */;
  %252 = maximum(%228, %229) /* ty=Tensor[(15, 3, 9), float32] */;
  %253 = %234.4;
  %254 = erf(%235) /* ty=Tensor[(36, 2), float32] */;
  %255 = sin(%238) /* ty=Tensor[(36, 2), float64] */;
  %256 = %251.1;
  (%252, %253, %254, %255, %256, %var_3708, meta[relay.Constant][12] /* ty=Tensor[(4, 16), bool] */, meta[relay.Constant][13] /* ty=Tensor[(702), uint16] */, %var_3711, meta[relay.Constant][14] /* ty=Tensor[(13), float32] */)
}

def @func_6776() -> (Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), float32]) {
  %257 = @func_6540() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %258 = @func_4534() /* ty=(Tensor[(6, 8, 11), bool],) */;
  %259 = %257.0;
  %260 = %258.0;
  %261 = @func_4517() /* ty=Tensor[(15, 3, 9), float32] */;
  (%259, %260, %261)
}

def @func_4748() -> Tensor[(11, 13, 8), uint8] {
  %262 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 13, 8), int64] */, dtype="int64") /* ty=Tensor[(1, 13, 8), int64] */;
  %263 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 13, 8), int64] */, dtype="int64") /* ty=Tensor[(11, 13, 8), int64] */;
  %264 = subtract(%262, %263) /* ty=Tensor[(11, 13, 8), int64] */;
  %265 = cast(%264, dtype="uint8") /* ty=Tensor[(11, 13, 8), uint8] */;
  %266 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(11, 13, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 13, 8), int64] */, dtype="uint8") /* ty=Tensor[(11, 13, 8), uint8] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  left_shift(%267, %268) /* ty=Tensor[(11, 13, 8), uint8] */
}

def @func_2165(%var_2153: Tensor[(405), float32]) -> (Tensor[(6, 8, 11), float64], uint16, Tensor[(825), float32], Tensor[(405), float32], Tensor[(15, 3, 9), bool]) {
  %269 = @func_1123() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %270 = cast(meta[relay.Constant][17] /* ty=Tensor[(825), float32] */, dtype="float32") /* ty=Tensor[(825), float32] */;
  %271 = cast(meta[relay.Constant][17] /* ty=Tensor[(825), float32] */, dtype="float32") /* ty=Tensor[(825), float32] */;
  %272 = cast(%var_2153, dtype="float32") /* ty=Tensor[(405), float32] */;
  %273 = reshape(%270, newshape=[5, 15, 11]) /* ty=Tensor[(5, 15, 11), float32] */;
  %274 = reshape(%271, newshape=[5, 15, 11]) /* ty=Tensor[(5, 15, 11), float32] */;
  %275 = reshape(%272, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %276 = @func_2037(%273, %274, %275) /* ty=(Tensor[(5, 15, 11), float32], Tensor[(6, 8, 11), float64], uint16, Tensor[(405), float32], Tensor[(15, 3, 9), float32]) */;
  %277 = cast(%var_2153, dtype="float32") /* ty=Tensor[(405), float32] */;
  %278 = reshape(%277, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %279 = @func_1097(%278) /* ty=(Tensor[(15, 3, 9), bool], Tensor[(15, 3, 9), float64]) */;
  %280 = %269.0;
  %281 = %276.2;
  %282 = %279.0;
  (%280, %281, meta[relay.Constant][17] /* ty=Tensor[(825), float32] */, %var_2153, %282)
}

def @func_5091(%var_5045: Tensor[(405), float64]) -> (Tensor[(72), uint16], Tensor[(72), uint16], Tensor[(405), float64], Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), int16], Tensor[(6, 8, 11), int8]) {
  %283 = cast(meta[relay.Constant][18] /* ty=Tensor[(72), uint16] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %284 = cast(%var_5045, dtype="float64") /* ty=Tensor[(405), float64] */;
  %285 = reshape(%283, newshape=[72]) /* ty=Tensor[(72), uint16] */;
  %286 = reshape(%284, newshape=[405]) /* ty=Tensor[(405), float64] */;
  %287 = @func_2987(%285, %286) /* ty=(Tensor[(13), float32], Tensor[(72), uint16], Tensor[(13), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float64], Tensor[(6, 8, 11), bool], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) */;
  %288 = @func_4633() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(6, 8, 11), float64]) */;
  %289 = %288.1;
  %290 = cast(%289, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
  %291 = sigmoid(%290) /* ty=Tensor[(6, 8, 11), float64] */;
  %292 = cast(%289, dtype="int16") /* ty=Tensor[(6, 8, 11), int16] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="int16") /* ty=Tensor[(6, 8, 11), int16] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %296 = cast(%291, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
  %297 = asin(%296) /* ty=Tensor[(6, 8, 11), float64] */;
  %298 = cast(%297, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
  %299 = atan(%298) /* ty=Tensor[(6, 8, 11), float64] */;
  %300 = cast(%297, dtype="int8") /* ty=Tensor[(6, 8, 11), int8] */;
  %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%299, dtype="int8") /* ty=Tensor[(6, 8, 11), int8] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %304 = %287.1;
  %305 = @func_3377() /* ty=Tensor[(15, 3, 9), uint16] */;
  %306 = bitwise_xor(%294, %295) /* ty=Tensor[(6, 8, 11), int16] */;
  %307 = left_shift(%302, %303) /* ty=Tensor[(6, 8, 11), int8] */;
  (%304, meta[relay.Constant][18] /* ty=Tensor[(72), uint16] */, %var_5045, %305, %306, %307)
}

def @func_1459() -> (Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) {
  %308 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %309 = %308.1;
  %310 = cast(%309, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
  %311 = log(%310) /* ty=Tensor[(6, 8, 11), float32] */;
  %312 = cast(%309, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%311, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %316 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
  %317 = cast(%309, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
  %318 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%311, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %321 = cast(%311, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
  %322 = cosh(%321) /* ty=Tensor[(6, 8, 11), float32] */;
  %323 = cast(%322, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
  %324 = asinh(%323) /* ty=Tensor[(6, 8, 11), float32] */;
  %325 = cast(%324, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
  %326 = log2(%325) /* ty=Tensor[(6, 8, 11), float32] */;
  %327 = cast(%322, dtype="uint8") /* ty=Tensor[(6, 8, 11), uint8] */;
  %328 = shape_of(%326, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%326, dtype="uint8") /* ty=Tensor[(6, 8, 11), uint8] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %331 = not_equal(%314, %315) /* ty=Tensor[(6, 8, 11), bool] */;
  %332 = %316.1;
  %333 = floor_mod(%319, %320) /* ty=Tensor[(6, 8, 11), float64] */;
  %334 = right_shift(%329, %330) /* ty=Tensor[(6, 8, 11), uint8] */;
  (%331, %332, %333, %334)
}

def @func_1218(%var_1157: Tensor[(1, 702), uint16], %var_1159: Tensor[(6, 8, 11), bool], %var_1173: Tensor[(405), float32], %var_1206: Tensor[(88), bool], %var_1207: Tensor[(13), float32]) -> (Tensor[(528), int32], Tensor[(9, 13, 6), bool], Tensor[(1, 702), uint16], Tensor[(6, 8, 11), uint16], Tensor[(6, 8, 11), float32], Tensor[(405), float32], Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), float32], Tensor[(13, 1), float32], Tensor[(88), bool], Tensor[(13), float32]) {
  %335 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %336 = cast(meta[relay.Constant][19] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %337 = cast(%var_1157, dtype="uint16") /* ty=Tensor[(1, 702), uint16] */;
  %338 = reshape(%336, newshape=[]) /* ty=uint16 */;
  %339 = reshape(%337, newshape=[9, 13, 6]) /* ty=Tensor[(9, 13, 6), uint16] */;
  %340 = @func_452(%338, %339) /* ty=(Tensor[(9, 13, 6), bool],) */;
  %341 = %335.2;
  %342 = cast(%341, dtype="int32") /* ty=Tensor[(528), int32] */;
  %343 = reshape(%342, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), int32] */;
  %344 = @func_606(%343) /* ty=Tensor[(6, 8, 11), bool] */;
  %345 = cast(%var_1159, dtype="uint16") /* ty=Tensor[(6, 8, 11), uint16] */;
  %346 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%344, dtype="uint16") /* ty=Tensor[(6, 8, 11), uint16] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %349 = cast(meta[relay.Constant][19] /* ty=uint16 */, dtype="float32") /* ty=float32 */;
  %350 = cast(%var_1159, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
  %351 = @func_1123() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %352 = cast(%var_1173, dtype="float32") /* ty=Tensor[(405), float32] */;
  %353 = reshape(%352, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %354 = @func_743(%353) /* ty=(Tensor[(15, 3, 9), float32], uint16, Tensor[(88), bool], uint16, Tensor[(13), float32], Tensor[(15, 3, 9), uint16]) */;
  %355 = %354.0;
  %356 = cast(%355, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %357 = cast(%var_1206, dtype="bool") /* ty=Tensor[(88), bool] */;
  %358 = cast(%var_1206, dtype="bool") /* ty=Tensor[(88), bool] */;
  %359 = cast(meta[relay.Constant][19] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %360 = cast(%var_1207, dtype="float32") /* ty=Tensor[(13), float32] */;
  %361 = reshape(%357, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), bool] */;
  %362 = reshape(%358, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), bool] */;
  %363 = reshape(%359, newshape=[]) /* ty=uint16 */;
  %364 = reshape(%360, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %365 = @func_530(%361, %362, %363, %364) /* ty=(Tensor[(11, 2, 4), bool], Tensor[(13), float32], uint16, Tensor[(72), uint16], Tensor[(13), float32], Tensor[(13, 1), float32]) */;
  %366 = %340.0;
  %367 = minimum(%347, %348) /* ty=Tensor[(6, 8, 11), uint16] */;
  %368 = divide(%349, %350) /* ty=Tensor[(6, 8, 11), float32] */;
  %369 = %351.0;
  %370 = acos(%356) /* ty=Tensor[(15, 3, 9), float32] */;
  %371 = %365.5;
  (%341, %366, %var_1157, %367, %368, %var_1173, %369, %370, %371, %var_1206, %var_1207)
}

def @func_2284(%var_2233: Tensor[(4, 8, 1), bool], %var_2234: Tensor[(4, 8, 2), bool], %var_2244: Tensor[(702), uint16], %var_2245: Tensor[(528), bool], %var_2246: Tensor[(405), float32], %var_2248: Tensor[(13), float32]) -> (Tensor[(4, 8, 2), bool], Tensor[(88), bool], Tensor[(702), uint16], Tensor[(528), bool], Tensor[(405), float32], Tensor[(13), float32], Tensor[(13, 1), float32], Tensor[(4, 8, 88), uint64], Tensor[(6, 8, 11), float64], Tensor[(4, 8, 1), float32]) {
  %372 = cast(%var_2233, dtype="bool") /* ty=Tensor[(4, 8, 1), bool] */;
  %373 = cast(%var_2234, dtype="bool") /* ty=Tensor[(4, 8, 2), bool] */;
  %374 = cast(%var_2244, dtype="uint16") /* ty=Tensor[(702), uint16] */;
  %375 = cast(%var_2245, dtype="bool") /* ty=Tensor[(528), bool] */;
  %376 = cast(%var_2246, dtype="float32") /* ty=Tensor[(405), float32] */;
  %377 = cast(meta[relay.Constant][20] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %378 = cast(%var_2248, dtype="float32") /* ty=Tensor[(13), float32] */;
  %379 = reshape(%374, newshape=[1, 702]) /* ty=Tensor[(1, 702), uint16] */;
  %380 = reshape(%375, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), bool] */;
  %381 = reshape(%376, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %382 = reshape(%377, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %383 = reshape(%378, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %384 = @func_1218(%379, %380, %381, %382, %383) /* ty=(Tensor[(528), int32], Tensor[(9, 13, 6), bool], Tensor[(1, 702), uint16], Tensor[(6, 8, 11), uint16], Tensor[(6, 8, 11), float32], Tensor[(405), float32], Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), float32], Tensor[(13, 1), float32], Tensor[(88), bool], Tensor[(13), float32]) */;
  %385 = cast(%var_2245, dtype="float64") /* ty=Tensor[(528), float64] */;
  %386 = cast(%var_2248, dtype="float32") /* ty=Tensor[(13), float32] */;
  %387 = reshape(%385, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), float64] */;
  %388 = reshape(%386, newshape=[1, 13]) /* ty=Tensor[(1, 13), float32] */;
  %389 = @func_1833(%387, %388) /* ty=(Tensor[(6, 8, 11), bool], Tensor[(13, 1), float32], Tensor[(1, 13), float32]) */;
  %390 = cast(%var_2233, dtype="uint64") /* ty=Tensor[(4, 8, 1), uint64] */;
  %391 = cast(meta[relay.Constant][20] /* ty=Tensor[(88), bool] */, dtype="uint64") /* ty=Tensor[(88), uint64] */;
  %392 = @func_2123() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %393 = cast(%var_2233, dtype="float32") /* ty=Tensor[(4, 8, 1), float32] */;
  %394 = logical_and(%372, %373) /* ty=Tensor[(4, 8, 2), bool] */;
  %395 = %384.9;
  %396 = %389.1;
  %397 = left_shift(%390, %391) /* ty=Tensor[(4, 8, 88), uint64] */;
  %398 = %392.0;
  %399 = sigmoid(%393) /* ty=Tensor[(4, 8, 1), float32] */;
  (%394, %395, %var_2244, %var_2245, %var_2246, %var_2248, %396, %397, %398, %399)
}

def @func_1729() -> (Tensor[(6, 8, 11), float64],) {
  %400 = @func_1717() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %401 = %400.0;
  (%401,)
}

def @func_7310() -> (Tensor[(15, 3, 9), float32], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) {
  %402 = @func_4387() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %403 = @func_6142() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) */;
  %404 = @func_3316() /* ty=Tensor[(15, 3, 9), float32] */;
  %405 = %402.0;
  %406 = %403.0;
  (%404, %405, %406)
}

def @func_6037() -> (Tensor[(13, 16, 4), bool], Tensor[(13), float32], Tensor[(72), uint16], Tensor[(45, 9), float64], Tensor[(6, 8, 11), float32], Tensor[(88), bool], uint16, Tensor[(3, 18), float32]) {
  %407 = @func_3597() /* ty=(Tensor[(13, 16, 4), bool],) */;
  %408 = cast(meta[relay.Constant][21] /* ty=Tensor[(72), uint16] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %409 = cast(meta[relay.Constant][22] /* ty=Tensor[(45, 9), float64] */, dtype="float64") /* ty=Tensor[(45, 9), float64] */;
  %410 = reshape(%408, newshape=[72]) /* ty=Tensor[(72), uint16] */;
  %411 = reshape(%409, newshape=[405]) /* ty=Tensor[(405), float64] */;
  %412 = @func_2987(%410, %411) /* ty=(Tensor[(13), float32], Tensor[(72), uint16], Tensor[(13), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float64], Tensor[(6, 8, 11), bool], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) */;
  %413 = cast(meta[relay.Constant][23] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %414 = cast(meta[relay.Constant][24] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %415 = reshape(%413, newshape=[2, 44]) /* ty=Tensor[(2, 44), bool] */;
  %416 = reshape(%414, newshape=[]) /* ty=uint16 */;
  %417 = @func_3348(%415, %416) /* ty=(Tensor[(6, 8, 11), float32], Tensor[(72), uint16], Tensor[(2, 44), bool], uint16, Tensor[(13), float32]) */;
  %418 = @func_4419() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 3, 3), float32], Tensor[(3, 18), float32]) */;
  %419 = %407.0;
  %420 = %412.0;
  %421 = %417.0;
  %422 = %418.2;
  (%419, %420, meta[relay.Constant][21] /* ty=Tensor[(72), uint16] */, meta[relay.Constant][22] /* ty=Tensor[(45, 9), float64] */, %421, meta[relay.Constant][23] /* ty=Tensor[(88), bool] */, meta[relay.Constant][24] /* ty=uint16 */, %422)
}

def @func_2419() -> (Tensor[(15, 3, 9), uint16],) {
  %423 = @func_1291() /* ty=Tensor[(15, 3, 9), uint16] */;
  (%423,)
}

def @func_6316(%var_6311: Tensor[(6, 8, 11), bool]) -> Tensor[(6, 8, 11), int32] {
  %424 = @func_1717() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %425 = %424.1;
  %426 = cast(%var_6311, dtype="int32") /* ty=Tensor[(6, 8, 11), int32] */;
  %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%425, dtype="int32") /* ty=Tensor[(6, 8, 11), int32] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  subtract(%428, %429) /* ty=Tensor[(6, 8, 11), int32] */
}

def @func_7150(%var_7141: Tensor[(15, 3, 9), uint16]) -> Tensor[(15, 3, 9), bool] {
  %430 = @func_2419() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %431 = %430.0;
  %432 = cast(%var_7141, dtype="bool") /* ty=Tensor[(15, 3, 9), bool] */;
  %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%431, dtype="bool") /* ty=Tensor[(15, 3, 9), bool] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%434, %435) /* ty=Tensor[(15, 3, 9), bool] */
}

def @func_7514(%var_7507: Tensor[(88), bool]) -> (Tensor[(15, 3, 9), uint16], uint16, Tensor[(88), bool], uint16) {
  %436 = @func_2364() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %437 = cast(%var_7507, dtype="bool") /* ty=Tensor[(88), bool] */;
  %438 = cast(meta[relay.Constant][25] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %439 = reshape(%437, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %440 = reshape(%438, newshape=[]) /* ty=uint16 */;
  %441 = @func_3419(%439, %440) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(13), float32], Tensor[(88), bool], uint16) */;
  %442 = %436.0;
  %443 = %441.3;
  (%442, %443, %var_7507, meta[relay.Constant][25] /* ty=uint16 */)
}

def @func_6540() -> (Tensor[(15, 3, 9), uint16],) {
  %444 = @func_2419() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %445 = %444.0;
  (%445,)
}

def @func_4818() -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64], Tensor[(1, 13), float32], Tensor[(13, 1), float32]) {
  %446 = @func_1729() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %447 = %446.0;
  %448 = cast(%447, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
  %449 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 1), float32] */;
  %450 = reshape(%448, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), float64] */;
  %451 = reshape(%449, newshape=[1, 13]) /* ty=Tensor[(1, 13), float32] */;
  %452 = @func_1833(%450, %451) /* ty=(Tensor[(6, 8, 11), bool], Tensor[(13, 1), float32], Tensor[(1, 13), float32]) */;
  %453 = @func_4464() /* ty=Tensor[(6, 8, 11), float64] */;
  %454 = %452.2;
  (%453, %447, %454, meta[relay.Constant][26] /* ty=Tensor[(13, 1), float32] */)
}

def @func_1796(%var_1785: Tensor[(96), uint8]) -> (Tensor[(15, 3, 9), uint16], Tensor[(3, 8, 4), bool], Tensor[(96), uint8], Tensor[(6, 8, 11), float64]) {
  %455 = @func_1666() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %456 = cast(%var_1785, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %457 = reshape(%456, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint8] */;
  %458 = @func_1042(%457) /* ty=(Tensor[(3, 8, 4), bool], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(6, 8, 11), bool]) */;
  %459 = @func_1729() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %460 = %455.0;
  %461 = %458.0;
  %462 = %459.0;
  (%460, %461, %var_1785, %462)
}

def @func_4854() -> Tensor[(15, 3, 9), uint16] {
  %463 = @func_1666() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %463.0
}

def @func_1377() -> (Tensor[(6, 8, 11), bool], Tensor[(96), uint8], Tensor[(6, 8, 11), float32]) {
  %464 = cast(meta[relay.Constant][27] /* ty=Tensor[(96), uint8] */, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %465 = reshape(%464, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint8] */;
  %466 = @func_1042(%465) /* ty=(Tensor[(3, 8, 4), bool], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(6, 8, 11), bool]) */;
  %467 = @func_1123() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %468 = %467.0;
  %469 = cast(%468, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
  %470 = %466.3;
  %471 = sin(%469) /* ty=Tensor[(6, 8, 11), float32] */;
  (%470, meta[relay.Constant][27] /* ty=Tensor[(96), uint8] */, %471)
}

def @func_3951() -> (Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), uint16]) {
  %472 = @func_2419() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %473 = @func_1291() /* ty=Tensor[(15, 3, 9), uint16] */;
  %474 = %472.0;
  (%473, %474)
}

def @func_7340(%var_7331: Tensor[(6, 8, 11), float32]) -> Tensor[(6, 8, 11), bool] {
  %475 = @func_2777() /* ty=(Tensor[(15, 3, 9), float64], Tensor[(6, 8, 11), float32]) */;
  %476 = %475.1;
  %477 = cast(%var_7331, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%476, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%479, %480) /* ty=Tensor[(6, 8, 11), bool] */
}

def @func_4901() -> (Tensor[(6, 8, 11), float64],) {
  %481 = @func_1123() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %482 = %481.0;
  (%482,)
}

def @func_2575(%var_2556: Tensor[(72), uint16], %var_2557: Tensor[(13), float32]) -> (Tensor[(528), int32], Tensor[(13), float32], uint16, Tensor[(13), float32], Tensor[(6, 8, 11), bool], Tensor[(72), float64], Tensor[(13, 1), float32]) {
  %483 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %484 = cast(meta[relay.Constant][28] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %485 = cast(%var_2556, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %486 = cast(%var_2557, dtype="float32") /* ty=Tensor[(13), float32] */;
  %487 = reshape(%484, newshape=[]) /* ty=uint16 */;
  %488 = reshape(%485, newshape=[6, 12, 1]) /* ty=Tensor[(6, 12, 1), uint16] */;
  %489 = reshape(%486, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %490 = @func_375(%487, %488, %489) /* ty=(Tensor[(6, 12, 1), uint16], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(13, 1), float32]) */;
  %491 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %492 = cast(%var_2556, dtype="float64") /* ty=Tensor[(72), float64] */;
  %493 = %490.2;
  %494 = cast(%493, dtype="float32") /* ty=Tensor[(13), float32] */;
  %495 = reshape(%494, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %496 = @func_946(%495) /* ty=(Tensor[(528), int32], Tensor[(13, 1), float32], Tensor[(13), float32]) */;
  %497 = %483.2;
  %498 = %491.1;
  %499 = log10(%492) /* ty=Tensor[(72), float64] */;
  %500 = %496.1;
  (%497, %493, meta[relay.Constant][28] /* ty=uint16 */, %var_2557, %498, %499, %500)
}

def @func_4165() -> (Tensor[(15, 3, 9), uint16],) {
  %501 = @func_1666() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %502 = %501.0;
  (%502,)
}

def @func_6142() -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) {
  %503 = @func_1459() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) */;
  %504 = @func_4464() /* ty=Tensor[(6, 8, 11), float64] */;
  %505 = %503.3;
  (%504, %505)
}

def @func_530(%var_513: Tensor[(11, 2, 4), bool], %var_514: Tensor[(11, 2, 4), bool], %var_521: uint16, %var_523: Tensor[(13), float32]) -> (Tensor[(11, 2, 4), bool], Tensor[(13), float32], uint16, Tensor[(72), uint16], Tensor[(13), float32], Tensor[(13, 1), float32]) {
  %506 = cast(%var_514, dtype="bool") /* ty=Tensor[(11, 2, 4), bool] */;
  %507 = shape_of(%var_513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%var_513, dtype="bool") /* ty=Tensor[(11, 2, 4), bool] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %510 = cast(%var_521, dtype="uint16") /* ty=uint16 */;
  %511 = cast(meta[relay.Constant][29] /* ty=Tensor[(72), uint16] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %512 = cast(%var_523, dtype="float32") /* ty=Tensor[(13), float32] */;
  %513 = reshape(%510, newshape=[]) /* ty=uint16 */;
  %514 = reshape(%511, newshape=[6, 12, 1]) /* ty=Tensor[(6, 12, 1), uint16] */;
  %515 = reshape(%512, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %516 = @func_375(%513, %514, %515) /* ty=(Tensor[(6, 12, 1), uint16], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(13, 1), float32]) */;
  %517 = cast(%var_523, dtype="float32") /* ty=Tensor[(13), float32] */;
  %518 = reshape(%517, newshape=[13, 1]) /* ty=Tensor[(13, 1), float32] */;
  %519 = @func_68(%518) /* ty=(Tensor[(13, 1), float32],) */;
  %520 = logical_and(%508, %509) /* ty=Tensor[(11, 2, 4), bool] */;
  %521 = %516.2;
  %522 = %519.0;
  (%520, %521, %var_521, meta[relay.Constant][29] /* ty=Tensor[(72), uint16] */, %var_523, %522)
}

def @func_4981() -> (Tensor[(6, 8, 11), float32],) {
  %523 = @func_4901() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %524 = %523.0;
  %525 = cast(%524, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
  %526 = atanh(%525) /* ty=Tensor[(6, 8, 11), float32] */;
  (%526,)
}

def @func_743(%var_693: Tensor[(15, 3, 9), float32]) -> (Tensor[(15, 3, 9), float32], uint16, Tensor[(88), bool], uint16, Tensor[(13), float32], Tensor[(15, 3, 9), uint16]) {
  %527 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
  %528 = %527.0;
  %529 = cast(%var_693, dtype="int16") /* ty=Tensor[(15, 3, 9), int16] */;
  %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%528, dtype="int16") /* ty=Tensor[(15, 3, 9), int16] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %533 = subtract(%531, %532) /* ty=Tensor[(15, 3, 9), int16] */;
  %534 = cast(%533, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %535 = cast(meta[relay.Constant][30] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %536 = cast(meta[relay.Constant][30] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %537 = cast(meta[relay.Constant][31] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %538 = cast(meta[relay.Constant][32] /* ty=Tensor[(13), float32] */, dtype="float32") /* ty=Tensor[(13), float32] */;
  %539 = reshape(%535, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), bool] */;
  %540 = reshape(%536, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), bool] */;
  %541 = reshape(%537, newshape=[]) /* ty=uint16 */;
  %542 = reshape(%538, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %543 = @func_530(%539, %540, %541, %542) /* ty=(Tensor[(11, 2, 4), bool], Tensor[(13), float32], uint16, Tensor[(72), uint16], Tensor[(13), float32], Tensor[(13, 1), float32]) */;
  %544 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
  %545 = asinh(%534) /* ty=Tensor[(15, 3, 9), float32] */;
  %546 = %543.2;
  %547 = %544.1;
  (%545, %546, meta[relay.Constant][30] /* ty=Tensor[(88), bool] */, meta[relay.Constant][31] /* ty=uint16 */, meta[relay.Constant][32] /* ty=Tensor[(13), float32] */, %547)
}

def @func_4633() -> (Tensor[(15, 3, 9), float32], Tensor[(6, 8, 11), float64]) {
  %548 = @func_3316() /* ty=Tensor[(15, 3, 9), float32] */;
  %549 = @func_4464() /* ty=Tensor[(6, 8, 11), float64] */;
  (%548, %549)
}

def @func_6296() -> (Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), uint16]) {
  %550 = @func_3808() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %551 = @func_6132() /* ty=(Tensor[(13, 1), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float32]) */;
  %552 = %550.0;
  %553 = %551.1;
  (%552, %553)
}

def @func_5244() -> (Tensor[(6, 8, 11), float32],) {
  %554 = @func_2777() /* ty=(Tensor[(15, 3, 9), float64], Tensor[(6, 8, 11), float32]) */;
  %555 = %554.1;
  (%555,)
}

def @func_3419(%var_3413: Tensor[(88), bool], %var_3414: uint16) -> (Tensor[(15, 3, 9), uint16], Tensor[(13), float32], Tensor[(88), bool], uint16) {
  %556 = @func_2419() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %557 = cast(%var_3413, dtype="bool") /* ty=Tensor[(88), bool] */;
  %558 = cast(%var_3414, dtype="uint16") /* ty=uint16 */;
  %559 = reshape(%557, newshape=[2, 44]) /* ty=Tensor[(2, 44), bool] */;
  %560 = reshape(%558, newshape=[]) /* ty=uint16 */;
  %561 = @func_3348(%559, %560) /* ty=(Tensor[(6, 8, 11), float32], Tensor[(72), uint16], Tensor[(2, 44), bool], uint16, Tensor[(13), float32]) */;
  %562 = %556.0;
  %563 = %561.4;
  (%562, %563, %var_3413, %var_3414)
}

def @func_946(%var_941: Tensor[(13), float32]) -> (Tensor[(528), int32], Tensor[(13, 1), float32], Tensor[(13), float32]) {
  %564 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %565 = cast(%var_941, dtype="float32") /* ty=Tensor[(13), float32] */;
  %566 = reshape(%565, newshape=[13, 1]) /* ty=Tensor[(13, 1), float32] */;
  %567 = @func_68(%566) /* ty=(Tensor[(13, 1), float32],) */;
  %568 = %564.2;
  %569 = %567.0;
  (%568, %569, %var_941)
}

def @func_5953() -> (Tensor[(4, 16, 15), float64],) {
  %570 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(4, 16, 15), float64] */;
  %571 = log10(%570) /* ty=Tensor[(4, 16, 15), float64] */;
  (%571,)
}

def @func_5157() -> (Tensor[(6, 8, 11), float64],) {
  %572 = @func_1859() /* ty=Tensor[(6, 8, 11), float64] */;
  (%572,)
}

def @func_2451() -> Tensor[(6, 8, 11), float32] {
  %573 = @func_1377() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(96), uint8], Tensor[(6, 8, 11), float32]) */;
  %573.2
}

def @func_5477(%var_5453: Tensor[(15, 3, 9), uint16]) -> (Tensor[(15, 3, 9), bool], Tensor[(15, 3, 9), bool], Tensor[(528), int32], Tensor[(15, 3, 9), float32]) {
  %574 = @func_3377() /* ty=Tensor[(15, 3, 9), uint16] */;
  %575 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 3, 9), uint16] */, dtype="bool") /* ty=Tensor[(15, 3, 9), bool] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%574, dtype="bool") /* ty=Tensor[(15, 3, 9), bool] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %579 = cast(%var_5453, dtype="bool") /* ty=Tensor[(15, 3, 9), bool] */;
  %580 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%574, dtype="bool") /* ty=Tensor[(15, 3, 9), bool] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %583 = less(%577, %578) /* ty=Tensor[(15, 3, 9), bool] */;
  %584 = cast(%583, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %585 = reshape(%584, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %586 = @func_4335(%585) /* ty=(Tensor[(6, 8, 11), float64], Tensor[(528), int32], Tensor[(405), float32], Tensor[(6, 8, 11), float64], Tensor[(528), int32], Tensor[(6, 8, 11), float32]) */;
  %587 = cast(%574, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %588 = logical_or(%581, %582) /* ty=Tensor[(15, 3, 9), bool] */;
  %589 = %586.1;
  %590 = atanh(%587) /* ty=Tensor[(15, 3, 9), float32] */;
  (%583, %588, %589, %590)
}

def @func_3480() -> (Tensor[(6, 8, 11), float64], Tensor[(825), float32], Tensor[(405), float32]) {
  %591 = cast(meta[relay.Constant][35] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %592 = reshape(%591, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %593 = @func_2165(%592) /* ty=(Tensor[(6, 8, 11), float64], uint16, Tensor[(825), float32], Tensor[(405), float32], Tensor[(15, 3, 9), bool]) */;
  %594 = @func_1502() /* ty=Tensor[(6, 8, 11), float64] */;
  %595 = %593.2;
  (%594, %595, meta[relay.Constant][35] /* ty=Tensor[(405), float32] */)
}

def @func_3808() -> (Tensor[(6, 8, 11), float64],) {
  %596 = @func_1502() /* ty=Tensor[(6, 8, 11), float64] */;
  (%596,)
}

def @func_7420() -> Tensor[(11, 13, 8), uint8] {
  @func_5756() /* ty=Tensor[(11, 13, 8), uint8] */
}

def @func_452(%var_438: uint16, %var_439: Tensor[(9, 13, 6), uint16]) -> (Tensor[(9, 13, 6), bool],) {
  %597 = cast(%var_438, dtype="bool") /* ty=bool */;
  %598 = cast(%var_439, dtype="bool") /* ty=Tensor[(9, 13, 6), bool] */;
  %599 = less_equal(%597, %598) /* ty=Tensor[(9, 13, 6), bool] */;
  (%599,)
}

def @func_5378(%var_5362: Tensor[(6, 8, 11), float64]) -> Tensor[(6, 8, 11), uint32] {
  %600 = @func_4633() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(6, 8, 11), float64]) */;
  %601 = %600.1;
  %602 = cast(%var_5362, dtype="uint32") /* ty=Tensor[(6, 8, 11), uint32] */;
  %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%601, dtype="uint32") /* ty=Tensor[(6, 8, 11), uint32] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%604, %605) /* ty=Tensor[(6, 8, 11), uint32] */
}

def @func_3597() -> (Tensor[(13, 16, 4), bool],) {
  %606 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 16, 4), int8] */, dtype="bool") /* ty=Tensor[(13, 16, 4), bool] */;
  %607 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(13, 16, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 16, 4), int8] */, dtype="bool") /* ty=Tensor[(13, 16, 4), bool] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %610 = greater_equal(%608, %609) /* ty=Tensor[(13, 16, 4), bool] */;
  (%610,)
}

def @func_6584() -> Tensor[(6, 8, 11), bool] {
  @func_1571() /* ty=Tensor[(6, 8, 11), bool] */
}

def @func_2123() -> (Tensor[(6, 8, 11), float64],) {
  %611 = @func_988() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %612 = %611.0;
  (%612,)
}

def @func_4517() -> Tensor[(15, 3, 9), float32] {
  @func_3316() /* ty=Tensor[(15, 3, 9), float32] */
}

def @func_2987(%var_2924: Tensor[(72), uint16], %var_2945: Tensor[(405), float64]) -> (Tensor[(13), float32], Tensor[(72), uint16], Tensor[(13), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float64], Tensor[(6, 8, 11), bool], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) {
  %613 = cast(%var_2924, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %614 = cast(meta[relay.Constant][38] /* ty=Tensor[(13), float32] */, dtype="float32") /* ty=Tensor[(13), float32] */;
  %615 = reshape(%613, newshape=[72]) /* ty=Tensor[(72), uint16] */;
  %616 = reshape(%614, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %617 = @func_2575(%615, %616) /* ty=(Tensor[(528), int32], Tensor[(13), float32], uint16, Tensor[(13), float32], Tensor[(6, 8, 11), bool], Tensor[(72), float64], Tensor[(13, 1), float32]) */;
  %618 = cast(%var_2945, dtype="float64") /* ty=Tensor[(405), float64] */;
  %619 = reshape(%618, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float64] */;
  %620 = @func_2224(%619) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), uint64]) */;
  %621 = @func_1571() /* ty=Tensor[(6, 8, 11), bool] */;
  %622 = @func_1859() /* ty=Tensor[(6, 8, 11), float64] */;
  %623 = cast(%622, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %624 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%621, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %627 = @func_2123() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %628 = @func_1717() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %629 = %617.1;
  %630 = %620.0;
  %631 = less_equal(%625, %626) /* ty=Tensor[(6, 8, 11), bool] */;
  %632 = %627.0;
  %633 = %628.0;
  (%629, %var_2924, meta[relay.Constant][38] /* ty=Tensor[(13), float32] */, %630, %var_2945, %631, %632, %633)
}

def @func_2037(%var_2002: Tensor[(5, 15, 11), float32], %var_2003: Tensor[(5, 15, 11), float32], %var_2019: Tensor[(405), float32]) -> (Tensor[(5, 15, 11), float32], Tensor[(6, 8, 11), float64], uint16, Tensor[(405), float32], Tensor[(15, 3, 9), float32]) {
  %634 = cast(%var_2003, dtype="float32") /* ty=Tensor[(5, 15, 11), float32] */;
  %635 = shape_of(%var_2002, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%var_2002, dtype="float32") /* ty=Tensor[(5, 15, 11), float32] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %638 = @func_1123() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %639 = cast(%var_2019, dtype="float32") /* ty=Tensor[(405), float32] */;
  %640 = reshape(%639, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %641 = @func_743(%640) /* ty=(Tensor[(15, 3, 9), float32], uint16, Tensor[(88), bool], uint16, Tensor[(13), float32], Tensor[(15, 3, 9), uint16]) */;
  %642 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
  %643 = maximum(%636, %637) /* ty=Tensor[(5, 15, 11), float32] */;
  %644 = %638.0;
  %645 = %641.3;
  %646 = %642.0;
  (%643, %644, %645, %var_2019, %646)
}

def @func_1632(%var_1612: Tensor[(96), uint8]) -> (Tensor[(96), float32],) {
  %647 = @func_1377() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(96), uint8], Tensor[(6, 8, 11), float32]) */;
  %648 = %647.1;
  %649 = cast(%var_1612, dtype="float32") /* ty=Tensor[(96), float32] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(1), int32] */;
  %651 = cast(%648, dtype="float32") /* ty=Tensor[(96), float32] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?), float32] */;
  %653 = floor_divide(%651, %652) /* ty=Tensor[(96), float32] */;
  (%653,)
}

def @func_7224() -> (Tensor[(15, 3, 9), uint16],) {
  %654 = @func_3951() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), uint16]) */;
  %655 = %654.1;
  (%655,)
}

def @func_6507() -> (Tensor[(6, 8, 11), bool], Tensor[(11, 13, 8), uint8]) {
  %656 = @func_1571() /* ty=Tensor[(6, 8, 11), bool] */;
  %657 = @func_4748() /* ty=Tensor[(11, 13, 8), uint8] */;
  (%656, %657)
}

def @main(%var_8040: Tensor[(7, 10, 12), float32]) -> (Tensor[(7, 10, 12), float32],) {
  %658 = cast(meta[relay.Constant][39] /* ty=Tensor[(7, 10, 12), float32] */, dtype="float32") /* ty=Tensor[(7, 10, 12), float32] */;
  %659 = shape_of(%var_8040, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%var_8040, dtype="float32") /* ty=Tensor[(7, 10, 12), float32] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %662 = divide(%660, %661) /* ty=Tensor[(7, 10, 12), float32] */;
  (%662,)
}

def @func_7205() -> (Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), uint16]) {
  %663 = @func_5430() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %664 = @func_6964() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(13), float32], Tensor[(88), bool], uint16) */;
  %665 = %663.0;
  %666 = %664.0;
  (%665, %666)
}

def @func_6978() -> (Tensor[(6, 8, 11), bool], Tensor[(13, 1), float32], Tensor[(1, 13), float32]) {
  %667 = @func_4534() /* ty=(Tensor[(6, 8, 11), bool],) */;
  %668 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 13), float32] */, dtype="float32") /* ty=Tensor[(1, 13), float32] */;
  %669 = reshape(%668, newshape=[13, 1]) /* ty=Tensor[(13, 1), float32] */;
  %670 = @func_68(%669) /* ty=(Tensor[(13, 1), float32],) */;
  %671 = %667.0;
  %672 = %670.0;
  (%671, %672, meta[relay.Constant][40] /* ty=Tensor[(1, 13), float32] */)
}

def @func_2541(%var_2534: Tensor[(6, 8, 11), bool]) -> (Tensor[(15, 3, 9), uint16], Tensor[(528), int32], Tensor[(6, 8, 11), float64], Tensor[(96), float32], Tensor[(4, 24), uint8], Tensor[(825), float64], Tensor[(6, 8, 11), uint64]) {
  %673 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %674 = @func_988() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %675 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 24), uint8] */, dtype="uint8") /* ty=Tensor[(4, 24), uint8] */;
  %676 = reshape(%675, newshape=[96]) /* ty=Tensor[(96), uint8] */;
  %677 = @func_1900(%676) /* ty=(Tensor[(6, 8, 11), float64], Tensor[(96), float32], Tensor[(96), float32]) */;
  %678 = @func_1291() /* ty=Tensor[(15, 3, 9), uint16] */;
  %679 = cast(%678, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %680 = reshape(%679, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %681 = @func_2165(%680) /* ty=(Tensor[(6, 8, 11), float64], uint16, Tensor[(825), float32], Tensor[(405), float32], Tensor[(15, 3, 9), bool]) */;
  %682 = %681.2;
  %683 = cast(%682, dtype="float64") /* ty=Tensor[(825), float64] */;
  %684 = sigmoid(%683) /* ty=Tensor[(825), float64] */;
  %685 = cast(%684, dtype="float64") /* ty=Tensor[(825), float64] */;
  %686 = @func_1377() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(96), uint8], Tensor[(6, 8, 11), float32]) */;
  %687 = %686.0;
  %688 = cast(%var_2534, dtype="uint64") /* ty=Tensor[(6, 8, 11), uint64] */;
  %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%687, dtype="uint64") /* ty=Tensor[(6, 8, 11), uint64] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %692 = %673.2;
  %693 = %674.0;
  %694 = %677.1;
  %695 = acos(%685) /* ty=Tensor[(825), float64] */;
  %696 = bitwise_or(%690, %691) /* ty=Tensor[(6, 8, 11), uint64] */;
  (%678, %692, %693, %694, meta[relay.Constant][41] /* ty=Tensor[(4, 24), uint8] */, %695, %696)
}

def @func_5892() -> (Tensor[(6, 8, 11), float32], Tensor[(13, 16, 4), bool], Tensor[(6, 8, 11), float64]) {
  %697 = @func_3119() /* ty=(Tensor[(6, 8, 11), float32],) */;
  %698 = @func_3597() /* ty=(Tensor[(13, 16, 4), bool],) */;
  %699 = @func_5590() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) */;
  %700 = %697.0;
  %701 = %698.0;
  %702 = %699.0;
  (%700, %701, %702)
}

def @func_4198() -> (Tensor[(15, 3, 9), uint16],) {
  %703 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
  %704 = %703.1;
  (%704,)
}

def @func_6367() -> (Tensor[(88), bool],) {
  %705 = @func_6037() /* ty=(Tensor[(13, 16, 4), bool], Tensor[(13), float32], Tensor[(72), uint16], Tensor[(45, 9), float64], Tensor[(6, 8, 11), float32], Tensor[(88), bool], uint16, Tensor[(3, 18), float32]) */;
  %706 = %705.5;
  (%706,)
}

def @func_1291() -> Tensor[(15, 3, 9), uint16] {
  %707 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
  %707.1
}

def @func_2618(%var_2598: Tensor[(6, 3, 3), float32]) -> Tensor[(6, 3, 3), float32] {
  %708 = cast(%var_2598, dtype="float32") /* ty=Tensor[(6, 3, 3), float32] */;
  %709 = sigmoid(%708) /* ty=Tensor[(6, 3, 3), float32] */;
  %710 = cast(%709, dtype="float32") /* ty=Tensor[(6, 3, 3), float32] */;
  rsqrt(%710) /* ty=Tensor[(6, 3, 3), float32] */
}

def @func_4464() -> Tensor[(6, 8, 11), float64] {
  %711 = @func_3967() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %711.0
}

def @func_3631(%var_3626: Tensor[(13, 16, 4), bool]) -> (Tensor[(13, 16, 4), uint64],) {
  %712 = @func_3597() /* ty=(Tensor[(13, 16, 4), bool],) */;
  %713 = %712.0;
  %714 = cast(%var_3626, dtype="uint64") /* ty=Tensor[(13, 16, 4), uint64] */;
  %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%713, dtype="uint64") /* ty=Tensor[(13, 16, 4), uint64] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %718 = subtract(%716, %717) /* ty=Tensor[(13, 16, 4), uint64] */;
  (%718,)
}

def @func_7996() -> (Tensor[(13, 16, 4), bool], Tensor[(6, 8, 11), float64]) {
  %719 = @func_5892() /* ty=(Tensor[(6, 8, 11), float32], Tensor[(13, 16, 4), bool], Tensor[(6, 8, 11), float64]) */;
  %720 = @func_5892() /* ty=(Tensor[(6, 8, 11), float32], Tensor[(13, 16, 4), bool], Tensor[(6, 8, 11), float64]) */;
  %721 = %719.1;
  %722 = %720.2;
  (%721, %722)
}

def @func_7386(%var_7354: Tensor[(6, 8, 11), float64], %var_7360: Tensor[(210), float64]) -> (Tensor[(6, 8, 11), int8], Tensor[(6, 7, 5), float64], Tensor[(210), float64], Tensor[(6, 8, 11), bool], Tensor[(11, 13, 3), bool], Tensor[(429, 1), float64], Tensor[(45, 9), float64]) {
  %723 = @func_5157() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %724 = %723.0;
  %725 = cast(%var_7354, dtype="int8") /* ty=Tensor[(6, 8, 11), int8] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%724, dtype="int8") /* ty=Tensor[(6, 8, 11), int8] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %729 = cast(%var_7360, dtype="float64") /* ty=Tensor[(210), float64] */;
  %730 = reshape(%729, newshape=[6, 7, 5]) /* ty=Tensor[(6, 7, 5), float64] */;
  %731 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %732 = cast(meta[relay.Constant][42] /* ty=Tensor[(429, 1), float64] */, dtype="float64") /* ty=Tensor[(429, 1), float64] */;
  %733 = reshape(%732, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), float64] */;
  %734 = @func_6037() /* ty=(Tensor[(13, 16, 4), bool], Tensor[(13), float32], Tensor[(72), uint16], Tensor[(45, 9), float64], Tensor[(6, 8, 11), float32], Tensor[(88), bool], uint16, Tensor[(3, 18), float32]) */;
  %735 = multiply(%727, %728) /* ty=Tensor[(6, 8, 11), int8] */;
  %736 = @func_7071(%730) /* ty=Tensor[(6, 7, 5), float64] */;
  %737 = %731.1;
  %738 = @func_5732(%733) /* ty=Tensor[(11, 13, 3), bool] */;
  %739 = %734.3;
  (%735, %736, %var_7360, %737, %738, meta[relay.Constant][42] /* ty=Tensor[(429, 1), float64] */, %739)
}

def @func_6831() -> (Tensor[(6, 8, 11), float32], Tensor[(15, 3, 9), float32]) {
  %740 = @func_4981() /* ty=(Tensor[(6, 8, 11), float32],) */;
  %741 = %740.0;
  %742 = @func_3316() /* ty=Tensor[(15, 3, 9), float32] */;
  (%741, %742)
}

def @func_1717() -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) {
  %743 = @func_988() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %744 = @func_1502() /* ty=Tensor[(6, 8, 11), float64] */;
  %745 = %743.1;
  (%744, %745)
}

def @func_2777() -> (Tensor[(15, 3, 9), float64], Tensor[(6, 8, 11), float32]) {
  %746 = @func_1291() /* ty=Tensor[(15, 3, 9), uint16] */;
  %747 = cast(%746, dtype="float64") /* ty=Tensor[(15, 3, 9), float64] */;
  %748 = log(%747) /* ty=Tensor[(15, 3, 9), float64] */;
  %749 = cast(%748, dtype="float64") /* ty=Tensor[(15, 3, 9), float64] */;
  %750 = @func_1923() /* ty=(Tensor[(6, 8, 11), float32],) */;
  %751 = sigmoid(%749) /* ty=Tensor[(15, 3, 9), float64] */;
  %752 = %750.0;
  (%751, %752)
}

def @func_1337(%var_1319: Tensor[(15, 3, 9), float32]) -> (Tensor[(15, 3, 9), uint16], Tensor[(528), int32]) {
  %753 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
  %754 = %753.0;
  %755 = cast(%var_1319, dtype="uint16") /* ty=Tensor[(15, 3, 9), uint16] */;
  %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%754, dtype="uint16") /* ty=Tensor[(15, 3, 9), uint16] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %759 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %760 = right_shift(%757, %758) /* ty=Tensor[(15, 3, 9), uint16] */;
  %761 = %759.2;
  (%760, %761)
}

def @func_6472(%var_6451: Tensor[(7, 9, 11), float64]) -> (Tensor[(528), int32], Tensor[(405, 1), float32], Tensor[(7, 9, 11), float32]) {
  %762 = cast(meta[relay.Constant][43] /* ty=Tensor[(405, 1), float32] */, dtype="float32") /* ty=Tensor[(405, 1), float32] */;
  %763 = reshape(%762, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %764 = @func_1337(%763) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(528), int32]) */;
  %765 = cast(%var_6451, dtype="float64") /* ty=Tensor[(7, 9, 11), float64] */;
  %766 = sqrt(%765) /* ty=Tensor[(7, 9, 11), float64] */;
  %767 = cast(%766, dtype="float32") /* ty=Tensor[(7, 9, 11), float32] */;
  %768 = %764.1;
  %769 = cosh(%767) /* ty=Tensor[(7, 9, 11), float32] */;
  (%768, meta[relay.Constant][43] /* ty=Tensor[(405, 1), float32] */, %769)
}

def @func_6422() -> Tensor[(15, 3, 9), uint16] {
  %770 = @func_4165() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %770.0
}

def @func_7001(%var_6986: uint8, %var_6987: Tensor[(1, 13), uint8]) -> (Tensor[(1, 13), uint8], Tensor[(6, 8, 11), float32]) {
  %771 = cast(%var_6986, dtype="uint8") /* ty=uint8 */;
  %772 = cast(%var_6987, dtype="uint8") /* ty=Tensor[(1, 13), uint8] */;
  %773 = @func_1923() /* ty=(Tensor[(6, 8, 11), float32],) */;
  %774 = add(%771, %772) /* ty=Tensor[(1, 13), uint8] */;
  %775 = %773.0;
  (%774, %775)
}

def @func_6222(%var_6145: Tensor[(1, 7), int16], %var_6146: Tensor[(3, 7), int16]) -> (Tensor[(3, 7), bool], Tensor[(6, 8, 11), float64], Tensor[(3, 8, 4), float64], Tensor[(15, 16), float32], Tensor[(240), float32]) {
  %776 = cast(%var_6145, dtype="bool") /* ty=Tensor[(1, 7), bool] */;
  %777 = cast(%var_6146, dtype="bool") /* ty=Tensor[(3, 7), bool] */;
  %778 = cast(meta[relay.Constant][44] /* ty=Tensor[(96), uint8] */, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %779 = reshape(%778, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint8] */;
  %780 = @func_1042(%779) /* ty=(Tensor[(3, 8, 4), bool], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(6, 8, 11), bool]) */;
  %781 = %780.0;
  %782 = cast(meta[relay.Constant][44] /* ty=Tensor[(96), uint8] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(%781, dtype="float64") /* ty=Tensor[(3, 8, 4), float64] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %786 = cast(meta[relay.Constant][45] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %787 = cast(meta[relay.Constant][45] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %788 = reshape(%786, newshape=[15, 16]) /* ty=Tensor[(15, 16), float32] */;
  %789 = reshape(%787, newshape=[15, 16]) /* ty=Tensor[(15, 16), float32] */;
  %790 = @func_3236(%788, %789) /* ty=(Tensor[(15, 16), float32],) */;
  %791 = greater_equal(%776, %777) /* ty=Tensor[(3, 7), bool] */;
  %792 = @func_1859() /* ty=Tensor[(6, 8, 11), float64] */;
  %793 = multiply(%784, %785) /* ty=Tensor[(3, 8, 4), float64] */;
  %794 = %790.0;
  (%791, %792, %793, %794, meta[relay.Constant][45] /* ty=Tensor[(240), float32] */)
}

def @func_6964() -> (Tensor[(15, 3, 9), uint16], Tensor[(13), float32], Tensor[(88), bool], uint16) {
  %795 = @func_4165() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %796 = cast(meta[relay.Constant][46] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %797 = cast(meta[relay.Constant][47] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %798 = reshape(%796, newshape=[2, 44]) /* ty=Tensor[(2, 44), bool] */;
  %799 = reshape(%797, newshape=[]) /* ty=uint16 */;
  %800 = @func_3348(%798, %799) /* ty=(Tensor[(6, 8, 11), float32], Tensor[(72), uint16], Tensor[(2, 44), bool], uint16, Tensor[(13), float32]) */;
  %801 = %795.0;
  %802 = %800.4;
  (%801, %802, meta[relay.Constant][46] /* ty=Tensor[(88), bool] */, meta[relay.Constant][47] /* ty=uint16 */)
}

def @func_4080(%var_4040: Tensor[(13), float32], %var_4078: Tensor[(702), uint16]) -> (Tensor[(15, 3, 9), float64], Tensor[(1, 13), float32], Tensor[(528), float64], Tensor[(13), float32], Tensor[(702), uint16], Tensor[(702), uint16]) {
  %803 = @func_2777() /* ty=(Tensor[(15, 3, 9), float64], Tensor[(6, 8, 11), float32]) */;
  %804 = cast(meta[relay.Constant][48] /* ty=Tensor[(528), float64] */, dtype="float64") /* ty=Tensor[(528), float64] */;
  %805 = cast(%var_4040, dtype="float32") /* ty=Tensor[(13), float32] */;
  %806 = reshape(%804, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), float64] */;
  %807 = reshape(%805, newshape=[1, 13]) /* ty=Tensor[(1, 13), float32] */;
  %808 = @func_1833(%806, %807) /* ty=(Tensor[(6, 8, 11), bool], Tensor[(13, 1), float32], Tensor[(1, 13), float32]) */;
  %809 = cast(%var_4078, dtype="uint16") /* ty=Tensor[(702), uint16] */;
  %810 = cast(%var_4040, dtype="float32") /* ty=Tensor[(13), float32] */;
  %811 = reshape(%809, newshape=[702]) /* ty=Tensor[(702), uint16] */;
  %812 = reshape(%810, newshape=[1, 13]) /* ty=Tensor[(1, 13), float32] */;
  %813 = @func_3825(%811, %812) /* ty=(Tensor[(6, 8, 11), bool], Tensor[(6, 8, 11), float32], Tensor[(702), uint16], Tensor[(405), float32], Tensor[(88, 1), bool], Tensor[(1, 13), float32], Tensor[(15, 3, 9), uint16]) */;
  %814 = %803.0;
  %815 = %808.2;
  %816 = %813.2;
  (%814, %815, meta[relay.Constant][48] /* ty=Tensor[(528), float64] */, %var_4040, %816, %var_4078)
}

def @func_5164() -> Tensor[(6, 8, 11), bool] {
  %817 = @func_4534() /* ty=(Tensor[(6, 8, 11), bool],) */;
  %817.0
}

def @func_1666() -> (Tensor[(15, 3, 9), uint16],) {
  %818 = @func_1291() /* ty=Tensor[(15, 3, 9), uint16] */;
  (%818,)
}

def @func_6132() -> (Tensor[(13, 1), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float32]) {
  %819 = @func_4818() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64], Tensor[(1, 13), float32], Tensor[(13, 1), float32]) */;
  %820 = cast(meta[relay.Constant][49] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %821 = reshape(%820, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %822 = @func_1337(%821) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(528), int32]) */;
  %823 = %819.3;
  %824 = %822.0;
  (%823, %824, meta[relay.Constant][49] /* ty=Tensor[(405), float32] */)
}

def @func_8017() -> (Tensor[(6, 8, 11), bool],) {
  %825 = @func_5164() /* ty=Tensor[(6, 8, 11), bool] */;
  (%825,)
}

def @func_4335(%var_4270: Tensor[(405), float32]) -> (Tensor[(6, 8, 11), float64], Tensor[(528), int32], Tensor[(405), float32], Tensor[(6, 8, 11), float64], Tensor[(528), int32], Tensor[(6, 8, 11), float32]) {
  %826 = @func_2123() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %827 = cast(%var_4270, dtype="float32") /* ty=Tensor[(405), float32] */;
  %828 = reshape(%827, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %829 = @func_1337(%828) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(528), int32]) */;
  %830 = @func_1729() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %831 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %832 = %826.0;
  %833 = %829.1;
  %834 = %830.0;
  %835 = %831.2;
  %836 = @func_2451() /* ty=Tensor[(6, 8, 11), float32] */;
  (%832, %833, %var_4270, %834, %835, %836)
}

def @func_7071(%var_7033: Tensor[(6, 7, 5), float64]) -> Tensor[(6, 7, 5), float64] {
  %837 = cast(meta[relay.Constant][50] /* ty=Tensor[(6, 7, 5), float64] */, dtype="float64") /* ty=Tensor[(6, 7, 5), float64] */;
  %838 = shape_of(%var_7033, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(%var_7033, dtype="float64") /* ty=Tensor[(6, 7, 5), float64] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%839, %840) /* ty=Tensor[(6, 7, 5), float64] */
}

def @func_3236(%var_3231: Tensor[(15, 16), float32], %var_3232: Tensor[(15, 16), float32]) -> (Tensor[(15, 16), float32],) {
  %841 = cast(%var_3232, dtype="float32") /* ty=Tensor[(15, 16), float32] */;
  %842 = shape_of(%var_3231, dtype="int32") /* ty=Tensor[(2), int32] */;
  %843 = cast(%var_3231, dtype="float32") /* ty=Tensor[(15, 16), float32] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %845 = floor_divide(%843, %844) /* ty=Tensor[(15, 16), float32] */;
  (%845,)
}

def @func_3559(%var_3520: Tensor[(9, 3, 16), int16], %var_3530: Tensor[(702), uint16], %var_3532: Tensor[(405), float32]) -> (Tensor[(9, 3, 16), int16], Tensor[(88), bool], Tensor[(32), bool], Tensor[(64), bool], Tensor[(702), uint16], Tensor[(528), bool], Tensor[(405), float32], Tensor[(13), float32], Tensor[(6, 8, 11), bool]) {
  %846 = cast(meta[relay.Constant][51] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %847 = cast(%var_3520, dtype="int16") /* ty=Tensor[(9, 3, 16), int16] */;
  %848 = cast(meta[relay.Constant][52] /* ty=Tensor[(32), bool] */, dtype="bool") /* ty=Tensor[(32), bool] */;
  %849 = cast(meta[relay.Constant][53] /* ty=Tensor[(64), bool] */, dtype="bool") /* ty=Tensor[(64), bool] */;
  %850 = cast(%var_3530, dtype="uint16") /* ty=Tensor[(702), uint16] */;
  %851 = cast(meta[relay.Constant][54] /* ty=Tensor[(528), bool] */, dtype="bool") /* ty=Tensor[(528), bool] */;
  %852 = cast(%var_3532, dtype="float32") /* ty=Tensor[(405), float32] */;
  %853 = cast(meta[relay.Constant][55] /* ty=Tensor[(13), float32] */, dtype="float32") /* ty=Tensor[(13), float32] */;
  %854 = reshape(%848, newshape=[4, 8, 1]) /* ty=Tensor[(4, 8, 1), bool] */;
  %855 = reshape(%849, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), bool] */;
  %856 = reshape(%850, newshape=[702]) /* ty=Tensor[(702), uint16] */;
  %857 = reshape(%851, newshape=[528]) /* ty=Tensor[(528), bool] */;
  %858 = reshape(%852, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %859 = reshape(%853, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %860 = @func_2284(%854, %855, %856, %857, %858, %859) /* ty=(Tensor[(4, 8, 2), bool], Tensor[(88), bool], Tensor[(702), uint16], Tensor[(528), bool], Tensor[(405), float32], Tensor[(13), float32], Tensor[(13, 1), float32], Tensor[(4, 8, 88), uint64], Tensor[(6, 8, 11), float64], Tensor[(4, 8, 1), float32]) */;
  %861 = @func_1717() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %862 = maximum(%846, %847) /* ty=Tensor[(9, 3, 16), int16] */;
  %863 = %860.1;
  %864 = %861.1;
  (%862, %863, meta[relay.Constant][52] /* ty=Tensor[(32), bool] */, meta[relay.Constant][53] /* ty=Tensor[(64), bool] */, %var_3530, meta[relay.Constant][54] /* ty=Tensor[(528), bool] */, %var_3532, meta[relay.Constant][55] /* ty=Tensor[(13), float32] */, %864)
}

def @func_6072(%var_6043: Tensor[(4, 14, 5), bool], %var_6066: Tensor[(1, 13), float32]) -> (Tensor[(4, 14, 5), float64], Tensor[(4, 14, 5), float64], Tensor[(528), float64], Tensor[(1, 13), float32], Tensor[(702), uint16]) {
  %865 = cast(%var_6043, dtype="float64") /* ty=Tensor[(4, 14, 5), float64] */;
  %866 = cast(meta[relay.Constant][56] /* ty=Tensor[(4, 14, 5), bool] */, dtype="bool") /* ty=Tensor[(4, 14, 5), bool] */;
  %867 = shape_of(%var_6043, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(%var_6043, dtype="bool") /* ty=Tensor[(4, 14, 5), bool] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %870 = logical_and(%868, %869) /* ty=Tensor[(4, 14, 5), bool] */;
  %871 = cast(%870, dtype="float64") /* ty=Tensor[(4, 14, 5), float64] */;
  %872 = cast(%var_6066, dtype="float32") /* ty=Tensor[(1, 13), float32] */;
  %873 = cast(meta[relay.Constant][57] /* ty=Tensor[(702), uint16] */, dtype="uint16") /* ty=Tensor[(702), uint16] */;
  %874 = reshape(%872, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %875 = reshape(%873, newshape=[702]) /* ty=Tensor[(702), uint16] */;
  %876 = @func_4080(%874, %875) /* ty=(Tensor[(15, 3, 9), float64], Tensor[(1, 13), float32], Tensor[(528), float64], Tensor[(13), float32], Tensor[(702), uint16], Tensor[(702), uint16]) */;
  %877 = sin(%865) /* ty=Tensor[(4, 14, 5), float64] */;
  %878 = log10(%871) /* ty=Tensor[(4, 14, 5), float64] */;
  %879 = %876.2;
  (%877, %878, %879, %var_6066, meta[relay.Constant][57] /* ty=Tensor[(702), uint16] */)
}

def @func_3316() -> Tensor[(15, 3, 9), float32] {
  %880 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
  %880.0
}

def @func_7123(%var_7109: Tensor[(16, 11, 8), bool], %var_7110: Tensor[(16, 11, 8), bool]) -> (Tensor[(16, 11, 8), bool],) {
  %881 = cast(%var_7110, dtype="bool") /* ty=Tensor[(16, 11, 8), bool] */;
  %882 = shape_of(%var_7109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %883 = cast(%var_7109, dtype="bool") /* ty=Tensor[(16, 11, 8), bool] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %885 = logical_and(%883, %884) /* ty=Tensor[(16, 11, 8), bool] */;
  %886 = cast(%var_7109, dtype="bool") /* ty=Tensor[(16, 11, 8), bool] */;
  %887 = shape_of(%885, dtype="int32") /* ty=Tensor[(3), int32] */;
  %888 = cast(%885, dtype="bool") /* ty=Tensor[(16, 11, 8), bool] */;
  %889 = dyn.reshape(%886, %887, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %890 = logical_or(%888, %889) /* ty=Tensor[(16, 11, 8), bool] */;
  (%890,)
}

def @func_5334(%var_5301: uint16) -> (Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), float32], uint16, Tensor[(22, 4), bool], uint16) {
  %891 = @func_3516() /* ty=(Tensor[(6, 8, 11), bool],) */;
  %892 = cast(meta[relay.Constant][58] /* ty=Tensor[(22, 4), bool] */, dtype="bool") /* ty=Tensor[(22, 4), bool] */;
  %893 = cast(%var_5301, dtype="uint16") /* ty=uint16 */;
  %894 = reshape(%892, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %895 = reshape(%893, newshape=[]) /* ty=uint16 */;
  %896 = @func_3419(%894, %895) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(13), float32], Tensor[(88), bool], uint16) */;
  %897 = %891.0;
  %898 = @func_4517() /* ty=Tensor[(15, 3, 9), float32] */;
  %899 = %896.3;
  (%897, %898, %899, meta[relay.Constant][58] /* ty=Tensor[(22, 4), bool] */, %var_5301)
}

def @func_7865(%var_7799: Tensor[(6, 9, 10), int8], %var_7834: Tensor[(3, 24), uint16], %var_7835: Tensor[(13), float32]) -> (Tensor[(15, 3, 9), uint16], Tensor[(6, 9, 10), bool], Tensor[(13, 1), float32], Tensor[(3, 24), uint16], Tensor[(13), float32], Tensor[(6, 9, 10), uint16], Tensor[(6, 8, 11), int32], Tensor[(24, 22), bool]) {
  %900 = @func_2364() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %901 = cast(meta[relay.Constant][59] /* ty=Tensor[(6, 1, 10), int8] */, dtype="int8") /* ty=Tensor[(6, 1, 10), int8] */;
  %902 = cast(%var_7799, dtype="int8") /* ty=Tensor[(6, 9, 10), int8] */;
  %903 = left_shift(%901, %902) /* ty=Tensor[(6, 9, 10), int8] */;
  %904 = cast(%903, dtype="float32") /* ty=Tensor[(6, 9, 10), float32] */;
  %905 = log(%904) /* ty=Tensor[(6, 9, 10), float32] */;
  %906 = cast(%903, dtype="bool") /* ty=Tensor[(6, 9, 10), bool] */;
  %907 = shape_of(%905, dtype="int32") /* ty=Tensor[(3), int32] */;
  %908 = cast(%905, dtype="bool") /* ty=Tensor[(6, 9, 10), bool] */;
  %909 = dyn.reshape(%906, %907, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %910 = cast(%var_7834, dtype="uint16") /* ty=Tensor[(3, 24), uint16] */;
  %911 = cast(%var_7835, dtype="float32") /* ty=Tensor[(13), float32] */;
  %912 = reshape(%910, newshape=[72]) /* ty=Tensor[(72), uint16] */;
  %913 = reshape(%911, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %914 = @func_2575(%912, %913) /* ty=(Tensor[(528), int32], Tensor[(13), float32], uint16, Tensor[(13), float32], Tensor[(6, 8, 11), bool], Tensor[(72), float64], Tensor[(13, 1), float32]) */;
  %915 = cast(%903, dtype="uint16") /* ty=Tensor[(6, 9, 10), uint16] */;
  %916 = shape_of(%905, dtype="int32") /* ty=Tensor[(3), int32] */;
  %917 = cast(%905, dtype="uint16") /* ty=Tensor[(6, 9, 10), uint16] */;
  %918 = dyn.reshape(%915, %916, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %919 = cast(meta[relay.Constant][60] /* ty=Tensor[(24, 22), bool] */, dtype="bool") /* ty=Tensor[(24, 22), bool] */;
  %920 = reshape(%919, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), bool] */;
  %921 = %900.0;
  %922 = less_equal(%908, %909) /* ty=Tensor[(6, 9, 10), bool] */;
  %923 = %914.6;
  %924 = add(%917, %918) /* ty=Tensor[(6, 9, 10), uint16] */;
  %925 = @func_6316(%920) /* ty=Tensor[(6, 8, 11), int32] */;
  (%921, %922, %923, %var_7834, %var_7835, %924, %925, meta[relay.Constant][60] /* ty=Tensor[(24, 22), bool] */)
}

def @func_4387() -> (Tensor[(6, 8, 11), float64],) {
  %926 = @func_3119() /* ty=(Tensor[(6, 8, 11), float32],) */;
  %927 = %926.0;
  %928 = cast(%927, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
  %929 = sqrt(%928) /* ty=Tensor[(6, 8, 11), float64] */;
  (%929,)
}

def @func_1923() -> (Tensor[(6, 8, 11), float32],) {
  %930 = @func_1717() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %931 = %930.1;
  %932 = cast(%931, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
  %933 = rsqrt(%932) /* ty=Tensor[(6, 8, 11), float32] */;
  (%933,)
}

def @func_2329(%var_2319: Tensor[(4, 6, 8), int16]) -> (Tensor[(4, 6, 8), float32],) {
  %934 = cast(meta[relay.Constant][61] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %935 = cast(%var_2319, dtype="int16") /* ty=Tensor[(4, 6, 8), int16] */;
  %936 = bitwise_or(%934, %935) /* ty=Tensor[(4, 6, 8), int16] */;
  %937 = cast(%936, dtype="float32") /* ty=Tensor[(4, 6, 8), float32] */;
  %938 = cosh(%937) /* ty=Tensor[(4, 6, 8), float32] */;
  (%938,)
}

def @func_813() -> (Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) {
  %939 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
  %940 = cast(meta[relay.Constant][62] /* ty=Tensor[(528), int32] */, dtype="int32") /* ty=Tensor[(528), int32] */;
  %941 = reshape(%940, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), int32] */;
  %942 = %939.1;
  %943 = @func_606(%941) /* ty=Tensor[(6, 8, 11), bool] */;
  (%942, %943, meta[relay.Constant][62] /* ty=Tensor[(528), int32] */)
}

def @func_3377() -> Tensor[(15, 3, 9), uint16] {
  %944 = @func_2419() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %944.0
}

def @func_7632(%var_7621: Tensor[(405, 1), float32]) -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64], Tensor[(825), float32], Tensor[(405, 1), float32], Tensor[(6, 8, 11), float64]) {
  %945 = @func_3967() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %946 = cast(meta[relay.Constant][63] /* ty=Tensor[(825), float32] */, dtype="float32") /* ty=Tensor[(825), float32] */;
  %947 = cast(meta[relay.Constant][63] /* ty=Tensor[(825), float32] */, dtype="float32") /* ty=Tensor[(825), float32] */;
  %948 = cast(%var_7621, dtype="float32") /* ty=Tensor[(405, 1), float32] */;
  %949 = reshape(%946, newshape=[5, 15, 11]) /* ty=Tensor[(5, 15, 11), float32] */;
  %950 = reshape(%947, newshape=[5, 15, 11]) /* ty=Tensor[(5, 15, 11), float32] */;
  %951 = reshape(%948, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %952 = @func_2037(%949, %950, %951) /* ty=(Tensor[(5, 15, 11), float32], Tensor[(6, 8, 11), float64], uint16, Tensor[(405), float32], Tensor[(15, 3, 9), float32]) */;
  %953 = @func_5157() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %954 = %945.0;
  %955 = %952.1;
  %956 = %953.0;
  (%954, %955, meta[relay.Constant][63] /* ty=Tensor[(825), float32] */, %var_7621, %956)
}

def @func_4419() -> (Tensor[(15, 3, 9), uint16], Tensor[(6, 3, 3), float32], Tensor[(3, 18), float32]) {
  %957 = @func_4198() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %958 = cast(meta[relay.Constant][64] /* ty=Tensor[(3, 18), float32] */, dtype="float32") /* ty=Tensor[(3, 18), float32] */;
  %959 = reshape(%958, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
  %960 = %957.0;
  %961 = @func_2618(%959) /* ty=Tensor[(6, 3, 3), float32] */;
  (%960, %961, meta[relay.Constant][64] /* ty=Tensor[(3, 18), float32] */)
}

def @func_6895() -> (Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), float64]) {
  %962 = @func_2419() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %963 = @func_1459() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) */;
  %964 = %962.0;
  %965 = %963.2;
  (%964, %965)
}

def @func_1123() -> (Tensor[(6, 8, 11), float64],) {
  %966 = @func_988() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %967 = %966.0;
  (%967,)
}

def @func_606(%var_591: Tensor[(6, 8, 11), int32]) -> Tensor[(6, 8, 11), bool] {
  %968 = cast(meta[relay.Constant][65] /* ty=Tensor[(6, 1, 11), int32] */, dtype="bool") /* ty=Tensor[(6, 1, 11), bool] */;
  %969 = cast(%var_591, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %970 = less(%968, %969) /* ty=Tensor[(6, 8, 11), bool] */;
  %971 = cast(meta[relay.Constant][65] /* ty=Tensor[(6, 1, 11), int32] */, dtype="bool") /* ty=Tensor[(6, 1, 11), bool] */;
  %972 = cast(%970, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  logical_and(%971, %972) /* ty=Tensor[(6, 8, 11), bool] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_746(%var_744: Tensor[(15, 3, 9), float32]) -> (Tensor[(15, 3, 9), float32], uint16, Tensor[(88), bool], uint16, Tensor[(13), float32], Tensor[(15, 3, 9), uint16]) {
  @func_743(%var_744) /* ty=(Tensor[(15, 3, 9), float32], uint16, Tensor[(88), bool], uint16, Tensor[(13), float32], Tensor[(15, 3, 9), uint16]) */
}

def @func_3564(%var_3561: Tensor[(9, 3, 16), int16], %var_3562: Tensor[(702), uint16], %var_3563: Tensor[(405), float32]) -> (Tensor[(9, 3, 16), int16], Tensor[(88), bool], Tensor[(32), bool], Tensor[(64), bool], Tensor[(702), uint16], Tensor[(528), bool], Tensor[(405), float32], Tensor[(13), float32], Tensor[(6, 8, 11), bool]) {
  @func_3559(%var_3561, %var_3562, %var_3563) /* ty=(Tensor[(9, 3, 16), int16], Tensor[(88), bool], Tensor[(32), bool], Tensor[(64), bool], Tensor[(702), uint16], Tensor[(528), bool], Tensor[(405), float32], Tensor[(13), float32], Tensor[(6, 8, 11), bool]) */
}

def @func_379(%var_376: uint16, %var_377: Tensor[(6, 12, 1), uint16], %var_378: Tensor[(13), float32]) -> (Tensor[(6, 12, 1), uint16], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(13, 1), float32]) {
  %11 = fn (%var_346: uint16, %var_347: Tensor[(6, 12, 1), uint16], %var_353: Tensor[(13), float32]) -> (Tensor[(6, 12, 1), uint16], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(13, 1), float32]) {
    %0 = cast(%var_346, dtype="uint16") /* ty=uint16 */;
    %1 = cast(%var_347, dtype="uint16") /* ty=Tensor[(6, 12, 1), uint16] */;
    %2 = cast(%var_353, dtype="float32") /* ty=Tensor[(13), float32] */;
    %3 = reshape(%2, newshape=[13, 1]) /* ty=Tensor[(13, 1), float32] */;
    %4 = @func_68(%3) /* ty=(Tensor[(13, 1), float32],) */;
    %5 = %4.0;
    %6 = cast(%5, dtype="float32") /* ty=Tensor[(13, 1), float32] */;
    %7 = reshape(%6, newshape=[13, 1]) /* ty=Tensor[(13, 1), float32] */;
    %8 = @func_68(%7) /* ty=(Tensor[(13, 1), float32],) */;
    %9 = right_shift(%0, %1) /* ty=Tensor[(6, 12, 1), uint16] */;
    %10 = %8.0;
    (%9, %5, %var_353, %10)
  };
  %11(%var_376, %var_377, %var_378) /* ty=(Tensor[(6, 12, 1), uint16], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(13, 1), float32]) */
}

def @func_2890(%var_2888: Tensor[(13), float32], %var_2889: Tensor[(15, 3, 9), uint16]) -> (Tensor[(528), int32], Tensor[(13), float32], Tensor[(15, 3, 9), float64], Tensor[(15, 3, 9), float64]) {
  @func_2886(%var_2888, %var_2889) /* ty=(Tensor[(528), int32], Tensor[(13), float32], Tensor[(15, 3, 9), float64], Tensor[(15, 3, 9), float64]) */
}

def @func_6965() -> (Tensor[(15, 3, 9), uint16], Tensor[(13), float32], Tensor[(88), bool], uint16) {
  %20 = fn () -> (Tensor[(15, 3, 9), uint16], Tensor[(13), float32], Tensor[(88), bool], uint16) {
    %12 = @func_4165() /* ty=(Tensor[(15, 3, 9), uint16],) */;
    %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
    %14 = cast(meta[relay.Constant][1] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %15 = reshape(%13, newshape=[2, 44]) /* ty=Tensor[(2, 44), bool] */;
    %16 = reshape(%14, newshape=[]) /* ty=uint16 */;
    %17 = @func_3348(%15, %16) /* ty=(Tensor[(6, 8, 11), float32], Tensor[(72), uint16], Tensor[(2, 44), bool], uint16, Tensor[(13), float32]) */;
    %18 = %12.0;
    %19 = %17.4;
    (%18, %19, meta[relay.Constant][0] /* ty=Tensor[(88), bool] */, meta[relay.Constant][1] /* ty=uint16 */)
  };
  %20() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(13), float32], Tensor[(88), bool], uint16) */
}

def @func_7421() -> Tensor[(11, 13, 8), uint8] {
  %21 = fn () -> Tensor[(11, 13, 8), uint8] {
    @func_5756() /* ty=Tensor[(11, 13, 8), uint8] */
  };
  %21() /* ty=Tensor[(11, 13, 8), uint8] */
}

def @func_3240(%var_3238: Tensor[(15, 16), float32], %var_3239: Tensor[(15, 16), float32]) -> (Tensor[(15, 16), float32],) {
  @func_3236(%var_3238, %var_3239) /* ty=(Tensor[(15, 16), float32],) */
}

def @func_7516(%var_7515: Tensor[(88), bool]) -> (Tensor[(15, 3, 9), uint16], uint16, Tensor[(88), bool], uint16) {
  %30 = fn (%var_7507: Tensor[(88), bool]) -> (Tensor[(15, 3, 9), uint16], uint16, Tensor[(88), bool], uint16) {
    %22 = @func_2364() /* ty=(Tensor[(15, 3, 9), uint16],) */;
    %23 = cast(%var_7507, dtype="bool") /* ty=Tensor[(88), bool] */;
    %24 = cast(meta[relay.Constant][2] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %25 = reshape(%23, newshape=[88]) /* ty=Tensor[(88), bool] */;
    %26 = reshape(%24, newshape=[]) /* ty=uint16 */;
    %27 = @func_3419(%25, %26) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(13), float32], Tensor[(88), bool], uint16) */;
    %28 = %22.0;
    %29 = %27.3;
    (%28, %29, %var_7507, meta[relay.Constant][2] /* ty=uint16 */)
  };
  %30(%var_7515) /* ty=(Tensor[(15, 3, 9), uint16], uint16, Tensor[(88), bool], uint16) */
}

def @func_3518() -> (Tensor[(6, 8, 11), bool],) {
  @func_3516() /* ty=(Tensor[(6, 8, 11), bool],) */
}

def @func_4465() -> Tensor[(6, 8, 11), float64] {
  %32 = fn () -> Tensor[(6, 8, 11), float64] {
    %31 = @func_3967() /* ty=(Tensor[(6, 8, 11), float64],) */;
    %31.0
  };
  %32() /* ty=Tensor[(6, 8, 11), float64] */
}

def @func_1837(%var_1835: Tensor[(6, 8, 11), float64], %var_1836: Tensor[(1, 13), float32]) -> (Tensor[(6, 8, 11), bool], Tensor[(13, 1), float32], Tensor[(1, 13), float32]) {
  @func_1833(%var_1835, %var_1836) /* ty=(Tensor[(6, 8, 11), bool], Tensor[(13, 1), float32], Tensor[(1, 13), float32]) */
}

def @func_7936(%var_7934: Tensor[(405), float32], %var_7935: Tensor[(1, 88), bool]) -> (Tensor[(6, 8, 11), uint8], Tensor[(9, 13, 6), bool], Tensor[(702), uint16], Tensor[(405), float32], Tensor[(1, 88), bool], Tensor[(13, 1), float32]) {
  @func_7932(%var_7934, %var_7935) /* ty=(Tensor[(6, 8, 11), uint8], Tensor[(9, 13, 6), bool], Tensor[(702), uint16], Tensor[(405), float32], Tensor[(1, 88), bool], Tensor[(13, 1), float32]) */
}

def @func_5758() -> Tensor[(11, 13, 8), uint8] {
  @func_5756() /* ty=Tensor[(11, 13, 8), uint8] */
}

def @func_4199() -> (Tensor[(15, 3, 9), uint16],) {
  %35 = fn () -> (Tensor[(15, 3, 9), uint16],) {
    %33 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
    %34 = %33.1;
    (%34,)
  };
  %35() /* ty=(Tensor[(15, 3, 9), uint16],) */
}

def @func_4421() -> (Tensor[(15, 3, 9), uint16], Tensor[(6, 3, 3), float32], Tensor[(3, 18), float32]) {
  @func_4419() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 3, 3), float32], Tensor[(3, 18), float32]) */
}

def @func_6297() -> (Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), uint16]) {
  %40 = fn () -> (Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), uint16]) {
    %36 = @func_3808() /* ty=(Tensor[(6, 8, 11), float64],) */;
    %37 = @func_6132() /* ty=(Tensor[(13, 1), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float32]) */;
    %38 = %36.0;
    %39 = %37.1;
    (%38, %39)
  };
  %40() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), uint16]) */
}

def @func_1292() -> Tensor[(15, 3, 9), uint16] {
  %42 = fn () -> Tensor[(15, 3, 9), uint16] {
    %41 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
    %41.1
  };
  %42() /* ty=Tensor[(15, 3, 9), uint16] */
}

def @func_3728(%var_3725: Tensor[(15, 3, 9), float32], %var_3726: Tensor[(1, 32), bool], %var_3727: Tensor[(528), bool]) -> (Tensor[(15, 3, 9), float32], Tensor[(405), float64], Tensor[(36, 2), float32], Tensor[(36, 2), float64], Tensor[(88), bool], Tensor[(1, 32), bool], Tensor[(4, 16), bool], Tensor[(702), uint16], Tensor[(528), bool], Tensor[(13), float32]) {
  @func_3723(%var_3725, %var_3726, %var_3727) /* ty=(Tensor[(15, 3, 9), float32], Tensor[(405), float64], Tensor[(36, 2), float32], Tensor[(36, 2), float64], Tensor[(88), bool], Tensor[(1, 32), bool], Tensor[(4, 16), bool], Tensor[(702), uint16], Tensor[(528), bool], Tensor[(13), float32]) */
}

def @func_1667() -> (Tensor[(15, 3, 9), uint16],) {
  %44 = fn () -> (Tensor[(15, 3, 9), uint16],) {
    %43 = @func_1291() /* ty=Tensor[(15, 3, 9), uint16] */;
    (%43,)
  };
  %44() /* ty=(Tensor[(15, 3, 9), uint16],) */
}

def @func_5286(%var_5285: Tensor[(6, 8, 11), float64]) -> Tensor[(6, 8, 11), int32] {
  %51 = fn (%var_5274: Tensor[(6, 8, 11), float64]) -> Tensor[(6, 8, 11), int32] {
    %45 = @func_5157() /* ty=(Tensor[(6, 8, 11), float64],) */;
    %46 = %45.0;
    %47 = cast(%var_5274, dtype="int32") /* ty=Tensor[(6, 8, 11), int32] */;
    %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
    %49 = cast(%46, dtype="int32") /* ty=Tensor[(6, 8, 11), int32] */;
    %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    maximum(%49, %50) /* ty=Tensor[(6, 8, 11), int32] */
  };
  %51(%var_5285) /* ty=Tensor[(6, 8, 11), int32] */
}

def @func_6144() -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) {
  @func_6142() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) */
}

def @func_2886(%var_2859: Tensor[(13), float32], %var_2861: Tensor[(15, 3, 9), uint16]) -> (Tensor[(528), int32], Tensor[(13), float32], Tensor[(15, 3, 9), float64], Tensor[(15, 3, 9), float64]) {
  %52 = cast(%var_2859, dtype="float32") /* ty=Tensor[(13), float32] */;
  %53 = reshape(%52, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %54 = @func_946(%53) /* ty=(Tensor[(528), int32], Tensor[(13, 1), float32], Tensor[(13), float32]) */;
  %55 = @func_2364() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %56 = %55.0;
  %57 = cast(%var_2861, dtype="float64") /* ty=Tensor[(15, 3, 9), float64] */;
  %58 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%56, dtype="float64") /* ty=Tensor[(15, 3, 9), float64] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %61 = cast(%var_2861, dtype="float64") /* ty=Tensor[(15, 3, 9), float64] */;
  %62 = %54.0;
  %63 = mod(%59, %60) /* ty=Tensor[(15, 3, 9), float64] */;
  %64 = sin(%61) /* ty=Tensor[(15, 3, 9), float64] */;
  (%62, %var_2859, %63, %64)
}

def @func_815() -> (Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) {
  @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */
}

def @func_3723(%var_3655: Tensor[(15, 3, 9), float32], %var_3708: Tensor[(1, 32), bool], %var_3711: Tensor[(528), bool]) -> (Tensor[(15, 3, 9), float32], Tensor[(405), float64], Tensor[(36, 2), float32], Tensor[(36, 2), float64], Tensor[(88), bool], Tensor[(1, 32), bool], Tensor[(4, 16), bool], Tensor[(702), uint16], Tensor[(528), bool], Tensor[(13), float32]) {
  %65 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
  %66 = %65.0;
  %67 = cast(%var_3655, dtype="int8") /* ty=Tensor[(15, 3, 9), int8] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%66, dtype="int8") /* ty=Tensor[(15, 3, 9), int8] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %71 = bitwise_or(%69, %70) /* ty=Tensor[(15, 3, 9), int8] */;
  %72 = cast(%var_3655, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %73 = shape_of(%71, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%71, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %76 = cast(meta[relay.Constant][3] /* ty=Tensor[(36, 2), uint16] */, dtype="uint16") /* ty=Tensor[(36, 2), uint16] */;
  %77 = cast(%71, dtype="float64") /* ty=Tensor[(15, 3, 9), float64] */;
  %78 = reshape(%76, newshape=[72]) /* ty=Tensor[(72), uint16] */;
  %79 = reshape(%77, newshape=[405]) /* ty=Tensor[(405), float64] */;
  %80 = @func_2987(%78, %79) /* ty=(Tensor[(13), float32], Tensor[(72), uint16], Tensor[(13), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float64], Tensor[(6, 8, 11), bool], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) */;
  %81 = cast(meta[relay.Constant][3] /* ty=Tensor[(36, 2), uint16] */, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %82 = cast(meta[relay.Constant][3] /* ty=Tensor[(36, 2), uint16] */, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
  %83 = sigmoid(%82) /* ty=Tensor[(36, 2), float64] */;
  %84 = cast(%83, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
  %85 = cast(%var_3708, dtype="bool") /* ty=Tensor[(1, 32), bool] */;
  %86 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 16), bool] */, dtype="bool") /* ty=Tensor[(4, 16), bool] */;
  %87 = cast(meta[relay.Constant][5] /* ty=Tensor[(702), uint16] */, dtype="uint16") /* ty=Tensor[(702), uint16] */;
  %88 = cast(%var_3711, dtype="bool") /* ty=Tensor[(528), bool] */;
  %89 = cast(%71, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %90 = cast(meta[relay.Constant][6] /* ty=Tensor[(13), float32] */, dtype="float32") /* ty=Tensor[(13), float32] */;
  %91 = reshape(%85, newshape=[4, 8, 1]) /* ty=Tensor[(4, 8, 1), bool] */;
  %92 = reshape(%86, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), bool] */;
  %93 = reshape(%87, newshape=[702]) /* ty=Tensor[(702), uint16] */;
  %94 = reshape(%88, newshape=[528]) /* ty=Tensor[(528), bool] */;
  %95 = reshape(%89, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %96 = reshape(%90, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %97 = @func_2284(%91, %92, %93, %94, %95, %96) /* ty=(Tensor[(4, 8, 2), bool], Tensor[(88), bool], Tensor[(702), uint16], Tensor[(528), bool], Tensor[(405), float32], Tensor[(13), float32], Tensor[(13, 1), float32], Tensor[(4, 8, 88), uint64], Tensor[(6, 8, 11), float64], Tensor[(4, 8, 1), float32]) */;
  %98 = maximum(%74, %75) /* ty=Tensor[(15, 3, 9), float32] */;
  %99 = %80.4;
  %100 = erf(%81) /* ty=Tensor[(36, 2), float32] */;
  %101 = sin(%84) /* ty=Tensor[(36, 2), float64] */;
  %102 = %97.1;
  (%98, %99, %100, %101, %102, %var_3708, meta[relay.Constant][4] /* ty=Tensor[(4, 16), bool] */, meta[relay.Constant][5] /* ty=Tensor[(702), uint16] */, %var_3711, meta[relay.Constant][6] /* ty=Tensor[(13), float32] */)
}

def @func_1923() -> (Tensor[(6, 8, 11), float32],) {
  %103 = @func_1717() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %104 = %103.1;
  %105 = cast(%104, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
  %106 = rsqrt(%105) /* ty=Tensor[(6, 8, 11), float32] */;
  (%106,)
}

def @func_3829(%var_3827: Tensor[(702), uint16], %var_3828: Tensor[(1, 13), float32]) -> (Tensor[(6, 8, 11), bool], Tensor[(6, 8, 11), float32], Tensor[(702), uint16], Tensor[(405), float32], Tensor[(88, 1), bool], Tensor[(1, 13), float32], Tensor[(15, 3, 9), uint16]) {
  @func_3825(%var_3827, %var_3828) /* ty=(Tensor[(6, 8, 11), bool], Tensor[(6, 8, 11), float32], Tensor[(702), uint16], Tensor[(405), float32], Tensor[(88, 1), bool], Tensor[(1, 13), float32], Tensor[(15, 3, 9), uint16]) */
}

def @func_4080(%var_4040: Tensor[(13), float32], %var_4078: Tensor[(702), uint16]) -> (Tensor[(15, 3, 9), float64], Tensor[(1, 13), float32], Tensor[(528), float64], Tensor[(13), float32], Tensor[(702), uint16], Tensor[(702), uint16]) {
  %107 = @func_2777() /* ty=(Tensor[(15, 3, 9), float64], Tensor[(6, 8, 11), float32]) */;
  %108 = cast(meta[relay.Constant][7] /* ty=Tensor[(528), float64] */, dtype="float64") /* ty=Tensor[(528), float64] */;
  %109 = cast(%var_4040, dtype="float32") /* ty=Tensor[(13), float32] */;
  %110 = reshape(%108, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), float64] */;
  %111 = reshape(%109, newshape=[1, 13]) /* ty=Tensor[(1, 13), float32] */;
  %112 = @func_1833(%110, %111) /* ty=(Tensor[(6, 8, 11), bool], Tensor[(13, 1), float32], Tensor[(1, 13), float32]) */;
  %113 = cast(%var_4078, dtype="uint16") /* ty=Tensor[(702), uint16] */;
  %114 = cast(%var_4040, dtype="float32") /* ty=Tensor[(13), float32] */;
  %115 = reshape(%113, newshape=[702]) /* ty=Tensor[(702), uint16] */;
  %116 = reshape(%114, newshape=[1, 13]) /* ty=Tensor[(1, 13), float32] */;
  %117 = @func_3825(%115, %116) /* ty=(Tensor[(6, 8, 11), bool], Tensor[(6, 8, 11), float32], Tensor[(702), uint16], Tensor[(405), float32], Tensor[(88, 1), bool], Tensor[(1, 13), float32], Tensor[(15, 3, 9), uint16]) */;
  %118 = %107.0;
  %119 = %112.2;
  %120 = %117.2;
  (%118, %119, meta[relay.Constant][7] /* ty=Tensor[(528), float64] */, %var_4040, %120, %var_4078)
}

def @func_4450(%var_4438: Tensor[(3, 8), float32]) -> Tensor[(3, 8), float32] {
  %121 = cast(%var_4438, dtype="float32") /* ty=Tensor[(3, 8), float32] */;
  atanh(%121) /* ty=Tensor[(3, 8), float32] */
}

def @func_5245() -> (Tensor[(6, 8, 11), float32],) {
  %124 = fn () -> (Tensor[(6, 8, 11), float32],) {
    %122 = @func_2777() /* ty=(Tensor[(15, 3, 9), float64], Tensor[(6, 8, 11), float32]) */;
    %123 = %122.1;
    (%123,)
  };
  %124() /* ty=(Tensor[(6, 8, 11), float32],) */
}

def @func_3599() -> (Tensor[(13, 16, 4), bool],) {
  @func_3597() /* ty=(Tensor[(13, 16, 4), bool],) */
}

def @func_5093(%var_5092: Tensor[(405), float64]) -> (Tensor[(72), uint16], Tensor[(72), uint16], Tensor[(405), float64], Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), int16], Tensor[(6, 8, 11), int8]) {
  %150 = fn (%var_5045: Tensor[(405), float64]) -> (Tensor[(72), uint16], Tensor[(72), uint16], Tensor[(405), float64], Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), int16], Tensor[(6, 8, 11), int8]) {
    %125 = cast(meta[relay.Constant][8] /* ty=Tensor[(72), uint16] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
    %126 = cast(%var_5045, dtype="float64") /* ty=Tensor[(405), float64] */;
    %127 = reshape(%125, newshape=[72]) /* ty=Tensor[(72), uint16] */;
    %128 = reshape(%126, newshape=[405]) /* ty=Tensor[(405), float64] */;
    %129 = @func_2987(%127, %128) /* ty=(Tensor[(13), float32], Tensor[(72), uint16], Tensor[(13), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float64], Tensor[(6, 8, 11), bool], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) */;
    %130 = @func_4633() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(6, 8, 11), float64]) */;
    %131 = %130.1;
    %132 = cast(%131, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
    %133 = sigmoid(%132) /* ty=Tensor[(6, 8, 11), float64] */;
    %134 = cast(%131, dtype="int16") /* ty=Tensor[(6, 8, 11), int16] */;
    %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
    %136 = cast(%133, dtype="int16") /* ty=Tensor[(6, 8, 11), int16] */;
    %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %138 = cast(%133, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
    %139 = asin(%138) /* ty=Tensor[(6, 8, 11), float64] */;
    %140 = cast(%139, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
    %141 = atan(%140) /* ty=Tensor[(6, 8, 11), float64] */;
    %142 = cast(%139, dtype="int8") /* ty=Tensor[(6, 8, 11), int8] */;
    %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
    %144 = cast(%141, dtype="int8") /* ty=Tensor[(6, 8, 11), int8] */;
    %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %146 = %129.1;
    %147 = @func_3377() /* ty=Tensor[(15, 3, 9), uint16] */;
    %148 = bitwise_xor(%136, %137) /* ty=Tensor[(6, 8, 11), int16] */;
    %149 = left_shift(%144, %145) /* ty=Tensor[(6, 8, 11), int8] */;
    (%146, meta[relay.Constant][8] /* ty=Tensor[(72), uint16] */, %var_5045, %147, %148, %149)
  };
  %150(%var_5092) /* ty=(Tensor[(72), uint16], Tensor[(72), uint16], Tensor[(405), float64], Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), int16], Tensor[(6, 8, 11), int8]) */
}

def @func_4854() -> Tensor[(15, 3, 9), uint16] {
  %151 = @func_1666() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %151.0
}

def @func_3121() -> (Tensor[(6, 8, 11), float32],) {
  @func_3119() /* ty=(Tensor[(6, 8, 11), float32],) */
}

def @func_3808() -> (Tensor[(6, 8, 11), float64],) {
  %152 = @func_1502() /* ty=Tensor[(6, 8, 11), float64] */;
  (%152,)
}

def @func_455(%var_453: uint16, %var_454: Tensor[(9, 13, 6), uint16]) -> (Tensor[(9, 13, 6), bool],) {
  %156 = fn (%var_438: uint16, %var_439: Tensor[(9, 13, 6), uint16]) -> (Tensor[(9, 13, 6), bool],) {
    %153 = cast(%var_438, dtype="bool") /* ty=bool */;
    %154 = cast(%var_439, dtype="bool") /* ty=Tensor[(9, 13, 6), bool] */;
    %155 = less_equal(%153, %154) /* ty=Tensor[(9, 13, 6), bool] */;
    (%155,)
  };
  %156(%var_453, %var_454) /* ty=(Tensor[(9, 13, 6), bool],) */
}

def @func_6832() -> (Tensor[(6, 8, 11), float32], Tensor[(15, 3, 9), float32]) {
  %160 = fn () -> (Tensor[(6, 8, 11), float32], Tensor[(15, 3, 9), float32]) {
    %157 = @func_4981() /* ty=(Tensor[(6, 8, 11), float32],) */;
    %158 = %157.0;
    %159 = @func_3316() /* ty=Tensor[(15, 3, 9), float32] */;
    (%158, %159)
  };
  %160() /* ty=(Tensor[(6, 8, 11), float32], Tensor[(15, 3, 9), float32]) */
}

def @func_6142() -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) {
  %161 = @func_1459() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) */;
  %162 = @func_4464() /* ty=Tensor[(6, 8, 11), float64] */;
  %163 = %161.3;
  (%162, %163)
}

def @func_3856() -> Tensor[(6, 8, 11), float32] {
  %164 = @func_1729() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %165 = %164.0;
  %166 = cast(%165, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
  log10(%166) /* ty=Tensor[(6, 8, 11), float32] */
}

def @func_4389() -> (Tensor[(6, 8, 11), float64],) {
  @func_4387() /* ty=(Tensor[(6, 8, 11), float64],) */
}

def @func_682() -> (Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) {
  @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */
}

def @func_2620(%var_2619: Tensor[(6, 3, 3), float32]) -> Tensor[(6, 3, 3), float32] {
  %170 = fn (%var_2598: Tensor[(6, 3, 3), float32]) -> Tensor[(6, 3, 3), float32] {
    %167 = cast(%var_2598, dtype="float32") /* ty=Tensor[(6, 3, 3), float32] */;
    %168 = sigmoid(%167) /* ty=Tensor[(6, 3, 3), float32] */;
    %169 = cast(%168, dtype="float32") /* ty=Tensor[(6, 3, 3), float32] */;
    rsqrt(%169) /* ty=Tensor[(6, 3, 3), float32] */
  };
  %170(%var_2619) /* ty=Tensor[(6, 3, 3), float32] */
}

def @func_535(%var_531: Tensor[(11, 2, 4), bool], %var_532: Tensor[(11, 2, 4), bool], %var_533: uint16, %var_534: Tensor[(13), float32]) -> (Tensor[(11, 2, 4), bool], Tensor[(13), float32], uint16, Tensor[(72), uint16], Tensor[(13), float32], Tensor[(13, 1), float32]) {
  %188 = fn (%var_513: Tensor[(11, 2, 4), bool], %var_514: Tensor[(11, 2, 4), bool], %var_521: uint16, %var_523: Tensor[(13), float32]) -> (Tensor[(11, 2, 4), bool], Tensor[(13), float32], uint16, Tensor[(72), uint16], Tensor[(13), float32], Tensor[(13, 1), float32]) {
    %171 = cast(%var_514, dtype="bool") /* ty=Tensor[(11, 2, 4), bool] */;
    %172 = shape_of(%var_513, dtype="int32") /* ty=Tensor[(3), int32] */;
    %173 = cast(%var_513, dtype="bool") /* ty=Tensor[(11, 2, 4), bool] */;
    %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %175 = cast(%var_521, dtype="uint16") /* ty=uint16 */;
    %176 = cast(meta[relay.Constant][9] /* ty=Tensor[(72), uint16] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
    %177 = cast(%var_523, dtype="float32") /* ty=Tensor[(13), float32] */;
    %178 = reshape(%175, newshape=[]) /* ty=uint16 */;
    %179 = reshape(%176, newshape=[6, 12, 1]) /* ty=Tensor[(6, 12, 1), uint16] */;
    %180 = reshape(%177, newshape=[13]) /* ty=Tensor[(13), float32] */;
    %181 = @func_375(%178, %179, %180) /* ty=(Tensor[(6, 12, 1), uint16], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(13, 1), float32]) */;
    %182 = cast(%var_523, dtype="float32") /* ty=Tensor[(13), float32] */;
    %183 = reshape(%182, newshape=[13, 1]) /* ty=Tensor[(13, 1), float32] */;
    %184 = @func_68(%183) /* ty=(Tensor[(13, 1), float32],) */;
    %185 = logical_and(%173, %174) /* ty=Tensor[(11, 2, 4), bool] */;
    %186 = %181.2;
    %187 = %184.0;
    (%185, %186, %var_521, meta[relay.Constant][9] /* ty=Tensor[(72), uint16] */, %var_523, %187)
  };
  %188(%var_531, %var_532, %var_533, %var_534) /* ty=(Tensor[(11, 2, 4), bool], Tensor[(13), float32], uint16, Tensor[(72), uint16], Tensor[(13), float32], Tensor[(13, 1), float32]) */
}

def @func_2578(%var_2576: Tensor[(72), uint16], %var_2577: Tensor[(13), float32]) -> (Tensor[(528), int32], Tensor[(13), float32], uint16, Tensor[(13), float32], Tensor[(6, 8, 11), bool], Tensor[(72), float64], Tensor[(13, 1), float32]) {
  %207 = fn (%var_2556: Tensor[(72), uint16], %var_2557: Tensor[(13), float32]) -> (Tensor[(528), int32], Tensor[(13), float32], uint16, Tensor[(13), float32], Tensor[(6, 8, 11), bool], Tensor[(72), float64], Tensor[(13, 1), float32]) {
    %189 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
    %190 = cast(meta[relay.Constant][10] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %191 = cast(%var_2556, dtype="uint16") /* ty=Tensor[(72), uint16] */;
    %192 = cast(%var_2557, dtype="float32") /* ty=Tensor[(13), float32] */;
    %193 = reshape(%190, newshape=[]) /* ty=uint16 */;
    %194 = reshape(%191, newshape=[6, 12, 1]) /* ty=Tensor[(6, 12, 1), uint16] */;
    %195 = reshape(%192, newshape=[13]) /* ty=Tensor[(13), float32] */;
    %196 = @func_375(%193, %194, %195) /* ty=(Tensor[(6, 12, 1), uint16], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(13, 1), float32]) */;
    %197 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
    %198 = cast(%var_2556, dtype="float64") /* ty=Tensor[(72), float64] */;
    %199 = %196.2;
    %200 = cast(%199, dtype="float32") /* ty=Tensor[(13), float32] */;
    %201 = reshape(%200, newshape=[13]) /* ty=Tensor[(13), float32] */;
    %202 = @func_946(%201) /* ty=(Tensor[(528), int32], Tensor[(13, 1), float32], Tensor[(13), float32]) */;
    %203 = %189.2;
    %204 = %197.1;
    %205 = log10(%198) /* ty=Tensor[(72), float64] */;
    %206 = %202.1;
    (%203, %199, meta[relay.Constant][10] /* ty=uint16 */, %var_2557, %204, %205, %206)
  };
  %207(%var_2576, %var_2577) /* ty=(Tensor[(528), int32], Tensor[(13), float32], uint16, Tensor[(13), float32], Tensor[(6, 8, 11), bool], Tensor[(72), float64], Tensor[(13, 1), float32]) */
}

def @func_4820() -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64], Tensor[(1, 13), float32], Tensor[(13, 1), float32]) {
  @func_4818() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64], Tensor[(1, 13), float32], Tensor[(13, 1), float32]) */
}

def @func_6037() -> (Tensor[(13, 16, 4), bool], Tensor[(13), float32], Tensor[(72), uint16], Tensor[(45, 9), float64], Tensor[(6, 8, 11), float32], Tensor[(88), bool], uint16, Tensor[(3, 18), float32]) {
  %208 = @func_3597() /* ty=(Tensor[(13, 16, 4), bool],) */;
  %209 = cast(meta[relay.Constant][11] /* ty=Tensor[(72), uint16] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %210 = cast(meta[relay.Constant][12] /* ty=Tensor[(45, 9), float64] */, dtype="float64") /* ty=Tensor[(45, 9), float64] */;
  %211 = reshape(%209, newshape=[72]) /* ty=Tensor[(72), uint16] */;
  %212 = reshape(%210, newshape=[405]) /* ty=Tensor[(405), float64] */;
  %213 = @func_2987(%211, %212) /* ty=(Tensor[(13), float32], Tensor[(72), uint16], Tensor[(13), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float64], Tensor[(6, 8, 11), bool], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) */;
  %214 = cast(meta[relay.Constant][13] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %215 = cast(meta[relay.Constant][14] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %216 = reshape(%214, newshape=[2, 44]) /* ty=Tensor[(2, 44), bool] */;
  %217 = reshape(%215, newshape=[]) /* ty=uint16 */;
  %218 = @func_3348(%216, %217) /* ty=(Tensor[(6, 8, 11), float32], Tensor[(72), uint16], Tensor[(2, 44), bool], uint16, Tensor[(13), float32]) */;
  %219 = @func_4419() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 3, 3), float32], Tensor[(3, 18), float32]) */;
  %220 = %208.0;
  %221 = %213.0;
  %222 = %218.0;
  %223 = %219.2;
  (%220, %221, meta[relay.Constant][11] /* ty=Tensor[(72), uint16] */, meta[relay.Constant][12] /* ty=Tensor[(45, 9), float64] */, %222, meta[relay.Constant][13] /* ty=Tensor[(88), bool] */, meta[relay.Constant][14] /* ty=uint16 */, %223)
}

def @main(%var_8040: Tensor[(7, 10, 12), float32]) -> (Tensor[(7, 10, 12), float32],) {
  %224 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 10, 12), float32] */, dtype="float32") /* ty=Tensor[(7, 10, 12), float32] */;
  %225 = shape_of(%var_8040, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%var_8040, dtype="float32") /* ty=Tensor[(7, 10, 12), float32] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %228 = divide(%226, %227) /* ty=Tensor[(7, 10, 12), float32] */;
  (%228,)
}

def @func_7224() -> (Tensor[(15, 3, 9), uint16],) {
  %229 = @func_3951() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), uint16]) */;
  %230 = %229.1;
  (%230,)
}

def @func_6863() -> Tensor[(15, 3, 9), uint16] {
  @func_6861() /* ty=Tensor[(15, 3, 9), uint16] */
}

def @func_680() -> (Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) {
  %231 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 3, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %232 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 3, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %233 = tan(%232) /* ty=Tensor[(15, 3, 9), float32] */;
  %234 = cast(%233, dtype="uint16") /* ty=Tensor[(15, 3, 9), uint16] */;
  %235 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(15, 3, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 3, 9), float32] */, dtype="uint16") /* ty=Tensor[(15, 3, 9), uint16] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %238 = sinh(%231) /* ty=Tensor[(15, 3, 9), float32] */;
  %239 = add(%236, %237) /* ty=Tensor[(15, 3, 9), uint16] */;
  (%238, %239)
}

def @func_2292(%var_2286: Tensor[(4, 8, 1), bool], %var_2287: Tensor[(4, 8, 2), bool], %var_2288: Tensor[(702), uint16], %var_2289: Tensor[(528), bool], %var_2290: Tensor[(405), float32], %var_2291: Tensor[(13), float32]) -> (Tensor[(4, 8, 2), bool], Tensor[(88), bool], Tensor[(702), uint16], Tensor[(528), bool], Tensor[(405), float32], Tensor[(13), float32], Tensor[(13, 1), float32], Tensor[(4, 8, 88), uint64], Tensor[(6, 8, 11), float64], Tensor[(4, 8, 1), float32]) {
  @func_2284(%var_2286, %var_2287, %var_2288, %var_2289, %var_2290, %var_2291) /* ty=(Tensor[(4, 8, 2), bool], Tensor[(88), bool], Tensor[(702), uint16], Tensor[(528), bool], Tensor[(405), float32], Tensor[(13), float32], Tensor[(13, 1), float32], Tensor[(4, 8, 88), uint64], Tensor[(6, 8, 11), float64], Tensor[(4, 8, 1), float32]) */
}

def @func_1718() -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) {
  %243 = fn () -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) {
    %240 = @func_988() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
    %241 = @func_1502() /* ty=Tensor[(6, 8, 11), float64] */;
    %242 = %240.1;
    (%241, %242)
  };
  %243() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */
}

def @func_6659() -> (Tensor[(1, 13), float32], Tensor[(15, 3, 9), uint16]) {
  %248 = fn () -> (Tensor[(1, 13), float32], Tensor[(15, 3, 9), uint16]) {
    %244 = @func_4818() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64], Tensor[(1, 13), float32], Tensor[(13, 1), float32]) */;
    %245 = @func_4198() /* ty=(Tensor[(15, 3, 9), uint16],) */;
    %246 = %244.2;
    %247 = %245.0;
    (%246, %247)
  };
  %248() /* ty=(Tensor[(1, 13), float32], Tensor[(15, 3, 9), uint16]) */
}

def @func_2124() -> (Tensor[(6, 8, 11), float64],) {
  %251 = fn () -> (Tensor[(6, 8, 11), float64],) {
    %249 = @func_988() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
    %250 = %249.0;
    (%250,)
  };
  %251() /* ty=(Tensor[(6, 8, 11), float64],) */
}

def @func_6552() -> (Tensor[(6, 8, 11), bool],) {
  %254 = fn () -> (Tensor[(6, 8, 11), bool],) {
    %252 = @func_4534() /* ty=(Tensor[(6, 8, 11), bool],) */;
    %253 = %252.0;
    (%253,)
  };
  %254() /* ty=(Tensor[(6, 8, 11), bool],) */
}

def @func_3236(%var_3231: Tensor[(15, 16), float32], %var_3232: Tensor[(15, 16), float32]) -> (Tensor[(15, 16), float32],) {
  %255 = cast(%var_3232, dtype="float32") /* ty=Tensor[(15, 16), float32] */;
  %256 = shape_of(%var_3231, dtype="int32") /* ty=Tensor[(2), int32] */;
  %257 = cast(%var_3231, dtype="float32") /* ty=Tensor[(15, 16), float32] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %259 = floor_divide(%257, %258) /* ty=Tensor[(15, 16), float32] */;
  (%259,)
}

def @func_5381(%var_5379: Tensor[(6, 8, 11), float64]) -> Tensor[(6, 8, 11), uint32] {
  @func_5378(%var_5379) /* ty=Tensor[(6, 8, 11), uint32] */
}

def @func_1123() -> (Tensor[(6, 8, 11), float64],) {
  %260 = @func_988() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %261 = %260.0;
  (%261,)
}

def @func_4084(%var_4082: Tensor[(13), float32], %var_4083: Tensor[(702), uint16]) -> (Tensor[(15, 3, 9), float64], Tensor[(1, 13), float32], Tensor[(528), float64], Tensor[(13), float32], Tensor[(702), uint16], Tensor[(702), uint16]) {
  @func_4080(%var_4082, %var_4083) /* ty=(Tensor[(15, 3, 9), float64], Tensor[(1, 13), float32], Tensor[(528), float64], Tensor[(13), float32], Tensor[(702), uint16], Tensor[(702), uint16]) */
}

def @func_3559(%var_3520: Tensor[(9, 3, 16), int16], %var_3530: Tensor[(702), uint16], %var_3532: Tensor[(405), float32]) -> (Tensor[(9, 3, 16), int16], Tensor[(88), bool], Tensor[(32), bool], Tensor[(64), bool], Tensor[(702), uint16], Tensor[(528), bool], Tensor[(405), float32], Tensor[(13), float32], Tensor[(6, 8, 11), bool]) {
  %262 = cast(meta[relay.Constant][17] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %263 = cast(%var_3520, dtype="int16") /* ty=Tensor[(9, 3, 16), int16] */;
  %264 = cast(meta[relay.Constant][18] /* ty=Tensor[(32), bool] */, dtype="bool") /* ty=Tensor[(32), bool] */;
  %265 = cast(meta[relay.Constant][19] /* ty=Tensor[(64), bool] */, dtype="bool") /* ty=Tensor[(64), bool] */;
  %266 = cast(%var_3530, dtype="uint16") /* ty=Tensor[(702), uint16] */;
  %267 = cast(meta[relay.Constant][20] /* ty=Tensor[(528), bool] */, dtype="bool") /* ty=Tensor[(528), bool] */;
  %268 = cast(%var_3532, dtype="float32") /* ty=Tensor[(405), float32] */;
  %269 = cast(meta[relay.Constant][21] /* ty=Tensor[(13), float32] */, dtype="float32") /* ty=Tensor[(13), float32] */;
  %270 = reshape(%264, newshape=[4, 8, 1]) /* ty=Tensor[(4, 8, 1), bool] */;
  %271 = reshape(%265, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), bool] */;
  %272 = reshape(%266, newshape=[702]) /* ty=Tensor[(702), uint16] */;
  %273 = reshape(%267, newshape=[528]) /* ty=Tensor[(528), bool] */;
  %274 = reshape(%268, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %275 = reshape(%269, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %276 = @func_2284(%270, %271, %272, %273, %274, %275) /* ty=(Tensor[(4, 8, 2), bool], Tensor[(88), bool], Tensor[(702), uint16], Tensor[(528), bool], Tensor[(405), float32], Tensor[(13), float32], Tensor[(13, 1), float32], Tensor[(4, 8, 88), uint64], Tensor[(6, 8, 11), float64], Tensor[(4, 8, 1), float32]) */;
  %277 = @func_1717() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %278 = maximum(%262, %263) /* ty=Tensor[(9, 3, 16), int16] */;
  %279 = %276.1;
  %280 = %277.1;
  (%278, %279, meta[relay.Constant][18] /* ty=Tensor[(32), bool] */, meta[relay.Constant][19] /* ty=Tensor[(64), bool] */, %var_3530, meta[relay.Constant][20] /* ty=Tensor[(528), bool] */, %var_3532, meta[relay.Constant][21] /* ty=Tensor[(13), float32] */, %280)
}

def @func_7004(%var_7002: uint8, %var_7003: Tensor[(1, 13), uint8]) -> (Tensor[(1, 13), uint8], Tensor[(6, 8, 11), float32]) {
  %286 = fn (%var_6986: uint8, %var_6987: Tensor[(1, 13), uint8]) -> (Tensor[(1, 13), uint8], Tensor[(6, 8, 11), float32]) {
    %281 = cast(%var_6986, dtype="uint8") /* ty=uint8 */;
    %282 = cast(%var_6987, dtype="uint8") /* ty=Tensor[(1, 13), uint8] */;
    %283 = @func_1923() /* ty=(Tensor[(6, 8, 11), float32],) */;
    %284 = add(%281, %282) /* ty=Tensor[(1, 13), uint8] */;
    %285 = %283.0;
    (%284, %285)
  };
  %286(%var_7002, %var_7003) /* ty=(Tensor[(1, 13), uint8], Tensor[(6, 8, 11), float32]) */
}

def @func_990() -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) {
  @func_988() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */
}

def @func_1798(%var_1797: Tensor[(96), uint8]) -> (Tensor[(15, 3, 9), uint16], Tensor[(3, 8, 4), bool], Tensor[(96), uint8], Tensor[(6, 8, 11), float64]) {
  %295 = fn (%var_1785: Tensor[(96), uint8]) -> (Tensor[(15, 3, 9), uint16], Tensor[(3, 8, 4), bool], Tensor[(96), uint8], Tensor[(6, 8, 11), float64]) {
    %287 = @func_1666() /* ty=(Tensor[(15, 3, 9), uint16],) */;
    %288 = cast(%var_1785, dtype="uint8") /* ty=Tensor[(96), uint8] */;
    %289 = reshape(%288, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint8] */;
    %290 = @func_1042(%289) /* ty=(Tensor[(3, 8, 4), bool], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(6, 8, 11), bool]) */;
    %291 = @func_1729() /* ty=(Tensor[(6, 8, 11), float64],) */;
    %292 = %287.0;
    %293 = %290.0;
    %294 = %291.0;
    (%292, %293, %var_1785, %294)
  };
  %295(%var_1797) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(3, 8, 4), bool], Tensor[(96), uint8], Tensor[(6, 8, 11), float64]) */
}

def @func_4634() -> (Tensor[(15, 3, 9), float32], Tensor[(6, 8, 11), float64]) {
  %298 = fn () -> (Tensor[(15, 3, 9), float32], Tensor[(6, 8, 11), float64]) {
    %296 = @func_3316() /* ty=Tensor[(15, 3, 9), float32] */;
    %297 = @func_4464() /* ty=Tensor[(6, 8, 11), float64] */;
    (%296, %297)
  };
  %298() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(6, 8, 11), float64]) */
}

def @func_2224(%var_2205: Tensor[(15, 3, 9), float64]) -> (Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), uint64]) {
  %299 = @func_1291() /* ty=Tensor[(15, 3, 9), uint16] */;
  %300 = cast(%299, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %301 = reshape(%300, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %302 = @func_1097(%301) /* ty=(Tensor[(15, 3, 9), bool], Tensor[(15, 3, 9), float64]) */;
  %303 = %302.1;
  %304 = cast(%var_2205, dtype="uint64") /* ty=Tensor[(15, 3, 9), uint64] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%303, dtype="uint64") /* ty=Tensor[(15, 3, 9), uint64] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %308 = minimum(%306, %307) /* ty=Tensor[(15, 3, 9), uint64] */;
  (%299, %308)
}

def @func_7226() -> (Tensor[(15, 3, 9), uint16],) {
  @func_7224() /* ty=(Tensor[(15, 3, 9), uint16],) */
}

def @func_1099(%var_1098: Tensor[(15, 3, 9), float32]) -> (Tensor[(15, 3, 9), bool], Tensor[(15, 3, 9), float64]) {
  %318 = fn (%var_1068: Tensor[(15, 3, 9), float32]) -> (Tensor[(15, 3, 9), bool], Tensor[(15, 3, 9), float64]) {
    %309 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
    %310 = %309.0;
    %311 = cast(%var_1068, dtype="bool") /* ty=Tensor[(15, 3, 9), bool] */;
    %312 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
    %313 = cast(%310, dtype="bool") /* ty=Tensor[(15, 3, 9), bool] */;
    %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %315 = cast(%var_1068, dtype="float64") /* ty=Tensor[(15, 3, 9), float64] */;
    %316 = not_equal(%313, %314) /* ty=Tensor[(15, 3, 9), bool] */;
    %317 = cosh(%315) /* ty=Tensor[(15, 3, 9), float64] */;
    (%316, %317)
  };
  %318(%var_1098) /* ty=(Tensor[(15, 3, 9), bool], Tensor[(15, 3, 9), float64]) */
}

def @func_2420() -> (Tensor[(15, 3, 9), uint16],) {
  %320 = fn () -> (Tensor[(15, 3, 9), uint16],) {
    %319 = @func_1291() /* ty=Tensor[(15, 3, 9), uint16] */;
    (%319,)
  };
  %320() /* ty=(Tensor[(15, 3, 9), uint16],) */
}

def @func_4453(%var_4451: Tensor[(3, 8), float32]) -> Tensor[(3, 8), float32] {
  @func_4450(%var_4451) /* ty=Tensor[(3, 8), float32] */
}

def @func_2227(%var_2225: Tensor[(15, 3, 9), float64]) -> (Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), uint64]) {
  @func_2224(%var_2225) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), uint64]) */
}

def @func_3633(%var_3632: Tensor[(13, 16, 4), bool]) -> (Tensor[(13, 16, 4), uint64],) {
  %328 = fn (%var_3626: Tensor[(13, 16, 4), bool]) -> (Tensor[(13, 16, 4), uint64],) {
    %321 = @func_3597() /* ty=(Tensor[(13, 16, 4), bool],) */;
    %322 = %321.0;
    %323 = cast(%var_3626, dtype="uint64") /* ty=Tensor[(13, 16, 4), uint64] */;
    %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
    %325 = cast(%322, dtype="uint64") /* ty=Tensor[(13, 16, 4), uint64] */;
    %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %327 = subtract(%325, %326) /* ty=Tensor[(13, 16, 4), uint64] */;
    (%327,)
  };
  %328(%var_3632) /* ty=(Tensor[(13, 16, 4), uint64],) */
}

def @func_7865(%var_7799: Tensor[(6, 9, 10), int8], %var_7834: Tensor[(3, 24), uint16], %var_7835: Tensor[(13), float32]) -> (Tensor[(15, 3, 9), uint16], Tensor[(6, 9, 10), bool], Tensor[(13, 1), float32], Tensor[(3, 24), uint16], Tensor[(13), float32], Tensor[(6, 9, 10), uint16], Tensor[(6, 8, 11), int32], Tensor[(24, 22), bool]) {
  %329 = @func_2364() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %330 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 1, 10), int8] */, dtype="int8") /* ty=Tensor[(6, 1, 10), int8] */;
  %331 = cast(%var_7799, dtype="int8") /* ty=Tensor[(6, 9, 10), int8] */;
  %332 = left_shift(%330, %331) /* ty=Tensor[(6, 9, 10), int8] */;
  %333 = cast(%332, dtype="float32") /* ty=Tensor[(6, 9, 10), float32] */;
  %334 = log(%333) /* ty=Tensor[(6, 9, 10), float32] */;
  %335 = cast(%332, dtype="bool") /* ty=Tensor[(6, 9, 10), bool] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%334, dtype="bool") /* ty=Tensor[(6, 9, 10), bool] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %339 = cast(%var_7834, dtype="uint16") /* ty=Tensor[(3, 24), uint16] */;
  %340 = cast(%var_7835, dtype="float32") /* ty=Tensor[(13), float32] */;
  %341 = reshape(%339, newshape=[72]) /* ty=Tensor[(72), uint16] */;
  %342 = reshape(%340, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %343 = @func_2575(%341, %342) /* ty=(Tensor[(528), int32], Tensor[(13), float32], uint16, Tensor[(13), float32], Tensor[(6, 8, 11), bool], Tensor[(72), float64], Tensor[(13, 1), float32]) */;
  %344 = cast(%332, dtype="uint16") /* ty=Tensor[(6, 9, 10), uint16] */;
  %345 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%334, dtype="uint16") /* ty=Tensor[(6, 9, 10), uint16] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %348 = cast(meta[relay.Constant][23] /* ty=Tensor[(24, 22), bool] */, dtype="bool") /* ty=Tensor[(24, 22), bool] */;
  %349 = reshape(%348, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), bool] */;
  %350 = %329.0;
  %351 = less_equal(%337, %338) /* ty=Tensor[(6, 9, 10), bool] */;
  %352 = %343.6;
  %353 = add(%346, %347) /* ty=Tensor[(6, 9, 10), uint16] */;
  %354 = @func_6316(%349) /* ty=Tensor[(6, 8, 11), int32] */;
  (%350, %351, %352, %var_7834, %var_7835, %353, %354, meta[relay.Constant][23] /* ty=Tensor[(24, 22), bool] */)
}

def @func_1379() -> (Tensor[(6, 8, 11), bool], Tensor[(96), uint8], Tensor[(6, 8, 11), float32]) {
  @func_1377() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(96), uint8], Tensor[(6, 8, 11), float32]) */
}

def @func_2452() -> Tensor[(6, 8, 11), float32] {
  %356 = fn () -> Tensor[(6, 8, 11), float32] {
    %355 = @func_1377() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(96), uint8], Tensor[(6, 8, 11), float32]) */;
    %355.2
  };
  %356() /* ty=Tensor[(6, 8, 11), float32] */
}

def @func_6075(%var_6073: Tensor[(4, 14, 5), bool], %var_6074: Tensor[(1, 13), float32]) -> (Tensor[(4, 14, 5), float64], Tensor[(4, 14, 5), float64], Tensor[(528), float64], Tensor[(1, 13), float32], Tensor[(702), uint16]) {
  %372 = fn (%var_6043: Tensor[(4, 14, 5), bool], %var_6066: Tensor[(1, 13), float32]) -> (Tensor[(4, 14, 5), float64], Tensor[(4, 14, 5), float64], Tensor[(528), float64], Tensor[(1, 13), float32], Tensor[(702), uint16]) {
    %357 = cast(%var_6043, dtype="float64") /* ty=Tensor[(4, 14, 5), float64] */;
    %358 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 14, 5), bool] */, dtype="bool") /* ty=Tensor[(4, 14, 5), bool] */;
    %359 = shape_of(%var_6043, dtype="int32") /* ty=Tensor[(3), int32] */;
    %360 = cast(%var_6043, dtype="bool") /* ty=Tensor[(4, 14, 5), bool] */;
    %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %362 = logical_and(%360, %361) /* ty=Tensor[(4, 14, 5), bool] */;
    %363 = cast(%362, dtype="float64") /* ty=Tensor[(4, 14, 5), float64] */;
    %364 = cast(%var_6066, dtype="float32") /* ty=Tensor[(1, 13), float32] */;
    %365 = cast(meta[relay.Constant][25] /* ty=Tensor[(702), uint16] */, dtype="uint16") /* ty=Tensor[(702), uint16] */;
    %366 = reshape(%364, newshape=[13]) /* ty=Tensor[(13), float32] */;
    %367 = reshape(%365, newshape=[702]) /* ty=Tensor[(702), uint16] */;
    %368 = @func_4080(%366, %367) /* ty=(Tensor[(15, 3, 9), float64], Tensor[(1, 13), float32], Tensor[(528), float64], Tensor[(13), float32], Tensor[(702), uint16], Tensor[(702), uint16]) */;
    %369 = sin(%357) /* ty=Tensor[(4, 14, 5), float64] */;
    %370 = log10(%363) /* ty=Tensor[(4, 14, 5), float64] */;
    %371 = %368.2;
    (%369, %370, %371, %var_6066, meta[relay.Constant][25] /* ty=Tensor[(702), uint16] */)
  };
  %372(%var_6073, %var_6074) /* ty=(Tensor[(4, 14, 5), float64], Tensor[(4, 14, 5), float64], Tensor[(528), float64], Tensor[(1, 13), float32], Tensor[(702), uint16]) */
}

def @func_4519() -> Tensor[(15, 3, 9), float32] {
  @func_4517() /* ty=Tensor[(15, 3, 9), float32] */
}

def @func_1730() -> (Tensor[(6, 8, 11), float64],) {
  %375 = fn () -> (Tensor[(6, 8, 11), float64],) {
    %373 = @func_1717() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
    %374 = %373.0;
    (%374,)
  };
  %375() /* ty=(Tensor[(6, 8, 11), float64],) */
}

def @func_2331(%var_2330: Tensor[(4, 6, 8), int16]) -> (Tensor[(4, 6, 8), float32],) {
  %381 = fn (%var_2319: Tensor[(4, 6, 8), int16]) -> (Tensor[(4, 6, 8), float32],) {
    %376 = cast(meta[relay.Constant][26] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %377 = cast(%var_2319, dtype="int16") /* ty=Tensor[(4, 6, 8), int16] */;
    %378 = bitwise_or(%376, %377) /* ty=Tensor[(4, 6, 8), int16] */;
    %379 = cast(%378, dtype="float32") /* ty=Tensor[(4, 6, 8), float32] */;
    %380 = cosh(%379) /* ty=Tensor[(4, 6, 8), float32] */;
    (%380,)
  };
  %381(%var_2330) /* ty=(Tensor[(4, 6, 8), float32],) */
}

def @func_3480() -> (Tensor[(6, 8, 11), float64], Tensor[(825), float32], Tensor[(405), float32]) {
  %382 = cast(meta[relay.Constant][27] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %383 = reshape(%382, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %384 = @func_2165(%383) /* ty=(Tensor[(6, 8, 11), float64], uint16, Tensor[(825), float32], Tensor[(405), float32], Tensor[(15, 3, 9), bool]) */;
  %385 = @func_1502() /* ty=Tensor[(6, 8, 11), float64] */;
  %386 = %384.2;
  (%385, %386, meta[relay.Constant][27] /* ty=Tensor[(405), float32] */)
}

def @func_7632(%var_7621: Tensor[(405, 1), float32]) -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64], Tensor[(825), float32], Tensor[(405, 1), float32], Tensor[(6, 8, 11), float64]) {
  %387 = @func_3967() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %388 = cast(meta[relay.Constant][28] /* ty=Tensor[(825), float32] */, dtype="float32") /* ty=Tensor[(825), float32] */;
  %389 = cast(meta[relay.Constant][28] /* ty=Tensor[(825), float32] */, dtype="float32") /* ty=Tensor[(825), float32] */;
  %390 = cast(%var_7621, dtype="float32") /* ty=Tensor[(405, 1), float32] */;
  %391 = reshape(%388, newshape=[5, 15, 11]) /* ty=Tensor[(5, 15, 11), float32] */;
  %392 = reshape(%389, newshape=[5, 15, 11]) /* ty=Tensor[(5, 15, 11), float32] */;
  %393 = reshape(%390, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %394 = @func_2037(%391, %392, %393) /* ty=(Tensor[(5, 15, 11), float32], Tensor[(6, 8, 11), float64], uint16, Tensor[(405), float32], Tensor[(15, 3, 9), float32]) */;
  %395 = @func_5157() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %396 = %387.0;
  %397 = %394.1;
  %398 = %395.0;
  (%396, %397, meta[relay.Constant][28] /* ty=Tensor[(825), float32] */, %var_7621, %398)
}

def @func_7788() -> (Tensor[(6, 8, 11), float64], Tensor[(11, 13, 8), float64], Tensor[(96), float32], Tensor[(96), uint8]) {
  %399 = @func_988() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %400 = @func_6507() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(11, 13, 8), uint8]) */;
  %401 = %400.1;
  %402 = cast(%401, dtype="float64") /* ty=Tensor[(11, 13, 8), float64] */;
  %403 = cast(meta[relay.Constant][29] /* ty=Tensor[(96), uint8] */, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %404 = reshape(%403, newshape=[96]) /* ty=Tensor[(96), uint8] */;
  %405 = @func_1900(%404) /* ty=(Tensor[(6, 8, 11), float64], Tensor[(96), float32], Tensor[(96), float32]) */;
  %406 = %399.0;
  %407 = acos(%402) /* ty=Tensor[(11, 13, 8), float64] */;
  %408 = %405.1;
  (%406, %407, %408, meta[relay.Constant][29] /* ty=Tensor[(96), uint8] */)
}

def @func_1632(%var_1612: Tensor[(96), uint8]) -> (Tensor[(96), float32],) {
  %409 = @func_1377() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(96), uint8], Tensor[(6, 8, 11), float32]) */;
  %410 = %409.1;
  %411 = cast(%var_1612, dtype="float32") /* ty=Tensor[(96), float32] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(1), int32] */;
  %413 = cast(%410, dtype="float32") /* ty=Tensor[(96), float32] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?), float32] */;
  %415 = floor_divide(%413, %414) /* ty=Tensor[(96), float32] */;
  (%415,)
}

def @func_1225(%var_1220: Tensor[(1, 702), uint16], %var_1221: Tensor[(6, 8, 11), bool], %var_1222: Tensor[(405), float32], %var_1223: Tensor[(88), bool], %var_1224: Tensor[(13), float32]) -> (Tensor[(528), int32], Tensor[(9, 13, 6), bool], Tensor[(1, 702), uint16], Tensor[(6, 8, 11), uint16], Tensor[(6, 8, 11), float32], Tensor[(405), float32], Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), float32], Tensor[(13, 1), float32], Tensor[(88), bool], Tensor[(13), float32]) {
  @func_1218(%var_1220, %var_1221, %var_1222, %var_1223, %var_1224) /* ty=(Tensor[(528), int32], Tensor[(9, 13, 6), bool], Tensor[(1, 702), uint16], Tensor[(6, 8, 11), uint16], Tensor[(6, 8, 11), float32], Tensor[(405), float32], Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), float32], Tensor[(13, 1), float32], Tensor[(88), bool], Tensor[(13), float32]) */
}

def @func_3951() -> (Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), uint16]) {
  %416 = @func_2419() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %417 = @func_1291() /* ty=Tensor[(15, 3, 9), uint16] */;
  %418 = %416.0;
  (%417, %418)
}

def @func_68(%var_40: Tensor[(13, 1), float32]) -> (Tensor[(13, 1), float32],) {
  %419 = cast(%var_40, dtype="float32") /* ty=Tensor[(13, 1), float32] */;
  %420 = asinh(%419) /* ty=Tensor[(13, 1), float32] */;
  (%420,)
}

def @func_5159() -> (Tensor[(6, 8, 11), float64],) {
  @func_5157() /* ty=(Tensor[(6, 8, 11), float64],) */
}

def @func_6132() -> (Tensor[(13, 1), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float32]) {
  %421 = @func_4818() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64], Tensor[(1, 13), float32], Tensor[(13, 1), float32]) */;
  %422 = cast(meta[relay.Constant][30] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %423 = reshape(%422, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %424 = @func_1337(%423) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(528), int32]) */;
  %425 = %421.3;
  %426 = %424.0;
  (%425, %426, meta[relay.Constant][30] /* ty=Tensor[(405), float32] */)
}

def @func_743(%var_693: Tensor[(15, 3, 9), float32]) -> (Tensor[(15, 3, 9), float32], uint16, Tensor[(88), bool], uint16, Tensor[(13), float32], Tensor[(15, 3, 9), uint16]) {
  %427 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
  %428 = %427.0;
  %429 = cast(%var_693, dtype="int16") /* ty=Tensor[(15, 3, 9), int16] */;
  %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%428, dtype="int16") /* ty=Tensor[(15, 3, 9), int16] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %433 = subtract(%431, %432) /* ty=Tensor[(15, 3, 9), int16] */;
  %434 = cast(%433, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %435 = cast(meta[relay.Constant][31] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %436 = cast(meta[relay.Constant][31] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %437 = cast(meta[relay.Constant][32] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %438 = cast(meta[relay.Constant][33] /* ty=Tensor[(13), float32] */, dtype="float32") /* ty=Tensor[(13), float32] */;
  %439 = reshape(%435, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), bool] */;
  %440 = reshape(%436, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), bool] */;
  %441 = reshape(%437, newshape=[]) /* ty=uint16 */;
  %442 = reshape(%438, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %443 = @func_530(%439, %440, %441, %442) /* ty=(Tensor[(11, 2, 4), bool], Tensor[(13), float32], uint16, Tensor[(72), uint16], Tensor[(13), float32], Tensor[(13, 1), float32]) */;
  %444 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
  %445 = asinh(%434) /* ty=Tensor[(15, 3, 9), float32] */;
  %446 = %443.2;
  %447 = %444.1;
  (%445, %446, meta[relay.Constant][31] /* ty=Tensor[(88), bool] */, meta[relay.Constant][32] /* ty=uint16 */, meta[relay.Constant][33] /* ty=Tensor[(13), float32] */, %447)
}

def @func_6979() -> (Tensor[(6, 8, 11), bool], Tensor[(13, 1), float32], Tensor[(1, 13), float32]) {
  %454 = fn () -> (Tensor[(6, 8, 11), bool], Tensor[(13, 1), float32], Tensor[(1, 13), float32]) {
    %448 = @func_4534() /* ty=(Tensor[(6, 8, 11), bool],) */;
    %449 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 13), float32] */, dtype="float32") /* ty=Tensor[(1, 13), float32] */;
    %450 = reshape(%449, newshape=[13, 1]) /* ty=Tensor[(13, 1), float32] */;
    %451 = @func_68(%450) /* ty=(Tensor[(13, 1), float32],) */;
    %452 = %448.0;
    %453 = %451.0;
    (%452, %453, meta[relay.Constant][34] /* ty=Tensor[(1, 13), float32] */)
  };
  %454() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(13, 1), float32], Tensor[(1, 13), float32]) */
}

def @func_2991(%var_2989: Tensor[(72), uint16], %var_2990: Tensor[(405), float64]) -> (Tensor[(13), float32], Tensor[(72), uint16], Tensor[(13), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float64], Tensor[(6, 8, 11), bool], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) {
  @func_2987(%var_2989, %var_2990) /* ty=(Tensor[(13), float32], Tensor[(72), uint16], Tensor[(13), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float64], Tensor[(6, 8, 11), bool], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) */
}

def @func_1635(%var_1633: Tensor[(96), uint8]) -> (Tensor[(96), float32],) {
  @func_1632(%var_1633) /* ty=(Tensor[(96), float32],) */
}

def @func_3316() -> Tensor[(15, 3, 9), float32] {
  %455 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
  %455.0
}

def @func_1902(%var_1901: Tensor[(96), uint8]) -> (Tensor[(6, 8, 11), float64], Tensor[(96), float32], Tensor[(96), float32]) {
  %463 = fn (%var_1885: Tensor[(96), uint8]) -> (Tensor[(6, 8, 11), float64], Tensor[(96), float32], Tensor[(96), float32]) {
    %456 = cast(%var_1885, dtype="uint8") /* ty=Tensor[(96), uint8] */;
    %457 = reshape(%456, newshape=[96]) /* ty=Tensor[(96), uint8] */;
    %458 = @func_1632(%457) /* ty=(Tensor[(96), float32],) */;
    %459 = cast(%var_1885, dtype="float32") /* ty=Tensor[(96), float32] */;
    %460 = @func_1502() /* ty=Tensor[(6, 8, 11), float64] */;
    %461 = %458.0;
    %462 = atan(%459) /* ty=Tensor[(96), float32] */;
    (%460, %461, %462)
  };
  %463(%var_1901) /* ty=(Tensor[(6, 8, 11), float64], Tensor[(96), float32], Tensor[(96), float32]) */
}

def @func_6134() -> (Tensor[(13, 1), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float32]) {
  @func_6132() /* ty=(Tensor[(13, 1), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float32]) */
}

def @func_7932(%var_7928: Tensor[(405), float32], %var_7929: Tensor[(1, 88), bool]) -> (Tensor[(6, 8, 11), uint8], Tensor[(9, 13, 6), bool], Tensor[(702), uint16], Tensor[(405), float32], Tensor[(1, 88), bool], Tensor[(13, 1), float32]) {
  %464 = @func_6142() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) */;
  %465 = cast(meta[relay.Constant][35] /* ty=Tensor[(702), uint16] */, dtype="uint16") /* ty=Tensor[(702), uint16] */;
  %466 = %464.1;
  %467 = cast(%466, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %468 = cast(%var_7928, dtype="float32") /* ty=Tensor[(405), float32] */;
  %469 = cast(%var_7929, dtype="bool") /* ty=Tensor[(1, 88), bool] */;
  %470 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 1), float32] */;
  %471 = reshape(%465, newshape=[1, 702]) /* ty=Tensor[(1, 702), uint16] */;
  %472 = reshape(%467, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), bool] */;
  %473 = reshape(%468, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %474 = reshape(%469, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %475 = reshape(%470, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %476 = @func_1218(%471, %472, %473, %474, %475) /* ty=(Tensor[(528), int32], Tensor[(9, 13, 6), bool], Tensor[(1, 702), uint16], Tensor[(6, 8, 11), uint16], Tensor[(6, 8, 11), float32], Tensor[(405), float32], Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), float32], Tensor[(13, 1), float32], Tensor[(88), bool], Tensor[(13), float32]) */;
  %477 = %476.1;
  (%466, %477, meta[relay.Constant][35] /* ty=Tensor[(702), uint16] */, %var_7928, %var_7929, meta[relay.Constant][36] /* ty=Tensor[(13, 1), float32] */)
}

def @func_2987(%var_2924: Tensor[(72), uint16], %var_2945: Tensor[(405), float64]) -> (Tensor[(13), float32], Tensor[(72), uint16], Tensor[(13), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float64], Tensor[(6, 8, 11), bool], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) {
  %478 = cast(%var_2924, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %479 = cast(meta[relay.Constant][37] /* ty=Tensor[(13), float32] */, dtype="float32") /* ty=Tensor[(13), float32] */;
  %480 = reshape(%478, newshape=[72]) /* ty=Tensor[(72), uint16] */;
  %481 = reshape(%479, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %482 = @func_2575(%480, %481) /* ty=(Tensor[(528), int32], Tensor[(13), float32], uint16, Tensor[(13), float32], Tensor[(6, 8, 11), bool], Tensor[(72), float64], Tensor[(13, 1), float32]) */;
  %483 = cast(%var_2945, dtype="float64") /* ty=Tensor[(405), float64] */;
  %484 = reshape(%483, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float64] */;
  %485 = @func_2224(%484) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), uint64]) */;
  %486 = @func_1571() /* ty=Tensor[(6, 8, 11), bool] */;
  %487 = @func_1859() /* ty=Tensor[(6, 8, 11), float64] */;
  %488 = cast(%487, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %489 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%486, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %492 = @func_2123() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %493 = @func_1717() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %494 = %482.1;
  %495 = %485.0;
  %496 = less_equal(%490, %491) /* ty=Tensor[(6, 8, 11), bool] */;
  %497 = %492.0;
  %498 = %493.0;
  (%494, %var_2924, meta[relay.Constant][37] /* ty=Tensor[(13), float32] */, %495, %var_2945, %496, %497, %498)
}

def @func_5756() -> Tensor[(11, 13, 8), uint8] {
  @func_4748() /* ty=Tensor[(11, 13, 8), uint8] */
}

def @func_2778() -> (Tensor[(15, 3, 9), float64], Tensor[(6, 8, 11), float32]) {
  %506 = fn () -> (Tensor[(15, 3, 9), float64], Tensor[(6, 8, 11), float32]) {
    %499 = @func_1291() /* ty=Tensor[(15, 3, 9), uint16] */;
    %500 = cast(%499, dtype="float64") /* ty=Tensor[(15, 3, 9), float64] */;
    %501 = log(%500) /* ty=Tensor[(15, 3, 9), float64] */;
    %502 = cast(%501, dtype="float64") /* ty=Tensor[(15, 3, 9), float64] */;
    %503 = @func_1923() /* ty=(Tensor[(6, 8, 11), float32],) */;
    %504 = sigmoid(%502) /* ty=Tensor[(15, 3, 9), float64] */;
    %505 = %503.0;
    (%504, %505)
  };
  %506() /* ty=(Tensor[(15, 3, 9), float64], Tensor[(6, 8, 11), float32]) */
}

def @func_7343(%var_7341: Tensor[(6, 8, 11), float32]) -> Tensor[(6, 8, 11), bool] {
  @func_7340(%var_7341) /* ty=Tensor[(6, 8, 11), bool] */
}

def @func_6039() -> (Tensor[(13, 16, 4), bool], Tensor[(13), float32], Tensor[(72), uint16], Tensor[(45, 9), float64], Tensor[(6, 8, 11), float32], Tensor[(88), bool], uint16, Tensor[(3, 18), float32]) {
  @func_6037() /* ty=(Tensor[(13, 16, 4), bool], Tensor[(13), float32], Tensor[(72), uint16], Tensor[(45, 9), float64], Tensor[(6, 8, 11), float32], Tensor[(88), bool], uint16, Tensor[(3, 18), float32]) */
}

def @func_3969() -> (Tensor[(6, 8, 11), float64],) {
  @func_3967() /* ty=(Tensor[(6, 8, 11), float64],) */
}

def @func_3810() -> (Tensor[(6, 8, 11), float64],) {
  @func_3808() /* ty=(Tensor[(6, 8, 11), float64],) */
}

def @func_6746(%var_6744: Tensor[(13), float32], %var_6745: Tensor[(405), uint16]) -> (Tensor[(11, 13, 8), uint8], Tensor[(15, 3, 9), float64], Tensor[(13), float32], Tensor[(405), uint16]) {
  %514 = fn (%var_6736: Tensor[(13), float32], %var_6737: Tensor[(405), uint16]) -> (Tensor[(11, 13, 8), uint8], Tensor[(15, 3, 9), float64], Tensor[(13), float32], Tensor[(405), uint16]) {
    %507 = cast(%var_6736, dtype="float32") /* ty=Tensor[(13), float32] */;
    %508 = cast(%var_6737, dtype="uint16") /* ty=Tensor[(405), uint16] */;
    %509 = reshape(%507, newshape=[13]) /* ty=Tensor[(13), float32] */;
    %510 = reshape(%508, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), uint16] */;
    %511 = @func_2886(%509, %510) /* ty=(Tensor[(528), int32], Tensor[(13), float32], Tensor[(15, 3, 9), float64], Tensor[(15, 3, 9), float64]) */;
    %512 = @func_4748() /* ty=Tensor[(11, 13, 8), uint8] */;
    %513 = %511.2;
    (%512, %513, %var_6736, %var_6737)
  };
  %514(%var_6744, %var_6745) /* ty=(Tensor[(11, 13, 8), uint8], Tensor[(15, 3, 9), float64], Tensor[(13), float32], Tensor[(405), uint16]) */
}

def @func_3858() -> Tensor[(6, 8, 11), float32] {
  @func_3856() /* ty=Tensor[(6, 8, 11), float32] */
}

def @func_5431() -> (Tensor[(15, 3, 9), uint16],) {
  %516 = fn () -> (Tensor[(15, 3, 9), uint16],) {
    %515 = @func_4854() /* ty=Tensor[(15, 3, 9), uint16] */;
    (%515,)
  };
  %516() /* ty=(Tensor[(15, 3, 9), uint16],) */
}

def @func_6584() -> Tensor[(6, 8, 11), bool] {
  @func_1571() /* ty=Tensor[(6, 8, 11), bool] */
}

def @func_5637() -> (Tensor[(15, 3, 9), uint16],) {
  @func_5635() /* ty=(Tensor[(15, 3, 9), uint16],) */
}

def @func_6776() -> (Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), float32]) {
  %517 = @func_6540() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %518 = @func_4534() /* ty=(Tensor[(6, 8, 11), bool],) */;
  %519 = %517.0;
  %520 = %518.0;
  %521 = @func_4517() /* ty=Tensor[(15, 3, 9), float32] */;
  (%519, %520, %521)
}

def @func_948(%var_947: Tensor[(13), float32]) -> (Tensor[(528), int32], Tensor[(13, 1), float32], Tensor[(13), float32]) {
  %528 = fn (%var_941: Tensor[(13), float32]) -> (Tensor[(528), int32], Tensor[(13, 1), float32], Tensor[(13), float32]) {
    %522 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
    %523 = cast(%var_941, dtype="float32") /* ty=Tensor[(13), float32] */;
    %524 = reshape(%523, newshape=[13, 1]) /* ty=Tensor[(13, 1), float32] */;
    %525 = @func_68(%524) /* ty=(Tensor[(13, 1), float32],) */;
    %526 = %522.2;
    %527 = %525.0;
    (%526, %527, %var_941)
  };
  %528(%var_947) /* ty=(Tensor[(528), int32], Tensor[(13, 1), float32], Tensor[(13), float32]) */
}

def @func_4166() -> (Tensor[(15, 3, 9), uint16],) {
  %531 = fn () -> (Tensor[(15, 3, 9), uint16],) {
    %529 = @func_1666() /* ty=(Tensor[(15, 3, 9), uint16],) */;
    %530 = %529.0;
    (%530,)
  };
  %531() /* ty=(Tensor[(15, 3, 9), uint16],) */
}

def @func_3378() -> Tensor[(15, 3, 9), uint16] {
  %533 = fn () -> Tensor[(15, 3, 9), uint16] {
    %532 = @func_2419() /* ty=(Tensor[(15, 3, 9), uint16],) */;
    %532.0
  };
  %533() /* ty=Tensor[(15, 3, 9), uint16] */
}

def @func_6226(%var_6224: Tensor[(1, 7), int16], %var_6225: Tensor[(3, 7), int16]) -> (Tensor[(3, 7), bool], Tensor[(6, 8, 11), float64], Tensor[(3, 8, 4), float64], Tensor[(15, 16), float32], Tensor[(240), float32]) {
  @func_6222(%var_6224, %var_6225) /* ty=(Tensor[(3, 7), bool], Tensor[(6, 8, 11), float64], Tensor[(3, 8, 4), float64], Tensor[(15, 16), float32], Tensor[(240), float32]) */
}

def @func_3597() -> (Tensor[(13, 16, 4), bool],) {
  %534 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 16, 4), int8] */, dtype="bool") /* ty=Tensor[(13, 16, 4), bool] */;
  %535 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(13, 16, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 16, 4), int8] */, dtype="bool") /* ty=Tensor[(13, 16, 4), bool] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %538 = greater_equal(%536, %537) /* ty=Tensor[(13, 16, 4), bool] */;
  (%538,)
}

def @func_1045(%var_1043: Tensor[(3, 8, 4), uint8]) -> (Tensor[(3, 8, 4), bool], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(6, 8, 11), bool]) {
  @func_1042(%var_1043) /* ty=(Tensor[(3, 8, 4), bool], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(6, 8, 11), bool]) */
}

def @func_6368() -> (Tensor[(88), bool],) {
  %541 = fn () -> (Tensor[(88), bool],) {
    %539 = @func_6037() /* ty=(Tensor[(13, 16, 4), bool], Tensor[(13), float32], Tensor[(72), uint16], Tensor[(45, 9), float64], Tensor[(6, 8, 11), float32], Tensor[(88), bool], uint16, Tensor[(3, 18), float32]) */;
    %540 = %539.5;
    (%540,)
  };
  %541() /* ty=(Tensor[(88), bool],) */
}

def @func_6422() -> Tensor[(15, 3, 9), uint16] {
  %542 = @func_4165() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %542.0
}

def @func_1042(%var_1012: Tensor[(3, 8, 4), uint8]) -> (Tensor[(3, 8, 4), bool], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(6, 8, 11), bool]) {
  %543 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 8, 1), uint8] */, dtype="bool") /* ty=Tensor[(3, 8, 1), bool] */;
  %544 = cast(%var_1012, dtype="bool") /* ty=Tensor[(3, 8, 4), bool] */;
  %545 = cast(meta[relay.Constant][41] /* ty=Tensor[(13), float32] */, dtype="float32") /* ty=Tensor[(13), float32] */;
  %546 = reshape(%545, newshape=[13, 1]) /* ty=Tensor[(13, 1), float32] */;
  %547 = @func_68(%546) /* ty=(Tensor[(13, 1), float32],) */;
  %548 = @func_988() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %549 = greater_equal(%543, %544) /* ty=Tensor[(3, 8, 4), bool] */;
  %550 = %547.0;
  %551 = %548.1;
  (%549, %550, meta[relay.Constant][41] /* ty=Tensor[(13), float32] */, %551)
}

def @func_7997() -> (Tensor[(13, 16, 4), bool], Tensor[(6, 8, 11), float64]) {
  %556 = fn () -> (Tensor[(13, 16, 4), bool], Tensor[(6, 8, 11), float64]) {
    %552 = @func_5892() /* ty=(Tensor[(6, 8, 11), float32], Tensor[(13, 16, 4), bool], Tensor[(6, 8, 11), float64]) */;
    %553 = @func_5892() /* ty=(Tensor[(6, 8, 11), float32], Tensor[(13, 16, 4), bool], Tensor[(6, 8, 11), float64]) */;
    %554 = %552.1;
    %555 = %553.2;
    (%554, %555)
  };
  %556() /* ty=(Tensor[(13, 16, 4), bool], Tensor[(6, 8, 11), float64]) */
}

def @func_2041(%var_2038: Tensor[(5, 15, 11), float32], %var_2039: Tensor[(5, 15, 11), float32], %var_2040: Tensor[(405), float32]) -> (Tensor[(5, 15, 11), float32], Tensor[(6, 8, 11), float64], uint16, Tensor[(405), float32], Tensor[(15, 3, 9), float32]) {
  %570 = fn (%var_2002: Tensor[(5, 15, 11), float32], %var_2003: Tensor[(5, 15, 11), float32], %var_2019: Tensor[(405), float32]) -> (Tensor[(5, 15, 11), float32], Tensor[(6, 8, 11), float64], uint16, Tensor[(405), float32], Tensor[(15, 3, 9), float32]) {
    %557 = cast(%var_2003, dtype="float32") /* ty=Tensor[(5, 15, 11), float32] */;
    %558 = shape_of(%var_2002, dtype="int32") /* ty=Tensor[(3), int32] */;
    %559 = cast(%var_2002, dtype="float32") /* ty=Tensor[(5, 15, 11), float32] */;
    %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %561 = @func_1123() /* ty=(Tensor[(6, 8, 11), float64],) */;
    %562 = cast(%var_2019, dtype="float32") /* ty=Tensor[(405), float32] */;
    %563 = reshape(%562, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
    %564 = @func_743(%563) /* ty=(Tensor[(15, 3, 9), float32], uint16, Tensor[(88), bool], uint16, Tensor[(13), float32], Tensor[(15, 3, 9), uint16]) */;
    %565 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
    %566 = maximum(%559, %560) /* ty=Tensor[(5, 15, 11), float32] */;
    %567 = %561.0;
    %568 = %564.3;
    %569 = %565.0;
    (%566, %567, %568, %var_2019, %569)
  };
  %570(%var_2038, %var_2039, %var_2040) /* ty=(Tensor[(5, 15, 11), float32], Tensor[(6, 8, 11), float64], uint16, Tensor[(405), float32], Tensor[(15, 3, 9), float32]) */
}

def @func_7311() -> (Tensor[(15, 3, 9), float32], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) {
  %576 = fn () -> (Tensor[(15, 3, 9), float32], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) {
    %571 = @func_4387() /* ty=(Tensor[(6, 8, 11), float64],) */;
    %572 = @func_6142() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) */;
    %573 = @func_3316() /* ty=Tensor[(15, 3, 9), float32] */;
    %574 = %571.0;
    %575 = %572.0;
    (%573, %574, %575)
  };
  %576() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) */
}

def @func_6861() -> Tensor[(15, 3, 9), uint16] {
  @func_1291() /* ty=Tensor[(15, 3, 9), uint16] */
}

def @func_4387() -> (Tensor[(6, 8, 11), float64],) {
  %577 = @func_3119() /* ty=(Tensor[(6, 8, 11), float32],) */;
  %578 = %577.0;
  %579 = cast(%578, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
  %580 = sqrt(%579) /* ty=Tensor[(6, 8, 11), float64] */;
  (%580,)
}

def @func_2649() -> Tensor[(6, 8, 11), float64] {
  %584 = fn () -> Tensor[(6, 8, 11), float64] {
    %581 = @func_2123() /* ty=(Tensor[(6, 8, 11), float64],) */;
    %582 = %581.0;
    %583 = cast(%582, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
    acosh(%583) /* ty=Tensor[(6, 8, 11), float64] */
  };
  %584() /* ty=Tensor[(6, 8, 11), float64] */
}

def @func_4419() -> (Tensor[(15, 3, 9), uint16], Tensor[(6, 3, 3), float32], Tensor[(3, 18), float32]) {
  %585 = @func_4198() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %586 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 18), float32] */, dtype="float32") /* ty=Tensor[(3, 18), float32] */;
  %587 = reshape(%586, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
  %588 = %585.0;
  %589 = @func_2618(%587) /* ty=Tensor[(6, 3, 3), float32] */;
  (%588, %589, meta[relay.Constant][42] /* ty=Tensor[(3, 18), float32] */)
}

def @func_5165() -> Tensor[(6, 8, 11), bool] {
  %591 = fn () -> Tensor[(6, 8, 11), bool] {
    %590 = @func_4534() /* ty=(Tensor[(6, 8, 11), bool],) */;
    %590.0
  };
  %591() /* ty=Tensor[(6, 8, 11), bool] */
}

def @func_1860() -> Tensor[(6, 8, 11), float64] {
  %593 = fn () -> Tensor[(6, 8, 11), float64] {
    %592 = @func_1729() /* ty=(Tensor[(6, 8, 11), float64],) */;
    %592.0
  };
  %593() /* ty=Tensor[(6, 8, 11), float64] */
}

def @func_1571() -> Tensor[(6, 8, 11), bool] {
  %594 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %594.1
}

def @func_7153(%var_7151: Tensor[(15, 3, 9), uint16]) -> Tensor[(15, 3, 9), bool] {
  @func_7150(%var_7151) /* ty=Tensor[(15, 3, 9), bool] */
}

def @func_6540() -> (Tensor[(15, 3, 9), uint16],) {
  %595 = @func_2419() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %596 = %595.0;
  (%596,)
}

def @func_2544(%var_2542: Tensor[(6, 8, 11), bool]) -> (Tensor[(15, 3, 9), uint16], Tensor[(528), int32], Tensor[(6, 8, 11), float64], Tensor[(96), float32], Tensor[(4, 24), uint8], Tensor[(825), float64], Tensor[(6, 8, 11), uint64]) {
  @func_2541(%var_2542) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(528), int32], Tensor[(6, 8, 11), float64], Tensor[(96), float32], Tensor[(4, 24), uint8], Tensor[(825), float64], Tensor[(6, 8, 11), uint64]) */
}

def @func_4535() -> (Tensor[(6, 8, 11), bool],) {
  %598 = fn () -> (Tensor[(6, 8, 11), bool],) {
    %597 = @func_1571() /* ty=Tensor[(6, 8, 11), bool] */;
    (%597,)
  };
  %598() /* ty=(Tensor[(6, 8, 11), bool],) */
}

def @func_5591() -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) {
  %603 = fn () -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) {
    %599 = @func_4818() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64], Tensor[(1, 13), float32], Tensor[(13, 1), float32]) */;
    %600 = @func_5157() /* ty=(Tensor[(6, 8, 11), float64],) */;
    %601 = %599.0;
    %602 = %600.0;
    (%601, %602)
  };
  %603() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) */
}

def @func_3119() -> (Tensor[(6, 8, 11), float32],) {
  %604 = @func_2451() /* ty=Tensor[(6, 8, 11), float32] */;
  (%604,)
}

def @func_3482() -> (Tensor[(6, 8, 11), float64], Tensor[(825), float32], Tensor[(405), float32]) {
  @func_3480() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(825), float32], Tensor[(405), float32]) */
}

def @func_6316(%var_6311: Tensor[(6, 8, 11), bool]) -> Tensor[(6, 8, 11), int32] {
  %605 = @func_1717() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %606 = %605.1;
  %607 = cast(%var_6311, dtype="int32") /* ty=Tensor[(6, 8, 11), int32] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%606, dtype="int32") /* ty=Tensor[(6, 8, 11), int32] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  subtract(%609, %610) /* ty=Tensor[(6, 8, 11), int32] */
}

def @func_1573() -> Tensor[(6, 8, 11), bool] {
  @func_1571() /* ty=Tensor[(6, 8, 11), bool] */
}

def @func_6319(%var_6317: Tensor[(6, 8, 11), bool]) -> Tensor[(6, 8, 11), int32] {
  @func_6316(%var_6317) /* ty=Tensor[(6, 8, 11), int32] */
}

def @func_3953() -> (Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), uint16]) {
  @func_3951() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), uint16]) */
}

def @func_4982() -> (Tensor[(6, 8, 11), float32],) {
  %615 = fn () -> (Tensor[(6, 8, 11), float32],) {
    %611 = @func_4901() /* ty=(Tensor[(6, 8, 11), float64],) */;
    %612 = %611.0;
    %613 = cast(%612, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
    %614 = atanh(%613) /* ty=Tensor[(6, 8, 11), float32] */;
    (%614,)
  };
  %615() /* ty=(Tensor[(6, 8, 11), float32],) */
}

def @func_7464() -> (Tensor[(6, 8, 11), float32], Tensor[(6, 8, 11), bool]) {
  @func_7462() /* ty=(Tensor[(6, 8, 11), float32], Tensor[(6, 8, 11), bool]) */
}

def @func_7790() -> (Tensor[(6, 8, 11), float64], Tensor[(11, 13, 8), float64], Tensor[(96), float32], Tensor[(96), uint8]) {
  @func_7788() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(11, 13, 8), float64], Tensor[(96), float32], Tensor[(96), uint8]) */
}

def @func_4131(%var_4130: Tensor[(12, 9, 1), float64]) -> (Tensor[(12, 9, 1), float64],) {
  %618 = fn (%var_4123: Tensor[(12, 9, 1), float64]) -> (Tensor[(12, 9, 1), float64],) {
    %616 = cast(%var_4123, dtype="float64") /* ty=Tensor[(12, 9, 1), float64] */;
    %617 = asin(%616) /* ty=Tensor[(12, 9, 1), float64] */;
    (%617,)
  };
  %618(%var_4130) /* ty=(Tensor[(12, 9, 1), float64],) */
}

def @func_1925() -> (Tensor[(6, 8, 11), float32],) {
  @func_1923() /* ty=(Tensor[(6, 8, 11), float32],) */
}

def @func_4818() -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64], Tensor[(1, 13), float32], Tensor[(13, 1), float32]) {
  %619 = @func_1729() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %620 = %619.0;
  %621 = cast(%620, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
  %622 = cast(meta[relay.Constant][43] /* ty=Tensor[(13, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 1), float32] */;
  %623 = reshape(%621, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), float64] */;
  %624 = reshape(%622, newshape=[1, 13]) /* ty=Tensor[(1, 13), float32] */;
  %625 = @func_1833(%623, %624) /* ty=(Tensor[(6, 8, 11), bool], Tensor[(13, 1), float32], Tensor[(1, 13), float32]) */;
  %626 = @func_4464() /* ty=Tensor[(6, 8, 11), float64] */;
  %627 = %625.2;
  (%626, %620, %627, meta[relay.Constant][43] /* ty=Tensor[(13, 1), float32] */)
}

def @func_7672() -> (Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), float64], Tensor[(405), float32]) {
  %634 = fn () -> (Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), float64], Tensor[(405), float32]) {
    %628 = @func_6296() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), uint16]) */;
    %629 = cast(meta[relay.Constant][44] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
    %630 = reshape(%629, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
    %631 = @func_1097(%630) /* ty=(Tensor[(15, 3, 9), bool], Tensor[(15, 3, 9), float64]) */;
    %632 = %628.0;
    %633 = %631.1;
    (%632, %633, meta[relay.Constant][44] /* ty=Tensor[(405), float32] */)
  };
  %634() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), float64], Tensor[(405), float32]) */
}

def @func_7635(%var_7633: Tensor[(405, 1), float32]) -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64], Tensor[(825), float32], Tensor[(405, 1), float32], Tensor[(6, 8, 11), float64]) {
  @func_7632(%var_7633) /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64], Tensor[(825), float32], Tensor[(405, 1), float32], Tensor[(6, 8, 11), float64]) */
}

def @func_7483() -> Tensor[(6, 8, 11), float64] {
  %636 = fn () -> Tensor[(6, 8, 11), float64] {
    %635 = @func_7310() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) */;
    %635.2
  };
  %636() /* ty=Tensor[(6, 8, 11), float64] */
}

def @func_1218(%var_1157: Tensor[(1, 702), uint16], %var_1159: Tensor[(6, 8, 11), bool], %var_1173: Tensor[(405), float32], %var_1206: Tensor[(88), bool], %var_1207: Tensor[(13), float32]) -> (Tensor[(528), int32], Tensor[(9, 13, 6), bool], Tensor[(1, 702), uint16], Tensor[(6, 8, 11), uint16], Tensor[(6, 8, 11), float32], Tensor[(405), float32], Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), float32], Tensor[(13, 1), float32], Tensor[(88), bool], Tensor[(13), float32]) {
  %637 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %638 = cast(meta[relay.Constant][45] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %639 = cast(%var_1157, dtype="uint16") /* ty=Tensor[(1, 702), uint16] */;
  %640 = reshape(%638, newshape=[]) /* ty=uint16 */;
  %641 = reshape(%639, newshape=[9, 13, 6]) /* ty=Tensor[(9, 13, 6), uint16] */;
  %642 = @func_452(%640, %641) /* ty=(Tensor[(9, 13, 6), bool],) */;
  %643 = %637.2;
  %644 = cast(%643, dtype="int32") /* ty=Tensor[(528), int32] */;
  %645 = reshape(%644, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), int32] */;
  %646 = @func_606(%645) /* ty=Tensor[(6, 8, 11), bool] */;
  %647 = cast(%var_1159, dtype="uint16") /* ty=Tensor[(6, 8, 11), uint16] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="uint16") /* ty=Tensor[(6, 8, 11), uint16] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %651 = cast(meta[relay.Constant][45] /* ty=uint16 */, dtype="float32") /* ty=float32 */;
  %652 = cast(%var_1159, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
  %653 = @func_1123() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %654 = cast(%var_1173, dtype="float32") /* ty=Tensor[(405), float32] */;
  %655 = reshape(%654, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %656 = @func_743(%655) /* ty=(Tensor[(15, 3, 9), float32], uint16, Tensor[(88), bool], uint16, Tensor[(13), float32], Tensor[(15, 3, 9), uint16]) */;
  %657 = %656.0;
  %658 = cast(%657, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %659 = cast(%var_1206, dtype="bool") /* ty=Tensor[(88), bool] */;
  %660 = cast(%var_1206, dtype="bool") /* ty=Tensor[(88), bool] */;
  %661 = cast(meta[relay.Constant][45] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %662 = cast(%var_1207, dtype="float32") /* ty=Tensor[(13), float32] */;
  %663 = reshape(%659, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), bool] */;
  %664 = reshape(%660, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), bool] */;
  %665 = reshape(%661, newshape=[]) /* ty=uint16 */;
  %666 = reshape(%662, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %667 = @func_530(%663, %664, %665, %666) /* ty=(Tensor[(11, 2, 4), bool], Tensor[(13), float32], uint16, Tensor[(72), uint16], Tensor[(13), float32], Tensor[(13, 1), float32]) */;
  %668 = %642.0;
  %669 = minimum(%649, %650) /* ty=Tensor[(6, 8, 11), uint16] */;
  %670 = divide(%651, %652) /* ty=Tensor[(6, 8, 11), float32] */;
  %671 = %653.0;
  %672 = acos(%658) /* ty=Tensor[(15, 3, 9), float32] */;
  %673 = %667.5;
  (%643, %668, %var_1157, %669, %670, %var_1173, %671, %672, %673, %var_1206, %var_1207)
}

def @func_4749() -> Tensor[(11, 13, 8), uint8] {
  %681 = fn () -> Tensor[(11, 13, 8), uint8] {
    %674 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 13, 8), int64] */, dtype="int64") /* ty=Tensor[(1, 13, 8), int64] */;
    %675 = cast(meta[relay.Constant][46] /* ty=Tensor[(11, 13, 8), int64] */, dtype="int64") /* ty=Tensor[(11, 13, 8), int64] */;
    %676 = subtract(%674, %675) /* ty=Tensor[(11, 13, 8), int64] */;
    %677 = cast(%676, dtype="uint8") /* ty=Tensor[(11, 13, 8), uint8] */;
    %678 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(11, 13, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %679 = cast(meta[relay.Constant][46] /* ty=Tensor[(11, 13, 8), int64] */, dtype="uint8") /* ty=Tensor[(11, 13, 8), uint8] */;
    %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    left_shift(%679, %680) /* ty=Tensor[(11, 13, 8), uint8] */
  };
  %681() /* ty=Tensor[(11, 13, 8), uint8] */
}

def @func_3967() -> (Tensor[(6, 8, 11), float64],) {
  %682 = @func_1502() /* ty=Tensor[(6, 8, 11), float64] */;
  (%682,)
}

def @func_1337(%var_1319: Tensor[(15, 3, 9), float32]) -> (Tensor[(15, 3, 9), uint16], Tensor[(528), int32]) {
  %683 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
  %684 = %683.0;
  %685 = cast(%var_1319, dtype="uint16") /* ty=Tensor[(15, 3, 9), uint16] */;
  %686 = shape_of(%684, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%684, dtype="uint16") /* ty=Tensor[(15, 3, 9), uint16] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %689 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %690 = right_shift(%687, %688) /* ty=Tensor[(15, 3, 9), uint16] */;
  %691 = %689.2;
  (%690, %691)
}

def @func_6542() -> (Tensor[(15, 3, 9), uint16],) {
  @func_6540() /* ty=(Tensor[(15, 3, 9), uint16],) */
}

def @func_6222(%var_6145: Tensor[(1, 7), int16], %var_6146: Tensor[(3, 7), int16]) -> (Tensor[(3, 7), bool], Tensor[(6, 8, 11), float64], Tensor[(3, 8, 4), float64], Tensor[(15, 16), float32], Tensor[(240), float32]) {
  %692 = cast(%var_6145, dtype="bool") /* ty=Tensor[(1, 7), bool] */;
  %693 = cast(%var_6146, dtype="bool") /* ty=Tensor[(3, 7), bool] */;
  %694 = cast(meta[relay.Constant][48] /* ty=Tensor[(96), uint8] */, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %695 = reshape(%694, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint8] */;
  %696 = @func_1042(%695) /* ty=(Tensor[(3, 8, 4), bool], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(6, 8, 11), bool]) */;
  %697 = %696.0;
  %698 = cast(meta[relay.Constant][48] /* ty=Tensor[(96), uint8] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %699 = shape_of(%697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(%697, dtype="float64") /* ty=Tensor[(3, 8, 4), float64] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %702 = cast(meta[relay.Constant][49] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %703 = cast(meta[relay.Constant][49] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %704 = reshape(%702, newshape=[15, 16]) /* ty=Tensor[(15, 16), float32] */;
  %705 = reshape(%703, newshape=[15, 16]) /* ty=Tensor[(15, 16), float32] */;
  %706 = @func_3236(%704, %705) /* ty=(Tensor[(15, 16), float32],) */;
  %707 = greater_equal(%692, %693) /* ty=Tensor[(3, 7), bool] */;
  %708 = @func_1859() /* ty=Tensor[(6, 8, 11), float64] */;
  %709 = multiply(%700, %701) /* ty=Tensor[(3, 8, 4), float64] */;
  %710 = %706.0;
  (%707, %708, %709, %710, meta[relay.Constant][49] /* ty=Tensor[(240), float32] */)
}

def @func_5635() -> (Tensor[(15, 3, 9), uint16],) {
  %711 = @func_1666() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %712 = %711.0;
  (%712,)
}

def @func_7462() -> (Tensor[(6, 8, 11), float32], Tensor[(6, 8, 11), bool]) {
  %713 = @func_5244() /* ty=(Tensor[(6, 8, 11), float32],) */;
  %714 = %713.0;
  %715 = @func_5164() /* ty=Tensor[(6, 8, 11), bool] */;
  (%714, %715)
}

def @func_5378(%var_5362: Tensor[(6, 8, 11), float64]) -> Tensor[(6, 8, 11), uint32] {
  %716 = @func_4633() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(6, 8, 11), float64]) */;
  %717 = %716.1;
  %718 = cast(%var_5362, dtype="uint32") /* ty=Tensor[(6, 8, 11), uint32] */;
  %719 = shape_of(%717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%717, dtype="uint32") /* ty=Tensor[(6, 8, 11), uint32] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%720, %721) /* ty=Tensor[(6, 8, 11), uint32] */
}

def @func_8018() -> (Tensor[(6, 8, 11), bool],) {
  %723 = fn () -> (Tensor[(6, 8, 11), bool],) {
    %722 = @func_5164() /* ty=Tensor[(6, 8, 11), bool] */;
    (%722,)
  };
  %723() /* ty=(Tensor[(6, 8, 11), bool],) */
}

def @func_3516() -> (Tensor[(6, 8, 11), bool],) {
  %724 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %725 = %724.1;
  (%725,)
}

def @func_1377() -> (Tensor[(6, 8, 11), bool], Tensor[(96), uint8], Tensor[(6, 8, 11), float32]) {
  %726 = cast(meta[relay.Constant][50] /* ty=Tensor[(96), uint8] */, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %727 = reshape(%726, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint8] */;
  %728 = @func_1042(%727) /* ty=(Tensor[(3, 8, 4), bool], Tensor[(13, 1), float32], Tensor[(13), float32], Tensor[(6, 8, 11), bool]) */;
  %729 = @func_1123() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %730 = %729.0;
  %731 = cast(%730, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
  %732 = %728.3;
  %733 = sin(%731) /* ty=Tensor[(6, 8, 11), float32] */;
  (%732, meta[relay.Constant][50] /* ty=Tensor[(96), uint8] */, %733)
}

def @func_3825(%var_3814: Tensor[(702), uint16], %var_3817: Tensor[(1, 13), float32]) -> (Tensor[(6, 8, 11), bool], Tensor[(6, 8, 11), float32], Tensor[(702), uint16], Tensor[(405), float32], Tensor[(88, 1), bool], Tensor[(1, 13), float32], Tensor[(15, 3, 9), uint16]) {
  %734 = @func_988() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %735 = cast(%var_3814, dtype="uint16") /* ty=Tensor[(702), uint16] */;
  %736 = %734.1;
  %737 = cast(%736, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %738 = cast(meta[relay.Constant][51] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %739 = cast(meta[relay.Constant][52] /* ty=Tensor[(88, 1), bool] */, dtype="bool") /* ty=Tensor[(88, 1), bool] */;
  %740 = cast(%var_3817, dtype="float32") /* ty=Tensor[(1, 13), float32] */;
  %741 = reshape(%735, newshape=[1, 702]) /* ty=Tensor[(1, 702), uint16] */;
  %742 = reshape(%737, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), bool] */;
  %743 = reshape(%738, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %744 = reshape(%739, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %745 = reshape(%740, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %746 = @func_1218(%741, %742, %743, %744, %745) /* ty=(Tensor[(528), int32], Tensor[(9, 13, 6), bool], Tensor[(1, 702), uint16], Tensor[(6, 8, 11), uint16], Tensor[(6, 8, 11), float32], Tensor[(405), float32], Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), float32], Tensor[(13, 1), float32], Tensor[(88), bool], Tensor[(13), float32]) */;
  %747 = cast(meta[relay.Constant][51] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %748 = reshape(%747, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %749 = @func_743(%748) /* ty=(Tensor[(15, 3, 9), float32], uint16, Tensor[(88), bool], uint16, Tensor[(13), float32], Tensor[(15, 3, 9), uint16]) */;
  %750 = %746.4;
  %751 = %749.5;
  (%736, %750, %var_3814, meta[relay.Constant][51] /* ty=Tensor[(405), float32] */, meta[relay.Constant][52] /* ty=Tensor[(88, 1), bool] */, %var_3817, %751)
}

def @func_3352(%var_3350: Tensor[(2, 44), bool], %var_3351: uint16) -> (Tensor[(6, 8, 11), float32], Tensor[(72), uint16], Tensor[(2, 44), bool], uint16, Tensor[(13), float32]) {
  @func_3348(%var_3350, %var_3351) /* ty=(Tensor[(6, 8, 11), float32], Tensor[(72), uint16], Tensor[(2, 44), bool], uint16, Tensor[(13), float32]) */
}

def @func_5157() -> (Tensor[(6, 8, 11), float64],) {
  %752 = @func_1859() /* ty=Tensor[(6, 8, 11), float64] */;
  (%752,)
}

def @func_4902() -> (Tensor[(6, 8, 11), float64],) {
  %755 = fn () -> (Tensor[(6, 8, 11), float64],) {
    %753 = @func_1123() /* ty=(Tensor[(6, 8, 11), float64],) */;
    %754 = %753.0;
    (%754,)
  };
  %755() /* ty=(Tensor[(6, 8, 11), float64],) */
}

def @func_4029() -> Tensor[(6, 8, 11), float64] {
  %757 = fn () -> Tensor[(6, 8, 11), float64] {
    %756 = @func_1123() /* ty=(Tensor[(6, 8, 11), float64],) */;
    %756.0
  };
  %757() /* ty=Tensor[(6, 8, 11), float64] */
}

def @func_5734(%var_5733: Tensor[(11, 13, 3), float64]) -> Tensor[(11, 13, 3), bool] {
  %762 = fn (%var_5728: Tensor[(11, 13, 3), float64]) -> Tensor[(11, 13, 3), bool] {
    %758 = cast(%var_5728, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
    %759 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(11, 13, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %760 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 13, 3), float64] */, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
    %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%760, %761) /* ty=Tensor[(11, 13, 3), bool] */
  };
  %762(%var_5733) /* ty=Tensor[(11, 13, 3), bool] */
}

def @func_5337(%var_5335: uint16) -> (Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), float32], uint16, Tensor[(22, 4), bool], uint16) {
  @func_5334(%var_5335) /* ty=(Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), float32], uint16, Tensor[(22, 4), bool], uint16) */
}

def @func_71(%var_69: Tensor[(13, 1), float32]) -> (Tensor[(13, 1), float32],) {
  @func_68(%var_69) /* ty=(Tensor[(13, 1), float32],) */
}

def @func_4335(%var_4270: Tensor[(405), float32]) -> (Tensor[(6, 8, 11), float64], Tensor[(528), int32], Tensor[(405), float32], Tensor[(6, 8, 11), float64], Tensor[(528), int32], Tensor[(6, 8, 11), float32]) {
  %763 = @func_2123() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %764 = cast(%var_4270, dtype="float32") /* ty=Tensor[(405), float32] */;
  %765 = reshape(%764, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %766 = @func_1337(%765) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(528), int32]) */;
  %767 = @func_1729() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %768 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %769 = %763.0;
  %770 = %766.1;
  %771 = %767.0;
  %772 = %768.2;
  %773 = @func_2451() /* ty=Tensor[(6, 8, 11), float32] */;
  (%769, %770, %var_4270, %771, %772, %773)
}

def @func_7390(%var_7388: Tensor[(6, 8, 11), float64], %var_7389: Tensor[(210), float64]) -> (Tensor[(6, 8, 11), int8], Tensor[(6, 7, 5), float64], Tensor[(210), float64], Tensor[(6, 8, 11), bool], Tensor[(11, 13, 3), bool], Tensor[(429, 1), float64], Tensor[(45, 9), float64]) {
  @func_7386(%var_7388, %var_7389) /* ty=(Tensor[(6, 8, 11), int8], Tensor[(6, 7, 5), float64], Tensor[(210), float64], Tensor[(6, 8, 11), bool], Tensor[(11, 13, 3), bool], Tensor[(429, 1), float64], Tensor[(45, 9), float64]) */
}

def @func_2284(%var_2233: Tensor[(4, 8, 1), bool], %var_2234: Tensor[(4, 8, 2), bool], %var_2244: Tensor[(702), uint16], %var_2245: Tensor[(528), bool], %var_2246: Tensor[(405), float32], %var_2248: Tensor[(13), float32]) -> (Tensor[(4, 8, 2), bool], Tensor[(88), bool], Tensor[(702), uint16], Tensor[(528), bool], Tensor[(405), float32], Tensor[(13), float32], Tensor[(13, 1), float32], Tensor[(4, 8, 88), uint64], Tensor[(6, 8, 11), float64], Tensor[(4, 8, 1), float32]) {
  %774 = cast(%var_2233, dtype="bool") /* ty=Tensor[(4, 8, 1), bool] */;
  %775 = cast(%var_2234, dtype="bool") /* ty=Tensor[(4, 8, 2), bool] */;
  %776 = cast(%var_2244, dtype="uint16") /* ty=Tensor[(702), uint16] */;
  %777 = cast(%var_2245, dtype="bool") /* ty=Tensor[(528), bool] */;
  %778 = cast(%var_2246, dtype="float32") /* ty=Tensor[(405), float32] */;
  %779 = cast(meta[relay.Constant][54] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %780 = cast(%var_2248, dtype="float32") /* ty=Tensor[(13), float32] */;
  %781 = reshape(%776, newshape=[1, 702]) /* ty=Tensor[(1, 702), uint16] */;
  %782 = reshape(%777, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), bool] */;
  %783 = reshape(%778, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %784 = reshape(%779, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %785 = reshape(%780, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %786 = @func_1218(%781, %782, %783, %784, %785) /* ty=(Tensor[(528), int32], Tensor[(9, 13, 6), bool], Tensor[(1, 702), uint16], Tensor[(6, 8, 11), uint16], Tensor[(6, 8, 11), float32], Tensor[(405), float32], Tensor[(6, 8, 11), float64], Tensor[(15, 3, 9), float32], Tensor[(13, 1), float32], Tensor[(88), bool], Tensor[(13), float32]) */;
  %787 = cast(%var_2245, dtype="float64") /* ty=Tensor[(528), float64] */;
  %788 = cast(%var_2248, dtype="float32") /* ty=Tensor[(13), float32] */;
  %789 = reshape(%787, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), float64] */;
  %790 = reshape(%788, newshape=[1, 13]) /* ty=Tensor[(1, 13), float32] */;
  %791 = @func_1833(%789, %790) /* ty=(Tensor[(6, 8, 11), bool], Tensor[(13, 1), float32], Tensor[(1, 13), float32]) */;
  %792 = cast(%var_2233, dtype="uint64") /* ty=Tensor[(4, 8, 1), uint64] */;
  %793 = cast(meta[relay.Constant][54] /* ty=Tensor[(88), bool] */, dtype="uint64") /* ty=Tensor[(88), uint64] */;
  %794 = @func_2123() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %795 = cast(%var_2233, dtype="float32") /* ty=Tensor[(4, 8, 1), float32] */;
  %796 = logical_and(%774, %775) /* ty=Tensor[(4, 8, 2), bool] */;
  %797 = %786.9;
  %798 = %791.1;
  %799 = left_shift(%792, %793) /* ty=Tensor[(4, 8, 88), uint64] */;
  %800 = %794.0;
  %801 = sigmoid(%795) /* ty=Tensor[(4, 8, 1), float32] */;
  (%796, %797, %var_2244, %var_2245, %var_2246, %var_2248, %798, %799, %800, %801)
}

def @func_5953() -> (Tensor[(4, 16, 15), float64],) {
  %802 = cast(meta[relay.Constant][55] /* ty=Tensor[(4, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(4, 16, 15), float64] */;
  %803 = log10(%802) /* ty=Tensor[(4, 16, 15), float64] */;
  (%803,)
}

def @func_6474(%var_6473: Tensor[(7, 9, 11), float64]) -> (Tensor[(528), int32], Tensor[(405, 1), float32], Tensor[(7, 9, 11), float32]) {
  %812 = fn (%var_6451: Tensor[(7, 9, 11), float64]) -> (Tensor[(528), int32], Tensor[(405, 1), float32], Tensor[(7, 9, 11), float32]) {
    %804 = cast(meta[relay.Constant][56] /* ty=Tensor[(405, 1), float32] */, dtype="float32") /* ty=Tensor[(405, 1), float32] */;
    %805 = reshape(%804, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
    %806 = @func_1337(%805) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(528), int32]) */;
    %807 = cast(%var_6451, dtype="float64") /* ty=Tensor[(7, 9, 11), float64] */;
    %808 = sqrt(%807) /* ty=Tensor[(7, 9, 11), float64] */;
    %809 = cast(%808, dtype="float32") /* ty=Tensor[(7, 9, 11), float32] */;
    %810 = %806.1;
    %811 = cosh(%809) /* ty=Tensor[(7, 9, 11), float32] */;
    (%810, meta[relay.Constant][56] /* ty=Tensor[(405, 1), float32] */, %811)
  };
  %812(%var_6473) /* ty=(Tensor[(528), int32], Tensor[(405, 1), float32], Tensor[(7, 9, 11), float32]) */
}

def @func_7206() -> (Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), uint16]) {
  %817 = fn () -> (Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), uint16]) {
    %813 = @func_5430() /* ty=(Tensor[(15, 3, 9), uint16],) */;
    %814 = @func_6964() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(13), float32], Tensor[(88), bool], uint16) */;
    %815 = %813.0;
    %816 = %814.0;
    (%815, %816)
  };
  %817() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), uint16]) */
}

def @func_5955() -> (Tensor[(4, 16, 15), float64],) {
  @func_5953() /* ty=(Tensor[(4, 16, 15), float64],) */
}

def @func_3422(%var_3420: Tensor[(88), bool], %var_3421: uint16) -> (Tensor[(15, 3, 9), uint16], Tensor[(13), float32], Tensor[(88), bool], uint16) {
  %826 = fn (%var_3413: Tensor[(88), bool], %var_3414: uint16) -> (Tensor[(15, 3, 9), uint16], Tensor[(13), float32], Tensor[(88), bool], uint16) {
    %818 = @func_2419() /* ty=(Tensor[(15, 3, 9), uint16],) */;
    %819 = cast(%var_3413, dtype="bool") /* ty=Tensor[(88), bool] */;
    %820 = cast(%var_3414, dtype="uint16") /* ty=uint16 */;
    %821 = reshape(%819, newshape=[2, 44]) /* ty=Tensor[(2, 44), bool] */;
    %822 = reshape(%820, newshape=[]) /* ty=uint16 */;
    %823 = @func_3348(%821, %822) /* ty=(Tensor[(6, 8, 11), float32], Tensor[(72), uint16], Tensor[(2, 44), bool], uint16, Tensor[(13), float32]) */;
    %824 = %818.0;
    %825 = %823.4;
    (%824, %825, %var_3413, %var_3414)
  };
  %826(%var_3420, %var_3421) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(13), float32], Tensor[(88), bool], uint16) */
}

def @func_1460() -> (Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) {
  %854 = fn () -> (Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) {
    %827 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
    %828 = %827.1;
    %829 = cast(%828, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
    %830 = log(%829) /* ty=Tensor[(6, 8, 11), float32] */;
    %831 = cast(%828, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
    %832 = shape_of(%830, dtype="int32") /* ty=Tensor[(3), int32] */;
    %833 = cast(%830, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
    %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %835 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
    %836 = cast(%828, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
    %837 = shape_of(%830, dtype="int32") /* ty=Tensor[(3), int32] */;
    %838 = cast(%830, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
    %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %840 = cast(%830, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
    %841 = cosh(%840) /* ty=Tensor[(6, 8, 11), float32] */;
    %842 = cast(%841, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
    %843 = asinh(%842) /* ty=Tensor[(6, 8, 11), float32] */;
    %844 = cast(%843, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
    %845 = log2(%844) /* ty=Tensor[(6, 8, 11), float32] */;
    %846 = cast(%841, dtype="uint8") /* ty=Tensor[(6, 8, 11), uint8] */;
    %847 = shape_of(%845, dtype="int32") /* ty=Tensor[(3), int32] */;
    %848 = cast(%845, dtype="uint8") /* ty=Tensor[(6, 8, 11), uint8] */;
    %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %850 = not_equal(%833, %834) /* ty=Tensor[(6, 8, 11), bool] */;
    %851 = %835.1;
    %852 = floor_mod(%838, %839) /* ty=Tensor[(6, 8, 11), float64] */;
    %853 = right_shift(%848, %849) /* ty=Tensor[(6, 8, 11), uint8] */;
    (%850, %851, %852, %853)
  };
  %854() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) */
}

def @func_3318() -> Tensor[(15, 3, 9), float32] {
  @func_3316() /* ty=Tensor[(15, 3, 9), float32] */
}

def @func_7150(%var_7141: Tensor[(15, 3, 9), uint16]) -> Tensor[(15, 3, 9), bool] {
  %855 = @func_2419() /* ty=(Tensor[(15, 3, 9), uint16],) */;
  %856 = %855.0;
  %857 = cast(%var_7141, dtype="bool") /* ty=Tensor[(15, 3, 9), bool] */;
  %858 = shape_of(%856, dtype="int32") /* ty=Tensor[(3), int32] */;
  %859 = cast(%856, dtype="bool") /* ty=Tensor[(15, 3, 9), bool] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%859, %860) /* ty=Tensor[(15, 3, 9), bool] */
}

def @func_2541(%var_2534: Tensor[(6, 8, 11), bool]) -> (Tensor[(15, 3, 9), uint16], Tensor[(528), int32], Tensor[(6, 8, 11), float64], Tensor[(96), float32], Tensor[(4, 24), uint8], Tensor[(825), float64], Tensor[(6, 8, 11), uint64]) {
  %861 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %862 = @func_988() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) */;
  %863 = cast(meta[relay.Constant][57] /* ty=Tensor[(4, 24), uint8] */, dtype="uint8") /* ty=Tensor[(4, 24), uint8] */;
  %864 = reshape(%863, newshape=[96]) /* ty=Tensor[(96), uint8] */;
  %865 = @func_1900(%864) /* ty=(Tensor[(6, 8, 11), float64], Tensor[(96), float32], Tensor[(96), float32]) */;
  %866 = @func_1291() /* ty=Tensor[(15, 3, 9), uint16] */;
  %867 = cast(%866, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  %868 = reshape(%867, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %869 = @func_2165(%868) /* ty=(Tensor[(6, 8, 11), float64], uint16, Tensor[(825), float32], Tensor[(405), float32], Tensor[(15, 3, 9), bool]) */;
  %870 = %869.2;
  %871 = cast(%870, dtype="float64") /* ty=Tensor[(825), float64] */;
  %872 = sigmoid(%871) /* ty=Tensor[(825), float64] */;
  %873 = cast(%872, dtype="float64") /* ty=Tensor[(825), float64] */;
  %874 = @func_1377() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(96), uint8], Tensor[(6, 8, 11), float32]) */;
  %875 = %874.0;
  %876 = cast(%var_2534, dtype="uint64") /* ty=Tensor[(6, 8, 11), uint64] */;
  %877 = shape_of(%875, dtype="int32") /* ty=Tensor[(3), int32] */;
  %878 = cast(%875, dtype="uint64") /* ty=Tensor[(6, 8, 11), uint64] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %880 = %861.2;
  %881 = %862.0;
  %882 = %865.1;
  %883 = acos(%873) /* ty=Tensor[(825), float64] */;
  %884 = bitwise_or(%878, %879) /* ty=Tensor[(6, 8, 11), uint64] */;
  (%866, %880, %881, %882, meta[relay.Constant][57] /* ty=Tensor[(4, 24), uint8] */, %883, %884)
}

def @func_5893() -> (Tensor[(6, 8, 11), float32], Tensor[(13, 16, 4), bool], Tensor[(6, 8, 11), float64]) {
  %891 = fn () -> (Tensor[(6, 8, 11), float32], Tensor[(13, 16, 4), bool], Tensor[(6, 8, 11), float64]) {
    %885 = @func_3119() /* ty=(Tensor[(6, 8, 11), float32],) */;
    %886 = @func_3597() /* ty=(Tensor[(13, 16, 4), bool],) */;
    %887 = @func_5590() /* ty=(Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), float64]) */;
    %888 = %885.0;
    %889 = %886.0;
    %890 = %887.0;
    (%888, %889, %890)
  };
  %891() /* ty=(Tensor[(6, 8, 11), float32], Tensor[(13, 16, 4), bool], Tensor[(6, 8, 11), float64]) */
}

def @func_7126(%var_7124: Tensor[(16, 11, 8), bool], %var_7125: Tensor[(16, 11, 8), bool]) -> (Tensor[(16, 11, 8), bool],) {
  %902 = fn (%var_7109: Tensor[(16, 11, 8), bool], %var_7110: Tensor[(16, 11, 8), bool]) -> (Tensor[(16, 11, 8), bool],) {
    %892 = cast(%var_7110, dtype="bool") /* ty=Tensor[(16, 11, 8), bool] */;
    %893 = shape_of(%var_7109, dtype="int32") /* ty=Tensor[(3), int32] */;
    %894 = cast(%var_7109, dtype="bool") /* ty=Tensor[(16, 11, 8), bool] */;
    %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %896 = logical_and(%894, %895) /* ty=Tensor[(16, 11, 8), bool] */;
    %897 = cast(%var_7109, dtype="bool") /* ty=Tensor[(16, 11, 8), bool] */;
    %898 = shape_of(%896, dtype="int32") /* ty=Tensor[(3), int32] */;
    %899 = cast(%896, dtype="bool") /* ty=Tensor[(16, 11, 8), bool] */;
    %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %901 = logical_or(%899, %900) /* ty=Tensor[(16, 11, 8), bool] */;
    (%901,)
  };
  %902(%var_7124, %var_7125) /* ty=(Tensor[(16, 11, 8), bool],) */
}

def @func_1340(%var_1338: Tensor[(15, 3, 9), float32]) -> (Tensor[(15, 3, 9), uint16], Tensor[(528), int32]) {
  @func_1337(%var_1338) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(528), int32]) */
}

def @func_7074(%var_7072: Tensor[(6, 7, 5), float64]) -> Tensor[(6, 7, 5), float64] {
  @func_7071(%var_7072) /* ty=Tensor[(6, 7, 5), float64] */
}

def @func_608(%var_607: Tensor[(6, 8, 11), int32]) -> Tensor[(6, 8, 11), bool] {
  %908 = fn (%var_591: Tensor[(6, 8, 11), int32]) -> Tensor[(6, 8, 11), bool] {
    %903 = cast(meta[relay.Constant][58] /* ty=Tensor[(6, 1, 11), int32] */, dtype="bool") /* ty=Tensor[(6, 1, 11), bool] */;
    %904 = cast(%var_591, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
    %905 = less(%903, %904) /* ty=Tensor[(6, 8, 11), bool] */;
    %906 = cast(meta[relay.Constant][58] /* ty=Tensor[(6, 1, 11), int32] */, dtype="bool") /* ty=Tensor[(6, 1, 11), bool] */;
    %907 = cast(%905, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
    logical_and(%906, %907) /* ty=Tensor[(6, 8, 11), bool] */
  };
  %908(%var_607) /* ty=Tensor[(6, 8, 11), bool] */
}

def @func_6896() -> (Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), float64]) {
  %913 = fn () -> (Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), float64]) {
    %909 = @func_2419() /* ty=(Tensor[(15, 3, 9), uint16],) */;
    %910 = @func_1459() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) */;
    %911 = %909.0;
    %912 = %910.2;
    (%911, %912)
  };
  %913() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), float64]) */
}

def @func_1503() -> Tensor[(6, 8, 11), float64] {
  %915 = fn () -> Tensor[(6, 8, 11), float64] {
    %914 = @func_1459() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) */;
    %914.2
  };
  %915() /* ty=Tensor[(6, 8, 11), float64] */
}

def @func_7071(%var_7033: Tensor[(6, 7, 5), float64]) -> Tensor[(6, 7, 5), float64] {
  %916 = cast(meta[relay.Constant][59] /* ty=Tensor[(6, 7, 5), float64] */, dtype="float64") /* ty=Tensor[(6, 7, 5), float64] */;
  %917 = shape_of(%var_7033, dtype="int32") /* ty=Tensor[(3), int32] */;
  %918 = cast(%var_7033, dtype="float64") /* ty=Tensor[(6, 7, 5), float64] */;
  %919 = dyn.reshape(%916, %917, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%918, %919) /* ty=Tensor[(6, 7, 5), float64] */
}

def @func_6586() -> Tensor[(6, 8, 11), bool] {
  @func_6584() /* ty=Tensor[(6, 8, 11), bool] */
}

def @func_7340(%var_7331: Tensor[(6, 8, 11), float32]) -> Tensor[(6, 8, 11), bool] {
  %920 = @func_2777() /* ty=(Tensor[(15, 3, 9), float64], Tensor[(6, 8, 11), float32]) */;
  %921 = %920.1;
  %922 = cast(%var_7331, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %923 = shape_of(%921, dtype="int32") /* ty=Tensor[(3), int32] */;
  %924 = cast(%921, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%924, %925) /* ty=Tensor[(6, 8, 11), bool] */
}

def @func_7870(%var_7867: Tensor[(6, 9, 10), int8], %var_7868: Tensor[(3, 24), uint16], %var_7869: Tensor[(13), float32]) -> (Tensor[(15, 3, 9), uint16], Tensor[(6, 9, 10), bool], Tensor[(13, 1), float32], Tensor[(3, 24), uint16], Tensor[(13), float32], Tensor[(6, 9, 10), uint16], Tensor[(6, 8, 11), int32], Tensor[(24, 22), bool]) {
  @func_7865(%var_7867, %var_7868, %var_7869) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 9, 10), bool], Tensor[(13, 1), float32], Tensor[(3, 24), uint16], Tensor[(13), float32], Tensor[(6, 9, 10), uint16], Tensor[(6, 8, 11), int32], Tensor[(24, 22), bool]) */
}

def @func_4338(%var_4336: Tensor[(405), float32]) -> (Tensor[(6, 8, 11), float64], Tensor[(528), int32], Tensor[(405), float32], Tensor[(6, 8, 11), float64], Tensor[(528), int32], Tensor[(6, 8, 11), float32]) {
  @func_4335(%var_4336) /* ty=(Tensor[(6, 8, 11), float64], Tensor[(528), int32], Tensor[(405), float32], Tensor[(6, 8, 11), float64], Tensor[(528), int32], Tensor[(6, 8, 11), float32]) */
}

def @func_2167(%var_2166: Tensor[(405), float32]) -> (Tensor[(6, 8, 11), float64], uint16, Tensor[(825), float32], Tensor[(405), float32], Tensor[(15, 3, 9), bool]) {
  %940 = fn (%var_2153: Tensor[(405), float32]) -> (Tensor[(6, 8, 11), float64], uint16, Tensor[(825), float32], Tensor[(405), float32], Tensor[(15, 3, 9), bool]) {
    %926 = @func_1123() /* ty=(Tensor[(6, 8, 11), float64],) */;
    %927 = cast(meta[relay.Constant][60] /* ty=Tensor[(825), float32] */, dtype="float32") /* ty=Tensor[(825), float32] */;
    %928 = cast(meta[relay.Constant][60] /* ty=Tensor[(825), float32] */, dtype="float32") /* ty=Tensor[(825), float32] */;
    %929 = cast(%var_2153, dtype="float32") /* ty=Tensor[(405), float32] */;
    %930 = reshape(%927, newshape=[5, 15, 11]) /* ty=Tensor[(5, 15, 11), float32] */;
    %931 = reshape(%928, newshape=[5, 15, 11]) /* ty=Tensor[(5, 15, 11), float32] */;
    %932 = reshape(%929, newshape=[405]) /* ty=Tensor[(405), float32] */;
    %933 = @func_2037(%930, %931, %932) /* ty=(Tensor[(5, 15, 11), float32], Tensor[(6, 8, 11), float64], uint16, Tensor[(405), float32], Tensor[(15, 3, 9), float32]) */;
    %934 = cast(%var_2153, dtype="float32") /* ty=Tensor[(405), float32] */;
    %935 = reshape(%934, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
    %936 = @func_1097(%935) /* ty=(Tensor[(15, 3, 9), bool], Tensor[(15, 3, 9), float64]) */;
    %937 = %926.0;
    %938 = %933.2;
    %939 = %936.0;
    (%937, %938, meta[relay.Constant][60] /* ty=Tensor[(825), float32] */, %var_2153, %939)
  };
  %940(%var_2166) /* ty=(Tensor[(6, 8, 11), float64], uint16, Tensor[(825), float32], Tensor[(405), float32], Tensor[(15, 3, 9), bool]) */
}

def @func_5479(%var_5478: Tensor[(15, 3, 9), uint16]) -> (Tensor[(15, 3, 9), bool], Tensor[(15, 3, 9), bool], Tensor[(528), int32], Tensor[(15, 3, 9), float32]) {
  %958 = fn (%var_5453: Tensor[(15, 3, 9), uint16]) -> (Tensor[(15, 3, 9), bool], Tensor[(15, 3, 9), bool], Tensor[(528), int32], Tensor[(15, 3, 9), float32]) {
    %941 = @func_3377() /* ty=Tensor[(15, 3, 9), uint16] */;
    %942 = cast(meta[relay.Constant][61] /* ty=Tensor[(15, 3, 9), uint16] */, dtype="bool") /* ty=Tensor[(15, 3, 9), bool] */;
    %943 = shape_of(%941, dtype="int32") /* ty=Tensor[(3), int32] */;
    %944 = cast(%941, dtype="bool") /* ty=Tensor[(15, 3, 9), bool] */;
    %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %946 = cast(%var_5453, dtype="bool") /* ty=Tensor[(15, 3, 9), bool] */;
    %947 = shape_of(%941, dtype="int32") /* ty=Tensor[(3), int32] */;
    %948 = cast(%941, dtype="bool") /* ty=Tensor[(15, 3, 9), bool] */;
    %949 = dyn.reshape(%946, %947, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %950 = less(%944, %945) /* ty=Tensor[(15, 3, 9), bool] */;
    %951 = cast(%950, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
    %952 = reshape(%951, newshape=[405]) /* ty=Tensor[(405), float32] */;
    %953 = @func_4335(%952) /* ty=(Tensor[(6, 8, 11), float64], Tensor[(528), int32], Tensor[(405), float32], Tensor[(6, 8, 11), float64], Tensor[(528), int32], Tensor[(6, 8, 11), float32]) */;
    %954 = cast(%941, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
    %955 = logical_or(%948, %949) /* ty=Tensor[(15, 3, 9), bool] */;
    %956 = %953.1;
    %957 = atanh(%954) /* ty=Tensor[(15, 3, 9), float32] */;
    (%950, %955, %956, %957)
  };
  %958(%var_5478) /* ty=(Tensor[(15, 3, 9), bool], Tensor[(15, 3, 9), bool], Tensor[(528), int32], Tensor[(15, 3, 9), float32]) */
}

def @func_988() -> (Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), bool]) {
  %959 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %960 = %959.1;
  %961 = cast(%960, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
  %962 = cast(%960, dtype="int32") /* ty=Tensor[(6, 8, 11), int32] */;
  %963 = reshape(%962, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), int32] */;
  %964 = exp(%961) /* ty=Tensor[(6, 8, 11), float64] */;
  %965 = @func_606(%963) /* ty=Tensor[(6, 8, 11), bool] */;
  (%964, %965)
}

def @func_7601(%var_7597: Tensor[(8, 1, 16), float32], %var_7598: Tensor[(88), bool], %var_7599: uint16, %var_7600: Tensor[(13, 1), float32]) -> (Tensor[(8, 1, 16), float32], Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), float64], Tensor[(13), float32], Tensor[(88), bool], uint16, Tensor[(13, 1), float32]) {
  %984 = fn (%var_7569: Tensor[(8, 1, 16), float32], %var_7585: Tensor[(88), bool], %var_7586: uint16, %var_7587: Tensor[(13, 1), float32]) -> (Tensor[(8, 1, 16), float32], Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), float64], Tensor[(13), float32], Tensor[(88), bool], uint16, Tensor[(13, 1), float32]) {
    %966 = cast(%var_7569, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
    %967 = @func_6132() /* ty=(Tensor[(13, 1), float32], Tensor[(15, 3, 9), uint16], Tensor[(405), float32]) */;
    %968 = %967.1;
    %969 = cast(%968, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
    %970 = reshape(%969, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
    %971 = @func_1097(%970) /* ty=(Tensor[(15, 3, 9), bool], Tensor[(15, 3, 9), float64]) */;
    %972 = cast(%var_7585, dtype="bool") /* ty=Tensor[(88), bool] */;
    %973 = cast(%var_7585, dtype="bool") /* ty=Tensor[(88), bool] */;
    %974 = cast(%var_7586, dtype="uint16") /* ty=uint16 */;
    %975 = cast(%var_7587, dtype="float32") /* ty=Tensor[(13, 1), float32] */;
    %976 = reshape(%972, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), bool] */;
    %977 = reshape(%973, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), bool] */;
    %978 = reshape(%974, newshape=[]) /* ty=uint16 */;
    %979 = reshape(%975, newshape=[13]) /* ty=Tensor[(13), float32] */;
    %980 = @func_530(%976, %977, %978, %979) /* ty=(Tensor[(11, 2, 4), bool], Tensor[(13), float32], uint16, Tensor[(72), uint16], Tensor[(13), float32], Tensor[(13, 1), float32]) */;
    %981 = atanh(%966) /* ty=Tensor[(8, 1, 16), float32] */;
    %982 = %971.1;
    %983 = %980.1;
    (%981, %968, %982, %983, %var_7585, %var_7586, %var_7587)
  };
  %984(%var_7597, %var_7598, %var_7599, %var_7600) /* ty=(Tensor[(8, 1, 16), float32], Tensor[(15, 3, 9), uint16], Tensor[(15, 3, 9), float64], Tensor[(13), float32], Tensor[(88), bool], uint16, Tensor[(13, 1), float32]) */
}

def @func_813() -> (Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) {
  %985 = @func_680() /* ty=(Tensor[(15, 3, 9), float32], Tensor[(15, 3, 9), uint16]) */;
  %986 = cast(meta[relay.Constant][62] /* ty=Tensor[(528), int32] */, dtype="int32") /* ty=Tensor[(528), int32] */;
  %987 = reshape(%986, newshape=[6, 8, 11]) /* ty=Tensor[(6, 8, 11), int32] */;
  %988 = %985.1;
  %989 = @func_606(%987) /* ty=Tensor[(6, 8, 11), bool] */;
  (%988, %989, meta[relay.Constant][62] /* ty=Tensor[(528), int32] */)
}

def @func_4856() -> Tensor[(15, 3, 9), uint16] {
  @func_4854() /* ty=Tensor[(15, 3, 9), uint16] */
}

def @func_3348(%var_3338: Tensor[(2, 44), bool], %var_3339: uint16) -> (Tensor[(6, 8, 11), float32], Tensor[(72), uint16], Tensor[(2, 44), bool], uint16, Tensor[(13), float32]) {
  %990 = @func_3119() /* ty=(Tensor[(6, 8, 11), float32],) */;
  %991 = cast(%var_3338, dtype="bool") /* ty=Tensor[(2, 44), bool] */;
  %992 = cast(%var_3338, dtype="bool") /* ty=Tensor[(2, 44), bool] */;
  %993 = cast(%var_3339, dtype="uint16") /* ty=uint16 */;
  %994 = cast(meta[relay.Constant][63] /* ty=Tensor[(13), float32] */, dtype="float32") /* ty=Tensor[(13), float32] */;
  %995 = reshape(%991, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), bool] */;
  %996 = reshape(%992, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), bool] */;
  %997 = reshape(%993, newshape=[]) /* ty=uint16 */;
  %998 = reshape(%994, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %999 = @func_530(%995, %996, %997, %998) /* ty=(Tensor[(11, 2, 4), bool], Tensor[(13), float32], uint16, Tensor[(72), uint16], Tensor[(13), float32], Tensor[(13, 1), float32]) */;
  %1000 = %990.0;
  %1001 = %999.3;
  (%1000, %1001, %var_3338, %var_3339, meta[relay.Constant][63] /* ty=Tensor[(13), float32] */)
}

def @func_4517() -> Tensor[(15, 3, 9), float32] {
  @func_3316() /* ty=Tensor[(15, 3, 9), float32] */
}

def @func_6424() -> Tensor[(15, 3, 9), uint16] {
  @func_6422() /* ty=Tensor[(15, 3, 9), uint16] */
}

def @func_6778() -> (Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), float32]) {
  @func_6776() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), float32]) */
}

def @func_6508() -> (Tensor[(6, 8, 11), bool], Tensor[(11, 13, 8), uint8]) {
  %1004 = fn () -> (Tensor[(6, 8, 11), bool], Tensor[(11, 13, 8), uint8]) {
    %1002 = @func_1571() /* ty=Tensor[(6, 8, 11), bool] */;
    %1003 = @func_4748() /* ty=Tensor[(11, 13, 8), uint8] */;
    (%1002, %1003)
  };
  %1004() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(11, 13, 8), uint8]) */
}

def @func_1125() -> (Tensor[(6, 8, 11), float64],) {
  @func_1123() /* ty=(Tensor[(6, 8, 11), float64],) */
}

def @func_1833(%var_1815: Tensor[(6, 8, 11), float64], %var_1826: Tensor[(1, 13), float32]) -> (Tensor[(6, 8, 11), bool], Tensor[(13, 1), float32], Tensor[(1, 13), float32]) {
  %1005 = @func_1459() /* ty=(Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), float64], Tensor[(6, 8, 11), uint8]) */;
  %1006 = %1005.2;
  %1007 = cast(%var_1815, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %1008 = shape_of(%1006, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1009 = cast(%1006, dtype="bool") /* ty=Tensor[(6, 8, 11), bool] */;
  %1010 = dyn.reshape(%1007, %1008, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1011 = cast(%var_1826, dtype="float32") /* ty=Tensor[(1, 13), float32] */;
  %1012 = reshape(%1011, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %1013 = @func_946(%1012) /* ty=(Tensor[(528), int32], Tensor[(13, 1), float32], Tensor[(13), float32]) */;
  %1014 = logical_or(%1009, %1010) /* ty=Tensor[(6, 8, 11), bool] */;
  %1015 = %1013.1;
  (%1014, %1015, %var_1826)
}

def @func_5334(%var_5301: uint16) -> (Tensor[(6, 8, 11), bool], Tensor[(15, 3, 9), float32], uint16, Tensor[(22, 4), bool], uint16) {
  %1016 = @func_3516() /* ty=(Tensor[(6, 8, 11), bool],) */;
  %1017 = cast(meta[relay.Constant][64] /* ty=Tensor[(22, 4), bool] */, dtype="bool") /* ty=Tensor[(22, 4), bool] */;
  %1018 = cast(%var_5301, dtype="uint16") /* ty=uint16 */;
  %1019 = reshape(%1017, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %1020 = reshape(%1018, newshape=[]) /* ty=uint16 */;
  %1021 = @func_3419(%1019, %1020) /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(13), float32], Tensor[(88), bool], uint16) */;
  %1022 = %1016.0;
  %1023 = @func_4517() /* ty=Tensor[(15, 3, 9), float32] */;
  %1024 = %1021.3;
  (%1022, %1023, %1024, meta[relay.Constant][64] /* ty=Tensor[(22, 4), bool] */, %var_5301)
}

def @func_7386(%var_7354: Tensor[(6, 8, 11), float64], %var_7360: Tensor[(210), float64]) -> (Tensor[(6, 8, 11), int8], Tensor[(6, 7, 5), float64], Tensor[(210), float64], Tensor[(6, 8, 11), bool], Tensor[(11, 13, 3), bool], Tensor[(429, 1), float64], Tensor[(45, 9), float64]) {
  %1025 = @func_5157() /* ty=(Tensor[(6, 8, 11), float64],) */;
  %1026 = %1025.0;
  %1027 = cast(%var_7354, dtype="int8") /* ty=Tensor[(6, 8, 11), int8] */;
  %1028 = shape_of(%1026, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1029 = cast(%1026, dtype="int8") /* ty=Tensor[(6, 8, 11), int8] */;
  %1030 = dyn.reshape(%1027, %1028, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1031 = cast(%var_7360, dtype="float64") /* ty=Tensor[(210), float64] */;
  %1032 = reshape(%1031, newshape=[6, 7, 5]) /* ty=Tensor[(6, 7, 5), float64] */;
  %1033 = @func_813() /* ty=(Tensor[(15, 3, 9), uint16], Tensor[(6, 8, 11), bool], Tensor[(528), int32]) */;
  %1034 = cast(meta[relay.Constant][65] /* ty=Tensor[(429, 1), float64] */, dtype="float64") /* ty=Tensor[(429, 1), float64] */;
  %1035 = reshape(%1034, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), float64] */;
  %1036 = @func_6037() /* ty=(Tensor[(13, 16, 4), bool], Tensor[(13), float32], Tensor[(72), uint16], Tensor[(45, 9), float64], Tensor[(6, 8, 11), float32], Tensor[(88), bool], uint16, Tensor[(3, 18), float32]) */;
  %1037 = multiply(%1029, %1030) /* ty=Tensor[(6, 8, 11), int8] */;
  %1038 = @func_7071(%1032) /* ty=Tensor[(6, 7, 5), float64] */;
  %1039 = %1033.1;
  %1040 = @func_5732(%1035) /* ty=Tensor[(11, 13, 3), bool] */;
  %1041 = %1036.3;
  (%1037, %1038, %var_7360, %1039, %1040, meta[relay.Constant][65] /* ty=Tensor[(429, 1), float64] */, %1041)
}

def @func_2365() -> (Tensor[(15, 3, 9), uint16],) {
  %1043 = fn () -> (Tensor[(15, 3, 9), uint16],) {
    %1042 = @func_1291() /* ty=Tensor[(15, 3, 9), uint16] */;
    (%1042,)
  };
  %1043() /* ty=(Tensor[(15, 3, 9), uint16],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen23/build/output.py:2868: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen23/build/output.py", line 2873, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(840) tvmgen_default_fused_divide_kernel0(float* __restrict__ T_divide, float* __restrict__ placeholder, float* __restrict__ placeholder1) {
  T_divide[(((int)threadIdx.x))] = (placeholder[(((int)threadIdx.x))] / placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

