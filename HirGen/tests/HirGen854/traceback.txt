==========mod==========
#[version = "0.0.5"]
def @func_2030() -> (Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) {
  %0 = @func_1489() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 1), float64]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %2 = reshape(%1, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
  %3 = @func_809(%2) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
  %4 = %0.1;
  %5 = %3.0;
  (%4, %5, meta[relay.Constant][0] /* ty=Tensor[(648), float32] */)
}

def @func_8208() -> (Tensor[(2, 4, 1), float32], Tensor[(100), float32]) {
  %6 = @func_2960() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %7 = @func_6415() /* ty=(Tensor[(100), float32],) */;
  %8 = %6.0;
  %9 = %7.0;
  (%8, %9)
}

def @func_3798() -> Tensor[(2, 4, 1), float32] {
  %10 = @func_2238() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %10.0
}

def @func_6577() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %11 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  %12 = @func_2494() /* ty=Tensor[(2, 4, 1), float32] */;
  (%11, %12)
}

def @func_6267() -> (Tensor[(180), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %13 = @func_5802() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %14 = @func_3343() /* ty=Tensor[(180), float32] */;
  %15 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  %16 = @func_2494() /* ty=Tensor[(2, 4, 1), float32] */;
  %17 = %13.1;
  (%14, %15, %16, %17)
}

def @func_6618(%var_6604: Tensor[(16, 3, 8), float64], %var_6609: Tensor[(1296), uint64]) -> (Tensor[(16, 3, 8), float64], Tensor[(13, 10, 5), float64], Tensor[(1296), uint64], Tensor[(2, 4, 1), float32], Tensor[(16, 3, 8), float32]) {
  %18 = cast(%var_6604, dtype="float64") /* ty=Tensor[(16, 3, 8), float64] */;
  %19 = cast(%var_6609, dtype="uint64") /* ty=Tensor[(1296), uint64] */;
  %20 = reshape(%19, newshape=[1296]) /* ty=Tensor[(1296), uint64] */;
  %21 = @func_6190(%20) /* ty=(Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(9, 16, 9), int64], uint64, Tensor[(1296), uint64], Tensor[(648), float32], Tensor[(13, 10, 5), float64], Tensor[(650), float64], Tensor[(2, 4, 1), float32]) */;
  %22 = cast(%var_6604, dtype="float32") /* ty=Tensor[(16, 3, 8), float32] */;
  %23 = acos(%18) /* ty=Tensor[(16, 3, 8), float64] */;
  %24 = %21.6;
  %25 = @func_2807() /* ty=Tensor[(2, 4, 1), float32] */;
  %26 = sin(%22) /* ty=Tensor[(16, 3, 8), float32] */;
  (%23, %24, %var_6609, %25, %26)
}

def @func_6128() -> (Tensor[(648), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %27 = @func_2666() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(648), float32]) */;
  %28 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
  %29 = %27.5;
  %30 = @func_2807() /* ty=Tensor[(2, 4, 1), float32] */;
  %31 = %28.1;
  (%29, %30, %31)
}

def @func_2011(%var_1905: Tensor[(13, 3, 7), float64], %var_1923: Tensor[(100), float32]) -> (Tensor[(13, 7, 5), uint64], Tensor[(65, 7), uint64], Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(25, 4), float32], Tensor[(3, 15, 4), float32], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), float64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), uint32]) {
  %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(65, 7), uint64] */, dtype="uint64") /* ty=Tensor[(65, 7), uint64] */;
  %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(65, 7), uint64] */, dtype="uint64") /* ty=Tensor[(65, 7), uint64] */;
  %34 = reshape(%32, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint64] */;
  %35 = reshape(%33, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint64] */;
  %36 = @func_424(%34, %35) /* ty=(Tensor[(13, 7, 5), uint64],) */;
  %37 = cast(%var_1923, dtype="float32") /* ty=Tensor[(100), float32] */;
  %38 = reshape(%37, newshape=[100]) /* ty=Tensor[(100), float32] */;
  %39 = @func_1454(%38) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
  %40 = cast(%var_1923, dtype="float32") /* ty=Tensor[(100), float32] */;
  %41 = cast(%var_1923, dtype="float32") /* ty=Tensor[(100), float32] */;
  %42 = reshape(%40, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %43 = reshape(%41, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %44 = @func_524(%42, %43) /* ty=(Tensor[(4, 5, 5), bool],) */;
  %45 = @func_1776() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */;
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %47 = reshape(%46, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), float32] */;
  %48 = @func_1017(%47) /* ty=(Tensor[(3, 15, 4), float32],) */;
  %49 = @func_1415() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(25, 4), float32]) */;
  %50 = %48.0;
  %51 = cast(%50, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %52 = reshape(%51, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), float32] */;
  %53 = @func_1017(%52) /* ty=(Tensor[(3, 15, 4), float32],) */;
  %54 = %36.0;
  %55 = cast(%54, dtype="uint64") /* ty=Tensor[(13, 7, 5), uint64] */;
  %56 = cast(%54, dtype="uint64") /* ty=Tensor[(13, 7, 5), uint64] */;
  %57 = reshape(%55, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint64] */;
  %58 = reshape(%56, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint64] */;
  %59 = @func_424(%57, %58) /* ty=(Tensor[(13, 7, 5), uint64],) */;
  %60 = cast(meta[relay.Constant][3] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %61 = cast(meta[relay.Constant][3] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %62 = reshape(%60, newshape=[7, 16, 5]) /* ty=Tensor[(7, 16, 5), uint64] */;
  %63 = reshape(%61, newshape=[7, 16, 5]) /* ty=Tensor[(7, 16, 5), uint64] */;
  %64 = @func_1559(%62, %63) /* ty=(Tensor[(7, 16, 5), uint64], Tensor[(7, 16, 5), int64]) */;
  %65 = cast(%var_1923, dtype="float32") /* ty=Tensor[(100), float32] */;
  %66 = %49.3;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %68 = reshape(%65, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %69 = reshape(%67, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %70 = @func_524(%68, %69) /* ty=(Tensor[(4, 5, 5), bool],) */;
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 3, 7), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 7), float64] */;
  %72 = cast(%var_1905, dtype="float64") /* ty=Tensor[(13, 3, 7), float64] */;
  %73 = power(%71, %72) /* ty=Tensor[(13, 3, 7), float64] */;
  %74 = cast(%73, dtype="float32") /* ty=Tensor[(13, 3, 7), float32] */;
  %75 = sqrt(%74) /* ty=Tensor[(13, 3, 7), float32] */;
  %76 = cast(%75, dtype="float64") /* ty=Tensor[(13, 3, 7), float64] */;
  %77 = log10(%76) /* ty=Tensor[(13, 3, 7), float64] */;
  %78 = cast(%77, dtype="float64") /* ty=Tensor[(13, 3, 7), float64] */;
  %79 = @func_1776() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */;
  %80 = cast(%73, dtype="bool") /* ty=Tensor[(13, 3, 7), bool] */;
  %81 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%77, dtype="bool") /* ty=Tensor[(13, 3, 7), bool] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %84 = logical_and(%82, %83) /* ty=Tensor[(13, 3, 7), bool] */;
  %85 = cast(%77, dtype="uint32") /* ty=Tensor[(13, 3, 7), uint32] */;
  %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%84, dtype="uint32") /* ty=Tensor[(13, 3, 7), uint32] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %89 = %39.1;
  %90 = %44.0;
  %91 = %45.2;
  %92 = %53.0;
  %93 = %59.0;
  %94 = %64.0;
  %95 = %70.0;
  %96 = tan(%78) /* ty=Tensor[(13, 3, 7), float64] */;
  %97 = %79.2;
  %98 = maximum(%87, %88) /* ty=Tensor[(13, 3, 7), uint32] */;
  (%54, meta[relay.Constant][1] /* ty=Tensor[(65, 7), uint64] */, %89, %var_1923, %90, %91, %50, meta[relay.Constant][2] /* ty=Tensor[(180), float32] */, %66, %92, %93, %94, meta[relay.Constant][3] /* ty=Tensor[(560), uint64] */, %95, %96, %97, %98)
}

def @func_3994() -> (Tensor[(2, 4, 1), float32], Tensor[(100), float32], Tensor[(648), float32]) {
  %99 = @func_3514() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %100 = cast(meta[relay.Constant][5] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %101 = reshape(%100, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
  %102 = @func_809(%101) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
  %103 = %99.1;
  %104 = %102.2;
  (%103, %104, meta[relay.Constant][5] /* ty=Tensor[(648), float32] */)
}

def @func_5223() -> (Tensor[(2, 4, 1), float32],) {
  %105 = @func_2526() /* ty=Tensor[(2, 4, 1), float32] */;
  (%105,)
}

def @func_6350() -> (Tensor[(1, 15, 1), float32], Tensor[(2, 4, 560), int16]) {
  %106 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 15, 1), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 1), float32] */;
  %107 = @func_4775() /* ty=(Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 560), int16]) */;
  %108 = sin(%106) /* ty=Tensor[(1, 15, 1), float32] */;
  %109 = %107.3;
  (%108, %109)
}

def @func_3837() -> (Tensor[(180), float32],) {
  %110 = @func_2976() /* ty=(Tensor[(180), float32],) */;
  %111 = %110.0;
  (%111,)
}

def @func_8262() -> (Tensor[(2, 4, 560), bool], Tensor[(2, 4, 1), float64]) {
  %112 = @func_6350() /* ty=(Tensor[(1, 15, 1), float32], Tensor[(2, 4, 560), int16]) */;
  %113 = %112.1;
  %114 = cast(%113, dtype="float32") /* ty=Tensor[(2, 4, 560), float32] */;
  %115 = sqrt(%114) /* ty=Tensor[(2, 4, 560), float32] */;
  %116 = cast(%113, dtype="bool") /* ty=Tensor[(2, 4, 560), bool] */;
  %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%115, dtype="bool") /* ty=Tensor[(2, 4, 560), bool] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %120 = @func_4339() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %121 = not_equal(%118, %119) /* ty=Tensor[(2, 4, 560), bool] */;
  %122 = %120.2;
  (%121, %122)
}

def @func_740(%var_722: Tensor[(50, 2), float32]) -> (Tensor[(4, 15, 16), float32], Tensor[(50, 2), uint64], Tensor[(4, 5, 5), bool]) {
  %123 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 16), float32] */;
  %124 = cast(%var_722, dtype="float32") /* ty=Tensor[(50, 2), float32] */;
  %125 = cast(%var_722, dtype="float32") /* ty=Tensor[(50, 2), float32] */;
  %126 = reshape(%124, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %127 = reshape(%125, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %128 = @func_524(%126, %127) /* ty=(Tensor[(4, 5, 5), bool],) */;
  %129 = %128.0;
  %130 = cast(%129, dtype="uint64") /* ty=Tensor[(4, 5, 5), uint64] */;
  %131 = shape_of(%var_722, dtype="int32") /* ty=Tensor[(2), int32] */;
  %132 = cast(%var_722, dtype="uint64") /* ty=Tensor[(50, 2), uint64] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %134 = maximum(%132, %133) /* ty=Tensor[(50, 2), uint64] */;
  %135 = cast(%134, dtype="float32") /* ty=Tensor[(50, 2), float32] */;
  %136 = cast(%var_722, dtype="float32") /* ty=Tensor[(50, 2), float32] */;
  %137 = reshape(%135, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %138 = reshape(%136, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %139 = @func_524(%137, %138) /* ty=(Tensor[(4, 5, 5), bool],) */;
  %140 = log2(%123) /* ty=Tensor[(4, 15, 16), float32] */;
  %141 = %139.0;
  (%140, %134, %141)
}

def @func_8352() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %142 = @func_6577() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %143 = @func_5223() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %144 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  %145 = %142.0;
  %146 = %143.0;
  (%144, %145, %146)
}

def @func_6480(%var_6477: Tensor[(455), uint64]) -> (Tensor[(2, 4, 1), float32], Tensor[(100), float32], Tensor[(455), uint64]) {
  %147 = cast(%var_6477, dtype="uint64") /* ty=Tensor[(455), uint64] */;
  %148 = reshape(%147, newshape=[455]) /* ty=Tensor[(455), uint64] */;
  %149 = @func_2477(%148) /* ty=(Tensor[(100), float32], Tensor[(13, 7, 5), uint64], Tensor[(455), uint64], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64]) */;
  %150 = @func_3282() /* ty=Tensor[(2, 4, 1), float32] */;
  %151 = %149.0;
  (%150, %151, %var_6477)
}

def @func_7189() -> (Tensor[(180), float32], Tensor[(2, 4, 1), float32]) {
  %152 = @func_6267() /* ty=(Tensor[(180), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %153 = @func_1891() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %154 = %152.0;
  %155 = %153.0;
  (%154, %155)
}

def @func_5530() -> Tensor[(180), float32] {
  %156 = @func_3837() /* ty=(Tensor[(180), float32],) */;
  %156.0
}

def @func_1891() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) {
  %157 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %158 = @func_1489() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 1), float64]) */;
  %159 = %158.2;
  %160 = cast(%159, dtype="float64") /* ty=Tensor[(2, 4, 1), float64] */;
  %161 = %157.0;
  %162 = sigmoid(%160) /* ty=Tensor[(2, 4, 1), float64] */;
  (%161, %162)
}

def @func_5049() -> Tensor[(2, 4, ?), float32] {
  %163 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %164 = %163.0;
  %165 = cast(%164, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  %166 = rsqrt(%165) /* ty=Tensor[(2, 4, 1), float32] */;
  %167 = @func_3514() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %168 = %167.3;
  %169 = cast(%168, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  %170 = shape_of(%166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%166, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%171, %172) /* ty=Tensor[(2, 4, ?), float32] */
}

def @func_6034() -> (Tensor[(2, 4, 4), int64], Tensor[(2, 4, 1), float32]) {
  %173 = @func_4339() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %174 = %173.2;
  %175 = cast(%174, dtype="int64") /* ty=Tensor[(2, 4, 1), int64] */;
  %176 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 4, 4), float64] */, dtype="int64") /* ty=Tensor[(2, 4, 4), int64] */;
  %177 = @func_3057() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %178 = bitwise_and(%175, %176) /* ty=Tensor[(2, 4, 4), int64] */;
  %179 = %177.0;
  (%178, %179)
}

def @func_6190(%var_6165: Tensor[(1296), uint64]) -> (Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(9, 16, 9), int64], uint64, Tensor[(1296), uint64], Tensor[(648), float32], Tensor[(13, 10, 5), float64], Tensor[(650), float64], Tensor[(2, 4, 1), float32]) {
  %180 = cast(meta[relay.Constant][9] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %181 = cast(%var_6165, dtype="uint64") /* ty=Tensor[(1296), uint64] */;
  %182 = cast(meta[relay.Constant][10] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %183 = reshape(%180, newshape=[]) /* ty=uint64 */;
  %184 = reshape(%181, newshape=[9, 16, 9]) /* ty=Tensor[(9, 16, 9), uint64] */;
  %185 = reshape(%182, newshape=[648]) /* ty=Tensor[(648), float32] */;
  %186 = @func_4208(%183, %184, %185) /* ty=(Tensor[(9, 16, 9), uint64], Tensor[(9, 16, 9), int64], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
  %187 = cast(meta[relay.Constant][11] /* ty=Tensor[(650), float64] */, dtype="float64") /* ty=Tensor[(650), float64] */;
  %188 = reshape(%187, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float64] */;
  %189 = @func_2315(%188) /* ty=(Tensor[(13, 10, 5), float64],) */;
  %190 = @func_5802() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %191 = @func_3762() /* ty=Tensor[(2, 4, 1), float64] */;
  %192 = @func_2807() /* ty=Tensor[(2, 4, 1), float32] */;
  %193 = %186.1;
  %194 = %189.0;
  %195 = %190.1;
  (%191, %192, %193, meta[relay.Constant][9] /* ty=uint64 */, %var_6165, meta[relay.Constant][10] /* ty=Tensor[(648), float32] */, %194, meta[relay.Constant][11] /* ty=Tensor[(650), float64] */, %195)
}

def @func_7922(%var_7910: Tensor[(1296), uint64]) -> (Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(180), float32], Tensor[(180), float32], Tensor[(9, 9, 8), float32], uint64, Tensor[(1296), uint64], Tensor[(648), float32]) {
  %196 = @func_5480() /* ty=(Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(2, 4, 6), int16], Tensor[(2, 4, 650), float32], Tensor[(2, 4, 48), float32]) */;
  %197 = @func_5412() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(180), float32]) */;
  %198 = @func_3837() /* ty=(Tensor[(180), float32],) */;
  %199 = cast(meta[relay.Constant][12] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %200 = cast(%var_7910, dtype="uint64") /* ty=Tensor[(1296), uint64] */;
  %201 = cast(meta[relay.Constant][13] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %202 = reshape(%199, newshape=[]) /* ty=uint64 */;
  %203 = reshape(%200, newshape=[9, 16, 9]) /* ty=Tensor[(9, 16, 9), uint64] */;
  %204 = reshape(%201, newshape=[648]) /* ty=Tensor[(648), float32] */;
  %205 = @func_4208(%202, %203, %204) /* ty=(Tensor[(9, 16, 9), uint64], Tensor[(9, 16, 9), int64], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
  %206 = %196.0;
  %207 = @func_5530() /* ty=Tensor[(180), float32] */;
  %208 = %197.1;
  %209 = %198.0;
  %210 = %205.2;
  (%206, %207, %208, %209, %210, meta[relay.Constant][12] /* ty=uint64 */, %var_7910, meta[relay.Constant][13] /* ty=Tensor[(648), float32] */)
}

def @func_4433() -> (Tensor[(2, 4, 1), float64], Tensor[(180), float32]) {
  %211 = @func_3036() /* ty=(Tensor[(3, 15, 4), float32], Tensor[(2, 4, 180), bool], Tensor[(2, 4, 1), float64]) */;
  %212 = %211.2;
  %213 = @func_3343() /* ty=Tensor[(180), float32] */;
  (%212, %213)
}

def @func_4208(%var_4173: uint64, %var_4174: Tensor[(9, 16, 9), uint64], %var_4206: Tensor[(648), float32]) -> (Tensor[(9, 16, 9), uint64], Tensor[(9, 16, 9), int64], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) {
  %214 = cast(%var_4173, dtype="uint64") /* ty=uint64 */;
  %215 = cast(%var_4174, dtype="uint64") /* ty=Tensor[(9, 16, 9), uint64] */;
  %216 = maximum(%214, %215) /* ty=Tensor[(9, 16, 9), uint64] */;
  %217 = cast(%216, dtype="uint64") /* ty=Tensor[(9, 16, 9), uint64] */;
  %218 = shape_of(%var_4174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%var_4174, dtype="uint64") /* ty=Tensor[(9, 16, 9), uint64] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %221 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 16, 9), uint64] */, dtype="int64") /* ty=Tensor[(9, 16, 9), int64] */;
  %222 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%216, dtype="int64") /* ty=Tensor[(9, 16, 9), int64] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %225 = cast(%var_4206, dtype="float32") /* ty=Tensor[(648), float32] */;
  %226 = reshape(%225, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
  %227 = @func_809(%226) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
  %228 = left_shift(%219, %220) /* ty=Tensor[(9, 16, 9), uint64] */;
  %229 = right_shift(%223, %224) /* ty=Tensor[(9, 16, 9), int64] */;
  %230 = %227.0;
  (%228, %229, %230, %var_4206)
}

def @func_5282() -> (Tensor[(2, 4, 180), bool],) {
  %231 = @func_3036() /* ty=(Tensor[(3, 15, 4), float32], Tensor[(2, 4, 180), bool], Tensor[(2, 4, 1), float64]) */;
  %232 = %231.1;
  (%232,)
}

def @func_7069() -> (Tensor[(2, 4, 1), float32],) {
  %233 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
  %234 = %233.1;
  (%234,)
}

def @func_8152(%var_8135: float32) -> (Tensor[(15, 11, 1), bool], Tensor[(2, 4, 1), float32], Tensor[(15, 11, 1), uint8], Tensor[(2, 4, 1), float64]) {
  %235 = cast(%var_8135, dtype="bool") /* ty=bool */;
  %236 = cast(meta[relay.Constant][15] /* ty=Tensor[(15, 11, 1), float32] */, dtype="bool") /* ty=Tensor[(15, 11, 1), bool] */;
  %237 = cast(meta[relay.Constant][15] /* ty=Tensor[(15, 11, 1), float32] */, dtype="uint8") /* ty=Tensor[(15, 11, 1), uint8] */;
  %238 = cast(%var_8135, dtype="uint8") /* ty=uint8 */;
  %239 = @func_4475() /* ty=(Tensor[(2, 4, 1), float64], Tensor[(9, 9, 8), float32]) */;
  %240 = not_equal(%235, %236) /* ty=Tensor[(15, 11, 1), bool] */;
  %241 = @func_4537() /* ty=Tensor[(2, 4, 1), float32] */;
  %242 = minimum(%237, %238) /* ty=Tensor[(15, 11, 1), uint8] */;
  %243 = %239.0;
  (%240, %241, %242, %243)
}

def @func_4075() -> (Tensor[(9, 9, 8), float32],) {
  %244 = @func_4040() /* ty=(Tensor[(9, 9, 8), float32],) */;
  %245 = %244.0;
  (%245,)
}

def @func_8441() -> Tensor[(4, 5, 5), bool] {
  %246 = @func_5265() /* ty=(Tensor[(4, 5, 5), bool],) */;
  %246.0
}

def @func_2555() -> (Tensor[(2, 4, 1), float32],) {
  %247 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %248 = %247.0;
  (%248,)
}

def @func_5774(%var_5748: Tensor[(48), float32]) -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 6), int16], Tensor[(48), float32]) {
  %249 = cast(%var_5748, dtype="float32") /* ty=Tensor[(48), float32] */;
  %250 = reshape(%249, newshape=[2, 4, 6]) /* ty=Tensor[(2, 4, 6), float32] */;
  %251 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  %252 = @func_3911(%250) /* ty=Tensor[(2, 4, 6), int16] */;
  (%251, %252, %var_5748)
}

def @func_8518(%var_8503: Tensor[(650, 1), float64], %var_8504: Tensor[(40, 14), uint64]) -> (Tensor[(2, 4, 1), float32], Tensor[(9, 9, 8), float32], Tensor[(588), uint16], Tensor[(650, 1), float64], Tensor[(40, 14), uint64], Tensor[(135), int32], Tensor[(2, 4, 588), bool]) {
  %253 = @func_2030() /* ty=(Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
  %254 = cast(meta[relay.Constant][16] /* ty=Tensor[(588), uint16] */, dtype="uint16") /* ty=Tensor[(588), uint16] */;
  %255 = cast(%var_8503, dtype="float64") /* ty=Tensor[(650, 1), float64] */;
  %256 = cast(%var_8504, dtype="uint64") /* ty=Tensor[(40, 14), uint64] */;
  %257 = cast(meta[relay.Constant][17] /* ty=Tensor[(135), int32] */, dtype="int32") /* ty=Tensor[(135), int32] */;
  %258 = reshape(%254, newshape=[588]) /* ty=Tensor[(588), uint16] */;
  %259 = reshape(%255, newshape=[650]) /* ty=Tensor[(650), float64] */;
  %260 = reshape(%256, newshape=[560]) /* ty=Tensor[(560), uint64] */;
  %261 = reshape(%257, newshape=[135]) /* ty=Tensor[(135), int32] */;
  %262 = @func_7476(%258, %259, %260, %261) /* ty=(Tensor[(180), float32], Tensor[(3, 15, 4), float32], Tensor[(588), uint16], Tensor[(2, 4, 650), uint16], Tensor[(100), float32], Tensor[(273), float64], Tensor[(560), uint64], Tensor[(135), int32]) */;
  %263 = @func_5223() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %264 = %263.0;
  %265 = cast(meta[relay.Constant][16] /* ty=Tensor[(588), uint16] */, dtype="bool") /* ty=Tensor[(588), bool] */;
  %266 = cast(%264, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
  %267 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  %268 = %253.1;
  %269 = %262.2;
  %270 = not_equal(%265, %266) /* ty=Tensor[(2, 4, 588), bool] */;
  (%267, %268, %269, %var_8503, %var_8504, meta[relay.Constant][17] /* ty=Tensor[(135), int32] */, %270)
}

def @func_2357() -> (Tensor[(25, 4), float64], Tensor[(13, 10, 5), float64], Tensor[(650), float64]) {
  %271 = cast(meta[relay.Constant][18] /* ty=Tensor[(650), float64] */, dtype="float64") /* ty=Tensor[(650), float64] */;
  %272 = reshape(%271, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float64] */;
  %273 = @func_2315(%272) /* ty=(Tensor[(13, 10, 5), float64],) */;
  %274 = @func_2074() /* ty=Tensor[(25, 4), float64] */;
  %275 = %273.0;
  (%274, %275, meta[relay.Constant][18] /* ty=Tensor[(650), float64] */)
}

def @func_2542() -> (Tensor[(2, 4, 1), float32],) {
  %276 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  (%276,)
}

def @main() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), bool], Tensor[(135), int32], Tensor[(273), float64], Tensor[(25, 4), uint8]) {
  %277 = @func_6741() /* ty=(Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %278 = @func_4339() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %279 = @func_3958() /* ty=Tensor[(25, 4), bool] */;
  %280 = cast(%279, dtype="float64") /* ty=Tensor[(25, 4), float64] */;
  %281 = cast(meta[relay.Constant][19] /* ty=Tensor[(135), int32] */, dtype="int32") /* ty=Tensor[(135), int32] */;
  %282 = cast(meta[relay.Constant][20] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %283 = reshape(%280, newshape=[25, 4]) /* ty=Tensor[(25, 4), float64] */;
  %284 = reshape(%281, newshape=[135]) /* ty=Tensor[(135), int32] */;
  %285 = reshape(%282, newshape=[39, 7]) /* ty=Tensor[(39, 7), float64] */;
  %286 = @func_2201(%283, %284, %285) /* ty=(Tensor[(648), float32], Tensor[(25, 4), bool], Tensor[(3, 9, 5), float32], Tensor[(135), int32], Tensor[(4, 5, 5), bool], Tensor[(180), float32], Tensor[(39, 7), float64], Tensor[(25, 4), float32]) */;
  %287 = cast(meta[relay.Constant][21] /* ty=Tensor[(25, 4), bool] */, dtype="uint8") /* ty=Tensor[(25, 4), uint8] */;
  %288 = shape_of(%279, dtype="int32") /* ty=Tensor[(2), int32] */;
  %289 = cast(%279, dtype="uint8") /* ty=Tensor[(25, 4), uint8] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %291 = %277.1;
  %292 = %278.0;
  %293 = %286.1;
  %294 = maximum(%289, %290) /* ty=Tensor[(25, 4), uint8] */;
  (%291, %292, %293, meta[relay.Constant][19] /* ty=Tensor[(135), int32] */, meta[relay.Constant][20] /* ty=Tensor[(273), float64] */, %294)
}

def @func_3343() -> Tensor[(180), float32] {
  %295 = @func_2976() /* ty=(Tensor[(180), float32],) */;
  %295.0
}

def @func_6841() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %296 = @func_3514() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %297 = %296.4;
  %298 = @func_2807() /* ty=Tensor[(2, 4, 1), float32] */;
  (%297, %298)
}

def @func_1740(%var_1727: Tensor[(100), float32]) -> (Tensor[(7, 16, 5), uint64], Tensor[(2, 4, 560), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 560), uint64]) {
  %299 = cast(meta[relay.Constant][22] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %300 = cast(meta[relay.Constant][22] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %301 = reshape(%299, newshape=[7, 16, 5]) /* ty=Tensor[(7, 16, 5), uint64] */;
  %302 = reshape(%300, newshape=[7, 16, 5]) /* ty=Tensor[(7, 16, 5), uint64] */;
  %303 = @func_1559(%301, %302) /* ty=(Tensor[(7, 16, 5), uint64], Tensor[(7, 16, 5), int64]) */;
  %304 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %305 = %304.0;
  %306 = cast(%305, dtype="float64") /* ty=Tensor[(2, 4, 1), float64] */;
  %307 = asin(%306) /* ty=Tensor[(2, 4, 1), float64] */;
  %308 = cast(%307, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  %309 = cast(meta[relay.Constant][22] /* ty=Tensor[(560), uint64] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %310 = cast(%var_1727, dtype="float32") /* ty=Tensor[(100), float32] */;
  %311 = cast(%var_1727, dtype="float32") /* ty=Tensor[(100), float32] */;
  %312 = reshape(%310, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %313 = reshape(%311, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %314 = @func_524(%312, %313) /* ty=(Tensor[(4, 5, 5), bool],) */;
  %315 = cast(%307, dtype="uint64") /* ty=Tensor[(2, 4, 1), uint64] */;
  %316 = cast(meta[relay.Constant][22] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %317 = %303.0;
  %318 = floor_divide(%308, %309) /* ty=Tensor[(2, 4, 560), float32] */;
  %319 = %314.0;
  %320 = multiply(%315, %316) /* ty=Tensor[(2, 4, 560), uint64] */;
  (%317, %318, %319, %var_1727, %320)
}

def @func_5336() -> (Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool]) {
  %321 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
  %322 = @func_4269() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float64]) */;
  %323 = %321.0;
  %324 = %322.0;
  (%323, %324)
}

def @func_4269() -> (Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float64]) {
  %325 = @func_1415() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(25, 4), float32]) */;
  %326 = %325.2;
  %327 = cast(%326, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
  %328 = reshape(%327, newshape=[100]) /* ty=Tensor[(100), float32] */;
  %329 = @func_1454(%328) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
  %330 = @func_2357() /* ty=(Tensor[(25, 4), float64], Tensor[(13, 10, 5), float64], Tensor[(650), float64]) */;
  %331 = %329.0;
  %332 = %330.0;
  (%326, %331, %332)
}

def @func_3742() -> Tensor[(2, 4, 1), float64] {
  %333 = @func_2250() /* ty=Tensor[(2, 4, 1), float64] */;
  %334 = cast(%333, dtype="float64") /* ty=Tensor[(2, 4, 1), float64] */;
  log(%334) /* ty=Tensor[(2, 4, 1), float64] */
}

def @func_2918() -> (Tensor[(2, 4, 1), float32], Tensor[(3, 15, 4), float32], Tensor[(180), float32]) {
  %335 = @func_2555() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %336 = cast(meta[relay.Constant][23] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %337 = reshape(%336, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), float32] */;
  %338 = @func_1017(%337) /* ty=(Tensor[(3, 15, 4), float32],) */;
  %339 = %335.0;
  %340 = %338.0;
  (%339, %340, meta[relay.Constant][23] /* ty=Tensor[(180), float32] */)
}

def @func_6706() -> (Tensor[(180), float32], Tensor[(25, 4), bool], Tensor[(2, 4, 11), int8]) {
  %341 = @func_4433() /* ty=(Tensor[(2, 4, 1), float64], Tensor[(180), float32]) */;
  %342 = @func_4950() /* ty=(Tensor[(25, 4), float32],) */;
  %343 = %342.0;
  %344 = cast(%343, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %345 = log10(%344) /* ty=Tensor[(25, 4), float32] */;
  %346 = cast(%343, dtype="int64") /* ty=Tensor[(25, 4), int64] */;
  %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(2), int32] */;
  %348 = cast(%345, dtype="int64") /* ty=Tensor[(25, 4), int64] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %350 = right_shift(%348, %349) /* ty=Tensor[(25, 4), int64] */;
  %351 = cast(%343, dtype="bool") /* ty=Tensor[(25, 4), bool] */;
  %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(2), int32] */;
  %353 = cast(%350, dtype="bool") /* ty=Tensor[(25, 4), bool] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %355 = @func_5336() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool]) */;
  %356 = %355.0;
  %357 = cast(%356, dtype="int8") /* ty=Tensor[(2, 4, 1), int8] */;
  %358 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 4, 11), float32] */, dtype="int8") /* ty=Tensor[(2, 4, 11), int8] */;
  %359 = %341.1;
  %360 = less(%353, %354) /* ty=Tensor[(25, 4), bool] */;
  %361 = bitwise_and(%357, %358) /* ty=Tensor[(2, 4, 11), int8] */;
  (%359, %360, %361)
}

def @func_4950() -> (Tensor[(25, 4), float32],) {
  %362 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
  %363 = %362.2;
  (%363,)
}

def @func_2526() -> Tensor[(2, 4, 1), float32] {
  @func_1316() /* ty=Tensor[(2, 4, 1), float32] */
}

def @func_6460() -> (Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), uint64], Tensor[(2, 4, 1), float32]) {
  %364 = @func_4040() /* ty=(Tensor[(9, 9, 8), float32],) */;
  %365 = cast(meta[relay.Constant][25] /* ty=Tensor[(100), float32] */, dtype="float32") /* ty=Tensor[(100), float32] */;
  %366 = cast(meta[relay.Constant][25] /* ty=Tensor[(100), float32] */, dtype="float32") /* ty=Tensor[(100), float32] */;
  %367 = reshape(%365, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %368 = reshape(%366, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %369 = @func_524(%367, %368) /* ty=(Tensor[(4, 5, 5), bool],) */;
  %370 = %369.0;
  %371 = cast(meta[relay.Constant][25] /* ty=Tensor[(100), float32] */, dtype="uint64") /* ty=Tensor[(100), uint64] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="uint64") /* ty=Tensor[(4, 5, 5), uint64] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %375 = @func_5802() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %376 = %364.0;
  %377 = add(%373, %374) /* ty=Tensor[(4, 5, 5), uint64] */;
  %378 = %375.0;
  (%376, %377, %378)
}

def @func_8025(%var_8019: Tensor[(65, 7), uint64]) -> (Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(65, 7), uint64], Tensor[(100), float64]) {
  %379 = @func_3036() /* ty=(Tensor[(3, 15, 4), float32], Tensor[(2, 4, 180), bool], Tensor[(2, 4, 1), float64]) */;
  %380 = cast(%var_8019, dtype="uint64") /* ty=Tensor[(65, 7), uint64] */;
  %381 = cast(meta[relay.Constant][26] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %382 = reshape(%380, newshape=[455]) /* ty=Tensor[(455), uint64] */;
  %383 = reshape(%381, newshape=[25, 4]) /* ty=Tensor[(25, 4), float64] */;
  %384 = @func_7639(%382, %383) /* ty=(Tensor[(180), float32], Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(455), uint64], Tensor[(455), uint64], Tensor[(25, 4), float32], Tensor[(2, 4, 1), float32]) */;
  %385 = %379.2;
  %386 = %384.6;
  (%385, %386, %var_8019, meta[relay.Constant][26] /* ty=Tensor[(100), float64] */)
}

def @func_5134(%var_5124: Tensor[(135), int32]) -> (Tensor[(180), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(135), int32], Tensor[(273), float64]) {
  %387 = @func_2918() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(3, 15, 4), float32], Tensor[(180), float32]) */;
  %388 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
  %389 = %388.2;
  %390 = cast(%389, dtype="float64") /* ty=Tensor[(25, 4), float64] */;
  %391 = cast(%var_5124, dtype="int32") /* ty=Tensor[(135), int32] */;
  %392 = cast(meta[relay.Constant][27] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %393 = reshape(%390, newshape=[25, 4]) /* ty=Tensor[(25, 4), float64] */;
  %394 = reshape(%391, newshape=[135]) /* ty=Tensor[(135), int32] */;
  %395 = reshape(%392, newshape=[39, 7]) /* ty=Tensor[(39, 7), float64] */;
  %396 = @func_2201(%393, %394, %395) /* ty=(Tensor[(648), float32], Tensor[(25, 4), bool], Tensor[(3, 9, 5), float32], Tensor[(135), int32], Tensor[(4, 5, 5), bool], Tensor[(180), float32], Tensor[(39, 7), float64], Tensor[(25, 4), float32]) */;
  %397 = %387.2;
  %398 = %396.4;
  (%397, %389, %398, %var_5124, meta[relay.Constant][27] /* ty=Tensor[(273), float64] */)
}

def @func_8419() -> Tensor[(4, 5, 5), bool] {
  %399 = @func_1489() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 1), float64]) */;
  %399.0
}

def @func_424(%var_397: Tensor[(13, 7, 5), uint64], %var_398: Tensor[(13, 7, 5), uint64]) -> (Tensor[(13, 7, 5), uint64],) {
  %400 = cast(%var_398, dtype="uint64") /* ty=Tensor[(13, 7, 5), uint64] */;
  %401 = shape_of(%var_397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%var_397, dtype="uint64") /* ty=Tensor[(13, 7, 5), uint64] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %404 = multiply(%402, %403) /* ty=Tensor[(13, 7, 5), uint64] */;
  (%404,)
}

def @func_3173(%var_3132: Tensor[(560), uint64]) -> (Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(2, 4, 1), float32]) {
  %405 = @func_2960() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %406 = cast(%var_3132, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %407 = cast(%var_3132, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %408 = reshape(%406, newshape=[7, 16, 5]) /* ty=Tensor[(7, 16, 5), uint64] */;
  %409 = reshape(%407, newshape=[7, 16, 5]) /* ty=Tensor[(7, 16, 5), uint64] */;
  %410 = @func_1559(%408, %409) /* ty=(Tensor[(7, 16, 5), uint64], Tensor[(7, 16, 5), int64]) */;
  %411 = @func_2542() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %412 = %411.0;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  %414 = %405.0;
  %415 = %410.0;
  %416 = log2(%413) /* ty=Tensor[(2, 4, 1), float32] */;
  (%414, %415, %var_3132, %416)
}

def @func_8087() -> (Tensor[(2, 4, 7), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 7), bool]) {
  %417 = @func_4433() /* ty=(Tensor[(2, 4, 1), float64], Tensor[(180), float32]) */;
  %418 = %417.0;
  %419 = cast(%418, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  %420 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 4, 7), float64] */, dtype="float32") /* ty=Tensor[(2, 4, 7), float32] */;
  %421 = @func_6741() /* ty=(Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %422 = cast(%418, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
  %423 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 4, 7), float64] */, dtype="bool") /* ty=Tensor[(2, 4, 7), bool] */;
  %424 = floor_divide(%419, %420) /* ty=Tensor[(2, 4, 7), float32] */;
  %425 = %421.2;
  %426 = less_equal(%422, %423) /* ty=Tensor[(2, 4, 7), bool] */;
  (%424, %425, %426)
}

def @func_3831(%var_3808: Tensor[(560), uint64]) -> (Tensor[(560), uint64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 560), int8]) {
  %427 = cast(%var_3808, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %428 = reshape(%427, newshape=[560]) /* ty=Tensor[(560), uint64] */;
  %429 = @func_3249(%428) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(2, 4, ?), bool]) */;
  %430 = @func_2238() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %431 = %430.0;
  %432 = cast(%431, dtype="int8") /* ty=Tensor[(2, 4, 1), int8] */;
  %433 = cast(%var_3808, dtype="int8") /* ty=Tensor[(560), int8] */;
  %434 = %429.2;
  %435 = @func_3798() /* ty=Tensor[(2, 4, 1), float32] */;
  %436 = logical_xor(%432, %433) /* ty=Tensor[(2, 4, 560), int8] */;
  (%434, %435, %436)
}

def @func_5480() -> (Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(2, 4, 6), int16], Tensor[(2, 4, 650), float32], Tensor[(2, 4, 48), float32]) {
  %437 = @func_3036() /* ty=(Tensor[(3, 15, 4), float32], Tensor[(2, 4, 180), bool], Tensor[(2, 4, 1), float64]) */;
  %438 = @func_2918() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(3, 15, 4), float32], Tensor[(180), float32]) */;
  %439 = cast(meta[relay.Constant][29] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %440 = reshape(%439, newshape=[2, 4, 6]) /* ty=Tensor[(2, 4, 6), float32] */;
  %441 = @func_4695() /* ty=(Tensor[(650), float32], Tensor[(100), float32], Tensor[(2, 4, 648), bool], Tensor[(2, 4, 1), float32]) */;
  %442 = %441.0;
  %443 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
  %444 = %443.0;
  %445 = cast(%442, dtype="float32") /* ty=Tensor[(650), float32] */;
  %446 = cast(%444, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  %447 = cast(meta[relay.Constant][29] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %448 = cast(%444, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  %449 = %437.0;
  %450 = %438.2;
  %451 = @func_3911(%440) /* ty=Tensor[(2, 4, 6), int16] */;
  %452 = multiply(%445, %446) /* ty=Tensor[(2, 4, 650), float32] */;
  %453 = mod(%447, %448) /* ty=Tensor[(2, 4, 48), float32] */;
  (%449, %450, %451, %452, %453)
}

def @func_7300(%var_7255: Tensor[(96), float32]) -> (Tensor[(2, 4, 12), bool], Tensor[(96), float32], Tensor[(2, 4, 648), float64], Tensor[(25, 4), float32]) {
  %454 = cast(%var_7255, dtype="float32") /* ty=Tensor[(96), float32] */;
  %455 = reshape(%454, newshape=[2, 4, 12]) /* ty=Tensor[(2, 4, 12), float32] */;
  %456 = @func_3994() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(100), float32], Tensor[(648), float32]) */;
  %457 = %456.0;
  %458 = @func_2030() /* ty=(Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
  %459 = %458.2;
  %460 = cast(%457, dtype="float64") /* ty=Tensor[(2, 4, 1), float64] */;
  %461 = cast(%459, dtype="float64") /* ty=Tensor[(648), float64] */;
  %462 = divide(%460, %461) /* ty=Tensor[(2, 4, 648), float64] */;
  %463 = cast(%462, dtype="float64") /* ty=Tensor[(2, 4, 648), float64] */;
  %464 = @func_2666() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(648), float32]) */;
  %465 = @func_4846(%455) /* ty=Tensor[(2, 4, 12), bool] */;
  %466 = exp(%463) /* ty=Tensor[(2, 4, 648), float64] */;
  %467 = %464.2;
  (%465, %var_7255, %466, %467)
}

def @func_7639(%var_7614: Tensor[(455), uint64], %var_7623: Tensor[(25, 4), float64]) -> (Tensor[(180), float32], Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(455), uint64], Tensor[(455), uint64], Tensor[(25, 4), float32], Tensor[(2, 4, 1), float32]) {
  %468 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
  %469 = cast(%var_7614, dtype="uint64") /* ty=Tensor[(455), uint64] */;
  %470 = reshape(%469, newshape=[455]) /* ty=Tensor[(455), uint64] */;
  %471 = @func_2477(%470) /* ty=(Tensor[(100), float32], Tensor[(13, 7, 5), uint64], Tensor[(455), uint64], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64]) */;
  %472 = cast(%var_7614, dtype="uint64") /* ty=Tensor[(455), uint64] */;
  %473 = reshape(%472, newshape=[455]) /* ty=Tensor[(455), uint64] */;
  %474 = @func_6480(%473) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(100), float32], Tensor[(455), uint64]) */;
  %475 = @func_6706() /* ty=(Tensor[(180), float32], Tensor[(25, 4), bool], Tensor[(2, 4, 11), int8]) */;
  %476 = %475.1;
  %477 = cast(%476, dtype="float64") /* ty=Tensor[(25, 4), float64] */;
  %478 = cos(%477) /* ty=Tensor[(25, 4), float64] */;
  %479 = cast(%var_7623, dtype="int8") /* ty=Tensor[(25, 4), int8] */;
  %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(2), int32] */;
  %481 = cast(%478, dtype="int8") /* ty=Tensor[(25, 4), int8] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %483 = left_shift(%481, %482) /* ty=Tensor[(25, 4), int8] */;
  %484 = cast(%483, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %485 = shape_of(%478, dtype="int32") /* ty=Tensor[(2), int32] */;
  %486 = cast(%478, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %488 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %489 = @func_5530() /* ty=Tensor[(180), float32] */;
  %490 = %468.1;
  %491 = %471.4;
  %492 = %474.2;
  %493 = floor_divide(%486, %487) /* ty=Tensor[(25, 4), float32] */;
  %494 = %488.0;
  (%489, %490, %491, %var_7614, %492, %493, %494)
}

def @func_7330() -> (Tensor[(2, 4, 1), float32],) {
  %495 = @func_3798() /* ty=Tensor[(2, 4, 1), float32] */;
  (%495,)
}

def @func_5265() -> (Tensor[(4, 5, 5), bool],) {
  %496 = @func_2666() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(648), float32]) */;
  %497 = %496.4;
  (%497,)
}

def @func_2238() -> (Tensor[(2, 4, 1), float32],) {
  %498 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  (%498,)
}

def @func_5412() -> (Tensor[(2, 4, 1), float32], Tensor[(180), float32]) {
  %499 = @func_3994() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(100), float32], Tensor[(648), float32]) */;
  %500 = %499.0;
  %501 = cast(%500, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  %502 = @func_2976() /* ty=(Tensor[(180), float32],) */;
  %503 = sinh(%501) /* ty=Tensor[(2, 4, 1), float32] */;
  %504 = %502.0;
  (%503, %504)
}

def @func_2494() -> Tensor[(2, 4, 1), float32] {
  @func_1316() /* ty=Tensor[(2, 4, 1), float32] */
}

def @func_3057() -> (Tensor[(2, 4, 1), float32],) {
  %505 = @func_2960() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %506 = %505.0;
  (%506,)
}

def @func_3514() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %507 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %508 = @func_2238() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %509 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
  %510 = %509.0;
  %511 = cast(%510, dtype="float64") /* ty=Tensor[(2, 4, 1), float64] */;
  %512 = @func_3057() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %513 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %514 = %507.0;
  %515 = %508.0;
  %516 = sqrt(%511) /* ty=Tensor[(2, 4, 1), float64] */;
  %517 = %512.0;
  %518 = %513.0;
  (%514, %515, %516, %517, %518)
}

def @func_4040() -> (Tensor[(9, 9, 8), float32],) {
  %519 = @func_2030() /* ty=(Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
  %520 = %519.1;
  (%520,)
}

def @func_4846(%var_4840: Tensor[(2, 4, 12), float32]) -> Tensor[(2, 4, 12), bool] {
  %521 = @func_2494() /* ty=Tensor[(2, 4, 1), float32] */;
  %522 = cast(%521, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
  %523 = cast(%var_4840, dtype="bool") /* ty=Tensor[(2, 4, 12), bool] */;
  not_equal(%522, %523) /* ty=Tensor[(2, 4, 12), bool] */
}

def @func_7715(%var_7648: Tensor[(2, 5, 10), uint8], %var_7649: Tensor[(2, 5, 10), uint8], %var_7654: Tensor[(1296), uint64]) -> (Tensor[(2, 5, 10), bool], Tensor[(2, 4, 1), float64], Tensor[(1296), uint64], Tensor[(2, 4, 1), float32], Tensor[(120), float64], Tensor[(2, 4, 1), float32], Tensor[(9, 9, 8), float32]) {
  %524 = cast(%var_7649, dtype="bool") /* ty=Tensor[(2, 5, 10), bool] */;
  %525 = shape_of(%var_7648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%var_7648, dtype="bool") /* ty=Tensor[(2, 5, 10), bool] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %528 = cast(%var_7654, dtype="uint64") /* ty=Tensor[(1296), uint64] */;
  %529 = reshape(%528, newshape=[1296]) /* ty=Tensor[(1296), uint64] */;
  %530 = @func_6190(%529) /* ty=(Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(9, 16, 9), int64], uint64, Tensor[(1296), uint64], Tensor[(648), float32], Tensor[(13, 10, 5), float64], Tensor[(650), float64], Tensor[(2, 4, 1), float32]) */;
  %531 = cast(meta[relay.Constant][30] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %532 = reshape(%531, newshape=[2, 4, 15]) /* ty=Tensor[(2, 4, 15), float64] */;
  %533 = @func_2742(%532) /* ty=(Tensor[(2, 4, 15), float32], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */;
  %534 = @func_6267() /* ty=(Tensor[(180), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %535 = @func_4475() /* ty=(Tensor[(2, 4, 1), float64], Tensor[(9, 9, 8), float32]) */;
  %536 = %535.1;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(9, 9, 8), float32] */;
  %538 = greater_equal(%526, %527) /* ty=Tensor[(2, 5, 10), bool] */;
  %539 = %530.0;
  %540 = %533.2;
  %541 = %534.2;
  %542 = atanh(%537) /* ty=Tensor[(9, 9, 8), float32] */;
  (%538, %539, %var_7654, %540, meta[relay.Constant][30] /* ty=Tensor[(120), float64] */, %541, %542)
}

def @func_1089(%var_1065: Tensor[(3, 9, 5), int32], %var_1078: Tensor[(3, 9, 5), int32]) -> (Tensor[(3, 9, 5), int32], Tensor[(3, 9, 5), float32]) {
  %543 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 9, 5), int32] */, dtype="int32") /* ty=Tensor[(3, 9, 5), int32] */;
  %544 = shape_of(%var_1065, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%var_1065, dtype="int32") /* ty=Tensor[(3, 9, 5), int32] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %547 = cast(%var_1078, dtype="float32") /* ty=Tensor[(3, 9, 5), float32] */;
  %548 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(3, 9, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 9, 5), int32] */, dtype="float32") /* ty=Tensor[(3, 9, 5), float32] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %551 = divide(%549, %550) /* ty=Tensor[(3, 9, 5), float32] */;
  %552 = cast(%551, dtype="float32") /* ty=Tensor[(3, 9, 5), float32] */;
  %553 = subtract(%545, %546) /* ty=Tensor[(3, 9, 5), int32] */;
  %554 = cos(%552) /* ty=Tensor[(3, 9, 5), float32] */;
  (%553, %554)
}

def @func_2807() -> Tensor[(2, 4, 1), float32] {
  @func_1316() /* ty=Tensor[(2, 4, 1), float32] */
}

def @func_3453(%var_3359: Tensor[(1, 273), float64], %var_3372: Tensor[(3, 273), float64], %var_3431: Tensor[(3, 273), uint32]) -> (Tensor[(2, 4, 1), float32], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(25, 4), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(3, 273), float64], Tensor[(3, 273), bool], Tensor[(3, 273), bool], Tensor[(3, 15, 4), float32]) {
  %555 = @func_2555() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %556 = cast(meta[relay.Constant][32] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %557 = reshape(%556, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), float32] */;
  %558 = @func_1017(%557) /* ty=(Tensor[(3, 15, 4), float32],) */;
  %559 = cast(%var_3359, dtype="float64") /* ty=Tensor[(1, 273), float64] */;
  %560 = cast(meta[relay.Constant][33] /* ty=Tensor[(100), float32] */, dtype="float32") /* ty=Tensor[(100), float32] */;
  %561 = reshape(%559, newshape=[13, 3, 7]) /* ty=Tensor[(13, 3, 7), float64] */;
  %562 = reshape(%560, newshape=[100]) /* ty=Tensor[(100), float32] */;
  %563 = @func_2011(%561, %562) /* ty=(Tensor[(13, 7, 5), uint64], Tensor[(65, 7), uint64], Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(25, 4), float32], Tensor[(3, 15, 4), float32], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), float64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), uint32]) */;
  %564 = %563.8;
  %565 = cast(meta[relay.Constant][33] /* ty=Tensor[(100), float32] */, dtype="bool") /* ty=Tensor[(100), bool] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(2), int32] */;
  %567 = cast(%564, dtype="bool") /* ty=Tensor[(25, 4), bool] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %569 = @func_1776() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */;
  %570 = @func_2555() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %571 = cast(%var_3359, dtype="bool") /* ty=Tensor[(1, 273), bool] */;
  %572 = cast(%var_3372, dtype="bool") /* ty=Tensor[(3, 273), bool] */;
  %573 = less_equal(%571, %572) /* ty=Tensor[(3, 273), bool] */;
  %574 = cast(%573, dtype="float32") /* ty=Tensor[(3, 273), float32] */;
  %575 = acosh(%574) /* ty=Tensor[(3, 273), float32] */;
  %576 = cast(%575, dtype="float64") /* ty=Tensor[(3, 273), float64] */;
  %577 = log(%576) /* ty=Tensor[(3, 273), float64] */;
  %578 = cast(%575, dtype="uint32") /* ty=Tensor[(3, 273), uint32] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(2), int32] */;
  %580 = cast(%577, dtype="uint32") /* ty=Tensor[(3, 273), uint32] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %582 = bitwise_xor(%580, %581) /* ty=Tensor[(3, 273), uint32] */;
  %583 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 273), uint32] */, dtype="uint32") /* ty=Tensor[(3, 273), uint32] */;
  %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(2), int32] */;
  %585 = cast(%582, dtype="uint32") /* ty=Tensor[(3, 273), uint32] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %587 = bitwise_and(%585, %586) /* ty=Tensor[(3, 273), uint32] */;
  %588 = cast(%582, dtype="float64") /* ty=Tensor[(3, 273), float64] */;
  %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(2), int32] */;
  %590 = cast(%587, dtype="float64") /* ty=Tensor[(3, 273), float64] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %592 = cast(%var_3431, dtype="bool") /* ty=Tensor[(3, 273), bool] */;
  %593 = shape_of(%587, dtype="int32") /* ty=Tensor[(2), int32] */;
  %594 = cast(%587, dtype="bool") /* ty=Tensor[(3, 273), bool] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %596 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 273), uint32] */, dtype="bool") /* ty=Tensor[(3, 273), bool] */;
  %597 = shape_of(%587, dtype="int32") /* ty=Tensor[(2), int32] */;
  %598 = cast(%587, dtype="bool") /* ty=Tensor[(3, 273), bool] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %600 = cast(meta[relay.Constant][32] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %601 = reshape(%600, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), float32] */;
  %602 = @func_1017(%601) /* ty=(Tensor[(3, 15, 4), float32],) */;
  %603 = %555.0;
  %604 = %558.0;
  %605 = greater(%567, %568) /* ty=Tensor[(25, 4), bool] */;
  %606 = %569.0;
  %607 = %570.0;
  %608 = power(%590, %591) /* ty=Tensor[(3, 273), float64] */;
  %609 = logical_and(%594, %595) /* ty=Tensor[(3, 273), bool] */;
  %610 = greater_equal(%598, %599) /* ty=Tensor[(3, 273), bool] */;
  %611 = %602.0;
  (%603, %604, meta[relay.Constant][32] /* ty=Tensor[(180), float32] */, %605, %606, %607, %608, %609, %610, %611)
}

def @func_1489() -> (Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 1), float64]) {
  %612 = cast(meta[relay.Constant][36] /* ty=Tensor[(100), float32] */, dtype="float32") /* ty=Tensor[(100), float32] */;
  %613 = reshape(%612, newshape=[50, 2]) /* ty=Tensor[(50, 2), float32] */;
  %614 = @func_740(%613) /* ty=(Tensor[(4, 15, 16), float32], Tensor[(50, 2), uint64], Tensor[(4, 5, 5), bool]) */;
  %615 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  %616 = cast(%615, dtype="float64") /* ty=Tensor[(2, 4, 1), float64] */;
  %617 = %614.2;
  %618 = cos(%616) /* ty=Tensor[(2, 4, 1), float64] */;
  (%617, meta[relay.Constant][36] /* ty=Tensor[(100), float32] */, %618)
}

def @func_7987() -> (Tensor[(2, 4, 1), float32],) {
  %619 = @func_6460() /* ty=(Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), uint64], Tensor[(2, 4, 1), float32]) */;
  %620 = %619.2;
  (%620,)
}

def @func_5734(%var_5729: Tensor[(648), float32]) -> (Tensor[(2, 4, 1), float64], Tensor[(100), float32], Tensor[(648), float32]) {
  %621 = cast(%var_5729, dtype="float32") /* ty=Tensor[(648), float32] */;
  %622 = reshape(%621, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
  %623 = @func_809(%622) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
  %624 = @func_2250() /* ty=Tensor[(2, 4, 1), float64] */;
  %625 = %623.2;
  (%624, %625, %var_5729)
}

def @func_1776() -> (Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) {
  %626 = @func_1489() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 1), float64]) */;
  %627 = %626.0;
  %628 = cast(%627, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
  %629 = reshape(%628, newshape=[100]) /* ty=Tensor[(100), float32] */;
  %630 = @func_1454(%629) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
  %631 = @func_1415() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(25, 4), float32]) */;
  %632 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %633 = %630.1;
  %634 = %631.2;
  %635 = %632.0;
  (%627, %633, %634, %635)
}

def @func_3249(%var_3243: Tensor[(560), uint64]) -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(2, 4, ?), bool]) {
  %636 = @func_2960() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %637 = @func_1850() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %638 = cast(%var_3243, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %639 = reshape(%638, newshape=[560]) /* ty=Tensor[(560), uint64] */;
  %640 = @func_3173(%639) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(2, 4, 1), float32]) */;
  %641 = @func_2494() /* ty=Tensor[(2, 4, 1), float32] */;
  %642 = cast(%641, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  %643 = cosh(%642) /* ty=Tensor[(2, 4, 1), float32] */;
  %644 = cast(%641, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %648 = %636.0;
  %649 = %637.3;
  %650 = %640.2;
  %651 = equal(%646, %647) /* ty=Tensor[(2, 4, ?), bool] */;
  (%648, %649, %650, %var_3243, %651)
}

def @func_6752() -> (Tensor[(180), float32],) {
  %652 = @func_3837() /* ty=(Tensor[(180), float32],) */;
  %653 = %652.0;
  (%653,)
}

def @func_2315(%var_2309: Tensor[(13, 10, 5), float64]) -> (Tensor[(13, 10, 5), float64],) {
  %654 = cast(%var_2309, dtype="float64") /* ty=Tensor[(13, 10, 5), float64] */;
  %655 = sinh(%654) /* ty=Tensor[(13, 10, 5), float64] */;
  (%655,)
}

def @func_1316() -> Tensor[(2, 4, 1), float32] {
  %656 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 4, 1), float32] */, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  asinh(%656) /* ty=Tensor[(2, 4, 1), float32] */
}

def @func_5948() -> (Tensor[(648), float32],) {
  %657 = @func_5669() /* ty=(Tensor[(648), float32],) */;
  %658 = %657.0;
  (%658,)
}

def @func_7523() -> (Tensor[(2, 4, 1), float32], Tensor[(648), float64], Tensor[(2, 4, 1), float32]) {
  %659 = @func_2030() /* ty=(Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
  %660 = %659.2;
  %661 = cast(%660, dtype="float64") /* ty=Tensor[(648), float64] */;
  %662 = @func_1891() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %663 = @func_4537() /* ty=Tensor[(2, 4, 1), float32] */;
  %664 = atan(%661) /* ty=Tensor[(648), float64] */;
  %665 = %662.0;
  (%663, %664, %665)
}

def @func_4149(%var_4097: Tensor[(560), uint64], %var_4128: Tensor[(135), int32], %var_4138: Tensor[(100), float32]) -> (Tensor[(3, 15, 4), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(13, 10, 5), float64], Tensor[(650), float64], Tensor[(3, 15, 4), float32], Tensor[(273), float64], Tensor[(3, 9, 5), float32], Tensor[(135), int32], Tensor[(100), int8]) {
  %666 = @func_3036() /* ty=(Tensor[(3, 15, 4), float32], Tensor[(2, 4, 180), bool], Tensor[(2, 4, 1), float64]) */;
  %667 = cast(%var_4097, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %668 = reshape(%667, newshape=[560]) /* ty=Tensor[(560), uint64] */;
  %669 = @func_3173(%668) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(2, 4, 1), float32]) */;
  %670 = cast(meta[relay.Constant][38] /* ty=Tensor[(650), float64] */, dtype="float64") /* ty=Tensor[(650), float64] */;
  %671 = reshape(%670, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float64] */;
  %672 = @func_2315(%671) /* ty=(Tensor[(13, 10, 5), float64],) */;
  %673 = cast(meta[relay.Constant][39] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %674 = cast(meta[relay.Constant][40] /* ty=Tensor[(100), float32] */, dtype="float32") /* ty=Tensor[(100), float32] */;
  %675 = reshape(%673, newshape=[13, 3, 7]) /* ty=Tensor[(13, 3, 7), float64] */;
  %676 = reshape(%674, newshape=[100]) /* ty=Tensor[(100), float32] */;
  %677 = @func_2011(%675, %676) /* ty=(Tensor[(13, 7, 5), uint64], Tensor[(65, 7), uint64], Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(25, 4), float32], Tensor[(3, 15, 4), float32], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), float64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), uint32]) */;
  %678 = cast(meta[relay.Constant][40] /* ty=Tensor[(100), float32] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %679 = cast(%var_4128, dtype="int32") /* ty=Tensor[(135), int32] */;
  %680 = cast(meta[relay.Constant][39] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %681 = reshape(%678, newshape=[25, 4]) /* ty=Tensor[(25, 4), float64] */;
  %682 = reshape(%679, newshape=[135]) /* ty=Tensor[(135), int32] */;
  %683 = reshape(%680, newshape=[39, 7]) /* ty=Tensor[(39, 7), float64] */;
  %684 = @func_2201(%681, %682, %683) /* ty=(Tensor[(648), float32], Tensor[(25, 4), bool], Tensor[(3, 9, 5), float32], Tensor[(135), int32], Tensor[(4, 5, 5), bool], Tensor[(180), float32], Tensor[(39, 7), float64], Tensor[(25, 4), float32]) */;
  %685 = cast(%var_4138, dtype="int8") /* ty=Tensor[(100), int8] */;
  %686 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(100), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %687 = cast(meta[relay.Constant][40] /* ty=Tensor[(100), float32] */, dtype="int8") /* ty=Tensor[(100), int8] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?), int8] */;
  %689 = %666.0;
  %690 = %669.2;
  %691 = %672.0;
  %692 = %677.9;
  %693 = %684.2;
  %694 = bitwise_or(%687, %688) /* ty=Tensor[(100), int8] */;
  (%689, %690, %var_4097, %691, meta[relay.Constant][38] /* ty=Tensor[(650), float64] */, %692, meta[relay.Constant][39] /* ty=Tensor[(273), float64] */, %693, %var_4128, %694)
}

def @func_4775() -> (Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 560), int16]) {
  %695 = @func_4269() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float64]) */;
  %696 = cast(meta[relay.Constant][41] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %697 = reshape(%696, newshape=[560]) /* ty=Tensor[(560), uint64] */;
  %698 = @func_3173(%697) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(2, 4, 1), float32]) */;
  %699 = %698.2;
  %700 = cast(%699, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %701 = reshape(%700, newshape=[560]) /* ty=Tensor[(560), uint64] */;
  %702 = @func_3173(%701) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(2, 4, 1), float32]) */;
  %703 = @func_4339() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %704 = %703.0;
  %705 = cast(%704, dtype="int16") /* ty=Tensor[(2, 4, 1), int16] */;
  %706 = cast(%699, dtype="int16") /* ty=Tensor[(560), int16] */;
  %707 = %695.0;
  %708 = %702.3;
  %709 = left_shift(%705, %706) /* ty=Tensor[(2, 4, 560), int16] */;
  (meta[relay.Constant][41] /* ty=Tensor[(560), uint64] */, %707, %708, %709)
}

def @func_4695() -> (Tensor[(650), float32], Tensor[(100), float32], Tensor[(2, 4, 648), bool], Tensor[(2, 4, 1), float32]) {
  %710 = cast(meta[relay.Constant][42] /* ty=Tensor[(650), float64] */, dtype="float64") /* ty=Tensor[(650), float64] */;
  %711 = reshape(%710, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float64] */;
  %712 = @func_2315(%711) /* ty=(Tensor[(13, 10, 5), float64],) */;
  %713 = %712.0;
  %714 = cast(%713, dtype="float32") /* ty=Tensor[(13, 10, 5), float32] */;
  %715 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(650), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %716 = cast(meta[relay.Constant][42] /* ty=Tensor[(650), float64] */, dtype="float32") /* ty=Tensor[(650), float32] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?), float32] */;
  %718 = cast(meta[relay.Constant][43] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %719 = reshape(%718, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
  %720 = @func_809(%719) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
  %721 = @func_2250() /* ty=Tensor[(2, 4, 1), float64] */;
  %722 = cast(%721, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
  %723 = cast(meta[relay.Constant][43] /* ty=Tensor[(648), float32] */, dtype="bool") /* ty=Tensor[(648), bool] */;
  %724 = mod(%716, %717) /* ty=Tensor[(650), float32] */;
  %725 = %720.2;
  %726 = logical_and(%722, %723) /* ty=Tensor[(2, 4, 648), bool] */;
  %727 = @func_4537() /* ty=Tensor[(2, 4, 1), float32] */;
  (%724, %725, %726, %727)
}

def @func_6078(%var_6071: Tensor[(560), uint64]) -> (Tensor[(2, 4, ?), int64], Tensor[(560), uint64], Tensor[(560), uint64]) {
  %728 = @func_4339() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %729 = %728.1;
  %730 = @func_4339() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %731 = %730.0;
  %732 = cast(%731, dtype="int64") /* ty=Tensor[(2, 4, 1), int64] */;
  %733 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%729, dtype="int64") /* ty=Tensor[(2, 4, 1), int64] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %736 = cast(%var_6071, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %737 = reshape(%736, newshape=[560]) /* ty=Tensor[(560), uint64] */;
  %738 = @func_3249(%737) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(2, 4, ?), bool]) */;
  %739 = bitwise_and(%734, %735) /* ty=Tensor[(2, 4, ?), int64] */;
  %740 = %738.2;
  (%739, %740, %var_6071)
}

def @func_5802() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %741 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
  %742 = @func_4695() /* ty=(Tensor[(650), float32], Tensor[(100), float32], Tensor[(2, 4, 648), bool], Tensor[(2, 4, 1), float32]) */;
  %743 = %741.1;
  %744 = %742.3;
  (%743, %744)
}

def @func_1339() -> (Tensor[(2, 4, 1), float32],) {
  %745 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  (%745,)
}

def @func_1454(%var_1452: Tensor[(100), float32]) -> (Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) {
  %746 = cast(%var_1452, dtype="float32") /* ty=Tensor[(100), float32] */;
  %747 = cast(%var_1452, dtype="float32") /* ty=Tensor[(100), float32] */;
  %748 = reshape(%746, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %749 = reshape(%747, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %750 = @func_524(%748, %749) /* ty=(Tensor[(4, 5, 5), bool],) */;
  %751 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  %752 = %750.0;
  (%751, %752, %var_1452)
}

def @func_6741() -> (Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %753 = @func_3514() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %754 = @func_5186() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %755 = @func_3742() /* ty=Tensor[(2, 4, 1), float64] */;
  %756 = %753.0;
  %757 = %754.0;
  (%755, %756, %757)
}

def @func_5669() -> (Tensor[(648), float32],) {
  %758 = @func_2030() /* ty=(Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
  %759 = %758.2;
  (%759,)
}

def @func_1415() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(25, 4), float32]) {
  %760 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %761 = cast(meta[relay.Constant][44] /* ty=Tensor[(25, 4), float32] */, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %762 = cast(meta[relay.Constant][44] /* ty=Tensor[(25, 4), float32] */, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %763 = reshape(%761, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %764 = reshape(%762, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %765 = @func_524(%763, %764) /* ty=(Tensor[(4, 5, 5), bool],) */;
  %766 = %760.0;
  %767 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  %768 = %765.0;
  (%766, %767, %768, meta[relay.Constant][44] /* ty=Tensor[(25, 4), float32] */)
}

def @func_8283() -> Tensor[(2, 4, 1), float32] {
  @func_1316() /* ty=Tensor[(2, 4, 1), float32] */
}

def @func_8403() -> (Tensor[(2, 4, 1), float32],) {
  %769 = @func_2555() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %770 = %769.0;
  (%770,)
}

def @func_5186() -> (Tensor[(2, 4, 1), float32],) {
  %771 = @func_1891() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %772 = %771.0;
  (%772,)
}

def @func_6516() -> (Tensor[(100), float32], Tensor[(2, 4, 6), int16], Tensor[(48), float32]) {
  %773 = @func_2030() /* ty=(Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
  %774 = cast(meta[relay.Constant][45] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %775 = reshape(%774, newshape=[2, 4, 6]) /* ty=Tensor[(2, 4, 6), float32] */;
  %776 = %773.0;
  %777 = @func_3911(%775) /* ty=Tensor[(2, 4, 6), int16] */;
  (%776, %777, meta[relay.Constant][45] /* ty=Tensor[(48), float32] */)
}

def @func_6799(%var_6791: Tensor[(2, 4, 13), float32]) -> (Tensor[(2, 4, 13), uint16], Tensor[(4, 5, 5), bool]) {
  %778 = @func_6267() /* ty=(Tensor[(180), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %779 = %778.3;
  %780 = cast(%779, dtype="uint16") /* ty=Tensor[(2, 4, 1), uint16] */;
  %781 = cast(%var_6791, dtype="uint16") /* ty=Tensor[(2, 4, 13), uint16] */;
  %782 = @func_1489() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 1), float64]) */;
  %783 = logical_xor(%780, %781) /* ty=Tensor[(2, 4, 13), uint16] */;
  %784 = %782.0;
  (%783, %784)
}

def @func_2074() -> Tensor[(25, 4), float64] {
  %785 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
  %786 = %785.2;
  %787 = cast(meta[relay.Constant][46] /* ty=Tensor[(25, 4), float32] */, dtype="float64") /* ty=Tensor[(25, 4), float64] */;
  %788 = shape_of(%786, dtype="int32") /* ty=Tensor[(2), int32] */;
  %789 = cast(%786, dtype="float64") /* ty=Tensor[(25, 4), float64] */;
  %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  mod(%789, %790) /* ty=Tensor[(25, 4), float64] */
}

def @func_1850() -> (Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %791 = @func_1776() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */;
  %792 = @func_1776() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */;
  %793 = %792.1;
  %794 = cast(%793, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
  %795 = reshape(%794, newshape=[100]) /* ty=Tensor[(100), float32] */;
  %796 = @func_1454(%795) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
  %797 = %796.0;
  %798 = cast(%797, dtype="float64") /* ty=Tensor[(2, 4, 1), float64] */;
  %799 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
  %800 = %791.0;
  %801 = tan(%798) /* ty=Tensor[(2, 4, 1), float64] */;
  %802 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  %803 = %799.0;
  (%800, %793, %801, %802, %803)
}

def @func_4339() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) {
  %804 = @func_1891() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %805 = @func_2807() /* ty=Tensor[(2, 4, 1), float32] */;
  %806 = %804.0;
  %807 = @func_3762() /* ty=Tensor[(2, 4, 1), float64] */;
  (%805, %806, %807)
}

def @func_1647() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) {
  %808 = @func_1415() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(25, 4), float32]) */;
  %809 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  %810 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  %811 = %808.3;
  (%809, %810, %811)
}

def @func_524(%var_485: Tensor[(4, 5, 5), float32], %var_486: Tensor[(4, 5, 5), float32]) -> (Tensor[(4, 5, 5), bool],) {
  %812 = cast(%var_486, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
  %813 = shape_of(%var_485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %814 = cast(%var_485, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
  %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %816 = floor_mod(%814, %815) /* ty=Tensor[(4, 5, 5), float32] */;
  %817 = cast(%816, dtype="bool") /* ty=Tensor[(4, 5, 5), bool] */;
  %818 = shape_of(%var_485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %819 = cast(%var_485, dtype="bool") /* ty=Tensor[(4, 5, 5), bool] */;
  %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %821 = greater_equal(%819, %820) /* ty=Tensor[(4, 5, 5), bool] */;
  %822 = cast(%821, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
  %823 = exp(%822) /* ty=Tensor[(4, 5, 5), float32] */;
  %824 = cast(%821, dtype="bool") /* ty=Tensor[(4, 5, 5), bool] */;
  %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(%823, dtype="bool") /* ty=Tensor[(4, 5, 5), bool] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %828 = logical_or(%826, %827) /* ty=Tensor[(4, 5, 5), bool] */;
  (%828,)
}

def @func_3911(%var_3899: Tensor[(2, 4, 6), float32]) -> Tensor[(2, 4, 6), int16] {
  %829 = @func_2960() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %830 = %829.0;
  %831 = cast(%830, dtype="int16") /* ty=Tensor[(2, 4, 1), int16] */;
  %832 = cast(%var_3899, dtype="int16") /* ty=Tensor[(2, 4, 6), int16] */;
  add(%831, %832) /* ty=Tensor[(2, 4, 6), int16] */
}

def @func_2666() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(648), float32]) {
  %833 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %834 = @func_2555() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %835 = @func_2357() /* ty=(Tensor[(25, 4), float64], Tensor[(13, 10, 5), float64], Tensor[(650), float64]) */;
  %836 = %835.0;
  %837 = cast(%836, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %838 = cosh(%837) /* ty=Tensor[(25, 4), float32] */;
  %839 = cast(%838, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %840 = cast(%838, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %841 = reshape(%839, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %842 = reshape(%840, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %843 = @func_524(%841, %842) /* ty=(Tensor[(4, 5, 5), bool],) */;
  %844 = cast(meta[relay.Constant][47] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %845 = reshape(%844, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
  %846 = @func_809(%845) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
  %847 = %833.0;
  %848 = %834.0;
  %849 = %843.0;
  %850 = %846.1;
  (%847, %848, %838, %849, %850, meta[relay.Constant][47] /* ty=Tensor[(648), float32] */)
}

def @func_4537() -> Tensor[(2, 4, 1), float32] {
  %851 = @func_3514() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %851.4
}

def @func_1017(%var_996: Tensor[(3, 15, 4), float32]) -> (Tensor[(3, 15, 4), float32],) {
  %852 = cast(%var_996, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %853 = tan(%852) /* ty=Tensor[(3, 15, 4), float32] */;
  (%853,)
}

def @func_3036() -> (Tensor[(3, 15, 4), float32], Tensor[(2, 4, 180), bool], Tensor[(2, 4, 1), float64]) {
  %854 = cast(meta[relay.Constant][48] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %855 = reshape(%854, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), float32] */;
  %856 = @func_1017(%855) /* ty=(Tensor[(3, 15, 4), float32],) */;
  %857 = @func_2960() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %858 = %857.0;
  %859 = cast(meta[relay.Constant][48] /* ty=Tensor[(180), float32] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %860 = cast(%858, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
  %861 = @func_1891() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %862 = %856.0;
  %863 = less_equal(%859, %860) /* ty=Tensor[(2, 4, 180), bool] */;
  %864 = %861.1;
  (%862, %863, %864)
}

def @func_2477(%var_2468: Tensor[(455), uint64]) -> (Tensor[(100), float32], Tensor[(13, 7, 5), uint64], Tensor[(455), uint64], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64]) {
  %865 = @func_1489() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 1), float64]) */;
  %866 = cast(%var_2468, dtype="uint64") /* ty=Tensor[(455), uint64] */;
  %867 = cast(%var_2468, dtype="uint64") /* ty=Tensor[(455), uint64] */;
  %868 = reshape(%866, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint64] */;
  %869 = reshape(%867, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint64] */;
  %870 = @func_424(%868, %869) /* ty=(Tensor[(13, 7, 5), uint64],) */;
  %871 = %870.0;
  %872 = cast(%871, dtype="uint64") /* ty=Tensor[(13, 7, 5), uint64] */;
  %873 = cast(%var_2468, dtype="uint64") /* ty=Tensor[(455), uint64] */;
  %874 = reshape(%872, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint64] */;
  %875 = reshape(%873, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint64] */;
  %876 = @func_424(%874, %875) /* ty=(Tensor[(13, 7, 5), uint64],) */;
  %877 = %865.1;
  %878 = cast(%877, dtype="float32") /* ty=Tensor[(100), float32] */;
  %879 = reshape(%878, newshape=[100]) /* ty=Tensor[(100), float32] */;
  %880 = @func_1740(%879) /* ty=(Tensor[(7, 16, 5), uint64], Tensor[(2, 4, 560), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 560), uint64]) */;
  %881 = %876.0;
  %882 = %880.0;
  (%877, %871, %var_2468, %881, %882)
}

def @func_3609(%var_3604: Tensor[(5, 15, 14), int32]) -> (Tensor[(5, 15, 14), bool],) {
  %883 = cast(%var_3604, dtype="bool") /* ty=Tensor[(5, 15, 14), bool] */;
  %884 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(5, 15, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %885 = cast(meta[relay.Constant][49] /* ty=Tensor[(5, 15, 14), int32] */, dtype="bool") /* ty=Tensor[(5, 15, 14), bool] */;
  %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %887 = equal(%885, %886) /* ty=Tensor[(5, 15, 14), bool] */;
  (%887,)
}

def @func_3282() -> Tensor[(2, 4, 1), float32] {
  %888 = @func_3057() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %888.0
}

def @func_1559(%var_1535: Tensor[(7, 16, 5), uint64], %var_1536: Tensor[(7, 16, 5), uint64]) -> (Tensor[(7, 16, 5), uint64], Tensor[(7, 16, 5), int64]) {
  %889 = cast(%var_1536, dtype="uint64") /* ty=Tensor[(7, 16, 5), uint64] */;
  %890 = shape_of(%var_1535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %891 = cast(%var_1535, dtype="uint64") /* ty=Tensor[(7, 16, 5), uint64] */;
  %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %893 = cast(%var_1536, dtype="float64") /* ty=Tensor[(7, 16, 5), float64] */;
  %894 = log(%893) /* ty=Tensor[(7, 16, 5), float64] */;
  %895 = cast(%var_1535, dtype="int64") /* ty=Tensor[(7, 16, 5), int64] */;
  %896 = shape_of(%894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %897 = cast(%894, dtype="int64") /* ty=Tensor[(7, 16, 5), int64] */;
  %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %899 = bitwise_or(%891, %892) /* ty=Tensor[(7, 16, 5), uint64] */;
  %900 = bitwise_xor(%897, %898) /* ty=Tensor[(7, 16, 5), int64] */;
  (%899, %900)
}

def @func_2201(%var_2165: Tensor[(25, 4), float64], %var_2174: Tensor[(135), int32], %var_2186: Tensor[(39, 7), float64]) -> (Tensor[(648), float32], Tensor[(25, 4), bool], Tensor[(3, 9, 5), float32], Tensor[(135), int32], Tensor[(4, 5, 5), bool], Tensor[(180), float32], Tensor[(39, 7), float64], Tensor[(25, 4), float32]) {
  %901 = @func_2030() /* ty=(Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
  %902 = @func_2074() /* ty=Tensor[(25, 4), float64] */;
  %903 = cast(%var_2165, dtype="bool") /* ty=Tensor[(25, 4), bool] */;
  %904 = shape_of(%902, dtype="int32") /* ty=Tensor[(2), int32] */;
  %905 = cast(%902, dtype="bool") /* ty=Tensor[(25, 4), bool] */;
  %906 = dyn.reshape(%903, %904, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %907 = cast(%var_2174, dtype="int32") /* ty=Tensor[(135), int32] */;
  %908 = cast(%var_2174, dtype="int32") /* ty=Tensor[(135), int32] */;
  %909 = reshape(%907, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), int32] */;
  %910 = reshape(%908, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), int32] */;
  %911 = @func_1089(%909, %910) /* ty=(Tensor[(3, 9, 5), int32], Tensor[(3, 9, 5), float32]) */;
  %912 = @func_2074() /* ty=Tensor[(25, 4), float64] */;
  %913 = cast(%912, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %914 = reshape(%913, newshape=[100]) /* ty=Tensor[(100), float32] */;
  %915 = @func_1454(%914) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
  %916 = cast(%var_2186, dtype="float64") /* ty=Tensor[(39, 7), float64] */;
  %917 = %915.1;
  %918 = cast(%917, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
  %919 = reshape(%916, newshape=[13, 3, 7]) /* ty=Tensor[(13, 3, 7), float64] */;
  %920 = reshape(%918, newshape=[100]) /* ty=Tensor[(100), float32] */;
  %921 = @func_2011(%919, %920) /* ty=(Tensor[(13, 7, 5), uint64], Tensor[(65, 7), uint64], Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(25, 4), float32], Tensor[(3, 15, 4), float32], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), float64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), uint32]) */;
  %922 = cast(%912, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %923 = %901.2;
  %924 = greater_equal(%905, %906) /* ty=Tensor[(25, 4), bool] */;
  %925 = %911.1;
  %926 = %921.7;
  %927 = sin(%922) /* ty=Tensor[(25, 4), float32] */;
  (%923, %924, %925, %var_2174, %917, %926, %var_2186, %927)
}

def @func_2976() -> (Tensor[(180), float32],) {
  %928 = @func_2918() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(3, 15, 4), float32], Tensor[(180), float32]) */;
  %929 = %928.2;
  (%929,)
}

def @func_2408(%var_2365: Tensor[(14, 6, 7), uint16], %var_2366: Tensor[(14, 6, 7), uint16], %var_2374: Tensor[(180), float32], %var_2379: Tensor[(650), float64]) -> (Tensor[(14, 6, 7), uint16], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(2, 4, 650), int16]) {
  %930 = cast(%var_2366, dtype="uint16") /* ty=Tensor[(14, 6, 7), uint16] */;
  %931 = shape_of(%var_2365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %932 = cast(%var_2365, dtype="uint16") /* ty=Tensor[(14, 6, 7), uint16] */;
  %933 = dyn.reshape(%930, %931, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %934 = cast(%var_2374, dtype="float32") /* ty=Tensor[(180), float32] */;
  %935 = reshape(%934, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), float32] */;
  %936 = @func_1017(%935) /* ty=(Tensor[(3, 15, 4), float32],) */;
  %937 = cast(%var_2379, dtype="float64") /* ty=Tensor[(650), float64] */;
  %938 = reshape(%937, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float64] */;
  %939 = @func_2315(%938) /* ty=(Tensor[(13, 10, 5), float64],) */;
  %940 = %939.0;
  %941 = cast(%940, dtype="uint16") /* ty=Tensor[(13, 10, 5), uint16] */;
  %942 = shape_of(%var_2379, dtype="int32") /* ty=Tensor[(1), int32] */;
  %943 = cast(%var_2379, dtype="uint16") /* ty=Tensor[(650), uint16] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %945 = multiply(%943, %944) /* ty=Tensor[(650), uint16] */;
  %946 = @func_1891() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %947 = %946.1;
  %948 = cast(%945, dtype="int16") /* ty=Tensor[(650), int16] */;
  %949 = cast(%947, dtype="int16") /* ty=Tensor[(2, 4, 1), int16] */;
  %950 = multiply(%932, %933) /* ty=Tensor[(14, 6, 7), uint16] */;
  %951 = %936.0;
  %952 = add(%948, %949) /* ty=Tensor[(2, 4, 650), int16] */;
  (%950, %951, %var_2374, %952)
}

def @func_809(%var_783: Tensor[(9, 9, 8), float32]) -> (Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) {
  %953 = cast(%var_783, dtype="float32") /* ty=Tensor[(9, 9, 8), float32] */;
  %954 = atan(%953) /* ty=Tensor[(9, 9, 8), float32] */;
  %955 = cast(%954, dtype="float32") /* ty=Tensor[(9, 9, 8), float32] */;
  %956 = cast(meta[relay.Constant][50] /* ty=Tensor[(100), float32] */, dtype="float32") /* ty=Tensor[(100), float32] */;
  %957 = reshape(%956, newshape=[50, 2]) /* ty=Tensor[(50, 2), float32] */;
  %958 = @func_740(%957) /* ty=(Tensor[(4, 15, 16), float32], Tensor[(50, 2), uint64], Tensor[(4, 5, 5), bool]) */;
  %959 = asinh(%955) /* ty=Tensor[(9, 9, 8), float32] */;
  %960 = %958.2;
  (%959, %960, meta[relay.Constant][50] /* ty=Tensor[(100), float32] */)
}

def @func_4475() -> (Tensor[(2, 4, 1), float64], Tensor[(9, 9, 8), float32]) {
  %961 = @func_4075() /* ty=(Tensor[(9, 9, 8), float32],) */;
  %962 = @func_3762() /* ty=Tensor[(2, 4, 1), float64] */;
  %963 = %961.0;
  (%962, %963)
}

def @func_2250() -> Tensor[(2, 4, 1), float64] {
  %964 = @func_1850() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %964.2
}

def @func_3958() -> Tensor[(25, 4), bool] {
  %965 = @func_2074() /* ty=Tensor[(25, 4), float64] */;
  %966 = cast(meta[relay.Constant][51] /* ty=Tensor[(25, 4), float64] */, dtype="bool") /* ty=Tensor[(25, 4), bool] */;
  %967 = shape_of(%965, dtype="int32") /* ty=Tensor[(2), int32] */;
  %968 = cast(%965, dtype="bool") /* ty=Tensor[(25, 4), bool] */;
  %969 = dyn.reshape(%966, %967, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  logical_or(%968, %969) /* ty=Tensor[(25, 4), bool] */
}

def @func_2960() -> (Tensor[(2, 4, 1), float32],) {
  %970 = @func_2666() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(648), float32]) */;
  %971 = %970.1;
  (%971,)
}

def @func_3762() -> Tensor[(2, 4, 1), float64] {
  @func_3742() /* ty=Tensor[(2, 4, 1), float64] */
}

def @func_6415() -> (Tensor[(100), float32],) {
  %972 = @func_4695() /* ty=(Tensor[(650), float32], Tensor[(100), float32], Tensor[(2, 4, 648), bool], Tensor[(2, 4, 1), float32]) */;
  %973 = %972.1;
  (%973,)
}

def @func_7476(%var_7383: Tensor[(588), uint16], %var_7384: Tensor[(650), float64], %var_7448: Tensor[(560), uint64], %var_7449: Tensor[(135), int32]) -> (Tensor[(180), float32], Tensor[(3, 15, 4), float32], Tensor[(588), uint16], Tensor[(2, 4, 650), uint16], Tensor[(100), float32], Tensor[(273), float64], Tensor[(560), uint64], Tensor[(135), int32]) {
  %974 = cast(%var_7383, dtype="uint16") /* ty=Tensor[(588), uint16] */;
  %975 = cast(%var_7383, dtype="uint16") /* ty=Tensor[(588), uint16] */;
  %976 = @func_5530() /* ty=Tensor[(180), float32] */;
  %977 = cast(%976, dtype="float32") /* ty=Tensor[(180), float32] */;
  %978 = cast(%var_7384, dtype="float64") /* ty=Tensor[(650), float64] */;
  %979 = reshape(%974, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), uint16] */;
  %980 = reshape(%975, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), uint16] */;
  %981 = reshape(%977, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %982 = reshape(%978, newshape=[650]) /* ty=Tensor[(650), float64] */;
  %983 = @func_2408(%979, %980, %981, %982) /* ty=(Tensor[(14, 6, 7), uint16], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(2, 4, 650), int16]) */;
  %984 = @func_4339() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %985 = %984.2;
  %986 = cast(%var_7384, dtype="uint16") /* ty=Tensor[(650), uint16] */;
  %987 = cast(%985, dtype="uint16") /* ty=Tensor[(2, 4, 1), uint16] */;
  %988 = @func_4695() /* ty=(Tensor[(650), float32], Tensor[(100), float32], Tensor[(2, 4, 648), bool], Tensor[(2, 4, 1), float32]) */;
  %989 = %988.1;
  %990 = cast(%989, dtype="float32") /* ty=Tensor[(100), float32] */;
  %991 = cast(%var_7448, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %992 = cast(%var_7449, dtype="int32") /* ty=Tensor[(135), int32] */;
  %993 = cast(%989, dtype="float32") /* ty=Tensor[(100), float32] */;
  %994 = reshape(%991, newshape=[560]) /* ty=Tensor[(560), uint64] */;
  %995 = reshape(%992, newshape=[135]) /* ty=Tensor[(135), int32] */;
  %996 = reshape(%993, newshape=[100]) /* ty=Tensor[(100), float32] */;
  %997 = @func_4149(%994, %995, %996) /* ty=(Tensor[(3, 15, 4), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(13, 10, 5), float64], Tensor[(650), float64], Tensor[(3, 15, 4), float32], Tensor[(273), float64], Tensor[(3, 9, 5), float32], Tensor[(135), int32], Tensor[(100), int8]) */;
  %998 = %983.1;
  %999 = minimum(%986, %987) /* ty=Tensor[(2, 4, 650), uint16] */;
  %1000 = cos(%990) /* ty=Tensor[(100), float32] */;
  %1001 = %997.6;
  (%976, %998, %var_7383, %999, %1000, %1001, %var_7448, %var_7449)
}

def @func_2742(%var_2697: Tensor[(2, 4, 15), float64]) -> (Tensor[(2, 4, 15), float32], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) {
  %1002 = @func_2250() /* ty=Tensor[(2, 4, 1), float64] */;
  %1003 = cast(%1002, dtype="int16") /* ty=Tensor[(2, 4, 1), int16] */;
  %1004 = cast(%var_2697, dtype="int16") /* ty=Tensor[(2, 4, 15), int16] */;
  %1005 = subtract(%1003, %1004) /* ty=Tensor[(2, 4, 15), int16] */;
  %1006 = cast(%1005, dtype="float32") /* ty=Tensor[(2, 4, 15), float32] */;
  %1007 = @func_1776() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */;
  %1008 = @func_2666() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(648), float32]) */;
  %1009 = atan(%1006) /* ty=Tensor[(2, 4, 15), float32] */;
  %1010 = %1007.0;
  %1011 = %1008.0;
  (%1009, %1010, %1011)
}

def @func_5681() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 560), int16]) {
  %1012 = @func_1776() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */;
  %1013 = @func_4775() /* ty=(Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 560), int16]) */;
  %1014 = %1012.3;
  %1015 = %1013.3;
  (%1014, %1015)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3612(%var_3610: Tensor[(5, 15, 14), int32]) -> (Tensor[(5, 15, 14), bool],) {
  @func_3609(%var_3610) /* ty=(Tensor[(5, 15, 14), bool],) */
}

def @func_1017(%var_996: Tensor[(3, 15, 4), float32]) -> (Tensor[(3, 15, 4), float32],) {
  %0 = cast(%var_996, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %1 = tan(%0) /* ty=Tensor[(3, 15, 4), float32] */;
  (%1,)
}

def @func_6193(%var_6191: Tensor[(1296), uint64]) -> (Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(9, 16, 9), int64], uint64, Tensor[(1296), uint64], Tensor[(648), float32], Tensor[(13, 10, 5), float64], Tensor[(650), float64], Tensor[(2, 4, 1), float32]) {
  @func_6190(%var_6191) /* ty=(Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(9, 16, 9), int64], uint64, Tensor[(1296), uint64], Tensor[(648), float32], Tensor[(13, 10, 5), float64], Tensor[(650), float64], Tensor[(2, 4, 1), float32]) */
}

def @func_7987() -> (Tensor[(2, 4, 1), float32],) {
  %2 = @func_6460() /* ty=(Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), uint64], Tensor[(2, 4, 1), float32]) */;
  %3 = %2.2;
  (%3,)
}

def @func_3514() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %4 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %5 = @func_2238() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %6 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
  %7 = %6.0;
  %8 = cast(%7, dtype="float64") /* ty=Tensor[(2, 4, 1), float64] */;
  %9 = @func_3057() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %10 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %11 = %4.0;
  %12 = %5.0;
  %13 = sqrt(%8) /* ty=Tensor[(2, 4, 1), float64] */;
  %14 = %9.0;
  %15 = %10.0;
  (%11, %12, %13, %14, %15)
}

def @func_5188() -> (Tensor[(2, 4, 1), float32],) {
  @func_5186() /* ty=(Tensor[(2, 4, 1), float32],) */
}

def @func_4433() -> (Tensor[(2, 4, 1), float64], Tensor[(180), float32]) {
  %16 = @func_3036() /* ty=(Tensor[(3, 15, 4), float32], Tensor[(2, 4, 180), bool], Tensor[(2, 4, 1), float64]) */;
  %17 = %16.2;
  %18 = @func_3343() /* ty=Tensor[(180), float32] */;
  (%17, %18)
}

def @func_2557() -> (Tensor[(2, 4, 1), float32],) {
  @func_2555() /* ty=(Tensor[(2, 4, 1), float32],) */
}

def @func_3763() -> Tensor[(2, 4, 1), float64] {
  %19 = fn () -> Tensor[(2, 4, 1), float64] {
    @func_3742() /* ty=Tensor[(2, 4, 1), float64] */
  };
  %19() /* ty=Tensor[(2, 4, 1), float64] */
}

def @func_2206(%var_2203: Tensor[(25, 4), float64], %var_2204: Tensor[(135), int32], %var_2205: Tensor[(39, 7), float64]) -> (Tensor[(648), float32], Tensor[(25, 4), bool], Tensor[(3, 9, 5), float32], Tensor[(135), int32], Tensor[(4, 5, 5), bool], Tensor[(180), float32], Tensor[(39, 7), float64], Tensor[(25, 4), float32]) {
  @func_2201(%var_2203, %var_2204, %var_2205) /* ty=(Tensor[(648), float32], Tensor[(25, 4), bool], Tensor[(3, 9, 5), float32], Tensor[(135), int32], Tensor[(4, 5, 5), bool], Tensor[(180), float32], Tensor[(39, 7), float64], Tensor[(25, 4), float32]) */
}

def @func_2977() -> (Tensor[(180), float32],) {
  %22 = fn () -> (Tensor[(180), float32],) {
    %20 = @func_2918() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(3, 15, 4), float32], Tensor[(180), float32]) */;
    %21 = %20.2;
    (%21,)
  };
  %22() /* ty=(Tensor[(180), float32],) */
}

def @func_8419() -> Tensor[(4, 5, 5), bool] {
  %23 = @func_1489() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 1), float64]) */;
  %23.0
}

def @func_3994() -> (Tensor[(2, 4, 1), float32], Tensor[(100), float32], Tensor[(648), float32]) {
  %24 = @func_3514() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %25 = cast(meta[relay.Constant][0] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %26 = reshape(%25, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
  %27 = @func_809(%26) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
  %28 = %24.1;
  %29 = %27.2;
  (%28, %29, meta[relay.Constant][0] /* ty=Tensor[(648), float32] */)
}

def @func_3057() -> (Tensor[(2, 4, 1), float32],) {
  %30 = @func_2960() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %31 = %30.0;
  (%31,)
}

def @func_4951() -> (Tensor[(25, 4), float32],) {
  %34 = fn () -> (Tensor[(25, 4), float32],) {
    %32 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
    %33 = %32.2;
    (%33,)
  };
  %34() /* ty=(Tensor[(25, 4), float32],) */
}

def @func_5186() -> (Tensor[(2, 4, 1), float32],) {
  %35 = @func_1891() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %36 = %35.0;
  (%36,)
}

def @func_5480() -> (Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(2, 4, 6), int16], Tensor[(2, 4, 650), float32], Tensor[(2, 4, 48), float32]) {
  %37 = @func_3036() /* ty=(Tensor[(3, 15, 4), float32], Tensor[(2, 4, 180), bool], Tensor[(2, 4, 1), float64]) */;
  %38 = @func_2918() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(3, 15, 4), float32], Tensor[(180), float32]) */;
  %39 = cast(meta[relay.Constant][1] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %40 = reshape(%39, newshape=[2, 4, 6]) /* ty=Tensor[(2, 4, 6), float32] */;
  %41 = @func_4695() /* ty=(Tensor[(650), float32], Tensor[(100), float32], Tensor[(2, 4, 648), bool], Tensor[(2, 4, 1), float32]) */;
  %42 = %41.0;
  %43 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
  %44 = %43.0;
  %45 = cast(%42, dtype="float32") /* ty=Tensor[(650), float32] */;
  %46 = cast(%44, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  %47 = cast(meta[relay.Constant][1] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %48 = cast(%44, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  %49 = %37.0;
  %50 = %38.2;
  %51 = @func_3911(%40) /* ty=Tensor[(2, 4, 6), int16] */;
  %52 = multiply(%45, %46) /* ty=Tensor[(2, 4, 650), float32] */;
  %53 = mod(%47, %48) /* ty=Tensor[(2, 4, 48), float32] */;
  (%49, %50, %51, %52, %53)
}

def @func_3282() -> Tensor[(2, 4, 1), float32] {
  %54 = @func_3057() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %54.0
}

def @func_5736(%var_5735: Tensor[(648), float32]) -> (Tensor[(2, 4, 1), float64], Tensor[(100), float32], Tensor[(648), float32]) {
  %60 = fn (%var_5729: Tensor[(648), float32]) -> (Tensor[(2, 4, 1), float64], Tensor[(100), float32], Tensor[(648), float32]) {
    %55 = cast(%var_5729, dtype="float32") /* ty=Tensor[(648), float32] */;
    %56 = reshape(%55, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
    %57 = @func_809(%56) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
    %58 = @func_2250() /* ty=Tensor[(2, 4, 1), float64] */;
    %59 = %57.2;
    (%58, %59, %var_5729)
  };
  %60(%var_5735) /* ty=(Tensor[(2, 4, 1), float64], Tensor[(100), float32], Tensor[(648), float32]) */
}

def @func_7300(%var_7255: Tensor[(96), float32]) -> (Tensor[(2, 4, 12), bool], Tensor[(96), float32], Tensor[(2, 4, 648), float64], Tensor[(25, 4), float32]) {
  %61 = cast(%var_7255, dtype="float32") /* ty=Tensor[(96), float32] */;
  %62 = reshape(%61, newshape=[2, 4, 12]) /* ty=Tensor[(2, 4, 12), float32] */;
  %63 = @func_3994() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(100), float32], Tensor[(648), float32]) */;
  %64 = %63.0;
  %65 = @func_2030() /* ty=(Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
  %66 = %65.2;
  %67 = cast(%64, dtype="float64") /* ty=Tensor[(2, 4, 1), float64] */;
  %68 = cast(%66, dtype="float64") /* ty=Tensor[(648), float64] */;
  %69 = divide(%67, %68) /* ty=Tensor[(2, 4, 648), float64] */;
  %70 = cast(%69, dtype="float64") /* ty=Tensor[(2, 4, 648), float64] */;
  %71 = @func_2666() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(648), float32]) */;
  %72 = @func_4846(%62) /* ty=Tensor[(2, 4, 12), bool] */;
  %73 = exp(%70) /* ty=Tensor[(2, 4, 648), float64] */;
  %74 = %71.2;
  (%72, %var_7255, %73, %74)
}

def @func_2962() -> (Tensor[(2, 4, 1), float32],) {
  @func_2960() /* ty=(Tensor[(2, 4, 1), float32],) */
}

def @func_4435() -> (Tensor[(2, 4, 1), float64], Tensor[(180), float32]) {
  @func_4433() /* ty=(Tensor[(2, 4, 1), float64], Tensor[(180), float32]) */
}

def @func_3458(%var_3455: Tensor[(1, 273), float64], %var_3456: Tensor[(3, 273), float64], %var_3457: Tensor[(3, 273), uint32]) -> (Tensor[(2, 4, 1), float32], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(25, 4), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(3, 273), float64], Tensor[(3, 273), bool], Tensor[(3, 273), bool], Tensor[(3, 15, 4), float32]) {
  @func_3453(%var_3455, %var_3456, %var_3457) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(25, 4), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(3, 273), float64], Tensor[(3, 273), bool], Tensor[(3, 273), bool], Tensor[(3, 15, 4), float32]) */
}

def @func_428(%var_426: Tensor[(13, 7, 5), uint64], %var_427: Tensor[(13, 7, 5), uint64]) -> (Tensor[(13, 7, 5), uint64],) {
  @func_424(%var_426, %var_427) /* ty=(Tensor[(13, 7, 5), uint64],) */
}

def @func_5682() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 560), int16]) {
  %79 = fn () -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 560), int16]) {
    %75 = @func_1776() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */;
    %76 = @func_4775() /* ty=(Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 560), int16]) */;
    %77 = %75.3;
    %78 = %76.3;
    (%77, %78)
  };
  %79() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 560), int16]) */
}

def @func_2250() -> Tensor[(2, 4, 1), float64] {
  %80 = @func_1850() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %80.2
}

def @func_3284() -> Tensor[(2, 4, 1), float32] {
  @func_3282() /* ty=Tensor[(2, 4, 1), float32] */
}

def @func_4475() -> (Tensor[(2, 4, 1), float64], Tensor[(9, 9, 8), float32]) {
  %81 = @func_4075() /* ty=(Tensor[(9, 9, 8), float32],) */;
  %82 = @func_3762() /* ty=Tensor[(2, 4, 1), float64] */;
  %83 = %81.0;
  (%82, %83)
}

def @func_5531() -> Tensor[(180), float32] {
  %85 = fn () -> Tensor[(180), float32] {
    %84 = @func_3837() /* ty=(Tensor[(180), float32],) */;
    %84.0
  };
  %85() /* ty=Tensor[(180), float32] */
}

def @func_6843() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  @func_6841() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */
}

def @func_7715(%var_7648: Tensor[(2, 5, 10), uint8], %var_7649: Tensor[(2, 5, 10), uint8], %var_7654: Tensor[(1296), uint64]) -> (Tensor[(2, 5, 10), bool], Tensor[(2, 4, 1), float64], Tensor[(1296), uint64], Tensor[(2, 4, 1), float32], Tensor[(120), float64], Tensor[(2, 4, 1), float32], Tensor[(9, 9, 8), float32]) {
  %86 = cast(%var_7649, dtype="bool") /* ty=Tensor[(2, 5, 10), bool] */;
  %87 = shape_of(%var_7648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%var_7648, dtype="bool") /* ty=Tensor[(2, 5, 10), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %90 = cast(%var_7654, dtype="uint64") /* ty=Tensor[(1296), uint64] */;
  %91 = reshape(%90, newshape=[1296]) /* ty=Tensor[(1296), uint64] */;
  %92 = @func_6190(%91) /* ty=(Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(9, 16, 9), int64], uint64, Tensor[(1296), uint64], Tensor[(648), float32], Tensor[(13, 10, 5), float64], Tensor[(650), float64], Tensor[(2, 4, 1), float32]) */;
  %93 = cast(meta[relay.Constant][2] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %94 = reshape(%93, newshape=[2, 4, 15]) /* ty=Tensor[(2, 4, 15), float64] */;
  %95 = @func_2742(%94) /* ty=(Tensor[(2, 4, 15), float32], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */;
  %96 = @func_6267() /* ty=(Tensor[(180), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %97 = @func_4475() /* ty=(Tensor[(2, 4, 1), float64], Tensor[(9, 9, 8), float32]) */;
  %98 = %97.1;
  %99 = cast(%98, dtype="float32") /* ty=Tensor[(9, 9, 8), float32] */;
  %100 = greater_equal(%88, %89) /* ty=Tensor[(2, 5, 10), bool] */;
  %101 = %92.0;
  %102 = %95.2;
  %103 = %96.2;
  %104 = atanh(%99) /* ty=Tensor[(9, 9, 8), float32] */;
  (%100, %101, %var_7654, %102, meta[relay.Constant][2] /* ty=Tensor[(120), float64] */, %103, %104)
}

def @func_3059() -> (Tensor[(2, 4, 1), float32],) {
  @func_3057() /* ty=(Tensor[(2, 4, 1), float32],) */
}

def @func_2744(%var_2743: Tensor[(2, 4, 15), float64]) -> (Tensor[(2, 4, 15), float32], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) {
  %115 = fn (%var_2697: Tensor[(2, 4, 15), float64]) -> (Tensor[(2, 4, 15), float32], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) {
    %105 = @func_2250() /* ty=Tensor[(2, 4, 1), float64] */;
    %106 = cast(%105, dtype="int16") /* ty=Tensor[(2, 4, 1), int16] */;
    %107 = cast(%var_2697, dtype="int16") /* ty=Tensor[(2, 4, 15), int16] */;
    %108 = subtract(%106, %107) /* ty=Tensor[(2, 4, 15), int16] */;
    %109 = cast(%108, dtype="float32") /* ty=Tensor[(2, 4, 15), float32] */;
    %110 = @func_1776() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */;
    %111 = @func_2666() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(648), float32]) */;
    %112 = atan(%109) /* ty=Tensor[(2, 4, 15), float32] */;
    %113 = %110.0;
    %114 = %111.0;
    (%112, %113, %114)
  };
  %115(%var_2743) /* ty=(Tensor[(2, 4, 15), float32], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */
}

def @func_740(%var_722: Tensor[(50, 2), float32]) -> (Tensor[(4, 15, 16), float32], Tensor[(50, 2), uint64], Tensor[(4, 5, 5), bool]) {
  %116 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 16), float32] */;
  %117 = cast(%var_722, dtype="float32") /* ty=Tensor[(50, 2), float32] */;
  %118 = cast(%var_722, dtype="float32") /* ty=Tensor[(50, 2), float32] */;
  %119 = reshape(%117, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %120 = reshape(%118, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %121 = @func_524(%119, %120) /* ty=(Tensor[(4, 5, 5), bool],) */;
  %122 = %121.0;
  %123 = cast(%122, dtype="uint64") /* ty=Tensor[(4, 5, 5), uint64] */;
  %124 = shape_of(%var_722, dtype="int32") /* ty=Tensor[(2), int32] */;
  %125 = cast(%var_722, dtype="uint64") /* ty=Tensor[(50, 2), uint64] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %127 = maximum(%125, %126) /* ty=Tensor[(50, 2), uint64] */;
  %128 = cast(%127, dtype="float32") /* ty=Tensor[(50, 2), float32] */;
  %129 = cast(%var_722, dtype="float32") /* ty=Tensor[(50, 2), float32] */;
  %130 = reshape(%128, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %131 = reshape(%129, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %132 = @func_524(%130, %131) /* ty=(Tensor[(4, 5, 5), bool],) */;
  %133 = log2(%116) /* ty=Tensor[(4, 15, 16), float32] */;
  %134 = %132.0;
  (%133, %127, %134)
}

def @func_3838() -> (Tensor[(180), float32],) {
  %137 = fn () -> (Tensor[(180), float32],) {
    %135 = @func_2976() /* ty=(Tensor[(180), float32],) */;
    %136 = %135.0;
    (%136,)
  };
  %137() /* ty=(Tensor[(180), float32],) */
}

def @func_1649() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) {
  @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */
}

def @func_8421() -> Tensor[(4, 5, 5), bool] {
  @func_8419() /* ty=Tensor[(4, 5, 5), bool] */
}

def @func_8443() -> Tensor[(4, 5, 5), bool] {
  @func_8441() /* ty=Tensor[(4, 5, 5), bool] */
}

def @func_5337() -> (Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool]) {
  %142 = fn () -> (Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool]) {
    %138 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
    %139 = @func_4269() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float64]) */;
    %140 = %138.0;
    %141 = %139.0;
    (%140, %141)
  };
  %142() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool]) */
}

def @func_6352() -> (Tensor[(1, 15, 1), float32], Tensor[(2, 4, 560), int16]) {
  @func_6350() /* ty=(Tensor[(1, 15, 1), float32], Tensor[(2, 4, 560), int16]) */
}

def @func_6621(%var_6619: Tensor[(16, 3, 8), float64], %var_6620: Tensor[(1296), uint64]) -> (Tensor[(16, 3, 8), float64], Tensor[(13, 10, 5), float64], Tensor[(1296), uint64], Tensor[(2, 4, 1), float32], Tensor[(16, 3, 8), float32]) {
  %152 = fn (%var_6604: Tensor[(16, 3, 8), float64], %var_6609: Tensor[(1296), uint64]) -> (Tensor[(16, 3, 8), float64], Tensor[(13, 10, 5), float64], Tensor[(1296), uint64], Tensor[(2, 4, 1), float32], Tensor[(16, 3, 8), float32]) {
    %143 = cast(%var_6604, dtype="float64") /* ty=Tensor[(16, 3, 8), float64] */;
    %144 = cast(%var_6609, dtype="uint64") /* ty=Tensor[(1296), uint64] */;
    %145 = reshape(%144, newshape=[1296]) /* ty=Tensor[(1296), uint64] */;
    %146 = @func_6190(%145) /* ty=(Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(9, 16, 9), int64], uint64, Tensor[(1296), uint64], Tensor[(648), float32], Tensor[(13, 10, 5), float64], Tensor[(650), float64], Tensor[(2, 4, 1), float32]) */;
    %147 = cast(%var_6604, dtype="float32") /* ty=Tensor[(16, 3, 8), float32] */;
    %148 = acos(%143) /* ty=Tensor[(16, 3, 8), float64] */;
    %149 = %146.6;
    %150 = @func_2807() /* ty=Tensor[(2, 4, 1), float32] */;
    %151 = sin(%147) /* ty=Tensor[(16, 3, 8), float32] */;
    (%148, %149, %var_6609, %150, %151)
  };
  %152(%var_6619, %var_6620) /* ty=(Tensor[(16, 3, 8), float64], Tensor[(13, 10, 5), float64], Tensor[(1296), uint64], Tensor[(2, 4, 1), float32], Tensor[(16, 3, 8), float32]) */
}

def @func_8155(%var_8153: float32) -> (Tensor[(15, 11, 1), bool], Tensor[(2, 4, 1), float32], Tensor[(15, 11, 1), uint8], Tensor[(2, 4, 1), float64]) {
  @func_8152(%var_8153) /* ty=(Tensor[(15, 11, 1), bool], Tensor[(2, 4, 1), float32], Tensor[(15, 11, 1), uint8], Tensor[(2, 4, 1), float64]) */
}

def @func_2239() -> (Tensor[(2, 4, 1), float32],) {
  %154 = fn () -> (Tensor[(2, 4, 1), float32],) {
    %153 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
    (%153,)
  };
  %154() /* ty=(Tensor[(2, 4, 1), float32],) */
}

def @func_1339() -> (Tensor[(2, 4, 1), float32],) {
  %155 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  (%155,)
}

def @func_8152(%var_8135: float32) -> (Tensor[(15, 11, 1), bool], Tensor[(2, 4, 1), float32], Tensor[(15, 11, 1), uint8], Tensor[(2, 4, 1), float64]) {
  %156 = cast(%var_8135, dtype="bool") /* ty=bool */;
  %157 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 11, 1), float32] */, dtype="bool") /* ty=Tensor[(15, 11, 1), bool] */;
  %158 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 11, 1), float32] */, dtype="uint8") /* ty=Tensor[(15, 11, 1), uint8] */;
  %159 = cast(%var_8135, dtype="uint8") /* ty=uint8 */;
  %160 = @func_4475() /* ty=(Tensor[(2, 4, 1), float64], Tensor[(9, 9, 8), float32]) */;
  %161 = not_equal(%156, %157) /* ty=Tensor[(15, 11, 1), bool] */;
  %162 = @func_4537() /* ty=Tensor[(2, 4, 1), float32] */;
  %163 = minimum(%158, %159) /* ty=Tensor[(15, 11, 1), uint8] */;
  %164 = %160.0;
  (%161, %162, %163, %164)
}

def @func_1647() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) {
  %165 = @func_1415() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(25, 4), float32]) */;
  %166 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  %167 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  %168 = %165.3;
  (%166, %167, %168)
}

def @func_5225() -> (Tensor[(2, 4, 1), float32],) {
  @func_5223() /* ty=(Tensor[(2, 4, 1), float32],) */
}

def @func_1093(%var_1091: Tensor[(3, 9, 5), int32], %var_1092: Tensor[(3, 9, 5), int32]) -> (Tensor[(3, 9, 5), int32], Tensor[(3, 9, 5), float32]) {
  @func_1089(%var_1091, %var_1092) /* ty=(Tensor[(3, 9, 5), int32], Tensor[(3, 9, 5), float32]) */
}

def @func_4695() -> (Tensor[(650), float32], Tensor[(100), float32], Tensor[(2, 4, 648), bool], Tensor[(2, 4, 1), float32]) {
  %169 = cast(meta[relay.Constant][5] /* ty=Tensor[(650), float64] */, dtype="float64") /* ty=Tensor[(650), float64] */;
  %170 = reshape(%169, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float64] */;
  %171 = @func_2315(%170) /* ty=(Tensor[(13, 10, 5), float64],) */;
  %172 = %171.0;
  %173 = cast(%172, dtype="float32") /* ty=Tensor[(13, 10, 5), float32] */;
  %174 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(650), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %175 = cast(meta[relay.Constant][5] /* ty=Tensor[(650), float64] */, dtype="float32") /* ty=Tensor[(650), float32] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?), float32] */;
  %177 = cast(meta[relay.Constant][6] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %178 = reshape(%177, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
  %179 = @func_809(%178) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
  %180 = @func_2250() /* ty=Tensor[(2, 4, 1), float64] */;
  %181 = cast(%180, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
  %182 = cast(meta[relay.Constant][6] /* ty=Tensor[(648), float32] */, dtype="bool") /* ty=Tensor[(648), bool] */;
  %183 = mod(%175, %176) /* ty=Tensor[(650), float32] */;
  %184 = %179.2;
  %185 = logical_and(%181, %182) /* ty=Tensor[(2, 4, 648), bool] */;
  %186 = @func_4537() /* ty=Tensor[(2, 4, 1), float32] */;
  (%183, %184, %185, %186)
}

def @func_2918() -> (Tensor[(2, 4, 1), float32], Tensor[(3, 15, 4), float32], Tensor[(180), float32]) {
  %187 = @func_2555() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %188 = cast(meta[relay.Constant][7] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %189 = reshape(%188, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), float32] */;
  %190 = @func_1017(%189) /* ty=(Tensor[(3, 15, 4), float32],) */;
  %191 = %187.0;
  %192 = %190.0;
  (%191, %192, meta[relay.Constant][7] /* ty=Tensor[(180), float32] */)
}

def @func_2494() -> Tensor[(2, 4, 1), float32] {
  @func_1316() /* ty=Tensor[(2, 4, 1), float32] */
}

def @func_6742() -> (Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %198 = fn () -> (Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
    %193 = @func_3514() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
    %194 = @func_5186() /* ty=(Tensor[(2, 4, 1), float32],) */;
    %195 = @func_3742() /* ty=Tensor[(2, 4, 1), float64] */;
    %196 = %193.0;
    %197 = %194.0;
    (%195, %196, %197)
  };
  %198() /* ty=(Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */
}

def @func_2318(%var_2316: Tensor[(13, 10, 5), float64]) -> (Tensor[(13, 10, 5), float64],) {
  @func_2315(%var_2316) /* ty=(Tensor[(13, 10, 5), float64],) */
}

def @func_6706() -> (Tensor[(180), float32], Tensor[(25, 4), bool], Tensor[(2, 4, 11), int8]) {
  %199 = @func_4433() /* ty=(Tensor[(2, 4, 1), float64], Tensor[(180), float32]) */;
  %200 = @func_4950() /* ty=(Tensor[(25, 4), float32],) */;
  %201 = %200.0;
  %202 = cast(%201, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %203 = log10(%202) /* ty=Tensor[(25, 4), float32] */;
  %204 = cast(%201, dtype="int64") /* ty=Tensor[(25, 4), int64] */;
  %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(2), int32] */;
  %206 = cast(%203, dtype="int64") /* ty=Tensor[(25, 4), int64] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %208 = right_shift(%206, %207) /* ty=Tensor[(25, 4), int64] */;
  %209 = cast(%201, dtype="bool") /* ty=Tensor[(25, 4), bool] */;
  %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(2), int32] */;
  %211 = cast(%208, dtype="bool") /* ty=Tensor[(25, 4), bool] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %213 = @func_5336() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool]) */;
  %214 = %213.0;
  %215 = cast(%214, dtype="int8") /* ty=Tensor[(2, 4, 1), int8] */;
  %216 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 4, 11), float32] */, dtype="int8") /* ty=Tensor[(2, 4, 11), int8] */;
  %217 = %199.1;
  %218 = less(%211, %212) /* ty=Tensor[(25, 4), bool] */;
  %219 = bitwise_and(%215, %216) /* ty=Tensor[(2, 4, 11), int8] */;
  (%217, %218, %219)
}

def @func_7523() -> (Tensor[(2, 4, 1), float32], Tensor[(648), float64], Tensor[(2, 4, 1), float32]) {
  %220 = @func_2030() /* ty=(Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
  %221 = %220.2;
  %222 = cast(%221, dtype="float64") /* ty=Tensor[(648), float64] */;
  %223 = @func_1891() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %224 = @func_4537() /* ty=Tensor[(2, 4, 1), float32] */;
  %225 = atan(%222) /* ty=Tensor[(648), float64] */;
  %226 = %223.0;
  (%224, %225, %226)
}

def @func_2201(%var_2165: Tensor[(25, 4), float64], %var_2174: Tensor[(135), int32], %var_2186: Tensor[(39, 7), float64]) -> (Tensor[(648), float32], Tensor[(25, 4), bool], Tensor[(3, 9, 5), float32], Tensor[(135), int32], Tensor[(4, 5, 5), bool], Tensor[(180), float32], Tensor[(39, 7), float64], Tensor[(25, 4), float32]) {
  %227 = @func_2030() /* ty=(Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
  %228 = @func_2074() /* ty=Tensor[(25, 4), float64] */;
  %229 = cast(%var_2165, dtype="bool") /* ty=Tensor[(25, 4), bool] */;
  %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(2), int32] */;
  %231 = cast(%228, dtype="bool") /* ty=Tensor[(25, 4), bool] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %233 = cast(%var_2174, dtype="int32") /* ty=Tensor[(135), int32] */;
  %234 = cast(%var_2174, dtype="int32") /* ty=Tensor[(135), int32] */;
  %235 = reshape(%233, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), int32] */;
  %236 = reshape(%234, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), int32] */;
  %237 = @func_1089(%235, %236) /* ty=(Tensor[(3, 9, 5), int32], Tensor[(3, 9, 5), float32]) */;
  %238 = @func_2074() /* ty=Tensor[(25, 4), float64] */;
  %239 = cast(%238, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %240 = reshape(%239, newshape=[100]) /* ty=Tensor[(100), float32] */;
  %241 = @func_1454(%240) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
  %242 = cast(%var_2186, dtype="float64") /* ty=Tensor[(39, 7), float64] */;
  %243 = %241.1;
  %244 = cast(%243, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
  %245 = reshape(%242, newshape=[13, 3, 7]) /* ty=Tensor[(13, 3, 7), float64] */;
  %246 = reshape(%244, newshape=[100]) /* ty=Tensor[(100), float32] */;
  %247 = @func_2011(%245, %246) /* ty=(Tensor[(13, 7, 5), uint64], Tensor[(65, 7), uint64], Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(25, 4), float32], Tensor[(3, 15, 4), float32], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), float64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), uint32]) */;
  %248 = cast(%238, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %249 = %227.2;
  %250 = greater_equal(%231, %232) /* ty=Tensor[(25, 4), bool] */;
  %251 = %237.1;
  %252 = %247.7;
  %253 = sin(%248) /* ty=Tensor[(25, 4), float32] */;
  (%249, %250, %251, %var_2174, %243, %252, %var_2186, %253)
}

def @func_5948() -> (Tensor[(648), float32],) {
  %254 = @func_5669() /* ty=(Tensor[(648), float32],) */;
  %255 = %254.0;
  (%255,)
}

def @func_2667() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(648), float32]) {
  %274 = fn () -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(648), float32]) {
    %256 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
    %257 = @func_2555() /* ty=(Tensor[(2, 4, 1), float32],) */;
    %258 = @func_2357() /* ty=(Tensor[(25, 4), float64], Tensor[(13, 10, 5), float64], Tensor[(650), float64]) */;
    %259 = %258.0;
    %260 = cast(%259, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
    %261 = cosh(%260) /* ty=Tensor[(25, 4), float32] */;
    %262 = cast(%261, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
    %263 = cast(%261, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
    %264 = reshape(%262, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
    %265 = reshape(%263, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
    %266 = @func_524(%264, %265) /* ty=(Tensor[(4, 5, 5), bool],) */;
    %267 = cast(meta[relay.Constant][9] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
    %268 = reshape(%267, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
    %269 = @func_809(%268) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
    %270 = %256.0;
    %271 = %257.0;
    %272 = %266.0;
    %273 = %269.1;
    (%270, %271, %261, %272, %273, meta[relay.Constant][9] /* ty=Tensor[(648), float32] */)
  };
  %274() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(648), float32]) */
}

def @func_8441() -> Tensor[(4, 5, 5), bool] {
  %275 = @func_5265() /* ty=(Tensor[(4, 5, 5), bool],) */;
  %275.0
}

def @func_2479(%var_2478: Tensor[(455), uint64]) -> (Tensor[(100), float32], Tensor[(13, 7, 5), uint64], Tensor[(455), uint64], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64]) {
  %294 = fn (%var_2468: Tensor[(455), uint64]) -> (Tensor[(100), float32], Tensor[(13, 7, 5), uint64], Tensor[(455), uint64], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64]) {
    %276 = @func_1489() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 1), float64]) */;
    %277 = cast(%var_2468, dtype="uint64") /* ty=Tensor[(455), uint64] */;
    %278 = cast(%var_2468, dtype="uint64") /* ty=Tensor[(455), uint64] */;
    %279 = reshape(%277, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint64] */;
    %280 = reshape(%278, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint64] */;
    %281 = @func_424(%279, %280) /* ty=(Tensor[(13, 7, 5), uint64],) */;
    %282 = %281.0;
    %283 = cast(%282, dtype="uint64") /* ty=Tensor[(13, 7, 5), uint64] */;
    %284 = cast(%var_2468, dtype="uint64") /* ty=Tensor[(455), uint64] */;
    %285 = reshape(%283, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint64] */;
    %286 = reshape(%284, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint64] */;
    %287 = @func_424(%285, %286) /* ty=(Tensor[(13, 7, 5), uint64],) */;
    %288 = %276.1;
    %289 = cast(%288, dtype="float32") /* ty=Tensor[(100), float32] */;
    %290 = reshape(%289, newshape=[100]) /* ty=Tensor[(100), float32] */;
    %291 = @func_1740(%290) /* ty=(Tensor[(7, 16, 5), uint64], Tensor[(2, 4, 560), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 560), uint64]) */;
    %292 = %287.0;
    %293 = %291.0;
    (%288, %282, %var_2468, %292, %293)
  };
  %294(%var_2478) /* ty=(Tensor[(100), float32], Tensor[(13, 7, 5), uint64], Tensor[(455), uint64], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64]) */
}

def @func_2542() -> (Tensor[(2, 4, 1), float32],) {
  %295 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  (%295,)
}

def @func_5804() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  @func_5802() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */
}

def @func_1415() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(25, 4), float32]) {
  %296 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %297 = cast(meta[relay.Constant][10] /* ty=Tensor[(25, 4), float32] */, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %298 = cast(meta[relay.Constant][10] /* ty=Tensor[(25, 4), float32] */, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %299 = reshape(%297, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %300 = reshape(%298, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %301 = @func_524(%299, %300) /* ty=(Tensor[(4, 5, 5), bool],) */;
  %302 = %296.0;
  %303 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  %304 = %301.0;
  (%302, %303, %304, meta[relay.Constant][10] /* ty=Tensor[(25, 4), float32] */)
}

def @func_7189() -> (Tensor[(180), float32], Tensor[(2, 4, 1), float32]) {
  %305 = @func_6267() /* ty=(Tensor[(180), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %306 = @func_1891() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %307 = %305.0;
  %308 = %306.0;
  (%307, %308)
}

def @func_1456(%var_1455: Tensor[(100), float32]) -> (Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) {
  %316 = fn (%var_1452: Tensor[(100), float32]) -> (Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) {
    %309 = cast(%var_1452, dtype="float32") /* ty=Tensor[(100), float32] */;
    %310 = cast(%var_1452, dtype="float32") /* ty=Tensor[(100), float32] */;
    %311 = reshape(%309, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
    %312 = reshape(%310, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
    %313 = @func_524(%311, %312) /* ty=(Tensor[(4, 5, 5), bool],) */;
    %314 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
    %315 = %313.0;
    (%314, %315, %var_1452)
  };
  %316(%var_1455) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */
}

def @main() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), bool], Tensor[(135), int32], Tensor[(273), float64], Tensor[(25, 4), uint8]) {
  %317 = @func_6742() /* ty=(Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %318 = @func_4340() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %319 = @func_3958() /* ty=Tensor[(25, 4), bool] */;
  %320 = cast(%319, dtype="float64") /* ty=Tensor[(25, 4), float64] */;
  %321 = cast(meta[relay.Constant][11] /* ty=Tensor[(135), int32] */, dtype="int32") /* ty=Tensor[(135), int32] */;
  %322 = cast(meta[relay.Constant][12] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %323 = reshape(%320, newshape=[25, 4]) /* ty=Tensor[(25, 4), float64] */;
  %324 = reshape(%321, newshape=[135]) /* ty=Tensor[(135), int32] */;
  %325 = reshape(%322, newshape=[39, 7]) /* ty=Tensor[(39, 7), float64] */;
  %326 = @func_2206(%323, %324, %325) /* ty=(Tensor[(648), float32], Tensor[(25, 4), bool], Tensor[(3, 9, 5), float32], Tensor[(135), int32], Tensor[(4, 5, 5), bool], Tensor[(180), float32], Tensor[(39, 7), float64], Tensor[(25, 4), float32]) */;
  %327 = @func_3958() /* ty=Tensor[(25, 4), bool] */;
  %328 = cast(meta[relay.Constant][13] /* ty=Tensor[(25, 4), bool] */, dtype="uint8") /* ty=Tensor[(25, 4), uint8] */;
  %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(2), int32] */;
  %330 = cast(%327, dtype="uint8") /* ty=Tensor[(25, 4), uint8] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %332 = %317.1;
  %333 = %318.0;
  %334 = %326.1;
  %335 = maximum(%330, %331) /* ty=Tensor[(25, 4), uint8] */;
  (%332, %333, %334, meta[relay.Constant][11] /* ty=Tensor[(135), int32] */, meta[relay.Constant][12] /* ty=Tensor[(273), float64] */, %335)
}

def @func_8264() -> (Tensor[(2, 4, 560), bool], Tensor[(2, 4, 1), float64]) {
  @func_8262() /* ty=(Tensor[(2, 4, 560), bool], Tensor[(2, 4, 1), float64]) */
}

def @func_4539() -> Tensor[(2, 4, 1), float32] {
  @func_4537() /* ty=Tensor[(2, 4, 1), float32] */
}

def @func_4697() -> (Tensor[(650), float32], Tensor[(100), float32], Tensor[(2, 4, 648), bool], Tensor[(2, 4, 1), float32]) {
  @func_4695() /* ty=(Tensor[(650), float32], Tensor[(100), float32], Tensor[(2, 4, 648), bool], Tensor[(2, 4, 1), float32]) */
}

def @func_6350() -> (Tensor[(1, 15, 1), float32], Tensor[(2, 4, 560), int16]) {
  %336 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 15, 1), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 1), float32] */;
  %337 = @func_4775() /* ty=(Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 560), int16]) */;
  %338 = sin(%336) /* ty=Tensor[(1, 15, 1), float32] */;
  %339 = %337.3;
  (%338, %339)
}

def @func_4077() -> (Tensor[(9, 9, 8), float32],) {
  @func_4075() /* ty=(Tensor[(9, 9, 8), float32],) */
}

def @func_1318() -> Tensor[(2, 4, 1), float32] {
  @func_1316() /* ty=Tensor[(2, 4, 1), float32] */
}

def @func_5414() -> (Tensor[(2, 4, 1), float32], Tensor[(180), float32]) {
  @func_5412() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(180), float32]) */
}

def @func_2809() -> Tensor[(2, 4, 1), float32] {
  @func_2807() /* ty=Tensor[(2, 4, 1), float32] */
}

def @func_6462() -> (Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), uint64], Tensor[(2, 4, 1), float32]) {
  @func_6460() /* ty=(Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), uint64], Tensor[(2, 4, 1), float32]) */
}

def @func_1341() -> (Tensor[(2, 4, 1), float32],) {
  @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */
}

def @func_3609(%var_3604: Tensor[(5, 15, 14), int32]) -> (Tensor[(5, 15, 14), bool],) {
  %340 = cast(%var_3604, dtype="bool") /* ty=Tensor[(5, 15, 14), bool] */;
  %341 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(5, 15, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 15, 14), int32] */, dtype="bool") /* ty=Tensor[(5, 15, 14), bool] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %344 = equal(%342, %343) /* ty=Tensor[(5, 15, 14), bool] */;
  (%344,)
}

def @func_7925(%var_7923: Tensor[(1296), uint64]) -> (Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(180), float32], Tensor[(180), float32], Tensor[(9, 9, 8), float32], uint64, Tensor[(1296), uint64], Tensor[(648), float32]) {
  @func_7922(%var_7923) /* ty=(Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(180), float32], Tensor[(180), float32], Tensor[(9, 9, 8), float32], uint64, Tensor[(1296), uint64], Tensor[(648), float32]) */
}

def @func_3913(%var_3912: Tensor[(2, 4, 6), float32]) -> Tensor[(2, 4, 6), int16] {
  %349 = fn (%var_3899: Tensor[(2, 4, 6), float32]) -> Tensor[(2, 4, 6), int16] {
    %345 = @func_2960() /* ty=(Tensor[(2, 4, 1), float32],) */;
    %346 = %345.0;
    %347 = cast(%346, dtype="int16") /* ty=Tensor[(2, 4, 1), int16] */;
    %348 = cast(%var_3899, dtype="int16") /* ty=Tensor[(2, 4, 6), int16] */;
    add(%347, %348) /* ty=Tensor[(2, 4, 6), int16] */
  };
  %349(%var_3912) /* ty=Tensor[(2, 4, 6), int16] */
}

def @func_8285() -> Tensor[(2, 4, 1), float32] {
  @func_8283() /* ty=Tensor[(2, 4, 1), float32] */
}

def @func_812(%var_810: Tensor[(9, 9, 8), float32]) -> (Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) {
  @func_809(%var_810) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */
}

def @func_3833(%var_3832: Tensor[(560), uint64]) -> (Tensor[(560), uint64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 560), int8]) {
  %360 = fn (%var_3808: Tensor[(560), uint64]) -> (Tensor[(560), uint64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 560), int8]) {
    %350 = cast(%var_3808, dtype="uint64") /* ty=Tensor[(560), uint64] */;
    %351 = reshape(%350, newshape=[560]) /* ty=Tensor[(560), uint64] */;
    %352 = @func_3249(%351) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(2, 4, ?), bool]) */;
    %353 = @func_2238() /* ty=(Tensor[(2, 4, 1), float32],) */;
    %354 = %353.0;
    %355 = cast(%354, dtype="int8") /* ty=Tensor[(2, 4, 1), int8] */;
    %356 = cast(%var_3808, dtype="int8") /* ty=Tensor[(560), int8] */;
    %357 = %352.2;
    %358 = @func_3798() /* ty=Tensor[(2, 4, 1), float32] */;
    %359 = logical_xor(%355, %356) /* ty=Tensor[(2, 4, 560), int8] */;
    (%357, %358, %359)
  };
  %360(%var_3832) /* ty=(Tensor[(560), uint64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 560), int8]) */
}

def @func_8404() -> (Tensor[(2, 4, 1), float32],) {
  %363 = fn () -> (Tensor[(2, 4, 1), float32],) {
    %361 = @func_2555() /* ty=(Tensor[(2, 4, 1), float32],) */;
    %362 = %361.0;
    (%362,)
  };
  %363() /* ty=(Tensor[(2, 4, 1), float32],) */
}

def @func_2074() -> Tensor[(25, 4), float64] {
  %364 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
  %365 = %364.2;
  %366 = cast(meta[relay.Constant][16] /* ty=Tensor[(25, 4), float32] */, dtype="float64") /* ty=Tensor[(25, 4), float64] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(2), int32] */;
  %368 = cast(%365, dtype="float64") /* ty=Tensor[(25, 4), float64] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  mod(%368, %369) /* ty=Tensor[(25, 4), float64] */
}

def @func_424(%var_397: Tensor[(13, 7, 5), uint64], %var_398: Tensor[(13, 7, 5), uint64]) -> (Tensor[(13, 7, 5), uint64],) {
  %370 = cast(%var_398, dtype="uint64") /* ty=Tensor[(13, 7, 5), uint64] */;
  %371 = shape_of(%var_397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%var_397, dtype="uint64") /* ty=Tensor[(13, 7, 5), uint64] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %374 = multiply(%372, %373) /* ty=Tensor[(13, 7, 5), uint64] */;
  (%374,)
}

def @func_6482(%var_6481: Tensor[(455), uint64]) -> (Tensor[(2, 4, 1), float32], Tensor[(100), float32], Tensor[(455), uint64]) {
  %380 = fn (%var_6477: Tensor[(455), uint64]) -> (Tensor[(2, 4, 1), float32], Tensor[(100), float32], Tensor[(455), uint64]) {
    %375 = cast(%var_6477, dtype="uint64") /* ty=Tensor[(455), uint64] */;
    %376 = reshape(%375, newshape=[455]) /* ty=Tensor[(455), uint64] */;
    %377 = @func_2477(%376) /* ty=(Tensor[(100), float32], Tensor[(13, 7, 5), uint64], Tensor[(455), uint64], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64]) */;
    %378 = @func_3282() /* ty=Tensor[(2, 4, 1), float32] */;
    %379 = %377.0;
    (%378, %379, %var_6477)
  };
  %380(%var_6481) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(100), float32], Tensor[(455), uint64]) */
}

def @func_6417() -> (Tensor[(100), float32],) {
  @func_6415() /* ty=(Tensor[(100), float32],) */
}

def @func_8209() -> (Tensor[(2, 4, 1), float32], Tensor[(100), float32]) {
  %385 = fn () -> (Tensor[(2, 4, 1), float32], Tensor[(100), float32]) {
    %381 = @func_2960() /* ty=(Tensor[(2, 4, 1), float32],) */;
    %382 = @func_6415() /* ty=(Tensor[(100), float32],) */;
    %383 = %381.0;
    %384 = %382.0;
    (%383, %384)
  };
  %385() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(100), float32]) */
}

def @func_5774(%var_5748: Tensor[(48), float32]) -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 6), int16], Tensor[(48), float32]) {
  %386 = cast(%var_5748, dtype="float32") /* ty=Tensor[(48), float32] */;
  %387 = reshape(%386, newshape=[2, 4, 6]) /* ty=Tensor[(2, 4, 6), float32] */;
  %388 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  %389 = @func_3911(%387) /* ty=Tensor[(2, 4, 6), int16] */;
  (%388, %389, %var_5748)
}

def @func_4041() -> (Tensor[(9, 9, 8), float32],) {
  %392 = fn () -> (Tensor[(9, 9, 8), float32],) {
    %390 = @func_2030() /* ty=(Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
    %391 = %390.1;
    (%391,)
  };
  %392() /* ty=(Tensor[(9, 9, 8), float32],) */
}

def @func_5412() -> (Tensor[(2, 4, 1), float32], Tensor[(180), float32]) {
  %393 = @func_3994() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(100), float32], Tensor[(648), float32]) */;
  %394 = %393.0;
  %395 = cast(%394, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  %396 = @func_2976() /* ty=(Tensor[(180), float32],) */;
  %397 = sinh(%395) /* ty=Tensor[(2, 4, 1), float32] */;
  %398 = %396.0;
  (%397, %398)
}

def @func_8283() -> Tensor[(2, 4, 1), float32] {
  @func_1316() /* ty=Tensor[(2, 4, 1), float32] */
}

def @func_7720(%var_7717: Tensor[(2, 5, 10), uint8], %var_7718: Tensor[(2, 5, 10), uint8], %var_7719: Tensor[(1296), uint64]) -> (Tensor[(2, 5, 10), bool], Tensor[(2, 4, 1), float64], Tensor[(1296), uint64], Tensor[(2, 4, 1), float32], Tensor[(120), float64], Tensor[(2, 4, 1), float32], Tensor[(9, 9, 8), float32]) {
  @func_7715(%var_7717, %var_7718, %var_7719) /* ty=(Tensor[(2, 5, 10), bool], Tensor[(2, 4, 1), float64], Tensor[(1296), uint64], Tensor[(2, 4, 1), float32], Tensor[(120), float64], Tensor[(2, 4, 1), float32], Tensor[(9, 9, 8), float32]) */
}

def @func_3036() -> (Tensor[(3, 15, 4), float32], Tensor[(2, 4, 180), bool], Tensor[(2, 4, 1), float64]) {
  %399 = cast(meta[relay.Constant][17] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %400 = reshape(%399, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), float32] */;
  %401 = @func_1017(%400) /* ty=(Tensor[(3, 15, 4), float32],) */;
  %402 = @func_2960() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %403 = %402.0;
  %404 = cast(meta[relay.Constant][17] /* ty=Tensor[(180), float32] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %405 = cast(%403, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
  %406 = @func_1891() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %407 = %401.0;
  %408 = less_equal(%404, %405) /* ty=Tensor[(2, 4, 180), bool] */;
  %409 = %406.1;
  (%407, %408, %409)
}

def @func_7525() -> (Tensor[(2, 4, 1), float32], Tensor[(648), float64], Tensor[(2, 4, 1), float32]) {
  @func_7523() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(648), float64], Tensor[(2, 4, 1), float32]) */
}

def @func_2544() -> (Tensor[(2, 4, 1), float32],) {
  @func_2542() /* ty=(Tensor[(2, 4, 1), float32],) */
}

def @func_5050() -> Tensor[(2, 4, ?), float32] {
  %420 = fn () -> Tensor[(2, 4, ?), float32] {
    %410 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
    %411 = %410.0;
    %412 = cast(%411, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
    %413 = rsqrt(%412) /* ty=Tensor[(2, 4, 1), float32] */;
    %414 = @func_3514() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
    %415 = %414.3;
    %416 = cast(%415, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
    %417 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
    %418 = cast(%413, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
    %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%418, %419) /* ty=Tensor[(2, 4, ?), float32] */
  };
  %420() /* ty=Tensor[(2, 4, ?), float32] */
}

def @func_6190(%var_6165: Tensor[(1296), uint64]) -> (Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(9, 16, 9), int64], uint64, Tensor[(1296), uint64], Tensor[(648), float32], Tensor[(13, 10, 5), float64], Tensor[(650), float64], Tensor[(2, 4, 1), float32]) {
  %421 = cast(meta[relay.Constant][18] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %422 = cast(%var_6165, dtype="uint64") /* ty=Tensor[(1296), uint64] */;
  %423 = cast(meta[relay.Constant][19] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %424 = reshape(%421, newshape=[]) /* ty=uint64 */;
  %425 = reshape(%422, newshape=[9, 16, 9]) /* ty=Tensor[(9, 16, 9), uint64] */;
  %426 = reshape(%423, newshape=[648]) /* ty=Tensor[(648), float32] */;
  %427 = @func_4208(%424, %425, %426) /* ty=(Tensor[(9, 16, 9), uint64], Tensor[(9, 16, 9), int64], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
  %428 = cast(meta[relay.Constant][20] /* ty=Tensor[(650), float64] */, dtype="float64") /* ty=Tensor[(650), float64] */;
  %429 = reshape(%428, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float64] */;
  %430 = @func_2315(%429) /* ty=(Tensor[(13, 10, 5), float64],) */;
  %431 = @func_5802() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %432 = @func_3762() /* ty=Tensor[(2, 4, 1), float64] */;
  %433 = @func_2807() /* ty=Tensor[(2, 4, 1), float32] */;
  %434 = %427.1;
  %435 = %430.0;
  %436 = %431.1;
  (%432, %433, %434, meta[relay.Constant][18] /* ty=uint64 */, %var_6165, meta[relay.Constant][19] /* ty=Tensor[(648), float32] */, %435, meta[relay.Constant][20] /* ty=Tensor[(650), float64] */, %436)
}

def @func_4149(%var_4097: Tensor[(560), uint64], %var_4128: Tensor[(135), int32], %var_4138: Tensor[(100), float32]) -> (Tensor[(3, 15, 4), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(13, 10, 5), float64], Tensor[(650), float64], Tensor[(3, 15, 4), float32], Tensor[(273), float64], Tensor[(3, 9, 5), float32], Tensor[(135), int32], Tensor[(100), int8]) {
  %437 = @func_3036() /* ty=(Tensor[(3, 15, 4), float32], Tensor[(2, 4, 180), bool], Tensor[(2, 4, 1), float64]) */;
  %438 = cast(%var_4097, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %439 = reshape(%438, newshape=[560]) /* ty=Tensor[(560), uint64] */;
  %440 = @func_3173(%439) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(2, 4, 1), float32]) */;
  %441 = cast(meta[relay.Constant][21] /* ty=Tensor[(650), float64] */, dtype="float64") /* ty=Tensor[(650), float64] */;
  %442 = reshape(%441, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float64] */;
  %443 = @func_2315(%442) /* ty=(Tensor[(13, 10, 5), float64],) */;
  %444 = cast(meta[relay.Constant][22] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %445 = cast(meta[relay.Constant][23] /* ty=Tensor[(100), float32] */, dtype="float32") /* ty=Tensor[(100), float32] */;
  %446 = reshape(%444, newshape=[13, 3, 7]) /* ty=Tensor[(13, 3, 7), float64] */;
  %447 = reshape(%445, newshape=[100]) /* ty=Tensor[(100), float32] */;
  %448 = @func_2011(%446, %447) /* ty=(Tensor[(13, 7, 5), uint64], Tensor[(65, 7), uint64], Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(25, 4), float32], Tensor[(3, 15, 4), float32], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), float64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), uint32]) */;
  %449 = cast(meta[relay.Constant][23] /* ty=Tensor[(100), float32] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %450 = cast(%var_4128, dtype="int32") /* ty=Tensor[(135), int32] */;
  %451 = cast(meta[relay.Constant][22] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %452 = reshape(%449, newshape=[25, 4]) /* ty=Tensor[(25, 4), float64] */;
  %453 = reshape(%450, newshape=[135]) /* ty=Tensor[(135), int32] */;
  %454 = reshape(%451, newshape=[39, 7]) /* ty=Tensor[(39, 7), float64] */;
  %455 = @func_2201(%452, %453, %454) /* ty=(Tensor[(648), float32], Tensor[(25, 4), bool], Tensor[(3, 9, 5), float32], Tensor[(135), int32], Tensor[(4, 5, 5), bool], Tensor[(180), float32], Tensor[(39, 7), float64], Tensor[(25, 4), float32]) */;
  %456 = cast(%var_4138, dtype="int8") /* ty=Tensor[(100), int8] */;
  %457 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(100), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %458 = cast(meta[relay.Constant][23] /* ty=Tensor[(100), float32] */, dtype="int8") /* ty=Tensor[(100), int8] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?), int8] */;
  %460 = %437.0;
  %461 = %440.2;
  %462 = %443.0;
  %463 = %448.9;
  %464 = %455.2;
  %465 = bitwise_or(%458, %459) /* ty=Tensor[(100), int8] */;
  (%460, %461, %var_4097, %462, meta[relay.Constant][21] /* ty=Tensor[(650), float64] */, %463, meta[relay.Constant][22] /* ty=Tensor[(273), float64] */, %464, %var_4128, %465)
}

def @func_2555() -> (Tensor[(2, 4, 1), float32],) {
  %466 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %467 = %466.0;
  (%467,)
}

def @func_527(%var_525: Tensor[(4, 5, 5), float32], %var_526: Tensor[(4, 5, 5), float32]) -> (Tensor[(4, 5, 5), bool],) {
  %485 = fn (%var_485: Tensor[(4, 5, 5), float32], %var_486: Tensor[(4, 5, 5), float32]) -> (Tensor[(4, 5, 5), bool],) {
    %468 = cast(%var_486, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
    %469 = shape_of(%var_485, dtype="int32") /* ty=Tensor[(3), int32] */;
    %470 = cast(%var_485, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
    %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %472 = floor_mod(%470, %471) /* ty=Tensor[(4, 5, 5), float32] */;
    %473 = cast(%472, dtype="bool") /* ty=Tensor[(4, 5, 5), bool] */;
    %474 = shape_of(%var_485, dtype="int32") /* ty=Tensor[(3), int32] */;
    %475 = cast(%var_485, dtype="bool") /* ty=Tensor[(4, 5, 5), bool] */;
    %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %477 = greater_equal(%475, %476) /* ty=Tensor[(4, 5, 5), bool] */;
    %478 = cast(%477, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
    %479 = exp(%478) /* ty=Tensor[(4, 5, 5), float32] */;
    %480 = cast(%477, dtype="bool") /* ty=Tensor[(4, 5, 5), bool] */;
    %481 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
    %482 = cast(%479, dtype="bool") /* ty=Tensor[(4, 5, 5), bool] */;
    %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %484 = logical_or(%482, %483) /* ty=Tensor[(4, 5, 5), bool] */;
    (%484,)
  };
  %485(%var_525, %var_526) /* ty=(Tensor[(4, 5, 5), bool],) */
}

def @func_3176(%var_3174: Tensor[(560), uint64]) -> (Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(2, 4, 1), float32]) {
  @func_3173(%var_3174) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(2, 4, 1), float32]) */
}

def @func_1743(%var_1741: Tensor[(100), float32]) -> (Tensor[(7, 16, 5), uint64], Tensor[(2, 4, 560), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 560), uint64]) {
  @func_1740(%var_1741) /* ty=(Tensor[(7, 16, 5), uint64], Tensor[(2, 4, 560), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 560), uint64]) */
}

def @func_3743() -> Tensor[(2, 4, 1), float64] {
  %488 = fn () -> Tensor[(2, 4, 1), float64] {
    %486 = @func_2250() /* ty=Tensor[(2, 4, 1), float64] */;
    %487 = cast(%486, dtype="float64") /* ty=Tensor[(2, 4, 1), float64] */;
    log(%487) /* ty=Tensor[(2, 4, 1), float64] */
  };
  %488() /* ty=Tensor[(2, 4, 1), float64] */
}

def @func_7481(%var_7477: Tensor[(588), uint16], %var_7478: Tensor[(650), float64], %var_7479: Tensor[(560), uint64], %var_7480: Tensor[(135), int32]) -> (Tensor[(180), float32], Tensor[(3, 15, 4), float32], Tensor[(588), uint16], Tensor[(2, 4, 650), uint16], Tensor[(100), float32], Tensor[(273), float64], Tensor[(560), uint64], Tensor[(135), int32]) {
  %517 = fn (%var_7383: Tensor[(588), uint16], %var_7384: Tensor[(650), float64], %var_7448: Tensor[(560), uint64], %var_7449: Tensor[(135), int32]) -> (Tensor[(180), float32], Tensor[(3, 15, 4), float32], Tensor[(588), uint16], Tensor[(2, 4, 650), uint16], Tensor[(100), float32], Tensor[(273), float64], Tensor[(560), uint64], Tensor[(135), int32]) {
    %489 = cast(%var_7383, dtype="uint16") /* ty=Tensor[(588), uint16] */;
    %490 = cast(%var_7383, dtype="uint16") /* ty=Tensor[(588), uint16] */;
    %491 = @func_5530() /* ty=Tensor[(180), float32] */;
    %492 = cast(%491, dtype="float32") /* ty=Tensor[(180), float32] */;
    %493 = cast(%var_7384, dtype="float64") /* ty=Tensor[(650), float64] */;
    %494 = reshape(%489, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), uint16] */;
    %495 = reshape(%490, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), uint16] */;
    %496 = reshape(%492, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %497 = reshape(%493, newshape=[650]) /* ty=Tensor[(650), float64] */;
    %498 = @func_2408(%494, %495, %496, %497) /* ty=(Tensor[(14, 6, 7), uint16], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(2, 4, 650), int16]) */;
    %499 = @func_4339() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
    %500 = %499.2;
    %501 = cast(%var_7384, dtype="uint16") /* ty=Tensor[(650), uint16] */;
    %502 = cast(%500, dtype="uint16") /* ty=Tensor[(2, 4, 1), uint16] */;
    %503 = @func_4695() /* ty=(Tensor[(650), float32], Tensor[(100), float32], Tensor[(2, 4, 648), bool], Tensor[(2, 4, 1), float32]) */;
    %504 = %503.1;
    %505 = cast(%504, dtype="float32") /* ty=Tensor[(100), float32] */;
    %506 = cast(%var_7448, dtype="uint64") /* ty=Tensor[(560), uint64] */;
    %507 = cast(%var_7449, dtype="int32") /* ty=Tensor[(135), int32] */;
    %508 = cast(%504, dtype="float32") /* ty=Tensor[(100), float32] */;
    %509 = reshape(%506, newshape=[560]) /* ty=Tensor[(560), uint64] */;
    %510 = reshape(%507, newshape=[135]) /* ty=Tensor[(135), int32] */;
    %511 = reshape(%508, newshape=[100]) /* ty=Tensor[(100), float32] */;
    %512 = @func_4149(%509, %510, %511) /* ty=(Tensor[(3, 15, 4), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(13, 10, 5), float64], Tensor[(650), float64], Tensor[(3, 15, 4), float32], Tensor[(273), float64], Tensor[(3, 9, 5), float32], Tensor[(135), int32], Tensor[(100), int8]) */;
    %513 = %498.1;
    %514 = minimum(%501, %502) /* ty=Tensor[(2, 4, 650), uint16] */;
    %515 = cos(%505) /* ty=Tensor[(100), float32] */;
    %516 = %512.6;
    (%491, %513, %var_7383, %514, %515, %516, %var_7448, %var_7449)
  };
  %517(%var_7477, %var_7478, %var_7479, %var_7480) /* ty=(Tensor[(180), float32], Tensor[(3, 15, 4), float32], Tensor[(588), uint16], Tensor[(2, 4, 650), uint16], Tensor[(100), float32], Tensor[(273), float64], Tensor[(560), uint64], Tensor[(135), int32]) */
}

def @func_2807() -> Tensor[(2, 4, 1), float32] {
  @func_1316() /* ty=Tensor[(2, 4, 1), float32] */
}

def @func_1559(%var_1535: Tensor[(7, 16, 5), uint64], %var_1536: Tensor[(7, 16, 5), uint64]) -> (Tensor[(7, 16, 5), uint64], Tensor[(7, 16, 5), int64]) {
  %518 = cast(%var_1536, dtype="uint64") /* ty=Tensor[(7, 16, 5), uint64] */;
  %519 = shape_of(%var_1535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%var_1535, dtype="uint64") /* ty=Tensor[(7, 16, 5), uint64] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %522 = cast(%var_1536, dtype="float64") /* ty=Tensor[(7, 16, 5), float64] */;
  %523 = log(%522) /* ty=Tensor[(7, 16, 5), float64] */;
  %524 = cast(%var_1535, dtype="int64") /* ty=Tensor[(7, 16, 5), int64] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%523, dtype="int64") /* ty=Tensor[(7, 16, 5), int64] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %528 = bitwise_or(%520, %521) /* ty=Tensor[(7, 16, 5), uint64] */;
  %529 = bitwise_xor(%526, %527) /* ty=Tensor[(7, 16, 5), int64] */;
  (%528, %529)
}

def @func_2960() -> (Tensor[(2, 4, 1), float32],) {
  %530 = @func_2666() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(648), float32]) */;
  %531 = %530.1;
  (%531,)
}

def @func_6415() -> (Tensor[(100), float32],) {
  %532 = @func_4695() /* ty=(Tensor[(650), float32], Tensor[(100), float32], Tensor[(2, 4, 648), bool], Tensor[(2, 4, 1), float32]) */;
  %533 = %532.1;
  (%533,)
}

def @func_6578() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %536 = fn () -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
    %534 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
    %535 = @func_2494() /* ty=Tensor[(2, 4, 1), float32] */;
    (%534, %535)
  };
  %536() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */
}

def @func_5482() -> (Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(2, 4, 6), int16], Tensor[(2, 4, 650), float32], Tensor[(2, 4, 48), float32]) {
  @func_5480() /* ty=(Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(2, 4, 6), int16], Tensor[(2, 4, 650), float32], Tensor[(2, 4, 48), float32]) */
}

def @func_6267() -> (Tensor[(180), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %537 = @func_5802() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %538 = @func_3343() /* ty=Tensor[(180), float32] */;
  %539 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
  %540 = @func_2494() /* ty=Tensor[(2, 4, 1), float32] */;
  %541 = %537.1;
  (%538, %539, %540, %541)
}

def @func_4776() -> (Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 560), int16]) {
  %557 = fn () -> (Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 560), int16]) {
    %542 = @func_4269() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float64]) */;
    %543 = cast(meta[relay.Constant][24] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
    %544 = reshape(%543, newshape=[560]) /* ty=Tensor[(560), uint64] */;
    %545 = @func_3173(%544) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(2, 4, 1), float32]) */;
    %546 = %545.2;
    %547 = cast(%546, dtype="uint64") /* ty=Tensor[(560), uint64] */;
    %548 = reshape(%547, newshape=[560]) /* ty=Tensor[(560), uint64] */;
    %549 = @func_3173(%548) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(2, 4, 1), float32]) */;
    %550 = @func_4339() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
    %551 = %550.0;
    %552 = cast(%551, dtype="int16") /* ty=Tensor[(2, 4, 1), int16] */;
    %553 = cast(%546, dtype="int16") /* ty=Tensor[(560), int16] */;
    %554 = %542.0;
    %555 = %549.3;
    %556 = left_shift(%552, %553) /* ty=Tensor[(2, 4, 560), int16] */;
    (meta[relay.Constant][24] /* ty=Tensor[(560), uint64] */, %554, %555, %556)
  };
  %557() /* ty=(Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 560), int16]) */
}

def @func_5223() -> (Tensor[(2, 4, 1), float32],) {
  %558 = @func_2526() /* ty=Tensor[(2, 4, 1), float32] */;
  (%558,)
}

def @func_5284() -> (Tensor[(2, 4, 180), bool],) {
  @func_5282() /* ty=(Tensor[(2, 4, 180), bool],) */
}

def @func_2011(%var_1905: Tensor[(13, 3, 7), float64], %var_1923: Tensor[(100), float32]) -> (Tensor[(13, 7, 5), uint64], Tensor[(65, 7), uint64], Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(25, 4), float32], Tensor[(3, 15, 4), float32], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), float64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), uint32]) {
  %559 = cast(meta[relay.Constant][25] /* ty=Tensor[(65, 7), uint64] */, dtype="uint64") /* ty=Tensor[(65, 7), uint64] */;
  %560 = cast(meta[relay.Constant][25] /* ty=Tensor[(65, 7), uint64] */, dtype="uint64") /* ty=Tensor[(65, 7), uint64] */;
  %561 = reshape(%559, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint64] */;
  %562 = reshape(%560, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint64] */;
  %563 = @func_424(%561, %562) /* ty=(Tensor[(13, 7, 5), uint64],) */;
  %564 = cast(%var_1923, dtype="float32") /* ty=Tensor[(100), float32] */;
  %565 = reshape(%564, newshape=[100]) /* ty=Tensor[(100), float32] */;
  %566 = @func_1454(%565) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
  %567 = cast(%var_1923, dtype="float32") /* ty=Tensor[(100), float32] */;
  %568 = cast(%var_1923, dtype="float32") /* ty=Tensor[(100), float32] */;
  %569 = reshape(%567, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %570 = reshape(%568, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %571 = @func_524(%569, %570) /* ty=(Tensor[(4, 5, 5), bool],) */;
  %572 = @func_1776() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */;
  %573 = cast(meta[relay.Constant][26] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %574 = reshape(%573, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), float32] */;
  %575 = @func_1017(%574) /* ty=(Tensor[(3, 15, 4), float32],) */;
  %576 = @func_1415() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(25, 4), float32]) */;
  %577 = %575.0;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %579 = reshape(%578, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), float32] */;
  %580 = @func_1017(%579) /* ty=(Tensor[(3, 15, 4), float32],) */;
  %581 = %563.0;
  %582 = cast(%581, dtype="uint64") /* ty=Tensor[(13, 7, 5), uint64] */;
  %583 = cast(%581, dtype="uint64") /* ty=Tensor[(13, 7, 5), uint64] */;
  %584 = reshape(%582, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint64] */;
  %585 = reshape(%583, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint64] */;
  %586 = @func_424(%584, %585) /* ty=(Tensor[(13, 7, 5), uint64],) */;
  %587 = cast(meta[relay.Constant][27] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %588 = cast(meta[relay.Constant][27] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %589 = reshape(%587, newshape=[7, 16, 5]) /* ty=Tensor[(7, 16, 5), uint64] */;
  %590 = reshape(%588, newshape=[7, 16, 5]) /* ty=Tensor[(7, 16, 5), uint64] */;
  %591 = @func_1559(%589, %590) /* ty=(Tensor[(7, 16, 5), uint64], Tensor[(7, 16, 5), int64]) */;
  %592 = cast(%var_1923, dtype="float32") /* ty=Tensor[(100), float32] */;
  %593 = %576.3;
  %594 = cast(%593, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %595 = reshape(%592, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %596 = reshape(%594, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %597 = @func_524(%595, %596) /* ty=(Tensor[(4, 5, 5), bool],) */;
  %598 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 3, 7), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 7), float64] */;
  %599 = cast(%var_1905, dtype="float64") /* ty=Tensor[(13, 3, 7), float64] */;
  %600 = power(%598, %599) /* ty=Tensor[(13, 3, 7), float64] */;
  %601 = cast(%600, dtype="float32") /* ty=Tensor[(13, 3, 7), float32] */;
  %602 = sqrt(%601) /* ty=Tensor[(13, 3, 7), float32] */;
  %603 = cast(%602, dtype="float64") /* ty=Tensor[(13, 3, 7), float64] */;
  %604 = log10(%603) /* ty=Tensor[(13, 3, 7), float64] */;
  %605 = cast(%604, dtype="float64") /* ty=Tensor[(13, 3, 7), float64] */;
  %606 = @func_1776() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */;
  %607 = cast(%600, dtype="bool") /* ty=Tensor[(13, 3, 7), bool] */;
  %608 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%604, dtype="bool") /* ty=Tensor[(13, 3, 7), bool] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %611 = logical_and(%609, %610) /* ty=Tensor[(13, 3, 7), bool] */;
  %612 = cast(%604, dtype="uint32") /* ty=Tensor[(13, 3, 7), uint32] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%611, dtype="uint32") /* ty=Tensor[(13, 3, 7), uint32] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %616 = %566.1;
  %617 = %571.0;
  %618 = %572.2;
  %619 = %580.0;
  %620 = %586.0;
  %621 = %591.0;
  %622 = %597.0;
  %623 = tan(%605) /* ty=Tensor[(13, 3, 7), float64] */;
  %624 = %606.2;
  %625 = maximum(%614, %615) /* ty=Tensor[(13, 3, 7), uint32] */;
  (%581, meta[relay.Constant][25] /* ty=Tensor[(65, 7), uint64] */, %616, %var_1923, %617, %618, %577, meta[relay.Constant][26] /* ty=Tensor[(180), float32] */, %593, %619, %620, %621, meta[relay.Constant][27] /* ty=Tensor[(560), uint64] */, %622, %623, %624, %625)
}

def @func_3249(%var_3243: Tensor[(560), uint64]) -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(2, 4, ?), bool]) {
  %626 = @func_2960() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %627 = @func_1850() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %628 = cast(%var_3243, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %629 = reshape(%628, newshape=[560]) /* ty=Tensor[(560), uint64] */;
  %630 = @func_3173(%629) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(2, 4, 1), float32]) */;
  %631 = @func_2494() /* ty=Tensor[(2, 4, 1), float32] */;
  %632 = cast(%631, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  %633 = cosh(%632) /* ty=Tensor[(2, 4, 1), float32] */;
  %634 = cast(%631, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
  %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%633, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %638 = %626.0;
  %639 = %627.3;
  %640 = %630.2;
  %641 = equal(%636, %637) /* ty=Tensor[(2, 4, ?), bool] */;
  (%638, %639, %640, %var_3243, %641)
}

def @func_2315(%var_2309: Tensor[(13, 10, 5), float64]) -> (Tensor[(13, 10, 5), float64],) {
  %642 = cast(%var_2309, dtype="float64") /* ty=Tensor[(13, 10, 5), float64] */;
  %643 = sinh(%642) /* ty=Tensor[(13, 10, 5), float64] */;
  (%643,)
}

def @func_4154(%var_4151: Tensor[(560), uint64], %var_4152: Tensor[(135), int32], %var_4153: Tensor[(100), float32]) -> (Tensor[(3, 15, 4), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(13, 10, 5), float64], Tensor[(650), float64], Tensor[(3, 15, 4), float32], Tensor[(273), float64], Tensor[(3, 9, 5), float32], Tensor[(135), int32], Tensor[(100), int8]) {
  @func_4149(%var_4151, %var_4152, %var_4153) /* ty=(Tensor[(3, 15, 4), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(13, 10, 5), float64], Tensor[(650), float64], Tensor[(3, 15, 4), float32], Tensor[(273), float64], Tensor[(3, 9, 5), float32], Tensor[(135), int32], Tensor[(100), int8]) */
}

def @func_1563(%var_1561: Tensor[(7, 16, 5), uint64], %var_1562: Tensor[(7, 16, 5), uint64]) -> (Tensor[(7, 16, 5), uint64], Tensor[(7, 16, 5), int64]) {
  @func_1559(%var_1561, %var_1562) /* ty=(Tensor[(7, 16, 5), uint64], Tensor[(7, 16, 5), int64]) */
}

def @func_7989() -> (Tensor[(2, 4, 1), float32],) {
  @func_7987() /* ty=(Tensor[(2, 4, 1), float32],) */
}

def @func_8089() -> (Tensor[(2, 4, 7), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 7), bool]) {
  @func_8087() /* ty=(Tensor[(2, 4, 7), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 7), bool]) */
}

def @func_1740(%var_1727: Tensor[(100), float32]) -> (Tensor[(7, 16, 5), uint64], Tensor[(2, 4, 560), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 560), uint64]) {
  %644 = cast(meta[relay.Constant][29] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %645 = cast(meta[relay.Constant][29] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %646 = reshape(%644, newshape=[7, 16, 5]) /* ty=Tensor[(7, 16, 5), uint64] */;
  %647 = reshape(%645, newshape=[7, 16, 5]) /* ty=Tensor[(7, 16, 5), uint64] */;
  %648 = @func_1559(%646, %647) /* ty=(Tensor[(7, 16, 5), uint64], Tensor[(7, 16, 5), int64]) */;
  %649 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %650 = %649.0;
  %651 = cast(%650, dtype="float64") /* ty=Tensor[(2, 4, 1), float64] */;
  %652 = asin(%651) /* ty=Tensor[(2, 4, 1), float64] */;
  %653 = cast(%652, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  %654 = cast(meta[relay.Constant][29] /* ty=Tensor[(560), uint64] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %655 = cast(%var_1727, dtype="float32") /* ty=Tensor[(100), float32] */;
  %656 = cast(%var_1727, dtype="float32") /* ty=Tensor[(100), float32] */;
  %657 = reshape(%655, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %658 = reshape(%656, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %659 = @func_524(%657, %658) /* ty=(Tensor[(4, 5, 5), bool],) */;
  %660 = cast(%652, dtype="uint64") /* ty=Tensor[(2, 4, 1), uint64] */;
  %661 = cast(meta[relay.Constant][29] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %662 = %648.0;
  %663 = floor_divide(%653, %654) /* ty=Tensor[(2, 4, 560), float32] */;
  %664 = %659.0;
  %665 = multiply(%660, %661) /* ty=Tensor[(2, 4, 560), uint64] */;
  (%662, %663, %664, %var_1727, %665)
}

def @func_3344() -> Tensor[(180), float32] {
  %667 = fn () -> Tensor[(180), float32] {
    %666 = @func_2976() /* ty=(Tensor[(180), float32],) */;
    %666.0
  };
  %667() /* ty=Tensor[(180), float32] */
}

def @func_8087() -> (Tensor[(2, 4, 7), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 7), bool]) {
  %668 = @func_4433() /* ty=(Tensor[(2, 4, 1), float64], Tensor[(180), float32]) */;
  %669 = %668.0;
  %670 = cast(%669, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  %671 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 4, 7), float64] */, dtype="float32") /* ty=Tensor[(2, 4, 7), float32] */;
  %672 = @func_6741() /* ty=(Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %673 = cast(%669, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
  %674 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 4, 7), float64] */, dtype="bool") /* ty=Tensor[(2, 4, 7), bool] */;
  %675 = floor_divide(%670, %671) /* ty=Tensor[(2, 4, 7), float32] */;
  %676 = %672.2;
  %677 = less_equal(%673, %674) /* ty=Tensor[(2, 4, 7), bool] */;
  (%675, %676, %677)
}

def @func_4340() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) {
  %682 = fn () -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) {
    %678 = @func_1891() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
    %679 = @func_2807() /* ty=Tensor[(2, 4, 1), float32] */;
    %680 = %678.0;
    %681 = @func_3762() /* ty=Tensor[(2, 4, 1), float64] */;
    (%679, %680, %681)
  };
  %682() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */
}

def @func_4537() -> Tensor[(2, 4, 1), float32] {
  %683 = @func_3514() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %683.4
}

def @func_2527() -> Tensor[(2, 4, 1), float32] {
  %684 = fn () -> Tensor[(2, 4, 1), float32] {
    @func_1316() /* ty=Tensor[(2, 4, 1), float32] */
  };
  %684() /* ty=Tensor[(2, 4, 1), float32] */
}

def @func_1316() -> Tensor[(2, 4, 1), float32] {
  %685 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 4, 1), float32] */, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  asinh(%685) /* ty=Tensor[(2, 4, 1), float32] */
}

def @func_7639(%var_7614: Tensor[(455), uint64], %var_7623: Tensor[(25, 4), float64]) -> (Tensor[(180), float32], Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(455), uint64], Tensor[(455), uint64], Tensor[(25, 4), float32], Tensor[(2, 4, 1), float32]) {
  %686 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
  %687 = cast(%var_7614, dtype="uint64") /* ty=Tensor[(455), uint64] */;
  %688 = reshape(%687, newshape=[455]) /* ty=Tensor[(455), uint64] */;
  %689 = @func_2477(%688) /* ty=(Tensor[(100), float32], Tensor[(13, 7, 5), uint64], Tensor[(455), uint64], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64]) */;
  %690 = cast(%var_7614, dtype="uint64") /* ty=Tensor[(455), uint64] */;
  %691 = reshape(%690, newshape=[455]) /* ty=Tensor[(455), uint64] */;
  %692 = @func_6480(%691) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(100), float32], Tensor[(455), uint64]) */;
  %693 = @func_6706() /* ty=(Tensor[(180), float32], Tensor[(25, 4), bool], Tensor[(2, 4, 11), int8]) */;
  %694 = %693.1;
  %695 = cast(%694, dtype="float64") /* ty=Tensor[(25, 4), float64] */;
  %696 = cos(%695) /* ty=Tensor[(25, 4), float64] */;
  %697 = cast(%var_7623, dtype="int8") /* ty=Tensor[(25, 4), int8] */;
  %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(2), int32] */;
  %699 = cast(%696, dtype="int8") /* ty=Tensor[(25, 4), int8] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %701 = left_shift(%699, %700) /* ty=Tensor[(25, 4), int8] */;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %703 = shape_of(%696, dtype="int32") /* ty=Tensor[(2), int32] */;
  %704 = cast(%696, dtype="float32") /* ty=Tensor[(25, 4), float32] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %706 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %707 = @func_5530() /* ty=Tensor[(180), float32] */;
  %708 = %686.1;
  %709 = %689.4;
  %710 = %692.2;
  %711 = floor_divide(%704, %705) /* ty=Tensor[(25, 4), float32] */;
  %712 = %706.0;
  (%707, %708, %709, %var_7614, %710, %711, %712)
}

def @func_2031() -> (Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) {
  %719 = fn () -> (Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) {
    %713 = @func_1489() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 1), float64]) */;
    %714 = cast(meta[relay.Constant][32] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
    %715 = reshape(%714, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
    %716 = @func_809(%715) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
    %717 = %713.1;
    %718 = %716.0;
    (%717, %718, meta[relay.Constant][32] /* ty=Tensor[(648), float32] */)
  };
  %719() /* ty=(Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */
}

def @func_7332() -> (Tensor[(2, 4, 1), float32],) {
  @func_7330() /* ty=(Tensor[(2, 4, 1), float32],) */
}

def @func_2076() -> Tensor[(25, 4), float64] {
  @func_2074() /* ty=Tensor[(25, 4), float64] */
}

def @func_4269() -> (Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float64]) {
  %720 = @func_1415() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(25, 4), float32]) */;
  %721 = %720.2;
  %722 = cast(%721, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
  %723 = reshape(%722, newshape=[100]) /* ty=Tensor[(100), float32] */;
  %724 = @func_1454(%723) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
  %725 = @func_2357() /* ty=(Tensor[(25, 4), float64], Tensor[(13, 10, 5), float64], Tensor[(650), float64]) */;
  %726 = %724.0;
  %727 = %725.0;
  (%721, %726, %727)
}

def @func_6708() -> (Tensor[(180), float32], Tensor[(25, 4), bool], Tensor[(2, 4, 11), int8]) {
  @func_6706() /* ty=(Tensor[(180), float32], Tensor[(25, 4), bool], Tensor[(2, 4, 11), int8]) */
}

def @func_6035() -> (Tensor[(2, 4, 4), int64], Tensor[(2, 4, 1), float32]) {
  %735 = fn () -> (Tensor[(2, 4, 4), int64], Tensor[(2, 4, 1), float32]) {
    %728 = @func_4339() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
    %729 = %728.2;
    %730 = cast(%729, dtype="int64") /* ty=Tensor[(2, 4, 1), int64] */;
    %731 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 4, 4), float64] */, dtype="int64") /* ty=Tensor[(2, 4, 4), int64] */;
    %732 = @func_3057() /* ty=(Tensor[(2, 4, 1), float32],) */;
    %733 = bitwise_and(%730, %731) /* ty=Tensor[(2, 4, 4), int64] */;
    %734 = %732.0;
    (%733, %734)
  };
  %735() /* ty=(Tensor[(2, 4, 4), int64], Tensor[(2, 4, 1), float32]) */
}

def @func_743(%var_741: Tensor[(50, 2), float32]) -> (Tensor[(4, 15, 16), float32], Tensor[(50, 2), uint64], Tensor[(4, 5, 5), bool]) {
  @func_740(%var_741) /* ty=(Tensor[(4, 15, 16), float32], Tensor[(50, 2), uint64], Tensor[(4, 5, 5), bool]) */
}

def @func_6841() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %736 = @func_3514() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %737 = %736.4;
  %738 = @func_2807() /* ty=Tensor[(2, 4, 1), float32] */;
  (%737, %738)
}

def @func_4212(%var_4209: uint64, %var_4210: Tensor[(9, 16, 9), uint64], %var_4211: Tensor[(648), float32]) -> (Tensor[(9, 16, 9), uint64], Tensor[(9, 16, 9), int64], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) {
  %756 = fn (%var_4173: uint64, %var_4174: Tensor[(9, 16, 9), uint64], %var_4206: Tensor[(648), float32]) -> (Tensor[(9, 16, 9), uint64], Tensor[(9, 16, 9), int64], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) {
    %739 = cast(%var_4173, dtype="uint64") /* ty=uint64 */;
    %740 = cast(%var_4174, dtype="uint64") /* ty=Tensor[(9, 16, 9), uint64] */;
    %741 = maximum(%739, %740) /* ty=Tensor[(9, 16, 9), uint64] */;
    %742 = cast(%741, dtype="uint64") /* ty=Tensor[(9, 16, 9), uint64] */;
    %743 = shape_of(%var_4174, dtype="int32") /* ty=Tensor[(3), int32] */;
    %744 = cast(%var_4174, dtype="uint64") /* ty=Tensor[(9, 16, 9), uint64] */;
    %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %746 = cast(meta[relay.Constant][34] /* ty=Tensor[(9, 16, 9), uint64] */, dtype="int64") /* ty=Tensor[(9, 16, 9), int64] */;
    %747 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
    %748 = cast(%741, dtype="int64") /* ty=Tensor[(9, 16, 9), int64] */;
    %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %750 = cast(%var_4206, dtype="float32") /* ty=Tensor[(648), float32] */;
    %751 = reshape(%750, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
    %752 = @func_809(%751) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
    %753 = left_shift(%744, %745) /* ty=Tensor[(9, 16, 9), uint64] */;
    %754 = right_shift(%748, %749) /* ty=Tensor[(9, 16, 9), int64] */;
    %755 = %752.0;
    (%753, %754, %755, %var_4206)
  };
  %756(%var_4209, %var_4210, %var_4211) /* ty=(Tensor[(9, 16, 9), uint64], Tensor[(9, 16, 9), int64], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */
}

def @func_8521(%var_8519: Tensor[(650, 1), float64], %var_8520: Tensor[(40, 14), uint64]) -> (Tensor[(2, 4, 1), float32], Tensor[(9, 9, 8), float32], Tensor[(588), uint16], Tensor[(650, 1), float64], Tensor[(40, 14), uint64], Tensor[(135), int32], Tensor[(2, 4, 588), bool]) {
  %775 = fn (%var_8503: Tensor[(650, 1), float64], %var_8504: Tensor[(40, 14), uint64]) -> (Tensor[(2, 4, 1), float32], Tensor[(9, 9, 8), float32], Tensor[(588), uint16], Tensor[(650, 1), float64], Tensor[(40, 14), uint64], Tensor[(135), int32], Tensor[(2, 4, 588), bool]) {
    %757 = @func_2030() /* ty=(Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
    %758 = cast(meta[relay.Constant][35] /* ty=Tensor[(588), uint16] */, dtype="uint16") /* ty=Tensor[(588), uint16] */;
    %759 = cast(%var_8503, dtype="float64") /* ty=Tensor[(650, 1), float64] */;
    %760 = cast(%var_8504, dtype="uint64") /* ty=Tensor[(40, 14), uint64] */;
    %761 = cast(meta[relay.Constant][36] /* ty=Tensor[(135), int32] */, dtype="int32") /* ty=Tensor[(135), int32] */;
    %762 = reshape(%758, newshape=[588]) /* ty=Tensor[(588), uint16] */;
    %763 = reshape(%759, newshape=[650]) /* ty=Tensor[(650), float64] */;
    %764 = reshape(%760, newshape=[560]) /* ty=Tensor[(560), uint64] */;
    %765 = reshape(%761, newshape=[135]) /* ty=Tensor[(135), int32] */;
    %766 = @func_7476(%762, %763, %764, %765) /* ty=(Tensor[(180), float32], Tensor[(3, 15, 4), float32], Tensor[(588), uint16], Tensor[(2, 4, 650), uint16], Tensor[(100), float32], Tensor[(273), float64], Tensor[(560), uint64], Tensor[(135), int32]) */;
    %767 = @func_5223() /* ty=(Tensor[(2, 4, 1), float32],) */;
    %768 = %767.0;
    %769 = cast(meta[relay.Constant][35] /* ty=Tensor[(588), uint16] */, dtype="bool") /* ty=Tensor[(588), bool] */;
    %770 = cast(%768, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
    %771 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
    %772 = %757.1;
    %773 = %766.2;
    %774 = not_equal(%769, %770) /* ty=Tensor[(2, 4, 588), bool] */;
    (%771, %772, %773, %var_8503, %var_8504, meta[relay.Constant][36] /* ty=Tensor[(135), int32] */, %774)
  };
  %775(%var_8519, %var_8520) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(9, 9, 8), float32], Tensor[(588), uint16], Tensor[(650, 1), float64], Tensor[(40, 14), uint64], Tensor[(135), int32], Tensor[(2, 4, 588), bool]) */
}

def @func_3996() -> (Tensor[(2, 4, 1), float32], Tensor[(100), float32], Tensor[(648), float32]) {
  @func_3994() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(100), float32], Tensor[(648), float32]) */
}

def @func_1089(%var_1065: Tensor[(3, 9, 5), int32], %var_1078: Tensor[(3, 9, 5), int32]) -> (Tensor[(3, 9, 5), int32], Tensor[(3, 9, 5), float32]) {
  %776 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 9, 5), int32] */, dtype="int32") /* ty=Tensor[(3, 9, 5), int32] */;
  %777 = shape_of(%var_1065, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%var_1065, dtype="int32") /* ty=Tensor[(3, 9, 5), int32] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %780 = cast(%var_1078, dtype="float32") /* ty=Tensor[(3, 9, 5), float32] */;
  %781 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(3, 9, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %782 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 9, 5), int32] */, dtype="float32") /* ty=Tensor[(3, 9, 5), float32] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %784 = divide(%782, %783) /* ty=Tensor[(3, 9, 5), float32] */;
  %785 = cast(%784, dtype="float32") /* ty=Tensor[(3, 9, 5), float32] */;
  %786 = subtract(%778, %779) /* ty=Tensor[(3, 9, 5), int32] */;
  %787 = cos(%785) /* ty=Tensor[(3, 9, 5), float32] */;
  (%786, %787)
}

def @func_6080(%var_6079: Tensor[(560), uint64]) -> (Tensor[(2, 4, ?), int64], Tensor[(560), uint64], Tensor[(560), uint64]) {
  %801 = fn (%var_6071: Tensor[(560), uint64]) -> (Tensor[(2, 4, ?), int64], Tensor[(560), uint64], Tensor[(560), uint64]) {
    %788 = @func_4339() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
    %789 = %788.1;
    %790 = @func_4339() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
    %791 = %790.0;
    %792 = cast(%791, dtype="int64") /* ty=Tensor[(2, 4, 1), int64] */;
    %793 = shape_of(%789, dtype="int32") /* ty=Tensor[(3), int32] */;
    %794 = cast(%789, dtype="int64") /* ty=Tensor[(2, 4, 1), int64] */;
    %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %796 = cast(%var_6071, dtype="uint64") /* ty=Tensor[(560), uint64] */;
    %797 = reshape(%796, newshape=[560]) /* ty=Tensor[(560), uint64] */;
    %798 = @func_3249(%797) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(2, 4, ?), bool]) */;
    %799 = bitwise_and(%794, %795) /* ty=Tensor[(2, 4, ?), int64] */;
    %800 = %798.2;
    (%799, %800, %var_6071)
  };
  %801(%var_6079) /* ty=(Tensor[(2, 4, ?), int64], Tensor[(560), uint64], Tensor[(560), uint64]) */
}

def @func_1778() -> (Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) {
  @func_1776() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */
}

def @func_4075() -> (Tensor[(9, 9, 8), float32],) {
  %802 = @func_4040() /* ty=(Tensor[(9, 9, 8), float32],) */;
  %803 = %802.0;
  (%803,)
}

def @func_2496() -> Tensor[(2, 4, 1), float32] {
  @func_2494() /* ty=Tensor[(2, 4, 1), float32] */
}

def @func_1776() -> (Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) {
  %804 = @func_1489() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 1), float64]) */;
  %805 = %804.0;
  %806 = cast(%805, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
  %807 = reshape(%806, newshape=[100]) /* ty=Tensor[(100), float32] */;
  %808 = @func_1454(%807) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
  %809 = @func_1415() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(25, 4), float32]) */;
  %810 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %811 = %808.1;
  %812 = %809.2;
  %813 = %810.0;
  (%805, %811, %812, %813)
}

def @func_5265() -> (Tensor[(4, 5, 5), bool],) {
  %814 = @func_2666() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(648), float32]) */;
  %815 = %814.4;
  (%815,)
}

def @func_2252() -> Tensor[(2, 4, 1), float64] {
  @func_2250() /* ty=Tensor[(2, 4, 1), float64] */
}

def @func_5777(%var_5775: Tensor[(48), float32]) -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 6), int16], Tensor[(48), float32]) {
  @func_5774(%var_5775) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 6), int16], Tensor[(48), float32]) */
}

def @func_6130() -> (Tensor[(648), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  @func_6128() /* ty=(Tensor[(648), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */
}

def @func_6516() -> (Tensor[(100), float32], Tensor[(2, 4, 6), int16], Tensor[(48), float32]) {
  %816 = @func_2030() /* ty=(Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
  %817 = cast(meta[relay.Constant][38] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %818 = reshape(%817, newshape=[2, 4, 6]) /* ty=Tensor[(2, 4, 6), float32] */;
  %819 = %816.0;
  %820 = @func_3911(%818) /* ty=Tensor[(2, 4, 6), int16] */;
  (%819, %820, meta[relay.Constant][38] /* ty=Tensor[(48), float32] */)
}

def @func_5950() -> (Tensor[(648), float32],) {
  @func_5948() /* ty=(Tensor[(648), float32],) */
}

def @func_809(%var_783: Tensor[(9, 9, 8), float32]) -> (Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) {
  %821 = cast(%var_783, dtype="float32") /* ty=Tensor[(9, 9, 8), float32] */;
  %822 = atan(%821) /* ty=Tensor[(9, 9, 8), float32] */;
  %823 = cast(%822, dtype="float32") /* ty=Tensor[(9, 9, 8), float32] */;
  %824 = cast(meta[relay.Constant][39] /* ty=Tensor[(100), float32] */, dtype="float32") /* ty=Tensor[(100), float32] */;
  %825 = reshape(%824, newshape=[50, 2]) /* ty=Tensor[(50, 2), float32] */;
  %826 = @func_740(%825) /* ty=(Tensor[(4, 15, 16), float32], Tensor[(50, 2), uint64], Tensor[(4, 5, 5), bool]) */;
  %827 = asinh(%823) /* ty=Tensor[(9, 9, 8), float32] */;
  %828 = %826.2;
  (%827, %828, meta[relay.Constant][39] /* ty=Tensor[(100), float32] */)
}

def @func_5282() -> (Tensor[(2, 4, 180), bool],) {
  %829 = @func_3036() /* ty=(Tensor[(3, 15, 4), float32], Tensor[(2, 4, 180), bool], Tensor[(2, 4, 1), float64]) */;
  %830 = %829.1;
  (%830,)
}

def @func_6753() -> (Tensor[(180), float32],) {
  %833 = fn () -> (Tensor[(180), float32],) {
    %831 = @func_3837() /* ty=(Tensor[(180), float32],) */;
    %832 = %831.0;
    (%832,)
  };
  %833() /* ty=(Tensor[(180), float32],) */
}

def @func_5136(%var_5135: Tensor[(135), int32]) -> (Tensor[(180), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(135), int32], Tensor[(273), float64]) {
  %846 = fn (%var_5124: Tensor[(135), int32]) -> (Tensor[(180), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(135), int32], Tensor[(273), float64]) {
    %834 = @func_2918() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(3, 15, 4), float32], Tensor[(180), float32]) */;
    %835 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
    %836 = %835.2;
    %837 = cast(%836, dtype="float64") /* ty=Tensor[(25, 4), float64] */;
    %838 = cast(%var_5124, dtype="int32") /* ty=Tensor[(135), int32] */;
    %839 = cast(meta[relay.Constant][40] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
    %840 = reshape(%837, newshape=[25, 4]) /* ty=Tensor[(25, 4), float64] */;
    %841 = reshape(%838, newshape=[135]) /* ty=Tensor[(135), int32] */;
    %842 = reshape(%839, newshape=[39, 7]) /* ty=Tensor[(39, 7), float64] */;
    %843 = @func_2201(%840, %841, %842) /* ty=(Tensor[(648), float32], Tensor[(25, 4), bool], Tensor[(3, 9, 5), float32], Tensor[(135), int32], Tensor[(4, 5, 5), bool], Tensor[(180), float32], Tensor[(39, 7), float64], Tensor[(25, 4), float32]) */;
    %844 = %834.2;
    %845 = %843.4;
    (%844, %836, %845, %var_5124, meta[relay.Constant][40] /* ty=Tensor[(273), float64] */)
  };
  %846(%var_5135) /* ty=(Tensor[(180), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(135), int32], Tensor[(273), float64]) */
}

def @func_5267() -> (Tensor[(4, 5, 5), bool],) {
  @func_5265() /* ty=(Tensor[(4, 5, 5), bool],) */
}

def @func_2413(%var_2409: Tensor[(14, 6, 7), uint16], %var_2410: Tensor[(14, 6, 7), uint16], %var_2411: Tensor[(180), float32], %var_2412: Tensor[(650), float64]) -> (Tensor[(14, 6, 7), uint16], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(2, 4, 650), int16]) {
  %870 = fn (%var_2365: Tensor[(14, 6, 7), uint16], %var_2366: Tensor[(14, 6, 7), uint16], %var_2374: Tensor[(180), float32], %var_2379: Tensor[(650), float64]) -> (Tensor[(14, 6, 7), uint16], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(2, 4, 650), int16]) {
    %847 = cast(%var_2366, dtype="uint16") /* ty=Tensor[(14, 6, 7), uint16] */;
    %848 = shape_of(%var_2365, dtype="int32") /* ty=Tensor[(3), int32] */;
    %849 = cast(%var_2365, dtype="uint16") /* ty=Tensor[(14, 6, 7), uint16] */;
    %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %851 = cast(%var_2374, dtype="float32") /* ty=Tensor[(180), float32] */;
    %852 = reshape(%851, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), float32] */;
    %853 = @func_1017(%852) /* ty=(Tensor[(3, 15, 4), float32],) */;
    %854 = cast(%var_2379, dtype="float64") /* ty=Tensor[(650), float64] */;
    %855 = reshape(%854, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float64] */;
    %856 = @func_2315(%855) /* ty=(Tensor[(13, 10, 5), float64],) */;
    %857 = %856.0;
    %858 = cast(%857, dtype="uint16") /* ty=Tensor[(13, 10, 5), uint16] */;
    %859 = shape_of(%var_2379, dtype="int32") /* ty=Tensor[(1), int32] */;
    %860 = cast(%var_2379, dtype="uint16") /* ty=Tensor[(650), uint16] */;
    %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %862 = multiply(%860, %861) /* ty=Tensor[(650), uint16] */;
    %863 = @func_1891() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
    %864 = %863.1;
    %865 = cast(%862, dtype="int16") /* ty=Tensor[(650), int16] */;
    %866 = cast(%864, dtype="int16") /* ty=Tensor[(2, 4, 1), int16] */;
    %867 = multiply(%849, %850) /* ty=Tensor[(14, 6, 7), uint16] */;
    %868 = %853.0;
    %869 = add(%865, %866) /* ty=Tensor[(2, 4, 650), int16] */;
    (%867, %868, %var_2374, %869)
  };
  %870(%var_2409, %var_2410, %var_2411, %var_2412) /* ty=(Tensor[(14, 6, 7), uint16], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(2, 4, 650), int16]) */
}

def @func_3038() -> (Tensor[(3, 15, 4), float32], Tensor[(2, 4, 180), bool], Tensor[(2, 4, 1), float64]) {
  @func_3036() /* ty=(Tensor[(3, 15, 4), float32], Tensor[(2, 4, 180), bool], Tensor[(2, 4, 1), float64]) */
}

def @func_4477() -> (Tensor[(2, 4, 1), float64], Tensor[(9, 9, 8), float32]) {
  @func_4475() /* ty=(Tensor[(2, 4, 1), float64], Tensor[(9, 9, 8), float32]) */
}

def @func_6128() -> (Tensor[(648), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %871 = @func_2666() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(648), float32]) */;
  %872 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
  %873 = %871.5;
  %874 = @func_2807() /* ty=Tensor[(2, 4, 1), float32] */;
  %875 = %872.1;
  (%873, %874, %875)
}

def @func_6518() -> (Tensor[(100), float32], Tensor[(2, 4, 6), int16], Tensor[(48), float32]) {
  @func_6516() /* ty=(Tensor[(100), float32], Tensor[(2, 4, 6), int16], Tensor[(48), float32]) */
}

def @func_3799() -> Tensor[(2, 4, 1), float32] {
  %877 = fn () -> Tensor[(2, 4, 1), float32] {
    %876 = @func_2238() /* ty=(Tensor[(2, 4, 1), float32],) */;
    %876.0
  };
  %877() /* ty=Tensor[(2, 4, 1), float32] */
}

def @func_3453(%var_3359: Tensor[(1, 273), float64], %var_3372: Tensor[(3, 273), float64], %var_3431: Tensor[(3, 273), uint32]) -> (Tensor[(2, 4, 1), float32], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(25, 4), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(3, 273), float64], Tensor[(3, 273), bool], Tensor[(3, 273), bool], Tensor[(3, 15, 4), float32]) {
  %878 = @func_2555() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %879 = cast(meta[relay.Constant][41] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %880 = reshape(%879, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), float32] */;
  %881 = @func_1017(%880) /* ty=(Tensor[(3, 15, 4), float32],) */;
  %882 = cast(%var_3359, dtype="float64") /* ty=Tensor[(1, 273), float64] */;
  %883 = cast(meta[relay.Constant][42] /* ty=Tensor[(100), float32] */, dtype="float32") /* ty=Tensor[(100), float32] */;
  %884 = reshape(%882, newshape=[13, 3, 7]) /* ty=Tensor[(13, 3, 7), float64] */;
  %885 = reshape(%883, newshape=[100]) /* ty=Tensor[(100), float32] */;
  %886 = @func_2011(%884, %885) /* ty=(Tensor[(13, 7, 5), uint64], Tensor[(65, 7), uint64], Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(25, 4), float32], Tensor[(3, 15, 4), float32], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), float64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), uint32]) */;
  %887 = %886.8;
  %888 = cast(meta[relay.Constant][42] /* ty=Tensor[(100), float32] */, dtype="bool") /* ty=Tensor[(100), bool] */;
  %889 = shape_of(%887, dtype="int32") /* ty=Tensor[(2), int32] */;
  %890 = cast(%887, dtype="bool") /* ty=Tensor[(25, 4), bool] */;
  %891 = dyn.reshape(%888, %889, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %892 = @func_1776() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */;
  %893 = @func_2555() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %894 = cast(%var_3359, dtype="bool") /* ty=Tensor[(1, 273), bool] */;
  %895 = cast(%var_3372, dtype="bool") /* ty=Tensor[(3, 273), bool] */;
  %896 = less_equal(%894, %895) /* ty=Tensor[(3, 273), bool] */;
  %897 = cast(%896, dtype="float32") /* ty=Tensor[(3, 273), float32] */;
  %898 = acosh(%897) /* ty=Tensor[(3, 273), float32] */;
  %899 = cast(%898, dtype="float64") /* ty=Tensor[(3, 273), float64] */;
  %900 = log(%899) /* ty=Tensor[(3, 273), float64] */;
  %901 = cast(%898, dtype="uint32") /* ty=Tensor[(3, 273), uint32] */;
  %902 = shape_of(%900, dtype="int32") /* ty=Tensor[(2), int32] */;
  %903 = cast(%900, dtype="uint32") /* ty=Tensor[(3, 273), uint32] */;
  %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %905 = bitwise_xor(%903, %904) /* ty=Tensor[(3, 273), uint32] */;
  %906 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 273), uint32] */, dtype="uint32") /* ty=Tensor[(3, 273), uint32] */;
  %907 = shape_of(%905, dtype="int32") /* ty=Tensor[(2), int32] */;
  %908 = cast(%905, dtype="uint32") /* ty=Tensor[(3, 273), uint32] */;
  %909 = dyn.reshape(%906, %907, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %910 = bitwise_and(%908, %909) /* ty=Tensor[(3, 273), uint32] */;
  %911 = cast(%905, dtype="float64") /* ty=Tensor[(3, 273), float64] */;
  %912 = shape_of(%910, dtype="int32") /* ty=Tensor[(2), int32] */;
  %913 = cast(%910, dtype="float64") /* ty=Tensor[(3, 273), float64] */;
  %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %915 = cast(%var_3431, dtype="bool") /* ty=Tensor[(3, 273), bool] */;
  %916 = shape_of(%910, dtype="int32") /* ty=Tensor[(2), int32] */;
  %917 = cast(%910, dtype="bool") /* ty=Tensor[(3, 273), bool] */;
  %918 = dyn.reshape(%915, %916, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %919 = cast(meta[relay.Constant][44] /* ty=Tensor[(3, 273), uint32] */, dtype="bool") /* ty=Tensor[(3, 273), bool] */;
  %920 = shape_of(%910, dtype="int32") /* ty=Tensor[(2), int32] */;
  %921 = cast(%910, dtype="bool") /* ty=Tensor[(3, 273), bool] */;
  %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %923 = cast(meta[relay.Constant][41] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %924 = reshape(%923, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), float32] */;
  %925 = @func_1017(%924) /* ty=(Tensor[(3, 15, 4), float32],) */;
  %926 = %878.0;
  %927 = %881.0;
  %928 = greater(%890, %891) /* ty=Tensor[(25, 4), bool] */;
  %929 = %892.0;
  %930 = %893.0;
  %931 = power(%913, %914) /* ty=Tensor[(3, 273), float64] */;
  %932 = logical_and(%917, %918) /* ty=Tensor[(3, 273), bool] */;
  %933 = greater_equal(%921, %922) /* ty=Tensor[(3, 273), bool] */;
  %934 = %925.0;
  (%926, %927, meta[relay.Constant][41] /* ty=Tensor[(180), float32] */, %928, %929, %930, %931, %932, %933, %934)
}

def @func_5802() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %935 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
  %936 = @func_4695() /* ty=(Tensor[(650), float32], Tensor[(100), float32], Tensor[(2, 4, 648), bool], Tensor[(2, 4, 1), float32]) */;
  %937 = %935.1;
  %938 = %936.3;
  (%937, %938)
}

def @func_2920() -> (Tensor[(2, 4, 1), float32], Tensor[(3, 15, 4), float32], Tensor[(180), float32]) {
  @func_2918() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(3, 15, 4), float32], Tensor[(180), float32]) */
}

def @func_6460() -> (Tensor[(9, 9, 8), float32], Tensor[(4, 5, 5), uint64], Tensor[(2, 4, 1), float32]) {
  %939 = @func_4040() /* ty=(Tensor[(9, 9, 8), float32],) */;
  %940 = cast(meta[relay.Constant][45] /* ty=Tensor[(100), float32] */, dtype="float32") /* ty=Tensor[(100), float32] */;
  %941 = cast(meta[relay.Constant][45] /* ty=Tensor[(100), float32] */, dtype="float32") /* ty=Tensor[(100), float32] */;
  %942 = reshape(%940, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %943 = reshape(%941, newshape=[4, 5, 5]) /* ty=Tensor[(4, 5, 5), float32] */;
  %944 = @func_524(%942, %943) /* ty=(Tensor[(4, 5, 5), bool],) */;
  %945 = %944.0;
  %946 = cast(meta[relay.Constant][45] /* ty=Tensor[(100), float32] */, dtype="uint64") /* ty=Tensor[(100), uint64] */;
  %947 = shape_of(%945, dtype="int32") /* ty=Tensor[(3), int32] */;
  %948 = cast(%945, dtype="uint64") /* ty=Tensor[(4, 5, 5), uint64] */;
  %949 = dyn.reshape(%946, %947, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %950 = @func_5802() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
  %951 = %939.0;
  %952 = add(%948, %949) /* ty=Tensor[(4, 5, 5), uint64] */;
  %953 = %950.0;
  (%951, %952, %953)
}

def @func_8025(%var_8019: Tensor[(65, 7), uint64]) -> (Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(65, 7), uint64], Tensor[(100), float64]) {
  %954 = @func_3036() /* ty=(Tensor[(3, 15, 4), float32], Tensor[(2, 4, 180), bool], Tensor[(2, 4, 1), float64]) */;
  %955 = cast(%var_8019, dtype="uint64") /* ty=Tensor[(65, 7), uint64] */;
  %956 = cast(meta[relay.Constant][46] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %957 = reshape(%955, newshape=[455]) /* ty=Tensor[(455), uint64] */;
  %958 = reshape(%956, newshape=[25, 4]) /* ty=Tensor[(25, 4), float64] */;
  %959 = @func_7639(%957, %958) /* ty=(Tensor[(180), float32], Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(455), uint64], Tensor[(455), uint64], Tensor[(25, 4), float32], Tensor[(2, 4, 1), float32]) */;
  %960 = %954.2;
  %961 = %959.6;
  (%960, %961, %var_8019, meta[relay.Constant][46] /* ty=Tensor[(100), float64] */)
}

def @func_5670() -> (Tensor[(648), float32],) {
  %964 = fn () -> (Tensor[(648), float32],) {
    %962 = @func_2030() /* ty=(Tensor[(100), float32], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
    %963 = %962.2;
    (%963,)
  };
  %964() /* ty=(Tensor[(648), float32],) */
}

def @func_6269() -> (Tensor[(180), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  @func_6267() /* ty=(Tensor[(180), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */
}

def @func_1020(%var_1018: Tensor[(3, 15, 4), float32]) -> (Tensor[(3, 15, 4), float32],) {
  @func_1017(%var_1018) /* ty=(Tensor[(3, 15, 4), float32],) */
}

def @func_8353() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %970 = fn () -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
    %965 = @func_6577() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
    %966 = @func_5223() /* ty=(Tensor[(2, 4, 1), float32],) */;
    %967 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
    %968 = %965.0;
    %969 = %966.0;
    (%967, %968, %969)
  };
  %970() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */
}

def @func_7922(%var_7910: Tensor[(1296), uint64]) -> (Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(180), float32], Tensor[(180), float32], Tensor[(9, 9, 8), float32], uint64, Tensor[(1296), uint64], Tensor[(648), float32]) {
  %971 = @func_5480() /* ty=(Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(2, 4, 6), int16], Tensor[(2, 4, 650), float32], Tensor[(2, 4, 48), float32]) */;
  %972 = @func_5412() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(180), float32]) */;
  %973 = @func_3837() /* ty=(Tensor[(180), float32],) */;
  %974 = cast(meta[relay.Constant][47] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %975 = cast(%var_7910, dtype="uint64") /* ty=Tensor[(1296), uint64] */;
  %976 = cast(meta[relay.Constant][48] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %977 = reshape(%974, newshape=[]) /* ty=uint64 */;
  %978 = reshape(%975, newshape=[9, 16, 9]) /* ty=Tensor[(9, 16, 9), uint64] */;
  %979 = reshape(%976, newshape=[648]) /* ty=Tensor[(648), float32] */;
  %980 = @func_4208(%977, %978, %979) /* ty=(Tensor[(9, 16, 9), uint64], Tensor[(9, 16, 9), int64], Tensor[(9, 9, 8), float32], Tensor[(648), float32]) */;
  %981 = %971.0;
  %982 = @func_5530() /* ty=Tensor[(180), float32] */;
  %983 = %972.1;
  %984 = %973.0;
  %985 = %980.2;
  (%981, %982, %983, %984, %985, meta[relay.Constant][47] /* ty=uint64 */, %var_7910, meta[relay.Constant][48] /* ty=Tensor[(648), float32] */)
}

def @func_7191() -> (Tensor[(180), float32], Tensor[(2, 4, 1), float32]) {
  @func_7189() /* ty=(Tensor[(180), float32], Tensor[(2, 4, 1), float32]) */
}

def @func_6801(%var_6800: Tensor[(2, 4, 13), float32]) -> (Tensor[(2, 4, 13), uint16], Tensor[(4, 5, 5), bool]) {
  %993 = fn (%var_6791: Tensor[(2, 4, 13), float32]) -> (Tensor[(2, 4, 13), uint16], Tensor[(4, 5, 5), bool]) {
    %986 = @func_6267() /* ty=(Tensor[(180), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */;
    %987 = %986.3;
    %988 = cast(%987, dtype="uint16") /* ty=Tensor[(2, 4, 1), uint16] */;
    %989 = cast(%var_6791, dtype="uint16") /* ty=Tensor[(2, 4, 13), uint16] */;
    %990 = @func_1489() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 1), float64]) */;
    %991 = logical_xor(%988, %989) /* ty=Tensor[(2, 4, 13), uint16] */;
    %992 = %990.0;
    (%991, %992)
  };
  %993(%var_6800) /* ty=(Tensor[(2, 4, 13), uint16], Tensor[(4, 5, 5), bool]) */
}

def @func_1417() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(25, 4), float32]) {
  @func_1415() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(25, 4), float32]) */
}

def @func_1490() -> (Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 1), float64]) {
  %1001 = fn () -> (Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 1), float64]) {
    %994 = cast(meta[relay.Constant][49] /* ty=Tensor[(100), float32] */, dtype="float32") /* ty=Tensor[(100), float32] */;
    %995 = reshape(%994, newshape=[50, 2]) /* ty=Tensor[(50, 2), float32] */;
    %996 = @func_740(%995) /* ty=(Tensor[(4, 15, 16), float32], Tensor[(50, 2), uint64], Tensor[(4, 5, 5), bool]) */;
    %997 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
    %998 = cast(%997, dtype="float64") /* ty=Tensor[(2, 4, 1), float64] */;
    %999 = %996.2;
    %1000 = cos(%998) /* ty=Tensor[(2, 4, 1), float64] */;
    (%999, meta[relay.Constant][49] /* ty=Tensor[(100), float32] */, %1000)
  };
  %1001() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 1), float64]) */
}

def @func_3960() -> Tensor[(25, 4), bool] {
  @func_3958() /* ty=Tensor[(25, 4), bool] */
}

def @func_7070() -> (Tensor[(2, 4, 1), float32],) {
  %1004 = fn () -> (Tensor[(2, 4, 1), float32],) {
    %1002 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
    %1003 = %1002.1;
    (%1003,)
  };
  %1004() /* ty=(Tensor[(2, 4, 1), float32],) */
}

def @func_2015(%var_2013: Tensor[(13, 3, 7), float64], %var_2014: Tensor[(100), float32]) -> (Tensor[(13, 7, 5), uint64], Tensor[(65, 7), uint64], Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(25, 4), float32], Tensor[(3, 15, 4), float32], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), float64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), uint32]) {
  @func_2011(%var_2013, %var_2014) /* ty=(Tensor[(13, 7, 5), uint64], Tensor[(65, 7), uint64], Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(3, 15, 4), float32], Tensor[(180), float32], Tensor[(25, 4), float32], Tensor[(3, 15, 4), float32], Tensor[(13, 7, 5), uint64], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), float64], Tensor[(4, 5, 5), bool], Tensor[(13, 3, 7), uint32]) */
}

def @func_8028(%var_8026: Tensor[(65, 7), uint64]) -> (Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(65, 7), uint64], Tensor[(100), float64]) {
  @func_8025(%var_8026) /* ty=(Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(65, 7), uint64], Tensor[(100), float64]) */
}

def @func_8262() -> (Tensor[(2, 4, 560), bool], Tensor[(2, 4, 1), float64]) {
  %1005 = @func_6350() /* ty=(Tensor[(1, 15, 1), float32], Tensor[(2, 4, 560), int16]) */;
  %1006 = %1005.1;
  %1007 = cast(%1006, dtype="float32") /* ty=Tensor[(2, 4, 560), float32] */;
  %1008 = sqrt(%1007) /* ty=Tensor[(2, 4, 560), float32] */;
  %1009 = cast(%1006, dtype="bool") /* ty=Tensor[(2, 4, 560), bool] */;
  %1010 = shape_of(%1008, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1011 = cast(%1008, dtype="bool") /* ty=Tensor[(2, 4, 560), bool] */;
  %1012 = dyn.reshape(%1009, %1010, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1013 = @func_4339() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */;
  %1014 = not_equal(%1011, %1012) /* ty=Tensor[(2, 4, 560), bool] */;
  %1015 = %1013.2;
  (%1014, %1015)
}

def @func_3252(%var_3250: Tensor[(560), uint64]) -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(2, 4, ?), bool]) {
  @func_3249(%var_3250) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(2, 4, ?), bool]) */
}

def @func_2358() -> (Tensor[(25, 4), float64], Tensor[(13, 10, 5), float64], Tensor[(650), float64]) {
  %1021 = fn () -> (Tensor[(25, 4), float64], Tensor[(13, 10, 5), float64], Tensor[(650), float64]) {
    %1016 = cast(meta[relay.Constant][50] /* ty=Tensor[(650), float64] */, dtype="float64") /* ty=Tensor[(650), float64] */;
    %1017 = reshape(%1016, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float64] */;
    %1018 = @func_2315(%1017) /* ty=(Tensor[(13, 10, 5), float64],) */;
    %1019 = @func_2074() /* ty=Tensor[(25, 4), float64] */;
    %1020 = %1018.0;
    (%1019, %1020, meta[relay.Constant][50] /* ty=Tensor[(650), float64] */)
  };
  %1021() /* ty=(Tensor[(25, 4), float64], Tensor[(13, 10, 5), float64], Tensor[(650), float64]) */
}

def @func_7330() -> (Tensor[(2, 4, 1), float32],) {
  %1022 = @func_3798() /* ty=Tensor[(2, 4, 1), float32] */;
  (%1022,)
}

def @func_7643(%var_7641: Tensor[(455), uint64], %var_7642: Tensor[(25, 4), float64]) -> (Tensor[(180), float32], Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(455), uint64], Tensor[(455), uint64], Tensor[(25, 4), float32], Tensor[(2, 4, 1), float32]) {
  @func_7639(%var_7641, %var_7642) /* ty=(Tensor[(180), float32], Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(455), uint64], Tensor[(455), uint64], Tensor[(25, 4), float32], Tensor[(2, 4, 1), float32]) */
}

def @func_1851() -> (Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  %1036 = fn () -> (Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
    %1023 = @func_1776() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */;
    %1024 = @func_1776() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32]) */;
    %1025 = %1024.1;
    %1026 = cast(%1025, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
    %1027 = reshape(%1026, newshape=[100]) /* ty=Tensor[(100), float32] */;
    %1028 = @func_1454(%1027) /* ty=(Tensor[(2, 4, 1), float32], Tensor[(4, 5, 5), bool], Tensor[(100), float32]) */;
    %1029 = %1028.0;
    %1030 = cast(%1029, dtype="float64") /* ty=Tensor[(2, 4, 1), float64] */;
    %1031 = @func_1647() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float32]) */;
    %1032 = %1023.0;
    %1033 = tan(%1030) /* ty=Tensor[(2, 4, 1), float64] */;
    %1034 = @func_1316() /* ty=Tensor[(2, 4, 1), float32] */;
    %1035 = %1031.0;
    (%1032, %1025, %1033, %1034, %1035)
  };
  %1036() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */
}

def @func_3958() -> Tensor[(25, 4), bool] {
  %1037 = @func_2074() /* ty=Tensor[(25, 4), float64] */;
  %1038 = cast(meta[relay.Constant][51] /* ty=Tensor[(25, 4), float64] */, dtype="bool") /* ty=Tensor[(25, 4), bool] */;
  %1039 = shape_of(%1037, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1040 = cast(%1037, dtype="bool") /* ty=Tensor[(25, 4), bool] */;
  %1041 = dyn.reshape(%1038, %1039, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  logical_or(%1040, %1041) /* ty=Tensor[(25, 4), bool] */
}

def @func_7303(%var_7301: Tensor[(96), float32]) -> (Tensor[(2, 4, 12), bool], Tensor[(96), float32], Tensor[(2, 4, 648), float64], Tensor[(25, 4), float32]) {
  @func_7300(%var_7301) /* ty=(Tensor[(2, 4, 12), bool], Tensor[(96), float32], Tensor[(2, 4, 648), float64], Tensor[(25, 4), float32]) */
}

def @func_4271() -> (Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float64]) {
  @func_4269() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(2, 4, 1), float32], Tensor[(25, 4), float64]) */
}

def @func_3173(%var_3132: Tensor[(560), uint64]) -> (Tensor[(2, 4, 1), float32], Tensor[(7, 16, 5), uint64], Tensor[(560), uint64], Tensor[(2, 4, 1), float32]) {
  %1042 = @func_2960() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %1043 = cast(%var_3132, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %1044 = cast(%var_3132, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %1045 = reshape(%1043, newshape=[7, 16, 5]) /* ty=Tensor[(7, 16, 5), uint64] */;
  %1046 = reshape(%1044, newshape=[7, 16, 5]) /* ty=Tensor[(7, 16, 5), uint64] */;
  %1047 = @func_1559(%1045, %1046) /* ty=(Tensor[(7, 16, 5), uint64], Tensor[(7, 16, 5), int64]) */;
  %1048 = @func_2542() /* ty=(Tensor[(2, 4, 1), float32],) */;
  %1049 = %1048.0;
  %1050 = cast(%1049, dtype="float32") /* ty=Tensor[(2, 4, 1), float32] */;
  %1051 = %1042.0;
  %1052 = %1047.0;
  %1053 = log2(%1050) /* ty=Tensor[(2, 4, 1), float32] */;
  (%1051, %1052, %var_3132, %1053)
}

def @func_3516() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) {
  @func_3514() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64], Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float32]) */
}

def @func_4848(%var_4847: Tensor[(2, 4, 12), float32]) -> Tensor[(2, 4, 12), bool] {
  %1057 = fn (%var_4840: Tensor[(2, 4, 12), float32]) -> Tensor[(2, 4, 12), bool] {
    %1054 = @func_2494() /* ty=Tensor[(2, 4, 1), float32] */;
    %1055 = cast(%1054, dtype="bool") /* ty=Tensor[(2, 4, 1), bool] */;
    %1056 = cast(%var_4840, dtype="bool") /* ty=Tensor[(2, 4, 12), bool] */;
    not_equal(%1055, %1056) /* ty=Tensor[(2, 4, 12), bool] */
  };
  %1057(%var_4847) /* ty=Tensor[(2, 4, 12), bool] */
}

def @func_1892() -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) {
  %1064 = fn () -> (Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) {
    %1058 = @func_1339() /* ty=(Tensor[(2, 4, 1), float32],) */;
    %1059 = @func_1489() /* ty=(Tensor[(4, 5, 5), bool], Tensor[(100), float32], Tensor[(2, 4, 1), float64]) */;
    %1060 = %1059.2;
    %1061 = cast(%1060, dtype="float64") /* ty=Tensor[(2, 4, 1), float64] */;
    %1062 = %1058.0;
    %1063 = sigmoid(%1061) /* ty=Tensor[(2, 4, 1), float64] */;
    (%1062, %1063)
  };
  %1064() /* ty=(Tensor[(2, 4, 1), float32], Tensor[(2, 4, 1), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen854/build/output.py", line 2808, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:29:22] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

