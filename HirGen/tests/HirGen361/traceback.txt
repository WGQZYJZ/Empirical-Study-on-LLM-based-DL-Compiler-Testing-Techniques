==========mod==========
#[version = "0.0.5"]
def @func_15172(%var_15110: Tensor[(4, 256), float64], %var_15126: Tensor[(1287), float64]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(8, 16, 2), float64], Tensor[(3, 16), float32], Tensor[(4, 256), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(336), bool], Tensor[(1287), float64], Tensor[(3, 16), float32], Tensor[(?, 256), float32], Tensor[(3, 256), int8], Tensor[(7, 256), int32]) {
  %0 = @func_13866() /* ty=(Tensor[(3, 16), float32],) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 256), float64] */, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %2 = reshape(%1, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), float64] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 256), float64] */, dtype="bool") /* ty=Tensor[(1, 256), bool] */;
  %4 = cast(%var_15110, dtype="bool") /* ty=Tensor[(4, 256), bool] */;
  %5 = @func_7445() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %6 = @func_3026() /* ty=(Tensor[(3, 16), float32],) */;
  %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %8 = cast(%var_15126, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %9 = reshape(%7, newshape=[336]) /* ty=Tensor[(336), bool] */;
  %10 = reshape(%8, newshape=[11, 9, 13]) /* ty=Tensor[(11, 9, 13), float64] */;
  %11 = @func_10400(%9, %10) /* ty=(Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(11, 9, 13), int32]) */;
  %12 = @func_13283() /* ty=(Tensor[(88), uint32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 256), float64] */, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %14 = erf(%13) /* ty=Tensor[(1, 256), float64] */;
  %15 = cast(%14, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %16 = log2(%15) /* ty=Tensor[(1, 256), float64] */;
  %17 = cast(%16, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %18 = atanh(%17) /* ty=Tensor[(1, 256), float64] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 256), float32] */;
  %20 = shape_of(%16, dtype="int32") /* ty=Tensor[(2), int32] */;
  %21 = cast(%16, dtype="float32") /* ty=Tensor[(1, 256), float32] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %23 = cast(%18, dtype="int8") /* ty=Tensor[(1, 256), int8] */;
  %24 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 256), float64] */, dtype="int8") /* ty=Tensor[(3, 256), int8] */;
  %25 = cast(%18, dtype="int32") /* ty=Tensor[(1, 256), int32] */;
  %26 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 256), float64] */, dtype="int32") /* ty=Tensor[(7, 256), int32] */;
  %27 = @func_6401() /* ty=Tensor[(3, 16), float32] */;
  %28 = %0.0;
  %29 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  %30 = @func_436(%2) /* ty=Tensor[(8, 16, 2), float64] */;
  %31 = @func_7623() /* ty=Tensor[(3, 16), float32] */;
  %32 = logical_and(%3, %4) /* ty=Tensor[(4, 256), bool] */;
  %33 = %5.1;
  %34 = %6.0;
  %35 = %11.1;
  %36 = %12.1;
  %37 = floor_divide(%21, %22) /* ty=Tensor[(?, 256), float32] */;
  %38 = bitwise_or(%23, %24) /* ty=Tensor[(3, 256), int8] */;
  %39 = subtract(%25, %26) /* ty=Tensor[(7, 256), int32] */;
  (%27, %28, %29, %30, %31, %32, %33, %34, %35, meta[relay.Constant][1] /* ty=Tensor[(336), bool] */, %var_15126, %36, %37, %38, %39)
}

def @func_4742(%var_4732: Tensor[(336), uint16]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), uint16], Tensor[(336), uint16]) {
  %40 = cast(%var_4732, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %41 = reshape(%40, newshape=[336]) /* ty=Tensor[(336), uint16] */;
  %42 = @func_3312(%41) /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 4, 6), uint16], Tensor[(336), uint16]) */;
  %43 = @func_3836() /* ty=Tensor[(3, 16), float32] */;
  %44 = @func_4362() /* ty=Tensor[(3, 16), float32] */;
  %45 = %42.3;
  (%43, %44, %45, %var_4732)
}

def @func_6492(%var_6455: Tensor[(2475), float32]) -> (Tensor[(3, 16), float32], Tensor[(2475), uint32]) {
  %46 = cast(%var_6455, dtype="float32") /* ty=Tensor[(2475), float32] */;
  %47 = reshape(%46, newshape=[15, 15, 11]) /* ty=Tensor[(15, 15, 11), float32] */;
  %48 = @func_849(%47) /* ty=(Tensor[(15, 15, 11), float32],) */;
  %49 = %48.0;
  %50 = cast(%49, dtype="uint32") /* ty=Tensor[(15, 15, 11), uint32] */;
  %51 = shape_of(%var_6455, dtype="int32") /* ty=Tensor[(1), int32] */;
  %52 = cast(%var_6455, dtype="uint32") /* ty=Tensor[(2475), uint32] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %54 = @func_4623() /* ty=Tensor[(3, 16), float32] */;
  %55 = maximum(%52, %53) /* ty=Tensor[(2475), uint32] */;
  (%54, %55)
}

def @func_3836() -> Tensor[(3, 16), float32] {
  %56 = @func_3493() /* ty=Tensor[(3, 16), float32] */;
  %57 = cast(%56, dtype="float32") /* ty=Tensor[(3, 16), float32] */;
  acosh(%57) /* ty=Tensor[(3, 16), float32] */
}

def @func_15672() -> Tensor[(3, 16), float32] {
  @func_5661() /* ty=Tensor[(3, 16), float32] */
}

def @func_10112() -> (Tensor[(3, 16), float32],) {
  %58 = @func_2829() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) */;
  %59 = %58.0;
  (%59,)
}

def @func_13866() -> (Tensor[(3, 16), float32],) {
  %60 = @func_8510() /* ty=(Tensor[(3, 16), float32],) */;
  %61 = %60.0;
  (%61,)
}

def @func_11681() -> Tensor[(3, 16), float32] {
  %62 = @func_6235() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(11, 2, 10), bool], Tensor[(110), uint8], Tensor[(220), uint8], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %62.5
}

def @func_10731(%var_10666: Tensor[(1848), float64], %var_10690: Tensor[(300), float64], %var_10725: Tensor[(144), int8]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 12, 11), float64], Tensor[(1848), bool], Tensor[(3, 16), float32], Tensor[(300), float64], Tensor[(3, 16), float32], int8, Tensor[(144), int8], Tensor[(56), float32], Tensor[(336), uint16]) {
  %63 = @func_7346() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %64 = cast(meta[relay.Constant][4] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %65 = reshape(%64, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), float64] */;
  %66 = @func_9693(%65) /* ty=(Tensor[(14, 12, 11), float64],) */;
  %67 = cast(%var_10666, dtype="bool") /* ty=Tensor[(1848), bool] */;
  %68 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(1848), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %69 = cast(meta[relay.Constant][4] /* ty=Tensor[(1848), float64] */, dtype="bool") /* ty=Tensor[(1848), bool] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?), bool] */;
  %71 = cast(%var_10690, dtype="float64") /* ty=Tensor[(300), float64] */;
  %72 = reshape(%71, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %73 = @func_9937(%72) /* ty=(Tensor[(3, 16), float32], Tensor[(168, 2), float64], Tensor[(300), float64]) */;
  %74 = cast(meta[relay.Constant][5] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %75 = cast(%var_10725, dtype="int8") /* ty=Tensor[(144), int8] */;
  %76 = cast(meta[relay.Constant][6] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
  %77 = cast(meta[relay.Constant][7] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %78 = reshape(%74, newshape=[]) /* ty=int8 */;
  %79 = reshape(%75, newshape=[144]) /* ty=Tensor[(144), int8] */;
  %80 = reshape(%76, newshape=[56]) /* ty=Tensor[(56), float32] */;
  %81 = reshape(%77, newshape=[336]) /* ty=Tensor[(336), uint16] */;
  %82 = @func_3094(%78, %79, %80, %81) /* ty=(Tensor[(3, 16), float32], Tensor[(8, 9, 2), int8], int8, Tensor[(144), int8], Tensor[(56), float32], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) */;
  %83 = @func_4362() /* ty=Tensor[(3, 16), float32] */;
  %84 = %63.0;
  %85 = %66.0;
  %86 = logical_and(%69, %70) /* ty=Tensor[(1848), bool] */;
  %87 = %73.0;
  %88 = %82.6;
  (%83, %84, %85, %86, %87, %var_10690, %88, meta[relay.Constant][5] /* ty=int8 */, %var_10725, meta[relay.Constant][6] /* ty=Tensor[(56), float32] */, meta[relay.Constant][7] /* ty=Tensor[(336), uint16] */)
}

def @func_4141(%var_4119: Tensor[(6, 1, 2), int32], %var_4120: Tensor[(6, 6, 2), int32]) -> Tensor[(6, 6, 2), uint64] {
  %89 = cast(%var_4119, dtype="int32") /* ty=Tensor[(6, 1, 2), int32] */;
  %90 = cast(%var_4120, dtype="int32") /* ty=Tensor[(6, 6, 2), int32] */;
  %91 = right_shift(%89, %90) /* ty=Tensor[(6, 6, 2), int32] */;
  %92 = cast(%var_4120, dtype="uint64") /* ty=Tensor[(6, 6, 2), uint64] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="uint64") /* ty=Tensor[(6, 6, 2), uint64] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  maximum(%94, %95) /* ty=Tensor[(6, 6, 2), uint64] */
}

def @func_2587() -> (Tensor[(3, 16), float32],) {
  %96 = @func_2536() /* ty=(Tensor[(3, 16), float32],) */;
  %97 = %96.0;
  (%97,)
}

def @func_12335() -> Tensor[(3, 16), float32] {
  %98 = @func_10021() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %98.0
}

def @func_2829() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) {
  %99 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
  %100 = cast(meta[relay.Constant][8] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %101 = cast(meta[relay.Constant][8] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %102 = reshape(%100, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %103 = reshape(%101, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %104 = @func_489(%102, %103) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
  %105 = %99.0;
  %106 = %104.1;
  (%105, %106, meta[relay.Constant][8] /* ty=Tensor[(336), uint16] */)
}

def @func_15196() -> Tensor[(6, 7, 14), float32] {
  %107 = @func_4757() /* ty=(Tensor[(6, 7, 14), float32],) */;
  %107.0
}

def @func_7078() -> (Tensor[(3, 16), float32],) {
  %108 = @func_3836() /* ty=Tensor[(3, 16), float32] */;
  (%108,)
}

def @func_5073(%var_5011: Tensor[(15, 14, 12), float64], %var_5019: Tensor[(12), int32]) -> (Tensor[(6, 6, 2), uint64], Tensor[(12), int32], Tensor[(72), int32], Tensor[(15, 14, 12), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %109 = cast(%var_5019, dtype="int32") /* ty=Tensor[(12), int32] */;
  %110 = cast(meta[relay.Constant][9] /* ty=Tensor[(72), int32] */, dtype="int32") /* ty=Tensor[(72), int32] */;
  %111 = reshape(%109, newshape=[6, 1, 2]) /* ty=Tensor[(6, 1, 2), int32] */;
  %112 = reshape(%110, newshape=[6, 6, 2]) /* ty=Tensor[(6, 6, 2), int32] */;
  %113 = cast(%var_5011, dtype="float64") /* ty=Tensor[(15, 14, 12), float64] */;
  %114 = asin(%113) /* ty=Tensor[(15, 14, 12), float64] */;
  %115 = cast(%114, dtype="float64") /* ty=Tensor[(15, 14, 12), float64] */;
  %116 = sinh(%115) /* ty=Tensor[(15, 14, 12), float64] */;
  %117 = cast(%114, dtype="float64") /* ty=Tensor[(15, 14, 12), float64] */;
  %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%116, dtype="float64") /* ty=Tensor[(15, 14, 12), float64] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %121 = @func_2792() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %122 = @func_3609() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %123 = @func_4141(%111, %112) /* ty=Tensor[(6, 6, 2), uint64] */;
  %124 = divide(%119, %120) /* ty=Tensor[(15, 14, 12), float64] */;
  %125 = %121.2;
  %126 = %122.0;
  (%123, %var_5019, meta[relay.Constant][9] /* ty=Tensor[(72), int32] */, %124, %125, %126)
}

def @func_3256(%var_3248: Tensor[(336), uint16]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(900), float64], Tensor[(336), uint16]) {
  %127 = @func_2652() /* ty=(Tensor[(3, 16), float32],) */;
  %128 = @func_2652() /* ty=(Tensor[(3, 16), float32],) */;
  %129 = cast(meta[relay.Constant][10] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
  %130 = cast(%var_3248, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %131 = reshape(%129, newshape=[4, 15, 15]) /* ty=Tensor[(4, 15, 15), float64] */;
  %132 = reshape(%130, newshape=[336]) /* ty=Tensor[(336), uint16] */;
  %133 = @func_2211(%131, %132) /* ty=(Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(4, 15, 15), float64], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(14, 4, 6), uint16]) */;
  %134 = %127.0;
  %135 = %128.0;
  %136 = %133.0;
  (%134, %135, %136, meta[relay.Constant][10] /* ty=Tensor[(900), float64] */, %var_3248)
}

def @func_8832() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(2, 168), bool], Tensor[(6, 7, 14), float32], Tensor[(9, 9, 4), float32], Tensor[(324), float32]) {
  %137 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 168), bool] */, dtype="bool") /* ty=Tensor[(2, 168), bool] */;
  %138 = reshape(%137, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), bool] */;
  %139 = @func_3551(%138) /* ty=(Tensor[(14, 4, 6), float32],) */;
  %140 = @func_2755() /* ty=(Tensor[(6, 7, 14), float32],) */;
  %141 = cast(meta[relay.Constant][12] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %142 = reshape(%141, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
  %143 = @func_7623() /* ty=Tensor[(3, 16), float32] */;
  %144 = %139.0;
  %145 = %140.0;
  %146 = @func_5358(%142) /* ty=Tensor[(9, 9, 4), float32] */;
  (%143, %144, meta[relay.Constant][11] /* ty=Tensor[(2, 168), bool] */, %145, %146, meta[relay.Constant][12] /* ty=Tensor[(324), float32] */)
}

def @func_12243() -> (Tensor[(3, 16), float32], Tensor[(6, 7, 14), uint64]) {
  %147 = @func_6199() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64]) */;
  %148 = %147.1;
  %149 = cast(%148, dtype="float64") /* ty=Tensor[(6, 7, 14), float64] */;
  %150 = tan(%149) /* ty=Tensor[(6, 7, 14), float64] */;
  %151 = cast(%150, dtype="uint64") /* ty=Tensor[(6, 7, 14), uint64] */;
  %152 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%148, dtype="uint64") /* ty=Tensor[(6, 7, 14), uint64] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %155 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  %156 = bitwise_and(%153, %154) /* ty=Tensor[(6, 7, 14), uint64] */;
  (%155, %156)
}

def @func_10001() -> (Tensor[(3, 16), float32],) {
  %157 = @func_3642() /* ty=(Tensor[(3, 16), float32],) */;
  %158 = %157.0;
  (%158,)
}

def @func_8025() -> (Tensor[(3, 16), float32],) {
  %159 = @func_2429() /* ty=(Tensor[(3, 16), float32],) */;
  %160 = %159.0;
  (%160,)
}

def @func_6675() -> (Tensor[(6, 5, 5), float64],) {
  %161 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(6, 5, 5), float64] */;
  %162 = atanh(%161) /* ty=Tensor[(6, 5, 5), float64] */;
  (%162,)
}

def @func_4623() -> Tensor[(3, 16), float32] {
  %163 = @func_3026() /* ty=(Tensor[(3, 16), float32],) */;
  %163.0
}

def @func_6733() -> Tensor[(3, 16), float32] {
  @func_4623() /* ty=Tensor[(3, 16), float32] */
}

def @func_6447(%var_6439: Tensor[(3, 1, 14), float64], %var_6440: Tensor[(3, 13, 14), float64]) -> Tensor[(3, 13, 14), float64] {
  %164 = cast(%var_6439, dtype="float64") /* ty=Tensor[(3, 1, 14), float64] */;
  %165 = cast(%var_6440, dtype="float64") /* ty=Tensor[(3, 13, 14), float64] */;
  power(%164, %165) /* ty=Tensor[(3, 13, 14), float64] */
}

def @func_8552(%var_8527: Tensor[(16, 9, 9), int8], %var_8528: Tensor[(16, 9, 9), int8]) -> (Tensor[(16, 9, 9), int8], Tensor[(16, 9, 9), float64]) {
  %166 = cast(%var_8528, dtype="int8") /* ty=Tensor[(16, 9, 9), int8] */;
  %167 = shape_of(%var_8527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%var_8527, dtype="int8") /* ty=Tensor[(16, 9, 9), int8] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %170 = cast(%var_8528, dtype="float64") /* ty=Tensor[(16, 9, 9), float64] */;
  %171 = minimum(%168, %169) /* ty=Tensor[(16, 9, 9), int8] */;
  %172 = asin(%170) /* ty=Tensor[(16, 9, 9), float64] */;
  (%171, %172)
}

def @func_9151() -> (Tensor[(3, 16), float32],) {
  %173 = @func_2652() /* ty=(Tensor[(3, 16), float32],) */;
  %174 = %173.0;
  (%174,)
}

def @func_2803() -> (Tensor[(3, 16), float32],) {
  %175 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  (%175,)
}

def @func_9676() -> (Tensor[(3, 16), float32],) {
  %176 = @func_4229() /* ty=Tensor[(3, 16), float32] */;
  (%176,)
}

def @func_10476() -> (Tensor[(3, 16), float32],) {
  %177 = @func_3493() /* ty=Tensor[(3, 16), float32] */;
  (%177,)
}

def @func_4009() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %178 = @func_3464() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %179 = @func_3642() /* ty=(Tensor[(3, 16), float32],) */;
  %180 = @func_3209() /* ty=(Tensor[(3, 16), float32],) */;
  %181 = %178.0;
  %182 = %179.0;
  %183 = %180.0;
  (%181, %182, %183)
}

def @func_6624(%var_6607: Tensor[(11, 1, 13), int16], %var_6611: Tensor[(11, 1, 13), int16]) -> (Tensor[(11, ?, 13), float64],) {
  %184 = cast(meta[relay.Constant][14] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %185 = cast(%var_6607, dtype="int16") /* ty=Tensor[(11, 1, 13), int16] */;
  %186 = left_shift(%184, %185) /* ty=Tensor[(11, 1, 13), int16] */;
  %187 = cast(%var_6611, dtype="float64") /* ty=Tensor[(11, 1, 13), float64] */;
  %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%186, dtype="float64") /* ty=Tensor[(11, 1, 13), float64] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %191 = mod(%189, %190) /* ty=Tensor[(11, ?, 13), float64] */;
  (%191,)
}

def @func_14503() -> (Tensor[(3, 16), float32],) {
  %192 = @func_8710() /* ty=(Tensor[(3, 16), float32],) */;
  %193 = %192.0;
  (%193,)
}

def @func_12604() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %194 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  %195 = @func_5661() /* ty=Tensor[(3, 16), float32] */;
  (%194, %195)
}

def @func_11347() -> (Tensor[(3, 16), float32], Tensor[(11, ?, 13), float64], Tensor[(143), int16], Tensor[(3, 16), float32]) {
  %196 = @func_8500() /* ty=(Tensor[(3, 16), float32],) */;
  %197 = cast(meta[relay.Constant][15] /* ty=Tensor[(143), int16] */, dtype="int16") /* ty=Tensor[(143), int16] */;
  %198 = cast(meta[relay.Constant][15] /* ty=Tensor[(143), int16] */, dtype="int16") /* ty=Tensor[(143), int16] */;
  %199 = reshape(%197, newshape=[11, 1, 13]) /* ty=Tensor[(11, 1, 13), int16] */;
  %200 = reshape(%198, newshape=[11, 1, 13]) /* ty=Tensor[(11, 1, 13), int16] */;
  %201 = @func_6624(%199, %200) /* ty=(Tensor[(11, ?, 13), float64],) */;
  %202 = @func_7107() /* ty=(Tensor[(3, 16), float32],) */;
  %203 = %196.0;
  %204 = %201.0;
  %205 = %202.0;
  (%203, %204, meta[relay.Constant][15] /* ty=Tensor[(143), int16] */, %205)
}

def @func_9579() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(12, 10, 4), float64], Tensor[(480), float64]) {
  %206 = cast(meta[relay.Constant][16] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %207 = reshape(%206, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), bool] */;
  %208 = @func_3551(%207) /* ty=(Tensor[(14, 4, 6), float32],) */;
  %209 = @func_8084() /* ty=(Tensor[(3, 16), float32],) */;
  %210 = cast(meta[relay.Constant][17] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %211 = cast(meta[relay.Constant][17] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %212 = reshape(%210, newshape=[12, 10, 4]) /* ty=Tensor[(12, 10, 4), float64] */;
  %213 = reshape(%211, newshape=[12, 10, 4]) /* ty=Tensor[(12, 10, 4), float64] */;
  %214 = @func_2893(%212, %213) /* ty=(Tensor[(12, 10, 4), float64],) */;
  %215 = @func_4229() /* ty=Tensor[(3, 16), float32] */;
  %216 = %208.0;
  %217 = %209.0;
  %218 = %214.0;
  (%215, %216, meta[relay.Constant][16] /* ty=Tensor[(336), bool] */, %217, %218, meta[relay.Constant][17] /* ty=Tensor[(480), float64] */)
}

def @func_8383() -> (Tensor[(3, 16), float32],) {
  %219 = @func_3609() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %220 = %219.1;
  (%220,)
}

def @func_3312(%var_3306: Tensor[(336), uint16]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 4, 6), uint16], Tensor[(336), uint16]) {
  %221 = @func_2429() /* ty=(Tensor[(3, 16), float32],) */;
  %222 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
  %223 = cast(%var_3306, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %224 = cast(%var_3306, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %225 = reshape(%223, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %226 = reshape(%224, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %227 = @func_489(%225, %226) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
  %228 = %221.0;
  %229 = %222.0;
  %230 = %227.0;
  (%228, %229, %230, %var_3306)
}

def @func_8491() -> (Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32]) {
  %231 = @func_4237() /* ty=(Tensor[(3, 16), float32],) */;
  %232 = %231.0;
  %233 = @func_6354() /* ty=Tensor[(6, 7, 14), float32] */;
  (%232, %233)
}

def @func_2429() -> (Tensor[(3, 16), float32],) {
  %234 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
  %235 = %234.0;
  (%235,)
}

def @func_5202() -> Tensor[(3, 16), float32] {
  %236 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
  %236.0
}

def @func_2507() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %237 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
  %238 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
  %239 = %237.0;
  %240 = %238.0;
  (%239, %240)
}

def @func_13099() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %241 = @func_8699() /* ty=(Tensor[(3, 16), float32],) */;
  %242 = @func_7916() /* ty=(Tensor[(3, 16), float32],) */;
  %243 = %241.0;
  %244 = %242.0;
  (%243, %244)
}

def @func_15215() -> (Tensor[(3, 16), float32],) {
  %245 = @func_6004() /* ty=Tensor[(3, 16), float32] */;
  (%245,)
}

def @func_15714(%var_15679: Tensor[(546, 1), float64]) -> (Tensor[(3, 16), float32], Tensor[(3, 13, 14), float64], Tensor[(42), float64], Tensor[(546, 1), float64], Tensor[(11, ?, 13), float64]) {
  %246 = @func_4690() /* ty=(Tensor[(3, 16), float32],) */;
  %247 = cast(meta[relay.Constant][18] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %248 = cast(%var_15679, dtype="float64") /* ty=Tensor[(546, 1), float64] */;
  %249 = reshape(%247, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), float64] */;
  %250 = reshape(%248, newshape=[3, 13, 14]) /* ty=Tensor[(3, 13, 14), float64] */;
  %251 = @func_11347() /* ty=(Tensor[(3, 16), float32], Tensor[(11, ?, 13), float64], Tensor[(143), int16], Tensor[(3, 16), float32]) */;
  %252 = %246.0;
  %253 = @func_6447(%249, %250) /* ty=Tensor[(3, 13, 14), float64] */;
  %254 = %251.1;
  (%252, %253, meta[relay.Constant][18] /* ty=Tensor[(42), float64] */, %var_15679, %254)
}

def @func_2211(%var_2169: Tensor[(4, 15, 15), float64], %var_2180: Tensor[(336), uint16]) -> (Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(4, 15, 15), float64], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(14, 4, 6), uint16]) {
  %255 = cast(%var_2180, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %256 = cast(%var_2180, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %257 = reshape(%255, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %258 = reshape(%256, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %259 = @func_489(%257, %258) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
  %260 = cast(%var_2169, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
  %261 = tan(%260) /* ty=Tensor[(4, 15, 15), float64] */;
  %262 = cast(%var_2169, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%261, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %266 = cast(meta[relay.Constant][19] /* ty=Tensor[(140), uint64] */, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %267 = cast(meta[relay.Constant][20] /* ty=Tensor[(256), float64] */, dtype="float64") /* ty=Tensor[(256), float64] */;
  %268 = reshape(%266, newshape=[140]) /* ty=Tensor[(140), uint64] */;
  %269 = reshape(%267, newshape=[256]) /* ty=Tensor[(256), float64] */;
  %270 = @func_1934(%268, %269) /* ty=(Tensor[(15, 15, 11), float32], Tensor[(5, 495), float32], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(13, 4, 11), float32]) */;
  %271 = cast(%var_2180, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %272 = cast(%var_2180, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %273 = reshape(%271, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %274 = reshape(%272, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %275 = @func_489(%273, %274) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
  %276 = %259.1;
  %277 = divide(%264, %265) /* ty=Tensor[(4, 15, 15), float64] */;
  %278 = %270.2;
  %279 = %275.0;
  (%276, %var_2180, %277, %278, meta[relay.Constant][19] /* ty=Tensor[(140), uint64] */, meta[relay.Constant][20] /* ty=Tensor[(256), float64] */, %279)
}

def @func_10538(%var_10530: Tensor[(4, 14, 8), float32]) -> (Tensor[(4, 14, 8), float32],) {
  %280 = cast(%var_10530, dtype="float32") /* ty=Tensor[(4, 14, 8), float32] */;
  %281 = asinh(%280) /* ty=Tensor[(4, 14, 8), float32] */;
  (%281,)
}

def @func_10179(%var_10121: Tensor[(14, 11, 15), int32], %var_10122: Tensor[(14, 11, 15), int32], %var_10167: Tensor[(256), float64]) -> (Tensor[(14, 11, 15), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(256), float64], Tensor[(140), uint64], Tensor[(256), float64]) {
  %282 = cast(%var_10122, dtype="bool") /* ty=Tensor[(14, 11, 15), bool] */;
  %283 = shape_of(%var_10121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%var_10121, dtype="bool") /* ty=Tensor[(14, 11, 15), bool] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %286 = not_equal(%284, %285) /* ty=Tensor[(14, 11, 15), bool] */;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(14, 11, 15), float32] */;
  %288 = shape_of(%var_10122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%var_10122, dtype="float32") /* ty=Tensor[(14, 11, 15), float32] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %291 = @func_9901() /* ty=(Tensor[(3, 16), float32],) */;
  %292 = @func_6933() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %293 = cast(meta[relay.Constant][21] /* ty=Tensor[(140), uint64] */, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %294 = cast(%var_10167, dtype="float64") /* ty=Tensor[(256), float64] */;
  %295 = reshape(%293, newshape=[140]) /* ty=Tensor[(140), uint64] */;
  %296 = reshape(%294, newshape=[256]) /* ty=Tensor[(256), float64] */;
  %297 = @func_8427(%295, %296) /* ty=(Tensor[(3, 16), float32], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64]) */;
  %298 = mod(%289, %290) /* ty=Tensor[(14, 11, 15), float32] */;
  %299 = %291.0;
  %300 = @func_7821() /* ty=Tensor[(3, 16), float32] */;
  %301 = %292.0;
  %302 = %297.3;
  (%298, %299, %300, %301, %302, meta[relay.Constant][21] /* ty=Tensor[(140), uint64] */, %var_10167)
}

def @func_6092(%var_6070: Tensor[(15, 5, 4), float64]) -> (Tensor[(15, 5, 4), float64], Tensor[(14, 4, 6), uint16], Tensor[(168, 2), float64], Tensor[(3, 16), float32]) {
  %303 = cast(%var_6070, dtype="float64") /* ty=Tensor[(15, 5, 4), float64] */;
  %304 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(15, 5, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 5, 4), float64] */, dtype="float64") /* ty=Tensor[(15, 5, 4), float64] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %307 = cast(meta[relay.Constant][23] /* ty=Tensor[(168, 2), uint16] */, dtype="uint16") /* ty=Tensor[(168, 2), uint16] */;
  %308 = cast(meta[relay.Constant][23] /* ty=Tensor[(168, 2), uint16] */, dtype="uint16") /* ty=Tensor[(168, 2), uint16] */;
  %309 = reshape(%307, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %310 = reshape(%308, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %311 = @func_489(%309, %310) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
  %312 = cast(meta[relay.Constant][23] /* ty=Tensor[(168, 2), uint16] */, dtype="float64") /* ty=Tensor[(168, 2), float64] */;
  %313 = @func_5495() /* ty=(Tensor[(3, 16), float32],) */;
  %314 = floor_divide(%305, %306) /* ty=Tensor[(15, 5, 4), float64] */;
  %315 = %311.0;
  %316 = exp(%312) /* ty=Tensor[(168, 2), float64] */;
  %317 = %313.0;
  (%314, %315, %316, %317)
}

def @func_15510() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %318 = @func_7741() /* ty=(Tensor[(3, 16), float32],) */;
  %319 = @func_14630() /* ty=Tensor[(3, 16), float32] */;
  %320 = %318.0;
  (%319, %320)
}

def @func_8236(%var_8205: Tensor[(2, 11, 4), uint32], %var_8206: Tensor[(2, 11, 4), uint32]) -> (Tensor[(2, 11, 4), bool], Tensor[(2, 11, 4), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %321 = cast(%var_8206, dtype="bool") /* ty=Tensor[(2, 11, 4), bool] */;
  %322 = shape_of(%var_8205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%var_8205, dtype="bool") /* ty=Tensor[(2, 11, 4), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %325 = cast(%var_8205, dtype="float64") /* ty=Tensor[(2, 11, 4), float64] */;
  %326 = not_equal(%323, %324) /* ty=Tensor[(2, 11, 4), bool] */;
  %327 = acos(%325) /* ty=Tensor[(2, 11, 4), float64] */;
  %328 = @func_7355() /* ty=Tensor[(3, 16), float32] */;
  %329 = @func_4323() /* ty=Tensor[(3, 16), float32] */;
  (%326, %327, %328, %329)
}

def @func_7530() -> Tensor[(3, 16), float32] {
  %330 = @func_7445() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %330.0
}

def @func_15445() -> (Tensor[(3, 16), float32], Tensor[(96), uint16], Tensor[(3, 16), float32], Tensor[(4, 8, 3), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %331 = @func_2829() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) */;
  %332 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
  %333 = cast(meta[relay.Constant][24] /* ty=Tensor[(96), uint16] */, dtype="uint16") /* ty=Tensor[(96), uint16] */;
  %334 = reshape(%333, newshape=[4, 8, 3]) /* ty=Tensor[(4, 8, 3), uint16] */;
  %335 = @func_9771(%334) /* ty=Tensor[(4, 8, 3), uint16] */;
  %336 = cast(%335, dtype="float64") /* ty=Tensor[(4, 8, 3), float64] */;
  %337 = asinh(%336) /* ty=Tensor[(4, 8, 3), float64] */;
  %338 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 8, 3), float64] */, dtype="bool") /* ty=Tensor[(4, 8, 3), bool] */;
  %339 = shape_of(%337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%337, dtype="bool") /* ty=Tensor[(4, 8, 3), bool] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %342 = @func_7600() /* ty=(Tensor[(3, 16), float32],) */;
  %343 = %331.0;
  %344 = %332.0;
  %345 = logical_and(%340, %341) /* ty=Tensor[(4, 8, 3), bool] */;
  %346 = %342.0;
  %347 = @func_10244() /* ty=Tensor[(3, 16), float32] */;
  (%343, meta[relay.Constant][24] /* ty=Tensor[(96), uint16] */, %344, %345, %346, %347)
}

def @func_7346() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %348 = @func_4254() /* ty=(Tensor[(3, 16), float32],) */;
  %349 = @func_6141() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %350 = %348.0;
  %351 = %349.1;
  %352 = @func_4323() /* ty=Tensor[(3, 16), float32] */;
  (%350, %351, %352)
}

def @func_5814() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %353 = @func_2536() /* ty=(Tensor[(3, 16), float32],) */;
  %354 = @func_5315() /* ty=(Tensor[(3, 16), float32],) */;
  %355 = %353.0;
  %356 = %354.0;
  (%355, %356)
}

def @func_4921() -> Tensor[(8, 10, 4), float64] {
  %357 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 10, 4), float64] */, dtype="float64") /* ty=Tensor[(1, 10, 4), float64] */;
  %358 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 10, 4), float64] */, dtype="float64") /* ty=Tensor[(8, 10, 4), float64] */;
  floor_mod(%357, %358) /* ty=Tensor[(8, 10, 4), float64] */
}

def @func_14936() -> (Tensor[(3, 16), float32],) {
  %359 = @func_4543() /* ty=(Tensor[(3, 16), float32],) */;
  %360 = %359.0;
  (%360,)
}

def @func_6235() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(11, 2, 10), bool], Tensor[(110), uint8], Tensor[(220), uint8], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %361 = @func_4543() /* ty=(Tensor[(3, 16), float32],) */;
  %362 = @func_5518() /* ty=(Tensor[(3, 16), float32],) */;
  %363 = cast(meta[relay.Constant][28] /* ty=Tensor[(110), uint8] */, dtype="uint8") /* ty=Tensor[(110), uint8] */;
  %364 = cast(meta[relay.Constant][29] /* ty=Tensor[(220), uint8] */, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %365 = reshape(%363, newshape=[11, 1, 10]) /* ty=Tensor[(11, 1, 10), uint8] */;
  %366 = reshape(%364, newshape=[11, 2, 10]) /* ty=Tensor[(11, 2, 10), uint8] */;
  %367 = @func_1635(%365, %366) /* ty=(Tensor[(11, 2, 10), uint8], Tensor[(11, 2, 10), bool]) */;
  %368 = @func_5518() /* ty=(Tensor[(3, 16), float32],) */;
  %369 = %361.0;
  %370 = %362.0;
  %371 = %367.1;
  %372 = @func_3493() /* ty=Tensor[(3, 16), float32] */;
  %373 = %368.0;
  (%369, %370, %371, meta[relay.Constant][28] /* ty=Tensor[(110), uint8] */, meta[relay.Constant][29] /* ty=Tensor[(220), uint8] */, %372, %373)
}

def @func_4237() -> (Tensor[(3, 16), float32],) {
  %374 = @func_3609() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %375 = %374.0;
  (%375,)
}

def @func_7600() -> (Tensor[(3, 16), float32],) {
  %376 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  (%376,)
}

def @func_4543() -> (Tensor[(3, 16), float32],) {
  %377 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
  %378 = %377.0;
  (%378,)
}

def @func_11608() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %379 = @func_4844() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %380 = @func_6559() /* ty=(Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32]) */;
  %381 = %379.0;
  %382 = %380.1;
  (%381, %382)
}

def @func_11458() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %383 = @func_4844() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %384 = @func_3026() /* ty=(Tensor[(3, 16), float32],) */;
  %385 = %383.0;
  %386 = %384.0;
  (%385, %386)
}

def @func_13580() -> (Tensor[(3, 16), float32], Tensor[(900), float64]) {
  %387 = @func_2429() /* ty=(Tensor[(3, 16), float32],) */;
  %388 = @func_4424() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(336), uint16], Tensor[(900), float64]) */;
  %389 = %387.0;
  %390 = %388.4;
  (%389, %390)
}

def @func_7095() -> (Tensor[(3, 16), float32],) {
  %391 = @func_7078() /* ty=(Tensor[(3, 16), float32],) */;
  %392 = %391.0;
  (%392,)
}

def @func_8699() -> (Tensor[(3, 16), float32],) {
  %393 = @func_4362() /* ty=Tensor[(3, 16), float32] */;
  (%393,)
}

def @func_5715() -> Tensor[(3, 16), float32] {
  %394 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
  %394.0
}

def @func_7723(%var_7714: Tensor[(6, 7, 14), float32]) -> Tensor[(6, 7, 14), int8] {
  %395 = @func_4757() /* ty=(Tensor[(6, 7, 14), float32],) */;
  %396 = %395.0;
  %397 = cast(%var_7714, dtype="int8") /* ty=Tensor[(6, 7, 14), int8] */;
  %398 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%396, dtype="int8") /* ty=Tensor[(6, 7, 14), int8] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  minimum(%399, %400) /* ty=Tensor[(6, 7, 14), int8] */
}

def @func_7884() -> (Tensor[(6, 7, 14), float32],) {
  %401 = @func_6354() /* ty=Tensor[(6, 7, 14), float32] */;
  (%401,)
}

def @func_6559() -> (Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32]) {
  %402 = @func_4921() /* ty=Tensor[(8, 10, 4), float64] */;
  %403 = @func_5905() /* ty=Tensor[(3, 16), float32] */;
  (%402, %403)
}

def @func_4997(%var_4987: Tensor[(15, 11, 5), int8], %var_4988: Tensor[(15, 11, 5), int8]) -> (Tensor[(15, 11, 5), bool],) {
  %404 = cast(%var_4988, dtype="bool") /* ty=Tensor[(15, 11, 5), bool] */;
  %405 = shape_of(%var_4987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%var_4987, dtype="bool") /* ty=Tensor[(15, 11, 5), bool] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %408 = less_equal(%406, %407) /* ty=Tensor[(15, 11, 5), bool] */;
  (%408,)
}

def @func_5358(%var_5352: Tensor[(9, 9, 4), float32]) -> Tensor[(9, 9, 4), float32] {
  %409 = cast(%var_5352, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
  tan(%409) /* ty=Tensor[(9, 9, 4), float32] */
}

def @func_6642() -> Tensor[(3, 16), float32] {
  %410 = @func_4237() /* ty=(Tensor[(3, 16), float32],) */;
  %410.0
}

def @func_6976() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %411 = @func_3800() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(3, 16), float32]) */;
  %412 = %411.0;
  %413 = @func_5905() /* ty=Tensor[(3, 16), float32] */;
  (%412, %413)
}

def @func_4254() -> (Tensor[(3, 16), float32],) {
  %414 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
  %415 = %414.0;
  (%415,)
}

def @func_2893(%var_2884: Tensor[(12, 10, 4), float64], %var_2885: Tensor[(12, 10, 4), float64]) -> (Tensor[(12, 10, 4), float64],) {
  %416 = cast(%var_2885, dtype="float64") /* ty=Tensor[(12, 10, 4), float64] */;
  %417 = shape_of(%var_2884, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%var_2884, dtype="float64") /* ty=Tensor[(12, 10, 4), float64] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %420 = floor_divide(%418, %419) /* ty=Tensor[(12, 10, 4), float64] */;
  (%420,)
}

def @func_8016() -> Tensor[(3, 16), float32] {
  %421 = @func_4237() /* ty=(Tensor[(3, 16), float32],) */;
  %421.0
}

def @func_1710(%var_1673: int8, %var_1674: Tensor[(8, 9, 2), int8], %var_1680: Tensor[(56), float32], %var_1681: Tensor[(336), uint16]) -> (Tensor[(8, 9, 2), int8], Tensor[(7, 2, 4), bool], Tensor[(56), float32], Tensor[(336), uint16]) {
  %422 = cast(%var_1673, dtype="int8") /* ty=int8 */;
  %423 = cast(%var_1674, dtype="int8") /* ty=Tensor[(8, 9, 2), int8] */;
  %424 = cast(%var_1680, dtype="float32") /* ty=Tensor[(56), float32] */;
  %425 = cast(%var_1681, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %426 = reshape(%424, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), float32] */;
  %427 = reshape(%425, newshape=[336]) /* ty=Tensor[(336), uint16] */;
  %428 = @func_1464(%426, %427) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(8, 16, 2), float64], Tensor[(4, 64), float64], Tensor[(7, 2, 4), bool]) */;
  %429 = logical_xor(%422, %423) /* ty=Tensor[(8, 9, 2), int8] */;
  %430 = %428.4;
  (%429, %430, %var_1680, %var_1681)
}

def @func_2536() -> (Tensor[(3, 16), float32],) {
  %431 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
  %432 = %431.0;
  (%432,)
}

def @main(%var_16074: Tensor[(4, 9, 13), float32]) -> (Tensor[(4, 9, 13), float32],) {
  %433 = cast(%var_16074, dtype="float32") /* ty=Tensor[(4, 9, 13), float32] */;
  %434 = cosh(%433) /* ty=Tensor[(4, 9, 13), float32] */;
  (%434,)
}

def @func_13360() -> Tensor[(3, 16), float32] {
  %435 = @func_13256() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %435.0
}

def @func_4229() -> Tensor[(3, 16), float32] {
  %436 = @func_3209() /* ty=(Tensor[(3, 16), float32],) */;
  %436.0
}

def @func_11019() -> (Tensor[(3, 16), float32],) {
  %437 = @func_8016() /* ty=Tensor[(3, 16), float32] */;
  (%437,)
}

def @func_6604() -> Tensor[(3, 16), float32] {
  %438 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
  %438.0
}

def @func_9921() -> Tensor[(3, 16), float32] {
  @func_5171() /* ty=Tensor[(3, 16), float32] */
}

def @func_10326(%var_10321: Tensor[(336), bool]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(8, 10, 4), float64], Tensor[(9, 9, 4), float32], Tensor[(336), bool]) {
  %439 = @func_8491() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32]) */;
  %440 = @func_9151() /* ty=(Tensor[(3, 16), float32],) */;
  %441 = cast(%var_10321, dtype="bool") /* ty=Tensor[(336), bool] */;
  %442 = reshape(%441, newshape=[336]) /* ty=Tensor[(336), bool] */;
  %443 = @func_6773(%442) /* ty=(Tensor[(3, 16), float32], Tensor[(9, 9, 4), float32], Tensor[(324), float32], Tensor[(336), bool], Tensor[(336), bool]) */;
  %444 = %439.0;
  %445 = %440.0;
  %446 = @func_4921() /* ty=Tensor[(8, 10, 4), float64] */;
  %447 = %443.1;
  (%444, %445, %446, %447, %var_10321)
}

def @func_1934(%var_1929: Tensor[(140), uint64], %var_1930: Tensor[(256), float64]) -> (Tensor[(15, 15, 11), float32], Tensor[(5, 495), float32], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(13, 4, 11), float32]) {
  %448 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 495), float32] */, dtype="float32") /* ty=Tensor[(5, 495), float32] */;
  %449 = reshape(%448, newshape=[15, 15, 11]) /* ty=Tensor[(15, 15, 11), float32] */;
  %450 = @func_849(%449) /* ty=(Tensor[(15, 15, 11), float32],) */;
  %451 = cast(%var_1929, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %452 = cast(%var_1929, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %453 = cast(%var_1930, dtype="float64") /* ty=Tensor[(256), float64] */;
  %454 = reshape(%451, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), uint64] */;
  %455 = reshape(%452, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), uint64] */;
  %456 = reshape(%453, newshape=[256]) /* ty=Tensor[(256), float64] */;
  %457 = @func_887(%454, %455, %456) /* ty=(Tensor[(5, 7, 4), bool], Tensor[(8, 16, 2), float64], Tensor[(256), float64]) */;
  %458 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 4, 11), float32] */, dtype="float32") /* ty=Tensor[(13, 4, 11), float32] */;
  %459 = sinh(%458) /* ty=Tensor[(13, 4, 11), float32] */;
  %460 = cast(%459, dtype="float32") /* ty=Tensor[(13, 4, 11), float32] */;
  %461 = %450.0;
  %462 = %457.1;
  %463 = sqrt(%460) /* ty=Tensor[(13, 4, 11), float32] */;
  (%461, meta[relay.Constant][30] /* ty=Tensor[(5, 495), float32] */, %462, %var_1929, %var_1930, %463)
}

def @func_1735(%var_1722: float64) -> Tensor[(12, 7, 9), float64] {
  %464 = cast(%var_1722, dtype="float64") /* ty=float64 */;
  %465 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 7, 9), float64] */, dtype="float64") /* ty=Tensor[(12, 7, 9), float64] */;
  add(%464, %465) /* ty=Tensor[(12, 7, 9), float64] */
}

def @func_14224() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(11, 7, 5), bool]) {
  %466 = @func_13099() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %467 = @func_12604() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %468 = @func_10087() /* ty=(Tensor[(11, 7, 5), bool], Tensor[(11, ?, 13), float64], Tensor[(143), int16]) */;
  %469 = %466.1;
  %470 = %467.0;
  %471 = %468.0;
  (%469, %470, %471)
}

def @func_6401() -> Tensor[(3, 16), float32] {
  %472 = @func_4789() /* ty=(Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32]) */;
  %472.2
}

def @func_6141() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %473 = @func_2507() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %474 = %473.1;
  %475 = @func_5202() /* ty=Tensor[(3, 16), float32] */;
  (%474, %475)
}

def @func_7107() -> (Tensor[(3, 16), float32],) {
  %476 = @func_4229() /* ty=Tensor[(3, 16), float32] */;
  (%476,)
}

def @func_4495(%var_4482: Tensor[(1, 480), float64], %var_4489: Tensor[(56), float32], %var_4490: Tensor[(336), uint16]) -> (Tensor[(3, 16), float32], Tensor[(12, 10, 4), float64], Tensor[(1, 480), float64], Tensor[(14, 4, 6), uint16], Tensor[(56), float32], Tensor[(336), uint16]) {
  %477 = @func_2652() /* ty=(Tensor[(3, 16), float32],) */;
  %478 = cast(%var_4482, dtype="float64") /* ty=Tensor[(1, 480), float64] */;
  %479 = cast(%var_4482, dtype="float64") /* ty=Tensor[(1, 480), float64] */;
  %480 = reshape(%478, newshape=[12, 10, 4]) /* ty=Tensor[(12, 10, 4), float64] */;
  %481 = reshape(%479, newshape=[12, 10, 4]) /* ty=Tensor[(12, 10, 4), float64] */;
  %482 = @func_2893(%480, %481) /* ty=(Tensor[(12, 10, 4), float64],) */;
  %483 = cast(%var_4489, dtype="float32") /* ty=Tensor[(56), float32] */;
  %484 = cast(%var_4490, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %485 = reshape(%483, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), float32] */;
  %486 = reshape(%484, newshape=[336]) /* ty=Tensor[(336), uint16] */;
  %487 = @func_1464(%485, %486) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(8, 16, 2), float64], Tensor[(4, 64), float64], Tensor[(7, 2, 4), bool]) */;
  %488 = %477.0;
  %489 = %482.0;
  %490 = %487.0;
  (%488, %489, %var_4482, %490, %var_4489, %var_4490)
}

def @func_4757() -> (Tensor[(6, 7, 14), float32],) {
  %491 = @func_2755() /* ty=(Tensor[(6, 7, 14), float32],) */;
  %492 = %491.0;
  (%492,)
}

def @func_3609() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %493 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
  %494 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
  %495 = %493.0;
  %496 = %494.0;
  (%495, %496)
}

def @func_5661() -> Tensor[(3, 16), float32] {
  %497 = @func_3026() /* ty=(Tensor[(3, 16), float32],) */;
  %497.0
}

def @func_6851() -> (Tensor[(3, 16), float32],) {
  %498 = @func_4237() /* ty=(Tensor[(3, 16), float32],) */;
  %499 = %498.0;
  (%499,)
}

def @func_5518() -> (Tensor[(3, 16), float32],) {
  %500 = @func_2587() /* ty=(Tensor[(3, 16), float32],) */;
  %501 = %500.0;
  (%501,)
}

def @func_10244() -> Tensor[(3, 16), float32] {
  %502 = @func_6667() /* ty=(Tensor[(3, 16), float32],) */;
  %502.0
}

def @func_8427(%var_8415: Tensor[(140), uint64], %var_8416: Tensor[(256), float64]) -> (Tensor[(3, 16), float32], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64]) {
  %503 = @func_5814() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %504 = cast(%var_8415, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %505 = cast(%var_8416, dtype="float64") /* ty=Tensor[(256), float64] */;
  %506 = reshape(%504, newshape=[140]) /* ty=Tensor[(140), uint64] */;
  %507 = reshape(%505, newshape=[256]) /* ty=Tensor[(256), float64] */;
  %508 = @func_1934(%506, %507) /* ty=(Tensor[(15, 15, 11), float32], Tensor[(5, 495), float32], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(13, 4, 11), float32]) */;
  %509 = %503.1;
  %510 = %508.2;
  (%509, %510, %var_8415, %var_8416)
}

def @func_14416() -> Tensor[(3, 16), float32] {
  @func_9463() /* ty=Tensor[(3, 16), float32] */
}

def @func_5311() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %511 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
  %512 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
  %513 = %511.0;
  %514 = @func_4623() /* ty=Tensor[(3, 16), float32] */;
  %515 = %512.0;
  (%513, %514, %515)
}

def @func_9937(%var_9927: Tensor[(300), float64]) -> (Tensor[(3, 16), float32], Tensor[(168, 2), float64], Tensor[(300), float64]) {
  %516 = cast(%var_9927, dtype="float64") /* ty=Tensor[(300), float64] */;
  %517 = reshape(%516, newshape=[15, 5, 4]) /* ty=Tensor[(15, 5, 4), float64] */;
  %518 = @func_6092(%517) /* ty=(Tensor[(15, 5, 4), float64], Tensor[(14, 4, 6), uint16], Tensor[(168, 2), float64], Tensor[(3, 16), float32]) */;
  %519 = @func_4229() /* ty=Tensor[(3, 16), float32] */;
  %520 = %518.2;
  (%519, %520, %var_9927)
}

def @func_10400(%var_10368: Tensor[(336), bool], %var_10372: Tensor[(11, 9, 13), float64]) -> (Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(11, 9, 13), int32]) {
  %521 = cast(%var_10368, dtype="bool") /* ty=Tensor[(336), bool] */;
  %522 = reshape(%521, newshape=[336]) /* ty=Tensor[(336), bool] */;
  %523 = @func_3905(%522) /* ty=(Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %524 = @func_10087() /* ty=(Tensor[(11, 7, 5), bool], Tensor[(11, ?, 13), float64], Tensor[(143), int16]) */;
  %525 = %524.1;
  %526 = cast(%525, dtype="int32") /* ty=Tensor[(11, ?, 13), int32] */;
  %527 = cast(%var_10372, dtype="int32") /* ty=Tensor[(11, 9, 13), int32] */;
  %528 = %523.0;
  %529 = subtract(%526, %527) /* ty=Tensor[(11, 9, 13), int32] */;
  (%528, %var_10368, %529)
}

def @func_5971(%var_5954: Tensor[(14, 4), float32], %var_5959: Tensor[(24, 6), int8]) -> (Tensor[(3, 16), float32], Tensor[(1, 480), float64], Tensor[(480), float64], Tensor[(14, 4), float32], Tensor[(336, 1), uint16], Tensor[(336), uint16], Tensor[(24, 6), int8]) {
  %530 = cast(meta[relay.Constant][33] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %531 = cast(%var_5954, dtype="float32") /* ty=Tensor[(14, 4), float32] */;
  %532 = cast(meta[relay.Constant][34] /* ty=Tensor[(336, 1), uint16] */, dtype="uint16") /* ty=Tensor[(336, 1), uint16] */;
  %533 = reshape(%530, newshape=[1, 480]) /* ty=Tensor[(1, 480), float64] */;
  %534 = reshape(%531, newshape=[56]) /* ty=Tensor[(56), float32] */;
  %535 = reshape(%532, newshape=[336]) /* ty=Tensor[(336), uint16] */;
  %536 = @func_4495(%533, %534, %535) /* ty=(Tensor[(3, 16), float32], Tensor[(12, 10, 4), float64], Tensor[(1, 480), float64], Tensor[(14, 4, 6), uint16], Tensor[(56), float32], Tensor[(336), uint16]) */;
  %537 = cast(meta[relay.Constant][34] /* ty=Tensor[(336, 1), uint16] */, dtype="uint16") /* ty=Tensor[(336, 1), uint16] */;
  %538 = cast(%var_5959, dtype="int8") /* ty=Tensor[(24, 6), int8] */;
  %539 = cast(%var_5954, dtype="float32") /* ty=Tensor[(14, 4), float32] */;
  %540 = reshape(%537, newshape=[336]) /* ty=Tensor[(336), uint16] */;
  %541 = reshape(%538, newshape=[144]) /* ty=Tensor[(144), int8] */;
  %542 = reshape(%539, newshape=[56]) /* ty=Tensor[(56), float32] */;
  %543 = @func_3437(%540, %541, %542) /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(56), float32], int8, Tensor[(144), int8], Tensor[(56), float32]) */;
  %544 = @func_4555() /* ty=Tensor[(3, 16), float32] */;
  %545 = %536.2;
  %546 = %543.2;
  (%544, %545, meta[relay.Constant][33] /* ty=Tensor[(480), float64] */, %var_5954, meta[relay.Constant][34] /* ty=Tensor[(336, 1), uint16] */, %546, %var_5959)
}

def @func_11309(%var_11307: Tensor[(88), uint32]) -> (Tensor[(6, 7, 14), float32], Tensor[(3, 16), float32], Tensor[(14, 4), float32], Tensor[(56), float32], Tensor[(144), int8], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(88), uint32]) {
  %547 = @func_2755() /* ty=(Tensor[(6, 7, 14), float32],) */;
  %548 = cast(meta[relay.Constant][35] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
  %549 = cast(meta[relay.Constant][36] /* ty=Tensor[(144), int8] */, dtype="int8") /* ty=Tensor[(144), int8] */;
  %550 = reshape(%548, newshape=[14, 4]) /* ty=Tensor[(14, 4), float32] */;
  %551 = reshape(%549, newshape=[24, 6]) /* ty=Tensor[(24, 6), int8] */;
  %552 = @func_5971(%550, %551) /* ty=(Tensor[(3, 16), float32], Tensor[(1, 480), float64], Tensor[(480), float64], Tensor[(14, 4), float32], Tensor[(336, 1), uint16], Tensor[(336), uint16], Tensor[(24, 6), int8]) */;
  %553 = @func_8656() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %554 = @func_9579() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(12, 10, 4), float64], Tensor[(480), float64]) */;
  %555 = cast(%var_11307, dtype="uint32") /* ty=Tensor[(88), uint32] */;
  %556 = cast(%var_11307, dtype="uint32") /* ty=Tensor[(88), uint32] */;
  %557 = reshape(%555, newshape=[2, 11, 4]) /* ty=Tensor[(2, 11, 4), uint32] */;
  %558 = reshape(%556, newshape=[2, 11, 4]) /* ty=Tensor[(2, 11, 4), uint32] */;
  %559 = @func_8236(%557, %558) /* ty=(Tensor[(2, 11, 4), bool], Tensor[(2, 11, 4), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %560 = %547.0;
  %561 = @func_5905() /* ty=Tensor[(3, 16), float32] */;
  %562 = %552.3;
  %563 = %553.1;
  %564 = %554.2;
  %565 = %559.2;
  (%560, %561, %562, meta[relay.Constant][35] /* ty=Tensor[(56), float32] */, meta[relay.Constant][36] /* ty=Tensor[(144), int8] */, %563, %564, %565, %var_11307)
}

def @func_15863() -> Tensor[(3, 16), float32] {
  @func_4623() /* ty=Tensor[(3, 16), float32] */
}

def @func_12519() -> Tensor[(3, 16), float32] {
  %566 = @func_5311() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %566.1
}

def @func_14870() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %567 = @func_10021() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %568 = @func_4844() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %569 = %567.0;
  %570 = %568.0;
  (%569, %570)
}

def @func_12142() -> (Tensor[(3, 16), float32],) {
  %571 = @func_3642() /* ty=(Tensor[(3, 16), float32],) */;
  %572 = %571.0;
  (%572,)
}

def @func_3437(%var_3399: Tensor[(336), uint16], %var_3423: Tensor[(144), int8], %var_3424: Tensor[(56), float32]) -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(56), float32], int8, Tensor[(144), int8], Tensor[(56), float32]) {
  %573 = @func_2719() /* ty=(Tensor[(3, 16), float32],) */;
  %574 = cast(%var_3399, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %575 = cast(%var_3399, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %576 = reshape(%574, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %577 = reshape(%575, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %578 = @func_489(%576, %577) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
  %579 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
  %580 = cast(meta[relay.Constant][37] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %581 = cast(%var_3423, dtype="int8") /* ty=Tensor[(144), int8] */;
  %582 = cast(%var_3424, dtype="float32") /* ty=Tensor[(56), float32] */;
  %583 = cast(%var_3399, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %584 = reshape(%580, newshape=[]) /* ty=int8 */;
  %585 = reshape(%581, newshape=[8, 9, 2]) /* ty=Tensor[(8, 9, 2), int8] */;
  %586 = reshape(%582, newshape=[56]) /* ty=Tensor[(56), float32] */;
  %587 = reshape(%583, newshape=[336]) /* ty=Tensor[(336), uint16] */;
  %588 = @func_1710(%584, %585, %586, %587) /* ty=(Tensor[(8, 9, 2), int8], Tensor[(7, 2, 4), bool], Tensor[(56), float32], Tensor[(336), uint16]) */;
  %589 = %573.0;
  %590 = %578.0;
  %591 = %579.0;
  %592 = %588.2;
  (%589, %590, %var_3399, %591, %592, meta[relay.Constant][37] /* ty=int8 */, %var_3423, %var_3424)
}

def @func_2652() -> (Tensor[(3, 16), float32],) {
  %593 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
  %594 = %593.0;
  (%594,)
}

def @func_10814() -> (Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32]) {
  %595 = @func_10001() /* ty=(Tensor[(3, 16), float32],) */;
  %596 = @func_6199() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64]) */;
  %597 = %596.1;
  %598 = cast(%597, dtype="float32") /* ty=Tensor[(6, 7, 14), float32] */;
  %599 = %595.0;
  %600 = sqrt(%598) /* ty=Tensor[(6, 7, 14), float32] */;
  (%599, %600)
}

def @func_14286() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %601 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 10, 16), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 16), float32] */;
  %602 = sqrt(%601) /* ty=Tensor[(11, 10, 16), float32] */;
  %603 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 10, 16), float32] */, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
  %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(%602, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %607 = not_equal(%605, %606) /* ty=Tensor[(11, 10, 16), bool] */;
  %608 = cast(%602, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%607, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %612 = cast(%602, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %613 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(11, 10, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 10, 16), float32] */, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %616 = subtract(%610, %611) /* ty=Tensor[(11, 10, 16), float64] */;
  %617 = floor_mod(%614, %615) /* ty=Tensor[(11, 10, 16), float64] */;
  (%616, %617)
}

def @func_14955() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %618 = @func_3800() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(3, 16), float32]) */;
  %619 = @func_13099() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %620 = %618.0;
  %621 = %619.1;
  (%620, %621)
}

def @func_8710() -> (Tensor[(3, 16), float32],) {
  %622 = @func_3464() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %623 = %622.1;
  (%623,)
}

def @func_6354() -> Tensor[(6, 7, 14), float32] {
  %624 = @func_4757() /* ty=(Tensor[(6, 7, 14), float32],) */;
  %624.0
}

def @func_4877(%var_4855: Tensor[(4, 1, 14), float32], %var_4856: Tensor[(4, 14, 14), float32]) -> (Tensor[(4, 14, 14), float32], Tensor[(3, 16), float32]) {
  %625 = cast(%var_4855, dtype="float32") /* ty=Tensor[(4, 1, 14), float32] */;
  %626 = cast(%var_4856, dtype="float32") /* ty=Tensor[(4, 14, 14), float32] */;
  %627 = floor_divide(%625, %626) /* ty=Tensor[(4, 14, 14), float32] */;
  %628 = @func_4323() /* ty=Tensor[(3, 16), float32] */;
  (%627, %628)
}

def @func_10087() -> (Tensor[(11, 7, 5), bool], Tensor[(11, ?, 13), float64], Tensor[(143), int16]) {
  %629 = cast(meta[relay.Constant][40] /* ty=Tensor[(11, 7, 5), float32] */, dtype="bool") /* ty=Tensor[(11, 7, 5), bool] */;
  %630 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(11, 7, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 7, 5), float32] */, dtype="bool") /* ty=Tensor[(11, 7, 5), bool] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %633 = cast(meta[relay.Constant][41] /* ty=Tensor[(143), int16] */, dtype="int16") /* ty=Tensor[(143), int16] */;
  %634 = cast(meta[relay.Constant][41] /* ty=Tensor[(143), int16] */, dtype="int16") /* ty=Tensor[(143), int16] */;
  %635 = reshape(%633, newshape=[11, 1, 13]) /* ty=Tensor[(11, 1, 13), int16] */;
  %636 = reshape(%634, newshape=[11, 1, 13]) /* ty=Tensor[(11, 1, 13), int16] */;
  %637 = @func_6624(%635, %636) /* ty=(Tensor[(11, ?, 13), float64],) */;
  %638 = equal(%631, %632) /* ty=Tensor[(11, 7, 5), bool] */;
  %639 = %637.0;
  (%638, %639, meta[relay.Constant][41] /* ty=Tensor[(143), int16] */)
}

def @func_13440() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %640 = @func_5315() /* ty=(Tensor[(3, 16), float32],) */;
  %641 = @func_10966() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %642 = @func_12142() /* ty=(Tensor[(3, 16), float32],) */;
  %643 = %640.0;
  %644 = %641.1;
  %645 = %642.0;
  (%643, %644, %645)
}

def @func_9463() -> Tensor[(3, 16), float32] {
  @func_5171() /* ty=Tensor[(3, 16), float32] */
}

def @func_7916() -> (Tensor[(3, 16), float32],) {
  %646 = @func_2719() /* ty=(Tensor[(3, 16), float32],) */;
  %647 = %646.0;
  (%647,)
}

def @func_10021() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %648 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  %649 = @func_9199() /* ty=Tensor[(3, 16), float32] */;
  (%648, %649)
}

def @func_9693(%var_9689: Tensor[(14, 12, 11), float64]) -> (Tensor[(14, 12, 11), float64],) {
  %650 = cast(-5.62156f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %651 = cast(%var_9689, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
  %652 = floor_divide(%650, %651) /* ty=Tensor[(14, 12, 11), float64] */;
  (%652,)
}

def @func_10966() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %653 = @func_9151() /* ty=(Tensor[(3, 16), float32],) */;
  %654 = @func_5495() /* ty=(Tensor[(3, 16), float32],) */;
  %655 = @func_8656() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %656 = @func_6933() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %657 = @func_5905() /* ty=Tensor[(3, 16), float32] */;
  %658 = %653.0;
  %659 = %654.0;
  %660 = %655.1;
  %661 = @func_5989() /* ty=Tensor[(3, 16), float32] */;
  %662 = %656.1;
  (%657, %658, %659, %660, %661, %662)
}

def @func_14004() -> Tensor[(5, 6, 4), float32] {
  %663 = cast(meta[relay.Constant][42] /* ty=Tensor[(5, 6, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 6, 4), float32] */;
  acos(%663) /* ty=Tensor[(5, 6, 4), float32] */
}

def @func_14036() -> Tensor[(143), float64] {
  %664 = @func_10087() /* ty=(Tensor[(11, 7, 5), bool], Tensor[(11, ?, 13), float64], Tensor[(143), int16]) */;
  %665 = %664.2;
  %666 = cast(%665, dtype="float64") /* ty=Tensor[(143), float64] */;
  exp(%666) /* ty=Tensor[(143), float64] */
}

def @func_14607() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) {
  %667 = @func_2829() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) */;
  %668 = @func_9359() /* ty=Tensor[(3, 16), float32] */;
  %669 = %667.1;
  (%668, %669)
}

def @func_5495() -> (Tensor[(3, 16), float32],) {
  %670 = @func_4237() /* ty=(Tensor[(3, 16), float32],) */;
  %671 = %670.0;
  (%671,)
}

def @func_2342() -> (Tensor[(3, 16), float32],) {
  %672 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  (%672,)
}

def @func_2290() -> Tensor[(3, 16), float32] {
  %673 = cast(4.35858f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %674 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 16), float32] */, dtype="float32") /* ty=Tensor[(3, 16), float32] */;
  floor_divide(%673, %674) /* ty=Tensor[(3, 16), float32] */
}

def @func_2719() -> (Tensor[(3, 16), float32],) {
  %675 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
  %676 = %675.0;
  (%676,)
}

def @func_12715() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %677 = @func_7259() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %678 = @func_10966() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %679 = %677.1;
  %680 = %678.2;
  (%679, %680)
}

def @func_10898() -> (Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %681 = @func_6199() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64]) */;
  %682 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
  %683 = @func_6642() /* ty=Tensor[(3, 16), float32] */;
  %684 = %681.1;
  %685 = @func_5905() /* ty=Tensor[(3, 16), float32] */;
  %686 = %682.0;
  (%683, %684, %685, %686)
}

def @func_7355() -> Tensor[(3, 16), float32] {
  %687 = @func_6235() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(11, 2, 10), bool], Tensor[(110), uint8], Tensor[(220), uint8], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %687.0
}

def @func_7445() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %688 = @func_3464() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %689 = @func_5495() /* ty=(Tensor[(3, 16), float32],) */;
  %690 = %688.1;
  %691 = %689.0;
  (%690, %691)
}

def @func_11812() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %692 = @func_6141() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %693 = @func_6235() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(11, 2, 10), bool], Tensor[(110), uint8], Tensor[(220), uint8], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %694 = @func_6976() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %695 = @func_2536() /* ty=(Tensor[(3, 16), float32],) */;
  %696 = %692.0;
  %697 = %693.6;
  %698 = %694.0;
  %699 = %695.0;
  (%696, %697, %698, %699)
}

def @func_14349(%var_14340: Tensor[(3, 6, 3), bool], %var_14341: Tensor[(3, 6, 3), bool]) -> Tensor[(3, 6, 3), bool] {
  %700 = cast(%var_14341, dtype="bool") /* ty=Tensor[(3, 6, 3), bool] */;
  %701 = shape_of(%var_14340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%var_14340, dtype="bool") /* ty=Tensor[(3, 6, 3), bool] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%702, %703) /* ty=Tensor[(3, 6, 3), bool] */
}

def @func_489(%var_478: Tensor[(14, 4, 6), uint16], %var_479: Tensor[(14, 4, 6), uint16]) -> (Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) {
  %704 = cast(%var_479, dtype="uint16") /* ty=Tensor[(14, 4, 6), uint16] */;
  %705 = shape_of(%var_478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%var_478, dtype="uint16") /* ty=Tensor[(14, 4, 6), uint16] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %708 = cast(%var_478, dtype="bool") /* ty=Tensor[(14, 4, 6), bool] */;
  %709 = shape_of(%var_479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%var_479, dtype="bool") /* ty=Tensor[(14, 4, 6), bool] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %712 = logical_xor(%706, %707) /* ty=Tensor[(14, 4, 6), uint16] */;
  %713 = less(%710, %711) /* ty=Tensor[(14, 4, 6), bool] */;
  (%712, %713)
}

def @func_8500() -> (Tensor[(3, 16), float32],) {
  %714 = @func_4690() /* ty=(Tensor[(3, 16), float32],) */;
  %715 = %714.0;
  (%715,)
}

def @func_5989() -> Tensor[(3, 16), float32] {
  %716 = @func_3026() /* ty=(Tensor[(3, 16), float32],) */;
  %716.0
}

def @func_7045() -> (Tensor[(3, 16), float32],) {
  %717 = @func_6604() /* ty=Tensor[(3, 16), float32] */;
  (%717,)
}

def @func_15296() -> (Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32]) {
  %718 = @func_6559() /* ty=(Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32]) */;
  %719 = @func_6933() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %720 = %718.0;
  %721 = %719.0;
  (%720, %721)
}

def @func_4959() -> (Tensor[(14, 4, 6), float32], Tensor[(8, 10, 4), float64]) {
  %722 = @func_4660() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) */;
  %723 = %722.1;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(14, 4, 6), float32] */;
  %725 = cosh(%724) /* ty=Tensor[(14, 4, 6), float32] */;
  %726 = cast(%725, dtype="float32") /* ty=Tensor[(14, 4, 6), float32] */;
  %727 = acosh(%726) /* ty=Tensor[(14, 4, 6), float32] */;
  %728 = @func_4921() /* ty=Tensor[(8, 10, 4), float64] */;
  (%727, %728)
}

def @func_3800() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(3, 16), float32]) {
  %729 = @func_3464() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %730 = cast(meta[relay.Constant][44] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %731 = cast(meta[relay.Constant][44] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %732 = reshape(%730, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %733 = reshape(%731, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %734 = @func_489(%732, %733) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
  %735 = @func_3026() /* ty=(Tensor[(3, 16), float32],) */;
  %736 = %729.0;
  %737 = %734.1;
  %738 = %735.0;
  (%736, %737, meta[relay.Constant][44] /* ty=Tensor[(336), uint16] */, %738)
}

def @func_7035() -> (Tensor[(3, 16), float32],) {
  %739 = @func_4789() /* ty=(Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32]) */;
  %740 = %739.2;
  (%740,)
}

def @func_14115(%var_14103: Tensor[(14, 14, 6), int64]) -> (Tensor[(14, 14, 6), int64],) {
  %741 = cast(-4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %742 = cast(%var_14103, dtype="int64") /* ty=Tensor[(14, 14, 6), int64] */;
  %743 = logical_xor(%741, %742) /* ty=Tensor[(14, 14, 6), int64] */;
  (%743,)
}

def @func_5171() -> Tensor[(3, 16), float32] {
  @func_4323() /* ty=Tensor[(3, 16), float32] */
}

def @func_5315() -> (Tensor[(3, 16), float32],) {
  %744 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
  %745 = %744.0;
  (%745,)
}

def @func_4424() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(336), uint16], Tensor[(900), float64]) {
  %746 = cast(meta[relay.Constant][45] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %747 = reshape(%746, newshape=[336]) /* ty=Tensor[(336), bool] */;
  %748 = @func_3905(%747) /* ty=(Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %749 = cast(meta[relay.Constant][46] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
  %750 = cast(meta[relay.Constant][45] /* ty=Tensor[(336), bool] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %751 = reshape(%749, newshape=[4, 15, 15]) /* ty=Tensor[(4, 15, 15), float64] */;
  %752 = reshape(%750, newshape=[336]) /* ty=Tensor[(336), uint16] */;
  %753 = @func_2211(%751, %752) /* ty=(Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(4, 15, 15), float64], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(14, 4, 6), uint16]) */;
  %754 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  %755 = %748.2;
  %756 = %753.1;
  (%754, %755, meta[relay.Constant][45] /* ty=Tensor[(336), bool] */, %756, meta[relay.Constant][46] /* ty=Tensor[(900), float64] */)
}

def @func_15613() -> Tensor[(3, 16), float32] {
  @func_12335() /* ty=Tensor[(3, 16), float32] */
}

def @func_11153() -> Tensor[(3, 16), float32] {
  @func_6733() /* ty=Tensor[(3, 16), float32] */
}

def @func_9901() -> (Tensor[(3, 16), float32],) {
  %757 = @func_9411() /* ty=Tensor[(3, 16), float32] */;
  (%757,)
}

def @func_14731(%var_14642: Tensor[(1296), int8]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32], Tensor[(3, 16), float32], Tensor[(1, 7, 4), uint32], Tensor[(7), int32], Tensor[(14, 2), int32], Tensor[(16, 9, 9), int64]) {
  %758 = @func_7916() /* ty=(Tensor[(3, 16), float32],) */;
  %759 = @func_12285() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %760 = @func_14503() /* ty=(Tensor[(3, 16), float32],) */;
  %761 = @func_7741() /* ty=(Tensor[(3, 16), float32],) */;
  %762 = @func_7884() /* ty=(Tensor[(6, 7, 14), float32],) */;
  %763 = @func_2587() /* ty=(Tensor[(3, 16), float32],) */;
  %764 = cast(meta[relay.Constant][47] /* ty=Tensor[(7), int32] */, dtype="int32") /* ty=Tensor[(7), int32] */;
  %765 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 2), int32] */, dtype="int32") /* ty=Tensor[(14, 2), int32] */;
  %766 = reshape(%764, newshape=[1, 7, 1]) /* ty=Tensor[(1, 7, 1), int32] */;
  %767 = reshape(%765, newshape=[1, 7, 4]) /* ty=Tensor[(1, 7, 4), int32] */;
  %768 = cast(%var_14642, dtype="int8") /* ty=Tensor[(1296), int8] */;
  %769 = cast(%var_14642, dtype="int8") /* ty=Tensor[(1296), int8] */;
  %770 = reshape(%768, newshape=[16, 9, 9]) /* ty=Tensor[(16, 9, 9), int8] */;
  %771 = reshape(%769, newshape=[16, 9, 9]) /* ty=Tensor[(16, 9, 9), int8] */;
  %772 = @func_8552(%770, %771) /* ty=(Tensor[(16, 9, 9), int8], Tensor[(16, 9, 9), float64]) */;
  %773 = %772.0;
  %774 = cast(%var_14642, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %775 = shape_of(%773, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%773, dtype="int64") /* ty=Tensor[(16, 9, 9), int64] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %778 = %758.0;
  %779 = %759.0;
  %780 = %760.0;
  %781 = %761.0;
  %782 = %762.0;
  %783 = %763.0;
  %784 = @func_4186(%766, %767) /* ty=Tensor[(1, 7, 4), uint32] */;
  %785 = logical_xor(%776, %777) /* ty=Tensor[(16, 9, 9), int64] */;
  (%778, %779, %780, %781, %782, %783, %784, meta[relay.Constant][47] /* ty=Tensor[(7), int32] */, meta[relay.Constant][48] /* ty=Tensor[(14, 2), int32] */, %785)
}

def @func_14453(%var_14435: Tensor[(14, 8, 15), float64]) -> Tensor[(14, 8, 15), float64] {
  %786 = cast(%var_14435, dtype="float64") /* ty=Tensor[(14, 8, 15), float64] */;
  tan(%786) /* ty=Tensor[(14, 8, 15), float64] */
}

def @func_8735(%var_8721: Tensor[(2, 10, 3), float64]) -> Tensor[(2, 10, 3), float64] {
  %787 = cast(%var_8721, dtype="float64") /* ty=Tensor[(2, 10, 3), float64] */;
  atanh(%787) /* ty=Tensor[(2, 10, 3), float64] */
}

def @func_6199() -> (Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64]) {
  %788 = @func_2755() /* ty=(Tensor[(6, 7, 14), float32],) */;
  %789 = %788.0;
  %790 = cast(%789, dtype="float64") /* ty=Tensor[(6, 7, 14), float64] */;
  %791 = @func_4623() /* ty=Tensor[(3, 16), float32] */;
  %792 = sinh(%790) /* ty=Tensor[(6, 7, 14), float64] */;
  (%791, %792)
}

def @func_12415() -> (Tensor[(3, 16), float32], Tensor[(2, 10, 3), float64], Tensor[(60), float64]) {
  %793 = cast(meta[relay.Constant][49] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %794 = reshape(%793, newshape=[2, 10, 3]) /* ty=Tensor[(2, 10, 3), float64] */;
  %795 = @func_6733() /* ty=Tensor[(3, 16), float32] */;
  %796 = @func_8735(%794) /* ty=Tensor[(2, 10, 3), float64] */;
  (%795, %796, meta[relay.Constant][49] /* ty=Tensor[(60), float64] */)
}

def @func_8266() -> (Tensor[(3, 16), float32],) {
  %797 = @func_3800() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(3, 16), float32]) */;
  %798 = %797.0;
  (%798,)
}

def @func_13283() -> (Tensor[(88), uint32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %799 = @func_11536() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(144), int8], Tensor[(88), uint32]) */;
  %800 = @func_9676() /* ty=(Tensor[(3, 16), float32],) */;
  %801 = @func_8500() /* ty=(Tensor[(3, 16), float32],) */;
  %802 = %799.3;
  %803 = %800.0;
  %804 = %801.0;
  (%802, %803, %804)
}

def @func_12653(%var_12637: Tensor[(8, 5, 1), float32]) -> (Tensor[(8, 5, 1), float32], Tensor[(3, 16), float32]) {
  %805 = cast(%var_12637, dtype="float32") /* ty=Tensor[(8, 5, 1), float32] */;
  %806 = @func_2429() /* ty=(Tensor[(3, 16), float32],) */;
  %807 = sigmoid(%805) /* ty=Tensor[(8, 5, 1), float32] */;
  %808 = %806.0;
  (%807, %808)
}

def @func_3905(%var_3881: Tensor[(336), bool]) -> (Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %809 = cast(%var_3881, dtype="bool") /* ty=Tensor[(336), bool] */;
  %810 = reshape(%809, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), bool] */;
  %811 = @func_3551(%810) /* ty=(Tensor[(14, 4, 6), float32],) */;
  %812 = @func_3642() /* ty=(Tensor[(3, 16), float32],) */;
  %813 = %812.0;
  %814 = cast(%813, dtype="float32") /* ty=Tensor[(3, 16), float32] */;
  %815 = @func_2536() /* ty=(Tensor[(3, 16), float32],) */;
  %816 = @func_2829() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) */;
  %817 = %811.0;
  %818 = atan(%814) /* ty=Tensor[(3, 16), float32] */;
  %819 = %815.0;
  %820 = %816.0;
  (%817, %var_3881, %818, %819, %820)
}

def @func_4660() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) {
  %821 = @func_4254() /* ty=(Tensor[(3, 16), float32],) */;
  %822 = @func_2829() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) */;
  %823 = %821.0;
  %824 = %822.1;
  (%823, %824)
}

def @func_7741() -> (Tensor[(3, 16), float32],) {
  %825 = @func_5905() /* ty=Tensor[(3, 16), float32] */;
  (%825,)
}

def @func_3026() -> (Tensor[(3, 16), float32],) {
  %826 = @func_2792() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %827 = %826.0;
  (%827,)
}

def @func_7775() -> (Tensor[(3, 16), float32],) {
  %828 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  (%828,)
}

def @func_12391(%var_12383: Tensor[(448), float32]) -> (Tensor[(3, 16), float32], Tensor[(4, 14, 8), float32], Tensor[(448), float32]) {
  %829 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
  %830 = cast(%var_12383, dtype="float32") /* ty=Tensor[(448), float32] */;
  %831 = reshape(%830, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), float32] */;
  %832 = @func_10538(%831) /* ty=(Tensor[(4, 14, 8), float32],) */;
  %833 = %829.0;
  %834 = %832.0;
  (%833, %834, %var_12383)
}

def @func_11077() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %835 = @func_9243() /* ty=(Tensor[(3, 16), float32],) */;
  %836 = @func_4555() /* ty=Tensor[(3, 16), float32] */;
  %837 = %835.0;
  (%836, %837)
}

def @func_9771(%var_9760: Tensor[(4, 8, 3), uint16]) -> Tensor[(4, 8, 3), uint16] {
  %838 = cast(%var_9760, dtype="uint16") /* ty=Tensor[(4, 8, 3), uint16] */;
  %839 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(4, 8, 3), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %840 = cast(meta[relay.Constant][50] /* ty=Tensor[(4, 8, 3), uint16] */, dtype="uint16") /* ty=Tensor[(4, 8, 3), uint16] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  multiply(%840, %841) /* ty=Tensor[(4, 8, 3), uint16] */
}

def @func_6273(%var_6247: Tensor[(6, 7, 14), float64]) -> (Tensor[(6, 7, 14), float64], Tensor[(336), uint16], Tensor[(56), float32], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32]) {
  %842 = @func_6199() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64]) */;
  %843 = %842.1;
  %844 = cast(%var_6247, dtype="float64") /* ty=Tensor[(6, 7, 14), float64] */;
  %845 = shape_of(%843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(%843, dtype="float64") /* ty=Tensor[(6, 7, 14), float64] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %848 = cast(meta[relay.Constant][51] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
  %849 = cast(meta[relay.Constant][52] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %850 = reshape(%848, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), float32] */;
  %851 = reshape(%849, newshape=[336]) /* ty=Tensor[(336), uint16] */;
  %852 = @func_1464(%850, %851) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(8, 16, 2), float64], Tensor[(4, 64), float64], Tensor[(7, 2, 4), bool]) */;
  %853 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
  %854 = @func_2792() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %855 = cast(%var_6247, dtype="float32") /* ty=Tensor[(6, 7, 14), float32] */;
  %856 = mod(%846, %847) /* ty=Tensor[(6, 7, 14), float64] */;
  %857 = %852.1;
  %858 = %853.0;
  %859 = %854.0;
  %860 = cos(%855) /* ty=Tensor[(6, 7, 14), float32] */;
  (%856, %857, meta[relay.Constant][51] /* ty=Tensor[(56), float32] */, meta[relay.Constant][52] /* ty=Tensor[(336), uint16] */, %858, %859, %860)
}

def @func_2755() -> (Tensor[(6, 7, 14), float32],) {
  %861 = cast(meta[relay.Constant][53] /* ty=Tensor[(6, 7, 14), float64] */, dtype="float64") /* ty=Tensor[(6, 7, 14), float64] */;
  %862 = atan(%861) /* ty=Tensor[(6, 7, 14), float64] */;
  %863 = cast(meta[relay.Constant][53] /* ty=Tensor[(6, 7, 14), float64] */, dtype="int16") /* ty=Tensor[(6, 7, 14), int16] */;
  %864 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%862, dtype="int16") /* ty=Tensor[(6, 7, 14), int16] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %867 = right_shift(%865, %866) /* ty=Tensor[(6, 7, 14), int16] */;
  %868 = cast(%862, dtype="float32") /* ty=Tensor[(6, 7, 14), float32] */;
  %869 = shape_of(%867, dtype="int32") /* ty=Tensor[(3), int32] */;
  %870 = cast(%867, dtype="float32") /* ty=Tensor[(6, 7, 14), float32] */;
  %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %872 = multiply(%870, %871) /* ty=Tensor[(6, 7, 14), float32] */;
  (%872,)
}

def @func_9199() -> Tensor[(3, 16), float32] {
  %873 = @func_6976() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %873.0
}

def @func_4844() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %874 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  %875 = @func_4623() /* ty=Tensor[(3, 16), float32] */;
  (%874, %875)
}

def @func_13676() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(14, 4, 6), float32]) {
  %876 = @func_8832() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(2, 168), bool], Tensor[(6, 7, 14), float32], Tensor[(9, 9, 4), float32], Tensor[(324), float32]) */;
  %877 = %876.1;
  %878 = cast(%877, dtype="bool") /* ty=Tensor[(14, 4, 6), bool] */;
  %879 = reshape(%878, newshape=[336]) /* ty=Tensor[(336), bool] */;
  %880 = @func_3905(%879) /* ty=(Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %881 = cast(%877, dtype="float32") /* ty=Tensor[(14, 4, 6), float32] */;
  %882 = sigmoid(%881) /* ty=Tensor[(14, 4, 6), float32] */;
  %883 = cast(%882, dtype="float64") /* ty=Tensor[(14, 4, 6), float64] */;
  %884 = log10(%883) /* ty=Tensor[(14, 4, 6), float64] */;
  %885 = cast(%884, dtype="float32") /* ty=Tensor[(14, 4, 6), float32] */;
  %886 = @func_12879() /* ty=Tensor[(3, 16), float32] */;
  %887 = %880.0;
  %888 = sqrt(%885) /* ty=Tensor[(14, 4, 6), float32] */;
  (%886, %887, %888)
}

def @func_1635(%var_1623: Tensor[(11, 1, 10), uint8], %var_1624: Tensor[(11, 2, 10), uint8]) -> (Tensor[(11, 2, 10), uint8], Tensor[(11, 2, 10), bool]) {
  %889 = cast(%var_1623, dtype="uint8") /* ty=Tensor[(11, 1, 10), uint8] */;
  %890 = cast(%var_1624, dtype="uint8") /* ty=Tensor[(11, 2, 10), uint8] */;
  %891 = cast(%var_1624, dtype="bool") /* ty=Tensor[(11, 2, 10), bool] */;
  %892 = cast(%var_1623, dtype="bool") /* ty=Tensor[(11, 1, 10), bool] */;
  %893 = add(%889, %890) /* ty=Tensor[(11, 2, 10), uint8] */;
  %894 = less(%891, %892) /* ty=Tensor[(11, 2, 10), bool] */;
  (%893, %894)
}

def @func_11664() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %895 = @func_2536() /* ty=(Tensor[(3, 16), float32],) */;
  %896 = @func_8025() /* ty=(Tensor[(3, 16), float32],) */;
  %897 = %895.0;
  %898 = %896.0;
  (%897, %898)
}

def @func_6933() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %899 = @func_2587() /* ty=(Tensor[(3, 16), float32],) */;
  %900 = @func_4543() /* ty=(Tensor[(3, 16), float32],) */;
  %901 = %899.0;
  %902 = @func_5171() /* ty=Tensor[(3, 16), float32] */;
  %903 = %900.0;
  (%901, %902, %903)
}

def @func_7958() -> (Tensor[(3, 16), float32],) {
  %904 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  (%904,)
}

def @func_15750(%var_15733: Tensor[(2, 5, 11), bool]) -> (Tensor[(2, 5, 11), float64], Tensor[(2, 5, 11), float64], Tensor[(3, 16), float32]) {
  %905 = cast(meta[relay.Constant][54] /* ty=Tensor[(2, 5, 11), float32] */, dtype="float64") /* ty=Tensor[(2, 5, 11), float64] */;
  %906 = cast(meta[relay.Constant][54] /* ty=Tensor[(2, 5, 11), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 11), float32] */;
  %907 = log(%906) /* ty=Tensor[(2, 5, 11), float32] */;
  %908 = cast(meta[relay.Constant][54] /* ty=Tensor[(2, 5, 11), float32] */, dtype="bool") /* ty=Tensor[(2, 5, 11), bool] */;
  %909 = shape_of(%907, dtype="int32") /* ty=Tensor[(3), int32] */;
  %910 = cast(%907, dtype="bool") /* ty=Tensor[(2, 5, 11), bool] */;
  %911 = dyn.reshape(%908, %909, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %912 = not_equal(%910, %911) /* ty=Tensor[(2, 5, 11), bool] */;
  %913 = cast(%var_15733, dtype="float64") /* ty=Tensor[(2, 5, 11), float64] */;
  %914 = shape_of(%912, dtype="int32") /* ty=Tensor[(3), int32] */;
  %915 = cast(%912, dtype="float64") /* ty=Tensor[(2, 5, 11), float64] */;
  %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %917 = @func_11019() /* ty=(Tensor[(3, 16), float32],) */;
  %918 = acos(%905) /* ty=Tensor[(2, 5, 11), float64] */;
  %919 = floor_mod(%915, %916) /* ty=Tensor[(2, 5, 11), float64] */;
  %920 = %917.0;
  (%918, %919, %920)
}

def @func_8510() -> (Tensor[(3, 16), float32],) {
  %921 = @func_4660() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) */;
  %922 = %921.0;
  (%922,)
}

def @func_6004() -> Tensor[(3, 16), float32] {
  %923 = @func_2652() /* ty=(Tensor[(3, 16), float32],) */;
  %923.0
}

def @func_7565() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %924 = @func_7346() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %925 = @func_4237() /* ty=(Tensor[(3, 16), float32],) */;
  %926 = %924.1;
  %927 = %925.0;
  %928 = @func_5661() /* ty=Tensor[(3, 16), float32] */;
  (%926, %927, %928)
}

def @func_13256() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %929 = @func_4254() /* ty=(Tensor[(3, 16), float32],) */;
  %930 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
  %931 = %929.0;
  %932 = %930.0;
  (%931, %932)
}

def @func_15271() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %933 = @func_10476() /* ty=(Tensor[(3, 16), float32],) */;
  %934 = @func_10898() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %935 = @func_7741() /* ty=(Tensor[(3, 16), float32],) */;
  %936 = %933.0;
  %937 = %934.0;
  %938 = %935.0;
  (%936, %937, %938)
}

def @func_12799() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %939 = @func_2507() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %940 = @func_7107() /* ty=(Tensor[(3, 16), float32],) */;
  %941 = %939.0;
  %942 = %940.0;
  (%941, %942)
}

def @func_16031(%var_16028: Tensor[(324), float32]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 8, 15), float64], Tensor[(1680), float64], Tensor[(9, 9, 4), float32], Tensor[(324), float32]) {
  %943 = @func_13099() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %944 = cast(meta[relay.Constant][55] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %945 = reshape(%944, newshape=[14, 8, 15]) /* ty=Tensor[(14, 8, 15), float64] */;
  %946 = cast(%var_16028, dtype="float32") /* ty=Tensor[(324), float32] */;
  %947 = reshape(%946, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
  %948 = @func_5905() /* ty=Tensor[(3, 16), float32] */;
  %949 = %943.1;
  %950 = @func_14453(%945) /* ty=Tensor[(14, 8, 15), float64] */;
  %951 = @func_5358(%947) /* ty=Tensor[(9, 9, 4), float32] */;
  (%948, %949, %950, meta[relay.Constant][55] /* ty=Tensor[(1680), float64] */, %951, %var_16028)
}

def @func_887(%var_879: Tensor[(5, 7, 4), uint64], %var_880: Tensor[(5, 7, 4), uint64], %var_885: Tensor[(256), float64]) -> (Tensor[(5, 7, 4), bool], Tensor[(8, 16, 2), float64], Tensor[(256), float64]) {
  %952 = cast(%var_880, dtype="bool") /* ty=Tensor[(5, 7, 4), bool] */;
  %953 = shape_of(%var_879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %954 = cast(%var_879, dtype="bool") /* ty=Tensor[(5, 7, 4), bool] */;
  %955 = dyn.reshape(%952, %953, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %956 = cast(%var_885, dtype="float64") /* ty=Tensor[(256), float64] */;
  %957 = reshape(%956, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), float64] */;
  %958 = greater_equal(%954, %955) /* ty=Tensor[(5, 7, 4), bool] */;
  %959 = @func_436(%957) /* ty=Tensor[(8, 16, 2), float64] */;
  (%958, %959, %var_885)
}

def @func_15946() -> (Tensor[(3, 16), float32],) {
  %960 = @func_7078() /* ty=(Tensor[(3, 16), float32],) */;
  %961 = %960.0;
  (%961,)
}

def @func_7259() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %962 = @func_5814() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %963 = @func_4690() /* ty=(Tensor[(3, 16), float32],) */;
  %964 = %962.0;
  %965 = %963.0;
  (%964, %965)
}

def @func_10586() -> (Tensor[(3, 16), float32],) {
  %966 = @func_4660() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) */;
  %967 = %966.0;
  (%967,)
}

def @func_2480() -> (Tensor[(3, 16), float32],) {
  %968 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  (%968,)
}

def @func_5582() -> (Tensor[(3, 16), float32],) {
  %969 = @func_4660() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) */;
  %970 = %969.0;
  (%970,)
}

def @func_12964() -> (Tensor[(3, 16), float32],) {
  %971 = @func_8832() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(2, 168), bool], Tensor[(6, 7, 14), float32], Tensor[(9, 9, 4), float32], Tensor[(324), float32]) */;
  %972 = %971.0;
  (%972,)
}

def @func_12735(%var_12725: Tensor[(5, 16, 1), float64], %var_12726: Tensor[(5, 16, 1), float64]) -> Tensor[(5, 16, ?), float64] {
  %973 = cast(%var_12726, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
  %974 = shape_of(%var_12725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %975 = cast(%var_12725, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
  %976 = dyn.reshape(%973, %974, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%975, %976) /* ty=Tensor[(5, 16, ?), float64] */
}

def @func_3642() -> (Tensor[(3, 16), float32],) {
  %977 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
  %978 = %977.0;
  (%978,)
}

def @func_14630() -> Tensor[(3, 16), float32] {
  @func_12879() /* ty=Tensor[(3, 16), float32] */
}

def @func_9243() -> (Tensor[(3, 16), float32],) {
  %979 = @func_7530() /* ty=Tensor[(3, 16), float32] */;
  (%979,)
}

def @func_13537(%var_13520: Tensor[(10, 6, 2), uint8], %var_13521: Tensor[(10, 6, 2), uint8]) -> (Tensor[(10, 6, 2), bool],) {
  %980 = cast(%var_13521, dtype="bool") /* ty=Tensor[(10, 6, 2), bool] */;
  %981 = shape_of(%var_13520, dtype="int32") /* ty=Tensor[(3), int32] */;
  %982 = cast(%var_13520, dtype="bool") /* ty=Tensor[(10, 6, 2), bool] */;
  %983 = dyn.reshape(%980, %981, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %984 = greater(%982, %983) /* ty=Tensor[(10, 6, 2), bool] */;
  (%984,)
}

def @func_4789() -> (Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32]) {
  %985 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
  %986 = @func_4424() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(336), uint16], Tensor[(900), float64]) */;
  %987 = @func_4009() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %988 = %985.0;
  %989 = %986.2;
  %990 = %987.2;
  (%988, %989, %990)
}

def @func_9070(%var_8941: Tensor[(7, 16, 5), float32], %var_8942: Tensor[(7, 16, 5), float32], %var_8962: Tensor[(336), uint16], %var_9025: Tensor[(144), int8]) -> (Tensor[(7, 16, 5), bool], Tensor[(3, 16), float32], Tensor[(336), uint16], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(56), float32], Tensor[(144), int8], Tensor[(56), float32], Tensor[(3, 16), float32], Tensor[(7, 16, 5), float32], Tensor[(3, 16), float32]) {
  %991 = cast(%var_8942, dtype="bool") /* ty=Tensor[(7, 16, 5), bool] */;
  %992 = shape_of(%var_8941, dtype="int32") /* ty=Tensor[(3), int32] */;
  %993 = cast(%var_8941, dtype="bool") /* ty=Tensor[(7, 16, 5), bool] */;
  %994 = dyn.reshape(%991, %992, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %995 = cast(%var_8962, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %996 = reshape(%995, newshape=[336]) /* ty=Tensor[(336), uint16] */;
  %997 = @func_3256(%996) /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(900), float64], Tensor[(336), uint16]) */;
  %998 = @func_4844() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %999 = @func_7916() /* ty=(Tensor[(3, 16), float32],) */;
  %1000 = %997.4;
  %1001 = cast(%1000, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %1002 = cast(%var_9025, dtype="int8") /* ty=Tensor[(144), int8] */;
  %1003 = cast(meta[relay.Constant][56] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
  %1004 = reshape(%1001, newshape=[336]) /* ty=Tensor[(336), uint16] */;
  %1005 = reshape(%1002, newshape=[144]) /* ty=Tensor[(144), int8] */;
  %1006 = reshape(%1003, newshape=[56]) /* ty=Tensor[(56), float32] */;
  %1007 = @func_3437(%1004, %1005, %1006) /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(56), float32], int8, Tensor[(144), int8], Tensor[(56), float32]) */;
  %1008 = cast(%var_8941, dtype="float64") /* ty=Tensor[(7, 16, 5), float64] */;
  %1009 = sigmoid(%1008) /* ty=Tensor[(7, 16, 5), float64] */;
  %1010 = cast(%1009, dtype="float32") /* ty=Tensor[(7, 16, 5), float32] */;
  %1011 = @func_6851() /* ty=(Tensor[(3, 16), float32],) */;
  %1012 = greater_equal(%993, %994) /* ty=Tensor[(7, 16, 5), bool] */;
  %1013 = @func_6733() /* ty=Tensor[(3, 16), float32] */;
  %1014 = %998.1;
  %1015 = %999.0;
  %1016 = %1007.7;
  %1017 = @func_7623() /* ty=Tensor[(3, 16), float32] */;
  %1018 = acosh(%1010) /* ty=Tensor[(7, 16, 5), float32] */;
  %1019 = %1011.0;
  (%1012, %1013, %1000, %var_8962, %1014, %1015, %1016, %var_9025, meta[relay.Constant][56] /* ty=Tensor[(56), float32] */, %1017, %1018, %1019)
}

def @func_15901() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1020 = @func_15445() /* ty=(Tensor[(3, 16), float32], Tensor[(96), uint16], Tensor[(3, 16), float32], Tensor[(4, 8, 3), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1021 = @func_10476() /* ty=(Tensor[(3, 16), float32],) */;
  %1022 = @func_12142() /* ty=(Tensor[(3, 16), float32],) */;
  %1023 = %1020.2;
  %1024 = %1021.0;
  %1025 = %1022.0;
  %1026 = @func_5715() /* ty=Tensor[(3, 16), float32] */;
  (%1023, %1024, %1025, %1026)
}

def @func_9411() -> Tensor[(3, 16), float32] {
  %1027 = @func_7775() /* ty=(Tensor[(3, 16), float32],) */;
  %1027.0
}

def @func_7709() -> (Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1028 = @func_2536() /* ty=(Tensor[(3, 16), float32],) */;
  %1029 = @func_4424() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(336), uint16], Tensor[(900), float64]) */;
  %1030 = @func_7035() /* ty=(Tensor[(3, 16), float32],) */;
  %1031 = @func_5311() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1032 = %1028.0;
  %1033 = %1029.2;
  %1034 = %1030.0;
  %1035 = %1031.2;
  (%1032, %1033, %1034, %1035)
}

def @func_15529() -> (Tensor[(3, 16), float32],) {
  %1036 = @func_7355() /* ty=Tensor[(3, 16), float32] */;
  (%1036,)
}

def @func_7623() -> Tensor[(3, 16), float32] {
  %1037 = @func_2829() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) */;
  %1037.0
}

def @func_436(%var_426: Tensor[(8, 16, 2), float64]) -> Tensor[(8, 16, 2), float64] {
  %1038 = cast(%var_426, dtype="float64") /* ty=Tensor[(8, 16, 2), float64] */;
  erf(%1038) /* ty=Tensor[(8, 16, 2), float64] */
}

def @func_12879() -> Tensor[(3, 16), float32] {
  %1039 = @func_4009() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1039.1
}

def @func_9757() -> (Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(6, 6, 2), uint64], Tensor[(12), int32], Tensor[(72), int32]) {
  %1040 = @func_6559() /* ty=(Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32]) */;
  %1041 = @func_2652() /* ty=(Tensor[(3, 16), float32],) */;
  %1042 = cast(meta[relay.Constant][57] /* ty=Tensor[(12), int32] */, dtype="int32") /* ty=Tensor[(12), int32] */;
  %1043 = cast(meta[relay.Constant][58] /* ty=Tensor[(72), int32] */, dtype="int32") /* ty=Tensor[(72), int32] */;
  %1044 = reshape(%1042, newshape=[6, 1, 2]) /* ty=Tensor[(6, 1, 2), int32] */;
  %1045 = reshape(%1043, newshape=[6, 6, 2]) /* ty=Tensor[(6, 6, 2), int32] */;
  %1046 = %1040.0;
  %1047 = %1041.0;
  %1048 = @func_7821() /* ty=Tensor[(3, 16), float32] */;
  %1049 = @func_4141(%1044, %1045) /* ty=Tensor[(6, 6, 2), uint64] */;
  (%1046, %1047, %1048, %1049, meta[relay.Constant][57] /* ty=Tensor[(12), int32] */, meta[relay.Constant][58] /* ty=Tensor[(72), int32] */)
}

def @func_14783() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1050 = @func_10586() /* ty=(Tensor[(3, 16), float32],) */;
  %1051 = @func_5518() /* ty=(Tensor[(3, 16), float32],) */;
  %1052 = @func_5715() /* ty=Tensor[(3, 16), float32] */;
  %1053 = %1050.0;
  %1054 = %1051.0;
  (%1052, %1053, %1054)
}

def @func_15029() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1055 = @func_10021() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1056 = @func_2652() /* ty=(Tensor[(3, 16), float32],) */;
  %1057 = %1055.1;
  %1058 = %1056.0;
  (%1057, %1058)
}

def @func_15789() -> Tensor[(3, 16), float32] {
  @func_6401() /* ty=Tensor[(3, 16), float32] */
}

def @func_10527() -> Tensor[(3, 16), float32] {
  %1059 = @func_4690() /* ty=(Tensor[(3, 16), float32],) */;
  %1059.0
}

def @func_8084() -> (Tensor[(3, 16), float32],) {
  %1060 = @func_7259() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1061 = %1060.1;
  (%1061,)
}

def @func_3551(%var_3539: Tensor[(14, 4, 6), bool]) -> (Tensor[(14, 4, 6), float32],) {
  %1062 = @func_2829() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) */;
  %1063 = %1062.1;
  %1064 = cast(%var_3539, dtype="float32") /* ty=Tensor[(14, 4, 6), float32] */;
  %1065 = shape_of(%1063, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1066 = cast(%1063, dtype="float32") /* ty=Tensor[(14, 4, 6), float32] */;
  %1067 = dyn.reshape(%1064, %1065, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1068 = mod(%1066, %1067) /* ty=Tensor[(14, 4, 6), float32] */;
  (%1068,)
}

def @func_4186(%var_4154: Tensor[(1, 7, 1), int32], %var_4173: Tensor[(1, 7, 4), int32]) -> Tensor[(1, 7, 4), uint32] {
  %1069 = cast(-3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %1070 = cast(%var_4154, dtype="int32") /* ty=Tensor[(1, 7, 1), int32] */;
  %1071 = maximum(%1069, %1070) /* ty=Tensor[(1, 7, 1), int32] */;
  %1072 = cast(%1071, dtype="uint32") /* ty=Tensor[(1, 7, 1), uint32] */;
  %1073 = cast(%var_4173, dtype="uint32") /* ty=Tensor[(1, 7, 4), uint32] */;
  subtract(%1072, %1073) /* ty=Tensor[(1, 7, 4), uint32] */
}

def @func_7126() -> (Tensor[(3, 16), float32], Tensor[(8, 16, 2), float64], Tensor[(256), float64]) {
  %1074 = cast(meta[relay.Constant][59] /* ty=Tensor[(256), float64] */, dtype="float64") /* ty=Tensor[(256), float64] */;
  %1075 = reshape(%1074, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), float64] */;
  %1076 = @func_4362() /* ty=Tensor[(3, 16), float32] */;
  %1077 = @func_436(%1075) /* ty=Tensor[(8, 16, 2), float64] */;
  (%1076, %1077, meta[relay.Constant][59] /* ty=Tensor[(256), float64] */)
}

def @func_13746() -> (Tensor[(2, 10, 3), float64],) {
  %1078 = @func_12415() /* ty=(Tensor[(3, 16), float32], Tensor[(2, 10, 3), float64], Tensor[(60), float64]) */;
  %1079 = %1078.1;
  (%1079,)
}

def @func_12285() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1080 = @func_4237() /* ty=(Tensor[(3, 16), float32],) */;
  %1081 = @func_7095() /* ty=(Tensor[(3, 16), float32],) */;
  %1082 = %1080.0;
  %1083 = %1081.0;
  (%1082, %1083)
}

def @func_8363(%var_8343: Tensor[(6, 7, 14), float32]) -> Tensor[(6, 7, 14), bool] {
  %1084 = @func_6354() /* ty=Tensor[(6, 7, 14), float32] */;
  %1085 = cast(%var_8343, dtype="bool") /* ty=Tensor[(6, 7, 14), bool] */;
  %1086 = shape_of(%1084, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1087 = cast(%1084, dtype="bool") /* ty=Tensor[(6, 7, 14), bool] */;
  %1088 = dyn.reshape(%1085, %1086, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%1087, %1088) /* ty=Tensor[(6, 7, 14), bool] */
}

def @func_11890() -> (Tensor[(3, 16), float32],) {
  %1089 = @func_11812() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1090 = %1089.1;
  (%1090,)
}

def @func_3464() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1091 = @func_2719() /* ty=(Tensor[(3, 16), float32],) */;
  %1092 = @func_2652() /* ty=(Tensor[(3, 16), float32],) */;
  %1093 = %1091.0;
  %1094 = %1092.0;
  (%1093, %1094)
}

def @func_1198(%var_1159: Tensor[(12, 4, 1), float64], %var_1180: Tensor[(256), float64]) -> (Tensor[(12, 4, 1), float64], Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(14, 4, 6), bool], Tensor[(8, 16, 2), float64], Tensor[(256), float64], Tensor[(14, 4, 6), bool]) {
  %1095 = cast(%var_1159, dtype="float64") /* ty=Tensor[(12, 4, 1), float64] */;
  %1096 = cast(meta[relay.Constant][60] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %1097 = cast(meta[relay.Constant][60] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %1098 = reshape(%1096, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %1099 = reshape(%1097, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %1100 = @func_489(%1098, %1099) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
  %1101 = cast(meta[relay.Constant][60] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %1102 = cast(meta[relay.Constant][60] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %1103 = reshape(%1101, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %1104 = reshape(%1102, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %1105 = @func_489(%1103, %1104) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
  %1106 = cast(%var_1180, dtype="float64") /* ty=Tensor[(256), float64] */;
  %1107 = reshape(%1106, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), float64] */;
  %1108 = %1100.1;
  %1109 = cast(%1108, dtype="uint16") /* ty=Tensor[(14, 4, 6), uint16] */;
  %1110 = %1105.1;
  %1111 = cast(%1110, dtype="uint16") /* ty=Tensor[(14, 4, 6), uint16] */;
  %1112 = reshape(%1109, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %1113 = reshape(%1111, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %1114 = @func_489(%1112, %1113) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
  %1115 = sigmoid(%1095) /* ty=Tensor[(12, 4, 1), float64] */;
  %1116 = @func_436(%1107) /* ty=Tensor[(8, 16, 2), float64] */;
  %1117 = %1114.1;
  (%1115, %1108, meta[relay.Constant][60] /* ty=Tensor[(336), uint16] */, %1110, %1116, %var_1180, %1117)
}

def @func_11536() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(144), int8], Tensor[(88), uint32]) {
  %1118 = @func_4543() /* ty=(Tensor[(3, 16), float32],) */;
  %1119 = @func_4959() /* ty=(Tensor[(14, 4, 6), float32], Tensor[(8, 10, 4), float64]) */;
  %1120 = cast(meta[relay.Constant][61] /* ty=Tensor[(88), uint32] */, dtype="uint32") /* ty=Tensor[(88), uint32] */;
  %1121 = reshape(%1120, newshape=[88]) /* ty=Tensor[(88), uint32] */;
  %1122 = @func_11309(%1121) /* ty=(Tensor[(6, 7, 14), float32], Tensor[(3, 16), float32], Tensor[(14, 4), float32], Tensor[(56), float32], Tensor[(144), int8], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(88), uint32]) */;
  %1123 = %1118.0;
  %1124 = %1119.0;
  %1125 = %1122.4;
  (%1123, %1124, %1125, meta[relay.Constant][61] /* ty=Tensor[(88), uint32] */)
}

def @func_6773(%var_6770: Tensor[(336), bool]) -> (Tensor[(3, 16), float32], Tensor[(9, 9, 4), float32], Tensor[(324), float32], Tensor[(336), bool], Tensor[(336), bool]) {
  %1126 = cast(meta[relay.Constant][62] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %1127 = reshape(%1126, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
  %1128 = cast(%var_6770, dtype="bool") /* ty=Tensor[(336), bool] */;
  %1129 = reshape(%1128, newshape=[336]) /* ty=Tensor[(336), bool] */;
  %1130 = @func_3905(%1129) /* ty=(Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1131 = @func_5661() /* ty=Tensor[(3, 16), float32] */;
  %1132 = @func_5358(%1127) /* ty=Tensor[(9, 9, 4), float32] */;
  %1133 = %1130.1;
  (%1131, %1132, meta[relay.Constant][62] /* ty=Tensor[(324), float32] */, %1133, %var_6770)
}

def @func_13212() -> (Tensor[(3, 16), float32],) {
  %1134 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  (%1134,)
}

def @func_2792() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1135 = @func_2507() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1136 = @func_2587() /* ty=(Tensor[(3, 16), float32],) */;
  %1137 = @func_2507() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1138 = %1135.1;
  %1139 = %1136.0;
  %1140 = %1137.1;
  (%1138, %1139, %1140)
}

def @func_12524() -> Tensor[(3, 16), float32] {
  %1141 = @func_8025() /* ty=(Tensor[(3, 16), float32],) */;
  %1141.0
}

def @func_7821() -> Tensor[(3, 16), float32] {
  @func_5661() /* ty=Tensor[(3, 16), float32] */
}

def @func_849(%var_845: Tensor[(15, 15, 11), float32]) -> (Tensor[(15, 15, 11), float32],) {
  %1142 = cast(%var_845, dtype="float32") /* ty=Tensor[(15, 15, 11), float32] */;
  %1143 = atanh(%1142) /* ty=Tensor[(15, 15, 11), float32] */;
  (%1143,)
}

def @func_4323() -> Tensor[(3, 16), float32] {
  %1144 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
  %1144.0
}

def @func_3209() -> (Tensor[(3, 16), float32],) {
  %1145 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
  %1146 = %1145.0;
  (%1146,)
}

def @func_9359() -> Tensor[(3, 16), float32] {
  %1147 = @func_2587() /* ty=(Tensor[(3, 16), float32],) */;
  %1147.0
}

def @func_12937(%var_12902: Tensor[(14, 4, 6), float32], %var_12911: Tensor[(140), uint64]) -> (Tensor[(3, 16), float32], Tensor[(4, 84), bool], Tensor[(14, 4, 6), int16], Tensor[(140), uint64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(3, 16), float32]) {
  %1148 = cast(meta[relay.Constant][63] /* ty=Tensor[(4, 84), bool] */, dtype="bool") /* ty=Tensor[(4, 84), bool] */;
  %1149 = reshape(%1148, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), bool] */;
  %1150 = @func_3551(%1149) /* ty=(Tensor[(14, 4, 6), float32],) */;
  %1151 = %1150.0;
  %1152 = cast(%var_12902, dtype="int16") /* ty=Tensor[(14, 4, 6), int16] */;
  %1153 = shape_of(%1151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1154 = cast(%1151, dtype="int16") /* ty=Tensor[(14, 4, 6), int16] */;
  %1155 = dyn.reshape(%1152, %1153, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1156 = cast(%var_12911, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %1157 = cast(meta[relay.Constant][64] /* ty=Tensor[(256), float64] */, dtype="float64") /* ty=Tensor[(256), float64] */;
  %1158 = reshape(%1156, newshape=[140]) /* ty=Tensor[(140), uint64] */;
  %1159 = reshape(%1157, newshape=[256]) /* ty=Tensor[(256), float64] */;
  %1160 = @func_1934(%1158, %1159) /* ty=(Tensor[(15, 15, 11), float32], Tensor[(5, 495), float32], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(13, 4, 11), float32]) */;
  %1161 = @func_10898() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1162 = @func_6004() /* ty=Tensor[(3, 16), float32] */;
  %1163 = multiply(%1154, %1155) /* ty=Tensor[(14, 4, 6), int16] */;
  %1164 = %1160.3;
  %1165 = %1161.2;
  (%1162, meta[relay.Constant][63] /* ty=Tensor[(4, 84), bool] */, %1163, %1164, %var_12911, meta[relay.Constant][64] /* ty=Tensor[(256), float64] */, %1165)
}

def @func_4555() -> Tensor[(3, 16), float32] {
  @func_3836() /* ty=Tensor[(3, 16), float32] */
}

def @func_5905() -> Tensor[(3, 16), float32] {
  %1166 = @func_4844() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1166.1
}

def @func_15773() -> Tensor[(3, 16), float32] {
  %1167 = @func_2719() /* ty=(Tensor[(3, 16), float32],) */;
  %1167.0
}

def @func_4362() -> Tensor[(3, 16), float32] {
  %1168 = @func_4009() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1168.0
}

def @func_4690() -> (Tensor[(3, 16), float32],) {
  %1169 = @func_2536() /* ty=(Tensor[(3, 16), float32],) */;
  %1170 = %1169.0;
  (%1170,)
}

def @func_3094(%var_3057: int8, %var_3058: Tensor[(144), int8], %var_3059: Tensor[(56), float32], %var_3060: Tensor[(336), uint16]) -> (Tensor[(3, 16), float32], Tensor[(8, 9, 2), int8], int8, Tensor[(144), int8], Tensor[(56), float32], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) {
  %1171 = @func_2719() /* ty=(Tensor[(3, 16), float32],) */;
  %1172 = cast(%var_3057, dtype="int8") /* ty=int8 */;
  %1173 = cast(%var_3058, dtype="int8") /* ty=Tensor[(144), int8] */;
  %1174 = cast(%var_3059, dtype="float32") /* ty=Tensor[(56), float32] */;
  %1175 = cast(%var_3060, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %1176 = reshape(%1172, newshape=[]) /* ty=int8 */;
  %1177 = reshape(%1173, newshape=[8, 9, 2]) /* ty=Tensor[(8, 9, 2), int8] */;
  %1178 = reshape(%1174, newshape=[56]) /* ty=Tensor[(56), float32] */;
  %1179 = reshape(%1175, newshape=[336]) /* ty=Tensor[(336), uint16] */;
  %1180 = @func_1710(%1176, %1177, %1178, %1179) /* ty=(Tensor[(8, 9, 2), int8], Tensor[(7, 2, 4), bool], Tensor[(56), float32], Tensor[(336), uint16]) */;
  %1181 = @func_2507() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1182 = @func_2829() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) */;
  %1183 = %1171.0;
  %1184 = %1180.0;
  %1185 = %1181.0;
  %1186 = %1182.1;
  (%1183, %1184, %var_3057, %var_3058, %var_3059, %var_3060, %1185, %1186)
}

def @func_13173() -> Tensor[(3, 16), float32] {
  %1187 = @func_8656() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1187.1
}

def @func_1464(%var_1441: Tensor[(7, 2, 4), float32], %var_1446: Tensor[(336), uint16]) -> (Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(8, 16, 2), float64], Tensor[(4, 64), float64], Tensor[(7, 2, 4), bool]) {
  %1188 = cast(%var_1446, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %1189 = cast(%var_1446, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %1190 = reshape(%1188, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %1191 = reshape(%1189, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %1192 = @func_489(%1190, %1191) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
  %1193 = cast(meta[relay.Constant][65] /* ty=Tensor[(4, 64), float64] */, dtype="float64") /* ty=Tensor[(4, 64), float64] */;
  %1194 = reshape(%1193, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), float64] */;
  %1195 = cast(%var_1441, dtype="float32") /* ty=Tensor[(7, 2, 4), float32] */;
  %1196 = shape_of(meta[relay.Constant][66] /* ty=Tensor[(7, 2, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1197 = cast(meta[relay.Constant][66] /* ty=Tensor[(7, 2, 4), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 4), float32] */;
  %1198 = dyn.reshape(%1195, %1196, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1199 = subtract(%1197, %1198) /* ty=Tensor[(7, 2, 4), float32] */;
  %1200 = cast(%1199, dtype="bool") /* ty=Tensor[(7, 2, 4), bool] */;
  %1201 = shape_of(%var_1441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1202 = cast(%var_1441, dtype="bool") /* ty=Tensor[(7, 2, 4), bool] */;
  %1203 = dyn.reshape(%1200, %1201, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1204 = %1192.0;
  %1205 = @func_436(%1194) /* ty=Tensor[(8, 16, 2), float64] */;
  %1206 = logical_and(%1202, %1203) /* ty=Tensor[(7, 2, 4), bool] */;
  (%1204, %var_1446, %1205, meta[relay.Constant][65] /* ty=Tensor[(4, 64), float64] */, %1206)
}

def @func_8656() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1207 = @func_8266() /* ty=(Tensor[(3, 16), float32],) */;
  %1208 = @func_6604() /* ty=Tensor[(3, 16), float32] */;
  %1209 = %1207.0;
  (%1208, %1209)
}

def @func_12119(%var_12113: Tensor[(15, 15, 11), float64], %var_12114: Tensor[(15, 15, 11), float64]) -> (Tensor[(15, 15, 11), float64],) {
  %1210 = cast(%var_12114, dtype="float64") /* ty=Tensor[(15, 15, 11), float64] */;
  %1211 = shape_of(%var_12113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1212 = cast(%var_12113, dtype="float64") /* ty=Tensor[(15, 15, 11), float64] */;
  %1213 = dyn.reshape(%1210, %1211, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1214 = multiply(%1212, %1213) /* ty=Tensor[(15, 15, 11), float64] */;
  (%1214,)
}

def @func_6667() -> (Tensor[(3, 16), float32],) {
  %1215 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
  %1216 = %1215.0;
  (%1216,)
}

def @func_3493() -> Tensor[(3, 16), float32] {
  %1217 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
  %1217.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8016() -> Tensor[(3, 16), float32] {
  %0 = @func_4237() /* ty=(Tensor[(3, 16), float32],) */;
  %0.0
}

def @func_4424() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(336), uint16], Tensor[(900), float64]) {
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %2 = reshape(%1, newshape=[336]) /* ty=Tensor[(336), bool] */;
  %3 = @func_3905(%2) /* ty=(Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(336), bool] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %6 = reshape(%4, newshape=[4, 15, 15]) /* ty=Tensor[(4, 15, 15), float64] */;
  %7 = reshape(%5, newshape=[336]) /* ty=Tensor[(336), uint16] */;
  %8 = @func_2211(%6, %7) /* ty=(Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(4, 15, 15), float64], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(14, 4, 6), uint16]) */;
  %9 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  %10 = %3.2;
  %11 = %8.1;
  (%9, %10, meta[relay.Constant][0] /* ty=Tensor[(336), bool] */, %11, meta[relay.Constant][1] /* ty=Tensor[(900), float64] */)
}

def @func_7710() -> (Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %20 = fn () -> (Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %12 = @func_2536() /* ty=(Tensor[(3, 16), float32],) */;
    %13 = @func_4424() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(336), uint16], Tensor[(900), float64]) */;
    %14 = @func_7035() /* ty=(Tensor[(3, 16), float32],) */;
    %15 = @func_5311() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %16 = %12.0;
    %17 = %13.2;
    %18 = %14.0;
    %19 = %15.2;
    (%16, %17, %18, %19)
  };
  %20() /* ty=(Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_7261() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_7259() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_2292() -> Tensor[(3, 16), float32] {
  @func_2290() /* ty=Tensor[(3, 16), float32] */
}

def @func_2803() -> (Tensor[(3, 16), float32],) {
  %21 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  (%21,)
}

def @func_10022() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %24 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %22 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
    %23 = @func_9199() /* ty=Tensor[(3, 16), float32] */;
    (%22, %23)
  };
  %24() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_10179(%var_10121: Tensor[(14, 11, 15), int32], %var_10122: Tensor[(14, 11, 15), int32], %var_10167: Tensor[(256), float64]) -> (Tensor[(14, 11, 15), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(256), float64], Tensor[(140), uint64], Tensor[(256), float64]) {
  %25 = cast(%var_10122, dtype="bool") /* ty=Tensor[(14, 11, 15), bool] */;
  %26 = shape_of(%var_10121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%var_10121, dtype="bool") /* ty=Tensor[(14, 11, 15), bool] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %29 = not_equal(%27, %28) /* ty=Tensor[(14, 11, 15), bool] */;
  %30 = cast(%29, dtype="float32") /* ty=Tensor[(14, 11, 15), float32] */;
  %31 = shape_of(%var_10122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%var_10122, dtype="float32") /* ty=Tensor[(14, 11, 15), float32] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %34 = @func_9901() /* ty=(Tensor[(3, 16), float32],) */;
  %35 = @func_6933() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(140), uint64] */, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %37 = cast(%var_10167, dtype="float64") /* ty=Tensor[(256), float64] */;
  %38 = reshape(%36, newshape=[140]) /* ty=Tensor[(140), uint64] */;
  %39 = reshape(%37, newshape=[256]) /* ty=Tensor[(256), float64] */;
  %40 = @func_8427(%38, %39) /* ty=(Tensor[(3, 16), float32], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64]) */;
  %41 = mod(%32, %33) /* ty=Tensor[(14, 11, 15), float32] */;
  %42 = %34.0;
  %43 = @func_7821() /* ty=Tensor[(3, 16), float32] */;
  %44 = %35.0;
  %45 = %40.3;
  (%41, %42, %43, %44, %45, meta[relay.Constant][2] /* ty=Tensor[(140), uint64] */, %var_10167)
}

def @func_10529() -> Tensor[(3, 16), float32] {
  @func_10527() /* ty=Tensor[(3, 16), float32] */
}

def @func_6450(%var_6448: Tensor[(3, 1, 14), float64], %var_6449: Tensor[(3, 13, 14), float64]) -> Tensor[(3, 13, 14), float64] {
  %48 = fn (%var_6439: Tensor[(3, 1, 14), float64], %var_6440: Tensor[(3, 13, 14), float64]) -> Tensor[(3, 13, 14), float64] {
    %46 = cast(%var_6439, dtype="float64") /* ty=Tensor[(3, 1, 14), float64] */;
    %47 = cast(%var_6440, dtype="float64") /* ty=Tensor[(3, 13, 14), float64] */;
    power(%46, %47) /* ty=Tensor[(3, 13, 14), float64] */
  };
  %48(%var_6448, %var_6449) /* ty=Tensor[(3, 13, 14), float64] */
}

def @func_9244() -> (Tensor[(3, 16), float32],) {
  %50 = fn () -> (Tensor[(3, 16), float32],) {
    %49 = @func_7530() /* ty=Tensor[(3, 16), float32] */;
    (%49,)
  };
  %50() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_8267() -> (Tensor[(3, 16), float32],) {
  %53 = fn () -> (Tensor[(3, 16), float32],) {
    %51 = @func_3800() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(3, 16), float32]) */;
    %52 = %51.0;
    (%52,)
  };
  %53() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_5361(%var_5359: Tensor[(9, 9, 4), float32]) -> Tensor[(9, 9, 4), float32] {
  @func_5358(%var_5359) /* ty=Tensor[(9, 9, 4), float32] */
}

def @func_13868() -> (Tensor[(3, 16), float32],) {
  @func_13866() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_14115(%var_14103: Tensor[(14, 14, 6), int64]) -> (Tensor[(14, 14, 6), int64],) {
  %54 = cast(-4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %55 = cast(%var_14103, dtype="int64") /* ty=Tensor[(14, 14, 6), int64] */;
  %56 = logical_xor(%54, %55) /* ty=Tensor[(14, 14, 6), int64] */;
  (%56,)
}

def @func_9201() -> Tensor[(3, 16), float32] {
  @func_9199() /* ty=Tensor[(3, 16), float32] */
}

def @func_13361() -> Tensor[(3, 16), float32] {
  %58 = fn () -> Tensor[(3, 16), float32] {
    %57 = @func_13256() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %57.0
  };
  %58() /* ty=Tensor[(3, 16), float32] */
}

def @func_11309(%var_11307: Tensor[(88), uint32]) -> (Tensor[(6, 7, 14), float32], Tensor[(3, 16), float32], Tensor[(14, 4), float32], Tensor[(56), float32], Tensor[(144), int8], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(88), uint32]) {
  %59 = @func_2755() /* ty=(Tensor[(6, 7, 14), float32],) */;
  %60 = cast(meta[relay.Constant][3] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
  %61 = cast(meta[relay.Constant][4] /* ty=Tensor[(144), int8] */, dtype="int8") /* ty=Tensor[(144), int8] */;
  %62 = reshape(%60, newshape=[14, 4]) /* ty=Tensor[(14, 4), float32] */;
  %63 = reshape(%61, newshape=[24, 6]) /* ty=Tensor[(24, 6), int8] */;
  %64 = @func_5971(%62, %63) /* ty=(Tensor[(3, 16), float32], Tensor[(1, 480), float64], Tensor[(480), float64], Tensor[(14, 4), float32], Tensor[(336, 1), uint16], Tensor[(336), uint16], Tensor[(24, 6), int8]) */;
  %65 = @func_8656() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %66 = @func_9579() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(12, 10, 4), float64], Tensor[(480), float64]) */;
  %67 = cast(%var_11307, dtype="uint32") /* ty=Tensor[(88), uint32] */;
  %68 = cast(%var_11307, dtype="uint32") /* ty=Tensor[(88), uint32] */;
  %69 = reshape(%67, newshape=[2, 11, 4]) /* ty=Tensor[(2, 11, 4), uint32] */;
  %70 = reshape(%68, newshape=[2, 11, 4]) /* ty=Tensor[(2, 11, 4), uint32] */;
  %71 = @func_8236(%69, %70) /* ty=(Tensor[(2, 11, 4), bool], Tensor[(2, 11, 4), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %72 = %59.0;
  %73 = @func_5905() /* ty=Tensor[(3, 16), float32] */;
  %74 = %64.3;
  %75 = %65.1;
  %76 = %66.2;
  %77 = %71.2;
  (%72, %73, %74, meta[relay.Constant][3] /* ty=Tensor[(56), float32] */, meta[relay.Constant][4] /* ty=Tensor[(144), int8] */, %75, %76, %77, %var_11307)
}

def @func_849(%var_845: Tensor[(15, 15, 11), float32]) -> (Tensor[(15, 15, 11), float32],) {
  %78 = cast(%var_845, dtype="float32") /* ty=Tensor[(15, 15, 11), float32] */;
  %79 = atanh(%78) /* ty=Tensor[(15, 15, 11), float32] */;
  (%79,)
}

def @func_6092(%var_6070: Tensor[(15, 5, 4), float64]) -> (Tensor[(15, 5, 4), float64], Tensor[(14, 4, 6), uint16], Tensor[(168, 2), float64], Tensor[(3, 16), float32]) {
  %80 = cast(%var_6070, dtype="float64") /* ty=Tensor[(15, 5, 4), float64] */;
  %81 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(15, 5, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 5, 4), float64] */, dtype="float64") /* ty=Tensor[(15, 5, 4), float64] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %84 = cast(meta[relay.Constant][6] /* ty=Tensor[(168, 2), uint16] */, dtype="uint16") /* ty=Tensor[(168, 2), uint16] */;
  %85 = cast(meta[relay.Constant][6] /* ty=Tensor[(168, 2), uint16] */, dtype="uint16") /* ty=Tensor[(168, 2), uint16] */;
  %86 = reshape(%84, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %87 = reshape(%85, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %88 = @func_489(%86, %87) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
  %89 = cast(meta[relay.Constant][6] /* ty=Tensor[(168, 2), uint16] */, dtype="float64") /* ty=Tensor[(168, 2), float64] */;
  %90 = @func_5495() /* ty=(Tensor[(3, 16), float32],) */;
  %91 = floor_divide(%82, %83) /* ty=Tensor[(15, 5, 4), float64] */;
  %92 = %88.0;
  %93 = exp(%89) /* ty=Tensor[(168, 2), float64] */;
  %94 = %90.0;
  (%91, %92, %93, %94)
}

def @func_6237() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(11, 2, 10), bool], Tensor[(110), uint8], Tensor[(220), uint8], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_6235() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(11, 2, 10), bool], Tensor[(110), uint8], Tensor[(220), uint8], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_15864() -> Tensor[(3, 16), float32] {
  %95 = fn () -> Tensor[(3, 16), float32] {
    @func_4623() /* ty=Tensor[(3, 16), float32] */
  };
  %95() /* ty=Tensor[(3, 16), float32] */
}

def @func_2588() -> (Tensor[(3, 16), float32],) {
  %98 = fn () -> (Tensor[(3, 16), float32],) {
    %96 = @func_2536() /* ty=(Tensor[(3, 16), float32],) */;
    %97 = %96.0;
    (%97,)
  };
  %98() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_6935() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_6933() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_6235() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(11, 2, 10), bool], Tensor[(110), uint8], Tensor[(220), uint8], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %99 = @func_4543() /* ty=(Tensor[(3, 16), float32],) */;
  %100 = @func_5518() /* ty=(Tensor[(3, 16), float32],) */;
  %101 = cast(meta[relay.Constant][7] /* ty=Tensor[(110), uint8] */, dtype="uint8") /* ty=Tensor[(110), uint8] */;
  %102 = cast(meta[relay.Constant][8] /* ty=Tensor[(220), uint8] */, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %103 = reshape(%101, newshape=[11, 1, 10]) /* ty=Tensor[(11, 1, 10), uint8] */;
  %104 = reshape(%102, newshape=[11, 2, 10]) /* ty=Tensor[(11, 2, 10), uint8] */;
  %105 = @func_1635(%103, %104) /* ty=(Tensor[(11, 2, 10), uint8], Tensor[(11, 2, 10), bool]) */;
  %106 = @func_5518() /* ty=(Tensor[(3, 16), float32],) */;
  %107 = %99.0;
  %108 = %100.0;
  %109 = %105.1;
  %110 = @func_3493() /* ty=Tensor[(3, 16), float32] */;
  %111 = %106.0;
  (%107, %108, %109, meta[relay.Constant][7] /* ty=Tensor[(110), uint8] */, meta[relay.Constant][8] /* ty=Tensor[(220), uint8] */, %110, %111)
}

def @func_10899() -> (Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %118 = fn () -> (Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %112 = @func_6199() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64]) */;
    %113 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
    %114 = @func_6642() /* ty=Tensor[(3, 16), float32] */;
    %115 = %112.1;
    %116 = @func_5905() /* ty=Tensor[(3, 16), float32] */;
    %117 = %113.0;
    (%114, %115, %116, %117)
  };
  %118() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_15673() -> Tensor[(3, 16), float32] {
  %119 = fn () -> Tensor[(3, 16), float32] {
    @func_5661() /* ty=Tensor[(3, 16), float32] */
  };
  %119() /* ty=Tensor[(3, 16), float32] */
}

def @func_5814() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %120 = @func_2536() /* ty=(Tensor[(3, 16), float32],) */;
  %121 = @func_5315() /* ty=(Tensor[(3, 16), float32],) */;
  %122 = %120.0;
  %123 = %121.0;
  (%122, %123)
}

def @func_14504() -> (Tensor[(3, 16), float32],) {
  %126 = fn () -> (Tensor[(3, 16), float32],) {
    %124 = @func_8710() /* ty=(Tensor[(3, 16), float32],) */;
    %125 = %124.0;
    (%125,)
  };
  %126() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_7097() -> (Tensor[(3, 16), float32],) {
  @func_7095() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_3210() -> (Tensor[(3, 16), float32],) {
  %129 = fn () -> (Tensor[(3, 16), float32],) {
    %127 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
    %128 = %127.0;
    (%128,)
  };
  %129() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_13440() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %130 = @func_5315() /* ty=(Tensor[(3, 16), float32],) */;
  %131 = @func_10966() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %132 = @func_12142() /* ty=(Tensor[(3, 16), float32],) */;
  %133 = %130.0;
  %134 = %131.1;
  %135 = %132.0;
  (%133, %134, %135)
}

def @func_7128() -> (Tensor[(3, 16), float32], Tensor[(8, 16, 2), float64], Tensor[(256), float64]) {
  @func_7126() /* ty=(Tensor[(3, 16), float32], Tensor[(8, 16, 2), float64], Tensor[(256), float64]) */
}

def @func_6004() -> Tensor[(3, 16), float32] {
  %136 = @func_2652() /* ty=(Tensor[(3, 16), float32],) */;
  %136.0
}

def @func_6853() -> (Tensor[(3, 16), float32],) {
  @func_6851() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_7348() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_7346() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_6402() -> Tensor[(3, 16), float32] {
  %138 = fn () -> Tensor[(3, 16), float32] {
    %137 = @func_4789() /* ty=(Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32]) */;
    %137.2
  };
  %138() /* ty=Tensor[(3, 16), float32] */
}

def @func_6669() -> (Tensor[(3, 16), float32],) {
  @func_6667() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_15297() -> (Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32]) {
  %143 = fn () -> (Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32]) {
    %139 = @func_6559() /* ty=(Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32]) */;
    %140 = @func_6933() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %141 = %139.0;
    %142 = %140.0;
    (%141, %142)
  };
  %143() /* ty=(Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32]) */
}

def @func_4745(%var_4743: Tensor[(336), uint16]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), uint16], Tensor[(336), uint16]) {
  @func_4742(%var_4743) /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), uint16], Tensor[(336), uint16]) */
}

def @func_4742(%var_4732: Tensor[(336), uint16]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), uint16], Tensor[(336), uint16]) {
  %144 = cast(%var_4732, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %145 = reshape(%144, newshape=[336]) /* ty=Tensor[(336), uint16] */;
  %146 = @func_3312(%145) /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 4, 6), uint16], Tensor[(336), uint16]) */;
  %147 = @func_3836() /* ty=Tensor[(3, 16), float32] */;
  %148 = @func_4362() /* ty=Tensor[(3, 16), float32] */;
  %149 = %146.3;
  (%147, %148, %149, %var_4732)
}

def @func_3643() -> (Tensor[(3, 16), float32],) {
  %152 = fn () -> (Tensor[(3, 16), float32],) {
    %150 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
    %151 = %150.0;
    (%151,)
  };
  %152() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_14037() -> Tensor[(143), float64] {
  %156 = fn () -> Tensor[(143), float64] {
    %153 = @func_10087() /* ty=(Tensor[(11, 7, 5), bool], Tensor[(11, ?, 13), float64], Tensor[(143), int16]) */;
    %154 = %153.2;
    %155 = cast(%154, dtype="float64") /* ty=Tensor[(143), float64] */;
    exp(%155) /* ty=Tensor[(143), float64] */
  };
  %156() /* ty=Tensor[(143), float64] */
}

def @func_2720() -> (Tensor[(3, 16), float32],) {
  %159 = fn () -> (Tensor[(3, 16), float32],) {
    %157 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
    %158 = %157.0;
    (%158,)
  };
  %159() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_16033(%var_16032: Tensor[(324), float32]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 8, 15), float64], Tensor[(1680), float64], Tensor[(9, 9, 4), float32], Tensor[(324), float32]) {
  %169 = fn (%var_16028: Tensor[(324), float32]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 8, 15), float64], Tensor[(1680), float64], Tensor[(9, 9, 4), float32], Tensor[(324), float32]) {
    %160 = @func_13099() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %161 = cast(meta[relay.Constant][9] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %162 = reshape(%161, newshape=[14, 8, 15]) /* ty=Tensor[(14, 8, 15), float64] */;
    %163 = cast(%var_16028, dtype="float32") /* ty=Tensor[(324), float32] */;
    %164 = reshape(%163, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
    %165 = @func_5905() /* ty=Tensor[(3, 16), float32] */;
    %166 = %160.1;
    %167 = @func_14453(%162) /* ty=Tensor[(14, 8, 15), float64] */;
    %168 = @func_5358(%164) /* ty=Tensor[(9, 9, 4), float32] */;
    (%165, %166, %167, meta[relay.Constant][9] /* ty=Tensor[(1680), float64] */, %168, %var_16028)
  };
  %169(%var_16032) /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 8, 15), float64], Tensor[(1680), float64], Tensor[(9, 9, 4), float32], Tensor[(324), float32]) */
}

def @func_5583() -> (Tensor[(3, 16), float32],) {
  %172 = fn () -> (Tensor[(3, 16), float32],) {
    %170 = @func_4660() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) */;
    %171 = %170.0;
    (%171,)
  };
  %172() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_7777() -> (Tensor[(3, 16), float32],) {
  @func_7775() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_4230() -> Tensor[(3, 16), float32] {
  %174 = fn () -> Tensor[(3, 16), float32] {
    %173 = @func_3209() /* ty=(Tensor[(3, 16), float32],) */;
    %173.0
  };
  %174() /* ty=Tensor[(3, 16), float32] */
}

def @func_11079() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_11077() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_4758() -> (Tensor[(6, 7, 14), float32],) {
  %177 = fn () -> (Tensor[(6, 7, 14), float32],) {
    %175 = @func_2755() /* ty=(Tensor[(6, 7, 14), float32],) */;
    %176 = %175.0;
    (%176,)
  };
  %177() /* ty=(Tensor[(6, 7, 14), float32],) */
}

def @func_3553(%var_3552: Tensor[(14, 4, 6), bool]) -> (Tensor[(14, 4, 6), float32],) {
  %185 = fn (%var_3539: Tensor[(14, 4, 6), bool]) -> (Tensor[(14, 4, 6), float32],) {
    %178 = @func_2829() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) */;
    %179 = %178.1;
    %180 = cast(%var_3539, dtype="float32") /* ty=Tensor[(14, 4, 6), float32] */;
    %181 = shape_of(%179, dtype="int32") /* ty=Tensor[(3), int32] */;
    %182 = cast(%179, dtype="float32") /* ty=Tensor[(14, 4, 6), float32] */;
    %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %184 = mod(%182, %183) /* ty=Tensor[(14, 4, 6), float32] */;
    (%184,)
  };
  %185(%var_3552) /* ty=(Tensor[(14, 4, 6), float32],) */
}

def @func_8656() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %186 = @func_8266() /* ty=(Tensor[(3, 16), float32],) */;
  %187 = @func_6604() /* ty=Tensor[(3, 16), float32] */;
  %188 = %186.0;
  (%187, %188)
}

def @func_6143() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_6141() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_9152() -> (Tensor[(3, 16), float32],) {
  %191 = fn () -> (Tensor[(3, 16), float32],) {
    %189 = @func_2652() /* ty=(Tensor[(3, 16), float32],) */;
    %190 = %189.0;
    (%190,)
  };
  %191() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_5077(%var_5075: Tensor[(15, 14, 12), float64], %var_5076: Tensor[(12), int32]) -> (Tensor[(6, 6, 2), uint64], Tensor[(12), int32], Tensor[(72), int32], Tensor[(15, 14, 12), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_5073(%var_5075, %var_5076) /* ty=(Tensor[(6, 6, 2), uint64], Tensor[(12), int32], Tensor[(72), int32], Tensor[(15, 14, 12), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_3908(%var_3906: Tensor[(336), bool]) -> (Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_3905(%var_3906) /* ty=(Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_2290() -> Tensor[(3, 16), float32] {
  %192 = cast(4.35858f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %193 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 16), float32] */, dtype="float32") /* ty=Tensor[(3, 16), float32] */;
  floor_divide(%192, %193) /* ty=Tensor[(3, 16), float32] */
}

def @func_2481() -> (Tensor[(3, 16), float32],) {
  %195 = fn () -> (Tensor[(3, 16), float32],) {
    %194 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
    (%194,)
  };
  %195() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_5497() -> (Tensor[(3, 16), float32],) {
  @func_5495() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_11683() -> Tensor[(3, 16), float32] {
  @func_11681() /* ty=Tensor[(3, 16), float32] */
}

def @func_4426() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(336), uint16], Tensor[(900), float64]) {
  @func_4424() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(336), uint16], Tensor[(900), float64]) */
}

def @func_15790() -> Tensor[(3, 16), float32] {
  %196 = fn () -> Tensor[(3, 16), float32] {
    @func_6401() /* ty=Tensor[(3, 16), float32] */
  };
  %196() /* ty=Tensor[(3, 16), float32] */
}

def @func_11609() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %201 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %197 = @func_4844() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %198 = @func_6559() /* ty=(Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32]) */;
    %199 = %197.0;
    %200 = %198.1;
    (%199, %200)
  };
  %201() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_8512() -> (Tensor[(3, 16), float32],) {
  @func_8510() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_9075(%var_9071: Tensor[(7, 16, 5), float32], %var_9072: Tensor[(7, 16, 5), float32], %var_9073: Tensor[(336), uint16], %var_9074: Tensor[(144), int8]) -> (Tensor[(7, 16, 5), bool], Tensor[(3, 16), float32], Tensor[(336), uint16], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(56), float32], Tensor[(144), int8], Tensor[(56), float32], Tensor[(3, 16), float32], Tensor[(7, 16, 5), float32], Tensor[(3, 16), float32]) {
  %231 = fn (%var_8941: Tensor[(7, 16, 5), float32], %var_8942: Tensor[(7, 16, 5), float32], %var_8962: Tensor[(336), uint16], %var_9025: Tensor[(144), int8]) -> (Tensor[(7, 16, 5), bool], Tensor[(3, 16), float32], Tensor[(336), uint16], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(56), float32], Tensor[(144), int8], Tensor[(56), float32], Tensor[(3, 16), float32], Tensor[(7, 16, 5), float32], Tensor[(3, 16), float32]) {
    %202 = cast(%var_8942, dtype="bool") /* ty=Tensor[(7, 16, 5), bool] */;
    %203 = shape_of(%var_8941, dtype="int32") /* ty=Tensor[(3), int32] */;
    %204 = cast(%var_8941, dtype="bool") /* ty=Tensor[(7, 16, 5), bool] */;
    %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %206 = cast(%var_8962, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %207 = reshape(%206, newshape=[336]) /* ty=Tensor[(336), uint16] */;
    %208 = @func_3256(%207) /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(900), float64], Tensor[(336), uint16]) */;
    %209 = @func_4844() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %210 = @func_7916() /* ty=(Tensor[(3, 16), float32],) */;
    %211 = %208.4;
    %212 = cast(%211, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %213 = cast(%var_9025, dtype="int8") /* ty=Tensor[(144), int8] */;
    %214 = cast(meta[relay.Constant][11] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
    %215 = reshape(%212, newshape=[336]) /* ty=Tensor[(336), uint16] */;
    %216 = reshape(%213, newshape=[144]) /* ty=Tensor[(144), int8] */;
    %217 = reshape(%214, newshape=[56]) /* ty=Tensor[(56), float32] */;
    %218 = @func_3437(%215, %216, %217) /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(56), float32], int8, Tensor[(144), int8], Tensor[(56), float32]) */;
    %219 = cast(%var_8941, dtype="float64") /* ty=Tensor[(7, 16, 5), float64] */;
    %220 = sigmoid(%219) /* ty=Tensor[(7, 16, 5), float64] */;
    %221 = cast(%220, dtype="float32") /* ty=Tensor[(7, 16, 5), float32] */;
    %222 = @func_6851() /* ty=(Tensor[(3, 16), float32],) */;
    %223 = greater_equal(%204, %205) /* ty=Tensor[(7, 16, 5), bool] */;
    %224 = @func_6733() /* ty=Tensor[(3, 16), float32] */;
    %225 = %209.1;
    %226 = %210.0;
    %227 = %218.7;
    %228 = @func_7623() /* ty=Tensor[(3, 16), float32] */;
    %229 = acosh(%221) /* ty=Tensor[(7, 16, 5), float32] */;
    %230 = %222.0;
    (%223, %224, %211, %var_8962, %225, %226, %227, %var_9025, meta[relay.Constant][11] /* ty=Tensor[(56), float32] */, %228, %229, %230)
  };
  %231(%var_9071, %var_9072, %var_9073, %var_9074) /* ty=(Tensor[(7, 16, 5), bool], Tensor[(3, 16), float32], Tensor[(336), uint16], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(56), float32], Tensor[(144), int8], Tensor[(56), float32], Tensor[(3, 16), float32], Tensor[(7, 16, 5), float32], Tensor[(3, 16), float32]) */
}

def @func_7822() -> Tensor[(3, 16), float32] {
  %232 = fn () -> Tensor[(3, 16), float32] {
    @func_5661() /* ty=Tensor[(3, 16), float32] */
  };
  %232() /* ty=Tensor[(3, 16), float32] */
}

def @func_5662() -> Tensor[(3, 16), float32] {
  %234 = fn () -> Tensor[(3, 16), float32] {
    %233 = @func_3026() /* ty=(Tensor[(3, 16), float32],) */;
    %233.0
  };
  %234() /* ty=Tensor[(3, 16), float32] */
}

def @func_3611() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_3609() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_6676() -> (Tensor[(6, 5, 5), float64],) {
  %237 = fn () -> (Tensor[(6, 5, 5), float64],) {
    %235 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(6, 5, 5), float64] */;
    %236 = atanh(%235) /* ty=Tensor[(6, 5, 5), float64] */;
    (%236,)
  };
  %237() /* ty=(Tensor[(6, 5, 5), float64],) */
}

def @func_7600() -> (Tensor[(3, 16), float32],) {
  %238 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  (%238,)
}

def @func_12119(%var_12113: Tensor[(15, 15, 11), float64], %var_12114: Tensor[(15, 15, 11), float64]) -> (Tensor[(15, 15, 11), float64],) {
  %239 = cast(%var_12114, dtype="float64") /* ty=Tensor[(15, 15, 11), float64] */;
  %240 = shape_of(%var_12113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%var_12113, dtype="float64") /* ty=Tensor[(15, 15, 11), float64] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %243 = multiply(%241, %242) /* ty=Tensor[(15, 15, 11), float64] */;
  (%243,)
}

def @func_4363() -> Tensor[(3, 16), float32] {
  %245 = fn () -> Tensor[(3, 16), float32] {
    %244 = @func_4009() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %244.0
  };
  %245() /* ty=Tensor[(3, 16), float32] */
}

def @func_7035() -> (Tensor[(3, 16), float32],) {
  %246 = @func_4789() /* ty=(Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32]) */;
  %247 = %246.2;
  (%247,)
}

def @func_4961() -> (Tensor[(14, 4, 6), float32], Tensor[(8, 10, 4), float64]) {
  @func_4959() /* ty=(Tensor[(14, 4, 6), float32], Tensor[(8, 10, 4), float64]) */
}

def @func_6773(%var_6770: Tensor[(336), bool]) -> (Tensor[(3, 16), float32], Tensor[(9, 9, 4), float32], Tensor[(324), float32], Tensor[(336), bool], Tensor[(336), bool]) {
  %248 = cast(meta[relay.Constant][13] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %249 = reshape(%248, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
  %250 = cast(%var_6770, dtype="bool") /* ty=Tensor[(336), bool] */;
  %251 = reshape(%250, newshape=[336]) /* ty=Tensor[(336), bool] */;
  %252 = @func_3905(%251) /* ty=(Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %253 = @func_5661() /* ty=Tensor[(3, 16), float32] */;
  %254 = @func_5358(%249) /* ty=Tensor[(9, 9, 4), float32] */;
  %255 = %252.1;
  (%253, %254, meta[relay.Constant][13] /* ty=Tensor[(324), float32] */, %255, %var_6770)
}

def @func_5073(%var_5011: Tensor[(15, 14, 12), float64], %var_5019: Tensor[(12), int32]) -> (Tensor[(6, 6, 2), uint64], Tensor[(12), int32], Tensor[(72), int32], Tensor[(15, 14, 12), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %256 = cast(%var_5019, dtype="int32") /* ty=Tensor[(12), int32] */;
  %257 = cast(meta[relay.Constant][14] /* ty=Tensor[(72), int32] */, dtype="int32") /* ty=Tensor[(72), int32] */;
  %258 = reshape(%256, newshape=[6, 1, 2]) /* ty=Tensor[(6, 1, 2), int32] */;
  %259 = reshape(%257, newshape=[6, 6, 2]) /* ty=Tensor[(6, 6, 2), int32] */;
  %260 = cast(%var_5011, dtype="float64") /* ty=Tensor[(15, 14, 12), float64] */;
  %261 = asin(%260) /* ty=Tensor[(15, 14, 12), float64] */;
  %262 = cast(%261, dtype="float64") /* ty=Tensor[(15, 14, 12), float64] */;
  %263 = sinh(%262) /* ty=Tensor[(15, 14, 12), float64] */;
  %264 = cast(%261, dtype="float64") /* ty=Tensor[(15, 14, 12), float64] */;
  %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%263, dtype="float64") /* ty=Tensor[(15, 14, 12), float64] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %268 = @func_2792() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %269 = @func_3609() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %270 = @func_4141(%258, %259) /* ty=Tensor[(6, 6, 2), uint64] */;
  %271 = divide(%266, %267) /* ty=Tensor[(15, 14, 12), float64] */;
  %272 = %268.2;
  %273 = %269.0;
  (%270, %var_5019, meta[relay.Constant][14] /* ty=Tensor[(72), int32] */, %271, %272, %273)
}

def @func_6977() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %277 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %274 = @func_3800() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(3, 16), float32]) */;
    %275 = %274.0;
    %276 = @func_5905() /* ty=Tensor[(3, 16), float32] */;
    (%275, %276)
  };
  %277() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_10968() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_10966() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_8492() -> (Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32]) {
  %281 = fn () -> (Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32]) {
    %278 = @func_4237() /* ty=(Tensor[(3, 16), float32],) */;
    %279 = %278.0;
    %280 = @func_6354() /* ty=Tensor[(6, 7, 14), float32] */;
    (%279, %280)
  };
  %281() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32]) */
}

def @func_9921() -> Tensor[(3, 16), float32] {
  @func_5171() /* ty=Tensor[(3, 16), float32] */
}

def @func_5202() -> Tensor[(3, 16), float32] {
  %282 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
  %282.0
}

def @func_6644() -> Tensor[(3, 16), float32] {
  @func_6642() /* ty=Tensor[(3, 16), float32] */
}

def @func_11812() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %283 = @func_6141() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %284 = @func_6235() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(11, 2, 10), bool], Tensor[(110), uint8], Tensor[(220), uint8], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %285 = @func_6976() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %286 = @func_2536() /* ty=(Tensor[(3, 16), float32],) */;
  %287 = %283.0;
  %288 = %284.6;
  %289 = %285.0;
  %290 = %286.0;
  (%287, %288, %289, %290)
}

def @func_5312() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %296 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %291 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
    %292 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
    %293 = %291.0;
    %294 = @func_4623() /* ty=Tensor[(3, 16), float32] */;
    %295 = %292.0;
    (%293, %294, %295)
  };
  %296() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_11537() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(144), int8], Tensor[(88), uint32]) {
  %305 = fn () -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(144), int8], Tensor[(88), uint32]) {
    %297 = @func_4543() /* ty=(Tensor[(3, 16), float32],) */;
    %298 = @func_4959() /* ty=(Tensor[(14, 4, 6), float32], Tensor[(8, 10, 4), float64]) */;
    %299 = cast(meta[relay.Constant][15] /* ty=Tensor[(88), uint32] */, dtype="uint32") /* ty=Tensor[(88), uint32] */;
    %300 = reshape(%299, newshape=[88]) /* ty=Tensor[(88), uint32] */;
    %301 = @func_11309(%300) /* ty=(Tensor[(6, 7, 14), float32], Tensor[(3, 16), float32], Tensor[(14, 4), float32], Tensor[(56), float32], Tensor[(144), int8], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(88), uint32]) */;
    %302 = %297.0;
    %303 = %298.0;
    %304 = %301.4;
    (%302, %303, %304, meta[relay.Constant][15] /* ty=Tensor[(88), uint32] */)
  };
  %305() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(144), int8], Tensor[(88), uint32]) */
}

def @func_9923() -> Tensor[(3, 16), float32] {
  @func_9921() /* ty=Tensor[(3, 16), float32] */
}

def @func_8240(%var_8238: Tensor[(2, 11, 4), uint32], %var_8239: Tensor[(2, 11, 4), uint32]) -> (Tensor[(2, 11, 4), bool], Tensor[(2, 11, 4), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_8236(%var_8238, %var_8239) /* ty=(Tensor[(2, 11, 4), bool], Tensor[(2, 11, 4), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_15217() -> (Tensor[(3, 16), float32],) {
  @func_15215() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_8738(%var_8736: Tensor[(2, 10, 3), float64]) -> Tensor[(2, 10, 3), float64] {
  @func_8735(%var_8736) /* ty=Tensor[(2, 10, 3), float64] */
}

def @func_12416() -> (Tensor[(3, 16), float32], Tensor[(2, 10, 3), float64], Tensor[(60), float64]) {
  %310 = fn () -> (Tensor[(3, 16), float32], Tensor[(2, 10, 3), float64], Tensor[(60), float64]) {
    %306 = cast(meta[relay.Constant][16] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
    %307 = reshape(%306, newshape=[2, 10, 3]) /* ty=Tensor[(2, 10, 3), float64] */;
    %308 = @func_6733() /* ty=Tensor[(3, 16), float32] */;
    %309 = @func_8735(%307) /* ty=Tensor[(2, 10, 3), float64] */;
    (%308, %309, meta[relay.Constant][16] /* ty=Tensor[(60), float64] */)
  };
  %310() /* ty=(Tensor[(3, 16), float32], Tensor[(2, 10, 3), float64], Tensor[(60), float64]) */
}

def @func_2805() -> (Tensor[(3, 16), float32],) {
  @func_2803() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_7045() -> (Tensor[(3, 16), float32],) {
  %311 = @func_6604() /* ty=Tensor[(3, 16), float32] */;
  (%311,)
}

def @func_1467(%var_1465: Tensor[(7, 2, 4), float32], %var_1466: Tensor[(336), uint16]) -> (Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(8, 16, 2), float64], Tensor[(4, 64), float64], Tensor[(7, 2, 4), bool]) {
  %331 = fn (%var_1441: Tensor[(7, 2, 4), float32], %var_1446: Tensor[(336), uint16]) -> (Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(8, 16, 2), float64], Tensor[(4, 64), float64], Tensor[(7, 2, 4), bool]) {
    %312 = cast(%var_1446, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %313 = cast(%var_1446, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %314 = reshape(%312, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %315 = reshape(%313, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %316 = @func_489(%314, %315) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
    %317 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 64), float64] */, dtype="float64") /* ty=Tensor[(4, 64), float64] */;
    %318 = reshape(%317, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), float64] */;
    %319 = cast(%var_1441, dtype="float32") /* ty=Tensor[(7, 2, 4), float32] */;
    %320 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(7, 2, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %321 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 2, 4), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 4), float32] */;
    %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %323 = subtract(%321, %322) /* ty=Tensor[(7, 2, 4), float32] */;
    %324 = cast(%323, dtype="bool") /* ty=Tensor[(7, 2, 4), bool] */;
    %325 = shape_of(%var_1441, dtype="int32") /* ty=Tensor[(3), int32] */;
    %326 = cast(%var_1441, dtype="bool") /* ty=Tensor[(7, 2, 4), bool] */;
    %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %328 = %316.0;
    %329 = @func_436(%318) /* ty=Tensor[(8, 16, 2), float64] */;
    %330 = logical_and(%326, %327) /* ty=Tensor[(7, 2, 4), bool] */;
    (%328, %var_1446, %329, meta[relay.Constant][17] /* ty=Tensor[(4, 64), float64] */, %330)
  };
  %331(%var_1465, %var_1466) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(8, 16, 2), float64], Tensor[(4, 64), float64], Tensor[(7, 2, 4), bool]) */
}

def @func_3314(%var_3313: Tensor[(336), uint16]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 4, 6), uint16], Tensor[(336), uint16]) {
  %342 = fn (%var_3306: Tensor[(336), uint16]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 4, 6), uint16], Tensor[(336), uint16]) {
    %332 = @func_2429() /* ty=(Tensor[(3, 16), float32],) */;
    %333 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
    %334 = cast(%var_3306, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %335 = cast(%var_3306, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %336 = reshape(%334, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %337 = reshape(%335, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %338 = @func_489(%336, %337) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
    %339 = %332.0;
    %340 = %333.0;
    %341 = %338.0;
    (%339, %340, %341, %var_3306)
  };
  %342(%var_3313) /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 4, 6), uint16], Tensor[(336), uint16]) */
}

def @func_7960() -> (Tensor[(3, 16), float32],) {
  @func_7958() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_7346() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %343 = @func_4254() /* ty=(Tensor[(3, 16), float32],) */;
  %344 = @func_6141() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %345 = %343.0;
  %346 = %344.1;
  %347 = @func_4323() /* ty=Tensor[(3, 16), float32] */;
  (%345, %346, %347)
}

def @func_852(%var_850: Tensor[(15, 15, 11), float32]) -> (Tensor[(15, 15, 11), float32],) {
  @func_849(%var_850) /* ty=(Tensor[(15, 15, 11), float32],) */
}

def @func_3258(%var_3257: Tensor[(336), uint16]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(900), float64], Tensor[(336), uint16]) {
  %358 = fn (%var_3248: Tensor[(336), uint16]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(900), float64], Tensor[(336), uint16]) {
    %348 = @func_2652() /* ty=(Tensor[(3, 16), float32],) */;
    %349 = @func_2652() /* ty=(Tensor[(3, 16), float32],) */;
    %350 = cast(meta[relay.Constant][19] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
    %351 = cast(%var_3248, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %352 = reshape(%350, newshape=[4, 15, 15]) /* ty=Tensor[(4, 15, 15), float64] */;
    %353 = reshape(%351, newshape=[336]) /* ty=Tensor[(336), uint16] */;
    %354 = @func_2211(%352, %353) /* ty=(Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(4, 15, 15), float64], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(14, 4, 6), uint16]) */;
    %355 = %348.0;
    %356 = %349.0;
    %357 = %354.0;
    (%355, %356, %357, meta[relay.Constant][19] /* ty=Tensor[(900), float64] */, %var_3248)
  };
  %358(%var_3257) /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(900), float64], Tensor[(336), uint16]) */
}

def @func_1934(%var_1929: Tensor[(140), uint64], %var_1930: Tensor[(256), float64]) -> (Tensor[(15, 15, 11), float32], Tensor[(5, 495), float32], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(13, 4, 11), float32]) {
  %359 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 495), float32] */, dtype="float32") /* ty=Tensor[(5, 495), float32] */;
  %360 = reshape(%359, newshape=[15, 15, 11]) /* ty=Tensor[(15, 15, 11), float32] */;
  %361 = @func_849(%360) /* ty=(Tensor[(15, 15, 11), float32],) */;
  %362 = cast(%var_1929, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %363 = cast(%var_1929, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %364 = cast(%var_1930, dtype="float64") /* ty=Tensor[(256), float64] */;
  %365 = reshape(%362, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), uint64] */;
  %366 = reshape(%363, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), uint64] */;
  %367 = reshape(%364, newshape=[256]) /* ty=Tensor[(256), float64] */;
  %368 = @func_887(%365, %366, %367) /* ty=(Tensor[(5, 7, 4), bool], Tensor[(8, 16, 2), float64], Tensor[(256), float64]) */;
  %369 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 4, 11), float32] */, dtype="float32") /* ty=Tensor[(13, 4, 11), float32] */;
  %370 = sinh(%369) /* ty=Tensor[(13, 4, 11), float32] */;
  %371 = cast(%370, dtype="float32") /* ty=Tensor[(13, 4, 11), float32] */;
  %372 = %361.0;
  %373 = %368.1;
  %374 = sqrt(%371) /* ty=Tensor[(13, 4, 11), float32] */;
  (%372, meta[relay.Constant][20] /* ty=Tensor[(5, 495), float32] */, %373, %var_1929, %var_1930, %374)
}

def @func_1738(%var_1736: float64) -> Tensor[(12, 7, 9), float64] {
  @func_1735(%var_1736) /* ty=Tensor[(12, 7, 9), float64] */
}

def @func_1735(%var_1722: float64) -> Tensor[(12, 7, 9), float64] {
  %375 = cast(%var_1722, dtype="float64") /* ty=float64 */;
  %376 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 7, 9), float64] */, dtype="float64") /* ty=Tensor[(12, 7, 9), float64] */;
  add(%375, %376) /* ty=Tensor[(12, 7, 9), float64] */
}

def @func_5989() -> Tensor[(3, 16), float32] {
  %377 = @func_3026() /* ty=(Tensor[(3, 16), float32],) */;
  %377.0
}

def @func_8735(%var_8721: Tensor[(2, 10, 3), float64]) -> Tensor[(2, 10, 3), float64] {
  %378 = cast(%var_8721, dtype="float64") /* ty=Tensor[(2, 10, 3), float64] */;
  atanh(%378) /* ty=Tensor[(2, 10, 3), float64] */
}

def @func_7567() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_7565() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_10326(%var_10321: Tensor[(336), bool]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(8, 10, 4), float64], Tensor[(9, 9, 4), float32], Tensor[(336), bool]) {
  %379 = @func_8491() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32]) */;
  %380 = @func_9151() /* ty=(Tensor[(3, 16), float32],) */;
  %381 = cast(%var_10321, dtype="bool") /* ty=Tensor[(336), bool] */;
  %382 = reshape(%381, newshape=[336]) /* ty=Tensor[(336), bool] */;
  %383 = @func_6773(%382) /* ty=(Tensor[(3, 16), float32], Tensor[(9, 9, 4), float32], Tensor[(324), float32], Tensor[(336), bool], Tensor[(336), bool]) */;
  %384 = %379.0;
  %385 = %380.0;
  %386 = @func_4921() /* ty=Tensor[(8, 10, 4), float64] */;
  %387 = %383.1;
  (%384, %385, %386, %387, %var_10321)
}

def @func_14225() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(11, 7, 5), bool]) {
  %394 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(11, 7, 5), bool]) {
    %388 = @func_13099() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %389 = @func_12604() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %390 = @func_10087() /* ty=(Tensor[(11, 7, 5), bool], Tensor[(11, ?, 13), float64], Tensor[(143), int16]) */;
    %391 = %388.1;
    %392 = %389.0;
    %393 = %390.0;
    (%391, %392, %393)
  };
  %394() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(11, 7, 5), bool]) */
}

def @func_14455(%var_14454: Tensor[(14, 8, 15), float64]) -> Tensor[(14, 8, 15), float64] {
  %396 = fn (%var_14435: Tensor[(14, 8, 15), float64]) -> Tensor[(14, 8, 15), float64] {
    %395 = cast(%var_14435, dtype="float64") /* ty=Tensor[(14, 8, 15), float64] */;
    tan(%395) /* ty=Tensor[(14, 8, 15), float64] */
  };
  %396(%var_14454) /* ty=Tensor[(14, 8, 15), float64] */
}

def @func_8552(%var_8527: Tensor[(16, 9, 9), int8], %var_8528: Tensor[(16, 9, 9), int8]) -> (Tensor[(16, 9, 9), int8], Tensor[(16, 9, 9), float64]) {
  %397 = cast(%var_8528, dtype="int8") /* ty=Tensor[(16, 9, 9), int8] */;
  %398 = shape_of(%var_8527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%var_8527, dtype="int8") /* ty=Tensor[(16, 9, 9), int8] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %401 = cast(%var_8528, dtype="float64") /* ty=Tensor[(16, 9, 9), float64] */;
  %402 = minimum(%399, %400) /* ty=Tensor[(16, 9, 9), int8] */;
  %403 = asin(%401) /* ty=Tensor[(16, 9, 9), float64] */;
  (%402, %403)
}

def @func_14957() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_14955() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_7624() -> Tensor[(3, 16), float32] {
  %405 = fn () -> Tensor[(3, 16), float32] {
    %404 = @func_2829() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) */;
    %404.0
  };
  %405() /* ty=Tensor[(3, 16), float32] */
}

def @func_4691() -> (Tensor[(3, 16), float32],) {
  %408 = fn () -> (Tensor[(3, 16), float32],) {
    %406 = @func_2536() /* ty=(Tensor[(3, 16), float32],) */;
    %407 = %406.0;
    (%407,)
  };
  %408() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_13582() -> (Tensor[(3, 16), float32], Tensor[(900), float64]) {
  @func_13580() /* ty=(Tensor[(3, 16), float32], Tensor[(900), float64]) */
}

def @func_6776(%var_6774: Tensor[(336), bool]) -> (Tensor[(3, 16), float32], Tensor[(9, 9, 4), float32], Tensor[(324), float32], Tensor[(336), bool], Tensor[(336), bool]) {
  @func_6773(%var_6774) /* ty=(Tensor[(3, 16), float32], Tensor[(9, 9, 4), float32], Tensor[(324), float32], Tensor[(336), bool], Tensor[(336), bool]) */
}

def @func_15272() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %415 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %409 = @func_10476() /* ty=(Tensor[(3, 16), float32],) */;
    %410 = @func_10898() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %411 = @func_7741() /* ty=(Tensor[(3, 16), float32],) */;
    %412 = %409.0;
    %413 = %410.0;
    %414 = %411.0;
    (%412, %413, %414)
  };
  %415() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_5316() -> (Tensor[(3, 16), float32],) {
  %418 = fn () -> (Tensor[(3, 16), float32],) {
    %416 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
    %417 = %416.0;
    (%417,)
  };
  %418() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_8712() -> (Tensor[(3, 16), float32],) {
  @func_8710() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_13442() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_13440() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_4997(%var_4987: Tensor[(15, 11, 5), int8], %var_4988: Tensor[(15, 11, 5), int8]) -> (Tensor[(15, 11, 5), bool],) {
  %419 = cast(%var_4988, dtype="bool") /* ty=Tensor[(15, 11, 5), bool] */;
  %420 = shape_of(%var_4987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%var_4987, dtype="bool") /* ty=Tensor[(15, 11, 5), bool] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %423 = less_equal(%421, %422) /* ty=Tensor[(15, 11, 5), bool] */;
  (%423,)
}

def @func_3465() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %428 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %424 = @func_2719() /* ty=(Tensor[(3, 16), float32],) */;
    %425 = @func_2652() /* ty=(Tensor[(3, 16), float32],) */;
    %426 = %424.0;
    %427 = %425.0;
    (%426, %427)
  };
  %428() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_2508() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %433 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %429 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
    %430 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
    %431 = %429.0;
    %432 = %430.0;
    (%431, %432)
  };
  %433() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_4238() -> (Tensor[(3, 16), float32],) {
  %436 = fn () -> (Tensor[(3, 16), float32],) {
    %434 = @func_3609() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %435 = %434.0;
    (%435,)
  };
  %436() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_8510() -> (Tensor[(3, 16), float32],) {
  %437 = @func_4660() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) */;
  %438 = %437.0;
  (%438,)
}

def @func_6627(%var_6625: Tensor[(11, 1, 13), int16], %var_6626: Tensor[(11, 1, 13), int16]) -> (Tensor[(11, ?, 13), float64],) {
  %447 = fn (%var_6607: Tensor[(11, 1, 13), int16], %var_6611: Tensor[(11, 1, 13), int16]) -> (Tensor[(11, ?, 13), float64],) {
    %439 = cast(meta[relay.Constant][23] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %440 = cast(%var_6607, dtype="int16") /* ty=Tensor[(11, 1, 13), int16] */;
    %441 = left_shift(%439, %440) /* ty=Tensor[(11, 1, 13), int16] */;
    %442 = cast(%var_6611, dtype="float64") /* ty=Tensor[(11, 1, 13), float64] */;
    %443 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
    %444 = cast(%441, dtype="float64") /* ty=Tensor[(11, 1, 13), float64] */;
    %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %446 = mod(%444, %445) /* ty=Tensor[(11, ?, 13), float64] */;
    (%446,)
  };
  %447(%var_6625, %var_6626) /* ty=(Tensor[(11, ?, 13), float64],) */
}

def @func_8025() -> (Tensor[(3, 16), float32],) {
  %448 = @func_2429() /* ty=(Tensor[(3, 16), float32],) */;
  %449 = %448.0;
  (%449,)
}

def @func_14607() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) {
  %450 = @func_2829() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) */;
  %451 = @func_9359() /* ty=Tensor[(3, 16), float32] */;
  %452 = %450.1;
  (%451, %452)
}

def @func_14631() -> Tensor[(3, 16), float32] {
  %453 = fn () -> Tensor[(3, 16), float32] {
    @func_12879() /* ty=Tensor[(3, 16), float32] */
  };
  %453() /* ty=Tensor[(3, 16), float32] */
}

def @func_8085() -> (Tensor[(3, 16), float32],) {
  %456 = fn () -> (Tensor[(3, 16), float32],) {
    %454 = @func_7259() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %455 = %454.1;
    (%455,)
  };
  %456() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_6642() -> Tensor[(3, 16), float32] {
  %457 = @func_4237() /* ty=(Tensor[(3, 16), float32],) */;
  %457.0
}

def @func_11349() -> (Tensor[(3, 16), float32], Tensor[(11, ?, 13), float64], Tensor[(143), int16], Tensor[(3, 16), float32]) {
  @func_11347() /* ty=(Tensor[(3, 16), float32], Tensor[(11, ?, 13), float64], Tensor[(143), int16], Tensor[(3, 16), float32]) */
}

def @func_6933() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %458 = @func_2587() /* ty=(Tensor[(3, 16), float32],) */;
  %459 = @func_4543() /* ty=(Tensor[(3, 16), float32],) */;
  %460 = %458.0;
  %461 = @func_5171() /* ty=Tensor[(3, 16), float32] */;
  %462 = %459.0;
  (%460, %461, %462)
}

def @func_14733(%var_14732: Tensor[(1296), int8]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32], Tensor[(3, 16), float32], Tensor[(1, 7, 4), uint32], Tensor[(7), int32], Tensor[(14, 2), int32], Tensor[(16, 9, 9), int64]) {
  %491 = fn (%var_14642: Tensor[(1296), int8]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32], Tensor[(3, 16), float32], Tensor[(1, 7, 4), uint32], Tensor[(7), int32], Tensor[(14, 2), int32], Tensor[(16, 9, 9), int64]) {
    %463 = @func_7916() /* ty=(Tensor[(3, 16), float32],) */;
    %464 = @func_12285() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %465 = @func_14503() /* ty=(Tensor[(3, 16), float32],) */;
    %466 = @func_7741() /* ty=(Tensor[(3, 16), float32],) */;
    %467 = @func_7884() /* ty=(Tensor[(6, 7, 14), float32],) */;
    %468 = @func_2587() /* ty=(Tensor[(3, 16), float32],) */;
    %469 = cast(meta[relay.Constant][24] /* ty=Tensor[(7), int32] */, dtype="int32") /* ty=Tensor[(7), int32] */;
    %470 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 2), int32] */, dtype="int32") /* ty=Tensor[(14, 2), int32] */;
    %471 = reshape(%469, newshape=[1, 7, 1]) /* ty=Tensor[(1, 7, 1), int32] */;
    %472 = reshape(%470, newshape=[1, 7, 4]) /* ty=Tensor[(1, 7, 4), int32] */;
    %473 = cast(%var_14642, dtype="int8") /* ty=Tensor[(1296), int8] */;
    %474 = cast(%var_14642, dtype="int8") /* ty=Tensor[(1296), int8] */;
    %475 = reshape(%473, newshape=[16, 9, 9]) /* ty=Tensor[(16, 9, 9), int8] */;
    %476 = reshape(%474, newshape=[16, 9, 9]) /* ty=Tensor[(16, 9, 9), int8] */;
    %477 = @func_8552(%475, %476) /* ty=(Tensor[(16, 9, 9), int8], Tensor[(16, 9, 9), float64]) */;
    %478 = %477.0;
    %479 = cast(%var_14642, dtype="int64") /* ty=Tensor[(1296), int64] */;
    %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
    %481 = cast(%478, dtype="int64") /* ty=Tensor[(16, 9, 9), int64] */;
    %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %483 = %463.0;
    %484 = %464.0;
    %485 = %465.0;
    %486 = %466.0;
    %487 = %467.0;
    %488 = %468.0;
    %489 = @func_4186(%471, %472) /* ty=Tensor[(1, 7, 4), uint32] */;
    %490 = logical_xor(%481, %482) /* ty=Tensor[(16, 9, 9), int64] */;
    (%483, %484, %485, %486, %487, %488, %489, meta[relay.Constant][24] /* ty=Tensor[(7), int32] */, meta[relay.Constant][25] /* ty=Tensor[(14, 2), int32] */, %490)
  };
  %491(%var_14732) /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32], Tensor[(3, 16), float32], Tensor[(1, 7, 4), uint32], Tensor[(7), int32], Tensor[(14, 2), int32], Tensor[(16, 9, 9), int64]) */
}

def @func_9774(%var_9772: Tensor[(4, 8, 3), uint16]) -> Tensor[(4, 8, 3), uint16] {
  @func_9771(%var_9772) /* ty=Tensor[(4, 8, 3), uint16] */
}

def @func_11347() -> (Tensor[(3, 16), float32], Tensor[(11, ?, 13), float64], Tensor[(143), int16], Tensor[(3, 16), float32]) {
  %492 = @func_8500() /* ty=(Tensor[(3, 16), float32],) */;
  %493 = cast(meta[relay.Constant][26] /* ty=Tensor[(143), int16] */, dtype="int16") /* ty=Tensor[(143), int16] */;
  %494 = cast(meta[relay.Constant][26] /* ty=Tensor[(143), int16] */, dtype="int16") /* ty=Tensor[(143), int16] */;
  %495 = reshape(%493, newshape=[11, 1, 13]) /* ty=Tensor[(11, 1, 13), int16] */;
  %496 = reshape(%494, newshape=[11, 1, 13]) /* ty=Tensor[(11, 1, 13), int16] */;
  %497 = @func_6624(%495, %496) /* ty=(Tensor[(11, ?, 13), float64],) */;
  %498 = @func_7107() /* ty=(Tensor[(3, 16), float32],) */;
  %499 = %492.0;
  %500 = %497.0;
  %501 = %498.0;
  (%499, %500, meta[relay.Constant][26] /* ty=Tensor[(143), int16] */, %501)
}

def @func_13677() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(14, 4, 6), float32]) {
  %515 = fn () -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(14, 4, 6), float32]) {
    %502 = @func_8832() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(2, 168), bool], Tensor[(6, 7, 14), float32], Tensor[(9, 9, 4), float32], Tensor[(324), float32]) */;
    %503 = %502.1;
    %504 = cast(%503, dtype="bool") /* ty=Tensor[(14, 4, 6), bool] */;
    %505 = reshape(%504, newshape=[336]) /* ty=Tensor[(336), bool] */;
    %506 = @func_3905(%505) /* ty=(Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %507 = cast(%503, dtype="float32") /* ty=Tensor[(14, 4, 6), float32] */;
    %508 = sigmoid(%507) /* ty=Tensor[(14, 4, 6), float32] */;
    %509 = cast(%508, dtype="float64") /* ty=Tensor[(14, 4, 6), float64] */;
    %510 = log10(%509) /* ty=Tensor[(14, 4, 6), float64] */;
    %511 = cast(%510, dtype="float32") /* ty=Tensor[(14, 4, 6), float32] */;
    %512 = @func_12879() /* ty=Tensor[(3, 16), float32] */;
    %513 = %506.0;
    %514 = sqrt(%511) /* ty=Tensor[(14, 4, 6), float32] */;
    (%512, %513, %514)
  };
  %515() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(14, 4, 6), float32]) */
}

def @func_2431() -> (Tensor[(3, 16), float32],) {
  @func_2429() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_7447() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_7445() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_7047() -> (Tensor[(3, 16), float32],) {
  @func_7045() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_4921() -> Tensor[(8, 10, 4), float64] {
  %516 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 10, 4), float64] */, dtype="float64") /* ty=Tensor[(1, 10, 4), float64] */;
  %517 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 10, 4), float64] */, dtype="float64") /* ty=Tensor[(8, 10, 4), float64] */;
  floor_mod(%516, %517) /* ty=Tensor[(8, 10, 4), float64] */
}

def @func_10476() -> (Tensor[(3, 16), float32],) {
  %518 = @func_3493() /* ty=Tensor[(3, 16), float32] */;
  (%518,)
}

def @func_12800() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %523 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %519 = @func_2507() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %520 = @func_7107() /* ty=(Tensor[(3, 16), float32],) */;
    %521 = %519.0;
    %522 = %520.0;
    (%521, %522)
  };
  %523() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_2830() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) {
  %532 = fn () -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) {
    %524 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
    %525 = cast(meta[relay.Constant][29] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %526 = cast(meta[relay.Constant][29] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %527 = reshape(%525, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %528 = reshape(%526, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %529 = @func_489(%527, %528) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
    %530 = %524.0;
    %531 = %529.1;
    (%530, %531, meta[relay.Constant][29] /* ty=Tensor[(336), uint16] */)
  };
  %532() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) */
}

def @func_5172() -> Tensor[(3, 16), float32] {
  %533 = fn () -> Tensor[(3, 16), float32] {
    @func_4323() /* ty=Tensor[(3, 16), float32] */
  };
  %533() /* ty=Tensor[(3, 16), float32] */
}

def @func_4544() -> (Tensor[(3, 16), float32],) {
  %536 = fn () -> (Tensor[(3, 16), float32],) {
    %534 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
    %535 = %534.0;
    (%535,)
  };
  %536() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_2897(%var_2895: Tensor[(12, 10, 4), float64], %var_2896: Tensor[(12, 10, 4), float64]) -> (Tensor[(12, 10, 4), float64],) {
  @func_2893(%var_2895, %var_2896) /* ty=(Tensor[(12, 10, 4), float64],) */
}

def @func_10966() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %537 = @func_9151() /* ty=(Tensor[(3, 16), float32],) */;
  %538 = @func_5495() /* ty=(Tensor[(3, 16), float32],) */;
  %539 = @func_8656() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %540 = @func_6933() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %541 = @func_5905() /* ty=Tensor[(3, 16), float32] */;
  %542 = %537.0;
  %543 = %538.0;
  %544 = %539.1;
  %545 = @func_5989() /* ty=Tensor[(3, 16), float32] */;
  %546 = %540.1;
  (%541, %542, %543, %544, %545, %546)
}

def @func_6492(%var_6455: Tensor[(2475), float32]) -> (Tensor[(3, 16), float32], Tensor[(2475), uint32]) {
  %547 = cast(%var_6455, dtype="float32") /* ty=Tensor[(2475), float32] */;
  %548 = reshape(%547, newshape=[15, 15, 11]) /* ty=Tensor[(15, 15, 11), float32] */;
  %549 = @func_849(%548) /* ty=(Tensor[(15, 15, 11), float32],) */;
  %550 = %549.0;
  %551 = cast(%550, dtype="uint32") /* ty=Tensor[(15, 15, 11), uint32] */;
  %552 = shape_of(%var_6455, dtype="int32") /* ty=Tensor[(1), int32] */;
  %553 = cast(%var_6455, dtype="uint32") /* ty=Tensor[(2475), uint32] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %555 = @func_4623() /* ty=Tensor[(3, 16), float32] */;
  %556 = maximum(%553, %554) /* ty=Tensor[(2475), uint32] */;
  (%555, %556)
}

def @func_5905() -> Tensor[(3, 16), float32] {
  %557 = @func_4844() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %557.1
}

def @func_8658() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_8656() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_12286() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %562 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %558 = @func_4237() /* ty=(Tensor[(3, 16), float32],) */;
    %559 = @func_7095() /* ty=(Tensor[(3, 16), float32],) */;
    %560 = %558.0;
    %561 = %559.0;
    (%560, %561)
  };
  %562() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_12393(%var_12392: Tensor[(448), float32]) -> (Tensor[(3, 16), float32], Tensor[(4, 14, 8), float32], Tensor[(448), float32]) {
  %569 = fn (%var_12383: Tensor[(448), float32]) -> (Tensor[(3, 16), float32], Tensor[(4, 14, 8), float32], Tensor[(448), float32]) {
    %563 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
    %564 = cast(%var_12383, dtype="float32") /* ty=Tensor[(448), float32] */;
    %565 = reshape(%564, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), float32] */;
    %566 = @func_10538(%565) /* ty=(Tensor[(4, 14, 8), float32],) */;
    %567 = %563.0;
    %568 = %566.0;
    (%567, %568, %var_12383)
  };
  %569(%var_12392) /* ty=(Tensor[(3, 16), float32], Tensor[(4, 14, 8), float32], Tensor[(448), float32]) */
}

def @func_13173() -> Tensor[(3, 16), float32] {
  %570 = @func_8656() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %570.1
}

def @func_13580() -> (Tensor[(3, 16), float32], Tensor[(900), float64]) {
  %571 = @func_2429() /* ty=(Tensor[(3, 16), float32],) */;
  %572 = @func_4424() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(336), uint16], Tensor[(900), float64]) */;
  %573 = %571.0;
  %574 = %572.4;
  (%573, %574)
}

def @func_8556(%var_8554: Tensor[(16, 9, 9), int8], %var_8555: Tensor[(16, 9, 9), int8]) -> (Tensor[(16, 9, 9), int8], Tensor[(16, 9, 9), float64]) {
  @func_8552(%var_8554, %var_8555) /* ty=(Tensor[(16, 9, 9), int8], Tensor[(16, 9, 9), float64]) */
}

def @func_11891() -> (Tensor[(3, 16), float32],) {
  %577 = fn () -> (Tensor[(3, 16), float32],) {
    %575 = @func_11812() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %576 = %575.1;
    (%576,)
  };
  %577() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_10527() -> Tensor[(3, 16), float32] {
  %578 = @func_4690() /* ty=(Tensor[(3, 16), float32],) */;
  %578.0
}

def @func_6201() -> (Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64]) {
  @func_6199() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64]) */
}

def @func_7259() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %579 = @func_5814() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %580 = @func_4690() /* ty=(Tensor[(3, 16), float32],) */;
  %581 = %579.0;
  %582 = %580.0;
  (%581, %582)
}

def @func_6276(%var_6274: Tensor[(6, 7, 14), float64]) -> (Tensor[(6, 7, 14), float64], Tensor[(336), uint16], Tensor[(56), float32], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32]) {
  @func_6273(%var_6274) /* ty=(Tensor[(6, 7, 14), float64], Tensor[(336), uint16], Tensor[(56), float32], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32]) */
}

def @func_7775() -> (Tensor[(3, 16), float32],) {
  %583 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  (%583,)
}

def @func_9903() -> (Tensor[(3, 16), float32],) {
  @func_9901() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_10816() -> (Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32]) {
  @func_10814() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32]) */
}

def @func_4499(%var_4496: Tensor[(1, 480), float64], %var_4497: Tensor[(56), float32], %var_4498: Tensor[(336), uint16]) -> (Tensor[(3, 16), float32], Tensor[(12, 10, 4), float64], Tensor[(1, 480), float64], Tensor[(14, 4, 6), uint16], Tensor[(56), float32], Tensor[(336), uint16]) {
  %598 = fn (%var_4482: Tensor[(1, 480), float64], %var_4489: Tensor[(56), float32], %var_4490: Tensor[(336), uint16]) -> (Tensor[(3, 16), float32], Tensor[(12, 10, 4), float64], Tensor[(1, 480), float64], Tensor[(14, 4, 6), uint16], Tensor[(56), float32], Tensor[(336), uint16]) {
    %584 = @func_2652() /* ty=(Tensor[(3, 16), float32],) */;
    %585 = cast(%var_4482, dtype="float64") /* ty=Tensor[(1, 480), float64] */;
    %586 = cast(%var_4482, dtype="float64") /* ty=Tensor[(1, 480), float64] */;
    %587 = reshape(%585, newshape=[12, 10, 4]) /* ty=Tensor[(12, 10, 4), float64] */;
    %588 = reshape(%586, newshape=[12, 10, 4]) /* ty=Tensor[(12, 10, 4), float64] */;
    %589 = @func_2893(%587, %588) /* ty=(Tensor[(12, 10, 4), float64],) */;
    %590 = cast(%var_4489, dtype="float32") /* ty=Tensor[(56), float32] */;
    %591 = cast(%var_4490, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %592 = reshape(%590, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), float32] */;
    %593 = reshape(%591, newshape=[336]) /* ty=Tensor[(336), uint16] */;
    %594 = @func_1464(%592, %593) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(8, 16, 2), float64], Tensor[(4, 64), float64], Tensor[(7, 2, 4), bool]) */;
    %595 = %584.0;
    %596 = %589.0;
    %597 = %594.0;
    (%595, %596, %var_4482, %597, %var_4489, %var_4490)
  };
  %598(%var_4496, %var_4497, %var_4498) /* ty=(Tensor[(3, 16), float32], Tensor[(12, 10, 4), float64], Tensor[(1, 480), float64], Tensor[(14, 4, 6), uint16], Tensor[(56), float32], Tensor[(336), uint16]) */
}

def @func_5715() -> Tensor[(3, 16), float32] {
  %599 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
  %599.0
}

def @func_9676() -> (Tensor[(3, 16), float32],) {
  %600 = @func_4229() /* ty=Tensor[(3, 16), float32] */;
  (%600,)
}

def @func_3837() -> Tensor[(3, 16), float32] {
  %603 = fn () -> Tensor[(3, 16), float32] {
    %601 = @func_3493() /* ty=Tensor[(3, 16), float32] */;
    %602 = cast(%601, dtype="float32") /* ty=Tensor[(3, 16), float32] */;
    acosh(%602) /* ty=Tensor[(3, 16), float32] */
  };
  %603() /* ty=Tensor[(3, 16), float32] */
}

def @func_7743() -> (Tensor[(3, 16), float32],) {
  @func_7741() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_13285() -> (Tensor[(88), uint32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_13283() /* ty=(Tensor[(88), uint32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_4880(%var_4878: Tensor[(4, 1, 14), float32], %var_4879: Tensor[(4, 14, 14), float32]) -> (Tensor[(4, 14, 14), float32], Tensor[(3, 16), float32]) {
  %608 = fn (%var_4855: Tensor[(4, 1, 14), float32], %var_4856: Tensor[(4, 14, 14), float32]) -> (Tensor[(4, 14, 14), float32], Tensor[(3, 16), float32]) {
    %604 = cast(%var_4855, dtype="float32") /* ty=Tensor[(4, 1, 14), float32] */;
    %605 = cast(%var_4856, dtype="float32") /* ty=Tensor[(4, 14, 14), float32] */;
    %606 = floor_divide(%604, %605) /* ty=Tensor[(4, 14, 14), float32] */;
    %607 = @func_4323() /* ty=Tensor[(3, 16), float32] */;
    (%606, %607)
  };
  %608(%var_4878, %var_4879) /* ty=(Tensor[(4, 14, 14), float32], Tensor[(3, 16), float32]) */
}

def @func_5717() -> Tensor[(3, 16), float32] {
  @func_5715() /* ty=Tensor[(3, 16), float32] */
}

def @func_6734() -> Tensor[(3, 16), float32] {
  %609 = fn () -> Tensor[(3, 16), float32] {
    @func_4623() /* ty=Tensor[(3, 16), float32] */
  };
  %609() /* ty=Tensor[(3, 16), float32] */
}

def @func_2536() -> (Tensor[(3, 16), float32],) {
  %610 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
  %611 = %610.0;
  (%611,)
}

def @func_1639(%var_1637: Tensor[(11, 1, 10), uint8], %var_1638: Tensor[(11, 2, 10), uint8]) -> (Tensor[(11, 2, 10), uint8], Tensor[(11, 2, 10), bool]) {
  @func_1635(%var_1637, %var_1638) /* ty=(Tensor[(11, 2, 10), uint8], Tensor[(11, 2, 10), bool]) */
}

def @func_3802() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(3, 16), float32]) {
  @func_3800() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(3, 16), float32]) */
}

def @func_7107() -> (Tensor[(3, 16), float32],) {
  %612 = @func_4229() /* ty=Tensor[(3, 16), float32] */;
  (%612,)
}

def @func_8384() -> (Tensor[(3, 16), float32],) {
  %615 = fn () -> (Tensor[(3, 16), float32],) {
    %613 = @func_3609() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %614 = %613.1;
    (%614,)
  };
  %615() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_2653() -> (Tensor[(3, 16), float32],) {
  %618 = fn () -> (Tensor[(3, 16), float32],) {
    %616 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
    %617 = %616.0;
    (%617,)
  };
  %618() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_5495() -> (Tensor[(3, 16), float32],) {
  %619 = @func_4237() /* ty=(Tensor[(3, 16), float32],) */;
  %620 = %619.0;
  (%620,)
}

def @func_10814() -> (Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32]) {
  %621 = @func_10001() /* ty=(Tensor[(3, 16), float32],) */;
  %622 = @func_6199() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64]) */;
  %623 = %622.1;
  %624 = cast(%623, dtype="float32") /* ty=Tensor[(6, 7, 14), float32] */;
  %625 = %621.0;
  %626 = sqrt(%624) /* ty=Tensor[(6, 7, 14), float32] */;
  (%625, %626)
}

def @func_1635(%var_1623: Tensor[(11, 1, 10), uint8], %var_1624: Tensor[(11, 2, 10), uint8]) -> (Tensor[(11, 2, 10), uint8], Tensor[(11, 2, 10), bool]) {
  %627 = cast(%var_1623, dtype="uint8") /* ty=Tensor[(11, 1, 10), uint8] */;
  %628 = cast(%var_1624, dtype="uint8") /* ty=Tensor[(11, 2, 10), uint8] */;
  %629 = cast(%var_1624, dtype="bool") /* ty=Tensor[(11, 2, 10), bool] */;
  %630 = cast(%var_1623, dtype="bool") /* ty=Tensor[(11, 1, 10), bool] */;
  %631 = add(%627, %628) /* ty=Tensor[(11, 2, 10), uint8] */;
  %632 = less(%629, %630) /* ty=Tensor[(11, 2, 10), bool] */;
  (%631, %632)
}

def @func_5519() -> (Tensor[(3, 16), float32],) {
  %635 = fn () -> (Tensor[(3, 16), float32],) {
    %633 = @func_2587() /* ty=(Tensor[(3, 16), float32],) */;
    %634 = %633.0;
    (%634,)
  };
  %635() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_9360() -> Tensor[(3, 16), float32] {
  %637 = fn () -> Tensor[(3, 16), float32] {
    %636 = @func_2587() /* ty=(Tensor[(3, 16), float32],) */;
    %636.0
  };
  %637() /* ty=Tensor[(3, 16), float32] */
}

def @func_11665() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %642 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %638 = @func_2536() /* ty=(Tensor[(3, 16), float32],) */;
    %639 = @func_8025() /* ty=(Tensor[(3, 16), float32],) */;
    %640 = %638.0;
    %641 = %639.0;
    (%640, %641)
  };
  %642() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_7080() -> (Tensor[(3, 16), float32],) {
  @func_7078() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_9199() -> Tensor[(3, 16), float32] {
  %643 = @func_6976() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %643.0
}

def @func_6006() -> Tensor[(3, 16), float32] {
  @func_6004() /* ty=Tensor[(3, 16), float32] */
}

def @func_7531() -> Tensor[(3, 16), float32] {
  %645 = fn () -> Tensor[(3, 16), float32] {
    %644 = @func_7445() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %644.0
  };
  %645() /* ty=Tensor[(3, 16), float32] */
}

def @func_14118(%var_14116: Tensor[(14, 14, 6), int64]) -> (Tensor[(14, 14, 6), int64],) {
  @func_14115(%var_14116) /* ty=(Tensor[(14, 14, 6), int64],) */
}

def @func_7958() -> (Tensor[(3, 16), float32],) {
  %646 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  (%646,)
}

def @func_10731(%var_10666: Tensor[(1848), float64], %var_10690: Tensor[(300), float64], %var_10725: Tensor[(144), int8]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 12, 11), float64], Tensor[(1848), bool], Tensor[(3, 16), float32], Tensor[(300), float64], Tensor[(3, 16), float32], int8, Tensor[(144), int8], Tensor[(56), float32], Tensor[(336), uint16]) {
  %647 = @func_7346() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %648 = cast(meta[relay.Constant][30] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %649 = reshape(%648, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), float64] */;
  %650 = @func_9693(%649) /* ty=(Tensor[(14, 12, 11), float64],) */;
  %651 = cast(%var_10666, dtype="bool") /* ty=Tensor[(1848), bool] */;
  %652 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(1848), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %653 = cast(meta[relay.Constant][30] /* ty=Tensor[(1848), float64] */, dtype="bool") /* ty=Tensor[(1848), bool] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?), bool] */;
  %655 = cast(%var_10690, dtype="float64") /* ty=Tensor[(300), float64] */;
  %656 = reshape(%655, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %657 = @func_9937(%656) /* ty=(Tensor[(3, 16), float32], Tensor[(168, 2), float64], Tensor[(300), float64]) */;
  %658 = cast(meta[relay.Constant][31] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %659 = cast(%var_10725, dtype="int8") /* ty=Tensor[(144), int8] */;
  %660 = cast(meta[relay.Constant][32] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
  %661 = cast(meta[relay.Constant][33] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %662 = reshape(%658, newshape=[]) /* ty=int8 */;
  %663 = reshape(%659, newshape=[144]) /* ty=Tensor[(144), int8] */;
  %664 = reshape(%660, newshape=[56]) /* ty=Tensor[(56), float32] */;
  %665 = reshape(%661, newshape=[336]) /* ty=Tensor[(336), uint16] */;
  %666 = @func_3094(%662, %663, %664, %665) /* ty=(Tensor[(3, 16), float32], Tensor[(8, 9, 2), int8], int8, Tensor[(144), int8], Tensor[(56), float32], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) */;
  %667 = @func_4362() /* ty=Tensor[(3, 16), float32] */;
  %668 = %647.0;
  %669 = %650.0;
  %670 = logical_and(%653, %654) /* ty=Tensor[(1848), bool] */;
  %671 = %657.0;
  %672 = %666.6;
  (%667, %668, %669, %670, %671, %var_10690, %672, meta[relay.Constant][31] /* ty=int8 */, %var_10725, meta[relay.Constant][32] /* ty=Tensor[(56), float32] */, meta[relay.Constant][33] /* ty=Tensor[(336), uint16] */)
}

def @func_4145(%var_4143: Tensor[(6, 1, 2), int32], %var_4144: Tensor[(6, 6, 2), int32]) -> Tensor[(6, 6, 2), uint64] {
  @func_4141(%var_4143, %var_4144) /* ty=Tensor[(6, 6, 2), uint64] */
}

def @func_12245() -> (Tensor[(3, 16), float32], Tensor[(6, 7, 14), uint64]) {
  @func_12243() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), uint64]) */
}

def @func_12715() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %673 = @func_7259() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %674 = @func_10966() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %675 = %673.1;
  %676 = %674.2;
  (%675, %676)
}

def @func_8710() -> (Tensor[(3, 16), float32],) {
  %677 = @func_3464() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %678 = %677.1;
  (%678,)
}

def @func_11077() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %679 = @func_9243() /* ty=(Tensor[(3, 16), float32],) */;
  %680 = @func_4555() /* ty=Tensor[(3, 16), float32] */;
  %681 = %679.0;
  (%680, %681)
}

def @func_6273(%var_6247: Tensor[(6, 7, 14), float64]) -> (Tensor[(6, 7, 14), float64], Tensor[(336), uint16], Tensor[(56), float32], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(6, 7, 14), float32]) {
  %682 = @func_6199() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64]) */;
  %683 = %682.1;
  %684 = cast(%var_6247, dtype="float64") /* ty=Tensor[(6, 7, 14), float64] */;
  %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%683, dtype="float64") /* ty=Tensor[(6, 7, 14), float64] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %688 = cast(meta[relay.Constant][34] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
  %689 = cast(meta[relay.Constant][35] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %690 = reshape(%688, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), float32] */;
  %691 = reshape(%689, newshape=[336]) /* ty=Tensor[(336), uint16] */;
  %692 = @func_1464(%690, %691) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(8, 16, 2), float64], Tensor[(4, 64), float64], Tensor[(7, 2, 4), bool]) */;
  %693 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
  %694 = @func_2792() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %695 = cast(%var_6247, dtype="float32") /* ty=Tensor[(6, 7, 14), float32] */;
  %696 = mod(%686, %687) /* ty=Tensor[(6, 7, 14), float64] */;
  %697 = %692.1;
  %698 = %693.0;
  %699 = %694.0;
  %700 = cos(%695) /* ty=Tensor[(6, 7, 14), float32] */;
  (%696, %697, meta[relay.Constant][34] /* ty=Tensor[(56), float32] */, meta[relay.Constant][35] /* ty=Tensor[(336), uint16] */, %698, %699, %700)
}

def @func_1715(%var_1711: int8, %var_1712: Tensor[(8, 9, 2), int8], %var_1713: Tensor[(56), float32], %var_1714: Tensor[(336), uint16]) -> (Tensor[(8, 9, 2), int8], Tensor[(7, 2, 4), bool], Tensor[(56), float32], Tensor[(336), uint16]) {
  %710 = fn (%var_1673: int8, %var_1674: Tensor[(8, 9, 2), int8], %var_1680: Tensor[(56), float32], %var_1681: Tensor[(336), uint16]) -> (Tensor[(8, 9, 2), int8], Tensor[(7, 2, 4), bool], Tensor[(56), float32], Tensor[(336), uint16]) {
    %701 = cast(%var_1673, dtype="int8") /* ty=int8 */;
    %702 = cast(%var_1674, dtype="int8") /* ty=Tensor[(8, 9, 2), int8] */;
    %703 = cast(%var_1680, dtype="float32") /* ty=Tensor[(56), float32] */;
    %704 = cast(%var_1681, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %705 = reshape(%703, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), float32] */;
    %706 = reshape(%704, newshape=[336]) /* ty=Tensor[(336), uint16] */;
    %707 = @func_1464(%705, %706) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(8, 16, 2), float64], Tensor[(4, 64), float64], Tensor[(7, 2, 4), bool]) */;
    %708 = logical_xor(%701, %702) /* ty=Tensor[(8, 9, 2), int8] */;
    %709 = %707.4;
    (%708, %709, %var_1680, %var_1681)
  };
  %710(%var_1711, %var_1712, %var_1713, %var_1714) /* ty=(Tensor[(8, 9, 2), int8], Tensor[(7, 2, 4), bool], Tensor[(56), float32], Tensor[(336), uint16]) */
}

def @func_6355() -> Tensor[(6, 7, 14), float32] {
  %712 = fn () -> Tensor[(6, 7, 14), float32] {
    %711 = @func_4757() /* ty=(Tensor[(6, 7, 14), float32],) */;
    %711.0
  };
  %712() /* ty=Tensor[(6, 7, 14), float32] */
}

def @func_15197() -> Tensor[(6, 7, 14), float32] {
  %714 = fn () -> Tensor[(6, 7, 14), float32] {
    %713 = @func_4757() /* ty=(Tensor[(6, 7, 14), float32],) */;
    %713.0
  };
  %714() /* ty=Tensor[(6, 7, 14), float32] */
}

def @func_4141(%var_4119: Tensor[(6, 1, 2), int32], %var_4120: Tensor[(6, 6, 2), int32]) -> Tensor[(6, 6, 2), uint64] {
  %715 = cast(%var_4119, dtype="int32") /* ty=Tensor[(6, 1, 2), int32] */;
  %716 = cast(%var_4120, dtype="int32") /* ty=Tensor[(6, 6, 2), int32] */;
  %717 = right_shift(%715, %716) /* ty=Tensor[(6, 6, 2), int32] */;
  %718 = cast(%var_4120, dtype="uint64") /* ty=Tensor[(6, 6, 2), uint64] */;
  %719 = shape_of(%717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%717, dtype="uint64") /* ty=Tensor[(6, 6, 2), uint64] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  maximum(%720, %721) /* ty=Tensor[(6, 6, 2), uint64] */
}

def @func_5816() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_5814() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_10587() -> (Tensor[(3, 16), float32],) {
  %724 = fn () -> (Tensor[(3, 16), float32],) {
    %722 = @func_4660() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) */;
    %723 = %722.0;
    (%723,)
  };
  %724() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_3027() -> (Tensor[(3, 16), float32],) {
  %727 = fn () -> (Tensor[(3, 16), float32],) {
    %725 = @func_2792() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %726 = %725.0;
    (%726,)
  };
  %727() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_8500() -> (Tensor[(3, 16), float32],) {
  %728 = @func_4690() /* ty=(Tensor[(3, 16), float32],) */;
  %729 = %728.0;
  (%729,)
}

def @func_11814() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_11812() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_15446() -> (Tensor[(3, 16), float32], Tensor[(96), uint16], Tensor[(3, 16), float32], Tensor[(4, 8, 3), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %747 = fn () -> (Tensor[(3, 16), float32], Tensor[(96), uint16], Tensor[(3, 16), float32], Tensor[(4, 8, 3), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %730 = @func_2829() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) */;
    %731 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
    %732 = cast(meta[relay.Constant][36] /* ty=Tensor[(96), uint16] */, dtype="uint16") /* ty=Tensor[(96), uint16] */;
    %733 = reshape(%732, newshape=[4, 8, 3]) /* ty=Tensor[(4, 8, 3), uint16] */;
    %734 = @func_9771(%733) /* ty=Tensor[(4, 8, 3), uint16] */;
    %735 = cast(%734, dtype="float64") /* ty=Tensor[(4, 8, 3), float64] */;
    %736 = asinh(%735) /* ty=Tensor[(4, 8, 3), float64] */;
    %737 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 8, 3), float64] */, dtype="bool") /* ty=Tensor[(4, 8, 3), bool] */;
    %738 = shape_of(%736, dtype="int32") /* ty=Tensor[(3), int32] */;
    %739 = cast(%736, dtype="bool") /* ty=Tensor[(4, 8, 3), bool] */;
    %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %741 = @func_7600() /* ty=(Tensor[(3, 16), float32],) */;
    %742 = %730.0;
    %743 = %731.0;
    %744 = logical_and(%739, %740) /* ty=Tensor[(4, 8, 3), bool] */;
    %745 = %741.0;
    %746 = @func_10244() /* ty=Tensor[(3, 16), float32] */;
    (%742, meta[relay.Constant][36] /* ty=Tensor[(96), uint16] */, %743, %744, %745, %746)
  };
  %747() /* ty=(Tensor[(3, 16), float32], Tensor[(96), uint16], Tensor[(3, 16), float32], Tensor[(4, 8, 3), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_10087() -> (Tensor[(11, 7, 5), bool], Tensor[(11, ?, 13), float64], Tensor[(143), int16]) {
  %748 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 7, 5), float32] */, dtype="bool") /* ty=Tensor[(11, 7, 5), bool] */;
  %749 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(11, 7, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 7, 5), float32] */, dtype="bool") /* ty=Tensor[(11, 7, 5), bool] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %752 = cast(meta[relay.Constant][40] /* ty=Tensor[(143), int16] */, dtype="int16") /* ty=Tensor[(143), int16] */;
  %753 = cast(meta[relay.Constant][40] /* ty=Tensor[(143), int16] */, dtype="int16") /* ty=Tensor[(143), int16] */;
  %754 = reshape(%752, newshape=[11, 1, 13]) /* ty=Tensor[(11, 1, 13), int16] */;
  %755 = reshape(%753, newshape=[11, 1, 13]) /* ty=Tensor[(11, 1, 13), int16] */;
  %756 = @func_6624(%754, %755) /* ty=(Tensor[(11, ?, 13), float64],) */;
  %757 = equal(%750, %751) /* ty=Tensor[(11, 7, 5), bool] */;
  %758 = %756.0;
  (%757, %758, meta[relay.Constant][40] /* ty=Tensor[(143), int16] */)
}

def @func_11153() -> Tensor[(3, 16), float32] {
  @func_6733() /* ty=Tensor[(3, 16), float32] */
}

def @func_15775() -> Tensor[(3, 16), float32] {
  @func_15773() /* ty=Tensor[(3, 16), float32] */
}

def @func_9579() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(12, 10, 4), float64], Tensor[(480), float64]) {
  %759 = cast(meta[relay.Constant][41] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %760 = reshape(%759, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), bool] */;
  %761 = @func_3551(%760) /* ty=(Tensor[(14, 4, 6), float32],) */;
  %762 = @func_8084() /* ty=(Tensor[(3, 16), float32],) */;
  %763 = cast(meta[relay.Constant][42] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %764 = cast(meta[relay.Constant][42] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %765 = reshape(%763, newshape=[12, 10, 4]) /* ty=Tensor[(12, 10, 4), float64] */;
  %766 = reshape(%764, newshape=[12, 10, 4]) /* ty=Tensor[(12, 10, 4), float64] */;
  %767 = @func_2893(%765, %766) /* ty=(Tensor[(12, 10, 4), float64],) */;
  %768 = @func_4229() /* ty=Tensor[(3, 16), float32] */;
  %769 = %761.0;
  %770 = %762.0;
  %771 = %767.0;
  (%768, %769, meta[relay.Constant][41] /* ty=Tensor[(336), bool] */, %770, %771, meta[relay.Constant][42] /* ty=Tensor[(480), float64] */)
}

def @func_3609() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %772 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
  %773 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
  %774 = %772.0;
  %775 = %773.0;
  (%774, %775)
}

def @func_14609() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) {
  @func_14607() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) */
}

def @func_6495(%var_6493: Tensor[(2475), float32]) -> (Tensor[(3, 16), float32], Tensor[(2475), uint32]) {
  @func_6492(%var_6493) /* ty=(Tensor[(3, 16), float32], Tensor[(2475), uint32]) */
}

def @func_11681() -> Tensor[(3, 16), float32] {
  %776 = @func_6235() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(11, 2, 10), bool], Tensor[(110), uint8], Tensor[(220), uint8], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %776.5
}

def @func_8236(%var_8205: Tensor[(2, 11, 4), uint32], %var_8206: Tensor[(2, 11, 4), uint32]) -> (Tensor[(2, 11, 4), bool], Tensor[(2, 11, 4), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %777 = cast(%var_8206, dtype="bool") /* ty=Tensor[(2, 11, 4), bool] */;
  %778 = shape_of(%var_8205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%var_8205, dtype="bool") /* ty=Tensor[(2, 11, 4), bool] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %781 = cast(%var_8205, dtype="float64") /* ty=Tensor[(2, 11, 4), float64] */;
  %782 = not_equal(%779, %780) /* ty=Tensor[(2, 11, 4), bool] */;
  %783 = acos(%781) /* ty=Tensor[(2, 11, 4), float64] */;
  %784 = @func_7355() /* ty=Tensor[(3, 16), float32] */;
  %785 = @func_4323() /* ty=Tensor[(3, 16), float32] */;
  (%782, %783, %784, %785)
}

def @func_8427(%var_8415: Tensor[(140), uint64], %var_8416: Tensor[(256), float64]) -> (Tensor[(3, 16), float32], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64]) {
  %786 = @func_5814() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %787 = cast(%var_8415, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %788 = cast(%var_8416, dtype="float64") /* ty=Tensor[(256), float64] */;
  %789 = reshape(%787, newshape=[140]) /* ty=Tensor[(140), uint64] */;
  %790 = reshape(%788, newshape=[256]) /* ty=Tensor[(256), float64] */;
  %791 = @func_1934(%789, %790) /* ty=(Tensor[(15, 15, 11), float32], Tensor[(5, 495), float32], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(13, 4, 11), float32]) */;
  %792 = %786.1;
  %793 = %791.2;
  (%792, %793, %var_8415, %var_8416)
}

def @func_14349(%var_14340: Tensor[(3, 6, 3), bool], %var_14341: Tensor[(3, 6, 3), bool]) -> Tensor[(3, 6, 3), bool] {
  %794 = cast(%var_14341, dtype="bool") /* ty=Tensor[(3, 6, 3), bool] */;
  %795 = shape_of(%var_14340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %796 = cast(%var_14340, dtype="bool") /* ty=Tensor[(3, 6, 3), bool] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%796, %797) /* ty=Tensor[(3, 6, 3), bool] */
}

def @func_10245() -> Tensor[(3, 16), float32] {
  %799 = fn () -> Tensor[(3, 16), float32] {
    %798 = @func_6667() /* ty=(Tensor[(3, 16), float32],) */;
    %798.0
  };
  %799() /* ty=Tensor[(3, 16), float32] */
}

def @func_7918() -> (Tensor[(3, 16), float32],) {
  @func_7916() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_6667() -> (Tensor[(3, 16), float32],) {
  %800 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
  %801 = %800.0;
  (%801,)
}

def @func_11155() -> Tensor[(3, 16), float32] {
  @func_11153() /* ty=Tensor[(3, 16), float32] */
}

def @func_12524() -> Tensor[(3, 16), float32] {
  %802 = @func_8025() /* ty=(Tensor[(3, 16), float32],) */;
  %802.0
}

def @func_4959() -> (Tensor[(14, 4, 6), float32], Tensor[(8, 10, 4), float64]) {
  %803 = @func_4660() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) */;
  %804 = %803.1;
  %805 = cast(%804, dtype="float32") /* ty=Tensor[(14, 4, 6), float32] */;
  %806 = cosh(%805) /* ty=Tensor[(14, 4, 6), float32] */;
  %807 = cast(%806, dtype="float32") /* ty=Tensor[(14, 4, 6), float32] */;
  %808 = acosh(%807) /* ty=Tensor[(14, 4, 6), float32] */;
  %809 = @func_4921() /* ty=Tensor[(8, 10, 4), float64] */;
  (%808, %809)
}

def @func_8700() -> (Tensor[(3, 16), float32],) {
  %811 = fn () -> (Tensor[(3, 16), float32],) {
    %810 = @func_4362() /* ty=Tensor[(3, 16), float32] */;
    (%810,)
  };
  %811() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_10540(%var_10539: Tensor[(4, 14, 8), float32]) -> (Tensor[(4, 14, 8), float32],) {
  %814 = fn (%var_10530: Tensor[(4, 14, 8), float32]) -> (Tensor[(4, 14, 8), float32],) {
    %812 = cast(%var_10530, dtype="float32") /* ty=Tensor[(4, 14, 8), float32] */;
    %813 = asinh(%812) /* ty=Tensor[(4, 14, 8), float32] */;
    (%813,)
  };
  %814(%var_10539) /* ty=(Tensor[(4, 14, 8), float32],) */
}

def @func_7885() -> (Tensor[(6, 7, 14), float32],) {
  %816 = fn () -> (Tensor[(6, 7, 14), float32],) {
    %815 = @func_6354() /* ty=Tensor[(6, 7, 14), float32] */;
    (%815,)
  };
  %816() /* ty=(Tensor[(6, 7, 14), float32],) */
}

def @func_9678() -> (Tensor[(3, 16), float32],) {
  @func_9676() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_438(%var_437: Tensor[(8, 16, 2), float64]) -> Tensor[(8, 16, 2), float64] {
  %818 = fn (%var_426: Tensor[(8, 16, 2), float64]) -> Tensor[(8, 16, 2), float64] {
    %817 = cast(%var_426, dtype="float64") /* ty=Tensor[(8, 16, 2), float64] */;
    erf(%817) /* ty=Tensor[(8, 16, 2), float64] */
  };
  %818(%var_437) /* ty=Tensor[(8, 16, 2), float64] */
}

def @func_2893(%var_2884: Tensor[(12, 10, 4), float64], %var_2885: Tensor[(12, 10, 4), float64]) -> (Tensor[(12, 10, 4), float64],) {
  %819 = cast(%var_2885, dtype="float64") /* ty=Tensor[(12, 10, 4), float64] */;
  %820 = shape_of(%var_2884, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = cast(%var_2884, dtype="float64") /* ty=Tensor[(12, 10, 4), float64] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %823 = floor_divide(%821, %822) /* ty=Tensor[(12, 10, 4), float64] */;
  (%823,)
}

def @func_8834() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(2, 168), bool], Tensor[(6, 7, 14), float32], Tensor[(9, 9, 4), float32], Tensor[(324), float32]) {
  @func_8832() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(2, 168), bool], Tensor[(6, 7, 14), float32], Tensor[(9, 9, 4), float32], Tensor[(324), float32]) */
}

def @func_4624() -> Tensor[(3, 16), float32] {
  %825 = fn () -> Tensor[(3, 16), float32] {
    %824 = @func_3026() /* ty=(Tensor[(3, 16), float32],) */;
    %824.0
  };
  %825() /* ty=Tensor[(3, 16), float32] */
}

def @func_11459() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %830 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %826 = @func_4844() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %827 = @func_3026() /* ty=(Tensor[(3, 16), float32],) */;
    %828 = %826.0;
    %829 = %827.0;
    (%828, %829)
  };
  %830() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_15773() -> Tensor[(3, 16), float32] {
  %831 = @func_2719() /* ty=(Tensor[(3, 16), float32],) */;
  %831.0
}

def @func_3441(%var_3438: Tensor[(336), uint16], %var_3439: Tensor[(144), int8], %var_3440: Tensor[(56), float32]) -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(56), float32], int8, Tensor[(144), int8], Tensor[(56), float32]) {
  %852 = fn (%var_3399: Tensor[(336), uint16], %var_3423: Tensor[(144), int8], %var_3424: Tensor[(56), float32]) -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(56), float32], int8, Tensor[(144), int8], Tensor[(56), float32]) {
    %832 = @func_2719() /* ty=(Tensor[(3, 16), float32],) */;
    %833 = cast(%var_3399, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %834 = cast(%var_3399, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %835 = reshape(%833, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %836 = reshape(%834, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %837 = @func_489(%835, %836) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
    %838 = @func_2480() /* ty=(Tensor[(3, 16), float32],) */;
    %839 = cast(meta[relay.Constant][43] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %840 = cast(%var_3423, dtype="int8") /* ty=Tensor[(144), int8] */;
    %841 = cast(%var_3424, dtype="float32") /* ty=Tensor[(56), float32] */;
    %842 = cast(%var_3399, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %843 = reshape(%839, newshape=[]) /* ty=int8 */;
    %844 = reshape(%840, newshape=[8, 9, 2]) /* ty=Tensor[(8, 9, 2), int8] */;
    %845 = reshape(%841, newshape=[56]) /* ty=Tensor[(56), float32] */;
    %846 = reshape(%842, newshape=[336]) /* ty=Tensor[(336), uint16] */;
    %847 = @func_1710(%843, %844, %845, %846) /* ty=(Tensor[(8, 9, 2), int8], Tensor[(7, 2, 4), bool], Tensor[(56), float32], Tensor[(336), uint16]) */;
    %848 = %832.0;
    %849 = %837.0;
    %850 = %838.0;
    %851 = %847.2;
    (%848, %849, %var_3399, %850, %851, meta[relay.Constant][43] /* ty=int8 */, %var_3423, %var_3424)
  };
  %852(%var_3438, %var_3439, %var_3440) /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(56), float32], int8, Tensor[(144), int8], Tensor[(56), float32]) */
}

def @func_13257() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %857 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %853 = @func_4254() /* ty=(Tensor[(3, 16), float32],) */;
    %854 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
    %855 = %853.0;
    %856 = %854.0;
    (%855, %856)
  };
  %857() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_15948() -> (Tensor[(3, 16), float32],) {
  @func_15946() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_10329(%var_10327: Tensor[(336), bool]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(8, 10, 4), float64], Tensor[(9, 9, 4), float32], Tensor[(336), bool]) {
  @func_10326(%var_10327) /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(8, 10, 4), float64], Tensor[(9, 9, 4), float32], Tensor[(336), bool]) */
}

def @func_8832() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(2, 168), bool], Tensor[(6, 7, 14), float32], Tensor[(9, 9, 4), float32], Tensor[(324), float32]) {
  %858 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 168), bool] */, dtype="bool") /* ty=Tensor[(2, 168), bool] */;
  %859 = reshape(%858, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), bool] */;
  %860 = @func_3551(%859) /* ty=(Tensor[(14, 4, 6), float32],) */;
  %861 = @func_2755() /* ty=(Tensor[(6, 7, 14), float32],) */;
  %862 = cast(meta[relay.Constant][45] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %863 = reshape(%862, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
  %864 = @func_7623() /* ty=Tensor[(3, 16), float32] */;
  %865 = %860.0;
  %866 = %861.0;
  %867 = @func_5358(%863) /* ty=Tensor[(9, 9, 4), float32] */;
  (%864, %865, meta[relay.Constant][44] /* ty=Tensor[(2, 168), bool] */, %866, %867, meta[relay.Constant][45] /* ty=Tensor[(324), float32] */)
}

def @func_9758() -> (Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(6, 6, 2), uint64], Tensor[(12), int32], Tensor[(72), int32]) {
  %878 = fn () -> (Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(6, 6, 2), uint64], Tensor[(12), int32], Tensor[(72), int32]) {
    %868 = @func_6559() /* ty=(Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32]) */;
    %869 = @func_2652() /* ty=(Tensor[(3, 16), float32],) */;
    %870 = cast(meta[relay.Constant][46] /* ty=Tensor[(12), int32] */, dtype="int32") /* ty=Tensor[(12), int32] */;
    %871 = cast(meta[relay.Constant][47] /* ty=Tensor[(72), int32] */, dtype="int32") /* ty=Tensor[(72), int32] */;
    %872 = reshape(%870, newshape=[6, 1, 2]) /* ty=Tensor[(6, 1, 2), int32] */;
    %873 = reshape(%871, newshape=[6, 6, 2]) /* ty=Tensor[(6, 6, 2), int32] */;
    %874 = %868.0;
    %875 = %869.0;
    %876 = @func_7821() /* ty=Tensor[(3, 16), float32] */;
    %877 = @func_4141(%872, %873) /* ty=Tensor[(6, 6, 2), uint64] */;
    (%874, %875, %876, %877, meta[relay.Constant][46] /* ty=Tensor[(12), int32] */, meta[relay.Constant][47] /* ty=Tensor[(72), int32] */)
  };
  %878() /* ty=(Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(6, 6, 2), uint64], Tensor[(12), int32], Tensor[(72), int32]) */
}

def @func_10002() -> (Tensor[(3, 16), float32],) {
  %881 = fn () -> (Tensor[(3, 16), float32],) {
    %879 = @func_3642() /* ty=(Tensor[(3, 16), float32],) */;
    %880 = %879.0;
    (%880,)
  };
  %881() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_11021() -> (Tensor[(3, 16), float32],) {
  @func_11019() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_5907() -> Tensor[(3, 16), float32] {
  @func_5905() /* ty=Tensor[(3, 16), float32] */
}

def @func_2214(%var_2212: Tensor[(4, 15, 15), float64], %var_2213: Tensor[(336), uint16]) -> (Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(4, 15, 15), float64], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(14, 4, 6), uint16]) {
  %907 = fn (%var_2169: Tensor[(4, 15, 15), float64], %var_2180: Tensor[(336), uint16]) -> (Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(4, 15, 15), float64], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(14, 4, 6), uint16]) {
    %882 = cast(%var_2180, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %883 = cast(%var_2180, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %884 = reshape(%882, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %885 = reshape(%883, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %886 = @func_489(%884, %885) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
    %887 = cast(%var_2169, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
    %888 = tan(%887) /* ty=Tensor[(4, 15, 15), float64] */;
    %889 = cast(%var_2169, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
    %890 = shape_of(%888, dtype="int32") /* ty=Tensor[(3), int32] */;
    %891 = cast(%888, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
    %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %893 = cast(meta[relay.Constant][48] /* ty=Tensor[(140), uint64] */, dtype="uint64") /* ty=Tensor[(140), uint64] */;
    %894 = cast(meta[relay.Constant][49] /* ty=Tensor[(256), float64] */, dtype="float64") /* ty=Tensor[(256), float64] */;
    %895 = reshape(%893, newshape=[140]) /* ty=Tensor[(140), uint64] */;
    %896 = reshape(%894, newshape=[256]) /* ty=Tensor[(256), float64] */;
    %897 = @func_1934(%895, %896) /* ty=(Tensor[(15, 15, 11), float32], Tensor[(5, 495), float32], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(13, 4, 11), float32]) */;
    %898 = cast(%var_2180, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %899 = cast(%var_2180, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %900 = reshape(%898, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %901 = reshape(%899, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %902 = @func_489(%900, %901) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
    %903 = %886.1;
    %904 = divide(%891, %892) /* ty=Tensor[(4, 15, 15), float64] */;
    %905 = %897.2;
    %906 = %902.0;
    (%903, %var_2180, %904, %905, meta[relay.Constant][48] /* ty=Tensor[(140), uint64] */, meta[relay.Constant][49] /* ty=Tensor[(256), float64] */, %906)
  };
  %907(%var_2212, %var_2213) /* ty=(Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(4, 15, 15), float64], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(14, 4, 6), uint16]) */
}

def @func_12735(%var_12725: Tensor[(5, 16, 1), float64], %var_12726: Tensor[(5, 16, 1), float64]) -> Tensor[(5, 16, ?), float64] {
  %908 = cast(%var_12726, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
  %909 = shape_of(%var_12725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %910 = cast(%var_12725, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
  %911 = dyn.reshape(%908, %909, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%910, %911) /* ty=Tensor[(5, 16, ?), float64] */
}

def @func_4923() -> Tensor[(8, 10, 4), float64] {
  @func_4921() /* ty=Tensor[(8, 10, 4), float64] */
}

def @func_492(%var_490: Tensor[(14, 4, 6), uint16], %var_491: Tensor[(14, 4, 6), uint16]) -> (Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) {
  %922 = fn (%var_478: Tensor[(14, 4, 6), uint16], %var_479: Tensor[(14, 4, 6), uint16]) -> (Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) {
    %912 = cast(%var_479, dtype="uint16") /* ty=Tensor[(14, 4, 6), uint16] */;
    %913 = shape_of(%var_478, dtype="int32") /* ty=Tensor[(3), int32] */;
    %914 = cast(%var_478, dtype="uint16") /* ty=Tensor[(14, 4, 6), uint16] */;
    %915 = dyn.reshape(%912, %913, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %916 = cast(%var_478, dtype="bool") /* ty=Tensor[(14, 4, 6), bool] */;
    %917 = shape_of(%var_479, dtype="int32") /* ty=Tensor[(3), int32] */;
    %918 = cast(%var_479, dtype="bool") /* ty=Tensor[(14, 4, 6), bool] */;
    %919 = dyn.reshape(%916, %917, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %920 = logical_xor(%914, %915) /* ty=Tensor[(14, 4, 6), uint16] */;
    %921 = less(%918, %919) /* ty=Tensor[(14, 4, 6), bool] */;
    (%920, %921)
  };
  %922(%var_490, %var_491) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */
}

def @func_12717() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_12715() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_14005() -> Tensor[(5, 6, 4), float32] {
  %924 = fn () -> Tensor[(5, 6, 4), float32] {
    %923 = cast(meta[relay.Constant][50] /* ty=Tensor[(5, 6, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 6, 4), float32] */;
    acos(%923) /* ty=Tensor[(5, 6, 4), float32] */
  };
  %924() /* ty=Tensor[(5, 6, 4), float32] */
}

def @func_12243() -> (Tensor[(3, 16), float32], Tensor[(6, 7, 14), uint64]) {
  %925 = @func_6199() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64]) */;
  %926 = %925.1;
  %927 = cast(%926, dtype="float64") /* ty=Tensor[(6, 7, 14), float64] */;
  %928 = tan(%927) /* ty=Tensor[(6, 7, 14), float64] */;
  %929 = cast(%928, dtype="uint64") /* ty=Tensor[(6, 7, 14), uint64] */;
  %930 = shape_of(%926, dtype="int32") /* ty=Tensor[(3), int32] */;
  %931 = cast(%926, dtype="uint64") /* ty=Tensor[(6, 7, 14), uint64] */;
  %932 = dyn.reshape(%929, %930, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %933 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
  %934 = bitwise_and(%931, %932) /* ty=Tensor[(6, 7, 14), uint64] */;
  (%933, %934)
}

def @func_2538() -> (Tensor[(3, 16), float32],) {
  @func_2536() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_8431(%var_8429: Tensor[(140), uint64], %var_8430: Tensor[(256), float64]) -> (Tensor[(3, 16), float32], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64]) {
  @func_8427(%var_8429, %var_8430) /* ty=(Tensor[(3, 16), float32], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64]) */
}

def @func_6141() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %935 = @func_2507() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %936 = %935.1;
  %937 = @func_5202() /* ty=Tensor[(3, 16), float32] */;
  (%936, %937)
}

def @func_13541(%var_13539: Tensor[(10, 6, 2), uint8], %var_13540: Tensor[(10, 6, 2), uint8]) -> (Tensor[(10, 6, 2), bool],) {
  @func_13537(%var_13539, %var_13540) /* ty=(Tensor[(10, 6, 2), bool],) */
}

def @func_12336() -> Tensor[(3, 16), float32] {
  %939 = fn () -> Tensor[(3, 16), float32] {
    %938 = @func_10021() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %938.0
  };
  %939() /* ty=Tensor[(3, 16), float32] */
}

def @func_15614() -> Tensor[(3, 16), float32] {
  %940 = fn () -> Tensor[(3, 16), float32] {
    @func_12335() /* ty=Tensor[(3, 16), float32] */
  };
  %940() /* ty=Tensor[(3, 16), float32] */
}

def @func_887(%var_879: Tensor[(5, 7, 4), uint64], %var_880: Tensor[(5, 7, 4), uint64], %var_885: Tensor[(256), float64]) -> (Tensor[(5, 7, 4), bool], Tensor[(8, 16, 2), float64], Tensor[(256), float64]) {
  %941 = cast(%var_880, dtype="bool") /* ty=Tensor[(5, 7, 4), bool] */;
  %942 = shape_of(%var_879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%var_879, dtype="bool") /* ty=Tensor[(5, 7, 4), bool] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %945 = cast(%var_885, dtype="float64") /* ty=Tensor[(256), float64] */;
  %946 = reshape(%945, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), float64] */;
  %947 = greater_equal(%943, %944) /* ty=Tensor[(5, 7, 4), bool] */;
  %948 = @func_436(%946) /* ty=Tensor[(8, 16, 2), float64] */;
  (%947, %948, %var_885)
}

def @func_4660() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) {
  %949 = @func_4254() /* ty=(Tensor[(3, 16), float32],) */;
  %950 = @func_2829() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) */;
  %951 = %949.0;
  %952 = %950.1;
  (%951, %952)
}

def @func_7725(%var_7724: Tensor[(6, 7, 14), float32]) -> Tensor[(6, 7, 14), int8] {
  %959 = fn (%var_7714: Tensor[(6, 7, 14), float32]) -> Tensor[(6, 7, 14), int8] {
    %953 = @func_4757() /* ty=(Tensor[(6, 7, 14), float32],) */;
    %954 = %953.0;
    %955 = cast(%var_7714, dtype="int8") /* ty=Tensor[(6, 7, 14), int8] */;
    %956 = shape_of(%954, dtype="int32") /* ty=Tensor[(3), int32] */;
    %957 = cast(%954, dtype="int8") /* ty=Tensor[(6, 7, 14), int8] */;
    %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    minimum(%957, %958) /* ty=Tensor[(6, 7, 14), int8] */
  };
  %959(%var_7724) /* ty=Tensor[(6, 7, 14), int8] */
}

def @func_2793() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %966 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %960 = @func_2507() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %961 = @func_2587() /* ty=(Tensor[(3, 16), float32],) */;
    %962 = @func_2507() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %963 = %960.1;
    %964 = %961.0;
    %965 = %962.1;
    (%963, %964, %965)
  };
  %966() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_7095() -> (Tensor[(3, 16), float32],) {
  %967 = @func_7078() /* ty=(Tensor[(3, 16), float32],) */;
  %968 = %967.0;
  (%968,)
}

def @func_12605() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %971 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %969 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
    %970 = @func_5661() /* ty=Tensor[(3, 16), float32] */;
    (%969, %970)
  };
  %971() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_15902() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %979 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %972 = @func_15445() /* ty=(Tensor[(3, 16), float32], Tensor[(96), uint16], Tensor[(3, 16), float32], Tensor[(4, 8, 3), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %973 = @func_10476() /* ty=(Tensor[(3, 16), float32],) */;
    %974 = @func_12142() /* ty=(Tensor[(3, 16), float32],) */;
    %975 = %972.2;
    %976 = %973.0;
    %977 = %974.0;
    %978 = @func_5715() /* ty=Tensor[(3, 16), float32] */;
    (%975, %976, %977, %978)
  };
  %979() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_4256() -> (Tensor[(3, 16), float32],) {
  @func_4254() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_13213() -> (Tensor[(3, 16), float32],) {
  %981 = fn () -> (Tensor[(3, 16), float32],) {
    %980 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
    (%980,)
  };
  %981() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_9464() -> Tensor[(3, 16), float32] {
  %982 = fn () -> Tensor[(3, 16), float32] {
    @func_5171() /* ty=Tensor[(3, 16), float32] */
  };
  %982() /* ty=Tensor[(3, 16), float32] */
}

def @func_5974(%var_5972: Tensor[(14, 4), float32], %var_5973: Tensor[(24, 6), int8]) -> (Tensor[(3, 16), float32], Tensor[(1, 480), float64], Tensor[(480), float64], Tensor[(14, 4), float32], Tensor[(336, 1), uint16], Tensor[(336), uint16], Tensor[(24, 6), int8]) {
  %1000 = fn (%var_5954: Tensor[(14, 4), float32], %var_5959: Tensor[(24, 6), int8]) -> (Tensor[(3, 16), float32], Tensor[(1, 480), float64], Tensor[(480), float64], Tensor[(14, 4), float32], Tensor[(336, 1), uint16], Tensor[(336), uint16], Tensor[(24, 6), int8]) {
    %983 = cast(meta[relay.Constant][51] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %984 = cast(%var_5954, dtype="float32") /* ty=Tensor[(14, 4), float32] */;
    %985 = cast(meta[relay.Constant][52] /* ty=Tensor[(336, 1), uint16] */, dtype="uint16") /* ty=Tensor[(336, 1), uint16] */;
    %986 = reshape(%983, newshape=[1, 480]) /* ty=Tensor[(1, 480), float64] */;
    %987 = reshape(%984, newshape=[56]) /* ty=Tensor[(56), float32] */;
    %988 = reshape(%985, newshape=[336]) /* ty=Tensor[(336), uint16] */;
    %989 = @func_4495(%986, %987, %988) /* ty=(Tensor[(3, 16), float32], Tensor[(12, 10, 4), float64], Tensor[(1, 480), float64], Tensor[(14, 4, 6), uint16], Tensor[(56), float32], Tensor[(336), uint16]) */;
    %990 = cast(meta[relay.Constant][52] /* ty=Tensor[(336, 1), uint16] */, dtype="uint16") /* ty=Tensor[(336, 1), uint16] */;
    %991 = cast(%var_5959, dtype="int8") /* ty=Tensor[(24, 6), int8] */;
    %992 = cast(%var_5954, dtype="float32") /* ty=Tensor[(14, 4), float32] */;
    %993 = reshape(%990, newshape=[336]) /* ty=Tensor[(336), uint16] */;
    %994 = reshape(%991, newshape=[144]) /* ty=Tensor[(144), int8] */;
    %995 = reshape(%992, newshape=[56]) /* ty=Tensor[(56), float32] */;
    %996 = @func_3437(%993, %994, %995) /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), uint16], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(56), float32], int8, Tensor[(144), int8], Tensor[(56), float32]) */;
    %997 = @func_4555() /* ty=Tensor[(3, 16), float32] */;
    %998 = %989.2;
    %999 = %996.2;
    (%997, %998, meta[relay.Constant][51] /* ty=Tensor[(480), float64] */, %var_5954, meta[relay.Constant][52] /* ty=Tensor[(336, 1), uint16] */, %999, %var_5959)
  };
  %1000(%var_5972, %var_5973) /* ty=(Tensor[(3, 16), float32], Tensor[(1, 480), float64], Tensor[(480), float64], Tensor[(14, 4), float32], Tensor[(336, 1), uint16], Tensor[(336), uint16], Tensor[(24, 6), int8]) */
}

def @func_7445() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1001 = @func_3464() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1002 = @func_5495() /* ty=(Tensor[(3, 16), float32],) */;
  %1003 = %1001.1;
  %1004 = %1002.0;
  (%1003, %1004)
}

def @func_4556() -> Tensor[(3, 16), float32] {
  %1005 = fn () -> Tensor[(3, 16), float32] {
    @func_3836() /* ty=Tensor[(3, 16), float32] */
  };
  %1005() /* ty=Tensor[(3, 16), float32] */
}

def @func_15030() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1010 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %1006 = @func_10021() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %1007 = @func_2652() /* ty=(Tensor[(3, 16), float32],) */;
    %1008 = %1006.1;
    %1009 = %1007.0;
    (%1008, %1009)
  };
  %1010() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_7602() -> (Tensor[(3, 16), float32],) {
  @func_7600() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_4189(%var_4187: Tensor[(1, 7, 1), int32], %var_4188: Tensor[(1, 7, 4), int32]) -> Tensor[(1, 7, 4), uint32] {
  %1016 = fn (%var_4154: Tensor[(1, 7, 1), int32], %var_4173: Tensor[(1, 7, 4), int32]) -> Tensor[(1, 7, 4), uint32] {
    %1011 = cast(-3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %1012 = cast(%var_4154, dtype="int32") /* ty=Tensor[(1, 7, 1), int32] */;
    %1013 = maximum(%1011, %1012) /* ty=Tensor[(1, 7, 1), int32] */;
    %1014 = cast(%1013, dtype="uint32") /* ty=Tensor[(1, 7, 1), uint32] */;
    %1015 = cast(%var_4173, dtype="uint32") /* ty=Tensor[(1, 7, 4), uint32] */;
    subtract(%1014, %1015) /* ty=Tensor[(1, 7, 4), uint32] */
  };
  %1016(%var_4187, %var_4188) /* ty=Tensor[(1, 7, 4), uint32] */
}

def @func_7357() -> Tensor[(3, 16), float32] {
  @func_7355() /* ty=Tensor[(3, 16), float32] */
}

def @func_10478() -> (Tensor[(3, 16), float32],) {
  @func_10476() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_5204() -> Tensor[(3, 16), float32] {
  @func_5202() /* ty=Tensor[(3, 16), float32] */
}

def @func_14287() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %1034 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
    %1017 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 10, 16), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 16), float32] */;
    %1018 = sqrt(%1017) /* ty=Tensor[(11, 10, 16), float32] */;
    %1019 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 10, 16), float32] */, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
    %1020 = shape_of(%1018, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1021 = cast(%1018, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
    %1022 = dyn.reshape(%1019, %1020, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1023 = not_equal(%1021, %1022) /* ty=Tensor[(11, 10, 16), bool] */;
    %1024 = cast(%1018, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
    %1025 = shape_of(%1023, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1026 = cast(%1023, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
    %1027 = dyn.reshape(%1024, %1025, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1028 = cast(%1018, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
    %1029 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(11, 10, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1030 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 10, 16), float32] */, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
    %1031 = dyn.reshape(%1028, %1029, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1032 = subtract(%1026, %1027) /* ty=Tensor[(11, 10, 16), float64] */;
    %1033 = floor_mod(%1030, %1031) /* ty=Tensor[(11, 10, 16), float64] */;
    (%1032, %1033)
  };
  %1034() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_5358(%var_5352: Tensor[(9, 9, 4), float32]) -> Tensor[(9, 9, 4), float32] {
  %1035 = cast(%var_5352, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
  tan(%1035) /* ty=Tensor[(9, 9, 4), float32] */
}

def @func_10400(%var_10368: Tensor[(336), bool], %var_10372: Tensor[(11, 9, 13), float64]) -> (Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(11, 9, 13), int32]) {
  %1036 = cast(%var_10368, dtype="bool") /* ty=Tensor[(336), bool] */;
  %1037 = reshape(%1036, newshape=[336]) /* ty=Tensor[(336), bool] */;
  %1038 = @func_3905(%1037) /* ty=(Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1039 = @func_10087() /* ty=(Tensor[(11, 7, 5), bool], Tensor[(11, ?, 13), float64], Tensor[(143), int16]) */;
  %1040 = %1039.1;
  %1041 = cast(%1040, dtype="int32") /* ty=Tensor[(11, ?, 13), int32] */;
  %1042 = cast(%var_10372, dtype="int32") /* ty=Tensor[(11, 9, 13), int32] */;
  %1043 = %1038.0;
  %1044 = subtract(%1041, %1042) /* ty=Tensor[(11, 9, 13), int32] */;
  (%1043, %var_10368, %1044)
}

def @func_10184(%var_10181: Tensor[(14, 11, 15), int32], %var_10182: Tensor[(14, 11, 15), int32], %var_10183: Tensor[(256), float64]) -> (Tensor[(14, 11, 15), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(256), float64], Tensor[(140), uint64], Tensor[(256), float64]) {
  @func_10179(%var_10181, %var_10182, %var_10183) /* ty=(Tensor[(14, 11, 15), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(256), float64], Tensor[(140), uint64], Tensor[(256), float64]) */
}

def @main(%var_16074: Tensor[(4, 9, 13), float32]) -> (Tensor[(4, 9, 13), float32],) {
  %1045 = cast(%var_16074, dtype="float32") /* ty=Tensor[(4, 9, 13), float32] */;
  %1046 = cosh(%1045) /* ty=Tensor[(4, 9, 13), float32] */;
  (%1046,)
}

def @func_1201(%var_1199: Tensor[(12, 4, 1), float64], %var_1200: Tensor[(256), float64]) -> (Tensor[(12, 4, 1), float64], Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(14, 4, 6), bool], Tensor[(8, 16, 2), float64], Tensor[(256), float64], Tensor[(14, 4, 6), bool]) {
  %1070 = fn (%var_1159: Tensor[(12, 4, 1), float64], %var_1180: Tensor[(256), float64]) -> (Tensor[(12, 4, 1), float64], Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(14, 4, 6), bool], Tensor[(8, 16, 2), float64], Tensor[(256), float64], Tensor[(14, 4, 6), bool]) {
    %1047 = cast(%var_1159, dtype="float64") /* ty=Tensor[(12, 4, 1), float64] */;
    %1048 = cast(meta[relay.Constant][54] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %1049 = cast(meta[relay.Constant][54] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %1050 = reshape(%1048, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %1051 = reshape(%1049, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %1052 = @func_489(%1050, %1051) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
    %1053 = cast(meta[relay.Constant][54] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %1054 = cast(meta[relay.Constant][54] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %1055 = reshape(%1053, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %1056 = reshape(%1054, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %1057 = @func_489(%1055, %1056) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
    %1058 = cast(%var_1180, dtype="float64") /* ty=Tensor[(256), float64] */;
    %1059 = reshape(%1058, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), float64] */;
    %1060 = %1052.1;
    %1061 = cast(%1060, dtype="uint16") /* ty=Tensor[(14, 4, 6), uint16] */;
    %1062 = %1057.1;
    %1063 = cast(%1062, dtype="uint16") /* ty=Tensor[(14, 4, 6), uint16] */;
    %1064 = reshape(%1061, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %1065 = reshape(%1063, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
    %1066 = @func_489(%1064, %1065) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
    %1067 = sigmoid(%1047) /* ty=Tensor[(12, 4, 1), float64] */;
    %1068 = @func_436(%1059) /* ty=Tensor[(8, 16, 2), float64] */;
    %1069 = %1066.1;
    (%1067, %1060, meta[relay.Constant][54] /* ty=Tensor[(336), uint16] */, %1062, %1068, %var_1180, %1069)
  };
  %1070(%var_1199, %var_1200) /* ty=(Tensor[(12, 4, 1), float64], Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(14, 4, 6), bool], Tensor[(8, 16, 2), float64], Tensor[(256), float64], Tensor[(14, 4, 6), bool]) */
}

def @func_11019() -> (Tensor[(3, 16), float32],) {
  %1071 = @func_8016() /* ty=Tensor[(3, 16), float32] */;
  (%1071,)
}

def @func_10404(%var_10402: Tensor[(336), bool], %var_10403: Tensor[(11, 9, 13), float64]) -> (Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(11, 9, 13), int32]) {
  @func_10400(%var_10402, %var_10403) /* ty=(Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(11, 9, 13), int32]) */
}

def @func_12519() -> Tensor[(3, 16), float32] {
  %1072 = @func_5311() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1072.1
}

def @func_15716(%var_15715: Tensor[(546, 1), float64]) -> (Tensor[(3, 16), float32], Tensor[(3, 13, 14), float64], Tensor[(42), float64], Tensor[(546, 1), float64], Tensor[(11, ?, 13), float64]) {
  %1082 = fn (%var_15679: Tensor[(546, 1), float64]) -> (Tensor[(3, 16), float32], Tensor[(3, 13, 14), float64], Tensor[(42), float64], Tensor[(546, 1), float64], Tensor[(11, ?, 13), float64]) {
    %1073 = @func_4690() /* ty=(Tensor[(3, 16), float32],) */;
    %1074 = cast(meta[relay.Constant][55] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
    %1075 = cast(%var_15679, dtype="float64") /* ty=Tensor[(546, 1), float64] */;
    %1076 = reshape(%1074, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), float64] */;
    %1077 = reshape(%1075, newshape=[3, 13, 14]) /* ty=Tensor[(3, 13, 14), float64] */;
    %1078 = @func_11347() /* ty=(Tensor[(3, 16), float32], Tensor[(11, ?, 13), float64], Tensor[(143), int16], Tensor[(3, 16), float32]) */;
    %1079 = %1073.0;
    %1080 = @func_6447(%1076, %1077) /* ty=Tensor[(3, 13, 14), float64] */;
    %1081 = %1078.1;
    (%1079, %1080, meta[relay.Constant][55] /* ty=Tensor[(42), float64] */, %var_15679, %1081)
  };
  %1082(%var_15715) /* ty=(Tensor[(3, 16), float32], Tensor[(3, 13, 14), float64], Tensor[(42), float64], Tensor[(546, 1), float64], Tensor[(11, ?, 13), float64]) */
}

def @func_2343() -> (Tensor[(3, 16), float32],) {
  %1084 = fn () -> (Tensor[(3, 16), float32],) {
    %1083 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
    (%1083,)
  };
  %1084() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_4845() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1087 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %1085 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
    %1086 = @func_4623() /* ty=Tensor[(3, 16), float32] */;
    (%1085, %1086)
  };
  %1087() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_13101() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  @func_13099() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_12123(%var_12121: Tensor[(15, 15, 11), float64], %var_12122: Tensor[(15, 15, 11), float64]) -> (Tensor[(15, 15, 11), float64],) {
  @func_12119(%var_12121, %var_12122) /* ty=(Tensor[(15, 15, 11), float64],) */
}

def @func_12739(%var_12737: Tensor[(5, 16, 1), float64], %var_12738: Tensor[(5, 16, 1), float64]) -> Tensor[(5, 16, ?), float64] {
  @func_12735(%var_12737, %var_12738) /* ty=Tensor[(5, 16, ?), float64] */
}

def @func_12144() -> (Tensor[(3, 16), float32],) {
  @func_12142() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_4662() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) {
  @func_4660() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) */
}

def @func_14353(%var_14351: Tensor[(3, 6, 3), bool], %var_14352: Tensor[(3, 6, 3), bool]) -> Tensor[(3, 6, 3), bool] {
  @func_14349(%var_14351, %var_14352) /* ty=Tensor[(3, 6, 3), bool] */
}

def @func_8027() -> (Tensor[(3, 16), float32],) {
  @func_8025() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_10736(%var_10733: Tensor[(1848), float64], %var_10734: Tensor[(300), float64], %var_10735: Tensor[(144), int8]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 12, 11), float64], Tensor[(1848), bool], Tensor[(3, 16), float32], Tensor[(300), float64], Tensor[(3, 16), float32], int8, Tensor[(144), int8], Tensor[(56), float32], Tensor[(336), uint16]) {
  @func_10731(%var_10733, %var_10734, %var_10735) /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(14, 12, 11), float64], Tensor[(1848), bool], Tensor[(3, 16), float32], Tensor[(300), float64], Tensor[(3, 16), float32], int8, Tensor[(144), int8], Tensor[(56), float32], Tensor[(336), uint16]) */
}

def @func_4010() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1094 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %1088 = @func_3464() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %1089 = @func_3642() /* ty=(Tensor[(3, 16), float32],) */;
    %1090 = @func_3209() /* ty=(Tensor[(3, 16), float32],) */;
    %1091 = %1088.0;
    %1092 = %1089.0;
    %1093 = %1090.0;
    (%1091, %1092, %1093)
  };
  %1094() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_13283() -> (Tensor[(88), uint32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1095 = @func_11536() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(144), int8], Tensor[(88), uint32]) */;
  %1096 = @func_9676() /* ty=(Tensor[(3, 16), float32],) */;
  %1097 = @func_8500() /* ty=(Tensor[(3, 16), float32],) */;
  %1098 = %1095.3;
  %1099 = %1096.0;
  %1100 = %1097.0;
  (%1098, %1099, %1100)
}

def @func_3800() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(3, 16), float32]) {
  %1101 = @func_3464() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1102 = cast(meta[relay.Constant][56] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %1103 = cast(meta[relay.Constant][56] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %1104 = reshape(%1102, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %1105 = reshape(%1103, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), uint16] */;
  %1106 = @func_489(%1104, %1105) /* ty=(Tensor[(14, 4, 6), uint16], Tensor[(14, 4, 6), bool]) */;
  %1107 = @func_3026() /* ty=(Tensor[(3, 16), float32],) */;
  %1108 = %1101.0;
  %1109 = %1106.1;
  %1110 = %1107.0;
  (%1108, %1109, meta[relay.Constant][56] /* ty=Tensor[(336), uint16] */, %1110)
}

def @func_13748() -> (Tensor[(2, 10, 3), float64],) {
  @func_13746() /* ty=(Tensor[(2, 10, 3), float64],) */
}

def @func_7037() -> (Tensor[(3, 16), float32],) {
  @func_7035() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_12655(%var_12654: Tensor[(8, 5, 1), float32]) -> (Tensor[(8, 5, 1), float32], Tensor[(3, 16), float32]) {
  %1115 = fn (%var_12637: Tensor[(8, 5, 1), float32]) -> (Tensor[(8, 5, 1), float32], Tensor[(3, 16), float32]) {
    %1111 = cast(%var_12637, dtype="float32") /* ty=Tensor[(8, 5, 1), float32] */;
    %1112 = @func_2429() /* ty=(Tensor[(3, 16), float32],) */;
    %1113 = sigmoid(%1111) /* ty=Tensor[(8, 5, 1), float32] */;
    %1114 = %1112.0;
    (%1113, %1114)
  };
  %1115(%var_12654) /* ty=(Tensor[(8, 5, 1), float32], Tensor[(3, 16), float32]) */
}

def @func_6095(%var_6093: Tensor[(15, 5, 4), float64]) -> (Tensor[(15, 5, 4), float64], Tensor[(14, 4, 6), uint16], Tensor[(168, 2), float64], Tensor[(3, 16), float32]) {
  @func_6092(%var_6093) /* ty=(Tensor[(15, 5, 4), float64], Tensor[(14, 4, 6), uint16], Tensor[(168, 2), float64], Tensor[(3, 16), float32]) */
}

def @func_8365(%var_8364: Tensor[(6, 7, 14), float32]) -> Tensor[(6, 7, 14), bool] {
  %1121 = fn (%var_8343: Tensor[(6, 7, 14), float32]) -> Tensor[(6, 7, 14), bool] {
    %1116 = @func_6354() /* ty=Tensor[(6, 7, 14), float32] */;
    %1117 = cast(%var_8343, dtype="bool") /* ty=Tensor[(6, 7, 14), bool] */;
    %1118 = shape_of(%1116, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1119 = cast(%1116, dtype="bool") /* ty=Tensor[(6, 7, 14), bool] */;
    %1120 = dyn.reshape(%1117, %1118, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%1119, %1120) /* ty=Tensor[(6, 7, 14), bool] */
  };
  %1121(%var_8364) /* ty=Tensor[(6, 7, 14), bool] */
}

def @func_9695(%var_9694: Tensor[(14, 12, 11), float64]) -> (Tensor[(14, 12, 11), float64],) {
  %1125 = fn (%var_9689: Tensor[(14, 12, 11), float64]) -> (Tensor[(14, 12, 11), float64],) {
    %1122 = cast(-5.62156f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %1123 = cast(%var_9689, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
    %1124 = floor_divide(%1122, %1123) /* ty=Tensor[(14, 12, 11), float64] */;
    (%1124,)
  };
  %1125(%var_9694) /* ty=(Tensor[(14, 12, 11), float64],) */
}

def @func_14955() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1126 = @func_3800() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16], Tensor[(3, 16), float32]) */;
  %1127 = @func_13099() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1128 = %1126.0;
  %1129 = %1127.1;
  (%1128, %1129)
}

def @func_9901() -> (Tensor[(3, 16), float32],) {
  %1130 = @func_9411() /* ty=Tensor[(3, 16), float32] */;
  (%1130,)
}

def @func_892(%var_889: Tensor[(5, 7, 4), uint64], %var_890: Tensor[(5, 7, 4), uint64], %var_891: Tensor[(256), float64]) -> (Tensor[(5, 7, 4), bool], Tensor[(8, 16, 2), float64], Tensor[(256), float64]) {
  @func_887(%var_889, %var_890, %var_891) /* ty=(Tensor[(5, 7, 4), bool], Tensor[(8, 16, 2), float64], Tensor[(256), float64]) */
}

def @func_7565() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1131 = @func_7346() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1132 = @func_4237() /* ty=(Tensor[(3, 16), float32],) */;
  %1133 = %1131.1;
  %1134 = %1132.0;
  %1135 = @func_5661() /* ty=Tensor[(3, 16), float32] */;
  (%1133, %1134, %1135)
}

def @func_12965() -> (Tensor[(3, 16), float32],) {
  %1138 = fn () -> (Tensor[(3, 16), float32],) {
    %1136 = @func_8832() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(2, 168), bool], Tensor[(6, 7, 14), float32], Tensor[(9, 9, 4), float32], Tensor[(324), float32]) */;
    %1137 = %1136.0;
    (%1137,)
  };
  %1138() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_4254() -> (Tensor[(3, 16), float32],) {
  %1139 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
  %1140 = %1139.0;
  (%1140,)
}

def @func_1938(%var_1936: Tensor[(140), uint64], %var_1937: Tensor[(256), float64]) -> (Tensor[(15, 15, 11), float32], Tensor[(5, 495), float32], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(13, 4, 11), float32]) {
  @func_1934(%var_1936, %var_1937) /* ty=(Tensor[(15, 15, 11), float32], Tensor[(5, 495), float32], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(13, 4, 11), float32]) */
}

def @func_6851() -> (Tensor[(3, 16), float32],) {
  %1141 = @func_4237() /* ty=(Tensor[(3, 16), float32],) */;
  %1142 = %1141.0;
  (%1142,)
}

def @func_3494() -> Tensor[(3, 16), float32] {
  %1144 = fn () -> Tensor[(3, 16), float32] {
    %1143 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
    %1143.0
  };
  %1144() /* ty=Tensor[(3, 16), float32] */
}

def @func_4323() -> Tensor[(3, 16), float32] {
  %1145 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
  %1145.0
}

def @func_7355() -> Tensor[(3, 16), float32] {
  %1146 = @func_6235() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(11, 2, 10), bool], Tensor[(110), uint8], Tensor[(220), uint8], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
  %1146.0
}

def @func_8018() -> Tensor[(3, 16), float32] {
  @func_8016() /* ty=Tensor[(3, 16), float32] */
}

def @func_13746() -> (Tensor[(2, 10, 3), float64],) {
  %1147 = @func_12415() /* ty=(Tensor[(3, 16), float32], Tensor[(2, 10, 3), float64], Tensor[(60), float64]) */;
  %1148 = %1147.1;
  (%1148,)
}

def @func_3099(%var_3095: int8, %var_3096: Tensor[(144), int8], %var_3097: Tensor[(56), float32], %var_3098: Tensor[(336), uint16]) -> (Tensor[(3, 16), float32], Tensor[(8, 9, 2), int8], int8, Tensor[(144), int8], Tensor[(56), float32], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) {
  %1165 = fn (%var_3057: int8, %var_3058: Tensor[(144), int8], %var_3059: Tensor[(56), float32], %var_3060: Tensor[(336), uint16]) -> (Tensor[(3, 16), float32], Tensor[(8, 9, 2), int8], int8, Tensor[(144), int8], Tensor[(56), float32], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) {
    %1149 = @func_2719() /* ty=(Tensor[(3, 16), float32],) */;
    %1150 = cast(%var_3057, dtype="int8") /* ty=int8 */;
    %1151 = cast(%var_3058, dtype="int8") /* ty=Tensor[(144), int8] */;
    %1152 = cast(%var_3059, dtype="float32") /* ty=Tensor[(56), float32] */;
    %1153 = cast(%var_3060, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %1154 = reshape(%1150, newshape=[]) /* ty=int8 */;
    %1155 = reshape(%1151, newshape=[8, 9, 2]) /* ty=Tensor[(8, 9, 2), int8] */;
    %1156 = reshape(%1152, newshape=[56]) /* ty=Tensor[(56), float32] */;
    %1157 = reshape(%1153, newshape=[336]) /* ty=Tensor[(336), uint16] */;
    %1158 = @func_1710(%1154, %1155, %1156, %1157) /* ty=(Tensor[(8, 9, 2), int8], Tensor[(7, 2, 4), bool], Tensor[(56), float32], Tensor[(336), uint16]) */;
    %1159 = @func_2507() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %1160 = @func_2829() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) */;
    %1161 = %1149.0;
    %1162 = %1158.0;
    %1163 = %1159.0;
    %1164 = %1160.1;
    (%1161, %1162, %var_3057, %var_3058, %var_3059, %var_3060, %1163, %1164)
  };
  %1165(%var_3095, %var_3096, %var_3097, %var_3098) /* ty=(Tensor[(3, 16), float32], Tensor[(8, 9, 2), int8], int8, Tensor[(144), int8], Tensor[(56), float32], Tensor[(336), uint16], Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool]) */
}

def @func_7741() -> (Tensor[(3, 16), float32],) {
  %1166 = @func_5905() /* ty=Tensor[(3, 16), float32] */;
  (%1166,)
}

def @func_9412() -> Tensor[(3, 16), float32] {
  %1168 = fn () -> Tensor[(3, 16), float32] {
    %1167 = @func_7775() /* ty=(Tensor[(3, 16), float32],) */;
    %1167.0
  };
  %1168() /* ty=Tensor[(3, 16), float32] */
}

def @func_4325() -> Tensor[(3, 16), float32] {
  @func_4323() /* ty=Tensor[(3, 16), float32] */
}

def @func_2429() -> (Tensor[(3, 16), float32],) {
  %1169 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
  %1170 = %1169.0;
  (%1170,)
}

def @func_6560() -> (Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32]) {
  %1173 = fn () -> (Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32]) {
    %1171 = @func_4921() /* ty=Tensor[(8, 10, 4), float64] */;
    %1172 = @func_5905() /* ty=Tensor[(3, 16), float32] */;
    (%1171, %1172)
  };
  %1173() /* ty=(Tensor[(8, 10, 4), float64], Tensor[(3, 16), float32]) */
}

def @func_13099() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1174 = @func_8699() /* ty=(Tensor[(3, 16), float32],) */;
  %1175 = @func_7916() /* ty=(Tensor[(3, 16), float32],) */;
  %1176 = %1174.0;
  %1177 = %1175.0;
  (%1176, %1177)
}

def @func_7109() -> (Tensor[(3, 16), float32],) {
  @func_7107() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_14784() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1183 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %1178 = @func_10586() /* ty=(Tensor[(3, 16), float32],) */;
    %1179 = @func_5518() /* ty=(Tensor[(3, 16), float32],) */;
    %1180 = @func_5715() /* ty=Tensor[(3, 16), float32] */;
    %1181 = %1178.0;
    %1182 = %1179.0;
    (%1180, %1181, %1182)
  };
  %1183() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_14417() -> Tensor[(3, 16), float32] {
  %1184 = fn () -> Tensor[(3, 16), float32] {
    @func_9463() /* ty=Tensor[(3, 16), float32] */
  };
  %1184() /* ty=Tensor[(3, 16), float32] */
}

def @func_5001(%var_4999: Tensor[(15, 11, 5), int8], %var_5000: Tensor[(15, 11, 5), int8]) -> (Tensor[(15, 11, 5), bool],) {
  @func_4997(%var_4999, %var_5000) /* ty=(Tensor[(15, 11, 5), bool],) */
}

def @func_9771(%var_9760: Tensor[(4, 8, 3), uint16]) -> Tensor[(4, 8, 3), uint16] {
  %1185 = cast(%var_9760, dtype="uint16") /* ty=Tensor[(4, 8, 3), uint16] */;
  %1186 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(4, 8, 3), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1187 = cast(meta[relay.Constant][57] /* ty=Tensor[(4, 8, 3), uint16] */, dtype="uint16") /* ty=Tensor[(4, 8, 3), uint16] */;
  %1188 = dyn.reshape(%1185, %1186, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  multiply(%1187, %1188) /* ty=Tensor[(4, 8, 3), uint16] */
}

def @func_6605() -> Tensor[(3, 16), float32] {
  %1190 = fn () -> Tensor[(3, 16), float32] {
    %1189 = @func_2342() /* ty=(Tensor[(3, 16), float32],) */;
    %1189.0
  };
  %1190() /* ty=Tensor[(3, 16), float32] */
}

def @func_3905(%var_3881: Tensor[(336), bool]) -> (Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1191 = cast(%var_3881, dtype="bool") /* ty=Tensor[(336), bool] */;
  %1192 = reshape(%1191, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), bool] */;
  %1193 = @func_3551(%1192) /* ty=(Tensor[(14, 4, 6), float32],) */;
  %1194 = @func_3642() /* ty=(Tensor[(3, 16), float32],) */;
  %1195 = %1194.0;
  %1196 = cast(%1195, dtype="float32") /* ty=Tensor[(3, 16), float32] */;
  %1197 = @func_2536() /* ty=(Tensor[(3, 16), float32],) */;
  %1198 = @func_2829() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) */;
  %1199 = %1193.0;
  %1200 = atan(%1196) /* ty=Tensor[(3, 16), float32] */;
  %1201 = %1197.0;
  %1202 = %1198.0;
  (%1199, %var_3881, %1200, %1201, %1202)
}

def @func_12880() -> Tensor[(3, 16), float32] {
  %1204 = fn () -> Tensor[(3, 16), float32] {
    %1203 = @func_4009() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %1203.1
  };
  %1204() /* ty=Tensor[(3, 16), float32] */
}

def @func_4790() -> (Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32]) {
  %1211 = fn () -> (Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32]) {
    %1205 = @func_2803() /* ty=(Tensor[(3, 16), float32],) */;
    %1206 = @func_4424() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(336), uint16], Tensor[(900), float64]) */;
    %1207 = @func_4009() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %1208 = %1205.0;
    %1209 = %1206.2;
    %1210 = %1207.2;
    (%1208, %1209, %1210)
  };
  %1211() /* ty=(Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32]) */
}

def @func_9581() -> (Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(12, 10, 4), float64], Tensor[(480), float64]) {
  @func_9579() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(12, 10, 4), float64], Tensor[(480), float64]) */
}

def @func_9939(%var_9938: Tensor[(300), float64]) -> (Tensor[(3, 16), float32], Tensor[(168, 2), float64], Tensor[(300), float64]) {
  %1217 = fn (%var_9927: Tensor[(300), float64]) -> (Tensor[(3, 16), float32], Tensor[(168, 2), float64], Tensor[(300), float64]) {
    %1212 = cast(%var_9927, dtype="float64") /* ty=Tensor[(300), float64] */;
    %1213 = reshape(%1212, newshape=[15, 5, 4]) /* ty=Tensor[(15, 5, 4), float64] */;
    %1214 = @func_6092(%1213) /* ty=(Tensor[(15, 5, 4), float64], Tensor[(14, 4, 6), uint16], Tensor[(168, 2), float64], Tensor[(3, 16), float32]) */;
    %1215 = @func_4229() /* ty=Tensor[(3, 16), float32] */;
    %1216 = %1214.2;
    (%1215, %1216, %var_9927)
  };
  %1217(%var_9938) /* ty=(Tensor[(3, 16), float32], Tensor[(168, 2), float64], Tensor[(300), float64]) */
}

def @func_15175(%var_15173: Tensor[(4, 256), float64], %var_15174: Tensor[(1287), float64]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(8, 16, 2), float64], Tensor[(3, 16), float32], Tensor[(4, 256), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(336), bool], Tensor[(1287), float64], Tensor[(3, 16), float32], Tensor[(?, 256), float32], Tensor[(3, 256), int8], Tensor[(7, 256), int32]) {
  %1258 = fn (%var_15110: Tensor[(4, 256), float64], %var_15126: Tensor[(1287), float64]) -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(8, 16, 2), float64], Tensor[(3, 16), float32], Tensor[(4, 256), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(336), bool], Tensor[(1287), float64], Tensor[(3, 16), float32], Tensor[(?, 256), float32], Tensor[(3, 256), int8], Tensor[(7, 256), int32]) {
    %1218 = @func_13866() /* ty=(Tensor[(3, 16), float32],) */;
    %1219 = cast(meta[relay.Constant][58] /* ty=Tensor[(1, 256), float64] */, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
    %1220 = reshape(%1219, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), float64] */;
    %1221 = cast(meta[relay.Constant][58] /* ty=Tensor[(1, 256), float64] */, dtype="bool") /* ty=Tensor[(1, 256), bool] */;
    %1222 = cast(%var_15110, dtype="bool") /* ty=Tensor[(4, 256), bool] */;
    %1223 = @func_7445() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %1224 = @func_3026() /* ty=(Tensor[(3, 16), float32],) */;
    %1225 = cast(meta[relay.Constant][59] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
    %1226 = cast(%var_15126, dtype="float64") /* ty=Tensor[(1287), float64] */;
    %1227 = reshape(%1225, newshape=[336]) /* ty=Tensor[(336), bool] */;
    %1228 = reshape(%1226, newshape=[11, 9, 13]) /* ty=Tensor[(11, 9, 13), float64] */;
    %1229 = @func_10400(%1227, %1228) /* ty=(Tensor[(14, 4, 6), float32], Tensor[(336), bool], Tensor[(11, 9, 13), int32]) */;
    %1230 = @func_13283() /* ty=(Tensor[(88), uint32], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %1231 = cast(meta[relay.Constant][58] /* ty=Tensor[(1, 256), float64] */, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
    %1232 = erf(%1231) /* ty=Tensor[(1, 256), float64] */;
    %1233 = cast(%1232, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
    %1234 = log2(%1233) /* ty=Tensor[(1, 256), float64] */;
    %1235 = cast(%1234, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
    %1236 = atanh(%1235) /* ty=Tensor[(1, 256), float64] */;
    %1237 = cast(%1236, dtype="float32") /* ty=Tensor[(1, 256), float32] */;
    %1238 = shape_of(%1234, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1239 = cast(%1234, dtype="float32") /* ty=Tensor[(1, 256), float32] */;
    %1240 = dyn.reshape(%1237, %1238, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %1241 = cast(%1236, dtype="int8") /* ty=Tensor[(1, 256), int8] */;
    %1242 = cast(meta[relay.Constant][60] /* ty=Tensor[(3, 256), float64] */, dtype="int8") /* ty=Tensor[(3, 256), int8] */;
    %1243 = cast(%1236, dtype="int32") /* ty=Tensor[(1, 256), int32] */;
    %1244 = cast(meta[relay.Constant][61] /* ty=Tensor[(7, 256), float64] */, dtype="int32") /* ty=Tensor[(7, 256), int32] */;
    %1245 = @func_6401() /* ty=Tensor[(3, 16), float32] */;
    %1246 = %1218.0;
    %1247 = @func_2290() /* ty=Tensor[(3, 16), float32] */;
    %1248 = @func_436(%1220) /* ty=Tensor[(8, 16, 2), float64] */;
    %1249 = @func_7623() /* ty=Tensor[(3, 16), float32] */;
    %1250 = logical_and(%1221, %1222) /* ty=Tensor[(4, 256), bool] */;
    %1251 = %1223.1;
    %1252 = %1224.0;
    %1253 = %1229.1;
    %1254 = %1230.1;
    %1255 = floor_divide(%1239, %1240) /* ty=Tensor[(?, 256), float32] */;
    %1256 = bitwise_or(%1241, %1242) /* ty=Tensor[(3, 256), int8] */;
    %1257 = subtract(%1243, %1244) /* ty=Tensor[(7, 256), int32] */;
    (%1245, %1246, %1247, %1248, %1249, %1250, %1251, %1252, %1253, meta[relay.Constant][59] /* ty=Tensor[(336), bool] */, %var_15126, %1254, %1255, %1256, %1257)
  };
  %1258(%var_15173, %var_15174) /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(8, 16, 2), float64], Tensor[(3, 16), float32], Tensor[(4, 256), bool], Tensor[(3, 16), float32], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(336), bool], Tensor[(1287), float64], Tensor[(3, 16), float32], Tensor[(?, 256), float32], Tensor[(3, 256), int8], Tensor[(7, 256), int32]) */
}

def @func_15946() -> (Tensor[(3, 16), float32],) {
  %1259 = @func_7078() /* ty=(Tensor[(3, 16), float32],) */;
  %1260 = %1259.0;
  (%1260,)
}

def @func_14937() -> (Tensor[(3, 16), float32],) {
  %1263 = fn () -> (Tensor[(3, 16), float32],) {
    %1261 = @func_4543() /* ty=(Tensor[(3, 16), float32],) */;
    %1262 = %1261.0;
    (%1262,)
  };
  %1263() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_12526() -> Tensor[(3, 16), float32] {
  @func_12524() /* ty=Tensor[(3, 16), float32] */
}

def @func_12940(%var_12938: Tensor[(14, 4, 6), float32], %var_12939: Tensor[(140), uint64]) -> (Tensor[(3, 16), float32], Tensor[(4, 84), bool], Tensor[(14, 4, 6), int16], Tensor[(140), uint64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(3, 16), float32]) {
  %1282 = fn (%var_12902: Tensor[(14, 4, 6), float32], %var_12911: Tensor[(140), uint64]) -> (Tensor[(3, 16), float32], Tensor[(4, 84), bool], Tensor[(14, 4, 6), int16], Tensor[(140), uint64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(3, 16), float32]) {
    %1264 = cast(meta[relay.Constant][62] /* ty=Tensor[(4, 84), bool] */, dtype="bool") /* ty=Tensor[(4, 84), bool] */;
    %1265 = reshape(%1264, newshape=[14, 4, 6]) /* ty=Tensor[(14, 4, 6), bool] */;
    %1266 = @func_3551(%1265) /* ty=(Tensor[(14, 4, 6), float32],) */;
    %1267 = %1266.0;
    %1268 = cast(%var_12902, dtype="int16") /* ty=Tensor[(14, 4, 6), int16] */;
    %1269 = shape_of(%1267, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1270 = cast(%1267, dtype="int16") /* ty=Tensor[(14, 4, 6), int16] */;
    %1271 = dyn.reshape(%1268, %1269, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %1272 = cast(%var_12911, dtype="uint64") /* ty=Tensor[(140), uint64] */;
    %1273 = cast(meta[relay.Constant][63] /* ty=Tensor[(256), float64] */, dtype="float64") /* ty=Tensor[(256), float64] */;
    %1274 = reshape(%1272, newshape=[140]) /* ty=Tensor[(140), uint64] */;
    %1275 = reshape(%1273, newshape=[256]) /* ty=Tensor[(256), float64] */;
    %1276 = @func_1934(%1274, %1275) /* ty=(Tensor[(15, 15, 11), float32], Tensor[(5, 495), float32], Tensor[(8, 16, 2), float64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(13, 4, 11), float32]) */;
    %1277 = @func_10898() /* ty=(Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64], Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %1278 = @func_6004() /* ty=Tensor[(3, 16), float32] */;
    %1279 = multiply(%1270, %1271) /* ty=Tensor[(14, 4, 6), int16] */;
    %1280 = %1276.3;
    %1281 = %1277.2;
    (%1278, meta[relay.Constant][62] /* ty=Tensor[(4, 84), bool] */, %1279, %1280, %var_12911, meta[relay.Constant][63] /* ty=Tensor[(256), float64] */, %1281)
  };
  %1282(%var_12938, %var_12939) /* ty=(Tensor[(3, 16), float32], Tensor[(4, 84), bool], Tensor[(14, 4, 6), int16], Tensor[(140), uint64], Tensor[(140), uint64], Tensor[(256), float64], Tensor[(3, 16), float32]) */
}

def @func_10113() -> (Tensor[(3, 16), float32],) {
  %1285 = fn () -> (Tensor[(3, 16), float32],) {
    %1283 = @func_2829() /* ty=(Tensor[(3, 16), float32], Tensor[(14, 4, 6), bool], Tensor[(336), uint16]) */;
    %1284 = %1283.0;
    (%1284,)
  };
  %1285() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_14871() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1290 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %1286 = @func_10021() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %1287 = @func_4844() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */;
    %1288 = %1286.0;
    %1289 = %1287.0;
    (%1288, %1289)
  };
  %1290() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_13175() -> Tensor[(3, 16), float32] {
  @func_13173() /* ty=Tensor[(3, 16), float32] */
}

def @func_15752(%var_15751: Tensor[(2, 5, 11), bool]) -> (Tensor[(2, 5, 11), float64], Tensor[(2, 5, 11), float64], Tensor[(3, 16), float32]) {
  %1307 = fn (%var_15733: Tensor[(2, 5, 11), bool]) -> (Tensor[(2, 5, 11), float64], Tensor[(2, 5, 11), float64], Tensor[(3, 16), float32]) {
    %1291 = cast(meta[relay.Constant][64] /* ty=Tensor[(2, 5, 11), float32] */, dtype="float64") /* ty=Tensor[(2, 5, 11), float64] */;
    %1292 = cast(meta[relay.Constant][64] /* ty=Tensor[(2, 5, 11), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 11), float32] */;
    %1293 = log(%1292) /* ty=Tensor[(2, 5, 11), float32] */;
    %1294 = cast(meta[relay.Constant][64] /* ty=Tensor[(2, 5, 11), float32] */, dtype="bool") /* ty=Tensor[(2, 5, 11), bool] */;
    %1295 = shape_of(%1293, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1296 = cast(%1293, dtype="bool") /* ty=Tensor[(2, 5, 11), bool] */;
    %1297 = dyn.reshape(%1294, %1295, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1298 = not_equal(%1296, %1297) /* ty=Tensor[(2, 5, 11), bool] */;
    %1299 = cast(%var_15733, dtype="float64") /* ty=Tensor[(2, 5, 11), float64] */;
    %1300 = shape_of(%1298, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1301 = cast(%1298, dtype="float64") /* ty=Tensor[(2, 5, 11), float64] */;
    %1302 = dyn.reshape(%1299, %1300, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1303 = @func_11019() /* ty=(Tensor[(3, 16), float32],) */;
    %1304 = acos(%1291) /* ty=Tensor[(2, 5, 11), float64] */;
    %1305 = floor_mod(%1301, %1302) /* ty=Tensor[(2, 5, 11), float64] */;
    %1306 = %1303.0;
    (%1304, %1305, %1306)
  };
  %1307(%var_15751) /* ty=(Tensor[(2, 5, 11), float64], Tensor[(2, 5, 11), float64], Tensor[(3, 16), float32]) */
}

def @func_2756() -> (Tensor[(6, 7, 14), float32],) {
  %1320 = fn () -> (Tensor[(6, 7, 14), float32],) {
    %1308 = cast(meta[relay.Constant][65] /* ty=Tensor[(6, 7, 14), float64] */, dtype="float64") /* ty=Tensor[(6, 7, 14), float64] */;
    %1309 = atan(%1308) /* ty=Tensor[(6, 7, 14), float64] */;
    %1310 = cast(meta[relay.Constant][65] /* ty=Tensor[(6, 7, 14), float64] */, dtype="int16") /* ty=Tensor[(6, 7, 14), int16] */;
    %1311 = shape_of(%1309, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1312 = cast(%1309, dtype="int16") /* ty=Tensor[(6, 7, 14), int16] */;
    %1313 = dyn.reshape(%1310, %1311, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %1314 = right_shift(%1312, %1313) /* ty=Tensor[(6, 7, 14), int16] */;
    %1315 = cast(%1309, dtype="float32") /* ty=Tensor[(6, 7, 14), float32] */;
    %1316 = shape_of(%1314, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1317 = cast(%1314, dtype="float32") /* ty=Tensor[(6, 7, 14), float32] */;
    %1318 = dyn.reshape(%1315, %1316, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1319 = multiply(%1317, %1318) /* ty=Tensor[(6, 7, 14), float32] */;
    (%1319,)
  };
  %1320() /* ty=(Tensor[(6, 7, 14), float32],) */
}

def @func_7126() -> (Tensor[(3, 16), float32], Tensor[(8, 16, 2), float64], Tensor[(256), float64]) {
  %1321 = cast(meta[relay.Constant][66] /* ty=Tensor[(256), float64] */, dtype="float64") /* ty=Tensor[(256), float64] */;
  %1322 = reshape(%1321, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), float64] */;
  %1323 = @func_4362() /* ty=Tensor[(3, 16), float32] */;
  %1324 = @func_436(%1322) /* ty=Tensor[(8, 16, 2), float64] */;
  (%1323, %1324, meta[relay.Constant][66] /* ty=Tensor[(256), float64] */)
}

def @func_15530() -> (Tensor[(3, 16), float32],) {
  %1326 = fn () -> (Tensor[(3, 16), float32],) {
    %1325 = @func_7355() /* ty=Tensor[(3, 16), float32] */;
    (%1325,)
  };
  %1326() /* ty=(Tensor[(3, 16), float32],) */
}

def @func_5991() -> Tensor[(3, 16), float32] {
  @func_5989() /* ty=Tensor[(3, 16), float32] */
}

def @func_12521() -> Tensor[(3, 16), float32] {
  @func_12519() /* ty=Tensor[(3, 16), float32] */
}

def @func_7078() -> (Tensor[(3, 16), float32],) {
  %1327 = @func_3836() /* ty=Tensor[(3, 16), float32] */;
  (%1327,)
}

def @func_12142() -> (Tensor[(3, 16), float32],) {
  %1328 = @func_3642() /* ty=(Tensor[(3, 16), float32],) */;
  %1329 = %1328.0;
  (%1329,)
}

def @func_15511() -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
  %1333 = fn () -> (Tensor[(3, 16), float32], Tensor[(3, 16), float32]) {
    %1330 = @func_7741() /* ty=(Tensor[(3, 16), float32],) */;
    %1331 = @func_14630() /* ty=Tensor[(3, 16), float32] */;
    %1332 = %1330.0;
    (%1331, %1332)
  };
  %1333() /* ty=(Tensor[(3, 16), float32], Tensor[(3, 16), float32]) */
}

def @func_7916() -> (Tensor[(3, 16), float32],) {
  %1334 = @func_2719() /* ty=(Tensor[(3, 16), float32],) */;
  %1335 = %1334.0;
  (%1335,)
}

def @func_6199() -> (Tensor[(3, 16), float32], Tensor[(6, 7, 14), float64]) {
  %1336 = @func_2755() /* ty=(Tensor[(6, 7, 14), float32],) */;
  %1337 = %1336.0;
  %1338 = cast(%1337, dtype="float64") /* ty=Tensor[(6, 7, 14), float64] */;
  %1339 = @func_4623() /* ty=Tensor[(3, 16), float32] */;
  %1340 = sinh(%1338) /* ty=Tensor[(6, 7, 14), float64] */;
  (%1339, %1340)
}

def @func_11312(%var_11310: Tensor[(88), uint32]) -> (Tensor[(6, 7, 14), float32], Tensor[(3, 16), float32], Tensor[(14, 4), float32], Tensor[(56), float32], Tensor[(144), int8], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(88), uint32]) {
  @func_11309(%var_11310) /* ty=(Tensor[(6, 7, 14), float32], Tensor[(3, 16), float32], Tensor[(14, 4), float32], Tensor[(56), float32], Tensor[(144), int8], Tensor[(3, 16), float32], Tensor[(336), bool], Tensor[(3, 16), float32], Tensor[(88), uint32]) */
}

def @func_13537(%var_13520: Tensor[(10, 6, 2), uint8], %var_13521: Tensor[(10, 6, 2), uint8]) -> (Tensor[(10, 6, 2), bool],) {
  %1341 = cast(%var_13521, dtype="bool") /* ty=Tensor[(10, 6, 2), bool] */;
  %1342 = shape_of(%var_13520, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1343 = cast(%var_13520, dtype="bool") /* ty=Tensor[(10, 6, 2), bool] */;
  %1344 = dyn.reshape(%1341, %1342, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1345 = greater(%1343, %1344) /* ty=Tensor[(10, 6, 2), bool] */;
  (%1345,)
}

def @func_10089() -> (Tensor[(11, 7, 5), bool], Tensor[(11, ?, 13), float64], Tensor[(143), int16]) {
  @func_10087() /* ty=(Tensor[(11, 7, 5), bool], Tensor[(11, ?, 13), float64], Tensor[(143), int16]) */
}

def @func_15215() -> (Tensor[(3, 16), float32],) {
  %1346 = @func_6004() /* ty=Tensor[(3, 16), float32] */;
  (%1346,)
}

def @func_13866() -> (Tensor[(3, 16), float32],) {
  %1347 = @func_8510() /* ty=(Tensor[(3, 16), float32],) */;
  %1348 = %1347.0;
  (%1348,)
}

def @func_8502() -> (Tensor[(3, 16), float32],) {
  @func_8500() /* ty=(Tensor[(3, 16), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen361/build/output.py:4698: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen361/build/output.py", line 4703, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(468) tvmgen_default_fused_cosh_kernel0(float* __restrict__ T_cosh, float* __restrict__ placeholder) {
  T_cosh[(((int)threadIdx.x))] = coshf(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

