==========mod==========
#[version = "0.0.5"]
def @func_242(%var_152: Tensor[(16, 7, 2), float64], %var_175: Tensor[(1232), uint32], %var_205: Tensor[(11, 16, 7), uint32]) -> (Tensor[(77), uint32], Tensor[(1232), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(120), float32], Tensor[(16, 7, 2), bool], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(77), uint32] */, dtype="uint32") /* ty=Tensor[(77), uint32] */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(77), uint32] */, dtype="uint32") /* ty=Tensor[(77), uint32] */;
  %2 = cast(%var_175, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %3 = reshape(%1, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), uint32] */;
  %4 = reshape(%2, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), uint32] */;
  %5 = @func_60(%3, %4) /* ty=Tensor[(11, 16, 7), uint32] */;
  %6 = cast(%5, dtype="uint32") /* ty=Tensor[(11, 16, 7), uint32] */;
  %7 = reshape(%0, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), uint32] */;
  %8 = reshape(%6, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), uint32] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(77), uint32] */, dtype="uint32") /* ty=Tensor[(77), uint32] */;
  %10 = @func_60(%7, %8) /* ty=Tensor[(11, 16, 7), uint32] */;
  %11 = cast(%10, dtype="uint32") /* ty=Tensor[(11, 16, 7), uint32] */;
  %12 = reshape(%9, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), uint32] */;
  %13 = reshape(%11, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), uint32] */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %16 = reshape(%14, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
  %17 = reshape(%15, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
  %18 = @func_41(%16, %17) /* ty=(Tensor[(8, 5, 3), uint64],) */;
  %19 = %18.0;
  %20 = cast(%19, dtype="float32") /* ty=Tensor[(8, 5, 3), float32] */;
  %21 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(120), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(120), uint64] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?), float32] */;
  %24 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(1, 7, 2), float64] */;
  %25 = cast(%var_152, dtype="float64") /* ty=Tensor[(16, 7, 2), float64] */;
  %26 = mod(%24, %25) /* ty=Tensor[(16, 7, 2), float64] */;
  %27 = cast(%26, dtype="int64") /* ty=Tensor[(16, 7, 2), int64] */;
  %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 7, 2), float64] */, dtype="int64") /* ty=Tensor[(1, 7, 2), int64] */;
  %29 = bitwise_or(%27, %28) /* ty=Tensor[(16, 7, 2), int64] */;
  %30 = cast(%29, dtype="bool") /* ty=Tensor[(16, 7, 2), bool] */;
  %31 = shape_of(%26, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%26, dtype="bool") /* ty=Tensor[(16, 7, 2), bool] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %34 = cast(%var_205, dtype="uint32") /* ty=Tensor[(11, 16, 7), uint32] */;
  %35 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%5, dtype="uint32") /* ty=Tensor[(11, 16, 7), uint32] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %38 = cast(meta[relay.Constant][0] /* ty=Tensor[(77), uint32] */, dtype="uint32") /* ty=Tensor[(77), uint32] */;
  %39 = bitwise_and(%36, %37) /* ty=Tensor[(11, 16, 7), uint32] */;
  %40 = cast(%39, dtype="uint32") /* ty=Tensor[(11, 16, 7), uint32] */;
  %41 = reshape(%38, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), uint32] */;
  %42 = reshape(%40, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), uint32] */;
  %43 = cast(%5, dtype="float32") /* ty=Tensor[(11, 16, 7), float32] */;
  %44 = @func_60(%12, %13) /* ty=Tensor[(11, 16, 7), uint32] */;
  %45 = power(%22, %23) /* ty=Tensor[(120), float32] */;
  %46 = equal(%32, %33) /* ty=Tensor[(16, 7, 2), bool] */;
  %47 = @func_60(%41, %42) /* ty=Tensor[(11, 16, 7), uint32] */;
  %48 = sin(%43) /* ty=Tensor[(11, 16, 7), float32] */;
  (meta[relay.Constant][0] /* ty=Tensor[(77), uint32] */, %var_175, %10, %44, %45, %46, %39, %47, %48)
}

def @func_3507() -> Tensor[(11, 11, 8), float32] {
  @func_3428() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_7266(%var_7246: Tensor[(2, 1, 5), float32]) -> Tensor[(2, ?, 5), float64] {
  %49 = cast(%var_7246, dtype="float32") /* ty=Tensor[(2, 1, 5), float32] */;
  %50 = asinh(%49) /* ty=Tensor[(2, 1, 5), float32] */;
  %51 = cast(%var_7246, dtype="float32") /* ty=Tensor[(2, 1, 5), float32] */;
  %52 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%50, dtype="float32") /* ty=Tensor[(2, 1, 5), float32] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %55 = floor_divide(%53, %54) /* ty=Tensor[(2, ?, 5), float32] */;
  %56 = cast(%55, dtype="float64") /* ty=Tensor[(2, ?, 5), float64] */;
  atanh(%56) /* ty=Tensor[(2, ?, 5), float64] */
}

def @func_6478() -> (Tensor[(11, 11, 8), float32],) {
  %57 = @func_4407() /* ty=Tensor[(11, 11, 8), float32] */;
  %58 = cast(%57, dtype="float32") /* ty=Tensor[(11, 11, 8), float32] */;
  %59 = sigmoid(%58) /* ty=Tensor[(11, 11, 8), float32] */;
  (%59,)
}

def @func_5163(%var_5149: Tensor[(7, 336), int32]) -> (Tensor[(7, 336), uint8], Tensor[(7, 336), bool]) {
  %60 = @func_3957() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(11, 11, 8), bool], Tensor[(7, 336), int32], Tensor[(11, 11, 8), float32], Tensor[(7, 336), uint32], Tensor[(11, 11, 8), float32]) */;
  %61 = %60.4;
  %62 = cast(%var_5149, dtype="uint8") /* ty=Tensor[(7, 336), uint8] */;
  %63 = shape_of(%61, dtype="int32") /* ty=Tensor[(2), int32] */;
  %64 = cast(%61, dtype="uint8") /* ty=Tensor[(7, 336), uint8] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %66 = cast(%61, dtype="bool") /* ty=Tensor[(7, 336), bool] */;
  %67 = shape_of(%var_5149, dtype="int32") /* ty=Tensor[(2), int32] */;
  %68 = cast(%var_5149, dtype="bool") /* ty=Tensor[(7, 336), bool] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %70 = subtract(%64, %65) /* ty=Tensor[(7, 336), uint8] */;
  %71 = less(%68, %69) /* ty=Tensor[(7, 336), bool] */;
  (%70, %71)
}

def @func_4734(%var_4732: Tensor[(1, 1456), int16]) -> (Tensor[(11, 11, 8), float32], Tensor[(8, 14, 13), int32], Tensor[(1, 1760), float32], Tensor[(1, 1456), int16]) {
  %72 = @func_3025() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %73 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 1760), float32] */, dtype="float32") /* ty=Tensor[(1, 1760), float32] */;
  %74 = cast(%var_4732, dtype="int16") /* ty=Tensor[(1, 1456), int16] */;
  %75 = reshape(%73, newshape=[10, 16, 11]) /* ty=Tensor[(10, 16, 11), float32] */;
  %76 = reshape(%74, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
  %77 = @func_2363(%75, %76) /* ty=(Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(10, 16, 11), float64], Tensor[(10, 16, 11), float32]) */;
  %78 = %72.0;
  %79 = %77.0;
  (%78, %79, meta[relay.Constant][3] /* ty=Tensor[(1, 1760), float32] */, %var_4732)
}

def @func_7022() -> Tensor[(11, 11, 8), float32] {
  %80 = @func_3244() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) */;
  %80.0
}

def @func_5630(%var_5605: Tensor[(224), float64]) -> (Tensor[(11, 16, 7), uint32], Tensor[(224), float64], Tensor[(1232), uint32], Tensor[(11, 11, 8), bool], Tensor[(11, 11, 8), float32]) {
  %81 = cast(%var_5605, dtype="float64") /* ty=Tensor[(224), float64] */;
  %82 = cast(meta[relay.Constant][4] /* ty=Tensor[(1232), uint32] */, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %83 = cast(meta[relay.Constant][4] /* ty=Tensor[(1232), uint32] */, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %84 = reshape(%81, newshape=[16, 7, 2]) /* ty=Tensor[(16, 7, 2), float64] */;
  %85 = reshape(%82, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
  %86 = reshape(%83, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), uint32] */;
  %87 = @func_242(%84, %85, %86) /* ty=(Tensor[(77), uint32], Tensor[(1232), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(120), float32], Tensor[(16, 7, 2), bool], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), float32]) */;
  %88 = @func_3760() /* ty=Tensor[(11, 11, 8), float32] */;
  %89 = @func_3507() /* ty=Tensor[(11, 11, 8), float32] */;
  %90 = cast(%89, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %91 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%88, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %94 = @func_3862() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %95 = %87.2;
  %96 = equal(%92, %93) /* ty=Tensor[(11, 11, 8), bool] */;
  %97 = %94.0;
  (%95, %var_5605, meta[relay.Constant][4] /* ty=Tensor[(1232), uint32] */, %96, %97)
}

def @func_5308() -> (Tensor[(4, 1, 1), float64], Tensor[(7, 336), bool], Tensor[(2352), int32]) {
  %98 = @func_4973() /* ty=(Tensor[(4, 1, 1), float64],) */;
  %99 = cast(meta[relay.Constant][5] /* ty=Tensor[(2352), int32] */, dtype="int32") /* ty=Tensor[(2352), int32] */;
  %100 = reshape(%99, newshape=[7, 336]) /* ty=Tensor[(7, 336), int32] */;
  %101 = @func_5163(%100) /* ty=(Tensor[(7, 336), uint8], Tensor[(7, 336), bool]) */;
  %102 = %98.0;
  %103 = %101.1;
  (%102, %103, meta[relay.Constant][5] /* ty=Tensor[(2352), int32] */)
}

def @func_5061() -> Tensor[(4, ?, ?), bool] {
  %104 = @func_4167() /* ty=(Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) */;
  %105 = %104.2;
  %106 = cast(%105, dtype="float64") /* ty=Tensor[(4, 1, 1), float64] */;
  %107 = log10(%106) /* ty=Tensor[(4, 1, 1), float64] */;
  %108 = cast(%105, dtype="uint16") /* ty=Tensor[(4, 1, 1), uint16] */;
  %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%107, dtype="uint16") /* ty=Tensor[(4, 1, 1), uint16] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %112 = logical_xor(%110, %111) /* ty=Tensor[(4, ?, ?), uint16] */;
  %113 = cast(%107, dtype="bool") /* ty=Tensor[(4, 1, 1), bool] */;
  %114 = shape_of(%112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(%112, dtype="bool") /* ty=Tensor[(4, ?, ?), bool] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%115, %116) /* ty=Tensor[(4, ?, ?), bool] */
}

def @func_479(%var_471: Tensor[(8, 14, 13), int16]) -> Tensor[(8, 14, 13), int32] {
  %117 = cast(meta[relay.Constant][6] /* ty=Tensor[(8, 1, 13), int16] */, dtype="int16") /* ty=Tensor[(8, 1, 13), int16] */;
  %118 = cast(%var_471, dtype="int16") /* ty=Tensor[(8, 14, 13), int16] */;
  %119 = minimum(%117, %118) /* ty=Tensor[(8, 14, 13), int16] */;
  %120 = cast(meta[relay.Constant][6] /* ty=Tensor[(8, 1, 13), int16] */, dtype="int32") /* ty=Tensor[(8, 1, 13), int32] */;
  %121 = cast(%119, dtype="int32") /* ty=Tensor[(8, 14, 13), int32] */;
  left_shift(%120, %121) /* ty=Tensor[(8, 14, 13), int32] */
}

def @func_5906() -> (Tensor[(8, 13, 7), float64], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64]) {
  %122 = @func_5818() /* ty=(Tensor[(8, 13, 7), float64],) */;
  %123 = cast(meta[relay.Constant][7] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %124 = cast(meta[relay.Constant][7] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %125 = reshape(%123, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
  %126 = reshape(%124, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
  %127 = @func_41(%125, %126) /* ty=(Tensor[(8, 5, 3), uint64],) */;
  %128 = %122.0;
  %129 = %127.0;
  (%128, %129, meta[relay.Constant][7] /* ty=Tensor[(120), uint64] */)
}

def @func_3244() -> (Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) {
  %130 = @func_3025() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %131 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 2), float64] */, dtype="float64") /* ty=Tensor[(2, 2), float64] */;
  %132 = reshape(%131, newshape=[4, 1, 1]) /* ty=Tensor[(4, 1, 1), float64] */;
  %133 = %130.0;
  %134 = @func_1152(%132) /* ty=Tensor[(4, 1, 1), float64] */;
  (%133, %134, meta[relay.Constant][8] /* ty=Tensor[(2, 2), float64] */)
}

def @func_3418() -> Tensor[(11, 11, 8), bool] {
  %135 = @func_3025() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %136 = %135.0;
  %137 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 11, 8), float32] */, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%136, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%139, %140) /* ty=Tensor[(11, 11, 8), bool] */
}

def @func_60(%var_54: Tensor[(11, 1, 7), uint32], %var_55: Tensor[(11, 16, 7), uint32]) -> Tensor[(11, 16, 7), uint32] {
  %141 = cast(%var_54, dtype="uint32") /* ty=Tensor[(11, 1, 7), uint32] */;
  %142 = cast(%var_55, dtype="uint32") /* ty=Tensor[(11, 16, 7), uint32] */;
  left_shift(%141, %142) /* ty=Tensor[(11, 16, 7), uint32] */
}

def @func_3151(%var_3119: Tensor[(3, 8, 3), float64], %var_3132: float64, %var_3133: Tensor[(154), float64], %var_3146: Tensor[(21), float32]) -> (Tensor[(3, 8, 3), float64], Tensor[(1232), uint32], float64, Tensor[(154), float64], Tensor[(16, 14), float64], Tensor[(1232), uint32], Tensor[(120), uint64], Tensor[(?, 7, 3), bool], Tensor[(21), float32], Tensor[(605), int64]) {
  %143 = cast(%var_3119, dtype="float64") /* ty=Tensor[(3, 8, 3), float64] */;
  %144 = cast(%var_3132, dtype="float64") /* ty=float64 */;
  %145 = cast(%var_3133, dtype="float64") /* ty=Tensor[(154), float64] */;
  %146 = cast(meta[relay.Constant][10] /* ty=Tensor[(16, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 14), float64] */;
  %147 = cast(meta[relay.Constant][11] /* ty=Tensor[(1232), uint32] */, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %148 = cast(meta[relay.Constant][12] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %149 = cast(meta[relay.Constant][12] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %150 = reshape(%144, newshape=[]) /* ty=float64 */;
  %151 = reshape(%145, newshape=[1, 14, 11]) /* ty=Tensor[(1, 14, 11), float64] */;
  %152 = reshape(%146, newshape=[1, 224]) /* ty=Tensor[(1, 224), float64] */;
  %153 = reshape(%147, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
  %154 = reshape(%148, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %155 = reshape(%149, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
  %156 = @func_397(%150, %151, %152, %153, %154, %155) /* ty=(Tensor[(1, 14, 11), float64], Tensor[(16, 7, 2), bool], Tensor[(1, 224), float64], Tensor[(1232), uint32], Tensor[(120), uint64], Tensor[(8, 5, 3), uint16], Tensor[(11, 16, 7), uint32]) */;
  %157 = cast(%var_3146, dtype="float32") /* ty=Tensor[(21), float32] */;
  %158 = cast(meta[relay.Constant][13] /* ty=Tensor[(605), int64] */, dtype="int64") /* ty=Tensor[(605), int64] */;
  %159 = reshape(%157, newshape=[1, 7, 3]) /* ty=Tensor[(1, 7, 3), float32] */;
  %160 = reshape(%158, newshape=[605]) /* ty=Tensor[(605), int64] */;
  %161 = @func_2260(%159, %160) /* ty=(Tensor[(?, 7, 3), bool], Tensor[(6, 7, 3), bool], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(11, 11, 5), int64], Tensor[(605), int64]) */;
  %162 = cos(%143) /* ty=Tensor[(3, 8, 3), float64] */;
  %163 = %156.3;
  %164 = %161.0;
  (%162, %163, %var_3132, %var_3133, meta[relay.Constant][10] /* ty=Tensor[(16, 14), float64] */, meta[relay.Constant][11] /* ty=Tensor[(1232), uint32] */, meta[relay.Constant][12] /* ty=Tensor[(120), uint64] */, %164, %var_3146, meta[relay.Constant][13] /* ty=Tensor[(605), int64] */)
}

def @func_6883() -> (Tensor[(11, 11, 8), float32],) {
  %165 = @func_6786() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float32]) */;
  %166 = %165.0;
  (%166,)
}

def @func_6786() -> (Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float32]) {
  %167 = @func_3064() /* ty=Tensor[(11, 11, 8), float32] */;
  %168 = @func_3874() /* ty=Tensor[(11, 11, 8), float32] */;
  (%167, %168)
}

def @func_3668(%var_3616: Tensor[(11, 11, 8), bool], %var_3632: Tensor[(120), uint64]) -> (Tensor[(11, 11, 8), int16], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(5, 5, 6), int8], Tensor[(150), float32], Tensor[(4), float64]) {
  %169 = @func_3418() /* ty=Tensor[(11, 11, 8), bool] */;
  %170 = cast(%var_3616, dtype="int16") /* ty=Tensor[(11, 11, 8), int16] */;
  %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%169, dtype="int16") /* ty=Tensor[(11, 11, 8), int16] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %174 = cast(%var_3632, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %175 = cast(%var_3632, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %176 = reshape(%174, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
  %177 = reshape(%175, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
  %178 = @func_41(%176, %177) /* ty=(Tensor[(8, 5, 3), uint64],) */;
  %179 = cast(meta[relay.Constant][14] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %180 = cast(meta[relay.Constant][15] /* ty=Tensor[(4), float64] */, dtype="float64") /* ty=Tensor[(4), float64] */;
  %181 = reshape(%179, newshape=[5, 5, 6]) /* ty=Tensor[(5, 5, 6), float32] */;
  %182 = reshape(%180, newshape=[1, 4]) /* ty=Tensor[(1, 4), float64] */;
  %183 = @func_2688(%181, %182) /* ty=(Tensor[(5, 5, 6), int8], Tensor[(4, 1, 1), float64], Tensor[(1, 4), float64], Tensor[(4, 1, 1), float64]) */;
  %184 = minimum(%172, %173) /* ty=Tensor[(11, 11, 8), int16] */;
  %185 = %178.0;
  %186 = %183.0;
  (%184, %185, %var_3632, %186, meta[relay.Constant][14] /* ty=Tensor[(150), float32] */, meta[relay.Constant][15] /* ty=Tensor[(4), float64] */)
}

def @func_4008(%var_4002: float64) -> (Tensor[(11, 11, 8), float32], Tensor[(3, 6, 3), float64], float64, Tensor[(9, 6), float64]) {
  %187 = @func_3957() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(11, 11, 8), bool], Tensor[(7, 336), int32], Tensor[(11, 11, 8), float32], Tensor[(7, 336), uint32], Tensor[(11, 11, 8), float32]) */;
  %188 = cast(%var_4002, dtype="float64") /* ty=float64 */;
  %189 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 6), float64] */, dtype="float64") /* ty=Tensor[(9, 6), float64] */;
  %190 = reshape(%188, newshape=[]) /* ty=float64 */;
  %191 = reshape(%189, newshape=[3, 6, 3]) /* ty=Tensor[(3, 6, 3), float64] */;
  %192 = %187.0;
  %193 = @func_3703(%190, %191) /* ty=Tensor[(3, 6, 3), float64] */;
  (%192, %193, %var_4002, meta[relay.Constant][16] /* ty=Tensor[(9, 6), float64] */)
}

def @func_3213(%var_3188: Tensor[(1760), float32], %var_3189: Tensor[(1456), int16]) -> (Tensor[(11, 11, 8), float32], Tensor[(1, 4), float64], Tensor[(5, 30), float32], Tensor[(4, 1), float64], Tensor[(1760), float32], Tensor[(1456), float32]) {
  %194 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 30), float32] */, dtype="float32") /* ty=Tensor[(5, 30), float32] */;
  %195 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 1), float64] */, dtype="float64") /* ty=Tensor[(4, 1), float64] */;
  %196 = reshape(%194, newshape=[5, 5, 6]) /* ty=Tensor[(5, 5, 6), float32] */;
  %197 = reshape(%195, newshape=[1, 4]) /* ty=Tensor[(1, 4), float64] */;
  %198 = @func_2688(%196, %197) /* ty=(Tensor[(5, 5, 6), int8], Tensor[(4, 1, 1), float64], Tensor[(1, 4), float64], Tensor[(4, 1, 1), float64]) */;
  %199 = cast(%var_3188, dtype="float32") /* ty=Tensor[(1760), float32] */;
  %200 = cast(%var_3189, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %201 = reshape(%199, newshape=[10, 16, 11]) /* ty=Tensor[(10, 16, 11), float32] */;
  %202 = reshape(%200, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
  %203 = @func_2363(%201, %202) /* ty=(Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(10, 16, 11), float64], Tensor[(10, 16, 11), float32]) */;
  %204 = %203.1;
  %205 = cast(%var_3189, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(1), int32] */;
  %207 = cast(%204, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?), float32] */;
  %209 = @func_3064() /* ty=Tensor[(11, 11, 8), float32] */;
  %210 = %198.2;
  %211 = floor_divide(%207, %208) /* ty=Tensor[(1456), float32] */;
  (%209, %210, meta[relay.Constant][17] /* ty=Tensor[(5, 30), float32] */, meta[relay.Constant][18] /* ty=Tensor[(4, 1), float64] */, %var_3188, %211)
}

def @func_4088(%var_4040: Tensor[(1456), int16], %var_4044: Tensor[(120), uint64], %var_4077: float64) -> (Tensor[(11, 11, 8), float32], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(120), uint64], Tensor[(11, 11, 8), float32], Tensor[(2, 168), uint16], Tensor[(8, 5, 3), uint64], Tensor[(3, 6, 3), float64], float64, Tensor[(54), float64]) {
  %212 = cast(%var_4040, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %213 = reshape(%212, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), int16] */;
  %214 = @func_3025() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %215 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 168), float32] */, dtype="float32") /* ty=Tensor[(2, 168), float32] */;
  %216 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 168), float32] */, dtype="float32") /* ty=Tensor[(2, 168), float32] */;
  %217 = cast(%var_4044, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %218 = reshape(%215, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float32] */;
  %219 = reshape(%216, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float32] */;
  %220 = reshape(%217, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %221 = @func_777(%218, %219, %220) /* ty=(Tensor[(6, 7, 8), bool], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(6, 7, 8), bool], Tensor[(6, 7, 8), float64]) */;
  %222 = %221.3;
  %223 = cast(%222, dtype="uint16") /* ty=Tensor[(6, 7, 8), uint16] */;
  %224 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(2, 168), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %225 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 168), float32] */, dtype="uint16") /* ty=Tensor[(2, 168), uint16] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %227 = %214.0;
  %228 = cast(%227, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %229 = cast(%var_4044, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %230 = reshape(%228, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), bool] */;
  %231 = reshape(%229, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %232 = @func_3668(%230, %231) /* ty=(Tensor[(11, 11, 8), int16], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(5, 5, 6), int8], Tensor[(150), float32], Tensor[(4), float64]) */;
  %233 = cast(%var_4077, dtype="float64") /* ty=float64 */;
  %234 = cast(meta[relay.Constant][20] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %235 = reshape(%233, newshape=[]) /* ty=float64 */;
  %236 = reshape(%234, newshape=[3, 6, 3]) /* ty=Tensor[(3, 6, 3), float64] */;
  %237 = @func_3428() /* ty=Tensor[(11, 11, 8), float32] */;
  %238 = @func_479(%213) /* ty=Tensor[(8, 14, 13), int32] */;
  %239 = right_shift(%225, %226) /* ty=Tensor[(2, 168), uint16] */;
  %240 = %232.1;
  %241 = @func_3703(%235, %236) /* ty=Tensor[(3, 6, 3), float64] */;
  (%237, %238, %var_4040, %var_4044, %227, %239, %240, %241, %var_4077, meta[relay.Constant][20] /* ty=Tensor[(54), float64] */)
}

def @func_4295(%var_4284: Tensor[(1, 15, 16), float64]) -> (Tensor[(1, 15, 16), float64],) {
  %242 = cast(%var_4284, dtype="float64") /* ty=Tensor[(1, 15, 16), float64] */;
  %243 = sqrt(%242) /* ty=Tensor[(1, 15, 16), float64] */;
  (%243,)
}

def @func_3957() -> (Tensor[(11, 11, 8), float32], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(11, 11, 8), bool], Tensor[(7, 336), int32], Tensor[(11, 11, 8), float32], Tensor[(7, 336), uint32], Tensor[(11, 11, 8), float32]) {
  %244 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 336), float32] */, dtype="float32") /* ty=Tensor[(1, 336), float32] */;
  %245 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 336), float32] */, dtype="float32") /* ty=Tensor[(1, 336), float32] */;
  %246 = cast(meta[relay.Constant][22] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %247 = reshape(%244, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float32] */;
  %248 = reshape(%245, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float32] */;
  %249 = reshape(%246, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %250 = @func_777(%247, %248, %249) /* ty=(Tensor[(6, 7, 8), bool], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(6, 7, 8), bool], Tensor[(6, 7, 8), float64]) */;
  %251 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 336), float32] */, dtype="int32") /* ty=Tensor[(1, 336), int32] */;
  %252 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 336), float32] */, dtype="int32") /* ty=Tensor[(7, 336), int32] */;
  %253 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 336), float32] */, dtype="uint32") /* ty=Tensor[(1, 336), uint32] */;
  %254 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 336), float32] */, dtype="uint32") /* ty=Tensor[(7, 336), uint32] */;
  %255 = @func_3862() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %256 = @func_2943() /* ty=Tensor[(11, 11, 8), float32] */;
  %257 = %250.1;
  %258 = @func_3418() /* ty=Tensor[(11, 11, 8), bool] */;
  %259 = right_shift(%251, %252) /* ty=Tensor[(7, 336), int32] */;
  %260 = @func_2943() /* ty=Tensor[(11, 11, 8), float32] */;
  %261 = logical_xor(%253, %254) /* ty=Tensor[(7, 336), uint32] */;
  %262 = %255.0;
  (%256, %257, meta[relay.Constant][22] /* ty=Tensor[(120), uint64] */, %258, %259, %260, %261, %262)
}

def @func_5487(%var_5479: Tensor[(11, 11, 8), float32]) -> (Tensor[(11, 11, 8), bool],) {
  %263 = @func_3862() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %264 = %263.0;
  %265 = cast(%var_5479, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%264, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %269 = logical_and(%267, %268) /* ty=Tensor[(11, 11, 8), bool] */;
  (%269,)
}

def @func_4973() -> (Tensor[(4, 1, 1), float64],) {
  %270 = @func_4956() /* ty=(Tensor[(4, 1, 1), float64], Tensor[(9, 6), float64], float64) */;
  %271 = %270.0;
  (%271,)
}

def @func_6060() -> (Tensor[(11, 11, 8), float32],) {
  %272 = @func_4544() /* ty=Tensor[(11, 11, 8), float32] */;
  (%272,)
}

def @func_7063(%var_7059: Tensor[(9, 4, 16), float64]) -> (Tensor[(9, 4, 16), float64],) {
  %273 = cast(%var_7059, dtype="float64") /* ty=Tensor[(9, 4, 16), float64] */;
  %274 = log(%273) /* ty=Tensor[(9, 4, 16), float64] */;
  (%274,)
}

def @func_6397(%var_6370: int64, %var_6371: Tensor[(12, 4, 14), int64]) -> (Tensor[(12, 4, 14), int8], Tensor[(11, 11, 8), bool]) {
  %275 = cast(%var_6370, dtype="int64") /* ty=int64 */;
  %276 = cast(%var_6371, dtype="int64") /* ty=Tensor[(12, 4, 14), int64] */;
  %277 = right_shift(%275, %276) /* ty=Tensor[(12, 4, 14), int64] */;
  %278 = cast(%277, dtype="int8") /* ty=Tensor[(12, 4, 14), int8] */;
  %279 = cast(%var_6370, dtype="int8") /* ty=int8 */;
  %280 = multiply(%278, %279) /* ty=Tensor[(12, 4, 14), int8] */;
  %281 = @func_5331() /* ty=Tensor[(11, 11, 8), bool] */;
  (%280, %281)
}

def @func_1152(%var_1149: Tensor[(4, 1, 1), float64]) -> Tensor[(4, 1, 1), float64] {
  %282 = cast(%var_1149, dtype="float64") /* ty=Tensor[(4, 1, 1), float64] */;
  atanh(%282) /* ty=Tensor[(4, 1, 1), float64] */
}

def @func_5673() -> (Tensor[(4, 1, 1), float32], Tensor[(4, 1, 1), float64]) {
  %283 = @func_4973() /* ty=(Tensor[(4, 1, 1), float64],) */;
  %284 = %283.0;
  %285 = cast(%284, dtype="float32") /* ty=Tensor[(4, 1, 1), float32] */;
  %286 = rsqrt(%285) /* ty=Tensor[(4, 1, 1), float32] */;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(4, 1, 1), float32] */;
  %288 = sin(%287) /* ty=Tensor[(4, 1, 1), float32] */;
  %289 = cast(%288, dtype="float32") /* ty=Tensor[(4, 1, 1), float32] */;
  %290 = cast(%286, dtype="float64") /* ty=Tensor[(4, 1, 1), float64] */;
  %291 = sigmoid(%289) /* ty=Tensor[(4, 1, 1), float32] */;
  %292 = sinh(%290) /* ty=Tensor[(4, 1, 1), float64] */;
  (%291, %292)
}

def @func_4526(%var_4520: Tensor[(11, 11, 8), float32]) -> Tensor[(11, 11, 8), uint32] {
  %293 = @func_3025() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %294 = %293.0;
  %295 = cast(%var_4520, dtype="uint32") /* ty=Tensor[(11, 11, 8), uint32] */;
  %296 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%294, dtype="uint32") /* ty=Tensor[(11, 11, 8), uint32] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%297, %298) /* ty=Tensor[(11, 11, 8), uint32] */
}

def @func_2363(%var_2320: Tensor[(10, 16, 11), float32], %var_2345: Tensor[(1456), int16]) -> (Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(10, 16, 11), float64], Tensor[(10, 16, 11), float32]) {
  %299 = cast(%var_2345, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %300 = reshape(%299, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), int16] */;
  %301 = cast(%var_2320, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %302 = log(%301) /* ty=Tensor[(10, 16, 11), float32] */;
  %303 = cast(%302, dtype="int8") /* ty=Tensor[(10, 16, 11), int8] */;
  %304 = shape_of(%var_2320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%var_2320, dtype="int8") /* ty=Tensor[(10, 16, 11), int8] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %307 = right_shift(%305, %306) /* ty=Tensor[(10, 16, 11), int8] */;
  %308 = cast(%302, dtype="float64") /* ty=Tensor[(10, 16, 11), float64] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%307, dtype="float64") /* ty=Tensor[(10, 16, 11), float64] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %312 = cast(%302, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %313 = @func_479(%300) /* ty=Tensor[(8, 14, 13), int32] */;
  %314 = floor_divide(%310, %311) /* ty=Tensor[(10, 16, 11), float64] */;
  %315 = acos(%312) /* ty=Tensor[(10, 16, 11), float32] */;
  (%313, %var_2345, %314, %315)
}

def @func_3338(%var_3318: Tensor[(154), float64], %var_3319: Tensor[(224), float64], %var_3320: Tensor[(56, 22), uint32]) -> (Tensor[(120), uint64], float64, Tensor[(154), float64], Tensor[(224), float64], Tensor[(56, 22), uint32], Tensor[(120), uint64], Tensor[(11, 11, 8), float64]) {
  %316 = cast(-7.48754f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %317 = cast(%var_3318, dtype="float64") /* ty=Tensor[(154), float64] */;
  %318 = cast(%var_3319, dtype="float64") /* ty=Tensor[(224), float64] */;
  %319 = cast(%var_3320, dtype="uint32") /* ty=Tensor[(56, 22), uint32] */;
  %320 = cast(meta[relay.Constant][24] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %321 = cast(meta[relay.Constant][24] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %322 = reshape(%316, newshape=[]) /* ty=float64 */;
  %323 = reshape(%317, newshape=[1, 14, 11]) /* ty=Tensor[(1, 14, 11), float64] */;
  %324 = reshape(%318, newshape=[1, 224]) /* ty=Tensor[(1, 224), float64] */;
  %325 = reshape(%319, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
  %326 = reshape(%320, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %327 = reshape(%321, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
  %328 = @func_397(%322, %323, %324, %325, %326, %327) /* ty=(Tensor[(1, 14, 11), float64], Tensor[(16, 7, 2), bool], Tensor[(1, 224), float64], Tensor[(1232), uint32], Tensor[(120), uint64], Tensor[(8, 5, 3), uint16], Tensor[(11, 16, 7), uint32]) */;
  %329 = @func_3244() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) */;
  %330 = %329.0;
  %331 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 11, 8), float32] */, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %335 = %328.4;
  %336 = floor_mod(%333, %334) /* ty=Tensor[(11, 11, 8), float64] */;
  (%335, -7.48754f64 /* ty=float64 */, %var_3318, %var_3319, %var_3320, meta[relay.Constant][24] /* ty=Tensor[(120), uint64] */, %336)
}

def @func_5744(%var_5712: Tensor[(10, 1, 5), int32], %var_5738: Tensor[(11, 11, 5), int64]) -> (Tensor[(605), int64], Tensor[(10, 15, 5), uint16], Tensor[(11, 11, 5), int16]) {
  %337 = cast(%var_5712, dtype="float64") /* ty=Tensor[(10, 1, 5), float64] */;
  %338 = sigmoid(%337) /* ty=Tensor[(10, 1, 5), float64] */;
  %339 = cast(%var_5712, dtype="bool") /* ty=Tensor[(10, 1, 5), bool] */;
  %340 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 15, 5), int32] */, dtype="bool") /* ty=Tensor[(10, 15, 5), bool] */;
  %341 = not_equal(%339, %340) /* ty=Tensor[(10, 15, 5), bool] */;
  %342 = cast(%338, dtype="uint16") /* ty=Tensor[(10, 1, 5), uint16] */;
  %343 = cast(%341, dtype="uint16") /* ty=Tensor[(10, 15, 5), uint16] */;
  %344 = cast(meta[relay.Constant][26] /* ty=Tensor[(605), int64] */, dtype="int64") /* ty=Tensor[(605), int64] */;
  %345 = reshape(%344, newshape=[11, 11, 5]) /* ty=Tensor[(11, 11, 5), int64] */;
  %346 = @func_1912(%345) /* ty=(Tensor[(11, 11, 5), int64], Tensor[(4, 1, 1), float64], Tensor[(4), float64]) */;
  %347 = %346.0;
  %348 = cast(%var_5738, dtype="int16") /* ty=Tensor[(11, 11, 5), int16] */;
  %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%347, dtype="int16") /* ty=Tensor[(11, 11, 5), int16] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %352 = add(%342, %343) /* ty=Tensor[(10, 15, 5), uint16] */;
  %353 = left_shift(%350, %351) /* ty=Tensor[(11, 11, 5), int16] */;
  (meta[relay.Constant][26] /* ty=Tensor[(605), int64] */, %352, %353)
}

def @func_7306() -> Tensor[(11, 11, 8), float64] {
  %354 = @func_4167() /* ty=(Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) */;
  %354.0
}

def @func_4544() -> Tensor[(11, 11, 8), float32] {
  %355 = @func_3244() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) */;
  %355.0
}

def @func_7033(%var_7028: Tensor[(4, 14, 8), float32]) -> (Tensor[(4, 14, 8), float32],) {
  %356 = cast(%var_7028, dtype="float32") /* ty=Tensor[(4, 14, 8), float32] */;
  %357 = atan(%356) /* ty=Tensor[(4, 14, 8), float32] */;
  (%357,)
}

def @func_4395(%var_4369: Tensor[(4), float64]) -> (Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float64], Tensor[(3, 6, 3), float64], float64, Tensor[(27, 2), float64], Tensor[(4, 1, 1), float64], Tensor[(4), float64], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(120), uint64]) {
  %358 = @func_4210() /* ty=(Tensor[(11, 11, 8), float64],) */;
  %359 = cast(9.34135f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %360 = cast(meta[relay.Constant][28] /* ty=Tensor[(27, 2), float64] */, dtype="float64") /* ty=Tensor[(27, 2), float64] */;
  %361 = reshape(%359, newshape=[]) /* ty=float64 */;
  %362 = reshape(%360, newshape=[3, 6, 3]) /* ty=Tensor[(3, 6, 3), float64] */;
  %363 = cast(%var_4369, dtype="float64") /* ty=Tensor[(4), float64] */;
  %364 = reshape(%363, newshape=[4, 1, 1]) /* ty=Tensor[(4, 1, 1), float64] */;
  %365 = cast(meta[relay.Constant][29] /* ty=Tensor[(1456), int16] */, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %366 = cast(meta[relay.Constant][30] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %367 = cast(9.34135f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %368 = reshape(%365, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
  %369 = reshape(%366, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %370 = reshape(%367, newshape=[]) /* ty=float64 */;
  %371 = @func_4088(%368, %369, %370) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(120), uint64], Tensor[(11, 11, 8), float32], Tensor[(2, 168), uint16], Tensor[(8, 5, 3), uint64], Tensor[(3, 6, 3), float64], float64, Tensor[(54), float64]) */;
  %372 = @func_3064() /* ty=Tensor[(11, 11, 8), float32] */;
  %373 = @func_3428() /* ty=Tensor[(11, 11, 8), float32] */;
  %374 = %358.0;
  %375 = @func_3703(%361, %362) /* ty=Tensor[(3, 6, 3), float64] */;
  %376 = @func_1152(%364) /* ty=Tensor[(4, 1, 1), float64] */;
  %377 = %371.1;
  (%372, %373, %374, %375, 9.34135f64 /* ty=float64 */, meta[relay.Constant][28] /* ty=Tensor[(27, 2), float64] */, %376, %var_4369, %377, meta[relay.Constant][29] /* ty=Tensor[(1456), int16] */, meta[relay.Constant][30] /* ty=Tensor[(120), uint64] */)
}

def @func_7440(%var_7434: Tensor[(6, 20), uint64]) -> (Tensor[(9, 6), float64], Tensor[(11, 11, 8), bool], Tensor[(6, 20), uint64]) {
  %378 = @func_6143() /* ty=(Tensor[(9, 6), float64],) */;
  %379 = cast(%var_7434, dtype="uint64") /* ty=Tensor[(6, 20), uint64] */;
  %380 = reshape(%379, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %381 = @func_3991(%380) /* ty=(Tensor[(11, 11, 8), bool], Tensor[(4), float64], Tensor[(120), uint64]) */;
  %382 = %378.0;
  %383 = %381.0;
  (%382, %383, %var_7434)
}

def @func_5331() -> Tensor[(11, 11, 8), bool] {
  @func_3418() /* ty=Tensor[(11, 11, 8), bool] */
}

def @func_4593() -> (Tensor[(11, 11, 8), float32], Tensor[(6, 7, 8), float64], Tensor[(168, 2), float32], Tensor[(3, 40), uint64]) {
  %384 = cast(meta[relay.Constant][31] /* ty=Tensor[(168, 2), float32] */, dtype="float32") /* ty=Tensor[(168, 2), float32] */;
  %385 = cast(meta[relay.Constant][31] /* ty=Tensor[(168, 2), float32] */, dtype="float32") /* ty=Tensor[(168, 2), float32] */;
  %386 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 40), uint64] */, dtype="uint64") /* ty=Tensor[(3, 40), uint64] */;
  %387 = reshape(%384, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float32] */;
  %388 = reshape(%385, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float32] */;
  %389 = reshape(%386, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %390 = @func_777(%387, %388, %389) /* ty=(Tensor[(6, 7, 8), bool], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(6, 7, 8), bool], Tensor[(6, 7, 8), float64]) */;
  %391 = @func_4544() /* ty=Tensor[(11, 11, 8), float32] */;
  %392 = %390.4;
  (%391, %392, meta[relay.Constant][31] /* ty=Tensor[(168, 2), float32] */, meta[relay.Constant][32] /* ty=Tensor[(3, 40), uint64] */)
}

def @func_4956() -> (Tensor[(4, 1, 1), float64], Tensor[(9, 6), float64], float64) {
  %393 = @func_4167() /* ty=(Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) */;
  %394 = cast(8.4209f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %395 = reshape(%394, newshape=[]) /* ty=float64 */;
  %396 = @func_4008(%395) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(3, 6, 3), float64], float64, Tensor[(9, 6), float64]) */;
  %397 = %393.2;
  %398 = %396.3;
  (%397, %398, 8.4209f64 /* ty=float64 */)
}

def @func_777(%var_730: Tensor[(6, 7, 8), float32], %var_731: Tensor[(6, 7, 8), float32], %var_738: Tensor[(120), uint64]) -> (Tensor[(6, 7, 8), bool], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(6, 7, 8), bool], Tensor[(6, 7, 8), float64]) {
  %399 = cast(%var_731, dtype="bool") /* ty=Tensor[(6, 7, 8), bool] */;
  %400 = shape_of(%var_730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%var_730, dtype="bool") /* ty=Tensor[(6, 7, 8), bool] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %403 = cast(%var_738, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %404 = cast(%var_738, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %405 = reshape(%403, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
  %406 = reshape(%404, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
  %407 = @func_41(%405, %406) /* ty=(Tensor[(8, 5, 3), uint64],) */;
  %408 = cast(%var_730, dtype="uint64") /* ty=Tensor[(6, 7, 8), uint64] */;
  %409 = shape_of(%var_731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %410 = cast(%var_731, dtype="uint64") /* ty=Tensor[(6, 7, 8), uint64] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %412 = multiply(%410, %411) /* ty=Tensor[(6, 7, 8), uint64] */;
  %413 = cast(%412, dtype="float64") /* ty=Tensor[(6, 7, 8), float64] */;
  %414 = acos(%413) /* ty=Tensor[(6, 7, 8), float64] */;
  %415 = cast(%var_731, dtype="bool") /* ty=Tensor[(6, 7, 8), bool] */;
  %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%414, dtype="bool") /* ty=Tensor[(6, 7, 8), bool] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %419 = cast(%414, dtype="float64") /* ty=Tensor[(6, 7, 8), float64] */;
  %420 = greater_equal(%401, %402) /* ty=Tensor[(6, 7, 8), bool] */;
  %421 = %407.0;
  %422 = logical_and(%417, %418) /* ty=Tensor[(6, 7, 8), bool] */;
  %423 = log(%419) /* ty=Tensor[(6, 7, 8), float64] */;
  (%420, %421, %var_738, %422, %423)
}

def @func_3428() -> Tensor[(11, 11, 8), float32] {
  %424 = @func_3244() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) */;
  %424.0
}

def @func_397(%var_372: float64, %var_373: Tensor[(1, 14, 11), float64], %var_380: Tensor[(1, 224), float64], %var_381: Tensor[(1232), uint32], %var_384: Tensor[(120), uint64], %var_387: Tensor[(8, 5, 3), uint64]) -> (Tensor[(1, 14, 11), float64], Tensor[(16, 7, 2), bool], Tensor[(1, 224), float64], Tensor[(1232), uint32], Tensor[(120), uint64], Tensor[(8, 5, 3), uint16], Tensor[(11, 16, 7), uint32]) {
  %425 = cast(%var_372, dtype="float64") /* ty=float64 */;
  %426 = cast(%var_373, dtype="float64") /* ty=Tensor[(1, 14, 11), float64] */;
  %427 = cast(%var_380, dtype="float64") /* ty=Tensor[(1, 224), float64] */;
  %428 = cast(%var_381, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %429 = cast(%var_381, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %430 = reshape(%427, newshape=[16, 7, 2]) /* ty=Tensor[(16, 7, 2), float64] */;
  %431 = reshape(%428, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
  %432 = reshape(%429, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), uint32] */;
  %433 = @func_242(%430, %431, %432) /* ty=(Tensor[(77), uint32], Tensor[(1232), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(120), float32], Tensor[(16, 7, 2), bool], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), float32]) */;
  %434 = cast(%var_384, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %435 = cast(%var_384, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %436 = reshape(%434, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
  %437 = reshape(%435, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
  %438 = @func_41(%436, %437) /* ty=(Tensor[(8, 5, 3), uint64],) */;
  %439 = %438.0;
  %440 = cast(%var_387, dtype="uint16") /* ty=Tensor[(8, 5, 3), uint16] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="uint16") /* ty=Tensor[(8, 5, 3), uint16] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %444 = %433.5;
  %445 = cast(%444, dtype="float64") /* ty=Tensor[(16, 7, 2), float64] */;
  %446 = cast(%var_381, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %447 = cast(%var_381, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %448 = reshape(%445, newshape=[16, 7, 2]) /* ty=Tensor[(16, 7, 2), float64] */;
  %449 = reshape(%446, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
  %450 = reshape(%447, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), uint32] */;
  %451 = @func_242(%448, %449, %450) /* ty=(Tensor[(77), uint32], Tensor[(1232), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(120), float32], Tensor[(16, 7, 2), bool], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), float32]) */;
  %452 = divide(%425, %426) /* ty=Tensor[(1, 14, 11), float64] */;
  %453 = maximum(%442, %443) /* ty=Tensor[(8, 5, 3), uint16] */;
  %454 = %451.3;
  (%452, %444, %var_380, %var_381, %var_384, %453, %454)
}

def @func_7143() -> (Tensor[(7, 336), int32], Tensor[(9, 3, 14), int8]) {
  %455 = @func_3957() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(11, 11, 8), bool], Tensor[(7, 336), int32], Tensor[(11, 11, 8), float32], Tensor[(7, 336), uint32], Tensor[(11, 11, 8), float32]) */;
  %456 = %455.4;
  %457 = @func_5916() /* ty=Tensor[(9, 3, 14), int8] */;
  (%456, %457)
}

def @func_4210() -> (Tensor[(11, 11, 8), float64],) {
  %458 = @func_4167() /* ty=(Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) */;
  %459 = %458.1;
  (%459,)
}

def @func_3025() -> (Tensor[(11, 11, 8), float32],) {
  %460 = @func_2943() /* ty=Tensor[(11, 11, 8), float32] */;
  (%460,)
}

def @func_7178() -> (Tensor[(11, 11, 8), float32],) {
  %461 = @func_3025() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %462 = %461.0;
  (%462,)
}

def @func_6308(%var_6241: Tensor[(968, 1), bool], %var_6242: Tensor[(120), uint64], %var_6283: Tensor[(1232), uint32]) -> (Tensor[(120), uint64], Tensor[(120), uint64], Tensor[(4, 968, 1), bool], Tensor[(11, 16, 7), uint32], Tensor[(77), uint32], Tensor[(968, 1232), bool], Tensor[(4, 11, 5), float64]) {
  %463 = cast(%var_6241, dtype="bool") /* ty=Tensor[(968, 1), bool] */;
  %464 = cast(%var_6242, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %465 = reshape(%463, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), bool] */;
  %466 = reshape(%464, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %467 = @func_3668(%465, %466) /* ty=(Tensor[(11, 11, 8), int16], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(5, 5, 6), int8], Tensor[(150), float32], Tensor[(4), float64]) */;
  %468 = cast(%var_6241, dtype="float64") /* ty=Tensor[(968, 1), float64] */;
  %469 = log(%468) /* ty=Tensor[(968, 1), float64] */;
  %470 = @func_5673() /* ty=(Tensor[(4, 1, 1), float32], Tensor[(4, 1, 1), float64]) */;
  %471 = %470.0;
  %472 = cast(%469, dtype="bool") /* ty=Tensor[(968, 1), bool] */;
  %473 = cast(%471, dtype="bool") /* ty=Tensor[(4, 1, 1), bool] */;
  %474 = cast(meta[relay.Constant][33] /* ty=Tensor[(77), uint32] */, dtype="uint32") /* ty=Tensor[(77), uint32] */;
  %475 = cast(%var_6283, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %476 = reshape(%474, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), uint32] */;
  %477 = reshape(%475, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), uint32] */;
  %478 = cast(%var_6283, dtype="bool") /* ty=Tensor[(1232), bool] */;
  %479 = cast(%var_6241, dtype="bool") /* ty=Tensor[(968, 1), bool] */;
  %480 = cast(%471, dtype="float64") /* ty=Tensor[(4, 1, 1), float64] */;
  %481 = acos(%480) /* ty=Tensor[(4, 1, 1), float64] */;
  %482 = cast(%481, dtype="float64") /* ty=Tensor[(4, 1, 1), float64] */;
  %483 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 11, 5), float64] */, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
  %484 = %467.2;
  %485 = equal(%472, %473) /* ty=Tensor[(4, 968, 1), bool] */;
  %486 = @func_60(%476, %477) /* ty=Tensor[(11, 16, 7), uint32] */;
  %487 = greater(%478, %479) /* ty=Tensor[(968, 1232), bool] */;
  %488 = mod(%482, %483) /* ty=Tensor[(4, 11, 5), float64] */;
  (%484, %var_6242, %485, %486, meta[relay.Constant][33] /* ty=Tensor[(77), uint32] */, %487, %488)
}

def @func_6562(%var_6516: Tensor[(120), uint64], %var_6531: Tensor[(1232), uint32], %var_6549: Tensor[(224), float64], %var_6550: Tensor[(728, 2), int16]) -> (Tensor[(11, 11, 8), float32], Tensor[(11, 16, 7), uint32], Tensor[(120), uint64], Tensor[(1232), float32], Tensor[(224), float64], Tensor[(154), float64], Tensor[(224), float64], Tensor[(1232), int64], Tensor[(728, 2), float32]) {
  %489 = @func_2943() /* ty=Tensor[(11, 11, 8), float32] */;
  %490 = cast(%489, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %491 = cast(%var_6516, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %492 = cast(meta[relay.Constant][35] /* ty=Tensor[(1232), uint32] */, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %493 = reshape(%490, newshape=[968, 1]) /* ty=Tensor[(968, 1), bool] */;
  %494 = reshape(%491, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %495 = reshape(%492, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
  %496 = @func_6308(%493, %494, %495) /* ty=(Tensor[(120), uint64], Tensor[(120), uint64], Tensor[(4, 968, 1), bool], Tensor[(11, 16, 7), uint32], Tensor[(77), uint32], Tensor[(968, 1232), bool], Tensor[(4, 11, 5), float64]) */;
  %497 = cast(%var_6531, dtype="float32") /* ty=Tensor[(1232), float32] */;
  %498 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(1232), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %499 = cast(meta[relay.Constant][35] /* ty=Tensor[(1232), uint32] */, dtype="float32") /* ty=Tensor[(1232), float32] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?), float32] */;
  %501 = cast(%489, dtype="float32") /* ty=Tensor[(11, 11, 8), float32] */;
  %502 = cast(meta[relay.Constant][36] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
  %503 = cast(%var_6549, dtype="float64") /* ty=Tensor[(224), float64] */;
  %504 = floor_mod(%499, %500) /* ty=Tensor[(1232), float32] */;
  %505 = cast(%504, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %506 = cast(%var_6550, dtype="int16") /* ty=Tensor[(728, 2), int16] */;
  %507 = cast(2.12513f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %508 = reshape(%501, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float32] */;
  %509 = reshape(%502, newshape=[154]) /* ty=Tensor[(154), float64] */;
  %510 = reshape(%503, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %511 = reshape(%505, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
  %512 = reshape(%506, newshape=[1456, 1]) /* ty=Tensor[(1456, 1), int16] */;
  %513 = reshape(%507, newshape=[]) /* ty=float64 */;
  %514 = @func_4686(%508, %509, %510, %511, %512, %513) /* ty=(Tensor[(11, 11, 8), float64], Tensor[(120), uint64], Tensor[(154), float64], Tensor[(224), float64], Tensor[(1232), uint32], Tensor[(2, 168), uint16], Tensor[(1456, 1), int16], float64) */;
  %515 = cast(meta[relay.Constant][35] /* ty=Tensor[(1232), uint32] */, dtype="int64") /* ty=Tensor[(1232), int64] */;
  %516 = cast(2.12513f64 /* ty=float64 */, dtype="int64") /* ty=int64 */;
  %517 = cast(%var_6550, dtype="float32") /* ty=Tensor[(728, 2), float32] */;
  %518 = %496.3;
  %519 = %514.3;
  %520 = add(%515, %516) /* ty=Tensor[(1232), int64] */;
  %521 = erf(%517) /* ty=Tensor[(728, 2), float32] */;
  (%489, %518, %var_6516, %504, %519, meta[relay.Constant][36] /* ty=Tensor[(154), float64] */, %var_6549, %520, %521)
}

def @func_2943() -> Tensor[(11, 11, 8), float32] {
  %522 = cast(meta[relay.Constant][37] /* ty=Tensor[(11, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(11, 11, 8), float32] */;
  atan(%522) /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_7148() -> Tensor[(4, 1, 1), float64] {
  %523 = @func_4167() /* ty=(Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) */;
  %523.2
}

def @func_7215(%var_7187: Tensor[(1456), int16], %var_7188: Tensor[(120), uint64]) -> (Tensor[(11, 11, 8), float32], Tensor[(54), float64], Tensor[(120), uint64], float64, Tensor[(1456), float32], Tensor[(11, 11, 8), float32]) {
  %524 = @func_3025() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %525 = cast(%var_7187, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %526 = cast(%var_7188, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %527 = cast(-6.5101f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %528 = reshape(%525, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
  %529 = reshape(%526, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %530 = reshape(%527, newshape=[]) /* ty=float64 */;
  %531 = @func_4088(%528, %529, %530) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(120), uint64], Tensor[(11, 11, 8), float32], Tensor[(2, 168), uint16], Tensor[(8, 5, 3), uint64], Tensor[(3, 6, 3), float64], float64, Tensor[(54), float64]) */;
  %532 = cast(%var_7187, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %533 = %524.0;
  %534 = %531.9;
  %535 = log(%532) /* ty=Tensor[(1456), float32] */;
  %536 = @func_4544() /* ty=Tensor[(11, 11, 8), float32] */;
  (%533, %534, %var_7188, -6.5101f64 /* ty=float64 */, %535, %536)
}

def @func_6968(%var_6946: Tensor[(1456), int16]) -> (Tensor[(11, 11, 8), bool], Tensor[(5, 30), float32], Tensor[(1456), int16], Tensor[(880, 2), uint16], Tensor[(3, 6, 3), float64], float64, Tensor[(54), float64]) {
  %537 = cast(meta[relay.Constant][38] /* ty=Tensor[(880, 2), float32] */, dtype="float32") /* ty=Tensor[(880, 2), float32] */;
  %538 = cast(%var_6946, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %539 = reshape(%537, newshape=[1760]) /* ty=Tensor[(1760), float32] */;
  %540 = reshape(%538, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
  %541 = @func_3213(%539, %540) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(1, 4), float64], Tensor[(5, 30), float32], Tensor[(4, 1), float64], Tensor[(1760), float32], Tensor[(1456), float32]) */;
  %542 = cast(meta[relay.Constant][39] /* ty=Tensor[(880, 2), float32] */, dtype="bool") /* ty=Tensor[(880, 2), bool] */;
  %543 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(880, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %544 = cast(meta[relay.Constant][38] /* ty=Tensor[(880, 2), float32] */, dtype="bool") /* ty=Tensor[(880, 2), bool] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %546 = logical_and(%544, %545) /* ty=Tensor[(880, 2), bool] */;
  %547 = cast(%546, dtype="uint16") /* ty=Tensor[(880, 2), uint16] */;
  %548 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(880, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %549 = cast(meta[relay.Constant][38] /* ty=Tensor[(880, 2), float32] */, dtype="uint16") /* ty=Tensor[(880, 2), uint16] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %551 = cast(-1.36526f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %552 = cast(meta[relay.Constant][40] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %553 = reshape(%551, newshape=[]) /* ty=float64 */;
  %554 = reshape(%552, newshape=[3, 6, 3]) /* ty=Tensor[(3, 6, 3), float64] */;
  %555 = @func_3418() /* ty=Tensor[(11, 11, 8), bool] */;
  %556 = %541.2;
  %557 = right_shift(%549, %550) /* ty=Tensor[(880, 2), uint16] */;
  %558 = @func_3703(%553, %554) /* ty=Tensor[(3, 6, 3), float64] */;
  (%555, %556, %var_6946, %557, %558, -1.36526f64 /* ty=float64 */, meta[relay.Constant][40] /* ty=Tensor[(54), float64] */)
}

def @func_4407() -> Tensor[(11, 11, 8), float32] {
  @func_3428() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_5818() -> (Tensor[(8, 13, 7), float64],) {
  %559 = cast(meta[relay.Constant][42] /* ty=Tensor[(8, 13, 1), int8] */, dtype="int8") /* ty=Tensor[(8, 13, 1), int8] */;
  %560 = cast(meta[relay.Constant][41] /* ty=Tensor[(8, 13, 7), int8] */, dtype="int8") /* ty=Tensor[(8, 13, 7), int8] */;
  %561 = bitwise_xor(%559, %560) /* ty=Tensor[(8, 13, 7), int8] */;
  %562 = cast(%561, dtype="float64") /* ty=Tensor[(8, 13, 7), float64] */;
  %563 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(8, 13, 7), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(meta[relay.Constant][41] /* ty=Tensor[(8, 13, 7), int8] */, dtype="float64") /* ty=Tensor[(8, 13, 7), float64] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %566 = mod(%564, %565) /* ty=Tensor[(8, 13, 7), float64] */;
  (%566,)
}

def @func_3991(%var_3989: Tensor[(120), uint64]) -> (Tensor[(11, 11, 8), bool], Tensor[(4), float64], Tensor[(120), uint64]) {
  %567 = @func_3418() /* ty=Tensor[(11, 11, 8), bool] */;
  %568 = cast(%567, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %569 = cast(%var_3989, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %570 = reshape(%568, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), bool] */;
  %571 = reshape(%569, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %572 = @func_3668(%570, %571) /* ty=(Tensor[(11, 11, 8), int16], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(5, 5, 6), int8], Tensor[(150), float32], Tensor[(4), float64]) */;
  %573 = %572.5;
  (%567, %573, %var_3989)
}

def @func_5916() -> Tensor[(9, 3, 14), int8] {
  %574 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 3, 14), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 14), float64] */;
  %575 = log(%574) /* ty=Tensor[(9, 3, 14), float64] */;
  %576 = cast(%575, dtype="int8") /* ty=Tensor[(9, 3, 14), int8] */;
  %577 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(9, 3, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 3, 14), float64] */, dtype="int8") /* ty=Tensor[(9, 3, 14), int8] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%578, %579) /* ty=Tensor[(9, 3, 14), int8] */
}

def @func_4778(%var_4739: Tensor[(11, 11, 12), uint8], %var_4752: Tensor[(11, 11, 12), float64], %var_4772: Tensor[(336), float32], %var_4773: Tensor[(120), uint64]) -> (Tensor[(11, 11, 12), int32], Tensor[(11, 11, 12), uint64], Tensor[(11, 11, 12), int16], Tensor[(6, 7, 8), bool], Tensor[(336), float32], Tensor[(120), uint64]) {
  %580 = cast(%var_4739, dtype="uint8") /* ty=Tensor[(11, 11, 12), uint8] */;
  %581 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(11, 11, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(meta[relay.Constant][44] /* ty=Tensor[(11, 11, 12), uint8] */, dtype="uint8") /* ty=Tensor[(11, 11, 12), uint8] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %584 = minimum(%582, %583) /* ty=Tensor[(11, 11, 12), uint8] */;
  %585 = cast(%584, dtype="float64") /* ty=Tensor[(11, 11, 12), float64] */;
  %586 = rsqrt(%585) /* ty=Tensor[(11, 11, 12), float64] */;
  %587 = cast(%var_4752, dtype="int32") /* ty=Tensor[(11, 11, 12), int32] */;
  %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%586, dtype="int32") /* ty=Tensor[(11, 11, 12), int32] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %591 = cast(%var_4752, dtype="uint64") /* ty=Tensor[(11, 11, 12), uint64] */;
  %592 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%584, dtype="uint64") /* ty=Tensor[(11, 11, 12), uint64] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %595 = cast(meta[relay.Constant][44] /* ty=Tensor[(11, 11, 12), uint8] */, dtype="int16") /* ty=Tensor[(11, 11, 12), int16] */;
  %596 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%586, dtype="int16") /* ty=Tensor[(11, 11, 12), int16] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %599 = cast(%var_4772, dtype="float32") /* ty=Tensor[(336), float32] */;
  %600 = cast(%var_4772, dtype="float32") /* ty=Tensor[(336), float32] */;
  %601 = cast(%var_4773, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %602 = reshape(%599, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float32] */;
  %603 = reshape(%600, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float32] */;
  %604 = reshape(%601, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %605 = @func_777(%602, %603, %604) /* ty=(Tensor[(6, 7, 8), bool], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(6, 7, 8), bool], Tensor[(6, 7, 8), float64]) */;
  %606 = add(%589, %590) /* ty=Tensor[(11, 11, 12), int32] */;
  %607 = maximum(%593, %594) /* ty=Tensor[(11, 11, 12), uint64] */;
  %608 = bitwise_xor(%597, %598) /* ty=Tensor[(11, 11, 12), int16] */;
  %609 = %605.0;
  (%606, %607, %608, %609, %var_4772, %var_4773)
}

def @func_41(%var_36: Tensor[(8, 5, 3), uint64], %var_37: Tensor[(8, 5, 3), uint64]) -> (Tensor[(8, 5, 3), uint64],) {
  %610 = cast(%var_37, dtype="uint64") /* ty=Tensor[(8, 5, 3), uint64] */;
  %611 = shape_of(%var_36, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%var_36, dtype="uint64") /* ty=Tensor[(8, 5, 3), uint64] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %614 = multiply(%612, %613) /* ty=Tensor[(8, 5, 3), uint64] */;
  (%614,)
}

def @func_3862() -> (Tensor[(11, 11, 8), float32],) {
  %615 = @func_2943() /* ty=Tensor[(11, 11, 8), float32] */;
  (%615,)
}

def @func_4893(%var_4821: Tensor[(1760), float32], %var_4864: Tensor[(224), float64], %var_4865: Tensor[(1232), uint32]) -> (Tensor[(10, 16, 11), float64], Tensor[(1760), float32], Tensor[(1456), int16], Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), bool], Tensor[(8, 14, 13), int32], Tensor[(120), uint64], Tensor[(154, 1), float64], Tensor[(224), float64], Tensor[(1232), uint32]) {
  %616 = cast(%var_4821, dtype="float32") /* ty=Tensor[(1760), float32] */;
  %617 = cast(meta[relay.Constant][45] /* ty=Tensor[(1456), int16] */, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %618 = reshape(%616, newshape=[10, 16, 11]) /* ty=Tensor[(10, 16, 11), float32] */;
  %619 = reshape(%617, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
  %620 = @func_2363(%618, %619) /* ty=(Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(10, 16, 11), float64], Tensor[(10, 16, 11), float32]) */;
  %621 = @func_4407() /* ty=Tensor[(11, 11, 8), float32] */;
  %622 = @func_4210() /* ty=(Tensor[(11, 11, 8), float64],) */;
  %623 = %622.0;
  %624 = cast(%623, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %625 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%621, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %628 = cast(meta[relay.Constant][45] /* ty=Tensor[(1456), int16] */, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %629 = reshape(%628, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), int16] */;
  %630 = cast(meta[relay.Constant][46] /* ty=Tensor[(154, 1), float64] */, dtype="float64") /* ty=Tensor[(154, 1), float64] */;
  %631 = cast(%var_4864, dtype="float64") /* ty=Tensor[(224), float64] */;
  %632 = cast(%var_4865, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %633 = reshape(%630, newshape=[154]) /* ty=Tensor[(154), float64] */;
  %634 = reshape(%631, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %635 = reshape(%632, newshape=[56, 22]) /* ty=Tensor[(56, 22), uint32] */;
  %636 = @func_3338(%633, %634, %635) /* ty=(Tensor[(120), uint64], float64, Tensor[(154), float64], Tensor[(224), float64], Tensor[(56, 22), uint32], Tensor[(120), uint64], Tensor[(11, 11, 8), float64]) */;
  %637 = %620.2;
  %638 = @func_3874() /* ty=Tensor[(11, 11, 8), float32] */;
  %639 = less(%626, %627) /* ty=Tensor[(11, 11, 8), bool] */;
  %640 = @func_479(%629) /* ty=Tensor[(8, 14, 13), int32] */;
  %641 = %636.0;
  (%637, %var_4821, meta[relay.Constant][45] /* ty=Tensor[(1456), int16] */, %638, %639, %640, %641, meta[relay.Constant][46] /* ty=Tensor[(154, 1), float64] */, %var_4864, %var_4865)
}

def @func_5430(%var_5422: Tensor[(224), float64], %var_5423: Tensor[(4, 308), uint32]) -> (Tensor[(4, ?, ?), float64], Tensor[(11, 11, 8), float64], float64, Tensor[(154), float64], Tensor[(224), float64], Tensor[(4, 308), uint32], Tensor[(1456), int16], float64) {
  %642 = @func_5061() /* ty=Tensor[(4, ?, ?), bool] */;
  %643 = cast(%642, dtype="float64") /* ty=Tensor[(4, ?, ?), float64] */;
  %644 = @func_4167() /* ty=(Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) */;
  %645 = %644.1;
  %646 = cast(%645, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
  %647 = cast(%645, dtype="float32") /* ty=Tensor[(11, 11, 8), float32] */;
  %648 = cast(meta[relay.Constant][47] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
  %649 = cast(%var_5422, dtype="float64") /* ty=Tensor[(224), float64] */;
  %650 = cast(%var_5423, dtype="uint32") /* ty=Tensor[(4, 308), uint32] */;
  %651 = cast(meta[relay.Constant][48] /* ty=Tensor[(1456), int16] */, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %652 = cast(-2.05607f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %653 = reshape(%647, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float32] */;
  %654 = reshape(%648, newshape=[154]) /* ty=Tensor[(154), float64] */;
  %655 = reshape(%649, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %656 = reshape(%650, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
  %657 = reshape(%651, newshape=[1456, 1]) /* ty=Tensor[(1456, 1), int16] */;
  %658 = reshape(%652, newshape=[]) /* ty=float64 */;
  %659 = @func_4686(%653, %654, %655, %656, %657, %658) /* ty=(Tensor[(11, 11, 8), float64], Tensor[(120), uint64], Tensor[(154), float64], Tensor[(224), float64], Tensor[(1232), uint32], Tensor[(2, 168), uint16], Tensor[(1456, 1), int16], float64) */;
  %660 = cosh(%643) /* ty=Tensor[(4, ?, ?), float64] */;
  %661 = cosh(%646) /* ty=Tensor[(11, 11, 8), float64] */;
  %662 = %659.7;
  (%660, %661, %662, meta[relay.Constant][47] /* ty=Tensor[(154), float64] */, %var_5422, %var_5423, meta[relay.Constant][48] /* ty=Tensor[(1456), int16] */, -2.05607f64 /* ty=float64 */)
}

def @func_2688(%var_2670: Tensor[(5, 5, 6), float32], %var_2679: Tensor[(1, 4), float64]) -> (Tensor[(5, 5, 6), int8], Tensor[(4, 1, 1), float64], Tensor[(1, 4), float64], Tensor[(4, 1, 1), float64]) {
  %663 = cast(%var_2670, dtype="float32") /* ty=Tensor[(5, 5, 6), float32] */;
  %664 = cos(%663) /* ty=Tensor[(5, 5, 6), float32] */;
  %665 = cast(%var_2670, dtype="int8") /* ty=Tensor[(5, 5, 6), int8] */;
  %666 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%664, dtype="int8") /* ty=Tensor[(5, 5, 6), int8] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %669 = cast(%var_2679, dtype="float64") /* ty=Tensor[(1, 4), float64] */;
  %670 = reshape(%669, newshape=[4, 1, 1]) /* ty=Tensor[(4, 1, 1), float64] */;
  %671 = @func_1152(%670) /* ty=Tensor[(4, 1, 1), float64] */;
  %672 = cast(%671, dtype="float64") /* ty=Tensor[(4, 1, 1), float64] */;
  %673 = reshape(%672, newshape=[4, 1, 1]) /* ty=Tensor[(4, 1, 1), float64] */;
  %674 = right_shift(%667, %668) /* ty=Tensor[(5, 5, 6), int8] */;
  %675 = @func_1152(%673) /* ty=Tensor[(4, 1, 1), float64] */;
  (%674, %671, %var_2679, %675)
}

def @func_5260(%var_5205: Tensor[(13, 1, 14), uint32], %var_5206: Tensor[(13, 11, 14), uint32], %var_5234: Tensor[(13, 15, 14), uint32], %var_5243: Tensor[(1760), float32], %var_5244: Tensor[(1456), int16]) -> (Tensor[(13, 11, 14), uint32], Tensor[(13, 11, 14), float32], Tensor[(11, 11, 8), float32], Tensor[(13, 15, 14), uint16], Tensor[(4, 1), float64], Tensor[(1760), float32], Tensor[(1456), int16]) {
  %676 = cast(meta[relay.Constant][49] /* ty=Tensor[(13, 11, 14), uint32] */, dtype="uint32") /* ty=Tensor[(13, 11, 14), uint32] */;
  %677 = shape_of(%var_5206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%var_5206, dtype="uint32") /* ty=Tensor[(13, 11, 14), uint32] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %680 = cast(%var_5205, dtype="uint32") /* ty=Tensor[(13, 1, 14), uint32] */;
  %681 = cast(%var_5206, dtype="uint32") /* ty=Tensor[(13, 11, 14), uint32] */;
  %682 = minimum(%680, %681) /* ty=Tensor[(13, 11, 14), uint32] */;
  %683 = cast(%682, dtype="float32") /* ty=Tensor[(13, 11, 14), float32] */;
  %684 = shape_of(%var_5206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%var_5206, dtype="float32") /* ty=Tensor[(13, 11, 14), float32] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %687 = cast(%var_5205, dtype="uint16") /* ty=Tensor[(13, 1, 14), uint16] */;
  %688 = cast(%var_5234, dtype="uint16") /* ty=Tensor[(13, 15, 14), uint16] */;
  %689 = cast(%var_5243, dtype="float32") /* ty=Tensor[(1760), float32] */;
  %690 = cast(%var_5244, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %691 = reshape(%689, newshape=[1760]) /* ty=Tensor[(1760), float32] */;
  %692 = reshape(%690, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
  %693 = @func_3213(%691, %692) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(1, 4), float64], Tensor[(5, 30), float32], Tensor[(4, 1), float64], Tensor[(1760), float32], Tensor[(1456), float32]) */;
  %694 = bitwise_xor(%678, %679) /* ty=Tensor[(13, 11, 14), uint32] */;
  %695 = divide(%685, %686) /* ty=Tensor[(13, 11, 14), float32] */;
  %696 = @func_3760() /* ty=Tensor[(11, 11, 8), float32] */;
  %697 = left_shift(%687, %688) /* ty=Tensor[(13, 15, 14), uint16] */;
  %698 = %693.3;
  (%694, %695, %696, %697, %698, %var_5243, %var_5244)
}

def @func_3760() -> Tensor[(11, 11, 8), float32] {
  @func_2943() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_5190() -> (Tensor[(11, 11, 8), float64],) {
  %699 = @func_4167() /* ty=(Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) */;
  %700 = %699.0;
  (%700,)
}

def @func_5120(%var_5097: Tensor[(6, 11, 12), float64], %var_5104: Tensor[(605), int64]) -> (Tensor[(6, 11, 12), float64], Tensor[(11, 11, 5), int64], Tensor[(605), int64]) {
  %701 = cast(%var_5097, dtype="float64") /* ty=Tensor[(6, 11, 12), float64] */;
  %702 = cast(%var_5104, dtype="int64") /* ty=Tensor[(605), int64] */;
  %703 = reshape(%702, newshape=[11, 11, 5]) /* ty=Tensor[(11, 11, 5), int64] */;
  %704 = @func_1912(%703) /* ty=(Tensor[(11, 11, 5), int64], Tensor[(4, 1, 1), float64], Tensor[(4), float64]) */;
  %705 = log2(%701) /* ty=Tensor[(6, 11, 12), float64] */;
  %706 = %704.0;
  (%705, %706, %var_5104)
}

def @func_6707(%var_6703: Tensor[(605), int64]) -> (Tensor[(4, ?, ?), bool], Tensor[(11, 11, 8), uint32], Tensor[(605), int64], Tensor[(12, 66), float64], Tensor[(605), int64]) {
  %707 = @func_3244() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) */;
  %708 = %707.0;
  %709 = @func_3957() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(11, 11, 8), bool], Tensor[(7, 336), int32], Tensor[(11, 11, 8), float32], Tensor[(7, 336), uint32], Tensor[(11, 11, 8), float32]) */;
  %710 = %709.3;
  %711 = cast(%710, dtype="uint32") /* ty=Tensor[(11, 11, 8), uint32] */;
  %712 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(%708, dtype="uint32") /* ty=Tensor[(11, 11, 8), uint32] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %715 = cast(meta[relay.Constant][50] /* ty=Tensor[(12, 66), float64] */, dtype="float64") /* ty=Tensor[(12, 66), float64] */;
  %716 = cast(%var_6703, dtype="int64") /* ty=Tensor[(605), int64] */;
  %717 = reshape(%715, newshape=[6, 11, 12]) /* ty=Tensor[(6, 11, 12), float64] */;
  %718 = reshape(%716, newshape=[605]) /* ty=Tensor[(605), int64] */;
  %719 = @func_5120(%717, %718) /* ty=(Tensor[(6, 11, 12), float64], Tensor[(11, 11, 5), int64], Tensor[(605), int64]) */;
  %720 = @func_5061() /* ty=Tensor[(4, ?, ?), bool] */;
  %721 = add(%713, %714) /* ty=Tensor[(11, 11, 8), uint32] */;
  %722 = %719.2;
  (%720, %721, %722, meta[relay.Constant][50] /* ty=Tensor[(12, 66), float64] */, %var_6703)
}

def @func_4686(%var_4633: Tensor[(11, 11, 8), float32], %var_4645: Tensor[(154), float64], %var_4646: Tensor[(224), float64], %var_4647: Tensor[(1232), uint32], %var_4662: Tensor[(1456, 1), int16], %var_4663: float64) -> (Tensor[(11, 11, 8), float64], Tensor[(120), uint64], Tensor[(154), float64], Tensor[(224), float64], Tensor[(1232), uint32], Tensor[(2, 168), uint16], Tensor[(1456, 1), int16], float64) {
  %723 = @func_3507() /* ty=Tensor[(11, 11, 8), float32] */;
  %724 = cast(%var_4633, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
  %725 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%723, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %728 = cast(%var_4645, dtype="float64") /* ty=Tensor[(154), float64] */;
  %729 = cast(%var_4646, dtype="float64") /* ty=Tensor[(224), float64] */;
  %730 = cast(%var_4647, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %731 = reshape(%728, newshape=[154]) /* ty=Tensor[(154), float64] */;
  %732 = reshape(%729, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %733 = reshape(%730, newshape=[56, 22]) /* ty=Tensor[(56, 22), uint32] */;
  %734 = @func_3338(%731, %732, %733) /* ty=(Tensor[(120), uint64], float64, Tensor[(154), float64], Tensor[(224), float64], Tensor[(56, 22), uint32], Tensor[(120), uint64], Tensor[(11, 11, 8), float64]) */;
  %735 = cast(%var_4662, dtype="int16") /* ty=Tensor[(1456, 1), int16] */;
  %736 = %734.5;
  %737 = cast(%736, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %738 = cast(%var_4663, dtype="float64") /* ty=float64 */;
  %739 = reshape(%735, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
  %740 = reshape(%737, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %741 = reshape(%738, newshape=[]) /* ty=float64 */;
  %742 = @func_4088(%739, %740, %741) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(120), uint64], Tensor[(11, 11, 8), float32], Tensor[(2, 168), uint16], Tensor[(8, 5, 3), uint64], Tensor[(3, 6, 3), float64], float64, Tensor[(54), float64]) */;
  %743 = divide(%726, %727) /* ty=Tensor[(11, 11, 8), float64] */;
  %744 = %742.5;
  (%743, %736, %var_4645, %var_4646, %var_4647, %744, %var_4662, %var_4663)
}

def @func_5963() -> (Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float32]) {
  %745 = @func_3862() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %746 = @func_3244() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) */;
  %747 = %745.0;
  %748 = %746.0;
  (%747, %748)
}

def @func_7237() -> Tensor[(4, 15, 1), bool] {
  %749 = @func_5673() /* ty=(Tensor[(4, 1, 1), float32], Tensor[(4, 1, 1), float64]) */;
  %750 = %749.1;
  %751 = cast(%750, dtype="bool") /* ty=Tensor[(4, 1, 1), bool] */;
  %752 = cast(meta[relay.Constant][51] /* ty=Tensor[(4, 15, 1), float64] */, dtype="bool") /* ty=Tensor[(4, 15, 1), bool] */;
  less(%751, %752) /* ty=Tensor[(4, 15, 1), bool] */
}

def @main(%var_7490: Tensor[(1232), uint32], %var_7504: Tensor[(605), int64]) -> (Tensor[(11, 11, 8), float64], Tensor[(120), uint64], Tensor[(1, 120), uint64], Tensor[(1232), uint32], float64, Tensor[(1456), int16], Tensor[(3, 6, 3), float64], Tensor[(3, 18), float64], Tensor[(8, 14, 13), int32], Tensor[(605), int64], Tensor[(21), int8], Tensor[(21), float32]) {
  %753 = @func_5190() /* ty=(Tensor[(11, 11, 8), float64],) */;
  %754 = %753.0;
  %755 = cast(%754, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %756 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 120), uint64] */, dtype="uint64") /* ty=Tensor[(1, 120), uint64] */;
  %757 = cast(%var_7490, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %758 = reshape(%755, newshape=[968, 1]) /* ty=Tensor[(968, 1), bool] */;
  %759 = reshape(%756, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %760 = reshape(%757, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
  %761 = @func_6308(%758, %759, %760) /* ty=(Tensor[(120), uint64], Tensor[(120), uint64], Tensor[(4, 968, 1), bool], Tensor[(11, 16, 7), uint32], Tensor[(77), uint32], Tensor[(968, 1232), bool], Tensor[(4, 11, 5), float64]) */;
  %762 = cast(meta[relay.Constant][53] /* ty=Tensor[(1456), int16] */, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %763 = reshape(%762, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
  %764 = @func_6968(%763) /* ty=(Tensor[(11, 11, 8), bool], Tensor[(5, 30), float32], Tensor[(1456), int16], Tensor[(880, 2), uint16], Tensor[(3, 6, 3), float64], float64, Tensor[(54), float64]) */;
  %765 = %764.5;
  %766 = cast(%765, dtype="float64") /* ty=float64 */;
  %767 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 18), float64] */, dtype="float64") /* ty=Tensor[(3, 18), float64] */;
  %768 = reshape(%766, newshape=[]) /* ty=float64 */;
  %769 = reshape(%767, newshape=[3, 6, 3]) /* ty=Tensor[(3, 6, 3), float64] */;
  %770 = cast(meta[relay.Constant][55] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %771 = cast(%var_7504, dtype="int64") /* ty=Tensor[(605), int64] */;
  %772 = reshape(%770, newshape=[1, 7, 3]) /* ty=Tensor[(1, 7, 3), float32] */;
  %773 = reshape(%771, newshape=[605]) /* ty=Tensor[(605), int64] */;
  %774 = @func_2260(%772, %773) /* ty=(Tensor[(?, 7, 3), bool], Tensor[(6, 7, 3), bool], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(11, 11, 5), int64], Tensor[(605), int64]) */;
  %775 = cast(meta[relay.Constant][55] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %776 = tan(%775) /* ty=Tensor[(21), float32] */;
  %777 = cast(meta[relay.Constant][55] /* ty=Tensor[(21), float32] */, dtype="int8") /* ty=Tensor[(21), int8] */;
  %778 = shape_of(%776, dtype="int32") /* ty=Tensor[(1), int32] */;
  %779 = cast(%776, dtype="int8") /* ty=Tensor[(21), int8] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?), int8] */;
  %781 = cast(meta[relay.Constant][55] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %782 = %761.1;
  %783 = @func_3703(%768, %769) /* ty=Tensor[(3, 6, 3), float64] */;
  %784 = %774.2;
  %785 = right_shift(%779, %780) /* ty=Tensor[(21), int8] */;
  %786 = log(%781) /* ty=Tensor[(21), float32] */;
  (%754, %782, meta[relay.Constant][52] /* ty=Tensor[(1, 120), uint64] */, %var_7490, %765, meta[relay.Constant][53] /* ty=Tensor[(1456), int16] */, %783, meta[relay.Constant][54] /* ty=Tensor[(3, 18), float64] */, %784, %var_7504, %785, %786)
}

def @func_5699() -> Tensor[(4, ?, ?), float32] {
  %787 = @func_5061() /* ty=Tensor[(4, ?, ?), bool] */;
  %788 = cast(%787, dtype="float32") /* ty=Tensor[(4, ?, ?), float32] */;
  acosh(%788) /* ty=Tensor[(4, ?, ?), float32] */
}

def @func_7394() -> (Tensor[(9, 3, 14), int8], Tensor[(11, 11, 8), float32], Tensor[(2352), int32]) {
  %789 = @func_7143() /* ty=(Tensor[(7, 336), int32], Tensor[(9, 3, 14), int8]) */;
  %790 = @func_5308() /* ty=(Tensor[(4, 1, 1), float64], Tensor[(7, 336), bool], Tensor[(2352), int32]) */;
  %791 = %789.1;
  %792 = @func_4407() /* ty=Tensor[(11, 11, 8), float32] */;
  %793 = %790.2;
  (%791, %792, %793)
}

def @func_3874() -> Tensor[(11, 11, 8), float32] {
  @func_3064() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_4565() -> (Tensor[(11, 11, 8), float64],) {
  %794 = @func_4210() /* ty=(Tensor[(11, 11, 8), float64],) */;
  %795 = %794.0;
  (%795,)
}

def @func_3064() -> Tensor[(11, 11, 8), float32] {
  @func_2943() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_4030() -> Tensor[(11, 11, 8), float32] {
  @func_3507() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_4167() -> (Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) {
  %796 = @func_3957() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(11, 11, 8), bool], Tensor[(7, 336), int32], Tensor[(11, 11, 8), float32], Tensor[(7, 336), uint32], Tensor[(11, 11, 8), float32]) */;
  %797 = %796.0;
  %798 = cast(%797, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
  %799 = cast(%797, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
  %800 = @func_3244() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) */;
  %801 = log10(%798) /* ty=Tensor[(11, 11, 8), float64] */;
  %802 = log2(%799) /* ty=Tensor[(11, 11, 8), float64] */;
  %803 = %800.1;
  (%801, %802, %803)
}

def @func_1912(%var_1891: Tensor[(11, 11, 5), int64]) -> (Tensor[(11, 11, 5), int64], Tensor[(4, 1, 1), float64], Tensor[(4), float64]) {
  %804 = cast(meta[relay.Constant][56] /* ty=Tensor[(11, 11, 5), int64] */, dtype="int64") /* ty=Tensor[(11, 11, 5), int64] */;
  %805 = shape_of(%var_1891, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%var_1891, dtype="int64") /* ty=Tensor[(11, 11, 5), int64] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %808 = cast(meta[relay.Constant][57] /* ty=Tensor[(4), float64] */, dtype="float64") /* ty=Tensor[(4), float64] */;
  %809 = reshape(%808, newshape=[4, 1, 1]) /* ty=Tensor[(4, 1, 1), float64] */;
  %810 = add(%806, %807) /* ty=Tensor[(11, 11, 5), int64] */;
  %811 = @func_1152(%809) /* ty=Tensor[(4, 1, 1), float64] */;
  (%810, %811, meta[relay.Constant][57] /* ty=Tensor[(4), float64] */)
}

def @func_6211() -> (Tensor[(11, 11, 8), float32],) {
  %812 = @func_4544() /* ty=Tensor[(11, 11, 8), float32] */;
  (%812,)
}

def @func_6664(%var_6652: Tensor[(605), int64]) -> (Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float32], Tensor[(605), int64], Tensor[(50), int32], Tensor[(605), int64]) {
  %813 = @func_5190() /* ty=(Tensor[(11, 11, 8), float64],) */;
  %814 = @func_5963() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float32]) */;
  %815 = cast(meta[relay.Constant][58] /* ty=Tensor[(50), int32] */, dtype="int32") /* ty=Tensor[(50), int32] */;
  %816 = cast(%var_6652, dtype="int64") /* ty=Tensor[(605), int64] */;
  %817 = reshape(%815, newshape=[10, 1, 5]) /* ty=Tensor[(10, 1, 5), int32] */;
  %818 = reshape(%816, newshape=[11, 11, 5]) /* ty=Tensor[(11, 11, 5), int64] */;
  %819 = @func_5744(%817, %818) /* ty=(Tensor[(605), int64], Tensor[(10, 15, 5), uint16], Tensor[(11, 11, 5), int16]) */;
  %820 = %813.0;
  %821 = %814.0;
  %822 = %819.0;
  (%820, %821, %822, meta[relay.Constant][58] /* ty=Tensor[(50), int32] */, %var_6652)
}

def @func_3703(%var_3678: float64, %var_3679: Tensor[(3, 6, 3), float64]) -> Tensor[(3, 6, 3), float64] {
  %823 = cast(%var_3678, dtype="float64") /* ty=float64 */;
  %824 = cast(%var_3679, dtype="float64") /* ty=Tensor[(3, 6, 3), float64] */;
  mod(%823, %824) /* ty=Tensor[(3, 6, 3), float64] */
}

def @func_2260(%var_2221: Tensor[(1, 7, 3), float32], %var_2258: Tensor[(605), int64]) -> (Tensor[(?, 7, 3), bool], Tensor[(6, 7, 3), bool], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(11, 11, 5), int64], Tensor[(605), int64]) {
  %825 = cast(%var_2221, dtype="float32") /* ty=Tensor[(1, 7, 3), float32] */;
  %826 = asinh(%825) /* ty=Tensor[(1, 7, 3), float32] */;
  %827 = cast(%var_2221, dtype="bool") /* ty=Tensor[(1, 7, 3), bool] */;
  %828 = shape_of(%826, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(%826, dtype="bool") /* ty=Tensor[(1, 7, 3), bool] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %831 = cast(%var_2221, dtype="bool") /* ty=Tensor[(1, 7, 3), bool] */;
  %832 = cast(meta[relay.Constant][59] /* ty=Tensor[(6, 7, 3), float32] */, dtype="bool") /* ty=Tensor[(6, 7, 3), bool] */;
  %833 = cast(meta[relay.Constant][60] /* ty=Tensor[(1456), int16] */, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %834 = reshape(%833, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), int16] */;
  %835 = cast(%var_2258, dtype="int64") /* ty=Tensor[(605), int64] */;
  %836 = reshape(%835, newshape=[11, 11, 5]) /* ty=Tensor[(11, 11, 5), int64] */;
  %837 = @func_1912(%836) /* ty=(Tensor[(11, 11, 5), int64], Tensor[(4, 1, 1), float64], Tensor[(4), float64]) */;
  %838 = equal(%829, %830) /* ty=Tensor[(?, 7, 3), bool] */;
  %839 = equal(%831, %832) /* ty=Tensor[(6, 7, 3), bool] */;
  %840 = @func_479(%834) /* ty=Tensor[(8, 14, 13), int32] */;
  %841 = %837.0;
  (%838, %839, %840, meta[relay.Constant][60] /* ty=Tensor[(1456), int16] */, %841, %var_2258)
}

def @func_6143() -> (Tensor[(9, 6), float64],) {
  %842 = @func_4956() /* ty=(Tensor[(4, 1, 1), float64], Tensor[(9, 6), float64], float64) */;
  %843 = %842.1;
  (%843,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4407() -> Tensor[(11, 11, 8), float32] {
  @func_3428() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_3151(%var_3119: Tensor[(3, 8, 3), float64], %var_3132: float64, %var_3133: Tensor[(154), float64], %var_3146: Tensor[(21), float32]) -> (Tensor[(3, 8, 3), float64], Tensor[(1232), uint32], float64, Tensor[(154), float64], Tensor[(16, 14), float64], Tensor[(1232), uint32], Tensor[(120), uint64], Tensor[(?, 7, 3), bool], Tensor[(21), float32], Tensor[(605), int64]) {
  %0 = cast(%var_3119, dtype="float64") /* ty=Tensor[(3, 8, 3), float64] */;
  %1 = cast(%var_3132, dtype="float64") /* ty=float64 */;
  %2 = cast(%var_3133, dtype="float64") /* ty=Tensor[(154), float64] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 14), float64] */;
  %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(1232), uint32] */, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %5 = cast(meta[relay.Constant][2] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %6 = cast(meta[relay.Constant][2] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %7 = reshape(%1, newshape=[]) /* ty=float64 */;
  %8 = reshape(%2, newshape=[1, 14, 11]) /* ty=Tensor[(1, 14, 11), float64] */;
  %9 = reshape(%3, newshape=[1, 224]) /* ty=Tensor[(1, 224), float64] */;
  %10 = reshape(%4, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
  %11 = reshape(%5, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %12 = reshape(%6, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
  %13 = @func_397(%7, %8, %9, %10, %11, %12) /* ty=(Tensor[(1, 14, 11), float64], Tensor[(16, 7, 2), bool], Tensor[(1, 224), float64], Tensor[(1232), uint32], Tensor[(120), uint64], Tensor[(8, 5, 3), uint16], Tensor[(11, 16, 7), uint32]) */;
  %14 = cast(%var_3146, dtype="float32") /* ty=Tensor[(21), float32] */;
  %15 = cast(meta[relay.Constant][3] /* ty=Tensor[(605), int64] */, dtype="int64") /* ty=Tensor[(605), int64] */;
  %16 = reshape(%14, newshape=[1, 7, 3]) /* ty=Tensor[(1, 7, 3), float32] */;
  %17 = reshape(%15, newshape=[605]) /* ty=Tensor[(605), int64] */;
  %18 = @func_2260(%16, %17) /* ty=(Tensor[(?, 7, 3), bool], Tensor[(6, 7, 3), bool], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(11, 11, 5), int64], Tensor[(605), int64]) */;
  %19 = cos(%0) /* ty=Tensor[(3, 8, 3), float64] */;
  %20 = %13.3;
  %21 = %18.0;
  (%19, %20, %var_3132, %var_3133, meta[relay.Constant][0] /* ty=Tensor[(16, 14), float64] */, meta[relay.Constant][1] /* ty=Tensor[(1232), uint32] */, meta[relay.Constant][2] /* ty=Tensor[(120), uint64] */, %21, %var_3146, meta[relay.Constant][3] /* ty=Tensor[(605), int64] */)
}

def @func_5748(%var_5746: Tensor[(10, 1, 5), int32], %var_5747: Tensor[(11, 11, 5), int64]) -> (Tensor[(605), int64], Tensor[(10, 15, 5), uint16], Tensor[(11, 11, 5), int16]) {
  @func_5744(%var_5746, %var_5747) /* ty=(Tensor[(605), int64], Tensor[(10, 15, 5), uint16], Tensor[(11, 11, 5), int16]) */
}

def @func_3703(%var_3678: float64, %var_3679: Tensor[(3, 6, 3), float64]) -> Tensor[(3, 6, 3), float64] {
  %22 = cast(%var_3678, dtype="float64") /* ty=float64 */;
  %23 = cast(%var_3679, dtype="float64") /* ty=Tensor[(3, 6, 3), float64] */;
  mod(%22, %23) /* ty=Tensor[(3, 6, 3), float64] */
}

def @func_4211() -> (Tensor[(11, 11, 8), float64],) {
  %26 = fn () -> (Tensor[(11, 11, 8), float64],) {
    %24 = @func_4167() /* ty=(Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) */;
    %25 = %24.1;
    (%25,)
  };
  %26() /* ty=(Tensor[(11, 11, 8), float64],) */
}

def @func_3244() -> (Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) {
  %27 = @func_3025() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %28 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 2), float64] */, dtype="float64") /* ty=Tensor[(2, 2), float64] */;
  %29 = reshape(%28, newshape=[4, 1, 1]) /* ty=Tensor[(4, 1, 1), float64] */;
  %30 = %27.0;
  %31 = @func_1152(%29) /* ty=Tensor[(4, 1, 1), float64] */;
  (%30, %31, meta[relay.Constant][4] /* ty=Tensor[(2, 2), float64] */)
}

def @func_5434(%var_5432: Tensor[(224), float64], %var_5433: Tensor[(4, 308), uint32]) -> (Tensor[(4, ?, ?), float64], Tensor[(11, 11, 8), float64], float64, Tensor[(154), float64], Tensor[(224), float64], Tensor[(4, 308), uint32], Tensor[(1456), int16], float64) {
  @func_5430(%var_5432, %var_5433) /* ty=(Tensor[(4, ?, ?), float64], Tensor[(11, 11, 8), float64], float64, Tensor[(154), float64], Tensor[(224), float64], Tensor[(4, 308), uint32], Tensor[(1456), int16], float64) */
}

def @func_5674() -> (Tensor[(4, 1, 1), float32], Tensor[(4, 1, 1), float64]) {
  %42 = fn () -> (Tensor[(4, 1, 1), float32], Tensor[(4, 1, 1), float64]) {
    %32 = @func_4973() /* ty=(Tensor[(4, 1, 1), float64],) */;
    %33 = %32.0;
    %34 = cast(%33, dtype="float32") /* ty=Tensor[(4, 1, 1), float32] */;
    %35 = rsqrt(%34) /* ty=Tensor[(4, 1, 1), float32] */;
    %36 = cast(%35, dtype="float32") /* ty=Tensor[(4, 1, 1), float32] */;
    %37 = sin(%36) /* ty=Tensor[(4, 1, 1), float32] */;
    %38 = cast(%37, dtype="float32") /* ty=Tensor[(4, 1, 1), float32] */;
    %39 = cast(%35, dtype="float64") /* ty=Tensor[(4, 1, 1), float64] */;
    %40 = sigmoid(%38) /* ty=Tensor[(4, 1, 1), float32] */;
    %41 = sinh(%39) /* ty=Tensor[(4, 1, 1), float64] */;
    (%40, %41)
  };
  %42() /* ty=(Tensor[(4, 1, 1), float32], Tensor[(4, 1, 1), float64]) */
}

def @func_4898(%var_4895: Tensor[(1760), float32], %var_4896: Tensor[(224), float64], %var_4897: Tensor[(1232), uint32]) -> (Tensor[(10, 16, 11), float64], Tensor[(1760), float32], Tensor[(1456), int16], Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), bool], Tensor[(8, 14, 13), int32], Tensor[(120), uint64], Tensor[(154, 1), float64], Tensor[(224), float64], Tensor[(1232), uint32]) {
  @func_4893(%var_4895, %var_4896, %var_4897) /* ty=(Tensor[(10, 16, 11), float64], Tensor[(1760), float32], Tensor[(1456), int16], Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), bool], Tensor[(8, 14, 13), int32], Tensor[(120), uint64], Tensor[(154, 1), float64], Tensor[(224), float64], Tensor[(1232), uint32]) */
}

def @func_7178() -> (Tensor[(11, 11, 8), float32],) {
  %43 = @func_3025() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %44 = %43.0;
  (%44,)
}

def @func_7268(%var_7267: Tensor[(2, 1, 5), float32]) -> Tensor[(2, ?, 5), float64] {
  %53 = fn (%var_7246: Tensor[(2, 1, 5), float32]) -> Tensor[(2, ?, 5), float64] {
    %45 = cast(%var_7246, dtype="float32") /* ty=Tensor[(2, 1, 5), float32] */;
    %46 = asinh(%45) /* ty=Tensor[(2, 1, 5), float32] */;
    %47 = cast(%var_7246, dtype="float32") /* ty=Tensor[(2, 1, 5), float32] */;
    %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
    %49 = cast(%46, dtype="float32") /* ty=Tensor[(2, 1, 5), float32] */;
    %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %51 = floor_divide(%49, %50) /* ty=Tensor[(2, ?, 5), float32] */;
    %52 = cast(%51, dtype="float64") /* ty=Tensor[(2, ?, 5), float64] */;
    atanh(%52) /* ty=Tensor[(2, ?, 5), float64] */
  };
  %53(%var_7267) /* ty=Tensor[(2, ?, 5), float64] */
}

def @func_5820() -> (Tensor[(8, 13, 7), float64],) {
  @func_5818() /* ty=(Tensor[(8, 13, 7), float64],) */
}

def @func_6143() -> (Tensor[(9, 6), float64],) {
  %54 = @func_4956() /* ty=(Tensor[(4, 1, 1), float64], Tensor[(9, 6), float64], float64) */;
  %55 = %54.1;
  (%55,)
}

def @func_4397(%var_4396: Tensor[(4), float64]) -> (Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float64], Tensor[(3, 6, 3), float64], float64, Tensor[(27, 2), float64], Tensor[(4, 1, 1), float64], Tensor[(4), float64], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(120), uint64]) {
  %76 = fn (%var_4369: Tensor[(4), float64]) -> (Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float64], Tensor[(3, 6, 3), float64], float64, Tensor[(27, 2), float64], Tensor[(4, 1, 1), float64], Tensor[(4), float64], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(120), uint64]) {
    %56 = @func_4210() /* ty=(Tensor[(11, 11, 8), float64],) */;
    %57 = cast(9.34135f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %58 = cast(meta[relay.Constant][5] /* ty=Tensor[(27, 2), float64] */, dtype="float64") /* ty=Tensor[(27, 2), float64] */;
    %59 = reshape(%57, newshape=[]) /* ty=float64 */;
    %60 = reshape(%58, newshape=[3, 6, 3]) /* ty=Tensor[(3, 6, 3), float64] */;
    %61 = cast(%var_4369, dtype="float64") /* ty=Tensor[(4), float64] */;
    %62 = reshape(%61, newshape=[4, 1, 1]) /* ty=Tensor[(4, 1, 1), float64] */;
    %63 = cast(meta[relay.Constant][6] /* ty=Tensor[(1456), int16] */, dtype="int16") /* ty=Tensor[(1456), int16] */;
    %64 = cast(meta[relay.Constant][7] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %65 = cast(9.34135f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %66 = reshape(%63, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
    %67 = reshape(%64, newshape=[120]) /* ty=Tensor[(120), uint64] */;
    %68 = reshape(%65, newshape=[]) /* ty=float64 */;
    %69 = @func_4088(%66, %67, %68) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(120), uint64], Tensor[(11, 11, 8), float32], Tensor[(2, 168), uint16], Tensor[(8, 5, 3), uint64], Tensor[(3, 6, 3), float64], float64, Tensor[(54), float64]) */;
    %70 = @func_3064() /* ty=Tensor[(11, 11, 8), float32] */;
    %71 = @func_3428() /* ty=Tensor[(11, 11, 8), float32] */;
    %72 = %56.0;
    %73 = @func_3703(%59, %60) /* ty=Tensor[(3, 6, 3), float64] */;
    %74 = @func_1152(%62) /* ty=Tensor[(4, 1, 1), float64] */;
    %75 = %69.1;
    (%70, %71, %72, %73, 9.34135f64 /* ty=float64 */, meta[relay.Constant][5] /* ty=Tensor[(27, 2), float64] */, %74, %var_4369, %75, meta[relay.Constant][6] /* ty=Tensor[(1456), int16] */, meta[relay.Constant][7] /* ty=Tensor[(120), uint64] */)
  };
  %76(%var_4396) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float64], Tensor[(3, 6, 3), float64], float64, Tensor[(27, 2), float64], Tensor[(4, 1, 1), float64], Tensor[(4), float64], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(120), uint64]) */
}

def @func_2260(%var_2221: Tensor[(1, 7, 3), float32], %var_2258: Tensor[(605), int64]) -> (Tensor[(?, 7, 3), bool], Tensor[(6, 7, 3), bool], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(11, 11, 5), int64], Tensor[(605), int64]) {
  %77 = cast(%var_2221, dtype="float32") /* ty=Tensor[(1, 7, 3), float32] */;
  %78 = asinh(%77) /* ty=Tensor[(1, 7, 3), float32] */;
  %79 = cast(%var_2221, dtype="bool") /* ty=Tensor[(1, 7, 3), bool] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%78, dtype="bool") /* ty=Tensor[(1, 7, 3), bool] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %83 = cast(%var_2221, dtype="bool") /* ty=Tensor[(1, 7, 3), bool] */;
  %84 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 7, 3), float32] */, dtype="bool") /* ty=Tensor[(6, 7, 3), bool] */;
  %85 = cast(meta[relay.Constant][9] /* ty=Tensor[(1456), int16] */, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %86 = reshape(%85, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), int16] */;
  %87 = cast(%var_2258, dtype="int64") /* ty=Tensor[(605), int64] */;
  %88 = reshape(%87, newshape=[11, 11, 5]) /* ty=Tensor[(11, 11, 5), int64] */;
  %89 = @func_1912(%88) /* ty=(Tensor[(11, 11, 5), int64], Tensor[(4, 1, 1), float64], Tensor[(4), float64]) */;
  %90 = equal(%81, %82) /* ty=Tensor[(?, 7, 3), bool] */;
  %91 = equal(%83, %84) /* ty=Tensor[(6, 7, 3), bool] */;
  %92 = @func_479(%86) /* ty=Tensor[(8, 14, 13), int32] */;
  %93 = %89.0;
  (%90, %91, %92, meta[relay.Constant][9] /* ty=Tensor[(1456), int16] */, %93, %var_2258)
}

def @func_5818() -> (Tensor[(8, 13, 7), float64],) {
  %94 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 13, 1), int8] */, dtype="int8") /* ty=Tensor[(8, 13, 1), int8] */;
  %95 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 13, 7), int8] */, dtype="int8") /* ty=Tensor[(8, 13, 7), int8] */;
  %96 = bitwise_xor(%94, %95) /* ty=Tensor[(8, 13, 7), int8] */;
  %97 = cast(%96, dtype="float64") /* ty=Tensor[(8, 13, 7), float64] */;
  %98 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(8, 13, 7), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 13, 7), int8] */, dtype="float64") /* ty=Tensor[(8, 13, 7), float64] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %101 = mod(%99, %100) /* ty=Tensor[(8, 13, 7), float64] */;
  (%101,)
}

def @func_2367(%var_2365: Tensor[(10, 16, 11), float32], %var_2366: Tensor[(1456), int16]) -> (Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(10, 16, 11), float64], Tensor[(10, 16, 11), float32]) {
  @func_2363(%var_2365, %var_2366) /* ty=(Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(10, 16, 11), float64], Tensor[(10, 16, 11), float32]) */
}

def @func_3064() -> Tensor[(11, 11, 8), float32] {
  @func_2943() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_5430(%var_5422: Tensor[(224), float64], %var_5423: Tensor[(4, 308), uint32]) -> (Tensor[(4, ?, ?), float64], Tensor[(11, 11, 8), float64], float64, Tensor[(154), float64], Tensor[(224), float64], Tensor[(4, 308), uint32], Tensor[(1456), int16], float64) {
  %102 = @func_5061() /* ty=Tensor[(4, ?, ?), bool] */;
  %103 = cast(%102, dtype="float64") /* ty=Tensor[(4, ?, ?), float64] */;
  %104 = @func_4167() /* ty=(Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) */;
  %105 = %104.1;
  %106 = cast(%105, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
  %107 = cast(%105, dtype="float32") /* ty=Tensor[(11, 11, 8), float32] */;
  %108 = cast(meta[relay.Constant][12] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
  %109 = cast(%var_5422, dtype="float64") /* ty=Tensor[(224), float64] */;
  %110 = cast(%var_5423, dtype="uint32") /* ty=Tensor[(4, 308), uint32] */;
  %111 = cast(meta[relay.Constant][13] /* ty=Tensor[(1456), int16] */, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %112 = cast(-2.05607f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %113 = reshape(%107, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float32] */;
  %114 = reshape(%108, newshape=[154]) /* ty=Tensor[(154), float64] */;
  %115 = reshape(%109, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %116 = reshape(%110, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
  %117 = reshape(%111, newshape=[1456, 1]) /* ty=Tensor[(1456, 1), int16] */;
  %118 = reshape(%112, newshape=[]) /* ty=float64 */;
  %119 = @func_4686(%113, %114, %115, %116, %117, %118) /* ty=(Tensor[(11, 11, 8), float64], Tensor[(120), uint64], Tensor[(154), float64], Tensor[(224), float64], Tensor[(1232), uint32], Tensor[(2, 168), uint16], Tensor[(1456, 1), int16], float64) */;
  %120 = cosh(%103) /* ty=Tensor[(4, ?, ?), float64] */;
  %121 = cosh(%106) /* ty=Tensor[(11, 11, 8), float64] */;
  %122 = %119.7;
  (%120, %121, %122, meta[relay.Constant][12] /* ty=Tensor[(154), float64] */, %var_5422, %var_5423, meta[relay.Constant][13] /* ty=Tensor[(1456), int16] */, -2.05607f64 /* ty=float64 */)
}

def @func_4544() -> Tensor[(11, 11, 8), float32] {
  %123 = @func_3244() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) */;
  %123.0
}

def @func_1915(%var_1913: Tensor[(11, 11, 5), int64]) -> (Tensor[(11, 11, 5), int64], Tensor[(4, 1, 1), float64], Tensor[(4), float64]) {
  @func_1912(%var_1913) /* ty=(Tensor[(11, 11, 5), int64], Tensor[(4, 1, 1), float64], Tensor[(4), float64]) */
}

def @func_6666(%var_6665: Tensor[(605), int64]) -> (Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float32], Tensor[(605), int64], Tensor[(50), int32], Tensor[(605), int64]) {
  %134 = fn (%var_6652: Tensor[(605), int64]) -> (Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float32], Tensor[(605), int64], Tensor[(50), int32], Tensor[(605), int64]) {
    %124 = @func_5190() /* ty=(Tensor[(11, 11, 8), float64],) */;
    %125 = @func_5963() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float32]) */;
    %126 = cast(meta[relay.Constant][14] /* ty=Tensor[(50), int32] */, dtype="int32") /* ty=Tensor[(50), int32] */;
    %127 = cast(%var_6652, dtype="int64") /* ty=Tensor[(605), int64] */;
    %128 = reshape(%126, newshape=[10, 1, 5]) /* ty=Tensor[(10, 1, 5), int32] */;
    %129 = reshape(%127, newshape=[11, 11, 5]) /* ty=Tensor[(11, 11, 5), int64] */;
    %130 = @func_5744(%128, %129) /* ty=(Tensor[(605), int64], Tensor[(10, 15, 5), uint16], Tensor[(11, 11, 5), int16]) */;
    %131 = %124.0;
    %132 = %125.0;
    %133 = %130.0;
    (%131, %132, %133, meta[relay.Constant][14] /* ty=Tensor[(50), int32] */, %var_6652)
  };
  %134(%var_6665) /* ty=(Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float32], Tensor[(605), int64], Tensor[(50), int32], Tensor[(605), int64]) */
}

def @func_4893(%var_4821: Tensor[(1760), float32], %var_4864: Tensor[(224), float64], %var_4865: Tensor[(1232), uint32]) -> (Tensor[(10, 16, 11), float64], Tensor[(1760), float32], Tensor[(1456), int16], Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), bool], Tensor[(8, 14, 13), int32], Tensor[(120), uint64], Tensor[(154, 1), float64], Tensor[(224), float64], Tensor[(1232), uint32]) {
  %135 = cast(%var_4821, dtype="float32") /* ty=Tensor[(1760), float32] */;
  %136 = cast(meta[relay.Constant][15] /* ty=Tensor[(1456), int16] */, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %137 = reshape(%135, newshape=[10, 16, 11]) /* ty=Tensor[(10, 16, 11), float32] */;
  %138 = reshape(%136, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
  %139 = @func_2363(%137, %138) /* ty=(Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(10, 16, 11), float64], Tensor[(10, 16, 11), float32]) */;
  %140 = @func_4407() /* ty=Tensor[(11, 11, 8), float32] */;
  %141 = @func_4210() /* ty=(Tensor[(11, 11, 8), float64],) */;
  %142 = %141.0;
  %143 = cast(%142, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %144 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%140, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %147 = cast(meta[relay.Constant][15] /* ty=Tensor[(1456), int16] */, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %148 = reshape(%147, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), int16] */;
  %149 = cast(meta[relay.Constant][16] /* ty=Tensor[(154, 1), float64] */, dtype="float64") /* ty=Tensor[(154, 1), float64] */;
  %150 = cast(%var_4864, dtype="float64") /* ty=Tensor[(224), float64] */;
  %151 = cast(%var_4865, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %152 = reshape(%149, newshape=[154]) /* ty=Tensor[(154), float64] */;
  %153 = reshape(%150, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %154 = reshape(%151, newshape=[56, 22]) /* ty=Tensor[(56, 22), uint32] */;
  %155 = @func_3338(%152, %153, %154) /* ty=(Tensor[(120), uint64], float64, Tensor[(154), float64], Tensor[(224), float64], Tensor[(56, 22), uint32], Tensor[(120), uint64], Tensor[(11, 11, 8), float64]) */;
  %156 = %139.2;
  %157 = @func_3874() /* ty=Tensor[(11, 11, 8), float32] */;
  %158 = less(%145, %146) /* ty=Tensor[(11, 11, 8), bool] */;
  %159 = @func_479(%148) /* ty=Tensor[(8, 14, 13), int32] */;
  %160 = %155.0;
  (%156, %var_4821, meta[relay.Constant][15] /* ty=Tensor[(1456), int16] */, %157, %158, %159, %160, meta[relay.Constant][16] /* ty=Tensor[(154, 1), float64] */, %var_4864, %var_4865)
}

def @func_3874() -> Tensor[(11, 11, 8), float32] {
  @func_3064() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_5632(%var_5631: Tensor[(224), float64]) -> (Tensor[(11, 16, 7), uint32], Tensor[(224), float64], Tensor[(1232), uint32], Tensor[(11, 11, 8), bool], Tensor[(11, 11, 8), float32]) {
  %178 = fn (%var_5605: Tensor[(224), float64]) -> (Tensor[(11, 16, 7), uint32], Tensor[(224), float64], Tensor[(1232), uint32], Tensor[(11, 11, 8), bool], Tensor[(11, 11, 8), float32]) {
    %161 = cast(%var_5605, dtype="float64") /* ty=Tensor[(224), float64] */;
    %162 = cast(meta[relay.Constant][17] /* ty=Tensor[(1232), uint32] */, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
    %163 = cast(meta[relay.Constant][17] /* ty=Tensor[(1232), uint32] */, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
    %164 = reshape(%161, newshape=[16, 7, 2]) /* ty=Tensor[(16, 7, 2), float64] */;
    %165 = reshape(%162, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
    %166 = reshape(%163, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), uint32] */;
    %167 = @func_242(%164, %165, %166) /* ty=(Tensor[(77), uint32], Tensor[(1232), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(120), float32], Tensor[(16, 7, 2), bool], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), float32]) */;
    %168 = @func_3760() /* ty=Tensor[(11, 11, 8), float32] */;
    %169 = @func_3507() /* ty=Tensor[(11, 11, 8), float32] */;
    %170 = cast(%169, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
    %171 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
    %172 = cast(%168, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
    %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %174 = @func_3862() /* ty=(Tensor[(11, 11, 8), float32],) */;
    %175 = %167.2;
    %176 = equal(%172, %173) /* ty=Tensor[(11, 11, 8), bool] */;
    %177 = %174.0;
    (%175, %var_5605, meta[relay.Constant][17] /* ty=Tensor[(1232), uint32] */, %176, %177)
  };
  %178(%var_5631) /* ty=(Tensor[(11, 16, 7), uint32], Tensor[(224), float64], Tensor[(1232), uint32], Tensor[(11, 11, 8), bool], Tensor[(11, 11, 8), float32]) */
}

def @func_7022() -> Tensor[(11, 11, 8), float32] {
  %179 = @func_3244() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) */;
  %179.0
}

def @func_7396() -> (Tensor[(9, 3, 14), int8], Tensor[(11, 11, 8), float32], Tensor[(2352), int32]) {
  @func_7394() /* ty=(Tensor[(9, 3, 14), int8], Tensor[(11, 11, 8), float32], Tensor[(2352), int32]) */
}

def @func_7219(%var_7217: Tensor[(1456), int16], %var_7218: Tensor[(120), uint64]) -> (Tensor[(11, 11, 8), float32], Tensor[(54), float64], Tensor[(120), uint64], float64, Tensor[(1456), float32], Tensor[(11, 11, 8), float32]) {
  @func_7215(%var_7217, %var_7218) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(54), float64], Tensor[(120), uint64], float64, Tensor[(1456), float32], Tensor[(11, 11, 8), float32]) */
}

def @func_4297(%var_4296: Tensor[(1, 15, 16), float64]) -> (Tensor[(1, 15, 16), float64],) {
  %182 = fn (%var_4284: Tensor[(1, 15, 16), float64]) -> (Tensor[(1, 15, 16), float64],) {
    %180 = cast(%var_4284, dtype="float64") /* ty=Tensor[(1, 15, 16), float64] */;
    %181 = sqrt(%180) /* ty=Tensor[(1, 15, 16), float64] */;
    (%181,)
  };
  %182(%var_4296) /* ty=(Tensor[(1, 15, 16), float64],) */
}

def @func_7306() -> Tensor[(11, 11, 8), float64] {
  %183 = @func_4167() /* ty=(Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) */;
  %183.0
}

def @func_5062() -> Tensor[(4, ?, ?), bool] {
  %197 = fn () -> Tensor[(4, ?, ?), bool] {
    %184 = @func_4167() /* ty=(Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) */;
    %185 = %184.2;
    %186 = cast(%185, dtype="float64") /* ty=Tensor[(4, 1, 1), float64] */;
    %187 = log10(%186) /* ty=Tensor[(4, 1, 1), float64] */;
    %188 = cast(%185, dtype="uint16") /* ty=Tensor[(4, 1, 1), uint16] */;
    %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
    %190 = cast(%187, dtype="uint16") /* ty=Tensor[(4, 1, 1), uint16] */;
    %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %192 = logical_xor(%190, %191) /* ty=Tensor[(4, ?, ?), uint16] */;
    %193 = cast(%187, dtype="bool") /* ty=Tensor[(4, 1, 1), bool] */;
    %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
    %195 = cast(%192, dtype="bool") /* ty=Tensor[(4, ?, ?), bool] */;
    %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%195, %196) /* ty=Tensor[(4, ?, ?), bool] */
  };
  %197() /* ty=Tensor[(4, ?, ?), bool] */
}

def @func_6145() -> (Tensor[(9, 6), float64],) {
  @func_6143() /* ty=(Tensor[(9, 6), float64],) */
}

def @func_3761() -> Tensor[(11, 11, 8), float32] {
  %198 = fn () -> Tensor[(11, 11, 8), float32] {
    @func_2943() /* ty=Tensor[(11, 11, 8), float32] */
  };
  %198() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_6710(%var_6708: Tensor[(605), int64]) -> (Tensor[(4, ?, ?), bool], Tensor[(11, 11, 8), uint32], Tensor[(605), int64], Tensor[(12, 66), float64], Tensor[(605), int64]) {
  @func_6707(%var_6708) /* ty=(Tensor[(4, ?, ?), bool], Tensor[(11, 11, 8), uint32], Tensor[(605), int64], Tensor[(12, 66), float64], Tensor[(605), int64]) */
}

def @func_3876() -> Tensor[(11, 11, 8), float32] {
  @func_3874() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_5191() -> (Tensor[(11, 11, 8), float64],) {
  %201 = fn () -> (Tensor[(11, 11, 8), float64],) {
    %199 = @func_4167() /* ty=(Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) */;
    %200 = %199.0;
    (%200,)
  };
  %201() /* ty=(Tensor[(11, 11, 8), float64],) */
}

def @func_479(%var_471: Tensor[(8, 14, 13), int16]) -> Tensor[(8, 14, 13), int32] {
  %202 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 1, 13), int16] */, dtype="int16") /* ty=Tensor[(8, 1, 13), int16] */;
  %203 = cast(%var_471, dtype="int16") /* ty=Tensor[(8, 14, 13), int16] */;
  %204 = minimum(%202, %203) /* ty=Tensor[(8, 14, 13), int16] */;
  %205 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 1, 13), int16] */, dtype="int32") /* ty=Tensor[(8, 1, 13), int32] */;
  %206 = cast(%204, dtype="int32") /* ty=Tensor[(8, 14, 13), int32] */;
  left_shift(%205, %206) /* ty=Tensor[(8, 14, 13), int32] */
}

def @func_7065(%var_7064: Tensor[(9, 4, 16), float64]) -> (Tensor[(9, 4, 16), float64],) {
  %209 = fn (%var_7059: Tensor[(9, 4, 16), float64]) -> (Tensor[(9, 4, 16), float64],) {
    %207 = cast(%var_7059, dtype="float64") /* ty=Tensor[(9, 4, 16), float64] */;
    %208 = log(%207) /* ty=Tensor[(9, 4, 16), float64] */;
    (%208,)
  };
  %209(%var_7064) /* ty=(Tensor[(9, 4, 16), float64],) */
}

def @func_6212() -> (Tensor[(11, 11, 8), float32],) {
  %211 = fn () -> (Tensor[(11, 11, 8), float32],) {
    %210 = @func_4544() /* ty=Tensor[(11, 11, 8), float32] */;
    (%210,)
  };
  %211() /* ty=(Tensor[(11, 11, 8), float32],) */
}

def @func_2945() -> Tensor[(11, 11, 8), float32] {
  @func_2943() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_5123(%var_5121: Tensor[(6, 11, 12), float64], %var_5122: Tensor[(605), int64]) -> (Tensor[(6, 11, 12), float64], Tensor[(11, 11, 5), int64], Tensor[(605), int64]) {
  %218 = fn (%var_5097: Tensor[(6, 11, 12), float64], %var_5104: Tensor[(605), int64]) -> (Tensor[(6, 11, 12), float64], Tensor[(11, 11, 5), int64], Tensor[(605), int64]) {
    %212 = cast(%var_5097, dtype="float64") /* ty=Tensor[(6, 11, 12), float64] */;
    %213 = cast(%var_5104, dtype="int64") /* ty=Tensor[(605), int64] */;
    %214 = reshape(%213, newshape=[11, 11, 5]) /* ty=Tensor[(11, 11, 5), int64] */;
    %215 = @func_1912(%214) /* ty=(Tensor[(11, 11, 5), int64], Tensor[(4, 1, 1), float64], Tensor[(4), float64]) */;
    %216 = log2(%212) /* ty=Tensor[(6, 11, 12), float64] */;
    %217 = %215.0;
    (%216, %217, %var_5104)
  };
  %218(%var_5121, %var_5122) /* ty=(Tensor[(6, 11, 12), float64], Tensor[(11, 11, 5), int64], Tensor[(605), int64]) */
}

def @func_7024() -> Tensor[(11, 11, 8), float32] {
  @func_7022() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_4093(%var_4090: Tensor[(1456), int16], %var_4091: Tensor[(120), uint64], %var_4092: float64) -> (Tensor[(11, 11, 8), float32], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(120), uint64], Tensor[(11, 11, 8), float32], Tensor[(2, 168), uint16], Tensor[(8, 5, 3), uint64], Tensor[(3, 6, 3), float64], float64, Tensor[(54), float64]) {
  @func_4088(%var_4090, %var_4091, %var_4092) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(120), uint64], Tensor[(11, 11, 8), float32], Tensor[(2, 168), uint16], Tensor[(8, 5, 3), uint64], Tensor[(3, 6, 3), float64], float64, Tensor[(54), float64]) */
}

def @func_4167() -> (Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) {
  %219 = @func_3957() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(11, 11, 8), bool], Tensor[(7, 336), int32], Tensor[(11, 11, 8), float32], Tensor[(7, 336), uint32], Tensor[(11, 11, 8), float32]) */;
  %220 = %219.0;
  %221 = cast(%220, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
  %222 = cast(%220, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
  %223 = @func_3244() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) */;
  %224 = log10(%221) /* ty=Tensor[(11, 11, 8), float64] */;
  %225 = log2(%222) /* ty=Tensor[(11, 11, 8), float64] */;
  %226 = %223.1;
  (%224, %225, %226)
}

def @func_3066() -> Tensor[(11, 11, 8), float32] {
  @func_3064() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_3958() -> (Tensor[(11, 11, 8), float32], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(11, 11, 8), bool], Tensor[(7, 336), int32], Tensor[(11, 11, 8), float32], Tensor[(7, 336), uint32], Tensor[(11, 11, 8), float32]) {
  %246 = fn () -> (Tensor[(11, 11, 8), float32], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(11, 11, 8), bool], Tensor[(7, 336), int32], Tensor[(11, 11, 8), float32], Tensor[(7, 336), uint32], Tensor[(11, 11, 8), float32]) {
    %227 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 336), float32] */, dtype="float32") /* ty=Tensor[(1, 336), float32] */;
    %228 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 336), float32] */, dtype="float32") /* ty=Tensor[(1, 336), float32] */;
    %229 = cast(meta[relay.Constant][20] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %230 = reshape(%227, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float32] */;
    %231 = reshape(%228, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float32] */;
    %232 = reshape(%229, newshape=[120]) /* ty=Tensor[(120), uint64] */;
    %233 = @func_777(%230, %231, %232) /* ty=(Tensor[(6, 7, 8), bool], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(6, 7, 8), bool], Tensor[(6, 7, 8), float64]) */;
    %234 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 336), float32] */, dtype="int32") /* ty=Tensor[(1, 336), int32] */;
    %235 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 336), float32] */, dtype="int32") /* ty=Tensor[(7, 336), int32] */;
    %236 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 336), float32] */, dtype="uint32") /* ty=Tensor[(1, 336), uint32] */;
    %237 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 336), float32] */, dtype="uint32") /* ty=Tensor[(7, 336), uint32] */;
    %238 = @func_3862() /* ty=(Tensor[(11, 11, 8), float32],) */;
    %239 = @func_2943() /* ty=Tensor[(11, 11, 8), float32] */;
    %240 = %233.1;
    %241 = @func_3418() /* ty=Tensor[(11, 11, 8), bool] */;
    %242 = right_shift(%234, %235) /* ty=Tensor[(7, 336), int32] */;
    %243 = @func_2943() /* ty=Tensor[(11, 11, 8), float32] */;
    %244 = logical_xor(%236, %237) /* ty=Tensor[(7, 336), uint32] */;
    %245 = %238.0;
    (%239, %240, meta[relay.Constant][20] /* ty=Tensor[(120), uint64] */, %241, %242, %243, %244, %245)
  };
  %246() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(11, 11, 8), bool], Tensor[(7, 336), int32], Tensor[(11, 11, 8), float32], Tensor[(7, 336), uint32], Tensor[(11, 11, 8), float32]) */
}

def @func_2264(%var_2262: Tensor[(1, 7, 3), float32], %var_2263: Tensor[(605), int64]) -> (Tensor[(?, 7, 3), bool], Tensor[(6, 7, 3), bool], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(11, 11, 5), int64], Tensor[(605), int64]) {
  @func_2260(%var_2262, %var_2263) /* ty=(Tensor[(?, 7, 3), bool], Tensor[(6, 7, 3), bool], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(11, 11, 5), int64], Tensor[(605), int64]) */
}

def @func_7394() -> (Tensor[(9, 3, 14), int8], Tensor[(11, 11, 8), float32], Tensor[(2352), int32]) {
  %247 = @func_7143() /* ty=(Tensor[(7, 336), int32], Tensor[(9, 3, 14), int8]) */;
  %248 = @func_5308() /* ty=(Tensor[(4, 1, 1), float64], Tensor[(7, 336), bool], Tensor[(2352), int32]) */;
  %249 = %247.1;
  %250 = @func_4407() /* ty=Tensor[(11, 11, 8), float32] */;
  %251 = %248.2;
  (%249, %250, %251)
}

def @func_5699() -> Tensor[(4, ?, ?), float32] {
  %252 = @func_5061() /* ty=Tensor[(4, ?, ?), bool] */;
  %253 = cast(%252, dtype="float32") /* ty=Tensor[(4, ?, ?), float32] */;
  acosh(%253) /* ty=Tensor[(4, ?, ?), float32] */
}

def @func_7237() -> Tensor[(4, 15, 1), bool] {
  %254 = @func_5673() /* ty=(Tensor[(4, 1, 1), float32], Tensor[(4, 1, 1), float64]) */;
  %255 = %254.1;
  %256 = cast(%255, dtype="bool") /* ty=Tensor[(4, 1, 1), bool] */;
  %257 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 15, 1), float64] */, dtype="bool") /* ty=Tensor[(4, 15, 1), bool] */;
  less(%256, %257) /* ty=Tensor[(4, 15, 1), bool] */
}

def @func_7035(%var_7034: Tensor[(4, 14, 8), float32]) -> (Tensor[(4, 14, 8), float32],) {
  %260 = fn (%var_7028: Tensor[(4, 14, 8), float32]) -> (Tensor[(4, 14, 8), float32],) {
    %258 = cast(%var_7028, dtype="float32") /* ty=Tensor[(4, 14, 8), float32] */;
    %259 = atan(%258) /* ty=Tensor[(4, 14, 8), float32] */;
    (%259,)
  };
  %260(%var_7034) /* ty=(Tensor[(4, 14, 8), float32],) */
}

def @func_3507() -> Tensor[(11, 11, 8), float32] {
  @func_3428() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_6312(%var_6309: Tensor[(968, 1), bool], %var_6310: Tensor[(120), uint64], %var_6311: Tensor[(1232), uint32]) -> (Tensor[(120), uint64], Tensor[(120), uint64], Tensor[(4, 968, 1), bool], Tensor[(11, 16, 7), uint32], Tensor[(77), uint32], Tensor[(968, 1232), bool], Tensor[(4, 11, 5), float64]) {
  %287 = fn (%var_6241: Tensor[(968, 1), bool], %var_6242: Tensor[(120), uint64], %var_6283: Tensor[(1232), uint32]) -> (Tensor[(120), uint64], Tensor[(120), uint64], Tensor[(4, 968, 1), bool], Tensor[(11, 16, 7), uint32], Tensor[(77), uint32], Tensor[(968, 1232), bool], Tensor[(4, 11, 5), float64]) {
    %261 = cast(%var_6241, dtype="bool") /* ty=Tensor[(968, 1), bool] */;
    %262 = cast(%var_6242, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %263 = reshape(%261, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), bool] */;
    %264 = reshape(%262, newshape=[120]) /* ty=Tensor[(120), uint64] */;
    %265 = @func_3668(%263, %264) /* ty=(Tensor[(11, 11, 8), int16], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(5, 5, 6), int8], Tensor[(150), float32], Tensor[(4), float64]) */;
    %266 = cast(%var_6241, dtype="float64") /* ty=Tensor[(968, 1), float64] */;
    %267 = log(%266) /* ty=Tensor[(968, 1), float64] */;
    %268 = @func_5673() /* ty=(Tensor[(4, 1, 1), float32], Tensor[(4, 1, 1), float64]) */;
    %269 = %268.0;
    %270 = cast(%267, dtype="bool") /* ty=Tensor[(968, 1), bool] */;
    %271 = cast(%269, dtype="bool") /* ty=Tensor[(4, 1, 1), bool] */;
    %272 = cast(meta[relay.Constant][23] /* ty=Tensor[(77), uint32] */, dtype="uint32") /* ty=Tensor[(77), uint32] */;
    %273 = cast(%var_6283, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
    %274 = reshape(%272, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), uint32] */;
    %275 = reshape(%273, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), uint32] */;
    %276 = cast(%var_6283, dtype="bool") /* ty=Tensor[(1232), bool] */;
    %277 = cast(%var_6241, dtype="bool") /* ty=Tensor[(968, 1), bool] */;
    %278 = cast(%269, dtype="float64") /* ty=Tensor[(4, 1, 1), float64] */;
    %279 = acos(%278) /* ty=Tensor[(4, 1, 1), float64] */;
    %280 = cast(%279, dtype="float64") /* ty=Tensor[(4, 1, 1), float64] */;
    %281 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 11, 5), float64] */, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
    %282 = %265.2;
    %283 = equal(%270, %271) /* ty=Tensor[(4, 968, 1), bool] */;
    %284 = @func_60(%274, %275) /* ty=Tensor[(11, 16, 7), uint32] */;
    %285 = greater(%276, %277) /* ty=Tensor[(968, 1232), bool] */;
    %286 = mod(%280, %281) /* ty=Tensor[(4, 11, 5), float64] */;
    (%282, %var_6242, %283, %284, meta[relay.Constant][23] /* ty=Tensor[(77), uint32] */, %285, %286)
  };
  %287(%var_6309, %var_6310, %var_6311) /* ty=(Tensor[(120), uint64], Tensor[(120), uint64], Tensor[(4, 968, 1), bool], Tensor[(11, 16, 7), uint32], Tensor[(77), uint32], Tensor[(968, 1232), bool], Tensor[(4, 11, 5), float64]) */
}

def @func_4088(%var_4040: Tensor[(1456), int16], %var_4044: Tensor[(120), uint64], %var_4077: float64) -> (Tensor[(11, 11, 8), float32], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(120), uint64], Tensor[(11, 11, 8), float32], Tensor[(2, 168), uint16], Tensor[(8, 5, 3), uint64], Tensor[(3, 6, 3), float64], float64, Tensor[(54), float64]) {
  %288 = cast(%var_4040, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %289 = reshape(%288, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), int16] */;
  %290 = @func_3025() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %291 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 168), float32] */, dtype="float32") /* ty=Tensor[(2, 168), float32] */;
  %292 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 168), float32] */, dtype="float32") /* ty=Tensor[(2, 168), float32] */;
  %293 = cast(%var_4044, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %294 = reshape(%291, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float32] */;
  %295 = reshape(%292, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float32] */;
  %296 = reshape(%293, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %297 = @func_777(%294, %295, %296) /* ty=(Tensor[(6, 7, 8), bool], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(6, 7, 8), bool], Tensor[(6, 7, 8), float64]) */;
  %298 = %297.3;
  %299 = cast(%298, dtype="uint16") /* ty=Tensor[(6, 7, 8), uint16] */;
  %300 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(2, 168), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %301 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 168), float32] */, dtype="uint16") /* ty=Tensor[(2, 168), uint16] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %303 = %290.0;
  %304 = cast(%303, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %305 = cast(%var_4044, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %306 = reshape(%304, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), bool] */;
  %307 = reshape(%305, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %308 = @func_3668(%306, %307) /* ty=(Tensor[(11, 11, 8), int16], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(5, 5, 6), int8], Tensor[(150), float32], Tensor[(4), float64]) */;
  %309 = cast(%var_4077, dtype="float64") /* ty=float64 */;
  %310 = cast(meta[relay.Constant][26] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %311 = reshape(%309, newshape=[]) /* ty=float64 */;
  %312 = reshape(%310, newshape=[3, 6, 3]) /* ty=Tensor[(3, 6, 3), float64] */;
  %313 = @func_3428() /* ty=Tensor[(11, 11, 8), float32] */;
  %314 = @func_479(%289) /* ty=Tensor[(8, 14, 13), int32] */;
  %315 = right_shift(%301, %302) /* ty=Tensor[(2, 168), uint16] */;
  %316 = %308.1;
  %317 = @func_3703(%311, %312) /* ty=Tensor[(3, 6, 3), float64] */;
  (%313, %314, %var_4040, %var_4044, %303, %315, %316, %317, %var_4077, meta[relay.Constant][26] /* ty=Tensor[(54), float64] */)
}

def @func_4693(%var_4687: Tensor[(11, 11, 8), float32], %var_4688: Tensor[(154), float64], %var_4689: Tensor[(224), float64], %var_4690: Tensor[(1232), uint32], %var_4691: Tensor[(1456, 1), int16], %var_4692: float64) -> (Tensor[(11, 11, 8), float64], Tensor[(120), uint64], Tensor[(154), float64], Tensor[(224), float64], Tensor[(1232), uint32], Tensor[(2, 168), uint16], Tensor[(1456, 1), int16], float64) {
  %340 = fn (%var_4633: Tensor[(11, 11, 8), float32], %var_4645: Tensor[(154), float64], %var_4646: Tensor[(224), float64], %var_4647: Tensor[(1232), uint32], %var_4662: Tensor[(1456, 1), int16], %var_4663: float64) -> (Tensor[(11, 11, 8), float64], Tensor[(120), uint64], Tensor[(154), float64], Tensor[(224), float64], Tensor[(1232), uint32], Tensor[(2, 168), uint16], Tensor[(1456, 1), int16], float64) {
    %318 = @func_3507() /* ty=Tensor[(11, 11, 8), float32] */;
    %319 = cast(%var_4633, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
    %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
    %321 = cast(%318, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
    %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %323 = cast(%var_4645, dtype="float64") /* ty=Tensor[(154), float64] */;
    %324 = cast(%var_4646, dtype="float64") /* ty=Tensor[(224), float64] */;
    %325 = cast(%var_4647, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
    %326 = reshape(%323, newshape=[154]) /* ty=Tensor[(154), float64] */;
    %327 = reshape(%324, newshape=[224]) /* ty=Tensor[(224), float64] */;
    %328 = reshape(%325, newshape=[56, 22]) /* ty=Tensor[(56, 22), uint32] */;
    %329 = @func_3338(%326, %327, %328) /* ty=(Tensor[(120), uint64], float64, Tensor[(154), float64], Tensor[(224), float64], Tensor[(56, 22), uint32], Tensor[(120), uint64], Tensor[(11, 11, 8), float64]) */;
    %330 = cast(%var_4662, dtype="int16") /* ty=Tensor[(1456, 1), int16] */;
    %331 = %329.5;
    %332 = cast(%331, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %333 = cast(%var_4663, dtype="float64") /* ty=float64 */;
    %334 = reshape(%330, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
    %335 = reshape(%332, newshape=[120]) /* ty=Tensor[(120), uint64] */;
    %336 = reshape(%333, newshape=[]) /* ty=float64 */;
    %337 = @func_4088(%334, %335, %336) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(120), uint64], Tensor[(11, 11, 8), float32], Tensor[(2, 168), uint16], Tensor[(8, 5, 3), uint64], Tensor[(3, 6, 3), float64], float64, Tensor[(54), float64]) */;
    %338 = divide(%321, %322) /* ty=Tensor[(11, 11, 8), float64] */;
    %339 = %337.5;
    (%338, %331, %var_4645, %var_4646, %var_4647, %339, %var_4662, %var_4663)
  };
  %340(%var_4687, %var_4688, %var_4689, %var_4690, %var_4691, %var_4692) /* ty=(Tensor[(11, 11, 8), float64], Tensor[(120), uint64], Tensor[(154), float64], Tensor[(224), float64], Tensor[(1232), uint32], Tensor[(2, 168), uint16], Tensor[(1456, 1), int16], float64) */
}

def @func_6884() -> (Tensor[(11, 11, 8), float32],) {
  %343 = fn () -> (Tensor[(11, 11, 8), float32],) {
    %341 = @func_6786() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float32]) */;
    %342 = %341.0;
    (%342,)
  };
  %343() /* ty=(Tensor[(11, 11, 8), float32],) */
}

def @func_4595() -> (Tensor[(11, 11, 8), float32], Tensor[(6, 7, 8), float64], Tensor[(168, 2), float32], Tensor[(3, 40), uint64]) {
  @func_4593() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(6, 7, 8), float64], Tensor[(168, 2), float32], Tensor[(3, 40), uint64]) */
}

def @func_3429() -> Tensor[(11, 11, 8), float32] {
  %345 = fn () -> Tensor[(11, 11, 8), float32] {
    %344 = @func_3244() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) */;
    %344.0
  };
  %345() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_4031() -> Tensor[(11, 11, 8), float32] {
  %346 = fn () -> Tensor[(11, 11, 8), float32] {
    @func_3507() /* ty=Tensor[(11, 11, 8), float32] */
  };
  %346() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_2363(%var_2320: Tensor[(10, 16, 11), float32], %var_2345: Tensor[(1456), int16]) -> (Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(10, 16, 11), float64], Tensor[(10, 16, 11), float32]) {
  %347 = cast(%var_2345, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %348 = reshape(%347, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), int16] */;
  %349 = cast(%var_2320, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %350 = log(%349) /* ty=Tensor[(10, 16, 11), float32] */;
  %351 = cast(%350, dtype="int8") /* ty=Tensor[(10, 16, 11), int8] */;
  %352 = shape_of(%var_2320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%var_2320, dtype="int8") /* ty=Tensor[(10, 16, 11), int8] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %355 = right_shift(%353, %354) /* ty=Tensor[(10, 16, 11), int8] */;
  %356 = cast(%350, dtype="float64") /* ty=Tensor[(10, 16, 11), float64] */;
  %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%355, dtype="float64") /* ty=Tensor[(10, 16, 11), float64] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %360 = cast(%350, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %361 = @func_479(%348) /* ty=Tensor[(8, 14, 13), int32] */;
  %362 = floor_divide(%358, %359) /* ty=Tensor[(10, 16, 11), float64] */;
  %363 = acos(%360) /* ty=Tensor[(10, 16, 11), float32] */;
  (%361, %var_2345, %362, %363)
}

def @func_63(%var_61: Tensor[(11, 1, 7), uint32], %var_62: Tensor[(11, 16, 7), uint32]) -> Tensor[(11, 16, 7), uint32] {
  %366 = fn (%var_54: Tensor[(11, 1, 7), uint32], %var_55: Tensor[(11, 16, 7), uint32]) -> Tensor[(11, 16, 7), uint32] {
    %364 = cast(%var_54, dtype="uint32") /* ty=Tensor[(11, 1, 7), uint32] */;
    %365 = cast(%var_55, dtype="uint32") /* ty=Tensor[(11, 16, 7), uint32] */;
    left_shift(%364, %365) /* ty=Tensor[(11, 16, 7), uint32] */
  };
  %366(%var_61, %var_62) /* ty=Tensor[(11, 16, 7), uint32] */
}

def @func_482(%var_480: Tensor[(8, 14, 13), int16]) -> Tensor[(8, 14, 13), int32] {
  @func_479(%var_480) /* ty=Tensor[(8, 14, 13), int32] */
}

def @func_5489(%var_5488: Tensor[(11, 11, 8), float32]) -> (Tensor[(11, 11, 8), bool],) {
  %374 = fn (%var_5479: Tensor[(11, 11, 8), float32]) -> (Tensor[(11, 11, 8), bool],) {
    %367 = @func_3862() /* ty=(Tensor[(11, 11, 8), float32],) */;
    %368 = %367.0;
    %369 = cast(%var_5479, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
    %370 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
    %371 = cast(%368, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
    %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %373 = logical_and(%371, %372) /* ty=Tensor[(11, 11, 8), bool] */;
    (%373,)
  };
  %374(%var_5488) /* ty=(Tensor[(11, 11, 8), bool],) */
}

def @func_5963() -> (Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float32]) {
  %375 = @func_3862() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %376 = @func_3244() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) */;
  %377 = %375.0;
  %378 = %376.0;
  (%377, %378)
}

def @func_7143() -> (Tensor[(7, 336), int32], Tensor[(9, 3, 14), int8]) {
  %379 = @func_3957() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(11, 11, 8), bool], Tensor[(7, 336), int32], Tensor[(11, 11, 8), float32], Tensor[(7, 336), uint32], Tensor[(11, 11, 8), float32]) */;
  %380 = %379.4;
  %381 = @func_5916() /* ty=Tensor[(9, 3, 14), int8] */;
  (%380, %381)
}

def @func_6480() -> (Tensor[(11, 11, 8), float32],) {
  @func_6478() /* ty=(Tensor[(11, 11, 8), float32],) */
}

def @func_3991(%var_3989: Tensor[(120), uint64]) -> (Tensor[(11, 11, 8), bool], Tensor[(4), float64], Tensor[(120), uint64]) {
  %382 = @func_3418() /* ty=Tensor[(11, 11, 8), bool] */;
  %383 = cast(%382, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %384 = cast(%var_3989, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %385 = reshape(%383, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), bool] */;
  %386 = reshape(%384, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %387 = @func_3668(%385, %386) /* ty=(Tensor[(11, 11, 8), int16], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(5, 5, 6), int8], Tensor[(150), float32], Tensor[(4), float64]) */;
  %388 = %387.5;
  (%382, %388, %var_3989)
}

def @func_4958() -> (Tensor[(4, 1, 1), float64], Tensor[(9, 6), float64], float64) {
  @func_4956() /* ty=(Tensor[(4, 1, 1), float64], Tensor[(9, 6), float64], float64) */
}

def @func_404(%var_398: float64, %var_399: Tensor[(1, 14, 11), float64], %var_400: Tensor[(1, 224), float64], %var_401: Tensor[(1232), uint32], %var_402: Tensor[(120), uint64], %var_403: Tensor[(8, 5, 3), uint64]) -> (Tensor[(1, 14, 11), float64], Tensor[(16, 7, 2), bool], Tensor[(1, 224), float64], Tensor[(1232), uint32], Tensor[(120), uint64], Tensor[(8, 5, 3), uint16], Tensor[(11, 16, 7), uint32]) {
  %419 = fn (%var_372: float64, %var_373: Tensor[(1, 14, 11), float64], %var_380: Tensor[(1, 224), float64], %var_381: Tensor[(1232), uint32], %var_384: Tensor[(120), uint64], %var_387: Tensor[(8, 5, 3), uint64]) -> (Tensor[(1, 14, 11), float64], Tensor[(16, 7, 2), bool], Tensor[(1, 224), float64], Tensor[(1232), uint32], Tensor[(120), uint64], Tensor[(8, 5, 3), uint16], Tensor[(11, 16, 7), uint32]) {
    %389 = cast(%var_372, dtype="float64") /* ty=float64 */;
    %390 = cast(%var_373, dtype="float64") /* ty=Tensor[(1, 14, 11), float64] */;
    %391 = cast(%var_380, dtype="float64") /* ty=Tensor[(1, 224), float64] */;
    %392 = cast(%var_381, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
    %393 = cast(%var_381, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
    %394 = reshape(%391, newshape=[16, 7, 2]) /* ty=Tensor[(16, 7, 2), float64] */;
    %395 = reshape(%392, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
    %396 = reshape(%393, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), uint32] */;
    %397 = @func_242(%394, %395, %396) /* ty=(Tensor[(77), uint32], Tensor[(1232), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(120), float32], Tensor[(16, 7, 2), bool], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), float32]) */;
    %398 = cast(%var_384, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %399 = cast(%var_384, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %400 = reshape(%398, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
    %401 = reshape(%399, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
    %402 = @func_41(%400, %401) /* ty=(Tensor[(8, 5, 3), uint64],) */;
    %403 = %402.0;
    %404 = cast(%var_387, dtype="uint16") /* ty=Tensor[(8, 5, 3), uint16] */;
    %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
    %406 = cast(%403, dtype="uint16") /* ty=Tensor[(8, 5, 3), uint16] */;
    %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %408 = %397.5;
    %409 = cast(%408, dtype="float64") /* ty=Tensor[(16, 7, 2), float64] */;
    %410 = cast(%var_381, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
    %411 = cast(%var_381, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
    %412 = reshape(%409, newshape=[16, 7, 2]) /* ty=Tensor[(16, 7, 2), float64] */;
    %413 = reshape(%410, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
    %414 = reshape(%411, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), uint32] */;
    %415 = @func_242(%412, %413, %414) /* ty=(Tensor[(77), uint32], Tensor[(1232), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(120), float32], Tensor[(16, 7, 2), bool], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), float32]) */;
    %416 = divide(%389, %390) /* ty=Tensor[(1, 14, 11), float64] */;
    %417 = maximum(%406, %407) /* ty=Tensor[(8, 5, 3), uint16] */;
    %418 = %415.3;
    (%416, %408, %var_380, %var_381, %var_384, %417, %418)
  };
  %419(%var_398, %var_399, %var_400, %var_401, %var_402, %var_403) /* ty=(Tensor[(1, 14, 11), float64], Tensor[(16, 7, 2), bool], Tensor[(1, 224), float64], Tensor[(1232), uint32], Tensor[(120), uint64], Tensor[(8, 5, 3), uint16], Tensor[(11, 16, 7), uint32]) */
}

def @func_3027() -> (Tensor[(11, 11, 8), float32],) {
  @func_3025() /* ty=(Tensor[(11, 11, 8), float32],) */
}

def @func_4565() -> (Tensor[(11, 11, 8), float64],) {
  %420 = @func_4210() /* ty=(Tensor[(11, 11, 8), float64],) */;
  %421 = %420.0;
  (%421,)
}

def @func_7308() -> Tensor[(11, 11, 8), float64] {
  @func_7306() /* ty=Tensor[(11, 11, 8), float64] */
}

def @func_4956() -> (Tensor[(4, 1, 1), float64], Tensor[(9, 6), float64], float64) {
  %422 = @func_4167() /* ty=(Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) */;
  %423 = cast(8.4209f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %424 = reshape(%423, newshape=[]) /* ty=float64 */;
  %425 = @func_4008(%424) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(3, 6, 3), float64], float64, Tensor[(9, 6), float64]) */;
  %426 = %422.2;
  %427 = %425.3;
  (%426, %427, 8.4209f64 /* ty=float64 */)
}

def @func_5907() -> (Tensor[(8, 13, 7), float64], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64]) {
  %436 = fn () -> (Tensor[(8, 13, 7), float64], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64]) {
    %428 = @func_5818() /* ty=(Tensor[(8, 13, 7), float64],) */;
    %429 = cast(meta[relay.Constant][27] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %430 = cast(meta[relay.Constant][27] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %431 = reshape(%429, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
    %432 = reshape(%430, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
    %433 = @func_41(%431, %432) /* ty=(Tensor[(8, 5, 3), uint64],) */;
    %434 = %428.0;
    %435 = %433.0;
    (%434, %435, meta[relay.Constant][27] /* ty=Tensor[(120), uint64] */)
  };
  %436() /* ty=(Tensor[(8, 13, 7), float64], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64]) */
}

def @func_7239() -> Tensor[(4, 15, 1), bool] {
  @func_7237() /* ty=Tensor[(4, 15, 1), bool] */
}

def @func_3707(%var_3705: float64, %var_3706: Tensor[(3, 6, 3), float64]) -> Tensor[(3, 6, 3), float64] {
  @func_3703(%var_3705, %var_3706) /* ty=Tensor[(3, 6, 3), float64] */
}

def @func_7180() -> (Tensor[(11, 11, 8), float32],) {
  @func_7178() /* ty=(Tensor[(11, 11, 8), float32],) */
}

def @func_4736(%var_4735: Tensor[(1, 1456), int16]) -> (Tensor[(11, 11, 8), float32], Tensor[(8, 14, 13), int32], Tensor[(1, 1760), float32], Tensor[(1, 1456), int16]) {
  %445 = fn (%var_4732: Tensor[(1, 1456), int16]) -> (Tensor[(11, 11, 8), float32], Tensor[(8, 14, 13), int32], Tensor[(1, 1760), float32], Tensor[(1, 1456), int16]) {
    %437 = @func_3025() /* ty=(Tensor[(11, 11, 8), float32],) */;
    %438 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 1760), float32] */, dtype="float32") /* ty=Tensor[(1, 1760), float32] */;
    %439 = cast(%var_4732, dtype="int16") /* ty=Tensor[(1, 1456), int16] */;
    %440 = reshape(%438, newshape=[10, 16, 11]) /* ty=Tensor[(10, 16, 11), float32] */;
    %441 = reshape(%439, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
    %442 = @func_2363(%440, %441) /* ty=(Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(10, 16, 11), float64], Tensor[(10, 16, 11), float32]) */;
    %443 = %437.0;
    %444 = %442.0;
    (%443, %444, meta[relay.Constant][28] /* ty=Tensor[(1, 1760), float32] */, %var_4732)
  };
  %445(%var_4735) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 14, 13), int32], Tensor[(1, 1760), float32], Tensor[(1, 1456), int16]) */
}

def @func_6786() -> (Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float32]) {
  %446 = @func_3064() /* ty=Tensor[(11, 11, 8), float32] */;
  %447 = @func_3874() /* ty=Tensor[(11, 11, 8), float32] */;
  (%446, %447)
}

def @func_5918() -> Tensor[(9, 3, 14), int8] {
  @func_5916() /* ty=Tensor[(9, 3, 14), int8] */
}

def @func_3157(%var_3153: Tensor[(3, 8, 3), float64], %var_3154: float64, %var_3155: Tensor[(154), float64], %var_3156: Tensor[(21), float32]) -> (Tensor[(3, 8, 3), float64], Tensor[(1232), uint32], float64, Tensor[(154), float64], Tensor[(16, 14), float64], Tensor[(1232), uint32], Tensor[(120), uint64], Tensor[(?, 7, 3), bool], Tensor[(21), float32], Tensor[(605), int64]) {
  @func_3151(%var_3153, %var_3154, %var_3155, %var_3156) /* ty=(Tensor[(3, 8, 3), float64], Tensor[(1232), uint32], float64, Tensor[(154), float64], Tensor[(16, 14), float64], Tensor[(1232), uint32], Tensor[(120), uint64], Tensor[(?, 7, 3), bool], Tensor[(21), float32], Tensor[(605), int64]) */
}

def @func_781(%var_778: Tensor[(6, 7, 8), float32], %var_779: Tensor[(6, 7, 8), float32], %var_780: Tensor[(120), uint64]) -> (Tensor[(6, 7, 8), bool], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(6, 7, 8), bool], Tensor[(6, 7, 8), float64]) {
  %473 = fn (%var_730: Tensor[(6, 7, 8), float32], %var_731: Tensor[(6, 7, 8), float32], %var_738: Tensor[(120), uint64]) -> (Tensor[(6, 7, 8), bool], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(6, 7, 8), bool], Tensor[(6, 7, 8), float64]) {
    %448 = cast(%var_731, dtype="bool") /* ty=Tensor[(6, 7, 8), bool] */;
    %449 = shape_of(%var_730, dtype="int32") /* ty=Tensor[(3), int32] */;
    %450 = cast(%var_730, dtype="bool") /* ty=Tensor[(6, 7, 8), bool] */;
    %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %452 = cast(%var_738, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %453 = cast(%var_738, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %454 = reshape(%452, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
    %455 = reshape(%453, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
    %456 = @func_41(%454, %455) /* ty=(Tensor[(8, 5, 3), uint64],) */;
    %457 = cast(%var_730, dtype="uint64") /* ty=Tensor[(6, 7, 8), uint64] */;
    %458 = shape_of(%var_731, dtype="int32") /* ty=Tensor[(3), int32] */;
    %459 = cast(%var_731, dtype="uint64") /* ty=Tensor[(6, 7, 8), uint64] */;
    %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %461 = multiply(%459, %460) /* ty=Tensor[(6, 7, 8), uint64] */;
    %462 = cast(%461, dtype="float64") /* ty=Tensor[(6, 7, 8), float64] */;
    %463 = acos(%462) /* ty=Tensor[(6, 7, 8), float64] */;
    %464 = cast(%var_731, dtype="bool") /* ty=Tensor[(6, 7, 8), bool] */;
    %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
    %466 = cast(%463, dtype="bool") /* ty=Tensor[(6, 7, 8), bool] */;
    %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %468 = cast(%463, dtype="float64") /* ty=Tensor[(6, 7, 8), float64] */;
    %469 = greater_equal(%450, %451) /* ty=Tensor[(6, 7, 8), bool] */;
    %470 = %456.0;
    %471 = logical_and(%466, %467) /* ty=Tensor[(6, 7, 8), bool] */;
    %472 = log(%468) /* ty=Tensor[(6, 7, 8), float64] */;
    (%469, %470, %var_738, %471, %472)
  };
  %473(%var_778, %var_779, %var_780) /* ty=(Tensor[(6, 7, 8), bool], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(6, 7, 8), bool], Tensor[(6, 7, 8), float64]) */
}

def @func_3419() -> Tensor[(11, 11, 8), bool] {
  %480 = fn () -> Tensor[(11, 11, 8), bool] {
    %474 = @func_3025() /* ty=(Tensor[(11, 11, 8), float32],) */;
    %475 = %474.0;
    %476 = cast(meta[relay.Constant][29] /* ty=Tensor[(11, 11, 8), float32] */, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
    %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
    %478 = cast(%475, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
    %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%478, %479) /* ty=Tensor[(11, 11, 8), bool] */
  };
  %480() /* ty=Tensor[(11, 11, 8), bool] */
}

def @func_3863() -> (Tensor[(11, 11, 8), float32],) {
  %482 = fn () -> (Tensor[(11, 11, 8), float32],) {
    %481 = @func_2943() /* ty=Tensor[(11, 11, 8), float32] */;
    (%481,)
  };
  %482() /* ty=(Tensor[(11, 11, 8), float32],) */
}

def @func_3509() -> Tensor[(11, 11, 8), float32] {
  @func_3507() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_7442(%var_7441: Tensor[(6, 20), uint64]) -> (Tensor[(9, 6), float64], Tensor[(11, 11, 8), bool], Tensor[(6, 20), uint64]) {
  %489 = fn (%var_7434: Tensor[(6, 20), uint64]) -> (Tensor[(9, 6), float64], Tensor[(11, 11, 8), bool], Tensor[(6, 20), uint64]) {
    %483 = @func_6143() /* ty=(Tensor[(9, 6), float64],) */;
    %484 = cast(%var_7434, dtype="uint64") /* ty=Tensor[(6, 20), uint64] */;
    %485 = reshape(%484, newshape=[120]) /* ty=Tensor[(120), uint64] */;
    %486 = @func_3991(%485) /* ty=(Tensor[(11, 11, 8), bool], Tensor[(4), float64], Tensor[(120), uint64]) */;
    %487 = %483.0;
    %488 = %486.0;
    (%487, %488, %var_7434)
  };
  %489(%var_7441) /* ty=(Tensor[(9, 6), float64], Tensor[(11, 11, 8), bool], Tensor[(6, 20), uint64]) */
}

def @func_4974() -> (Tensor[(4, 1, 1), float64],) {
  %492 = fn () -> (Tensor[(4, 1, 1), float64],) {
    %490 = @func_4956() /* ty=(Tensor[(4, 1, 1), float64], Tensor[(9, 6), float64], float64) */;
    %491 = %490.0;
    (%491,)
  };
  %492() /* ty=(Tensor[(4, 1, 1), float64],) */
}

def @func_7149() -> Tensor[(4, 1, 1), float64] {
  %494 = fn () -> Tensor[(4, 1, 1), float64] {
    %493 = @func_4167() /* ty=(Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) */;
    %493.2
  };
  %494() /* ty=Tensor[(4, 1, 1), float64] */
}

def @func_4783(%var_4779: Tensor[(11, 11, 12), uint8], %var_4780: Tensor[(11, 11, 12), float64], %var_4781: Tensor[(336), float32], %var_4782: Tensor[(120), uint64]) -> (Tensor[(11, 11, 12), int32], Tensor[(11, 11, 12), uint64], Tensor[(11, 11, 12), int16], Tensor[(6, 7, 8), bool], Tensor[(336), float32], Tensor[(120), uint64]) {
  %525 = fn (%var_4739: Tensor[(11, 11, 12), uint8], %var_4752: Tensor[(11, 11, 12), float64], %var_4772: Tensor[(336), float32], %var_4773: Tensor[(120), uint64]) -> (Tensor[(11, 11, 12), int32], Tensor[(11, 11, 12), uint64], Tensor[(11, 11, 12), int16], Tensor[(6, 7, 8), bool], Tensor[(336), float32], Tensor[(120), uint64]) {
    %495 = cast(%var_4739, dtype="uint8") /* ty=Tensor[(11, 11, 12), uint8] */;
    %496 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(11, 11, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %497 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 11, 12), uint8] */, dtype="uint8") /* ty=Tensor[(11, 11, 12), uint8] */;
    %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %499 = minimum(%497, %498) /* ty=Tensor[(11, 11, 12), uint8] */;
    %500 = cast(%499, dtype="float64") /* ty=Tensor[(11, 11, 12), float64] */;
    %501 = rsqrt(%500) /* ty=Tensor[(11, 11, 12), float64] */;
    %502 = cast(%var_4752, dtype="int32") /* ty=Tensor[(11, 11, 12), int32] */;
    %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
    %504 = cast(%501, dtype="int32") /* ty=Tensor[(11, 11, 12), int32] */;
    %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %506 = cast(%var_4752, dtype="uint64") /* ty=Tensor[(11, 11, 12), uint64] */;
    %507 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
    %508 = cast(%499, dtype="uint64") /* ty=Tensor[(11, 11, 12), uint64] */;
    %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %510 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 11, 12), uint8] */, dtype="int16") /* ty=Tensor[(11, 11, 12), int16] */;
    %511 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
    %512 = cast(%501, dtype="int16") /* ty=Tensor[(11, 11, 12), int16] */;
    %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %514 = cast(%var_4772, dtype="float32") /* ty=Tensor[(336), float32] */;
    %515 = cast(%var_4772, dtype="float32") /* ty=Tensor[(336), float32] */;
    %516 = cast(%var_4773, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %517 = reshape(%514, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float32] */;
    %518 = reshape(%515, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float32] */;
    %519 = reshape(%516, newshape=[120]) /* ty=Tensor[(120), uint64] */;
    %520 = @func_777(%517, %518, %519) /* ty=(Tensor[(6, 7, 8), bool], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(6, 7, 8), bool], Tensor[(6, 7, 8), float64]) */;
    %521 = add(%504, %505) /* ty=Tensor[(11, 11, 12), int32] */;
    %522 = maximum(%508, %509) /* ty=Tensor[(11, 11, 12), uint64] */;
    %523 = bitwise_xor(%512, %513) /* ty=Tensor[(11, 11, 12), int16] */;
    %524 = %520.0;
    (%521, %522, %523, %524, %var_4772, %var_4773)
  };
  %525(%var_4779, %var_4780, %var_4781, %var_4782) /* ty=(Tensor[(11, 11, 12), int32], Tensor[(11, 11, 12), uint64], Tensor[(11, 11, 12), int16], Tensor[(6, 7, 8), bool], Tensor[(336), float32], Tensor[(120), uint64]) */
}

def @func_5965() -> (Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float32]) {
  @func_5963() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float32]) */
}

def @func_6707(%var_6703: Tensor[(605), int64]) -> (Tensor[(4, ?, ?), bool], Tensor[(11, 11, 8), uint32], Tensor[(605), int64], Tensor[(12, 66), float64], Tensor[(605), int64]) {
  %526 = @func_3244() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) */;
  %527 = %526.0;
  %528 = @func_3957() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(11, 11, 8), bool], Tensor[(7, 336), int32], Tensor[(11, 11, 8), float32], Tensor[(7, 336), uint32], Tensor[(11, 11, 8), float32]) */;
  %529 = %528.3;
  %530 = cast(%529, dtype="uint32") /* ty=Tensor[(11, 11, 8), uint32] */;
  %531 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%527, dtype="uint32") /* ty=Tensor[(11, 11, 8), uint32] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %534 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 66), float64] */, dtype="float64") /* ty=Tensor[(12, 66), float64] */;
  %535 = cast(%var_6703, dtype="int64") /* ty=Tensor[(605), int64] */;
  %536 = reshape(%534, newshape=[6, 11, 12]) /* ty=Tensor[(6, 11, 12), float64] */;
  %537 = reshape(%535, newshape=[605]) /* ty=Tensor[(605), int64] */;
  %538 = @func_5120(%536, %537) /* ty=(Tensor[(6, 11, 12), float64], Tensor[(11, 11, 5), int64], Tensor[(605), int64]) */;
  %539 = @func_5061() /* ty=Tensor[(4, ?, ?), bool] */;
  %540 = add(%532, %533) /* ty=Tensor[(11, 11, 8), uint32] */;
  %541 = %538.2;
  (%539, %540, %541, meta[relay.Constant][31] /* ty=Tensor[(12, 66), float64] */, %var_6703)
}

def @func_3025() -> (Tensor[(11, 11, 8), float32],) {
  %542 = @func_2943() /* ty=Tensor[(11, 11, 8), float32] */;
  (%542,)
}

def @func_4546() -> Tensor[(11, 11, 8), float32] {
  @func_4544() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_4409() -> Tensor[(11, 11, 8), float32] {
  @func_4407() /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_6400(%var_6398: int64, %var_6399: Tensor[(12, 4, 14), int64]) -> (Tensor[(12, 4, 14), int8], Tensor[(11, 11, 8), bool]) {
  %550 = fn (%var_6370: int64, %var_6371: Tensor[(12, 4, 14), int64]) -> (Tensor[(12, 4, 14), int8], Tensor[(11, 11, 8), bool]) {
    %543 = cast(%var_6370, dtype="int64") /* ty=int64 */;
    %544 = cast(%var_6371, dtype="int64") /* ty=Tensor[(12, 4, 14), int64] */;
    %545 = right_shift(%543, %544) /* ty=Tensor[(12, 4, 14), int64] */;
    %546 = cast(%545, dtype="int8") /* ty=Tensor[(12, 4, 14), int8] */;
    %547 = cast(%var_6370, dtype="int8") /* ty=int8 */;
    %548 = multiply(%546, %547) /* ty=Tensor[(12, 4, 14), int8] */;
    %549 = @func_5331() /* ty=Tensor[(11, 11, 8), bool] */;
    (%548, %549)
  };
  %550(%var_6398, %var_6399) /* ty=(Tensor[(12, 4, 14), int8], Tensor[(11, 11, 8), bool]) */
}

def @func_1154(%var_1153: Tensor[(4, 1, 1), float64]) -> Tensor[(4, 1, 1), float64] {
  %552 = fn (%var_1149: Tensor[(4, 1, 1), float64]) -> Tensor[(4, 1, 1), float64] {
    %551 = cast(%var_1149, dtype="float64") /* ty=Tensor[(4, 1, 1), float64] */;
    atanh(%551) /* ty=Tensor[(4, 1, 1), float64] */
  };
  %552(%var_1153) /* ty=Tensor[(4, 1, 1), float64] */
}

def @func_7145() -> (Tensor[(7, 336), int32], Tensor[(9, 3, 14), int8]) {
  @func_7143() /* ty=(Tensor[(7, 336), int32], Tensor[(9, 3, 14), int8]) */
}

def @func_3342(%var_3339: Tensor[(154), float64], %var_3340: Tensor[(224), float64], %var_3341: Tensor[(56, 22), uint32]) -> (Tensor[(120), uint64], float64, Tensor[(154), float64], Tensor[(224), float64], Tensor[(56, 22), uint32], Tensor[(120), uint64], Tensor[(11, 11, 8), float64]) {
  %574 = fn (%var_3318: Tensor[(154), float64], %var_3319: Tensor[(224), float64], %var_3320: Tensor[(56, 22), uint32]) -> (Tensor[(120), uint64], float64, Tensor[(154), float64], Tensor[(224), float64], Tensor[(56, 22), uint32], Tensor[(120), uint64], Tensor[(11, 11, 8), float64]) {
    %553 = cast(-7.48754f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %554 = cast(%var_3318, dtype="float64") /* ty=Tensor[(154), float64] */;
    %555 = cast(%var_3319, dtype="float64") /* ty=Tensor[(224), float64] */;
    %556 = cast(%var_3320, dtype="uint32") /* ty=Tensor[(56, 22), uint32] */;
    %557 = cast(meta[relay.Constant][32] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %558 = cast(meta[relay.Constant][32] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %559 = reshape(%553, newshape=[]) /* ty=float64 */;
    %560 = reshape(%554, newshape=[1, 14, 11]) /* ty=Tensor[(1, 14, 11), float64] */;
    %561 = reshape(%555, newshape=[1, 224]) /* ty=Tensor[(1, 224), float64] */;
    %562 = reshape(%556, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
    %563 = reshape(%557, newshape=[120]) /* ty=Tensor[(120), uint64] */;
    %564 = reshape(%558, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
    %565 = @func_397(%559, %560, %561, %562, %563, %564) /* ty=(Tensor[(1, 14, 11), float64], Tensor[(16, 7, 2), bool], Tensor[(1, 224), float64], Tensor[(1232), uint32], Tensor[(120), uint64], Tensor[(8, 5, 3), uint16], Tensor[(11, 16, 7), uint32]) */;
    %566 = @func_3244() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) */;
    %567 = %566.0;
    %568 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 11, 8), float32] */, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
    %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
    %570 = cast(%567, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
    %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %572 = %565.4;
    %573 = floor_mod(%570, %571) /* ty=Tensor[(11, 11, 8), float64] */;
    (%572, -7.48754f64 /* ty=float64 */, %var_3318, %var_3319, %var_3320, meta[relay.Constant][32] /* ty=Tensor[(120), uint64] */, %573)
  };
  %574(%var_3339, %var_3340, %var_3341) /* ty=(Tensor[(120), uint64], float64, Tensor[(154), float64], Tensor[(224), float64], Tensor[(56, 22), uint32], Tensor[(120), uint64], Tensor[(11, 11, 8), float64]) */
}

def @func_7215(%var_7187: Tensor[(1456), int16], %var_7188: Tensor[(120), uint64]) -> (Tensor[(11, 11, 8), float32], Tensor[(54), float64], Tensor[(120), uint64], float64, Tensor[(1456), float32], Tensor[(11, 11, 8), float32]) {
  %575 = @func_3025() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %576 = cast(%var_7187, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %577 = cast(%var_7188, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %578 = cast(-6.5101f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %579 = reshape(%576, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
  %580 = reshape(%577, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %581 = reshape(%578, newshape=[]) /* ty=float64 */;
  %582 = @func_4088(%579, %580, %581) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(120), uint64], Tensor[(11, 11, 8), float32], Tensor[(2, 168), uint16], Tensor[(8, 5, 3), uint64], Tensor[(3, 6, 3), float64], float64, Tensor[(54), float64]) */;
  %583 = cast(%var_7187, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %584 = %575.0;
  %585 = %582.9;
  %586 = log(%583) /* ty=Tensor[(1456), float32] */;
  %587 = @func_4544() /* ty=Tensor[(11, 11, 8), float32] */;
  (%584, %585, %var_7188, -6.5101f64 /* ty=float64 */, %586, %587)
}

def @func_6061() -> (Tensor[(11, 11, 8), float32],) {
  %589 = fn () -> (Tensor[(11, 11, 8), float32],) {
    %588 = @func_4544() /* ty=Tensor[(11, 11, 8), float32] */;
    (%588,)
  };
  %589() /* ty=(Tensor[(11, 11, 8), float32],) */
}

def @func_3671(%var_3669: Tensor[(11, 11, 8), bool], %var_3670: Tensor[(120), uint64]) -> (Tensor[(11, 11, 8), int16], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(5, 5, 6), int8], Tensor[(150), float32], Tensor[(4), float64]) {
  %608 = fn (%var_3616: Tensor[(11, 11, 8), bool], %var_3632: Tensor[(120), uint64]) -> (Tensor[(11, 11, 8), int16], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(5, 5, 6), int8], Tensor[(150), float32], Tensor[(4), float64]) {
    %590 = @func_3418() /* ty=Tensor[(11, 11, 8), bool] */;
    %591 = cast(%var_3616, dtype="int16") /* ty=Tensor[(11, 11, 8), int16] */;
    %592 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
    %593 = cast(%590, dtype="int16") /* ty=Tensor[(11, 11, 8), int16] */;
    %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %595 = cast(%var_3632, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %596 = cast(%var_3632, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %597 = reshape(%595, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
    %598 = reshape(%596, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
    %599 = @func_41(%597, %598) /* ty=(Tensor[(8, 5, 3), uint64],) */;
    %600 = cast(meta[relay.Constant][34] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
    %601 = cast(meta[relay.Constant][35] /* ty=Tensor[(4), float64] */, dtype="float64") /* ty=Tensor[(4), float64] */;
    %602 = reshape(%600, newshape=[5, 5, 6]) /* ty=Tensor[(5, 5, 6), float32] */;
    %603 = reshape(%601, newshape=[1, 4]) /* ty=Tensor[(1, 4), float64] */;
    %604 = @func_2688(%602, %603) /* ty=(Tensor[(5, 5, 6), int8], Tensor[(4, 1, 1), float64], Tensor[(1, 4), float64], Tensor[(4, 1, 1), float64]) */;
    %605 = minimum(%593, %594) /* ty=Tensor[(11, 11, 8), int16] */;
    %606 = %599.0;
    %607 = %604.0;
    (%605, %606, %var_3632, %607, meta[relay.Constant][34] /* ty=Tensor[(150), float32] */, meta[relay.Constant][35] /* ty=Tensor[(4), float64] */)
  };
  %608(%var_3669, %var_3670) /* ty=(Tensor[(11, 11, 8), int16], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(5, 5, 6), int8], Tensor[(150), float32], Tensor[(4), float64]) */
}

def @func_6970(%var_6969: Tensor[(1456), int16]) -> (Tensor[(11, 11, 8), bool], Tensor[(5, 30), float32], Tensor[(1456), int16], Tensor[(880, 2), uint16], Tensor[(3, 6, 3), float64], float64, Tensor[(54), float64]) {
  %631 = fn (%var_6946: Tensor[(1456), int16]) -> (Tensor[(11, 11, 8), bool], Tensor[(5, 30), float32], Tensor[(1456), int16], Tensor[(880, 2), uint16], Tensor[(3, 6, 3), float64], float64, Tensor[(54), float64]) {
    %609 = cast(meta[relay.Constant][36] /* ty=Tensor[(880, 2), float32] */, dtype="float32") /* ty=Tensor[(880, 2), float32] */;
    %610 = cast(%var_6946, dtype="int16") /* ty=Tensor[(1456), int16] */;
    %611 = reshape(%609, newshape=[1760]) /* ty=Tensor[(1760), float32] */;
    %612 = reshape(%610, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
    %613 = @func_3213(%611, %612) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(1, 4), float64], Tensor[(5, 30), float32], Tensor[(4, 1), float64], Tensor[(1760), float32], Tensor[(1456), float32]) */;
    %614 = cast(meta[relay.Constant][37] /* ty=Tensor[(880, 2), float32] */, dtype="bool") /* ty=Tensor[(880, 2), bool] */;
    %615 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(880, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %616 = cast(meta[relay.Constant][36] /* ty=Tensor[(880, 2), float32] */, dtype="bool") /* ty=Tensor[(880, 2), bool] */;
    %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %618 = logical_and(%616, %617) /* ty=Tensor[(880, 2), bool] */;
    %619 = cast(%618, dtype="uint16") /* ty=Tensor[(880, 2), uint16] */;
    %620 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(880, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %621 = cast(meta[relay.Constant][36] /* ty=Tensor[(880, 2), float32] */, dtype="uint16") /* ty=Tensor[(880, 2), uint16] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %623 = cast(-1.36526f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %624 = cast(meta[relay.Constant][38] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
    %625 = reshape(%623, newshape=[]) /* ty=float64 */;
    %626 = reshape(%624, newshape=[3, 6, 3]) /* ty=Tensor[(3, 6, 3), float64] */;
    %627 = @func_3418() /* ty=Tensor[(11, 11, 8), bool] */;
    %628 = %613.2;
    %629 = right_shift(%621, %622) /* ty=Tensor[(880, 2), uint16] */;
    %630 = @func_3703(%625, %626) /* ty=Tensor[(3, 6, 3), float64] */;
    (%627, %628, %var_6946, %629, %630, -1.36526f64 /* ty=float64 */, meta[relay.Constant][38] /* ty=Tensor[(54), float64] */)
  };
  %631(%var_6969) /* ty=(Tensor[(11, 11, 8), bool], Tensor[(5, 30), float32], Tensor[(1456), int16], Tensor[(880, 2), uint16], Tensor[(3, 6, 3), float64], float64, Tensor[(54), float64]) */
}

def @func_4169() -> (Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) {
  @func_4167() /* ty=(Tensor[(11, 11, 8), float64], Tensor[(11, 11, 8), float64], Tensor[(4, 1, 1), float64]) */
}

def @func_6478() -> (Tensor[(11, 11, 8), float32],) {
  %632 = @func_4407() /* ty=Tensor[(11, 11, 8), float32] */;
  %633 = cast(%632, dtype="float32") /* ty=Tensor[(11, 11, 8), float32] */;
  %634 = sigmoid(%633) /* ty=Tensor[(11, 11, 8), float32] */;
  (%634,)
}

def @func_44(%var_42: Tensor[(8, 5, 3), uint64], %var_43: Tensor[(8, 5, 3), uint64]) -> (Tensor[(8, 5, 3), uint64],) {
  %640 = fn (%var_36: Tensor[(8, 5, 3), uint64], %var_37: Tensor[(8, 5, 3), uint64]) -> (Tensor[(8, 5, 3), uint64],) {
    %635 = cast(%var_37, dtype="uint64") /* ty=Tensor[(8, 5, 3), uint64] */;
    %636 = shape_of(%var_36, dtype="int32") /* ty=Tensor[(3), int32] */;
    %637 = cast(%var_36, dtype="uint64") /* ty=Tensor[(8, 5, 3), uint64] */;
    %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %639 = multiply(%637, %638) /* ty=Tensor[(8, 5, 3), uint64] */;
    (%639,)
  };
  %640(%var_42, %var_43) /* ty=(Tensor[(8, 5, 3), uint64],) */
}

def @func_4528(%var_4527: Tensor[(11, 11, 8), float32]) -> Tensor[(11, 11, 8), uint32] {
  %647 = fn (%var_4520: Tensor[(11, 11, 8), float32]) -> Tensor[(11, 11, 8), uint32] {
    %641 = @func_3025() /* ty=(Tensor[(11, 11, 8), float32],) */;
    %642 = %641.0;
    %643 = cast(%var_4520, dtype="uint32") /* ty=Tensor[(11, 11, 8), uint32] */;
    %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(3), int32] */;
    %645 = cast(%642, dtype="uint32") /* ty=Tensor[(11, 11, 8), uint32] */;
    %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    logical_xor(%645, %646) /* ty=Tensor[(11, 11, 8), uint32] */
  };
  %647(%var_4527) /* ty=Tensor[(11, 11, 8), uint32] */
}

def @func_246(%var_243: Tensor[(16, 7, 2), float64], %var_244: Tensor[(1232), uint32], %var_245: Tensor[(11, 16, 7), uint32]) -> (Tensor[(77), uint32], Tensor[(1232), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(120), float32], Tensor[(16, 7, 2), bool], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), float32]) {
  %697 = fn (%var_152: Tensor[(16, 7, 2), float64], %var_175: Tensor[(1232), uint32], %var_205: Tensor[(11, 16, 7), uint32]) -> (Tensor[(77), uint32], Tensor[(1232), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(120), float32], Tensor[(16, 7, 2), bool], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), float32]) {
    %648 = cast(meta[relay.Constant][39] /* ty=Tensor[(77), uint32] */, dtype="uint32") /* ty=Tensor[(77), uint32] */;
    %649 = cast(meta[relay.Constant][39] /* ty=Tensor[(77), uint32] */, dtype="uint32") /* ty=Tensor[(77), uint32] */;
    %650 = cast(%var_175, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
    %651 = reshape(%649, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), uint32] */;
    %652 = reshape(%650, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), uint32] */;
    %653 = @func_60(%651, %652) /* ty=Tensor[(11, 16, 7), uint32] */;
    %654 = cast(%653, dtype="uint32") /* ty=Tensor[(11, 16, 7), uint32] */;
    %655 = reshape(%648, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), uint32] */;
    %656 = reshape(%654, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), uint32] */;
    %657 = cast(meta[relay.Constant][39] /* ty=Tensor[(77), uint32] */, dtype="uint32") /* ty=Tensor[(77), uint32] */;
    %658 = @func_60(%655, %656) /* ty=Tensor[(11, 16, 7), uint32] */;
    %659 = cast(%658, dtype="uint32") /* ty=Tensor[(11, 16, 7), uint32] */;
    %660 = reshape(%657, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), uint32] */;
    %661 = reshape(%659, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), uint32] */;
    %662 = cast(meta[relay.Constant][40] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %663 = cast(meta[relay.Constant][40] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %664 = reshape(%662, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
    %665 = reshape(%663, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), uint64] */;
    %666 = @func_41(%664, %665) /* ty=(Tensor[(8, 5, 3), uint64],) */;
    %667 = %666.0;
    %668 = cast(%667, dtype="float32") /* ty=Tensor[(8, 5, 3), float32] */;
    %669 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(120), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %670 = cast(meta[relay.Constant][40] /* ty=Tensor[(120), uint64] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?), float32] */;
    %672 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(1, 7, 2), float64] */;
    %673 = cast(%var_152, dtype="float64") /* ty=Tensor[(16, 7, 2), float64] */;
    %674 = mod(%672, %673) /* ty=Tensor[(16, 7, 2), float64] */;
    %675 = cast(%674, dtype="int64") /* ty=Tensor[(16, 7, 2), int64] */;
    %676 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 7, 2), float64] */, dtype="int64") /* ty=Tensor[(1, 7, 2), int64] */;
    %677 = bitwise_or(%675, %676) /* ty=Tensor[(16, 7, 2), int64] */;
    %678 = cast(%677, dtype="bool") /* ty=Tensor[(16, 7, 2), bool] */;
    %679 = shape_of(%674, dtype="int32") /* ty=Tensor[(3), int32] */;
    %680 = cast(%674, dtype="bool") /* ty=Tensor[(16, 7, 2), bool] */;
    %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %682 = cast(%var_205, dtype="uint32") /* ty=Tensor[(11, 16, 7), uint32] */;
    %683 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
    %684 = cast(%653, dtype="uint32") /* ty=Tensor[(11, 16, 7), uint32] */;
    %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %686 = cast(meta[relay.Constant][39] /* ty=Tensor[(77), uint32] */, dtype="uint32") /* ty=Tensor[(77), uint32] */;
    %687 = bitwise_and(%684, %685) /* ty=Tensor[(11, 16, 7), uint32] */;
    %688 = cast(%687, dtype="uint32") /* ty=Tensor[(11, 16, 7), uint32] */;
    %689 = reshape(%686, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), uint32] */;
    %690 = reshape(%688, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), uint32] */;
    %691 = cast(%653, dtype="float32") /* ty=Tensor[(11, 16, 7), float32] */;
    %692 = @func_60(%660, %661) /* ty=Tensor[(11, 16, 7), uint32] */;
    %693 = power(%670, %671) /* ty=Tensor[(120), float32] */;
    %694 = equal(%680, %681) /* ty=Tensor[(16, 7, 2), bool] */;
    %695 = @func_60(%689, %690) /* ty=Tensor[(11, 16, 7), uint32] */;
    %696 = sin(%691) /* ty=Tensor[(11, 16, 7), float32] */;
    (meta[relay.Constant][39] /* ty=Tensor[(77), uint32] */, %var_175, %658, %692, %693, %694, %687, %695, %696)
  };
  %697(%var_243, %var_244, %var_245) /* ty=(Tensor[(77), uint32], Tensor[(1232), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(120), float32], Tensor[(16, 7, 2), bool], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), uint32], Tensor[(11, 16, 7), float32]) */
}

def @main(%var_7490: Tensor[(1232), uint32], %var_7504: Tensor[(605), int64]) -> (Tensor[(11, 11, 8), float64], Tensor[(120), uint64], Tensor[(1, 120), uint64], Tensor[(1232), uint32], float64, Tensor[(1456), int16], Tensor[(3, 6, 3), float64], Tensor[(3, 18), float64], Tensor[(8, 14, 13), int32], Tensor[(605), int64], Tensor[(21), int8], Tensor[(21), float32]) {
  %698 = @func_5191() /* ty=(Tensor[(11, 11, 8), float64],) */;
  %699 = @func_5190() /* ty=(Tensor[(11, 11, 8), float64],) */;
  %700 = %699.0;
  %701 = cast(%700, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %702 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 120), uint64] */, dtype="uint64") /* ty=Tensor[(1, 120), uint64] */;
  %703 = cast(%var_7490, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %704 = reshape(%701, newshape=[968, 1]) /* ty=Tensor[(968, 1), bool] */;
  %705 = reshape(%702, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %706 = reshape(%703, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
  %707 = @func_6312(%704, %705, %706) /* ty=(Tensor[(120), uint64], Tensor[(120), uint64], Tensor[(4, 968, 1), bool], Tensor[(11, 16, 7), uint32], Tensor[(77), uint32], Tensor[(968, 1232), bool], Tensor[(4, 11, 5), float64]) */;
  %708 = cast(meta[relay.Constant][43] /* ty=Tensor[(1456), int16] */, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %709 = reshape(%708, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
  %710 = @func_6970(%709) /* ty=(Tensor[(11, 11, 8), bool], Tensor[(5, 30), float32], Tensor[(1456), int16], Tensor[(880, 2), uint16], Tensor[(3, 6, 3), float64], float64, Tensor[(54), float64]) */;
  %711 = cast(meta[relay.Constant][43] /* ty=Tensor[(1456), int16] */, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %712 = reshape(%711, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
  %713 = @func_6968(%712) /* ty=(Tensor[(11, 11, 8), bool], Tensor[(5, 30), float32], Tensor[(1456), int16], Tensor[(880, 2), uint16], Tensor[(3, 6, 3), float64], float64, Tensor[(54), float64]) */;
  %714 = %713.5;
  %715 = cast(%714, dtype="float64") /* ty=float64 */;
  %716 = cast(meta[relay.Constant][44] /* ty=Tensor[(3, 18), float64] */, dtype="float64") /* ty=Tensor[(3, 18), float64] */;
  %717 = reshape(%715, newshape=[]) /* ty=float64 */;
  %718 = reshape(%716, newshape=[3, 6, 3]) /* ty=Tensor[(3, 6, 3), float64] */;
  %719 = cast(meta[relay.Constant][45] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %720 = cast(%var_7504, dtype="int64") /* ty=Tensor[(605), int64] */;
  %721 = reshape(%719, newshape=[1, 7, 3]) /* ty=Tensor[(1, 7, 3), float32] */;
  %722 = reshape(%720, newshape=[605]) /* ty=Tensor[(605), int64] */;
  %723 = @func_2264(%721, %722) /* ty=(Tensor[(?, 7, 3), bool], Tensor[(6, 7, 3), bool], Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(11, 11, 5), int64], Tensor[(605), int64]) */;
  %724 = cast(meta[relay.Constant][45] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %725 = tan(%724) /* ty=Tensor[(21), float32] */;
  %726 = cast(meta[relay.Constant][45] /* ty=Tensor[(21), float32] */, dtype="int8") /* ty=Tensor[(21), int8] */;
  %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(1), int32] */;
  %728 = cast(%725, dtype="int8") /* ty=Tensor[(21), int8] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?), int8] */;
  %730 = cast(meta[relay.Constant][45] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %731 = %698.0;
  %732 = %707.1;
  %733 = %710.5;
  %734 = @func_3703(%717, %718) /* ty=Tensor[(3, 6, 3), float64] */;
  %735 = %723.2;
  %736 = right_shift(%728, %729) /* ty=Tensor[(21), int8] */;
  %737 = log(%730) /* ty=Tensor[(21), float32] */;
  (%731, %732, meta[relay.Constant][42] /* ty=Tensor[(1, 120), uint64] */, %var_7490, %733, meta[relay.Constant][43] /* ty=Tensor[(1456), int16] */, %734, meta[relay.Constant][44] /* ty=Tensor[(3, 18), float64] */, %735, %var_7504, %736, %737)
}

def @func_3216(%var_3214: Tensor[(1760), float32], %var_3215: Tensor[(1456), int16]) -> (Tensor[(11, 11, 8), float32], Tensor[(1, 4), float64], Tensor[(5, 30), float32], Tensor[(4, 1), float64], Tensor[(1760), float32], Tensor[(1456), float32]) {
  %756 = fn (%var_3188: Tensor[(1760), float32], %var_3189: Tensor[(1456), int16]) -> (Tensor[(11, 11, 8), float32], Tensor[(1, 4), float64], Tensor[(5, 30), float32], Tensor[(4, 1), float64], Tensor[(1760), float32], Tensor[(1456), float32]) {
    %738 = cast(meta[relay.Constant][46] /* ty=Tensor[(5, 30), float32] */, dtype="float32") /* ty=Tensor[(5, 30), float32] */;
    %739 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 1), float64] */, dtype="float64") /* ty=Tensor[(4, 1), float64] */;
    %740 = reshape(%738, newshape=[5, 5, 6]) /* ty=Tensor[(5, 5, 6), float32] */;
    %741 = reshape(%739, newshape=[1, 4]) /* ty=Tensor[(1, 4), float64] */;
    %742 = @func_2688(%740, %741) /* ty=(Tensor[(5, 5, 6), int8], Tensor[(4, 1, 1), float64], Tensor[(1, 4), float64], Tensor[(4, 1, 1), float64]) */;
    %743 = cast(%var_3188, dtype="float32") /* ty=Tensor[(1760), float32] */;
    %744 = cast(%var_3189, dtype="int16") /* ty=Tensor[(1456), int16] */;
    %745 = reshape(%743, newshape=[10, 16, 11]) /* ty=Tensor[(10, 16, 11), float32] */;
    %746 = reshape(%744, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
    %747 = @func_2363(%745, %746) /* ty=(Tensor[(8, 14, 13), int32], Tensor[(1456), int16], Tensor[(10, 16, 11), float64], Tensor[(10, 16, 11), float32]) */;
    %748 = %747.1;
    %749 = cast(%var_3189, dtype="float32") /* ty=Tensor[(1456), float32] */;
    %750 = shape_of(%748, dtype="int32") /* ty=Tensor[(1), int32] */;
    %751 = cast(%748, dtype="float32") /* ty=Tensor[(1456), float32] */;
    %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?), float32] */;
    %753 = @func_3064() /* ty=Tensor[(11, 11, 8), float32] */;
    %754 = %742.2;
    %755 = floor_divide(%751, %752) /* ty=Tensor[(1456), float32] */;
    (%753, %754, meta[relay.Constant][46] /* ty=Tensor[(5, 30), float32] */, meta[relay.Constant][47] /* ty=Tensor[(4, 1), float64] */, %var_3188, %755)
  };
  %756(%var_3214, %var_3215) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(1, 4), float64], Tensor[(5, 30), float32], Tensor[(4, 1), float64], Tensor[(1760), float32], Tensor[(1456), float32]) */
}

def @func_3246() -> (Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) {
  @func_3244() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(4, 1, 1), float64], Tensor[(2, 2), float64]) */
}

def @func_1912(%var_1891: Tensor[(11, 11, 5), int64]) -> (Tensor[(11, 11, 5), int64], Tensor[(4, 1, 1), float64], Tensor[(4), float64]) {
  %757 = cast(meta[relay.Constant][48] /* ty=Tensor[(11, 11, 5), int64] */, dtype="int64") /* ty=Tensor[(11, 11, 5), int64] */;
  %758 = shape_of(%var_1891, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%var_1891, dtype="int64") /* ty=Tensor[(11, 11, 5), int64] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %761 = cast(meta[relay.Constant][49] /* ty=Tensor[(4), float64] */, dtype="float64") /* ty=Tensor[(4), float64] */;
  %762 = reshape(%761, newshape=[4, 1, 1]) /* ty=Tensor[(4, 1, 1), float64] */;
  %763 = add(%759, %760) /* ty=Tensor[(11, 11, 5), int64] */;
  %764 = @func_1152(%762) /* ty=Tensor[(4, 1, 1), float64] */;
  (%763, %764, meta[relay.Constant][49] /* ty=Tensor[(4), float64] */)
}

def @func_2943() -> Tensor[(11, 11, 8), float32] {
  %765 = cast(meta[relay.Constant][50] /* ty=Tensor[(11, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(11, 11, 8), float32] */;
  atan(%765) /* ty=Tensor[(11, 11, 8), float32] */
}

def @func_5916() -> Tensor[(9, 3, 14), int8] {
  %766 = cast(meta[relay.Constant][51] /* ty=Tensor[(9, 3, 14), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 14), float64] */;
  %767 = log(%766) /* ty=Tensor[(9, 3, 14), float64] */;
  %768 = cast(%767, dtype="int8") /* ty=Tensor[(9, 3, 14), int8] */;
  %769 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(9, 3, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(meta[relay.Constant][51] /* ty=Tensor[(9, 3, 14), float64] */, dtype="int8") /* ty=Tensor[(9, 3, 14), int8] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%770, %771) /* ty=Tensor[(9, 3, 14), int8] */
}

def @func_5165(%var_5164: Tensor[(7, 336), int32]) -> (Tensor[(7, 336), uint8], Tensor[(7, 336), bool]) {
  %784 = fn (%var_5149: Tensor[(7, 336), int32]) -> (Tensor[(7, 336), uint8], Tensor[(7, 336), bool]) {
    %772 = @func_3957() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(11, 11, 8), bool], Tensor[(7, 336), int32], Tensor[(11, 11, 8), float32], Tensor[(7, 336), uint32], Tensor[(11, 11, 8), float32]) */;
    %773 = %772.4;
    %774 = cast(%var_5149, dtype="uint8") /* ty=Tensor[(7, 336), uint8] */;
    %775 = shape_of(%773, dtype="int32") /* ty=Tensor[(2), int32] */;
    %776 = cast(%773, dtype="uint8") /* ty=Tensor[(7, 336), uint8] */;
    %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %778 = cast(%773, dtype="bool") /* ty=Tensor[(7, 336), bool] */;
    %779 = shape_of(%var_5149, dtype="int32") /* ty=Tensor[(2), int32] */;
    %780 = cast(%var_5149, dtype="bool") /* ty=Tensor[(7, 336), bool] */;
    %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %782 = subtract(%776, %777) /* ty=Tensor[(7, 336), uint8] */;
    %783 = less(%780, %781) /* ty=Tensor[(7, 336), bool] */;
    (%782, %783)
  };
  %784(%var_5164) /* ty=(Tensor[(7, 336), uint8], Tensor[(7, 336), bool]) */
}

def @func_5266(%var_5261: Tensor[(13, 1, 14), uint32], %var_5262: Tensor[(13, 11, 14), uint32], %var_5263: Tensor[(13, 15, 14), uint32], %var_5264: Tensor[(1760), float32], %var_5265: Tensor[(1456), int16]) -> (Tensor[(13, 11, 14), uint32], Tensor[(13, 11, 14), float32], Tensor[(11, 11, 8), float32], Tensor[(13, 15, 14), uint16], Tensor[(4, 1), float64], Tensor[(1760), float32], Tensor[(1456), int16]) {
  %808 = fn (%var_5205: Tensor[(13, 1, 14), uint32], %var_5206: Tensor[(13, 11, 14), uint32], %var_5234: Tensor[(13, 15, 14), uint32], %var_5243: Tensor[(1760), float32], %var_5244: Tensor[(1456), int16]) -> (Tensor[(13, 11, 14), uint32], Tensor[(13, 11, 14), float32], Tensor[(11, 11, 8), float32], Tensor[(13, 15, 14), uint16], Tensor[(4, 1), float64], Tensor[(1760), float32], Tensor[(1456), int16]) {
    %785 = cast(meta[relay.Constant][52] /* ty=Tensor[(13, 11, 14), uint32] */, dtype="uint32") /* ty=Tensor[(13, 11, 14), uint32] */;
    %786 = shape_of(%var_5206, dtype="int32") /* ty=Tensor[(3), int32] */;
    %787 = cast(%var_5206, dtype="uint32") /* ty=Tensor[(13, 11, 14), uint32] */;
    %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %789 = cast(%var_5205, dtype="uint32") /* ty=Tensor[(13, 1, 14), uint32] */;
    %790 = cast(%var_5206, dtype="uint32") /* ty=Tensor[(13, 11, 14), uint32] */;
    %791 = minimum(%789, %790) /* ty=Tensor[(13, 11, 14), uint32] */;
    %792 = cast(%791, dtype="float32") /* ty=Tensor[(13, 11, 14), float32] */;
    %793 = shape_of(%var_5206, dtype="int32") /* ty=Tensor[(3), int32] */;
    %794 = cast(%var_5206, dtype="float32") /* ty=Tensor[(13, 11, 14), float32] */;
    %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %796 = cast(%var_5205, dtype="uint16") /* ty=Tensor[(13, 1, 14), uint16] */;
    %797 = cast(%var_5234, dtype="uint16") /* ty=Tensor[(13, 15, 14), uint16] */;
    %798 = cast(%var_5243, dtype="float32") /* ty=Tensor[(1760), float32] */;
    %799 = cast(%var_5244, dtype="int16") /* ty=Tensor[(1456), int16] */;
    %800 = reshape(%798, newshape=[1760]) /* ty=Tensor[(1760), float32] */;
    %801 = reshape(%799, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
    %802 = @func_3213(%800, %801) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(1, 4), float64], Tensor[(5, 30), float32], Tensor[(4, 1), float64], Tensor[(1760), float32], Tensor[(1456), float32]) */;
    %803 = bitwise_xor(%787, %788) /* ty=Tensor[(13, 11, 14), uint32] */;
    %804 = divide(%794, %795) /* ty=Tensor[(13, 11, 14), float32] */;
    %805 = @func_3760() /* ty=Tensor[(11, 11, 8), float32] */;
    %806 = left_shift(%796, %797) /* ty=Tensor[(13, 15, 14), uint16] */;
    %807 = %802.3;
    (%803, %804, %805, %806, %807, %var_5243, %var_5244)
  };
  %808(%var_5261, %var_5262, %var_5263, %var_5264, %var_5265) /* ty=(Tensor[(13, 11, 14), uint32], Tensor[(13, 11, 14), float32], Tensor[(11, 11, 8), float32], Tensor[(13, 15, 14), uint16], Tensor[(4, 1), float64], Tensor[(1760), float32], Tensor[(1456), int16]) */
}

def @func_4008(%var_4002: float64) -> (Tensor[(11, 11, 8), float32], Tensor[(3, 6, 3), float64], float64, Tensor[(9, 6), float64]) {
  %809 = @func_3957() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(11, 11, 8), bool], Tensor[(7, 336), int32], Tensor[(11, 11, 8), float32], Tensor[(7, 336), uint32], Tensor[(11, 11, 8), float32]) */;
  %810 = cast(%var_4002, dtype="float64") /* ty=float64 */;
  %811 = cast(meta[relay.Constant][53] /* ty=Tensor[(9, 6), float64] */, dtype="float64") /* ty=Tensor[(9, 6), float64] */;
  %812 = reshape(%810, newshape=[]) /* ty=float64 */;
  %813 = reshape(%811, newshape=[3, 6, 3]) /* ty=Tensor[(3, 6, 3), float64] */;
  %814 = %809.0;
  %815 = @func_3703(%812, %813) /* ty=Tensor[(3, 6, 3), float64] */;
  (%814, %815, %var_4002, meta[relay.Constant][53] /* ty=Tensor[(9, 6), float64] */)
}

def @func_4011(%var_4009: float64) -> (Tensor[(11, 11, 8), float32], Tensor[(3, 6, 3), float64], float64, Tensor[(9, 6), float64]) {
  @func_4008(%var_4009) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(3, 6, 3), float64], float64, Tensor[(9, 6), float64]) */
}

def @func_4567() -> (Tensor[(11, 11, 8), float64],) {
  @func_4565() /* ty=(Tensor[(11, 11, 8), float64],) */
}

def @func_2691(%var_2689: Tensor[(5, 5, 6), float32], %var_2690: Tensor[(1, 4), float64]) -> (Tensor[(5, 5, 6), int8], Tensor[(4, 1, 1), float64], Tensor[(1, 4), float64], Tensor[(4, 1, 1), float64]) {
  %829 = fn (%var_2670: Tensor[(5, 5, 6), float32], %var_2679: Tensor[(1, 4), float64]) -> (Tensor[(5, 5, 6), int8], Tensor[(4, 1, 1), float64], Tensor[(1, 4), float64], Tensor[(4, 1, 1), float64]) {
    %816 = cast(%var_2670, dtype="float32") /* ty=Tensor[(5, 5, 6), float32] */;
    %817 = cos(%816) /* ty=Tensor[(5, 5, 6), float32] */;
    %818 = cast(%var_2670, dtype="int8") /* ty=Tensor[(5, 5, 6), int8] */;
    %819 = shape_of(%817, dtype="int32") /* ty=Tensor[(3), int32] */;
    %820 = cast(%817, dtype="int8") /* ty=Tensor[(5, 5, 6), int8] */;
    %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %822 = cast(%var_2679, dtype="float64") /* ty=Tensor[(1, 4), float64] */;
    %823 = reshape(%822, newshape=[4, 1, 1]) /* ty=Tensor[(4, 1, 1), float64] */;
    %824 = @func_1152(%823) /* ty=Tensor[(4, 1, 1), float64] */;
    %825 = cast(%824, dtype="float64") /* ty=Tensor[(4, 1, 1), float64] */;
    %826 = reshape(%825, newshape=[4, 1, 1]) /* ty=Tensor[(4, 1, 1), float64] */;
    %827 = right_shift(%820, %821) /* ty=Tensor[(5, 5, 6), int8] */;
    %828 = @func_1152(%826) /* ty=Tensor[(4, 1, 1), float64] */;
    (%827, %824, %var_2679, %828)
  };
  %829(%var_2689, %var_2690) /* ty=(Tensor[(5, 5, 6), int8], Tensor[(4, 1, 1), float64], Tensor[(1, 4), float64], Tensor[(4, 1, 1), float64]) */
}

def @func_3994(%var_3992: Tensor[(120), uint64]) -> (Tensor[(11, 11, 8), bool], Tensor[(4), float64], Tensor[(120), uint64]) {
  @func_3991(%var_3992) /* ty=(Tensor[(11, 11, 8), bool], Tensor[(4), float64], Tensor[(120), uint64]) */
}

def @func_5309() -> (Tensor[(4, 1, 1), float64], Tensor[(7, 336), bool], Tensor[(2352), int32]) {
  %836 = fn () -> (Tensor[(4, 1, 1), float64], Tensor[(7, 336), bool], Tensor[(2352), int32]) {
    %830 = @func_4973() /* ty=(Tensor[(4, 1, 1), float64],) */;
    %831 = cast(meta[relay.Constant][54] /* ty=Tensor[(2352), int32] */, dtype="int32") /* ty=Tensor[(2352), int32] */;
    %832 = reshape(%831, newshape=[7, 336]) /* ty=Tensor[(7, 336), int32] */;
    %833 = @func_5163(%832) /* ty=(Tensor[(7, 336), uint8], Tensor[(7, 336), bool]) */;
    %834 = %830.0;
    %835 = %833.1;
    (%834, %835, meta[relay.Constant][54] /* ty=Tensor[(2352), int32] */)
  };
  %836() /* ty=(Tensor[(4, 1, 1), float64], Tensor[(7, 336), bool], Tensor[(2352), int32]) */
}

def @func_5332() -> Tensor[(11, 11, 8), bool] {
  %837 = fn () -> Tensor[(11, 11, 8), bool] {
    @func_3418() /* ty=Tensor[(11, 11, 8), bool] */
  };
  %837() /* ty=Tensor[(11, 11, 8), bool] */
}

def @func_5701() -> Tensor[(4, ?, ?), float32] {
  @func_5699() /* ty=Tensor[(4, ?, ?), float32] */
}

def @func_5744(%var_5712: Tensor[(10, 1, 5), int32], %var_5738: Tensor[(11, 11, 5), int64]) -> (Tensor[(605), int64], Tensor[(10, 15, 5), uint16], Tensor[(11, 11, 5), int16]) {
  %838 = cast(%var_5712, dtype="float64") /* ty=Tensor[(10, 1, 5), float64] */;
  %839 = sigmoid(%838) /* ty=Tensor[(10, 1, 5), float64] */;
  %840 = cast(%var_5712, dtype="bool") /* ty=Tensor[(10, 1, 5), bool] */;
  %841 = cast(meta[relay.Constant][56] /* ty=Tensor[(10, 15, 5), int32] */, dtype="bool") /* ty=Tensor[(10, 15, 5), bool] */;
  %842 = not_equal(%840, %841) /* ty=Tensor[(10, 15, 5), bool] */;
  %843 = cast(%839, dtype="uint16") /* ty=Tensor[(10, 1, 5), uint16] */;
  %844 = cast(%842, dtype="uint16") /* ty=Tensor[(10, 15, 5), uint16] */;
  %845 = cast(meta[relay.Constant][55] /* ty=Tensor[(605), int64] */, dtype="int64") /* ty=Tensor[(605), int64] */;
  %846 = reshape(%845, newshape=[11, 11, 5]) /* ty=Tensor[(11, 11, 5), int64] */;
  %847 = @func_1912(%846) /* ty=(Tensor[(11, 11, 5), int64], Tensor[(4, 1, 1), float64], Tensor[(4), float64]) */;
  %848 = %847.0;
  %849 = cast(%var_5738, dtype="int16") /* ty=Tensor[(11, 11, 5), int16] */;
  %850 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %851 = cast(%848, dtype="int16") /* ty=Tensor[(11, 11, 5), int16] */;
  %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %853 = add(%843, %844) /* ty=Tensor[(10, 15, 5), uint16] */;
  %854 = left_shift(%851, %852) /* ty=Tensor[(11, 11, 5), int16] */;
  (meta[relay.Constant][55] /* ty=Tensor[(605), int64] */, %853, %854)
}

def @func_6788() -> (Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float32]) {
  @func_6786() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(11, 11, 8), float32]) */
}

def @func_4593() -> (Tensor[(11, 11, 8), float32], Tensor[(6, 7, 8), float64], Tensor[(168, 2), float32], Tensor[(3, 40), uint64]) {
  %855 = cast(meta[relay.Constant][57] /* ty=Tensor[(168, 2), float32] */, dtype="float32") /* ty=Tensor[(168, 2), float32] */;
  %856 = cast(meta[relay.Constant][57] /* ty=Tensor[(168, 2), float32] */, dtype="float32") /* ty=Tensor[(168, 2), float32] */;
  %857 = cast(meta[relay.Constant][58] /* ty=Tensor[(3, 40), uint64] */, dtype="uint64") /* ty=Tensor[(3, 40), uint64] */;
  %858 = reshape(%855, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float32] */;
  %859 = reshape(%856, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float32] */;
  %860 = reshape(%857, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %861 = @func_777(%858, %859, %860) /* ty=(Tensor[(6, 7, 8), bool], Tensor[(8, 5, 3), uint64], Tensor[(120), uint64], Tensor[(6, 7, 8), bool], Tensor[(6, 7, 8), float64]) */;
  %862 = @func_4544() /* ty=Tensor[(11, 11, 8), float32] */;
  %863 = %861.4;
  (%862, %863, meta[relay.Constant][57] /* ty=Tensor[(168, 2), float32] */, meta[relay.Constant][58] /* ty=Tensor[(3, 40), uint64] */)
}

def @func_6567(%var_6563: Tensor[(120), uint64], %var_6564: Tensor[(1232), uint32], %var_6565: Tensor[(224), float64], %var_6566: Tensor[(728, 2), int16]) -> (Tensor[(11, 11, 8), float32], Tensor[(11, 16, 7), uint32], Tensor[(120), uint64], Tensor[(1232), float32], Tensor[(224), float64], Tensor[(154), float64], Tensor[(224), float64], Tensor[(1232), int64], Tensor[(728, 2), float32]) {
  %897 = fn (%var_6516: Tensor[(120), uint64], %var_6531: Tensor[(1232), uint32], %var_6549: Tensor[(224), float64], %var_6550: Tensor[(728, 2), int16]) -> (Tensor[(11, 11, 8), float32], Tensor[(11, 16, 7), uint32], Tensor[(120), uint64], Tensor[(1232), float32], Tensor[(224), float64], Tensor[(154), float64], Tensor[(224), float64], Tensor[(1232), int64], Tensor[(728, 2), float32]) {
    %864 = @func_2943() /* ty=Tensor[(11, 11, 8), float32] */;
    %865 = cast(%864, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
    %866 = cast(%var_6516, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %867 = cast(meta[relay.Constant][59] /* ty=Tensor[(1232), uint32] */, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
    %868 = reshape(%865, newshape=[968, 1]) /* ty=Tensor[(968, 1), bool] */;
    %869 = reshape(%866, newshape=[120]) /* ty=Tensor[(120), uint64] */;
    %870 = reshape(%867, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
    %871 = @func_6308(%868, %869, %870) /* ty=(Tensor[(120), uint64], Tensor[(120), uint64], Tensor[(4, 968, 1), bool], Tensor[(11, 16, 7), uint32], Tensor[(77), uint32], Tensor[(968, 1232), bool], Tensor[(4, 11, 5), float64]) */;
    %872 = cast(%var_6531, dtype="float32") /* ty=Tensor[(1232), float32] */;
    %873 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(1232), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %874 = cast(meta[relay.Constant][59] /* ty=Tensor[(1232), uint32] */, dtype="float32") /* ty=Tensor[(1232), float32] */;
    %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?), float32] */;
    %876 = cast(%864, dtype="float32") /* ty=Tensor[(11, 11, 8), float32] */;
    %877 = cast(meta[relay.Constant][60] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
    %878 = cast(%var_6549, dtype="float64") /* ty=Tensor[(224), float64] */;
    %879 = floor_mod(%874, %875) /* ty=Tensor[(1232), float32] */;
    %880 = cast(%879, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
    %881 = cast(%var_6550, dtype="int16") /* ty=Tensor[(728, 2), int16] */;
    %882 = cast(2.12513f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %883 = reshape(%876, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float32] */;
    %884 = reshape(%877, newshape=[154]) /* ty=Tensor[(154), float64] */;
    %885 = reshape(%878, newshape=[224]) /* ty=Tensor[(224), float64] */;
    %886 = reshape(%880, newshape=[1232]) /* ty=Tensor[(1232), uint32] */;
    %887 = reshape(%881, newshape=[1456, 1]) /* ty=Tensor[(1456, 1), int16] */;
    %888 = reshape(%882, newshape=[]) /* ty=float64 */;
    %889 = @func_4686(%883, %884, %885, %886, %887, %888) /* ty=(Tensor[(11, 11, 8), float64], Tensor[(120), uint64], Tensor[(154), float64], Tensor[(224), float64], Tensor[(1232), uint32], Tensor[(2, 168), uint16], Tensor[(1456, 1), int16], float64) */;
    %890 = cast(meta[relay.Constant][59] /* ty=Tensor[(1232), uint32] */, dtype="int64") /* ty=Tensor[(1232), int64] */;
    %891 = cast(2.12513f64 /* ty=float64 */, dtype="int64") /* ty=int64 */;
    %892 = cast(%var_6550, dtype="float32") /* ty=Tensor[(728, 2), float32] */;
    %893 = %871.3;
    %894 = %889.3;
    %895 = add(%890, %891) /* ty=Tensor[(1232), int64] */;
    %896 = erf(%892) /* ty=Tensor[(728, 2), float32] */;
    (%864, %893, %var_6516, %879, %894, meta[relay.Constant][60] /* ty=Tensor[(154), float64] */, %var_6549, %895, %896)
  };
  %897(%var_6563, %var_6564, %var_6565, %var_6566) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(11, 16, 7), uint32], Tensor[(120), uint64], Tensor[(1232), float32], Tensor[(224), float64], Tensor[(154), float64], Tensor[(224), float64], Tensor[(1232), int64], Tensor[(728, 2), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen225/build/output.py", line 1946, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:58:54] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

