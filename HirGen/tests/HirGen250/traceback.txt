==========mod==========
#[version = "0.0.5"]
def @func_5114() -> (Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32]) {
  %0 = @func_4867() /* ty=Tensor[(10, 13, 13), float32] */;
  %1 = cast(%0, dtype="float32") /* ty=Tensor[(10, 13, 13), float32] */;
  %2 = cast(%0, dtype="float32") /* ty=Tensor[(10, 13, 13), float32] */;
  %3 = rsqrt(%1) /* ty=Tensor[(10, 13, 13), float32] */;
  %4 = atan(%2) /* ty=Tensor[(10, 13, 13), float32] */;
  (%3, %4)
}

def @func_2675(%var_2640: Tensor[(7, 5, 3), bool], %var_2641: Tensor[(7, 5, 3), bool]) -> (Tensor[(7, 5, 3), bool],) {
  %5 = cast(%var_2641, dtype="bool") /* ty=Tensor[(7, 5, 3), bool] */;
  %6 = shape_of(%var_2640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_2640, dtype="bool") /* ty=Tensor[(7, 5, 3), bool] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %9 = logical_or(%7, %8) /* ty=Tensor[(7, 5, 3), bool] */;
  (%9,)
}

def @func_5928() -> (Tensor[(10, 13, 13), float32],) {
  %10 = @func_5114() /* ty=(Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32]) */;
  %11 = %10.0;
  (%11,)
}

def @func_6623(%var_6605: Tensor[(6, 6, 10), uint16], %var_6606: Tensor[(6, 6, 10), uint16]) -> (Tensor[(6, 6, 10), uint16], Tensor[(7, 5, 3), bool], Tensor[(105, 1), bool]) {
  %12 = cast(%var_6606, dtype="uint16") /* ty=Tensor[(6, 6, 10), uint16] */;
  %13 = shape_of(%var_6605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%var_6605, dtype="uint16") /* ty=Tensor[(6, 6, 10), uint16] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(105, 1), bool] */, dtype="bool") /* ty=Tensor[(105, 1), bool] */;
  %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(105, 1), bool] */, dtype="bool") /* ty=Tensor[(105, 1), bool] */;
  %18 = reshape(%16, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), bool] */;
  %19 = reshape(%17, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), bool] */;
  %20 = @func_2675(%18, %19) /* ty=(Tensor[(7, 5, 3), bool],) */;
  %21 = subtract(%14, %15) /* ty=Tensor[(6, 6, 10), uint16] */;
  %22 = %20.0;
  (%21, %22, meta[relay.Constant][0] /* ty=Tensor[(105, 1), bool] */)
}

def @func_4776(%var_4748: Tensor[(240), float64]) -> (Tensor[(10, 13, 13), float32], Tensor[(15, 4, 4), int32], Tensor[(240), float64], Tensor[(2, 12, 10), bool], bool, Tensor[(224), bool]) {
  %23 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %24 = cast(%var_4748, dtype="float64") /* ty=Tensor[(240), float64] */;
  %25 = reshape(%24, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float64] */;
  %26 = @func_1875(%25) /* ty=(Tensor[(15, 4, 4), int32],) */;
  %27 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %28 = cast(%var_4748, dtype="bool") /* ty=Tensor[(240), bool] */;
  %29 = cast(meta[relay.Constant][1] /* ty=Tensor[(224), bool] */, dtype="bool") /* ty=Tensor[(224), bool] */;
  %30 = reshape(%27, newshape=[]) /* ty=bool */;
  %31 = reshape(%28, newshape=[2, 12, 10]) /* ty=Tensor[(2, 12, 10), bool] */;
  %32 = reshape(%29, newshape=[112, 2]) /* ty=Tensor[(112, 2), bool] */;
  %33 = @func_4250(%30, %31, %32) /* ty=(Tensor[(2, 12, 10), bool], Tensor[(1152), float64], Tensor[(112, 2), bool], Tensor[(112, 8), bool], Tensor[(2, 12, 10), float32]) */;
  %34 = %23.0;
  %35 = %26.0;
  %36 = %33.0;
  (%34, %35, %var_4748, %36, True /* ty=bool */, meta[relay.Constant][1] /* ty=Tensor[(224), bool] */)
}

def @func_3818(%var_3789: Tensor[(12, 16, 11), float64]) -> (Tensor[(12, 16, 11), float64], Tensor[(8, 9, 3), int64], Tensor[(216), uint16]) {
  %37 = cast(%var_3789, dtype="float64") /* ty=Tensor[(12, 16, 11), float64] */;
  %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(216), uint16] */, dtype="uint16") /* ty=Tensor[(216), uint16] */;
  %39 = cast(meta[relay.Constant][2] /* ty=Tensor[(216), uint16] */, dtype="uint16") /* ty=Tensor[(216), uint16] */;
  %40 = reshape(%38, newshape=[8, 9, 3]) /* ty=Tensor[(8, 9, 3), uint16] */;
  %41 = reshape(%39, newshape=[8, 9, 3]) /* ty=Tensor[(8, 9, 3), uint16] */;
  %42 = rsqrt(%37) /* ty=Tensor[(12, 16, 11), float64] */;
  %43 = @func_1514(%40, %41) /* ty=Tensor[(8, 9, 3), int64] */;
  (%42, %43, meta[relay.Constant][2] /* ty=Tensor[(216), uint16] */)
}

def @func_1801(%var_1737: Tensor[(12, 9, 5), float64], %var_1738: Tensor[(12, 9, 5), float64], %var_1747: Tensor[(12, 9, 5), float64], %var_1765: Tensor[(8), uint8]) -> (Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float64], Tensor[(960), float64], Tensor[(4, 8, 2), float64]) {
  %44 = cast(%var_1738, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %45 = shape_of(%var_1737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%var_1737, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %48 = cast(%var_1747, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %49 = shape_of(%var_1737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%var_1737, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %52 = cast(%var_1765, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %53 = reshape(%52, newshape=[4, 1, 2]) /* ty=Tensor[(4, 1, 2), uint8] */;
  %54 = @func_162(%53) /* ty=(Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) */;
  %55 = cast(meta[relay.Constant][3] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %56 = cast(%var_1765, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %57 = reshape(%55, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float64] */;
  %58 = reshape(%56, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %59 = @func_835(%57, %58) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) */;
  %60 = %59.4;
  %61 = cast(%60, dtype="float32") /* ty=Tensor[(14, 13, 8), float32] */;
  %62 = cast(%60, dtype="float32") /* ty=Tensor[(14, 13, 8), float32] */;
  %63 = cast(%var_1765, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %64 = reshape(%61, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %65 = reshape(%62, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %66 = reshape(%63, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %67 = @func_666(%64, %65, %66) /* ty=(Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) */;
  %68 = floor_divide(%46, %47) /* ty=Tensor[(12, 9, 5), float64] */;
  %69 = greater_equal(%50, %51) /* ty=Tensor[(12, 9, 5), bool] */;
  %70 = %54.0;
  %71 = %67.1;
  (%68, %69, %70, %var_1765, %60, meta[relay.Constant][3] /* ty=Tensor[(960), float64] */, %71)
}

def @func_2539(%var_2518: Tensor[(240), float64]) -> (Tensor[(16, 7, 2), uint16], Tensor[(15, 4, 4), int32], Tensor[(240), float64], Tensor[(15, 4, 4), int32]) {
  %72 = cast(meta[relay.Constant][5] /* ty=Tensor[(16, 7, 2), uint16] */, dtype="uint16") /* ty=Tensor[(16, 7, 2), uint16] */;
  %73 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(16, 7, 2), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 7, 2), uint16] */, dtype="uint16") /* ty=Tensor[(16, 7, 2), uint16] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %76 = cast(%var_2518, dtype="float64") /* ty=Tensor[(240), float64] */;
  %77 = reshape(%76, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float64] */;
  %78 = @func_1875(%77) /* ty=(Tensor[(15, 4, 4), int32],) */;
  %79 = %78.0;
  %80 = cast(%79, dtype="float64") /* ty=Tensor[(15, 4, 4), float64] */;
  %81 = reshape(%80, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float64] */;
  %82 = @func_1875(%81) /* ty=(Tensor[(15, 4, 4), int32],) */;
  %83 = left_shift(%74, %75) /* ty=Tensor[(16, 7, 2), uint16] */;
  %84 = %82.0;
  (%83, %79, %var_2518, %84)
}

def @func_4152(%var_4145: Tensor[(6, 13, 11), int64]) -> Tensor[(6, 13, 11), bool] {
  %85 = cast(%var_4145, dtype="bool") /* ty=Tensor[(6, 13, 11), bool] */;
  %86 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(6, 13, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 13, 11), int64] */, dtype="bool") /* ty=Tensor[(6, 13, 11), bool] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%87, %88) /* ty=Tensor[(6, 13, 11), bool] */
}

def @func_4582(%var_4576: bool, %var_4577: Tensor[(2240), bool]) -> (Tensor[(10, 13, 13), float32], Tensor[(10, 14, 16), uint32], bool, Tensor[(2240), bool]) {
  %89 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %90 = cast(%var_4576, dtype="bool") /* ty=bool */;
  %91 = cast(%var_4577, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %92 = reshape(%90, newshape=[]) /* ty=bool */;
  %93 = reshape(%91, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), bool] */;
  %94 = @func_3223(%92, %93) /* ty=(Tensor[(10, 14, 16), uint32], Tensor[(10, 14, 16), float32]) */;
  %95 = %89.0;
  %96 = %94.0;
  (%95, %96, %var_4576, %var_4577)
}

def @func_4250(%var_4231: bool, %var_4232: Tensor[(2, 12, 10), bool], %var_4244: Tensor[(112, 2), bool]) -> (Tensor[(2, 12, 10), bool], Tensor[(1152), float64], Tensor[(112, 2), bool], Tensor[(112, 8), bool], Tensor[(2, 12, 10), float32]) {
  %97 = cast(%var_4231, dtype="bool") /* ty=bool */;
  %98 = cast(%var_4232, dtype="bool") /* ty=Tensor[(2, 12, 10), bool] */;
  %99 = cast(%var_4244, dtype="bool") /* ty=Tensor[(112, 2), bool] */;
  %100 = cast(meta[relay.Constant][7] /* ty=Tensor[(112, 8), bool] */, dtype="bool") /* ty=Tensor[(112, 8), bool] */;
  %101 = cast(meta[relay.Constant][7] /* ty=Tensor[(112, 8), bool] */, dtype="bool") /* ty=Tensor[(112, 8), bool] */;
  %102 = cast(meta[relay.Constant][7] /* ty=Tensor[(112, 8), bool] */, dtype="float64") /* ty=Tensor[(112, 8), float64] */;
  %103 = reshape(%99, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), bool] */;
  %104 = reshape(%100, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), bool] */;
  %105 = reshape(%101, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), bool] */;
  %106 = reshape(%102, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float64] */;
  %107 = @func_2146(%103, %104, %105, %106) /* ty=(Tensor[(14, 4, 16), int32], Tensor[(14, 4, 16), int8], Tensor[(4, 8, 2), float64], Tensor[(1152), float64], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(4, 2), uint8], Tensor[(14, 4, 16), float64]) */;
  %108 = cast(%var_4232, dtype="float32") /* ty=Tensor[(2, 12, 10), float32] */;
  %109 = logical_and(%97, %98) /* ty=Tensor[(2, 12, 10), bool] */;
  %110 = %107.3;
  %111 = asinh(%108) /* ty=Tensor[(2, 12, 10), float32] */;
  (%109, %110, %var_4244, meta[relay.Constant][7] /* ty=Tensor[(112, 8), bool] */, %111)
}

def @func_4867() -> Tensor[(10, 13, 13), float32] {
  %112 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %113 = %112.0;
  %114 = cast(%113, dtype="float32") /* ty=Tensor[(10, 13, 13), float32] */;
  acosh(%114) /* ty=Tensor[(10, 13, 13), float32] */
}

def @func_4837(%var_4794: Tensor[(16, 8, 10), uint64]) -> (Tensor[(16, 8, 10), uint64], Tensor[(16, 8, 10), float32], Tensor[(4, 364), float32], Tensor[(64), float64], Tensor[(10, 13, 13), float32]) {
  %115 = cast(%var_4794, dtype="uint64") /* ty=Tensor[(16, 8, 10), uint64] */;
  %116 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(16, 8, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 8, 10), uint64] */, dtype="uint64") /* ty=Tensor[(16, 8, 10), uint64] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %119 = cast(%var_4794, dtype="float32") /* ty=Tensor[(16, 8, 10), float32] */;
  %120 = cast(meta[relay.Constant][9] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %121 = reshape(%120, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), float64] */;
  %122 = @func_978(%121) /* ty=(Tensor[(8), uint8], Tensor[(14, 5, 10), bool], Tensor[(4, 8, 2), int64], Tensor[(14, 13, 8), float32], Tensor[(4, 364), float32], Tensor[(4, 8, 2), float64]) */;
  %123 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %124 = add(%117, %118) /* ty=Tensor[(16, 8, 10), uint64] */;
  %125 = acosh(%119) /* ty=Tensor[(16, 8, 10), float32] */;
  %126 = %122.4;
  %127 = %123.0;
  (%124, %125, %126, meta[relay.Constant][9] /* ty=Tensor[(64), float64] */, %127)
}

def @func_4892() -> (Tensor[(10, 13, 13), float32],) {
  %128 = @func_4867() /* ty=Tensor[(10, 13, 13), float32] */;
  (%128,)
}

def @func_5341() -> Tensor[(10, 13, 13), float32] {
  %129 = @func_5000() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %129.0
}

def @func_1698(%var_1644: Tensor[(16, 16, 6), float32], %var_1645: Tensor[(16, 16, 6), float32], %var_1650: Tensor[(960), float64], %var_1651: Tensor[(8), uint8], %var_1665: Tensor[(4, 288), float64], %var_1666: Tensor[(98), float64], %var_1689: Tensor[(16, 16, 6), float32]) -> (Tensor[(16, 16, 6), bool], Tensor[(960), float64], Tensor[(12, 6, 16), float64], Tensor[(4, 288), float64], Tensor[(98), float64], Tensor[(14, 13, 8), int32], Tensor[(14, 13, 8), float32], Tensor[(16, 16, 6), bool]) {
  %130 = cast(%var_1645, dtype="bool") /* ty=Tensor[(16, 16, 6), bool] */;
  %131 = shape_of(%var_1644, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%var_1644, dtype="bool") /* ty=Tensor[(16, 16, 6), bool] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %134 = cast(%var_1665, dtype="float64") /* ty=Tensor[(4, 288), float64] */;
  %135 = cast(%var_1666, dtype="float64") /* ty=Tensor[(98), float64] */;
  %136 = reshape(%134, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float64] */;
  %137 = reshape(%135, newshape=[98]) /* ty=Tensor[(98), float64] */;
  %138 = @func_1462(%136, %137) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(14, 7, 12), bool], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(120, 8), float64], Tensor[(14, 5, 10), bool], Tensor[(1176, 8), int32]) */;
  %139 = cast(%var_1650, dtype="float64") /* ty=Tensor[(960), float64] */;
  %140 = cast(%var_1651, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %141 = reshape(%139, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float64] */;
  %142 = reshape(%140, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %143 = @func_835(%141, %142) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) */;
  %144 = %143.4;
  %145 = cast(%144, dtype="int32") /* ty=Tensor[(14, 13, 8), int32] */;
  %146 = cast(%var_1651, dtype="int32") /* ty=Tensor[(8), int32] */;
  %147 = cast(%var_1650, dtype="float64") /* ty=Tensor[(960), float64] */;
  %148 = cast(%var_1651, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %149 = reshape(%147, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float64] */;
  %150 = reshape(%148, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %151 = @func_835(%149, %150) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) */;
  %152 = cast(%var_1689, dtype="bool") /* ty=Tensor[(16, 16, 6), bool] */;
  %153 = shape_of(%var_1645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(%var_1645, dtype="bool") /* ty=Tensor[(16, 16, 6), bool] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %156 = greater(%132, %133) /* ty=Tensor[(16, 16, 6), bool] */;
  %157 = %138.0;
  %158 = add(%145, %146) /* ty=Tensor[(14, 13, 8), int32] */;
  %159 = %151.3;
  %160 = equal(%154, %155) /* ty=Tensor[(16, 16, 6), bool] */;
  (%156, %var_1650, %157, %var_1665, %var_1666, %158, %159, %160)
}

def @func_6447(%var_6390: bool, %var_6419: Tensor[(858), int64]) -> (Tensor[(2240), bool], Tensor[(10, 13, 13), float32], Tensor[(7, 12, 11), float64], Tensor[(924), int32], Tensor[(6, 13, 11), bool], Tensor[(858), int64], Tensor[(10, 14, 16), float64], Tensor[(8), uint8], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(10, 13, 13), float32]) {
  %161 = @func_5341() /* ty=Tensor[(10, 13, 13), float32] */;
  %162 = cast(%161, dtype="float32") /* ty=Tensor[(10, 13, 13), float32] */;
  %163 = cast(%var_6390, dtype="float32") /* ty=float32 */;
  %164 = cast(meta[relay.Constant][11] /* ty=Tensor[(924), int32] */, dtype="int32") /* ty=Tensor[(924), int32] */;
  %165 = cast(meta[relay.Constant][11] /* ty=Tensor[(924), int32] */, dtype="int32") /* ty=Tensor[(924), int32] */;
  %166 = reshape(%164, newshape=[7, 12, 11]) /* ty=Tensor[(7, 12, 11), int32] */;
  %167 = reshape(%165, newshape=[7, 12, 11]) /* ty=Tensor[(7, 12, 11), int32] */;
  %168 = cast(%var_6419, dtype="int64") /* ty=Tensor[(858), int64] */;
  %169 = reshape(%168, newshape=[6, 13, 11]) /* ty=Tensor[(6, 13, 11), int64] */;
  %170 = cast(%var_6390, dtype="bool") /* ty=bool */;
  %171 = cast(meta[relay.Constant][10] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %172 = reshape(%170, newshape=[]) /* ty=bool */;
  %173 = reshape(%171, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), bool] */;
  %174 = @func_3223(%172, %173) /* ty=(Tensor[(10, 14, 16), uint32], Tensor[(10, 14, 16), float32]) */;
  %175 = %174.1;
  %176 = cast(%175, dtype="float64") /* ty=Tensor[(10, 14, 16), float64] */;
  %177 = cast(meta[relay.Constant][12] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %178 = cast(meta[relay.Constant][12] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %179 = cast(meta[relay.Constant][13] /* ty=Tensor[(8), uint8] */, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %180 = reshape(%177, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %181 = reshape(%178, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %182 = reshape(%179, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %183 = @func_666(%180, %181, %182) /* ty=(Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) */;
  %184 = @func_5861() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %185 = floor_divide(%162, %163) /* ty=Tensor[(10, 13, 13), float32] */;
  %186 = @func_3375(%166, %167) /* ty=Tensor[(7, 12, 11), float64] */;
  %187 = @func_4152(%169) /* ty=Tensor[(6, 13, 11), bool] */;
  %188 = asin(%176) /* ty=Tensor[(10, 14, 16), float64] */;
  %189 = %183.2;
  %190 = %184.0;
  (meta[relay.Constant][10] /* ty=Tensor[(2240), bool] */, %185, %186, meta[relay.Constant][11] /* ty=Tensor[(924), int32] */, %187, %var_6419, %188, %189, meta[relay.Constant][12] /* ty=Tensor[(1456), float32] */, meta[relay.Constant][13] /* ty=Tensor[(8), uint8] */, %190)
}

def @func_6585(%var_6532: Tensor[(2730), float32], %var_6533: Tensor[(4, 2), uint8], %var_6539: Tensor[(1152), float64], %var_6578: bool) -> (Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float64], Tensor[(2730), float32], Tensor[(4, 2), uint8], Tensor[(2, 768), float32], Tensor[(1152), float64], Tensor[(14, 13, 8), float32], Tensor[(1456), float32], Tensor[(8, 144), float64], Tensor[(24, 48), float64], Tensor[(240), float64], bool, Tensor[(2240), bool], Tensor[(896), bool]) {
  %191 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %192 = cast(%var_6532, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %193 = cast(%var_6533, dtype="uint8") /* ty=Tensor[(4, 2), uint8] */;
  %194 = reshape(%192, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %195 = reshape(%193, newshape=[1, 8]) /* ty=Tensor[(1, 8), uint8] */;
  %196 = @func_5038(%194, %195) /* ty=(Tensor[(10, 13, 13), float64], Tensor[(14, 15, 13), float32], Tensor[(2730), float32], Tensor[(14, 13, 8), float32], Tensor[(1456), float32], Tensor[(1, 8), uint8]) */;
  %197 = cast(meta[relay.Constant][15] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %198 = cast(meta[relay.Constant][15] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %199 = cast(%var_6533, dtype="uint8") /* ty=Tensor[(4, 2), uint8] */;
  %200 = reshape(%197, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %201 = reshape(%198, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %202 = reshape(%199, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %203 = @func_666(%200, %201, %202) /* ty=(Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) */;
  %204 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 768), float32] */, dtype="float32") /* ty=Tensor[(2, 768), float32] */;
  %205 = cast(%var_6539, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %206 = reshape(%204, newshape=[1536]) /* ty=Tensor[(1536), float32] */;
  %207 = reshape(%205, newshape=[8, 144]) /* ty=Tensor[(8, 144), float64] */;
  %208 = @func_4855(%206, %207) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(14, 13, 8), int32], Tensor[(1536), float32], Tensor[(960), float64], Tensor[(8), uint8], Tensor[(8, 144), float64], Tensor[(98), float64]) */;
  %209 = %208.5;
  %210 = cast(%209, dtype="float64") /* ty=Tensor[(8, 144), float64] */;
  %211 = sinh(%210) /* ty=Tensor[(8, 144), float64] */;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(8, 144), float64] */;
  %213 = cast(meta[relay.Constant][16] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %214 = cast(%var_6578, dtype="bool") /* ty=bool */;
  %215 = cast(meta[relay.Constant][17] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %216 = cast(meta[relay.Constant][18] /* ty=Tensor[(896), bool] */, dtype="bool") /* ty=Tensor[(896), bool] */;
  %217 = reshape(%213, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %218 = reshape(%214, newshape=[]) /* ty=bool */;
  %219 = reshape(%215, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %220 = reshape(%216, newshape=[896]) /* ty=Tensor[(896), bool] */;
  %221 = @func_6294(%217, %218, %219, %220) /* ty=(Tensor[(14, 13, 8), int32], Tensor[(98), float64], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float64], Tensor[(10, 13, 13), bool], Tensor[(4, 2), uint8], Tensor[(8, 30), float64], Tensor[(240), float64], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32], Tensor[(8, 1536), int8], Tensor[(10, 14, 16), float32], Tensor[(2240), bool], Tensor[(480, 2), int8], Tensor[(24, 48), float64], Tensor[(10, 14, 16), float32], Tensor[(105), bool], Tensor[(224), bool], Tensor[(896), bool], Tensor[(98), float64], Tensor[(14, 7, 12), bool]) */;
  %222 = %191.0;
  %223 = @func_5341() /* ty=Tensor[(10, 13, 13), float32] */;
  %224 = %196.0;
  %225 = %203.3;
  %226 = sin(%212) /* ty=Tensor[(8, 144), float64] */;
  %227 = %221.14;
  (%222, %223, %224, %var_6532, %var_6533, meta[relay.Constant][14] /* ty=Tensor[(2, 768), float32] */, %var_6539, %225, meta[relay.Constant][15] /* ty=Tensor[(1456), float32] */, %226, %227, meta[relay.Constant][16] /* ty=Tensor[(240), float64] */, %var_6578, meta[relay.Constant][17] /* ty=Tensor[(2240), bool] */, meta[relay.Constant][18] /* ty=Tensor[(896), bool] */)
}

def @main(%var_6801: Tensor[(9, 11, 1), float32]) -> (Tensor[(9, 11, 1), bool], Tensor[(9, 11, 1), float64]) {
  %228 = cast(3.43007f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %229 = cast(%var_6801, dtype="bool") /* ty=Tensor[(9, 11, 1), bool] */;
  %230 = cast(%var_6801, dtype="float64") /* ty=Tensor[(9, 11, 1), float64] */;
  %231 = greater(%228, %229) /* ty=Tensor[(9, 11, 1), bool] */;
  %232 = atan(%230) /* ty=Tensor[(9, 11, 1), float64] */;
  (%231, %232)
}

def @func_6294(%var_6179: Tensor[(240), float64], %var_6211: bool, %var_6212: Tensor[(2240), bool], %var_6241: Tensor[(896), bool]) -> (Tensor[(14, 13, 8), int32], Tensor[(98), float64], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float64], Tensor[(10, 13, 13), bool], Tensor[(4, 2), uint8], Tensor[(8, 30), float64], Tensor[(240), float64], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32], Tensor[(8, 1536), int8], Tensor[(10, 14, 16), float32], Tensor[(2240), bool], Tensor[(480, 2), int8], Tensor[(24, 48), float64], Tensor[(10, 14, 16), float32], Tensor[(105), bool], Tensor[(224), bool], Tensor[(896), bool], Tensor[(98), float64], Tensor[(14, 7, 12), bool]) {
  %233 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 1536), float32] */, dtype="float32") /* ty=Tensor[(1, 1536), float32] */;
  %234 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 1536), float32] */, dtype="float32") /* ty=Tensor[(1, 1536), float32] */;
  %235 = cast(meta[relay.Constant][20] /* ty=Tensor[(480, 2), float64] */, dtype="float64") /* ty=Tensor[(480, 2), float64] */;
  %236 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 1), uint8] */, dtype="uint8") /* ty=Tensor[(8, 1), uint8] */;
  %237 = cast(meta[relay.Constant][22] /* ty=Tensor[(24, 48), float64] */, dtype="float64") /* ty=Tensor[(24, 48), float64] */;
  %238 = cast(meta[relay.Constant][23] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
  %239 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 1536), float32] */, dtype="float32") /* ty=Tensor[(1, 1536), float32] */;
  %240 = reshape(%233, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float32] */;
  %241 = reshape(%234, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float32] */;
  %242 = reshape(%235, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %243 = reshape(%236, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %244 = reshape(%237, newshape=[4, 288]) /* ty=Tensor[(4, 288), float64] */;
  %245 = reshape(%238, newshape=[98]) /* ty=Tensor[(98), float64] */;
  %246 = reshape(%239, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float32] */;
  %247 = @func_1698(%240, %241, %242, %243, %244, %245, %246) /* ty=(Tensor[(16, 16, 6), bool], Tensor[(960), float64], Tensor[(12, 6, 16), float64], Tensor[(4, 288), float64], Tensor[(98), float64], Tensor[(14, 13, 8), int32], Tensor[(14, 13, 8), float32], Tensor[(16, 16, 6), bool]) */;
  %248 = @func_5928() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %249 = @func_5114() /* ty=(Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32]) */;
  %250 = %249.0;
  %251 = cast(%250, dtype="float32") /* ty=Tensor[(10, 13, 13), float32] */;
  %252 = acos(%251) /* ty=Tensor[(10, 13, 13), float32] */;
  %253 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 13, 13), float32] */, dtype="float64") /* ty=Tensor[(10, 13, 13), float64] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%252, dtype="float64") /* ty=Tensor[(10, 13, 13), float64] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %257 = cast(%252, dtype="bool") /* ty=Tensor[(10, 13, 13), bool] */;
  %258 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(10, 13, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 13, 13), float32] */, dtype="bool") /* ty=Tensor[(10, 13, 13), bool] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %261 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 1), uint8] */, dtype="uint8") /* ty=Tensor[(8, 1), uint8] */;
  %262 = reshape(%261, newshape=[4, 2]) /* ty=Tensor[(4, 2), uint8] */;
  %263 = @func_4634(%262) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(4, 2), uint8]) */;
  %264 = cast(%var_6179, dtype="float64") /* ty=Tensor[(240), float64] */;
  %265 = reshape(%264, newshape=[8, 30]) /* ty=Tensor[(8, 30), float64] */;
  %266 = @func_4739(%265) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(8, 9, 3), int64], Tensor[(216), uint16], Tensor[(15, 4, 4), int32], Tensor[(8, 30), float64]) */;
  %267 = @func_6023() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %268 = @func_5000() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %269 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 1536), float32] */, dtype="int8") /* ty=Tensor[(1, 1536), int8] */;
  %270 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 1), uint8] */, dtype="int8") /* ty=Tensor[(8, 1), int8] */;
  %271 = cast(%var_6211, dtype="bool") /* ty=bool */;
  %272 = cast(%var_6212, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %273 = reshape(%271, newshape=[]) /* ty=bool */;
  %274 = reshape(%272, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), bool] */;
  %275 = @func_3223(%273, %274) /* ty=(Tensor[(10, 14, 16), uint32], Tensor[(10, 14, 16), float32]) */;
  %276 = cast(meta[relay.Constant][20] /* ty=Tensor[(480, 2), float64] */, dtype="int8") /* ty=Tensor[(480, 2), int8] */;
  %277 = cast(%var_6211, dtype="int8") /* ty=int8 */;
  %278 = cast(meta[relay.Constant][22] /* ty=Tensor[(24, 48), float64] */, dtype="float64") /* ty=Tensor[(24, 48), float64] */;
  %279 = cast(%var_6211, dtype="bool") /* ty=bool */;
  %280 = %275.1;
  %281 = cast(%280, dtype="bool") /* ty=Tensor[(10, 14, 16), bool] */;
  %282 = reshape(%279, newshape=[]) /* ty=bool */;
  %283 = reshape(%281, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), bool] */;
  %284 = @func_3223(%282, %283) /* ty=(Tensor[(10, 14, 16), uint32], Tensor[(10, 14, 16), float32]) */;
  %285 = cast(meta[relay.Constant][25] /* ty=Tensor[(224), bool] */, dtype="bool") /* ty=Tensor[(224), bool] */;
  %286 = cast(%var_6241, dtype="bool") /* ty=Tensor[(896), bool] */;
  %287 = reshape(%285, newshape=[224]) /* ty=Tensor[(224), bool] */;
  %288 = reshape(%286, newshape=[896]) /* ty=Tensor[(896), bool] */;
  %289 = @func_5975(%287, %288) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(105), bool], Tensor[(1152), float64], Tensor[(224), bool], Tensor[(896), bool]) */;
  %290 = cast(meta[relay.Constant][23] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
  %291 = reshape(%290, newshape=[98]) /* ty=Tensor[(98), float64] */;
  %292 = @func_6005(%291) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(98), float64], Tensor[(1176), float64]) */;
  %293 = cast(meta[relay.Constant][22] /* ty=Tensor[(24, 48), float64] */, dtype="float64") /* ty=Tensor[(24, 48), float64] */;
  %294 = cast(meta[relay.Constant][23] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
  %295 = reshape(%293, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float64] */;
  %296 = reshape(%294, newshape=[98]) /* ty=Tensor[(98), float64] */;
  %297 = @func_1462(%295, %296) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(14, 7, 12), bool], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(120, 8), float64], Tensor[(14, 5, 10), bool], Tensor[(1176, 8), int32]) */;
  %298 = %247.5;
  %299 = %248.0;
  %300 = mod(%255, %256) /* ty=Tensor[(10, 13, 13), float64] */;
  %301 = greater(%259, %260) /* ty=Tensor[(10, 13, 13), bool] */;
  %302 = %263.2;
  %303 = %266.4;
  %304 = %267.0;
  %305 = %268.0;
  %306 = left_shift(%269, %270) /* ty=Tensor[(8, 1536), int8] */;
  %307 = left_shift(%276, %277) /* ty=Tensor[(480, 2), int8] */;
  %308 = sigmoid(%278) /* ty=Tensor[(24, 48), float64] */;
  %309 = %284.1;
  %310 = %289.1;
  %311 = %292.2;
  %312 = %297.1;
  (%298, meta[relay.Constant][23] /* ty=Tensor[(98), float64] */, %299, %300, %301, %302, %303, %var_6179, %304, %305, %306, %280, %var_6212, %307, %308, %309, %310, meta[relay.Constant][25] /* ty=Tensor[(224), bool] */, %var_6241, %311, %312)
}

def @func_5000() -> (Tensor[(10, 13, 13), float32],) {
  %313 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %314 = %313.0;
  (%314,)
}

def @func_6493(%var_6476: Tensor[(216), uint16], %var_6480: Tensor[(8, 9, 3), int64], %var_6487: Tensor[(1456), float32], %var_6488: Tensor[(8), uint8]) -> (Tensor[(10, 13, 13), float32], Tensor[(216), uint16], Tensor[(8, 9, 3), int8], Tensor[(14, 13, 8), int16], Tensor[(1456), float32], Tensor[(8), uint8]) {
  %315 = @func_5928() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %316 = cast(%var_6476, dtype="uint16") /* ty=Tensor[(216), uint16] */;
  %317 = cast(%var_6476, dtype="uint16") /* ty=Tensor[(216), uint16] */;
  %318 = reshape(%316, newshape=[8, 9, 3]) /* ty=Tensor[(8, 9, 3), uint16] */;
  %319 = reshape(%317, newshape=[8, 9, 3]) /* ty=Tensor[(8, 9, 3), uint16] */;
  %320 = @func_1514(%318, %319) /* ty=Tensor[(8, 9, 3), int64] */;
  %321 = cast(%var_6480, dtype="int8") /* ty=Tensor[(8, 9, 3), int8] */;
  %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%320, dtype="int8") /* ty=Tensor[(8, 9, 3), int8] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %325 = cast(%var_6487, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %326 = cast(%var_6487, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %327 = cast(%var_6488, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %328 = reshape(%325, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %329 = reshape(%326, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %330 = reshape(%327, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %331 = @func_666(%328, %329, %330) /* ty=(Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) */;
  %332 = %315.0;
  %333 = bitwise_and(%323, %324) /* ty=Tensor[(8, 9, 3), int8] */;
  %334 = %331.0;
  (%332, %var_6476, %333, %334, %var_6487, %var_6488)
}

def @func_978(%var_962: Tensor[(4, 8, 2), float64]) -> (Tensor[(8), uint8], Tensor[(14, 5, 10), bool], Tensor[(4, 8, 2), int64], Tensor[(14, 13, 8), float32], Tensor[(4, 364), float32], Tensor[(4, 8, 2), float64]) {
  %335 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 10), float64] */;
  %336 = sinh(%335) /* ty=Tensor[(14, 5, 10), float64] */;
  %337 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 5, 10), float64] */, dtype="bool") /* ty=Tensor[(14, 5, 10), bool] */;
  %338 = shape_of(%336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%336, dtype="bool") /* ty=Tensor[(14, 5, 10), bool] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %341 = less_equal(%339, %340) /* ty=Tensor[(14, 5, 10), bool] */;
  %342 = cast(%336, dtype="bool") /* ty=Tensor[(14, 5, 10), bool] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="bool") /* ty=Tensor[(14, 5, 10), bool] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %346 = cast(meta[relay.Constant][26] /* ty=Tensor[(8), uint8] */, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %347 = reshape(%346, newshape=[4, 1, 2]) /* ty=Tensor[(4, 1, 2), uint8] */;
  %348 = @func_162(%347) /* ty=(Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) */;
  %349 = %348.0;
  %350 = cast(%var_962, dtype="int64") /* ty=Tensor[(4, 8, 2), int64] */;
  %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%349, dtype="int64") /* ty=Tensor[(4, 8, 2), int64] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %354 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 364), float32] */, dtype="float32") /* ty=Tensor[(4, 364), float32] */;
  %355 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 364), float32] */, dtype="float32") /* ty=Tensor[(4, 364), float32] */;
  %356 = cast(meta[relay.Constant][26] /* ty=Tensor[(8), uint8] */, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %357 = reshape(%354, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %358 = reshape(%355, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %359 = reshape(%356, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %360 = @func_666(%357, %358, %359) /* ty=(Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) */;
  %361 = cast(meta[relay.Constant][26] /* ty=Tensor[(8), uint8] */, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %362 = reshape(%361, newshape=[4, 1, 2]) /* ty=Tensor[(4, 1, 2), uint8] */;
  %363 = @func_162(%362) /* ty=(Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) */;
  %364 = logical_or(%344, %345) /* ty=Tensor[(14, 5, 10), bool] */;
  %365 = logical_xor(%352, %353) /* ty=Tensor[(4, 8, 2), int64] */;
  %366 = %360.3;
  %367 = %363.1;
  (meta[relay.Constant][26] /* ty=Tensor[(8), uint8] */, %364, %365, %366, meta[relay.Constant][28] /* ty=Tensor[(4, 364), float32] */, %367)
}

def @func_1041(%var_1012: Tensor[(14, 7, 1), float64], %var_1013: Tensor[(14, 7, 12), float64]) -> (Tensor[(14, 7, 12), bool], Tensor[(4, 8, 2), float64], Tensor[(960), float64], Tensor[(8), uint8], Tensor[(4, 8, 2), float64], Tensor[(14, 13, 8), float32]) {
  %368 = cast(%var_1012, dtype="bool") /* ty=Tensor[(14, 7, 1), bool] */;
  %369 = cast(%var_1013, dtype="bool") /* ty=Tensor[(14, 7, 12), bool] */;
  %370 = cast(meta[relay.Constant][29] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %371 = cast(meta[relay.Constant][30] /* ty=Tensor[(8), uint8] */, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %372 = reshape(%370, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float64] */;
  %373 = reshape(%371, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %374 = @func_835(%372, %373) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) */;
  %375 = cast(meta[relay.Constant][30] /* ty=Tensor[(8), uint8] */, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %376 = reshape(%375, newshape=[4, 1, 2]) /* ty=Tensor[(4, 1, 2), uint8] */;
  %377 = @func_162(%376) /* ty=(Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) */;
  %378 = %377.1;
  %379 = cast(%378, dtype="float64") /* ty=Tensor[(4, 8, 2), float64] */;
  %380 = reshape(%379, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), float64] */;
  %381 = @func_978(%380) /* ty=(Tensor[(8), uint8], Tensor[(14, 5, 10), bool], Tensor[(4, 8, 2), int64], Tensor[(14, 13, 8), float32], Tensor[(4, 364), float32], Tensor[(4, 8, 2), float64]) */;
  %382 = not_equal(%368, %369) /* ty=Tensor[(14, 7, 12), bool] */;
  %383 = %374.5;
  %384 = %381.3;
  (%382, %383, meta[relay.Constant][29] /* ty=Tensor[(960), float64] */, meta[relay.Constant][30] /* ty=Tensor[(8), uint8] */, %378, %384)
}

def @func_3223(%var_3174: bool, %var_3175: Tensor[(10, 14, 16), bool]) -> (Tensor[(10, 14, 16), uint32], Tensor[(10, 14, 16), float32]) {
  %385 = cast(%var_3174, dtype="bool") /* ty=bool */;
  %386 = cast(%var_3175, dtype="bool") /* ty=Tensor[(10, 14, 16), bool] */;
  %387 = logical_and(%385, %386) /* ty=Tensor[(10, 14, 16), bool] */;
  %388 = cast(%var_3175, dtype="uint32") /* ty=Tensor[(10, 14, 16), uint32] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="uint32") /* ty=Tensor[(10, 14, 16), uint32] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %392 = cast(%387, dtype="float32") /* ty=Tensor[(10, 14, 16), float32] */;
  %393 = asinh(%392) /* ty=Tensor[(10, 14, 16), float32] */;
  %394 = cast(%393, dtype="float64") /* ty=Tensor[(10, 14, 16), float64] */;
  %395 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(%387, dtype="float64") /* ty=Tensor[(10, 14, 16), float64] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %398 = floor_divide(%396, %397) /* ty=Tensor[(10, 14, 16), float64] */;
  %399 = cast(%398, dtype="float32") /* ty=Tensor[(10, 14, 16), float32] */;
  %400 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%393, dtype="float32") /* ty=Tensor[(10, 14, 16), float32] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %403 = bitwise_or(%390, %391) /* ty=Tensor[(10, 14, 16), uint32] */;
  %404 = floor_mod(%401, %402) /* ty=Tensor[(10, 14, 16), float32] */;
  (%403, %404)
}

def @func_5975(%var_5970: Tensor[(224), bool], %var_5971: Tensor[(896), bool]) -> (Tensor[(10, 13, 13), float32], Tensor[(105), bool], Tensor[(1152), float64], Tensor[(224), bool], Tensor[(896), bool]) {
  %405 = @func_5480() /* ty=(Tensor[(10, 13, 13), float32], Tensor[(7, 5, 3), bool], Tensor[(105), bool]) */;
  %406 = cast(%var_5970, dtype="bool") /* ty=Tensor[(224), bool] */;
  %407 = cast(%var_5971, dtype="bool") /* ty=Tensor[(896), bool] */;
  %408 = cast(%var_5971, dtype="bool") /* ty=Tensor[(896), bool] */;
  %409 = cast(%var_5971, dtype="float64") /* ty=Tensor[(896), float64] */;
  %410 = reshape(%406, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), bool] */;
  %411 = reshape(%407, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), bool] */;
  %412 = reshape(%408, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), bool] */;
  %413 = reshape(%409, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float64] */;
  %414 = @func_2146(%410, %411, %412, %413) /* ty=(Tensor[(14, 4, 16), int32], Tensor[(14, 4, 16), int8], Tensor[(4, 8, 2), float64], Tensor[(1152), float64], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(4, 2), uint8], Tensor[(14, 4, 16), float64]) */;
  %415 = @func_4867() /* ty=Tensor[(10, 13, 13), float32] */;
  %416 = %405.2;
  %417 = %414.3;
  (%415, %416, %417, %var_5970, %var_5971)
}

def @func_5833(%var_5784: Tensor[(3, 10, 16), float32], %var_5785: Tensor[(3, 10, 16), float32]) -> (Tensor[(3, 10, 16), bool], Tensor[(3, 10, 16), float64], Tensor[(15, 4, 4), int32], Tensor[(240), float64]) {
  %418 = cast(%var_5785, dtype="bool") /* ty=Tensor[(3, 10, 16), bool] */;
  %419 = shape_of(%var_5784, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%var_5784, dtype="bool") /* ty=Tensor[(3, 10, 16), bool] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %422 = cast(%var_5785, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %423 = cast(meta[relay.Constant][31] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %424 = reshape(%423, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %425 = @func_2539(%424) /* ty=(Tensor[(16, 7, 2), uint16], Tensor[(15, 4, 4), int32], Tensor[(240), float64], Tensor[(15, 4, 4), int32]) */;
  %426 = equal(%420, %421) /* ty=Tensor[(3, 10, 16), bool] */;
  %427 = atanh(%422) /* ty=Tensor[(3, 10, 16), float64] */;
  %428 = %425.1;
  (%426, %427, %428, meta[relay.Constant][31] /* ty=Tensor[(240), float64] */)
}

def @func_4634(%var_4610: Tensor[(4, 2), uint8]) -> (Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(4, 2), uint8]) {
  %429 = cast(%var_4610, dtype="uint8") /* ty=Tensor[(4, 2), uint8] */;
  %430 = reshape(%429, newshape=[4, 1, 2]) /* ty=Tensor[(4, 1, 2), uint8] */;
  %431 = @func_162(%430) /* ty=(Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) */;
  %432 = @func_4367() /* ty=Tensor[(10, 13, 13), float32] */;
  %433 = %431.0;
  (%432, %433, %var_4610)
}

def @func_1462(%var_1385: Tensor[(12, 6, 16), float64], %var_1410: Tensor[(98), float64]) -> (Tensor[(12, 6, 16), float64], Tensor[(14, 7, 12), bool], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(120, 8), float64], Tensor[(14, 5, 10), bool], Tensor[(1176, 8), int32]) {
  %434 = cast(%var_1385, dtype="float64") /* ty=Tensor[(12, 6, 16), float64] */;
  %435 = cast(%var_1410, dtype="float64") /* ty=Tensor[(98), float64] */;
  %436 = cast(meta[relay.Constant][32] /* ty=Tensor[(1176, 1), float64] */, dtype="float64") /* ty=Tensor[(1176, 1), float64] */;
  %437 = reshape(%435, newshape=[14, 7, 1]) /* ty=Tensor[(14, 7, 1), float64] */;
  %438 = reshape(%436, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
  %439 = @func_1041(%437, %438) /* ty=(Tensor[(14, 7, 12), bool], Tensor[(4, 8, 2), float64], Tensor[(960), float64], Tensor[(8), uint8], Tensor[(4, 8, 2), float64], Tensor[(14, 13, 8), float32]) */;
  %440 = cast(meta[relay.Constant][33] /* ty=Tensor[(120, 8), float64] */, dtype="float64") /* ty=Tensor[(120, 8), float64] */;
  %441 = cast(meta[relay.Constant][34] /* ty=Tensor[(8), uint8] */, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %442 = reshape(%440, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float64] */;
  %443 = reshape(%441, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %444 = @func_835(%442, %443) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) */;
  %445 = %444.5;
  %446 = cast(%445, dtype="float64") /* ty=Tensor[(4, 8, 2), float64] */;
  %447 = reshape(%446, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), float64] */;
  %448 = @func_978(%447) /* ty=(Tensor[(8), uint8], Tensor[(14, 5, 10), bool], Tensor[(4, 8, 2), int64], Tensor[(14, 13, 8), float32], Tensor[(4, 364), float32], Tensor[(4, 8, 2), float64]) */;
  %449 = cast(meta[relay.Constant][32] /* ty=Tensor[(1176, 1), float64] */, dtype="int32") /* ty=Tensor[(1176, 1), int32] */;
  %450 = cast(meta[relay.Constant][34] /* ty=Tensor[(8), uint8] */, dtype="int32") /* ty=Tensor[(8), int32] */;
  %451 = sqrt(%434) /* ty=Tensor[(12, 6, 16), float64] */;
  %452 = %439.0;
  %453 = %448.1;
  %454 = maximum(%449, %450) /* ty=Tensor[(1176, 8), int32] */;
  (%451, %452, %var_1410, %445, meta[relay.Constant][33] /* ty=Tensor[(120, 8), float64] */, %453, %454)
}

def @func_2995(%var_2959: Tensor[(11, 16, 12), float32]) -> Tensor[(11, 16, 12), uint32] {
  %455 = cast(%var_2959, dtype="float32") /* ty=Tensor[(11, 16, 12), float32] */;
  %456 = cos(%455) /* ty=Tensor[(11, 16, 12), float32] */;
  %457 = cast(%456, dtype="float64") /* ty=Tensor[(11, 16, 12), float64] */;
  %458 = erf(%457) /* ty=Tensor[(11, 16, 12), float64] */;
  %459 = cast(%458, dtype="float32") /* ty=Tensor[(11, 16, 12), float32] */;
  %460 = shape_of(%var_2959, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%var_2959, dtype="float32") /* ty=Tensor[(11, 16, 12), float32] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %463 = floor_mod(%461, %462) /* ty=Tensor[(11, 16, 12), float32] */;
  %464 = cast(%458, dtype="uint32") /* ty=Tensor[(11, 16, 12), uint32] */;
  %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%463, dtype="uint32") /* ty=Tensor[(11, 16, 12), uint32] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  multiply(%466, %467) /* ty=Tensor[(11, 16, 12), uint32] */
}

def @func_3375(%var_3367: Tensor[(7, 12, 11), int32], %var_3368: Tensor[(7, 12, 11), int32]) -> Tensor[(7, 12, 11), float64] {
  %468 = cast(%var_3368, dtype="int32") /* ty=Tensor[(7, 12, 11), int32] */;
  %469 = shape_of(%var_3367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%var_3367, dtype="int32") /* ty=Tensor[(7, 12, 11), int32] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %472 = left_shift(%470, %471) /* ty=Tensor[(7, 12, 11), int32] */;
  %473 = cast(%472, dtype="float64") /* ty=Tensor[(7, 12, 11), float64] */;
  sinh(%473) /* ty=Tensor[(7, 12, 11), float64] */
}

def @func_5038(%var_5029: Tensor[(2730), float32], %var_5036: Tensor[(1, 8), uint8]) -> (Tensor[(10, 13, 13), float64], Tensor[(14, 15, 13), float32], Tensor[(2730), float32], Tensor[(14, 13, 8), float32], Tensor[(1456), float32], Tensor[(1, 8), uint8]) {
  %474 = @func_4867() /* ty=Tensor[(10, 13, 13), float32] */;
  %475 = cast(%474, dtype="float64") /* ty=Tensor[(10, 13, 13), float64] */;
  %476 = cast(%var_5029, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %477 = reshape(%476, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
  %478 = @func_1576(%477) /* ty=(Tensor[(14, 15, 13), float32],) */;
  %479 = cast(meta[relay.Constant][35] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %480 = cast(meta[relay.Constant][35] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %481 = cast(%var_5036, dtype="uint8") /* ty=Tensor[(1, 8), uint8] */;
  %482 = reshape(%479, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %483 = reshape(%480, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %484 = reshape(%481, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %485 = @func_666(%482, %483, %484) /* ty=(Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) */;
  %486 = sin(%475) /* ty=Tensor[(10, 13, 13), float64] */;
  %487 = %478.0;
  %488 = %485.3;
  (%486, %487, %var_5029, %488, meta[relay.Constant][35] /* ty=Tensor[(1456), float32] */, %var_5036)
}

def @func_4293() -> (Tensor[(10, 13, 13), float32],) {
  %489 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(10, 13, 13), float32] */;
  %490 = asin(%489) /* ty=Tensor[(10, 13, 13), float32] */;
  (%490,)
}

def @func_1514(%var_1490: Tensor[(8, 9, 3), uint16], %var_1491: Tensor[(8, 9, 3), uint16]) -> Tensor[(8, 9, 3), int64] {
  %491 = cast(%var_1491, dtype="uint16") /* ty=Tensor[(8, 9, 3), uint16] */;
  %492 = shape_of(%var_1490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%var_1490, dtype="uint16") /* ty=Tensor[(8, 9, 3), uint16] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %495 = left_shift(%493, %494) /* ty=Tensor[(8, 9, 3), uint16] */;
  %496 = cast(%495, dtype="float64") /* ty=Tensor[(8, 9, 3), float64] */;
  %497 = rsqrt(%496) /* ty=Tensor[(8, 9, 3), float64] */;
  %498 = cast(%var_1490, dtype="int64") /* ty=Tensor[(8, 9, 3), int64] */;
  %499 = shape_of(%497, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%497, dtype="int64") /* ty=Tensor[(8, 9, 3), int64] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  add(%500, %501) /* ty=Tensor[(8, 9, 3), int64] */
}

def @func_666(%var_639: Tensor[(14, 13, 8), float32], %var_640: Tensor[(14, 13, 8), float32], %var_651: Tensor[(8), uint8]) -> (Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) {
  %502 = cast(%var_640, dtype="float32") /* ty=Tensor[(14, 13, 8), float32] */;
  %503 = shape_of(%var_639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%var_639, dtype="float32") /* ty=Tensor[(14, 13, 8), float32] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %506 = mod(%504, %505) /* ty=Tensor[(14, 13, 8), float32] */;
  %507 = cast(%var_639, dtype="int16") /* ty=Tensor[(14, 13, 8), int16] */;
  %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%506, dtype="int16") /* ty=Tensor[(14, 13, 8), int16] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %511 = cast(%var_651, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %512 = reshape(%511, newshape=[4, 1, 2]) /* ty=Tensor[(4, 1, 2), uint8] */;
  %513 = @func_162(%512) /* ty=(Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) */;
  %514 = cast(%506, dtype="float32") /* ty=Tensor[(14, 13, 8), float32] */;
  %515 = bitwise_xor(%509, %510) /* ty=Tensor[(14, 13, 8), int16] */;
  %516 = %513.0;
  %517 = sqrt(%514) /* ty=Tensor[(14, 13, 8), float32] */;
  (%515, %516, %var_651, %517)
}

def @func_6745() -> (Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32]) {
  %518 = @func_6023() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %519 = @func_5000() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %520 = %518.0;
  %521 = %519.0;
  (%520, %521)
}

def @func_6005(%var_5994: Tensor[(98), float64]) -> (Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(98), float64], Tensor[(1176), float64]) {
  %522 = @func_4892() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %523 = cast(%var_5994, dtype="float64") /* ty=Tensor[(98), float64] */;
  %524 = cast(meta[relay.Constant][37] /* ty=Tensor[(1176), float64] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %525 = reshape(%523, newshape=[14, 7, 1]) /* ty=Tensor[(14, 7, 1), float64] */;
  %526 = reshape(%524, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
  %527 = @func_1041(%525, %526) /* ty=(Tensor[(14, 7, 12), bool], Tensor[(4, 8, 2), float64], Tensor[(960), float64], Tensor[(8), uint8], Tensor[(4, 8, 2), float64], Tensor[(14, 13, 8), float32]) */;
  %528 = %522.0;
  %529 = %527.4;
  (%528, %529, %var_5994, meta[relay.Constant][37] /* ty=Tensor[(1176), float64] */)
}

def @func_4451(%var_4424: Tensor[(6, 13, 9), float64]) -> (Tensor[(6, 13, 9), float64], Tensor[(10, 13, 13), float32], Tensor[(11, 16, 12), uint32], Tensor[(2112), float32]) {
  %530 = cast(%var_4424, dtype="float64") /* ty=Tensor[(6, 13, 9), float64] */;
  %531 = cast(meta[relay.Constant][38] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %532 = reshape(%531, newshape=[11, 16, 12]) /* ty=Tensor[(11, 16, 12), float32] */;
  %533 = sqrt(%530) /* ty=Tensor[(6, 13, 9), float64] */;
  %534 = @func_4367() /* ty=Tensor[(10, 13, 13), float32] */;
  %535 = @func_2995(%532) /* ty=Tensor[(11, 16, 12), uint32] */;
  (%533, %534, %535, meta[relay.Constant][38] /* ty=Tensor[(2112), float32] */)
}

def @func_5309(%var_5283: Tensor[(2730), float32]) -> (Tensor[(10, 13, 13), float32], Tensor[(2730), bool], Tensor[(14, 15, 13), float64], Tensor[(10, 13, 13), float32]) {
  %536 = cast(%var_5283, dtype="bool") /* ty=Tensor[(2730), bool] */;
  %537 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(2730), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %538 = cast(meta[relay.Constant][39] /* ty=Tensor[(2730), float32] */, dtype="bool") /* ty=Tensor[(2730), bool] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?), bool] */;
  %540 = cast(meta[relay.Constant][39] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %541 = reshape(%540, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
  %542 = @func_1576(%541) /* ty=(Tensor[(14, 15, 13), float32],) */;
  %543 = %542.0;
  %544 = cast(%543, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %545 = @func_4867() /* ty=Tensor[(10, 13, 13), float32] */;
  %546 = greater(%538, %539) /* ty=Tensor[(2730), bool] */;
  %547 = erf(%544) /* ty=Tensor[(14, 15, 13), float64] */;
  %548 = @func_5202() /* ty=Tensor[(10, 13, 13), float32] */;
  (%545, %546, %547, %548)
}

def @func_835(%var_804: Tensor[(16, 15, 4), float64], %var_811: Tensor[(8), uint8]) -> (Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) {
  %549 = cast(%var_804, dtype="float64") /* ty=Tensor[(16, 15, 4), float64] */;
  %550 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(16, 15, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 15, 4), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 4), float64] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %553 = cast(meta[relay.Constant][41] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %554 = cast(meta[relay.Constant][41] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %555 = cast(%var_811, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %556 = reshape(%553, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %557 = reshape(%554, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %558 = reshape(%555, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %559 = @func_666(%556, %557, %558) /* ty=(Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) */;
  %560 = %559.0;
  %561 = cast(%560, dtype="float32") /* ty=Tensor[(14, 13, 8), float32] */;
  %562 = cast(meta[relay.Constant][41] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %563 = cast(%var_811, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %564 = reshape(%561, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %565 = reshape(%562, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %566 = reshape(%563, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %567 = @func_666(%564, %565, %566) /* ty=(Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) */;
  %568 = cast(%560, dtype="float64") /* ty=Tensor[(14, 13, 8), float64] */;
  %569 = cast(%var_811, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %570 = reshape(%569, newshape=[4, 1, 2]) /* ty=Tensor[(4, 1, 2), uint8] */;
  %571 = @func_162(%570) /* ty=(Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) */;
  %572 = floor_mod(%551, %552) /* ty=Tensor[(16, 15, 4), float64] */;
  %573 = %567.3;
  %574 = asin(%568) /* ty=Tensor[(14, 13, 8), float64] */;
  %575 = %571.0;
  (%572, meta[relay.Constant][41] /* ty=Tensor[(1456), float32] */, %var_811, %573, %574, %575)
}

def @func_162(%var_134: Tensor[(4, 1, 2), uint8]) -> (Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) {
  %576 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 8, 2), uint8] */, dtype="float64") /* ty=Tensor[(4, 8, 2), float64] */;
  %577 = cast(%var_134, dtype="uint8") /* ty=Tensor[(4, 1, 2), uint8] */;
  %578 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 8, 2), uint8] */, dtype="uint8") /* ty=Tensor[(4, 8, 2), uint8] */;
  %579 = bitwise_or(%577, %578) /* ty=Tensor[(4, 8, 2), uint8] */;
  %580 = cast(%579, dtype="float64") /* ty=Tensor[(4, 8, 2), float64] */;
  %581 = atan(%576) /* ty=Tensor[(4, 8, 2), float64] */;
  %582 = atanh(%580) /* ty=Tensor[(4, 8, 2), float64] */;
  (%581, %582)
}

def @func_5186(%var_5143: Tensor[(10, 13, 13), float32]) -> (Tensor[(10, 13, 13), uint16], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32]) {
  %583 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %584 = %583.0;
  %585 = cast(%var_5143, dtype="uint16") /* ty=Tensor[(10, 13, 13), uint16] */;
  %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%584, dtype="uint16") /* ty=Tensor[(10, 13, 13), uint16] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %589 = cast(%var_5143, dtype="bool") /* ty=Tensor[(10, 13, 13), bool] */;
  %590 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%584, dtype="bool") /* ty=Tensor[(10, 13, 13), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %593 = less(%591, %592) /* ty=Tensor[(10, 13, 13), bool] */;
  %594 = cast(%593, dtype="float32") /* ty=Tensor[(10, 13, 13), float32] */;
  %595 = bitwise_xor(%587, %588) /* ty=Tensor[(10, 13, 13), uint16] */;
  %596 = @func_4367() /* ty=Tensor[(10, 13, 13), float32] */;
  %597 = atanh(%594) /* ty=Tensor[(10, 13, 13), float32] */;
  (%595, %596, %597)
}

def @func_5375(%var_5363: Tensor[(1, 4, 8), float64], %var_5364: Tensor[(10, 4, 8), float64]) -> Tensor[(10, 4, 8), float64] {
  %598 = cast(%var_5363, dtype="float64") /* ty=Tensor[(1, 4, 8), float64] */;
  %599 = cast(%var_5364, dtype="float64") /* ty=Tensor[(10, 4, 8), float64] */;
  mod(%598, %599) /* ty=Tensor[(10, 4, 8), float64] */
}

def @func_4525(%var_4501: Tensor[(8, 14), uint16], %var_4502: Tensor[(8, 14), uint16]) -> Tensor[(8, 14), bool] {
  %600 = cast(%var_4502, dtype="bool") /* ty=Tensor[(8, 14), bool] */;
  %601 = shape_of(%var_4501, dtype="int32") /* ty=Tensor[(2), int32] */;
  %602 = cast(%var_4501, dtype="bool") /* ty=Tensor[(8, 14), bool] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  greater_equal(%602, %603) /* ty=Tensor[(8, 14), bool] */
}

def @func_4739(%var_4727: Tensor[(8, 30), float64]) -> (Tensor[(10, 13, 13), float32], Tensor[(8, 9, 3), int64], Tensor[(216), uint16], Tensor[(15, 4, 4), int32], Tensor[(8, 30), float64]) {
  %604 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %605 = %604.0;
  %606 = cast(%605, dtype="float32") /* ty=Tensor[(10, 13, 13), float32] */;
  %607 = cast(meta[relay.Constant][43] /* ty=Tensor[(216), uint16] */, dtype="uint16") /* ty=Tensor[(216), uint16] */;
  %608 = cast(meta[relay.Constant][43] /* ty=Tensor[(216), uint16] */, dtype="uint16") /* ty=Tensor[(216), uint16] */;
  %609 = reshape(%607, newshape=[8, 9, 3]) /* ty=Tensor[(8, 9, 3), uint16] */;
  %610 = reshape(%608, newshape=[8, 9, 3]) /* ty=Tensor[(8, 9, 3), uint16] */;
  %611 = cast(%var_4727, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  %612 = reshape(%611, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %613 = @func_2539(%612) /* ty=(Tensor[(16, 7, 2), uint16], Tensor[(15, 4, 4), int32], Tensor[(240), float64], Tensor[(15, 4, 4), int32]) */;
  %614 = log10(%606) /* ty=Tensor[(10, 13, 13), float32] */;
  %615 = @func_1514(%609, %610) /* ty=Tensor[(8, 9, 3), int64] */;
  %616 = %613.3;
  (%614, %615, meta[relay.Constant][43] /* ty=Tensor[(216), uint16] */, %616, %var_4727)
}

def @func_2250(%var_2218: Tensor[(1, 14, 4), float64], %var_2219: Tensor[(5, 14, 4), float64], %var_2243: Tensor[(2, 4), uint8]) -> (Tensor[(5, 14, 4), int64], Tensor[(4, 8, 2), float64], Tensor[(18, 30), float64], Tensor[(2, 4), uint8], Tensor[(16, 15, 4), float64], Tensor[(960), float64]) {
  %617 = cast(%var_2218, dtype="float64") /* ty=Tensor[(1, 14, 4), float64] */;
  %618 = cast(%var_2219, dtype="float64") /* ty=Tensor[(5, 14, 4), float64] */;
  %619 = power(%617, %618) /* ty=Tensor[(5, 14, 4), float64] */;
  %620 = cast(%619, dtype="int64") /* ty=Tensor[(5, 14, 4), int64] */;
  %621 = cast(%var_2218, dtype="int64") /* ty=Tensor[(1, 14, 4), int64] */;
  %622 = cast(meta[relay.Constant][44] /* ty=Tensor[(18, 30), float64] */, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %623 = cast(meta[relay.Constant][44] /* ty=Tensor[(18, 30), float64] */, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %624 = cast(meta[relay.Constant][44] /* ty=Tensor[(18, 30), float64] */, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %625 = cast(%var_2243, dtype="uint8") /* ty=Tensor[(2, 4), uint8] */;
  %626 = reshape(%622, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), float64] */;
  %627 = reshape(%623, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), float64] */;
  %628 = reshape(%624, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), float64] */;
  %629 = reshape(%625, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %630 = @func_1801(%626, %627, %628, %629) /* ty=(Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float64], Tensor[(960), float64], Tensor[(4, 8, 2), float64]) */;
  %631 = cast(meta[relay.Constant][45] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %632 = cast(%var_2243, dtype="uint8") /* ty=Tensor[(2, 4), uint8] */;
  %633 = reshape(%631, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float64] */;
  %634 = reshape(%632, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %635 = @func_835(%633, %634) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) */;
  %636 = bitwise_xor(%620, %621) /* ty=Tensor[(5, 14, 4), int64] */;
  %637 = %630.6;
  %638 = %635.0;
  (%636, %637, meta[relay.Constant][44] /* ty=Tensor[(18, 30), float64] */, %var_2243, %638, meta[relay.Constant][45] /* ty=Tensor[(960), float64] */)
}

def @func_3460(%var_3453: Tensor[(960), float64], %var_3454: Tensor[(8, 1), uint8]) -> (Tensor[(8, 16, 7), float64], Tensor[(14, 13, 8), float32], Tensor[(960), float64], Tensor[(8, 1), uint8]) {
  %639 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 16, 7), float64] */, dtype="float64") /* ty=Tensor[(8, 16, 7), float64] */;
  %640 = cast(%var_3453, dtype="float64") /* ty=Tensor[(960), float64] */;
  %641 = cast(%var_3454, dtype="uint8") /* ty=Tensor[(8, 1), uint8] */;
  %642 = reshape(%640, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float64] */;
  %643 = reshape(%641, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %644 = @func_835(%642, %643) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) */;
  %645 = cosh(%639) /* ty=Tensor[(8, 16, 7), float64] */;
  %646 = %644.3;
  (%645, %646, %var_3453, %var_3454)
}

def @func_6071(%var_6067: Tensor[(13, 11, 2), float32]) -> (Tensor[(13, 11, 2), float32],) {
  %647 = cast(%var_6067, dtype="float32") /* ty=Tensor[(13, 11, 2), float32] */;
  %648 = log2(%647) /* ty=Tensor[(13, 11, 2), float32] */;
  (%648,)
}

def @func_6377() -> (Tensor[(10, 13, 13), bool], Tensor[(10, 13, 13), float64]) {
  %649 = @func_5861() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %650 = %649.0;
  %651 = cast(meta[relay.Constant][47] /* ty=Tensor[(10, 13, 13), float32] */, dtype="bool") /* ty=Tensor[(10, 13, 13), bool] */;
  %652 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(%650, dtype="bool") /* ty=Tensor[(10, 13, 13), bool] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %655 = cast(%650, dtype="float64") /* ty=Tensor[(10, 13, 13), float64] */;
  %656 = logical_or(%653, %654) /* ty=Tensor[(10, 13, 13), bool] */;
  %657 = exp(%655) /* ty=Tensor[(10, 13, 13), float64] */;
  (%656, %657)
}

def @func_4115(%var_4088: Tensor[(9, 15, 1), int8]) -> Tensor[(9, 15, ?), bool] {
  %658 = cast(%var_4088, dtype="bool") /* ty=Tensor[(9, 15, 1), bool] */;
  %659 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(9, 15, 1), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(meta[relay.Constant][48] /* ty=Tensor[(9, 15, 1), int8] */, dtype="bool") /* ty=Tensor[(9, 15, 1), bool] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%660, %661) /* ty=Tensor[(9, 15, ?), bool] */
}

def @func_4367() -> Tensor[(10, 13, 13), float32] {
  %662 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %662.0
}

def @func_1576(%var_1572: Tensor[(14, 15, 13), float32]) -> (Tensor[(14, 15, 13), float32],) {
  %663 = cast(%var_1572, dtype="float32") /* ty=Tensor[(14, 15, 13), float32] */;
  %664 = tan(%663) /* ty=Tensor[(14, 15, 13), float32] */;
  (%664,)
}

def @func_6023() -> (Tensor[(10, 13, 13), float32],) {
  %665 = @func_5861() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %666 = %665.0;
  (%666,)
}

def @func_2146(%var_2086: Tensor[(14, 1, 16), bool], %var_2087: Tensor[(14, 4, 16), bool], %var_2092: Tensor[(14, 4, 16), bool], %var_2118: Tensor[(14, 4, 16), float64]) -> (Tensor[(14, 4, 16), int32], Tensor[(14, 4, 16), int8], Tensor[(4, 8, 2), float64], Tensor[(1152), float64], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(4, 2), uint8], Tensor[(14, 4, 16), float64]) {
  %667 = cast(%var_2086, dtype="bool") /* ty=Tensor[(14, 1, 16), bool] */;
  %668 = cast(%var_2087, dtype="bool") /* ty=Tensor[(14, 4, 16), bool] */;
  %669 = logical_and(%667, %668) /* ty=Tensor[(14, 4, 16), bool] */;
  %670 = cast(%var_2092, dtype="int32") /* ty=Tensor[(14, 4, 16), int32] */;
  %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%669, dtype="int32") /* ty=Tensor[(14, 4, 16), int32] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %674 = cast(%var_2092, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %675 = cos(%674) /* ty=Tensor[(14, 4, 16), float64] */;
  %676 = cast(%var_2118, dtype="int8") /* ty=Tensor[(14, 4, 16), int8] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%675, dtype="int8") /* ty=Tensor[(14, 4, 16), int8] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %680 = cast(meta[relay.Constant][49] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %681 = cast(meta[relay.Constant][50] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
  %682 = reshape(%680, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float64] */;
  %683 = reshape(%681, newshape=[98]) /* ty=Tensor[(98), float64] */;
  %684 = @func_1462(%682, %683) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(14, 7, 12), bool], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(120, 8), float64], Tensor[(14, 5, 10), bool], Tensor[(1176, 8), int32]) */;
  %685 = cast(meta[relay.Constant][51] /* ty=Tensor[(4, 2), uint8] */, dtype="uint8") /* ty=Tensor[(4, 2), uint8] */;
  %686 = reshape(%685, newshape=[4, 1, 2]) /* ty=Tensor[(4, 1, 2), uint8] */;
  %687 = @func_162(%686) /* ty=(Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) */;
  %688 = cast(%675, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %689 = logical_xor(%672, %673) /* ty=Tensor[(14, 4, 16), int32] */;
  %690 = bitwise_or(%678, %679) /* ty=Tensor[(14, 4, 16), int8] */;
  %691 = %684.3;
  %692 = %687.1;
  %693 = acosh(%688) /* ty=Tensor[(14, 4, 16), float64] */;
  (%689, %690, %691, meta[relay.Constant][49] /* ty=Tensor[(1152), float64] */, meta[relay.Constant][50] /* ty=Tensor[(98), float64] */, %692, meta[relay.Constant][51] /* ty=Tensor[(4, 2), uint8] */, %693)
}

def @func_5480() -> (Tensor[(10, 13, 13), float32], Tensor[(7, 5, 3), bool], Tensor[(105), bool]) {
  %694 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %695 = cast(meta[relay.Constant][52] /* ty=Tensor[(105), bool] */, dtype="bool") /* ty=Tensor[(105), bool] */;
  %696 = cast(meta[relay.Constant][52] /* ty=Tensor[(105), bool] */, dtype="bool") /* ty=Tensor[(105), bool] */;
  %697 = reshape(%695, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), bool] */;
  %698 = reshape(%696, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), bool] */;
  %699 = @func_2675(%697, %698) /* ty=(Tensor[(7, 5, 3), bool],) */;
  %700 = %694.0;
  %701 = %699.0;
  (%700, %701, meta[relay.Constant][52] /* ty=Tensor[(105), bool] */)
}

def @func_4855(%var_4844: Tensor[(1536), float32], %var_4847: Tensor[(8, 144), float64]) -> (Tensor[(10, 13, 13), float32], Tensor[(14, 13, 8), int32], Tensor[(1536), float32], Tensor[(960), float64], Tensor[(8), uint8], Tensor[(8, 144), float64], Tensor[(98), float64]) {
  %702 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %703 = cast(%var_4844, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %704 = cast(%var_4844, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %705 = cast(meta[relay.Constant][53] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %706 = cast(meta[relay.Constant][54] /* ty=Tensor[(8), uint8] */, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %707 = cast(%var_4847, dtype="float64") /* ty=Tensor[(8, 144), float64] */;
  %708 = cast(meta[relay.Constant][55] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
  %709 = cast(%var_4844, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %710 = reshape(%703, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float32] */;
  %711 = reshape(%704, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float32] */;
  %712 = reshape(%705, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %713 = reshape(%706, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %714 = reshape(%707, newshape=[4, 288]) /* ty=Tensor[(4, 288), float64] */;
  %715 = reshape(%708, newshape=[98]) /* ty=Tensor[(98), float64] */;
  %716 = reshape(%709, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float32] */;
  %717 = @func_1698(%710, %711, %712, %713, %714, %715, %716) /* ty=(Tensor[(16, 16, 6), bool], Tensor[(960), float64], Tensor[(12, 6, 16), float64], Tensor[(4, 288), float64], Tensor[(98), float64], Tensor[(14, 13, 8), int32], Tensor[(14, 13, 8), float32], Tensor[(16, 16, 6), bool]) */;
  %718 = %702.0;
  %719 = %717.5;
  (%718, %719, %var_4844, meta[relay.Constant][53] /* ty=Tensor[(960), float64] */, meta[relay.Constant][54] /* ty=Tensor[(8), uint8] */, %var_4847, meta[relay.Constant][55] /* ty=Tensor[(98), float64] */)
}

def @func_1875(%var_1851: Tensor[(15, 4, 4), float64]) -> (Tensor[(15, 4, 4), int32],) {
  %720 = cast(%var_1851, dtype="float64") /* ty=Tensor[(15, 4, 4), float64] */;
  %721 = asin(%720) /* ty=Tensor[(15, 4, 4), float64] */;
  %722 = cast(%var_1851, dtype="int32") /* ty=Tensor[(15, 4, 4), int32] */;
  %723 = shape_of(%721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%721, dtype="int32") /* ty=Tensor[(15, 4, 4), int32] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %726 = maximum(%724, %725) /* ty=Tensor[(15, 4, 4), int32] */;
  (%726,)
}

def @func_5737(%var_5577: Tensor[(234), bool], %var_5606: Tensor[(8), uint8], %var_5610: Tensor[(112), uint16], %var_5658: Tensor[(960), float64]) -> (Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(8, 14), bool], Tensor[(112), uint16], Tensor[(2730), bool], Tensor[(2730), float32], Tensor[(14, 13, 8), float32], Tensor[(10, 13, 13), float32], Tensor[(16, 15, 4), float64], Tensor[(960), float64], Tensor[(3, 6, 13), float32], Tensor[(3, 6, 13), bool], Tensor[(3, 6, 13), int64], Tensor[(3, 6, 13), float32], Tensor[(14, 15, 13), float64], Tensor[(3, 6, 13), float32]) {
  %727 = @func_4892() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %728 = cast(%var_5606, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %729 = reshape(%728, newshape=[4, 2]) /* ty=Tensor[(4, 2), uint8] */;
  %730 = @func_4634(%729) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(4, 2), uint8]) */;
  %731 = cast(%var_5610, dtype="uint16") /* ty=Tensor[(112), uint16] */;
  %732 = cast(%var_5610, dtype="uint16") /* ty=Tensor[(112), uint16] */;
  %733 = reshape(%731, newshape=[8, 14]) /* ty=Tensor[(8, 14), uint16] */;
  %734 = reshape(%732, newshape=[8, 14]) /* ty=Tensor[(8, 14), uint16] */;
  %735 = cast(meta[relay.Constant][56] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %736 = reshape(%735, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %737 = @func_5309(%736) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(2730), bool], Tensor[(14, 15, 13), float64], Tensor[(10, 13, 13), float32]) */;
  %738 = %737.1;
  %739 = cast(%738, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %740 = cast(%var_5606, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %741 = reshape(%739, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %742 = reshape(%740, newshape=[1, 8]) /* ty=Tensor[(1, 8), uint8] */;
  %743 = @func_5038(%741, %742) /* ty=(Tensor[(10, 13, 13), float64], Tensor[(14, 15, 13), float32], Tensor[(2730), float32], Tensor[(14, 13, 8), float32], Tensor[(1456), float32], Tensor[(1, 8), uint8]) */;
  %744 = cast(%var_5658, dtype="float64") /* ty=Tensor[(960), float64] */;
  %745 = cast(%var_5606, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %746 = reshape(%744, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float64] */;
  %747 = reshape(%745, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %748 = @func_835(%746, %747) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) */;
  %749 = cast(%var_5577, dtype="bool") /* ty=Tensor[(234), bool] */;
  %750 = cast(%var_5577, dtype="bool") /* ty=Tensor[(234), bool] */;
  %751 = reshape(%749, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), bool] */;
  %752 = reshape(%750, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), bool] */;
  %753 = @func_4003(%751, %752) /* ty=(Tensor[(3, 6, 13), bool],) */;
  %754 = %753.0;
  %755 = cast(%754, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
  %756 = rsqrt(%755) /* ty=Tensor[(3, 6, 13), float32] */;
  %757 = cast(%var_5577, dtype="bool") /* ty=Tensor[(234), bool] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%756, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %761 = less(%759, %760) /* ty=Tensor[(3, 6, 13), bool] */;
  %762 = cast(%756, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
  %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%761, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %766 = cast(%756, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
  %767 = cos(%766) /* ty=Tensor[(3, 6, 13), float32] */;
  %768 = cast(%var_5577, dtype="uint64") /* ty=Tensor[(234), uint64] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%767, dtype="uint64") /* ty=Tensor[(3, 6, 13), uint64] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %772 = bitwise_and(%770, %771) /* ty=Tensor[(3, 6, 13), uint64] */;
  %773 = cast(%772, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
  %774 = sqrt(%773) /* ty=Tensor[(3, 6, 13), float32] */;
  %775 = cast(%774, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %776 = cast(%772, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %777 = reshape(%775, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), bool] */;
  %778 = reshape(%776, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), bool] */;
  %779 = @func_4003(%777, %778) /* ty=(Tensor[(3, 6, 13), bool],) */;
  %780 = cast(%767, dtype="int64") /* ty=Tensor[(3, 6, 13), int64] */;
  %781 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %782 = cast(%756, dtype="int64") /* ty=Tensor[(3, 6, 13), int64] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %784 = cast(%774, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
  %785 = asin(%784) /* ty=Tensor[(3, 6, 13), float32] */;
  %786 = cast(%785, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
  %787 = shape_of(%774, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%774, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %790 = cast(meta[relay.Constant][56] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %791 = reshape(%790, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %792 = @func_5309(%791) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(2730), bool], Tensor[(14, 15, 13), float64], Tensor[(10, 13, 13), float32]) */;
  %793 = cast(%774, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
  %794 = @func_5341() /* ty=Tensor[(10, 13, 13), float32] */;
  %795 = %727.0;
  %796 = %730.1;
  %797 = @func_4525(%733, %734) /* ty=Tensor[(8, 14), bool] */;
  %798 = %743.3;
  %799 = @func_5341() /* ty=Tensor[(10, 13, 13), float32] */;
  %800 = %748.0;
  %801 = mod(%764, %765) /* ty=Tensor[(3, 6, 13), float32] */;
  %802 = %779.0;
  %803 = bitwise_xor(%782, %783) /* ty=Tensor[(3, 6, 13), int64] */;
  %804 = power(%788, %789) /* ty=Tensor[(3, 6, 13), float32] */;
  %805 = %792.2;
  %806 = atanh(%793) /* ty=Tensor[(3, 6, 13), float32] */;
  (%794, %795, %796, %var_5606, %797, %var_5610, %738, meta[relay.Constant][56] /* ty=Tensor[(2730), float32] */, %798, %799, %800, %var_5658, %801, %802, %803, %804, %805, %806)
}

def @func_4922(%var_4908: Tensor[(8, 12, 3), float32], %var_4909: Tensor[(8, 12, 3), float32]) -> (Tensor[(8, 12, 3), float32], Tensor[(8, 12, 3), float64]) {
  %807 = cast(%var_4909, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
  %808 = shape_of(%var_4908, dtype="int32") /* ty=Tensor[(3), int32] */;
  %809 = cast(%var_4908, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
  %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %811 = cast(%var_4909, dtype="float64") /* ty=Tensor[(8, 12, 3), float64] */;
  %812 = maximum(%809, %810) /* ty=Tensor[(8, 12, 3), float32] */;
  %813 = atan(%811) /* ty=Tensor[(8, 12, 3), float64] */;
  (%812, %813)
}

def @func_4003(%var_3995: Tensor[(3, 6, 13), bool], %var_3996: Tensor[(3, 6, 13), bool]) -> (Tensor[(3, 6, 13), bool],) {
  %814 = cast(%var_3996, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %815 = shape_of(%var_3995, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%var_3995, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %818 = logical_and(%816, %817) /* ty=Tensor[(3, 6, 13), bool] */;
  (%818,)
}

def @func_5202() -> Tensor[(10, 13, 13), float32] {
  %819 = @func_5000() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %819.0
}

def @func_5861() -> (Tensor[(10, 13, 13), float32],) {
  %820 = @func_5202() /* ty=Tensor[(10, 13, 13), float32] */;
  (%820,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1041(%var_1012: Tensor[(14, 7, 1), float64], %var_1013: Tensor[(14, 7, 12), float64]) -> (Tensor[(14, 7, 12), bool], Tensor[(4, 8, 2), float64], Tensor[(960), float64], Tensor[(8), uint8], Tensor[(4, 8, 2), float64], Tensor[(14, 13, 8), float32]) {
  %0 = cast(%var_1012, dtype="bool") /* ty=Tensor[(14, 7, 1), bool] */;
  %1 = cast(%var_1013, dtype="bool") /* ty=Tensor[(14, 7, 12), bool] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(8), uint8] */, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %4 = reshape(%2, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float64] */;
  %5 = reshape(%3, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %6 = @func_835(%4, %5) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) */;
  %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(8), uint8] */, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %8 = reshape(%7, newshape=[4, 1, 2]) /* ty=Tensor[(4, 1, 2), uint8] */;
  %9 = @func_162(%8) /* ty=(Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) */;
  %10 = %9.1;
  %11 = cast(%10, dtype="float64") /* ty=Tensor[(4, 8, 2), float64] */;
  %12 = reshape(%11, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), float64] */;
  %13 = @func_978(%12) /* ty=(Tensor[(8), uint8], Tensor[(14, 5, 10), bool], Tensor[(4, 8, 2), int64], Tensor[(14, 13, 8), float32], Tensor[(4, 364), float32], Tensor[(4, 8, 2), float64]) */;
  %14 = not_equal(%0, %1) /* ty=Tensor[(14, 7, 12), bool] */;
  %15 = %6.5;
  %16 = %13.3;
  (%14, %15, meta[relay.Constant][0] /* ty=Tensor[(960), float64] */, meta[relay.Constant][1] /* ty=Tensor[(8), uint8] */, %10, %16)
}

def @func_2679(%var_2677: Tensor[(7, 5, 3), bool], %var_2678: Tensor[(7, 5, 3), bool]) -> (Tensor[(7, 5, 3), bool],) {
  @func_2675(%var_2677, %var_2678) /* ty=(Tensor[(7, 5, 3), bool],) */
}

def @func_1878(%var_1876: Tensor[(15, 4, 4), float64]) -> (Tensor[(15, 4, 4), int32],) {
  @func_1875(%var_1876) /* ty=(Tensor[(15, 4, 4), int32],) */
}

def @func_1578(%var_1577: Tensor[(14, 15, 13), float32]) -> (Tensor[(14, 15, 13), float32],) {
  %19 = fn (%var_1572: Tensor[(14, 15, 13), float32]) -> (Tensor[(14, 15, 13), float32],) {
    %17 = cast(%var_1572, dtype="float32") /* ty=Tensor[(14, 15, 13), float32] */;
    %18 = tan(%17) /* ty=Tensor[(14, 15, 13), float32] */;
    (%18,)
  };
  %19(%var_1577) /* ty=(Tensor[(14, 15, 13), float32],) */
}

def @func_5481() -> (Tensor[(10, 13, 13), float32], Tensor[(7, 5, 3), bool], Tensor[(105), bool]) {
  %28 = fn () -> (Tensor[(10, 13, 13), float32], Tensor[(7, 5, 3), bool], Tensor[(105), bool]) {
    %20 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
    %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(105), bool] */, dtype="bool") /* ty=Tensor[(105), bool] */;
    %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(105), bool] */, dtype="bool") /* ty=Tensor[(105), bool] */;
    %23 = reshape(%21, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), bool] */;
    %24 = reshape(%22, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), bool] */;
    %25 = @func_2675(%23, %24) /* ty=(Tensor[(7, 5, 3), bool],) */;
    %26 = %20.0;
    %27 = %25.0;
    (%26, %27, meta[relay.Constant][2] /* ty=Tensor[(105), bool] */)
  };
  %28() /* ty=(Tensor[(10, 13, 13), float32], Tensor[(7, 5, 3), bool], Tensor[(105), bool]) */
}

def @func_4525(%var_4501: Tensor[(8, 14), uint16], %var_4502: Tensor[(8, 14), uint16]) -> Tensor[(8, 14), bool] {
  %29 = cast(%var_4502, dtype="bool") /* ty=Tensor[(8, 14), bool] */;
  %30 = shape_of(%var_4501, dtype="int32") /* ty=Tensor[(2), int32] */;
  %31 = cast(%var_4501, dtype="bool") /* ty=Tensor[(8, 14), bool] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  greater_equal(%31, %32) /* ty=Tensor[(8, 14), bool] */
}

def @func_6008(%var_6006: Tensor[(98), float64]) -> (Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(98), float64], Tensor[(1176), float64]) {
  @func_6005(%var_6006) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(98), float64], Tensor[(1176), float64]) */
}

def @func_4294() -> (Tensor[(10, 13, 13), float32],) {
  %35 = fn () -> (Tensor[(10, 13, 13), float32],) {
    %33 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(10, 13, 13), float32] */;
    %34 = asin(%33) /* ty=Tensor[(10, 13, 13), float32] */;
    (%34,)
  };
  %35() /* ty=(Tensor[(10, 13, 13), float32],) */
}

def @func_6073(%var_6072: Tensor[(13, 11, 2), float32]) -> (Tensor[(13, 11, 2), float32],) {
  %38 = fn (%var_6067: Tensor[(13, 11, 2), float32]) -> (Tensor[(13, 11, 2), float32],) {
    %36 = cast(%var_6067, dtype="float32") /* ty=Tensor[(13, 11, 2), float32] */;
    %37 = log2(%36) /* ty=Tensor[(13, 11, 2), float32] */;
    (%37,)
  };
  %38(%var_6072) /* ty=(Tensor[(13, 11, 2), float32],) */
}

def @func_1045(%var_1043: Tensor[(14, 7, 1), float64], %var_1044: Tensor[(14, 7, 12), float64]) -> (Tensor[(14, 7, 12), bool], Tensor[(4, 8, 2), float64], Tensor[(960), float64], Tensor[(8), uint8], Tensor[(4, 8, 2), float64], Tensor[(14, 13, 8), float32]) {
  @func_1041(%var_1043, %var_1044) /* ty=(Tensor[(14, 7, 12), bool], Tensor[(4, 8, 2), float64], Tensor[(960), float64], Tensor[(8), uint8], Tensor[(4, 8, 2), float64], Tensor[(14, 13, 8), float32]) */
}

def @func_6379() -> (Tensor[(10, 13, 13), bool], Tensor[(10, 13, 13), float64]) {
  @func_6377() /* ty=(Tensor[(10, 13, 13), bool], Tensor[(10, 13, 13), float64]) */
}

def @func_4893() -> (Tensor[(10, 13, 13), float32],) {
  %40 = fn () -> (Tensor[(10, 13, 13), float32],) {
    %39 = @func_4867() /* ty=Tensor[(10, 13, 13), float32] */;
    (%39,)
  };
  %40() /* ty=(Tensor[(10, 13, 13), float32],) */
}

def @func_666(%var_639: Tensor[(14, 13, 8), float32], %var_640: Tensor[(14, 13, 8), float32], %var_651: Tensor[(8), uint8]) -> (Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) {
  %41 = cast(%var_640, dtype="float32") /* ty=Tensor[(14, 13, 8), float32] */;
  %42 = shape_of(%var_639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%var_639, dtype="float32") /* ty=Tensor[(14, 13, 8), float32] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %45 = mod(%43, %44) /* ty=Tensor[(14, 13, 8), float32] */;
  %46 = cast(%var_639, dtype="int16") /* ty=Tensor[(14, 13, 8), int16] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%45, dtype="int16") /* ty=Tensor[(14, 13, 8), int16] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %50 = cast(%var_651, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %51 = reshape(%50, newshape=[4, 1, 2]) /* ty=Tensor[(4, 1, 2), uint8] */;
  %52 = @func_162(%51) /* ty=(Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) */;
  %53 = cast(%45, dtype="float32") /* ty=Tensor[(14, 13, 8), float32] */;
  %54 = bitwise_xor(%48, %49) /* ty=Tensor[(14, 13, 8), int16] */;
  %55 = %52.0;
  %56 = sqrt(%53) /* ty=Tensor[(14, 13, 8), float32] */;
  (%54, %55, %var_651, %56)
}

def @func_1707(%var_1700: Tensor[(16, 16, 6), float32], %var_1701: Tensor[(16, 16, 6), float32], %var_1702: Tensor[(960), float64], %var_1703: Tensor[(8), uint8], %var_1704: Tensor[(4, 288), float64], %var_1705: Tensor[(98), float64], %var_1706: Tensor[(16, 16, 6), float32]) -> (Tensor[(16, 16, 6), bool], Tensor[(960), float64], Tensor[(12, 6, 16), float64], Tensor[(4, 288), float64], Tensor[(98), float64], Tensor[(14, 13, 8), int32], Tensor[(14, 13, 8), float32], Tensor[(16, 16, 6), bool]) {
  @func_1698(%var_1700, %var_1701, %var_1702, %var_1703, %var_1704, %var_1705, %var_1706) /* ty=(Tensor[(16, 16, 6), bool], Tensor[(960), float64], Tensor[(12, 6, 16), float64], Tensor[(4, 288), float64], Tensor[(98), float64], Tensor[(14, 13, 8), int32], Tensor[(14, 13, 8), float32], Tensor[(16, 16, 6), bool]) */
}

def @func_5928() -> (Tensor[(10, 13, 13), float32],) {
  %57 = @func_5114() /* ty=(Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32]) */;
  %58 = %57.0;
  (%58,)
}

def @func_4926(%var_4924: Tensor[(8, 12, 3), float32], %var_4925: Tensor[(8, 12, 3), float32]) -> (Tensor[(8, 12, 3), float32], Tensor[(8, 12, 3), float64]) {
  @func_4922(%var_4924, %var_4925) /* ty=(Tensor[(8, 12, 3), float32], Tensor[(8, 12, 3), float64]) */
}

def @func_6498(%var_6494: Tensor[(216), uint16], %var_6495: Tensor[(8, 9, 3), int64], %var_6496: Tensor[(1456), float32], %var_6497: Tensor[(8), uint8]) -> (Tensor[(10, 13, 13), float32], Tensor[(216), uint16], Tensor[(8, 9, 3), int8], Tensor[(14, 13, 8), int16], Tensor[(1456), float32], Tensor[(8), uint8]) {
  %79 = fn (%var_6476: Tensor[(216), uint16], %var_6480: Tensor[(8, 9, 3), int64], %var_6487: Tensor[(1456), float32], %var_6488: Tensor[(8), uint8]) -> (Tensor[(10, 13, 13), float32], Tensor[(216), uint16], Tensor[(8, 9, 3), int8], Tensor[(14, 13, 8), int16], Tensor[(1456), float32], Tensor[(8), uint8]) {
    %59 = @func_5928() /* ty=(Tensor[(10, 13, 13), float32],) */;
    %60 = cast(%var_6476, dtype="uint16") /* ty=Tensor[(216), uint16] */;
    %61 = cast(%var_6476, dtype="uint16") /* ty=Tensor[(216), uint16] */;
    %62 = reshape(%60, newshape=[8, 9, 3]) /* ty=Tensor[(8, 9, 3), uint16] */;
    %63 = reshape(%61, newshape=[8, 9, 3]) /* ty=Tensor[(8, 9, 3), uint16] */;
    %64 = @func_1514(%62, %63) /* ty=Tensor[(8, 9, 3), int64] */;
    %65 = cast(%var_6480, dtype="int8") /* ty=Tensor[(8, 9, 3), int8] */;
    %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
    %67 = cast(%64, dtype="int8") /* ty=Tensor[(8, 9, 3), int8] */;
    %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %69 = cast(%var_6487, dtype="float32") /* ty=Tensor[(1456), float32] */;
    %70 = cast(%var_6487, dtype="float32") /* ty=Tensor[(1456), float32] */;
    %71 = cast(%var_6488, dtype="uint8") /* ty=Tensor[(8), uint8] */;
    %72 = reshape(%69, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
    %73 = reshape(%70, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
    %74 = reshape(%71, newshape=[8]) /* ty=Tensor[(8), uint8] */;
    %75 = @func_666(%72, %73, %74) /* ty=(Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) */;
    %76 = %59.0;
    %77 = bitwise_and(%67, %68) /* ty=Tensor[(8, 9, 3), int8] */;
    %78 = %75.0;
    (%76, %var_6476, %77, %78, %var_6487, %var_6488)
  };
  %79(%var_6494, %var_6495, %var_6496, %var_6497) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(216), uint16], Tensor[(8, 9, 3), int8], Tensor[(14, 13, 8), int16], Tensor[(1456), float32], Tensor[(8), uint8]) */
}

def @func_2255(%var_2252: Tensor[(1, 14, 4), float64], %var_2253: Tensor[(5, 14, 4), float64], %var_2254: Tensor[(2, 4), uint8]) -> (Tensor[(5, 14, 4), int64], Tensor[(4, 8, 2), float64], Tensor[(18, 30), float64], Tensor[(2, 4), uint8], Tensor[(16, 15, 4), float64], Tensor[(960), float64]) {
  @func_2250(%var_2252, %var_2253, %var_2254) /* ty=(Tensor[(5, 14, 4), int64], Tensor[(4, 8, 2), float64], Tensor[(18, 30), float64], Tensor[(2, 4), uint8], Tensor[(16, 15, 4), float64], Tensor[(960), float64]) */
}

def @func_4855(%var_4844: Tensor[(1536), float32], %var_4847: Tensor[(8, 144), float64]) -> (Tensor[(10, 13, 13), float32], Tensor[(14, 13, 8), int32], Tensor[(1536), float32], Tensor[(960), float64], Tensor[(8), uint8], Tensor[(8, 144), float64], Tensor[(98), float64]) {
  %80 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %81 = cast(%var_4844, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %82 = cast(%var_4844, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %83 = cast(meta[relay.Constant][4] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %84 = cast(meta[relay.Constant][5] /* ty=Tensor[(8), uint8] */, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %85 = cast(%var_4847, dtype="float64") /* ty=Tensor[(8, 144), float64] */;
  %86 = cast(meta[relay.Constant][6] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
  %87 = cast(%var_4844, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %88 = reshape(%81, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float32] */;
  %89 = reshape(%82, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float32] */;
  %90 = reshape(%83, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %91 = reshape(%84, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %92 = reshape(%85, newshape=[4, 288]) /* ty=Tensor[(4, 288), float64] */;
  %93 = reshape(%86, newshape=[98]) /* ty=Tensor[(98), float64] */;
  %94 = reshape(%87, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float32] */;
  %95 = @func_1698(%88, %89, %90, %91, %92, %93, %94) /* ty=(Tensor[(16, 16, 6), bool], Tensor[(960), float64], Tensor[(12, 6, 16), float64], Tensor[(4, 288), float64], Tensor[(98), float64], Tensor[(14, 13, 8), int32], Tensor[(14, 13, 8), float32], Tensor[(16, 16, 6), bool]) */;
  %96 = %80.0;
  %97 = %95.5;
  (%96, %97, %var_4844, meta[relay.Constant][4] /* ty=Tensor[(960), float64] */, meta[relay.Constant][5] /* ty=Tensor[(8), uint8] */, %var_4847, meta[relay.Constant][6] /* ty=Tensor[(98), float64] */)
}

def @func_4115(%var_4088: Tensor[(9, 15, 1), int8]) -> Tensor[(9, 15, ?), bool] {
  %98 = cast(%var_4088, dtype="bool") /* ty=Tensor[(9, 15, 1), bool] */;
  %99 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(9, 15, 1), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 15, 1), int8] */, dtype="bool") /* ty=Tensor[(9, 15, 1), bool] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%100, %101) /* ty=Tensor[(9, 15, ?), bool] */
}

def @func_4007(%var_4005: Tensor[(3, 6, 13), bool], %var_4006: Tensor[(3, 6, 13), bool]) -> (Tensor[(3, 6, 13), bool],) {
  @func_4003(%var_4005, %var_4006) /* ty=(Tensor[(3, 6, 13), bool],) */
}

def @func_4778(%var_4777: Tensor[(240), float64]) -> (Tensor[(10, 13, 13), float32], Tensor[(15, 4, 4), int32], Tensor[(240), float64], Tensor[(2, 12, 10), bool], bool, Tensor[(224), bool]) {
  %116 = fn (%var_4748: Tensor[(240), float64]) -> (Tensor[(10, 13, 13), float32], Tensor[(15, 4, 4), int32], Tensor[(240), float64], Tensor[(2, 12, 10), bool], bool, Tensor[(224), bool]) {
    %102 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
    %103 = cast(%var_4748, dtype="float64") /* ty=Tensor[(240), float64] */;
    %104 = reshape(%103, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float64] */;
    %105 = @func_1875(%104) /* ty=(Tensor[(15, 4, 4), int32],) */;
    %106 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %107 = cast(%var_4748, dtype="bool") /* ty=Tensor[(240), bool] */;
    %108 = cast(meta[relay.Constant][8] /* ty=Tensor[(224), bool] */, dtype="bool") /* ty=Tensor[(224), bool] */;
    %109 = reshape(%106, newshape=[]) /* ty=bool */;
    %110 = reshape(%107, newshape=[2, 12, 10]) /* ty=Tensor[(2, 12, 10), bool] */;
    %111 = reshape(%108, newshape=[112, 2]) /* ty=Tensor[(112, 2), bool] */;
    %112 = @func_4250(%109, %110, %111) /* ty=(Tensor[(2, 12, 10), bool], Tensor[(1152), float64], Tensor[(112, 2), bool], Tensor[(112, 8), bool], Tensor[(2, 12, 10), float32]) */;
    %113 = %102.0;
    %114 = %105.0;
    %115 = %112.0;
    (%113, %114, %var_4748, %115, True /* ty=bool */, meta[relay.Constant][8] /* ty=Tensor[(224), bool] */)
  };
  %116(%var_4777) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(15, 4, 4), int32], Tensor[(240), float64], Tensor[(2, 12, 10), bool], bool, Tensor[(224), bool]) */
}

def @func_3378(%var_3376: Tensor[(7, 12, 11), int32], %var_3377: Tensor[(7, 12, 11), int32]) -> Tensor[(7, 12, 11), float64] {
  %123 = fn (%var_3367: Tensor[(7, 12, 11), int32], %var_3368: Tensor[(7, 12, 11), int32]) -> Tensor[(7, 12, 11), float64] {
    %117 = cast(%var_3368, dtype="int32") /* ty=Tensor[(7, 12, 11), int32] */;
    %118 = shape_of(%var_3367, dtype="int32") /* ty=Tensor[(3), int32] */;
    %119 = cast(%var_3367, dtype="int32") /* ty=Tensor[(7, 12, 11), int32] */;
    %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %121 = left_shift(%119, %120) /* ty=Tensor[(7, 12, 11), int32] */;
    %122 = cast(%121, dtype="float64") /* ty=Tensor[(7, 12, 11), float64] */;
    sinh(%122) /* ty=Tensor[(7, 12, 11), float64] */
  };
  %123(%var_3376, %var_3377) /* ty=Tensor[(7, 12, 11), float64] */
}

def @func_4922(%var_4908: Tensor[(8, 12, 3), float32], %var_4909: Tensor[(8, 12, 3), float32]) -> (Tensor[(8, 12, 3), float32], Tensor[(8, 12, 3), float64]) {
  %124 = cast(%var_4909, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
  %125 = shape_of(%var_4908, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%var_4908, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %128 = cast(%var_4909, dtype="float64") /* ty=Tensor[(8, 12, 3), float64] */;
  %129 = maximum(%126, %127) /* ty=Tensor[(8, 12, 3), float32] */;
  %130 = atan(%128) /* ty=Tensor[(8, 12, 3), float64] */;
  (%129, %130)
}

def @func_5979(%var_5977: Tensor[(224), bool], %var_5978: Tensor[(896), bool]) -> (Tensor[(10, 13, 13), float32], Tensor[(105), bool], Tensor[(1152), float64], Tensor[(224), bool], Tensor[(896), bool]) {
  @func_5975(%var_5977, %var_5978) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(105), bool], Tensor[(1152), float64], Tensor[(224), bool], Tensor[(896), bool]) */
}

def @func_4634(%var_4610: Tensor[(4, 2), uint8]) -> (Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(4, 2), uint8]) {
  %131 = cast(%var_4610, dtype="uint8") /* ty=Tensor[(4, 2), uint8] */;
  %132 = reshape(%131, newshape=[4, 1, 2]) /* ty=Tensor[(4, 1, 2), uint8] */;
  %133 = @func_162(%132) /* ty=(Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) */;
  %134 = @func_4367() /* ty=Tensor[(10, 13, 13), float32] */;
  %135 = %133.0;
  (%134, %135, %var_4610)
}

def @func_4739(%var_4727: Tensor[(8, 30), float64]) -> (Tensor[(10, 13, 13), float32], Tensor[(8, 9, 3), int64], Tensor[(216), uint16], Tensor[(15, 4, 4), int32], Tensor[(8, 30), float64]) {
  %136 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %137 = %136.0;
  %138 = cast(%137, dtype="float32") /* ty=Tensor[(10, 13, 13), float32] */;
  %139 = cast(meta[relay.Constant][9] /* ty=Tensor[(216), uint16] */, dtype="uint16") /* ty=Tensor[(216), uint16] */;
  %140 = cast(meta[relay.Constant][9] /* ty=Tensor[(216), uint16] */, dtype="uint16") /* ty=Tensor[(216), uint16] */;
  %141 = reshape(%139, newshape=[8, 9, 3]) /* ty=Tensor[(8, 9, 3), uint16] */;
  %142 = reshape(%140, newshape=[8, 9, 3]) /* ty=Tensor[(8, 9, 3), uint16] */;
  %143 = cast(%var_4727, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  %144 = reshape(%143, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %145 = @func_2539(%144) /* ty=(Tensor[(16, 7, 2), uint16], Tensor[(15, 4, 4), int32], Tensor[(240), float64], Tensor[(15, 4, 4), int32]) */;
  %146 = log10(%138) /* ty=Tensor[(10, 13, 13), float32] */;
  %147 = @func_1514(%141, %142) /* ty=Tensor[(8, 9, 3), int64] */;
  %148 = %145.3;
  (%146, %147, meta[relay.Constant][9] /* ty=Tensor[(216), uint16] */, %148, %var_4727)
}

def @func_1518(%var_1516: Tensor[(8, 9, 3), uint16], %var_1517: Tensor[(8, 9, 3), uint16]) -> Tensor[(8, 9, 3), int64] {
  @func_1514(%var_1516, %var_1517) /* ty=Tensor[(8, 9, 3), int64] */
}

def @func_1465(%var_1463: Tensor[(12, 6, 16), float64], %var_1464: Tensor[(98), float64]) -> (Tensor[(12, 6, 16), float64], Tensor[(14, 7, 12), bool], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(120, 8), float64], Tensor[(14, 5, 10), bool], Tensor[(1176, 8), int32]) {
  %170 = fn (%var_1385: Tensor[(12, 6, 16), float64], %var_1410: Tensor[(98), float64]) -> (Tensor[(12, 6, 16), float64], Tensor[(14, 7, 12), bool], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(120, 8), float64], Tensor[(14, 5, 10), bool], Tensor[(1176, 8), int32]) {
    %149 = cast(%var_1385, dtype="float64") /* ty=Tensor[(12, 6, 16), float64] */;
    %150 = cast(%var_1410, dtype="float64") /* ty=Tensor[(98), float64] */;
    %151 = cast(meta[relay.Constant][10] /* ty=Tensor[(1176, 1), float64] */, dtype="float64") /* ty=Tensor[(1176, 1), float64] */;
    %152 = reshape(%150, newshape=[14, 7, 1]) /* ty=Tensor[(14, 7, 1), float64] */;
    %153 = reshape(%151, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
    %154 = @func_1041(%152, %153) /* ty=(Tensor[(14, 7, 12), bool], Tensor[(4, 8, 2), float64], Tensor[(960), float64], Tensor[(8), uint8], Tensor[(4, 8, 2), float64], Tensor[(14, 13, 8), float32]) */;
    %155 = cast(meta[relay.Constant][11] /* ty=Tensor[(120, 8), float64] */, dtype="float64") /* ty=Tensor[(120, 8), float64] */;
    %156 = cast(meta[relay.Constant][12] /* ty=Tensor[(8), uint8] */, dtype="uint8") /* ty=Tensor[(8), uint8] */;
    %157 = reshape(%155, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float64] */;
    %158 = reshape(%156, newshape=[8]) /* ty=Tensor[(8), uint8] */;
    %159 = @func_835(%157, %158) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) */;
    %160 = %159.5;
    %161 = cast(%160, dtype="float64") /* ty=Tensor[(4, 8, 2), float64] */;
    %162 = reshape(%161, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), float64] */;
    %163 = @func_978(%162) /* ty=(Tensor[(8), uint8], Tensor[(14, 5, 10), bool], Tensor[(4, 8, 2), int64], Tensor[(14, 13, 8), float32], Tensor[(4, 364), float32], Tensor[(4, 8, 2), float64]) */;
    %164 = cast(meta[relay.Constant][10] /* ty=Tensor[(1176, 1), float64] */, dtype="int32") /* ty=Tensor[(1176, 1), int32] */;
    %165 = cast(meta[relay.Constant][12] /* ty=Tensor[(8), uint8] */, dtype="int32") /* ty=Tensor[(8), int32] */;
    %166 = sqrt(%149) /* ty=Tensor[(12, 6, 16), float64] */;
    %167 = %154.0;
    %168 = %163.1;
    %169 = maximum(%164, %165) /* ty=Tensor[(1176, 8), int32] */;
    (%166, %167, %var_1410, %160, meta[relay.Constant][11] /* ty=Tensor[(120, 8), float64] */, %168, %169)
  };
  %170(%var_1463, %var_1464) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(14, 7, 12), bool], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(120, 8), float64], Tensor[(14, 5, 10), bool], Tensor[(1176, 8), int32]) */
}

def @func_5975(%var_5970: Tensor[(224), bool], %var_5971: Tensor[(896), bool]) -> (Tensor[(10, 13, 13), float32], Tensor[(105), bool], Tensor[(1152), float64], Tensor[(224), bool], Tensor[(896), bool]) {
  %171 = @func_5480() /* ty=(Tensor[(10, 13, 13), float32], Tensor[(7, 5, 3), bool], Tensor[(105), bool]) */;
  %172 = cast(%var_5970, dtype="bool") /* ty=Tensor[(224), bool] */;
  %173 = cast(%var_5971, dtype="bool") /* ty=Tensor[(896), bool] */;
  %174 = cast(%var_5971, dtype="bool") /* ty=Tensor[(896), bool] */;
  %175 = cast(%var_5971, dtype="float64") /* ty=Tensor[(896), float64] */;
  %176 = reshape(%172, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), bool] */;
  %177 = reshape(%173, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), bool] */;
  %178 = reshape(%174, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), bool] */;
  %179 = reshape(%175, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float64] */;
  %180 = @func_2146(%176, %177, %178, %179) /* ty=(Tensor[(14, 4, 16), int32], Tensor[(14, 4, 16), int8], Tensor[(4, 8, 2), float64], Tensor[(1152), float64], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(4, 2), uint8], Tensor[(14, 4, 16), float64]) */;
  %181 = @func_4867() /* ty=Tensor[(10, 13, 13), float32] */;
  %182 = %171.2;
  %183 = %180.3;
  (%181, %182, %183, %var_5970, %var_5971)
}

def @func_164(%var_163: Tensor[(4, 1, 2), uint8]) -> (Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) {
  %191 = fn (%var_134: Tensor[(4, 1, 2), uint8]) -> (Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) {
    %184 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 8, 2), uint8] */, dtype="float64") /* ty=Tensor[(4, 8, 2), float64] */;
    %185 = cast(%var_134, dtype="uint8") /* ty=Tensor[(4, 1, 2), uint8] */;
    %186 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 8, 2), uint8] */, dtype="uint8") /* ty=Tensor[(4, 8, 2), uint8] */;
    %187 = bitwise_or(%185, %186) /* ty=Tensor[(4, 8, 2), uint8] */;
    %188 = cast(%187, dtype="float64") /* ty=Tensor[(4, 8, 2), float64] */;
    %189 = atan(%184) /* ty=Tensor[(4, 8, 2), float64] */;
    %190 = atanh(%188) /* ty=Tensor[(4, 8, 2), float64] */;
    (%189, %190)
  };
  %191(%var_163) /* ty=(Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) */
}

def @func_835(%var_804: Tensor[(16, 15, 4), float64], %var_811: Tensor[(8), uint8]) -> (Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) {
  %192 = cast(%var_804, dtype="float64") /* ty=Tensor[(16, 15, 4), float64] */;
  %193 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(16, 15, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 15, 4), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 4), float64] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %196 = cast(meta[relay.Constant][15] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %197 = cast(meta[relay.Constant][15] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %198 = cast(%var_811, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %199 = reshape(%196, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %200 = reshape(%197, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %201 = reshape(%198, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %202 = @func_666(%199, %200, %201) /* ty=(Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) */;
  %203 = %202.0;
  %204 = cast(%203, dtype="float32") /* ty=Tensor[(14, 13, 8), float32] */;
  %205 = cast(meta[relay.Constant][15] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %206 = cast(%var_811, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %207 = reshape(%204, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %208 = reshape(%205, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %209 = reshape(%206, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %210 = @func_666(%207, %208, %209) /* ty=(Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) */;
  %211 = cast(%203, dtype="float64") /* ty=Tensor[(14, 13, 8), float64] */;
  %212 = cast(%var_811, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %213 = reshape(%212, newshape=[4, 1, 2]) /* ty=Tensor[(4, 1, 2), uint8] */;
  %214 = @func_162(%213) /* ty=(Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) */;
  %215 = floor_mod(%194, %195) /* ty=Tensor[(16, 15, 4), float64] */;
  %216 = %210.3;
  %217 = asin(%211) /* ty=Tensor[(14, 13, 8), float64] */;
  %218 = %214.0;
  (%215, meta[relay.Constant][15] /* ty=Tensor[(1456), float32] */, %var_811, %216, %217, %218)
}

def @func_2998(%var_2996: Tensor[(11, 16, 12), float32]) -> Tensor[(11, 16, 12), uint32] {
  @func_2995(%var_2996) /* ty=Tensor[(11, 16, 12), uint32] */
}

def @func_2250(%var_2218: Tensor[(1, 14, 4), float64], %var_2219: Tensor[(5, 14, 4), float64], %var_2243: Tensor[(2, 4), uint8]) -> (Tensor[(5, 14, 4), int64], Tensor[(4, 8, 2), float64], Tensor[(18, 30), float64], Tensor[(2, 4), uint8], Tensor[(16, 15, 4), float64], Tensor[(960), float64]) {
  %219 = cast(%var_2218, dtype="float64") /* ty=Tensor[(1, 14, 4), float64] */;
  %220 = cast(%var_2219, dtype="float64") /* ty=Tensor[(5, 14, 4), float64] */;
  %221 = power(%219, %220) /* ty=Tensor[(5, 14, 4), float64] */;
  %222 = cast(%221, dtype="int64") /* ty=Tensor[(5, 14, 4), int64] */;
  %223 = cast(%var_2218, dtype="int64") /* ty=Tensor[(1, 14, 4), int64] */;
  %224 = cast(meta[relay.Constant][16] /* ty=Tensor[(18, 30), float64] */, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %225 = cast(meta[relay.Constant][16] /* ty=Tensor[(18, 30), float64] */, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %226 = cast(meta[relay.Constant][16] /* ty=Tensor[(18, 30), float64] */, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %227 = cast(%var_2243, dtype="uint8") /* ty=Tensor[(2, 4), uint8] */;
  %228 = reshape(%224, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), float64] */;
  %229 = reshape(%225, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), float64] */;
  %230 = reshape(%226, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), float64] */;
  %231 = reshape(%227, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %232 = @func_1801(%228, %229, %230, %231) /* ty=(Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float64], Tensor[(960), float64], Tensor[(4, 8, 2), float64]) */;
  %233 = cast(meta[relay.Constant][17] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %234 = cast(%var_2243, dtype="uint8") /* ty=Tensor[(2, 4), uint8] */;
  %235 = reshape(%233, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float64] */;
  %236 = reshape(%234, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %237 = @func_835(%235, %236) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) */;
  %238 = bitwise_xor(%222, %223) /* ty=Tensor[(5, 14, 4), int64] */;
  %239 = %232.6;
  %240 = %237.0;
  (%238, %239, meta[relay.Constant][16] /* ty=Tensor[(18, 30), float64] */, %var_2243, %240, meta[relay.Constant][17] /* ty=Tensor[(960), float64] */)
}

def @func_1801(%var_1737: Tensor[(12, 9, 5), float64], %var_1738: Tensor[(12, 9, 5), float64], %var_1747: Tensor[(12, 9, 5), float64], %var_1765: Tensor[(8), uint8]) -> (Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float64], Tensor[(960), float64], Tensor[(4, 8, 2), float64]) {
  %241 = cast(%var_1738, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %242 = shape_of(%var_1737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%var_1737, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %245 = cast(%var_1747, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %246 = shape_of(%var_1737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%var_1737, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %249 = cast(%var_1765, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %250 = reshape(%249, newshape=[4, 1, 2]) /* ty=Tensor[(4, 1, 2), uint8] */;
  %251 = @func_162(%250) /* ty=(Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) */;
  %252 = cast(meta[relay.Constant][18] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %253 = cast(%var_1765, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %254 = reshape(%252, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float64] */;
  %255 = reshape(%253, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %256 = @func_835(%254, %255) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) */;
  %257 = %256.4;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(14, 13, 8), float32] */;
  %259 = cast(%257, dtype="float32") /* ty=Tensor[(14, 13, 8), float32] */;
  %260 = cast(%var_1765, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %261 = reshape(%258, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %262 = reshape(%259, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %263 = reshape(%260, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %264 = @func_666(%261, %262, %263) /* ty=(Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) */;
  %265 = floor_divide(%243, %244) /* ty=Tensor[(12, 9, 5), float64] */;
  %266 = greater_equal(%247, %248) /* ty=Tensor[(12, 9, 5), bool] */;
  %267 = %251.0;
  %268 = %264.1;
  (%265, %266, %267, %var_1765, %257, meta[relay.Constant][18] /* ty=Tensor[(960), float64] */, %268)
}

def @func_4742(%var_4740: Tensor[(8, 30), float64]) -> (Tensor[(10, 13, 13), float32], Tensor[(8, 9, 3), int64], Tensor[(216), uint16], Tensor[(15, 4, 4), int32], Tensor[(8, 30), float64]) {
  @func_4739(%var_4740) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(8, 9, 3), int64], Tensor[(216), uint16], Tensor[(15, 4, 4), int32], Tensor[(8, 30), float64]) */
}

def @func_4582(%var_4576: bool, %var_4577: Tensor[(2240), bool]) -> (Tensor[(10, 13, 13), float32], Tensor[(10, 14, 16), uint32], bool, Tensor[(2240), bool]) {
  %269 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %270 = cast(%var_4576, dtype="bool") /* ty=bool */;
  %271 = cast(%var_4577, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %272 = reshape(%270, newshape=[]) /* ty=bool */;
  %273 = reshape(%271, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), bool] */;
  %274 = @func_3223(%272, %273) /* ty=(Tensor[(10, 14, 16), uint32], Tensor[(10, 14, 16), float32]) */;
  %275 = %269.0;
  %276 = %274.0;
  (%275, %276, %var_4576, %var_4577)
}

def @func_5000() -> (Tensor[(10, 13, 13), float32],) {
  %277 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %278 = %277.0;
  (%278,)
}

def @func_5202() -> Tensor[(10, 13, 13), float32] {
  %279 = @func_5000() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %279.0
}

def @func_6746() -> (Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32]) {
  %284 = fn () -> (Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32]) {
    %280 = @func_6023() /* ty=(Tensor[(10, 13, 13), float32],) */;
    %281 = @func_5000() /* ty=(Tensor[(10, 13, 13), float32],) */;
    %282 = %280.0;
    %283 = %281.0;
    (%282, %283)
  };
  %284() /* ty=(Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32]) */
}

def @func_5836(%var_5834: Tensor[(3, 10, 16), float32], %var_5835: Tensor[(3, 10, 16), float32]) -> (Tensor[(3, 10, 16), bool], Tensor[(3, 10, 16), float64], Tensor[(15, 4, 4), int32], Tensor[(240), float64]) {
  %296 = fn (%var_5784: Tensor[(3, 10, 16), float32], %var_5785: Tensor[(3, 10, 16), float32]) -> (Tensor[(3, 10, 16), bool], Tensor[(3, 10, 16), float64], Tensor[(15, 4, 4), int32], Tensor[(240), float64]) {
    %285 = cast(%var_5785, dtype="bool") /* ty=Tensor[(3, 10, 16), bool] */;
    %286 = shape_of(%var_5784, dtype="int32") /* ty=Tensor[(3), int32] */;
    %287 = cast(%var_5784, dtype="bool") /* ty=Tensor[(3, 10, 16), bool] */;
    %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %289 = cast(%var_5785, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
    %290 = cast(meta[relay.Constant][19] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %291 = reshape(%290, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %292 = @func_2539(%291) /* ty=(Tensor[(16, 7, 2), uint16], Tensor[(15, 4, 4), int32], Tensor[(240), float64], Tensor[(15, 4, 4), int32]) */;
    %293 = equal(%287, %288) /* ty=Tensor[(3, 10, 16), bool] */;
    %294 = atanh(%289) /* ty=Tensor[(3, 10, 16), float64] */;
    %295 = %292.1;
    (%293, %294, %295, meta[relay.Constant][19] /* ty=Tensor[(240), float64] */)
  };
  %296(%var_5834, %var_5835) /* ty=(Tensor[(3, 10, 16), bool], Tensor[(3, 10, 16), float64], Tensor[(15, 4, 4), int32], Tensor[(240), float64]) */
}

def @func_5930() -> (Tensor[(10, 13, 13), float32],) {
  @func_5928() /* ty=(Tensor[(10, 13, 13), float32],) */
}

def @func_5115() -> (Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32]) {
  %302 = fn () -> (Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32]) {
    %297 = @func_4867() /* ty=Tensor[(10, 13, 13), float32] */;
    %298 = cast(%297, dtype="float32") /* ty=Tensor[(10, 13, 13), float32] */;
    %299 = cast(%297, dtype="float32") /* ty=Tensor[(10, 13, 13), float32] */;
    %300 = rsqrt(%298) /* ty=Tensor[(10, 13, 13), float32] */;
    %301 = atan(%299) /* ty=Tensor[(10, 13, 13), float32] */;
    (%300, %301)
  };
  %302() /* ty=(Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32]) */
}

def @func_6447(%var_6390: bool, %var_6419: Tensor[(858), int64]) -> (Tensor[(2240), bool], Tensor[(10, 13, 13), float32], Tensor[(7, 12, 11), float64], Tensor[(924), int32], Tensor[(6, 13, 11), bool], Tensor[(858), int64], Tensor[(10, 14, 16), float64], Tensor[(8), uint8], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(10, 13, 13), float32]) {
  %303 = @func_5341() /* ty=Tensor[(10, 13, 13), float32] */;
  %304 = cast(%303, dtype="float32") /* ty=Tensor[(10, 13, 13), float32] */;
  %305 = cast(%var_6390, dtype="float32") /* ty=float32 */;
  %306 = cast(meta[relay.Constant][21] /* ty=Tensor[(924), int32] */, dtype="int32") /* ty=Tensor[(924), int32] */;
  %307 = cast(meta[relay.Constant][21] /* ty=Tensor[(924), int32] */, dtype="int32") /* ty=Tensor[(924), int32] */;
  %308 = reshape(%306, newshape=[7, 12, 11]) /* ty=Tensor[(7, 12, 11), int32] */;
  %309 = reshape(%307, newshape=[7, 12, 11]) /* ty=Tensor[(7, 12, 11), int32] */;
  %310 = cast(%var_6419, dtype="int64") /* ty=Tensor[(858), int64] */;
  %311 = reshape(%310, newshape=[6, 13, 11]) /* ty=Tensor[(6, 13, 11), int64] */;
  %312 = cast(%var_6390, dtype="bool") /* ty=bool */;
  %313 = cast(meta[relay.Constant][20] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %314 = reshape(%312, newshape=[]) /* ty=bool */;
  %315 = reshape(%313, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), bool] */;
  %316 = @func_3223(%314, %315) /* ty=(Tensor[(10, 14, 16), uint32], Tensor[(10, 14, 16), float32]) */;
  %317 = %316.1;
  %318 = cast(%317, dtype="float64") /* ty=Tensor[(10, 14, 16), float64] */;
  %319 = cast(meta[relay.Constant][22] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %320 = cast(meta[relay.Constant][22] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %321 = cast(meta[relay.Constant][23] /* ty=Tensor[(8), uint8] */, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %322 = reshape(%319, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %323 = reshape(%320, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %324 = reshape(%321, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %325 = @func_666(%322, %323, %324) /* ty=(Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) */;
  %326 = @func_5861() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %327 = floor_divide(%304, %305) /* ty=Tensor[(10, 13, 13), float32] */;
  %328 = @func_3375(%308, %309) /* ty=Tensor[(7, 12, 11), float64] */;
  %329 = @func_4152(%311) /* ty=Tensor[(6, 13, 11), bool] */;
  %330 = asin(%318) /* ty=Tensor[(10, 14, 16), float64] */;
  %331 = %325.2;
  %332 = %326.0;
  (meta[relay.Constant][20] /* ty=Tensor[(2240), bool] */, %327, %328, meta[relay.Constant][21] /* ty=Tensor[(924), int32] */, %329, %var_6419, %330, %331, meta[relay.Constant][22] /* ty=Tensor[(1456), float32] */, meta[relay.Constant][23] /* ty=Tensor[(8), uint8] */, %332)
}

def @func_5312(%var_5310: Tensor[(2730), float32]) -> (Tensor[(10, 13, 13), float32], Tensor[(2730), bool], Tensor[(14, 15, 13), float64], Tensor[(10, 13, 13), float32]) {
  @func_5309(%var_5310) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(2730), bool], Tensor[(14, 15, 13), float64], Tensor[(10, 13, 13), float32]) */
}

def @func_4453(%var_4452: Tensor[(6, 13, 9), float64]) -> (Tensor[(6, 13, 9), float64], Tensor[(10, 13, 13), float32], Tensor[(11, 16, 12), uint32], Tensor[(2112), float32]) {
  %339 = fn (%var_4424: Tensor[(6, 13, 9), float64]) -> (Tensor[(6, 13, 9), float64], Tensor[(10, 13, 13), float32], Tensor[(11, 16, 12), uint32], Tensor[(2112), float32]) {
    %333 = cast(%var_4424, dtype="float64") /* ty=Tensor[(6, 13, 9), float64] */;
    %334 = cast(meta[relay.Constant][24] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
    %335 = reshape(%334, newshape=[11, 16, 12]) /* ty=Tensor[(11, 16, 12), float32] */;
    %336 = sqrt(%333) /* ty=Tensor[(6, 13, 9), float64] */;
    %337 = @func_4367() /* ty=Tensor[(10, 13, 13), float32] */;
    %338 = @func_2995(%335) /* ty=Tensor[(11, 16, 12), uint32] */;
    (%336, %337, %338, meta[relay.Constant][24] /* ty=Tensor[(2112), float32] */)
  };
  %339(%var_4452) /* ty=(Tensor[(6, 13, 9), float64], Tensor[(10, 13, 13), float32], Tensor[(11, 16, 12), uint32], Tensor[(2112), float32]) */
}

def @func_4637(%var_4635: Tensor[(4, 2), uint8]) -> (Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(4, 2), uint8]) {
  @func_4634(%var_4635) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(4, 2), uint8]) */
}

def @func_3463(%var_3461: Tensor[(960), float64], %var_3462: Tensor[(8, 1), uint8]) -> (Tensor[(8, 16, 7), float64], Tensor[(14, 13, 8), float32], Tensor[(960), float64], Tensor[(8, 1), uint8]) {
  %348 = fn (%var_3453: Tensor[(960), float64], %var_3454: Tensor[(8, 1), uint8]) -> (Tensor[(8, 16, 7), float64], Tensor[(14, 13, 8), float32], Tensor[(960), float64], Tensor[(8, 1), uint8]) {
    %340 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 16, 7), float64] */, dtype="float64") /* ty=Tensor[(8, 16, 7), float64] */;
    %341 = cast(%var_3453, dtype="float64") /* ty=Tensor[(960), float64] */;
    %342 = cast(%var_3454, dtype="uint8") /* ty=Tensor[(8, 1), uint8] */;
    %343 = reshape(%341, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float64] */;
    %344 = reshape(%342, newshape=[8]) /* ty=Tensor[(8), uint8] */;
    %345 = @func_835(%343, %344) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) */;
    %346 = cosh(%340) /* ty=Tensor[(8, 16, 7), float64] */;
    %347 = %345.3;
    (%346, %347, %var_3453, %var_3454)
  };
  %348(%var_3461, %var_3462) /* ty=(Tensor[(8, 16, 7), float64], Tensor[(14, 13, 8), float32], Tensor[(960), float64], Tensor[(8, 1), uint8]) */
}

def @func_1514(%var_1490: Tensor[(8, 9, 3), uint16], %var_1491: Tensor[(8, 9, 3), uint16]) -> Tensor[(8, 9, 3), int64] {
  %349 = cast(%var_1491, dtype="uint16") /* ty=Tensor[(8, 9, 3), uint16] */;
  %350 = shape_of(%var_1490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%var_1490, dtype="uint16") /* ty=Tensor[(8, 9, 3), uint16] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %353 = left_shift(%351, %352) /* ty=Tensor[(8, 9, 3), uint16] */;
  %354 = cast(%353, dtype="float64") /* ty=Tensor[(8, 9, 3), float64] */;
  %355 = rsqrt(%354) /* ty=Tensor[(8, 9, 3), float64] */;
  %356 = cast(%var_1490, dtype="int64") /* ty=Tensor[(8, 9, 3), int64] */;
  %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%355, dtype="int64") /* ty=Tensor[(8, 9, 3), int64] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  add(%358, %359) /* ty=Tensor[(8, 9, 3), int64] */
}

def @func_5375(%var_5363: Tensor[(1, 4, 8), float64], %var_5364: Tensor[(10, 4, 8), float64]) -> Tensor[(10, 4, 8), float64] {
  %360 = cast(%var_5363, dtype="float64") /* ty=Tensor[(1, 4, 8), float64] */;
  %361 = cast(%var_5364, dtype="float64") /* ty=Tensor[(10, 4, 8), float64] */;
  mod(%360, %361) /* ty=Tensor[(10, 4, 8), float64] */
}

def @func_5042(%var_5040: Tensor[(2730), float32], %var_5041: Tensor[(1, 8), uint8]) -> (Tensor[(10, 13, 13), float64], Tensor[(14, 15, 13), float32], Tensor[(2730), float32], Tensor[(14, 13, 8), float32], Tensor[(1456), float32], Tensor[(1, 8), uint8]) {
  @func_5038(%var_5040, %var_5041) /* ty=(Tensor[(10, 13, 13), float64], Tensor[(14, 15, 13), float32], Tensor[(2730), float32], Tensor[(14, 13, 8), float32], Tensor[(1456), float32], Tensor[(1, 8), uint8]) */
}

def @func_5002() -> (Tensor[(10, 13, 13), float32],) {
  @func_5000() /* ty=(Tensor[(10, 13, 13), float32],) */
}

def @main(%var_6801: Tensor[(9, 11, 1), float32]) -> (Tensor[(9, 11, 1), bool], Tensor[(9, 11, 1), float64]) {
  %362 = cast(3.43007f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %363 = cast(%var_6801, dtype="bool") /* ty=Tensor[(9, 11, 1), bool] */;
  %364 = cast(%var_6801, dtype="float64") /* ty=Tensor[(9, 11, 1), float64] */;
  %365 = greater(%362, %363) /* ty=Tensor[(9, 11, 1), bool] */;
  %366 = atan(%364) /* ty=Tensor[(9, 11, 1), float64] */;
  (%365, %366)
}

def @func_980(%var_979: Tensor[(4, 8, 2), float64]) -> (Tensor[(8), uint8], Tensor[(14, 5, 10), bool], Tensor[(4, 8, 2), int64], Tensor[(14, 13, 8), float32], Tensor[(4, 364), float32], Tensor[(4, 8, 2), float64]) {
  %400 = fn (%var_962: Tensor[(4, 8, 2), float64]) -> (Tensor[(8), uint8], Tensor[(14, 5, 10), bool], Tensor[(4, 8, 2), int64], Tensor[(14, 13, 8), float32], Tensor[(4, 364), float32], Tensor[(4, 8, 2), float64]) {
    %367 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 10), float64] */;
    %368 = sinh(%367) /* ty=Tensor[(14, 5, 10), float64] */;
    %369 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 5, 10), float64] */, dtype="bool") /* ty=Tensor[(14, 5, 10), bool] */;
    %370 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
    %371 = cast(%368, dtype="bool") /* ty=Tensor[(14, 5, 10), bool] */;
    %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %373 = less_equal(%371, %372) /* ty=Tensor[(14, 5, 10), bool] */;
    %374 = cast(%368, dtype="bool") /* ty=Tensor[(14, 5, 10), bool] */;
    %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
    %376 = cast(%373, dtype="bool") /* ty=Tensor[(14, 5, 10), bool] */;
    %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %378 = cast(meta[relay.Constant][26] /* ty=Tensor[(8), uint8] */, dtype="uint8") /* ty=Tensor[(8), uint8] */;
    %379 = reshape(%378, newshape=[4, 1, 2]) /* ty=Tensor[(4, 1, 2), uint8] */;
    %380 = @func_162(%379) /* ty=(Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) */;
    %381 = %380.0;
    %382 = cast(%var_962, dtype="int64") /* ty=Tensor[(4, 8, 2), int64] */;
    %383 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
    %384 = cast(%381, dtype="int64") /* ty=Tensor[(4, 8, 2), int64] */;
    %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %386 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 364), float32] */, dtype="float32") /* ty=Tensor[(4, 364), float32] */;
    %387 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 364), float32] */, dtype="float32") /* ty=Tensor[(4, 364), float32] */;
    %388 = cast(meta[relay.Constant][26] /* ty=Tensor[(8), uint8] */, dtype="uint8") /* ty=Tensor[(8), uint8] */;
    %389 = reshape(%386, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
    %390 = reshape(%387, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
    %391 = reshape(%388, newshape=[8]) /* ty=Tensor[(8), uint8] */;
    %392 = @func_666(%389, %390, %391) /* ty=(Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) */;
    %393 = cast(meta[relay.Constant][26] /* ty=Tensor[(8), uint8] */, dtype="uint8") /* ty=Tensor[(8), uint8] */;
    %394 = reshape(%393, newshape=[4, 1, 2]) /* ty=Tensor[(4, 1, 2), uint8] */;
    %395 = @func_162(%394) /* ty=(Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) */;
    %396 = logical_or(%376, %377) /* ty=Tensor[(14, 5, 10), bool] */;
    %397 = logical_xor(%384, %385) /* ty=Tensor[(4, 8, 2), int64] */;
    %398 = %392.3;
    %399 = %395.1;
    (meta[relay.Constant][26] /* ty=Tensor[(8), uint8] */, %396, %397, %398, meta[relay.Constant][28] /* ty=Tensor[(4, 364), float32] */, %399)
  };
  %400(%var_979) /* ty=(Tensor[(8), uint8], Tensor[(14, 5, 10), bool], Tensor[(4, 8, 2), int64], Tensor[(14, 13, 8), float32], Tensor[(4, 364), float32], Tensor[(4, 8, 2), float64]) */
}

def @func_4369() -> Tensor[(10, 13, 13), float32] {
  @func_4367() /* ty=Tensor[(10, 13, 13), float32] */
}

def @func_5862() -> (Tensor[(10, 13, 13), float32],) {
  %402 = fn () -> (Tensor[(10, 13, 13), float32],) {
    %401 = @func_5202() /* ty=Tensor[(10, 13, 13), float32] */;
    (%401,)
  };
  %402() /* ty=(Tensor[(10, 13, 13), float32],) */
}

def @func_6023() -> (Tensor[(10, 13, 13), float32],) {
  %403 = @func_5861() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %404 = %403.0;
  (%404,)
}

def @func_2675(%var_2640: Tensor[(7, 5, 3), bool], %var_2641: Tensor[(7, 5, 3), bool]) -> (Tensor[(7, 5, 3), bool],) {
  %405 = cast(%var_2641, dtype="bool") /* ty=Tensor[(7, 5, 3), bool] */;
  %406 = shape_of(%var_2640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%var_2640, dtype="bool") /* ty=Tensor[(7, 5, 3), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %409 = logical_or(%407, %408) /* ty=Tensor[(7, 5, 3), bool] */;
  (%409,)
}

def @func_3226(%var_3224: bool, %var_3225: Tensor[(10, 14, 16), bool]) -> (Tensor[(10, 14, 16), uint32], Tensor[(10, 14, 16), float32]) {
  %430 = fn (%var_3174: bool, %var_3175: Tensor[(10, 14, 16), bool]) -> (Tensor[(10, 14, 16), uint32], Tensor[(10, 14, 16), float32]) {
    %410 = cast(%var_3174, dtype="bool") /* ty=bool */;
    %411 = cast(%var_3175, dtype="bool") /* ty=Tensor[(10, 14, 16), bool] */;
    %412 = logical_and(%410, %411) /* ty=Tensor[(10, 14, 16), bool] */;
    %413 = cast(%var_3175, dtype="uint32") /* ty=Tensor[(10, 14, 16), uint32] */;
    %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
    %415 = cast(%412, dtype="uint32") /* ty=Tensor[(10, 14, 16), uint32] */;
    %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %417 = cast(%412, dtype="float32") /* ty=Tensor[(10, 14, 16), float32] */;
    %418 = asinh(%417) /* ty=Tensor[(10, 14, 16), float32] */;
    %419 = cast(%418, dtype="float64") /* ty=Tensor[(10, 14, 16), float64] */;
    %420 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
    %421 = cast(%412, dtype="float64") /* ty=Tensor[(10, 14, 16), float64] */;
    %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %423 = floor_divide(%421, %422) /* ty=Tensor[(10, 14, 16), float64] */;
    %424 = cast(%423, dtype="float32") /* ty=Tensor[(10, 14, 16), float32] */;
    %425 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
    %426 = cast(%418, dtype="float32") /* ty=Tensor[(10, 14, 16), float32] */;
    %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %428 = bitwise_or(%415, %416) /* ty=Tensor[(10, 14, 16), uint32] */;
    %429 = floor_mod(%426, %427) /* ty=Tensor[(10, 14, 16), float32] */;
    (%428, %429)
  };
  %430(%var_3224, %var_3225) /* ty=(Tensor[(10, 14, 16), uint32], Tensor[(10, 14, 16), float32]) */
}

def @func_6627(%var_6625: Tensor[(6, 6, 10), uint16], %var_6626: Tensor[(6, 6, 10), uint16]) -> (Tensor[(6, 6, 10), uint16], Tensor[(7, 5, 3), bool], Tensor[(105, 1), bool]) {
  @func_6623(%var_6625, %var_6626) /* ty=(Tensor[(6, 6, 10), uint16], Tensor[(7, 5, 3), bool], Tensor[(105, 1), bool]) */
}

def @func_5742(%var_5738: Tensor[(234), bool], %var_5739: Tensor[(8), uint8], %var_5740: Tensor[(112), uint16], %var_5741: Tensor[(960), float64]) -> (Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(8, 14), bool], Tensor[(112), uint16], Tensor[(2730), bool], Tensor[(2730), float32], Tensor[(14, 13, 8), float32], Tensor[(10, 13, 13), float32], Tensor[(16, 15, 4), float64], Tensor[(960), float64], Tensor[(3, 6, 13), float32], Tensor[(3, 6, 13), bool], Tensor[(3, 6, 13), int64], Tensor[(3, 6, 13), float32], Tensor[(14, 15, 13), float64], Tensor[(3, 6, 13), float32]) {
  %511 = fn (%var_5577: Tensor[(234), bool], %var_5606: Tensor[(8), uint8], %var_5610: Tensor[(112), uint16], %var_5658: Tensor[(960), float64]) -> (Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(8, 14), bool], Tensor[(112), uint16], Tensor[(2730), bool], Tensor[(2730), float32], Tensor[(14, 13, 8), float32], Tensor[(10, 13, 13), float32], Tensor[(16, 15, 4), float64], Tensor[(960), float64], Tensor[(3, 6, 13), float32], Tensor[(3, 6, 13), bool], Tensor[(3, 6, 13), int64], Tensor[(3, 6, 13), float32], Tensor[(14, 15, 13), float64], Tensor[(3, 6, 13), float32]) {
    %431 = @func_4892() /* ty=(Tensor[(10, 13, 13), float32],) */;
    %432 = cast(%var_5606, dtype="uint8") /* ty=Tensor[(8), uint8] */;
    %433 = reshape(%432, newshape=[4, 2]) /* ty=Tensor[(4, 2), uint8] */;
    %434 = @func_4634(%433) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(4, 2), uint8]) */;
    %435 = cast(%var_5610, dtype="uint16") /* ty=Tensor[(112), uint16] */;
    %436 = cast(%var_5610, dtype="uint16") /* ty=Tensor[(112), uint16] */;
    %437 = reshape(%435, newshape=[8, 14]) /* ty=Tensor[(8, 14), uint16] */;
    %438 = reshape(%436, newshape=[8, 14]) /* ty=Tensor[(8, 14), uint16] */;
    %439 = cast(meta[relay.Constant][29] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %440 = reshape(%439, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
    %441 = @func_5309(%440) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(2730), bool], Tensor[(14, 15, 13), float64], Tensor[(10, 13, 13), float32]) */;
    %442 = %441.1;
    %443 = cast(%442, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %444 = cast(%var_5606, dtype="uint8") /* ty=Tensor[(8), uint8] */;
    %445 = reshape(%443, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
    %446 = reshape(%444, newshape=[1, 8]) /* ty=Tensor[(1, 8), uint8] */;
    %447 = @func_5038(%445, %446) /* ty=(Tensor[(10, 13, 13), float64], Tensor[(14, 15, 13), float32], Tensor[(2730), float32], Tensor[(14, 13, 8), float32], Tensor[(1456), float32], Tensor[(1, 8), uint8]) */;
    %448 = cast(%var_5658, dtype="float64") /* ty=Tensor[(960), float64] */;
    %449 = cast(%var_5606, dtype="uint8") /* ty=Tensor[(8), uint8] */;
    %450 = reshape(%448, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float64] */;
    %451 = reshape(%449, newshape=[8]) /* ty=Tensor[(8), uint8] */;
    %452 = @func_835(%450, %451) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) */;
    %453 = cast(%var_5577, dtype="bool") /* ty=Tensor[(234), bool] */;
    %454 = cast(%var_5577, dtype="bool") /* ty=Tensor[(234), bool] */;
    %455 = reshape(%453, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), bool] */;
    %456 = reshape(%454, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), bool] */;
    %457 = @func_4003(%455, %456) /* ty=(Tensor[(3, 6, 13), bool],) */;
    %458 = %457.0;
    %459 = cast(%458, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
    %460 = rsqrt(%459) /* ty=Tensor[(3, 6, 13), float32] */;
    %461 = cast(%var_5577, dtype="bool") /* ty=Tensor[(234), bool] */;
    %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
    %463 = cast(%460, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
    %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %465 = less(%463, %464) /* ty=Tensor[(3, 6, 13), bool] */;
    %466 = cast(%460, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
    %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
    %468 = cast(%465, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
    %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %470 = cast(%460, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
    %471 = cos(%470) /* ty=Tensor[(3, 6, 13), float32] */;
    %472 = cast(%var_5577, dtype="uint64") /* ty=Tensor[(234), uint64] */;
    %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
    %474 = cast(%471, dtype="uint64") /* ty=Tensor[(3, 6, 13), uint64] */;
    %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %476 = bitwise_and(%474, %475) /* ty=Tensor[(3, 6, 13), uint64] */;
    %477 = cast(%476, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
    %478 = sqrt(%477) /* ty=Tensor[(3, 6, 13), float32] */;
    %479 = cast(%478, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
    %480 = cast(%476, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
    %481 = reshape(%479, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), bool] */;
    %482 = reshape(%480, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), bool] */;
    %483 = @func_4003(%481, %482) /* ty=(Tensor[(3, 6, 13), bool],) */;
    %484 = cast(%471, dtype="int64") /* ty=Tensor[(3, 6, 13), int64] */;
    %485 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
    %486 = cast(%460, dtype="int64") /* ty=Tensor[(3, 6, 13), int64] */;
    %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %488 = cast(%478, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
    %489 = asin(%488) /* ty=Tensor[(3, 6, 13), float32] */;
    %490 = cast(%489, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
    %491 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
    %492 = cast(%478, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
    %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %494 = cast(meta[relay.Constant][29] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %495 = reshape(%494, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
    %496 = @func_5309(%495) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(2730), bool], Tensor[(14, 15, 13), float64], Tensor[(10, 13, 13), float32]) */;
    %497 = cast(%478, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
    %498 = @func_5341() /* ty=Tensor[(10, 13, 13), float32] */;
    %499 = %431.0;
    %500 = %434.1;
    %501 = @func_4525(%437, %438) /* ty=Tensor[(8, 14), bool] */;
    %502 = %447.3;
    %503 = @func_5341() /* ty=Tensor[(10, 13, 13), float32] */;
    %504 = %452.0;
    %505 = mod(%468, %469) /* ty=Tensor[(3, 6, 13), float32] */;
    %506 = %483.0;
    %507 = bitwise_xor(%486, %487) /* ty=Tensor[(3, 6, 13), int64] */;
    %508 = power(%492, %493) /* ty=Tensor[(3, 6, 13), float32] */;
    %509 = %496.2;
    %510 = atanh(%497) /* ty=Tensor[(3, 6, 13), float32] */;
    (%498, %499, %500, %var_5606, %501, %var_5610, %442, meta[relay.Constant][29] /* ty=Tensor[(2730), float32] */, %502, %503, %504, %var_5658, %505, %506, %507, %508, %509, %510)
  };
  %511(%var_5738, %var_5739, %var_5740, %var_5741) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(8, 14), bool], Tensor[(112), uint16], Tensor[(2730), bool], Tensor[(2730), float32], Tensor[(14, 13, 8), float32], Tensor[(10, 13, 13), float32], Tensor[(16, 15, 4), float64], Tensor[(960), float64], Tensor[(3, 6, 13), float32], Tensor[(3, 6, 13), bool], Tensor[(3, 6, 13), int64], Tensor[(3, 6, 13), float32], Tensor[(14, 15, 13), float64], Tensor[(3, 6, 13), float32]) */
}

def @func_6591(%var_6587: Tensor[(2730), float32], %var_6588: Tensor[(4, 2), uint8], %var_6589: Tensor[(1152), float64], %var_6590: bool) -> (Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float64], Tensor[(2730), float32], Tensor[(4, 2), uint8], Tensor[(2, 768), float32], Tensor[(1152), float64], Tensor[(14, 13, 8), float32], Tensor[(1456), float32], Tensor[(8, 144), float64], Tensor[(24, 48), float64], Tensor[(240), float64], bool, Tensor[(2240), bool], Tensor[(896), bool]) {
  @func_6585(%var_6587, %var_6588, %var_6589, %var_6590) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float64], Tensor[(2730), float32], Tensor[(4, 2), uint8], Tensor[(2, 768), float32], Tensor[(1152), float64], Tensor[(14, 13, 8), float32], Tensor[(1456), float32], Tensor[(8, 144), float64], Tensor[(24, 48), float64], Tensor[(240), float64], bool, Tensor[(2240), bool], Tensor[(896), bool]) */
}

def @func_3821(%var_3819: Tensor[(12, 16, 11), float64]) -> (Tensor[(12, 16, 11), float64], Tensor[(8, 9, 3), int64], Tensor[(216), uint16]) {
  @func_3818(%var_3819) /* ty=(Tensor[(12, 16, 11), float64], Tensor[(8, 9, 3), int64], Tensor[(216), uint16]) */
}

def @func_1875(%var_1851: Tensor[(15, 4, 4), float64]) -> (Tensor[(15, 4, 4), int32],) {
  %512 = cast(%var_1851, dtype="float64") /* ty=Tensor[(15, 4, 4), float64] */;
  %513 = asin(%512) /* ty=Tensor[(15, 4, 4), float64] */;
  %514 = cast(%var_1851, dtype="int32") /* ty=Tensor[(15, 4, 4), int32] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%513, dtype="int32") /* ty=Tensor[(15, 4, 4), int32] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %518 = maximum(%516, %517) /* ty=Tensor[(15, 4, 4), int32] */;
  (%518,)
}

def @func_4529(%var_4527: Tensor[(8, 14), uint16], %var_4528: Tensor[(8, 14), uint16]) -> Tensor[(8, 14), bool] {
  @func_4525(%var_4527, %var_4528) /* ty=Tensor[(8, 14), bool] */
}

def @func_4154(%var_4153: Tensor[(6, 13, 11), int64]) -> Tensor[(6, 13, 11), bool] {
  %523 = fn (%var_4145: Tensor[(6, 13, 11), int64]) -> Tensor[(6, 13, 11), bool] {
    %519 = cast(%var_4145, dtype="bool") /* ty=Tensor[(6, 13, 11), bool] */;
    %520 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(6, 13, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %521 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 13, 11), int64] */, dtype="bool") /* ty=Tensor[(6, 13, 11), bool] */;
    %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%521, %522) /* ty=Tensor[(6, 13, 11), bool] */
  };
  %523(%var_4153) /* ty=Tensor[(6, 13, 11), bool] */
}

def @func_4839(%var_4838: Tensor[(16, 8, 10), uint64]) -> (Tensor[(16, 8, 10), uint64], Tensor[(16, 8, 10), float32], Tensor[(4, 364), float32], Tensor[(64), float64], Tensor[(10, 13, 13), float32]) {
  %537 = fn (%var_4794: Tensor[(16, 8, 10), uint64]) -> (Tensor[(16, 8, 10), uint64], Tensor[(16, 8, 10), float32], Tensor[(4, 364), float32], Tensor[(64), float64], Tensor[(10, 13, 13), float32]) {
    %524 = cast(%var_4794, dtype="uint64") /* ty=Tensor[(16, 8, 10), uint64] */;
    %525 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(16, 8, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %526 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 8, 10), uint64] */, dtype="uint64") /* ty=Tensor[(16, 8, 10), uint64] */;
    %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %528 = cast(%var_4794, dtype="float32") /* ty=Tensor[(16, 8, 10), float32] */;
    %529 = cast(meta[relay.Constant][32] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %530 = reshape(%529, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), float64] */;
    %531 = @func_978(%530) /* ty=(Tensor[(8), uint8], Tensor[(14, 5, 10), bool], Tensor[(4, 8, 2), int64], Tensor[(14, 13, 8), float32], Tensor[(4, 364), float32], Tensor[(4, 8, 2), float64]) */;
    %532 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
    %533 = add(%526, %527) /* ty=Tensor[(16, 8, 10), uint64] */;
    %534 = acosh(%528) /* ty=Tensor[(16, 8, 10), float32] */;
    %535 = %531.4;
    %536 = %532.0;
    (%533, %534, %535, meta[relay.Constant][32] /* ty=Tensor[(64), float64] */, %536)
  };
  %537(%var_4838) /* ty=(Tensor[(16, 8, 10), uint64], Tensor[(16, 8, 10), float32], Tensor[(4, 364), float32], Tensor[(64), float64], Tensor[(10, 13, 13), float32]) */
}

def @func_1807(%var_1803: Tensor[(12, 9, 5), float64], %var_1804: Tensor[(12, 9, 5), float64], %var_1805: Tensor[(12, 9, 5), float64], %var_1806: Tensor[(8), uint8]) -> (Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float64], Tensor[(960), float64], Tensor[(4, 8, 2), float64]) {
  @func_1801(%var_1803, %var_1804, %var_1805, %var_1806) /* ty=(Tensor[(12, 9, 5), float64], Tensor[(12, 9, 5), bool], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float64], Tensor[(960), float64], Tensor[(4, 8, 2), float64]) */
}

def @func_6377() -> (Tensor[(10, 13, 13), bool], Tensor[(10, 13, 13), float64]) {
  %538 = @func_5861() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %539 = %538.0;
  %540 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 13, 13), float32] */, dtype="bool") /* ty=Tensor[(10, 13, 13), bool] */;
  %541 = shape_of(%539, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(%539, dtype="bool") /* ty=Tensor[(10, 13, 13), bool] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %544 = cast(%539, dtype="float64") /* ty=Tensor[(10, 13, 13), float64] */;
  %545 = logical_or(%542, %543) /* ty=Tensor[(10, 13, 13), bool] */;
  %546 = exp(%544) /* ty=Tensor[(10, 13, 13), float64] */;
  (%545, %546)
}

def @func_1698(%var_1644: Tensor[(16, 16, 6), float32], %var_1645: Tensor[(16, 16, 6), float32], %var_1650: Tensor[(960), float64], %var_1651: Tensor[(8), uint8], %var_1665: Tensor[(4, 288), float64], %var_1666: Tensor[(98), float64], %var_1689: Tensor[(16, 16, 6), float32]) -> (Tensor[(16, 16, 6), bool], Tensor[(960), float64], Tensor[(12, 6, 16), float64], Tensor[(4, 288), float64], Tensor[(98), float64], Tensor[(14, 13, 8), int32], Tensor[(14, 13, 8), float32], Tensor[(16, 16, 6), bool]) {
  %547 = cast(%var_1645, dtype="bool") /* ty=Tensor[(16, 16, 6), bool] */;
  %548 = shape_of(%var_1644, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%var_1644, dtype="bool") /* ty=Tensor[(16, 16, 6), bool] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %551 = cast(%var_1665, dtype="float64") /* ty=Tensor[(4, 288), float64] */;
  %552 = cast(%var_1666, dtype="float64") /* ty=Tensor[(98), float64] */;
  %553 = reshape(%551, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float64] */;
  %554 = reshape(%552, newshape=[98]) /* ty=Tensor[(98), float64] */;
  %555 = @func_1462(%553, %554) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(14, 7, 12), bool], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(120, 8), float64], Tensor[(14, 5, 10), bool], Tensor[(1176, 8), int32]) */;
  %556 = cast(%var_1650, dtype="float64") /* ty=Tensor[(960), float64] */;
  %557 = cast(%var_1651, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %558 = reshape(%556, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float64] */;
  %559 = reshape(%557, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %560 = @func_835(%558, %559) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) */;
  %561 = %560.4;
  %562 = cast(%561, dtype="int32") /* ty=Tensor[(14, 13, 8), int32] */;
  %563 = cast(%var_1651, dtype="int32") /* ty=Tensor[(8), int32] */;
  %564 = cast(%var_1650, dtype="float64") /* ty=Tensor[(960), float64] */;
  %565 = cast(%var_1651, dtype="uint8") /* ty=Tensor[(8), uint8] */;
  %566 = reshape(%564, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), float64] */;
  %567 = reshape(%565, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %568 = @func_835(%566, %567) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) */;
  %569 = cast(%var_1689, dtype="bool") /* ty=Tensor[(16, 16, 6), bool] */;
  %570 = shape_of(%var_1645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%var_1645, dtype="bool") /* ty=Tensor[(16, 16, 6), bool] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %573 = greater(%549, %550) /* ty=Tensor[(16, 16, 6), bool] */;
  %574 = %555.0;
  %575 = add(%562, %563) /* ty=Tensor[(14, 13, 8), int32] */;
  %576 = %568.3;
  %577 = equal(%571, %572) /* ty=Tensor[(16, 16, 6), bool] */;
  (%573, %var_1650, %574, %var_1665, %var_1666, %575, %576, %577)
}

def @func_4254(%var_4251: bool, %var_4252: Tensor[(2, 12, 10), bool], %var_4253: Tensor[(112, 2), bool]) -> (Tensor[(2, 12, 10), bool], Tensor[(1152), float64], Tensor[(112, 2), bool], Tensor[(112, 8), bool], Tensor[(2, 12, 10), float32]) {
  %593 = fn (%var_4231: bool, %var_4232: Tensor[(2, 12, 10), bool], %var_4244: Tensor[(112, 2), bool]) -> (Tensor[(2, 12, 10), bool], Tensor[(1152), float64], Tensor[(112, 2), bool], Tensor[(112, 8), bool], Tensor[(2, 12, 10), float32]) {
    %578 = cast(%var_4231, dtype="bool") /* ty=bool */;
    %579 = cast(%var_4232, dtype="bool") /* ty=Tensor[(2, 12, 10), bool] */;
    %580 = cast(%var_4244, dtype="bool") /* ty=Tensor[(112, 2), bool] */;
    %581 = cast(meta[relay.Constant][34] /* ty=Tensor[(112, 8), bool] */, dtype="bool") /* ty=Tensor[(112, 8), bool] */;
    %582 = cast(meta[relay.Constant][34] /* ty=Tensor[(112, 8), bool] */, dtype="bool") /* ty=Tensor[(112, 8), bool] */;
    %583 = cast(meta[relay.Constant][34] /* ty=Tensor[(112, 8), bool] */, dtype="float64") /* ty=Tensor[(112, 8), float64] */;
    %584 = reshape(%580, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), bool] */;
    %585 = reshape(%581, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), bool] */;
    %586 = reshape(%582, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), bool] */;
    %587 = reshape(%583, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float64] */;
    %588 = @func_2146(%584, %585, %586, %587) /* ty=(Tensor[(14, 4, 16), int32], Tensor[(14, 4, 16), int8], Tensor[(4, 8, 2), float64], Tensor[(1152), float64], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(4, 2), uint8], Tensor[(14, 4, 16), float64]) */;
    %589 = cast(%var_4232, dtype="float32") /* ty=Tensor[(2, 12, 10), float32] */;
    %590 = logical_and(%578, %579) /* ty=Tensor[(2, 12, 10), bool] */;
    %591 = %588.3;
    %592 = asinh(%589) /* ty=Tensor[(2, 12, 10), float32] */;
    (%590, %591, %var_4244, meta[relay.Constant][34] /* ty=Tensor[(112, 8), bool] */, %592)
  };
  %593(%var_4251, %var_4252, %var_4253) /* ty=(Tensor[(2, 12, 10), bool], Tensor[(1152), float64], Tensor[(112, 2), bool], Tensor[(112, 8), bool], Tensor[(2, 12, 10), float32]) */
}

def @func_6451(%var_6449: bool, %var_6450: Tensor[(858), int64]) -> (Tensor[(2240), bool], Tensor[(10, 13, 13), float32], Tensor[(7, 12, 11), float64], Tensor[(924), int32], Tensor[(6, 13, 11), bool], Tensor[(858), int64], Tensor[(10, 14, 16), float64], Tensor[(8), uint8], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(10, 13, 13), float32]) {
  @func_6447(%var_6449, %var_6450) /* ty=(Tensor[(2240), bool], Tensor[(10, 13, 13), float32], Tensor[(7, 12, 11), float64], Tensor[(924), int32], Tensor[(6, 13, 11), bool], Tensor[(858), int64], Tensor[(10, 14, 16), float64], Tensor[(8), uint8], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(10, 13, 13), float32]) */
}

def @func_5186(%var_5143: Tensor[(10, 13, 13), float32]) -> (Tensor[(10, 13, 13), uint16], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32]) {
  %594 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %595 = %594.0;
  %596 = cast(%var_5143, dtype="uint16") /* ty=Tensor[(10, 13, 13), uint16] */;
  %597 = shape_of(%595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%595, dtype="uint16") /* ty=Tensor[(10, 13, 13), uint16] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %600 = cast(%var_5143, dtype="bool") /* ty=Tensor[(10, 13, 13), bool] */;
  %601 = shape_of(%595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%595, dtype="bool") /* ty=Tensor[(10, 13, 13), bool] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %604 = less(%602, %603) /* ty=Tensor[(10, 13, 13), bool] */;
  %605 = cast(%604, dtype="float32") /* ty=Tensor[(10, 13, 13), float32] */;
  %606 = bitwise_xor(%598, %599) /* ty=Tensor[(10, 13, 13), uint16] */;
  %607 = @func_4367() /* ty=Tensor[(10, 13, 13), float32] */;
  %608 = atanh(%605) /* ty=Tensor[(10, 13, 13), float32] */;
  (%606, %607, %608)
}

def @func_6299(%var_6295: Tensor[(240), float64], %var_6296: bool, %var_6297: Tensor[(2240), bool], %var_6298: Tensor[(896), bool]) -> (Tensor[(14, 13, 8), int32], Tensor[(98), float64], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float64], Tensor[(10, 13, 13), bool], Tensor[(4, 2), uint8], Tensor[(8, 30), float64], Tensor[(240), float64], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32], Tensor[(8, 1536), int8], Tensor[(10, 14, 16), float32], Tensor[(2240), bool], Tensor[(480, 2), int8], Tensor[(24, 48), float64], Tensor[(10, 14, 16), float32], Tensor[(105), bool], Tensor[(224), bool], Tensor[(896), bool], Tensor[(98), float64], Tensor[(14, 7, 12), bool]) {
  %689 = fn (%var_6179: Tensor[(240), float64], %var_6211: bool, %var_6212: Tensor[(2240), bool], %var_6241: Tensor[(896), bool]) -> (Tensor[(14, 13, 8), int32], Tensor[(98), float64], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float64], Tensor[(10, 13, 13), bool], Tensor[(4, 2), uint8], Tensor[(8, 30), float64], Tensor[(240), float64], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32], Tensor[(8, 1536), int8], Tensor[(10, 14, 16), float32], Tensor[(2240), bool], Tensor[(480, 2), int8], Tensor[(24, 48), float64], Tensor[(10, 14, 16), float32], Tensor[(105), bool], Tensor[(224), bool], Tensor[(896), bool], Tensor[(98), float64], Tensor[(14, 7, 12), bool]) {
    %609 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 1536), float32] */, dtype="float32") /* ty=Tensor[(1, 1536), float32] */;
    %610 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 1536), float32] */, dtype="float32") /* ty=Tensor[(1, 1536), float32] */;
    %611 = cast(meta[relay.Constant][36] /* ty=Tensor[(480, 2), float64] */, dtype="float64") /* ty=Tensor[(480, 2), float64] */;
    %612 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 1), uint8] */, dtype="uint8") /* ty=Tensor[(8, 1), uint8] */;
    %613 = cast(meta[relay.Constant][38] /* ty=Tensor[(24, 48), float64] */, dtype="float64") /* ty=Tensor[(24, 48), float64] */;
    %614 = cast(meta[relay.Constant][39] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
    %615 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 1536), float32] */, dtype="float32") /* ty=Tensor[(1, 1536), float32] */;
    %616 = reshape(%609, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float32] */;
    %617 = reshape(%610, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float32] */;
    %618 = reshape(%611, newshape=[960]) /* ty=Tensor[(960), float64] */;
    %619 = reshape(%612, newshape=[8]) /* ty=Tensor[(8), uint8] */;
    %620 = reshape(%613, newshape=[4, 288]) /* ty=Tensor[(4, 288), float64] */;
    %621 = reshape(%614, newshape=[98]) /* ty=Tensor[(98), float64] */;
    %622 = reshape(%615, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float32] */;
    %623 = @func_1698(%616, %617, %618, %619, %620, %621, %622) /* ty=(Tensor[(16, 16, 6), bool], Tensor[(960), float64], Tensor[(12, 6, 16), float64], Tensor[(4, 288), float64], Tensor[(98), float64], Tensor[(14, 13, 8), int32], Tensor[(14, 13, 8), float32], Tensor[(16, 16, 6), bool]) */;
    %624 = @func_5928() /* ty=(Tensor[(10, 13, 13), float32],) */;
    %625 = @func_5114() /* ty=(Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32]) */;
    %626 = %625.0;
    %627 = cast(%626, dtype="float32") /* ty=Tensor[(10, 13, 13), float32] */;
    %628 = acos(%627) /* ty=Tensor[(10, 13, 13), float32] */;
    %629 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 13, 13), float32] */, dtype="float64") /* ty=Tensor[(10, 13, 13), float64] */;
    %630 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
    %631 = cast(%628, dtype="float64") /* ty=Tensor[(10, 13, 13), float64] */;
    %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %633 = cast(%628, dtype="bool") /* ty=Tensor[(10, 13, 13), bool] */;
    %634 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(10, 13, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %635 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 13, 13), float32] */, dtype="bool") /* ty=Tensor[(10, 13, 13), bool] */;
    %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %637 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 1), uint8] */, dtype="uint8") /* ty=Tensor[(8, 1), uint8] */;
    %638 = reshape(%637, newshape=[4, 2]) /* ty=Tensor[(4, 2), uint8] */;
    %639 = @func_4634(%638) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(4, 2), uint8]) */;
    %640 = cast(%var_6179, dtype="float64") /* ty=Tensor[(240), float64] */;
    %641 = reshape(%640, newshape=[8, 30]) /* ty=Tensor[(8, 30), float64] */;
    %642 = @func_4739(%641) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(8, 9, 3), int64], Tensor[(216), uint16], Tensor[(15, 4, 4), int32], Tensor[(8, 30), float64]) */;
    %643 = @func_6023() /* ty=(Tensor[(10, 13, 13), float32],) */;
    %644 = @func_5000() /* ty=(Tensor[(10, 13, 13), float32],) */;
    %645 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 1536), float32] */, dtype="int8") /* ty=Tensor[(1, 1536), int8] */;
    %646 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 1), uint8] */, dtype="int8") /* ty=Tensor[(8, 1), int8] */;
    %647 = cast(%var_6211, dtype="bool") /* ty=bool */;
    %648 = cast(%var_6212, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %649 = reshape(%647, newshape=[]) /* ty=bool */;
    %650 = reshape(%648, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), bool] */;
    %651 = @func_3223(%649, %650) /* ty=(Tensor[(10, 14, 16), uint32], Tensor[(10, 14, 16), float32]) */;
    %652 = cast(meta[relay.Constant][36] /* ty=Tensor[(480, 2), float64] */, dtype="int8") /* ty=Tensor[(480, 2), int8] */;
    %653 = cast(%var_6211, dtype="int8") /* ty=int8 */;
    %654 = cast(meta[relay.Constant][38] /* ty=Tensor[(24, 48), float64] */, dtype="float64") /* ty=Tensor[(24, 48), float64] */;
    %655 = cast(%var_6211, dtype="bool") /* ty=bool */;
    %656 = %651.1;
    %657 = cast(%656, dtype="bool") /* ty=Tensor[(10, 14, 16), bool] */;
    %658 = reshape(%655, newshape=[]) /* ty=bool */;
    %659 = reshape(%657, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), bool] */;
    %660 = @func_3223(%658, %659) /* ty=(Tensor[(10, 14, 16), uint32], Tensor[(10, 14, 16), float32]) */;
    %661 = cast(meta[relay.Constant][41] /* ty=Tensor[(224), bool] */, dtype="bool") /* ty=Tensor[(224), bool] */;
    %662 = cast(%var_6241, dtype="bool") /* ty=Tensor[(896), bool] */;
    %663 = reshape(%661, newshape=[224]) /* ty=Tensor[(224), bool] */;
    %664 = reshape(%662, newshape=[896]) /* ty=Tensor[(896), bool] */;
    %665 = @func_5975(%663, %664) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(105), bool], Tensor[(1152), float64], Tensor[(224), bool], Tensor[(896), bool]) */;
    %666 = cast(meta[relay.Constant][39] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
    %667 = reshape(%666, newshape=[98]) /* ty=Tensor[(98), float64] */;
    %668 = @func_6005(%667) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(98), float64], Tensor[(1176), float64]) */;
    %669 = cast(meta[relay.Constant][38] /* ty=Tensor[(24, 48), float64] */, dtype="float64") /* ty=Tensor[(24, 48), float64] */;
    %670 = cast(meta[relay.Constant][39] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
    %671 = reshape(%669, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float64] */;
    %672 = reshape(%670, newshape=[98]) /* ty=Tensor[(98), float64] */;
    %673 = @func_1462(%671, %672) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(14, 7, 12), bool], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(120, 8), float64], Tensor[(14, 5, 10), bool], Tensor[(1176, 8), int32]) */;
    %674 = %623.5;
    %675 = %624.0;
    %676 = mod(%631, %632) /* ty=Tensor[(10, 13, 13), float64] */;
    %677 = greater(%635, %636) /* ty=Tensor[(10, 13, 13), bool] */;
    %678 = %639.2;
    %679 = %642.4;
    %680 = %643.0;
    %681 = %644.0;
    %682 = left_shift(%645, %646) /* ty=Tensor[(8, 1536), int8] */;
    %683 = left_shift(%652, %653) /* ty=Tensor[(480, 2), int8] */;
    %684 = sigmoid(%654) /* ty=Tensor[(24, 48), float64] */;
    %685 = %660.1;
    %686 = %665.1;
    %687 = %668.2;
    %688 = %673.1;
    (%674, meta[relay.Constant][39] /* ty=Tensor[(98), float64] */, %675, %676, %677, %678, %679, %var_6179, %680, %681, %682, %656, %var_6212, %683, %684, %685, %686, meta[relay.Constant][41] /* ty=Tensor[(224), bool] */, %var_6241, %687, %688)
  };
  %689(%var_6295, %var_6296, %var_6297, %var_6298) /* ty=(Tensor[(14, 13, 8), int32], Tensor[(98), float64], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float64], Tensor[(10, 13, 13), bool], Tensor[(4, 2), uint8], Tensor[(8, 30), float64], Tensor[(240), float64], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32], Tensor[(8, 1536), int8], Tensor[(10, 14, 16), float32], Tensor[(2240), bool], Tensor[(480, 2), int8], Tensor[(24, 48), float64], Tensor[(10, 14, 16), float32], Tensor[(105), bool], Tensor[(224), bool], Tensor[(896), bool], Tensor[(98), float64], Tensor[(14, 7, 12), bool]) */
}

def @func_5038(%var_5029: Tensor[(2730), float32], %var_5036: Tensor[(1, 8), uint8]) -> (Tensor[(10, 13, 13), float64], Tensor[(14, 15, 13), float32], Tensor[(2730), float32], Tensor[(14, 13, 8), float32], Tensor[(1456), float32], Tensor[(1, 8), uint8]) {
  %690 = @func_4867() /* ty=Tensor[(10, 13, 13), float32] */;
  %691 = cast(%690, dtype="float64") /* ty=Tensor[(10, 13, 13), float64] */;
  %692 = cast(%var_5029, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %693 = reshape(%692, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
  %694 = @func_1576(%693) /* ty=(Tensor[(14, 15, 13), float32],) */;
  %695 = cast(meta[relay.Constant][42] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %696 = cast(meta[relay.Constant][42] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %697 = cast(%var_5036, dtype="uint8") /* ty=Tensor[(1, 8), uint8] */;
  %698 = reshape(%695, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %699 = reshape(%696, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %700 = reshape(%697, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %701 = @func_666(%698, %699, %700) /* ty=(Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) */;
  %702 = sin(%691) /* ty=Tensor[(10, 13, 13), float64] */;
  %703 = %694.0;
  %704 = %701.3;
  (%702, %703, %var_5029, %704, meta[relay.Constant][42] /* ty=Tensor[(1456), float32] */, %var_5036)
}

def @func_2151(%var_2147: Tensor[(14, 1, 16), bool], %var_2148: Tensor[(14, 4, 16), bool], %var_2149: Tensor[(14, 4, 16), bool], %var_2150: Tensor[(14, 4, 16), float64]) -> (Tensor[(14, 4, 16), int32], Tensor[(14, 4, 16), int8], Tensor[(4, 8, 2), float64], Tensor[(1152), float64], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(4, 2), uint8], Tensor[(14, 4, 16), float64]) {
  %732 = fn (%var_2086: Tensor[(14, 1, 16), bool], %var_2087: Tensor[(14, 4, 16), bool], %var_2092: Tensor[(14, 4, 16), bool], %var_2118: Tensor[(14, 4, 16), float64]) -> (Tensor[(14, 4, 16), int32], Tensor[(14, 4, 16), int8], Tensor[(4, 8, 2), float64], Tensor[(1152), float64], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(4, 2), uint8], Tensor[(14, 4, 16), float64]) {
    %705 = cast(%var_2086, dtype="bool") /* ty=Tensor[(14, 1, 16), bool] */;
    %706 = cast(%var_2087, dtype="bool") /* ty=Tensor[(14, 4, 16), bool] */;
    %707 = logical_and(%705, %706) /* ty=Tensor[(14, 4, 16), bool] */;
    %708 = cast(%var_2092, dtype="int32") /* ty=Tensor[(14, 4, 16), int32] */;
    %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
    %710 = cast(%707, dtype="int32") /* ty=Tensor[(14, 4, 16), int32] */;
    %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %712 = cast(%var_2092, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
    %713 = cos(%712) /* ty=Tensor[(14, 4, 16), float64] */;
    %714 = cast(%var_2118, dtype="int8") /* ty=Tensor[(14, 4, 16), int8] */;
    %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
    %716 = cast(%713, dtype="int8") /* ty=Tensor[(14, 4, 16), int8] */;
    %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %718 = cast(meta[relay.Constant][43] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
    %719 = cast(meta[relay.Constant][44] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
    %720 = reshape(%718, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float64] */;
    %721 = reshape(%719, newshape=[98]) /* ty=Tensor[(98), float64] */;
    %722 = @func_1462(%720, %721) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(14, 7, 12), bool], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(120, 8), float64], Tensor[(14, 5, 10), bool], Tensor[(1176, 8), int32]) */;
    %723 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 2), uint8] */, dtype="uint8") /* ty=Tensor[(4, 2), uint8] */;
    %724 = reshape(%723, newshape=[4, 1, 2]) /* ty=Tensor[(4, 1, 2), uint8] */;
    %725 = @func_162(%724) /* ty=(Tensor[(4, 8, 2), float64], Tensor[(4, 8, 2), float64]) */;
    %726 = cast(%713, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
    %727 = logical_xor(%710, %711) /* ty=Tensor[(14, 4, 16), int32] */;
    %728 = bitwise_or(%716, %717) /* ty=Tensor[(14, 4, 16), int8] */;
    %729 = %722.3;
    %730 = %725.1;
    %731 = acosh(%726) /* ty=Tensor[(14, 4, 16), float64] */;
    (%727, %728, %729, meta[relay.Constant][43] /* ty=Tensor[(1152), float64] */, meta[relay.Constant][44] /* ty=Tensor[(98), float64] */, %730, meta[relay.Constant][45] /* ty=Tensor[(4, 2), uint8] */, %731)
  };
  %732(%var_2147, %var_2148, %var_2149, %var_2150) /* ty=(Tensor[(14, 4, 16), int32], Tensor[(14, 4, 16), int8], Tensor[(4, 8, 2), float64], Tensor[(1152), float64], Tensor[(98), float64], Tensor[(4, 8, 2), float64], Tensor[(4, 2), uint8], Tensor[(14, 4, 16), float64]) */
}

def @func_6005(%var_5994: Tensor[(98), float64]) -> (Tensor[(10, 13, 13), float32], Tensor[(4, 8, 2), float64], Tensor[(98), float64], Tensor[(1176), float64]) {
  %733 = @func_4892() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %734 = cast(%var_5994, dtype="float64") /* ty=Tensor[(98), float64] */;
  %735 = cast(meta[relay.Constant][46] /* ty=Tensor[(1176), float64] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %736 = reshape(%734, newshape=[14, 7, 1]) /* ty=Tensor[(14, 7, 1), float64] */;
  %737 = reshape(%735, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
  %738 = @func_1041(%736, %737) /* ty=(Tensor[(14, 7, 12), bool], Tensor[(4, 8, 2), float64], Tensor[(960), float64], Tensor[(8), uint8], Tensor[(4, 8, 2), float64], Tensor[(14, 13, 8), float32]) */;
  %739 = %733.0;
  %740 = %738.4;
  (%739, %740, %var_5994, meta[relay.Constant][46] /* ty=Tensor[(1176), float64] */)
}

def @func_4367() -> Tensor[(10, 13, 13), float32] {
  %741 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %741.0
}

def @func_5189(%var_5187: Tensor[(10, 13, 13), float32]) -> (Tensor[(10, 13, 13), uint16], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32]) {
  @func_5186(%var_5187) /* ty=(Tensor[(10, 13, 13), uint16], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32]) */
}

def @func_5343() -> Tensor[(10, 13, 13), float32] {
  @func_5341() /* ty=Tensor[(10, 13, 13), float32] */
}

def @func_2539(%var_2518: Tensor[(240), float64]) -> (Tensor[(16, 7, 2), uint16], Tensor[(15, 4, 4), int32], Tensor[(240), float64], Tensor[(15, 4, 4), int32]) {
  %742 = cast(meta[relay.Constant][48] /* ty=Tensor[(16, 7, 2), uint16] */, dtype="uint16") /* ty=Tensor[(16, 7, 2), uint16] */;
  %743 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(16, 7, 2), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(meta[relay.Constant][47] /* ty=Tensor[(16, 7, 2), uint16] */, dtype="uint16") /* ty=Tensor[(16, 7, 2), uint16] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %746 = cast(%var_2518, dtype="float64") /* ty=Tensor[(240), float64] */;
  %747 = reshape(%746, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float64] */;
  %748 = @func_1875(%747) /* ty=(Tensor[(15, 4, 4), int32],) */;
  %749 = %748.0;
  %750 = cast(%749, dtype="float64") /* ty=Tensor[(15, 4, 4), float64] */;
  %751 = reshape(%750, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float64] */;
  %752 = @func_1875(%751) /* ty=(Tensor[(15, 4, 4), int32],) */;
  %753 = left_shift(%744, %745) /* ty=Tensor[(16, 7, 2), uint16] */;
  %754 = %752.0;
  (%753, %749, %var_2518, %754)
}

def @func_5341() -> Tensor[(10, 13, 13), float32] {
  %755 = @func_5000() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %755.0
}

def @func_6623(%var_6605: Tensor[(6, 6, 10), uint16], %var_6606: Tensor[(6, 6, 10), uint16]) -> (Tensor[(6, 6, 10), uint16], Tensor[(7, 5, 3), bool], Tensor[(105, 1), bool]) {
  %756 = cast(%var_6606, dtype="uint16") /* ty=Tensor[(6, 6, 10), uint16] */;
  %757 = shape_of(%var_6605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%var_6605, dtype="uint16") /* ty=Tensor[(6, 6, 10), uint16] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %760 = cast(meta[relay.Constant][49] /* ty=Tensor[(105, 1), bool] */, dtype="bool") /* ty=Tensor[(105, 1), bool] */;
  %761 = cast(meta[relay.Constant][49] /* ty=Tensor[(105, 1), bool] */, dtype="bool") /* ty=Tensor[(105, 1), bool] */;
  %762 = reshape(%760, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), bool] */;
  %763 = reshape(%761, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), bool] */;
  %764 = @func_2675(%762, %763) /* ty=(Tensor[(7, 5, 3), bool],) */;
  %765 = subtract(%758, %759) /* ty=Tensor[(6, 6, 10), uint16] */;
  %766 = %764.0;
  (%765, %766, meta[relay.Constant][49] /* ty=Tensor[(105, 1), bool] */)
}

def @func_5204() -> Tensor[(10, 13, 13), float32] {
  @func_5202() /* ty=Tensor[(10, 13, 13), float32] */
}

def @func_671(%var_668: Tensor[(14, 13, 8), float32], %var_669: Tensor[(14, 13, 8), float32], %var_670: Tensor[(8), uint8]) -> (Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) {
  @func_666(%var_668, %var_669, %var_670) /* ty=(Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) */
}

def @func_6025() -> (Tensor[(10, 13, 13), float32],) {
  @func_6023() /* ty=(Tensor[(10, 13, 13), float32],) */
}

def @func_2995(%var_2959: Tensor[(11, 16, 12), float32]) -> Tensor[(11, 16, 12), uint32] {
  %767 = cast(%var_2959, dtype="float32") /* ty=Tensor[(11, 16, 12), float32] */;
  %768 = cos(%767) /* ty=Tensor[(11, 16, 12), float32] */;
  %769 = cast(%768, dtype="float64") /* ty=Tensor[(11, 16, 12), float64] */;
  %770 = erf(%769) /* ty=Tensor[(11, 16, 12), float64] */;
  %771 = cast(%770, dtype="float32") /* ty=Tensor[(11, 16, 12), float32] */;
  %772 = shape_of(%var_2959, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%var_2959, dtype="float32") /* ty=Tensor[(11, 16, 12), float32] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %775 = floor_mod(%773, %774) /* ty=Tensor[(11, 16, 12), float32] */;
  %776 = cast(%770, dtype="uint32") /* ty=Tensor[(11, 16, 12), uint32] */;
  %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%775, dtype="uint32") /* ty=Tensor[(11, 16, 12), uint32] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  multiply(%778, %779) /* ty=Tensor[(11, 16, 12), uint32] */
}

def @func_6585(%var_6532: Tensor[(2730), float32], %var_6533: Tensor[(4, 2), uint8], %var_6539: Tensor[(1152), float64], %var_6578: bool) -> (Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float64], Tensor[(2730), float32], Tensor[(4, 2), uint8], Tensor[(2, 768), float32], Tensor[(1152), float64], Tensor[(14, 13, 8), float32], Tensor[(1456), float32], Tensor[(8, 144), float64], Tensor[(24, 48), float64], Tensor[(240), float64], bool, Tensor[(2240), bool], Tensor[(896), bool]) {
  %780 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
  %781 = cast(%var_6532, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %782 = cast(%var_6533, dtype="uint8") /* ty=Tensor[(4, 2), uint8] */;
  %783 = reshape(%781, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %784 = reshape(%782, newshape=[1, 8]) /* ty=Tensor[(1, 8), uint8] */;
  %785 = @func_5038(%783, %784) /* ty=(Tensor[(10, 13, 13), float64], Tensor[(14, 15, 13), float32], Tensor[(2730), float32], Tensor[(14, 13, 8), float32], Tensor[(1456), float32], Tensor[(1, 8), uint8]) */;
  %786 = cast(meta[relay.Constant][51] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %787 = cast(meta[relay.Constant][51] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %788 = cast(%var_6533, dtype="uint8") /* ty=Tensor[(4, 2), uint8] */;
  %789 = reshape(%786, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %790 = reshape(%787, newshape=[14, 13, 8]) /* ty=Tensor[(14, 13, 8), float32] */;
  %791 = reshape(%788, newshape=[8]) /* ty=Tensor[(8), uint8] */;
  %792 = @func_666(%789, %790, %791) /* ty=(Tensor[(14, 13, 8), int16], Tensor[(4, 8, 2), float64], Tensor[(8), uint8], Tensor[(14, 13, 8), float32]) */;
  %793 = cast(meta[relay.Constant][50] /* ty=Tensor[(2, 768), float32] */, dtype="float32") /* ty=Tensor[(2, 768), float32] */;
  %794 = cast(%var_6539, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %795 = reshape(%793, newshape=[1536]) /* ty=Tensor[(1536), float32] */;
  %796 = reshape(%794, newshape=[8, 144]) /* ty=Tensor[(8, 144), float64] */;
  %797 = @func_4855(%795, %796) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(14, 13, 8), int32], Tensor[(1536), float32], Tensor[(960), float64], Tensor[(8), uint8], Tensor[(8, 144), float64], Tensor[(98), float64]) */;
  %798 = %797.5;
  %799 = cast(%798, dtype="float64") /* ty=Tensor[(8, 144), float64] */;
  %800 = sinh(%799) /* ty=Tensor[(8, 144), float64] */;
  %801 = cast(%800, dtype="float64") /* ty=Tensor[(8, 144), float64] */;
  %802 = cast(meta[relay.Constant][52] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %803 = cast(%var_6578, dtype="bool") /* ty=bool */;
  %804 = cast(meta[relay.Constant][53] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %805 = cast(meta[relay.Constant][54] /* ty=Tensor[(896), bool] */, dtype="bool") /* ty=Tensor[(896), bool] */;
  %806 = reshape(%802, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %807 = reshape(%803, newshape=[]) /* ty=bool */;
  %808 = reshape(%804, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %809 = reshape(%805, newshape=[896]) /* ty=Tensor[(896), bool] */;
  %810 = @func_6294(%806, %807, %808, %809) /* ty=(Tensor[(14, 13, 8), int32], Tensor[(98), float64], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float64], Tensor[(10, 13, 13), bool], Tensor[(4, 2), uint8], Tensor[(8, 30), float64], Tensor[(240), float64], Tensor[(10, 13, 13), float32], Tensor[(10, 13, 13), float32], Tensor[(8, 1536), int8], Tensor[(10, 14, 16), float32], Tensor[(2240), bool], Tensor[(480, 2), int8], Tensor[(24, 48), float64], Tensor[(10, 14, 16), float32], Tensor[(105), bool], Tensor[(224), bool], Tensor[(896), bool], Tensor[(98), float64], Tensor[(14, 7, 12), bool]) */;
  %811 = %780.0;
  %812 = @func_5341() /* ty=Tensor[(10, 13, 13), float32] */;
  %813 = %785.0;
  %814 = %792.3;
  %815 = sin(%801) /* ty=Tensor[(8, 144), float64] */;
  %816 = %810.14;
  (%811, %812, %813, %var_6532, %var_6533, meta[relay.Constant][50] /* ty=Tensor[(2, 768), float32] */, %var_6539, %814, meta[relay.Constant][51] /* ty=Tensor[(1456), float32] */, %815, %816, meta[relay.Constant][52] /* ty=Tensor[(240), float64] */, %var_6578, meta[relay.Constant][53] /* ty=Tensor[(2240), bool] */, meta[relay.Constant][54] /* ty=Tensor[(896), bool] */)
}

def @func_4118(%var_4116: Tensor[(9, 15, 1), int8]) -> Tensor[(9, 15, ?), bool] {
  @func_4115(%var_4116) /* ty=Tensor[(9, 15, ?), bool] */
}

def @func_4868() -> Tensor[(10, 13, 13), float32] {
  %820 = fn () -> Tensor[(10, 13, 13), float32] {
    %817 = @func_4293() /* ty=(Tensor[(10, 13, 13), float32],) */;
    %818 = %817.0;
    %819 = cast(%818, dtype="float32") /* ty=Tensor[(10, 13, 13), float32] */;
    acosh(%819) /* ty=Tensor[(10, 13, 13), float32] */
  };
  %820() /* ty=Tensor[(10, 13, 13), float32] */
}

def @func_4859(%var_4857: Tensor[(1536), float32], %var_4858: Tensor[(8, 144), float64]) -> (Tensor[(10, 13, 13), float32], Tensor[(14, 13, 8), int32], Tensor[(1536), float32], Tensor[(960), float64], Tensor[(8), uint8], Tensor[(8, 144), float64], Tensor[(98), float64]) {
  @func_4855(%var_4857, %var_4858) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(14, 13, 8), int32], Tensor[(1536), float32], Tensor[(960), float64], Tensor[(8), uint8], Tensor[(8, 144), float64], Tensor[(98), float64]) */
}

def @func_5379(%var_5377: Tensor[(1, 4, 8), float64], %var_5378: Tensor[(10, 4, 8), float64]) -> Tensor[(10, 4, 8), float64] {
  @func_5375(%var_5377, %var_5378) /* ty=Tensor[(10, 4, 8), float64] */
}

def @func_4586(%var_4584: bool, %var_4585: Tensor[(2240), bool]) -> (Tensor[(10, 13, 13), float32], Tensor[(10, 14, 16), uint32], bool, Tensor[(2240), bool]) {
  @func_4582(%var_4584, %var_4585) /* ty=(Tensor[(10, 13, 13), float32], Tensor[(10, 14, 16), uint32], bool, Tensor[(2240), bool]) */
}

def @func_5309(%var_5283: Tensor[(2730), float32]) -> (Tensor[(10, 13, 13), float32], Tensor[(2730), bool], Tensor[(14, 15, 13), float64], Tensor[(10, 13, 13), float32]) {
  %821 = cast(%var_5283, dtype="bool") /* ty=Tensor[(2730), bool] */;
  %822 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(2730), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %823 = cast(meta[relay.Constant][55] /* ty=Tensor[(2730), float32] */, dtype="bool") /* ty=Tensor[(2730), bool] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?), bool] */;
  %825 = cast(meta[relay.Constant][55] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %826 = reshape(%825, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), float32] */;
  %827 = @func_1576(%826) /* ty=(Tensor[(14, 15, 13), float32],) */;
  %828 = %827.0;
  %829 = cast(%828, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %830 = @func_4867() /* ty=Tensor[(10, 13, 13), float32] */;
  %831 = greater(%823, %824) /* ty=Tensor[(2730), bool] */;
  %832 = erf(%829) /* ty=Tensor[(14, 15, 13), float64] */;
  %833 = @func_5202() /* ty=Tensor[(10, 13, 13), float32] */;
  (%830, %831, %832, %833)
}

def @func_839(%var_837: Tensor[(16, 15, 4), float64], %var_838: Tensor[(8), uint8]) -> (Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) {
  @func_835(%var_837, %var_838) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(1456), float32], Tensor[(8), uint8], Tensor[(14, 13, 8), float32], Tensor[(14, 13, 8), float64], Tensor[(4, 8, 2), float64]) */
}

def @func_2542(%var_2540: Tensor[(240), float64]) -> (Tensor[(16, 7, 2), uint16], Tensor[(15, 4, 4), int32], Tensor[(240), float64], Tensor[(15, 4, 4), int32]) {
  @func_2539(%var_2540) /* ty=(Tensor[(16, 7, 2), uint16], Tensor[(15, 4, 4), int32], Tensor[(240), float64], Tensor[(15, 4, 4), int32]) */
}

def @func_4003(%var_3995: Tensor[(3, 6, 13), bool], %var_3996: Tensor[(3, 6, 13), bool]) -> (Tensor[(3, 6, 13), bool],) {
  %834 = cast(%var_3996, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %835 = shape_of(%var_3995, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%var_3995, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %838 = logical_and(%836, %837) /* ty=Tensor[(3, 6, 13), bool] */;
  (%838,)
}

def @func_3818(%var_3789: Tensor[(12, 16, 11), float64]) -> (Tensor[(12, 16, 11), float64], Tensor[(8, 9, 3), int64], Tensor[(216), uint16]) {
  %839 = cast(%var_3789, dtype="float64") /* ty=Tensor[(12, 16, 11), float64] */;
  %840 = cast(meta[relay.Constant][56] /* ty=Tensor[(216), uint16] */, dtype="uint16") /* ty=Tensor[(216), uint16] */;
  %841 = cast(meta[relay.Constant][56] /* ty=Tensor[(216), uint16] */, dtype="uint16") /* ty=Tensor[(216), uint16] */;
  %842 = reshape(%840, newshape=[8, 9, 3]) /* ty=Tensor[(8, 9, 3), uint16] */;
  %843 = reshape(%841, newshape=[8, 9, 3]) /* ty=Tensor[(8, 9, 3), uint16] */;
  %844 = rsqrt(%839) /* ty=Tensor[(12, 16, 11), float64] */;
  %845 = @func_1514(%842, %843) /* ty=Tensor[(8, 9, 3), int64] */;
  (%844, %845, meta[relay.Constant][56] /* ty=Tensor[(216), uint16] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen250/build/output.py:1547: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen250/build/output.py", line 1552, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(99) tvmgen_default_fused_cast_greater_kernel0(signed char* __restrict__ T_greater, float* __restrict__ placeholder) {
  T_greater[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) < (bool)1));
}

extern "C" __global__ void __launch_bounds__(99) tvmgen_default_fused_cast_atan_kernel0(double* __restrict__ T_atan, float* __restrict__ placeholder) {
  T_atan[(((int)threadIdx.x))] = atan(((double)placeholder[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

