==========mod==========
#[version = "0.0.5"]
def @func_4686() -> Tensor[(14, 5, 8), uint16] {
  %0 = @func_4273() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %0.0
}

def @func_5122() -> (Tensor[(3, 14, 9), float64],) {
  %1 = @func_2949() /* ty=(Tensor[(3, 14, 9), float64],) */;
  %2 = %1.0;
  (%2,)
}

def @func_3462(%var_3446: Tensor[(10, 6, 11), float32]) -> (Tensor[(10, 6, 11), uint32],) {
  %3 = cast(%var_3446, dtype="float32") /* ty=Tensor[(10, 6, 11), float32] */;
  %4 = acosh(%3) /* ty=Tensor[(10, 6, 11), float32] */;
  %5 = cast(%var_3446, dtype="uint32") /* ty=Tensor[(10, 6, 11), uint32] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="uint32") /* ty=Tensor[(10, 6, 11), uint32] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %9 = right_shift(%7, %8) /* ty=Tensor[(10, 6, 11), uint32] */;
  (%9,)
}

def @func_5080(%var_5052: Tensor[(308), float32], %var_5055: Tensor[(308), float32], %var_5066: Tensor[(360), bool], %var_5075: Tensor[(3, 14, 9), float64]) -> (Tensor[(1, 168), uint16], Tensor[(308), bool], Tensor[(3, 14, 9), float32], Tensor[(13, 8, 6), int16], Tensor[(360), bool], Tensor[(48), int16], Tensor[(3, 14, 9), bool]) {
  %10 = cast(%var_5052, dtype="float32") /* ty=Tensor[(308), float32] */;
  %11 = reshape(%10, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %12 = @func_252(%11) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(8, 7, 3), uint16], Tensor[(1, 168), uint16], Tensor[(8, 7, 3), uint16], Tensor[(11, 7, 4), uint16], Tensor[(11, 7, 4), bool]) */;
  %13 = cast(%var_5055, dtype="bool") /* ty=Tensor[(308), bool] */;
  %14 = shape_of(%var_5052, dtype="int32") /* ty=Tensor[(1), int32] */;
  %15 = cast(%var_5052, dtype="bool") /* ty=Tensor[(308), bool] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?), bool] */;
  %17 = @func_2679() /* ty=Tensor[(3, 14, 9), float64] */;
  %18 = cast(%17, dtype="float64") /* ty=Tensor[(3, 14, 9), float64] */;
  %19 = sinh(%18) /* ty=Tensor[(3, 14, 9), float64] */;
  %20 = cast(%17, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %24 = cast(%var_5066, dtype="bool") /* ty=Tensor[(360), bool] */;
  %25 = cast(%var_5066, dtype="bool") /* ty=Tensor[(360), bool] */;
  %26 = cast(meta[relay.Constant][0] /* ty=Tensor[(48), int16] */, dtype="int16") /* ty=Tensor[(48), int16] */;
  %27 = reshape(%24, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %28 = reshape(%25, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %29 = reshape(%26, newshape=[48]) /* ty=Tensor[(48), int16] */;
  %30 = @func_2065(%27, %28, %29) /* ty=(Tensor[(13, 8, 6), int16], Tensor[(48), int16], Tensor[(624), int16], Tensor[(286, 1), uint64], Tensor[(6, 12, 5), float64]) */;
  %31 = cast(%var_5075, dtype="bool") /* ty=Tensor[(3, 14, 9), bool] */;
  %32 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%19, dtype="bool") /* ty=Tensor[(3, 14, 9), bool] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %35 = %12.2;
  %36 = equal(%15, %16) /* ty=Tensor[(308), bool] */;
  %37 = power(%22, %23) /* ty=Tensor[(3, 14, 9), float32] */;
  %38 = %30.0;
  %39 = greater_equal(%33, %34) /* ty=Tensor[(3, 14, 9), bool] */;
  (%35, %36, %37, %38, %var_5066, meta[relay.Constant][0] /* ty=Tensor[(48), int16] */, %39)
}

def @func_998(%var_982: Tensor[(3, 4, 12), bool], %var_989: Tensor[(200), uint32], %var_991: Tensor[(3, 4, 12), bool]) -> (Tensor[(7, 4, 12), bool], Tensor[(14, 7, 12), float64], Tensor[(1176), float64], Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(3, 4, 12), bool]) {
  %40 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 4, 12), bool] */, dtype="bool") /* ty=Tensor[(1, 4, 12), bool] */;
  %41 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 4, 12), bool] */, dtype="bool") /* ty=Tensor[(7, 4, 12), bool] */;
  %42 = cast(meta[relay.Constant][3] /* ty=Tensor[(1176), float64] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %43 = cast(meta[relay.Constant][3] /* ty=Tensor[(1176), float64] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %44 = reshape(%42, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
  %45 = reshape(%43, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
  %46 = @func_351(%44, %45) /* ty=(Tensor[(14, 7, 12), float64], Tensor[(168, ?), bool]) */;
  %47 = cast(%var_989, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %48 = cast(%var_989, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %49 = reshape(%47, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint32] */;
  %50 = reshape(%48, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint32] */;
  %51 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 4, 12), bool] */, dtype="bool") /* ty=Tensor[(1, 4, 12), bool] */;
  %52 = cast(%var_982, dtype="bool") /* ty=Tensor[(3, 4, 12), bool] */;
  %53 = equal(%51, %52) /* ty=Tensor[(3, 4, 12), bool] */;
  %54 = cast(%var_991, dtype="bool") /* ty=Tensor[(3, 4, 12), bool] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%53, dtype="bool") /* ty=Tensor[(3, 4, 12), bool] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %58 = logical_and(%40, %41) /* ty=Tensor[(7, 4, 12), bool] */;
  %59 = %46.0;
  %60 = @func_596(%49, %50) /* ty=Tensor[(10, 2, 10), uint32] */;
  %61 = less(%56, %57) /* ty=Tensor[(3, 4, 12), bool] */;
  (%58, %59, meta[relay.Constant][3] /* ty=Tensor[(1176), float64] */, %60, %var_989, %61)
}

def @func_4968() -> Tensor[(14, 5, 8), uint16] {
  @func_4686() /* ty=Tensor[(14, 5, 8), uint16] */
}

def @func_4430(%var_4398: Tensor[(144), bool], %var_4419: Tensor[(14, 5, 8), uint16], %var_4425: Tensor[(378), float64]) -> (Tensor[(14, 5, 8), float64], Tensor[(144), bool], Tensor[(200), uint32], Tensor[(7, 4, 12), float64], Tensor[(14, 5, 8), bool], Tensor[(3, 14, 9), bool], Tensor[(378), float64]) {
  %62 = @func_3967() /* ty=Tensor[(14, 5, 8), uint16] */;
  %63 = cast(%62, dtype="float64") /* ty=Tensor[(14, 5, 8), float64] */;
  %64 = cast(%var_4398, dtype="bool") /* ty=Tensor[(144), bool] */;
  %65 = cast(meta[relay.Constant][4] /* ty=Tensor[(200), uint32] */, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %66 = cast(%var_4398, dtype="bool") /* ty=Tensor[(144), bool] */;
  %67 = reshape(%64, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), bool] */;
  %68 = reshape(%65, newshape=[200]) /* ty=Tensor[(200), uint32] */;
  %69 = reshape(%66, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), bool] */;
  %70 = @func_998(%67, %68, %69) /* ty=(Tensor[(7, 4, 12), bool], Tensor[(14, 7, 12), float64], Tensor[(1176), float64], Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(3, 4, 12), bool]) */;
  %71 = %70.0;
  %72 = cast(%71, dtype="float64") /* ty=Tensor[(7, 4, 12), float64] */;
  %73 = cast(%var_4419, dtype="bool") /* ty=Tensor[(14, 5, 8), bool] */;
  %74 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%62, dtype="bool") /* ty=Tensor[(14, 5, 8), bool] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %77 = cast(%var_4425, dtype="float64") /* ty=Tensor[(378), float64] */;
  %78 = reshape(%77, newshape=[3, 14, 9]) /* ty=Tensor[(3, 14, 9), float64] */;
  %79 = @func_3271(%78) /* ty=(Tensor[(3, 14, 9), bool],) */;
  %80 = erf(%63) /* ty=Tensor[(14, 5, 8), float64] */;
  %81 = asinh(%72) /* ty=Tensor[(7, 4, 12), float64] */;
  %82 = greater_equal(%75, %76) /* ty=Tensor[(14, 5, 8), bool] */;
  %83 = %79.0;
  (%80, %var_4398, meta[relay.Constant][4] /* ty=Tensor[(200), uint32] */, %81, %82, %83, %var_4425)
}

def @func_131(%var_125: Tensor[(8, 7, 3), uint16], %var_126: Tensor[(8, 7, 3), uint16]) -> (Tensor[(8, 7, 3), uint16],) {
  %84 = cast(%var_126, dtype="uint16") /* ty=Tensor[(8, 7, 3), uint16] */;
  %85 = shape_of(%var_125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%var_125, dtype="uint16") /* ty=Tensor[(8, 7, 3), uint16] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %88 = add(%86, %87) /* ty=Tensor[(8, 7, 3), uint16] */;
  (%88,)
}

def @func_2365(%var_2303: Tensor[(308), float32], %var_2324: Tensor[(1176, 1), float64], %var_2327: Tensor[(5, 5, 14), float64]) -> (Tensor[(8, 7, 3), uint16], Tensor[(308), float32], Tensor[(168, ?), bool], Tensor[(1176, 1), float64], Tensor[(5, 5, 14), uint32], Tensor[(168, ?), bool]) {
  %89 = cast(%var_2303, dtype="float32") /* ty=Tensor[(308), float32] */;
  %90 = reshape(%89, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %91 = @func_252(%90) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(8, 7, 3), uint16], Tensor[(1, 168), uint16], Tensor[(8, 7, 3), uint16], Tensor[(11, 7, 4), uint16], Tensor[(11, 7, 4), bool]) */;
  %92 = cast(%var_2324, dtype="float64") /* ty=Tensor[(1176, 1), float64] */;
  %93 = cast(%var_2324, dtype="float64") /* ty=Tensor[(1176, 1), float64] */;
  %94 = reshape(%92, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
  %95 = reshape(%93, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
  %96 = @func_351(%94, %95) /* ty=(Tensor[(14, 7, 12), float64], Tensor[(168, ?), bool]) */;
  %97 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 5, 14), float32] */, dtype="float32") /* ty=Tensor[(5, 5, 14), float32] */;
  %98 = cos(%97) /* ty=Tensor[(5, 5, 14), float32] */;
  %99 = cast(%98, dtype="float64") /* ty=Tensor[(5, 5, 14), float64] */;
  %100 = sqrt(%99) /* ty=Tensor[(5, 5, 14), float64] */;
  %101 = cast(%var_2327, dtype="uint32") /* ty=Tensor[(5, 5, 14), uint32] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%100, dtype="uint32") /* ty=Tensor[(5, 5, 14), uint32] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %105 = cast(%var_2324, dtype="float64") /* ty=Tensor[(1176, 1), float64] */;
  %106 = cast(%var_2324, dtype="float64") /* ty=Tensor[(1176, 1), float64] */;
  %107 = reshape(%105, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
  %108 = reshape(%106, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
  %109 = @func_351(%107, %108) /* ty=(Tensor[(14, 7, 12), float64], Tensor[(168, ?), bool]) */;
  %110 = %91.1;
  %111 = %96.1;
  %112 = right_shift(%103, %104) /* ty=Tensor[(5, 5, 14), uint32] */;
  %113 = %109.1;
  (%110, %var_2303, %111, %var_2324, %112, %113)
}

def @func_1912(%var_1894: Tensor[(1, 8, 6), int16], %var_1895: Tensor[(13, 8, 6), int16], %var_1903: Tensor[(286, 1), uint64]) -> (Tensor[(13, 8, 6), int16], Tensor[(1, 8, 6), float64], Tensor[(10, 2, 10), uint32], Tensor[(286, 1), uint64], Tensor[(10, 20), uint32]) {
  %114 = cast(%var_1894, dtype="int16") /* ty=Tensor[(1, 8, 6), int16] */;
  %115 = cast(%var_1895, dtype="int16") /* ty=Tensor[(13, 8, 6), int16] */;
  %116 = cast(%var_1894, dtype="float64") /* ty=Tensor[(1, 8, 6), float64] */;
  %117 = cast(%var_1903, dtype="uint64") /* ty=Tensor[(286, 1), uint64] */;
  %118 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 20), uint32] */, dtype="uint32") /* ty=Tensor[(10, 20), uint32] */;
  %119 = reshape(%117, newshape=[1, 286]) /* ty=Tensor[(1, 286), uint64] */;
  %120 = reshape(%118, newshape=[200]) /* ty=Tensor[(200), uint32] */;
  %121 = @func_1597(%119, %120) /* ty=(Tensor[(7, 3, 9), float32], Tensor[(10, 2, 10), uint32], Tensor[(1, 286), uint64], Tensor[(200), uint32]) */;
  %122 = maximum(%114, %115) /* ty=Tensor[(13, 8, 6), int16] */;
  %123 = sqrt(%116) /* ty=Tensor[(1, 8, 6), float64] */;
  %124 = %121.1;
  (%122, %123, %124, %var_1903, meta[relay.Constant][6] /* ty=Tensor[(10, 20), uint32] */)
}

def @func_4273() -> (Tensor[(14, 5, 8), uint16],) {
  %125 = @func_3967() /* ty=Tensor[(14, 5, 8), uint16] */;
  (%125,)
}

def @func_2246(%var_2239: Tensor[(4, 6, 3), float64]) -> Tensor[(4, 6, 3), float64] {
  %126 = cast(%var_2239, dtype="float64") /* ty=Tensor[(4, 6, 3), float64] */;
  rsqrt(%126) /* ty=Tensor[(4, 6, 3), float64] */
}

def @func_3407() -> Tensor[(3, 14, 9), float64] {
  %127 = @func_2949() /* ty=(Tensor[(3, 14, 9), float64],) */;
  %127.0
}

def @func_3148(%var_2984: Tensor[(168), uint16], %var_2998: Tensor[(1056), float32], %var_2999: Tensor[(1176), float64], %var_3077: Tensor[(35, 10), float64], %var_3089: Tensor[(32), float64], %var_3090: Tensor[(144), bool], %var_3091: int32) -> (Tensor[(8, 7, 3), uint16], Tensor[(168), uint16], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64], Tensor[(8, 7, 3), uint16], Tensor[(308), float32], Tensor[(286), uint64], Tensor[(3, 14, 9), float64], Tensor[(200), int16], Tensor[(14, 5, 8), float32], Tensor[(3, 14, 9), float64], Tensor[(4, 15, 3), float32], Tensor[(32), float64], Tensor[(144), bool], int32, Tensor[(1, 180), int32], Tensor[(1, 286), uint64], Tensor[(35, 10), bool], Tensor[(8, 7, 3), uint16], Tensor[(14, 5, 8), float64]) {
  %128 = cast(%var_2984, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %129 = cast(%var_2984, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %130 = reshape(%128, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %131 = reshape(%129, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %132 = @func_131(%130, %131) /* ty=(Tensor[(8, 7, 3), uint16],) */;
  %133 = cast(%var_2998, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %134 = cast(%var_2999, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %135 = reshape(%133, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), float32] */;
  %136 = reshape(%134, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %137 = @func_465(%135, %136) /* ty=(Tensor[(168, 1176), bool], Tensor[(11, 12, 8), float64]) */;
  %138 = cast(meta[relay.Constant][7] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %139 = cast(%var_2999, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %140 = cast(meta[relay.Constant][8] /* ty=Tensor[(35, 10), float64] */, dtype="float64") /* ty=Tensor[(35, 10), float64] */;
  %141 = reshape(%138, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %142 = reshape(%139, newshape=[1176, 1]) /* ty=Tensor[(1176, 1), float64] */;
  %143 = reshape(%140, newshape=[5, 5, 14]) /* ty=Tensor[(5, 5, 14), float64] */;
  %144 = @func_2365(%141, %142, %143) /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(308), float32], Tensor[(168, ?), bool], Tensor[(1176, 1), float64], Tensor[(5, 5, 14), uint32], Tensor[(168, ?), bool]) */;
  %145 = @func_2949() /* ty=(Tensor[(3, 14, 9), float64],) */;
  %146 = cast(meta[relay.Constant][9] /* ty=Tensor[(286), uint64] */, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %147 = cast(meta[relay.Constant][10] /* ty=Tensor[(200), uint32] */, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %148 = reshape(%146, newshape=[1, 286]) /* ty=Tensor[(1, 286), uint64] */;
  %149 = reshape(%147, newshape=[200]) /* ty=Tensor[(200), uint32] */;
  %150 = @func_1597(%148, %149) /* ty=(Tensor[(7, 3, 9), float32], Tensor[(10, 2, 10), uint32], Tensor[(1, 286), uint64], Tensor[(200), uint32]) */;
  %151 = %150.1;
  %152 = cast(%151, dtype="int16") /* ty=Tensor[(10, 2, 10), int16] */;
  %153 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(200), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %154 = cast(meta[relay.Constant][10] /* ty=Tensor[(200), uint32] */, dtype="int16") /* ty=Tensor[(200), int16] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?), int16] */;
  %156 = @func_2553() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %157 = %156.0;
  %158 = cast(%157, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %159 = asin(%158) /* ty=Tensor[(14, 5, 8), float32] */;
  %160 = cast(%157, dtype="uint16") /* ty=Tensor[(14, 5, 8), uint16] */;
  %161 = reshape(%160, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), uint16] */;
  %162 = @func_2721(%161) /* ty=(Tensor[(14, 5, 8), uint64], Tensor[(14, 5, 8), float64]) */;
  %163 = %162.1;
  %164 = cast(%163, dtype="int8") /* ty=Tensor[(14, 5, 8), int8] */;
  %165 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%159, dtype="int8") /* ty=Tensor[(14, 5, 8), int8] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %168 = bitwise_or(%166, %167) /* ty=Tensor[(14, 5, 8), int8] */;
  %169 = cast(%159, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %173 = @func_2949() /* ty=(Tensor[(3, 14, 9), float64],) */;
  %174 = cast(%var_3089, dtype="float64") /* ty=Tensor[(32), float64] */;
  %175 = cast(%var_3090, dtype="bool") /* ty=Tensor[(144), bool] */;
  %176 = cast(%var_3091, dtype="int32") /* ty=int32 */;
  %177 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 180), int32] */, dtype="int32") /* ty=Tensor[(1, 180), int32] */;
  %178 = cast(%var_2999, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %179 = reshape(%174, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), float64] */;
  %180 = reshape(%175, newshape=[144]) /* ty=Tensor[(144), bool] */;
  %181 = reshape(%176, newshape=[]) /* ty=int32 */;
  %182 = reshape(%177, newshape=[180]) /* ty=Tensor[(180), int32] */;
  %183 = reshape(%178, newshape=[12, 98]) /* ty=Tensor[(12, 98), float64] */;
  %184 = @func_1696(%179, %180, %181, %182, %183) /* ty=(Tensor[(4, ?, 8), bool], Tensor[(4, 13, 8), bool], Tensor[(7, 4, 12), bool], Tensor[(144), bool], Tensor[(200), uint32], Tensor[(4, 15, 3), float32], int32, Tensor[(180), int32], Tensor[(12, 98), float64], Tensor[(4, ?, 8), bool], Tensor[(1176), float64], Tensor[(10, 2, 10), uint32]) */;
  %185 = cast(meta[relay.Constant][9] /* ty=Tensor[(286), uint64] */, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %186 = cast(%151, dtype="uint32") /* ty=Tensor[(10, 2, 10), uint32] */;
  %187 = reshape(%185, newshape=[1, 286]) /* ty=Tensor[(1, 286), uint64] */;
  %188 = reshape(%186, newshape=[200]) /* ty=Tensor[(200), uint32] */;
  %189 = @func_1597(%187, %188) /* ty=(Tensor[(7, 3, 9), float32], Tensor[(10, 2, 10), uint32], Tensor[(1, 286), uint64], Tensor[(200), uint32]) */;
  %190 = cast(meta[relay.Constant][8] /* ty=Tensor[(35, 10), float64] */, dtype="float64") /* ty=Tensor[(35, 10), float64] */;
  %191 = sqrt(%190) /* ty=Tensor[(35, 10), float64] */;
  %192 = cast(%var_3077, dtype="bool") /* ty=Tensor[(35, 10), bool] */;
  %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(2), int32] */;
  %194 = cast(%191, dtype="bool") /* ty=Tensor[(35, 10), bool] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %196 = logical_or(%194, %195) /* ty=Tensor[(35, 10), bool] */;
  %197 = cast(%var_3077, dtype="bool") /* ty=Tensor[(35, 10), bool] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(2), int32] */;
  %199 = cast(%196, dtype="bool") /* ty=Tensor[(35, 10), bool] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %201 = cast(%var_2984, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %202 = cast(%var_2984, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %203 = reshape(%201, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %204 = reshape(%202, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %205 = @func_131(%203, %204) /* ty=(Tensor[(8, 7, 3), uint16],) */;
  %206 = cast(%168, dtype="float64") /* ty=Tensor[(14, 5, 8), float64] */;
  %207 = %132.0;
  %208 = %137.1;
  %209 = %144.0;
  %210 = %145.0;
  %211 = add(%154, %155) /* ty=Tensor[(200), int16] */;
  %212 = floor_mod(%171, %172) /* ty=Tensor[(14, 5, 8), float32] */;
  %213 = %173.0;
  %214 = %184.5;
  %215 = %189.2;
  %216 = less(%199, %200) /* ty=Tensor[(35, 10), bool] */;
  %217 = %205.0;
  %218 = cosh(%206) /* ty=Tensor[(14, 5, 8), float64] */;
  (%207, %var_2984, %208, %var_2998, %var_2999, %209, meta[relay.Constant][7] /* ty=Tensor[(308), float32] */, meta[relay.Constant][9] /* ty=Tensor[(286), uint64] */, %210, %211, %212, %213, %214, %var_3089, %var_3090, %var_3091, meta[relay.Constant][11] /* ty=Tensor[(1, 180), int32] */, %215, %216, %217, %218)
}

def @func_3967() -> Tensor[(14, 5, 8), uint16] {
  %219 = @func_2553() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %219.0
}

def @func_3418(%var_3413: Tensor[(16, 10, 3), int16], %var_3414: Tensor[(16, 10, 3), int16]) -> (Tensor[(16, 10, 3), int16],) {
  %220 = cast(%var_3414, dtype="int16") /* ty=Tensor[(16, 10, 3), int16] */;
  %221 = shape_of(%var_3413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%var_3413, dtype="int16") /* ty=Tensor[(16, 10, 3), int16] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %224 = logical_xor(%222, %223) /* ty=Tensor[(16, 10, 3), int16] */;
  (%224,)
}

def @func_252(%var_239: Tensor[(11, 7, 4), float32]) -> (Tensor[(11, 7, 4), float32], Tensor[(8, 7, 3), uint16], Tensor[(1, 168), uint16], Tensor[(8, 7, 3), uint16], Tensor[(11, 7, 4), uint16], Tensor[(11, 7, 4), bool]) {
  %225 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 7, 4), float32] */, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %226 = exp(%225) /* ty=Tensor[(11, 7, 4), float32] */;
  %227 = cast(%226, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %228 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 168), uint16] */, dtype="uint16") /* ty=Tensor[(1, 168), uint16] */;
  %229 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 168), uint16] */, dtype="uint16") /* ty=Tensor[(1, 168), uint16] */;
  %230 = reshape(%228, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %231 = reshape(%229, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %232 = @func_131(%230, %231) /* ty=(Tensor[(8, 7, 3), uint16],) */;
  %233 = %232.0;
  %234 = cast(%233, dtype="uint16") /* ty=Tensor[(8, 7, 3), uint16] */;
  %235 = cast(%233, dtype="uint16") /* ty=Tensor[(8, 7, 3), uint16] */;
  %236 = reshape(%234, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %237 = reshape(%235, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %238 = @func_131(%236, %237) /* ty=(Tensor[(8, 7, 3), uint16],) */;
  %239 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 7, 4), float32] */, dtype="uint16") /* ty=Tensor[(11, 7, 4), uint16] */;
  %240 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%226, dtype="uint16") /* ty=Tensor[(11, 7, 4), uint16] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %243 = cast(%var_239, dtype="bool") /* ty=Tensor[(11, 7, 4), bool] */;
  %244 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%226, dtype="bool") /* ty=Tensor[(11, 7, 4), bool] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %247 = asinh(%227) /* ty=Tensor[(11, 7, 4), float32] */;
  %248 = %238.0;
  %249 = logical_xor(%241, %242) /* ty=Tensor[(11, 7, 4), uint16] */;
  %250 = logical_or(%245, %246) /* ty=Tensor[(11, 7, 4), bool] */;
  (%247, %233, meta[relay.Constant][13] /* ty=Tensor[(1, 168), uint16] */, %248, %249, %250)
}

def @func_5457() -> Tensor[(14, 5, 8), uint16] {
  %251 = @func_4643() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %251.0
}

def @func_5364(%var_5341: Tensor[(6, 6, 10), float64]) -> Tensor[(6, 6, 10), float32] {
  %252 = cast(%var_5341, dtype="float64") /* ty=Tensor[(6, 6, 10), float64] */;
  %253 = asinh(%252) /* ty=Tensor[(6, 6, 10), float64] */;
  %254 = cast(%253, dtype="float32") /* ty=Tensor[(6, 6, 10), float32] */;
  atanh(%254) /* ty=Tensor[(6, 6, 10), float32] */
}

def @func_2851(%var_2812: Tensor[(286), uint64], %var_2845: Tensor[(180), int32], %var_2846: Tensor[(6, 196), float64]) -> (Tensor[(200), uint32], Tensor[(286), uint64], Tensor[(200), uint32], Tensor[(14, 5, 8), float32], Tensor[(200), uint32], Tensor[(1176), float64], int32, Tensor[(180), int32], Tensor[(6, 196), float64]) {
  %255 = cast(%var_2812, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %256 = cast(meta[relay.Constant][14] /* ty=Tensor[(200), uint32] */, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %257 = reshape(%255, newshape=[13, 2, 11]) /* ty=Tensor[(13, 2, 11), uint64] */;
  %258 = reshape(%256, newshape=[200]) /* ty=Tensor[(200), uint32] */;
  %259 = @func_1448(%257, %258) /* ty=(Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(13, 2, 11), uint16]) */;
  %260 = @func_2745() /* ty=Tensor[(14, 5, 8), float64] */;
  %261 = cast(%260, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %262 = cos(%261) /* ty=Tensor[(14, 5, 8), float32] */;
  %263 = cast(%260, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%262, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %267 = cast(%var_2812, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %268 = %259.1;
  %269 = cast(%268, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %270 = reshape(%267, newshape=[286]) /* ty=Tensor[(286), uint64] */;
  %271 = reshape(%269, newshape=[200]) /* ty=Tensor[(200), uint32] */;
  %272 = @func_2635(%270, %271) /* ty=(Tensor[(14, 5, 8), uint16], Tensor[(10, 2, 10), uint32], Tensor[(286), uint64], Tensor[(200), uint32]) */;
  %273 = cast(-9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %274 = cast(%var_2845, dtype="int32") /* ty=Tensor[(180), int32] */;
  %275 = cast(%var_2846, dtype="float64") /* ty=Tensor[(6, 196), float64] */;
  %276 = reshape(%273, newshape=[]) /* ty=int32 */;
  %277 = reshape(%274, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), int32] */;
  %278 = reshape(%275, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %279 = @func_1315(%276, %277, %278) /* ty=(Tensor[(4, 15, 3), int32], Tensor[(4, 15, 3), float32], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64]) */;
  %280 = mod(%265, %266) /* ty=Tensor[(14, 5, 8), float32] */;
  %281 = %272.3;
  %282 = %279.4;
  (%268, %var_2812, meta[relay.Constant][14] /* ty=Tensor[(200), uint32] */, %280, %281, %282, -9 /* ty=int32 */, %var_2845, %var_2846)
}

def @func_4206(%var_4195: Tensor[(200), uint32]) -> (Tensor[(14, 5, 8), float64], Tensor[(10, 2, 10), uint32], Tensor[(200), uint32]) {
  %283 = @func_3506() /* ty=(Tensor[(14, 5, 8), float64],) */;
  %284 = cast(%var_4195, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %285 = cast(%var_4195, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %286 = reshape(%284, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint32] */;
  %287 = reshape(%285, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint32] */;
  %288 = %283.0;
  %289 = @func_596(%286, %287) /* ty=Tensor[(10, 2, 10), uint32] */;
  (%288, %289, %var_4195)
}

def @func_2745() -> Tensor[(14, 5, 8), float64] {
  %290 = @func_2553() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %291 = %290.0;
  %292 = cast(%291, dtype="float64") /* ty=Tensor[(14, 5, 8), float64] */;
  log2(%292) /* ty=Tensor[(14, 5, 8), float64] */
}

def @func_3342(%var_3315: int32, %var_3316: Tensor[(180), int32]) -> (Tensor[(3, 14, 9), float64], Tensor[(1176), float64], int32, Tensor[(180), int32], Tensor[(588, 2), float64]) {
  %293 = @func_2949() /* ty=(Tensor[(3, 14, 9), float64],) */;
  %294 = cast(%var_3315, dtype="int32") /* ty=int32 */;
  %295 = cast(%var_3316, dtype="int32") /* ty=Tensor[(180), int32] */;
  %296 = cast(meta[relay.Constant][15] /* ty=Tensor[(588, 2), float64] */, dtype="float64") /* ty=Tensor[(588, 2), float64] */;
  %297 = reshape(%294, newshape=[]) /* ty=int32 */;
  %298 = reshape(%295, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), int32] */;
  %299 = reshape(%296, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %300 = @func_1315(%297, %298, %299) /* ty=(Tensor[(4, 15, 3), int32], Tensor[(4, 15, 3), float32], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64]) */;
  %301 = %293.0;
  %302 = %300.4;
  (%301, %302, %var_3315, %var_3316, meta[relay.Constant][15] /* ty=Tensor[(588, 2), float64] */)
}

def @func_3735(%var_3662: Tensor[(3, 12, 4), uint64], %var_3663: Tensor[(3, 12, 4), uint64]) -> (Tensor[(3, 12, 4), uint64], Tensor[(14, 5, 8), float64], Tensor[(3, 12, 4), int16]) {
  %303 = cast(%var_3663, dtype="uint64") /* ty=Tensor[(3, 12, 4), uint64] */;
  %304 = shape_of(%var_3662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%var_3662, dtype="uint64") /* ty=Tensor[(3, 12, 4), uint64] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %307 = @func_3437() /* ty=(Tensor[(14, 5, 8), uint16], Tensor[(14, 5, 8), float64]) */;
  %308 = cast(%var_3662, dtype="float64") /* ty=Tensor[(3, 12, 4), float64] */;
  %309 = sin(%308) /* ty=Tensor[(3, 12, 4), float64] */;
  %310 = cast(%309, dtype="float32") /* ty=Tensor[(3, 12, 4), float32] */;
  %311 = exp(%310) /* ty=Tensor[(3, 12, 4), float32] */;
  %312 = cast(%var_3663, dtype="int16") /* ty=Tensor[(3, 12, 4), int16] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%311, dtype="int16") /* ty=Tensor[(3, 12, 4), int16] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %316 = add(%305, %306) /* ty=Tensor[(3, 12, 4), uint64] */;
  %317 = %307.1;
  %318 = right_shift(%314, %315) /* ty=Tensor[(3, 12, 4), int16] */;
  (%316, %317, %318)
}

def @func_5276() -> (Tensor[(14, 5, 8), float64], Tensor[(14, 5, 8), float64]) {
  %319 = @func_4535() /* ty=(Tensor[(14, 5, 8), uint16], Tensor[(3, 14, 9), int8]) */;
  %320 = %319.0;
  %321 = cast(%320, dtype="float64") /* ty=Tensor[(14, 5, 8), float64] */;
  %322 = asinh(%321) /* ty=Tensor[(14, 5, 8), float64] */;
  %323 = @func_2745() /* ty=Tensor[(14, 5, 8), float64] */;
  (%322, %323)
}

def @func_1696(%var_1618: Tensor[(4, 1, 8), float64], %var_1649: Tensor[(144), bool], %var_1656: int32, %var_1657: Tensor[(180), int32], %var_1658: Tensor[(12, 98), float64]) -> (Tensor[(4, ?, 8), bool], Tensor[(4, 13, 8), bool], Tensor[(7, 4, 12), bool], Tensor[(144), bool], Tensor[(200), uint32], Tensor[(4, 15, 3), float32], int32, Tensor[(180), int32], Tensor[(12, 98), float64], Tensor[(4, ?, 8), bool], Tensor[(1176), float64], Tensor[(10, 2, 10), uint32]) {
  %324 = cast(%var_1618, dtype="float64") /* ty=Tensor[(4, 1, 8), float64] */;
  %325 = atan(%324) /* ty=Tensor[(4, 1, 8), float64] */;
  %326 = cast(%325, dtype="int64") /* ty=Tensor[(4, 1, 8), int64] */;
  %327 = shape_of(%var_1618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%var_1618, dtype="int64") /* ty=Tensor[(4, 1, 8), int64] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %330 = subtract(%328, %329) /* ty=Tensor[(4, ?, 8), int64] */;
  %331 = cast(%var_1618, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="bool") /* ty=Tensor[(4, ?, 8), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %335 = cast(%var_1618, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
  %336 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 13, 8), float64] */, dtype="bool") /* ty=Tensor[(4, 13, 8), bool] */;
  %337 = cast(%var_1649, dtype="bool") /* ty=Tensor[(144), bool] */;
  %338 = cast(meta[relay.Constant][17] /* ty=Tensor[(200), uint32] */, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %339 = cast(%var_1649, dtype="bool") /* ty=Tensor[(144), bool] */;
  %340 = reshape(%337, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), bool] */;
  %341 = reshape(%338, newshape=[200]) /* ty=Tensor[(200), uint32] */;
  %342 = reshape(%339, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), bool] */;
  %343 = @func_998(%340, %341, %342) /* ty=(Tensor[(7, 4, 12), bool], Tensor[(14, 7, 12), float64], Tensor[(1176), float64], Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(3, 4, 12), bool]) */;
  %344 = cast(%var_1656, dtype="int32") /* ty=int32 */;
  %345 = cast(%var_1657, dtype="int32") /* ty=Tensor[(180), int32] */;
  %346 = cast(%var_1658, dtype="float64") /* ty=Tensor[(12, 98), float64] */;
  %347 = reshape(%344, newshape=[]) /* ty=int32 */;
  %348 = reshape(%345, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), int32] */;
  %349 = reshape(%346, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %350 = @func_1315(%347, %348, %349) /* ty=(Tensor[(4, 15, 3), int32], Tensor[(4, 15, 3), float32], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64]) */;
  %351 = cast(%330, dtype="float32") /* ty=Tensor[(4, ?, 8), float32] */;
  %352 = acosh(%351) /* ty=Tensor[(4, ?, 8), float32] */;
  %353 = cast(%325, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
  %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%352, dtype="bool") /* ty=Tensor[(4, ?, 8), bool] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %357 = cast(%var_1656, dtype="int32") /* ty=int32 */;
  %358 = %350.1;
  %359 = cast(%358, dtype="int32") /* ty=Tensor[(4, 15, 3), int32] */;
  %360 = cast(%var_1658, dtype="float64") /* ty=Tensor[(12, 98), float64] */;
  %361 = reshape(%357, newshape=[]) /* ty=int32 */;
  %362 = reshape(%359, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), int32] */;
  %363 = reshape(%360, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %364 = @func_1315(%361, %362, %363) /* ty=(Tensor[(4, 15, 3), int32], Tensor[(4, 15, 3), float32], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64]) */;
  %365 = cast(meta[relay.Constant][17] /* ty=Tensor[(200), uint32] */, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %366 = cast(meta[relay.Constant][17] /* ty=Tensor[(200), uint32] */, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %367 = reshape(%365, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint32] */;
  %368 = reshape(%366, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint32] */;
  %369 = greater(%333, %334) /* ty=Tensor[(4, ?, 8), bool] */;
  %370 = less_equal(%335, %336) /* ty=Tensor[(4, 13, 8), bool] */;
  %371 = %343.0;
  %372 = greater_equal(%355, %356) /* ty=Tensor[(4, ?, 8), bool] */;
  %373 = %364.4;
  %374 = @func_596(%367, %368) /* ty=Tensor[(10, 2, 10), uint32] */;
  (%369, %370, %371, %var_1649, meta[relay.Constant][17] /* ty=Tensor[(200), uint32] */, %358, %var_1656, %var_1657, %var_1658, %372, %373, %374)
}

def @func_5199(%var_5193: Tensor[(14, 10, 6), int64]) -> Tensor[(14, 10, 6), int64] {
  %375 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 10, 6), int64] */, dtype="int64") /* ty=Tensor[(14, 10, 6), int64] */;
  %376 = shape_of(%var_5193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%var_5193, dtype="int64") /* ty=Tensor[(14, 10, 6), int64] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_xor(%377, %378) /* ty=Tensor[(14, 10, 6), int64] */
}

def @func_4784(%var_4767: Tensor[(8, 16, 1), int64], %var_4768: Tensor[(8, 16, 2), int64]) -> (Tensor[(8, 16, 2), int64], Tensor[(8, 16, 2), uint16]) {
  %379 = cast(%var_4767, dtype="int64") /* ty=Tensor[(8, 16, 1), int64] */;
  %380 = cast(%var_4768, dtype="int64") /* ty=Tensor[(8, 16, 2), int64] */;
  %381 = cast(%var_4767, dtype="uint16") /* ty=Tensor[(8, 16, 1), uint16] */;
  %382 = cast(%var_4768, dtype="uint16") /* ty=Tensor[(8, 16, 2), uint16] */;
  %383 = logical_xor(%379, %380) /* ty=Tensor[(8, 16, 2), int64] */;
  %384 = add(%381, %382) /* ty=Tensor[(8, 16, 2), uint16] */;
  (%383, %384)
}

def @func_3437() -> (Tensor[(14, 5, 8), uint16], Tensor[(14, 5, 8), float64]) {
  %385 = @func_2937() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %386 = %385.0;
  %387 = @func_2745() /* ty=Tensor[(14, 5, 8), float64] */;
  (%386, %387)
}

def @func_3873(%var_3850: Tensor[(1176), float64], %var_3853: Tensor[(360), bool]) -> (Tensor[(3, 14, 9), float64], Tensor[(11, 12, 8), float64], Tensor[(528, 2), float32], Tensor[(286, 1), uint64], Tensor[(360), bool], Tensor[(48), int16], Tensor[(1176), float32], Tensor[(3, 14, 9), uint32]) {
  %388 = @func_2949() /* ty=(Tensor[(3, 14, 9), float64],) */;
  %389 = cast(meta[relay.Constant][19] /* ty=Tensor[(528, 2), float32] */, dtype="float32") /* ty=Tensor[(528, 2), float32] */;
  %390 = cast(%var_3850, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %391 = reshape(%389, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), float32] */;
  %392 = reshape(%390, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %393 = @func_465(%391, %392) /* ty=(Tensor[(168, 1176), bool], Tensor[(11, 12, 8), float64]) */;
  %394 = cast(%var_3853, dtype="bool") /* ty=Tensor[(360), bool] */;
  %395 = cast(%var_3853, dtype="bool") /* ty=Tensor[(360), bool] */;
  %396 = cast(meta[relay.Constant][20] /* ty=Tensor[(48), int16] */, dtype="int16") /* ty=Tensor[(48), int16] */;
  %397 = reshape(%394, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %398 = reshape(%395, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
  %399 = reshape(%396, newshape=[48]) /* ty=Tensor[(48), int16] */;
  %400 = @func_2065(%397, %398, %399) /* ty=(Tensor[(13, 8, 6), int16], Tensor[(48), int16], Tensor[(624), int16], Tensor[(286, 1), uint64], Tensor[(6, 12, 5), float64]) */;
  %401 = cast(%var_3850, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %402 = tan(%401) /* ty=Tensor[(1176), float32] */;
  %403 = cast(%402, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %404 = %388.0;
  %405 = %393.1;
  %406 = %400.3;
  %407 = atanh(%403) /* ty=Tensor[(1176), float32] */;
  %408 = @func_3638() /* ty=Tensor[(3, 14, 9), uint32] */;
  (%404, %405, meta[relay.Constant][19] /* ty=Tensor[(528, 2), float32] */, %406, %var_3853, meta[relay.Constant][20] /* ty=Tensor[(48), int16] */, %407, %408)
}

def @func_3186(%var_3181: Tensor[(3, 14, 9), float32]) -> (Tensor[(3, 14, 9), float64],) {
  %409 = @func_2949() /* ty=(Tensor[(3, 14, 9), float64],) */;
  %410 = %409.0;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
  %412 = cosh(%411) /* ty=Tensor[(3, 14, 9), float32] */;
  %413 = cast(%var_3181, dtype="float64") /* ty=Tensor[(3, 14, 9), float64] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%412, dtype="float64") /* ty=Tensor[(3, 14, 9), float64] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %417 = floor_mod(%415, %416) /* ty=Tensor[(3, 14, 9), float64] */;
  (%417,)
}

def @func_2937() -> (Tensor[(14, 5, 8), uint16],) {
  %418 = @func_2553() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %419 = %418.0;
  (%419,)
}

def @func_2721(%var_2691: Tensor[(14, 5, 8), uint16]) -> (Tensor[(14, 5, 8), uint64], Tensor[(14, 5, 8), float64]) {
  %420 = @func_2553() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %421 = %420.0;
  %422 = cast(%var_2691, dtype="uint64") /* ty=Tensor[(14, 5, 8), uint64] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%421, dtype="uint64") /* ty=Tensor[(14, 5, 8), uint64] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %426 = cast(%var_2691, dtype="bool") /* ty=Tensor[(14, 5, 8), bool] */;
  %427 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%421, dtype="bool") /* ty=Tensor[(14, 5, 8), bool] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %430 = equal(%428, %429) /* ty=Tensor[(14, 5, 8), bool] */;
  %431 = cast(%421, dtype="int32") /* ty=Tensor[(14, 5, 8), int32] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%430, dtype="int32") /* ty=Tensor[(14, 5, 8), int32] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %435 = multiply(%433, %434) /* ty=Tensor[(14, 5, 8), int32] */;
  %436 = cast(%435, dtype="float64") /* ty=Tensor[(14, 5, 8), float64] */;
  %437 = minimum(%424, %425) /* ty=Tensor[(14, 5, 8), uint64] */;
  %438 = tan(%436) /* ty=Tensor[(14, 5, 8), float64] */;
  (%437, %438)
}

def @func_2065(%var_2021: Tensor[(6, 12, 5), bool], %var_2022: Tensor[(6, 12, 5), bool], %var_2043: Tensor[(48), int16]) -> (Tensor[(13, 8, 6), int16], Tensor[(48), int16], Tensor[(624), int16], Tensor[(286, 1), uint64], Tensor[(6, 12, 5), float64]) {
  %439 = cast(%var_2043, dtype="int16") /* ty=Tensor[(48), int16] */;
  %440 = cast(meta[relay.Constant][21] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
  %441 = cast(meta[relay.Constant][22] /* ty=Tensor[(286, 1), uint64] */, dtype="uint64") /* ty=Tensor[(286, 1), uint64] */;
  %442 = reshape(%439, newshape=[1, 8, 6]) /* ty=Tensor[(1, 8, 6), int16] */;
  %443 = reshape(%440, newshape=[13, 8, 6]) /* ty=Tensor[(13, 8, 6), int16] */;
  %444 = reshape(%441, newshape=[286, 1]) /* ty=Tensor[(286, 1), uint64] */;
  %445 = @func_1912(%442, %443, %444) /* ty=(Tensor[(13, 8, 6), int16], Tensor[(1, 8, 6), float64], Tensor[(10, 2, 10), uint32], Tensor[(286, 1), uint64], Tensor[(10, 20), uint32]) */;
  %446 = cast(%var_2022, dtype="bool") /* ty=Tensor[(6, 12, 5), bool] */;
  %447 = shape_of(%var_2021, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%var_2021, dtype="bool") /* ty=Tensor[(6, 12, 5), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %450 = logical_and(%448, %449) /* ty=Tensor[(6, 12, 5), bool] */;
  %451 = cast(%450, dtype="float64") /* ty=Tensor[(6, 12, 5), float64] */;
  %452 = asin(%451) /* ty=Tensor[(6, 12, 5), float64] */;
  %453 = cast(%452, dtype="float64") /* ty=Tensor[(6, 12, 5), float64] */;
  %454 = %445.0;
  %455 = tan(%453) /* ty=Tensor[(6, 12, 5), float64] */;
  (%454, %var_2043, meta[relay.Constant][21] /* ty=Tensor[(624), int16] */, meta[relay.Constant][22] /* ty=Tensor[(286, 1), uint64] */, %455)
}

def @func_4058() -> (Tensor[(3, 14, 9), int8],) {
  %456 = @func_2949() /* ty=(Tensor[(3, 14, 9), float64],) */;
  %457 = %456.0;
  %458 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 14, 9), float64] */, dtype="int8") /* ty=Tensor[(3, 14, 9), int8] */;
  %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%457, dtype="int8") /* ty=Tensor[(3, 14, 9), int8] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %462 = minimum(%460, %461) /* ty=Tensor[(3, 14, 9), int8] */;
  (%462,)
}

def @func_2553() -> (Tensor[(14, 5, 8), uint16],) {
  %463 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 5, 8), uint16] */, dtype="uint16") /* ty=Tensor[(14, 5, 8), uint16] */;
  %464 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(14, 5, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 5, 8), uint16] */, dtype="uint16") /* ty=Tensor[(14, 5, 8), uint16] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %467 = logical_xor(%465, %466) /* ty=Tensor[(14, 5, 8), uint16] */;
  (%467,)
}

def @func_3271(%var_3243: Tensor[(3, 14, 9), float64]) -> (Tensor[(3, 14, 9), bool],) {
  %468 = @func_2679() /* ty=Tensor[(3, 14, 9), float64] */;
  %469 = cast(%var_3243, dtype="bool") /* ty=Tensor[(3, 14, 9), bool] */;
  %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(3), int32] */;
  %471 = cast(%468, dtype="bool") /* ty=Tensor[(3, 14, 9), bool] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %473 = less(%471, %472) /* ty=Tensor[(3, 14, 9), bool] */;
  (%473,)
}

def @func_2521(%var_2496: Tensor[(5, 5, 6), float32], %var_2507: Tensor[(5, 5, 6), float32]) -> (Tensor[(5, 5, 6), float64], Tensor[(5, 5, 6), bool], Tensor[(168, 1176), bool], Tensor[(1056), float32], Tensor[(1176), float64]) {
  %474 = cast(%var_2496, dtype="float32") /* ty=Tensor[(5, 5, 6), float32] */;
  %475 = acos(%474) /* ty=Tensor[(5, 5, 6), float32] */;
  %476 = cast(%475, dtype="float64") /* ty=Tensor[(5, 5, 6), float64] */;
  %477 = cast(%var_2507, dtype="bool") /* ty=Tensor[(5, 5, 6), bool] */;
  %478 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%475, dtype="bool") /* ty=Tensor[(5, 5, 6), bool] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %481 = cast(meta[relay.Constant][26] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %482 = cast(meta[relay.Constant][27] /* ty=Tensor[(1176), float64] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %483 = reshape(%481, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), float32] */;
  %484 = reshape(%482, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %485 = @func_465(%483, %484) /* ty=(Tensor[(168, 1176), bool], Tensor[(11, 12, 8), float64]) */;
  %486 = cosh(%476) /* ty=Tensor[(5, 5, 6), float64] */;
  %487 = not_equal(%479, %480) /* ty=Tensor[(5, 5, 6), bool] */;
  %488 = %485.0;
  (%486, %487, %488, meta[relay.Constant][26] /* ty=Tensor[(1056), float32] */, meta[relay.Constant][27] /* ty=Tensor[(1176), float64] */)
}

def @func_3506() -> (Tensor[(14, 5, 8), float64],) {
  %489 = @func_2745() /* ty=Tensor[(14, 5, 8), float64] */;
  (%489,)
}

def @func_465(%var_419: Tensor[(11, 12, 8), float32], %var_427: Tensor[(1176), float64]) -> (Tensor[(168, 1176), bool], Tensor[(11, 12, 8), float64]) {
  %490 = cast(%var_427, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %491 = cast(%var_427, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %492 = reshape(%490, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
  %493 = reshape(%491, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
  %494 = @func_351(%492, %493) /* ty=(Tensor[(14, 7, 12), float64], Tensor[(168, ?), bool]) */;
  %495 = %494.1;
  %496 = cast(%var_427, dtype="bool") /* ty=Tensor[(1176), bool] */;
  %497 = cast(%495, dtype="bool") /* ty=Tensor[(168, ?), bool] */;
  %498 = cast(%var_419, dtype="float32") /* ty=Tensor[(11, 12, 8), float32] */;
  %499 = sqrt(%498) /* ty=Tensor[(11, 12, 8), float32] */;
  %500 = cast(%499, dtype="float64") /* ty=Tensor[(11, 12, 8), float64] */;
  %501 = less(%496, %497) /* ty=Tensor[(168, 1176), bool] */;
  %502 = acosh(%500) /* ty=Tensor[(11, 12, 8), float64] */;
  (%501, %502)
}

def @func_4182(%var_4172: Tensor[(7, 13), float64]) -> (Tensor[(7, 13), float64],) {
  %503 = cast(%var_4172, dtype="float64") /* ty=Tensor[(7, 13), float64] */;
  %504 = exp(%503) /* ty=Tensor[(7, 13), float64] */;
  (%504,)
}

def @func_5140() -> Tensor[(3, 14, 9), float64] {
  @func_3407() /* ty=Tensor[(3, 14, 9), float64] */
}

def @func_5424() -> (Tensor[(14, 5, 8), uint16], Tensor[(3, 14, 9), float64], Tensor[(3, 14, 9), float32]) {
  %505 = @func_4643() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %506 = @func_3919() /* ty=Tensor[(3, 14, 9), float64] */;
  %507 = cast(%506, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
  %508 = %505.0;
  %509 = @func_3407() /* ty=Tensor[(3, 14, 9), float64] */;
  %510 = log10(%507) /* ty=Tensor[(3, 14, 9), float32] */;
  (%508, %509, %510)
}

def @func_3951(%var_3937: Tensor[(308), float32]) -> (Tensor[(14, 5, 8), float32], Tensor[(1, 168), uint16], Tensor[(308), float32]) {
  %511 = @func_2553() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %512 = %511.0;
  %513 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 5, 8), uint16] */, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%512, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %517 = cast(%var_3937, dtype="float32") /* ty=Tensor[(308), float32] */;
  %518 = reshape(%517, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %519 = @func_252(%518) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(8, 7, 3), uint16], Tensor[(1, 168), uint16], Tensor[(8, 7, 3), uint16], Tensor[(11, 7, 4), uint16], Tensor[(11, 7, 4), bool]) */;
  %520 = floor_divide(%515, %516) /* ty=Tensor[(14, 5, 8), float32] */;
  %521 = %519.2;
  (%520, %521, %var_3937)
}

def @func_2949() -> (Tensor[(3, 14, 9), float64],) {
  %522 = @func_2679() /* ty=Tensor[(3, 14, 9), float64] */;
  (%522,)
}

def @func_3482() -> (Tensor[(14, 5, 8), float64],) {
  %523 = @func_3437() /* ty=(Tensor[(14, 5, 8), uint16], Tensor[(14, 5, 8), float64]) */;
  %524 = %523.1;
  (%524,)
}

def @func_3919() -> Tensor[(3, 14, 9), float64] {
  @func_2679() /* ty=Tensor[(3, 14, 9), float64] */
}

def @func_4036(%var_4008: Tensor[(286), uint64], %var_4021: Tensor[(8, 78), int16], %var_4025: Tensor[(14, 5, 8), float64], %var_4032: Tensor[(308), float32], %var_4033: Tensor[(6, 196), float64], %var_4034: Tensor[(350), float64]) -> (Tensor[(10, 20), uint32], Tensor[(1, 48), int16], Tensor[(286), uint64], Tensor[(8, 78), uint64], Tensor[(14, 5, 8), bool], Tensor[(308), float32], Tensor[(308), float32], Tensor[(6, 196), float64], Tensor[(350), float64]) {
  %525 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 48), int16] */, dtype="int16") /* ty=Tensor[(1, 48), int16] */;
  %526 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 78), int16] */, dtype="int16") /* ty=Tensor[(8, 78), int16] */;
  %527 = cast(%var_4008, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %528 = reshape(%525, newshape=[1, 8, 6]) /* ty=Tensor[(1, 8, 6), int16] */;
  %529 = reshape(%526, newshape=[13, 8, 6]) /* ty=Tensor[(13, 8, 6), int16] */;
  %530 = reshape(%527, newshape=[286, 1]) /* ty=Tensor[(286, 1), uint64] */;
  %531 = @func_1912(%528, %529, %530) /* ty=(Tensor[(13, 8, 6), int16], Tensor[(1, 8, 6), float64], Tensor[(10, 2, 10), uint32], Tensor[(286, 1), uint64], Tensor[(10, 20), uint32]) */;
  %532 = cast(%var_4021, dtype="uint64") /* ty=Tensor[(8, 78), uint64] */;
  %533 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(8, 78), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %534 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 78), int16] */, dtype="uint64") /* ty=Tensor[(8, 78), uint64] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %536 = @func_3482() /* ty=(Tensor[(14, 5, 8), float64],) */;
  %537 = %536.0;
  %538 = cast(%var_4025, dtype="bool") /* ty=Tensor[(14, 5, 8), bool] */;
  %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%537, dtype="bool") /* ty=Tensor[(14, 5, 8), bool] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %542 = cast(%var_4032, dtype="float32") /* ty=Tensor[(308), float32] */;
  %543 = cast(%var_4033, dtype="float64") /* ty=Tensor[(6, 196), float64] */;
  %544 = cast(%var_4034, dtype="float64") /* ty=Tensor[(350), float64] */;
  %545 = reshape(%542, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %546 = reshape(%543, newshape=[1176, 1]) /* ty=Tensor[(1176, 1), float64] */;
  %547 = reshape(%544, newshape=[5, 5, 14]) /* ty=Tensor[(5, 5, 14), float64] */;
  %548 = @func_2365(%545, %546, %547) /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(308), float32], Tensor[(168, ?), bool], Tensor[(1176, 1), float64], Tensor[(5, 5, 14), uint32], Tensor[(168, ?), bool]) */;
  %549 = %531.4;
  %550 = maximum(%534, %535) /* ty=Tensor[(8, 78), uint64] */;
  %551 = logical_or(%540, %541) /* ty=Tensor[(14, 5, 8), bool] */;
  %552 = %548.1;
  (%549, meta[relay.Constant][29] /* ty=Tensor[(1, 48), int16] */, %var_4008, %550, %551, %552, %var_4032, %var_4033, %var_4034)
}

def @func_4234(%var_4211: Tensor[(11, 15, 5), int8], %var_4212: Tensor[(11, 15, 5), int8]) -> (Tensor[(11, 15, 5), int8], Tensor[(11, 15, 5), float64]) {
  %553 = cast(%var_4212, dtype="int8") /* ty=Tensor[(11, 15, 5), int8] */;
  %554 = shape_of(%var_4211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%var_4211, dtype="int8") /* ty=Tensor[(11, 15, 5), int8] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %557 = cast(%var_4212, dtype="float64") /* ty=Tensor[(11, 15, 5), float64] */;
  %558 = logical_xor(%555, %556) /* ty=Tensor[(11, 15, 5), int8] */;
  %559 = log2(%557) /* ty=Tensor[(11, 15, 5), float64] */;
  (%558, %559)
}

def @func_3638() -> Tensor[(3, 14, 9), uint32] {
  %560 = @func_2679() /* ty=Tensor[(3, 14, 9), float64] */;
  %561 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 14, 9), float64] */, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
  %562 = shape_of(%560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%560, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %565 = divide(%563, %564) /* ty=Tensor[(3, 14, 9), float32] */;
  %566 = cast(%560, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
  %567 = atanh(%566) /* ty=Tensor[(3, 14, 9), float32] */;
  %568 = cast(%567, dtype="uint32") /* ty=Tensor[(3, 14, 9), uint32] */;
  %569 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%565, dtype="uint32") /* ty=Tensor[(3, 14, 9), uint32] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  add(%570, %571) /* ty=Tensor[(3, 14, 9), uint32] */
}

def @func_596(%var_587: Tensor[(10, 2, 10), uint32], %var_588: Tensor[(10, 2, 10), uint32]) -> Tensor[(10, 2, 10), uint32] {
  %572 = cast(%var_588, dtype="uint32") /* ty=Tensor[(10, 2, 10), uint32] */;
  %573 = shape_of(%var_587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%var_587, dtype="uint32") /* ty=Tensor[(10, 2, 10), uint32] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_xor(%574, %575) /* ty=Tensor[(10, 2, 10), uint32] */
}

def @func_4643() -> (Tensor[(14, 5, 8), uint16],) {
  %576 = @func_2937() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %577 = %576.0;
  (%577,)
}

def @func_4847(%var_4822: Tensor[(7, 13, 16), uint8], %var_4823: Tensor[(7, 13, 16), uint8], %var_4835: Tensor[(2, 588), float64], %var_4837: Tensor[(32), float64], %var_4838: Tensor[(144), bool], %var_4839: int32) -> (Tensor[(7, 13, 16), uint8], Tensor[(7, 13, 16), float32], Tensor[(8, 7, 3), uint16], Tensor[(168), uint16], Tensor[(1056), float32], Tensor[(2, 588), float64], Tensor[(350), float64], Tensor[(32), float64], Tensor[(144), bool], int32) {
  %578 = cast(%var_4823, dtype="uint8") /* ty=Tensor[(7, 13, 16), uint8] */;
  %579 = shape_of(%var_4822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%var_4822, dtype="uint8") /* ty=Tensor[(7, 13, 16), uint8] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %582 = cast(%var_4823, dtype="float32") /* ty=Tensor[(7, 13, 16), float32] */;
  %583 = cast(meta[relay.Constant][32] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %584 = cast(meta[relay.Constant][33] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %585 = cast(%var_4835, dtype="float64") /* ty=Tensor[(2, 588), float64] */;
  %586 = cast(meta[relay.Constant][34] /* ty=Tensor[(350), float64] */, dtype="float64") /* ty=Tensor[(350), float64] */;
  %587 = cast(%var_4837, dtype="float64") /* ty=Tensor[(32), float64] */;
  %588 = cast(%var_4838, dtype="bool") /* ty=Tensor[(144), bool] */;
  %589 = cast(%var_4839, dtype="int32") /* ty=int32 */;
  %590 = reshape(%583, newshape=[168]) /* ty=Tensor[(168), uint16] */;
  %591 = reshape(%584, newshape=[1056]) /* ty=Tensor[(1056), float32] */;
  %592 = reshape(%585, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %593 = reshape(%586, newshape=[35, 10]) /* ty=Tensor[(35, 10), float64] */;
  %594 = reshape(%587, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %595 = reshape(%588, newshape=[144]) /* ty=Tensor[(144), bool] */;
  %596 = reshape(%589, newshape=[]) /* ty=int32 */;
  %597 = @func_3148(%590, %591, %592, %593, %594, %595, %596) /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(168), uint16], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64], Tensor[(8, 7, 3), uint16], Tensor[(308), float32], Tensor[(286), uint64], Tensor[(3, 14, 9), float64], Tensor[(200), int16], Tensor[(14, 5, 8), float32], Tensor[(3, 14, 9), float64], Tensor[(4, 15, 3), float32], Tensor[(32), float64], Tensor[(144), bool], int32, Tensor[(1, 180), int32], Tensor[(1, 286), uint64], Tensor[(35, 10), bool], Tensor[(8, 7, 3), uint16], Tensor[(14, 5, 8), float64]) */;
  %598 = left_shift(%580, %581) /* ty=Tensor[(7, 13, 16), uint8] */;
  %599 = log2(%582) /* ty=Tensor[(7, 13, 16), float32] */;
  %600 = %597.19;
  (%598, %599, %600, meta[relay.Constant][32] /* ty=Tensor[(168), uint16] */, meta[relay.Constant][33] /* ty=Tensor[(1056), float32] */, %var_4835, meta[relay.Constant][34] /* ty=Tensor[(350), float64] */, %var_4837, %var_4838, %var_4839)
}

def @func_1448(%var_1399: Tensor[(13, 2, 11), uint64], %var_1424: Tensor[(200), uint32]) -> (Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(13, 2, 11), uint16]) {
  %601 = cast(%var_1424, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %602 = cast(%var_1424, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %603 = reshape(%601, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint32] */;
  %604 = reshape(%602, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint32] */;
  %605 = cast(%var_1399, dtype="uint64") /* ty=Tensor[(13, 2, 11), uint64] */;
  %606 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(13, 2, 11), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 2, 11), uint64] */, dtype="uint64") /* ty=Tensor[(13, 2, 11), uint64] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %609 = bitwise_and(%607, %608) /* ty=Tensor[(13, 2, 11), uint64] */;
  %610 = cast(%var_1399, dtype="bool") /* ty=Tensor[(13, 2, 11), bool] */;
  %611 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(13, 2, 11), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 2, 11), uint64] */, dtype="bool") /* ty=Tensor[(13, 2, 11), bool] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %614 = greater_equal(%612, %613) /* ty=Tensor[(13, 2, 11), bool] */;
  %615 = cast(%614, dtype="uint16") /* ty=Tensor[(13, 2, 11), uint16] */;
  %616 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%609, dtype="uint16") /* ty=Tensor[(13, 2, 11), uint16] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %619 = @func_596(%603, %604) /* ty=Tensor[(10, 2, 10), uint32] */;
  %620 = subtract(%617, %618) /* ty=Tensor[(13, 2, 11), uint16] */;
  (%619, %var_1424, %620)
}

def @func_4535() -> (Tensor[(14, 5, 8), uint16], Tensor[(3, 14, 9), int8]) {
  %621 = @func_2937() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %622 = @func_4058() /* ty=(Tensor[(3, 14, 9), int8],) */;
  %623 = %621.0;
  %624 = %622.0;
  (%623, %624)
}

def @main(%var_5459: Tensor[(10, 14, 3), uint32], %var_5460: Tensor[(10, 14, 3), uint32]) -> (Tensor[(10, 14, 3), bool],) {
  %625 = cast(%var_5460, dtype="bool") /* ty=Tensor[(10, 14, 3), bool] */;
  %626 = shape_of(%var_5459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %627 = cast(%var_5459, dtype="bool") /* ty=Tensor[(10, 14, 3), bool] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %629 = not_equal(%627, %628) /* ty=Tensor[(10, 14, 3), bool] */;
  (%629,)
}

def @func_3757(%var_3751: Tensor[(6, 14), float32], %var_3752: Tensor[(6, 14), float32]) -> Tensor[(6, 14), bool] {
  %630 = cast(%var_3752, dtype="bool") /* ty=Tensor[(6, 14), bool] */;
  %631 = shape_of(%var_3751, dtype="int32") /* ty=Tensor[(2), int32] */;
  %632 = cast(%var_3751, dtype="bool") /* ty=Tensor[(6, 14), bool] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  not_equal(%632, %633) /* ty=Tensor[(6, 14), bool] */
}

def @func_4738(%var_4722: Tensor[(150), float32]) -> (Tensor[(3, 14, 9), float64], Tensor[(4, 6, 3), float64], Tensor[(18, 4), float64], Tensor[(1056), float32], Tensor[(150), float32]) {
  %634 = @func_3655() /* ty=(Tensor[(3, 14, 9), float64],) */;
  %635 = cast(meta[relay.Constant][36] /* ty=Tensor[(18, 4), float64] */, dtype="float64") /* ty=Tensor[(18, 4), float64] */;
  %636 = reshape(%635, newshape=[4, 6, 3]) /* ty=Tensor[(4, 6, 3), float64] */;
  %637 = cast(%var_4722, dtype="float32") /* ty=Tensor[(150), float32] */;
  %638 = cast(%var_4722, dtype="float32") /* ty=Tensor[(150), float32] */;
  %639 = reshape(%637, newshape=[5, 5, 6]) /* ty=Tensor[(5, 5, 6), float32] */;
  %640 = reshape(%638, newshape=[5, 5, 6]) /* ty=Tensor[(5, 5, 6), float32] */;
  %641 = @func_2521(%639, %640) /* ty=(Tensor[(5, 5, 6), float64], Tensor[(5, 5, 6), bool], Tensor[(168, 1176), bool], Tensor[(1056), float32], Tensor[(1176), float64]) */;
  %642 = %634.0;
  %643 = @func_2246(%636) /* ty=Tensor[(4, 6, 3), float64] */;
  %644 = %641.3;
  (%642, %643, meta[relay.Constant][36] /* ty=Tensor[(18, 4), float64] */, %644, %var_4722)
}

def @func_1315(%var_1271: int32, %var_1272: Tensor[(4, 15, 3), int32], %var_1311: Tensor[(1176), float64]) -> (Tensor[(4, 15, 3), int32], Tensor[(4, 15, 3), float32], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64]) {
  %645 = cast(%var_1271, dtype="int32") /* ty=int32 */;
  %646 = cast(%var_1272, dtype="int32") /* ty=Tensor[(4, 15, 3), int32] */;
  %647 = cast(%var_1272, dtype="float32") /* ty=Tensor[(4, 15, 3), float32] */;
  %648 = cast(%var_1271, dtype="float32") /* ty=float32 */;
  %649 = cast(meta[relay.Constant][37] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %650 = cast(%var_1311, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %651 = reshape(%649, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), float32] */;
  %652 = reshape(%650, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %653 = @func_465(%651, %652) /* ty=(Tensor[(168, 1176), bool], Tensor[(11, 12, 8), float64]) */;
  %654 = multiply(%645, %646) /* ty=Tensor[(4, 15, 3), int32] */;
  %655 = subtract(%647, %648) /* ty=Tensor[(4, 15, 3), float32] */;
  %656 = %653.1;
  (%654, %655, %656, meta[relay.Constant][37] /* ty=Tensor[(1056), float32] */, %var_1311)
}

def @func_4598(%var_4584: Tensor[(84), float32]) -> (Tensor[(14, 5, 8), uint16], Tensor[(6, 14), bool], Tensor[(84), float32]) {
  %657 = @func_2937() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %658 = cast(%var_4584, dtype="float32") /* ty=Tensor[(84), float32] */;
  %659 = cast(%var_4584, dtype="float32") /* ty=Tensor[(84), float32] */;
  %660 = reshape(%658, newshape=[6, 14]) /* ty=Tensor[(6, 14), float32] */;
  %661 = reshape(%659, newshape=[6, 14]) /* ty=Tensor[(6, 14), float32] */;
  %662 = %657.0;
  %663 = @func_3757(%660, %661) /* ty=Tensor[(6, 14), bool] */;
  (%662, %663, %var_4584)
}

def @func_4893() -> Tensor[(4, 10, 15), bool] {
  %664 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 10, 15), float32] */, dtype="float32") /* ty=Tensor[(4, 10, 15), float32] */;
  %665 = atan(%664) /* ty=Tensor[(4, 10, 15), float32] */;
  %666 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 10, 15), float32] */, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
  %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%665, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%668, %669) /* ty=Tensor[(4, 10, 15), bool] */
}

def @func_1597(%var_1594: Tensor[(1, 286), uint64], %var_1595: Tensor[(200), uint32]) -> (Tensor[(7, 3, 9), float32], Tensor[(10, 2, 10), uint32], Tensor[(1, 286), uint64], Tensor[(200), uint32]) {
  %670 = cast(meta[relay.Constant][39] /* ty=Tensor[(7, 3, 9), float32] */, dtype="float32") /* ty=Tensor[(7, 3, 9), float32] */;
  %671 = cast(%var_1594, dtype="uint64") /* ty=Tensor[(1, 286), uint64] */;
  %672 = cast(%var_1595, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %673 = reshape(%671, newshape=[13, 2, 11]) /* ty=Tensor[(13, 2, 11), uint64] */;
  %674 = reshape(%672, newshape=[200]) /* ty=Tensor[(200), uint32] */;
  %675 = @func_1448(%673, %674) /* ty=(Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(13, 2, 11), uint16]) */;
  %676 = sigmoid(%670) /* ty=Tensor[(7, 3, 9), float32] */;
  %677 = %675.0;
  (%676, %677, %var_1594, %var_1595)
}

def @func_2679() -> Tensor[(3, 14, 9), float64] {
  %678 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 14, 9), float32] */, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
  %679 = sigmoid(%678) /* ty=Tensor[(3, 14, 9), float32] */;
  %680 = cast(%679, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
  %681 = acosh(%680) /* ty=Tensor[(3, 14, 9), float32] */;
  %682 = cast(%681, dtype="uint8") /* ty=Tensor[(3, 14, 9), uint8] */;
  %683 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(3, 14, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 14, 9), float32] */, dtype="uint8") /* ty=Tensor[(3, 14, 9), uint8] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %686 = bitwise_and(%684, %685) /* ty=Tensor[(3, 14, 9), uint8] */;
  %687 = cast(%686, dtype="float64") /* ty=Tensor[(3, 14, 9), float64] */;
  cos(%687) /* ty=Tensor[(3, 14, 9), float64] */
}

def @func_3655() -> (Tensor[(3, 14, 9), float64],) {
  %688 = @func_2679() /* ty=Tensor[(3, 14, 9), float64] */;
  (%688,)
}

def @func_351(%var_328: Tensor[(14, 7, 12), float64], %var_329: Tensor[(14, 7, 12), float64]) -> (Tensor[(14, 7, 12), float64], Tensor[(168, ?), bool]) {
  %689 = cast(%var_329, dtype="float64") /* ty=Tensor[(14, 7, 12), float64] */;
  %690 = shape_of(%var_328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%var_328, dtype="float64") /* ty=Tensor[(14, 7, 12), float64] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %693 = cast(meta[relay.Constant][41] /* ty=Tensor[(168, 1), uint16] */, dtype="uint16") /* ty=Tensor[(168, 1), uint16] */;
  %694 = cast(meta[relay.Constant][41] /* ty=Tensor[(168, 1), uint16] */, dtype="uint16") /* ty=Tensor[(168, 1), uint16] */;
  %695 = reshape(%693, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %696 = reshape(%694, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %697 = @func_131(%695, %696) /* ty=(Tensor[(8, 7, 3), uint16],) */;
  %698 = %697.0;
  %699 = cast(%698, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
  %700 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(168, 1), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %701 = cast(meta[relay.Constant][41] /* ty=Tensor[(168, 1), uint16] */, dtype="bool") /* ty=Tensor[(168, 1), bool] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %703 = floor_divide(%691, %692) /* ty=Tensor[(14, 7, 12), float64] */;
  %704 = logical_and(%701, %702) /* ty=Tensor[(168, ?), bool] */;
  (%703, %704)
}

def @func_2635(%var_2630: Tensor[(286), uint64], %var_2631: Tensor[(200), uint32]) -> (Tensor[(14, 5, 8), uint16], Tensor[(10, 2, 10), uint32], Tensor[(286), uint64], Tensor[(200), uint32]) {
  %705 = @func_2553() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %706 = cast(%var_2630, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %707 = cast(%var_2631, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %708 = reshape(%706, newshape=[13, 2, 11]) /* ty=Tensor[(13, 2, 11), uint64] */;
  %709 = reshape(%707, newshape=[200]) /* ty=Tensor[(200), uint32] */;
  %710 = @func_1448(%708, %709) /* ty=(Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(13, 2, 11), uint16]) */;
  %711 = %705.0;
  %712 = %710.0;
  (%711, %712, %var_2630, %var_2631)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4895() -> Tensor[(4, 10, 15), bool] {
  @func_4893() /* ty=Tensor[(4, 10, 15), bool] */
}

def @func_1320(%var_1317: int32, %var_1318: Tensor[(4, 15, 3), int32], %var_1319: Tensor[(1176), float64]) -> (Tensor[(4, 15, 3), int32], Tensor[(4, 15, 3), float32], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64]) {
  @func_1315(%var_1317, %var_1318, %var_1319) /* ty=(Tensor[(4, 15, 3), int32], Tensor[(4, 15, 3), float32], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64]) */
}

def @func_3967() -> Tensor[(14, 5, 8), uint16] {
  %0 = @func_2553() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %0.0
}

def @func_4968() -> Tensor[(14, 5, 8), uint16] {
  @func_4686() /* ty=Tensor[(14, 5, 8), uint16] */
}

def @func_3186(%var_3181: Tensor[(3, 14, 9), float32]) -> (Tensor[(3, 14, 9), float64],) {
  %1 = @func_2949() /* ty=(Tensor[(3, 14, 9), float64],) */;
  %2 = %1.0;
  %3 = cast(%2, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
  %4 = cosh(%3) /* ty=Tensor[(3, 14, 9), float32] */;
  %5 = cast(%var_3181, dtype="float64") /* ty=Tensor[(3, 14, 9), float64] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="float64") /* ty=Tensor[(3, 14, 9), float64] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %9 = floor_mod(%7, %8) /* ty=Tensor[(3, 14, 9), float64] */;
  (%9,)
}

def @func_3919() -> Tensor[(3, 14, 9), float64] {
  @func_2679() /* ty=Tensor[(3, 14, 9), float64] */
}

def @func_3189(%var_3187: Tensor[(3, 14, 9), float32]) -> (Tensor[(3, 14, 9), float64],) {
  @func_3186(%var_3187) /* ty=(Tensor[(3, 14, 9), float64],) */
}

def @func_4206(%var_4195: Tensor[(200), uint32]) -> (Tensor[(14, 5, 8), float64], Tensor[(10, 2, 10), uint32], Tensor[(200), uint32]) {
  %10 = @func_3506() /* ty=(Tensor[(14, 5, 8), float64],) */;
  %11 = cast(%var_4195, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %12 = cast(%var_4195, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %13 = reshape(%11, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint32] */;
  %14 = reshape(%12, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint32] */;
  %15 = %10.0;
  %16 = @func_596(%13, %14) /* ty=Tensor[(10, 2, 10), uint32] */;
  (%15, %16, %var_4195)
}

def @func_3421(%var_3419: Tensor[(16, 10, 3), int16], %var_3420: Tensor[(16, 10, 3), int16]) -> (Tensor[(16, 10, 3), int16],) {
  %22 = fn (%var_3413: Tensor[(16, 10, 3), int16], %var_3414: Tensor[(16, 10, 3), int16]) -> (Tensor[(16, 10, 3), int16],) {
    %17 = cast(%var_3414, dtype="int16") /* ty=Tensor[(16, 10, 3), int16] */;
    %18 = shape_of(%var_3413, dtype="int32") /* ty=Tensor[(3), int32] */;
    %19 = cast(%var_3413, dtype="int16") /* ty=Tensor[(16, 10, 3), int16] */;
    %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %21 = logical_xor(%19, %20) /* ty=Tensor[(16, 10, 3), int16] */;
    (%21,)
  };
  %22(%var_3419, %var_3420) /* ty=(Tensor[(16, 10, 3), int16],) */
}

def @func_4036(%var_4008: Tensor[(286), uint64], %var_4021: Tensor[(8, 78), int16], %var_4025: Tensor[(14, 5, 8), float64], %var_4032: Tensor[(308), float32], %var_4033: Tensor[(6, 196), float64], %var_4034: Tensor[(350), float64]) -> (Tensor[(10, 20), uint32], Tensor[(1, 48), int16], Tensor[(286), uint64], Tensor[(8, 78), uint64], Tensor[(14, 5, 8), bool], Tensor[(308), float32], Tensor[(308), float32], Tensor[(6, 196), float64], Tensor[(350), float64]) {
  %23 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 48), int16] */, dtype="int16") /* ty=Tensor[(1, 48), int16] */;
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 78), int16] */, dtype="int16") /* ty=Tensor[(8, 78), int16] */;
  %25 = cast(%var_4008, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %26 = reshape(%23, newshape=[1, 8, 6]) /* ty=Tensor[(1, 8, 6), int16] */;
  %27 = reshape(%24, newshape=[13, 8, 6]) /* ty=Tensor[(13, 8, 6), int16] */;
  %28 = reshape(%25, newshape=[286, 1]) /* ty=Tensor[(286, 1), uint64] */;
  %29 = @func_1912(%26, %27, %28) /* ty=(Tensor[(13, 8, 6), int16], Tensor[(1, 8, 6), float64], Tensor[(10, 2, 10), uint32], Tensor[(286, 1), uint64], Tensor[(10, 20), uint32]) */;
  %30 = cast(%var_4021, dtype="uint64") /* ty=Tensor[(8, 78), uint64] */;
  %31 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(8, 78), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 78), int16] */, dtype="uint64") /* ty=Tensor[(8, 78), uint64] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %34 = @func_3482() /* ty=(Tensor[(14, 5, 8), float64],) */;
  %35 = %34.0;
  %36 = cast(%var_4025, dtype="bool") /* ty=Tensor[(14, 5, 8), bool] */;
  %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%35, dtype="bool") /* ty=Tensor[(14, 5, 8), bool] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %40 = cast(%var_4032, dtype="float32") /* ty=Tensor[(308), float32] */;
  %41 = cast(%var_4033, dtype="float64") /* ty=Tensor[(6, 196), float64] */;
  %42 = cast(%var_4034, dtype="float64") /* ty=Tensor[(350), float64] */;
  %43 = reshape(%40, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %44 = reshape(%41, newshape=[1176, 1]) /* ty=Tensor[(1176, 1), float64] */;
  %45 = reshape(%42, newshape=[5, 5, 14]) /* ty=Tensor[(5, 5, 14), float64] */;
  %46 = @func_2365(%43, %44, %45) /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(308), float32], Tensor[(168, ?), bool], Tensor[(1176, 1), float64], Tensor[(5, 5, 14), uint32], Tensor[(168, ?), bool]) */;
  %47 = %29.4;
  %48 = maximum(%32, %33) /* ty=Tensor[(8, 78), uint64] */;
  %49 = logical_or(%38, %39) /* ty=Tensor[(14, 5, 8), bool] */;
  %50 = %46.1;
  (%47, meta[relay.Constant][0] /* ty=Tensor[(1, 48), int16] */, %var_4008, %48, %49, %50, %var_4032, %var_4033, %var_4034)
}

def @func_3437() -> (Tensor[(14, 5, 8), uint16], Tensor[(14, 5, 8), float64]) {
  %51 = @func_2937() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %52 = %51.0;
  %53 = @func_2745() /* ty=Tensor[(14, 5, 8), float64] */;
  (%52, %53)
}

def @func_4601(%var_4599: Tensor[(84), float32]) -> (Tensor[(14, 5, 8), uint16], Tensor[(6, 14), bool], Tensor[(84), float32]) {
  @func_4598(%var_4599) /* ty=(Tensor[(14, 5, 8), uint16], Tensor[(6, 14), bool], Tensor[(84), float32]) */
}

def @func_3439() -> (Tensor[(14, 5, 8), uint16], Tensor[(14, 5, 8), float64]) {
  @func_3437() /* ty=(Tensor[(14, 5, 8), uint16], Tensor[(14, 5, 8), float64]) */
}

def @func_469(%var_467: Tensor[(11, 12, 8), float32], %var_468: Tensor[(1176), float64]) -> (Tensor[(168, 1176), bool], Tensor[(11, 12, 8), float64]) {
  @func_465(%var_467, %var_468) /* ty=(Tensor[(168, 1176), bool], Tensor[(11, 12, 8), float64]) */
}

def @func_1912(%var_1894: Tensor[(1, 8, 6), int16], %var_1895: Tensor[(13, 8, 6), int16], %var_1903: Tensor[(286, 1), uint64]) -> (Tensor[(13, 8, 6), int16], Tensor[(1, 8, 6), float64], Tensor[(10, 2, 10), uint32], Tensor[(286, 1), uint64], Tensor[(10, 20), uint32]) {
  %54 = cast(%var_1894, dtype="int16") /* ty=Tensor[(1, 8, 6), int16] */;
  %55 = cast(%var_1895, dtype="int16") /* ty=Tensor[(13, 8, 6), int16] */;
  %56 = cast(%var_1894, dtype="float64") /* ty=Tensor[(1, 8, 6), float64] */;
  %57 = cast(%var_1903, dtype="uint64") /* ty=Tensor[(286, 1), uint64] */;
  %58 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 20), uint32] */, dtype="uint32") /* ty=Tensor[(10, 20), uint32] */;
  %59 = reshape(%57, newshape=[1, 286]) /* ty=Tensor[(1, 286), uint64] */;
  %60 = reshape(%58, newshape=[200]) /* ty=Tensor[(200), uint32] */;
  %61 = @func_1597(%59, %60) /* ty=(Tensor[(7, 3, 9), float32], Tensor[(10, 2, 10), uint32], Tensor[(1, 286), uint64], Tensor[(200), uint32]) */;
  %62 = maximum(%54, %55) /* ty=Tensor[(13, 8, 6), int16] */;
  %63 = sqrt(%56) /* ty=Tensor[(1, 8, 6), float64] */;
  %64 = %61.1;
  (%62, %63, %64, %var_1903, meta[relay.Constant][2] /* ty=Tensor[(10, 20), uint32] */)
}

def @func_3921() -> Tensor[(3, 14, 9), float64] {
  @func_3919() /* ty=Tensor[(3, 14, 9), float64] */
}

def @func_4644() -> (Tensor[(14, 5, 8), uint16],) {
  %67 = fn () -> (Tensor[(14, 5, 8), uint16],) {
    %65 = @func_2937() /* ty=(Tensor[(14, 5, 8), uint16],) */;
    %66 = %65.0;
    (%66,)
  };
  %67() /* ty=(Tensor[(14, 5, 8), uint16],) */
}

def @func_3657() -> (Tensor[(3, 14, 9), float64],) {
  @func_3655() /* ty=(Tensor[(3, 14, 9), float64],) */
}

def @func_252(%var_239: Tensor[(11, 7, 4), float32]) -> (Tensor[(11, 7, 4), float32], Tensor[(8, 7, 3), uint16], Tensor[(1, 168), uint16], Tensor[(8, 7, 3), uint16], Tensor[(11, 7, 4), uint16], Tensor[(11, 7, 4), bool]) {
  %68 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 7, 4), float32] */, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %69 = exp(%68) /* ty=Tensor[(11, 7, 4), float32] */;
  %70 = cast(%69, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 168), uint16] */, dtype="uint16") /* ty=Tensor[(1, 168), uint16] */;
  %72 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 168), uint16] */, dtype="uint16") /* ty=Tensor[(1, 168), uint16] */;
  %73 = reshape(%71, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %74 = reshape(%72, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %75 = @func_131(%73, %74) /* ty=(Tensor[(8, 7, 3), uint16],) */;
  %76 = %75.0;
  %77 = cast(%76, dtype="uint16") /* ty=Tensor[(8, 7, 3), uint16] */;
  %78 = cast(%76, dtype="uint16") /* ty=Tensor[(8, 7, 3), uint16] */;
  %79 = reshape(%77, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %80 = reshape(%78, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %81 = @func_131(%79, %80) /* ty=(Tensor[(8, 7, 3), uint16],) */;
  %82 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 7, 4), float32] */, dtype="uint16") /* ty=Tensor[(11, 7, 4), uint16] */;
  %83 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%69, dtype="uint16") /* ty=Tensor[(11, 7, 4), uint16] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %86 = cast(%var_239, dtype="bool") /* ty=Tensor[(11, 7, 4), bool] */;
  %87 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%69, dtype="bool") /* ty=Tensor[(11, 7, 4), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %90 = asinh(%70) /* ty=Tensor[(11, 7, 4), float32] */;
  %91 = %81.0;
  %92 = logical_xor(%84, %85) /* ty=Tensor[(11, 7, 4), uint16] */;
  %93 = logical_or(%88, %89) /* ty=Tensor[(11, 7, 4), bool] */;
  (%90, %76, meta[relay.Constant][4] /* ty=Tensor[(1, 168), uint16] */, %91, %92, %93)
}

def @func_1696(%var_1618: Tensor[(4, 1, 8), float64], %var_1649: Tensor[(144), bool], %var_1656: int32, %var_1657: Tensor[(180), int32], %var_1658: Tensor[(12, 98), float64]) -> (Tensor[(4, ?, 8), bool], Tensor[(4, 13, 8), bool], Tensor[(7, 4, 12), bool], Tensor[(144), bool], Tensor[(200), uint32], Tensor[(4, 15, 3), float32], int32, Tensor[(180), int32], Tensor[(12, 98), float64], Tensor[(4, ?, 8), bool], Tensor[(1176), float64], Tensor[(10, 2, 10), uint32]) {
  %94 = cast(%var_1618, dtype="float64") /* ty=Tensor[(4, 1, 8), float64] */;
  %95 = atan(%94) /* ty=Tensor[(4, 1, 8), float64] */;
  %96 = cast(%95, dtype="int64") /* ty=Tensor[(4, 1, 8), int64] */;
  %97 = shape_of(%var_1618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%var_1618, dtype="int64") /* ty=Tensor[(4, 1, 8), int64] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %100 = subtract(%98, %99) /* ty=Tensor[(4, ?, 8), int64] */;
  %101 = cast(%var_1618, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%100, dtype="bool") /* ty=Tensor[(4, ?, 8), bool] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %105 = cast(%var_1618, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
  %106 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 13, 8), float64] */, dtype="bool") /* ty=Tensor[(4, 13, 8), bool] */;
  %107 = cast(%var_1649, dtype="bool") /* ty=Tensor[(144), bool] */;
  %108 = cast(meta[relay.Constant][6] /* ty=Tensor[(200), uint32] */, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %109 = cast(%var_1649, dtype="bool") /* ty=Tensor[(144), bool] */;
  %110 = reshape(%107, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), bool] */;
  %111 = reshape(%108, newshape=[200]) /* ty=Tensor[(200), uint32] */;
  %112 = reshape(%109, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), bool] */;
  %113 = @func_998(%110, %111, %112) /* ty=(Tensor[(7, 4, 12), bool], Tensor[(14, 7, 12), float64], Tensor[(1176), float64], Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(3, 4, 12), bool]) */;
  %114 = cast(%var_1656, dtype="int32") /* ty=int32 */;
  %115 = cast(%var_1657, dtype="int32") /* ty=Tensor[(180), int32] */;
  %116 = cast(%var_1658, dtype="float64") /* ty=Tensor[(12, 98), float64] */;
  %117 = reshape(%114, newshape=[]) /* ty=int32 */;
  %118 = reshape(%115, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), int32] */;
  %119 = reshape(%116, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %120 = @func_1315(%117, %118, %119) /* ty=(Tensor[(4, 15, 3), int32], Tensor[(4, 15, 3), float32], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64]) */;
  %121 = cast(%100, dtype="float32") /* ty=Tensor[(4, ?, 8), float32] */;
  %122 = acosh(%121) /* ty=Tensor[(4, ?, 8), float32] */;
  %123 = cast(%95, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%122, dtype="bool") /* ty=Tensor[(4, ?, 8), bool] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %127 = cast(%var_1656, dtype="int32") /* ty=int32 */;
  %128 = %120.1;
  %129 = cast(%128, dtype="int32") /* ty=Tensor[(4, 15, 3), int32] */;
  %130 = cast(%var_1658, dtype="float64") /* ty=Tensor[(12, 98), float64] */;
  %131 = reshape(%127, newshape=[]) /* ty=int32 */;
  %132 = reshape(%129, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), int32] */;
  %133 = reshape(%130, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %134 = @func_1315(%131, %132, %133) /* ty=(Tensor[(4, 15, 3), int32], Tensor[(4, 15, 3), float32], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64]) */;
  %135 = cast(meta[relay.Constant][6] /* ty=Tensor[(200), uint32] */, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %136 = cast(meta[relay.Constant][6] /* ty=Tensor[(200), uint32] */, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %137 = reshape(%135, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint32] */;
  %138 = reshape(%136, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint32] */;
  %139 = greater(%103, %104) /* ty=Tensor[(4, ?, 8), bool] */;
  %140 = less_equal(%105, %106) /* ty=Tensor[(4, 13, 8), bool] */;
  %141 = %113.0;
  %142 = greater_equal(%125, %126) /* ty=Tensor[(4, ?, 8), bool] */;
  %143 = %134.4;
  %144 = @func_596(%137, %138) /* ty=Tensor[(10, 2, 10), uint32] */;
  (%139, %140, %141, %var_1649, meta[relay.Constant][6] /* ty=Tensor[(200), uint32] */, %128, %var_1656, %var_1657, %var_1658, %142, %143, %144)
}

def @func_3482() -> (Tensor[(14, 5, 8), float64],) {
  %145 = @func_3437() /* ty=(Tensor[(14, 5, 8), uint16], Tensor[(14, 5, 8), float64]) */;
  %146 = %145.1;
  (%146,)
}

def @func_2746() -> Tensor[(14, 5, 8), float64] {
  %150 = fn () -> Tensor[(14, 5, 8), float64] {
    %147 = @func_2553() /* ty=(Tensor[(14, 5, 8), uint16],) */;
    %148 = %147.0;
    %149 = cast(%148, dtype="float64") /* ty=Tensor[(14, 5, 8), float64] */;
    log2(%149) /* ty=Tensor[(14, 5, 8), float64] */
  };
  %150() /* ty=Tensor[(14, 5, 8), float64] */
}

def @func_2555() -> (Tensor[(14, 5, 8), uint16],) {
  @func_2553() /* ty=(Tensor[(14, 5, 8), uint16],) */
}

def @func_465(%var_419: Tensor[(11, 12, 8), float32], %var_427: Tensor[(1176), float64]) -> (Tensor[(168, 1176), bool], Tensor[(11, 12, 8), float64]) {
  %151 = cast(%var_427, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %152 = cast(%var_427, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %153 = reshape(%151, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
  %154 = reshape(%152, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
  %155 = @func_351(%153, %154) /* ty=(Tensor[(14, 7, 12), float64], Tensor[(168, ?), bool]) */;
  %156 = %155.1;
  %157 = cast(%var_427, dtype="bool") /* ty=Tensor[(1176), bool] */;
  %158 = cast(%156, dtype="bool") /* ty=Tensor[(168, ?), bool] */;
  %159 = cast(%var_419, dtype="float32") /* ty=Tensor[(11, 12, 8), float32] */;
  %160 = sqrt(%159) /* ty=Tensor[(11, 12, 8), float32] */;
  %161 = cast(%160, dtype="float64") /* ty=Tensor[(11, 12, 8), float64] */;
  %162 = less(%157, %158) /* ty=Tensor[(168, 1176), bool] */;
  %163 = acosh(%161) /* ty=Tensor[(11, 12, 8), float64] */;
  (%162, %163)
}

def @func_3951(%var_3937: Tensor[(308), float32]) -> (Tensor[(14, 5, 8), float32], Tensor[(1, 168), uint16], Tensor[(308), float32]) {
  %164 = @func_2553() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %165 = %164.0;
  %166 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 5, 8), uint16] */, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%165, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %170 = cast(%var_3937, dtype="float32") /* ty=Tensor[(308), float32] */;
  %171 = reshape(%170, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %172 = @func_252(%171) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(8, 7, 3), uint16], Tensor[(1, 168), uint16], Tensor[(8, 7, 3), uint16], Tensor[(11, 7, 4), uint16], Tensor[(11, 7, 4), bool]) */;
  %173 = floor_divide(%168, %169) /* ty=Tensor[(14, 5, 8), float32] */;
  %174 = %172.2;
  (%173, %174, %var_3937)
}

def @func_5122() -> (Tensor[(3, 14, 9), float64],) {
  %175 = @func_2949() /* ty=(Tensor[(3, 14, 9), float64],) */;
  %176 = %175.0;
  (%176,)
}

def @func_4535() -> (Tensor[(14, 5, 8), uint16], Tensor[(3, 14, 9), int8]) {
  %177 = @func_2937() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %178 = @func_4058() /* ty=(Tensor[(3, 14, 9), int8],) */;
  %179 = %177.0;
  %180 = %178.0;
  (%179, %180)
}

def @func_5085(%var_5081: Tensor[(308), float32], %var_5082: Tensor[(308), float32], %var_5083: Tensor[(360), bool], %var_5084: Tensor[(3, 14, 9), float64]) -> (Tensor[(1, 168), uint16], Tensor[(308), bool], Tensor[(3, 14, 9), float32], Tensor[(13, 8, 6), int16], Tensor[(360), bool], Tensor[(48), int16], Tensor[(3, 14, 9), bool]) {
  %211 = fn (%var_5052: Tensor[(308), float32], %var_5055: Tensor[(308), float32], %var_5066: Tensor[(360), bool], %var_5075: Tensor[(3, 14, 9), float64]) -> (Tensor[(1, 168), uint16], Tensor[(308), bool], Tensor[(3, 14, 9), float32], Tensor[(13, 8, 6), int16], Tensor[(360), bool], Tensor[(48), int16], Tensor[(3, 14, 9), bool]) {
    %181 = cast(%var_5052, dtype="float32") /* ty=Tensor[(308), float32] */;
    %182 = reshape(%181, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
    %183 = @func_252(%182) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(8, 7, 3), uint16], Tensor[(1, 168), uint16], Tensor[(8, 7, 3), uint16], Tensor[(11, 7, 4), uint16], Tensor[(11, 7, 4), bool]) */;
    %184 = cast(%var_5055, dtype="bool") /* ty=Tensor[(308), bool] */;
    %185 = shape_of(%var_5052, dtype="int32") /* ty=Tensor[(1), int32] */;
    %186 = cast(%var_5052, dtype="bool") /* ty=Tensor[(308), bool] */;
    %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?), bool] */;
    %188 = @func_2679() /* ty=Tensor[(3, 14, 9), float64] */;
    %189 = cast(%188, dtype="float64") /* ty=Tensor[(3, 14, 9), float64] */;
    %190 = sinh(%189) /* ty=Tensor[(3, 14, 9), float64] */;
    %191 = cast(%188, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
    %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
    %193 = cast(%190, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
    %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %195 = cast(%var_5066, dtype="bool") /* ty=Tensor[(360), bool] */;
    %196 = cast(%var_5066, dtype="bool") /* ty=Tensor[(360), bool] */;
    %197 = cast(meta[relay.Constant][8] /* ty=Tensor[(48), int16] */, dtype="int16") /* ty=Tensor[(48), int16] */;
    %198 = reshape(%195, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
    %199 = reshape(%196, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
    %200 = reshape(%197, newshape=[48]) /* ty=Tensor[(48), int16] */;
    %201 = @func_2065(%198, %199, %200) /* ty=(Tensor[(13, 8, 6), int16], Tensor[(48), int16], Tensor[(624), int16], Tensor[(286, 1), uint64], Tensor[(6, 12, 5), float64]) */;
    %202 = cast(%var_5075, dtype="bool") /* ty=Tensor[(3, 14, 9), bool] */;
    %203 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
    %204 = cast(%190, dtype="bool") /* ty=Tensor[(3, 14, 9), bool] */;
    %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %206 = %183.2;
    %207 = equal(%186, %187) /* ty=Tensor[(308), bool] */;
    %208 = power(%193, %194) /* ty=Tensor[(3, 14, 9), float32] */;
    %209 = %201.0;
    %210 = greater_equal(%204, %205) /* ty=Tensor[(3, 14, 9), bool] */;
    (%206, %207, %208, %209, %var_5066, meta[relay.Constant][8] /* ty=Tensor[(48), int16] */, %210)
  };
  %211(%var_5081, %var_5082, %var_5083, %var_5084) /* ty=(Tensor[(1, 168), uint16], Tensor[(308), bool], Tensor[(3, 14, 9), float32], Tensor[(13, 8, 6), int16], Tensor[(360), bool], Tensor[(48), int16], Tensor[(3, 14, 9), bool]) */
}

def @func_2856(%var_2853: Tensor[(286), uint64], %var_2854: Tensor[(180), int32], %var_2855: Tensor[(6, 196), float64]) -> (Tensor[(200), uint32], Tensor[(286), uint64], Tensor[(200), uint32], Tensor[(14, 5, 8), float32], Tensor[(200), uint32], Tensor[(1176), float64], int32, Tensor[(180), int32], Tensor[(6, 196), float64]) {
  @func_2851(%var_2853, %var_2854, %var_2855) /* ty=(Tensor[(200), uint32], Tensor[(286), uint64], Tensor[(200), uint32], Tensor[(14, 5, 8), float32], Tensor[(200), uint32], Tensor[(1176), float64], int32, Tensor[(180), int32], Tensor[(6, 196), float64]) */
}

def @func_3271(%var_3243: Tensor[(3, 14, 9), float64]) -> (Tensor[(3, 14, 9), bool],) {
  %212 = @func_2679() /* ty=Tensor[(3, 14, 9), float64] */;
  %213 = cast(%var_3243, dtype="bool") /* ty=Tensor[(3, 14, 9), bool] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%212, dtype="bool") /* ty=Tensor[(3, 14, 9), bool] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %217 = less(%215, %216) /* ty=Tensor[(3, 14, 9), bool] */;
  (%217,)
}

def @func_255(%var_253: Tensor[(11, 7, 4), float32]) -> (Tensor[(11, 7, 4), float32], Tensor[(8, 7, 3), uint16], Tensor[(1, 168), uint16], Tensor[(8, 7, 3), uint16], Tensor[(11, 7, 4), uint16], Tensor[(11, 7, 4), bool]) {
  @func_252(%var_253) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(8, 7, 3), uint16], Tensor[(1, 168), uint16], Tensor[(8, 7, 3), uint16], Tensor[(11, 7, 4), uint16], Tensor[(11, 7, 4), bool]) */
}

def @func_3638() -> Tensor[(3, 14, 9), uint32] {
  %218 = @func_2679() /* ty=Tensor[(3, 14, 9), float64] */;
  %219 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 14, 9), float64] */, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
  %220 = shape_of(%218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%218, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %223 = divide(%221, %222) /* ty=Tensor[(3, 14, 9), float32] */;
  %224 = cast(%218, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
  %225 = atanh(%224) /* ty=Tensor[(3, 14, 9), float32] */;
  %226 = cast(%225, dtype="uint32") /* ty=Tensor[(3, 14, 9), uint32] */;
  %227 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%223, dtype="uint32") /* ty=Tensor[(3, 14, 9), uint32] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  add(%228, %229) /* ty=Tensor[(3, 14, 9), uint32] */
}

def @main(%var_5459: Tensor[(10, 14, 3), uint32], %var_5460: Tensor[(10, 14, 3), uint32]) -> (Tensor[(10, 14, 3), bool],) {
  %230 = cast(%var_5460, dtype="bool") /* ty=Tensor[(10, 14, 3), bool] */;
  %231 = shape_of(%var_5459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%var_5459, dtype="bool") /* ty=Tensor[(10, 14, 3), bool] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %234 = not_equal(%232, %233) /* ty=Tensor[(10, 14, 3), bool] */;
  (%234,)
}

def @func_1597(%var_1594: Tensor[(1, 286), uint64], %var_1595: Tensor[(200), uint32]) -> (Tensor[(7, 3, 9), float32], Tensor[(10, 2, 10), uint32], Tensor[(1, 286), uint64], Tensor[(200), uint32]) {
  %235 = cast(meta[relay.Constant][10] /* ty=Tensor[(7, 3, 9), float32] */, dtype="float32") /* ty=Tensor[(7, 3, 9), float32] */;
  %236 = cast(%var_1594, dtype="uint64") /* ty=Tensor[(1, 286), uint64] */;
  %237 = cast(%var_1595, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %238 = reshape(%236, newshape=[13, 2, 11]) /* ty=Tensor[(13, 2, 11), uint64] */;
  %239 = reshape(%237, newshape=[200]) /* ty=Tensor[(200), uint32] */;
  %240 = @func_1448(%238, %239) /* ty=(Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(13, 2, 11), uint16]) */;
  %241 = sigmoid(%235) /* ty=Tensor[(7, 3, 9), float32] */;
  %242 = %240.0;
  (%241, %242, %var_1594, %var_1595)
}

def @func_2939() -> (Tensor[(14, 5, 8), uint16],) {
  @func_2937() /* ty=(Tensor[(14, 5, 8), uint16],) */
}

def @func_354(%var_352: Tensor[(14, 7, 12), float64], %var_353: Tensor[(14, 7, 12), float64]) -> (Tensor[(14, 7, 12), float64], Tensor[(168, ?), bool]) {
  %259 = fn (%var_328: Tensor[(14, 7, 12), float64], %var_329: Tensor[(14, 7, 12), float64]) -> (Tensor[(14, 7, 12), float64], Tensor[(168, ?), bool]) {
    %243 = cast(%var_329, dtype="float64") /* ty=Tensor[(14, 7, 12), float64] */;
    %244 = shape_of(%var_328, dtype="int32") /* ty=Tensor[(3), int32] */;
    %245 = cast(%var_328, dtype="float64") /* ty=Tensor[(14, 7, 12), float64] */;
    %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %247 = cast(meta[relay.Constant][11] /* ty=Tensor[(168, 1), uint16] */, dtype="uint16") /* ty=Tensor[(168, 1), uint16] */;
    %248 = cast(meta[relay.Constant][11] /* ty=Tensor[(168, 1), uint16] */, dtype="uint16") /* ty=Tensor[(168, 1), uint16] */;
    %249 = reshape(%247, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
    %250 = reshape(%248, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
    %251 = @func_131(%249, %250) /* ty=(Tensor[(8, 7, 3), uint16],) */;
    %252 = %251.0;
    %253 = cast(%252, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
    %254 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(168, 1), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %255 = cast(meta[relay.Constant][11] /* ty=Tensor[(168, 1), uint16] */, dtype="bool") /* ty=Tensor[(168, 1), bool] */;
    %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %257 = floor_divide(%245, %246) /* ty=Tensor[(14, 7, 12), float64] */;
    %258 = logical_and(%255, %256) /* ty=Tensor[(168, ?), bool] */;
    (%257, %258)
  };
  %259(%var_352, %var_353) /* ty=(Tensor[(14, 7, 12), float64], Tensor[(168, ?), bool]) */
}

def @func_131(%var_125: Tensor[(8, 7, 3), uint16], %var_126: Tensor[(8, 7, 3), uint16]) -> (Tensor[(8, 7, 3), uint16],) {
  %260 = cast(%var_126, dtype="uint16") /* ty=Tensor[(8, 7, 3), uint16] */;
  %261 = shape_of(%var_125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%var_125, dtype="uint16") /* ty=Tensor[(8, 7, 3), uint16] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %264 = add(%262, %263) /* ty=Tensor[(8, 7, 3), uint16] */;
  (%264,)
}

def @func_2369(%var_2366: Tensor[(308), float32], %var_2367: Tensor[(1176, 1), float64], %var_2368: Tensor[(5, 5, 14), float64]) -> (Tensor[(8, 7, 3), uint16], Tensor[(308), float32], Tensor[(168, ?), bool], Tensor[(1176, 1), float64], Tensor[(5, 5, 14), uint32], Tensor[(168, ?), bool]) {
  %290 = fn (%var_2303: Tensor[(308), float32], %var_2324: Tensor[(1176, 1), float64], %var_2327: Tensor[(5, 5, 14), float64]) -> (Tensor[(8, 7, 3), uint16], Tensor[(308), float32], Tensor[(168, ?), bool], Tensor[(1176, 1), float64], Tensor[(5, 5, 14), uint32], Tensor[(168, ?), bool]) {
    %265 = cast(%var_2303, dtype="float32") /* ty=Tensor[(308), float32] */;
    %266 = reshape(%265, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
    %267 = @func_252(%266) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(8, 7, 3), uint16], Tensor[(1, 168), uint16], Tensor[(8, 7, 3), uint16], Tensor[(11, 7, 4), uint16], Tensor[(11, 7, 4), bool]) */;
    %268 = cast(%var_2324, dtype="float64") /* ty=Tensor[(1176, 1), float64] */;
    %269 = cast(%var_2324, dtype="float64") /* ty=Tensor[(1176, 1), float64] */;
    %270 = reshape(%268, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
    %271 = reshape(%269, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
    %272 = @func_351(%270, %271) /* ty=(Tensor[(14, 7, 12), float64], Tensor[(168, ?), bool]) */;
    %273 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 5, 14), float32] */, dtype="float32") /* ty=Tensor[(5, 5, 14), float32] */;
    %274 = cos(%273) /* ty=Tensor[(5, 5, 14), float32] */;
    %275 = cast(%274, dtype="float64") /* ty=Tensor[(5, 5, 14), float64] */;
    %276 = sqrt(%275) /* ty=Tensor[(5, 5, 14), float64] */;
    %277 = cast(%var_2327, dtype="uint32") /* ty=Tensor[(5, 5, 14), uint32] */;
    %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
    %279 = cast(%276, dtype="uint32") /* ty=Tensor[(5, 5, 14), uint32] */;
    %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %281 = cast(%var_2324, dtype="float64") /* ty=Tensor[(1176, 1), float64] */;
    %282 = cast(%var_2324, dtype="float64") /* ty=Tensor[(1176, 1), float64] */;
    %283 = reshape(%281, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
    %284 = reshape(%282, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
    %285 = @func_351(%283, %284) /* ty=(Tensor[(14, 7, 12), float64], Tensor[(168, ?), bool]) */;
    %286 = %267.1;
    %287 = %272.1;
    %288 = right_shift(%279, %280) /* ty=Tensor[(5, 5, 14), uint32] */;
    %289 = %285.1;
    (%286, %var_2303, %287, %var_2324, %288, %289)
  };
  %290(%var_2366, %var_2367, %var_2368) /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(308), float32], Tensor[(168, ?), bool], Tensor[(1176, 1), float64], Tensor[(5, 5, 14), uint32], Tensor[(168, ?), bool]) */
}

def @func_2248(%var_2247: Tensor[(4, 6, 3), float64]) -> Tensor[(4, 6, 3), float64] {
  %292 = fn (%var_2239: Tensor[(4, 6, 3), float64]) -> Tensor[(4, 6, 3), float64] {
    %291 = cast(%var_2239, dtype="float64") /* ty=Tensor[(4, 6, 3), float64] */;
    rsqrt(%291) /* ty=Tensor[(4, 6, 3), float64] */
  };
  %292(%var_2247) /* ty=Tensor[(4, 6, 3), float64] */
}

def @func_3969() -> Tensor[(14, 5, 8), uint16] {
  @func_3967() /* ty=Tensor[(14, 5, 8), uint16] */
}

def @func_4044(%var_4038: Tensor[(286), uint64], %var_4039: Tensor[(8, 78), int16], %var_4040: Tensor[(14, 5, 8), float64], %var_4041: Tensor[(308), float32], %var_4042: Tensor[(6, 196), float64], %var_4043: Tensor[(350), float64]) -> (Tensor[(10, 20), uint32], Tensor[(1, 48), int16], Tensor[(286), uint64], Tensor[(8, 78), uint64], Tensor[(14, 5, 8), bool], Tensor[(308), float32], Tensor[(308), float32], Tensor[(6, 196), float64], Tensor[(350), float64]) {
  @func_4036(%var_4038, %var_4039, %var_4040, %var_4041, %var_4042, %var_4043) /* ty=(Tensor[(10, 20), uint32], Tensor[(1, 48), int16], Tensor[(286), uint64], Tensor[(8, 78), uint64], Tensor[(14, 5, 8), bool], Tensor[(308), float32], Tensor[(308), float32], Tensor[(6, 196), float64], Tensor[(350), float64]) */
}

def @func_5366(%var_5365: Tensor[(6, 6, 10), float64]) -> Tensor[(6, 6, 10), float32] {
  %296 = fn (%var_5341: Tensor[(6, 6, 10), float64]) -> Tensor[(6, 6, 10), float32] {
    %293 = cast(%var_5341, dtype="float64") /* ty=Tensor[(6, 6, 10), float64] */;
    %294 = asinh(%293) /* ty=Tensor[(6, 6, 10), float64] */;
    %295 = cast(%294, dtype="float32") /* ty=Tensor[(6, 6, 10), float32] */;
    atanh(%295) /* ty=Tensor[(6, 6, 10), float32] */
  };
  %296(%var_5365) /* ty=Tensor[(6, 6, 10), float32] */
}

def @func_4970() -> Tensor[(14, 5, 8), uint16] {
  @func_4968() /* ty=Tensor[(14, 5, 8), uint16] */
}

def @func_1601(%var_1599: Tensor[(1, 286), uint64], %var_1600: Tensor[(200), uint32]) -> (Tensor[(7, 3, 9), float32], Tensor[(10, 2, 10), uint32], Tensor[(1, 286), uint64], Tensor[(200), uint32]) {
  @func_1597(%var_1599, %var_1600) /* ty=(Tensor[(7, 3, 9), float32], Tensor[(10, 2, 10), uint32], Tensor[(1, 286), uint64], Tensor[(200), uint32]) */
}

def @func_5425() -> (Tensor[(14, 5, 8), uint16], Tensor[(3, 14, 9), float64], Tensor[(3, 14, 9), float32]) {
  %303 = fn () -> (Tensor[(14, 5, 8), uint16], Tensor[(3, 14, 9), float64], Tensor[(3, 14, 9), float32]) {
    %297 = @func_4643() /* ty=(Tensor[(14, 5, 8), uint16],) */;
    %298 = @func_3919() /* ty=Tensor[(3, 14, 9), float64] */;
    %299 = cast(%298, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
    %300 = %297.0;
    %301 = @func_3407() /* ty=Tensor[(3, 14, 9), float64] */;
    %302 = log10(%299) /* ty=Tensor[(3, 14, 9), float32] */;
    (%300, %301, %302)
  };
  %303() /* ty=(Tensor[(14, 5, 8), uint16], Tensor[(3, 14, 9), float64], Tensor[(3, 14, 9), float32]) */
}

def @func_4537() -> (Tensor[(14, 5, 8), uint16], Tensor[(3, 14, 9), int8]) {
  @func_4535() /* ty=(Tensor[(14, 5, 8), uint16], Tensor[(3, 14, 9), int8]) */
}

def @func_596(%var_587: Tensor[(10, 2, 10), uint32], %var_588: Tensor[(10, 2, 10), uint32]) -> Tensor[(10, 2, 10), uint32] {
  %304 = cast(%var_588, dtype="uint32") /* ty=Tensor[(10, 2, 10), uint32] */;
  %305 = shape_of(%var_587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%var_587, dtype="uint32") /* ty=Tensor[(10, 2, 10), uint32] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_xor(%306, %307) /* ty=Tensor[(10, 2, 10), uint32] */
}

def @func_4787(%var_4785: Tensor[(8, 16, 1), int64], %var_4786: Tensor[(8, 16, 2), int64]) -> (Tensor[(8, 16, 2), int64], Tensor[(8, 16, 2), uint16]) {
  %314 = fn (%var_4767: Tensor[(8, 16, 1), int64], %var_4768: Tensor[(8, 16, 2), int64]) -> (Tensor[(8, 16, 2), int64], Tensor[(8, 16, 2), uint16]) {
    %308 = cast(%var_4767, dtype="int64") /* ty=Tensor[(8, 16, 1), int64] */;
    %309 = cast(%var_4768, dtype="int64") /* ty=Tensor[(8, 16, 2), int64] */;
    %310 = cast(%var_4767, dtype="uint16") /* ty=Tensor[(8, 16, 1), uint16] */;
    %311 = cast(%var_4768, dtype="uint16") /* ty=Tensor[(8, 16, 2), uint16] */;
    %312 = logical_xor(%308, %309) /* ty=Tensor[(8, 16, 2), int64] */;
    %313 = add(%310, %311) /* ty=Tensor[(8, 16, 2), uint16] */;
    (%312, %313)
  };
  %314(%var_4785, %var_4786) /* ty=(Tensor[(8, 16, 2), int64], Tensor[(8, 16, 2), uint16]) */
}

def @func_5124() -> (Tensor[(3, 14, 9), float64],) {
  @func_5122() /* ty=(Tensor[(3, 14, 9), float64],) */
}

def @func_2724(%var_2722: Tensor[(14, 5, 8), uint16]) -> (Tensor[(14, 5, 8), uint64], Tensor[(14, 5, 8), float64]) {
  @func_2721(%var_2722) /* ty=(Tensor[(14, 5, 8), uint64], Tensor[(14, 5, 8), float64]) */
}

def @func_3760(%var_3758: Tensor[(6, 14), float32], %var_3759: Tensor[(6, 14), float32]) -> Tensor[(6, 14), bool] {
  %319 = fn (%var_3751: Tensor[(6, 14), float32], %var_3752: Tensor[(6, 14), float32]) -> Tensor[(6, 14), bool] {
    %315 = cast(%var_3752, dtype="bool") /* ty=Tensor[(6, 14), bool] */;
    %316 = shape_of(%var_3751, dtype="int32") /* ty=Tensor[(2), int32] */;
    %317 = cast(%var_3751, dtype="bool") /* ty=Tensor[(6, 14), bool] */;
    %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    not_equal(%317, %318) /* ty=Tensor[(6, 14), bool] */
  };
  %319(%var_3758, %var_3759) /* ty=Tensor[(6, 14), bool] */
}

def @func_3409() -> Tensor[(3, 14, 9), float64] {
  @func_3407() /* ty=Tensor[(3, 14, 9), float64] */
}

def @func_2950() -> (Tensor[(3, 14, 9), float64],) {
  %321 = fn () -> (Tensor[(3, 14, 9), float64],) {
    %320 = @func_2679() /* ty=Tensor[(3, 14, 9), float64] */;
    (%320,)
  };
  %321() /* ty=(Tensor[(3, 14, 9), float64],) */
}

def @func_3508() -> (Tensor[(14, 5, 8), float64],) {
  @func_3506() /* ty=(Tensor[(14, 5, 8), float64],) */
}

def @func_5458() -> Tensor[(14, 5, 8), uint16] {
  %323 = fn () -> Tensor[(14, 5, 8), uint16] {
    %322 = @func_4643() /* ty=(Tensor[(14, 5, 8), uint16],) */;
    %322.0
  };
  %323() /* ty=Tensor[(14, 5, 8), uint16] */
}

def @func_4847(%var_4822: Tensor[(7, 13, 16), uint8], %var_4823: Tensor[(7, 13, 16), uint8], %var_4835: Tensor[(2, 588), float64], %var_4837: Tensor[(32), float64], %var_4838: Tensor[(144), bool], %var_4839: int32) -> (Tensor[(7, 13, 16), uint8], Tensor[(7, 13, 16), float32], Tensor[(8, 7, 3), uint16], Tensor[(168), uint16], Tensor[(1056), float32], Tensor[(2, 588), float64], Tensor[(350), float64], Tensor[(32), float64], Tensor[(144), bool], int32) {
  %324 = cast(%var_4823, dtype="uint8") /* ty=Tensor[(7, 13, 16), uint8] */;
  %325 = shape_of(%var_4822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%var_4822, dtype="uint8") /* ty=Tensor[(7, 13, 16), uint8] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %328 = cast(%var_4823, dtype="float32") /* ty=Tensor[(7, 13, 16), float32] */;
  %329 = cast(meta[relay.Constant][13] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %330 = cast(meta[relay.Constant][14] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %331 = cast(%var_4835, dtype="float64") /* ty=Tensor[(2, 588), float64] */;
  %332 = cast(meta[relay.Constant][15] /* ty=Tensor[(350), float64] */, dtype="float64") /* ty=Tensor[(350), float64] */;
  %333 = cast(%var_4837, dtype="float64") /* ty=Tensor[(32), float64] */;
  %334 = cast(%var_4838, dtype="bool") /* ty=Tensor[(144), bool] */;
  %335 = cast(%var_4839, dtype="int32") /* ty=int32 */;
  %336 = reshape(%329, newshape=[168]) /* ty=Tensor[(168), uint16] */;
  %337 = reshape(%330, newshape=[1056]) /* ty=Tensor[(1056), float32] */;
  %338 = reshape(%331, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %339 = reshape(%332, newshape=[35, 10]) /* ty=Tensor[(35, 10), float64] */;
  %340 = reshape(%333, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %341 = reshape(%334, newshape=[144]) /* ty=Tensor[(144), bool] */;
  %342 = reshape(%335, newshape=[]) /* ty=int32 */;
  %343 = @func_3148(%336, %337, %338, %339, %340, %341, %342) /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(168), uint16], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64], Tensor[(8, 7, 3), uint16], Tensor[(308), float32], Tensor[(286), uint64], Tensor[(3, 14, 9), float64], Tensor[(200), int16], Tensor[(14, 5, 8), float32], Tensor[(3, 14, 9), float64], Tensor[(4, 15, 3), float32], Tensor[(32), float64], Tensor[(144), bool], int32, Tensor[(1, 180), int32], Tensor[(1, 286), uint64], Tensor[(35, 10), bool], Tensor[(8, 7, 3), uint16], Tensor[(14, 5, 8), float64]) */;
  %344 = left_shift(%326, %327) /* ty=Tensor[(7, 13, 16), uint8] */;
  %345 = log2(%328) /* ty=Tensor[(7, 13, 16), float32] */;
  %346 = %343.19;
  (%344, %345, %346, meta[relay.Constant][13] /* ty=Tensor[(168), uint16] */, meta[relay.Constant][14] /* ty=Tensor[(1056), float32] */, %var_4835, meta[relay.Constant][15] /* ty=Tensor[(350), float64] */, %var_4837, %var_4838, %var_4839)
}

def @func_3739(%var_3737: Tensor[(3, 12, 4), uint64], %var_3738: Tensor[(3, 12, 4), uint64]) -> (Tensor[(3, 12, 4), uint64], Tensor[(14, 5, 8), float64], Tensor[(3, 12, 4), int16]) {
  @func_3735(%var_3737, %var_3738) /* ty=(Tensor[(3, 12, 4), uint64], Tensor[(14, 5, 8), float64], Tensor[(3, 12, 4), int16]) */
}

def @func_5276() -> (Tensor[(14, 5, 8), float64], Tensor[(14, 5, 8), float64]) {
  %347 = @func_4535() /* ty=(Tensor[(14, 5, 8), uint16], Tensor[(3, 14, 9), int8]) */;
  %348 = %347.0;
  %349 = cast(%348, dtype="float64") /* ty=Tensor[(14, 5, 8), float64] */;
  %350 = asinh(%349) /* ty=Tensor[(14, 5, 8), float64] */;
  %351 = @func_2745() /* ty=Tensor[(14, 5, 8), float64] */;
  (%350, %351)
}

def @func_4060() -> (Tensor[(3, 14, 9), int8],) {
  @func_4058() /* ty=(Tensor[(3, 14, 9), int8],) */
}

def @func_2680() -> Tensor[(3, 14, 9), float64] {
  %362 = fn () -> Tensor[(3, 14, 9), float64] {
    %352 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 14, 9), float32] */, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
    %353 = sigmoid(%352) /* ty=Tensor[(3, 14, 9), float32] */;
    %354 = cast(%353, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
    %355 = acosh(%354) /* ty=Tensor[(3, 14, 9), float32] */;
    %356 = cast(%355, dtype="uint8") /* ty=Tensor[(3, 14, 9), uint8] */;
    %357 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(3, 14, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %358 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 14, 9), float32] */, dtype="uint8") /* ty=Tensor[(3, 14, 9), uint8] */;
    %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %360 = bitwise_and(%358, %359) /* ty=Tensor[(3, 14, 9), uint8] */;
    %361 = cast(%360, dtype="float64") /* ty=Tensor[(3, 14, 9), float64] */;
    cos(%361) /* ty=Tensor[(3, 14, 9), float64] */
  };
  %362() /* ty=Tensor[(3, 14, 9), float64] */
}

def @func_3464(%var_3463: Tensor[(10, 6, 11), float32]) -> (Tensor[(10, 6, 11), uint32],) {
  %370 = fn (%var_3446: Tensor[(10, 6, 11), float32]) -> (Tensor[(10, 6, 11), uint32],) {
    %363 = cast(%var_3446, dtype="float32") /* ty=Tensor[(10, 6, 11), float32] */;
    %364 = acosh(%363) /* ty=Tensor[(10, 6, 11), float32] */;
    %365 = cast(%var_3446, dtype="uint32") /* ty=Tensor[(10, 6, 11), uint32] */;
    %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
    %367 = cast(%364, dtype="uint32") /* ty=Tensor[(10, 6, 11), uint32] */;
    %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %369 = right_shift(%367, %368) /* ty=Tensor[(10, 6, 11), uint32] */;
    (%369,)
  };
  %370(%var_3463) /* ty=(Tensor[(10, 6, 11), uint32],) */
}

def @func_135(%var_133: Tensor[(8, 7, 3), uint16], %var_134: Tensor[(8, 7, 3), uint16]) -> (Tensor[(8, 7, 3), uint16],) {
  @func_131(%var_133, %var_134) /* ty=(Tensor[(8, 7, 3), uint16],) */
}

def @func_4275() -> (Tensor[(14, 5, 8), uint16],) {
  @func_4273() /* ty=(Tensor[(14, 5, 8), uint16],) */
}

def @func_3655() -> (Tensor[(3, 14, 9), float64],) {
  %371 = @func_2679() /* ty=Tensor[(3, 14, 9), float64] */;
  (%371,)
}

def @func_4184(%var_4183: Tensor[(7, 13), float64]) -> (Tensor[(7, 13), float64],) {
  %374 = fn (%var_4172: Tensor[(7, 13), float64]) -> (Tensor[(7, 13), float64],) {
    %372 = cast(%var_4172, dtype="float64") /* ty=Tensor[(7, 13), float64] */;
    %373 = exp(%372) /* ty=Tensor[(7, 13), float64] */;
    (%373,)
  };
  %374(%var_4183) /* ty=(Tensor[(7, 13), float64],) */
}

def @func_2638(%var_2636: Tensor[(286), uint64], %var_2637: Tensor[(200), uint32]) -> (Tensor[(14, 5, 8), uint16], Tensor[(10, 2, 10), uint32], Tensor[(286), uint64], Tensor[(200), uint32]) {
  %383 = fn (%var_2630: Tensor[(286), uint64], %var_2631: Tensor[(200), uint32]) -> (Tensor[(14, 5, 8), uint16], Tensor[(10, 2, 10), uint32], Tensor[(286), uint64], Tensor[(200), uint32]) {
    %375 = @func_2553() /* ty=(Tensor[(14, 5, 8), uint16],) */;
    %376 = cast(%var_2630, dtype="uint64") /* ty=Tensor[(286), uint64] */;
    %377 = cast(%var_2631, dtype="uint32") /* ty=Tensor[(200), uint32] */;
    %378 = reshape(%376, newshape=[13, 2, 11]) /* ty=Tensor[(13, 2, 11), uint64] */;
    %379 = reshape(%377, newshape=[200]) /* ty=Tensor[(200), uint32] */;
    %380 = @func_1448(%378, %379) /* ty=(Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(13, 2, 11), uint16]) */;
    %381 = %375.0;
    %382 = %380.0;
    (%381, %382, %var_2630, %var_2631)
  };
  %383(%var_2636, %var_2637) /* ty=(Tensor[(14, 5, 8), uint16], Tensor[(10, 2, 10), uint32], Tensor[(286), uint64], Tensor[(200), uint32]) */
}

def @func_3407() -> Tensor[(3, 14, 9), float64] {
  %384 = @func_2949() /* ty=(Tensor[(3, 14, 9), float64],) */;
  %384.0
}

def @func_3274(%var_3272: Tensor[(3, 14, 9), float64]) -> (Tensor[(3, 14, 9), bool],) {
  @func_3271(%var_3272) /* ty=(Tensor[(3, 14, 9), bool],) */
}

def @func_2937() -> (Tensor[(14, 5, 8), uint16],) {
  %385 = @func_2553() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %386 = %385.0;
  (%386,)
}

def @func_3148(%var_2984: Tensor[(168), uint16], %var_2998: Tensor[(1056), float32], %var_2999: Tensor[(1176), float64], %var_3077: Tensor[(35, 10), float64], %var_3089: Tensor[(32), float64], %var_3090: Tensor[(144), bool], %var_3091: int32) -> (Tensor[(8, 7, 3), uint16], Tensor[(168), uint16], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64], Tensor[(8, 7, 3), uint16], Tensor[(308), float32], Tensor[(286), uint64], Tensor[(3, 14, 9), float64], Tensor[(200), int16], Tensor[(14, 5, 8), float32], Tensor[(3, 14, 9), float64], Tensor[(4, 15, 3), float32], Tensor[(32), float64], Tensor[(144), bool], int32, Tensor[(1, 180), int32], Tensor[(1, 286), uint64], Tensor[(35, 10), bool], Tensor[(8, 7, 3), uint16], Tensor[(14, 5, 8), float64]) {
  %387 = cast(%var_2984, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %388 = cast(%var_2984, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %389 = reshape(%387, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %390 = reshape(%388, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %391 = @func_131(%389, %390) /* ty=(Tensor[(8, 7, 3), uint16],) */;
  %392 = cast(%var_2998, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %393 = cast(%var_2999, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %394 = reshape(%392, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), float32] */;
  %395 = reshape(%393, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %396 = @func_465(%394, %395) /* ty=(Tensor[(168, 1176), bool], Tensor[(11, 12, 8), float64]) */;
  %397 = cast(meta[relay.Constant][17] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %398 = cast(%var_2999, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %399 = cast(meta[relay.Constant][18] /* ty=Tensor[(35, 10), float64] */, dtype="float64") /* ty=Tensor[(35, 10), float64] */;
  %400 = reshape(%397, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %401 = reshape(%398, newshape=[1176, 1]) /* ty=Tensor[(1176, 1), float64] */;
  %402 = reshape(%399, newshape=[5, 5, 14]) /* ty=Tensor[(5, 5, 14), float64] */;
  %403 = @func_2365(%400, %401, %402) /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(308), float32], Tensor[(168, ?), bool], Tensor[(1176, 1), float64], Tensor[(5, 5, 14), uint32], Tensor[(168, ?), bool]) */;
  %404 = @func_2949() /* ty=(Tensor[(3, 14, 9), float64],) */;
  %405 = cast(meta[relay.Constant][19] /* ty=Tensor[(286), uint64] */, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %406 = cast(meta[relay.Constant][20] /* ty=Tensor[(200), uint32] */, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %407 = reshape(%405, newshape=[1, 286]) /* ty=Tensor[(1, 286), uint64] */;
  %408 = reshape(%406, newshape=[200]) /* ty=Tensor[(200), uint32] */;
  %409 = @func_1597(%407, %408) /* ty=(Tensor[(7, 3, 9), float32], Tensor[(10, 2, 10), uint32], Tensor[(1, 286), uint64], Tensor[(200), uint32]) */;
  %410 = %409.1;
  %411 = cast(%410, dtype="int16") /* ty=Tensor[(10, 2, 10), int16] */;
  %412 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(200), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %413 = cast(meta[relay.Constant][20] /* ty=Tensor[(200), uint32] */, dtype="int16") /* ty=Tensor[(200), int16] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?), int16] */;
  %415 = @func_2553() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %416 = %415.0;
  %417 = cast(%416, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %418 = asin(%417) /* ty=Tensor[(14, 5, 8), float32] */;
  %419 = cast(%416, dtype="uint16") /* ty=Tensor[(14, 5, 8), uint16] */;
  %420 = reshape(%419, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), uint16] */;
  %421 = @func_2721(%420) /* ty=(Tensor[(14, 5, 8), uint64], Tensor[(14, 5, 8), float64]) */;
  %422 = %421.1;
  %423 = cast(%422, dtype="int8") /* ty=Tensor[(14, 5, 8), int8] */;
  %424 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%418, dtype="int8") /* ty=Tensor[(14, 5, 8), int8] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %427 = bitwise_or(%425, %426) /* ty=Tensor[(14, 5, 8), int8] */;
  %428 = cast(%418, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%427, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %432 = @func_2949() /* ty=(Tensor[(3, 14, 9), float64],) */;
  %433 = cast(%var_3089, dtype="float64") /* ty=Tensor[(32), float64] */;
  %434 = cast(%var_3090, dtype="bool") /* ty=Tensor[(144), bool] */;
  %435 = cast(%var_3091, dtype="int32") /* ty=int32 */;
  %436 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 180), int32] */, dtype="int32") /* ty=Tensor[(1, 180), int32] */;
  %437 = cast(%var_2999, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %438 = reshape(%433, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), float64] */;
  %439 = reshape(%434, newshape=[144]) /* ty=Tensor[(144), bool] */;
  %440 = reshape(%435, newshape=[]) /* ty=int32 */;
  %441 = reshape(%436, newshape=[180]) /* ty=Tensor[(180), int32] */;
  %442 = reshape(%437, newshape=[12, 98]) /* ty=Tensor[(12, 98), float64] */;
  %443 = @func_1696(%438, %439, %440, %441, %442) /* ty=(Tensor[(4, ?, 8), bool], Tensor[(4, 13, 8), bool], Tensor[(7, 4, 12), bool], Tensor[(144), bool], Tensor[(200), uint32], Tensor[(4, 15, 3), float32], int32, Tensor[(180), int32], Tensor[(12, 98), float64], Tensor[(4, ?, 8), bool], Tensor[(1176), float64], Tensor[(10, 2, 10), uint32]) */;
  %444 = cast(meta[relay.Constant][19] /* ty=Tensor[(286), uint64] */, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %445 = cast(%410, dtype="uint32") /* ty=Tensor[(10, 2, 10), uint32] */;
  %446 = reshape(%444, newshape=[1, 286]) /* ty=Tensor[(1, 286), uint64] */;
  %447 = reshape(%445, newshape=[200]) /* ty=Tensor[(200), uint32] */;
  %448 = @func_1597(%446, %447) /* ty=(Tensor[(7, 3, 9), float32], Tensor[(10, 2, 10), uint32], Tensor[(1, 286), uint64], Tensor[(200), uint32]) */;
  %449 = cast(meta[relay.Constant][18] /* ty=Tensor[(35, 10), float64] */, dtype="float64") /* ty=Tensor[(35, 10), float64] */;
  %450 = sqrt(%449) /* ty=Tensor[(35, 10), float64] */;
  %451 = cast(%var_3077, dtype="bool") /* ty=Tensor[(35, 10), bool] */;
  %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(2), int32] */;
  %453 = cast(%450, dtype="bool") /* ty=Tensor[(35, 10), bool] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %455 = logical_or(%453, %454) /* ty=Tensor[(35, 10), bool] */;
  %456 = cast(%var_3077, dtype="bool") /* ty=Tensor[(35, 10), bool] */;
  %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(2), int32] */;
  %458 = cast(%455, dtype="bool") /* ty=Tensor[(35, 10), bool] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %460 = cast(%var_2984, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %461 = cast(%var_2984, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %462 = reshape(%460, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %463 = reshape(%461, newshape=[8, 7, 3]) /* ty=Tensor[(8, 7, 3), uint16] */;
  %464 = @func_131(%462, %463) /* ty=(Tensor[(8, 7, 3), uint16],) */;
  %465 = cast(%427, dtype="float64") /* ty=Tensor[(14, 5, 8), float64] */;
  %466 = %391.0;
  %467 = %396.1;
  %468 = %403.0;
  %469 = %404.0;
  %470 = add(%413, %414) /* ty=Tensor[(200), int16] */;
  %471 = floor_mod(%430, %431) /* ty=Tensor[(14, 5, 8), float32] */;
  %472 = %432.0;
  %473 = %443.5;
  %474 = %448.2;
  %475 = less(%458, %459) /* ty=Tensor[(35, 10), bool] */;
  %476 = %464.0;
  %477 = cosh(%465) /* ty=Tensor[(14, 5, 8), float64] */;
  (%466, %var_2984, %467, %var_2998, %var_2999, %468, meta[relay.Constant][17] /* ty=Tensor[(308), float32] */, meta[relay.Constant][19] /* ty=Tensor[(286), uint64] */, %469, %470, %471, %472, %473, %var_3089, %var_3090, %var_3091, meta[relay.Constant][21] /* ty=Tensor[(1, 180), int32] */, %474, %475, %476, %477)
}

def @func_3876(%var_3874: Tensor[(1176), float64], %var_3875: Tensor[(360), bool]) -> (Tensor[(3, 14, 9), float64], Tensor[(11, 12, 8), float64], Tensor[(528, 2), float32], Tensor[(286, 1), uint64], Tensor[(360), bool], Tensor[(48), int16], Tensor[(1176), float32], Tensor[(3, 14, 9), uint32]) {
  %499 = fn (%var_3850: Tensor[(1176), float64], %var_3853: Tensor[(360), bool]) -> (Tensor[(3, 14, 9), float64], Tensor[(11, 12, 8), float64], Tensor[(528, 2), float32], Tensor[(286, 1), uint64], Tensor[(360), bool], Tensor[(48), int16], Tensor[(1176), float32], Tensor[(3, 14, 9), uint32]) {
    %478 = @func_2949() /* ty=(Tensor[(3, 14, 9), float64],) */;
    %479 = cast(meta[relay.Constant][22] /* ty=Tensor[(528, 2), float32] */, dtype="float32") /* ty=Tensor[(528, 2), float32] */;
    %480 = cast(%var_3850, dtype="float64") /* ty=Tensor[(1176), float64] */;
    %481 = reshape(%479, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), float32] */;
    %482 = reshape(%480, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
    %483 = @func_465(%481, %482) /* ty=(Tensor[(168, 1176), bool], Tensor[(11, 12, 8), float64]) */;
    %484 = cast(%var_3853, dtype="bool") /* ty=Tensor[(360), bool] */;
    %485 = cast(%var_3853, dtype="bool") /* ty=Tensor[(360), bool] */;
    %486 = cast(meta[relay.Constant][23] /* ty=Tensor[(48), int16] */, dtype="int16") /* ty=Tensor[(48), int16] */;
    %487 = reshape(%484, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
    %488 = reshape(%485, newshape=[6, 12, 5]) /* ty=Tensor[(6, 12, 5), bool] */;
    %489 = reshape(%486, newshape=[48]) /* ty=Tensor[(48), int16] */;
    %490 = @func_2065(%487, %488, %489) /* ty=(Tensor[(13, 8, 6), int16], Tensor[(48), int16], Tensor[(624), int16], Tensor[(286, 1), uint64], Tensor[(6, 12, 5), float64]) */;
    %491 = cast(%var_3850, dtype="float32") /* ty=Tensor[(1176), float32] */;
    %492 = tan(%491) /* ty=Tensor[(1176), float32] */;
    %493 = cast(%492, dtype="float32") /* ty=Tensor[(1176), float32] */;
    %494 = %478.0;
    %495 = %483.1;
    %496 = %490.3;
    %497 = atanh(%493) /* ty=Tensor[(1176), float32] */;
    %498 = @func_3638() /* ty=Tensor[(3, 14, 9), uint32] */;
    (%494, %495, meta[relay.Constant][22] /* ty=Tensor[(528, 2), float32] */, %496, %var_3853, meta[relay.Constant][23] /* ty=Tensor[(48), int16] */, %497, %498)
  };
  %499(%var_3874, %var_3875) /* ty=(Tensor[(3, 14, 9), float64], Tensor[(11, 12, 8), float64], Tensor[(528, 2), float32], Tensor[(286, 1), uint64], Tensor[(360), bool], Tensor[(48), int16], Tensor[(1176), float32], Tensor[(3, 14, 9), uint32]) */
}

def @func_2721(%var_2691: Tensor[(14, 5, 8), uint16]) -> (Tensor[(14, 5, 8), uint64], Tensor[(14, 5, 8), float64]) {
  %500 = @func_2553() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %501 = %500.0;
  %502 = cast(%var_2691, dtype="uint64") /* ty=Tensor[(14, 5, 8), uint64] */;
  %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%501, dtype="uint64") /* ty=Tensor[(14, 5, 8), uint64] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %506 = cast(%var_2691, dtype="bool") /* ty=Tensor[(14, 5, 8), bool] */;
  %507 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%501, dtype="bool") /* ty=Tensor[(14, 5, 8), bool] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %510 = equal(%508, %509) /* ty=Tensor[(14, 5, 8), bool] */;
  %511 = cast(%501, dtype="int32") /* ty=Tensor[(14, 5, 8), int32] */;
  %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%510, dtype="int32") /* ty=Tensor[(14, 5, 8), int32] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %515 = multiply(%513, %514) /* ty=Tensor[(14, 5, 8), int32] */;
  %516 = cast(%515, dtype="float64") /* ty=Tensor[(14, 5, 8), float64] */;
  %517 = minimum(%504, %505) /* ty=Tensor[(14, 5, 8), uint64] */;
  %518 = tan(%516) /* ty=Tensor[(14, 5, 8), float64] */;
  (%517, %518)
}

def @func_5278() -> (Tensor[(14, 5, 8), float64], Tensor[(14, 5, 8), float64]) {
  @func_5276() /* ty=(Tensor[(14, 5, 8), float64], Tensor[(14, 5, 8), float64]) */
}

def @func_1003(%var_1000: Tensor[(3, 4, 12), bool], %var_1001: Tensor[(200), uint32], %var_1002: Tensor[(3, 4, 12), bool]) -> (Tensor[(7, 4, 12), bool], Tensor[(14, 7, 12), float64], Tensor[(1176), float64], Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(3, 4, 12), bool]) {
  @func_998(%var_1000, %var_1001, %var_1002) /* ty=(Tensor[(7, 4, 12), bool], Tensor[(14, 7, 12), float64], Tensor[(1176), float64], Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(3, 4, 12), bool]) */
}

def @func_4740(%var_4739: Tensor[(150), float32]) -> (Tensor[(3, 14, 9), float64], Tensor[(4, 6, 3), float64], Tensor[(18, 4), float64], Tensor[(1056), float32], Tensor[(150), float32]) {
  %530 = fn (%var_4722: Tensor[(150), float32]) -> (Tensor[(3, 14, 9), float64], Tensor[(4, 6, 3), float64], Tensor[(18, 4), float64], Tensor[(1056), float32], Tensor[(150), float32]) {
    %519 = @func_3655() /* ty=(Tensor[(3, 14, 9), float64],) */;
    %520 = cast(meta[relay.Constant][24] /* ty=Tensor[(18, 4), float64] */, dtype="float64") /* ty=Tensor[(18, 4), float64] */;
    %521 = reshape(%520, newshape=[4, 6, 3]) /* ty=Tensor[(4, 6, 3), float64] */;
    %522 = cast(%var_4722, dtype="float32") /* ty=Tensor[(150), float32] */;
    %523 = cast(%var_4722, dtype="float32") /* ty=Tensor[(150), float32] */;
    %524 = reshape(%522, newshape=[5, 5, 6]) /* ty=Tensor[(5, 5, 6), float32] */;
    %525 = reshape(%523, newshape=[5, 5, 6]) /* ty=Tensor[(5, 5, 6), float32] */;
    %526 = @func_2521(%524, %525) /* ty=(Tensor[(5, 5, 6), float64], Tensor[(5, 5, 6), bool], Tensor[(168, 1176), bool], Tensor[(1056), float32], Tensor[(1176), float64]) */;
    %527 = %519.0;
    %528 = @func_2246(%521) /* ty=Tensor[(4, 6, 3), float64] */;
    %529 = %526.3;
    (%527, %528, meta[relay.Constant][24] /* ty=Tensor[(18, 4), float64] */, %529, %var_4722)
  };
  %530(%var_4739) /* ty=(Tensor[(3, 14, 9), float64], Tensor[(4, 6, 3), float64], Tensor[(18, 4), float64], Tensor[(1056), float32], Tensor[(150), float32]) */
}

def @func_2069(%var_2066: Tensor[(6, 12, 5), bool], %var_2067: Tensor[(6, 12, 5), bool], %var_2068: Tensor[(48), int16]) -> (Tensor[(13, 8, 6), int16], Tensor[(48), int16], Tensor[(624), int16], Tensor[(286, 1), uint64], Tensor[(6, 12, 5), float64]) {
  %548 = fn (%var_2021: Tensor[(6, 12, 5), bool], %var_2022: Tensor[(6, 12, 5), bool], %var_2043: Tensor[(48), int16]) -> (Tensor[(13, 8, 6), int16], Tensor[(48), int16], Tensor[(624), int16], Tensor[(286, 1), uint64], Tensor[(6, 12, 5), float64]) {
    %531 = cast(%var_2043, dtype="int16") /* ty=Tensor[(48), int16] */;
    %532 = cast(meta[relay.Constant][25] /* ty=Tensor[(624), int16] */, dtype="int16") /* ty=Tensor[(624), int16] */;
    %533 = cast(meta[relay.Constant][26] /* ty=Tensor[(286, 1), uint64] */, dtype="uint64") /* ty=Tensor[(286, 1), uint64] */;
    %534 = reshape(%531, newshape=[1, 8, 6]) /* ty=Tensor[(1, 8, 6), int16] */;
    %535 = reshape(%532, newshape=[13, 8, 6]) /* ty=Tensor[(13, 8, 6), int16] */;
    %536 = reshape(%533, newshape=[286, 1]) /* ty=Tensor[(286, 1), uint64] */;
    %537 = @func_1912(%534, %535, %536) /* ty=(Tensor[(13, 8, 6), int16], Tensor[(1, 8, 6), float64], Tensor[(10, 2, 10), uint32], Tensor[(286, 1), uint64], Tensor[(10, 20), uint32]) */;
    %538 = cast(%var_2022, dtype="bool") /* ty=Tensor[(6, 12, 5), bool] */;
    %539 = shape_of(%var_2021, dtype="int32") /* ty=Tensor[(3), int32] */;
    %540 = cast(%var_2021, dtype="bool") /* ty=Tensor[(6, 12, 5), bool] */;
    %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %542 = logical_and(%540, %541) /* ty=Tensor[(6, 12, 5), bool] */;
    %543 = cast(%542, dtype="float64") /* ty=Tensor[(6, 12, 5), float64] */;
    %544 = asin(%543) /* ty=Tensor[(6, 12, 5), float64] */;
    %545 = cast(%544, dtype="float64") /* ty=Tensor[(6, 12, 5), float64] */;
    %546 = %537.0;
    %547 = tan(%545) /* ty=Tensor[(6, 12, 5), float64] */;
    (%546, %var_2043, meta[relay.Constant][25] /* ty=Tensor[(624), int16] */, meta[relay.Constant][26] /* ty=Tensor[(286, 1), uint64] */, %547)
  };
  %548(%var_2066, %var_2067, %var_2068) /* ty=(Tensor[(13, 8, 6), int16], Tensor[(48), int16], Tensor[(624), int16], Tensor[(286, 1), uint64], Tensor[(6, 12, 5), float64]) */
}

def @func_2851(%var_2812: Tensor[(286), uint64], %var_2845: Tensor[(180), int32], %var_2846: Tensor[(6, 196), float64]) -> (Tensor[(200), uint32], Tensor[(286), uint64], Tensor[(200), uint32], Tensor[(14, 5, 8), float32], Tensor[(200), uint32], Tensor[(1176), float64], int32, Tensor[(180), int32], Tensor[(6, 196), float64]) {
  %549 = cast(%var_2812, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %550 = cast(meta[relay.Constant][27] /* ty=Tensor[(200), uint32] */, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %551 = reshape(%549, newshape=[13, 2, 11]) /* ty=Tensor[(13, 2, 11), uint64] */;
  %552 = reshape(%550, newshape=[200]) /* ty=Tensor[(200), uint32] */;
  %553 = @func_1448(%551, %552) /* ty=(Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(13, 2, 11), uint16]) */;
  %554 = @func_2745() /* ty=Tensor[(14, 5, 8), float64] */;
  %555 = cast(%554, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %556 = cos(%555) /* ty=Tensor[(14, 5, 8), float32] */;
  %557 = cast(%554, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%556, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %561 = cast(%var_2812, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %562 = %553.1;
  %563 = cast(%562, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %564 = reshape(%561, newshape=[286]) /* ty=Tensor[(286), uint64] */;
  %565 = reshape(%563, newshape=[200]) /* ty=Tensor[(200), uint32] */;
  %566 = @func_2635(%564, %565) /* ty=(Tensor[(14, 5, 8), uint16], Tensor[(10, 2, 10), uint32], Tensor[(286), uint64], Tensor[(200), uint32]) */;
  %567 = cast(-9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %568 = cast(%var_2845, dtype="int32") /* ty=Tensor[(180), int32] */;
  %569 = cast(%var_2846, dtype="float64") /* ty=Tensor[(6, 196), float64] */;
  %570 = reshape(%567, newshape=[]) /* ty=int32 */;
  %571 = reshape(%568, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), int32] */;
  %572 = reshape(%569, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %573 = @func_1315(%570, %571, %572) /* ty=(Tensor[(4, 15, 3), int32], Tensor[(4, 15, 3), float32], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64]) */;
  %574 = mod(%559, %560) /* ty=Tensor[(14, 5, 8), float32] */;
  %575 = %566.3;
  %576 = %573.4;
  (%562, %var_2812, meta[relay.Constant][27] /* ty=Tensor[(200), uint32] */, %574, %575, %576, -9 /* ty=int32 */, %var_2845, %var_2846)
}

def @func_4058() -> (Tensor[(3, 14, 9), int8],) {
  %577 = @func_2949() /* ty=(Tensor[(3, 14, 9), float64],) */;
  %578 = %577.0;
  %579 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 14, 9), float64] */, dtype="int8") /* ty=Tensor[(3, 14, 9), int8] */;
  %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%578, dtype="int8") /* ty=Tensor[(3, 14, 9), int8] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %583 = minimum(%581, %582) /* ty=Tensor[(3, 14, 9), int8] */;
  (%583,)
}

def @func_1315(%var_1271: int32, %var_1272: Tensor[(4, 15, 3), int32], %var_1311: Tensor[(1176), float64]) -> (Tensor[(4, 15, 3), int32], Tensor[(4, 15, 3), float32], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64]) {
  %584 = cast(%var_1271, dtype="int32") /* ty=int32 */;
  %585 = cast(%var_1272, dtype="int32") /* ty=Tensor[(4, 15, 3), int32] */;
  %586 = cast(%var_1272, dtype="float32") /* ty=Tensor[(4, 15, 3), float32] */;
  %587 = cast(%var_1271, dtype="float32") /* ty=float32 */;
  %588 = cast(meta[relay.Constant][29] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %589 = cast(%var_1311, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %590 = reshape(%588, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), float32] */;
  %591 = reshape(%589, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %592 = @func_465(%590, %591) /* ty=(Tensor[(168, 1176), bool], Tensor[(11, 12, 8), float64]) */;
  %593 = multiply(%584, %585) /* ty=Tensor[(4, 15, 3), int32] */;
  %594 = subtract(%586, %587) /* ty=Tensor[(4, 15, 3), float32] */;
  %595 = %592.1;
  (%593, %594, %595, meta[relay.Constant][29] /* ty=Tensor[(1056), float32] */, %var_1311)
}

def @func_1703(%var_1698: Tensor[(4, 1, 8), float64], %var_1699: Tensor[(144), bool], %var_1700: int32, %var_1701: Tensor[(180), int32], %var_1702: Tensor[(12, 98), float64]) -> (Tensor[(4, ?, 8), bool], Tensor[(4, 13, 8), bool], Tensor[(7, 4, 12), bool], Tensor[(144), bool], Tensor[(200), uint32], Tensor[(4, 15, 3), float32], int32, Tensor[(180), int32], Tensor[(12, 98), float64], Tensor[(4, ?, 8), bool], Tensor[(1176), float64], Tensor[(10, 2, 10), uint32]) {
  @func_1696(%var_1698, %var_1699, %var_1700, %var_1701, %var_1702) /* ty=(Tensor[(4, ?, 8), bool], Tensor[(4, 13, 8), bool], Tensor[(7, 4, 12), bool], Tensor[(144), bool], Tensor[(200), uint32], Tensor[(4, 15, 3), float32], int32, Tensor[(180), int32], Tensor[(12, 98), float64], Tensor[(4, ?, 8), bool], Tensor[(1176), float64], Tensor[(10, 2, 10), uint32]) */
}

def @func_3506() -> (Tensor[(14, 5, 8), float64],) {
  %596 = @func_2745() /* ty=Tensor[(14, 5, 8), float64] */;
  (%596,)
}

def @func_4209(%var_4207: Tensor[(200), uint32]) -> (Tensor[(14, 5, 8), float64], Tensor[(10, 2, 10), uint32], Tensor[(200), uint32]) {
  @func_4206(%var_4207) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(10, 2, 10), uint32], Tensor[(200), uint32]) */
}

def @func_998(%var_982: Tensor[(3, 4, 12), bool], %var_989: Tensor[(200), uint32], %var_991: Tensor[(3, 4, 12), bool]) -> (Tensor[(7, 4, 12), bool], Tensor[(14, 7, 12), float64], Tensor[(1176), float64], Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(3, 4, 12), bool]) {
  %597 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 4, 12), bool] */, dtype="bool") /* ty=Tensor[(1, 4, 12), bool] */;
  %598 = cast(meta[relay.Constant][31] /* ty=Tensor[(7, 4, 12), bool] */, dtype="bool") /* ty=Tensor[(7, 4, 12), bool] */;
  %599 = cast(meta[relay.Constant][32] /* ty=Tensor[(1176), float64] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %600 = cast(meta[relay.Constant][32] /* ty=Tensor[(1176), float64] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %601 = reshape(%599, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
  %602 = reshape(%600, newshape=[14, 7, 12]) /* ty=Tensor[(14, 7, 12), float64] */;
  %603 = @func_351(%601, %602) /* ty=(Tensor[(14, 7, 12), float64], Tensor[(168, ?), bool]) */;
  %604 = cast(%var_989, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %605 = cast(%var_989, dtype="uint32") /* ty=Tensor[(200), uint32] */;
  %606 = reshape(%604, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint32] */;
  %607 = reshape(%605, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint32] */;
  %608 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 4, 12), bool] */, dtype="bool") /* ty=Tensor[(1, 4, 12), bool] */;
  %609 = cast(%var_982, dtype="bool") /* ty=Tensor[(3, 4, 12), bool] */;
  %610 = equal(%608, %609) /* ty=Tensor[(3, 4, 12), bool] */;
  %611 = cast(%var_991, dtype="bool") /* ty=Tensor[(3, 4, 12), bool] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="bool") /* ty=Tensor[(3, 4, 12), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = logical_and(%597, %598) /* ty=Tensor[(7, 4, 12), bool] */;
  %616 = %603.0;
  %617 = @func_596(%606, %607) /* ty=Tensor[(10, 2, 10), uint32] */;
  %618 = less(%613, %614) /* ty=Tensor[(3, 4, 12), bool] */;
  (%615, %616, meta[relay.Constant][32] /* ty=Tensor[(1176), float64] */, %617, %var_989, %618)
}

def @func_3157(%var_3150: Tensor[(168), uint16], %var_3151: Tensor[(1056), float32], %var_3152: Tensor[(1176), float64], %var_3153: Tensor[(35, 10), float64], %var_3154: Tensor[(32), float64], %var_3155: Tensor[(144), bool], %var_3156: int32) -> (Tensor[(8, 7, 3), uint16], Tensor[(168), uint16], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64], Tensor[(8, 7, 3), uint16], Tensor[(308), float32], Tensor[(286), uint64], Tensor[(3, 14, 9), float64], Tensor[(200), int16], Tensor[(14, 5, 8), float32], Tensor[(3, 14, 9), float64], Tensor[(4, 15, 3), float32], Tensor[(32), float64], Tensor[(144), bool], int32, Tensor[(1, 180), int32], Tensor[(1, 286), uint64], Tensor[(35, 10), bool], Tensor[(8, 7, 3), uint16], Tensor[(14, 5, 8), float64]) {
  @func_3148(%var_3150, %var_3151, %var_3152, %var_3153, %var_3154, %var_3155, %var_3156) /* ty=(Tensor[(8, 7, 3), uint16], Tensor[(168), uint16], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64], Tensor[(8, 7, 3), uint16], Tensor[(308), float32], Tensor[(286), uint64], Tensor[(3, 14, 9), float64], Tensor[(200), int16], Tensor[(14, 5, 8), float32], Tensor[(3, 14, 9), float64], Tensor[(4, 15, 3), float32], Tensor[(32), float64], Tensor[(144), bool], int32, Tensor[(1, 180), int32], Tensor[(1, 286), uint64], Tensor[(35, 10), bool], Tensor[(8, 7, 3), uint16], Tensor[(14, 5, 8), float64]) */
}

def @func_5140() -> Tensor[(3, 14, 9), float64] {
  @func_3407() /* ty=Tensor[(3, 14, 9), float64] */
}

def @func_4237(%var_4235: Tensor[(11, 15, 5), int8], %var_4236: Tensor[(11, 15, 5), int8]) -> (Tensor[(11, 15, 5), int8], Tensor[(11, 15, 5), float64]) {
  %626 = fn (%var_4211: Tensor[(11, 15, 5), int8], %var_4212: Tensor[(11, 15, 5), int8]) -> (Tensor[(11, 15, 5), int8], Tensor[(11, 15, 5), float64]) {
    %619 = cast(%var_4212, dtype="int8") /* ty=Tensor[(11, 15, 5), int8] */;
    %620 = shape_of(%var_4211, dtype="int32") /* ty=Tensor[(3), int32] */;
    %621 = cast(%var_4211, dtype="int8") /* ty=Tensor[(11, 15, 5), int8] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %623 = cast(%var_4212, dtype="float64") /* ty=Tensor[(11, 15, 5), float64] */;
    %624 = logical_xor(%621, %622) /* ty=Tensor[(11, 15, 5), int8] */;
    %625 = log2(%623) /* ty=Tensor[(11, 15, 5), float64] */;
    (%624, %625)
  };
  %626(%var_4235, %var_4236) /* ty=(Tensor[(11, 15, 5), int8], Tensor[(11, 15, 5), float64]) */
}

def @func_2521(%var_2496: Tensor[(5, 5, 6), float32], %var_2507: Tensor[(5, 5, 6), float32]) -> (Tensor[(5, 5, 6), float64], Tensor[(5, 5, 6), bool], Tensor[(168, 1176), bool], Tensor[(1056), float32], Tensor[(1176), float64]) {
  %627 = cast(%var_2496, dtype="float32") /* ty=Tensor[(5, 5, 6), float32] */;
  %628 = acos(%627) /* ty=Tensor[(5, 5, 6), float32] */;
  %629 = cast(%628, dtype="float64") /* ty=Tensor[(5, 5, 6), float64] */;
  %630 = cast(%var_2507, dtype="bool") /* ty=Tensor[(5, 5, 6), bool] */;
  %631 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%628, dtype="bool") /* ty=Tensor[(5, 5, 6), bool] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %634 = cast(meta[relay.Constant][33] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %635 = cast(meta[relay.Constant][34] /* ty=Tensor[(1176), float64] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %636 = reshape(%634, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), float32] */;
  %637 = reshape(%635, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %638 = @func_465(%636, %637) /* ty=(Tensor[(168, 1176), bool], Tensor[(11, 12, 8), float64]) */;
  %639 = cosh(%629) /* ty=Tensor[(5, 5, 6), float64] */;
  %640 = not_equal(%632, %633) /* ty=Tensor[(5, 5, 6), bool] */;
  %641 = %638.0;
  (%639, %640, %641, meta[relay.Constant][33] /* ty=Tensor[(1056), float32] */, meta[relay.Constant][34] /* ty=Tensor[(1176), float64] */)
}

def @func_4893() -> Tensor[(4, 10, 15), bool] {
  %642 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 10, 15), float32] */, dtype="float32") /* ty=Tensor[(4, 10, 15), float32] */;
  %643 = atan(%642) /* ty=Tensor[(4, 10, 15), float32] */;
  %644 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 10, 15), float32] */, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%646, %647) /* ty=Tensor[(4, 10, 15), bool] */
}

def @func_3954(%var_3952: Tensor[(308), float32]) -> (Tensor[(14, 5, 8), float32], Tensor[(1, 168), uint16], Tensor[(308), float32]) {
  @func_3951(%var_3952) /* ty=(Tensor[(14, 5, 8), float32], Tensor[(1, 168), uint16], Tensor[(308), float32]) */
}

def @func_2525(%var_2523: Tensor[(5, 5, 6), float32], %var_2524: Tensor[(5, 5, 6), float32]) -> (Tensor[(5, 5, 6), float64], Tensor[(5, 5, 6), bool], Tensor[(168, 1176), bool], Tensor[(1056), float32], Tensor[(1176), float64]) {
  @func_2521(%var_2523, %var_2524) /* ty=(Tensor[(5, 5, 6), float64], Tensor[(5, 5, 6), bool], Tensor[(168, 1176), bool], Tensor[(1056), float32], Tensor[(1176), float64]) */
}

def @func_1451(%var_1449: Tensor[(13, 2, 11), uint64], %var_1450: Tensor[(200), uint32]) -> (Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(13, 2, 11), uint16]) {
  %668 = fn (%var_1399: Tensor[(13, 2, 11), uint64], %var_1424: Tensor[(200), uint32]) -> (Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(13, 2, 11), uint16]) {
    %648 = cast(%var_1424, dtype="uint32") /* ty=Tensor[(200), uint32] */;
    %649 = cast(%var_1424, dtype="uint32") /* ty=Tensor[(200), uint32] */;
    %650 = reshape(%648, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint32] */;
    %651 = reshape(%649, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint32] */;
    %652 = cast(%var_1399, dtype="uint64") /* ty=Tensor[(13, 2, 11), uint64] */;
    %653 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(13, 2, 11), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %654 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 2, 11), uint64] */, dtype="uint64") /* ty=Tensor[(13, 2, 11), uint64] */;
    %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %656 = bitwise_and(%654, %655) /* ty=Tensor[(13, 2, 11), uint64] */;
    %657 = cast(%var_1399, dtype="bool") /* ty=Tensor[(13, 2, 11), bool] */;
    %658 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(13, 2, 11), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %659 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 2, 11), uint64] */, dtype="bool") /* ty=Tensor[(13, 2, 11), bool] */;
    %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %661 = greater_equal(%659, %660) /* ty=Tensor[(13, 2, 11), bool] */;
    %662 = cast(%661, dtype="uint16") /* ty=Tensor[(13, 2, 11), uint16] */;
    %663 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
    %664 = cast(%656, dtype="uint16") /* ty=Tensor[(13, 2, 11), uint16] */;
    %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %666 = @func_596(%650, %651) /* ty=Tensor[(10, 2, 10), uint32] */;
    %667 = subtract(%664, %665) /* ty=Tensor[(13, 2, 11), uint16] */;
    (%666, %var_1424, %667)
  };
  %668(%var_1449, %var_1450) /* ty=(Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(13, 2, 11), uint16]) */
}

def @func_3735(%var_3662: Tensor[(3, 12, 4), uint64], %var_3663: Tensor[(3, 12, 4), uint64]) -> (Tensor[(3, 12, 4), uint64], Tensor[(14, 5, 8), float64], Tensor[(3, 12, 4), int16]) {
  %669 = cast(%var_3663, dtype="uint64") /* ty=Tensor[(3, 12, 4), uint64] */;
  %670 = shape_of(%var_3662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%var_3662, dtype="uint64") /* ty=Tensor[(3, 12, 4), uint64] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %673 = @func_3437() /* ty=(Tensor[(14, 5, 8), uint16], Tensor[(14, 5, 8), float64]) */;
  %674 = cast(%var_3662, dtype="float64") /* ty=Tensor[(3, 12, 4), float64] */;
  %675 = sin(%674) /* ty=Tensor[(3, 12, 4), float64] */;
  %676 = cast(%675, dtype="float32") /* ty=Tensor[(3, 12, 4), float32] */;
  %677 = exp(%676) /* ty=Tensor[(3, 12, 4), float32] */;
  %678 = cast(%var_3663, dtype="int16") /* ty=Tensor[(3, 12, 4), int16] */;
  %679 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%677, dtype="int16") /* ty=Tensor[(3, 12, 4), int16] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %682 = add(%671, %672) /* ty=Tensor[(3, 12, 4), uint64] */;
  %683 = %673.1;
  %684 = right_shift(%680, %681) /* ty=Tensor[(3, 12, 4), int16] */;
  (%682, %683, %684)
}

def @func_3345(%var_3343: int32, %var_3344: Tensor[(180), int32]) -> (Tensor[(3, 14, 9), float64], Tensor[(1176), float64], int32, Tensor[(180), int32], Tensor[(588, 2), float64]) {
  %695 = fn (%var_3315: int32, %var_3316: Tensor[(180), int32]) -> (Tensor[(3, 14, 9), float64], Tensor[(1176), float64], int32, Tensor[(180), int32], Tensor[(588, 2), float64]) {
    %685 = @func_2949() /* ty=(Tensor[(3, 14, 9), float64],) */;
    %686 = cast(%var_3315, dtype="int32") /* ty=int32 */;
    %687 = cast(%var_3316, dtype="int32") /* ty=Tensor[(180), int32] */;
    %688 = cast(meta[relay.Constant][37] /* ty=Tensor[(588, 2), float64] */, dtype="float64") /* ty=Tensor[(588, 2), float64] */;
    %689 = reshape(%686, newshape=[]) /* ty=int32 */;
    %690 = reshape(%687, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), int32] */;
    %691 = reshape(%688, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
    %692 = @func_1315(%689, %690, %691) /* ty=(Tensor[(4, 15, 3), int32], Tensor[(4, 15, 3), float32], Tensor[(11, 12, 8), float64], Tensor[(1056), float32], Tensor[(1176), float64]) */;
    %693 = %685.0;
    %694 = %692.4;
    (%693, %694, %var_3315, %var_3316, meta[relay.Constant][37] /* ty=Tensor[(588, 2), float64] */)
  };
  %695(%var_3343, %var_3344) /* ty=(Tensor[(3, 14, 9), float64], Tensor[(1176), float64], int32, Tensor[(180), int32], Tensor[(588, 2), float64]) */
}

def @func_4434(%var_4431: Tensor[(144), bool], %var_4432: Tensor[(14, 5, 8), uint16], %var_4433: Tensor[(378), float64]) -> (Tensor[(14, 5, 8), float64], Tensor[(144), bool], Tensor[(200), uint32], Tensor[(7, 4, 12), float64], Tensor[(14, 5, 8), bool], Tensor[(3, 14, 9), bool], Tensor[(378), float64]) {
  %718 = fn (%var_4398: Tensor[(144), bool], %var_4419: Tensor[(14, 5, 8), uint16], %var_4425: Tensor[(378), float64]) -> (Tensor[(14, 5, 8), float64], Tensor[(144), bool], Tensor[(200), uint32], Tensor[(7, 4, 12), float64], Tensor[(14, 5, 8), bool], Tensor[(3, 14, 9), bool], Tensor[(378), float64]) {
    %696 = @func_3967() /* ty=Tensor[(14, 5, 8), uint16] */;
    %697 = cast(%696, dtype="float64") /* ty=Tensor[(14, 5, 8), float64] */;
    %698 = cast(%var_4398, dtype="bool") /* ty=Tensor[(144), bool] */;
    %699 = cast(meta[relay.Constant][38] /* ty=Tensor[(200), uint32] */, dtype="uint32") /* ty=Tensor[(200), uint32] */;
    %700 = cast(%var_4398, dtype="bool") /* ty=Tensor[(144), bool] */;
    %701 = reshape(%698, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), bool] */;
    %702 = reshape(%699, newshape=[200]) /* ty=Tensor[(200), uint32] */;
    %703 = reshape(%700, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), bool] */;
    %704 = @func_998(%701, %702, %703) /* ty=(Tensor[(7, 4, 12), bool], Tensor[(14, 7, 12), float64], Tensor[(1176), float64], Tensor[(10, 2, 10), uint32], Tensor[(200), uint32], Tensor[(3, 4, 12), bool]) */;
    %705 = %704.0;
    %706 = cast(%705, dtype="float64") /* ty=Tensor[(7, 4, 12), float64] */;
    %707 = cast(%var_4419, dtype="bool") /* ty=Tensor[(14, 5, 8), bool] */;
    %708 = shape_of(%696, dtype="int32") /* ty=Tensor[(3), int32] */;
    %709 = cast(%696, dtype="bool") /* ty=Tensor[(14, 5, 8), bool] */;
    %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %711 = cast(%var_4425, dtype="float64") /* ty=Tensor[(378), float64] */;
    %712 = reshape(%711, newshape=[3, 14, 9]) /* ty=Tensor[(3, 14, 9), float64] */;
    %713 = @func_3271(%712) /* ty=(Tensor[(3, 14, 9), bool],) */;
    %714 = erf(%697) /* ty=Tensor[(14, 5, 8), float64] */;
    %715 = asinh(%706) /* ty=Tensor[(7, 4, 12), float64] */;
    %716 = greater_equal(%709, %710) /* ty=Tensor[(14, 5, 8), bool] */;
    %717 = %713.0;
    (%714, %var_4398, meta[relay.Constant][38] /* ty=Tensor[(200), uint32] */, %715, %716, %717, %var_4425)
  };
  %718(%var_4431, %var_4432, %var_4433) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(144), bool], Tensor[(200), uint32], Tensor[(7, 4, 12), float64], Tensor[(14, 5, 8), bool], Tensor[(3, 14, 9), bool], Tensor[(378), float64]) */
}

def @func_600(%var_598: Tensor[(10, 2, 10), uint32], %var_599: Tensor[(10, 2, 10), uint32]) -> Tensor[(10, 2, 10), uint32] {
  @func_596(%var_598, %var_599) /* ty=Tensor[(10, 2, 10), uint32] */
}

def @func_1917(%var_1914: Tensor[(1, 8, 6), int16], %var_1915: Tensor[(13, 8, 6), int16], %var_1916: Tensor[(286, 1), uint64]) -> (Tensor[(13, 8, 6), int16], Tensor[(1, 8, 6), float64], Tensor[(10, 2, 10), uint32], Tensor[(286, 1), uint64], Tensor[(10, 20), uint32]) {
  @func_1912(%var_1914, %var_1915, %var_1916) /* ty=(Tensor[(13, 8, 6), int16], Tensor[(1, 8, 6), float64], Tensor[(10, 2, 10), uint32], Tensor[(286, 1), uint64], Tensor[(10, 20), uint32]) */
}

def @func_4598(%var_4584: Tensor[(84), float32]) -> (Tensor[(14, 5, 8), uint16], Tensor[(6, 14), bool], Tensor[(84), float32]) {
  %719 = @func_2937() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %720 = cast(%var_4584, dtype="float32") /* ty=Tensor[(84), float32] */;
  %721 = cast(%var_4584, dtype="float32") /* ty=Tensor[(84), float32] */;
  %722 = reshape(%720, newshape=[6, 14]) /* ty=Tensor[(6, 14), float32] */;
  %723 = reshape(%721, newshape=[6, 14]) /* ty=Tensor[(6, 14), float32] */;
  %724 = %719.0;
  %725 = @func_3757(%722, %723) /* ty=Tensor[(6, 14), bool] */;
  (%724, %725, %var_4584)
}

def @func_4688() -> Tensor[(14, 5, 8), uint16] {
  @func_4686() /* ty=Tensor[(14, 5, 8), uint16] */
}

def @func_4855(%var_4849: Tensor[(7, 13, 16), uint8], %var_4850: Tensor[(7, 13, 16), uint8], %var_4851: Tensor[(2, 588), float64], %var_4852: Tensor[(32), float64], %var_4853: Tensor[(144), bool], %var_4854: int32) -> (Tensor[(7, 13, 16), uint8], Tensor[(7, 13, 16), float32], Tensor[(8, 7, 3), uint16], Tensor[(168), uint16], Tensor[(1056), float32], Tensor[(2, 588), float64], Tensor[(350), float64], Tensor[(32), float64], Tensor[(144), bool], int32) {
  @func_4847(%var_4849, %var_4850, %var_4851, %var_4852, %var_4853, %var_4854) /* ty=(Tensor[(7, 13, 16), uint8], Tensor[(7, 13, 16), float32], Tensor[(8, 7, 3), uint16], Tensor[(168), uint16], Tensor[(1056), float32], Tensor[(2, 588), float64], Tensor[(350), float64], Tensor[(32), float64], Tensor[(144), bool], int32) */
}

def @func_5142() -> Tensor[(3, 14, 9), float64] {
  @func_5140() /* ty=Tensor[(3, 14, 9), float64] */
}

def @func_3484() -> (Tensor[(14, 5, 8), float64],) {
  @func_3482() /* ty=(Tensor[(14, 5, 8), float64],) */
}

def @func_3640() -> Tensor[(3, 14, 9), uint32] {
  @func_3638() /* ty=Tensor[(3, 14, 9), uint32] */
}

def @func_2553() -> (Tensor[(14, 5, 8), uint16],) {
  %726 = cast(meta[relay.Constant][40] /* ty=Tensor[(14, 5, 8), uint16] */, dtype="uint16") /* ty=Tensor[(14, 5, 8), uint16] */;
  %727 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(14, 5, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(meta[relay.Constant][39] /* ty=Tensor[(14, 5, 8), uint16] */, dtype="uint16") /* ty=Tensor[(14, 5, 8), uint16] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %730 = logical_xor(%728, %729) /* ty=Tensor[(14, 5, 8), uint16] */;
  (%730,)
}

def @func_4686() -> Tensor[(14, 5, 8), uint16] {
  %731 = @func_4273() /* ty=(Tensor[(14, 5, 8), uint16],) */;
  %731.0
}

def @func_4273() -> (Tensor[(14, 5, 8), uint16],) {
  %732 = @func_3967() /* ty=Tensor[(14, 5, 8), uint16] */;
  (%732,)
}

def @func_5201(%var_5200: Tensor[(14, 10, 6), int64]) -> Tensor[(14, 10, 6), int64] {
  %737 = fn (%var_5193: Tensor[(14, 10, 6), int64]) -> Tensor[(14, 10, 6), int64] {
    %733 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 10, 6), int64] */, dtype="int64") /* ty=Tensor[(14, 10, 6), int64] */;
    %734 = shape_of(%var_5193, dtype="int32") /* ty=Tensor[(3), int32] */;
    %735 = cast(%var_5193, dtype="int64") /* ty=Tensor[(14, 10, 6), int64] */;
    %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    bitwise_xor(%735, %736) /* ty=Tensor[(14, 10, 6), int64] */
  };
  %737(%var_5200) /* ty=Tensor[(14, 10, 6), int64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen94/build/output.py:1495: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen94/build/output.py", line 1500, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(420) tvmgen_default_fused_cast_cast_reshape_not_equal_kernel0(signed char* __restrict__ T_not_equal, uint* __restrict__ placeholder, uint* __restrict__ placeholder1) {
  T_not_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) != ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

