==========mod==========
#[version = "0.0.5"]
def @func_4216() -> Tensor[(2, 9, 13), float64] {
  @func_3980() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_4697(%var_4672: Tensor[(13, 4, 15), float32], %var_4679: Tensor[(13, 4, 15), float32]) -> (Tensor[(13, 4, 15), bool],) {
  %0 = cast(%var_4672, dtype="float32") /* ty=Tensor[(13, 4, 15), float32] */;
  %1 = log10(%0) /* ty=Tensor[(13, 4, 15), float32] */;
  %2 = cast(%var_4679, dtype="bool") /* ty=Tensor[(13, 4, 15), bool] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="bool") /* ty=Tensor[(13, 4, 15), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %6 = less_equal(%4, %5) /* ty=Tensor[(13, 4, 15), bool] */;
  (%6,)
}

def @func_6156(%var_6145: Tensor[(14, 5, 15), float64]) -> (Tensor[(14, 5, 15), float64], Tensor[(216), uint32], Tensor[(180), float32]) {
  %7 = cast(%var_6145, dtype="float64") /* ty=Tensor[(14, 5, 15), float64] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %9 = reshape(%8, newshape=[9, 2, 10]) /* ty=Tensor[(9, 2, 10), float32] */;
  %10 = @func_5928(%9) /* ty=(Tensor[(9, 2, 10), float32], Tensor[(2, 3, 5), float64], uint32, Tensor[(216), uint32]) */;
  %11 = cos(%7) /* ty=Tensor[(14, 5, 15), float64] */;
  %12 = %10.3;
  (%11, %12, meta[relay.Constant][0] /* ty=Tensor[(180), float32] */)
}

def @func_7325() -> Tensor[(9, 8, 3), float64] {
  %13 = @func_4934() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(9, 8, 3), uint32], uint32, Tensor[(2, 108), float32]) */;
  %14 = %13.1;
  %15 = cast(%14, dtype="float64") /* ty=Tensor[(9, 8, 3), float64] */;
  exp(%15) /* ty=Tensor[(9, 8, 3), float64] */
}

def @func_3686(%var_3669: Tensor[(2, 9, 13), bool]) -> (Tensor[(2, 9, 13), float32],) {
  %16 = @func_2736() /* ty=Tensor[(2, 9, 13), bool] */;
  %17 = cast(%var_3669, dtype="float32") /* ty=Tensor[(2, 9, 13), float32] */;
  %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%16, dtype="float32") /* ty=Tensor[(2, 9, 13), float32] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %21 = divide(%19, %20) /* ty=Tensor[(2, 9, 13), float32] */;
  (%21,)
}

def @func_5718(%var_5672: Tensor[(576), uint32]) -> (Tensor[(910), float64], Tensor[(4, 12, 12), bool], Tensor[(576), uint32], Tensor[(352, 1), int8], Tensor[(560), int8], Tensor[(2, 9, 13), float64]) {
  %22 = @func_4764() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), float64], Tensor[(45), uint32], Tensor[(910), float32], Tensor[(3600), uint16]) */;
  %23 = %22.3;
  %24 = cast(%23, dtype="float64") /* ty=Tensor[(910), float64] */;
  %25 = cast(%var_5672, dtype="uint32") /* ty=Tensor[(576), uint32] */;
  %26 = cast(%var_5672, dtype="uint32") /* ty=Tensor[(576), uint32] */;
  %27 = cast(meta[relay.Constant][1] /* ty=Tensor[(352, 1), int8] */, dtype="int8") /* ty=Tensor[(352, 1), int8] */;
  %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(560), int8] */, dtype="int8") /* ty=Tensor[(560), int8] */;
  %29 = reshape(%25, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint32] */;
  %30 = reshape(%26, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint32] */;
  %31 = reshape(%27, newshape=[352]) /* ty=Tensor[(352), int8] */;
  %32 = reshape(%28, newshape=[560]) /* ty=Tensor[(560), int8] */;
  %33 = @func_3837(%29, %30, %31, %32) /* ty=(Tensor[(4, 12, 12), bool], Tensor[(2, 9, 13), float64], Tensor[(88), int8], Tensor[(8, 11, 4), float32], Tensor[(4, 12, 12), float32], Tensor[(352), float64], Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), uint64], Tensor[(4, 12, 12), bool], Tensor[(560), int8], Tensor[(2, 9, 13), float64], Tensor[(14, 4, 910), uint64], Tensor[(16, 1), float64], Tensor[(4, 4), float64]) */;
  %34 = @func_4216() /* ty=Tensor[(2, 9, 13), float64] */;
  %35 = @func_3910() /* ty=Tensor[(2, 9, 13), float64] */;
  %36 = cast(%35, dtype="float64") /* ty=Tensor[(2, 9, 13), float64] */;
  %37 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%34, dtype="float64") /* ty=Tensor[(2, 9, 13), float64] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %40 = cosh(%24) /* ty=Tensor[(910), float64] */;
  %41 = %33.8;
  %42 = mod(%38, %39) /* ty=Tensor[(2, 9, 13), float64] */;
  (%40, %41, %var_5672, meta[relay.Constant][1] /* ty=Tensor[(352, 1), int8] */, meta[relay.Constant][2] /* ty=Tensor[(560), int8] */, %42)
}

def @func_6301(%var_6257: Tensor[(576), uint32], %var_6258: Tensor[(176, 2), int8], %var_6259: Tensor[(1, 560), int8]) -> (Tensor[(2, 9, 13), float64], Tensor[(45), uint32], Tensor[(2, 9, 13), float64], Tensor[(176, 2), int8], Tensor[(1, 560), int8], Tensor[(560), int8], Tensor[(12, 5, 1), float64], Tensor[(60), float64], Tensor[(576), float32]) {
  %43 = @func_4764() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), float64], Tensor[(45), uint32], Tensor[(910), float32], Tensor[(3600), uint16]) */;
  %44 = cast(%var_6257, dtype="uint32") /* ty=Tensor[(576), uint32] */;
  %45 = cast(%var_6257, dtype="uint32") /* ty=Tensor[(576), uint32] */;
  %46 = cast(%var_6258, dtype="int8") /* ty=Tensor[(176, 2), int8] */;
  %47 = cast(%var_6259, dtype="int8") /* ty=Tensor[(1, 560), int8] */;
  %48 = reshape(%44, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint32] */;
  %49 = reshape(%45, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint32] */;
  %50 = reshape(%46, newshape=[352]) /* ty=Tensor[(352), int8] */;
  %51 = reshape(%47, newshape=[560]) /* ty=Tensor[(560), int8] */;
  %52 = @func_3837(%48, %49, %50, %51) /* ty=(Tensor[(4, 12, 12), bool], Tensor[(2, 9, 13), float64], Tensor[(88), int8], Tensor[(8, 11, 4), float32], Tensor[(4, 12, 12), float32], Tensor[(352), float64], Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), uint64], Tensor[(4, 12, 12), bool], Tensor[(560), int8], Tensor[(2, 9, 13), float64], Tensor[(14, 4, 910), uint64], Tensor[(16, 1), float64], Tensor[(4, 4), float64]) */;
  %53 = cast(%var_6257, dtype="float32") /* ty=Tensor[(576), float32] */;
  %54 = atan(%53) /* ty=Tensor[(576), float32] */;
  %55 = cast(%54, dtype="float64") /* ty=Tensor[(576), float64] */;
  %56 = atanh(%55) /* ty=Tensor[(576), float64] */;
  %57 = cast(%56, dtype="uint32") /* ty=Tensor[(576), uint32] */;
  %58 = reshape(%57, newshape=[576]) /* ty=Tensor[(576), uint32] */;
  %59 = @func_5718(%58) /* ty=(Tensor[(910), float64], Tensor[(4, 12, 12), bool], Tensor[(576), uint32], Tensor[(352, 1), int8], Tensor[(560), int8], Tensor[(2, 9, 13), float64]) */;
  %60 = cast(meta[relay.Constant][3] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %61 = reshape(%60, newshape=[12, 5, 1]) /* ty=Tensor[(12, 5, 1), float64] */;
  %62 = @func_3011(%61) /* ty=(Tensor[(12, 5, 1), float64],) */;
  %63 = cast(%56, dtype="float32") /* ty=Tensor[(576), float32] */;
  %64 = @func_4216() /* ty=Tensor[(2, 9, 13), float64] */;
  %65 = %43.2;
  %66 = %52.10;
  %67 = %59.4;
  %68 = %62.0;
  %69 = sinh(%63) /* ty=Tensor[(576), float32] */;
  (%64, %65, %66, %var_6258, %var_6259, %67, %68, meta[relay.Constant][3] /* ty=Tensor[(60), float64] */, %69)
}

def @func_4100(%var_4074: Tensor[(378), int8]) -> (Tensor[(2, 9, 13), float64], int8, Tensor[(378), int8], Tensor[(2, 9, 13), float32], Tensor[(8, 12, 5), float32], Tensor[(480), float32], Tensor[(2, 9, 13), uint64]) {
  %70 = @func_3600() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %71 = cast(%var_4074, dtype="int8") /* ty=Tensor[(378), int8] */;
  %72 = reshape(%71, newshape=[126, 3]) /* ty=Tensor[(126, 3), int8] */;
  %73 = @func_2241(%72) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(50), float32], int8, Tensor[(126, 3), int8]) */;
  %74 = @func_3445() /* ty=(Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(2, 9, 13), float32]) */;
  %75 = cast(meta[relay.Constant][4] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %76 = reshape(%75, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %77 = @func_2677() /* ty=(Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), float64]) */;
  %78 = %70.0;
  %79 = %73.2;
  %80 = %74.2;
  %81 = @func_3323(%76) /* ty=Tensor[(8, 12, 5), float32] */;
  %82 = %77.0;
  (%78, %79, %var_4074, %80, %81, meta[relay.Constant][4] /* ty=Tensor[(480), float32] */, %82)
}

def @func_1039(%var_1010: Tensor[(14, 4, 10), int8]) -> (Tensor[(14, 4, 10), int8], Tensor[(2, 3, 5), float64], Tensor[(5, 6), float64], Tensor[(10, 360), float64], Tensor[(3600, 1), uint16], Tensor[(14, 4, 910), float64]) {
  %83 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 4, 1), int8] */, dtype="int8") /* ty=Tensor[(14, 4, 1), int8] */;
  %84 = cast(%var_1010, dtype="int8") /* ty=Tensor[(14, 4, 10), int8] */;
  %85 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 6), float64] */, dtype="float64") /* ty=Tensor[(5, 6), float64] */;
  %86 = reshape(%85, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
  %87 = @func_3(%86) /* ty=(Tensor[(2, 3, 5), float64],) */;
  %88 = cast(meta[relay.Constant][7] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %89 = cast(meta[relay.Constant][8] /* ty=Tensor[(3600, 1), uint16] */, dtype="uint16") /* ty=Tensor[(3600, 1), uint16] */;
  %90 = reshape(%88, newshape=[7, 10, 13]) /* ty=Tensor[(7, 10, 13), float32] */;
  %91 = reshape(%89, newshape=[10, 360]) /* ty=Tensor[(10, 360), uint16] */;
  %92 = @func_896(%90, %91) /* ty=(Tensor[(9, 5), bool], Tensor[(45), uint32], Tensor[(7, 10, 13), int64], Tensor[(16, 15, 15), float64], Tensor[(10, 360), float64]) */;
  %93 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 4, 1), int8] */, dtype="float64") /* ty=Tensor[(14, 4, 1), float64] */;
  %94 = cast(meta[relay.Constant][7] /* ty=Tensor[(910), float32] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %95 = add(%83, %84) /* ty=Tensor[(14, 4, 10), int8] */;
  %96 = %87.0;
  %97 = %92.4;
  %98 = divide(%93, %94) /* ty=Tensor[(14, 4, 910), float64] */;
  (%95, %96, meta[relay.Constant][6] /* ty=Tensor[(5, 6), float64] */, %97, meta[relay.Constant][8] /* ty=Tensor[(3600, 1), uint16] */, %98)
}

def @func_4120() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
  %99 = @func_2984() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */;
  %100 = %99.1;
  %101 = @func_3980() /* ty=Tensor[(2, 9, 13), float64] */;
  (%100, %101)
}

def @func_3910() -> Tensor[(2, 9, 13), float64] {
  %102 = @func_2869() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %102.0
}

def @func_4622(%var_4595: uint32) -> (Tensor[(2, 9, 13), bool], Tensor[(9, 8, 3), uint32], uint32, Tensor[(216), uint32], Tensor[(2, 3, 5), float64]) {
  %103 = @func_3179() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], int8) */;
  %104 = cast(%var_4595, dtype="uint32") /* ty=uint32 */;
  %105 = cast(meta[relay.Constant][9] /* ty=Tensor[(216), uint32] */, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %106 = reshape(%104, newshape=[]) /* ty=uint32 */;
  %107 = reshape(%105, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), uint32] */;
  %108 = @func_672(%106, %107) /* ty=(Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) */;
  %109 = @func_3445() /* ty=(Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(2, 9, 13), float32]) */;
  %110 = %103.1;
  %111 = %108.0;
  %112 = %109.0;
  (%110, %111, %var_4595, meta[relay.Constant][9] /* ty=Tensor[(216), uint32] */, %112)
}

def @func_3(%var_0: Tensor[(2, 3, 5), float64]) -> (Tensor[(2, 3, 5), float64],) {
  %113 = cast(%var_0, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
  %114 = asinh(%113) /* ty=Tensor[(2, 3, 5), float64] */;
  (%114,)
}

def @func_2182() -> Tensor[(2, 9, 13), float64] {
  %115 = @func_2165() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %115.0
}

def @func_4569() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
  %116 = @func_3600() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %117 = @func_4120() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */;
  %118 = %116.0;
  %119 = %117.1;
  %120 = @func_2182() /* ty=Tensor[(2, 9, 13), float64] */;
  (%118, %119, %120)
}

def @func_2281() -> (Tensor[(2, 9, 13), uint64],) {
  %121 = @func_2165() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %122 = %121.0;
  %123 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 9, 13), float64] */, dtype="uint64") /* ty=Tensor[(2, 9, 13), uint64] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%122, dtype="uint64") /* ty=Tensor[(2, 9, 13), uint64] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %127 = multiply(%125, %126) /* ty=Tensor[(2, 9, 13), uint64] */;
  (%127,)
}

def @func_3445() -> (Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(2, 9, 13), float32]) {
  %128 = cast(meta[relay.Constant][11] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %129 = reshape(%128, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
  %130 = @func_3(%129) /* ty=(Tensor[(2, 3, 5), float64],) */;
  %131 = @func_2736() /* ty=Tensor[(2, 9, 13), bool] */;
  %132 = cast(%131, dtype="float64") /* ty=Tensor[(2, 9, 13), float64] */;
  %133 = asin(%132) /* ty=Tensor[(2, 9, 13), float64] */;
  %134 = cast(%133, dtype="float32") /* ty=Tensor[(2, 9, 13), float32] */;
  %135 = %130.0;
  %136 = sqrt(%134) /* ty=Tensor[(2, 9, 13), float32] */;
  (%135, meta[relay.Constant][11] /* ty=Tensor[(30), float64] */, %136)
}

def @func_4636(%var_4628: Tensor[(10, 4, 2), float32]) -> (Tensor[(10, 4, 2), float32],) {
  %137 = cast(%var_4628, dtype="float32") /* ty=Tensor[(10, 4, 2), float32] */;
  %138 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(10, 4, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(meta[relay.Constant][12] /* ty=Tensor[(10, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(10, 4, 2), float32] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %141 = power(%139, %140) /* ty=Tensor[(10, 4, 2), float32] */;
  (%141,)
}

def @func_7236() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool]) {
  %142 = @func_3179() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], int8) */;
  %143 = @func_5624() /* ty=Tensor[(2, 9, 13), float64] */;
  %144 = %142.1;
  (%143, %144)
}

def @func_4998() -> (Tensor[(2, 9, 13), float64],) {
  %145 = @func_4120() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */;
  %146 = %145.0;
  (%146,)
}

def @func_7181() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
  %147 = @func_4998() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %148 = %147.0;
  %149 = @func_6949() /* ty=Tensor[(2, 9, 13), float64] */;
  (%148, %149)
}

def @func_3600() -> (Tensor[(2, 9, 13), float64],) {
  %150 = @func_2984() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */;
  %151 = %150.1;
  (%151,)
}

def @func_8084() -> Tensor[(2, 9, 13), float64] {
  @func_6330() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_4383(%var_4299: int64, %var_4300: Tensor[(12, 3, 1), int64], %var_4304: Tensor[(12, 3, 13), int64]) -> (Tensor[(12, 3, 1), int64], Tensor[(2, 9, 13), bool], Tensor[(12, 3, 13), float32], Tensor[(2, 9, 13), float32]) {
  %152 = cast(%var_4299, dtype="int64") /* ty=int64 */;
  %153 = cast(%var_4300, dtype="int64") /* ty=Tensor[(12, 3, 1), int64] */;
  %154 = @func_2484() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), bool]) */;
  %155 = cast(%var_4300, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
  %156 = cast(%var_4304, dtype="float32") /* ty=Tensor[(12, 3, 13), float32] */;
  %157 = floor_mod(%155, %156) /* ty=Tensor[(12, 3, 13), float32] */;
  %158 = cast(%var_4304, dtype="uint8") /* ty=Tensor[(12, 3, 13), uint8] */;
  %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%157, dtype="uint8") /* ty=Tensor[(12, 3, 13), uint8] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %162 = minimum(%160, %161) /* ty=Tensor[(12, 3, 13), uint8] */;
  %163 = cast(%162, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %164 = acosh(%163) /* ty=Tensor[(12, 3, 13), float64] */;
  %165 = cast(%164, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %166 = erf(%165) /* ty=Tensor[(12, 3, 13), float64] */;
  %167 = cast(%166, dtype="float32") /* ty=Tensor[(12, 3, 13), float32] */;
  %168 = @func_3445() /* ty=(Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(2, 9, 13), float32]) */;
  %169 = bitwise_xor(%152, %153) /* ty=Tensor[(12, 3, 1), int64] */;
  %170 = %154.1;
  %171 = asin(%167) /* ty=Tensor[(12, 3, 13), float32] */;
  %172 = %168.2;
  (%169, %170, %171, %172)
}

def @func_4655() -> Tensor[(2, 9, 13), bool] {
  %173 = @func_3179() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], int8) */;
  %173.1
}

def @func_5928(%var_5912: Tensor[(9, 2, 10), float32]) -> (Tensor[(9, 2, 10), float32], Tensor[(2, 3, 5), float64], uint32, Tensor[(216), uint32]) {
  %174 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 2, 10), float32] */, dtype="float32") /* ty=Tensor[(9, 2, 10), float32] */;
  %175 = shape_of(%var_5912, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%var_5912, dtype="float32") /* ty=Tensor[(9, 2, 10), float32] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %178 = cast(meta[relay.Constant][14] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %179 = cast(meta[relay.Constant][15] /* ty=Tensor[(216), uint32] */, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %180 = reshape(%178, newshape=[]) /* ty=uint32 */;
  %181 = reshape(%179, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), uint32] */;
  %182 = @func_672(%180, %181) /* ty=(Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) */;
  %183 = floor_divide(%176, %177) /* ty=Tensor[(9, 2, 10), float32] */;
  %184 = %182.2;
  (%183, %184, meta[relay.Constant][14] /* ty=uint32 */, meta[relay.Constant][15] /* ty=Tensor[(216), uint32] */)
}

def @func_5015() -> Tensor[(2, 9, 13), float64] {
  @func_4026() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_6096() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2400), float32], uint32, Tensor[(12, 5, 1), float64]) {
  %185 = @func_4166() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(30), float64]) */;
  %186 = @func_5478() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], Tensor[(2, 9, 13), float64]) */;
  %187 = cast(meta[relay.Constant][16] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %188 = cast(meta[relay.Constant][17] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %189 = reshape(%187, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %190 = reshape(%188, newshape=[]) /* ty=uint32 */;
  %191 = @func_3964(%189, %190) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(216), uint32], Tensor[(2400), float32], uint32, Tensor[(2, 108), uint32], Tensor[(50), float32], Tensor[(378), int8], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float32], Tensor[(2, 3, 5), float64], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64], Tensor[(12, 5, 1), float64], Tensor[(3, 20), float64]) */;
  %192 = %191.12;
  %193 = cast(%192, dtype="float64") /* ty=Tensor[(12, 5, 1), float64] */;
  %194 = %185.0;
  %195 = %186.0;
  %196 = tan(%193) /* ty=Tensor[(12, 5, 1), float64] */;
  (%194, %195, meta[relay.Constant][16] /* ty=Tensor[(2400), float32] */, meta[relay.Constant][17] /* ty=uint32 */, %196)
}

def @func_177(%var_150: Tensor[(16, 15, 15), uint16], %var_151: Tensor[(16, 15, 15), uint16]) -> (Tensor[(16, 15, 15), bool], Tensor[(16, 15, 15), float64], Tensor[(2, 3, 5), float64], Tensor[(5, 6), float64], Tensor[(2, 3, 5), float64], Tensor[(2, 3, 5), float64]) {
  %197 = cast(%var_151, dtype="bool") /* ty=Tensor[(16, 15, 15), bool] */;
  %198 = shape_of(%var_150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%var_150, dtype="bool") /* ty=Tensor[(16, 15, 15), bool] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %201 = cast(%var_151, dtype="float64") /* ty=Tensor[(16, 15, 15), float64] */;
  %202 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 6), float64] */, dtype="float64") /* ty=Tensor[(5, 6), float64] */;
  %203 = reshape(%202, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
  %204 = @func_3(%203) /* ty=(Tensor[(2, 3, 5), float64],) */;
  %205 = %204.0;
  %206 = cast(%205, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
  %207 = reshape(%206, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
  %208 = @func_3(%207) /* ty=(Tensor[(2, 3, 5), float64],) */;
  %209 = cast(%205, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
  %210 = reshape(%209, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
  %211 = @func_3(%210) /* ty=(Tensor[(2, 3, 5), float64],) */;
  %212 = equal(%199, %200) /* ty=Tensor[(16, 15, 15), bool] */;
  %213 = atanh(%201) /* ty=Tensor[(16, 15, 15), float64] */;
  %214 = %208.0;
  %215 = %211.0;
  (%212, %213, %205, meta[relay.Constant][18] /* ty=Tensor[(5, 6), float64] */, %214, %215)
}

def @func_8178() -> Tensor[(2, 9, 13), float64] {
  @func_3910() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_2814() -> Tensor[(2, 9, 13), float64] {
  %216 = @func_2677() /* ty=(Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), float64]) */;
  %216.1
}

def @func_6330() -> Tensor[(2, 9, 13), float64] {
  %217 = @func_3048() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), uint64]) */;
  %217.0
}

def @func_7444() -> (Tensor[(2, 9, 13), float64],) {
  %218 = @func_2730() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %219 = %218.0;
  %220 = cast(%219, dtype="float64") /* ty=Tensor[(2, 9, 13), float64] */;
  %221 = sigmoid(%220) /* ty=Tensor[(2, 9, 13), float64] */;
  (%221,)
}

def @func_3483(%var_3475: Tensor[(216), uint32], %var_3481: Tensor[(50), float32]) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 3, 5), float64], Tensor[(2400), float32], uint32, Tensor[(216), uint32], Tensor[(1, 5, 10), float32], Tensor[(50), float32]) {
  %222 = cast(meta[relay.Constant][19] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %223 = cast(meta[relay.Constant][20] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %224 = cast(%var_3475, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %225 = cast(meta[relay.Constant][19] /* ty=Tensor[(2400), float32] */, dtype="uint32") /* ty=Tensor[(2400), uint32] */;
  %226 = reshape(%222, newshape=[15, 10, 16]) /* ty=Tensor[(15, 10, 16), float32] */;
  %227 = reshape(%223, newshape=[]) /* ty=uint32 */;
  %228 = reshape(%224, newshape=[216]) /* ty=Tensor[(216), uint32] */;
  %229 = reshape(%225, newshape=[15, 10, 16]) /* ty=Tensor[(15, 10, 16), uint32] */;
  %230 = @func_1520(%226, %227, %228, %229) /* ty=(Tensor[(2, 3, 5), float64], uint32, Tensor[(216), uint32], Tensor[(15, 10, 16), bool], Tensor[(3600), uint16]) */;
  %231 = cast(%var_3481, dtype="float32") /* ty=Tensor[(50), float32] */;
  %232 = reshape(%231, newshape=[1, 5, 10]) /* ty=Tensor[(1, 5, 10), float32] */;
  %233 = @func_2182() /* ty=Tensor[(2, 9, 13), float64] */;
  %234 = %230.0;
  %235 = @func_1654(%232) /* ty=Tensor[(1, 5, 10), float32] */;
  (%233, %234, meta[relay.Constant][19] /* ty=Tensor[(2400), float32] */, meta[relay.Constant][20] /* ty=uint32 */, %var_3475, %235, %var_3481)
}

def @func_5478() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], Tensor[(2, 9, 13), float64]) {
  %236 = @func_3048() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), uint64]) */;
  %237 = %236.0;
  %238 = @func_2736() /* ty=Tensor[(2, 9, 13), bool] */;
  %239 = @func_5015() /* ty=Tensor[(2, 9, 13), float64] */;
  (%237, %238, %239)
}

def @func_5869() -> (Tensor[(2, 9, 13), bool],) {
  %240 = @func_2736() /* ty=Tensor[(2, 9, 13), bool] */;
  (%240,)
}

def @func_770(%var_749: Tensor[(14, 7, 4), uint16]) -> (Tensor[(14, 7, 4), uint16], Tensor[(2, 3, 5), float64], Tensor[(30), float64]) {
  %241 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 7, 4), uint16] */, dtype="uint16") /* ty=Tensor[(14, 7, 4), uint16] */;
  %242 = shape_of(%var_749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%var_749, dtype="uint16") /* ty=Tensor[(14, 7, 4), uint16] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %245 = cast(meta[relay.Constant][22] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %246 = reshape(%245, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
  %247 = @func_3(%246) /* ty=(Tensor[(2, 3, 5), float64],) */;
  %248 = bitwise_or(%243, %244) /* ty=Tensor[(14, 7, 4), uint16] */;
  %249 = %247.0;
  (%248, %249, meta[relay.Constant][22] /* ty=Tensor[(30), float64] */)
}

def @func_8070() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
  %250 = @func_4998() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %251 = @func_6330() /* ty=Tensor[(2, 9, 13), float64] */;
  %252 = %250.0;
  (%251, %252)
}

def @func_3323(%var_3298: Tensor[(8, 12, 5), float32]) -> Tensor[(8, 12, 5), float32] {
  %253 = cast(%var_3298, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  atanh(%253) /* ty=Tensor[(8, 12, 5), float32] */
}

def @func_1171(%var_1140: Tensor[(13, 10, 12), int32]) -> (Tensor[(13, 10, 12), int32], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), bool]) {
  %254 = cast(%var_1140, dtype="int32") /* ty=Tensor[(13, 10, 12), int32] */;
  %255 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(13, 10, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 10, 12), int32] */, dtype="int32") /* ty=Tensor[(13, 10, 12), int32] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %258 = cast(%var_1140, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %259 = sin(%258) /* ty=Tensor[(13, 10, 12), float64] */;
  %260 = cast(%259, dtype="float32") /* ty=Tensor[(13, 10, 12), float32] */;
  %261 = sinh(%260) /* ty=Tensor[(13, 10, 12), float32] */;
  %262 = cast(%261, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %263 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%259, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %266 = not_equal(%264, %265) /* ty=Tensor[(13, 10, 12), bool] */;
  %267 = cast(%266, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
  %268 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 10, 12), int32] */, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %269 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%266, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %272 = subtract(%256, %257) /* ty=Tensor[(13, 10, 12), int32] */;
  %273 = sigmoid(%267) /* ty=Tensor[(13, 10, 12), float64] */;
  %274 = less_equal(%270, %271) /* ty=Tensor[(13, 10, 12), bool] */;
  (%272, %273, %274)
}

def @func_2677() -> (Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), float64]) {
  %275 = @func_2281() /* ty=(Tensor[(2, 9, 13), uint64],) */;
  %276 = %275.0;
  %277 = @func_2182() /* ty=Tensor[(2, 9, 13), float64] */;
  (%276, %277)
}

def @func_6832(%var_6801: Tensor[(9, 2, 14), float64], %var_6810: float64, %var_6825: Tensor[(30), float64]) -> (Tensor[(9, 2, 14), float64], Tensor[(16, 1), float64], float64, Tensor[(16), float64], Tensor[(2, 9, 13), float64], Tensor[(1, 10, 3), int16], Tensor[(30), float64], Tensor[(640), float32]) {
  %278 = cast(%var_6801, dtype="float64") /* ty=Tensor[(9, 2, 14), float64] */;
  %279 = cast(%var_6810, dtype="float64") /* ty=float64 */;
  %280 = cast(meta[relay.Constant][24] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %281 = reshape(%279, newshape=[]) /* ty=float64 */;
  %282 = reshape(%280, newshape=[16, 1]) /* ty=Tensor[(16, 1), float64] */;
  %283 = @func_3402(%281, %282) /* ty=(Tensor[(16, 1), float64],) */;
  %284 = @func_2677() /* ty=(Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), float64]) */;
  %285 = cast(%var_6810, dtype="float32") /* ty=float32 */;
  %286 = cast(%var_6825, dtype="float64") /* ty=Tensor[(30), float64] */;
  %287 = cast(meta[relay.Constant][25] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %288 = reshape(%285, newshape=[1, 1, 1]) /* ty=Tensor[(1, 1, 1), float32] */;
  %289 = reshape(%286, newshape=[10, 3]) /* ty=Tensor[(10, 3), float64] */;
  %290 = reshape(%287, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %291 = @func_141(%288, %289, %290) /* ty=(Tensor[(2, 3, 5), float64], Tensor[(2, 3, 5), float64], Tensor[(8, 5, 16), float32], Tensor[(2, 3, 5), float64], Tensor[(1, 10, 3), int16]) */;
  %292 = tan(%278) /* ty=Tensor[(9, 2, 14), float64] */;
  %293 = %283.0;
  %294 = %284.1;
  %295 = %291.4;
  (%292, %293, %var_6810, meta[relay.Constant][24] /* ty=Tensor[(16), float64] */, %294, %295, %var_6825, meta[relay.Constant][25] /* ty=Tensor[(640), float32] */)
}

def @func_3071() -> (Tensor[(2, 9, 13), bool],) {
  %296 = @func_2736() /* ty=Tensor[(2, 9, 13), bool] */;
  (%296,)
}

def @func_8125() -> Tensor[(2, 9, 13), float64] {
  @func_2182() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_3011(%var_3001: Tensor[(12, 5, 1), float64]) -> (Tensor[(12, 5, 1), float64],) {
  %297 = cast(%var_3001, dtype="float64") /* ty=Tensor[(12, 5, 1), float64] */;
  %298 = atan(%297) /* ty=Tensor[(12, 5, 1), float64] */;
  (%298,)
}

def @func_4166() -> (Tensor[(2, 9, 13), float64], Tensor[(30), float64]) {
  %299 = @func_3600() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %300 = @func_3445() /* ty=(Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(2, 9, 13), float32]) */;
  %301 = %299.0;
  %302 = %300.1;
  (%301, %302)
}

def @func_2939(%var_2888: Tensor[(7, 3, 3), int16], %var_2917: Tensor[(1560), int32]) -> (Tensor[(7, 3, 3), int16], Tensor[(13, 10, 12), float64], Tensor[(1560), int32], Tensor[(2, 9, 13), uint64]) {
  %303 = cast(%var_2888, dtype="int16") /* ty=Tensor[(7, 3, 3), int16] */;
  %304 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(7, 3, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 3, 3), int16] */, dtype="int16") /* ty=Tensor[(7, 3, 3), int16] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %307 = cast(%var_2917, dtype="int32") /* ty=Tensor[(1560), int32] */;
  %308 = reshape(%307, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), int32] */;
  %309 = @func_1171(%308) /* ty=(Tensor[(13, 10, 12), int32], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), bool]) */;
  %310 = @func_2281() /* ty=(Tensor[(2, 9, 13), uint64],) */;
  %311 = maximum(%305, %306) /* ty=Tensor[(7, 3, 3), int16] */;
  %312 = %309.1;
  %313 = %310.0;
  (%311, %312, %var_2917, %313)
}

def @func_5072(%var_5059: uint32, %var_5060: Tensor[(216), uint32]) -> (Tensor[(2, 9, 13), float64], uint32, Tensor[(216), uint32], Tensor[(9, 8, 3), float64]) {
  %314 = cast(%var_5059, dtype="uint32") /* ty=uint32 */;
  %315 = cast(%var_5060, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %316 = reshape(%314, newshape=[]) /* ty=uint32 */;
  %317 = reshape(%315, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), uint32] */;
  %318 = @func_672(%316, %317) /* ty=(Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) */;
  %319 = %318.0;
  %320 = cast(%319, dtype="float64") /* ty=Tensor[(9, 8, 3), float64] */;
  %321 = @func_5015() /* ty=Tensor[(2, 9, 13), float64] */;
  %322 = erf(%320) /* ty=Tensor[(9, 8, 3), float64] */;
  (%321, %var_5059, %var_5060, %322)
}

def @func_5341() -> Tensor[(2, 9, 13), float64] {
  %323 = @func_2869() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %323.0
}

def @func_8297(%var_8293: int8) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(1, 4, 14), int8], int8) {
  %324 = @func_3600() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %325 = cast(%var_8293, dtype="int8") /* ty=int8 */;
  %326 = reshape(%325, newshape=[]) /* ty=int8 */;
  %327 = @func_1442(%326) /* ty=(Tensor[(1, 4, 14), int8],) */;
  %328 = @func_3980() /* ty=Tensor[(2, 9, 13), float64] */;
  %329 = %324.0;
  %330 = %327.0;
  (%328, %329, %330, %var_8293)
}

def @func_6949() -> Tensor[(2, 9, 13), float64] {
  @func_3910() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_2736() -> Tensor[(2, 9, 13), bool] {
  %331 = @func_2484() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), bool]) */;
  %331.1
}

def @func_4764() -> (Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), float64], Tensor[(45), uint32], Tensor[(910), float32], Tensor[(3600), uint16]) {
  %332 = @func_3071() /* ty=(Tensor[(2, 9, 13), bool],) */;
  %333 = %332.0;
  %334 = cast(%333, dtype="float32") /* ty=Tensor[(2, 9, 13), float32] */;
  %335 = cast(meta[relay.Constant][27] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %336 = cast(meta[relay.Constant][28] /* ty=Tensor[(3600), uint16] */, dtype="uint16") /* ty=Tensor[(3600), uint16] */;
  %337 = reshape(%335, newshape=[7, 10, 13]) /* ty=Tensor[(7, 10, 13), float32] */;
  %338 = reshape(%336, newshape=[10, 360]) /* ty=Tensor[(10, 360), uint16] */;
  %339 = @func_896(%337, %338) /* ty=(Tensor[(9, 5), bool], Tensor[(45), uint32], Tensor[(7, 10, 13), int64], Tensor[(16, 15, 15), float64], Tensor[(10, 360), float64]) */;
  %340 = rsqrt(%334) /* ty=Tensor[(2, 9, 13), float32] */;
  %341 = @func_4026() /* ty=Tensor[(2, 9, 13), float64] */;
  %342 = %339.1;
  (%340, %341, %342, meta[relay.Constant][27] /* ty=Tensor[(910), float32] */, meta[relay.Constant][28] /* ty=Tensor[(3600), uint16] */)
}

def @func_4986(%var_4956: Tensor[(378), int8], %var_4979: Tensor[(378), int8]) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], int8, Tensor[(378), uint64]) {
  %343 = @func_2389() /* ty=Tensor[(2, 9, 13), float64] */;
  %344 = cast(%343, dtype="uint64") /* ty=Tensor[(2, 9, 13), uint64] */;
  %345 = reshape(%344, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), uint64] */;
  %346 = cast(%var_4956, dtype="int8") /* ty=Tensor[(378), int8] */;
  %347 = reshape(%346, newshape=[378]) /* ty=Tensor[(378), int8] */;
  %348 = @func_4100(%347) /* ty=(Tensor[(2, 9, 13), float64], int8, Tensor[(378), int8], Tensor[(2, 9, 13), float32], Tensor[(8, 12, 5), float32], Tensor[(480), float32], Tensor[(2, 9, 13), uint64]) */;
  %349 = cast(%var_4979, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %350 = shape_of(%var_4956, dtype="int32") /* ty=Tensor[(1), int32] */;
  %351 = cast(%var_4956, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %353 = @func_2313(%345) /* ty=Tensor[(2, 9, 13), bool] */;
  %354 = %348.1;
  %355 = add(%351, %352) /* ty=Tensor[(378), uint64] */;
  (%343, %353, %354, %355)
}

def @func_2389() -> Tensor[(2, 9, 13), float64] {
  @func_2182() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_4856(%var_4852: Tensor[(576), uint32], %var_4853: Tensor[(352), int8]) -> (Tensor[(2, 9, 13), float64], Tensor[(4, 4), float64], Tensor[(576), uint32], Tensor[(352), int8], Tensor[(560), int8]) {
  %356 = cast(%var_4852, dtype="uint32") /* ty=Tensor[(576), uint32] */;
  %357 = cast(%var_4852, dtype="uint32") /* ty=Tensor[(576), uint32] */;
  %358 = cast(%var_4853, dtype="int8") /* ty=Tensor[(352), int8] */;
  %359 = cast(meta[relay.Constant][29] /* ty=Tensor[(560), int8] */, dtype="int8") /* ty=Tensor[(560), int8] */;
  %360 = reshape(%356, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint32] */;
  %361 = reshape(%357, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint32] */;
  %362 = reshape(%358, newshape=[352]) /* ty=Tensor[(352), int8] */;
  %363 = reshape(%359, newshape=[560]) /* ty=Tensor[(560), int8] */;
  %364 = @func_3837(%360, %361, %362, %363) /* ty=(Tensor[(4, 12, 12), bool], Tensor[(2, 9, 13), float64], Tensor[(88), int8], Tensor[(8, 11, 4), float32], Tensor[(4, 12, 12), float32], Tensor[(352), float64], Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), uint64], Tensor[(4, 12, 12), bool], Tensor[(560), int8], Tensor[(2, 9, 13), float64], Tensor[(14, 4, 910), uint64], Tensor[(16, 1), float64], Tensor[(4, 4), float64]) */;
  %365 = @func_3910() /* ty=Tensor[(2, 9, 13), float64] */;
  %366 = %364.13;
  (%365, %366, %var_4852, %var_4853, meta[relay.Constant][29] /* ty=Tensor[(560), int8] */)
}

def @func_6716() -> Tensor[(2, 9, 13), float64] {
  @func_3980() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_7135() -> Tensor[(2, 9, 13), bool] {
  %367 = @func_3071() /* ty=(Tensor[(2, 9, 13), bool],) */;
  %367.0
}

def @func_2241(%var_2214: Tensor[(126, 3), int8]) -> (Tensor[(2, 9, 13), float64], Tensor[(50), float32], int8, Tensor[(126, 3), int8]) {
  %368 = cast(meta[relay.Constant][30] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %369 = cast(%var_2214, dtype="int8") /* ty=Tensor[(126, 3), int8] */;
  %370 = reshape(%368, newshape=[]) /* ty=int8 */;
  %371 = reshape(%369, newshape=[9, 6, 7]) /* ty=Tensor[(9, 6, 7), int8] */;
  %372 = @func_1746(%370, %371) /* ty=(Tensor[(9, 6, 7), bool], Tensor[(1, 5, 10), float32], Tensor[(50), float32]) */;
  %373 = @func_2182() /* ty=Tensor[(2, 9, 13), float64] */;
  %374 = %372.2;
  (%373, %374, meta[relay.Constant][30] /* ty=int8 */, %var_2214)
}

def @func_3980() -> Tensor[(2, 9, 13), float64] {
  %375 = @func_2984() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */;
  %375.1
}

def @func_672(%var_642: uint32, %var_643: Tensor[(9, 8, 3), uint32]) -> (Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) {
  %376 = cast(%var_642, dtype="uint32") /* ty=uint32 */;
  %377 = cast(%var_643, dtype="uint32") /* ty=Tensor[(9, 8, 3), uint32] */;
  %378 = cast(meta[relay.Constant][31] /* ty=Tensor[(3600), uint16] */, dtype="uint16") /* ty=Tensor[(3600), uint16] */;
  %379 = cast(meta[relay.Constant][31] /* ty=Tensor[(3600), uint16] */, dtype="uint16") /* ty=Tensor[(3600), uint16] */;
  %380 = reshape(%378, newshape=[16, 15, 15]) /* ty=Tensor[(16, 15, 15), uint16] */;
  %381 = reshape(%379, newshape=[16, 15, 15]) /* ty=Tensor[(16, 15, 15), uint16] */;
  %382 = @func_177(%380, %381) /* ty=(Tensor[(16, 15, 15), bool], Tensor[(16, 15, 15), float64], Tensor[(2, 3, 5), float64], Tensor[(5, 6), float64], Tensor[(2, 3, 5), float64], Tensor[(2, 3, 5), float64]) */;
  %383 = %382.4;
  %384 = cast(%383, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
  %385 = bitwise_and(%376, %377) /* ty=Tensor[(9, 8, 3), uint32] */;
  %386 = asin(%384) /* ty=Tensor[(2, 3, 5), float64] */;
  (%385, meta[relay.Constant][31] /* ty=Tensor[(3600), uint16] */, %386)
}

def @func_7682() -> Tensor[(2, 9, 13), float64] {
  @func_3980() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_8006() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), bool]) {
  %387 = @func_2677() /* ty=(Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), float64]) */;
  %388 = @func_6540() /* ty=Tensor[(2, 9, 13), float64] */;
  %389 = %387.0;
  %390 = @func_4655() /* ty=Tensor[(2, 9, 13), bool] */;
  (%388, %389, %390)
}

def @func_1442(%var_1430: int8) -> (Tensor[(1, 4, 14), int8],) {
  %391 = cast(%var_1430, dtype="int8") /* ty=int8 */;
  %392 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 4, 14), int8] */, dtype="int8") /* ty=Tensor[(1, 4, 14), int8] */;
  %393 = add(%391, %392) /* ty=Tensor[(1, 4, 14), int8] */;
  (%393,)
}

def @func_896(%var_852: Tensor[(7, 10, 13), float32], %var_875: Tensor[(10, 360), uint16]) -> (Tensor[(9, 5), bool], Tensor[(45), uint32], Tensor[(7, 10, 13), int64], Tensor[(16, 15, 15), float64], Tensor[(10, 360), float64]) {
  %394 = cast(meta[relay.Constant][33] /* ty=Tensor[(45), uint32] */, dtype="uint32") /* ty=Tensor[(45), uint32] */;
  %395 = cast(meta[relay.Constant][33] /* ty=Tensor[(45), uint32] */, dtype="uint32") /* ty=Tensor[(45), uint32] */;
  %396 = reshape(%394, newshape=[9, 5]) /* ty=Tensor[(9, 5), uint32] */;
  %397 = reshape(%395, newshape=[9, 5]) /* ty=Tensor[(9, 5), uint32] */;
  %398 = @func_836(%396, %397) /* ty=(Tensor[(9, 5), bool],) */;
  %399 = cast(%var_852, dtype="float32") /* ty=Tensor[(7, 10, 13), float32] */;
  %400 = sqrt(%399) /* ty=Tensor[(7, 10, 13), float32] */;
  %401 = cast(%400, dtype="int64") /* ty=Tensor[(7, 10, 13), int64] */;
  %402 = shape_of(%var_852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%var_852, dtype="int64") /* ty=Tensor[(7, 10, 13), int64] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %405 = cast(%var_875, dtype="uint16") /* ty=Tensor[(10, 360), uint16] */;
  %406 = cast(%var_875, dtype="uint16") /* ty=Tensor[(10, 360), uint16] */;
  %407 = reshape(%405, newshape=[16, 15, 15]) /* ty=Tensor[(16, 15, 15), uint16] */;
  %408 = reshape(%406, newshape=[16, 15, 15]) /* ty=Tensor[(16, 15, 15), uint16] */;
  %409 = @func_177(%407, %408) /* ty=(Tensor[(16, 15, 15), bool], Tensor[(16, 15, 15), float64], Tensor[(2, 3, 5), float64], Tensor[(5, 6), float64], Tensor[(2, 3, 5), float64], Tensor[(2, 3, 5), float64]) */;
  %410 = cast(%var_875, dtype="float64") /* ty=Tensor[(10, 360), float64] */;
  %411 = %398.0;
  %412 = maximum(%403, %404) /* ty=Tensor[(7, 10, 13), int64] */;
  %413 = %409.1;
  %414 = log10(%410) /* ty=Tensor[(10, 360), float64] */;
  (%411, meta[relay.Constant][33] /* ty=Tensor[(45), uint32] */, %412, %413, %414)
}

def @func_6408(%var_6367: Tensor[(3, 60), float32], %var_6384: Tensor[(480), float32]) -> (Tensor[(2, 9, 13), float64], Tensor[(9, 2, 10), float32], Tensor[(3, 60), float32], Tensor[(2, 9, 13), float64], Tensor[(8, 12, 5), float32], Tensor[(480), float32]) {
  %415 = cast(%var_6367, dtype="float32") /* ty=Tensor[(3, 60), float32] */;
  %416 = reshape(%415, newshape=[9, 2, 10]) /* ty=Tensor[(9, 2, 10), float32] */;
  %417 = @func_5928(%416) /* ty=(Tensor[(9, 2, 10), float32], Tensor[(2, 3, 5), float64], uint32, Tensor[(216), uint32]) */;
  %418 = cast(%var_6367, dtype="float32") /* ty=Tensor[(3, 60), float32] */;
  %419 = cast(%var_6384, dtype="float32") /* ty=Tensor[(480), float32] */;
  %420 = reshape(%419, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %421 = @func_2814() /* ty=Tensor[(2, 9, 13), float64] */;
  %422 = %417.0;
  %423 = log10(%418) /* ty=Tensor[(3, 60), float32] */;
  %424 = @func_5015() /* ty=Tensor[(2, 9, 13), float64] */;
  %425 = @func_3323(%420) /* ty=Tensor[(8, 12, 5), float32] */;
  (%421, %422, %423, %424, %425, %var_6384)
}

def @func_5624() -> Tensor[(2, 9, 13), float64] {
  @func_5015() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_4934() -> (Tensor[(2, 9, 13), float32], Tensor[(9, 8, 3), uint32], uint32, Tensor[(2, 108), float32]) {
  %426 = @func_2484() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), bool]) */;
  %427 = cast(meta[relay.Constant][34] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %428 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 108), uint32] */, dtype="uint32") /* ty=Tensor[(2, 108), uint32] */;
  %429 = reshape(%427, newshape=[]) /* ty=uint32 */;
  %430 = reshape(%428, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), uint32] */;
  %431 = @func_672(%429, %430) /* ty=(Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) */;
  %432 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 108), uint32] */, dtype="float32") /* ty=Tensor[(2, 108), float32] */;
  %433 = %426.0;
  %434 = %431.0;
  %435 = cos(%432) /* ty=Tensor[(2, 108), float32] */;
  (%433, %434, meta[relay.Constant][34] /* ty=uint32 */, %435)
}

def @func_8220() -> (Tensor[(2, 9, 13), uint64],) {
  %436 = @func_3048() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), uint64]) */;
  %437 = %436.1;
  (%437,)
}

def @func_5369() -> (Tensor[(2, 9, 13), float64],) {
  %438 = @func_4166() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(30), float64]) */;
  %439 = %438.0;
  (%439,)
}

def @func_7622() -> (Tensor[(2, 9, 13), bool],) {
  %440 = @func_7135() /* ty=Tensor[(2, 9, 13), bool] */;
  (%440,)
}

def @func_836(%var_829: Tensor[(9, 5), uint32], %var_830: Tensor[(9, 5), uint32]) -> (Tensor[(9, 5), bool],) {
  %441 = cast(%var_830, dtype="bool") /* ty=Tensor[(9, 5), bool] */;
  %442 = shape_of(%var_829, dtype="int32") /* ty=Tensor[(2), int32] */;
  %443 = cast(%var_829, dtype="bool") /* ty=Tensor[(9, 5), bool] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %445 = not_equal(%443, %444) /* ty=Tensor[(9, 5), bool] */;
  (%445,)
}

def @func_2984() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
  %446 = @func_2814() /* ty=Tensor[(2, 9, 13), float64] */;
  %447 = cast(%446, dtype="float64") /* ty=Tensor[(2, 9, 13), float64] */;
  %448 = @func_2182() /* ty=Tensor[(2, 9, 13), float64] */;
  %449 = @func_2182() /* ty=Tensor[(2, 9, 13), float64] */;
  %450 = asinh(%447) /* ty=Tensor[(2, 9, 13), float64] */;
  (%448, %449, %450)
}

def @func_7109() -> Tensor[(2, 9, 13), float64] {
  @func_5015() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_3837(%var_3703: Tensor[(4, 12, 12), uint32], %var_3704: Tensor[(4, 12, 12), uint32], %var_3726: Tensor[(352), int8], %var_3810: Tensor[(560), int8]) -> (Tensor[(4, 12, 12), bool], Tensor[(2, 9, 13), float64], Tensor[(88), int8], Tensor[(8, 11, 4), float32], Tensor[(4, 12, 12), float32], Tensor[(352), float64], Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), uint64], Tensor[(4, 12, 12), bool], Tensor[(560), int8], Tensor[(2, 9, 13), float64], Tensor[(14, 4, 910), uint64], Tensor[(16, 1), float64], Tensor[(4, 4), float64]) {
  %451 = cast(%var_3704, dtype="bool") /* ty=Tensor[(4, 12, 12), bool] */;
  %452 = shape_of(%var_3703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%var_3703, dtype="bool") /* ty=Tensor[(4, 12, 12), bool] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %455 = @func_2869() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %456 = cast(meta[relay.Constant][36] /* ty=Tensor[(88), int8] */, dtype="int8") /* ty=Tensor[(88), int8] */;
  %457 = cast(%var_3726, dtype="int8") /* ty=Tensor[(352), int8] */;
  %458 = cast(meta[relay.Constant][37] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %459 = reshape(%456, newshape=[8, 11, 1]) /* ty=Tensor[(8, 11, 1), int8] */;
  %460 = reshape(%457, newshape=[8, 11, 4]) /* ty=Tensor[(8, 11, 4), int8] */;
  %461 = reshape(%458, newshape=[]) /* ty=int8 */;
  %462 = @func_2650(%459, %460, %461) /* ty=(Tensor[(8, 11, 4), int8], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(8, 11, 4), float64], Tensor[(50), float32], int8, Tensor[(378), int8]) */;
  %463 = %462.3;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(8, 11, 4), float32] */;
  %465 = cast(meta[relay.Constant][37] /* ty=int8 */, dtype="float32") /* ty=float32 */;
  %466 = cast(meta[relay.Constant][37] /* ty=int8 */, dtype="float32") /* ty=float32 */;
  %467 = cast(%var_3703, dtype="float32") /* ty=Tensor[(4, 12, 12), float32] */;
  %468 = cast(%var_3726, dtype="float64") /* ty=Tensor[(352), float64] */;
  %469 = @func_2281() /* ty=(Tensor[(2, 9, 13), uint64],) */;
  %470 = @func_3048() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), uint64]) */;
  %471 = cast(%var_3703, dtype="bool") /* ty=Tensor[(4, 12, 12), bool] */;
  %472 = cast(meta[relay.Constant][37] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %473 = cast(%var_3810, dtype="int8") /* ty=Tensor[(560), int8] */;
  %474 = reshape(%473, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), int8] */;
  %475 = @func_1039(%474) /* ty=(Tensor[(14, 4, 10), int8], Tensor[(2, 3, 5), float64], Tensor[(5, 6), float64], Tensor[(10, 360), float64], Tensor[(3600, 1), uint16], Tensor[(14, 4, 910), float64]) */;
  %476 = %475.5;
  %477 = cast(%476, dtype="uint64") /* ty=Tensor[(14, 4, 910), uint64] */;
  %478 = cast(meta[relay.Constant][37] /* ty=int8 */, dtype="uint64") /* ty=uint64 */;
  %479 = cast(meta[relay.Constant][37] /* ty=int8 */, dtype="float64") /* ty=float64 */;
  %480 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 4), float64] */, dtype="float64") /* ty=Tensor[(4, 4), float64] */;
  %481 = reshape(%479, newshape=[]) /* ty=float64 */;
  %482 = reshape(%480, newshape=[16, 1]) /* ty=Tensor[(16, 1), float64] */;
  %483 = @func_3402(%481, %482) /* ty=(Tensor[(16, 1), float64],) */;
  %484 = greater_equal(%453, %454) /* ty=Tensor[(4, 12, 12), bool] */;
  %485 = %455.0;
  %486 = divide(%464, %465) /* ty=Tensor[(8, 11, 4), float32] */;
  %487 = maximum(%466, %467) /* ty=Tensor[(4, 12, 12), float32] */;
  %488 = sqrt(%468) /* ty=Tensor[(352), float64] */;
  %489 = %469.0;
  %490 = %470.1;
  %491 = less(%471, %472) /* ty=Tensor[(4, 12, 12), bool] */;
  %492 = @func_3245() /* ty=Tensor[(2, 9, 13), float64] */;
  %493 = bitwise_or(%477, %478) /* ty=Tensor[(14, 4, 910), uint64] */;
  %494 = %483.0;
  (%484, %485, meta[relay.Constant][36] /* ty=Tensor[(88), int8] */, %486, %487, %488, %489, %490, %491, %var_3810, %492, %493, %494, meta[relay.Constant][38] /* ty=Tensor[(4, 4), float64] */)
}

def @func_141(%var_105: Tensor[(1, 1, 1), float32], %var_112: Tensor[(10, 3), float64], %var_122: Tensor[(8, 5, 16), float32]) -> (Tensor[(2, 3, 5), float64], Tensor[(2, 3, 5), float64], Tensor[(8, 5, 16), float32], Tensor[(2, 3, 5), float64], Tensor[(1, 10, 3), int16]) {
  %495 = cast(%var_112, dtype="float64") /* ty=Tensor[(10, 3), float64] */;
  %496 = reshape(%495, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
  %497 = @func_3(%496) /* ty=(Tensor[(2, 3, 5), float64],) */;
  %498 = %497.0;
  %499 = cast(%498, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
  %500 = reshape(%499, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
  %501 = @func_3(%500) /* ty=(Tensor[(2, 3, 5), float64],) */;
  %502 = cast(%var_105, dtype="float32") /* ty=Tensor[(1, 1, 1), float32] */;
  %503 = sqrt(%502) /* ty=Tensor[(1, 1, 1), float32] */;
  %504 = cast(%503, dtype="float32") /* ty=Tensor[(1, 1, 1), float32] */;
  %505 = cast(%var_122, dtype="float32") /* ty=Tensor[(8, 5, 16), float32] */;
  %506 = cast(%498, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
  %507 = reshape(%506, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
  %508 = @func_3(%507) /* ty=(Tensor[(2, 3, 5), float64],) */;
  %509 = cast(%var_112, dtype="int16") /* ty=Tensor[(10, 3), int16] */;
  %510 = cast(%503, dtype="int16") /* ty=Tensor[(1, 1, 1), int16] */;
  %511 = %501.0;
  %512 = maximum(%504, %505) /* ty=Tensor[(8, 5, 16), float32] */;
  %513 = %508.0;
  %514 = bitwise_xor(%509, %510) /* ty=Tensor[(1, 10, 3), int16] */;
  (%498, %511, %512, %513, %514)
}

def @func_7387() -> (Tensor[(9, 8, 3), int8], Tensor[(2, 9, 13), bool]) {
  %515 = @func_4934() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(9, 8, 3), uint32], uint32, Tensor[(2, 108), float32]) */;
  %516 = %515.1;
  %517 = cast(meta[relay.Constant][39] /* ty=Tensor[(9, 8, 3), uint32] */, dtype="int8") /* ty=Tensor[(9, 8, 3), int8] */;
  %518 = shape_of(%516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%516, dtype="int8") /* ty=Tensor[(9, 8, 3), int8] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %521 = @func_2484() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), bool]) */;
  %522 = logical_xor(%519, %520) /* ty=Tensor[(9, 8, 3), int8] */;
  %523 = %521.1;
  (%522, %523)
}

def @func_5807(%var_5800: Tensor[(60), float64]) -> (Tensor[(2, 9, 13), float32], Tensor[(12, 5, 1), float64], Tensor[(60), float64], Tensor[(2, 9, 13), float64]) {
  %524 = @func_4036() /* ty=Tensor[(2, 9, 13), float64] */;
  %525 = cast(%524, dtype="float32") /* ty=Tensor[(2, 9, 13), float32] */;
  %526 = cast(%var_5800, dtype="float64") /* ty=Tensor[(60), float64] */;
  %527 = reshape(%526, newshape=[12, 5, 1]) /* ty=Tensor[(12, 5, 1), float64] */;
  %528 = @func_3011(%527) /* ty=(Tensor[(12, 5, 1), float64],) */;
  %529 = exp(%525) /* ty=Tensor[(2, 9, 13), float32] */;
  %530 = %528.0;
  %531 = @func_2814() /* ty=Tensor[(2, 9, 13), float64] */;
  (%529, %530, %var_5800, %531)
}

def @func_7535() -> (Tensor[(2, 9, 13), bool], Tensor[(12, 3, 1), int64], int64, Tensor[(36), int64], Tensor[(468), int64], Tensor[(2, 9, 13), float64]) {
  %532 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %533 = cast(meta[relay.Constant][40] /* ty=Tensor[(36), int64] */, dtype="int64") /* ty=Tensor[(36), int64] */;
  %534 = cast(meta[relay.Constant][41] /* ty=Tensor[(468), int64] */, dtype="int64") /* ty=Tensor[(468), int64] */;
  %535 = reshape(%532, newshape=[]) /* ty=int64 */;
  %536 = reshape(%533, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), int64] */;
  %537 = reshape(%534, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), int64] */;
  %538 = @func_4383(%535, %536, %537) /* ty=(Tensor[(12, 3, 1), int64], Tensor[(2, 9, 13), bool], Tensor[(12, 3, 13), float32], Tensor[(2, 9, 13), float32]) */;
  %539 = @func_6609() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %540 = @func_2736() /* ty=Tensor[(2, 9, 13), bool] */;
  %541 = %538.0;
  %542 = %539.0;
  (%540, %541, 7 /* ty=int64 */, meta[relay.Constant][40] /* ty=Tensor[(36), int64] */, meta[relay.Constant][41] /* ty=Tensor[(468), int64] */, %542)
}

def @func_2313(%var_2294: Tensor[(2, 9, 13), uint64]) -> Tensor[(2, 9, 13), bool] {
  %543 = @func_2281() /* ty=(Tensor[(2, 9, 13), uint64],) */;
  %544 = %543.0;
  %545 = cast(%var_2294, dtype="bool") /* ty=Tensor[(2, 9, 13), bool] */;
  %546 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%544, dtype="bool") /* ty=Tensor[(2, 9, 13), bool] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%547, %548) /* ty=Tensor[(2, 9, 13), bool] */
}

def @func_7509(%var_7464: Tensor[(4, 13, 5), int64], %var_7465: Tensor[(4, 13, 5), int64], %var_7488: Tensor[(234), uint64]) -> (Tensor[(4, 13, 5), int64], Tensor[(2, 9, 13), bool], Tensor[(234), uint64], Tensor[(4, 13, 5), bool]) {
  %549 = cast(%var_7465, dtype="int64") /* ty=Tensor[(4, 13, 5), int64] */;
  %550 = shape_of(%var_7464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%var_7464, dtype="int64") /* ty=Tensor[(4, 13, 5), int64] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %553 = cast(%var_7488, dtype="uint64") /* ty=Tensor[(234), uint64] */;
  %554 = reshape(%553, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), uint64] */;
  %555 = cast(%var_7464, dtype="bool") /* ty=Tensor[(4, 13, 5), bool] */;
  %556 = shape_of(%var_7465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%var_7465, dtype="bool") /* ty=Tensor[(4, 13, 5), bool] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %559 = minimum(%551, %552) /* ty=Tensor[(4, 13, 5), int64] */;
  %560 = @func_2313(%554) /* ty=Tensor[(2, 9, 13), bool] */;
  %561 = greater(%557, %558) /* ty=Tensor[(4, 13, 5), bool] */;
  (%559, %560, %var_7488, %561)
}

def @func_6886(%var_6842: Tensor[(10, 9, 5), float32]) -> (Tensor[(10, 9, 5), float32], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
  %562 = cast(%var_6842, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
  %563 = @func_3600() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %564 = @func_5369() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %565 = atanh(%562) /* ty=Tensor[(10, 9, 5), float32] */;
  %566 = %563.0;
  %567 = %564.0;
  (%565, %566, %567)
}

def @func_4442() -> Tensor[(2, 9, 13), float64] {
  %568 = @func_3600() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %568.0
}

def @func_7583(%var_7558: Tensor[(150, 3), float32], %var_7572: Tensor[(150, 3), float32]) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(150, 3), uint16]) {
  %569 = cast(%var_7558, dtype="float32") /* ty=Tensor[(150, 3), float32] */;
  %570 = reshape(%569, newshape=[10, 9, 5]) /* ty=Tensor[(10, 9, 5), float32] */;
  %571 = @func_6886(%570) /* ty=(Tensor[(10, 9, 5), float32], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */;
  %572 = cast(%var_7572, dtype="uint16") /* ty=Tensor[(150, 3), uint16] */;
  %573 = shape_of(%var_7558, dtype="int32") /* ty=Tensor[(2), int32] */;
  %574 = cast(%var_7558, dtype="uint16") /* ty=Tensor[(150, 3), uint16] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %576 = @func_4216() /* ty=Tensor[(2, 9, 13), float64] */;
  %577 = %571.2;
  %578 = maximum(%574, %575) /* ty=Tensor[(150, 3), uint16] */;
  (%576, %577, %578)
}

def @func_2165() -> (Tensor[(2, 9, 13), float64],) {
  %579 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 1, 13), float64] */, dtype="float64") /* ty=Tensor[(2, 1, 13), float64] */;
  %580 = cast(meta[relay.Constant][43] /* ty=Tensor[(2, 9, 13), float64] */, dtype="float64") /* ty=Tensor[(2, 9, 13), float64] */;
  %581 = power(%579, %580) /* ty=Tensor[(2, 9, 13), float64] */;
  %582 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 1, 13), float64] */, dtype="float64") /* ty=Tensor[(2, 1, 13), float64] */;
  %583 = cast(%581, dtype="float64") /* ty=Tensor[(2, 9, 13), float64] */;
  %584 = subtract(%582, %583) /* ty=Tensor[(2, 9, 13), float64] */;
  (%584,)
}

def @func_2650(%var_2584: Tensor[(8, 11, 1), int8], %var_2585: Tensor[(8, 11, 4), int8], %var_2628: int8) -> (Tensor[(8, 11, 4), int8], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(8, 11, 4), float64], Tensor[(50), float32], int8, Tensor[(378), int8]) {
  %585 = cast(%var_2584, dtype="int8") /* ty=Tensor[(8, 11, 1), int8] */;
  %586 = cast(%var_2585, dtype="int8") /* ty=Tensor[(8, 11, 4), int8] */;
  %587 = @func_2165() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %588 = cast(%var_2585, dtype="float64") /* ty=Tensor[(8, 11, 4), float64] */;
  %589 = cosh(%588) /* ty=Tensor[(8, 11, 4), float64] */;
  %590 = cast(%589, dtype="float64") /* ty=Tensor[(8, 11, 4), float64] */;
  %591 = cast(%var_2628, dtype="int8") /* ty=int8 */;
  %592 = cast(meta[relay.Constant][44] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
  %593 = reshape(%591, newshape=[]) /* ty=int8 */;
  %594 = reshape(%592, newshape=[9, 6, 7]) /* ty=Tensor[(9, 6, 7), int8] */;
  %595 = @func_1746(%593, %594) /* ty=(Tensor[(9, 6, 7), bool], Tensor[(1, 5, 10), float32], Tensor[(50), float32]) */;
  %596 = logical_xor(%585, %586) /* ty=Tensor[(8, 11, 4), int8] */;
  %597 = @func_2389() /* ty=Tensor[(2, 9, 13), float64] */;
  %598 = %587.0;
  %599 = sqrt(%590) /* ty=Tensor[(8, 11, 4), float64] */;
  %600 = %595.2;
  (%596, %597, %598, %599, %600, %var_2628, meta[relay.Constant][44] /* ty=Tensor[(378), int8] */)
}

def @func_3884(%var_3868: Tensor[(216), uint32], %var_3872: Tensor[(60), float64]) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(3600), uint16], uint32, Tensor[(216), uint32], Tensor[(12, 5, 1), float64], Tensor[(60), float64]) {
  %601 = cast(meta[relay.Constant][45] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %602 = reshape(%601, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
  %603 = @func_3(%602) /* ty=(Tensor[(2, 3, 5), float64],) */;
  %604 = cast(meta[relay.Constant][46] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %605 = cast(%var_3868, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %606 = reshape(%604, newshape=[]) /* ty=uint32 */;
  %607 = reshape(%605, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), uint32] */;
  %608 = @func_672(%606, %607) /* ty=(Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) */;
  %609 = cast(%var_3872, dtype="float64") /* ty=Tensor[(60), float64] */;
  %610 = reshape(%609, newshape=[12, 5, 1]) /* ty=Tensor[(12, 5, 1), float64] */;
  %611 = @func_3011(%610) /* ty=(Tensor[(12, 5, 1), float64],) */;
  %612 = @func_3245() /* ty=Tensor[(2, 9, 13), float64] */;
  %613 = %603.0;
  %614 = %608.1;
  %615 = %611.0;
  (%612, %613, meta[relay.Constant][45] /* ty=Tensor[(30), float64] */, %614, meta[relay.Constant][46] /* ty=uint32 */, %var_3868, %615, %var_3872)
}

def @func_4280() -> (Tensor[(2, 9, 13), float64],) {
  %616 = @func_2984() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */;
  %617 = %616.2;
  (%617,)
}

def @func_1654(%var_1650: Tensor[(1, 5, 10), float32]) -> Tensor[(1, 5, 10), float32] {
  %618 = cast(%var_1650, dtype="float32") /* ty=Tensor[(1, 5, 10), float32] */;
  sinh(%618) /* ty=Tensor[(1, 5, 10), float32] */
}

def @func_2784() -> (Tensor[(2, 9, 13), float64], Tensor[(1, 4, 14), int8], int8) {
  %619 = cast(meta[relay.Constant][47] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %620 = reshape(%619, newshape=[]) /* ty=int8 */;
  %621 = @func_1442(%620) /* ty=(Tensor[(1, 4, 14), int8],) */;
  %622 = @func_2389() /* ty=Tensor[(2, 9, 13), float64] */;
  %623 = %621.0;
  (%622, %623, meta[relay.Constant][47] /* ty=int8 */)
}

def @func_3048() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), uint64]) {
  %624 = @func_2281() /* ty=(Tensor[(2, 9, 13), uint64],) */;
  %625 = @func_2814() /* ty=Tensor[(2, 9, 13), float64] */;
  %626 = %624.0;
  (%625, %626)
}

def @func_2484() -> (Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), bool]) {
  %627 = @func_2389() /* ty=Tensor[(2, 9, 13), float64] */;
  %628 = cast(%627, dtype="float32") /* ty=Tensor[(2, 9, 13), float32] */;
  %629 = cast(%627, dtype="uint64") /* ty=Tensor[(2, 9, 13), uint64] */;
  %630 = reshape(%629, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), uint64] */;
  %631 = log10(%628) /* ty=Tensor[(2, 9, 13), float32] */;
  %632 = @func_2313(%630) /* ty=Tensor[(2, 9, 13), bool] */;
  (%631, %632)
}

def @func_2869() -> (Tensor[(2, 9, 13), float64],) {
  %633 = @func_2165() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %634 = %633.0;
  (%634,)
}

def @func_3179() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], int8) {
  %635 = @func_2984() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */;
  %636 = %635.1;
  %637 = cast(%636, dtype="uint64") /* ty=Tensor[(2, 9, 13), uint64] */;
  %638 = reshape(%637, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), uint64] */;
  %639 = @func_2784() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(1, 4, 14), int8], int8) */;
  %640 = @func_2313(%638) /* ty=Tensor[(2, 9, 13), bool] */;
  %641 = %639.2;
  (%636, %640, %641)
}

def @func_5145(%var_5120: Tensor[(13, 1, 5), float32]) -> (Tensor[(13, 1, 5), float64], Tensor[(2, 9, 13), float64], Tensor[(13, 10, 12), float64], Tensor[(1560), int32]) {
  %642 = cast(%var_5120, dtype="float32") /* ty=Tensor[(13, 1, 5), float32] */;
  %643 = asinh(%642) /* ty=Tensor[(13, 1, 5), float32] */;
  %644 = cast(%643, dtype="float64") /* ty=Tensor[(13, 1, 5), float64] */;
  %645 = @func_2730() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %646 = cast(meta[relay.Constant][48] /* ty=Tensor[(1560), int32] */, dtype="int32") /* ty=Tensor[(1560), int32] */;
  %647 = reshape(%646, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), int32] */;
  %648 = @func_1171(%647) /* ty=(Tensor[(13, 10, 12), int32], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), bool]) */;
  %649 = sqrt(%644) /* ty=Tensor[(13, 1, 5), float64] */;
  %650 = %645.0;
  %651 = %648.1;
  (%649, %650, %651, meta[relay.Constant][48] /* ty=Tensor[(1560), int32] */)
}

def @func_1746(%var_1728: int8, %var_1729: Tensor[(9, 6, 7), int8]) -> (Tensor[(9, 6, 7), bool], Tensor[(1, 5, 10), float32], Tensor[(50), float32]) {
  %652 = cast(%var_1728, dtype="bool") /* ty=bool */;
  %653 = cast(%var_1729, dtype="bool") /* ty=Tensor[(9, 6, 7), bool] */;
  %654 = cast(meta[relay.Constant][49] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %655 = reshape(%654, newshape=[1, 5, 10]) /* ty=Tensor[(1, 5, 10), float32] */;
  %656 = greater(%652, %653) /* ty=Tensor[(9, 6, 7), bool] */;
  %657 = @func_1654(%655) /* ty=Tensor[(1, 5, 10), float32] */;
  (%656, %657, meta[relay.Constant][49] /* ty=Tensor[(50), float32] */)
}

def @func_8260() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
  %658 = @func_4166() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(30), float64]) */;
  %659 = %658.0;
  %660 = @func_5624() /* ty=Tensor[(2, 9, 13), float64] */;
  (%659, %660)
}

def @func_6002() -> (Tensor[(2, 9, 13), float64], Tensor[(4, 4), float64], Tensor[(576), uint32], Tensor[(352), int8]) {
  %661 = @func_2677() /* ty=(Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), float64]) */;
  %662 = cast(meta[relay.Constant][50] /* ty=Tensor[(576), uint32] */, dtype="uint32") /* ty=Tensor[(576), uint32] */;
  %663 = cast(meta[relay.Constant][51] /* ty=Tensor[(352), int8] */, dtype="int8") /* ty=Tensor[(352), int8] */;
  %664 = reshape(%662, newshape=[576]) /* ty=Tensor[(576), uint32] */;
  %665 = reshape(%663, newshape=[352]) /* ty=Tensor[(352), int8] */;
  %666 = @func_4856(%664, %665) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(4, 4), float64], Tensor[(576), uint32], Tensor[(352), int8], Tensor[(560), int8]) */;
  %667 = %661.1;
  %668 = %666.1;
  (%667, %668, meta[relay.Constant][50] /* ty=Tensor[(576), uint32] */, meta[relay.Constant][51] /* ty=Tensor[(352), int8] */)
}

def @func_7879(%var_7792: Tensor[(8, 12, 3), float32], %var_7848: Tensor[(8, 12, 3), float32]) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(8, 12, 3), float64], Tensor[(8, 12, 3), float32], Tensor[(8, 12, 3), uint32], Tensor[(8, 12, 3), float64], Tensor[(2, 9, 13), bool]) {
  %669 = cast(%var_7792, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
  %670 = tan(%669) /* ty=Tensor[(8, 12, 3), float32] */;
  %671 = cast(%670, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
  %672 = asin(%671) /* ty=Tensor[(8, 12, 3), float32] */;
  %673 = cast(%var_7848, dtype="float64") /* ty=Tensor[(8, 12, 3), float64] */;
  %674 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%672, dtype="float64") /* ty=Tensor[(8, 12, 3), float64] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %677 = cast(%670, dtype="float64") /* ty=Tensor[(8, 12, 3), float64] */;
  %678 = rsqrt(%677) /* ty=Tensor[(8, 12, 3), float64] */;
  %679 = cast(%678, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
  %680 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%670, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %683 = cast(%678, dtype="uint32") /* ty=Tensor[(8, 12, 3), uint32] */;
  %684 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%670, dtype="uint32") /* ty=Tensor[(8, 12, 3), uint32] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %687 = cast(%670, dtype="float64") /* ty=Tensor[(8, 12, 3), float64] */;
  %688 = @func_6949() /* ty=Tensor[(2, 9, 13), float64] */;
  %689 = @func_4036() /* ty=Tensor[(2, 9, 13), float64] */;
  %690 = floor_divide(%675, %676) /* ty=Tensor[(8, 12, 3), float64] */;
  %691 = floor_mod(%681, %682) /* ty=Tensor[(8, 12, 3), float32] */;
  %692 = logical_xor(%685, %686) /* ty=Tensor[(8, 12, 3), uint32] */;
  %693 = acos(%687) /* ty=Tensor[(8, 12, 3), float64] */;
  %694 = @func_4655() /* ty=Tensor[(2, 9, 13), bool] */;
  (%688, %689, %690, %691, %692, %693, %694)
}

def @func_7045(%var_6978: Tensor[(12, 13, 14), uint32], %var_7001: Tensor[(30), float64]) -> (Tensor[(12, 13, 14), uint32], Tensor[(30), float64]) {
  %695 = @func_6096() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2400), float32], uint32, Tensor[(12, 5, 1), float64]) */;
  %696 = %695.3;
  %697 = cast(%696, dtype="uint32") /* ty=uint32 */;
  %698 = cast(%var_6978, dtype="uint32") /* ty=Tensor[(12, 13, 14), uint32] */;
  %699 = cast(%var_7001, dtype="float64") /* ty=Tensor[(30), float64] */;
  %700 = reshape(%699, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
  %701 = @func_3(%700) /* ty=(Tensor[(2, 3, 5), float64],) */;
  %702 = %701.0;
  %703 = cast(%702, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
  %704 = shape_of(%var_7001, dtype="int32") /* ty=Tensor[(1), int32] */;
  %705 = cast(%var_7001, dtype="float64") /* ty=Tensor[(30), float64] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?), float64] */;
  %707 = right_shift(%697, %698) /* ty=Tensor[(12, 13, 14), uint32] */;
  %708 = power(%705, %706) /* ty=Tensor[(30), float64] */;
  (%707, %708)
}

def @func_3557(%var_3518: Tensor[(392), uint16], %var_3522: Tensor[(63), int16]) -> (Tensor[(2, 9, 13), float64], Tensor[(1, 4, 14), int8], int8, Tensor[(2, 3, 5), float64], Tensor[(392), uint16], Tensor[(2, 9, 13), uint64], Tensor[(1560), int32], Tensor[(63), float32]) {
  %709 = cast(meta[relay.Constant][52] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %710 = reshape(%709, newshape=[]) /* ty=int8 */;
  %711 = @func_1442(%710) /* ty=(Tensor[(1, 4, 14), int8],) */;
  %712 = cast(%var_3518, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %713 = reshape(%712, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
  %714 = @func_770(%713) /* ty=(Tensor[(14, 7, 4), uint16], Tensor[(2, 3, 5), float64], Tensor[(30), float64]) */;
  %715 = cast(%var_3522, dtype="int16") /* ty=Tensor[(63), int16] */;
  %716 = cast(meta[relay.Constant][53] /* ty=Tensor[(1560), int32] */, dtype="int32") /* ty=Tensor[(1560), int32] */;
  %717 = reshape(%715, newshape=[7, 3, 3]) /* ty=Tensor[(7, 3, 3), int16] */;
  %718 = reshape(%716, newshape=[1560]) /* ty=Tensor[(1560), int32] */;
  %719 = @func_2939(%717, %718) /* ty=(Tensor[(7, 3, 3), int16], Tensor[(13, 10, 12), float64], Tensor[(1560), int32], Tensor[(2, 9, 13), uint64]) */;
  %720 = cast(%var_3522, dtype="float32") /* ty=Tensor[(63), float32] */;
  %721 = @func_2389() /* ty=Tensor[(2, 9, 13), float64] */;
  %722 = %711.0;
  %723 = %714.1;
  %724 = %719.3;
  %725 = log(%720) /* ty=Tensor[(63), float32] */;
  (%721, %722, meta[relay.Constant][52] /* ty=int8 */, %723, %var_3518, %724, meta[relay.Constant][53] /* ty=Tensor[(1560), int32] */, %725)
}

def @func_1520(%var_1471: Tensor[(15, 10, 16), float32], %var_1484: uint32, %var_1485: Tensor[(216), uint32], %var_1498: Tensor[(15, 10, 16), uint32]) -> (Tensor[(2, 3, 5), float64], uint32, Tensor[(216), uint32], Tensor[(15, 10, 16), bool], Tensor[(3600), uint16]) {
  %726 = cast(%var_1484, dtype="uint32") /* ty=uint32 */;
  %727 = cast(%var_1485, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %728 = reshape(%726, newshape=[]) /* ty=uint32 */;
  %729 = reshape(%727, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), uint32] */;
  %730 = @func_672(%728, %729) /* ty=(Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) */;
  %731 = cast(%var_1471, dtype="float32") /* ty=Tensor[(15, 10, 16), float32] */;
  %732 = sqrt(%731) /* ty=Tensor[(15, 10, 16), float32] */;
  %733 = cast(meta[relay.Constant][54] /* ty=Tensor[(15, 10, 16), float32] */, dtype="uint32") /* ty=Tensor[(15, 10, 16), uint32] */;
  %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%732, dtype="uint32") /* ty=Tensor[(15, 10, 16), uint32] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %737 = left_shift(%735, %736) /* ty=Tensor[(15, 10, 16), uint32] */;
  %738 = cast(%var_1498, dtype="bool") /* ty=Tensor[(15, 10, 16), bool] */;
  %739 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%737, dtype="bool") /* ty=Tensor[(15, 10, 16), bool] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %742 = cast(%var_1484, dtype="uint32") /* ty=uint32 */;
  %743 = cast(%var_1485, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %744 = reshape(%742, newshape=[]) /* ty=uint32 */;
  %745 = reshape(%743, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), uint32] */;
  %746 = @func_672(%744, %745) /* ty=(Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) */;
  %747 = %730.2;
  %748 = logical_and(%740, %741) /* ty=Tensor[(15, 10, 16), bool] */;
  %749 = %746.1;
  (%747, %var_1484, %var_1485, %748, %749)
}

def @func_6459(%var_6457: Tensor[(378), int8]) -> (Tensor[(2, 9, 13), float64], Tensor[(378), uint64], Tensor[(378), int8]) {
  %750 = cast(%var_6457, dtype="int8") /* ty=Tensor[(378), int8] */;
  %751 = cast(%var_6457, dtype="int8") /* ty=Tensor[(378), int8] */;
  %752 = reshape(%750, newshape=[378]) /* ty=Tensor[(378), int8] */;
  %753 = reshape(%751, newshape=[378]) /* ty=Tensor[(378), int8] */;
  %754 = @func_4986(%752, %753) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], int8, Tensor[(378), uint64]) */;
  %755 = @func_3980() /* ty=Tensor[(2, 9, 13), float64] */;
  %756 = %754.3;
  (%755, %756, %var_6457)
}

def @func_4036() -> Tensor[(2, 9, 13), float64] {
  %757 = @func_2165() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %757.0
}

def @func_5571(%var_5541: Tensor[(16, 5, 11), float32]) -> (Tensor[(2, 9, 13), bool], Tensor[(9, 4), int64], Tensor[(468), int64], Tensor[(16, 5, 11), int32]) {
  %758 = cast(-8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %759 = cast(meta[relay.Constant][55] /* ty=Tensor[(9, 4), int64] */, dtype="int64") /* ty=Tensor[(9, 4), int64] */;
  %760 = cast(meta[relay.Constant][56] /* ty=Tensor[(468), int64] */, dtype="int64") /* ty=Tensor[(468), int64] */;
  %761 = reshape(%758, newshape=[]) /* ty=int64 */;
  %762 = reshape(%759, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), int64] */;
  %763 = reshape(%760, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), int64] */;
  %764 = @func_4383(%761, %762, %763) /* ty=(Tensor[(12, 3, 1), int64], Tensor[(2, 9, 13), bool], Tensor[(12, 3, 13), float32], Tensor[(2, 9, 13), float32]) */;
  %765 = cast(%var_5541, dtype="float32") /* ty=Tensor[(16, 5, 11), float32] */;
  %766 = exp(%765) /* ty=Tensor[(16, 5, 11), float32] */;
  %767 = cast(%766, dtype="int32") /* ty=Tensor[(16, 5, 11), int32] */;
  %768 = cast(-8 /* ty=int64 */, dtype="int32") /* ty=int32 */;
  %769 = %764.1;
  %770 = logical_xor(%767, %768) /* ty=Tensor[(16, 5, 11), int32] */;
  (%769, meta[relay.Constant][55] /* ty=Tensor[(9, 4), int64] */, meta[relay.Constant][56] /* ty=Tensor[(468), int64] */, %770)
}

def @func_6540() -> Tensor[(2, 9, 13), float64] {
  @func_4442() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_6609() -> (Tensor[(2, 9, 13), float64],) {
  %771 = @func_2182() /* ty=Tensor[(2, 9, 13), float64] */;
  (%771,)
}

def @func_3245() -> Tensor[(2, 9, 13), float64] {
  %772 = @func_2165() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %772.0
}

def @func_3964(%var_3916: Tensor[(2400), float32], %var_3917: uint32) -> (Tensor[(2, 9, 13), float64], Tensor[(216), uint32], Tensor[(2400), float32], uint32, Tensor[(2, 108), uint32], Tensor[(50), float32], Tensor[(378), int8], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float32], Tensor[(2, 3, 5), float64], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64], Tensor[(12, 5, 1), float64], Tensor[(3, 20), float64]) {
  %773 = cast(%var_3916, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %774 = cast(%var_3917, dtype="uint32") /* ty=uint32 */;
  %775 = cast(meta[relay.Constant][57] /* ty=Tensor[(2, 108), uint32] */, dtype="uint32") /* ty=Tensor[(2, 108), uint32] */;
  %776 = cast(%var_3916, dtype="uint32") /* ty=Tensor[(2400), uint32] */;
  %777 = reshape(%773, newshape=[15, 10, 16]) /* ty=Tensor[(15, 10, 16), float32] */;
  %778 = reshape(%774, newshape=[]) /* ty=uint32 */;
  %779 = reshape(%775, newshape=[216]) /* ty=Tensor[(216), uint32] */;
  %780 = reshape(%776, newshape=[15, 10, 16]) /* ty=Tensor[(15, 10, 16), uint32] */;
  %781 = @func_1520(%777, %778, %779, %780) /* ty=(Tensor[(2, 3, 5), float64], uint32, Tensor[(216), uint32], Tensor[(15, 10, 16), bool], Tensor[(3600), uint16]) */;
  %782 = cast(%var_3917, dtype="int8") /* ty=int8 */;
  %783 = cast(meta[relay.Constant][58] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
  %784 = reshape(%782, newshape=[]) /* ty=int8 */;
  %785 = reshape(%783, newshape=[9, 6, 7]) /* ty=Tensor[(9, 6, 7), int8] */;
  %786 = @func_1746(%784, %785) /* ty=(Tensor[(9, 6, 7), bool], Tensor[(1, 5, 10), float32], Tensor[(50), float32]) */;
  %787 = @func_2869() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %788 = @func_2484() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), bool]) */;
  %789 = cast(meta[relay.Constant][59] /* ty=Tensor[(3600), uint16] */, dtype="uint16") /* ty=Tensor[(3600), uint16] */;
  %790 = cast(meta[relay.Constant][59] /* ty=Tensor[(3600), uint16] */, dtype="uint16") /* ty=Tensor[(3600), uint16] */;
  %791 = reshape(%789, newshape=[16, 15, 15]) /* ty=Tensor[(16, 15, 15), uint16] */;
  %792 = reshape(%790, newshape=[16, 15, 15]) /* ty=Tensor[(16, 15, 15), uint16] */;
  %793 = @func_177(%791, %792) /* ty=(Tensor[(16, 15, 15), bool], Tensor[(16, 15, 15), float64], Tensor[(2, 3, 5), float64], Tensor[(5, 6), float64], Tensor[(2, 3, 5), float64], Tensor[(2, 3, 5), float64]) */;
  %794 = %793.2;
  %795 = cast(%794, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
  %796 = reshape(%795, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
  %797 = @func_3(%796) /* ty=(Tensor[(2, 3, 5), float64],) */;
  %798 = cast(meta[relay.Constant][60] /* ty=Tensor[(3, 20), float64] */, dtype="float64") /* ty=Tensor[(3, 20), float64] */;
  %799 = reshape(%798, newshape=[12, 5, 1]) /* ty=Tensor[(12, 5, 1), float64] */;
  %800 = @func_3011(%799) /* ty=(Tensor[(12, 5, 1), float64],) */;
  %801 = @func_3910() /* ty=Tensor[(2, 9, 13), float64] */;
  %802 = %781.2;
  %803 = %786.2;
  %804 = %787.0;
  %805 = %788.0;
  %806 = %797.0;
  %807 = %800.0;
  (%801, %802, %var_3916, %var_3917, meta[relay.Constant][57] /* ty=Tensor[(2, 108), uint32] */, %803, meta[relay.Constant][58] /* ty=Tensor[(378), int8] */, %804, %805, %794, meta[relay.Constant][59] /* ty=Tensor[(3600), uint16] */, %806, %807, meta[relay.Constant][60] /* ty=Tensor[(3, 20), float64] */)
}

def @func_7723() -> Tensor[(9, 8, 3), float32] {
  %808 = @func_7325() /* ty=Tensor[(9, 8, 3), float64] */;
  %809 = cast(meta[relay.Constant][61] /* ty=Tensor[(9, 8, 3), float64] */, dtype="uint32") /* ty=Tensor[(9, 8, 3), uint32] */;
  %810 = shape_of(%808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%808, dtype="uint32") /* ty=Tensor[(9, 8, 3), uint32] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %813 = minimum(%811, %812) /* ty=Tensor[(9, 8, 3), uint32] */;
  %814 = cast(%813, dtype="float32") /* ty=Tensor[(9, 8, 3), float32] */;
  log(%814) /* ty=Tensor[(9, 8, 3), float32] */
}

def @func_3402(%var_3392: float64, %var_3393: Tensor[(16, 1), float64]) -> (Tensor[(16, 1), float64],) {
  %815 = cast(%var_3392, dtype="float64") /* ty=float64 */;
  %816 = cast(%var_3393, dtype="float64") /* ty=Tensor[(16, 1), float64] */;
  %817 = power(%815, %816) /* ty=Tensor[(16, 1), float64] */;
  (%817,)
}

def @func_4026() -> Tensor[(2, 9, 13), float64] {
  %818 = @func_2165() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %818.0
}

def @func_4839(%var_4831: Tensor[(8, 13, 11), float64]) -> (Tensor[(8, 13, 11), float64], Tensor[(2, 3, 5), float64]) {
  %819 = cast(%var_4831, dtype="float64") /* ty=Tensor[(8, 13, 11), float64] */;
  %820 = @func_3445() /* ty=(Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(2, 9, 13), float32]) */;
  %821 = asin(%819) /* ty=Tensor[(8, 13, 11), float64] */;
  %822 = %820.0;
  (%821, %822)
}

def @main(%var_8318: Tensor[(13, 10, 5), uint8], %var_8319: Tensor[(13, 10, 5), uint8]) -> (Tensor[(13, 10, 5), uint8],) {
  %823 = cast(%var_8319, dtype="uint8") /* ty=Tensor[(13, 10, 5), uint8] */;
  %824 = shape_of(%var_8318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%var_8318, dtype="uint8") /* ty=Tensor[(13, 10, 5), uint8] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %827 = minimum(%825, %826) /* ty=Tensor[(13, 10, 5), uint8] */;
  (%827,)
}

def @func_2730() -> (Tensor[(2, 9, 13), float64],) {
  %828 = @func_2165() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %829 = %828.0;
  (%829,)
}

def @func_5507() -> (Tensor[(2, 9, 13), float64],) {
  %830 = @func_3445() /* ty=(Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(2, 9, 13), float32]) */;
  %831 = %830.2;
  %832 = cast(%831, dtype="float64") /* ty=Tensor[(2, 9, 13), float64] */;
  %833 = sin(%832) /* ty=Tensor[(2, 9, 13), float64] */;
  (%833,)
}

def @func_5266(%var_5257: Tensor[(2, 9, 13), bool]) -> Tensor[(2, 9, 13), int32] {
  %834 = @func_2736() /* ty=Tensor[(2, 9, 13), bool] */;
  %835 = cast(%var_5257, dtype="int32") /* ty=Tensor[(2, 9, 13), int32] */;
  %836 = shape_of(%834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(%834, dtype="int32") /* ty=Tensor[(2, 9, 13), int32] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_xor(%837, %838) /* ty=Tensor[(2, 9, 13), int32] */
}

def @func_6020() -> (Tensor[(2, 9, 13), float64],) {
  %839 = @func_5369() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %840 = %839.0;
  (%840,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2655(%var_2652: Tensor[(8, 11, 1), int8], %var_2653: Tensor[(8, 11, 4), int8], %var_2654: int8) -> (Tensor[(8, 11, 4), int8], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(8, 11, 4), float64], Tensor[(50), float32], int8, Tensor[(378), int8]) {
  @func_2650(%var_2652, %var_2653, %var_2654) /* ty=(Tensor[(8, 11, 4), int8], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(8, 11, 4), float64], Tensor[(50), float32], int8, Tensor[(378), int8]) */
}

def @func_5000() -> (Tensor[(2, 9, 13), float64],) {
  @func_4998() /* ty=(Tensor[(2, 9, 13), float64],) */
}

def @func_1746(%var_1728: int8, %var_1729: Tensor[(9, 6, 7), int8]) -> (Tensor[(9, 6, 7), bool], Tensor[(1, 5, 10), float32], Tensor[(50), float32]) {
  %0 = cast(%var_1728, dtype="bool") /* ty=bool */;
  %1 = cast(%var_1729, dtype="bool") /* ty=Tensor[(9, 6, 7), bool] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %3 = reshape(%2, newshape=[1, 5, 10]) /* ty=Tensor[(1, 5, 10), float32] */;
  %4 = greater(%0, %1) /* ty=Tensor[(9, 6, 7), bool] */;
  %5 = @func_1654(%3) /* ty=Tensor[(1, 5, 10), float32] */;
  (%4, %5, meta[relay.Constant][0] /* ty=Tensor[(50), float32] */)
}

def @func_6156(%var_6145: Tensor[(14, 5, 15), float64]) -> (Tensor[(14, 5, 15), float64], Tensor[(216), uint32], Tensor[(180), float32]) {
  %6 = cast(%var_6145, dtype="float64") /* ty=Tensor[(14, 5, 15), float64] */;
  %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %8 = reshape(%7, newshape=[9, 2, 10]) /* ty=Tensor[(9, 2, 10), float32] */;
  %9 = @func_5928(%8) /* ty=(Tensor[(9, 2, 10), float32], Tensor[(2, 3, 5), float64], uint32, Tensor[(216), uint32]) */;
  %10 = cos(%6) /* ty=Tensor[(14, 5, 15), float64] */;
  %11 = %9.3;
  (%10, %11, meta[relay.Constant][1] /* ty=Tensor[(180), float32] */)
}

def @func_4936() -> (Tensor[(2, 9, 13), float32], Tensor[(9, 8, 3), uint32], uint32, Tensor[(2, 108), float32]) {
  @func_4934() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(9, 8, 3), uint32], uint32, Tensor[(2, 108), float32]) */
}

def @func_2241(%var_2214: Tensor[(126, 3), int8]) -> (Tensor[(2, 9, 13), float64], Tensor[(50), float32], int8, Tensor[(126, 3), int8]) {
  %12 = cast(meta[relay.Constant][2] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %13 = cast(%var_2214, dtype="int8") /* ty=Tensor[(126, 3), int8] */;
  %14 = reshape(%12, newshape=[]) /* ty=int8 */;
  %15 = reshape(%13, newshape=[9, 6, 7]) /* ty=Tensor[(9, 6, 7), int8] */;
  %16 = @func_1746(%14, %15) /* ty=(Tensor[(9, 6, 7), bool], Tensor[(1, 5, 10), float32], Tensor[(50), float32]) */;
  %17 = @func_2182() /* ty=Tensor[(2, 9, 13), float64] */;
  %18 = %16.2;
  (%17, %18, meta[relay.Constant][2] /* ty=int8 */, %var_2214)
}

def @func_4990(%var_4988: Tensor[(378), int8], %var_4989: Tensor[(378), int8]) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], int8, Tensor[(378), uint64]) {
  @func_4986(%var_4988, %var_4989) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], int8, Tensor[(378), uint64]) */
}

def @func_7583(%var_7558: Tensor[(150, 3), float32], %var_7572: Tensor[(150, 3), float32]) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(150, 3), uint16]) {
  %19 = cast(%var_7558, dtype="float32") /* ty=Tensor[(150, 3), float32] */;
  %20 = reshape(%19, newshape=[10, 9, 5]) /* ty=Tensor[(10, 9, 5), float32] */;
  %21 = @func_6886(%20) /* ty=(Tensor[(10, 9, 5), float32], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */;
  %22 = cast(%var_7572, dtype="uint16") /* ty=Tensor[(150, 3), uint16] */;
  %23 = shape_of(%var_7558, dtype="int32") /* ty=Tensor[(2), int32] */;
  %24 = cast(%var_7558, dtype="uint16") /* ty=Tensor[(150, 3), uint16] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %26 = @func_4216() /* ty=Tensor[(2, 9, 13), float64] */;
  %27 = %21.2;
  %28 = maximum(%24, %25) /* ty=Tensor[(150, 3), uint16] */;
  (%26, %27, %28)
}

def @func_3602() -> (Tensor[(2, 9, 13), float64],) {
  @func_3600() /* ty=(Tensor[(2, 9, 13), float64],) */
}

def @func_8260() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
  %29 = @func_4166() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(30), float64]) */;
  %30 = %29.0;
  %31 = @func_5624() /* ty=Tensor[(2, 9, 13), float64] */;
  (%30, %31)
}

def @func_5571(%var_5541: Tensor[(16, 5, 11), float32]) -> (Tensor[(2, 9, 13), bool], Tensor[(9, 4), int64], Tensor[(468), int64], Tensor[(16, 5, 11), int32]) {
  %32 = cast(-8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %33 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 4), int64] */, dtype="int64") /* ty=Tensor[(9, 4), int64] */;
  %34 = cast(meta[relay.Constant][4] /* ty=Tensor[(468), int64] */, dtype="int64") /* ty=Tensor[(468), int64] */;
  %35 = reshape(%32, newshape=[]) /* ty=int64 */;
  %36 = reshape(%33, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), int64] */;
  %37 = reshape(%34, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), int64] */;
  %38 = @func_4383(%35, %36, %37) /* ty=(Tensor[(12, 3, 1), int64], Tensor[(2, 9, 13), bool], Tensor[(12, 3, 13), float32], Tensor[(2, 9, 13), float32]) */;
  %39 = cast(%var_5541, dtype="float32") /* ty=Tensor[(16, 5, 11), float32] */;
  %40 = exp(%39) /* ty=Tensor[(16, 5, 11), float32] */;
  %41 = cast(%40, dtype="int32") /* ty=Tensor[(16, 5, 11), int32] */;
  %42 = cast(-8 /* ty=int64 */, dtype="int32") /* ty=int32 */;
  %43 = %38.1;
  %44 = logical_xor(%41, %42) /* ty=Tensor[(16, 5, 11), int32] */;
  (%43, meta[relay.Constant][3] /* ty=Tensor[(9, 4), int64] */, meta[relay.Constant][4] /* ty=Tensor[(468), int64] */, %44)
}

def @func_2486() -> (Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), bool]) {
  @func_2484() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), bool]) */
}

def @func_145(%var_142: Tensor[(1, 1, 1), float32], %var_143: Tensor[(10, 3), float64], %var_144: Tensor[(8, 5, 16), float32]) -> (Tensor[(2, 3, 5), float64], Tensor[(2, 3, 5), float64], Tensor[(8, 5, 16), float32], Tensor[(2, 3, 5), float64], Tensor[(1, 10, 3), int16]) {
  %65 = fn (%var_105: Tensor[(1, 1, 1), float32], %var_112: Tensor[(10, 3), float64], %var_122: Tensor[(8, 5, 16), float32]) -> (Tensor[(2, 3, 5), float64], Tensor[(2, 3, 5), float64], Tensor[(8, 5, 16), float32], Tensor[(2, 3, 5), float64], Tensor[(1, 10, 3), int16]) {
    %45 = cast(%var_112, dtype="float64") /* ty=Tensor[(10, 3), float64] */;
    %46 = reshape(%45, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
    %47 = @func_3(%46) /* ty=(Tensor[(2, 3, 5), float64],) */;
    %48 = %47.0;
    %49 = cast(%48, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
    %50 = reshape(%49, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
    %51 = @func_3(%50) /* ty=(Tensor[(2, 3, 5), float64],) */;
    %52 = cast(%var_105, dtype="float32") /* ty=Tensor[(1, 1, 1), float32] */;
    %53 = sqrt(%52) /* ty=Tensor[(1, 1, 1), float32] */;
    %54 = cast(%53, dtype="float32") /* ty=Tensor[(1, 1, 1), float32] */;
    %55 = cast(%var_122, dtype="float32") /* ty=Tensor[(8, 5, 16), float32] */;
    %56 = cast(%48, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
    %57 = reshape(%56, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
    %58 = @func_3(%57) /* ty=(Tensor[(2, 3, 5), float64],) */;
    %59 = cast(%var_112, dtype="int16") /* ty=Tensor[(10, 3), int16] */;
    %60 = cast(%53, dtype="int16") /* ty=Tensor[(1, 1, 1), int16] */;
    %61 = %51.0;
    %62 = maximum(%54, %55) /* ty=Tensor[(8, 5, 16), float32] */;
    %63 = %58.0;
    %64 = bitwise_xor(%59, %60) /* ty=Tensor[(1, 10, 3), int16] */;
    (%48, %61, %62, %63, %64)
  };
  %65(%var_142, %var_143, %var_144) /* ty=(Tensor[(2, 3, 5), float64], Tensor[(2, 3, 5), float64], Tensor[(8, 5, 16), float32], Tensor[(2, 3, 5), float64], Tensor[(1, 10, 3), int16]) */
}

def @func_8180() -> Tensor[(2, 9, 13), float64] {
  @func_8178() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_675(%var_673: uint32, %var_674: Tensor[(9, 8, 3), uint32]) -> (Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) {
  %77 = fn (%var_642: uint32, %var_643: Tensor[(9, 8, 3), uint32]) -> (Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) {
    %66 = cast(%var_642, dtype="uint32") /* ty=uint32 */;
    %67 = cast(%var_643, dtype="uint32") /* ty=Tensor[(9, 8, 3), uint32] */;
    %68 = cast(meta[relay.Constant][5] /* ty=Tensor[(3600), uint16] */, dtype="uint16") /* ty=Tensor[(3600), uint16] */;
    %69 = cast(meta[relay.Constant][5] /* ty=Tensor[(3600), uint16] */, dtype="uint16") /* ty=Tensor[(3600), uint16] */;
    %70 = reshape(%68, newshape=[16, 15, 15]) /* ty=Tensor[(16, 15, 15), uint16] */;
    %71 = reshape(%69, newshape=[16, 15, 15]) /* ty=Tensor[(16, 15, 15), uint16] */;
    %72 = @func_177(%70, %71) /* ty=(Tensor[(16, 15, 15), bool], Tensor[(16, 15, 15), float64], Tensor[(2, 3, 5), float64], Tensor[(5, 6), float64], Tensor[(2, 3, 5), float64], Tensor[(2, 3, 5), float64]) */;
    %73 = %72.4;
    %74 = cast(%73, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
    %75 = bitwise_and(%66, %67) /* ty=Tensor[(9, 8, 3), uint32] */;
    %76 = asin(%74) /* ty=Tensor[(2, 3, 5), float64] */;
    (%75, meta[relay.Constant][5] /* ty=Tensor[(3600), uint16] */, %76)
  };
  %77(%var_673, %var_674) /* ty=(Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) */
}

def @func_3837(%var_3703: Tensor[(4, 12, 12), uint32], %var_3704: Tensor[(4, 12, 12), uint32], %var_3726: Tensor[(352), int8], %var_3810: Tensor[(560), int8]) -> (Tensor[(4, 12, 12), bool], Tensor[(2, 9, 13), float64], Tensor[(88), int8], Tensor[(8, 11, 4), float32], Tensor[(4, 12, 12), float32], Tensor[(352), float64], Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), uint64], Tensor[(4, 12, 12), bool], Tensor[(560), int8], Tensor[(2, 9, 13), float64], Tensor[(14, 4, 910), uint64], Tensor[(16, 1), float64], Tensor[(4, 4), float64]) {
  %78 = cast(%var_3704, dtype="bool") /* ty=Tensor[(4, 12, 12), bool] */;
  %79 = shape_of(%var_3703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%var_3703, dtype="bool") /* ty=Tensor[(4, 12, 12), bool] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %82 = @func_2869() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %83 = cast(meta[relay.Constant][6] /* ty=Tensor[(88), int8] */, dtype="int8") /* ty=Tensor[(88), int8] */;
  %84 = cast(%var_3726, dtype="int8") /* ty=Tensor[(352), int8] */;
  %85 = cast(meta[relay.Constant][7] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %86 = reshape(%83, newshape=[8, 11, 1]) /* ty=Tensor[(8, 11, 1), int8] */;
  %87 = reshape(%84, newshape=[8, 11, 4]) /* ty=Tensor[(8, 11, 4), int8] */;
  %88 = reshape(%85, newshape=[]) /* ty=int8 */;
  %89 = @func_2650(%86, %87, %88) /* ty=(Tensor[(8, 11, 4), int8], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(8, 11, 4), float64], Tensor[(50), float32], int8, Tensor[(378), int8]) */;
  %90 = %89.3;
  %91 = cast(%90, dtype="float32") /* ty=Tensor[(8, 11, 4), float32] */;
  %92 = cast(meta[relay.Constant][7] /* ty=int8 */, dtype="float32") /* ty=float32 */;
  %93 = cast(meta[relay.Constant][7] /* ty=int8 */, dtype="float32") /* ty=float32 */;
  %94 = cast(%var_3703, dtype="float32") /* ty=Tensor[(4, 12, 12), float32] */;
  %95 = cast(%var_3726, dtype="float64") /* ty=Tensor[(352), float64] */;
  %96 = @func_2281() /* ty=(Tensor[(2, 9, 13), uint64],) */;
  %97 = @func_3048() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), uint64]) */;
  %98 = cast(%var_3703, dtype="bool") /* ty=Tensor[(4, 12, 12), bool] */;
  %99 = cast(meta[relay.Constant][7] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %100 = cast(%var_3810, dtype="int8") /* ty=Tensor[(560), int8] */;
  %101 = reshape(%100, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), int8] */;
  %102 = @func_1039(%101) /* ty=(Tensor[(14, 4, 10), int8], Tensor[(2, 3, 5), float64], Tensor[(5, 6), float64], Tensor[(10, 360), float64], Tensor[(3600, 1), uint16], Tensor[(14, 4, 910), float64]) */;
  %103 = %102.5;
  %104 = cast(%103, dtype="uint64") /* ty=Tensor[(14, 4, 910), uint64] */;
  %105 = cast(meta[relay.Constant][7] /* ty=int8 */, dtype="uint64") /* ty=uint64 */;
  %106 = cast(meta[relay.Constant][7] /* ty=int8 */, dtype="float64") /* ty=float64 */;
  %107 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 4), float64] */, dtype="float64") /* ty=Tensor[(4, 4), float64] */;
  %108 = reshape(%106, newshape=[]) /* ty=float64 */;
  %109 = reshape(%107, newshape=[16, 1]) /* ty=Tensor[(16, 1), float64] */;
  %110 = @func_3402(%108, %109) /* ty=(Tensor[(16, 1), float64],) */;
  %111 = greater_equal(%80, %81) /* ty=Tensor[(4, 12, 12), bool] */;
  %112 = %82.0;
  %113 = divide(%91, %92) /* ty=Tensor[(8, 11, 4), float32] */;
  %114 = maximum(%93, %94) /* ty=Tensor[(4, 12, 12), float32] */;
  %115 = sqrt(%95) /* ty=Tensor[(352), float64] */;
  %116 = %96.0;
  %117 = %97.1;
  %118 = less(%98, %99) /* ty=Tensor[(4, 12, 12), bool] */;
  %119 = @func_3245() /* ty=Tensor[(2, 9, 13), float64] */;
  %120 = bitwise_or(%104, %105) /* ty=Tensor[(14, 4, 910), uint64] */;
  %121 = %110.0;
  (%111, %112, meta[relay.Constant][6] /* ty=Tensor[(88), int8] */, %113, %114, %115, %116, %117, %118, %var_3810, %119, %120, %121, meta[relay.Constant][8] /* ty=Tensor[(4, 4), float64] */)
}

def @func_4622(%var_4595: uint32) -> (Tensor[(2, 9, 13), bool], Tensor[(9, 8, 3), uint32], uint32, Tensor[(216), uint32], Tensor[(2, 3, 5), float64]) {
  %122 = @func_3179() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], int8) */;
  %123 = cast(%var_4595, dtype="uint32") /* ty=uint32 */;
  %124 = cast(meta[relay.Constant][9] /* ty=Tensor[(216), uint32] */, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %125 = reshape(%123, newshape=[]) /* ty=uint32 */;
  %126 = reshape(%124, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), uint32] */;
  %127 = @func_672(%125, %126) /* ty=(Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) */;
  %128 = @func_3445() /* ty=(Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(2, 9, 13), float32]) */;
  %129 = %122.1;
  %130 = %127.0;
  %131 = %128.0;
  (%129, %130, %var_4595, meta[relay.Constant][9] /* ty=Tensor[(216), uint32] */, %131)
}

def @func_7723() -> Tensor[(9, 8, 3), float32] {
  %132 = @func_7325() /* ty=Tensor[(9, 8, 3), float64] */;
  %133 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 8, 3), float64] */, dtype="uint32") /* ty=Tensor[(9, 8, 3), uint32] */;
  %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%132, dtype="uint32") /* ty=Tensor[(9, 8, 3), uint32] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %137 = minimum(%135, %136) /* ty=Tensor[(9, 8, 3), uint32] */;
  %138 = cast(%137, dtype="float32") /* ty=Tensor[(9, 8, 3), float32] */;
  log(%138) /* ty=Tensor[(9, 8, 3), float32] */
}

def @func_6832(%var_6801: Tensor[(9, 2, 14), float64], %var_6810: float64, %var_6825: Tensor[(30), float64]) -> (Tensor[(9, 2, 14), float64], Tensor[(16, 1), float64], float64, Tensor[(16), float64], Tensor[(2, 9, 13), float64], Tensor[(1, 10, 3), int16], Tensor[(30), float64], Tensor[(640), float32]) {
  %139 = cast(%var_6801, dtype="float64") /* ty=Tensor[(9, 2, 14), float64] */;
  %140 = cast(%var_6810, dtype="float64") /* ty=float64 */;
  %141 = cast(meta[relay.Constant][11] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %142 = reshape(%140, newshape=[]) /* ty=float64 */;
  %143 = reshape(%141, newshape=[16, 1]) /* ty=Tensor[(16, 1), float64] */;
  %144 = @func_3402(%142, %143) /* ty=(Tensor[(16, 1), float64],) */;
  %145 = @func_2677() /* ty=(Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), float64]) */;
  %146 = cast(%var_6810, dtype="float32") /* ty=float32 */;
  %147 = cast(%var_6825, dtype="float64") /* ty=Tensor[(30), float64] */;
  %148 = cast(meta[relay.Constant][12] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %149 = reshape(%146, newshape=[1, 1, 1]) /* ty=Tensor[(1, 1, 1), float32] */;
  %150 = reshape(%147, newshape=[10, 3]) /* ty=Tensor[(10, 3), float64] */;
  %151 = reshape(%148, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %152 = @func_141(%149, %150, %151) /* ty=(Tensor[(2, 3, 5), float64], Tensor[(2, 3, 5), float64], Tensor[(8, 5, 16), float32], Tensor[(2, 3, 5), float64], Tensor[(1, 10, 3), int16]) */;
  %153 = tan(%139) /* ty=Tensor[(9, 2, 14), float64] */;
  %154 = %144.0;
  %155 = %145.1;
  %156 = %152.4;
  (%153, %154, %var_6810, meta[relay.Constant][11] /* ty=Tensor[(16), float64] */, %155, %156, %var_6825, meta[relay.Constant][12] /* ty=Tensor[(640), float32] */)
}

def @func_3405(%var_3403: float64, %var_3404: Tensor[(16, 1), float64]) -> (Tensor[(16, 1), float64],) {
  %160 = fn (%var_3392: float64, %var_3393: Tensor[(16, 1), float64]) -> (Tensor[(16, 1), float64],) {
    %157 = cast(%var_3392, dtype="float64") /* ty=float64 */;
    %158 = cast(%var_3393, dtype="float64") /* ty=Tensor[(16, 1), float64] */;
    %159 = power(%157, %158) /* ty=Tensor[(16, 1), float64] */;
    (%159,)
  };
  %160(%var_3403, %var_3404) /* ty=(Tensor[(16, 1), float64],) */
}

def @func_8071() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
  %164 = fn () -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
    %161 = @func_4998() /* ty=(Tensor[(2, 9, 13), float64],) */;
    %162 = @func_6330() /* ty=Tensor[(2, 9, 13), float64] */;
    %163 = %161.0;
    (%162, %163)
  };
  %164() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */
}

def @func_2816() -> Tensor[(2, 9, 13), float64] {
  @func_2814() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_7389() -> (Tensor[(9, 8, 3), int8], Tensor[(2, 9, 13), bool]) {
  @func_7387() /* ty=(Tensor[(9, 8, 3), int8], Tensor[(2, 9, 13), bool]) */
}

def @func_8126() -> Tensor[(2, 9, 13), float64] {
  %165 = fn () -> Tensor[(2, 9, 13), float64] {
    @func_2182() /* ty=Tensor[(2, 9, 13), float64] */
  };
  %165() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_4625(%var_4623: uint32) -> (Tensor[(2, 9, 13), bool], Tensor[(9, 8, 3), uint32], uint32, Tensor[(216), uint32], Tensor[(2, 3, 5), float64]) {
  @func_4622(%var_4623) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(9, 8, 3), uint32], uint32, Tensor[(216), uint32], Tensor[(2, 3, 5), float64]) */
}

def @func_5869() -> (Tensor[(2, 9, 13), bool],) {
  %166 = @func_2736() /* ty=Tensor[(2, 9, 13), bool] */;
  (%166,)
}

def @func_5072(%var_5059: uint32, %var_5060: Tensor[(216), uint32]) -> (Tensor[(2, 9, 13), float64], uint32, Tensor[(216), uint32], Tensor[(9, 8, 3), float64]) {
  %167 = cast(%var_5059, dtype="uint32") /* ty=uint32 */;
  %168 = cast(%var_5060, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %169 = reshape(%167, newshape=[]) /* ty=uint32 */;
  %170 = reshape(%168, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), uint32] */;
  %171 = @func_672(%169, %170) /* ty=(Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) */;
  %172 = %171.0;
  %173 = cast(%172, dtype="float64") /* ty=Tensor[(9, 8, 3), float64] */;
  %174 = @func_5015() /* ty=Tensor[(2, 9, 13), float64] */;
  %175 = erf(%173) /* ty=Tensor[(9, 8, 3), float64] */;
  (%174, %var_5059, %var_5060, %175)
}

def @func_177(%var_150: Tensor[(16, 15, 15), uint16], %var_151: Tensor[(16, 15, 15), uint16]) -> (Tensor[(16, 15, 15), bool], Tensor[(16, 15, 15), float64], Tensor[(2, 3, 5), float64], Tensor[(5, 6), float64], Tensor[(2, 3, 5), float64], Tensor[(2, 3, 5), float64]) {
  %176 = cast(%var_151, dtype="bool") /* ty=Tensor[(16, 15, 15), bool] */;
  %177 = shape_of(%var_150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(%var_150, dtype="bool") /* ty=Tensor[(16, 15, 15), bool] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %180 = cast(%var_151, dtype="float64") /* ty=Tensor[(16, 15, 15), float64] */;
  %181 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 6), float64] */, dtype="float64") /* ty=Tensor[(5, 6), float64] */;
  %182 = reshape(%181, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
  %183 = @func_3(%182) /* ty=(Tensor[(2, 3, 5), float64],) */;
  %184 = %183.0;
  %185 = cast(%184, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
  %186 = reshape(%185, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
  %187 = @func_3(%186) /* ty=(Tensor[(2, 3, 5), float64],) */;
  %188 = cast(%184, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
  %189 = reshape(%188, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
  %190 = @func_3(%189) /* ty=(Tensor[(2, 3, 5), float64],) */;
  %191 = equal(%178, %179) /* ty=Tensor[(16, 15, 15), bool] */;
  %192 = atanh(%180) /* ty=Tensor[(16, 15, 15), float64] */;
  %193 = %187.0;
  %194 = %190.0;
  (%191, %192, %184, meta[relay.Constant][13] /* ty=Tensor[(5, 6), float64] */, %193, %194)
}

def @func_6459(%var_6457: Tensor[(378), int8]) -> (Tensor[(2, 9, 13), float64], Tensor[(378), uint64], Tensor[(378), int8]) {
  %195 = cast(%var_6457, dtype="int8") /* ty=Tensor[(378), int8] */;
  %196 = cast(%var_6457, dtype="int8") /* ty=Tensor[(378), int8] */;
  %197 = reshape(%195, newshape=[378]) /* ty=Tensor[(378), int8] */;
  %198 = reshape(%196, newshape=[378]) /* ty=Tensor[(378), int8] */;
  %199 = @func_4986(%197, %198) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], int8, Tensor[(378), uint64]) */;
  %200 = @func_3980() /* ty=Tensor[(2, 9, 13), float64] */;
  %201 = %199.3;
  (%200, %201, %var_6457)
}

def @func_2316(%var_2314: Tensor[(2, 9, 13), uint64]) -> Tensor[(2, 9, 13), bool] {
  @func_2313(%var_2314) /* ty=Tensor[(2, 9, 13), bool] */
}

def @func_5928(%var_5912: Tensor[(9, 2, 10), float32]) -> (Tensor[(9, 2, 10), float32], Tensor[(2, 3, 5), float64], uint32, Tensor[(216), uint32]) {
  %202 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 2, 10), float32] */, dtype="float32") /* ty=Tensor[(9, 2, 10), float32] */;
  %203 = shape_of(%var_5912, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%var_5912, dtype="float32") /* ty=Tensor[(9, 2, 10), float32] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %206 = cast(meta[relay.Constant][15] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %207 = cast(meta[relay.Constant][16] /* ty=Tensor[(216), uint32] */, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %208 = reshape(%206, newshape=[]) /* ty=uint32 */;
  %209 = reshape(%207, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), uint32] */;
  %210 = @func_672(%208, %209) /* ty=(Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) */;
  %211 = floor_divide(%204, %205) /* ty=Tensor[(9, 2, 10), float32] */;
  %212 = %210.2;
  (%211, %212, meta[relay.Constant][15] /* ty=uint32 */, meta[relay.Constant][16] /* ty=Tensor[(216), uint32] */)
}

def @func_2282() -> (Tensor[(2, 9, 13), uint64],) {
  %220 = fn () -> (Tensor[(2, 9, 13), uint64],) {
    %213 = @func_2165() /* ty=(Tensor[(2, 9, 13), float64],) */;
    %214 = %213.0;
    %215 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 9, 13), float64] */, dtype="uint64") /* ty=Tensor[(2, 9, 13), uint64] */;
    %216 = shape_of(%214, dtype="int32") /* ty=Tensor[(3), int32] */;
    %217 = cast(%214, dtype="uint64") /* ty=Tensor[(2, 9, 13), uint64] */;
    %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %219 = multiply(%217, %218) /* ty=Tensor[(2, 9, 13), uint64] */;
    (%219,)
  };
  %220() /* ty=(Tensor[(2, 9, 13), uint64],) */
}

def @func_3014(%var_3012: Tensor[(12, 5, 1), float64]) -> (Tensor[(12, 5, 1), float64],) {
  @func_3011(%var_3012) /* ty=(Tensor[(12, 5, 1), float64],) */
}

def @func_2390() -> Tensor[(2, 9, 13), float64] {
  %221 = fn () -> Tensor[(2, 9, 13), float64] {
    @func_2182() /* ty=Tensor[(2, 9, 13), float64] */
  };
  %221() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_4103(%var_4101: Tensor[(378), int8]) -> (Tensor[(2, 9, 13), float64], int8, Tensor[(378), int8], Tensor[(2, 9, 13), float32], Tensor[(8, 12, 5), float32], Tensor[(480), float32], Tensor[(2, 9, 13), uint64]) {
  @func_4100(%var_4101) /* ty=(Tensor[(2, 9, 13), float64], int8, Tensor[(378), int8], Tensor[(2, 9, 13), float32], Tensor[(8, 12, 5), float32], Tensor[(480), float32], Tensor[(2, 9, 13), uint64]) */
}

def @func_2732() -> (Tensor[(2, 9, 13), float64],) {
  @func_2730() /* ty=(Tensor[(2, 9, 13), float64],) */
}

def @func_6305(%var_6302: Tensor[(576), uint32], %var_6303: Tensor[(176, 2), int8], %var_6304: Tensor[(1, 560), int8]) -> (Tensor[(2, 9, 13), float64], Tensor[(45), uint32], Tensor[(2, 9, 13), float64], Tensor[(176, 2), int8], Tensor[(1, 560), int8], Tensor[(560), int8], Tensor[(12, 5, 1), float64], Tensor[(60), float64], Tensor[(576), float32]) {
  %249 = fn (%var_6257: Tensor[(576), uint32], %var_6258: Tensor[(176, 2), int8], %var_6259: Tensor[(1, 560), int8]) -> (Tensor[(2, 9, 13), float64], Tensor[(45), uint32], Tensor[(2, 9, 13), float64], Tensor[(176, 2), int8], Tensor[(1, 560), int8], Tensor[(560), int8], Tensor[(12, 5, 1), float64], Tensor[(60), float64], Tensor[(576), float32]) {
    %222 = @func_4764() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), float64], Tensor[(45), uint32], Tensor[(910), float32], Tensor[(3600), uint16]) */;
    %223 = cast(%var_6257, dtype="uint32") /* ty=Tensor[(576), uint32] */;
    %224 = cast(%var_6257, dtype="uint32") /* ty=Tensor[(576), uint32] */;
    %225 = cast(%var_6258, dtype="int8") /* ty=Tensor[(176, 2), int8] */;
    %226 = cast(%var_6259, dtype="int8") /* ty=Tensor[(1, 560), int8] */;
    %227 = reshape(%223, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint32] */;
    %228 = reshape(%224, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint32] */;
    %229 = reshape(%225, newshape=[352]) /* ty=Tensor[(352), int8] */;
    %230 = reshape(%226, newshape=[560]) /* ty=Tensor[(560), int8] */;
    %231 = @func_3837(%227, %228, %229, %230) /* ty=(Tensor[(4, 12, 12), bool], Tensor[(2, 9, 13), float64], Tensor[(88), int8], Tensor[(8, 11, 4), float32], Tensor[(4, 12, 12), float32], Tensor[(352), float64], Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), uint64], Tensor[(4, 12, 12), bool], Tensor[(560), int8], Tensor[(2, 9, 13), float64], Tensor[(14, 4, 910), uint64], Tensor[(16, 1), float64], Tensor[(4, 4), float64]) */;
    %232 = cast(%var_6257, dtype="float32") /* ty=Tensor[(576), float32] */;
    %233 = atan(%232) /* ty=Tensor[(576), float32] */;
    %234 = cast(%233, dtype="float64") /* ty=Tensor[(576), float64] */;
    %235 = atanh(%234) /* ty=Tensor[(576), float64] */;
    %236 = cast(%235, dtype="uint32") /* ty=Tensor[(576), uint32] */;
    %237 = reshape(%236, newshape=[576]) /* ty=Tensor[(576), uint32] */;
    %238 = @func_5718(%237) /* ty=(Tensor[(910), float64], Tensor[(4, 12, 12), bool], Tensor[(576), uint32], Tensor[(352, 1), int8], Tensor[(560), int8], Tensor[(2, 9, 13), float64]) */;
    %239 = cast(meta[relay.Constant][18] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
    %240 = reshape(%239, newshape=[12, 5, 1]) /* ty=Tensor[(12, 5, 1), float64] */;
    %241 = @func_3011(%240) /* ty=(Tensor[(12, 5, 1), float64],) */;
    %242 = cast(%235, dtype="float32") /* ty=Tensor[(576), float32] */;
    %243 = @func_4216() /* ty=Tensor[(2, 9, 13), float64] */;
    %244 = %222.2;
    %245 = %231.10;
    %246 = %238.4;
    %247 = %241.0;
    %248 = sinh(%242) /* ty=Tensor[(576), float32] */;
    (%243, %244, %245, %var_6258, %var_6259, %246, %247, meta[relay.Constant][18] /* ty=Tensor[(60), float64] */, %248)
  };
  %249(%var_6302, %var_6303, %var_6304) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(45), uint32], Tensor[(2, 9, 13), float64], Tensor[(176, 2), int8], Tensor[(1, 560), int8], Tensor[(560), int8], Tensor[(12, 5, 1), float64], Tensor[(60), float64], Tensor[(576), float32]) */
}

def @func_4121() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
  %253 = fn () -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
    %250 = @func_2984() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */;
    %251 = %250.1;
    %252 = @func_3980() /* ty=Tensor[(2, 9, 13), float64] */;
    (%251, %252)
  };
  %253() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */
}

def @func_4100(%var_4074: Tensor[(378), int8]) -> (Tensor[(2, 9, 13), float64], int8, Tensor[(378), int8], Tensor[(2, 9, 13), float32], Tensor[(8, 12, 5), float32], Tensor[(480), float32], Tensor[(2, 9, 13), uint64]) {
  %254 = @func_3600() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %255 = cast(%var_4074, dtype="int8") /* ty=Tensor[(378), int8] */;
  %256 = reshape(%255, newshape=[126, 3]) /* ty=Tensor[(126, 3), int8] */;
  %257 = @func_2241(%256) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(50), float32], int8, Tensor[(126, 3), int8]) */;
  %258 = @func_3445() /* ty=(Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(2, 9, 13), float32]) */;
  %259 = cast(meta[relay.Constant][19] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %260 = reshape(%259, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %261 = @func_2677() /* ty=(Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), float64]) */;
  %262 = %254.0;
  %263 = %257.2;
  %264 = %258.2;
  %265 = @func_3323(%260) /* ty=Tensor[(8, 12, 5), float32] */;
  %266 = %261.0;
  (%262, %263, %var_4074, %264, %265, meta[relay.Constant][19] /* ty=Tensor[(480), float32] */, %266)
}

def @func_1750(%var_1748: int8, %var_1749: Tensor[(9, 6, 7), int8]) -> (Tensor[(9, 6, 7), bool], Tensor[(1, 5, 10), float32], Tensor[(50), float32]) {
  @func_1746(%var_1748, %var_1749) /* ty=(Tensor[(9, 6, 7), bool], Tensor[(1, 5, 10), float32], Tensor[(50), float32]) */
}

def @func_3560(%var_3558: Tensor[(392), uint16], %var_3559: Tensor[(63), int16]) -> (Tensor[(2, 9, 13), float64], Tensor[(1, 4, 14), int8], int8, Tensor[(2, 3, 5), float64], Tensor[(392), uint16], Tensor[(2, 9, 13), uint64], Tensor[(1560), int32], Tensor[(63), float32]) {
  %284 = fn (%var_3518: Tensor[(392), uint16], %var_3522: Tensor[(63), int16]) -> (Tensor[(2, 9, 13), float64], Tensor[(1, 4, 14), int8], int8, Tensor[(2, 3, 5), float64], Tensor[(392), uint16], Tensor[(2, 9, 13), uint64], Tensor[(1560), int32], Tensor[(63), float32]) {
    %267 = cast(meta[relay.Constant][20] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %268 = reshape(%267, newshape=[]) /* ty=int8 */;
    %269 = @func_1442(%268) /* ty=(Tensor[(1, 4, 14), int8],) */;
    %270 = cast(%var_3518, dtype="uint16") /* ty=Tensor[(392), uint16] */;
    %271 = reshape(%270, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
    %272 = @func_770(%271) /* ty=(Tensor[(14, 7, 4), uint16], Tensor[(2, 3, 5), float64], Tensor[(30), float64]) */;
    %273 = cast(%var_3522, dtype="int16") /* ty=Tensor[(63), int16] */;
    %274 = cast(meta[relay.Constant][21] /* ty=Tensor[(1560), int32] */, dtype="int32") /* ty=Tensor[(1560), int32] */;
    %275 = reshape(%273, newshape=[7, 3, 3]) /* ty=Tensor[(7, 3, 3), int16] */;
    %276 = reshape(%274, newshape=[1560]) /* ty=Tensor[(1560), int32] */;
    %277 = @func_2939(%275, %276) /* ty=(Tensor[(7, 3, 3), int16], Tensor[(13, 10, 12), float64], Tensor[(1560), int32], Tensor[(2, 9, 13), uint64]) */;
    %278 = cast(%var_3522, dtype="float32") /* ty=Tensor[(63), float32] */;
    %279 = @func_2389() /* ty=Tensor[(2, 9, 13), float64] */;
    %280 = %269.0;
    %281 = %272.1;
    %282 = %277.3;
    %283 = log(%278) /* ty=Tensor[(63), float32] */;
    (%279, %280, meta[relay.Constant][20] /* ty=int8 */, %281, %var_3518, %282, meta[relay.Constant][21] /* ty=Tensor[(1560), int32] */, %283)
  };
  %284(%var_3558, %var_3559) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(1, 4, 14), int8], int8, Tensor[(2, 3, 5), float64], Tensor[(392), uint16], Tensor[(2, 9, 13), uint64], Tensor[(1560), int32], Tensor[(63), float32]) */
}

def @func_3843(%var_3839: Tensor[(4, 12, 12), uint32], %var_3840: Tensor[(4, 12, 12), uint32], %var_3841: Tensor[(352), int8], %var_3842: Tensor[(560), int8]) -> (Tensor[(4, 12, 12), bool], Tensor[(2, 9, 13), float64], Tensor[(88), int8], Tensor[(8, 11, 4), float32], Tensor[(4, 12, 12), float32], Tensor[(352), float64], Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), uint64], Tensor[(4, 12, 12), bool], Tensor[(560), int8], Tensor[(2, 9, 13), float64], Tensor[(14, 4, 910), uint64], Tensor[(16, 1), float64], Tensor[(4, 4), float64]) {
  @func_3837(%var_3839, %var_3840, %var_3841, %var_3842) /* ty=(Tensor[(4, 12, 12), bool], Tensor[(2, 9, 13), float64], Tensor[(88), int8], Tensor[(8, 11, 4), float32], Tensor[(4, 12, 12), float32], Tensor[(352), float64], Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), uint64], Tensor[(4, 12, 12), bool], Tensor[(560), int8], Tensor[(2, 9, 13), float64], Tensor[(14, 4, 910), uint64], Tensor[(16, 1), float64], Tensor[(4, 4), float64]) */
}

def @func_3073() -> (Tensor[(2, 9, 13), bool],) {
  @func_3071() /* ty=(Tensor[(2, 9, 13), bool],) */
}

def @func_4764() -> (Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), float64], Tensor[(45), uint32], Tensor[(910), float32], Tensor[(3600), uint16]) {
  %285 = @func_3071() /* ty=(Tensor[(2, 9, 13), bool],) */;
  %286 = %285.0;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(2, 9, 13), float32] */;
  %288 = cast(meta[relay.Constant][22] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %289 = cast(meta[relay.Constant][23] /* ty=Tensor[(3600), uint16] */, dtype="uint16") /* ty=Tensor[(3600), uint16] */;
  %290 = reshape(%288, newshape=[7, 10, 13]) /* ty=Tensor[(7, 10, 13), float32] */;
  %291 = reshape(%289, newshape=[10, 360]) /* ty=Tensor[(10, 360), uint16] */;
  %292 = @func_896(%290, %291) /* ty=(Tensor[(9, 5), bool], Tensor[(45), uint32], Tensor[(7, 10, 13), int64], Tensor[(16, 15, 15), float64], Tensor[(10, 360), float64]) */;
  %293 = rsqrt(%287) /* ty=Tensor[(2, 9, 13), float32] */;
  %294 = @func_4026() /* ty=Tensor[(2, 9, 13), float64] */;
  %295 = %292.1;
  (%293, %294, %295, meta[relay.Constant][22] /* ty=Tensor[(910), float32] */, meta[relay.Constant][23] /* ty=Tensor[(3600), uint16] */)
}

def @func_5369() -> (Tensor[(2, 9, 13), float64],) {
  %296 = @func_4166() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(30), float64]) */;
  %297 = %296.0;
  (%297,)
}

def @func_4934() -> (Tensor[(2, 9, 13), float32], Tensor[(9, 8, 3), uint32], uint32, Tensor[(2, 108), float32]) {
  %298 = @func_2484() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), bool]) */;
  %299 = cast(meta[relay.Constant][24] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %300 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 108), uint32] */, dtype="uint32") /* ty=Tensor[(2, 108), uint32] */;
  %301 = reshape(%299, newshape=[]) /* ty=uint32 */;
  %302 = reshape(%300, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), uint32] */;
  %303 = @func_672(%301, %302) /* ty=(Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) */;
  %304 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 108), uint32] */, dtype="float32") /* ty=Tensor[(2, 108), float32] */;
  %305 = %298.0;
  %306 = %303.0;
  %307 = cos(%304) /* ty=Tensor[(2, 108), float32] */;
  (%305, %306, meta[relay.Constant][24] /* ty=uint32 */, %307)
}

def @func_5574(%var_5572: Tensor[(16, 5, 11), float32]) -> (Tensor[(2, 9, 13), bool], Tensor[(9, 4), int64], Tensor[(468), int64], Tensor[(16, 5, 11), int32]) {
  @func_5571(%var_5572) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(9, 4), int64], Tensor[(468), int64], Tensor[(16, 5, 11), int32]) */
}

def @func_4388(%var_4385: int64, %var_4386: Tensor[(12, 3, 1), int64], %var_4387: Tensor[(12, 3, 13), int64]) -> (Tensor[(12, 3, 1), int64], Tensor[(2, 9, 13), bool], Tensor[(12, 3, 13), float32], Tensor[(2, 9, 13), float32]) {
  @func_4383(%var_4385, %var_4386, %var_4387) /* ty=(Tensor[(12, 3, 1), int64], Tensor[(2, 9, 13), bool], Tensor[(12, 3, 13), float32], Tensor[(2, 9, 13), float32]) */
}

def @func_4281() -> (Tensor[(2, 9, 13), float64],) {
  %310 = fn () -> (Tensor[(2, 9, 13), float64],) {
    %308 = @func_2984() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */;
    %309 = %308.2;
    (%309,)
  };
  %310() /* ty=(Tensor[(2, 9, 13), float64],) */
}

def @func_2678() -> (Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), float64]) {
  %314 = fn () -> (Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), float64]) {
    %311 = @func_2281() /* ty=(Tensor[(2, 9, 13), uint64],) */;
    %312 = %311.0;
    %313 = @func_2182() /* ty=Tensor[(2, 9, 13), float64] */;
    (%312, %313)
  };
  %314() /* ty=(Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), float64]) */
}

def @func_2182() -> Tensor[(2, 9, 13), float64] {
  %315 = @func_2165() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %315.0
}

def @func_4571() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
  @func_4569() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */
}

def @func_5479() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], Tensor[(2, 9, 13), float64]) {
  %320 = fn () -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], Tensor[(2, 9, 13), float64]) {
    %316 = @func_3048() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), uint64]) */;
    %317 = %316.0;
    %318 = @func_2736() /* ty=Tensor[(2, 9, 13), bool] */;
    %319 = @func_5015() /* ty=Tensor[(2, 9, 13), float64] */;
    (%317, %318, %319)
  };
  %320() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], Tensor[(2, 9, 13), float64]) */
}

def @func_6159(%var_6157: Tensor[(14, 5, 15), float64]) -> (Tensor[(14, 5, 15), float64], Tensor[(216), uint32], Tensor[(180), float32]) {
  @func_6156(%var_6157) /* ty=(Tensor[(14, 5, 15), float64], Tensor[(216), uint32], Tensor[(180), float32]) */
}

def @func_7446() -> (Tensor[(2, 9, 13), float64],) {
  @func_7444() /* ty=(Tensor[(2, 9, 13), float64],) */
}

def @func_4639(%var_4637: Tensor[(10, 4, 2), float32]) -> (Tensor[(10, 4, 2), float32],) {
  @func_4636(%var_4637) /* ty=(Tensor[(10, 4, 2), float32],) */
}

def @func_7624() -> (Tensor[(2, 9, 13), bool],) {
  @func_7622() /* ty=(Tensor[(2, 9, 13), bool],) */
}

def @func_3912() -> Tensor[(2, 9, 13), float64] {
  @func_3910() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_6950() -> Tensor[(2, 9, 13), float64] {
  %321 = fn () -> Tensor[(2, 9, 13), float64] {
    @func_3910() /* ty=Tensor[(2, 9, 13), float64] */
  };
  %321() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_7325() -> Tensor[(9, 8, 3), float64] {
  %322 = @func_4934() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(9, 8, 3), uint32], uint32, Tensor[(2, 108), float32]) */;
  %323 = %322.1;
  %324 = cast(%323, dtype="float64") /* ty=Tensor[(9, 8, 3), float64] */;
  exp(%324) /* ty=Tensor[(9, 8, 3), float64] */
}

def @func_6331() -> Tensor[(2, 9, 13), float64] {
  %326 = fn () -> Tensor[(2, 9, 13), float64] {
    %325 = @func_3048() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), uint64]) */;
    %325.0
  };
  %326() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_836(%var_829: Tensor[(9, 5), uint32], %var_830: Tensor[(9, 5), uint32]) -> (Tensor[(9, 5), bool],) {
  %327 = cast(%var_830, dtype="bool") /* ty=Tensor[(9, 5), bool] */;
  %328 = shape_of(%var_829, dtype="int32") /* ty=Tensor[(2), int32] */;
  %329 = cast(%var_829, dtype="bool") /* ty=Tensor[(9, 5), bool] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %331 = not_equal(%329, %330) /* ty=Tensor[(9, 5), bool] */;
  (%331,)
}

def @func_6541() -> Tensor[(2, 9, 13), float64] {
  %332 = fn () -> Tensor[(2, 9, 13), float64] {
    @func_4442() /* ty=Tensor[(2, 9, 13), float64] */
  };
  %332() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_1654(%var_1650: Tensor[(1, 5, 10), float32]) -> Tensor[(1, 5, 10), float32] {
  %333 = cast(%var_1650, dtype="float32") /* ty=Tensor[(1, 5, 10), float32] */;
  sinh(%333) /* ty=Tensor[(1, 5, 10), float32] */
}

def @func_8178() -> Tensor[(2, 9, 13), float64] {
  @func_3910() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_1042(%var_1040: Tensor[(14, 4, 10), int8]) -> (Tensor[(14, 4, 10), int8], Tensor[(2, 3, 5), float64], Tensor[(5, 6), float64], Tensor[(10, 360), float64], Tensor[(3600, 1), uint16], Tensor[(14, 4, 910), float64]) {
  @func_1039(%var_1040) /* ty=(Tensor[(14, 4, 10), int8], Tensor[(2, 3, 5), float64], Tensor[(5, 6), float64], Tensor[(10, 360), float64], Tensor[(3600, 1), uint16], Tensor[(14, 4, 910), float64]) */
}

def @func_5017() -> Tensor[(2, 9, 13), float64] {
  @func_5015() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_5931(%var_5929: Tensor[(9, 2, 10), float32]) -> (Tensor[(9, 2, 10), float32], Tensor[(2, 3, 5), float64], uint32, Tensor[(216), uint32]) {
  @func_5928(%var_5929) /* ty=(Tensor[(9, 2, 10), float32], Tensor[(2, 3, 5), float64], uint32, Tensor[(216), uint32]) */
}

def @func_2784() -> (Tensor[(2, 9, 13), float64], Tensor[(1, 4, 14), int8], int8) {
  %334 = cast(meta[relay.Constant][26] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %335 = reshape(%334, newshape=[]) /* ty=int8 */;
  %336 = @func_1442(%335) /* ty=(Tensor[(1, 4, 14), int8],) */;
  %337 = @func_2389() /* ty=Tensor[(2, 9, 13), float64] */;
  %338 = %336.0;
  (%337, %338, meta[relay.Constant][26] /* ty=int8 */)
}

def @func_7622() -> (Tensor[(2, 9, 13), bool],) {
  %339 = @func_7135() /* ty=Tensor[(2, 9, 13), bool] */;
  (%339,)
}

def @func_5342() -> Tensor[(2, 9, 13), float64] {
  %341 = fn () -> Tensor[(2, 9, 13), float64] {
    %340 = @func_2869() /* ty=(Tensor[(2, 9, 13), float64],) */;
    %340.0
  };
  %341() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_3910() -> Tensor[(2, 9, 13), float64] {
  %342 = @func_2869() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %342.0
}

def @func_181(%var_179: Tensor[(16, 15, 15), uint16], %var_180: Tensor[(16, 15, 15), uint16]) -> (Tensor[(16, 15, 15), bool], Tensor[(16, 15, 15), float64], Tensor[(2, 3, 5), float64], Tensor[(5, 6), float64], Tensor[(2, 3, 5), float64], Tensor[(2, 3, 5), float64]) {
  @func_177(%var_179, %var_180) /* ty=(Tensor[(16, 15, 15), bool], Tensor[(16, 15, 15), float64], Tensor[(2, 3, 5), float64], Tensor[(5, 6), float64], Tensor[(2, 3, 5), float64], Tensor[(2, 3, 5), float64]) */
}

def @func_7048(%var_7046: Tensor[(12, 13, 14), uint32], %var_7047: Tensor[(30), float64]) -> (Tensor[(12, 13, 14), uint32], Tensor[(30), float64]) {
  %357 = fn (%var_6978: Tensor[(12, 13, 14), uint32], %var_7001: Tensor[(30), float64]) -> (Tensor[(12, 13, 14), uint32], Tensor[(30), float64]) {
    %343 = @func_6096() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2400), float32], uint32, Tensor[(12, 5, 1), float64]) */;
    %344 = %343.3;
    %345 = cast(%344, dtype="uint32") /* ty=uint32 */;
    %346 = cast(%var_6978, dtype="uint32") /* ty=Tensor[(12, 13, 14), uint32] */;
    %347 = cast(%var_7001, dtype="float64") /* ty=Tensor[(30), float64] */;
    %348 = reshape(%347, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
    %349 = @func_3(%348) /* ty=(Tensor[(2, 3, 5), float64],) */;
    %350 = %349.0;
    %351 = cast(%350, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
    %352 = shape_of(%var_7001, dtype="int32") /* ty=Tensor[(1), int32] */;
    %353 = cast(%var_7001, dtype="float64") /* ty=Tensor[(30), float64] */;
    %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?), float64] */;
    %355 = right_shift(%345, %346) /* ty=Tensor[(12, 13, 14), uint32] */;
    %356 = power(%353, %354) /* ty=Tensor[(30), float64] */;
    (%355, %356)
  };
  %357(%var_7046, %var_7047) /* ty=(Tensor[(12, 13, 14), uint32], Tensor[(30), float64]) */
}

def @func_3887(%var_3885: Tensor[(216), uint32], %var_3886: Tensor[(60), float64]) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(3600), uint16], uint32, Tensor[(216), uint32], Tensor[(12, 5, 1), float64], Tensor[(60), float64]) {
  %373 = fn (%var_3868: Tensor[(216), uint32], %var_3872: Tensor[(60), float64]) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(3600), uint16], uint32, Tensor[(216), uint32], Tensor[(12, 5, 1), float64], Tensor[(60), float64]) {
    %358 = cast(meta[relay.Constant][27] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
    %359 = reshape(%358, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
    %360 = @func_3(%359) /* ty=(Tensor[(2, 3, 5), float64],) */;
    %361 = cast(meta[relay.Constant][28] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %362 = cast(%var_3868, dtype="uint32") /* ty=Tensor[(216), uint32] */;
    %363 = reshape(%361, newshape=[]) /* ty=uint32 */;
    %364 = reshape(%362, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), uint32] */;
    %365 = @func_672(%363, %364) /* ty=(Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) */;
    %366 = cast(%var_3872, dtype="float64") /* ty=Tensor[(60), float64] */;
    %367 = reshape(%366, newshape=[12, 5, 1]) /* ty=Tensor[(12, 5, 1), float64] */;
    %368 = @func_3011(%367) /* ty=(Tensor[(12, 5, 1), float64],) */;
    %369 = @func_3245() /* ty=Tensor[(2, 9, 13), float64] */;
    %370 = %360.0;
    %371 = %365.1;
    %372 = %368.0;
    (%369, %370, meta[relay.Constant][27] /* ty=Tensor[(30), float64] */, %371, meta[relay.Constant][28] /* ty=uint32 */, %var_3868, %372, %var_3872)
  };
  %373(%var_3885, %var_3886) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(3600), uint16], uint32, Tensor[(216), uint32], Tensor[(12, 5, 1), float64], Tensor[(60), float64]) */
}

def @func_3181() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], int8) {
  @func_3179() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], int8) */
}

def @func_7111() -> Tensor[(2, 9, 13), float64] {
  @func_7109() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_7725() -> Tensor[(9, 8, 3), float32] {
  @func_7723() /* ty=Tensor[(9, 8, 3), float32] */
}

def @func_2167() -> (Tensor[(2, 9, 13), float64],) {
  @func_2165() /* ty=(Tensor[(2, 9, 13), float64],) */
}

def @func_1039(%var_1010: Tensor[(14, 4, 10), int8]) -> (Tensor[(14, 4, 10), int8], Tensor[(2, 3, 5), float64], Tensor[(5, 6), float64], Tensor[(10, 360), float64], Tensor[(3600, 1), uint16], Tensor[(14, 4, 910), float64]) {
  %374 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 4, 1), int8] */, dtype="int8") /* ty=Tensor[(14, 4, 1), int8] */;
  %375 = cast(%var_1010, dtype="int8") /* ty=Tensor[(14, 4, 10), int8] */;
  %376 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 6), float64] */, dtype="float64") /* ty=Tensor[(5, 6), float64] */;
  %377 = reshape(%376, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
  %378 = @func_3(%377) /* ty=(Tensor[(2, 3, 5), float64],) */;
  %379 = cast(meta[relay.Constant][31] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %380 = cast(meta[relay.Constant][32] /* ty=Tensor[(3600, 1), uint16] */, dtype="uint16") /* ty=Tensor[(3600, 1), uint16] */;
  %381 = reshape(%379, newshape=[7, 10, 13]) /* ty=Tensor[(7, 10, 13), float32] */;
  %382 = reshape(%380, newshape=[10, 360]) /* ty=Tensor[(10, 360), uint16] */;
  %383 = @func_896(%381, %382) /* ty=(Tensor[(9, 5), bool], Tensor[(45), uint32], Tensor[(7, 10, 13), int64], Tensor[(16, 15, 15), float64], Tensor[(10, 360), float64]) */;
  %384 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 4, 1), int8] */, dtype="float64") /* ty=Tensor[(14, 4, 1), float64] */;
  %385 = cast(meta[relay.Constant][31] /* ty=Tensor[(910), float32] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %386 = add(%374, %375) /* ty=Tensor[(14, 4, 10), int8] */;
  %387 = %378.0;
  %388 = %383.4;
  %389 = divide(%384, %385) /* ty=Tensor[(14, 4, 910), float64] */;
  (%386, %387, meta[relay.Constant][30] /* ty=Tensor[(5, 6), float64] */, %388, meta[relay.Constant][32] /* ty=Tensor[(3600, 1), uint16] */, %389)
}

def @func_5509() -> (Tensor[(2, 9, 13), float64],) {
  @func_5507() /* ty=(Tensor[(2, 9, 13), float64],) */
}

def @func_2939(%var_2888: Tensor[(7, 3, 3), int16], %var_2917: Tensor[(1560), int32]) -> (Tensor[(7, 3, 3), int16], Tensor[(13, 10, 12), float64], Tensor[(1560), int32], Tensor[(2, 9, 13), uint64]) {
  %390 = cast(%var_2888, dtype="int16") /* ty=Tensor[(7, 3, 3), int16] */;
  %391 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(7, 3, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 3, 3), int16] */, dtype="int16") /* ty=Tensor[(7, 3, 3), int16] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %394 = cast(%var_2917, dtype="int32") /* ty=Tensor[(1560), int32] */;
  %395 = reshape(%394, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), int32] */;
  %396 = @func_1171(%395) /* ty=(Tensor[(13, 10, 12), int32], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), bool]) */;
  %397 = @func_2281() /* ty=(Tensor[(2, 9, 13), uint64],) */;
  %398 = maximum(%392, %393) /* ty=Tensor[(7, 3, 3), int16] */;
  %399 = %396.1;
  %400 = %397.0;
  (%398, %399, %var_2917, %400)
}

def @func_1442(%var_1430: int8) -> (Tensor[(1, 4, 14), int8],) {
  %401 = cast(%var_1430, dtype="int8") /* ty=int8 */;
  %402 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 4, 14), int8] */, dtype="int8") /* ty=Tensor[(1, 4, 14), int8] */;
  %403 = add(%401, %402) /* ty=Tensor[(1, 4, 14), int8] */;
  (%403,)
}

def @func_1657(%var_1655: Tensor[(1, 5, 10), float32]) -> Tensor[(1, 5, 10), float32] {
  @func_1654(%var_1655) /* ty=Tensor[(1, 5, 10), float32] */
}

def @func_6888(%var_6887: Tensor[(10, 9, 5), float32]) -> (Tensor[(10, 9, 5), float32], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
  %410 = fn (%var_6842: Tensor[(10, 9, 5), float32]) -> (Tensor[(10, 9, 5), float32], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
    %404 = cast(%var_6842, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
    %405 = @func_3600() /* ty=(Tensor[(2, 9, 13), float64],) */;
    %406 = @func_5369() /* ty=(Tensor[(2, 9, 13), float64],) */;
    %407 = atanh(%404) /* ty=Tensor[(10, 9, 5), float32] */;
    %408 = %405.0;
    %409 = %406.0;
    (%407, %408, %409)
  };
  %410(%var_6887) /* ty=(Tensor[(10, 9, 5), float32], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */
}

def @func_2184() -> Tensor[(2, 9, 13), float64] {
  @func_2182() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_4656() -> Tensor[(2, 9, 13), bool] {
  %412 = fn () -> Tensor[(2, 9, 13), bool] {
    %411 = @func_3179() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], int8) */;
    %411.1
  };
  %412() /* ty=Tensor[(2, 9, 13), bool] */
}

def @func_896(%var_852: Tensor[(7, 10, 13), float32], %var_875: Tensor[(10, 360), uint16]) -> (Tensor[(9, 5), bool], Tensor[(45), uint32], Tensor[(7, 10, 13), int64], Tensor[(16, 15, 15), float64], Tensor[(10, 360), float64]) {
  %413 = cast(meta[relay.Constant][35] /* ty=Tensor[(45), uint32] */, dtype="uint32") /* ty=Tensor[(45), uint32] */;
  %414 = cast(meta[relay.Constant][35] /* ty=Tensor[(45), uint32] */, dtype="uint32") /* ty=Tensor[(45), uint32] */;
  %415 = reshape(%413, newshape=[9, 5]) /* ty=Tensor[(9, 5), uint32] */;
  %416 = reshape(%414, newshape=[9, 5]) /* ty=Tensor[(9, 5), uint32] */;
  %417 = @func_836(%415, %416) /* ty=(Tensor[(9, 5), bool],) */;
  %418 = cast(%var_852, dtype="float32") /* ty=Tensor[(7, 10, 13), float32] */;
  %419 = sqrt(%418) /* ty=Tensor[(7, 10, 13), float32] */;
  %420 = cast(%419, dtype="int64") /* ty=Tensor[(7, 10, 13), int64] */;
  %421 = shape_of(%var_852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%var_852, dtype="int64") /* ty=Tensor[(7, 10, 13), int64] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %424 = cast(%var_875, dtype="uint16") /* ty=Tensor[(10, 360), uint16] */;
  %425 = cast(%var_875, dtype="uint16") /* ty=Tensor[(10, 360), uint16] */;
  %426 = reshape(%424, newshape=[16, 15, 15]) /* ty=Tensor[(16, 15, 15), uint16] */;
  %427 = reshape(%425, newshape=[16, 15, 15]) /* ty=Tensor[(16, 15, 15), uint16] */;
  %428 = @func_177(%426, %427) /* ty=(Tensor[(16, 15, 15), bool], Tensor[(16, 15, 15), float64], Tensor[(2, 3, 5), float64], Tensor[(5, 6), float64], Tensor[(2, 3, 5), float64], Tensor[(2, 3, 5), float64]) */;
  %429 = cast(%var_875, dtype="float64") /* ty=Tensor[(10, 360), float64] */;
  %430 = %417.0;
  %431 = maximum(%422, %423) /* ty=Tensor[(7, 10, 13), int64] */;
  %432 = %428.1;
  %433 = log10(%429) /* ty=Tensor[(10, 360), float64] */;
  (%430, meta[relay.Constant][35] /* ty=Tensor[(45), uint32] */, %431, %432, %433)
}

def @func_8007() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), bool]) {
  %438 = fn () -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), bool]) {
    %434 = @func_2677() /* ty=(Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), float64]) */;
    %435 = @func_6540() /* ty=Tensor[(2, 9, 13), float64] */;
    %436 = %434.0;
    %437 = @func_4655() /* ty=Tensor[(2, 9, 13), bool] */;
    (%435, %436, %437)
  };
  %438() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), bool]) */
}

def @func_7135() -> Tensor[(2, 9, 13), bool] {
  %439 = @func_3071() /* ty=(Tensor[(2, 9, 13), bool],) */;
  %439.0
}

def @func_5507() -> (Tensor[(2, 9, 13), float64],) {
  %440 = @func_3445() /* ty=(Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(2, 9, 13), float32]) */;
  %441 = %440.2;
  %442 = cast(%441, dtype="float64") /* ty=Tensor[(2, 9, 13), float64] */;
  %443 = sin(%442) /* ty=Tensor[(2, 9, 13), float64] */;
  (%443,)
}

def @func_4766() -> (Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), float64], Tensor[(45), uint32], Tensor[(910), float32], Tensor[(3600), uint16]) {
  @func_4764() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), float64], Tensor[(45), uint32], Tensor[(910), float32], Tensor[(3600), uint16]) */
}

def @func_5720(%var_5719: Tensor[(576), uint32]) -> (Tensor[(910), float64], Tensor[(4, 12, 12), bool], Tensor[(576), uint32], Tensor[(352, 1), int8], Tensor[(560), int8], Tensor[(2, 9, 13), float64]) {
  %465 = fn (%var_5672: Tensor[(576), uint32]) -> (Tensor[(910), float64], Tensor[(4, 12, 12), bool], Tensor[(576), uint32], Tensor[(352, 1), int8], Tensor[(560), int8], Tensor[(2, 9, 13), float64]) {
    %444 = @func_4764() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), float64], Tensor[(45), uint32], Tensor[(910), float32], Tensor[(3600), uint16]) */;
    %445 = %444.3;
    %446 = cast(%445, dtype="float64") /* ty=Tensor[(910), float64] */;
    %447 = cast(%var_5672, dtype="uint32") /* ty=Tensor[(576), uint32] */;
    %448 = cast(%var_5672, dtype="uint32") /* ty=Tensor[(576), uint32] */;
    %449 = cast(meta[relay.Constant][36] /* ty=Tensor[(352, 1), int8] */, dtype="int8") /* ty=Tensor[(352, 1), int8] */;
    %450 = cast(meta[relay.Constant][37] /* ty=Tensor[(560), int8] */, dtype="int8") /* ty=Tensor[(560), int8] */;
    %451 = reshape(%447, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint32] */;
    %452 = reshape(%448, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint32] */;
    %453 = reshape(%449, newshape=[352]) /* ty=Tensor[(352), int8] */;
    %454 = reshape(%450, newshape=[560]) /* ty=Tensor[(560), int8] */;
    %455 = @func_3837(%451, %452, %453, %454) /* ty=(Tensor[(4, 12, 12), bool], Tensor[(2, 9, 13), float64], Tensor[(88), int8], Tensor[(8, 11, 4), float32], Tensor[(4, 12, 12), float32], Tensor[(352), float64], Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), uint64], Tensor[(4, 12, 12), bool], Tensor[(560), int8], Tensor[(2, 9, 13), float64], Tensor[(14, 4, 910), uint64], Tensor[(16, 1), float64], Tensor[(4, 4), float64]) */;
    %456 = @func_4216() /* ty=Tensor[(2, 9, 13), float64] */;
    %457 = @func_3910() /* ty=Tensor[(2, 9, 13), float64] */;
    %458 = cast(%457, dtype="float64") /* ty=Tensor[(2, 9, 13), float64] */;
    %459 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
    %460 = cast(%456, dtype="float64") /* ty=Tensor[(2, 9, 13), float64] */;
    %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %462 = cosh(%446) /* ty=Tensor[(910), float64] */;
    %463 = %455.8;
    %464 = mod(%460, %461) /* ty=Tensor[(2, 9, 13), float64] */;
    (%462, %463, %var_5672, meta[relay.Constant][36] /* ty=Tensor[(352, 1), int8] */, meta[relay.Constant][37] /* ty=Tensor[(560), int8] */, %464)
  };
  %465(%var_5719) /* ty=(Tensor[(910), float64], Tensor[(4, 12, 12), bool], Tensor[(576), uint32], Tensor[(352, 1), int8], Tensor[(560), int8], Tensor[(2, 9, 13), float64]) */
}

def @func_4037() -> Tensor[(2, 9, 13), float64] {
  %467 = fn () -> Tensor[(2, 9, 13), float64] {
    %466 = @func_2165() /* ty=(Tensor[(2, 9, 13), float64],) */;
    %466.0
  };
  %467() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_5871() -> (Tensor[(2, 9, 13), bool],) {
  @func_5869() /* ty=(Tensor[(2, 9, 13), bool],) */
}

def @func_7387() -> (Tensor[(9, 8, 3), int8], Tensor[(2, 9, 13), bool]) {
  %468 = @func_4934() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(9, 8, 3), uint32], uint32, Tensor[(2, 108), float32]) */;
  %469 = %468.1;
  %470 = cast(meta[relay.Constant][38] /* ty=Tensor[(9, 8, 3), uint32] */, dtype="int8") /* ty=Tensor[(9, 8, 3), int8] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="int8") /* ty=Tensor[(9, 8, 3), int8] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %474 = @func_2484() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), bool]) */;
  %475 = logical_xor(%472, %473) /* ty=Tensor[(9, 8, 3), int8] */;
  %476 = %474.1;
  (%475, %476)
}

def @func_5809(%var_5808: Tensor[(60), float64]) -> (Tensor[(2, 9, 13), float32], Tensor[(12, 5, 1), float64], Tensor[(60), float64], Tensor[(2, 9, 13), float64]) {
  %485 = fn (%var_5800: Tensor[(60), float64]) -> (Tensor[(2, 9, 13), float32], Tensor[(12, 5, 1), float64], Tensor[(60), float64], Tensor[(2, 9, 13), float64]) {
    %477 = @func_4036() /* ty=Tensor[(2, 9, 13), float64] */;
    %478 = cast(%477, dtype="float32") /* ty=Tensor[(2, 9, 13), float32] */;
    %479 = cast(%var_5800, dtype="float64") /* ty=Tensor[(60), float64] */;
    %480 = reshape(%479, newshape=[12, 5, 1]) /* ty=Tensor[(12, 5, 1), float64] */;
    %481 = @func_3011(%480) /* ty=(Tensor[(12, 5, 1), float64],) */;
    %482 = exp(%478) /* ty=Tensor[(2, 9, 13), float32] */;
    %483 = %481.0;
    %484 = @func_2814() /* ty=Tensor[(2, 9, 13), float64] */;
    (%482, %483, %var_5800, %484)
  };
  %485(%var_5808) /* ty=(Tensor[(2, 9, 13), float32], Tensor[(12, 5, 1), float64], Tensor[(60), float64], Tensor[(2, 9, 13), float64]) */
}

def @func_6411(%var_6409: Tensor[(3, 60), float32], %var_6410: Tensor[(480), float32]) -> (Tensor[(2, 9, 13), float64], Tensor[(9, 2, 10), float32], Tensor[(3, 60), float32], Tensor[(2, 9, 13), float64], Tensor[(8, 12, 5), float32], Tensor[(480), float32]) {
  %497 = fn (%var_6367: Tensor[(3, 60), float32], %var_6384: Tensor[(480), float32]) -> (Tensor[(2, 9, 13), float64], Tensor[(9, 2, 10), float32], Tensor[(3, 60), float32], Tensor[(2, 9, 13), float64], Tensor[(8, 12, 5), float32], Tensor[(480), float32]) {
    %486 = cast(%var_6367, dtype="float32") /* ty=Tensor[(3, 60), float32] */;
    %487 = reshape(%486, newshape=[9, 2, 10]) /* ty=Tensor[(9, 2, 10), float32] */;
    %488 = @func_5928(%487) /* ty=(Tensor[(9, 2, 10), float32], Tensor[(2, 3, 5), float64], uint32, Tensor[(216), uint32]) */;
    %489 = cast(%var_6367, dtype="float32") /* ty=Tensor[(3, 60), float32] */;
    %490 = cast(%var_6384, dtype="float32") /* ty=Tensor[(480), float32] */;
    %491 = reshape(%490, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
    %492 = @func_2814() /* ty=Tensor[(2, 9, 13), float64] */;
    %493 = %488.0;
    %494 = log10(%489) /* ty=Tensor[(3, 60), float32] */;
    %495 = @func_5015() /* ty=Tensor[(2, 9, 13), float64] */;
    %496 = @func_3323(%491) /* ty=Tensor[(8, 12, 5), float32] */;
    (%492, %493, %494, %495, %496, %var_6384)
  };
  %497(%var_6409, %var_6410) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(9, 2, 10), float32], Tensor[(3, 60), float32], Tensor[(2, 9, 13), float64], Tensor[(8, 12, 5), float32], Tensor[(480), float32]) */
}

def @func_7236() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool]) {
  %498 = @func_3179() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], int8) */;
  %499 = @func_5624() /* ty=Tensor[(2, 9, 13), float64] */;
  %500 = %498.1;
  (%499, %500)
}

def @func_6462(%var_6460: Tensor[(378), int8]) -> (Tensor[(2, 9, 13), float64], Tensor[(378), uint64], Tensor[(378), int8]) {
  @func_6459(%var_6460) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(378), uint64], Tensor[(378), int8]) */
}

def @func_8085() -> Tensor[(2, 9, 13), float64] {
  %501 = fn () -> Tensor[(2, 9, 13), float64] {
    @func_6330() /* ty=Tensor[(2, 9, 13), float64] */
  };
  %501() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_6096() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2400), float32], uint32, Tensor[(12, 5, 1), float64]) {
  %502 = @func_4166() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(30), float64]) */;
  %503 = @func_5478() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], Tensor[(2, 9, 13), float64]) */;
  %504 = cast(meta[relay.Constant][39] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %505 = cast(meta[relay.Constant][40] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %506 = reshape(%504, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %507 = reshape(%505, newshape=[]) /* ty=uint32 */;
  %508 = @func_3964(%506, %507) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(216), uint32], Tensor[(2400), float32], uint32, Tensor[(2, 108), uint32], Tensor[(50), float32], Tensor[(378), int8], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float32], Tensor[(2, 3, 5), float64], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64], Tensor[(12, 5, 1), float64], Tensor[(3, 20), float64]) */;
  %509 = %508.12;
  %510 = cast(%509, dtype="float64") /* ty=Tensor[(12, 5, 1), float64] */;
  %511 = %502.0;
  %512 = %503.0;
  %513 = tan(%510) /* ty=Tensor[(12, 5, 1), float64] */;
  (%511, %512, meta[relay.Constant][39] /* ty=Tensor[(2400), float32] */, meta[relay.Constant][40] /* ty=uint32 */, %513)
}

def @func_7882(%var_7880: Tensor[(8, 12, 3), float32], %var_7881: Tensor[(8, 12, 3), float32]) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(8, 12, 3), float64], Tensor[(8, 12, 3), float32], Tensor[(8, 12, 3), uint32], Tensor[(8, 12, 3), float64], Tensor[(2, 9, 13), bool]) {
  %540 = fn (%var_7792: Tensor[(8, 12, 3), float32], %var_7848: Tensor[(8, 12, 3), float32]) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(8, 12, 3), float64], Tensor[(8, 12, 3), float32], Tensor[(8, 12, 3), uint32], Tensor[(8, 12, 3), float64], Tensor[(2, 9, 13), bool]) {
    %514 = cast(%var_7792, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
    %515 = tan(%514) /* ty=Tensor[(8, 12, 3), float32] */;
    %516 = cast(%515, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
    %517 = asin(%516) /* ty=Tensor[(8, 12, 3), float32] */;
    %518 = cast(%var_7848, dtype="float64") /* ty=Tensor[(8, 12, 3), float64] */;
    %519 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
    %520 = cast(%517, dtype="float64") /* ty=Tensor[(8, 12, 3), float64] */;
    %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %522 = cast(%515, dtype="float64") /* ty=Tensor[(8, 12, 3), float64] */;
    %523 = rsqrt(%522) /* ty=Tensor[(8, 12, 3), float64] */;
    %524 = cast(%523, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
    %525 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
    %526 = cast(%515, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
    %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %528 = cast(%523, dtype="uint32") /* ty=Tensor[(8, 12, 3), uint32] */;
    %529 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
    %530 = cast(%515, dtype="uint32") /* ty=Tensor[(8, 12, 3), uint32] */;
    %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %532 = cast(%515, dtype="float64") /* ty=Tensor[(8, 12, 3), float64] */;
    %533 = @func_6949() /* ty=Tensor[(2, 9, 13), float64] */;
    %534 = @func_4036() /* ty=Tensor[(2, 9, 13), float64] */;
    %535 = floor_divide(%520, %521) /* ty=Tensor[(8, 12, 3), float64] */;
    %536 = floor_mod(%526, %527) /* ty=Tensor[(8, 12, 3), float32] */;
    %537 = logical_xor(%530, %531) /* ty=Tensor[(8, 12, 3), uint32] */;
    %538 = acos(%532) /* ty=Tensor[(8, 12, 3), float64] */;
    %539 = @func_4655() /* ty=Tensor[(2, 9, 13), bool] */;
    (%533, %534, %535, %536, %537, %538, %539)
  };
  %540(%var_7880, %var_7881) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(8, 12, 3), float64], Tensor[(8, 12, 3), float32], Tensor[(8, 12, 3), uint32], Tensor[(8, 12, 3), float64], Tensor[(2, 9, 13), bool]) */
}

def @func_5269(%var_5267: Tensor[(2, 9, 13), bool]) -> Tensor[(2, 9, 13), int32] {
  @func_5266(%var_5267) /* ty=Tensor[(2, 9, 13), int32] */
}

def @func_3688(%var_3687: Tensor[(2, 9, 13), bool]) -> (Tensor[(2, 9, 13), float32],) {
  %547 = fn (%var_3669: Tensor[(2, 9, 13), bool]) -> (Tensor[(2, 9, 13), float32],) {
    %541 = @func_2736() /* ty=Tensor[(2, 9, 13), bool] */;
    %542 = cast(%var_3669, dtype="float32") /* ty=Tensor[(2, 9, 13), float32] */;
    %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
    %544 = cast(%541, dtype="float32") /* ty=Tensor[(2, 9, 13), float32] */;
    %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %546 = divide(%544, %545) /* ty=Tensor[(2, 9, 13), float32] */;
    (%546,)
  };
  %547(%var_3687) /* ty=(Tensor[(2, 9, 13), float32],) */
}

def @func_2313(%var_2294: Tensor[(2, 9, 13), uint64]) -> Tensor[(2, 9, 13), bool] {
  %548 = @func_2281() /* ty=(Tensor[(2, 9, 13), uint64],) */;
  %549 = %548.0;
  %550 = cast(%var_2294, dtype="bool") /* ty=Tensor[(2, 9, 13), bool] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%549, dtype="bool") /* ty=Tensor[(2, 9, 13), bool] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%552, %553) /* ty=Tensor[(2, 9, 13), bool] */
}

def @func_4636(%var_4628: Tensor[(10, 4, 2), float32]) -> (Tensor[(10, 4, 2), float32],) {
  %554 = cast(%var_4628, dtype="float32") /* ty=Tensor[(10, 4, 2), float32] */;
  %555 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(10, 4, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(meta[relay.Constant][41] /* ty=Tensor[(10, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(10, 4, 2), float32] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %558 = power(%556, %557) /* ty=Tensor[(10, 4, 2), float32] */;
  (%558,)
}

def @func_7183() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
  @func_7181() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */
}

def @func_7327() -> Tensor[(9, 8, 3), float64] {
  @func_7325() /* ty=Tensor[(9, 8, 3), float64] */
}

def @func_3246() -> Tensor[(2, 9, 13), float64] {
  %560 = fn () -> Tensor[(2, 9, 13), float64] {
    %559 = @func_2165() /* ty=(Tensor[(2, 9, 13), float64],) */;
    %559.0
  };
  %560() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_1526(%var_1522: Tensor[(15, 10, 16), float32], %var_1523: uint32, %var_1524: Tensor[(216), uint32], %var_1525: Tensor[(15, 10, 16), uint32]) -> (Tensor[(2, 3, 5), float64], uint32, Tensor[(216), uint32], Tensor[(15, 10, 16), bool], Tensor[(3600), uint16]) {
  @func_1520(%var_1522, %var_1523, %var_1524, %var_1525) /* ty=(Tensor[(2, 3, 5), float64], uint32, Tensor[(216), uint32], Tensor[(15, 10, 16), bool], Tensor[(3600), uint16]) */
}

def @func_2786() -> (Tensor[(2, 9, 13), float64], Tensor[(1, 4, 14), int8], int8) {
  @func_2784() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(1, 4, 14), int8], int8) */
}

def @func_900(%var_898: Tensor[(7, 10, 13), float32], %var_899: Tensor[(10, 360), uint16]) -> (Tensor[(9, 5), bool], Tensor[(45), uint32], Tensor[(7, 10, 13), int64], Tensor[(16, 15, 15), float64], Tensor[(10, 360), float64]) {
  @func_896(%var_898, %var_899) /* ty=(Tensor[(9, 5), bool], Tensor[(45), uint32], Tensor[(7, 10, 13), int64], Tensor[(16, 15, 15), float64], Tensor[(10, 360), float64]) */
}

def @func_5147(%var_5146: Tensor[(13, 1, 5), float32]) -> (Tensor[(13, 1, 5), float64], Tensor[(2, 9, 13), float64], Tensor[(13, 10, 12), float64], Tensor[(1560), int32]) {
  %571 = fn (%var_5120: Tensor[(13, 1, 5), float32]) -> (Tensor[(13, 1, 5), float64], Tensor[(2, 9, 13), float64], Tensor[(13, 10, 12), float64], Tensor[(1560), int32]) {
    %561 = cast(%var_5120, dtype="float32") /* ty=Tensor[(13, 1, 5), float32] */;
    %562 = asinh(%561) /* ty=Tensor[(13, 1, 5), float32] */;
    %563 = cast(%562, dtype="float64") /* ty=Tensor[(13, 1, 5), float64] */;
    %564 = @func_2730() /* ty=(Tensor[(2, 9, 13), float64],) */;
    %565 = cast(meta[relay.Constant][42] /* ty=Tensor[(1560), int32] */, dtype="int32") /* ty=Tensor[(1560), int32] */;
    %566 = reshape(%565, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), int32] */;
    %567 = @func_1171(%566) /* ty=(Tensor[(13, 10, 12), int32], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), bool]) */;
    %568 = sqrt(%563) /* ty=Tensor[(13, 1, 5), float64] */;
    %569 = %564.0;
    %570 = %567.1;
    (%568, %569, %570, meta[relay.Constant][42] /* ty=Tensor[(1560), int32] */)
  };
  %571(%var_5146) /* ty=(Tensor[(13, 1, 5), float64], Tensor[(2, 9, 13), float64], Tensor[(13, 10, 12), float64], Tensor[(1560), int32]) */
}

def @func_6718() -> Tensor[(2, 9, 13), float64] {
  @func_6716() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_3011(%var_3001: Tensor[(12, 5, 1), float64]) -> (Tensor[(12, 5, 1), float64],) {
  %572 = cast(%var_3001, dtype="float64") /* ty=Tensor[(12, 5, 1), float64] */;
  %573 = atan(%572) /* ty=Tensor[(12, 5, 1), float64] */;
  (%573,)
}

def @func_2484() -> (Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), bool]) {
  %574 = @func_2389() /* ty=Tensor[(2, 9, 13), float64] */;
  %575 = cast(%574, dtype="float32") /* ty=Tensor[(2, 9, 13), float32] */;
  %576 = cast(%574, dtype="uint64") /* ty=Tensor[(2, 9, 13), uint64] */;
  %577 = reshape(%576, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), uint64] */;
  %578 = log10(%575) /* ty=Tensor[(2, 9, 13), float32] */;
  %579 = @func_2313(%577) /* ty=Tensor[(2, 9, 13), bool] */;
  (%578, %579)
}

def @func_6716() -> Tensor[(2, 9, 13), float64] {
  @func_3980() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_3982() -> Tensor[(2, 9, 13), float64] {
  @func_3980() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_6020() -> (Tensor[(2, 9, 13), float64],) {
  %580 = @func_5369() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %581 = %580.0;
  (%581,)
}

def @func_3446() -> (Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(2, 9, 13), float32]) {
  %591 = fn () -> (Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(2, 9, 13), float32]) {
    %582 = cast(meta[relay.Constant][43] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
    %583 = reshape(%582, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
    %584 = @func_3(%583) /* ty=(Tensor[(2, 3, 5), float64],) */;
    %585 = @func_2736() /* ty=Tensor[(2, 9, 13), bool] */;
    %586 = cast(%585, dtype="float64") /* ty=Tensor[(2, 9, 13), float64] */;
    %587 = asin(%586) /* ty=Tensor[(2, 9, 13), float64] */;
    %588 = cast(%587, dtype="float32") /* ty=Tensor[(2, 9, 13), float32] */;
    %589 = %584.0;
    %590 = sqrt(%588) /* ty=Tensor[(2, 9, 13), float32] */;
    (%589, meta[relay.Constant][43] /* ty=Tensor[(30), float64] */, %590)
  };
  %591() /* ty=(Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(2, 9, 13), float32]) */
}

def @func_6610() -> (Tensor[(2, 9, 13), float64],) {
  %593 = fn () -> (Tensor[(2, 9, 13), float64],) {
    %592 = @func_2182() /* ty=Tensor[(2, 9, 13), float64] */;
    (%592,)
  };
  %593() /* ty=(Tensor[(2, 9, 13), float64],) */
}

def @func_7683() -> Tensor[(2, 9, 13), float64] {
  %594 = fn () -> Tensor[(2, 9, 13), float64] {
    @func_3980() /* ty=Tensor[(2, 9, 13), float64] */
  };
  %594() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_2650(%var_2584: Tensor[(8, 11, 1), int8], %var_2585: Tensor[(8, 11, 4), int8], %var_2628: int8) -> (Tensor[(8, 11, 4), int8], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(8, 11, 4), float64], Tensor[(50), float32], int8, Tensor[(378), int8]) {
  %595 = cast(%var_2584, dtype="int8") /* ty=Tensor[(8, 11, 1), int8] */;
  %596 = cast(%var_2585, dtype="int8") /* ty=Tensor[(8, 11, 4), int8] */;
  %597 = @func_2165() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %598 = cast(%var_2585, dtype="float64") /* ty=Tensor[(8, 11, 4), float64] */;
  %599 = cosh(%598) /* ty=Tensor[(8, 11, 4), float64] */;
  %600 = cast(%599, dtype="float64") /* ty=Tensor[(8, 11, 4), float64] */;
  %601 = cast(%var_2628, dtype="int8") /* ty=int8 */;
  %602 = cast(meta[relay.Constant][44] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
  %603 = reshape(%601, newshape=[]) /* ty=int8 */;
  %604 = reshape(%602, newshape=[9, 6, 7]) /* ty=Tensor[(9, 6, 7), int8] */;
  %605 = @func_1746(%603, %604) /* ty=(Tensor[(9, 6, 7), bool], Tensor[(1, 5, 10), float32], Tensor[(50), float32]) */;
  %606 = logical_xor(%595, %596) /* ty=Tensor[(8, 11, 4), int8] */;
  %607 = @func_2389() /* ty=Tensor[(2, 9, 13), float64] */;
  %608 = %597.0;
  %609 = sqrt(%600) /* ty=Tensor[(8, 11, 4), float64] */;
  %610 = %605.2;
  (%606, %607, %608, %609, %610, %var_2628, meta[relay.Constant][44] /* ty=Tensor[(378), int8] */)
}

def @func_2870() -> (Tensor[(2, 9, 13), float64],) {
  %613 = fn () -> (Tensor[(2, 9, 13), float64],) {
    %611 = @func_2165() /* ty=(Tensor[(2, 9, 13), float64],) */;
    %612 = %611.0;
    (%612,)
  };
  %613() /* ty=(Tensor[(2, 9, 13), float64],) */
}

def @func_4841(%var_4840: Tensor[(8, 13, 11), float64]) -> (Tensor[(8, 13, 11), float64], Tensor[(2, 3, 5), float64]) {
  %618 = fn (%var_4831: Tensor[(8, 13, 11), float64]) -> (Tensor[(8, 13, 11), float64], Tensor[(2, 3, 5), float64]) {
    %614 = cast(%var_4831, dtype="float64") /* ty=Tensor[(8, 13, 11), float64] */;
    %615 = @func_3445() /* ty=(Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(2, 9, 13), float32]) */;
    %616 = asin(%614) /* ty=Tensor[(8, 13, 11), float64] */;
    %617 = %615.0;
    (%616, %617)
  };
  %618(%var_4840) /* ty=(Tensor[(8, 13, 11), float64], Tensor[(2, 3, 5), float64]) */
}

def @func_6004() -> (Tensor[(2, 9, 13), float64], Tensor[(4, 4), float64], Tensor[(576), uint32], Tensor[(352), int8]) {
  @func_6002() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(4, 4), float64], Tensor[(576), uint32], Tensor[(352), int8]) */
}

def @func_7536() -> (Tensor[(2, 9, 13), bool], Tensor[(12, 3, 1), int64], int64, Tensor[(36), int64], Tensor[(468), int64], Tensor[(2, 9, 13), float64]) {
  %630 = fn () -> (Tensor[(2, 9, 13), bool], Tensor[(12, 3, 1), int64], int64, Tensor[(36), int64], Tensor[(468), int64], Tensor[(2, 9, 13), float64]) {
    %619 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %620 = cast(meta[relay.Constant][45] /* ty=Tensor[(36), int64] */, dtype="int64") /* ty=Tensor[(36), int64] */;
    %621 = cast(meta[relay.Constant][46] /* ty=Tensor[(468), int64] */, dtype="int64") /* ty=Tensor[(468), int64] */;
    %622 = reshape(%619, newshape=[]) /* ty=int64 */;
    %623 = reshape(%620, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), int64] */;
    %624 = reshape(%621, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), int64] */;
    %625 = @func_4383(%622, %623, %624) /* ty=(Tensor[(12, 3, 1), int64], Tensor[(2, 9, 13), bool], Tensor[(12, 3, 13), float32], Tensor[(2, 9, 13), float32]) */;
    %626 = @func_6609() /* ty=(Tensor[(2, 9, 13), float64],) */;
    %627 = @func_2736() /* ty=Tensor[(2, 9, 13), bool] */;
    %628 = %625.0;
    %629 = %626.0;
    (%627, %628, 7 /* ty=int64 */, meta[relay.Constant][45] /* ty=Tensor[(36), int64] */, meta[relay.Constant][46] /* ty=Tensor[(468), int64] */, %629)
  };
  %630() /* ty=(Tensor[(2, 9, 13), bool], Tensor[(12, 3, 1), int64], int64, Tensor[(36), int64], Tensor[(468), int64], Tensor[(2, 9, 13), float64]) */
}

def @func_4027() -> Tensor[(2, 9, 13), float64] {
  %632 = fn () -> Tensor[(2, 9, 13), float64] {
    %631 = @func_2165() /* ty=(Tensor[(2, 9, 13), float64],) */;
    %631.0
  };
  %632() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_8262() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
  @func_8260() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */
}

def @func_3600() -> (Tensor[(2, 9, 13), float64],) {
  %633 = @func_2984() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */;
  %634 = %633.1;
  (%634,)
}

def @func_3967(%var_3965: Tensor[(2400), float32], %var_3966: uint32) -> (Tensor[(2, 9, 13), float64], Tensor[(216), uint32], Tensor[(2400), float32], uint32, Tensor[(2, 108), uint32], Tensor[(50), float32], Tensor[(378), int8], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float32], Tensor[(2, 3, 5), float64], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64], Tensor[(12, 5, 1), float64], Tensor[(3, 20), float64]) {
  %670 = fn (%var_3916: Tensor[(2400), float32], %var_3917: uint32) -> (Tensor[(2, 9, 13), float64], Tensor[(216), uint32], Tensor[(2400), float32], uint32, Tensor[(2, 108), uint32], Tensor[(50), float32], Tensor[(378), int8], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float32], Tensor[(2, 3, 5), float64], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64], Tensor[(12, 5, 1), float64], Tensor[(3, 20), float64]) {
    %635 = cast(%var_3916, dtype="float32") /* ty=Tensor[(2400), float32] */;
    %636 = cast(%var_3917, dtype="uint32") /* ty=uint32 */;
    %637 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 108), uint32] */, dtype="uint32") /* ty=Tensor[(2, 108), uint32] */;
    %638 = cast(%var_3916, dtype="uint32") /* ty=Tensor[(2400), uint32] */;
    %639 = reshape(%635, newshape=[15, 10, 16]) /* ty=Tensor[(15, 10, 16), float32] */;
    %640 = reshape(%636, newshape=[]) /* ty=uint32 */;
    %641 = reshape(%637, newshape=[216]) /* ty=Tensor[(216), uint32] */;
    %642 = reshape(%638, newshape=[15, 10, 16]) /* ty=Tensor[(15, 10, 16), uint32] */;
    %643 = @func_1520(%639, %640, %641, %642) /* ty=(Tensor[(2, 3, 5), float64], uint32, Tensor[(216), uint32], Tensor[(15, 10, 16), bool], Tensor[(3600), uint16]) */;
    %644 = cast(%var_3917, dtype="int8") /* ty=int8 */;
    %645 = cast(meta[relay.Constant][48] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
    %646 = reshape(%644, newshape=[]) /* ty=int8 */;
    %647 = reshape(%645, newshape=[9, 6, 7]) /* ty=Tensor[(9, 6, 7), int8] */;
    %648 = @func_1746(%646, %647) /* ty=(Tensor[(9, 6, 7), bool], Tensor[(1, 5, 10), float32], Tensor[(50), float32]) */;
    %649 = @func_2869() /* ty=(Tensor[(2, 9, 13), float64],) */;
    %650 = @func_2484() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), bool]) */;
    %651 = cast(meta[relay.Constant][49] /* ty=Tensor[(3600), uint16] */, dtype="uint16") /* ty=Tensor[(3600), uint16] */;
    %652 = cast(meta[relay.Constant][49] /* ty=Tensor[(3600), uint16] */, dtype="uint16") /* ty=Tensor[(3600), uint16] */;
    %653 = reshape(%651, newshape=[16, 15, 15]) /* ty=Tensor[(16, 15, 15), uint16] */;
    %654 = reshape(%652, newshape=[16, 15, 15]) /* ty=Tensor[(16, 15, 15), uint16] */;
    %655 = @func_177(%653, %654) /* ty=(Tensor[(16, 15, 15), bool], Tensor[(16, 15, 15), float64], Tensor[(2, 3, 5), float64], Tensor[(5, 6), float64], Tensor[(2, 3, 5), float64], Tensor[(2, 3, 5), float64]) */;
    %656 = %655.2;
    %657 = cast(%656, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
    %658 = reshape(%657, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
    %659 = @func_3(%658) /* ty=(Tensor[(2, 3, 5), float64],) */;
    %660 = cast(meta[relay.Constant][50] /* ty=Tensor[(3, 20), float64] */, dtype="float64") /* ty=Tensor[(3, 20), float64] */;
    %661 = reshape(%660, newshape=[12, 5, 1]) /* ty=Tensor[(12, 5, 1), float64] */;
    %662 = @func_3011(%661) /* ty=(Tensor[(12, 5, 1), float64],) */;
    %663 = @func_3910() /* ty=Tensor[(2, 9, 13), float64] */;
    %664 = %643.2;
    %665 = %648.2;
    %666 = %649.0;
    %667 = %650.0;
    %668 = %659.0;
    %669 = %662.0;
    (%663, %664, %var_3916, %var_3917, meta[relay.Constant][47] /* ty=Tensor[(2, 108), uint32] */, %665, meta[relay.Constant][48] /* ty=Tensor[(378), int8] */, %666, %667, %656, meta[relay.Constant][49] /* ty=Tensor[(3600), uint16] */, %668, %669, meta[relay.Constant][50] /* ty=Tensor[(3, 20), float64] */)
  };
  %670(%var_3965, %var_3966) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(216), uint32], Tensor[(2400), float32], uint32, Tensor[(2, 108), uint32], Tensor[(50), float32], Tensor[(378), int8], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float32], Tensor[(2, 3, 5), float64], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64], Tensor[(12, 5, 1), float64], Tensor[(3, 20), float64]) */
}

def @func_5371() -> (Tensor[(2, 9, 13), float64],) {
  @func_5369() /* ty=(Tensor[(2, 9, 13), float64],) */
}

def @func_3049() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), uint64]) {
  %674 = fn () -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), uint64]) {
    %671 = @func_2281() /* ty=(Tensor[(2, 9, 13), uint64],) */;
    %672 = @func_2814() /* ty=Tensor[(2, 9, 13), float64] */;
    %673 = %671.0;
    (%672, %673)
  };
  %674() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), uint64]) */
}

def @func_2730() -> (Tensor[(2, 9, 13), float64],) {
  %675 = @func_2165() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %676 = %675.0;
  (%676,)
}

def @func_5625() -> Tensor[(2, 9, 13), float64] {
  %677 = fn () -> Tensor[(2, 9, 13), float64] {
    @func_5015() /* ty=Tensor[(2, 9, 13), float64] */
  };
  %677() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_4697(%var_4672: Tensor[(13, 4, 15), float32], %var_4679: Tensor[(13, 4, 15), float32]) -> (Tensor[(13, 4, 15), bool],) {
  %678 = cast(%var_4672, dtype="float32") /* ty=Tensor[(13, 4, 15), float32] */;
  %679 = log10(%678) /* ty=Tensor[(13, 4, 15), float32] */;
  %680 = cast(%var_4679, dtype="bool") /* ty=Tensor[(13, 4, 15), bool] */;
  %681 = shape_of(%679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %682 = cast(%679, dtype="bool") /* ty=Tensor[(13, 4, 15), bool] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %684 = less_equal(%682, %683) /* ty=Tensor[(13, 4, 15), bool] */;
  (%684,)
}

def @func_7587(%var_7585: Tensor[(150, 3), float32], %var_7586: Tensor[(150, 3), float32]) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(150, 3), uint16]) {
  @func_7583(%var_7585, %var_7586) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(150, 3), uint16]) */
}

def @func_3179() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], int8) {
  %685 = @func_2984() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */;
  %686 = %685.1;
  %687 = cast(%686, dtype="uint64") /* ty=Tensor[(2, 9, 13), uint64] */;
  %688 = reshape(%687, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), uint64] */;
  %689 = @func_2784() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(1, 4, 14), int8], int8) */;
  %690 = @func_2313(%688) /* ty=Tensor[(2, 9, 13), bool] */;
  %691 = %689.2;
  (%686, %690, %691)
}

def @func_4998() -> (Tensor[(2, 9, 13), float64],) {
  %692 = @func_4120() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */;
  %693 = %692.0;
  (%693,)
}

def @func_6837(%var_6834: Tensor[(9, 2, 14), float64], %var_6835: float64, %var_6836: Tensor[(30), float64]) -> (Tensor[(9, 2, 14), float64], Tensor[(16, 1), float64], float64, Tensor[(16), float64], Tensor[(2, 9, 13), float64], Tensor[(1, 10, 3), int16], Tensor[(30), float64], Tensor[(640), float32]) {
  @func_6832(%var_6834, %var_6835, %var_6836) /* ty=(Tensor[(9, 2, 14), float64], Tensor[(16, 1), float64], float64, Tensor[(16), float64], Tensor[(2, 9, 13), float64], Tensor[(1, 10, 3), int16], Tensor[(30), float64], Tensor[(640), float32]) */
}

def @func_2165() -> (Tensor[(2, 9, 13), float64],) {
  %694 = cast(meta[relay.Constant][51] /* ty=Tensor[(2, 1, 13), float64] */, dtype="float64") /* ty=Tensor[(2, 1, 13), float64] */;
  %695 = cast(meta[relay.Constant][52] /* ty=Tensor[(2, 9, 13), float64] */, dtype="float64") /* ty=Tensor[(2, 9, 13), float64] */;
  %696 = power(%694, %695) /* ty=Tensor[(2, 9, 13), float64] */;
  %697 = cast(meta[relay.Constant][51] /* ty=Tensor[(2, 1, 13), float64] */, dtype="float64") /* ty=Tensor[(2, 1, 13), float64] */;
  %698 = cast(%696, dtype="float64") /* ty=Tensor[(2, 9, 13), float64] */;
  %699 = subtract(%697, %698) /* ty=Tensor[(2, 9, 13), float64] */;
  (%699,)
}

def @func_4218() -> Tensor[(2, 9, 13), float64] {
  @func_4216() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_7137() -> Tensor[(2, 9, 13), bool] {
  @func_7135() /* ty=Tensor[(2, 9, 13), bool] */
}

def @func_2985() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
  %705 = fn () -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
    %700 = @func_2814() /* ty=Tensor[(2, 9, 13), float64] */;
    %701 = cast(%700, dtype="float64") /* ty=Tensor[(2, 9, 13), float64] */;
    %702 = @func_2182() /* ty=Tensor[(2, 9, 13), float64] */;
    %703 = @func_2182() /* ty=Tensor[(2, 9, 13), float64] */;
    %704 = asinh(%701) /* ty=Tensor[(2, 9, 13), float64] */;
    (%702, %703, %704)
  };
  %705() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */
}

def @func_7181() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
  %706 = @func_4998() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %707 = %706.0;
  %708 = @func_6949() /* ty=Tensor[(2, 9, 13), float64] */;
  (%707, %708)
}

def @func_3980() -> Tensor[(2, 9, 13), float64] {
  %709 = @func_2984() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */;
  %709.1
}

def @func_6022() -> (Tensor[(2, 9, 13), float64],) {
  @func_6020() /* ty=(Tensor[(2, 9, 13), float64],) */
}

def @func_4166() -> (Tensor[(2, 9, 13), float64], Tensor[(30), float64]) {
  %710 = @func_3600() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %711 = @func_3445() /* ty=(Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(2, 9, 13), float32]) */;
  %712 = %710.0;
  %713 = %711.1;
  (%712, %713)
}

def @func_8221() -> (Tensor[(2, 9, 13), uint64],) {
  %716 = fn () -> (Tensor[(2, 9, 13), uint64],) {
    %714 = @func_3048() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), uint64]) */;
    %715 = %714.1;
    (%715,)
  };
  %716() /* ty=(Tensor[(2, 9, 13), uint64],) */
}

def @func_772(%var_771: Tensor[(14, 7, 4), uint16]) -> (Tensor[(14, 7, 4), uint16], Tensor[(2, 3, 5), float64], Tensor[(30), float64]) {
  %726 = fn (%var_749: Tensor[(14, 7, 4), uint16]) -> (Tensor[(14, 7, 4), uint16], Tensor[(2, 3, 5), float64], Tensor[(30), float64]) {
    %717 = cast(meta[relay.Constant][53] /* ty=Tensor[(14, 7, 4), uint16] */, dtype="uint16") /* ty=Tensor[(14, 7, 4), uint16] */;
    %718 = shape_of(%var_749, dtype="int32") /* ty=Tensor[(3), int32] */;
    %719 = cast(%var_749, dtype="uint16") /* ty=Tensor[(14, 7, 4), uint16] */;
    %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %721 = cast(meta[relay.Constant][54] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
    %722 = reshape(%721, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), float64] */;
    %723 = @func_3(%722) /* ty=(Tensor[(2, 3, 5), float64],) */;
    %724 = bitwise_or(%719, %720) /* ty=Tensor[(14, 7, 4), uint16] */;
    %725 = %723.0;
    (%724, %725, meta[relay.Constant][54] /* ty=Tensor[(30), float64] */)
  };
  %726(%var_771) /* ty=(Tensor[(14, 7, 4), uint16], Tensor[(2, 3, 5), float64], Tensor[(30), float64]) */
}

def @func_7513(%var_7510: Tensor[(4, 13, 5), int64], %var_7511: Tensor[(4, 13, 5), int64], %var_7512: Tensor[(234), uint64]) -> (Tensor[(4, 13, 5), int64], Tensor[(2, 9, 13), bool], Tensor[(234), uint64], Tensor[(4, 13, 5), bool]) {
  %740 = fn (%var_7464: Tensor[(4, 13, 5), int64], %var_7465: Tensor[(4, 13, 5), int64], %var_7488: Tensor[(234), uint64]) -> (Tensor[(4, 13, 5), int64], Tensor[(2, 9, 13), bool], Tensor[(234), uint64], Tensor[(4, 13, 5), bool]) {
    %727 = cast(%var_7465, dtype="int64") /* ty=Tensor[(4, 13, 5), int64] */;
    %728 = shape_of(%var_7464, dtype="int32") /* ty=Tensor[(3), int32] */;
    %729 = cast(%var_7464, dtype="int64") /* ty=Tensor[(4, 13, 5), int64] */;
    %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %731 = cast(%var_7488, dtype="uint64") /* ty=Tensor[(234), uint64] */;
    %732 = reshape(%731, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), uint64] */;
    %733 = cast(%var_7464, dtype="bool") /* ty=Tensor[(4, 13, 5), bool] */;
    %734 = shape_of(%var_7465, dtype="int32") /* ty=Tensor[(3), int32] */;
    %735 = cast(%var_7465, dtype="bool") /* ty=Tensor[(4, 13, 5), bool] */;
    %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %737 = minimum(%729, %730) /* ty=Tensor[(4, 13, 5), int64] */;
    %738 = @func_2313(%732) /* ty=Tensor[(2, 9, 13), bool] */;
    %739 = greater(%735, %736) /* ty=Tensor[(4, 13, 5), bool] */;
    (%737, %738, %var_7488, %739)
  };
  %740(%var_7510, %var_7511, %var_7512) /* ty=(Tensor[(4, 13, 5), int64], Tensor[(2, 9, 13), bool], Tensor[(234), uint64], Tensor[(4, 13, 5), bool]) */
}

def @func_3325(%var_3324: Tensor[(8, 12, 5), float32]) -> Tensor[(8, 12, 5), float32] {
  %742 = fn (%var_3298: Tensor[(8, 12, 5), float32]) -> Tensor[(8, 12, 5), float32] {
    %741 = cast(%var_3298, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
    atanh(%741) /* ty=Tensor[(8, 12, 5), float32] */
  };
  %742(%var_3324) /* ty=Tensor[(8, 12, 5), float32] */
}

def @func_2244(%var_2242: Tensor[(126, 3), int8]) -> (Tensor[(2, 9, 13), float64], Tensor[(50), float32], int8, Tensor[(126, 3), int8]) {
  @func_2241(%var_2242) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(50), float32], int8, Tensor[(126, 3), int8]) */
}

def @func_2814() -> Tensor[(2, 9, 13), float64] {
  %743 = @func_2677() /* ty=(Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), float64]) */;
  %743.1
}

def @func_5(%var_4: Tensor[(2, 3, 5), float64]) -> (Tensor[(2, 3, 5), float64],) {
  %746 = fn (%var_0: Tensor[(2, 3, 5), float64]) -> (Tensor[(2, 3, 5), float64],) {
    %744 = cast(%var_0, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
    %745 = asinh(%744) /* ty=Tensor[(2, 3, 5), float64] */;
    (%745,)
  };
  %746(%var_4) /* ty=(Tensor[(2, 3, 5), float64],) */
}

def @func_3486(%var_3484: Tensor[(216), uint32], %var_3485: Tensor[(50), float32]) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 3, 5), float64], Tensor[(2400), float32], uint32, Tensor[(216), uint32], Tensor[(1, 5, 10), float32], Tensor[(50), float32]) {
  %761 = fn (%var_3475: Tensor[(216), uint32], %var_3481: Tensor[(50), float32]) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 3, 5), float64], Tensor[(2400), float32], uint32, Tensor[(216), uint32], Tensor[(1, 5, 10), float32], Tensor[(50), float32]) {
    %747 = cast(meta[relay.Constant][55] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
    %748 = cast(meta[relay.Constant][56] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %749 = cast(%var_3475, dtype="uint32") /* ty=Tensor[(216), uint32] */;
    %750 = cast(meta[relay.Constant][55] /* ty=Tensor[(2400), float32] */, dtype="uint32") /* ty=Tensor[(2400), uint32] */;
    %751 = reshape(%747, newshape=[15, 10, 16]) /* ty=Tensor[(15, 10, 16), float32] */;
    %752 = reshape(%748, newshape=[]) /* ty=uint32 */;
    %753 = reshape(%749, newshape=[216]) /* ty=Tensor[(216), uint32] */;
    %754 = reshape(%750, newshape=[15, 10, 16]) /* ty=Tensor[(15, 10, 16), uint32] */;
    %755 = @func_1520(%751, %752, %753, %754) /* ty=(Tensor[(2, 3, 5), float64], uint32, Tensor[(216), uint32], Tensor[(15, 10, 16), bool], Tensor[(3600), uint16]) */;
    %756 = cast(%var_3481, dtype="float32") /* ty=Tensor[(50), float32] */;
    %757 = reshape(%756, newshape=[1, 5, 10]) /* ty=Tensor[(1, 5, 10), float32] */;
    %758 = @func_2182() /* ty=Tensor[(2, 9, 13), float64] */;
    %759 = %755.0;
    %760 = @func_1654(%757) /* ty=Tensor[(1, 5, 10), float32] */;
    (%758, %759, meta[relay.Constant][55] /* ty=Tensor[(2400), float32] */, meta[relay.Constant][56] /* ty=uint32 */, %var_3475, %760, %var_3481)
  };
  %761(%var_3484, %var_3485) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 3, 5), float64], Tensor[(2400), float32], uint32, Tensor[(216), uint32], Tensor[(1, 5, 10), float32], Tensor[(50), float32]) */
}

def @func_1173(%var_1172: Tensor[(13, 10, 12), int32]) -> (Tensor[(13, 10, 12), int32], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), bool]) {
  %783 = fn (%var_1140: Tensor[(13, 10, 12), int32]) -> (Tensor[(13, 10, 12), int32], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), bool]) {
    %762 = cast(%var_1140, dtype="int32") /* ty=Tensor[(13, 10, 12), int32] */;
    %763 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(13, 10, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %764 = cast(meta[relay.Constant][57] /* ty=Tensor[(13, 10, 12), int32] */, dtype="int32") /* ty=Tensor[(13, 10, 12), int32] */;
    %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %766 = cast(%var_1140, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
    %767 = sin(%766) /* ty=Tensor[(13, 10, 12), float64] */;
    %768 = cast(%767, dtype="float32") /* ty=Tensor[(13, 10, 12), float32] */;
    %769 = sinh(%768) /* ty=Tensor[(13, 10, 12), float32] */;
    %770 = cast(%769, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
    %771 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
    %772 = cast(%767, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
    %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %774 = not_equal(%772, %773) /* ty=Tensor[(13, 10, 12), bool] */;
    %775 = cast(%774, dtype="float64") /* ty=Tensor[(13, 10, 12), float64] */;
    %776 = cast(meta[relay.Constant][57] /* ty=Tensor[(13, 10, 12), int32] */, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
    %777 = shape_of(%774, dtype="int32") /* ty=Tensor[(3), int32] */;
    %778 = cast(%774, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
    %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %780 = subtract(%764, %765) /* ty=Tensor[(13, 10, 12), int32] */;
    %781 = sigmoid(%775) /* ty=Tensor[(13, 10, 12), float64] */;
    %782 = less_equal(%778, %779) /* ty=Tensor[(13, 10, 12), bool] */;
    (%780, %781, %782)
  };
  %783(%var_1172) /* ty=(Tensor[(13, 10, 12), int32], Tensor[(13, 10, 12), float64], Tensor[(13, 10, 12), bool]) */
}

def @func_4216() -> Tensor[(2, 9, 13), float64] {
  @func_3980() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_4383(%var_4299: int64, %var_4300: Tensor[(12, 3, 1), int64], %var_4304: Tensor[(12, 3, 13), int64]) -> (Tensor[(12, 3, 1), int64], Tensor[(2, 9, 13), bool], Tensor[(12, 3, 13), float32], Tensor[(2, 9, 13), float32]) {
  %784 = cast(%var_4299, dtype="int64") /* ty=int64 */;
  %785 = cast(%var_4300, dtype="int64") /* ty=Tensor[(12, 3, 1), int64] */;
  %786 = @func_2484() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), bool]) */;
  %787 = cast(%var_4300, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
  %788 = cast(%var_4304, dtype="float32") /* ty=Tensor[(12, 3, 13), float32] */;
  %789 = floor_mod(%787, %788) /* ty=Tensor[(12, 3, 13), float32] */;
  %790 = cast(%var_4304, dtype="uint8") /* ty=Tensor[(12, 3, 13), uint8] */;
  %791 = shape_of(%789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%789, dtype="uint8") /* ty=Tensor[(12, 3, 13), uint8] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %794 = minimum(%792, %793) /* ty=Tensor[(12, 3, 13), uint8] */;
  %795 = cast(%794, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %796 = acosh(%795) /* ty=Tensor[(12, 3, 13), float64] */;
  %797 = cast(%796, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %798 = erf(%797) /* ty=Tensor[(12, 3, 13), float64] */;
  %799 = cast(%798, dtype="float32") /* ty=Tensor[(12, 3, 13), float32] */;
  %800 = @func_3445() /* ty=(Tensor[(2, 3, 5), float64], Tensor[(30), float64], Tensor[(2, 9, 13), float32]) */;
  %801 = bitwise_xor(%784, %785) /* ty=Tensor[(12, 3, 1), int64] */;
  %802 = %786.1;
  %803 = asin(%799) /* ty=Tensor[(12, 3, 13), float32] */;
  %804 = %800.2;
  (%801, %802, %803, %804)
}

def @func_4859(%var_4857: Tensor[(576), uint32], %var_4858: Tensor[(352), int8]) -> (Tensor[(2, 9, 13), float64], Tensor[(4, 4), float64], Tensor[(576), uint32], Tensor[(352), int8], Tensor[(560), int8]) {
  %816 = fn (%var_4852: Tensor[(576), uint32], %var_4853: Tensor[(352), int8]) -> (Tensor[(2, 9, 13), float64], Tensor[(4, 4), float64], Tensor[(576), uint32], Tensor[(352), int8], Tensor[(560), int8]) {
    %805 = cast(%var_4852, dtype="uint32") /* ty=Tensor[(576), uint32] */;
    %806 = cast(%var_4852, dtype="uint32") /* ty=Tensor[(576), uint32] */;
    %807 = cast(%var_4853, dtype="int8") /* ty=Tensor[(352), int8] */;
    %808 = cast(meta[relay.Constant][58] /* ty=Tensor[(560), int8] */, dtype="int8") /* ty=Tensor[(560), int8] */;
    %809 = reshape(%805, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint32] */;
    %810 = reshape(%806, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint32] */;
    %811 = reshape(%807, newshape=[352]) /* ty=Tensor[(352), int8] */;
    %812 = reshape(%808, newshape=[560]) /* ty=Tensor[(560), int8] */;
    %813 = @func_3837(%809, %810, %811, %812) /* ty=(Tensor[(4, 12, 12), bool], Tensor[(2, 9, 13), float64], Tensor[(88), int8], Tensor[(8, 11, 4), float32], Tensor[(4, 12, 12), float32], Tensor[(352), float64], Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), uint64], Tensor[(4, 12, 12), bool], Tensor[(560), int8], Tensor[(2, 9, 13), float64], Tensor[(14, 4, 910), uint64], Tensor[(16, 1), float64], Tensor[(4, 4), float64]) */;
    %814 = @func_3910() /* ty=Tensor[(2, 9, 13), float64] */;
    %815 = %813.13;
    (%814, %815, %var_4852, %var_4853, meta[relay.Constant][58] /* ty=Tensor[(560), int8] */)
  };
  %816(%var_4857, %var_4858) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(4, 4), float64], Tensor[(576), uint32], Tensor[(352), int8], Tensor[(560), int8]) */
}

def @func_5015() -> Tensor[(2, 9, 13), float64] {
  @func_4026() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_1445(%var_1443: int8) -> (Tensor[(1, 4, 14), int8],) {
  @func_1442(%var_1443) /* ty=(Tensor[(1, 4, 14), int8],) */
}

def @func_6098() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2400), float32], uint32, Tensor[(12, 5, 1), float64]) {
  @func_6096() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2400), float32], uint32, Tensor[(12, 5, 1), float64]) */
}

def @func_5266(%var_5257: Tensor[(2, 9, 13), bool]) -> Tensor[(2, 9, 13), int32] {
  %817 = @func_2736() /* ty=Tensor[(2, 9, 13), bool] */;
  %818 = cast(%var_5257, dtype="int32") /* ty=Tensor[(2, 9, 13), int32] */;
  %819 = shape_of(%817, dtype="int32") /* ty=Tensor[(3), int32] */;
  %820 = cast(%817, dtype="int32") /* ty=Tensor[(2, 9, 13), int32] */;
  %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_xor(%820, %821) /* ty=Tensor[(2, 9, 13), int32] */
}

def @func_6002() -> (Tensor[(2, 9, 13), float64], Tensor[(4, 4), float64], Tensor[(576), uint32], Tensor[(352), int8]) {
  %822 = @func_2677() /* ty=(Tensor[(2, 9, 13), uint64], Tensor[(2, 9, 13), float64]) */;
  %823 = cast(meta[relay.Constant][59] /* ty=Tensor[(576), uint32] */, dtype="uint32") /* ty=Tensor[(576), uint32] */;
  %824 = cast(meta[relay.Constant][60] /* ty=Tensor[(352), int8] */, dtype="int8") /* ty=Tensor[(352), int8] */;
  %825 = reshape(%823, newshape=[576]) /* ty=Tensor[(576), uint32] */;
  %826 = reshape(%824, newshape=[352]) /* ty=Tensor[(352), int8] */;
  %827 = @func_4856(%825, %826) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(4, 4), float64], Tensor[(576), uint32], Tensor[(352), int8], Tensor[(560), int8]) */;
  %828 = %822.1;
  %829 = %827.1;
  (%828, %829, meta[relay.Constant][59] /* ty=Tensor[(576), uint32] */, meta[relay.Constant][60] /* ty=Tensor[(352), int8] */)
}

def @func_4443() -> Tensor[(2, 9, 13), float64] {
  %831 = fn () -> Tensor[(2, 9, 13), float64] {
    %830 = @func_3600() /* ty=(Tensor[(2, 9, 13), float64],) */;
    %830.0
  };
  %831() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_7109() -> Tensor[(2, 9, 13), float64] {
  @func_5015() /* ty=Tensor[(2, 9, 13), float64] */
}

def @func_7444() -> (Tensor[(2, 9, 13), float64],) {
  %832 = @func_2730() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %833 = %832.0;
  %834 = cast(%833, dtype="float64") /* ty=Tensor[(2, 9, 13), float64] */;
  %835 = sigmoid(%834) /* ty=Tensor[(2, 9, 13), float64] */;
  (%835,)
}

def @func_8300(%var_8298: int8) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(1, 4, 14), int8], int8) {
  @func_8297(%var_8298) /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(1, 4, 14), int8], int8) */
}

def @func_5076(%var_5074: uint32, %var_5075: Tensor[(216), uint32]) -> (Tensor[(2, 9, 13), float64], uint32, Tensor[(216), uint32], Tensor[(9, 8, 3), float64]) {
  @func_5072(%var_5074, %var_5075) /* ty=(Tensor[(2, 9, 13), float64], uint32, Tensor[(216), uint32], Tensor[(9, 8, 3), float64]) */
}

def @func_2943(%var_2941: Tensor[(7, 3, 3), int16], %var_2942: Tensor[(1560), int32]) -> (Tensor[(7, 3, 3), int16], Tensor[(13, 10, 12), float64], Tensor[(1560), int32], Tensor[(2, 9, 13), uint64]) {
  @func_2939(%var_2941, %var_2942) /* ty=(Tensor[(7, 3, 3), int16], Tensor[(13, 10, 12), float64], Tensor[(1560), int32], Tensor[(2, 9, 13), uint64]) */
}

def @func_4986(%var_4956: Tensor[(378), int8], %var_4979: Tensor[(378), int8]) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool], int8, Tensor[(378), uint64]) {
  %836 = @func_2389() /* ty=Tensor[(2, 9, 13), float64] */;
  %837 = cast(%836, dtype="uint64") /* ty=Tensor[(2, 9, 13), uint64] */;
  %838 = reshape(%837, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), uint64] */;
  %839 = cast(%var_4956, dtype="int8") /* ty=Tensor[(378), int8] */;
  %840 = reshape(%839, newshape=[378]) /* ty=Tensor[(378), int8] */;
  %841 = @func_4100(%840) /* ty=(Tensor[(2, 9, 13), float64], int8, Tensor[(378), int8], Tensor[(2, 9, 13), float32], Tensor[(8, 12, 5), float32], Tensor[(480), float32], Tensor[(2, 9, 13), uint64]) */;
  %842 = cast(%var_4979, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %843 = shape_of(%var_4956, dtype="int32") /* ty=Tensor[(1), int32] */;
  %844 = cast(%var_4956, dtype="uint64") /* ty=Tensor[(378), uint64] */;
  %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %846 = @func_2313(%838) /* ty=Tensor[(2, 9, 13), bool] */;
  %847 = %841.1;
  %848 = add(%844, %845) /* ty=Tensor[(378), uint64] */;
  (%836, %846, %847, %848)
}

def @main(%var_8318: Tensor[(13, 10, 5), uint8], %var_8319: Tensor[(13, 10, 5), uint8]) -> (Tensor[(13, 10, 5), uint8],) {
  %849 = cast(%var_8319, dtype="uint8") /* ty=Tensor[(13, 10, 5), uint8] */;
  %850 = shape_of(%var_8318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %851 = cast(%var_8318, dtype="uint8") /* ty=Tensor[(13, 10, 5), uint8] */;
  %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %853 = minimum(%851, %852) /* ty=Tensor[(13, 10, 5), uint8] */;
  (%853,)
}

def @func_840(%var_838: Tensor[(9, 5), uint32], %var_839: Tensor[(9, 5), uint32]) -> (Tensor[(9, 5), bool],) {
  @func_836(%var_838, %var_839) /* ty=(Tensor[(9, 5), bool],) */
}

def @func_1520(%var_1471: Tensor[(15, 10, 16), float32], %var_1484: uint32, %var_1485: Tensor[(216), uint32], %var_1498: Tensor[(15, 10, 16), uint32]) -> (Tensor[(2, 3, 5), float64], uint32, Tensor[(216), uint32], Tensor[(15, 10, 16), bool], Tensor[(3600), uint16]) {
  %854 = cast(%var_1484, dtype="uint32") /* ty=uint32 */;
  %855 = cast(%var_1485, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %856 = reshape(%854, newshape=[]) /* ty=uint32 */;
  %857 = reshape(%855, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), uint32] */;
  %858 = @func_672(%856, %857) /* ty=(Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) */;
  %859 = cast(%var_1471, dtype="float32") /* ty=Tensor[(15, 10, 16), float32] */;
  %860 = sqrt(%859) /* ty=Tensor[(15, 10, 16), float32] */;
  %861 = cast(meta[relay.Constant][61] /* ty=Tensor[(15, 10, 16), float32] */, dtype="uint32") /* ty=Tensor[(15, 10, 16), uint32] */;
  %862 = shape_of(%860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %863 = cast(%860, dtype="uint32") /* ty=Tensor[(15, 10, 16), uint32] */;
  %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %865 = left_shift(%863, %864) /* ty=Tensor[(15, 10, 16), uint32] */;
  %866 = cast(%var_1498, dtype="bool") /* ty=Tensor[(15, 10, 16), bool] */;
  %867 = shape_of(%865, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(%865, dtype="bool") /* ty=Tensor[(15, 10, 16), bool] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %870 = cast(%var_1484, dtype="uint32") /* ty=uint32 */;
  %871 = cast(%var_1485, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %872 = reshape(%870, newshape=[]) /* ty=uint32 */;
  %873 = reshape(%871, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), uint32] */;
  %874 = @func_672(%872, %873) /* ty=(Tensor[(9, 8, 3), uint32], Tensor[(3600), uint16], Tensor[(2, 3, 5), float64]) */;
  %875 = %858.2;
  %876 = logical_and(%868, %869) /* ty=Tensor[(15, 10, 16), bool] */;
  %877 = %874.1;
  (%875, %var_1484, %var_1485, %876, %877)
}

def @func_7238() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool]) {
  @func_7236() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), bool]) */
}

def @func_2737() -> Tensor[(2, 9, 13), bool] {
  %879 = fn () -> Tensor[(2, 9, 13), bool] {
    %878 = @func_2484() /* ty=(Tensor[(2, 9, 13), float32], Tensor[(2, 9, 13), bool]) */;
    %878.1
  };
  %879() /* ty=Tensor[(2, 9, 13), bool] */
}

def @func_4569() -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) {
  %880 = @func_3600() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %881 = @func_4120() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64]) */;
  %882 = %880.0;
  %883 = %881.1;
  %884 = @func_2182() /* ty=Tensor[(2, 9, 13), float64] */;
  (%882, %883, %884)
}

def @func_8297(%var_8293: int8) -> (Tensor[(2, 9, 13), float64], Tensor[(2, 9, 13), float64], Tensor[(1, 4, 14), int8], int8) {
  %885 = @func_3600() /* ty=(Tensor[(2, 9, 13), float64],) */;
  %886 = cast(%var_8293, dtype="int8") /* ty=int8 */;
  %887 = reshape(%886, newshape=[]) /* ty=int8 */;
  %888 = @func_1442(%887) /* ty=(Tensor[(1, 4, 14), int8],) */;
  %889 = @func_3980() /* ty=Tensor[(2, 9, 13), float64] */;
  %890 = %885.0;
  %891 = %888.0;
  (%889, %890, %891, %var_8293)
}

def @func_4701(%var_4699: Tensor[(13, 4, 15), float32], %var_4700: Tensor[(13, 4, 15), float32]) -> (Tensor[(13, 4, 15), bool],) {
  @func_4697(%var_4699, %var_4700) /* ty=(Tensor[(13, 4, 15), bool],) */
}

def @func_3071() -> (Tensor[(2, 9, 13), bool],) {
  %892 = @func_2736() /* ty=Tensor[(2, 9, 13), bool] */;
  (%892,)
}

def @func_4168() -> (Tensor[(2, 9, 13), float64], Tensor[(30), float64]) {
  @func_4166() /* ty=(Tensor[(2, 9, 13), float64], Tensor[(30), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen236/build/output.py:2512: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen236/build/output.py", line 2517, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(650) tvmgen_default_fused_reshape_minimum_kernel0(uchar* __restrict__ T_minimum, uchar* __restrict__ placeholder, uchar* __restrict__ placeholder1) {
  T_minimum[(((int)threadIdx.x))] = min(placeholder[(((int)threadIdx.x))], placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

