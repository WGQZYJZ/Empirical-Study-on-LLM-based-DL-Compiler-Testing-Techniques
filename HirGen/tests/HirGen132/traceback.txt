==========mod==========
#[version = "0.0.5"]
def @func_3066() -> (Tensor[(16, 10, 2), bool],) {
  %0 = @func_3031() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %1 = %0.0;
  (%1,)
}

def @func_2157(%var_2143: Tensor[(6, 12, 12), float64]) -> (Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16]) {
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 12, 12), float64] */, dtype="float64") /* ty=Tensor[(6, 12, 12), float64] */;
  %3 = acos(%2) /* ty=Tensor[(6, 12, 12), float64] */;
  %4 = cast(%3, dtype="bool") /* ty=Tensor[(6, 12, 12), bool] */;
  %5 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(6, 12, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 12, 12), float64] */, dtype="bool") /* ty=Tensor[(6, 12, 12), bool] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %8 = cast(%var_2143, dtype="int16") /* ty=Tensor[(6, 12, 12), int16] */;
  %9 = shape_of(%3, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%3, dtype="int16") /* ty=Tensor[(6, 12, 12), int16] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %12 = not_equal(%6, %7) /* ty=Tensor[(6, 12, 12), bool] */;
  %13 = left_shift(%10, %11) /* ty=Tensor[(6, 12, 12), int16] */;
  (%12, %13)
}

def @func_2956(%var_2932: Tensor[(3, 14, 7), float64], %var_2933: Tensor[(3, 14, 7), float64], %var_2944: Tensor[(60), float32], %var_2949: Tensor[(3, 14, 7), float64]) -> (Tensor[(1, 15, 4), float32], Tensor[(60), float32], Tensor[(3, 14, 7), float32]) {
  %14 = cast(%var_2944, dtype="float32") /* ty=Tensor[(60), float32] */;
  %15 = reshape(%14, newshape=[1, 15, 4]) /* ty=Tensor[(1, 15, 4), float32] */;
  %16 = @func_2898(%15) /* ty=(Tensor[(1, 15, 4), float32], Tensor[(16, 10, 2), bool], Tensor[(672), int16], Tensor[(20), float64], Tensor[(672), int16]) */;
  %17 = cast(%var_2933, dtype="float64") /* ty=Tensor[(3, 14, 7), float64] */;
  %18 = shape_of(%var_2932, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%var_2932, dtype="float64") /* ty=Tensor[(3, 14, 7), float64] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %21 = floor_mod(%19, %20) /* ty=Tensor[(3, 14, 7), float64] */;
  %22 = cast(%var_2949, dtype="float32") /* ty=Tensor[(3, 14, 7), float32] */;
  %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%21, dtype="float32") /* ty=Tensor[(3, 14, 7), float32] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %26 = %16.0;
  %27 = minimum(%24, %25) /* ty=Tensor[(3, 14, 7), float32] */;
  (%26, %var_2944, %27)
}

def @func_5733() -> Tensor[(16, 10, 2), bool] {
  %28 = @func_3293() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %28.0
}

def @func_7067() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %29 = @func_2539() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %30 = @func_5324() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %31 = @func_6817() /* ty=Tensor[(16, 10, 2), bool] */;
  %32 = %29.0;
  %33 = %30.0;
  (%31, %32, %33)
}

def @func_5141() -> (Tensor[(16, 10, 2), bool],) {
  %34 = @func_2539() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %35 = %34.0;
  (%35,)
}

def @func_4288() -> Tensor[(16, 10, 2), bool] {
  %36 = @func_3672() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %36.0
}

def @func_6350() -> (Tensor[(16, 10, 2), bool],) {
  %37 = @func_5542() /* ty=Tensor[(16, 10, 2), bool] */;
  (%37,)
}

def @func_5604() -> (Tensor[(16, 10, 2), bool],) {
  %38 = @func_3924() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %39 = %38.0;
  (%39,)
}

def @func_3160(%var_3140: Tensor[(169, 10), uint16], %var_3156: Tensor[(294), float64], %var_3157: Tensor[(60), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(10, 13, 13), uint16], Tensor[(169, 10), uint16], Tensor[(60), float32], Tensor[(294), float64], Tensor[(60), float32]) {
  %40 = cast(%var_3140, dtype="uint16") /* ty=Tensor[(169, 10), uint16] */;
  %41 = cast(%var_3140, dtype="uint16") /* ty=Tensor[(169, 10), uint16] */;
  %42 = reshape(%40, newshape=[10, 13, 13]) /* ty=Tensor[(10, 13, 13), uint16] */;
  %43 = reshape(%41, newshape=[10, 13, 13]) /* ty=Tensor[(10, 13, 13), uint16] */;
  %44 = @func_1190(%42, %43) /* ty=(Tensor[(10, 13, 13), uint16],) */;
  %45 = cast(%var_3156, dtype="float64") /* ty=Tensor[(294), float64] */;
  %46 = cast(%var_3156, dtype="float64") /* ty=Tensor[(294), float64] */;
  %47 = cast(%var_3157, dtype="float32") /* ty=Tensor[(60), float32] */;
  %48 = cast(%var_3156, dtype="float64") /* ty=Tensor[(294), float64] */;
  %49 = reshape(%45, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), float64] */;
  %50 = reshape(%46, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), float64] */;
  %51 = reshape(%47, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %52 = reshape(%48, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), float64] */;
  %53 = @func_2956(%49, %50, %51, %52) /* ty=(Tensor[(1, 15, 4), float32], Tensor[(60), float32], Tensor[(3, 14, 7), float32]) */;
  %54 = @func_2979() /* ty=Tensor[(16, 10, 2), bool] */;
  %55 = %44.0;
  %56 = %53.1;
  (%54, %55, %var_3140, %56, %var_3156, %var_3157)
}

def @func_4401() -> (Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(10), float64]) {
  %57 = @func_3672() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %58 = cast(meta[relay.Constant][1] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
  %59 = reshape(%58, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float64] */;
  %60 = @func_163(%59) /* ty=(Tensor[(10, ?, ?), uint64],) */;
  %61 = %57.0;
  %62 = %60.0;
  (%61, %62, meta[relay.Constant][1] /* ty=Tensor[(10), float64] */)
}

def @func_8350(%var_8336: Tensor[(35), int64], %var_8337: Tensor[(448), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(35), int64], Tensor[(35), int64], Tensor[(448), float32], Tensor[(10, ?, ?), uint64]) {
  %63 = cast(%var_8336, dtype="int64") /* ty=Tensor[(35), int64] */;
  %64 = cast(%var_8337, dtype="float32") /* ty=Tensor[(448), float32] */;
  %65 = reshape(%63, newshape=[35]) /* ty=Tensor[(35), int64] */;
  %66 = reshape(%64, newshape=[4, 112]) /* ty=Tensor[(4, 112), float32] */;
  %67 = @func_7313(%65, %66) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(5, 9, 7), bool], Tensor[(35), int64], Tensor[(4, 112), float32], Tensor[(16, 10, 2), int8]) */;
  %68 = @func_7053() /* ty=(Tensor[(10, ?, ?), uint64],) */;
  %69 = @func_4242() /* ty=Tensor[(16, 10, 2), bool] */;
  %70 = %67.2;
  %71 = %68.0;
  (%69, %70, %var_8336, %var_8337, %71)
}

def @func_5096(%var_5075: Tensor[(13, 14, 1), float64]) -> Tensor[(13, 14, 1), float32] {
  %72 = cast(%var_5075, dtype="float64") /* ty=Tensor[(13, 14, 1), float64] */;
  %73 = sqrt(%72) /* ty=Tensor[(13, 14, 1), float64] */;
  %74 = cast(%73, dtype="float32") /* ty=Tensor[(13, 14, 1), float32] */;
  exp(%74) /* ty=Tensor[(13, 14, 1), float32] */
}

def @func_6412() -> (Tensor[(16, 10, 2), bool],) {
  %75 = @func_4321() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %76 = %75.0;
  (%76,)
}

def @func_1190(%var_1181: Tensor[(10, 13, 13), uint16], %var_1182: Tensor[(10, 13, 13), uint16]) -> (Tensor[(10, 13, 13), uint16],) {
  %77 = cast(%var_1182, dtype="uint16") /* ty=Tensor[(10, 13, 13), uint16] */;
  %78 = shape_of(%var_1181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%var_1181, dtype="uint16") /* ty=Tensor[(10, 13, 13), uint16] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %81 = left_shift(%79, %80) /* ty=Tensor[(10, 13, 13), uint16] */;
  (%81,)
}

def @func_4722() -> (Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(6, 42), float64]) {
  %82 = @func_3066() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %83 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 42), float64] */, dtype="float64") /* ty=Tensor[(6, 42), float64] */;
  %84 = reshape(%83, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %85 = @func_3952(%84) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64]) */;
  %86 = %82.0;
  %87 = %85.1;
  (%86, %87, meta[relay.Constant][2] /* ty=Tensor[(6, 42), float64] */)
}

def @func_5900() -> (Tensor[(16, 10, 2), bool], Tensor[(2, 16, 14), float32], Tensor[(448), float32]) {
  %88 = @func_3031() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %89 = cast(meta[relay.Constant][3] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
  %90 = reshape(%89, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), float32] */;
  %91 = %88.0;
  %92 = @func_961(%90) /* ty=Tensor[(2, 16, 14), float32] */;
  (%91, %92, meta[relay.Constant][3] /* ty=Tensor[(448), float32] */)
}

def @func_6577() -> (Tensor[(16, 10, 2), float32],) {
  %93 = @func_5842() /* ty=Tensor[(16, 10, 2), float32] */;
  (%93,)
}

def @func_6660() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %94 = @func_6153() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %95 = @func_3672() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %96 = %94.0;
  %97 = %95.0;
  (%96, %97)
}

def @func_6982() -> Tensor[(16, 10, 2), float32] {
  %98 = @func_5547() /* ty=(Tensor[(16, 10, 2), float32],) */;
  %98.0
}

def @func_6735() -> (Tensor[(16, 10, 2), bool],) {
  %99 = @func_3351() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %100 = %99.0;
  (%100,)
}

def @func_2979() -> Tensor[(16, 10, 2), bool] {
  @func_2664() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_3924() -> (Tensor[(16, 10, 2), bool],) {
  %101 = @func_3351() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %102 = %101.0;
  (%102,)
}

def @func_4655(%var_4646: Tensor[(16, 10, 2), bool]) -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float32], Tensor[(16, 10, 2), bool]) {
  %103 = @func_3672() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %104 = @func_3924() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %105 = %104.0;
  %106 = cast(%var_4646, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
  %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%105, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %110 = @func_2468() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %111 = %103.0;
  %112 = floor_divide(%108, %109) /* ty=Tensor[(16, 10, 2), float32] */;
  %113 = %110.0;
  (%111, %112, %113)
}

def @func_7470() -> Tensor[(16, 10, 2), bool] {
  %114 = @func_5629() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float32]) */;
  %114.0
}

def @func_6359() -> (Tensor[(3, 7, 12), float64], Tensor[(16, 10, 2), bool]) {
  %115 = @func_4722() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(6, 42), float64]) */;
  %116 = @func_2468() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %117 = %115.1;
  %118 = %116.0;
  (%117, %118)
}

def @func_3952(%var_3946: Tensor[(252), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64]) {
  %119 = cast(%var_3946, dtype="float64") /* ty=Tensor[(252), float64] */;
  %120 = reshape(%119, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %121 = @func_3634(%120) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64]) */;
  %122 = @func_2664() /* ty=Tensor[(16, 10, 2), bool] */;
  %123 = %121.1;
  (%122, %123, %var_3946)
}

def @func_2898(%var_2864: Tensor[(1, 15, 4), float32]) -> (Tensor[(1, 15, 4), float32], Tensor[(16, 10, 2), bool], Tensor[(672), int16], Tensor[(20), float64], Tensor[(672), int16]) {
  %124 = cast(%var_2864, dtype="float32") /* ty=Tensor[(1, 15, 4), float32] */;
  %125 = @func_2744() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %126 = cast(meta[relay.Constant][4] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %127 = cast(meta[relay.Constant][5] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %128 = reshape(%126, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), float64] */;
  %129 = reshape(%127, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %130 = @func_2455(%128, %129) /* ty=(Tensor[(3, 14, 16), int16], Tensor[(672), int16], Tensor[(4, ?, 5), int64]) */;
  %131 = asin(%124) /* ty=Tensor[(1, 15, 4), float32] */;
  %132 = %125.0;
  %133 = %130.1;
  (%131, %132, %133, meta[relay.Constant][4] /* ty=Tensor[(20), float64] */, meta[relay.Constant][5] /* ty=Tensor[(672), int16] */)
}

def @func_2209(%var_2204: Tensor[(3, 7, 12), float64], %var_2205: Tensor[(3, 7, 12), float64]) -> (Tensor[(3, 7, 12), float64],) {
  %134 = cast(%var_2205, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %135 = shape_of(%var_2204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%var_2204, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %138 = mod(%136, %137) /* ty=Tensor[(3, 7, 12), float64] */;
  (%138,)
}

def @func_7954() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %139 = @func_6153() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %140 = @func_5324() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %141 = @func_4965() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %142 = %139.0;
  %143 = %140.0;
  %144 = %141.0;
  (%142, %143, %144)
}

def @func_5241(%var_5214: Tensor[(126, 2), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(16, 10, 2), bool], Tensor[(126, 2), float64], Tensor[(16, 10, 2), bool]) {
  %145 = cast(%var_5214, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
  %146 = cast(%var_5214, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
  %147 = reshape(%145, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %148 = reshape(%146, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %149 = @func_2209(%147, %148) /* ty=(Tensor[(3, 7, 12), float64],) */;
  %150 = cast(%var_5214, dtype="float32") /* ty=Tensor[(126, 2), float32] */;
  %151 = atan(%150) /* ty=Tensor[(126, 2), float32] */;
  %152 = cast(%151, dtype="float32") /* ty=Tensor[(126, 2), float32] */;
  %153 = sqrt(%152) /* ty=Tensor[(126, 2), float32] */;
  %154 = cast(%153, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
  %155 = @func_2637() /* ty=Tensor[(16, 10, 2), bool] */;
  %156 = %149.0;
  %157 = @func_4288() /* ty=Tensor[(16, 10, 2), bool] */;
  %158 = asinh(%154) /* ty=Tensor[(126, 2), float64] */;
  %159 = @func_3911() /* ty=Tensor[(16, 10, 2), bool] */;
  (%155, %156, %157, %158, %159)
}

def @func_4321() -> (Tensor[(16, 10, 2), bool],) {
  %160 = @func_3672() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %161 = %160.0;
  (%161,)
}

def @func_3031() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %162 = @func_2979() /* ty=Tensor[(16, 10, 2), bool] */;
  %163 = @func_2637() /* ty=Tensor[(16, 10, 2), bool] */;
  (%162, %163)
}

def @func_4119() -> (Tensor[(16, 10, 2), float32],) {
  %164 = @func_3850() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %165 = %164.0;
  %166 = cast(%165, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
  %167 = sinh(%166) /* ty=Tensor[(16, 10, 2), float32] */;
  (%167,)
}

def @func_4201() -> (Tensor[(16, 10, 2), bool],) {
  %168 = @func_2468() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %169 = %168.0;
  (%169,)
}

def @func_6877() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %170 = @func_4160() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %171 = %170.0;
  %172 = @func_5733() /* ty=Tensor[(16, 10, 2), bool] */;
  (%171, %172)
}

def @func_5108() -> Tensor[(16, 10, 2), bool] {
  %173 = @func_3293() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %173.0
}

def @func_5953(%var_5937: Tensor[(16, 10, 2), bool]) -> (Tensor[(16, 10, 2), float32], Tensor[(16, 10, 2), bool]) {
  %174 = @func_5108() /* ty=Tensor[(16, 10, 2), bool] */;
  %175 = cast(%var_5937, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %179 = @func_3850() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %180 = divide(%177, %178) /* ty=Tensor[(16, 10, 2), float32] */;
  %181 = %179.0;
  (%180, %181)
}

def @func_7153() -> (Tensor[(16, 3, 4), bool], Tensor[(192, 20), float32]) {
  %182 = cast(meta[relay.Constant][6] /* ty=Tensor[(192, 1), bool] */, dtype="bool") /* ty=Tensor[(192, 1), bool] */;
  %183 = cast(meta[relay.Constant][6] /* ty=Tensor[(192, 1), bool] */, dtype="bool") /* ty=Tensor[(192, 1), bool] */;
  %184 = reshape(%182, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), bool] */;
  %185 = reshape(%183, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), bool] */;
  %186 = @func_6338() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(20), float64], Tensor[(672), int16]) */;
  %187 = %186.4;
  %188 = cast(meta[relay.Constant][6] /* ty=Tensor[(192, 1), bool] */, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %189 = cast(%187, dtype="float32") /* ty=Tensor[(20), float32] */;
  %190 = mod(%188, %189) /* ty=Tensor[(192, 20), float32] */;
  %191 = cast(meta[relay.Constant][6] /* ty=Tensor[(192, 1), bool] */, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %192 = cast(%190, dtype="float32") /* ty=Tensor[(192, 20), float32] */;
  %193 = add(%191, %192) /* ty=Tensor[(192, 20), float32] */;
  %194 = cast(%193, dtype="float32") /* ty=Tensor[(192, 20), float32] */;
  %195 = @func_3681(%184, %185) /* ty=Tensor[(16, 3, 4), bool] */;
  %196 = sinh(%194) /* ty=Tensor[(192, 20), float32] */;
  (%195, %196)
}

def @func_925(%var_909: Tensor[(3, 14, 16), int16], %var_910: Tensor[(3, 14, 16), int16]) -> Tensor[(3, 14, 16), int16] {
  %197 = cast(%var_910, dtype="int16") /* ty=Tensor[(3, 14, 16), int16] */;
  %198 = shape_of(%var_909, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%var_909, dtype="int16") /* ty=Tensor[(3, 14, 16), int16] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  add(%199, %200) /* ty=Tensor[(3, 14, 16), int16] */
}

def @func_7313(%var_7298: Tensor[(35), int64], %var_7299: Tensor[(4, 112), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(5, 9, 7), bool], Tensor[(35), int64], Tensor[(4, 112), float32], Tensor[(16, 10, 2), int8]) {
  %201 = @func_5262() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %202 = cast(%var_7298, dtype="int64") /* ty=Tensor[(35), int64] */;
  %203 = cast(%var_7299, dtype="float32") /* ty=Tensor[(4, 112), float32] */;
  %204 = reshape(%202, newshape=[5, 1, 7]) /* ty=Tensor[(5, 1, 7), int64] */;
  %205 = reshape(%203, newshape=[1, 448]) /* ty=Tensor[(1, 448), float32] */;
  %206 = @func_3469(%204, %205) /* ty=(Tensor[(2, 16, 14), float32], Tensor[(1, 448), float32], Tensor[(5, 9, 7), bool], Tensor[(2, 16, 14), float32]) */;
  %207 = %201.0;
  %208 = cast(%207, dtype="bool") /* ty=Tensor[(16, 10, 2), bool] */;
  %209 = reshape(%208, newshape=[16, 10, 2]) /* ty=Tensor[(16, 10, 2), bool] */;
  %210 = @func_5476(%209) /* ty=(Tensor[(16, 10, 2), int8],) */;
  %211 = %206.2;
  %212 = %210.0;
  (%207, %211, %var_7298, %var_7299, %212)
}

def @func_6074(%var_5993: Tensor[(2, 16, 7), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(126, 2), float64], Tensor[(252, 1), float64], Tensor[(16, 10, 2), bool], Tensor[(2, 16, 7), bool], Tensor[(16, 10, 2), bool]) {
  %213 = @func_2539() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %214 = cast(meta[relay.Constant][7] /* ty=Tensor[(252, 1), float64] */, dtype="float64") /* ty=Tensor[(252, 1), float64] */;
  %215 = reshape(%214, newshape=[126, 2]) /* ty=Tensor[(126, 2), float64] */;
  %216 = @func_5241(%215) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(16, 10, 2), bool], Tensor[(126, 2), float64], Tensor[(16, 10, 2), bool]) */;
  %217 = @func_3293() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %218 = cast(%var_5993, dtype="float32") /* ty=Tensor[(2, 16, 7), float32] */;
  %219 = rsqrt(%218) /* ty=Tensor[(2, 16, 7), float32] */;
  %220 = cast(%var_5993, dtype="float32") /* ty=Tensor[(2, 16, 7), float32] */;
  %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%219, dtype="float32") /* ty=Tensor[(2, 16, 7), float32] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %224 = maximum(%222, %223) /* ty=Tensor[(2, 16, 7), float32] */;
  %225 = cast(%224, dtype="float64") /* ty=Tensor[(2, 16, 7), float64] */;
  %226 = sqrt(%225) /* ty=Tensor[(2, 16, 7), float64] */;
  %227 = cast(%224, dtype="bool") /* ty=Tensor[(2, 16, 7), bool] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="bool") /* ty=Tensor[(2, 16, 7), bool] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %231 = @func_5324() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %232 = %213.0;
  %233 = %216.3;
  %234 = %217.0;
  %235 = less(%229, %230) /* ty=Tensor[(2, 16, 7), bool] */;
  %236 = %231.0;
  (%232, %233, meta[relay.Constant][7] /* ty=Tensor[(252, 1), float64] */, %234, %235, %236)
}

def @func_6908() -> Tensor[(4, 9, 16), float64] {
  %237 = @func_6623() /* ty=(Tensor[(4, 9, 16), float64], Tensor[(3, 7, 12), float64]) */;
  %237.0
}

def @func_2468() -> (Tensor[(16, 10, 2), bool],) {
  %238 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 10, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
  %239 = log(%238) /* ty=Tensor[(16, 10, 2), float32] */;
  %240 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 10, 2), float32] */, dtype="bool") /* ty=Tensor[(16, 10, 2), bool] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%239, dtype="bool") /* ty=Tensor[(16, 10, 2), bool] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %244 = less_equal(%242, %243) /* ty=Tensor[(16, 10, 2), bool] */;
  (%244,)
}

def @func_5547() -> (Tensor[(16, 10, 2), float32],) {
  %245 = @func_3776() /* ty=(Tensor[(16, 10, 2), float32],) */;
  %246 = %245.0;
  (%246,)
}

def @func_2599(%var_2563: Tensor[(1, 8, 8), float32], %var_2595: Tensor[(448), float32]) -> (Tensor[(13, 8, 8), bool], Tensor[(2, 16, 14), float32], Tensor[(448), float32], Tensor[(1, 8, 8), float32]) {
  %247 = cast(%var_2563, dtype="float32") /* ty=Tensor[(1, 8, 8), float32] */;
  %248 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 8, 8), float32] */, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
  %249 = multiply(%247, %248) /* ty=Tensor[(13, 8, 8), float32] */;
  %250 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 8, 8), float32] */, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %251 = cast(%var_2563, dtype="bool") /* ty=Tensor[(1, 8, 8), bool] */;
  %252 = equal(%250, %251) /* ty=Tensor[(13, 8, 8), bool] */;
  %253 = cast(%252, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %254 = shape_of(%249, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%249, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %257 = cast(%var_2595, dtype="float32") /* ty=Tensor[(448), float32] */;
  %258 = reshape(%257, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), float32] */;
  %259 = cast(%var_2563, dtype="float32") /* ty=Tensor[(1, 8, 8), float32] */;
  %260 = log10(%259) /* ty=Tensor[(1, 8, 8), float32] */;
  %261 = cast(%260, dtype="float32") /* ty=Tensor[(1, 8, 8), float32] */;
  %262 = logical_and(%255, %256) /* ty=Tensor[(13, 8, 8), bool] */;
  %263 = @func_961(%258) /* ty=Tensor[(2, 16, 14), float32] */;
  %264 = asin(%261) /* ty=Tensor[(1, 8, 8), float32] */;
  (%262, %263, %var_2595, %264)
}

def @func_8023() -> (Tensor[(16, 10, 2), bool],) {
  %265 = @func_4273() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %266 = %265.0;
  (%266,)
}

def @func_8176() -> Tensor[(16, 10, 2), bool] {
  %267 = @func_6350() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %267.0
}

def @func_6338() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(20), float64], Tensor[(672), int16]) {
  %268 = @func_4321() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %269 = @func_5554() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %270 = @func_4722() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(6, 42), float64]) */;
  %271 = cast(meta[relay.Constant][10] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %272 = reshape(%271, newshape=[56, 12]) /* ty=Tensor[(56, 12), int16] */;
  %273 = @func_4694(%272) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(20), float64], Tensor[(56, 12), int16]) */;
  %274 = %268.0;
  %275 = %269.0;
  %276 = @func_5542() /* ty=Tensor[(16, 10, 2), bool] */;
  %277 = %270.1;
  %278 = %273.2;
  (%274, %275, %276, %277, %278, meta[relay.Constant][10] /* ty=Tensor[(672), int16] */)
}

def @func_4965() -> (Tensor[(16, 10, 2), bool],) {
  %279 = @func_2744() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %280 = %279.0;
  (%280,)
}

def @func_5058() -> Tensor[(16, 10, 2), bool] {
  @func_2637() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_3634(%var_3627: Tensor[(252), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64]) {
  %281 = cast(%var_3627, dtype="float64") /* ty=Tensor[(252), float64] */;
  %282 = cast(%var_3627, dtype="float64") /* ty=Tensor[(252), float64] */;
  %283 = reshape(%281, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %284 = reshape(%282, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %285 = @func_2209(%283, %284) /* ty=(Tensor[(3, 7, 12), float64],) */;
  %286 = @func_2637() /* ty=Tensor[(16, 10, 2), bool] */;
  %287 = %285.0;
  (%286, %287, %var_3627)
}

def @func_4892(%var_4882: Tensor[(1, 5, 8), float32]) -> (Tensor[(?, 5, 8), int16],) {
  %288 = cast(%var_4882, dtype="float32") /* ty=Tensor[(1, 5, 8), float32] */;
  %289 = sin(%288) /* ty=Tensor[(1, 5, 8), float32] */;
  %290 = cast(%289, dtype="int16") /* ty=Tensor[(1, 5, 8), int16] */;
  %291 = shape_of(%var_4882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%var_4882, dtype="int16") /* ty=Tensor[(1, 5, 8), int16] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %294 = maximum(%292, %293) /* ty=Tensor[(?, 5, 8), int16] */;
  (%294,)
}

def @func_3509(%var_3474: Tensor[(11, 3, 7), int16], %var_3475: Tensor[(11, 3, 7), int16], %var_3491: Tensor[(864), float64], %var_3505: Tensor[(15, 4), float32]) -> (Tensor[(11, 3, 7), int16], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(6, 12, 12), bool], Tensor[(864), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(20), float64], Tensor[(15, 4), float32]) {
  %295 = cast(%var_3475, dtype="int16") /* ty=Tensor[(11, 3, 7), int16] */;
  %296 = shape_of(%var_3474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%var_3474, dtype="int16") /* ty=Tensor[(11, 3, 7), int16] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %299 = cast(meta[relay.Constant][11] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %300 = reshape(%299, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float32] */;
  %301 = cast(%var_3491, dtype="float64") /* ty=Tensor[(864), float64] */;
  %302 = reshape(%301, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float64] */;
  %303 = @func_2157(%302) /* ty=(Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16]) */;
  %304 = @func_3293() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %305 = @func_3293() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %306 = @func_2539() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %307 = cast(%var_3505, dtype="float32") /* ty=Tensor[(15, 4), float32] */;
  %308 = reshape(%307, newshape=[1, 15, 4]) /* ty=Tensor[(1, 15, 4), float32] */;
  %309 = @func_2898(%308) /* ty=(Tensor[(1, 15, 4), float32], Tensor[(16, 10, 2), bool], Tensor[(672), int16], Tensor[(20), float64], Tensor[(672), int16]) */;
  %310 = bitwise_or(%297, %298) /* ty=Tensor[(11, 3, 7), int16] */;
  %311 = @func_3112(%300) /* ty=Tensor[(4, 9, 16), float64] */;
  %312 = %303.0;
  %313 = %304.1;
  %314 = %305.0;
  %315 = %306.0;
  %316 = %309.3;
  (%310, %311, meta[relay.Constant][11] /* ty=Tensor[(576), float32] */, %312, %var_3491, %313, %314, %315, %316, %var_3505)
}

def @func_2000(%var_1994: Tensor[(13, 13, 3), float64]) -> Tensor[(13, 13, 3), float64] {
  %317 = cast(%var_1994, dtype="float64") /* ty=Tensor[(13, 13, 3), float64] */;
  atanh(%317) /* ty=Tensor[(13, 13, 3), float64] */
}

def @func_6120(%var_6078: Tensor[(5, 16, 14), int32], %var_6079: Tensor[(5, 16, 14), int32]) -> (Tensor[(5, 16, 14), int32], Tensor[(5, 16, 14), int64], Tensor[(16, 10, 2), float32], Tensor[(5, 16, 14), float64]) {
  %318 = cast(%var_6079, dtype="int32") /* ty=Tensor[(5, 16, 14), int32] */;
  %319 = shape_of(%var_6078, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%var_6078, dtype="int32") /* ty=Tensor[(5, 16, 14), int32] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %322 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 16, 14), int32] */, dtype="int64") /* ty=Tensor[(5, 16, 14), int64] */;
  %323 = shape_of(%var_6079, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%var_6079, dtype="int64") /* ty=Tensor[(5, 16, 14), int64] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %326 = cast(%var_6079, dtype="float64") /* ty=Tensor[(5, 16, 14), float64] */;
  %327 = add(%320, %321) /* ty=Tensor[(5, 16, 14), int32] */;
  %328 = subtract(%324, %325) /* ty=Tensor[(5, 16, 14), int64] */;
  %329 = @func_5842() /* ty=Tensor[(16, 10, 2), float32] */;
  %330 = sinh(%326) /* ty=Tensor[(5, 16, 14), float64] */;
  (%327, %328, %329, %330)
}

def @func_4032() -> Tensor[(16, 10, 2), bool] {
  %331 = @func_2539() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %331.0
}

def @func_3566() -> Tensor[(16, 10, 2), bool] {
  %332 = @func_3293() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %332.0
}

def @func_961(%var_945: Tensor[(2, 16, 14), float32]) -> Tensor[(2, 16, 14), float32] {
  %333 = cast(%var_945, dtype="float32") /* ty=Tensor[(2, 16, 14), float32] */;
  rsqrt(%333) /* ty=Tensor[(2, 16, 14), float32] */
}

def @func_7413() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float64]) {
  %334 = @func_4201() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %335 = %334.0;
  %336 = cast(%335, dtype="float64") /* ty=Tensor[(16, 10, 2), float64] */;
  %337 = @func_2637() /* ty=Tensor[(16, 10, 2), bool] */;
  %338 = sigmoid(%336) /* ty=Tensor[(16, 10, 2), float64] */;
  (%337, %338)
}

def @func_3469(%var_3395: Tensor[(5, 1, 7), int64], %var_3417: Tensor[(1, 448), float32]) -> (Tensor[(2, 16, 14), float32], Tensor[(1, 448), float32], Tensor[(5, 9, 7), bool], Tensor[(2, 16, 14), float32]) {
  %339 = cast(%var_3417, dtype="float32") /* ty=Tensor[(1, 448), float32] */;
  %340 = reshape(%339, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), float32] */;
  %341 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 1, 7), int64] */, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %342 = shape_of(%var_3395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%var_3395, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %345 = greater_equal(%343, %344) /* ty=Tensor[(5, ?, 7), bool] */;
  %346 = cast(%345, dtype="float64") /* ty=Tensor[(5, ?, 7), float64] */;
  %347 = cosh(%346) /* ty=Tensor[(5, ?, 7), float64] */;
  %348 = cast(%347, dtype="float32") /* ty=Tensor[(5, ?, 7), float32] */;
  %349 = tan(%348) /* ty=Tensor[(5, ?, 7), float32] */;
  %350 = cast(%345, dtype="uint16") /* ty=Tensor[(5, ?, 7), uint16] */;
  %351 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 9, 7), bool] */, dtype="uint16") /* ty=Tensor[(5, 9, 7), uint16] */;
  %352 = right_shift(%350, %351) /* ty=Tensor[(5, 9, 7), uint16] */;
  %353 = cast(%349, dtype="bool") /* ty=Tensor[(5, ?, 7), bool] */;
  %354 = cast(%352, dtype="bool") /* ty=Tensor[(5, 9, 7), bool] */;
  %355 = cast(%var_3417, dtype="float32") /* ty=Tensor[(1, 448), float32] */;
  %356 = reshape(%355, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), float32] */;
  %357 = @func_961(%340) /* ty=Tensor[(2, 16, 14), float32] */;
  %358 = equal(%353, %354) /* ty=Tensor[(5, 9, 7), bool] */;
  %359 = @func_961(%356) /* ty=Tensor[(2, 16, 14), float32] */;
  (%357, %var_3417, %358, %359)
}

def @func_3351() -> (Tensor[(16, 10, 2), bool],) {
  %360 = @func_2637() /* ty=Tensor[(16, 10, 2), bool] */;
  (%360,)
}

def @func_3850() -> (Tensor[(16, 10, 2), bool],) {
  %361 = @func_2468() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %362 = %361.0;
  (%362,)
}

def @func_5629() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float32]) {
  %363 = @func_3776() /* ty=(Tensor[(16, 10, 2), float32],) */;
  %364 = @func_2664() /* ty=Tensor[(16, 10, 2), bool] */;
  %365 = %363.0;
  (%364, %365)
}

def @func_8486(%var_8469: Tensor[(576), float32]) -> (Tensor[(56, 12), int16], Tensor[(7, 15, 7), float32], Tensor[(735), float32], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(16, 10, 2), float32]) {
  %366 = @func_3828() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(56, 12), int16]) */;
  %367 = cast(meta[relay.Constant][15] /* ty=Tensor[(735), float32] */, dtype="float32") /* ty=Tensor[(735), float32] */;
  %368 = reshape(%367, newshape=[7, 15, 7]) /* ty=Tensor[(7, 15, 7), float32] */;
  %369 = @func_8221(%368) /* ty=(Tensor[(7, 15, 7), float32], Tensor[(16, 10, 2), bool]) */;
  %370 = cast(%var_8469, dtype="float32") /* ty=Tensor[(576), float32] */;
  %371 = reshape(%370, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float32] */;
  %372 = %366.5;
  %373 = %369.0;
  %374 = @func_3112(%371) /* ty=Tensor[(4, 9, 16), float64] */;
  %375 = @func_5842() /* ty=Tensor[(16, 10, 2), float32] */;
  (%372, %373, meta[relay.Constant][15] /* ty=Tensor[(735), float32] */, %374, %var_8469, %375)
}

def @func_2539() -> (Tensor[(16, 10, 2), bool],) {
  %376 = @func_2468() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %377 = %376.0;
  (%377,)
}

def @func_4475() -> Tensor[(16, 10, 2), bool] {
  %378 = @func_3828() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(56, 12), int16]) */;
  %378.3
}

def @func_3776() -> (Tensor[(16, 10, 2), float32],) {
  %379 = @func_3293() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %380 = %379.0;
  %381 = cast(%380, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
  %382 = acos(%381) /* ty=Tensor[(16, 10, 2), float32] */;
  (%382,)
}

def @func_3258(%var_3205: Tensor[(486), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(384), float32], Tensor[(486), float64], Tensor[(16, 10, 2), float64], Tensor[(16, 10, 2), float32], Tensor[(16, 10, 2), float32]) {
  %383 = cast(meta[relay.Constant][16] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %384 = cast(%var_3205, dtype="float64") /* ty=Tensor[(486), float64] */;
  %385 = reshape(%383, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
  %386 = reshape(%384, newshape=[486]) /* ty=Tensor[(486), float64] */;
  %387 = @func_1473(%385, %386) /* ty=(Tensor[(2, 16, 14), float32], Tensor[(448), float32], Tensor[(2, 12, 16), float64], Tensor[(10), float64], Tensor[(486), float64], Tensor[(10, ?, ?), uint64]) */;
  %388 = @func_2539() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %389 = %388.0;
  %390 = cast(%389, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
  %391 = exp(%390) /* ty=Tensor[(16, 10, 2), float32] */;
  %392 = cast(%391, dtype="float64") /* ty=Tensor[(16, 10, 2), float64] */;
  %393 = cast(%391, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
  %394 = cast(%391, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
  %395 = @func_2664() /* ty=Tensor[(16, 10, 2), bool] */;
  %396 = %387.5;
  %397 = asinh(%392) /* ty=Tensor[(16, 10, 2), float64] */;
  %398 = rsqrt(%393) /* ty=Tensor[(16, 10, 2), float32] */;
  %399 = acosh(%394) /* ty=Tensor[(16, 10, 2), float32] */;
  (%395, %396, meta[relay.Constant][16] /* ty=Tensor[(384), float32] */, %var_3205, %397, %398, %399)
}

def @func_7372() -> Tensor[(16, 10, 2), bool] {
  %400 = @func_3351() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %400.0
}

def @func_5275() -> (Tensor[(16, 10, 2), bool],) {
  %401 = @func_3924() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %402 = %401.0;
  (%402,)
}

def @func_6536(%var_6516: uint8, %var_6529: Tensor[(112, 2), float32]) -> (Tensor[(1, 15), uint8], Tensor[(16, 10, 2), bool], Tensor[(112, 2), float32]) {
  %403 = cast(%var_6516, dtype="uint8") /* ty=uint8 */;
  %404 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 15), uint8] */, dtype="uint8") /* ty=Tensor[(1, 15), uint8] */;
  %405 = cast(%var_6529, dtype="float32") /* ty=Tensor[(112, 2), float32] */;
  %406 = reshape(%405, newshape=[2, 16, 7]) /* ty=Tensor[(2, 16, 7), float32] */;
  %407 = @func_6074(%406) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(126, 2), float64], Tensor[(252, 1), float64], Tensor[(16, 10, 2), bool], Tensor[(2, 16, 7), bool], Tensor[(16, 10, 2), bool]) */;
  %408 = logical_xor(%403, %404) /* ty=Tensor[(1, 15), uint8] */;
  %409 = %407.3;
  (%408, %409, %var_6529)
}

def @func_6817() -> Tensor[(16, 10, 2), bool] {
  %410 = @func_5900() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(2, 16, 14), float32], Tensor[(448), float32]) */;
  %410.0
}

def @func_7506() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 5, 13), float32], Tensor[(1040), int16], Tensor[(486), float64]) {
  %411 = @func_3611() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %412 = cast(meta[relay.Constant][18] /* ty=Tensor[(1040), int16] */, dtype="int16") /* ty=Tensor[(1040), int16] */;
  %413 = cast(meta[relay.Constant][18] /* ty=Tensor[(1040), int16] */, dtype="int16") /* ty=Tensor[(1040), int16] */;
  %414 = cast(meta[relay.Constant][19] /* ty=Tensor[(486), float64] */, dtype="float64") /* ty=Tensor[(486), float64] */;
  %415 = reshape(%412, newshape=[16, 5, 13]) /* ty=Tensor[(16, 5, 13), int16] */;
  %416 = reshape(%413, newshape=[16, 5, 13]) /* ty=Tensor[(16, 5, 13), int16] */;
  %417 = reshape(%414, newshape=[486]) /* ty=Tensor[(486), float64] */;
  %418 = @func_6257(%415, %416, %417) /* ty=(Tensor[(16, 5, 13), float32], Tensor[(16, 5, 13), uint32], Tensor[(16, 5, 13), uint64], Tensor[(16, 10, 2), bool], Tensor[(16, 5, 13), float32], Tensor[(384), float32], Tensor[(486), float64]) */;
  %419 = %411.0;
  %420 = %418.0;
  (%419, %420, meta[relay.Constant][18] /* ty=Tensor[(1040), int16] */, meta[relay.Constant][19] /* ty=Tensor[(486), float64] */)
}

def @func_4160() -> (Tensor[(16, 10, 2), bool],) {
  %421 = @func_3924() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %422 = %421.0;
  (%422,)
}

def @func_2455(%var_2424: Tensor[(4, 1, 5), float64], %var_2428: Tensor[(672), int16]) -> (Tensor[(3, 14, 16), int16], Tensor[(672), int16], Tensor[(4, ?, 5), int64]) {
  %423 = cast(%var_2428, dtype="int16") /* ty=Tensor[(672), int16] */;
  %424 = cast(%var_2428, dtype="int16") /* ty=Tensor[(672), int16] */;
  %425 = reshape(%423, newshape=[3, 14, 16]) /* ty=Tensor[(3, 14, 16), int16] */;
  %426 = reshape(%424, newshape=[3, 14, 16]) /* ty=Tensor[(3, 14, 16), int16] */;
  %427 = cast(%var_2424, dtype="float64") /* ty=Tensor[(4, 1, 5), float64] */;
  %428 = log2(%427) /* ty=Tensor[(4, 1, 5), float64] */;
  %429 = cast(%var_2424, dtype="int64") /* ty=Tensor[(4, 1, 5), int64] */;
  %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%428, dtype="int64") /* ty=Tensor[(4, 1, 5), int64] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %433 = @func_925(%425, %426) /* ty=Tensor[(3, 14, 16), int16] */;
  %434 = maximum(%431, %432) /* ty=Tensor[(4, ?, 5), int64] */;
  (%433, %var_2428, %434)
}

def @func_6506(%var_6493: Tensor[(486), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(384), float32], Tensor[(486), float64], Tensor[(16, 10, 2), bool]) {
  %435 = cast(meta[relay.Constant][20] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %436 = cast(%var_6493, dtype="float64") /* ty=Tensor[(486), float64] */;
  %437 = reshape(%435, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
  %438 = reshape(%436, newshape=[486]) /* ty=Tensor[(486), float64] */;
  %439 = @func_1473(%437, %438) /* ty=(Tensor[(2, 16, 14), float32], Tensor[(448), float32], Tensor[(2, 12, 16), float64], Tensor[(10), float64], Tensor[(486), float64], Tensor[(10, ?, ?), uint64]) */;
  %440 = @func_4931() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %441 = @func_3911() /* ty=Tensor[(16, 10, 2), bool] */;
  %442 = %439.5;
  %443 = %440.0;
  (%441, %442, meta[relay.Constant][20] /* ty=Tensor[(384), float32] */, %var_6493, %443)
}

def @func_3911() -> Tensor[(16, 10, 2), bool] {
  %444 = @func_3351() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %444.0
}

def @func_428(%var_415: Tensor[(9, 6, 9), float64]) -> (Tensor[(10, ?, ?), uint64], Tensor[(10), float64], Tensor[(9, 6, 9), float64]) {
  %445 = cast(meta[relay.Constant][21] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
  %446 = reshape(%445, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float64] */;
  %447 = @func_163(%446) /* ty=(Tensor[(10, ?, ?), uint64],) */;
  %448 = cast(%var_415, dtype="float64") /* ty=Tensor[(9, 6, 9), float64] */;
  %449 = sin(%448) /* ty=Tensor[(9, 6, 9), float64] */;
  %450 = cast(%449, dtype="float64") /* ty=Tensor[(9, 6, 9), float64] */;
  %451 = sigmoid(%450) /* ty=Tensor[(9, 6, 9), float64] */;
  %452 = cast(%451, dtype="float64") /* ty=Tensor[(9, 6, 9), float64] */;
  %453 = %447.0;
  %454 = asinh(%452) /* ty=Tensor[(9, 6, 9), float64] */;
  (%453, meta[relay.Constant][21] /* ty=Tensor[(10), float64] */, %454)
}

def @func_7632() -> (Tensor[(16, 3, 4), bool], Tensor[(16, 3, 4), uint16]) {
  %455 = @func_7153() /* ty=(Tensor[(16, 3, 4), bool], Tensor[(192, 20), float32]) */;
  %456 = %455.0;
  %457 = cast(meta[relay.Constant][22] /* ty=Tensor[(16, 3, 4), bool] */, dtype="bool") /* ty=Tensor[(16, 3, 4), bool] */;
  %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%456, dtype="bool") /* ty=Tensor[(16, 3, 4), bool] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %461 = cast(%456, dtype="uint16") /* ty=Tensor[(16, 3, 4), uint16] */;
  %462 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(16, 3, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(meta[relay.Constant][22] /* ty=Tensor[(16, 3, 4), bool] */, dtype="uint16") /* ty=Tensor[(16, 3, 4), uint16] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %465 = less_equal(%459, %460) /* ty=Tensor[(16, 3, 4), bool] */;
  %466 = right_shift(%463, %464) /* ty=Tensor[(16, 3, 4), uint16] */;
  (%465, %466)
}

def @func_5805() -> Tensor[(16, 10, 2), bool] {
  @func_3911() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_6153() -> (Tensor[(16, 10, 2), bool],) {
  %467 = @func_2664() /* ty=Tensor[(16, 10, 2), bool] */;
  (%467,)
}

def @func_5700(%var_5663: Tensor[(4, 9, 16), float64]) -> (Tensor[(4, 9, 16), bool], Tensor[(4, 9, 16), uint64], Tensor[(3, 7, 12), float64], Tensor[(6, 42), float64]) {
  %468 = @func_3828() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(56, 12), int16]) */;
  %469 = %468.1;
  %470 = cast(%var_5663, dtype="bool") /* ty=Tensor[(4, 9, 16), bool] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="bool") /* ty=Tensor[(4, 9, 16), bool] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %474 = cast(%var_5663, dtype="uint64") /* ty=Tensor[(4, 9, 16), uint64] */;
  %475 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%469, dtype="uint64") /* ty=Tensor[(4, 9, 16), uint64] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %478 = cast(meta[relay.Constant][23] /* ty=Tensor[(6, 42), float64] */, dtype="float64") /* ty=Tensor[(6, 42), float64] */;
  %479 = reshape(%478, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %480 = @func_4844(%479) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %481 = logical_and(%472, %473) /* ty=Tensor[(4, 9, 16), bool] */;
  %482 = bitwise_and(%476, %477) /* ty=Tensor[(4, 9, 16), uint64] */;
  %483 = %480.1;
  (%481, %482, %483, meta[relay.Constant][23] /* ty=Tensor[(6, 42), float64] */)
}

def @func_2664() -> Tensor[(16, 10, 2), bool] {
  @func_2637() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_7995() -> (Tensor[(16, 10, 2), bool],) {
  %484 = @func_7372() /* ty=Tensor[(16, 10, 2), bool] */;
  (%484,)
}

def @func_1473(%var_1418: Tensor[(2, 12, 16), float32], %var_1459: Tensor[(486), float64]) -> (Tensor[(2, 16, 14), float32], Tensor[(448), float32], Tensor[(2, 12, 16), float64], Tensor[(10), float64], Tensor[(486), float64], Tensor[(10, ?, ?), uint64]) {
  %485 = cast(meta[relay.Constant][24] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
  %486 = reshape(%485, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), float32] */;
  %487 = cast(%var_1418, dtype="float32") /* ty=Tensor[(2, 12, 16), float32] */;
  %488 = log(%487) /* ty=Tensor[(2, 12, 16), float32] */;
  %489 = cast(%488, dtype="float64") /* ty=Tensor[(2, 12, 16), float64] */;
  %490 = cast(%var_1459, dtype="float64") /* ty=Tensor[(486), float64] */;
  %491 = reshape(%490, newshape=[9, 6, 9]) /* ty=Tensor[(9, 6, 9), float64] */;
  %492 = @func_428(%491) /* ty=(Tensor[(10, ?, ?), uint64], Tensor[(10), float64], Tensor[(9, 6, 9), float64]) */;
  %493 = %492.1;
  %494 = cast(%493, dtype="float64") /* ty=Tensor[(10), float64] */;
  %495 = reshape(%494, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float64] */;
  %496 = @func_163(%495) /* ty=(Tensor[(10, ?, ?), uint64],) */;
  %497 = @func_961(%486) /* ty=Tensor[(2, 16, 14), float32] */;
  %498 = log10(%489) /* ty=Tensor[(2, 12, 16), float64] */;
  %499 = %496.0;
  (%497, meta[relay.Constant][24] /* ty=Tensor[(448), float32] */, %498, %493, %var_1459, %499)
}

def @func_3267() -> Tensor[(16, 10, 2), bool] {
  @func_2637() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_8296() -> Tensor[(16, 10, 2), bool] {
  %500 = @func_6412() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %500.0
}

def @func_2744() -> (Tensor[(16, 10, 2), bool],) {
  %501 = @func_2468() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %502 = %501.0;
  (%502,)
}

def @func_7053() -> (Tensor[(10, ?, ?), uint64],) {
  %503 = @func_4401() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(10), float64]) */;
  %504 = %503.1;
  (%504,)
}

def @func_5842() -> Tensor[(16, 10, 2), float32] {
  %505 = @func_5629() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float32]) */;
  %505.1
}

def @func_5542() -> Tensor[(16, 10, 2), bool] {
  %506 = @func_3293() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %506.0
}

def @func_3112(%var_3078: Tensor[(4, 9, 16), float32]) -> Tensor[(4, 9, 16), float64] {
  %507 = cast(%var_3078, dtype="float32") /* ty=Tensor[(4, 9, 16), float32] */;
  %508 = atan(%507) /* ty=Tensor[(4, 9, 16), float32] */;
  %509 = cast(%var_3078, dtype="uint8") /* ty=Tensor[(4, 9, 16), uint8] */;
  %510 = shape_of(%508, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(%508, dtype="uint8") /* ty=Tensor[(4, 9, 16), uint8] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %513 = minimum(%511, %512) /* ty=Tensor[(4, 9, 16), uint8] */;
  %514 = cast(%513, dtype="float64") /* ty=Tensor[(4, 9, 16), float64] */;
  %515 = shape_of(%508, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%508, dtype="float64") /* ty=Tensor[(4, 9, 16), float64] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%516, %517) /* ty=Tensor[(4, 9, 16), float64] */
}

def @func_4568(%var_4510: Tensor[(1, 35), int64], %var_4511: Tensor[(56, 8), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(1, 35), int64], Tensor[(56, 8), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(2, 16, 14), uint32]) {
  %518 = @func_4425() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %519 = cast(%var_4510, dtype="int64") /* ty=Tensor[(1, 35), int64] */;
  %520 = cast(%var_4511, dtype="float32") /* ty=Tensor[(56, 8), float32] */;
  %521 = reshape(%519, newshape=[5, 1, 7]) /* ty=Tensor[(5, 1, 7), int64] */;
  %522 = reshape(%520, newshape=[1, 448]) /* ty=Tensor[(1, 448), float32] */;
  %523 = @func_3469(%521, %522) /* ty=(Tensor[(2, 16, 14), float32], Tensor[(1, 448), float32], Tensor[(5, 9, 7), bool], Tensor[(2, 16, 14), float32]) */;
  %524 = %523.0;
  %525 = cast(%524, dtype="float64") /* ty=Tensor[(2, 16, 14), float64] */;
  %526 = shape_of(%var_4511, dtype="int32") /* ty=Tensor[(2), int32] */;
  %527 = cast(%var_4511, dtype="float64") /* ty=Tensor[(56, 8), float64] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %529 = @func_3672() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %530 = @func_4425() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %531 = cast(%524, dtype="float64") /* ty=Tensor[(2, 16, 14), float64] */;
  %532 = tan(%531) /* ty=Tensor[(2, 16, 14), float64] */;
  %533 = cast(%var_4511, dtype="uint32") /* ty=Tensor[(56, 8), uint32] */;
  %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%532, dtype="uint32") /* ty=Tensor[(2, 16, 14), uint32] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %537 = %518.0;
  %538 = subtract(%527, %528) /* ty=Tensor[(56, 8), float64] */;
  %539 = %529.0;
  %540 = %530.0;
  %541 = minimum(%535, %536) /* ty=Tensor[(2, 16, 14), uint32] */;
  (%537, %var_4510, %538, %539, %540, %541)
}

def @func_4273() -> (Tensor[(16, 10, 2), bool],) {
  %542 = @func_2539() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %543 = %542.0;
  (%543,)
}

def @func_7284(%var_7260: Tensor[(507), bool]) -> (Tensor[(20), float64], Tensor[(16, 10, 2), bool], Tensor[(507), bool], Tensor[(4, 9, 16), bool], Tensor[(576), float64]) {
  %544 = @func_6338() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(20), float64], Tensor[(672), int16]) */;
  %545 = @func_5262() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %546 = cast(meta[relay.Constant][25] /* ty=Tensor[(507), float64] */, dtype="float64") /* ty=Tensor[(507), float64] */;
  %547 = reshape(%546, newshape=[13, 13, 3]) /* ty=Tensor[(13, 13, 3), float64] */;
  %548 = @func_2000(%547) /* ty=Tensor[(13, 13, 3), float64] */;
  %549 = cast(%548, dtype="bool") /* ty=Tensor[(13, 13, 3), bool] */;
  %550 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(507), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %551 = cast(meta[relay.Constant][25] /* ty=Tensor[(507), float64] */, dtype="bool") /* ty=Tensor[(507), bool] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?), bool] */;
  %553 = not_equal(%551, %552) /* ty=Tensor[(507), bool] */;
  %554 = cast(%var_7260, dtype="bool") /* ty=Tensor[(507), bool] */;
  %555 = shape_of(%553, dtype="int32") /* ty=Tensor[(1), int32] */;
  %556 = cast(%553, dtype="bool") /* ty=Tensor[(507), bool] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?), bool] */;
  %558 = cast(meta[relay.Constant][26] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %559 = reshape(%558, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float64] */;
  %560 = @func_5700(%559) /* ty=(Tensor[(4, 9, 16), bool], Tensor[(4, 9, 16), uint64], Tensor[(3, 7, 12), float64], Tensor[(6, 42), float64]) */;
  %561 = %544.4;
  %562 = %545.0;
  %563 = logical_and(%556, %557) /* ty=Tensor[(507), bool] */;
  %564 = %560.0;
  (%561, %562, %563, %564, meta[relay.Constant][26] /* ty=Tensor[(576), float64] */)
}

def @func_4242() -> Tensor[(16, 10, 2), bool] {
  %565 = @func_2744() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %565.0
}

def @func_2637() -> Tensor[(16, 10, 2), bool] {
  %566 = @func_2468() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %566.0
}

def @func_2688(%var_2678: Tensor[(64, 1), float32], %var_2679: Tensor[(448), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(2, 16, 14), float32], Tensor[(64, 1), float32], Tensor[(448), float32], Tensor[(16, 10, 2), bool]) {
  %567 = cast(%var_2678, dtype="float32") /* ty=Tensor[(64, 1), float32] */;
  %568 = cast(%var_2679, dtype="float32") /* ty=Tensor[(448), float32] */;
  %569 = reshape(%567, newshape=[1, 8, 8]) /* ty=Tensor[(1, 8, 8), float32] */;
  %570 = reshape(%568, newshape=[448]) /* ty=Tensor[(448), float32] */;
  %571 = @func_2599(%569, %570) /* ty=(Tensor[(13, 8, 8), bool], Tensor[(2, 16, 14), float32], Tensor[(448), float32], Tensor[(1, 8, 8), float32]) */;
  %572 = @func_2539() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %573 = @func_2637() /* ty=Tensor[(16, 10, 2), bool] */;
  %574 = %571.1;
  %575 = %572.0;
  (%573, %574, %var_2678, %var_2679, %575)
}

def @func_3707(%var_3687: Tensor[(5, 14, 16), float64]) -> (Tensor[(5, 14, 16), float64], Tensor[(16, 10, 2), bool]) {
  %576 = cast(%var_3687, dtype="float64") /* ty=Tensor[(5, 14, 16), float64] */;
  %577 = sqrt(%576) /* ty=Tensor[(5, 14, 16), float64] */;
  %578 = @func_3566() /* ty=Tensor[(16, 10, 2), bool] */;
  (%577, %578)
}

def @func_7651() -> Tensor[(16, 10, 2), bool] {
  %579 = @func_6412() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %579.0
}

def @func_8421(%var_8401: Tensor[(10), float64]) -> (Tensor[(16, 10, 2), float32], Tensor[(10, ?, ?), uint64], Tensor[(10), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %580 = @func_3776() /* ty=(Tensor[(16, 10, 2), float32],) */;
  %581 = cast(%var_8401, dtype="float64") /* ty=Tensor[(10), float64] */;
  %582 = reshape(%581, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float64] */;
  %583 = @func_163(%582) /* ty=(Tensor[(10, ?, ?), uint64],) */;
  %584 = @func_5784() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %585 = %580.0;
  %586 = %583.0;
  %587 = @func_4032() /* ty=Tensor[(16, 10, 2), bool] */;
  %588 = %584.0;
  (%585, %586, %var_8401, %587, %588)
}

def @func_4921(%var_4908: Tensor[(4, 10, 1), float32]) -> Tensor[(4, 10, 1), float32] {
  %589 = cast(%var_4908, dtype="float32") /* ty=Tensor[(4, 10, 1), float32] */;
  %590 = exp(%589) /* ty=Tensor[(4, 10, 1), float32] */;
  %591 = cast(%590, dtype="float32") /* ty=Tensor[(4, 10, 1), float32] */;
  sqrt(%591) /* ty=Tensor[(4, 10, 1), float32] */
}

def @func_3672() -> (Tensor[(16, 10, 2), bool],) {
  %592 = @func_3267() /* ty=Tensor[(16, 10, 2), bool] */;
  (%592,)
}

def @func_3611() -> (Tensor[(16, 10, 2), bool],) {
  %593 = @func_3066() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %594 = %593.0;
  (%594,)
}

def @func_5262() -> (Tensor[(16, 10, 2), bool],) {
  %595 = @func_3267() /* ty=Tensor[(16, 10, 2), bool] */;
  (%595,)
}

def @func_4844(%var_4804: Tensor[(252), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %596 = @func_4273() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %597 = cast(%var_4804, dtype="float64") /* ty=Tensor[(252), float64] */;
  %598 = reshape(%597, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %599 = @func_3634(%598) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64]) */;
  %600 = %596.0;
  %601 = %599.1;
  %602 = @func_4475() /* ty=Tensor[(16, 10, 2), bool] */;
  %603 = @func_2637() /* ty=Tensor[(16, 10, 2), bool] */;
  %604 = @func_4475() /* ty=Tensor[(16, 10, 2), bool] */;
  (%600, %601, %var_4804, %602, %603, %604)
}

def @func_4931() -> (Tensor[(16, 10, 2), bool],) {
  %605 = @func_2744() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %606 = %605.0;
  (%606,)
}

def @func_4425() -> (Tensor[(16, 10, 2), bool],) {
  %607 = @func_2979() /* ty=Tensor[(16, 10, 2), bool] */;
  (%607,)
}

def @func_6623() -> (Tensor[(4, 9, 16), float64], Tensor[(3, 7, 12), float64]) {
  %608 = @func_3828() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(56, 12), int16]) */;
  %609 = @func_6359() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(16, 10, 2), bool]) */;
  %610 = %608.1;
  %611 = %609.0;
  (%610, %611)
}

def @func_163(%var_129: Tensor[(10, 1, 1), float64]) -> (Tensor[(10, ?, ?), uint64],) {
  %612 = cast(%var_129, dtype="float64") /* ty=Tensor[(10, 1, 1), float64] */;
  %613 = sigmoid(%612) /* ty=Tensor[(10, 1, 1), float64] */;
  %614 = cast(%var_129, dtype="uint64") /* ty=Tensor[(10, 1, 1), uint64] */;
  %615 = shape_of(%613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%613, dtype="uint64") /* ty=Tensor[(10, 1, 1), uint64] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %618 = logical_xor(%616, %617) /* ty=Tensor[(10, ?, ?), uint64] */;
  (%618,)
}

def @func_7592(%var_7584: Tensor[(672), int16]) -> (Tensor[(192, 20), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(672), int16]) {
  %619 = @func_7153() /* ty=(Tensor[(16, 3, 4), bool], Tensor[(192, 20), float32]) */;
  %620 = %619.1;
  %621 = cast(%620, dtype="float32") /* ty=Tensor[(192, 20), float32] */;
  %622 = @func_6660() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %623 = cast(%var_7584, dtype="int16") /* ty=Tensor[(672), int16] */;
  %624 = cast(%var_7584, dtype="int16") /* ty=Tensor[(672), int16] */;
  %625 = reshape(%623, newshape=[3, 14, 16]) /* ty=Tensor[(3, 14, 16), int16] */;
  %626 = reshape(%624, newshape=[3, 14, 16]) /* ty=Tensor[(3, 14, 16), int16] */;
  %627 = sqrt(%621) /* ty=Tensor[(192, 20), float32] */;
  %628 = %622.0;
  %629 = @func_925(%625, %626) /* ty=Tensor[(3, 14, 16), int16] */;
  (%627, %628, %629, %var_7584)
}

def @func_8108(%var_8083: Tensor[(3, 6, 10), float32], %var_8084: Tensor[(3, 6, 10), float32]) -> Tensor[(3, 6, 10), uint16] {
  %630 = cast(%var_8084, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
  %631 = shape_of(%var_8083, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%var_8083, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %634 = floor_mod(%632, %633) /* ty=Tensor[(3, 6, 10), float32] */;
  %635 = cast(%var_8084, dtype="uint16") /* ty=Tensor[(3, 6, 10), uint16] */;
  %636 = shape_of(%634, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%634, dtype="uint16") /* ty=Tensor[(3, 6, 10), uint16] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  right_shift(%637, %638) /* ty=Tensor[(3, 6, 10), uint16] */
}

def @func_4694(%var_4691: Tensor[(56, 12), int16]) -> (Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(20), float64], Tensor[(56, 12), int16]) {
  %639 = @func_4160() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %640 = cast(meta[relay.Constant][27] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %641 = cast(%var_4691, dtype="int16") /* ty=Tensor[(56, 12), int16] */;
  %642 = reshape(%640, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), float64] */;
  %643 = reshape(%641, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %644 = @func_2455(%642, %643) /* ty=(Tensor[(3, 14, 16), int16], Tensor[(672), int16], Tensor[(4, ?, 5), int64]) */;
  %645 = %639.0;
  %646 = %644.0;
  (%645, %646, meta[relay.Constant][27] /* ty=Tensor[(20), float64] */, %var_4691)
}

def @func_7863(%var_7841: Tensor[(13, 4, 5), int32], %var_7842: Tensor[(13, 4, 5), int32], %var_7856: Tensor[(4, 60), uint32]) -> (Tensor[(13, 4, 5), bool], Tensor[(3, 7, 12), float64], Tensor[(4, 60), uint32], Tensor[(252), float64], Tensor[(4, 10, 1), float32], Tensor[(40), float32]) {
  %647 = cast(%var_7842, dtype="int32") /* ty=Tensor[(13, 4, 5), int32] */;
  %648 = shape_of(%var_7841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%var_7841, dtype="int32") /* ty=Tensor[(13, 4, 5), int32] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %651 = bitwise_xor(%649, %650) /* ty=Tensor[(13, 4, 5), int32] */;
  %652 = cast(%651, dtype="bool") /* ty=Tensor[(13, 4, 5), bool] */;
  %653 = shape_of(%var_7841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%var_7841, dtype="bool") /* ty=Tensor[(13, 4, 5), bool] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %656 = cast(%var_7856, dtype="uint32") /* ty=Tensor[(4, 60), uint32] */;
  %657 = cast(%var_7856, dtype="uint32") /* ty=Tensor[(4, 60), uint32] */;
  %658 = cast(%var_7856, dtype="uint32") /* ty=Tensor[(4, 60), uint32] */;
  %659 = cast(meta[relay.Constant][28] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %660 = reshape(%656, newshape=[4, 6, 10]) /* ty=Tensor[(4, 6, 10), uint32] */;
  %661 = reshape(%657, newshape=[4, 6, 10]) /* ty=Tensor[(4, 6, 10), uint32] */;
  %662 = reshape(%658, newshape=[4, 6, 10]) /* ty=Tensor[(4, 6, 10), uint32] */;
  %663 = reshape(%659, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %664 = @func_7567(%660, %661, %662, %663) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(4, 6, 10), int32], Tensor[(3, 7, 12), float64], Tensor[(252), float64], Tensor[(4, 6, 10), float32], Tensor[(16, 10, 2), bool]) */;
  %665 = cast(meta[relay.Constant][29] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %666 = reshape(%665, newshape=[4, 10, 1]) /* ty=Tensor[(4, 10, 1), float32] */;
  %667 = less_equal(%654, %655) /* ty=Tensor[(13, 4, 5), bool] */;
  %668 = %664.2;
  %669 = @func_4921(%666) /* ty=Tensor[(4, 10, 1), float32] */;
  (%667, %668, %var_7856, meta[relay.Constant][28] /* ty=Tensor[(252), float64] */, %669, meta[relay.Constant][29] /* ty=Tensor[(40), float32] */)
}

def @func_5784() -> (Tensor[(16, 10, 2), bool],) {
  %670 = @func_4201() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %671 = %670.0;
  (%671,)
}

def @main(%var_8517: Tensor[(486), float64], %var_8568: Tensor[(672), int16]) -> (Tensor[(16, 10, 2), bool], Tensor[(1120), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(10, ?, 486), uint16], Tensor[(192, 20), float32], Tensor[(672), int16], Tensor[(10, ?, 486), int32]) {
  %672 = @func_4201() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %673 = cast(meta[relay.Constant][30] /* ty=Tensor[(1120), int32] */, dtype="int32") /* ty=Tensor[(1120), int32] */;
  %674 = cast(meta[relay.Constant][30] /* ty=Tensor[(1120), int32] */, dtype="int32") /* ty=Tensor[(1120), int32] */;
  %675 = reshape(%673, newshape=[5, 16, 14]) /* ty=Tensor[(5, 16, 14), int32] */;
  %676 = reshape(%674, newshape=[5, 16, 14]) /* ty=Tensor[(5, 16, 14), int32] */;
  %677 = @func_6120(%675, %676) /* ty=(Tensor[(5, 16, 14), int32], Tensor[(5, 16, 14), int64], Tensor[(16, 10, 2), float32], Tensor[(5, 16, 14), float64]) */;
  %678 = %677.3;
  %679 = cast(%678, dtype="float64") /* ty=Tensor[(5, 16, 14), float64] */;
  %680 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(1120), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %681 = cast(meta[relay.Constant][30] /* ty=Tensor[(1120), int32] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?), float64] */;
  %683 = @func_6735() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %684 = @func_5262() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %685 = cast(%var_8517, dtype="float64") /* ty=Tensor[(486), float64] */;
  %686 = reshape(%685, newshape=[486]) /* ty=Tensor[(486), float64] */;
  %687 = @func_3258(%686) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(384), float32], Tensor[(486), float64], Tensor[(16, 10, 2), float64], Tensor[(16, 10, 2), float32], Tensor[(16, 10, 2), float32]) */;
  %688 = %687.1;
  %689 = cast(%var_8517, dtype="int8") /* ty=Tensor[(486), int8] */;
  %690 = cast(%688, dtype="int8") /* ty=Tensor[(10, ?, ?), int8] */;
  %691 = bitwise_and(%689, %690) /* ty=Tensor[(10, ?, 486), int8] */;
  %692 = cast(%691, dtype="float64") /* ty=Tensor[(10, ?, 486), float64] */;
  %693 = atanh(%692) /* ty=Tensor[(10, ?, 486), float64] */;
  %694 = cast(%691, dtype="uint16") /* ty=Tensor[(10, ?, 486), uint16] */;
  %695 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%693, dtype="uint16") /* ty=Tensor[(10, ?, 486), uint16] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %698 = cast(%var_8568, dtype="int16") /* ty=Tensor[(672), int16] */;
  %699 = reshape(%698, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %700 = @func_7592(%699) /* ty=(Tensor[(192, 20), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(672), int16]) */;
  %701 = cast(%691, dtype="int32") /* ty=Tensor[(10, ?, 486), int32] */;
  %702 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %703 = cast(%693, dtype="int32") /* ty=Tensor[(10, ?, 486), int32] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %705 = %672.0;
  %706 = floor_divide(%681, %682) /* ty=Tensor[(1120), float64] */;
  %707 = %683.0;
  %708 = %684.0;
  %709 = maximum(%696, %697) /* ty=Tensor[(10, ?, 486), uint16] */;
  %710 = %700.0;
  %711 = multiply(%703, %704) /* ty=Tensor[(10, ?, 486), int32] */;
  (%705, %706, %707, %708, %709, %710, %var_8568, %711)
}

def @func_5324() -> (Tensor[(16, 10, 2), bool],) {
  %712 = @func_4242() /* ty=Tensor[(16, 10, 2), bool] */;
  (%712,)
}

def @func_7567(%var_7523: Tensor[(4, 6, 10), uint32], %var_7524: Tensor[(4, 6, 10), uint32], %var_7538: Tensor[(4, 6, 10), uint32], %var_7543: Tensor[(252), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(4, 6, 10), int32], Tensor[(3, 7, 12), float64], Tensor[(252), float64], Tensor[(4, 6, 10), float32], Tensor[(16, 10, 2), bool]) {
  %713 = cast(%var_7538, dtype="int32") /* ty=Tensor[(4, 6, 10), int32] */;
  %714 = shape_of(%var_7523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(%var_7523, dtype="int32") /* ty=Tensor[(4, 6, 10), int32] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %717 = cast(%var_7543, dtype="float64") /* ty=Tensor[(252), float64] */;
  %718 = cast(%var_7543, dtype="float64") /* ty=Tensor[(252), float64] */;
  %719 = reshape(%717, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %720 = reshape(%718, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %721 = @func_2209(%719, %720) /* ty=(Tensor[(3, 7, 12), float64],) */;
  %722 = cast(%var_7524, dtype="uint32") /* ty=Tensor[(4, 6, 10), uint32] */;
  %723 = shape_of(%var_7523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%var_7523, dtype="uint32") /* ty=Tensor[(4, 6, 10), uint32] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %726 = add(%724, %725) /* ty=Tensor[(4, 6, 10), uint32] */;
  %727 = cast(%726, dtype="float32") /* ty=Tensor[(4, 6, 10), float32] */;
  %728 = @func_3351() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %729 = @func_7372() /* ty=Tensor[(16, 10, 2), bool] */;
  %730 = right_shift(%715, %716) /* ty=Tensor[(4, 6, 10), int32] */;
  %731 = %721.0;
  %732 = log10(%727) /* ty=Tensor[(4, 6, 10), float32] */;
  %733 = %728.0;
  (%729, %730, %731, %var_7543, %732, %733)
}

def @func_5554() -> (Tensor[(16, 10, 2), bool],) {
  %734 = @func_2979() /* ty=Tensor[(16, 10, 2), bool] */;
  (%734,)
}

def @func_7891(%var_7885: Tensor[(2, 4, 16), float64]) -> (Tensor[(2, 4, 16), float64],) {
  %735 = cast(%var_7885, dtype="float64") /* ty=Tensor[(2, 4, 16), float64] */;
  %736 = atanh(%735) /* ty=Tensor[(2, 4, 16), float64] */;
  (%736,)
}

def @func_8221(%var_8197: Tensor[(7, 15, 7), float32]) -> (Tensor[(7, 15, 7), float32], Tensor[(16, 10, 2), bool]) {
  %737 = cast(%var_8197, dtype="float32") /* ty=Tensor[(7, 15, 7), float32] */;
  %738 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(7, 15, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(meta[relay.Constant][31] /* ty=Tensor[(7, 15, 7), float32] */, dtype="float32") /* ty=Tensor[(7, 15, 7), float32] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %741 = @func_5262() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %742 = minimum(%739, %740) /* ty=Tensor[(7, 15, 7), float32] */;
  %743 = %741.0;
  (%742, %743)
}

def @func_3293() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %744 = @func_3031() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %745 = @func_2744() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %746 = %744.1;
  %747 = %745.0;
  (%746, %747)
}

def @func_4619(%var_4611: Tensor[(15, 16, 7), int64]) -> (Tensor[(15, 16, 7), bool],) {
  %748 = cast(%var_4611, dtype="bool") /* ty=Tensor[(15, 16, 7), bool] */;
  %749 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(15, 16, 7), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 16, 7), int64] */, dtype="bool") /* ty=Tensor[(15, 16, 7), bool] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %752 = greater(%750, %751) /* ty=Tensor[(15, 16, 7), bool] */;
  (%752,)
}

def @func_3681(%var_3674: Tensor[(16, 3, 4), bool], %var_3675: Tensor[(16, 3, 4), bool]) -> Tensor[(16, 3, 4), bool] {
  %753 = cast(%var_3675, dtype="bool") /* ty=Tensor[(16, 3, 4), bool] */;
  %754 = shape_of(%var_3674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%var_3674, dtype="bool") /* ty=Tensor[(16, 3, 4), bool] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%755, %756) /* ty=Tensor[(16, 3, 4), bool] */
}

def @func_6257(%var_6189: Tensor[(16, 5, 13), int16], %var_6190: Tensor[(16, 5, 13), int16], %var_6223: Tensor[(486), float64]) -> (Tensor[(16, 5, 13), float32], Tensor[(16, 5, 13), uint32], Tensor[(16, 5, 13), uint64], Tensor[(16, 10, 2), bool], Tensor[(16, 5, 13), float32], Tensor[(384), float32], Tensor[(486), float64]) {
  %757 = cast(%var_6190, dtype="bool") /* ty=Tensor[(16, 5, 13), bool] */;
  %758 = shape_of(%var_6189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%var_6189, dtype="bool") /* ty=Tensor[(16, 5, 13), bool] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %761 = greater_equal(%759, %760) /* ty=Tensor[(16, 5, 13), bool] */;
  %762 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 5, 13), bool] */, dtype="float32") /* ty=Tensor[(16, 5, 13), float32] */;
  %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%761, dtype="float32") /* ty=Tensor[(16, 5, 13), float32] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %766 = cast(%761, dtype="uint32") /* ty=Tensor[(16, 5, 13), uint32] */;
  %767 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(16, 5, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 5, 13), bool] */, dtype="uint32") /* ty=Tensor[(16, 5, 13), uint32] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %770 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 5, 13), bool] */, dtype="uint64") /* ty=Tensor[(16, 5, 13), uint64] */;
  %771 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%761, dtype="uint64") /* ty=Tensor[(16, 5, 13), uint64] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %774 = @func_3672() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %775 = cast(%var_6190, dtype="float32") /* ty=Tensor[(16, 5, 13), float32] */;
  %776 = cast(%var_6223, dtype="float64") /* ty=Tensor[(486), float64] */;
  %777 = reshape(%776, newshape=[486]) /* ty=Tensor[(486), float64] */;
  %778 = @func_3258(%777) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(384), float32], Tensor[(486), float64], Tensor[(16, 10, 2), float64], Tensor[(16, 10, 2), float32], Tensor[(16, 10, 2), float32]) */;
  %779 = minimum(%764, %765) /* ty=Tensor[(16, 5, 13), float32] */;
  %780 = left_shift(%768, %769) /* ty=Tensor[(16, 5, 13), uint32] */;
  %781 = add(%772, %773) /* ty=Tensor[(16, 5, 13), uint64] */;
  %782 = %774.0;
  %783 = erf(%775) /* ty=Tensor[(16, 5, 13), float32] */;
  %784 = %778.2;
  (%779, %780, %781, %782, %783, %784, %var_6223)
}

def @func_5476(%var_5468: Tensor[(16, 10, 2), bool]) -> (Tensor[(16, 10, 2), int8],) {
  %785 = @func_3911() /* ty=Tensor[(16, 10, 2), bool] */;
  %786 = cast(%var_5468, dtype="int8") /* ty=Tensor[(16, 10, 2), int8] */;
  %787 = shape_of(%785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%785, dtype="int8") /* ty=Tensor[(16, 10, 2), int8] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %790 = minimum(%788, %789) /* ty=Tensor[(16, 10, 2), int8] */;
  (%790,)
}

def @func_5881() -> Tensor[(16, 10, 2), bool] {
  %791 = @func_3672() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %791.0
}

def @func_5072() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %792 = @func_4201() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %793 = @func_4201() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %794 = %792.0;
  %795 = %793.0;
  (%794, %795)
}

def @func_3828() -> (Tensor[(16, 10, 2), bool], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(56, 12), int16]) {
  %796 = @func_2744() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %797 = cast(meta[relay.Constant][34] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %798 = reshape(%797, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float32] */;
  %799 = @func_2744() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %800 = cast(meta[relay.Constant][35] /* ty=Tensor[(56, 12), int16] */, dtype="int16") /* ty=Tensor[(56, 12), int16] */;
  %801 = cast(meta[relay.Constant][35] /* ty=Tensor[(56, 12), int16] */, dtype="int16") /* ty=Tensor[(56, 12), int16] */;
  %802 = reshape(%800, newshape=[3, 14, 16]) /* ty=Tensor[(3, 14, 16), int16] */;
  %803 = reshape(%801, newshape=[3, 14, 16]) /* ty=Tensor[(3, 14, 16), int16] */;
  %804 = %796.0;
  %805 = @func_3112(%798) /* ty=Tensor[(4, 9, 16), float64] */;
  %806 = %799.0;
  %807 = @func_925(%802, %803) /* ty=Tensor[(3, 14, 16), int16] */;
  (%804, %805, meta[relay.Constant][34] /* ty=Tensor[(576), float32] */, %806, %807, meta[relay.Constant][35] /* ty=Tensor[(56, 12), int16] */)
}

def @func_7427(%var_7418: Tensor[(7, 2, 13), float64]) -> (Tensor[(16, 10, 2), float32], Tensor[(7, 2, 13), uint16]) {
  %808 = @func_5629() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float32]) */;
  %809 = cast(%var_7418, dtype="float64") /* ty=Tensor[(7, 2, 13), float64] */;
  %810 = asin(%809) /* ty=Tensor[(7, 2, 13), float64] */;
  %811 = cast(%810, dtype="uint16") /* ty=Tensor[(7, 2, 13), uint16] */;
  %812 = shape_of(%var_7418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %813 = cast(%var_7418, dtype="uint16") /* ty=Tensor[(7, 2, 13), uint16] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %815 = %808.1;
  %816 = multiply(%813, %814) /* ty=Tensor[(7, 2, 13), uint16] */;
  (%815, %816)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5109() -> Tensor[(16, 10, 2), bool] {
  %1 = fn () -> Tensor[(16, 10, 2), bool] {
    %0 = @func_3293() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
    %0.0
  };
  %1() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_1477(%var_1475: Tensor[(2, 12, 16), float32], %var_1476: Tensor[(486), float64]) -> (Tensor[(2, 16, 14), float32], Tensor[(448), float32], Tensor[(2, 12, 16), float64], Tensor[(10), float64], Tensor[(486), float64], Tensor[(10, ?, ?), uint64]) {
  @func_1473(%var_1475, %var_1476) /* ty=(Tensor[(2, 16, 14), float32], Tensor[(448), float32], Tensor[(2, 12, 16), float64], Tensor[(10), float64], Tensor[(486), float64], Tensor[(10, ?, ?), uint64]) */
}

def @func_5902() -> (Tensor[(16, 10, 2), bool], Tensor[(2, 16, 14), float32], Tensor[(448), float32]) {
  @func_5900() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(2, 16, 14), float32], Tensor[(448), float32]) */
}

def @func_1193(%var_1191: Tensor[(10, 13, 13), uint16], %var_1192: Tensor[(10, 13, 13), uint16]) -> (Tensor[(10, 13, 13), uint16],) {
  %7 = fn (%var_1181: Tensor[(10, 13, 13), uint16], %var_1182: Tensor[(10, 13, 13), uint16]) -> (Tensor[(10, 13, 13), uint16],) {
    %2 = cast(%var_1182, dtype="uint16") /* ty=Tensor[(10, 13, 13), uint16] */;
    %3 = shape_of(%var_1181, dtype="int32") /* ty=Tensor[(3), int32] */;
    %4 = cast(%var_1181, dtype="uint16") /* ty=Tensor[(10, 13, 13), uint16] */;
    %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %6 = left_shift(%4, %5) /* ty=Tensor[(10, 13, 13), uint16] */;
    (%6,)
  };
  %7(%var_1191, %var_1192) /* ty=(Tensor[(10, 13, 13), uint16],) */
}

def @func_8421(%var_8401: Tensor[(10), float64]) -> (Tensor[(16, 10, 2), float32], Tensor[(10, ?, ?), uint64], Tensor[(10), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %8 = @func_3776() /* ty=(Tensor[(16, 10, 2), float32],) */;
  %9 = cast(%var_8401, dtype="float64") /* ty=Tensor[(10), float64] */;
  %10 = reshape(%9, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float64] */;
  %11 = @func_163(%10) /* ty=(Tensor[(10, ?, ?), uint64],) */;
  %12 = @func_5784() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %13 = %8.0;
  %14 = %11.0;
  %15 = @func_4032() /* ty=Tensor[(16, 10, 2), bool] */;
  %16 = %12.0;
  (%13, %14, %var_8401, %15, %16)
}

def @func_8424(%var_8422: Tensor[(10), float64]) -> (Tensor[(16, 10, 2), float32], Tensor[(10, ?, ?), uint64], Tensor[(10), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  @func_8421(%var_8422) /* ty=(Tensor[(16, 10, 2), float32], Tensor[(10, ?, ?), uint64], Tensor[(10), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */
}

def @func_7373() -> Tensor[(16, 10, 2), bool] {
  %18 = fn () -> Tensor[(16, 10, 2), bool] {
    %17 = @func_3351() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %17.0
  };
  %18() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_5241(%var_5214: Tensor[(126, 2), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(16, 10, 2), bool], Tensor[(126, 2), float64], Tensor[(16, 10, 2), bool]) {
  %19 = cast(%var_5214, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
  %20 = cast(%var_5214, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
  %21 = reshape(%19, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %22 = reshape(%20, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %23 = @func_2209(%21, %22) /* ty=(Tensor[(3, 7, 12), float64],) */;
  %24 = cast(%var_5214, dtype="float32") /* ty=Tensor[(126, 2), float32] */;
  %25 = atan(%24) /* ty=Tensor[(126, 2), float32] */;
  %26 = cast(%25, dtype="float32") /* ty=Tensor[(126, 2), float32] */;
  %27 = sqrt(%26) /* ty=Tensor[(126, 2), float32] */;
  %28 = cast(%27, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
  %29 = @func_2637() /* ty=Tensor[(16, 10, 2), bool] */;
  %30 = %23.0;
  %31 = @func_4288() /* ty=Tensor[(16, 10, 2), bool] */;
  %32 = asinh(%28) /* ty=Tensor[(126, 2), float64] */;
  %33 = @func_3911() /* ty=Tensor[(16, 10, 2), bool] */;
  (%29, %30, %31, %32, %33)
}

def @func_5058() -> Tensor[(16, 10, 2), bool] {
  @func_2637() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_7055() -> (Tensor[(10, ?, ?), uint64],) {
  @func_7053() /* ty=(Tensor[(10, ?, ?), uint64],) */
}

def @func_5263() -> (Tensor[(16, 10, 2), bool],) {
  %35 = fn () -> (Tensor[(16, 10, 2), bool],) {
    %34 = @func_3267() /* ty=Tensor[(16, 10, 2), bool] */;
    (%34,)
  };
  %35() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_925(%var_909: Tensor[(3, 14, 16), int16], %var_910: Tensor[(3, 14, 16), int16]) -> Tensor[(3, 14, 16), int16] {
  %36 = cast(%var_910, dtype="int16") /* ty=Tensor[(3, 14, 16), int16] */;
  %37 = shape_of(%var_909, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%var_909, dtype="int16") /* ty=Tensor[(3, 14, 16), int16] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  add(%38, %39) /* ty=Tensor[(3, 14, 16), int16] */
}

def @func_6351() -> (Tensor[(16, 10, 2), bool],) {
  %41 = fn () -> (Tensor[(16, 10, 2), bool],) {
    %40 = @func_5542() /* ty=Tensor[(16, 10, 2), bool] */;
    (%40,)
  };
  %41() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_3673() -> (Tensor[(16, 10, 2), bool],) {
  %43 = fn () -> (Tensor[(16, 10, 2), bool],) {
    %42 = @func_3267() /* ty=Tensor[(16, 10, 2), bool] */;
    (%42,)
  };
  %43() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_3777() -> (Tensor[(16, 10, 2), float32],) {
  %48 = fn () -> (Tensor[(16, 10, 2), float32],) {
    %44 = @func_3293() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
    %45 = %44.0;
    %46 = cast(%45, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
    %47 = acos(%46) /* ty=Tensor[(16, 10, 2), float32] */;
    (%47,)
  };
  %48() /* ty=(Tensor[(16, 10, 2), float32],) */
}

def @func_5244(%var_5242: Tensor[(126, 2), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(16, 10, 2), bool], Tensor[(126, 2), float64], Tensor[(16, 10, 2), bool]) {
  @func_5241(%var_5242) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(16, 10, 2), bool], Tensor[(126, 2), float64], Tensor[(16, 10, 2), bool]) */
}

def @func_4274() -> (Tensor[(16, 10, 2), bool],) {
  %51 = fn () -> (Tensor[(16, 10, 2), bool],) {
    %49 = @func_2539() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %50 = %49.0;
    (%50,)
  };
  %51() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_4202() -> (Tensor[(16, 10, 2), bool],) {
  %54 = fn () -> (Tensor[(16, 10, 2), bool],) {
    %52 = @func_2468() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %53 = %52.0;
    (%53,)
  };
  %54() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_4924(%var_4922: Tensor[(4, 10, 1), float32]) -> Tensor[(4, 10, 1), float32] {
  @func_4921(%var_4922) /* ty=Tensor[(4, 10, 1), float32] */
}

def @func_4288() -> Tensor[(16, 10, 2), bool] {
  %55 = @func_3672() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %55.0
}

def @func_8023() -> (Tensor[(16, 10, 2), bool],) {
  %56 = @func_4273() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %57 = %56.0;
  (%57,)
}

def @func_6736() -> (Tensor[(16, 10, 2), bool],) {
  %60 = fn () -> (Tensor[(16, 10, 2), bool],) {
    %58 = @func_3351() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %59 = %58.0;
    (%59,)
  };
  %60() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_6262(%var_6259: Tensor[(16, 5, 13), int16], %var_6260: Tensor[(16, 5, 13), int16], %var_6261: Tensor[(486), float64]) -> (Tensor[(16, 5, 13), float32], Tensor[(16, 5, 13), uint32], Tensor[(16, 5, 13), uint64], Tensor[(16, 10, 2), bool], Tensor[(16, 5, 13), float32], Tensor[(384), float32], Tensor[(486), float64]) {
  @func_6257(%var_6259, %var_6260, %var_6261) /* ty=(Tensor[(16, 5, 13), float32], Tensor[(16, 5, 13), uint32], Tensor[(16, 5, 13), uint64], Tensor[(16, 10, 2), bool], Tensor[(16, 5, 13), float32], Tensor[(384), float32], Tensor[(486), float64]) */
}

def @func_8486(%var_8469: Tensor[(576), float32]) -> (Tensor[(56, 12), int16], Tensor[(7, 15, 7), float32], Tensor[(735), float32], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(16, 10, 2), float32]) {
  %61 = @func_3828() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(56, 12), int16]) */;
  %62 = cast(meta[relay.Constant][0] /* ty=Tensor[(735), float32] */, dtype="float32") /* ty=Tensor[(735), float32] */;
  %63 = reshape(%62, newshape=[7, 15, 7]) /* ty=Tensor[(7, 15, 7), float32] */;
  %64 = @func_8221(%63) /* ty=(Tensor[(7, 15, 7), float32], Tensor[(16, 10, 2), bool]) */;
  %65 = cast(%var_8469, dtype="float32") /* ty=Tensor[(576), float32] */;
  %66 = reshape(%65, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float32] */;
  %67 = %61.5;
  %68 = %64.0;
  %69 = @func_3112(%66) /* ty=Tensor[(4, 9, 16), float64] */;
  %70 = @func_5842() /* ty=Tensor[(16, 10, 2), float32] */;
  (%67, %68, meta[relay.Constant][0] /* ty=Tensor[(735), float32] */, %69, %var_8469, %70)
}

def @func_3829() -> (Tensor[(16, 10, 2), bool], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(56, 12), int16]) {
  %83 = fn () -> (Tensor[(16, 10, 2), bool], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(56, 12), int16]) {
    %71 = @func_2744() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %72 = cast(meta[relay.Constant][1] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
    %73 = reshape(%72, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float32] */;
    %74 = @func_2744() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %75 = cast(meta[relay.Constant][2] /* ty=Tensor[(56, 12), int16] */, dtype="int16") /* ty=Tensor[(56, 12), int16] */;
    %76 = cast(meta[relay.Constant][2] /* ty=Tensor[(56, 12), int16] */, dtype="int16") /* ty=Tensor[(56, 12), int16] */;
    %77 = reshape(%75, newshape=[3, 14, 16]) /* ty=Tensor[(3, 14, 16), int16] */;
    %78 = reshape(%76, newshape=[3, 14, 16]) /* ty=Tensor[(3, 14, 16), int16] */;
    %79 = %71.0;
    %80 = @func_3112(%73) /* ty=Tensor[(4, 9, 16), float64] */;
    %81 = %74.0;
    %82 = @func_925(%77, %78) /* ty=Tensor[(3, 14, 16), int16] */;
    (%79, %80, meta[relay.Constant][1] /* ty=Tensor[(576), float32] */, %81, %82, meta[relay.Constant][2] /* ty=Tensor[(56, 12), int16] */)
  };
  %83() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(56, 12), int16]) */
}

def @func_7572(%var_7568: Tensor[(4, 6, 10), uint32], %var_7569: Tensor[(4, 6, 10), uint32], %var_7570: Tensor[(4, 6, 10), uint32], %var_7571: Tensor[(252), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(4, 6, 10), int32], Tensor[(3, 7, 12), float64], Tensor[(252), float64], Tensor[(4, 6, 10), float32], Tensor[(16, 10, 2), bool]) {
  %105 = fn (%var_7523: Tensor[(4, 6, 10), uint32], %var_7524: Tensor[(4, 6, 10), uint32], %var_7538: Tensor[(4, 6, 10), uint32], %var_7543: Tensor[(252), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(4, 6, 10), int32], Tensor[(3, 7, 12), float64], Tensor[(252), float64], Tensor[(4, 6, 10), float32], Tensor[(16, 10, 2), bool]) {
    %84 = cast(%var_7538, dtype="int32") /* ty=Tensor[(4, 6, 10), int32] */;
    %85 = shape_of(%var_7523, dtype="int32") /* ty=Tensor[(3), int32] */;
    %86 = cast(%var_7523, dtype="int32") /* ty=Tensor[(4, 6, 10), int32] */;
    %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %88 = cast(%var_7543, dtype="float64") /* ty=Tensor[(252), float64] */;
    %89 = cast(%var_7543, dtype="float64") /* ty=Tensor[(252), float64] */;
    %90 = reshape(%88, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
    %91 = reshape(%89, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
    %92 = @func_2209(%90, %91) /* ty=(Tensor[(3, 7, 12), float64],) */;
    %93 = cast(%var_7524, dtype="uint32") /* ty=Tensor[(4, 6, 10), uint32] */;
    %94 = shape_of(%var_7523, dtype="int32") /* ty=Tensor[(3), int32] */;
    %95 = cast(%var_7523, dtype="uint32") /* ty=Tensor[(4, 6, 10), uint32] */;
    %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %97 = add(%95, %96) /* ty=Tensor[(4, 6, 10), uint32] */;
    %98 = cast(%97, dtype="float32") /* ty=Tensor[(4, 6, 10), float32] */;
    %99 = @func_3351() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %100 = @func_7372() /* ty=Tensor[(16, 10, 2), bool] */;
    %101 = right_shift(%86, %87) /* ty=Tensor[(4, 6, 10), int32] */;
    %102 = %92.0;
    %103 = log10(%98) /* ty=Tensor[(4, 6, 10), float32] */;
    %104 = %99.0;
    (%100, %101, %102, %var_7543, %103, %104)
  };
  %105(%var_7568, %var_7569, %var_7570, %var_7571) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(4, 6, 10), int32], Tensor[(3, 7, 12), float64], Tensor[(252), float64], Tensor[(4, 6, 10), float32], Tensor[(16, 10, 2), bool]) */
}

def @func_8025() -> (Tensor[(16, 10, 2), bool],) {
  @func_8023() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_2540() -> (Tensor[(16, 10, 2), bool],) {
  %108 = fn () -> (Tensor[(16, 10, 2), bool],) {
    %106 = @func_2468() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %107 = %106.0;
    (%107,)
  };
  %108() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_6623() -> (Tensor[(4, 9, 16), float64], Tensor[(3, 7, 12), float64]) {
  %109 = @func_3828() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(56, 12), int16]) */;
  %110 = @func_6359() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(16, 10, 2), bool]) */;
  %111 = %109.1;
  %112 = %110.0;
  (%111, %112)
}

def @func_5275() -> (Tensor[(16, 10, 2), bool],) {
  %113 = @func_3924() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %114 = %113.0;
  (%114,)
}

def @func_2638() -> Tensor[(16, 10, 2), bool] {
  %116 = fn () -> Tensor[(16, 10, 2), bool] {
    %115 = @func_2468() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %115.0
  };
  %116() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_6879() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  @func_6877() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */
}

def @func_6257(%var_6189: Tensor[(16, 5, 13), int16], %var_6190: Tensor[(16, 5, 13), int16], %var_6223: Tensor[(486), float64]) -> (Tensor[(16, 5, 13), float32], Tensor[(16, 5, 13), uint32], Tensor[(16, 5, 13), uint64], Tensor[(16, 10, 2), bool], Tensor[(16, 5, 13), float32], Tensor[(384), float32], Tensor[(486), float64]) {
  %117 = cast(%var_6190, dtype="bool") /* ty=Tensor[(16, 5, 13), bool] */;
  %118 = shape_of(%var_6189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%var_6189, dtype="bool") /* ty=Tensor[(16, 5, 13), bool] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %121 = greater_equal(%119, %120) /* ty=Tensor[(16, 5, 13), bool] */;
  %122 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 5, 13), bool] */, dtype="float32") /* ty=Tensor[(16, 5, 13), float32] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="float32") /* ty=Tensor[(16, 5, 13), float32] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %126 = cast(%121, dtype="uint32") /* ty=Tensor[(16, 5, 13), uint32] */;
  %127 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(16, 5, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 5, 13), bool] */, dtype="uint32") /* ty=Tensor[(16, 5, 13), uint32] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %130 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 5, 13), bool] */, dtype="uint64") /* ty=Tensor[(16, 5, 13), uint64] */;
  %131 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%121, dtype="uint64") /* ty=Tensor[(16, 5, 13), uint64] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %134 = @func_3672() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %135 = cast(%var_6190, dtype="float32") /* ty=Tensor[(16, 5, 13), float32] */;
  %136 = cast(%var_6223, dtype="float64") /* ty=Tensor[(486), float64] */;
  %137 = reshape(%136, newshape=[486]) /* ty=Tensor[(486), float64] */;
  %138 = @func_3258(%137) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(384), float32], Tensor[(486), float64], Tensor[(16, 10, 2), float64], Tensor[(16, 10, 2), float32], Tensor[(16, 10, 2), float32]) */;
  %139 = minimum(%124, %125) /* ty=Tensor[(16, 5, 13), float32] */;
  %140 = left_shift(%128, %129) /* ty=Tensor[(16, 5, 13), uint32] */;
  %141 = add(%132, %133) /* ty=Tensor[(16, 5, 13), uint64] */;
  %142 = %134.0;
  %143 = erf(%135) /* ty=Tensor[(16, 5, 13), float32] */;
  %144 = %138.2;
  (%139, %140, %141, %142, %143, %144, %var_6223)
}

def @func_3926() -> (Tensor[(16, 10, 2), bool],) {
  @func_3924() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_4033() -> Tensor[(16, 10, 2), bool] {
  %146 = fn () -> Tensor[(16, 10, 2), bool] {
    %145 = @func_2539() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %145.0
  };
  %146() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_5631() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float32]) {
  @func_5629() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float32]) */
}

def @func_4242() -> Tensor[(16, 10, 2), bool] {
  %147 = @func_2744() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %147.0
}

def @func_5544() -> Tensor[(16, 10, 2), bool] {
  @func_5542() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_6536(%var_6516: uint8, %var_6529: Tensor[(112, 2), float32]) -> (Tensor[(1, 15), uint8], Tensor[(16, 10, 2), bool], Tensor[(112, 2), float32]) {
  %148 = cast(%var_6516, dtype="uint8") /* ty=uint8 */;
  %149 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 15), uint8] */, dtype="uint8") /* ty=Tensor[(1, 15), uint8] */;
  %150 = cast(%var_6529, dtype="float32") /* ty=Tensor[(112, 2), float32] */;
  %151 = reshape(%150, newshape=[2, 16, 7]) /* ty=Tensor[(2, 16, 7), float32] */;
  %152 = @func_6074(%151) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(126, 2), float64], Tensor[(252, 1), float64], Tensor[(16, 10, 2), bool], Tensor[(2, 16, 7), bool], Tensor[(16, 10, 2), bool]) */;
  %153 = logical_xor(%148, %149) /* ty=Tensor[(1, 15), uint8] */;
  %154 = %152.3;
  (%153, %154, %var_6529)
}

def @func_3269() -> Tensor[(16, 10, 2), bool] {
  @func_3267() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_8224(%var_8222: Tensor[(7, 15, 7), float32]) -> (Tensor[(7, 15, 7), float32], Tensor[(16, 10, 2), bool]) {
  @func_8221(%var_8222) /* ty=(Tensor[(7, 15, 7), float32], Tensor[(16, 10, 2), bool]) */
}

def @func_3472(%var_3470: Tensor[(5, 1, 7), int64], %var_3471: Tensor[(1, 448), float32]) -> (Tensor[(2, 16, 14), float32], Tensor[(1, 448), float32], Tensor[(5, 9, 7), bool], Tensor[(2, 16, 14), float32]) {
  %176 = fn (%var_3395: Tensor[(5, 1, 7), int64], %var_3417: Tensor[(1, 448), float32]) -> (Tensor[(2, 16, 14), float32], Tensor[(1, 448), float32], Tensor[(5, 9, 7), bool], Tensor[(2, 16, 14), float32]) {
    %155 = cast(%var_3417, dtype="float32") /* ty=Tensor[(1, 448), float32] */;
    %156 = reshape(%155, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), float32] */;
    %157 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 1, 7), int64] */, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
    %158 = shape_of(%var_3395, dtype="int32") /* ty=Tensor[(3), int32] */;
    %159 = cast(%var_3395, dtype="bool") /* ty=Tensor[(5, 1, 7), bool] */;
    %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %161 = greater_equal(%159, %160) /* ty=Tensor[(5, ?, 7), bool] */;
    %162 = cast(%161, dtype="float64") /* ty=Tensor[(5, ?, 7), float64] */;
    %163 = cosh(%162) /* ty=Tensor[(5, ?, 7), float64] */;
    %164 = cast(%163, dtype="float32") /* ty=Tensor[(5, ?, 7), float32] */;
    %165 = tan(%164) /* ty=Tensor[(5, ?, 7), float32] */;
    %166 = cast(%161, dtype="uint16") /* ty=Tensor[(5, ?, 7), uint16] */;
    %167 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 9, 7), bool] */, dtype="uint16") /* ty=Tensor[(5, 9, 7), uint16] */;
    %168 = right_shift(%166, %167) /* ty=Tensor[(5, 9, 7), uint16] */;
    %169 = cast(%165, dtype="bool") /* ty=Tensor[(5, ?, 7), bool] */;
    %170 = cast(%168, dtype="bool") /* ty=Tensor[(5, 9, 7), bool] */;
    %171 = cast(%var_3417, dtype="float32") /* ty=Tensor[(1, 448), float32] */;
    %172 = reshape(%171, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), float32] */;
    %173 = @func_961(%156) /* ty=Tensor[(2, 16, 14), float32] */;
    %174 = equal(%169, %170) /* ty=Tensor[(5, 9, 7), bool] */;
    %175 = @func_961(%172) /* ty=Tensor[(2, 16, 14), float32] */;
    (%173, %var_3417, %174, %175)
  };
  %176(%var_3470, %var_3471) /* ty=(Tensor[(2, 16, 14), float32], Tensor[(1, 448), float32], Tensor[(5, 9, 7), bool], Tensor[(2, 16, 14), float32]) */
}

def @func_5629() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float32]) {
  %177 = @func_3776() /* ty=(Tensor[(16, 10, 2), float32],) */;
  %178 = @func_2664() /* ty=Tensor[(16, 10, 2), bool] */;
  %179 = %177.0;
  (%178, %179)
}

def @func_2980() -> Tensor[(16, 10, 2), bool] {
  %180 = fn () -> Tensor[(16, 10, 2), bool] {
    @func_2664() /* ty=Tensor[(16, 10, 2), bool] */
  };
  %180() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_3352() -> (Tensor[(16, 10, 2), bool],) {
  %182 = fn () -> (Tensor[(16, 10, 2), bool],) {
    %181 = @func_2637() /* ty=Tensor[(16, 10, 2), bool] */;
    (%181,)
  };
  %182() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_3707(%var_3687: Tensor[(5, 14, 16), float64]) -> (Tensor[(5, 14, 16), float64], Tensor[(16, 10, 2), bool]) {
  %183 = cast(%var_3687, dtype="float64") /* ty=Tensor[(5, 14, 16), float64] */;
  %184 = sqrt(%183) /* ty=Tensor[(5, 14, 16), float64] */;
  %185 = @func_3566() /* ty=Tensor[(16, 10, 2), bool] */;
  (%184, %185)
}

def @func_5478(%var_5477: Tensor[(16, 10, 2), bool]) -> (Tensor[(16, 10, 2), int8],) {
  %192 = fn (%var_5468: Tensor[(16, 10, 2), bool]) -> (Tensor[(16, 10, 2), int8],) {
    %186 = @func_3911() /* ty=Tensor[(16, 10, 2), bool] */;
    %187 = cast(%var_5468, dtype="int8") /* ty=Tensor[(16, 10, 2), int8] */;
    %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
    %189 = cast(%186, dtype="int8") /* ty=Tensor[(16, 10, 2), int8] */;
    %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %191 = minimum(%189, %190) /* ty=Tensor[(16, 10, 2), int8] */;
    (%191,)
  };
  %192(%var_5477) /* ty=(Tensor[(16, 10, 2), int8],) */
}

def @func_5805() -> Tensor[(16, 10, 2), bool] {
  @func_3911() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_5098(%var_5097: Tensor[(13, 14, 1), float64]) -> Tensor[(13, 14, 1), float32] {
  %196 = fn (%var_5075: Tensor[(13, 14, 1), float64]) -> Tensor[(13, 14, 1), float32] {
    %193 = cast(%var_5075, dtype="float64") /* ty=Tensor[(13, 14, 1), float64] */;
    %194 = sqrt(%193) /* ty=Tensor[(13, 14, 1), float64] */;
    %195 = cast(%194, dtype="float32") /* ty=Tensor[(13, 14, 1), float32] */;
    exp(%195) /* ty=Tensor[(13, 14, 1), float32] */
  };
  %196(%var_5097) /* ty=Tensor[(13, 14, 1), float32] */
}

def @func_4425() -> (Tensor[(16, 10, 2), bool],) {
  %197 = @func_2979() /* ty=Tensor[(16, 10, 2), bool] */;
  (%197,)
}

def @func_6361() -> (Tensor[(3, 7, 12), float64], Tensor[(16, 10, 2), bool]) {
  @func_6359() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(16, 10, 2), bool]) */
}

def @func_5060() -> Tensor[(16, 10, 2), bool] {
  @func_5058() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_6660() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %198 = @func_6153() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %199 = @func_3672() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %200 = %198.0;
  %201 = %199.0;
  (%200, %201)
}

def @func_163(%var_129: Tensor[(10, 1, 1), float64]) -> (Tensor[(10, ?, ?), uint64],) {
  %202 = cast(%var_129, dtype="float64") /* ty=Tensor[(10, 1, 1), float64] */;
  %203 = sigmoid(%202) /* ty=Tensor[(10, 1, 1), float64] */;
  %204 = cast(%var_129, dtype="uint64") /* ty=Tensor[(10, 1, 1), uint64] */;
  %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(3), int32] */;
  %206 = cast(%203, dtype="uint64") /* ty=Tensor[(10, 1, 1), uint64] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %208 = logical_xor(%206, %207) /* ty=Tensor[(10, ?, ?), uint64] */;
  (%208,)
}

def @func_4621(%var_4620: Tensor[(15, 16, 7), int64]) -> (Tensor[(15, 16, 7), bool],) {
  %214 = fn (%var_4611: Tensor[(15, 16, 7), int64]) -> (Tensor[(15, 16, 7), bool],) {
    %209 = cast(%var_4611, dtype="bool") /* ty=Tensor[(15, 16, 7), bool] */;
    %210 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(15, 16, 7), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %211 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 16, 7), int64] */, dtype="bool") /* ty=Tensor[(15, 16, 7), bool] */;
    %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %213 = greater(%211, %212) /* ty=Tensor[(15, 16, 7), bool] */;
    (%213,)
  };
  %214(%var_4620) /* ty=(Tensor[(15, 16, 7), bool],) */
}

def @func_3514(%var_3510: Tensor[(11, 3, 7), int16], %var_3511: Tensor[(11, 3, 7), int16], %var_3512: Tensor[(864), float64], %var_3513: Tensor[(15, 4), float32]) -> (Tensor[(11, 3, 7), int16], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(6, 12, 12), bool], Tensor[(864), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(20), float64], Tensor[(15, 4), float32]) {
  %237 = fn (%var_3474: Tensor[(11, 3, 7), int16], %var_3475: Tensor[(11, 3, 7), int16], %var_3491: Tensor[(864), float64], %var_3505: Tensor[(15, 4), float32]) -> (Tensor[(11, 3, 7), int16], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(6, 12, 12), bool], Tensor[(864), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(20), float64], Tensor[(15, 4), float32]) {
    %215 = cast(%var_3475, dtype="int16") /* ty=Tensor[(11, 3, 7), int16] */;
    %216 = shape_of(%var_3474, dtype="int32") /* ty=Tensor[(3), int32] */;
    %217 = cast(%var_3474, dtype="int16") /* ty=Tensor[(11, 3, 7), int16] */;
    %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %219 = cast(meta[relay.Constant][8] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
    %220 = reshape(%219, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float32] */;
    %221 = cast(%var_3491, dtype="float64") /* ty=Tensor[(864), float64] */;
    %222 = reshape(%221, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float64] */;
    %223 = @func_2157(%222) /* ty=(Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16]) */;
    %224 = @func_3293() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
    %225 = @func_3293() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
    %226 = @func_2539() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %227 = cast(%var_3505, dtype="float32") /* ty=Tensor[(15, 4), float32] */;
    %228 = reshape(%227, newshape=[1, 15, 4]) /* ty=Tensor[(1, 15, 4), float32] */;
    %229 = @func_2898(%228) /* ty=(Tensor[(1, 15, 4), float32], Tensor[(16, 10, 2), bool], Tensor[(672), int16], Tensor[(20), float64], Tensor[(672), int16]) */;
    %230 = bitwise_or(%217, %218) /* ty=Tensor[(11, 3, 7), int16] */;
    %231 = @func_3112(%220) /* ty=Tensor[(4, 9, 16), float64] */;
    %232 = %223.0;
    %233 = %224.1;
    %234 = %225.0;
    %235 = %226.0;
    %236 = %229.3;
    (%230, %231, meta[relay.Constant][8] /* ty=Tensor[(576), float32] */, %232, %var_3491, %233, %234, %235, %236, %var_3505)
  };
  %237(%var_3510, %var_3511, %var_3512, %var_3513) /* ty=(Tensor[(11, 3, 7), int16], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(6, 12, 12), bool], Tensor[(864), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(20), float64], Tensor[(15, 4), float32]) */
}

def @func_5700(%var_5663: Tensor[(4, 9, 16), float64]) -> (Tensor[(4, 9, 16), bool], Tensor[(4, 9, 16), uint64], Tensor[(3, 7, 12), float64], Tensor[(6, 42), float64]) {
  %238 = @func_3828() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(56, 12), int16]) */;
  %239 = %238.1;
  %240 = cast(%var_5663, dtype="bool") /* ty=Tensor[(4, 9, 16), bool] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%239, dtype="bool") /* ty=Tensor[(4, 9, 16), bool] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %244 = cast(%var_5663, dtype="uint64") /* ty=Tensor[(4, 9, 16), uint64] */;
  %245 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%239, dtype="uint64") /* ty=Tensor[(4, 9, 16), uint64] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %248 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 42), float64] */, dtype="float64") /* ty=Tensor[(6, 42), float64] */;
  %249 = reshape(%248, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %250 = @func_4844(%249) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %251 = logical_and(%242, %243) /* ty=Tensor[(4, 9, 16), bool] */;
  %252 = bitwise_and(%246, %247) /* ty=Tensor[(4, 9, 16), uint64] */;
  %253 = %250.1;
  (%251, %252, %253, meta[relay.Constant][9] /* ty=Tensor[(6, 42), float64] */)
}

def @func_7471() -> Tensor[(16, 10, 2), bool] {
  %255 = fn () -> Tensor[(16, 10, 2), bool] {
    %254 = @func_5629() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float32]) */;
    %254.0
  };
  %255() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_7997() -> (Tensor[(16, 10, 2), bool],) {
  @func_7995() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_3258(%var_3205: Tensor[(486), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(384), float32], Tensor[(486), float64], Tensor[(16, 10, 2), float64], Tensor[(16, 10, 2), float32], Tensor[(16, 10, 2), float32]) {
  %256 = cast(meta[relay.Constant][10] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %257 = cast(%var_3205, dtype="float64") /* ty=Tensor[(486), float64] */;
  %258 = reshape(%256, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
  %259 = reshape(%257, newshape=[486]) /* ty=Tensor[(486), float64] */;
  %260 = @func_1473(%258, %259) /* ty=(Tensor[(2, 16, 14), float32], Tensor[(448), float32], Tensor[(2, 12, 16), float64], Tensor[(10), float64], Tensor[(486), float64], Tensor[(10, ?, ?), uint64]) */;
  %261 = @func_2539() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %262 = %261.0;
  %263 = cast(%262, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
  %264 = exp(%263) /* ty=Tensor[(16, 10, 2), float32] */;
  %265 = cast(%264, dtype="float64") /* ty=Tensor[(16, 10, 2), float64] */;
  %266 = cast(%264, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
  %267 = cast(%264, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
  %268 = @func_2664() /* ty=Tensor[(16, 10, 2), bool] */;
  %269 = %260.5;
  %270 = asinh(%265) /* ty=Tensor[(16, 10, 2), float64] */;
  %271 = rsqrt(%266) /* ty=Tensor[(16, 10, 2), float32] */;
  %272 = acosh(%267) /* ty=Tensor[(16, 10, 2), float32] */;
  (%268, %269, meta[relay.Constant][10] /* ty=Tensor[(384), float32] */, %var_3205, %270, %271, %272)
}

def @func_4965() -> (Tensor[(16, 10, 2), bool],) {
  %273 = @func_2744() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %274 = %273.0;
  (%274,)
}

def @func_2666() -> Tensor[(16, 10, 2), bool] {
  @func_2664() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_5548() -> (Tensor[(16, 10, 2), float32],) {
  %277 = fn () -> (Tensor[(16, 10, 2), float32],) {
    %275 = @func_3776() /* ty=(Tensor[(16, 10, 2), float32],) */;
    %276 = %275.0;
    (%276,)
  };
  %277() /* ty=(Tensor[(16, 10, 2), float32],) */
}

def @func_6359() -> (Tensor[(3, 7, 12), float64], Tensor[(16, 10, 2), bool]) {
  %278 = @func_4722() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(6, 42), float64]) */;
  %279 = @func_2468() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %280 = %278.1;
  %281 = %279.0;
  (%280, %281)
}

def @func_8112(%var_8110: Tensor[(3, 6, 10), float32], %var_8111: Tensor[(3, 6, 10), float32]) -> Tensor[(3, 6, 10), uint16] {
  @func_8108(%var_8110, %var_8111) /* ty=Tensor[(3, 6, 10), uint16] */
}

def @func_4931() -> (Tensor[(16, 10, 2), bool],) {
  %282 = @func_2744() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %283 = %282.0;
  (%283,)
}

def @func_5074() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  @func_5072() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */
}

def @func_8176() -> Tensor[(16, 10, 2), bool] {
  %284 = @func_6350() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %284.0
}

def @func_7893(%var_7892: Tensor[(2, 4, 16), float64]) -> (Tensor[(2, 4, 16), float64],) {
  %287 = fn (%var_7885: Tensor[(2, 4, 16), float64]) -> (Tensor[(2, 4, 16), float64],) {
    %285 = cast(%var_7885, dtype="float64") /* ty=Tensor[(2, 4, 16), float64] */;
    %286 = atanh(%285) /* ty=Tensor[(2, 4, 16), float64] */;
    (%286,)
  };
  %287(%var_7892) /* ty=(Tensor[(2, 4, 16), float64],) */
}

def @func_6662() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  @func_6660() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */
}

def @func_5324() -> (Tensor[(16, 10, 2), bool],) {
  %288 = @func_4242() /* ty=Tensor[(16, 10, 2), bool] */;
  (%288,)
}

def @func_6506(%var_6493: Tensor[(486), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(384), float32], Tensor[(486), float64], Tensor[(16, 10, 2), bool]) {
  %289 = cast(meta[relay.Constant][11] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %290 = cast(%var_6493, dtype="float64") /* ty=Tensor[(486), float64] */;
  %291 = reshape(%289, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
  %292 = reshape(%290, newshape=[486]) /* ty=Tensor[(486), float64] */;
  %293 = @func_1473(%291, %292) /* ty=(Tensor[(2, 16, 14), float32], Tensor[(448), float32], Tensor[(2, 12, 16), float64], Tensor[(10), float64], Tensor[(486), float64], Tensor[(10, ?, ?), uint64]) */;
  %294 = @func_4931() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %295 = @func_3911() /* ty=Tensor[(16, 10, 2), bool] */;
  %296 = %293.5;
  %297 = %294.0;
  (%295, %296, meta[relay.Constant][11] /* ty=Tensor[(384), float32] */, %var_6493, %297)
}

def @func_6413() -> (Tensor[(16, 10, 2), bool],) {
  %300 = fn () -> (Tensor[(16, 10, 2), bool],) {
    %298 = @func_4321() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %299 = %298.0;
    (%299,)
  };
  %300() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_2691(%var_2689: Tensor[(64, 1), float32], %var_2690: Tensor[(448), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(2, 16, 14), float32], Tensor[(64, 1), float32], Tensor[(448), float32], Tensor[(16, 10, 2), bool]) {
  %310 = fn (%var_2678: Tensor[(64, 1), float32], %var_2679: Tensor[(448), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(2, 16, 14), float32], Tensor[(64, 1), float32], Tensor[(448), float32], Tensor[(16, 10, 2), bool]) {
    %301 = cast(%var_2678, dtype="float32") /* ty=Tensor[(64, 1), float32] */;
    %302 = cast(%var_2679, dtype="float32") /* ty=Tensor[(448), float32] */;
    %303 = reshape(%301, newshape=[1, 8, 8]) /* ty=Tensor[(1, 8, 8), float32] */;
    %304 = reshape(%302, newshape=[448]) /* ty=Tensor[(448), float32] */;
    %305 = @func_2599(%303, %304) /* ty=(Tensor[(13, 8, 8), bool], Tensor[(2, 16, 14), float32], Tensor[(448), float32], Tensor[(1, 8, 8), float32]) */;
    %306 = @func_2539() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %307 = @func_2637() /* ty=Tensor[(16, 10, 2), bool] */;
    %308 = %305.1;
    %309 = %306.0;
    (%307, %308, %var_2678, %var_2679, %309)
  };
  %310(%var_2689, %var_2690) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(2, 16, 14), float32], Tensor[(64, 1), float32], Tensor[(448), float32], Tensor[(16, 10, 2), bool]) */
}

def @func_5784() -> (Tensor[(16, 10, 2), bool],) {
  %311 = @func_4201() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %312 = %311.0;
  (%312,)
}

def @func_5542() -> Tensor[(16, 10, 2), bool] {
  %313 = @func_3293() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %313.0
}

def @func_4290() -> Tensor[(16, 10, 2), bool] {
  @func_4288() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_2664() -> Tensor[(16, 10, 2), bool] {
  @func_2637() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_2602(%var_2600: Tensor[(1, 8, 8), float32], %var_2601: Tensor[(448), float32]) -> (Tensor[(13, 8, 8), bool], Tensor[(2, 16, 14), float32], Tensor[(448), float32], Tensor[(1, 8, 8), float32]) {
  %332 = fn (%var_2563: Tensor[(1, 8, 8), float32], %var_2595: Tensor[(448), float32]) -> (Tensor[(13, 8, 8), bool], Tensor[(2, 16, 14), float32], Tensor[(448), float32], Tensor[(1, 8, 8), float32]) {
    %314 = cast(%var_2563, dtype="float32") /* ty=Tensor[(1, 8, 8), float32] */;
    %315 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 8, 8), float32] */, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
    %316 = multiply(%314, %315) /* ty=Tensor[(13, 8, 8), float32] */;
    %317 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 8, 8), float32] */, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
    %318 = cast(%var_2563, dtype="bool") /* ty=Tensor[(1, 8, 8), bool] */;
    %319 = equal(%317, %318) /* ty=Tensor[(13, 8, 8), bool] */;
    %320 = cast(%319, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
    %321 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
    %322 = cast(%316, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
    %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %324 = cast(%var_2595, dtype="float32") /* ty=Tensor[(448), float32] */;
    %325 = reshape(%324, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), float32] */;
    %326 = cast(%var_2563, dtype="float32") /* ty=Tensor[(1, 8, 8), float32] */;
    %327 = log10(%326) /* ty=Tensor[(1, 8, 8), float32] */;
    %328 = cast(%327, dtype="float32") /* ty=Tensor[(1, 8, 8), float32] */;
    %329 = logical_and(%322, %323) /* ty=Tensor[(13, 8, 8), bool] */;
    %330 = @func_961(%325) /* ty=Tensor[(2, 16, 14), float32] */;
    %331 = asin(%328) /* ty=Tensor[(1, 8, 8), float32] */;
    (%329, %330, %var_2595, %331)
  };
  %332(%var_2600, %var_2601) /* ty=(Tensor[(13, 8, 8), bool], Tensor[(2, 16, 14), float32], Tensor[(448), float32], Tensor[(1, 8, 8), float32]) */
}

def @func_4846(%var_4845: Tensor[(252), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %342 = fn (%var_4804: Tensor[(252), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
    %333 = @func_4273() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %334 = cast(%var_4804, dtype="float64") /* ty=Tensor[(252), float64] */;
    %335 = reshape(%334, newshape=[252]) /* ty=Tensor[(252), float64] */;
    %336 = @func_3634(%335) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64]) */;
    %337 = %333.0;
    %338 = %336.1;
    %339 = @func_4475() /* ty=Tensor[(16, 10, 2), bool] */;
    %340 = @func_2637() /* ty=Tensor[(16, 10, 2), bool] */;
    %341 = @func_4475() /* ty=Tensor[(16, 10, 2), bool] */;
    (%337, %338, %var_4804, %339, %340, %341)
  };
  %342(%var_4845) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */
}

def @func_6154() -> (Tensor[(16, 10, 2), bool],) {
  %344 = fn () -> (Tensor[(16, 10, 2), bool],) {
    %343 = @func_2664() /* ty=Tensor[(16, 10, 2), bool] */;
    (%343,)
  };
  %344() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_6625() -> (Tensor[(4, 9, 16), float64], Tensor[(3, 7, 12), float64]) {
  @func_6623() /* ty=(Tensor[(4, 9, 16), float64], Tensor[(3, 7, 12), float64]) */
}

def @func_7995() -> (Tensor[(16, 10, 2), bool],) {
  %345 = @func_7372() /* ty=Tensor[(16, 10, 2), bool] */;
  (%345,)
}

def @func_2159(%var_2158: Tensor[(6, 12, 12), float64]) -> (Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16]) {
  %358 = fn (%var_2143: Tensor[(6, 12, 12), float64]) -> (Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16]) {
    %346 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 12, 12), float64] */, dtype="float64") /* ty=Tensor[(6, 12, 12), float64] */;
    %347 = acos(%346) /* ty=Tensor[(6, 12, 12), float64] */;
    %348 = cast(%347, dtype="bool") /* ty=Tensor[(6, 12, 12), bool] */;
    %349 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(6, 12, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %350 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 12, 12), float64] */, dtype="bool") /* ty=Tensor[(6, 12, 12), bool] */;
    %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %352 = cast(%var_2143, dtype="int16") /* ty=Tensor[(6, 12, 12), int16] */;
    %353 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
    %354 = cast(%347, dtype="int16") /* ty=Tensor[(6, 12, 12), int16] */;
    %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %356 = not_equal(%350, %351) /* ty=Tensor[(6, 12, 12), bool] */;
    %357 = left_shift(%354, %355) /* ty=Tensor[(6, 12, 12), int16] */;
    (%356, %357)
  };
  %358(%var_2158) /* ty=(Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16]) */
}

def @func_6982() -> Tensor[(16, 10, 2), float32] {
  %359 = @func_5547() /* ty=(Tensor[(16, 10, 2), float32],) */;
  %359.0
}

def @func_7651() -> Tensor[(16, 10, 2), bool] {
  %360 = @func_6412() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %360.0
}

def @func_7287(%var_7285: Tensor[(507), bool]) -> (Tensor[(20), float64], Tensor[(16, 10, 2), bool], Tensor[(507), bool], Tensor[(4, 9, 16), bool], Tensor[(576), float64]) {
  @func_7284(%var_7285) /* ty=(Tensor[(20), float64], Tensor[(16, 10, 2), bool], Tensor[(507), bool], Tensor[(4, 9, 16), bool], Tensor[(576), float64]) */
}

def @func_5843() -> Tensor[(16, 10, 2), float32] {
  %362 = fn () -> Tensor[(16, 10, 2), float32] {
    %361 = @func_5629() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float32]) */;
    %361.1
  };
  %362() /* ty=Tensor[(16, 10, 2), float32] */
}

def @func_3636(%var_3635: Tensor[(252), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64]) {
  %370 = fn (%var_3627: Tensor[(252), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64]) {
    %363 = cast(%var_3627, dtype="float64") /* ty=Tensor[(252), float64] */;
    %364 = cast(%var_3627, dtype="float64") /* ty=Tensor[(252), float64] */;
    %365 = reshape(%363, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
    %366 = reshape(%364, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
    %367 = @func_2209(%365, %366) /* ty=(Tensor[(3, 7, 12), float64],) */;
    %368 = @func_2637() /* ty=Tensor[(16, 10, 2), bool] */;
    %369 = %367.0;
    (%368, %369, %var_3627)
  };
  %370(%var_3635) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64]) */
}

def @func_7956() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  @func_7954() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */
}

def @func_4921(%var_4908: Tensor[(4, 10, 1), float32]) -> Tensor[(4, 10, 1), float32] {
  %371 = cast(%var_4908, dtype="float32") /* ty=Tensor[(4, 10, 1), float32] */;
  %372 = exp(%371) /* ty=Tensor[(4, 10, 1), float32] */;
  %373 = cast(%372, dtype="float32") /* ty=Tensor[(4, 10, 1), float32] */;
  sqrt(%373) /* ty=Tensor[(4, 10, 1), float32] */
}

def @func_8489(%var_8487: Tensor[(576), float32]) -> (Tensor[(56, 12), int16], Tensor[(7, 15, 7), float32], Tensor[(735), float32], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(16, 10, 2), float32]) {
  @func_8486(%var_8487) /* ty=(Tensor[(56, 12), int16], Tensor[(7, 15, 7), float32], Tensor[(735), float32], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(16, 10, 2), float32]) */
}

def @func_8178() -> Tensor[(16, 10, 2), bool] {
  @func_8176() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_7868(%var_7865: Tensor[(13, 4, 5), int32], %var_7866: Tensor[(13, 4, 5), int32], %var_7867: Tensor[(4, 60), uint32]) -> (Tensor[(13, 4, 5), bool], Tensor[(3, 7, 12), float64], Tensor[(4, 60), uint32], Tensor[(252), float64], Tensor[(4, 10, 1), float32], Tensor[(40), float32]) {
  @func_7863(%var_7865, %var_7866, %var_7867) /* ty=(Tensor[(13, 4, 5), bool], Tensor[(3, 7, 12), float64], Tensor[(4, 60), uint32], Tensor[(252), float64], Tensor[(4, 10, 1), float32], Tensor[(40), float32]) */
}

def @func_6076(%var_6075: Tensor[(2, 16, 7), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(126, 2), float64], Tensor[(252, 1), float64], Tensor[(16, 10, 2), bool], Tensor[(2, 16, 7), bool], Tensor[(16, 10, 2), bool]) {
  %398 = fn (%var_5993: Tensor[(2, 16, 7), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(126, 2), float64], Tensor[(252, 1), float64], Tensor[(16, 10, 2), bool], Tensor[(2, 16, 7), bool], Tensor[(16, 10, 2), bool]) {
    %374 = @func_2539() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %375 = cast(meta[relay.Constant][14] /* ty=Tensor[(252, 1), float64] */, dtype="float64") /* ty=Tensor[(252, 1), float64] */;
    %376 = reshape(%375, newshape=[126, 2]) /* ty=Tensor[(126, 2), float64] */;
    %377 = @func_5241(%376) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(16, 10, 2), bool], Tensor[(126, 2), float64], Tensor[(16, 10, 2), bool]) */;
    %378 = @func_3293() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
    %379 = cast(%var_5993, dtype="float32") /* ty=Tensor[(2, 16, 7), float32] */;
    %380 = rsqrt(%379) /* ty=Tensor[(2, 16, 7), float32] */;
    %381 = cast(%var_5993, dtype="float32") /* ty=Tensor[(2, 16, 7), float32] */;
    %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
    %383 = cast(%380, dtype="float32") /* ty=Tensor[(2, 16, 7), float32] */;
    %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %385 = maximum(%383, %384) /* ty=Tensor[(2, 16, 7), float32] */;
    %386 = cast(%385, dtype="float64") /* ty=Tensor[(2, 16, 7), float64] */;
    %387 = sqrt(%386) /* ty=Tensor[(2, 16, 7), float64] */;
    %388 = cast(%385, dtype="bool") /* ty=Tensor[(2, 16, 7), bool] */;
    %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
    %390 = cast(%387, dtype="bool") /* ty=Tensor[(2, 16, 7), bool] */;
    %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %392 = @func_5324() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %393 = %374.0;
    %394 = %377.3;
    %395 = %378.0;
    %396 = less(%390, %391) /* ty=Tensor[(2, 16, 7), bool] */;
    %397 = %392.0;
    (%393, %394, meta[relay.Constant][14] /* ty=Tensor[(252, 1), float64] */, %395, %396, %397)
  };
  %398(%var_6075) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(126, 2), float64], Tensor[(252, 1), float64], Tensor[(16, 10, 2), bool], Tensor[(2, 16, 7), bool], Tensor[(16, 10, 2), bool]) */
}

def @func_3261(%var_3259: Tensor[(486), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(384), float32], Tensor[(486), float64], Tensor[(16, 10, 2), float64], Tensor[(16, 10, 2), float32], Tensor[(16, 10, 2), float32]) {
  @func_3258(%var_3259) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(384), float32], Tensor[(486), float64], Tensor[(16, 10, 2), float64], Tensor[(16, 10, 2), float32], Tensor[(16, 10, 2), float32]) */
}

def @func_4892(%var_4882: Tensor[(1, 5, 8), float32]) -> (Tensor[(?, 5, 8), int16],) {
  %399 = cast(%var_4882, dtype="float32") /* ty=Tensor[(1, 5, 8), float32] */;
  %400 = sin(%399) /* ty=Tensor[(1, 5, 8), float32] */;
  %401 = cast(%400, dtype="int16") /* ty=Tensor[(1, 5, 8), int16] */;
  %402 = shape_of(%var_4882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%var_4882, dtype="int16") /* ty=Tensor[(1, 5, 8), int16] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %405 = maximum(%403, %404) /* ty=Tensor[(?, 5, 8), int16] */;
  (%405,)
}

def @func_7429(%var_7428: Tensor[(7, 2, 13), float64]) -> (Tensor[(16, 10, 2), float32], Tensor[(7, 2, 13), uint16]) {
  %415 = fn (%var_7418: Tensor[(7, 2, 13), float64]) -> (Tensor[(16, 10, 2), float32], Tensor[(7, 2, 13), uint16]) {
    %406 = @func_5629() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float32]) */;
    %407 = cast(%var_7418, dtype="float64") /* ty=Tensor[(7, 2, 13), float64] */;
    %408 = asin(%407) /* ty=Tensor[(7, 2, 13), float64] */;
    %409 = cast(%408, dtype="uint16") /* ty=Tensor[(7, 2, 13), uint16] */;
    %410 = shape_of(%var_7418, dtype="int32") /* ty=Tensor[(3), int32] */;
    %411 = cast(%var_7418, dtype="uint16") /* ty=Tensor[(7, 2, 13), uint16] */;
    %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %413 = %406.1;
    %414 = multiply(%411, %412) /* ty=Tensor[(7, 2, 13), uint16] */;
    (%413, %414)
  };
  %415(%var_7428) /* ty=(Tensor[(16, 10, 2), float32], Tensor[(7, 2, 13), uint16]) */
}

def @func_7592(%var_7584: Tensor[(672), int16]) -> (Tensor[(192, 20), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(672), int16]) {
  %416 = @func_7153() /* ty=(Tensor[(16, 3, 4), bool], Tensor[(192, 20), float32]) */;
  %417 = %416.1;
  %418 = cast(%417, dtype="float32") /* ty=Tensor[(192, 20), float32] */;
  %419 = @func_6660() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %420 = cast(%var_7584, dtype="int16") /* ty=Tensor[(672), int16] */;
  %421 = cast(%var_7584, dtype="int16") /* ty=Tensor[(672), int16] */;
  %422 = reshape(%420, newshape=[3, 14, 16]) /* ty=Tensor[(3, 14, 16), int16] */;
  %423 = reshape(%421, newshape=[3, 14, 16]) /* ty=Tensor[(3, 14, 16), int16] */;
  %424 = sqrt(%418) /* ty=Tensor[(192, 20), float32] */;
  %425 = %419.0;
  %426 = @func_925(%422, %423) /* ty=Tensor[(3, 14, 16), int16] */;
  (%424, %425, %426, %var_7584)
}

def @func_7653() -> Tensor[(16, 10, 2), bool] {
  @func_7651() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_8354(%var_8352: Tensor[(35), int64], %var_8353: Tensor[(448), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(35), int64], Tensor[(35), int64], Tensor[(448), float32], Tensor[(10, ?, ?), uint64]) {
  @func_8350(%var_8352, %var_8353) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(35), int64], Tensor[(35), int64], Tensor[(448), float32], Tensor[(10, ?, ?), uint64]) */
}

def @func_3267() -> Tensor[(16, 10, 2), bool] {
  @func_2637() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_4476() -> Tensor[(16, 10, 2), bool] {
  %428 = fn () -> Tensor[(16, 10, 2), bool] {
    %427 = @func_3828() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(4, 9, 16), float64], Tensor[(576), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(56, 12), int16]) */;
    %427.3
  };
  %428() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_166(%var_164: Tensor[(10, 1, 1), float64]) -> (Tensor[(10, ?, ?), uint64],) {
  @func_163(%var_164) /* ty=(Tensor[(10, ?, ?), uint64],) */
}

def @func_5604() -> (Tensor[(16, 10, 2), bool],) {
  %429 = @func_3924() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %430 = %429.0;
  (%430,)
}

def @func_8108(%var_8083: Tensor[(3, 6, 10), float32], %var_8084: Tensor[(3, 6, 10), float32]) -> Tensor[(3, 6, 10), uint16] {
  %431 = cast(%var_8084, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
  %432 = shape_of(%var_8083, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%var_8083, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %435 = floor_mod(%433, %434) /* ty=Tensor[(3, 6, 10), float32] */;
  %436 = cast(%var_8084, dtype="uint16") /* ty=Tensor[(3, 6, 10), uint16] */;
  %437 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%435, dtype="uint16") /* ty=Tensor[(3, 6, 10), uint16] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  right_shift(%438, %439) /* ty=Tensor[(3, 6, 10), uint16] */
}

def @func_5900() -> (Tensor[(16, 10, 2), bool], Tensor[(2, 16, 14), float32], Tensor[(448), float32]) {
  %440 = @func_3031() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %441 = cast(meta[relay.Constant][15] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
  %442 = reshape(%441, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), float32] */;
  %443 = %440.0;
  %444 = @func_961(%442) /* ty=Tensor[(2, 16, 14), float32] */;
  (%443, %444, meta[relay.Constant][15] /* ty=Tensor[(448), float32] */)
}

def @func_8296() -> Tensor[(16, 10, 2), bool] {
  %445 = @func_6412() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %445.0
}

def @main(%var_8517: Tensor[(486), float64], %var_8568: Tensor[(672), int16]) -> (Tensor[(16, 10, 2), bool], Tensor[(1120), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(10, ?, 486), uint16], Tensor[(192, 20), float32], Tensor[(672), int16], Tensor[(10, ?, 486), int32]) {
  %446 = @func_4202() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %447 = cast(meta[relay.Constant][16] /* ty=Tensor[(1120), int32] */, dtype="int32") /* ty=Tensor[(1120), int32] */;
  %448 = cast(meta[relay.Constant][16] /* ty=Tensor[(1120), int32] */, dtype="int32") /* ty=Tensor[(1120), int32] */;
  %449 = reshape(%447, newshape=[5, 16, 14]) /* ty=Tensor[(5, 16, 14), int32] */;
  %450 = reshape(%448, newshape=[5, 16, 14]) /* ty=Tensor[(5, 16, 14), int32] */;
  %451 = @func_6123(%449, %450) /* ty=(Tensor[(5, 16, 14), int32], Tensor[(5, 16, 14), int64], Tensor[(16, 10, 2), float32], Tensor[(5, 16, 14), float64]) */;
  %452 = %451.3;
  %453 = cast(%452, dtype="float64") /* ty=Tensor[(5, 16, 14), float64] */;
  %454 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(1120), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %455 = cast(meta[relay.Constant][16] /* ty=Tensor[(1120), int32] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?), float64] */;
  %457 = @func_6736() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %458 = @func_5263() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %459 = cast(%var_8517, dtype="float64") /* ty=Tensor[(486), float64] */;
  %460 = reshape(%459, newshape=[486]) /* ty=Tensor[(486), float64] */;
  %461 = @func_3261(%460) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(384), float32], Tensor[(486), float64], Tensor[(16, 10, 2), float64], Tensor[(16, 10, 2), float32], Tensor[(16, 10, 2), float32]) */;
  %462 = %461.1;
  %463 = cast(%var_8517, dtype="int8") /* ty=Tensor[(486), int8] */;
  %464 = cast(%462, dtype="int8") /* ty=Tensor[(10, ?, ?), int8] */;
  %465 = bitwise_and(%463, %464) /* ty=Tensor[(10, ?, 486), int8] */;
  %466 = cast(%465, dtype="float64") /* ty=Tensor[(10, ?, 486), float64] */;
  %467 = atanh(%466) /* ty=Tensor[(10, ?, 486), float64] */;
  %468 = cast(%465, dtype="uint16") /* ty=Tensor[(10, ?, 486), uint16] */;
  %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%467, dtype="uint16") /* ty=Tensor[(10, ?, 486), uint16] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %472 = cast(%var_8568, dtype="int16") /* ty=Tensor[(672), int16] */;
  %473 = reshape(%472, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %474 = @func_7595(%473) /* ty=(Tensor[(192, 20), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(672), int16]) */;
  %475 = cast(%465, dtype="int32") /* ty=Tensor[(10, ?, 486), int32] */;
  %476 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%467, dtype="int32") /* ty=Tensor[(10, ?, 486), int32] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %479 = %446.0;
  %480 = floor_divide(%455, %456) /* ty=Tensor[(1120), float64] */;
  %481 = %457.0;
  %482 = %458.0;
  %483 = maximum(%470, %471) /* ty=Tensor[(10, ?, 486), uint16] */;
  %484 = %474.0;
  %485 = multiply(%477, %478) /* ty=Tensor[(10, ?, 486), int32] */;
  (%479, %480, %481, %482, %483, %484, %var_8568, %485)
}

def @func_3114(%var_3113: Tensor[(4, 9, 16), float32]) -> Tensor[(4, 9, 16), float64] {
  %497 = fn (%var_3078: Tensor[(4, 9, 16), float32]) -> Tensor[(4, 9, 16), float64] {
    %486 = cast(%var_3078, dtype="float32") /* ty=Tensor[(4, 9, 16), float32] */;
    %487 = atan(%486) /* ty=Tensor[(4, 9, 16), float32] */;
    %488 = cast(%var_3078, dtype="uint8") /* ty=Tensor[(4, 9, 16), uint8] */;
    %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
    %490 = cast(%487, dtype="uint8") /* ty=Tensor[(4, 9, 16), uint8] */;
    %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %492 = minimum(%490, %491) /* ty=Tensor[(4, 9, 16), uint8] */;
    %493 = cast(%492, dtype="float64") /* ty=Tensor[(4, 9, 16), float64] */;
    %494 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
    %495 = cast(%487, dtype="float64") /* ty=Tensor[(4, 9, 16), float64] */;
    %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%495, %496) /* ty=Tensor[(4, 9, 16), float64] */
  };
  %497(%var_3113) /* ty=Tensor[(4, 9, 16), float64] */
}

def @func_6877() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %498 = @func_4160() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %499 = %498.0;
  %500 = @func_5733() /* ty=Tensor[(16, 10, 2), bool] */;
  (%499, %500)
}

def @func_5142() -> (Tensor[(16, 10, 2), bool],) {
  %503 = fn () -> (Tensor[(16, 10, 2), bool],) {
    %501 = @func_2539() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %502 = %501.0;
    (%502,)
  };
  %503() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_3613() -> (Tensor[(16, 10, 2), bool],) {
  @func_3611() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_2002(%var_2001: Tensor[(13, 13, 3), float64]) -> Tensor[(13, 13, 3), float64] {
  %505 = fn (%var_1994: Tensor[(13, 13, 3), float64]) -> Tensor[(13, 13, 3), float64] {
    %504 = cast(%var_1994, dtype="float64") /* ty=Tensor[(13, 13, 3), float64] */;
    atanh(%504) /* ty=Tensor[(13, 13, 3), float64] */
  };
  %505(%var_2001) /* ty=Tensor[(13, 13, 3), float64] */
}

def @func_7069() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  @func_7067() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */
}

def @func_6338() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(20), float64], Tensor[(672), int16]) {
  %506 = @func_4321() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %507 = @func_5554() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %508 = @func_4722() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(6, 42), float64]) */;
  %509 = cast(meta[relay.Constant][17] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %510 = reshape(%509, newshape=[56, 12]) /* ty=Tensor[(56, 12), int16] */;
  %511 = @func_4694(%510) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(20), float64], Tensor[(56, 12), int16]) */;
  %512 = %506.0;
  %513 = %507.0;
  %514 = @func_5542() /* ty=Tensor[(16, 10, 2), bool] */;
  %515 = %508.1;
  %516 = %511.2;
  (%512, %513, %514, %515, %516, meta[relay.Constant][17] /* ty=Tensor[(672), int16] */)
}

def @func_4723() -> (Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(6, 42), float64]) {
  %523 = fn () -> (Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(6, 42), float64]) {
    %517 = @func_3066() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %518 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 42), float64] */, dtype="float64") /* ty=Tensor[(6, 42), float64] */;
    %519 = reshape(%518, newshape=[252]) /* ty=Tensor[(252), float64] */;
    %520 = @func_3952(%519) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64]) */;
    %521 = %517.0;
    %522 = %520.1;
    (%521, %522, meta[relay.Constant][18] /* ty=Tensor[(6, 42), float64] */)
  };
  %523() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(6, 42), float64]) */
}

def @func_4401() -> (Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(10), float64]) {
  %524 = @func_3672() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %525 = cast(meta[relay.Constant][19] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
  %526 = reshape(%525, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float64] */;
  %527 = @func_163(%526) /* ty=(Tensor[(10, ?, ?), uint64],) */;
  %528 = %524.0;
  %529 = %527.0;
  (%528, %529, meta[relay.Constant][19] /* ty=Tensor[(10), float64] */)
}

def @func_7067() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %530 = @func_2539() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %531 = @func_5324() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %532 = @func_6817() /* ty=Tensor[(16, 10, 2), bool] */;
  %533 = %530.0;
  %534 = %531.0;
  (%532, %533, %534)
}

def @func_5786() -> (Tensor[(16, 10, 2), bool],) {
  @func_5784() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_6340() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(20), float64], Tensor[(672), int16]) {
  @func_6338() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(20), float64], Tensor[(672), int16]) */
}

def @func_7155() -> (Tensor[(16, 3, 4), bool], Tensor[(192, 20), float32]) {
  @func_7153() /* ty=(Tensor[(16, 3, 4), bool], Tensor[(192, 20), float32]) */
}

def @func_6123(%var_6121: Tensor[(5, 16, 14), int32], %var_6122: Tensor[(5, 16, 14), int32]) -> (Tensor[(5, 16, 14), int32], Tensor[(5, 16, 14), int64], Tensor[(16, 10, 2), float32], Tensor[(5, 16, 14), float64]) {
  %548 = fn (%var_6078: Tensor[(5, 16, 14), int32], %var_6079: Tensor[(5, 16, 14), int32]) -> (Tensor[(5, 16, 14), int32], Tensor[(5, 16, 14), int64], Tensor[(16, 10, 2), float32], Tensor[(5, 16, 14), float64]) {
    %535 = cast(%var_6079, dtype="int32") /* ty=Tensor[(5, 16, 14), int32] */;
    %536 = shape_of(%var_6078, dtype="int32") /* ty=Tensor[(3), int32] */;
    %537 = cast(%var_6078, dtype="int32") /* ty=Tensor[(5, 16, 14), int32] */;
    %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %539 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 16, 14), int32] */, dtype="int64") /* ty=Tensor[(5, 16, 14), int64] */;
    %540 = shape_of(%var_6079, dtype="int32") /* ty=Tensor[(3), int32] */;
    %541 = cast(%var_6079, dtype="int64") /* ty=Tensor[(5, 16, 14), int64] */;
    %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %543 = cast(%var_6079, dtype="float64") /* ty=Tensor[(5, 16, 14), float64] */;
    %544 = add(%537, %538) /* ty=Tensor[(5, 16, 14), int32] */;
    %545 = subtract(%541, %542) /* ty=Tensor[(5, 16, 14), int64] */;
    %546 = @func_5842() /* ty=Tensor[(16, 10, 2), float32] */;
    %547 = sinh(%543) /* ty=Tensor[(5, 16, 14), float64] */;
    (%544, %545, %546, %547)
  };
  %548(%var_6121, %var_6122) /* ty=(Tensor[(5, 16, 14), int32], Tensor[(5, 16, 14), int64], Tensor[(16, 10, 2), float32], Tensor[(5, 16, 14), float64]) */
}

def @func_5881() -> Tensor[(16, 10, 2), bool] {
  %549 = @func_3672() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %549.0
}

def @func_7954() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %550 = @func_6153() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %551 = @func_5324() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %552 = @func_4965() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %553 = %550.0;
  %554 = %551.0;
  %555 = %552.0;
  (%553, %554, %555)
}

def @func_5556() -> (Tensor[(16, 10, 2), bool],) {
  @func_5554() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_3924() -> (Tensor[(16, 10, 2), bool],) {
  %556 = @func_3351() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %557 = %556.0;
  (%557,)
}

def @func_4657(%var_4656: Tensor[(16, 10, 2), bool]) -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float32], Tensor[(16, 10, 2), bool]) {
  %569 = fn (%var_4646: Tensor[(16, 10, 2), bool]) -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float32], Tensor[(16, 10, 2), bool]) {
    %558 = @func_3672() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %559 = @func_3924() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %560 = %559.0;
    %561 = cast(%var_4646, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
    %562 = shape_of(%560, dtype="int32") /* ty=Tensor[(3), int32] */;
    %563 = cast(%560, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
    %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %565 = @func_2468() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %566 = %558.0;
    %567 = floor_divide(%563, %564) /* ty=Tensor[(16, 10, 2), float32] */;
    %568 = %565.0;
    (%566, %567, %568)
  };
  %569(%var_4656) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float32], Tensor[(16, 10, 2), bool]) */
}

def @func_6577() -> (Tensor[(16, 10, 2), float32],) {
  %570 = @func_5842() /* ty=Tensor[(16, 10, 2), float32] */;
  (%570,)
}

def @func_7414() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float64]) {
  %576 = fn () -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float64]) {
    %571 = @func_4201() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %572 = %571.0;
    %573 = cast(%572, dtype="float64") /* ty=Tensor[(16, 10, 2), float64] */;
    %574 = @func_2637() /* ty=Tensor[(16, 10, 2), bool] */;
    %575 = sigmoid(%573) /* ty=Tensor[(16, 10, 2), float64] */;
    (%574, %575)
  };
  %576() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), float64]) */
}

def @func_963(%var_962: Tensor[(2, 16, 14), float32]) -> Tensor[(2, 16, 14), float32] {
  %578 = fn (%var_945: Tensor[(2, 16, 14), float32]) -> Tensor[(2, 16, 14), float32] {
    %577 = cast(%var_945, dtype="float32") /* ty=Tensor[(2, 16, 14), float32] */;
    rsqrt(%577) /* ty=Tensor[(2, 16, 14), float32] */
  };
  %578(%var_962) /* ty=Tensor[(2, 16, 14), float32] */
}

def @func_7317(%var_7315: Tensor[(35), int64], %var_7316: Tensor[(4, 112), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(5, 9, 7), bool], Tensor[(35), int64], Tensor[(4, 112), float32], Tensor[(16, 10, 2), int8]) {
  @func_7313(%var_7315, %var_7316) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(5, 9, 7), bool], Tensor[(35), int64], Tensor[(4, 112), float32], Tensor[(16, 10, 2), int8]) */
}

def @func_5326() -> (Tensor[(16, 10, 2), bool],) {
  @func_5324() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_6540(%var_6538: uint8, %var_6539: Tensor[(112, 2), float32]) -> (Tensor[(1, 15), uint8], Tensor[(16, 10, 2), bool], Tensor[(112, 2), float32]) {
  @func_6536(%var_6538, %var_6539) /* ty=(Tensor[(1, 15), uint8], Tensor[(16, 10, 2), bool], Tensor[(112, 2), float32]) */
}

def @func_6818() -> Tensor[(16, 10, 2), bool] {
  %580 = fn () -> Tensor[(16, 10, 2), bool] {
    %579 = @func_5900() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(2, 16, 14), float32], Tensor[(448), float32]) */;
    %579.0
  };
  %580() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_5955(%var_5954: Tensor[(16, 10, 2), bool]) -> (Tensor[(16, 10, 2), float32], Tensor[(16, 10, 2), bool]) {
  %589 = fn (%var_5937: Tensor[(16, 10, 2), bool]) -> (Tensor[(16, 10, 2), float32], Tensor[(16, 10, 2), bool]) {
    %581 = @func_5108() /* ty=Tensor[(16, 10, 2), bool] */;
    %582 = cast(%var_5937, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
    %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
    %584 = cast(%581, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
    %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %586 = @func_3850() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %587 = divide(%584, %585) /* ty=Tensor[(16, 10, 2), float32] */;
    %588 = %586.0;
    (%587, %588)
  };
  %589(%var_5954) /* ty=(Tensor[(16, 10, 2), float32], Tensor[(16, 10, 2), bool]) */
}

def @func_4427() -> (Tensor[(16, 10, 2), bool],) {
  @func_4425() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_929(%var_927: Tensor[(3, 14, 16), int16], %var_928: Tensor[(3, 14, 16), int16]) -> Tensor[(3, 14, 16), int16] {
  @func_925(%var_927, %var_928) /* ty=Tensor[(3, 14, 16), int16] */
}

def @func_5883() -> Tensor[(16, 10, 2), bool] {
  @func_5881() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_7284(%var_7260: Tensor[(507), bool]) -> (Tensor[(20), float64], Tensor[(16, 10, 2), bool], Tensor[(507), bool], Tensor[(4, 9, 16), bool], Tensor[(576), float64]) {
  %590 = @func_6338() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(20), float64], Tensor[(672), int16]) */;
  %591 = @func_5262() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %592 = cast(meta[relay.Constant][21] /* ty=Tensor[(507), float64] */, dtype="float64") /* ty=Tensor[(507), float64] */;
  %593 = reshape(%592, newshape=[13, 13, 3]) /* ty=Tensor[(13, 13, 3), float64] */;
  %594 = @func_2000(%593) /* ty=Tensor[(13, 13, 3), float64] */;
  %595 = cast(%594, dtype="bool") /* ty=Tensor[(13, 13, 3), bool] */;
  %596 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(507), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %597 = cast(meta[relay.Constant][21] /* ty=Tensor[(507), float64] */, dtype="bool") /* ty=Tensor[(507), bool] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?), bool] */;
  %599 = not_equal(%597, %598) /* ty=Tensor[(507), bool] */;
  %600 = cast(%var_7260, dtype="bool") /* ty=Tensor[(507), bool] */;
  %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(1), int32] */;
  %602 = cast(%599, dtype="bool") /* ty=Tensor[(507), bool] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?), bool] */;
  %604 = cast(meta[relay.Constant][22] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %605 = reshape(%604, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float64] */;
  %606 = @func_5700(%605) /* ty=(Tensor[(4, 9, 16), bool], Tensor[(4, 9, 16), uint64], Tensor[(3, 7, 12), float64], Tensor[(6, 42), float64]) */;
  %607 = %590.4;
  %608 = %591.0;
  %609 = logical_and(%602, %603) /* ty=Tensor[(507), bool] */;
  %610 = %606.0;
  (%607, %608, %609, %610, meta[relay.Constant][22] /* ty=Tensor[(576), float64] */)
}

def @func_3165(%var_3162: Tensor[(169, 10), uint16], %var_3163: Tensor[(294), float64], %var_3164: Tensor[(60), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(10, 13, 13), uint16], Tensor[(169, 10), uint16], Tensor[(60), float32], Tensor[(294), float64], Tensor[(60), float32]) {
  @func_3160(%var_3162, %var_3163, %var_3164) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(10, 13, 13), uint16], Tensor[(169, 10), uint16], Tensor[(60), float32], Tensor[(294), float64], Tensor[(60), float32]) */
}

def @func_3611() -> (Tensor[(16, 10, 2), bool],) {
  %611 = @func_3066() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %612 = %611.0;
  (%612,)
}

def @func_5733() -> Tensor[(16, 10, 2), bool] {
  %613 = @func_3293() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
  %613.0
}

def @func_6509(%var_6507: Tensor[(486), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(384), float32], Tensor[(486), float64], Tensor[(16, 10, 2), bool]) {
  @func_6506(%var_6507) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(384), float32], Tensor[(486), float64], Tensor[(16, 10, 2), bool]) */
}

def @func_2961(%var_2957: Tensor[(3, 14, 7), float64], %var_2958: Tensor[(3, 14, 7), float64], %var_2959: Tensor[(60), float32], %var_2960: Tensor[(3, 14, 7), float64]) -> (Tensor[(1, 15, 4), float32], Tensor[(60), float32], Tensor[(3, 14, 7), float32]) {
  %628 = fn (%var_2932: Tensor[(3, 14, 7), float64], %var_2933: Tensor[(3, 14, 7), float64], %var_2944: Tensor[(60), float32], %var_2949: Tensor[(3, 14, 7), float64]) -> (Tensor[(1, 15, 4), float32], Tensor[(60), float32], Tensor[(3, 14, 7), float32]) {
    %614 = cast(%var_2944, dtype="float32") /* ty=Tensor[(60), float32] */;
    %615 = reshape(%614, newshape=[1, 15, 4]) /* ty=Tensor[(1, 15, 4), float32] */;
    %616 = @func_2898(%615) /* ty=(Tensor[(1, 15, 4), float32], Tensor[(16, 10, 2), bool], Tensor[(672), int16], Tensor[(20), float64], Tensor[(672), int16]) */;
    %617 = cast(%var_2933, dtype="float64") /* ty=Tensor[(3, 14, 7), float64] */;
    %618 = shape_of(%var_2932, dtype="int32") /* ty=Tensor[(3), int32] */;
    %619 = cast(%var_2932, dtype="float64") /* ty=Tensor[(3, 14, 7), float64] */;
    %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %621 = floor_mod(%619, %620) /* ty=Tensor[(3, 14, 7), float64] */;
    %622 = cast(%var_2949, dtype="float32") /* ty=Tensor[(3, 14, 7), float32] */;
    %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
    %624 = cast(%621, dtype="float32") /* ty=Tensor[(3, 14, 7), float32] */;
    %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %626 = %616.0;
    %627 = minimum(%624, %625) /* ty=Tensor[(3, 14, 7), float32] */;
    (%626, %var_2944, %627)
  };
  %628(%var_2957, %var_2958, %var_2959, %var_2960) /* ty=(Tensor[(1, 15, 4), float32], Tensor[(60), float32], Tensor[(3, 14, 7), float32]) */
}

def @func_4160() -> (Tensor[(16, 10, 2), bool],) {
  %629 = @func_3924() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %630 = %629.0;
  (%630,)
}

def @func_4162() -> (Tensor[(16, 10, 2), bool],) {
  @func_4160() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_3294() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %635 = fn () -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
    %631 = @func_3031() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
    %632 = @func_2744() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %633 = %631.1;
    %634 = %632.0;
    (%633, %634)
  };
  %635() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */
}

def @func_3685(%var_3683: Tensor[(16, 3, 4), bool], %var_3684: Tensor[(16, 3, 4), bool]) -> Tensor[(16, 3, 4), bool] {
  @func_3681(%var_3683, %var_3684) /* ty=Tensor[(16, 3, 4), bool] */
}

def @func_1473(%var_1418: Tensor[(2, 12, 16), float32], %var_1459: Tensor[(486), float64]) -> (Tensor[(2, 16, 14), float32], Tensor[(448), float32], Tensor[(2, 12, 16), float64], Tensor[(10), float64], Tensor[(486), float64], Tensor[(10, ?, ?), uint64]) {
  %636 = cast(meta[relay.Constant][23] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
  %637 = reshape(%636, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), float32] */;
  %638 = cast(%var_1418, dtype="float32") /* ty=Tensor[(2, 12, 16), float32] */;
  %639 = log(%638) /* ty=Tensor[(2, 12, 16), float32] */;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(2, 12, 16), float64] */;
  %641 = cast(%var_1459, dtype="float64") /* ty=Tensor[(486), float64] */;
  %642 = reshape(%641, newshape=[9, 6, 9]) /* ty=Tensor[(9, 6, 9), float64] */;
  %643 = @func_428(%642) /* ty=(Tensor[(10, ?, ?), uint64], Tensor[(10), float64], Tensor[(9, 6, 9), float64]) */;
  %644 = %643.1;
  %645 = cast(%644, dtype="float64") /* ty=Tensor[(10), float64] */;
  %646 = reshape(%645, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float64] */;
  %647 = @func_163(%646) /* ty=(Tensor[(10, ?, ?), uint64],) */;
  %648 = @func_961(%637) /* ty=Tensor[(2, 16, 14), float32] */;
  %649 = log10(%640) /* ty=Tensor[(2, 12, 16), float64] */;
  %650 = %647.0;
  (%648, meta[relay.Constant][23] /* ty=Tensor[(448), float32] */, %649, %644, %var_1459, %650)
}

def @func_8221(%var_8197: Tensor[(7, 15, 7), float32]) -> (Tensor[(7, 15, 7), float32], Tensor[(16, 10, 2), bool]) {
  %651 = cast(%var_8197, dtype="float32") /* ty=Tensor[(7, 15, 7), float32] */;
  %652 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(7, 15, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 15, 7), float32] */, dtype="float32") /* ty=Tensor[(7, 15, 7), float32] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %655 = @func_5262() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %656 = minimum(%653, %654) /* ty=Tensor[(7, 15, 7), float32] */;
  %657 = %655.0;
  (%656, %657)
}

def @func_4120() -> (Tensor[(16, 10, 2), float32],) {
  %662 = fn () -> (Tensor[(16, 10, 2), float32],) {
    %658 = @func_3850() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %659 = %658.0;
    %660 = cast(%659, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
    %661 = sinh(%660) /* ty=Tensor[(16, 10, 2), float32] */;
    (%661,)
  };
  %662() /* ty=(Tensor[(16, 10, 2), float32],) */
}

def @func_7313(%var_7298: Tensor[(35), int64], %var_7299: Tensor[(4, 112), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(5, 9, 7), bool], Tensor[(35), int64], Tensor[(4, 112), float32], Tensor[(16, 10, 2), int8]) {
  %663 = @func_5262() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %664 = cast(%var_7298, dtype="int64") /* ty=Tensor[(35), int64] */;
  %665 = cast(%var_7299, dtype="float32") /* ty=Tensor[(4, 112), float32] */;
  %666 = reshape(%664, newshape=[5, 1, 7]) /* ty=Tensor[(5, 1, 7), int64] */;
  %667 = reshape(%665, newshape=[1, 448]) /* ty=Tensor[(1, 448), float32] */;
  %668 = @func_3469(%666, %667) /* ty=(Tensor[(2, 16, 14), float32], Tensor[(1, 448), float32], Tensor[(5, 9, 7), bool], Tensor[(2, 16, 14), float32]) */;
  %669 = %663.0;
  %670 = cast(%669, dtype="bool") /* ty=Tensor[(16, 10, 2), bool] */;
  %671 = reshape(%670, newshape=[16, 10, 2]) /* ty=Tensor[(16, 10, 2), bool] */;
  %672 = @func_5476(%671) /* ty=(Tensor[(16, 10, 2), int8],) */;
  %673 = %668.2;
  %674 = %672.0;
  (%669, %673, %var_7298, %var_7299, %674)
}

def @func_5606() -> (Tensor[(16, 10, 2), bool],) {
  @func_5604() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_3681(%var_3674: Tensor[(16, 3, 4), bool], %var_3675: Tensor[(16, 3, 4), bool]) -> Tensor[(16, 3, 4), bool] {
  %675 = cast(%var_3675, dtype="bool") /* ty=Tensor[(16, 3, 4), bool] */;
  %676 = shape_of(%var_3674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%var_3674, dtype="bool") /* ty=Tensor[(16, 3, 4), bool] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%677, %678) /* ty=Tensor[(16, 3, 4), bool] */
}

def @func_5735() -> Tensor[(16, 10, 2), bool] {
  @func_5733() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_3567() -> Tensor[(16, 10, 2), bool] {
  %680 = fn () -> Tensor[(16, 10, 2), bool] {
    %679 = @func_3293() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
    %679.0
  };
  %680() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_5807() -> Tensor[(16, 10, 2), bool] {
  @func_5805() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_7153() -> (Tensor[(16, 3, 4), bool], Tensor[(192, 20), float32]) {
  %681 = cast(meta[relay.Constant][25] /* ty=Tensor[(192, 1), bool] */, dtype="bool") /* ty=Tensor[(192, 1), bool] */;
  %682 = cast(meta[relay.Constant][25] /* ty=Tensor[(192, 1), bool] */, dtype="bool") /* ty=Tensor[(192, 1), bool] */;
  %683 = reshape(%681, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), bool] */;
  %684 = reshape(%682, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), bool] */;
  %685 = @func_6338() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(20), float64], Tensor[(672), int16]) */;
  %686 = %685.4;
  %687 = cast(meta[relay.Constant][25] /* ty=Tensor[(192, 1), bool] */, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %688 = cast(%686, dtype="float32") /* ty=Tensor[(20), float32] */;
  %689 = mod(%687, %688) /* ty=Tensor[(192, 20), float32] */;
  %690 = cast(meta[relay.Constant][25] /* ty=Tensor[(192, 1), bool] */, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %691 = cast(%689, dtype="float32") /* ty=Tensor[(192, 20), float32] */;
  %692 = add(%690, %691) /* ty=Tensor[(192, 20), float32] */;
  %693 = cast(%692, dtype="float32") /* ty=Tensor[(192, 20), float32] */;
  %694 = @func_3681(%683, %684) /* ty=Tensor[(16, 3, 4), bool] */;
  %695 = sinh(%693) /* ty=Tensor[(192, 20), float32] */;
  (%694, %695)
}

def @func_4696(%var_4695: Tensor[(56, 12), int16]) -> (Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(20), float64], Tensor[(56, 12), int16]) {
  %704 = fn (%var_4691: Tensor[(56, 12), int16]) -> (Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(20), float64], Tensor[(56, 12), int16]) {
    %696 = @func_4160() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %697 = cast(meta[relay.Constant][26] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
    %698 = cast(%var_4691, dtype="int16") /* ty=Tensor[(56, 12), int16] */;
    %699 = reshape(%697, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), float64] */;
    %700 = reshape(%698, newshape=[672]) /* ty=Tensor[(672), int16] */;
    %701 = @func_2455(%699, %700) /* ty=(Tensor[(3, 14, 16), int16], Tensor[(672), int16], Tensor[(4, ?, 5), int64]) */;
    %702 = %696.0;
    %703 = %701.0;
    (%702, %703, meta[relay.Constant][26] /* ty=Tensor[(20), float64] */, %var_4691)
  };
  %704(%var_4695) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(20), float64], Tensor[(56, 12), int16]) */
}

def @func_8298() -> Tensor[(16, 10, 2), bool] {
  @func_8296() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_3710(%var_3708: Tensor[(5, 14, 16), float64]) -> (Tensor[(5, 14, 16), float64], Tensor[(16, 10, 2), bool]) {
  @func_3707(%var_3708) /* ty=(Tensor[(5, 14, 16), float64], Tensor[(16, 10, 2), bool]) */
}

def @func_4933() -> (Tensor[(16, 10, 2), bool],) {
  @func_4931() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_3160(%var_3140: Tensor[(169, 10), uint16], %var_3156: Tensor[(294), float64], %var_3157: Tensor[(60), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(10, 13, 13), uint16], Tensor[(169, 10), uint16], Tensor[(60), float32], Tensor[(294), float64], Tensor[(60), float32]) {
  %705 = cast(%var_3140, dtype="uint16") /* ty=Tensor[(169, 10), uint16] */;
  %706 = cast(%var_3140, dtype="uint16") /* ty=Tensor[(169, 10), uint16] */;
  %707 = reshape(%705, newshape=[10, 13, 13]) /* ty=Tensor[(10, 13, 13), uint16] */;
  %708 = reshape(%706, newshape=[10, 13, 13]) /* ty=Tensor[(10, 13, 13), uint16] */;
  %709 = @func_1190(%707, %708) /* ty=(Tensor[(10, 13, 13), uint16],) */;
  %710 = cast(%var_3156, dtype="float64") /* ty=Tensor[(294), float64] */;
  %711 = cast(%var_3156, dtype="float64") /* ty=Tensor[(294), float64] */;
  %712 = cast(%var_3157, dtype="float32") /* ty=Tensor[(60), float32] */;
  %713 = cast(%var_3156, dtype="float64") /* ty=Tensor[(294), float64] */;
  %714 = reshape(%710, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), float64] */;
  %715 = reshape(%711, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), float64] */;
  %716 = reshape(%712, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %717 = reshape(%713, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), float64] */;
  %718 = @func_2956(%714, %715, %716, %717) /* ty=(Tensor[(1, 15, 4), float32], Tensor[(60), float32], Tensor[(3, 14, 7), float32]) */;
  %719 = @func_2979() /* ty=Tensor[(16, 10, 2), bool] */;
  %720 = %709.0;
  %721 = %718.1;
  (%719, %720, %var_3140, %721, %var_3156, %var_3157)
}

def @func_6909() -> Tensor[(4, 9, 16), float64] {
  %723 = fn () -> Tensor[(4, 9, 16), float64] {
    %722 = @func_6623() /* ty=(Tensor[(4, 9, 16), float64], Tensor[(3, 7, 12), float64]) */;
    %722.0
  };
  %723() /* ty=Tensor[(4, 9, 16), float64] */
}

def @func_5277() -> (Tensor[(16, 10, 2), bool],) {
  @func_5275() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_7595(%var_7593: Tensor[(672), int16]) -> (Tensor[(192, 20), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(672), int16]) {
  @func_7592(%var_7593) /* ty=(Tensor[(192, 20), float32], Tensor[(16, 10, 2), bool], Tensor[(3, 14, 16), int16], Tensor[(672), int16]) */
}

def @func_4967() -> (Tensor[(16, 10, 2), bool],) {
  @func_4965() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_5072() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %724 = @func_4201() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %725 = @func_4201() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %726 = %724.0;
  %727 = %725.0;
  (%726, %727)
}

def @func_3912() -> Tensor[(16, 10, 2), bool] {
  %729 = fn () -> Tensor[(16, 10, 2), bool] {
    %728 = @func_3351() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %728.0
  };
  %729() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_430(%var_429: Tensor[(9, 6, 9), float64]) -> (Tensor[(10, ?, ?), uint64], Tensor[(10), float64], Tensor[(9, 6, 9), float64]) {
  %740 = fn (%var_415: Tensor[(9, 6, 9), float64]) -> (Tensor[(10, ?, ?), uint64], Tensor[(10), float64], Tensor[(9, 6, 9), float64]) {
    %730 = cast(meta[relay.Constant][27] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
    %731 = reshape(%730, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float64] */;
    %732 = @func_163(%731) /* ty=(Tensor[(10, ?, ?), uint64],) */;
    %733 = cast(%var_415, dtype="float64") /* ty=Tensor[(9, 6, 9), float64] */;
    %734 = sin(%733) /* ty=Tensor[(9, 6, 9), float64] */;
    %735 = cast(%734, dtype="float64") /* ty=Tensor[(9, 6, 9), float64] */;
    %736 = sigmoid(%735) /* ty=Tensor[(9, 6, 9), float64] */;
    %737 = cast(%736, dtype="float64") /* ty=Tensor[(9, 6, 9), float64] */;
    %738 = %732.0;
    %739 = asinh(%737) /* ty=Tensor[(9, 6, 9), float64] */;
    (%738, meta[relay.Constant][27] /* ty=Tensor[(10), float64] */, %739)
  };
  %740(%var_429) /* ty=(Tensor[(10, ?, ?), uint64], Tensor[(10), float64], Tensor[(9, 6, 9), float64]) */
}

def @func_4571(%var_4569: Tensor[(1, 35), int64], %var_4570: Tensor[(56, 8), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(1, 35), int64], Tensor[(56, 8), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(2, 16, 14), uint32]) {
  %765 = fn (%var_4510: Tensor[(1, 35), int64], %var_4511: Tensor[(56, 8), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(1, 35), int64], Tensor[(56, 8), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(2, 16, 14), uint32]) {
    %741 = @func_4425() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %742 = cast(%var_4510, dtype="int64") /* ty=Tensor[(1, 35), int64] */;
    %743 = cast(%var_4511, dtype="float32") /* ty=Tensor[(56, 8), float32] */;
    %744 = reshape(%742, newshape=[5, 1, 7]) /* ty=Tensor[(5, 1, 7), int64] */;
    %745 = reshape(%743, newshape=[1, 448]) /* ty=Tensor[(1, 448), float32] */;
    %746 = @func_3469(%744, %745) /* ty=(Tensor[(2, 16, 14), float32], Tensor[(1, 448), float32], Tensor[(5, 9, 7), bool], Tensor[(2, 16, 14), float32]) */;
    %747 = %746.0;
    %748 = cast(%747, dtype="float64") /* ty=Tensor[(2, 16, 14), float64] */;
    %749 = shape_of(%var_4511, dtype="int32") /* ty=Tensor[(2), int32] */;
    %750 = cast(%var_4511, dtype="float64") /* ty=Tensor[(56, 8), float64] */;
    %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %752 = @func_3672() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %753 = @func_4425() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %754 = cast(%747, dtype="float64") /* ty=Tensor[(2, 16, 14), float64] */;
    %755 = tan(%754) /* ty=Tensor[(2, 16, 14), float64] */;
    %756 = cast(%var_4511, dtype="uint32") /* ty=Tensor[(56, 8), uint32] */;
    %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
    %758 = cast(%755, dtype="uint32") /* ty=Tensor[(2, 16, 14), uint32] */;
    %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %760 = %741.0;
    %761 = subtract(%750, %751) /* ty=Tensor[(56, 8), float64] */;
    %762 = %752.0;
    %763 = %753.0;
    %764 = minimum(%758, %759) /* ty=Tensor[(2, 16, 14), uint32] */;
    (%760, %var_4510, %761, %762, %763, %764)
  };
  %765(%var_4569, %var_4570) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(1, 35), int64], Tensor[(56, 8), float64], Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool], Tensor[(2, 16, 14), uint32]) */
}

def @func_4244() -> Tensor[(16, 10, 2), bool] {
  @func_4242() /* ty=Tensor[(16, 10, 2), bool] */
}

def @func_5554() -> (Tensor[(16, 10, 2), bool],) {
  %766 = @func_2979() /* ty=Tensor[(16, 10, 2), bool] */;
  (%766,)
}

def @func_3954(%var_3953: Tensor[(252), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64]) {
  %772 = fn (%var_3946: Tensor[(252), float64]) -> (Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64]) {
    %767 = cast(%var_3946, dtype="float64") /* ty=Tensor[(252), float64] */;
    %768 = reshape(%767, newshape=[252]) /* ty=Tensor[(252), float64] */;
    %769 = @func_3634(%768) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64]) */;
    %770 = @func_2664() /* ty=Tensor[(16, 10, 2), bool] */;
    %771 = %769.1;
    (%770, %771, %var_3946)
  };
  %772(%var_3953) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(3, 7, 12), float64], Tensor[(252), float64]) */
}

def @func_4322() -> (Tensor[(16, 10, 2), bool],) {
  %775 = fn () -> (Tensor[(16, 10, 2), bool],) {
    %773 = @func_3672() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %774 = %773.0;
    (%774,)
  };
  %775() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_7634() -> (Tensor[(16, 3, 4), bool], Tensor[(16, 3, 4), uint16]) {
  @func_7632() /* ty=(Tensor[(16, 3, 4), bool], Tensor[(16, 3, 4), uint16]) */
}

def @func_2744() -> (Tensor[(16, 10, 2), bool],) {
  %776 = @func_2468() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %777 = %776.0;
  (%777,)
}

def @func_2469() -> (Tensor[(16, 10, 2), bool],) {
  %785 = fn () -> (Tensor[(16, 10, 2), bool],) {
    %778 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 10, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 2), float32] */;
    %779 = log(%778) /* ty=Tensor[(16, 10, 2), float32] */;
    %780 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 10, 2), float32] */, dtype="bool") /* ty=Tensor[(16, 10, 2), bool] */;
    %781 = shape_of(%779, dtype="int32") /* ty=Tensor[(3), int32] */;
    %782 = cast(%779, dtype="bool") /* ty=Tensor[(16, 10, 2), bool] */;
    %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %784 = less_equal(%782, %783) /* ty=Tensor[(16, 10, 2), bool] */;
    (%784,)
  };
  %785() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_6579() -> (Tensor[(16, 10, 2), float32],) {
  @func_6577() /* ty=(Tensor[(16, 10, 2), float32],) */
}

def @func_5703(%var_5701: Tensor[(4, 9, 16), float64]) -> (Tensor[(4, 9, 16), bool], Tensor[(4, 9, 16), uint64], Tensor[(3, 7, 12), float64], Tensor[(6, 42), float64]) {
  @func_5700(%var_5701) /* ty=(Tensor[(4, 9, 16), bool], Tensor[(4, 9, 16), uint64], Tensor[(3, 7, 12), float64], Tensor[(6, 42), float64]) */
}

def @func_7053() -> (Tensor[(10, ?, ?), uint64],) {
  %786 = @func_4401() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(10), float64]) */;
  %787 = %786.1;
  (%787,)
}

def @func_4403() -> (Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(10), float64]) {
  @func_4401() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(10, ?, ?), uint64], Tensor[(10), float64]) */
}

def @func_2212(%var_2210: Tensor[(3, 7, 12), float64], %var_2211: Tensor[(3, 7, 12), float64]) -> (Tensor[(3, 7, 12), float64],) {
  %793 = fn (%var_2204: Tensor[(3, 7, 12), float64], %var_2205: Tensor[(3, 7, 12), float64]) -> (Tensor[(3, 7, 12), float64],) {
    %788 = cast(%var_2205, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
    %789 = shape_of(%var_2204, dtype="int32") /* ty=Tensor[(3), int32] */;
    %790 = cast(%var_2204, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
    %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %792 = mod(%790, %791) /* ty=Tensor[(3, 7, 12), float64] */;
    (%792,)
  };
  %793(%var_2210, %var_2211) /* ty=(Tensor[(3, 7, 12), float64],) */
}

def @func_3067() -> (Tensor[(16, 10, 2), bool],) {
  %796 = fn () -> (Tensor[(16, 10, 2), bool],) {
    %794 = @func_3031() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */;
    %795 = %794.0;
    (%795,)
  };
  %796() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_2901(%var_2899: Tensor[(1, 15, 4), float32]) -> (Tensor[(1, 15, 4), float32], Tensor[(16, 10, 2), bool], Tensor[(672), int16], Tensor[(20), float64], Tensor[(672), int16]) {
  @func_2898(%var_2899) /* ty=(Tensor[(1, 15, 4), float32], Tensor[(16, 10, 2), bool], Tensor[(672), int16], Tensor[(20), float64], Tensor[(672), int16]) */
}

def @func_4895(%var_4893: Tensor[(1, 5, 8), float32]) -> (Tensor[(?, 5, 8), int16],) {
  @func_4892(%var_4893) /* ty=(Tensor[(?, 5, 8), int16],) */
}

def @func_7632() -> (Tensor[(16, 3, 4), bool], Tensor[(16, 3, 4), uint16]) {
  %797 = @func_7153() /* ty=(Tensor[(16, 3, 4), bool], Tensor[(192, 20), float32]) */;
  %798 = %797.0;
  %799 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 3, 4), bool] */, dtype="bool") /* ty=Tensor[(16, 3, 4), bool] */;
  %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%798, dtype="bool") /* ty=Tensor[(16, 3, 4), bool] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %803 = cast(%798, dtype="uint16") /* ty=Tensor[(16, 3, 4), uint16] */;
  %804 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(16, 3, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 3, 4), bool] */, dtype="uint16") /* ty=Tensor[(16, 3, 4), uint16] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %807 = less_equal(%801, %802) /* ty=Tensor[(16, 3, 4), bool] */;
  %808 = right_shift(%805, %806) /* ty=Tensor[(16, 3, 4), uint16] */;
  (%807, %808)
}

def @func_8350(%var_8336: Tensor[(35), int64], %var_8337: Tensor[(448), float32]) -> (Tensor[(16, 10, 2), bool], Tensor[(35), int64], Tensor[(35), int64], Tensor[(448), float32], Tensor[(10, ?, ?), uint64]) {
  %809 = cast(%var_8336, dtype="int64") /* ty=Tensor[(35), int64] */;
  %810 = cast(%var_8337, dtype="float32") /* ty=Tensor[(448), float32] */;
  %811 = reshape(%809, newshape=[35]) /* ty=Tensor[(35), int64] */;
  %812 = reshape(%810, newshape=[4, 112]) /* ty=Tensor[(4, 112), float32] */;
  %813 = @func_7313(%811, %812) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(5, 9, 7), bool], Tensor[(35), int64], Tensor[(4, 112), float32], Tensor[(16, 10, 2), int8]) */;
  %814 = @func_7053() /* ty=(Tensor[(10, ?, ?), uint64],) */;
  %815 = @func_4242() /* ty=Tensor[(16, 10, 2), bool] */;
  %816 = %813.2;
  %817 = %814.0;
  (%815, %816, %var_8336, %var_8337, %817)
}

def @func_7863(%var_7841: Tensor[(13, 4, 5), int32], %var_7842: Tensor[(13, 4, 5), int32], %var_7856: Tensor[(4, 60), uint32]) -> (Tensor[(13, 4, 5), bool], Tensor[(3, 7, 12), float64], Tensor[(4, 60), uint32], Tensor[(252), float64], Tensor[(4, 10, 1), float32], Tensor[(40), float32]) {
  %818 = cast(%var_7842, dtype="int32") /* ty=Tensor[(13, 4, 5), int32] */;
  %819 = shape_of(%var_7841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %820 = cast(%var_7841, dtype="int32") /* ty=Tensor[(13, 4, 5), int32] */;
  %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %822 = bitwise_xor(%820, %821) /* ty=Tensor[(13, 4, 5), int32] */;
  %823 = cast(%822, dtype="bool") /* ty=Tensor[(13, 4, 5), bool] */;
  %824 = shape_of(%var_7841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%var_7841, dtype="bool") /* ty=Tensor[(13, 4, 5), bool] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %827 = cast(%var_7856, dtype="uint32") /* ty=Tensor[(4, 60), uint32] */;
  %828 = cast(%var_7856, dtype="uint32") /* ty=Tensor[(4, 60), uint32] */;
  %829 = cast(%var_7856, dtype="uint32") /* ty=Tensor[(4, 60), uint32] */;
  %830 = cast(meta[relay.Constant][30] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %831 = reshape(%827, newshape=[4, 6, 10]) /* ty=Tensor[(4, 6, 10), uint32] */;
  %832 = reshape(%828, newshape=[4, 6, 10]) /* ty=Tensor[(4, 6, 10), uint32] */;
  %833 = reshape(%829, newshape=[4, 6, 10]) /* ty=Tensor[(4, 6, 10), uint32] */;
  %834 = reshape(%830, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %835 = @func_7567(%831, %832, %833, %834) /* ty=(Tensor[(16, 10, 2), bool], Tensor[(4, 6, 10), int32], Tensor[(3, 7, 12), float64], Tensor[(252), float64], Tensor[(4, 6, 10), float32], Tensor[(16, 10, 2), bool]) */;
  %836 = cast(meta[relay.Constant][31] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %837 = reshape(%836, newshape=[4, 10, 1]) /* ty=Tensor[(4, 10, 1), float32] */;
  %838 = less_equal(%825, %826) /* ty=Tensor[(13, 4, 5), bool] */;
  %839 = %835.2;
  %840 = @func_4921(%837) /* ty=Tensor[(4, 10, 1), float32] */;
  (%838, %839, %var_7856, meta[relay.Constant][30] /* ty=Tensor[(252), float64] */, %840, meta[relay.Constant][31] /* ty=Tensor[(40), float32] */)
}

def @func_6984() -> Tensor[(16, 10, 2), float32] {
  @func_6982() /* ty=Tensor[(16, 10, 2), float32] */
}

def @func_7507() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 5, 13), float32], Tensor[(1040), int16], Tensor[(486), float64]) {
  %851 = fn () -> (Tensor[(16, 10, 2), bool], Tensor[(16, 5, 13), float32], Tensor[(1040), int16], Tensor[(486), float64]) {
    %841 = @func_3611() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %842 = cast(meta[relay.Constant][32] /* ty=Tensor[(1040), int16] */, dtype="int16") /* ty=Tensor[(1040), int16] */;
    %843 = cast(meta[relay.Constant][32] /* ty=Tensor[(1040), int16] */, dtype="int16") /* ty=Tensor[(1040), int16] */;
    %844 = cast(meta[relay.Constant][33] /* ty=Tensor[(486), float64] */, dtype="float64") /* ty=Tensor[(486), float64] */;
    %845 = reshape(%842, newshape=[16, 5, 13]) /* ty=Tensor[(16, 5, 13), int16] */;
    %846 = reshape(%843, newshape=[16, 5, 13]) /* ty=Tensor[(16, 5, 13), int16] */;
    %847 = reshape(%844, newshape=[486]) /* ty=Tensor[(486), float64] */;
    %848 = @func_6257(%845, %846, %847) /* ty=(Tensor[(16, 5, 13), float32], Tensor[(16, 5, 13), uint32], Tensor[(16, 5, 13), uint64], Tensor[(16, 10, 2), bool], Tensor[(16, 5, 13), float32], Tensor[(384), float32], Tensor[(486), float64]) */;
    %849 = %841.0;
    %850 = %848.0;
    (%849, %850, meta[relay.Constant][32] /* ty=Tensor[(1040), int16] */, meta[relay.Constant][33] /* ty=Tensor[(486), float64] */)
  };
  %851() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 5, 13), float32], Tensor[(1040), int16], Tensor[(486), float64]) */
}

def @func_2746() -> (Tensor[(16, 10, 2), bool],) {
  @func_2744() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_3032() -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
  %854 = fn () -> (Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) {
    %852 = @func_2979() /* ty=Tensor[(16, 10, 2), bool] */;
    %853 = @func_2637() /* ty=Tensor[(16, 10, 2), bool] */;
    (%852, %853)
  };
  %854() /* ty=(Tensor[(16, 10, 2), bool], Tensor[(16, 10, 2), bool]) */
}

def @func_3851() -> (Tensor[(16, 10, 2), bool],) {
  %857 = fn () -> (Tensor[(16, 10, 2), bool],) {
    %855 = @func_2468() /* ty=(Tensor[(16, 10, 2), bool],) */;
    %856 = %855.0;
    (%856,)
  };
  %857() /* ty=(Tensor[(16, 10, 2), bool],) */
}

def @func_2898(%var_2864: Tensor[(1, 15, 4), float32]) -> (Tensor[(1, 15, 4), float32], Tensor[(16, 10, 2), bool], Tensor[(672), int16], Tensor[(20), float64], Tensor[(672), int16]) {
  %858 = cast(%var_2864, dtype="float32") /* ty=Tensor[(1, 15, 4), float32] */;
  %859 = @func_2744() /* ty=(Tensor[(16, 10, 2), bool],) */;
  %860 = cast(meta[relay.Constant][34] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %861 = cast(meta[relay.Constant][35] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %862 = reshape(%860, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), float64] */;
  %863 = reshape(%861, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %864 = @func_2455(%862, %863) /* ty=(Tensor[(3, 14, 16), int16], Tensor[(672), int16], Tensor[(4, ?, 5), int64]) */;
  %865 = asin(%858) /* ty=Tensor[(1, 15, 4), float32] */;
  %866 = %859.0;
  %867 = %864.1;
  (%865, %866, %867, meta[relay.Constant][34] /* ty=Tensor[(20), float64] */, meta[relay.Constant][35] /* ty=Tensor[(672), int16] */)
}

def @func_2458(%var_2456: Tensor[(4, 1, 5), float64], %var_2457: Tensor[(672), int16]) -> (Tensor[(3, 14, 16), int16], Tensor[(672), int16], Tensor[(4, ?, 5), int64]) {
  %880 = fn (%var_2424: Tensor[(4, 1, 5), float64], %var_2428: Tensor[(672), int16]) -> (Tensor[(3, 14, 16), int16], Tensor[(672), int16], Tensor[(4, ?, 5), int64]) {
    %868 = cast(%var_2428, dtype="int16") /* ty=Tensor[(672), int16] */;
    %869 = cast(%var_2428, dtype="int16") /* ty=Tensor[(672), int16] */;
    %870 = reshape(%868, newshape=[3, 14, 16]) /* ty=Tensor[(3, 14, 16), int16] */;
    %871 = reshape(%869, newshape=[3, 14, 16]) /* ty=Tensor[(3, 14, 16), int16] */;
    %872 = cast(%var_2424, dtype="float64") /* ty=Tensor[(4, 1, 5), float64] */;
    %873 = log2(%872) /* ty=Tensor[(4, 1, 5), float64] */;
    %874 = cast(%var_2424, dtype="int64") /* ty=Tensor[(4, 1, 5), int64] */;
    %875 = shape_of(%873, dtype="int32") /* ty=Tensor[(3), int32] */;
    %876 = cast(%873, dtype="int64") /* ty=Tensor[(4, 1, 5), int64] */;
    %877 = dyn.reshape(%874, %875, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %878 = @func_925(%870, %871) /* ty=Tensor[(3, 14, 16), int16] */;
    %879 = maximum(%876, %877) /* ty=Tensor[(4, ?, 5), int64] */;
    (%878, %var_2428, %879)
  };
  %880(%var_2456, %var_2457) /* ty=(Tensor[(3, 14, 16), int16], Tensor[(672), int16], Tensor[(4, ?, 5), int64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen132/build/output.py", line 2590, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:52:05] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

