==========mod==========
#[version = "0.0.5"]
def @func_2526() -> (Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(110, 15), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(110, 15), float64] */, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %1 = reshape(%0, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), float64] */;
  %2 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
  %3 = @func_2024(%1) /* ty=Tensor[(15, 10, 11), float64] */;
  (%2, %3, meta[relay.Constant][0] /* ty=Tensor[(110, 15), float64] */)
}

def @func_5952() -> (Tensor[(?, 2, 13), float32],) {
  %4 = @func_3451() /* ty=(Tensor[(?, 2, 13), bool],) */;
  %5 = %4.0;
  %6 = cast(%5, dtype="float32") /* ty=Tensor[(?, 2, 13), float32] */;
  %7 = asin(%6) /* ty=Tensor[(?, 2, 13), float32] */;
  %8 = cast(%7, dtype="float32") /* ty=Tensor[(?, 2, 13), float32] */;
  %9 = log(%8) /* ty=Tensor[(?, 2, 13), float32] */;
  (%9,)
}

def @func_4590(%var_4451: Tensor[(2, 7, 5), bool], %var_4466: Tensor[(120), int32]) -> (Tensor[(12, 5, 2), uint64], Tensor[(120), int32], Tensor[(143, 1), int16], Tensor[(2, 7, 5), uint32], Tensor[(?, 2, 13), float32], Tensor[(13, 11, ?), float64], Tensor[(2, 7, 5), float32], Tensor[(240), int64]) {
  %10 = cast(%var_4466, dtype="int32") /* ty=Tensor[(120), int32] */;
  %11 = cast(%var_4466, dtype="int32") /* ty=Tensor[(120), int32] */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(143, 1), int16] */, dtype="int16") /* ty=Tensor[(143, 1), int16] */;
  %13 = reshape(%10, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), int32] */;
  %14 = reshape(%11, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), int32] */;
  %15 = reshape(%12, newshape=[143]) /* ty=Tensor[(143), int16] */;
  %16 = @func_3769(%13, %14, %15) /* ty=(Tensor[(12, 5, 2), int32], Tensor[(12, 5, 2), uint64], Tensor[(?, 2, 13), bool], Tensor[(13, 11, ?), bool], Tensor[(143), int16], Tensor[(6, 14, 3), bool], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float64], Tensor[(1536), float32]) */;
  %17 = @func_4224() /* ty=Tensor[(2, 7, 5), bool] */;
  %18 = cast(%var_4451, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %19 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%17, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %22 = mod(%20, %21) /* ty=Tensor[(2, 7, 5), float32] */;
  %23 = cast(%22, dtype="uint32") /* ty=Tensor[(2, 7, 5), uint32] */;
  %24 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%17, dtype="uint32") /* ty=Tensor[(2, 7, 5), uint32] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %27 = @func_3876() /* ty=(Tensor[(?, 2, 13), float32],) */;
  %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(143, 1), int16] */, dtype="int16") /* ty=Tensor[(143, 1), int16] */;
  %29 = reshape(%28, newshape=[13, 11, 1]) /* ty=Tensor[(13, 11, 1), int16] */;
  %30 = @func_192(%29) /* ty=(Tensor[(13, 11, ?), bool], Tensor[(13, 11, ?), float64]) */;
  %31 = cast(%var_4451, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %32 = %16.1;
  %33 = bitwise_xor(%25, %26) /* ty=Tensor[(2, 7, 5), uint32] */;
  %34 = %27.0;
  %35 = %30.1;
  %36 = sigmoid(%31) /* ty=Tensor[(2, 7, 5), float32] */;
  %37 = @func_3164() /* ty=Tensor[(240), int64] */;
  (%32, %var_4466, meta[relay.Constant][1] /* ty=Tensor[(143, 1), int16] */, %33, %34, %35, %36, %37)
}

def @func_6312(%var_6288: Tensor[(252), int32], %var_6303: Tensor[(288), int32]) -> (Tensor[(2, 7, 5), float32], Tensor[(252), int32], Tensor[(6, 14, 3), float64], Tensor[(4, 6, 12), int32], Tensor[(288), int32]) {
  %38 = @func_6024() /* ty=(Tensor[(2, 7, 5), float32],) */;
  %39 = cast(%var_6288, dtype="int32") /* ty=Tensor[(252), int32] */;
  %40 = reshape(%39, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %41 = @func_4366(%40) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) */;
  %42 = %41.1;
  %43 = cast(%42, dtype="float64") /* ty=Tensor[(6, 14, 3), float64] */;
  %44 = cast(%var_6303, dtype="int32") /* ty=Tensor[(288), int32] */;
  %45 = cast(%var_6303, dtype="int32") /* ty=Tensor[(288), int32] */;
  %46 = reshape(%44, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %47 = reshape(%45, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %48 = %38.0;
  %49 = log2(%43) /* ty=Tensor[(6, 14, 3), float64] */;
  %50 = @func_663(%46, %47) /* ty=Tensor[(4, 6, 12), int32] */;
  (%48, %var_6288, %49, %50, %var_6303)
}

def @func_2899() -> Tensor[(2, 7, 5), float64] {
  @func_2204() /* ty=Tensor[(2, 7, 5), float64] */
}

def @func_8212() -> (Tensor[(7, 16, 15), float64], Tensor[(26, 1), float32], Tensor[(1536), float32], Tensor[(26), float32]) {
  %51 = @func_7604() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(15, 10, 11), float64], Tensor[(1650), float64], Tensor[(240), int64]) */;
  %52 = cast(meta[relay.Constant][2] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %53 = cast(meta[relay.Constant][3] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %54 = reshape(%52, newshape=[1, 1536]) /* ty=Tensor[(1, 1536), float32] */;
  %55 = reshape(%53, newshape=[26]) /* ty=Tensor[(26), float32] */;
  %56 = @func_3424(%54, %55) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(26, 1), float32], Tensor[(1, 1536), float32], Tensor[(26), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) */;
  %57 = %51.0;
  %58 = %56.1;
  (%57, %58, meta[relay.Constant][2] /* ty=Tensor[(1536), float32] */, meta[relay.Constant][3] /* ty=Tensor[(26), float32] */)
}

def @func_6364() -> (Tensor[(2, 7, 5), float64], Tensor[(26), float32], Tensor[(26), float32], Tensor[(4, 72), float32], Tensor[(288), int32]) {
  %59 = cast(meta[relay.Constant][4] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %60 = reshape(%59, newshape=[26]) /* ty=Tensor[(26), float32] */;
  %61 = @func_2584(%60) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(32, 48), float32], Tensor[(26), float32], Tensor[(2, 7, 5), float64]) */;
  %62 = cast(meta[relay.Constant][5] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %63 = reshape(%62, newshape=[4, 72]) /* ty=Tensor[(4, 72), int32] */;
  %64 = @func_3103(%63) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(4, 6, 12), int32], Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(4, 72), float32]) */;
  %65 = @func_5611() /* ty=Tensor[(2, 7, 5), float64] */;
  %66 = %61.3;
  %67 = %64.5;
  (%65, %66, meta[relay.Constant][4] /* ty=Tensor[(26), float32] */, %67, meta[relay.Constant][5] /* ty=Tensor[(288), int32] */)
}

def @func_9608() -> (Tensor[(2, 7, 5), float64],) {
  %68 = @func_7671() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %69 = %68.0;
  (%69,)
}

def @func_9855(%var_9806: bool, %var_9807: Tensor[(4, 14, 1), bool]) -> (Tensor[(4, 14, 1), bool], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(252), int32], Tensor[(4, 14, 1), float32], Tensor[(4, 72), float32], Tensor[(288), int32], Tensor[(1536, 26), float32]) {
  %70 = cast(%var_9806, dtype="bool") /* ty=bool */;
  %71 = cast(%var_9807, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
  %72 = cast(meta[relay.Constant][6] /* ty=Tensor[(1536, 1), float32] */, dtype="float32") /* ty=Tensor[(1536, 1), float32] */;
  %73 = cast(meta[relay.Constant][7] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %74 = reshape(%72, newshape=[1, 1536]) /* ty=Tensor[(1, 1536), float32] */;
  %75 = reshape(%73, newshape=[26]) /* ty=Tensor[(26), float32] */;
  %76 = @func_3424(%74, %75) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(26, 1), float32], Tensor[(1, 1536), float32], Tensor[(26), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) */;
  %77 = cast(meta[relay.Constant][8] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %78 = reshape(%77, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %79 = @func_2615(%78) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) */;
  %80 = cast(%var_9807, dtype="float32") /* ty=Tensor[(4, 14, 1), float32] */;
  %81 = cast(meta[relay.Constant][9] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %82 = reshape(%81, newshape=[4, 72]) /* ty=Tensor[(4, 72), int32] */;
  %83 = @func_3103(%82) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(4, 6, 12), int32], Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(4, 72), float32]) */;
  %84 = cast(meta[relay.Constant][7] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %85 = cast(meta[relay.Constant][6] /* ty=Tensor[(1536, 1), float32] */, dtype="float32") /* ty=Tensor[(1536, 1), float32] */;
  %86 = logical_and(%70, %71) /* ty=Tensor[(4, 14, 1), bool] */;
  %87 = %76.0;
  %88 = %79.0;
  %89 = log2(%80) /* ty=Tensor[(4, 14, 1), float32] */;
  %90 = %83.5;
  %91 = floor_divide(%84, %85) /* ty=Tensor[(1536, 26), float32] */;
  (%86, %87, %88, meta[relay.Constant][8] /* ty=Tensor[(252), int32] */, %89, %90, meta[relay.Constant][9] /* ty=Tensor[(288), int32] */, %91)
}

def @func_8759() -> (Tensor[(2, 7, 5), float64],) {
  %92 = @func_3267() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %93 = %92.1;
  (%93,)
}

def @func_9996() -> (Tensor[(?, 2, 13), float32], Tensor[(15, 10, 11), float64]) {
  %94 = @func_5952() /* ty=(Tensor[(?, 2, 13), float32],) */;
  %95 = @func_8111() /* ty=(Tensor[(15, 10, 11), float64],) */;
  %96 = %94.0;
  %97 = %95.0;
  (%96, %97)
}

def @main(%var_10028: Tensor[(120), int32], %var_10029: Tensor[(143), int16], %var_10034: Tensor[(143), int16]) -> (Tensor[(2, 7, 5), float32], Tensor[(12, 5, 2), int32], Tensor[(120), int32], Tensor[(143), uint32]) {
  %98 = @func_4923() /* ty=Tensor[(2, 7, 5), float32] */;
  %99 = cast(%98, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %100 = cast(%var_10028, dtype="int32") /* ty=Tensor[(120), int32] */;
  %101 = cast(%var_10028, dtype="int32") /* ty=Tensor[(120), int32] */;
  %102 = cast(%var_10029, dtype="int16") /* ty=Tensor[(143), int16] */;
  %103 = reshape(%100, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), int32] */;
  %104 = reshape(%101, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), int32] */;
  %105 = reshape(%102, newshape=[143]) /* ty=Tensor[(143), int16] */;
  %106 = @func_3769(%103, %104, %105) /* ty=(Tensor[(12, 5, 2), int32], Tensor[(12, 5, 2), uint64], Tensor[(?, 2, 13), bool], Tensor[(13, 11, ?), bool], Tensor[(143), int16], Tensor[(6, 14, 3), bool], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float64], Tensor[(1536), float32]) */;
  %107 = cast(%var_10034, dtype="uint32") /* ty=Tensor[(143), uint32] */;
  %108 = shape_of(%var_10029, dtype="int32") /* ty=Tensor[(1), int32] */;
  %109 = cast(%var_10029, dtype="uint32") /* ty=Tensor[(143), uint32] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %111 = tan(%99) /* ty=Tensor[(2, 7, 5), float32] */;
  %112 = %106.0;
  %113 = minimum(%109, %110) /* ty=Tensor[(143), uint32] */;
  (%111, %112, %var_10028, %113)
}

def @func_6412(%var_6396: Tensor[(288), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(4, 72), float32], Tensor[(288), int32], Tensor[(2, 7, 5), float32], Tensor[(7, 16, 15), float64]) {
  %114 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %115 = cast(%var_6396, dtype="int32") /* ty=Tensor[(288), int32] */;
  %116 = reshape(%115, newshape=[4, 72]) /* ty=Tensor[(4, 72), int32] */;
  %117 = @func_3103(%116) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(4, 6, 12), int32], Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(4, 72), float32]) */;
  %118 = @func_6024() /* ty=(Tensor[(2, 7, 5), float32],) */;
  %119 = @func_2866() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(6, 14, 3), bool]) */;
  %120 = @func_2784() /* ty=Tensor[(2, 7, 5), float64] */;
  %121 = %114.0;
  %122 = %117.5;
  %123 = %118.0;
  %124 = %119.0;
  (%120, %121, %122, %var_6396, %123, %124)
}

def @func_4923() -> Tensor[(2, 7, 5), float32] {
  %125 = @func_3886() /* ty=(Tensor[(2, 7, 5), float32],) */;
  %125.0
}

def @func_9887() -> (Tensor[(240), int64],) {
  %126 = @func_4391() /* ty=(Tensor[(240), int64], Tensor[(?, 2, 13), float32]) */;
  %127 = %126.0;
  (%127,)
}

def @func_7281() -> (Tensor[(8, 5, 9), uint32], Tensor[(8, 5, 9), float32], Tensor[(2, 7, 5), float64], Tensor[(7, 16, 15), float64]) {
  %128 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 5, 9), uint32] */, dtype="uint32") /* ty=Tensor[(8, 5, 9), uint32] */;
  %129 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(8, 5, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 5, 9), uint32] */, dtype="uint32") /* ty=Tensor[(8, 5, 9), uint32] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %132 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 5, 9), uint32] */, dtype="float32") /* ty=Tensor[(8, 5, 9), float32] */;
  %133 = @func_5289() /* ty=(Tensor[(7, 16, 15), float64],) */;
  %134 = bitwise_and(%130, %131) /* ty=Tensor[(8, 5, 9), uint32] */;
  %135 = rsqrt(%132) /* ty=Tensor[(8, 5, 9), float32] */;
  %136 = @func_5651() /* ty=Tensor[(2, 7, 5), float64] */;
  %137 = %133.0;
  (%134, %135, %136, %137)
}

def @func_343(%var_319: Tensor[(5, 6, 8), int64]) -> (Tensor[(5, 6, 8), int64], Tensor[(5, 6, 8), bool]) {
  %138 = cast(2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %139 = cast(%var_319, dtype="int64") /* ty=Tensor[(5, 6, 8), int64] */;
  %140 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 6, 8), int64] */, dtype="bool") /* ty=Tensor[(5, 6, 8), bool] */;
  %141 = shape_of(%var_319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%var_319, dtype="bool") /* ty=Tensor[(5, 6, 8), bool] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %144 = bitwise_and(%138, %139) /* ty=Tensor[(5, 6, 8), int64] */;
  %145 = logical_and(%142, %143) /* ty=Tensor[(5, 6, 8), bool] */;
  (%144, %145)
}

def @func_2784() -> Tensor[(2, 7, 5), float64] {
  %146 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %146.0
}

def @func_9161() -> (Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool]) {
  %147 = @func_2526() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(110, 15), float64]) */;
  %148 = @func_3451() /* ty=(Tensor[(?, 2, 13), bool],) */;
  %149 = %147.0;
  %150 = %148.0;
  (%149, %150)
}

def @func_5611() -> Tensor[(2, 7, 5), float64] {
  %151 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %151.0
}

def @func_7079() -> Tensor[(2, 7, 5), uint64] {
  %152 = @func_6958() /* ty=(Tensor[(2, 7, 5), uint64],) */;
  %152.0
}

def @func_5878(%var_5872: Tensor[(176), float32]) -> (Tensor[(5, 6, 8), float64], Tensor[(8, 2, 11), float32], Tensor[(176), float32]) {
  %153 = @func_5141() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(143), int16], Tensor[(240), int64], Tensor[(5, 6, 8), float32]) */;
  %154 = %153.3;
  %155 = cast(%154, dtype="float32") /* ty=Tensor[(5, 6, 8), float32] */;
  %156 = sqrt(%155) /* ty=Tensor[(5, 6, 8), float32] */;
  %157 = cast(%154, dtype="float64") /* ty=Tensor[(5, 6, 8), float64] */;
  %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%156, dtype="float64") /* ty=Tensor[(5, 6, 8), float64] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %161 = cast(%var_5872, dtype="float32") /* ty=Tensor[(176), float32] */;
  %162 = reshape(%161, newshape=[8, 2, 11]) /* ty=Tensor[(8, 2, 11), float32] */;
  %163 = @func_5433(%162) /* ty=(Tensor[(8, 2, 11), float32], Tensor[(7, 16, 15), float64]) */;
  %164 = floor_mod(%159, %160) /* ty=Tensor[(5, 6, 8), float64] */;
  %165 = %163.0;
  (%164, %165, %var_5872)
}

def @func_8519() -> (Tensor[(2, 7, 5), float64],) {
  %166 = @func_2965() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %167 = %166.1;
  (%167,)
}

def @func_2866() -> (Tensor[(7, 16, 15), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(6, 14, 3), bool]) {
  %168 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 15), float64] */;
  %169 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(7, 16, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 15), float64] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %172 = cast(meta[relay.Constant][15] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %173 = reshape(%172, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %174 = @func_2615(%173) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) */;
  %175 = cast(meta[relay.Constant][15] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %176 = cast(meta[relay.Constant][15] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %177 = reshape(%175, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
  %178 = reshape(%176, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
  %179 = floor_divide(%170, %171) /* ty=Tensor[(7, 16, 15), float64] */;
  %180 = %174.1;
  %181 = @func_1115(%177, %178) /* ty=Tensor[(6, 14, 3), bool] */;
  (%179, %180, meta[relay.Constant][15] /* ty=Tensor[(252), int32] */, %181)
}

def @func_3976() -> (Tensor[(2, 7, 5), float32],) {
  %182 = @func_3886() /* ty=(Tensor[(2, 7, 5), float32],) */;
  %183 = %182.0;
  (%183,)
}

def @func_8637() -> (Tensor[(5, 6, 8), bool], Tensor[(2, 7, 5), float32]) {
  %184 = @func_5587() /* ty=(Tensor[(5, 6, 8), bool], Tensor[(5, 6, 8), float64]) */;
  %185 = %184.1;
  %186 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 6, 8), float64] */, dtype="bool") /* ty=Tensor[(5, 6, 8), bool] */;
  %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%185, dtype="bool") /* ty=Tensor[(5, 6, 8), bool] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %190 = greater_equal(%188, %189) /* ty=Tensor[(5, 6, 8), bool] */;
  %191 = @func_7124() /* ty=Tensor[(2, 7, 5), float32] */;
  (%190, %191)
}

def @func_3103(%var_3069: Tensor[(4, 72), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(4, 6, 12), int32], Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(4, 72), float32]) {
  %192 = cast(%var_3069, dtype="int32") /* ty=Tensor[(4, 72), int32] */;
  %193 = cast(%var_3069, dtype="int32") /* ty=Tensor[(4, 72), int32] */;
  %194 = reshape(%192, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %195 = reshape(%193, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %196 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
  %197 = @func_2806() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) */;
  %198 = @func_2866() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(6, 14, 3), bool]) */;
  %199 = cast(%var_3069, dtype="float32") /* ty=Tensor[(4, 72), float32] */;
  %200 = sigmoid(%199) /* ty=Tensor[(4, 72), float32] */;
  %201 = cast(%200, dtype="float64") /* ty=Tensor[(4, 72), float64] */;
  %202 = acosh(%201) /* ty=Tensor[(4, 72), float64] */;
  %203 = cast(%202, dtype="float32") /* ty=Tensor[(4, 72), float32] */;
  %204 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
  %205 = @func_663(%194, %195) /* ty=Tensor[(4, 6, 12), int32] */;
  %206 = %196.1;
  %207 = %197.2;
  %208 = %198.0;
  %209 = acos(%203) /* ty=Tensor[(4, 72), float32] */;
  (%204, %205, %206, %207, %208, %209)
}

def @func_8716() -> (Tensor[(2, 7, 5), float64],) {
  %210 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %211 = %210.1;
  (%211,)
}

def @func_9119(%var_9113: Tensor[(11, 182), float64]) -> (Tensor[(2, 7, 5), float32], Tensor[(13, 11, ?), float64], Tensor[(11, 182), float64]) {
  %212 = cast(%var_9113, dtype="float64") /* ty=Tensor[(11, 182), float64] */;
  %213 = reshape(%212, newshape=[1, 2002]) /* ty=Tensor[(1, 2002), float64] */;
  %214 = @func_6226(%213) /* ty=(Tensor[(13, 11, ?), float64], Tensor[(6, 42), bool], Tensor[(1, 2002), float64], Tensor[(252), int32]) */;
  %215 = @func_7124() /* ty=Tensor[(2, 7, 5), float32] */;
  %216 = %214.0;
  (%215, %216, %var_9113)
}

def @func_9773() -> (Tensor[(2, 7, 5), float64], Tensor[(110, 15), float64]) {
  %217 = @func_2526() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(110, 15), float64]) */;
  %218 = %217.2;
  %219 = cast(%218, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %220 = acos(%219) /* ty=Tensor[(110, 15), float64] */;
  %221 = cast(%220, dtype="float32") /* ty=Tensor[(110, 15), float32] */;
  %222 = sinh(%221) /* ty=Tensor[(110, 15), float32] */;
  %223 = cast(%222, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %224 = @func_9664() /* ty=Tensor[(2, 7, 5), float64] */;
  %225 = sigmoid(%223) /* ty=Tensor[(110, 15), float64] */;
  (%224, %225)
}

def @func_9064() -> (Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool]) {
  %226 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
  %227 = @func_3451() /* ty=(Tensor[(?, 2, 13), bool],) */;
  %228 = %226.1;
  %229 = %227.0;
  (%228, %229)
}

def @func_1659(%var_1655: Tensor[(1, 2, 13), float32]) -> (Tensor[(1, 2, 13), float32],) {
  %230 = cast(%var_1655, dtype="float32") /* ty=Tensor[(1, 2, 13), float32] */;
  %231 = log10(%230) /* ty=Tensor[(1, 2, 13), float32] */;
  (%231,)
}

def @func_3925() -> (Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(2, 7, 5), float64]) {
  %232 = @func_3267() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %233 = @func_3451() /* ty=(Tensor[(?, 2, 13), bool],) */;
  %234 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
  %235 = %232.3;
  %236 = %233.0;
  %237 = %234.1;
  (%235, %236, %237)
}

def @func_3678() -> Tensor[(13, 11, ?), float64] {
  %238 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
  %238.4
}

def @func_8562() -> Tensor[(2, 7, 5), float64] {
  %239 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %239.0
}

def @func_9909() -> (Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float64]) {
  %240 = @func_8915() /* ty=(Tensor[(5, 6, 8), float64],) */;
  %241 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
  %242 = %240.0;
  (%241, %242)
}

def @func_9284(%var_9274: Tensor[(3, 14, 14), float32]) -> (Tensor[(3, 14, 14), float32], Tensor[(26, 1), float32], Tensor[(128, 12), float32], Tensor[(1, 26), float32], Tensor[(2, 7, 5), float64]) {
  %243 = cast(%var_9274, dtype="float32") /* ty=Tensor[(3, 14, 14), float32] */;
  %244 = cast(meta[relay.Constant][17] /* ty=Tensor[(128, 12), float32] */, dtype="float32") /* ty=Tensor[(128, 12), float32] */;
  %245 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 26), float32] */, dtype="float32") /* ty=Tensor[(1, 26), float32] */;
  %246 = reshape(%244, newshape=[1, 1536]) /* ty=Tensor[(1, 1536), float32] */;
  %247 = reshape(%245, newshape=[26]) /* ty=Tensor[(26), float32] */;
  %248 = @func_3424(%246, %247) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(26, 1), float32], Tensor[(1, 1536), float32], Tensor[(26), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) */;
  %249 = tan(%243) /* ty=Tensor[(3, 14, 14), float32] */;
  %250 = %248.1;
  %251 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
  (%249, %250, meta[relay.Constant][17] /* ty=Tensor[(128, 12), float32] */, meta[relay.Constant][18] /* ty=Tensor[(1, 26), float32] */, %251)
}

def @func_4224() -> Tensor[(2, 7, 5), bool] {
  %252 = @func_3976() /* ty=(Tensor[(2, 7, 5), float32],) */;
  %253 = %252.0;
  %254 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
  %255 = cast(%254, dtype="bool") /* ty=Tensor[(2, 7, 5), bool] */;
  %256 = shape_of(%253, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%253, dtype="bool") /* ty=Tensor[(2, 7, 5), bool] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%257, %258) /* ty=Tensor[(2, 7, 5), bool] */
}

def @func_3267() -> (Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) {
  %259 = @func_2806() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) */;
  %260 = @func_3227() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %261 = %259.0;
  %262 = @func_2899() /* ty=Tensor[(2, 7, 5), float64] */;
  %263 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
  %264 = %260.0;
  (%261, %262, %263, %264)
}

def @func_5587() -> (Tensor[(5, 6, 8), bool], Tensor[(5, 6, 8), float64]) {
  %265 = @func_2806() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) */;
  %266 = %265.1;
  %267 = cast(%266, dtype="int64") /* ty=Tensor[(5, 6, 8), int64] */;
  %268 = reshape(%267, newshape=[5, 6, 8]) /* ty=Tensor[(5, 6, 8), int64] */;
  %269 = @func_343(%268) /* ty=(Tensor[(5, 6, 8), int64], Tensor[(5, 6, 8), bool]) */;
  %270 = %269.0;
  %271 = cast(%270, dtype="float64") /* ty=Tensor[(5, 6, 8), float64] */;
  %272 = cos(%271) /* ty=Tensor[(5, 6, 8), float64] */;
  (%266, %272)
}

def @func_4175(%var_4125: Tensor[(7, 14, 13), float64], %var_4168: Tensor[(1650), float64]) -> (Tensor[(7, 14, 13), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(1650), float64]) {
  %273 = cast(%var_4125, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
  %274 = @func_3876() /* ty=(Tensor[(?, 2, 13), float32],) */;
  %275 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %276 = @func_2965() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %277 = cast(%var_4168, dtype="float64") /* ty=Tensor[(1650), float64] */;
  %278 = reshape(%277, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), float64] */;
  %279 = log2(%273) /* ty=Tensor[(7, 14, 13), float64] */;
  %280 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
  %281 = %274.0;
  %282 = %275.0;
  %283 = %276.0;
  %284 = @func_2024(%278) /* ty=Tensor[(15, 10, 11), float64] */;
  (%279, %280, %281, %282, %283, %284, %var_4168)
}

def @func_5773() -> (Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float32]) {
  %285 = @func_5141() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(143), int16], Tensor[(240), int64], Tensor[(5, 6, 8), float32]) */;
  %286 = @func_5611() /* ty=Tensor[(2, 7, 5), float64] */;
  %287 = %285.3;
  (%286, %287)
}

def @func_5971() -> (Tensor[(2, 7, 5), float64],) {
  %288 = @func_3925() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(2, 7, 5), float64]) */;
  %289 = %288.0;
  (%289,)
}

def @func_5463() -> (Tensor[(6, 14, 3), bool],) {
  %290 = @func_2866() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(6, 14, 3), bool]) */;
  %291 = %290.1;
  (%291,)
}

def @func_8404(%var_8390: float32) -> (Tensor[(?, 2, 13), float64], Tensor[(252), int32], Tensor[(2048), bool], Tensor[(2, 7, 5), float64]) {
  %292 = @func_3876() /* ty=(Tensor[(?, 2, 13), float32],) */;
  %293 = %292.0;
  %294 = cast(%293, dtype="float64") /* ty=Tensor[(?, 2, 13), float64] */;
  %295 = cast(%var_8390, dtype="float32") /* ty=float32 */;
  %296 = cast(meta[relay.Constant][19] /* ty=Tensor[(2048), float32] */, dtype="float32") /* ty=Tensor[(2048), float32] */;
  %297 = reshape(%295, newshape=[]) /* ty=float32 */;
  %298 = reshape(%296, newshape=[8, 16, 16]) /* ty=Tensor[(8, 16, 16), float32] */;
  %299 = @func_5391(%297, %298) /* ty=(Tensor[(8, 16, 16), bool], Tensor[(110, 15), int32], Tensor[(110, 15), float64], Tensor[(252), int32]) */;
  %300 = cast(%var_8390, dtype="bool") /* ty=bool */;
  %301 = cast(meta[relay.Constant][19] /* ty=Tensor[(2048), float32] */, dtype="bool") /* ty=Tensor[(2048), bool] */;
  %302 = atan(%294) /* ty=Tensor[(?, 2, 13), float64] */;
  %303 = %299.3;
  %304 = less_equal(%300, %301) /* ty=Tensor[(2048), bool] */;
  %305 = @func_5651() /* ty=Tensor[(2, 7, 5), float64] */;
  (%302, %303, %304, %305)
}

def @func_3769(%var_3698: Tensor[(12, 5, 2), int32], %var_3699: Tensor[(12, 5, 2), int32], %var_3730: Tensor[(143), int16]) -> (Tensor[(12, 5, 2), int32], Tensor[(12, 5, 2), uint64], Tensor[(?, 2, 13), bool], Tensor[(13, 11, ?), bool], Tensor[(143), int16], Tensor[(6, 14, 3), bool], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float64], Tensor[(1536), float32]) {
  %306 = cast(%var_3699, dtype="int32") /* ty=Tensor[(12, 5, 2), int32] */;
  %307 = shape_of(%var_3698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%var_3698, dtype="int32") /* ty=Tensor[(12, 5, 2), int32] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %310 = cast(%var_3699, dtype="uint64") /* ty=Tensor[(12, 5, 2), uint64] */;
  %311 = shape_of(%var_3698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%var_3698, dtype="uint64") /* ty=Tensor[(12, 5, 2), uint64] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %314 = @func_3451() /* ty=(Tensor[(?, 2, 13), bool],) */;
  %315 = cast(%var_3730, dtype="int16") /* ty=Tensor[(143), int16] */;
  %316 = reshape(%315, newshape=[13, 11, 1]) /* ty=Tensor[(13, 11, 1), int16] */;
  %317 = @func_192(%316) /* ty=(Tensor[(13, 11, ?), bool], Tensor[(13, 11, ?), float64]) */;
  %318 = @func_2866() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(6, 14, 3), bool]) */;
  %319 = @func_3227() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %320 = %319.0;
  %321 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
  %322 = cast(%321, dtype="int64") /* ty=Tensor[(2, 7, 5), int64] */;
  %323 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%320, dtype="int64") /* ty=Tensor[(2, 7, 5), int64] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %326 = cast(meta[relay.Constant][20] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %327 = %314.0;
  %328 = cast(%327, dtype="float32") /* ty=Tensor[(?, 2, 13), float32] */;
  %329 = reshape(%326, newshape=[1, 1536]) /* ty=Tensor[(1, 1536), float32] */;
  %330 = reshape(%328, newshape=[26]) /* ty=Tensor[(26), float32] */;
  %331 = @func_3424(%329, %330) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(26, 1), float32], Tensor[(1, 1536), float32], Tensor[(26), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) */;
  %332 = right_shift(%308, %309) /* ty=Tensor[(12, 5, 2), int32] */;
  %333 = logical_xor(%312, %313) /* ty=Tensor[(12, 5, 2), uint64] */;
  %334 = %317.0;
  %335 = %318.3;
  %336 = logical_xor(%324, %325) /* ty=Tensor[(2, 7, 5), int64] */;
  %337 = %331.0;
  (%332, %333, %327, %334, %var_3730, %335, %336, %337, meta[relay.Constant][20] /* ty=Tensor[(1536), float32] */)
}

def @func_6578(%var_6576: Tensor[(252), int32]) -> (Tensor[(2, 7, 5), bool], Tensor[(2, 7, 5), float32], Tensor[(4, 6, 12), int32], Tensor[(288), int32], Tensor[(7, 16, 15), float64], Tensor[(288), int32], Tensor[(2, 7, 5), float64], Tensor[(252), int32]) {
  %338 = @func_5611() /* ty=Tensor[(2, 7, 5), float64] */;
  %339 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 7, 5), float64] */, dtype="bool") /* ty=Tensor[(2, 7, 5), bool] */;
  %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%338, dtype="bool") /* ty=Tensor[(2, 7, 5), bool] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %343 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 7, 5), float64] */, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %344 = cast(meta[relay.Constant][22] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %345 = cast(meta[relay.Constant][22] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %346 = reshape(%344, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %347 = reshape(%345, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %348 = @func_6364() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(26), float32], Tensor[(26), float32], Tensor[(4, 72), float32], Tensor[(288), int32]) */;
  %349 = cast(%var_6576, dtype="int32") /* ty=Tensor[(252), int32] */;
  %350 = reshape(%349, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %351 = @func_2615(%350) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) */;
  %352 = logical_or(%341, %342) /* ty=Tensor[(2, 7, 5), bool] */;
  %353 = rsqrt(%343) /* ty=Tensor[(2, 7, 5), float32] */;
  %354 = @func_663(%346, %347) /* ty=Tensor[(4, 6, 12), int32] */;
  %355 = @func_3172() /* ty=Tensor[(7, 16, 15), float64] */;
  %356 = %348.4;
  %357 = %351.0;
  (%352, %353, %354, meta[relay.Constant][22] /* ty=Tensor[(288), int32] */, %355, %356, %357, %var_6576)
}

def @func_6846(%var_6817: Tensor[(1536), float32]) -> (Tensor[(5, 6, 8), float32], Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(1536), float32], Tensor[(26), float32], Tensor[(2, 7, 5), float64]) {
  %358 = @func_5773() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float32]) */;
  %359 = cast(%var_6817, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %360 = cast(meta[relay.Constant][23] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %361 = reshape(%359, newshape=[1, 1536]) /* ty=Tensor[(1, 1536), float32] */;
  %362 = reshape(%360, newshape=[26]) /* ty=Tensor[(26), float32] */;
  %363 = @func_3424(%361, %362) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(26, 1), float32], Tensor[(1, 1536), float32], Tensor[(26), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) */;
  %364 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %365 = %358.1;
  %366 = @func_3164() /* ty=Tensor[(240), int64] */;
  %367 = %363.4;
  %368 = %364.0;
  (%365, %366, %367, %var_6817, meta[relay.Constant][23] /* ty=Tensor[(26), float32] */, %368)
}

def @func_7109() -> Tensor[(2, 7, 5), float64] {
  %369 = @func_3267() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %369.3
}

def @func_663(%var_645: Tensor[(4, 6, 12), int32], %var_646: Tensor[(4, 6, 12), int32]) -> Tensor[(4, 6, 12), int32] {
  %370 = cast(%var_646, dtype="int32") /* ty=Tensor[(4, 6, 12), int32] */;
  %371 = shape_of(%var_645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%var_645, dtype="int32") /* ty=Tensor[(4, 6, 12), int32] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%372, %373) /* ty=Tensor[(4, 6, 12), int32] */
}

def @func_6912(%var_6907: Tensor[(1536), float32], %var_6908: Tensor[(26), float32]) -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(1536), float32], Tensor[(26), float32]) {
  %374 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %375 = @func_5611() /* ty=Tensor[(2, 7, 5), float64] */;
  %376 = cast(%375, dtype="float64") /* ty=Tensor[(2, 7, 5), float64] */;
  %377 = cast(%var_6907, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %378 = cast(%var_6908, dtype="float32") /* ty=Tensor[(26), float32] */;
  %379 = reshape(%377, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), float32] */;
  %380 = reshape(%378, newshape=[26, 1]) /* ty=Tensor[(26, 1), float32] */;
  %381 = @func_2317(%379, %380) /* ty=(Tensor[(1, 2, 13), float32], Tensor[(26, 1), float32], Tensor[(16, 12, 8), bool]) */;
  %382 = %374.0;
  %383 = log(%376) /* ty=Tensor[(2, 7, 5), float64] */;
  %384 = %381.0;
  (%382, %383, %384, %var_6907, %var_6908)
}

def @func_2153() -> (Tensor[(2, 7, 5), float64],) {
  %385 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 7, 5), float64] */, dtype="float64") /* ty=Tensor[(2, 7, 5), float64] */;
  %386 = cos(%385) /* ty=Tensor[(2, 7, 5), float64] */;
  (%386,)
}

def @func_8915() -> (Tensor[(5, 6, 8), float64],) {
  %387 = @func_5587() /* ty=(Tensor[(5, 6, 8), bool], Tensor[(5, 6, 8), float64]) */;
  %388 = %387.1;
  (%388,)
}

def @func_7986(%var_7902: int8, %var_7931: Tensor[(252), int32], %var_7960: Tensor[(16, 128), float32]) -> (Tensor[(2, 7, 5), float32], Tensor[(6, 14, 3), bool], Tensor[(9, 14, 252), bool], Tensor[(2, 7, 5), float32], Tensor[(110, 15), int32], Tensor[(16, 128), float32]) {
  %389 = @func_3976() /* ty=(Tensor[(2, 7, 5), float32],) */;
  %390 = cast(%var_7931, dtype="int32") /* ty=Tensor[(252), int32] */;
  %391 = reshape(%390, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %392 = @func_4366(%391) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) */;
  %393 = cast(%var_7902, dtype="bool") /* ty=bool */;
  %394 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 14, 1), int8] */, dtype="bool") /* ty=Tensor[(9, 14, 1), bool] */;
  %395 = equal(%393, %394) /* ty=Tensor[(9, 14, 1), bool] */;
  %396 = cast(%395, dtype="bool") /* ty=Tensor[(9, 14, 1), bool] */;
  %397 = cast(%var_7931, dtype="bool") /* ty=Tensor[(252), bool] */;
  %398 = @func_3886() /* ty=(Tensor[(2, 7, 5), float32],) */;
  %399 = cast(%var_7902, dtype="float32") /* ty=float32 */;
  %400 = cast(%var_7960, dtype="float32") /* ty=Tensor[(16, 128), float32] */;
  %401 = reshape(%399, newshape=[]) /* ty=float32 */;
  %402 = reshape(%400, newshape=[8, 16, 16]) /* ty=Tensor[(8, 16, 16), float32] */;
  %403 = @func_5391(%401, %402) /* ty=(Tensor[(8, 16, 16), bool], Tensor[(110, 15), int32], Tensor[(110, 15), float64], Tensor[(252), int32]) */;
  %404 = %389.0;
  %405 = %392.1;
  %406 = greater(%396, %397) /* ty=Tensor[(9, 14, 252), bool] */;
  %407 = %398.0;
  %408 = %403.1;
  (%404, %405, %406, %407, %408, %var_7960)
}

def @func_9694(%var_9680: Tensor[(12, 12, 6), float64]) -> Tensor[(12, 12, 6), float64] {
  %409 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(12, 12, 6), float64] */;
  %410 = shape_of(%var_9680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%var_9680, dtype="float64") /* ty=Tensor[(12, 12, 6), float64] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%411, %412) /* ty=Tensor[(12, 12, 6), float64] */
}

def @func_4680(%var_4616: Tensor[(288), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(288), int32], Tensor[(4, 6, 12), float32], Tensor[(240), int64], Tensor[(13, 11, ?), float64], Tensor[(4, 6, 12), int32]) {
  %413 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %414 = cast(%var_4616, dtype="int32") /* ty=Tensor[(288), int32] */;
  %415 = cast(%var_4616, dtype="int32") /* ty=Tensor[(288), int32] */;
  %416 = reshape(%414, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %417 = reshape(%415, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %418 = @func_663(%416, %417) /* ty=Tensor[(4, 6, 12), int32] */;
  %419 = cast(%418, dtype="float32") /* ty=Tensor[(4, 6, 12), float32] */;
  %420 = @func_4391() /* ty=(Tensor[(240), int64], Tensor[(?, 2, 13), float32]) */;
  %421 = log2(%419) /* ty=Tensor[(4, 6, 12), float32] */;
  %422 = cast(%421, dtype="int32") /* ty=Tensor[(4, 6, 12), int32] */;
  %423 = cast(%418, dtype="int32") /* ty=Tensor[(4, 6, 12), int32] */;
  %424 = reshape(%422, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %425 = reshape(%423, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %426 = %413.0;
  %427 = %420.0;
  %428 = @func_3678() /* ty=Tensor[(13, 11, ?), float64] */;
  %429 = @func_663(%424, %425) /* ty=Tensor[(4, 6, 12), int32] */;
  (%426, %var_4616, %421, %427, %428, %429)
}

def @func_7124() -> Tensor[(2, 7, 5), float32] {
  %430 = @func_3886() /* ty=(Tensor[(2, 7, 5), float32],) */;
  %430.0
}

def @func_6024() -> (Tensor[(2, 7, 5), float32],) {
  %431 = @func_4923() /* ty=Tensor[(2, 7, 5), float32] */;
  (%431,)
}

def @func_192(%var_129: Tensor[(13, 11, 1), int16]) -> (Tensor[(13, 11, ?), bool], Tensor[(13, 11, ?), float64]) {
  %432 = cast(meta[relay.Constant][27] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %433 = cast(%var_129, dtype="int16") /* ty=Tensor[(13, 11, 1), int16] */;
  %434 = left_shift(%432, %433) /* ty=Tensor[(13, 11, 1), int16] */;
  %435 = cast(%434, dtype="int16") /* ty=Tensor[(13, 11, 1), int16] */;
  %436 = shape_of(%var_129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%var_129, dtype="int16") /* ty=Tensor[(13, 11, 1), int16] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %439 = bitwise_or(%437, %438) /* ty=Tensor[(13, 11, ?), int16] */;
  %440 = cast(%434, dtype="bool") /* ty=Tensor[(13, 11, 1), bool] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="bool") /* ty=Tensor[(13, 11, ?), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %444 = cast(%439, dtype="bool") /* ty=Tensor[(13, 11, ?), bool] */;
  %445 = shape_of(%var_129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%var_129, dtype="bool") /* ty=Tensor[(13, 11, 1), bool] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %448 = greater(%446, %447) /* ty=Tensor[(13, 11, ?), bool] */;
  %449 = cast(%448, dtype="float64") /* ty=Tensor[(13, 11, ?), float64] */;
  %450 = logical_and(%442, %443) /* ty=Tensor[(13, 11, ?), bool] */;
  %451 = asin(%449) /* ty=Tensor[(13, 11, ?), float64] */;
  (%450, %451)
}

def @func_9519() -> (Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64]) {
  %452 = @func_7124() /* ty=Tensor[(2, 7, 5), float32] */;
  %453 = @func_8283() /* ty=Tensor[(2, 7, 5), float64] */;
  (%452, %453)
}

def @func_3451() -> (Tensor[(?, 2, 13), bool],) {
  %454 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
  %455 = %454.2;
  (%455,)
}

def @func_9219() -> (Tensor[(?, 2, 13), bool], Tensor[(5, 6, 8), float64]) {
  %456 = @func_3451() /* ty=(Tensor[(?, 2, 13), bool],) */;
  %457 = @func_5587() /* ty=(Tensor[(5, 6, 8), bool], Tensor[(5, 6, 8), float64]) */;
  %458 = %456.0;
  %459 = %457.1;
  (%458, %459)
}

def @func_5433(%var_5397: Tensor[(8, 2, 11), float32]) -> (Tensor[(8, 2, 11), float32], Tensor[(7, 16, 15), float64]) {
  %460 = cast(%var_5397, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %461 = sinh(%460) /* ty=Tensor[(8, 2, 11), float32] */;
  %462 = @func_3172() /* ty=Tensor[(7, 16, 15), float64] */;
  (%461, %462)
}

def @func_6784(%var_6739: float32, %var_6740: Tensor[(32, 64), float32]) -> (Tensor[(7, 16, 15), float64], Tensor[(120), int32], Tensor[(143), int16], Tensor[(?, 2, 13), bool], Tensor[(252), int32], Tensor[(32, 64), bool], Tensor[(12, 5, 2), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) {
  %463 = @func_5289() /* ty=(Tensor[(7, 16, 15), float64],) */;
  %464 = @func_3451() /* ty=(Tensor[(?, 2, 13), bool],) */;
  %465 = cast(%var_6739, dtype="float32") /* ty=float32 */;
  %466 = cast(%var_6740, dtype="float32") /* ty=Tensor[(32, 64), float32] */;
  %467 = reshape(%465, newshape=[]) /* ty=float32 */;
  %468 = reshape(%466, newshape=[8, 16, 16]) /* ty=Tensor[(8, 16, 16), float32] */;
  %469 = @func_5391(%467, %468) /* ty=(Tensor[(8, 16, 16), bool], Tensor[(110, 15), int32], Tensor[(110, 15), float64], Tensor[(252), int32]) */;
  %470 = cast(%var_6739, dtype="bool") /* ty=bool */;
  %471 = cast(%var_6740, dtype="bool") /* ty=Tensor[(32, 64), bool] */;
  %472 = cast(meta[relay.Constant][28] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
  %473 = cast(meta[relay.Constant][28] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
  %474 = cast(meta[relay.Constant][29] /* ty=Tensor[(143), int16] */, dtype="int16") /* ty=Tensor[(143), int16] */;
  %475 = reshape(%472, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), int32] */;
  %476 = reshape(%473, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), int32] */;
  %477 = reshape(%474, newshape=[143]) /* ty=Tensor[(143), int16] */;
  %478 = @func_3769(%475, %476, %477) /* ty=(Tensor[(12, 5, 2), int32], Tensor[(12, 5, 2), uint64], Tensor[(?, 2, 13), bool], Tensor[(13, 11, ?), bool], Tensor[(143), int16], Tensor[(6, 14, 3), bool], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float64], Tensor[(1536), float32]) */;
  %479 = %478.0;
  %480 = cast(%479, dtype="float32") /* ty=Tensor[(12, 5, 2), float32] */;
  %481 = %463.0;
  %482 = %464.0;
  %483 = %469.3;
  %484 = less_equal(%470, %471) /* ty=Tensor[(32, 64), bool] */;
  %485 = sqrt(%480) /* ty=Tensor[(12, 5, 2), float32] */;
  %486 = @func_3172() /* ty=Tensor[(7, 16, 15), float64] */;
  %487 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
  (%481, meta[relay.Constant][28] /* ty=Tensor[(120), int32] */, meta[relay.Constant][29] /* ty=Tensor[(143), int16] */, %482, %483, %484, %485, %486, %487)
}

def @func_3876() -> (Tensor[(?, 2, 13), float32],) {
  %488 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
  %489 = %488.2;
  %490 = cast(%489, dtype="float32") /* ty=Tensor[(?, 2, 13), float32] */;
  %491 = rsqrt(%490) /* ty=Tensor[(?, 2, 13), float32] */;
  (%491,)
}

def @func_4366(%var_4340: Tensor[(252), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) {
  %492 = @func_2965() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %493 = cast(%var_4340, dtype="int32") /* ty=Tensor[(252), int32] */;
  %494 = cast(%var_4340, dtype="int32") /* ty=Tensor[(252), int32] */;
  %495 = reshape(%493, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
  %496 = reshape(%494, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
  %497 = %492.0;
  %498 = @func_1115(%495, %496) /* ty=Tensor[(6, 14, 3), bool] */;
  (%497, %498, %var_4340)
}

def @func_3172() -> Tensor[(7, 16, 15), float64] {
  %499 = @func_2866() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(6, 14, 3), bool]) */;
  %499.0
}

def @func_9010(%var_8978: Tensor[(16, 7, 9), bool]) -> (Tensor[(16, 7, 9), int16], Tensor[(4, 72), float32], Tensor[(288), int32], Tensor[(16, 7, 9), float32]) {
  %500 = cast(%var_8978, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
  %501 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(16, 7, 9), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 7, 9), bool] */, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %504 = logical_or(%502, %503) /* ty=Tensor[(16, 7, 9), bool] */;
  %505 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 7, 9), bool] */, dtype="int16") /* ty=Tensor[(16, 7, 9), int16] */;
  %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%504, dtype="int16") /* ty=Tensor[(16, 7, 9), int16] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %509 = cast(meta[relay.Constant][31] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %510 = reshape(%509, newshape=[4, 72]) /* ty=Tensor[(4, 72), int32] */;
  %511 = @func_3103(%510) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(4, 6, 12), int32], Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(4, 72), float32]) */;
  %512 = cast(%var_8978, dtype="float32") /* ty=Tensor[(16, 7, 9), float32] */;
  %513 = bitwise_or(%507, %508) /* ty=Tensor[(16, 7, 9), int16] */;
  %514 = %511.5;
  %515 = asinh(%512) /* ty=Tensor[(16, 7, 9), float32] */;
  (%513, %514, meta[relay.Constant][31] /* ty=Tensor[(288), int32] */, %515)
}

def @func_8283() -> Tensor[(2, 7, 5), float64] {
  @func_2899() /* ty=Tensor[(2, 7, 5), float64] */
}

def @func_7477(%var_7457: Tensor[(26), float32]) -> (Tensor[(7, 16, 15), float32], Tensor[(26), bool], Tensor[(2, 7, 5), float64]) {
  %516 = @func_5289() /* ty=(Tensor[(7, 16, 15), float64],) */;
  %517 = %516.0;
  %518 = cast(%517, dtype="float32") /* ty=Tensor[(7, 16, 15), float32] */;
  %519 = @func_6364() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(26), float32], Tensor[(26), float32], Tensor[(4, 72), float32], Tensor[(288), int32]) */;
  %520 = %519.1;
  %521 = cast(%var_7457, dtype="bool") /* ty=Tensor[(26), bool] */;
  %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(1), int32] */;
  %523 = cast(%520, dtype="bool") /* ty=Tensor[(26), bool] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?), bool] */;
  %525 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %526 = cos(%518) /* ty=Tensor[(7, 16, 15), float32] */;
  %527 = less(%523, %524) /* ty=Tensor[(26), bool] */;
  %528 = %525.0;
  (%526, %527, %528)
}

def @func_4311(%var_4246: Tensor[(7, 1, 2), bool], %var_4247: Tensor[(7, 3, 2), bool], %var_4294: Tensor[(64, 24), float32], %var_4295: Tensor[(26), float32]) -> (Tensor[(7, 3, 2), bool], Tensor[(7, 3, 2), float64], Tensor[(2, 7, 5), float64], Tensor[(7, 1, 2), float32], Tensor[(16, 12, 8), bool], Tensor[(64, 24), float32], Tensor[(26), float32]) {
  %529 = cast(%var_4246, dtype="bool") /* ty=Tensor[(7, 1, 2), bool] */;
  %530 = cast(%var_4247, dtype="bool") /* ty=Tensor[(7, 3, 2), bool] */;
  %531 = cast(%var_4246, dtype="float64") /* ty=Tensor[(7, 1, 2), float64] */;
  %532 = cast(%var_4247, dtype="float64") /* ty=Tensor[(7, 3, 2), float64] */;
  %533 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %534 = cast(%var_4246, dtype="float32") /* ty=Tensor[(7, 1, 2), float32] */;
  %535 = cast(%var_4294, dtype="float32") /* ty=Tensor[(64, 24), float32] */;
  %536 = cast(%var_4295, dtype="float32") /* ty=Tensor[(26), float32] */;
  %537 = reshape(%535, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), float32] */;
  %538 = reshape(%536, newshape=[26, 1]) /* ty=Tensor[(26, 1), float32] */;
  %539 = @func_2317(%537, %538) /* ty=(Tensor[(1, 2, 13), float32], Tensor[(26, 1), float32], Tensor[(16, 12, 8), bool]) */;
  %540 = logical_and(%529, %530) /* ty=Tensor[(7, 3, 2), bool] */;
  %541 = divide(%531, %532) /* ty=Tensor[(7, 3, 2), float64] */;
  %542 = %533.1;
  %543 = log2(%534) /* ty=Tensor[(7, 1, 2), float32] */;
  %544 = %539.2;
  (%540, %541, %542, %543, %544, %var_4294, %var_4295)
}

def @func_9556(%var_9545: Tensor[(6, 3, 11), int16]) -> Tensor[(6, 3, 11), int16] {
  %545 = cast(%var_9545, dtype="int16") /* ty=Tensor[(6, 3, 11), int16] */;
  %546 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(6, 3, 11), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 3, 11), int16] */, dtype="int16") /* ty=Tensor[(6, 3, 11), int16] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_and(%547, %548) /* ty=Tensor[(6, 3, 11), int16] */
}

def @func_2024(%var_2018: Tensor[(15, 10, 11), float64]) -> Tensor[(15, 10, 11), float64] {
  %549 = cast(%var_2018, dtype="float64") /* ty=Tensor[(15, 10, 11), float64] */;
  asinh(%549) /* ty=Tensor[(15, 10, 11), float64] */
}

def @func_2170() -> Tensor[(2, 7, 5), float64] {
  %550 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %550.0
}

def @func_8191(%var_8175: Tensor[(2002), float64], %var_8181: Tensor[(120), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(13, 11, ?), float64], Tensor[(2002), float64], Tensor[(13, 11, ?), float64], Tensor[(120), int32]) {
  %551 = cast(%var_8175, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %552 = reshape(%551, newshape=[1, 2002]) /* ty=Tensor[(1, 2002), float64] */;
  %553 = @func_6226(%552) /* ty=(Tensor[(13, 11, ?), float64], Tensor[(6, 42), bool], Tensor[(1, 2002), float64], Tensor[(252), int32]) */;
  %554 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
  %555 = cast(%554, dtype="bool") /* ty=Tensor[(2, 7, 5), bool] */;
  %556 = cast(%var_8181, dtype="int32") /* ty=Tensor[(120), int32] */;
  %557 = reshape(%555, newshape=[2, 7, 5]) /* ty=Tensor[(2, 7, 5), bool] */;
  %558 = reshape(%556, newshape=[120]) /* ty=Tensor[(120), int32] */;
  %559 = @func_4590(%557, %558) /* ty=(Tensor[(12, 5, 2), uint64], Tensor[(120), int32], Tensor[(143, 1), int16], Tensor[(2, 7, 5), uint32], Tensor[(?, 2, 13), float32], Tensor[(13, 11, ?), float64], Tensor[(2, 7, 5), float32], Tensor[(240), int64]) */;
  %560 = %553.0;
  %561 = %559.5;
  (%554, %560, %var_8175, %561, %var_8181)
}

def @func_2965() -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) {
  %562 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %563 = @func_2899() /* ty=Tensor[(2, 7, 5), float64] */;
  %564 = %562.0;
  (%563, %564)
}

def @func_9409() -> (Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float32]) {
  %565 = @func_2965() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %566 = @func_5141() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(143), int16], Tensor[(240), int64], Tensor[(5, 6, 8), float32]) */;
  %567 = %565.1;
  %568 = %566.3;
  (%567, %568)
}

def @func_3578() -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(10, 9, 5), int64]) {
  %569 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
  %570 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
  %571 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
  %572 = %569.3;
  (%570, %571, %572)
}

def @func_3424(%var_3397: Tensor[(1, 1536), float32], %var_3398: Tensor[(26), float32]) -> (Tensor[(2, 7, 5), float64], Tensor[(26, 1), float32], Tensor[(1, 1536), float32], Tensor[(26), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) {
  %573 = cast(%var_3397, dtype="float32") /* ty=Tensor[(1, 1536), float32] */;
  %574 = cast(%var_3398, dtype="float32") /* ty=Tensor[(26), float32] */;
  %575 = reshape(%573, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), float32] */;
  %576 = reshape(%574, newshape=[26, 1]) /* ty=Tensor[(26, 1), float32] */;
  %577 = @func_2317(%575, %576) /* ty=(Tensor[(1, 2, 13), float32], Tensor[(26, 1), float32], Tensor[(16, 12, 8), bool]) */;
  %578 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
  %579 = %577.1;
  %580 = @func_3172() /* ty=Tensor[(7, 16, 15), float64] */;
  %581 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
  (%578, %579, %var_3397, %var_3398, %580, %581)
}

def @func_6704(%var_6668: Tensor[(144, 2), int32]) -> (Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(144, 2), int32]) {
  %582 = cast(%var_6668, dtype="int32") /* ty=Tensor[(144, 2), int32] */;
  %583 = reshape(%582, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %584 = @func_6412(%583) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(4, 72), float32], Tensor[(288), int32], Tensor[(2, 7, 5), float32], Tensor[(7, 16, 15), float64]) */;
  %585 = @func_3164() /* ty=Tensor[(240), int64] */;
  %586 = %584.5;
  (%585, %586, %var_6668)
}

def @func_2826() -> Tensor[(240), int64] {
  %587 = @func_2806() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) */;
  %587.2
}

def @func_8101() -> (Tensor[(2, 7, 5), uint64], Tensor[(?, 2, 13), bool], Tensor[(7, 16, 15), float64], Tensor[(1536), float32], Tensor[(120), int32], Tensor[(13, 11), int16]) {
  %588 = @func_6958() /* ty=(Tensor[(2, 7, 5), uint64],) */;
  %589 = @func_3451() /* ty=(Tensor[(?, 2, 13), bool],) */;
  %590 = cast(meta[relay.Constant][33] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
  %591 = cast(meta[relay.Constant][33] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
  %592 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 11), int16] */, dtype="int16") /* ty=Tensor[(13, 11), int16] */;
  %593 = reshape(%590, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), int32] */;
  %594 = reshape(%591, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), int32] */;
  %595 = reshape(%592, newshape=[143]) /* ty=Tensor[(143), int16] */;
  %596 = @func_3769(%593, %594, %595) /* ty=(Tensor[(12, 5, 2), int32], Tensor[(12, 5, 2), uint64], Tensor[(?, 2, 13), bool], Tensor[(13, 11, ?), bool], Tensor[(143), int16], Tensor[(6, 14, 3), bool], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float64], Tensor[(1536), float32]) */;
  %597 = %588.0;
  %598 = %589.0;
  %599 = @func_3172() /* ty=Tensor[(7, 16, 15), float64] */;
  %600 = %596.8;
  (%597, %598, %599, %600, meta[relay.Constant][33] /* ty=Tensor[(120), int32] */, meta[relay.Constant][34] /* ty=Tensor[(13, 11), int16] */)
}

def @func_7604() -> (Tensor[(7, 16, 15), float64], Tensor[(15, 10, 11), float64], Tensor[(1650), float64], Tensor[(240), int64]) {
  %601 = @func_5289() /* ty=(Tensor[(7, 16, 15), float64],) */;
  %602 = cast(meta[relay.Constant][35] /* ty=Tensor[(1650), float64] */, dtype="float64") /* ty=Tensor[(1650), float64] */;
  %603 = reshape(%602, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), float64] */;
  %604 = @func_2806() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) */;
  %605 = %601.0;
  %606 = @func_2024(%603) /* ty=Tensor[(15, 10, 11), float64] */;
  %607 = %604.2;
  (%605, %606, meta[relay.Constant][35] /* ty=Tensor[(1650), float64] */, %607)
}

def @func_9241() -> (Tensor[(2, 7, 5), float64], Tensor[(14, 2, 15), float32], Tensor[(5, 84), uint8]) {
  %608 = @func_8519() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %609 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 84), uint8] */, dtype="uint8") /* ty=Tensor[(5, 84), uint8] */;
  %610 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 84), uint8] */, dtype="uint8") /* ty=Tensor[(5, 84), uint8] */;
  %611 = reshape(%609, newshape=[14, 2, 15]) /* ty=Tensor[(14, 2, 15), uint8] */;
  %612 = reshape(%610, newshape=[14, 2, 15]) /* ty=Tensor[(14, 2, 15), uint8] */;
  %613 = @func_8815(%611, %612) /* ty=(Tensor[(14, 2, 15), float64], Tensor[(14, 2, 15), float32]) */;
  %614 = %608.0;
  %615 = %613.1;
  (%614, %615, meta[relay.Constant][36] /* ty=Tensor[(5, 84), uint8] */)
}

def @func_9265() -> (Tensor[(5, 6, 8), bool],) {
  %616 = @func_8637() /* ty=(Tensor[(5, 6, 8), bool], Tensor[(2, 7, 5), float32]) */;
  %617 = %616.0;
  (%617,)
}

def @func_8815(%var_8780: Tensor[(14, 2, 15), uint8], %var_8781: Tensor[(14, 2, 15), uint8]) -> (Tensor[(14, 2, 15), float64], Tensor[(14, 2, 15), float32]) {
  %618 = cast(%var_8780, dtype="float64") /* ty=Tensor[(14, 2, 15), float64] */;
  %619 = cast(%var_8781, dtype="uint8") /* ty=Tensor[(14, 2, 15), uint8] */;
  %620 = shape_of(%var_8780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%var_8780, dtype="uint8") /* ty=Tensor[(14, 2, 15), uint8] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %623 = multiply(%621, %622) /* ty=Tensor[(14, 2, 15), uint8] */;
  %624 = cast(%623, dtype="float32") /* ty=Tensor[(14, 2, 15), float32] */;
  %625 = erf(%618) /* ty=Tensor[(14, 2, 15), float64] */;
  %626 = asin(%624) /* ty=Tensor[(14, 2, 15), float32] */;
  (%625, %626)
}

def @func_5289() -> (Tensor[(7, 16, 15), float64],) {
  %627 = @func_5141() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(143), int16], Tensor[(240), int64], Tensor[(5, 6, 8), float32]) */;
  %628 = %627.0;
  %629 = cast(%628, dtype="float64") /* ty=Tensor[(7, 16, 15), float64] */;
  %630 = acosh(%629) /* ty=Tensor[(7, 16, 15), float64] */;
  (%630,)
}

def @func_7671() -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) {
  %631 = @func_3227() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %632 = @func_2784() /* ty=Tensor[(2, 7, 5), float64] */;
  %633 = %631.0;
  (%632, %633)
}

def @func_3227() -> (Tensor[(2, 7, 5), float64],) {
  %634 = @func_2899() /* ty=Tensor[(2, 7, 5), float64] */;
  (%634,)
}

def @func_3164() -> Tensor[(240), int64] {
  @func_2826() /* ty=Tensor[(240), int64] */
}

def @func_4760(%var_4750: Tensor[(26), float32]) -> (Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(26), float32], Tensor[(13, 11, ?), float64]) {
  %635 = cast(%var_4750, dtype="float32") /* ty=Tensor[(26), float32] */;
  %636 = reshape(%635, newshape=[1, 2, 13]) /* ty=Tensor[(1, 2, 13), float32] */;
  %637 = @func_1659(%636) /* ty=(Tensor[(1, 2, 13), float32],) */;
  %638 = @func_4420() /* ty=Tensor[(2, 7, 5), float32] */;
  %639 = @func_2784() /* ty=Tensor[(2, 7, 5), float64] */;
  %640 = %637.0;
  %641 = @func_3678() /* ty=Tensor[(13, 11, ?), float64] */;
  (%638, %639, %640, %var_4750, %641)
}

def @func_4391() -> (Tensor[(240), int64], Tensor[(?, 2, 13), float32]) {
  %642 = @func_4081() /* ty=(Tensor[(110, 15), float64], Tensor[(?, 2, 13), float32]) */;
  %643 = @func_2826() /* ty=Tensor[(240), int64] */;
  %644 = %642.1;
  (%643, %644)
}

def @func_5066(%var_5010: Tensor[(110, 15), float64], %var_5027: Tensor[(252), int32], %var_5036: Tensor[(110, 15), float64]) -> (Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(5, 6, 8), bool], Tensor[(252), int32], Tensor[(252), int32], Tensor[(110, 15), int16], Tensor[(110, 15), int16], Tensor[(110, 15), int32]) {
  %645 = @func_3164() /* ty=Tensor[(240), int64] */;
  %646 = cast(%645, dtype="int64") /* ty=Tensor[(240), int64] */;
  %647 = reshape(%646, newshape=[5, 6, 8]) /* ty=Tensor[(5, 6, 8), int64] */;
  %648 = @func_343(%647) /* ty=(Tensor[(5, 6, 8), int64], Tensor[(5, 6, 8), bool]) */;
  %649 = cast(%var_5027, dtype="int32") /* ty=Tensor[(252), int32] */;
  %650 = reshape(%649, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %651 = @func_4866(%650) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(252), int32], Tensor[(252), int32], Tensor[(2, 7, 5), float64], Tensor[(7, 182), float64], Tensor[(550, 3), float64]) */;
  %652 = @func_4081() /* ty=(Tensor[(110, 15), float64], Tensor[(?, 2, 13), float32]) */;
  %653 = %652.0;
  %654 = cast(%653, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %655 = atan(%654) /* ty=Tensor[(110, 15), float64] */;
  %656 = cast(%653, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %657 = shape_of(%655, dtype="int32") /* ty=Tensor[(2), int32] */;
  %658 = cast(%655, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %660 = floor_mod(%658, %659) /* ty=Tensor[(110, 15), float64] */;
  %661 = cast(%var_5010, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(2), int32] */;
  %663 = cast(%660, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %665 = minimum(%663, %664) /* ty=Tensor[(110, 15), float64] */;
  %666 = cast(%var_5036, dtype="int16") /* ty=Tensor[(110, 15), int16] */;
  %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(2), int32] */;
  %668 = cast(%665, dtype="int16") /* ty=Tensor[(110, 15), int16] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %670 = cast(%660, dtype="int32") /* ty=Tensor[(110, 15), int32] */;
  %671 = shape_of(%665, dtype="int32") /* ty=Tensor[(2), int32] */;
  %672 = cast(%665, dtype="int32") /* ty=Tensor[(110, 15), int32] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %674 = bitwise_and(%672, %673) /* ty=Tensor[(110, 15), int32] */;
  %675 = cast(%var_5010, dtype="int16") /* ty=Tensor[(110, 15), int16] */;
  %676 = shape_of(%674, dtype="int32") /* ty=Tensor[(2), int32] */;
  %677 = cast(%674, dtype="int16") /* ty=Tensor[(110, 15), int16] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %679 = cast(%665, dtype="int32") /* ty=Tensor[(110, 15), int32] */;
  %680 = shape_of(%660, dtype="int32") /* ty=Tensor[(2), int32] */;
  %681 = cast(%660, dtype="int32") /* ty=Tensor[(110, 15), int32] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %683 = @func_2899() /* ty=Tensor[(2, 7, 5), float64] */;
  %684 = %648.1;
  %685 = %651.3;
  %686 = bitwise_xor(%668, %669) /* ty=Tensor[(110, 15), int16] */;
  %687 = multiply(%677, %678) /* ty=Tensor[(110, 15), int16] */;
  %688 = logical_xor(%681, %682) /* ty=Tensor[(110, 15), int32] */;
  (%683, %645, %684, %685, %var_5027, %686, %687, %688)
}

def @func_5391(%var_5361: float32, %var_5362: Tensor[(8, 16, 16), float32]) -> (Tensor[(8, 16, 16), bool], Tensor[(110, 15), int32], Tensor[(110, 15), float64], Tensor[(252), int32]) {
  %689 = cast(%var_5361, dtype="bool") /* ty=bool */;
  %690 = cast(%var_5362, dtype="bool") /* ty=Tensor[(8, 16, 16), bool] */;
  %691 = cast(meta[relay.Constant][37] /* ty=Tensor[(110, 15), float64] */, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %692 = cast(meta[relay.Constant][38] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %693 = cast(meta[relay.Constant][37] /* ty=Tensor[(110, 15), float64] */, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %694 = reshape(%691, newshape=[110, 15]) /* ty=Tensor[(110, 15), float64] */;
  %695 = reshape(%692, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %696 = reshape(%693, newshape=[110, 15]) /* ty=Tensor[(110, 15), float64] */;
  %697 = @func_5066(%694, %695, %696) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(5, 6, 8), bool], Tensor[(252), int32], Tensor[(252), int32], Tensor[(110, 15), int16], Tensor[(110, 15), int16], Tensor[(110, 15), int32]) */;
  %698 = greater_equal(%689, %690) /* ty=Tensor[(8, 16, 16), bool] */;
  %699 = %697.7;
  (%698, %699, meta[relay.Constant][37] /* ty=Tensor[(110, 15), float64] */, meta[relay.Constant][38] /* ty=Tensor[(252), int32] */)
}

def @func_2317(%var_2301: Tensor[(16, 12, 8), float32], %var_2305: Tensor[(26, 1), float32]) -> (Tensor[(1, 2, 13), float32], Tensor[(26, 1), float32], Tensor[(16, 12, 8), bool]) {
  %700 = cast(%var_2305, dtype="float32") /* ty=Tensor[(26, 1), float32] */;
  %701 = reshape(%700, newshape=[1, 2, 13]) /* ty=Tensor[(1, 2, 13), float32] */;
  %702 = @func_1659(%701) /* ty=(Tensor[(1, 2, 13), float32],) */;
  %703 = cast(%var_2301, dtype="float32") /* ty=Tensor[(16, 12, 8), float32] */;
  %704 = sin(%703) /* ty=Tensor[(16, 12, 8), float32] */;
  %705 = cast(%var_2301, dtype="bool") /* ty=Tensor[(16, 12, 8), bool] */;
  %706 = shape_of(%704, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%704, dtype="bool") /* ty=Tensor[(16, 12, 8), bool] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %709 = %702.0;
  %710 = greater_equal(%707, %708) /* ty=Tensor[(16, 12, 8), bool] */;
  (%709, %var_2305, %710)
}

def @func_7037(%var_6988: Tensor[(252), int32]) -> (Tensor[(240), int64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(143), float64]) {
  %711 = cast(%var_6988, dtype="int32") /* ty=Tensor[(252), int32] */;
  %712 = cast(%var_6988, dtype="int32") /* ty=Tensor[(252), int32] */;
  %713 = reshape(%711, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
  %714 = reshape(%712, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
  %715 = @func_5141() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(143), int16], Tensor[(240), int64], Tensor[(5, 6, 8), float32]) */;
  %716 = %715.1;
  %717 = cast(%716, dtype="float64") /* ty=Tensor[(143), float64] */;
  %718 = @func_2826() /* ty=Tensor[(240), int64] */;
  %719 = @func_1115(%713, %714) /* ty=Tensor[(6, 14, 3), bool] */;
  %720 = sqrt(%717) /* ty=Tensor[(143), float64] */;
  (%718, %719, %var_6988, %720)
}

def @func_6958() -> (Tensor[(2, 7, 5), uint64],) {
  %721 = @func_3578() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(10, 9, 5), int64]) */;
  %722 = %721.0;
  %723 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 7, 5), float64] */, dtype="uint64") /* ty=Tensor[(2, 7, 5), uint64] */;
  %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%722, dtype="uint64") /* ty=Tensor[(2, 7, 5), uint64] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %727 = subtract(%725, %726) /* ty=Tensor[(2, 7, 5), uint64] */;
  (%727,)
}

def @func_7851(%var_7800: Tensor[(70), bool], %var_7801: Tensor[(60, 2), int32]) -> (Tensor[(13, 11, ?), float64], Tensor[(2, 7, 5), uint32], Tensor[(70), bool], Tensor[(60, 2), int32], Tensor[(2, 7, 5), float64], Tensor[(24, 12), int32], Tensor[(240), int64]) {
  %728 = cast(%var_7800, dtype="bool") /* ty=Tensor[(70), bool] */;
  %729 = cast(%var_7801, dtype="int32") /* ty=Tensor[(60, 2), int32] */;
  %730 = reshape(%728, newshape=[2, 7, 5]) /* ty=Tensor[(2, 7, 5), bool] */;
  %731 = reshape(%729, newshape=[120]) /* ty=Tensor[(120), int32] */;
  %732 = @func_4590(%730, %731) /* ty=(Tensor[(12, 5, 2), uint64], Tensor[(120), int32], Tensor[(143, 1), int16], Tensor[(2, 7, 5), uint32], Tensor[(?, 2, 13), float32], Tensor[(13, 11, ?), float64], Tensor[(2, 7, 5), float32], Tensor[(240), int64]) */;
  %733 = cast(meta[relay.Constant][40] /* ty=Tensor[(24, 12), int32] */, dtype="int32") /* ty=Tensor[(24, 12), int32] */;
  %734 = reshape(%733, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %735 = @func_6412(%734) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(4, 72), float32], Tensor[(288), int32], Tensor[(2, 7, 5), float32], Tensor[(7, 16, 15), float64]) */;
  %736 = cast(meta[relay.Constant][40] /* ty=Tensor[(24, 12), int32] */, dtype="int32") /* ty=Tensor[(24, 12), int32] */;
  %737 = reshape(%736, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %738 = @func_4680(%737) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(288), int32], Tensor[(4, 6, 12), float32], Tensor[(240), int64], Tensor[(13, 11, ?), float64], Tensor[(4, 6, 12), int32]) */;
  %739 = @func_3678() /* ty=Tensor[(13, 11, ?), float64] */;
  %740 = %732.3;
  %741 = %735.1;
  %742 = %738.3;
  (%739, %740, %var_7800, %var_7801, %741, meta[relay.Constant][40] /* ty=Tensor[(24, 12), int32] */, %742)
}

def @func_6226(%var_6218: Tensor[(1, 2002), float64]) -> (Tensor[(13, 11, ?), float64], Tensor[(6, 42), bool], Tensor[(1, 2002), float64], Tensor[(252), int32]) {
  %743 = cast(%var_6218, dtype="float64") /* ty=Tensor[(1, 2002), float64] */;
  %744 = cast(meta[relay.Constant][41] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %745 = reshape(%743, newshape=[13, 11, 14]) /* ty=Tensor[(13, 11, 14), float64] */;
  %746 = reshape(%744, newshape=[6, 42]) /* ty=Tensor[(6, 42), int32] */;
  %747 = @func_5745(%745, %746) /* ty=(Tensor[(13, 11, 14), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float32], Tensor[(6, 42), bool]) */;
  %748 = @func_3678() /* ty=Tensor[(13, 11, ?), float64] */;
  %749 = %747.5;
  (%748, %749, %var_6218, meta[relay.Constant][41] /* ty=Tensor[(252), int32] */)
}

def @func_9664() -> Tensor[(2, 7, 5), float64] {
  %750 = @func_7218() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %750.0
}

def @func_8067(%var_8053: Tensor[(252), int32]) -> (Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float32], Tensor[(110, 15), int32], int8, Tensor[(252), int32], Tensor[(2048), float32], Tensor[(13, 11, ?), float64]) {
  %751 = @func_2526() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(110, 15), float64]) */;
  %752 = %751.0;
  %753 = cast(%752, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %754 = cast(meta[relay.Constant][42] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %755 = cast(%var_8053, dtype="int32") /* ty=Tensor[(252), int32] */;
  %756 = cast(meta[relay.Constant][43] /* ty=Tensor[(2048), float32] */, dtype="float32") /* ty=Tensor[(2048), float32] */;
  %757 = reshape(%754, newshape=[]) /* ty=int8 */;
  %758 = reshape(%755, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %759 = reshape(%756, newshape=[16, 128]) /* ty=Tensor[(16, 128), float32] */;
  %760 = @func_7986(%757, %758, %759) /* ty=(Tensor[(2, 7, 5), float32], Tensor[(6, 14, 3), bool], Tensor[(9, 14, 252), bool], Tensor[(2, 7, 5), float32], Tensor[(110, 15), int32], Tensor[(16, 128), float32]) */;
  %761 = @func_7124() /* ty=Tensor[(2, 7, 5), float32] */;
  %762 = acos(%753) /* ty=Tensor[(2, 7, 5), float32] */;
  %763 = %760.4;
  %764 = @func_3678() /* ty=Tensor[(13, 11, ?), float64] */;
  (%761, %762, %763, meta[relay.Constant][42] /* ty=int8 */, %var_8053, meta[relay.Constant][43] /* ty=Tensor[(2048), float32] */, %764)
}

def @func_8111() -> (Tensor[(15, 10, 11), float64],) {
  %765 = @func_7604() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(15, 10, 11), float64], Tensor[(1650), float64], Tensor[(240), int64]) */;
  %766 = %765.1;
  (%766,)
}

def @func_5141() -> (Tensor[(7, 16, 15), float64], Tensor[(143), int16], Tensor[(240), int64], Tensor[(5, 6, 8), float32]) {
  %767 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
  %768 = @func_4391() /* ty=(Tensor[(240), int64], Tensor[(?, 2, 13), float32]) */;
  %769 = %768.0;
  %770 = cast(%769, dtype="int64") /* ty=Tensor[(240), int64] */;
  %771 = reshape(%770, newshape=[5, 6, 8]) /* ty=Tensor[(5, 6, 8), int64] */;
  %772 = @func_343(%771) /* ty=(Tensor[(5, 6, 8), int64], Tensor[(5, 6, 8), bool]) */;
  %773 = %772.1;
  %774 = cast(%773, dtype="float32") /* ty=Tensor[(5, 6, 8), float32] */;
  %775 = @func_3172() /* ty=Tensor[(7, 16, 15), float64] */;
  %776 = %767.5;
  %777 = erf(%774) /* ty=Tensor[(5, 6, 8), float32] */;
  (%775, %776, %769, %777)
}

def @func_2615(%var_2609: Tensor[(252), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) {
  %778 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %779 = cast(%var_2609, dtype="int32") /* ty=Tensor[(252), int32] */;
  %780 = cast(%var_2609, dtype="int32") /* ty=Tensor[(252), int32] */;
  %781 = reshape(%779, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
  %782 = reshape(%780, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
  %783 = %778.0;
  %784 = @func_1115(%781, %782) /* ty=Tensor[(6, 14, 3), bool] */;
  (%783, %784, %var_2609)
}

def @func_9595() -> (Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float64]) {
  %785 = @func_9241() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(14, 2, 15), float32], Tensor[(5, 84), uint8]) */;
  %786 = @func_8915() /* ty=(Tensor[(5, 6, 8), float64],) */;
  %787 = %785.0;
  %788 = %786.0;
  (%787, %788)
}

def @func_5351(%var_5338: Tensor[(2, 7, 5), float32]) -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(7, 16, 15), float64]) {
  %789 = @func_4923() /* ty=Tensor[(2, 7, 5), float32] */;
  %790 = cast(%var_5338, dtype="float64") /* ty=Tensor[(2, 7, 5), float64] */;
  %791 = shape_of(%789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%789, dtype="float64") /* ty=Tensor[(2, 7, 5), float64] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %794 = @func_5289() /* ty=(Tensor[(7, 16, 15), float64],) */;
  %795 = @func_2899() /* ty=Tensor[(2, 7, 5), float64] */;
  %796 = power(%792, %793) /* ty=Tensor[(2, 7, 5), float64] */;
  %797 = %794.0;
  (%795, %796, %797)
}

def @func_5745(%var_5686: Tensor[(13, 11, 14), float64], %var_5726: Tensor[(6, 42), int32]) -> (Tensor[(13, 11, 14), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float32], Tensor[(6, 42), bool]) {
  %798 = @func_3678() /* ty=Tensor[(13, 11, ?), float64] */;
  %799 = cast(%798, dtype="float32") /* ty=Tensor[(13, 11, ?), float32] */;
  %800 = cast(%var_5686, dtype="float32") /* ty=Tensor[(13, 11, 14), float32] */;
  %801 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %802 = @func_2965() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %803 = @func_2806() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) */;
  %804 = cast(%var_5726, dtype="int32") /* ty=Tensor[(6, 42), int32] */;
  %805 = cast(%var_5726, dtype="int32") /* ty=Tensor[(6, 42), int32] */;
  %806 = reshape(%804, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
  %807 = reshape(%805, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
  %808 = @func_1115(%806, %807) /* ty=Tensor[(6, 14, 3), bool] */;
  %809 = cast(%808, dtype="bool") /* ty=Tensor[(6, 14, 3), bool] */;
  %810 = shape_of(%var_5726, dtype="int32") /* ty=Tensor[(2), int32] */;
  %811 = cast(%var_5726, dtype="bool") /* ty=Tensor[(6, 42), bool] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %813 = floor_mod(%799, %800) /* ty=Tensor[(13, 11, 14), float32] */;
  %814 = %801.1;
  %815 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
  %816 = %802.1;
  %817 = %803.0;
  %818 = not_equal(%811, %812) /* ty=Tensor[(6, 42), bool] */;
  (%813, %814, %815, %816, %817, %818)
}

def @func_4420() -> Tensor[(2, 7, 5), float32] {
  %819 = @func_3976() /* ty=(Tensor[(2, 7, 5), float32],) */;
  %819.0
}

def @func_5651() -> Tensor[(2, 7, 5), float64] {
  %820 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %820.0
}

def @func_7396() -> (Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float32], Tensor[(?, 2, 13), bool], Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(1536), float32]) {
  %821 = @func_5971() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %822 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
  %823 = cast(meta[relay.Constant][44] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %824 = %822.2;
  %825 = cast(%824, dtype="float32") /* ty=Tensor[(?, 2, 13), float32] */;
  %826 = reshape(%823, newshape=[1536]) /* ty=Tensor[(1536), float32] */;
  %827 = reshape(%825, newshape=[26]) /* ty=Tensor[(26), float32] */;
  %828 = @func_6912(%826, %827) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(1536), float32], Tensor[(26), float32]) */;
  %829 = @func_4420() /* ty=Tensor[(2, 7, 5), float32] */;
  %830 = %821.0;
  %831 = @func_4923() /* ty=Tensor[(2, 7, 5), float32] */;
  %832 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
  %833 = %828.2;
  (%829, %830, %831, %824, %832, %833, meta[relay.Constant][44] /* ty=Tensor[(1536), float32] */)
}

def @func_2204() -> Tensor[(2, 7, 5), float64] {
  @func_2170() /* ty=Tensor[(2, 7, 5), float64] */
}

def @func_2584(%var_2563: Tensor[(26), float32]) -> (Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(32, 48), float32], Tensor[(26), float32], Tensor[(2, 7, 5), float64]) {
  %834 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %835 = cast(meta[relay.Constant][45] /* ty=Tensor[(32, 48), float32] */, dtype="float32") /* ty=Tensor[(32, 48), float32] */;
  %836 = cast(%var_2563, dtype="float32") /* ty=Tensor[(26), float32] */;
  %837 = reshape(%835, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), float32] */;
  %838 = reshape(%836, newshape=[26, 1]) /* ty=Tensor[(26, 1), float32] */;
  %839 = @func_2317(%837, %838) /* ty=(Tensor[(1, 2, 13), float32], Tensor[(26, 1), float32], Tensor[(16, 12, 8), bool]) */;
  %840 = @func_2526() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(110, 15), float64]) */;
  %841 = %834.1;
  %842 = %839.0;
  %843 = %840.0;
  (%841, %842, meta[relay.Constant][45] /* ty=Tensor[(32, 48), float32] */, %var_2563, %843)
}

def @func_4081() -> (Tensor[(110, 15), float64], Tensor[(?, 2, 13), float32]) {
  %844 = @func_2526() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(110, 15), float64]) */;
  %845 = @func_3876() /* ty=(Tensor[(?, 2, 13), float32],) */;
  %846 = %844.2;
  %847 = %845.0;
  (%846, %847)
}

def @func_2806() -> (Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) {
  %848 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
  %849 = cast(%848, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %850 = cast(meta[relay.Constant][46] /* ty=Tensor[(240), int64] */, dtype="int64") /* ty=Tensor[(240), int64] */;
  %851 = reshape(%850, newshape=[5, 6, 8]) /* ty=Tensor[(5, 6, 8), int64] */;
  %852 = @func_343(%851) /* ty=(Tensor[(5, 6, 8), int64], Tensor[(5, 6, 8), bool]) */;
  %853 = acosh(%849) /* ty=Tensor[(2, 7, 5), float32] */;
  %854 = %852.1;
  (%853, %854, meta[relay.Constant][46] /* ty=Tensor[(240), int64] */)
}

def @func_1115(%var_1104: Tensor[(6, 14, 3), int32], %var_1105: Tensor[(6, 14, 3), int32]) -> Tensor[(6, 14, 3), bool] {
  %855 = cast(%var_1105, dtype="bool") /* ty=Tensor[(6, 14, 3), bool] */;
  %856 = shape_of(%var_1104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%var_1104, dtype="bool") /* ty=Tensor[(6, 14, 3), bool] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%857, %858) /* ty=Tensor[(6, 14, 3), bool] */
}

def @func_2382() -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) {
  %859 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
  %860 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
  (%859, %860)
}

def @func_8235(%var_8228: float32) -> (Tensor[(240), int64], Tensor[(110, 15), float64], float32, Tensor[(2, 1024), float32]) {
  %861 = cast(%var_8228, dtype="float32") /* ty=float32 */;
  %862 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 1024), float32] */, dtype="float32") /* ty=Tensor[(2, 1024), float32] */;
  %863 = reshape(%861, newshape=[]) /* ty=float32 */;
  %864 = reshape(%862, newshape=[8, 16, 16]) /* ty=Tensor[(8, 16, 16), float32] */;
  %865 = @func_5391(%863, %864) /* ty=(Tensor[(8, 16, 16), bool], Tensor[(110, 15), int32], Tensor[(110, 15), float64], Tensor[(252), int32]) */;
  %866 = @func_3164() /* ty=Tensor[(240), int64] */;
  %867 = %865.2;
  (%866, %867, %var_8228, meta[relay.Constant][47] /* ty=Tensor[(2, 1024), float32] */)
}

def @func_8453() -> (Tensor[(5, 6, 8), bool],) {
  %868 = @func_2806() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) */;
  %869 = %868.1;
  (%869,)
}

def @func_3886() -> (Tensor[(2, 7, 5), float32],) {
  %870 = @func_3267() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %871 = %870.0;
  (%871,)
}

def @func_2751(%var_2711: Tensor[(252), int32], %var_2715: Tensor[(2, 7, 5), float64], %var_2735: Tensor[(2, 7, 5), float32]) -> (Tensor[(252), int32], Tensor[(252), int32], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64]) {
  %872 = cast(%var_2711, dtype="int32") /* ty=Tensor[(252), int32] */;
  %873 = reshape(%872, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %874 = @func_2615(%873) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) */;
  %875 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %876 = %875.0;
  %877 = cast(%var_2715, dtype="int64") /* ty=Tensor[(2, 7, 5), int64] */;
  %878 = shape_of(%876, dtype="int32") /* ty=Tensor[(3), int32] */;
  %879 = cast(%876, dtype="int64") /* ty=Tensor[(2, 7, 5), int64] */;
  %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %881 = cast(%var_2715, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %882 = atanh(%881) /* ty=Tensor[(2, 7, 5), float32] */;
  %883 = cast(%882, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %884 = cast(%var_2735, dtype="float64") /* ty=Tensor[(2, 7, 5), float64] */;
  %885 = shape_of(%882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %886 = cast(%882, dtype="float64") /* ty=Tensor[(2, 7, 5), float64] */;
  %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %888 = %874.2;
  %889 = right_shift(%879, %880) /* ty=Tensor[(2, 7, 5), int64] */;
  %890 = asin(%883) /* ty=Tensor[(2, 7, 5), float32] */;
  %891 = floor_mod(%886, %887) /* ty=Tensor[(2, 7, 5), float64] */;
  (%888, %var_2711, %889, %890, %891)
}

def @func_2456() -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) {
  %892 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %893 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %894 = cast(meta[relay.Constant][48] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %895 = reshape(%894, newshape=[1, 2, 13]) /* ty=Tensor[(1, 2, 13), float32] */;
  %896 = @func_1659(%895) /* ty=(Tensor[(1, 2, 13), float32],) */;
  %897 = %896.0;
  %898 = cast(meta[relay.Constant][48] /* ty=Tensor[(26), float32] */, dtype="bool") /* ty=Tensor[(26), bool] */;
  %899 = shape_of(%897, dtype="int32") /* ty=Tensor[(3), int32] */;
  %900 = cast(%897, dtype="bool") /* ty=Tensor[(1, 2, 13), bool] */;
  %901 = dyn.reshape(%898, %899, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %902 = cast(meta[relay.Constant][49] /* ty=Tensor[(10, 9, 5), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
  %903 = sin(%902) /* ty=Tensor[(10, 9, 5), float32] */;
  %904 = cast(%903, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
  %905 = log2(%904) /* ty=Tensor[(10, 9, 5), float32] */;
  %906 = cast(%903, dtype="int64") /* ty=Tensor[(10, 9, 5), int64] */;
  %907 = shape_of(%905, dtype="int32") /* ty=Tensor[(3), int32] */;
  %908 = cast(%905, dtype="int64") /* ty=Tensor[(10, 9, 5), int64] */;
  %909 = dyn.reshape(%906, %907, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %910 = cast(meta[relay.Constant][50] /* ty=Tensor[(143), int16] */, dtype="int16") /* ty=Tensor[(143), int16] */;
  %911 = reshape(%910, newshape=[13, 11, 1]) /* ty=Tensor[(13, 11, 1), int16] */;
  %912 = @func_192(%911) /* ty=(Tensor[(13, 11, ?), bool], Tensor[(13, 11, ?), float64]) */;
  %913 = %892.0;
  %914 = %893.0;
  %915 = greater(%900, %901) /* ty=Tensor[(?, 2, 13), bool] */;
  %916 = bitwise_xor(%908, %909) /* ty=Tensor[(10, 9, 5), int64] */;
  %917 = %912.1;
  (%913, %914, %915, %916, %917, meta[relay.Constant][50] /* ty=Tensor[(143), int16] */)
}

def @func_6512() -> (Tensor[(10, 9, 5), float64], Tensor[(10, 9, 5), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float32]) {
  %918 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
  %919 = %918.3;
  %920 = cast(%919, dtype="float64") /* ty=Tensor[(10, 9, 5), float64] */;
  %921 = cast(%919, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
  %922 = sqrt(%920) /* ty=Tensor[(10, 9, 5), float64] */;
  %923 = acos(%921) /* ty=Tensor[(10, 9, 5), float32] */;
  %924 = @func_3172() /* ty=Tensor[(7, 16, 15), float64] */;
  %925 = @func_4420() /* ty=Tensor[(2, 7, 5), float32] */;
  (%922, %923, %924, %925)
}

def @func_6196(%var_6126: Tensor[(252), int32]) -> (Tensor[(15, 12, 5), bool], Tensor[(252), int32], Tensor[(70), float64], Tensor[(6, 14, 3), bool], Tensor[(6, 14, 3), bool], Tensor[(7, 16, 15), float64], Tensor[(110, 15), float64], Tensor[(2, 7, 5), float64], Tensor[(15, 12, 5), float32], Tensor[(6, 14, 3), bool], Tensor[(26), float32], Tensor[(26), float32], Tensor[(2, 7, 5), float32]) {
  %926 = cast(meta[relay.Constant][51] /* ty=Tensor[(15, 12, 5), float64] */, dtype="float64") /* ty=Tensor[(15, 12, 5), float64] */;
  %927 = exp(%926) /* ty=Tensor[(15, 12, 5), float64] */;
  %928 = cast(%927, dtype="bool") /* ty=Tensor[(15, 12, 5), bool] */;
  %929 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(15, 12, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %930 = cast(meta[relay.Constant][51] /* ty=Tensor[(15, 12, 5), float64] */, dtype="bool") /* ty=Tensor[(15, 12, 5), bool] */;
  %931 = dyn.reshape(%928, %929, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %932 = cast(%var_6126, dtype="int32") /* ty=Tensor[(252), int32] */;
  %933 = cast(meta[relay.Constant][52] /* ty=Tensor[(70), float64] */, dtype="float64") /* ty=Tensor[(70), float64] */;
  %934 = cast(meta[relay.Constant][52] /* ty=Tensor[(70), float64] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %935 = reshape(%932, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %936 = reshape(%933, newshape=[2, 7, 5]) /* ty=Tensor[(2, 7, 5), float64] */;
  %937 = reshape(%934, newshape=[2, 7, 5]) /* ty=Tensor[(2, 7, 5), float32] */;
  %938 = @func_2751(%935, %936, %937) /* ty=(Tensor[(252), int32], Tensor[(252), int32], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64]) */;
  %939 = cast(%var_6126, dtype="int32") /* ty=Tensor[(252), int32] */;
  %940 = %938.0;
  %941 = cast(%940, dtype="int32") /* ty=Tensor[(252), int32] */;
  %942 = reshape(%939, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
  %943 = reshape(%941, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
  %944 = @func_1115(%942, %943) /* ty=Tensor[(6, 14, 3), bool] */;
  %945 = cast(%var_6126, dtype="bool") /* ty=Tensor[(252), bool] */;
  %946 = shape_of(%944, dtype="int32") /* ty=Tensor[(3), int32] */;
  %947 = cast(%944, dtype="bool") /* ty=Tensor[(6, 14, 3), bool] */;
  %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %949 = cast(%var_6126, dtype="int32") /* ty=Tensor[(252), int32] */;
  %950 = cast(%944, dtype="int32") /* ty=Tensor[(6, 14, 3), int32] */;
  %951 = reshape(%949, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
  %952 = reshape(%950, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
  %953 = @func_4081() /* ty=(Tensor[(110, 15), float64], Tensor[(?, 2, 13), float32]) */;
  %954 = cast(%927, dtype="float32") /* ty=Tensor[(15, 12, 5), float32] */;
  %955 = @func_5463() /* ty=(Tensor[(6, 14, 3), bool],) */;
  %956 = cast(meta[relay.Constant][53] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %957 = reshape(%956, newshape=[26]) /* ty=Tensor[(26), float32] */;
  %958 = @func_2584(%957) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(32, 48), float32], Tensor[(26), float32], Tensor[(2, 7, 5), float64]) */;
  %959 = @func_3976() /* ty=(Tensor[(2, 7, 5), float32],) */;
  %960 = greater_equal(%930, %931) /* ty=Tensor[(15, 12, 5), bool] */;
  %961 = greater_equal(%947, %948) /* ty=Tensor[(6, 14, 3), bool] */;
  %962 = @func_1115(%951, %952) /* ty=Tensor[(6, 14, 3), bool] */;
  %963 = @func_3172() /* ty=Tensor[(7, 16, 15), float64] */;
  %964 = %953.0;
  %965 = @func_5611() /* ty=Tensor[(2, 7, 5), float64] */;
  %966 = sin(%954) /* ty=Tensor[(15, 12, 5), float32] */;
  %967 = %955.0;
  %968 = %958.3;
  %969 = %959.0;
  (%960, %940, meta[relay.Constant][52] /* ty=Tensor[(70), float64] */, %961, %962, %963, %964, %965, %966, %967, %968, meta[relay.Constant][53] /* ty=Tensor[(26), float32] */, %969)
}

def @func_7218() -> (Tensor[(2, 7, 5), float64],) {
  %970 = @func_5651() /* ty=Tensor[(2, 7, 5), float64] */;
  (%970,)
}

def @func_4866(%var_4843: Tensor[(252), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(252), int32], Tensor[(252), int32], Tensor[(2, 7, 5), float64], Tensor[(7, 182), float64], Tensor[(550, 3), float64]) {
  %971 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %972 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %973 = cast(%var_4843, dtype="int32") /* ty=Tensor[(252), int32] */;
  %974 = reshape(%973, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %975 = @func_4366(%974) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) */;
  %976 = cast(meta[relay.Constant][54] /* ty=Tensor[(7, 182), float64] */, dtype="float64") /* ty=Tensor[(7, 182), float64] */;
  %977 = cast(meta[relay.Constant][55] /* ty=Tensor[(550, 3), float64] */, dtype="float64") /* ty=Tensor[(550, 3), float64] */;
  %978 = reshape(%976, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
  %979 = reshape(%977, newshape=[1650]) /* ty=Tensor[(1650), float64] */;
  %980 = @func_4175(%978, %979) /* ty=(Tensor[(7, 14, 13), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(1650), float64]) */;
  %981 = %971.0;
  %982 = %972.0;
  %983 = %975.2;
  %984 = %980.3;
  (%981, %982, %983, %var_4843, %984, meta[relay.Constant][54] /* ty=Tensor[(7, 182), float64] */, meta[relay.Constant][55] /* ty=Tensor[(550, 3), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8564() -> Tensor[(2, 7, 5), float64] {
  @func_8562() /* ty=Tensor[(2, 7, 5), float64] */
}

def @func_3269() -> (Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) {
  @func_3267() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */
}

def @func_8191(%var_8175: Tensor[(2002), float64], %var_8181: Tensor[(120), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(13, 11, ?), float64], Tensor[(2002), float64], Tensor[(13, 11, ?), float64], Tensor[(120), int32]) {
  %0 = cast(%var_8175, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %1 = reshape(%0, newshape=[1, 2002]) /* ty=Tensor[(1, 2002), float64] */;
  %2 = @func_6226(%1) /* ty=(Tensor[(13, 11, ?), float64], Tensor[(6, 42), bool], Tensor[(1, 2002), float64], Tensor[(252), int32]) */;
  %3 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
  %4 = cast(%3, dtype="bool") /* ty=Tensor[(2, 7, 5), bool] */;
  %5 = cast(%var_8181, dtype="int32") /* ty=Tensor[(120), int32] */;
  %6 = reshape(%4, newshape=[2, 7, 5]) /* ty=Tensor[(2, 7, 5), bool] */;
  %7 = reshape(%5, newshape=[120]) /* ty=Tensor[(120), int32] */;
  %8 = @func_4590(%6, %7) /* ty=(Tensor[(12, 5, 2), uint64], Tensor[(120), int32], Tensor[(143, 1), int16], Tensor[(2, 7, 5), uint32], Tensor[(?, 2, 13), float32], Tensor[(13, 11, ?), float64], Tensor[(2, 7, 5), float32], Tensor[(240), int64]) */;
  %9 = %2.0;
  %10 = %8.5;
  (%3, %9, %var_8175, %10, %var_8181)
}

def @func_6912(%var_6907: Tensor[(1536), float32], %var_6908: Tensor[(26), float32]) -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(1536), float32], Tensor[(26), float32]) {
  %11 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %12 = @func_5611() /* ty=Tensor[(2, 7, 5), float64] */;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(2, 7, 5), float64] */;
  %14 = cast(%var_6907, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %15 = cast(%var_6908, dtype="float32") /* ty=Tensor[(26), float32] */;
  %16 = reshape(%14, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), float32] */;
  %17 = reshape(%15, newshape=[26, 1]) /* ty=Tensor[(26, 1), float32] */;
  %18 = @func_2317(%16, %17) /* ty=(Tensor[(1, 2, 13), float32], Tensor[(26, 1), float32], Tensor[(16, 12, 8), bool]) */;
  %19 = %11.0;
  %20 = log(%13) /* ty=Tensor[(2, 7, 5), float64] */;
  %21 = %18.0;
  (%19, %20, %21, %var_6907, %var_6908)
}

def @func_9909() -> (Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float64]) {
  %22 = @func_8915() /* ty=(Tensor[(5, 6, 8), float64],) */;
  %23 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
  %24 = %22.0;
  (%23, %24)
}

def @func_6412(%var_6396: Tensor[(288), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(4, 72), float32], Tensor[(288), int32], Tensor[(2, 7, 5), float32], Tensor[(7, 16, 15), float64]) {
  %25 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %26 = cast(%var_6396, dtype="int32") /* ty=Tensor[(288), int32] */;
  %27 = reshape(%26, newshape=[4, 72]) /* ty=Tensor[(4, 72), int32] */;
  %28 = @func_3103(%27) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(4, 6, 12), int32], Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(4, 72), float32]) */;
  %29 = @func_6024() /* ty=(Tensor[(2, 7, 5), float32],) */;
  %30 = @func_2866() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(6, 14, 3), bool]) */;
  %31 = @func_2784() /* ty=Tensor[(2, 7, 5), float64] */;
  %32 = %25.0;
  %33 = %28.5;
  %34 = %29.0;
  %35 = %30.0;
  (%31, %32, %33, %var_6396, %34, %35)
}

def @func_9597() -> (Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float64]) {
  @func_9595() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float64]) */
}

def @func_5881(%var_5879: Tensor[(176), float32]) -> (Tensor[(5, 6, 8), float64], Tensor[(8, 2, 11), float32], Tensor[(176), float32]) {
  @func_5878(%var_5879) /* ty=(Tensor[(5, 6, 8), float64], Tensor[(8, 2, 11), float32], Tensor[(176), float32]) */
}

def @func_4925() -> Tensor[(2, 7, 5), float32] {
  @func_4923() /* ty=Tensor[(2, 7, 5), float32] */
}

def @func_6512() -> (Tensor[(10, 9, 5), float64], Tensor[(10, 9, 5), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float32]) {
  %36 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
  %37 = %36.3;
  %38 = cast(%37, dtype="float64") /* ty=Tensor[(10, 9, 5), float64] */;
  %39 = cast(%37, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
  %40 = sqrt(%38) /* ty=Tensor[(10, 9, 5), float64] */;
  %41 = acos(%39) /* ty=Tensor[(10, 9, 5), float32] */;
  %42 = @func_3172() /* ty=Tensor[(7, 16, 15), float64] */;
  %43 = @func_4420() /* ty=Tensor[(2, 7, 5), float32] */;
  (%40, %41, %42, %43)
}

def @func_5773() -> (Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float32]) {
  %44 = @func_5141() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(143), int16], Tensor[(240), int64], Tensor[(5, 6, 8), float32]) */;
  %45 = @func_5611() /* ty=Tensor[(2, 7, 5), float64] */;
  %46 = %44.3;
  (%45, %46)
}

def @func_8521() -> (Tensor[(2, 7, 5), float64],) {
  @func_8519() /* ty=(Tensor[(2, 7, 5), float64],) */
}

def @func_8717() -> (Tensor[(2, 7, 5), float64],) {
  %49 = fn () -> (Tensor[(2, 7, 5), float64],) {
    %47 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
    %48 = %47.1;
    (%48,)
  };
  %49() /* ty=(Tensor[(2, 7, 5), float64],) */
}

def @func_4923() -> Tensor[(2, 7, 5), float32] {
  %50 = @func_3886() /* ty=(Tensor[(2, 7, 5), float32],) */;
  %50.0
}

def @func_8637() -> (Tensor[(5, 6, 8), bool], Tensor[(2, 7, 5), float32]) {
  %51 = @func_5587() /* ty=(Tensor[(5, 6, 8), bool], Tensor[(5, 6, 8), float64]) */;
  %52 = %51.1;
  %53 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 6, 8), float64] */, dtype="bool") /* ty=Tensor[(5, 6, 8), bool] */;
  %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%52, dtype="bool") /* ty=Tensor[(5, 6, 8), bool] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %57 = greater_equal(%55, %56) /* ty=Tensor[(5, 6, 8), bool] */;
  %58 = @func_7124() /* ty=Tensor[(2, 7, 5), float32] */;
  (%57, %58)
}

def @func_2320(%var_2318: Tensor[(16, 12, 8), float32], %var_2319: Tensor[(26, 1), float32]) -> (Tensor[(1, 2, 13), float32], Tensor[(26, 1), float32], Tensor[(16, 12, 8), bool]) {
  %70 = fn (%var_2301: Tensor[(16, 12, 8), float32], %var_2305: Tensor[(26, 1), float32]) -> (Tensor[(1, 2, 13), float32], Tensor[(26, 1), float32], Tensor[(16, 12, 8), bool]) {
    %59 = cast(%var_2305, dtype="float32") /* ty=Tensor[(26, 1), float32] */;
    %60 = reshape(%59, newshape=[1, 2, 13]) /* ty=Tensor[(1, 2, 13), float32] */;
    %61 = @func_1659(%60) /* ty=(Tensor[(1, 2, 13), float32],) */;
    %62 = cast(%var_2301, dtype="float32") /* ty=Tensor[(16, 12, 8), float32] */;
    %63 = sin(%62) /* ty=Tensor[(16, 12, 8), float32] */;
    %64 = cast(%var_2301, dtype="bool") /* ty=Tensor[(16, 12, 8), bool] */;
    %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
    %66 = cast(%63, dtype="bool") /* ty=Tensor[(16, 12, 8), bool] */;
    %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %68 = %61.0;
    %69 = greater_equal(%66, %67) /* ty=Tensor[(16, 12, 8), bool] */;
    (%68, %var_2305, %69)
  };
  %70(%var_2318, %var_2319) /* ty=(Tensor[(1, 2, 13), float32], Tensor[(26, 1), float32], Tensor[(16, 12, 8), bool]) */
}

def @func_5290() -> (Tensor[(7, 16, 15), float64],) {
  %75 = fn () -> (Tensor[(7, 16, 15), float64],) {
    %71 = @func_5141() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(143), int16], Tensor[(240), int64], Tensor[(5, 6, 8), float32]) */;
    %72 = %71.0;
    %73 = cast(%72, dtype="float64") /* ty=Tensor[(7, 16, 15), float64] */;
    %74 = acosh(%73) /* ty=Tensor[(7, 16, 15), float64] */;
    (%74,)
  };
  %75() /* ty=(Tensor[(7, 16, 15), float64],) */
}

def @func_8453() -> (Tensor[(5, 6, 8), bool],) {
  %76 = @func_2806() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) */;
  %77 = %76.1;
  (%77,)
}

def @func_4083() -> (Tensor[(110, 15), float64], Tensor[(?, 2, 13), float32]) {
  @func_4081() /* ty=(Tensor[(110, 15), float64], Tensor[(?, 2, 13), float32]) */
}

def @func_6916(%var_6914: Tensor[(1536), float32], %var_6915: Tensor[(26), float32]) -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(1536), float32], Tensor[(26), float32]) {
  @func_6912(%var_6914, %var_6915) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(1536), float32], Tensor[(26), float32]) */
}

def @func_2384() -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) {
  @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */
}

def @func_7854(%var_7852: Tensor[(70), bool], %var_7853: Tensor[(60, 2), int32]) -> (Tensor[(13, 11, ?), float64], Tensor[(2, 7, 5), uint32], Tensor[(70), bool], Tensor[(60, 2), int32], Tensor[(2, 7, 5), float64], Tensor[(24, 12), int32], Tensor[(240), int64]) {
  %93 = fn (%var_7800: Tensor[(70), bool], %var_7801: Tensor[(60, 2), int32]) -> (Tensor[(13, 11, ?), float64], Tensor[(2, 7, 5), uint32], Tensor[(70), bool], Tensor[(60, 2), int32], Tensor[(2, 7, 5), float64], Tensor[(24, 12), int32], Tensor[(240), int64]) {
    %78 = cast(%var_7800, dtype="bool") /* ty=Tensor[(70), bool] */;
    %79 = cast(%var_7801, dtype="int32") /* ty=Tensor[(60, 2), int32] */;
    %80 = reshape(%78, newshape=[2, 7, 5]) /* ty=Tensor[(2, 7, 5), bool] */;
    %81 = reshape(%79, newshape=[120]) /* ty=Tensor[(120), int32] */;
    %82 = @func_4590(%80, %81) /* ty=(Tensor[(12, 5, 2), uint64], Tensor[(120), int32], Tensor[(143, 1), int16], Tensor[(2, 7, 5), uint32], Tensor[(?, 2, 13), float32], Tensor[(13, 11, ?), float64], Tensor[(2, 7, 5), float32], Tensor[(240), int64]) */;
    %83 = cast(meta[relay.Constant][1] /* ty=Tensor[(24, 12), int32] */, dtype="int32") /* ty=Tensor[(24, 12), int32] */;
    %84 = reshape(%83, newshape=[288]) /* ty=Tensor[(288), int32] */;
    %85 = @func_6412(%84) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(4, 72), float32], Tensor[(288), int32], Tensor[(2, 7, 5), float32], Tensor[(7, 16, 15), float64]) */;
    %86 = cast(meta[relay.Constant][1] /* ty=Tensor[(24, 12), int32] */, dtype="int32") /* ty=Tensor[(24, 12), int32] */;
    %87 = reshape(%86, newshape=[288]) /* ty=Tensor[(288), int32] */;
    %88 = @func_4680(%87) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(288), int32], Tensor[(4, 6, 12), float32], Tensor[(240), int64], Tensor[(13, 11, ?), float64], Tensor[(4, 6, 12), int32]) */;
    %89 = @func_3678() /* ty=Tensor[(13, 11, ?), float64] */;
    %90 = %82.3;
    %91 = %85.1;
    %92 = %88.3;
    (%89, %90, %var_7800, %var_7801, %91, meta[relay.Constant][1] /* ty=Tensor[(24, 12), int32] */, %92)
  };
  %93(%var_7852, %var_7853) /* ty=(Tensor[(13, 11, ?), float64], Tensor[(2, 7, 5), uint32], Tensor[(70), bool], Tensor[(60, 2), int32], Tensor[(2, 7, 5), float64], Tensor[(24, 12), int32], Tensor[(240), int64]) */
}

def @func_2808() -> (Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) {
  @func_2806() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) */
}

def @func_9066() -> (Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool]) {
  @func_9064() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool]) */
}

def @func_5971() -> (Tensor[(2, 7, 5), float64],) {
  %94 = @func_3925() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(2, 7, 5), float64]) */;
  %95 = %94.0;
  (%95,)
}

def @func_9556(%var_9545: Tensor[(6, 3, 11), int16]) -> Tensor[(6, 3, 11), int16] {
  %96 = cast(%var_9545, dtype="int16") /* ty=Tensor[(6, 3, 11), int16] */;
  %97 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(6, 3, 11), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 3, 11), int16] */, dtype="int16") /* ty=Tensor[(6, 3, 11), int16] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_and(%98, %99) /* ty=Tensor[(6, 3, 11), int16] */
}

def @func_195(%var_193: Tensor[(13, 11, 1), int16]) -> (Tensor[(13, 11, ?), bool], Tensor[(13, 11, ?), float64]) {
  @func_192(%var_193) /* ty=(Tensor[(13, 11, ?), bool], Tensor[(13, 11, ?), float64]) */
}

def @func_8213() -> (Tensor[(7, 16, 15), float64], Tensor[(26, 1), float32], Tensor[(1536), float32], Tensor[(26), float32]) {
  %108 = fn () -> (Tensor[(7, 16, 15), float64], Tensor[(26, 1), float32], Tensor[(1536), float32], Tensor[(26), float32]) {
    %100 = @func_7604() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(15, 10, 11), float64], Tensor[(1650), float64], Tensor[(240), int64]) */;
    %101 = cast(meta[relay.Constant][3] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
    %102 = cast(meta[relay.Constant][4] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
    %103 = reshape(%101, newshape=[1, 1536]) /* ty=Tensor[(1, 1536), float32] */;
    %104 = reshape(%102, newshape=[26]) /* ty=Tensor[(26), float32] */;
    %105 = @func_3424(%103, %104) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(26, 1), float32], Tensor[(1, 1536), float32], Tensor[(26), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) */;
    %106 = %100.0;
    %107 = %105.1;
    (%106, %107, meta[relay.Constant][3] /* ty=Tensor[(1536), float32] */, meta[relay.Constant][4] /* ty=Tensor[(26), float32] */)
  };
  %108() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(26, 1), float32], Tensor[(1536), float32], Tensor[(26), float32]) */
}

def @func_5973() -> (Tensor[(2, 7, 5), float64],) {
  @func_5971() /* ty=(Tensor[(2, 7, 5), float64],) */
}

def @func_8070(%var_8068: Tensor[(252), int32]) -> (Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float32], Tensor[(110, 15), int32], int8, Tensor[(252), int32], Tensor[(2048), float32], Tensor[(13, 11, ?), float64]) {
  @func_8067(%var_8068) /* ty=(Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float32], Tensor[(110, 15), int32], int8, Tensor[(252), int32], Tensor[(2048), float32], Tensor[(13, 11, ?), float64]) */
}

def @func_6316(%var_6314: Tensor[(252), int32], %var_6315: Tensor[(288), int32]) -> (Tensor[(2, 7, 5), float32], Tensor[(252), int32], Tensor[(6, 14, 3), float64], Tensor[(4, 6, 12), int32], Tensor[(288), int32]) {
  @func_6312(%var_6314, %var_6315) /* ty=(Tensor[(2, 7, 5), float32], Tensor[(252), int32], Tensor[(6, 14, 3), float64], Tensor[(4, 6, 12), int32], Tensor[(288), int32]) */
}

def @func_5066(%var_5010: Tensor[(110, 15), float64], %var_5027: Tensor[(252), int32], %var_5036: Tensor[(110, 15), float64]) -> (Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(5, 6, 8), bool], Tensor[(252), int32], Tensor[(252), int32], Tensor[(110, 15), int16], Tensor[(110, 15), int16], Tensor[(110, 15), int32]) {
  %109 = @func_3164() /* ty=Tensor[(240), int64] */;
  %110 = cast(%109, dtype="int64") /* ty=Tensor[(240), int64] */;
  %111 = reshape(%110, newshape=[5, 6, 8]) /* ty=Tensor[(5, 6, 8), int64] */;
  %112 = @func_343(%111) /* ty=(Tensor[(5, 6, 8), int64], Tensor[(5, 6, 8), bool]) */;
  %113 = cast(%var_5027, dtype="int32") /* ty=Tensor[(252), int32] */;
  %114 = reshape(%113, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %115 = @func_4866(%114) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(252), int32], Tensor[(252), int32], Tensor[(2, 7, 5), float64], Tensor[(7, 182), float64], Tensor[(550, 3), float64]) */;
  %116 = @func_4081() /* ty=(Tensor[(110, 15), float64], Tensor[(?, 2, 13), float32]) */;
  %117 = %116.0;
  %118 = cast(%117, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %119 = atan(%118) /* ty=Tensor[(110, 15), float64] */;
  %120 = cast(%117, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %121 = shape_of(%119, dtype="int32") /* ty=Tensor[(2), int32] */;
  %122 = cast(%119, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %124 = floor_mod(%122, %123) /* ty=Tensor[(110, 15), float64] */;
  %125 = cast(%var_5010, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %126 = shape_of(%124, dtype="int32") /* ty=Tensor[(2), int32] */;
  %127 = cast(%124, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %129 = minimum(%127, %128) /* ty=Tensor[(110, 15), float64] */;
  %130 = cast(%var_5036, dtype="int16") /* ty=Tensor[(110, 15), int16] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(2), int32] */;
  %132 = cast(%129, dtype="int16") /* ty=Tensor[(110, 15), int16] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %134 = cast(%124, dtype="int32") /* ty=Tensor[(110, 15), int32] */;
  %135 = shape_of(%129, dtype="int32") /* ty=Tensor[(2), int32] */;
  %136 = cast(%129, dtype="int32") /* ty=Tensor[(110, 15), int32] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %138 = bitwise_and(%136, %137) /* ty=Tensor[(110, 15), int32] */;
  %139 = cast(%var_5010, dtype="int16") /* ty=Tensor[(110, 15), int16] */;
  %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(2), int32] */;
  %141 = cast(%138, dtype="int16") /* ty=Tensor[(110, 15), int16] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %143 = cast(%129, dtype="int32") /* ty=Tensor[(110, 15), int32] */;
  %144 = shape_of(%124, dtype="int32") /* ty=Tensor[(2), int32] */;
  %145 = cast(%124, dtype="int32") /* ty=Tensor[(110, 15), int32] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %147 = @func_2899() /* ty=Tensor[(2, 7, 5), float64] */;
  %148 = %112.1;
  %149 = %115.3;
  %150 = bitwise_xor(%132, %133) /* ty=Tensor[(110, 15), int16] */;
  %151 = multiply(%141, %142) /* ty=Tensor[(110, 15), int16] */;
  %152 = logical_xor(%145, %146) /* ty=Tensor[(110, 15), int32] */;
  (%147, %109, %148, %149, %var_5027, %150, %151, %152)
}

def @func_9996() -> (Tensor[(?, 2, 13), float32], Tensor[(15, 10, 11), float64]) {
  %153 = @func_5952() /* ty=(Tensor[(?, 2, 13), float32],) */;
  %154 = @func_8111() /* ty=(Tensor[(15, 10, 11), float64],) */;
  %155 = %153.0;
  %156 = %154.0;
  (%155, %156)
}

def @func_2024(%var_2018: Tensor[(15, 10, 11), float64]) -> Tensor[(15, 10, 11), float64] {
  %157 = cast(%var_2018, dtype="float64") /* ty=Tensor[(15, 10, 11), float64] */;
  asinh(%157) /* ty=Tensor[(15, 10, 11), float64] */
}

def @func_9013(%var_9011: Tensor[(16, 7, 9), bool]) -> (Tensor[(16, 7, 9), int16], Tensor[(4, 72), float32], Tensor[(288), int32], Tensor[(16, 7, 9), float32]) {
  @func_9010(%var_9011) /* ty=(Tensor[(16, 7, 9), int16], Tensor[(4, 72), float32], Tensor[(288), int32], Tensor[(16, 7, 9), float32]) */
}

def @func_9220() -> (Tensor[(?, 2, 13), bool], Tensor[(5, 6, 8), float64]) {
  %162 = fn () -> (Tensor[(?, 2, 13), bool], Tensor[(5, 6, 8), float64]) {
    %158 = @func_3451() /* ty=(Tensor[(?, 2, 13), bool],) */;
    %159 = @func_5587() /* ty=(Tensor[(5, 6, 8), bool], Tensor[(5, 6, 8), float64]) */;
    %160 = %158.0;
    %161 = %159.1;
    (%160, %161)
  };
  %162() /* ty=(Tensor[(?, 2, 13), bool], Tensor[(5, 6, 8), float64]) */
}

def @func_6024() -> (Tensor[(2, 7, 5), float32],) {
  %163 = @func_4923() /* ty=Tensor[(2, 7, 5), float32] */;
  (%163,)
}

def @func_7039(%var_7038: Tensor[(252), int32]) -> (Tensor[(240), int64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(143), float64]) {
  %174 = fn (%var_6988: Tensor[(252), int32]) -> (Tensor[(240), int64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(143), float64]) {
    %164 = cast(%var_6988, dtype="int32") /* ty=Tensor[(252), int32] */;
    %165 = cast(%var_6988, dtype="int32") /* ty=Tensor[(252), int32] */;
    %166 = reshape(%164, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
    %167 = reshape(%165, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
    %168 = @func_5141() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(143), int16], Tensor[(240), int64], Tensor[(5, 6, 8), float32]) */;
    %169 = %168.1;
    %170 = cast(%169, dtype="float64") /* ty=Tensor[(143), float64] */;
    %171 = @func_2826() /* ty=Tensor[(240), int64] */;
    %172 = @func_1115(%166, %167) /* ty=Tensor[(6, 14, 3), bool] */;
    %173 = sqrt(%170) /* ty=Tensor[(143), float64] */;
    (%171, %172, %var_6988, %173)
  };
  %174(%var_7038) /* ty=(Tensor[(240), int64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(143), float64]) */
}

def @func_9162() -> (Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool]) {
  %179 = fn () -> (Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool]) {
    %175 = @func_2526() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(110, 15), float64]) */;
    %176 = @func_3451() /* ty=(Tensor[(?, 2, 13), bool],) */;
    %177 = %175.0;
    %178 = %176.0;
    (%177, %178)
  };
  %179() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool]) */
}

def @func_9519() -> (Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64]) {
  %180 = @func_7124() /* ty=Tensor[(2, 7, 5), float32] */;
  %181 = @func_8283() /* ty=Tensor[(2, 7, 5), float64] */;
  (%180, %181)
}

def @func_8519() -> (Tensor[(2, 7, 5), float64],) {
  %182 = @func_2965() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %183 = %182.1;
  (%183,)
}

def @func_4868(%var_4867: Tensor[(252), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(252), int32], Tensor[(252), int32], Tensor[(2, 7, 5), float64], Tensor[(7, 182), float64], Tensor[(550, 3), float64]) {
  %198 = fn (%var_4843: Tensor[(252), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(252), int32], Tensor[(252), int32], Tensor[(2, 7, 5), float64], Tensor[(7, 182), float64], Tensor[(550, 3), float64]) {
    %184 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
    %185 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
    %186 = cast(%var_4843, dtype="int32") /* ty=Tensor[(252), int32] */;
    %187 = reshape(%186, newshape=[252]) /* ty=Tensor[(252), int32] */;
    %188 = @func_4366(%187) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) */;
    %189 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 182), float64] */, dtype="float64") /* ty=Tensor[(7, 182), float64] */;
    %190 = cast(meta[relay.Constant][6] /* ty=Tensor[(550, 3), float64] */, dtype="float64") /* ty=Tensor[(550, 3), float64] */;
    %191 = reshape(%189, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
    %192 = reshape(%190, newshape=[1650]) /* ty=Tensor[(1650), float64] */;
    %193 = @func_4175(%191, %192) /* ty=(Tensor[(7, 14, 13), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(1650), float64]) */;
    %194 = %184.0;
    %195 = %185.0;
    %196 = %188.2;
    %197 = %193.3;
    (%194, %195, %196, %var_4843, %197, meta[relay.Constant][5] /* ty=Tensor[(7, 182), float64] */, meta[relay.Constant][6] /* ty=Tensor[(550, 3), float64] */)
  };
  %198(%var_4867) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(252), int32], Tensor[(252), int32], Tensor[(2, 7, 5), float64], Tensor[(7, 182), float64], Tensor[(550, 3), float64]) */
}

def @func_4594(%var_4592: Tensor[(2, 7, 5), bool], %var_4593: Tensor[(120), int32]) -> (Tensor[(12, 5, 2), uint64], Tensor[(120), int32], Tensor[(143, 1), int16], Tensor[(2, 7, 5), uint32], Tensor[(?, 2, 13), float32], Tensor[(13, 11, ?), float64], Tensor[(2, 7, 5), float32], Tensor[(240), int64]) {
  @func_4590(%var_4592, %var_4593) /* ty=(Tensor[(12, 5, 2), uint64], Tensor[(120), int32], Tensor[(143, 1), int16], Tensor[(2, 7, 5), uint32], Tensor[(?, 2, 13), float32], Tensor[(13, 11, ?), float64], Tensor[(2, 7, 5), float32], Tensor[(240), int64]) */
}

def @func_4316(%var_4312: Tensor[(7, 1, 2), bool], %var_4313: Tensor[(7, 3, 2), bool], %var_4314: Tensor[(64, 24), float32], %var_4315: Tensor[(26), float32]) -> (Tensor[(7, 3, 2), bool], Tensor[(7, 3, 2), float64], Tensor[(2, 7, 5), float64], Tensor[(7, 1, 2), float32], Tensor[(16, 12, 8), bool], Tensor[(64, 24), float32], Tensor[(26), float32]) {
  %215 = fn (%var_4246: Tensor[(7, 1, 2), bool], %var_4247: Tensor[(7, 3, 2), bool], %var_4294: Tensor[(64, 24), float32], %var_4295: Tensor[(26), float32]) -> (Tensor[(7, 3, 2), bool], Tensor[(7, 3, 2), float64], Tensor[(2, 7, 5), float64], Tensor[(7, 1, 2), float32], Tensor[(16, 12, 8), bool], Tensor[(64, 24), float32], Tensor[(26), float32]) {
    %199 = cast(%var_4246, dtype="bool") /* ty=Tensor[(7, 1, 2), bool] */;
    %200 = cast(%var_4247, dtype="bool") /* ty=Tensor[(7, 3, 2), bool] */;
    %201 = cast(%var_4246, dtype="float64") /* ty=Tensor[(7, 1, 2), float64] */;
    %202 = cast(%var_4247, dtype="float64") /* ty=Tensor[(7, 3, 2), float64] */;
    %203 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
    %204 = cast(%var_4246, dtype="float32") /* ty=Tensor[(7, 1, 2), float32] */;
    %205 = cast(%var_4294, dtype="float32") /* ty=Tensor[(64, 24), float32] */;
    %206 = cast(%var_4295, dtype="float32") /* ty=Tensor[(26), float32] */;
    %207 = reshape(%205, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), float32] */;
    %208 = reshape(%206, newshape=[26, 1]) /* ty=Tensor[(26, 1), float32] */;
    %209 = @func_2317(%207, %208) /* ty=(Tensor[(1, 2, 13), float32], Tensor[(26, 1), float32], Tensor[(16, 12, 8), bool]) */;
    %210 = logical_and(%199, %200) /* ty=Tensor[(7, 3, 2), bool] */;
    %211 = divide(%201, %202) /* ty=Tensor[(7, 3, 2), float64] */;
    %212 = %203.1;
    %213 = log2(%204) /* ty=Tensor[(7, 1, 2), float32] */;
    %214 = %209.2;
    (%210, %211, %212, %213, %214, %var_4294, %var_4295)
  };
  %215(%var_4312, %var_4313, %var_4314, %var_4315) /* ty=(Tensor[(7, 3, 2), bool], Tensor[(7, 3, 2), float64], Tensor[(2, 7, 5), float64], Tensor[(7, 1, 2), float32], Tensor[(16, 12, 8), bool], Tensor[(64, 24), float32], Tensor[(26), float32]) */
}

def @func_2587(%var_2585: Tensor[(26), float32]) -> (Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(32, 48), float32], Tensor[(26), float32], Tensor[(2, 7, 5), float64]) {
  @func_2584(%var_2585) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(32, 48), float32], Tensor[(26), float32], Tensor[(2, 7, 5), float64]) */
}

def @func_7480(%var_7478: Tensor[(26), float32]) -> (Tensor[(7, 16, 15), float32], Tensor[(26), bool], Tensor[(2, 7, 5), float64]) {
  @func_7477(%var_7478) /* ty=(Tensor[(7, 16, 15), float32], Tensor[(26), bool], Tensor[(2, 7, 5), float64]) */
}

def @func_8235(%var_8228: float32) -> (Tensor[(240), int64], Tensor[(110, 15), float64], float32, Tensor[(2, 1024), float32]) {
  %216 = cast(%var_8228, dtype="float32") /* ty=float32 */;
  %217 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 1024), float32] */, dtype="float32") /* ty=Tensor[(2, 1024), float32] */;
  %218 = reshape(%216, newshape=[]) /* ty=float32 */;
  %219 = reshape(%217, newshape=[8, 16, 16]) /* ty=Tensor[(8, 16, 16), float32] */;
  %220 = @func_5391(%218, %219) /* ty=(Tensor[(8, 16, 16), bool], Tensor[(110, 15), int32], Tensor[(110, 15), float64], Tensor[(252), int32]) */;
  %221 = @func_3164() /* ty=Tensor[(240), int64] */;
  %222 = %220.2;
  (%221, %222, %var_8228, meta[relay.Constant][7] /* ty=Tensor[(2, 1024), float32] */)
}

def @func_7673() -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) {
  @func_7671() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */
}

def @func_2154() -> (Tensor[(2, 7, 5), float64],) {
  %225 = fn () -> (Tensor[(2, 7, 5), float64],) {
    %223 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 7, 5), float64] */, dtype="float64") /* ty=Tensor[(2, 7, 5), float64] */;
    %224 = cos(%223) /* ty=Tensor[(2, 7, 5), float64] */;
    (%224,)
  };
  %225() /* ty=(Tensor[(2, 7, 5), float64],) */
}

def @func_8195(%var_8193: Tensor[(2002), float64], %var_8194: Tensor[(120), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(13, 11, ?), float64], Tensor[(2002), float64], Tensor[(13, 11, ?), float64], Tensor[(120), int32]) {
  @func_8191(%var_8193, %var_8194) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(13, 11, ?), float64], Tensor[(2002), float64], Tensor[(13, 11, ?), float64], Tensor[(120), int32]) */
}

def @func_8455() -> (Tensor[(5, 6, 8), bool],) {
  @func_8453() /* ty=(Tensor[(5, 6, 8), bool],) */
}

def @func_3888() -> (Tensor[(2, 7, 5), float32],) {
  @func_3886() /* ty=(Tensor[(2, 7, 5), float32],) */
}

def @func_6229(%var_6227: Tensor[(1, 2002), float64]) -> (Tensor[(13, 11, ?), float64], Tensor[(6, 42), bool], Tensor[(1, 2002), float64], Tensor[(252), int32]) {
  @func_6226(%var_6227) /* ty=(Tensor[(13, 11, ?), float64], Tensor[(6, 42), bool], Tensor[(1, 2002), float64], Tensor[(252), int32]) */
}

def @func_5953() -> (Tensor[(?, 2, 13), float32],) {
  %232 = fn () -> (Tensor[(?, 2, 13), float32],) {
    %226 = @func_3451() /* ty=(Tensor[(?, 2, 13), bool],) */;
    %227 = %226.0;
    %228 = cast(%227, dtype="float32") /* ty=Tensor[(?, 2, 13), float32] */;
    %229 = asin(%228) /* ty=Tensor[(?, 2, 13), float32] */;
    %230 = cast(%229, dtype="float32") /* ty=Tensor[(?, 2, 13), float32] */;
    %231 = log(%230) /* ty=Tensor[(?, 2, 13), float32] */;
    (%231,)
  };
  %232() /* ty=(Tensor[(?, 2, 13), float32],) */
}

def @func_5589() -> (Tensor[(5, 6, 8), bool], Tensor[(5, 6, 8), float64]) {
  @func_5587() /* ty=(Tensor[(5, 6, 8), bool], Tensor[(5, 6, 8), float64]) */
}

def @func_3228() -> (Tensor[(2, 7, 5), float64],) {
  %234 = fn () -> (Tensor[(2, 7, 5), float64],) {
    %233 = @func_2899() /* ty=Tensor[(2, 7, 5), float64] */;
    (%233,)
  };
  %234() /* ty=(Tensor[(2, 7, 5), float64],) */
}

def @func_7080() -> Tensor[(2, 7, 5), uint64] {
  %236 = fn () -> Tensor[(2, 7, 5), uint64] {
    %235 = @func_6958() /* ty=(Tensor[(2, 7, 5), uint64],) */;
    %235.0
  };
  %236() /* ty=Tensor[(2, 7, 5), uint64] */
}

def @func_3976() -> (Tensor[(2, 7, 5), float32],) {
  %237 = @func_3886() /* ty=(Tensor[(2, 7, 5), float32],) */;
  %238 = %237.0;
  (%238,)
}

def @func_5354(%var_5352: Tensor[(2, 7, 5), float32]) -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(7, 16, 15), float64]) {
  @func_5351(%var_5352) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(7, 16, 15), float64]) */
}

def @func_9773() -> (Tensor[(2, 7, 5), float64], Tensor[(110, 15), float64]) {
  %239 = @func_2526() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(110, 15), float64]) */;
  %240 = %239.2;
  %241 = cast(%240, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %242 = acos(%241) /* ty=Tensor[(110, 15), float64] */;
  %243 = cast(%242, dtype="float32") /* ty=Tensor[(110, 15), float32] */;
  %244 = sinh(%243) /* ty=Tensor[(110, 15), float32] */;
  %245 = cast(%244, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %246 = @func_9664() /* ty=Tensor[(2, 7, 5), float64] */;
  %247 = sigmoid(%245) /* ty=Tensor[(110, 15), float64] */;
  (%246, %247)
}

def @func_4421() -> Tensor[(2, 7, 5), float32] {
  %249 = fn () -> Tensor[(2, 7, 5), float32] {
    %248 = @func_3976() /* ty=(Tensor[(2, 7, 5), float32],) */;
    %248.0
  };
  %249() /* ty=Tensor[(2, 7, 5), float32] */
}

def @func_3451() -> (Tensor[(?, 2, 13), bool],) {
  %250 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
  %251 = %250.2;
  (%251,)
}

def @func_1661(%var_1660: Tensor[(1, 2, 13), float32]) -> (Tensor[(1, 2, 13), float32],) {
  %254 = fn (%var_1655: Tensor[(1, 2, 13), float32]) -> (Tensor[(1, 2, 13), float32],) {
    %252 = cast(%var_1655, dtype="float32") /* ty=Tensor[(1, 2, 13), float32] */;
    %253 = log10(%252) /* ty=Tensor[(1, 2, 13), float32] */;
    (%253,)
  };
  %254(%var_1660) /* ty=(Tensor[(1, 2, 13), float32],) */
}

def @func_7110() -> Tensor[(2, 7, 5), float64] {
  %256 = fn () -> Tensor[(2, 7, 5), float64] {
    %255 = @func_3267() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
    %255.3
  };
  %256() /* ty=Tensor[(2, 7, 5), float64] */
}

def @func_9858(%var_9856: bool, %var_9857: Tensor[(4, 14, 1), bool]) -> (Tensor[(4, 14, 1), bool], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(252), int32], Tensor[(4, 14, 1), float32], Tensor[(4, 72), float32], Tensor[(288), int32], Tensor[(1536, 26), float32]) {
  %279 = fn (%var_9806: bool, %var_9807: Tensor[(4, 14, 1), bool]) -> (Tensor[(4, 14, 1), bool], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(252), int32], Tensor[(4, 14, 1), float32], Tensor[(4, 72), float32], Tensor[(288), int32], Tensor[(1536, 26), float32]) {
    %257 = cast(%var_9806, dtype="bool") /* ty=bool */;
    %258 = cast(%var_9807, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
    %259 = cast(meta[relay.Constant][9] /* ty=Tensor[(1536, 1), float32] */, dtype="float32") /* ty=Tensor[(1536, 1), float32] */;
    %260 = cast(meta[relay.Constant][10] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
    %261 = reshape(%259, newshape=[1, 1536]) /* ty=Tensor[(1, 1536), float32] */;
    %262 = reshape(%260, newshape=[26]) /* ty=Tensor[(26), float32] */;
    %263 = @func_3424(%261, %262) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(26, 1), float32], Tensor[(1, 1536), float32], Tensor[(26), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) */;
    %264 = cast(meta[relay.Constant][11] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
    %265 = reshape(%264, newshape=[252]) /* ty=Tensor[(252), int32] */;
    %266 = @func_2615(%265) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) */;
    %267 = cast(%var_9807, dtype="float32") /* ty=Tensor[(4, 14, 1), float32] */;
    %268 = cast(meta[relay.Constant][12] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
    %269 = reshape(%268, newshape=[4, 72]) /* ty=Tensor[(4, 72), int32] */;
    %270 = @func_3103(%269) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(4, 6, 12), int32], Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(4, 72), float32]) */;
    %271 = cast(meta[relay.Constant][10] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
    %272 = cast(meta[relay.Constant][9] /* ty=Tensor[(1536, 1), float32] */, dtype="float32") /* ty=Tensor[(1536, 1), float32] */;
    %273 = logical_and(%257, %258) /* ty=Tensor[(4, 14, 1), bool] */;
    %274 = %263.0;
    %275 = %266.0;
    %276 = log2(%267) /* ty=Tensor[(4, 14, 1), float32] */;
    %277 = %270.5;
    %278 = floor_divide(%271, %272) /* ty=Tensor[(1536, 26), float32] */;
    (%273, %274, %275, meta[relay.Constant][11] /* ty=Tensor[(252), int32] */, %276, %277, meta[relay.Constant][12] /* ty=Tensor[(288), int32] */, %278)
  };
  %279(%var_9856, %var_9857) /* ty=(Tensor[(4, 14, 1), bool], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(252), int32], Tensor[(4, 14, 1), float32], Tensor[(4, 72), float32], Tensor[(288), int32], Tensor[(1536, 26), float32]) */
}

def @func_666(%var_664: Tensor[(4, 6, 12), int32], %var_665: Tensor[(4, 6, 12), int32]) -> Tensor[(4, 6, 12), int32] {
  %284 = fn (%var_645: Tensor[(4, 6, 12), int32], %var_646: Tensor[(4, 6, 12), int32]) -> Tensor[(4, 6, 12), int32] {
    %280 = cast(%var_646, dtype="int32") /* ty=Tensor[(4, 6, 12), int32] */;
    %281 = shape_of(%var_645, dtype="int32") /* ty=Tensor[(3), int32] */;
    %282 = cast(%var_645, dtype="int32") /* ty=Tensor[(4, 6, 12), int32] */;
    %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    bitwise_or(%282, %283) /* ty=Tensor[(4, 6, 12), int32] */
  };
  %284(%var_664, %var_665) /* ty=Tensor[(4, 6, 12), int32] */
}

def @func_5464() -> (Tensor[(6, 14, 3), bool],) {
  %287 = fn () -> (Tensor[(6, 14, 3), bool],) {
    %285 = @func_2866() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(6, 14, 3), bool]) */;
    %286 = %285.1;
    (%286,)
  };
  %287() /* ty=(Tensor[(6, 14, 3), bool],) */
}

def @func_6514() -> (Tensor[(10, 9, 5), float64], Tensor[(10, 9, 5), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float32]) {
  @func_6512() /* ty=(Tensor[(10, 9, 5), float64], Tensor[(10, 9, 5), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float32]) */
}

def @func_3172() -> Tensor[(7, 16, 15), float64] {
  %288 = @func_2866() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(6, 14, 3), bool]) */;
  %288.0
}

def @func_7126() -> Tensor[(2, 7, 5), float32] {
  @func_7124() /* ty=Tensor[(2, 7, 5), float32] */
}

def @func_3105(%var_3104: Tensor[(4, 72), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(4, 6, 12), int32], Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(4, 72), float32]) {
  %307 = fn (%var_3069: Tensor[(4, 72), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(4, 6, 12), int32], Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(4, 72), float32]) {
    %289 = cast(%var_3069, dtype="int32") /* ty=Tensor[(4, 72), int32] */;
    %290 = cast(%var_3069, dtype="int32") /* ty=Tensor[(4, 72), int32] */;
    %291 = reshape(%289, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
    %292 = reshape(%290, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
    %293 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
    %294 = @func_2806() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) */;
    %295 = @func_2866() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(6, 14, 3), bool]) */;
    %296 = cast(%var_3069, dtype="float32") /* ty=Tensor[(4, 72), float32] */;
    %297 = sigmoid(%296) /* ty=Tensor[(4, 72), float32] */;
    %298 = cast(%297, dtype="float64") /* ty=Tensor[(4, 72), float64] */;
    %299 = acosh(%298) /* ty=Tensor[(4, 72), float64] */;
    %300 = cast(%299, dtype="float32") /* ty=Tensor[(4, 72), float32] */;
    %301 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
    %302 = @func_663(%291, %292) /* ty=Tensor[(4, 6, 12), int32] */;
    %303 = %293.1;
    %304 = %294.2;
    %305 = %295.0;
    %306 = acos(%300) /* ty=Tensor[(4, 72), float32] */;
    (%301, %302, %303, %304, %305, %306)
  };
  %307(%var_3104) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(4, 6, 12), int32], Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(4, 72), float32]) */
}

def @func_3679() -> Tensor[(13, 11, ?), float64] {
  %309 = fn () -> Tensor[(13, 11, ?), float64] {
    %308 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
    %308.4
  };
  %309() /* ty=Tensor[(13, 11, ?), float64] */
}

def @func_4225() -> Tensor[(2, 7, 5), bool] {
  %317 = fn () -> Tensor[(2, 7, 5), bool] {
    %310 = @func_3976() /* ty=(Tensor[(2, 7, 5), float32],) */;
    %311 = %310.0;
    %312 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
    %313 = cast(%312, dtype="bool") /* ty=Tensor[(2, 7, 5), bool] */;
    %314 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
    %315 = cast(%311, dtype="bool") /* ty=Tensor[(2, 7, 5), bool] */;
    %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%315, %316) /* ty=Tensor[(2, 7, 5), bool] */
  };
  %317() /* ty=Tensor[(2, 7, 5), bool] */
}

def @func_2828() -> Tensor[(240), int64] {
  @func_2826() /* ty=Tensor[(240), int64] */
}

def @func_8562() -> Tensor[(2, 7, 5), float64] {
  %318 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %318.0
}

def @func_5651() -> Tensor[(2, 7, 5), float64] {
  %319 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %319.0
}

def @func_8404(%var_8390: float32) -> (Tensor[(?, 2, 13), float64], Tensor[(252), int32], Tensor[(2048), bool], Tensor[(2, 7, 5), float64]) {
  %320 = @func_3876() /* ty=(Tensor[(?, 2, 13), float32],) */;
  %321 = %320.0;
  %322 = cast(%321, dtype="float64") /* ty=Tensor[(?, 2, 13), float64] */;
  %323 = cast(%var_8390, dtype="float32") /* ty=float32 */;
  %324 = cast(meta[relay.Constant][13] /* ty=Tensor[(2048), float32] */, dtype="float32") /* ty=Tensor[(2048), float32] */;
  %325 = reshape(%323, newshape=[]) /* ty=float32 */;
  %326 = reshape(%324, newshape=[8, 16, 16]) /* ty=Tensor[(8, 16, 16), float32] */;
  %327 = @func_5391(%325, %326) /* ty=(Tensor[(8, 16, 16), bool], Tensor[(110, 15), int32], Tensor[(110, 15), float64], Tensor[(252), int32]) */;
  %328 = cast(%var_8390, dtype="bool") /* ty=bool */;
  %329 = cast(meta[relay.Constant][13] /* ty=Tensor[(2048), float32] */, dtype="bool") /* ty=Tensor[(2048), bool] */;
  %330 = atan(%322) /* ty=Tensor[(?, 2, 13), float64] */;
  %331 = %327.3;
  %332 = less_equal(%328, %329) /* ty=Tensor[(2048), bool] */;
  %333 = @func_5651() /* ty=Tensor[(2, 7, 5), float64] */;
  (%330, %331, %332, %333)
}

def @func_8818(%var_8816: Tensor[(14, 2, 15), uint8], %var_8817: Tensor[(14, 2, 15), uint8]) -> (Tensor[(14, 2, 15), float64], Tensor[(14, 2, 15), float32]) {
  %343 = fn (%var_8780: Tensor[(14, 2, 15), uint8], %var_8781: Tensor[(14, 2, 15), uint8]) -> (Tensor[(14, 2, 15), float64], Tensor[(14, 2, 15), float32]) {
    %334 = cast(%var_8780, dtype="float64") /* ty=Tensor[(14, 2, 15), float64] */;
    %335 = cast(%var_8781, dtype="uint8") /* ty=Tensor[(14, 2, 15), uint8] */;
    %336 = shape_of(%var_8780, dtype="int32") /* ty=Tensor[(3), int32] */;
    %337 = cast(%var_8780, dtype="uint8") /* ty=Tensor[(14, 2, 15), uint8] */;
    %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %339 = multiply(%337, %338) /* ty=Tensor[(14, 2, 15), uint8] */;
    %340 = cast(%339, dtype="float32") /* ty=Tensor[(14, 2, 15), float32] */;
    %341 = erf(%334) /* ty=Tensor[(14, 2, 15), float64] */;
    %342 = asin(%340) /* ty=Tensor[(14, 2, 15), float32] */;
    (%341, %342)
  };
  %343(%var_8816, %var_8817) /* ty=(Tensor[(14, 2, 15), float64], Tensor[(14, 2, 15), float32]) */
}

def @func_9266() -> (Tensor[(5, 6, 8), bool],) {
  %346 = fn () -> (Tensor[(5, 6, 8), bool],) {
    %344 = @func_8637() /* ty=(Tensor[(5, 6, 8), bool], Tensor[(2, 7, 5), float32]) */;
    %345 = %344.0;
    (%345,)
  };
  %346() /* ty=(Tensor[(5, 6, 8), bool],) */
}

def @func_7396() -> (Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float32], Tensor[(?, 2, 13), bool], Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(1536), float32]) {
  %347 = @func_5971() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %348 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
  %349 = cast(meta[relay.Constant][14] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %350 = %348.2;
  %351 = cast(%350, dtype="float32") /* ty=Tensor[(?, 2, 13), float32] */;
  %352 = reshape(%349, newshape=[1536]) /* ty=Tensor[(1536), float32] */;
  %353 = reshape(%351, newshape=[26]) /* ty=Tensor[(26), float32] */;
  %354 = @func_6912(%352, %353) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(1536), float32], Tensor[(26), float32]) */;
  %355 = @func_4420() /* ty=Tensor[(2, 7, 5), float32] */;
  %356 = %347.0;
  %357 = @func_4923() /* ty=Tensor[(2, 7, 5), float32] */;
  %358 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
  %359 = %354.2;
  (%355, %356, %357, %350, %358, %359, meta[relay.Constant][14] /* ty=Tensor[(1536), float32] */)
}

def @func_4683(%var_4681: Tensor[(288), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(288), int32], Tensor[(4, 6, 12), float32], Tensor[(240), int64], Tensor[(13, 11, ?), float64], Tensor[(4, 6, 12), int32]) {
  @func_4680(%var_4681) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(288), int32], Tensor[(4, 6, 12), float32], Tensor[(240), int64], Tensor[(13, 11, ?), float64], Tensor[(4, 6, 12), int32]) */
}

def @func_4590(%var_4451: Tensor[(2, 7, 5), bool], %var_4466: Tensor[(120), int32]) -> (Tensor[(12, 5, 2), uint64], Tensor[(120), int32], Tensor[(143, 1), int16], Tensor[(2, 7, 5), uint32], Tensor[(?, 2, 13), float32], Tensor[(13, 11, ?), float64], Tensor[(2, 7, 5), float32], Tensor[(240), int64]) {
  %360 = cast(%var_4466, dtype="int32") /* ty=Tensor[(120), int32] */;
  %361 = cast(%var_4466, dtype="int32") /* ty=Tensor[(120), int32] */;
  %362 = cast(meta[relay.Constant][15] /* ty=Tensor[(143, 1), int16] */, dtype="int16") /* ty=Tensor[(143, 1), int16] */;
  %363 = reshape(%360, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), int32] */;
  %364 = reshape(%361, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), int32] */;
  %365 = reshape(%362, newshape=[143]) /* ty=Tensor[(143), int16] */;
  %366 = @func_3769(%363, %364, %365) /* ty=(Tensor[(12, 5, 2), int32], Tensor[(12, 5, 2), uint64], Tensor[(?, 2, 13), bool], Tensor[(13, 11, ?), bool], Tensor[(143), int16], Tensor[(6, 14, 3), bool], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float64], Tensor[(1536), float32]) */;
  %367 = @func_4224() /* ty=Tensor[(2, 7, 5), bool] */;
  %368 = cast(%var_4451, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%367, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %372 = mod(%370, %371) /* ty=Tensor[(2, 7, 5), float32] */;
  %373 = cast(%372, dtype="uint32") /* ty=Tensor[(2, 7, 5), uint32] */;
  %374 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%367, dtype="uint32") /* ty=Tensor[(2, 7, 5), uint32] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %377 = @func_3876() /* ty=(Tensor[(?, 2, 13), float32],) */;
  %378 = cast(meta[relay.Constant][15] /* ty=Tensor[(143, 1), int16] */, dtype="int16") /* ty=Tensor[(143, 1), int16] */;
  %379 = reshape(%378, newshape=[13, 11, 1]) /* ty=Tensor[(13, 11, 1), int16] */;
  %380 = @func_192(%379) /* ty=(Tensor[(13, 11, ?), bool], Tensor[(13, 11, ?), float64]) */;
  %381 = cast(%var_4451, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %382 = %366.1;
  %383 = bitwise_xor(%375, %376) /* ty=Tensor[(2, 7, 5), uint32] */;
  %384 = %377.0;
  %385 = %380.1;
  %386 = sigmoid(%381) /* ty=Tensor[(2, 7, 5), float32] */;
  %387 = @func_3164() /* ty=Tensor[(240), int64] */;
  (%382, %var_4466, meta[relay.Constant][15] /* ty=Tensor[(143, 1), int16] */, %383, %384, %385, %386, %387)
}

def @func_7124() -> Tensor[(2, 7, 5), float32] {
  %388 = @func_3886() /* ty=(Tensor[(2, 7, 5), float32],) */;
  %388.0
}

def @func_6578(%var_6576: Tensor[(252), int32]) -> (Tensor[(2, 7, 5), bool], Tensor[(2, 7, 5), float32], Tensor[(4, 6, 12), int32], Tensor[(288), int32], Tensor[(7, 16, 15), float64], Tensor[(288), int32], Tensor[(2, 7, 5), float64], Tensor[(252), int32]) {
  %389 = @func_5611() /* ty=Tensor[(2, 7, 5), float64] */;
  %390 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 7, 5), float64] */, dtype="bool") /* ty=Tensor[(2, 7, 5), bool] */;
  %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%389, dtype="bool") /* ty=Tensor[(2, 7, 5), bool] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %394 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 7, 5), float64] */, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %395 = cast(meta[relay.Constant][17] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %396 = cast(meta[relay.Constant][17] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %397 = reshape(%395, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %398 = reshape(%396, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %399 = @func_6364() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(26), float32], Tensor[(26), float32], Tensor[(4, 72), float32], Tensor[(288), int32]) */;
  %400 = cast(%var_6576, dtype="int32") /* ty=Tensor[(252), int32] */;
  %401 = reshape(%400, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %402 = @func_2615(%401) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) */;
  %403 = logical_or(%392, %393) /* ty=Tensor[(2, 7, 5), bool] */;
  %404 = rsqrt(%394) /* ty=Tensor[(2, 7, 5), float32] */;
  %405 = @func_663(%397, %398) /* ty=Tensor[(4, 6, 12), int32] */;
  %406 = @func_3172() /* ty=Tensor[(7, 16, 15), float64] */;
  %407 = %399.4;
  %408 = %402.0;
  (%403, %404, %405, meta[relay.Constant][17] /* ty=Tensor[(288), int32] */, %406, %407, %408, %var_6576)
}

def @func_2868() -> (Tensor[(7, 16, 15), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(6, 14, 3), bool]) {
  @func_2866() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(6, 14, 3), bool]) */
}

def @func_6787(%var_6785: float32, %var_6786: Tensor[(32, 64), float32]) -> (Tensor[(7, 16, 15), float64], Tensor[(120), int32], Tensor[(143), int16], Tensor[(?, 2, 13), bool], Tensor[(252), int32], Tensor[(32, 64), bool], Tensor[(12, 5, 2), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) {
  %434 = fn (%var_6739: float32, %var_6740: Tensor[(32, 64), float32]) -> (Tensor[(7, 16, 15), float64], Tensor[(120), int32], Tensor[(143), int16], Tensor[(?, 2, 13), bool], Tensor[(252), int32], Tensor[(32, 64), bool], Tensor[(12, 5, 2), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) {
    %409 = @func_5289() /* ty=(Tensor[(7, 16, 15), float64],) */;
    %410 = @func_3451() /* ty=(Tensor[(?, 2, 13), bool],) */;
    %411 = cast(%var_6739, dtype="float32") /* ty=float32 */;
    %412 = cast(%var_6740, dtype="float32") /* ty=Tensor[(32, 64), float32] */;
    %413 = reshape(%411, newshape=[]) /* ty=float32 */;
    %414 = reshape(%412, newshape=[8, 16, 16]) /* ty=Tensor[(8, 16, 16), float32] */;
    %415 = @func_5391(%413, %414) /* ty=(Tensor[(8, 16, 16), bool], Tensor[(110, 15), int32], Tensor[(110, 15), float64], Tensor[(252), int32]) */;
    %416 = cast(%var_6739, dtype="bool") /* ty=bool */;
    %417 = cast(%var_6740, dtype="bool") /* ty=Tensor[(32, 64), bool] */;
    %418 = cast(meta[relay.Constant][18] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
    %419 = cast(meta[relay.Constant][18] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
    %420 = cast(meta[relay.Constant][19] /* ty=Tensor[(143), int16] */, dtype="int16") /* ty=Tensor[(143), int16] */;
    %421 = reshape(%418, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), int32] */;
    %422 = reshape(%419, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), int32] */;
    %423 = reshape(%420, newshape=[143]) /* ty=Tensor[(143), int16] */;
    %424 = @func_3769(%421, %422, %423) /* ty=(Tensor[(12, 5, 2), int32], Tensor[(12, 5, 2), uint64], Tensor[(?, 2, 13), bool], Tensor[(13, 11, ?), bool], Tensor[(143), int16], Tensor[(6, 14, 3), bool], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float64], Tensor[(1536), float32]) */;
    %425 = %424.0;
    %426 = cast(%425, dtype="float32") /* ty=Tensor[(12, 5, 2), float32] */;
    %427 = %409.0;
    %428 = %410.0;
    %429 = %415.3;
    %430 = less_equal(%416, %417) /* ty=Tensor[(32, 64), bool] */;
    %431 = sqrt(%426) /* ty=Tensor[(12, 5, 2), float32] */;
    %432 = @func_3172() /* ty=Tensor[(7, 16, 15), float64] */;
    %433 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
    (%427, meta[relay.Constant][18] /* ty=Tensor[(120), int32] */, meta[relay.Constant][19] /* ty=Tensor[(143), int16] */, %428, %429, %430, %431, %432, %433)
  };
  %434(%var_6785, %var_6786) /* ty=(Tensor[(7, 16, 15), float64], Tensor[(120), int32], Tensor[(143), int16], Tensor[(?, 2, 13), bool], Tensor[(252), int32], Tensor[(32, 64), bool], Tensor[(12, 5, 2), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) */
}

def @func_5612() -> Tensor[(2, 7, 5), float64] {
  %436 = fn () -> Tensor[(2, 7, 5), float64] {
    %435 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
    %435.0
  };
  %436() /* ty=Tensor[(2, 7, 5), float64] */
}

def @func_8917() -> (Tensor[(5, 6, 8), float64],) {
  @func_8915() /* ty=(Tensor[(5, 6, 8), float64],) */
}

def @func_2751(%var_2711: Tensor[(252), int32], %var_2715: Tensor[(2, 7, 5), float64], %var_2735: Tensor[(2, 7, 5), float32]) -> (Tensor[(252), int32], Tensor[(252), int32], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64]) {
  %437 = cast(%var_2711, dtype="int32") /* ty=Tensor[(252), int32] */;
  %438 = reshape(%437, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %439 = @func_2615(%438) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) */;
  %440 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %441 = %440.0;
  %442 = cast(%var_2715, dtype="int64") /* ty=Tensor[(2, 7, 5), int64] */;
  %443 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%441, dtype="int64") /* ty=Tensor[(2, 7, 5), int64] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %446 = cast(%var_2715, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %447 = atanh(%446) /* ty=Tensor[(2, 7, 5), float32] */;
  %448 = cast(%447, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %449 = cast(%var_2735, dtype="float64") /* ty=Tensor[(2, 7, 5), float64] */;
  %450 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%447, dtype="float64") /* ty=Tensor[(2, 7, 5), float64] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %453 = %439.2;
  %454 = right_shift(%444, %445) /* ty=Tensor[(2, 7, 5), int64] */;
  %455 = asin(%448) /* ty=Tensor[(2, 7, 5), float32] */;
  %456 = floor_mod(%451, %452) /* ty=Tensor[(2, 7, 5), float64] */;
  (%453, %var_2711, %454, %455, %456)
}

def @func_8113() -> (Tensor[(15, 10, 11), float64],) {
  @func_8111() /* ty=(Tensor[(15, 10, 11), float64],) */
}

def @func_9521() -> (Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64]) {
  @func_9519() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64]) */
}

def @func_7218() -> (Tensor[(2, 7, 5), float64],) {
  %457 = @func_5651() /* ty=Tensor[(2, 7, 5), float64] */;
  (%457,)
}

def @func_3773(%var_3770: Tensor[(12, 5, 2), int32], %var_3771: Tensor[(12, 5, 2), int32], %var_3772: Tensor[(143), int16]) -> (Tensor[(12, 5, 2), int32], Tensor[(12, 5, 2), uint64], Tensor[(?, 2, 13), bool], Tensor[(13, 11, ?), bool], Tensor[(143), int16], Tensor[(6, 14, 3), bool], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float64], Tensor[(1536), float32]) {
  %490 = fn (%var_3698: Tensor[(12, 5, 2), int32], %var_3699: Tensor[(12, 5, 2), int32], %var_3730: Tensor[(143), int16]) -> (Tensor[(12, 5, 2), int32], Tensor[(12, 5, 2), uint64], Tensor[(?, 2, 13), bool], Tensor[(13, 11, ?), bool], Tensor[(143), int16], Tensor[(6, 14, 3), bool], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float64], Tensor[(1536), float32]) {
    %458 = cast(%var_3699, dtype="int32") /* ty=Tensor[(12, 5, 2), int32] */;
    %459 = shape_of(%var_3698, dtype="int32") /* ty=Tensor[(3), int32] */;
    %460 = cast(%var_3698, dtype="int32") /* ty=Tensor[(12, 5, 2), int32] */;
    %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %462 = cast(%var_3699, dtype="uint64") /* ty=Tensor[(12, 5, 2), uint64] */;
    %463 = shape_of(%var_3698, dtype="int32") /* ty=Tensor[(3), int32] */;
    %464 = cast(%var_3698, dtype="uint64") /* ty=Tensor[(12, 5, 2), uint64] */;
    %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %466 = @func_3451() /* ty=(Tensor[(?, 2, 13), bool],) */;
    %467 = cast(%var_3730, dtype="int16") /* ty=Tensor[(143), int16] */;
    %468 = reshape(%467, newshape=[13, 11, 1]) /* ty=Tensor[(13, 11, 1), int16] */;
    %469 = @func_192(%468) /* ty=(Tensor[(13, 11, ?), bool], Tensor[(13, 11, ?), float64]) */;
    %470 = @func_2866() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(6, 14, 3), bool]) */;
    %471 = @func_3227() /* ty=(Tensor[(2, 7, 5), float64],) */;
    %472 = %471.0;
    %473 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
    %474 = cast(%473, dtype="int64") /* ty=Tensor[(2, 7, 5), int64] */;
    %475 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
    %476 = cast(%472, dtype="int64") /* ty=Tensor[(2, 7, 5), int64] */;
    %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %478 = cast(meta[relay.Constant][20] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
    %479 = %466.0;
    %480 = cast(%479, dtype="float32") /* ty=Tensor[(?, 2, 13), float32] */;
    %481 = reshape(%478, newshape=[1, 1536]) /* ty=Tensor[(1, 1536), float32] */;
    %482 = reshape(%480, newshape=[26]) /* ty=Tensor[(26), float32] */;
    %483 = @func_3424(%481, %482) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(26, 1), float32], Tensor[(1, 1536), float32], Tensor[(26), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) */;
    %484 = right_shift(%460, %461) /* ty=Tensor[(12, 5, 2), int32] */;
    %485 = logical_xor(%464, %465) /* ty=Tensor[(12, 5, 2), uint64] */;
    %486 = %469.0;
    %487 = %470.3;
    %488 = logical_xor(%476, %477) /* ty=Tensor[(2, 7, 5), int64] */;
    %489 = %483.0;
    (%484, %485, %479, %486, %var_3730, %487, %488, %489, meta[relay.Constant][20] /* ty=Tensor[(1536), float32] */)
  };
  %490(%var_3770, %var_3771, %var_3772) /* ty=(Tensor[(12, 5, 2), int32], Tensor[(12, 5, 2), uint64], Tensor[(?, 2, 13), bool], Tensor[(13, 11, ?), bool], Tensor[(143), int16], Tensor[(6, 14, 3), bool], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float64], Tensor[(1536), float32]) */
}

def @func_7281() -> (Tensor[(8, 5, 9), uint32], Tensor[(8, 5, 9), float32], Tensor[(2, 7, 5), float64], Tensor[(7, 16, 15), float64]) {
  %491 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 5, 9), uint32] */, dtype="uint32") /* ty=Tensor[(8, 5, 9), uint32] */;
  %492 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(8, 5, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 5, 9), uint32] */, dtype="uint32") /* ty=Tensor[(8, 5, 9), uint32] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %495 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 5, 9), uint32] */, dtype="float32") /* ty=Tensor[(8, 5, 9), float32] */;
  %496 = @func_5289() /* ty=(Tensor[(7, 16, 15), float64],) */;
  %497 = bitwise_and(%493, %494) /* ty=Tensor[(8, 5, 9), uint32] */;
  %498 = rsqrt(%495) /* ty=Tensor[(8, 5, 9), float32] */;
  %499 = @func_5651() /* ty=Tensor[(2, 7, 5), float64] */;
  %500 = %496.0;
  (%497, %498, %499, %500)
}

def @func_9694(%var_9680: Tensor[(12, 12, 6), float64]) -> Tensor[(12, 12, 6), float64] {
  %501 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(12, 12, 6), float64] */;
  %502 = shape_of(%var_9680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%var_9680, dtype="float64") /* ty=Tensor[(12, 12, 6), float64] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%503, %504) /* ty=Tensor[(12, 12, 6), float64] */
}

def @func_4175(%var_4125: Tensor[(7, 14, 13), float64], %var_4168: Tensor[(1650), float64]) -> (Tensor[(7, 14, 13), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(1650), float64]) {
  %505 = cast(%var_4125, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
  %506 = @func_3876() /* ty=(Tensor[(?, 2, 13), float32],) */;
  %507 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %508 = @func_2965() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %509 = cast(%var_4168, dtype="float64") /* ty=Tensor[(1650), float64] */;
  %510 = reshape(%509, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), float64] */;
  %511 = log2(%505) /* ty=Tensor[(7, 14, 13), float64] */;
  %512 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
  %513 = %506.0;
  %514 = %507.0;
  %515 = %508.0;
  %516 = @func_2024(%510) /* ty=Tensor[(15, 10, 11), float64] */;
  (%511, %512, %513, %514, %515, %516, %var_4168)
}

def @func_6706(%var_6705: Tensor[(144, 2), int32]) -> (Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(144, 2), int32]) {
  %522 = fn (%var_6668: Tensor[(144, 2), int32]) -> (Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(144, 2), int32]) {
    %517 = cast(%var_6668, dtype="int32") /* ty=Tensor[(144, 2), int32] */;
    %518 = reshape(%517, newshape=[288]) /* ty=Tensor[(288), int32] */;
    %519 = @func_6412(%518) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(4, 72), float32], Tensor[(288), int32], Tensor[(2, 7, 5), float32], Tensor[(7, 16, 15), float64]) */;
    %520 = @func_3164() /* ty=Tensor[(240), int64] */;
    %521 = %519.5;
    (%520, %521, %var_6668)
  };
  %522(%var_6705) /* ty=(Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(144, 2), int32]) */
}

def @func_9889() -> (Tensor[(240), int64],) {
  @func_9887() /* ty=(Tensor[(240), int64],) */
}

def @func_2899() -> Tensor[(2, 7, 5), float64] {
  @func_2204() /* ty=Tensor[(2, 7, 5), float64] */
}

def @func_5775() -> (Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float32]) {
  @func_5773() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float32]) */
}

def @func_2382() -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) {
  %523 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
  %524 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
  (%523, %524)
}

def @func_2866() -> (Tensor[(7, 16, 15), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32], Tensor[(6, 14, 3), bool]) {
  %525 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 15), float64] */;
  %526 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(7, 16, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 15), float64] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %529 = cast(meta[relay.Constant][26] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %530 = reshape(%529, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %531 = @func_2615(%530) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) */;
  %532 = cast(meta[relay.Constant][26] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %533 = cast(meta[relay.Constant][26] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %534 = reshape(%532, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
  %535 = reshape(%533, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
  %536 = floor_divide(%527, %528) /* ty=Tensor[(7, 16, 15), float64] */;
  %537 = %531.1;
  %538 = @func_1115(%534, %535) /* ty=Tensor[(6, 14, 3), bool] */;
  (%536, %537, meta[relay.Constant][26] /* ty=Tensor[(252), int32] */, %538)
}

def @func_3926() -> (Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(2, 7, 5), float64]) {
  %545 = fn () -> (Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(2, 7, 5), float64]) {
    %539 = @func_3267() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
    %540 = @func_3451() /* ty=(Tensor[(?, 2, 13), bool],) */;
    %541 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
    %542 = %539.3;
    %543 = %540.0;
    %544 = %541.1;
    (%542, %543, %544)
  };
  %545() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(2, 7, 5), float64]) */
}

def @func_2826() -> Tensor[(240), int64] {
  %546 = @func_2806() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) */;
  %546.2
}

def @func_3886() -> (Tensor[(2, 7, 5), float32],) {
  %547 = @func_3267() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %548 = %547.0;
  (%548,)
}

def @func_6226(%var_6218: Tensor[(1, 2002), float64]) -> (Tensor[(13, 11, ?), float64], Tensor[(6, 42), bool], Tensor[(1, 2002), float64], Tensor[(252), int32]) {
  %549 = cast(%var_6218, dtype="float64") /* ty=Tensor[(1, 2002), float64] */;
  %550 = cast(meta[relay.Constant][27] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %551 = reshape(%549, newshape=[13, 11, 14]) /* ty=Tensor[(13, 11, 14), float64] */;
  %552 = reshape(%550, newshape=[6, 42]) /* ty=Tensor[(6, 42), int32] */;
  %553 = @func_5745(%551, %552) /* ty=(Tensor[(13, 11, 14), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float32], Tensor[(6, 42), bool]) */;
  %554 = @func_3678() /* ty=Tensor[(13, 11, ?), float64] */;
  %555 = %553.5;
  (%554, %555, %var_6218, meta[relay.Constant][27] /* ty=Tensor[(252), int32] */)
}

def @func_5395(%var_5393: float32, %var_5394: Tensor[(8, 16, 16), float32]) -> (Tensor[(8, 16, 16), bool], Tensor[(110, 15), int32], Tensor[(110, 15), float64], Tensor[(252), int32]) {
  @func_5391(%var_5393, %var_5394) /* ty=(Tensor[(8, 16, 16), bool], Tensor[(110, 15), int32], Tensor[(110, 15), float64], Tensor[(252), int32]) */
}

def @func_8111() -> (Tensor[(15, 10, 11), float64],) {
  %556 = @func_7604() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(15, 10, 11), float64], Tensor[(1650), float64], Tensor[(240), int64]) */;
  %557 = %556.1;
  (%557,)
}

def @func_3453() -> (Tensor[(?, 2, 13), bool],) {
  @func_3451() /* ty=(Tensor[(?, 2, 13), bool],) */
}

def @func_3877() -> (Tensor[(?, 2, 13), float32],) {
  %562 = fn () -> (Tensor[(?, 2, 13), float32],) {
    %558 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
    %559 = %558.2;
    %560 = cast(%559, dtype="float32") /* ty=Tensor[(?, 2, 13), float32] */;
    %561 = rsqrt(%560) /* ty=Tensor[(?, 2, 13), float32] */;
    (%561,)
  };
  %562() /* ty=(Tensor[(?, 2, 13), float32],) */
}

def @func_6366() -> (Tensor[(2, 7, 5), float64], Tensor[(26), float32], Tensor[(26), float32], Tensor[(4, 72), float32], Tensor[(288), int32]) {
  @func_6364() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(26), float32], Tensor[(26), float32], Tensor[(4, 72), float32], Tensor[(288), int32]) */
}

def @func_9697(%var_9695: Tensor[(12, 12, 6), float64]) -> Tensor[(12, 12, 6), float64] {
  @func_9694(%var_9695) /* ty=Tensor[(12, 12, 6), float64] */
}

def @func_8639() -> (Tensor[(5, 6, 8), bool], Tensor[(2, 7, 5), float32]) {
  @func_8637() /* ty=(Tensor[(5, 6, 8), bool], Tensor[(2, 7, 5), float32]) */
}

def @func_9887() -> (Tensor[(240), int64],) {
  %563 = @func_4391() /* ty=(Tensor[(240), int64], Tensor[(?, 2, 13), float32]) */;
  %564 = %563.0;
  (%564,)
}

def @func_8915() -> (Tensor[(5, 6, 8), float64],) {
  %565 = @func_5587() /* ty=(Tensor[(5, 6, 8), bool], Tensor[(5, 6, 8), float64]) */;
  %566 = %565.1;
  (%566,)
}

def @func_5351(%var_5338: Tensor[(2, 7, 5), float32]) -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(7, 16, 15), float64]) {
  %567 = @func_4923() /* ty=Tensor[(2, 7, 5), float32] */;
  %568 = cast(%var_5338, dtype="float64") /* ty=Tensor[(2, 7, 5), float64] */;
  %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%567, dtype="float64") /* ty=Tensor[(2, 7, 5), float64] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %572 = @func_5289() /* ty=(Tensor[(7, 16, 15), float64],) */;
  %573 = @func_2899() /* ty=Tensor[(2, 7, 5), float64] */;
  %574 = power(%570, %571) /* ty=Tensor[(2, 7, 5), float64] */;
  %575 = %572.0;
  (%573, %574, %575)
}

def @func_6846(%var_6817: Tensor[(1536), float32]) -> (Tensor[(5, 6, 8), float32], Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(1536), float32], Tensor[(26), float32], Tensor[(2, 7, 5), float64]) {
  %576 = @func_5773() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float32]) */;
  %577 = cast(%var_6817, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %578 = cast(meta[relay.Constant][28] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %579 = reshape(%577, newshape=[1, 1536]) /* ty=Tensor[(1, 1536), float32] */;
  %580 = reshape(%578, newshape=[26]) /* ty=Tensor[(26), float32] */;
  %581 = @func_3424(%579, %580) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(26, 1), float32], Tensor[(1, 1536), float32], Tensor[(26), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) */;
  %582 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %583 = %576.1;
  %584 = @func_3164() /* ty=Tensor[(240), int64] */;
  %585 = %581.4;
  %586 = %582.0;
  (%583, %584, %585, %var_6817, meta[relay.Constant][28] /* ty=Tensor[(26), float32] */, %586)
}

def @func_4081() -> (Tensor[(110, 15), float64], Tensor[(?, 2, 13), float32]) {
  %587 = @func_2526() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(110, 15), float64]) */;
  %588 = @func_3876() /* ty=(Tensor[(?, 2, 13), float32],) */;
  %589 = %587.2;
  %590 = %588.0;
  (%589, %590)
}

def @func_5587() -> (Tensor[(5, 6, 8), bool], Tensor[(5, 6, 8), float64]) {
  %591 = @func_2806() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) */;
  %592 = %591.1;
  %593 = cast(%592, dtype="int64") /* ty=Tensor[(5, 6, 8), int64] */;
  %594 = reshape(%593, newshape=[5, 6, 8]) /* ty=Tensor[(5, 6, 8), int64] */;
  %595 = @func_343(%594) /* ty=(Tensor[(5, 6, 8), int64], Tensor[(5, 6, 8), bool]) */;
  %596 = %595.0;
  %597 = cast(%596, dtype="float64") /* ty=Tensor[(5, 6, 8), float64] */;
  %598 = cos(%597) /* ty=Tensor[(5, 6, 8), float64] */;
  (%592, %598)
}

def @func_4368(%var_4367: Tensor[(252), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) {
  %606 = fn (%var_4340: Tensor[(252), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) {
    %599 = @func_2965() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
    %600 = cast(%var_4340, dtype="int32") /* ty=Tensor[(252), int32] */;
    %601 = cast(%var_4340, dtype="int32") /* ty=Tensor[(252), int32] */;
    %602 = reshape(%600, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
    %603 = reshape(%601, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
    %604 = %599.0;
    %605 = @func_1115(%602, %603) /* ty=Tensor[(6, 14, 3), bool] */;
    (%604, %605, %var_4340)
  };
  %606(%var_4367) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) */
}

def @func_5391(%var_5361: float32, %var_5362: Tensor[(8, 16, 16), float32]) -> (Tensor[(8, 16, 16), bool], Tensor[(110, 15), int32], Tensor[(110, 15), float64], Tensor[(252), int32]) {
  %607 = cast(%var_5361, dtype="bool") /* ty=bool */;
  %608 = cast(%var_5362, dtype="bool") /* ty=Tensor[(8, 16, 16), bool] */;
  %609 = cast(meta[relay.Constant][29] /* ty=Tensor[(110, 15), float64] */, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %610 = cast(meta[relay.Constant][30] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %611 = cast(meta[relay.Constant][29] /* ty=Tensor[(110, 15), float64] */, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %612 = reshape(%609, newshape=[110, 15]) /* ty=Tensor[(110, 15), float64] */;
  %613 = reshape(%610, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %614 = reshape(%611, newshape=[110, 15]) /* ty=Tensor[(110, 15), float64] */;
  %615 = @func_5066(%612, %613, %614) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(5, 6, 8), bool], Tensor[(252), int32], Tensor[(252), int32], Tensor[(110, 15), int16], Tensor[(110, 15), int16], Tensor[(110, 15), int32]) */;
  %616 = greater_equal(%607, %608) /* ty=Tensor[(8, 16, 16), bool] */;
  %617 = %615.7;
  (%616, %617, meta[relay.Constant][29] /* ty=Tensor[(110, 15), float64] */, meta[relay.Constant][30] /* ty=Tensor[(252), int32] */)
}

def @func_3428(%var_3426: Tensor[(1, 1536), float32], %var_3427: Tensor[(26), float32]) -> (Tensor[(2, 7, 5), float64], Tensor[(26, 1), float32], Tensor[(1, 1536), float32], Tensor[(26), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) {
  @func_3424(%var_3426, %var_3427) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(26, 1), float32], Tensor[(1, 1536), float32], Tensor[(26), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) */
}

def @func_1118(%var_1116: Tensor[(6, 14, 3), int32], %var_1117: Tensor[(6, 14, 3), int32]) -> Tensor[(6, 14, 3), bool] {
  %622 = fn (%var_1104: Tensor[(6, 14, 3), int32], %var_1105: Tensor[(6, 14, 3), int32]) -> Tensor[(6, 14, 3), bool] {
    %618 = cast(%var_1105, dtype="bool") /* ty=Tensor[(6, 14, 3), bool] */;
    %619 = shape_of(%var_1104, dtype="int32") /* ty=Tensor[(3), int32] */;
    %620 = cast(%var_1104, dtype="bool") /* ty=Tensor[(6, 14, 3), bool] */;
    %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%620, %621) /* ty=Tensor[(6, 14, 3), bool] */
  };
  %622(%var_1116, %var_1117) /* ty=Tensor[(6, 14, 3), bool] */
}

def @func_343(%var_319: Tensor[(5, 6, 8), int64]) -> (Tensor[(5, 6, 8), int64], Tensor[(5, 6, 8), bool]) {
  %623 = cast(2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %624 = cast(%var_319, dtype="int64") /* ty=Tensor[(5, 6, 8), int64] */;
  %625 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 6, 8), int64] */, dtype="bool") /* ty=Tensor[(5, 6, 8), bool] */;
  %626 = shape_of(%var_319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %627 = cast(%var_319, dtype="bool") /* ty=Tensor[(5, 6, 8), bool] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %629 = bitwise_and(%623, %624) /* ty=Tensor[(5, 6, 8), int64] */;
  %630 = logical_and(%627, %628) /* ty=Tensor[(5, 6, 8), bool] */;
  (%629, %630)
}

def @func_9610() -> (Tensor[(2, 7, 5), float64],) {
  @func_9608() /* ty=(Tensor[(2, 7, 5), float64],) */
}

def @func_2901() -> Tensor[(2, 7, 5), float64] {
  @func_2899() /* ty=Tensor[(2, 7, 5), float64] */
}

def @func_2170() -> Tensor[(2, 7, 5), float64] {
  %631 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %631.0
}

def @func_3424(%var_3397: Tensor[(1, 1536), float32], %var_3398: Tensor[(26), float32]) -> (Tensor[(2, 7, 5), float64], Tensor[(26, 1), float32], Tensor[(1, 1536), float32], Tensor[(26), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) {
  %632 = cast(%var_3397, dtype="float32") /* ty=Tensor[(1, 1536), float32] */;
  %633 = cast(%var_3398, dtype="float32") /* ty=Tensor[(26), float32] */;
  %634 = reshape(%632, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), float32] */;
  %635 = reshape(%633, newshape=[26, 1]) /* ty=Tensor[(26, 1), float32] */;
  %636 = @func_2317(%634, %635) /* ty=(Tensor[(1, 2, 13), float32], Tensor[(26, 1), float32], Tensor[(16, 12, 8), bool]) */;
  %637 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
  %638 = %636.1;
  %639 = @func_3172() /* ty=Tensor[(7, 16, 15), float64] */;
  %640 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
  (%637, %638, %var_3397, %var_3398, %639, %640)
}

def @func_7477(%var_7457: Tensor[(26), float32]) -> (Tensor[(7, 16, 15), float32], Tensor[(26), bool], Tensor[(2, 7, 5), float64]) {
  %641 = @func_5289() /* ty=(Tensor[(7, 16, 15), float64],) */;
  %642 = %641.0;
  %643 = cast(%642, dtype="float32") /* ty=Tensor[(7, 16, 15), float32] */;
  %644 = @func_6364() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(26), float32], Tensor[(26), float32], Tensor[(4, 72), float32], Tensor[(288), int32]) */;
  %645 = %644.1;
  %646 = cast(%var_7457, dtype="bool") /* ty=Tensor[(26), bool] */;
  %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(1), int32] */;
  %648 = cast(%645, dtype="bool") /* ty=Tensor[(26), bool] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?), bool] */;
  %650 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %651 = cos(%643) /* ty=Tensor[(7, 16, 15), float32] */;
  %652 = less(%648, %649) /* ty=Tensor[(26), bool] */;
  %653 = %650.0;
  (%651, %652, %653)
}

def @func_9595() -> (Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float64]) {
  %654 = @func_9241() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(14, 2, 15), float32], Tensor[(5, 84), uint8]) */;
  %655 = @func_8915() /* ty=(Tensor[(5, 6, 8), float64],) */;
  %656 = %654.0;
  %657 = %655.0;
  (%656, %657)
}

def @func_6581(%var_6579: Tensor[(252), int32]) -> (Tensor[(2, 7, 5), bool], Tensor[(2, 7, 5), float32], Tensor[(4, 6, 12), int32], Tensor[(288), int32], Tensor[(7, 16, 15), float64], Tensor[(288), int32], Tensor[(2, 7, 5), float64], Tensor[(252), int32]) {
  @func_6578(%var_6579) /* ty=(Tensor[(2, 7, 5), bool], Tensor[(2, 7, 5), float32], Tensor[(4, 6, 12), int32], Tensor[(288), int32], Tensor[(7, 16, 15), float64], Tensor[(288), int32], Tensor[(2, 7, 5), float64], Tensor[(252), int32]) */
}

def @func_9608() -> (Tensor[(2, 7, 5), float64],) {
  %658 = @func_7671() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %659 = %658.0;
  (%659,)
}

def @func_5653() -> Tensor[(2, 7, 5), float64] {
  @func_5651() /* ty=Tensor[(2, 7, 5), float64] */
}

def @func_346(%var_344: Tensor[(5, 6, 8), int64]) -> (Tensor[(5, 6, 8), int64], Tensor[(5, 6, 8), bool]) {
  @func_343(%var_344) /* ty=(Tensor[(5, 6, 8), int64], Tensor[(5, 6, 8), bool]) */
}

def @func_6312(%var_6288: Tensor[(252), int32], %var_6303: Tensor[(288), int32]) -> (Tensor[(2, 7, 5), float32], Tensor[(252), int32], Tensor[(6, 14, 3), float64], Tensor[(4, 6, 12), int32], Tensor[(288), int32]) {
  %660 = @func_6024() /* ty=(Tensor[(2, 7, 5), float32],) */;
  %661 = cast(%var_6288, dtype="int32") /* ty=Tensor[(252), int32] */;
  %662 = reshape(%661, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %663 = @func_4366(%662) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) */;
  %664 = %663.1;
  %665 = cast(%664, dtype="float64") /* ty=Tensor[(6, 14, 3), float64] */;
  %666 = cast(%var_6303, dtype="int32") /* ty=Tensor[(288), int32] */;
  %667 = cast(%var_6303, dtype="int32") /* ty=Tensor[(288), int32] */;
  %668 = reshape(%666, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %669 = reshape(%667, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %670 = %660.0;
  %671 = log2(%665) /* ty=Tensor[(6, 14, 3), float64] */;
  %672 = @func_663(%668, %669) /* ty=Tensor[(4, 6, 12), int32] */;
  (%670, %var_6288, %671, %672, %var_6303)
}

def @func_5748(%var_5746: Tensor[(13, 11, 14), float64], %var_5747: Tensor[(6, 42), int32]) -> (Tensor[(13, 11, 14), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float32], Tensor[(6, 42), bool]) {
  %694 = fn (%var_5686: Tensor[(13, 11, 14), float64], %var_5726: Tensor[(6, 42), int32]) -> (Tensor[(13, 11, 14), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float32], Tensor[(6, 42), bool]) {
    %673 = @func_3678() /* ty=Tensor[(13, 11, ?), float64] */;
    %674 = cast(%673, dtype="float32") /* ty=Tensor[(13, 11, ?), float32] */;
    %675 = cast(%var_5686, dtype="float32") /* ty=Tensor[(13, 11, 14), float32] */;
    %676 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
    %677 = @func_2965() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
    %678 = @func_2806() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) */;
    %679 = cast(%var_5726, dtype="int32") /* ty=Tensor[(6, 42), int32] */;
    %680 = cast(%var_5726, dtype="int32") /* ty=Tensor[(6, 42), int32] */;
    %681 = reshape(%679, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
    %682 = reshape(%680, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
    %683 = @func_1115(%681, %682) /* ty=Tensor[(6, 14, 3), bool] */;
    %684 = cast(%683, dtype="bool") /* ty=Tensor[(6, 14, 3), bool] */;
    %685 = shape_of(%var_5726, dtype="int32") /* ty=Tensor[(2), int32] */;
    %686 = cast(%var_5726, dtype="bool") /* ty=Tensor[(6, 42), bool] */;
    %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %688 = floor_mod(%674, %675) /* ty=Tensor[(13, 11, 14), float32] */;
    %689 = %676.1;
    %690 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
    %691 = %677.1;
    %692 = %678.0;
    %693 = not_equal(%686, %687) /* ty=Tensor[(6, 42), bool] */;
    (%688, %689, %690, %691, %692, %693)
  };
  %694(%var_5746, %var_5747) /* ty=(Tensor[(13, 11, 14), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float32], Tensor[(6, 42), bool]) */
}

def @func_7671() -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) {
  %695 = @func_3227() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %696 = @func_2784() /* ty=Tensor[(2, 7, 5), float64] */;
  %697 = %695.0;
  (%696, %697)
}

def @func_2966() -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) {
  %701 = fn () -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) {
    %698 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
    %699 = @func_2899() /* ty=Tensor[(2, 7, 5), float64] */;
    %700 = %698.0;
    (%699, %700)
  };
  %701() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */
}

def @func_7605() -> (Tensor[(7, 16, 15), float64], Tensor[(15, 10, 11), float64], Tensor[(1650), float64], Tensor[(240), int64]) {
  %709 = fn () -> (Tensor[(7, 16, 15), float64], Tensor[(15, 10, 11), float64], Tensor[(1650), float64], Tensor[(240), int64]) {
    %702 = @func_5289() /* ty=(Tensor[(7, 16, 15), float64],) */;
    %703 = cast(meta[relay.Constant][32] /* ty=Tensor[(1650), float64] */, dtype="float64") /* ty=Tensor[(1650), float64] */;
    %704 = reshape(%703, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), float64] */;
    %705 = @func_2806() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) */;
    %706 = %702.0;
    %707 = @func_2024(%704) /* ty=Tensor[(15, 10, 11), float64] */;
    %708 = %705.2;
    (%706, %707, meta[relay.Constant][32] /* ty=Tensor[(1650), float64] */, %708)
  };
  %709() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(15, 10, 11), float64], Tensor[(1650), float64], Tensor[(240), int64]) */
}

def @func_6415(%var_6413: Tensor[(288), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(4, 72), float32], Tensor[(288), int32], Tensor[(2, 7, 5), float32], Tensor[(7, 16, 15), float64]) {
  @func_6412(%var_6413) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(4, 72), float32], Tensor[(288), int32], Tensor[(2, 7, 5), float32], Tensor[(7, 16, 15), float64]) */
}

def @func_3165() -> Tensor[(240), int64] {
  %710 = fn () -> Tensor[(240), int64] {
    @func_2826() /* ty=Tensor[(240), int64] */
  };
  %710() /* ty=Tensor[(240), int64] */
}

def @func_5878(%var_5872: Tensor[(176), float32]) -> (Tensor[(5, 6, 8), float64], Tensor[(8, 2, 11), float32], Tensor[(176), float32]) {
  %711 = @func_5141() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(143), int16], Tensor[(240), int64], Tensor[(5, 6, 8), float32]) */;
  %712 = %711.3;
  %713 = cast(%712, dtype="float32") /* ty=Tensor[(5, 6, 8), float32] */;
  %714 = sqrt(%713) /* ty=Tensor[(5, 6, 8), float32] */;
  %715 = cast(%712, dtype="float64") /* ty=Tensor[(5, 6, 8), float64] */;
  %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%714, dtype="float64") /* ty=Tensor[(5, 6, 8), float64] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %719 = cast(%var_5872, dtype="float32") /* ty=Tensor[(176), float32] */;
  %720 = reshape(%719, newshape=[8, 2, 11]) /* ty=Tensor[(8, 2, 11), float32] */;
  %721 = @func_5433(%720) /* ty=(Tensor[(8, 2, 11), float32], Tensor[(7, 16, 15), float64]) */;
  %722 = floor_mod(%717, %718) /* ty=Tensor[(5, 6, 8), float64] */;
  %723 = %721.0;
  (%722, %723, %var_5872)
}

def @func_2027(%var_2025: Tensor[(15, 10, 11), float64]) -> Tensor[(15, 10, 11), float64] {
  @func_2024(%var_2025) /* ty=Tensor[(15, 10, 11), float64] */
}

def @func_7283() -> (Tensor[(8, 5, 9), uint32], Tensor[(8, 5, 9), float32], Tensor[(2, 7, 5), float64], Tensor[(7, 16, 15), float64]) {
  @func_7281() /* ty=(Tensor[(8, 5, 9), uint32], Tensor[(8, 5, 9), float32], Tensor[(2, 7, 5), float64], Tensor[(7, 16, 15), float64]) */
}

def @func_9010(%var_8978: Tensor[(16, 7, 9), bool]) -> (Tensor[(16, 7, 9), int16], Tensor[(4, 72), float32], Tensor[(288), int32], Tensor[(16, 7, 9), float32]) {
  %724 = cast(%var_8978, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
  %725 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(16, 7, 9), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 7, 9), bool] */, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %728 = logical_or(%726, %727) /* ty=Tensor[(16, 7, 9), bool] */;
  %729 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 7, 9), bool] */, dtype="int16") /* ty=Tensor[(16, 7, 9), int16] */;
  %730 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%728, dtype="int16") /* ty=Tensor[(16, 7, 9), int16] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %733 = cast(meta[relay.Constant][34] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %734 = reshape(%733, newshape=[4, 72]) /* ty=Tensor[(4, 72), int32] */;
  %735 = @func_3103(%734) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(4, 6, 12), int32], Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(4, 72), float32]) */;
  %736 = cast(%var_8978, dtype="float32") /* ty=Tensor[(16, 7, 9), float32] */;
  %737 = bitwise_or(%731, %732) /* ty=Tensor[(16, 7, 9), int16] */;
  %738 = %735.5;
  %739 = asinh(%736) /* ty=Tensor[(16, 7, 9), float32] */;
  (%737, %738, meta[relay.Constant][34] /* ty=Tensor[(288), int32] */, %739)
}

def @func_7986(%var_7902: int8, %var_7931: Tensor[(252), int32], %var_7960: Tensor[(16, 128), float32]) -> (Tensor[(2, 7, 5), float32], Tensor[(6, 14, 3), bool], Tensor[(9, 14, 252), bool], Tensor[(2, 7, 5), float32], Tensor[(110, 15), int32], Tensor[(16, 128), float32]) {
  %740 = @func_3976() /* ty=(Tensor[(2, 7, 5), float32],) */;
  %741 = cast(%var_7931, dtype="int32") /* ty=Tensor[(252), int32] */;
  %742 = reshape(%741, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %743 = @func_4366(%742) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) */;
  %744 = cast(%var_7902, dtype="bool") /* ty=bool */;
  %745 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 14, 1), int8] */, dtype="bool") /* ty=Tensor[(9, 14, 1), bool] */;
  %746 = equal(%744, %745) /* ty=Tensor[(9, 14, 1), bool] */;
  %747 = cast(%746, dtype="bool") /* ty=Tensor[(9, 14, 1), bool] */;
  %748 = cast(%var_7931, dtype="bool") /* ty=Tensor[(252), bool] */;
  %749 = @func_3886() /* ty=(Tensor[(2, 7, 5), float32],) */;
  %750 = cast(%var_7902, dtype="float32") /* ty=float32 */;
  %751 = cast(%var_7960, dtype="float32") /* ty=Tensor[(16, 128), float32] */;
  %752 = reshape(%750, newshape=[]) /* ty=float32 */;
  %753 = reshape(%751, newshape=[8, 16, 16]) /* ty=Tensor[(8, 16, 16), float32] */;
  %754 = @func_5391(%752, %753) /* ty=(Tensor[(8, 16, 16), bool], Tensor[(110, 15), int32], Tensor[(110, 15), float64], Tensor[(252), int32]) */;
  %755 = %740.0;
  %756 = %743.1;
  %757 = greater(%747, %748) /* ty=Tensor[(9, 14, 252), bool] */;
  %758 = %749.0;
  %759 = %754.1;
  (%755, %756, %757, %758, %759, %var_7960)
}

def @func_6026() -> (Tensor[(2, 7, 5), float32],) {
  @func_6024() /* ty=(Tensor[(2, 7, 5), float32],) */
}

def @func_2528() -> (Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(110, 15), float64]) {
  @func_2526() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(110, 15), float64]) */
}

def @func_7991(%var_7988: int8, %var_7989: Tensor[(252), int32], %var_7990: Tensor[(16, 128), float32]) -> (Tensor[(2, 7, 5), float32], Tensor[(6, 14, 3), bool], Tensor[(9, 14, 252), bool], Tensor[(2, 7, 5), float32], Tensor[(110, 15), int32], Tensor[(16, 128), float32]) {
  @func_7986(%var_7988, %var_7989, %var_7990) /* ty=(Tensor[(2, 7, 5), float32], Tensor[(6, 14, 3), bool], Tensor[(9, 14, 252), bool], Tensor[(2, 7, 5), float32], Tensor[(110, 15), int32], Tensor[(16, 128), float32]) */
}

def @func_2786() -> Tensor[(2, 7, 5), float64] {
  @func_2784() /* ty=Tensor[(2, 7, 5), float64] */
}

def @func_2205() -> Tensor[(2, 7, 5), float64] {
  %760 = fn () -> Tensor[(2, 7, 5), float64] {
    @func_2170() /* ty=Tensor[(2, 7, 5), float64] */
  };
  %760() /* ty=Tensor[(2, 7, 5), float64] */
}

def @func_4760(%var_4750: Tensor[(26), float32]) -> (Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(26), float32], Tensor[(13, 11, ?), float64]) {
  %761 = cast(%var_4750, dtype="float32") /* ty=Tensor[(26), float32] */;
  %762 = reshape(%761, newshape=[1, 2, 13]) /* ty=Tensor[(1, 2, 13), float32] */;
  %763 = @func_1659(%762) /* ty=(Tensor[(1, 2, 13), float32],) */;
  %764 = @func_4420() /* ty=Tensor[(2, 7, 5), float32] */;
  %765 = @func_2784() /* ty=Tensor[(2, 7, 5), float64] */;
  %766 = %763.0;
  %767 = @func_3678() /* ty=Tensor[(13, 11, ?), float64] */;
  (%764, %765, %766, %var_4750, %767)
}

def @func_4763(%var_4761: Tensor[(26), float32]) -> (Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(26), float32], Tensor[(13, 11, ?), float64]) {
  @func_4760(%var_4761) /* ty=(Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(26), float32], Tensor[(13, 11, ?), float64]) */
}

def @func_6364() -> (Tensor[(2, 7, 5), float64], Tensor[(26), float32], Tensor[(26), float32], Tensor[(4, 72), float32], Tensor[(288), int32]) {
  %768 = cast(meta[relay.Constant][36] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %769 = reshape(%768, newshape=[26]) /* ty=Tensor[(26), float32] */;
  %770 = @func_2584(%769) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(32, 48), float32], Tensor[(26), float32], Tensor[(2, 7, 5), float64]) */;
  %771 = cast(meta[relay.Constant][37] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %772 = reshape(%771, newshape=[4, 72]) /* ty=Tensor[(4, 72), int32] */;
  %773 = @func_3103(%772) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(4, 6, 12), int32], Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(4, 72), float32]) */;
  %774 = @func_5611() /* ty=Tensor[(2, 7, 5), float64] */;
  %775 = %770.3;
  %776 = %773.5;
  (%774, %775, meta[relay.Constant][36] /* ty=Tensor[(26), float32] */, %776, meta[relay.Constant][37] /* ty=Tensor[(288), int32] */)
}

def @func_4179(%var_4177: Tensor[(7, 14, 13), float64], %var_4178: Tensor[(1650), float64]) -> (Tensor[(7, 14, 13), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(1650), float64]) {
  @func_4175(%var_4177, %var_4178) /* ty=(Tensor[(7, 14, 13), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(1650), float64]) */
}

def @func_8407(%var_8405: float32) -> (Tensor[(?, 2, 13), float64], Tensor[(252), int32], Tensor[(2048), bool], Tensor[(2, 7, 5), float64]) {
  @func_8404(%var_8405) /* ty=(Tensor[(?, 2, 13), float64], Tensor[(252), int32], Tensor[(2048), bool], Tensor[(2, 7, 5), float64]) */
}

def @func_2784() -> Tensor[(2, 7, 5), float64] {
  %777 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %777.0
}

def @func_9242() -> (Tensor[(2, 7, 5), float64], Tensor[(14, 2, 15), float32], Tensor[(5, 84), uint8]) {
  %786 = fn () -> (Tensor[(2, 7, 5), float64], Tensor[(14, 2, 15), float32], Tensor[(5, 84), uint8]) {
    %778 = @func_8519() /* ty=(Tensor[(2, 7, 5), float64],) */;
    %779 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 84), uint8] */, dtype="uint8") /* ty=Tensor[(5, 84), uint8] */;
    %780 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 84), uint8] */, dtype="uint8") /* ty=Tensor[(5, 84), uint8] */;
    %781 = reshape(%779, newshape=[14, 2, 15]) /* ty=Tensor[(14, 2, 15), uint8] */;
    %782 = reshape(%780, newshape=[14, 2, 15]) /* ty=Tensor[(14, 2, 15), uint8] */;
    %783 = @func_8815(%781, %782) /* ty=(Tensor[(14, 2, 15), float64], Tensor[(14, 2, 15), float32]) */;
    %784 = %778.0;
    %785 = %783.1;
    (%784, %785, meta[relay.Constant][38] /* ty=Tensor[(5, 84), uint8] */)
  };
  %786() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(14, 2, 15), float32], Tensor[(5, 84), uint8]) */
}

def @func_9286(%var_9285: Tensor[(3, 14, 14), float32]) -> (Tensor[(3, 14, 14), float32], Tensor[(26, 1), float32], Tensor[(128, 12), float32], Tensor[(1, 26), float32], Tensor[(2, 7, 5), float64]) {
  %796 = fn (%var_9274: Tensor[(3, 14, 14), float32]) -> (Tensor[(3, 14, 14), float32], Tensor[(26, 1), float32], Tensor[(128, 12), float32], Tensor[(1, 26), float32], Tensor[(2, 7, 5), float64]) {
    %787 = cast(%var_9274, dtype="float32") /* ty=Tensor[(3, 14, 14), float32] */;
    %788 = cast(meta[relay.Constant][39] /* ty=Tensor[(128, 12), float32] */, dtype="float32") /* ty=Tensor[(128, 12), float32] */;
    %789 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 26), float32] */, dtype="float32") /* ty=Tensor[(1, 26), float32] */;
    %790 = reshape(%788, newshape=[1, 1536]) /* ty=Tensor[(1, 1536), float32] */;
    %791 = reshape(%789, newshape=[26]) /* ty=Tensor[(26), float32] */;
    %792 = @func_3424(%790, %791) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(26, 1), float32], Tensor[(1, 1536), float32], Tensor[(26), float32], Tensor[(7, 16, 15), float64], Tensor[(2, 7, 5), float64]) */;
    %793 = tan(%787) /* ty=Tensor[(3, 14, 14), float32] */;
    %794 = %792.1;
    %795 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
    (%793, %794, meta[relay.Constant][39] /* ty=Tensor[(128, 12), float32] */, meta[relay.Constant][40] /* ty=Tensor[(1, 26), float32] */, %795)
  };
  %796(%var_9285) /* ty=(Tensor[(3, 14, 14), float32], Tensor[(26, 1), float32], Tensor[(128, 12), float32], Tensor[(1, 26), float32], Tensor[(2, 7, 5), float64]) */
}

def @func_9998() -> (Tensor[(?, 2, 13), float32], Tensor[(15, 10, 11), float64]) {
  @func_9996() /* ty=(Tensor[(?, 2, 13), float32], Tensor[(15, 10, 11), float64]) */
}

def @func_3267() -> (Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) {
  %797 = @func_2806() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) */;
  %798 = @func_3227() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %799 = %797.0;
  %800 = @func_2899() /* ty=Tensor[(2, 7, 5), float64] */;
  %801 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
  %802 = %798.0;
  (%799, %800, %801, %802)
}

def @func_4392() -> (Tensor[(240), int64], Tensor[(?, 2, 13), float32]) {
  %806 = fn () -> (Tensor[(240), int64], Tensor[(?, 2, 13), float32]) {
    %803 = @func_4081() /* ty=(Tensor[(110, 15), float64], Tensor[(?, 2, 13), float32]) */;
    %804 = @func_2826() /* ty=Tensor[(240), int64] */;
    %805 = %803.1;
    (%804, %805)
  };
  %806() /* ty=(Tensor[(240), int64], Tensor[(?, 2, 13), float32]) */
}

def @func_3978() -> (Tensor[(2, 7, 5), float32],) {
  @func_3976() /* ty=(Tensor[(2, 7, 5), float32],) */
}

def @func_2756(%var_2753: Tensor[(252), int32], %var_2754: Tensor[(2, 7, 5), float64], %var_2755: Tensor[(2, 7, 5), float32]) -> (Tensor[(252), int32], Tensor[(252), int32], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64]) {
  @func_2751(%var_2753, %var_2754, %var_2755) /* ty=(Tensor[(252), int32], Tensor[(252), int32], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64]) */
}

def @func_6849(%var_6847: Tensor[(1536), float32]) -> (Tensor[(5, 6, 8), float32], Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(1536), float32], Tensor[(26), float32], Tensor[(2, 7, 5), float64]) {
  @func_6846(%var_6847) /* ty=(Tensor[(5, 6, 8), float32], Tensor[(240), int64], Tensor[(7, 16, 15), float64], Tensor[(1536), float32], Tensor[(26), float32], Tensor[(2, 7, 5), float64]) */
}

def @func_9775() -> (Tensor[(2, 7, 5), float64], Tensor[(110, 15), float64]) {
  @func_9773() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(110, 15), float64]) */
}

def @func_3579() -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(10, 9, 5), int64]) {
  %811 = fn () -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(10, 9, 5), int64]) {
    %807 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
    %808 = @func_2170() /* ty=Tensor[(2, 7, 5), float64] */;
    %809 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
    %810 = %807.3;
    (%808, %809, %810)
  };
  %811() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(10, 9, 5), int64]) */
}

def @func_8285() -> Tensor[(2, 7, 5), float64] {
  @func_8283() /* ty=Tensor[(2, 7, 5), float64] */
}

def @func_2172() -> Tensor[(2, 7, 5), float64] {
  @func_2170() /* ty=Tensor[(2, 7, 5), float64] */
}

def @func_2526() -> (Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(110, 15), float64]) {
  %812 = cast(meta[relay.Constant][41] /* ty=Tensor[(110, 15), float64] */, dtype="float64") /* ty=Tensor[(110, 15), float64] */;
  %813 = reshape(%812, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), float64] */;
  %814 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
  %815 = @func_2024(%813) /* ty=Tensor[(15, 10, 11), float64] */;
  (%814, %815, meta[relay.Constant][41] /* ty=Tensor[(110, 15), float64] */)
}

def @func_6959() -> (Tensor[(2, 7, 5), uint64],) {
  %823 = fn () -> (Tensor[(2, 7, 5), uint64],) {
    %816 = @func_3578() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(10, 9, 5), int64]) */;
    %817 = %816.0;
    %818 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 7, 5), float64] */, dtype="uint64") /* ty=Tensor[(2, 7, 5), uint64] */;
    %819 = shape_of(%817, dtype="int32") /* ty=Tensor[(3), int32] */;
    %820 = cast(%817, dtype="uint64") /* ty=Tensor[(2, 7, 5), uint64] */;
    %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %822 = subtract(%820, %821) /* ty=Tensor[(2, 7, 5), uint64] */;
    (%822,)
  };
  %823() /* ty=(Tensor[(2, 7, 5), uint64],) */
}

def @func_8761() -> (Tensor[(2, 7, 5), float64],) {
  @func_8759() /* ty=(Tensor[(2, 7, 5), float64],) */
}

def @func_9119(%var_9113: Tensor[(11, 182), float64]) -> (Tensor[(2, 7, 5), float32], Tensor[(13, 11, ?), float64], Tensor[(11, 182), float64]) {
  %824 = cast(%var_9113, dtype="float64") /* ty=Tensor[(11, 182), float64] */;
  %825 = reshape(%824, newshape=[1, 2002]) /* ty=Tensor[(1, 2002), float64] */;
  %826 = @func_6226(%825) /* ty=(Tensor[(13, 11, ?), float64], Tensor[(6, 42), bool], Tensor[(1, 2002), float64], Tensor[(252), int32]) */;
  %827 = @func_7124() /* ty=Tensor[(2, 7, 5), float32] */;
  %828 = %826.0;
  (%827, %828, %var_9113)
}

def @func_9911() -> (Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float64]) {
  @func_9909() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float64]) */
}

def @func_9665() -> Tensor[(2, 7, 5), float64] {
  %830 = fn () -> Tensor[(2, 7, 5), float64] {
    %829 = @func_7218() /* ty=(Tensor[(2, 7, 5), float64],) */;
    %829.0
  };
  %830() /* ty=Tensor[(2, 7, 5), float64] */
}

def @func_192(%var_129: Tensor[(13, 11, 1), int16]) -> (Tensor[(13, 11, ?), bool], Tensor[(13, 11, ?), float64]) {
  %831 = cast(meta[relay.Constant][43] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %832 = cast(%var_129, dtype="int16") /* ty=Tensor[(13, 11, 1), int16] */;
  %833 = left_shift(%831, %832) /* ty=Tensor[(13, 11, 1), int16] */;
  %834 = cast(%833, dtype="int16") /* ty=Tensor[(13, 11, 1), int16] */;
  %835 = shape_of(%var_129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%var_129, dtype="int16") /* ty=Tensor[(13, 11, 1), int16] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %838 = bitwise_or(%836, %837) /* ty=Tensor[(13, 11, ?), int16] */;
  %839 = cast(%833, dtype="bool") /* ty=Tensor[(13, 11, 1), bool] */;
  %840 = shape_of(%838, dtype="int32") /* ty=Tensor[(3), int32] */;
  %841 = cast(%838, dtype="bool") /* ty=Tensor[(13, 11, ?), bool] */;
  %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %843 = cast(%838, dtype="bool") /* ty=Tensor[(13, 11, ?), bool] */;
  %844 = shape_of(%var_129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %845 = cast(%var_129, dtype="bool") /* ty=Tensor[(13, 11, 1), bool] */;
  %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %847 = greater(%845, %846) /* ty=Tensor[(13, 11, ?), bool] */;
  %848 = cast(%847, dtype="float64") /* ty=Tensor[(13, 11, ?), float64] */;
  %849 = logical_and(%841, %842) /* ty=Tensor[(13, 11, ?), bool] */;
  %850 = asin(%848) /* ty=Tensor[(13, 11, ?), float64] */;
  (%849, %850)
}

def @func_2584(%var_2563: Tensor[(26), float32]) -> (Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(32, 48), float32], Tensor[(26), float32], Tensor[(2, 7, 5), float64]) {
  %851 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %852 = cast(meta[relay.Constant][44] /* ty=Tensor[(32, 48), float32] */, dtype="float32") /* ty=Tensor[(32, 48), float32] */;
  %853 = cast(%var_2563, dtype="float32") /* ty=Tensor[(26), float32] */;
  %854 = reshape(%852, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), float32] */;
  %855 = reshape(%853, newshape=[26, 1]) /* ty=Tensor[(26, 1), float32] */;
  %856 = @func_2317(%854, %855) /* ty=(Tensor[(1, 2, 13), float32], Tensor[(26, 1), float32], Tensor[(16, 12, 8), bool]) */;
  %857 = @func_2526() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(110, 15), float64]) */;
  %858 = %851.1;
  %859 = %856.0;
  %860 = %857.0;
  (%858, %859, meta[relay.Constant][44] /* ty=Tensor[(32, 48), float32] */, %var_2563, %860)
}

def @func_4680(%var_4616: Tensor[(288), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(288), int32], Tensor[(4, 6, 12), float32], Tensor[(240), int64], Tensor[(13, 11, ?), float64], Tensor[(4, 6, 12), int32]) {
  %861 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
  %862 = cast(%var_4616, dtype="int32") /* ty=Tensor[(288), int32] */;
  %863 = cast(%var_4616, dtype="int32") /* ty=Tensor[(288), int32] */;
  %864 = reshape(%862, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %865 = reshape(%863, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %866 = @func_663(%864, %865) /* ty=Tensor[(4, 6, 12), int32] */;
  %867 = cast(%866, dtype="float32") /* ty=Tensor[(4, 6, 12), float32] */;
  %868 = @func_4391() /* ty=(Tensor[(240), int64], Tensor[(?, 2, 13), float32]) */;
  %869 = log2(%867) /* ty=Tensor[(4, 6, 12), float32] */;
  %870 = cast(%869, dtype="int32") /* ty=Tensor[(4, 6, 12), int32] */;
  %871 = cast(%866, dtype="int32") /* ty=Tensor[(4, 6, 12), int32] */;
  %872 = reshape(%870, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %873 = reshape(%871, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), int32] */;
  %874 = %861.0;
  %875 = %868.0;
  %876 = @func_3678() /* ty=Tensor[(13, 11, ?), float64] */;
  %877 = @func_663(%872, %873) /* ty=Tensor[(4, 6, 12), int32] */;
  (%874, %var_4616, %869, %875, %876, %877)
}

def @func_6198(%var_6197: Tensor[(252), int32]) -> (Tensor[(15, 12, 5), bool], Tensor[(252), int32], Tensor[(70), float64], Tensor[(6, 14, 3), bool], Tensor[(6, 14, 3), bool], Tensor[(7, 16, 15), float64], Tensor[(110, 15), float64], Tensor[(2, 7, 5), float64], Tensor[(15, 12, 5), float32], Tensor[(6, 14, 3), bool], Tensor[(26), float32], Tensor[(26), float32], Tensor[(2, 7, 5), float32]) {
  %922 = fn (%var_6126: Tensor[(252), int32]) -> (Tensor[(15, 12, 5), bool], Tensor[(252), int32], Tensor[(70), float64], Tensor[(6, 14, 3), bool], Tensor[(6, 14, 3), bool], Tensor[(7, 16, 15), float64], Tensor[(110, 15), float64], Tensor[(2, 7, 5), float64], Tensor[(15, 12, 5), float32], Tensor[(6, 14, 3), bool], Tensor[(26), float32], Tensor[(26), float32], Tensor[(2, 7, 5), float32]) {
    %878 = cast(meta[relay.Constant][45] /* ty=Tensor[(15, 12, 5), float64] */, dtype="float64") /* ty=Tensor[(15, 12, 5), float64] */;
    %879 = exp(%878) /* ty=Tensor[(15, 12, 5), float64] */;
    %880 = cast(%879, dtype="bool") /* ty=Tensor[(15, 12, 5), bool] */;
    %881 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(15, 12, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %882 = cast(meta[relay.Constant][45] /* ty=Tensor[(15, 12, 5), float64] */, dtype="bool") /* ty=Tensor[(15, 12, 5), bool] */;
    %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %884 = cast(%var_6126, dtype="int32") /* ty=Tensor[(252), int32] */;
    %885 = cast(meta[relay.Constant][46] /* ty=Tensor[(70), float64] */, dtype="float64") /* ty=Tensor[(70), float64] */;
    %886 = cast(meta[relay.Constant][46] /* ty=Tensor[(70), float64] */, dtype="float32") /* ty=Tensor[(70), float32] */;
    %887 = reshape(%884, newshape=[252]) /* ty=Tensor[(252), int32] */;
    %888 = reshape(%885, newshape=[2, 7, 5]) /* ty=Tensor[(2, 7, 5), float64] */;
    %889 = reshape(%886, newshape=[2, 7, 5]) /* ty=Tensor[(2, 7, 5), float32] */;
    %890 = @func_2751(%887, %888, %889) /* ty=(Tensor[(252), int32], Tensor[(252), int32], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64]) */;
    %891 = cast(%var_6126, dtype="int32") /* ty=Tensor[(252), int32] */;
    %892 = %890.0;
    %893 = cast(%892, dtype="int32") /* ty=Tensor[(252), int32] */;
    %894 = reshape(%891, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
    %895 = reshape(%893, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
    %896 = @func_1115(%894, %895) /* ty=Tensor[(6, 14, 3), bool] */;
    %897 = cast(%var_6126, dtype="bool") /* ty=Tensor[(252), bool] */;
    %898 = shape_of(%896, dtype="int32") /* ty=Tensor[(3), int32] */;
    %899 = cast(%896, dtype="bool") /* ty=Tensor[(6, 14, 3), bool] */;
    %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %901 = cast(%var_6126, dtype="int32") /* ty=Tensor[(252), int32] */;
    %902 = cast(%896, dtype="int32") /* ty=Tensor[(6, 14, 3), int32] */;
    %903 = reshape(%901, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
    %904 = reshape(%902, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
    %905 = @func_4081() /* ty=(Tensor[(110, 15), float64], Tensor[(?, 2, 13), float32]) */;
    %906 = cast(%879, dtype="float32") /* ty=Tensor[(15, 12, 5), float32] */;
    %907 = @func_5463() /* ty=(Tensor[(6, 14, 3), bool],) */;
    %908 = cast(meta[relay.Constant][47] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
    %909 = reshape(%908, newshape=[26]) /* ty=Tensor[(26), float32] */;
    %910 = @func_2584(%909) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(32, 48), float32], Tensor[(26), float32], Tensor[(2, 7, 5), float64]) */;
    %911 = @func_3976() /* ty=(Tensor[(2, 7, 5), float32],) */;
    %912 = greater_equal(%882, %883) /* ty=Tensor[(15, 12, 5), bool] */;
    %913 = greater_equal(%899, %900) /* ty=Tensor[(6, 14, 3), bool] */;
    %914 = @func_1115(%903, %904) /* ty=Tensor[(6, 14, 3), bool] */;
    %915 = @func_3172() /* ty=Tensor[(7, 16, 15), float64] */;
    %916 = %905.0;
    %917 = @func_5611() /* ty=Tensor[(2, 7, 5), float64] */;
    %918 = sin(%906) /* ty=Tensor[(15, 12, 5), float32] */;
    %919 = %907.0;
    %920 = %910.3;
    %921 = %911.0;
    (%912, %892, meta[relay.Constant][46] /* ty=Tensor[(70), float64] */, %913, %914, %915, %916, %917, %918, %919, %920, meta[relay.Constant][47] /* ty=Tensor[(26), float32] */, %921)
  };
  %922(%var_6197) /* ty=(Tensor[(15, 12, 5), bool], Tensor[(252), int32], Tensor[(70), float64], Tensor[(6, 14, 3), bool], Tensor[(6, 14, 3), bool], Tensor[(7, 16, 15), float64], Tensor[(110, 15), float64], Tensor[(2, 7, 5), float64], Tensor[(15, 12, 5), float32], Tensor[(6, 14, 3), bool], Tensor[(26), float32], Tensor[(26), float32], Tensor[(2, 7, 5), float32]) */
}

def @func_9559(%var_9557: Tensor[(6, 3, 11), int16]) -> Tensor[(6, 3, 11), int16] {
  @func_9556(%var_9557) /* ty=Tensor[(6, 3, 11), int16] */
}

def @func_8102() -> (Tensor[(2, 7, 5), uint64], Tensor[(?, 2, 13), bool], Tensor[(7, 16, 15), float64], Tensor[(1536), float32], Tensor[(120), int32], Tensor[(13, 11), int16]) {
  %936 = fn () -> (Tensor[(2, 7, 5), uint64], Tensor[(?, 2, 13), bool], Tensor[(7, 16, 15), float64], Tensor[(1536), float32], Tensor[(120), int32], Tensor[(13, 11), int16]) {
    %923 = @func_6958() /* ty=(Tensor[(2, 7, 5), uint64],) */;
    %924 = @func_3451() /* ty=(Tensor[(?, 2, 13), bool],) */;
    %925 = cast(meta[relay.Constant][48] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
    %926 = cast(meta[relay.Constant][48] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
    %927 = cast(meta[relay.Constant][49] /* ty=Tensor[(13, 11), int16] */, dtype="int16") /* ty=Tensor[(13, 11), int16] */;
    %928 = reshape(%925, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), int32] */;
    %929 = reshape(%926, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), int32] */;
    %930 = reshape(%927, newshape=[143]) /* ty=Tensor[(143), int16] */;
    %931 = @func_3769(%928, %929, %930) /* ty=(Tensor[(12, 5, 2), int32], Tensor[(12, 5, 2), uint64], Tensor[(?, 2, 13), bool], Tensor[(13, 11, ?), bool], Tensor[(143), int16], Tensor[(6, 14, 3), bool], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float64], Tensor[(1536), float32]) */;
    %932 = %923.0;
    %933 = %924.0;
    %934 = @func_3172() /* ty=Tensor[(7, 16, 15), float64] */;
    %935 = %931.8;
    (%932, %933, %934, %935, meta[relay.Constant][48] /* ty=Tensor[(120), int32] */, meta[relay.Constant][49] /* ty=Tensor[(13, 11), int16] */)
  };
  %936() /* ty=(Tensor[(2, 7, 5), uint64], Tensor[(?, 2, 13), bool], Tensor[(7, 16, 15), float64], Tensor[(1536), float32], Tensor[(120), int32], Tensor[(13, 11), int16]) */
}

def @func_9122(%var_9120: Tensor[(11, 182), float64]) -> (Tensor[(2, 7, 5), float32], Tensor[(13, 11, ?), float64], Tensor[(11, 182), float64]) {
  @func_9119(%var_9120) /* ty=(Tensor[(2, 7, 5), float32], Tensor[(13, 11, ?), float64], Tensor[(11, 182), float64]) */
}

def @func_8283() -> Tensor[(2, 7, 5), float64] {
  @func_2899() /* ty=Tensor[(2, 7, 5), float64] */
}

def @func_5071(%var_5068: Tensor[(110, 15), float64], %var_5069: Tensor[(252), int32], %var_5070: Tensor[(110, 15), float64]) -> (Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(5, 6, 8), bool], Tensor[(252), int32], Tensor[(252), int32], Tensor[(110, 15), int16], Tensor[(110, 15), int16], Tensor[(110, 15), int32]) {
  @func_5066(%var_5068, %var_5069, %var_5070) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(240), int64], Tensor[(5, 6, 8), bool], Tensor[(252), int32], Tensor[(252), int32], Tensor[(110, 15), int16], Tensor[(110, 15), int16], Tensor[(110, 15), int32]) */
}

def @func_9064() -> (Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool]) {
  %937 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
  %938 = @func_3451() /* ty=(Tensor[(?, 2, 13), bool],) */;
  %939 = %937.1;
  %940 = %938.0;
  (%939, %940)
}

def @main(%var_10028: Tensor[(120), int32], %var_10029: Tensor[(143), int16], %var_10034: Tensor[(143), int16]) -> (Tensor[(2, 7, 5), float32], Tensor[(12, 5, 2), int32], Tensor[(120), int32], Tensor[(143), uint32]) {
  %941 = @func_4923() /* ty=Tensor[(2, 7, 5), float32] */;
  %942 = cast(%941, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %943 = cast(%var_10028, dtype="int32") /* ty=Tensor[(120), int32] */;
  %944 = cast(%var_10028, dtype="int32") /* ty=Tensor[(120), int32] */;
  %945 = cast(%var_10029, dtype="int16") /* ty=Tensor[(143), int16] */;
  %946 = reshape(%943, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), int32] */;
  %947 = reshape(%944, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), int32] */;
  %948 = reshape(%945, newshape=[143]) /* ty=Tensor[(143), int16] */;
  %949 = @func_3773(%946, %947, %948) /* ty=(Tensor[(12, 5, 2), int32], Tensor[(12, 5, 2), uint64], Tensor[(?, 2, 13), bool], Tensor[(13, 11, ?), bool], Tensor[(143), int16], Tensor[(6, 14, 3), bool], Tensor[(2, 7, 5), int64], Tensor[(2, 7, 5), float64], Tensor[(1536), float32]) */;
  %950 = cast(%var_10034, dtype="uint32") /* ty=Tensor[(143), uint32] */;
  %951 = shape_of(%var_10029, dtype="int32") /* ty=Tensor[(1), int32] */;
  %952 = cast(%var_10029, dtype="uint32") /* ty=Tensor[(143), uint32] */;
  %953 = dyn.reshape(%950, %951, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %954 = tan(%942) /* ty=Tensor[(2, 7, 5), float32] */;
  %955 = %949.0;
  %956 = minimum(%952, %953) /* ty=Tensor[(143), uint32] */;
  (%954, %955, %var_10028, %956)
}

def @func_7220() -> (Tensor[(2, 7, 5), float64],) {
  @func_7218() /* ty=(Tensor[(2, 7, 5), float64],) */
}

def @func_5142() -> (Tensor[(7, 16, 15), float64], Tensor[(143), int16], Tensor[(240), int64], Tensor[(5, 6, 8), float32]) {
  %968 = fn () -> (Tensor[(7, 16, 15), float64], Tensor[(143), int16], Tensor[(240), int64], Tensor[(5, 6, 8), float32]) {
    %957 = @func_2456() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */;
    %958 = @func_4391() /* ty=(Tensor[(240), int64], Tensor[(?, 2, 13), float32]) */;
    %959 = %958.0;
    %960 = cast(%959, dtype="int64") /* ty=Tensor[(240), int64] */;
    %961 = reshape(%960, newshape=[5, 6, 8]) /* ty=Tensor[(5, 6, 8), int64] */;
    %962 = @func_343(%961) /* ty=(Tensor[(5, 6, 8), int64], Tensor[(5, 6, 8), bool]) */;
    %963 = %962.1;
    %964 = cast(%963, dtype="float32") /* ty=Tensor[(5, 6, 8), float32] */;
    %965 = @func_3172() /* ty=Tensor[(7, 16, 15), float64] */;
    %966 = %957.5;
    %967 = erf(%964) /* ty=Tensor[(5, 6, 8), float32] */;
    (%965, %966, %959, %967)
  };
  %968() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(143), int16], Tensor[(240), int64], Tensor[(5, 6, 8), float32]) */
}

def @func_5435(%var_5434: Tensor[(8, 2, 11), float32]) -> (Tensor[(8, 2, 11), float32], Tensor[(7, 16, 15), float64]) {
  %972 = fn (%var_5397: Tensor[(8, 2, 11), float32]) -> (Tensor[(8, 2, 11), float32], Tensor[(7, 16, 15), float64]) {
    %969 = cast(%var_5397, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
    %970 = sinh(%969) /* ty=Tensor[(8, 2, 11), float32] */;
    %971 = @func_3172() /* ty=Tensor[(7, 16, 15), float64] */;
    (%970, %971)
  };
  %972(%var_5434) /* ty=(Tensor[(8, 2, 11), float32], Tensor[(7, 16, 15), float64]) */
}

def @func_2457() -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) {
  %999 = fn () -> (Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) {
    %973 = @func_2382() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
    %974 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
    %975 = cast(meta[relay.Constant][50] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
    %976 = reshape(%975, newshape=[1, 2, 13]) /* ty=Tensor[(1, 2, 13), float32] */;
    %977 = @func_1659(%976) /* ty=(Tensor[(1, 2, 13), float32],) */;
    %978 = %977.0;
    %979 = cast(meta[relay.Constant][50] /* ty=Tensor[(26), float32] */, dtype="bool") /* ty=Tensor[(26), bool] */;
    %980 = shape_of(%978, dtype="int32") /* ty=Tensor[(3), int32] */;
    %981 = cast(%978, dtype="bool") /* ty=Tensor[(1, 2, 13), bool] */;
    %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %983 = cast(meta[relay.Constant][51] /* ty=Tensor[(10, 9, 5), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
    %984 = sin(%983) /* ty=Tensor[(10, 9, 5), float32] */;
    %985 = cast(%984, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
    %986 = log2(%985) /* ty=Tensor[(10, 9, 5), float32] */;
    %987 = cast(%984, dtype="int64") /* ty=Tensor[(10, 9, 5), int64] */;
    %988 = shape_of(%986, dtype="int32") /* ty=Tensor[(3), int32] */;
    %989 = cast(%986, dtype="int64") /* ty=Tensor[(10, 9, 5), int64] */;
    %990 = dyn.reshape(%987, %988, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %991 = cast(meta[relay.Constant][52] /* ty=Tensor[(143), int16] */, dtype="int16") /* ty=Tensor[(143), int16] */;
    %992 = reshape(%991, newshape=[13, 11, 1]) /* ty=Tensor[(13, 11, 1), int16] */;
    %993 = @func_192(%992) /* ty=(Tensor[(13, 11, ?), bool], Tensor[(13, 11, ?), float64]) */;
    %994 = %973.0;
    %995 = %974.0;
    %996 = greater(%981, %982) /* ty=Tensor[(?, 2, 13), bool] */;
    %997 = bitwise_xor(%989, %990) /* ty=Tensor[(10, 9, 5), int64] */;
    %998 = %993.1;
    (%994, %995, %996, %997, %998, meta[relay.Constant][52] /* ty=Tensor[(143), int16] */)
  };
  %999() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(?, 2, 13), bool], Tensor[(10, 9, 5), int64], Tensor[(13, 11, ?), float64], Tensor[(143), int16]) */
}

def @func_8759() -> (Tensor[(2, 7, 5), float64],) {
  %1000 = @func_3267() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
  %1001 = %1000.1;
  (%1001,)
}

def @func_3174() -> Tensor[(7, 16, 15), float64] {
  @func_3172() /* ty=Tensor[(7, 16, 15), float64] */
}

def @func_8067(%var_8053: Tensor[(252), int32]) -> (Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float32], Tensor[(110, 15), int32], int8, Tensor[(252), int32], Tensor[(2048), float32], Tensor[(13, 11, ?), float64]) {
  %1002 = @func_2526() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(15, 10, 11), float64], Tensor[(110, 15), float64]) */;
  %1003 = %1002.0;
  %1004 = cast(%1003, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %1005 = cast(meta[relay.Constant][53] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %1006 = cast(%var_8053, dtype="int32") /* ty=Tensor[(252), int32] */;
  %1007 = cast(meta[relay.Constant][54] /* ty=Tensor[(2048), float32] */, dtype="float32") /* ty=Tensor[(2048), float32] */;
  %1008 = reshape(%1005, newshape=[]) /* ty=int8 */;
  %1009 = reshape(%1006, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %1010 = reshape(%1007, newshape=[16, 128]) /* ty=Tensor[(16, 128), float32] */;
  %1011 = @func_7986(%1008, %1009, %1010) /* ty=(Tensor[(2, 7, 5), float32], Tensor[(6, 14, 3), bool], Tensor[(9, 14, 252), bool], Tensor[(2, 7, 5), float32], Tensor[(110, 15), int32], Tensor[(16, 128), float32]) */;
  %1012 = @func_7124() /* ty=Tensor[(2, 7, 5), float32] */;
  %1013 = acos(%1004) /* ty=Tensor[(2, 7, 5), float32] */;
  %1014 = %1011.4;
  %1015 = @func_3678() /* ty=Tensor[(13, 11, ?), float64] */;
  (%1012, %1013, %1014, meta[relay.Constant][53] /* ty=int8 */, %var_8053, meta[relay.Constant][54] /* ty=Tensor[(2048), float32] */, %1015)
}

def @func_2617(%var_2616: Tensor[(252), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) {
  %1023 = fn (%var_2609: Tensor[(252), int32]) -> (Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) {
    %1016 = @func_2153() /* ty=(Tensor[(2, 7, 5), float64],) */;
    %1017 = cast(%var_2609, dtype="int32") /* ty=Tensor[(252), int32] */;
    %1018 = cast(%var_2609, dtype="int32") /* ty=Tensor[(252), int32] */;
    %1019 = reshape(%1017, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
    %1020 = reshape(%1018, newshape=[6, 14, 3]) /* ty=Tensor[(6, 14, 3), int32] */;
    %1021 = %1016.0;
    %1022 = @func_1115(%1019, %1020) /* ty=Tensor[(6, 14, 3), bool] */;
    (%1021, %1022, %var_2609)
  };
  %1023(%var_2616) /* ty=(Tensor[(2, 7, 5), float64], Tensor[(6, 14, 3), bool], Tensor[(252), int32]) */
}

def @func_2806() -> (Tensor[(2, 7, 5), float32], Tensor[(5, 6, 8), bool], Tensor[(240), int64]) {
  %1024 = @func_2204() /* ty=Tensor[(2, 7, 5), float64] */;
  %1025 = cast(%1024, dtype="float32") /* ty=Tensor[(2, 7, 5), float32] */;
  %1026 = cast(meta[relay.Constant][55] /* ty=Tensor[(240), int64] */, dtype="int64") /* ty=Tensor[(240), int64] */;
  %1027 = reshape(%1026, newshape=[5, 6, 8]) /* ty=Tensor[(5, 6, 8), int64] */;
  %1028 = @func_343(%1027) /* ty=(Tensor[(5, 6, 8), int64], Tensor[(5, 6, 8), bool]) */;
  %1029 = acosh(%1025) /* ty=Tensor[(2, 7, 5), float32] */;
  %1030 = %1028.1;
  (%1029, %1030, meta[relay.Constant][55] /* ty=Tensor[(240), int64] */)
}

def @func_8238(%var_8236: float32) -> (Tensor[(240), int64], Tensor[(110, 15), float64], float32, Tensor[(2, 1024), float32]) {
  @func_8235(%var_8236) /* ty=(Tensor[(240), int64], Tensor[(110, 15), float64], float32, Tensor[(2, 1024), float32]) */
}

def @func_7398() -> (Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float32], Tensor[(?, 2, 13), bool], Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(1536), float32]) {
  @func_7396() /* ty=(Tensor[(2, 7, 5), float32], Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float32], Tensor[(?, 2, 13), bool], Tensor[(2, 7, 5), float64], Tensor[(1, 2, 13), float32], Tensor[(1536), float32]) */
}

def @func_9410() -> (Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float32]) {
  %1035 = fn () -> (Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float32]) {
    %1031 = @func_2965() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(2, 7, 5), float64]) */;
    %1032 = @func_5141() /* ty=(Tensor[(7, 16, 15), float64], Tensor[(143), int16], Tensor[(240), int64], Tensor[(5, 6, 8), float32]) */;
    %1033 = %1031.1;
    %1034 = %1032.3;
    (%1033, %1034)
  };
  %1035() /* ty=(Tensor[(2, 7, 5), float64], Tensor[(5, 6, 8), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen656/build/output.py", line 2854, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:46:05] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

