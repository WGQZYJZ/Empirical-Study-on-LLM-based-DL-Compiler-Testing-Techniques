==========mod==========
#[version = "0.0.5"]
def @func_8583(%var_8572: Tensor[(192), float32]) -> (Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64], Tensor[(192), float32]) {
  %0 = cast(%var_8572, dtype="float32") /* ty=Tensor[(192), float32] */;
  %1 = cast(%var_8572, dtype="float32") /* ty=Tensor[(192), float32] */;
  %2 = cast(%var_8572, dtype="float32") /* ty=Tensor[(192), float32] */;
  %3 = reshape(%0, newshape=[24, 8]) /* ty=Tensor[(24, 8), float32] */;
  %4 = reshape(%1, newshape=[24, 8]) /* ty=Tensor[(24, 8), float32] */;
  %5 = reshape(%2, newshape=[24, 8]) /* ty=Tensor[(24, 8), float32] */;
  %6 = @func_7282(%3, %4, %5) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(24, 8), float64], Tensor[(24, 8), float64], Tensor[(24, 8), uint32], Tensor[(11, 7, 16), float64], Tensor[(24, 8), float64]) */;
  %7 = @func_3613() /* ty=Tensor[(13, 16, 6), float64] */;
  %8 = %6.4;
  (%7, %8, %var_8572)
}

def @func_8466() -> (Tensor[(9, 16, 13), uint64],) {
  %9 = @func_7957() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 13), uint64]) */;
  %10 = %9.1;
  (%10,)
}

def @func_773(%var_760: Tensor[(9, 16, 10), float64]) -> Tensor[(9, 16, 10), float64] {
  %11 = cast(%var_760, dtype="float64") /* ty=Tensor[(9, 16, 10), float64] */;
  %12 = sigmoid(%11) /* ty=Tensor[(9, 16, 10), float64] */;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(9, 16, 10), float64] */;
  tan(%13) /* ty=Tensor[(9, 16, 10), float64] */
}

def @func_3483(%var_3420: Tensor[(8, 4, 6), float32], %var_3425: Tensor[(1248), float64]) -> (Tensor[(8, 4, 6), float32], Tensor[(13, 16, 6), float64], Tensor[(1248), float64], Tensor[(11, 7, 16), float64], Tensor[(8, 4, 6), float32], Tensor[(13, 16, 6), uint64]) {
  %14 = cast(%var_3420, dtype="float32") /* ty=Tensor[(8, 4, 6), float32] */;
  %15 = cast(%var_3425, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %16 = reshape(%15, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), float64] */;
  %17 = @func_1229(%16) /* ty=(Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64]) */;
  %18 = cast(%var_3420, dtype="float32") /* ty=Tensor[(8, 4, 6), float32] */;
  %19 = @func_497() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %20 = sigmoid(%14) /* ty=Tensor[(8, 4, 6), float32] */;
  %21 = %17.0;
  %22 = @func_1544() /* ty=Tensor[(11, 7, 16), float64] */;
  %23 = sqrt(%18) /* ty=Tensor[(8, 4, 6), float32] */;
  %24 = %19.0;
  (%20, %21, %var_3425, %22, %23, %24)
}

def @func_6249(%var_6230: Tensor[(11, 7, 16), float64]) -> Tensor[(11, 7, 16), float64] {
  %25 = @func_1940() /* ty=(Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) */;
  %26 = %25.4;
  %27 = cast(%var_6230, dtype="uint16") /* ty=Tensor[(11, 7, 16), uint16] */;
  %28 = shape_of(%26, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%26, dtype="uint16") /* ty=Tensor[(11, 7, 16), uint16] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %31 = left_shift(%29, %30) /* ty=Tensor[(11, 7, 16), uint16] */;
  %32 = cast(%31, dtype="float64") /* ty=Tensor[(11, 7, 16), float64] */;
  sigmoid(%32) /* ty=Tensor[(11, 7, 16), float64] */
}

def @func_1192() -> (Tensor[(13, 16, 6), uint64],) {
  %33 = @func_1006() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%33,)
}

def @func_5349() -> (Tensor[(13, 16, 6), float64],) {
  %34 = @func_3293() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
  %35 = %34.1;
  (%35,)
}

def @func_4374() -> (Tensor[(13, 16, 6), uint64], Tensor[(24, 8), float32], Tensor[(192), float32], Tensor[(13, 16, 14), float32]) {
  %36 = @func_460() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %37 = cast(meta[relay.Constant][0] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %38 = reshape(%37, newshape=[24, 8]) /* ty=Tensor[(24, 8), float32] */;
  %39 = @func_3709(%38) /* ty=(Tensor[(8, 4, 6), float32], Tensor[(24, 8), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float32]) */;
  %40 = @func_4214() /* ty=(Tensor[(4, 14, 3), float32], Tensor[(13, 16, 14), float32], Tensor[(2912), float32], Tensor[(4, 14, 3), int64]) */;
  %41 = %36.1;
  %42 = %39.1;
  %43 = %40.1;
  (%41, %42, meta[relay.Constant][0] /* ty=Tensor[(192), float32] */, %43)
}

def @func_5857() -> Tensor[(13, 16, 6), uint64] {
  %44 = @func_2546() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %44.0
}

def @func_6999() -> (Tensor[(13, 16, 14), float64],) {
  %45 = @func_1940() /* ty=(Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) */;
  %46 = %45.0;
  (%46,)
}

def @func_7957() -> (Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 13), uint64]) {
  %47 = @func_324() /* ty=(Tensor[(9, 16, 13), uint64],) */;
  %48 = @func_2221() /* ty=Tensor[(13, 16, 6), uint64] */;
  %49 = %47.0;
  (%48, %49)
}

def @func_585() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %50 = @func_207() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %51 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  %52 = cast(%51, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
  %53 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %54 = @func_497() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %55 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %56 = %50.1;
  %57 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  %58 = sinh(%52) /* ty=Tensor[(13, 16, 6), float64] */;
  %59 = %53.0;
  %60 = %54.0;
  %61 = %55.0;
  %62 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%56, %57, %58, %59, %60, %61, %62)
}

def @func_7927(%var_7909: Tensor[(15, 3, 13), float32]) -> (Tensor[(15, 3, 13), float32], Tensor[(13, 16, 6), uint64], Tensor[(750), float64]) {
  %63 = cast(%var_7909, dtype="float32") /* ty=Tensor[(15, 3, 13), float32] */;
  %64 = cast(meta[relay.Constant][1] /* ty=Tensor[(750), float64] */, dtype="float64") /* ty=Tensor[(750), float64] */;
  %65 = reshape(%64, newshape=[750]) /* ty=Tensor[(750), float64] */;
  %66 = @func_2458(%65) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(750), int16], Tensor[(13, 16, 6), uint64]) */;
  %67 = log2(%63) /* ty=Tensor[(15, 3, 13), float32] */;
  %68 = %66.0;
  (%67, %68, meta[relay.Constant][1] /* ty=Tensor[(750), float64] */)
}

def @func_8496() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %69 = @func_8358() /* ty=(Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %70 = @func_4146() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) */;
  %71 = %69.2;
  %72 = @func_6502() /* ty=Tensor[(13, 16, 6), uint64] */;
  %73 = %70.0;
  (%71, %72, %73)
}

def @func_7686() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %74 = @func_5768() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %75 = @func_2877() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %76 = %74.0;
  %77 = %75.0;
  (%76, %77)
}

def @func_5833() -> (Tensor[(11, 7, 16), float64], Tensor[(5, 3), float64], Tensor[(1248), uint64], Tensor[(15), float64]) {
  %78 = @func_3794() /* ty=(Tensor[(11, 7, 16), float64], Tensor[(13, 16, 6), float64]) */;
  %79 = cast(meta[relay.Constant][2] /* ty=Tensor[(1248), uint64] */, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %80 = cast(meta[relay.Constant][3] /* ty=Tensor[(15), float64] */, dtype="float64") /* ty=Tensor[(15), float64] */;
  %81 = reshape(%79, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), uint64] */;
  %82 = reshape(%80, newshape=[5, 3]) /* ty=Tensor[(5, 3), float64] */;
  %83 = @func_3068(%81, %82) /* ty=(Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64], Tensor[(750), int16], Tensor[(750), float64], Tensor[(5, 15, 10), float64], Tensor[(5, 3), float64]) */;
  %84 = %78.0;
  %85 = %83.5;
  (%84, %85, meta[relay.Constant][2] /* ty=Tensor[(1248), uint64] */, meta[relay.Constant][3] /* ty=Tensor[(15), float64] */)
}

def @func_1156(%var_1141: Tensor[(11, 7, 2), float32], %var_1152: Tensor[(11, 7, 2), uint64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 2), bool]) {
  %86 = @func_585() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %87 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 7, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 7, 2), float32] */;
  %88 = acos(%87) /* ty=Tensor[(11, 7, 2), float32] */;
  %89 = cast(%var_1141, dtype="uint64") /* ty=Tensor[(11, 7, 2), uint64] */;
  %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%88, dtype="uint64") /* ty=Tensor[(11, 7, 2), uint64] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %93 = add(%91, %92) /* ty=Tensor[(11, 7, 2), uint64] */;
  %94 = cast(%var_1152, dtype="bool") /* ty=Tensor[(11, 7, 2), bool] */;
  %95 = shape_of(%93, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%93, dtype="bool") /* ty=Tensor[(11, 7, 2), bool] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %98 = %86.0;
  %99 = equal(%96, %97) /* ty=Tensor[(11, 7, 2), bool] */;
  (%98, %99)
}

def @func_918() -> Tensor[(13, 16, 6), uint64] {
  %100 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %100.0
}

def @func_410() -> (Tensor[(13, 16, 6), uint64],) {
  %101 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%101,)
}

def @func_8368() -> Tensor[(13, 16, 6), uint64] {
  %102 = @func_7957() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 13), uint64]) */;
  %102.0
}

def @func_8390() -> (Tensor[(13, 16, 6), uint64],) {
  %103 = @func_894() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) */;
  %104 = %103.1;
  (%104,)
}

def @func_5540(%var_5525: Tensor[(9, 10, 13), float32]) -> Tensor[(9, 10, 13), float64] {
  %105 = cast(%var_5525, dtype="float32") /* ty=Tensor[(9, 10, 13), float32] */;
  %106 = acos(%105) /* ty=Tensor[(9, 10, 13), float32] */;
  %107 = cast(%106, dtype="float64") /* ty=Tensor[(9, 10, 13), float64] */;
  sigmoid(%107) /* ty=Tensor[(9, 10, 13), float64] */
}

def @func_6502() -> Tensor[(13, 16, 6), uint64] {
  @func_3163() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_207() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %108 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %109 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %110 = %108.0;
  %111 = %109.0;
  (%110, %111)
}

def @func_5733(%var_5713: Tensor[(1440), float64]) -> (Tensor[(11, 7, 16), float64], Tensor[(750), float64], Tensor[(1248), uint64], Tensor[(15, 1), float64], Tensor[(9, 16, 10), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
  %112 = cast(meta[relay.Constant][5] /* ty=Tensor[(1248), uint64] */, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %113 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 1), float64] */;
  %114 = reshape(%112, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), uint64] */;
  %115 = reshape(%113, newshape=[5, 3]) /* ty=Tensor[(5, 3), float64] */;
  %116 = @func_3068(%114, %115) /* ty=(Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64], Tensor[(750), int16], Tensor[(750), float64], Tensor[(5, 15, 10), float64], Tensor[(5, 3), float64]) */;
  %117 = cast(%var_5713, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %118 = reshape(%117, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), float64] */;
  %119 = @func_773(%118) /* ty=Tensor[(9, 16, 10), float64] */;
  %120 = cast(%var_5713, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %121 = shape_of(%119, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%119, dtype="float32") /* ty=Tensor[(9, 16, 10), float32] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %124 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %125 = @func_5171() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) */;
  %126 = @func_1340() /* ty=Tensor[(11, 7, 16), float64] */;
  %127 = %116.3;
  %128 = floor_divide(%122, %123) /* ty=Tensor[(9, 16, 10), float32] */;
  %129 = %124.0;
  %130 = %125.1;
  (%126, %127, meta[relay.Constant][5] /* ty=Tensor[(1248), uint64] */, meta[relay.Constant][6] /* ty=Tensor[(15, 1), float64] */, %128, %129, %130)
}

def @func_2546() -> (Tensor[(13, 16, 6), uint64],) {
  %131 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%131,)
}

def @main(%var_8642: Tensor[(11, 7, 16), float64], %var_8656: Tensor[(154), float32]) -> (Tensor[(2912), float32], Tensor[(11, 7, 16), uint8], Tensor[(13, 16, 6), uint64], Tensor[(154), float32], Tensor[(11, 7, 16), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 14), int8]) {
  %132 = @func_1940() /* ty=(Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) */;
  %133 = %132.4;
  %134 = cast(%var_8642, dtype="uint8") /* ty=Tensor[(11, 7, 16), uint8] */;
  %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%133, dtype="uint8") /* ty=Tensor[(11, 7, 16), uint8] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %138 = cast(%var_8656, dtype="float32") /* ty=Tensor[(154), float32] */;
  %139 = cast(%var_8656, dtype="uint64") /* ty=Tensor[(154), uint64] */;
  %140 = reshape(%138, newshape=[11, 7, 2]) /* ty=Tensor[(11, 7, 2), float32] */;
  %141 = reshape(%139, newshape=[11, 7, 2]) /* ty=Tensor[(11, 7, 2), uint64] */;
  %142 = @func_1156(%140, %141) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 2), bool]) */;
  %143 = cast(meta[relay.Constant][7] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %144 = reshape(%143, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), float32] */;
  %145 = @func_8269(%144) /* ty=(Tensor[(13, 16, 14), bool], Tensor[(13, 16, 14), bool]) */;
  %146 = %145.1;
  %147 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 16, 14), bool] */, dtype="int8") /* ty=Tensor[(13, 16, 14), int8] */;
  %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%146, dtype="int8") /* ty=Tensor[(13, 16, 14), int8] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %151 = right_shift(%136, %137) /* ty=Tensor[(11, 7, 16), uint8] */;
  %152 = %142.0;
  %153 = @func_4656() /* ty=Tensor[(11, 7, 16), float64] */;
  %154 = @func_7367() /* ty=Tensor[(13, 16, 6), uint64] */;
  %155 = logical_xor(%149, %150) /* ty=Tensor[(13, 16, 14), int8] */;
  (meta[relay.Constant][7] /* ty=Tensor[(2912), float32] */, %151, %152, %var_8656, %153, %154, %155)
}

def @func_1006() -> Tensor[(13, 16, 6), uint64] {
  %156 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %156.0
}

def @func_5401() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(15, 4, 16), uint8]) {
  %157 = @func_3293() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
  %158 = @func_3551() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(15, 4, 16), uint8], Tensor[(1, 960), uint8], Tensor[(13, 16, 6), uint64]) */;
  %159 = %157.0;
  %160 = @func_5234() /* ty=Tensor[(13, 16, 6), uint64] */;
  %161 = %158.2;
  (%159, %160, %161)
}

def @func_1484() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %162 = @func_918() /* ty=Tensor[(13, 16, 6), uint64] */;
  %163 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%162, %163)
}

def @func_3025(%var_3009: Tensor[(13, 16, 14), float32]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(13, 16, 14), float32]) {
  %164 = @func_1192() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %165 = @func_207() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %166 = @func_1940() /* ty=(Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) */;
  %167 = %166.0;
  %168 = cast(%167, dtype="float32") /* ty=Tensor[(13, 16, 14), float32] */;
  %169 = log10(%168) /* ty=Tensor[(13, 16, 14), float32] */;
  %170 = cast(%var_3009, dtype="float32") /* ty=Tensor[(13, 16, 14), float32] */;
  %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%169, dtype="float32") /* ty=Tensor[(13, 16, 14), float32] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %174 = %164.0;
  %175 = %165.1;
  %176 = @func_1544() /* ty=Tensor[(11, 7, 16), float64] */;
  %177 = floor_mod(%172, %173) /* ty=Tensor[(13, 16, 14), float32] */;
  (%174, %175, %176, %177)
}

def @func_4448() -> (Tensor[(13, 16, 6), uint64],) {
  %178 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %179 = %178.0;
  (%179,)
}

def @func_1110() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %180 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %181 = @func_1089() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
  %182 = %180.0;
  %183 = %181.0;
  (%182, %183)
}

def @func_7691() -> (Tensor[(13, 16, 6), uint64],) {
  %184 = @func_894() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) */;
  %185 = %184.1;
  (%185,)
}

def @func_1286(%var_1258: Tensor[(8, 12, 7), float32], %var_1259: Tensor[(8, 12, 7), float32]) -> Tensor[(8, 12, 7), int64] {
  %186 = cast(%var_1259, dtype="bool") /* ty=Tensor[(8, 12, 7), bool] */;
  %187 = shape_of(%var_1258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%var_1258, dtype="bool") /* ty=Tensor[(8, 12, 7), bool] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %190 = equal(%188, %189) /* ty=Tensor[(8, 12, 7), bool] */;
  %191 = cast(%var_1258, dtype="int64") /* ty=Tensor[(8, 12, 7), int64] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%190, dtype="int64") /* ty=Tensor[(8, 12, 7), int64] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%193, %194) /* ty=Tensor[(8, 12, 7), int64] */
}

def @func_4555() -> (Tensor[(13, 16, 6), uint64],) {
  %195 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%195,)
}

def @func_5768() -> (Tensor[(13, 16, 6), uint64],) {
  %196 = @func_1006() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%196,)
}

def @func_4525() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(750), float64], Tensor[(750), float64], Tensor[(7, 6, 10), uint8], Tensor[(420), uint8]) {
  %197 = @func_4374() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(24, 8), float32], Tensor[(192), float32], Tensor[(13, 16, 14), float32]) */;
  %198 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %199 = cast(meta[relay.Constant][9] /* ty=Tensor[(750), float64] */, dtype="float64") /* ty=Tensor[(750), float64] */;
  %200 = reshape(%199, newshape=[750]) /* ty=Tensor[(750), float64] */;
  %201 = @func_1844(%200) /* ty=(Tensor[(11, 7, 2), bool], Tensor[(154), float32], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(5, 15, 10), float64], Tensor[(15), float64], Tensor[(750), float64]) */;
  %202 = cast(meta[relay.Constant][10] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %203 = cast(meta[relay.Constant][10] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %204 = reshape(%202, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), uint8] */;
  %205 = reshape(%203, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), uint8] */;
  %206 = @func_4321(%204, %205) /* ty=(Tensor[(7, 6, 10), uint8], Tensor[(7, 6, 10), float64], Tensor[(7, 6, 10), float32]) */;
  %207 = %197.0;
  %208 = %198.0;
  %209 = %201.6;
  %210 = %206.0;
  (%207, %208, %209, meta[relay.Constant][9] /* ty=Tensor[(750), float64] */, %210, meta[relay.Constant][10] /* ty=Tensor[(420), uint8] */)
}

def @func_4146() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
  %211 = @func_918() /* ty=Tensor[(13, 16, 6), uint64] */;
  %212 = cast(%211, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %213 = reshape(%212, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), bool] */;
  %214 = @func_1420(%213) /* ty=(Tensor[(13, 16, 6), bool],) */;
  %215 = %214.0;
  (%211, %215)
}

def @func_6127() -> (Tensor[(13, 16, 6), float32],) {
  %216 = @func_5768() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %217 = %216.0;
  %218 = cast(%217, dtype="float32") /* ty=Tensor[(13, 16, 6), float32] */;
  %219 = log(%218) /* ty=Tensor[(13, 16, 6), float32] */;
  (%219,)
}

def @func_3293() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) {
  %220 = @func_460() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %221 = %220.1;
  %222 = cast(%221, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
  %223 = @func_918() /* ty=Tensor[(13, 16, 6), uint64] */;
  %224 = erf(%222) /* ty=Tensor[(13, 16, 6), float64] */;
  (%223, %224)
}

def @func_1603(%var_1582: Tensor[(1, 15, 1), float64], %var_1583: Tensor[(5, 15, 10), float64]) -> (Tensor[(5, 15, 10), float64], Tensor[(5, 15, 10), float64]) {
  %225 = cast(%var_1582, dtype="float64") /* ty=Tensor[(1, 15, 1), float64] */;
  %226 = cast(%var_1583, dtype="float64") /* ty=Tensor[(5, 15, 10), float64] */;
  %227 = cast(%var_1583, dtype="float64") /* ty=Tensor[(5, 15, 10), float64] */;
  %228 = cast(%var_1582, dtype="float64") /* ty=Tensor[(1, 15, 1), float64] */;
  %229 = floor_mod(%225, %226) /* ty=Tensor[(5, 15, 10), float64] */;
  %230 = divide(%227, %228) /* ty=Tensor[(5, 15, 10), float64] */;
  (%229, %230)
}

def @func_4423() -> (Tensor[(13, 6), float64],) {
  %231 = cast(meta[relay.Constant][11] /* ty=Tensor[(13, 6), float64] */, dtype="float64") /* ty=Tensor[(13, 6), float64] */;
  %232 = sqrt(%231) /* ty=Tensor[(13, 6), float64] */;
  (%232,)
}

def @func_3551() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(15, 4, 16), uint8], Tensor[(1, 960), uint8], Tensor[(13, 16, 6), uint64]) {
  %233 = @func_460() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %234 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 960), uint8] */, dtype="uint8") /* ty=Tensor[(1, 960), uint8] */;
  %235 = reshape(%234, newshape=[15, 4, 16]) /* ty=Tensor[(15, 4, 16), uint8] */;
  %236 = @func_2627(%235) /* ty=(Tensor[(15, 4, 16), uint8],) */;
  %237 = @func_2221() /* ty=Tensor[(13, 16, 6), uint64] */;
  %238 = %233.1;
  %239 = %236.0;
  %240 = @func_3163() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%237, %238, %239, meta[relay.Constant][12] /* ty=Tensor[(1, 960), uint8] */, %240)
}

def @func_6036() -> Tensor[(1248), bool] {
  %241 = @func_3107() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(1248), bool]) */;
  %241.1
}

def @func_5064() -> (Tensor[(13, 16, 6), uint64], Tensor[(20, 48), float32]) {
  %242 = @func_4089() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %243 = cast(meta[relay.Constant][13] /* ty=Tensor[(20, 48), uint8] */, dtype="uint8") /* ty=Tensor[(20, 48), uint8] */;
  %244 = reshape(%243, newshape=[15, 4, 16]) /* ty=Tensor[(15, 4, 16), uint8] */;
  %245 = @func_2627(%244) /* ty=(Tensor[(15, 4, 16), uint8],) */;
  %246 = %245.0;
  %247 = cast(%246, dtype="float32") /* ty=Tensor[(15, 4, 16), float32] */;
  %248 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(20, 48), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %249 = cast(meta[relay.Constant][13] /* ty=Tensor[(20, 48), uint8] */, dtype="float32") /* ty=Tensor[(20, 48), float32] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %251 = %242.0;
  %252 = mod(%249, %250) /* ty=Tensor[(20, 48), float32] */;
  (%251, %252)
}

def @func_4850(%var_4844: Tensor[(104), float32]) -> (Tensor[(13, 16, 6), uint64], Tensor[(8, 1, 13), float32], Tensor[(104), float32]) {
  %253 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %254 = cast(%var_4844, dtype="float32") /* ty=Tensor[(104), float32] */;
  %255 = reshape(%254, newshape=[8, 1, 13]) /* ty=Tensor[(8, 1, 13), float32] */;
  %256 = %253.0;
  %257 = @func_3742(%255) /* ty=Tensor[(8, 1, 13), float32] */;
  (%256, %257, %var_4844)
}

def @func_1642() -> Tensor[(9, 16, 13), uint64] {
  @func_1358() /* ty=Tensor[(9, 16, 13), uint64] */
}

def @func_6014(%var_5974: Tensor[(14, 6, 14), float32]) -> (Tensor[(14, 6, 14), float32], Tensor[(13, 16, 6), uint64]) {
  %258 = cast(%var_5974, dtype="float32") /* ty=Tensor[(14, 6, 14), float32] */;
  %259 = @func_5768() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %260 = sigmoid(%258) /* ty=Tensor[(14, 6, 14), float32] */;
  %261 = %259.0;
  (%260, %261)
}

def @func_4953() -> Tensor[(13, 16, 6), uint64] {
  %262 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %262.0
}

def @func_5920() -> Tensor[(13, 16, 6), uint64] {
  %263 = @func_4979() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %263.1
}

def @func_5253() -> (Tensor[(2912), float32],) {
  %264 = @func_4214() /* ty=(Tensor[(4, 14, 3), float32], Tensor[(13, 16, 14), float32], Tensor[(2912), float32], Tensor[(4, 14, 3), int64]) */;
  %265 = %264.2;
  (%265,)
}

def @func_6631() -> Tensor[(13, 16, 14), float32] {
  %266 = @func_4214() /* ty=(Tensor[(4, 14, 3), float32], Tensor[(13, 16, 14), float32], Tensor[(2912), float32], Tensor[(4, 14, 3), int64]) */;
  %266.1
}

def @func_7044(%var_7005: Tensor[(12, 16, 1), float32]) -> (Tensor[(12, 16, 1), float32], Tensor[(12, 16, 1), float32], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
  %267 = cast(%var_7005, dtype="float32") /* ty=Tensor[(12, 16, 1), float32] */;
  %268 = cast(%var_7005, dtype="float32") /* ty=Tensor[(12, 16, 1), float32] */;
  %269 = @func_3128() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), float64]) */;
  %270 = @func_894() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) */;
  %271 = log2(%267) /* ty=Tensor[(12, 16, 1), float32] */;
  %272 = acosh(%268) /* ty=Tensor[(12, 16, 1), float32] */;
  %273 = %269.0;
  %274 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  %275 = %270.0;
  (%271, %272, %273, %274, %275)
}

def @func_7367() -> Tensor[(13, 16, 6), uint64] {
  @func_2371() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_8293() -> (Tensor[(13, 16, 6), uint64],) {
  %276 = @func_2371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%276,)
}

def @func_3163() -> Tensor[(13, 16, 6), uint64] {
  %277 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %277.0
}

def @func_7387(%var_7382: Tensor[(11, 5, 9), uint16]) -> (Tensor[(11, 5, 9), uint16], Tensor[(9, 16, 13), uint64], Tensor[(65, 5), int64], Tensor[(11, 5, 9), uint64]) {
  %278 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 5, 9), uint16] */, dtype="uint16") /* ty=Tensor[(11, 5, 9), uint16] */;
  %279 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(11, 5, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 5, 9), uint16] */, dtype="uint16") /* ty=Tensor[(11, 5, 9), uint16] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %282 = cast(meta[relay.Constant][16] /* ty=Tensor[(65, 5), int64] */, dtype="int64") /* ty=Tensor[(65, 5), int64] */;
  %283 = reshape(%282, newshape=[5, 5, 13]) /* ty=Tensor[(5, 5, 13), int64] */;
  %284 = @func_7193(%283) /* ty=(Tensor[(5, 5, 13), float64], Tensor[(9, 16, 13), uint64]) */;
  %285 = cast(%var_7382, dtype="uint64") /* ty=Tensor[(11, 5, 9), uint64] */;
  %286 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(11, 5, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 5, 9), uint16] */, dtype="uint64") /* ty=Tensor[(11, 5, 9), uint64] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %289 = minimum(%280, %281) /* ty=Tensor[(11, 5, 9), uint16] */;
  %290 = %284.1;
  %291 = left_shift(%287, %288) /* ty=Tensor[(11, 5, 9), uint64] */;
  (%289, %290, meta[relay.Constant][16] /* ty=Tensor[(65, 5), int64] */, %291)
}

def @func_7142() -> (Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
  %292 = @func_7114() /* ty=(Tensor[(13, 16, 6), bool],) */;
  %293 = @func_4979() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %294 = %292.0;
  %295 = cast(%294, dtype="uint64") /* ty=Tensor[(13, 16, 6), uint64] */;
  %296 = reshape(%295, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), uint64] */;
  %297 = @func_264(%296) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) */;
  %298 = %293.0;
  %299 = %297.1;
  (%294, %298, %299)
}

def @func_1340() -> Tensor[(11, 7, 16), float64] {
  %300 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(11, 7, 16), float64] */;
  sqrt(%300) /* ty=Tensor[(11, 7, 16), float64] */
}

def @func_6580() -> (Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64]) {
  %301 = @func_5768() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %302 = @func_1677() /* ty=(Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64]) */;
  %303 = %301.0;
  %304 = %302.1;
  (%303, %304)
}

def @func_460() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %305 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %306 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  %307 = %305.0;
  (%306, %307)
}

def @func_3639() -> Tensor[(13, 16, 6), uint64] {
  %308 = @func_1855() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %308.0
}

def @func_7879(%var_7874: Tensor[(750), float64]) -> (Tensor[(9, 16, 13), uint64], Tensor[(50, 15), float64], Tensor[(750), float64]) {
  %309 = cast(%var_7874, dtype="float64") /* ty=Tensor[(750), float64] */;
  %310 = reshape(%309, newshape=[50, 15]) /* ty=Tensor[(50, 15), float64] */;
  %311 = @func_7620(%310) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(50, 15), float64]) */;
  %312 = @func_1358() /* ty=Tensor[(9, 16, 13), uint64] */;
  %313 = %311.2;
  (%312, %313, %var_7874)
}

def @func_8544(%var_8504: Tensor[(6, 6, 14), float64], %var_8505: Tensor[(6, 6, 14), float64], %var_8517: Tensor[(1, 1440), float64], %var_8521: Tensor[(2156), uint8], %var_8535: Tensor[(6, 6, 14), float64]) -> (Tensor[(192), float32], Tensor[(13, 16, 14), float64], Tensor[(1, 1440), float64], Tensor[(14, 11, 14), uint8], Tensor[(2156), uint8], Tensor[(9, 16, 13), uint64], Tensor[(6, 6, 14), bool], Tensor[(6, 6, 14), int8]) {
  %314 = cast(%var_8517, dtype="float64") /* ty=Tensor[(1, 1440), float64] */;
  %315 = reshape(%314, newshape=[1440]) /* ty=Tensor[(1440), float64] */;
  %316 = @func_4039(%315) /* ty=(Tensor[(9, 16, 13), uint64], Tensor[(1440), float64], Tensor[(9, 16, 10), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), float64]) */;
  %317 = cast(%var_8521, dtype="uint8") /* ty=Tensor[(2156), uint8] */;
  %318 = cast(%var_8521, dtype="uint8") /* ty=Tensor[(2156), uint8] */;
  %319 = reshape(%317, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), uint8] */;
  %320 = reshape(%318, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), uint8] */;
  %321 = @func_4064(%319, %320) /* ty=(Tensor[(14, 11, 14), uint8], Tensor[(13, 16, 6), bool]) */;
  %322 = @func_324() /* ty=(Tensor[(9, 16, 13), uint64],) */;
  %323 = cast(%var_8505, dtype="float64") /* ty=Tensor[(6, 6, 14), float64] */;
  %324 = shape_of(%var_8504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%var_8504, dtype="float64") /* ty=Tensor[(6, 6, 14), float64] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %327 = power(%325, %326) /* ty=Tensor[(6, 6, 14), float64] */;
  %328 = cast(%var_8505, dtype="bool") /* ty=Tensor[(6, 6, 14), bool] */;
  %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%327, dtype="bool") /* ty=Tensor[(6, 6, 14), bool] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %332 = cast(%var_8535, dtype="int8") /* ty=Tensor[(6, 6, 14), int8] */;
  %333 = shape_of(%var_8505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%var_8505, dtype="int8") /* ty=Tensor[(6, 6, 14), int8] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %336 = @func_5429() /* ty=Tensor[(192), float32] */;
  %337 = %316.5;
  %338 = %321.0;
  %339 = %322.0;
  %340 = not_equal(%330, %331) /* ty=Tensor[(6, 6, 14), bool] */;
  %341 = maximum(%334, %335) /* ty=Tensor[(6, 6, 14), int8] */;
  (%336, %337, %var_8517, %338, %var_8521, %339, %340, %341)
}

def @func_1677() -> (Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64]) {
  %342 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %343 = %342.0;
  %344 = cast(%343, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
  %345 = cos(%344) /* ty=Tensor[(13, 16, 6), float64] */;
  %346 = @func_1340() /* ty=Tensor[(11, 7, 16), float64] */;
  (%345, %346)
}

def @func_894() -> (Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) {
  %347 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %348 = %347.0;
  %349 = @func_585() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %350 = %349.5;
  %351 = cast(%350, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %352 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%348, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %355 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %356 = cast(%348, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %357 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%350, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %360 = cast(%350, dtype="int16") /* ty=Tensor[(13, 16, 6), int16] */;
  %361 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%348, dtype="int16") /* ty=Tensor[(13, 16, 6), int16] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %364 = less_equal(%353, %354) /* ty=Tensor[(13, 16, 6), bool] */;
  %365 = %355.0;
  %366 = logical_and(%358, %359) /* ty=Tensor[(13, 16, 6), bool] */;
  %367 = left_shift(%362, %363) /* ty=Tensor[(13, 16, 6), int16] */;
  (%364, %365, %366, %367)
}

def @func_3068(%var_3039: Tensor[(13, 16, 6), uint64], %var_3066: Tensor[(5, 3), float64]) -> (Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64], Tensor[(750), int16], Tensor[(750), float64], Tensor[(5, 15, 10), float64], Tensor[(5, 3), float64]) {
  %368 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %369 = %368.0;
  %370 = cast(%var_3039, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
  %371 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%369, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %374 = cast(meta[relay.Constant][18] /* ty=Tensor[(750), float64] */, dtype="float64") /* ty=Tensor[(750), float64] */;
  %375 = reshape(%374, newshape=[750]) /* ty=Tensor[(750), float64] */;
  %376 = @func_2458(%375) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(750), int16], Tensor[(13, 16, 6), uint64]) */;
  %377 = cast(%var_3066, dtype="float64") /* ty=Tensor[(5, 3), float64] */;
  %378 = cast(meta[relay.Constant][18] /* ty=Tensor[(750), float64] */, dtype="float64") /* ty=Tensor[(750), float64] */;
  %379 = reshape(%377, newshape=[1, 15, 1]) /* ty=Tensor[(1, 15, 1), float64] */;
  %380 = reshape(%378, newshape=[5, 15, 10]) /* ty=Tensor[(5, 15, 10), float64] */;
  %381 = @func_1603(%379, %380) /* ty=(Tensor[(5, 15, 10), float64], Tensor[(5, 15, 10), float64]) */;
  %382 = floor_mod(%372, %373) /* ty=Tensor[(13, 16, 6), float64] */;
  %383 = @func_1642() /* ty=Tensor[(9, 16, 13), uint64] */;
  %384 = %376.2;
  %385 = %381.1;
  (%382, %383, %384, meta[relay.Constant][18] /* ty=Tensor[(750), float64] */, %385, %var_3066)
}

def @func_6523() -> Tensor[(13, 16, 6), uint64] {
  %386 = @func_6354() /* ty=(Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64]) */;
  %386.1
}

def @func_7800() -> (Tensor[(11, 5, 2), float32],) {
  %387 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 5, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 5, 2), float32] */;
  %388 = erf(%387) /* ty=Tensor[(11, 5, 2), float32] */;
  (%388,)
}

def @func_2221() -> Tensor[(13, 16, 6), uint64] {
  @func_371() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_4039(%var_3956: Tensor[(1440), float64]) -> (Tensor[(9, 16, 13), uint64], Tensor[(1440), float64], Tensor[(9, 16, 10), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), float64]) {
  %389 = @func_324() /* ty=(Tensor[(9, 16, 13), uint64],) */;
  %390 = cast(%var_3956, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %391 = reshape(%390, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), float64] */;
  %392 = @func_773(%391) /* ty=Tensor[(9, 16, 10), float64] */;
  %393 = cast(%392, dtype="float64") /* ty=Tensor[(9, 16, 10), float64] */;
  %394 = asin(%393) /* ty=Tensor[(9, 16, 10), float64] */;
  %395 = cast(%394, dtype="float64") /* ty=Tensor[(9, 16, 10), float64] */;
  %396 = reshape(%395, newshape=[180, 8]) /* ty=Tensor[(180, 8), float64] */;
  %397 = @func_2739(%396) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 13), uint64], Tensor[(9, 16, 10), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(180, 8), float32], Tensor[(11, 7, 16), float64]) */;
  %398 = @func_1940() /* ty=(Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) */;
  %399 = %389.0;
  %400 = @func_1564() /* ty=Tensor[(13, 16, 6), uint64] */;
  %401 = %397.3;
  %402 = %398.0;
  %403 = @func_3613() /* ty=Tensor[(13, 16, 6), float64] */;
  (%399, %var_3956, %394, %400, %401, %402, %403)
}

def @func_7784() -> Tensor[(13, 16, 6), uint64] {
  %404 = @func_2877() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %404.0
}

def @func_1544() -> Tensor[(11, 7, 16), float64] {
  @func_1340() /* ty=Tensor[(11, 7, 16), float64] */
}

def @func_3512() -> Tensor[(13, 16, 6), uint64] {
  @func_2371() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_3794() -> (Tensor[(11, 7, 16), float64], Tensor[(13, 16, 6), float64]) {
  %405 = @func_3384() /* ty=(Tensor[(9, 16, 13), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64]) */;
  %406 = @func_1340() /* ty=Tensor[(11, 7, 16), float64] */;
  %407 = %405.2;
  (%406, %407)
}

def @func_2150(%var_2027: Tensor[(750), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(750), uint32], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(750), uint64], Tensor[(750), float32], Tensor[(750), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 14), float64]) {
  %408 = @func_460() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %409 = %408.0;
  %410 = cast(%409, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %411 = reshape(%410, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), bool] */;
  %412 = @func_1420(%411) /* ty=(Tensor[(13, 16, 6), bool],) */;
  %413 = cast(%var_2027, dtype="float64") /* ty=Tensor[(750), float64] */;
  %414 = reshape(%413, newshape=[750]) /* ty=Tensor[(750), float64] */;
  %415 = @func_1844(%414) /* ty=(Tensor[(11, 7, 2), bool], Tensor[(154), float32], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(5, 15, 10), float64], Tensor[(15), float64], Tensor[(750), float64]) */;
  %416 = %415.6;
  %417 = cast(%var_2027, dtype="uint32") /* ty=Tensor[(750), uint32] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(1), int32] */;
  %419 = cast(%416, dtype="uint32") /* ty=Tensor[(750), uint32] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %421 = @func_1089() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
  %422 = @func_1089() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
  %423 = cast(%var_2027, dtype="bool") /* ty=Tensor[(750), bool] */;
  %424 = shape_of(%416, dtype="int32") /* ty=Tensor[(1), int32] */;
  %425 = cast(%416, dtype="bool") /* ty=Tensor[(750), bool] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?), bool] */;
  %427 = greater_equal(%425, %426) /* ty=Tensor[(750), bool] */;
  %428 = cast(%427, dtype="uint64") /* ty=Tensor[(750), uint64] */;
  %429 = shape_of(%var_2027, dtype="int32") /* ty=Tensor[(1), int32] */;
  %430 = cast(%var_2027, dtype="uint64") /* ty=Tensor[(750), uint64] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %432 = multiply(%430, %431) /* ty=Tensor[(750), uint64] */;
  %433 = cast(%432, dtype="uint64") /* ty=Tensor[(750), uint64] */;
  %434 = shape_of(%427, dtype="int32") /* ty=Tensor[(1), int32] */;
  %435 = cast(%427, dtype="uint64") /* ty=Tensor[(750), uint64] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %437 = cast(%427, dtype="int16") /* ty=Tensor[(750), int16] */;
  %438 = shape_of(%416, dtype="int32") /* ty=Tensor[(1), int32] */;
  %439 = cast(%416, dtype="int16") /* ty=Tensor[(750), int16] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?), int16] */;
  %441 = left_shift(%439, %440) /* ty=Tensor[(750), int16] */;
  %442 = cast(%441, dtype="float32") /* ty=Tensor[(750), float32] */;
  %443 = shape_of(%var_2027, dtype="int32") /* ty=Tensor[(1), int32] */;
  %444 = cast(%var_2027, dtype="float32") /* ty=Tensor[(750), float32] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?), float32] */;
  %446 = cast(%432, dtype="bool") /* ty=Tensor[(750), bool] */;
  %447 = shape_of(%441, dtype="int32") /* ty=Tensor[(1), int32] */;
  %448 = cast(%441, dtype="bool") /* ty=Tensor[(750), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?), bool] */;
  %450 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %451 = @func_1940() /* ty=(Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) */;
  %452 = %412.0;
  %453 = maximum(%419, %420) /* ty=Tensor[(750), uint32] */;
  %454 = %421.1;
  %455 = %422.0;
  %456 = logical_xor(%435, %436) /* ty=Tensor[(750), uint64] */;
  %457 = floor_divide(%444, %445) /* ty=Tensor[(750), float32] */;
  %458 = greater(%448, %449) /* ty=Tensor[(750), bool] */;
  %459 = %450.0;
  %460 = %451.0;
  (%409, %452, %453, %454, %455, %456, %457, %458, %459, %460)
}

def @func_2627(%var_2616: Tensor[(15, 4, 16), uint8]) -> (Tensor[(15, 4, 16), uint8],) {
  %461 = cast(%var_2616, dtype="uint8") /* ty=Tensor[(15, 4, 16), uint8] */;
  %462 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(15, 4, 16), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 4, 16), uint8] */, dtype="uint8") /* ty=Tensor[(15, 4, 16), uint8] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %465 = bitwise_xor(%463, %464) /* ty=Tensor[(15, 4, 16), uint8] */;
  (%465,)
}

def @func_7620(%var_7616: Tensor[(50, 15), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(50, 15), float64]) {
  %466 = @func_4448() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %467 = cast(%var_7616, dtype="float64") /* ty=Tensor[(50, 15), float64] */;
  %468 = reshape(%467, newshape=[750]) /* ty=Tensor[(750), float64] */;
  %469 = @func_2458(%468) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(750), int16], Tensor[(13, 16, 6), uint64]) */;
  %470 = %466.0;
  %471 = %469.3;
  (%470, %471, %var_7616)
}

def @func_8183(%var_8155: Tensor[(7, 7, 15), float64]) -> (Tensor[(7, 7, 15), float64],) {
  %472 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 7, 15), float64] */, dtype="float64") /* ty=Tensor[(7, 7, 15), float64] */;
  %473 = shape_of(%var_8155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%var_8155, dtype="float64") /* ty=Tensor[(7, 7, 15), float64] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %476 = divide(%474, %475) /* ty=Tensor[(7, 7, 15), float64] */;
  (%476,)
}

def @func_1358() -> Tensor[(9, 16, 13), uint64] {
  %477 = @func_324() /* ty=(Tensor[(9, 16, 13), uint64],) */;
  %477.0
}

def @func_4214() -> (Tensor[(4, 14, 3), float32], Tensor[(13, 16, 14), float32], Tensor[(2912), float32], Tensor[(4, 14, 3), int64]) {
  %478 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 14, 3), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 3), float64] */;
  %479 = sin(%478) /* ty=Tensor[(4, 14, 3), float64] */;
  %480 = cast(%479, dtype="float32") /* ty=Tensor[(4, 14, 3), float32] */;
  %481 = cast(meta[relay.Constant][23] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %482 = reshape(%481, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), float32] */;
  %483 = @func_3025(%482) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(13, 16, 14), float32]) */;
  %484 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 14, 3), float64] */, dtype="int64") /* ty=Tensor[(4, 14, 3), int64] */;
  %485 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%479, dtype="int64") /* ty=Tensor[(4, 14, 3), int64] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %488 = rsqrt(%480) /* ty=Tensor[(4, 14, 3), float32] */;
  %489 = %483.3;
  %490 = maximum(%486, %487) /* ty=Tensor[(4, 14, 3), int64] */;
  (%488, %489, meta[relay.Constant][23] /* ty=Tensor[(2912), float32] */, %490)
}

def @func_7529(%var_7489: Tensor[(1440), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(1440), float64], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), float64], Tensor[(1440), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %491 = @func_4423() /* ty=(Tensor[(13, 6), float64],) */;
  %492 = @func_1677() /* ty=(Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64]) */;
  %493 = cast(%var_7489, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %494 = reshape(%493, newshape=[1440]) /* ty=Tensor[(1440), float64] */;
  %495 = @func_6973(%494) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(14, 11, 14), uint8], Tensor[(2156), uint8], Tensor[(13, 16, 6), uint64], Tensor[(1440), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %496 = %495.4;
  %497 = cast(%496, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %498 = @func_207() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %499 = @func_3512() /* ty=Tensor[(13, 16, 6), uint64] */;
  %500 = %491.0;
  %501 = @func_5234() /* ty=Tensor[(13, 16, 6), uint64] */;
  %502 = @func_3613() /* ty=Tensor[(13, 16, 6), float64] */;
  %503 = %492.0;
  %504 = exp(%497) /* ty=Tensor[(1440), float64] */;
  %505 = %498.1;
  %506 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%499, %500, %501, %var_7489, %502, %503, %504, %505, %506)
}

def @func_8431(%var_8424: Tensor[(2, 9, 9), float64], %var_8425: Tensor[(2, 9, 9), float64]) -> Tensor[(2, 9, 9), bool] {
  %507 = cast(%var_8425, dtype="bool") /* ty=Tensor[(2, 9, 9), bool] */;
  %508 = shape_of(%var_8424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%var_8424, dtype="bool") /* ty=Tensor[(2, 9, 9), bool] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%509, %510) /* ty=Tensor[(2, 9, 9), bool] */
}

def @func_3613() -> Tensor[(13, 16, 6), float64] {
  %511 = @func_3293() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
  %511.1
}

def @func_7972() -> (Tensor[(13, 16, 6), uint64], Tensor[(1248), bool]) {
  %512 = @func_4806() /* ty=Tensor[(13, 16, 6), uint64] */;
  %513 = @func_6036() /* ty=Tensor[(1248), bool] */;
  (%512, %513)
}

def @func_3717(%var_3714: Tensor[(5, 8), float32]) -> Tensor[(5, 8), float32] {
  %514 = cast(%var_3714, dtype="float32") /* ty=Tensor[(5, 8), float32] */;
  log(%514) /* ty=Tensor[(5, 8), float32] */
}

def @func_5861() -> (Tensor[(13, 16, 6), uint64],) {
  %515 = @func_3293() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
  %516 = %515.0;
  (%516,)
}

def @func_1564() -> Tensor[(13, 16, 6), uint64] {
  @func_371() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_371() -> Tensor[(13, 16, 6), uint64] {
  %517 = @func_207() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %517.0
}

def @func_2877() -> (Tensor[(13, 16, 6), uint64],) {
  %518 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%518,)
}

def @func_3709(%var_3700: Tensor[(24, 8), float32]) -> (Tensor[(8, 4, 6), float32], Tensor[(24, 8), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float32]) {
  %519 = cast(%var_3700, dtype="float32") /* ty=Tensor[(24, 8), float32] */;
  %520 = @func_497() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %521 = %520.0;
  %522 = cast(%521, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
  %523 = reshape(%519, newshape=[8, 4, 6]) /* ty=Tensor[(8, 4, 6), float32] */;
  %524 = reshape(%522, newshape=[1248]) /* ty=Tensor[(1248), float64] */;
  %525 = @func_3483(%523, %524) /* ty=(Tensor[(8, 4, 6), float32], Tensor[(13, 16, 6), float64], Tensor[(1248), float64], Tensor[(11, 7, 16), float64], Tensor[(8, 4, 6), float32], Tensor[(13, 16, 6), uint64]) */;
  %526 = @func_1089() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
  %527 = cast(%521, dtype="float32") /* ty=Tensor[(13, 16, 6), float32] */;
  %528 = %525.0;
  %529 = %526.0;
  %530 = acos(%527) /* ty=Tensor[(13, 16, 6), float32] */;
  (%528, %var_3700, %529, %530)
}

def @func_1420(%var_1409: Tensor[(13, 16, 6), bool]) -> (Tensor[(13, 16, 6), bool],) {
  %531 = @func_894() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) */;
  %532 = %531.0;
  %533 = cast(%var_1409, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%532, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %537 = greater(%535, %536) /* ty=Tensor[(13, 16, 6), bool] */;
  (%537,)
}

def @func_1855() -> (Tensor[(13, 16, 6), uint64],) {
  %538 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%538,)
}

def @func_3128() -> (Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), float64]) {
  %539 = @func_894() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) */;
  %540 = @func_1677() /* ty=(Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64]) */;
  %541 = %539.0;
  %542 = %540.0;
  (%541, %542)
}

def @func_5567() -> (Tensor[(13, 6), float64],) {
  %543 = @func_4423() /* ty=(Tensor[(13, 6), float64],) */;
  %544 = %543.0;
  (%544,)
}

def @func_6711() -> (Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), float32], Tensor[(13, 16, 6), uint64], Tensor[(2912), float32], Tensor[(5, 8), float32], Tensor[(40), float32]) {
  %545 = @func_894() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) */;
  %546 = @func_6127() /* ty=(Tensor[(13, 16, 6), float32],) */;
  %547 = @func_497() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %548 = @func_5253() /* ty=(Tensor[(2912), float32],) */;
  %549 = cast(meta[relay.Constant][24] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %550 = reshape(%549, newshape=[5, 8]) /* ty=Tensor[(5, 8), float32] */;
  %551 = %545.2;
  %552 = %546.0;
  %553 = %547.0;
  %554 = %548.0;
  %555 = @func_3717(%550) /* ty=Tensor[(5, 8), float32] */;
  (%551, %552, %553, %554, %555, meta[relay.Constant][24] /* ty=Tensor[(40), float32] */)
}

def @func_161() -> (Tensor[(13, 16, 6), uint64],) {
  %556 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 16, 6), uint64] */, dtype="uint64") /* ty=Tensor[(13, 16, 6), uint64] */;
  %557 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(13, 16, 6), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 16, 6), uint64] */, dtype="uint64") /* ty=Tensor[(13, 16, 6), uint64] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %560 = multiply(%558, %559) /* ty=Tensor[(13, 16, 6), uint64] */;
  (%560,)
}

def @func_3107() -> (Tensor[(13, 16, 6), uint64], Tensor[(1248), bool]) {
  %561 = @func_1192() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %562 = %561.0;
  %563 = cast(%562, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %564 = reshape(%563, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %565 = @func_2318(%564) /* ty=(Tensor[(13, 16, 6), bool], Tensor[(1248), bool], Tensor[(16, ?, 4), uint32]) */;
  %566 = %565.1;
  (%562, %566)
}

def @func_7282(%var_7234: Tensor[(24, 8), float32], %var_7241: Tensor[(24, 8), float32], %var_7249: Tensor[(24, 8), float32]) -> (Tensor[(13, 16, 6), uint64], Tensor[(24, 8), float64], Tensor[(24, 8), float64], Tensor[(24, 8), uint32], Tensor[(11, 7, 16), float64], Tensor[(24, 8), float64]) {
  %567 = @func_4787() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) */;
  %568 = @func_4374() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(24, 8), float32], Tensor[(192), float32], Tensor[(13, 16, 14), float32]) */;
  %569 = %568.1;
  %570 = cast(%var_7241, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(2), int32] */;
  %572 = cast(%569, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %574 = cast(%var_7249, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %575 = shape_of(%569, dtype="int32") /* ty=Tensor[(2), int32] */;
  %576 = cast(%569, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %578 = cast(%var_7234, dtype="uint32") /* ty=Tensor[(24, 8), uint32] */;
  %579 = shape_of(%569, dtype="int32") /* ty=Tensor[(2), int32] */;
  %580 = cast(%569, dtype="uint32") /* ty=Tensor[(24, 8), uint32] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %582 = bitwise_and(%580, %581) /* ty=Tensor[(24, 8), uint32] */;
  %583 = cast(%582, dtype="uint32") /* ty=Tensor[(24, 8), uint32] */;
  %584 = shape_of(%var_7241, dtype="int32") /* ty=Tensor[(2), int32] */;
  %585 = cast(%var_7241, dtype="uint32") /* ty=Tensor[(24, 8), uint32] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %587 = cast(%var_7241, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %588 = cosh(%587) /* ty=Tensor[(24, 8), float64] */;
  %589 = cast(%588, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %590 = %567.1;
  %591 = mod(%572, %573) /* ty=Tensor[(24, 8), float64] */;
  %592 = floor_divide(%576, %577) /* ty=Tensor[(24, 8), float64] */;
  %593 = right_shift(%585, %586) /* ty=Tensor[(24, 8), uint32] */;
  %594 = @func_1340() /* ty=Tensor[(11, 7, 16), float64] */;
  %595 = atanh(%589) /* ty=Tensor[(24, 8), float64] */;
  (%590, %591, %592, %593, %594, %595)
}

def @func_2458(%var_2442: Tensor[(750), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(750), int16], Tensor[(13, 16, 6), uint64]) {
  %596 = cast(meta[relay.Constant][27] /* ty=Tensor[(750), float64] */, dtype="float64") /* ty=Tensor[(750), float64] */;
  %597 = reshape(%596, newshape=[750]) /* ty=Tensor[(750), float64] */;
  %598 = @func_1844(%597) /* ty=(Tensor[(11, 7, 2), bool], Tensor[(154), float32], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(5, 15, 10), float64], Tensor[(15), float64], Tensor[(750), float64]) */;
  %599 = cast(%var_2442, dtype="int16") /* ty=Tensor[(750), int16] */;
  %600 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(750), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %601 = cast(meta[relay.Constant][27] /* ty=Tensor[(750), float64] */, dtype="int16") /* ty=Tensor[(750), int16] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?), int16] */;
  %603 = @func_1940() /* ty=(Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) */;
  %604 = @func_2221() /* ty=Tensor[(13, 16, 6), uint64] */;
  %605 = %598.3;
  %606 = bitwise_and(%601, %602) /* ty=Tensor[(750), int16] */;
  %607 = %603.1;
  (%604, %605, %606, %607)
}

def @func_7114() -> (Tensor[(13, 16, 6), bool],) {
  %608 = @func_3128() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), float64]) */;
  %609 = %608.0;
  (%609,)
}

def @func_1089() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) {
  %610 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %611 = @func_918() /* ty=Tensor[(13, 16, 6), uint64] */;
  %612 = cast(%611, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
  %613 = %610.0;
  %614 = tan(%612) /* ty=Tensor[(13, 16, 6), float64] */;
  (%613, %614)
}

def @func_8061(%var_8051: Tensor[(1440), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(2912), float32], Tensor[(13, 16, 6), uint64], Tensor[(1440), float64]) {
  %615 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %616 = cast(meta[relay.Constant][28] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %617 = reshape(%616, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), float32] */;
  %618 = @func_3025(%617) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(13, 16, 14), float32]) */;
  %619 = cast(%var_8051, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %620 = reshape(%619, newshape=[1440]) /* ty=Tensor[(1440), float64] */;
  %621 = @func_6973(%620) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(14, 11, 14), uint8], Tensor[(2156), uint8], Tensor[(13, 16, 6), uint64], Tensor[(1440), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %622 = %615.0;
  %623 = %618.1;
  %624 = %621.0;
  (%622, %623, meta[relay.Constant][28] /* ty=Tensor[(2912), float32] */, %624, %var_8051)
}

def @func_264(%var_253: Tensor[(13, 16, 6), uint64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
  %625 = @func_207() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %626 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %627 = %626.0;
  %628 = cast(%var_253, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%627, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %632 = %625.1;
  %633 = greater_equal(%630, %631) /* ty=Tensor[(13, 16, 6), bool] */;
  (%632, %633)
}

def @func_1229(%var_1214: Tensor[(13, 16, 6), float64]) -> (Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64]) {
  %634 = @func_1089() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
  %635 = %634.1;
  %636 = cast(%var_1214, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
  %637 = shape_of(%635, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(%635, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %640 = floor_divide(%638, %639) /* ty=Tensor[(13, 16, 6), float64] */;
  %641 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%640, %641)
}

def @func_3825(%var_3822: Tensor[(13, 8, 1), float32]) -> (Tensor[(13, 8, 1), float32],) {
  %642 = cast(%var_3822, dtype="float32") /* ty=Tensor[(13, 8, 1), float32] */;
  %643 = sqrt(%642) /* ty=Tensor[(13, 8, 1), float32] */;
  (%643,)
}

def @func_324() -> (Tensor[(9, 16, 13), uint64],) {
  %644 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 16, 13), uint64] */, dtype="uint64") /* ty=Tensor[(9, 16, 13), uint64] */;
  %645 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(9, 16, 13), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 16, 13), uint64] */, dtype="uint64") /* ty=Tensor[(9, 16, 13), uint64] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %648 = logical_xor(%646, %647) /* ty=Tensor[(9, 16, 13), uint64] */;
  (%648,)
}

def @func_5853() -> (Tensor[(13, 16, 6), uint64],) {
  %649 = @func_4146() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) */;
  %650 = %649.0;
  (%650,)
}

def @func_6273(%var_6260: Tensor[(2912), float32], %var_6266: Tensor[(4, 14, 3), int64]) -> (Tensor[(11, 7, 16), float64], Tensor[(2912), float32], Tensor[(13, 16, 6), uint64], Tensor[(4, 14, 3), bool]) {
  %651 = cast(%var_6260, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %652 = reshape(%651, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), float32] */;
  %653 = @func_3025(%652) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(13, 16, 14), float32]) */;
  %654 = @func_5768() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %655 = @func_4214() /* ty=(Tensor[(4, 14, 3), float32], Tensor[(13, 16, 14), float32], Tensor[(2912), float32], Tensor[(4, 14, 3), int64]) */;
  %656 = %655.3;
  %657 = cast(%var_6266, dtype="bool") /* ty=Tensor[(4, 14, 3), bool] */;
  %658 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%656, dtype="bool") /* ty=Tensor[(4, 14, 3), bool] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %661 = %653.2;
  %662 = %654.0;
  %663 = logical_and(%659, %660) /* ty=Tensor[(4, 14, 3), bool] */;
  (%661, %var_6260, %662, %663)
}

def @func_8358() -> (Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %664 = @func_1711() /* ty=(Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float32]) */;
  %665 = @func_3384() /* ty=(Tensor[(9, 16, 13), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64]) */;
  %666 = @func_3613() /* ty=Tensor[(13, 16, 6), float64] */;
  %667 = %664.0;
  %668 = %665.1;
  %669 = @func_918() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%666, %667, %668, %669)
}

def @func_5377(%var_5370: Tensor[(14, 3, 2), bool], %var_5371: Tensor[(14, 3, 2), bool]) -> (Tensor[(14, 3, 2), bool], Tensor[(13, 6), float64]) {
  %670 = cast(%var_5371, dtype="bool") /* ty=Tensor[(14, 3, 2), bool] */;
  %671 = shape_of(%var_5370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%var_5370, dtype="bool") /* ty=Tensor[(14, 3, 2), bool] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %674 = @func_4423() /* ty=(Tensor[(13, 6), float64],) */;
  %675 = logical_and(%672, %673) /* ty=Tensor[(14, 3, 2), bool] */;
  %676 = %674.0;
  (%675, %676)
}

def @func_4064(%var_4043: Tensor[(14, 11, 14), uint8], %var_4044: Tensor[(14, 11, 14), uint8]) -> (Tensor[(14, 11, 14), uint8], Tensor[(13, 16, 6), bool]) {
  %677 = cast(%var_4044, dtype="uint8") /* ty=Tensor[(14, 11, 14), uint8] */;
  %678 = shape_of(%var_4043, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%var_4043, dtype="uint8") /* ty=Tensor[(14, 11, 14), uint8] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %681 = @func_894() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) */;
  %682 = minimum(%679, %680) /* ty=Tensor[(14, 11, 14), uint8] */;
  %683 = %681.0;
  (%682, %683)
}

def @func_2371() -> Tensor[(13, 16, 6), uint64] {
  %684 = @func_497() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %684.0
}

def @func_8269(%var_8254: Tensor[(13, 16, 14), float32]) -> (Tensor[(13, 16, 14), bool], Tensor[(13, 16, 14), bool]) {
  %685 = @func_6631() /* ty=Tensor[(13, 16, 14), float32] */;
  %686 = cast(%var_8254, dtype="bool") /* ty=Tensor[(13, 16, 14), bool] */;
  %687 = shape_of(%685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %688 = cast(%685, dtype="bool") /* ty=Tensor[(13, 16, 14), bool] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %690 = cast(%var_8254, dtype="bool") /* ty=Tensor[(13, 16, 14), bool] */;
  %691 = shape_of(%685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%685, dtype="bool") /* ty=Tensor[(13, 16, 14), bool] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %694 = logical_or(%688, %689) /* ty=Tensor[(13, 16, 14), bool] */;
  %695 = equal(%692, %693) /* ty=Tensor[(13, 16, 14), bool] */;
  (%694, %695)
}

def @func_6354() -> (Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64]) {
  %696 = @func_1711() /* ty=(Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float32]) */;
  %697 = @func_1192() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %698 = %696.0;
  %699 = %697.0;
  (%698, %699)
}

def @func_5171() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
  %700 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %701 = @func_3128() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), float64]) */;
  %702 = %700.0;
  %703 = %701.0;
  (%702, %703)
}

def @func_5234() -> Tensor[(13, 16, 6), uint64] {
  %704 = @func_2877() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %704.0
}

def @func_4089() -> (Tensor[(13, 16, 6), uint64],) {
  %705 = @func_1192() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %706 = %705.0;
  (%706,)
}

def @func_1711() -> (Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float32]) {
  %707 = @func_460() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %708 = @func_1677() /* ty=(Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64]) */;
  %709 = %708.1;
  %710 = cast(%709, dtype="float32") /* ty=Tensor[(11, 7, 16), float32] */;
  %711 = @func_1358() /* ty=Tensor[(9, 16, 13), uint64] */;
  %712 = %707.1;
  %713 = atan(%710) /* ty=Tensor[(11, 7, 16), float32] */;
  (%711, %712, %713)
}

def @func_3384() -> (Tensor[(9, 16, 13), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64]) {
  %714 = @func_1358() /* ty=Tensor[(9, 16, 13), uint64] */;
  %715 = cast(%714, dtype="float32") /* ty=Tensor[(9, 16, 13), float32] */;
  %716 = @func_2877() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %717 = %716.0;
  %718 = cast(%717, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
  %719 = reshape(%718, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), float64] */;
  %720 = @func_1229(%719) /* ty=(Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64]) */;
  %721 = tan(%715) /* ty=Tensor[(9, 16, 13), float32] */;
  %722 = %720.0;
  %723 = @func_1642() /* ty=Tensor[(9, 16, 13), uint64] */;
  (%721, %717, %722, %723)
}

def @func_7727(%var_7704: float32, %var_7705: Tensor[(10, 11, 9), float32]) -> (Tensor[(10, 11, 9), float32], Tensor[(13, 16, 6), uint64]) {
  %724 = cast(%var_7704, dtype="float32") /* ty=float32 */;
  %725 = cast(%var_7705, dtype="float32") /* ty=Tensor[(10, 11, 9), float32] */;
  %726 = @func_5861() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %727 = floor_mod(%724, %725) /* ty=Tensor[(10, 11, 9), float32] */;
  %728 = %726.0;
  (%727, %728)
}

def @func_4991() -> (Tensor[(13, 16, 6), uint64],) {
  %729 = @func_2877() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %730 = %729.0;
  (%730,)
}

def @func_8502() -> Tensor[(13, 16, 6), float64] {
  %731 = @func_3794() /* ty=(Tensor[(11, 7, 16), float64], Tensor[(13, 16, 6), float64]) */;
  %731.1
}

def @func_1844(%var_1835: Tensor[(750), float64]) -> (Tensor[(11, 7, 2), bool], Tensor[(154), float32], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(5, 15, 10), float64], Tensor[(15), float64], Tensor[(750), float64]) {
  %732 = cast(meta[relay.Constant][31] /* ty=Tensor[(154), float32] */, dtype="float32") /* ty=Tensor[(154), float32] */;
  %733 = cast(meta[relay.Constant][31] /* ty=Tensor[(154), float32] */, dtype="uint64") /* ty=Tensor[(154), uint64] */;
  %734 = reshape(%732, newshape=[11, 7, 2]) /* ty=Tensor[(11, 7, 2), float32] */;
  %735 = reshape(%733, newshape=[11, 7, 2]) /* ty=Tensor[(11, 7, 2), uint64] */;
  %736 = @func_1156(%734, %735) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 2), bool]) */;
  %737 = @func_918() /* ty=Tensor[(13, 16, 6), uint64] */;
  %738 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 16, 6), uint64] */, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %739 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%737, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %742 = cast(meta[relay.Constant][33] /* ty=Tensor[(15), float64] */, dtype="float64") /* ty=Tensor[(15), float64] */;
  %743 = cast(%var_1835, dtype="float64") /* ty=Tensor[(750), float64] */;
  %744 = reshape(%742, newshape=[1, 15, 1]) /* ty=Tensor[(1, 15, 1), float64] */;
  %745 = reshape(%743, newshape=[5, 15, 10]) /* ty=Tensor[(5, 15, 10), float64] */;
  %746 = @func_1603(%744, %745) /* ty=(Tensor[(5, 15, 10), float64], Tensor[(5, 15, 10), float64]) */;
  %747 = %736.1;
  %748 = not_equal(%740, %741) /* ty=Tensor[(13, 16, 6), bool] */;
  %749 = @func_918() /* ty=Tensor[(13, 16, 6), uint64] */;
  %750 = %746.0;
  (%747, meta[relay.Constant][31] /* ty=Tensor[(154), float32] */, %748, %749, %750, meta[relay.Constant][33] /* ty=Tensor[(15), float64] */, %var_1835)
}

def @func_497() -> (Tensor[(13, 16, 6), uint64],) {
  %751 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%751,)
}

def @func_4649() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %752 = @func_1192() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %753 = @func_4448() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %754 = %752.0;
  %755 = %753.0;
  %756 = @func_3639() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%754, %755, %756)
}

def @func_4656() -> Tensor[(11, 7, 16), float64] {
  %757 = @func_3794() /* ty=(Tensor[(11, 7, 16), float64], Tensor[(13, 16, 6), float64]) */;
  %757.0
}

def @func_1940() -> (Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) {
  %758 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 16, 14), float64] */, dtype="float64") /* ty=Tensor[(13, 16, 14), float64] */;
  %759 = @func_497() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %760 = cast(meta[relay.Constant][35] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %761 = reshape(%760, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), float64] */;
  %762 = acos(%758) /* ty=Tensor[(13, 16, 14), float64] */;
  %763 = %759.0;
  %764 = @func_773(%761) /* ty=Tensor[(9, 16, 10), float64] */;
  %765 = @func_1340() /* ty=Tensor[(11, 7, 16), float64] */;
  (%762, %763, %764, meta[relay.Constant][35] /* ty=Tensor[(1440), float64] */, %765)
}

def @func_6778(%var_6736: Tensor[(168, 8), float32], %var_6744: Tensor[(168, 8), float32]) -> (Tensor[(40), float32], Tensor[(14, 12, 8), float32], Tensor[(168, 8), uint32], Tensor[(168, 8), float32]) {
  %766 = @func_6711() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), float32], Tensor[(13, 16, 6), uint64], Tensor[(2912), float32], Tensor[(5, 8), float32], Tensor[(40), float32]) */;
  %767 = cast(%var_6736, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %768 = reshape(%767, newshape=[14, 12, 8]) /* ty=Tensor[(14, 12, 8), float32] */;
  %769 = cast(%var_6744, dtype="uint32") /* ty=Tensor[(168, 8), uint32] */;
  %770 = shape_of(%var_6736, dtype="int32") /* ty=Tensor[(2), int32] */;
  %771 = cast(%var_6736, dtype="uint32") /* ty=Tensor[(168, 8), uint32] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %773 = cast(%var_6744, dtype="float64") /* ty=Tensor[(168, 8), float64] */;
  %774 = exp(%773) /* ty=Tensor[(168, 8), float64] */;
  %775 = cast(%774, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %776 = %766.5;
  %777 = @func_5942(%768) /* ty=Tensor[(14, 12, 8), float32] */;
  %778 = logical_xor(%771, %772) /* ty=Tensor[(168, 8), uint32] */;
  %779 = sigmoid(%775) /* ty=Tensor[(168, 8), float32] */;
  (%776, %777, %778, %779)
}

def @func_3815() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %780 = @func_497() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %781 = @func_1006() /* ty=Tensor[(13, 16, 6), uint64] */;
  %782 = %780.0;
  (%781, %782)
}

def @func_7193(%var_7174: Tensor[(5, 5, 13), int64]) -> (Tensor[(5, 5, 13), float64], Tensor[(9, 16, 13), uint64]) {
  %783 = cast(%var_7174, dtype="bool") /* ty=Tensor[(5, 5, 13), bool] */;
  %784 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(5, 5, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 5, 13), int64] */, dtype="bool") /* ty=Tensor[(5, 5, 13), bool] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %787 = less_equal(%785, %786) /* ty=Tensor[(5, 5, 13), bool] */;
  %788 = cast(%787, dtype="float64") /* ty=Tensor[(5, 5, 13), float64] */;
  %789 = log10(%788) /* ty=Tensor[(5, 5, 13), float64] */;
  %790 = cast(%789, dtype="float64") /* ty=Tensor[(5, 5, 13), float64] */;
  %791 = @func_3384() /* ty=(Tensor[(9, 16, 13), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64]) */;
  %792 = asin(%790) /* ty=Tensor[(5, 5, 13), float64] */;
  %793 = %791.3;
  (%792, %793)
}

def @func_2739(%var_2659: Tensor[(180, 8), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 13), uint64], Tensor[(9, 16, 10), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(180, 8), float32], Tensor[(11, 7, 16), float64]) {
  %794 = @func_324() /* ty=(Tensor[(9, 16, 13), uint64],) */;
  %795 = cast(%var_2659, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %796 = reshape(%795, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), float64] */;
  %797 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %798 = @func_1192() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %799 = @func_1677() /* ty=(Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64]) */;
  %800 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  %801 = cast(%800, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
  %802 = reshape(%801, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), float64] */;
  %803 = @func_1229(%802) /* ty=(Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64]) */;
  %804 = cast(%var_2659, dtype="float32") /* ty=Tensor[(180, 8), float32] */;
  %805 = @func_1677() /* ty=(Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64]) */;
  %806 = %794.0;
  %807 = @func_773(%796) /* ty=Tensor[(9, 16, 10), float64] */;
  %808 = %797.0;
  %809 = %798.0;
  %810 = @func_1564() /* ty=Tensor[(13, 16, 6), uint64] */;
  %811 = %799.1;
  %812 = @func_1358() /* ty=Tensor[(9, 16, 13), uint64] */;
  %813 = %803.1;
  %814 = log2(%804) /* ty=Tensor[(180, 8), float32] */;
  %815 = %805.1;
  (%800, %806, %807, %808, %809, %810, %811, %812, %813, %814, %815)
}

def @func_6973(%var_6956: Tensor[(1440), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(14, 11, 14), uint8], Tensor[(2156), uint8], Tensor[(13, 16, 6), uint64], Tensor[(1440), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %816 = @func_585() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %817 = cast(meta[relay.Constant][37] /* ty=Tensor[(2156), uint8] */, dtype="uint8") /* ty=Tensor[(2156), uint8] */;
  %818 = cast(meta[relay.Constant][37] /* ty=Tensor[(2156), uint8] */, dtype="uint8") /* ty=Tensor[(2156), uint8] */;
  %819 = reshape(%817, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), uint8] */;
  %820 = reshape(%818, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), uint8] */;
  %821 = @func_4064(%819, %820) /* ty=(Tensor[(14, 11, 14), uint8], Tensor[(13, 16, 6), bool]) */;
  %822 = cast(%var_6956, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %823 = reshape(%822, newshape=[180, 8]) /* ty=Tensor[(180, 8), float64] */;
  %824 = @func_2739(%823) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 13), uint64], Tensor[(9, 16, 10), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(180, 8), float32], Tensor[(11, 7, 16), float64]) */;
  %825 = @func_1110() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %826 = %816.5;
  %827 = %821.0;
  %828 = %824.0;
  %829 = %825.1;
  %830 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%826, %827, meta[relay.Constant][37] /* ty=Tensor[(2156), uint8] */, %828, %var_6956, %829, %830)
}

def @func_4787() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
  %831 = @func_4089() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %832 = @func_2877() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %833 = @func_894() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) */;
  %834 = %831.0;
  %835 = %832.0;
  %836 = %833.2;
  (%834, %835, %836)
}

def @func_7078() -> (Tensor[(13, 16, 6), uint64], Tensor[(2912), float32]) {
  %837 = @func_2877() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %838 = @func_5253() /* ty=(Tensor[(2912), float32],) */;
  %839 = %837.0;
  %840 = %838.0;
  (%839, %840)
}

def @func_3858(%var_3848: Tensor[(1, 16, 11), float32]) -> (Tensor[(1, 16, 11), float32],) {
  %841 = cast(%var_3848, dtype="float32") /* ty=Tensor[(1, 16, 11), float32] */;
  %842 = atanh(%841) /* ty=Tensor[(1, 16, 11), float32] */;
  (%842,)
}

def @func_8124() -> (Tensor[(12, 16), float64],) {
  %843 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 16), float64] */, dtype="float64") /* ty=Tensor[(12, 16), float64] */;
  %844 = log2(%843) /* ty=Tensor[(12, 16), float64] */;
  (%844,)
}

def @func_2318(%var_2307: Tensor[(1248), bool]) -> (Tensor[(13, 16, 6), bool], Tensor[(1248), bool], Tensor[(16, ?, 4), uint32]) {
  %845 = cast(%var_2307, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %846 = reshape(%845, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), bool] */;
  %847 = @func_1420(%846) /* ty=(Tensor[(13, 16, 6), bool],) */;
  %848 = cast(meta[relay.Constant][39] /* ty=Tensor[(16, 1, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %849 = tan(%848) /* ty=Tensor[(16, 1, 4), float32] */;
  %850 = cast(meta[relay.Constant][39] /* ty=Tensor[(16, 1, 4), float32] */, dtype="uint32") /* ty=Tensor[(16, 1, 4), uint32] */;
  %851 = shape_of(%849, dtype="int32") /* ty=Tensor[(3), int32] */;
  %852 = cast(%849, dtype="uint32") /* ty=Tensor[(16, 1, 4), uint32] */;
  %853 = dyn.reshape(%850, %851, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %854 = %847.0;
  %855 = maximum(%852, %853) /* ty=Tensor[(16, ?, 4), uint32] */;
  (%854, %var_2307, %855)
}

def @func_3742(%var_3739: Tensor[(8, 1, 13), float32]) -> Tensor[(8, 1, 13), float32] {
  %856 = cast(%var_3739, dtype="float32") /* ty=Tensor[(8, 1, 13), float32] */;
  log(%856) /* ty=Tensor[(8, 1, 13), float32] */
}

def @func_5429() -> Tensor[(192), float32] {
  %857 = @func_4374() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(24, 8), float32], Tensor[(192), float32], Tensor[(13, 16, 14), float32]) */;
  %857.2
}

def @func_4806() -> Tensor[(13, 16, 6), uint64] {
  %858 = @func_207() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %858.0
}

def @func_4979() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %859 = @func_3815() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %860 = @func_4806() /* ty=Tensor[(13, 16, 6), uint64] */;
  %861 = %859.1;
  (%860, %861)
}

def @func_4321(%var_4280: Tensor[(7, 6, 10), uint8], %var_4281: Tensor[(7, 6, 10), uint8]) -> (Tensor[(7, 6, 10), uint8], Tensor[(7, 6, 10), float64], Tensor[(7, 6, 10), float32]) {
  %862 = cast(%var_4281, dtype="uint8") /* ty=Tensor[(7, 6, 10), uint8] */;
  %863 = shape_of(%var_4280, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(%var_4280, dtype="uint8") /* ty=Tensor[(7, 6, 10), uint8] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %866 = cast(%var_4280, dtype="float64") /* ty=Tensor[(7, 6, 10), float64] */;
  %867 = cast(%var_4281, dtype="float64") /* ty=Tensor[(7, 6, 10), float64] */;
  %868 = cosh(%867) /* ty=Tensor[(7, 6, 10), float64] */;
  %869 = cast(%var_4280, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %870 = shape_of(%868, dtype="int32") /* ty=Tensor[(3), int32] */;
  %871 = cast(%868, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %873 = minimum(%871, %872) /* ty=Tensor[(7, 6, 10), float32] */;
  %874 = cast(%var_4281, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %875 = shape_of(%873, dtype="int32") /* ty=Tensor[(3), int32] */;
  %876 = cast(%873, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %877 = dyn.reshape(%874, %875, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %878 = logical_xor(%864, %865) /* ty=Tensor[(7, 6, 10), uint8] */;
  %879 = log10(%866) /* ty=Tensor[(7, 6, 10), float64] */;
  %880 = floor_mod(%876, %877) /* ty=Tensor[(7, 6, 10), float32] */;
  (%878, %879, %880)
}

def @func_5942(%var_5932: Tensor[(14, 12, 8), float32]) -> Tensor[(14, 12, 8), float32] {
  %881 = cast(%var_5932, dtype="float32") /* ty=Tensor[(14, 12, 8), float32] */;
  erf(%881) /* ty=Tensor[(14, 12, 8), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_775(%var_774: Tensor[(9, 16, 10), float64]) -> Tensor[(9, 16, 10), float64] {
  %3 = fn (%var_760: Tensor[(9, 16, 10), float64]) -> Tensor[(9, 16, 10), float64] {
    %0 = cast(%var_760, dtype="float64") /* ty=Tensor[(9, 16, 10), float64] */;
    %1 = sigmoid(%0) /* ty=Tensor[(9, 16, 10), float64] */;
    %2 = cast(%1, dtype="float64") /* ty=Tensor[(9, 16, 10), float64] */;
    tan(%2) /* ty=Tensor[(9, 16, 10), float64] */
  };
  %3(%var_774) /* ty=Tensor[(9, 16, 10), float64] */
}

def @func_4787() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
  %4 = @func_4089() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %5 = @func_2877() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %6 = @func_894() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) */;
  %7 = %4.0;
  %8 = %5.0;
  %9 = %6.2;
  (%7, %8, %9)
}

def @func_5834() -> (Tensor[(11, 7, 16), float64], Tensor[(5, 3), float64], Tensor[(1248), uint64], Tensor[(15), float64]) {
  %18 = fn () -> (Tensor[(11, 7, 16), float64], Tensor[(5, 3), float64], Tensor[(1248), uint64], Tensor[(15), float64]) {
    %10 = @func_3794() /* ty=(Tensor[(11, 7, 16), float64], Tensor[(13, 16, 6), float64]) */;
    %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(1248), uint64] */, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
    %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(15), float64] */, dtype="float64") /* ty=Tensor[(15), float64] */;
    %13 = reshape(%11, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), uint64] */;
    %14 = reshape(%12, newshape=[5, 3]) /* ty=Tensor[(5, 3), float64] */;
    %15 = @func_3068(%13, %14) /* ty=(Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64], Tensor[(750), int16], Tensor[(750), float64], Tensor[(5, 15, 10), float64], Tensor[(5, 3), float64]) */;
    %16 = %10.0;
    %17 = %15.5;
    (%16, %17, meta[relay.Constant][0] /* ty=Tensor[(1248), uint64] */, meta[relay.Constant][1] /* ty=Tensor[(15), float64] */)
  };
  %18() /* ty=(Tensor[(11, 7, 16), float64], Tensor[(5, 3), float64], Tensor[(1248), uint64], Tensor[(15), float64]) */
}

def @func_3513() -> Tensor[(13, 16, 6), uint64] {
  %19 = fn () -> Tensor[(13, 16, 6), uint64] {
    @func_2371() /* ty=Tensor[(13, 16, 6), uint64] */
  };
  %19() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_6354() -> (Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64]) {
  %20 = @func_1711() /* ty=(Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float32]) */;
  %21 = @func_1192() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %22 = %20.0;
  %23 = %21.0;
  (%22, %23)
}

def @func_1565() -> Tensor[(13, 16, 6), uint64] {
  %24 = fn () -> Tensor[(13, 16, 6), uint64] {
    @func_371() /* ty=Tensor[(13, 16, 6), uint64] */
  };
  %24() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_4526() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(750), float64], Tensor[(750), float64], Tensor[(7, 6, 10), uint8], Tensor[(420), uint8]) {
  %39 = fn () -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(750), float64], Tensor[(750), float64], Tensor[(7, 6, 10), uint8], Tensor[(420), uint8]) {
    %25 = @func_4374() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(24, 8), float32], Tensor[(192), float32], Tensor[(13, 16, 14), float32]) */;
    %26 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %27 = cast(meta[relay.Constant][2] /* ty=Tensor[(750), float64] */, dtype="float64") /* ty=Tensor[(750), float64] */;
    %28 = reshape(%27, newshape=[750]) /* ty=Tensor[(750), float64] */;
    %29 = @func_1844(%28) /* ty=(Tensor[(11, 7, 2), bool], Tensor[(154), float32], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(5, 15, 10), float64], Tensor[(15), float64], Tensor[(750), float64]) */;
    %30 = cast(meta[relay.Constant][3] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
    %31 = cast(meta[relay.Constant][3] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
    %32 = reshape(%30, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), uint8] */;
    %33 = reshape(%31, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), uint8] */;
    %34 = @func_4321(%32, %33) /* ty=(Tensor[(7, 6, 10), uint8], Tensor[(7, 6, 10), float64], Tensor[(7, 6, 10), float32]) */;
    %35 = %25.0;
    %36 = %26.0;
    %37 = %29.6;
    %38 = %34.0;
    (%35, %36, %37, meta[relay.Constant][2] /* ty=Tensor[(750), float64] */, %38, meta[relay.Constant][3] /* ty=Tensor[(420), uint8] */)
  };
  %39() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(750), float64], Tensor[(750), float64], Tensor[(7, 6, 10), uint8], Tensor[(420), uint8]) */
}

def @func_6711() -> (Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), float32], Tensor[(13, 16, 6), uint64], Tensor[(2912), float32], Tensor[(5, 8), float32], Tensor[(40), float32]) {
  %40 = @func_894() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) */;
  %41 = @func_6127() /* ty=(Tensor[(13, 16, 6), float32],) */;
  %42 = @func_497() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %43 = @func_5253() /* ty=(Tensor[(2912), float32],) */;
  %44 = cast(meta[relay.Constant][4] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %45 = reshape(%44, newshape=[5, 8]) /* ty=Tensor[(5, 8), float32] */;
  %46 = %40.2;
  %47 = %41.0;
  %48 = %42.0;
  %49 = %43.0;
  %50 = @func_3717(%45) /* ty=Tensor[(5, 8), float32] */;
  (%46, %47, %48, %49, %50, meta[relay.Constant][4] /* ty=Tensor[(40), float32] */)
}

def @func_8496() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %51 = @func_8358() /* ty=(Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %52 = @func_4146() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) */;
  %53 = %51.2;
  %54 = @func_6502() /* ty=Tensor[(13, 16, 6), uint64] */;
  %55 = %52.0;
  (%53, %54, %55)
}

def @func_1089() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) {
  %56 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %57 = @func_918() /* ty=Tensor[(13, 16, 6), uint64] */;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
  %59 = %56.0;
  %60 = tan(%58) /* ty=Tensor[(13, 16, 6), float64] */;
  (%59, %60)
}

def @func_1711() -> (Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float32]) {
  %61 = @func_460() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %62 = @func_1677() /* ty=(Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64]) */;
  %63 = %62.1;
  %64 = cast(%63, dtype="float32") /* ty=Tensor[(11, 7, 16), float32] */;
  %65 = @func_1358() /* ty=Tensor[(9, 16, 13), uint64] */;
  %66 = %61.1;
  %67 = atan(%64) /* ty=Tensor[(11, 7, 16), float32] */;
  (%65, %66, %67)
}

def @func_4064(%var_4043: Tensor[(14, 11, 14), uint8], %var_4044: Tensor[(14, 11, 14), uint8]) -> (Tensor[(14, 11, 14), uint8], Tensor[(13, 16, 6), bool]) {
  %68 = cast(%var_4044, dtype="uint8") /* ty=Tensor[(14, 11, 14), uint8] */;
  %69 = shape_of(%var_4043, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%var_4043, dtype="uint8") /* ty=Tensor[(14, 11, 14), uint8] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %72 = @func_894() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) */;
  %73 = minimum(%70, %71) /* ty=Tensor[(14, 11, 14), uint8] */;
  %74 = %72.0;
  (%73, %74)
}

def @func_6014(%var_5974: Tensor[(14, 6, 14), float32]) -> (Tensor[(14, 6, 14), float32], Tensor[(13, 16, 6), uint64]) {
  %75 = cast(%var_5974, dtype="float32") /* ty=Tensor[(14, 6, 14), float32] */;
  %76 = @func_5768() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %77 = sigmoid(%75) /* ty=Tensor[(14, 6, 14), float32] */;
  %78 = %76.0;
  (%77, %78)
}

def @func_4216() -> (Tensor[(4, 14, 3), float32], Tensor[(13, 16, 14), float32], Tensor[(2912), float32], Tensor[(4, 14, 3), int64]) {
  @func_4214() /* ty=(Tensor[(4, 14, 3), float32], Tensor[(13, 16, 14), float32], Tensor[(2912), float32], Tensor[(4, 14, 3), int64]) */
}

def @func_1644() -> Tensor[(9, 16, 13), uint64] {
  @func_1642() /* ty=Tensor[(9, 16, 13), uint64] */
}

def @func_4068(%var_4066: Tensor[(14, 11, 14), uint8], %var_4067: Tensor[(14, 11, 14), uint8]) -> (Tensor[(14, 11, 14), uint8], Tensor[(13, 16, 6), bool]) {
  @func_4064(%var_4066, %var_4067) /* ty=(Tensor[(14, 11, 14), uint8], Tensor[(13, 16, 6), bool]) */
}

def @func_7143() -> (Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
  %87 = fn () -> (Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
    %79 = @func_7114() /* ty=(Tensor[(13, 16, 6), bool],) */;
    %80 = @func_4979() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
    %81 = %79.0;
    %82 = cast(%81, dtype="uint64") /* ty=Tensor[(13, 16, 6), uint64] */;
    %83 = reshape(%82, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), uint64] */;
    %84 = @func_264(%83) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) */;
    %85 = %80.0;
    %86 = %84.1;
    (%81, %85, %86)
  };
  %87() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) */
}

def @func_1844(%var_1835: Tensor[(750), float64]) -> (Tensor[(11, 7, 2), bool], Tensor[(154), float32], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(5, 15, 10), float64], Tensor[(15), float64], Tensor[(750), float64]) {
  %88 = cast(meta[relay.Constant][5] /* ty=Tensor[(154), float32] */, dtype="float32") /* ty=Tensor[(154), float32] */;
  %89 = cast(meta[relay.Constant][5] /* ty=Tensor[(154), float32] */, dtype="uint64") /* ty=Tensor[(154), uint64] */;
  %90 = reshape(%88, newshape=[11, 7, 2]) /* ty=Tensor[(11, 7, 2), float32] */;
  %91 = reshape(%89, newshape=[11, 7, 2]) /* ty=Tensor[(11, 7, 2), uint64] */;
  %92 = @func_1156(%90, %91) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 2), bool]) */;
  %93 = @func_918() /* ty=Tensor[(13, 16, 6), uint64] */;
  %94 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 16, 6), uint64] */, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %95 = shape_of(%93, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%93, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %98 = cast(meta[relay.Constant][7] /* ty=Tensor[(15), float64] */, dtype="float64") /* ty=Tensor[(15), float64] */;
  %99 = cast(%var_1835, dtype="float64") /* ty=Tensor[(750), float64] */;
  %100 = reshape(%98, newshape=[1, 15, 1]) /* ty=Tensor[(1, 15, 1), float64] */;
  %101 = reshape(%99, newshape=[5, 15, 10]) /* ty=Tensor[(5, 15, 10), float64] */;
  %102 = @func_1603(%100, %101) /* ty=(Tensor[(5, 15, 10), float64], Tensor[(5, 15, 10), float64]) */;
  %103 = %92.1;
  %104 = not_equal(%96, %97) /* ty=Tensor[(13, 16, 6), bool] */;
  %105 = @func_918() /* ty=Tensor[(13, 16, 6), uint64] */;
  %106 = %102.0;
  (%103, meta[relay.Constant][5] /* ty=Tensor[(154), float32] */, %104, %105, %106, meta[relay.Constant][7] /* ty=Tensor[(15), float64] */, %var_1835)
}

def @func_1678() -> (Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64]) {
  %112 = fn () -> (Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64]) {
    %107 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %108 = %107.0;
    %109 = cast(%108, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
    %110 = cos(%109) /* ty=Tensor[(13, 16, 6), float64] */;
    %111 = @func_1340() /* ty=Tensor[(11, 7, 16), float64] */;
    (%110, %111)
  };
  %112() /* ty=(Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64]) */
}

def @func_2371() -> Tensor[(13, 16, 6), uint64] {
  %113 = @func_497() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %113.0
}

def @func_6017(%var_6015: Tensor[(14, 6, 14), float32]) -> (Tensor[(14, 6, 14), float32], Tensor[(13, 16, 6), uint64]) {
  @func_6014(%var_6015) /* ty=(Tensor[(14, 6, 14), float32], Tensor[(13, 16, 6), uint64]) */
}

def @func_7730(%var_7728: float32, %var_7729: Tensor[(10, 11, 9), float32]) -> (Tensor[(10, 11, 9), float32], Tensor[(13, 16, 6), uint64]) {
  %119 = fn (%var_7704: float32, %var_7705: Tensor[(10, 11, 9), float32]) -> (Tensor[(10, 11, 9), float32], Tensor[(13, 16, 6), uint64]) {
    %114 = cast(%var_7704, dtype="float32") /* ty=float32 */;
    %115 = cast(%var_7705, dtype="float32") /* ty=Tensor[(10, 11, 9), float32] */;
    %116 = @func_5861() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %117 = floor_mod(%114, %115) /* ty=Tensor[(10, 11, 9), float32] */;
    %118 = %116.0;
    (%117, %118)
  };
  %119(%var_7728, %var_7729) /* ty=(Tensor[(10, 11, 9), float32], Tensor[(13, 16, 6), uint64]) */
}

def @func_7802() -> (Tensor[(11, 5, 2), float32],) {
  @func_7800() /* ty=(Tensor[(11, 5, 2), float32],) */
}

def @func_5255() -> (Tensor[(2912), float32],) {
  @func_5253() /* ty=(Tensor[(2912), float32],) */
}

def @func_2458(%var_2442: Tensor[(750), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(750), int16], Tensor[(13, 16, 6), uint64]) {
  %120 = cast(meta[relay.Constant][8] /* ty=Tensor[(750), float64] */, dtype="float64") /* ty=Tensor[(750), float64] */;
  %121 = reshape(%120, newshape=[750]) /* ty=Tensor[(750), float64] */;
  %122 = @func_1844(%121) /* ty=(Tensor[(11, 7, 2), bool], Tensor[(154), float32], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(5, 15, 10), float64], Tensor[(15), float64], Tensor[(750), float64]) */;
  %123 = cast(%var_2442, dtype="int16") /* ty=Tensor[(750), int16] */;
  %124 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(750), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %125 = cast(meta[relay.Constant][8] /* ty=Tensor[(750), float64] */, dtype="int16") /* ty=Tensor[(750), int16] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?), int16] */;
  %127 = @func_1940() /* ty=(Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) */;
  %128 = @func_2221() /* ty=Tensor[(13, 16, 6), uint64] */;
  %129 = %122.3;
  %130 = bitwise_and(%125, %126) /* ty=Tensor[(750), int16] */;
  %131 = %127.1;
  (%128, %129, %130, %131)
}

def @func_3553() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(15, 4, 16), uint8], Tensor[(1, 960), uint8], Tensor[(13, 16, 6), uint64]) {
  @func_3551() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(15, 4, 16), uint8], Tensor[(1, 960), uint8], Tensor[(13, 16, 6), uint64]) */
}

def @func_4789() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
  @func_4787() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) */
}

def @func_8295() -> (Tensor[(13, 16, 6), uint64],) {
  @func_8293() /* ty=(Tensor[(13, 16, 6), uint64],) */
}

def @func_5861() -> (Tensor[(13, 16, 6), uint64],) {
  %132 = @func_3293() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
  %133 = %132.0;
  (%133,)
}

def @func_410() -> (Tensor[(13, 16, 6), uint64],) {
  %134 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%134,)
}

def @func_4448() -> (Tensor[(13, 16, 6), uint64],) {
  %135 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %136 = %135.0;
  (%136,)
}

def @func_5173() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
  @func_5171() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) */
}

def @func_1110() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %137 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %138 = @func_1089() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
  %139 = %137.0;
  %140 = %138.0;
  (%139, %140)
}

def @func_5171() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
  %141 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %142 = @func_3128() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), float64]) */;
  %143 = %141.0;
  %144 = %142.0;
  (%143, %144)
}

def @func_4992() -> (Tensor[(13, 16, 6), uint64],) {
  %147 = fn () -> (Tensor[(13, 16, 6), uint64],) {
    %145 = @func_2877() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %146 = %145.0;
    (%146,)
  };
  %147() /* ty=(Tensor[(13, 16, 6), uint64],) */
}

def @func_8370() -> Tensor[(13, 16, 6), uint64] {
  @func_8368() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_5768() -> (Tensor[(13, 16, 6), uint64],) {
  %148 = @func_1006() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%148,)
}

def @func_8368() -> Tensor[(13, 16, 6), uint64] {
  %149 = @func_7957() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 13), uint64]) */;
  %149.0
}

def @func_6525() -> Tensor[(13, 16, 6), uint64] {
  @func_6523() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_163() -> (Tensor[(13, 16, 6), uint64],) {
  @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */
}

def @func_412() -> (Tensor[(13, 16, 6), uint64],) {
  @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */
}

def @func_4953() -> Tensor[(13, 16, 6), uint64] {
  %150 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %150.0
}

def @func_1855() -> (Tensor[(13, 16, 6), uint64],) {
  %151 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%151,)
}

def @func_8272(%var_8270: Tensor[(13, 16, 14), float32]) -> (Tensor[(13, 16, 14), bool], Tensor[(13, 16, 14), bool]) {
  @func_8269(%var_8270) /* ty=(Tensor[(13, 16, 14), bool], Tensor[(13, 16, 14), bool]) */
}

def @func_7196(%var_7194: Tensor[(5, 5, 13), int64]) -> (Tensor[(5, 5, 13), float64], Tensor[(9, 16, 13), uint64]) {
  @func_7193(%var_7194) /* ty=(Tensor[(5, 5, 13), float64], Tensor[(9, 16, 13), uint64]) */
}

def @func_325() -> (Tensor[(9, 16, 13), uint64],) {
  %157 = fn () -> (Tensor[(9, 16, 13), uint64],) {
    %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 16, 13), uint64] */, dtype="uint64") /* ty=Tensor[(9, 16, 13), uint64] */;
    %153 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(9, 16, 13), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %154 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 16, 13), uint64] */, dtype="uint64") /* ty=Tensor[(9, 16, 13), uint64] */;
    %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %156 = logical_xor(%154, %155) /* ty=Tensor[(9, 16, 13), uint64] */;
    (%156,)
  };
  %157() /* ty=(Tensor[(9, 16, 13), uint64],) */
}

def @func_1091() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) {
  @func_1089() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */
}

def @func_3164() -> Tensor[(13, 16, 6), uint64] {
  %159 = fn () -> Tensor[(13, 16, 6), uint64] {
    %158 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %158.0
  };
  %159() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_8186(%var_8184: Tensor[(7, 7, 15), float64]) -> (Tensor[(7, 7, 15), float64],) {
  @func_8183(%var_8184) /* ty=(Tensor[(7, 7, 15), float64],) */
}

def @func_4852(%var_4851: Tensor[(104), float32]) -> (Tensor[(13, 16, 6), uint64], Tensor[(8, 1, 13), float32], Tensor[(104), float32]) {
  %165 = fn (%var_4844: Tensor[(104), float32]) -> (Tensor[(13, 16, 6), uint64], Tensor[(8, 1, 13), float32], Tensor[(104), float32]) {
    %160 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %161 = cast(%var_4844, dtype="float32") /* ty=Tensor[(104), float32] */;
    %162 = reshape(%161, newshape=[8, 1, 13]) /* ty=Tensor[(8, 1, 13), float32] */;
    %163 = %160.0;
    %164 = @func_3742(%162) /* ty=Tensor[(8, 1, 13), float32] */;
    (%163, %164, %var_4844)
  };
  %165(%var_4851) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(8, 1, 13), float32], Tensor[(104), float32]) */
}

def @func_3860(%var_3859: Tensor[(1, 16, 11), float32]) -> (Tensor[(1, 16, 11), float32],) {
  %168 = fn (%var_3848: Tensor[(1, 16, 11), float32]) -> (Tensor[(1, 16, 11), float32],) {
    %166 = cast(%var_3848, dtype="float32") /* ty=Tensor[(1, 16, 11), float32] */;
    %167 = atanh(%166) /* ty=Tensor[(1, 16, 11), float32] */;
    (%167,)
  };
  %168(%var_3859) /* ty=(Tensor[(1, 16, 11), float32],) */
}

def @func_5770() -> (Tensor[(13, 16, 6), uint64],) {
  @func_5768() /* ty=(Tensor[(13, 16, 6), uint64],) */
}

def @func_7001() -> (Tensor[(13, 16, 14), float64],) {
  @func_6999() /* ty=(Tensor[(13, 16, 14), float64],) */
}

def @func_460() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %169 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %170 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  %171 = %169.0;
  (%170, %171)
}

def @func_5253() -> (Tensor[(2912), float32],) {
  %172 = @func_4214() /* ty=(Tensor[(4, 14, 3), float32], Tensor[(13, 16, 14), float32], Tensor[(2912), float32], Tensor[(4, 14, 3), int64]) */;
  %173 = %172.2;
  (%173,)
}

def @func_4658() -> Tensor[(11, 7, 16), float64] {
  @func_4656() /* ty=Tensor[(11, 7, 16), float64] */
}

def @func_5944(%var_5943: Tensor[(14, 12, 8), float32]) -> Tensor[(14, 12, 8), float32] {
  %175 = fn (%var_5932: Tensor[(14, 12, 8), float32]) -> Tensor[(14, 12, 8), float32] {
    %174 = cast(%var_5932, dtype="float32") /* ty=Tensor[(14, 12, 8), float32] */;
    erf(%174) /* ty=Tensor[(14, 12, 8), float32] */
  };
  %175(%var_5943) /* ty=Tensor[(14, 12, 8), float32] */
}

def @func_4955() -> Tensor[(13, 16, 6), uint64] {
  @func_4953() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_3486(%var_3484: Tensor[(8, 4, 6), float32], %var_3485: Tensor[(1248), float64]) -> (Tensor[(8, 4, 6), float32], Tensor[(13, 16, 6), float64], Tensor[(1248), float64], Tensor[(11, 7, 16), float64], Tensor[(8, 4, 6), float32], Tensor[(13, 16, 6), uint64]) {
  %187 = fn (%var_3420: Tensor[(8, 4, 6), float32], %var_3425: Tensor[(1248), float64]) -> (Tensor[(8, 4, 6), float32], Tensor[(13, 16, 6), float64], Tensor[(1248), float64], Tensor[(11, 7, 16), float64], Tensor[(8, 4, 6), float32], Tensor[(13, 16, 6), uint64]) {
    %176 = cast(%var_3420, dtype="float32") /* ty=Tensor[(8, 4, 6), float32] */;
    %177 = cast(%var_3425, dtype="float64") /* ty=Tensor[(1248), float64] */;
    %178 = reshape(%177, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), float64] */;
    %179 = @func_1229(%178) /* ty=(Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64]) */;
    %180 = cast(%var_3420, dtype="float32") /* ty=Tensor[(8, 4, 6), float32] */;
    %181 = @func_497() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %182 = sigmoid(%176) /* ty=Tensor[(8, 4, 6), float32] */;
    %183 = %179.0;
    %184 = @func_1544() /* ty=Tensor[(11, 7, 16), float64] */;
    %185 = sqrt(%180) /* ty=Tensor[(8, 4, 6), float32] */;
    %186 = %181.0;
    (%182, %183, %var_3425, %184, %185, %186)
  };
  %187(%var_3484, %var_3485) /* ty=(Tensor[(8, 4, 6), float32], Tensor[(13, 16, 6), float64], Tensor[(1248), float64], Tensor[(11, 7, 16), float64], Tensor[(8, 4, 6), float32], Tensor[(13, 16, 6), uint64]) */
}

def @func_8358() -> (Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %188 = @func_1711() /* ty=(Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float32]) */;
  %189 = @func_3384() /* ty=(Tensor[(9, 16, 13), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64]) */;
  %190 = @func_3613() /* ty=Tensor[(13, 16, 6), float64] */;
  %191 = %188.0;
  %192 = %189.1;
  %193 = @func_918() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%190, %191, %192, %193)
}

def @func_6782(%var_6780: Tensor[(168, 8), float32], %var_6781: Tensor[(168, 8), float32]) -> (Tensor[(40), float32], Tensor[(14, 12, 8), float32], Tensor[(168, 8), uint32], Tensor[(168, 8), float32]) {
  @func_6778(%var_6780, %var_6781) /* ty=(Tensor[(40), float32], Tensor[(14, 12, 8), float32], Tensor[(168, 8), uint32], Tensor[(168, 8), float32]) */
}

def @func_1007() -> Tensor[(13, 16, 6), uint64] {
  %195 = fn () -> Tensor[(13, 16, 6), uint64] {
    %194 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %194.0
  };
  %195() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_1194() -> (Tensor[(13, 16, 6), uint64],) {
  @func_1192() /* ty=(Tensor[(13, 16, 6), uint64],) */
}

def @func_2152(%var_2151: Tensor[(750), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(750), uint32], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(750), uint64], Tensor[(750), float32], Tensor[(750), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 14), float64]) {
  %249 = fn (%var_2027: Tensor[(750), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(750), uint32], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(750), uint64], Tensor[(750), float32], Tensor[(750), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 14), float64]) {
    %196 = @func_460() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
    %197 = %196.0;
    %198 = cast(%197, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
    %199 = reshape(%198, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), bool] */;
    %200 = @func_1420(%199) /* ty=(Tensor[(13, 16, 6), bool],) */;
    %201 = cast(%var_2027, dtype="float64") /* ty=Tensor[(750), float64] */;
    %202 = reshape(%201, newshape=[750]) /* ty=Tensor[(750), float64] */;
    %203 = @func_1844(%202) /* ty=(Tensor[(11, 7, 2), bool], Tensor[(154), float32], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(5, 15, 10), float64], Tensor[(15), float64], Tensor[(750), float64]) */;
    %204 = %203.6;
    %205 = cast(%var_2027, dtype="uint32") /* ty=Tensor[(750), uint32] */;
    %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(1), int32] */;
    %207 = cast(%204, dtype="uint32") /* ty=Tensor[(750), uint32] */;
    %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %209 = @func_1089() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
    %210 = @func_1089() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
    %211 = cast(%var_2027, dtype="bool") /* ty=Tensor[(750), bool] */;
    %212 = shape_of(%204, dtype="int32") /* ty=Tensor[(1), int32] */;
    %213 = cast(%204, dtype="bool") /* ty=Tensor[(750), bool] */;
    %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?), bool] */;
    %215 = greater_equal(%213, %214) /* ty=Tensor[(750), bool] */;
    %216 = cast(%215, dtype="uint64") /* ty=Tensor[(750), uint64] */;
    %217 = shape_of(%var_2027, dtype="int32") /* ty=Tensor[(1), int32] */;
    %218 = cast(%var_2027, dtype="uint64") /* ty=Tensor[(750), uint64] */;
    %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %220 = multiply(%218, %219) /* ty=Tensor[(750), uint64] */;
    %221 = cast(%220, dtype="uint64") /* ty=Tensor[(750), uint64] */;
    %222 = shape_of(%215, dtype="int32") /* ty=Tensor[(1), int32] */;
    %223 = cast(%215, dtype="uint64") /* ty=Tensor[(750), uint64] */;
    %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %225 = cast(%215, dtype="int16") /* ty=Tensor[(750), int16] */;
    %226 = shape_of(%204, dtype="int32") /* ty=Tensor[(1), int32] */;
    %227 = cast(%204, dtype="int16") /* ty=Tensor[(750), int16] */;
    %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?), int16] */;
    %229 = left_shift(%227, %228) /* ty=Tensor[(750), int16] */;
    %230 = cast(%229, dtype="float32") /* ty=Tensor[(750), float32] */;
    %231 = shape_of(%var_2027, dtype="int32") /* ty=Tensor[(1), int32] */;
    %232 = cast(%var_2027, dtype="float32") /* ty=Tensor[(750), float32] */;
    %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?), float32] */;
    %234 = cast(%220, dtype="bool") /* ty=Tensor[(750), bool] */;
    %235 = shape_of(%229, dtype="int32") /* ty=Tensor[(1), int32] */;
    %236 = cast(%229, dtype="bool") /* ty=Tensor[(750), bool] */;
    %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?), bool] */;
    %238 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %239 = @func_1940() /* ty=(Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) */;
    %240 = %200.0;
    %241 = maximum(%207, %208) /* ty=Tensor[(750), uint32] */;
    %242 = %209.1;
    %243 = %210.0;
    %244 = logical_xor(%223, %224) /* ty=Tensor[(750), uint64] */;
    %245 = floor_divide(%232, %233) /* ty=Tensor[(750), float32] */;
    %246 = greater(%236, %237) /* ty=Tensor[(750), bool] */;
    %247 = %238.0;
    %248 = %239.0;
    (%197, %240, %241, %242, %243, %244, %245, %246, %247, %248)
  };
  %249(%var_2151) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(750), uint32], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(750), uint64], Tensor[(750), float32], Tensor[(750), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 14), float64]) */
}

def @func_918() -> Tensor[(13, 16, 6), uint64] {
  %250 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %250.0
}

def @func_6713() -> (Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), float32], Tensor[(13, 16, 6), uint64], Tensor[(2912), float32], Tensor[(5, 8), float32], Tensor[(40), float32]) {
  @func_6711() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), float32], Tensor[(13, 16, 6), uint64], Tensor[(2912), float32], Tensor[(5, 8), float32], Tensor[(40), float32]) */
}

def @func_7879(%var_7874: Tensor[(750), float64]) -> (Tensor[(9, 16, 13), uint64], Tensor[(50, 15), float64], Tensor[(750), float64]) {
  %251 = cast(%var_7874, dtype="float64") /* ty=Tensor[(750), float64] */;
  %252 = reshape(%251, newshape=[50, 15]) /* ty=Tensor[(50, 15), float64] */;
  %253 = @func_7620(%252) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(50, 15), float64]) */;
  %254 = @func_1358() /* ty=Tensor[(9, 16, 13), uint64] */;
  %255 = %253.2;
  (%254, %255, %var_7874)
}

def @func_8434(%var_8432: Tensor[(2, 9, 9), float64], %var_8433: Tensor[(2, 9, 9), float64]) -> Tensor[(2, 9, 9), bool] {
  %260 = fn (%var_8424: Tensor[(2, 9, 9), float64], %var_8425: Tensor[(2, 9, 9), float64]) -> Tensor[(2, 9, 9), bool] {
    %256 = cast(%var_8425, dtype="bool") /* ty=Tensor[(2, 9, 9), bool] */;
    %257 = shape_of(%var_8424, dtype="int32") /* ty=Tensor[(3), int32] */;
    %258 = cast(%var_8424, dtype="bool") /* ty=Tensor[(2, 9, 9), bool] */;
    %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%258, %259) /* ty=Tensor[(2, 9, 9), bool] */
  };
  %260(%var_8432, %var_8433) /* ty=Tensor[(2, 9, 9), bool] */
}

def @func_3551() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(15, 4, 16), uint8], Tensor[(1, 960), uint8], Tensor[(13, 16, 6), uint64]) {
  %261 = @func_460() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %262 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 960), uint8] */, dtype="uint8") /* ty=Tensor[(1, 960), uint8] */;
  %263 = reshape(%262, newshape=[15, 4, 16]) /* ty=Tensor[(15, 4, 16), uint8] */;
  %264 = @func_2627(%263) /* ty=(Tensor[(15, 4, 16), uint8],) */;
  %265 = @func_2221() /* ty=Tensor[(13, 16, 6), uint64] */;
  %266 = %261.1;
  %267 = %264.0;
  %268 = @func_3163() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%265, %266, %267, meta[relay.Constant][11] /* ty=Tensor[(1, 960), uint8] */, %268)
}

def @func_6504() -> Tensor[(13, 16, 6), uint64] {
  @func_6502() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_1340() -> Tensor[(11, 7, 16), float64] {
  %269 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(11, 7, 16), float64] */;
  sqrt(%269) /* ty=Tensor[(11, 7, 16), float64] */
}

def @func_6356() -> (Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64]) {
  @func_6354() /* ty=(Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64]) */
}

def @func_6633() -> Tensor[(13, 16, 14), float32] {
  @func_6631() /* ty=Tensor[(13, 16, 14), float32] */
}

def @func_2461(%var_2459: Tensor[(750), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(750), int16], Tensor[(13, 16, 6), uint64]) {
  @func_2458(%var_2459) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(750), int16], Tensor[(13, 16, 6), uint64]) */
}

def @func_4147() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
  %275 = fn () -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
    %270 = @func_918() /* ty=Tensor[(13, 16, 6), uint64] */;
    %271 = cast(%270, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
    %272 = reshape(%271, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), bool] */;
    %273 = @func_1420(%272) /* ty=(Tensor[(13, 16, 6), bool],) */;
    %274 = %273.0;
    (%270, %274)
  };
  %275() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) */
}

def @func_2373() -> Tensor[(13, 16, 6), uint64] {
  @func_2371() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_5567() -> (Tensor[(13, 6), float64],) {
  %276 = @func_4423() /* ty=(Tensor[(13, 6), float64],) */;
  %277 = %276.0;
  (%277,)
}

def @func_8269(%var_8254: Tensor[(13, 16, 14), float32]) -> (Tensor[(13, 16, 14), bool], Tensor[(13, 16, 14), bool]) {
  %278 = @func_6631() /* ty=Tensor[(13, 16, 14), float32] */;
  %279 = cast(%var_8254, dtype="bool") /* ty=Tensor[(13, 16, 14), bool] */;
  %280 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%278, dtype="bool") /* ty=Tensor[(13, 16, 14), bool] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %283 = cast(%var_8254, dtype="bool") /* ty=Tensor[(13, 16, 14), bool] */;
  %284 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%278, dtype="bool") /* ty=Tensor[(13, 16, 14), bool] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %287 = logical_or(%281, %282) /* ty=Tensor[(13, 16, 14), bool] */;
  %288 = equal(%285, %286) /* ty=Tensor[(13, 16, 14), bool] */;
  (%287, %288)
}

def @func_3742(%var_3739: Tensor[(8, 1, 13), float32]) -> Tensor[(8, 1, 13), float32] {
  %289 = cast(%var_3739, dtype="float32") /* ty=Tensor[(8, 1, 13), float32] */;
  log(%289) /* ty=Tensor[(8, 1, 13), float32] */
}

def @func_3028(%var_3026: Tensor[(13, 16, 14), float32]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(13, 16, 14), float32]) {
  @func_3025(%var_3026) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(13, 16, 14), float32]) */
}

def @func_266(%var_265: Tensor[(13, 16, 6), uint64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
  %299 = fn (%var_253: Tensor[(13, 16, 6), uint64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
    %290 = @func_207() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
    %291 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %292 = %291.0;
    %293 = cast(%var_253, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
    %294 = shape_of(%292, dtype="int32") /* ty=Tensor[(3), int32] */;
    %295 = cast(%292, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
    %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %297 = %290.1;
    %298 = greater_equal(%295, %296) /* ty=Tensor[(13, 16, 6), bool] */;
    (%297, %298)
  };
  %299(%var_265) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) */
}

def @func_7116() -> (Tensor[(13, 16, 6), bool],) {
  @func_7114() /* ty=(Tensor[(13, 16, 6), bool],) */
}

def @func_1713() -> (Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float32]) {
  @func_1711() /* ty=(Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float32]) */
}

def @func_7529(%var_7489: Tensor[(1440), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(1440), float64], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), float64], Tensor[(1440), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %300 = @func_4423() /* ty=(Tensor[(13, 6), float64],) */;
  %301 = @func_1677() /* ty=(Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64]) */;
  %302 = cast(%var_7489, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %303 = reshape(%302, newshape=[1440]) /* ty=Tensor[(1440), float64] */;
  %304 = @func_6973(%303) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(14, 11, 14), uint8], Tensor[(2156), uint8], Tensor[(13, 16, 6), uint64], Tensor[(1440), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %305 = %304.4;
  %306 = cast(%305, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %307 = @func_207() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %308 = @func_3512() /* ty=Tensor[(13, 16, 6), uint64] */;
  %309 = %300.0;
  %310 = @func_5234() /* ty=Tensor[(13, 16, 6), uint64] */;
  %311 = @func_3613() /* ty=Tensor[(13, 16, 6), float64] */;
  %312 = %301.0;
  %313 = exp(%306) /* ty=Tensor[(1440), float64] */;
  %314 = %307.1;
  %315 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%308, %309, %310, %var_7489, %311, %312, %313, %314, %315)
}

def @func_499() -> (Tensor[(13, 16, 6), uint64],) {
  @func_497() /* ty=(Tensor[(13, 16, 6), uint64],) */
}

def @func_3709(%var_3700: Tensor[(24, 8), float32]) -> (Tensor[(8, 4, 6), float32], Tensor[(24, 8), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float32]) {
  %316 = cast(%var_3700, dtype="float32") /* ty=Tensor[(24, 8), float32] */;
  %317 = @func_497() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %318 = %317.0;
  %319 = cast(%318, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
  %320 = reshape(%316, newshape=[8, 4, 6]) /* ty=Tensor[(8, 4, 6), float32] */;
  %321 = reshape(%319, newshape=[1248]) /* ty=Tensor[(1248), float64] */;
  %322 = @func_3483(%320, %321) /* ty=(Tensor[(8, 4, 6), float32], Tensor[(13, 16, 6), float64], Tensor[(1248), float64], Tensor[(11, 7, 16), float64], Tensor[(8, 4, 6), float32], Tensor[(13, 16, 6), uint64]) */;
  %323 = @func_1089() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
  %324 = cast(%318, dtype="float32") /* ty=Tensor[(13, 16, 6), float32] */;
  %325 = %322.0;
  %326 = %323.0;
  %327 = acos(%324) /* ty=Tensor[(13, 16, 6), float32] */;
  (%325, %var_3700, %326, %327)
}

def @func_4650() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %333 = fn () -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
    %328 = @func_1192() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %329 = @func_4448() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %330 = %328.0;
    %331 = %329.0;
    %332 = @func_3639() /* ty=Tensor[(13, 16, 6), uint64] */;
    (%330, %331, %332)
  };
  %333() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */
}

def @func_7958() -> (Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 13), uint64]) {
  %337 = fn () -> (Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 13), uint64]) {
    %334 = @func_324() /* ty=(Tensor[(9, 16, 13), uint64],) */;
    %335 = @func_2221() /* ty=Tensor[(13, 16, 6), uint64] */;
    %336 = %334.0;
    (%335, %336)
  };
  %337() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 13), uint64]) */
}

def @func_5430() -> Tensor[(192), float32] {
  %339 = fn () -> Tensor[(192), float32] {
    %338 = @func_4374() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(24, 8), float32], Tensor[(192), float32], Tensor[(13, 16, 14), float32]) */;
    %338.2
  };
  %339() /* ty=Tensor[(192), float32] */
}

def @func_6127() -> (Tensor[(13, 16, 6), float32],) {
  %340 = @func_5768() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %341 = %340.0;
  %342 = cast(%341, dtype="float32") /* ty=Tensor[(13, 16, 6), float32] */;
  %343 = log(%342) /* ty=Tensor[(13, 16, 6), float32] */;
  (%343,)
}

def @func_4089() -> (Tensor[(13, 16, 6), uint64],) {
  %344 = @func_1192() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %345 = %344.0;
  (%345,)
}

def @func_5542(%var_5541: Tensor[(9, 10, 13), float32]) -> Tensor[(9, 10, 13), float64] {
  %349 = fn (%var_5525: Tensor[(9, 10, 13), float32]) -> Tensor[(9, 10, 13), float64] {
    %346 = cast(%var_5525, dtype="float32") /* ty=Tensor[(9, 10, 13), float32] */;
    %347 = acos(%346) /* ty=Tensor[(9, 10, 13), float32] */;
    %348 = cast(%347, dtype="float64") /* ty=Tensor[(9, 10, 13), float64] */;
    sigmoid(%348) /* ty=Tensor[(9, 10, 13), float64] */
  };
  %349(%var_5541) /* ty=Tensor[(9, 10, 13), float64] */
}

def @func_5736(%var_5734: Tensor[(1440), float64]) -> (Tensor[(11, 7, 16), float64], Tensor[(750), float64], Tensor[(1248), uint64], Tensor[(15, 1), float64], Tensor[(9, 16, 10), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
  @func_5733(%var_5734) /* ty=(Tensor[(11, 7, 16), float64], Tensor[(750), float64], Tensor[(1248), uint64], Tensor[(15, 1), float64], Tensor[(9, 16, 10), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) */
}

def @func_5380(%var_5378: Tensor[(14, 3, 2), bool], %var_5379: Tensor[(14, 3, 2), bool]) -> (Tensor[(14, 3, 2), bool], Tensor[(13, 6), float64]) {
  %357 = fn (%var_5370: Tensor[(14, 3, 2), bool], %var_5371: Tensor[(14, 3, 2), bool]) -> (Tensor[(14, 3, 2), bool], Tensor[(13, 6), float64]) {
    %350 = cast(%var_5371, dtype="bool") /* ty=Tensor[(14, 3, 2), bool] */;
    %351 = shape_of(%var_5370, dtype="int32") /* ty=Tensor[(3), int32] */;
    %352 = cast(%var_5370, dtype="bool") /* ty=Tensor[(14, 3, 2), bool] */;
    %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %354 = @func_4423() /* ty=(Tensor[(13, 6), float64],) */;
    %355 = logical_and(%352, %353) /* ty=Tensor[(14, 3, 2), bool] */;
    %356 = %354.0;
    (%355, %356)
  };
  %357(%var_5378, %var_5379) /* ty=(Tensor[(14, 3, 2), bool], Tensor[(13, 6), float64]) */
}

def @func_6037() -> Tensor[(1248), bool] {
  %359 = fn () -> Tensor[(1248), bool] {
    %358 = @func_3107() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(1248), bool]) */;
    %358.1
  };
  %359() /* ty=Tensor[(1248), bool] */
}

def @func_1160(%var_1158: Tensor[(11, 7, 2), float32], %var_1159: Tensor[(11, 7, 2), uint64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 2), bool]) {
  @func_1156(%var_1158, %var_1159) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 2), bool]) */
}

def @func_1847(%var_1845: Tensor[(750), float64]) -> (Tensor[(11, 7, 2), bool], Tensor[(154), float32], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(5, 15, 10), float64], Tensor[(15), float64], Tensor[(750), float64]) {
  @func_1844(%var_1845) /* ty=(Tensor[(11, 7, 2), bool], Tensor[(154), float32], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(5, 15, 10), float64], Tensor[(15), float64], Tensor[(750), float64]) */
}

def @func_4981() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  @func_4979() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */
}

def @func_7974() -> (Tensor[(13, 16, 6), uint64], Tensor[(1248), bool]) {
  @func_7972() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(1248), bool]) */
}

def @func_5733(%var_5713: Tensor[(1440), float64]) -> (Tensor[(11, 7, 16), float64], Tensor[(750), float64], Tensor[(1248), uint64], Tensor[(15, 1), float64], Tensor[(9, 16, 10), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
  %360 = cast(meta[relay.Constant][13] /* ty=Tensor[(1248), uint64] */, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %361 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 1), float64] */;
  %362 = reshape(%360, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), uint64] */;
  %363 = reshape(%361, newshape=[5, 3]) /* ty=Tensor[(5, 3), float64] */;
  %364 = @func_3068(%362, %363) /* ty=(Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64], Tensor[(750), int16], Tensor[(750), float64], Tensor[(5, 15, 10), float64], Tensor[(5, 3), float64]) */;
  %365 = cast(%var_5713, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %366 = reshape(%365, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), float64] */;
  %367 = @func_773(%366) /* ty=Tensor[(9, 16, 10), float64] */;
  %368 = cast(%var_5713, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%367, dtype="float32") /* ty=Tensor[(9, 16, 10), float32] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %372 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %373 = @func_5171() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) */;
  %374 = @func_1340() /* ty=Tensor[(11, 7, 16), float64] */;
  %375 = %364.3;
  %376 = floor_divide(%370, %371) /* ty=Tensor[(9, 16, 10), float32] */;
  %377 = %372.0;
  %378 = %373.1;
  (%374, %375, meta[relay.Constant][13] /* ty=Tensor[(1248), uint64] */, meta[relay.Constant][14] /* ty=Tensor[(15, 1), float64] */, %376, %377, %378)
}

def @func_1289(%var_1287: Tensor[(8, 12, 7), float32], %var_1288: Tensor[(8, 12, 7), float32]) -> Tensor[(8, 12, 7), int64] {
  %388 = fn (%var_1258: Tensor[(8, 12, 7), float32], %var_1259: Tensor[(8, 12, 7), float32]) -> Tensor[(8, 12, 7), int64] {
    %379 = cast(%var_1259, dtype="bool") /* ty=Tensor[(8, 12, 7), bool] */;
    %380 = shape_of(%var_1258, dtype="int32") /* ty=Tensor[(3), int32] */;
    %381 = cast(%var_1258, dtype="bool") /* ty=Tensor[(8, 12, 7), bool] */;
    %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %383 = equal(%381, %382) /* ty=Tensor[(8, 12, 7), bool] */;
    %384 = cast(%var_1258, dtype="int64") /* ty=Tensor[(8, 12, 7), int64] */;
    %385 = shape_of(%383, dtype="int32") /* ty=Tensor[(3), int32] */;
    %386 = cast(%383, dtype="int64") /* ty=Tensor[(8, 12, 7), int64] */;
    %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    bitwise_or(%386, %387) /* ty=Tensor[(8, 12, 7), int64] */
  };
  %388(%var_1287, %var_1288) /* ty=Tensor[(8, 12, 7), int64] */
}

def @func_5235() -> Tensor[(13, 16, 6), uint64] {
  %390 = fn () -> Tensor[(13, 16, 6), uint64] {
    %389 = @func_2877() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %389.0
  };
  %390() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @main(%var_8642: Tensor[(11, 7, 16), float64], %var_8656: Tensor[(154), float32]) -> (Tensor[(2912), float32], Tensor[(11, 7, 16), uint8], Tensor[(13, 16, 6), uint64], Tensor[(154), float32], Tensor[(11, 7, 16), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 14), int8]) {
  %391 = @func_1941() /* ty=(Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) */;
  %392 = %391.4;
  %393 = cast(%var_8642, dtype="uint8") /* ty=Tensor[(11, 7, 16), uint8] */;
  %394 = shape_of(%392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%392, dtype="uint8") /* ty=Tensor[(11, 7, 16), uint8] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %397 = cast(%var_8656, dtype="float32") /* ty=Tensor[(154), float32] */;
  %398 = cast(%var_8656, dtype="uint64") /* ty=Tensor[(154), uint64] */;
  %399 = reshape(%397, newshape=[11, 7, 2]) /* ty=Tensor[(11, 7, 2), float32] */;
  %400 = reshape(%398, newshape=[11, 7, 2]) /* ty=Tensor[(11, 7, 2), uint64] */;
  %401 = @func_1160(%399, %400) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 2), bool]) */;
  %402 = cast(meta[relay.Constant][15] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %403 = reshape(%402, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), float32] */;
  %404 = @func_8272(%403) /* ty=(Tensor[(13, 16, 14), bool], Tensor[(13, 16, 14), bool]) */;
  %405 = %404.1;
  %406 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 16, 14), bool] */, dtype="int8") /* ty=Tensor[(13, 16, 14), int8] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%405, dtype="int8") /* ty=Tensor[(13, 16, 14), int8] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %410 = right_shift(%395, %396) /* ty=Tensor[(11, 7, 16), uint8] */;
  %411 = %401.0;
  %412 = @func_4656() /* ty=Tensor[(11, 7, 16), float64] */;
  %413 = @func_7367() /* ty=Tensor[(13, 16, 6), uint64] */;
  %414 = logical_xor(%408, %409) /* ty=Tensor[(13, 16, 14), int8] */;
  (meta[relay.Constant][15] /* ty=Tensor[(2912), float32] */, %410, %411, %var_8656, %412, %413, %414)
}

def @func_2739(%var_2659: Tensor[(180, 8), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 13), uint64], Tensor[(9, 16, 10), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(180, 8), float32], Tensor[(11, 7, 16), float64]) {
  %415 = @func_324() /* ty=(Tensor[(9, 16, 13), uint64],) */;
  %416 = cast(%var_2659, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %417 = reshape(%416, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), float64] */;
  %418 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %419 = @func_1192() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %420 = @func_1677() /* ty=(Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64]) */;
  %421 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  %422 = cast(%421, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
  %423 = reshape(%422, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), float64] */;
  %424 = @func_1229(%423) /* ty=(Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64]) */;
  %425 = cast(%var_2659, dtype="float32") /* ty=Tensor[(180, 8), float32] */;
  %426 = @func_1677() /* ty=(Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64]) */;
  %427 = %415.0;
  %428 = @func_773(%417) /* ty=Tensor[(9, 16, 10), float64] */;
  %429 = %418.0;
  %430 = %419.0;
  %431 = @func_1564() /* ty=Tensor[(13, 16, 6), uint64] */;
  %432 = %420.1;
  %433 = @func_1358() /* ty=Tensor[(9, 16, 13), uint64] */;
  %434 = %424.1;
  %435 = log2(%425) /* ty=Tensor[(180, 8), float32] */;
  %436 = %426.1;
  (%421, %427, %428, %429, %430, %431, %432, %433, %434, %435, %436)
}

def @func_1857() -> (Tensor[(13, 16, 6), uint64],) {
  @func_1855() /* ty=(Tensor[(13, 16, 6), uint64],) */
}

def @func_7387(%var_7382: Tensor[(11, 5, 9), uint16]) -> (Tensor[(11, 5, 9), uint16], Tensor[(9, 16, 13), uint64], Tensor[(65, 5), int64], Tensor[(11, 5, 9), uint64]) {
  %437 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 5, 9), uint16] */, dtype="uint16") /* ty=Tensor[(11, 5, 9), uint16] */;
  %438 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(11, 5, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 5, 9), uint16] */, dtype="uint16") /* ty=Tensor[(11, 5, 9), uint16] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %441 = cast(meta[relay.Constant][19] /* ty=Tensor[(65, 5), int64] */, dtype="int64") /* ty=Tensor[(65, 5), int64] */;
  %442 = reshape(%441, newshape=[5, 5, 13]) /* ty=Tensor[(5, 5, 13), int64] */;
  %443 = @func_7193(%442) /* ty=(Tensor[(5, 5, 13), float64], Tensor[(9, 16, 13), uint64]) */;
  %444 = cast(%var_7382, dtype="uint64") /* ty=Tensor[(11, 5, 9), uint64] */;
  %445 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(11, 5, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 5, 9), uint16] */, dtype="uint64") /* ty=Tensor[(11, 5, 9), uint64] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %448 = minimum(%439, %440) /* ty=Tensor[(11, 5, 9), uint16] */;
  %449 = %443.1;
  %450 = left_shift(%446, %447) /* ty=Tensor[(11, 5, 9), uint64] */;
  (%448, %449, meta[relay.Constant][19] /* ty=Tensor[(65, 5), int64] */, %450)
}

def @func_3294() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) {
  %456 = fn () -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) {
    %451 = @func_460() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
    %452 = %451.1;
    %453 = cast(%452, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
    %454 = @func_918() /* ty=Tensor[(13, 16, 6), uint64] */;
    %455 = erf(%453) /* ty=Tensor[(13, 16, 6), float64] */;
    (%454, %455)
  };
  %456() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */
}

def @func_4807() -> Tensor[(13, 16, 6), uint64] {
  %458 = fn () -> Tensor[(13, 16, 6), uint64] {
    %457 = @func_207() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
    %457.0
  };
  %458() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_2548() -> (Tensor[(13, 16, 6), uint64],) {
  @func_2546() /* ty=(Tensor[(13, 16, 6), uint64],) */
}

def @func_8063(%var_8062: Tensor[(1440), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(2912), float32], Tensor[(13, 16, 6), uint64], Tensor[(1440), float64]) {
  %469 = fn (%var_8051: Tensor[(1440), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(2912), float32], Tensor[(13, 16, 6), uint64], Tensor[(1440), float64]) {
    %459 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %460 = cast(meta[relay.Constant][20] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
    %461 = reshape(%460, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), float32] */;
    %462 = @func_3025(%461) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(13, 16, 14), float32]) */;
    %463 = cast(%var_8051, dtype="float64") /* ty=Tensor[(1440), float64] */;
    %464 = reshape(%463, newshape=[1440]) /* ty=Tensor[(1440), float64] */;
    %465 = @func_6973(%464) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(14, 11, 14), uint8], Tensor[(2156), uint8], Tensor[(13, 16, 6), uint64], Tensor[(1440), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
    %466 = %459.0;
    %467 = %462.1;
    %468 = %465.0;
    (%466, %467, meta[relay.Constant][20] /* ty=Tensor[(2912), float32] */, %468, %var_8051)
  };
  %469(%var_8062) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(2912), float32], Tensor[(13, 16, 6), uint64], Tensor[(1440), float64]) */
}

def @func_8293() -> (Tensor[(13, 16, 6), uint64],) {
  %470 = @func_2371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%470,)
}

def @func_6975(%var_6974: Tensor[(1440), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(14, 11, 14), uint8], Tensor[(2156), uint8], Tensor[(13, 16, 6), uint64], Tensor[(1440), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %486 = fn (%var_6956: Tensor[(1440), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(14, 11, 14), uint8], Tensor[(2156), uint8], Tensor[(13, 16, 6), uint64], Tensor[(1440), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
    %471 = @func_585() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
    %472 = cast(meta[relay.Constant][21] /* ty=Tensor[(2156), uint8] */, dtype="uint8") /* ty=Tensor[(2156), uint8] */;
    %473 = cast(meta[relay.Constant][21] /* ty=Tensor[(2156), uint8] */, dtype="uint8") /* ty=Tensor[(2156), uint8] */;
    %474 = reshape(%472, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), uint8] */;
    %475 = reshape(%473, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), uint8] */;
    %476 = @func_4064(%474, %475) /* ty=(Tensor[(14, 11, 14), uint8], Tensor[(13, 16, 6), bool]) */;
    %477 = cast(%var_6956, dtype="float64") /* ty=Tensor[(1440), float64] */;
    %478 = reshape(%477, newshape=[180, 8]) /* ty=Tensor[(180, 8), float64] */;
    %479 = @func_2739(%478) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 13), uint64], Tensor[(9, 16, 10), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(180, 8), float32], Tensor[(11, 7, 16), float64]) */;
    %480 = @func_1110() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
    %481 = %471.5;
    %482 = %476.0;
    %483 = %479.0;
    %484 = %480.1;
    %485 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
    (%481, %482, meta[relay.Constant][21] /* ty=Tensor[(2156), uint8] */, %483, %var_6956, %484, %485)
  };
  %486(%var_6974) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(14, 11, 14), uint8], Tensor[(2156), uint8], Tensor[(13, 16, 6), uint64], Tensor[(1440), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */
}

def @func_6129() -> (Tensor[(13, 16, 6), float32],) {
  @func_6127() /* ty=(Tensor[(13, 16, 6), float32],) */
}

def @func_497() -> (Tensor[(13, 16, 6), uint64],) {
  %487 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%487,)
}

def @func_4555() -> (Tensor[(13, 16, 6), uint64],) {
  %488 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%488,)
}

def @func_3385() -> (Tensor[(9, 16, 13), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64]) {
  %499 = fn () -> (Tensor[(9, 16, 13), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64]) {
    %489 = @func_1358() /* ty=Tensor[(9, 16, 13), uint64] */;
    %490 = cast(%489, dtype="float32") /* ty=Tensor[(9, 16, 13), float32] */;
    %491 = @func_2877() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %492 = %491.0;
    %493 = cast(%492, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
    %494 = reshape(%493, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), float64] */;
    %495 = @func_1229(%494) /* ty=(Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64]) */;
    %496 = tan(%490) /* ty=Tensor[(9, 16, 13), float32] */;
    %497 = %495.0;
    %498 = @func_1642() /* ty=Tensor[(9, 16, 13), uint64] */;
    (%496, %492, %497, %498)
  };
  %499() /* ty=(Tensor[(9, 16, 13), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64]) */
}

def @func_3720(%var_3718: Tensor[(5, 8), float32]) -> Tensor[(5, 8), float32] {
  @func_3717(%var_3718) /* ty=Tensor[(5, 8), float32] */
}

def @func_4557() -> (Tensor[(13, 16, 6), uint64],) {
  @func_4555() /* ty=(Tensor[(13, 16, 6), uint64],) */
}

def @func_586() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %513 = fn () -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
    %500 = @func_207() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
    %501 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
    %502 = cast(%501, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
    %503 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %504 = @func_497() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %505 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %506 = %500.1;
    %507 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
    %508 = sinh(%502) /* ty=Tensor[(13, 16, 6), float64] */;
    %509 = %503.0;
    %510 = %504.0;
    %511 = %505.0;
    %512 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
    (%506, %507, %508, %509, %510, %511, %512)
  };
  %513() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */
}

def @func_7687() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %518 = fn () -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
    %514 = @func_5768() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %515 = @func_2877() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %516 = %514.0;
    %517 = %515.0;
    (%516, %517)
  };
  %518() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */
}

def @func_6631() -> Tensor[(13, 16, 14), float32] {
  %519 = @func_4214() /* ty=(Tensor[(4, 14, 3), float32], Tensor[(13, 16, 14), float32], Tensor[(2912), float32], Tensor[(4, 14, 3), int64]) */;
  %519.1
}

def @func_7784() -> Tensor[(13, 16, 6), uint64] {
  %520 = @func_2877() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %520.0
}

def @func_5920() -> Tensor[(13, 16, 6), uint64] {
  %521 = @func_4979() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %521.1
}

def @func_8391() -> (Tensor[(13, 16, 6), uint64],) {
  %524 = fn () -> (Tensor[(13, 16, 6), uint64],) {
    %522 = @func_894() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) */;
    %523 = %522.1;
    (%523,)
  };
  %524() /* ty=(Tensor[(13, 16, 6), uint64],) */
}

def @func_7532(%var_7530: Tensor[(1440), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(1440), float64], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), float64], Tensor[(1440), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  @func_7529(%var_7530) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(1440), float64], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), float64], Tensor[(1440), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */
}

def @func_3745(%var_3743: Tensor[(8, 1, 13), float32]) -> Tensor[(8, 1, 13), float32] {
  @func_3742(%var_3743) /* ty=Tensor[(8, 1, 13), float32] */
}

def @func_7114() -> (Tensor[(13, 16, 6), bool],) {
  %525 = @func_3128() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), float64]) */;
  %526 = %525.0;
  (%526,)
}

def @func_8544(%var_8504: Tensor[(6, 6, 14), float64], %var_8505: Tensor[(6, 6, 14), float64], %var_8517: Tensor[(1, 1440), float64], %var_8521: Tensor[(2156), uint8], %var_8535: Tensor[(6, 6, 14), float64]) -> (Tensor[(192), float32], Tensor[(13, 16, 14), float64], Tensor[(1, 1440), float64], Tensor[(14, 11, 14), uint8], Tensor[(2156), uint8], Tensor[(9, 16, 13), uint64], Tensor[(6, 6, 14), bool], Tensor[(6, 6, 14), int8]) {
  %527 = cast(%var_8517, dtype="float64") /* ty=Tensor[(1, 1440), float64] */;
  %528 = reshape(%527, newshape=[1440]) /* ty=Tensor[(1440), float64] */;
  %529 = @func_4039(%528) /* ty=(Tensor[(9, 16, 13), uint64], Tensor[(1440), float64], Tensor[(9, 16, 10), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), float64]) */;
  %530 = cast(%var_8521, dtype="uint8") /* ty=Tensor[(2156), uint8] */;
  %531 = cast(%var_8521, dtype="uint8") /* ty=Tensor[(2156), uint8] */;
  %532 = reshape(%530, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), uint8] */;
  %533 = reshape(%531, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), uint8] */;
  %534 = @func_4064(%532, %533) /* ty=(Tensor[(14, 11, 14), uint8], Tensor[(13, 16, 6), bool]) */;
  %535 = @func_324() /* ty=(Tensor[(9, 16, 13), uint64],) */;
  %536 = cast(%var_8505, dtype="float64") /* ty=Tensor[(6, 6, 14), float64] */;
  %537 = shape_of(%var_8504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%var_8504, dtype="float64") /* ty=Tensor[(6, 6, 14), float64] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %540 = power(%538, %539) /* ty=Tensor[(6, 6, 14), float64] */;
  %541 = cast(%var_8505, dtype="bool") /* ty=Tensor[(6, 6, 14), bool] */;
  %542 = shape_of(%540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%540, dtype="bool") /* ty=Tensor[(6, 6, 14), bool] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %545 = cast(%var_8535, dtype="int8") /* ty=Tensor[(6, 6, 14), int8] */;
  %546 = shape_of(%var_8505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%var_8505, dtype="int8") /* ty=Tensor[(6, 6, 14), int8] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %549 = @func_5429() /* ty=Tensor[(192), float32] */;
  %550 = %529.5;
  %551 = %534.0;
  %552 = %535.0;
  %553 = not_equal(%543, %544) /* ty=Tensor[(6, 6, 14), bool] */;
  %554 = maximum(%547, %548) /* ty=Tensor[(6, 6, 14), int8] */;
  (%549, %550, %var_8517, %551, %var_8521, %552, %553, %554)
}

def @func_6778(%var_6736: Tensor[(168, 8), float32], %var_6744: Tensor[(168, 8), float32]) -> (Tensor[(40), float32], Tensor[(14, 12, 8), float32], Tensor[(168, 8), uint32], Tensor[(168, 8), float32]) {
  %555 = @func_6711() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), float32], Tensor[(13, 16, 6), uint64], Tensor[(2912), float32], Tensor[(5, 8), float32], Tensor[(40), float32]) */;
  %556 = cast(%var_6736, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %557 = reshape(%556, newshape=[14, 12, 8]) /* ty=Tensor[(14, 12, 8), float32] */;
  %558 = cast(%var_6744, dtype="uint32") /* ty=Tensor[(168, 8), uint32] */;
  %559 = shape_of(%var_6736, dtype="int32") /* ty=Tensor[(2), int32] */;
  %560 = cast(%var_6736, dtype="uint32") /* ty=Tensor[(168, 8), uint32] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %562 = cast(%var_6744, dtype="float64") /* ty=Tensor[(168, 8), float64] */;
  %563 = exp(%562) /* ty=Tensor[(168, 8), float64] */;
  %564 = cast(%563, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %565 = %555.5;
  %566 = @func_5942(%557) /* ty=Tensor[(14, 12, 8), float32] */;
  %567 = logical_xor(%560, %561) /* ty=Tensor[(168, 8), uint32] */;
  %568 = sigmoid(%564) /* ty=Tensor[(168, 8), float32] */;
  (%565, %566, %567, %568)
}

def @func_462() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  @func_460() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */
}

def @func_1358() -> Tensor[(9, 16, 13), uint64] {
  %569 = @func_324() /* ty=(Tensor[(9, 16, 13), uint64],) */;
  %569.0
}

def @func_3128() -> (Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), float64]) {
  %570 = @func_894() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) */;
  %571 = @func_1677() /* ty=(Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64]) */;
  %572 = %570.0;
  %573 = %571.0;
  (%572, %573)
}

def @func_1607(%var_1605: Tensor[(1, 15, 1), float64], %var_1606: Tensor[(5, 15, 10), float64]) -> (Tensor[(5, 15, 10), float64], Tensor[(5, 15, 10), float64]) {
  @func_1603(%var_1605, %var_1606) /* ty=(Tensor[(5, 15, 10), float64], Tensor[(5, 15, 10), float64]) */
}

def @func_4321(%var_4280: Tensor[(7, 6, 10), uint8], %var_4281: Tensor[(7, 6, 10), uint8]) -> (Tensor[(7, 6, 10), uint8], Tensor[(7, 6, 10), float64], Tensor[(7, 6, 10), float32]) {
  %574 = cast(%var_4281, dtype="uint8") /* ty=Tensor[(7, 6, 10), uint8] */;
  %575 = shape_of(%var_4280, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%var_4280, dtype="uint8") /* ty=Tensor[(7, 6, 10), uint8] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %578 = cast(%var_4280, dtype="float64") /* ty=Tensor[(7, 6, 10), float64] */;
  %579 = cast(%var_4281, dtype="float64") /* ty=Tensor[(7, 6, 10), float64] */;
  %580 = cosh(%579) /* ty=Tensor[(7, 6, 10), float64] */;
  %581 = cast(%var_4280, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%580, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %585 = minimum(%583, %584) /* ty=Tensor[(7, 6, 10), float32] */;
  %586 = cast(%var_4281, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%585, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %590 = logical_xor(%576, %577) /* ty=Tensor[(7, 6, 10), uint8] */;
  %591 = log10(%578) /* ty=Tensor[(7, 6, 10), float64] */;
  %592 = floor_mod(%588, %589) /* ty=Tensor[(7, 6, 10), float32] */;
  (%590, %591, %592)
}

def @func_7368() -> Tensor[(13, 16, 6), uint64] {
  %593 = fn () -> Tensor[(13, 16, 6), uint64] {
    @func_2371() /* ty=Tensor[(13, 16, 6), uint64] */
  };
  %593() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_3639() -> Tensor[(13, 16, 6), uint64] {
  %594 = @func_1855() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %594.0
}

def @func_8498() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  @func_8496() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */
}

def @func_8583(%var_8572: Tensor[(192), float32]) -> (Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64], Tensor[(192), float32]) {
  %595 = cast(%var_8572, dtype="float32") /* ty=Tensor[(192), float32] */;
  %596 = cast(%var_8572, dtype="float32") /* ty=Tensor[(192), float32] */;
  %597 = cast(%var_8572, dtype="float32") /* ty=Tensor[(192), float32] */;
  %598 = reshape(%595, newshape=[24, 8]) /* ty=Tensor[(24, 8), float32] */;
  %599 = reshape(%596, newshape=[24, 8]) /* ty=Tensor[(24, 8), float32] */;
  %600 = reshape(%597, newshape=[24, 8]) /* ty=Tensor[(24, 8), float32] */;
  %601 = @func_7282(%598, %599, %600) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(24, 8), float64], Tensor[(24, 8), float64], Tensor[(24, 8), uint32], Tensor[(11, 7, 16), float64], Tensor[(24, 8), float64]) */;
  %602 = @func_3613() /* ty=Tensor[(13, 16, 6), float64] */;
  %603 = %601.4;
  (%602, %603, %var_8572)
}

def @func_7692() -> (Tensor[(13, 16, 6), uint64],) {
  %606 = fn () -> (Tensor[(13, 16, 6), uint64],) {
    %604 = @func_894() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) */;
    %605 = %604.1;
    (%605,)
  };
  %606() /* ty=(Tensor[(13, 16, 6), uint64],) */
}

def @func_7972() -> (Tensor[(13, 16, 6), uint64], Tensor[(1248), bool]) {
  %607 = @func_4806() /* ty=Tensor[(13, 16, 6), uint64] */;
  %608 = @func_6036() /* ty=Tensor[(1248), bool] */;
  (%607, %608)
}

def @func_894() -> (Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) {
  %609 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %610 = %609.0;
  %611 = @func_585() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %612 = %611.5;
  %613 = cast(%612, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %614 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%610, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %617 = @func_410() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %618 = cast(%610, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %619 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%612, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %622 = cast(%612, dtype="int16") /* ty=Tensor[(13, 16, 6), int16] */;
  %623 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%610, dtype="int16") /* ty=Tensor[(13, 16, 6), int16] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %626 = less_equal(%615, %616) /* ty=Tensor[(13, 16, 6), bool] */;
  %627 = %617.0;
  %628 = logical_and(%620, %621) /* ty=Tensor[(13, 16, 6), bool] */;
  %629 = left_shift(%624, %625) /* ty=Tensor[(13, 16, 6), int16] */;
  (%626, %627, %628, %629)
}

def @func_3071(%var_3069: Tensor[(13, 16, 6), uint64], %var_3070: Tensor[(5, 3), float64]) -> (Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64], Tensor[(750), int16], Tensor[(750), float64], Tensor[(5, 15, 10), float64], Tensor[(5, 3), float64]) {
  %648 = fn (%var_3039: Tensor[(13, 16, 6), uint64], %var_3066: Tensor[(5, 3), float64]) -> (Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64], Tensor[(750), int16], Tensor[(750), float64], Tensor[(5, 15, 10), float64], Tensor[(5, 3), float64]) {
    %630 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %631 = %630.0;
    %632 = cast(%var_3039, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
    %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
    %634 = cast(%631, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
    %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %636 = cast(meta[relay.Constant][22] /* ty=Tensor[(750), float64] */, dtype="float64") /* ty=Tensor[(750), float64] */;
    %637 = reshape(%636, newshape=[750]) /* ty=Tensor[(750), float64] */;
    %638 = @func_2458(%637) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(750), int16], Tensor[(13, 16, 6), uint64]) */;
    %639 = cast(%var_3066, dtype="float64") /* ty=Tensor[(5, 3), float64] */;
    %640 = cast(meta[relay.Constant][22] /* ty=Tensor[(750), float64] */, dtype="float64") /* ty=Tensor[(750), float64] */;
    %641 = reshape(%639, newshape=[1, 15, 1]) /* ty=Tensor[(1, 15, 1), float64] */;
    %642 = reshape(%640, newshape=[5, 15, 10]) /* ty=Tensor[(5, 15, 10), float64] */;
    %643 = @func_1603(%641, %642) /* ty=(Tensor[(5, 15, 10), float64], Tensor[(5, 15, 10), float64]) */;
    %644 = floor_mod(%634, %635) /* ty=Tensor[(13, 16, 6), float64] */;
    %645 = @func_1642() /* ty=Tensor[(9, 16, 13), uint64] */;
    %646 = %638.2;
    %647 = %643.1;
    (%644, %645, %646, meta[relay.Constant][22] /* ty=Tensor[(750), float64] */, %647, %var_3066)
  };
  %648(%var_3069, %var_3070) /* ty=(Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64], Tensor[(750), int16], Tensor[(750), float64], Tensor[(5, 15, 10), float64], Tensor[(5, 3), float64]) */
}

def @func_2742(%var_2740: Tensor[(180, 8), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 13), uint64], Tensor[(9, 16, 10), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(180, 8), float32], Tensor[(11, 7, 16), float64]) {
  @func_2739(%var_2740) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 13), uint64], Tensor[(9, 16, 10), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(180, 8), float32], Tensor[(11, 7, 16), float64]) */
}

def @func_3614() -> Tensor[(13, 16, 6), float64] {
  %650 = fn () -> Tensor[(13, 16, 6), float64] {
    %649 = @func_3293() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
    %649.1
  };
  %650() /* ty=Tensor[(13, 16, 6), float64] */
}

def @func_1231(%var_1230: Tensor[(13, 16, 6), float64]) -> (Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64]) {
  %659 = fn (%var_1214: Tensor[(13, 16, 6), float64]) -> (Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64]) {
    %651 = @func_1089() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
    %652 = %651.1;
    %653 = cast(%var_1214, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
    %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
    %655 = cast(%652, dtype="float64") /* ty=Tensor[(13, 16, 6), float64] */;
    %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %657 = floor_divide(%655, %656) /* ty=Tensor[(13, 16, 6), float64] */;
    %658 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
    (%657, %658)
  };
  %659(%var_1230) /* ty=(Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64]) */
}

def @func_7786() -> Tensor[(13, 16, 6), uint64] {
  @func_7784() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_1422(%var_1421: Tensor[(13, 16, 6), bool]) -> (Tensor[(13, 16, 6), bool],) {
  %667 = fn (%var_1409: Tensor[(13, 16, 6), bool]) -> (Tensor[(13, 16, 6), bool],) {
    %660 = @func_894() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) */;
    %661 = %660.0;
    %662 = cast(%var_1409, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
    %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
    %664 = cast(%661, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
    %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %666 = greater(%664, %665) /* ty=Tensor[(13, 16, 6), bool] */;
    (%666,)
  };
  %667(%var_1421) /* ty=(Tensor[(13, 16, 6), bool],) */
}

def @func_7623(%var_7621: Tensor[(50, 15), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(50, 15), float64]) {
  @func_7620(%var_7621) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(50, 15), float64]) */
}

def @func_1603(%var_1582: Tensor[(1, 15, 1), float64], %var_1583: Tensor[(5, 15, 10), float64]) -> (Tensor[(5, 15, 10), float64], Tensor[(5, 15, 10), float64]) {
  %668 = cast(%var_1582, dtype="float64") /* ty=Tensor[(1, 15, 1), float64] */;
  %669 = cast(%var_1583, dtype="float64") /* ty=Tensor[(5, 15, 10), float64] */;
  %670 = cast(%var_1583, dtype="float64") /* ty=Tensor[(5, 15, 10), float64] */;
  %671 = cast(%var_1582, dtype="float64") /* ty=Tensor[(1, 15, 1), float64] */;
  %672 = floor_mod(%668, %669) /* ty=Tensor[(5, 15, 10), float64] */;
  %673 = divide(%670, %671) /* ty=Tensor[(5, 15, 10), float64] */;
  (%672, %673)
}

def @func_7287(%var_7284: Tensor[(24, 8), float32], %var_7285: Tensor[(24, 8), float32], %var_7286: Tensor[(24, 8), float32]) -> (Tensor[(13, 16, 6), uint64], Tensor[(24, 8), float64], Tensor[(24, 8), float64], Tensor[(24, 8), uint32], Tensor[(11, 7, 16), float64], Tensor[(24, 8), float64]) {
  @func_7282(%var_7284, %var_7285, %var_7286) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(24, 8), float64], Tensor[(24, 8), float64], Tensor[(24, 8), uint32], Tensor[(11, 7, 16), float64], Tensor[(24, 8), float64]) */
}

def @func_3641() -> Tensor[(13, 16, 6), uint64] {
  @func_3639() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_4979() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %674 = @func_3815() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %675 = @func_4806() /* ty=Tensor[(13, 16, 6), uint64] */;
  %676 = %674.1;
  (%675, %676)
}

def @func_5858() -> Tensor[(13, 16, 6), uint64] {
  %678 = fn () -> Tensor[(13, 16, 6), uint64] {
    %677 = @func_2546() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %677.0
  };
  %678() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_7620(%var_7616: Tensor[(50, 15), float64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(50, 15), float64]) {
  %679 = @func_4448() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %680 = cast(%var_7616, dtype="float64") /* ty=Tensor[(50, 15), float64] */;
  %681 = reshape(%680, newshape=[750]) /* ty=Tensor[(750), float64] */;
  %682 = @func_2458(%681) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(750), int16], Tensor[(13, 16, 6), uint64]) */;
  %683 = %679.0;
  %684 = %682.3;
  (%683, %684, %var_7616)
}

def @func_1360() -> Tensor[(9, 16, 13), uint64] {
  @func_1358() /* ty=Tensor[(9, 16, 13), uint64] */
}

def @func_4423() -> (Tensor[(13, 6), float64],) {
  %685 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 6), float64] */, dtype="float64") /* ty=Tensor[(13, 6), float64] */;
  %686 = sqrt(%685) /* ty=Tensor[(13, 6), float64] */;
  (%686,)
}

def @func_7282(%var_7234: Tensor[(24, 8), float32], %var_7241: Tensor[(24, 8), float32], %var_7249: Tensor[(24, 8), float32]) -> (Tensor[(13, 16, 6), uint64], Tensor[(24, 8), float64], Tensor[(24, 8), float64], Tensor[(24, 8), uint32], Tensor[(11, 7, 16), float64], Tensor[(24, 8), float64]) {
  %687 = @func_4787() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) */;
  %688 = @func_4374() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(24, 8), float32], Tensor[(192), float32], Tensor[(13, 16, 14), float32]) */;
  %689 = %688.1;
  %690 = cast(%var_7241, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %691 = shape_of(%689, dtype="int32") /* ty=Tensor[(2), int32] */;
  %692 = cast(%689, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %694 = cast(%var_7249, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %695 = shape_of(%689, dtype="int32") /* ty=Tensor[(2), int32] */;
  %696 = cast(%689, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %698 = cast(%var_7234, dtype="uint32") /* ty=Tensor[(24, 8), uint32] */;
  %699 = shape_of(%689, dtype="int32") /* ty=Tensor[(2), int32] */;
  %700 = cast(%689, dtype="uint32") /* ty=Tensor[(24, 8), uint32] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %702 = bitwise_and(%700, %701) /* ty=Tensor[(24, 8), uint32] */;
  %703 = cast(%702, dtype="uint32") /* ty=Tensor[(24, 8), uint32] */;
  %704 = shape_of(%var_7241, dtype="int32") /* ty=Tensor[(2), int32] */;
  %705 = cast(%var_7241, dtype="uint32") /* ty=Tensor[(24, 8), uint32] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %707 = cast(%var_7241, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %708 = cosh(%707) /* ty=Tensor[(24, 8), float64] */;
  %709 = cast(%708, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %710 = %687.1;
  %711 = mod(%692, %693) /* ty=Tensor[(24, 8), float64] */;
  %712 = floor_divide(%696, %697) /* ty=Tensor[(24, 8), float64] */;
  %713 = right_shift(%705, %706) /* ty=Tensor[(24, 8), uint32] */;
  %714 = @func_1340() /* ty=Tensor[(11, 7, 16), float64] */;
  %715 = atanh(%709) /* ty=Tensor[(24, 8), float64] */;
  (%710, %711, %712, %713, %714, %715)
}

def @func_4214() -> (Tensor[(4, 14, 3), float32], Tensor[(13, 16, 14), float32], Tensor[(2912), float32], Tensor[(4, 14, 3), int64]) {
  %716 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 14, 3), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 3), float64] */;
  %717 = sin(%716) /* ty=Tensor[(4, 14, 3), float64] */;
  %718 = cast(%717, dtype="float32") /* ty=Tensor[(4, 14, 3), float32] */;
  %719 = cast(meta[relay.Constant][25] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %720 = reshape(%719, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), float32] */;
  %721 = @func_3025(%720) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(13, 16, 14), float32]) */;
  %722 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 14, 3), float64] */, dtype="int64") /* ty=Tensor[(4, 14, 3), int64] */;
  %723 = shape_of(%717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%717, dtype="int64") /* ty=Tensor[(4, 14, 3), int64] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %726 = rsqrt(%718) /* ty=Tensor[(4, 14, 3), float32] */;
  %727 = %721.3;
  %728 = maximum(%724, %725) /* ty=Tensor[(4, 14, 3), int64] */;
  (%726, %727, meta[relay.Constant][25] /* ty=Tensor[(2912), float32] */, %728)
}

def @func_2878() -> (Tensor[(13, 16, 6), uint64],) {
  %730 = fn () -> (Tensor[(13, 16, 6), uint64],) {
    %729 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
    (%729,)
  };
  %730() /* ty=(Tensor[(13, 16, 6), uint64],) */
}

def @func_3816() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %734 = fn () -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
    %731 = @func_497() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %732 = @func_1006() /* ty=Tensor[(13, 16, 6), uint64] */;
    %733 = %731.0;
    (%732, %733)
  };
  %734() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */
}

def @func_5065() -> (Tensor[(13, 16, 6), uint64], Tensor[(20, 48), float32]) {
  %746 = fn () -> (Tensor[(13, 16, 6), uint64], Tensor[(20, 48), float32]) {
    %735 = @func_4089() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %736 = cast(meta[relay.Constant][26] /* ty=Tensor[(20, 48), uint8] */, dtype="uint8") /* ty=Tensor[(20, 48), uint8] */;
    %737 = reshape(%736, newshape=[15, 4, 16]) /* ty=Tensor[(15, 4, 16), uint8] */;
    %738 = @func_2627(%737) /* ty=(Tensor[(15, 4, 16), uint8],) */;
    %739 = %738.0;
    %740 = cast(%739, dtype="float32") /* ty=Tensor[(15, 4, 16), float32] */;
    %741 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(20, 48), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %742 = cast(meta[relay.Constant][26] /* ty=Tensor[(20, 48), uint8] */, dtype="float32") /* ty=Tensor[(20, 48), float32] */;
    %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %744 = %735.0;
    %745 = mod(%742, %743) /* ty=Tensor[(20, 48), float32] */;
    (%744, %745)
  };
  %746() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(20, 48), float32]) */
}

def @func_5349() -> (Tensor[(13, 16, 6), float64],) {
  %747 = @func_3293() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
  %748 = %747.1;
  (%748,)
}

def @func_1156(%var_1141: Tensor[(11, 7, 2), float32], %var_1152: Tensor[(11, 7, 2), uint64]) -> (Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 2), bool]) {
  %749 = @func_585() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %750 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 7, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 7, 2), float32] */;
  %751 = acos(%750) /* ty=Tensor[(11, 7, 2), float32] */;
  %752 = cast(%var_1141, dtype="uint64") /* ty=Tensor[(11, 7, 2), uint64] */;
  %753 = shape_of(%751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%751, dtype="uint64") /* ty=Tensor[(11, 7, 2), uint64] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %756 = add(%754, %755) /* ty=Tensor[(11, 7, 2), uint64] */;
  %757 = cast(%var_1152, dtype="bool") /* ty=Tensor[(11, 7, 2), bool] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%756, dtype="bool") /* ty=Tensor[(11, 7, 2), bool] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %761 = %749.0;
  %762 = equal(%759, %760) /* ty=Tensor[(11, 7, 2), bool] */;
  (%761, %762)
}

def @func_8586(%var_8584: Tensor[(192), float32]) -> (Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64], Tensor[(192), float32]) {
  @func_8583(%var_8584) /* ty=(Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64], Tensor[(192), float32]) */
}

def @func_1642() -> Tensor[(9, 16, 13), uint64] {
  @func_1358() /* ty=Tensor[(9, 16, 13), uint64] */
}

def @func_7929(%var_7928: Tensor[(15, 3, 13), float32]) -> (Tensor[(15, 3, 13), float32], Tensor[(13, 16, 6), uint64], Tensor[(750), float64]) {
  %769 = fn (%var_7909: Tensor[(15, 3, 13), float32]) -> (Tensor[(15, 3, 13), float32], Tensor[(13, 16, 6), uint64], Tensor[(750), float64]) {
    %763 = cast(%var_7909, dtype="float32") /* ty=Tensor[(15, 3, 13), float32] */;
    %764 = cast(meta[relay.Constant][28] /* ty=Tensor[(750), float64] */, dtype="float64") /* ty=Tensor[(750), float64] */;
    %765 = reshape(%764, newshape=[750]) /* ty=Tensor[(750), float64] */;
    %766 = @func_2458(%765) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(750), int16], Tensor[(13, 16, 6), uint64]) */;
    %767 = log2(%763) /* ty=Tensor[(15, 3, 13), float32] */;
    %768 = %766.0;
    (%767, %768, meta[relay.Constant][28] /* ty=Tensor[(750), float64] */)
  };
  %769(%var_7928) /* ty=(Tensor[(15, 3, 13), float32], Tensor[(13, 16, 6), uint64], Tensor[(750), float64]) */
}

def @func_4656() -> Tensor[(11, 7, 16), float64] {
  %770 = @func_3794() /* ty=(Tensor[(11, 7, 16), float64], Tensor[(13, 16, 6), float64]) */;
  %770.0
}

def @func_1545() -> Tensor[(11, 7, 16), float64] {
  %771 = fn () -> Tensor[(11, 7, 16), float64] {
    @func_1340() /* ty=Tensor[(11, 7, 16), float64] */
  };
  %771() /* ty=Tensor[(11, 7, 16), float64] */
}

def @func_6251(%var_6250: Tensor[(11, 7, 16), float64]) -> Tensor[(11, 7, 16), float64] {
  %780 = fn (%var_6230: Tensor[(11, 7, 16), float64]) -> Tensor[(11, 7, 16), float64] {
    %772 = @func_1940() /* ty=(Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) */;
    %773 = %772.4;
    %774 = cast(%var_6230, dtype="uint16") /* ty=Tensor[(11, 7, 16), uint16] */;
    %775 = shape_of(%773, dtype="int32") /* ty=Tensor[(3), int32] */;
    %776 = cast(%773, dtype="uint16") /* ty=Tensor[(11, 7, 16), uint16] */;
    %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %778 = left_shift(%776, %777) /* ty=Tensor[(11, 7, 16), uint16] */;
    %779 = cast(%778, dtype="float64") /* ty=Tensor[(11, 7, 16), float64] */;
    sigmoid(%779) /* ty=Tensor[(11, 7, 16), float64] */
  };
  %780(%var_6250) /* ty=Tensor[(11, 7, 16), float64] */
}

def @func_371() -> Tensor[(13, 16, 6), uint64] {
  %781 = @func_207() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %781.0
}

def @func_5922() -> Tensor[(13, 16, 6), uint64] {
  @func_5920() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_7390(%var_7388: Tensor[(11, 5, 9), uint16]) -> (Tensor[(11, 5, 9), uint16], Tensor[(9, 16, 13), uint64], Tensor[(65, 5), int64], Tensor[(11, 5, 9), uint64]) {
  @func_7387(%var_7388) /* ty=(Tensor[(11, 5, 9), uint16], Tensor[(9, 16, 13), uint64], Tensor[(65, 5), int64], Tensor[(11, 5, 9), uint64]) */
}

def @func_4450() -> (Tensor[(13, 16, 6), uint64],) {
  @func_4448() /* ty=(Tensor[(13, 16, 6), uint64],) */
}

def @func_8183(%var_8155: Tensor[(7, 7, 15), float64]) -> (Tensor[(7, 7, 15), float64],) {
  %782 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 7, 15), float64] */, dtype="float64") /* ty=Tensor[(7, 7, 15), float64] */;
  %783 = shape_of(%var_8155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(%var_8155, dtype="float64") /* ty=Tensor[(7, 7, 15), float64] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %786 = divide(%784, %785) /* ty=Tensor[(7, 7, 15), float64] */;
  (%786,)
}

def @func_4091() -> (Tensor[(13, 16, 6), uint64],) {
  @func_4089() /* ty=(Tensor[(13, 16, 6), uint64],) */
}

def @func_2546() -> (Tensor[(13, 16, 6), uint64],) {
  %787 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%787,)
}

def @func_8360() -> (Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  @func_8358() /* ty=(Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */
}

def @func_7193(%var_7174: Tensor[(5, 5, 13), int64]) -> (Tensor[(5, 5, 13), float64], Tensor[(9, 16, 13), uint64]) {
  %788 = cast(%var_7174, dtype="bool") /* ty=Tensor[(5, 5, 13), bool] */;
  %789 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(5, 5, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 5, 13), int64] */, dtype="bool") /* ty=Tensor[(5, 5, 13), bool] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %792 = less_equal(%790, %791) /* ty=Tensor[(5, 5, 13), bool] */;
  %793 = cast(%792, dtype="float64") /* ty=Tensor[(5, 5, 13), float64] */;
  %794 = log10(%793) /* ty=Tensor[(5, 5, 13), float64] */;
  %795 = cast(%794, dtype="float64") /* ty=Tensor[(5, 5, 13), float64] */;
  %796 = @func_3384() /* ty=(Tensor[(9, 16, 13), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64]) */;
  %797 = asin(%795) /* ty=Tensor[(5, 5, 13), float64] */;
  %798 = %796.3;
  (%797, %798)
}

def @func_1485() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %801 = fn () -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
    %799 = @func_918() /* ty=Tensor[(13, 16, 6), uint64] */;
    %800 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
    (%799, %800)
  };
  %801() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */
}

def @func_8503() -> Tensor[(13, 16, 6), float64] {
  %803 = fn () -> Tensor[(13, 16, 6), float64] {
    %802 = @func_3794() /* ty=(Tensor[(11, 7, 16), float64], Tensor[(13, 16, 6), float64]) */;
    %802.1
  };
  %803() /* ty=Tensor[(13, 16, 6), float64] */
}

def @func_5863() -> (Tensor[(13, 16, 6), uint64],) {
  @func_5861() /* ty=(Tensor[(13, 16, 6), uint64],) */
}

def @func_3712(%var_3710: Tensor[(24, 8), float32]) -> (Tensor[(8, 4, 6), float32], Tensor[(24, 8), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float32]) {
  @func_3709(%var_3710) /* ty=(Tensor[(8, 4, 6), float32], Tensor[(24, 8), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float32]) */
}

def @func_3717(%var_3714: Tensor[(5, 8), float32]) -> Tensor[(5, 8), float32] {
  %804 = cast(%var_3714, dtype="float32") /* ty=Tensor[(5, 8), float32] */;
  log(%804) /* ty=Tensor[(5, 8), float32] */
}

def @func_1192() -> (Tensor[(13, 16, 6), uint64],) {
  %805 = @func_1006() /* ty=Tensor[(13, 16, 6), uint64] */;
  (%805,)
}

def @func_1941() -> (Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) {
  %814 = fn () -> (Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) {
    %806 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 16, 14), float64] */, dtype="float64") /* ty=Tensor[(13, 16, 14), float64] */;
    %807 = @func_497() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %808 = cast(meta[relay.Constant][32] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
    %809 = reshape(%808, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), float64] */;
    %810 = acos(%806) /* ty=Tensor[(13, 16, 14), float64] */;
    %811 = %807.0;
    %812 = @func_773(%809) /* ty=Tensor[(9, 16, 10), float64] */;
    %813 = @func_1340() /* ty=Tensor[(11, 7, 16), float64] */;
    (%810, %811, %812, meta[relay.Constant][32] /* ty=Tensor[(1440), float64] */, %813)
  };
  %814() /* ty=(Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) */
}

def @func_4041(%var_4040: Tensor[(1440), float64]) -> (Tensor[(9, 16, 13), uint64], Tensor[(1440), float64], Tensor[(9, 16, 10), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), float64]) {
  %830 = fn (%var_3956: Tensor[(1440), float64]) -> (Tensor[(9, 16, 13), uint64], Tensor[(1440), float64], Tensor[(9, 16, 10), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), float64]) {
    %815 = @func_324() /* ty=(Tensor[(9, 16, 13), uint64],) */;
    %816 = cast(%var_3956, dtype="float64") /* ty=Tensor[(1440), float64] */;
    %817 = reshape(%816, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), float64] */;
    %818 = @func_773(%817) /* ty=Tensor[(9, 16, 10), float64] */;
    %819 = cast(%818, dtype="float64") /* ty=Tensor[(9, 16, 10), float64] */;
    %820 = asin(%819) /* ty=Tensor[(9, 16, 10), float64] */;
    %821 = cast(%820, dtype="float64") /* ty=Tensor[(9, 16, 10), float64] */;
    %822 = reshape(%821, newshape=[180, 8]) /* ty=Tensor[(180, 8), float64] */;
    %823 = @func_2739(%822) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 13), uint64], Tensor[(9, 16, 10), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64], Tensor[(180, 8), float32], Tensor[(11, 7, 16), float64]) */;
    %824 = @func_1940() /* ty=(Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) */;
    %825 = %815.0;
    %826 = @func_1564() /* ty=Tensor[(13, 16, 6), uint64] */;
    %827 = %823.3;
    %828 = %824.0;
    %829 = @func_3613() /* ty=Tensor[(13, 16, 6), float64] */;
    (%825, %var_3956, %820, %826, %827, %828, %829)
  };
  %830(%var_4040) /* ty=(Tensor[(9, 16, 13), uint64], Tensor[(1440), float64], Tensor[(9, 16, 10), float64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), float64]) */
}

def @func_2222() -> Tensor[(13, 16, 6), uint64] {
  %831 = fn () -> Tensor[(13, 16, 6), uint64] {
    @func_371() /* ty=Tensor[(13, 16, 6), uint64] */
  };
  %831() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_6523() -> Tensor[(13, 16, 6), uint64] {
  %832 = @func_6354() /* ty=(Tensor[(9, 16, 13), uint64], Tensor[(13, 16, 6), uint64]) */;
  %832.1
}

def @func_7882(%var_7880: Tensor[(750), float64]) -> (Tensor[(9, 16, 13), uint64], Tensor[(50, 15), float64], Tensor[(750), float64]) {
  @func_7879(%var_7880) /* ty=(Tensor[(9, 16, 13), uint64], Tensor[(50, 15), float64], Tensor[(750), float64]) */
}

def @func_3108() -> (Tensor[(13, 16, 6), uint64], Tensor[(1248), bool]) {
  %839 = fn () -> (Tensor[(13, 16, 6), uint64], Tensor[(1248), bool]) {
    %833 = @func_1192() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %834 = %833.0;
    %835 = cast(%834, dtype="bool") /* ty=Tensor[(13, 16, 6), bool] */;
    %836 = reshape(%835, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
    %837 = @func_2318(%836) /* ty=(Tensor[(13, 16, 6), bool], Tensor[(1248), bool], Tensor[(16, ?, 4), uint32]) */;
    %838 = %837.1;
    (%834, %838)
  };
  %839() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(1248), bool]) */
}

def @func_4425() -> (Tensor[(13, 6), float64],) {
  @func_4423() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_208() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  %844 = fn () -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
    %840 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %841 = @func_161() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %842 = %840.0;
    %843 = %841.0;
    (%842, %843)
  };
  %844() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */
}

def @func_5402() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(15, 4, 16), uint8]) {
  %850 = fn () -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(15, 4, 16), uint8]) {
    %845 = @func_3293() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64]) */;
    %846 = @func_3551() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(15, 4, 16), uint8], Tensor[(1, 960), uint8], Tensor[(13, 16, 6), uint64]) */;
    %847 = %845.0;
    %848 = @func_5234() /* ty=Tensor[(13, 16, 6), uint64] */;
    %849 = %846.2;
    (%847, %848, %849)
  };
  %850() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(15, 4, 16), uint8]) */
}

def @func_8467() -> (Tensor[(9, 16, 13), uint64],) {
  %853 = fn () -> (Tensor[(9, 16, 13), uint64],) {
    %851 = @func_7957() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 13), uint64]) */;
    %852 = %851.1;
    (%852,)
  };
  %853() /* ty=(Tensor[(9, 16, 13), uint64],) */
}

def @func_5854() -> (Tensor[(13, 16, 6), uint64],) {
  %856 = fn () -> (Tensor[(13, 16, 6), uint64],) {
    %854 = @func_4146() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) */;
    %855 = %854.0;
    (%855,)
  };
  %856() /* ty=(Tensor[(13, 16, 6), uint64],) */
}

def @func_161() -> (Tensor[(13, 16, 6), uint64],) {
  %857 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 16, 6), uint64] */, dtype="uint64") /* ty=Tensor[(13, 16, 6), uint64] */;
  %858 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(13, 16, 6), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %859 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 16, 6), uint64] */, dtype="uint64") /* ty=Tensor[(13, 16, 6), uint64] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %861 = multiply(%859, %860) /* ty=Tensor[(13, 16, 6), uint64] */;
  (%861,)
}

def @func_6502() -> Tensor[(13, 16, 6), uint64] {
  @func_3163() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_896() -> (Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) {
  @func_894() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) */
}

def @func_3794() -> (Tensor[(11, 7, 16), float64], Tensor[(13, 16, 6), float64]) {
  %862 = @func_3384() /* ty=(Tensor[(9, 16, 13), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float64], Tensor[(9, 16, 13), uint64]) */;
  %863 = @func_1340() /* ty=Tensor[(11, 7, 16), float64] */;
  %864 = %862.2;
  (%863, %864)
}

def @func_5569() -> (Tensor[(13, 6), float64],) {
  @func_5567() /* ty=(Tensor[(13, 6), float64],) */
}

def @func_6581() -> (Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64]) {
  %869 = fn () -> (Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64]) {
    %865 = @func_5768() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %866 = @func_1677() /* ty=(Tensor[(13, 16, 6), float64], Tensor[(11, 7, 16), float64]) */;
    %867 = %865.0;
    %868 = %866.1;
    (%867, %868)
  };
  %869() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64]) */
}

def @func_5351() -> (Tensor[(13, 16, 6), float64],) {
  @func_5349() /* ty=(Tensor[(13, 16, 6), float64],) */
}

def @func_6999() -> (Tensor[(13, 16, 14), float64],) {
  %870 = @func_1940() /* ty=(Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) */;
  %871 = %870.0;
  (%871,)
}

def @func_7046(%var_7045: Tensor[(12, 16, 1), float32]) -> (Tensor[(12, 16, 1), float32], Tensor[(12, 16, 1), float32], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
  %881 = fn (%var_7005: Tensor[(12, 16, 1), float32]) -> (Tensor[(12, 16, 1), float32], Tensor[(12, 16, 1), float32], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) {
    %872 = cast(%var_7005, dtype="float32") /* ty=Tensor[(12, 16, 1), float32] */;
    %873 = cast(%var_7005, dtype="float32") /* ty=Tensor[(12, 16, 1), float32] */;
    %874 = @func_3128() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), float64]) */;
    %875 = @func_894() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), int16]) */;
    %876 = log2(%872) /* ty=Tensor[(12, 16, 1), float32] */;
    %877 = acosh(%873) /* ty=Tensor[(12, 16, 1), float32] */;
    %878 = %874.0;
    %879 = @func_371() /* ty=Tensor[(13, 16, 6), uint64] */;
    %880 = %875.0;
    (%876, %877, %878, %879, %880)
  };
  %881(%var_7045) /* ty=(Tensor[(12, 16, 1), float32], Tensor[(12, 16, 1), float32], Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), bool]) */
}

def @func_2320(%var_2319: Tensor[(1248), bool]) -> (Tensor[(13, 16, 6), bool], Tensor[(1248), bool], Tensor[(16, ?, 4), uint32]) {
  %893 = fn (%var_2307: Tensor[(1248), bool]) -> (Tensor[(13, 16, 6), bool], Tensor[(1248), bool], Tensor[(16, ?, 4), uint32]) {
    %882 = cast(%var_2307, dtype="bool") /* ty=Tensor[(1248), bool] */;
    %883 = reshape(%882, newshape=[13, 16, 6]) /* ty=Tensor[(13, 16, 6), bool] */;
    %884 = @func_1420(%883) /* ty=(Tensor[(13, 16, 6), bool],) */;
    %885 = cast(meta[relay.Constant][35] /* ty=Tensor[(16, 1, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
    %886 = tan(%885) /* ty=Tensor[(16, 1, 4), float32] */;
    %887 = cast(meta[relay.Constant][35] /* ty=Tensor[(16, 1, 4), float32] */, dtype="uint32") /* ty=Tensor[(16, 1, 4), uint32] */;
    %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
    %889 = cast(%886, dtype="uint32") /* ty=Tensor[(16, 1, 4), uint32] */;
    %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %891 = %884.0;
    %892 = maximum(%889, %890) /* ty=Tensor[(16, ?, 4), uint32] */;
    (%891, %var_2307, %892)
  };
  %893(%var_2319) /* ty=(Tensor[(13, 16, 6), bool], Tensor[(1248), bool], Tensor[(16, ?, 4), uint32]) */
}

def @func_4374() -> (Tensor[(13, 16, 6), uint64], Tensor[(24, 8), float32], Tensor[(192), float32], Tensor[(13, 16, 14), float32]) {
  %894 = @func_460() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %895 = cast(meta[relay.Constant][36] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %896 = reshape(%895, newshape=[24, 8]) /* ty=Tensor[(24, 8), float32] */;
  %897 = @func_3709(%896) /* ty=(Tensor[(8, 4, 6), float32], Tensor[(24, 8), float32], Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), float32]) */;
  %898 = @func_4214() /* ty=(Tensor[(4, 14, 3), float32], Tensor[(13, 16, 14), float32], Tensor[(2912), float32], Tensor[(4, 14, 3), int64]) */;
  %899 = %894.1;
  %900 = %897.1;
  %901 = %898.1;
  (%899, %900, meta[relay.Constant][36] /* ty=Tensor[(192), float32] */, %901)
}

def @func_7079() -> (Tensor[(13, 16, 6), uint64], Tensor[(2912), float32]) {
  %906 = fn () -> (Tensor[(13, 16, 6), uint64], Tensor[(2912), float32]) {
    %902 = @func_2877() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %903 = @func_5253() /* ty=(Tensor[(2912), float32],) */;
    %904 = %902.0;
    %905 = %903.0;
    (%904, %905)
  };
  %906() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(2912), float32]) */
}

def @func_8124() -> (Tensor[(12, 16), float64],) {
  %907 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 16), float64] */, dtype="float64") /* ty=Tensor[(12, 16), float64] */;
  %908 = log2(%907) /* ty=Tensor[(12, 16), float64] */;
  (%908,)
}

def @func_920() -> Tensor[(13, 16, 6), uint64] {
  @func_918() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_3025(%var_3009: Tensor[(13, 16, 14), float32]) -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(13, 16, 14), float32]) {
  %909 = @func_1192() /* ty=(Tensor[(13, 16, 6), uint64],) */;
  %910 = @func_207() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */;
  %911 = @func_1940() /* ty=(Tensor[(13, 16, 14), float64], Tensor[(13, 16, 6), uint64], Tensor[(9, 16, 10), float64], Tensor[(1440), float64], Tensor[(11, 7, 16), float64]) */;
  %912 = %911.0;
  %913 = cast(%912, dtype="float32") /* ty=Tensor[(13, 16, 14), float32] */;
  %914 = log10(%913) /* ty=Tensor[(13, 16, 14), float32] */;
  %915 = cast(%var_3009, dtype="float32") /* ty=Tensor[(13, 16, 14), float32] */;
  %916 = shape_of(%914, dtype="int32") /* ty=Tensor[(3), int32] */;
  %917 = cast(%914, dtype="float32") /* ty=Tensor[(13, 16, 14), float32] */;
  %918 = dyn.reshape(%915, %916, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %919 = %909.0;
  %920 = %910.1;
  %921 = @func_1544() /* ty=Tensor[(11, 7, 16), float64] */;
  %922 = floor_mod(%917, %918) /* ty=Tensor[(13, 16, 14), float32] */;
  (%919, %920, %921, %922)
}

def @func_3796() -> (Tensor[(11, 7, 16), float64], Tensor[(13, 16, 6), float64]) {
  @func_3794() /* ty=(Tensor[(11, 7, 16), float64], Tensor[(13, 16, 6), float64]) */
}

def @func_3130() -> (Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), float64]) {
  @func_3128() /* ty=(Tensor[(13, 16, 6), bool], Tensor[(13, 16, 6), float64]) */
}

def @func_2629(%var_2628: Tensor[(15, 4, 16), uint8]) -> (Tensor[(15, 4, 16), uint8],) {
  %928 = fn (%var_2616: Tensor[(15, 4, 16), uint8]) -> (Tensor[(15, 4, 16), uint8],) {
    %923 = cast(%var_2616, dtype="uint8") /* ty=Tensor[(15, 4, 16), uint8] */;
    %924 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(15, 4, 16), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %925 = cast(meta[relay.Constant][38] /* ty=Tensor[(15, 4, 16), uint8] */, dtype="uint8") /* ty=Tensor[(15, 4, 16), uint8] */;
    %926 = dyn.reshape(%923, %924, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %927 = bitwise_xor(%925, %926) /* ty=Tensor[(15, 4, 16), uint8] */;
    (%927,)
  };
  %928(%var_2628) /* ty=(Tensor[(15, 4, 16), uint8],) */
}

def @func_1112() -> (Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) {
  @func_1110() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64]) */
}

def @func_3827(%var_3826: Tensor[(13, 8, 1), float32]) -> (Tensor[(13, 8, 1), float32],) {
  %931 = fn (%var_3822: Tensor[(13, 8, 1), float32]) -> (Tensor[(13, 8, 1), float32],) {
    %929 = cast(%var_3822, dtype="float32") /* ty=Tensor[(13, 8, 1), float32] */;
    %930 = sqrt(%929) /* ty=Tensor[(13, 8, 1), float32] */;
    (%930,)
  };
  %931(%var_3826) /* ty=(Tensor[(13, 8, 1), float32],) */
}

def @func_4325(%var_4323: Tensor[(7, 6, 10), uint8], %var_4324: Tensor[(7, 6, 10), uint8]) -> (Tensor[(7, 6, 10), uint8], Tensor[(7, 6, 10), float64], Tensor[(7, 6, 10), float32]) {
  @func_4321(%var_4323, %var_4324) /* ty=(Tensor[(7, 6, 10), uint8], Tensor[(7, 6, 10), float64], Tensor[(7, 6, 10), float32]) */
}

def @func_4376() -> (Tensor[(13, 16, 6), uint64], Tensor[(24, 8), float32], Tensor[(192), float32], Tensor[(13, 16, 14), float32]) {
  @func_4374() /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(24, 8), float32], Tensor[(192), float32], Tensor[(13, 16, 14), float32]) */
}

def @func_1342() -> Tensor[(11, 7, 16), float64] {
  @func_1340() /* ty=Tensor[(11, 7, 16), float64] */
}

def @func_373() -> Tensor[(13, 16, 6), uint64] {
  @func_371() /* ty=Tensor[(13, 16, 6), uint64] */
}

def @func_6276(%var_6274: Tensor[(2912), float32], %var_6275: Tensor[(4, 14, 3), int64]) -> (Tensor[(11, 7, 16), float64], Tensor[(2912), float32], Tensor[(13, 16, 6), uint64], Tensor[(4, 14, 3), bool]) {
  %945 = fn (%var_6260: Tensor[(2912), float32], %var_6266: Tensor[(4, 14, 3), int64]) -> (Tensor[(11, 7, 16), float64], Tensor[(2912), float32], Tensor[(13, 16, 6), uint64], Tensor[(4, 14, 3), bool]) {
    %932 = cast(%var_6260, dtype="float32") /* ty=Tensor[(2912), float32] */;
    %933 = reshape(%932, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), float32] */;
    %934 = @func_3025(%933) /* ty=(Tensor[(13, 16, 6), uint64], Tensor[(13, 16, 6), uint64], Tensor[(11, 7, 16), float64], Tensor[(13, 16, 14), float32]) */;
    %935 = @func_5768() /* ty=(Tensor[(13, 16, 6), uint64],) */;
    %936 = @func_4214() /* ty=(Tensor[(4, 14, 3), float32], Tensor[(13, 16, 14), float32], Tensor[(2912), float32], Tensor[(4, 14, 3), int64]) */;
    %937 = %936.3;
    %938 = cast(%var_6266, dtype="bool") /* ty=Tensor[(4, 14, 3), bool] */;
    %939 = shape_of(%937, dtype="int32") /* ty=Tensor[(3), int32] */;
    %940 = cast(%937, dtype="bool") /* ty=Tensor[(4, 14, 3), bool] */;
    %941 = dyn.reshape(%938, %939, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %942 = %934.2;
    %943 = %935.0;
    %944 = logical_and(%940, %941) /* ty=Tensor[(4, 14, 3), bool] */;
    (%942, %var_6260, %943, %944)
  };
  %945(%var_6274, %var_6275) /* ty=(Tensor[(11, 7, 16), float64], Tensor[(2912), float32], Tensor[(13, 16, 6), uint64], Tensor[(4, 14, 3), bool]) */
}

def @func_8126() -> (Tensor[(12, 16), float64],) {
  @func_8124() /* ty=(Tensor[(12, 16), float64],) */
}

def @func_7800() -> (Tensor[(11, 5, 2), float32],) {
  %946 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 5, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 5, 2), float32] */;
  %947 = erf(%946) /* ty=Tensor[(11, 5, 2), float32] */;
  (%947,)
}

def @func_8551(%var_8546: Tensor[(6, 6, 14), float64], %var_8547: Tensor[(6, 6, 14), float64], %var_8548: Tensor[(1, 1440), float64], %var_8549: Tensor[(2156), uint8], %var_8550: Tensor[(6, 6, 14), float64]) -> (Tensor[(192), float32], Tensor[(13, 16, 14), float64], Tensor[(1, 1440), float64], Tensor[(14, 11, 14), uint8], Tensor[(2156), uint8], Tensor[(9, 16, 13), uint64], Tensor[(6, 6, 14), bool], Tensor[(6, 6, 14), int8]) {
  @func_8544(%var_8546, %var_8547, %var_8548, %var_8549, %var_8550) /* ty=(Tensor[(192), float32], Tensor[(13, 16, 14), float64], Tensor[(1, 1440), float64], Tensor[(14, 11, 14), uint8], Tensor[(2156), uint8], Tensor[(9, 16, 13), uint64], Tensor[(6, 6, 14), bool], Tensor[(6, 6, 14), int8]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen126/build/output.py", line 2986, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:51:33] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

