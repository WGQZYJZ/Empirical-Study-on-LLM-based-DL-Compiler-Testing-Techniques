==========mod==========
#[version = "0.0.5"]
def @func_7157(%var_7104: Tensor[(3, 15, 2), uint32]) -> (Tensor[(3, 15, 2), bool], Tensor[(3, 15, 2), float32]) {
  %0 = @func_6032() /* ty=Tensor[(3, ?, 2), uint64] */;
  %1 = cast(%0, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 15, 2), uint64] */, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
  %3 = less(%1, %2) /* ty=Tensor[(3, 15, 2), bool] */;
  %4 = cast(%3, dtype="uint32") /* ty=Tensor[(3, 15, 2), uint32] */;
  %5 = cast(%0, dtype="uint32") /* ty=Tensor[(3, ?, 2), uint32] */;
  %6 = maximum(%4, %5) /* ty=Tensor[(3, 15, 2), uint32] */;
  %7 = cast(%var_7104, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
  %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%6, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %11 = cast(%6, dtype="float64") /* ty=Tensor[(3, 15, 2), float64] */;
  %12 = log10(%11) /* ty=Tensor[(3, 15, 2), float64] */;
  %13 = cast(%12, dtype="float32") /* ty=Tensor[(3, 15, 2), float32] */;
  %14 = not_equal(%9, %10) /* ty=Tensor[(3, 15, 2), bool] */;
  %15 = asin(%13) /* ty=Tensor[(3, 15, 2), float32] */;
  (%14, %15)
}

def @func_5680(%var_5664: Tensor[(2160), float64]) -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(16, 15, 9), bool], Tensor[(2160), float64], Tensor[(270), float64], Tensor[(10, 12, 11), bool]) {
  %16 = @func_3319() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %17 = @func_4023() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %18 = %17.0;
  %19 = cast(%18, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %20 = cast(%var_5664, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %22 = reshape(%19, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), bool] */;
  %23 = reshape(%20, newshape=[16, 15, 9]) /* ty=Tensor[(16, 15, 9), float64] */;
  %24 = reshape(%21, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %25 = @func_5318(%22, %23, %24) /* ty=(Tensor[(10, 12, 11), float64], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(16, 15, 9), bool], uint64, Tensor[(560), float64], Tensor[(630), uint16], Tensor[(270), float64]) */;
  %26 = @func_2331() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %27 = %16.0;
  %28 = %25.4;
  %29 = %26.0;
  (%27, %18, %28, %var_5664, meta[relay.Constant][1] /* ty=Tensor[(270), float64] */, %29)
}

def @func_7000(%var_6993: uint16) -> (Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(10, 12, 11), bool], Tensor[(630), uint16], uint16, Tensor[(640, 1), int32]) {
  %30 = @func_6400() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %32 = reshape(%31, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %33 = @func_5234(%32) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(6), uint64]) */;
  %34 = %30.0;
  %35 = cast(%34, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %36 = reshape(%35, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), bool] */;
  %37 = @func_3662(%36) /* ty=(Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(10, 12, 11), int64]) */;
  %38 = @func_6400() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %39 = cast(%var_6993, dtype="uint16") /* ty=uint16 */;
  %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(640, 1), int32] */, dtype="int32") /* ty=Tensor[(640, 1), int32] */;
  %41 = reshape(%39, newshape=[]) /* ty=uint16 */;
  %42 = reshape(%40, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %43 = @func_2740(%41, %42) /* ty=(Tensor[(1, 15, 1), float32], Tensor[(6), uint64], Tensor[(10, 12, 11), bool], Tensor[(3, 15, 2), uint16], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60), uint16], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(1050), float32], Tensor[(630), uint16], Tensor[(640), int32], Tensor[(280, 2), float64], Tensor[(160, 2), int16], Tensor[(560), float64]) */;
  %44 = %33.1;
  %45 = %37.0;
  %46 = %38.0;
  %47 = %43.10;
  (%34, %44, meta[relay.Constant][2] /* ty=Tensor[(6), uint64] */, %45, %46, %47, %var_6993, meta[relay.Constant][3] /* ty=Tensor[(640, 1), int32] */)
}

def @func_4719() -> (Tensor[(10, 12, 11), float32], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60, 1), uint16], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(3, 2), uint64], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(5, 16, 8), float32], Tensor[(640, 1), int32], Tensor[(10, 12, 11), float32]) {
  %48 = @func_2941() /* ty=(Tensor[(10, 12, 11), float32],) */;
  %49 = cast(meta[relay.Constant][4] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %50 = cast(meta[relay.Constant][5] /* ty=Tensor[(60, 1), uint16] */, dtype="uint16") /* ty=Tensor[(60, 1), uint16] */;
  %51 = reshape(%49, newshape=[]) /* ty=uint16 */;
  %52 = reshape(%50, newshape=[5, 1, 12]) /* ty=Tensor[(5, 1, 12), uint16] */;
  %53 = @func_380(%51, %52) /* ty=(Tensor[(5, 1, 12), uint16],) */;
  %54 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 2), uint64] */, dtype="uint64") /* ty=Tensor[(3, 2), uint64] */;
  %55 = reshape(%54, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %56 = @func_4161(%55) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(9, 15, 2), float64], Tensor[(144), uint8], Tensor[(6), uint64], Tensor[(15, 14, 16), float64]) */;
  %57 = @func_4023() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %58 = @func_2392() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %59 = cast(meta[relay.Constant][7] /* ty=Tensor[(640, 1), int32] */, dtype="int32") /* ty=Tensor[(640, 1), int32] */;
  %60 = reshape(%59, newshape=[5, 16, 8]) /* ty=Tensor[(5, 16, 8), int32] */;
  %61 = @func_1157(%60) /* ty=(Tensor[(5, 16, 8), int32], Tensor[(5, 16, 8), float32]) */;
  %62 = @func_3304() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %63 = %62.0;
  %64 = cast(%63, dtype="float32") /* ty=Tensor[(10, 12, 11), float32] */;
  %65 = exp(%64) /* ty=Tensor[(10, 12, 11), float32] */;
  %66 = cast(%65, dtype="float32") /* ty=Tensor[(10, 12, 11), float32] */;
  %67 = %48.0;
  %68 = %53.0;
  %69 = @func_3059() /* ty=Tensor[(10, 12, 11), bool] */;
  %70 = %56.3;
  %71 = %57.2;
  %72 = %58.0;
  %73 = %61.1;
  %74 = log(%66) /* ty=Tensor[(10, 12, 11), float32] */;
  (%67, %68, meta[relay.Constant][4] /* ty=uint16 */, meta[relay.Constant][5] /* ty=Tensor[(60, 1), uint16] */, %69, %70, meta[relay.Constant][6] /* ty=Tensor[(3, 2), uint64] */, %71, %72, %73, meta[relay.Constant][7] /* ty=Tensor[(640, 1), int32] */, %74)
}

def @func_5889(%var_5858: Tensor[(616), uint64]) -> (Tensor[(6), uint64], Tensor[(572), int16], Tensor[(252), bool], Tensor[(616), uint64], Tensor[(2, 194040), bool]) {
  %75 = @func_4123() /* ty=(Tensor[(6), uint64], Tensor[(6), uint64]) */;
  %76 = cast(meta[relay.Constant][8] /* ty=Tensor[(252), bool] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %77 = cast(%var_5858, dtype="uint64") /* ty=Tensor[(616), uint64] */;
  %78 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 194040), bool] */, dtype="bool") /* ty=Tensor[(2, 194040), bool] */;
  %79 = reshape(%76, newshape=[252]) /* ty=Tensor[(252), bool] */;
  %80 = reshape(%77, newshape=[616]) /* ty=Tensor[(616), uint64] */;
  %81 = reshape(%78, newshape=[630, 616]) /* ty=Tensor[(630, 616), bool] */;
  %82 = @func_2252(%79, %80, %81) /* ty=(Tensor[(13, 11, 4), int16], Tensor[(572), int16], Tensor[(320), int16], Tensor[(252), bool], Tensor[(10, 12, 11), bool], Tensor[(630, 616), float64]) */;
  %83 = %75.1;
  %84 = %82.1;
  (%83, %84, meta[relay.Constant][8] /* ty=Tensor[(252), bool] */, %var_5858, meta[relay.Constant][9] /* ty=Tensor[(2, 194040), bool] */)
}

def @func_3569(%var_3542: Tensor[(1, 630), uint16]) -> (Tensor[(10, 12, 11), bool], Tensor[(14, 5, 8), float64], Tensor[(560), float64], Tensor[(1, 630), uint16], Tensor[(270), float64]) {
  %85 = cast(meta[relay.Constant][10] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
  %86 = cast(%var_3542, dtype="uint16") /* ty=Tensor[(1, 630), uint16] */;
  %87 = cast(meta[relay.Constant][11] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %88 = reshape(%85, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), float64] */;
  %89 = reshape(%86, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
  %90 = reshape(%87, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
  %91 = @func_1010(%88, %89, %90) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) */;
  %92 = @func_3038() /* ty=Tensor[(10, 12, 11), bool] */;
  %93 = %91.0;
  (%92, %93, meta[relay.Constant][10] /* ty=Tensor[(560), float64] */, %var_3542, meta[relay.Constant][11] /* ty=Tensor[(270), float64] */)
}

def @func_5194() -> (Tensor[(10, 12, 11), bool], Tensor[(6), uint64]) {
  %94 = @func_2392() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %95 = %94.0;
  %96 = @func_3598() /* ty=Tensor[(6), uint64] */;
  (%95, %96)
}

def @func_6032() -> Tensor[(3, ?, 2), uint64] {
  %97 = @func_3179() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
  %97.2
}

def @func_711(%var_706: uint64, %var_707: Tensor[(11, 8, 7), uint64]) -> Tensor[(11, 8, 7), uint64] {
  %98 = cast(%var_706, dtype="uint64") /* ty=uint64 */;
  %99 = cast(%var_707, dtype="uint64") /* ty=Tensor[(11, 8, 7), uint64] */;
  maximum(%98, %99) /* ty=Tensor[(11, 8, 7), uint64] */
}

def @func_6483(%var_6412: Tensor[(7, 10, 12), int16], %var_6434: Tensor[(7, 10, 12), int16]) -> (Tensor[(7, 10, 12), int16], Tensor[(10, 12, 11), bool], Tensor[(4, 15, 3), int32], Tensor[(180), int32], Tensor[(7, 10, 12), float32]) {
  %100 = cast(meta[relay.Constant][12] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %101 = cast(%var_6412, dtype="int16") /* ty=Tensor[(7, 10, 12), int16] */;
  %102 = cast(meta[relay.Constant][12] /* ty=int16 */, dtype="int32") /* ty=int32 */;
  %103 = cast(meta[relay.Constant][13] /* ty=Tensor[(180), int32] */, dtype="int32") /* ty=Tensor[(180), int32] */;
  %104 = reshape(%102, newshape=[]) /* ty=int32 */;
  %105 = reshape(%103, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), int32] */;
  %106 = cast(%var_6434, dtype="int64") /* ty=Tensor[(7, 10, 12), int64] */;
  %107 = shape_of(%var_6412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%var_6412, dtype="int64") /* ty=Tensor[(7, 10, 12), int64] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %110 = multiply(%108, %109) /* ty=Tensor[(7, 10, 12), int64] */;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(7, 10, 12), float32] */;
  %112 = maximum(%100, %101) /* ty=Tensor[(7, 10, 12), int16] */;
  %113 = @func_6390() /* ty=Tensor[(10, 12, 11), bool] */;
  %114 = @func_3586(%104, %105) /* ty=Tensor[(4, 15, 3), int32] */;
  %115 = sinh(%111) /* ty=Tensor[(7, 10, 12), float32] */;
  (%112, %113, %114, meta[relay.Constant][13] /* ty=Tensor[(180), int32] */, %115)
}

def @func_1401(%var_1391: Tensor[(5, 15, 14), float32]) -> (Tensor[(5, 15, 14), float32], Tensor[(5, 15, 14), float32]) {
  %116 = cast(%var_1391, dtype="float32") /* ty=Tensor[(5, 15, 14), float32] */;
  %117 = cast(%var_1391, dtype="float32") /* ty=Tensor[(5, 15, 14), float32] */;
  %118 = sin(%116) /* ty=Tensor[(5, 15, 14), float32] */;
  %119 = atanh(%117) /* ty=Tensor[(5, 15, 14), float32] */;
  (%118, %119)
}

def @func_6176(%var_6121: Tensor[(6), float64], %var_6122: uint16, %var_6133: Tensor[(560), float64], %var_6134: Tensor[(630), uint16], %var_6166: Tensor[(560), float64]) -> (Tensor[(10, 12, 11), bool], Tensor[(5, 1, 12), uint16], Tensor[(6), float64], uint16, Tensor[(60), uint16], Tensor[(11, 8, 7), uint64], Tensor[(630), uint16], Tensor[(270, 1), float64], Tensor[(10, 12, 11), bool], Tensor[(560), bool]) {
  %120 = @func_3997() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %121 = cast(%var_6121, dtype="float64") /* ty=Tensor[(6), float64] */;
  %122 = cast(%var_6122, dtype="uint16") /* ty=uint16 */;
  %123 = cast(meta[relay.Constant][14] /* ty=Tensor[(60), uint16] */, dtype="uint16") /* ty=Tensor[(60), uint16] */;
  %124 = reshape(%121, newshape=[1, 3, 2]) /* ty=Tensor[(1, 3, 2), float64] */;
  %125 = reshape(%122, newshape=[]) /* ty=uint16 */;
  %126 = reshape(%123, newshape=[30, 2]) /* ty=Tensor[(30, 2), uint16] */;
  %127 = @func_2638(%124, %125, %126) /* ty=(Tensor[(?, 3, 2), uint8], Tensor[(5, 1, 12), uint16], uint16, Tensor[(30, 2), uint16]) */;
  %128 = cast(%var_6133, dtype="float64") /* ty=Tensor[(560), float64] */;
  %129 = cast(%var_6134, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %130 = cast(meta[relay.Constant][15] /* ty=Tensor[(270, 1), float64] */, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
  %131 = reshape(%128, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), float64] */;
  %132 = reshape(%129, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
  %133 = reshape(%130, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
  %134 = @func_1010(%131, %132, %133) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) */;
  %135 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %136 = cast(%var_6166, dtype="bool") /* ty=Tensor[(560), bool] */;
  %137 = shape_of(%var_6133, dtype="int32") /* ty=Tensor[(1), int32] */;
  %138 = cast(%var_6133, dtype="bool") /* ty=Tensor[(560), bool] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?), bool] */;
  %140 = %120.0;
  %141 = %127.1;
  %142 = %134.1;
  %143 = %135.0;
  %144 = greater_equal(%138, %139) /* ty=Tensor[(560), bool] */;
  (%140, %141, %var_6121, %var_6122, meta[relay.Constant][14] /* ty=Tensor[(60), uint16] */, %142, %var_6134, meta[relay.Constant][15] /* ty=Tensor[(270, 1), float64] */, %143, %144)
}

def @func_4123() -> (Tensor[(6), uint64], Tensor[(6), uint64]) {
  %145 = @func_3179() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
  %146 = %145.3;
  %147 = @func_3598() /* ty=Tensor[(6), uint64] */;
  (%146, %147)
}

def @func_3443(%var_3398: Tensor[(14, 4, 10), float32]) -> (Tensor[(10, 12, 11), bool], Tensor[(14, 4, 10), bool], Tensor[(14, 4, 10), float32]) {
  %148 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %149 = cast(%var_3398, dtype="float32") /* ty=Tensor[(14, 4, 10), float32] */;
  %150 = sqrt(%149) /* ty=Tensor[(14, 4, 10), float32] */;
  %151 = cast(%var_3398, dtype="uint32") /* ty=Tensor[(14, 4, 10), uint32] */;
  %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%150, dtype="uint32") /* ty=Tensor[(14, 4, 10), uint32] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %155 = bitwise_and(%153, %154) /* ty=Tensor[(14, 4, 10), uint32] */;
  %156 = cast(%155, dtype="bool") /* ty=Tensor[(14, 4, 10), bool] */;
  %157 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%150, dtype="bool") /* ty=Tensor[(14, 4, 10), bool] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %160 = cast(%150, dtype="float64") /* ty=Tensor[(14, 4, 10), float64] */;
  %161 = asinh(%160) /* ty=Tensor[(14, 4, 10), float64] */;
  %162 = cast(%161, dtype="float32") /* ty=Tensor[(14, 4, 10), float32] */;
  %163 = %148.0;
  %164 = greater(%158, %159) /* ty=Tensor[(14, 4, 10), bool] */;
  %165 = atanh(%162) /* ty=Tensor[(14, 4, 10), float32] */;
  (%163, %164, %165)
}

def @func_1574(%var_1535: Tensor[(16, 5, 4), int16], %var_1552: Tensor[(616), uint64]) -> (Tensor[(16, 5, 4), float32], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(11, 8, 7), uint64], Tensor[(616), uint64]) {
  %166 = cast(meta[relay.Constant][16] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %167 = cast(%var_1535, dtype="bool") /* ty=Tensor[(16, 5, 4), bool] */;
  %168 = less(%166, %167) /* ty=Tensor[(16, 5, 4), bool] */;
  %169 = cast(%var_1535, dtype="float32") /* ty=Tensor[(16, 5, 4), float32] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="float32") /* ty=Tensor[(16, 5, 4), float32] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %173 = cast(meta[relay.Constant][17] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %174 = reshape(%173, newshape=[5, 15, 14]) /* ty=Tensor[(5, 15, 14), float32] */;
  %175 = @func_1401(%174) /* ty=(Tensor[(5, 15, 14), float32], Tensor[(5, 15, 14), float32]) */;
  %176 = cast(meta[relay.Constant][16] /* ty=int16 */, dtype="uint64") /* ty=uint64 */;
  %177 = cast(%var_1552, dtype="uint64") /* ty=Tensor[(616), uint64] */;
  %178 = reshape(%176, newshape=[]) /* ty=uint64 */;
  %179 = reshape(%177, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), uint64] */;
  %180 = minimum(%171, %172) /* ty=Tensor[(16, 5, 4), float32] */;
  %181 = %175.1;
  %182 = @func_711(%178, %179) /* ty=Tensor[(11, 8, 7), uint64] */;
  (%180, %181, meta[relay.Constant][17] /* ty=Tensor[(1050), float32] */, %182, %var_1552)
}

def @func_2305(%var_2296: Tensor[(640), int32]) -> (Tensor[(5, 16, 8), int32], Tensor[(640), int32], Tensor[(10, 12, 11), float32]) {
  %183 = cast(%var_2296, dtype="int32") /* ty=Tensor[(640), int32] */;
  %184 = reshape(%183, newshape=[5, 16, 8]) /* ty=Tensor[(5, 16, 8), int32] */;
  %185 = @func_1157(%184) /* ty=(Tensor[(5, 16, 8), int32], Tensor[(5, 16, 8), float32]) */;
  %186 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %187 = %186.0;
  %188 = cast(%187, dtype="float32") /* ty=Tensor[(10, 12, 11), float32] */;
  %189 = %185.0;
  %190 = tan(%188) /* ty=Tensor[(10, 12, 11), float32] */;
  (%189, %var_2296, %190)
}

def @func_2331() -> (Tensor[(10, 12, 11), bool],) {
  %191 = @func_1984() /* ty=Tensor[(10, 12, 11), bool] */;
  (%191,)
}

def @func_2468(%var_2460: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) {
  %192 = @func_2392() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %193 = @func_2365() /* ty=Tensor[(10, 12, 11), bool] */;
  %194 = cast(%193, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
  %195 = asinh(%194) /* ty=Tensor[(10, 12, 11), float64] */;
  %196 = cast(%193, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%195, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %200 = cast(%var_2460, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %201 = cast(%var_2460, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %202 = reshape(%200, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
  %203 = reshape(%201, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
  %204 = %192.0;
  %205 = not_equal(%198, %199) /* ty=Tensor[(10, 12, 11), bool] */;
  %206 = @func_1996(%202, %203) /* ty=Tensor[(3, ?, 2), uint64] */;
  (%204, %205, %206, %var_2460)
}

def @func_7066() -> Tensor[(10, 12, 11), bool] {
  %207 = @func_6400() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %207.0
}

def @func_3586(%var_3581: int32, %var_3582: Tensor[(4, 15, 3), int32]) -> Tensor[(4, 15, 3), int32] {
  %208 = cast(%var_3581, dtype="int32") /* ty=int32 */;
  %209 = cast(%var_3582, dtype="int32") /* ty=Tensor[(4, 15, 3), int32] */;
  right_shift(%208, %209) /* ty=Tensor[(4, 15, 3), int32] */
}

def @func_4161(%var_4151: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), bool], Tensor[(9, 15, 2), float64], Tensor[(144), uint8], Tensor[(6), uint64], Tensor[(15, 14, 16), float64]) {
  %210 = @func_2392() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %211 = cast(meta[relay.Constant][18] /* ty=Tensor[(144), uint8] */, dtype="uint8") /* ty=Tensor[(144), uint8] */;
  %212 = cast(%var_4151, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %213 = reshape(%211, newshape=[4, 9, 4]) /* ty=Tensor[(4, 9, 4), uint8] */;
  %214 = reshape(%212, newshape=[1, 6]) /* ty=Tensor[(1, 6), uint64] */;
  %215 = @func_2530(%213, %214) /* ty=(Tensor[(4, 9, 4), uint8], Tensor[(3, ?, 2), uint64], Tensor[(1, 6), uint64], Tensor[(4, 9, 4), uint8], Tensor[(9, 15, 2), float64], Tensor[(2, 280), float64], Tensor[(630), uint16], Tensor[(270), float64]) */;
  %216 = %210.0;
  %217 = %215.4;
  %218 = @func_3739() /* ty=Tensor[(15, 14, 16), float64] */;
  (%216, %217, meta[relay.Constant][18] /* ty=Tensor[(144), uint8] */, %var_4151, %218)
}

def @func_3739() -> Tensor[(15, 14, 16), float64] {
  %219 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 14, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 14, 16), float64] */;
  asin(%219) /* ty=Tensor[(15, 14, 16), float64] */
}

def @func_1795() -> (Tensor[(10, 12, 11), bool],) {
  %220 = cast(meta[relay.Constant][21] /* ty=Tensor[(10, 12, 11), int32] */, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %221 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(10, 12, 11), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 12, 11), int32] */, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %224 = less_equal(%222, %223) /* ty=Tensor[(10, 12, 11), bool] */;
  (%224,)
}

def @func_3179() -> (Tensor[(10, 12, 11), float32], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) {
  %225 = @func_2331() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %226 = %225.0;
  %227 = cast(%226, dtype="float32") /* ty=Tensor[(10, 12, 11), float32] */;
  %228 = @func_2268() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %229 = cast(meta[relay.Constant][22] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %230 = cast(meta[relay.Constant][22] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %231 = reshape(%229, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
  %232 = reshape(%230, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
  %233 = rsqrt(%227) /* ty=Tensor[(10, 12, 11), float32] */;
  %234 = %228.0;
  %235 = @func_1996(%231, %232) /* ty=Tensor[(3, ?, 2), uint64] */;
  (%233, %234, %235, meta[relay.Constant][22] /* ty=Tensor[(6), uint64] */)
}

def @func_6400() -> (Tensor[(10, 12, 11), bool],) {
  %236 = @func_3304() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %237 = %236.0;
  (%237,)
}

def @func_4532(%var_4511: Tensor[(10, 12, 11), bool], %var_4522: Tensor[(1, 6), uint64]) -> (Tensor[(3, ?, 2), uint64], Tensor[(1, 6), uint64], Tensor[(10, 12, 11), bool]) {
  %238 = cast(%var_4522, dtype="uint64") /* ty=Tensor[(1, 6), uint64] */;
  %239 = reshape(%238, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %240 = @func_2468(%239) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
  %241 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %242 = %241.0;
  %243 = cast(%var_4511, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%242, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %247 = logical_or(%245, %246) /* ty=Tensor[(10, 12, 11), bool] */;
  %248 = cast(%var_4511, dtype="int8") /* ty=Tensor[(10, 12, 11), int8] */;
  %249 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%242, dtype="int8") /* ty=Tensor[(10, 12, 11), int8] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %252 = add(%250, %251) /* ty=Tensor[(10, 12, 11), int8] */;
  %253 = cast(%252, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %254 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%247, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %257 = %240.2;
  %258 = less(%255, %256) /* ty=Tensor[(10, 12, 11), bool] */;
  (%257, %var_4522, %258)
}

def @func_1010(%var_976: Tensor[(14, 5, 8), float64], %var_1001: Tensor[(1, 630), uint16], %var_1008: Tensor[(270, 1), float64]) -> (Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) {
  %259 = cast(%var_976, dtype="float64") /* ty=Tensor[(14, 5, 8), float64] */;
  %260 = cast(meta[relay.Constant][23] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %261 = cast(meta[relay.Constant][24] /* ty=Tensor[(616), uint64] */, dtype="uint64") /* ty=Tensor[(616), uint64] */;
  %262 = reshape(%260, newshape=[]) /* ty=uint64 */;
  %263 = reshape(%261, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), uint64] */;
  %264 = cast(meta[relay.Constant][23] /* ty=uint64 */, dtype="uint16") /* ty=uint16 */;
  %265 = cast(%var_1001, dtype="uint16") /* ty=Tensor[(1, 630), uint16] */;
  %266 = cast(%var_1001, dtype="uint16") /* ty=Tensor[(1, 630), uint16] */;
  %267 = reshape(%264, newshape=[]) /* ty=uint16 */;
  %268 = reshape(%265, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint16] */;
  %269 = reshape(%266, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint16] */;
  %270 = @func_817(%267, %268, %269) /* ty=(Tensor[(14, 5, 9), bool], Tensor[(14, 5, 9), float64], Tensor[(14, 5, 9), float64]) */;
  %271 = cast(%var_1008, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
  %272 = reshape(%271, newshape=[9, 15, 2]) /* ty=Tensor[(9, 15, 2), float64] */;
  %273 = sinh(%259) /* ty=Tensor[(14, 5, 8), float64] */;
  %274 = @func_711(%262, %263) /* ty=Tensor[(11, 8, 7), uint64] */;
  %275 = %270.1;
  %276 = @func_365(%272) /* ty=Tensor[(9, 15, 2), float64] */;
  (%273, %274, meta[relay.Constant][23] /* ty=uint64 */, meta[relay.Constant][24] /* ty=Tensor[(616), uint64] */, %275, %var_1001, %276, %var_1008)
}

def @func_3598() -> Tensor[(6), uint64] {
  %277 = @func_3179() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
  %277.3
}

def @func_6752() -> (Tensor[(10, 12, 11), float32],) {
  %278 = @func_4719() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60, 1), uint16], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(3, 2), uint64], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(5, 16, 8), float32], Tensor[(640, 1), int32], Tensor[(10, 12, 11), float32]) */;
  %279 = %278.11;
  (%279,)
}

def @func_5532(%var_5480: Tensor[(1, 11, 4), bool], %var_5481: Tensor[(13, 11, 4), bool], %var_5490: Tensor[(13, 11, 4), bool], %var_5510: Tensor[(3, 2), float64], %var_5511: uint16, %var_5512: Tensor[(15, 4), uint16]) -> (Tensor[(13, 11, 4), bool], Tensor[(10, 12, 11), bool], Tensor[(5, 1, 12), uint16], Tensor[(3, 2), float64], Tensor[(15, 4), uint16], Tensor[(13, 11, 4), uint32]) {
  %280 = cast(%var_5480, dtype="bool") /* ty=Tensor[(1, 11, 4), bool] */;
  %281 = cast(%var_5481, dtype="bool") /* ty=Tensor[(13, 11, 4), bool] */;
  %282 = @func_3686() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %283 = cast(%var_5510, dtype="float64") /* ty=Tensor[(3, 2), float64] */;
  %284 = cast(%var_5511, dtype="uint16") /* ty=uint16 */;
  %285 = cast(%var_5512, dtype="uint16") /* ty=Tensor[(15, 4), uint16] */;
  %286 = reshape(%283, newshape=[1, 3, 2]) /* ty=Tensor[(1, 3, 2), float64] */;
  %287 = reshape(%284, newshape=[]) /* ty=uint16 */;
  %288 = reshape(%285, newshape=[30, 2]) /* ty=Tensor[(30, 2), uint16] */;
  %289 = @func_2638(%286, %287, %288) /* ty=(Tensor[(?, 3, 2), uint8], Tensor[(5, 1, 12), uint16], uint16, Tensor[(30, 2), uint16]) */;
  %290 = cast(%var_5481, dtype="float64") /* ty=Tensor[(13, 11, 4), float64] */;
  %291 = exp(%290) /* ty=Tensor[(13, 11, 4), float64] */;
  %292 = cast(%var_5490, dtype="float32") /* ty=Tensor[(13, 11, 4), float32] */;
  %293 = shape_of(%var_5481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%var_5481, dtype="float32") /* ty=Tensor[(13, 11, 4), float32] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %296 = floor_divide(%294, %295) /* ty=Tensor[(13, 11, 4), float32] */;
  %297 = cast(%296, dtype="int8") /* ty=Tensor[(13, 11, 4), int8] */;
  %298 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%291, dtype="int8") /* ty=Tensor[(13, 11, 4), int8] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %301 = subtract(%299, %300) /* ty=Tensor[(13, 11, 4), int8] */;
  %302 = cast(%301, dtype="uint32") /* ty=Tensor[(13, 11, 4), uint32] */;
  %303 = cast(%var_5511, dtype="uint32") /* ty=uint32 */;
  %304 = logical_or(%280, %281) /* ty=Tensor[(13, 11, 4), bool] */;
  %305 = %282.0;
  %306 = %289.1;
  %307 = add(%302, %303) /* ty=Tensor[(13, 11, 4), uint32] */;
  (%304, %305, %306, %var_5510, %var_5512, %307)
}

def @func_3059() -> Tensor[(10, 12, 11), bool] {
  @func_3038() /* ty=Tensor[(10, 12, 11), bool] */
}

def @func_380(%var_373: uint16, %var_374: Tensor[(5, 1, 12), uint16]) -> (Tensor[(5, 1, 12), uint16],) {
  %308 = cast(%var_373, dtype="uint16") /* ty=uint16 */;
  %309 = cast(%var_374, dtype="uint16") /* ty=Tensor[(5, 1, 12), uint16] */;
  %310 = logical_xor(%308, %309) /* ty=Tensor[(5, 1, 12), uint16] */;
  (%310,)
}

def @func_3028(%var_3000: uint16, %var_3020: Tensor[(560), float64], %var_3021: Tensor[(630), uint16], %var_3022: Tensor[(270), float64]) -> (Tensor[(10, 12, 11), bool], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60), uint16], Tensor[(9, 15, 2), float64], Tensor[(560), float64], Tensor[(630), uint16], Tensor[(270), float64]) {
  %311 = @func_2392() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %312 = cast(%var_3000, dtype="uint16") /* ty=uint16 */;
  %313 = cast(meta[relay.Constant][25] /* ty=Tensor[(60), uint16] */, dtype="uint16") /* ty=Tensor[(60), uint16] */;
  %314 = reshape(%312, newshape=[]) /* ty=uint16 */;
  %315 = reshape(%313, newshape=[5, 1, 12]) /* ty=Tensor[(5, 1, 12), uint16] */;
  %316 = @func_380(%314, %315) /* ty=(Tensor[(5, 1, 12), uint16],) */;
  %317 = cast(%var_3020, dtype="float64") /* ty=Tensor[(560), float64] */;
  %318 = cast(%var_3021, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %319 = cast(%var_3022, dtype="float64") /* ty=Tensor[(270), float64] */;
  %320 = reshape(%317, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), float64] */;
  %321 = reshape(%318, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
  %322 = reshape(%319, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
  %323 = @func_1010(%320, %321, %322) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) */;
  %324 = %311.0;
  %325 = %316.0;
  %326 = %323.6;
  (%324, %325, %var_3000, meta[relay.Constant][25] /* ty=Tensor[(60), uint16] */, %326, %var_3020, %var_3021, %var_3022)
}

def @func_3319() -> (Tensor[(10, 12, 11), bool],) {
  %327 = @func_3038() /* ty=Tensor[(10, 12, 11), bool] */;
  (%327,)
}

def @func_3481(%var_3456: Tensor[(10, 12, 11), bool], %var_3479: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), int16], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) {
  %328 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %329 = %328.0;
  %330 = cast(%var_3456, dtype="int16") /* ty=Tensor[(10, 12, 11), int16] */;
  %331 = shape_of(%329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%329, dtype="int16") /* ty=Tensor[(10, 12, 11), int16] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %334 = cast(%var_3479, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %335 = cast(%var_3479, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %336 = reshape(%334, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
  %337 = reshape(%335, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
  %338 = bitwise_and(%332, %333) /* ty=Tensor[(10, 12, 11), int16] */;
  %339 = @func_1996(%336, %337) /* ty=Tensor[(3, ?, 2), uint64] */;
  (%338, %339, %var_3479)
}

def @func_3038() -> Tensor[(10, 12, 11), bool] {
  %340 = @func_2331() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %340.0
}

def @func_1319(%var_1310: Tensor[(270), float64]) -> (Tensor[(4, 2, 14), float32], Tensor[(9, 15, 2), float64], Tensor[(270), float64], Tensor[(9, 15, 2), float64]) {
  %341 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 2, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 2, 14), float32] */;
  %342 = cast(%var_1310, dtype="float64") /* ty=Tensor[(270), float64] */;
  %343 = reshape(%342, newshape=[9, 15, 2]) /* ty=Tensor[(9, 15, 2), float64] */;
  %344 = cast(%var_1310, dtype="float64") /* ty=Tensor[(270), float64] */;
  %345 = reshape(%344, newshape=[9, 15, 2]) /* ty=Tensor[(9, 15, 2), float64] */;
  %346 = atan(%341) /* ty=Tensor[(4, 2, 14), float32] */;
  %347 = @func_365(%343) /* ty=Tensor[(9, 15, 2), float64] */;
  %348 = @func_365(%345) /* ty=Tensor[(9, 15, 2), float64] */;
  (%346, %347, %var_1310, %348)
}

def @func_2638(%var_2605: Tensor[(1, 3, 2), float64], %var_2634: uint16, %var_2635: Tensor[(30, 2), uint16]) -> (Tensor[(?, 3, 2), uint8], Tensor[(5, 1, 12), uint16], uint16, Tensor[(30, 2), uint16]) {
  %349 = cast(%var_2605, dtype="float64") /* ty=Tensor[(1, 3, 2), float64] */;
  %350 = acos(%349) /* ty=Tensor[(1, 3, 2), float64] */;
  %351 = cast(%var_2605, dtype="uint8") /* ty=Tensor[(1, 3, 2), uint8] */;
  %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%350, dtype="uint8") /* ty=Tensor[(1, 3, 2), uint8] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %355 = cast(%var_2634, dtype="uint16") /* ty=uint16 */;
  %356 = cast(%var_2635, dtype="uint16") /* ty=Tensor[(30, 2), uint16] */;
  %357 = reshape(%355, newshape=[]) /* ty=uint16 */;
  %358 = reshape(%356, newshape=[5, 1, 12]) /* ty=Tensor[(5, 1, 12), uint16] */;
  %359 = @func_380(%357, %358) /* ty=(Tensor[(5, 1, 12), uint16],) */;
  %360 = right_shift(%353, %354) /* ty=Tensor[(?, 3, 2), uint8] */;
  %361 = %359.0;
  (%360, %361, %var_2634, %var_2635)
}

def @func_4269() -> Tensor[(10, 12, 11), bool] {
  %362 = @func_3686() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %362.0
}

def @func_5069(%var_5047: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(14, 4, 10), float32], Tensor[(560), float32]) {
  %363 = @func_4023() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %364 = cast(%var_5047, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %365 = reshape(%364, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %366 = @func_2468(%365) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
  %367 = cast(meta[relay.Constant][27] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %368 = reshape(%367, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
  %369 = @func_3443(%368) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(14, 4, 10), bool], Tensor[(14, 4, 10), float32]) */;
  %370 = %363.1;
  %371 = %366.1;
  %372 = %369.2;
  (%370, %371, %var_5047, %372, meta[relay.Constant][27] /* ty=Tensor[(560), float32] */)
}

def @func_4589() -> (Tensor[(10, 12, 11), float32],) {
  %373 = @func_4095() /* ty=Tensor[(10, 12, 11), float32] */;
  (%373,)
}

def @func_6298(%var_6275: Tensor[(13, 3, 11), float64]) -> Tensor[(13, 3, 11), float64] {
  %374 = cast(%var_6275, dtype="float64") /* ty=Tensor[(13, 3, 11), float64] */;
  %375 = sqrt(%374) /* ty=Tensor[(13, 3, 11), float64] */;
  %376 = cast(%var_6275, dtype="float64") /* ty=Tensor[(13, 3, 11), float64] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="float64") /* ty=Tensor[(13, 3, 11), float64] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%378, %379) /* ty=Tensor[(13, 3, 11), float64] */
}

def @func_6390() -> Tensor[(10, 12, 11), bool] {
  %380 = @func_4023() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %380.2
}

def @func_2252(%var_2229: Tensor[(252), bool], %var_2230: Tensor[(616), uint64], %var_2241: Tensor[(630, 616), bool]) -> (Tensor[(13, 11, 4), int16], Tensor[(572), int16], Tensor[(320), int16], Tensor[(252), bool], Tensor[(10, 12, 11), bool], Tensor[(630, 616), float64]) {
  %381 = cast(meta[relay.Constant][28] /* ty=Tensor[(572), int16] */, dtype="int16") /* ty=Tensor[(572), int16] */;
  %382 = cast(meta[relay.Constant][29] /* ty=Tensor[(630, 1), uint16] */, dtype="uint16") /* ty=Tensor[(630, 1), uint16] */;
  %383 = reshape(%381, newshape=[13, 11, 4]) /* ty=Tensor[(13, 11, 4), int16] */;
  %384 = reshape(%382, newshape=[10, 63]) /* ty=Tensor[(10, 63), uint16] */;
  %385 = @func_859(%383, %384) /* ty=(Tensor[(13, 11, 4), int16], Tensor[(14, 5, 9), float64], uint16, Tensor[(10, 63), uint16]) */;
  %386 = cast(%var_2229, dtype="bool") /* ty=Tensor[(252), bool] */;
  %387 = cast(%var_2230, dtype="uint64") /* ty=Tensor[(616), uint64] */;
  %388 = reshape(%386, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %389 = reshape(%387, newshape=[616]) /* ty=Tensor[(616), uint64] */;
  %390 = @func_1604(%388, %389) /* ty=(Tensor[(3, 6, 14), bool], Tensor[(3, 6, 14), float64], Tensor[(16, 5, 4), float32], Tensor[(320), int16], Tensor[(616), uint64]) */;
  %391 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %392 = %391.0;
  %393 = @func_1984() /* ty=Tensor[(10, 12, 11), bool] */;
  %394 = cast(%393, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %395 = shape_of(%392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(%392, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %398 = cast(%var_2230, dtype="bool") /* ty=Tensor[(616), bool] */;
  %399 = cast(meta[relay.Constant][29] /* ty=Tensor[(630, 1), uint16] */, dtype="bool") /* ty=Tensor[(630, 1), bool] */;
  %400 = not_equal(%398, %399) /* ty=Tensor[(630, 616), bool] */;
  %401 = cast(%var_2241, dtype="float64") /* ty=Tensor[(630, 616), float64] */;
  %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(2), int32] */;
  %403 = cast(%400, dtype="float64") /* ty=Tensor[(630, 616), float64] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %405 = %385.0;
  %406 = %390.3;
  %407 = greater(%396, %397) /* ty=Tensor[(10, 12, 11), bool] */;
  %408 = power(%403, %404) /* ty=Tensor[(630, 616), float64] */;
  (%405, meta[relay.Constant][28] /* ty=Tensor[(572), int16] */, %406, %var_2229, %407, %408)
}

def @func_365(%var_362: Tensor[(9, 15, 2), float64]) -> Tensor[(9, 15, 2), float64] {
  %409 = cast(%var_362, dtype="float64") /* ty=Tensor[(9, 15, 2), float64] */;
  sin(%409) /* ty=Tensor[(9, 15, 2), float64] */
}

def @func_1940(%var_1807: Tensor[(10, 12, 11), bool], %var_1857: Tensor[(5, 126), uint16], %var_1865: Tensor[(640), int32]) -> (Tensor[(10, 12, 11), uint64], Tensor[(270), float64], Tensor[(10, 12, 11), float64], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(14, 5, 9), float64], uint16, Tensor[(5, 126), uint16], Tensor[(5, 16, 8), int32], Tensor[(640), int32], Tensor[(9, 15, 2), int32], Tensor[(9, 15, 2), float64], Tensor[(5, 16, 8), int32], Tensor[(9, 15, 2), float32], Tensor[(9, 15, 2), float64]) {
  %410 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %411 = %410.0;
  %412 = cast(%var_1807, dtype="uint64") /* ty=Tensor[(10, 12, 11), uint64] */;
  %413 = shape_of(%411, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%411, dtype="uint64") /* ty=Tensor[(10, 12, 11), uint64] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %416 = cast(%411, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
  %417 = cast(meta[relay.Constant][31] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %418 = reshape(%417, newshape=[5, 15, 14]) /* ty=Tensor[(5, 15, 14), float32] */;
  %419 = @func_1401(%418) /* ty=(Tensor[(5, 15, 14), float32], Tensor[(5, 15, 14), float32]) */;
  %420 = cast(meta[relay.Constant][32] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %421 = cast(%var_1857, dtype="uint16") /* ty=Tensor[(5, 126), uint16] */;
  %422 = cast(%var_1857, dtype="uint16") /* ty=Tensor[(5, 126), uint16] */;
  %423 = reshape(%420, newshape=[]) /* ty=uint16 */;
  %424 = reshape(%421, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint16] */;
  %425 = reshape(%422, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint16] */;
  %426 = @func_817(%423, %424, %425) /* ty=(Tensor[(14, 5, 9), bool], Tensor[(14, 5, 9), float64], Tensor[(14, 5, 9), float64]) */;
  %427 = cast(%var_1865, dtype="int32") /* ty=Tensor[(640), int32] */;
  %428 = reshape(%427, newshape=[5, 16, 8]) /* ty=Tensor[(5, 16, 8), int32] */;
  %429 = @func_1157(%428) /* ty=(Tensor[(5, 16, 8), int32], Tensor[(5, 16, 8), float32]) */;
  %430 = cast(meta[relay.Constant][30] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %431 = reshape(%430, newshape=[9, 15, 2]) /* ty=Tensor[(9, 15, 2), float64] */;
  %432 = @func_365(%431) /* ty=Tensor[(9, 15, 2), float64] */;
  %433 = cast(%432, dtype="float64") /* ty=Tensor[(9, 15, 2), float64] */;
  %434 = cos(%433) /* ty=Tensor[(9, 15, 2), float64] */;
  %435 = cast(meta[relay.Constant][33] /* ty=Tensor[(9, 15, 2), float64] */, dtype="int32") /* ty=Tensor[(9, 15, 2), int32] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%434, dtype="int32") /* ty=Tensor[(9, 15, 2), int32] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %439 = cast(meta[relay.Constant][33] /* ty=Tensor[(9, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 2), float64] */;
  %440 = reshape(%439, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %441 = @func_1319(%440) /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 15, 2), float64], Tensor[(270), float64], Tensor[(9, 15, 2), float64]) */;
  %442 = cast(%var_1865, dtype="int32") /* ty=Tensor[(640), int32] */;
  %443 = reshape(%442, newshape=[5, 16, 8]) /* ty=Tensor[(5, 16, 8), int32] */;
  %444 = @func_1157(%443) /* ty=(Tensor[(5, 16, 8), int32], Tensor[(5, 16, 8), float32]) */;
  %445 = cast(%434, dtype="float64") /* ty=Tensor[(9, 15, 2), float64] */;
  %446 = sqrt(%445) /* ty=Tensor[(9, 15, 2), float64] */;
  %447 = cast(meta[relay.Constant][33] /* ty=Tensor[(9, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 2), float64] */;
  %448 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%446, dtype="float64") /* ty=Tensor[(9, 15, 2), float64] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %451 = minimum(%449, %450) /* ty=Tensor[(9, 15, 2), float64] */;
  %452 = cast(%451, dtype="float32") /* ty=Tensor[(9, 15, 2), float32] */;
  %453 = cast(%451, dtype="float64") /* ty=Tensor[(9, 15, 2), float64] */;
  %454 = reshape(%453, newshape=[9, 15, 2]) /* ty=Tensor[(9, 15, 2), float64] */;
  %455 = left_shift(%414, %415) /* ty=Tensor[(10, 12, 11), uint64] */;
  %456 = sin(%416) /* ty=Tensor[(10, 12, 11), float64] */;
  %457 = %419.1;
  %458 = %426.1;
  %459 = %429.0;
  %460 = left_shift(%437, %438) /* ty=Tensor[(9, 15, 2), int32] */;
  %461 = %441.1;
  %462 = %444.0;
  %463 = atanh(%452) /* ty=Tensor[(9, 15, 2), float32] */;
  %464 = @func_365(%454) /* ty=Tensor[(9, 15, 2), float64] */;
  (%455, meta[relay.Constant][30] /* ty=Tensor[(270), float64] */, %456, %457, meta[relay.Constant][31] /* ty=Tensor[(1050), float32] */, %458, meta[relay.Constant][32] /* ty=uint16 */, %var_1857, %459, %var_1865, %460, %461, %462, %463, %464)
}

def @func_6745() -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
  %465 = @func_3997() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %466 = @func_5194() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(6), uint64]) */;
  %467 = %465.0;
  %468 = %466.0;
  (%467, %468)
}

def @func_3902() -> (Tensor[(16, 15, 9), float64],) {
  %469 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 15, 9), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 9), float64] */;
  %470 = cos(%469) /* ty=Tensor[(16, 15, 9), float64] */;
  (%470,)
}

def @main(%var_7256: Tensor[(15, 3, 2), int64], %var_7257: Tensor[(15, 3, 2), int64]) -> (Tensor[(15, 3, 2), int64],) {
  %471 = cast(%var_7257, dtype="int64") /* ty=Tensor[(15, 3, 2), int64] */;
  %472 = shape_of(%var_7256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%var_7256, dtype="int64") /* ty=Tensor[(15, 3, 2), int64] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %475 = multiply(%473, %474) /* ty=Tensor[(15, 3, 2), int64] */;
  (%475,)
}

def @func_3304() -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
  %476 = @func_1984() /* ty=Tensor[(10, 12, 11), bool] */;
  %477 = @func_3038() /* ty=Tensor[(10, 12, 11), bool] */;
  (%476, %477)
}

def @func_1157(%var_1145: Tensor[(5, 16, 8), int32]) -> (Tensor[(5, 16, 8), int32], Tensor[(5, 16, 8), float32]) {
  %478 = cast(%var_1145, dtype="int32") /* ty=Tensor[(5, 16, 8), int32] */;
  %479 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(5, 16, 8), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 16, 8), int32] */, dtype="int32") /* ty=Tensor[(5, 16, 8), int32] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %482 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 16, 8), int32] */, dtype="float32") /* ty=Tensor[(5, 16, 8), float32] */;
  %483 = add(%480, %481) /* ty=Tensor[(5, 16, 8), int32] */;
  %484 = sinh(%482) /* ty=Tensor[(5, 16, 8), float32] */;
  (%483, %484)
}

def @func_7240(%var_7233: Tensor[(320), int16], %var_7238: Tensor[(640), int32]) -> (Tensor[(10, 12, 11), bool], Tensor[(3, 90), float64], Tensor[(320), int16], Tensor[(560), float64], Tensor[(9, 15, 2), float32], Tensor[(630), uint16], Tensor[(640), int32]) {
  %485 = @func_3304() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %486 = cast(%var_7233, dtype="int16") /* ty=Tensor[(320), int16] */;
  %487 = cast(meta[relay.Constant][36] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
  %488 = reshape(%486, newshape=[320]) /* ty=Tensor[(320), int16] */;
  %489 = reshape(%487, newshape=[280, 2]) /* ty=Tensor[(280, 2), float64] */;
  %490 = @func_2430(%488, %489) /* ty=(Tensor[(9, 2, 16), float32], Tensor[(5, 15, 14), float32], Tensor[(320), int16], Tensor[(616), uint64], Tensor[(270, 1), float64], Tensor[(280, 2), float64], Tensor[(630), uint16], Tensor[(3, 90), float64], Tensor[(10, 12, 11), bool]) */;
  %491 = %485.0;
  %492 = cast(%491, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %493 = cast(meta[relay.Constant][37] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %494 = cast(%var_7238, dtype="int32") /* ty=Tensor[(640), int32] */;
  %495 = reshape(%492, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), bool] */;
  %496 = reshape(%493, newshape=[5, 126]) /* ty=Tensor[(5, 126), uint16] */;
  %497 = reshape(%494, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %498 = @func_1940(%495, %496, %497) /* ty=(Tensor[(10, 12, 11), uint64], Tensor[(270), float64], Tensor[(10, 12, 11), float64], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(14, 5, 9), float64], uint16, Tensor[(5, 126), uint16], Tensor[(5, 16, 8), int32], Tensor[(640), int32], Tensor[(9, 15, 2), int32], Tensor[(9, 15, 2), float64], Tensor[(5, 16, 8), int32], Tensor[(9, 15, 2), float32], Tensor[(9, 15, 2), float64]) */;
  %499 = %490.7;
  %500 = %498.13;
  (%491, %499, %var_7233, meta[relay.Constant][36] /* ty=Tensor[(560), float64] */, %500, meta[relay.Constant][37] /* ty=Tensor[(630), uint16] */, %var_7238)
}

def @func_1984() -> Tensor[(10, 12, 11), bool] {
  %501 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %501.0
}

def @func_4079(%var_4072: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) {
  %502 = @func_3319() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %503 = cast(%var_4072, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %504 = reshape(%503, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %505 = @func_2468(%504) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
  %506 = %502.0;
  %507 = %505.2;
  (%506, %507, %var_4072)
}

def @func_3662(%var_3648: Tensor[(10, 12, 11), bool]) -> (Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(10, 12, 11), int64]) {
  %508 = @func_2392() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %509 = %508.0;
  %510 = cast(%509, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %511 = cast(meta[relay.Constant][38] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %512 = reshape(%510, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), bool] */;
  %513 = reshape(%511, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %514 = @func_3481(%512, %513) /* ty=(Tensor[(10, 12, 11), int16], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
  %515 = cast(%var_3648, dtype="int64") /* ty=Tensor[(10, 12, 11), int64] */;
  %516 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%509, dtype="int64") /* ty=Tensor[(10, 12, 11), int64] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %519 = %514.2;
  %520 = multiply(%517, %518) /* ty=Tensor[(10, 12, 11), int64] */;
  (%519, meta[relay.Constant][38] /* ty=Tensor[(6), uint64] */, %520)
}

def @func_5129() -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(1, 6), uint64]) {
  %521 = @func_2331() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %522 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 6), uint64] */, dtype="uint64") /* ty=Tensor[(1, 6), uint64] */;
  %523 = reshape(%522, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %524 = @func_4161(%523) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(9, 15, 2), float64], Tensor[(144), uint8], Tensor[(6), uint64], Tensor[(15, 14, 16), float64]) */;
  %525 = %521.0;
  %526 = %524.0;
  (%525, %526, meta[relay.Constant][39] /* ty=Tensor[(1, 6), uint64] */)
}

def @func_3937() -> Tensor[(10, 12, 11), float64] {
  %527 = @func_2331() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %528 = %527.0;
  %529 = cast(%528, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
  sigmoid(%529) /* ty=Tensor[(10, 12, 11), float64] */
}

def @func_6681(%var_6669: Tensor[(10, 12, 11), bool]) -> (Tensor[(10, 12, 11), bool],) {
  %530 = @func_2331() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %531 = %530.0;
  %532 = cast(%var_6669, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %533 = shape_of(%531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%531, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %536 = greater_equal(%534, %535) /* ty=Tensor[(10, 12, 11), bool] */;
  (%536,)
}

def @func_817(%var_772: uint16, %var_773: Tensor[(14, 5, 9), uint16], %var_787: Tensor[(14, 5, 9), uint16]) -> (Tensor[(14, 5, 9), bool], Tensor[(14, 5, 9), float64], Tensor[(14, 5, 9), float64]) {
  %537 = cast(%var_772, dtype="uint16") /* ty=uint16 */;
  %538 = cast(%var_773, dtype="uint16") /* ty=Tensor[(14, 5, 9), uint16] */;
  %539 = bitwise_or(%537, %538) /* ty=Tensor[(14, 5, 9), uint16] */;
  %540 = cast(%var_787, dtype="bool") /* ty=Tensor[(14, 5, 9), bool] */;
  %541 = shape_of(%539, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(%539, dtype="bool") /* ty=Tensor[(14, 5, 9), bool] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %544 = cast(%var_787, dtype="float64") /* ty=Tensor[(14, 5, 9), float64] */;
  %545 = cast(%539, dtype="float64") /* ty=Tensor[(14, 5, 9), float64] */;
  %546 = less_equal(%542, %543) /* ty=Tensor[(14, 5, 9), bool] */;
  %547 = log(%544) /* ty=Tensor[(14, 5, 9), float64] */;
  %548 = cosh(%545) /* ty=Tensor[(14, 5, 9), float64] */;
  (%546, %547, %548)
}

def @func_6846() -> (Tensor[(10, 12, 11), bool],) {
  %549 = @func_5587() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(4, 9, 4), uint8], Tensor[(144, 1), uint8], Tensor[(6), uint64], Tensor[(10, 12, 11), bool]) */;
  %550 = %549.0;
  (%550,)
}

def @func_6343() -> Tensor[(10, 12, 11), bool] {
  @func_2365() /* ty=Tensor[(10, 12, 11), bool] */
}

def @func_5449(%var_5440: Tensor[(4, 15), float32]) -> (Tensor[(4, 15), float32], Tensor[(10, 12, 11), bool]) {
  %551 = cast(%var_5440, dtype="float32") /* ty=Tensor[(4, 15), float32] */;
  %552 = acosh(%551) /* ty=Tensor[(4, 15), float32] */;
  %553 = @func_3059() /* ty=Tensor[(10, 12, 11), bool] */;
  (%552, %553)
}

def @func_6830(%var_6803: Tensor[(3, 2), float64]) -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], uint16, Tensor[(3, 2), float64], uint16, Tensor[(15, 4), uint16]) {
  %554 = @func_3179() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
  %555 = cast(%var_6803, dtype="float64") /* ty=Tensor[(3, 2), float64] */;
  %556 = cast(meta[relay.Constant][40] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %557 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 4), uint16] */, dtype="uint16") /* ty=Tensor[(15, 4), uint16] */;
  %558 = reshape(%555, newshape=[1, 3, 2]) /* ty=Tensor[(1, 3, 2), float64] */;
  %559 = reshape(%556, newshape=[]) /* ty=uint16 */;
  %560 = reshape(%557, newshape=[30, 2]) /* ty=Tensor[(30, 2), uint16] */;
  %561 = @func_2638(%558, %559, %560) /* ty=(Tensor[(?, 3, 2), uint8], Tensor[(5, 1, 12), uint16], uint16, Tensor[(30, 2), uint16]) */;
  %562 = %554.1;
  %563 = @func_3038() /* ty=Tensor[(10, 12, 11), bool] */;
  %564 = %561.2;
  (%562, %563, %564, %var_6803, meta[relay.Constant][40] /* ty=uint16 */, meta[relay.Constant][41] /* ty=Tensor[(15, 4), uint16] */)
}

def @func_6095() -> (Tensor[(10, 12, 11), float32], Tensor[(13, 10, 12), bool], Tensor[(1560), int16]) {
  %565 = @func_3179() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
  %566 = cast(meta[relay.Constant][42] /* ty=Tensor[(1560), int16] */, dtype="int16") /* ty=Tensor[(1560), int16] */;
  %567 = cast(meta[relay.Constant][42] /* ty=Tensor[(1560), int16] */, dtype="int16") /* ty=Tensor[(1560), int16] */;
  %568 = reshape(%566, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), int16] */;
  %569 = reshape(%567, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), int16] */;
  %570 = @func_4823(%568, %569) /* ty=(Tensor[(13, 10, 12), bool],) */;
  %571 = %565.0;
  %572 = %570.0;
  (%571, %572, meta[relay.Constant][42] /* ty=Tensor[(1560), int16] */)
}

def @func_6265(%var_6225: Tensor[(210, 3), uint16], %var_6234: Tensor[(4, 140), float64]) -> (Tensor[(10, 12, 11), bool], uint16, Tensor[(14, 5, 8), float64], Tensor[(4, 140), float64], Tensor[(270), float64], Tensor[(210, 3), bool], Tensor[(10, 12, 11), bool]) {
  %573 = cast(%var_6234, dtype="float64") /* ty=Tensor[(4, 140), float64] */;
  %574 = cast(%var_6225, dtype="float64") /* ty=Tensor[(210, 3), float64] */;
  %575 = cos(%574) /* ty=Tensor[(210, 3), float64] */;
  %576 = cast(%575, dtype="uint16") /* ty=Tensor[(210, 3), uint16] */;
  %577 = cast(meta[relay.Constant][44] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %578 = reshape(%573, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), float64] */;
  %579 = reshape(%576, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
  %580 = reshape(%577, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
  %581 = @func_1010(%578, %579, %580) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) */;
  %582 = cast(meta[relay.Constant][43] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %583 = cast(%var_6225, dtype="uint16") /* ty=Tensor[(210, 3), uint16] */;
  %584 = cast(%var_6225, dtype="uint16") /* ty=Tensor[(210, 3), uint16] */;
  %585 = reshape(%582, newshape=[]) /* ty=uint16 */;
  %586 = reshape(%583, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint16] */;
  %587 = reshape(%584, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint16] */;
  %588 = @func_817(%585, %586, %587) /* ty=(Tensor[(14, 5, 9), bool], Tensor[(14, 5, 9), float64], Tensor[(14, 5, 9), float64]) */;
  %589 = %588.2;
  %590 = cast(%589, dtype="bool") /* ty=Tensor[(14, 5, 9), bool] */;
  %591 = shape_of(%575, dtype="int32") /* ty=Tensor[(2), int32] */;
  %592 = cast(%575, dtype="bool") /* ty=Tensor[(210, 3), bool] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %594 = @func_3197() /* ty=Tensor[(10, 12, 11), bool] */;
  %595 = %581.0;
  %596 = not_equal(%592, %593) /* ty=Tensor[(210, 3), bool] */;
  %597 = @func_3059() /* ty=Tensor[(10, 12, 11), bool] */;
  (%594, meta[relay.Constant][43] /* ty=uint16 */, %595, %var_6234, meta[relay.Constant][44] /* ty=Tensor[(270), float64] */, %596, %597)
}

def @func_3250() -> Tensor[(10, 12, 11), uint64] {
  %598 = @func_3179() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
  %599 = %598.1;
  %600 = cast(meta[relay.Constant][45] /* ty=Tensor[(10, 12, 11), bool] */, dtype="uint64") /* ty=Tensor[(10, 12, 11), uint64] */;
  %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%599, dtype="uint64") /* ty=Tensor[(10, 12, 11), uint64] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%602, %603) /* ty=Tensor[(10, 12, 11), uint64] */
}

def @func_5966() -> Tensor[(60, 1), uint16] {
  %604 = @func_4719() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60, 1), uint16], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(3, 2), uint64], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(5, 16, 8), float32], Tensor[(640, 1), int32], Tensor[(10, 12, 11), float32]) */;
  %604.3
}

def @func_1996(%var_1986: Tensor[(3, 1, 2), uint64], %var_1987: Tensor[(3, 1, 2), uint64]) -> Tensor[(3, ?, 2), uint64] {
  %605 = cast(%var_1987, dtype="uint64") /* ty=Tensor[(3, 1, 2), uint64] */;
  %606 = shape_of(%var_1986, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%var_1986, dtype="uint64") /* ty=Tensor[(3, 1, 2), uint64] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%607, %608) /* ty=Tensor[(3, ?, 2), uint64] */
}

def @func_4414(%var_4341: Tensor[(14, 2, 14), uint8], %var_4342: Tensor[(14, 2, 14), uint8], %var_4391: Tensor[(252), bool], %var_4403: Tensor[(144), uint8], %var_4404: Tensor[(6), uint64]) -> (Tensor[(14, 2, 14), uint8], Tensor[(14, 2, 14), float32], Tensor[(320), int16], Tensor[(252), bool], Tensor[(616, 1), uint64], Tensor[(388080), bool], Tensor[(4, 9, 4), uint8], Tensor[(144), uint8], Tensor[(6), uint64]) {
  %609 = cast(%var_4342, dtype="uint8") /* ty=Tensor[(14, 2, 14), uint8] */;
  %610 = shape_of(%var_4341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%var_4341, dtype="uint8") /* ty=Tensor[(14, 2, 14), uint8] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %613 = cast(%var_4342, dtype="float32") /* ty=Tensor[(14, 2, 14), float32] */;
  %614 = cast(%var_4391, dtype="bool") /* ty=Tensor[(252), bool] */;
  %615 = cast(meta[relay.Constant][46] /* ty=Tensor[(616, 1), uint64] */, dtype="uint64") /* ty=Tensor[(616, 1), uint64] */;
  %616 = cast(meta[relay.Constant][47] /* ty=Tensor[(388080), bool] */, dtype="bool") /* ty=Tensor[(388080), bool] */;
  %617 = reshape(%614, newshape=[252]) /* ty=Tensor[(252), bool] */;
  %618 = reshape(%615, newshape=[616]) /* ty=Tensor[(616), uint64] */;
  %619 = reshape(%616, newshape=[630, 616]) /* ty=Tensor[(630, 616), bool] */;
  %620 = @func_2252(%617, %618, %619) /* ty=(Tensor[(13, 11, 4), int16], Tensor[(572), int16], Tensor[(320), int16], Tensor[(252), bool], Tensor[(10, 12, 11), bool], Tensor[(630, 616), float64]) */;
  %621 = cast(%var_4403, dtype="uint8") /* ty=Tensor[(144), uint8] */;
  %622 = cast(%var_4404, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %623 = reshape(%621, newshape=[4, 9, 4]) /* ty=Tensor[(4, 9, 4), uint8] */;
  %624 = reshape(%622, newshape=[1, 6]) /* ty=Tensor[(1, 6), uint64] */;
  %625 = @func_2530(%623, %624) /* ty=(Tensor[(4, 9, 4), uint8], Tensor[(3, ?, 2), uint64], Tensor[(1, 6), uint64], Tensor[(4, 9, 4), uint8], Tensor[(9, 15, 2), float64], Tensor[(2, 280), float64], Tensor[(630), uint16], Tensor[(270), float64]) */;
  %626 = multiply(%611, %612) /* ty=Tensor[(14, 2, 14), uint8] */;
  %627 = asin(%613) /* ty=Tensor[(14, 2, 14), float32] */;
  %628 = %620.2;
  %629 = %625.3;
  (%626, %627, %628, %var_4391, meta[relay.Constant][46] /* ty=Tensor[(616, 1), uint64] */, meta[relay.Constant][47] /* ty=Tensor[(388080), bool] */, %629, %var_4403, %var_4404)
}

def @func_7012() -> Tensor[(10, 12, 11), float32] {
  %630 = @func_4589() /* ty=(Tensor[(10, 12, 11), float32],) */;
  %630.0
}

def @func_4747(%var_4730: Tensor[(6, 3, 9), uint32], %var_4731: Tensor[(6, 3, 9), uint32]) -> (Tensor[(6, 3, 9), uint32],) {
  %631 = cast(%var_4731, dtype="uint32") /* ty=Tensor[(6, 3, 9), uint32] */;
  %632 = shape_of(%var_4730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%var_4730, dtype="uint32") /* ty=Tensor[(6, 3, 9), uint32] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %635 = bitwise_or(%633, %634) /* ty=Tensor[(6, 3, 9), uint32] */;
  (%635,)
}

def @func_2941() -> (Tensor[(10, 12, 11), float32],) {
  %636 = @func_2365() /* ty=Tensor[(10, 12, 11), bool] */;
  %637 = cast(%636, dtype="float32") /* ty=Tensor[(10, 12, 11), float32] */;
  %638 = sqrt(%637) /* ty=Tensor[(10, 12, 11), float32] */;
  (%638,)
}

def @func_4878(%var_4857: Tensor[(1560), int16], %var_4874: Tensor[(1560), float64]) -> (Tensor[(10, 12, 11), bool], Tensor[(13, 10, 12), bool], Tensor[(1560), uint64]) {
  %639 = cast(%var_4857, dtype="int16") /* ty=Tensor[(1560), int16] */;
  %640 = cast(%var_4857, dtype="int16") /* ty=Tensor[(1560), int16] */;
  %641 = reshape(%639, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), int16] */;
  %642 = reshape(%640, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), int16] */;
  %643 = @func_4823(%641, %642) /* ty=(Tensor[(13, 10, 12), bool],) */;
  %644 = cast(%var_4857, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %645 = sin(%644) /* ty=Tensor[(1560), float64] */;
  %646 = cast(%var_4874, dtype="uint64") /* ty=Tensor[(1560), uint64] */;
  %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(1), int32] */;
  %648 = cast(%645, dtype="uint64") /* ty=Tensor[(1560), uint64] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %650 = @func_4269() /* ty=Tensor[(10, 12, 11), bool] */;
  %651 = %643.0;
  %652 = logical_xor(%648, %649) /* ty=Tensor[(1560), uint64] */;
  (%650, %651, %652)
}

def @func_2530(%var_2493: Tensor[(4, 9, 4), uint8], %var_2499: Tensor[(1, 6), uint64]) -> (Tensor[(4, 9, 4), uint8], Tensor[(3, ?, 2), uint64], Tensor[(1, 6), uint64], Tensor[(4, 9, 4), uint8], Tensor[(9, 15, 2), float64], Tensor[(2, 280), float64], Tensor[(630), uint16], Tensor[(270), float64]) {
  %653 = cast(%var_2493, dtype="uint8") /* ty=Tensor[(4, 9, 4), uint8] */;
  %654 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(4, 9, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 9, 4), uint8] */, dtype="uint8") /* ty=Tensor[(4, 9, 4), uint8] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %657 = cast(%var_2499, dtype="uint64") /* ty=Tensor[(1, 6), uint64] */;
  %658 = cast(%var_2499, dtype="uint64") /* ty=Tensor[(1, 6), uint64] */;
  %659 = reshape(%657, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
  %660 = reshape(%658, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
  %661 = cast(%var_2493, dtype="uint8") /* ty=Tensor[(4, 9, 4), uint8] */;
  %662 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(4, 9, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 9, 4), uint8] */, dtype="uint8") /* ty=Tensor[(4, 9, 4), uint8] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %665 = cast(meta[relay.Constant][49] /* ty=Tensor[(2, 280), float64] */, dtype="float64") /* ty=Tensor[(2, 280), float64] */;
  %666 = cast(meta[relay.Constant][50] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %667 = cast(meta[relay.Constant][51] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %668 = reshape(%665, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), float64] */;
  %669 = reshape(%666, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
  %670 = reshape(%667, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
  %671 = @func_1010(%668, %669, %670) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) */;
  %672 = right_shift(%655, %656) /* ty=Tensor[(4, 9, 4), uint8] */;
  %673 = @func_1996(%659, %660) /* ty=Tensor[(3, ?, 2), uint64] */;
  %674 = bitwise_or(%663, %664) /* ty=Tensor[(4, 9, 4), uint8] */;
  %675 = %671.6;
  (%672, %673, %var_2499, %674, %675, meta[relay.Constant][49] /* ty=Tensor[(2, 280), float64] */, meta[relay.Constant][50] /* ty=Tensor[(630), uint16] */, meta[relay.Constant][51] /* ty=Tensor[(270), float64] */)
}

def @func_4463(%var_4440: Tensor[(15, 11, 3), float64]) -> (Tensor[(15, 11, 3), float64], Tensor[(15, 11, 3), float64]) {
  %676 = cast(%var_4440, dtype="float64") /* ty=Tensor[(15, 11, 3), float64] */;
  %677 = cast(%var_4440, dtype="float64") /* ty=Tensor[(15, 11, 3), float64] */;
  %678 = rsqrt(%676) /* ty=Tensor[(15, 11, 3), float64] */;
  %679 = cos(%677) /* ty=Tensor[(15, 11, 3), float64] */;
  (%678, %679)
}

def @func_4582(%var_4567: Tensor[(560), float64]) -> (Tensor[(5, 16, 8), float32], Tensor[(640), int32], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), float64], Tensor[(1, 630), uint16], Tensor[(560), float64], Tensor[(630), uint16], Tensor[(270), float64]) {
  %680 = cast(meta[relay.Constant][52] /* ty=Tensor[(640), int32] */, dtype="int32") /* ty=Tensor[(640), int32] */;
  %681 = reshape(%680, newshape=[5, 16, 8]) /* ty=Tensor[(5, 16, 8), int32] */;
  %682 = @func_1157(%681) /* ty=(Tensor[(5, 16, 8), int32], Tensor[(5, 16, 8), float32]) */;
  %683 = @func_3059() /* ty=Tensor[(10, 12, 11), bool] */;
  %684 = cast(%683, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
  %685 = cast(%var_4567, dtype="float64") /* ty=Tensor[(560), float64] */;
  %686 = cast(meta[relay.Constant][53] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %687 = cast(meta[relay.Constant][54] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %688 = reshape(%685, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), float64] */;
  %689 = reshape(%686, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
  %690 = reshape(%687, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
  %691 = @func_1010(%688, %689, %690) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) */;
  %692 = %682.1;
  %693 = @func_3197() /* ty=Tensor[(10, 12, 11), bool] */;
  %694 = asin(%684) /* ty=Tensor[(10, 12, 11), float64] */;
  %695 = %691.5;
  (%692, meta[relay.Constant][52] /* ty=Tensor[(640), int32] */, %693, %694, %695, %var_4567, meta[relay.Constant][53] /* ty=Tensor[(630), uint16] */, meta[relay.Constant][54] /* ty=Tensor[(270), float64] */)
}

def @func_3845(%var_3837: int8, %var_3838: Tensor[(9, 13, 12), int8]) -> Tensor[(9, 13, 12), int8] {
  %696 = cast(%var_3837, dtype="int8") /* ty=int8 */;
  %697 = cast(%var_3838, dtype="int8") /* ty=Tensor[(9, 13, 12), int8] */;
  multiply(%696, %697) /* ty=Tensor[(9, 13, 12), int8] */
}

def @func_4823(%var_4814: Tensor[(13, 10, 12), int16], %var_4815: Tensor[(13, 10, 12), int16]) -> (Tensor[(13, 10, 12), bool],) {
  %698 = cast(%var_4815, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %699 = shape_of(%var_4814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(%var_4814, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %702 = greater(%700, %701) /* ty=Tensor[(13, 10, 12), bool] */;
  (%702,)
}

def @func_2268() -> (Tensor[(10, 12, 11), bool],) {
  %703 = @func_1984() /* ty=Tensor[(10, 12, 11), bool] */;
  (%703,)
}

def @func_2740(%var_2707: uint16, %var_2716: Tensor[(640), int32]) -> (Tensor[(1, 15, 1), float32], Tensor[(6), uint64], Tensor[(10, 12, 11), bool], Tensor[(3, 15, 2), uint16], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60), uint16], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(1050), float32], Tensor[(630), uint16], Tensor[(640), int32], Tensor[(280, 2), float64], Tensor[(160, 2), int16], Tensor[(560), float64]) {
  %704 = cast(meta[relay.Constant][55] /* ty=Tensor[(1, 15, 1), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 1), float32] */;
  %705 = cast(meta[relay.Constant][56] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %706 = reshape(%705, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %707 = @func_2468(%706) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
  %708 = %707.2;
  %709 = cast(%708, dtype="uint64") /* ty=Tensor[(3, ?, 2), uint64] */;
  %710 = reshape(%709, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %711 = @func_2468(%710) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
  %712 = cast(meta[relay.Constant][55] /* ty=Tensor[(1, 15, 1), float32] */, dtype="uint16") /* ty=Tensor[(1, 15, 1), uint16] */;
  %713 = cast(%708, dtype="uint16") /* ty=Tensor[(3, ?, 2), uint16] */;
  %714 = cast(%var_2707, dtype="uint16") /* ty=uint16 */;
  %715 = cast(meta[relay.Constant][57] /* ty=Tensor[(60), uint16] */, dtype="uint16") /* ty=Tensor[(60), uint16] */;
  %716 = reshape(%714, newshape=[]) /* ty=uint16 */;
  %717 = reshape(%715, newshape=[5, 1, 12]) /* ty=Tensor[(5, 1, 12), uint16] */;
  %718 = @func_380(%716, %717) /* ty=(Tensor[(5, 1, 12), uint16],) */;
  %719 = cast(meta[relay.Constant][58] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %720 = reshape(%719, newshape=[5, 15, 14]) /* ty=Tensor[(5, 15, 14), float32] */;
  %721 = @func_1401(%720) /* ty=(Tensor[(5, 15, 14), float32], Tensor[(5, 15, 14), float32]) */;
  %722 = %711.1;
  %723 = cast(%722, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %724 = cast(meta[relay.Constant][59] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %725 = cast(%var_2716, dtype="int32") /* ty=Tensor[(640), int32] */;
  %726 = reshape(%723, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), bool] */;
  %727 = reshape(%724, newshape=[5, 126]) /* ty=Tensor[(5, 126), uint16] */;
  %728 = reshape(%725, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %729 = @func_1940(%726, %727, %728) /* ty=(Tensor[(10, 12, 11), uint64], Tensor[(270), float64], Tensor[(10, 12, 11), float64], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(14, 5, 9), float64], uint16, Tensor[(5, 126), uint16], Tensor[(5, 16, 8), int32], Tensor[(640), int32], Tensor[(9, 15, 2), int32], Tensor[(9, 15, 2), float64], Tensor[(5, 16, 8), int32], Tensor[(9, 15, 2), float32], Tensor[(9, 15, 2), float64]) */;
  %730 = cast(meta[relay.Constant][60] /* ty=Tensor[(160, 2), int16] */, dtype="int16") /* ty=Tensor[(160, 2), int16] */;
  %731 = cast(meta[relay.Constant][61] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
  %732 = reshape(%730, newshape=[320]) /* ty=Tensor[(320), int16] */;
  %733 = reshape(%731, newshape=[280, 2]) /* ty=Tensor[(280, 2), float64] */;
  %734 = @func_2430(%732, %733) /* ty=(Tensor[(9, 2, 16), float32], Tensor[(5, 15, 14), float32], Tensor[(320), int16], Tensor[(616), uint64], Tensor[(270, 1), float64], Tensor[(280, 2), float64], Tensor[(630), uint16], Tensor[(3, 90), float64], Tensor[(10, 12, 11), bool]) */;
  %735 = log10(%704) /* ty=Tensor[(1, 15, 1), float32] */;
  %736 = bitwise_and(%712, %713) /* ty=Tensor[(3, 15, 2), uint16] */;
  %737 = %718.0;
  %738 = %721.0;
  %739 = %729.4;
  %740 = %734.5;
  (%735, meta[relay.Constant][56] /* ty=Tensor[(6), uint64] */, %722, %736, %737, %var_2707, meta[relay.Constant][57] /* ty=Tensor[(60), uint16] */, %738, meta[relay.Constant][58] /* ty=Tensor[(1050), float32] */, %739, meta[relay.Constant][59] /* ty=Tensor[(630), uint16] */, %var_2716, %740, meta[relay.Constant][60] /* ty=Tensor[(160, 2), int16] */, meta[relay.Constant][61] /* ty=Tensor[(560), float64] */)
}

def @func_859(%var_846: Tensor[(13, 11, 4), int16], %var_855: Tensor[(10, 63), uint16]) -> (Tensor[(13, 11, 4), int16], Tensor[(14, 5, 9), float64], uint16, Tensor[(10, 63), uint16]) {
  %741 = cast(%var_846, dtype="int16") /* ty=Tensor[(13, 11, 4), int16] */;
  %742 = shape_of(meta[relay.Constant][62] /* ty=Tensor[(13, 11, 4), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(meta[relay.Constant][62] /* ty=Tensor[(13, 11, 4), int16] */, dtype="int16") /* ty=Tensor[(13, 11, 4), int16] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %745 = cast(meta[relay.Constant][63] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %746 = cast(%var_855, dtype="uint16") /* ty=Tensor[(10, 63), uint16] */;
  %747 = cast(%var_855, dtype="uint16") /* ty=Tensor[(10, 63), uint16] */;
  %748 = reshape(%745, newshape=[]) /* ty=uint16 */;
  %749 = reshape(%746, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint16] */;
  %750 = reshape(%747, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint16] */;
  %751 = @func_817(%748, %749, %750) /* ty=(Tensor[(14, 5, 9), bool], Tensor[(14, 5, 9), float64], Tensor[(14, 5, 9), float64]) */;
  %752 = bitwise_and(%743, %744) /* ty=Tensor[(13, 11, 4), int16] */;
  %753 = %751.1;
  (%752, %753, meta[relay.Constant][63] /* ty=uint16 */, %var_855)
}

def @func_1604(%var_1588: Tensor[(3, 6, 14), bool], %var_1597: Tensor[(616), uint64]) -> (Tensor[(3, 6, 14), bool], Tensor[(3, 6, 14), float64], Tensor[(16, 5, 4), float32], Tensor[(320), int16], Tensor[(616), uint64]) {
  %754 = cast(meta[relay.Constant][64] /* ty=Tensor[(3, 6, 14), bool] */, dtype="bool") /* ty=Tensor[(3, 6, 14), bool] */;
  %755 = shape_of(%var_1588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%var_1588, dtype="bool") /* ty=Tensor[(3, 6, 14), bool] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %758 = cast(%var_1588, dtype="float64") /* ty=Tensor[(3, 6, 14), float64] */;
  %759 = cast(meta[relay.Constant][65] /* ty=Tensor[(320), int16] */, dtype="int16") /* ty=Tensor[(320), int16] */;
  %760 = cast(%var_1597, dtype="uint64") /* ty=Tensor[(616), uint64] */;
  %761 = reshape(%759, newshape=[16, 5, 4]) /* ty=Tensor[(16, 5, 4), int16] */;
  %762 = reshape(%760, newshape=[616]) /* ty=Tensor[(616), uint64] */;
  %763 = @func_1574(%761, %762) /* ty=(Tensor[(16, 5, 4), float32], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(11, 8, 7), uint64], Tensor[(616), uint64]) */;
  %764 = logical_and(%756, %757) /* ty=Tensor[(3, 6, 14), bool] */;
  %765 = exp(%758) /* ty=Tensor[(3, 6, 14), float64] */;
  %766 = %763.0;
  (%764, %765, %766, meta[relay.Constant][65] /* ty=Tensor[(320), int16] */, %var_1597)
}

def @func_3880(%var_3851: Tensor[(3, 8, 3), float32], %var_3873: Tensor[(1320), bool], %var_3874: Tensor[(6), uint64]) -> (Tensor[(3, 8, 3), float32], Tensor[(15, 14, 16), float64], Tensor[(14, 4, 10), float32], Tensor[(560), float32], Tensor[(3, ?, 2), uint64], Tensor[(1320), bool], Tensor[(6), uint64]) {
  %767 = cast(meta[relay.Constant][66] /* ty=Tensor[(3, 8, 3), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 3), float32] */;
  %768 = shape_of(%var_3851, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%var_3851, dtype="float32") /* ty=Tensor[(3, 8, 3), float32] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %771 = cast(meta[relay.Constant][67] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %772 = reshape(%771, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
  %773 = @func_3443(%772) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(14, 4, 10), bool], Tensor[(14, 4, 10), float32]) */;
  %774 = cast(%var_3873, dtype="bool") /* ty=Tensor[(1320), bool] */;
  %775 = cast(%var_3874, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %776 = reshape(%774, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), bool] */;
  %777 = reshape(%775, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %778 = @func_3481(%776, %777) /* ty=(Tensor[(10, 12, 11), int16], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
  %779 = floor_divide(%769, %770) /* ty=Tensor[(3, 8, 3), float32] */;
  %780 = @func_3739() /* ty=Tensor[(15, 14, 16), float64] */;
  %781 = %773.2;
  %782 = %778.1;
  (%779, %780, %781, meta[relay.Constant][67] /* ty=Tensor[(560), float32] */, %782, %var_3873, %var_3874)
}

def @func_2365() -> Tensor[(10, 12, 11), bool] {
  %783 = @func_2268() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %783.0
}

def @func_3997() -> (Tensor[(10, 12, 11), bool],) {
  %784 = @func_3059() /* ty=Tensor[(10, 12, 11), bool] */;
  (%784,)
}

def @func_2392() -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
  %785 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %786 = @func_1984() /* ty=Tensor[(10, 12, 11), bool] */;
  %787 = %785.0;
  (%786, %787)
}

def @func_5837() -> (Tensor[(15, 14, 16), float64],) {
  %788 = @func_3739() /* ty=Tensor[(15, 14, 16), float64] */;
  (%788,)
}

def @func_7211() -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
  %789 = @func_1984() /* ty=Tensor[(10, 12, 11), bool] */;
  %790 = @func_1984() /* ty=Tensor[(10, 12, 11), bool] */;
  (%789, %790)
}

def @func_4095() -> Tensor[(10, 12, 11), float32] {
  %791 = @func_2941() /* ty=(Tensor[(10, 12, 11), float32],) */;
  %791.0
}

def @func_5756(%var_5691: Tensor[(7, 10, 11), bool], %var_5692: Tensor[(7, 10, 11), bool], %var_5728: Tensor[(1320), bool], %var_5739: uint16, %var_5740: Tensor[(60), uint16]) -> (Tensor[(15, 14, 16), float64], Tensor[(72), float32], Tensor[(1320), bool], Tensor[(6, 1), uint64], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60), uint16], Tensor[(7, 10, 11), float32]) {
  %792 = cast(meta[relay.Constant][68] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %793 = cast(%var_5728, dtype="bool") /* ty=Tensor[(1320), bool] */;
  %794 = cast(meta[relay.Constant][69] /* ty=Tensor[(6, 1), uint64] */, dtype="uint64") /* ty=Tensor[(6, 1), uint64] */;
  %795 = reshape(%792, newshape=[3, 8, 3]) /* ty=Tensor[(3, 8, 3), float32] */;
  %796 = reshape(%793, newshape=[1320]) /* ty=Tensor[(1320), bool] */;
  %797 = reshape(%794, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %798 = @func_3880(%795, %796, %797) /* ty=(Tensor[(3, 8, 3), float32], Tensor[(15, 14, 16), float64], Tensor[(14, 4, 10), float32], Tensor[(560), float32], Tensor[(3, ?, 2), uint64], Tensor[(1320), bool], Tensor[(6), uint64]) */;
  %799 = cast(%var_5739, dtype="uint16") /* ty=uint16 */;
  %800 = cast(%var_5740, dtype="uint16") /* ty=Tensor[(60), uint16] */;
  %801 = reshape(%799, newshape=[]) /* ty=uint16 */;
  %802 = reshape(%800, newshape=[5, 1, 12]) /* ty=Tensor[(5, 1, 12), uint16] */;
  %803 = @func_380(%801, %802) /* ty=(Tensor[(5, 1, 12), uint16],) */;
  %804 = cast(%var_5692, dtype="bool") /* ty=Tensor[(7, 10, 11), bool] */;
  %805 = shape_of(%var_5691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%var_5691, dtype="bool") /* ty=Tensor[(7, 10, 11), bool] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %808 = logical_or(%806, %807) /* ty=Tensor[(7, 10, 11), bool] */;
  %809 = cast(%808, dtype="float32") /* ty=Tensor[(7, 10, 11), float32] */;
  %810 = sin(%809) /* ty=Tensor[(7, 10, 11), float32] */;
  %811 = cast(%810, dtype="float32") /* ty=Tensor[(7, 10, 11), float32] */;
  %812 = %798.1;
  %813 = %803.0;
  %814 = atan(%811) /* ty=Tensor[(7, 10, 11), float32] */;
  (%812, meta[relay.Constant][68] /* ty=Tensor[(72), float32] */, %var_5728, meta[relay.Constant][69] /* ty=Tensor[(6, 1), uint64] */, %813, %var_5739, %var_5740, %814)
}

def @func_5587() -> (Tensor[(10, 12, 11), bool], Tensor[(4, 9, 4), uint8], Tensor[(144, 1), uint8], Tensor[(6), uint64], Tensor[(10, 12, 11), bool]) {
  %815 = cast(meta[relay.Constant][70] /* ty=Tensor[(144, 1), uint8] */, dtype="uint8") /* ty=Tensor[(144, 1), uint8] */;
  %816 = cast(meta[relay.Constant][71] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %817 = reshape(%815, newshape=[4, 9, 4]) /* ty=Tensor[(4, 9, 4), uint8] */;
  %818 = reshape(%816, newshape=[1, 6]) /* ty=Tensor[(1, 6), uint64] */;
  %819 = @func_2530(%817, %818) /* ty=(Tensor[(4, 9, 4), uint8], Tensor[(3, ?, 2), uint64], Tensor[(1, 6), uint64], Tensor[(4, 9, 4), uint8], Tensor[(9, 15, 2), float64], Tensor[(2, 280), float64], Tensor[(630), uint16], Tensor[(270), float64]) */;
  %820 = @func_3319() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %821 = @func_3197() /* ty=Tensor[(10, 12, 11), bool] */;
  %822 = %819.3;
  %823 = %820.0;
  (%821, %822, meta[relay.Constant][70] /* ty=Tensor[(144, 1), uint8] */, meta[relay.Constant][71] /* ty=Tensor[(6), uint64] */, %823)
}

def @func_2430(%var_2405: Tensor[(320), int16], %var_2409: Tensor[(280, 2), float64]) -> (Tensor[(9, 2, 16), float32], Tensor[(5, 15, 14), float32], Tensor[(320), int16], Tensor[(616), uint64], Tensor[(270, 1), float64], Tensor[(280, 2), float64], Tensor[(630), uint16], Tensor[(3, 90), float64], Tensor[(10, 12, 11), bool]) {
  %824 = cast(meta[relay.Constant][72] /* ty=Tensor[(9, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(9, 2, 16), float32] */;
  %825 = cast(%var_2405, dtype="int16") /* ty=Tensor[(320), int16] */;
  %826 = cast(meta[relay.Constant][73] /* ty=Tensor[(616), uint64] */, dtype="uint64") /* ty=Tensor[(616), uint64] */;
  %827 = reshape(%825, newshape=[16, 5, 4]) /* ty=Tensor[(16, 5, 4), int16] */;
  %828 = reshape(%826, newshape=[616]) /* ty=Tensor[(616), uint64] */;
  %829 = @func_1574(%827, %828) /* ty=(Tensor[(16, 5, 4), float32], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(11, 8, 7), uint64], Tensor[(616), uint64]) */;
  %830 = cast(%var_2409, dtype="float64") /* ty=Tensor[(280, 2), float64] */;
  %831 = cast(meta[relay.Constant][74] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %832 = cast(meta[relay.Constant][75] /* ty=Tensor[(3, 90), float64] */, dtype="float64") /* ty=Tensor[(3, 90), float64] */;
  %833 = reshape(%830, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), float64] */;
  %834 = reshape(%831, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
  %835 = reshape(%832, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
  %836 = @func_1010(%833, %834, %835) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) */;
  %837 = @func_2268() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %838 = asin(%824) /* ty=Tensor[(9, 2, 16), float32] */;
  %839 = %829.1;
  %840 = %836.7;
  %841 = %837.0;
  (%838, %839, %var_2405, meta[relay.Constant][73] /* ty=Tensor[(616), uint64] */, %840, %var_2409, meta[relay.Constant][74] /* ty=Tensor[(630), uint16] */, meta[relay.Constant][75] /* ty=Tensor[(3, 90), float64] */, %841)
}

def @func_5318(%var_5262: Tensor[(10, 12, 11), bool], %var_5304: Tensor[(16, 15, 9), float64], %var_5316: Tensor[(270), float64]) -> (Tensor[(10, 12, 11), float64], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(16, 15, 9), bool], uint64, Tensor[(560), float64], Tensor[(630), uint16], Tensor[(270), float64]) {
  %842 = @func_4023() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %843 = %842.1;
  %844 = cast(%var_5262, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
  %845 = shape_of(%843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(%843, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %848 = @func_5129() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(1, 6), uint64]) */;
  %849 = cast(meta[relay.Constant][76] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %850 = reshape(%849, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %851 = @func_5069(%850) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(14, 4, 10), float32], Tensor[(560), float32]) */;
  %852 = @func_3902() /* ty=(Tensor[(16, 15, 9), float64],) */;
  %853 = %852.0;
  %854 = cast(%var_5304, dtype="bool") /* ty=Tensor[(16, 15, 9), bool] */;
  %855 = shape_of(%853, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(%853, dtype="bool") /* ty=Tensor[(16, 15, 9), bool] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %858 = cast(meta[relay.Constant][77] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
  %859 = cast(meta[relay.Constant][78] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %860 = cast(%var_5316, dtype="float64") /* ty=Tensor[(270), float64] */;
  %861 = reshape(%858, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), float64] */;
  %862 = reshape(%859, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
  %863 = reshape(%860, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
  %864 = @func_1010(%861, %862, %863) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) */;
  %865 = power(%846, %847) /* ty=Tensor[(10, 12, 11), float64] */;
  %866 = %848.0;
  %867 = %851.2;
  %868 = equal(%856, %857) /* ty=Tensor[(16, 15, 9), bool] */;
  %869 = %864.2;
  (%865, %866, %867, meta[relay.Constant][76] /* ty=Tensor[(6), uint64] */, %868, %869, meta[relay.Constant][77] /* ty=Tensor[(560), float64] */, meta[relay.Constant][78] /* ty=Tensor[(630), uint16] */, %var_5316)
}

def @func_5946(%var_5909: Tensor[(15, 14, 10), float64]) -> Tensor[(15, 14, 10), float64] {
  %870 = cast(%var_5909, dtype="float64") /* ty=Tensor[(15, 14, 10), float64] */;
  %871 = tan(%870) /* ty=Tensor[(15, 14, 10), float64] */;
  %872 = cast(%var_5909, dtype="float32") /* ty=Tensor[(15, 14, 10), float32] */;
  %873 = shape_of(%871, dtype="int32") /* ty=Tensor[(3), int32] */;
  %874 = cast(%871, dtype="float32") /* ty=Tensor[(15, 14, 10), float32] */;
  %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %876 = floor_mod(%874, %875) /* ty=Tensor[(15, 14, 10), float32] */;
  %877 = cast(%876, dtype="float64") /* ty=Tensor[(15, 14, 10), float64] */;
  %878 = sqrt(%877) /* ty=Tensor[(15, 14, 10), float64] */;
  %879 = cast(%878, dtype="float64") /* ty=Tensor[(15, 14, 10), float64] */;
  log10(%879) /* ty=Tensor[(15, 14, 10), float64] */
}

def @func_6623() -> Tensor[(10, 12, 11), bool] {
  @func_6390() /* ty=Tensor[(10, 12, 11), bool] */
}

def @func_5384() -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
  %880 = @func_2392() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %881 = @func_2331() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %882 = %880.0;
  %883 = %881.0;
  (%882, %883)
}

def @func_3197() -> Tensor[(10, 12, 11), bool] {
  @func_2365() /* ty=Tensor[(10, 12, 11), bool] */
}

def @func_3686() -> (Tensor[(10, 12, 11), bool],) {
  %884 = @func_1984() /* ty=Tensor[(10, 12, 11), bool] */;
  (%884,)
}

def @func_5234(%var_5216: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(6), uint64]) {
  %885 = cast(%var_5216, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %886 = reshape(%885, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %887 = @func_4161(%886) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(9, 15, 2), float64], Tensor[(144), uint8], Tensor[(6), uint64], Tensor[(15, 14, 16), float64]) */;
  %888 = @func_3059() /* ty=Tensor[(10, 12, 11), bool] */;
  %889 = %887.3;
  (%888, %889, %var_5216)
}

def @func_4023() -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
  %890 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %891 = @func_3319() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %892 = @func_3304() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %893 = %890.0;
  %894 = %891.0;
  %895 = %892.0;
  (%893, %894, %895)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6833(%var_6831: Tensor[(3, 2), float64]) -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], uint16, Tensor[(3, 2), float64], uint16, Tensor[(15, 4), uint16]) {
  @func_6830(%var_6831) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], uint16, Tensor[(3, 2), float64], uint16, Tensor[(15, 4), uint16]) */
}

def @func_3600() -> Tensor[(6), uint64] {
  @func_3598() /* ty=Tensor[(6), uint64] */
}

def @func_4720() -> (Tensor[(10, 12, 11), float32], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60, 1), uint16], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(3, 2), uint64], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(5, 16, 8), float32], Tensor[(640, 1), int32], Tensor[(10, 12, 11), float32]) {
  %27 = fn () -> (Tensor[(10, 12, 11), float32], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60, 1), uint16], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(3, 2), uint64], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(5, 16, 8), float32], Tensor[(640, 1), int32], Tensor[(10, 12, 11), float32]) {
    %0 = @func_2941() /* ty=(Tensor[(10, 12, 11), float32],) */;
    %1 = cast(meta[relay.Constant][0] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %2 = cast(meta[relay.Constant][1] /* ty=Tensor[(60, 1), uint16] */, dtype="uint16") /* ty=Tensor[(60, 1), uint16] */;
    %3 = reshape(%1, newshape=[]) /* ty=uint16 */;
    %4 = reshape(%2, newshape=[5, 1, 12]) /* ty=Tensor[(5, 1, 12), uint16] */;
    %5 = @func_380(%3, %4) /* ty=(Tensor[(5, 1, 12), uint16],) */;
    %6 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 2), uint64] */, dtype="uint64") /* ty=Tensor[(3, 2), uint64] */;
    %7 = reshape(%6, newshape=[6]) /* ty=Tensor[(6), uint64] */;
    %8 = @func_4161(%7) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(9, 15, 2), float64], Tensor[(144), uint8], Tensor[(6), uint64], Tensor[(15, 14, 16), float64]) */;
    %9 = @func_4023() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
    %10 = @func_2392() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
    %11 = cast(meta[relay.Constant][3] /* ty=Tensor[(640, 1), int32] */, dtype="int32") /* ty=Tensor[(640, 1), int32] */;
    %12 = reshape(%11, newshape=[5, 16, 8]) /* ty=Tensor[(5, 16, 8), int32] */;
    %13 = @func_1157(%12) /* ty=(Tensor[(5, 16, 8), int32], Tensor[(5, 16, 8), float32]) */;
    %14 = @func_3304() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
    %15 = %14.0;
    %16 = cast(%15, dtype="float32") /* ty=Tensor[(10, 12, 11), float32] */;
    %17 = exp(%16) /* ty=Tensor[(10, 12, 11), float32] */;
    %18 = cast(%17, dtype="float32") /* ty=Tensor[(10, 12, 11), float32] */;
    %19 = %0.0;
    %20 = %5.0;
    %21 = @func_3059() /* ty=Tensor[(10, 12, 11), bool] */;
    %22 = %8.3;
    %23 = %9.2;
    %24 = %10.0;
    %25 = %13.1;
    %26 = log(%18) /* ty=Tensor[(10, 12, 11), float32] */;
    (%19, %20, meta[relay.Constant][0] /* ty=uint16 */, meta[relay.Constant][1] /* ty=Tensor[(60, 1), uint16] */, %21, %22, meta[relay.Constant][2] /* ty=Tensor[(3, 2), uint64] */, %23, %24, %25, meta[relay.Constant][3] /* ty=Tensor[(640, 1), int32] */, %26)
  };
  %27() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60, 1), uint16], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(3, 2), uint64], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(5, 16, 8), float32], Tensor[(640, 1), int32], Tensor[(10, 12, 11), float32]) */
}

def @func_7213() -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
  @func_7211() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */
}

def @func_4163(%var_4162: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), bool], Tensor[(9, 15, 2), float64], Tensor[(144), uint8], Tensor[(6), uint64], Tensor[(15, 14, 16), float64]) {
  %37 = fn (%var_4151: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), bool], Tensor[(9, 15, 2), float64], Tensor[(144), uint8], Tensor[(6), uint64], Tensor[(15, 14, 16), float64]) {
    %28 = @func_2392() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
    %29 = cast(meta[relay.Constant][4] /* ty=Tensor[(144), uint8] */, dtype="uint8") /* ty=Tensor[(144), uint8] */;
    %30 = cast(%var_4151, dtype="uint64") /* ty=Tensor[(6), uint64] */;
    %31 = reshape(%29, newshape=[4, 9, 4]) /* ty=Tensor[(4, 9, 4), uint8] */;
    %32 = reshape(%30, newshape=[1, 6]) /* ty=Tensor[(1, 6), uint64] */;
    %33 = @func_2530(%31, %32) /* ty=(Tensor[(4, 9, 4), uint8], Tensor[(3, ?, 2), uint64], Tensor[(1, 6), uint64], Tensor[(4, 9, 4), uint8], Tensor[(9, 15, 2), float64], Tensor[(2, 280), float64], Tensor[(630), uint16], Tensor[(270), float64]) */;
    %34 = %28.0;
    %35 = %33.4;
    %36 = @func_3739() /* ty=Tensor[(15, 14, 16), float64] */;
    (%34, %35, meta[relay.Constant][4] /* ty=Tensor[(144), uint8] */, %var_4151, %36)
  };
  %37(%var_4162) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(9, 15, 2), float64], Tensor[(144), uint8], Tensor[(6), uint64], Tensor[(15, 14, 16), float64]) */
}

def @func_5587() -> (Tensor[(10, 12, 11), bool], Tensor[(4, 9, 4), uint8], Tensor[(144, 1), uint8], Tensor[(6), uint64], Tensor[(10, 12, 11), bool]) {
  %38 = cast(meta[relay.Constant][5] /* ty=Tensor[(144, 1), uint8] */, dtype="uint8") /* ty=Tensor[(144, 1), uint8] */;
  %39 = cast(meta[relay.Constant][6] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %40 = reshape(%38, newshape=[4, 9, 4]) /* ty=Tensor[(4, 9, 4), uint8] */;
  %41 = reshape(%39, newshape=[1, 6]) /* ty=Tensor[(1, 6), uint64] */;
  %42 = @func_2530(%40, %41) /* ty=(Tensor[(4, 9, 4), uint8], Tensor[(3, ?, 2), uint64], Tensor[(1, 6), uint64], Tensor[(4, 9, 4), uint8], Tensor[(9, 15, 2), float64], Tensor[(2, 280), float64], Tensor[(630), uint16], Tensor[(270), float64]) */;
  %43 = @func_3319() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %44 = @func_3197() /* ty=Tensor[(10, 12, 11), bool] */;
  %45 = %42.3;
  %46 = %43.0;
  (%44, %45, meta[relay.Constant][5] /* ty=Tensor[(144, 1), uint8] */, meta[relay.Constant][6] /* ty=Tensor[(6), uint64] */, %46)
}

def @func_5195() -> (Tensor[(10, 12, 11), bool], Tensor[(6), uint64]) {
  %50 = fn () -> (Tensor[(10, 12, 11), bool], Tensor[(6), uint64]) {
    %47 = @func_2392() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
    %48 = %47.0;
    %49 = @func_3598() /* ty=Tensor[(6), uint64] */;
    (%48, %49)
  };
  %50() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(6), uint64]) */
}

def @func_4465(%var_4464: Tensor[(15, 11, 3), float64]) -> (Tensor[(15, 11, 3), float64], Tensor[(15, 11, 3), float64]) {
  %55 = fn (%var_4440: Tensor[(15, 11, 3), float64]) -> (Tensor[(15, 11, 3), float64], Tensor[(15, 11, 3), float64]) {
    %51 = cast(%var_4440, dtype="float64") /* ty=Tensor[(15, 11, 3), float64] */;
    %52 = cast(%var_4440, dtype="float64") /* ty=Tensor[(15, 11, 3), float64] */;
    %53 = rsqrt(%51) /* ty=Tensor[(15, 11, 3), float64] */;
    %54 = cos(%52) /* ty=Tensor[(15, 11, 3), float64] */;
    (%53, %54)
  };
  %55(%var_4464) /* ty=(Tensor[(15, 11, 3), float64], Tensor[(15, 11, 3), float64]) */
}

def @func_3902() -> (Tensor[(16, 15, 9), float64],) {
  %56 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 15, 9), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 9), float64] */;
  %57 = cos(%56) /* ty=Tensor[(16, 15, 9), float64] */;
  (%57,)
}

def @func_2268() -> (Tensor[(10, 12, 11), bool],) {
  %58 = @func_1984() /* ty=Tensor[(10, 12, 11), bool] */;
  (%58,)
}

def @func_7003(%var_7001: uint16) -> (Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(10, 12, 11), bool], Tensor[(630), uint16], uint16, Tensor[(640, 1), int32]) {
  @func_7000(%var_7001) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(10, 12, 11), bool], Tensor[(630), uint16], uint16, Tensor[(640, 1), int32]) */
}

def @func_3741() -> Tensor[(15, 14, 16), float64] {
  @func_3739() /* ty=Tensor[(15, 14, 16), float64] */
}

def @func_6343() -> Tensor[(10, 12, 11), bool] {
  @func_2365() /* ty=Tensor[(10, 12, 11), bool] */
}

def @func_2471(%var_2469: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) {
  @func_2468(%var_2469) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */
}

def @func_3179() -> (Tensor[(10, 12, 11), float32], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) {
  %59 = @func_2331() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %60 = %59.0;
  %61 = cast(%60, dtype="float32") /* ty=Tensor[(10, 12, 11), float32] */;
  %62 = @func_2268() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %63 = cast(meta[relay.Constant][8] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %64 = cast(meta[relay.Constant][8] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %65 = reshape(%63, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
  %66 = reshape(%64, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
  %67 = rsqrt(%61) /* ty=Tensor[(10, 12, 11), float32] */;
  %68 = %62.0;
  %69 = @func_1996(%65, %66) /* ty=Tensor[(3, ?, 2), uint64] */;
  (%67, %68, %69, meta[relay.Constant][8] /* ty=Tensor[(6), uint64] */)
}

def @main(%var_7256: Tensor[(15, 3, 2), int64], %var_7257: Tensor[(15, 3, 2), int64]) -> (Tensor[(15, 3, 2), int64],) {
  %70 = cast(%var_7257, dtype="int64") /* ty=Tensor[(15, 3, 2), int64] */;
  %71 = shape_of(%var_7256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%var_7256, dtype="int64") /* ty=Tensor[(15, 3, 2), int64] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %74 = multiply(%72, %73) /* ty=Tensor[(15, 3, 2), int64] */;
  (%74,)
}

def @func_3999() -> (Tensor[(10, 12, 11), bool],) {
  @func_3997() /* ty=(Tensor[(10, 12, 11), bool],) */
}

def @func_3590(%var_3588: int32, %var_3589: Tensor[(4, 15, 3), int32]) -> Tensor[(4, 15, 3), int32] {
  @func_3586(%var_3588, %var_3589) /* ty=Tensor[(4, 15, 3), int32] */
}

def @func_3059() -> Tensor[(10, 12, 11), bool] {
  @func_3038() /* ty=Tensor[(10, 12, 11), bool] */
}

def @func_3181() -> (Tensor[(10, 12, 11), float32], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) {
  @func_3179() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */
}

def @func_3038() -> Tensor[(10, 12, 11), bool] {
  %75 = @func_2331() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %75.0
}

def @func_3199() -> Tensor[(10, 12, 11), bool] {
  @func_3197() /* ty=Tensor[(10, 12, 11), bool] */
}

def @func_3904() -> (Tensor[(16, 15, 9), float64],) {
  @func_3902() /* ty=(Tensor[(16, 15, 9), float64],) */
}

def @func_4589() -> (Tensor[(10, 12, 11), float32],) {
  %76 = @func_4095() /* ty=Tensor[(10, 12, 11), float32] */;
  (%76,)
}

def @func_1321(%var_1320: Tensor[(270), float64]) -> (Tensor[(4, 2, 14), float32], Tensor[(9, 15, 2), float64], Tensor[(270), float64], Tensor[(9, 15, 2), float64]) {
  %85 = fn (%var_1310: Tensor[(270), float64]) -> (Tensor[(4, 2, 14), float32], Tensor[(9, 15, 2), float64], Tensor[(270), float64], Tensor[(9, 15, 2), float64]) {
    %77 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 2, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 2, 14), float32] */;
    %78 = cast(%var_1310, dtype="float64") /* ty=Tensor[(270), float64] */;
    %79 = reshape(%78, newshape=[9, 15, 2]) /* ty=Tensor[(9, 15, 2), float64] */;
    %80 = cast(%var_1310, dtype="float64") /* ty=Tensor[(270), float64] */;
    %81 = reshape(%80, newshape=[9, 15, 2]) /* ty=Tensor[(9, 15, 2), float64] */;
    %82 = atan(%77) /* ty=Tensor[(4, 2, 14), float32] */;
    %83 = @func_365(%79) /* ty=Tensor[(9, 15, 2), float64] */;
    %84 = @func_365(%81) /* ty=Tensor[(9, 15, 2), float64] */;
    (%82, %83, %var_1310, %84)
  };
  %85(%var_1320) /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 15, 2), float64], Tensor[(270), float64], Tensor[(9, 15, 2), float64]) */
}

def @func_6345() -> Tensor[(10, 12, 11), bool] {
  @func_6343() /* ty=Tensor[(10, 12, 11), bool] */
}

def @func_6830(%var_6803: Tensor[(3, 2), float64]) -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], uint16, Tensor[(3, 2), float64], uint16, Tensor[(15, 4), uint16]) {
  %86 = @func_3179() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
  %87 = cast(%var_6803, dtype="float64") /* ty=Tensor[(3, 2), float64] */;
  %88 = cast(meta[relay.Constant][10] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %89 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 4), uint16] */, dtype="uint16") /* ty=Tensor[(15, 4), uint16] */;
  %90 = reshape(%87, newshape=[1, 3, 2]) /* ty=Tensor[(1, 3, 2), float64] */;
  %91 = reshape(%88, newshape=[]) /* ty=uint16 */;
  %92 = reshape(%89, newshape=[30, 2]) /* ty=Tensor[(30, 2), uint16] */;
  %93 = @func_2638(%90, %91, %92) /* ty=(Tensor[(?, 3, 2), uint8], Tensor[(5, 1, 12), uint16], uint16, Tensor[(30, 2), uint16]) */;
  %94 = %86.1;
  %95 = @func_3038() /* ty=Tensor[(10, 12, 11), bool] */;
  %96 = %93.2;
  (%94, %95, %96, %var_6803, meta[relay.Constant][10] /* ty=uint16 */, meta[relay.Constant][11] /* ty=Tensor[(15, 4), uint16] */)
}

def @func_4024() -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
  %103 = fn () -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
    %97 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
    %98 = @func_3319() /* ty=(Tensor[(10, 12, 11), bool],) */;
    %99 = @func_3304() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
    %100 = %97.0;
    %101 = %98.0;
    %102 = %99.0;
    (%100, %101, %102)
  };
  %103() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */
}

def @func_859(%var_846: Tensor[(13, 11, 4), int16], %var_855: Tensor[(10, 63), uint16]) -> (Tensor[(13, 11, 4), int16], Tensor[(14, 5, 9), float64], uint16, Tensor[(10, 63), uint16]) {
  %104 = cast(%var_846, dtype="int16") /* ty=Tensor[(13, 11, 4), int16] */;
  %105 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(13, 11, 4), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 11, 4), int16] */, dtype="int16") /* ty=Tensor[(13, 11, 4), int16] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %108 = cast(meta[relay.Constant][13] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %109 = cast(%var_855, dtype="uint16") /* ty=Tensor[(10, 63), uint16] */;
  %110 = cast(%var_855, dtype="uint16") /* ty=Tensor[(10, 63), uint16] */;
  %111 = reshape(%108, newshape=[]) /* ty=uint16 */;
  %112 = reshape(%109, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint16] */;
  %113 = reshape(%110, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint16] */;
  %114 = @func_817(%111, %112, %113) /* ty=(Tensor[(14, 5, 9), bool], Tensor[(14, 5, 9), float64], Tensor[(14, 5, 9), float64]) */;
  %115 = bitwise_and(%106, %107) /* ty=Tensor[(13, 11, 4), int16] */;
  %116 = %114.1;
  (%115, %116, meta[relay.Constant][13] /* ty=uint16 */, %var_855)
}

def @func_3665(%var_3663: Tensor[(10, 12, 11), bool]) -> (Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(10, 12, 11), int64]) {
  @func_3662(%var_3663) /* ty=(Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(10, 12, 11), int64]) */
}

def @func_2433(%var_2431: Tensor[(320), int16], %var_2432: Tensor[(280, 2), float64]) -> (Tensor[(9, 2, 16), float32], Tensor[(5, 15, 14), float32], Tensor[(320), int16], Tensor[(616), uint64], Tensor[(270, 1), float64], Tensor[(280, 2), float64], Tensor[(630), uint16], Tensor[(3, 90), float64], Tensor[(10, 12, 11), bool]) {
  %135 = fn (%var_2405: Tensor[(320), int16], %var_2409: Tensor[(280, 2), float64]) -> (Tensor[(9, 2, 16), float32], Tensor[(5, 15, 14), float32], Tensor[(320), int16], Tensor[(616), uint64], Tensor[(270, 1), float64], Tensor[(280, 2), float64], Tensor[(630), uint16], Tensor[(3, 90), float64], Tensor[(10, 12, 11), bool]) {
    %117 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(9, 2, 16), float32] */;
    %118 = cast(%var_2405, dtype="int16") /* ty=Tensor[(320), int16] */;
    %119 = cast(meta[relay.Constant][15] /* ty=Tensor[(616), uint64] */, dtype="uint64") /* ty=Tensor[(616), uint64] */;
    %120 = reshape(%118, newshape=[16, 5, 4]) /* ty=Tensor[(16, 5, 4), int16] */;
    %121 = reshape(%119, newshape=[616]) /* ty=Tensor[(616), uint64] */;
    %122 = @func_1574(%120, %121) /* ty=(Tensor[(16, 5, 4), float32], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(11, 8, 7), uint64], Tensor[(616), uint64]) */;
    %123 = cast(%var_2409, dtype="float64") /* ty=Tensor[(280, 2), float64] */;
    %124 = cast(meta[relay.Constant][16] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
    %125 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 90), float64] */, dtype="float64") /* ty=Tensor[(3, 90), float64] */;
    %126 = reshape(%123, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), float64] */;
    %127 = reshape(%124, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
    %128 = reshape(%125, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
    %129 = @func_1010(%126, %127, %128) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) */;
    %130 = @func_2268() /* ty=(Tensor[(10, 12, 11), bool],) */;
    %131 = asin(%117) /* ty=Tensor[(9, 2, 16), float32] */;
    %132 = %122.1;
    %133 = %129.7;
    %134 = %130.0;
    (%131, %132, %var_2405, meta[relay.Constant][15] /* ty=Tensor[(616), uint64] */, %133, %var_2409, meta[relay.Constant][16] /* ty=Tensor[(630), uint16] */, meta[relay.Constant][17] /* ty=Tensor[(3, 90), float64] */, %134)
  };
  %135(%var_2431, %var_2432) /* ty=(Tensor[(9, 2, 16), float32], Tensor[(5, 15, 14), float32], Tensor[(320), int16], Tensor[(616), uint64], Tensor[(270, 1), float64], Tensor[(280, 2), float64], Tensor[(630), uint16], Tensor[(3, 90), float64], Tensor[(10, 12, 11), bool]) */
}

def @func_2393() -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
  %139 = fn () -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
    %136 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
    %137 = @func_1984() /* ty=Tensor[(10, 12, 11), bool] */;
    %138 = %136.0;
    (%137, %138)
  };
  %139() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */
}

def @func_6624() -> Tensor[(10, 12, 11), bool] {
  %140 = fn () -> Tensor[(10, 12, 11), bool] {
    @func_6390() /* ty=Tensor[(10, 12, 11), bool] */
  };
  %140() /* ty=Tensor[(10, 12, 11), bool] */
}

def @func_3687() -> (Tensor[(10, 12, 11), bool],) {
  %142 = fn () -> (Tensor[(10, 12, 11), bool],) {
    %141 = @func_1984() /* ty=Tensor[(10, 12, 11), bool] */;
    (%141,)
  };
  %142() /* ty=(Tensor[(10, 12, 11), bool],) */
}

def @func_1578(%var_1576: Tensor[(16, 5, 4), int16], %var_1577: Tensor[(616), uint64]) -> (Tensor[(16, 5, 4), float32], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(11, 8, 7), uint64], Tensor[(616), uint64]) {
  @func_1574(%var_1576, %var_1577) /* ty=(Tensor[(16, 5, 4), float32], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(11, 8, 7), uint64], Tensor[(616), uint64]) */
}

def @func_4124() -> (Tensor[(6), uint64], Tensor[(6), uint64]) {
  %146 = fn () -> (Tensor[(6), uint64], Tensor[(6), uint64]) {
    %143 = @func_3179() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
    %144 = %143.3;
    %145 = @func_3598() /* ty=Tensor[(6), uint64] */;
    (%144, %145)
  };
  %146() /* ty=(Tensor[(6), uint64], Tensor[(6), uint64]) */
}

def @func_715(%var_713: uint64, %var_714: Tensor[(11, 8, 7), uint64]) -> Tensor[(11, 8, 7), uint64] {
  @func_711(%var_713, %var_714) /* ty=Tensor[(11, 8, 7), uint64] */
}

def @func_1010(%var_976: Tensor[(14, 5, 8), float64], %var_1001: Tensor[(1, 630), uint16], %var_1008: Tensor[(270, 1), float64]) -> (Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) {
  %147 = cast(%var_976, dtype="float64") /* ty=Tensor[(14, 5, 8), float64] */;
  %148 = cast(meta[relay.Constant][18] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %149 = cast(meta[relay.Constant][19] /* ty=Tensor[(616), uint64] */, dtype="uint64") /* ty=Tensor[(616), uint64] */;
  %150 = reshape(%148, newshape=[]) /* ty=uint64 */;
  %151 = reshape(%149, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), uint64] */;
  %152 = cast(meta[relay.Constant][18] /* ty=uint64 */, dtype="uint16") /* ty=uint16 */;
  %153 = cast(%var_1001, dtype="uint16") /* ty=Tensor[(1, 630), uint16] */;
  %154 = cast(%var_1001, dtype="uint16") /* ty=Tensor[(1, 630), uint16] */;
  %155 = reshape(%152, newshape=[]) /* ty=uint16 */;
  %156 = reshape(%153, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint16] */;
  %157 = reshape(%154, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint16] */;
  %158 = @func_817(%155, %156, %157) /* ty=(Tensor[(14, 5, 9), bool], Tensor[(14, 5, 9), float64], Tensor[(14, 5, 9), float64]) */;
  %159 = cast(%var_1008, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
  %160 = reshape(%159, newshape=[9, 15, 2]) /* ty=Tensor[(9, 15, 2), float64] */;
  %161 = sinh(%147) /* ty=Tensor[(14, 5, 8), float64] */;
  %162 = @func_711(%150, %151) /* ty=Tensor[(11, 8, 7), uint64] */;
  %163 = %158.1;
  %164 = @func_365(%160) /* ty=Tensor[(9, 15, 2), float64] */;
  (%161, %162, meta[relay.Constant][18] /* ty=uint64 */, meta[relay.Constant][19] /* ty=Tensor[(616), uint64] */, %163, %var_1001, %164, %var_1008)
}

def @func_6096() -> (Tensor[(10, 12, 11), float32], Tensor[(13, 10, 12), bool], Tensor[(1560), int16]) {
  %173 = fn () -> (Tensor[(10, 12, 11), float32], Tensor[(13, 10, 12), bool], Tensor[(1560), int16]) {
    %165 = @func_3179() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
    %166 = cast(meta[relay.Constant][20] /* ty=Tensor[(1560), int16] */, dtype="int16") /* ty=Tensor[(1560), int16] */;
    %167 = cast(meta[relay.Constant][20] /* ty=Tensor[(1560), int16] */, dtype="int16") /* ty=Tensor[(1560), int16] */;
    %168 = reshape(%166, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), int16] */;
    %169 = reshape(%167, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), int16] */;
    %170 = @func_4823(%168, %169) /* ty=(Tensor[(13, 10, 12), bool],) */;
    %171 = %165.0;
    %172 = %170.0;
    (%171, %172, meta[relay.Constant][20] /* ty=Tensor[(1560), int16] */)
  };
  %173() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(13, 10, 12), bool], Tensor[(1560), int16]) */
}

def @func_4582(%var_4567: Tensor[(560), float64]) -> (Tensor[(5, 16, 8), float32], Tensor[(640), int32], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), float64], Tensor[(1, 630), uint16], Tensor[(560), float64], Tensor[(630), uint16], Tensor[(270), float64]) {
  %174 = cast(meta[relay.Constant][21] /* ty=Tensor[(640), int32] */, dtype="int32") /* ty=Tensor[(640), int32] */;
  %175 = reshape(%174, newshape=[5, 16, 8]) /* ty=Tensor[(5, 16, 8), int32] */;
  %176 = @func_1157(%175) /* ty=(Tensor[(5, 16, 8), int32], Tensor[(5, 16, 8), float32]) */;
  %177 = @func_3059() /* ty=Tensor[(10, 12, 11), bool] */;
  %178 = cast(%177, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
  %179 = cast(%var_4567, dtype="float64") /* ty=Tensor[(560), float64] */;
  %180 = cast(meta[relay.Constant][22] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %181 = cast(meta[relay.Constant][23] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %182 = reshape(%179, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), float64] */;
  %183 = reshape(%180, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
  %184 = reshape(%181, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
  %185 = @func_1010(%182, %183, %184) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) */;
  %186 = %176.1;
  %187 = @func_3197() /* ty=Tensor[(10, 12, 11), bool] */;
  %188 = asin(%178) /* ty=Tensor[(10, 12, 11), float64] */;
  %189 = %185.5;
  (%186, meta[relay.Constant][21] /* ty=Tensor[(640), int32] */, %187, %188, %189, %var_4567, meta[relay.Constant][22] /* ty=Tensor[(630), uint16] */, meta[relay.Constant][23] /* ty=Tensor[(270), float64] */)
}

def @func_7159(%var_7158: Tensor[(3, 15, 2), uint32]) -> (Tensor[(3, 15, 2), bool], Tensor[(3, 15, 2), float32]) {
  %206 = fn (%var_7104: Tensor[(3, 15, 2), uint32]) -> (Tensor[(3, 15, 2), bool], Tensor[(3, 15, 2), float32]) {
    %190 = @func_6032() /* ty=Tensor[(3, ?, 2), uint64] */;
    %191 = cast(%190, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
    %192 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 15, 2), uint64] */, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
    %193 = less(%191, %192) /* ty=Tensor[(3, 15, 2), bool] */;
    %194 = cast(%193, dtype="uint32") /* ty=Tensor[(3, 15, 2), uint32] */;
    %195 = cast(%190, dtype="uint32") /* ty=Tensor[(3, ?, 2), uint32] */;
    %196 = maximum(%194, %195) /* ty=Tensor[(3, 15, 2), uint32] */;
    %197 = cast(%var_7104, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
    %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
    %199 = cast(%196, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
    %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %201 = cast(%196, dtype="float64") /* ty=Tensor[(3, 15, 2), float64] */;
    %202 = log10(%201) /* ty=Tensor[(3, 15, 2), float64] */;
    %203 = cast(%202, dtype="float32") /* ty=Tensor[(3, 15, 2), float32] */;
    %204 = not_equal(%199, %200) /* ty=Tensor[(3, 15, 2), bool] */;
    %205 = asin(%203) /* ty=Tensor[(3, 15, 2), float32] */;
    (%204, %205)
  };
  %206(%var_7158) /* ty=(Tensor[(3, 15, 2), bool], Tensor[(3, 15, 2), float32]) */
}

def @func_3197() -> Tensor[(10, 12, 11), bool] {
  @func_2365() /* ty=Tensor[(10, 12, 11), bool] */
}

def @func_3305() -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
  %209 = fn () -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
    %207 = @func_1984() /* ty=Tensor[(10, 12, 11), bool] */;
    %208 = @func_3038() /* ty=Tensor[(10, 12, 11), bool] */;
    (%207, %208)
  };
  %209() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */
}

def @func_6487(%var_6485: Tensor[(7, 10, 12), int16], %var_6486: Tensor[(7, 10, 12), int16]) -> (Tensor[(7, 10, 12), int16], Tensor[(10, 12, 11), bool], Tensor[(4, 15, 3), int32], Tensor[(180), int32], Tensor[(7, 10, 12), float32]) {
  @func_6483(%var_6485, %var_6486) /* ty=(Tensor[(7, 10, 12), int16], Tensor[(10, 12, 11), bool], Tensor[(4, 15, 3), int32], Tensor[(180), int32], Tensor[(7, 10, 12), float32]) */
}

def @func_6268(%var_6266: Tensor[(210, 3), uint16], %var_6267: Tensor[(4, 140), float64]) -> (Tensor[(10, 12, 11), bool], uint16, Tensor[(14, 5, 8), float64], Tensor[(4, 140), float64], Tensor[(270), float64], Tensor[(210, 3), bool], Tensor[(10, 12, 11), bool]) {
  %235 = fn (%var_6225: Tensor[(210, 3), uint16], %var_6234: Tensor[(4, 140), float64]) -> (Tensor[(10, 12, 11), bool], uint16, Tensor[(14, 5, 8), float64], Tensor[(4, 140), float64], Tensor[(270), float64], Tensor[(210, 3), bool], Tensor[(10, 12, 11), bool]) {
    %210 = cast(%var_6234, dtype="float64") /* ty=Tensor[(4, 140), float64] */;
    %211 = cast(%var_6225, dtype="float64") /* ty=Tensor[(210, 3), float64] */;
    %212 = cos(%211) /* ty=Tensor[(210, 3), float64] */;
    %213 = cast(%212, dtype="uint16") /* ty=Tensor[(210, 3), uint16] */;
    %214 = cast(meta[relay.Constant][26] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
    %215 = reshape(%210, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), float64] */;
    %216 = reshape(%213, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
    %217 = reshape(%214, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
    %218 = @func_1010(%215, %216, %217) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) */;
    %219 = cast(meta[relay.Constant][25] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %220 = cast(%var_6225, dtype="uint16") /* ty=Tensor[(210, 3), uint16] */;
    %221 = cast(%var_6225, dtype="uint16") /* ty=Tensor[(210, 3), uint16] */;
    %222 = reshape(%219, newshape=[]) /* ty=uint16 */;
    %223 = reshape(%220, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint16] */;
    %224 = reshape(%221, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint16] */;
    %225 = @func_817(%222, %223, %224) /* ty=(Tensor[(14, 5, 9), bool], Tensor[(14, 5, 9), float64], Tensor[(14, 5, 9), float64]) */;
    %226 = %225.2;
    %227 = cast(%226, dtype="bool") /* ty=Tensor[(14, 5, 9), bool] */;
    %228 = shape_of(%212, dtype="int32") /* ty=Tensor[(2), int32] */;
    %229 = cast(%212, dtype="bool") /* ty=Tensor[(210, 3), bool] */;
    %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %231 = @func_3197() /* ty=Tensor[(10, 12, 11), bool] */;
    %232 = %218.0;
    %233 = not_equal(%229, %230) /* ty=Tensor[(210, 3), bool] */;
    %234 = @func_3059() /* ty=Tensor[(10, 12, 11), bool] */;
    (%231, meta[relay.Constant][25] /* ty=uint16 */, %232, %var_6234, meta[relay.Constant][26] /* ty=Tensor[(270), float64] */, %233, %234)
  };
  %235(%var_6266, %var_6267) /* ty=(Tensor[(10, 12, 11), bool], uint16, Tensor[(14, 5, 8), float64], Tensor[(4, 140), float64], Tensor[(270), float64], Tensor[(210, 3), bool], Tensor[(10, 12, 11), bool]) */
}

def @func_2638(%var_2605: Tensor[(1, 3, 2), float64], %var_2634: uint16, %var_2635: Tensor[(30, 2), uint16]) -> (Tensor[(?, 3, 2), uint8], Tensor[(5, 1, 12), uint16], uint16, Tensor[(30, 2), uint16]) {
  %236 = cast(%var_2605, dtype="float64") /* ty=Tensor[(1, 3, 2), float64] */;
  %237 = acos(%236) /* ty=Tensor[(1, 3, 2), float64] */;
  %238 = cast(%var_2605, dtype="uint8") /* ty=Tensor[(1, 3, 2), uint8] */;
  %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%237, dtype="uint8") /* ty=Tensor[(1, 3, 2), uint8] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %242 = cast(%var_2634, dtype="uint16") /* ty=uint16 */;
  %243 = cast(%var_2635, dtype="uint16") /* ty=Tensor[(30, 2), uint16] */;
  %244 = reshape(%242, newshape=[]) /* ty=uint16 */;
  %245 = reshape(%243, newshape=[5, 1, 12]) /* ty=Tensor[(5, 1, 12), uint16] */;
  %246 = @func_380(%244, %245) /* ty=(Tensor[(5, 1, 12), uint16],) */;
  %247 = right_shift(%240, %241) /* ty=Tensor[(?, 3, 2), uint8] */;
  %248 = %246.0;
  (%247, %248, %var_2634, %var_2635)
}

def @func_5452(%var_5450: Tensor[(4, 15), float32]) -> (Tensor[(4, 15), float32], Tensor[(10, 12, 11), bool]) {
  @func_5449(%var_5450) /* ty=(Tensor[(4, 15), float32], Tensor[(10, 12, 11), bool]) */
}

def @func_5540(%var_5534: Tensor[(1, 11, 4), bool], %var_5535: Tensor[(13, 11, 4), bool], %var_5536: Tensor[(13, 11, 4), bool], %var_5537: Tensor[(3, 2), float64], %var_5538: uint16, %var_5539: Tensor[(15, 4), uint16]) -> (Tensor[(13, 11, 4), bool], Tensor[(10, 12, 11), bool], Tensor[(5, 1, 12), uint16], Tensor[(3, 2), float64], Tensor[(15, 4), uint16], Tensor[(13, 11, 4), uint32]) {
  @func_5532(%var_5534, %var_5535, %var_5536, %var_5537, %var_5538, %var_5539) /* ty=(Tensor[(13, 11, 4), bool], Tensor[(10, 12, 11), bool], Tensor[(5, 1, 12), uint16], Tensor[(3, 2), float64], Tensor[(15, 4), uint16], Tensor[(13, 11, 4), uint32]) */
}

def @func_3845(%var_3837: int8, %var_3838: Tensor[(9, 13, 12), int8]) -> Tensor[(9, 13, 12), int8] {
  %249 = cast(%var_3837, dtype="int8") /* ty=int8 */;
  %250 = cast(%var_3838, dtype="int8") /* ty=Tensor[(9, 13, 12), int8] */;
  multiply(%249, %250) /* ty=Tensor[(9, 13, 12), int8] */
}

def @func_5839() -> (Tensor[(15, 14, 16), float64],) {
  @func_5837() /* ty=(Tensor[(15, 14, 16), float64],) */
}

def @func_5589() -> (Tensor[(10, 12, 11), bool], Tensor[(4, 9, 4), uint8], Tensor[(144, 1), uint8], Tensor[(6), uint64], Tensor[(10, 12, 11), bool]) {
  @func_5587() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(4, 9, 4), uint8], Tensor[(144, 1), uint8], Tensor[(6), uint64], Tensor[(10, 12, 11), bool]) */
}

def @func_4882(%var_4880: Tensor[(1560), int16], %var_4881: Tensor[(1560), float64]) -> (Tensor[(10, 12, 11), bool], Tensor[(13, 10, 12), bool], Tensor[(1560), uint64]) {
  @func_4878(%var_4880, %var_4881) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(13, 10, 12), bool], Tensor[(1560), uint64]) */
}

def @func_4081(%var_4080: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) {
  %257 = fn (%var_4072: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) {
    %251 = @func_3319() /* ty=(Tensor[(10, 12, 11), bool],) */;
    %252 = cast(%var_4072, dtype="uint64") /* ty=Tensor[(6), uint64] */;
    %253 = reshape(%252, newshape=[6]) /* ty=Tensor[(6), uint64] */;
    %254 = @func_2468(%253) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
    %255 = %251.0;
    %256 = %254.2;
    (%255, %256, %var_4072)
  };
  %257(%var_4080) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */
}

def @func_3997() -> (Tensor[(10, 12, 11), bool],) {
  %258 = @func_3059() /* ty=Tensor[(10, 12, 11), bool] */;
  (%258,)
}

def @func_5449(%var_5440: Tensor[(4, 15), float32]) -> (Tensor[(4, 15), float32], Tensor[(10, 12, 11), bool]) {
  %259 = cast(%var_5440, dtype="float32") /* ty=Tensor[(4, 15), float32] */;
  %260 = acosh(%259) /* ty=Tensor[(4, 15), float32] */;
  %261 = @func_3059() /* ty=Tensor[(10, 12, 11), bool] */;
  (%260, %261)
}

def @func_4269() -> Tensor[(10, 12, 11), bool] {
  %262 = @func_3686() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %262.0
}

def @func_3598() -> Tensor[(6), uint64] {
  %263 = @func_3179() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
  %263.3
}

def @func_4585(%var_4583: Tensor[(560), float64]) -> (Tensor[(5, 16, 8), float32], Tensor[(640), int32], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), float64], Tensor[(1, 630), uint16], Tensor[(560), float64], Tensor[(630), uint16], Tensor[(270), float64]) {
  @func_4582(%var_4583) /* ty=(Tensor[(5, 16, 8), float32], Tensor[(640), int32], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), float64], Tensor[(1, 630), uint16], Tensor[(560), float64], Tensor[(630), uint16], Tensor[(270), float64]) */
}

def @func_4095() -> Tensor[(10, 12, 11), float32] {
  %264 = @func_2941() /* ty=(Tensor[(10, 12, 11), float32],) */;
  %264.0
}

def @func_5236(%var_5235: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(6), uint64]) {
  %270 = fn (%var_5216: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(6), uint64]) {
    %265 = cast(%var_5216, dtype="uint64") /* ty=Tensor[(6), uint64] */;
    %266 = reshape(%265, newshape=[6]) /* ty=Tensor[(6), uint64] */;
    %267 = @func_4161(%266) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(9, 15, 2), float64], Tensor[(144), uint8], Tensor[(6), uint64], Tensor[(15, 14, 16), float64]) */;
    %268 = @func_3059() /* ty=Tensor[(10, 12, 11), bool] */;
    %269 = %267.3;
    (%268, %269, %var_5216)
  };
  %270(%var_5235) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(6), uint64]) */
}

def @func_3040() -> Tensor[(10, 12, 11), bool] {
  @func_3038() /* ty=Tensor[(10, 12, 11), bool] */
}

def @func_5967() -> Tensor[(60, 1), uint16] {
  %272 = fn () -> Tensor[(60, 1), uint16] {
    %271 = @func_4719() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60, 1), uint16], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(3, 2), uint64], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(5, 16, 8), float32], Tensor[(640, 1), int32], Tensor[(10, 12, 11), float32]) */;
    %271.3
  };
  %272() /* ty=Tensor[(60, 1), uint16] */
}

def @func_6846() -> (Tensor[(10, 12, 11), bool],) {
  %273 = @func_5587() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(4, 9, 4), uint8], Tensor[(144, 1), uint8], Tensor[(6), uint64], Tensor[(10, 12, 11), bool]) */;
  %274 = %273.0;
  (%274,)
}

def @func_3884(%var_3881: Tensor[(3, 8, 3), float32], %var_3882: Tensor[(1320), bool], %var_3883: Tensor[(6), uint64]) -> (Tensor[(3, 8, 3), float32], Tensor[(15, 14, 16), float64], Tensor[(14, 4, 10), float32], Tensor[(560), float32], Tensor[(3, ?, 2), uint64], Tensor[(1320), bool], Tensor[(6), uint64]) {
  %291 = fn (%var_3851: Tensor[(3, 8, 3), float32], %var_3873: Tensor[(1320), bool], %var_3874: Tensor[(6), uint64]) -> (Tensor[(3, 8, 3), float32], Tensor[(15, 14, 16), float64], Tensor[(14, 4, 10), float32], Tensor[(560), float32], Tensor[(3, ?, 2), uint64], Tensor[(1320), bool], Tensor[(6), uint64]) {
    %275 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 8, 3), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 3), float32] */;
    %276 = shape_of(%var_3851, dtype="int32") /* ty=Tensor[(3), int32] */;
    %277 = cast(%var_3851, dtype="float32") /* ty=Tensor[(3, 8, 3), float32] */;
    %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %279 = cast(meta[relay.Constant][28] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
    %280 = reshape(%279, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
    %281 = @func_3443(%280) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(14, 4, 10), bool], Tensor[(14, 4, 10), float32]) */;
    %282 = cast(%var_3873, dtype="bool") /* ty=Tensor[(1320), bool] */;
    %283 = cast(%var_3874, dtype="uint64") /* ty=Tensor[(6), uint64] */;
    %284 = reshape(%282, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), bool] */;
    %285 = reshape(%283, newshape=[6]) /* ty=Tensor[(6), uint64] */;
    %286 = @func_3481(%284, %285) /* ty=(Tensor[(10, 12, 11), int16], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
    %287 = floor_divide(%277, %278) /* ty=Tensor[(3, 8, 3), float32] */;
    %288 = @func_3739() /* ty=Tensor[(15, 14, 16), float64] */;
    %289 = %281.2;
    %290 = %286.1;
    (%287, %288, %289, meta[relay.Constant][28] /* ty=Tensor[(560), float32] */, %290, %var_3873, %var_3874)
  };
  %291(%var_3881, %var_3882, %var_3883) /* ty=(Tensor[(3, 8, 3), float32], Tensor[(15, 14, 16), float64], Tensor[(14, 4, 10), float32], Tensor[(560), float32], Tensor[(3, ?, 2), uint64], Tensor[(1320), bool], Tensor[(6), uint64]) */
}

def @func_6183(%var_6178: Tensor[(6), float64], %var_6179: uint16, %var_6180: Tensor[(560), float64], %var_6181: Tensor[(630), uint16], %var_6182: Tensor[(560), float64]) -> (Tensor[(10, 12, 11), bool], Tensor[(5, 1, 12), uint16], Tensor[(6), float64], uint16, Tensor[(60), uint16], Tensor[(11, 8, 7), uint64], Tensor[(630), uint16], Tensor[(270, 1), float64], Tensor[(10, 12, 11), bool], Tensor[(560), bool]) {
  @func_6176(%var_6178, %var_6179, %var_6180, %var_6181, %var_6182) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(5, 1, 12), uint16], Tensor[(6), float64], uint16, Tensor[(60), uint16], Tensor[(11, 8, 7), uint64], Tensor[(630), uint16], Tensor[(270, 1), float64], Tensor[(10, 12, 11), bool], Tensor[(560), bool]) */
}

def @func_6746() -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
  %296 = fn () -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
    %292 = @func_3997() /* ty=(Tensor[(10, 12, 11), bool],) */;
    %293 = @func_5194() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(6), uint64]) */;
    %294 = %292.0;
    %295 = %293.0;
    (%294, %295)
  };
  %296() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */
}

def @func_4271() -> Tensor[(10, 12, 11), bool] {
  @func_4269() /* ty=Tensor[(10, 12, 11), bool] */
}

def @func_2252(%var_2229: Tensor[(252), bool], %var_2230: Tensor[(616), uint64], %var_2241: Tensor[(630, 616), bool]) -> (Tensor[(13, 11, 4), int16], Tensor[(572), int16], Tensor[(320), int16], Tensor[(252), bool], Tensor[(10, 12, 11), bool], Tensor[(630, 616), float64]) {
  %297 = cast(meta[relay.Constant][29] /* ty=Tensor[(572), int16] */, dtype="int16") /* ty=Tensor[(572), int16] */;
  %298 = cast(meta[relay.Constant][30] /* ty=Tensor[(630, 1), uint16] */, dtype="uint16") /* ty=Tensor[(630, 1), uint16] */;
  %299 = reshape(%297, newshape=[13, 11, 4]) /* ty=Tensor[(13, 11, 4), int16] */;
  %300 = reshape(%298, newshape=[10, 63]) /* ty=Tensor[(10, 63), uint16] */;
  %301 = @func_859(%299, %300) /* ty=(Tensor[(13, 11, 4), int16], Tensor[(14, 5, 9), float64], uint16, Tensor[(10, 63), uint16]) */;
  %302 = cast(%var_2229, dtype="bool") /* ty=Tensor[(252), bool] */;
  %303 = cast(%var_2230, dtype="uint64") /* ty=Tensor[(616), uint64] */;
  %304 = reshape(%302, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), bool] */;
  %305 = reshape(%303, newshape=[616]) /* ty=Tensor[(616), uint64] */;
  %306 = @func_1604(%304, %305) /* ty=(Tensor[(3, 6, 14), bool], Tensor[(3, 6, 14), float64], Tensor[(16, 5, 4), float32], Tensor[(320), int16], Tensor[(616), uint64]) */;
  %307 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %308 = %307.0;
  %309 = @func_1984() /* ty=Tensor[(10, 12, 11), bool] */;
  %310 = cast(%309, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %311 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%308, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %314 = cast(%var_2230, dtype="bool") /* ty=Tensor[(616), bool] */;
  %315 = cast(meta[relay.Constant][30] /* ty=Tensor[(630, 1), uint16] */, dtype="bool") /* ty=Tensor[(630, 1), bool] */;
  %316 = not_equal(%314, %315) /* ty=Tensor[(630, 616), bool] */;
  %317 = cast(%var_2241, dtype="float64") /* ty=Tensor[(630, 616), float64] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(2), int32] */;
  %319 = cast(%316, dtype="float64") /* ty=Tensor[(630, 616), float64] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %321 = %301.0;
  %322 = %306.3;
  %323 = greater(%312, %313) /* ty=Tensor[(10, 12, 11), bool] */;
  %324 = power(%319, %320) /* ty=Tensor[(630, 616), float64] */;
  (%321, meta[relay.Constant][29] /* ty=Tensor[(572), int16] */, %322, %var_2229, %323, %324)
}

def @func_3481(%var_3456: Tensor[(10, 12, 11), bool], %var_3479: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), int16], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) {
  %325 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %326 = %325.0;
  %327 = cast(%var_3456, dtype="int16") /* ty=Tensor[(10, 12, 11), int16] */;
  %328 = shape_of(%326, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%326, dtype="int16") /* ty=Tensor[(10, 12, 11), int16] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %331 = cast(%var_3479, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %332 = cast(%var_3479, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %333 = reshape(%331, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
  %334 = reshape(%332, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
  %335 = bitwise_and(%329, %330) /* ty=Tensor[(10, 12, 11), int16] */;
  %336 = @func_1996(%333, %334) /* ty=Tensor[(3, ?, 2), uint64] */;
  (%335, %336, %var_3479)
}

def @func_711(%var_706: uint64, %var_707: Tensor[(11, 8, 7), uint64]) -> Tensor[(11, 8, 7), uint64] {
  %337 = cast(%var_706, dtype="uint64") /* ty=uint64 */;
  %338 = cast(%var_707, dtype="uint64") /* ty=Tensor[(11, 8, 7), uint64] */;
  maximum(%337, %338) /* ty=Tensor[(11, 8, 7), uint64] */
}

def @func_863(%var_861: Tensor[(13, 11, 4), int16], %var_862: Tensor[(10, 63), uint16]) -> (Tensor[(13, 11, 4), int16], Tensor[(14, 5, 9), float64], uint16, Tensor[(10, 63), uint16]) {
  @func_859(%var_861, %var_862) /* ty=(Tensor[(13, 11, 4), int16], Tensor[(14, 5, 9), float64], uint16, Tensor[(10, 63), uint16]) */
}

def @func_3443(%var_3398: Tensor[(14, 4, 10), float32]) -> (Tensor[(10, 12, 11), bool], Tensor[(14, 4, 10), bool], Tensor[(14, 4, 10), float32]) {
  %339 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %340 = cast(%var_3398, dtype="float32") /* ty=Tensor[(14, 4, 10), float32] */;
  %341 = sqrt(%340) /* ty=Tensor[(14, 4, 10), float32] */;
  %342 = cast(%var_3398, dtype="uint32") /* ty=Tensor[(14, 4, 10), uint32] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="uint32") /* ty=Tensor[(14, 4, 10), uint32] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %346 = bitwise_and(%344, %345) /* ty=Tensor[(14, 4, 10), uint32] */;
  %347 = cast(%346, dtype="bool") /* ty=Tensor[(14, 4, 10), bool] */;
  %348 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%341, dtype="bool") /* ty=Tensor[(14, 4, 10), bool] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %351 = cast(%341, dtype="float64") /* ty=Tensor[(14, 4, 10), float64] */;
  %352 = asinh(%351) /* ty=Tensor[(14, 4, 10), float64] */;
  %353 = cast(%352, dtype="float32") /* ty=Tensor[(14, 4, 10), float32] */;
  %354 = %339.0;
  %355 = greater(%349, %350) /* ty=Tensor[(14, 4, 10), bool] */;
  %356 = atanh(%353) /* ty=Tensor[(14, 4, 10), float32] */;
  (%354, %355, %356)
}

def @func_2257(%var_2254: Tensor[(252), bool], %var_2255: Tensor[(616), uint64], %var_2256: Tensor[(630, 616), bool]) -> (Tensor[(13, 11, 4), int16], Tensor[(572), int16], Tensor[(320), int16], Tensor[(252), bool], Tensor[(10, 12, 11), bool], Tensor[(630, 616), float64]) {
  @func_2252(%var_2254, %var_2255, %var_2256) /* ty=(Tensor[(13, 11, 4), int16], Tensor[(572), int16], Tensor[(320), int16], Tensor[(252), bool], Tensor[(10, 12, 11), bool], Tensor[(630, 616), float64]) */
}

def @func_4826(%var_4824: Tensor[(13, 10, 12), int16], %var_4825: Tensor[(13, 10, 12), int16]) -> (Tensor[(13, 10, 12), bool],) {
  %362 = fn (%var_4814: Tensor[(13, 10, 12), int16], %var_4815: Tensor[(13, 10, 12), int16]) -> (Tensor[(13, 10, 12), bool],) {
    %357 = cast(%var_4815, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
    %358 = shape_of(%var_4814, dtype="int32") /* ty=Tensor[(3), int32] */;
    %359 = cast(%var_4814, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
    %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %361 = greater(%359, %360) /* ty=Tensor[(13, 10, 12), bool] */;
    (%361,)
  };
  %362(%var_4824, %var_4825) /* ty=(Tensor[(13, 10, 12), bool],) */
}

def @func_3586(%var_3581: int32, %var_3582: Tensor[(4, 15, 3), int32]) -> Tensor[(4, 15, 3), int32] {
  %363 = cast(%var_3581, dtype="int32") /* ty=int32 */;
  %364 = cast(%var_3582, dtype="int32") /* ty=Tensor[(4, 15, 3), int32] */;
  right_shift(%363, %364) /* ty=Tensor[(4, 15, 3), int32] */
}

def @func_7211() -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
  %365 = @func_1984() /* ty=Tensor[(10, 12, 11), bool] */;
  %366 = @func_1984() /* ty=Tensor[(10, 12, 11), bool] */;
  (%365, %366)
}

def @func_6301(%var_6299: Tensor[(13, 3, 11), float64]) -> Tensor[(13, 3, 11), float64] {
  @func_6298(%var_6299) /* ty=Tensor[(13, 3, 11), float64] */
}

def @func_1574(%var_1535: Tensor[(16, 5, 4), int16], %var_1552: Tensor[(616), uint64]) -> (Tensor[(16, 5, 4), float32], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(11, 8, 7), uint64], Tensor[(616), uint64]) {
  %367 = cast(meta[relay.Constant][31] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %368 = cast(%var_1535, dtype="bool") /* ty=Tensor[(16, 5, 4), bool] */;
  %369 = less(%367, %368) /* ty=Tensor[(16, 5, 4), bool] */;
  %370 = cast(%var_1535, dtype="float32") /* ty=Tensor[(16, 5, 4), float32] */;
  %371 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%369, dtype="float32") /* ty=Tensor[(16, 5, 4), float32] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %374 = cast(meta[relay.Constant][32] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %375 = reshape(%374, newshape=[5, 15, 14]) /* ty=Tensor[(5, 15, 14), float32] */;
  %376 = @func_1401(%375) /* ty=(Tensor[(5, 15, 14), float32], Tensor[(5, 15, 14), float32]) */;
  %377 = cast(meta[relay.Constant][31] /* ty=int16 */, dtype="uint64") /* ty=uint64 */;
  %378 = cast(%var_1552, dtype="uint64") /* ty=Tensor[(616), uint64] */;
  %379 = reshape(%377, newshape=[]) /* ty=uint64 */;
  %380 = reshape(%378, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), uint64] */;
  %381 = minimum(%372, %373) /* ty=Tensor[(16, 5, 4), float32] */;
  %382 = %376.1;
  %383 = @func_711(%379, %380) /* ty=Tensor[(11, 8, 7), uint64] */;
  (%381, %382, meta[relay.Constant][32] /* ty=Tensor[(1050), float32] */, %383, %var_1552)
}

def @func_1401(%var_1391: Tensor[(5, 15, 14), float32]) -> (Tensor[(5, 15, 14), float32], Tensor[(5, 15, 14), float32]) {
  %384 = cast(%var_1391, dtype="float32") /* ty=Tensor[(5, 15, 14), float32] */;
  %385 = cast(%var_1391, dtype="float32") /* ty=Tensor[(5, 15, 14), float32] */;
  %386 = sin(%384) /* ty=Tensor[(5, 15, 14), float32] */;
  %387 = atanh(%385) /* ty=Tensor[(5, 15, 14), float32] */;
  (%386, %387)
}

def @func_7068() -> Tensor[(10, 12, 11), bool] {
  @func_7066() /* ty=Tensor[(10, 12, 11), bool] */
}

def @func_1404(%var_1402: Tensor[(5, 15, 14), float32]) -> (Tensor[(5, 15, 14), float32], Tensor[(5, 15, 14), float32]) {
  @func_1401(%var_1402) /* ty=(Tensor[(5, 15, 14), float32], Tensor[(5, 15, 14), float32]) */
}

def @func_3571(%var_3570: Tensor[(1, 630), uint16]) -> (Tensor[(10, 12, 11), bool], Tensor[(14, 5, 8), float64], Tensor[(560), float64], Tensor[(1, 630), uint16], Tensor[(270), float64]) {
  %397 = fn (%var_3542: Tensor[(1, 630), uint16]) -> (Tensor[(10, 12, 11), bool], Tensor[(14, 5, 8), float64], Tensor[(560), float64], Tensor[(1, 630), uint16], Tensor[(270), float64]) {
    %388 = cast(meta[relay.Constant][33] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
    %389 = cast(%var_3542, dtype="uint16") /* ty=Tensor[(1, 630), uint16] */;
    %390 = cast(meta[relay.Constant][34] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
    %391 = reshape(%388, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), float64] */;
    %392 = reshape(%389, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
    %393 = reshape(%390, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
    %394 = @func_1010(%391, %392, %393) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) */;
    %395 = @func_3038() /* ty=Tensor[(10, 12, 11), bool] */;
    %396 = %394.0;
    (%395, %396, meta[relay.Constant][33] /* ty=Tensor[(560), float64] */, %var_3542, meta[relay.Constant][34] /* ty=Tensor[(270), float64] */)
  };
  %397(%var_3570) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(14, 5, 8), float64], Tensor[(560), float64], Tensor[(1, 630), uint16], Tensor[(270), float64]) */
}

def @func_1015(%var_1012: Tensor[(14, 5, 8), float64], %var_1013: Tensor[(1, 630), uint16], %var_1014: Tensor[(270, 1), float64]) -> (Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) {
  @func_1010(%var_1012, %var_1013, %var_1014) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) */
}

def @func_3061() -> Tensor[(10, 12, 11), bool] {
  @func_3059() /* ty=Tensor[(10, 12, 11), bool] */
}

def @func_2307(%var_2306: Tensor[(640), int32]) -> (Tensor[(5, 16, 8), int32], Tensor[(640), int32], Tensor[(10, 12, 11), float32]) {
  %406 = fn (%var_2296: Tensor[(640), int32]) -> (Tensor[(5, 16, 8), int32], Tensor[(640), int32], Tensor[(10, 12, 11), float32]) {
    %398 = cast(%var_2296, dtype="int32") /* ty=Tensor[(640), int32] */;
    %399 = reshape(%398, newshape=[5, 16, 8]) /* ty=Tensor[(5, 16, 8), int32] */;
    %400 = @func_1157(%399) /* ty=(Tensor[(5, 16, 8), int32], Tensor[(5, 16, 8), float32]) */;
    %401 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
    %402 = %401.0;
    %403 = cast(%402, dtype="float32") /* ty=Tensor[(10, 12, 11), float32] */;
    %404 = %400.0;
    %405 = tan(%403) /* ty=Tensor[(10, 12, 11), float32] */;
    (%404, %var_2296, %405)
  };
  %406(%var_2306) /* ty=(Tensor[(5, 16, 8), int32], Tensor[(640), int32], Tensor[(10, 12, 11), float32]) */
}

def @func_1985() -> Tensor[(10, 12, 11), bool] {
  %408 = fn () -> Tensor[(10, 12, 11), bool] {
    %407 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
    %407.0
  };
  %408() /* ty=Tensor[(10, 12, 11), bool] */
}

def @func_4097() -> Tensor[(10, 12, 11), float32] {
  @func_4095() /* ty=Tensor[(10, 12, 11), float32] */
}

def @func_5948(%var_5947: Tensor[(15, 14, 10), float64]) -> Tensor[(15, 14, 10), float64] {
  %419 = fn (%var_5909: Tensor[(15, 14, 10), float64]) -> Tensor[(15, 14, 10), float64] {
    %409 = cast(%var_5909, dtype="float64") /* ty=Tensor[(15, 14, 10), float64] */;
    %410 = tan(%409) /* ty=Tensor[(15, 14, 10), float64] */;
    %411 = cast(%var_5909, dtype="float32") /* ty=Tensor[(15, 14, 10), float32] */;
    %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
    %413 = cast(%410, dtype="float32") /* ty=Tensor[(15, 14, 10), float32] */;
    %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %415 = floor_mod(%413, %414) /* ty=Tensor[(15, 14, 10), float32] */;
    %416 = cast(%415, dtype="float64") /* ty=Tensor[(15, 14, 10), float64] */;
    %417 = sqrt(%416) /* ty=Tensor[(15, 14, 10), float64] */;
    %418 = cast(%417, dtype="float64") /* ty=Tensor[(15, 14, 10), float64] */;
    log10(%418) /* ty=Tensor[(15, 14, 10), float64] */
  };
  %419(%var_5947) /* ty=Tensor[(15, 14, 10), float64] */
}

def @func_3739() -> Tensor[(15, 14, 16), float64] {
  %420 = cast(meta[relay.Constant][35] /* ty=Tensor[(15, 14, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 14, 16), float64] */;
  asin(%420) /* ty=Tensor[(15, 14, 16), float64] */
}

def @func_821(%var_818: uint16, %var_819: Tensor[(14, 5, 9), uint16], %var_820: Tensor[(14, 5, 9), uint16]) -> (Tensor[(14, 5, 9), bool], Tensor[(14, 5, 9), float64], Tensor[(14, 5, 9), float64]) {
  %433 = fn (%var_772: uint16, %var_773: Tensor[(14, 5, 9), uint16], %var_787: Tensor[(14, 5, 9), uint16]) -> (Tensor[(14, 5, 9), bool], Tensor[(14, 5, 9), float64], Tensor[(14, 5, 9), float64]) {
    %421 = cast(%var_772, dtype="uint16") /* ty=uint16 */;
    %422 = cast(%var_773, dtype="uint16") /* ty=Tensor[(14, 5, 9), uint16] */;
    %423 = bitwise_or(%421, %422) /* ty=Tensor[(14, 5, 9), uint16] */;
    %424 = cast(%var_787, dtype="bool") /* ty=Tensor[(14, 5, 9), bool] */;
    %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
    %426 = cast(%423, dtype="bool") /* ty=Tensor[(14, 5, 9), bool] */;
    %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %428 = cast(%var_787, dtype="float64") /* ty=Tensor[(14, 5, 9), float64] */;
    %429 = cast(%423, dtype="float64") /* ty=Tensor[(14, 5, 9), float64] */;
    %430 = less_equal(%426, %427) /* ty=Tensor[(14, 5, 9), bool] */;
    %431 = log(%428) /* ty=Tensor[(14, 5, 9), float64] */;
    %432 = cosh(%429) /* ty=Tensor[(14, 5, 9), float64] */;
    (%430, %431, %432)
  };
  %433(%var_818, %var_819, %var_820) /* ty=(Tensor[(14, 5, 9), bool], Tensor[(14, 5, 9), float64], Tensor[(14, 5, 9), float64]) */
}

def @func_5386() -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
  @func_5384() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */
}

def @func_1159(%var_1158: Tensor[(5, 16, 8), int32]) -> (Tensor[(5, 16, 8), int32], Tensor[(5, 16, 8), float32]) {
  %441 = fn (%var_1145: Tensor[(5, 16, 8), int32]) -> (Tensor[(5, 16, 8), int32], Tensor[(5, 16, 8), float32]) {
    %434 = cast(%var_1145, dtype="int32") /* ty=Tensor[(5, 16, 8), int32] */;
    %435 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(5, 16, 8), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %436 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 16, 8), int32] */, dtype="int32") /* ty=Tensor[(5, 16, 8), int32] */;
    %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %438 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 16, 8), int32] */, dtype="float32") /* ty=Tensor[(5, 16, 8), float32] */;
    %439 = add(%436, %437) /* ty=Tensor[(5, 16, 8), int32] */;
    %440 = sinh(%438) /* ty=Tensor[(5, 16, 8), float32] */;
    (%439, %440)
  };
  %441(%var_1158) /* ty=(Tensor[(5, 16, 8), int32], Tensor[(5, 16, 8), float32]) */
}

def @func_1940(%var_1807: Tensor[(10, 12, 11), bool], %var_1857: Tensor[(5, 126), uint16], %var_1865: Tensor[(640), int32]) -> (Tensor[(10, 12, 11), uint64], Tensor[(270), float64], Tensor[(10, 12, 11), float64], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(14, 5, 9), float64], uint16, Tensor[(5, 126), uint16], Tensor[(5, 16, 8), int32], Tensor[(640), int32], Tensor[(9, 15, 2), int32], Tensor[(9, 15, 2), float64], Tensor[(5, 16, 8), int32], Tensor[(9, 15, 2), float32], Tensor[(9, 15, 2), float64]) {
  %442 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %443 = %442.0;
  %444 = cast(%var_1807, dtype="uint64") /* ty=Tensor[(10, 12, 11), uint64] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%443, dtype="uint64") /* ty=Tensor[(10, 12, 11), uint64] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %448 = cast(%443, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
  %449 = cast(meta[relay.Constant][38] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %450 = reshape(%449, newshape=[5, 15, 14]) /* ty=Tensor[(5, 15, 14), float32] */;
  %451 = @func_1401(%450) /* ty=(Tensor[(5, 15, 14), float32], Tensor[(5, 15, 14), float32]) */;
  %452 = cast(meta[relay.Constant][39] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %453 = cast(%var_1857, dtype="uint16") /* ty=Tensor[(5, 126), uint16] */;
  %454 = cast(%var_1857, dtype="uint16") /* ty=Tensor[(5, 126), uint16] */;
  %455 = reshape(%452, newshape=[]) /* ty=uint16 */;
  %456 = reshape(%453, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint16] */;
  %457 = reshape(%454, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint16] */;
  %458 = @func_817(%455, %456, %457) /* ty=(Tensor[(14, 5, 9), bool], Tensor[(14, 5, 9), float64], Tensor[(14, 5, 9), float64]) */;
  %459 = cast(%var_1865, dtype="int32") /* ty=Tensor[(640), int32] */;
  %460 = reshape(%459, newshape=[5, 16, 8]) /* ty=Tensor[(5, 16, 8), int32] */;
  %461 = @func_1157(%460) /* ty=(Tensor[(5, 16, 8), int32], Tensor[(5, 16, 8), float32]) */;
  %462 = cast(meta[relay.Constant][37] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %463 = reshape(%462, newshape=[9, 15, 2]) /* ty=Tensor[(9, 15, 2), float64] */;
  %464 = @func_365(%463) /* ty=Tensor[(9, 15, 2), float64] */;
  %465 = cast(%464, dtype="float64") /* ty=Tensor[(9, 15, 2), float64] */;
  %466 = cos(%465) /* ty=Tensor[(9, 15, 2), float64] */;
  %467 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 15, 2), float64] */, dtype="int32") /* ty=Tensor[(9, 15, 2), int32] */;
  %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%466, dtype="int32") /* ty=Tensor[(9, 15, 2), int32] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %471 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 2), float64] */;
  %472 = reshape(%471, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %473 = @func_1319(%472) /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 15, 2), float64], Tensor[(270), float64], Tensor[(9, 15, 2), float64]) */;
  %474 = cast(%var_1865, dtype="int32") /* ty=Tensor[(640), int32] */;
  %475 = reshape(%474, newshape=[5, 16, 8]) /* ty=Tensor[(5, 16, 8), int32] */;
  %476 = @func_1157(%475) /* ty=(Tensor[(5, 16, 8), int32], Tensor[(5, 16, 8), float32]) */;
  %477 = cast(%466, dtype="float64") /* ty=Tensor[(9, 15, 2), float64] */;
  %478 = sqrt(%477) /* ty=Tensor[(9, 15, 2), float64] */;
  %479 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 2), float64] */;
  %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%478, dtype="float64") /* ty=Tensor[(9, 15, 2), float64] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %483 = minimum(%481, %482) /* ty=Tensor[(9, 15, 2), float64] */;
  %484 = cast(%483, dtype="float32") /* ty=Tensor[(9, 15, 2), float32] */;
  %485 = cast(%483, dtype="float64") /* ty=Tensor[(9, 15, 2), float64] */;
  %486 = reshape(%485, newshape=[9, 15, 2]) /* ty=Tensor[(9, 15, 2), float64] */;
  %487 = left_shift(%446, %447) /* ty=Tensor[(10, 12, 11), uint64] */;
  %488 = sin(%448) /* ty=Tensor[(10, 12, 11), float64] */;
  %489 = %451.1;
  %490 = %458.1;
  %491 = %461.0;
  %492 = left_shift(%469, %470) /* ty=Tensor[(9, 15, 2), int32] */;
  %493 = %473.1;
  %494 = %476.0;
  %495 = atanh(%484) /* ty=Tensor[(9, 15, 2), float32] */;
  %496 = @func_365(%486) /* ty=Tensor[(9, 15, 2), float64] */;
  (%487, meta[relay.Constant][37] /* ty=Tensor[(270), float64] */, %488, %489, meta[relay.Constant][38] /* ty=Tensor[(1050), float32] */, %490, meta[relay.Constant][39] /* ty=uint16 */, %var_1857, %491, %var_1865, %492, %493, %494, %495, %496)
}

def @func_3320() -> (Tensor[(10, 12, 11), bool],) {
  %498 = fn () -> (Tensor[(10, 12, 11), bool],) {
    %497 = @func_3038() /* ty=Tensor[(10, 12, 11), bool] */;
    (%497,)
  };
  %498() /* ty=(Tensor[(10, 12, 11), bool],) */
}

def @func_2331() -> (Tensor[(10, 12, 11), bool],) {
  %499 = @func_1984() /* ty=Tensor[(10, 12, 11), bool] */;
  (%499,)
}

def @func_7000(%var_6993: uint16) -> (Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(10, 12, 11), bool], Tensor[(630), uint16], uint16, Tensor[(640, 1), int32]) {
  %500 = @func_6400() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %501 = cast(meta[relay.Constant][41] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %502 = reshape(%501, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %503 = @func_5234(%502) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(6), uint64]) */;
  %504 = %500.0;
  %505 = cast(%504, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %506 = reshape(%505, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), bool] */;
  %507 = @func_3662(%506) /* ty=(Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(10, 12, 11), int64]) */;
  %508 = @func_6400() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %509 = cast(%var_6993, dtype="uint16") /* ty=uint16 */;
  %510 = cast(meta[relay.Constant][42] /* ty=Tensor[(640, 1), int32] */, dtype="int32") /* ty=Tensor[(640, 1), int32] */;
  %511 = reshape(%509, newshape=[]) /* ty=uint16 */;
  %512 = reshape(%510, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %513 = @func_2740(%511, %512) /* ty=(Tensor[(1, 15, 1), float32], Tensor[(6), uint64], Tensor[(10, 12, 11), bool], Tensor[(3, 15, 2), uint16], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60), uint16], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(1050), float32], Tensor[(630), uint16], Tensor[(640), int32], Tensor[(280, 2), float64], Tensor[(160, 2), int16], Tensor[(560), float64]) */;
  %514 = %503.1;
  %515 = %507.0;
  %516 = %508.0;
  %517 = %513.10;
  (%504, %514, meta[relay.Constant][41] /* ty=Tensor[(6), uint64] */, %515, %516, %517, %var_6993, meta[relay.Constant][42] /* ty=Tensor[(640, 1), int32] */)
}

def @func_1945(%var_1942: Tensor[(10, 12, 11), bool], %var_1943: Tensor[(5, 126), uint16], %var_1944: Tensor[(640), int32]) -> (Tensor[(10, 12, 11), uint64], Tensor[(270), float64], Tensor[(10, 12, 11), float64], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(14, 5, 9), float64], uint16, Tensor[(5, 126), uint16], Tensor[(5, 16, 8), int32], Tensor[(640), int32], Tensor[(9, 15, 2), int32], Tensor[(9, 15, 2), float64], Tensor[(5, 16, 8), int32], Tensor[(9, 15, 2), float32], Tensor[(9, 15, 2), float64]) {
  @func_1940(%var_1942, %var_1943, %var_1944) /* ty=(Tensor[(10, 12, 11), uint64], Tensor[(270), float64], Tensor[(10, 12, 11), float64], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(14, 5, 9), float64], uint16, Tensor[(5, 126), uint16], Tensor[(5, 16, 8), int32], Tensor[(640), int32], Tensor[(9, 15, 2), int32], Tensor[(9, 15, 2), float64], Tensor[(5, 16, 8), int32], Tensor[(9, 15, 2), float32], Tensor[(9, 15, 2), float64]) */
}

def @func_3251() -> Tensor[(10, 12, 11), uint64] {
  %524 = fn () -> Tensor[(10, 12, 11), uint64] {
    %518 = @func_3179() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
    %519 = %518.1;
    %520 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 12, 11), bool] */, dtype="uint64") /* ty=Tensor[(10, 12, 11), uint64] */;
    %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
    %522 = cast(%519, dtype="uint64") /* ty=Tensor[(10, 12, 11), uint64] */;
    %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    logical_xor(%522, %523) /* ty=Tensor[(10, 12, 11), uint64] */
  };
  %524() /* ty=Tensor[(10, 12, 11), uint64] */
}

def @func_2643(%var_2640: Tensor[(1, 3, 2), float64], %var_2641: uint16, %var_2642: Tensor[(30, 2), uint16]) -> (Tensor[(?, 3, 2), uint8], Tensor[(5, 1, 12), uint16], uint16, Tensor[(30, 2), uint16]) {
  @func_2638(%var_2640, %var_2641, %var_2642) /* ty=(Tensor[(?, 3, 2), uint8], Tensor[(5, 1, 12), uint16], uint16, Tensor[(30, 2), uint16]) */
}

def @func_6391() -> Tensor[(10, 12, 11), bool] {
  %526 = fn () -> Tensor[(10, 12, 11), bool] {
    %525 = @func_4023() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
    %525.2
  };
  %526() /* ty=Tensor[(10, 12, 11), bool] */
}

def @func_3849(%var_3847: int8, %var_3848: Tensor[(9, 13, 12), int8]) -> Tensor[(9, 13, 12), int8] {
  @func_3845(%var_3847, %var_3848) /* ty=Tensor[(9, 13, 12), int8] */
}

def @func_1999(%var_1997: Tensor[(3, 1, 2), uint64], %var_1998: Tensor[(3, 1, 2), uint64]) -> Tensor[(3, ?, 2), uint64] {
  %531 = fn (%var_1986: Tensor[(3, 1, 2), uint64], %var_1987: Tensor[(3, 1, 2), uint64]) -> Tensor[(3, ?, 2), uint64] {
    %527 = cast(%var_1987, dtype="uint64") /* ty=Tensor[(3, 1, 2), uint64] */;
    %528 = shape_of(%var_1986, dtype="int32") /* ty=Tensor[(3), int32] */;
    %529 = cast(%var_1986, dtype="uint64") /* ty=Tensor[(3, 1, 2), uint64] */;
    %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    logical_xor(%529, %530) /* ty=Tensor[(3, ?, 2), uint64] */
  };
  %531(%var_1997, %var_1998) /* ty=Tensor[(3, ?, 2), uint64] */
}

def @func_5532(%var_5480: Tensor[(1, 11, 4), bool], %var_5481: Tensor[(13, 11, 4), bool], %var_5490: Tensor[(13, 11, 4), bool], %var_5510: Tensor[(3, 2), float64], %var_5511: uint16, %var_5512: Tensor[(15, 4), uint16]) -> (Tensor[(13, 11, 4), bool], Tensor[(10, 12, 11), bool], Tensor[(5, 1, 12), uint16], Tensor[(3, 2), float64], Tensor[(15, 4), uint16], Tensor[(13, 11, 4), uint32]) {
  %532 = cast(%var_5480, dtype="bool") /* ty=Tensor[(1, 11, 4), bool] */;
  %533 = cast(%var_5481, dtype="bool") /* ty=Tensor[(13, 11, 4), bool] */;
  %534 = @func_3686() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %535 = cast(%var_5510, dtype="float64") /* ty=Tensor[(3, 2), float64] */;
  %536 = cast(%var_5511, dtype="uint16") /* ty=uint16 */;
  %537 = cast(%var_5512, dtype="uint16") /* ty=Tensor[(15, 4), uint16] */;
  %538 = reshape(%535, newshape=[1, 3, 2]) /* ty=Tensor[(1, 3, 2), float64] */;
  %539 = reshape(%536, newshape=[]) /* ty=uint16 */;
  %540 = reshape(%537, newshape=[30, 2]) /* ty=Tensor[(30, 2), uint16] */;
  %541 = @func_2638(%538, %539, %540) /* ty=(Tensor[(?, 3, 2), uint8], Tensor[(5, 1, 12), uint16], uint16, Tensor[(30, 2), uint16]) */;
  %542 = cast(%var_5481, dtype="float64") /* ty=Tensor[(13, 11, 4), float64] */;
  %543 = exp(%542) /* ty=Tensor[(13, 11, 4), float64] */;
  %544 = cast(%var_5490, dtype="float32") /* ty=Tensor[(13, 11, 4), float32] */;
  %545 = shape_of(%var_5481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%var_5481, dtype="float32") /* ty=Tensor[(13, 11, 4), float32] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %548 = floor_divide(%546, %547) /* ty=Tensor[(13, 11, 4), float32] */;
  %549 = cast(%548, dtype="int8") /* ty=Tensor[(13, 11, 4), int8] */;
  %550 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%543, dtype="int8") /* ty=Tensor[(13, 11, 4), int8] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %553 = subtract(%551, %552) /* ty=Tensor[(13, 11, 4), int8] */;
  %554 = cast(%553, dtype="uint32") /* ty=Tensor[(13, 11, 4), uint32] */;
  %555 = cast(%var_5511, dtype="uint32") /* ty=uint32 */;
  %556 = logical_or(%532, %533) /* ty=Tensor[(13, 11, 4), bool] */;
  %557 = %534.0;
  %558 = %541.1;
  %559 = add(%554, %555) /* ty=Tensor[(13, 11, 4), uint32] */;
  (%556, %557, %558, %var_5510, %var_5512, %559)
}

def @func_4591() -> (Tensor[(10, 12, 11), float32],) {
  @func_4589() /* ty=(Tensor[(10, 12, 11), float32],) */
}

def @func_5892(%var_5890: Tensor[(616), uint64]) -> (Tensor[(6), uint64], Tensor[(572), int16], Tensor[(252), bool], Tensor[(616), uint64], Tensor[(2, 194040), bool]) {
  @func_5889(%var_5890) /* ty=(Tensor[(6), uint64], Tensor[(572), int16], Tensor[(252), bool], Tensor[(616), uint64], Tensor[(2, 194040), bool]) */
}

def @func_368(%var_366: Tensor[(9, 15, 2), float64]) -> Tensor[(9, 15, 2), float64] {
  @func_365(%var_366) /* ty=Tensor[(9, 15, 2), float64] */
}

def @func_5837() -> (Tensor[(15, 14, 16), float64],) {
  %560 = @func_3739() /* ty=Tensor[(15, 14, 16), float64] */;
  (%560,)
}

def @func_383(%var_381: uint16, %var_382: Tensor[(5, 1, 12), uint16]) -> (Tensor[(5, 1, 12), uint16],) {
  %564 = fn (%var_373: uint16, %var_374: Tensor[(5, 1, 12), uint16]) -> (Tensor[(5, 1, 12), uint16],) {
    %561 = cast(%var_373, dtype="uint16") /* ty=uint16 */;
    %562 = cast(%var_374, dtype="uint16") /* ty=Tensor[(5, 1, 12), uint16] */;
    %563 = logical_xor(%561, %562) /* ty=Tensor[(5, 1, 12), uint16] */;
    (%563,)
  };
  %564(%var_381, %var_382) /* ty=(Tensor[(5, 1, 12), uint16],) */
}

def @func_3034(%var_3030: uint16, %var_3031: Tensor[(560), float64], %var_3032: Tensor[(630), uint16], %var_3033: Tensor[(270), float64]) -> (Tensor[(10, 12, 11), bool], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60), uint16], Tensor[(9, 15, 2), float64], Tensor[(560), float64], Tensor[(630), uint16], Tensor[(270), float64]) {
  @func_3028(%var_3030, %var_3031, %var_3032, %var_3033) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60), uint16], Tensor[(9, 15, 2), float64], Tensor[(560), float64], Tensor[(630), uint16], Tensor[(270), float64]) */
}

def @func_1607(%var_1605: Tensor[(3, 6, 14), bool], %var_1606: Tensor[(616), uint64]) -> (Tensor[(3, 6, 14), bool], Tensor[(3, 6, 14), float64], Tensor[(16, 5, 4), float32], Tensor[(320), int16], Tensor[(616), uint64]) {
  %578 = fn (%var_1588: Tensor[(3, 6, 14), bool], %var_1597: Tensor[(616), uint64]) -> (Tensor[(3, 6, 14), bool], Tensor[(3, 6, 14), float64], Tensor[(16, 5, 4), float32], Tensor[(320), int16], Tensor[(616), uint64]) {
    %565 = cast(meta[relay.Constant][44] /* ty=Tensor[(3, 6, 14), bool] */, dtype="bool") /* ty=Tensor[(3, 6, 14), bool] */;
    %566 = shape_of(%var_1588, dtype="int32") /* ty=Tensor[(3), int32] */;
    %567 = cast(%var_1588, dtype="bool") /* ty=Tensor[(3, 6, 14), bool] */;
    %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %569 = cast(%var_1588, dtype="float64") /* ty=Tensor[(3, 6, 14), float64] */;
    %570 = cast(meta[relay.Constant][45] /* ty=Tensor[(320), int16] */, dtype="int16") /* ty=Tensor[(320), int16] */;
    %571 = cast(%var_1597, dtype="uint64") /* ty=Tensor[(616), uint64] */;
    %572 = reshape(%570, newshape=[16, 5, 4]) /* ty=Tensor[(16, 5, 4), int16] */;
    %573 = reshape(%571, newshape=[616]) /* ty=Tensor[(616), uint64] */;
    %574 = @func_1574(%572, %573) /* ty=(Tensor[(16, 5, 4), float32], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(11, 8, 7), uint64], Tensor[(616), uint64]) */;
    %575 = logical_and(%567, %568) /* ty=Tensor[(3, 6, 14), bool] */;
    %576 = exp(%569) /* ty=Tensor[(3, 6, 14), float64] */;
    %577 = %574.0;
    (%575, %576, %577, meta[relay.Constant][45] /* ty=Tensor[(320), int16] */, %var_1597)
  };
  %578(%var_1605, %var_1606) /* ty=(Tensor[(3, 6, 14), bool], Tensor[(3, 6, 14), float64], Tensor[(16, 5, 4), float32], Tensor[(320), int16], Tensor[(616), uint64]) */
}

def @func_2942() -> (Tensor[(10, 12, 11), float32],) {
  %582 = fn () -> (Tensor[(10, 12, 11), float32],) {
    %579 = @func_2365() /* ty=Tensor[(10, 12, 11), bool] */;
    %580 = cast(%579, dtype="float32") /* ty=Tensor[(10, 12, 11), float32] */;
    %581 = sqrt(%580) /* ty=Tensor[(10, 12, 11), float32] */;
    (%581,)
  };
  %582() /* ty=(Tensor[(10, 12, 11), float32],) */
}

def @func_7066() -> Tensor[(10, 12, 11), bool] {
  %583 = @func_6400() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %583.0
}

def @func_3938() -> Tensor[(10, 12, 11), float64] {
  %587 = fn () -> Tensor[(10, 12, 11), float64] {
    %584 = @func_2331() /* ty=(Tensor[(10, 12, 11), bool],) */;
    %585 = %584.0;
    %586 = cast(%585, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
    sigmoid(%586) /* ty=Tensor[(10, 12, 11), float64] */
  };
  %587() /* ty=Tensor[(10, 12, 11), float64] */
}

def @func_7243(%var_7241: Tensor[(320), int16], %var_7242: Tensor[(640), int32]) -> (Tensor[(10, 12, 11), bool], Tensor[(3, 90), float64], Tensor[(320), int16], Tensor[(560), float64], Tensor[(9, 15, 2), float32], Tensor[(630), uint16], Tensor[(640), int32]) {
  %604 = fn (%var_7233: Tensor[(320), int16], %var_7238: Tensor[(640), int32]) -> (Tensor[(10, 12, 11), bool], Tensor[(3, 90), float64], Tensor[(320), int16], Tensor[(560), float64], Tensor[(9, 15, 2), float32], Tensor[(630), uint16], Tensor[(640), int32]) {
    %588 = @func_3304() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
    %589 = cast(%var_7233, dtype="int16") /* ty=Tensor[(320), int16] */;
    %590 = cast(meta[relay.Constant][46] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
    %591 = reshape(%589, newshape=[320]) /* ty=Tensor[(320), int16] */;
    %592 = reshape(%590, newshape=[280, 2]) /* ty=Tensor[(280, 2), float64] */;
    %593 = @func_2430(%591, %592) /* ty=(Tensor[(9, 2, 16), float32], Tensor[(5, 15, 14), float32], Tensor[(320), int16], Tensor[(616), uint64], Tensor[(270, 1), float64], Tensor[(280, 2), float64], Tensor[(630), uint16], Tensor[(3, 90), float64], Tensor[(10, 12, 11), bool]) */;
    %594 = %588.0;
    %595 = cast(%594, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
    %596 = cast(meta[relay.Constant][47] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
    %597 = cast(%var_7238, dtype="int32") /* ty=Tensor[(640), int32] */;
    %598 = reshape(%595, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), bool] */;
    %599 = reshape(%596, newshape=[5, 126]) /* ty=Tensor[(5, 126), uint16] */;
    %600 = reshape(%597, newshape=[640]) /* ty=Tensor[(640), int32] */;
    %601 = @func_1940(%598, %599, %600) /* ty=(Tensor[(10, 12, 11), uint64], Tensor[(270), float64], Tensor[(10, 12, 11), float64], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(14, 5, 9), float64], uint16, Tensor[(5, 126), uint16], Tensor[(5, 16, 8), int32], Tensor[(640), int32], Tensor[(9, 15, 2), int32], Tensor[(9, 15, 2), float64], Tensor[(5, 16, 8), int32], Tensor[(9, 15, 2), float32], Tensor[(9, 15, 2), float64]) */;
    %602 = %593.7;
    %603 = %601.13;
    (%594, %602, %var_7233, meta[relay.Constant][46] /* ty=Tensor[(560), float64] */, %603, meta[relay.Constant][47] /* ty=Tensor[(630), uint16] */, %var_7238)
  };
  %604(%var_7241, %var_7242) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(3, 90), float64], Tensor[(320), int16], Tensor[(560), float64], Tensor[(9, 15, 2), float32], Tensor[(630), uint16], Tensor[(640), int32]) */
}

def @func_4878(%var_4857: Tensor[(1560), int16], %var_4874: Tensor[(1560), float64]) -> (Tensor[(10, 12, 11), bool], Tensor[(13, 10, 12), bool], Tensor[(1560), uint64]) {
  %605 = cast(%var_4857, dtype="int16") /* ty=Tensor[(1560), int16] */;
  %606 = cast(%var_4857, dtype="int16") /* ty=Tensor[(1560), int16] */;
  %607 = reshape(%605, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), int16] */;
  %608 = reshape(%606, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), int16] */;
  %609 = @func_4823(%607, %608) /* ty=(Tensor[(13, 10, 12), bool],) */;
  %610 = cast(%var_4857, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %611 = sin(%610) /* ty=Tensor[(1560), float64] */;
  %612 = cast(%var_4874, dtype="uint64") /* ty=Tensor[(1560), uint64] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(1), int32] */;
  %614 = cast(%611, dtype="uint64") /* ty=Tensor[(1560), uint64] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %616 = @func_4269() /* ty=Tensor[(10, 12, 11), bool] */;
  %617 = %609.0;
  %618 = logical_xor(%614, %615) /* ty=Tensor[(1560), uint64] */;
  (%616, %617, %618)
}

def @func_365(%var_362: Tensor[(9, 15, 2), float64]) -> Tensor[(9, 15, 2), float64] {
  %619 = cast(%var_362, dtype="float64") /* ty=Tensor[(9, 15, 2), float64] */;
  sin(%619) /* ty=Tensor[(9, 15, 2), float64] */
}

def @func_3662(%var_3648: Tensor[(10, 12, 11), bool]) -> (Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(10, 12, 11), int64]) {
  %620 = @func_2392() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %621 = %620.0;
  %622 = cast(%621, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %623 = cast(meta[relay.Constant][48] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %624 = reshape(%622, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), bool] */;
  %625 = reshape(%623, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %626 = @func_3481(%624, %625) /* ty=(Tensor[(10, 12, 11), int16], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
  %627 = cast(%var_3648, dtype="int64") /* ty=Tensor[(10, 12, 11), int64] */;
  %628 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%621, dtype="int64") /* ty=Tensor[(10, 12, 11), int64] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %631 = %626.2;
  %632 = multiply(%629, %630) /* ty=Tensor[(10, 12, 11), int64] */;
  (%631, meta[relay.Constant][48] /* ty=Tensor[(6), uint64] */, %632)
}

def @func_2743(%var_2741: uint16, %var_2742: Tensor[(640), int32]) -> (Tensor[(1, 15, 1), float32], Tensor[(6), uint64], Tensor[(10, 12, 11), bool], Tensor[(3, 15, 2), uint16], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60), uint16], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(1050), float32], Tensor[(630), uint16], Tensor[(640), int32], Tensor[(280, 2), float64], Tensor[(160, 2), int16], Tensor[(560), float64]) {
  %670 = fn (%var_2707: uint16, %var_2716: Tensor[(640), int32]) -> (Tensor[(1, 15, 1), float32], Tensor[(6), uint64], Tensor[(10, 12, 11), bool], Tensor[(3, 15, 2), uint16], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60), uint16], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(1050), float32], Tensor[(630), uint16], Tensor[(640), int32], Tensor[(280, 2), float64], Tensor[(160, 2), int16], Tensor[(560), float64]) {
    %633 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 15, 1), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 1), float32] */;
    %634 = cast(meta[relay.Constant][50] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
    %635 = reshape(%634, newshape=[6]) /* ty=Tensor[(6), uint64] */;
    %636 = @func_2468(%635) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
    %637 = %636.2;
    %638 = cast(%637, dtype="uint64") /* ty=Tensor[(3, ?, 2), uint64] */;
    %639 = reshape(%638, newshape=[6]) /* ty=Tensor[(6), uint64] */;
    %640 = @func_2468(%639) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
    %641 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 15, 1), float32] */, dtype="uint16") /* ty=Tensor[(1, 15, 1), uint16] */;
    %642 = cast(%637, dtype="uint16") /* ty=Tensor[(3, ?, 2), uint16] */;
    %643 = cast(%var_2707, dtype="uint16") /* ty=uint16 */;
    %644 = cast(meta[relay.Constant][51] /* ty=Tensor[(60), uint16] */, dtype="uint16") /* ty=Tensor[(60), uint16] */;
    %645 = reshape(%643, newshape=[]) /* ty=uint16 */;
    %646 = reshape(%644, newshape=[5, 1, 12]) /* ty=Tensor[(5, 1, 12), uint16] */;
    %647 = @func_380(%645, %646) /* ty=(Tensor[(5, 1, 12), uint16],) */;
    %648 = cast(meta[relay.Constant][52] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
    %649 = reshape(%648, newshape=[5, 15, 14]) /* ty=Tensor[(5, 15, 14), float32] */;
    %650 = @func_1401(%649) /* ty=(Tensor[(5, 15, 14), float32], Tensor[(5, 15, 14), float32]) */;
    %651 = %640.1;
    %652 = cast(%651, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
    %653 = cast(meta[relay.Constant][53] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
    %654 = cast(%var_2716, dtype="int32") /* ty=Tensor[(640), int32] */;
    %655 = reshape(%652, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), bool] */;
    %656 = reshape(%653, newshape=[5, 126]) /* ty=Tensor[(5, 126), uint16] */;
    %657 = reshape(%654, newshape=[640]) /* ty=Tensor[(640), int32] */;
    %658 = @func_1940(%655, %656, %657) /* ty=(Tensor[(10, 12, 11), uint64], Tensor[(270), float64], Tensor[(10, 12, 11), float64], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(14, 5, 9), float64], uint16, Tensor[(5, 126), uint16], Tensor[(5, 16, 8), int32], Tensor[(640), int32], Tensor[(9, 15, 2), int32], Tensor[(9, 15, 2), float64], Tensor[(5, 16, 8), int32], Tensor[(9, 15, 2), float32], Tensor[(9, 15, 2), float64]) */;
    %659 = cast(meta[relay.Constant][54] /* ty=Tensor[(160, 2), int16] */, dtype="int16") /* ty=Tensor[(160, 2), int16] */;
    %660 = cast(meta[relay.Constant][55] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
    %661 = reshape(%659, newshape=[320]) /* ty=Tensor[(320), int16] */;
    %662 = reshape(%660, newshape=[280, 2]) /* ty=Tensor[(280, 2), float64] */;
    %663 = @func_2430(%661, %662) /* ty=(Tensor[(9, 2, 16), float32], Tensor[(5, 15, 14), float32], Tensor[(320), int16], Tensor[(616), uint64], Tensor[(270, 1), float64], Tensor[(280, 2), float64], Tensor[(630), uint16], Tensor[(3, 90), float64], Tensor[(10, 12, 11), bool]) */;
    %664 = log10(%633) /* ty=Tensor[(1, 15, 1), float32] */;
    %665 = bitwise_and(%641, %642) /* ty=Tensor[(3, 15, 2), uint16] */;
    %666 = %647.0;
    %667 = %650.0;
    %668 = %658.4;
    %669 = %663.5;
    (%664, meta[relay.Constant][50] /* ty=Tensor[(6), uint64] */, %651, %665, %666, %var_2707, meta[relay.Constant][51] /* ty=Tensor[(60), uint16] */, %667, meta[relay.Constant][52] /* ty=Tensor[(1050), float32] */, %668, meta[relay.Constant][53] /* ty=Tensor[(630), uint16] */, %var_2716, %669, meta[relay.Constant][54] /* ty=Tensor[(160, 2), int16] */, meta[relay.Constant][55] /* ty=Tensor[(560), float64] */)
  };
  %670(%var_2741, %var_2742) /* ty=(Tensor[(1, 15, 1), float32], Tensor[(6), uint64], Tensor[(10, 12, 11), bool], Tensor[(3, 15, 2), uint16], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60), uint16], Tensor[(5, 15, 14), float32], Tensor[(1050), float32], Tensor[(1050), float32], Tensor[(630), uint16], Tensor[(640), int32], Tensor[(280, 2), float64], Tensor[(160, 2), int16], Tensor[(560), float64]) */
}

def @func_2533(%var_2531: Tensor[(4, 9, 4), uint8], %var_2532: Tensor[(1, 6), uint64]) -> (Tensor[(4, 9, 4), uint8], Tensor[(3, ?, 2), uint64], Tensor[(1, 6), uint64], Tensor[(4, 9, 4), uint8], Tensor[(9, 15, 2), float64], Tensor[(2, 280), float64], Tensor[(630), uint16], Tensor[(270), float64]) {
  %694 = fn (%var_2493: Tensor[(4, 9, 4), uint8], %var_2499: Tensor[(1, 6), uint64]) -> (Tensor[(4, 9, 4), uint8], Tensor[(3, ?, 2), uint64], Tensor[(1, 6), uint64], Tensor[(4, 9, 4), uint8], Tensor[(9, 15, 2), float64], Tensor[(2, 280), float64], Tensor[(630), uint16], Tensor[(270), float64]) {
    %671 = cast(%var_2493, dtype="uint8") /* ty=Tensor[(4, 9, 4), uint8] */;
    %672 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(4, 9, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %673 = cast(meta[relay.Constant][56] /* ty=Tensor[(4, 9, 4), uint8] */, dtype="uint8") /* ty=Tensor[(4, 9, 4), uint8] */;
    %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %675 = cast(%var_2499, dtype="uint64") /* ty=Tensor[(1, 6), uint64] */;
    %676 = cast(%var_2499, dtype="uint64") /* ty=Tensor[(1, 6), uint64] */;
    %677 = reshape(%675, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
    %678 = reshape(%676, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
    %679 = cast(%var_2493, dtype="uint8") /* ty=Tensor[(4, 9, 4), uint8] */;
    %680 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(4, 9, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %681 = cast(meta[relay.Constant][56] /* ty=Tensor[(4, 9, 4), uint8] */, dtype="uint8") /* ty=Tensor[(4, 9, 4), uint8] */;
    %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %683 = cast(meta[relay.Constant][57] /* ty=Tensor[(2, 280), float64] */, dtype="float64") /* ty=Tensor[(2, 280), float64] */;
    %684 = cast(meta[relay.Constant][58] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
    %685 = cast(meta[relay.Constant][59] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
    %686 = reshape(%683, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), float64] */;
    %687 = reshape(%684, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
    %688 = reshape(%685, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
    %689 = @func_1010(%686, %687, %688) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) */;
    %690 = right_shift(%673, %674) /* ty=Tensor[(4, 9, 4), uint8] */;
    %691 = @func_1996(%677, %678) /* ty=Tensor[(3, ?, 2), uint64] */;
    %692 = bitwise_or(%681, %682) /* ty=Tensor[(4, 9, 4), uint8] */;
    %693 = %689.6;
    (%690, %691, %var_2499, %692, %693, meta[relay.Constant][57] /* ty=Tensor[(2, 280), float64] */, meta[relay.Constant][58] /* ty=Tensor[(630), uint16] */, meta[relay.Constant][59] /* ty=Tensor[(270), float64] */)
  };
  %694(%var_2531, %var_2532) /* ty=(Tensor[(4, 9, 4), uint8], Tensor[(3, ?, 2), uint64], Tensor[(1, 6), uint64], Tensor[(4, 9, 4), uint8], Tensor[(9, 15, 2), float64], Tensor[(2, 280), float64], Tensor[(630), uint16], Tensor[(270), float64]) */
}

def @func_5889(%var_5858: Tensor[(616), uint64]) -> (Tensor[(6), uint64], Tensor[(572), int16], Tensor[(252), bool], Tensor[(616), uint64], Tensor[(2, 194040), bool]) {
  %695 = @func_4123() /* ty=(Tensor[(6), uint64], Tensor[(6), uint64]) */;
  %696 = cast(meta[relay.Constant][60] /* ty=Tensor[(252), bool] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %697 = cast(%var_5858, dtype="uint64") /* ty=Tensor[(616), uint64] */;
  %698 = cast(meta[relay.Constant][61] /* ty=Tensor[(2, 194040), bool] */, dtype="bool") /* ty=Tensor[(2, 194040), bool] */;
  %699 = reshape(%696, newshape=[252]) /* ty=Tensor[(252), bool] */;
  %700 = reshape(%697, newshape=[616]) /* ty=Tensor[(616), uint64] */;
  %701 = reshape(%698, newshape=[630, 616]) /* ty=Tensor[(630, 616), bool] */;
  %702 = @func_2252(%699, %700, %701) /* ty=(Tensor[(13, 11, 4), int16], Tensor[(572), int16], Tensor[(320), int16], Tensor[(252), bool], Tensor[(10, 12, 11), bool], Tensor[(630, 616), float64]) */;
  %703 = %695.1;
  %704 = %702.1;
  (%703, %704, meta[relay.Constant][60] /* ty=Tensor[(252), bool] */, %var_5858, meta[relay.Constant][61] /* ty=Tensor[(2, 194040), bool] */)
}

def @func_7013() -> Tensor[(10, 12, 11), float32] {
  %706 = fn () -> Tensor[(10, 12, 11), float32] {
    %705 = @func_4589() /* ty=(Tensor[(10, 12, 11), float32],) */;
    %705.0
  };
  %706() /* ty=Tensor[(10, 12, 11), float32] */
}

def @func_3485(%var_3483: Tensor[(10, 12, 11), bool], %var_3484: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), int16], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) {
  @func_3481(%var_3483, %var_3484) /* ty=(Tensor[(10, 12, 11), int16], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */
}

def @func_4535(%var_4533: Tensor[(10, 12, 11), bool], %var_4534: Tensor[(1, 6), uint64]) -> (Tensor[(3, ?, 2), uint64], Tensor[(1, 6), uint64], Tensor[(10, 12, 11), bool]) {
  %728 = fn (%var_4511: Tensor[(10, 12, 11), bool], %var_4522: Tensor[(1, 6), uint64]) -> (Tensor[(3, ?, 2), uint64], Tensor[(1, 6), uint64], Tensor[(10, 12, 11), bool]) {
    %707 = cast(%var_4522, dtype="uint64") /* ty=Tensor[(1, 6), uint64] */;
    %708 = reshape(%707, newshape=[6]) /* ty=Tensor[(6), uint64] */;
    %709 = @func_2468(%708) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
    %710 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
    %711 = %710.0;
    %712 = cast(%var_4511, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
    %713 = shape_of(%711, dtype="int32") /* ty=Tensor[(3), int32] */;
    %714 = cast(%711, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
    %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %716 = logical_or(%714, %715) /* ty=Tensor[(10, 12, 11), bool] */;
    %717 = cast(%var_4511, dtype="int8") /* ty=Tensor[(10, 12, 11), int8] */;
    %718 = shape_of(%711, dtype="int32") /* ty=Tensor[(3), int32] */;
    %719 = cast(%711, dtype="int8") /* ty=Tensor[(10, 12, 11), int8] */;
    %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %721 = add(%719, %720) /* ty=Tensor[(10, 12, 11), int8] */;
    %722 = cast(%721, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
    %723 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
    %724 = cast(%716, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
    %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %726 = %709.2;
    %727 = less(%724, %725) /* ty=Tensor[(10, 12, 11), bool] */;
    (%726, %var_4522, %727)
  };
  %728(%var_4533, %var_4534) /* ty=(Tensor[(3, ?, 2), uint64], Tensor[(1, 6), uint64], Tensor[(10, 12, 11), bool]) */
}

def @func_2468(%var_2460: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) {
  %729 = @func_2392() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %730 = @func_2365() /* ty=Tensor[(10, 12, 11), bool] */;
  %731 = cast(%730, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
  %732 = asinh(%731) /* ty=Tensor[(10, 12, 11), float64] */;
  %733 = cast(%730, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%732, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %737 = cast(%var_2460, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %738 = cast(%var_2460, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %739 = reshape(%737, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
  %740 = reshape(%738, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
  %741 = %729.0;
  %742 = not_equal(%735, %736) /* ty=Tensor[(10, 12, 11), bool] */;
  %743 = @func_1996(%739, %740) /* ty=Tensor[(3, ?, 2), uint64] */;
  (%741, %742, %743, %var_2460)
}

def @func_5071(%var_5070: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(14, 4, 10), float32], Tensor[(560), float32]) {
  %754 = fn (%var_5047: Tensor[(6), uint64]) -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(14, 4, 10), float32], Tensor[(560), float32]) {
    %744 = @func_4023() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
    %745 = cast(%var_5047, dtype="uint64") /* ty=Tensor[(6), uint64] */;
    %746 = reshape(%745, newshape=[6]) /* ty=Tensor[(6), uint64] */;
    %747 = @func_2468(%746) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
    %748 = cast(meta[relay.Constant][62] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
    %749 = reshape(%748, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
    %750 = @func_3443(%749) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(14, 4, 10), bool], Tensor[(14, 4, 10), float32]) */;
    %751 = %744.1;
    %752 = %747.1;
    %753 = %750.2;
    (%751, %752, %var_5047, %753, meta[relay.Constant][62] /* ty=Tensor[(560), float32] */)
  };
  %754(%var_5070) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(14, 4, 10), float32], Tensor[(560), float32]) */
}

def @func_5130() -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(1, 6), uint64]) {
  %761 = fn () -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(1, 6), uint64]) {
    %755 = @func_2331() /* ty=(Tensor[(10, 12, 11), bool],) */;
    %756 = cast(meta[relay.Constant][63] /* ty=Tensor[(1, 6), uint64] */, dtype="uint64") /* ty=Tensor[(1, 6), uint64] */;
    %757 = reshape(%756, newshape=[6]) /* ty=Tensor[(6), uint64] */;
    %758 = @func_4161(%757) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(9, 15, 2), float64], Tensor[(144), uint8], Tensor[(6), uint64], Tensor[(15, 14, 16), float64]) */;
    %759 = %755.0;
    %760 = %758.0;
    (%759, %760, meta[relay.Constant][63] /* ty=Tensor[(1, 6), uint64] */)
  };
  %761() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(1, 6), uint64]) */
}

def @func_6176(%var_6121: Tensor[(6), float64], %var_6122: uint16, %var_6133: Tensor[(560), float64], %var_6134: Tensor[(630), uint16], %var_6166: Tensor[(560), float64]) -> (Tensor[(10, 12, 11), bool], Tensor[(5, 1, 12), uint16], Tensor[(6), float64], uint16, Tensor[(60), uint16], Tensor[(11, 8, 7), uint64], Tensor[(630), uint16], Tensor[(270, 1), float64], Tensor[(10, 12, 11), bool], Tensor[(560), bool]) {
  %762 = @func_3997() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %763 = cast(%var_6121, dtype="float64") /* ty=Tensor[(6), float64] */;
  %764 = cast(%var_6122, dtype="uint16") /* ty=uint16 */;
  %765 = cast(meta[relay.Constant][64] /* ty=Tensor[(60), uint16] */, dtype="uint16") /* ty=Tensor[(60), uint16] */;
  %766 = reshape(%763, newshape=[1, 3, 2]) /* ty=Tensor[(1, 3, 2), float64] */;
  %767 = reshape(%764, newshape=[]) /* ty=uint16 */;
  %768 = reshape(%765, newshape=[30, 2]) /* ty=Tensor[(30, 2), uint16] */;
  %769 = @func_2638(%766, %767, %768) /* ty=(Tensor[(?, 3, 2), uint8], Tensor[(5, 1, 12), uint16], uint16, Tensor[(30, 2), uint16]) */;
  %770 = cast(%var_6133, dtype="float64") /* ty=Tensor[(560), float64] */;
  %771 = cast(%var_6134, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %772 = cast(meta[relay.Constant][65] /* ty=Tensor[(270, 1), float64] */, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
  %773 = reshape(%770, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), float64] */;
  %774 = reshape(%771, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
  %775 = reshape(%772, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
  %776 = @func_1010(%773, %774, %775) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) */;
  %777 = @func_1795() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %778 = cast(%var_6166, dtype="bool") /* ty=Tensor[(560), bool] */;
  %779 = shape_of(%var_6133, dtype="int32") /* ty=Tensor[(1), int32] */;
  %780 = cast(%var_6133, dtype="bool") /* ty=Tensor[(560), bool] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?), bool] */;
  %782 = %762.0;
  %783 = %769.1;
  %784 = %776.1;
  %785 = %777.0;
  %786 = greater_equal(%780, %781) /* ty=Tensor[(560), bool] */;
  (%782, %783, %var_6121, %var_6122, meta[relay.Constant][64] /* ty=Tensor[(60), uint16] */, %784, %var_6134, meta[relay.Constant][65] /* ty=Tensor[(270, 1), float64] */, %785, %786)
}

def @func_1796() -> (Tensor[(10, 12, 11), bool],) {
  %792 = fn () -> (Tensor[(10, 12, 11), bool],) {
    %787 = cast(meta[relay.Constant][67] /* ty=Tensor[(10, 12, 11), int32] */, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
    %788 = shape_of(meta[relay.Constant][66] /* ty=Tensor[(10, 12, 11), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %789 = cast(meta[relay.Constant][66] /* ty=Tensor[(10, 12, 11), int32] */, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
    %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %791 = less_equal(%789, %790) /* ty=Tensor[(10, 12, 11), bool] */;
    (%791,)
  };
  %792() /* ty=(Tensor[(10, 12, 11), bool],) */
}

def @func_6401() -> (Tensor[(10, 12, 11), bool],) {
  %795 = fn () -> (Tensor[(10, 12, 11), bool],) {
    %793 = @func_3304() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
    %794 = %793.0;
    (%794,)
  };
  %795() /* ty=(Tensor[(10, 12, 11), bool],) */
}

def @func_2366() -> Tensor[(10, 12, 11), bool] {
  %797 = fn () -> Tensor[(10, 12, 11), bool] {
    %796 = @func_2268() /* ty=(Tensor[(10, 12, 11), bool],) */;
    %796.0
  };
  %797() /* ty=Tensor[(10, 12, 11), bool] */
}

def @func_6848() -> (Tensor[(10, 12, 11), bool],) {
  @func_6846() /* ty=(Tensor[(10, 12, 11), bool],) */
}

def @func_6752() -> (Tensor[(10, 12, 11), float32],) {
  %798 = @func_4719() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60, 1), uint16], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(3, 2), uint64], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(5, 16, 8), float32], Tensor[(640, 1), int32], Tensor[(10, 12, 11), float32]) */;
  %799 = %798.11;
  (%799,)
}

def @func_6754() -> (Tensor[(10, 12, 11), float32],) {
  @func_6752() /* ty=(Tensor[(10, 12, 11), float32],) */
}

def @func_5322(%var_5319: Tensor[(10, 12, 11), bool], %var_5320: Tensor[(16, 15, 9), float64], %var_5321: Tensor[(270), float64]) -> (Tensor[(10, 12, 11), float64], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(16, 15, 9), bool], uint64, Tensor[(560), float64], Tensor[(630), uint16], Tensor[(270), float64]) {
  %828 = fn (%var_5262: Tensor[(10, 12, 11), bool], %var_5304: Tensor[(16, 15, 9), float64], %var_5316: Tensor[(270), float64]) -> (Tensor[(10, 12, 11), float64], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(16, 15, 9), bool], uint64, Tensor[(560), float64], Tensor[(630), uint16], Tensor[(270), float64]) {
    %800 = @func_4023() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
    %801 = %800.1;
    %802 = cast(%var_5262, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
    %803 = shape_of(%801, dtype="int32") /* ty=Tensor[(3), int32] */;
    %804 = cast(%801, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
    %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %806 = @func_5129() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(1, 6), uint64]) */;
    %807 = cast(meta[relay.Constant][68] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
    %808 = reshape(%807, newshape=[6]) /* ty=Tensor[(6), uint64] */;
    %809 = @func_5069(%808) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(14, 4, 10), float32], Tensor[(560), float32]) */;
    %810 = @func_3902() /* ty=(Tensor[(16, 15, 9), float64],) */;
    %811 = %810.0;
    %812 = cast(%var_5304, dtype="bool") /* ty=Tensor[(16, 15, 9), bool] */;
    %813 = shape_of(%811, dtype="int32") /* ty=Tensor[(3), int32] */;
    %814 = cast(%811, dtype="bool") /* ty=Tensor[(16, 15, 9), bool] */;
    %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %816 = cast(meta[relay.Constant][69] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
    %817 = cast(meta[relay.Constant][70] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
    %818 = cast(%var_5316, dtype="float64") /* ty=Tensor[(270), float64] */;
    %819 = reshape(%816, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), float64] */;
    %820 = reshape(%817, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
    %821 = reshape(%818, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
    %822 = @func_1010(%819, %820, %821) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) */;
    %823 = power(%804, %805) /* ty=Tensor[(10, 12, 11), float64] */;
    %824 = %806.0;
    %825 = %809.2;
    %826 = equal(%814, %815) /* ty=Tensor[(16, 15, 9), bool] */;
    %827 = %822.2;
    (%823, %824, %825, meta[relay.Constant][68] /* ty=Tensor[(6), uint64] */, %826, %827, meta[relay.Constant][69] /* ty=Tensor[(560), float64] */, meta[relay.Constant][70] /* ty=Tensor[(630), uint16] */, %var_5316)
  };
  %828(%var_5319, %var_5320, %var_5321) /* ty=(Tensor[(10, 12, 11), float64], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(16, 15, 9), bool], uint64, Tensor[(560), float64], Tensor[(630), uint16], Tensor[(270), float64]) */
}

def @func_4420(%var_4415: Tensor[(14, 2, 14), uint8], %var_4416: Tensor[(14, 2, 14), uint8], %var_4417: Tensor[(252), bool], %var_4418: Tensor[(144), uint8], %var_4419: Tensor[(6), uint64]) -> (Tensor[(14, 2, 14), uint8], Tensor[(14, 2, 14), float32], Tensor[(320), int16], Tensor[(252), bool], Tensor[(616, 1), uint64], Tensor[(388080), bool], Tensor[(4, 9, 4), uint8], Tensor[(144), uint8], Tensor[(6), uint64]) {
  %850 = fn (%var_4341: Tensor[(14, 2, 14), uint8], %var_4342: Tensor[(14, 2, 14), uint8], %var_4391: Tensor[(252), bool], %var_4403: Tensor[(144), uint8], %var_4404: Tensor[(6), uint64]) -> (Tensor[(14, 2, 14), uint8], Tensor[(14, 2, 14), float32], Tensor[(320), int16], Tensor[(252), bool], Tensor[(616, 1), uint64], Tensor[(388080), bool], Tensor[(4, 9, 4), uint8], Tensor[(144), uint8], Tensor[(6), uint64]) {
    %829 = cast(%var_4342, dtype="uint8") /* ty=Tensor[(14, 2, 14), uint8] */;
    %830 = shape_of(%var_4341, dtype="int32") /* ty=Tensor[(3), int32] */;
    %831 = cast(%var_4341, dtype="uint8") /* ty=Tensor[(14, 2, 14), uint8] */;
    %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %833 = cast(%var_4342, dtype="float32") /* ty=Tensor[(14, 2, 14), float32] */;
    %834 = cast(%var_4391, dtype="bool") /* ty=Tensor[(252), bool] */;
    %835 = cast(meta[relay.Constant][71] /* ty=Tensor[(616, 1), uint64] */, dtype="uint64") /* ty=Tensor[(616, 1), uint64] */;
    %836 = cast(meta[relay.Constant][72] /* ty=Tensor[(388080), bool] */, dtype="bool") /* ty=Tensor[(388080), bool] */;
    %837 = reshape(%834, newshape=[252]) /* ty=Tensor[(252), bool] */;
    %838 = reshape(%835, newshape=[616]) /* ty=Tensor[(616), uint64] */;
    %839 = reshape(%836, newshape=[630, 616]) /* ty=Tensor[(630, 616), bool] */;
    %840 = @func_2252(%837, %838, %839) /* ty=(Tensor[(13, 11, 4), int16], Tensor[(572), int16], Tensor[(320), int16], Tensor[(252), bool], Tensor[(10, 12, 11), bool], Tensor[(630, 616), float64]) */;
    %841 = cast(%var_4403, dtype="uint8") /* ty=Tensor[(144), uint8] */;
    %842 = cast(%var_4404, dtype="uint64") /* ty=Tensor[(6), uint64] */;
    %843 = reshape(%841, newshape=[4, 9, 4]) /* ty=Tensor[(4, 9, 4), uint8] */;
    %844 = reshape(%842, newshape=[1, 6]) /* ty=Tensor[(1, 6), uint64] */;
    %845 = @func_2530(%843, %844) /* ty=(Tensor[(4, 9, 4), uint8], Tensor[(3, ?, 2), uint64], Tensor[(1, 6), uint64], Tensor[(4, 9, 4), uint8], Tensor[(9, 15, 2), float64], Tensor[(2, 280), float64], Tensor[(630), uint16], Tensor[(270), float64]) */;
    %846 = multiply(%831, %832) /* ty=Tensor[(14, 2, 14), uint8] */;
    %847 = asin(%833) /* ty=Tensor[(14, 2, 14), float32] */;
    %848 = %840.2;
    %849 = %845.3;
    (%846, %847, %848, %var_4391, meta[relay.Constant][71] /* ty=Tensor[(616, 1), uint64] */, meta[relay.Constant][72] /* ty=Tensor[(388080), bool] */, %849, %var_4403, %var_4404)
  };
  %850(%var_4415, %var_4416, %var_4417, %var_4418, %var_4419) /* ty=(Tensor[(14, 2, 14), uint8], Tensor[(14, 2, 14), float32], Tensor[(320), int16], Tensor[(252), bool], Tensor[(616, 1), uint64], Tensor[(388080), bool], Tensor[(4, 9, 4), uint8], Tensor[(144), uint8], Tensor[(6), uint64]) */
}

def @func_3446(%var_3444: Tensor[(14, 4, 10), float32]) -> (Tensor[(10, 12, 11), bool], Tensor[(14, 4, 10), bool], Tensor[(14, 4, 10), float32]) {
  @func_3443(%var_3444) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(14, 4, 10), bool], Tensor[(14, 4, 10), float32]) */
}

def @func_6483(%var_6412: Tensor[(7, 10, 12), int16], %var_6434: Tensor[(7, 10, 12), int16]) -> (Tensor[(7, 10, 12), int16], Tensor[(10, 12, 11), bool], Tensor[(4, 15, 3), int32], Tensor[(180), int32], Tensor[(7, 10, 12), float32]) {
  %851 = cast(meta[relay.Constant][73] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %852 = cast(%var_6412, dtype="int16") /* ty=Tensor[(7, 10, 12), int16] */;
  %853 = cast(meta[relay.Constant][73] /* ty=int16 */, dtype="int32") /* ty=int32 */;
  %854 = cast(meta[relay.Constant][74] /* ty=Tensor[(180), int32] */, dtype="int32") /* ty=Tensor[(180), int32] */;
  %855 = reshape(%853, newshape=[]) /* ty=int32 */;
  %856 = reshape(%854, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), int32] */;
  %857 = cast(%var_6434, dtype="int64") /* ty=Tensor[(7, 10, 12), int64] */;
  %858 = shape_of(%var_6412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %859 = cast(%var_6412, dtype="int64") /* ty=Tensor[(7, 10, 12), int64] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %861 = multiply(%859, %860) /* ty=Tensor[(7, 10, 12), int64] */;
  %862 = cast(%861, dtype="float32") /* ty=Tensor[(7, 10, 12), float32] */;
  %863 = maximum(%851, %852) /* ty=Tensor[(7, 10, 12), int16] */;
  %864 = @func_6390() /* ty=Tensor[(10, 12, 11), bool] */;
  %865 = @func_3586(%855, %856) /* ty=Tensor[(4, 15, 3), int32] */;
  %866 = sinh(%862) /* ty=Tensor[(7, 10, 12), float32] */;
  (%863, %864, %865, meta[relay.Constant][74] /* ty=Tensor[(180), int32] */, %866)
}

def @func_6033() -> Tensor[(3, ?, 2), uint64] {
  %868 = fn () -> Tensor[(3, ?, 2), uint64] {
    %867 = @func_3179() /* ty=(Tensor[(10, 12, 11), float32], Tensor[(10, 12, 11), bool], Tensor[(3, ?, 2), uint64], Tensor[(6), uint64]) */;
    %867.2
  };
  %868() /* ty=Tensor[(3, ?, 2), uint64] */
}

def @func_2270() -> (Tensor[(10, 12, 11), bool],) {
  @func_2268() /* ty=(Tensor[(10, 12, 11), bool],) */
}

def @func_5682(%var_5681: Tensor[(2160), float64]) -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(16, 15, 9), bool], Tensor[(2160), float64], Tensor[(270), float64], Tensor[(10, 12, 11), bool]) {
  %883 = fn (%var_5664: Tensor[(2160), float64]) -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(16, 15, 9), bool], Tensor[(2160), float64], Tensor[(270), float64], Tensor[(10, 12, 11), bool]) {
    %869 = @func_3319() /* ty=(Tensor[(10, 12, 11), bool],) */;
    %870 = @func_4023() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
    %871 = %870.0;
    %872 = cast(%871, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
    %873 = cast(%var_5664, dtype="float64") /* ty=Tensor[(2160), float64] */;
    %874 = cast(meta[relay.Constant][75] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
    %875 = reshape(%872, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), bool] */;
    %876 = reshape(%873, newshape=[16, 15, 9]) /* ty=Tensor[(16, 15, 9), float64] */;
    %877 = reshape(%874, newshape=[270]) /* ty=Tensor[(270), float64] */;
    %878 = @func_5318(%875, %876, %877) /* ty=(Tensor[(10, 12, 11), float64], Tensor[(10, 12, 11), bool], Tensor[(6), uint64], Tensor[(6), uint64], Tensor[(16, 15, 9), bool], uint64, Tensor[(560), float64], Tensor[(630), uint16], Tensor[(270), float64]) */;
    %879 = @func_2331() /* ty=(Tensor[(10, 12, 11), bool],) */;
    %880 = %869.0;
    %881 = %878.4;
    %882 = %879.0;
    (%880, %871, %881, %var_5664, meta[relay.Constant][75] /* ty=Tensor[(270), float64] */, %882)
  };
  %883(%var_5681) /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool], Tensor[(16, 15, 9), bool], Tensor[(2160), float64], Tensor[(270), float64], Tensor[(10, 12, 11), bool]) */
}

def @func_3028(%var_3000: uint16, %var_3020: Tensor[(560), float64], %var_3021: Tensor[(630), uint16], %var_3022: Tensor[(270), float64]) -> (Tensor[(10, 12, 11), bool], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60), uint16], Tensor[(9, 15, 2), float64], Tensor[(560), float64], Tensor[(630), uint16], Tensor[(270), float64]) {
  %884 = @func_2392() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %885 = cast(%var_3000, dtype="uint16") /* ty=uint16 */;
  %886 = cast(meta[relay.Constant][76] /* ty=Tensor[(60), uint16] */, dtype="uint16") /* ty=Tensor[(60), uint16] */;
  %887 = reshape(%885, newshape=[]) /* ty=uint16 */;
  %888 = reshape(%886, newshape=[5, 1, 12]) /* ty=Tensor[(5, 1, 12), uint16] */;
  %889 = @func_380(%887, %888) /* ty=(Tensor[(5, 1, 12), uint16],) */;
  %890 = cast(%var_3020, dtype="float64") /* ty=Tensor[(560), float64] */;
  %891 = cast(%var_3021, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %892 = cast(%var_3022, dtype="float64") /* ty=Tensor[(270), float64] */;
  %893 = reshape(%890, newshape=[14, 5, 8]) /* ty=Tensor[(14, 5, 8), float64] */;
  %894 = reshape(%891, newshape=[1, 630]) /* ty=Tensor[(1, 630), uint16] */;
  %895 = reshape(%892, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
  %896 = @func_1010(%893, %894, %895) /* ty=(Tensor[(14, 5, 8), float64], Tensor[(11, 8, 7), uint64], uint64, Tensor[(616), uint64], Tensor[(14, 5, 9), float64], Tensor[(1, 630), uint16], Tensor[(9, 15, 2), float64], Tensor[(270, 1), float64]) */;
  %897 = %884.0;
  %898 = %889.0;
  %899 = %896.6;
  (%897, %898, %var_3000, meta[relay.Constant][76] /* ty=Tensor[(60), uint16] */, %899, %var_3020, %var_3021, %var_3022)
}

def @func_5384() -> (Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) {
  %900 = @func_2392() /* ty=(Tensor[(10, 12, 11), bool], Tensor[(10, 12, 11), bool]) */;
  %901 = @func_2331() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %902 = %900.0;
  %903 = %901.0;
  (%902, %903)
}

def @func_6298(%var_6275: Tensor[(13, 3, 11), float64]) -> Tensor[(13, 3, 11), float64] {
  %904 = cast(%var_6275, dtype="float64") /* ty=Tensor[(13, 3, 11), float64] */;
  %905 = sqrt(%904) /* ty=Tensor[(13, 3, 11), float64] */;
  %906 = cast(%var_6275, dtype="float64") /* ty=Tensor[(13, 3, 11), float64] */;
  %907 = shape_of(%905, dtype="int32") /* ty=Tensor[(3), int32] */;
  %908 = cast(%905, dtype="float64") /* ty=Tensor[(13, 3, 11), float64] */;
  %909 = dyn.reshape(%906, %907, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%908, %909) /* ty=Tensor[(13, 3, 11), float64] */
}

def @func_6681(%var_6669: Tensor[(10, 12, 11), bool]) -> (Tensor[(10, 12, 11), bool],) {
  %910 = @func_2331() /* ty=(Tensor[(10, 12, 11), bool],) */;
  %911 = %910.0;
  %912 = cast(%var_6669, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %913 = shape_of(%911, dtype="int32") /* ty=Tensor[(3), int32] */;
  %914 = cast(%911, dtype="bool") /* ty=Tensor[(10, 12, 11), bool] */;
  %915 = dyn.reshape(%912, %913, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %916 = greater_equal(%914, %915) /* ty=Tensor[(10, 12, 11), bool] */;
  (%916,)
}

def @func_4750(%var_4748: Tensor[(6, 3, 9), uint32], %var_4749: Tensor[(6, 3, 9), uint32]) -> (Tensor[(6, 3, 9), uint32],) {
  %922 = fn (%var_4730: Tensor[(6, 3, 9), uint32], %var_4731: Tensor[(6, 3, 9), uint32]) -> (Tensor[(6, 3, 9), uint32],) {
    %917 = cast(%var_4731, dtype="uint32") /* ty=Tensor[(6, 3, 9), uint32] */;
    %918 = shape_of(%var_4730, dtype="int32") /* ty=Tensor[(3), int32] */;
    %919 = cast(%var_4730, dtype="uint32") /* ty=Tensor[(6, 3, 9), uint32] */;
    %920 = dyn.reshape(%917, %918, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %921 = bitwise_or(%919, %920) /* ty=Tensor[(6, 3, 9), uint32] */;
    (%921,)
  };
  %922(%var_4748, %var_4749) /* ty=(Tensor[(6, 3, 9), uint32],) */
}

def @func_6684(%var_6682: Tensor[(10, 12, 11), bool]) -> (Tensor[(10, 12, 11), bool],) {
  @func_6681(%var_6682) /* ty=(Tensor[(10, 12, 11), bool],) */
}

def @func_2333() -> (Tensor[(10, 12, 11), bool],) {
  @func_2331() /* ty=(Tensor[(10, 12, 11), bool],) */
}

def @func_5762(%var_5757: Tensor[(7, 10, 11), bool], %var_5758: Tensor[(7, 10, 11), bool], %var_5759: Tensor[(1320), bool], %var_5760: uint16, %var_5761: Tensor[(60), uint16]) -> (Tensor[(15, 14, 16), float64], Tensor[(72), float32], Tensor[(1320), bool], Tensor[(6, 1), uint64], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60), uint16], Tensor[(7, 10, 11), float32]) {
  %946 = fn (%var_5691: Tensor[(7, 10, 11), bool], %var_5692: Tensor[(7, 10, 11), bool], %var_5728: Tensor[(1320), bool], %var_5739: uint16, %var_5740: Tensor[(60), uint16]) -> (Tensor[(15, 14, 16), float64], Tensor[(72), float32], Tensor[(1320), bool], Tensor[(6, 1), uint64], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60), uint16], Tensor[(7, 10, 11), float32]) {
    %923 = cast(meta[relay.Constant][77] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
    %924 = cast(%var_5728, dtype="bool") /* ty=Tensor[(1320), bool] */;
    %925 = cast(meta[relay.Constant][78] /* ty=Tensor[(6, 1), uint64] */, dtype="uint64") /* ty=Tensor[(6, 1), uint64] */;
    %926 = reshape(%923, newshape=[3, 8, 3]) /* ty=Tensor[(3, 8, 3), float32] */;
    %927 = reshape(%924, newshape=[1320]) /* ty=Tensor[(1320), bool] */;
    %928 = reshape(%925, newshape=[6]) /* ty=Tensor[(6), uint64] */;
    %929 = @func_3880(%926, %927, %928) /* ty=(Tensor[(3, 8, 3), float32], Tensor[(15, 14, 16), float64], Tensor[(14, 4, 10), float32], Tensor[(560), float32], Tensor[(3, ?, 2), uint64], Tensor[(1320), bool], Tensor[(6), uint64]) */;
    %930 = cast(%var_5739, dtype="uint16") /* ty=uint16 */;
    %931 = cast(%var_5740, dtype="uint16") /* ty=Tensor[(60), uint16] */;
    %932 = reshape(%930, newshape=[]) /* ty=uint16 */;
    %933 = reshape(%931, newshape=[5, 1, 12]) /* ty=Tensor[(5, 1, 12), uint16] */;
    %934 = @func_380(%932, %933) /* ty=(Tensor[(5, 1, 12), uint16],) */;
    %935 = cast(%var_5692, dtype="bool") /* ty=Tensor[(7, 10, 11), bool] */;
    %936 = shape_of(%var_5691, dtype="int32") /* ty=Tensor[(3), int32] */;
    %937 = cast(%var_5691, dtype="bool") /* ty=Tensor[(7, 10, 11), bool] */;
    %938 = dyn.reshape(%935, %936, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %939 = logical_or(%937, %938) /* ty=Tensor[(7, 10, 11), bool] */;
    %940 = cast(%939, dtype="float32") /* ty=Tensor[(7, 10, 11), float32] */;
    %941 = sin(%940) /* ty=Tensor[(7, 10, 11), float32] */;
    %942 = cast(%941, dtype="float32") /* ty=Tensor[(7, 10, 11), float32] */;
    %943 = %929.1;
    %944 = %934.0;
    %945 = atan(%942) /* ty=Tensor[(7, 10, 11), float32] */;
    (%943, meta[relay.Constant][77] /* ty=Tensor[(72), float32] */, %var_5728, meta[relay.Constant][78] /* ty=Tensor[(6, 1), uint64] */, %944, %var_5739, %var_5740, %945)
  };
  %946(%var_5757, %var_5758, %var_5759, %var_5760, %var_5761) /* ty=(Tensor[(15, 14, 16), float64], Tensor[(72), float32], Tensor[(1320), bool], Tensor[(6, 1), uint64], Tensor[(5, 1, 12), uint16], uint16, Tensor[(60), uint16], Tensor[(7, 10, 11), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen151/build/output.py:2227: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen151/build/output.py", line 2232, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(90) tvmgen_default_fused_reshape_multiply_kernel0(int64_t* __restrict__ T_multiply, int64_t* __restrict__ placeholder, int64_t* __restrict__ placeholder1) {
  T_multiply[(((int)threadIdx.x))] = (placeholder[(((int)threadIdx.x))] * placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

