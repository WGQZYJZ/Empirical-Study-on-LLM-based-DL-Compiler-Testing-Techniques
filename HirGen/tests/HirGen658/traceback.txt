==========mod==========
#[version = "0.0.5"]
def @func_9245() -> Tensor[(12, 13, 3), float32] {
  %0 = @func_5992() /* ty=Tensor[(12, 1, 3), float64] */;
  %1 = cast(%0, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 13, 3), float64] */, dtype="float32") /* ty=Tensor[(12, 13, 3), float32] */;
  maximum(%1, %2) /* ty=Tensor[(12, 13, 3), float32] */
}

def @func_7637() -> (Tensor[(280), float64], Tensor[(4, 5, 14), float64]) {
  %3 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %4 = @func_3878() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %5 = %3.2;
  %6 = %4.0;
  (%5, %6)
}

def @func_9589() -> Tensor[(4, 5, 14), float64] {
  @func_4074() /* ty=Tensor[(4, 5, 14), float64] */
}

def @func_10728() -> Tensor[(280), float64] {
  %7 = @func_10208() /* ty=(Tensor[(280), float64], Tensor[(125), float64]) */;
  %7.0
}

def @func_6050() -> (Tensor[(12, 1, 3), float32], Tensor[(12, ?, 3), float64], Tensor[(360), float32]) {
  %8 = @func_4202() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %9 = %8.0;
  %10 = cast(%9, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %12 = reshape(%10, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float32] */;
  %13 = reshape(%11, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %14 = @func_5322(%12, %13) /* ty=(Tensor[(125), int8], Tensor[(360), float32], Tensor[(12, ?, 3), float64]) */;
  %15 = %14.2;
  (%9, %15, meta[relay.Constant][1] /* ty=Tensor[(360), float32] */)
}

def @func_5021(%var_5010: Tensor[(125), float32]) -> (Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(125), float64]) {
  %16 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %17 = @func_4843() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64]) */;
  %18 = @func_3757() /* ty=(Tensor[(280), float64], Tensor[(125), float32]) */;
  %19 = %18.1;
  %20 = cast(%var_5010, dtype="float64") /* ty=Tensor[(125), float64] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(1), int32] */;
  %22 = cast(%19, dtype="float64") /* ty=Tensor[(125), float64] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?), float64] */;
  %24 = %16.0;
  %25 = %17.1;
  %26 = floor_mod(%22, %23) /* ty=Tensor[(125), float64] */;
  (%24, %25, %26)
}

def @func_8587() -> (Tensor[(12, 1, 3), float32],) {
  %27 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %28 = %27.0;
  %29 = cast(%28, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %30 = atanh(%29) /* ty=Tensor[(12, 1, 3), float32] */;
  (%30,)
}

def @func_4100() -> Tensor[(12, 1, 3), float64] {
  %31 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %32 = %31.2;
  %33 = cast(%32, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
  asin(%33) /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_5650() -> (Tensor[(280), float64], Tensor[(125), int8], Tensor[(36), float32], Tensor[(360), float32], Tensor[(12, 1, 3), float32]) {
  %34 = @func_3757() /* ty=(Tensor[(280), float64], Tensor[(125), float32]) */;
  %35 = cast(meta[relay.Constant][2] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %36 = cast(meta[relay.Constant][3] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %37 = reshape(%35, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float32] */;
  %38 = reshape(%36, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %39 = @func_5322(%37, %38) /* ty=(Tensor[(125), int8], Tensor[(360), float32], Tensor[(12, ?, 3), float64]) */;
  %40 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %41 = %34.0;
  %42 = %39.0;
  %43 = %40.1;
  (%41, %42, meta[relay.Constant][2] /* ty=Tensor[(36), float32] */, meta[relay.Constant][3] /* ty=Tensor[(360), float32] */, %43)
}

def @func_10261() -> Tensor[(12, 1, 3), float64] {
  @func_7967() /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_6911() -> Tensor[(280), float64] {
  %44 = @func_5650() /* ty=(Tensor[(280), float64], Tensor[(125), int8], Tensor[(36), float32], Tensor[(360), float32], Tensor[(12, 1, 3), float32]) */;
  %44.0
}

def @func_2583() -> (Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) {
  %45 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %46 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %47 = cast(meta[relay.Constant][4] /* ty=Tensor[(125), float64] */, dtype="float64") /* ty=Tensor[(125), float64] */;
  %48 = reshape(%47, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
  %49 = %45.0;
  %50 = %46.0;
  %51 = @func_951(%48) /* ty=Tensor[(5, 5, 5), float32] */;
  (%49, %50, %51, meta[relay.Constant][4] /* ty=Tensor[(125), float64] */)
}

def @func_8288() -> (Tensor[(4, 5, 14), float64], Tensor[(125), float32], Tensor[(280), float64], Tensor[(5, 5, 5), float32]) {
  %52 = @func_6480() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %53 = @func_6475() /* ty=(Tensor[(125), float32],) */;
  %54 = @func_3577() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(280), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) */;
  %55 = %53.0;
  %56 = cast(%55, dtype="float64") /* ty=Tensor[(125), float64] */;
  %57 = reshape(%56, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
  %58 = %52.0;
  %59 = %54.1;
  %60 = @func_951(%57) /* ty=Tensor[(5, 5, 5), float32] */;
  (%58, %55, %59, %60)
}

def @func_9319(%var_9311: Tensor[(15, 13, 12), float64]) -> (Tensor[(15, 13, 12), float64],) {
  %61 = cast(%var_9311, dtype="float64") /* ty=Tensor[(15, 13, 12), float64] */;
  %62 = exp(%61) /* ty=Tensor[(15, 13, 12), float64] */;
  (%62,)
}

def @func_8362() -> (Tensor[(12, 1, 3), float32],) {
  %63 = @func_4202() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %64 = %63.0;
  (%64,)
}

def @func_11795() -> (Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) {
  %65 = @func_3194() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64], Tensor[(12, 1, 3), float32]) */;
  %66 = @func_11546() /* ty=Tensor[(12, 1, 3), float32] */;
  %67 = %65.0;
  (%66, %67)
}

def @func_6480() -> (Tensor[(4, 5, 14), float64],) {
  %68 = @func_2945() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %69 = %68.0;
  (%69,)
}

def @func_10624(%var_10620: Tensor[(12, 7, 15), float64]) -> (Tensor[(12, 7, 15), float64],) {
  %70 = cast(%var_10620, dtype="float64") /* ty=Tensor[(12, 7, 15), float64] */;
  %71 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(12, 7, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 7, 15), float64] */, dtype="float64") /* ty=Tensor[(12, 7, 15), float64] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %74 = power(%72, %73) /* ty=Tensor[(12, 7, 15), float64] */;
  (%74,)
}

def @func_4597(%var_4587: Tensor[(12, 10, 3), float32]) -> (Tensor[(12, 1, 3), float32], Tensor[(125), int8], Tensor[(12, 10, 3), int8]) {
  %75 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %76 = @func_3288() /* ty=(Tensor[(125), float32], Tensor[(4, 5, 14), float64]) */;
  %77 = %76.0;
  %78 = cast(meta[relay.Constant][6] /* ty=Tensor[(125), float32] */, dtype="int8") /* ty=Tensor[(125), int8] */;
  %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(1), int32] */;
  %80 = cast(%77, dtype="int8") /* ty=Tensor[(125), int8] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?), int8] */;
  %82 = @func_3094() /* ty=(Tensor[(125), float64], Tensor[(12, ?, 3), int8], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %83 = %82.2;
  %84 = cast(%83, dtype="int8") /* ty=Tensor[(12, 1, 3), int8] */;
  %85 = cast(%var_4587, dtype="int8") /* ty=Tensor[(12, 10, 3), int8] */;
  %86 = %75.0;
  %87 = subtract(%80, %81) /* ty=Tensor[(125), int8] */;
  %88 = bitwise_xor(%84, %85) /* ty=Tensor[(12, 10, 3), int8] */;
  (%86, %87, %88)
}

def @func_10143() -> (Tensor[(4, 5, 14), float64],) {
  %89 = @func_9790() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %90 = %89.0;
  (%90,)
}

def @func_9102() -> (Tensor[(125), float32],) {
  %91 = @func_6475() /* ty=(Tensor[(125), float32],) */;
  %92 = %91.0;
  (%92,)
}

def @func_10787() -> (Tensor[(4, 5, 14), float64],) {
  %93 = @func_10691() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64]) */;
  %94 = %93.0;
  (%94,)
}

def @func_11661() -> Tensor[(12, 1, 3), float32] {
  @func_11527() /* ty=Tensor[(12, 1, 3), float32] */
}

def @func_5322(%var_5302: Tensor[(12, 1, 3), float32], %var_5309: Tensor[(360), float32]) -> (Tensor[(125), int8], Tensor[(360), float32], Tensor[(12, ?, 3), float64]) {
  %95 = cast(%var_5309, dtype="float32") /* ty=Tensor[(360), float32] */;
  %96 = reshape(%95, newshape=[12, 10, 3]) /* ty=Tensor[(12, 10, 3), float32] */;
  %97 = @func_4597(%96) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(125), int8], Tensor[(12, 10, 3), int8]) */;
  %98 = @func_4895() /* ty=(Tensor[(10, 5, 11), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32]) */;
  %99 = %98.2;
  %100 = cast(%var_5302, dtype="int64") /* ty=Tensor[(12, 1, 3), int64] */;
  %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%99, dtype="int64") /* ty=Tensor[(12, 1, 3), int64] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %104 = logical_xor(%102, %103) /* ty=Tensor[(12, ?, 3), int64] */;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(12, ?, 3), float64] */;
  %106 = %97.1;
  %107 = acosh(%105) /* ty=Tensor[(12, ?, 3), float64] */;
  (%106, %var_5309, %107)
}

def @func_3194() -> (Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64], Tensor[(12, 1, 3), float32]) {
  %108 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
  %109 = @func_3094() /* ty=(Tensor[(125), float64], Tensor[(12, ?, 3), int8], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %110 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
  %111 = cast(meta[relay.Constant][7] /* ty=Tensor[(125), float64] */, dtype="float64") /* ty=Tensor[(125), float64] */;
  %112 = reshape(%111, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
  %113 = %108.1;
  %114 = cast(%113, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %115 = reshape(%114, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float32] */;
  %116 = @func_3035(%115) /* ty=(Tensor[(12, ?, 3), uint32], Tensor[(12, 1, 3), float32], Tensor[(280), float64]) */;
  %117 = %109.3;
  %118 = %110.1;
  %119 = @func_951(%112) /* ty=Tensor[(5, 5, 5), float32] */;
  %120 = %116.1;
  (%113, %117, %118, %119, meta[relay.Constant][7] /* ty=Tensor[(125), float64] */, %120)
}

def @func_3396() -> (Tensor[(12, 1, 3), float32],) {
  %121 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %122 = %121.0;
  (%122,)
}

def @func_6319() -> (Tensor[(4, 5, 14), uint32],) {
  %123 = @func_2945() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %124 = %123.0;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %126 = sinh(%125) /* ty=Tensor[(4, 5, 14), float64] */;
  %127 = cast(%126, dtype="uint32") /* ty=Tensor[(4, 5, 14), uint32] */;
  %128 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%124, dtype="uint32") /* ty=Tensor[(4, 5, 14), uint32] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %131 = right_shift(%129, %130) /* ty=Tensor[(4, 5, 14), uint32] */;
  (%131,)
}

def @func_8065() -> (Tensor[(4, 5, 14), float64],) {
  %132 = @func_7637() /* ty=(Tensor[(280), float64], Tensor[(4, 5, 14), float64]) */;
  %133 = %132.1;
  %134 = cast(%133, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %135 = acos(%134) /* ty=Tensor[(4, 5, 14), float64] */;
  (%135,)
}

def @func_11961(%var_11892: uint8, %var_11915: Tensor[(1, 2340), float64]) -> (Tensor[(14, 10, 11), bool], Tensor[(14, 10, 11), float32], Tensor[(15, 13, 12), float64], Tensor[(1, 2340), float64]) {
  %136 = cast(%var_11892, dtype="uint8") /* ty=uint8 */;
  %137 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 10, 11), uint8] */, dtype="uint8") /* ty=Tensor[(14, 10, 11), uint8] */;
  %138 = bitwise_and(%136, %137) /* ty=Tensor[(14, 10, 11), uint8] */;
  %139 = cast(%138, dtype="bool") /* ty=Tensor[(14, 10, 11), bool] */;
  %140 = cast(%var_11892, dtype="bool") /* ty=bool */;
  %141 = cast(%138, dtype="float32") /* ty=Tensor[(14, 10, 11), float32] */;
  %142 = cast(%var_11915, dtype="float64") /* ty=Tensor[(1, 2340), float64] */;
  %143 = reshape(%142, newshape=[15, 13, 12]) /* ty=Tensor[(15, 13, 12), float64] */;
  %144 = @func_9319(%143) /* ty=(Tensor[(15, 13, 12), float64],) */;
  %145 = cast(%var_11892, dtype="float64") /* ty=float64 */;
  %146 = cast(%var_11915, dtype="float64") /* ty=Tensor[(1, 2340), float64] */;
  %147 = less_equal(%139, %140) /* ty=Tensor[(14, 10, 11), bool] */;
  %148 = log10(%141) /* ty=Tensor[(14, 10, 11), float32] */;
  %149 = %144.0;
  %150 = divide(%145, %146) /* ty=Tensor[(1, 2340), float64] */;
  (%147, %148, %149, %150)
}

def @func_6475() -> (Tensor[(125), float32],) {
  %151 = @func_4292() /* ty=Tensor[(125), float32] */;
  (%151,)
}

def @func_8682() -> (Tensor[(576), float32],) {
  %152 = @func_6746() /* ty=(Tensor[(576), float32],) */;
  %153 = %152.0;
  (%153,)
}

def @func_2997() -> (Tensor[(280), float64], Tensor[(12, 1, 3), float32]) {
  %154 = @func_2910() /* ty=(Tensor[(280), float64],) */;
  %155 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
  %156 = %154.0;
  %157 = %155.1;
  (%156, %157)
}

def @func_5968() -> (Tensor[(9, 3, 3), float64], Tensor[(125), float32], Tensor[(12, 1, 3), float64]) {
  %158 = @func_4314() /* ty=Tensor[(9, 3, 3), int32] */;
  %159 = cast(%158, dtype="float64") /* ty=Tensor[(9, 3, 3), float64] */;
  %160 = acos(%159) /* ty=Tensor[(9, 3, 3), float64] */;
  %161 = @func_4292() /* ty=Tensor[(125), float32] */;
  %162 = @func_4100() /* ty=Tensor[(12, 1, 3), float64] */;
  (%160, %161, %162)
}

def @func_11608() -> (Tensor[(125), float32], Tensor[(12, 3, 3), float32]) {
  %163 = @func_9102() /* ty=(Tensor[(125), float32],) */;
  %164 = @func_9366() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64]) */;
  %165 = %164.1;
  %166 = cast(%165, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %167 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 3, 3), float64] */, dtype="float32") /* ty=Tensor[(12, 3, 3), float32] */;
  %168 = %163.0;
  %169 = minimum(%166, %167) /* ty=Tensor[(12, 3, 3), float32] */;
  (%168, %169)
}

def @func_3906(%var_3883: Tensor[(1485), float64]) -> (Tensor[(1485), float32], Tensor[(12, 1, 3), float32]) {
  %170 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
  %171 = %170.3;
  %172 = cast(%var_3883, dtype="int64") /* ty=Tensor[(1485), int64] */;
  %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(1), int32] */;
  %174 = cast(%171, dtype="int64") /* ty=Tensor[(1485), int64] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?), int64] */;
  %176 = maximum(%174, %175) /* ty=Tensor[(1485), int64] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(1485), float32] */;
  %178 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %179 = asin(%177) /* ty=Tensor[(1485), float32] */;
  %180 = %178.0;
  (%179, %180)
}

def @func_11297() -> (Tensor[(12, 1, 3), float32],) {
  %181 = @func_6412() /* ty=Tensor[(12, 1, 3), float32] */;
  (%181,)
}

def @func_3368() -> (Tensor[(280), float64], Tensor[(12, 3, 3), int64], Tensor[(11, 15, 9), float64]) {
  %182 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
  %183 = @func_2818() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %184 = %183.0;
  %185 = cast(%184, dtype="int64") /* ty=Tensor[(12, 1, 3), int64] */;
  %186 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 3, 3), float32] */, dtype="int64") /* ty=Tensor[(12, 3, 3), int64] */;
  %187 = %182.0;
  %188 = cast(%187, dtype="float64") /* ty=Tensor[(280), float64] */;
  %189 = reshape(%188, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %190 = @func_405(%189) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) */;
  %191 = bitwise_and(%185, %186) /* ty=Tensor[(12, 3, 3), int64] */;
  %192 = %190.1;
  (%187, %191, %192)
}

def @func_2945() -> (Tensor[(4, 5, 14), float64],) {
  %193 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %194 = %193.1;
  (%194,)
}

def @func_7679() -> (Tensor[(125), float64],) {
  %195 = @func_7264() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(125), float32]) */;
  %196 = %195.1;
  %197 = cast(%196, dtype="float64") /* ty=Tensor[(125), float64] */;
  %198 = sin(%197) /* ty=Tensor[(125), float64] */;
  (%198,)
}

def @func_6786(%var_6767: Tensor[(7, 6, 6), float64], %var_6776: Tensor[(125), float64]) -> (Tensor[(7, 6, 6), float64], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) {
  %199 = cast(%var_6767, dtype="float64") /* ty=Tensor[(7, 6, 6), float64] */;
  %200 = cast(%var_6776, dtype="float64") /* ty=Tensor[(125), float64] */;
  %201 = reshape(%200, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
  %202 = cast(%var_6776, dtype="float64") /* ty=Tensor[(125), float64] */;
  %203 = tan(%199) /* ty=Tensor[(7, 6, 6), float64] */;
  %204 = @func_951(%201) /* ty=Tensor[(5, 5, 5), float32] */;
  %205 = log(%202) /* ty=Tensor[(125), float64] */;
  (%203, %204, %205)
}

def @func_5910() -> (Tensor[(12, 3, 3), int64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) {
  %206 = @func_3368() /* ty=(Tensor[(280), float64], Tensor[(12, 3, 3), int64], Tensor[(11, 15, 9), float64]) */;
  %207 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %208 = @func_4202() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %209 = %206.1;
  %210 = %207.2;
  %211 = %208.0;
  (%209, %210, %211)
}

def @func_3577() -> (Tensor[(4, 5, 14), float64], Tensor[(280), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) {
  %212 = @func_2945() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %213 = @func_2910() /* ty=(Tensor[(280), float64],) */;
  %214 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
  %215 = @func_2818() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %216 = %212.0;
  %217 = %213.0;
  %218 = %214.1;
  %219 = %215.0;
  (%216, %217, %218, %219)
}

def @func_2497() -> (Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) {
  %220 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 1, 3), float32] */, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %221 = cast(meta[relay.Constant][12] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %222 = reshape(%221, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %223 = @func_405(%222) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) */;
  %224 = sqrt(%220) /* ty=Tensor[(12, 1, 3), float32] */;
  %225 = %223.0;
  (%224, %225, meta[relay.Constant][12] /* ty=Tensor[(280), float64] */)
}

def @func_7377(%var_7365: Tensor[(8, 9, 2), float64]) -> (Tensor[(8, 9, 2), float64],) {
  %226 = cast(%var_7365, dtype="float64") /* ty=Tensor[(8, 9, 2), float64] */;
  %227 = log(%226) /* ty=Tensor[(8, 9, 2), float64] */;
  (%227,)
}

def @func_5234() -> (Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(11, 15, 9), float64], Tensor[(12, 3, 3), int64]) {
  %228 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %229 = @func_4843() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64]) */;
  %230 = %229.1;
  %231 = cast(%230, dtype="float64") /* ty=Tensor[(11, 15, 9), float64] */;
  %232 = reshape(%231, newshape=[11, 15, 9]) /* ty=Tensor[(11, 15, 9), float64] */;
  %233 = @func_3368() /* ty=(Tensor[(280), float64], Tensor[(12, 3, 3), int64], Tensor[(11, 15, 9), float64]) */;
  %234 = %228.0;
  %235 = @func_72(%232) /* ty=Tensor[(11, 15, 9), float64] */;
  %236 = %233.1;
  (%234, %230, %235, %236)
}

def @func_3523(%var_3462: Tensor[(12, 16, 3), float32]) -> (Tensor[(12, 16, 3), int16], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(12, 16, 3), uint16], Tensor[(125), float64]) {
  %237 = @func_3396() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %238 = %237.0;
  %239 = cast(%238, dtype="int16") /* ty=Tensor[(12, 1, 3), int16] */;
  %240 = cast(%var_3462, dtype="int16") /* ty=Tensor[(12, 16, 3), int16] */;
  %241 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
  %242 = @func_2818() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %243 = @func_2818() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %244 = cast(%var_3462, dtype="float64") /* ty=Tensor[(12, 16, 3), float64] */;
  %245 = log(%244) /* ty=Tensor[(12, 16, 3), float64] */;
  %246 = cast(%245, dtype="float32") /* ty=Tensor[(12, 16, 3), float32] */;
  %247 = acos(%246) /* ty=Tensor[(12, 16, 3), float32] */;
  %248 = cast(%245, dtype="uint16") /* ty=Tensor[(12, 16, 3), uint16] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%247, dtype="uint16") /* ty=Tensor[(12, 16, 3), uint16] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %252 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
  %253 = left_shift(%239, %240) /* ty=Tensor[(12, 16, 3), int16] */;
  %254 = %241.1;
  %255 = %242.0;
  %256 = %243.0;
  %257 = multiply(%250, %251) /* ty=Tensor[(12, 16, 3), uint16] */;
  %258 = %252.2;
  (%253, %254, %255, %256, %257, %258)
}

def @func_4292() -> Tensor[(125), float32] {
  %259 = @func_3757() /* ty=(Tensor[(280), float64], Tensor[(125), float32]) */;
  %259.1
}

def @func_10477() -> Tensor[(12, 1, 3), float32] {
  %260 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
  %260.1
}

def @func_11474() -> (Tensor[(4, 5, 14), float64],) {
  %261 = @func_10143() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %262 = %261.0;
  (%262,)
}

def @func_4614() -> (Tensor[(280), float64], Tensor[(12, 1, 3), float32]) {
  %263 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
  %264 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %265 = %263.0;
  %266 = %264.2;
  (%265, %266)
}

def @func_4267() -> Tensor[(125), float32] {
  %267 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
  %267.0
}

def @func_8614() -> (Tensor[(280), float64], Tensor[(125), uint64]) {
  %268 = @func_5840() /* ty=(Tensor[(125), float32], Tensor[(576), float32], Tensor[(576), float32]) */;
  %269 = %268.0;
  %270 = cast(meta[relay.Constant][13] /* ty=Tensor[(125), float32] */, dtype="uint64") /* ty=Tensor[(125), uint64] */;
  %271 = shape_of(%269, dtype="int32") /* ty=Tensor[(1), int32] */;
  %272 = cast(%269, dtype="uint64") /* ty=Tensor[(125), uint64] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %274 = @func_6583() /* ty=Tensor[(280), float64] */;
  %275 = right_shift(%272, %273) /* ty=Tensor[(125), uint64] */;
  (%274, %275)
}

def @func_8454(%var_8432: Tensor[(108, 2), float32]) -> (Tensor[(280), float32], Tensor[(12, 6, 3), bool]) {
  %276 = @func_2910() /* ty=(Tensor[(280), float64],) */;
  %277 = %276.0;
  %278 = cast(%277, dtype="float32") /* ty=Tensor[(280), float32] */;
  %279 = cast(%var_8432, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
  %280 = reshape(%279, newshape=[216]) /* ty=Tensor[(216), float32] */;
  %281 = @func_7755(%280) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 6, 3), bool], Tensor[(216), float32], Tensor[(12, 1, 3), float32]) */;
  %282 = %281.2;
  %283 = cast(%var_8432, dtype="bool") /* ty=Tensor[(108, 2), bool] */;
  %284 = shape_of(%282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%282, dtype="bool") /* ty=Tensor[(12, 6, 3), bool] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %287 = sin(%278) /* ty=Tensor[(280), float32] */;
  %288 = less_equal(%285, %286) /* ty=Tensor[(12, 6, 3), bool] */;
  (%287, %288)
}

def @func_10079(%var_10065: bool, %var_10066: Tensor[(15, 3, 15), bool]) -> Tensor[(15, 3, 15), bool] {
  %289 = cast(%var_10065, dtype="bool") /* ty=bool */;
  %290 = cast(%var_10066, dtype="bool") /* ty=Tensor[(15, 3, 15), bool] */;
  logical_and(%289, %290) /* ty=Tensor[(15, 3, 15), bool] */
}

def @func_10459() -> (Tensor[(1485), float64], Tensor[(12, ?, 3), float32]) {
  %291 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
  %292 = @func_5910() /* ty=(Tensor[(12, 3, 3), int64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) */;
  %293 = %292.1;
  %294 = cast(%293, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %295 = reshape(%294, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float32] */;
  %296 = @func_3035(%295) /* ty=(Tensor[(12, ?, 3), uint32], Tensor[(12, 1, 3), float32], Tensor[(280), float64]) */;
  %297 = %296.1;
  %298 = cast(%297, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %299 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%293, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %302 = %291.3;
  %303 = power(%300, %301) /* ty=Tensor[(12, ?, 3), float32] */;
  (%302, %303)
}

def @func_4202() -> (Tensor[(12, 1, 3), float32],) {
  %304 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
  %305 = %304.1;
  (%305,)
}

def @func_11516() -> (Tensor[(12, 1, 3), float32], Tensor[(12, 13, 3), float32], Tensor[(11, 15, 9), float64]) {
  %306 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %307 = @func_9245() /* ty=Tensor[(12, 13, 3), float32] */;
  %308 = cast(%307, dtype="float32") /* ty=Tensor[(12, 13, 3), float32] */;
  %309 = cos(%308) /* ty=Tensor[(12, 13, 3), float32] */;
  %310 = cast(%309, dtype="float32") /* ty=Tensor[(12, 13, 3), float32] */;
  %311 = @func_3368() /* ty=(Tensor[(280), float64], Tensor[(12, 3, 3), int64], Tensor[(11, 15, 9), float64]) */;
  %312 = %306.0;
  %313 = acosh(%310) /* ty=Tensor[(12, 13, 3), float32] */;
  %314 = %311.2;
  (%312, %313, %314)
}

def @func_3035(%var_3013: Tensor[(12, 1, 3), float32]) -> (Tensor[(12, ?, 3), uint32], Tensor[(12, 1, 3), float32], Tensor[(280), float64]) {
  %315 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %316 = %315.0;
  %317 = cast(%var_3013, dtype="uint32") /* ty=Tensor[(12, 1, 3), uint32] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%316, dtype="uint32") /* ty=Tensor[(12, 1, 3), uint32] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %321 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
  %322 = @func_2910() /* ty=(Tensor[(280), float64],) */;
  %323 = minimum(%319, %320) /* ty=Tensor[(12, ?, 3), uint32] */;
  %324 = %321.0;
  %325 = %322.0;
  (%323, %324, %325)
}

def @func_8231() -> (Tensor[(4, 5, 14), float64], Tensor[(9, 3, 3), float32], Tensor[(12, 1, 3), float64], Tensor[(5, 5, 5), float32], Tensor[(25, 5), float64]) {
  %326 = @func_6118() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %327 = @func_4314() /* ty=Tensor[(9, 3, 3), int32] */;
  %328 = cast(%327, dtype="float32") /* ty=Tensor[(9, 3, 3), float32] */;
  %329 = cast(meta[relay.Constant][14] /* ty=Tensor[(25, 5), float64] */, dtype="float64") /* ty=Tensor[(25, 5), float64] */;
  %330 = reshape(%329, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
  %331 = %326.0;
  %332 = cos(%328) /* ty=Tensor[(9, 3, 3), float32] */;
  %333 = @func_5992() /* ty=Tensor[(12, 1, 3), float64] */;
  %334 = @func_951(%330) /* ty=Tensor[(5, 5, 5), float32] */;
  (%331, %332, %333, %334, meta[relay.Constant][14] /* ty=Tensor[(25, 5), float64] */)
}

def @func_11256() -> (Tensor[(12, 1, 3), float32], Tensor[(10, 5, 11), float32]) {
  %335 = @func_8587() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %336 = @func_10893() /* ty=(Tensor[(10, 5, 11), float32],) */;
  %337 = %335.0;
  %338 = %336.0;
  (%337, %338)
}

def @func_4414() -> Tensor[(280), float64] {
  %339 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
  %339.0
}

def @func_9366() -> (Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64]) {
  %340 = @func_8231() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(9, 3, 3), float32], Tensor[(12, 1, 3), float64], Tensor[(5, 5, 5), float32], Tensor[(25, 5), float64]) */;
  %341 = @func_4074() /* ty=Tensor[(4, 5, 14), float64] */;
  %342 = %340.2;
  (%341, %342)
}

def @func_3801(%var_3794: Tensor[(12, 6, 3), float32]) -> Tensor[(12, 6, 3), bool] {
  %343 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %344 = %343.0;
  %345 = cast(%344, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %346 = cast(%var_3794, dtype="bool") /* ty=Tensor[(12, 6, 3), bool] */;
  logical_or(%345, %346) /* ty=Tensor[(12, 6, 3), bool] */
}

def @func_5699(%var_5667: Tensor[(125), float32]) -> (Tensor[(125), bool], Tensor[(5, 5, 5), float32], Tensor[(12, 1, 3), float32]) {
  %347 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
  %348 = %347.0;
  %349 = cast(%var_5667, dtype="bool") /* ty=Tensor[(125), bool] */;
  %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(1), int32] */;
  %351 = cast(%348, dtype="bool") /* ty=Tensor[(125), bool] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?), bool] */;
  %353 = cast(%var_5667, dtype="float64") /* ty=Tensor[(125), float64] */;
  %354 = reshape(%353, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
  %355 = cast(%var_5667, dtype="float32") /* ty=Tensor[(125), float32] */;
  %356 = reshape(%355, newshape=[125]) /* ty=Tensor[(125), float32] */;
  %357 = @func_5021(%356) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(125), float64]) */;
  %358 = less(%351, %352) /* ty=Tensor[(125), bool] */;
  %359 = @func_951(%354) /* ty=Tensor[(5, 5, 5), float32] */;
  %360 = %357.0;
  (%358, %359, %360)
}

def @func_11546() -> Tensor[(12, 1, 3), float32] {
  %361 = @func_10576() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %361.0
}

def @func_9728(%var_9712: Tensor[(36, 16), float32]) -> (Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(11, 15, 9), float64], Tensor[(36, 16), float32], Tensor[(1485), float64]) {
  %362 = @func_4202() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %363 = @func_6480() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %364 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %365 = cast(%var_9712, dtype="float32") /* ty=Tensor[(36, 16), float32] */;
  %366 = cast(meta[relay.Constant][15] /* ty=Tensor[(1485), float64] */, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %367 = reshape(%365, newshape=[12, 16, 3]) /* ty=Tensor[(12, 16, 3), float32] */;
  %368 = reshape(%366, newshape=[1485]) /* ty=Tensor[(1485), float64] */;
  %369 = @func_8923(%367, %368) /* ty=(Tensor[(12, 16, 3), bool], Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) */;
  %370 = %362.0;
  %371 = %363.0;
  %372 = %364.3;
  %373 = %369.2;
  (%370, %371, %372, %373, %var_9712, meta[relay.Constant][15] /* ty=Tensor[(1485), float64] */)
}

def @func_8923(%var_8892: Tensor[(12, 16, 3), float32], %var_8906: Tensor[(1485), float64]) -> (Tensor[(12, 16, 3), bool], Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) {
  %374 = @func_8362() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %375 = %374.0;
  %376 = cast(%375, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %377 = cast(%var_8892, dtype="bool") /* ty=Tensor[(12, 16, 3), bool] */;
  %378 = @func_6480() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %379 = cast(%var_8906, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %380 = reshape(%379, newshape=[11, 15, 9]) /* ty=Tensor[(11, 15, 9), float64] */;
  %381 = not_equal(%376, %377) /* ty=Tensor[(12, 16, 3), bool] */;
  %382 = %378.0;
  %383 = @func_72(%380) /* ty=Tensor[(11, 15, 9), float64] */;
  (%381, %382, %383, %var_8906)
}

def @func_5992() -> Tensor[(12, 1, 3), float64] {
  @func_4100() /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_3615() -> (Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) {
  %384 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %385 = %384.3;
  %386 = cast(%385, dtype="float32") /* ty=Tensor[(125), float32] */;
  %387 = cast(%385, dtype="float32") /* ty=Tensor[(125), float32] */;
  %388 = @func_3396() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %389 = @func_3577() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(280), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) */;
  %390 = acosh(%386) /* ty=Tensor[(125), float32] */;
  %391 = cosh(%387) /* ty=Tensor[(125), float32] */;
  %392 = %388.0;
  %393 = %389.0;
  (%390, %391, %392, %393)
}

def @func_2533() -> (Tensor[(12, 1, 3), float32],) {
  %394 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %395 = %394.0;
  (%395,)
}

def @func_7915() -> (Tensor[(12, 1, 3), float32],) {
  %396 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %397 = %396.2;
  (%397,)
}

def @func_6412() -> Tensor[(12, 1, 3), float32] {
  %398 = @func_5910() /* ty=(Tensor[(12, 3, 3), int64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) */;
  %398.1
}

def @func_9294() -> (Tensor[(125), float32], Tensor[(576), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32]) {
  %399 = @func_5840() /* ty=(Tensor[(125), float32], Tensor[(576), float32], Tensor[(576), float32]) */;
  %400 = @func_7564() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(576), float32]) */;
  %401 = @func_4202() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %402 = %399.0;
  %403 = %400.1;
  %404 = @func_6468() /* ty=Tensor[(4, 5, 14), float64] */;
  %405 = %401.0;
  (%402, %403, %404, %405)
}

def @func_6118() -> (Tensor[(4, 5, 14), float64],) {
  %406 = @func_4522() /* ty=Tensor[(4, 5, 14), float64] */;
  (%406,)
}

def @func_9962(%var_9906: Tensor[(9, 13, 15), float32]) -> (Tensor[(9, 13, 15), bool], Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(9, 13, 15), float32]) {
  %407 = cast(%var_9906, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
  %408 = atanh(%407) /* ty=Tensor[(9, 13, 15), float32] */;
  %409 = cast(%408, dtype="bool") /* ty=Tensor[(9, 13, 15), bool] */;
  %410 = shape_of(%var_9906, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%var_9906, dtype="bool") /* ty=Tensor[(9, 13, 15), bool] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %413 = @func_3288() /* ty=(Tensor[(125), float32], Tensor[(4, 5, 14), float64]) */;
  %414 = @func_8065() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %415 = cast(%408, dtype="float64") /* ty=Tensor[(9, 13, 15), float64] */;
  %416 = cosh(%415) /* ty=Tensor[(9, 13, 15), float64] */;
  %417 = cast(%416, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
  %418 = less(%411, %412) /* ty=Tensor[(9, 13, 15), bool] */;
  %419 = %413.1;
  %420 = %414.0;
  %421 = asin(%417) /* ty=Tensor[(9, 13, 15), float32] */;
  (%418, %419, %420, %421)
}

def @func_9458() -> Tensor[(12, 1, 3), float64] {
  @func_6217() /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_3757() -> (Tensor[(280), float64], Tensor[(125), float32]) {
  %422 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
  %423 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %424 = %423.3;
  %425 = cast(%424, dtype="float32") /* ty=Tensor[(125), float32] */;
  %426 = %422.0;
  %427 = atan(%425) /* ty=Tensor[(125), float32] */;
  (%426, %427)
}

def @main(%var_12032: Tensor[(14, 1, 8), float32]) -> (Tensor[(12, 1, 3), float32], Tensor[(660), float32], Tensor[(14, 1, 8), float32]) {
  %428 = cast(meta[relay.Constant][16] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %429 = reshape(%428, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), float32] */;
  %430 = @func_6986(%429) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(5, 11, 12), float32]) */;
  %431 = cast(%var_12032, dtype="float32") /* ty=Tensor[(14, 1, 8), float32] */;
  %432 = log(%431) /* ty=Tensor[(14, 1, 8), float32] */;
  %433 = cast(%432, dtype="float32") /* ty=Tensor[(14, 1, 8), float32] */;
  %434 = %430.0;
  %435 = exp(%433) /* ty=Tensor[(14, 1, 8), float32] */;
  (%434, meta[relay.Constant][16] /* ty=Tensor[(660), float32] */, %435)
}

def @func_11160(%var_11056: Tensor[(12, 15, 3), float32], %var_11078: Tensor[(576), float32], %var_11156: Tensor[(660), float32]) -> (Tensor[(12, 15, 3), float64], Tensor[(12, 1, 3), float64], Tensor[(12, 15, 3), bool], Tensor[(12, 16, 3), bool], Tensor[(576), float32], Tensor[(1485), float64], Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(360), float32], Tensor[(1485), uint16], Tensor[(1485), float32], Tensor[(5, 11, 12), float32], Tensor[(660), float32]) {
  %436 = @func_10477() /* ty=Tensor[(12, 1, 3), float32] */;
  %437 = cast(%436, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
  %438 = cast(%var_11056, dtype="float64") /* ty=Tensor[(12, 15, 3), float64] */;
  %439 = cast(%436, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %440 = cast(%var_11056, dtype="bool") /* ty=Tensor[(12, 15, 3), bool] */;
  %441 = cast(%var_11078, dtype="float32") /* ty=Tensor[(576), float32] */;
  %442 = cast(meta[relay.Constant][17] /* ty=Tensor[(1485), float64] */, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %443 = reshape(%441, newshape=[12, 16, 3]) /* ty=Tensor[(12, 16, 3), float32] */;
  %444 = reshape(%442, newshape=[1485]) /* ty=Tensor[(1485), float64] */;
  %445 = @func_8923(%443, %444) /* ty=(Tensor[(12, 16, 3), bool], Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) */;
  %446 = @func_9294() /* ty=(Tensor[(125), float32], Tensor[(576), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32]) */;
  %447 = @func_6442() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64]) */;
  %448 = @func_6050() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, ?, 3), float64], Tensor[(360), float32]) */;
  %449 = %446.2;
  %450 = cast(%449, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %451 = cast(%436, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
  %452 = reshape(%450, newshape=[5, 56]) /* ty=Tensor[(5, 56), float64] */;
  %453 = reshape(%451, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float64] */;
  %454 = @func_5606(%452, %453) /* ty=(Tensor[(1485), float64], Tensor[(5, 56), uint8], Tensor[(12, ?, 3), bool], Tensor[(5, 56), float32], Tensor[(125), float64], Tensor[(125), float32]) */;
  %455 = %454.0;
  %456 = cast(%455, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %457 = sigmoid(%456) /* ty=Tensor[(1485), float64] */;
  %458 = cast(%455, dtype="uint16") /* ty=Tensor[(1485), uint16] */;
  %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(1), int32] */;
  %460 = cast(%457, dtype="uint16") /* ty=Tensor[(1485), uint16] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %462 = subtract(%460, %461) /* ty=Tensor[(1485), uint16] */;
  %463 = cast(%462, dtype="uint16") /* ty=Tensor[(1485), uint16] */;
  %464 = shape_of(%457, dtype="int32") /* ty=Tensor[(1), int32] */;
  %465 = cast(%457, dtype="uint16") /* ty=Tensor[(1485), uint16] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %467 = cast(%455, dtype="float32") /* ty=Tensor[(1485), float32] */;
  %468 = shape_of(%457, dtype="int32") /* ty=Tensor[(1), int32] */;
  %469 = cast(%457, dtype="float32") /* ty=Tensor[(1485), float32] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?), float32] */;
  %471 = cast(%var_11156, dtype="float32") /* ty=Tensor[(660), float32] */;
  %472 = reshape(%471, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), float32] */;
  %473 = @func_6986(%472) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(5, 11, 12), float32]) */;
  %474 = power(%437, %438) /* ty=Tensor[(12, 15, 3), float64] */;
  %475 = @func_6217() /* ty=Tensor[(12, 1, 3), float64] */;
  %476 = logical_and(%439, %440) /* ty=Tensor[(12, 15, 3), bool] */;
  %477 = %445.0;
  %478 = %447.1;
  %479 = %448.2;
  %480 = right_shift(%465, %466) /* ty=Tensor[(1485), uint16] */;
  %481 = mod(%469, %470) /* ty=Tensor[(1485), float32] */;
  %482 = %473.1;
  (%474, %475, %476, %477, %var_11078, meta[relay.Constant][17] /* ty=Tensor[(1485), float64] */, %449, %478, %479, %480, %481, %482, %var_11156)
}

def @func_2729() -> (Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) {
  %483 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %484 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %485 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %486 = %484.1;
  %487 = cast(%486, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %488 = reshape(%487, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %489 = @func_405(%488) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) */;
  %490 = %489.2;
  %491 = cast(%490, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %492 = %483.0;
  %493 = %485.3;
  %494 = sinh(%491) /* ty=Tensor[(1485), float64] */;
  (%492, %486, %493, %494)
}

def @func_2910() -> (Tensor[(280), float64],) {
  %495 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %496 = %495.2;
  (%496,)
}

def @func_6569(%var_6534: Tensor[(576), float32]) -> (Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(576), float32], Tensor[(12, 16, 3), float32], Tensor[(12, 1, 3), float32]) {
  %497 = @func_5968() /* ty=(Tensor[(9, 3, 3), float64], Tensor[(125), float32], Tensor[(12, 1, 3), float64]) */;
  %498 = @func_3878() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %499 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
  %500 = @func_4202() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %501 = cast(%var_6534, dtype="float32") /* ty=Tensor[(576), float32] */;
  %502 = reshape(%501, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %503 = @func_3945(%502) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) */;
  %504 = %503.2;
  %505 = cast(%504, dtype="float64") /* ty=Tensor[(12, 16, 3), float64] */;
  %506 = sinh(%505) /* ty=Tensor[(12, 16, 3), float64] */;
  %507 = cast(%506, dtype="float32") /* ty=Tensor[(12, 16, 3), float32] */;
  %508 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
  %509 = @func_4522() /* ty=Tensor[(4, 5, 14), float64] */;
  %510 = %497.2;
  %511 = %498.0;
  %512 = %499.1;
  %513 = %500.0;
  %514 = sqrt(%507) /* ty=Tensor[(12, 16, 3), float32] */;
  %515 = %508.1;
  (%509, %510, %511, %512, %513, %var_6534, %514, %515)
}

def @func_5471(%var_5455: Tensor[(12, 10, 3), float32]) -> (Tensor[(11, 15, 9), float64], Tensor[(12, 10, 3), int32], Tensor[(12, 1, 3), float32]) {
  %516 = @func_5234() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(11, 15, 9), float64], Tensor[(12, 3, 3), int64]) */;
  %517 = @func_2818() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %518 = %517.0;
  %519 = cast(%518, dtype="int32") /* ty=Tensor[(12, 1, 3), int32] */;
  %520 = cast(%var_5455, dtype="int32") /* ty=Tensor[(12, 10, 3), int32] */;
  %521 = cast(%518, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %522 = %516.2;
  %523 = logical_xor(%519, %520) /* ty=Tensor[(12, 10, 3), int32] */;
  %524 = sigmoid(%521) /* ty=Tensor[(12, 1, 3), float32] */;
  (%522, %523, %524)
}

def @func_10531(%var_10509: Tensor[(7, 15, 6), int16], %var_10510: Tensor[(7, 15, 6), int16]) -> (Tensor[(7, 15, 6), int16], Tensor[(125), float32]) {
  %525 = cast(%var_10510, dtype="int16") /* ty=Tensor[(7, 15, 6), int16] */;
  %526 = shape_of(%var_10509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%var_10509, dtype="int16") /* ty=Tensor[(7, 15, 6), int16] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %529 = @func_6475() /* ty=(Tensor[(125), float32],) */;
  %530 = subtract(%527, %528) /* ty=Tensor[(7, 15, 6), int16] */;
  %531 = %529.0;
  (%530, %531)
}

def @func_72(%var_69: Tensor[(11, 15, 9), float64]) -> Tensor[(11, 15, 9), float64] {
  %532 = cast(%var_69, dtype="float64") /* ty=Tensor[(11, 15, 9), float64] */;
  log(%532) /* ty=Tensor[(11, 15, 9), float64] */
}

def @func_4843() -> (Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64]) {
  %533 = @func_3368() /* ty=(Tensor[(280), float64], Tensor[(12, 3, 3), int64], Tensor[(11, 15, 9), float64]) */;
  %534 = @func_4074() /* ty=Tensor[(4, 5, 14), float64] */;
  %535 = %533.2;
  (%534, %535)
}

def @func_6837(%var_6825: Tensor[(12, 4, 3), float32]) -> (Tensor[(12, 4, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64]) {
  %536 = @func_2818() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %537 = %536.0;
  %538 = cast(%537, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %539 = cast(%var_6825, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %540 = divide(%538, %539) /* ty=Tensor[(12, 4, 3), float32] */;
  %541 = @func_4074() /* ty=Tensor[(4, 5, 14), float64] */;
  %542 = @func_5992() /* ty=Tensor[(12, 1, 3), float64] */;
  (%540, %541, %542)
}

def @func_6100(%var_6068: Tensor[(5, 14, 13), float64], %var_6079: Tensor[(280), float64], %var_6085: Tensor[(15, 99), float64]) -> (Tensor[(5, 14, 13), float64], Tensor[(12, 1, 3), float32], Tensor[(280), float64], Tensor[(11, 15, 9), float64], Tensor[(15, 99), float64]) {
  %543 = cast(%var_6068, dtype="float64") /* ty=Tensor[(5, 14, 13), float64] */;
  %544 = cast(%var_6079, dtype="float64") /* ty=Tensor[(280), float64] */;
  %545 = reshape(%544, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %546 = @func_4668(%545) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(1485), float64], Tensor[(125), float32]) */;
  %547 = cast(%var_6085, dtype="float64") /* ty=Tensor[(15, 99), float64] */;
  %548 = reshape(%547, newshape=[11, 15, 9]) /* ty=Tensor[(11, 15, 9), float64] */;
  %549 = log(%543) /* ty=Tensor[(5, 14, 13), float64] */;
  %550 = %546.3;
  %551 = @func_72(%548) /* ty=Tensor[(11, 15, 9), float64] */;
  (%549, %550, %var_6079, %551, %var_6085)
}

def @func_11527() -> Tensor[(12, 1, 3), float32] {
  %552 = @func_10766() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %552.0
}

def @func_4314() -> Tensor[(9, 3, 3), int32] {
  %553 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 3, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 3), float64] */;
  %554 = asinh(%553) /* ty=Tensor[(9, 3, 3), float64] */;
  %555 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 3, 3), float64] */, dtype="int32") /* ty=Tensor[(9, 3, 3), int32] */;
  %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%554, dtype="int32") /* ty=Tensor[(9, 3, 3), int32] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_and(%557, %558) /* ty=Tensor[(9, 3, 3), int32] */
}

def @func_6442() -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64]) {
  %559 = @func_4522() /* ty=Tensor[(4, 5, 14), float64] */;
  %560 = @func_4522() /* ty=Tensor[(4, 5, 14), float64] */;
  (%559, %560)
}

def @func_7264() -> (Tensor[(4, 5, 14), float64], Tensor[(125), float32]) {
  %561 = @func_6442() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64]) */;
  %562 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %563 = %561.0;
  %564 = %562.0;
  (%563, %564)
}

def @func_10366() -> (Tensor[(36), float32], Tensor[(4, 5, 14), float64], Tensor[(80), float32]) {
  %565 = @func_5650() /* ty=(Tensor[(280), float64], Tensor[(125), int8], Tensor[(36), float32], Tensor[(360), float32], Tensor[(12, 1, 3), float32]) */;
  %566 = cast(meta[relay.Constant][20] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %567 = reshape(%566, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), float32] */;
  %568 = @func_5730(%567) /* ty=(Tensor[(5, 8, 2), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) */;
  %569 = %565.2;
  %570 = %568.1;
  (%569, %570, meta[relay.Constant][20] /* ty=Tensor[(80), float32] */)
}

def @func_6672() -> Tensor[(12, 1, 3), float64] {
  @func_6217() /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_6259() -> (Tensor[(12, ?, 3), bool],) {
  %571 = @func_5992() /* ty=Tensor[(12, 1, 3), float64] */;
  %572 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %573 = %572.1;
  %574 = cast(%573, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %575 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%571, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %578 = logical_and(%576, %577) /* ty=Tensor[(12, ?, 3), bool] */;
  (%578,)
}

def @func_8502(%var_8477: Tensor[(36), float32], %var_8478: Tensor[(360), float32], %var_8491: Tensor[(12, 48), float32]) -> (Tensor[(4, 5, 14), float64], Tensor[(360), float32], Tensor[(36), float32], Tensor[(360), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 48), float32]) {
  %579 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %580 = cast(%var_8477, dtype="float32") /* ty=Tensor[(36), float32] */;
  %581 = cast(%var_8478, dtype="float32") /* ty=Tensor[(360), float32] */;
  %582 = reshape(%580, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float32] */;
  %583 = reshape(%581, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %584 = @func_5322(%582, %583) /* ty=(Tensor[(125), int8], Tensor[(360), float32], Tensor[(12, ?, 3), float64]) */;
  %585 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
  %586 = %579.3;
  %587 = cast(%586, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %588 = reshape(%587, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %589 = @func_4668(%588) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(1485), float64], Tensor[(125), float32]) */;
  %590 = @func_8065() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %591 = cast(%var_8491, dtype="float32") /* ty=Tensor[(12, 48), float32] */;
  %592 = reshape(%591, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %593 = @func_4806(%592) /* ty=(Tensor[(280), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 6, 3), bool], Tensor[(216), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(280), float64]) */;
  %594 = %584.1;
  %595 = %585.1;
  %596 = %589.4;
  %597 = %590.0;
  %598 = %593.1;
  (%586, %594, %var_8477, %var_8478, %595, %596, %597, %598, %var_8491)
}

def @func_4806(%var_4784: Tensor[(576), float32]) -> (Tensor[(280), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 6, 3), bool], Tensor[(216), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(280), float64]) {
  %599 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %600 = @func_3094() /* ty=(Tensor[(125), float64], Tensor[(12, ?, 3), int8], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %601 = cast(meta[relay.Constant][21] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %602 = reshape(%601, newshape=[12, 6, 3]) /* ty=Tensor[(12, 6, 3), float32] */;
  %603 = cast(%var_4784, dtype="float32") /* ty=Tensor[(576), float32] */;
  %604 = reshape(%603, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %605 = @func_3945(%604) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) */;
  %606 = %599.2;
  %607 = %600.3;
  %608 = @func_3801(%602) /* ty=Tensor[(12, 6, 3), bool] */;
  %609 = %605.3;
  %610 = @func_4414() /* ty=Tensor[(280), float64] */;
  (%606, %607, %608, meta[relay.Constant][21] /* ty=Tensor[(216), float32] */, %609, %var_4784, %610)
}

def @func_11741(%var_11719: Tensor[(8, 3, 6), float32]) -> (Tensor[(8, 3, 6), float32], Tensor[(280), float64]) {
  %611 = cast(%var_11719, dtype="float32") /* ty=Tensor[(8, 3, 6), float32] */;
  %612 = log(%611) /* ty=Tensor[(8, 3, 6), float32] */;
  %613 = @func_10728() /* ty=Tensor[(280), float64] */;
  (%612, %613)
}

def @func_8383() -> (Tensor[(12, 1, 3), float64],) {
  %614 = @func_5992() /* ty=Tensor[(12, 1, 3), float64] */;
  (%614,)
}

def @func_6986(%var_6961: Tensor[(5, 11, 12), float32]) -> (Tensor[(12, 1, 3), float32], Tensor[(5, 11, 12), float32]) {
  %615 = @func_6050() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, ?, 3), float64], Tensor[(360), float32]) */;
  %616 = cast(%var_6961, dtype="float32") /* ty=Tensor[(5, 11, 12), float32] */;
  %617 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(5, 11, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 11, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 11, 12), float32] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %620 = floor_divide(%618, %619) /* ty=Tensor[(5, 11, 12), float32] */;
  %621 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 11, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 11, 12), float32] */;
  %622 = shape_of(%620, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%620, dtype="float32") /* ty=Tensor[(5, 11, 12), float32] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %625 = %615.0;
  %626 = mod(%623, %624) /* ty=Tensor[(5, 11, 12), float32] */;
  (%625, %626)
}

def @func_6797() -> (Tensor[(4, 5, 14), float64],) {
  %627 = @func_6468() /* ty=Tensor[(4, 5, 14), float64] */;
  (%627,)
}

def @func_1193(%var_1172: Tensor[(2, 16, 8), float32], %var_1177: Tensor[(280), float64]) -> (Tensor[(2, 16, 8), float32], Tensor[(11, 15, 9), float64], Tensor[(280), float64], Tensor[(11, 15, 9), float64]) {
  %628 = cast(%var_1172, dtype="float32") /* ty=Tensor[(2, 16, 8), float32] */;
  %629 = cast(%var_1177, dtype="float64") /* ty=Tensor[(280), float64] */;
  %630 = reshape(%629, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %631 = @func_405(%630) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) */;
  %632 = %631.1;
  %633 = cast(%632, dtype="float64") /* ty=Tensor[(11, 15, 9), float64] */;
  %634 = reshape(%633, newshape=[11, 15, 9]) /* ty=Tensor[(11, 15, 9), float64] */;
  %635 = sigmoid(%628) /* ty=Tensor[(2, 16, 8), float32] */;
  %636 = @func_72(%634) /* ty=Tensor[(11, 15, 9), float64] */;
  (%635, %632, %var_1177, %636)
}

def @func_3945(%var_3936: Tensor[(576), float32]) -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) {
  %637 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %638 = @func_2945() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %639 = cast(%var_3936, dtype="float32") /* ty=Tensor[(576), float32] */;
  %640 = reshape(%639, newshape=[12, 16, 3]) /* ty=Tensor[(12, 16, 3), float32] */;
  %641 = @func_3523(%640) /* ty=(Tensor[(12, 16, 3), int16], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(12, 16, 3), uint16], Tensor[(125), float64]) */;
  %642 = %637.1;
  %643 = %638.0;
  %644 = %641.4;
  (%642, %643, %644, %var_3936)
}

def @func_8622() -> Tensor[(4, 5, 14), float64] {
  %645 = @func_4843() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64]) */;
  %645.0
}

def @func_4757() -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64]) {
  %646 = @func_3094() /* ty=(Tensor[(125), float64], Tensor[(12, ?, 3), int8], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %647 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
  %648 = %646.3;
  %649 = %647.1;
  (%648, %649)
}

def @func_11230() -> (Tensor[(125), float32],) {
  %650 = @func_5968() /* ty=(Tensor[(9, 3, 3), float64], Tensor[(125), float32], Tensor[(12, 1, 3), float64]) */;
  %651 = %650.1;
  (%651,)
}

def @func_6883() -> Tensor[(12, ?, 3), bool] {
  %652 = @func_4202() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %653 = %652.0;
  %654 = @func_5992() /* ty=Tensor[(12, 1, 3), float64] */;
  %655 = cast(%654, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %656 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%653, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%657, %658) /* ty=Tensor[(12, ?, 3), bool] */
}

def @func_3878() -> (Tensor[(4, 5, 14), float64],) {
  %659 = @func_3288() /* ty=(Tensor[(125), float32], Tensor[(4, 5, 14), float64]) */;
  %660 = %659.1;
  (%660,)
}

def @func_3094() -> (Tensor[(125), float64], Tensor[(12, ?, 3), int8], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) {
  %661 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
  %662 = @func_2818() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %663 = %662.0;
  %664 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
  %665 = %664.1;
  %666 = cast(%665, dtype="int8") /* ty=Tensor[(12, 1, 3), int8] */;
  %667 = shape_of(%663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%663, dtype="int8") /* ty=Tensor[(12, 1, 3), int8] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %670 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
  %671 = %670.1;
  %672 = cast(%671, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %673 = @func_2945() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %674 = %661.2;
  %675 = bitwise_and(%668, %669) /* ty=Tensor[(12, ?, 3), int8] */;
  %676 = cosh(%672) /* ty=Tensor[(12, 1, 3), float32] */;
  %677 = %673.0;
  (%674, %675, %676, %677)
}

def @func_8947(%var_8944: Tensor[(1485), float64]) -> (Tensor[(12, 1, 3), float32], Tensor[(1485), float32], Tensor[(1485), float64]) {
  %678 = @func_3577() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(280), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) */;
  %679 = cast(%var_8944, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %680 = reshape(%679, newshape=[1485]) /* ty=Tensor[(1485), float64] */;
  %681 = @func_3906(%680) /* ty=(Tensor[(1485), float32], Tensor[(12, 1, 3), float32]) */;
  %682 = %678.3;
  %683 = %681.0;
  (%682, %683, %var_8944)
}

def @func_12008(%var_11988: Tensor[(252), float64], %var_11989: Tensor[(125), float64]) -> (Tensor[(12, 1, 3), float32], Tensor[(125), float64], Tensor[(252), float64], Tensor[(125), float64]) {
  %684 = @func_3194() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64], Tensor[(12, 1, 3), float32]) */;
  %685 = cast(%var_11988, dtype="float64") /* ty=Tensor[(252), float64] */;
  %686 = cast(%var_11989, dtype="float64") /* ty=Tensor[(125), float64] */;
  %687 = reshape(%685, newshape=[7, 6, 6]) /* ty=Tensor[(7, 6, 6), float64] */;
  %688 = reshape(%686, newshape=[125]) /* ty=Tensor[(125), float64] */;
  %689 = @func_6786(%687, %688) /* ty=(Tensor[(7, 6, 6), float64], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %690 = %684.2;
  %691 = %689.2;
  (%690, %691, %var_11988, %var_11989)
}

def @func_3729(%var_3691: Tensor[(1485), float64]) -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), bool]) {
  %692 = @func_3288() /* ty=(Tensor[(125), float32], Tensor[(4, 5, 14), float64]) */;
  %693 = %692.1;
  %694 = cast(%693, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %695 = reshape(%694, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %696 = @func_405(%695) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) */;
  %697 = @func_3194() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64], Tensor[(12, 1, 3), float32]) */;
  %698 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %699 = cast(%var_3691, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %700 = reshape(%699, newshape=[11, 15, 9]) /* ty=Tensor[(11, 15, 9), float64] */;
  %701 = @func_72(%700) /* ty=Tensor[(11, 15, 9), float64] */;
  %702 = cast(%var_3691, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%701, dtype="float64") /* ty=Tensor[(11, 15, 9), float64] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %706 = floor_mod(%704, %705) /* ty=Tensor[(11, 15, 9), float64] */;
  %707 = cast(%706, dtype="float32") /* ty=Tensor[(11, 15, 9), float32] */;
  %708 = atanh(%707) /* ty=Tensor[(11, 15, 9), float32] */;
  %709 = cast(%706, dtype="bool") /* ty=Tensor[(11, 15, 9), bool] */;
  %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%708, dtype="bool") /* ty=Tensor[(11, 15, 9), bool] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %713 = %696.0;
  %714 = %697.0;
  %715 = %698.1;
  %716 = greater_equal(%711, %712) /* ty=Tensor[(11, 15, 9), bool] */;
  (%693, %713, %714, %715, %716)
}

def @func_10208() -> (Tensor[(280), float64], Tensor[(125), float64]) {
  %717 = @func_2910() /* ty=(Tensor[(280), float64],) */;
  %718 = @func_5650() /* ty=(Tensor[(280), float64], Tensor[(125), int8], Tensor[(36), float32], Tensor[(360), float32], Tensor[(12, 1, 3), float32]) */;
  %719 = %718.1;
  %720 = cast(%719, dtype="float64") /* ty=Tensor[(125), float64] */;
  %721 = sigmoid(%720) /* ty=Tensor[(125), float64] */;
  %722 = cast(%721, dtype="float64") /* ty=Tensor[(125), float64] */;
  %723 = %717.0;
  %724 = exp(%722) /* ty=Tensor[(125), float64] */;
  (%723, %724)
}

def @func_10576() -> (Tensor[(12, 1, 3), float32],) {
  %725 = @func_10477() /* ty=Tensor[(12, 1, 3), float32] */;
  (%725,)
}

def @func_9542() -> (Tensor[(7, 5, 15), uint64], Tensor[(125), int16], Tensor[(125), float32], Tensor[(576), float32]) {
  %726 = cast(meta[relay.Constant][23] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %727 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 5, 15), uint64] */, dtype="uint64") /* ty=Tensor[(7, 5, 15), uint64] */;
  %728 = cast(meta[relay.Constant][25] /* ty=Tensor[(125), float32] */, dtype="float32") /* ty=Tensor[(125), float32] */;
  %729 = cast(meta[relay.Constant][26] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %730 = reshape(%728, newshape=[125]) /* ty=Tensor[(125), float32] */;
  %731 = reshape(%729, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %732 = @func_3862(%730, %731) /* ty=(Tensor[(125), int16], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) */;
  %733 = logical_xor(%726, %727) /* ty=Tensor[(7, 5, 15), uint64] */;
  %734 = %732.0;
  (%733, %734, meta[relay.Constant][25] /* ty=Tensor[(125), float32] */, meta[relay.Constant][26] /* ty=Tensor[(576), float32] */)
}

def @func_5840() -> (Tensor[(125), float32], Tensor[(576), float32], Tensor[(576), float32]) {
  %735 = @func_4267() /* ty=Tensor[(125), float32] */;
  %736 = cast(%735, dtype="float32") /* ty=Tensor[(125), float32] */;
  %737 = cast(meta[relay.Constant][27] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %738 = reshape(%736, newshape=[125]) /* ty=Tensor[(125), float32] */;
  %739 = reshape(%737, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %740 = @func_3862(%738, %739) /* ty=(Tensor[(125), int16], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) */;
  %741 = %740.2;
  (%735, %741, meta[relay.Constant][27] /* ty=Tensor[(576), float32] */)
}

def @func_4921() -> Tensor[(10, 5, 11), float32] {
  %742 = @func_4895() /* ty=(Tensor[(10, 5, 11), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32]) */;
  %742.0
}

def @func_7149() -> (Tensor[(280), float64],) {
  %743 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %744 = %743.2;
  (%744,)
}

def @func_405(%var_391: Tensor[(4, 5, 14), float64]) -> (Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) {
  %745 = cast(%var_391, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %746 = cast(meta[relay.Constant][28] /* ty=Tensor[(1485), float64] */, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %747 = reshape(%746, newshape=[11, 15, 9]) /* ty=Tensor[(11, 15, 9), float64] */;
  %748 = asin(%745) /* ty=Tensor[(4, 5, 14), float64] */;
  %749 = @func_72(%747) /* ty=Tensor[(11, 15, 9), float64] */;
  (%748, %749, meta[relay.Constant][28] /* ty=Tensor[(1485), float64] */)
}

def @func_10986() -> (Tensor[(125), float32],) {
  %750 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %751 = %750.1;
  (%751,)
}

def @func_6583() -> Tensor[(280), float64] {
  %752 = @func_2910() /* ty=(Tensor[(280), float64],) */;
  %752.0
}

def @func_8788() -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(165, 9), bool]) {
  %753 = cast(meta[relay.Constant][29] /* ty=Tensor[(165, 9), float64] */, dtype="float64") /* ty=Tensor[(165, 9), float64] */;
  %754 = reshape(%753, newshape=[1485]) /* ty=Tensor[(1485), float64] */;
  %755 = @func_3729(%754) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), bool]) */;
  %756 = cast(meta[relay.Constant][30] /* ty=Tensor[(165, 9), float64] */, dtype="bool") /* ty=Tensor[(165, 9), bool] */;
  %757 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(165, 9), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %758 = cast(meta[relay.Constant][29] /* ty=Tensor[(165, 9), float64] */, dtype="bool") /* ty=Tensor[(165, 9), bool] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %760 = @func_6468() /* ty=Tensor[(4, 5, 14), float64] */;
  %761 = %755.1;
  %762 = less_equal(%758, %759) /* ty=Tensor[(165, 9), bool] */;
  (%760, %761, %762)
}

def @func_3862(%var_3845: Tensor[(125), float32], %var_3854: Tensor[(576), float32]) -> (Tensor[(125), int16], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) {
  %763 = @func_3757() /* ty=(Tensor[(280), float64], Tensor[(125), float32]) */;
  %764 = %763.1;
  %765 = cast(%var_3845, dtype="int16") /* ty=Tensor[(125), int16] */;
  %766 = shape_of(%764, dtype="int32") /* ty=Tensor[(1), int32] */;
  %767 = cast(%764, dtype="int16") /* ty=Tensor[(125), int16] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?), int16] */;
  %769 = cast(%var_3854, dtype="float32") /* ty=Tensor[(576), float32] */;
  %770 = reshape(%769, newshape=[12, 16, 3]) /* ty=Tensor[(12, 16, 3), float32] */;
  %771 = @func_3523(%770) /* ty=(Tensor[(12, 16, 3), int16], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(12, 16, 3), uint16], Tensor[(125), float64]) */;
  %772 = left_shift(%767, %768) /* ty=Tensor[(125), int16] */;
  %773 = %771.4;
  (%772, %773, %var_3854)
}

def @func_10293() -> Tensor[(12, 1, 3), float64] {
  @func_5992() /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_8032() -> (Tensor[(280), float64],) {
  %774 = @func_3757() /* ty=(Tensor[(280), float64], Tensor[(125), float32]) */;
  %775 = %774.0;
  (%775,)
}

def @func_4074() -> Tensor[(4, 5, 14), float64] {
  %776 = @func_2945() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %776.0
}

def @func_7564() -> (Tensor[(12, 1, 3), float32], Tensor[(576), float32]) {
  %777 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
  %778 = @func_5840() /* ty=(Tensor[(125), float32], Tensor[(576), float32], Tensor[(576), float32]) */;
  %779 = %777.1;
  %780 = %778.2;
  (%779, %780)
}

def @func_6746() -> (Tensor[(576), float32],) {
  %781 = @func_5840() /* ty=(Tensor[(125), float32], Tensor[(576), float32], Tensor[(576), float32]) */;
  %782 = %781.1;
  (%782,)
}

def @func_11191() -> (Tensor[(12, 1, 3), float32],) {
  %783 = @func_10766() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %784 = %783.0;
  (%784,)
}

def @func_7755(%var_7748: Tensor[(216), float32]) -> (Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 6, 3), bool], Tensor[(216), float32], Tensor[(12, 1, 3), float32]) {
  %785 = @func_3194() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64], Tensor[(12, 1, 3), float32]) */;
  %786 = cast(%var_7748, dtype="float32") /* ty=Tensor[(216), float32] */;
  %787 = reshape(%786, newshape=[12, 6, 3]) /* ty=Tensor[(12, 6, 3), float32] */;
  %788 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
  %789 = @func_6468() /* ty=Tensor[(4, 5, 14), float64] */;
  %790 = %785.5;
  %791 = @func_3801(%787) /* ty=Tensor[(12, 6, 3), bool] */;
  %792 = %788.1;
  (%789, %790, %791, %var_7748, %792)
}

def @func_10859() -> (Tensor[(4, 5, 14), float64],) {
  %793 = @func_6480() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %794 = %793.0;
  (%794,)
}

def @func_5606(%var_5562: Tensor[(5, 56), float64], %var_5578: Tensor[(12, 1, 3), float64]) -> (Tensor[(1485), float64], Tensor[(5, 56), uint8], Tensor[(12, ?, 3), bool], Tensor[(5, 56), float32], Tensor[(125), float64], Tensor[(125), float32]) {
  %795 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 56), float64] */, dtype="float64") /* ty=Tensor[(5, 56), float64] */;
  %796 = reshape(%795, newshape=[280]) /* ty=Tensor[(280), float64] */;
  %797 = @func_4403(%796) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(1485), float64], Tensor[(280), float64]) */;
  %798 = cast(%var_5562, dtype="uint8") /* ty=Tensor[(5, 56), uint8] */;
  %799 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(5, 56), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %800 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 56), float64] */, dtype="uint8") /* ty=Tensor[(5, 56), uint8] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %802 = @func_3396() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %803 = %802.0;
  %804 = cast(%803, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
  %805 = log10(%804) /* ty=Tensor[(12, 1, 3), float64] */;
  %806 = cast(%var_5578, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %807 = shape_of(%805, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%805, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %810 = cast(%var_5562, dtype="float32") /* ty=Tensor[(5, 56), float32] */;
  %811 = cast(meta[relay.Constant][32] /* ty=Tensor[(125), float32] */, dtype="float32") /* ty=Tensor[(125), float32] */;
  %812 = reshape(%811, newshape=[125]) /* ty=Tensor[(125), float32] */;
  %813 = @func_5021(%812) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(125), float64]) */;
  %814 = %797.1;
  %815 = right_shift(%800, %801) /* ty=Tensor[(5, 56), uint8] */;
  %816 = not_equal(%808, %809) /* ty=Tensor[(12, ?, 3), bool] */;
  %817 = acos(%810) /* ty=Tensor[(5, 56), float32] */;
  %818 = %813.2;
  (%814, %815, %816, %817, %818, meta[relay.Constant][32] /* ty=Tensor[(125), float32] */)
}

def @func_5730(%var_5705: Tensor[(5, 8, 2), float32]) -> (Tensor[(5, 8, 2), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) {
  %819 = cast(%var_5705, dtype="float32") /* ty=Tensor[(5, 8, 2), float32] */;
  %820 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %821 = cast(meta[relay.Constant][33] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %822 = reshape(%821, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %823 = @func_3945(%822) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) */;
  %824 = cos(%819) /* ty=Tensor[(5, 8, 2), float32] */;
  %825 = %820.3;
  %826 = %823.2;
  (%824, %825, %826, meta[relay.Constant][33] /* ty=Tensor[(576), float32] */)
}

def @func_7507() -> (Tensor[(360), float32], Tensor[(125), float32]) {
  %827 = @func_5650() /* ty=(Tensor[(280), float64], Tensor[(125), int8], Tensor[(36), float32], Tensor[(360), float32], Tensor[(12, 1, 3), float32]) */;
  %828 = @func_7264() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(125), float32]) */;
  %829 = %827.3;
  %830 = %828.1;
  (%829, %830)
}

def @func_4403(%var_4383: Tensor[(280), float64]) -> (Tensor[(12, 1, 3), float32], Tensor[(1485), float64], Tensor[(280), float64]) {
  %831 = cast(meta[relay.Constant][34] /* ty=Tensor[(1485), float64] */, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %832 = reshape(%831, newshape=[1485]) /* ty=Tensor[(1485), float64] */;
  %833 = @func_3729(%832) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), bool]) */;
  %834 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %835 = %834.2;
  %836 = cast(%var_4383, dtype="float64") /* ty=Tensor[(280), float64] */;
  %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(1), int32] */;
  %838 = cast(%835, dtype="float64") /* ty=Tensor[(280), float64] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?), float64] */;
  %840 = %833.2;
  %841 = mod(%838, %839) /* ty=Tensor[(280), float64] */;
  (%840, meta[relay.Constant][34] /* ty=Tensor[(1485), float64] */, %841)
}

def @func_3288() -> (Tensor[(125), float32], Tensor[(4, 5, 14), float64]) {
  %842 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
  %843 = @func_2945() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %844 = %842.0;
  %845 = %843.0;
  (%844, %845)
}

def @func_10691() -> (Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64]) {
  %846 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %847 = @func_8383() /* ty=(Tensor[(12, 1, 3), float64],) */;
  %848 = %846.1;
  %849 = %847.0;
  (%848, %849)
}

def @func_2880() -> (Tensor[(125), float32], Tensor[(12, 1, 3), float32]) {
  %850 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %851 = %850.3;
  %852 = cast(%851, dtype="float32") /* ty=Tensor[(125), float32] */;
  %853 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %854 = erf(%852) /* ty=Tensor[(125), float32] */;
  %855 = %853.1;
  (%854, %855)
}

def @func_7203() -> (Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) {
  %856 = @func_3094() /* ty=(Tensor[(125), float64], Tensor[(12, ?, 3), int8], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %857 = %856.2;
  %858 = @func_4522() /* ty=Tensor[(4, 5, 14), float64] */;
  (%857, %858)
}

def @func_4668(%var_4629: Tensor[(4, 5, 14), float64]) -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(1485), float64], Tensor[(125), float32]) {
  %859 = @func_4522() /* ty=Tensor[(4, 5, 14), float64] */;
  %860 = cast(%var_4629, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(3), int32] */;
  %862 = cast(%859, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %864 = @func_3878() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %865 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
  %866 = @func_3094() /* ty=(Tensor[(125), float64], Tensor[(12, ?, 3), int8], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %867 = cast(meta[relay.Constant][35] /* ty=Tensor[(1485), float64] */, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %868 = reshape(%867, newshape=[11, 15, 9]) /* ty=Tensor[(11, 15, 9), float64] */;
  %869 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %870 = floor_mod(%862, %863) /* ty=Tensor[(4, 5, 14), float64] */;
  %871 = %864.0;
  %872 = %865.0;
  %873 = %866.2;
  %874 = @func_72(%868) /* ty=Tensor[(11, 15, 9), float64] */;
  %875 = %869.1;
  (%870, %871, %872, %873, %874, meta[relay.Constant][35] /* ty=Tensor[(1485), float64] */, %875)
}

def @func_10893() -> (Tensor[(10, 5, 11), float32],) {
  %876 = @func_4921() /* ty=Tensor[(10, 5, 11), float32] */;
  (%876,)
}

def @func_9072(%var_9036: Tensor[(12, 1, 3), float32]) -> (Tensor[(576), float32], Tensor[(12, ?, 3), float64], Tensor[(12, 1, 3), float32]) {
  %877 = @func_5840() /* ty=(Tensor[(125), float32], Tensor[(576), float32], Tensor[(576), float32]) */;
  %878 = @func_8587() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %879 = %878.0;
  %880 = cast(%var_9036, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
  %881 = shape_of(%879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(%879, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %884 = @func_8587() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %885 = %877.1;
  %886 = subtract(%882, %883) /* ty=Tensor[(12, ?, 3), float64] */;
  %887 = %884.0;
  (%885, %886, %887)
}

def @func_11562() -> (Tensor[(10, 5, 11), float32],) {
  %888 = @func_4921() /* ty=Tensor[(10, 5, 11), float32] */;
  (%888,)
}

def @func_2818() -> (Tensor[(12, 1, 3), float32],) {
  %889 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %890 = %889.0;
  (%890,)
}

def @func_10766() -> (Tensor[(12, 1, 3), float32],) {
  %891 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %892 = %891.0;
  (%892,)
}

def @func_7967() -> Tensor[(12, 1, 3), float64] {
  @func_5992() /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_6468() -> Tensor[(4, 5, 14), float64] {
  %893 = @func_6118() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %893.0
}

def @func_4522() -> Tensor[(4, 5, 14), float64] {
  %894 = @func_3878() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %894.0
}

def @func_4895() -> (Tensor[(10, 5, 11), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32]) {
  %895 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 5, 11), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 11), float32] */;
  %896 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(10, 5, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %897 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 5, 11), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 11), float32] */;
  %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %899 = @func_3288() /* ty=(Tensor[(125), float32], Tensor[(4, 5, 14), float64]) */;
  %900 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %901 = power(%897, %898) /* ty=Tensor[(10, 5, 11), float32] */;
  %902 = %899.1;
  %903 = %900.0;
  (%901, %902, %903)
}

def @func_951(%var_943: Tensor[(5, 5, 5), float64]) -> Tensor[(5, 5, 5), float32] {
  %904 = cast(%var_943, dtype="float64") /* ty=Tensor[(5, 5, 5), float64] */;
  %905 = erf(%904) /* ty=Tensor[(5, 5, 5), float64] */;
  %906 = cast(%905, dtype="float32") /* ty=Tensor[(5, 5, 5), float32] */;
  atan(%906) /* ty=Tensor[(5, 5, 5), float32] */
}

def @func_5133(%var_5099: Tensor[(360), float32], %var_5104: Tensor[(125), int8]) -> (Tensor[(4, 5, 14), float64], Tensor[(280), float64], Tensor[(360), float32], Tensor[(280), float64], Tensor[(125), uint64]) {
  %907 = @func_4757() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64]) */;
  %908 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
  %909 = cast(%var_5099, dtype="float32") /* ty=Tensor[(360), float32] */;
  %910 = reshape(%909, newshape=[12, 10, 3]) /* ty=Tensor[(12, 10, 3), float32] */;
  %911 = @func_4597(%910) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(125), int8], Tensor[(12, 10, 3), int8]) */;
  %912 = %911.1;
  %913 = cast(%var_5104, dtype="uint64") /* ty=Tensor[(125), uint64] */;
  %914 = shape_of(%912, dtype="int32") /* ty=Tensor[(1), int32] */;
  %915 = cast(%912, dtype="uint64") /* ty=Tensor[(125), uint64] */;
  %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %917 = %907.1;
  %918 = %908.0;
  %919 = @func_4414() /* ty=Tensor[(280), float64] */;
  %920 = bitwise_and(%915, %916) /* ty=Tensor[(125), uint64] */;
  (%917, %918, %var_5099, %919, %920)
}

def @func_9790() -> (Tensor[(4, 5, 14), float64],) {
  %921 = @func_3288() /* ty=(Tensor[(125), float32], Tensor[(4, 5, 14), float64]) */;
  %922 = %921.1;
  (%922,)
}

def @func_3410() -> Tensor[(4, 5, 14), float64] {
  %923 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
  %923.1
}

def @func_11641() -> Tensor[(125), float32] {
  %924 = @func_11608() /* ty=(Tensor[(125), float32], Tensor[(12, 3, 3), float32]) */;
  %924.0
}

def @func_6217() -> Tensor[(12, 1, 3), float64] {
  %925 = @func_5992() /* ty=Tensor[(12, 1, 3), float64] */;
  %926 = cast(%925, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
  tan(%926) /* ty=Tensor[(12, 1, 3), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3862(%var_3845: Tensor[(125), float32], %var_3854: Tensor[(576), float32]) -> (Tensor[(125), int16], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) {
  %0 = @func_3757() /* ty=(Tensor[(280), float64], Tensor[(125), float32]) */;
  %1 = %0.1;
  %2 = cast(%var_3845, dtype="int16") /* ty=Tensor[(125), int16] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(1), int32] */;
  %4 = cast(%1, dtype="int16") /* ty=Tensor[(125), int16] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?), int16] */;
  %6 = cast(%var_3854, dtype="float32") /* ty=Tensor[(576), float32] */;
  %7 = reshape(%6, newshape=[12, 16, 3]) /* ty=Tensor[(12, 16, 3), float32] */;
  %8 = @func_3523(%7) /* ty=(Tensor[(12, 16, 3), int16], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(12, 16, 3), uint16], Tensor[(125), float64]) */;
  %9 = left_shift(%4, %5) /* ty=Tensor[(125), int16] */;
  %10 = %8.4;
  (%9, %10, %var_3854)
}

def @func_5136(%var_5134: Tensor[(360), float32], %var_5135: Tensor[(125), int8]) -> (Tensor[(4, 5, 14), float64], Tensor[(280), float64], Tensor[(360), float32], Tensor[(280), float64], Tensor[(125), uint64]) {
  %25 = fn (%var_5099: Tensor[(360), float32], %var_5104: Tensor[(125), int8]) -> (Tensor[(4, 5, 14), float64], Tensor[(280), float64], Tensor[(360), float32], Tensor[(280), float64], Tensor[(125), uint64]) {
    %11 = @func_4757() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64]) */;
    %12 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
    %13 = cast(%var_5099, dtype="float32") /* ty=Tensor[(360), float32] */;
    %14 = reshape(%13, newshape=[12, 10, 3]) /* ty=Tensor[(12, 10, 3), float32] */;
    %15 = @func_4597(%14) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(125), int8], Tensor[(12, 10, 3), int8]) */;
    %16 = %15.1;
    %17 = cast(%var_5104, dtype="uint64") /* ty=Tensor[(125), uint64] */;
    %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(1), int32] */;
    %19 = cast(%16, dtype="uint64") /* ty=Tensor[(125), uint64] */;
    %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %21 = %11.1;
    %22 = %12.0;
    %23 = @func_4414() /* ty=Tensor[(280), float64] */;
    %24 = bitwise_and(%19, %20) /* ty=Tensor[(125), uint64] */;
    (%21, %22, %var_5099, %23, %24)
  };
  %25(%var_5134, %var_5135) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(280), float64], Tensor[(360), float32], Tensor[(280), float64], Tensor[(125), uint64]) */
}

def @func_11643() -> Tensor[(125), float32] {
  @func_11641() /* ty=Tensor[(125), float32] */
}

def @func_10209() -> (Tensor[(280), float64], Tensor[(125), float64]) {
  %34 = fn () -> (Tensor[(280), float64], Tensor[(125), float64]) {
    %26 = @func_2910() /* ty=(Tensor[(280), float64],) */;
    %27 = @func_5650() /* ty=(Tensor[(280), float64], Tensor[(125), int8], Tensor[(36), float32], Tensor[(360), float32], Tensor[(12, 1, 3), float32]) */;
    %28 = %27.1;
    %29 = cast(%28, dtype="float64") /* ty=Tensor[(125), float64] */;
    %30 = sigmoid(%29) /* ty=Tensor[(125), float64] */;
    %31 = cast(%30, dtype="float64") /* ty=Tensor[(125), float64] */;
    %32 = %26.0;
    %33 = exp(%31) /* ty=Tensor[(125), float64] */;
    (%32, %33)
  };
  %34() /* ty=(Tensor[(280), float64], Tensor[(125), float64]) */
}

def @func_3757() -> (Tensor[(280), float64], Tensor[(125), float32]) {
  %35 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
  %36 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %37 = %36.3;
  %38 = cast(%37, dtype="float32") /* ty=Tensor[(125), float32] */;
  %39 = %35.0;
  %40 = atan(%38) /* ty=Tensor[(125), float32] */;
  (%39, %40)
}

def @func_6105(%var_6102: Tensor[(5, 14, 13), float64], %var_6103: Tensor[(280), float64], %var_6104: Tensor[(15, 99), float64]) -> (Tensor[(5, 14, 13), float64], Tensor[(12, 1, 3), float32], Tensor[(280), float64], Tensor[(11, 15, 9), float64], Tensor[(15, 99), float64]) {
  @func_6100(%var_6102, %var_6103, %var_6104) /* ty=(Tensor[(5, 14, 13), float64], Tensor[(12, 1, 3), float32], Tensor[(280), float64], Tensor[(11, 15, 9), float64], Tensor[(15, 99), float64]) */
}

def @func_10768() -> (Tensor[(12, 1, 3), float32],) {
  @func_10766() /* ty=(Tensor[(12, 1, 3), float32],) */
}

def @func_10144() -> (Tensor[(4, 5, 14), float64],) {
  %43 = fn () -> (Tensor[(4, 5, 14), float64],) {
    %41 = @func_9790() /* ty=(Tensor[(4, 5, 14), float64],) */;
    %42 = %41.0;
    (%42,)
  };
  %43() /* ty=(Tensor[(4, 5, 14), float64],) */
}

def @func_2911() -> (Tensor[(280), float64],) {
  %46 = fn () -> (Tensor[(280), float64],) {
    %44 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
    %45 = %44.2;
    (%45,)
  };
  %46() /* ty=(Tensor[(280), float64],) */
}

def @func_4923() -> Tensor[(10, 5, 11), float32] {
  @func_4921() /* ty=Tensor[(10, 5, 11), float32] */
}

def @func_4844() -> (Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64]) {
  %50 = fn () -> (Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64]) {
    %47 = @func_3368() /* ty=(Tensor[(280), float64], Tensor[(12, 3, 3), int64], Tensor[(11, 15, 9), float64]) */;
    %48 = @func_4074() /* ty=Tensor[(4, 5, 14), float64] */;
    %49 = %47.2;
    (%48, %49)
  };
  %50() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64]) */
}

def @func_8947(%var_8944: Tensor[(1485), float64]) -> (Tensor[(12, 1, 3), float32], Tensor[(1485), float32], Tensor[(1485), float64]) {
  %51 = @func_3577() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(280), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) */;
  %52 = cast(%var_8944, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %53 = reshape(%52, newshape=[1485]) /* ty=Tensor[(1485), float64] */;
  %54 = @func_3906(%53) /* ty=(Tensor[(1485), float32], Tensor[(12, 1, 3), float32]) */;
  %55 = %51.3;
  %56 = %54.0;
  (%55, %56, %var_8944)
}

def @func_7379(%var_7378: Tensor[(8, 9, 2), float64]) -> (Tensor[(8, 9, 2), float64],) {
  %59 = fn (%var_7365: Tensor[(8, 9, 2), float64]) -> (Tensor[(8, 9, 2), float64],) {
    %57 = cast(%var_7365, dtype="float64") /* ty=Tensor[(8, 9, 2), float64] */;
    %58 = log(%57) /* ty=Tensor[(8, 9, 2), float64] */;
    (%58,)
  };
  %59(%var_7378) /* ty=(Tensor[(8, 9, 2), float64],) */
}

def @func_5994() -> Tensor[(12, 1, 3), float64] {
  @func_5992() /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_11795() -> (Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) {
  %60 = @func_3194() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64], Tensor[(12, 1, 3), float32]) */;
  %61 = @func_11546() /* ty=Tensor[(12, 1, 3), float32] */;
  %62 = %60.0;
  (%61, %62)
}

def @func_6571(%var_6570: Tensor[(576), float32]) -> (Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(576), float32], Tensor[(12, 16, 3), float32], Tensor[(12, 1, 3), float32]) {
  %82 = fn (%var_6534: Tensor[(576), float32]) -> (Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(576), float32], Tensor[(12, 16, 3), float32], Tensor[(12, 1, 3), float32]) {
    %63 = @func_5968() /* ty=(Tensor[(9, 3, 3), float64], Tensor[(125), float32], Tensor[(12, 1, 3), float64]) */;
    %64 = @func_3878() /* ty=(Tensor[(4, 5, 14), float64],) */;
    %65 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
    %66 = @func_4202() /* ty=(Tensor[(12, 1, 3), float32],) */;
    %67 = cast(%var_6534, dtype="float32") /* ty=Tensor[(576), float32] */;
    %68 = reshape(%67, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %69 = @func_3945(%68) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) */;
    %70 = %69.2;
    %71 = cast(%70, dtype="float64") /* ty=Tensor[(12, 16, 3), float64] */;
    %72 = sinh(%71) /* ty=Tensor[(12, 16, 3), float64] */;
    %73 = cast(%72, dtype="float32") /* ty=Tensor[(12, 16, 3), float32] */;
    %74 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
    %75 = @func_4522() /* ty=Tensor[(4, 5, 14), float64] */;
    %76 = %63.2;
    %77 = %64.0;
    %78 = %65.1;
    %79 = %66.0;
    %80 = sqrt(%73) /* ty=Tensor[(12, 16, 3), float32] */;
    %81 = %74.1;
    (%75, %76, %77, %78, %79, %var_6534, %80, %81)
  };
  %82(%var_6570) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(576), float32], Tensor[(12, 16, 3), float32], Tensor[(12, 1, 3), float32]) */
}

def @func_3410() -> Tensor[(4, 5, 14), float64] {
  %83 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
  %83.1
}

def @func_9460() -> Tensor[(12, 1, 3), float64] {
  @func_9458() /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_3288() -> (Tensor[(125), float32], Tensor[(4, 5, 14), float64]) {
  %84 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
  %85 = @func_2945() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %86 = %84.0;
  %87 = %85.0;
  (%86, %87)
}

def @func_6259() -> (Tensor[(12, ?, 3), bool],) {
  %88 = @func_5992() /* ty=Tensor[(12, 1, 3), float64] */;
  %89 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %90 = %89.1;
  %91 = cast(%90, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %92 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%88, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %95 = logical_and(%93, %94) /* ty=Tensor[(12, ?, 3), bool] */;
  (%95,)
}

def @func_8034() -> (Tensor[(280), float64],) {
  @func_8032() /* ty=(Tensor[(280), float64],) */
}

def @main(%var_12032: Tensor[(14, 1, 8), float32]) -> (Tensor[(12, 1, 3), float32], Tensor[(660), float32], Tensor[(14, 1, 8), float32]) {
  %96 = cast(meta[relay.Constant][0] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %97 = reshape(%96, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), float32] */;
  %98 = @func_6988(%97) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(5, 11, 12), float32]) */;
  %99 = cast(%var_12032, dtype="float32") /* ty=Tensor[(14, 1, 8), float32] */;
  %100 = log(%99) /* ty=Tensor[(14, 1, 8), float32] */;
  %101 = cast(%100, dtype="float32") /* ty=Tensor[(14, 1, 8), float32] */;
  %102 = %98.0;
  %103 = exp(%101) /* ty=Tensor[(14, 1, 8), float32] */;
  (%102, meta[relay.Constant][0] /* ty=Tensor[(660), float32] */, %103)
}

def @func_2731() -> (Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) {
  @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */
}

def @func_9319(%var_9311: Tensor[(15, 13, 12), float64]) -> (Tensor[(15, 13, 12), float64],) {
  %104 = cast(%var_9311, dtype="float64") /* ty=Tensor[(15, 13, 12), float64] */;
  %105 = exp(%104) /* ty=Tensor[(15, 13, 12), float64] */;
  (%105,)
}

def @func_6837(%var_6825: Tensor[(12, 4, 3), float32]) -> (Tensor[(12, 4, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64]) {
  %106 = @func_2818() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %107 = %106.0;
  %108 = cast(%107, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %109 = cast(%var_6825, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %110 = divide(%108, %109) /* ty=Tensor[(12, 4, 3), float32] */;
  %111 = @func_4074() /* ty=Tensor[(4, 5, 14), float64] */;
  %112 = @func_5992() /* ty=Tensor[(12, 1, 3), float64] */;
  (%110, %111, %112)
}

def @func_2820() -> (Tensor[(12, 1, 3), float32],) {
  @func_2818() /* ty=(Tensor[(12, 1, 3), float32],) */
}

def @func_2729() -> (Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) {
  %113 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %114 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %115 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %116 = %114.1;
  %117 = cast(%116, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %118 = reshape(%117, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %119 = @func_405(%118) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) */;
  %120 = %119.2;
  %121 = cast(%120, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %122 = %113.0;
  %123 = %115.3;
  %124 = sinh(%121) /* ty=Tensor[(1485), float64] */;
  (%122, %116, %123, %124)
}

def @func_7151() -> (Tensor[(280), float64],) {
  @func_7149() /* ty=(Tensor[(280), float64],) */
}

def @func_3035(%var_3013: Tensor[(12, 1, 3), float32]) -> (Tensor[(12, ?, 3), uint32], Tensor[(12, 1, 3), float32], Tensor[(280), float64]) {
  %125 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %126 = %125.0;
  %127 = cast(%var_3013, dtype="uint32") /* ty=Tensor[(12, 1, 3), uint32] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%126, dtype="uint32") /* ty=Tensor[(12, 1, 3), uint32] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %131 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
  %132 = @func_2910() /* ty=(Tensor[(280), float64],) */;
  %133 = minimum(%129, %130) /* ty=Tensor[(12, ?, 3), uint32] */;
  %134 = %131.0;
  %135 = %132.0;
  (%133, %134, %135)
}

def @func_3579() -> (Tensor[(4, 5, 14), float64], Tensor[(280), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) {
  @func_3577() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(280), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) */
}

def @func_7679() -> (Tensor[(125), float64],) {
  %136 = @func_7264() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(125), float32]) */;
  %137 = %136.1;
  %138 = cast(%137, dtype="float64") /* ty=Tensor[(125), float64] */;
  %139 = sin(%138) /* ty=Tensor[(125), float64] */;
  (%139,)
}

def @func_6052() -> (Tensor[(12, 1, 3), float32], Tensor[(12, ?, 3), float64], Tensor[(360), float32]) {
  @func_6050() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, ?, 3), float64], Tensor[(360), float32]) */
}

def @func_8682() -> (Tensor[(576), float32],) {
  %140 = @func_6746() /* ty=(Tensor[(576), float32],) */;
  %141 = %140.0;
  (%141,)
}

def @func_4809(%var_4807: Tensor[(576), float32]) -> (Tensor[(280), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 6, 3), bool], Tensor[(216), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(280), float64]) {
  @func_4806(%var_4807) /* ty=(Tensor[(280), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 6, 3), bool], Tensor[(216), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(280), float64]) */
}

def @func_6218() -> Tensor[(12, 1, 3), float64] {
  %144 = fn () -> Tensor[(12, 1, 3), float64] {
    %142 = @func_5992() /* ty=Tensor[(12, 1, 3), float64] */;
    %143 = cast(%142, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
    tan(%143) /* ty=Tensor[(12, 1, 3), float64] */
  };
  %144() /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_2535() -> (Tensor[(12, 1, 3), float32],) {
  @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */
}

def @func_1196(%var_1194: Tensor[(2, 16, 8), float32], %var_1195: Tensor[(280), float64]) -> (Tensor[(2, 16, 8), float32], Tensor[(11, 15, 9), float64], Tensor[(280), float64], Tensor[(11, 15, 9), float64]) {
  %154 = fn (%var_1172: Tensor[(2, 16, 8), float32], %var_1177: Tensor[(280), float64]) -> (Tensor[(2, 16, 8), float32], Tensor[(11, 15, 9), float64], Tensor[(280), float64], Tensor[(11, 15, 9), float64]) {
    %145 = cast(%var_1172, dtype="float32") /* ty=Tensor[(2, 16, 8), float32] */;
    %146 = cast(%var_1177, dtype="float64") /* ty=Tensor[(280), float64] */;
    %147 = reshape(%146, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
    %148 = @func_405(%147) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) */;
    %149 = %148.1;
    %150 = cast(%149, dtype="float64") /* ty=Tensor[(11, 15, 9), float64] */;
    %151 = reshape(%150, newshape=[11, 15, 9]) /* ty=Tensor[(11, 15, 9), float64] */;
    %152 = sigmoid(%145) /* ty=Tensor[(2, 16, 8), float32] */;
    %153 = @func_72(%151) /* ty=Tensor[(11, 15, 9), float64] */;
    (%152, %149, %var_1177, %153)
  };
  %154(%var_1194, %var_1195) /* ty=(Tensor[(2, 16, 8), float32], Tensor[(11, 15, 9), float64], Tensor[(280), float64], Tensor[(11, 15, 9), float64]) */
}

def @func_4415() -> Tensor[(280), float64] {
  %156 = fn () -> Tensor[(280), float64] {
    %155 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
    %155.0
  };
  %156() /* ty=Tensor[(280), float64] */
}

def @func_3526(%var_3524: Tensor[(12, 16, 3), float32]) -> (Tensor[(12, 16, 3), int16], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(12, 16, 3), uint16], Tensor[(125), float64]) {
  @func_3523(%var_3524) /* ty=(Tensor[(12, 16, 3), int16], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(12, 16, 3), uint16], Tensor[(125), float64]) */
}

def @func_10730() -> Tensor[(280), float64] {
  @func_10728() /* ty=Tensor[(280), float64] */
}

def @func_10367() -> (Tensor[(36), float32], Tensor[(4, 5, 14), float64], Tensor[(80), float32]) {
  %163 = fn () -> (Tensor[(36), float32], Tensor[(4, 5, 14), float64], Tensor[(80), float32]) {
    %157 = @func_5650() /* ty=(Tensor[(280), float64], Tensor[(125), int8], Tensor[(36), float32], Tensor[(360), float32], Tensor[(12, 1, 3), float32]) */;
    %158 = cast(meta[relay.Constant][1] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
    %159 = reshape(%158, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), float32] */;
    %160 = @func_5730(%159) /* ty=(Tensor[(5, 8, 2), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) */;
    %161 = %157.2;
    %162 = %160.1;
    (%161, %162, meta[relay.Constant][1] /* ty=Tensor[(80), float32] */)
  };
  %163() /* ty=(Tensor[(36), float32], Tensor[(4, 5, 14), float64], Tensor[(80), float32]) */
}

def @func_9543() -> (Tensor[(7, 5, 15), uint64], Tensor[(125), int16], Tensor[(125), float32], Tensor[(576), float32]) {
  %173 = fn () -> (Tensor[(7, 5, 15), uint64], Tensor[(125), int16], Tensor[(125), float32], Tensor[(576), float32]) {
    %164 = cast(meta[relay.Constant][2] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %165 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 5, 15), uint64] */, dtype="uint64") /* ty=Tensor[(7, 5, 15), uint64] */;
    %166 = cast(meta[relay.Constant][4] /* ty=Tensor[(125), float32] */, dtype="float32") /* ty=Tensor[(125), float32] */;
    %167 = cast(meta[relay.Constant][5] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
    %168 = reshape(%166, newshape=[125]) /* ty=Tensor[(125), float32] */;
    %169 = reshape(%167, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %170 = @func_3862(%168, %169) /* ty=(Tensor[(125), int16], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) */;
    %171 = logical_xor(%164, %165) /* ty=Tensor[(7, 5, 15), uint64] */;
    %172 = %170.0;
    (%171, %172, meta[relay.Constant][4] /* ty=Tensor[(125), float32] */, meta[relay.Constant][5] /* ty=Tensor[(576), float32] */)
  };
  %173() /* ty=(Tensor[(7, 5, 15), uint64], Tensor[(125), int16], Tensor[(125), float32], Tensor[(576), float32]) */
}

def @func_6470() -> Tensor[(4, 5, 14), float64] {
  @func_6468() /* ty=Tensor[(4, 5, 14), float64] */
}

def @func_6475() -> (Tensor[(125), float32],) {
  %174 = @func_4292() /* ty=Tensor[(125), float32] */;
  (%174,)
}

def @func_8066() -> (Tensor[(4, 5, 14), float64],) {
  %179 = fn () -> (Tensor[(4, 5, 14), float64],) {
    %175 = @func_7637() /* ty=(Tensor[(280), float64], Tensor[(4, 5, 14), float64]) */;
    %176 = %175.1;
    %177 = cast(%176, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
    %178 = acos(%177) /* ty=Tensor[(4, 5, 14), float64] */;
    (%178,)
  };
  %179() /* ty=(Tensor[(4, 5, 14), float64],) */
}

def @func_5235() -> (Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(11, 15, 9), float64], Tensor[(12, 3, 3), int64]) {
  %189 = fn () -> (Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(11, 15, 9), float64], Tensor[(12, 3, 3), int64]) {
    %180 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
    %181 = @func_4843() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64]) */;
    %182 = %181.1;
    %183 = cast(%182, dtype="float64") /* ty=Tensor[(11, 15, 9), float64] */;
    %184 = reshape(%183, newshape=[11, 15, 9]) /* ty=Tensor[(11, 15, 9), float64] */;
    %185 = @func_3368() /* ty=(Tensor[(280), float64], Tensor[(12, 3, 3), int64], Tensor[(11, 15, 9), float64]) */;
    %186 = %180.0;
    %187 = @func_72(%184) /* ty=Tensor[(11, 15, 9), float64] */;
    %188 = %185.1;
    (%186, %182, %187, %188)
  };
  %189() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(11, 15, 9), float64], Tensor[(12, 3, 3), int64]) */
}

def @func_5024(%var_5022: Tensor[(125), float32]) -> (Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(125), float64]) {
  @func_5021(%var_5022) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(125), float64]) */
}

def @func_3398() -> (Tensor[(12, 1, 3), float32],) {
  @func_3396() /* ty=(Tensor[(12, 1, 3), float32],) */
}

def @func_5701(%var_5700: Tensor[(125), float32]) -> (Tensor[(125), bool], Tensor[(5, 5, 5), float32], Tensor[(12, 1, 3), float32]) {
  %204 = fn (%var_5667: Tensor[(125), float32]) -> (Tensor[(125), bool], Tensor[(5, 5, 5), float32], Tensor[(12, 1, 3), float32]) {
    %190 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
    %191 = %190.0;
    %192 = cast(%var_5667, dtype="bool") /* ty=Tensor[(125), bool] */;
    %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(1), int32] */;
    %194 = cast(%191, dtype="bool") /* ty=Tensor[(125), bool] */;
    %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?), bool] */;
    %196 = cast(%var_5667, dtype="float64") /* ty=Tensor[(125), float64] */;
    %197 = reshape(%196, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
    %198 = cast(%var_5667, dtype="float32") /* ty=Tensor[(125), float32] */;
    %199 = reshape(%198, newshape=[125]) /* ty=Tensor[(125), float32] */;
    %200 = @func_5021(%199) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(125), float64]) */;
    %201 = less(%194, %195) /* ty=Tensor[(125), bool] */;
    %202 = @func_951(%197) /* ty=Tensor[(5, 5, 5), float32] */;
    %203 = %200.0;
    (%201, %202, %203)
  };
  %204(%var_5700) /* ty=(Tensor[(125), bool], Tensor[(5, 5, 5), float32], Tensor[(12, 1, 3), float32]) */
}

def @func_6885() -> Tensor[(12, ?, 3), bool] {
  @func_6883() /* ty=Tensor[(12, ?, 3), bool] */
}

def @func_3880() -> (Tensor[(4, 5, 14), float64],) {
  @func_3878() /* ty=(Tensor[(4, 5, 14), float64],) */
}

def @func_6585() -> Tensor[(280), float64] {
  @func_6583() /* ty=Tensor[(280), float64] */
}

def @func_4074() -> Tensor[(4, 5, 14), float64] {
  %205 = @func_2945() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %205.0
}

def @func_6480() -> (Tensor[(4, 5, 14), float64],) {
  %206 = @func_2945() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %207 = %206.0;
  (%207,)
}

def @func_8364() -> (Tensor[(12, 1, 3), float32],) {
  @func_8362() /* ty=(Tensor[(12, 1, 3), float32],) */
}

def @func_407(%var_406: Tensor[(4, 5, 14), float64]) -> (Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) {
  %213 = fn (%var_391: Tensor[(4, 5, 14), float64]) -> (Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) {
    %208 = cast(%var_391, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
    %209 = cast(meta[relay.Constant][6] /* ty=Tensor[(1485), float64] */, dtype="float64") /* ty=Tensor[(1485), float64] */;
    %210 = reshape(%209, newshape=[11, 15, 9]) /* ty=Tensor[(11, 15, 9), float64] */;
    %211 = asin(%208) /* ty=Tensor[(4, 5, 14), float64] */;
    %212 = @func_72(%210) /* ty=Tensor[(11, 15, 9), float64] */;
    (%211, %212, meta[relay.Constant][6] /* ty=Tensor[(1485), float64] */)
  };
  %213(%var_406) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) */
}

def @func_8507(%var_8504: Tensor[(36), float32], %var_8505: Tensor[(360), float32], %var_8506: Tensor[(12, 48), float32]) -> (Tensor[(4, 5, 14), float64], Tensor[(360), float32], Tensor[(36), float32], Tensor[(360), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 48), float32]) {
  @func_8502(%var_8504, %var_8505, %var_8506) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(360), float32], Tensor[(36), float32], Tensor[(360), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 48), float32]) */
}

def @func_11165(%var_11162: Tensor[(12, 15, 3), float32], %var_11163: Tensor[(576), float32], %var_11164: Tensor[(660), float32]) -> (Tensor[(12, 15, 3), float64], Tensor[(12, 1, 3), float64], Tensor[(12, 15, 3), bool], Tensor[(12, 16, 3), bool], Tensor[(576), float32], Tensor[(1485), float64], Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(360), float32], Tensor[(1485), uint16], Tensor[(1485), float32], Tensor[(5, 11, 12), float32], Tensor[(660), float32]) {
  @func_11160(%var_11162, %var_11163, %var_11164) /* ty=(Tensor[(12, 15, 3), float64], Tensor[(12, 1, 3), float64], Tensor[(12, 15, 3), bool], Tensor[(12, 16, 3), bool], Tensor[(576), float32], Tensor[(1485), float64], Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(360), float32], Tensor[(1485), uint16], Tensor[(1485), float32], Tensor[(5, 11, 12), float32], Tensor[(660), float32]) */
}

def @func_5021(%var_5010: Tensor[(125), float32]) -> (Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(125), float64]) {
  %214 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %215 = @func_4843() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64]) */;
  %216 = @func_3757() /* ty=(Tensor[(280), float64], Tensor[(125), float32]) */;
  %217 = %216.1;
  %218 = cast(%var_5010, dtype="float64") /* ty=Tensor[(125), float64] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(1), int32] */;
  %220 = cast(%217, dtype="float64") /* ty=Tensor[(125), float64] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?), float64] */;
  %222 = %214.0;
  %223 = %215.1;
  %224 = floor_mod(%220, %221) /* ty=Tensor[(125), float64] */;
  (%222, %223, %224)
}

def @func_5841() -> (Tensor[(125), float32], Tensor[(576), float32], Tensor[(576), float32]) {
  %232 = fn () -> (Tensor[(125), float32], Tensor[(576), float32], Tensor[(576), float32]) {
    %225 = @func_4267() /* ty=Tensor[(125), float32] */;
    %226 = cast(%225, dtype="float32") /* ty=Tensor[(125), float32] */;
    %227 = cast(meta[relay.Constant][7] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
    %228 = reshape(%226, newshape=[125]) /* ty=Tensor[(125), float32] */;
    %229 = reshape(%227, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %230 = @func_3862(%228, %229) /* ty=(Tensor[(125), int16], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) */;
    %231 = %230.2;
    (%225, %231, meta[relay.Constant][7] /* ty=Tensor[(576), float32] */)
  };
  %232() /* ty=(Tensor[(125), float32], Tensor[(576), float32], Tensor[(576), float32]) */
}

def @func_9245() -> Tensor[(12, 13, 3), float32] {
  %233 = @func_5992() /* ty=Tensor[(12, 1, 3), float64] */;
  %234 = cast(%233, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %235 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 13, 3), float64] */, dtype="float32") /* ty=Tensor[(12, 13, 3), float32] */;
  maximum(%234, %235) /* ty=Tensor[(12, 13, 3), float32] */
}

def @func_10987() -> (Tensor[(125), float32],) {
  %238 = fn () -> (Tensor[(125), float32],) {
    %236 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
    %237 = %236.1;
    (%237,)
  };
  %238() /* ty=(Tensor[(125), float32],) */
}

def @func_9103() -> (Tensor[(125), float32],) {
  %241 = fn () -> (Tensor[(125), float32],) {
    %239 = @func_6475() /* ty=(Tensor[(125), float32],) */;
    %240 = %239.0;
    (%240,)
  };
  %241() /* ty=(Tensor[(125), float32],) */
}

def @func_11641() -> Tensor[(125), float32] {
  %242 = @func_11608() /* ty=(Tensor[(125), float32], Tensor[(12, 3, 3), float32]) */;
  %242.0
}

def @func_9458() -> Tensor[(12, 1, 3), float64] {
  @func_6217() /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_6789(%var_6787: Tensor[(7, 6, 6), float64], %var_6788: Tensor[(125), float64]) -> (Tensor[(7, 6, 6), float64], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) {
  %250 = fn (%var_6767: Tensor[(7, 6, 6), float64], %var_6776: Tensor[(125), float64]) -> (Tensor[(7, 6, 6), float64], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) {
    %243 = cast(%var_6767, dtype="float64") /* ty=Tensor[(7, 6, 6), float64] */;
    %244 = cast(%var_6776, dtype="float64") /* ty=Tensor[(125), float64] */;
    %245 = reshape(%244, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
    %246 = cast(%var_6776, dtype="float64") /* ty=Tensor[(125), float64] */;
    %247 = tan(%243) /* ty=Tensor[(7, 6, 6), float64] */;
    %248 = @func_951(%245) /* ty=Tensor[(5, 5, 5), float32] */;
    %249 = log(%246) /* ty=Tensor[(125), float64] */;
    (%247, %248, %249)
  };
  %250(%var_6787, %var_6788) /* ty=(Tensor[(7, 6, 6), float64], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */
}

def @func_6988(%var_6987: Tensor[(5, 11, 12), float32]) -> (Tensor[(12, 1, 3), float32], Tensor[(5, 11, 12), float32]) {
  %263 = fn (%var_6961: Tensor[(5, 11, 12), float32]) -> (Tensor[(12, 1, 3), float32], Tensor[(5, 11, 12), float32]) {
    %251 = @func_6050() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, ?, 3), float64], Tensor[(360), float32]) */;
    %252 = cast(%var_6961, dtype="float32") /* ty=Tensor[(5, 11, 12), float32] */;
    %253 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(5, 11, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %254 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 11, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 11, 12), float32] */;
    %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %256 = floor_divide(%254, %255) /* ty=Tensor[(5, 11, 12), float32] */;
    %257 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 11, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 11, 12), float32] */;
    %258 = shape_of(%256, dtype="int32") /* ty=Tensor[(3), int32] */;
    %259 = cast(%256, dtype="float32") /* ty=Tensor[(5, 11, 12), float32] */;
    %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %261 = %251.0;
    %262 = mod(%259, %260) /* ty=Tensor[(5, 11, 12), float32] */;
    (%261, %262)
  };
  %263(%var_6987) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(5, 11, 12), float32]) */
}

def @func_2585() -> (Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) {
  @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */
}

def @func_4668(%var_4629: Tensor[(4, 5, 14), float64]) -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(1485), float64], Tensor[(125), float32]) {
  %264 = @func_4522() /* ty=Tensor[(4, 5, 14), float64] */;
  %265 = cast(%var_4629, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%264, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %269 = @func_3878() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %270 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
  %271 = @func_3094() /* ty=(Tensor[(125), float64], Tensor[(12, ?, 3), int8], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %272 = cast(meta[relay.Constant][10] /* ty=Tensor[(1485), float64] */, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %273 = reshape(%272, newshape=[11, 15, 9]) /* ty=Tensor[(11, 15, 9), float64] */;
  %274 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %275 = floor_mod(%267, %268) /* ty=Tensor[(4, 5, 14), float64] */;
  %276 = %269.0;
  %277 = %270.0;
  %278 = %271.2;
  %279 = @func_72(%273) /* ty=Tensor[(11, 15, 9), float64] */;
  %280 = %274.1;
  (%275, %276, %277, %278, %279, meta[relay.Constant][10] /* ty=Tensor[(1485), float64] */, %280)
}

def @func_3369() -> (Tensor[(280), float64], Tensor[(12, 3, 3), int64], Tensor[(11, 15, 9), float64]) {
  %292 = fn () -> (Tensor[(280), float64], Tensor[(12, 3, 3), int64], Tensor[(11, 15, 9), float64]) {
    %281 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
    %282 = @func_2818() /* ty=(Tensor[(12, 1, 3), float32],) */;
    %283 = %282.0;
    %284 = cast(%283, dtype="int64") /* ty=Tensor[(12, 1, 3), int64] */;
    %285 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 3, 3), float32] */, dtype="int64") /* ty=Tensor[(12, 3, 3), int64] */;
    %286 = %281.0;
    %287 = cast(%286, dtype="float64") /* ty=Tensor[(280), float64] */;
    %288 = reshape(%287, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
    %289 = @func_405(%288) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) */;
    %290 = bitwise_and(%284, %285) /* ty=Tensor[(12, 3, 3), int64] */;
    %291 = %289.1;
    (%286, %290, %291)
  };
  %292() /* ty=(Tensor[(280), float64], Tensor[(12, 3, 3), int64], Tensor[(11, 15, 9), float64]) */
}

def @func_4759() -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64]) {
  @func_4757() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64]) */
}

def @func_5606(%var_5562: Tensor[(5, 56), float64], %var_5578: Tensor[(12, 1, 3), float64]) -> (Tensor[(1485), float64], Tensor[(5, 56), uint8], Tensor[(12, ?, 3), bool], Tensor[(5, 56), float32], Tensor[(125), float64], Tensor[(125), float32]) {
  %293 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 56), float64] */, dtype="float64") /* ty=Tensor[(5, 56), float64] */;
  %294 = reshape(%293, newshape=[280]) /* ty=Tensor[(280), float64] */;
  %295 = @func_4403(%294) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(1485), float64], Tensor[(280), float64]) */;
  %296 = cast(%var_5562, dtype="uint8") /* ty=Tensor[(5, 56), uint8] */;
  %297 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(5, 56), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %298 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 56), float64] */, dtype="uint8") /* ty=Tensor[(5, 56), uint8] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %300 = @func_3396() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %301 = %300.0;
  %302 = cast(%301, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
  %303 = log10(%302) /* ty=Tensor[(12, 1, 3), float64] */;
  %304 = cast(%var_5578, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%303, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %308 = cast(%var_5562, dtype="float32") /* ty=Tensor[(5, 56), float32] */;
  %309 = cast(meta[relay.Constant][13] /* ty=Tensor[(125), float32] */, dtype="float32") /* ty=Tensor[(125), float32] */;
  %310 = reshape(%309, newshape=[125]) /* ty=Tensor[(125), float32] */;
  %311 = @func_5021(%310) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(125), float64]) */;
  %312 = %295.1;
  %313 = right_shift(%298, %299) /* ty=Tensor[(5, 56), uint8] */;
  %314 = not_equal(%306, %307) /* ty=Tensor[(12, ?, 3), bool] */;
  %315 = acos(%308) /* ty=Tensor[(5, 56), float32] */;
  %316 = %311.2;
  (%312, %313, %314, %315, %316, meta[relay.Constant][13] /* ty=Tensor[(125), float32] */)
}

def @func_3396() -> (Tensor[(12, 1, 3), float32],) {
  %317 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %318 = %317.0;
  (%318,)
}

def @func_3759() -> (Tensor[(280), float64], Tensor[(125), float32]) {
  @func_3757() /* ty=(Tensor[(280), float64], Tensor[(125), float32]) */
}

def @func_4316() -> Tensor[(9, 3, 3), int32] {
  @func_4314() /* ty=Tensor[(9, 3, 3), int32] */
}

def @func_4100() -> Tensor[(12, 1, 3), float64] {
  %319 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %320 = %319.2;
  %321 = cast(%320, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
  asin(%321) /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_2818() -> (Tensor[(12, 1, 3), float32],) {
  %322 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %323 = %322.0;
  (%323,)
}

def @func_6747() -> (Tensor[(576), float32],) {
  %326 = fn () -> (Tensor[(576), float32],) {
    %324 = @func_5840() /* ty=(Tensor[(125), float32], Tensor[(576), float32], Tensor[(576), float32]) */;
    %325 = %324.1;
    (%325,)
  };
  %326() /* ty=(Tensor[(576), float32],) */
}

def @func_6443() -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64]) {
  %329 = fn () -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64]) {
    %327 = @func_4522() /* ty=Tensor[(4, 5, 14), float64] */;
    %328 = @func_4522() /* ty=Tensor[(4, 5, 14), float64] */;
    (%327, %328)
  };
  %329() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64]) */
}

def @func_4403(%var_4383: Tensor[(280), float64]) -> (Tensor[(12, 1, 3), float32], Tensor[(1485), float64], Tensor[(280), float64]) {
  %330 = cast(meta[relay.Constant][14] /* ty=Tensor[(1485), float64] */, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %331 = reshape(%330, newshape=[1485]) /* ty=Tensor[(1485), float64] */;
  %332 = @func_3729(%331) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), bool]) */;
  %333 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %334 = %333.2;
  %335 = cast(%var_4383, dtype="float64") /* ty=Tensor[(280), float64] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(1), int32] */;
  %337 = cast(%334, dtype="float64") /* ty=Tensor[(280), float64] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?), float64] */;
  %339 = %332.2;
  %340 = mod(%337, %338) /* ty=Tensor[(280), float64] */;
  (%339, meta[relay.Constant][14] /* ty=Tensor[(1485), float64] */, %340)
}

def @func_6482() -> (Tensor[(4, 5, 14), float64],) {
  @func_6480() /* ty=(Tensor[(4, 5, 14), float64],) */
}

def @func_10728() -> Tensor[(280), float64] {
  %341 = @func_10208() /* ty=(Tensor[(280), float64], Tensor[(125), float64]) */;
  %341.0
}

def @func_8587() -> (Tensor[(12, 1, 3), float32],) {
  %342 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %343 = %342.0;
  %344 = cast(%343, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %345 = atanh(%344) /* ty=Tensor[(12, 1, 3), float32] */;
  (%345,)
}

def @func_10534(%var_10532: Tensor[(7, 15, 6), int16], %var_10533: Tensor[(7, 15, 6), int16]) -> (Tensor[(7, 15, 6), int16], Tensor[(125), float32]) {
  %353 = fn (%var_10509: Tensor[(7, 15, 6), int16], %var_10510: Tensor[(7, 15, 6), int16]) -> (Tensor[(7, 15, 6), int16], Tensor[(125), float32]) {
    %346 = cast(%var_10510, dtype="int16") /* ty=Tensor[(7, 15, 6), int16] */;
    %347 = shape_of(%var_10509, dtype="int32") /* ty=Tensor[(3), int32] */;
    %348 = cast(%var_10509, dtype="int16") /* ty=Tensor[(7, 15, 6), int16] */;
    %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %350 = @func_6475() /* ty=(Tensor[(125), float32],) */;
    %351 = subtract(%348, %349) /* ty=Tensor[(7, 15, 6), int16] */;
    %352 = %350.0;
    (%351, %352)
  };
  %353(%var_10532, %var_10533) /* ty=(Tensor[(7, 15, 6), int16], Tensor[(125), float32]) */
}

def @func_10082(%var_10080: bool, %var_10081: Tensor[(15, 3, 15), bool]) -> Tensor[(15, 3, 15), bool] {
  %356 = fn (%var_10065: bool, %var_10066: Tensor[(15, 3, 15), bool]) -> Tensor[(15, 3, 15), bool] {
    %354 = cast(%var_10065, dtype="bool") /* ty=bool */;
    %355 = cast(%var_10066, dtype="bool") /* ty=Tensor[(15, 3, 15), bool] */;
    logical_and(%354, %355) /* ty=Tensor[(15, 3, 15), bool] */
  };
  %356(%var_10080, %var_10081) /* ty=Tensor[(15, 3, 15), bool] */
}

def @func_8289() -> (Tensor[(4, 5, 14), float64], Tensor[(125), float32], Tensor[(280), float64], Tensor[(5, 5, 5), float32]) {
  %366 = fn () -> (Tensor[(4, 5, 14), float64], Tensor[(125), float32], Tensor[(280), float64], Tensor[(5, 5, 5), float32]) {
    %357 = @func_6480() /* ty=(Tensor[(4, 5, 14), float64],) */;
    %358 = @func_6475() /* ty=(Tensor[(125), float32],) */;
    %359 = @func_3577() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(280), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) */;
    %360 = %358.0;
    %361 = cast(%360, dtype="float64") /* ty=Tensor[(125), float64] */;
    %362 = reshape(%361, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
    %363 = %357.0;
    %364 = %359.1;
    %365 = @func_951(%362) /* ty=Tensor[(5, 5, 5), float32] */;
    (%363, %360, %364, %365)
  };
  %366() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(125), float32], Tensor[(280), float64], Tensor[(5, 5, 5), float32]) */
}

def @func_2945() -> (Tensor[(4, 5, 14), float64],) {
  %367 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %368 = %367.1;
  (%368,)
}

def @func_6320() -> (Tensor[(4, 5, 14), uint32],) {
  %378 = fn () -> (Tensor[(4, 5, 14), uint32],) {
    %369 = @func_2945() /* ty=(Tensor[(4, 5, 14), float64],) */;
    %370 = %369.0;
    %371 = cast(%370, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
    %372 = sinh(%371) /* ty=Tensor[(4, 5, 14), float64] */;
    %373 = cast(%372, dtype="uint32") /* ty=Tensor[(4, 5, 14), uint32] */;
    %374 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
    %375 = cast(%370, dtype="uint32") /* ty=Tensor[(4, 5, 14), uint32] */;
    %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %377 = right_shift(%375, %376) /* ty=Tensor[(4, 5, 14), uint32] */;
    (%377,)
  };
  %378() /* ty=(Tensor[(4, 5, 14), uint32],) */
}

def @func_74(%var_73: Tensor[(11, 15, 9), float64]) -> Tensor[(11, 15, 9), float64] {
  %380 = fn (%var_69: Tensor[(11, 15, 9), float64]) -> Tensor[(11, 15, 9), float64] {
    %379 = cast(%var_69, dtype="float64") /* ty=Tensor[(11, 15, 9), float64] */;
    log(%379) /* ty=Tensor[(11, 15, 9), float64] */
  };
  %380(%var_73) /* ty=Tensor[(11, 15, 9), float64] */
}

def @func_4614() -> (Tensor[(280), float64], Tensor[(12, 1, 3), float32]) {
  %381 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
  %382 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %383 = %381.0;
  %384 = %382.2;
  (%383, %384)
}

def @func_11230() -> (Tensor[(125), float32],) {
  %385 = @func_5968() /* ty=(Tensor[(9, 3, 3), float64], Tensor[(125), float32], Tensor[(12, 1, 3), float64]) */;
  %386 = %385.1;
  (%386,)
}

def @func_3094() -> (Tensor[(125), float64], Tensor[(12, ?, 3), int8], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) {
  %387 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
  %388 = @func_2818() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %389 = %388.0;
  %390 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
  %391 = %390.1;
  %392 = cast(%391, dtype="int8") /* ty=Tensor[(12, 1, 3), int8] */;
  %393 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%389, dtype="int8") /* ty=Tensor[(12, 1, 3), int8] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %396 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
  %397 = %396.1;
  %398 = cast(%397, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %399 = @func_2945() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %400 = %387.2;
  %401 = bitwise_and(%394, %395) /* ty=Tensor[(12, ?, 3), int8] */;
  %402 = cosh(%398) /* ty=Tensor[(12, 1, 3), float32] */;
  %403 = %399.0;
  (%400, %401, %402, %403)
}

def @func_11663() -> Tensor[(12, 1, 3), float32] {
  @func_11661() /* ty=Tensor[(12, 1, 3), float32] */
}

def @func_6583() -> Tensor[(280), float64] {
  %404 = @func_2910() /* ty=(Tensor[(280), float64],) */;
  %404.0
}

def @func_5911() -> (Tensor[(12, 3, 3), int64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) {
  %411 = fn () -> (Tensor[(12, 3, 3), int64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) {
    %405 = @func_3368() /* ty=(Tensor[(280), float64], Tensor[(12, 3, 3), int64], Tensor[(11, 15, 9), float64]) */;
    %406 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
    %407 = @func_4202() /* ty=(Tensor[(12, 1, 3), float32],) */;
    %408 = %405.1;
    %409 = %406.2;
    %410 = %407.0;
    (%408, %409, %410)
  };
  %411() /* ty=(Tensor[(12, 3, 3), int64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) */
}

def @func_8384() -> (Tensor[(12, 1, 3), float64],) {
  %413 = fn () -> (Tensor[(12, 1, 3), float64],) {
    %412 = @func_5992() /* ty=Tensor[(12, 1, 3), float64] */;
    (%412,)
  };
  %413() /* ty=(Tensor[(12, 1, 3), float64],) */
}

def @func_4314() -> Tensor[(9, 3, 3), int32] {
  %414 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 3, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 3), float64] */;
  %415 = asinh(%414) /* ty=Tensor[(9, 3, 3), float64] */;
  %416 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 3, 3), float64] */, dtype="int32") /* ty=Tensor[(9, 3, 3), int32] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="int32") /* ty=Tensor[(9, 3, 3), int32] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_and(%418, %419) /* ty=Tensor[(9, 3, 3), int32] */
}

def @func_3096() -> (Tensor[(125), float64], Tensor[(12, ?, 3), int8], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) {
  @func_3094() /* ty=(Tensor[(125), float64], Tensor[(12, ?, 3), int8], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */
}

def @func_8615() -> (Tensor[(280), float64], Tensor[(125), uint64]) {
  %428 = fn () -> (Tensor[(280), float64], Tensor[(125), uint64]) {
    %420 = @func_5840() /* ty=(Tensor[(125), float32], Tensor[(576), float32], Tensor[(576), float32]) */;
    %421 = %420.0;
    %422 = cast(meta[relay.Constant][17] /* ty=Tensor[(125), float32] */, dtype="uint64") /* ty=Tensor[(125), uint64] */;
    %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(1), int32] */;
    %424 = cast(%421, dtype="uint64") /* ty=Tensor[(125), uint64] */;
    %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %426 = @func_6583() /* ty=Tensor[(280), float64] */;
    %427 = right_shift(%424, %425) /* ty=Tensor[(125), uint64] */;
    (%426, %427)
  };
  %428() /* ty=(Tensor[(280), float64], Tensor[(125), uint64]) */
}

def @func_2498() -> (Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) {
  %435 = fn () -> (Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) {
    %429 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 1, 3), float32] */, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
    %430 = cast(meta[relay.Constant][19] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
    %431 = reshape(%430, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
    %432 = @func_405(%431) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) */;
    %433 = sqrt(%429) /* ty=Tensor[(12, 1, 3), float32] */;
    %434 = %432.0;
    (%433, %434, meta[relay.Constant][19] /* ty=Tensor[(280), float64] */)
  };
  %435() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */
}

def @func_10479() -> Tensor[(12, 1, 3), float32] {
  @func_10477() /* ty=Tensor[(12, 1, 3), float32] */
}

def @func_8502(%var_8477: Tensor[(36), float32], %var_8478: Tensor[(360), float32], %var_8491: Tensor[(12, 48), float32]) -> (Tensor[(4, 5, 14), float64], Tensor[(360), float32], Tensor[(36), float32], Tensor[(360), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 48), float32]) {
  %436 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %437 = cast(%var_8477, dtype="float32") /* ty=Tensor[(36), float32] */;
  %438 = cast(%var_8478, dtype="float32") /* ty=Tensor[(360), float32] */;
  %439 = reshape(%437, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float32] */;
  %440 = reshape(%438, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %441 = @func_5322(%439, %440) /* ty=(Tensor[(125), int8], Tensor[(360), float32], Tensor[(12, ?, 3), float64]) */;
  %442 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
  %443 = %436.3;
  %444 = cast(%443, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %445 = reshape(%444, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %446 = @func_4668(%445) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(1485), float64], Tensor[(125), float32]) */;
  %447 = @func_8065() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %448 = cast(%var_8491, dtype="float32") /* ty=Tensor[(12, 48), float32] */;
  %449 = reshape(%448, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %450 = @func_4806(%449) /* ty=(Tensor[(280), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 6, 3), bool], Tensor[(216), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(280), float64]) */;
  %451 = %441.1;
  %452 = %442.1;
  %453 = %446.4;
  %454 = %447.0;
  %455 = %450.1;
  (%443, %451, %var_8477, %var_8478, %452, %453, %454, %455, %var_8491)
}

def @func_7968() -> Tensor[(12, 1, 3), float64] {
  %456 = fn () -> Tensor[(12, 1, 3), float64] {
    @func_5992() /* ty=Tensor[(12, 1, 3), float64] */
  };
  %456() /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_11564() -> (Tensor[(10, 5, 11), float32],) {
  @func_11562() /* ty=(Tensor[(10, 5, 11), float32],) */
}

def @func_7915() -> (Tensor[(12, 1, 3), float32],) {
  %457 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %458 = %457.2;
  (%458,)
}

def @func_6840(%var_6838: Tensor[(12, 4, 3), float32]) -> (Tensor[(12, 4, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64]) {
  @func_6837(%var_6838) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64]) */
}

def @func_5610(%var_5608: Tensor[(5, 56), float64], %var_5609: Tensor[(12, 1, 3), float64]) -> (Tensor[(1485), float64], Tensor[(5, 56), uint8], Tensor[(12, ?, 3), bool], Tensor[(5, 56), float32], Tensor[(125), float64], Tensor[(125), float32]) {
  @func_5606(%var_5608, %var_5609) /* ty=(Tensor[(1485), float64], Tensor[(5, 56), uint8], Tensor[(12, ?, 3), bool], Tensor[(5, 56), float32], Tensor[(125), float64], Tensor[(125), float32]) */
}

def @func_8456(%var_8455: Tensor[(108, 2), float32]) -> (Tensor[(280), float32], Tensor[(12, 6, 3), bool]) {
  %472 = fn (%var_8432: Tensor[(108, 2), float32]) -> (Tensor[(280), float32], Tensor[(12, 6, 3), bool]) {
    %459 = @func_2910() /* ty=(Tensor[(280), float64],) */;
    %460 = %459.0;
    %461 = cast(%460, dtype="float32") /* ty=Tensor[(280), float32] */;
    %462 = cast(%var_8432, dtype="float32") /* ty=Tensor[(108, 2), float32] */;
    %463 = reshape(%462, newshape=[216]) /* ty=Tensor[(216), float32] */;
    %464 = @func_7755(%463) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 6, 3), bool], Tensor[(216), float32], Tensor[(12, 1, 3), float32]) */;
    %465 = %464.2;
    %466 = cast(%var_8432, dtype="bool") /* ty=Tensor[(108, 2), bool] */;
    %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
    %468 = cast(%465, dtype="bool") /* ty=Tensor[(12, 6, 3), bool] */;
    %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %470 = sin(%461) /* ty=Tensor[(280), float32] */;
    %471 = less_equal(%468, %469) /* ty=Tensor[(12, 6, 3), bool] */;
    (%470, %471)
  };
  %472(%var_8455) /* ty=(Tensor[(280), float32], Tensor[(12, 6, 3), bool]) */
}

def @func_3577() -> (Tensor[(4, 5, 14), float64], Tensor[(280), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) {
  %473 = @func_2945() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %474 = @func_2910() /* ty=(Tensor[(280), float64],) */;
  %475 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
  %476 = @func_2818() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %477 = %473.0;
  %478 = %474.0;
  %479 = %475.1;
  %480 = %476.0;
  (%477, %478, %479, %480)
}

def @func_9791() -> (Tensor[(4, 5, 14), float64],) {
  %483 = fn () -> (Tensor[(4, 5, 14), float64],) {
    %481 = @func_3288() /* ty=(Tensor[(125), float32], Tensor[(4, 5, 14), float64]) */;
    %482 = %481.1;
    (%482,)
  };
  %483() /* ty=(Tensor[(4, 5, 14), float64],) */
}

def @func_7266() -> (Tensor[(4, 5, 14), float64], Tensor[(125), float32]) {
  @func_7264() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(125), float32]) */
}

def @func_3412() -> Tensor[(4, 5, 14), float64] {
  @func_3410() /* ty=Tensor[(4, 5, 14), float64] */
}

def @func_9367() -> (Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64]) {
  %487 = fn () -> (Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64]) {
    %484 = @func_8231() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(9, 3, 3), float32], Tensor[(12, 1, 3), float64], Tensor[(5, 5, 5), float32], Tensor[(25, 5), float64]) */;
    %485 = @func_4074() /* ty=Tensor[(4, 5, 14), float64] */;
    %486 = %484.2;
    (%485, %486)
  };
  %487() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64]) */
}

def @func_7508() -> (Tensor[(360), float32], Tensor[(125), float32]) {
  %492 = fn () -> (Tensor[(360), float32], Tensor[(125), float32]) {
    %488 = @func_5650() /* ty=(Tensor[(280), float64], Tensor[(125), int8], Tensor[(36), float32], Tensor[(360), float32], Tensor[(12, 1, 3), float32]) */;
    %489 = @func_7264() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(125), float32]) */;
    %490 = %488.3;
    %491 = %489.1;
    (%490, %491)
  };
  %492() /* ty=(Tensor[(360), float32], Tensor[(125), float32]) */
}

def @func_4406(%var_4404: Tensor[(280), float64]) -> (Tensor[(12, 1, 3), float32], Tensor[(1485), float64], Tensor[(280), float64]) {
  @func_4403(%var_4404) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(1485), float64], Tensor[(280), float64]) */
}

def @func_9962(%var_9906: Tensor[(9, 13, 15), float32]) -> (Tensor[(9, 13, 15), bool], Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(9, 13, 15), float32]) {
  %493 = cast(%var_9906, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
  %494 = atanh(%493) /* ty=Tensor[(9, 13, 15), float32] */;
  %495 = cast(%494, dtype="bool") /* ty=Tensor[(9, 13, 15), bool] */;
  %496 = shape_of(%var_9906, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%var_9906, dtype="bool") /* ty=Tensor[(9, 13, 15), bool] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %499 = @func_3288() /* ty=(Tensor[(125), float32], Tensor[(4, 5, 14), float64]) */;
  %500 = @func_8065() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %501 = cast(%494, dtype="float64") /* ty=Tensor[(9, 13, 15), float64] */;
  %502 = cosh(%501) /* ty=Tensor[(9, 13, 15), float64] */;
  %503 = cast(%502, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
  %504 = less(%497, %498) /* ty=Tensor[(9, 13, 15), bool] */;
  %505 = %499.1;
  %506 = %500.0;
  %507 = asin(%503) /* ty=Tensor[(9, 13, 15), float32] */;
  (%504, %505, %506, %507)
}

def @func_10627(%var_10625: Tensor[(12, 7, 15), float64]) -> (Tensor[(12, 7, 15), float64],) {
  @func_10624(%var_10625) /* ty=(Tensor[(12, 7, 15), float64],) */
}

def @func_7681() -> (Tensor[(125), float64],) {
  @func_7679() /* ty=(Tensor[(125), float64],) */
}

def @func_10691() -> (Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64]) {
  %508 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %509 = @func_8383() /* ty=(Tensor[(12, 1, 3), float64],) */;
  %510 = %508.1;
  %511 = %509.0;
  (%510, %511)
}

def @func_10788() -> (Tensor[(4, 5, 14), float64],) {
  %514 = fn () -> (Tensor[(4, 5, 14), float64],) {
    %512 = @func_10691() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64]) */;
    %513 = %512.0;
    (%513,)
  };
  %514() /* ty=(Tensor[(4, 5, 14), float64],) */
}

def @func_7565() -> (Tensor[(12, 1, 3), float32], Tensor[(576), float32]) {
  %519 = fn () -> (Tensor[(12, 1, 3), float32], Tensor[(576), float32]) {
    %515 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
    %516 = @func_5840() /* ty=(Tensor[(125), float32], Tensor[(576), float32], Tensor[(576), float32]) */;
    %517 = %515.1;
    %518 = %516.2;
    (%517, %518)
  };
  %519() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(576), float32]) */
}

def @func_7264() -> (Tensor[(4, 5, 14), float64], Tensor[(125), float32]) {
  %520 = @func_6442() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64]) */;
  %521 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %522 = %520.0;
  %523 = %521.0;
  (%522, %523)
}

def @func_7149() -> (Tensor[(280), float64],) {
  %524 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %525 = %524.2;
  (%525,)
}

def @func_3195() -> (Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64], Tensor[(12, 1, 3), float32]) {
  %539 = fn () -> (Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64], Tensor[(12, 1, 3), float32]) {
    %526 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
    %527 = @func_3094() /* ty=(Tensor[(125), float64], Tensor[(12, ?, 3), int8], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
    %528 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
    %529 = cast(meta[relay.Constant][20] /* ty=Tensor[(125), float64] */, dtype="float64") /* ty=Tensor[(125), float64] */;
    %530 = reshape(%529, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
    %531 = %526.1;
    %532 = cast(%531, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
    %533 = reshape(%532, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float32] */;
    %534 = @func_3035(%533) /* ty=(Tensor[(12, ?, 3), uint32], Tensor[(12, 1, 3), float32], Tensor[(280), float64]) */;
    %535 = %527.3;
    %536 = %528.1;
    %537 = @func_951(%530) /* ty=Tensor[(5, 5, 5), float32] */;
    %538 = %534.1;
    (%531, %535, %536, %537, meta[relay.Constant][20] /* ty=Tensor[(125), float64] */, %538)
  };
  %539() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64], Tensor[(12, 1, 3), float32]) */
}

def @func_9074(%var_9073: Tensor[(12, 1, 3), float32]) -> (Tensor[(576), float32], Tensor[(12, ?, 3), float64], Tensor[(12, 1, 3), float32]) {
  %551 = fn (%var_9036: Tensor[(12, 1, 3), float32]) -> (Tensor[(576), float32], Tensor[(12, ?, 3), float64], Tensor[(12, 1, 3), float32]) {
    %540 = @func_5840() /* ty=(Tensor[(125), float32], Tensor[(576), float32], Tensor[(576), float32]) */;
    %541 = @func_8587() /* ty=(Tensor[(12, 1, 3), float32],) */;
    %542 = %541.0;
    %543 = cast(%var_9036, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
    %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
    %545 = cast(%542, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
    %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %547 = @func_8587() /* ty=(Tensor[(12, 1, 3), float32],) */;
    %548 = %540.1;
    %549 = subtract(%545, %546) /* ty=Tensor[(12, ?, 3), float64] */;
    %550 = %547.0;
    (%548, %549, %550)
  };
  %551(%var_9073) /* ty=(Tensor[(576), float32], Tensor[(12, ?, 3), float64], Tensor[(12, 1, 3), float32]) */
}

def @func_9591() -> Tensor[(4, 5, 14), float64] {
  @func_9589() /* ty=Tensor[(4, 5, 14), float64] */
}

def @func_10262() -> Tensor[(12, 1, 3), float64] {
  %552 = fn () -> Tensor[(12, 1, 3), float64] {
    @func_7967() /* ty=Tensor[(12, 1, 3), float64] */
  };
  %552() /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_6883() -> Tensor[(12, ?, 3), bool] {
  %553 = @func_4202() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %554 = %553.0;
  %555 = @func_5992() /* ty=Tensor[(12, 1, 3), float64] */;
  %556 = cast(%555, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %557 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%554, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%558, %559) /* ty=Tensor[(12, ?, 3), bool] */
}

def @func_8362() -> (Tensor[(12, 1, 3), float32],) {
  %560 = @func_4202() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %561 = %560.0;
  (%561,)
}

def @func_6414() -> Tensor[(12, 1, 3), float32] {
  @func_6412() /* ty=Tensor[(12, 1, 3), float32] */
}

def @func_6261() -> (Tensor[(12, ?, 3), bool],) {
  @func_6259() /* ty=(Tensor[(12, ?, 3), bool],) */
}

def @func_11160(%var_11056: Tensor[(12, 15, 3), float32], %var_11078: Tensor[(576), float32], %var_11156: Tensor[(660), float32]) -> (Tensor[(12, 15, 3), float64], Tensor[(12, 1, 3), float64], Tensor[(12, 15, 3), bool], Tensor[(12, 16, 3), bool], Tensor[(576), float32], Tensor[(1485), float64], Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(360), float32], Tensor[(1485), uint16], Tensor[(1485), float32], Tensor[(5, 11, 12), float32], Tensor[(660), float32]) {
  %562 = @func_10477() /* ty=Tensor[(12, 1, 3), float32] */;
  %563 = cast(%562, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
  %564 = cast(%var_11056, dtype="float64") /* ty=Tensor[(12, 15, 3), float64] */;
  %565 = cast(%562, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %566 = cast(%var_11056, dtype="bool") /* ty=Tensor[(12, 15, 3), bool] */;
  %567 = cast(%var_11078, dtype="float32") /* ty=Tensor[(576), float32] */;
  %568 = cast(meta[relay.Constant][21] /* ty=Tensor[(1485), float64] */, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %569 = reshape(%567, newshape=[12, 16, 3]) /* ty=Tensor[(12, 16, 3), float32] */;
  %570 = reshape(%568, newshape=[1485]) /* ty=Tensor[(1485), float64] */;
  %571 = @func_8923(%569, %570) /* ty=(Tensor[(12, 16, 3), bool], Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) */;
  %572 = @func_9294() /* ty=(Tensor[(125), float32], Tensor[(576), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32]) */;
  %573 = @func_6442() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64]) */;
  %574 = @func_6050() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, ?, 3), float64], Tensor[(360), float32]) */;
  %575 = %572.2;
  %576 = cast(%575, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
  %577 = cast(%562, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
  %578 = reshape(%576, newshape=[5, 56]) /* ty=Tensor[(5, 56), float64] */;
  %579 = reshape(%577, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float64] */;
  %580 = @func_5606(%578, %579) /* ty=(Tensor[(1485), float64], Tensor[(5, 56), uint8], Tensor[(12, ?, 3), bool], Tensor[(5, 56), float32], Tensor[(125), float64], Tensor[(125), float32]) */;
  %581 = %580.0;
  %582 = cast(%581, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %583 = sigmoid(%582) /* ty=Tensor[(1485), float64] */;
  %584 = cast(%581, dtype="uint16") /* ty=Tensor[(1485), uint16] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(1), int32] */;
  %586 = cast(%583, dtype="uint16") /* ty=Tensor[(1485), uint16] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %588 = subtract(%586, %587) /* ty=Tensor[(1485), uint16] */;
  %589 = cast(%588, dtype="uint16") /* ty=Tensor[(1485), uint16] */;
  %590 = shape_of(%583, dtype="int32") /* ty=Tensor[(1), int32] */;
  %591 = cast(%583, dtype="uint16") /* ty=Tensor[(1485), uint16] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %593 = cast(%581, dtype="float32") /* ty=Tensor[(1485), float32] */;
  %594 = shape_of(%583, dtype="int32") /* ty=Tensor[(1), int32] */;
  %595 = cast(%583, dtype="float32") /* ty=Tensor[(1485), float32] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?), float32] */;
  %597 = cast(%var_11156, dtype="float32") /* ty=Tensor[(660), float32] */;
  %598 = reshape(%597, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), float32] */;
  %599 = @func_6986(%598) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(5, 11, 12), float32]) */;
  %600 = power(%563, %564) /* ty=Tensor[(12, 15, 3), float64] */;
  %601 = @func_6217() /* ty=Tensor[(12, 1, 3), float64] */;
  %602 = logical_and(%565, %566) /* ty=Tensor[(12, 15, 3), bool] */;
  %603 = %571.0;
  %604 = %573.1;
  %605 = %574.2;
  %606 = right_shift(%591, %592) /* ty=Tensor[(1485), uint16] */;
  %607 = mod(%595, %596) /* ty=Tensor[(1485), float32] */;
  %608 = %599.1;
  (%600, %601, %602, %603, %var_11078, meta[relay.Constant][21] /* ty=Tensor[(1485), float64] */, %575, %604, %605, %606, %607, %608, %var_11156)
}

def @func_9295() -> (Tensor[(125), float32], Tensor[(576), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32]) {
  %616 = fn () -> (Tensor[(125), float32], Tensor[(576), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32]) {
    %609 = @func_5840() /* ty=(Tensor[(125), float32], Tensor[(576), float32], Tensor[(576), float32]) */;
    %610 = @func_7564() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(576), float32]) */;
    %611 = @func_4202() /* ty=(Tensor[(12, 1, 3), float32],) */;
    %612 = %609.0;
    %613 = %610.1;
    %614 = @func_6468() /* ty=Tensor[(4, 5, 14), float64] */;
    %615 = %611.0;
    (%612, %613, %614, %615)
  };
  %616() /* ty=(Tensor[(125), float32], Tensor[(576), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32]) */
}

def @func_11192() -> (Tensor[(12, 1, 3), float32],) {
  %619 = fn () -> (Tensor[(12, 1, 3), float32],) {
    %617 = @func_10766() /* ty=(Tensor[(12, 1, 3), float32],) */;
    %618 = %617.0;
    (%618,)
  };
  %619() /* ty=(Tensor[(12, 1, 3), float32],) */
}

def @func_10859() -> (Tensor[(4, 5, 14), float64],) {
  %620 = @func_6480() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %621 = %620.0;
  (%621,)
}

def @func_6100(%var_6068: Tensor[(5, 14, 13), float64], %var_6079: Tensor[(280), float64], %var_6085: Tensor[(15, 99), float64]) -> (Tensor[(5, 14, 13), float64], Tensor[(12, 1, 3), float32], Tensor[(280), float64], Tensor[(11, 15, 9), float64], Tensor[(15, 99), float64]) {
  %622 = cast(%var_6068, dtype="float64") /* ty=Tensor[(5, 14, 13), float64] */;
  %623 = cast(%var_6079, dtype="float64") /* ty=Tensor[(280), float64] */;
  %624 = reshape(%623, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
  %625 = @func_4668(%624) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(1485), float64], Tensor[(125), float32]) */;
  %626 = cast(%var_6085, dtype="float64") /* ty=Tensor[(15, 99), float64] */;
  %627 = reshape(%626, newshape=[11, 15, 9]) /* ty=Tensor[(11, 15, 9), float64] */;
  %628 = log(%622) /* ty=Tensor[(5, 14, 13), float64] */;
  %629 = %625.3;
  %630 = @func_72(%627) /* ty=Tensor[(11, 15, 9), float64] */;
  (%628, %629, %var_6079, %630, %var_6085)
}

def @func_3523(%var_3462: Tensor[(12, 16, 3), float32]) -> (Tensor[(12, 16, 3), int16], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(12, 16, 3), uint16], Tensor[(125), float64]) {
  %631 = @func_3396() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %632 = %631.0;
  %633 = cast(%632, dtype="int16") /* ty=Tensor[(12, 1, 3), int16] */;
  %634 = cast(%var_3462, dtype="int16") /* ty=Tensor[(12, 16, 3), int16] */;
  %635 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
  %636 = @func_2818() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %637 = @func_2818() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %638 = cast(%var_3462, dtype="float64") /* ty=Tensor[(12, 16, 3), float64] */;
  %639 = log(%638) /* ty=Tensor[(12, 16, 3), float64] */;
  %640 = cast(%639, dtype="float32") /* ty=Tensor[(12, 16, 3), float32] */;
  %641 = acos(%640) /* ty=Tensor[(12, 16, 3), float32] */;
  %642 = cast(%639, dtype="uint16") /* ty=Tensor[(12, 16, 3), uint16] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%641, dtype="uint16") /* ty=Tensor[(12, 16, 3), uint16] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %646 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
  %647 = left_shift(%633, %634) /* ty=Tensor[(12, 16, 3), int16] */;
  %648 = %635.1;
  %649 = %636.0;
  %650 = %637.0;
  %651 = multiply(%644, %645) /* ty=Tensor[(12, 16, 3), uint16] */;
  %652 = %646.2;
  (%647, %648, %649, %650, %651, %652)
}

def @func_7757(%var_7756: Tensor[(216), float32]) -> (Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 6, 3), bool], Tensor[(216), float32], Tensor[(12, 1, 3), float32]) {
  %661 = fn (%var_7748: Tensor[(216), float32]) -> (Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 6, 3), bool], Tensor[(216), float32], Tensor[(12, 1, 3), float32]) {
    %653 = @func_3194() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64], Tensor[(12, 1, 3), float32]) */;
    %654 = cast(%var_7748, dtype="float32") /* ty=Tensor[(216), float32] */;
    %655 = reshape(%654, newshape=[12, 6, 3]) /* ty=Tensor[(12, 6, 3), float32] */;
    %656 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
    %657 = @func_6468() /* ty=Tensor[(4, 5, 14), float64] */;
    %658 = %653.5;
    %659 = @func_3801(%655) /* ty=Tensor[(12, 6, 3), bool] */;
    %660 = %656.1;
    (%657, %658, %659, %var_7748, %660)
  };
  %661(%var_7756) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 6, 3), bool], Tensor[(216), float32], Tensor[(12, 1, 3), float32]) */
}

def @func_3731(%var_3730: Tensor[(1485), float64]) -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), bool]) {
  %687 = fn (%var_3691: Tensor[(1485), float64]) -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), bool]) {
    %662 = @func_3288() /* ty=(Tensor[(125), float32], Tensor[(4, 5, 14), float64]) */;
    %663 = %662.1;
    %664 = cast(%663, dtype="float64") /* ty=Tensor[(4, 5, 14), float64] */;
    %665 = reshape(%664, newshape=[4, 5, 14]) /* ty=Tensor[(4, 5, 14), float64] */;
    %666 = @func_405(%665) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) */;
    %667 = @func_3194() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64], Tensor[(12, 1, 3), float32]) */;
    %668 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
    %669 = cast(%var_3691, dtype="float64") /* ty=Tensor[(1485), float64] */;
    %670 = reshape(%669, newshape=[11, 15, 9]) /* ty=Tensor[(11, 15, 9), float64] */;
    %671 = @func_72(%670) /* ty=Tensor[(11, 15, 9), float64] */;
    %672 = cast(%var_3691, dtype="float64") /* ty=Tensor[(1485), float64] */;
    %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
    %674 = cast(%671, dtype="float64") /* ty=Tensor[(11, 15, 9), float64] */;
    %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %676 = floor_mod(%674, %675) /* ty=Tensor[(11, 15, 9), float64] */;
    %677 = cast(%676, dtype="float32") /* ty=Tensor[(11, 15, 9), float32] */;
    %678 = atanh(%677) /* ty=Tensor[(11, 15, 9), float32] */;
    %679 = cast(%676, dtype="bool") /* ty=Tensor[(11, 15, 9), bool] */;
    %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
    %681 = cast(%678, dtype="bool") /* ty=Tensor[(11, 15, 9), bool] */;
    %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %683 = %666.0;
    %684 = %667.0;
    %685 = %668.1;
    %686 = greater_equal(%681, %682) /* ty=Tensor[(11, 15, 9), bool] */;
    (%663, %683, %684, %685, %686)
  };
  %687(%var_3730) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), bool]) */
}

def @func_8589() -> (Tensor[(12, 1, 3), float32],) {
  @func_8587() /* ty=(Tensor[(12, 1, 3), float32],) */
}

def @func_11475() -> (Tensor[(4, 5, 14), float64],) {
  %690 = fn () -> (Tensor[(4, 5, 14), float64],) {
    %688 = @func_10143() /* ty=(Tensor[(4, 5, 14), float64],) */;
    %689 = %688.0;
    (%689,)
  };
  %690() /* ty=(Tensor[(4, 5, 14), float64],) */
}

def @func_6799() -> (Tensor[(4, 5, 14), float64],) {
  @func_6797() /* ty=(Tensor[(4, 5, 14), float64],) */
}

def @func_2882() -> (Tensor[(125), float32], Tensor[(12, 1, 3), float32]) {
  @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */
}

def @func_2997() -> (Tensor[(280), float64], Tensor[(12, 1, 3), float32]) {
  %691 = @func_2910() /* ty=(Tensor[(280), float64],) */;
  %692 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
  %693 = %691.0;
  %694 = %692.1;
  (%693, %694)
}

def @func_2947() -> (Tensor[(4, 5, 14), float64],) {
  @func_2945() /* ty=(Tensor[(4, 5, 14), float64],) */
}

def @func_11232() -> (Tensor[(125), float32],) {
  @func_11230() /* ty=(Tensor[(125), float32],) */
}

def @func_10624(%var_10620: Tensor[(12, 7, 15), float64]) -> (Tensor[(12, 7, 15), float64],) {
  %695 = cast(%var_10620, dtype="float64") /* ty=Tensor[(12, 7, 15), float64] */;
  %696 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(12, 7, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 7, 15), float64] */, dtype="float64") /* ty=Tensor[(12, 7, 15), float64] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %699 = power(%697, %698) /* ty=Tensor[(12, 7, 15), float64] */;
  (%699,)
}

def @func_4293() -> Tensor[(125), float32] {
  %701 = fn () -> Tensor[(125), float32] {
    %700 = @func_3757() /* ty=(Tensor[(280), float64], Tensor[(125), float32]) */;
    %700.1
  };
  %701() /* ty=Tensor[(125), float32] */
}

def @func_6119() -> (Tensor[(4, 5, 14), float64],) {
  %703 = fn () -> (Tensor[(4, 5, 14), float64],) {
    %702 = @func_4522() /* ty=Tensor[(4, 5, 14), float64] */;
    (%702,)
  };
  %703() /* ty=(Tensor[(4, 5, 14), float64],) */
}

def @func_11661() -> Tensor[(12, 1, 3), float32] {
  @func_11527() /* ty=Tensor[(12, 1, 3), float32] */
}

def @func_12012(%var_12010: Tensor[(252), float64], %var_12011: Tensor[(125), float64]) -> (Tensor[(12, 1, 3), float32], Tensor[(125), float64], Tensor[(252), float64], Tensor[(125), float64]) {
  @func_12008(%var_12010, %var_12011) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(125), float64], Tensor[(252), float64], Tensor[(125), float64]) */
}

def @func_5322(%var_5302: Tensor[(12, 1, 3), float32], %var_5309: Tensor[(360), float32]) -> (Tensor[(125), int8], Tensor[(360), float32], Tensor[(12, ?, 3), float64]) {
  %704 = cast(%var_5309, dtype="float32") /* ty=Tensor[(360), float32] */;
  %705 = reshape(%704, newshape=[12, 10, 3]) /* ty=Tensor[(12, 10, 3), float32] */;
  %706 = @func_4597(%705) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(125), int8], Tensor[(12, 10, 3), int8]) */;
  %707 = @func_4895() /* ty=(Tensor[(10, 5, 11), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32]) */;
  %708 = %707.2;
  %709 = cast(%var_5302, dtype="int64") /* ty=Tensor[(12, 1, 3), int64] */;
  %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%708, dtype="int64") /* ty=Tensor[(12, 1, 3), int64] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %713 = logical_xor(%711, %712) /* ty=Tensor[(12, ?, 3), int64] */;
  %714 = cast(%713, dtype="float64") /* ty=Tensor[(12, ?, 3), float64] */;
  %715 = %706.1;
  %716 = acosh(%714) /* ty=Tensor[(12, ?, 3), float64] */;
  (%715, %var_5309, %716)
}

def @func_9731(%var_9729: Tensor[(36, 16), float32]) -> (Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(11, 15, 9), float64], Tensor[(36, 16), float32], Tensor[(1485), float64]) {
  @func_9728(%var_9729) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(11, 15, 9), float64], Tensor[(36, 16), float32], Tensor[(1485), float64]) */
}

def @func_6468() -> Tensor[(4, 5, 14), float64] {
  %717 = @func_6118() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %717.0
}

def @func_11548() -> Tensor[(12, 1, 3), float32] {
  @func_11546() /* ty=Tensor[(12, 1, 3), float32] */
}

def @func_11797() -> (Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) {
  @func_11795() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) */
}

def @func_4522() -> Tensor[(4, 5, 14), float64] {
  %718 = @func_3878() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %718.0
}

def @func_3906(%var_3883: Tensor[(1485), float64]) -> (Tensor[(1485), float32], Tensor[(12, 1, 3), float32]) {
  %719 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
  %720 = %719.3;
  %721 = cast(%var_3883, dtype="int64") /* ty=Tensor[(1485), int64] */;
  %722 = shape_of(%720, dtype="int32") /* ty=Tensor[(1), int32] */;
  %723 = cast(%720, dtype="int64") /* ty=Tensor[(1485), int64] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?), int64] */;
  %725 = maximum(%723, %724) /* ty=Tensor[(1485), int64] */;
  %726 = cast(%725, dtype="float32") /* ty=Tensor[(1485), float32] */;
  %727 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %728 = asin(%726) /* ty=Tensor[(1485), float32] */;
  %729 = %727.0;
  (%728, %729)
}

def @func_6050() -> (Tensor[(12, 1, 3), float32], Tensor[(12, ?, 3), float64], Tensor[(360), float32]) {
  %730 = @func_4202() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %731 = %730.0;
  %732 = cast(%731, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %733 = cast(meta[relay.Constant][23] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %734 = reshape(%732, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float32] */;
  %735 = reshape(%733, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %736 = @func_5322(%734, %735) /* ty=(Tensor[(125), int8], Tensor[(360), float32], Tensor[(12, ?, 3), float64]) */;
  %737 = %736.2;
  (%731, %737, meta[relay.Constant][23] /* ty=Tensor[(360), float32] */)
}

def @func_10294() -> Tensor[(12, 1, 3), float64] {
  %738 = fn () -> Tensor[(12, 1, 3), float64] {
    @func_5992() /* ty=Tensor[(12, 1, 3), float64] */
  };
  %738() /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_5651() -> (Tensor[(280), float64], Tensor[(125), int8], Tensor[(36), float32], Tensor[(360), float32], Tensor[(12, 1, 3), float32]) {
  %749 = fn () -> (Tensor[(280), float64], Tensor[(125), int8], Tensor[(36), float32], Tensor[(360), float32], Tensor[(12, 1, 3), float32]) {
    %739 = @func_3757() /* ty=(Tensor[(280), float64], Tensor[(125), float32]) */;
    %740 = cast(meta[relay.Constant][24] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %741 = cast(meta[relay.Constant][25] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
    %742 = reshape(%740, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float32] */;
    %743 = reshape(%741, newshape=[360]) /* ty=Tensor[(360), float32] */;
    %744 = @func_5322(%742, %743) /* ty=(Tensor[(125), int8], Tensor[(360), float32], Tensor[(12, ?, 3), float64]) */;
    %745 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
    %746 = %739.0;
    %747 = %744.0;
    %748 = %745.1;
    (%746, %747, meta[relay.Constant][24] /* ty=Tensor[(36), float32] */, meta[relay.Constant][25] /* ty=Tensor[(360), float32] */, %748)
  };
  %749() /* ty=(Tensor[(280), float64], Tensor[(125), int8], Tensor[(36), float32], Tensor[(360), float32], Tensor[(12, 1, 3), float32]) */
}

def @func_11609() -> (Tensor[(125), float32], Tensor[(12, 3, 3), float32]) {
  %757 = fn () -> (Tensor[(125), float32], Tensor[(12, 3, 3), float32]) {
    %750 = @func_9102() /* ty=(Tensor[(125), float32],) */;
    %751 = @func_9366() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64]) */;
    %752 = %751.1;
    %753 = cast(%752, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
    %754 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 3, 3), float64] */, dtype="float32") /* ty=Tensor[(12, 3, 3), float32] */;
    %755 = %750.0;
    %756 = minimum(%753, %754) /* ty=Tensor[(12, 3, 3), float32] */;
    (%755, %756)
  };
  %757() /* ty=(Tensor[(125), float32], Tensor[(12, 3, 3), float32]) */
}

def @func_10861() -> (Tensor[(4, 5, 14), float64],) {
  @func_10859() /* ty=(Tensor[(4, 5, 14), float64],) */
}

def @func_10693() -> (Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64]) {
  @func_10691() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float64]) */
}

def @func_11517() -> (Tensor[(12, 1, 3), float32], Tensor[(12, 13, 3), float32], Tensor[(11, 15, 9), float64]) {
  %767 = fn () -> (Tensor[(12, 1, 3), float32], Tensor[(12, 13, 3), float32], Tensor[(11, 15, 9), float64]) {
    %758 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
    %759 = @func_9245() /* ty=Tensor[(12, 13, 3), float32] */;
    %760 = cast(%759, dtype="float32") /* ty=Tensor[(12, 13, 3), float32] */;
    %761 = cos(%760) /* ty=Tensor[(12, 13, 3), float32] */;
    %762 = cast(%761, dtype="float32") /* ty=Tensor[(12, 13, 3), float32] */;
    %763 = @func_3368() /* ty=(Tensor[(280), float64], Tensor[(12, 3, 3), int64], Tensor[(11, 15, 9), float64]) */;
    %764 = %758.0;
    %765 = acosh(%762) /* ty=Tensor[(12, 13, 3), float32] */;
    %766 = %763.2;
    (%764, %765, %766)
  };
  %767() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 13, 3), float32], Tensor[(11, 15, 9), float64]) */
}

def @func_7204() -> (Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) {
  %771 = fn () -> (Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) {
    %768 = @func_3094() /* ty=(Tensor[(125), float64], Tensor[(12, ?, 3), int8], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
    %769 = %768.2;
    %770 = @func_4522() /* ty=Tensor[(4, 5, 14), float64] */;
    (%769, %770)
  };
  %771() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */
}

def @func_6912() -> Tensor[(280), float64] {
  %773 = fn () -> Tensor[(280), float64] {
    %772 = @func_5650() /* ty=(Tensor[(280), float64], Tensor[(125), int8], Tensor[(36), float32], Tensor[(360), float32], Tensor[(12, 1, 3), float32]) */;
    %772.0
  };
  %773() /* ty=Tensor[(280), float64] */
}

def @func_8950(%var_8948: Tensor[(1485), float64]) -> (Tensor[(12, 1, 3), float32], Tensor[(1485), float32], Tensor[(1485), float64]) {
  @func_8947(%var_8948) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(1485), float32], Tensor[(1485), float64]) */
}

def @func_6797() -> (Tensor[(4, 5, 14), float64],) {
  %774 = @func_6468() /* ty=Tensor[(4, 5, 14), float64] */;
  (%774,)
}

def @func_3947(%var_3946: Tensor[(576), float32]) -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) {
  %783 = fn (%var_3936: Tensor[(576), float32]) -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) {
    %775 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
    %776 = @func_2945() /* ty=(Tensor[(4, 5, 14), float64],) */;
    %777 = cast(%var_3936, dtype="float32") /* ty=Tensor[(576), float32] */;
    %778 = reshape(%777, newshape=[12, 16, 3]) /* ty=Tensor[(12, 16, 3), float32] */;
    %779 = @func_3523(%778) /* ty=(Tensor[(12, 16, 3), int16], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(12, 16, 3), uint16], Tensor[(125), float64]) */;
    %780 = %775.1;
    %781 = %776.0;
    %782 = %779.4;
    (%780, %781, %782, %var_3936)
  };
  %783(%var_3946) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) */
}

def @func_6674() -> Tensor[(12, 1, 3), float64] {
  @func_6672() /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_8684() -> (Tensor[(576), float32],) {
  @func_8682() /* ty=(Tensor[(576), float32],) */
}

def @func_4599(%var_4598: Tensor[(12, 10, 3), float32]) -> (Tensor[(12, 1, 3), float32], Tensor[(125), int8], Tensor[(12, 10, 3), int8]) {
  %798 = fn (%var_4587: Tensor[(12, 10, 3), float32]) -> (Tensor[(12, 1, 3), float32], Tensor[(125), int8], Tensor[(12, 10, 3), int8]) {
    %784 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
    %785 = @func_3288() /* ty=(Tensor[(125), float32], Tensor[(4, 5, 14), float64]) */;
    %786 = %785.0;
    %787 = cast(meta[relay.Constant][27] /* ty=Tensor[(125), float32] */, dtype="int8") /* ty=Tensor[(125), int8] */;
    %788 = shape_of(%786, dtype="int32") /* ty=Tensor[(1), int32] */;
    %789 = cast(%786, dtype="int8") /* ty=Tensor[(125), int8] */;
    %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?), int8] */;
    %791 = @func_3094() /* ty=(Tensor[(125), float64], Tensor[(12, ?, 3), int8], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
    %792 = %791.2;
    %793 = cast(%792, dtype="int8") /* ty=Tensor[(12, 1, 3), int8] */;
    %794 = cast(%var_4587, dtype="int8") /* ty=Tensor[(12, 10, 3), int8] */;
    %795 = %784.0;
    %796 = subtract(%789, %790) /* ty=Tensor[(125), int8] */;
    %797 = bitwise_xor(%793, %794) /* ty=Tensor[(12, 10, 3), int8] */;
    (%795, %796, %797)
  };
  %798(%var_4598) /* ty=(Tensor[(12, 1, 3), float32], Tensor[(125), int8], Tensor[(12, 10, 3), int8]) */
}

def @func_4806(%var_4784: Tensor[(576), float32]) -> (Tensor[(280), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 6, 3), bool], Tensor[(216), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(280), float64]) {
  %799 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %800 = @func_3094() /* ty=(Tensor[(125), float64], Tensor[(12, ?, 3), int8], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %801 = cast(meta[relay.Constant][28] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %802 = reshape(%801, newshape=[12, 6, 3]) /* ty=Tensor[(12, 6, 3), float32] */;
  %803 = cast(%var_4784, dtype="float32") /* ty=Tensor[(576), float32] */;
  %804 = reshape(%803, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %805 = @func_3945(%804) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) */;
  %806 = %799.2;
  %807 = %800.3;
  %808 = @func_3801(%802) /* ty=Tensor[(12, 6, 3), bool] */;
  %809 = %805.3;
  %810 = @func_4414() /* ty=Tensor[(280), float64] */;
  (%806, %807, %808, meta[relay.Constant][28] /* ty=Tensor[(216), float32] */, %809, %var_4784, %810)
}

def @func_9589() -> Tensor[(4, 5, 14), float64] {
  @func_4074() /* ty=Tensor[(4, 5, 14), float64] */
}

def @func_4269() -> Tensor[(125), float32] {
  @func_4267() /* ty=Tensor[(125), float32] */
}

def @func_3866(%var_3864: Tensor[(125), float32], %var_3865: Tensor[(576), float32]) -> (Tensor[(125), int16], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) {
  @func_3862(%var_3864, %var_3865) /* ty=(Tensor[(125), int16], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) */
}

def @func_5732(%var_5731: Tensor[(5, 8, 2), float32]) -> (Tensor[(5, 8, 2), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) {
  %819 = fn (%var_5705: Tensor[(5, 8, 2), float32]) -> (Tensor[(5, 8, 2), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) {
    %811 = cast(%var_5705, dtype="float32") /* ty=Tensor[(5, 8, 2), float32] */;
    %812 = @func_3615() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
    %813 = cast(meta[relay.Constant][29] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
    %814 = reshape(%813, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %815 = @func_3945(%814) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) */;
    %816 = cos(%811) /* ty=Tensor[(5, 8, 2), float32] */;
    %817 = %812.3;
    %818 = %815.2;
    (%816, %817, %818, meta[relay.Constant][29] /* ty=Tensor[(576), float32] */)
  };
  %819(%var_5731) /* ty=(Tensor[(5, 8, 2), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 16, 3), uint16], Tensor[(576), float32]) */
}

def @func_6672() -> Tensor[(12, 1, 3), float64] {
  @func_6217() /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_3909(%var_3907: Tensor[(1485), float64]) -> (Tensor[(1485), float32], Tensor[(12, 1, 3), float32]) {
  @func_3906(%var_3907) /* ty=(Tensor[(1485), float32], Tensor[(12, 1, 3), float32]) */
}

def @func_10460() -> (Tensor[(1485), float64], Tensor[(12, ?, 3), float32]) {
  %833 = fn () -> (Tensor[(1485), float64], Tensor[(12, ?, 3), float32]) {
    %820 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
    %821 = @func_5910() /* ty=(Tensor[(12, 3, 3), int64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) */;
    %822 = %821.1;
    %823 = cast(%822, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
    %824 = reshape(%823, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float32] */;
    %825 = @func_3035(%824) /* ty=(Tensor[(12, ?, 3), uint32], Tensor[(12, 1, 3), float32], Tensor[(280), float64]) */;
    %826 = %825.1;
    %827 = cast(%826, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
    %828 = shape_of(%822, dtype="int32") /* ty=Tensor[(3), int32] */;
    %829 = cast(%822, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
    %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %831 = %820.3;
    %832 = power(%829, %830) /* ty=Tensor[(12, ?, 3), float32] */;
    (%831, %832)
  };
  %833() /* ty=(Tensor[(1485), float64], Tensor[(12, ?, 3), float32]) */
}

def @func_4757() -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64]) {
  %834 = @func_3094() /* ty=(Tensor[(125), float64], Tensor[(12, ?, 3), int8], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */;
  %835 = @func_2729() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(1485), float64]) */;
  %836 = %834.3;
  %837 = %835.1;
  (%836, %837)
}

def @func_3290() -> (Tensor[(125), float32], Tensor[(4, 5, 14), float64]) {
  @func_3288() /* ty=(Tensor[(125), float32], Tensor[(4, 5, 14), float64]) */
}

def @func_4076() -> Tensor[(4, 5, 14), float64] {
  @func_4074() /* ty=Tensor[(4, 5, 14), float64] */
}

def @func_4616() -> (Tensor[(280), float64], Tensor[(12, 1, 3), float32]) {
  @func_4614() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */
}

def @func_4267() -> Tensor[(125), float32] {
  %838 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
  %838.0
}

def @func_7638() -> (Tensor[(280), float64], Tensor[(4, 5, 14), float64]) {
  %843 = fn () -> (Tensor[(280), float64], Tensor[(4, 5, 14), float64]) {
    %839 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
    %840 = @func_3878() /* ty=(Tensor[(4, 5, 14), float64],) */;
    %841 = %839.2;
    %842 = %840.0;
    (%841, %842)
  };
  %843() /* ty=(Tensor[(280), float64], Tensor[(4, 5, 14), float64]) */
}

def @func_9247() -> Tensor[(12, 13, 3), float32] {
  @func_9245() /* ty=Tensor[(12, 13, 3), float32] */
}

def @func_9728(%var_9712: Tensor[(36, 16), float32]) -> (Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(125), float64], Tensor[(11, 15, 9), float64], Tensor[(36, 16), float32], Tensor[(1485), float64]) {
  %844 = @func_4202() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %845 = @func_6480() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %846 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %847 = cast(%var_9712, dtype="float32") /* ty=Tensor[(36, 16), float32] */;
  %848 = cast(meta[relay.Constant][30] /* ty=Tensor[(1485), float64] */, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %849 = reshape(%847, newshape=[12, 16, 3]) /* ty=Tensor[(12, 16, 3), float32] */;
  %850 = reshape(%848, newshape=[1485]) /* ty=Tensor[(1485), float64] */;
  %851 = @func_8923(%849, %850) /* ty=(Tensor[(12, 16, 3), bool], Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) */;
  %852 = %844.0;
  %853 = %845.0;
  %854 = %846.3;
  %855 = %851.2;
  (%852, %853, %854, %855, %var_9712, meta[relay.Constant][30] /* ty=Tensor[(1485), float64] */)
}

def @func_6412() -> Tensor[(12, 1, 3), float32] {
  %856 = @func_5910() /* ty=(Tensor[(12, 3, 3), int64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) */;
  %856.1
}

def @func_8926(%var_8924: Tensor[(12, 16, 3), float32], %var_8925: Tensor[(1485), float64]) -> (Tensor[(12, 16, 3), bool], Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) {
  %867 = fn (%var_8892: Tensor[(12, 16, 3), float32], %var_8906: Tensor[(1485), float64]) -> (Tensor[(12, 16, 3), bool], Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) {
    %857 = @func_8362() /* ty=(Tensor[(12, 1, 3), float32],) */;
    %858 = %857.0;
    %859 = cast(%858, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
    %860 = cast(%var_8892, dtype="bool") /* ty=Tensor[(12, 16, 3), bool] */;
    %861 = @func_6480() /* ty=(Tensor[(4, 5, 14), float64],) */;
    %862 = cast(%var_8906, dtype="float64") /* ty=Tensor[(1485), float64] */;
    %863 = reshape(%862, newshape=[11, 15, 9]) /* ty=Tensor[(11, 15, 9), float64] */;
    %864 = not_equal(%859, %860) /* ty=Tensor[(12, 16, 3), bool] */;
    %865 = %861.0;
    %866 = @func_72(%863) /* ty=Tensor[(11, 15, 9), float64] */;
    (%864, %865, %866, %var_8906)
  };
  %867(%var_8924, %var_8925) /* ty=(Tensor[(12, 16, 3), bool], Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64], Tensor[(1485), float64]) */
}

def @func_2533() -> (Tensor[(12, 1, 3), float32],) {
  %868 = @func_2497() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(280), float64]) */;
  %869 = %868.0;
  (%869,)
}

def @func_9322(%var_9320: Tensor[(15, 13, 12), float64]) -> (Tensor[(15, 13, 12), float64],) {
  @func_9319(%var_9320) /* ty=(Tensor[(15, 13, 12), float64],) */
}

def @func_8789() -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(165, 9), bool]) {
  %880 = fn () -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(165, 9), bool]) {
    %870 = cast(meta[relay.Constant][31] /* ty=Tensor[(165, 9), float64] */, dtype="float64") /* ty=Tensor[(165, 9), float64] */;
    %871 = reshape(%870, newshape=[1485]) /* ty=Tensor[(1485), float64] */;
    %872 = @func_3729(%871) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), bool]) */;
    %873 = cast(meta[relay.Constant][32] /* ty=Tensor[(165, 9), float64] */, dtype="bool") /* ty=Tensor[(165, 9), bool] */;
    %874 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(165, 9), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %875 = cast(meta[relay.Constant][31] /* ty=Tensor[(165, 9), float64] */, dtype="bool") /* ty=Tensor[(165, 9), bool] */;
    %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %877 = @func_6468() /* ty=Tensor[(4, 5, 14), float64] */;
    %878 = %872.1;
    %879 = less_equal(%875, %876) /* ty=Tensor[(165, 9), bool] */;
    (%877, %878, %879)
  };
  %880() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(165, 9), bool]) */
}

def @func_10766() -> (Tensor[(12, 1, 3), float32],) {
  %881 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %882 = %881.0;
  (%882,)
}

def @func_4921() -> Tensor[(10, 5, 11), float32] {
  %883 = @func_4895() /* ty=(Tensor[(10, 5, 11), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32]) */;
  %883.0
}

def @func_3878() -> (Tensor[(4, 5, 14), float64],) {
  %884 = @func_3288() /* ty=(Tensor[(125), float32], Tensor[(4, 5, 14), float64]) */;
  %885 = %884.1;
  (%885,)
}

def @func_5326(%var_5324: Tensor[(12, 1, 3), float32], %var_5325: Tensor[(360), float32]) -> (Tensor[(125), int8], Tensor[(360), float32], Tensor[(12, ?, 3), float64]) {
  @func_5322(%var_5324, %var_5325) /* ty=(Tensor[(125), int8], Tensor[(360), float32], Tensor[(12, ?, 3), float64]) */
}

def @func_8231() -> (Tensor[(4, 5, 14), float64], Tensor[(9, 3, 3), float32], Tensor[(12, 1, 3), float64], Tensor[(5, 5, 5), float32], Tensor[(25, 5), float64]) {
  %886 = @func_6118() /* ty=(Tensor[(4, 5, 14), float64],) */;
  %887 = @func_4314() /* ty=Tensor[(9, 3, 3), int32] */;
  %888 = cast(%887, dtype="float32") /* ty=Tensor[(9, 3, 3), float32] */;
  %889 = cast(meta[relay.Constant][33] /* ty=Tensor[(25, 5), float64] */, dtype="float64") /* ty=Tensor[(25, 5), float64] */;
  %890 = reshape(%889, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
  %891 = %886.0;
  %892 = cos(%888) /* ty=Tensor[(9, 3, 3), float32] */;
  %893 = @func_5992() /* ty=Tensor[(12, 1, 3), float64] */;
  %894 = @func_951(%890) /* ty=Tensor[(5, 5, 5), float32] */;
  (%891, %892, %893, %894, meta[relay.Constant][33] /* ty=Tensor[(25, 5), float64] */)
}

def @func_11258() -> (Tensor[(12, 1, 3), float32], Tensor[(10, 5, 11), float32]) {
  @func_11256() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(10, 5, 11), float32]) */
}

def @func_10894() -> (Tensor[(10, 5, 11), float32],) {
  %896 = fn () -> (Tensor[(10, 5, 11), float32],) {
    %895 = @func_4921() /* ty=Tensor[(10, 5, 11), float32] */;
    (%895,)
  };
  %896() /* ty=(Tensor[(10, 5, 11), float32],) */
}

def @func_11298() -> (Tensor[(12, 1, 3), float32],) {
  %898 = fn () -> (Tensor[(12, 1, 3), float32],) {
    %897 = @func_6412() /* ty=Tensor[(12, 1, 3), float32] */;
    (%897,)
  };
  %898() /* ty=(Tensor[(12, 1, 3), float32],) */
}

def @func_5969() -> (Tensor[(9, 3, 3), float64], Tensor[(125), float32], Tensor[(12, 1, 3), float64]) {
  %904 = fn () -> (Tensor[(9, 3, 3), float64], Tensor[(125), float32], Tensor[(12, 1, 3), float64]) {
    %899 = @func_4314() /* ty=Tensor[(9, 3, 3), int32] */;
    %900 = cast(%899, dtype="float64") /* ty=Tensor[(9, 3, 3), float64] */;
    %901 = acos(%900) /* ty=Tensor[(9, 3, 3), float64] */;
    %902 = @func_4292() /* ty=Tensor[(125), float32] */;
    %903 = @func_4100() /* ty=Tensor[(12, 1, 3), float64] */;
    (%901, %902, %903)
  };
  %904() /* ty=(Tensor[(9, 3, 3), float64], Tensor[(125), float32], Tensor[(12, 1, 3), float64]) */
}

def @func_2880() -> (Tensor[(125), float32], Tensor[(12, 1, 3), float32]) {
  %905 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %906 = %905.3;
  %907 = cast(%906, dtype="float32") /* ty=Tensor[(125), float32] */;
  %908 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %909 = erf(%907) /* ty=Tensor[(125), float32] */;
  %910 = %908.1;
  (%909, %910)
}

def @func_5471(%var_5455: Tensor[(12, 10, 3), float32]) -> (Tensor[(11, 15, 9), float64], Tensor[(12, 10, 3), int32], Tensor[(12, 1, 3), float32]) {
  %911 = @func_5234() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(11, 15, 9), float64], Tensor[(12, 3, 3), int64]) */;
  %912 = @func_2818() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %913 = %912.0;
  %914 = cast(%913, dtype="int32") /* ty=Tensor[(12, 1, 3), int32] */;
  %915 = cast(%var_5455, dtype="int32") /* ty=Tensor[(12, 10, 3), int32] */;
  %916 = cast(%913, dtype="float32") /* ty=Tensor[(12, 1, 3), float32] */;
  %917 = %911.2;
  %918 = logical_xor(%914, %915) /* ty=Tensor[(12, 10, 3), int32] */;
  %919 = sigmoid(%916) /* ty=Tensor[(12, 1, 3), float32] */;
  (%917, %918, %919)
}

def @func_10577() -> (Tensor[(12, 1, 3), float32],) {
  %921 = fn () -> (Tensor[(12, 1, 3), float32],) {
    %920 = @func_10477() /* ty=Tensor[(12, 1, 3), float32] */;
    (%920,)
  };
  %921() /* ty=(Tensor[(12, 1, 3), float32],) */
}

def @func_7917() -> (Tensor[(12, 1, 3), float32],) {
  @func_7915() /* ty=(Tensor[(12, 1, 3), float32],) */
}

def @func_3038(%var_3036: Tensor[(12, 1, 3), float32]) -> (Tensor[(12, ?, 3), uint32], Tensor[(12, 1, 3), float32], Tensor[(280), float64]) {
  @func_3035(%var_3036) /* ty=(Tensor[(12, ?, 3), uint32], Tensor[(12, 1, 3), float32], Tensor[(280), float64]) */
}

def @func_9965(%var_9963: Tensor[(9, 13, 15), float32]) -> (Tensor[(9, 13, 15), bool], Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(9, 13, 15), float32]) {
  @func_9962(%var_9963) /* ty=(Tensor[(9, 13, 15), bool], Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(9, 13, 15), float32]) */
}

def @func_10477() -> Tensor[(12, 1, 3), float32] {
  %922 = @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */;
  %922.1
}

def @func_11964(%var_11962: uint8, %var_11963: Tensor[(1, 2340), float64]) -> (Tensor[(14, 10, 11), bool], Tensor[(14, 10, 11), float32], Tensor[(15, 13, 12), float64], Tensor[(1, 2340), float64]) {
  %938 = fn (%var_11892: uint8, %var_11915: Tensor[(1, 2340), float64]) -> (Tensor[(14, 10, 11), bool], Tensor[(14, 10, 11), float32], Tensor[(15, 13, 12), float64], Tensor[(1, 2340), float64]) {
    %923 = cast(%var_11892, dtype="uint8") /* ty=uint8 */;
    %924 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 10, 11), uint8] */, dtype="uint8") /* ty=Tensor[(14, 10, 11), uint8] */;
    %925 = bitwise_and(%923, %924) /* ty=Tensor[(14, 10, 11), uint8] */;
    %926 = cast(%925, dtype="bool") /* ty=Tensor[(14, 10, 11), bool] */;
    %927 = cast(%var_11892, dtype="bool") /* ty=bool */;
    %928 = cast(%925, dtype="float32") /* ty=Tensor[(14, 10, 11), float32] */;
    %929 = cast(%var_11915, dtype="float64") /* ty=Tensor[(1, 2340), float64] */;
    %930 = reshape(%929, newshape=[15, 13, 12]) /* ty=Tensor[(15, 13, 12), float64] */;
    %931 = @func_9319(%930) /* ty=(Tensor[(15, 13, 12), float64],) */;
    %932 = cast(%var_11892, dtype="float64") /* ty=float64 */;
    %933 = cast(%var_11915, dtype="float64") /* ty=Tensor[(1, 2340), float64] */;
    %934 = less_equal(%926, %927) /* ty=Tensor[(14, 10, 11), bool] */;
    %935 = log10(%928) /* ty=Tensor[(14, 10, 11), float32] */;
    %936 = %931.0;
    %937 = divide(%932, %933) /* ty=Tensor[(1, 2340), float64] */;
    (%934, %935, %936, %937)
  };
  %938(%var_11962, %var_11963) /* ty=(Tensor[(14, 10, 11), bool], Tensor[(14, 10, 11), float32], Tensor[(15, 13, 12), float64], Tensor[(1, 2340), float64]) */
}

def @func_11743(%var_11742: Tensor[(8, 3, 6), float32]) -> (Tensor[(8, 3, 6), float32], Tensor[(280), float64]) {
  %942 = fn (%var_11719: Tensor[(8, 3, 6), float32]) -> (Tensor[(8, 3, 6), float32], Tensor[(280), float64]) {
    %939 = cast(%var_11719, dtype="float32") /* ty=Tensor[(8, 3, 6), float32] */;
    %940 = log(%939) /* ty=Tensor[(8, 3, 6), float32] */;
    %941 = @func_10728() /* ty=Tensor[(280), float64] */;
    (%940, %941)
  };
  %942(%var_11742) /* ty=(Tensor[(8, 3, 6), float32], Tensor[(280), float64]) */
}

def @func_953(%var_952: Tensor[(5, 5, 5), float64]) -> Tensor[(5, 5, 5), float32] {
  %946 = fn (%var_943: Tensor[(5, 5, 5), float64]) -> Tensor[(5, 5, 5), float32] {
    %943 = cast(%var_943, dtype="float64") /* ty=Tensor[(5, 5, 5), float64] */;
    %944 = erf(%943) /* ty=Tensor[(5, 5, 5), float64] */;
    %945 = cast(%944, dtype="float32") /* ty=Tensor[(5, 5, 5), float32] */;
    atan(%945) /* ty=Tensor[(5, 5, 5), float32] */
  };
  %946(%var_952) /* ty=Tensor[(5, 5, 5), float32] */
}

def @func_4671(%var_4669: Tensor[(4, 5, 14), float64]) -> (Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(1485), float64], Tensor[(125), float32]) {
  @func_4668(%var_4669) /* ty=(Tensor[(4, 5, 14), float64], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(11, 15, 9), float64], Tensor[(1485), float64], Tensor[(125), float32]) */
}

def @func_4203() -> (Tensor[(12, 1, 3), float32],) {
  %949 = fn () -> (Tensor[(12, 1, 3), float32],) {
    %947 = @func_2880() /* ty=(Tensor[(125), float32], Tensor[(12, 1, 3), float32]) */;
    %948 = %947.1;
    (%948,)
  };
  %949() /* ty=(Tensor[(12, 1, 3), float32],) */
}

def @func_8233() -> (Tensor[(4, 5, 14), float64], Tensor[(9, 3, 3), float32], Tensor[(12, 1, 3), float64], Tensor[(5, 5, 5), float32], Tensor[(25, 5), float64]) {
  @func_8231() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(9, 3, 3), float32], Tensor[(12, 1, 3), float64], Tensor[(5, 5, 5), float32], Tensor[(25, 5), float64]) */
}

def @func_11256() -> (Tensor[(12, 1, 3), float32], Tensor[(10, 5, 11), float32]) {
  %950 = @func_8587() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %951 = @func_10893() /* ty=(Tensor[(10, 5, 11), float32],) */;
  %952 = %950.0;
  %953 = %951.0;
  (%952, %953)
}

def @func_4896() -> (Tensor[(10, 5, 11), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32]) {
  %963 = fn () -> (Tensor[(10, 5, 11), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32]) {
    %954 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 5, 11), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 11), float32] */;
    %955 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(10, 5, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %956 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 5, 11), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 11), float32] */;
    %957 = dyn.reshape(%954, %955, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %958 = @func_3288() /* ty=(Tensor[(125), float32], Tensor[(4, 5, 14), float64]) */;
    %959 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
    %960 = power(%956, %957) /* ty=Tensor[(10, 5, 11), float32] */;
    %961 = %958.1;
    %962 = %959.0;
    (%960, %961, %962)
  };
  %963() /* ty=(Tensor[(10, 5, 11), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32]) */
}

def @func_8032() -> (Tensor[(280), float64],) {
  %964 = @func_3757() /* ty=(Tensor[(280), float64], Tensor[(125), float32]) */;
  %965 = %964.0;
  (%965,)
}

def @func_3616() -> (Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) {
  %976 = fn () -> (Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) {
    %966 = @func_2583() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
    %967 = %966.3;
    %968 = cast(%967, dtype="float32") /* ty=Tensor[(125), float32] */;
    %969 = cast(%967, dtype="float32") /* ty=Tensor[(125), float32] */;
    %970 = @func_3396() /* ty=(Tensor[(12, 1, 3), float32],) */;
    %971 = @func_3577() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(280), float64], Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32]) */;
    %972 = acosh(%968) /* ty=Tensor[(125), float32] */;
    %973 = cosh(%969) /* ty=Tensor[(125), float32] */;
    %974 = %970.0;
    %975 = %971.0;
    (%972, %973, %974, %975)
  };
  %976() /* ty=(Tensor[(125), float32], Tensor[(125), float32], Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64]) */
}

def @func_4524() -> Tensor[(4, 5, 14), float64] {
  @func_4522() /* ty=Tensor[(4, 5, 14), float64] */
}

def @func_5474(%var_5472: Tensor[(12, 10, 3), float32]) -> (Tensor[(11, 15, 9), float64], Tensor[(12, 10, 3), int32], Tensor[(12, 1, 3), float32]) {
  @func_5471(%var_5472) /* ty=(Tensor[(11, 15, 9), float64], Tensor[(12, 10, 3), int32], Tensor[(12, 1, 3), float32]) */
}

def @func_11562() -> (Tensor[(10, 5, 11), float32],) {
  %977 = @func_4921() /* ty=Tensor[(10, 5, 11), float32] */;
  (%977,)
}

def @func_11529() -> Tensor[(12, 1, 3), float32] {
  @func_11527() /* ty=Tensor[(12, 1, 3), float32] */
}

def @func_8623() -> Tensor[(4, 5, 14), float64] {
  %979 = fn () -> Tensor[(4, 5, 14), float64] {
    %978 = @func_4843() /* ty=(Tensor[(4, 5, 14), float64], Tensor[(11, 15, 9), float64]) */;
    %978.0
  };
  %979() /* ty=Tensor[(4, 5, 14), float64] */
}

def @func_5992() -> Tensor[(12, 1, 3), float64] {
  @func_4100() /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_3803(%var_3802: Tensor[(12, 6, 3), float32]) -> Tensor[(12, 6, 3), bool] {
  %984 = fn (%var_3794: Tensor[(12, 6, 3), float32]) -> Tensor[(12, 6, 3), bool] {
    %980 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
    %981 = %980.0;
    %982 = cast(%981, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
    %983 = cast(%var_3794, dtype="bool") /* ty=Tensor[(12, 6, 3), bool] */;
    logical_or(%982, %983) /* ty=Tensor[(12, 6, 3), bool] */
  };
  %984(%var_3802) /* ty=Tensor[(12, 6, 3), bool] */
}

def @func_12008(%var_11988: Tensor[(252), float64], %var_11989: Tensor[(125), float64]) -> (Tensor[(12, 1, 3), float32], Tensor[(125), float64], Tensor[(252), float64], Tensor[(125), float64]) {
  %985 = @func_3194() /* ty=(Tensor[(12, 1, 3), float32], Tensor[(4, 5, 14), float64], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64], Tensor[(12, 1, 3), float32]) */;
  %986 = cast(%var_11988, dtype="float64") /* ty=Tensor[(252), float64] */;
  %987 = cast(%var_11989, dtype="float64") /* ty=Tensor[(125), float64] */;
  %988 = reshape(%986, newshape=[7, 6, 6]) /* ty=Tensor[(7, 6, 6), float64] */;
  %989 = reshape(%987, newshape=[125]) /* ty=Tensor[(125), float64] */;
  %990 = @func_6786(%988, %989) /* ty=(Tensor[(7, 6, 6), float64], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) */;
  %991 = %985.2;
  %992 = %990.2;
  (%991, %992, %var_11988, %var_11989)
}

def @func_4102() -> Tensor[(12, 1, 3), float64] {
  @func_4100() /* ty=Tensor[(12, 1, 3), float64] */
}

def @func_11527() -> Tensor[(12, 1, 3), float32] {
  %993 = @func_10766() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %993.0
}

def @func_2999() -> (Tensor[(280), float64], Tensor[(12, 1, 3), float32]) {
  @func_2997() /* ty=(Tensor[(280), float64], Tensor[(12, 1, 3), float32]) */
}

def @func_11546() -> Tensor[(12, 1, 3), float32] {
  %994 = @func_10576() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %994.0
}

def @func_6477() -> (Tensor[(125), float32],) {
  @func_6475() /* ty=(Tensor[(125), float32],) */
}

def @func_2583() -> (Tensor[(12, 1, 3), float32], Tensor[(12, 1, 3), float32], Tensor[(5, 5, 5), float32], Tensor[(125), float64]) {
  %995 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %996 = @func_2533() /* ty=(Tensor[(12, 1, 3), float32],) */;
  %997 = cast(meta[relay.Constant][37] /* ty=Tensor[(125), float64] */, dtype="float64") /* ty=Tensor[(125), float64] */;
  %998 = reshape(%997, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), float64] */;
  %999 = %995.0;
  %1000 = %996.0;
  %1001 = @func_951(%998) /* ty=Tensor[(5, 5, 5), float32] */;
  (%999, %1000, %1001, meta[relay.Constant][37] /* ty=Tensor[(125), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen658/build/output.py", line 3211, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:46:22] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

