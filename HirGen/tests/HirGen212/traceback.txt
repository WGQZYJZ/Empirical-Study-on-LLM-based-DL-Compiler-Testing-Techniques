==========mod==========
#[version = "0.0.5"]
def @func_1262() -> (uint64,) {
  %0 = @func_1203() /* ty=(uint64,) */;
  %1 = %0.0;
  (%1,)
}

def @func_2522(%var_2516: Tensor[(495), float32]) -> (Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), float32], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) {
  %2 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
  %3 = %2.0;
  %4 = cast(%3, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
  %5 = cast(%3, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
  %6 = cast(%var_2516, dtype="float32") /* ty=Tensor[(495), float32] */;
  %7 = cast(%var_2516, dtype="float32") /* ty=Tensor[(495), float32] */;
  %8 = cast(%var_2516, dtype="float32") /* ty=Tensor[(495), float32] */;
  %9 = reshape(%6, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %10 = reshape(%7, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %11 = reshape(%8, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %12 = @func_120(%9, %10, %11) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(15, 3, 11), float64]) */;
  %13 = atanh(%4) /* ty=Tensor[(9, 16, 8), float64] */;
  %14 = asinh(%5) /* ty=Tensor[(9, 16, 8), float32] */;
  %15 = %12.1;
  (%13, %14, %15, %var_2516)
}

def @func_1203() -> (uint64,) {
  %16 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
  %17 = %16.4;
  (%17,)
}

def @func_3489(%var_3478: Tensor[(324), int8]) -> (Tensor[(9, 16, 8), float64], Tensor[(6, 8, 14), bool], Tensor[(672), float32], uint64, Tensor[(324), bool]) {
  %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %20 = reshape(%18, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %21 = reshape(%19, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %22 = @func_1203() /* ty=(uint64,) */;
  %23 = @func_3287() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(324), int8], Tensor[(288, 4), float64], Tensor[(324), bool], Tensor[(12, 9, 3), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */;
  %24 = %23.1;
  %25 = cast(%var_3478, dtype="bool") /* ty=Tensor[(324), bool] */;
  %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(1), int32] */;
  %27 = cast(%24, dtype="bool") /* ty=Tensor[(324), bool] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?), bool] */;
  %29 = @func_1173() /* ty=Tensor[(9, 16, 8), float64] */;
  %30 = @func_720(%20, %21) /* ty=Tensor[(6, 8, 14), bool] */;
  %31 = %22.0;
  %32 = logical_and(%27, %28) /* ty=Tensor[(324), bool] */;
  (%29, %30, meta[relay.Constant][0] /* ty=Tensor[(672), float32] */, %31, %32)
}

def @func_4001() -> (uint64,) {
  %33 = @func_1950() /* ty=(uint64,) */;
  %34 = %33.0;
  (%34,)
}

def @func_1017() -> (Tensor[(9, 16, 8), uint16],) {
  %35 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
  %36 = %35.6;
  %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 16, 8), float64] */, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
  %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%36, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %41 = left_shift(%39, %40) /* ty=Tensor[(9, 16, 8), uint16] */;
  (%41,)
}

def @func_7899(%var_7847: Tensor[(220), int8]) -> (Tensor[(104), uint64], Tensor[(1152), float32], Tensor[(200), uint64], uint64, Tensor[(200, 220), bool]) {
  %42 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
  %43 = @func_1298() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(1152), float32]) */;
  %44 = cast(%var_7847, dtype="int8") /* ty=Tensor[(220), int8] */;
  %45 = cast(meta[relay.Constant][2] /* ty=Tensor[(200, 1), uint64] */, dtype="uint64") /* ty=Tensor[(200, 1), uint64] */;
  %46 = reshape(%44, newshape=[220]) /* ty=Tensor[(220), int8] */;
  %47 = reshape(%45, newshape=[200]) /* ty=Tensor[(200), uint64] */;
  %48 = @func_5414(%46, %47) /* ty=(Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16], Tensor[(220), int8], Tensor[(324), int8], Tensor[(54, 6), bool], Tensor[(200), uint64]) */;
  %49 = @func_1262() /* ty=(uint64,) */;
  %50 = cast(%var_7847, dtype="bool") /* ty=Tensor[(220), bool] */;
  %51 = cast(meta[relay.Constant][2] /* ty=Tensor[(200, 1), uint64] */, dtype="bool") /* ty=Tensor[(200, 1), bool] */;
  %52 = %42.5;
  %53 = %43.1;
  %54 = %48.5;
  %55 = %49.0;
  %56 = logical_and(%50, %51) /* ty=Tensor[(200, 220), bool] */;
  (%52, %53, %54, %55, %56)
}

def @func_5534() -> (Tensor[(9, 16, 8), float64],) {
  %57 = @func_1173() /* ty=Tensor[(9, 16, 8), float64] */;
  (%57,)
}

def @func_5727() -> Tensor[(9, 16, 8), uint16] {
  @func_2637() /* ty=Tensor[(9, 16, 8), uint16] */
}

def @func_4047(%var_4037: Tensor[(11, 2, 8), uint16], %var_4038: Tensor[(11, 2, 8), uint16]) -> (Tensor[(11, 2, 8), uint16],) {
  %58 = cast(%var_4038, dtype="uint16") /* ty=Tensor[(11, 2, 8), uint16] */;
  %59 = shape_of(%var_4037, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%var_4037, dtype="uint16") /* ty=Tensor[(11, 2, 8), uint16] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %62 = left_shift(%60, %61) /* ty=Tensor[(11, 2, 8), uint16] */;
  (%62,)
}

def @func_6280() -> (Tensor[(9, 16, 8), float64],) {
  %63 = @func_2569() /* ty=Tensor[(9, 16, 8), float64] */;
  (%63,)
}

def @func_1173() -> Tensor[(9, 16, 8), float64] {
  %64 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
  %64.6
}

def @func_7257() -> (Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), uint16]) {
  %65 = @func_5842() /* ty=(Tensor[(9, 16, 8), float64],) */;
  %66 = @func_6885() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), uint16], Tensor[(165, 3), float64]) */;
  %67 = %65.0;
  %68 = %66.1;
  (%67, %68)
}

def @func_772() -> (Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) {
  %69 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
  %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(324), uint32] */, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(324), uint32] */, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %72 = reshape(%70, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), uint32] */;
  %73 = reshape(%71, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), uint32] */;
  %74 = @func_447(%72, %73) /* ty=(Tensor[(12, 9, 3), uint32], Tensor[(12, 9, 3), bool]) */;
  %75 = cast(meta[relay.Constant][5] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %76 = cast(meta[relay.Constant][6] /* ty=Tensor[(104), uint64] */, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %77 = reshape(%75, newshape=[]) /* ty=uint64 */;
  %78 = reshape(%76, newshape=[13, 2, 4]) /* ty=Tensor[(13, 2, 4), uint64] */;
  %79 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
  %80 = atan(%69) /* ty=Tensor[(9, 16, 8), float64] */;
  %81 = %74.1;
  %82 = @func_296(%77, %78) /* ty=Tensor[(13, 2, 4), bool] */;
  %83 = sinh(%79) /* ty=Tensor[(9, 16, 8), float64] */;
  (%80, %81, meta[relay.Constant][4] /* ty=Tensor[(324), uint32] */, %82, meta[relay.Constant][5] /* ty=uint64 */, meta[relay.Constant][6] /* ty=Tensor[(104), uint64] */, %83)
}

def @func_1381() -> (Tensor[(9, 16, 8), float32],) {
  %84 = @func_1173() /* ty=Tensor[(9, 16, 8), float64] */;
  %85 = cast(%84, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
  %86 = cos(%85) /* ty=Tensor[(9, 16, 8), float32] */;
  (%86,)
}

def @func_2105(%var_2045: Tensor[(324), bool], %var_2079: Tensor[(9, 16, 8), uint16]) -> (Tensor[(12, 9, 3), float64], Tensor[(324), bool], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) {
  %87 = @func_1114() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %88 = %87.0;
  %89 = cast(%88, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
  %90 = cast(%var_2045, dtype="bool") /* ty=Tensor[(324), bool] */;
  %91 = reshape(%89, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), float64] */;
  %92 = reshape(%90, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), bool] */;
  %93 = @func_1443(%91, %92) /* ty=(Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) */;
  %94 = cast(%var_2079, dtype="bool") /* ty=Tensor[(9, 16, 8), bool] */;
  %95 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%88, dtype="bool") /* ty=Tensor[(9, 16, 8), bool] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %98 = greater(%96, %97) /* ty=Tensor[(9, 16, 8), bool] */;
  %99 = cast(%98, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
  %100 = shape_of(%var_2079, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%var_2079, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %103 = %93.1;
  %104 = @func_1794() /* ty=Tensor[(9, 16, 8), float32] */;
  %105 = add(%101, %102) /* ty=Tensor[(9, 16, 8), uint16] */;
  (%103, %var_2045, %104, %105)
}

def @func_6407(%var_6395: Tensor[(104), uint64]) -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float64], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64]) {
  %106 = @func_5824() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %107 = cast(meta[relay.Constant][7] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %108 = cast(%var_6395, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %109 = reshape(%107, newshape=[]) /* ty=uint64 */;
  %110 = reshape(%108, newshape=[13, 2, 4]) /* ty=Tensor[(13, 2, 4), uint64] */;
  %111 = %106.0;
  %112 = @func_2569() /* ty=Tensor[(9, 16, 8), float64] */;
  %113 = @func_296(%109, %110) /* ty=Tensor[(13, 2, 4), bool] */;
  (%111, %112, %113, meta[relay.Constant][7] /* ty=uint64 */, %var_6395)
}

def @func_1233(%var_1228: Tensor[(9, 16, 8), uint16]) -> Tensor[(9, 16, 8), bool] {
  %114 = @func_1114() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %115 = %114.0;
  %116 = cast(%var_1228, dtype="bool") /* ty=Tensor[(9, 16, 8), bool] */;
  %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%115, dtype="bool") /* ty=Tensor[(9, 16, 8), bool] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%118, %119) /* ty=Tensor[(9, 16, 8), bool] */
}

def @func_4658() -> (Tensor[(9, 16, 8), float32],) {
  %120 = @func_1617() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], uint64, Tensor[(1152), float32], Tensor[(9, 16, 8), float32]) */;
  %121 = %120.4;
  (%121,)
}

def @func_2185(%var_2171: Tensor[(10, 14, 10), float32], %var_2181: Tensor[(10, 14, 10), float32]) -> (Tensor[(10, 14, 10), float32], Tensor[(10, 14, 10), float32]) {
  %122 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 14, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 10), float32] */;
  %123 = shape_of(%var_2171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%var_2171, dtype="float32") /* ty=Tensor[(10, 14, 10), float32] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %126 = cast(%var_2181, dtype="float32") /* ty=Tensor[(10, 14, 10), float32] */;
  %127 = shape_of(%var_2171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%var_2171, dtype="float32") /* ty=Tensor[(10, 14, 10), float32] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %130 = divide(%124, %125) /* ty=Tensor[(10, 14, 10), float32] */;
  %131 = power(%128, %129) /* ty=Tensor[(10, 14, 10), float32] */;
  (%130, %131)
}

def @func_7802(%var_7770: Tensor[(495), float32]) -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float64], Tensor[(495), bool], Tensor[(9, 16, 8), uint16]) {
  %132 = cast(%var_7770, dtype="float32") /* ty=Tensor[(495), float32] */;
  %133 = reshape(%132, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %134 = @func_2522(%133) /* ty=(Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), float32], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */;
  %135 = @func_2986() /* ty=(Tensor[(1152), float64], Tensor[(324), bool], Tensor[(9, 16, 8), float64]) */;
  %136 = @func_6575() /* ty=(uint64,) */;
  %137 = %136.0;
  %138 = cast(%137, dtype="uint32") /* ty=uint32 */;
  %139 = cast(%var_7770, dtype="uint32") /* ty=Tensor[(495), uint32] */;
  %140 = subtract(%138, %139) /* ty=Tensor[(495), uint32] */;
  %141 = cast(%var_7770, dtype="bool") /* ty=Tensor[(495), bool] */;
  %142 = shape_of(%140, dtype="int32") /* ty=Tensor[(1), int32] */;
  %143 = cast(%140, dtype="bool") /* ty=Tensor[(495), bool] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?), bool] */;
  %145 = @func_4927() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) */;
  %146 = %134.1;
  %147 = %135.2;
  %148 = less(%143, %144) /* ty=Tensor[(495), bool] */;
  %149 = %145.0;
  (%146, %147, %148, %149)
}

def @func_4894(%var_4871: Tensor[(8, 5, 5), uint64], %var_4872: Tensor[(8, 5, 5), uint64], %var_4882: Tensor[(54, 6), bool]) -> (Tensor[(8, 5, 5), uint64], Tensor[(12, 9, 3), float64], Tensor[(1152), float64], Tensor[(54, 6), bool]) {
  %150 = cast(%var_4872, dtype="uint64") /* ty=Tensor[(8, 5, 5), uint64] */;
  %151 = shape_of(%var_4871, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%var_4871, dtype="uint64") /* ty=Tensor[(8, 5, 5), uint64] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %154 = cast(meta[relay.Constant][9] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %155 = cast(%var_4882, dtype="bool") /* ty=Tensor[(54, 6), bool] */;
  %156 = reshape(%154, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), float64] */;
  %157 = reshape(%155, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), bool] */;
  %158 = @func_1443(%156, %157) /* ty=(Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) */;
  %159 = logical_xor(%152, %153) /* ty=Tensor[(8, 5, 5), uint64] */;
  %160 = %158.1;
  (%159, %160, meta[relay.Constant][9] /* ty=Tensor[(1152), float64] */, %var_4882)
}

def @func_3849() -> (Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16]) {
  %161 = @func_3544() /* ty=(Tensor[(10, 4, 15), bool],) */;
  %162 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %163 = %161.0;
  %164 = %162.0;
  (%163, %164)
}

def @func_447(%var_394: Tensor[(12, 9, 3), uint32], %var_395: Tensor[(12, 9, 3), uint32]) -> (Tensor[(12, 9, 3), uint32], Tensor[(12, 9, 3), bool]) {
  %165 = cast(%var_395, dtype="uint32") /* ty=Tensor[(12, 9, 3), uint32] */;
  %166 = shape_of(%var_394, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%var_394, dtype="uint32") /* ty=Tensor[(12, 9, 3), uint32] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %169 = cast(%var_394, dtype="float64") /* ty=Tensor[(12, 9, 3), float64] */;
  %170 = atan(%169) /* ty=Tensor[(12, 9, 3), float64] */;
  %171 = cast(%var_395, dtype="bool") /* ty=Tensor[(12, 9, 3), bool] */;
  %172 = shape_of(%170, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%170, dtype="bool") /* ty=Tensor[(12, 9, 3), bool] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %175 = subtract(%167, %168) /* ty=Tensor[(12, 9, 3), uint32] */;
  %176 = less(%173, %174) /* ty=Tensor[(12, 9, 3), bool] */;
  (%175, %176)
}

def @func_4430(%var_4389: Tensor[(495), float32], %var_4404: Tensor[(495), float32], %var_4421: Tensor[(324), int8]) -> (Tensor[(9, 16, 8), float32], uint64, Tensor[(15, 3, 11), int8], Tensor[(495), float64], uint64, uint64, Tensor[(324), int8]) {
  %177 = @func_1658() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %178 = @func_1104() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), int8], Tensor[(495), float32], Tensor[(13, 2, 4), bool], Tensor[(13, 2, 4), bool], uint64) */;
  %179 = cast(%var_4389, dtype="float32") /* ty=Tensor[(495), float32] */;
  %180 = cast(%var_4389, dtype="float32") /* ty=Tensor[(495), float32] */;
  %181 = cast(%var_4389, dtype="float32") /* ty=Tensor[(495), float32] */;
  %182 = reshape(%179, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %183 = reshape(%180, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %184 = reshape(%181, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %185 = @func_120(%182, %183, %184) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(15, 3, 11), float64]) */;
  %186 = cast(%var_4404, dtype="float64") /* ty=Tensor[(495), float64] */;
  %187 = shape_of(%var_4389, dtype="int32") /* ty=Tensor[(1), int32] */;
  %188 = cast(%var_4389, dtype="float64") /* ty=Tensor[(495), float64] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?), float64] */;
  %190 = @func_3755() /* ty=(uint64, uint64) */;
  %191 = cast(%var_4421, dtype="int8") /* ty=Tensor[(324), int8] */;
  %192 = reshape(%191, newshape=[324]) /* ty=Tensor[(324), int8] */;
  %193 = @func_3489(%192) /* ty=(Tensor[(9, 16, 8), float64], Tensor[(6, 8, 14), bool], Tensor[(672), float32], uint64, Tensor[(324), bool]) */;
  %194 = %177.0;
  %195 = %178.5;
  %196 = %185.0;
  %197 = maximum(%188, %189) /* ty=Tensor[(495), float64] */;
  %198 = %190.1;
  %199 = %193.3;
  (%194, %195, %196, %197, %198, %199, %var_4421)
}

def @func_296(%var_288: uint64, %var_289: Tensor[(13, 2, 4), uint64]) -> Tensor[(13, 2, 4), bool] {
  %200 = cast(%var_288, dtype="bool") /* ty=bool */;
  %201 = cast(%var_289, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
  equal(%200, %201) /* ty=Tensor[(13, 2, 4), bool] */
}

def @func_7953(%var_7917: Tensor[(15, 11, 14), uint32], %var_7918: Tensor[(15, 11, 14), uint32]) -> (Tensor[(15, 11, 14), uint32], Tensor[(495), float64], Tensor[(165, 3), float32], Tensor[(324), int8]) {
  %202 = cast(%var_7918, dtype="uint32") /* ty=Tensor[(15, 11, 14), uint32] */;
  %203 = shape_of(%var_7917, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%var_7917, dtype="uint32") /* ty=Tensor[(15, 11, 14), uint32] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %206 = cast(meta[relay.Constant][10] /* ty=Tensor[(165, 3), float32] */, dtype="float32") /* ty=Tensor[(165, 3), float32] */;
  %207 = cast(meta[relay.Constant][10] /* ty=Tensor[(165, 3), float32] */, dtype="float32") /* ty=Tensor[(165, 3), float32] */;
  %208 = cast(meta[relay.Constant][11] /* ty=Tensor[(324), int8] */, dtype="int8") /* ty=Tensor[(324), int8] */;
  %209 = reshape(%206, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %210 = reshape(%207, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %211 = reshape(%208, newshape=[324]) /* ty=Tensor[(324), int8] */;
  %212 = @func_4430(%209, %210, %211) /* ty=(Tensor[(9, 16, 8), float32], uint64, Tensor[(15, 3, 11), int8], Tensor[(495), float64], uint64, uint64, Tensor[(324), int8]) */;
  %213 = bitwise_and(%204, %205) /* ty=Tensor[(15, 11, 14), uint32] */;
  %214 = %212.3;
  (%213, %214, meta[relay.Constant][10] /* ty=Tensor[(165, 3), float32] */, meta[relay.Constant][11] /* ty=Tensor[(324), int8] */)
}

def @func_5498(%var_5479: Tensor[(4, 4, 3), float64]) -> (Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), uint32]) {
  %215 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(1, 4, 1), float64] */;
  %216 = cast(%var_5479, dtype="float64") /* ty=Tensor[(4, 4, 3), float64] */;
  %217 = cast(%var_5479, dtype="uint32") /* ty=Tensor[(4, 4, 3), uint32] */;
  %218 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 4, 1), float64] */, dtype="uint32") /* ty=Tensor[(1, 4, 1), uint32] */;
  %219 = mod(%215, %216) /* ty=Tensor[(4, 4, 3), float64] */;
  %220 = bitwise_or(%217, %218) /* ty=Tensor[(4, 4, 3), uint32] */;
  (%219, %220)
}

def @func_2855(%var_2820: Tensor[(10, 10, 12), int8], %var_2821: Tensor[(10, 10, 12), int8]) -> (Tensor[(10, 10, 12), int8],) {
  %221 = cast(%var_2821, dtype="int8") /* ty=Tensor[(10, 10, 12), int8] */;
  %222 = shape_of(%var_2820, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%var_2820, dtype="int8") /* ty=Tensor[(10, 10, 12), int8] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %225 = add(%223, %224) /* ty=Tensor[(10, 10, 12), int8] */;
  (%225,)
}

def @func_8299() -> Tensor[(9, 16, 8), bool] {
  %226 = @func_6885() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), uint16], Tensor[(165, 3), float64]) */;
  %226.0
}

def @func_3287() -> (Tensor[(9, 16, 8), uint16], Tensor[(324), int8], Tensor[(288, 4), float64], Tensor[(324), bool], Tensor[(12, 9, 3), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) {
  %227 = cast(meta[relay.Constant][13] /* ty=Tensor[(324), bool] */, dtype="bool") /* ty=Tensor[(324), bool] */;
  %228 = cast(meta[relay.Constant][14] /* ty=Tensor[(288, 4), uint16] */, dtype="uint16") /* ty=Tensor[(288, 4), uint16] */;
  %229 = reshape(%227, newshape=[324]) /* ty=Tensor[(324), bool] */;
  %230 = reshape(%228, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
  %231 = @func_2105(%229, %230) /* ty=(Tensor[(12, 9, 3), float64], Tensor[(324), bool], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */;
  %232 = @func_1950() /* ty=(uint64,) */;
  %233 = %232.0;
  %234 = cast(%233, dtype="int8") /* ty=int8 */;
  %235 = cast(meta[relay.Constant][13] /* ty=Tensor[(324), bool] */, dtype="int8") /* ty=Tensor[(324), int8] */;
  %236 = cast(meta[relay.Constant][14] /* ty=Tensor[(288, 4), uint16] */, dtype="float64") /* ty=Tensor[(288, 4), float64] */;
  %237 = cast(%233, dtype="float64") /* ty=float64 */;
  %238 = cast(meta[relay.Constant][13] /* ty=Tensor[(324), bool] */, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %239 = subtract(%234, %235) /* ty=Tensor[(324), int8] */;
  %240 = cast(%239, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %241 = reshape(%238, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), uint32] */;
  %242 = reshape(%240, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), uint32] */;
  %243 = @func_447(%241, %242) /* ty=(Tensor[(12, 9, 3), uint32], Tensor[(12, 9, 3), bool]) */;
  %244 = %243.0;
  %245 = cast(%244, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
  %246 = log2(%245) /* ty=Tensor[(12, 9, 3), float32] */;
  %247 = cast(%246, dtype="float64") /* ty=Tensor[(12, 9, 3), float64] */;
  %248 = acos(%247) /* ty=Tensor[(12, 9, 3), float64] */;
  %249 = cast(%248, dtype="bool") /* ty=Tensor[(12, 9, 3), bool] */;
  %250 = reshape(%249, newshape=[324]) /* ty=Tensor[(324), bool] */;
  %251 = @func_2377(%250) /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], Tensor[(324), bool]) */;
  %252 = cast(%248, dtype="float64") /* ty=Tensor[(12, 9, 3), float64] */;
  %253 = cast(%246, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
  %254 = cast(meta[relay.Constant][13] /* ty=Tensor[(324), bool] */, dtype="bool") /* ty=Tensor[(324), bool] */;
  %255 = %231.3;
  %256 = cast(%255, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
  %257 = reshape(%254, newshape=[324]) /* ty=Tensor[(324), bool] */;
  %258 = reshape(%256, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
  %259 = @func_2105(%257, %258) /* ty=(Tensor[(12, 9, 3), float64], Tensor[(324), bool], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */;
  %260 = @func_2440() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %261 = floor_divide(%236, %237) /* ty=Tensor[(288, 4), float64] */;
  %262 = %251.2;
  %263 = sin(%252) /* ty=Tensor[(12, 9, 3), float64] */;
  %264 = asin(%253) /* ty=Tensor[(12, 9, 3), float32] */;
  %265 = %259.2;
  %266 = %260.0;
  (%255, %239, %261, %262, %263, %264, %265, %266)
}

def @func_2144() -> Tensor[(9, 16, 8), float64] {
  %267 = @func_1720() /* ty=(Tensor[(9, 16, 8), float64],) */;
  %267.0
}

def @func_4809() -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) {
  %268 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %269 = @func_2118() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %270 = %268.0;
  %271 = %269.0;
  (%270, %271)
}

def @func_1759(%var_1743: Tensor[(11, 2, 10), int8]) -> (Tensor[(11, 2, 10), int8], Tensor[(11, 2, 10), uint64]) {
  %272 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 2, 10), int8] */, dtype="int8") /* ty=Tensor[(1, 2, 10), int8] */;
  %273 = cast(%var_1743, dtype="int8") /* ty=Tensor[(11, 2, 10), int8] */;
  %274 = cast(%var_1743, dtype="float64") /* ty=Tensor[(11, 2, 10), float64] */;
  %275 = acosh(%274) /* ty=Tensor[(11, 2, 10), float64] */;
  %276 = cast(%var_1743, dtype="uint64") /* ty=Tensor[(11, 2, 10), uint64] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%275, dtype="uint64") /* ty=Tensor[(11, 2, 10), uint64] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %280 = logical_xor(%272, %273) /* ty=Tensor[(11, 2, 10), int8] */;
  %281 = right_shift(%278, %279) /* ty=Tensor[(11, 2, 10), uint64] */;
  (%280, %281)
}

def @func_8002() -> (Tensor[(9, 16, 8), float32],) {
  %282 = @func_2118() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %283 = %282.0;
  (%283,)
}

def @func_6972() -> Tensor[(104), uint64] {
  %284 = @func_4183() /* ty=(Tensor[(104), uint64], Tensor[(9, 16, 8), uint16]) */;
  %284.0
}

def @func_8596() -> (Tensor[(9, 16, 8), float32],) {
  %285 = @func_8512() /* ty=Tensor[(9, 16, 8), float32] */;
  (%285,)
}

def @func_981(%var_976: Tensor[(104), uint64]) -> (Tensor[(9, 16, 8), float32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64]) {
  %286 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
  %287 = %286.0;
  %288 = cast(%287, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
  %289 = cosh(%288) /* ty=Tensor[(9, 16, 8), float64] */;
  %290 = cast(%287, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
  %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%289, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %294 = cast(meta[relay.Constant][16] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %295 = cast(%var_976, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %296 = reshape(%294, newshape=[]) /* ty=uint64 */;
  %297 = reshape(%295, newshape=[13, 2, 4]) /* ty=Tensor[(13, 2, 4), uint64] */;
  %298 = mod(%292, %293) /* ty=Tensor[(9, 16, 8), float32] */;
  %299 = @func_296(%296, %297) /* ty=Tensor[(13, 2, 4), bool] */;
  (%298, %299, meta[relay.Constant][16] /* ty=uint64 */, %var_976)
}

def @func_5334() -> Tensor[(12, 9, 3), float32] {
  @func_3812() /* ty=Tensor[(12, 9, 3), float32] */
}

def @func_8880() -> Tensor[(324), int8] {
  %300 = @func_3287() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(324), int8], Tensor[(288, 4), float64], Tensor[(324), bool], Tensor[(12, 9, 3), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */;
  %300.1
}

def @func_4867(%var_4858: Tensor[(1152), uint16]) -> (Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), bool], Tensor[(1152), uint16], Tensor[(15, 3, 11), float64]) {
  %301 = @func_3544() /* ty=(Tensor[(10, 4, 15), bool],) */;
  %302 = cast(%var_4858, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
  %303 = reshape(%302, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
  %304 = @func_4119(%303) /* ty=(Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), bool]) */;
  %305 = @func_1512() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */;
  %306 = %301.0;
  %307 = %304.1;
  %308 = %305.1;
  (%306, %307, %var_4858, %308)
}

def @func_2986() -> (Tensor[(1152), float64], Tensor[(324), bool], Tensor[(9, 16, 8), float64]) {
  %309 = @func_1203() /* ty=(uint64,) */;
  %310 = %309.0;
  %311 = cast(meta[relay.Constant][17] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %312 = cast(meta[relay.Constant][18] /* ty=Tensor[(324), bool] */, dtype="bool") /* ty=Tensor[(324), bool] */;
  %313 = reshape(%311, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), float64] */;
  %314 = reshape(%312, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), bool] */;
  %315 = @func_1443(%313, %314) /* ty=(Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) */;
  %316 = %315.0;
  %317 = cast(%310, dtype="float64") /* ty=float64 */;
  %318 = cast(%316, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
  %319 = floor_divide(%317, %318) /* ty=Tensor[(9, 16, 8), float64] */;
  (meta[relay.Constant][17] /* ty=Tensor[(1152), float64] */, meta[relay.Constant][18] /* ty=Tensor[(324), bool] */, %319)
}

def @func_4944() -> (uint64,) {
  %320 = @func_4001() /* ty=(uint64,) */;
  %321 = %320.0;
  (%321,)
}

def @func_1994() -> (Tensor[(9, 16, 8), float32], Tensor[(15, 3, 11), bool]) {
  %322 = @func_1104() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), int8], Tensor[(495), float32], Tensor[(13, 2, 4), bool], Tensor[(13, 2, 4), bool], uint64) */;
  %323 = %322.1;
  %324 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 3, 11), int8] */, dtype="bool") /* ty=Tensor[(15, 3, 11), bool] */;
  %325 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%323, dtype="bool") /* ty=Tensor[(15, 3, 11), bool] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %328 = @func_1794() /* ty=Tensor[(9, 16, 8), float32] */;
  %329 = less(%326, %327) /* ty=Tensor[(15, 3, 11), bool] */;
  (%328, %329)
}

def @func_4611() -> Tensor[(12, 9, 3), float32] {
  %330 = @func_3287() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(324), int8], Tensor[(288, 4), float64], Tensor[(324), bool], Tensor[(12, 9, 3), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */;
  %330.5
}

def @func_3544() -> (Tensor[(10, 4, 15), bool],) {
  %331 = @func_3035() /* ty=(Tensor[(10, 4, 15), bool],) */;
  %332 = %331.0;
  (%332,)
}

def @func_3961(%var_3890: Tensor[(324), bool], %var_3923: Tensor[(1400), float32]) -> (uint64, Tensor[(9, 16, 8), float32], Tensor[(672), float32], Tensor[(324), bool], Tensor[(324), bool], Tensor[(9, 16, 8), float32], Tensor[(10, 14, 10), float32], Tensor[(1400), float32], Tensor[(11, 2, 10), float64], Tensor[(6, 8, 14), float64], Tensor[(324), bool], Tensor[(220), float32]) {
  %333 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
  %334 = @func_2118() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %335 = cast(%var_3890, dtype="bool") /* ty=Tensor[(324), bool] */;
  %336 = reshape(%335, newshape=[324]) /* ty=Tensor[(324), bool] */;
  %337 = @func_2377(%336) /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], Tensor[(324), bool]) */;
  %338 = @func_2341() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float32]) */;
  %339 = cast(%var_3923, dtype="float32") /* ty=Tensor[(1400), float32] */;
  %340 = cast(%var_3923, dtype="float32") /* ty=Tensor[(1400), float32] */;
  %341 = reshape(%339, newshape=[10, 14, 10]) /* ty=Tensor[(10, 14, 10), float32] */;
  %342 = reshape(%340, newshape=[10, 14, 10]) /* ty=Tensor[(10, 14, 10), float32] */;
  %343 = @func_2185(%341, %342) /* ty=(Tensor[(10, 14, 10), float32], Tensor[(10, 14, 10), float32]) */;
  %344 = cast(meta[relay.Constant][21] /* ty=Tensor[(220), int8] */, dtype="int8") /* ty=Tensor[(220), int8] */;
  %345 = reshape(%344, newshape=[11, 2, 10]) /* ty=Tensor[(11, 2, 10), int8] */;
  %346 = @func_1759(%345) /* ty=(Tensor[(11, 2, 10), int8], Tensor[(11, 2, 10), uint64]) */;
  %347 = %346.1;
  %348 = cast(%347, dtype="float32") /* ty=Tensor[(11, 2, 10), float32] */;
  %349 = sqrt(%348) /* ty=Tensor[(11, 2, 10), float32] */;
  %350 = cast(%349, dtype="float64") /* ty=Tensor[(11, 2, 10), float64] */;
  %351 = cast(meta[relay.Constant][20] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %352 = cast(meta[relay.Constant][20] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %353 = reshape(%351, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %354 = reshape(%352, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %355 = @func_720(%353, %354) /* ty=Tensor[(6, 8, 14), bool] */;
  %356 = cast(%355, dtype="float64") /* ty=Tensor[(6, 8, 14), float64] */;
  %357 = exp(%356) /* ty=Tensor[(6, 8, 14), float64] */;
  %358 = cast(%357, dtype="float64") /* ty=Tensor[(6, 8, 14), float64] */;
  %359 = cast(%var_3890, dtype="bool") /* ty=Tensor[(324), bool] */;
  %360 = reshape(%359, newshape=[324]) /* ty=Tensor[(324), bool] */;
  %361 = @func_2377(%360) /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], Tensor[(324), bool]) */;
  %362 = cast(meta[relay.Constant][21] /* ty=Tensor[(220), int8] */, dtype="float32") /* ty=Tensor[(220), float32] */;
  %363 = %333.4;
  %364 = %334.0;
  %365 = %337.2;
  %366 = %338.1;
  %367 = %343.0;
  %368 = atanh(%350) /* ty=Tensor[(11, 2, 10), float64] */;
  %369 = asin(%358) /* ty=Tensor[(6, 8, 14), float64] */;
  %370 = %361.2;
  %371 = asinh(%362) /* ty=Tensor[(220), float32] */;
  (%363, %364, meta[relay.Constant][20] /* ty=Tensor[(672), float32] */, %365, %var_3890, %366, %367, %var_3923, %368, %369, %370, %371)
}

def @func_8512() -> Tensor[(9, 16, 8), float32] {
  %372 = @func_1381() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %372.0
}

def @func_4927() -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) {
  %373 = @func_3574() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %374 = @func_2118() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %375 = %373.0;
  %376 = %374.0;
  (%375, %376)
}

def @func_5065() -> Tensor[(9, 16, 8), float32] {
  %377 = @func_4927() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) */;
  %377.1
}

def @func_3755() -> (uint64, uint64) {
  %378 = @func_1950() /* ty=(uint64,) */;
  %379 = @func_1950() /* ty=(uint64,) */;
  %380 = %378.0;
  %381 = %379.0;
  (%380, %381)
}

def @func_1114() -> (Tensor[(9, 16, 8), uint16],) {
  %382 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %383 = %382.0;
  (%383,)
}

def @func_7019(%var_7016: int8) -> (Tensor[(9, 16, 8), float64], Tensor[(13, 2, 4), bool], int8) {
  %384 = cast(%var_7016, dtype="int8") /* ty=int8 */;
  %385 = reshape(%384, newshape=[]) /* ty=int8 */;
  %386 = @func_5884(%385) /* ty=(Tensor[(13, 2, 4), bool], Tensor[(9, 16, 8), float32], int8, Tensor[(132), int8]) */;
  %387 = @func_2144() /* ty=Tensor[(9, 16, 8), float64] */;
  %388 = %386.0;
  (%387, %388, %var_7016)
}

def @func_2802(%var_2726: Tensor[(1152), uint16], %var_2729: Tensor[(672), float32]) -> (uint64, Tensor[(15, 3, 11), int8], uint64, Tensor[(9, 16, 8), bool], Tensor[(1152), uint16], Tensor[(6, 8, 14), bool], Tensor[(672), float32], Tensor[(9, 16, 8), float32], Tensor[(6, 8, 14), bool], Tensor[(495), float32], Tensor[(9, 16, 8), uint16], uint64) {
  %389 = cast(meta[relay.Constant][22] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %390 = cast(meta[relay.Constant][22] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %391 = cast(meta[relay.Constant][22] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %392 = reshape(%389, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %393 = reshape(%390, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %394 = reshape(%391, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %395 = @func_120(%392, %393, %394) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(15, 3, 11), float64]) */;
  %396 = @func_1203() /* ty=(uint64,) */;
  %397 = cast(%var_2726, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
  %398 = reshape(%397, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
  %399 = cast(%var_2729, dtype="float32") /* ty=Tensor[(672), float32] */;
  %400 = cast(%var_2729, dtype="float32") /* ty=Tensor[(672), float32] */;
  %401 = reshape(%399, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %402 = reshape(%400, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %403 = @func_1381() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %404 = cast(%var_2729, dtype="float32") /* ty=Tensor[(672), float32] */;
  %405 = @func_720(%401, %402) /* ty=Tensor[(6, 8, 14), bool] */;
  %406 = cast(%405, dtype="float32") /* ty=Tensor[(6, 8, 14), float32] */;
  %407 = reshape(%404, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %408 = reshape(%406, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %409 = cast(meta[relay.Constant][22] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %410 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %411 = @func_1104() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), int8], Tensor[(495), float32], Tensor[(13, 2, 4), bool], Tensor[(13, 2, 4), bool], uint64) */;
  %412 = @func_1534() /* ty=uint64 */;
  %413 = %395.0;
  %414 = %396.0;
  %415 = @func_1233(%398) /* ty=Tensor[(9, 16, 8), bool] */;
  %416 = %403.0;
  %417 = @func_720(%407, %408) /* ty=Tensor[(6, 8, 14), bool] */;
  %418 = asin(%409) /* ty=Tensor[(495), float32] */;
  %419 = %410.0;
  %420 = %411.5;
  (%412, %413, %414, %415, %var_2726, %405, %var_2729, %416, %417, %418, %419, %420)
}

def @func_1534() -> uint64 {
  %421 = @func_1203() /* ty=(uint64,) */;
  %421.0
}

def @func_5231(%var_5196: Tensor[(324), bool], %var_5207: Tensor[(24, 2), float64]) -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], Tensor[(324), float32], Tensor[(6, 8, 15), int64], Tensor[(24, 2), float64], Tensor[(6, 8, 15), float32], Tensor[(9, 16, 8), float64]) {
  %422 = @func_2440() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %423 = %422.0;
  %424 = cast(%423, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
  %425 = cast(meta[relay.Constant][23] /* ty=Tensor[(324), bool] */, dtype="bool") /* ty=Tensor[(324), bool] */;
  %426 = reshape(%424, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), float64] */;
  %427 = reshape(%425, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), bool] */;
  %428 = @func_1443(%426, %427) /* ty=(Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) */;
  %429 = cast(%var_5196, dtype="float32") /* ty=Tensor[(324), float32] */;
  %430 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(324), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %431 = cast(meta[relay.Constant][23] /* ty=Tensor[(324), bool] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?), float32] */;
  %433 = cast(%var_5207, dtype="float64") /* ty=Tensor[(24, 2), float64] */;
  %434 = reshape(%433, newshape=[6, 8, 1]) /* ty=Tensor[(6, 8, 1), float64] */;
  %435 = @func_4850(%434) /* ty=(Tensor[(6, 8, 15), float32], Tensor[(6, 8, 15), int64]) */;
  %436 = cast(%var_5207, dtype="float64") /* ty=Tensor[(24, 2), float64] */;
  %437 = reshape(%436, newshape=[6, 8, 1]) /* ty=Tensor[(6, 8, 1), float64] */;
  %438 = @func_4850(%437) /* ty=(Tensor[(6, 8, 15), float32], Tensor[(6, 8, 15), int64]) */;
  %439 = %428.0;
  %440 = add(%431, %432) /* ty=Tensor[(324), float32] */;
  %441 = %435.1;
  %442 = %438.0;
  %443 = @func_2569() /* ty=Tensor[(9, 16, 8), float64] */;
  (%423, %439, %440, %441, %var_5207, %442, %443)
}

def @func_6250(%var_6236: Tensor[(14, 9, 14), int64]) -> (Tensor[(14, 9, 14), bool], Tensor[(9, 16, 8), float32]) {
  %444 = cast(%var_6236, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
  %445 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(14, 9, 14), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 9, 14), int64] */, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %448 = @func_1381() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %449 = greater(%446, %447) /* ty=Tensor[(14, 9, 14), bool] */;
  %450 = %448.0;
  (%449, %450)
}

def @func_2440() -> (Tensor[(9, 16, 8), uint16],) {
  %451 = @func_1114() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %452 = %451.0;
  (%452,)
}

def @func_2341() -> (Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float32]) {
  %453 = @func_1298() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(1152), float32]) */;
  %454 = @func_1381() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %455 = %453.0;
  %456 = %454.0;
  (%455, %456)
}

def @func_6546() -> Tensor[(13, 2, 4), bool] {
  %457 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
  %457.3
}

def @func_3971(%var_3966: Tensor[(12, 1, 5), float64]) -> (Tensor[(12, 1, 5), float64],) {
  %458 = cast(%var_3966, dtype="float64") /* ty=Tensor[(12, 1, 5), float64] */;
  %459 = asin(%458) /* ty=Tensor[(12, 1, 5), float64] */;
  (%459,)
}

def @func_7060() -> (Tensor[(9, 16, 8), float32],) {
  %460 = @func_2317() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %461 = %460.0;
  (%461,)
}

def @func_2884(%var_2871: Tensor[(3, 2, 4), bool], %var_2872: Tensor[(3, 2, 4), bool]) -> (Tensor[(3, 2, 4), bool], Tensor[(9, 16, 8), float32]) {
  %462 = cast(%var_2872, dtype="bool") /* ty=Tensor[(3, 2, 4), bool] */;
  %463 = shape_of(%var_2871, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%var_2871, dtype="bool") /* ty=Tensor[(3, 2, 4), bool] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %466 = @func_1381() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %467 = logical_and(%464, %465) /* ty=Tensor[(3, 2, 4), bool] */;
  %468 = %466.0;
  (%467, %468)
}

def @func_7453() -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32], Tensor[(5, 5, 12), bool], Tensor[(300), float64]) {
  %469 = @func_7402() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %470 = @func_4927() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) */;
  %471 = cast(meta[relay.Constant][25] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %472 = cast(meta[relay.Constant][25] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %473 = reshape(%471, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), float64] */;
  %474 = reshape(%472, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), float64] */;
  %475 = @func_4682(%473, %474) /* ty=(Tensor[(5, 5, 12), float64], Tensor[(5, 5, 12), bool]) */;
  %476 = %469.0;
  %477 = %470.1;
  %478 = %475.1;
  (%476, %477, %478, meta[relay.Constant][25] /* ty=Tensor[(300), float64] */)
}

def @func_7302() -> Tensor[(104), uint64] {
  @func_6972() /* ty=Tensor[(104), uint64] */
}

def @func_4560(%var_4543: Tensor[(11, 5, 3), bool], %var_4544: Tensor[(11, 5, 3), bool], %var_4549: Tensor[(11, 5, 3), bool]) -> (Tensor[(11, 5, 3), bool], Tensor[(11, 5, 3), int32]) {
  %479 = cast(%var_4544, dtype="bool") /* ty=Tensor[(11, 5, 3), bool] */;
  %480 = shape_of(%var_4543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%var_4543, dtype="bool") /* ty=Tensor[(11, 5, 3), bool] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %483 = cast(%var_4549, dtype="uint16") /* ty=Tensor[(11, 5, 3), uint16] */;
  %484 = shape_of(%var_4543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%var_4543, dtype="uint16") /* ty=Tensor[(11, 5, 3), uint16] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %487 = minimum(%485, %486) /* ty=Tensor[(11, 5, 3), uint16] */;
  %488 = cast(%var_4544, dtype="int32") /* ty=Tensor[(11, 5, 3), int32] */;
  %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%487, dtype="int32") /* ty=Tensor[(11, 5, 3), int32] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %492 = logical_or(%481, %482) /* ty=Tensor[(11, 5, 3), bool] */;
  %493 = multiply(%490, %491) /* ty=Tensor[(11, 5, 3), int32] */;
  (%492, %493)
}

def @func_8160() -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) {
  %494 = @func_4809() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) */;
  %495 = @func_3574() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %496 = %494.1;
  %497 = %495.0;
  (%496, %497)
}

def @func_1720() -> (Tensor[(9, 16, 8), float64],) {
  %498 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
  %499 = %498.6;
  %500 = cast(%499, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
  %501 = acos(%500) /* ty=Tensor[(9, 16, 8), float64] */;
  (%501,)
}

def @func_8226() -> (Tensor[(9, 16, 8), float32], Tensor[(?, 560), uint32], Tensor[(?, 560), uint8]) {
  %502 = @func_2317() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %503 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 560), float64] */, dtype="float64") /* ty=Tensor[(1, 560), float64] */;
  %504 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 560), float64] */, dtype="float64") /* ty=Tensor[(1, 560), float64] */;
  %505 = reshape(%503, newshape=[14, 10, 4]) /* ty=Tensor[(14, 10, 4), float64] */;
  %506 = reshape(%504, newshape=[14, 10, 4]) /* ty=Tensor[(14, 10, 4), float64] */;
  %507 = @func_3130(%505, %506) /* ty=(Tensor[(14, 10, 4), float64],) */;
  %508 = %507.0;
  %509 = cast(%508, dtype="uint32") /* ty=Tensor[(14, 10, 4), uint32] */;
  %510 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(1, 560), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %511 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 560), float64] */, dtype="uint32") /* ty=Tensor[(1, 560), uint32] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %513 = cast(%508, dtype="uint8") /* ty=Tensor[(14, 10, 4), uint8] */;
  %514 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(1, 560), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %515 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 560), float64] */, dtype="uint8") /* ty=Tensor[(1, 560), uint8] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %517 = %502.0;
  %518 = left_shift(%511, %512) /* ty=Tensor[(?, 560), uint32] */;
  %519 = logical_xor(%515, %516) /* ty=Tensor[(?, 560), uint8] */;
  (%517, %518, %519)
}

def @func_2637() -> Tensor[(9, 16, 8), uint16] {
  %520 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %520.0
}

def @func_7402() -> (Tensor[(9, 16, 8), uint16],) {
  %521 = @func_6885() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), uint16], Tensor[(165, 3), float64]) */;
  %522 = %521.1;
  (%522,)
}

def @func_120(%var_106: Tensor[(15, 3, 11), float32], %var_109: Tensor[(15, 3, 11), float32], %var_116: Tensor[(15, 3, 11), float32]) -> (Tensor[(15, 3, 11), int8], Tensor[(15, 3, 11), float64]) {
  %523 = cast(%var_106, dtype="float32") /* ty=Tensor[(15, 3, 11), float32] */;
  %524 = sinh(%523) /* ty=Tensor[(15, 3, 11), float32] */;
  %525 = cast(%var_109, dtype="int8") /* ty=Tensor[(15, 3, 11), int8] */;
  %526 = shape_of(%524, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%524, dtype="int8") /* ty=Tensor[(15, 3, 11), int8] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %529 = cast(%var_116, dtype="float64") /* ty=Tensor[(15, 3, 11), float64] */;
  %530 = shape_of(%var_109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%var_109, dtype="float64") /* ty=Tensor[(15, 3, 11), float64] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %533 = minimum(%527, %528) /* ty=Tensor[(15, 3, 11), int8] */;
  %534 = floor_divide(%531, %532) /* ty=Tensor[(15, 3, 11), float64] */;
  (%533, %534)
}

def @func_6760() -> (Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), int64], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float32]) {
  %535 = @func_1104() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), int8], Tensor[(495), float32], Tensor[(13, 2, 4), bool], Tensor[(13, 2, 4), bool], uint64) */;
  %536 = %535.0;
  %537 = cast(%536, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
  %538 = reshape(%537, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
  %539 = @func_4119(%538) /* ty=(Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), bool]) */;
  %540 = @func_2144() /* ty=Tensor[(9, 16, 8), float64] */;
  %541 = cast(%540, dtype="int64") /* ty=Tensor[(9, 16, 8), int64] */;
  %542 = shape_of(%536, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%536, dtype="int64") /* ty=Tensor[(9, 16, 8), int64] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %545 = @func_5017() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), float32], uint64) */;
  %546 = %539.1;
  %547 = subtract(%543, %544) /* ty=Tensor[(9, 16, 8), int64] */;
  %548 = %545.1;
  %549 = @func_1794() /* ty=Tensor[(9, 16, 8), float32] */;
  (%546, %547, %548, %549)
}

def @func_2377(%var_2375: Tensor[(324), bool]) -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], Tensor[(324), bool]) {
  %550 = @func_1720() /* ty=(Tensor[(9, 16, 8), float64],) */;
  %551 = %550.0;
  %552 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 16, 8), float64] */, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
  %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%551, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %556 = maximum(%554, %555) /* ty=Tensor[(9, 16, 8), uint16] */;
  %557 = cast(%556, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
  %558 = cast(%var_2375, dtype="bool") /* ty=Tensor[(324), bool] */;
  %559 = reshape(%557, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), float64] */;
  %560 = reshape(%558, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), bool] */;
  %561 = @func_1443(%559, %560) /* ty=(Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) */;
  %562 = %561.0;
  (%556, %562, %var_2375)
}

def @func_5104() -> (Tensor[(15, 3, 11), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), uint16]) {
  %563 = @func_1512() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */;
  %564 = @func_3812() /* ty=Tensor[(12, 9, 3), float32] */;
  %565 = cast(%564, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
  %566 = @func_4927() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) */;
  %567 = %563.1;
  %568 = tan(%565) /* ty=Tensor[(12, 9, 3), float32] */;
  %569 = %566.0;
  (%567, %568, %569)
}

def @func_5414(%var_5361: Tensor[(220), int8], %var_5405: Tensor[(200), uint64]) -> (Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16], Tensor[(220), int8], Tensor[(324), int8], Tensor[(54, 6), bool], Tensor[(200), uint64]) {
  %570 = @func_3544() /* ty=(Tensor[(10, 4, 15), bool],) */;
  %571 = cast(%var_5361, dtype="int8") /* ty=Tensor[(220), int8] */;
  %572 = reshape(%571, newshape=[220]) /* ty=Tensor[(220), int8] */;
  %573 = @func_3520(%572) /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(14, 10, 4), float64], Tensor[(560), float64], Tensor[(11, 2, 10), uint64], Tensor[(220), int8]) */;
  %574 = @func_3287() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(324), int8], Tensor[(288, 4), float64], Tensor[(324), bool], Tensor[(12, 9, 3), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */;
  %575 = cast(%var_5405, dtype="uint64") /* ty=Tensor[(200), uint64] */;
  %576 = cast(%var_5405, dtype="uint64") /* ty=Tensor[(200), uint64] */;
  %577 = %574.1;
  %578 = cast(%577, dtype="bool") /* ty=Tensor[(324), bool] */;
  %579 = reshape(%575, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), uint64] */;
  %580 = reshape(%576, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), uint64] */;
  %581 = reshape(%578, newshape=[54, 6]) /* ty=Tensor[(54, 6), bool] */;
  %582 = @func_4894(%579, %580, %581) /* ty=(Tensor[(8, 5, 5), uint64], Tensor[(12, 9, 3), float64], Tensor[(1152), float64], Tensor[(54, 6), bool]) */;
  %583 = %570.0;
  %584 = %573.0;
  %585 = %582.3;
  (%583, %584, %var_5361, %577, %585, %var_5405)
}

def @func_1443(%var_1413: Tensor[(9, 16, 8), float64], %var_1436: Tensor[(12, 9, 3), bool]) -> (Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) {
  %586 = @func_1173() /* ty=Tensor[(9, 16, 8), float64] */;
  %587 = cast(%var_1413, dtype="bool") /* ty=Tensor[(9, 16, 8), bool] */;
  %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%586, dtype="bool") /* ty=Tensor[(9, 16, 8), bool] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %591 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
  %592 = %591.1;
  %593 = cast(%var_1436, dtype="float64") /* ty=Tensor[(12, 9, 3), float64] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="float64") /* ty=Tensor[(12, 9, 3), float64] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %597 = less_equal(%589, %590) /* ty=Tensor[(9, 16, 8), bool] */;
  %598 = divide(%595, %596) /* ty=Tensor[(12, 9, 3), float64] */;
  (%597, %598)
}

def @func_4590() -> (uint64,) {
  %599 = @func_1534() /* ty=uint64 */;
  (%599,)
}

def @func_5775(%var_5772: Tensor[(6, 4), bool]) -> (Tensor[(9, 16, 8), uint16], uint64, Tensor[(3, 2, 4), bool], Tensor[(6, 4), bool]) {
  %600 = @func_1617() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], uint64, Tensor[(1152), float32], Tensor[(9, 16, 8), float32]) */;
  %601 = %600.0;
  %602 = cast(%601, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
  %603 = reshape(%602, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %604 = @func_1358(%603) /* ty=(uint64, Tensor[(1152), bool]) */;
  %605 = cast(%var_5772, dtype="bool") /* ty=Tensor[(6, 4), bool] */;
  %606 = cast(%var_5772, dtype="bool") /* ty=Tensor[(6, 4), bool] */;
  %607 = reshape(%605, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), bool] */;
  %608 = reshape(%606, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), bool] */;
  %609 = @func_2884(%607, %608) /* ty=(Tensor[(3, 2, 4), bool], Tensor[(9, 16, 8), float32]) */;
  %610 = %604.0;
  %611 = %609.0;
  (%601, %610, %611, %var_5772)
}

def @func_7149(%var_7115: Tensor[(2704), int64]) -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float32], Tensor[(13, 13, 16), int64], Tensor[(2704), int64], Tensor[(10, 4, 15), bool], Tensor[(12, 9, 3), float32], Tensor[(10, 4, 15), bool], Tensor[(12, 9, 3), float32]) {
  %612 = @func_4658() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %613 = @func_1994() /* ty=(Tensor[(9, 16, 8), float32], Tensor[(15, 3, 11), bool]) */;
  %614 = cast(%var_7115, dtype="int64") /* ty=Tensor[(2704), int64] */;
  %615 = reshape(%614, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), int64] */;
  %616 = @func_6109(%615) /* ty=(Tensor[(13, 13, 16), int64],) */;
  %617 = @func_3849() /* ty=(Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16]) */;
  %618 = @func_3849() /* ty=(Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16]) */;
  %619 = %612.0;
  %620 = %613.0;
  %621 = %616.0;
  %622 = %617.0;
  %623 = @func_5334() /* ty=Tensor[(12, 9, 3), float32] */;
  %624 = %618.0;
  %625 = @func_5334() /* ty=Tensor[(12, 9, 3), float32] */;
  (%619, %620, %621, %var_7115, %622, %623, %624, %625)
}

def @func_5017() -> (Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), float32], uint64) {
  %626 = @func_2341() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float32]) */;
  %627 = @func_4166() /* ty=Tensor[(9, 16, 8), float64] */;
  %628 = cast(%627, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
  %629 = reshape(%628, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %630 = @func_1358(%629) /* ty=(uint64, Tensor[(1152), bool]) */;
  %631 = %626.1;
  %632 = %630.0;
  (%627, %631, %632)
}

def @func_6322() -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float32], uint64, Tensor[(9, 16, 8), bool]) {
  %633 = @func_5065() /* ty=Tensor[(9, 16, 8), float32] */;
  %634 = cast(%633, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
  %635 = reshape(%634, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
  %636 = @func_4119(%635) /* ty=(Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), bool]) */;
  %637 = @func_1950() /* ty=(uint64,) */;
  %638 = @func_2341() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float32]) */;
  %639 = %636.0;
  %640 = %637.0;
  %641 = %638.0;
  (%633, %639, %640, %641)
}

def @func_4183() -> (Tensor[(104), uint64], Tensor[(9, 16, 8), uint16]) {
  %642 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
  %643 = @func_2440() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %644 = %642.5;
  %645 = %643.0;
  (%644, %645)
}

def @func_4850(%var_4821: Tensor[(6, 8, 1), float64]) -> (Tensor[(6, 8, 15), float32], Tensor[(6, 8, 15), int64]) {
  %646 = cast(%var_4821, dtype="float32") /* ty=Tensor[(6, 8, 1), float32] */;
  %647 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 8, 15), float64] */, dtype="float32") /* ty=Tensor[(6, 8, 15), float32] */;
  %648 = cast(%var_4821, dtype="float64") /* ty=Tensor[(6, 8, 1), float64] */;
  %649 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 8, 15), float64] */, dtype="float64") /* ty=Tensor[(6, 8, 15), float64] */;
  %650 = maximum(%648, %649) /* ty=Tensor[(6, 8, 15), float64] */;
  %651 = cast(%650, dtype="int64") /* ty=Tensor[(6, 8, 15), int64] */;
  %652 = cast(%var_4821, dtype="int64") /* ty=Tensor[(6, 8, 1), int64] */;
  %653 = floor_divide(%646, %647) /* ty=Tensor[(6, 8, 15), float32] */;
  %654 = add(%651, %652) /* ty=Tensor[(6, 8, 15), int64] */;
  (%653, %654)
}

def @func_5824() -> (Tensor[(9, 16, 8), uint16],) {
  %655 = @func_3849() /* ty=(Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16]) */;
  %656 = %655.1;
  (%656,)
}

def @func_8443(%var_8411: Tensor[(1200), int8]) -> (Tensor[(9, 16, 8), float32], uint64, Tensor[(672), float32], Tensor[(10, 10, 12), int8], Tensor[(1200), int8], Tensor[(48), float64], Tensor[(9, 16, 8), bool], Tensor[(6, 8, 15), float32], Tensor[(13, 2, 4), bool], Tensor[(104), uint64]) {
  %657 = @func_1658() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %658 = %657.0;
  %659 = cast(%658, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
  %660 = cast(meta[relay.Constant][29] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %661 = reshape(%659, newshape=[1152]) /* ty=Tensor[(1152), uint16] */;
  %662 = reshape(%660, newshape=[672]) /* ty=Tensor[(672), float32] */;
  %663 = @func_2802(%661, %662) /* ty=(uint64, Tensor[(15, 3, 11), int8], uint64, Tensor[(9, 16, 8), bool], Tensor[(1152), uint16], Tensor[(6, 8, 14), bool], Tensor[(672), float32], Tensor[(9, 16, 8), float32], Tensor[(6, 8, 14), bool], Tensor[(495), float32], Tensor[(9, 16, 8), uint16], uint64) */;
  %664 = cast(%var_8411, dtype="int8") /* ty=Tensor[(1200), int8] */;
  %665 = cast(%var_8411, dtype="int8") /* ty=Tensor[(1200), int8] */;
  %666 = reshape(%664, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int8] */;
  %667 = reshape(%665, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int8] */;
  %668 = @func_2855(%666, %667) /* ty=(Tensor[(10, 10, 12), int8],) */;
  %669 = @func_6154() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float64]) */;
  %670 = cast(meta[relay.Constant][30] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %671 = reshape(%670, newshape=[6, 8, 1]) /* ty=Tensor[(6, 8, 1), float64] */;
  %672 = @func_4850(%671) /* ty=(Tensor[(6, 8, 15), float32], Tensor[(6, 8, 15), int64]) */;
  %673 = %672.1;
  %674 = cast(%673, dtype="float32") /* ty=Tensor[(6, 8, 15), float32] */;
  %675 = %663.11;
  %676 = cast(%675, dtype="uint64") /* ty=uint64 */;
  %677 = cast(meta[relay.Constant][31] /* ty=Tensor[(104), uint64] */, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %678 = reshape(%676, newshape=[]) /* ty=uint64 */;
  %679 = reshape(%677, newshape=[13, 2, 4]) /* ty=Tensor[(13, 2, 4), uint64] */;
  %680 = %668.0;
  %681 = %669.0;
  %682 = acos(%674) /* ty=Tensor[(6, 8, 15), float32] */;
  %683 = @func_296(%678, %679) /* ty=Tensor[(13, 2, 4), bool] */;
  (%658, %675, meta[relay.Constant][29] /* ty=Tensor[(672), float32] */, %680, %var_8411, meta[relay.Constant][30] /* ty=Tensor[(48), float64] */, %681, %682, %683, meta[relay.Constant][31] /* ty=Tensor[(104), uint64] */)
}

def @func_4119(%var_4092: Tensor[(9, 16, 8), uint16]) -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), bool]) {
  %684 = @func_2317() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %685 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %686 = %685.0;
  %687 = cast(%var_4092, dtype="bool") /* ty=Tensor[(9, 16, 8), bool] */;
  %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%686, dtype="bool") /* ty=Tensor[(9, 16, 8), bool] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %691 = %684.0;
  %692 = not_equal(%689, %690) /* ty=Tensor[(9, 16, 8), bool] */;
  (%691, %692)
}

def @func_4166() -> Tensor[(9, 16, 8), float64] {
  %693 = @func_1720() /* ty=(Tensor[(9, 16, 8), float64],) */;
  %693.0
}

def @func_3520(%var_3509: Tensor[(220), int8]) -> (Tensor[(9, 16, 8), uint16], Tensor[(14, 10, 4), float64], Tensor[(560), float64], Tensor[(11, 2, 10), uint64], Tensor[(220), int8]) {
  %694 = cast(meta[relay.Constant][32] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
  %695 = cast(meta[relay.Constant][32] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
  %696 = reshape(%694, newshape=[14, 10, 4]) /* ty=Tensor[(14, 10, 4), float64] */;
  %697 = reshape(%695, newshape=[14, 10, 4]) /* ty=Tensor[(14, 10, 4), float64] */;
  %698 = @func_3130(%696, %697) /* ty=(Tensor[(14, 10, 4), float64],) */;
  %699 = cast(%var_3509, dtype="int8") /* ty=Tensor[(220), int8] */;
  %700 = reshape(%699, newshape=[11, 2, 10]) /* ty=Tensor[(11, 2, 10), int8] */;
  %701 = @func_1759(%700) /* ty=(Tensor[(11, 2, 10), int8], Tensor[(11, 2, 10), uint64]) */;
  %702 = @func_2637() /* ty=Tensor[(9, 16, 8), uint16] */;
  %703 = %698.0;
  %704 = %701.1;
  (%702, %703, meta[relay.Constant][32] /* ty=Tensor[(560), float64] */, %704, %var_3509)
}

def @func_2118() -> (Tensor[(9, 16, 8), float32],) {
  %705 = @func_1794() /* ty=Tensor[(9, 16, 8), float32] */;
  (%705,)
}

def @func_2650() -> (uint64,) {
  %706 = @func_1203() /* ty=(uint64,) */;
  %707 = %706.0;
  (%707,)
}

def @func_3628() -> Tensor[(9, 16, 8), float32] {
  %708 = @func_2317() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %708.0
}

def @func_5842() -> (Tensor[(9, 16, 8), float64],) {
  %709 = @func_2569() /* ty=Tensor[(9, 16, 8), float64] */;
  (%709,)
}

def @func_1512() -> (Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) {
  %710 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %711 = cast(meta[relay.Constant][33] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %712 = cast(meta[relay.Constant][33] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %713 = cast(meta[relay.Constant][33] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %714 = reshape(%711, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %715 = reshape(%712, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %716 = reshape(%713, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %717 = @func_120(%714, %715, %716) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(15, 3, 11), float64]) */;
  %718 = %710.0;
  %719 = %717.1;
  (%718, %719, meta[relay.Constant][33] /* ty=Tensor[(495), float32] */)
}

def @func_1950() -> (uint64,) {
  %720 = @func_1203() /* ty=(uint64,) */;
  %721 = %720.0;
  (%721,)
}

def @func_1658() -> (Tensor[(9, 16, 8), float32],) {
  %722 = @func_1381() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %723 = %722.0;
  (%723,)
}

def @func_3162(%var_3158: Tensor[(672), float32]) -> (Tensor[(9, 1), float32], Tensor[(9, 16, 8), float32], Tensor[(12, 2), bool], Tensor[(6, 8, 14), bool], Tensor[(672), float32]) {
  %724 = cast(meta[relay.Constant][34] /* ty=Tensor[(9, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 1), float32] */;
  %725 = cast(meta[relay.Constant][35] /* ty=Tensor[(12, 2), bool] */, dtype="bool") /* ty=Tensor[(12, 2), bool] */;
  %726 = cast(meta[relay.Constant][35] /* ty=Tensor[(12, 2), bool] */, dtype="bool") /* ty=Tensor[(12, 2), bool] */;
  %727 = reshape(%725, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), bool] */;
  %728 = reshape(%726, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), bool] */;
  %729 = @func_2884(%727, %728) /* ty=(Tensor[(3, 2, 4), bool], Tensor[(9, 16, 8), float32]) */;
  %730 = cast(%var_3158, dtype="float32") /* ty=Tensor[(672), float32] */;
  %731 = cast(%var_3158, dtype="float32") /* ty=Tensor[(672), float32] */;
  %732 = reshape(%730, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %733 = reshape(%731, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %734 = sinh(%724) /* ty=Tensor[(9, 1), float32] */;
  %735 = %729.1;
  %736 = @func_720(%732, %733) /* ty=Tensor[(6, 8, 14), bool] */;
  (%734, %735, meta[relay.Constant][35] /* ty=Tensor[(12, 2), bool] */, %736, %var_3158)
}

def @func_6575() -> (uint64,) {
  %737 = @func_6272() /* ty=(uint64,) */;
  %738 = %737.0;
  (%738,)
}

def @func_1104() -> (Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), int8], Tensor[(495), float32], Tensor[(13, 2, 4), bool], Tensor[(13, 2, 4), bool], uint64) {
  %739 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %740 = cast(meta[relay.Constant][36] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %741 = cast(meta[relay.Constant][36] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %742 = cast(meta[relay.Constant][36] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %743 = reshape(%740, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %744 = reshape(%741, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %745 = reshape(%742, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %746 = @func_120(%743, %744, %745) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(15, 3, 11), float64]) */;
  %747 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
  %748 = cast(meta[relay.Constant][37] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %749 = %747.3;
  %750 = cast(%749, dtype="uint64") /* ty=Tensor[(13, 2, 4), uint64] */;
  %751 = reshape(%748, newshape=[]) /* ty=uint64 */;
  %752 = reshape(%750, newshape=[13, 2, 4]) /* ty=Tensor[(13, 2, 4), uint64] */;
  %753 = %739.0;
  %754 = %746.0;
  %755 = @func_296(%751, %752) /* ty=Tensor[(13, 2, 4), bool] */;
  (%753, %754, meta[relay.Constant][36] /* ty=Tensor[(495), float32] */, %749, %755, meta[relay.Constant][37] /* ty=uint64 */)
}

def @func_720(%var_715: Tensor[(6, 8, 14), float32], %var_716: Tensor[(6, 8, 14), float32]) -> Tensor[(6, 8, 14), bool] {
  %756 = cast(%var_716, dtype="bool") /* ty=Tensor[(6, 8, 14), bool] */;
  %757 = shape_of(%var_715, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%var_715, dtype="bool") /* ty=Tensor[(6, 8, 14), bool] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%758, %759) /* ty=Tensor[(6, 8, 14), bool] */
}

def @func_8060(%var_8037: Tensor[(220), int8], %var_8038: Tensor[(10, 20), uint64]) -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16], Tensor[(220), int8], Tensor[(10, 20), uint64], Tensor[(9, 16, 8), uint16], Tensor[(2, 72), float64]) {
  %760 = @func_4658() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %761 = cast(%var_8037, dtype="int8") /* ty=Tensor[(220), int8] */;
  %762 = cast(%var_8038, dtype="uint64") /* ty=Tensor[(10, 20), uint64] */;
  %763 = reshape(%761, newshape=[220]) /* ty=Tensor[(220), int8] */;
  %764 = reshape(%762, newshape=[200]) /* ty=Tensor[(200), uint64] */;
  %765 = @func_5414(%763, %764) /* ty=(Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16], Tensor[(220), int8], Tensor[(324), int8], Tensor[(54, 6), bool], Tensor[(200), uint64]) */;
  %766 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 72), float64] */, dtype="float64") /* ty=Tensor[(2, 72), float64] */;
  %767 = reshape(%766, newshape=[1, 9, 16]) /* ty=Tensor[(1, 9, 16), float64] */;
  %768 = @func_4741(%767) /* ty=(Tensor[(5, 9, 16), float64], Tensor[(9, 16, 8), uint16], Tensor[(10, 10, 12), int8], Tensor[(1, 1200), int8], Tensor[(15, 3, 11), float64]) */;
  %769 = %760.0;
  %770 = %765.1;
  %771 = %768.1;
  (%769, %770, %var_8037, %var_8038, %771, meta[relay.Constant][38] /* ty=Tensor[(2, 72), float64] */)
}

def @func_7176(%var_7156: Tensor[(9, 14, 8), float32]) -> (Tensor[(9, 14, 8), bool], Tensor[(6, 8, 14), bool], Tensor[(672), float32], Tensor[(9, 14, 8), float64], Tensor[(6, 8, 14), bool]) {
  %772 = cast(%var_7156, dtype="bool") /* ty=Tensor[(9, 14, 8), bool] */;
  %773 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(9, 14, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(meta[relay.Constant][39] /* ty=Tensor[(9, 14, 8), float32] */, dtype="bool") /* ty=Tensor[(9, 14, 8), bool] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %776 = cast(meta[relay.Constant][40] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %777 = cast(meta[relay.Constant][40] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %778 = reshape(%776, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %779 = reshape(%777, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %780 = cast(meta[relay.Constant][39] /* ty=Tensor[(9, 14, 8), float32] */, dtype="float64") /* ty=Tensor[(9, 14, 8), float64] */;
  %781 = cast(meta[relay.Constant][40] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %782 = cast(meta[relay.Constant][40] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %783 = reshape(%781, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %784 = reshape(%782, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %785 = greater(%774, %775) /* ty=Tensor[(9, 14, 8), bool] */;
  %786 = @func_720(%778, %779) /* ty=Tensor[(6, 8, 14), bool] */;
  %787 = acosh(%780) /* ty=Tensor[(9, 14, 8), float64] */;
  %788 = @func_720(%783, %784) /* ty=Tensor[(6, 8, 14), bool] */;
  (%785, %786, meta[relay.Constant][40] /* ty=Tensor[(672), float32] */, %787, %788)
}

def @func_4741(%var_4713: Tensor[(1, 9, 16), float64]) -> (Tensor[(5, 9, 16), float64], Tensor[(9, 16, 8), uint16], Tensor[(10, 10, 12), int8], Tensor[(1, 1200), int8], Tensor[(15, 3, 11), float64]) {
  %789 = cast(%var_4713, dtype="float64") /* ty=Tensor[(1, 9, 16), float64] */;
  %790 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 9, 16), float64] */, dtype="float64") /* ty=Tensor[(5, 9, 16), float64] */;
  %791 = @func_1512() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */;
  %792 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 1200), int8] */, dtype="int8") /* ty=Tensor[(1, 1200), int8] */;
  %793 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 1200), int8] */, dtype="int8") /* ty=Tensor[(1, 1200), int8] */;
  %794 = reshape(%792, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int8] */;
  %795 = reshape(%793, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int8] */;
  %796 = @func_2855(%794, %795) /* ty=(Tensor[(10, 10, 12), int8],) */;
  %797 = @func_1512() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */;
  %798 = minimum(%789, %790) /* ty=Tensor[(5, 9, 16), float64] */;
  %799 = %791.0;
  %800 = %796.0;
  %801 = %797.1;
  (%798, %799, %800, meta[relay.Constant][42] /* ty=Tensor[(1, 1200), int8] */, %801)
}

def @func_3035() -> (Tensor[(10, 4, 15), bool],) {
  %802 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 4, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %803 = sinh(%802) /* ty=Tensor[(10, 4, 15), float64] */;
  %804 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 4, 15), float64] */, dtype="bool") /* ty=Tensor[(10, 4, 15), bool] */;
  %805 = shape_of(%803, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%803, dtype="bool") /* ty=Tensor[(10, 4, 15), bool] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %808 = greater_equal(%806, %807) /* ty=Tensor[(10, 4, 15), bool] */;
  (%808,)
}

def @func_8707() -> (Tensor[(13, 2, 4), bool], Tensor[(11, 2, 10), int8], Tensor[(220), int8]) {
  %809 = cast(meta[relay.Constant][44] /* ty=Tensor[(220), int8] */, dtype="int8") /* ty=Tensor[(220), int8] */;
  %810 = reshape(%809, newshape=[11, 2, 10]) /* ty=Tensor[(11, 2, 10), int8] */;
  %811 = @func_1759(%810) /* ty=(Tensor[(11, 2, 10), int8], Tensor[(11, 2, 10), uint64]) */;
  %812 = @func_6546() /* ty=Tensor[(13, 2, 4), bool] */;
  %813 = %811.0;
  (%812, %813, meta[relay.Constant][44] /* ty=Tensor[(220), int8] */)
}

def @func_3574() -> (Tensor[(9, 16, 8), uint16],) {
  %814 = @func_1512() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */;
  %815 = %814.0;
  (%815,)
}

def @func_6451() -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float32], Tensor[(324), bool], Tensor[(1400), float32], Tensor[(9, 16, 8), uint16]) {
  %816 = @func_2317() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %817 = cast(meta[relay.Constant][45] /* ty=Tensor[(324), bool] */, dtype="bool") /* ty=Tensor[(324), bool] */;
  %818 = cast(meta[relay.Constant][46] /* ty=Tensor[(1400), float32] */, dtype="float32") /* ty=Tensor[(1400), float32] */;
  %819 = reshape(%817, newshape=[324]) /* ty=Tensor[(324), bool] */;
  %820 = reshape(%818, newshape=[1400]) /* ty=Tensor[(1400), float32] */;
  %821 = @func_3961(%819, %820) /* ty=(uint64, Tensor[(9, 16, 8), float32], Tensor[(672), float32], Tensor[(324), bool], Tensor[(324), bool], Tensor[(9, 16, 8), float32], Tensor[(10, 14, 10), float32], Tensor[(1400), float32], Tensor[(11, 2, 10), float64], Tensor[(6, 8, 14), float64], Tensor[(324), bool], Tensor[(220), float32]) */;
  %822 = %816.0;
  %823 = %821.5;
  %824 = @func_2637() /* ty=Tensor[(9, 16, 8), uint16] */;
  (%822, %823, meta[relay.Constant][45] /* ty=Tensor[(324), bool] */, meta[relay.Constant][46] /* ty=Tensor[(1400), float32] */, %824)
}

def @func_2630(%var_2614: Tensor[(15, 3, 11), float64]) -> (Tensor[(15, 3, 11), int8], Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), uint16]) {
  %825 = @func_1512() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */;
  %826 = %825.1;
  %827 = cast(%var_2614, dtype="int8") /* ty=Tensor[(15, 3, 11), int8] */;
  %828 = shape_of(%826, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(%826, dtype="int8") /* ty=Tensor[(15, 3, 11), int8] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %831 = @func_1114() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %832 = @func_1114() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %833 = bitwise_xor(%829, %830) /* ty=Tensor[(15, 3, 11), int8] */;
  %834 = %831.0;
  %835 = %832.0;
  (%833, %834, %835)
}

def @func_1298() -> (Tensor[(9, 16, 8), bool], Tensor[(1152), float32]) {
  %836 = cast(meta[relay.Constant][47] /* ty=Tensor[(1152), uint16] */, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
  %837 = reshape(%836, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
  %838 = @func_1203() /* ty=(uint64,) */;
  %839 = %838.0;
  %840 = cast(%839, dtype="bool") /* ty=bool */;
  %841 = cast(meta[relay.Constant][47] /* ty=Tensor[(1152), uint16] */, dtype="bool") /* ty=Tensor[(1152), bool] */;
  %842 = logical_or(%840, %841) /* ty=Tensor[(1152), bool] */;
  %843 = cast(%842, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %844 = cast(%839, dtype="float32") /* ty=float32 */;
  %845 = @func_1233(%837) /* ty=Tensor[(9, 16, 8), bool] */;
  %846 = power(%843, %844) /* ty=Tensor[(1152), float32] */;
  (%845, %846)
}

def @func_1358(%var_1338: Tensor[(1152), float32]) -> (uint64, Tensor[(1152), bool]) {
  %847 = @func_1203() /* ty=(uint64,) */;
  %848 = @func_1298() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(1152), float32]) */;
  %849 = %848.1;
  %850 = cast(%var_1338, dtype="bool") /* ty=Tensor[(1152), bool] */;
  %851 = shape_of(%849, dtype="int32") /* ty=Tensor[(1), int32] */;
  %852 = cast(%849, dtype="bool") /* ty=Tensor[(1152), bool] */;
  %853 = dyn.reshape(%850, %851, newshape=[]) /* ty=Tensor[(?), bool] */;
  %854 = %847.0;
  %855 = less(%852, %853) /* ty=Tensor[(1152), bool] */;
  (%854, %855)
}

def @func_6154() -> (Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float64]) {
  %856 = @func_1617() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], uint64, Tensor[(1152), float32], Tensor[(9, 16, 8), float32]) */;
  %857 = %856.1;
  %858 = @func_5803() /* ty=Tensor[(9, 16, 8), float64] */;
  (%857, %858)
}

def @func_6794() -> (Tensor[(15, 14, 7), float64],) {
  %859 = cast(meta[relay.Constant][48] /* ty=Tensor[(15, 14, 7), float64] */, dtype="float64") /* ty=Tensor[(15, 14, 7), float64] */;
  %860 = log(%859) /* ty=Tensor[(15, 14, 7), float64] */;
  (%860,)
}

def @func_6885() -> (Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), uint16], Tensor[(165, 3), float64]) {
  %861 = @func_1298() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(1152), float32]) */;
  %862 = cast(meta[relay.Constant][49] /* ty=Tensor[(165, 3), float64] */, dtype="float64") /* ty=Tensor[(165, 3), float64] */;
  %863 = reshape(%862, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float64] */;
  %864 = @func_2630(%863) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), uint16]) */;
  %865 = %861.0;
  %866 = %864.1;
  (%865, %866, meta[relay.Constant][49] /* ty=Tensor[(165, 3), float64] */)
}

def @func_3395(%var_3376: Tensor[(7, 2, 7), float64]) -> (Tensor[(7, 2, 7), float64], Tensor[(15, 3, 11), int8]) {
  %867 = cast(%var_3376, dtype="float64") /* ty=Tensor[(7, 2, 7), float64] */;
  %868 = @func_1104() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), int8], Tensor[(495), float32], Tensor[(13, 2, 4), bool], Tensor[(13, 2, 4), bool], uint64) */;
  %869 = sin(%867) /* ty=Tensor[(7, 2, 7), float64] */;
  %870 = %868.1;
  (%869, %870)
}

def @func_8112() -> Tensor[(9, 16, 8), float32] {
  %871 = @func_1173() /* ty=Tensor[(9, 16, 8), float64] */;
  %872 = cast(%871, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
  sqrt(%872) /* ty=Tensor[(9, 16, 8), float32] */
}

def @func_6225(%var_6220: Tensor[(495), float64]) -> (Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), uint16], Tensor[(495), float64]) {
  %873 = cast(%var_6220, dtype="float64") /* ty=Tensor[(495), float64] */;
  %874 = reshape(%873, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float64] */;
  %875 = @func_2630(%874) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), uint16]) */;
  %876 = @func_5803() /* ty=Tensor[(9, 16, 8), float64] */;
  %877 = %875.2;
  (%876, %877, %var_6220)
}

def @func_6041(%var_5921: Tensor[(495), float64], %var_6010: Tensor[(12, 9, 3), float32]) -> (Tensor[(9, 16, 8), uint16], Tensor[(495), float64], Tensor[(12, 9, 3), float32], uint64, Tensor[(12, 9, 3), float64], Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), float32], Tensor[(12, 9, 3), uint8], Tensor[(9, 16, 8), uint16]) {
  %878 = cast(%var_5921, dtype="float64") /* ty=Tensor[(495), float64] */;
  %879 = reshape(%878, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float64] */;
  %880 = @func_2630(%879) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), uint16]) */;
  %881 = @func_5334() /* ty=Tensor[(12, 9, 3), float32] */;
  %882 = cast(%881, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
  %883 = log(%882) /* ty=Tensor[(12, 9, 3), float32] */;
  %884 = cast(%881, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
  %885 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %886 = cast(%883, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
  %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %888 = @func_1950() /* ty=(uint64,) */;
  %889 = cast(meta[relay.Constant][50] /* ty=Tensor[(12, 9, 3), float32] */, dtype="float64") /* ty=Tensor[(12, 9, 3), float64] */;
  %890 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %891 = cast(%883, dtype="float64") /* ty=Tensor[(12, 9, 3), float64] */;
  %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %893 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %894 = @func_5534() /* ty=(Tensor[(9, 16, 8), float64],) */;
  %895 = cast(%var_6010, dtype="uint8") /* ty=Tensor[(12, 9, 3), uint8] */;
  %896 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %897 = cast(%883, dtype="uint8") /* ty=Tensor[(12, 9, 3), uint8] */;
  %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %899 = @func_5104() /* ty=(Tensor[(15, 3, 11), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), uint16]) */;
  %900 = %880.2;
  %901 = floor_mod(%886, %887) /* ty=Tensor[(12, 9, 3), float32] */;
  %902 = %888.0;
  %903 = floor_divide(%891, %892) /* ty=Tensor[(12, 9, 3), float64] */;
  %904 = %893.0;
  %905 = %894.0;
  %906 = @func_4611() /* ty=Tensor[(12, 9, 3), float32] */;
  %907 = minimum(%897, %898) /* ty=Tensor[(12, 9, 3), uint8] */;
  %908 = %899.2;
  (%900, %var_5921, %901, %902, %903, %904, %905, %906, %907, %908)
}

def @func_7499() -> Tensor[(9, 16, 8), uint16] {
  %909 = @func_5104() /* ty=(Tensor[(15, 3, 11), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), uint16]) */;
  %909.2
}

def @main(%var_8887: Tensor[(10, 13, 5), uint64], %var_8888: Tensor[(10, 13, 5), uint64]) -> Tensor[(10, 13, 5), uint64] {
  %910 = cast(%var_8888, dtype="uint64") /* ty=Tensor[(10, 13, 5), uint64] */;
  %911 = shape_of(%var_8887, dtype="int32") /* ty=Tensor[(3), int32] */;
  %912 = cast(%var_8887, dtype="uint64") /* ty=Tensor[(10, 13, 5), uint64] */;
  %913 = dyn.reshape(%910, %911, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  maximum(%912, %913) /* ty=Tensor[(10, 13, 5), uint64] */
}

def @func_6705() -> (uint64, uint64, Tensor[(1152), uint16], Tensor[(672), float32], Tensor[(495), float32], Tensor[(15, 3, 11), float32]) {
  %914 = @func_6575() /* ty=(uint64,) */;
  %915 = cast(meta[relay.Constant][51] /* ty=Tensor[(1152), uint16] */, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
  %916 = cast(meta[relay.Constant][52] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %917 = reshape(%915, newshape=[1152]) /* ty=Tensor[(1152), uint16] */;
  %918 = reshape(%916, newshape=[672]) /* ty=Tensor[(672), float32] */;
  %919 = @func_2802(%917, %918) /* ty=(uint64, Tensor[(15, 3, 11), int8], uint64, Tensor[(9, 16, 8), bool], Tensor[(1152), uint16], Tensor[(6, 8, 14), bool], Tensor[(672), float32], Tensor[(9, 16, 8), float32], Tensor[(6, 8, 14), bool], Tensor[(495), float32], Tensor[(9, 16, 8), uint16], uint64) */;
  %920 = cast(meta[relay.Constant][53] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %921 = reshape(%920, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %922 = @func_2522(%921) /* ty=(Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), float32], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */;
  %923 = %922.2;
  %924 = cast(%923, dtype="float32") /* ty=Tensor[(15, 3, 11), float32] */;
  %925 = %914.0;
  %926 = %919.2;
  %927 = asin(%924) /* ty=Tensor[(15, 3, 11), float32] */;
  (%925, %926, meta[relay.Constant][51] /* ty=Tensor[(1152), uint16] */, meta[relay.Constant][52] /* ty=Tensor[(672), float32] */, meta[relay.Constant][53] /* ty=Tensor[(495), float32] */, %927)
}

def @func_2317() -> (Tensor[(9, 16, 8), float32],) {
  %928 = @func_1794() /* ty=Tensor[(9, 16, 8), float32] */;
  (%928,)
}

def @func_7583(%var_7558: Tensor[(7, 15, 4), uint16], %var_7559: Tensor[(7, 15, 4), uint16], %var_7579: Tensor[(560), float64]) -> (Tensor[(7, 15, 4), float32], Tensor[(14, 10, 4), float64], Tensor[(560), float64]) {
  %929 = cast(%var_7559, dtype="uint16") /* ty=Tensor[(7, 15, 4), uint16] */;
  %930 = shape_of(%var_7558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %931 = cast(%var_7558, dtype="uint16") /* ty=Tensor[(7, 15, 4), uint16] */;
  %932 = dyn.reshape(%929, %930, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %933 = right_shift(%931, %932) /* ty=Tensor[(7, 15, 4), uint16] */;
  %934 = cast(%933, dtype="float32") /* ty=Tensor[(7, 15, 4), float32] */;
  %935 = shape_of(%var_7559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %936 = cast(%var_7559, dtype="float32") /* ty=Tensor[(7, 15, 4), float32] */;
  %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %938 = cast(%var_7579, dtype="float64") /* ty=Tensor[(560), float64] */;
  %939 = cast(%var_7579, dtype="float64") /* ty=Tensor[(560), float64] */;
  %940 = reshape(%938, newshape=[14, 10, 4]) /* ty=Tensor[(14, 10, 4), float64] */;
  %941 = reshape(%939, newshape=[14, 10, 4]) /* ty=Tensor[(14, 10, 4), float64] */;
  %942 = @func_3130(%940, %941) /* ty=(Tensor[(14, 10, 4), float64],) */;
  %943 = mod(%936, %937) /* ty=Tensor[(7, 15, 4), float32] */;
  %944 = %942.0;
  (%943, %944, %var_7579)
}

def @func_3365(%var_3334: int8, %var_3335: Tensor[(11, 12, 1), int8]) -> (Tensor[(11, 12, 1), int8], Tensor[(9, 16, 8), float32], Tensor[(1152), uint16], Tensor[(672), float32], Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) {
  %945 = cast(%var_3334, dtype="int8") /* ty=int8 */;
  %946 = cast(%var_3335, dtype="int8") /* ty=Tensor[(11, 12, 1), int8] */;
  %947 = cast(meta[relay.Constant][54] /* ty=Tensor[(1152), uint16] */, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
  %948 = cast(meta[relay.Constant][55] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %949 = reshape(%947, newshape=[1152]) /* ty=Tensor[(1152), uint16] */;
  %950 = reshape(%948, newshape=[672]) /* ty=Tensor[(672), float32] */;
  %951 = @func_2802(%949, %950) /* ty=(uint64, Tensor[(15, 3, 11), int8], uint64, Tensor[(9, 16, 8), bool], Tensor[(1152), uint16], Tensor[(6, 8, 14), bool], Tensor[(672), float32], Tensor[(9, 16, 8), float32], Tensor[(6, 8, 14), bool], Tensor[(495), float32], Tensor[(9, 16, 8), uint16], uint64) */;
  %952 = cast(meta[relay.Constant][54] /* ty=Tensor[(1152), uint16] */, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
  %953 = reshape(%952, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
  %954 = @func_3287() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(324), int8], Tensor[(288, 4), float64], Tensor[(324), bool], Tensor[(12, 9, 3), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */;
  %955 = bitwise_or(%945, %946) /* ty=Tensor[(11, 12, 1), int8] */;
  %956 = %951.7;
  %957 = @func_1233(%953) /* ty=Tensor[(9, 16, 8), bool] */;
  %958 = %954.4;
  (%955, %956, meta[relay.Constant][54] /* ty=Tensor[(1152), uint16] */, meta[relay.Constant][55] /* ty=Tensor[(672), float32] */, %957, %958)
}

def @func_6179() -> Tensor[(9, 16, 8), float32] {
  %959 = @func_2118() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %959.0
}

def @func_2267(%var_2255: Tensor[(9, 16, 8), float64]) -> (Tensor[(9, 16, 8), uint32], Tensor[(9, 16, 8), float32]) {
  %960 = @func_1720() /* ty=(Tensor[(9, 16, 8), float64],) */;
  %961 = %960.0;
  %962 = cast(%var_2255, dtype="uint32") /* ty=Tensor[(9, 16, 8), uint32] */;
  %963 = shape_of(%961, dtype="int32") /* ty=Tensor[(3), int32] */;
  %964 = cast(%961, dtype="uint32") /* ty=Tensor[(9, 16, 8), uint32] */;
  %965 = dyn.reshape(%962, %963, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %966 = cast(%961, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
  %967 = multiply(%964, %965) /* ty=Tensor[(9, 16, 8), uint32] */;
  %968 = log(%966) /* ty=Tensor[(9, 16, 8), float32] */;
  (%967, %968)
}

def @func_1794() -> Tensor[(9, 16, 8), float32] {
  %969 = @func_1658() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %969.0
}

def @func_7975() -> Tensor[(9, 16, 8), uint16] {
  %970 = @func_1114() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %970.0
}

def @func_7279() -> (Tensor[(15, 14, 7), float64], Tensor[(9, 16, 8), uint16]) {
  %971 = @func_6794() /* ty=(Tensor[(15, 14, 7), float64],) */;
  %972 = %971.0;
  %973 = @func_5727() /* ty=Tensor[(9, 16, 8), uint16] */;
  (%972, %973)
}

def @func_5884(%var_5881: int8) -> (Tensor[(13, 2, 4), bool], Tensor[(9, 16, 8), float32], int8, Tensor[(132), int8]) {
  %974 = @func_1104() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), int8], Tensor[(495), float32], Tensor[(13, 2, 4), bool], Tensor[(13, 2, 4), bool], uint64) */;
  %975 = cast(%var_5881, dtype="int8") /* ty=int8 */;
  %976 = cast(meta[relay.Constant][56] /* ty=Tensor[(132), int8] */, dtype="int8") /* ty=Tensor[(132), int8] */;
  %977 = reshape(%975, newshape=[]) /* ty=int8 */;
  %978 = reshape(%976, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), int8] */;
  %979 = @func_3365(%977, %978) /* ty=(Tensor[(11, 12, 1), int8], Tensor[(9, 16, 8), float32], Tensor[(1152), uint16], Tensor[(672), float32], Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) */;
  %980 = %974.4;
  %981 = %979.1;
  (%980, %981, %var_5881, meta[relay.Constant][56] /* ty=Tensor[(132), int8] */)
}

def @func_7535() -> (Tensor[(12, 9, 3), float32],) {
  %982 = @func_3812() /* ty=Tensor[(12, 9, 3), float32] */;
  (%982,)
}

def @func_6272() -> (uint64,) {
  %983 = @func_1534() /* ty=uint64 */;
  (%983,)
}

def @func_5803() -> Tensor[(9, 16, 8), float64] {
  %984 = @func_5534() /* ty=(Tensor[(9, 16, 8), float64],) */;
  %984.0
}

def @func_2569() -> Tensor[(9, 16, 8), float64] {
  @func_2144() /* ty=Tensor[(9, 16, 8), float64] */
}

def @func_1617() -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], uint64, Tensor[(1152), float32], Tensor[(9, 16, 8), float32]) {
  %985 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %986 = @func_1298() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(1152), float32]) */;
  %987 = %986.0;
  %988 = cast(%987, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
  %989 = reshape(%988, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
  %990 = @func_1203() /* ty=(uint64,) */;
  %991 = @func_1298() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(1152), float32]) */;
  %992 = cast(%987, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
  %993 = acosh(%992) /* ty=Tensor[(9, 16, 8), float64] */;
  %994 = cast(%993, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
  %995 = %985.0;
  %996 = @func_1233(%989) /* ty=Tensor[(9, 16, 8), bool] */;
  %997 = %990.0;
  %998 = %991.1;
  %999 = tan(%994) /* ty=Tensor[(9, 16, 8), float32] */;
  (%995, %996, %997, %998, %999)
}

def @func_4682(%var_4675: Tensor[(5, 5, 12), float64], %var_4678: Tensor[(5, 5, 12), float64]) -> (Tensor[(5, 5, 12), float64], Tensor[(5, 5, 12), bool]) {
  %1000 = cast(%var_4675, dtype="float64") /* ty=Tensor[(5, 5, 12), float64] */;
  %1001 = cast(%var_4678, dtype="bool") /* ty=Tensor[(5, 5, 12), bool] */;
  %1002 = shape_of(%var_4675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1003 = cast(%var_4675, dtype="bool") /* ty=Tensor[(5, 5, 12), bool] */;
  %1004 = dyn.reshape(%1001, %1002, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1005 = acosh(%1000) /* ty=Tensor[(5, 5, 12), float64] */;
  %1006 = equal(%1003, %1004) /* ty=Tensor[(5, 5, 12), bool] */;
  (%1005, %1006)
}

def @func_8814(%var_8804: Tensor[(132), int8]) -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16], Tensor[(672), float32], int8, Tensor[(132), int8]) {
  %1007 = @func_1114() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %1008 = @func_2341() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float32]) */;
  %1009 = @func_3574() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %1010 = cast(meta[relay.Constant][57] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %1011 = cast(%var_8804, dtype="int8") /* ty=Tensor[(132), int8] */;
  %1012 = reshape(%1010, newshape=[]) /* ty=int8 */;
  %1013 = reshape(%1011, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), int8] */;
  %1014 = @func_3365(%1012, %1013) /* ty=(Tensor[(11, 12, 1), int8], Tensor[(9, 16, 8), float32], Tensor[(1152), uint16], Tensor[(672), float32], Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) */;
  %1015 = %1007.0;
  %1016 = %1008.1;
  %1017 = %1009.0;
  %1018 = %1014.3;
  (%1015, %1016, %1017, %1018, meta[relay.Constant][57] /* ty=int8 */, %var_8804)
}

def @func_8078() -> (Tensor[(12, 9, 3), float32],) {
  %1019 = @func_4611() /* ty=Tensor[(12, 9, 3), float32] */;
  (%1019,)
}

def @func_6109(%var_6101: Tensor[(13, 13, 16), int64]) -> (Tensor[(13, 13, 16), int64],) {
  %1020 = cast(meta[relay.Constant][58] /* ty=Tensor[(13, 13, 16), int64] */, dtype="int64") /* ty=Tensor[(13, 13, 16), int64] */;
  %1021 = shape_of(%var_6101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1022 = cast(%var_6101, dtype="int64") /* ty=Tensor[(13, 13, 16), int64] */;
  %1023 = dyn.reshape(%1020, %1021, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1024 = subtract(%1022, %1023) /* ty=Tensor[(13, 13, 16), int64] */;
  (%1024,)
}

def @func_3130(%var_3120: Tensor[(14, 10, 4), float64], %var_3121: Tensor[(14, 10, 4), float64]) -> (Tensor[(14, 10, 4), float64],) {
  %1025 = cast(%var_3121, dtype="float64") /* ty=Tensor[(14, 10, 4), float64] */;
  %1026 = shape_of(%var_3120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1027 = cast(%var_3120, dtype="float64") /* ty=Tensor[(14, 10, 4), float64] */;
  %1028 = dyn.reshape(%1025, %1026, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1029 = floor_mod(%1027, %1028) /* ty=Tensor[(14, 10, 4), float64] */;
  (%1029,)
}

def @func_3812() -> Tensor[(12, 9, 3), float32] {
  %1030 = @func_3287() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(324), int8], Tensor[(288, 4), float64], Tensor[(324), bool], Tensor[(12, 9, 3), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */;
  %1030.5
}

def @func_3006(%var_2993: Tensor[(16, 3, 9), float32]) -> Tensor[(16, 3, 9), float32] {
  %1031 = cast(%var_2993, dtype="float32") /* ty=Tensor[(16, 3, 9), float32] */;
  log(%1031) /* ty=Tensor[(16, 3, 9), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3368(%var_3366: int8, %var_3367: Tensor[(11, 12, 1), int8]) -> (Tensor[(11, 12, 1), int8], Tensor[(9, 16, 8), float32], Tensor[(1152), uint16], Tensor[(672), float32], Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) {
  %14 = fn (%var_3334: int8, %var_3335: Tensor[(11, 12, 1), int8]) -> (Tensor[(11, 12, 1), int8], Tensor[(9, 16, 8), float32], Tensor[(1152), uint16], Tensor[(672), float32], Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) {
    %0 = cast(%var_3334, dtype="int8") /* ty=int8 */;
    %1 = cast(%var_3335, dtype="int8") /* ty=Tensor[(11, 12, 1), int8] */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(1152), uint16] */, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
    %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
    %4 = reshape(%2, newshape=[1152]) /* ty=Tensor[(1152), uint16] */;
    %5 = reshape(%3, newshape=[672]) /* ty=Tensor[(672), float32] */;
    %6 = @func_2802(%4, %5) /* ty=(uint64, Tensor[(15, 3, 11), int8], uint64, Tensor[(9, 16, 8), bool], Tensor[(1152), uint16], Tensor[(6, 8, 14), bool], Tensor[(672), float32], Tensor[(9, 16, 8), float32], Tensor[(6, 8, 14), bool], Tensor[(495), float32], Tensor[(9, 16, 8), uint16], uint64) */;
    %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(1152), uint16] */, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
    %8 = reshape(%7, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
    %9 = @func_3287() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(324), int8], Tensor[(288, 4), float64], Tensor[(324), bool], Tensor[(12, 9, 3), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */;
    %10 = bitwise_or(%0, %1) /* ty=Tensor[(11, 12, 1), int8] */;
    %11 = %6.7;
    %12 = @func_1233(%8) /* ty=Tensor[(9, 16, 8), bool] */;
    %13 = %9.4;
    (%10, %11, meta[relay.Constant][0] /* ty=Tensor[(1152), uint16] */, meta[relay.Constant][1] /* ty=Tensor[(672), float32] */, %12, %13)
  };
  %14(%var_3366, %var_3367) /* ty=(Tensor[(11, 12, 1), int8], Tensor[(9, 16, 8), float32], Tensor[(1152), uint16], Tensor[(672), float32], Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) */
}

def @func_1383() -> (Tensor[(9, 16, 8), float32],) {
  @func_1381() /* ty=(Tensor[(9, 16, 8), float32],) */
}

def @func_3974(%var_3972: Tensor[(12, 1, 5), float64]) -> (Tensor[(12, 1, 5), float64],) {
  @func_3971(%var_3972) /* ty=(Tensor[(12, 1, 5), float64],) */
}

def @func_2120() -> (Tensor[(9, 16, 8), float32],) {
  @func_2118() /* ty=(Tensor[(9, 16, 8), float32],) */
}

def @func_2855(%var_2820: Tensor[(10, 10, 12), int8], %var_2821: Tensor[(10, 10, 12), int8]) -> (Tensor[(10, 10, 12), int8],) {
  %15 = cast(%var_2821, dtype="int8") /* ty=Tensor[(10, 10, 12), int8] */;
  %16 = shape_of(%var_2820, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%var_2820, dtype="int8") /* ty=Tensor[(10, 10, 12), int8] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %19 = add(%17, %18) /* ty=Tensor[(10, 10, 12), int8] */;
  (%19,)
}

def @func_5336() -> Tensor[(12, 9, 3), float32] {
  @func_5334() /* ty=Tensor[(12, 9, 3), float32] */
}

def @func_2802(%var_2726: Tensor[(1152), uint16], %var_2729: Tensor[(672), float32]) -> (uint64, Tensor[(15, 3, 11), int8], uint64, Tensor[(9, 16, 8), bool], Tensor[(1152), uint16], Tensor[(6, 8, 14), bool], Tensor[(672), float32], Tensor[(9, 16, 8), float32], Tensor[(6, 8, 14), bool], Tensor[(495), float32], Tensor[(9, 16, 8), uint16], uint64) {
  %20 = cast(meta[relay.Constant][2] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %23 = reshape(%20, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %24 = reshape(%21, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %25 = reshape(%22, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %26 = @func_120(%23, %24, %25) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(15, 3, 11), float64]) */;
  %27 = @func_1203() /* ty=(uint64,) */;
  %28 = cast(%var_2726, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
  %29 = reshape(%28, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
  %30 = cast(%var_2729, dtype="float32") /* ty=Tensor[(672), float32] */;
  %31 = cast(%var_2729, dtype="float32") /* ty=Tensor[(672), float32] */;
  %32 = reshape(%30, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %33 = reshape(%31, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %34 = @func_1381() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %35 = cast(%var_2729, dtype="float32") /* ty=Tensor[(672), float32] */;
  %36 = @func_720(%32, %33) /* ty=Tensor[(6, 8, 14), bool] */;
  %37 = cast(%36, dtype="float32") /* ty=Tensor[(6, 8, 14), float32] */;
  %38 = reshape(%35, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %39 = reshape(%37, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %41 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %42 = @func_1104() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), int8], Tensor[(495), float32], Tensor[(13, 2, 4), bool], Tensor[(13, 2, 4), bool], uint64) */;
  %43 = @func_1534() /* ty=uint64 */;
  %44 = %26.0;
  %45 = %27.0;
  %46 = @func_1233(%29) /* ty=Tensor[(9, 16, 8), bool] */;
  %47 = %34.0;
  %48 = @func_720(%38, %39) /* ty=Tensor[(6, 8, 14), bool] */;
  %49 = asin(%40) /* ty=Tensor[(495), float32] */;
  %50 = %41.0;
  %51 = %42.5;
  (%43, %44, %45, %46, %var_2726, %36, %var_2729, %47, %48, %49, %50, %51)
}

def @func_3520(%var_3509: Tensor[(220), int8]) -> (Tensor[(9, 16, 8), uint16], Tensor[(14, 10, 4), float64], Tensor[(560), float64], Tensor[(11, 2, 10), uint64], Tensor[(220), int8]) {
  %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
  %53 = cast(meta[relay.Constant][3] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
  %54 = reshape(%52, newshape=[14, 10, 4]) /* ty=Tensor[(14, 10, 4), float64] */;
  %55 = reshape(%53, newshape=[14, 10, 4]) /* ty=Tensor[(14, 10, 4), float64] */;
  %56 = @func_3130(%54, %55) /* ty=(Tensor[(14, 10, 4), float64],) */;
  %57 = cast(%var_3509, dtype="int8") /* ty=Tensor[(220), int8] */;
  %58 = reshape(%57, newshape=[11, 2, 10]) /* ty=Tensor[(11, 2, 10), int8] */;
  %59 = @func_1759(%58) /* ty=(Tensor[(11, 2, 10), int8], Tensor[(11, 2, 10), uint64]) */;
  %60 = @func_2637() /* ty=Tensor[(9, 16, 8), uint16] */;
  %61 = %56.0;
  %62 = %59.1;
  (%60, %61, meta[relay.Constant][3] /* ty=Tensor[(560), float64] */, %62, %var_3509)
}

def @func_5500(%var_5499: Tensor[(4, 4, 3), float64]) -> (Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), uint32]) {
  %69 = fn (%var_5479: Tensor[(4, 4, 3), float64]) -> (Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), uint32]) {
    %63 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(1, 4, 1), float64] */;
    %64 = cast(%var_5479, dtype="float64") /* ty=Tensor[(4, 4, 3), float64] */;
    %65 = cast(%var_5479, dtype="uint32") /* ty=Tensor[(4, 4, 3), uint32] */;
    %66 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 4, 1), float64] */, dtype="uint32") /* ty=Tensor[(1, 4, 1), uint32] */;
    %67 = mod(%63, %64) /* ty=Tensor[(4, 4, 3), float64] */;
    %68 = bitwise_or(%65, %66) /* ty=Tensor[(4, 4, 3), uint32] */;
    (%67, %68)
  };
  %69(%var_5499) /* ty=(Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), uint32]) */
}

def @func_8078() -> (Tensor[(12, 9, 3), float32],) {
  %70 = @func_4611() /* ty=Tensor[(12, 9, 3), float32] */;
  (%70,)
}

def @func_8114() -> Tensor[(9, 16, 8), float32] {
  @func_8112() /* ty=Tensor[(9, 16, 8), float32] */
}

def @func_6044(%var_6042: Tensor[(495), float64], %var_6043: Tensor[(12, 9, 3), float32]) -> (Tensor[(9, 16, 8), uint16], Tensor[(495), float64], Tensor[(12, 9, 3), float32], uint64, Tensor[(12, 9, 3), float64], Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), float32], Tensor[(12, 9, 3), uint8], Tensor[(9, 16, 8), uint16]) {
  %102 = fn (%var_5921: Tensor[(495), float64], %var_6010: Tensor[(12, 9, 3), float32]) -> (Tensor[(9, 16, 8), uint16], Tensor[(495), float64], Tensor[(12, 9, 3), float32], uint64, Tensor[(12, 9, 3), float64], Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), float32], Tensor[(12, 9, 3), uint8], Tensor[(9, 16, 8), uint16]) {
    %71 = cast(%var_5921, dtype="float64") /* ty=Tensor[(495), float64] */;
    %72 = reshape(%71, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float64] */;
    %73 = @func_2630(%72) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), uint16]) */;
    %74 = @func_5334() /* ty=Tensor[(12, 9, 3), float32] */;
    %75 = cast(%74, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
    %76 = log(%75) /* ty=Tensor[(12, 9, 3), float32] */;
    %77 = cast(%74, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
    %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
    %79 = cast(%76, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
    %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %81 = @func_1950() /* ty=(uint64,) */;
    %82 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 9, 3), float32] */, dtype="float64") /* ty=Tensor[(12, 9, 3), float64] */;
    %83 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
    %84 = cast(%76, dtype="float64") /* ty=Tensor[(12, 9, 3), float64] */;
    %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %86 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
    %87 = @func_5534() /* ty=(Tensor[(9, 16, 8), float64],) */;
    %88 = cast(%var_6010, dtype="uint8") /* ty=Tensor[(12, 9, 3), uint8] */;
    %89 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
    %90 = cast(%76, dtype="uint8") /* ty=Tensor[(12, 9, 3), uint8] */;
    %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %92 = @func_5104() /* ty=(Tensor[(15, 3, 11), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), uint16]) */;
    %93 = %73.2;
    %94 = floor_mod(%79, %80) /* ty=Tensor[(12, 9, 3), float32] */;
    %95 = %81.0;
    %96 = floor_divide(%84, %85) /* ty=Tensor[(12, 9, 3), float64] */;
    %97 = %86.0;
    %98 = %87.0;
    %99 = @func_4611() /* ty=Tensor[(12, 9, 3), float32] */;
    %100 = minimum(%90, %91) /* ty=Tensor[(12, 9, 3), uint8] */;
    %101 = %92.2;
    (%93, %var_5921, %94, %95, %96, %97, %98, %99, %100, %101)
  };
  %102(%var_6042, %var_6043) /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(495), float64], Tensor[(12, 9, 3), float32], uint64, Tensor[(12, 9, 3), float64], Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), float32], Tensor[(12, 9, 3), uint8], Tensor[(9, 16, 8), uint16]) */
}

def @func_5334() -> Tensor[(12, 9, 3), float32] {
  @func_3812() /* ty=Tensor[(12, 9, 3), float32] */
}

def @func_8817(%var_8815: Tensor[(132), int8]) -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16], Tensor[(672), float32], int8, Tensor[(132), int8]) {
  @func_8814(%var_8815) /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16], Tensor[(672), float32], int8, Tensor[(132), int8]) */
}

def @func_4929() -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) {
  @func_4927() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) */
}

def @func_7281() -> (Tensor[(15, 14, 7), float64], Tensor[(9, 16, 8), uint16]) {
  @func_7279() /* ty=(Tensor[(15, 14, 7), float64], Tensor[(9, 16, 8), uint16]) */
}

def @func_6253(%var_6251: Tensor[(14, 9, 14), int64]) -> (Tensor[(14, 9, 14), bool], Tensor[(9, 16, 8), float32]) {
  @func_6250(%var_6251) /* ty=(Tensor[(14, 9, 14), bool], Tensor[(9, 16, 8), float32]) */
}

def @func_8228() -> (Tensor[(9, 16, 8), float32], Tensor[(?, 560), uint32], Tensor[(?, 560), uint8]) {
  @func_8226() /* ty=(Tensor[(9, 16, 8), float32], Tensor[(?, 560), uint32], Tensor[(?, 560), uint8]) */
}

def @func_4592() -> (uint64,) {
  @func_4590() /* ty=(uint64,) */
}

def @func_1205() -> (uint64,) {
  @func_1203() /* ty=(uint64,) */
}

def @func_2317() -> (Tensor[(9, 16, 8), float32],) {
  %103 = @func_1794() /* ty=Tensor[(9, 16, 8), float32] */;
  (%103,)
}

def @func_1235(%var_1234: Tensor[(9, 16, 8), uint16]) -> Tensor[(9, 16, 8), bool] {
  %110 = fn (%var_1228: Tensor[(9, 16, 8), uint16]) -> Tensor[(9, 16, 8), bool] {
    %104 = @func_1114() /* ty=(Tensor[(9, 16, 8), uint16],) */;
    %105 = %104.0;
    %106 = cast(%var_1228, dtype="bool") /* ty=Tensor[(9, 16, 8), bool] */;
    %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
    %108 = cast(%105, dtype="bool") /* ty=Tensor[(9, 16, 8), bool] */;
    %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%108, %109) /* ty=Tensor[(9, 16, 8), bool] */
  };
  %110(%var_1234) /* ty=Tensor[(9, 16, 8), bool] */
}

def @func_983(%var_982: Tensor[(104), uint64]) -> (Tensor[(9, 16, 8), float32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64]) {
  %125 = fn (%var_976: Tensor[(104), uint64]) -> (Tensor[(9, 16, 8), float32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64]) {
    %111 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
    %112 = %111.0;
    %113 = cast(%112, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
    %114 = cosh(%113) /* ty=Tensor[(9, 16, 8), float64] */;
    %115 = cast(%112, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
    %116 = shape_of(%114, dtype="int32") /* ty=Tensor[(3), int32] */;
    %117 = cast(%114, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
    %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %119 = cast(meta[relay.Constant][6] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %120 = cast(%var_976, dtype="uint64") /* ty=Tensor[(104), uint64] */;
    %121 = reshape(%119, newshape=[]) /* ty=uint64 */;
    %122 = reshape(%120, newshape=[13, 2, 4]) /* ty=Tensor[(13, 2, 4), uint64] */;
    %123 = mod(%117, %118) /* ty=Tensor[(9, 16, 8), float32] */;
    %124 = @func_296(%121, %122) /* ty=Tensor[(13, 2, 4), bool] */;
    (%123, %124, meta[relay.Constant][6] /* ty=uint64 */, %var_976)
  };
  %125(%var_982) /* ty=(Tensor[(9, 16, 8), float32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64]) */
}

def @func_4898(%var_4895: Tensor[(8, 5, 5), uint64], %var_4896: Tensor[(8, 5, 5), uint64], %var_4897: Tensor[(54, 6), bool]) -> (Tensor[(8, 5, 5), uint64], Tensor[(12, 9, 3), float64], Tensor[(1152), float64], Tensor[(54, 6), bool]) {
  %137 = fn (%var_4871: Tensor[(8, 5, 5), uint64], %var_4872: Tensor[(8, 5, 5), uint64], %var_4882: Tensor[(54, 6), bool]) -> (Tensor[(8, 5, 5), uint64], Tensor[(12, 9, 3), float64], Tensor[(1152), float64], Tensor[(54, 6), bool]) {
    %126 = cast(%var_4872, dtype="uint64") /* ty=Tensor[(8, 5, 5), uint64] */;
    %127 = shape_of(%var_4871, dtype="int32") /* ty=Tensor[(3), int32] */;
    %128 = cast(%var_4871, dtype="uint64") /* ty=Tensor[(8, 5, 5), uint64] */;
    %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %130 = cast(meta[relay.Constant][7] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
    %131 = cast(%var_4882, dtype="bool") /* ty=Tensor[(54, 6), bool] */;
    %132 = reshape(%130, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), float64] */;
    %133 = reshape(%131, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), bool] */;
    %134 = @func_1443(%132, %133) /* ty=(Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) */;
    %135 = logical_xor(%128, %129) /* ty=Tensor[(8, 5, 5), uint64] */;
    %136 = %134.1;
    (%135, %136, meta[relay.Constant][7] /* ty=Tensor[(1152), float64] */, %var_4882)
  };
  %137(%var_4895, %var_4896, %var_4897) /* ty=(Tensor[(8, 5, 5), uint64], Tensor[(12, 9, 3), float64], Tensor[(1152), float64], Tensor[(54, 6), bool]) */
}

def @func_6272() -> (uint64,) {
  %138 = @func_1534() /* ty=uint64 */;
  (%138,)
}

def @func_3629() -> Tensor[(9, 16, 8), float32] {
  %140 = fn () -> Tensor[(9, 16, 8), float32] {
    %139 = @func_2317() /* ty=(Tensor[(9, 16, 8), float32],) */;
    %139.0
  };
  %140() /* ty=Tensor[(9, 16, 8), float32] */
}

def @func_1298() -> (Tensor[(9, 16, 8), bool], Tensor[(1152), float32]) {
  %141 = cast(meta[relay.Constant][8] /* ty=Tensor[(1152), uint16] */, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
  %142 = reshape(%141, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
  %143 = @func_1203() /* ty=(uint64,) */;
  %144 = %143.0;
  %145 = cast(%144, dtype="bool") /* ty=bool */;
  %146 = cast(meta[relay.Constant][8] /* ty=Tensor[(1152), uint16] */, dtype="bool") /* ty=Tensor[(1152), bool] */;
  %147 = logical_or(%145, %146) /* ty=Tensor[(1152), bool] */;
  %148 = cast(%147, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %149 = cast(%144, dtype="float32") /* ty=float32 */;
  %150 = @func_1233(%142) /* ty=Tensor[(9, 16, 8), bool] */;
  %151 = power(%148, %149) /* ty=Tensor[(1152), float32] */;
  (%150, %151)
}

def @func_1381() -> (Tensor[(9, 16, 8), float32],) {
  %152 = @func_1173() /* ty=Tensor[(9, 16, 8), float64] */;
  %153 = cast(%152, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
  %154 = cos(%153) /* ty=Tensor[(9, 16, 8), float32] */;
  (%154,)
}

def @func_8226() -> (Tensor[(9, 16, 8), float32], Tensor[(?, 560), uint32], Tensor[(?, 560), uint8]) {
  %155 = @func_2317() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %156 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 560), float64] */, dtype="float64") /* ty=Tensor[(1, 560), float64] */;
  %157 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 560), float64] */, dtype="float64") /* ty=Tensor[(1, 560), float64] */;
  %158 = reshape(%156, newshape=[14, 10, 4]) /* ty=Tensor[(14, 10, 4), float64] */;
  %159 = reshape(%157, newshape=[14, 10, 4]) /* ty=Tensor[(14, 10, 4), float64] */;
  %160 = @func_3130(%158, %159) /* ty=(Tensor[(14, 10, 4), float64],) */;
  %161 = %160.0;
  %162 = cast(%161, dtype="uint32") /* ty=Tensor[(14, 10, 4), uint32] */;
  %163 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(1, 560), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %164 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 560), float64] */, dtype="uint32") /* ty=Tensor[(1, 560), uint32] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %166 = cast(%161, dtype="uint8") /* ty=Tensor[(14, 10, 4), uint8] */;
  %167 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(1, 560), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %168 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 560), float64] */, dtype="uint8") /* ty=Tensor[(1, 560), uint8] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %170 = %155.0;
  %171 = left_shift(%164, %165) /* ty=Tensor[(?, 560), uint32] */;
  %172 = logical_xor(%168, %169) /* ty=Tensor[(?, 560), uint8] */;
  (%170, %171, %172)
}

def @func_3035() -> (Tensor[(10, 4, 15), bool],) {
  %173 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 4, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %174 = sinh(%173) /* ty=Tensor[(10, 4, 15), float64] */;
  %175 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 4, 15), float64] */, dtype="bool") /* ty=Tensor[(10, 4, 15), bool] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="bool") /* ty=Tensor[(10, 4, 15), bool] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %179 = greater_equal(%177, %178) /* ty=Tensor[(10, 4, 15), bool] */;
  (%179,)
}

def @func_723(%var_721: Tensor[(6, 8, 14), float32], %var_722: Tensor[(6, 8, 14), float32]) -> Tensor[(6, 8, 14), bool] {
  %184 = fn (%var_715: Tensor[(6, 8, 14), float32], %var_716: Tensor[(6, 8, 14), float32]) -> Tensor[(6, 8, 14), bool] {
    %180 = cast(%var_716, dtype="bool") /* ty=Tensor[(6, 8, 14), bool] */;
    %181 = shape_of(%var_715, dtype="int32") /* ty=Tensor[(3), int32] */;
    %182 = cast(%var_715, dtype="bool") /* ty=Tensor[(6, 8, 14), bool] */;
    %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%182, %183) /* ty=Tensor[(6, 8, 14), bool] */
  };
  %184(%var_721, %var_722) /* ty=Tensor[(6, 8, 14), bool] */
}

def @func_7258() -> (Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), uint16]) {
  %189 = fn () -> (Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), uint16]) {
    %185 = @func_5842() /* ty=(Tensor[(9, 16, 8), float64],) */;
    %186 = @func_6885() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), uint16], Tensor[(165, 3), float64]) */;
    %187 = %185.0;
    %188 = %186.1;
    (%187, %188)
  };
  %189() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), uint16]) */
}

def @func_6280() -> (Tensor[(9, 16, 8), float64],) {
  %190 = @func_2569() /* ty=Tensor[(9, 16, 8), float64] */;
  (%190,)
}

def @func_6451() -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float32], Tensor[(324), bool], Tensor[(1400), float32], Tensor[(9, 16, 8), uint16]) {
  %191 = @func_2317() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %192 = cast(meta[relay.Constant][11] /* ty=Tensor[(324), bool] */, dtype="bool") /* ty=Tensor[(324), bool] */;
  %193 = cast(meta[relay.Constant][12] /* ty=Tensor[(1400), float32] */, dtype="float32") /* ty=Tensor[(1400), float32] */;
  %194 = reshape(%192, newshape=[324]) /* ty=Tensor[(324), bool] */;
  %195 = reshape(%193, newshape=[1400]) /* ty=Tensor[(1400), float32] */;
  %196 = @func_3961(%194, %195) /* ty=(uint64, Tensor[(9, 16, 8), float32], Tensor[(672), float32], Tensor[(324), bool], Tensor[(324), bool], Tensor[(9, 16, 8), float32], Tensor[(10, 14, 10), float32], Tensor[(1400), float32], Tensor[(11, 2, 10), float64], Tensor[(6, 8, 14), float64], Tensor[(324), bool], Tensor[(220), float32]) */;
  %197 = %191.0;
  %198 = %196.5;
  %199 = @func_2637() /* ty=Tensor[(9, 16, 8), uint16] */;
  (%197, %198, meta[relay.Constant][11] /* ty=Tensor[(324), bool] */, meta[relay.Constant][12] /* ty=Tensor[(1400), float32] */, %199)
}

def @func_2652() -> (uint64,) {
  @func_2650() /* ty=(uint64,) */
}

def @func_3287() -> (Tensor[(9, 16, 8), uint16], Tensor[(324), int8], Tensor[(288, 4), float64], Tensor[(324), bool], Tensor[(12, 9, 3), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) {
  %200 = cast(meta[relay.Constant][13] /* ty=Tensor[(324), bool] */, dtype="bool") /* ty=Tensor[(324), bool] */;
  %201 = cast(meta[relay.Constant][14] /* ty=Tensor[(288, 4), uint16] */, dtype="uint16") /* ty=Tensor[(288, 4), uint16] */;
  %202 = reshape(%200, newshape=[324]) /* ty=Tensor[(324), bool] */;
  %203 = reshape(%201, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
  %204 = @func_2105(%202, %203) /* ty=(Tensor[(12, 9, 3), float64], Tensor[(324), bool], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */;
  %205 = @func_1950() /* ty=(uint64,) */;
  %206 = %205.0;
  %207 = cast(%206, dtype="int8") /* ty=int8 */;
  %208 = cast(meta[relay.Constant][13] /* ty=Tensor[(324), bool] */, dtype="int8") /* ty=Tensor[(324), int8] */;
  %209 = cast(meta[relay.Constant][14] /* ty=Tensor[(288, 4), uint16] */, dtype="float64") /* ty=Tensor[(288, 4), float64] */;
  %210 = cast(%206, dtype="float64") /* ty=float64 */;
  %211 = cast(meta[relay.Constant][13] /* ty=Tensor[(324), bool] */, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %212 = subtract(%207, %208) /* ty=Tensor[(324), int8] */;
  %213 = cast(%212, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %214 = reshape(%211, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), uint32] */;
  %215 = reshape(%213, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), uint32] */;
  %216 = @func_447(%214, %215) /* ty=(Tensor[(12, 9, 3), uint32], Tensor[(12, 9, 3), bool]) */;
  %217 = %216.0;
  %218 = cast(%217, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
  %219 = log2(%218) /* ty=Tensor[(12, 9, 3), float32] */;
  %220 = cast(%219, dtype="float64") /* ty=Tensor[(12, 9, 3), float64] */;
  %221 = acos(%220) /* ty=Tensor[(12, 9, 3), float64] */;
  %222 = cast(%221, dtype="bool") /* ty=Tensor[(12, 9, 3), bool] */;
  %223 = reshape(%222, newshape=[324]) /* ty=Tensor[(324), bool] */;
  %224 = @func_2377(%223) /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], Tensor[(324), bool]) */;
  %225 = cast(%221, dtype="float64") /* ty=Tensor[(12, 9, 3), float64] */;
  %226 = cast(%219, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
  %227 = cast(meta[relay.Constant][13] /* ty=Tensor[(324), bool] */, dtype="bool") /* ty=Tensor[(324), bool] */;
  %228 = %204.3;
  %229 = cast(%228, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
  %230 = reshape(%227, newshape=[324]) /* ty=Tensor[(324), bool] */;
  %231 = reshape(%229, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
  %232 = @func_2105(%230, %231) /* ty=(Tensor[(12, 9, 3), float64], Tensor[(324), bool], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */;
  %233 = @func_2440() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %234 = floor_divide(%209, %210) /* ty=Tensor[(288, 4), float64] */;
  %235 = %224.2;
  %236 = sin(%225) /* ty=Tensor[(12, 9, 3), float64] */;
  %237 = asin(%226) /* ty=Tensor[(12, 9, 3), float32] */;
  %238 = %232.2;
  %239 = %233.0;
  (%228, %212, %234, %235, %236, %237, %238, %239)
}

def @func_7179(%var_7177: Tensor[(9, 14, 8), float32]) -> (Tensor[(9, 14, 8), bool], Tensor[(6, 8, 14), bool], Tensor[(672), float32], Tensor[(9, 14, 8), float64], Tensor[(6, 8, 14), bool]) {
  @func_7176(%var_7177) /* ty=(Tensor[(9, 14, 8), bool], Tensor[(6, 8, 14), bool], Tensor[(672), float32], Tensor[(9, 14, 8), float64], Tensor[(6, 8, 14), bool]) */
}

def @func_2884(%var_2871: Tensor[(3, 2, 4), bool], %var_2872: Tensor[(3, 2, 4), bool]) -> (Tensor[(3, 2, 4), bool], Tensor[(9, 16, 8), float32]) {
  %240 = cast(%var_2872, dtype="bool") /* ty=Tensor[(3, 2, 4), bool] */;
  %241 = shape_of(%var_2871, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%var_2871, dtype="bool") /* ty=Tensor[(3, 2, 4), bool] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %244 = @func_1381() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %245 = logical_and(%242, %243) /* ty=Tensor[(3, 2, 4), bool] */;
  %246 = %244.0;
  (%245, %246)
}

def @func_2146() -> Tensor[(9, 16, 8), float64] {
  @func_2144() /* ty=Tensor[(9, 16, 8), float64] */
}

def @func_3545() -> (Tensor[(10, 4, 15), bool],) {
  %249 = fn () -> (Tensor[(10, 4, 15), bool],) {
    %247 = @func_3035() /* ty=(Tensor[(10, 4, 15), bool],) */;
    %248 = %247.0;
    (%248,)
  };
  %249() /* ty=(Tensor[(10, 4, 15), bool],) */
}

def @func_299(%var_297: uint64, %var_298: Tensor[(13, 2, 4), uint64]) -> Tensor[(13, 2, 4), bool] {
  %252 = fn (%var_288: uint64, %var_289: Tensor[(13, 2, 4), uint64]) -> Tensor[(13, 2, 4), bool] {
    %250 = cast(%var_288, dtype="bool") /* ty=bool */;
    %251 = cast(%var_289, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
    equal(%250, %251) /* ty=Tensor[(13, 2, 4), bool] */
  };
  %252(%var_297, %var_298) /* ty=Tensor[(13, 2, 4), bool] */
}

def @func_6225(%var_6220: Tensor[(495), float64]) -> (Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), uint16], Tensor[(495), float64]) {
  %253 = cast(%var_6220, dtype="float64") /* ty=Tensor[(495), float64] */;
  %254 = reshape(%253, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float64] */;
  %255 = @func_2630(%254) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), uint16]) */;
  %256 = @func_5803() /* ty=Tensor[(9, 16, 8), float64] */;
  %257 = %255.2;
  (%256, %257, %var_6220)
}

def @func_2888(%var_2886: Tensor[(3, 2, 4), bool], %var_2887: Tensor[(3, 2, 4), bool]) -> (Tensor[(3, 2, 4), bool], Tensor[(9, 16, 8), float32]) {
  @func_2884(%var_2886, %var_2887) /* ty=(Tensor[(3, 2, 4), bool], Tensor[(9, 16, 8), float32]) */
}

def @func_6762() -> (Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), int64], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float32]) {
  @func_6760() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), int64], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float32]) */
}

def @func_1300() -> (Tensor[(9, 16, 8), bool], Tensor[(1152), float32]) {
  @func_1298() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(1152), float32]) */
}

def @func_2632(%var_2631: Tensor[(15, 3, 11), float64]) -> (Tensor[(15, 3, 11), int8], Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), uint16]) {
  %269 = fn (%var_2614: Tensor[(15, 3, 11), float64]) -> (Tensor[(15, 3, 11), int8], Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), uint16]) {
    %258 = @func_1512() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */;
    %259 = %258.1;
    %260 = cast(%var_2614, dtype="int8") /* ty=Tensor[(15, 3, 11), int8] */;
    %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
    %262 = cast(%259, dtype="int8") /* ty=Tensor[(15, 3, 11), int8] */;
    %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %264 = @func_1114() /* ty=(Tensor[(9, 16, 8), uint16],) */;
    %265 = @func_1114() /* ty=(Tensor[(9, 16, 8), uint16],) */;
    %266 = bitwise_xor(%262, %263) /* ty=Tensor[(15, 3, 11), int8] */;
    %267 = %264.0;
    %268 = %265.0;
    (%266, %267, %268)
  };
  %269(%var_2631) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), uint16]) */
}

def @func_5065() -> Tensor[(9, 16, 8), float32] {
  %270 = @func_4927() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) */;
  %270.1
}

def @func_4564(%var_4561: Tensor[(11, 5, 3), bool], %var_4562: Tensor[(11, 5, 3), bool], %var_4563: Tensor[(11, 5, 3), bool]) -> (Tensor[(11, 5, 3), bool], Tensor[(11, 5, 3), int32]) {
  %286 = fn (%var_4543: Tensor[(11, 5, 3), bool], %var_4544: Tensor[(11, 5, 3), bool], %var_4549: Tensor[(11, 5, 3), bool]) -> (Tensor[(11, 5, 3), bool], Tensor[(11, 5, 3), int32]) {
    %271 = cast(%var_4544, dtype="bool") /* ty=Tensor[(11, 5, 3), bool] */;
    %272 = shape_of(%var_4543, dtype="int32") /* ty=Tensor[(3), int32] */;
    %273 = cast(%var_4543, dtype="bool") /* ty=Tensor[(11, 5, 3), bool] */;
    %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %275 = cast(%var_4549, dtype="uint16") /* ty=Tensor[(11, 5, 3), uint16] */;
    %276 = shape_of(%var_4543, dtype="int32") /* ty=Tensor[(3), int32] */;
    %277 = cast(%var_4543, dtype="uint16") /* ty=Tensor[(11, 5, 3), uint16] */;
    %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %279 = minimum(%277, %278) /* ty=Tensor[(11, 5, 3), uint16] */;
    %280 = cast(%var_4544, dtype="int32") /* ty=Tensor[(11, 5, 3), int32] */;
    %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
    %282 = cast(%279, dtype="int32") /* ty=Tensor[(11, 5, 3), int32] */;
    %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %284 = logical_or(%273, %274) /* ty=Tensor[(11, 5, 3), bool] */;
    %285 = multiply(%282, %283) /* ty=Tensor[(11, 5, 3), int32] */;
    (%284, %285)
  };
  %286(%var_4561, %var_4562, %var_4563) /* ty=(Tensor[(11, 5, 3), bool], Tensor[(11, 5, 3), int32]) */
}

def @func_7537() -> (Tensor[(12, 9, 3), float32],) {
  @func_7535() /* ty=(Tensor[(12, 9, 3), float32],) */
}

def @func_1115() -> (Tensor[(9, 16, 8), uint16],) {
  %289 = fn () -> (Tensor[(9, 16, 8), uint16],) {
    %287 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
    %288 = %287.0;
    (%288,)
  };
  %289() /* ty=(Tensor[(9, 16, 8), uint16],) */
}

def @func_7953(%var_7917: Tensor[(15, 11, 14), uint32], %var_7918: Tensor[(15, 11, 14), uint32]) -> (Tensor[(15, 11, 14), uint32], Tensor[(495), float64], Tensor[(165, 3), float32], Tensor[(324), int8]) {
  %290 = cast(%var_7918, dtype="uint32") /* ty=Tensor[(15, 11, 14), uint32] */;
  %291 = shape_of(%var_7917, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%var_7917, dtype="uint32") /* ty=Tensor[(15, 11, 14), uint32] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %294 = cast(meta[relay.Constant][15] /* ty=Tensor[(165, 3), float32] */, dtype="float32") /* ty=Tensor[(165, 3), float32] */;
  %295 = cast(meta[relay.Constant][15] /* ty=Tensor[(165, 3), float32] */, dtype="float32") /* ty=Tensor[(165, 3), float32] */;
  %296 = cast(meta[relay.Constant][16] /* ty=Tensor[(324), int8] */, dtype="int8") /* ty=Tensor[(324), int8] */;
  %297 = reshape(%294, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %298 = reshape(%295, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %299 = reshape(%296, newshape=[324]) /* ty=Tensor[(324), int8] */;
  %300 = @func_4430(%297, %298, %299) /* ty=(Tensor[(9, 16, 8), float32], uint64, Tensor[(15, 3, 11), int8], Tensor[(495), float64], uint64, uint64, Tensor[(324), int8]) */;
  %301 = bitwise_and(%292, %293) /* ty=Tensor[(15, 11, 14), uint32] */;
  %302 = %300.3;
  (%301, %302, meta[relay.Constant][15] /* ty=Tensor[(165, 3), float32] */, meta[relay.Constant][16] /* ty=Tensor[(324), int8] */)
}

def @func_1203() -> (uint64,) {
  %303 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
  %304 = %303.4;
  (%304,)
}

def @func_4810() -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) {
  %309 = fn () -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) {
    %305 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
    %306 = @func_2118() /* ty=(Tensor[(9, 16, 8), float32],) */;
    %307 = %305.0;
    %308 = %306.0;
    (%307, %308)
  };
  %309() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) */
}

def @func_1174() -> Tensor[(9, 16, 8), float64] {
  %311 = fn () -> Tensor[(9, 16, 8), float64] {
    %310 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
    %310.6
  };
  %311() /* ty=Tensor[(9, 16, 8), float64] */
}

def @func_1443(%var_1413: Tensor[(9, 16, 8), float64], %var_1436: Tensor[(12, 9, 3), bool]) -> (Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) {
  %312 = @func_1173() /* ty=Tensor[(9, 16, 8), float64] */;
  %313 = cast(%var_1413, dtype="bool") /* ty=Tensor[(9, 16, 8), bool] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="bool") /* ty=Tensor[(9, 16, 8), bool] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %317 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
  %318 = %317.1;
  %319 = cast(%var_1436, dtype="float64") /* ty=Tensor[(12, 9, 3), float64] */;
  %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%318, dtype="float64") /* ty=Tensor[(12, 9, 3), float64] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %323 = less_equal(%315, %316) /* ty=Tensor[(9, 16, 8), bool] */;
  %324 = divide(%321, %322) /* ty=Tensor[(12, 9, 3), float64] */;
  (%323, %324)
}

def @func_8301() -> Tensor[(9, 16, 8), bool] {
  @func_8299() /* ty=Tensor[(9, 16, 8), bool] */
}

def @func_7455() -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32], Tensor[(5, 5, 12), bool], Tensor[(300), float64]) {
  @func_7453() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32], Tensor[(5, 5, 12), bool], Tensor[(300), float64]) */
}

def @func_2109(%var_2107: Tensor[(324), bool], %var_2108: Tensor[(9, 16, 8), uint16]) -> (Tensor[(12, 9, 3), float64], Tensor[(324), bool], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) {
  @func_2105(%var_2107, %var_2108) /* ty=(Tensor[(12, 9, 3), float64], Tensor[(324), bool], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */
}

def @func_1513() -> (Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) {
  %335 = fn () -> (Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) {
    %325 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
    %326 = cast(meta[relay.Constant][17] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
    %327 = cast(meta[relay.Constant][17] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
    %328 = cast(meta[relay.Constant][17] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
    %329 = reshape(%326, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
    %330 = reshape(%327, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
    %331 = reshape(%328, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
    %332 = @func_120(%329, %330, %331) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(15, 3, 11), float64]) */;
    %333 = %325.0;
    %334 = %332.1;
    (%333, %334, meta[relay.Constant][17] /* ty=Tensor[(495), float32] */)
  };
  %335() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */
}

def @func_4003() -> (uint64,) {
  @func_4001() /* ty=(uint64,) */
}

def @func_4927() -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) {
  %336 = @func_3574() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %337 = @func_2118() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %338 = %336.0;
  %339 = %337.0;
  (%338, %339)
}

def @func_5729() -> Tensor[(9, 16, 8), uint16] {
  @func_5727() /* ty=Tensor[(9, 16, 8), uint16] */
}

def @func_2637() -> Tensor[(9, 16, 8), uint16] {
  %340 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %340.0
}

def @func_5777(%var_5776: Tensor[(6, 4), bool]) -> (Tensor[(9, 16, 8), uint16], uint64, Tensor[(3, 2, 4), bool], Tensor[(6, 4), bool]) {
  %353 = fn (%var_5772: Tensor[(6, 4), bool]) -> (Tensor[(9, 16, 8), uint16], uint64, Tensor[(3, 2, 4), bool], Tensor[(6, 4), bool]) {
    %341 = @func_1617() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], uint64, Tensor[(1152), float32], Tensor[(9, 16, 8), float32]) */;
    %342 = %341.0;
    %343 = cast(%342, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
    %344 = reshape(%343, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %345 = @func_1358(%344) /* ty=(uint64, Tensor[(1152), bool]) */;
    %346 = cast(%var_5772, dtype="bool") /* ty=Tensor[(6, 4), bool] */;
    %347 = cast(%var_5772, dtype="bool") /* ty=Tensor[(6, 4), bool] */;
    %348 = reshape(%346, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), bool] */;
    %349 = reshape(%347, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), bool] */;
    %350 = @func_2884(%348, %349) /* ty=(Tensor[(3, 2, 4), bool], Tensor[(9, 16, 8), float32]) */;
    %351 = %345.0;
    %352 = %350.0;
    (%342, %351, %352, %var_5772)
  };
  %353(%var_5776) /* ty=(Tensor[(9, 16, 8), uint16], uint64, Tensor[(3, 2, 4), bool], Tensor[(6, 4), bool]) */
}

def @func_6407(%var_6395: Tensor[(104), uint64]) -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float64], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64]) {
  %354 = @func_5824() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %355 = cast(meta[relay.Constant][18] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %356 = cast(%var_6395, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %357 = reshape(%355, newshape=[]) /* ty=uint64 */;
  %358 = reshape(%356, newshape=[13, 2, 4]) /* ty=Tensor[(13, 2, 4), uint64] */;
  %359 = %354.0;
  %360 = @func_2569() /* ty=Tensor[(9, 16, 8), float64] */;
  %361 = @func_296(%357, %358) /* ty=Tensor[(13, 2, 4), bool] */;
  (%359, %360, %361, meta[relay.Constant][18] /* ty=uint64 */, %var_6395)
}

def @func_7499() -> Tensor[(9, 16, 8), uint16] {
  %362 = @func_5104() /* ty=(Tensor[(15, 3, 11), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), uint16]) */;
  %362.2
}

def @func_450(%var_448: Tensor[(12, 9, 3), uint32], %var_449: Tensor[(12, 9, 3), uint32]) -> (Tensor[(12, 9, 3), uint32], Tensor[(12, 9, 3), bool]) {
  %375 = fn (%var_394: Tensor[(12, 9, 3), uint32], %var_395: Tensor[(12, 9, 3), uint32]) -> (Tensor[(12, 9, 3), uint32], Tensor[(12, 9, 3), bool]) {
    %363 = cast(%var_395, dtype="uint32") /* ty=Tensor[(12, 9, 3), uint32] */;
    %364 = shape_of(%var_394, dtype="int32") /* ty=Tensor[(3), int32] */;
    %365 = cast(%var_394, dtype="uint32") /* ty=Tensor[(12, 9, 3), uint32] */;
    %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %367 = cast(%var_394, dtype="float64") /* ty=Tensor[(12, 9, 3), float64] */;
    %368 = atan(%367) /* ty=Tensor[(12, 9, 3), float64] */;
    %369 = cast(%var_395, dtype="bool") /* ty=Tensor[(12, 9, 3), bool] */;
    %370 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
    %371 = cast(%368, dtype="bool") /* ty=Tensor[(12, 9, 3), bool] */;
    %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %373 = subtract(%365, %366) /* ty=Tensor[(12, 9, 3), uint32] */;
    %374 = less(%371, %372) /* ty=Tensor[(12, 9, 3), bool] */;
    (%373, %374)
  };
  %375(%var_448, %var_449) /* ty=(Tensor[(12, 9, 3), uint32], Tensor[(12, 9, 3), bool]) */
}

def @func_7279() -> (Tensor[(15, 14, 7), float64], Tensor[(9, 16, 8), uint16]) {
  %376 = @func_6794() /* ty=(Tensor[(15, 14, 7), float64],) */;
  %377 = %376.0;
  %378 = @func_5727() /* ty=Tensor[(9, 16, 8), uint16] */;
  (%377, %378)
}

def @func_8709() -> (Tensor[(13, 2, 4), bool], Tensor[(11, 2, 10), int8], Tensor[(220), int8]) {
  @func_8707() /* ty=(Tensor[(13, 2, 4), bool], Tensor[(11, 2, 10), int8], Tensor[(220), int8]) */
}

def @func_2188(%var_2186: Tensor[(10, 14, 10), float32], %var_2187: Tensor[(10, 14, 10), float32]) -> (Tensor[(10, 14, 10), float32], Tensor[(10, 14, 10), float32]) {
  %389 = fn (%var_2171: Tensor[(10, 14, 10), float32], %var_2181: Tensor[(10, 14, 10), float32]) -> (Tensor[(10, 14, 10), float32], Tensor[(10, 14, 10), float32]) {
    %379 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 14, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 10), float32] */;
    %380 = shape_of(%var_2171, dtype="int32") /* ty=Tensor[(3), int32] */;
    %381 = cast(%var_2171, dtype="float32") /* ty=Tensor[(10, 14, 10), float32] */;
    %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %383 = cast(%var_2181, dtype="float32") /* ty=Tensor[(10, 14, 10), float32] */;
    %384 = shape_of(%var_2171, dtype="int32") /* ty=Tensor[(3), int32] */;
    %385 = cast(%var_2171, dtype="float32") /* ty=Tensor[(10, 14, 10), float32] */;
    %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %387 = divide(%381, %382) /* ty=Tensor[(10, 14, 10), float32] */;
    %388 = power(%385, %386) /* ty=Tensor[(10, 14, 10), float32] */;
    (%387, %388)
  };
  %389(%var_2186, %var_2187) /* ty=(Tensor[(10, 14, 10), float32], Tensor[(10, 14, 10), float32]) */
}

def @func_8004() -> (Tensor[(9, 16, 8), float32],) {
  @func_8002() /* ty=(Tensor[(9, 16, 8), float32],) */
}

def @func_4184() -> (Tensor[(104), uint64], Tensor[(9, 16, 8), uint16]) {
  %394 = fn () -> (Tensor[(104), uint64], Tensor[(9, 16, 8), uint16]) {
    %390 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
    %391 = @func_2440() /* ty=(Tensor[(9, 16, 8), uint16],) */;
    %392 = %390.5;
    %393 = %391.0;
    (%392, %393)
  };
  %394() /* ty=(Tensor[(104), uint64], Tensor[(9, 16, 8), uint16]) */
}

def @func_6973() -> Tensor[(104), uint64] {
  %396 = fn () -> Tensor[(104), uint64] {
    %395 = @func_4183() /* ty=(Tensor[(104), uint64], Tensor[(9, 16, 8), uint16]) */;
    %395.0
  };
  %396() /* ty=Tensor[(104), uint64] */
}

def @func_1759(%var_1743: Tensor[(11, 2, 10), int8]) -> (Tensor[(11, 2, 10), int8], Tensor[(11, 2, 10), uint64]) {
  %397 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 2, 10), int8] */, dtype="int8") /* ty=Tensor[(1, 2, 10), int8] */;
  %398 = cast(%var_1743, dtype="int8") /* ty=Tensor[(11, 2, 10), int8] */;
  %399 = cast(%var_1743, dtype="float64") /* ty=Tensor[(11, 2, 10), float64] */;
  %400 = acosh(%399) /* ty=Tensor[(11, 2, 10), float64] */;
  %401 = cast(%var_1743, dtype="uint64") /* ty=Tensor[(11, 2, 10), uint64] */;
  %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%400, dtype="uint64") /* ty=Tensor[(11, 2, 10), uint64] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %405 = logical_xor(%397, %398) /* ty=Tensor[(11, 2, 10), int8] */;
  %406 = right_shift(%403, %404) /* ty=Tensor[(11, 2, 10), uint64] */;
  (%405, %406)
}

def @func_4430(%var_4389: Tensor[(495), float32], %var_4404: Tensor[(495), float32], %var_4421: Tensor[(324), int8]) -> (Tensor[(9, 16, 8), float32], uint64, Tensor[(15, 3, 11), int8], Tensor[(495), float64], uint64, uint64, Tensor[(324), int8]) {
  %407 = @func_1658() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %408 = @func_1104() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), int8], Tensor[(495), float32], Tensor[(13, 2, 4), bool], Tensor[(13, 2, 4), bool], uint64) */;
  %409 = cast(%var_4389, dtype="float32") /* ty=Tensor[(495), float32] */;
  %410 = cast(%var_4389, dtype="float32") /* ty=Tensor[(495), float32] */;
  %411 = cast(%var_4389, dtype="float32") /* ty=Tensor[(495), float32] */;
  %412 = reshape(%409, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %413 = reshape(%410, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %414 = reshape(%411, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %415 = @func_120(%412, %413, %414) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(15, 3, 11), float64]) */;
  %416 = cast(%var_4404, dtype="float64") /* ty=Tensor[(495), float64] */;
  %417 = shape_of(%var_4389, dtype="int32") /* ty=Tensor[(1), int32] */;
  %418 = cast(%var_4389, dtype="float64") /* ty=Tensor[(495), float64] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?), float64] */;
  %420 = @func_3755() /* ty=(uint64, uint64) */;
  %421 = cast(%var_4421, dtype="int8") /* ty=Tensor[(324), int8] */;
  %422 = reshape(%421, newshape=[324]) /* ty=Tensor[(324), int8] */;
  %423 = @func_3489(%422) /* ty=(Tensor[(9, 16, 8), float64], Tensor[(6, 8, 14), bool], Tensor[(672), float32], uint64, Tensor[(324), bool]) */;
  %424 = %407.0;
  %425 = %408.5;
  %426 = %415.0;
  %427 = maximum(%418, %419) /* ty=Tensor[(495), float64] */;
  %428 = %420.1;
  %429 = %423.3;
  (%424, %425, %426, %427, %428, %429, %var_4421)
}

def @func_6179() -> Tensor[(9, 16, 8), float32] {
  %430 = @func_2118() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %430.0
}

def @func_3575() -> (Tensor[(9, 16, 8), uint16],) {
  %433 = fn () -> (Tensor[(9, 16, 8), uint16],) {
    %431 = @func_1512() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */;
    %432 = %431.0;
    (%432,)
  };
  %433() /* ty=(Tensor[(9, 16, 8), uint16],) */
}

def @func_8299() -> Tensor[(9, 16, 8), bool] {
  %434 = @func_6885() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), uint16], Tensor[(165, 3), float64]) */;
  %434.0
}

def @func_2379(%var_2378: Tensor[(324), bool]) -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], Tensor[(324), bool]) {
  %448 = fn (%var_2375: Tensor[(324), bool]) -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], Tensor[(324), bool]) {
    %435 = @func_1720() /* ty=(Tensor[(9, 16, 8), float64],) */;
    %436 = %435.0;
    %437 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 16, 8), float64] */, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
    %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
    %439 = cast(%436, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
    %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %441 = maximum(%439, %440) /* ty=Tensor[(9, 16, 8), uint16] */;
    %442 = cast(%441, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
    %443 = cast(%var_2375, dtype="bool") /* ty=Tensor[(324), bool] */;
    %444 = reshape(%442, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), float64] */;
    %445 = reshape(%443, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), bool] */;
    %446 = @func_1443(%444, %445) /* ty=(Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) */;
    %447 = %446.0;
    (%441, %447, %var_2375)
  };
  %448(%var_2378) /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], Tensor[(324), bool]) */
}

def @func_6322() -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float32], uint64, Tensor[(9, 16, 8), bool]) {
  %449 = @func_5065() /* ty=Tensor[(9, 16, 8), float32] */;
  %450 = cast(%449, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
  %451 = reshape(%450, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
  %452 = @func_4119(%451) /* ty=(Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), bool]) */;
  %453 = @func_1950() /* ty=(uint64,) */;
  %454 = @func_2341() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float32]) */;
  %455 = %452.0;
  %456 = %453.0;
  %457 = %454.0;
  (%449, %455, %456, %457)
}

def @func_4590() -> (uint64,) {
  %458 = @func_1534() /* ty=uint64 */;
  (%458,)
}

def @func_6453() -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float32], Tensor[(324), bool], Tensor[(1400), float32], Tensor[(9, 16, 8), uint16]) {
  @func_6451() /* ty=(Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float32], Tensor[(324), bool], Tensor[(1400), float32], Tensor[(9, 16, 8), uint16]) */
}

def @func_4682(%var_4675: Tensor[(5, 5, 12), float64], %var_4678: Tensor[(5, 5, 12), float64]) -> (Tensor[(5, 5, 12), float64], Tensor[(5, 5, 12), bool]) {
  %459 = cast(%var_4675, dtype="float64") /* ty=Tensor[(5, 5, 12), float64] */;
  %460 = cast(%var_4678, dtype="bool") /* ty=Tensor[(5, 5, 12), bool] */;
  %461 = shape_of(%var_4675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%var_4675, dtype="bool") /* ty=Tensor[(5, 5, 12), bool] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %464 = acosh(%459) /* ty=Tensor[(5, 5, 12), float64] */;
  %465 = equal(%462, %463) /* ty=Tensor[(5, 5, 12), bool] */;
  (%464, %465)
}

def @func_7535() -> (Tensor[(12, 9, 3), float32],) {
  %466 = @func_3812() /* ty=Tensor[(12, 9, 3), float32] */;
  (%466,)
}

def @func_7957(%var_7955: Tensor[(15, 11, 14), uint32], %var_7956: Tensor[(15, 11, 14), uint32]) -> (Tensor[(15, 11, 14), uint32], Tensor[(495), float64], Tensor[(165, 3), float32], Tensor[(324), int8]) {
  @func_7953(%var_7955, %var_7956) /* ty=(Tensor[(15, 11, 14), uint32], Tensor[(495), float64], Tensor[(165, 3), float32], Tensor[(324), int8]) */
}

def @func_2570() -> Tensor[(9, 16, 8), float64] {
  %467 = fn () -> Tensor[(9, 16, 8), float64] {
    @func_2144() /* ty=Tensor[(9, 16, 8), float64] */
  };
  %467() /* ty=Tensor[(9, 16, 8), float64] */
}

def @func_8596() -> (Tensor[(9, 16, 8), float32],) {
  %468 = @func_8512() /* ty=Tensor[(9, 16, 8), float32] */;
  (%468,)
}

def @func_2650() -> (uint64,) {
  %469 = @func_1203() /* ty=(uint64,) */;
  %470 = %469.0;
  (%470,)
}

def @func_1360(%var_1359: Tensor[(1152), float32]) -> (uint64, Tensor[(1152), bool]) {
  %480 = fn (%var_1338: Tensor[(1152), float32]) -> (uint64, Tensor[(1152), bool]) {
    %471 = @func_1203() /* ty=(uint64,) */;
    %472 = @func_1298() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(1152), float32]) */;
    %473 = %472.1;
    %474 = cast(%var_1338, dtype="bool") /* ty=Tensor[(1152), bool] */;
    %475 = shape_of(%473, dtype="int32") /* ty=Tensor[(1), int32] */;
    %476 = cast(%473, dtype="bool") /* ty=Tensor[(1152), bool] */;
    %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?), bool] */;
    %478 = %471.0;
    %479 = less(%476, %477) /* ty=Tensor[(1152), bool] */;
    (%478, %479)
  };
  %480(%var_1359) /* ty=(uint64, Tensor[(1152), bool]) */
}

def @func_7151(%var_7150: Tensor[(2704), int64]) -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float32], Tensor[(13, 13, 16), int64], Tensor[(2704), int64], Tensor[(10, 4, 15), bool], Tensor[(12, 9, 3), float32], Tensor[(10, 4, 15), bool], Tensor[(12, 9, 3), float32]) {
  %495 = fn (%var_7115: Tensor[(2704), int64]) -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float32], Tensor[(13, 13, 16), int64], Tensor[(2704), int64], Tensor[(10, 4, 15), bool], Tensor[(12, 9, 3), float32], Tensor[(10, 4, 15), bool], Tensor[(12, 9, 3), float32]) {
    %481 = @func_4658() /* ty=(Tensor[(9, 16, 8), float32],) */;
    %482 = @func_1994() /* ty=(Tensor[(9, 16, 8), float32], Tensor[(15, 3, 11), bool]) */;
    %483 = cast(%var_7115, dtype="int64") /* ty=Tensor[(2704), int64] */;
    %484 = reshape(%483, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), int64] */;
    %485 = @func_6109(%484) /* ty=(Tensor[(13, 13, 16), int64],) */;
    %486 = @func_3849() /* ty=(Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16]) */;
    %487 = @func_3849() /* ty=(Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16]) */;
    %488 = %481.0;
    %489 = %482.0;
    %490 = %485.0;
    %491 = %486.0;
    %492 = @func_5334() /* ty=Tensor[(12, 9, 3), float32] */;
    %493 = %487.0;
    %494 = @func_5334() /* ty=Tensor[(12, 9, 3), float32] */;
    (%488, %489, %490, %var_7115, %491, %492, %493, %494)
  };
  %495(%var_7150) /* ty=(Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float32], Tensor[(13, 13, 16), int64], Tensor[(2704), int64], Tensor[(10, 4, 15), bool], Tensor[(12, 9, 3), float32], Tensor[(10, 4, 15), bool], Tensor[(12, 9, 3), float32]) */
}

def @func_7805(%var_7803: Tensor[(495), float32]) -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float64], Tensor[(495), bool], Tensor[(9, 16, 8), uint16]) {
  @func_7802(%var_7803) /* ty=(Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float64], Tensor[(495), bool], Tensor[(9, 16, 8), uint16]) */
}

def @func_2806(%var_2804: Tensor[(1152), uint16], %var_2805: Tensor[(672), float32]) -> (uint64, Tensor[(15, 3, 11), int8], uint64, Tensor[(9, 16, 8), bool], Tensor[(1152), uint16], Tensor[(6, 8, 14), bool], Tensor[(672), float32], Tensor[(9, 16, 8), float32], Tensor[(6, 8, 14), bool], Tensor[(495), float32], Tensor[(9, 16, 8), uint16], uint64) {
  @func_2802(%var_2804, %var_2805) /* ty=(uint64, Tensor[(15, 3, 11), int8], uint64, Tensor[(9, 16, 8), bool], Tensor[(1152), uint16], Tensor[(6, 8, 14), bool], Tensor[(672), float32], Tensor[(9, 16, 8), float32], Tensor[(6, 8, 14), bool], Tensor[(495), float32], Tensor[(9, 16, 8), uint16], uint64) */
}

def @func_7583(%var_7558: Tensor[(7, 15, 4), uint16], %var_7559: Tensor[(7, 15, 4), uint16], %var_7579: Tensor[(560), float64]) -> (Tensor[(7, 15, 4), float32], Tensor[(14, 10, 4), float64], Tensor[(560), float64]) {
  %496 = cast(%var_7559, dtype="uint16") /* ty=Tensor[(7, 15, 4), uint16] */;
  %497 = shape_of(%var_7558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%var_7558, dtype="uint16") /* ty=Tensor[(7, 15, 4), uint16] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %500 = right_shift(%498, %499) /* ty=Tensor[(7, 15, 4), uint16] */;
  %501 = cast(%500, dtype="float32") /* ty=Tensor[(7, 15, 4), float32] */;
  %502 = shape_of(%var_7559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%var_7559, dtype="float32") /* ty=Tensor[(7, 15, 4), float32] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %505 = cast(%var_7579, dtype="float64") /* ty=Tensor[(560), float64] */;
  %506 = cast(%var_7579, dtype="float64") /* ty=Tensor[(560), float64] */;
  %507 = reshape(%505, newshape=[14, 10, 4]) /* ty=Tensor[(14, 10, 4), float64] */;
  %508 = reshape(%506, newshape=[14, 10, 4]) /* ty=Tensor[(14, 10, 4), float64] */;
  %509 = @func_3130(%507, %508) /* ty=(Tensor[(14, 10, 4), float64],) */;
  %510 = mod(%503, %504) /* ty=Tensor[(7, 15, 4), float32] */;
  %511 = %509.0;
  (%510, %511, %var_7579)
}

def @func_7501() -> Tensor[(9, 16, 8), uint16] {
  @func_7499() /* ty=Tensor[(9, 16, 8), uint16] */
}

def @func_1104() -> (Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), int8], Tensor[(495), float32], Tensor[(13, 2, 4), bool], Tensor[(13, 2, 4), bool], uint64) {
  %512 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %513 = cast(meta[relay.Constant][22] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %514 = cast(meta[relay.Constant][22] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %515 = cast(meta[relay.Constant][22] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %516 = reshape(%513, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %517 = reshape(%514, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %518 = reshape(%515, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %519 = @func_120(%516, %517, %518) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(15, 3, 11), float64]) */;
  %520 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
  %521 = cast(meta[relay.Constant][23] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %522 = %520.3;
  %523 = cast(%522, dtype="uint64") /* ty=Tensor[(13, 2, 4), uint64] */;
  %524 = reshape(%521, newshape=[]) /* ty=uint64 */;
  %525 = reshape(%523, newshape=[13, 2, 4]) /* ty=Tensor[(13, 2, 4), uint64] */;
  %526 = %512.0;
  %527 = %519.0;
  %528 = @func_296(%524, %525) /* ty=Tensor[(13, 2, 4), bool] */;
  (%526, %527, meta[relay.Constant][22] /* ty=Tensor[(495), float32] */, %522, %528, meta[relay.Constant][23] /* ty=uint64 */)
}

def @func_1618() -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], uint64, Tensor[(1152), float32], Tensor[(9, 16, 8), float32]) {
  %544 = fn () -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], uint64, Tensor[(1152), float32], Tensor[(9, 16, 8), float32]) {
    %529 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
    %530 = @func_1298() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(1152), float32]) */;
    %531 = %530.0;
    %532 = cast(%531, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
    %533 = reshape(%532, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
    %534 = @func_1203() /* ty=(uint64,) */;
    %535 = @func_1298() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(1152), float32]) */;
    %536 = cast(%531, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
    %537 = acosh(%536) /* ty=Tensor[(9, 16, 8), float64] */;
    %538 = cast(%537, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
    %539 = %529.0;
    %540 = @func_1233(%533) /* ty=Tensor[(9, 16, 8), bool] */;
    %541 = %534.0;
    %542 = %535.1;
    %543 = tan(%538) /* ty=Tensor[(9, 16, 8), float32] */;
    (%539, %540, %541, %542, %543)
  };
  %544() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], uint64, Tensor[(1152), float32], Tensor[(9, 16, 8), float32]) */
}

def @func_3491(%var_3490: Tensor[(324), int8]) -> (Tensor[(9, 16, 8), float64], Tensor[(6, 8, 14), bool], Tensor[(672), float32], uint64, Tensor[(324), bool]) {
  %560 = fn (%var_3478: Tensor[(324), int8]) -> (Tensor[(9, 16, 8), float64], Tensor[(6, 8, 14), bool], Tensor[(672), float32], uint64, Tensor[(324), bool]) {
    %545 = cast(meta[relay.Constant][24] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
    %546 = cast(meta[relay.Constant][24] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
    %547 = reshape(%545, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
    %548 = reshape(%546, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
    %549 = @func_1203() /* ty=(uint64,) */;
    %550 = @func_3287() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(324), int8], Tensor[(288, 4), float64], Tensor[(324), bool], Tensor[(12, 9, 3), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */;
    %551 = %550.1;
    %552 = cast(%var_3478, dtype="bool") /* ty=Tensor[(324), bool] */;
    %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(1), int32] */;
    %554 = cast(%551, dtype="bool") /* ty=Tensor[(324), bool] */;
    %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?), bool] */;
    %556 = @func_1173() /* ty=Tensor[(9, 16, 8), float64] */;
    %557 = @func_720(%547, %548) /* ty=Tensor[(6, 8, 14), bool] */;
    %558 = %549.0;
    %559 = logical_and(%554, %555) /* ty=Tensor[(324), bool] */;
    (%556, %557, meta[relay.Constant][24] /* ty=Tensor[(672), float32] */, %558, %559)
  };
  %560(%var_3490) /* ty=(Tensor[(9, 16, 8), float64], Tensor[(6, 8, 14), bool], Tensor[(672), float32], uint64, Tensor[(324), bool]) */
}

def @func_5887(%var_5885: int8) -> (Tensor[(13, 2, 4), bool], Tensor[(9, 16, 8), float32], int8, Tensor[(132), int8]) {
  @func_5884(%var_5885) /* ty=(Tensor[(13, 2, 4), bool], Tensor[(9, 16, 8), float32], int8, Tensor[(132), int8]) */
}

def @func_5417(%var_5415: Tensor[(220), int8], %var_5416: Tensor[(200), uint64]) -> (Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16], Tensor[(220), int8], Tensor[(324), int8], Tensor[(54, 6), bool], Tensor[(200), uint64]) {
  %577 = fn (%var_5361: Tensor[(220), int8], %var_5405: Tensor[(200), uint64]) -> (Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16], Tensor[(220), int8], Tensor[(324), int8], Tensor[(54, 6), bool], Tensor[(200), uint64]) {
    %561 = @func_3544() /* ty=(Tensor[(10, 4, 15), bool],) */;
    %562 = cast(%var_5361, dtype="int8") /* ty=Tensor[(220), int8] */;
    %563 = reshape(%562, newshape=[220]) /* ty=Tensor[(220), int8] */;
    %564 = @func_3520(%563) /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(14, 10, 4), float64], Tensor[(560), float64], Tensor[(11, 2, 10), uint64], Tensor[(220), int8]) */;
    %565 = @func_3287() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(324), int8], Tensor[(288, 4), float64], Tensor[(324), bool], Tensor[(12, 9, 3), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */;
    %566 = cast(%var_5405, dtype="uint64") /* ty=Tensor[(200), uint64] */;
    %567 = cast(%var_5405, dtype="uint64") /* ty=Tensor[(200), uint64] */;
    %568 = %565.1;
    %569 = cast(%568, dtype="bool") /* ty=Tensor[(324), bool] */;
    %570 = reshape(%566, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), uint64] */;
    %571 = reshape(%567, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), uint64] */;
    %572 = reshape(%569, newshape=[54, 6]) /* ty=Tensor[(54, 6), bool] */;
    %573 = @func_4894(%570, %571, %572) /* ty=(Tensor[(8, 5, 5), uint64], Tensor[(12, 9, 3), float64], Tensor[(1152), float64], Tensor[(54, 6), bool]) */;
    %574 = %561.0;
    %575 = %564.0;
    %576 = %573.3;
    (%574, %575, %var_5361, %568, %576, %var_5405)
  };
  %577(%var_5415, %var_5416) /* ty=(Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16], Tensor[(220), int8], Tensor[(324), int8], Tensor[(54, 6), bool], Tensor[(200), uint64]) */
}

def @func_6885() -> (Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), uint16], Tensor[(165, 3), float64]) {
  %578 = @func_1298() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(1152), float32]) */;
  %579 = cast(meta[relay.Constant][25] /* ty=Tensor[(165, 3), float64] */, dtype="float64") /* ty=Tensor[(165, 3), float64] */;
  %580 = reshape(%579, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float64] */;
  %581 = @func_2630(%580) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), uint16]) */;
  %582 = %578.0;
  %583 = %581.1;
  (%582, %583, meta[relay.Constant][25] /* ty=Tensor[(165, 3), float64] */)
}

def @func_5825() -> (Tensor[(9, 16, 8), uint16],) {
  %586 = fn () -> (Tensor[(9, 16, 8), uint16],) {
    %584 = @func_3849() /* ty=(Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16]) */;
    %585 = %584.1;
    (%585,)
  };
  %586() /* ty=(Tensor[(9, 16, 8), uint16],) */
}

def @func_7021(%var_7020: int8) -> (Tensor[(9, 16, 8), float64], Tensor[(13, 2, 4), bool], int8) {
  %592 = fn (%var_7016: int8) -> (Tensor[(9, 16, 8), float64], Tensor[(13, 2, 4), bool], int8) {
    %587 = cast(%var_7016, dtype="int8") /* ty=int8 */;
    %588 = reshape(%587, newshape=[]) /* ty=int8 */;
    %589 = @func_5884(%588) /* ty=(Tensor[(13, 2, 4), bool], Tensor[(9, 16, 8), float32], int8, Tensor[(132), int8]) */;
    %590 = @func_2144() /* ty=Tensor[(9, 16, 8), float64] */;
    %591 = %589.0;
    (%590, %591, %var_7016)
  };
  %592(%var_7020) /* ty=(Tensor[(9, 16, 8), float64], Tensor[(13, 2, 4), bool], int8) */
}

def @func_8598() -> (Tensor[(9, 16, 8), float32],) {
  @func_8596() /* ty=(Tensor[(9, 16, 8), float32],) */
}

def @func_2270(%var_2268: Tensor[(9, 16, 8), float64]) -> (Tensor[(9, 16, 8), uint32], Tensor[(9, 16, 8), float32]) {
  @func_2267(%var_2268) /* ty=(Tensor[(9, 16, 8), uint32], Tensor[(9, 16, 8), float32]) */
}

def @func_1262() -> (uint64,) {
  %593 = @func_1203() /* ty=(uint64,) */;
  %594 = %593.0;
  (%594,)
}

def @func_125(%var_122: Tensor[(15, 3, 11), float32], %var_123: Tensor[(15, 3, 11), float32], %var_124: Tensor[(15, 3, 11), float32]) -> (Tensor[(15, 3, 11), int8], Tensor[(15, 3, 11), float64]) {
  @func_120(%var_122, %var_123, %var_124) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(15, 3, 11), float64]) */
}

def @func_774() -> (Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) {
  @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */
}

def @main(%var_8887: Tensor[(10, 13, 5), uint64], %var_8888: Tensor[(10, 13, 5), uint64]) -> Tensor[(10, 13, 5), uint64] {
  %595 = cast(%var_8888, dtype="uint64") /* ty=Tensor[(10, 13, 5), uint64] */;
  %596 = shape_of(%var_8887, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%var_8887, dtype="uint64") /* ty=Tensor[(10, 13, 5), uint64] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  maximum(%597, %598) /* ty=Tensor[(10, 13, 5), uint64] */
}

def @func_3971(%var_3966: Tensor[(12, 1, 5), float64]) -> (Tensor[(12, 1, 5), float64],) {
  %599 = cast(%var_3966, dtype="float64") /* ty=Tensor[(12, 1, 5), float64] */;
  %600 = asin(%599) /* ty=Tensor[(12, 1, 5), float64] */;
  (%600,)
}

def @func_4435(%var_4432: Tensor[(495), float32], %var_4433: Tensor[(495), float32], %var_4434: Tensor[(324), int8]) -> (Tensor[(9, 16, 8), float32], uint64, Tensor[(15, 3, 11), int8], Tensor[(495), float64], uint64, uint64, Tensor[(324), int8]) {
  @func_4430(%var_4432, %var_4433, %var_4434) /* ty=(Tensor[(9, 16, 8), float32], uint64, Tensor[(15, 3, 11), int8], Tensor[(495), float64], uint64, uint64, Tensor[(324), int8]) */
}

def @func_2267(%var_2255: Tensor[(9, 16, 8), float64]) -> (Tensor[(9, 16, 8), uint32], Tensor[(9, 16, 8), float32]) {
  %601 = @func_1720() /* ty=(Tensor[(9, 16, 8), float64],) */;
  %602 = %601.0;
  %603 = cast(%var_2255, dtype="uint32") /* ty=Tensor[(9, 16, 8), uint32] */;
  %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(%602, dtype="uint32") /* ty=Tensor[(9, 16, 8), uint32] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %607 = cast(%602, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
  %608 = multiply(%605, %606) /* ty=Tensor[(9, 16, 8), uint32] */;
  %609 = log(%607) /* ty=Tensor[(9, 16, 8), float32] */;
  (%608, %609)
}

def @func_2859(%var_2857: Tensor[(10, 10, 12), int8], %var_2858: Tensor[(10, 10, 12), int8]) -> (Tensor[(10, 10, 12), int8],) {
  @func_2855(%var_2857, %var_2858) /* ty=(Tensor[(10, 10, 12), int8],) */
}

def @func_6410(%var_6408: Tensor[(104), uint64]) -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float64], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64]) {
  @func_6407(%var_6408) /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float64], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64]) */
}

def @func_6154() -> (Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float64]) {
  %610 = @func_1617() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], uint64, Tensor[(1152), float32], Tensor[(9, 16, 8), float32]) */;
  %611 = %610.1;
  %612 = @func_5803() /* ty=Tensor[(9, 16, 8), float64] */;
  (%611, %612)
}

def @func_4167() -> Tensor[(9, 16, 8), float64] {
  %614 = fn () -> Tensor[(9, 16, 8), float64] {
    %613 = @func_1720() /* ty=(Tensor[(9, 16, 8), float64],) */;
    %613.0
  };
  %614() /* ty=Tensor[(9, 16, 8), float64] */
}

def @func_4612() -> Tensor[(12, 9, 3), float32] {
  %616 = fn () -> Tensor[(12, 9, 3), float32] {
    %615 = @func_3287() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(324), int8], Tensor[(288, 4), float64], Tensor[(324), bool], Tensor[(12, 9, 3), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */;
    %615.5
  };
  %616() /* ty=Tensor[(12, 9, 3), float32] */
}

def @func_6282() -> (Tensor[(9, 16, 8), float64],) {
  @func_6280() /* ty=(Tensor[(9, 16, 8), float64],) */
}

def @func_3756() -> (uint64, uint64) {
  %621 = fn () -> (uint64, uint64) {
    %617 = @func_1950() /* ty=(uint64,) */;
    %618 = @func_1950() /* ty=(uint64,) */;
    %619 = %617.0;
    %620 = %618.0;
    (%619, %620)
  };
  %621() /* ty=(uint64, uint64) */
}

def @func_4121(%var_4120: Tensor[(9, 16, 8), uint16]) -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), bool]) {
  %631 = fn (%var_4092: Tensor[(9, 16, 8), uint16]) -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), bool]) {
    %622 = @func_2317() /* ty=(Tensor[(9, 16, 8), float32],) */;
    %623 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
    %624 = %623.0;
    %625 = cast(%var_4092, dtype="bool") /* ty=Tensor[(9, 16, 8), bool] */;
    %626 = shape_of(%624, dtype="int32") /* ty=Tensor[(3), int32] */;
    %627 = cast(%624, dtype="bool") /* ty=Tensor[(9, 16, 8), bool] */;
    %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %629 = %622.0;
    %630 = not_equal(%627, %628) /* ty=Tensor[(9, 16, 8), bool] */;
    (%629, %630)
  };
  %631(%var_4120) /* ty=(Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), bool]) */
}

def @func_1660() -> (Tensor[(9, 16, 8), float32],) {
  @func_1658() /* ty=(Tensor[(9, 16, 8), float32],) */
}

def @func_4869(%var_4868: Tensor[(1152), uint16]) -> (Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), bool], Tensor[(1152), uint16], Tensor[(15, 3, 11), float64]) {
  %640 = fn (%var_4858: Tensor[(1152), uint16]) -> (Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), bool], Tensor[(1152), uint16], Tensor[(15, 3, 11), float64]) {
    %632 = @func_3544() /* ty=(Tensor[(10, 4, 15), bool],) */;
    %633 = cast(%var_4858, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
    %634 = reshape(%633, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
    %635 = @func_4119(%634) /* ty=(Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), bool]) */;
    %636 = @func_1512() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */;
    %637 = %632.0;
    %638 = %635.1;
    %639 = %636.1;
    (%637, %638, %var_4858, %639)
  };
  %640(%var_4868) /* ty=(Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), bool], Tensor[(1152), uint16], Tensor[(15, 3, 11), float64]) */
}

def @func_6795() -> (Tensor[(15, 14, 7), float64],) {
  %643 = fn () -> (Tensor[(15, 14, 7), float64],) {
    %641 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 14, 7), float64] */, dtype="float64") /* ty=Tensor[(15, 14, 7), float64] */;
    %642 = log(%641) /* ty=Tensor[(15, 14, 7), float64] */;
    (%642,)
  };
  %643() /* ty=(Tensor[(15, 14, 7), float64],) */
}

def @func_5105() -> (Tensor[(15, 3, 11), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), uint16]) {
  %651 = fn () -> (Tensor[(15, 3, 11), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), uint16]) {
    %644 = @func_1512() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */;
    %645 = @func_3812() /* ty=Tensor[(12, 9, 3), float32] */;
    %646 = cast(%645, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
    %647 = @func_4927() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) */;
    %648 = %644.1;
    %649 = tan(%646) /* ty=Tensor[(12, 9, 3), float32] */;
    %650 = %647.0;
    (%648, %649, %650)
  };
  %651() /* ty=(Tensor[(15, 3, 11), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), uint16]) */
}

def @func_5534() -> (Tensor[(9, 16, 8), float64],) {
  %652 = @func_1173() /* ty=Tensor[(9, 16, 8), float64] */;
  (%652,)
}

def @func_1658() -> (Tensor[(9, 16, 8), float32],) {
  %653 = @func_1381() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %654 = %653.0;
  (%654,)
}

def @func_120(%var_106: Tensor[(15, 3, 11), float32], %var_109: Tensor[(15, 3, 11), float32], %var_116: Tensor[(15, 3, 11), float32]) -> (Tensor[(15, 3, 11), int8], Tensor[(15, 3, 11), float64]) {
  %655 = cast(%var_106, dtype="float32") /* ty=Tensor[(15, 3, 11), float32] */;
  %656 = sinh(%655) /* ty=Tensor[(15, 3, 11), float32] */;
  %657 = cast(%var_109, dtype="int8") /* ty=Tensor[(15, 3, 11), int8] */;
  %658 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%656, dtype="int8") /* ty=Tensor[(15, 3, 11), int8] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %661 = cast(%var_116, dtype="float64") /* ty=Tensor[(15, 3, 11), float64] */;
  %662 = shape_of(%var_109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%var_109, dtype="float64") /* ty=Tensor[(15, 3, 11), float64] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %665 = minimum(%659, %660) /* ty=Tensor[(15, 3, 11), int8] */;
  %666 = floor_divide(%663, %664) /* ty=Tensor[(15, 3, 11), float64] */;
  (%665, %666)
}

def @func_3164(%var_3163: Tensor[(672), float32]) -> (Tensor[(9, 1), float32], Tensor[(9, 16, 8), float32], Tensor[(12, 2), bool], Tensor[(6, 8, 14), bool], Tensor[(672), float32]) {
  %680 = fn (%var_3158: Tensor[(672), float32]) -> (Tensor[(9, 1), float32], Tensor[(9, 16, 8), float32], Tensor[(12, 2), bool], Tensor[(6, 8, 14), bool], Tensor[(672), float32]) {
    %667 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 1), float32] */;
    %668 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 2), bool] */, dtype="bool") /* ty=Tensor[(12, 2), bool] */;
    %669 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 2), bool] */, dtype="bool") /* ty=Tensor[(12, 2), bool] */;
    %670 = reshape(%668, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), bool] */;
    %671 = reshape(%669, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), bool] */;
    %672 = @func_2884(%670, %671) /* ty=(Tensor[(3, 2, 4), bool], Tensor[(9, 16, 8), float32]) */;
    %673 = cast(%var_3158, dtype="float32") /* ty=Tensor[(672), float32] */;
    %674 = cast(%var_3158, dtype="float32") /* ty=Tensor[(672), float32] */;
    %675 = reshape(%673, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
    %676 = reshape(%674, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
    %677 = sinh(%667) /* ty=Tensor[(9, 1), float32] */;
    %678 = %672.1;
    %679 = @func_720(%675, %676) /* ty=Tensor[(6, 8, 14), bool] */;
    (%677, %678, meta[relay.Constant][28] /* ty=Tensor[(12, 2), bool] */, %679, %var_3158)
  };
  %680(%var_3163) /* ty=(Tensor[(9, 1), float32], Tensor[(9, 16, 8), float32], Tensor[(12, 2), bool], Tensor[(6, 8, 14), bool], Tensor[(672), float32]) */
}

def @func_2105(%var_2045: Tensor[(324), bool], %var_2079: Tensor[(9, 16, 8), uint16]) -> (Tensor[(12, 9, 3), float64], Tensor[(324), bool], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) {
  %681 = @func_1114() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %682 = %681.0;
  %683 = cast(%682, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
  %684 = cast(%var_2045, dtype="bool") /* ty=Tensor[(324), bool] */;
  %685 = reshape(%683, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), float64] */;
  %686 = reshape(%684, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), bool] */;
  %687 = @func_1443(%685, %686) /* ty=(Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) */;
  %688 = cast(%var_2079, dtype="bool") /* ty=Tensor[(9, 16, 8), bool] */;
  %689 = shape_of(%682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%682, dtype="bool") /* ty=Tensor[(9, 16, 8), bool] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %692 = greater(%690, %691) /* ty=Tensor[(9, 16, 8), bool] */;
  %693 = cast(%692, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
  %694 = shape_of(%var_2079, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%var_2079, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %697 = %687.1;
  %698 = @func_1794() /* ty=Tensor[(9, 16, 8), float32] */;
  %699 = add(%695, %696) /* ty=Tensor[(9, 16, 8), uint16] */;
  (%697, %var_2045, %698, %699)
}

def @func_7588(%var_7585: Tensor[(7, 15, 4), uint16], %var_7586: Tensor[(7, 15, 4), uint16], %var_7587: Tensor[(560), float64]) -> (Tensor[(7, 15, 4), float32], Tensor[(14, 10, 4), float64], Tensor[(560), float64]) {
  @func_7583(%var_7585, %var_7586, %var_7587) /* ty=(Tensor[(7, 15, 4), float32], Tensor[(14, 10, 4), float64], Tensor[(560), float64]) */
}

def @func_2441() -> (Tensor[(9, 16, 8), uint16],) {
  %702 = fn () -> (Tensor[(9, 16, 8), uint16],) {
    %700 = @func_1114() /* ty=(Tensor[(9, 16, 8), uint16],) */;
    %701 = %700.0;
    (%701,)
  };
  %702() /* ty=(Tensor[(9, 16, 8), uint16],) */
}

def @func_3814() -> Tensor[(12, 9, 3), float32] {
  @func_3812() /* ty=Tensor[(12, 9, 3), float32] */
}

def @func_5842() -> (Tensor[(9, 16, 8), float64],) {
  %703 = @func_2569() /* ty=Tensor[(9, 16, 8), float64] */;
  (%703,)
}

def @func_2524(%var_2523: Tensor[(495), float32]) -> (Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), float32], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) {
  %718 = fn (%var_2516: Tensor[(495), float32]) -> (Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), float32], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) {
    %704 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
    %705 = %704.0;
    %706 = cast(%705, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
    %707 = cast(%705, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
    %708 = cast(%var_2516, dtype="float32") /* ty=Tensor[(495), float32] */;
    %709 = cast(%var_2516, dtype="float32") /* ty=Tensor[(495), float32] */;
    %710 = cast(%var_2516, dtype="float32") /* ty=Tensor[(495), float32] */;
    %711 = reshape(%708, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
    %712 = reshape(%709, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
    %713 = reshape(%710, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
    %714 = @func_120(%711, %712, %713) /* ty=(Tensor[(15, 3, 11), int8], Tensor[(15, 3, 11), float64]) */;
    %715 = atanh(%706) /* ty=Tensor[(9, 16, 8), float64] */;
    %716 = asinh(%707) /* ty=Tensor[(9, 16, 8), float32] */;
    %717 = %714.1;
    (%715, %716, %717, %var_2516)
  };
  %718(%var_2523) /* ty=(Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), float32], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */
}

def @func_7303() -> Tensor[(104), uint64] {
  %719 = fn () -> Tensor[(104), uint64] {
    @func_6972() /* ty=Tensor[(104), uint64] */
  };
  %719() /* ty=Tensor[(104), uint64] */
}

def @func_3523(%var_3521: Tensor[(220), int8]) -> (Tensor[(9, 16, 8), uint16], Tensor[(14, 10, 4), float64], Tensor[(560), float64], Tensor[(11, 2, 10), uint64], Tensor[(220), int8]) {
  @func_3520(%var_3521) /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(14, 10, 4), float64], Tensor[(560), float64], Tensor[(11, 2, 10), uint64], Tensor[(220), int8]) */
}

def @func_3289() -> (Tensor[(9, 16, 8), uint16], Tensor[(324), int8], Tensor[(288, 4), float64], Tensor[(324), bool], Tensor[(12, 9, 3), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) {
  @func_3287() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(324), int8], Tensor[(288, 4), float64], Tensor[(324), bool], Tensor[(12, 9, 3), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */
}

def @func_4944() -> (uint64,) {
  %720 = @func_4001() /* ty=(uint64,) */;
  %721 = %720.0;
  (%721,)
}

def @func_5235(%var_5233: Tensor[(324), bool], %var_5234: Tensor[(24, 2), float64]) -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], Tensor[(324), float32], Tensor[(6, 8, 15), int64], Tensor[(24, 2), float64], Tensor[(6, 8, 15), float32], Tensor[(9, 16, 8), float64]) {
  @func_5231(%var_5233, %var_5234) /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], Tensor[(324), float32], Tensor[(6, 8, 15), int64], Tensor[(24, 2), float64], Tensor[(6, 8, 15), float32], Tensor[(9, 16, 8), float64]) */
}

def @func_8514() -> Tensor[(9, 16, 8), float32] {
  @func_8512() /* ty=Tensor[(9, 16, 8), float32] */
}

def @func_1264() -> (uint64,) {
  @func_1262() /* ty=(uint64,) */
}

def @func_7060() -> (Tensor[(9, 16, 8), float32],) {
  %722 = @func_2317() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %723 = %722.0;
  (%723,)
}

def @func_3006(%var_2993: Tensor[(16, 3, 9), float32]) -> Tensor[(16, 3, 9), float32] {
  %724 = cast(%var_2993, dtype="float32") /* ty=Tensor[(16, 3, 9), float32] */;
  log(%724) /* ty=Tensor[(16, 3, 9), float32] */
}

def @func_4659() -> (Tensor[(9, 16, 8), float32],) {
  %727 = fn () -> (Tensor[(9, 16, 8), float32],) {
    %725 = @func_1617() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], uint64, Tensor[(1152), float32], Tensor[(9, 16, 8), float32]) */;
    %726 = %725.4;
    (%726,)
  };
  %727() /* ty=(Tensor[(9, 16, 8), float32],) */
}

def @func_1795() -> Tensor[(9, 16, 8), float32] {
  %729 = fn () -> Tensor[(9, 16, 8), float32] {
    %728 = @func_1658() /* ty=(Tensor[(9, 16, 8), float32],) */;
    %728.0
  };
  %729() /* ty=Tensor[(9, 16, 8), float32] */
}

def @func_3851() -> (Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16]) {
  @func_3849() /* ty=(Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16]) */
}

def @func_1722() -> (Tensor[(9, 16, 8), float64],) {
  @func_1720() /* ty=(Tensor[(9, 16, 8), float64],) */
}

def @func_6887() -> (Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), uint16], Tensor[(165, 3), float64]) {
  @func_6885() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), uint16], Tensor[(165, 3), float64]) */
}

def @func_3397(%var_3396: Tensor[(7, 2, 7), float64]) -> (Tensor[(7, 2, 7), float64], Tensor[(15, 3, 11), int8]) {
  %734 = fn (%var_3376: Tensor[(7, 2, 7), float64]) -> (Tensor[(7, 2, 7), float64], Tensor[(15, 3, 11), int8]) {
    %730 = cast(%var_3376, dtype="float64") /* ty=Tensor[(7, 2, 7), float64] */;
    %731 = @func_1104() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), int8], Tensor[(495), float32], Tensor[(13, 2, 4), bool], Tensor[(13, 2, 4), bool], uint64) */;
    %732 = sin(%730) /* ty=Tensor[(7, 2, 7), float64] */;
    %733 = %731.1;
    (%732, %733)
  };
  %734(%var_3396) /* ty=(Tensor[(7, 2, 7), float64], Tensor[(15, 3, 11), int8]) */
}

def @func_2118() -> (Tensor[(9, 16, 8), float32],) {
  %735 = @func_1794() /* ty=Tensor[(9, 16, 8), float32] */;
  (%735,)
}

def @func_6706() -> (uint64, uint64, Tensor[(1152), uint16], Tensor[(672), float32], Tensor[(495), float32], Tensor[(15, 3, 11), float32]) {
  %750 = fn () -> (uint64, uint64, Tensor[(1152), uint16], Tensor[(672), float32], Tensor[(495), float32], Tensor[(15, 3, 11), float32]) {
    %736 = @func_6575() /* ty=(uint64,) */;
    %737 = cast(meta[relay.Constant][29] /* ty=Tensor[(1152), uint16] */, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
    %738 = cast(meta[relay.Constant][30] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
    %739 = reshape(%737, newshape=[1152]) /* ty=Tensor[(1152), uint16] */;
    %740 = reshape(%738, newshape=[672]) /* ty=Tensor[(672), float32] */;
    %741 = @func_2802(%739, %740) /* ty=(uint64, Tensor[(15, 3, 11), int8], uint64, Tensor[(9, 16, 8), bool], Tensor[(1152), uint16], Tensor[(6, 8, 14), bool], Tensor[(672), float32], Tensor[(9, 16, 8), float32], Tensor[(6, 8, 14), bool], Tensor[(495), float32], Tensor[(9, 16, 8), uint16], uint64) */;
    %742 = cast(meta[relay.Constant][31] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
    %743 = reshape(%742, newshape=[495]) /* ty=Tensor[(495), float32] */;
    %744 = @func_2522(%743) /* ty=(Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), float32], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */;
    %745 = %744.2;
    %746 = cast(%745, dtype="float32") /* ty=Tensor[(15, 3, 11), float32] */;
    %747 = %736.0;
    %748 = %741.2;
    %749 = asin(%746) /* ty=Tensor[(15, 3, 11), float32] */;
    (%747, %748, meta[relay.Constant][29] /* ty=Tensor[(1152), uint16] */, meta[relay.Constant][30] /* ty=Tensor[(672), float32] */, meta[relay.Constant][31] /* ty=Tensor[(495), float32] */, %749)
  };
  %750() /* ty=(uint64, uint64, Tensor[(1152), uint16], Tensor[(672), float32], Tensor[(495), float32], Tensor[(15, 3, 11), float32]) */
}

def @func_5804() -> Tensor[(9, 16, 8), float64] {
  %752 = fn () -> Tensor[(9, 16, 8), float64] {
    %751 = @func_5534() /* ty=(Tensor[(9, 16, 8), float64],) */;
    %751.0
  };
  %752() /* ty=Tensor[(9, 16, 8), float64] */
}

def @func_8881() -> Tensor[(324), int8] {
  %754 = fn () -> Tensor[(324), int8] {
    %753 = @func_3287() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(324), int8], Tensor[(288, 4), float64], Tensor[(324), bool], Tensor[(12, 9, 3), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */;
    %753.1
  };
  %754() /* ty=Tensor[(324), int8] */
}

def @func_6156() -> (Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float64]) {
  @func_6154() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float64]) */
}

def @func_1534() -> uint64 {
  %755 = @func_1203() /* ty=(uint64,) */;
  %755.0
}

def @func_8112() -> Tensor[(9, 16, 8), float32] {
  %756 = @func_1173() /* ty=Tensor[(9, 16, 8), float64] */;
  %757 = cast(%756, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
  sqrt(%757) /* ty=Tensor[(9, 16, 8), float32] */
}

def @func_6576() -> (uint64,) {
  %760 = fn () -> (uint64,) {
    %758 = @func_6272() /* ty=(uint64,) */;
    %759 = %758.0;
    (%759,)
  };
  %760() /* ty=(uint64,) */
}

def @func_6274() -> (uint64,) {
  @func_6272() /* ty=(uint64,) */
}

def @func_1447(%var_1445: Tensor[(9, 16, 8), float64], %var_1446: Tensor[(12, 9, 3), bool]) -> (Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) {
  @func_1443(%var_1445, %var_1446) /* ty=(Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) */
}

def @func_1994() -> (Tensor[(9, 16, 8), float32], Tensor[(15, 3, 11), bool]) {
  %761 = @func_1104() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), int8], Tensor[(495), float32], Tensor[(13, 2, 4), bool], Tensor[(13, 2, 4), bool], uint64) */;
  %762 = %761.1;
  %763 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 3, 11), int8] */, dtype="bool") /* ty=Tensor[(15, 3, 11), bool] */;
  %764 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%762, dtype="bool") /* ty=Tensor[(15, 3, 11), bool] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %767 = @func_1794() /* ty=Tensor[(9, 16, 8), float32] */;
  %768 = less(%765, %766) /* ty=Tensor[(15, 3, 11), bool] */;
  (%767, %768)
}

def @func_4686(%var_4684: Tensor[(5, 5, 12), float64], %var_4685: Tensor[(5, 5, 12), float64]) -> (Tensor[(5, 5, 12), float64], Tensor[(5, 5, 12), bool]) {
  @func_4682(%var_4684, %var_4685) /* ty=(Tensor[(5, 5, 12), float64], Tensor[(5, 5, 12), bool]) */
}

def @func_2987() -> (Tensor[(1152), float64], Tensor[(324), bool], Tensor[(9, 16, 8), float64]) {
  %780 = fn () -> (Tensor[(1152), float64], Tensor[(324), bool], Tensor[(9, 16, 8), float64]) {
    %769 = @func_1203() /* ty=(uint64,) */;
    %770 = %769.0;
    %771 = cast(meta[relay.Constant][33] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
    %772 = cast(meta[relay.Constant][34] /* ty=Tensor[(324), bool] */, dtype="bool") /* ty=Tensor[(324), bool] */;
    %773 = reshape(%771, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), float64] */;
    %774 = reshape(%772, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), bool] */;
    %775 = @func_1443(%773, %774) /* ty=(Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) */;
    %776 = %775.0;
    %777 = cast(%770, dtype="float64") /* ty=float64 */;
    %778 = cast(%776, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
    %779 = floor_divide(%777, %778) /* ty=Tensor[(9, 16, 8), float64] */;
    (meta[relay.Constant][33] /* ty=Tensor[(1152), float64] */, meta[relay.Constant][34] /* ty=Tensor[(324), bool] */, %779)
  };
  %780() /* ty=(Tensor[(1152), float64], Tensor[(324), bool], Tensor[(9, 16, 8), float64]) */
}

def @func_5536() -> (Tensor[(9, 16, 8), float64],) {
  @func_5534() /* ty=(Tensor[(9, 16, 8), float64],) */
}

def @func_3964(%var_3962: Tensor[(324), bool], %var_3963: Tensor[(1400), float32]) -> (uint64, Tensor[(9, 16, 8), float32], Tensor[(672), float32], Tensor[(324), bool], Tensor[(324), bool], Tensor[(9, 16, 8), float32], Tensor[(10, 14, 10), float32], Tensor[(1400), float32], Tensor[(11, 2, 10), float64], Tensor[(6, 8, 14), float64], Tensor[(324), bool], Tensor[(220), float32]) {
  %820 = fn (%var_3890: Tensor[(324), bool], %var_3923: Tensor[(1400), float32]) -> (uint64, Tensor[(9, 16, 8), float32], Tensor[(672), float32], Tensor[(324), bool], Tensor[(324), bool], Tensor[(9, 16, 8), float32], Tensor[(10, 14, 10), float32], Tensor[(1400), float32], Tensor[(11, 2, 10), float64], Tensor[(6, 8, 14), float64], Tensor[(324), bool], Tensor[(220), float32]) {
    %781 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
    %782 = @func_2118() /* ty=(Tensor[(9, 16, 8), float32],) */;
    %783 = cast(%var_3890, dtype="bool") /* ty=Tensor[(324), bool] */;
    %784 = reshape(%783, newshape=[324]) /* ty=Tensor[(324), bool] */;
    %785 = @func_2377(%784) /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], Tensor[(324), bool]) */;
    %786 = @func_2341() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float32]) */;
    %787 = cast(%var_3923, dtype="float32") /* ty=Tensor[(1400), float32] */;
    %788 = cast(%var_3923, dtype="float32") /* ty=Tensor[(1400), float32] */;
    %789 = reshape(%787, newshape=[10, 14, 10]) /* ty=Tensor[(10, 14, 10), float32] */;
    %790 = reshape(%788, newshape=[10, 14, 10]) /* ty=Tensor[(10, 14, 10), float32] */;
    %791 = @func_2185(%789, %790) /* ty=(Tensor[(10, 14, 10), float32], Tensor[(10, 14, 10), float32]) */;
    %792 = cast(meta[relay.Constant][36] /* ty=Tensor[(220), int8] */, dtype="int8") /* ty=Tensor[(220), int8] */;
    %793 = reshape(%792, newshape=[11, 2, 10]) /* ty=Tensor[(11, 2, 10), int8] */;
    %794 = @func_1759(%793) /* ty=(Tensor[(11, 2, 10), int8], Tensor[(11, 2, 10), uint64]) */;
    %795 = %794.1;
    %796 = cast(%795, dtype="float32") /* ty=Tensor[(11, 2, 10), float32] */;
    %797 = sqrt(%796) /* ty=Tensor[(11, 2, 10), float32] */;
    %798 = cast(%797, dtype="float64") /* ty=Tensor[(11, 2, 10), float64] */;
    %799 = cast(meta[relay.Constant][35] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
    %800 = cast(meta[relay.Constant][35] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
    %801 = reshape(%799, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
    %802 = reshape(%800, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
    %803 = @func_720(%801, %802) /* ty=Tensor[(6, 8, 14), bool] */;
    %804 = cast(%803, dtype="float64") /* ty=Tensor[(6, 8, 14), float64] */;
    %805 = exp(%804) /* ty=Tensor[(6, 8, 14), float64] */;
    %806 = cast(%805, dtype="float64") /* ty=Tensor[(6, 8, 14), float64] */;
    %807 = cast(%var_3890, dtype="bool") /* ty=Tensor[(324), bool] */;
    %808 = reshape(%807, newshape=[324]) /* ty=Tensor[(324), bool] */;
    %809 = @func_2377(%808) /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], Tensor[(324), bool]) */;
    %810 = cast(meta[relay.Constant][36] /* ty=Tensor[(220), int8] */, dtype="float32") /* ty=Tensor[(220), float32] */;
    %811 = %781.4;
    %812 = %782.0;
    %813 = %785.2;
    %814 = %786.1;
    %815 = %791.0;
    %816 = atanh(%798) /* ty=Tensor[(11, 2, 10), float64] */;
    %817 = asin(%806) /* ty=Tensor[(6, 8, 14), float64] */;
    %818 = %809.2;
    %819 = asinh(%810) /* ty=Tensor[(220), float32] */;
    (%811, %812, meta[relay.Constant][35] /* ty=Tensor[(672), float32] */, %813, %var_3890, %814, %815, %var_3923, %816, %817, %818, %819)
  };
  %820(%var_3962, %var_3963) /* ty=(uint64, Tensor[(9, 16, 8), float32], Tensor[(672), float32], Tensor[(324), bool], Tensor[(324), bool], Tensor[(9, 16, 8), float32], Tensor[(10, 14, 10), float32], Tensor[(1400), float32], Tensor[(11, 2, 10), float64], Tensor[(6, 8, 14), float64], Tensor[(324), bool], Tensor[(220), float32]) */
}

def @func_4852(%var_4851: Tensor[(6, 8, 1), float64]) -> (Tensor[(6, 8, 15), float32], Tensor[(6, 8, 15), int64]) {
  %830 = fn (%var_4821: Tensor[(6, 8, 1), float64]) -> (Tensor[(6, 8, 15), float32], Tensor[(6, 8, 15), int64]) {
    %821 = cast(%var_4821, dtype="float32") /* ty=Tensor[(6, 8, 1), float32] */;
    %822 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 8, 15), float64] */, dtype="float32") /* ty=Tensor[(6, 8, 15), float32] */;
    %823 = cast(%var_4821, dtype="float64") /* ty=Tensor[(6, 8, 1), float64] */;
    %824 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 8, 15), float64] */, dtype="float64") /* ty=Tensor[(6, 8, 15), float64] */;
    %825 = maximum(%823, %824) /* ty=Tensor[(6, 8, 15), float64] */;
    %826 = cast(%825, dtype="int64") /* ty=Tensor[(6, 8, 15), int64] */;
    %827 = cast(%var_4821, dtype="int64") /* ty=Tensor[(6, 8, 1), int64] */;
    %828 = floor_divide(%821, %822) /* ty=Tensor[(6, 8, 15), float32] */;
    %829 = add(%826, %827) /* ty=Tensor[(6, 8, 15), int64] */;
    (%828, %829)
  };
  %830(%var_4851) /* ty=(Tensor[(6, 8, 15), float32], Tensor[(6, 8, 15), int64]) */
}

def @func_5067() -> Tensor[(9, 16, 8), float32] {
  @func_5065() /* ty=Tensor[(9, 16, 8), float32] */
}

def @func_6111(%var_6110: Tensor[(13, 13, 16), int64]) -> (Tensor[(13, 13, 16), int64],) {
  %836 = fn (%var_6101: Tensor[(13, 13, 16), int64]) -> (Tensor[(13, 13, 16), int64],) {
    %831 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 13, 16), int64] */, dtype="int64") /* ty=Tensor[(13, 13, 16), int64] */;
    %832 = shape_of(%var_6101, dtype="int32") /* ty=Tensor[(3), int32] */;
    %833 = cast(%var_6101, dtype="int64") /* ty=Tensor[(13, 13, 16), int64] */;
    %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %835 = subtract(%833, %834) /* ty=Tensor[(13, 13, 16), int64] */;
    (%835,)
  };
  %836(%var_6110) /* ty=(Tensor[(13, 13, 16), int64],) */
}

def @func_8002() -> (Tensor[(9, 16, 8), float32],) {
  %837 = @func_2118() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %838 = %837.0;
  (%838,)
}

def @func_5727() -> Tensor[(9, 16, 8), uint16] {
  @func_2637() /* ty=Tensor[(9, 16, 8), uint16] */
}

def @func_1106() -> (Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), int8], Tensor[(495), float32], Tensor[(13, 2, 4), bool], Tensor[(13, 2, 4), bool], uint64) {
  @func_1104() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), int8], Tensor[(495), float32], Tensor[(13, 2, 4), bool], Tensor[(13, 2, 4), bool], uint64) */
}

def @func_772() -> (Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) {
  %839 = cast(meta[relay.Constant][39] /* ty=Tensor[(9, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
  %840 = cast(meta[relay.Constant][40] /* ty=Tensor[(324), uint32] */, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %841 = cast(meta[relay.Constant][40] /* ty=Tensor[(324), uint32] */, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %842 = reshape(%840, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), uint32] */;
  %843 = reshape(%841, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), uint32] */;
  %844 = @func_447(%842, %843) /* ty=(Tensor[(12, 9, 3), uint32], Tensor[(12, 9, 3), bool]) */;
  %845 = cast(meta[relay.Constant][41] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %846 = cast(meta[relay.Constant][42] /* ty=Tensor[(104), uint64] */, dtype="uint64") /* ty=Tensor[(104), uint64] */;
  %847 = reshape(%845, newshape=[]) /* ty=uint64 */;
  %848 = reshape(%846, newshape=[13, 2, 4]) /* ty=Tensor[(13, 2, 4), uint64] */;
  %849 = cast(meta[relay.Constant][39] /* ty=Tensor[(9, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
  %850 = atan(%839) /* ty=Tensor[(9, 16, 8), float64] */;
  %851 = %844.1;
  %852 = @func_296(%847, %848) /* ty=Tensor[(13, 2, 4), bool] */;
  %853 = sinh(%849) /* ty=Tensor[(9, 16, 8), float64] */;
  (%850, %851, meta[relay.Constant][40] /* ty=Tensor[(324), uint32] */, %852, meta[relay.Constant][41] /* ty=uint64 */, meta[relay.Constant][42] /* ty=Tensor[(104), uint64] */, %853)
}

def @func_3037() -> (Tensor[(10, 4, 15), bool],) {
  @func_3035() /* ty=(Tensor[(10, 4, 15), bool],) */
}

def @func_6181() -> Tensor[(9, 16, 8), float32] {
  @func_6179() /* ty=Tensor[(9, 16, 8), float32] */
}

def @func_6324() -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float32], uint64, Tensor[(9, 16, 8), bool]) {
  @func_6322() /* ty=(Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float32], uint64, Tensor[(9, 16, 8), bool]) */
}

def @func_1018() -> (Tensor[(9, 16, 8), uint16],) {
  %861 = fn () -> (Tensor[(9, 16, 8), uint16],) {
    %854 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
    %855 = %854.6;
    %856 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 16, 8), float64] */, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
    %857 = shape_of(%855, dtype="int32") /* ty=Tensor[(3), int32] */;
    %858 = cast(%855, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
    %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %860 = left_shift(%858, %859) /* ty=Tensor[(9, 16, 8), uint16] */;
    (%860,)
  };
  %861() /* ty=(Tensor[(9, 16, 8), uint16],) */
}

def @func_4946() -> (uint64,) {
  @func_4944() /* ty=(uint64,) */
}

def @func_2319() -> (Tensor[(9, 16, 8), float32],) {
  @func_2317() /* ty=(Tensor[(9, 16, 8), float32],) */
}

def @func_6228(%var_6226: Tensor[(495), float64]) -> (Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), uint16], Tensor[(495), float64]) {
  @func_6225(%var_6226) /* ty=(Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), uint16], Tensor[(495), float64]) */
}

def @func_6760() -> (Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), int64], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float32]) {
  %862 = @func_1104() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), int8], Tensor[(495), float32], Tensor[(13, 2, 4), bool], Tensor[(13, 2, 4), bool], uint64) */;
  %863 = %862.0;
  %864 = cast(%863, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
  %865 = reshape(%864, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), uint16] */;
  %866 = @func_4119(%865) /* ty=(Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), bool]) */;
  %867 = @func_2144() /* ty=Tensor[(9, 16, 8), float64] */;
  %868 = cast(%867, dtype="int64") /* ty=Tensor[(9, 16, 8), int64] */;
  %869 = shape_of(%863, dtype="int32") /* ty=Tensor[(3), int32] */;
  %870 = cast(%863, dtype="int64") /* ty=Tensor[(9, 16, 8), int64] */;
  %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %872 = @func_5017() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), float32], uint64) */;
  %873 = %866.1;
  %874 = subtract(%870, %871) /* ty=Tensor[(9, 16, 8), int64] */;
  %875 = %872.1;
  %876 = @func_1794() /* ty=Tensor[(9, 16, 8), float32] */;
  (%873, %874, %875, %876)
}

def @func_4741(%var_4713: Tensor[(1, 9, 16), float64]) -> (Tensor[(5, 9, 16), float64], Tensor[(9, 16, 8), uint16], Tensor[(10, 10, 12), int8], Tensor[(1, 1200), int8], Tensor[(15, 3, 11), float64]) {
  %877 = cast(%var_4713, dtype="float64") /* ty=Tensor[(1, 9, 16), float64] */;
  %878 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 9, 16), float64] */, dtype="float64") /* ty=Tensor[(5, 9, 16), float64] */;
  %879 = @func_1512() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */;
  %880 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 1200), int8] */, dtype="int8") /* ty=Tensor[(1, 1200), int8] */;
  %881 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 1200), int8] */, dtype="int8") /* ty=Tensor[(1, 1200), int8] */;
  %882 = reshape(%880, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int8] */;
  %883 = reshape(%881, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int8] */;
  %884 = @func_2855(%882, %883) /* ty=(Tensor[(10, 10, 12), int8],) */;
  %885 = @func_1512() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */;
  %886 = minimum(%877, %878) /* ty=Tensor[(5, 9, 16), float64] */;
  %887 = %879.0;
  %888 = %884.0;
  %889 = %885.1;
  (%886, %887, %888, meta[relay.Constant][45] /* ty=Tensor[(1, 1200), int8] */, %889)
}

def @func_6547() -> Tensor[(13, 2, 4), bool] {
  %891 = fn () -> Tensor[(13, 2, 4), bool] {
    %890 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
    %890.3
  };
  %891() /* ty=Tensor[(13, 2, 4), bool] */
}

def @func_7802(%var_7770: Tensor[(495), float32]) -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), float64], Tensor[(495), bool], Tensor[(9, 16, 8), uint16]) {
  %892 = cast(%var_7770, dtype="float32") /* ty=Tensor[(495), float32] */;
  %893 = reshape(%892, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %894 = @func_2522(%893) /* ty=(Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), float32], Tensor[(15, 3, 11), float64], Tensor[(495), float32]) */;
  %895 = @func_2986() /* ty=(Tensor[(1152), float64], Tensor[(324), bool], Tensor[(9, 16, 8), float64]) */;
  %896 = @func_6575() /* ty=(uint64,) */;
  %897 = %896.0;
  %898 = cast(%897, dtype="uint32") /* ty=uint32 */;
  %899 = cast(%var_7770, dtype="uint32") /* ty=Tensor[(495), uint32] */;
  %900 = subtract(%898, %899) /* ty=Tensor[(495), uint32] */;
  %901 = cast(%var_7770, dtype="bool") /* ty=Tensor[(495), bool] */;
  %902 = shape_of(%900, dtype="int32") /* ty=Tensor[(1), int32] */;
  %903 = cast(%900, dtype="bool") /* ty=Tensor[(495), bool] */;
  %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?), bool] */;
  %905 = @func_4927() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) */;
  %906 = %894.1;
  %907 = %895.2;
  %908 = less(%903, %904) /* ty=Tensor[(495), bool] */;
  %909 = %905.0;
  (%906, %907, %908, %909)
}

def @func_7976() -> Tensor[(9, 16, 8), uint16] {
  %911 = fn () -> Tensor[(9, 16, 8), uint16] {
    %910 = @func_1114() /* ty=(Tensor[(9, 16, 8), uint16],) */;
    %910.0
  };
  %911() /* ty=Tensor[(9, 16, 8), uint16] */
}

def @func_7062() -> (Tensor[(9, 16, 8), float32],) {
  @func_7060() /* ty=(Tensor[(9, 16, 8), float32],) */
}

def @func_8063(%var_8061: Tensor[(220), int8], %var_8062: Tensor[(10, 20), uint64]) -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16], Tensor[(220), int8], Tensor[(10, 20), uint64], Tensor[(9, 16, 8), uint16], Tensor[(2, 72), float64]) {
  %924 = fn (%var_8037: Tensor[(220), int8], %var_8038: Tensor[(10, 20), uint64]) -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16], Tensor[(220), int8], Tensor[(10, 20), uint64], Tensor[(9, 16, 8), uint16], Tensor[(2, 72), float64]) {
    %912 = @func_4658() /* ty=(Tensor[(9, 16, 8), float32],) */;
    %913 = cast(%var_8037, dtype="int8") /* ty=Tensor[(220), int8] */;
    %914 = cast(%var_8038, dtype="uint64") /* ty=Tensor[(10, 20), uint64] */;
    %915 = reshape(%913, newshape=[220]) /* ty=Tensor[(220), int8] */;
    %916 = reshape(%914, newshape=[200]) /* ty=Tensor[(200), uint64] */;
    %917 = @func_5414(%915, %916) /* ty=(Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16], Tensor[(220), int8], Tensor[(324), int8], Tensor[(54, 6), bool], Tensor[(200), uint64]) */;
    %918 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 72), float64] */, dtype="float64") /* ty=Tensor[(2, 72), float64] */;
    %919 = reshape(%918, newshape=[1, 9, 16]) /* ty=Tensor[(1, 9, 16), float64] */;
    %920 = @func_4741(%919) /* ty=(Tensor[(5, 9, 16), float64], Tensor[(9, 16, 8), uint16], Tensor[(10, 10, 12), int8], Tensor[(1, 1200), int8], Tensor[(15, 3, 11), float64]) */;
    %921 = %912.0;
    %922 = %917.1;
    %923 = %920.1;
    (%921, %922, %var_8037, %var_8038, %923, meta[relay.Constant][46] /* ty=Tensor[(2, 72), float64] */)
  };
  %924(%var_8061, %var_8062) /* ty=(Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16], Tensor[(220), int8], Tensor[(10, 20), uint64], Tensor[(9, 16, 8), uint16], Tensor[(2, 72), float64]) */
}

def @func_7403() -> (Tensor[(9, 16, 8), uint16],) {
  %927 = fn () -> (Tensor[(9, 16, 8), uint16],) {
    %925 = @func_6885() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), uint16], Tensor[(165, 3), float64]) */;
    %926 = %925.1;
    (%926,)
  };
  %927() /* ty=(Tensor[(9, 16, 8), uint16],) */
}

def @func_8080() -> (Tensor[(12, 9, 3), float32],) {
  @func_8078() /* ty=(Tensor[(12, 9, 3), float32],) */
}

def @func_3812() -> Tensor[(12, 9, 3), float32] {
  %928 = @func_3287() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(324), int8], Tensor[(288, 4), float64], Tensor[(324), bool], Tensor[(12, 9, 3), float64], Tensor[(12, 9, 3), float32], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */;
  %928.5
}

def @func_8445(%var_8444: Tensor[(1200), int8]) -> (Tensor[(9, 16, 8), float32], uint64, Tensor[(672), float32], Tensor[(10, 10, 12), int8], Tensor[(1200), int8], Tensor[(48), float64], Tensor[(9, 16, 8), bool], Tensor[(6, 8, 15), float32], Tensor[(13, 2, 4), bool], Tensor[(104), uint64]) {
  %956 = fn (%var_8411: Tensor[(1200), int8]) -> (Tensor[(9, 16, 8), float32], uint64, Tensor[(672), float32], Tensor[(10, 10, 12), int8], Tensor[(1200), int8], Tensor[(48), float64], Tensor[(9, 16, 8), bool], Tensor[(6, 8, 15), float32], Tensor[(13, 2, 4), bool], Tensor[(104), uint64]) {
    %929 = @func_1658() /* ty=(Tensor[(9, 16, 8), float32],) */;
    %930 = %929.0;
    %931 = cast(%930, dtype="uint16") /* ty=Tensor[(9, 16, 8), uint16] */;
    %932 = cast(meta[relay.Constant][47] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
    %933 = reshape(%931, newshape=[1152]) /* ty=Tensor[(1152), uint16] */;
    %934 = reshape(%932, newshape=[672]) /* ty=Tensor[(672), float32] */;
    %935 = @func_2802(%933, %934) /* ty=(uint64, Tensor[(15, 3, 11), int8], uint64, Tensor[(9, 16, 8), bool], Tensor[(1152), uint16], Tensor[(6, 8, 14), bool], Tensor[(672), float32], Tensor[(9, 16, 8), float32], Tensor[(6, 8, 14), bool], Tensor[(495), float32], Tensor[(9, 16, 8), uint16], uint64) */;
    %936 = cast(%var_8411, dtype="int8") /* ty=Tensor[(1200), int8] */;
    %937 = cast(%var_8411, dtype="int8") /* ty=Tensor[(1200), int8] */;
    %938 = reshape(%936, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int8] */;
    %939 = reshape(%937, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int8] */;
    %940 = @func_2855(%938, %939) /* ty=(Tensor[(10, 10, 12), int8],) */;
    %941 = @func_6154() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float64]) */;
    %942 = cast(meta[relay.Constant][48] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
    %943 = reshape(%942, newshape=[6, 8, 1]) /* ty=Tensor[(6, 8, 1), float64] */;
    %944 = @func_4850(%943) /* ty=(Tensor[(6, 8, 15), float32], Tensor[(6, 8, 15), int64]) */;
    %945 = %944.1;
    %946 = cast(%945, dtype="float32") /* ty=Tensor[(6, 8, 15), float32] */;
    %947 = %935.11;
    %948 = cast(%947, dtype="uint64") /* ty=uint64 */;
    %949 = cast(meta[relay.Constant][49] /* ty=Tensor[(104), uint64] */, dtype="uint64") /* ty=Tensor[(104), uint64] */;
    %950 = reshape(%948, newshape=[]) /* ty=uint64 */;
    %951 = reshape(%949, newshape=[13, 2, 4]) /* ty=Tensor[(13, 2, 4), uint64] */;
    %952 = %940.0;
    %953 = %941.0;
    %954 = acos(%946) /* ty=Tensor[(6, 8, 15), float32] */;
    %955 = @func_296(%950, %951) /* ty=Tensor[(13, 2, 4), bool] */;
    (%930, %947, meta[relay.Constant][47] /* ty=Tensor[(672), float32] */, %952, %var_8411, meta[relay.Constant][48] /* ty=Tensor[(48), float64] */, %953, %954, %955, meta[relay.Constant][49] /* ty=Tensor[(104), uint64] */)
  };
  %956(%var_8444) /* ty=(Tensor[(9, 16, 8), float32], uint64, Tensor[(672), float32], Tensor[(10, 10, 12), int8], Tensor[(1200), int8], Tensor[(48), float64], Tensor[(9, 16, 8), bool], Tensor[(6, 8, 15), float32], Tensor[(13, 2, 4), bool], Tensor[(104), uint64]) */
}

def @func_3133(%var_3131: Tensor[(14, 10, 4), float64], %var_3132: Tensor[(14, 10, 4), float64]) -> (Tensor[(14, 10, 4), float64],) {
  %962 = fn (%var_3120: Tensor[(14, 10, 4), float64], %var_3121: Tensor[(14, 10, 4), float64]) -> (Tensor[(14, 10, 4), float64],) {
    %957 = cast(%var_3121, dtype="float64") /* ty=Tensor[(14, 10, 4), float64] */;
    %958 = shape_of(%var_3120, dtype="int32") /* ty=Tensor[(3), int32] */;
    %959 = cast(%var_3120, dtype="float64") /* ty=Tensor[(14, 10, 4), float64] */;
    %960 = dyn.reshape(%957, %958, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %961 = floor_mod(%959, %960) /* ty=Tensor[(14, 10, 4), float64] */;
    (%961,)
  };
  %962(%var_3131, %var_3132) /* ty=(Tensor[(14, 10, 4), float64],) */
}

def @func_8707() -> (Tensor[(13, 2, 4), bool], Tensor[(11, 2, 10), int8], Tensor[(220), int8]) {
  %963 = cast(meta[relay.Constant][50] /* ty=Tensor[(220), int8] */, dtype="int8") /* ty=Tensor[(220), int8] */;
  %964 = reshape(%963, newshape=[11, 2, 10]) /* ty=Tensor[(11, 2, 10), int8] */;
  %965 = @func_1759(%964) /* ty=(Tensor[(11, 2, 10), int8], Tensor[(11, 2, 10), uint64]) */;
  %966 = @func_6546() /* ty=Tensor[(13, 2, 4), bool] */;
  %967 = %965.0;
  (%966, %967, meta[relay.Constant][50] /* ty=Tensor[(220), int8] */)
}

def @func_1762(%var_1760: Tensor[(11, 2, 10), int8]) -> (Tensor[(11, 2, 10), int8], Tensor[(11, 2, 10), uint64]) {
  @func_1759(%var_1760) /* ty=(Tensor[(11, 2, 10), int8], Tensor[(11, 2, 10), uint64]) */
}

def @func_5018() -> (Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), float32], uint64) {
  %975 = fn () -> (Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), float32], uint64) {
    %968 = @func_2341() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float32]) */;
    %969 = @func_4166() /* ty=Tensor[(9, 16, 8), float64] */;
    %970 = cast(%969, dtype="float32") /* ty=Tensor[(9, 16, 8), float32] */;
    %971 = reshape(%970, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %972 = @func_1358(%971) /* ty=(uint64, Tensor[(1152), bool]) */;
    %973 = %968.1;
    %974 = %972.0;
    (%969, %973, %974)
  };
  %975() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(9, 16, 8), float32], uint64) */
}

def @func_1951() -> (uint64,) {
  %978 = fn () -> (uint64,) {
    %976 = @func_1203() /* ty=(uint64,) */;
    %977 = %976.0;
    (%977,)
  };
  %978() /* ty=(uint64,) */
}

def @func_7901(%var_7900: Tensor[(220), int8]) -> (Tensor[(104), uint64], Tensor[(1152), float32], Tensor[(200), uint64], uint64, Tensor[(200, 220), bool]) {
  %994 = fn (%var_7847: Tensor[(220), int8]) -> (Tensor[(104), uint64], Tensor[(1152), float32], Tensor[(200), uint64], uint64, Tensor[(200, 220), bool]) {
    %979 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
    %980 = @func_1298() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(1152), float32]) */;
    %981 = cast(%var_7847, dtype="int8") /* ty=Tensor[(220), int8] */;
    %982 = cast(meta[relay.Constant][51] /* ty=Tensor[(200, 1), uint64] */, dtype="uint64") /* ty=Tensor[(200, 1), uint64] */;
    %983 = reshape(%981, newshape=[220]) /* ty=Tensor[(220), int8] */;
    %984 = reshape(%982, newshape=[200]) /* ty=Tensor[(200), uint64] */;
    %985 = @func_5414(%983, %984) /* ty=(Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16], Tensor[(220), int8], Tensor[(324), int8], Tensor[(54, 6), bool], Tensor[(200), uint64]) */;
    %986 = @func_1262() /* ty=(uint64,) */;
    %987 = cast(%var_7847, dtype="bool") /* ty=Tensor[(220), bool] */;
    %988 = cast(meta[relay.Constant][51] /* ty=Tensor[(200, 1), uint64] */, dtype="bool") /* ty=Tensor[(200, 1), bool] */;
    %989 = %979.5;
    %990 = %980.1;
    %991 = %985.5;
    %992 = %986.0;
    %993 = logical_and(%987, %988) /* ty=Tensor[(200, 220), bool] */;
    (%989, %990, %991, %992, %993)
  };
  %994(%var_7900) /* ty=(Tensor[(104), uint64], Tensor[(1152), float32], Tensor[(200), uint64], uint64, Tensor[(200, 220), bool]) */
}

def @func_7176(%var_7156: Tensor[(9, 14, 8), float32]) -> (Tensor[(9, 14, 8), bool], Tensor[(6, 8, 14), bool], Tensor[(672), float32], Tensor[(9, 14, 8), float64], Tensor[(6, 8, 14), bool]) {
  %995 = cast(%var_7156, dtype="bool") /* ty=Tensor[(9, 14, 8), bool] */;
  %996 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(9, 14, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %997 = cast(meta[relay.Constant][52] /* ty=Tensor[(9, 14, 8), float32] */, dtype="bool") /* ty=Tensor[(9, 14, 8), bool] */;
  %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %999 = cast(meta[relay.Constant][53] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %1000 = cast(meta[relay.Constant][53] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %1001 = reshape(%999, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %1002 = reshape(%1000, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %1003 = cast(meta[relay.Constant][52] /* ty=Tensor[(9, 14, 8), float32] */, dtype="float64") /* ty=Tensor[(9, 14, 8), float64] */;
  %1004 = cast(meta[relay.Constant][53] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %1005 = cast(meta[relay.Constant][53] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %1006 = reshape(%1004, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %1007 = reshape(%1005, newshape=[6, 8, 14]) /* ty=Tensor[(6, 8, 14), float32] */;
  %1008 = greater(%997, %998) /* ty=Tensor[(9, 14, 8), bool] */;
  %1009 = @func_720(%1001, %1002) /* ty=Tensor[(6, 8, 14), bool] */;
  %1010 = acosh(%1003) /* ty=Tensor[(9, 14, 8), float64] */;
  %1011 = @func_720(%1006, %1007) /* ty=Tensor[(6, 8, 14), bool] */;
  (%1008, %1009, meta[relay.Constant][53] /* ty=Tensor[(672), float32] */, %1010, %1011)
}

def @func_8814(%var_8804: Tensor[(132), int8]) -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16], Tensor[(672), float32], int8, Tensor[(132), int8]) {
  %1012 = @func_1114() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %1013 = @func_2341() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float32]) */;
  %1014 = @func_3574() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %1015 = cast(meta[relay.Constant][54] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %1016 = cast(%var_8804, dtype="int8") /* ty=Tensor[(132), int8] */;
  %1017 = reshape(%1015, newshape=[]) /* ty=int8 */;
  %1018 = reshape(%1016, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), int8] */;
  %1019 = @func_3365(%1017, %1018) /* ty=(Tensor[(11, 12, 1), int8], Tensor[(9, 16, 8), float32], Tensor[(1152), uint16], Tensor[(672), float32], Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) */;
  %1020 = %1012.0;
  %1021 = %1013.1;
  %1022 = %1014.0;
  %1023 = %1019.3;
  (%1020, %1021, %1022, %1023, meta[relay.Constant][54] /* ty=int8 */, %var_8804)
}

def @func_2639() -> Tensor[(9, 16, 8), uint16] {
  @func_2637() /* ty=Tensor[(9, 16, 8), uint16] */
}

def @func_4050(%var_4048: Tensor[(11, 2, 8), uint16], %var_4049: Tensor[(11, 2, 8), uint16]) -> (Tensor[(11, 2, 8), uint16],) {
  %1029 = fn (%var_4037: Tensor[(11, 2, 8), uint16], %var_4038: Tensor[(11, 2, 8), uint16]) -> (Tensor[(11, 2, 8), uint16],) {
    %1024 = cast(%var_4038, dtype="uint16") /* ty=Tensor[(11, 2, 8), uint16] */;
    %1025 = shape_of(%var_4037, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1026 = cast(%var_4037, dtype="uint16") /* ty=Tensor[(11, 2, 8), uint16] */;
    %1027 = dyn.reshape(%1024, %1025, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %1028 = left_shift(%1026, %1027) /* ty=Tensor[(11, 2, 8), uint16] */;
    (%1028,)
  };
  %1029(%var_4048, %var_4049) /* ty=(Tensor[(11, 2, 8), uint16],) */
}

def @func_5884(%var_5881: int8) -> (Tensor[(13, 2, 4), bool], Tensor[(9, 16, 8), float32], int8, Tensor[(132), int8]) {
  %1030 = @func_1104() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(15, 3, 11), int8], Tensor[(495), float32], Tensor[(13, 2, 4), bool], Tensor[(13, 2, 4), bool], uint64) */;
  %1031 = cast(%var_5881, dtype="int8") /* ty=int8 */;
  %1032 = cast(meta[relay.Constant][55] /* ty=Tensor[(132), int8] */, dtype="int8") /* ty=Tensor[(132), int8] */;
  %1033 = reshape(%1031, newshape=[]) /* ty=int8 */;
  %1034 = reshape(%1032, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), int8] */;
  %1035 = @func_3365(%1033, %1034) /* ty=(Tensor[(11, 12, 1), int8], Tensor[(9, 16, 8), float32], Tensor[(1152), uint16], Tensor[(672), float32], Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) */;
  %1036 = %1030.4;
  %1037 = %1035.1;
  (%1036, %1037, %var_5881, meta[relay.Constant][55] /* ty=Tensor[(132), int8] */)
}

def @func_8512() -> Tensor[(9, 16, 8), float32] {
  %1038 = @func_1381() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %1038.0
}

def @func_1536() -> uint64 {
  @func_1534() /* ty=uint64 */
}

def @func_5231(%var_5196: Tensor[(324), bool], %var_5207: Tensor[(24, 2), float64]) -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), bool], Tensor[(324), float32], Tensor[(6, 8, 15), int64], Tensor[(24, 2), float64], Tensor[(6, 8, 15), float32], Tensor[(9, 16, 8), float64]) {
  %1039 = @func_2440() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %1040 = %1039.0;
  %1041 = cast(%1040, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
  %1042 = cast(meta[relay.Constant][56] /* ty=Tensor[(324), bool] */, dtype="bool") /* ty=Tensor[(324), bool] */;
  %1043 = reshape(%1041, newshape=[9, 16, 8]) /* ty=Tensor[(9, 16, 8), float64] */;
  %1044 = reshape(%1042, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), bool] */;
  %1045 = @func_1443(%1043, %1044) /* ty=(Tensor[(9, 16, 8), bool], Tensor[(12, 9, 3), float64]) */;
  %1046 = cast(%var_5196, dtype="float32") /* ty=Tensor[(324), float32] */;
  %1047 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(324), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1048 = cast(meta[relay.Constant][56] /* ty=Tensor[(324), bool] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %1049 = dyn.reshape(%1046, %1047, newshape=[]) /* ty=Tensor[(?), float32] */;
  %1050 = cast(%var_5207, dtype="float64") /* ty=Tensor[(24, 2), float64] */;
  %1051 = reshape(%1050, newshape=[6, 8, 1]) /* ty=Tensor[(6, 8, 1), float64] */;
  %1052 = @func_4850(%1051) /* ty=(Tensor[(6, 8, 15), float32], Tensor[(6, 8, 15), int64]) */;
  %1053 = cast(%var_5207, dtype="float64") /* ty=Tensor[(24, 2), float64] */;
  %1054 = reshape(%1053, newshape=[6, 8, 1]) /* ty=Tensor[(6, 8, 1), float64] */;
  %1055 = @func_4850(%1054) /* ty=(Tensor[(6, 8, 15), float32], Tensor[(6, 8, 15), int64]) */;
  %1056 = %1045.0;
  %1057 = add(%1048, %1049) /* ty=Tensor[(324), float32] */;
  %1058 = %1052.1;
  %1059 = %1055.0;
  %1060 = @func_2569() /* ty=Tensor[(9, 16, 8), float64] */;
  (%1040, %1056, %1057, %1058, %var_5207, %1059, %1060)
}

def @func_4001() -> (uint64,) {
  %1061 = @func_1950() /* ty=(uint64,) */;
  %1062 = %1061.0;
  (%1062,)
}

def @func_5844() -> (Tensor[(9, 16, 8), float64],) {
  @func_5842() /* ty=(Tensor[(9, 16, 8), float64],) */
}

def @func_2144() -> Tensor[(9, 16, 8), float64] {
  %1063 = @func_1720() /* ty=(Tensor[(9, 16, 8), float64],) */;
  %1063.0
}

def @func_6250(%var_6236: Tensor[(14, 9, 14), int64]) -> (Tensor[(14, 9, 14), bool], Tensor[(9, 16, 8), float32]) {
  %1064 = cast(%var_6236, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
  %1065 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(14, 9, 14), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1066 = cast(meta[relay.Constant][57] /* ty=Tensor[(14, 9, 14), int64] */, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
  %1067 = dyn.reshape(%1064, %1065, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1068 = @func_1381() /* ty=(Tensor[(9, 16, 8), float32],) */;
  %1069 = greater(%1066, %1067) /* ty=Tensor[(14, 9, 14), bool] */;
  %1070 = %1068.0;
  (%1069, %1070)
}

def @func_7453() -> (Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32], Tensor[(5, 5, 12), bool], Tensor[(300), float64]) {
  %1071 = @func_7402() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %1072 = @func_4927() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) */;
  %1073 = cast(meta[relay.Constant][58] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %1074 = cast(meta[relay.Constant][58] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %1075 = reshape(%1073, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), float64] */;
  %1076 = reshape(%1074, newshape=[5, 5, 12]) /* ty=Tensor[(5, 5, 12), float64] */;
  %1077 = @func_4682(%1075, %1076) /* ty=(Tensor[(5, 5, 12), float64], Tensor[(5, 5, 12), bool]) */;
  %1078 = %1071.0;
  %1079 = %1072.1;
  %1080 = %1077.1;
  (%1078, %1079, %1080, meta[relay.Constant][58] /* ty=Tensor[(300), float64] */)
}

def @func_3009(%var_3007: Tensor[(16, 3, 9), float32]) -> Tensor[(16, 3, 9), float32] {
  @func_3006(%var_3007) /* ty=Tensor[(16, 3, 9), float32] */
}

def @func_4744(%var_4742: Tensor[(1, 9, 16), float64]) -> (Tensor[(5, 9, 16), float64], Tensor[(9, 16, 8), uint16], Tensor[(10, 10, 12), int8], Tensor[(1, 1200), int8], Tensor[(15, 3, 11), float64]) {
  @func_4741(%var_4742) /* ty=(Tensor[(5, 9, 16), float64], Tensor[(9, 16, 8), uint16], Tensor[(10, 10, 12), int8], Tensor[(1, 1200), int8], Tensor[(15, 3, 11), float64]) */
}

def @func_2342() -> (Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float32]) {
  %1085 = fn () -> (Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float32]) {
    %1081 = @func_1298() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(1152), float32]) */;
    %1082 = @func_1381() /* ty=(Tensor[(9, 16, 8), float32],) */;
    %1083 = %1081.0;
    %1084 = %1082.0;
    (%1083, %1084)
  };
  %1085() /* ty=(Tensor[(9, 16, 8), bool], Tensor[(9, 16, 8), float32]) */
}

def @func_3849() -> (Tensor[(10, 4, 15), bool], Tensor[(9, 16, 8), uint16]) {
  %1086 = @func_3544() /* ty=(Tensor[(10, 4, 15), bool],) */;
  %1087 = @func_1017() /* ty=(Tensor[(9, 16, 8), uint16],) */;
  %1088 = %1086.0;
  %1089 = %1087.0;
  (%1088, %1089)
}

def @func_1720() -> (Tensor[(9, 16, 8), float64],) {
  %1090 = @func_772() /* ty=(Tensor[(9, 16, 8), float64], Tensor[(12, 9, 3), bool], Tensor[(324), uint32], Tensor[(13, 2, 4), bool], uint64, Tensor[(104), uint64], Tensor[(9, 16, 8), float64]) */;
  %1091 = %1090.6;
  %1092 = cast(%1091, dtype="float64") /* ty=Tensor[(9, 16, 8), float64] */;
  %1093 = acos(%1092) /* ty=Tensor[(9, 16, 8), float64] */;
  (%1093,)
}

def @func_8161() -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) {
  %1098 = fn () -> (Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) {
    %1094 = @func_4809() /* ty=(Tensor[(9, 16, 8), uint16], Tensor[(9, 16, 8), float32]) */;
    %1095 = @func_3574() /* ty=(Tensor[(9, 16, 8), uint16],) */;
    %1096 = %1094.1;
    %1097 = %1095.0;
    (%1096, %1097)
  };
  %1098() /* ty=(Tensor[(9, 16, 8), float32], Tensor[(9, 16, 8), uint16]) */
}

def @func_1996() -> (Tensor[(9, 16, 8), float32], Tensor[(15, 3, 11), bool]) {
  @func_1994() /* ty=(Tensor[(9, 16, 8), float32], Tensor[(15, 3, 11), bool]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen212/build/output.py:2965: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen212/build/output.py", line 2970, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(650) tvmgen_default_fused_reshape_maximum_kernel0(uint64_t* __restrict__ T_maximum, uint64_t* __restrict__ placeholder, uint64_t* __restrict__ placeholder1) {
  T_maximum[(((int)threadIdx.x))] = max(placeholder[(((int)threadIdx.x))], placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

