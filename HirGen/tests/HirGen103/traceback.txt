==========mod==========
#[version = "0.0.5"]
def @func_1476(%var_1470: Tensor[(5, 11, 16), float64]) -> (Tensor[(5, 11, 16), float64],) {
  %0 = cast(%var_1470, dtype="float64") /* ty=Tensor[(5, 11, 16), float64] */;
  %1 = log10(%0) /* ty=Tensor[(5, 11, 16), float64] */;
  (%1,)
}

def @func_3675(%var_3670: Tensor[(968), int64]) -> (Tensor[(13, 6, 8), float32], Tensor[(11, 11, 8), int64], Tensor[(968), bool]) {
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(968), int64] */, dtype="int64") /* ty=Tensor[(968), int64] */;
  %3 = reshape(%2, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), int64] */;
  %4 = cast(%var_3670, dtype="bool") /* ty=Tensor[(968), bool] */;
  %5 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(968), int64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(968), int64] */, dtype="bool") /* ty=Tensor[(968), bool] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?), bool] */;
  %8 = @func_3396() /* ty=Tensor[(13, 6, 8), float32] */;
  %9 = @func_511(%3) /* ty=Tensor[(11, 11, 8), int64] */;
  %10 = equal(%6, %7) /* ty=Tensor[(968), bool] */;
  (%8, %9, %10)
}

def @func_6117(%var_6109: Tensor[(13, 6, 8), float64]) -> (Tensor[(12, 12, 9), float32], Tensor[(1296), float32], Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), uint16]) {
  %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(1296), float32] */, dtype="float32") /* ty=Tensor[(1296), float32] */;
  %12 = reshape(%11, newshape=[12, 12, 9]) /* ty=Tensor[(12, 12, 9), float32] */;
  %13 = @func_4310() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %14 = %13.0;
  %15 = cast(%var_6109, dtype="uint16") /* ty=Tensor[(13, 6, 8), uint16] */;
  %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%14, dtype="uint16") /* ty=Tensor[(13, 6, 8), uint16] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %19 = @func_304(%12) /* ty=Tensor[(12, 12, 9), float32] */;
  %20 = @func_3267() /* ty=Tensor[(13, 6, 8), float64] */;
  %21 = right_shift(%17, %18) /* ty=Tensor[(13, 6, 8), uint16] */;
  (%19, meta[relay.Constant][1] /* ty=Tensor[(1296), float32] */, %20, %21)
}

def @func_3267() -> Tensor[(13, 6, 8), float64] {
  %22 = @func_2827() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %22.0
}

def @func_2294(%var_2283: Tensor[(15, 10, 11), float32]) -> (Tensor[(15, 10, 11), float64],) {
  %23 = cast(%var_2283, dtype="float32") /* ty=Tensor[(15, 10, 11), float32] */;
  %24 = sinh(%23) /* ty=Tensor[(15, 10, 11), float32] */;
  %25 = cast(%24, dtype="float64") /* ty=Tensor[(15, 10, 11), float64] */;
  %26 = acos(%25) /* ty=Tensor[(15, 10, 11), float64] */;
  (%26,)
}

def @func_4794(%var_4787: Tensor[(1320), float64], %var_4789: Tensor[(968), int64], %var_4791: Tensor[(728), float64], %var_4792: Tensor[(2520), float64]) -> (Tensor[(13, 6, 8), float64], Tensor[(7, 15, 8), uint8], Tensor[(56), uint8], Tensor[(11, 11, 8), int64], Tensor[(8, 30), uint64], Tensor[(1320), float64], Tensor[(1296), float32], Tensor[(968), int64], Tensor[(104), float64], Tensor[(728), float64], Tensor[(2520), float64]) {
  %27 = @func_2827() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(56), uint8] */, dtype="uint8") /* ty=Tensor[(56), uint8] */;
  %29 = reshape(%28, newshape=[7, 1, 8]) /* ty=Tensor[(7, 1, 8), uint8] */;
  %30 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 30), uint64] */, dtype="uint64") /* ty=Tensor[(8, 30), uint64] */;
  %31 = cast(%var_4787, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %32 = cast(meta[relay.Constant][4] /* ty=Tensor[(1296), float32] */, dtype="float32") /* ty=Tensor[(1296), float32] */;
  %33 = cast(%var_4789, dtype="int64") /* ty=Tensor[(968), int64] */;
  %34 = cast(meta[relay.Constant][5] /* ty=Tensor[(104), float64] */, dtype="float64") /* ty=Tensor[(104), float64] */;
  %35 = cast(%var_4791, dtype="float64") /* ty=Tensor[(728), float64] */;
  %36 = cast(%var_4792, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %37 = reshape(%30, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), uint64] */;
  %38 = reshape(%31, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %39 = reshape(%32, newshape=[1296]) /* ty=Tensor[(1296), float32] */;
  %40 = reshape(%33, newshape=[968]) /* ty=Tensor[(968), int64] */;
  %41 = reshape(%34, newshape=[26, 4]) /* ty=Tensor[(26, 4), float64] */;
  %42 = reshape(%35, newshape=[1, 728]) /* ty=Tensor[(1, 728), float64] */;
  %43 = reshape(%36, newshape=[6, 420]) /* ty=Tensor[(6, 420), float64] */;
  %44 = @func_1201(%37, %38, %39, %40, %41, %42, %43) /* ty=(Tensor[(1320), float64], Tensor[(12, 12, 9), float32], Tensor[(4, 12, 5), float64], Tensor[(10, 12, 11), float64], Tensor[(1296), bool], Tensor[(11, 11, 8), int64], Tensor[(968), int64], Tensor[(7, 8, 13), float64], Tensor[(26, 4), float64], Tensor[(1, 728), float64], Tensor[(6, 420), float64]) */;
  %45 = %27.0;
  %46 = @func_1818(%29) /* ty=Tensor[(7, 15, 8), uint8] */;
  %47 = %44.5;
  (%45, %46, meta[relay.Constant][2] /* ty=Tensor[(56), uint8] */, %47, meta[relay.Constant][3] /* ty=Tensor[(8, 30), uint64] */, %var_4787, meta[relay.Constant][4] /* ty=Tensor[(1296), float32] */, %var_4789, meta[relay.Constant][5] /* ty=Tensor[(104), float64] */, %var_4791, %var_4792)
}

def @func_5182() -> (Tensor[(13, 6, 8), float64],) {
  %48 = @func_4531() /* ty=(Tensor[(13, 6, 8), float32],) */;
  %49 = %48.0;
  %50 = cast(%49, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
  %51 = sigmoid(%50) /* ty=Tensor[(13, 6, 8), float64] */;
  (%51,)
}

def @func_3070(%var_3011: Tensor[(1296), float32]) -> (Tensor[(13, 6, 8), float64], Tensor[(1296), float32], Tensor[(12, 12, 9), float32], Tensor[(13, 6, 8), float64]) {
  %52 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %53 = cast(%var_3011, dtype="float32") /* ty=Tensor[(1296), float32] */;
  %54 = reshape(%53, newshape=[12, 12, 9]) /* ty=Tensor[(12, 12, 9), float32] */;
  %55 = @func_304(%54) /* ty=Tensor[(12, 12, 9), float32] */;
  %56 = cast(%55, dtype="float64") /* ty=Tensor[(12, 12, 9), float64] */;
  %57 = sqrt(%56) /* ty=Tensor[(12, 12, 9), float64] */;
  %58 = cast(%57, dtype="float32") /* ty=Tensor[(12, 12, 9), float32] */;
  %59 = shape_of(%55, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%55, dtype="float32") /* ty=Tensor[(12, 12, 9), float32] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %62 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %63 = %62.0;
  %64 = cast(%63, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
  %65 = %52.0;
  %66 = multiply(%60, %61) /* ty=Tensor[(12, 12, 9), float32] */;
  %67 = sin(%64) /* ty=Tensor[(13, 6, 8), float64] */;
  (%65, %var_3011, %66, %67)
}

def @func_4310() -> (Tensor[(13, 6, 8), float64],) {
  %68 = @func_3590() /* ty=(Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float64]) */;
  %69 = %68.2;
  (%69,)
}

def @func_4965() -> (Tensor[(13, 6, 8), float32],) {
  %70 = @func_3396() /* ty=Tensor[(13, 6, 8), float32] */;
  (%70,)
}

def @func_2827() -> (Tensor[(13, 6, 8), float64],) {
  %71 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %72 = %71.0;
  (%72,)
}

def @func_3396() -> Tensor[(13, 6, 8), float32] {
  %73 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %74 = %73.0;
  %75 = cast(%74, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
  %76 = asinh(%75) /* ty=Tensor[(13, 6, 8), float32] */;
  %77 = cast(%76, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
  acosh(%77) /* ty=Tensor[(13, 6, 8), float32] */
}

def @func_1201(%var_1129: Tensor[(4, 12, 5), uint64], %var_1137: Tensor[(1320), float64], %var_1181: Tensor[(1296), float32], %var_1187: Tensor[(968), int64], %var_1196: Tensor[(26, 4), float64], %var_1197: Tensor[(1, 728), float64], %var_1198: Tensor[(6, 420), float64]) -> (Tensor[(1320), float64], Tensor[(12, 12, 9), float32], Tensor[(4, 12, 5), float64], Tensor[(10, 12, 11), float64], Tensor[(1296), bool], Tensor[(11, 11, 8), int64], Tensor[(968), int64], Tensor[(7, 8, 13), float64], Tensor[(26, 4), float64], Tensor[(1, 728), float64], Tensor[(6, 420), float64]) {
  %78 = cast(meta[relay.Constant][6] /* ty=Tensor[(1296), float32] */, dtype="float32") /* ty=Tensor[(1296), float32] */;
  %79 = reshape(%78, newshape=[12, 12, 9]) /* ty=Tensor[(12, 12, 9), float32] */;
  %80 = cast(%var_1129, dtype="uint64") /* ty=Tensor[(4, 12, 5), uint64] */;
  %81 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(4, 12, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 12, 5), uint64] */, dtype="uint64") /* ty=Tensor[(4, 12, 5), uint64] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %84 = left_shift(%82, %83) /* ty=Tensor[(4, 12, 5), uint64] */;
  %85 = cast(%84, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
  %86 = log10(%85) /* ty=Tensor[(4, 12, 5), float64] */;
  %87 = cast(%86, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
  %88 = cast(%var_1137, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %89 = reshape(%88, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), float64] */;
  %90 = @func_701(%89) /* ty=Tensor[(10, 12, 11), uint64] */;
  %91 = cast(%90, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
  %92 = cast(%var_1181, dtype="bool") /* ty=Tensor[(1296), bool] */;
  %93 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(1296), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %94 = cast(meta[relay.Constant][6] /* ty=Tensor[(1296), float32] */, dtype="bool") /* ty=Tensor[(1296), bool] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?), bool] */;
  %96 = cast(%var_1187, dtype="int64") /* ty=Tensor[(968), int64] */;
  %97 = reshape(%96, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), int64] */;
  %98 = cast(%var_1196, dtype="float64") /* ty=Tensor[(26, 4), float64] */;
  %99 = cast(%var_1197, dtype="float64") /* ty=Tensor[(1, 728), float64] */;
  %100 = cast(%var_1198, dtype="float64") /* ty=Tensor[(6, 420), float64] */;
  %101 = reshape(%98, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %102 = reshape(%99, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), float64] */;
  %103 = reshape(%100, newshape=[1, 2520]) /* ty=Tensor[(1, 2520), float64] */;
  %104 = @func_750(%101, %102, %103) /* ty=(Tensor[(7, 8, 13), float64], Tensor[(7, 12, 9), int32], Tensor[(756), float32], Tensor[(968), int8], Tensor[(180), float64], Tensor[(1, 2520), float64], Tensor[(968), int64], Tensor[(756), float64], Tensor[(7, 12, 9), int32]) */;
  %105 = @func_304(%79) /* ty=Tensor[(12, 12, 9), float32] */;
  %106 = log(%87) /* ty=Tensor[(4, 12, 5), float64] */;
  %107 = acos(%91) /* ty=Tensor[(10, 12, 11), float64] */;
  %108 = less(%94, %95) /* ty=Tensor[(1296), bool] */;
  %109 = @func_511(%97) /* ty=Tensor[(11, 11, 8), int64] */;
  %110 = %104.0;
  (%var_1137, %105, %106, %107, %108, %109, %var_1187, %110, %var_1196, %var_1197, %var_1198)
}

def @func_2640(%var_2597: Tensor[(6, 2, 7), int32], %var_2609: int16, %var_2610: Tensor[(480), int16], %var_2611: Tensor[(880), float64]) -> (Tensor[(6, 2, 7), bool], Tensor[(15, 4, 8), int16], int16, Tensor[(480), int16], Tensor[(880), float64], Tensor[(6, 2, 7), float64], Tensor[(6, 2, 7), float32]) {
  %111 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 2, 7), int32] */, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %112 = shape_of(%var_2597, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%var_2597, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %115 = not_equal(%113, %114) /* ty=Tensor[(6, 2, 7), bool] */;
  %116 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 2, 7), bool] */, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%115, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %120 = cast(%var_2609, dtype="int16") /* ty=int16 */;
  %121 = cast(%var_2610, dtype="int16") /* ty=Tensor[(480), int16] */;
  %122 = cast(%var_2611, dtype="float64") /* ty=Tensor[(880), float64] */;
  %123 = cast(%var_2611, dtype="float64") /* ty=Tensor[(880), float64] */;
  %124 = reshape(%120, newshape=[]) /* ty=int16 */;
  %125 = reshape(%121, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), int16] */;
  %126 = reshape(%122, newshape=[880]) /* ty=Tensor[(880), float64] */;
  %127 = reshape(%123, newshape=[5, 11, 16]) /* ty=Tensor[(5, 11, 16), float64] */;
  %128 = @func_2462(%124, %125, %126, %127) /* ty=(Tensor[(15, 4, 8), int16], Tensor[(880), uint32], Tensor[(5, 11, 16), bool]) */;
  %129 = cast(%var_2597, dtype="float64") /* ty=Tensor[(6, 2, 7), float64] */;
  %130 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 2, 7), bool] */, dtype="float32") /* ty=Tensor[(6, 2, 7), float32] */;
  %131 = logical_and(%118, %119) /* ty=Tensor[(6, 2, 7), bool] */;
  %132 = %128.0;
  %133 = asin(%129) /* ty=Tensor[(6, 2, 7), float64] */;
  %134 = log(%130) /* ty=Tensor[(6, 2, 7), float32] */;
  (%131, %132, %var_2609, %var_2610, %var_2611, %133, %134)
}

def @func_3889(%var_3883: Tensor[(4, 16), float32], %var_3885: Tensor[(364, 2), float64]) -> (Tensor[(13, 6, 8), float64], Tensor[(756), int32], Tensor[(4, 16), float32], Tensor[(1320), float64], Tensor[(364, 2), float64]) {
  %135 = @func_3590() /* ty=(Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float64]) */;
  %136 = cast(%var_3883, dtype="float32") /* ty=Tensor[(4, 16), float32] */;
  %137 = cast(meta[relay.Constant][10] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %138 = cast(%var_3885, dtype="float64") /* ty=Tensor[(364, 2), float64] */;
  %139 = reshape(%136, newshape=[4, 1, 16]) /* ty=Tensor[(4, 1, 16), float32] */;
  %140 = reshape(%137, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %141 = reshape(%138, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %142 = @func_1110(%139, %140, %141) /* ty=(Tensor[(1320), float64], Tensor[(7, 12, 9), int32], Tensor[(756), int32], Tensor[(7, 12, 9), int32], Tensor[(7, 12, 9), int32], Tensor[(1, 12, 15), float64], Tensor[(180), float64], Tensor[(2520), float64], Tensor[(968), int64], Tensor[(4, ?, 16), float64], Tensor[(968), int8], Tensor[(756), float64], Tensor[(104), float64], Tensor[(728), float64], Tensor[(10, 12, 11), float32]) */;
  %143 = %135.0;
  %144 = %142.2;
  (%143, %144, %var_3883, meta[relay.Constant][10] /* ty=Tensor[(1320), float64] */, %var_3885)
}

def @func_3192(%var_3185: Tensor[(1, 1650), float32], %var_3187: Tensor[(6, 1650), float32]) -> (Tensor[(13, 6, 8), float64], Tensor[(15, 10, 11), float64], Tensor[(6, 1650), bool]) {
  %145 = @func_3120() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %146 = cast(%var_3185, dtype="float32") /* ty=Tensor[(1, 1650), float32] */;
  %147 = reshape(%146, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), float32] */;
  %148 = @func_2294(%147) /* ty=(Tensor[(15, 10, 11), float64],) */;
  %149 = cast(%var_3185, dtype="bool") /* ty=Tensor[(1, 1650), bool] */;
  %150 = cast(%var_3187, dtype="bool") /* ty=Tensor[(6, 1650), bool] */;
  %151 = %145.0;
  %152 = %148.0;
  %153 = equal(%149, %150) /* ty=Tensor[(6, 1650), bool] */;
  (%151, %152, %153)
}

def @func_701(%var_692: Tensor[(10, 12, 11), float64]) -> Tensor[(10, 12, 11), uint64] {
  %154 = cast(%var_692, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
  %155 = erf(%154) /* ty=Tensor[(10, 12, 11), float64] */;
  %156 = cast(%var_692, dtype="uint64") /* ty=Tensor[(10, 12, 11), uint64] */;
  %157 = shape_of(%155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%155, dtype="uint64") /* ty=Tensor[(10, 12, 11), uint64] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  maximum(%158, %159) /* ty=Tensor[(10, 12, 11), uint64] */
}

def @func_5292() -> (Tensor[(13, 6, 8), float32], Tensor[(11, 11, 8), int64], Tensor[(968), int64]) {
  %160 = @func_4965() /* ty=(Tensor[(13, 6, 8), float32],) */;
  %161 = cast(meta[relay.Constant][11] /* ty=Tensor[(968), int64] */, dtype="int64") /* ty=Tensor[(968), int64] */;
  %162 = reshape(%161, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), int64] */;
  %163 = %160.0;
  %164 = @func_511(%162) /* ty=Tensor[(11, 11, 8), int64] */;
  (%163, %164, meta[relay.Constant][11] /* ty=Tensor[(968), int64] */)
}

def @func_3627() -> (Tensor[(13, 6, 8), float64],) {
  %165 = @func_3590() /* ty=(Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float64]) */;
  %166 = %165.0;
  (%166,)
}

def @func_5825(%var_5818: Tensor[(10, 15, 15), float64]) -> (Tensor[(10, 15, 15), uint32], Tensor[(10, 15, 15), float32]) {
  %167 = cast(%var_5818, dtype="uint32") /* ty=Tensor[(10, 15, 15), uint32] */;
  %168 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(10, 15, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(meta[relay.Constant][12] /* ty=Tensor[(10, 15, 15), float64] */, dtype="uint32") /* ty=Tensor[(10, 15, 15), uint32] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %171 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 15, 15), float64] */, dtype="bool") /* ty=Tensor[(10, 15, 15), bool] */;
  %172 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(10, 15, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(meta[relay.Constant][12] /* ty=Tensor[(10, 15, 15), float64] */, dtype="bool") /* ty=Tensor[(10, 15, 15), bool] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %175 = equal(%173, %174) /* ty=Tensor[(10, 15, 15), bool] */;
  %176 = cast(%175, dtype="float32") /* ty=Tensor[(10, 15, 15), float32] */;
  %177 = bitwise_and(%169, %170) /* ty=Tensor[(10, 15, 15), uint32] */;
  %178 = tan(%176) /* ty=Tensor[(10, 15, 15), float32] */;
  (%177, %178)
}

def @func_5097() -> (Tensor[(13, 6, 8), float64],) {
  %179 = @func_4310() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %180 = %179.0;
  (%180,)
}

def @func_607(%var_599: Tensor[(7, 12, 9), int32]) -> (Tensor[(7, 12, 9), int32],) {
  %181 = cast(%var_599, dtype="int32") /* ty=Tensor[(7, 12, 9), int32] */;
  %182 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(7, 12, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 12, 9), int32] */, dtype="int32") /* ty=Tensor[(7, 12, 9), int32] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %185 = maximum(%183, %184) /* ty=Tensor[(7, 12, 9), int32] */;
  (%185,)
}

def @func_2913(%var_2874: Tensor[(5, 3), uint16]) -> (Tensor[(5, 3), bool], Tensor[(13, 6, 8), float64]) {
  %186 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 3), uint16] */, dtype="bool") /* ty=Tensor[(5, 3), bool] */;
  %187 = shape_of(%var_2874, dtype="int32") /* ty=Tensor[(2), int32] */;
  %188 = cast(%var_2874, dtype="bool") /* ty=Tensor[(5, 3), bool] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %190 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %191 = less_equal(%188, %189) /* ty=Tensor[(5, 3), bool] */;
  %192 = %190.0;
  (%191, %192)
}

def @func_3536(%var_3465: Tensor[(9, 14, 1), float64], %var_3477: Tensor[(9, 14, 6), float64], %var_3483: Tensor[(9, 14, 13), float32], %var_3515: int16, %var_3517: Tensor[(880), float64]) -> (Tensor[(968, 1), int64], Tensor[(9, 14, 6), bool], Tensor[(180), float64], Tensor[(9, 14, 13), bool], Tensor[(880), uint32], int16, Tensor[(480), int16], Tensor[(880), float64], Tensor[(9, 14, 13), bool]) {
  %193 = cast(%var_3465, dtype="float64") /* ty=Tensor[(9, 14, 1), float64] */;
  %194 = asinh(%193) /* ty=Tensor[(9, 14, 1), float64] */;
  %195 = cast(%194, dtype="bool") /* ty=Tensor[(9, 14, 1), bool] */;
  %196 = cast(%var_3477, dtype="bool") /* ty=Tensor[(9, 14, 6), bool] */;
  %197 = cast(meta[relay.Constant][16] /* ty=Tensor[(968, 1), int64] */, dtype="int64") /* ty=Tensor[(968, 1), int64] */;
  %198 = reshape(%197, newshape=[1, 968]) /* ty=Tensor[(1, 968), int64] */;
  %199 = @func_2954(%198) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(968), int8], Tensor[(180), float64], Tensor[(630, 4), float64], Tensor[(1, 968), int64]) */;
  %200 = %199.2;
  %201 = cast(%200, dtype="float64") /* ty=Tensor[(180), float64] */;
  %202 = cast(%194, dtype="bool") /* ty=Tensor[(9, 14, 1), bool] */;
  %203 = cast(%var_3483, dtype="bool") /* ty=Tensor[(9, 14, 13), bool] */;
  %204 = cast(%var_3515, dtype="int16") /* ty=int16 */;
  %205 = cast(meta[relay.Constant][17] /* ty=Tensor[(480), int16] */, dtype="int16") /* ty=Tensor[(480), int16] */;
  %206 = cast(%var_3517, dtype="float64") /* ty=Tensor[(880), float64] */;
  %207 = cast(%var_3517, dtype="float64") /* ty=Tensor[(880), float64] */;
  %208 = reshape(%204, newshape=[]) /* ty=int16 */;
  %209 = reshape(%205, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), int16] */;
  %210 = reshape(%206, newshape=[880]) /* ty=Tensor[(880), float64] */;
  %211 = reshape(%207, newshape=[5, 11, 16]) /* ty=Tensor[(5, 11, 16), float64] */;
  %212 = @func_2462(%208, %209, %210, %211) /* ty=(Tensor[(15, 4, 8), int16], Tensor[(880), uint32], Tensor[(5, 11, 16), bool]) */;
  %213 = cast(%194, dtype="float32") /* ty=Tensor[(9, 14, 1), float32] */;
  %214 = cos(%213) /* ty=Tensor[(9, 14, 1), float32] */;
  %215 = cast(%214, dtype="int16") /* ty=Tensor[(9, 14, 1), int16] */;
  %216 = cast(%var_3483, dtype="int16") /* ty=Tensor[(9, 14, 13), int16] */;
  %217 = bitwise_xor(%215, %216) /* ty=Tensor[(9, 14, 13), int16] */;
  %218 = cast(%var_3483, dtype="bool") /* ty=Tensor[(9, 14, 13), bool] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%217, dtype="bool") /* ty=Tensor[(9, 14, 13), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %222 = logical_or(%195, %196) /* ty=Tensor[(9, 14, 6), bool] */;
  %223 = sinh(%201) /* ty=Tensor[(180), float64] */;
  %224 = logical_or(%202, %203) /* ty=Tensor[(9, 14, 13), bool] */;
  %225 = %212.1;
  %226 = less(%220, %221) /* ty=Tensor[(9, 14, 13), bool] */;
  (meta[relay.Constant][16] /* ty=Tensor[(968, 1), int64] */, %222, %223, %224, %225, %var_3515, meta[relay.Constant][17] /* ty=Tensor[(480), int16] */, %var_3517, %226)
}

def @func_4016(%var_4008: Tensor[(1, 252), bool]) -> (Tensor[(13, 6, 8), float32], Tensor[(7, 4, 9), bool], Tensor[(1, 252), bool]) {
  %227 = @func_3590() /* ty=(Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float64]) */;
  %228 = cast(%var_4008, dtype="bool") /* ty=Tensor[(1, 252), bool] */;
  %229 = cast(%var_4008, dtype="bool") /* ty=Tensor[(1, 252), bool] */;
  %230 = reshape(%228, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), bool] */;
  %231 = reshape(%229, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), bool] */;
  %232 = @func_3377(%230, %231) /* ty=(Tensor[(7, 4, 9), bool],) */;
  %233 = %227.1;
  %234 = %232.0;
  (%233, %234, %var_4008)
}

def @func_5779(%var_5720: Tensor[(2, 12, 16), uint32], %var_5721: Tensor[(2, 12, 16), uint32], %var_5731: Tensor[(2, 12, 16), uint32]) -> (Tensor[(7, 12, 9), int32], Tensor[(1, 756), int32], Tensor[(13, 6, 8), float64], Tensor[(9072, 1), float32], Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), float32]) {
  %235 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 756), int32] */, dtype="int32") /* ty=Tensor[(1, 756), int32] */;
  %236 = reshape(%235, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), int32] */;
  %237 = @func_607(%236) /* ty=(Tensor[(7, 12, 9), int32],) */;
  %238 = cast(meta[relay.Constant][19] /* ty=Tensor[(9072, 1), float32] */, dtype="float32") /* ty=Tensor[(9072, 1), float32] */;
  %239 = reshape(%238, newshape=[9072]) /* ty=Tensor[(9072), float32] */;
  %240 = @func_4624(%239) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(7, 1296), bool], Tensor[(9072), float32]) */;
  %241 = cast(%var_5721, dtype="uint32") /* ty=Tensor[(2, 12, 16), uint32] */;
  %242 = shape_of(%var_5720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%var_5720, dtype="uint32") /* ty=Tensor[(2, 12, 16), uint32] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %245 = maximum(%243, %244) /* ty=Tensor[(2, 12, 16), uint32] */;
  %246 = cast(%var_5731, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %247 = shape_of(%245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%245, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %250 = cast(%var_5731, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %251 = shape_of(%var_5720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(%var_5720, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %254 = logical_and(%252, %253) /* ty=Tensor[(2, 12, 16), bool] */;
  %255 = cast(%254, dtype="float32") /* ty=Tensor[(2, 12, 16), float32] */;
  %256 = %237.0;
  %257 = %240.0;
  %258 = less(%248, %249) /* ty=Tensor[(2, 12, 16), bool] */;
  %259 = acos(%255) /* ty=Tensor[(2, 12, 16), float32] */;
  (%256, meta[relay.Constant][18] /* ty=Tensor[(1, 756), int32] */, %257, meta[relay.Constant][19] /* ty=Tensor[(9072, 1), float32] */, %258, %259)
}

def @func_4183(%var_4151: Tensor[(14, 4), uint8]) -> (Tensor[(7, 15, 8), uint8], Tensor[(14, 4), uint8], Tensor[(13, 6, 8), bool], Tensor[(12, 12, 9), float32], Tensor[(2520), float64]) {
  %260 = cast(%var_4151, dtype="uint8") /* ty=Tensor[(14, 4), uint8] */;
  %261 = reshape(%260, newshape=[7, 1, 8]) /* ty=Tensor[(7, 1, 8), uint8] */;
  %262 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %263 = %262.0;
  %264 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %265 = %264.0;
  %266 = cast(%265, dtype="bool") /* ty=Tensor[(13, 6, 8), bool] */;
  %267 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%263, dtype="bool") /* ty=Tensor[(13, 6, 8), bool] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %270 = cast(meta[relay.Constant][20] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %271 = reshape(%270, newshape=[2520]) /* ty=Tensor[(2520), float64] */;
  %272 = @func_1593(%271) /* ty=(Tensor[(11, 2, 15), int8], Tensor[(11, 2, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(180), float64], Tensor[(2520), float64], Tensor[(968), int64], Tensor[(11, 11, 8), int64], Tensor[(12, 12, 9), float32], Tensor[(1296), float32]) */;
  %273 = @func_1818(%261) /* ty=Tensor[(7, 15, 8), uint8] */;
  %274 = logical_or(%268, %269) /* ty=Tensor[(13, 6, 8), bool] */;
  %275 = %272.7;
  (%273, %var_4151, %274, %275, meta[relay.Constant][20] /* ty=Tensor[(2520), float64] */)
}

def @func_1818(%var_1811: Tensor[(7, 1, 8), uint8]) -> Tensor[(7, 15, 8), uint8] {
  %276 = cast(%var_1811, dtype="uint8") /* ty=Tensor[(7, 1, 8), uint8] */;
  %277 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 15, 8), uint8] */, dtype="uint8") /* ty=Tensor[(7, 15, 8), uint8] */;
  bitwise_or(%276, %277) /* ty=Tensor[(7, 15, 8), uint8] */
}

def @func_5071(%var_5064: Tensor[(968), int64], %var_5067: Tensor[(968), int64]) -> (Tensor[(13, 6, 8), float64], Tensor[(14, 12, 15), bool], Tensor[(180), float64], Tensor[(2520), float64], Tensor[(968), int16]) {
  %278 = cast(meta[relay.Constant][22] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %279 = cast(meta[relay.Constant][23] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %280 = cast(%var_5064, dtype="int64") /* ty=Tensor[(968), int64] */;
  %281 = reshape(%278, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
  %282 = reshape(%279, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
  %283 = reshape(%280, newshape=[968]) /* ty=Tensor[(968), int64] */;
  %284 = @func_559(%281, %282, %283) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
  %285 = cast(%var_5067, dtype="int16") /* ty=Tensor[(968), int16] */;
  %286 = shape_of(%var_5064, dtype="int32") /* ty=Tensor[(1), int32] */;
  %287 = cast(%var_5064, dtype="int16") /* ty=Tensor[(968), int16] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?), int16] */;
  %289 = @func_4904() /* ty=Tensor[(13, 6, 8), float64] */;
  %290 = %284.1;
  %291 = bitwise_or(%287, %288) /* ty=Tensor[(968), int16] */;
  (%289, %290, meta[relay.Constant][22] /* ty=Tensor[(180), float64] */, meta[relay.Constant][23] /* ty=Tensor[(2520), float64] */, %291)
}

def @func_3120() -> (Tensor[(13, 6, 8), float64],) {
  %292 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %293 = %292.0;
  (%293,)
}

def @main() -> (Tensor[(?, 14, 13), uint16],) {
  %294 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 14, 13), float32] */, dtype="float32") /* ty=Tensor[(1, 14, 13), float32] */;
  %295 = acos(%294) /* ty=Tensor[(1, 14, 13), float32] */;
  %296 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 14, 13), float32] */, dtype="float64") /* ty=Tensor[(1, 14, 13), float64] */;
  %297 = exp(%296) /* ty=Tensor[(1, 14, 13), float64] */;
  %298 = cast(%297, dtype="uint16") /* ty=Tensor[(1, 14, 13), uint16] */;
  %299 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%295, dtype="uint16") /* ty=Tensor[(1, 14, 13), uint16] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %302 = bitwise_or(%300, %301) /* ty=Tensor[(?, 14, 13), uint16] */;
  (%302,)
}

def @func_5929() -> (Tensor[(13, 6, 8), float32],) {
  %303 = @func_5448() /* ty=(Tensor[(13, 6, 8), float32],) */;
  %304 = %303.0;
  (%304,)
}

def @func_3780(%var_3765: Tensor[(13, 6, 8), float64]) -> Tensor[(13, 6, 8), int8] {
  %305 = @func_3267() /* ty=Tensor[(13, 6, 8), float64] */;
  %306 = cast(%var_3765, dtype="int8") /* ty=Tensor[(13, 6, 8), int8] */;
  %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%305, dtype="int8") /* ty=Tensor[(13, 6, 8), int8] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  minimum(%308, %309) /* ty=Tensor[(13, 6, 8), int8] */
}

def @func_5857() -> (Tensor[(13, 6, 8), float64],) {
  %310 = @func_5097() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %311 = %310.0;
  (%311,)
}

def @func_2804() -> (Tensor[(13, 6, 8), float64],) {
  %312 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 6, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
  %313 = erf(%312) /* ty=Tensor[(13, 6, 8), float64] */;
  (%313,)
}

def @func_3328(%var_3270: Tensor[(10, 13, 5), float32], %var_3303: Tensor[(1320), float64], %var_3312: Tensor[(1260, 2), float64], %var_3313: Tensor[(484, 2), int64]) -> (Tensor[(13, 6, 8), float64], Tensor[(10, 13, 5), uint64], Tensor[(10, 12, 11), uint64], Tensor[(1320), float64], Tensor[(14, 12, 15), bool], Tensor[(180, 1), float64], Tensor[(1260, 2), float64], Tensor[(484, 2), int64]) {
  %314 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %315 = cast(%var_3270, dtype="float32") /* ty=Tensor[(10, 13, 5), float32] */;
  %316 = asin(%315) /* ty=Tensor[(10, 13, 5), float32] */;
  %317 = cast(%316, dtype="float64") /* ty=Tensor[(10, 13, 5), float64] */;
  %318 = acos(%317) /* ty=Tensor[(10, 13, 5), float64] */;
  %319 = cast(%316, dtype="uint64") /* ty=Tensor[(10, 13, 5), uint64] */;
  %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%318, dtype="uint64") /* ty=Tensor[(10, 13, 5), uint64] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %323 = cast(%var_3303, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %324 = reshape(%323, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), float64] */;
  %325 = cast(meta[relay.Constant][26] /* ty=Tensor[(180, 1), float64] */, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %326 = cast(%var_3312, dtype="float64") /* ty=Tensor[(1260, 2), float64] */;
  %327 = cast(%var_3313, dtype="int64") /* ty=Tensor[(484, 2), int64] */;
  %328 = reshape(%325, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
  %329 = reshape(%326, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
  %330 = reshape(%327, newshape=[968]) /* ty=Tensor[(968), int64] */;
  %331 = @func_559(%328, %329, %330) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
  %332 = %314.0;
  %333 = logical_xor(%321, %322) /* ty=Tensor[(10, 13, 5), uint64] */;
  %334 = @func_701(%324) /* ty=Tensor[(10, 12, 11), uint64] */;
  %335 = %331.1;
  (%332, %333, %334, %var_3303, %335, meta[relay.Constant][26] /* ty=Tensor[(180, 1), float64] */, %var_3312, %var_3313)
}

def @func_4497() -> Tensor[(13, 6, 8), float64] {
  @func_3267() /* ty=Tensor[(13, 6, 8), float64] */
}

def @func_1110(%var_1003: Tensor[(4, 1, 16), float32], %var_1008: Tensor[(1320), float64], %var_1103: Tensor[(728), float64]) -> (Tensor[(1320), float64], Tensor[(7, 12, 9), int32], Tensor[(756), int32], Tensor[(7, 12, 9), int32], Tensor[(7, 12, 9), int32], Tensor[(1, 12, 15), float64], Tensor[(180), float64], Tensor[(2520), float64], Tensor[(968), int64], Tensor[(4, ?, 16), float64], Tensor[(968), int8], Tensor[(756), float64], Tensor[(104), float64], Tensor[(728), float64], Tensor[(10, 12, 11), float32]) {
  %336 = cast(meta[relay.Constant][27] /* ty=Tensor[(756), int32] */, dtype="int32") /* ty=Tensor[(756), int32] */;
  %337 = reshape(%336, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), int32] */;
  %338 = @func_607(%337) /* ty=(Tensor[(7, 12, 9), int32],) */;
  %339 = cast(meta[relay.Constant][27] /* ty=Tensor[(756), int32] */, dtype="int32") /* ty=Tensor[(756), int32] */;
  %340 = reshape(%339, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), int32] */;
  %341 = @func_607(%340) /* ty=(Tensor[(7, 12, 9), int32],) */;
  %342 = cast(meta[relay.Constant][27] /* ty=Tensor[(756), int32] */, dtype="int32") /* ty=Tensor[(756), int32] */;
  %343 = reshape(%342, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), int32] */;
  %344 = @func_607(%343) /* ty=(Tensor[(7, 12, 9), int32],) */;
  %345 = cast(meta[relay.Constant][28] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %346 = cast(meta[relay.Constant][29] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %347 = cast(meta[relay.Constant][30] /* ty=Tensor[(968), int64] */, dtype="int64") /* ty=Tensor[(968), int64] */;
  %348 = reshape(%345, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
  %349 = reshape(%346, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
  %350 = reshape(%347, newshape=[968]) /* ty=Tensor[(968), int64] */;
  %351 = @func_559(%348, %349, %350) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
  %352 = cast(%var_1003, dtype="float32") /* ty=Tensor[(4, 1, 16), float32] */;
  %353 = sin(%352) /* ty=Tensor[(4, 1, 16), float32] */;
  %354 = cast(%var_1003, dtype="float64") /* ty=Tensor[(4, 1, 16), float64] */;
  %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%353, dtype="float64") /* ty=Tensor[(4, 1, 16), float64] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %358 = mod(%356, %357) /* ty=Tensor[(4, ?, 16), float64] */;
  %359 = cast(%var_1003, dtype="uint32") /* ty=Tensor[(4, 1, 16), uint32] */;
  %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%358, dtype="uint32") /* ty=Tensor[(4, ?, 16), uint32] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %363 = bitwise_xor(%361, %362) /* ty=Tensor[(4, ?, 16), uint32] */;
  %364 = cast(%358, dtype="float64") /* ty=Tensor[(4, ?, 16), float64] */;
  %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%363, dtype="float64") /* ty=Tensor[(4, ?, 16), float64] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %368 = cast(meta[relay.Constant][28] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %369 = cast(meta[relay.Constant][29] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %370 = cast(meta[relay.Constant][30] /* ty=Tensor[(968), int64] */, dtype="int64") /* ty=Tensor[(968), int64] */;
  %371 = reshape(%368, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
  %372 = reshape(%369, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
  %373 = reshape(%370, newshape=[968]) /* ty=Tensor[(968), int64] */;
  %374 = @func_559(%371, %372, %373) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
  %375 = cast(meta[relay.Constant][31] /* ty=Tensor[(104), float64] */, dtype="float64") /* ty=Tensor[(104), float64] */;
  %376 = cast(%var_1103, dtype="float64") /* ty=Tensor[(728), float64] */;
  %377 = cast(meta[relay.Constant][29] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %378 = reshape(%375, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %379 = reshape(%376, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), float64] */;
  %380 = reshape(%377, newshape=[1, 2520]) /* ty=Tensor[(1, 2520), float64] */;
  %381 = @func_750(%378, %379, %380) /* ty=(Tensor[(7, 8, 13), float64], Tensor[(7, 12, 9), int32], Tensor[(756), float32], Tensor[(968), int8], Tensor[(180), float64], Tensor[(1, 2520), float64], Tensor[(968), int64], Tensor[(756), float64], Tensor[(7, 12, 9), int32]) */;
  %382 = cast(%var_1008, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %383 = reshape(%382, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), float64] */;
  %384 = @func_701(%383) /* ty=Tensor[(10, 12, 11), uint64] */;
  %385 = cast(%384, dtype="float32") /* ty=Tensor[(10, 12, 11), float32] */;
  %386 = cosh(%385) /* ty=Tensor[(10, 12, 11), float32] */;
  %387 = cast(%386, dtype="float32") /* ty=Tensor[(10, 12, 11), float32] */;
  %388 = %338.0;
  %389 = %341.0;
  %390 = %344.0;
  %391 = %351.0;
  %392 = divide(%366, %367) /* ty=Tensor[(4, ?, 16), float64] */;
  %393 = %374.2;
  %394 = %381.7;
  %395 = log2(%387) /* ty=Tensor[(10, 12, 11), float32] */;
  (%var_1008, %388, meta[relay.Constant][27] /* ty=Tensor[(756), int32] */, %389, %390, %391, meta[relay.Constant][28] /* ty=Tensor[(180), float64] */, meta[relay.Constant][29] /* ty=Tensor[(2520), float64] */, meta[relay.Constant][30] /* ty=Tensor[(968), int64] */, %392, %393, %394, meta[relay.Constant][31] /* ty=Tensor[(104), float64] */, %var_1103, %395)
}

def @func_5912(%var_5880: Tensor[(252), bool], %var_5882: Tensor[(7, 4, 9), bool]) -> (Tensor[(13, 6, 8), float64], Tensor[(7, 4, 9), uint64], Tensor[(7, 4, 9), bool]) {
  %396 = @func_2827() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %397 = cast(%var_5880, dtype="bool") /* ty=Tensor[(252), bool] */;
  %398 = cast(%var_5880, dtype="bool") /* ty=Tensor[(252), bool] */;
  %399 = reshape(%397, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), bool] */;
  %400 = reshape(%398, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), bool] */;
  %401 = @func_3377(%399, %400) /* ty=(Tensor[(7, 4, 9), bool],) */;
  %402 = %401.0;
  %403 = cast(%var_5882, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%402, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %407 = greater(%405, %406) /* ty=Tensor[(7, 4, 9), bool] */;
  %408 = cast(%var_5880, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %409 = shape_of(%407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %410 = cast(%407, dtype="uint64") /* ty=Tensor[(7, 4, 9), uint64] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %412 = cast(%407, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
  %413 = sin(%412) /* ty=Tensor[(7, 4, 9), float32] */;
  %414 = cast(%var_5880, dtype="bool") /* ty=Tensor[(252), bool] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %418 = %396.0;
  %419 = minimum(%410, %411) /* ty=Tensor[(7, 4, 9), uint64] */;
  %420 = greater_equal(%416, %417) /* ty=Tensor[(7, 4, 9), bool] */;
  (%418, %419, %420)
}

def @func_304(%var_300: Tensor[(12, 12, 9), float32]) -> Tensor[(12, 12, 9), float32] {
  %421 = cast(-7.6959f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %422 = cast(%var_300, dtype="float32") /* ty=Tensor[(12, 12, 9), float32] */;
  floor_divide(%421, %422) /* ty=Tensor[(12, 12, 9), float32] */
}

def @func_4377() -> (Tensor[(13, 6, 8), float32],) {
  %423 = @func_4310() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %424 = %423.0;
  %425 = cast(%424, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
  %426 = rsqrt(%425) /* ty=Tensor[(13, 6, 8), float32] */;
  (%426,)
}

def @func_4099() -> (Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float32]) {
  %427 = @func_3396() /* ty=Tensor[(13, 6, 8), float32] */;
  %428 = @func_3396() /* ty=Tensor[(13, 6, 8), float32] */;
  (%427, %428)
}

def @func_4624(%var_4622: Tensor[(9072), float32]) -> (Tensor[(13, 6, 8), float64], Tensor[(7, 1296), bool], Tensor[(9072), float32]) {
  %429 = cast(%var_4622, dtype="float32") /* ty=Tensor[(9072), float32] */;
  %430 = reshape(%429, newshape=[7, 1296]) /* ty=Tensor[(7, 1296), float32] */;
  %431 = @func_3443(%430) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(12, 12, 9), float32], Tensor[(7, 1296), bool]) */;
  %432 = @func_4410() /* ty=Tensor[(13, 6, 8), float64] */;
  %433 = %431.2;
  (%432, %433, %var_4622)
}

def @func_6162(%var_6152: Tensor[(56), uint8]) -> (Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), bool], Tensor[(56), uint8]) {
  %434 = @func_5097() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %435 = cast(%var_6152, dtype="uint8") /* ty=Tensor[(56), uint8] */;
  %436 = reshape(%435, newshape=[14, 4]) /* ty=Tensor[(14, 4), uint8] */;
  %437 = @func_4183(%436) /* ty=(Tensor[(7, 15, 8), uint8], Tensor[(14, 4), uint8], Tensor[(13, 6, 8), bool], Tensor[(12, 12, 9), float32], Tensor[(2520), float64]) */;
  %438 = %434.0;
  %439 = %437.2;
  (%438, %439, %var_6152)
}

def @func_5617(%var_5600: Tensor[(13, 6, 8), float64]) -> (Tensor[(13, 6, 8), uint16], Tensor[(13, 6, 8), float32]) {
  %440 = @func_4497() /* ty=Tensor[(13, 6, 8), float64] */;
  %441 = cast(%var_5600, dtype="uint16") /* ty=Tensor[(13, 6, 8), uint16] */;
  %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%440, dtype="uint16") /* ty=Tensor[(13, 6, 8), uint16] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %445 = bitwise_or(%443, %444) /* ty=Tensor[(13, 6, 8), uint16] */;
  %446 = @func_4252() /* ty=Tensor[(13, 6, 8), float32] */;
  (%445, %446)
}

def @func_511(%var_506: Tensor[(11, 11, 8), int64]) -> Tensor[(11, 11, 8), int64] {
  %447 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 11, 8), int64] */, dtype="int64") /* ty=Tensor[(11, 11, 8), int64] */;
  %448 = shape_of(%var_506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%var_506, dtype="int64") /* ty=Tensor[(11, 11, 8), int64] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%449, %450) /* ty=Tensor[(11, 11, 8), int64] */
}

def @func_559(%var_517: Tensor[(1, 12, 15), float64], %var_521: Tensor[(14, 12, 15), float64], %var_531: Tensor[(968), int64]) -> (Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) {
  %451 = cast(%var_517, dtype="float64") /* ty=Tensor[(1, 12, 15), float64] */;
  %452 = cast(%var_517, dtype="bool") /* ty=Tensor[(1, 12, 15), bool] */;
  %453 = cast(%var_521, dtype="bool") /* ty=Tensor[(14, 12, 15), bool] */;
  %454 = cast(%var_531, dtype="int64") /* ty=Tensor[(968), int64] */;
  %455 = reshape(%454, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), int64] */;
  %456 = @func_511(%455) /* ty=Tensor[(11, 11, 8), int64] */;
  %457 = cast(%456, dtype="int8") /* ty=Tensor[(11, 11, 8), int8] */;
  %458 = shape_of(%var_531, dtype="int32") /* ty=Tensor[(1), int32] */;
  %459 = cast(%var_531, dtype="int8") /* ty=Tensor[(968), int8] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?), int8] */;
  %461 = acos(%451) /* ty=Tensor[(1, 12, 15), float64] */;
  %462 = greater(%452, %453) /* ty=Tensor[(14, 12, 15), bool] */;
  %463 = bitwise_xor(%459, %460) /* ty=Tensor[(968), int8] */;
  (%461, %462, %463)
}

def @func_2954(%var_2952: Tensor[(1, 968), int64]) -> (Tensor[(13, 6, 8), float64], Tensor[(968), int8], Tensor[(180), float64], Tensor[(630, 4), float64], Tensor[(1, 968), int64]) {
  %464 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %465 = cast(meta[relay.Constant][33] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %466 = cast(meta[relay.Constant][34] /* ty=Tensor[(630, 4), float64] */, dtype="float64") /* ty=Tensor[(630, 4), float64] */;
  %467 = cast(%var_2952, dtype="int64") /* ty=Tensor[(1, 968), int64] */;
  %468 = reshape(%465, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
  %469 = reshape(%466, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
  %470 = reshape(%467, newshape=[968]) /* ty=Tensor[(968), int64] */;
  %471 = @func_559(%468, %469, %470) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
  %472 = %464.0;
  %473 = %471.2;
  (%472, %473, meta[relay.Constant][33] /* ty=Tensor[(180), float64] */, meta[relay.Constant][34] /* ty=Tensor[(630, 4), float64] */, %var_2952)
}

def @func_3443(%var_3431: Tensor[(7, 1296), float32]) -> (Tensor[(13, 6, 8), float64], Tensor[(12, 12, 9), float32], Tensor[(7, 1296), bool]) {
  %474 = @func_2827() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %475 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 1296), float32] */, dtype="float32") /* ty=Tensor[(1, 1296), float32] */;
  %476 = reshape(%475, newshape=[12, 12, 9]) /* ty=Tensor[(12, 12, 9), float32] */;
  %477 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 1296), float32] */, dtype="bool") /* ty=Tensor[(1, 1296), bool] */;
  %478 = cast(%var_3431, dtype="bool") /* ty=Tensor[(7, 1296), bool] */;
  %479 = %474.0;
  %480 = @func_304(%476) /* ty=Tensor[(12, 12, 9), float32] */;
  %481 = equal(%477, %478) /* ty=Tensor[(7, 1296), bool] */;
  (%479, %480, %481)
}

def @func_5802(%var_5797: Tensor[(15), uint16]) -> (Tensor[(13, 6, 8), float32], Tensor[(5, 3), bool], Tensor[(15), uint16]) {
  %482 = @func_4099() /* ty=(Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float32]) */;
  %483 = cast(%var_5797, dtype="uint16") /* ty=Tensor[(15), uint16] */;
  %484 = reshape(%483, newshape=[5, 3]) /* ty=Tensor[(5, 3), uint16] */;
  %485 = @func_2913(%484) /* ty=(Tensor[(5, 3), bool], Tensor[(13, 6, 8), float64]) */;
  %486 = %482.0;
  %487 = %485.0;
  (%486, %487, %var_5797)
}

def @func_3714(%var_3700: Tensor[(16, 3, 9), uint64], %var_3701: Tensor[(16, 3, 9), uint64]) -> (Tensor[(16, 3, 9), uint64], Tensor[(12, 7, 8), float32], Tensor[(672), float32]) {
  %488 = cast(%var_3701, dtype="uint64") /* ty=Tensor[(16, 3, 9), uint64] */;
  %489 = shape_of(%var_3700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%var_3700, dtype="uint64") /* ty=Tensor[(16, 3, 9), uint64] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %492 = cast(meta[relay.Constant][36] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %493 = reshape(%492, newshape=[12, 7, 8]) /* ty=Tensor[(12, 7, 8), float32] */;
  %494 = bitwise_or(%490, %491) /* ty=Tensor[(16, 3, 9), uint64] */;
  %495 = @func_2034(%493) /* ty=Tensor[(12, 7, 8), float32] */;
  (%494, %495, meta[relay.Constant][36] /* ty=Tensor[(672), float32] */)
}

def @func_4904() -> Tensor[(13, 6, 8), float64] {
  %496 = @func_3590() /* ty=(Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float64]) */;
  %497 = %496.0;
  %498 = cast(%497, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
  sinh(%498) /* ty=Tensor[(13, 6, 8), float64] */
}

def @func_5679() -> Tensor[(13, 6, 8), float64] {
  @func_4904() /* ty=Tensor[(13, 6, 8), float64] */
}

def @func_5221(%var_5188: Tensor[(14, 8, 5), int16], %var_5189: Tensor[(14, 8, 5), int16]) -> (Tensor[(14, 8, 5), float32], Tensor[(13, 6, 8), float32], Tensor[(14, 8, 5), float32]) {
  %499 = cast(%var_5189, dtype="float32") /* ty=Tensor[(14, 8, 5), float32] */;
  %500 = @func_4965() /* ty=(Tensor[(13, 6, 8), float32],) */;
  %501 = cast(%var_5189, dtype="int16") /* ty=Tensor[(14, 8, 5), int16] */;
  %502 = shape_of(%var_5188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%var_5188, dtype="int16") /* ty=Tensor[(14, 8, 5), int16] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %505 = bitwise_or(%503, %504) /* ty=Tensor[(14, 8, 5), int16] */;
  %506 = cast(%505, dtype="float64") /* ty=Tensor[(14, 8, 5), float64] */;
  %507 = exp(%506) /* ty=Tensor[(14, 8, 5), float64] */;
  %508 = cast(%507, dtype="float32") /* ty=Tensor[(14, 8, 5), float32] */;
  %509 = acos(%499) /* ty=Tensor[(14, 8, 5), float32] */;
  %510 = %500.0;
  %511 = erf(%508) /* ty=Tensor[(14, 8, 5), float32] */;
  (%509, %510, %511)
}

def @func_3590() -> (Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float64]) {
  %512 = @func_2827() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %513 = @func_3267() /* ty=Tensor[(13, 6, 8), float64] */;
  %514 = cast(%513, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
  %515 = %512.0;
  %516 = @func_3396() /* ty=Tensor[(13, 6, 8), float32] */;
  %517 = exp(%514) /* ty=Tensor[(13, 6, 8), float64] */;
  (%515, %516, %517)
}

def @func_4252() -> Tensor[(13, 6, 8), float32] {
  %518 = @func_4099() /* ty=(Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float32]) */;
  %518.1
}

def @func_2034(%var_2030: Tensor[(12, 7, 8), float32]) -> Tensor[(12, 7, 8), float32] {
  %519 = cast(%var_2030, dtype="float32") /* ty=Tensor[(12, 7, 8), float32] */;
  sin(%519) /* ty=Tensor[(12, 7, 8), float32] */
}

def @func_5143(%var_5129: Tensor[(15, 1, 3), float64]) -> (Tensor[(15, 1, 3), float64],) {
  %520 = cast(%var_5129, dtype="float64") /* ty=Tensor[(15, 1, 3), float64] */;
  %521 = log(%520) /* ty=Tensor[(15, 1, 3), float64] */;
  (%521,)
}

def @func_1593(%var_1581: Tensor[(2520), float64]) -> (Tensor[(11, 2, 15), int8], Tensor[(11, 2, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(180), float64], Tensor[(2520), float64], Tensor[(968), int64], Tensor[(11, 11, 8), int64], Tensor[(12, 12, 9), float32], Tensor[(1296), float32]) {
  %522 = cast(meta[relay.Constant][37] /* ty=Tensor[(11, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
  %523 = atanh(%522) /* ty=Tensor[(11, 2, 15), float64] */;
  %524 = cast(%523, dtype="int8") /* ty=Tensor[(11, 2, 15), int8] */;
  %525 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(11, 2, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(meta[relay.Constant][37] /* ty=Tensor[(11, 2, 15), float64] */, dtype="int8") /* ty=Tensor[(11, 2, 15), int8] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %528 = cast(%523, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
  %529 = asin(%528) /* ty=Tensor[(11, 2, 15), float64] */;
  %530 = cast(%529, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
  %531 = cast(meta[relay.Constant][38] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %532 = cast(%var_1581, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %533 = cast(meta[relay.Constant][39] /* ty=Tensor[(968), int64] */, dtype="int64") /* ty=Tensor[(968), int64] */;
  %534 = reshape(%531, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
  %535 = reshape(%532, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
  %536 = reshape(%533, newshape=[968]) /* ty=Tensor[(968), int64] */;
  %537 = @func_559(%534, %535, %536) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
  %538 = cast(meta[relay.Constant][39] /* ty=Tensor[(968), int64] */, dtype="int64") /* ty=Tensor[(968), int64] */;
  %539 = reshape(%538, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), int64] */;
  %540 = cast(meta[relay.Constant][40] /* ty=Tensor[(1296), float32] */, dtype="float32") /* ty=Tensor[(1296), float32] */;
  %541 = reshape(%540, newshape=[12, 12, 9]) /* ty=Tensor[(12, 12, 9), float32] */;
  %542 = minimum(%526, %527) /* ty=Tensor[(11, 2, 15), int8] */;
  %543 = erf(%530) /* ty=Tensor[(11, 2, 15), float64] */;
  %544 = %537.1;
  %545 = @func_511(%539) /* ty=Tensor[(11, 11, 8), int64] */;
  %546 = @func_304(%541) /* ty=Tensor[(12, 12, 9), float32] */;
  (%542, %543, %544, meta[relay.Constant][38] /* ty=Tensor[(180), float64] */, %var_1581, meta[relay.Constant][39] /* ty=Tensor[(968), int64] */, %545, %546, meta[relay.Constant][40] /* ty=Tensor[(1296), float32] */)
}

def @func_3801() -> Tensor[(13, 6, 8), float64] {
  %547 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %547.0
}

def @func_5448() -> (Tensor[(13, 6, 8), float32],) {
  %548 = @func_3396() /* ty=Tensor[(13, 6, 8), float32] */;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
  %550 = log(%549) /* ty=Tensor[(13, 6, 8), float32] */;
  (%550,)
}

def @func_3377(%var_3365: Tensor[(7, 4, 9), bool], %var_3366: Tensor[(7, 4, 9), bool]) -> (Tensor[(7, 4, 9), bool],) {
  %551 = cast(%var_3366, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %552 = shape_of(%var_3365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%var_3365, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %555 = logical_and(%553, %554) /* ty=Tensor[(7, 4, 9), bool] */;
  (%555,)
}

def @func_3951() -> Tensor[(13, 6, 8), float64] {
  %556 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %557 = %556.0;
  %558 = cast(%557, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
  %559 = log2(%558) /* ty=Tensor[(13, 6, 8), float32] */;
  %560 = cast(%557, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
  %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%559, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%562, %563) /* ty=Tensor[(13, 6, 8), float64] */
}

def @func_2462(%var_2412: int16, %var_2413: Tensor[(15, 4, 8), int16], %var_2434: Tensor[(880), float64], %var_2443: Tensor[(5, 11, 16), float64]) -> (Tensor[(15, 4, 8), int16], Tensor[(880), uint32], Tensor[(5, 11, 16), bool]) {
  %564 = cast(%var_2412, dtype="int16") /* ty=int16 */;
  %565 = cast(%var_2413, dtype="int16") /* ty=Tensor[(15, 4, 8), int16] */;
  %566 = cast(%var_2434, dtype="uint32") /* ty=Tensor[(880), uint32] */;
  %567 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(880), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %568 = cast(meta[relay.Constant][41] /* ty=Tensor[(880), float64] */, dtype="uint32") /* ty=Tensor[(880), uint32] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %570 = cast(meta[relay.Constant][41] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
  %571 = reshape(%570, newshape=[5, 11, 16]) /* ty=Tensor[(5, 11, 16), float64] */;
  %572 = @func_1476(%571) /* ty=(Tensor[(5, 11, 16), float64],) */;
  %573 = %572.0;
  %574 = cast(%var_2443, dtype="bool") /* ty=Tensor[(5, 11, 16), bool] */;
  %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%573, dtype="bool") /* ty=Tensor[(5, 11, 16), bool] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %578 = bitwise_and(%564, %565) /* ty=Tensor[(15, 4, 8), int16] */;
  %579 = left_shift(%568, %569) /* ty=Tensor[(880), uint32] */;
  %580 = greater_equal(%576, %577) /* ty=Tensor[(5, 11, 16), bool] */;
  (%578, %579, %580)
}

def @func_4126(%var_4120: Tensor[(104), float64]) -> (Tensor[(13, 6, 8), float32], Tensor[(756), float32], Tensor[(104), float64], Tensor[(728), float64], Tensor[(2520), float64]) {
  %581 = @func_4099() /* ty=(Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float32]) */;
  %582 = cast(%var_4120, dtype="float64") /* ty=Tensor[(104), float64] */;
  %583 = cast(meta[relay.Constant][42] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %584 = cast(meta[relay.Constant][43] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %585 = reshape(%582, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %586 = reshape(%583, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), float64] */;
  %587 = reshape(%584, newshape=[1, 2520]) /* ty=Tensor[(1, 2520), float64] */;
  %588 = @func_750(%585, %586, %587) /* ty=(Tensor[(7, 8, 13), float64], Tensor[(7, 12, 9), int32], Tensor[(756), float32], Tensor[(968), int8], Tensor[(180), float64], Tensor[(1, 2520), float64], Tensor[(968), int64], Tensor[(756), float64], Tensor[(7, 12, 9), int32]) */;
  %589 = %581.0;
  %590 = %588.2;
  (%589, %590, %var_4120, meta[relay.Constant][42] /* ty=Tensor[(728), float64] */, meta[relay.Constant][43] /* ty=Tensor[(2520), float64] */)
}

def @func_4410() -> Tensor[(13, 6, 8), float64] {
  @func_3801() /* ty=Tensor[(13, 6, 8), float64] */
}

def @func_1409(%var_1375: Tensor[(14, 5, 15), float64], %var_1390: Tensor[(6, 30), float64]) -> (Tensor[(14, 12, 15), bool], Tensor[(6, 30), float64], Tensor[(630, 4), float64], Tensor[(968), int64], Tensor[(14, 5, 15), uint32]) {
  %591 = cast(%var_1390, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %592 = cast(meta[relay.Constant][44] /* ty=Tensor[(630, 4), float64] */, dtype="float64") /* ty=Tensor[(630, 4), float64] */;
  %593 = cast(meta[relay.Constant][45] /* ty=Tensor[(968), int64] */, dtype="int64") /* ty=Tensor[(968), int64] */;
  %594 = reshape(%591, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
  %595 = reshape(%592, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
  %596 = reshape(%593, newshape=[968]) /* ty=Tensor[(968), int64] */;
  %597 = @func_559(%594, %595, %596) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
  %598 = cast(%var_1375, dtype="float64") /* ty=Tensor[(14, 5, 15), float64] */;
  %599 = sinh(%598) /* ty=Tensor[(14, 5, 15), float64] */;
  %600 = cast(%var_1375, dtype="uint32") /* ty=Tensor[(14, 5, 15), uint32] */;
  %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%599, dtype="uint32") /* ty=Tensor[(14, 5, 15), uint32] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %604 = %597.1;
  %605 = maximum(%602, %603) /* ty=Tensor[(14, 5, 15), uint32] */;
  (%604, %var_1390, meta[relay.Constant][44] /* ty=Tensor[(630, 4), float64] */, meta[relay.Constant][45] /* ty=Tensor[(968), int64] */, %605)
}

def @func_750(%var_715: Tensor[(1, 8, 13), float64], %var_716: Tensor[(7, 8, 13), float64], %var_733: Tensor[(1, 2520), float64]) -> (Tensor[(7, 8, 13), float64], Tensor[(7, 12, 9), int32], Tensor[(756), float32], Tensor[(968), int8], Tensor[(180), float64], Tensor[(1, 2520), float64], Tensor[(968), int64], Tensor[(756), float64], Tensor[(7, 12, 9), int32]) {
  %606 = cast(%var_715, dtype="float64") /* ty=Tensor[(1, 8, 13), float64] */;
  %607 = cast(%var_716, dtype="float64") /* ty=Tensor[(7, 8, 13), float64] */;
  %608 = cast(meta[relay.Constant][46] /* ty=Tensor[(756), int32] */, dtype="int32") /* ty=Tensor[(756), int32] */;
  %609 = reshape(%608, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), int32] */;
  %610 = @func_607(%609) /* ty=(Tensor[(7, 12, 9), int32],) */;
  %611 = cast(meta[relay.Constant][46] /* ty=Tensor[(756), int32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %612 = cast(meta[relay.Constant][47] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %613 = cast(%var_733, dtype="float64") /* ty=Tensor[(1, 2520), float64] */;
  %614 = cast(meta[relay.Constant][48] /* ty=Tensor[(968), int64] */, dtype="int64") /* ty=Tensor[(968), int64] */;
  %615 = reshape(%612, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
  %616 = reshape(%613, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
  %617 = reshape(%614, newshape=[968]) /* ty=Tensor[(968), int64] */;
  %618 = @func_559(%615, %616, %617) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
  %619 = cast(meta[relay.Constant][46] /* ty=Tensor[(756), int32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %620 = sin(%619) /* ty=Tensor[(756), float32] */;
  %621 = cast(%620, dtype="float64") /* ty=Tensor[(756), float64] */;
  %622 = cast(meta[relay.Constant][46] /* ty=Tensor[(756), int32] */, dtype="int32") /* ty=Tensor[(756), int32] */;
  %623 = reshape(%622, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), int32] */;
  %624 = @func_607(%623) /* ty=(Tensor[(7, 12, 9), int32],) */;
  %625 = power(%606, %607) /* ty=Tensor[(7, 8, 13), float64] */;
  %626 = %610.0;
  %627 = exp(%611) /* ty=Tensor[(756), float32] */;
  %628 = %618.2;
  %629 = acosh(%621) /* ty=Tensor[(756), float64] */;
  %630 = %624.0;
  (%625, %626, %627, %628, meta[relay.Constant][47] /* ty=Tensor[(180), float64] */, %var_733, meta[relay.Constant][48] /* ty=Tensor[(968), int64] */, %629, %630)
}

def @func_5376(%var_5324: Tensor[(5, 4, 4), float32]) -> (Tensor[(13, 6, 8), float32], Tensor[(5, 4, 4), float64]) {
  %631 = @func_4377() /* ty=(Tensor[(13, 6, 8), float32],) */;
  %632 = cast(%var_5324, dtype="float32") /* ty=Tensor[(5, 4, 4), float32] */;
  %633 = rsqrt(%632) /* ty=Tensor[(5, 4, 4), float32] */;
  %634 = cast(%var_5324, dtype="bool") /* ty=Tensor[(5, 4, 4), bool] */;
  %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%633, dtype="bool") /* ty=Tensor[(5, 4, 4), bool] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %638 = equal(%636, %637) /* ty=Tensor[(5, 4, 4), bool] */;
  %639 = cast(%638, dtype="float64") /* ty=Tensor[(5, 4, 4), float64] */;
  %640 = %631.0;
  %641 = sqrt(%639) /* ty=Tensor[(5, 4, 4), float64] */;
  (%640, %641)
}

def @func_5714(%var_5710: Tensor[(9072), float32]) -> (Tensor[(13, 6, 8), float32], Tensor[(7, 1296), bool], Tensor[(9072), float32]) {
  %642 = @func_3627() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %643 = %642.0;
  %644 = cast(%643, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
  %645 = tan(%644) /* ty=Tensor[(13, 6, 8), float64] */;
  %646 = cast(%645, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
  %647 = cast(%var_5710, dtype="float32") /* ty=Tensor[(9072), float32] */;
  %648 = reshape(%647, newshape=[9072]) /* ty=Tensor[(9072), float32] */;
  %649 = @func_4624(%648) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(7, 1296), bool], Tensor[(9072), float32]) */;
  %650 = atan(%646) /* ty=Tensor[(13, 6, 8), float32] */;
  %651 = %649.1;
  (%650, %651, %var_5710)
}

def @func_4753(%var_4721: Tensor[(180), float64], %var_4722: Tensor[(1, 2520), float64], %var_4723: Tensor[(968), int64], %var_4741: Tensor[(650), float32], %var_4749: Tensor[(968), int64]) -> (Tensor[(13, 6, 8), float32], Tensor[(1, 12, 15), float64], Tensor[(180), float64], Tensor[(1, 2520), float64], Tensor[(7, 4, 9), bool], Tensor[(6, 42), bool], Tensor[(14, 12, 15), bool], Tensor[(650), float32], Tensor[(1320), float64], Tensor[(968), uint8]) {
  %652 = @func_4099() /* ty=(Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float32]) */;
  %653 = cast(%var_4721, dtype="float64") /* ty=Tensor[(180), float64] */;
  %654 = cast(%var_4722, dtype="float64") /* ty=Tensor[(1, 2520), float64] */;
  %655 = cast(%var_4723, dtype="int64") /* ty=Tensor[(968), int64] */;
  %656 = reshape(%653, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
  %657 = reshape(%654, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
  %658 = reshape(%655, newshape=[968]) /* ty=Tensor[(968), int64] */;
  %659 = @func_559(%656, %657, %658) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
  %660 = cast(meta[relay.Constant][49] /* ty=Tensor[(6, 42), bool] */, dtype="bool") /* ty=Tensor[(6, 42), bool] */;
  %661 = reshape(%660, newshape=[1, 252]) /* ty=Tensor[(1, 252), bool] */;
  %662 = @func_4016(%661) /* ty=(Tensor[(13, 6, 8), float32], Tensor[(7, 4, 9), bool], Tensor[(1, 252), bool]) */;
  %663 = cast(%var_4741, dtype="float32") /* ty=Tensor[(650), float32] */;
  %664 = cast(meta[relay.Constant][50] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %665 = cast(%var_4722, dtype="float64") /* ty=Tensor[(1, 2520), float64] */;
  %666 = cast(%var_4723, dtype="int64") /* ty=Tensor[(968), int64] */;
  %667 = reshape(%663, newshape=[10, 13, 5]) /* ty=Tensor[(10, 13, 5), float32] */;
  %668 = reshape(%664, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %669 = reshape(%665, newshape=[1260, 2]) /* ty=Tensor[(1260, 2), float64] */;
  %670 = reshape(%666, newshape=[484, 2]) /* ty=Tensor[(484, 2), int64] */;
  %671 = @func_3328(%667, %668, %669, %670) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(10, 13, 5), uint64], Tensor[(10, 12, 11), uint64], Tensor[(1320), float64], Tensor[(14, 12, 15), bool], Tensor[(180, 1), float64], Tensor[(1260, 2), float64], Tensor[(484, 2), int64]) */;
  %672 = cast(%var_4749, dtype="uint8") /* ty=Tensor[(968), uint8] */;
  %673 = shape_of(%var_4723, dtype="int32") /* ty=Tensor[(1), int32] */;
  %674 = cast(%var_4723, dtype="uint8") /* ty=Tensor[(968), uint8] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %676 = %652.1;
  %677 = %659.0;
  %678 = %662.1;
  %679 = %671.4;
  %680 = add(%674, %675) /* ty=Tensor[(968), uint8] */;
  (%676, %677, %var_4721, %var_4722, %678, meta[relay.Constant][49] /* ty=Tensor[(6, 42), bool] */, %679, %var_4741, meta[relay.Constant][50] /* ty=Tensor[(1320), float64] */, %680)
}

def @func_4466() -> (Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32]) {
  %681 = @func_3590() /* ty=(Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float64]) */;
  %682 = %681.2;
  %683 = @func_4252() /* ty=Tensor[(13, 6, 8), float32] */;
  (%682, %683)
}

def @func_4531() -> (Tensor[(13, 6, 8), float32],) {
  %684 = @func_4377() /* ty=(Tensor[(13, 6, 8), float32],) */;
  %685 = %684.0;
  (%685,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4099() -> (Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float32]) {
  %0 = @func_3396() /* ty=Tensor[(13, 6, 8), float32] */;
  %1 = @func_3396() /* ty=Tensor[(13, 6, 8), float32] */;
  (%0, %1)
}

def @func_3951() -> Tensor[(13, 6, 8), float64] {
  %2 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %3 = %2.0;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
  %5 = log2(%4) /* ty=Tensor[(13, 6, 8), float32] */;
  %6 = cast(%3, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
  %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%5, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%8, %9) /* ty=Tensor[(13, 6, 8), float64] */
}

def @func_4467() -> (Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32]) {
  %13 = fn () -> (Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32]) {
    %10 = @func_3590() /* ty=(Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float64]) */;
    %11 = %10.2;
    %12 = @func_4252() /* ty=Tensor[(13, 6, 8), float32] */;
    (%11, %12)
  };
  %13() /* ty=(Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32]) */
}

def @func_1479(%var_1477: Tensor[(5, 11, 16), float64]) -> (Tensor[(5, 11, 16), float64],) {
  @func_1476(%var_1477) /* ty=(Tensor[(5, 11, 16), float64],) */
}

def @func_5221(%var_5188: Tensor[(14, 8, 5), int16], %var_5189: Tensor[(14, 8, 5), int16]) -> (Tensor[(14, 8, 5), float32], Tensor[(13, 6, 8), float32], Tensor[(14, 8, 5), float32]) {
  %14 = cast(%var_5189, dtype="float32") /* ty=Tensor[(14, 8, 5), float32] */;
  %15 = @func_4965() /* ty=(Tensor[(13, 6, 8), float32],) */;
  %16 = cast(%var_5189, dtype="int16") /* ty=Tensor[(14, 8, 5), int16] */;
  %17 = shape_of(%var_5188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%var_5188, dtype="int16") /* ty=Tensor[(14, 8, 5), int16] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %20 = bitwise_or(%18, %19) /* ty=Tensor[(14, 8, 5), int16] */;
  %21 = cast(%20, dtype="float64") /* ty=Tensor[(14, 8, 5), float64] */;
  %22 = exp(%21) /* ty=Tensor[(14, 8, 5), float64] */;
  %23 = cast(%22, dtype="float32") /* ty=Tensor[(14, 8, 5), float32] */;
  %24 = acos(%14) /* ty=Tensor[(14, 8, 5), float32] */;
  %25 = %15.0;
  %26 = erf(%23) /* ty=Tensor[(14, 8, 5), float32] */;
  (%24, %25, %26)
}

def @func_1114(%var_1111: Tensor[(4, 1, 16), float32], %var_1112: Tensor[(1320), float64], %var_1113: Tensor[(728), float64]) -> (Tensor[(1320), float64], Tensor[(7, 12, 9), int32], Tensor[(756), int32], Tensor[(7, 12, 9), int32], Tensor[(7, 12, 9), int32], Tensor[(1, 12, 15), float64], Tensor[(180), float64], Tensor[(2520), float64], Tensor[(968), int64], Tensor[(4, ?, 16), float64], Tensor[(968), int8], Tensor[(756), float64], Tensor[(104), float64], Tensor[(728), float64], Tensor[(10, 12, 11), float32]) {
  %87 = fn (%var_1003: Tensor[(4, 1, 16), float32], %var_1008: Tensor[(1320), float64], %var_1103: Tensor[(728), float64]) -> (Tensor[(1320), float64], Tensor[(7, 12, 9), int32], Tensor[(756), int32], Tensor[(7, 12, 9), int32], Tensor[(7, 12, 9), int32], Tensor[(1, 12, 15), float64], Tensor[(180), float64], Tensor[(2520), float64], Tensor[(968), int64], Tensor[(4, ?, 16), float64], Tensor[(968), int8], Tensor[(756), float64], Tensor[(104), float64], Tensor[(728), float64], Tensor[(10, 12, 11), float32]) {
    %27 = cast(meta[relay.Constant][0] /* ty=Tensor[(756), int32] */, dtype="int32") /* ty=Tensor[(756), int32] */;
    %28 = reshape(%27, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), int32] */;
    %29 = @func_607(%28) /* ty=(Tensor[(7, 12, 9), int32],) */;
    %30 = cast(meta[relay.Constant][0] /* ty=Tensor[(756), int32] */, dtype="int32") /* ty=Tensor[(756), int32] */;
    %31 = reshape(%30, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), int32] */;
    %32 = @func_607(%31) /* ty=(Tensor[(7, 12, 9), int32],) */;
    %33 = cast(meta[relay.Constant][0] /* ty=Tensor[(756), int32] */, dtype="int32") /* ty=Tensor[(756), int32] */;
    %34 = reshape(%33, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), int32] */;
    %35 = @func_607(%34) /* ty=(Tensor[(7, 12, 9), int32],) */;
    %36 = cast(meta[relay.Constant][1] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
    %38 = cast(meta[relay.Constant][3] /* ty=Tensor[(968), int64] */, dtype="int64") /* ty=Tensor[(968), int64] */;
    %39 = reshape(%36, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
    %40 = reshape(%37, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
    %41 = reshape(%38, newshape=[968]) /* ty=Tensor[(968), int64] */;
    %42 = @func_559(%39, %40, %41) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
    %43 = cast(%var_1003, dtype="float32") /* ty=Tensor[(4, 1, 16), float32] */;
    %44 = sin(%43) /* ty=Tensor[(4, 1, 16), float32] */;
    %45 = cast(%var_1003, dtype="float64") /* ty=Tensor[(4, 1, 16), float64] */;
    %46 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
    %47 = cast(%44, dtype="float64") /* ty=Tensor[(4, 1, 16), float64] */;
    %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %49 = mod(%47, %48) /* ty=Tensor[(4, ?, 16), float64] */;
    %50 = cast(%var_1003, dtype="uint32") /* ty=Tensor[(4, 1, 16), uint32] */;
    %51 = shape_of(%49, dtype="int32") /* ty=Tensor[(3), int32] */;
    %52 = cast(%49, dtype="uint32") /* ty=Tensor[(4, ?, 16), uint32] */;
    %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %54 = bitwise_xor(%52, %53) /* ty=Tensor[(4, ?, 16), uint32] */;
    %55 = cast(%49, dtype="float64") /* ty=Tensor[(4, ?, 16), float64] */;
    %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
    %57 = cast(%54, dtype="float64") /* ty=Tensor[(4, ?, 16), float64] */;
    %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %59 = cast(meta[relay.Constant][1] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %60 = cast(meta[relay.Constant][2] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
    %61 = cast(meta[relay.Constant][3] /* ty=Tensor[(968), int64] */, dtype="int64") /* ty=Tensor[(968), int64] */;
    %62 = reshape(%59, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
    %63 = reshape(%60, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
    %64 = reshape(%61, newshape=[968]) /* ty=Tensor[(968), int64] */;
    %65 = @func_559(%62, %63, %64) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
    %66 = cast(meta[relay.Constant][4] /* ty=Tensor[(104), float64] */, dtype="float64") /* ty=Tensor[(104), float64] */;
    %67 = cast(%var_1103, dtype="float64") /* ty=Tensor[(728), float64] */;
    %68 = cast(meta[relay.Constant][2] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
    %69 = reshape(%66, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
    %70 = reshape(%67, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), float64] */;
    %71 = reshape(%68, newshape=[1, 2520]) /* ty=Tensor[(1, 2520), float64] */;
    %72 = @func_750(%69, %70, %71) /* ty=(Tensor[(7, 8, 13), float64], Tensor[(7, 12, 9), int32], Tensor[(756), float32], Tensor[(968), int8], Tensor[(180), float64], Tensor[(1, 2520), float64], Tensor[(968), int64], Tensor[(756), float64], Tensor[(7, 12, 9), int32]) */;
    %73 = cast(%var_1008, dtype="float64") /* ty=Tensor[(1320), float64] */;
    %74 = reshape(%73, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), float64] */;
    %75 = @func_701(%74) /* ty=Tensor[(10, 12, 11), uint64] */;
    %76 = cast(%75, dtype="float32") /* ty=Tensor[(10, 12, 11), float32] */;
    %77 = cosh(%76) /* ty=Tensor[(10, 12, 11), float32] */;
    %78 = cast(%77, dtype="float32") /* ty=Tensor[(10, 12, 11), float32] */;
    %79 = %29.0;
    %80 = %32.0;
    %81 = %35.0;
    %82 = %42.0;
    %83 = divide(%57, %58) /* ty=Tensor[(4, ?, 16), float64] */;
    %84 = %65.2;
    %85 = %72.7;
    %86 = log2(%78) /* ty=Tensor[(10, 12, 11), float32] */;
    (%var_1008, %79, meta[relay.Constant][0] /* ty=Tensor[(756), int32] */, %80, %81, %82, meta[relay.Constant][1] /* ty=Tensor[(180), float64] */, meta[relay.Constant][2] /* ty=Tensor[(2520), float64] */, meta[relay.Constant][3] /* ty=Tensor[(968), int64] */, %83, %84, %85, meta[relay.Constant][4] /* ty=Tensor[(104), float64] */, %var_1103, %86)
  };
  %87(%var_1111, %var_1112, %var_1113) /* ty=(Tensor[(1320), float64], Tensor[(7, 12, 9), int32], Tensor[(756), int32], Tensor[(7, 12, 9), int32], Tensor[(7, 12, 9), int32], Tensor[(1, 12, 15), float64], Tensor[(180), float64], Tensor[(2520), float64], Tensor[(968), int64], Tensor[(4, ?, 16), float64], Tensor[(968), int8], Tensor[(756), float64], Tensor[(104), float64], Tensor[(728), float64], Tensor[(10, 12, 11), float32]) */
}

def @func_5294() -> (Tensor[(13, 6, 8), float32], Tensor[(11, 11, 8), int64], Tensor[(968), int64]) {
  @func_5292() /* ty=(Tensor[(13, 6, 8), float32], Tensor[(11, 11, 8), int64], Tensor[(968), int64]) */
}

def @func_6117(%var_6109: Tensor[(13, 6, 8), float64]) -> (Tensor[(12, 12, 9), float32], Tensor[(1296), float32], Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), uint16]) {
  %88 = cast(meta[relay.Constant][5] /* ty=Tensor[(1296), float32] */, dtype="float32") /* ty=Tensor[(1296), float32] */;
  %89 = reshape(%88, newshape=[12, 12, 9]) /* ty=Tensor[(12, 12, 9), float32] */;
  %90 = @func_4310() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %91 = %90.0;
  %92 = cast(%var_6109, dtype="uint16") /* ty=Tensor[(13, 6, 8), uint16] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="uint16") /* ty=Tensor[(13, 6, 8), uint16] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %96 = @func_304(%89) /* ty=Tensor[(12, 12, 9), float32] */;
  %97 = @func_3267() /* ty=Tensor[(13, 6, 8), float64] */;
  %98 = right_shift(%94, %95) /* ty=Tensor[(13, 6, 8), uint16] */;
  (%96, meta[relay.Constant][5] /* ty=Tensor[(1296), float32] */, %97, %98)
}

def @func_3334(%var_3330: Tensor[(10, 13, 5), float32], %var_3331: Tensor[(1320), float64], %var_3332: Tensor[(1260, 2), float64], %var_3333: Tensor[(484, 2), int64]) -> (Tensor[(13, 6, 8), float64], Tensor[(10, 13, 5), uint64], Tensor[(10, 12, 11), uint64], Tensor[(1320), float64], Tensor[(14, 12, 15), bool], Tensor[(180, 1), float64], Tensor[(1260, 2), float64], Tensor[(484, 2), int64]) {
  @func_3328(%var_3330, %var_3331, %var_3332, %var_3333) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(10, 13, 5), uint64], Tensor[(10, 12, 11), uint64], Tensor[(1320), float64], Tensor[(14, 12, 15), bool], Tensor[(180, 1), float64], Tensor[(1260, 2), float64], Tensor[(484, 2), int64]) */
}

def @func_5716(%var_5715: Tensor[(9072), float32]) -> (Tensor[(13, 6, 8), float32], Tensor[(7, 1296), bool], Tensor[(9072), float32]) {
  %109 = fn (%var_5710: Tensor[(9072), float32]) -> (Tensor[(13, 6, 8), float32], Tensor[(7, 1296), bool], Tensor[(9072), float32]) {
    %99 = @func_3627() /* ty=(Tensor[(13, 6, 8), float64],) */;
    %100 = %99.0;
    %101 = cast(%100, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
    %102 = tan(%101) /* ty=Tensor[(13, 6, 8), float64] */;
    %103 = cast(%102, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
    %104 = cast(%var_5710, dtype="float32") /* ty=Tensor[(9072), float32] */;
    %105 = reshape(%104, newshape=[9072]) /* ty=Tensor[(9072), float32] */;
    %106 = @func_4624(%105) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(7, 1296), bool], Tensor[(9072), float32]) */;
    %107 = atan(%103) /* ty=Tensor[(13, 6, 8), float32] */;
    %108 = %106.1;
    (%107, %108, %var_5710)
  };
  %109(%var_5715) /* ty=(Tensor[(13, 6, 8), float32], Tensor[(7, 1296), bool], Tensor[(9072), float32]) */
}

def @func_4019(%var_4017: Tensor[(1, 252), bool]) -> (Tensor[(13, 6, 8), float32], Tensor[(7, 4, 9), bool], Tensor[(1, 252), bool]) {
  @func_4016(%var_4017) /* ty=(Tensor[(13, 6, 8), float32], Tensor[(7, 4, 9), bool], Tensor[(1, 252), bool]) */
}

def @func_4129(%var_4127: Tensor[(104), float64]) -> (Tensor[(13, 6, 8), float32], Tensor[(756), float32], Tensor[(104), float64], Tensor[(728), float64], Tensor[(2520), float64]) {
  @func_4126(%var_4127) /* ty=(Tensor[(13, 6, 8), float32], Tensor[(756), float32], Tensor[(104), float64], Tensor[(728), float64], Tensor[(2520), float64]) */
}

def @func_3446(%var_3444: Tensor[(7, 1296), float32]) -> (Tensor[(13, 6, 8), float64], Tensor[(12, 12, 9), float32], Tensor[(7, 1296), bool]) {
  @func_3443(%var_3444) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(12, 12, 9), float32], Tensor[(7, 1296), bool]) */
}

def @func_3072(%var_3071: Tensor[(1296), float32]) -> (Tensor[(13, 6, 8), float64], Tensor[(1296), float32], Tensor[(12, 12, 9), float32], Tensor[(13, 6, 8), float64]) {
  %126 = fn (%var_3011: Tensor[(1296), float32]) -> (Tensor[(13, 6, 8), float64], Tensor[(1296), float32], Tensor[(12, 12, 9), float32], Tensor[(13, 6, 8), float64]) {
    %110 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
    %111 = cast(%var_3011, dtype="float32") /* ty=Tensor[(1296), float32] */;
    %112 = reshape(%111, newshape=[12, 12, 9]) /* ty=Tensor[(12, 12, 9), float32] */;
    %113 = @func_304(%112) /* ty=Tensor[(12, 12, 9), float32] */;
    %114 = cast(%113, dtype="float64") /* ty=Tensor[(12, 12, 9), float64] */;
    %115 = sqrt(%114) /* ty=Tensor[(12, 12, 9), float64] */;
    %116 = cast(%115, dtype="float32") /* ty=Tensor[(12, 12, 9), float32] */;
    %117 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
    %118 = cast(%113, dtype="float32") /* ty=Tensor[(12, 12, 9), float32] */;
    %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %120 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
    %121 = %120.0;
    %122 = cast(%121, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
    %123 = %110.0;
    %124 = multiply(%118, %119) /* ty=Tensor[(12, 12, 9), float32] */;
    %125 = sin(%122) /* ty=Tensor[(13, 6, 8), float64] */;
    (%123, %var_3011, %124, %125)
  };
  %126(%var_3071) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(1296), float32], Tensor[(12, 12, 9), float32], Tensor[(13, 6, 8), float64]) */
}

def @func_2827() -> (Tensor[(13, 6, 8), float64],) {
  %127 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %128 = %127.0;
  (%128,)
}

def @func_3678(%var_3676: Tensor[(968), int64]) -> (Tensor[(13, 6, 8), float32], Tensor[(11, 11, 8), int64], Tensor[(968), bool]) {
  @func_3675(%var_3676) /* ty=(Tensor[(13, 6, 8), float32], Tensor[(11, 11, 8), int64], Tensor[(968), bool]) */
}

def @func_6162(%var_6152: Tensor[(56), uint8]) -> (Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), bool], Tensor[(56), uint8]) {
  %129 = @func_5097() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %130 = cast(%var_6152, dtype="uint8") /* ty=Tensor[(56), uint8] */;
  %131 = reshape(%130, newshape=[14, 4]) /* ty=Tensor[(14, 4), uint8] */;
  %132 = @func_4183(%131) /* ty=(Tensor[(7, 15, 8), uint8], Tensor[(14, 4), uint8], Tensor[(13, 6, 8), bool], Tensor[(12, 12, 9), float32], Tensor[(2520), float64]) */;
  %133 = %129.0;
  %134 = %132.2;
  (%133, %134, %var_6152)
}

def @func_2037(%var_2035: Tensor[(12, 7, 8), float32]) -> Tensor[(12, 7, 8), float32] {
  @func_2034(%var_2035) /* ty=Tensor[(12, 7, 8), float32] */
}

def @func_2640(%var_2597: Tensor[(6, 2, 7), int32], %var_2609: int16, %var_2610: Tensor[(480), int16], %var_2611: Tensor[(880), float64]) -> (Tensor[(6, 2, 7), bool], Tensor[(15, 4, 8), int16], int16, Tensor[(480), int16], Tensor[(880), float64], Tensor[(6, 2, 7), float64], Tensor[(6, 2, 7), float32]) {
  %135 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 2, 7), int32] */, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %136 = shape_of(%var_2597, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%var_2597, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %139 = not_equal(%137, %138) /* ty=Tensor[(6, 2, 7), bool] */;
  %140 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 2, 7), bool] */, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%139, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %144 = cast(%var_2609, dtype="int16") /* ty=int16 */;
  %145 = cast(%var_2610, dtype="int16") /* ty=Tensor[(480), int16] */;
  %146 = cast(%var_2611, dtype="float64") /* ty=Tensor[(880), float64] */;
  %147 = cast(%var_2611, dtype="float64") /* ty=Tensor[(880), float64] */;
  %148 = reshape(%144, newshape=[]) /* ty=int16 */;
  %149 = reshape(%145, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), int16] */;
  %150 = reshape(%146, newshape=[880]) /* ty=Tensor[(880), float64] */;
  %151 = reshape(%147, newshape=[5, 11, 16]) /* ty=Tensor[(5, 11, 16), float64] */;
  %152 = @func_2462(%148, %149, %150, %151) /* ty=(Tensor[(15, 4, 8), int16], Tensor[(880), uint32], Tensor[(5, 11, 16), bool]) */;
  %153 = cast(%var_2597, dtype="float64") /* ty=Tensor[(6, 2, 7), float64] */;
  %154 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 2, 7), bool] */, dtype="float32") /* ty=Tensor[(6, 2, 7), float32] */;
  %155 = logical_and(%142, %143) /* ty=Tensor[(6, 2, 7), bool] */;
  %156 = %152.0;
  %157 = asin(%153) /* ty=Tensor[(6, 2, 7), float64] */;
  %158 = log(%154) /* ty=Tensor[(6, 2, 7), float32] */;
  (%155, %156, %var_2609, %var_2610, %var_2611, %157, %158)
}

def @func_1201(%var_1129: Tensor[(4, 12, 5), uint64], %var_1137: Tensor[(1320), float64], %var_1181: Tensor[(1296), float32], %var_1187: Tensor[(968), int64], %var_1196: Tensor[(26, 4), float64], %var_1197: Tensor[(1, 728), float64], %var_1198: Tensor[(6, 420), float64]) -> (Tensor[(1320), float64], Tensor[(12, 12, 9), float32], Tensor[(4, 12, 5), float64], Tensor[(10, 12, 11), float64], Tensor[(1296), bool], Tensor[(11, 11, 8), int64], Tensor[(968), int64], Tensor[(7, 8, 13), float64], Tensor[(26, 4), float64], Tensor[(1, 728), float64], Tensor[(6, 420), float64]) {
  %159 = cast(meta[relay.Constant][8] /* ty=Tensor[(1296), float32] */, dtype="float32") /* ty=Tensor[(1296), float32] */;
  %160 = reshape(%159, newshape=[12, 12, 9]) /* ty=Tensor[(12, 12, 9), float32] */;
  %161 = cast(%var_1129, dtype="uint64") /* ty=Tensor[(4, 12, 5), uint64] */;
  %162 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(4, 12, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 12, 5), uint64] */, dtype="uint64") /* ty=Tensor[(4, 12, 5), uint64] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %165 = left_shift(%163, %164) /* ty=Tensor[(4, 12, 5), uint64] */;
  %166 = cast(%165, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
  %167 = log10(%166) /* ty=Tensor[(4, 12, 5), float64] */;
  %168 = cast(%167, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
  %169 = cast(%var_1137, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %170 = reshape(%169, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), float64] */;
  %171 = @func_701(%170) /* ty=Tensor[(10, 12, 11), uint64] */;
  %172 = cast(%171, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
  %173 = cast(%var_1181, dtype="bool") /* ty=Tensor[(1296), bool] */;
  %174 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(1296), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %175 = cast(meta[relay.Constant][8] /* ty=Tensor[(1296), float32] */, dtype="bool") /* ty=Tensor[(1296), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?), bool] */;
  %177 = cast(%var_1187, dtype="int64") /* ty=Tensor[(968), int64] */;
  %178 = reshape(%177, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), int64] */;
  %179 = cast(%var_1196, dtype="float64") /* ty=Tensor[(26, 4), float64] */;
  %180 = cast(%var_1197, dtype="float64") /* ty=Tensor[(1, 728), float64] */;
  %181 = cast(%var_1198, dtype="float64") /* ty=Tensor[(6, 420), float64] */;
  %182 = reshape(%179, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %183 = reshape(%180, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), float64] */;
  %184 = reshape(%181, newshape=[1, 2520]) /* ty=Tensor[(1, 2520), float64] */;
  %185 = @func_750(%182, %183, %184) /* ty=(Tensor[(7, 8, 13), float64], Tensor[(7, 12, 9), int32], Tensor[(756), float32], Tensor[(968), int8], Tensor[(180), float64], Tensor[(1, 2520), float64], Tensor[(968), int64], Tensor[(756), float64], Tensor[(7, 12, 9), int32]) */;
  %186 = @func_304(%160) /* ty=Tensor[(12, 12, 9), float32] */;
  %187 = log(%168) /* ty=Tensor[(4, 12, 5), float64] */;
  %188 = acos(%172) /* ty=Tensor[(10, 12, 11), float64] */;
  %189 = less(%175, %176) /* ty=Tensor[(1296), bool] */;
  %190 = @func_511(%178) /* ty=Tensor[(11, 11, 8), int64] */;
  %191 = %185.0;
  (%var_1137, %186, %187, %188, %189, %190, %var_1187, %191, %var_1196, %var_1197, %var_1198)
}

def @func_1412(%var_1410: Tensor[(14, 5, 15), float64], %var_1411: Tensor[(6, 30), float64]) -> (Tensor[(14, 12, 15), bool], Tensor[(6, 30), float64], Tensor[(630, 4), float64], Tensor[(968), int64], Tensor[(14, 5, 15), uint32]) {
  %207 = fn (%var_1375: Tensor[(14, 5, 15), float64], %var_1390: Tensor[(6, 30), float64]) -> (Tensor[(14, 12, 15), bool], Tensor[(6, 30), float64], Tensor[(630, 4), float64], Tensor[(968), int64], Tensor[(14, 5, 15), uint32]) {
    %192 = cast(%var_1390, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
    %193 = cast(meta[relay.Constant][10] /* ty=Tensor[(630, 4), float64] */, dtype="float64") /* ty=Tensor[(630, 4), float64] */;
    %194 = cast(meta[relay.Constant][11] /* ty=Tensor[(968), int64] */, dtype="int64") /* ty=Tensor[(968), int64] */;
    %195 = reshape(%192, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
    %196 = reshape(%193, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
    %197 = reshape(%194, newshape=[968]) /* ty=Tensor[(968), int64] */;
    %198 = @func_559(%195, %196, %197) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
    %199 = cast(%var_1375, dtype="float64") /* ty=Tensor[(14, 5, 15), float64] */;
    %200 = sinh(%199) /* ty=Tensor[(14, 5, 15), float64] */;
    %201 = cast(%var_1375, dtype="uint32") /* ty=Tensor[(14, 5, 15), uint32] */;
    %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
    %203 = cast(%200, dtype="uint32") /* ty=Tensor[(14, 5, 15), uint32] */;
    %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %205 = %198.1;
    %206 = maximum(%203, %204) /* ty=Tensor[(14, 5, 15), uint32] */;
    (%205, %var_1390, meta[relay.Constant][10] /* ty=Tensor[(630, 4), float64] */, meta[relay.Constant][11] /* ty=Tensor[(968), int64] */, %206)
  };
  %207(%var_1410, %var_1411) /* ty=(Tensor[(14, 12, 15), bool], Tensor[(6, 30), float64], Tensor[(630, 4), float64], Tensor[(968), int64], Tensor[(14, 5, 15), uint32]) */
}

def @main() -> (Tensor[(?, 14, 13), uint16],) {
  %208 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 14, 13), float32] */, dtype="float32") /* ty=Tensor[(1, 14, 13), float32] */;
  %209 = acos(%208) /* ty=Tensor[(1, 14, 13), float32] */;
  %210 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 14, 13), float32] */, dtype="float64") /* ty=Tensor[(1, 14, 13), float64] */;
  %211 = exp(%210) /* ty=Tensor[(1, 14, 13), float64] */;
  %212 = cast(%211, dtype="uint16") /* ty=Tensor[(1, 14, 13), uint16] */;
  %213 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%209, dtype="uint16") /* ty=Tensor[(1, 14, 13), uint16] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %216 = bitwise_or(%214, %215) /* ty=Tensor[(?, 14, 13), uint16] */;
  (%216,)
}

def @func_3192(%var_3185: Tensor[(1, 1650), float32], %var_3187: Tensor[(6, 1650), float32]) -> (Tensor[(13, 6, 8), float64], Tensor[(15, 10, 11), float64], Tensor[(6, 1650), bool]) {
  %217 = @func_3120() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %218 = cast(%var_3185, dtype="float32") /* ty=Tensor[(1, 1650), float32] */;
  %219 = reshape(%218, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), float32] */;
  %220 = @func_2294(%219) /* ty=(Tensor[(15, 10, 11), float64],) */;
  %221 = cast(%var_3185, dtype="bool") /* ty=Tensor[(1, 1650), bool] */;
  %222 = cast(%var_3187, dtype="bool") /* ty=Tensor[(6, 1650), bool] */;
  %223 = %217.0;
  %224 = %220.0;
  %225 = equal(%221, %222) /* ty=Tensor[(6, 1650), bool] */;
  (%223, %224, %225)
}

def @func_4799(%var_4795: Tensor[(1320), float64], %var_4796: Tensor[(968), int64], %var_4797: Tensor[(728), float64], %var_4798: Tensor[(2520), float64]) -> (Tensor[(13, 6, 8), float64], Tensor[(7, 15, 8), uint8], Tensor[(56), uint8], Tensor[(11, 11, 8), int64], Tensor[(8, 30), uint64], Tensor[(1320), float64], Tensor[(1296), float32], Tensor[(968), int64], Tensor[(104), float64], Tensor[(728), float64], Tensor[(2520), float64]) {
  %247 = fn (%var_4787: Tensor[(1320), float64], %var_4789: Tensor[(968), int64], %var_4791: Tensor[(728), float64], %var_4792: Tensor[(2520), float64]) -> (Tensor[(13, 6, 8), float64], Tensor[(7, 15, 8), uint8], Tensor[(56), uint8], Tensor[(11, 11, 8), int64], Tensor[(8, 30), uint64], Tensor[(1320), float64], Tensor[(1296), float32], Tensor[(968), int64], Tensor[(104), float64], Tensor[(728), float64], Tensor[(2520), float64]) {
    %226 = @func_2827() /* ty=(Tensor[(13, 6, 8), float64],) */;
    %227 = cast(meta[relay.Constant][13] /* ty=Tensor[(56), uint8] */, dtype="uint8") /* ty=Tensor[(56), uint8] */;
    %228 = reshape(%227, newshape=[7, 1, 8]) /* ty=Tensor[(7, 1, 8), uint8] */;
    %229 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 30), uint64] */, dtype="uint64") /* ty=Tensor[(8, 30), uint64] */;
    %230 = cast(%var_4787, dtype="float64") /* ty=Tensor[(1320), float64] */;
    %231 = cast(meta[relay.Constant][15] /* ty=Tensor[(1296), float32] */, dtype="float32") /* ty=Tensor[(1296), float32] */;
    %232 = cast(%var_4789, dtype="int64") /* ty=Tensor[(968), int64] */;
    %233 = cast(meta[relay.Constant][16] /* ty=Tensor[(104), float64] */, dtype="float64") /* ty=Tensor[(104), float64] */;
    %234 = cast(%var_4791, dtype="float64") /* ty=Tensor[(728), float64] */;
    %235 = cast(%var_4792, dtype="float64") /* ty=Tensor[(2520), float64] */;
    %236 = reshape(%229, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), uint64] */;
    %237 = reshape(%230, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
    %238 = reshape(%231, newshape=[1296]) /* ty=Tensor[(1296), float32] */;
    %239 = reshape(%232, newshape=[968]) /* ty=Tensor[(968), int64] */;
    %240 = reshape(%233, newshape=[26, 4]) /* ty=Tensor[(26, 4), float64] */;
    %241 = reshape(%234, newshape=[1, 728]) /* ty=Tensor[(1, 728), float64] */;
    %242 = reshape(%235, newshape=[6, 420]) /* ty=Tensor[(6, 420), float64] */;
    %243 = @func_1201(%236, %237, %238, %239, %240, %241, %242) /* ty=(Tensor[(1320), float64], Tensor[(12, 12, 9), float32], Tensor[(4, 12, 5), float64], Tensor[(10, 12, 11), float64], Tensor[(1296), bool], Tensor[(11, 11, 8), int64], Tensor[(968), int64], Tensor[(7, 8, 13), float64], Tensor[(26, 4), float64], Tensor[(1, 728), float64], Tensor[(6, 420), float64]) */;
    %244 = %226.0;
    %245 = @func_1818(%228) /* ty=Tensor[(7, 15, 8), uint8] */;
    %246 = %243.5;
    (%244, %245, meta[relay.Constant][13] /* ty=Tensor[(56), uint8] */, %246, meta[relay.Constant][14] /* ty=Tensor[(8, 30), uint64] */, %var_4787, meta[relay.Constant][15] /* ty=Tensor[(1296), float32] */, %var_4789, meta[relay.Constant][16] /* ty=Tensor[(104), float64] */, %var_4791, %var_4792)
  };
  %247(%var_4795, %var_4796, %var_4797, %var_4798) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(7, 15, 8), uint8], Tensor[(56), uint8], Tensor[(11, 11, 8), int64], Tensor[(8, 30), uint64], Tensor[(1320), float64], Tensor[(1296), float32], Tensor[(968), int64], Tensor[(104), float64], Tensor[(728), float64], Tensor[(2520), float64]) */
}

def @func_4378() -> (Tensor[(13, 6, 8), float32],) {
  %252 = fn () -> (Tensor[(13, 6, 8), float32],) {
    %248 = @func_4310() /* ty=(Tensor[(13, 6, 8), float64],) */;
    %249 = %248.0;
    %250 = cast(%249, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
    %251 = rsqrt(%250) /* ty=Tensor[(13, 6, 8), float32] */;
    (%251,)
  };
  %252() /* ty=(Tensor[(13, 6, 8), float32],) */
}

def @func_5379(%var_5377: Tensor[(5, 4, 4), float32]) -> (Tensor[(13, 6, 8), float32], Tensor[(5, 4, 4), float64]) {
  @func_5376(%var_5377) /* ty=(Tensor[(13, 6, 8), float32], Tensor[(5, 4, 4), float64]) */
}

def @func_2296(%var_2295: Tensor[(15, 10, 11), float32]) -> (Tensor[(15, 10, 11), float64],) {
  %257 = fn (%var_2283: Tensor[(15, 10, 11), float32]) -> (Tensor[(15, 10, 11), float64],) {
    %253 = cast(%var_2283, dtype="float32") /* ty=Tensor[(15, 10, 11), float32] */;
    %254 = sinh(%253) /* ty=Tensor[(15, 10, 11), float32] */;
    %255 = cast(%254, dtype="float64") /* ty=Tensor[(15, 10, 11), float64] */;
    %256 = acos(%255) /* ty=Tensor[(15, 10, 11), float64] */;
    (%256,)
  };
  %257(%var_2295) /* ty=(Tensor[(15, 10, 11), float64],) */
}

def @func_610(%var_608: Tensor[(7, 12, 9), int32]) -> (Tensor[(7, 12, 9), int32],) {
  @func_607(%var_608) /* ty=(Tensor[(7, 12, 9), int32],) */
}

def @func_1818(%var_1811: Tensor[(7, 1, 8), uint8]) -> Tensor[(7, 15, 8), uint8] {
  %258 = cast(%var_1811, dtype="uint8") /* ty=Tensor[(7, 1, 8), uint8] */;
  %259 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 15, 8), uint8] */, dtype="uint8") /* ty=Tensor[(7, 15, 8), uint8] */;
  bitwise_or(%258, %259) /* ty=Tensor[(7, 15, 8), uint8] */
}

def @func_3269() -> Tensor[(13, 6, 8), float64] {
  @func_3267() /* ty=Tensor[(13, 6, 8), float64] */
}

def @func_559(%var_517: Tensor[(1, 12, 15), float64], %var_521: Tensor[(14, 12, 15), float64], %var_531: Tensor[(968), int64]) -> (Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) {
  %260 = cast(%var_517, dtype="float64") /* ty=Tensor[(1, 12, 15), float64] */;
  %261 = cast(%var_517, dtype="bool") /* ty=Tensor[(1, 12, 15), bool] */;
  %262 = cast(%var_521, dtype="bool") /* ty=Tensor[(14, 12, 15), bool] */;
  %263 = cast(%var_531, dtype="int64") /* ty=Tensor[(968), int64] */;
  %264 = reshape(%263, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), int64] */;
  %265 = @func_511(%264) /* ty=Tensor[(11, 11, 8), int64] */;
  %266 = cast(%265, dtype="int8") /* ty=Tensor[(11, 11, 8), int8] */;
  %267 = shape_of(%var_531, dtype="int32") /* ty=Tensor[(1), int32] */;
  %268 = cast(%var_531, dtype="int8") /* ty=Tensor[(968), int8] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?), int8] */;
  %270 = acos(%260) /* ty=Tensor[(1, 12, 15), float64] */;
  %271 = greater(%261, %262) /* ty=Tensor[(14, 12, 15), bool] */;
  %272 = bitwise_xor(%268, %269) /* ty=Tensor[(968), int8] */;
  (%270, %271, %272)
}

def @func_5182() -> (Tensor[(13, 6, 8), float64],) {
  %273 = @func_4531() /* ty=(Tensor[(13, 6, 8), float32],) */;
  %274 = %273.0;
  %275 = cast(%274, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
  %276 = sigmoid(%275) /* ty=Tensor[(13, 6, 8), float64] */;
  (%276,)
}

def @func_5145(%var_5144: Tensor[(15, 1, 3), float64]) -> (Tensor[(15, 1, 3), float64],) {
  %279 = fn (%var_5129: Tensor[(15, 1, 3), float64]) -> (Tensor[(15, 1, 3), float64],) {
    %277 = cast(%var_5129, dtype="float64") /* ty=Tensor[(15, 1, 3), float64] */;
    %278 = log(%277) /* ty=Tensor[(15, 1, 3), float64] */;
    (%278,)
  };
  %279(%var_5144) /* ty=(Tensor[(15, 1, 3), float64],) */
}

def @func_4016(%var_4008: Tensor[(1, 252), bool]) -> (Tensor[(13, 6, 8), float32], Tensor[(7, 4, 9), bool], Tensor[(1, 252), bool]) {
  %280 = @func_3590() /* ty=(Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float64]) */;
  %281 = cast(%var_4008, dtype="bool") /* ty=Tensor[(1, 252), bool] */;
  %282 = cast(%var_4008, dtype="bool") /* ty=Tensor[(1, 252), bool] */;
  %283 = reshape(%281, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), bool] */;
  %284 = reshape(%282, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), bool] */;
  %285 = @func_3377(%283, %284) /* ty=(Tensor[(7, 4, 9), bool],) */;
  %286 = %280.1;
  %287 = %285.0;
  (%286, %287, %var_4008)
}

def @func_4312() -> (Tensor[(13, 6, 8), float64],) {
  @func_4310() /* ty=(Tensor[(13, 6, 8), float64],) */
}

def @func_3397() -> Tensor[(13, 6, 8), float32] {
  %293 = fn () -> Tensor[(13, 6, 8), float32] {
    %288 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
    %289 = %288.0;
    %290 = cast(%289, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
    %291 = asinh(%290) /* ty=Tensor[(13, 6, 8), float32] */;
    %292 = cast(%291, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
    acosh(%292) /* ty=Tensor[(13, 6, 8), float32] */
  };
  %293() /* ty=Tensor[(13, 6, 8), float32] */
}

def @func_3591() -> (Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float64]) {
  %300 = fn () -> (Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float64]) {
    %294 = @func_2827() /* ty=(Tensor[(13, 6, 8), float64],) */;
    %295 = @func_3267() /* ty=Tensor[(13, 6, 8), float64] */;
    %296 = cast(%295, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
    %297 = %294.0;
    %298 = @func_3396() /* ty=Tensor[(13, 6, 8), float32] */;
    %299 = exp(%296) /* ty=Tensor[(13, 6, 8), float64] */;
    (%297, %298, %299)
  };
  %300() /* ty=(Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float64]) */
}

def @func_4626(%var_4625: Tensor[(9072), float32]) -> (Tensor[(13, 6, 8), float64], Tensor[(7, 1296), bool], Tensor[(9072), float32]) {
  %306 = fn (%var_4622: Tensor[(9072), float32]) -> (Tensor[(13, 6, 8), float64], Tensor[(7, 1296), bool], Tensor[(9072), float32]) {
    %301 = cast(%var_4622, dtype="float32") /* ty=Tensor[(9072), float32] */;
    %302 = reshape(%301, newshape=[7, 1296]) /* ty=Tensor[(7, 1296), float32] */;
    %303 = @func_3443(%302) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(12, 12, 9), float32], Tensor[(7, 1296), bool]) */;
    %304 = @func_4410() /* ty=Tensor[(13, 6, 8), float64] */;
    %305 = %303.2;
    (%304, %305, %var_4622)
  };
  %306(%var_4625) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(7, 1296), bool], Tensor[(9072), float32]) */
}

def @func_5097() -> (Tensor[(13, 6, 8), float64],) {
  %307 = @func_4310() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %308 = %307.0;
  (%308,)
}

def @func_4252() -> Tensor[(13, 6, 8), float32] {
  %309 = @func_4099() /* ty=(Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float32]) */;
  %309.1
}

def @func_3801() -> Tensor[(13, 6, 8), float64] {
  %310 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %310.0
}

def @func_2829() -> (Tensor[(13, 6, 8), float64],) {
  @func_2827() /* ty=(Tensor[(13, 6, 8), float64],) */
}

def @func_3803() -> Tensor[(13, 6, 8), float64] {
  @func_3801() /* ty=Tensor[(13, 6, 8), float64] */
}

def @func_5071(%var_5064: Tensor[(968), int64], %var_5067: Tensor[(968), int64]) -> (Tensor[(13, 6, 8), float64], Tensor[(14, 12, 15), bool], Tensor[(180), float64], Tensor[(2520), float64], Tensor[(968), int16]) {
  %311 = cast(meta[relay.Constant][18] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %312 = cast(meta[relay.Constant][19] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %313 = cast(%var_5064, dtype="int64") /* ty=Tensor[(968), int64] */;
  %314 = reshape(%311, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
  %315 = reshape(%312, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
  %316 = reshape(%313, newshape=[968]) /* ty=Tensor[(968), int64] */;
  %317 = @func_559(%314, %315, %316) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
  %318 = cast(%var_5067, dtype="int16") /* ty=Tensor[(968), int16] */;
  %319 = shape_of(%var_5064, dtype="int32") /* ty=Tensor[(1), int32] */;
  %320 = cast(%var_5064, dtype="int16") /* ty=Tensor[(968), int16] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?), int16] */;
  %322 = @func_4904() /* ty=Tensor[(13, 6, 8), float64] */;
  %323 = %317.1;
  %324 = bitwise_or(%320, %321) /* ty=Tensor[(968), int16] */;
  (%322, %323, meta[relay.Constant][18] /* ty=Tensor[(180), float64] */, meta[relay.Constant][19] /* ty=Tensor[(2520), float64] */, %324)
}

def @func_3718(%var_3716: Tensor[(16, 3, 9), uint64], %var_3717: Tensor[(16, 3, 9), uint64]) -> (Tensor[(16, 3, 9), uint64], Tensor[(12, 7, 8), float32], Tensor[(672), float32]) {
  @func_3714(%var_3716, %var_3717) /* ty=(Tensor[(16, 3, 9), uint64], Tensor[(12, 7, 8), float32], Tensor[(672), float32]) */
}

def @func_1595(%var_1594: Tensor[(2520), float64]) -> (Tensor[(11, 2, 15), int8], Tensor[(11, 2, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(180), float64], Tensor[(2520), float64], Tensor[(968), int64], Tensor[(11, 11, 8), int64], Tensor[(12, 12, 9), float32], Tensor[(1296), float32]) {
  %350 = fn (%var_1581: Tensor[(2520), float64]) -> (Tensor[(11, 2, 15), int8], Tensor[(11, 2, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(180), float64], Tensor[(2520), float64], Tensor[(968), int64], Tensor[(11, 11, 8), int64], Tensor[(12, 12, 9), float32], Tensor[(1296), float32]) {
    %325 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
    %326 = atanh(%325) /* ty=Tensor[(11, 2, 15), float64] */;
    %327 = cast(%326, dtype="int8") /* ty=Tensor[(11, 2, 15), int8] */;
    %328 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(11, 2, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %329 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 2, 15), float64] */, dtype="int8") /* ty=Tensor[(11, 2, 15), int8] */;
    %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %331 = cast(%326, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
    %332 = asin(%331) /* ty=Tensor[(11, 2, 15), float64] */;
    %333 = cast(%332, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
    %334 = cast(meta[relay.Constant][21] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %335 = cast(%var_1581, dtype="float64") /* ty=Tensor[(2520), float64] */;
    %336 = cast(meta[relay.Constant][22] /* ty=Tensor[(968), int64] */, dtype="int64") /* ty=Tensor[(968), int64] */;
    %337 = reshape(%334, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
    %338 = reshape(%335, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
    %339 = reshape(%336, newshape=[968]) /* ty=Tensor[(968), int64] */;
    %340 = @func_559(%337, %338, %339) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
    %341 = cast(meta[relay.Constant][22] /* ty=Tensor[(968), int64] */, dtype="int64") /* ty=Tensor[(968), int64] */;
    %342 = reshape(%341, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), int64] */;
    %343 = cast(meta[relay.Constant][23] /* ty=Tensor[(1296), float32] */, dtype="float32") /* ty=Tensor[(1296), float32] */;
    %344 = reshape(%343, newshape=[12, 12, 9]) /* ty=Tensor[(12, 12, 9), float32] */;
    %345 = minimum(%329, %330) /* ty=Tensor[(11, 2, 15), int8] */;
    %346 = erf(%333) /* ty=Tensor[(11, 2, 15), float64] */;
    %347 = %340.1;
    %348 = @func_511(%342) /* ty=Tensor[(11, 11, 8), int64] */;
    %349 = @func_304(%344) /* ty=Tensor[(12, 12, 9), float32] */;
    (%345, %346, %347, meta[relay.Constant][21] /* ty=Tensor[(180), float64] */, %var_1581, meta[relay.Constant][22] /* ty=Tensor[(968), int64] */, %348, %349, meta[relay.Constant][23] /* ty=Tensor[(1296), float32] */)
  };
  %350(%var_1594) /* ty=(Tensor[(11, 2, 15), int8], Tensor[(11, 2, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(180), float64], Tensor[(2520), float64], Tensor[(968), int64], Tensor[(11, 11, 8), int64], Tensor[(12, 12, 9), float32], Tensor[(1296), float32]) */
}

def @func_3675(%var_3670: Tensor[(968), int64]) -> (Tensor[(13, 6, 8), float32], Tensor[(11, 11, 8), int64], Tensor[(968), bool]) {
  %351 = cast(meta[relay.Constant][24] /* ty=Tensor[(968), int64] */, dtype="int64") /* ty=Tensor[(968), int64] */;
  %352 = reshape(%351, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), int64] */;
  %353 = cast(%var_3670, dtype="bool") /* ty=Tensor[(968), bool] */;
  %354 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(968), int64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %355 = cast(meta[relay.Constant][24] /* ty=Tensor[(968), int64] */, dtype="bool") /* ty=Tensor[(968), bool] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?), bool] */;
  %357 = @func_3396() /* ty=Tensor[(13, 6, 8), float32] */;
  %358 = @func_511(%352) /* ty=Tensor[(11, 11, 8), int64] */;
  %359 = equal(%355, %356) /* ty=Tensor[(968), bool] */;
  (%357, %358, %359)
}

def @func_5912(%var_5880: Tensor[(252), bool], %var_5882: Tensor[(7, 4, 9), bool]) -> (Tensor[(13, 6, 8), float64], Tensor[(7, 4, 9), uint64], Tensor[(7, 4, 9), bool]) {
  %360 = @func_2827() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %361 = cast(%var_5880, dtype="bool") /* ty=Tensor[(252), bool] */;
  %362 = cast(%var_5880, dtype="bool") /* ty=Tensor[(252), bool] */;
  %363 = reshape(%361, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), bool] */;
  %364 = reshape(%362, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), bool] */;
  %365 = @func_3377(%363, %364) /* ty=(Tensor[(7, 4, 9), bool],) */;
  %366 = %365.0;
  %367 = cast(%var_5882, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%366, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %371 = greater(%369, %370) /* ty=Tensor[(7, 4, 9), bool] */;
  %372 = cast(%var_5880, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%371, dtype="uint64") /* ty=Tensor[(7, 4, 9), uint64] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %376 = cast(%371, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
  %377 = sin(%376) /* ty=Tensor[(7, 4, 9), float32] */;
  %378 = cast(%var_5880, dtype="bool") /* ty=Tensor[(252), bool] */;
  %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%377, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %382 = %360.0;
  %383 = minimum(%374, %375) /* ty=Tensor[(7, 4, 9), uint64] */;
  %384 = greater_equal(%380, %381) /* ty=Tensor[(7, 4, 9), bool] */;
  (%382, %383, %384)
}

def @func_4101() -> (Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float32]) {
  @func_4099() /* ty=(Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float32]) */
}

def @func_3443(%var_3431: Tensor[(7, 1296), float32]) -> (Tensor[(13, 6, 8), float64], Tensor[(12, 12, 9), float32], Tensor[(7, 1296), bool]) {
  %385 = @func_2827() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %386 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 1296), float32] */, dtype="float32") /* ty=Tensor[(1, 1296), float32] */;
  %387 = reshape(%386, newshape=[12, 12, 9]) /* ty=Tensor[(12, 12, 9), float32] */;
  %388 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 1296), float32] */, dtype="bool") /* ty=Tensor[(1, 1296), bool] */;
  %389 = cast(%var_3431, dtype="bool") /* ty=Tensor[(7, 1296), bool] */;
  %390 = %385.0;
  %391 = @func_304(%387) /* ty=Tensor[(12, 12, 9), float32] */;
  %392 = equal(%388, %389) /* ty=Tensor[(7, 1296), bool] */;
  (%390, %391, %392)
}

def @func_6120(%var_6118: Tensor[(13, 6, 8), float64]) -> (Tensor[(12, 12, 9), float32], Tensor[(1296), float32], Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), uint16]) {
  @func_6117(%var_6118) /* ty=(Tensor[(12, 12, 9), float32], Tensor[(1296), float32], Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), uint16]) */
}

def @func_4254() -> Tensor[(13, 6, 8), float32] {
  @func_4252() /* ty=Tensor[(13, 6, 8), float32] */
}

def @func_4497() -> Tensor[(13, 6, 8), float64] {
  @func_3267() /* ty=Tensor[(13, 6, 8), float64] */
}

def @func_5916(%var_5914: Tensor[(252), bool], %var_5915: Tensor[(7, 4, 9), bool]) -> (Tensor[(13, 6, 8), float64], Tensor[(7, 4, 9), uint64], Tensor[(7, 4, 9), bool]) {
  @func_5912(%var_5914, %var_5915) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(7, 4, 9), uint64], Tensor[(7, 4, 9), bool]) */
}

def @func_3627() -> (Tensor[(13, 6, 8), float64],) {
  %393 = @func_3590() /* ty=(Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float64]) */;
  %394 = %393.0;
  (%394,)
}

def @func_2646(%var_2642: Tensor[(6, 2, 7), int32], %var_2643: int16, %var_2644: Tensor[(480), int16], %var_2645: Tensor[(880), float64]) -> (Tensor[(6, 2, 7), bool], Tensor[(15, 4, 8), int16], int16, Tensor[(480), int16], Tensor[(880), float64], Tensor[(6, 2, 7), float64], Tensor[(6, 2, 7), float32]) {
  @func_2640(%var_2642, %var_2643, %var_2644, %var_2645) /* ty=(Tensor[(6, 2, 7), bool], Tensor[(15, 4, 8), int16], int16, Tensor[(480), int16], Tensor[(880), float64], Tensor[(6, 2, 7), float64], Tensor[(6, 2, 7), float32]) */
}

def @func_5779(%var_5720: Tensor[(2, 12, 16), uint32], %var_5721: Tensor[(2, 12, 16), uint32], %var_5731: Tensor[(2, 12, 16), uint32]) -> (Tensor[(7, 12, 9), int32], Tensor[(1, 756), int32], Tensor[(13, 6, 8), float64], Tensor[(9072, 1), float32], Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), float32]) {
  %395 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 756), int32] */, dtype="int32") /* ty=Tensor[(1, 756), int32] */;
  %396 = reshape(%395, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), int32] */;
  %397 = @func_607(%396) /* ty=(Tensor[(7, 12, 9), int32],) */;
  %398 = cast(meta[relay.Constant][27] /* ty=Tensor[(9072, 1), float32] */, dtype="float32") /* ty=Tensor[(9072, 1), float32] */;
  %399 = reshape(%398, newshape=[9072]) /* ty=Tensor[(9072), float32] */;
  %400 = @func_4624(%399) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(7, 1296), bool], Tensor[(9072), float32]) */;
  %401 = cast(%var_5721, dtype="uint32") /* ty=Tensor[(2, 12, 16), uint32] */;
  %402 = shape_of(%var_5720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%var_5720, dtype="uint32") /* ty=Tensor[(2, 12, 16), uint32] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %405 = maximum(%403, %404) /* ty=Tensor[(2, 12, 16), uint32] */;
  %406 = cast(%var_5731, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%405, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %410 = cast(%var_5731, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %411 = shape_of(%var_5720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %412 = cast(%var_5720, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %414 = logical_and(%412, %413) /* ty=Tensor[(2, 12, 16), bool] */;
  %415 = cast(%414, dtype="float32") /* ty=Tensor[(2, 12, 16), float32] */;
  %416 = %397.0;
  %417 = %400.0;
  %418 = less(%408, %409) /* ty=Tensor[(2, 12, 16), bool] */;
  %419 = acos(%415) /* ty=Tensor[(2, 12, 16), float32] */;
  (%416, meta[relay.Constant][26] /* ty=Tensor[(1, 756), int32] */, %417, meta[relay.Constant][27] /* ty=Tensor[(9072, 1), float32] */, %418, %419)
}

def @func_2956(%var_2955: Tensor[(1, 968), int64]) -> (Tensor[(13, 6, 8), float64], Tensor[(968), int8], Tensor[(180), float64], Tensor[(630, 4), float64], Tensor[(1, 968), int64]) {
  %430 = fn (%var_2952: Tensor[(1, 968), int64]) -> (Tensor[(13, 6, 8), float64], Tensor[(968), int8], Tensor[(180), float64], Tensor[(630, 4), float64], Tensor[(1, 968), int64]) {
    %420 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
    %421 = cast(meta[relay.Constant][28] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %422 = cast(meta[relay.Constant][29] /* ty=Tensor[(630, 4), float64] */, dtype="float64") /* ty=Tensor[(630, 4), float64] */;
    %423 = cast(%var_2952, dtype="int64") /* ty=Tensor[(1, 968), int64] */;
    %424 = reshape(%421, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
    %425 = reshape(%422, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
    %426 = reshape(%423, newshape=[968]) /* ty=Tensor[(968), int64] */;
    %427 = @func_559(%424, %425, %426) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
    %428 = %420.0;
    %429 = %427.2;
    (%428, %429, meta[relay.Constant][28] /* ty=Tensor[(180), float64] */, meta[relay.Constant][29] /* ty=Tensor[(630, 4), float64] */, %var_2952)
  };
  %430(%var_2955) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(968), int8], Tensor[(180), float64], Tensor[(630, 4), float64], Tensor[(1, 968), int64]) */
}

def @func_1210(%var_1203: Tensor[(4, 12, 5), uint64], %var_1204: Tensor[(1320), float64], %var_1205: Tensor[(1296), float32], %var_1206: Tensor[(968), int64], %var_1207: Tensor[(26, 4), float64], %var_1208: Tensor[(1, 728), float64], %var_1209: Tensor[(6, 420), float64]) -> (Tensor[(1320), float64], Tensor[(12, 12, 9), float32], Tensor[(4, 12, 5), float64], Tensor[(10, 12, 11), float64], Tensor[(1296), bool], Tensor[(11, 11, 8), int64], Tensor[(968), int64], Tensor[(7, 8, 13), float64], Tensor[(26, 4), float64], Tensor[(1, 728), float64], Tensor[(6, 420), float64]) {
  @func_1201(%var_1203, %var_1204, %var_1205, %var_1206, %var_1207, %var_1208, %var_1209) /* ty=(Tensor[(1320), float64], Tensor[(12, 12, 9), float32], Tensor[(4, 12, 5), float64], Tensor[(10, 12, 11), float64], Tensor[(1296), bool], Tensor[(11, 11, 8), int64], Tensor[(968), int64], Tensor[(7, 8, 13), float64], Tensor[(26, 4), float64], Tensor[(1, 728), float64], Tensor[(6, 420), float64]) */
}

def @func_3629() -> (Tensor[(13, 6, 8), float64],) {
  @func_3627() /* ty=(Tensor[(13, 6, 8), float64],) */
}

def @func_5620(%var_5618: Tensor[(13, 6, 8), float64]) -> (Tensor[(13, 6, 8), uint16], Tensor[(13, 6, 8), float32]) {
  @func_5617(%var_5618) /* ty=(Tensor[(13, 6, 8), uint16], Tensor[(13, 6, 8), float32]) */
}

def @func_513(%var_512: Tensor[(11, 11, 8), int64]) -> Tensor[(11, 11, 8), int64] {
  %435 = fn (%var_506: Tensor[(11, 11, 8), int64]) -> Tensor[(11, 11, 8), int64] {
    %431 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 11, 8), int64] */, dtype="int64") /* ty=Tensor[(11, 11, 8), int64] */;
    %432 = shape_of(%var_506, dtype="int32") /* ty=Tensor[(3), int32] */;
    %433 = cast(%var_506, dtype="int64") /* ty=Tensor[(11, 11, 8), int64] */;
    %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    bitwise_or(%433, %434) /* ty=Tensor[(11, 11, 8), int64] */
  };
  %435(%var_512) /* ty=Tensor[(11, 11, 8), int64] */
}

def @func_4905() -> Tensor[(13, 6, 8), float64] {
  %439 = fn () -> Tensor[(13, 6, 8), float64] {
    %436 = @func_3590() /* ty=(Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float64]) */;
    %437 = %436.0;
    %438 = cast(%437, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
    sinh(%438) /* ty=Tensor[(13, 6, 8), float64] */
  };
  %439() /* ty=Tensor[(13, 6, 8), float64] */
}

def @func_5376(%var_5324: Tensor[(5, 4, 4), float32]) -> (Tensor[(13, 6, 8), float32], Tensor[(5, 4, 4), float64]) {
  %440 = @func_4377() /* ty=(Tensor[(13, 6, 8), float32],) */;
  %441 = cast(%var_5324, dtype="float32") /* ty=Tensor[(5, 4, 4), float32] */;
  %442 = rsqrt(%441) /* ty=Tensor[(5, 4, 4), float32] */;
  %443 = cast(%var_5324, dtype="bool") /* ty=Tensor[(5, 4, 4), bool] */;
  %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%442, dtype="bool") /* ty=Tensor[(5, 4, 4), bool] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %447 = equal(%445, %446) /* ty=Tensor[(5, 4, 4), bool] */;
  %448 = cast(%447, dtype="float64") /* ty=Tensor[(5, 4, 4), float64] */;
  %449 = %440.0;
  %450 = sqrt(%448) /* ty=Tensor[(5, 4, 4), float64] */;
  (%449, %450)
}

def @func_5099() -> (Tensor[(13, 6, 8), float64],) {
  @func_5097() /* ty=(Tensor[(13, 6, 8), float64],) */
}

def @func_4965() -> (Tensor[(13, 6, 8), float32],) {
  %451 = @func_3396() /* ty=Tensor[(13, 6, 8), float32] */;
  (%451,)
}

def @func_4310() -> (Tensor[(13, 6, 8), float64],) {
  %452 = @func_3590() /* ty=(Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float64]) */;
  %453 = %452.2;
  (%453,)
}

def @func_4967() -> (Tensor[(13, 6, 8), float32],) {
  @func_4965() /* ty=(Tensor[(13, 6, 8), float32],) */
}

def @func_4410() -> Tensor[(13, 6, 8), float64] {
  @func_3801() /* ty=Tensor[(13, 6, 8), float64] */
}

def @func_4532() -> (Tensor[(13, 6, 8), float32],) {
  %456 = fn () -> (Tensor[(13, 6, 8), float32],) {
    %454 = @func_4377() /* ty=(Tensor[(13, 6, 8), float32],) */;
    %455 = %454.0;
    (%455,)
  };
  %456() /* ty=(Tensor[(13, 6, 8), float32],) */
}

def @func_3377(%var_3365: Tensor[(7, 4, 9), bool], %var_3366: Tensor[(7, 4, 9), bool]) -> (Tensor[(7, 4, 9), bool],) {
  %457 = cast(%var_3366, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %458 = shape_of(%var_3365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%var_3365, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %461 = logical_and(%459, %460) /* ty=Tensor[(7, 4, 9), bool] */;
  (%461,)
}

def @func_3122() -> (Tensor[(13, 6, 8), float64],) {
  @func_3120() /* ty=(Tensor[(13, 6, 8), float64],) */
}

def @func_3953() -> Tensor[(13, 6, 8), float64] {
  @func_3951() /* ty=Tensor[(13, 6, 8), float64] */
}

def @func_704(%var_702: Tensor[(10, 12, 11), float64]) -> Tensor[(10, 12, 11), uint64] {
  @func_701(%var_702) /* ty=Tensor[(10, 12, 11), uint64] */
}

def @func_4759(%var_4754: Tensor[(180), float64], %var_4755: Tensor[(1, 2520), float64], %var_4756: Tensor[(968), int64], %var_4757: Tensor[(650), float32], %var_4758: Tensor[(968), int64]) -> (Tensor[(13, 6, 8), float32], Tensor[(1, 12, 15), float64], Tensor[(180), float64], Tensor[(1, 2520), float64], Tensor[(7, 4, 9), bool], Tensor[(6, 42), bool], Tensor[(14, 12, 15), bool], Tensor[(650), float32], Tensor[(1320), float64], Tensor[(968), uint8]) {
  %491 = fn (%var_4721: Tensor[(180), float64], %var_4722: Tensor[(1, 2520), float64], %var_4723: Tensor[(968), int64], %var_4741: Tensor[(650), float32], %var_4749: Tensor[(968), int64]) -> (Tensor[(13, 6, 8), float32], Tensor[(1, 12, 15), float64], Tensor[(180), float64], Tensor[(1, 2520), float64], Tensor[(7, 4, 9), bool], Tensor[(6, 42), bool], Tensor[(14, 12, 15), bool], Tensor[(650), float32], Tensor[(1320), float64], Tensor[(968), uint8]) {
    %462 = @func_4099() /* ty=(Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float32]) */;
    %463 = cast(%var_4721, dtype="float64") /* ty=Tensor[(180), float64] */;
    %464 = cast(%var_4722, dtype="float64") /* ty=Tensor[(1, 2520), float64] */;
    %465 = cast(%var_4723, dtype="int64") /* ty=Tensor[(968), int64] */;
    %466 = reshape(%463, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
    %467 = reshape(%464, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
    %468 = reshape(%465, newshape=[968]) /* ty=Tensor[(968), int64] */;
    %469 = @func_559(%466, %467, %468) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
    %470 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 42), bool] */, dtype="bool") /* ty=Tensor[(6, 42), bool] */;
    %471 = reshape(%470, newshape=[1, 252]) /* ty=Tensor[(1, 252), bool] */;
    %472 = @func_4016(%471) /* ty=(Tensor[(13, 6, 8), float32], Tensor[(7, 4, 9), bool], Tensor[(1, 252), bool]) */;
    %473 = cast(%var_4741, dtype="float32") /* ty=Tensor[(650), float32] */;
    %474 = cast(meta[relay.Constant][32] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
    %475 = cast(%var_4722, dtype="float64") /* ty=Tensor[(1, 2520), float64] */;
    %476 = cast(%var_4723, dtype="int64") /* ty=Tensor[(968), int64] */;
    %477 = reshape(%473, newshape=[10, 13, 5]) /* ty=Tensor[(10, 13, 5), float32] */;
    %478 = reshape(%474, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
    %479 = reshape(%475, newshape=[1260, 2]) /* ty=Tensor[(1260, 2), float64] */;
    %480 = reshape(%476, newshape=[484, 2]) /* ty=Tensor[(484, 2), int64] */;
    %481 = @func_3328(%477, %478, %479, %480) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(10, 13, 5), uint64], Tensor[(10, 12, 11), uint64], Tensor[(1320), float64], Tensor[(14, 12, 15), bool], Tensor[(180, 1), float64], Tensor[(1260, 2), float64], Tensor[(484, 2), int64]) */;
    %482 = cast(%var_4749, dtype="uint8") /* ty=Tensor[(968), uint8] */;
    %483 = shape_of(%var_4723, dtype="int32") /* ty=Tensor[(1), int32] */;
    %484 = cast(%var_4723, dtype="uint8") /* ty=Tensor[(968), uint8] */;
    %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %486 = %462.1;
    %487 = %469.0;
    %488 = %472.1;
    %489 = %481.4;
    %490 = add(%484, %485) /* ty=Tensor[(968), uint8] */;
    (%486, %487, %var_4721, %var_4722, %488, meta[relay.Constant][31] /* ty=Tensor[(6, 42), bool] */, %489, %var_4741, meta[relay.Constant][32] /* ty=Tensor[(1320), float64] */, %490)
  };
  %491(%var_4754, %var_4755, %var_4756, %var_4757, %var_4758) /* ty=(Tensor[(13, 6, 8), float32], Tensor[(1, 12, 15), float64], Tensor[(180), float64], Tensor[(1, 2520), float64], Tensor[(7, 4, 9), bool], Tensor[(6, 42), bool], Tensor[(14, 12, 15), bool], Tensor[(650), float32], Tensor[(1320), float64], Tensor[(968), uint8]) */
}

def @func_5225(%var_5223: Tensor[(14, 8, 5), int16], %var_5224: Tensor[(14, 8, 5), int16]) -> (Tensor[(14, 8, 5), float32], Tensor[(13, 6, 8), float32], Tensor[(14, 8, 5), float32]) {
  @func_5221(%var_5223, %var_5224) /* ty=(Tensor[(14, 8, 5), float32], Tensor[(13, 6, 8), float32], Tensor[(14, 8, 5), float32]) */
}

def @func_564(%var_561: Tensor[(1, 12, 15), float64], %var_562: Tensor[(14, 12, 15), float64], %var_563: Tensor[(968), int64]) -> (Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) {
  @func_559(%var_561, %var_562, %var_563) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */
}

def @func_5827(%var_5826: Tensor[(10, 15, 15), float64]) -> (Tensor[(10, 15, 15), uint32], Tensor[(10, 15, 15), float32]) {
  %504 = fn (%var_5818: Tensor[(10, 15, 15), float64]) -> (Tensor[(10, 15, 15), uint32], Tensor[(10, 15, 15), float32]) {
    %492 = cast(%var_5818, dtype="uint32") /* ty=Tensor[(10, 15, 15), uint32] */;
    %493 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(10, 15, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %494 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 15, 15), float64] */, dtype="uint32") /* ty=Tensor[(10, 15, 15), uint32] */;
    %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %496 = cast(meta[relay.Constant][34] /* ty=Tensor[(10, 15, 15), float64] */, dtype="bool") /* ty=Tensor[(10, 15, 15), bool] */;
    %497 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(10, 15, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %498 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 15, 15), float64] */, dtype="bool") /* ty=Tensor[(10, 15, 15), bool] */;
    %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %500 = equal(%498, %499) /* ty=Tensor[(10, 15, 15), bool] */;
    %501 = cast(%500, dtype="float32") /* ty=Tensor[(10, 15, 15), float32] */;
    %502 = bitwise_and(%494, %495) /* ty=Tensor[(10, 15, 15), uint32] */;
    %503 = tan(%501) /* ty=Tensor[(10, 15, 15), float32] */;
    (%502, %503)
  };
  %504(%var_5826) /* ty=(Tensor[(10, 15, 15), uint32], Tensor[(10, 15, 15), float32]) */
}

def @func_6165(%var_6163: Tensor[(56), uint8]) -> (Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), bool], Tensor[(56), uint8]) {
  @func_6162(%var_6163) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), bool], Tensor[(56), uint8]) */
}

def @func_3196(%var_3194: Tensor[(1, 1650), float32], %var_3195: Tensor[(6, 1650), float32]) -> (Tensor[(13, 6, 8), float64], Tensor[(15, 10, 11), float64], Tensor[(6, 1650), bool]) {
  @func_3192(%var_3194, %var_3195) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(15, 10, 11), float64], Tensor[(6, 1650), bool]) */
}

def @func_1821(%var_1819: Tensor[(7, 1, 8), uint8]) -> Tensor[(7, 15, 8), uint8] {
  @func_1818(%var_1819) /* ty=Tensor[(7, 15, 8), uint8] */
}

def @func_5449() -> (Tensor[(13, 6, 8), float32],) {
  %508 = fn () -> (Tensor[(13, 6, 8), float32],) {
    %505 = @func_3396() /* ty=Tensor[(13, 6, 8), float32] */;
    %506 = cast(%505, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
    %507 = log(%506) /* ty=Tensor[(13, 6, 8), float32] */;
    (%507,)
  };
  %508() /* ty=(Tensor[(13, 6, 8), float32],) */
}

def @func_2915(%var_2914: Tensor[(5, 3), uint16]) -> (Tensor[(5, 3), bool], Tensor[(13, 6, 8), float64]) {
  %516 = fn (%var_2874: Tensor[(5, 3), uint16]) -> (Tensor[(5, 3), bool], Tensor[(13, 6, 8), float64]) {
    %509 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 3), uint16] */, dtype="bool") /* ty=Tensor[(5, 3), bool] */;
    %510 = shape_of(%var_2874, dtype="int32") /* ty=Tensor[(2), int32] */;
    %511 = cast(%var_2874, dtype="bool") /* ty=Tensor[(5, 3), bool] */;
    %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %513 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
    %514 = less_equal(%511, %512) /* ty=Tensor[(5, 3), bool] */;
    %515 = %513.0;
    (%514, %515)
  };
  %516(%var_2914) /* ty=(Tensor[(5, 3), bool], Tensor[(13, 6, 8), float64]) */
}

def @func_4185(%var_4184: Tensor[(14, 4), uint8]) -> (Tensor[(7, 15, 8), uint8], Tensor[(14, 4), uint8], Tensor[(13, 6, 8), bool], Tensor[(12, 12, 9), float32], Tensor[(2520), float64]) {
  %533 = fn (%var_4151: Tensor[(14, 4), uint8]) -> (Tensor[(7, 15, 8), uint8], Tensor[(14, 4), uint8], Tensor[(13, 6, 8), bool], Tensor[(12, 12, 9), float32], Tensor[(2520), float64]) {
    %517 = cast(%var_4151, dtype="uint8") /* ty=Tensor[(14, 4), uint8] */;
    %518 = reshape(%517, newshape=[7, 1, 8]) /* ty=Tensor[(7, 1, 8), uint8] */;
    %519 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
    %520 = %519.0;
    %521 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
    %522 = %521.0;
    %523 = cast(%522, dtype="bool") /* ty=Tensor[(13, 6, 8), bool] */;
    %524 = shape_of(%520, dtype="int32") /* ty=Tensor[(3), int32] */;
    %525 = cast(%520, dtype="bool") /* ty=Tensor[(13, 6, 8), bool] */;
    %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %527 = cast(meta[relay.Constant][36] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
    %528 = reshape(%527, newshape=[2520]) /* ty=Tensor[(2520), float64] */;
    %529 = @func_1593(%528) /* ty=(Tensor[(11, 2, 15), int8], Tensor[(11, 2, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(180), float64], Tensor[(2520), float64], Tensor[(968), int64], Tensor[(11, 11, 8), int64], Tensor[(12, 12, 9), float32], Tensor[(1296), float32]) */;
    %530 = @func_1818(%518) /* ty=Tensor[(7, 15, 8), uint8] */;
    %531 = logical_or(%525, %526) /* ty=Tensor[(13, 6, 8), bool] */;
    %532 = %529.7;
    (%530, %var_4151, %531, %532, meta[relay.Constant][36] /* ty=Tensor[(2520), float64] */)
  };
  %533(%var_4184) /* ty=(Tensor[(7, 15, 8), uint8], Tensor[(14, 4), uint8], Tensor[(13, 6, 8), bool], Tensor[(12, 12, 9), float32], Tensor[(2520), float64]) */
}

def @func_4126(%var_4120: Tensor[(104), float64]) -> (Tensor[(13, 6, 8), float32], Tensor[(756), float32], Tensor[(104), float64], Tensor[(728), float64], Tensor[(2520), float64]) {
  %534 = @func_4099() /* ty=(Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float32]) */;
  %535 = cast(%var_4120, dtype="float64") /* ty=Tensor[(104), float64] */;
  %536 = cast(meta[relay.Constant][37] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %537 = cast(meta[relay.Constant][38] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %538 = reshape(%535, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %539 = reshape(%536, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), float64] */;
  %540 = reshape(%537, newshape=[1, 2520]) /* ty=Tensor[(1, 2520), float64] */;
  %541 = @func_750(%538, %539, %540) /* ty=(Tensor[(7, 8, 13), float64], Tensor[(7, 12, 9), int32], Tensor[(756), float32], Tensor[(968), int8], Tensor[(180), float64], Tensor[(1, 2520), float64], Tensor[(968), int64], Tensor[(756), float64], Tensor[(7, 12, 9), int32]) */;
  %542 = %534.0;
  %543 = %541.2;
  (%542, %543, %var_4120, meta[relay.Constant][37] /* ty=Tensor[(728), float64] */, meta[relay.Constant][38] /* ty=Tensor[(2520), float64] */)
}

def @func_5617(%var_5600: Tensor[(13, 6, 8), float64]) -> (Tensor[(13, 6, 8), uint16], Tensor[(13, 6, 8), float32]) {
  %544 = @func_4497() /* ty=Tensor[(13, 6, 8), float64] */;
  %545 = cast(%var_5600, dtype="uint16") /* ty=Tensor[(13, 6, 8), uint16] */;
  %546 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%544, dtype="uint16") /* ty=Tensor[(13, 6, 8), uint16] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %549 = bitwise_or(%547, %548) /* ty=Tensor[(13, 6, 8), uint16] */;
  %550 = @func_4252() /* ty=Tensor[(13, 6, 8), float32] */;
  (%549, %550)
}

def @func_754(%var_751: Tensor[(1, 8, 13), float64], %var_752: Tensor[(7, 8, 13), float64], %var_753: Tensor[(1, 2520), float64]) -> (Tensor[(7, 8, 13), float64], Tensor[(7, 12, 9), int32], Tensor[(756), float32], Tensor[(968), int8], Tensor[(180), float64], Tensor[(1, 2520), float64], Tensor[(968), int64], Tensor[(756), float64], Tensor[(7, 12, 9), int32]) {
  %576 = fn (%var_715: Tensor[(1, 8, 13), float64], %var_716: Tensor[(7, 8, 13), float64], %var_733: Tensor[(1, 2520), float64]) -> (Tensor[(7, 8, 13), float64], Tensor[(7, 12, 9), int32], Tensor[(756), float32], Tensor[(968), int8], Tensor[(180), float64], Tensor[(1, 2520), float64], Tensor[(968), int64], Tensor[(756), float64], Tensor[(7, 12, 9), int32]) {
    %551 = cast(%var_715, dtype="float64") /* ty=Tensor[(1, 8, 13), float64] */;
    %552 = cast(%var_716, dtype="float64") /* ty=Tensor[(7, 8, 13), float64] */;
    %553 = cast(meta[relay.Constant][39] /* ty=Tensor[(756), int32] */, dtype="int32") /* ty=Tensor[(756), int32] */;
    %554 = reshape(%553, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), int32] */;
    %555 = @func_607(%554) /* ty=(Tensor[(7, 12, 9), int32],) */;
    %556 = cast(meta[relay.Constant][39] /* ty=Tensor[(756), int32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
    %557 = cast(meta[relay.Constant][40] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %558 = cast(%var_733, dtype="float64") /* ty=Tensor[(1, 2520), float64] */;
    %559 = cast(meta[relay.Constant][41] /* ty=Tensor[(968), int64] */, dtype="int64") /* ty=Tensor[(968), int64] */;
    %560 = reshape(%557, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
    %561 = reshape(%558, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
    %562 = reshape(%559, newshape=[968]) /* ty=Tensor[(968), int64] */;
    %563 = @func_559(%560, %561, %562) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
    %564 = cast(meta[relay.Constant][39] /* ty=Tensor[(756), int32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
    %565 = sin(%564) /* ty=Tensor[(756), float32] */;
    %566 = cast(%565, dtype="float64") /* ty=Tensor[(756), float64] */;
    %567 = cast(meta[relay.Constant][39] /* ty=Tensor[(756), int32] */, dtype="int32") /* ty=Tensor[(756), int32] */;
    %568 = reshape(%567, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), int32] */;
    %569 = @func_607(%568) /* ty=(Tensor[(7, 12, 9), int32],) */;
    %570 = power(%551, %552) /* ty=Tensor[(7, 8, 13), float64] */;
    %571 = %555.0;
    %572 = exp(%556) /* ty=Tensor[(756), float32] */;
    %573 = %563.2;
    %574 = acosh(%566) /* ty=Tensor[(756), float64] */;
    %575 = %569.0;
    (%570, %571, %572, %573, meta[relay.Constant][40] /* ty=Tensor[(180), float64] */, %var_733, meta[relay.Constant][41] /* ty=Tensor[(968), int64] */, %574, %575)
  };
  %576(%var_751, %var_752, %var_753) /* ty=(Tensor[(7, 8, 13), float64], Tensor[(7, 12, 9), int32], Tensor[(756), float32], Tensor[(968), int8], Tensor[(180), float64], Tensor[(1, 2520), float64], Tensor[(968), int64], Tensor[(756), float64], Tensor[(7, 12, 9), int32]) */
}

def @func_3267() -> Tensor[(13, 6, 8), float64] {
  %577 = @func_2827() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %577.0
}

def @func_5680() -> Tensor[(13, 6, 8), float64] {
  %578 = fn () -> Tensor[(13, 6, 8), float64] {
    @func_4904() /* ty=Tensor[(13, 6, 8), float64] */
  };
  %578() /* ty=Tensor[(13, 6, 8), float64] */
}

def @func_5784(%var_5781: Tensor[(2, 12, 16), uint32], %var_5782: Tensor[(2, 12, 16), uint32], %var_5783: Tensor[(2, 12, 16), uint32]) -> (Tensor[(7, 12, 9), int32], Tensor[(1, 756), int32], Tensor[(13, 6, 8), float64], Tensor[(9072, 1), float32], Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), float32]) {
  @func_5779(%var_5781, %var_5782, %var_5783) /* ty=(Tensor[(7, 12, 9), int32], Tensor[(1, 756), int32], Tensor[(13, 6, 8), float64], Tensor[(9072, 1), float32], Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), float32]) */
}

def @func_3381(%var_3379: Tensor[(7, 4, 9), bool], %var_3380: Tensor[(7, 4, 9), bool]) -> (Tensor[(7, 4, 9), bool],) {
  @func_3377(%var_3379, %var_3380) /* ty=(Tensor[(7, 4, 9), bool],) */
}

def @func_4412() -> Tensor[(13, 6, 8), float64] {
  @func_4410() /* ty=Tensor[(13, 6, 8), float64] */
}

def @func_5804(%var_5803: Tensor[(15), uint16]) -> (Tensor[(13, 6, 8), float32], Tensor[(5, 3), bool], Tensor[(15), uint16]) {
  %585 = fn (%var_5797: Tensor[(15), uint16]) -> (Tensor[(13, 6, 8), float32], Tensor[(5, 3), bool], Tensor[(15), uint16]) {
    %579 = @func_4099() /* ty=(Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float32]) */;
    %580 = cast(%var_5797, dtype="uint16") /* ty=Tensor[(15), uint16] */;
    %581 = reshape(%580, newshape=[5, 3]) /* ty=Tensor[(5, 3), uint16] */;
    %582 = @func_2913(%581) /* ty=(Tensor[(5, 3), bool], Tensor[(13, 6, 8), float64]) */;
    %583 = %579.0;
    %584 = %582.0;
    (%583, %584, %var_5797)
  };
  %585(%var_5803) /* ty=(Tensor[(13, 6, 8), float32], Tensor[(5, 3), bool], Tensor[(15), uint16]) */
}

def @func_607(%var_599: Tensor[(7, 12, 9), int32]) -> (Tensor[(7, 12, 9), int32],) {
  %586 = cast(%var_599, dtype="int32") /* ty=Tensor[(7, 12, 9), int32] */;
  %587 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(7, 12, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 12, 9), int32] */, dtype="int32") /* ty=Tensor[(7, 12, 9), int32] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %590 = maximum(%588, %589) /* ty=Tensor[(7, 12, 9), int32] */;
  (%590,)
}

def @func_5858() -> (Tensor[(13, 6, 8), float64],) {
  %593 = fn () -> (Tensor[(13, 6, 8), float64],) {
    %591 = @func_5097() /* ty=(Tensor[(13, 6, 8), float64],) */;
    %592 = %591.0;
    (%592,)
  };
  %593() /* ty=(Tensor[(13, 6, 8), float64],) */
}

def @func_5292() -> (Tensor[(13, 6, 8), float32], Tensor[(11, 11, 8), int64], Tensor[(968), int64]) {
  %594 = @func_4965() /* ty=(Tensor[(13, 6, 8), float32],) */;
  %595 = cast(meta[relay.Constant][43] /* ty=Tensor[(968), int64] */, dtype="int64") /* ty=Tensor[(968), int64] */;
  %596 = reshape(%595, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), int64] */;
  %597 = %594.0;
  %598 = @func_511(%596) /* ty=Tensor[(11, 11, 8), int64] */;
  (%597, %598, meta[relay.Constant][43] /* ty=Tensor[(968), int64] */)
}

def @func_3714(%var_3700: Tensor[(16, 3, 9), uint64], %var_3701: Tensor[(16, 3, 9), uint64]) -> (Tensor[(16, 3, 9), uint64], Tensor[(12, 7, 8), float32], Tensor[(672), float32]) {
  %599 = cast(%var_3701, dtype="uint64") /* ty=Tensor[(16, 3, 9), uint64] */;
  %600 = shape_of(%var_3700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%var_3700, dtype="uint64") /* ty=Tensor[(16, 3, 9), uint64] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %603 = cast(meta[relay.Constant][44] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %604 = reshape(%603, newshape=[12, 7, 8]) /* ty=Tensor[(12, 7, 8), float32] */;
  %605 = bitwise_or(%601, %602) /* ty=Tensor[(16, 3, 9), uint64] */;
  %606 = @func_2034(%604) /* ty=Tensor[(12, 7, 8), float32] */;
  (%605, %606, meta[relay.Constant][44] /* ty=Tensor[(672), float32] */)
}

def @func_2805() -> (Tensor[(13, 6, 8), float64],) {
  %609 = fn () -> (Tensor[(13, 6, 8), float64],) {
    %607 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 6, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
    %608 = erf(%607) /* ty=Tensor[(13, 6, 8), float64] */;
    (%608,)
  };
  %609() /* ty=(Tensor[(13, 6, 8), float64],) */
}

def @func_3543(%var_3538: Tensor[(9, 14, 1), float64], %var_3539: Tensor[(9, 14, 6), float64], %var_3540: Tensor[(9, 14, 13), float32], %var_3541: int16, %var_3542: Tensor[(880), float64]) -> (Tensor[(968, 1), int64], Tensor[(9, 14, 6), bool], Tensor[(180), float64], Tensor[(9, 14, 13), bool], Tensor[(880), uint32], int16, Tensor[(480), int16], Tensor[(880), float64], Tensor[(9, 14, 13), bool]) {
  @func_3536(%var_3538, %var_3539, %var_3540, %var_3541, %var_3542) /* ty=(Tensor[(968, 1), int64], Tensor[(9, 14, 6), bool], Tensor[(180), float64], Tensor[(9, 14, 13), bool], Tensor[(880), uint32], int16, Tensor[(480), int16], Tensor[(880), float64], Tensor[(9, 14, 13), bool]) */
}

def @func_3120() -> (Tensor[(13, 6, 8), float64],) {
  %610 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %611 = %610.0;
  (%611,)
}

def @func_2467(%var_2463: int16, %var_2464: Tensor[(15, 4, 8), int16], %var_2465: Tensor[(880), float64], %var_2466: Tensor[(5, 11, 16), float64]) -> (Tensor[(15, 4, 8), int16], Tensor[(880), uint32], Tensor[(5, 11, 16), bool]) {
  %629 = fn (%var_2412: int16, %var_2413: Tensor[(15, 4, 8), int16], %var_2434: Tensor[(880), float64], %var_2443: Tensor[(5, 11, 16), float64]) -> (Tensor[(15, 4, 8), int16], Tensor[(880), uint32], Tensor[(5, 11, 16), bool]) {
    %612 = cast(%var_2412, dtype="int16") /* ty=int16 */;
    %613 = cast(%var_2413, dtype="int16") /* ty=Tensor[(15, 4, 8), int16] */;
    %614 = cast(%var_2434, dtype="uint32") /* ty=Tensor[(880), uint32] */;
    %615 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(880), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %616 = cast(meta[relay.Constant][46] /* ty=Tensor[(880), float64] */, dtype="uint32") /* ty=Tensor[(880), uint32] */;
    %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %618 = cast(meta[relay.Constant][46] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
    %619 = reshape(%618, newshape=[5, 11, 16]) /* ty=Tensor[(5, 11, 16), float64] */;
    %620 = @func_1476(%619) /* ty=(Tensor[(5, 11, 16), float64],) */;
    %621 = %620.0;
    %622 = cast(%var_2443, dtype="bool") /* ty=Tensor[(5, 11, 16), bool] */;
    %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
    %624 = cast(%621, dtype="bool") /* ty=Tensor[(5, 11, 16), bool] */;
    %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %626 = bitwise_and(%612, %613) /* ty=Tensor[(15, 4, 8), int16] */;
    %627 = left_shift(%616, %617) /* ty=Tensor[(880), uint32] */;
    %628 = greater_equal(%624, %625) /* ty=Tensor[(5, 11, 16), bool] */;
    (%626, %627, %628)
  };
  %629(%var_2463, %var_2464, %var_2465, %var_2466) /* ty=(Tensor[(15, 4, 8), int16], Tensor[(880), uint32], Tensor[(5, 11, 16), bool]) */
}

def @func_3782(%var_3781: Tensor[(13, 6, 8), float64]) -> Tensor[(13, 6, 8), int8] {
  %635 = fn (%var_3765: Tensor[(13, 6, 8), float64]) -> Tensor[(13, 6, 8), int8] {
    %630 = @func_3267() /* ty=Tensor[(13, 6, 8), float64] */;
    %631 = cast(%var_3765, dtype="int8") /* ty=Tensor[(13, 6, 8), int8] */;
    %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
    %633 = cast(%630, dtype="int8") /* ty=Tensor[(13, 6, 8), int8] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    minimum(%633, %634) /* ty=Tensor[(13, 6, 8), int8] */
  };
  %635(%var_3781) /* ty=Tensor[(13, 6, 8), int8] */
}

def @func_3536(%var_3465: Tensor[(9, 14, 1), float64], %var_3477: Tensor[(9, 14, 6), float64], %var_3483: Tensor[(9, 14, 13), float32], %var_3515: int16, %var_3517: Tensor[(880), float64]) -> (Tensor[(968, 1), int64], Tensor[(9, 14, 6), bool], Tensor[(180), float64], Tensor[(9, 14, 13), bool], Tensor[(880), uint32], int16, Tensor[(480), int16], Tensor[(880), float64], Tensor[(9, 14, 13), bool]) {
  %636 = cast(%var_3465, dtype="float64") /* ty=Tensor[(9, 14, 1), float64] */;
  %637 = asinh(%636) /* ty=Tensor[(9, 14, 1), float64] */;
  %638 = cast(%637, dtype="bool") /* ty=Tensor[(9, 14, 1), bool] */;
  %639 = cast(%var_3477, dtype="bool") /* ty=Tensor[(9, 14, 6), bool] */;
  %640 = cast(meta[relay.Constant][47] /* ty=Tensor[(968, 1), int64] */, dtype="int64") /* ty=Tensor[(968, 1), int64] */;
  %641 = reshape(%640, newshape=[1, 968]) /* ty=Tensor[(1, 968), int64] */;
  %642 = @func_2954(%641) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(968), int8], Tensor[(180), float64], Tensor[(630, 4), float64], Tensor[(1, 968), int64]) */;
  %643 = %642.2;
  %644 = cast(%643, dtype="float64") /* ty=Tensor[(180), float64] */;
  %645 = cast(%637, dtype="bool") /* ty=Tensor[(9, 14, 1), bool] */;
  %646 = cast(%var_3483, dtype="bool") /* ty=Tensor[(9, 14, 13), bool] */;
  %647 = cast(%var_3515, dtype="int16") /* ty=int16 */;
  %648 = cast(meta[relay.Constant][48] /* ty=Tensor[(480), int16] */, dtype="int16") /* ty=Tensor[(480), int16] */;
  %649 = cast(%var_3517, dtype="float64") /* ty=Tensor[(880), float64] */;
  %650 = cast(%var_3517, dtype="float64") /* ty=Tensor[(880), float64] */;
  %651 = reshape(%647, newshape=[]) /* ty=int16 */;
  %652 = reshape(%648, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), int16] */;
  %653 = reshape(%649, newshape=[880]) /* ty=Tensor[(880), float64] */;
  %654 = reshape(%650, newshape=[5, 11, 16]) /* ty=Tensor[(5, 11, 16), float64] */;
  %655 = @func_2462(%651, %652, %653, %654) /* ty=(Tensor[(15, 4, 8), int16], Tensor[(880), uint32], Tensor[(5, 11, 16), bool]) */;
  %656 = cast(%637, dtype="float32") /* ty=Tensor[(9, 14, 1), float32] */;
  %657 = cos(%656) /* ty=Tensor[(9, 14, 1), float32] */;
  %658 = cast(%657, dtype="int16") /* ty=Tensor[(9, 14, 1), int16] */;
  %659 = cast(%var_3483, dtype="int16") /* ty=Tensor[(9, 14, 13), int16] */;
  %660 = bitwise_xor(%658, %659) /* ty=Tensor[(9, 14, 13), int16] */;
  %661 = cast(%var_3483, dtype="bool") /* ty=Tensor[(9, 14, 13), bool] */;
  %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%660, dtype="bool") /* ty=Tensor[(9, 14, 13), bool] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %665 = logical_or(%638, %639) /* ty=Tensor[(9, 14, 6), bool] */;
  %666 = sinh(%644) /* ty=Tensor[(180), float64] */;
  %667 = logical_or(%645, %646) /* ty=Tensor[(9, 14, 13), bool] */;
  %668 = %655.1;
  %669 = less(%663, %664) /* ty=Tensor[(9, 14, 13), bool] */;
  (meta[relay.Constant][47] /* ty=Tensor[(968, 1), int64] */, %665, %666, %667, %668, %var_3515, meta[relay.Constant][48] /* ty=Tensor[(480), int16] */, %var_3517, %669)
}

def @func_2034(%var_2030: Tensor[(12, 7, 8), float32]) -> Tensor[(12, 7, 8), float32] {
  %670 = cast(%var_2030, dtype="float32") /* ty=Tensor[(12, 7, 8), float32] */;
  sin(%670) /* ty=Tensor[(12, 7, 8), float32] */
}

def @func_3328(%var_3270: Tensor[(10, 13, 5), float32], %var_3303: Tensor[(1320), float64], %var_3312: Tensor[(1260, 2), float64], %var_3313: Tensor[(484, 2), int64]) -> (Tensor[(13, 6, 8), float64], Tensor[(10, 13, 5), uint64], Tensor[(10, 12, 11), uint64], Tensor[(1320), float64], Tensor[(14, 12, 15), bool], Tensor[(180, 1), float64], Tensor[(1260, 2), float64], Tensor[(484, 2), int64]) {
  %671 = @func_2804() /* ty=(Tensor[(13, 6, 8), float64],) */;
  %672 = cast(%var_3270, dtype="float32") /* ty=Tensor[(10, 13, 5), float32] */;
  %673 = asin(%672) /* ty=Tensor[(10, 13, 5), float32] */;
  %674 = cast(%673, dtype="float64") /* ty=Tensor[(10, 13, 5), float64] */;
  %675 = acos(%674) /* ty=Tensor[(10, 13, 5), float64] */;
  %676 = cast(%673, dtype="uint64") /* ty=Tensor[(10, 13, 5), uint64] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%675, dtype="uint64") /* ty=Tensor[(10, 13, 5), uint64] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %680 = cast(%var_3303, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %681 = reshape(%680, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), float64] */;
  %682 = cast(meta[relay.Constant][49] /* ty=Tensor[(180, 1), float64] */, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %683 = cast(%var_3312, dtype="float64") /* ty=Tensor[(1260, 2), float64] */;
  %684 = cast(%var_3313, dtype="int64") /* ty=Tensor[(484, 2), int64] */;
  %685 = reshape(%682, newshape=[1, 12, 15]) /* ty=Tensor[(1, 12, 15), float64] */;
  %686 = reshape(%683, newshape=[14, 12, 15]) /* ty=Tensor[(14, 12, 15), float64] */;
  %687 = reshape(%684, newshape=[968]) /* ty=Tensor[(968), int64] */;
  %688 = @func_559(%685, %686, %687) /* ty=(Tensor[(1, 12, 15), float64], Tensor[(14, 12, 15), bool], Tensor[(968), int8]) */;
  %689 = %671.0;
  %690 = logical_xor(%678, %679) /* ty=Tensor[(10, 13, 5), uint64] */;
  %691 = @func_701(%681) /* ty=Tensor[(10, 12, 11), uint64] */;
  %692 = %688.1;
  (%689, %690, %691, %var_3303, %692, meta[relay.Constant][49] /* ty=Tensor[(180, 1), float64] */, %var_3312, %var_3313)
}

def @func_3892(%var_3890: Tensor[(4, 16), float32], %var_3891: Tensor[(364, 2), float64]) -> (Tensor[(13, 6, 8), float64], Tensor[(756), int32], Tensor[(4, 16), float32], Tensor[(1320), float64], Tensor[(364, 2), float64]) {
  %703 = fn (%var_3883: Tensor[(4, 16), float32], %var_3885: Tensor[(364, 2), float64]) -> (Tensor[(13, 6, 8), float64], Tensor[(756), int32], Tensor[(4, 16), float32], Tensor[(1320), float64], Tensor[(364, 2), float64]) {
    %693 = @func_3590() /* ty=(Tensor[(13, 6, 8), float64], Tensor[(13, 6, 8), float32], Tensor[(13, 6, 8), float64]) */;
    %694 = cast(%var_3883, dtype="float32") /* ty=Tensor[(4, 16), float32] */;
    %695 = cast(meta[relay.Constant][50] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
    %696 = cast(%var_3885, dtype="float64") /* ty=Tensor[(364, 2), float64] */;
    %697 = reshape(%694, newshape=[4, 1, 16]) /* ty=Tensor[(4, 1, 16), float32] */;
    %698 = reshape(%695, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
    %699 = reshape(%696, newshape=[728]) /* ty=Tensor[(728), float64] */;
    %700 = @func_1110(%697, %698, %699) /* ty=(Tensor[(1320), float64], Tensor[(7, 12, 9), int32], Tensor[(756), int32], Tensor[(7, 12, 9), int32], Tensor[(7, 12, 9), int32], Tensor[(1, 12, 15), float64], Tensor[(180), float64], Tensor[(2520), float64], Tensor[(968), int64], Tensor[(4, ?, 16), float64], Tensor[(968), int8], Tensor[(756), float64], Tensor[(104), float64], Tensor[(728), float64], Tensor[(10, 12, 11), float32]) */;
    %701 = %693.0;
    %702 = %700.2;
    (%701, %702, %var_3883, meta[relay.Constant][50] /* ty=Tensor[(1320), float64] */, %var_3885)
  };
  %703(%var_3890, %var_3891) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(756), int32], Tensor[(4, 16), float32], Tensor[(1320), float64], Tensor[(364, 2), float64]) */
}

def @func_5184() -> (Tensor[(13, 6, 8), float64],) {
  @func_5182() /* ty=(Tensor[(13, 6, 8), float64],) */
}

def @func_1476(%var_1470: Tensor[(5, 11, 16), float64]) -> (Tensor[(5, 11, 16), float64],) {
  %704 = cast(%var_1470, dtype="float64") /* ty=Tensor[(5, 11, 16), float64] */;
  %705 = log10(%704) /* ty=Tensor[(5, 11, 16), float64] */;
  (%705,)
}

def @func_5930() -> (Tensor[(13, 6, 8), float32],) {
  %708 = fn () -> (Tensor[(13, 6, 8), float32],) {
    %706 = @func_5448() /* ty=(Tensor[(13, 6, 8), float32],) */;
    %707 = %706.0;
    (%707,)
  };
  %708() /* ty=(Tensor[(13, 6, 8), float32],) */
}

def @func_306(%var_305: Tensor[(12, 12, 9), float32]) -> Tensor[(12, 12, 9), float32] {
  %711 = fn (%var_300: Tensor[(12, 12, 9), float32]) -> Tensor[(12, 12, 9), float32] {
    %709 = cast(-7.6959f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %710 = cast(%var_300, dtype="float32") /* ty=Tensor[(12, 12, 9), float32] */;
    floor_divide(%709, %710) /* ty=Tensor[(12, 12, 9), float32] */
  };
  %711(%var_305) /* ty=Tensor[(12, 12, 9), float32] */
}

def @func_4499() -> Tensor[(13, 6, 8), float64] {
  @func_4497() /* ty=Tensor[(13, 6, 8), float64] */
}

def @func_5075(%var_5073: Tensor[(968), int64], %var_5074: Tensor[(968), int64]) -> (Tensor[(13, 6, 8), float64], Tensor[(14, 12, 15), bool], Tensor[(180), float64], Tensor[(2520), float64], Tensor[(968), int16]) {
  @func_5071(%var_5073, %var_5074) /* ty=(Tensor[(13, 6, 8), float64], Tensor[(14, 12, 15), bool], Tensor[(180), float64], Tensor[(2520), float64], Tensor[(968), int16]) */
}

def @func_701(%var_692: Tensor[(10, 12, 11), float64]) -> Tensor[(10, 12, 11), uint64] {
  %712 = cast(%var_692, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
  %713 = erf(%712) /* ty=Tensor[(10, 12, 11), float64] */;
  %714 = cast(%var_692, dtype="uint64") /* ty=Tensor[(10, 12, 11), uint64] */;
  %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%713, dtype="uint64") /* ty=Tensor[(10, 12, 11), uint64] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  maximum(%716, %717) /* ty=Tensor[(10, 12, 11), uint64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen103/build/output.py:1618: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen103/build/output.py:1623: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen103/build/output.py:1656: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen103/build/output.py:1661: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen103/build/output.py:1666: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen103/build/output.py:1671: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='cuda')

===================================
#[version = "0.0.5"]
type GradCell[T] {
  Raw(T),
  One(fn () -> T),
  Zero(fn () -> T),
}

def @main() -> ((Tensor[(1, 14, 13), uint16],), ()) {
  %0 = (meta[relay.Constant][0] /* ty=Tensor[(1, 14, 13), uint16] */,);
  %1 = ();
  (%0, %1)
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  match (%g) {
    Raw(%x: T) => {
      %x
    },
    One(%x1: fn () -> T) => {
      %x1() /* ty=T */
    },
    Zero(%x2: fn () -> T) => {
      %x2() /* ty=T */
    },
  }
}

def @MultiplyGradCell[T](%multiply: fn (T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  %2 = (%l, %r);
  match (%2) {
    (Zero(_), _) => {
      %l
    },
    (_, Zero(_)) => {
      %r
    },
    (One(_), _) => {
      %r
    },
    (_, One(_)) => {
      %l
    },
    _ => {
      %3 = match (%l) {
        Raw(%x3: T) => {
          %x3
        },
        One(%x4: fn () -> T) => {
          %x4() /* ty=T */
        },
        Zero(%x5: fn () -> T) => {
          %x5() /* ty=T */
        },
      };
      %4 = match (%r) {
        Raw(%x6: T) => {
          %x6
        },
        One(%x7: fn () -> T) => {
          %x7() /* ty=T */
        },
        Zero(%x8: fn () -> T) => {
          %x8() /* ty=T */
        },
      };
      %5 = %multiply(%3, %4) /* ty=T */;
      Raw(%5) /* ty=GradCell[T] */
    },
  }
}

def @AddGradCell[T](%add: fn (T, T) -> T, %l1: GradCell[T], %r1: GradCell[T]) -> GradCell[T] {
  %6 = (%l1, %r1);
  match (%6) {
    (Zero(_), _) => {
      %r1
    },
    (_, Zero(_)) => {
      %l1
    },
    _ => {
      %7 = match (%l1) {
        Raw(%x9: T) => {
          %x9
        },
        One(%x10: fn () -> T) => {
          %x10() /* ty=T */
        },
        Zero(%x11: fn () -> T) => {
          %x11() /* ty=T */
        },
      };
      %8 = match (%r1) {
        Raw(%x12: T) => {
          %x12
        },
        One(%x13: fn () -> T) => {
          %x13() /* ty=T */
        },
        Zero(%x14: fn () -> T) => {
          %x14() /* ty=T */
        },
      };
      %9 = %add(%7, %8) /* ty=T */;
      Raw(%9) /* ty=GradCell[T] */
    },
  }
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
