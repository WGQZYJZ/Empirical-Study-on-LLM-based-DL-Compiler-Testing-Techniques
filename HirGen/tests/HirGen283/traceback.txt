==========mod==========
#[version = "0.0.5"]
def @func_4964(%var_4955: Tensor[(3, 15, 12), int32], %var_4956: Tensor[(3, 15, 12), int32]) -> (Tensor[(3, 15, 12), int32],) {
  %0 = cast(%var_4956, dtype="int32") /* ty=Tensor[(3, 15, 12), int32] */;
  %1 = shape_of(%var_4955, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_4955, dtype="int32") /* ty=Tensor[(3, 15, 12), int32] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %4 = multiply(%2, %3) /* ty=Tensor[(3, 15, 12), int32] */;
  (%4,)
}

def @func_6176() -> (Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(12), float32]) {
  %5 = @func_2686() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %6 = @func_5718() /* ty=(Tensor[(13, 7, 16), bool],) */;
  %7 = @func_4041() /* ty=(Tensor[(12), float32],) */;
  %8 = %5.0;
  %9 = %6.0;
  %10 = %7.0;
  (%8, %9, %10)
}

def @func_5582(%var_5568: Tensor[(9, 8, 8), float64]) -> (Tensor[(9, 8, 8), float64], Tensor[(12, 9, 9), float64]) {
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(9, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 8, 8), float64] */;
  %12 = shape_of(%var_5568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%var_5568, dtype="float64") /* ty=Tensor[(9, 8, 8), float64] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %15 = divide(%13, %14) /* ty=Tensor[(9, 8, 8), float64] */;
  %16 = @func_4571() /* ty=Tensor[(12, 9, 9), float64] */;
  (%15, %16)
}

def @func_4041() -> (Tensor[(12), float32],) {
  %17 = @func_3212() /* ty=(Tensor[(12), float32],) */;
  %18 = %17.0;
  (%18,)
}

def @func_4571() -> Tensor[(12, 9, 9), float64] {
  @func_2096() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_2531(%var_2521: Tensor[(16, 12, 9), uint64], %var_2522: Tensor[(16, 12, 9), uint64]) -> Tensor[(16, 12, 9), bool] {
  %19 = cast(%var_2522, dtype="bool") /* ty=Tensor[(16, 12, 9), bool] */;
  %20 = shape_of(%var_2521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%var_2521, dtype="bool") /* ty=Tensor[(16, 12, 9), bool] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%21, %22) /* ty=Tensor[(16, 12, 9), bool] */
}

def @func_6529() -> (Tensor[(12, 9, 9), float64], Tensor[(256), float32], Tensor[(1287), float32]) {
  %23 = @func_2248() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool], Tensor[(12, 9, 9), float64]) */;
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %25 = reshape(%24, newshape=[1287]) /* ty=Tensor[(1287), float32] */;
  %26 = @func_4462(%25) /* ty=(Tensor[(256), float32], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1287), float32], Tensor[(12, 9, 9), float64]) */;
  %27 = %23.5;
  %28 = %26.0;
  (%27, %28, meta[relay.Constant][1] /* ty=Tensor[(1287), float32] */)
}

def @func_6110(%var_6085: Tensor[(30), float32], %var_6086: Tensor[(1287), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(30), float32], Tensor[(1287), float32], Tensor[(273), bool]) {
  %29 = @func_4047() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %30 = cast(%var_6085, dtype="float32") /* ty=Tensor[(30), float32] */;
  %31 = cast(%var_6086, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %32 = cast(meta[relay.Constant][2] /* ty=Tensor[(273), uint8] */, dtype="uint8") /* ty=Tensor[(273), uint8] */;
  %33 = reshape(%30, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
  %34 = reshape(%31, newshape=[143, 9]) /* ty=Tensor[(143, 9), float32] */;
  %35 = reshape(%32, newshape=[273, 1]) /* ty=Tensor[(273, 1), uint8] */;
  %36 = @func_1024(%33, %34, %35) /* ty=(Tensor[(12, 140), float64], Tensor[(5, ?, 6), uint16], Tensor[(143, 9), bool], Tensor[(143, 9), float32], Tensor[(7, 13, 3), bool], Tensor[(273, 1), uint8]) */;
  %37 = %36.5;
  %38 = cast(%37, dtype="float32") /* ty=Tensor[(273, 1), float32] */;
  %39 = cos(%38) /* ty=Tensor[(273, 1), float32] */;
  %40 = cast(%39, dtype="float32") /* ty=Tensor[(273, 1), float32] */;
  %41 = atan(%40) /* ty=Tensor[(273, 1), float32] */;
  %42 = cast(%41, dtype="bool") /* ty=Tensor[(273, 1), bool] */;
  %43 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(273), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %44 = cast(meta[relay.Constant][2] /* ty=Tensor[(273), uint8] */, dtype="bool") /* ty=Tensor[(273), bool] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?), bool] */;
  %46 = %29.0;
  %47 = not_equal(%44, %45) /* ty=Tensor[(273), bool] */;
  (%46, %var_6085, %var_6086, %47)
}

def @func_3388() -> (Tensor[(12, 9, 9), float64],) {
  %48 = @func_3281() /* ty=Tensor[(12, 9, 9), float64] */;
  (%48,)
}

def @func_4492() -> (Tensor[(16, 16), float32], Tensor[(12, 9, 9), float64], Tensor[(1287), float32], Tensor[(12, 7, 12), float32], Tensor[(1008), float32]) {
  %49 = @func_2493() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(16, 16), float32], Tensor[(256), float32]) */;
  %50 = cast(meta[relay.Constant][3] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %51 = reshape(%50, newshape=[429, 3]) /* ty=Tensor[(429, 3), float32] */;
  %52 = @func_3146(%51) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(429, 3), float32], Tensor[(9, 11, 13), float64], Tensor[(12, 9, 9), float64]) */;
  %53 = cast(meta[relay.Constant][4] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %54 = reshape(%53, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), float32] */;
  %55 = @func_1967(%54) /* ty=(Tensor[(12, 7, 12), float32],) */;
  %56 = %49.1;
  %57 = %52.0;
  %58 = %55.0;
  (%56, %57, meta[relay.Constant][3] /* ty=Tensor[(1287), float32] */, %58, meta[relay.Constant][4] /* ty=Tensor[(1008), float32] */)
}

def @func_7292(%var_7274: Tensor[(14, 11, 2), int64], %var_7275: Tensor[(14, 11, 2), int64]) -> (Tensor[(13, 7, 16), bool], Tensor[(14, 11, 2), bool]) {
  %59 = @func_3036() /* ty=(Tensor[(13, 7, 16), bool],) */;
  %60 = cast(%var_7275, dtype="int64") /* ty=Tensor[(14, 11, 2), int64] */;
  %61 = shape_of(%var_7274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%var_7274, dtype="int64") /* ty=Tensor[(14, 11, 2), int64] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %64 = bitwise_xor(%62, %63) /* ty=Tensor[(14, 11, 2), int64] */;
  %65 = cast(%64, dtype="bool") /* ty=Tensor[(14, 11, 2), bool] */;
  %66 = shape_of(%var_7274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%var_7274, dtype="bool") /* ty=Tensor[(14, 11, 2), bool] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %69 = %59.0;
  %70 = not_equal(%67, %68) /* ty=Tensor[(14, 11, 2), bool] */;
  (%69, %70)
}

def @func_7487(%var_7424: Tensor[(15, 15, 11), float32], %var_7448: Tensor[(40), uint16], %var_7455: Tensor[(560), uint16]) -> (Tensor[(5, 2, 4), bool], Tensor[(40), uint16], Tensor[(14, 8, 5), uint16], Tensor[(560), uint16], Tensor[(15, 15, 11), float64]) {
  %71 = cast(%var_7448, dtype="uint16") /* ty=Tensor[(40), uint16] */;
  %72 = cast(%var_7448, dtype="uint16") /* ty=Tensor[(40), uint16] */;
  %73 = reshape(%71, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), uint16] */;
  %74 = reshape(%72, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), uint16] */;
  %75 = @func_2573(%73, %74) /* ty=(Tensor[(5, 2, 4), bool],) */;
  %76 = cast(%var_7455, dtype="uint16") /* ty=Tensor[(560), uint16] */;
  %77 = cast(%var_7455, dtype="uint16") /* ty=Tensor[(560), uint16] */;
  %78 = reshape(%76, newshape=[14, 8, 5]) /* ty=Tensor[(14, 8, 5), uint16] */;
  %79 = reshape(%77, newshape=[14, 8, 5]) /* ty=Tensor[(14, 8, 5), uint16] */;
  %80 = @func_4721(%78, %79) /* ty=(Tensor[(14, 8, 5), uint16],) */;
  %81 = cast(%var_7424, dtype="float32") /* ty=Tensor[(15, 15, 11), float32] */;
  %82 = log(%81) /* ty=Tensor[(15, 15, 11), float32] */;
  %83 = cast(%var_7424, dtype="float64") /* ty=Tensor[(15, 15, 11), float64] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="float64") /* ty=Tensor[(15, 15, 11), float64] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %87 = %75.0;
  %88 = %80.0;
  %89 = floor_divide(%85, %86) /* ty=Tensor[(15, 15, 11), float64] */;
  (%87, %var_7448, %88, %var_7455, %89)
}

def @func_3753(%var_3737: Tensor[(720), int64]) -> (Tensor[(12), float32], Tensor[(12, 9, 9), uint16], Tensor[(15, 4, 12), float32], Tensor[(720), int64], Tensor[(12, 9, 9), float64]) {
  %90 = @func_3212() /* ty=(Tensor[(12), float32],) */;
  %91 = @func_3008() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %92 = cast(%var_3737, dtype="int64") /* ty=Tensor[(720), int64] */;
  %93 = cast(%var_3737, dtype="int64") /* ty=Tensor[(720), int64] */;
  %94 = reshape(%92, newshape=[15, 4, 12]) /* ty=Tensor[(15, 4, 12), int64] */;
  %95 = reshape(%93, newshape=[15, 4, 12]) /* ty=Tensor[(15, 4, 12), int64] */;
  %96 = @func_3598(%94, %95) /* ty=(Tensor[(15, 4, 12), int64], Tensor[(15, 4, 12), float32]) */;
  %97 = %90.0;
  %98 = %91.0;
  %99 = %96.1;
  %100 = @func_2547() /* ty=Tensor[(12, 9, 9), float64] */;
  (%97, %98, %99, %var_3737, %100)
}

def @func_2649(%var_2624: Tensor[(13, 7, 16), bool], %var_2636: Tensor[(13, 7, 16), bool]) -> Tensor[(13, 7, 16), uint8] {
  %101 = @func_2248() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool], Tensor[(12, 9, 9), float64]) */;
  %102 = %101.3;
  %103 = cast(%var_2624, dtype="bool") /* ty=Tensor[(13, 7, 16), bool] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%102, dtype="bool") /* ty=Tensor[(13, 7, 16), bool] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %107 = logical_and(%105, %106) /* ty=Tensor[(13, 7, 16), bool] */;
  %108 = cast(%var_2636, dtype="uint8") /* ty=Tensor[(13, 7, 16), uint8] */;
  %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%107, dtype="uint8") /* ty=Tensor[(13, 7, 16), uint8] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  subtract(%110, %111) /* ty=Tensor[(13, 7, 16), uint8] */
}

def @func_4883(%var_4865: Tensor[(12, 9, 3), float32]) -> (Tensor[(12, 9, 3), bool], Tensor[(5, 2, 4), bool], uint16, Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) {
  %112 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 9, 3), float32] */, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
  %113 = rsqrt(%112) /* ty=Tensor[(12, 9, 3), float32] */;
  %114 = cast(%var_4865, dtype="bool") /* ty=Tensor[(12, 9, 3), bool] */;
  %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%113, dtype="bool") /* ty=Tensor[(12, 9, 3), bool] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %118 = cast(meta[relay.Constant][6] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %119 = reshape(%118, newshape=[]) /* ty=uint16 */;
  %120 = @func_4093(%119) /* ty=(Tensor[(2, 10, 2), uint16], Tensor[(5, 2, 4), bool]) */;
  %121 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %122 = logical_or(%116, %117) /* ty=Tensor[(12, 9, 3), bool] */;
  %123 = %120.1;
  %124 = @func_4525() /* ty=Tensor[(12, 9, 9), float64] */;
  %125 = %121.0;
  (%122, %123, meta[relay.Constant][6] /* ty=uint16 */, %124, %125)
}

def @func_3182() -> (Tensor[(12, 9, 9), uint16],) {
  %126 = @func_2732() /* ty=Tensor[(12, 9, 9), uint16] */;
  (%126,)
}

def @func_7329() -> (Tensor[(12), float32],) {
  %127 = @func_5523() /* ty=(Tensor[(12), float32],) */;
  %128 = %127.0;
  (%128,)
}

def @func_3913() -> (Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float64]) {
  %129 = @func_1821() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %130 = @func_3657() /* ty=Tensor[(12, 9, 9), bool] */;
  %131 = %129.0;
  (%130, %131)
}

def @func_2732() -> Tensor[(12, 9, 9), uint16] {
  %132 = @func_2686() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %133 = %132.0;
  %134 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 9, 9), float64] */, dtype="uint16") /* ty=Tensor[(12, 9, 9), uint16] */;
  %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%133, dtype="uint16") /* ty=Tensor[(12, 9, 9), uint16] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  minimum(%136, %137) /* ty=Tensor[(12, 9, 9), uint16] */
}

def @func_6869(%var_6864: Tensor[(936), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(6, 13, 12), float32], Tensor[(936), float32]) {
  %138 = @func_2707() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %139 = cast(%var_6864, dtype="float32") /* ty=Tensor[(936), float32] */;
  %140 = reshape(%139, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float32] */;
  %141 = @func_6146(%140) /* ty=(Tensor[(6, 13, 12), float32],) */;
  %142 = %138.0;
  %143 = %141.0;
  (%142, %143, %var_6864)
}

def @func_2383(%var_2365: Tensor[(9, 14, 14), int32], %var_2375: Tensor[(9, 14, 14), bool]) -> (Tensor[(9, 14, 14), uint16],) {
  %144 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 14, 14), int32] */, dtype="int32") /* ty=Tensor[(9, 14, 14), int32] */;
  %145 = shape_of(%var_2365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%var_2365, dtype="int32") /* ty=Tensor[(9, 14, 14), int32] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %148 = left_shift(%146, %147) /* ty=Tensor[(9, 14, 14), int32] */;
  %149 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 14, 14), int32] */, dtype="bool") /* ty=Tensor[(9, 14, 14), bool] */;
  %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%148, dtype="bool") /* ty=Tensor[(9, 14, 14), bool] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %153 = less_equal(%151, %152) /* ty=Tensor[(9, 14, 14), bool] */;
  %154 = cast(%var_2375, dtype="uint16") /* ty=Tensor[(9, 14, 14), uint16] */;
  %155 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%153, dtype="uint16") /* ty=Tensor[(9, 14, 14), uint16] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %158 = bitwise_and(%156, %157) /* ty=Tensor[(9, 14, 14), uint16] */;
  (%158,)
}

def @main(%var_7859: Tensor[(1680), float64]) -> (Tensor[(12, 9, 9), uint16], Tensor[(273), uint8], Tensor[(1680), float64], Tensor[(?, 1287), bool], Tensor[(4, 10, 4), bool], Tensor[(160), bool], Tensor[(?, 1287), float32]) {
  %159 = @func_5142() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %160 = cast(meta[relay.Constant][9] /* ty=Tensor[(273), uint8] */, dtype="uint8") /* ty=Tensor[(273), uint8] */;
  %161 = cast(%var_7859, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %162 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 1287), float32] */, dtype="float32") /* ty=Tensor[(1, 1287), float32] */;
  %163 = reshape(%160, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), uint8] */;
  %164 = reshape(%161, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %165 = reshape(%162, newshape=[1, 1287]) /* ty=Tensor[(1, 1287), float32] */;
  %166 = @func_502(%163, %164, %165) /* ty=(Tensor[(7, 13, 3), bool], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1, 1287), float32]) */;
  %167 = %166.3;
  %168 = cast(%167, dtype="float32") /* ty=Tensor[(1, 1287), float32] */;
  %169 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(1, 1287), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %170 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 1287), float32] */, dtype="float32") /* ty=Tensor[(1, 1287), float32] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %172 = divide(%170, %171) /* ty=Tensor[(?, 1287), float32] */;
  %173 = cast(%172, dtype="bool") /* ty=Tensor[(?, 1287), bool] */;
  %174 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(1, 1287), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %175 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 1287), float32] */, dtype="bool") /* ty=Tensor[(1, 1287), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %177 = cast(meta[relay.Constant][11] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %178 = reshape(%177, newshape=[4, 10, 4]) /* ty=Tensor[(4, 10, 4), bool] */;
  %179 = @func_1244(%178) /* ty=(Tensor[(4, 10, 4), bool],) */;
  %180 = cast(%172, dtype="int32") /* ty=Tensor[(?, 1287), int32] */;
  %181 = shape_of(%167, dtype="int32") /* ty=Tensor[(2), int32] */;
  %182 = cast(%167, dtype="int32") /* ty=Tensor[(1, 1287), int32] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %184 = subtract(%182, %183) /* ty=Tensor[(?, 1287), int32] */;
  %185 = cast(%184, dtype="float32") /* ty=Tensor[(?, 1287), float32] */;
  %186 = %159.0;
  %187 = greater_equal(%175, %176) /* ty=Tensor[(?, 1287), bool] */;
  %188 = %179.0;
  %189 = erf(%185) /* ty=Tensor[(?, 1287), float32] */;
  (%186, meta[relay.Constant][9] /* ty=Tensor[(273), uint8] */, %var_7859, %187, %188, meta[relay.Constant][11] /* ty=Tensor[(160), bool] */, %189)
}

def @func_6146(%var_6137: Tensor[(6, 13, 12), float32]) -> (Tensor[(6, 13, 12), float32],) {
  %190 = cast(%var_6137, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
  %191 = atanh(%190) /* ty=Tensor[(6, 13, 12), float32] */;
  (%191,)
}

def @func_2573(%var_2550: Tensor[(5, 2, 4), uint16], %var_2551: Tensor[(5, 2, 4), uint16]) -> (Tensor[(5, 2, 4), bool],) {
  %192 = cast(%var_2551, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
  %193 = shape_of(%var_2550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%var_2550, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %196 = not_equal(%194, %195) /* ty=Tensor[(5, 2, 4), bool] */;
  (%196,)
}

def @func_2908(%var_2898: uint16, %var_2899: Tensor[(10, 3, 10), uint16]) -> Tensor[(10, 3, 10), bool] {
  %197 = cast(%var_2898, dtype="bool") /* ty=bool */;
  %198 = cast(%var_2899, dtype="bool") /* ty=Tensor[(10, 3, 10), bool] */;
  less(%197, %198) /* ty=Tensor[(10, 3, 10), bool] */
}

def @func_5411(%var_5384: Tensor[(160), bool], %var_5398: Tensor[(4, 10, 4), float64], %var_5407: Tensor[(1287), float32]) -> (Tensor[(12), float32], Tensor[(160), bool], Tensor[(12), float32], Tensor[(4, 10, 4), bool], Tensor[(1287), float32], Tensor[(1287), float32]) {
  %199 = @func_4850() /* ty=(Tensor[(12, 9, 9), uint16], Tensor[(12), float32], Tensor[(2, 360), int64], Tensor[(429, 3), float32], Tensor[(1287), float32]) */;
  %200 = @func_4850() /* ty=(Tensor[(12, 9, 9), uint16], Tensor[(12), float32], Tensor[(2, 360), int64], Tensor[(429, 3), float32], Tensor[(1287), float32]) */;
  %201 = cast(%var_5384, dtype="bool") /* ty=Tensor[(160), bool] */;
  %202 = reshape(%201, newshape=[4, 10, 4]) /* ty=Tensor[(4, 10, 4), bool] */;
  %203 = @func_1244(%202) /* ty=(Tensor[(4, 10, 4), bool],) */;
  %204 = %203.0;
  %205 = cast(%204, dtype="float64") /* ty=Tensor[(4, 10, 4), float64] */;
  %206 = log(%205) /* ty=Tensor[(4, 10, 4), float64] */;
  %207 = cast(%var_5398, dtype="bool") /* ty=Tensor[(4, 10, 4), bool] */;
  %208 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%206, dtype="bool") /* ty=Tensor[(4, 10, 4), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %211 = cast(%var_5407, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %212 = reshape(%211, newshape=[1287]) /* ty=Tensor[(1287), float32] */;
  %213 = @func_4462(%212) /* ty=(Tensor[(256), float32], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1287), float32], Tensor[(12, 9, 9), float64]) */;
  %214 = %199.1;
  %215 = %200.1;
  %216 = less_equal(%209, %210) /* ty=Tensor[(4, 10, 4), bool] */;
  %217 = %213.3;
  (%214, %var_5384, %215, %216, %217, %var_5407)
}

def @func_4850() -> (Tensor[(12, 9, 9), uint16], Tensor[(12), float32], Tensor[(2, 360), int64], Tensor[(429, 3), float32], Tensor[(1287), float32]) {
  %218 = @func_3484() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %219 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 360), int64] */, dtype="int64") /* ty=Tensor[(2, 360), int64] */;
  %220 = reshape(%219, newshape=[720]) /* ty=Tensor[(720), int64] */;
  %221 = @func_3753(%220) /* ty=(Tensor[(12), float32], Tensor[(12, 9, 9), uint16], Tensor[(15, 4, 12), float32], Tensor[(720), int64], Tensor[(12, 9, 9), float64]) */;
  %222 = cast(meta[relay.Constant][13] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %223 = reshape(%222, newshape=[429, 3]) /* ty=Tensor[(429, 3), float32] */;
  %224 = @func_3146(%223) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(429, 3), float32], Tensor[(9, 11, 13), float64], Tensor[(12, 9, 9), float64]) */;
  %225 = %218.0;
  %226 = %221.0;
  %227 = %224.1;
  (%225, %226, meta[relay.Constant][12] /* ty=Tensor[(2, 360), int64] */, %227, meta[relay.Constant][13] /* ty=Tensor[(1287), float32] */)
}

def @func_5718() -> (Tensor[(13, 7, 16), bool],) {
  %228 = @func_3036() /* ty=(Tensor[(13, 7, 16), bool],) */;
  %229 = %228.0;
  (%229,)
}

def @func_83(%var_80: Tensor[(9, 11, 13), float32]) -> Tensor[(9, 11, 13), float32] {
  %230 = cast(%var_80, dtype="float32") /* ty=Tensor[(9, 11, 13), float32] */;
  sinh(%230) /* ty=Tensor[(9, 11, 13), float32] */
}

def @func_5554(%var_5545: Tensor[(14, 10, 15), uint32]) -> (Tensor[(14, 10, 15), uint32],) {
  %231 = cast(meta[relay.Constant][14] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %232 = cast(%var_5545, dtype="uint32") /* ty=Tensor[(14, 10, 15), uint32] */;
  %233 = right_shift(%231, %232) /* ty=Tensor[(14, 10, 15), uint32] */;
  (%233,)
}

def @func_3281() -> Tensor[(12, 9, 9), float64] {
  %234 = @func_2707() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %234.0
}

def @func_6770() -> (Tensor[(256), float32], Tensor[(13, 7, 16), float64]) {
  %235 = @func_3569() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(256), float32]) */;
  %236 = %235.4;
  %237 = cast(%236, dtype="float32") /* ty=Tensor[(256), float32] */;
  %238 = reshape(%237, newshape=[16, 16]) /* ty=Tensor[(16, 16), float32] */;
  %239 = @func_1918(%238) /* ty=(Tensor[(16, 16), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), bool]) */;
  %240 = %239.1;
  (%236, %240)
}

def @func_4093(%var_4082: uint16) -> (Tensor[(2, 10, 2), uint16], Tensor[(5, 2, 4), bool]) {
  %241 = cast(%var_4082, dtype="uint16") /* ty=uint16 */;
  %242 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 10, 2), uint16] */, dtype="uint16") /* ty=Tensor[(2, 10, 2), uint16] */;
  %243 = add(%241, %242) /* ty=Tensor[(2, 10, 2), uint16] */;
  %244 = cast(%243, dtype="uint16") /* ty=Tensor[(2, 10, 2), uint16] */;
  %245 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 10, 2), uint16] */, dtype="uint16") /* ty=Tensor[(2, 10, 2), uint16] */;
  %246 = reshape(%244, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), uint16] */;
  %247 = reshape(%245, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), uint16] */;
  %248 = @func_2573(%246, %247) /* ty=(Tensor[(5, 2, 4), bool],) */;
  %249 = %248.0;
  (%243, %249)
}

def @func_4721(%var_4716: Tensor[(14, 8, 5), uint16], %var_4717: Tensor[(14, 8, 5), uint16]) -> (Tensor[(14, 8, 5), uint16],) {
  %250 = cast(%var_4717, dtype="uint16") /* ty=Tensor[(14, 8, 5), uint16] */;
  %251 = shape_of(%var_4716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(%var_4716, dtype="uint16") /* ty=Tensor[(14, 8, 5), uint16] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %254 = subtract(%252, %253) /* ty=Tensor[(14, 8, 5), uint16] */;
  (%254,)
}

def @func_2761() -> Tensor[(12, 9, 9), float64] {
  @func_2096() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_6242() -> (Tensor[(13, 7, 16), bool], Tensor[(12, 9, 9), float64]) {
  %255 = @func_3036() /* ty=(Tensor[(13, 7, 16), bool],) */;
  %256 = @func_3388() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %257 = %255.0;
  %258 = %256.0;
  (%257, %258)
}

def @func_5628() -> (Tensor[(12, 9, 9), bool], Tensor[(5, 2, 4), bool], Tensor[(18, 18), float32]) {
  %259 = cast(meta[relay.Constant][16] /* ty=Tensor[(18, 18), float32] */, dtype="float32") /* ty=Tensor[(18, 18), float32] */;
  %260 = reshape(%259, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), float32] */;
  %261 = @func_4883(%260) /* ty=(Tensor[(12, 9, 3), bool], Tensor[(5, 2, 4), bool], uint16, Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %262 = @func_3657() /* ty=Tensor[(12, 9, 9), bool] */;
  %263 = %261.1;
  (%262, %263, meta[relay.Constant][16] /* ty=Tensor[(18, 18), float32] */)
}

def @func_1868() -> Tensor[(12, 9, 9), float64] {
  %264 = @func_1821() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %264.0
}

def @func_7722() -> (Tensor[(12, 9, 9), uint16],) {
  %265 = @func_2732() /* ty=Tensor[(12, 9, 9), uint16] */;
  (%265,)
}

def @func_5523() -> (Tensor[(12), float32],) {
  %266 = @func_4041() /* ty=(Tensor[(12), float32],) */;
  %267 = %266.0;
  (%267,)
}

def @func_7080(%var_7038: float64, %var_7039: Tensor[(15, 11, 3), float64]) -> (Tensor[(15, 11, 3), float64], Tensor[(1680), float64], Tensor[(168), uint64], Tensor[(273), uint8]) {
  %268 = cast(%var_7038, dtype="float64") /* ty=float64 */;
  %269 = cast(%var_7039, dtype="float64") /* ty=Tensor[(15, 11, 3), float64] */;
  %270 = cast(%var_7038, dtype="uint64") /* ty=uint64 */;
  %271 = cast(meta[relay.Constant][17] /* ty=Tensor[(168), uint64] */, dtype="uint64") /* ty=Tensor[(168), uint64] */;
  %272 = cast(meta[relay.Constant][18] /* ty=Tensor[(273), uint8] */, dtype="uint8") /* ty=Tensor[(273), uint8] */;
  %273 = reshape(%270, newshape=[]) /* ty=uint64 */;
  %274 = reshape(%271, newshape=[7, 8, 3]) /* ty=Tensor[(7, 8, 3), uint64] */;
  %275 = reshape(%272, newshape=[13, 21]) /* ty=Tensor[(13, 21), uint8] */;
  %276 = @func_6019(%273, %274, %275) /* ty=(Tensor[(7, 8, 3), bool], Tensor[(1680), float64], Tensor[(13, 21), uint8], Tensor[(1680), float64], Tensor[(1287), float32]) */;
  %277 = divide(%268, %269) /* ty=Tensor[(15, 11, 3), float64] */;
  %278 = %276.3;
  (%277, %278, meta[relay.Constant][17] /* ty=Tensor[(168), uint64] */, meta[relay.Constant][18] /* ty=Tensor[(273), uint8] */)
}

def @func_2815(%var_2808: Tensor[(12, 9, 9), float64]) -> Tensor[(12, 9, 9), uint16] {
  %279 = @func_2096() /* ty=Tensor[(12, 9, 9), float64] */;
  %280 = cast(%var_2808, dtype="uint16") /* ty=Tensor[(12, 9, 9), uint16] */;
  %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(%279, dtype="uint16") /* ty=Tensor[(12, 9, 9), uint16] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  subtract(%282, %283) /* ty=Tensor[(12, 9, 9), uint16] */
}

def @func_2882() -> Tensor[(256), float32] {
  %284 = @func_2493() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(16, 16), float32], Tensor[(256), float32]) */;
  %284.2
}

def @func_2969() -> (Tensor[(12, 9, 9), float64],) {
  %285 = @func_2686() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %286 = %285.0;
  (%286,)
}

def @func_2446() -> (Tensor[(12, 9, 9), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32]) {
  %287 = cast(meta[relay.Constant][19] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
  %288 = reshape(%287, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float32] */;
  %289 = @func_1449(%288) /* ty=(Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(2, 1, 6), float64], Tensor[(1287), float64]) */;
  %290 = @func_2096() /* ty=Tensor[(12, 9, 9), float64] */;
  %291 = %289.2;
  (%290, %291, meta[relay.Constant][19] /* ty=Tensor[(12), float32] */)
}

def @func_4613(%var_4577: Tensor[(13, 9, 2), int64], %var_4583: Tensor[(13, 9, 2), bool], %var_4591: Tensor[(972), float64]) -> (Tensor[(13, 9, 2), float32], Tensor[(12, 9, 9), uint16], Tensor[(972), float64], Tensor[(12, 9, 9), float64]) {
  %292 = cast(%var_4577, dtype="bool") /* ty=Tensor[(13, 9, 2), bool] */;
  %293 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(13, 9, 2), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 9, 2), int64] */, dtype="bool") /* ty=Tensor[(13, 9, 2), bool] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %296 = less(%294, %295) /* ty=Tensor[(13, 9, 2), bool] */;
  %297 = cast(%var_4583, dtype="float32") /* ty=Tensor[(13, 9, 2), float32] */;
  %298 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%296, dtype="float32") /* ty=Tensor[(13, 9, 2), float32] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %301 = cast(%var_4591, dtype="float64") /* ty=Tensor[(972), float64] */;
  %302 = reshape(%301, newshape=[12, 9, 9]) /* ty=Tensor[(12, 9, 9), float64] */;
  %303 = power(%299, %300) /* ty=Tensor[(13, 9, 2), float32] */;
  %304 = @func_2815(%302) /* ty=Tensor[(12, 9, 9), uint16] */;
  %305 = @func_3929() /* ty=Tensor[(12, 9, 9), float64] */;
  (%303, %304, %var_4591, %305)
}

def @func_2547() -> Tensor[(12, 9, 9), float64] {
  %306 = @func_2248() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool], Tensor[(12, 9, 9), float64]) */;
  %306.2
}

def @func_7742() -> (Tensor[(12, 9, 9), float64],) {
  %307 = @func_7550() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool]) */;
  %308 = %307.0;
  (%308,)
}

def @func_3036() -> (Tensor[(13, 7, 16), bool],) {
  %309 = @func_2248() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool], Tensor[(12, 9, 9), float64]) */;
  %310 = %309.3;
  (%310,)
}

def @func_5432() -> (Tensor[(12, 9, 9), float64],) {
  %311 = @func_2707() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %312 = %311.0;
  (%312,)
}

def @func_6739() -> Tensor[(12, 9, 9), float64] {
  %313 = @func_2707() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %313.0
}

def @func_4525() -> Tensor[(12, 9, 9), float64] {
  @func_1868() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_1858() -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) {
  %314 = @func_1821() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %315 = @func_1821() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %316 = %314.0;
  %317 = %315.0;
  (%316, %317)
}

def @func_4705(%var_4674: Tensor[(256), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(9, 11, 13), float32], Tensor[(429, 3), float32]) {
  %318 = @func_3913() /* ty=(Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float64]) */;
  %319 = %318.1;
  %320 = cast(%319, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %321 = cast(%var_4674, dtype="float32") /* ty=Tensor[(256), float32] */;
  %322 = reshape(%321, newshape=[16, 16]) /* ty=Tensor[(16, 16), float32] */;
  %323 = @func_1918(%322) /* ty=(Tensor[(16, 16), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), bool]) */;
  %324 = cast(meta[relay.Constant][21] /* ty=Tensor[(429, 3), float32] */, dtype="float32") /* ty=Tensor[(429, 3), float32] */;
  %325 = reshape(%324, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %326 = @func_1868() /* ty=Tensor[(12, 9, 9), float64] */;
  %327 = tan(%320) /* ty=Tensor[(12, 9, 9), float32] */;
  %328 = %323.0;
  %329 = @func_83(%325) /* ty=Tensor[(9, 11, 13), float32] */;
  (%326, %327, %328, %var_4674, %329, meta[relay.Constant][21] /* ty=Tensor[(429, 3), float32] */)
}

def @func_3008() -> (Tensor[(12, 9, 9), uint16],) {
  %330 = @func_2732() /* ty=Tensor[(12, 9, 9), uint16] */;
  (%330,)
}

def @func_5777(%var_5768: Tensor[(2, 2, 8), float64]) -> (Tensor[(2, 2, 8), float64], Tensor[(3, 15, 12), int32], Tensor[(540), int32]) {
  %331 = cast(%var_5768, dtype="float64") /* ty=Tensor[(2, 2, 8), float64] */;
  %332 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(2, 2, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 2, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 8), float64] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %335 = cast(meta[relay.Constant][23] /* ty=Tensor[(540), int32] */, dtype="int32") /* ty=Tensor[(540), int32] */;
  %336 = cast(meta[relay.Constant][23] /* ty=Tensor[(540), int32] */, dtype="int32") /* ty=Tensor[(540), int32] */;
  %337 = reshape(%335, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), int32] */;
  %338 = reshape(%336, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), int32] */;
  %339 = @func_4964(%337, %338) /* ty=(Tensor[(3, 15, 12), int32],) */;
  %340 = floor_mod(%333, %334) /* ty=Tensor[(2, 2, 8), float64] */;
  %341 = %339.0;
  (%340, %341, meta[relay.Constant][23] /* ty=Tensor[(540), int32] */)
}

def @func_5514() -> (Tensor[(12, 9, 9), uint16], Tensor[(12, 9, 9), float64]) {
  %342 = @func_3008() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %343 = @func_2707() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %344 = %342.0;
  %345 = %343.0;
  (%344, %345)
}

def @func_5950(%var_5938: Tensor[(3, 14, 7), float32]) -> (Tensor[(3, 14, 7), float32],) {
  %346 = cast(%var_5938, dtype="float32") /* ty=Tensor[(3, 14, 7), float32] */;
  %347 = asinh(%346) /* ty=Tensor[(3, 14, 7), float32] */;
  %348 = cast(%347, dtype="float32") /* ty=Tensor[(3, 14, 7), float32] */;
  %349 = exp(%348) /* ty=Tensor[(3, 14, 7), float32] */;
  (%349,)
}

def @func_7600(%var_7580: Tensor[(1764), int32], %var_7592: Tensor[(462), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(1764, 1), int32], Tensor[(1764), int32], Tensor[(14, 8, 5), uint64], Tensor[(12), float32], Tensor[(6, 7, 11), int16], Tensor[(462), float32]) {
  %350 = @func_7159() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %351 = cast(%var_7580, dtype="int32") /* ty=Tensor[(1764), int32] */;
  %352 = reshape(%351, newshape=[1764, 1]) /* ty=Tensor[(1764, 1), int32] */;
  %353 = @func_6922(%352) /* ty=(Tensor[(2, 1, 6), float64], Tensor[(4, 10, 4), float32], Tensor[(1764, 1), int32], Tensor[(160), bool], Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), uint16]) */;
  %354 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 70), uint16] */, dtype="uint16") /* ty=Tensor[(8, 70), uint16] */;
  %355 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 70), uint16] */, dtype="uint16") /* ty=Tensor[(8, 70), uint16] */;
  %356 = reshape(%354, newshape=[14, 8, 5]) /* ty=Tensor[(14, 8, 5), uint16] */;
  %357 = reshape(%355, newshape=[14, 8, 5]) /* ty=Tensor[(14, 8, 5), uint16] */;
  %358 = @func_4721(%356, %357) /* ty=(Tensor[(14, 8, 5), uint16],) */;
  %359 = %358.0;
  %360 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 70), uint16] */, dtype="uint64") /* ty=Tensor[(8, 70), uint64] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="uint64") /* ty=Tensor[(14, 8, 5), uint64] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %364 = @func_7329() /* ty=(Tensor[(12), float32],) */;
  %365 = cast(%var_7592, dtype="float32") /* ty=Tensor[(462), float32] */;
  %366 = cast(%var_7592, dtype="float32") /* ty=Tensor[(462), float32] */;
  %367 = reshape(%365, newshape=[6, 7, 11]) /* ty=Tensor[(6, 7, 11), float32] */;
  %368 = reshape(%366, newshape=[6, 7, 11]) /* ty=Tensor[(6, 7, 11), float32] */;
  %369 = @func_6206(%367, %368) /* ty=(Tensor[(6, 7, 11), int16],) */;
  %370 = %350.0;
  %371 = %353.2;
  %372 = add(%362, %363) /* ty=Tensor[(14, 8, 5), uint64] */;
  %373 = %364.0;
  %374 = %369.0;
  (%370, %371, %var_7580, %372, %373, %374, %var_7592)
}

def @func_7021() -> (Tensor[(12, 9, 9), float64], Tensor[(12), float32], Tensor[(12, 9, 9), float64]) {
  %375 = @func_2969() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %376 = @func_6176() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(12), float32]) */;
  %377 = %375.0;
  %378 = %376.2;
  %379 = @func_1868() /* ty=Tensor[(12, 9, 9), float64] */;
  (%377, %378, %379)
}

def @func_7159() -> (Tensor[(12, 9, 9), float64],) {
  %380 = @func_4796() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %381 = %380.0;
  (%381,)
}

def @func_3344() -> (Tensor[(256), float32],) {
  %382 = @func_2882() /* ty=Tensor[(256), float32] */;
  (%382,)
}

def @func_6960() -> Tensor[(12, 9, 9), uint16] {
  %383 = @func_6352() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %383.0
}

def @func_5099(%var_5090: Tensor[(2, 16, 6), float64]) -> Tensor[(2, 16, 6), float64] {
  %384 = @func_2757() /* ty=(Tensor[(2, 1, 6), float64],) */;
  %385 = %384.0;
  %386 = cast(%385, dtype="float64") /* ty=Tensor[(2, 1, 6), float64] */;
  %387 = cast(%var_5090, dtype="float64") /* ty=Tensor[(2, 16, 6), float64] */;
  floor_divide(%386, %387) /* ty=Tensor[(2, 16, 6), float64] */
}

def @func_4309(%var_4257: Tensor[(1764), int32], %var_4290: Tensor[(160), bool], %var_4292: Tensor[(1764), float32], %var_4296: Tensor[(4, 10, 4), bool]) -> (Tensor[(12), float32], Tensor[(12, 9, 9), float64], Tensor[(9, 14, 14), uint64], Tensor[(256), float32], Tensor[(16, 16), float32], Tensor[(160), bool], Tensor[(1764), bool], Tensor[(4, 10, 4), float32]) {
  %388 = @func_4041() /* ty=(Tensor[(12), float32],) */;
  %389 = cast(%var_4257, dtype="int32") /* ty=Tensor[(1764), int32] */;
  %390 = cast(%var_4257, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %391 = reshape(%389, newshape=[9, 14, 14]) /* ty=Tensor[(9, 14, 14), int32] */;
  %392 = reshape(%390, newshape=[9, 14, 14]) /* ty=Tensor[(9, 14, 14), bool] */;
  %393 = @func_2383(%391, %392) /* ty=(Tensor[(9, 14, 14), uint16],) */;
  %394 = %393.0;
  %395 = cast(%var_4257, dtype="uint64") /* ty=Tensor[(1764), uint64] */;
  %396 = shape_of(%394, dtype="int32") /* ty=Tensor[(3), int32] */;
  %397 = cast(%394, dtype="uint64") /* ty=Tensor[(9, 14, 14), uint64] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %399 = @func_2882() /* ty=Tensor[(256), float32] */;
  %400 = cast(%399, dtype="float32") /* ty=Tensor[(256), float32] */;
  %401 = reshape(%400, newshape=[16, 16]) /* ty=Tensor[(16, 16), float32] */;
  %402 = @func_1918(%401) /* ty=(Tensor[(16, 16), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), bool]) */;
  %403 = cast(%var_4257, dtype="float32") /* ty=Tensor[(1764), float32] */;
  %404 = sinh(%403) /* ty=Tensor[(1764), float32] */;
  %405 = cast(%var_4292, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(1), int32] */;
  %407 = cast(%404, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?), bool] */;
  %409 = cast(%var_4290, dtype="bool") /* ty=Tensor[(160), bool] */;
  %410 = reshape(%409, newshape=[4, 10, 4]) /* ty=Tensor[(4, 10, 4), bool] */;
  %411 = @func_1244(%410) /* ty=(Tensor[(4, 10, 4), bool],) */;
  %412 = %411.0;
  %413 = cast(%var_4296, dtype="float32") /* ty=Tensor[(4, 10, 4), float32] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%412, dtype="float32") /* ty=Tensor[(4, 10, 4), float32] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %417 = %388.0;
  %418 = @func_2547() /* ty=Tensor[(12, 9, 9), float64] */;
  %419 = right_shift(%397, %398) /* ty=Tensor[(9, 14, 14), uint64] */;
  %420 = %402.0;
  %421 = less(%407, %408) /* ty=Tensor[(1764), bool] */;
  %422 = floor_divide(%415, %416) /* ty=Tensor[(4, 10, 4), float32] */;
  (%417, %418, %419, %399, %420, %var_4290, %421, %422)
}

def @func_2211(%var_2208: Tensor[(143, 9), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(5, ?, 6), uint16], Tensor[(30), float32], Tensor[(143, 9), float32], Tensor[(273), uint8]) {
  %423 = @func_1821() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %424 = %423.0;
  %425 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 9, 9), float64] */, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%424, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %429 = cast(meta[relay.Constant][26] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %430 = cast(%var_2208, dtype="float32") /* ty=Tensor[(143, 9), float32] */;
  %431 = cast(meta[relay.Constant][27] /* ty=Tensor[(273), uint8] */, dtype="uint8") /* ty=Tensor[(273), uint8] */;
  %432 = reshape(%429, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
  %433 = reshape(%430, newshape=[143, 9]) /* ty=Tensor[(143, 9), float32] */;
  %434 = reshape(%431, newshape=[273, 1]) /* ty=Tensor[(273, 1), uint8] */;
  %435 = @func_1024(%432, %433, %434) /* ty=(Tensor[(12, 140), float64], Tensor[(5, ?, 6), uint16], Tensor[(143, 9), bool], Tensor[(143, 9), float32], Tensor[(7, 13, 3), bool], Tensor[(273, 1), uint8]) */;
  %436 = add(%427, %428) /* ty=Tensor[(12, 9, 9), float64] */;
  %437 = %435.1;
  (%436, %437, meta[relay.Constant][26] /* ty=Tensor[(30), float32] */, %var_2208, meta[relay.Constant][27] /* ty=Tensor[(273), uint8] */)
}

def @func_6390() -> (Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), uint16]) {
  %438 = @func_6352() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %439 = @func_3657() /* ty=Tensor[(12, 9, 9), bool] */;
  %440 = %438.0;
  (%439, %440)
}

def @func_6206(%var_6179: Tensor[(6, 7, 11), float32], %var_6180: Tensor[(6, 7, 11), float32]) -> (Tensor[(6, 7, 11), int16],) {
  %441 = cast(%var_6180, dtype="float32") /* ty=Tensor[(6, 7, 11), float32] */;
  %442 = shape_of(%var_6179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%var_6179, dtype="float32") /* ty=Tensor[(6, 7, 11), float32] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %445 = floor_divide(%443, %444) /* ty=Tensor[(6, 7, 11), float32] */;
  %446 = cast(%var_6180, dtype="int16") /* ty=Tensor[(6, 7, 11), int16] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%445, dtype="int16") /* ty=Tensor[(6, 7, 11), int16] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %450 = bitwise_or(%448, %449) /* ty=Tensor[(6, 7, 11), int16] */;
  (%450,)
}

def @func_7813() -> (Tensor[(12, 9, 9), float64],) {
  %451 = @func_2969() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %452 = %451.0;
  (%452,)
}

def @func_1987(%var_1984: Tensor[(8, 4, 7), float64]) -> (Tensor[(8, 4, 7), float64],) {
  %453 = cast(%var_1984, dtype="float64") /* ty=Tensor[(8, 4, 7), float64] */;
  %454 = cosh(%453) /* ty=Tensor[(8, 4, 7), float64] */;
  (%454,)
}

def @func_3929() -> Tensor[(12, 9, 9), float64] {
  %455 = @func_2686() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %455.0
}

def @func_7375() -> (Tensor[(12), float32], Tensor[(12), float32]) {
  %456 = @func_7021() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12), float32], Tensor[(12, 9, 9), float64]) */;
  %457 = @func_4041() /* ty=(Tensor[(12), float32],) */;
  %458 = %456.1;
  %459 = %457.0;
  (%458, %459)
}

def @func_6326(%var_6306: Tensor[(18, 18), float32]) -> Tensor[(18, 18), int32] {
  %460 = @func_5628() /* ty=(Tensor[(12, 9, 9), bool], Tensor[(5, 2, 4), bool], Tensor[(18, 18), float32]) */;
  %461 = %460.2;
  %462 = cast(%var_6306, dtype="int32") /* ty=Tensor[(18, 18), int32] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(2), int32] */;
  %464 = cast(%461, dtype="int32") /* ty=Tensor[(18, 18), int32] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  logical_xor(%464, %465) /* ty=Tensor[(18, 18), int32] */
}

def @func_4156(%var_4104: Tensor[(8, 182), bool], %var_4151: Tensor[(150, 2), uint8]) -> (Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), uint8], Tensor[(8, 182), bool], Tensor[(12, 9, 9), uint16], Tensor[(12, 9, 9), uint16], Tensor[(2, 15, 10), uint8], Tensor[(150, 2), uint8]) {
  %466 = @func_2707() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %467 = cast(%var_4104, dtype="bool") /* ty=Tensor[(8, 182), bool] */;
  %468 = cast(%var_4104, dtype="bool") /* ty=Tensor[(8, 182), bool] */;
  %469 = reshape(%467, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), bool] */;
  %470 = reshape(%468, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), bool] */;
  %471 = @func_3008() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %472 = cast(%var_4151, dtype="uint8") /* ty=Tensor[(150, 2), uint8] */;
  %473 = cast(%var_4151, dtype="uint8") /* ty=Tensor[(150, 2), uint8] */;
  %474 = reshape(%472, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %475 = reshape(%473, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %476 = %466.0;
  %477 = @func_2649(%469, %470) /* ty=Tensor[(13, 7, 16), uint8] */;
  %478 = @func_2732() /* ty=Tensor[(12, 9, 9), uint16] */;
  %479 = %471.0;
  %480 = @func_1797(%474, %475) /* ty=Tensor[(2, 15, 10), uint8] */;
  (%476, %477, %var_4104, %478, %479, %480, %var_4151)
}

def @func_853(%var_845: Tensor[(13, 7, 16), bool], %var_846: Tensor[(13, 7, 16), bool]) -> (Tensor[(13, 7, 16), bool], Tensor[(13, 7, 16), float64]) {
  %481 = cast(%var_846, dtype="bool") /* ty=Tensor[(13, 7, 16), bool] */;
  %482 = shape_of(%var_845, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%var_845, dtype="bool") /* ty=Tensor[(13, 7, 16), bool] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %485 = cast(%var_845, dtype="float64") /* ty=Tensor[(13, 7, 16), float64] */;
  %486 = logical_or(%483, %484) /* ty=Tensor[(13, 7, 16), bool] */;
  %487 = asinh(%485) /* ty=Tensor[(13, 7, 16), float64] */;
  (%486, %487)
}

def @func_2355(%var_2319: Tensor[(1287), float32], %var_2320: Tensor[(273), uint8], %var_2325: Tensor[(30), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(143, 9), bool], Tensor[(1287), float32], Tensor[(273), uint8], Tensor[(30), uint8], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float32]) {
  %488 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %489 = %488.1;
  %490 = cast(%489, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %491 = cast(meta[relay.Constant][28] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %492 = cast(%var_2319, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %493 = cast(%var_2320, dtype="uint8") /* ty=Tensor[(273), uint8] */;
  %494 = reshape(%491, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
  %495 = reshape(%492, newshape=[143, 9]) /* ty=Tensor[(143, 9), float32] */;
  %496 = reshape(%493, newshape=[273, 1]) /* ty=Tensor[(273, 1), uint8] */;
  %497 = @func_1024(%494, %495, %496) /* ty=(Tensor[(12, 140), float64], Tensor[(5, ?, 6), uint16], Tensor[(143, 9), bool], Tensor[(143, 9), float32], Tensor[(7, 13, 3), bool], Tensor[(273, 1), uint8]) */;
  %498 = cast(%var_2325, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %499 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(30), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %500 = cast(meta[relay.Constant][28] /* ty=Tensor[(30), float32] */, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %502 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %503 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %504 = %503.1;
  %505 = cast(%504, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %506 = sigmoid(%490) /* ty=Tensor[(12, 9, 9), float64] */;
  %507 = %497.2;
  %508 = right_shift(%500, %501) /* ty=Tensor[(30), uint8] */;
  %509 = %502.0;
  %510 = @func_1868() /* ty=Tensor[(12, 9, 9), float64] */;
  %511 = log2(%505) /* ty=Tensor[(12, 9, 9), float32] */;
  (%506, %507, %var_2319, %var_2320, %508, %509, %510, %511)
}

def @func_2137(%var_2112: Tensor[(12, 9, 9), float64]) -> (Tensor[(12, 9, 9), int64], Tensor[(12, 9, 9), float32]) {
  %512 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %513 = %512.0;
  %514 = cast(%var_2112, dtype="int64") /* ty=Tensor[(12, 9, 9), int64] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%513, dtype="int64") /* ty=Tensor[(12, 9, 9), int64] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %518 = cast(%513, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %519 = shape_of(%var_2112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%var_2112, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %522 = maximum(%516, %517) /* ty=Tensor[(12, 9, 9), int64] */;
  %523 = floor_mod(%520, %521) /* ty=Tensor[(12, 9, 9), float32] */;
  (%522, %523)
}

def @func_3449() -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool]) {
  %524 = @func_2686() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %525 = @func_2446() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32]) */;
  %526 = %525.0;
  %527 = cast(%526, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %528 = sqrt(%527) /* ty=Tensor[(12, 9, 9), float32] */;
  %529 = cast(%526, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%528, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %533 = %524.0;
  %534 = greater_equal(%531, %532) /* ty=Tensor[(12, 9, 9), bool] */;
  (%533, %534)
}

def @func_5464(%var_5455: Tensor[(1764), int32]) -> (Tensor[(2, 1, 6), float64], Tensor[(9, 14, 14), uint16], Tensor[(1764), int32]) {
  %535 = @func_2757() /* ty=(Tensor[(2, 1, 6), float64],) */;
  %536 = cast(%var_5455, dtype="int32") /* ty=Tensor[(1764), int32] */;
  %537 = cast(%var_5455, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %538 = reshape(%536, newshape=[9, 14, 14]) /* ty=Tensor[(9, 14, 14), int32] */;
  %539 = reshape(%537, newshape=[9, 14, 14]) /* ty=Tensor[(9, 14, 14), bool] */;
  %540 = @func_2383(%538, %539) /* ty=(Tensor[(9, 14, 14), uint16],) */;
  %541 = %535.0;
  %542 = %540.0;
  (%541, %542, %var_5455)
}

def @func_1797(%var_1789: Tensor[(2, 15, 10), uint8], %var_1790: Tensor[(2, 15, 10), uint8]) -> Tensor[(2, 15, 10), uint8] {
  %543 = cast(%var_1790, dtype="uint8") /* ty=Tensor[(2, 15, 10), uint8] */;
  %544 = shape_of(%var_1789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%var_1789, dtype="uint8") /* ty=Tensor[(2, 15, 10), uint8] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  maximum(%545, %546) /* ty=Tensor[(2, 15, 10), uint8] */
}

def @func_3814(%var_3785: Tensor[(150, 2), uint8], %var_3797: Tensor[(12, 9, 9), float64]) -> (Tensor[(2, 15, 10), uint8], Tensor[(12), float32], Tensor[(12, 9, 9), bool], Tensor[(150, 2), float64]) {
  %547 = cast(%var_3785, dtype="uint8") /* ty=Tensor[(150, 2), uint8] */;
  %548 = cast(%var_3785, dtype="uint8") /* ty=Tensor[(150, 2), uint8] */;
  %549 = reshape(%547, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %550 = reshape(%548, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
  %551 = @func_3212() /* ty=(Tensor[(12), float32],) */;
  %552 = @func_2969() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %553 = %552.0;
  %554 = cast(%var_3797, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %555 = shape_of(%553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%553, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %558 = cast(%var_3785, dtype="float64") /* ty=Tensor[(150, 2), float64] */;
  %559 = @func_1797(%549, %550) /* ty=Tensor[(2, 15, 10), uint8] */;
  %560 = %551.0;
  %561 = less_equal(%556, %557) /* ty=Tensor[(12, 9, 9), bool] */;
  %562 = tan(%558) /* ty=Tensor[(150, 2), float64] */;
  (%559, %560, %561, %562)
}

def @func_3657() -> Tensor[(12, 9, 9), bool] {
  %563 = @func_3449() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool]) */;
  %563.1
}

def @func_6750() -> Tensor[(12, 9, 9), float64] {
  %564 = @func_3569() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(256), float32]) */;
  %564.2
}

def @func_2757() -> (Tensor[(2, 1, 6), float64],) {
  %565 = @func_2446() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32]) */;
  %566 = %565.1;
  (%566,)
}

def @func_6688(%var_6664: uint64) -> (Tensor[(3, 15, 1), uint64],) {
  %567 = cast(%var_6664, dtype="uint64") /* ty=uint64 */;
  %568 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 15, 1), uint64] */, dtype="uint64") /* ty=Tensor[(3, 15, 1), uint64] */;
  %569 = bitwise_and(%567, %568) /* ty=Tensor[(3, 15, 1), uint64] */;
  (%569,)
}

def @func_2686() -> (Tensor[(12, 9, 9), float64],) {
  %570 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %571 = %570.0;
  %572 = cast(%571, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %573 = asinh(%572) /* ty=Tensor[(12, 9, 9), float64] */;
  (%573,)
}

def @func_6019(%var_5994: uint64, %var_5995: Tensor[(7, 8, 3), uint64], %var_6010: Tensor[(13, 21), uint8]) -> (Tensor[(7, 8, 3), bool], Tensor[(1680), float64], Tensor[(13, 21), uint8], Tensor[(1680), float64], Tensor[(1287), float32]) {
  %574 = cast(%var_5994, dtype="bool") /* ty=bool */;
  %575 = cast(%var_5995, dtype="bool") /* ty=Tensor[(7, 8, 3), bool] */;
  %576 = cast(%var_6010, dtype="uint8") /* ty=Tensor[(13, 21), uint8] */;
  %577 = cast(meta[relay.Constant][30] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %578 = cast(meta[relay.Constant][31] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %579 = reshape(%576, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), uint8] */;
  %580 = reshape(%577, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %581 = reshape(%578, newshape=[1, 1287]) /* ty=Tensor[(1, 1287), float32] */;
  %582 = @func_502(%579, %580, %581) /* ty=(Tensor[(7, 13, 3), bool], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1, 1287), float32]) */;
  %583 = greater_equal(%574, %575) /* ty=Tensor[(7, 8, 3), bool] */;
  %584 = %582.2;
  (%583, %584, %var_6010, meta[relay.Constant][30] /* ty=Tensor[(1680), float64] */, meta[relay.Constant][31] /* ty=Tensor[(1287), float32] */)
}

def @func_4047() -> (Tensor[(12, 9, 9), float64],) {
  %585 = @func_2096() /* ty=Tensor[(12, 9, 9), float64] */;
  (%585,)
}

def @func_348(%var_336: Tensor[(8, 14, 15), float64], %var_341: Tensor[(143, 9), float32]) -> (Tensor[(8, 14, 15), float64], Tensor[(9, 11, 13), float32], Tensor[(143, 9), float32], Tensor[(9, 11, 13), float32]) {
  %586 = cast(%var_336, dtype="float64") /* ty=Tensor[(8, 14, 15), float64] */;
  %587 = cast(%var_341, dtype="float32") /* ty=Tensor[(143, 9), float32] */;
  %588 = reshape(%587, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %589 = cast(%var_341, dtype="float32") /* ty=Tensor[(143, 9), float32] */;
  %590 = reshape(%589, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %591 = sigmoid(%586) /* ty=Tensor[(8, 14, 15), float64] */;
  %592 = @func_83(%588) /* ty=Tensor[(9, 11, 13), float32] */;
  %593 = @func_83(%590) /* ty=Tensor[(9, 11, 13), float32] */;
  (%591, %592, %var_341, %593)
}

def @func_3484() -> (Tensor[(12, 9, 9), uint16],) {
  %594 = @func_2732() /* ty=Tensor[(12, 9, 9), uint16] */;
  (%594,)
}

def @func_1024(%var_974: Tensor[(5, 1, 6), float32], %var_1001: Tensor[(143, 9), float32], %var_1022: Tensor[(273, 1), uint8]) -> (Tensor[(12, 140), float64], Tensor[(5, ?, 6), uint16], Tensor[(143, 9), bool], Tensor[(143, 9), float32], Tensor[(7, 13, 3), bool], Tensor[(273, 1), uint8]) {
  %595 = cast(%var_974, dtype="float32") /* ty=Tensor[(5, 1, 6), float32] */;
  %596 = sqrt(%595) /* ty=Tensor[(5, 1, 6), float32] */;
  %597 = cast(%var_974, dtype="uint16") /* ty=Tensor[(5, 1, 6), uint16] */;
  %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%596, dtype="uint16") /* ty=Tensor[(5, 1, 6), uint16] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %601 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 140), float64] */, dtype="float64") /* ty=Tensor[(12, 140), float64] */;
  %602 = cast(meta[relay.Constant][33] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %603 = reshape(%601, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float64] */;
  %604 = reshape(%602, newshape=[143, 9]) /* ty=Tensor[(143, 9), float32] */;
  %605 = @func_348(%603, %604) /* ty=(Tensor[(8, 14, 15), float64], Tensor[(9, 11, 13), float32], Tensor[(143, 9), float32], Tensor[(9, 11, 13), float32]) */;
  %606 = %605.2;
  %607 = cast(%606, dtype="float32") /* ty=Tensor[(143, 9), float32] */;
  %608 = acos(%607) /* ty=Tensor[(143, 9), float32] */;
  %609 = cast(%608, dtype="float32") /* ty=Tensor[(143, 9), float32] */;
  %610 = log2(%609) /* ty=Tensor[(143, 9), float32] */;
  %611 = cast(%var_1001, dtype="bool") /* ty=Tensor[(143, 9), bool] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(2), int32] */;
  %613 = cast(%610, dtype="bool") /* ty=Tensor[(143, 9), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %615 = cast(meta[relay.Constant][33] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %616 = shape_of(%610, dtype="int32") /* ty=Tensor[(2), int32] */;
  %617 = cast(%610, dtype="float32") /* ty=Tensor[(143, 9), float32] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %619 = floor_divide(%617, %618) /* ty=Tensor[(143, 9), float32] */;
  %620 = cast(%619, dtype="float32") /* ty=Tensor[(143, 9), float32] */;
  %621 = cast(%var_1022, dtype="uint8") /* ty=Tensor[(273, 1), uint8] */;
  %622 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 140), float64] */, dtype="float64") /* ty=Tensor[(12, 140), float64] */;
  %623 = cast(%606, dtype="float32") /* ty=Tensor[(143, 9), float32] */;
  %624 = reshape(%621, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), uint8] */;
  %625 = reshape(%622, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %626 = reshape(%623, newshape=[1, 1287]) /* ty=Tensor[(1, 1287), float32] */;
  %627 = @func_502(%624, %625, %626) /* ty=(Tensor[(7, 13, 3), bool], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1, 1287), float32]) */;
  %628 = bitwise_and(%599, %600) /* ty=Tensor[(5, ?, 6), uint16] */;
  %629 = less_equal(%613, %614) /* ty=Tensor[(143, 9), bool] */;
  %630 = cosh(%620) /* ty=Tensor[(143, 9), float32] */;
  %631 = %627.0;
  (meta[relay.Constant][32] /* ty=Tensor[(12, 140), float64] */, %628, %629, %630, %631, %var_1022)
}

def @func_3305(%var_3303: Tensor[(1008, 1), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(12, 7, 12), float32], Tensor[(1008, 1), float32]) {
  %632 = @func_2707() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %633 = cast(%var_3303, dtype="float32") /* ty=Tensor[(1008, 1), float32] */;
  %634 = reshape(%633, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), float32] */;
  %635 = @func_1967(%634) /* ty=(Tensor[(12, 7, 12), float32],) */;
  %636 = %632.0;
  %637 = %635.0;
  (%636, %637, %var_3303)
}

def @func_7411(%var_7388: Tensor[(14, 11, 10), uint64]) -> Tensor[(14, 11, 10), uint64] {
  %638 = cast(%var_7388, dtype="uint64") /* ty=Tensor[(14, 11, 10), uint64] */;
  %639 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(14, 11, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 11, 10), uint64] */, dtype="uint64") /* ty=Tensor[(14, 11, 10), uint64] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%640, %641) /* ty=Tensor[(14, 11, 10), uint64] */
}

def @func_5142() -> (Tensor[(12, 9, 9), uint16],) {
  %642 = @func_2732() /* ty=Tensor[(12, 9, 9), uint16] */;
  (%642,)
}

def @func_4796() -> (Tensor[(12, 9, 9), float64],) {
  %643 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %644 = %643.1;
  (%644,)
}

def @func_6922(%var_6881: Tensor[(1764, 1), int32]) -> (Tensor[(2, 1, 6), float64], Tensor[(4, 10, 4), float32], Tensor[(1764, 1), int32], Tensor[(160), bool], Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), uint16]) {
  %645 = @func_2757() /* ty=(Tensor[(2, 1, 6), float64],) */;
  %646 = cast(%var_6881, dtype="int32") /* ty=Tensor[(1764, 1), int32] */;
  %647 = cast(meta[relay.Constant][35] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %648 = cast(%var_6881, dtype="float32") /* ty=Tensor[(1764, 1), float32] */;
  %649 = cast(meta[relay.Constant][35] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %650 = reshape(%646, newshape=[1764]) /* ty=Tensor[(1764), int32] */;
  %651 = reshape(%647, newshape=[160]) /* ty=Tensor[(160), bool] */;
  %652 = reshape(%648, newshape=[1764]) /* ty=Tensor[(1764), float32] */;
  %653 = reshape(%649, newshape=[4, 10, 4]) /* ty=Tensor[(4, 10, 4), bool] */;
  %654 = @func_4309(%650, %651, %652, %653) /* ty=(Tensor[(12), float32], Tensor[(12, 9, 9), float64], Tensor[(9, 14, 14), uint64], Tensor[(256), float32], Tensor[(16, 16), float32], Tensor[(160), bool], Tensor[(1764), bool], Tensor[(4, 10, 4), float32]) */;
  %655 = @func_5142() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %656 = %655.0;
  %657 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 9, 9), uint16] */, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %658 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%656, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %661 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 9, 9), uint16] */, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %662 = reshape(%661, newshape=[12, 9, 9]) /* ty=Tensor[(12, 9, 9), float64] */;
  %663 = %645.0;
  %664 = %654.7;
  %665 = equal(%659, %660) /* ty=Tensor[(12, 9, 9), bool] */;
  %666 = @func_2815(%662) /* ty=Tensor[(12, 9, 9), uint16] */;
  (%663, %664, %var_6881, meta[relay.Constant][35] /* ty=Tensor[(160), bool] */, %665, %666)
}

def @func_2707() -> (Tensor[(12, 9, 9), float64],) {
  %667 = @func_2686() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %668 = %667.0;
  (%668,)
}

def @func_5356(%var_5345: Tensor[(256), float32]) -> (Tensor[(12, 9, 9), uint16], Tensor[(15, 4, 12), float32], Tensor[(720), int64], Tensor[(13, 7, 16), float64], Tensor[(256), float32]) {
  %669 = @func_5142() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %670 = cast(meta[relay.Constant][37] /* ty=Tensor[(720), int64] */, dtype="int64") /* ty=Tensor[(720), int64] */;
  %671 = cast(meta[relay.Constant][37] /* ty=Tensor[(720), int64] */, dtype="int64") /* ty=Tensor[(720), int64] */;
  %672 = reshape(%670, newshape=[15, 4, 12]) /* ty=Tensor[(15, 4, 12), int64] */;
  %673 = reshape(%671, newshape=[15, 4, 12]) /* ty=Tensor[(15, 4, 12), int64] */;
  %674 = @func_3598(%672, %673) /* ty=(Tensor[(15, 4, 12), int64], Tensor[(15, 4, 12), float32]) */;
  %675 = cast(%var_5345, dtype="float32") /* ty=Tensor[(256), float32] */;
  %676 = reshape(%675, newshape=[16, 16]) /* ty=Tensor[(16, 16), float32] */;
  %677 = @func_1918(%676) /* ty=(Tensor[(16, 16), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), bool]) */;
  %678 = %669.0;
  %679 = %674.1;
  %680 = %677.1;
  (%678, %679, meta[relay.Constant][37] /* ty=Tensor[(720), int64] */, %680, %var_5345)
}

def @func_6594(%var_6584: Tensor[(882, 2), int32]) -> (Tensor[(256), float32], Tensor[(9, 14, 14), uint16], Tensor[(882, 2), int32], Tensor[(12, 9, 9), uint16]) {
  %681 = @func_3344() /* ty=(Tensor[(256), float32],) */;
  %682 = cast(%var_6584, dtype="int32") /* ty=Tensor[(882, 2), int32] */;
  %683 = cast(%var_6584, dtype="bool") /* ty=Tensor[(882, 2), bool] */;
  %684 = reshape(%682, newshape=[9, 14, 14]) /* ty=Tensor[(9, 14, 14), int32] */;
  %685 = reshape(%683, newshape=[9, 14, 14]) /* ty=Tensor[(9, 14, 14), bool] */;
  %686 = @func_2383(%684, %685) /* ty=(Tensor[(9, 14, 14), uint16],) */;
  %687 = @func_6352() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %688 = %681.0;
  %689 = %686.0;
  %690 = %687.0;
  (%688, %689, %var_6584, %690)
}

def @func_3197() -> Tensor[(12, 9, 9), float64] {
  @func_2547() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_502(%var_487: Tensor[(7, 13, 3), uint8], %var_497: Tensor[(1680), float64], %var_498: Tensor[(1, 1287), float32]) -> (Tensor[(7, 13, 3), bool], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1, 1287), float32]) {
  %691 = cast(%var_487, dtype="bool") /* ty=Tensor[(7, 13, 3), bool] */;
  %692 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(7, 13, 3), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 13, 3), uint8] */, dtype="bool") /* ty=Tensor[(7, 13, 3), bool] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %695 = cast(%var_497, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %696 = cast(%var_498, dtype="float32") /* ty=Tensor[(1, 1287), float32] */;
  %697 = reshape(%695, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float64] */;
  %698 = reshape(%696, newshape=[143, 9]) /* ty=Tensor[(143, 9), float32] */;
  %699 = @func_348(%697, %698) /* ty=(Tensor[(8, 14, 15), float64], Tensor[(9, 11, 13), float32], Tensor[(143, 9), float32], Tensor[(9, 11, 13), float32]) */;
  %700 = equal(%693, %694) /* ty=Tensor[(7, 13, 3), bool] */;
  %701 = %699.3;
  (%700, %701, %var_497, %var_498)
}

def @func_4462(%var_4443: Tensor[(1287), float32]) -> (Tensor[(256), float32], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1287), float32], Tensor[(12, 9, 9), float64]) {
  %702 = @func_3344() /* ty=(Tensor[(256), float32],) */;
  %703 = cast(meta[relay.Constant][39] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %704 = cast(%var_4443, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %705 = reshape(%703, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float64] */;
  %706 = reshape(%704, newshape=[143, 9]) /* ty=Tensor[(143, 9), float32] */;
  %707 = @func_348(%705, %706) /* ty=(Tensor[(8, 14, 15), float64], Tensor[(9, 11, 13), float32], Tensor[(143, 9), float32], Tensor[(9, 11, 13), float32]) */;
  %708 = @func_2969() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %709 = %702.0;
  %710 = %707.1;
  %711 = %708.0;
  (%709, %710, meta[relay.Constant][39] /* ty=Tensor[(1680), float64] */, %var_4443, %711)
}

def @func_2493() -> (Tensor[(12, 9, 9), float64], Tensor[(16, 16), float32], Tensor[(256), float32]) {
  %712 = cast(meta[relay.Constant][40] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %713 = reshape(%712, newshape=[16, 16]) /* ty=Tensor[(16, 16), float32] */;
  %714 = @func_1918(%713) /* ty=(Tensor[(16, 16), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), bool]) */;
  %715 = @func_1868() /* ty=Tensor[(12, 9, 9), float64] */;
  %716 = %714.0;
  (%715, %716, meta[relay.Constant][40] /* ty=Tensor[(256), float32] */)
}

def @func_5444() -> (Tensor[(12, 9, 9), uint16],) {
  %717 = @func_3182() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %718 = %717.0;
  (%718,)
}

def @func_1244(%var_1237: Tensor[(4, 10, 4), bool]) -> (Tensor[(4, 10, 4), bool],) {
  %719 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 10, 4), bool] */, dtype="bool") /* ty=Tensor[(4, 10, 4), bool] */;
  %720 = shape_of(%var_1237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%var_1237, dtype="bool") /* ty=Tensor[(4, 10, 4), bool] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %723 = logical_and(%721, %722) /* ty=Tensor[(4, 10, 4), bool] */;
  (%723,)
}

def @func_6420() -> (Tensor[(12), float32], Tensor[(13, 7, 16), bool]) {
  %724 = @func_4041() /* ty=(Tensor[(12), float32],) */;
  %725 = @func_5718() /* ty=(Tensor[(13, 7, 16), bool],) */;
  %726 = %724.0;
  %727 = %725.0;
  (%726, %727)
}

def @func_1821() -> (Tensor[(12, 9, 9), float64],) {
  %728 = cast(meta[relay.Constant][42] /* ty=Tensor[(12, 9, 9), float64] */, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %729 = log(%728) /* ty=Tensor[(12, 9, 9), float64] */;
  (%729,)
}

def @func_1449(%var_1433: Tensor[(2, 1, 6), float32]) -> (Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(2, 1, 6), float64], Tensor[(1287), float64]) {
  %730 = cast(meta[relay.Constant][43] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %731 = cast(meta[relay.Constant][44] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %732 = reshape(%730, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float64] */;
  %733 = reshape(%731, newshape=[143, 9]) /* ty=Tensor[(143, 9), float32] */;
  %734 = @func_348(%732, %733) /* ty=(Tensor[(8, 14, 15), float64], Tensor[(9, 11, 13), float32], Tensor[(143, 9), float32], Tensor[(9, 11, 13), float32]) */;
  %735 = cast(%var_1433, dtype="float32") /* ty=Tensor[(2, 1, 6), float32] */;
  %736 = log2(%735) /* ty=Tensor[(2, 1, 6), float32] */;
  %737 = cast(%736, dtype="float64") /* ty=Tensor[(2, 1, 6), float64] */;
  %738 = cast(meta[relay.Constant][44] /* ty=Tensor[(1287), float32] */, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %739 = %734.1;
  %740 = sin(%737) /* ty=Tensor[(2, 1, 6), float64] */;
  %741 = tan(%738) /* ty=Tensor[(1287), float64] */;
  (%739, meta[relay.Constant][43] /* ty=Tensor[(1680), float64] */, %740, %741)
}

def @func_7116() -> Tensor[(12, 9, 9), float64] {
  @func_2547() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_3598(%var_3572: Tensor[(15, 4, 12), int64], %var_3573: Tensor[(15, 4, 12), int64]) -> (Tensor[(15, 4, 12), int64], Tensor[(15, 4, 12), float32]) {
  %742 = cast(%var_3573, dtype="int64") /* ty=Tensor[(15, 4, 12), int64] */;
  %743 = shape_of(%var_3572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%var_3572, dtype="int64") /* ty=Tensor[(15, 4, 12), int64] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %746 = cast(%var_3573, dtype="float32") /* ty=Tensor[(15, 4, 12), float32] */;
  %747 = logical_xor(%744, %745) /* ty=Tensor[(15, 4, 12), int64] */;
  %748 = rsqrt(%746) /* ty=Tensor[(15, 4, 12), float32] */;
  (%747, %748)
}

def @func_1918(%var_1902: Tensor[(16, 16), float32]) -> (Tensor[(16, 16), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), bool]) {
  %749 = cast(%var_1902, dtype="float32") /* ty=Tensor[(16, 16), float32] */;
  %750 = cast(meta[relay.Constant][45] /* ty=Tensor[(1456), bool] */, dtype="bool") /* ty=Tensor[(1456), bool] */;
  %751 = cast(meta[relay.Constant][45] /* ty=Tensor[(1456), bool] */, dtype="bool") /* ty=Tensor[(1456), bool] */;
  %752 = reshape(%750, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), bool] */;
  %753 = reshape(%751, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), bool] */;
  %754 = @func_853(%752, %753) /* ty=(Tensor[(13, 7, 16), bool], Tensor[(13, 7, 16), float64]) */;
  %755 = sin(%749) /* ty=Tensor[(16, 16), float32] */;
  %756 = %754.1;
  (%755, %756, meta[relay.Constant][45] /* ty=Tensor[(1456), bool] */)
}

def @func_5856(%var_5783: Tensor[(11, 3, 16), float64], %var_5821: Tensor[(256), float32], %var_5836: Tensor[(11, 3, 16), bool]) -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), uint16], Tensor[(11, 3, 16), float32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(14, 10, 15), uint32], Tensor[(2100, 1), uint32], Tensor[(11, 3, 16), uint16], Tensor[(12, 9, 9), float64]) {
  %757 = @func_3484() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %758 = cast(%var_5783, dtype="float64") /* ty=Tensor[(11, 3, 16), float64] */;
  %759 = asin(%758) /* ty=Tensor[(11, 3, 16), float64] */;
  %760 = cast(%759, dtype="bool") /* ty=Tensor[(11, 3, 16), bool] */;
  %761 = shape_of(%var_5783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%var_5783, dtype="bool") /* ty=Tensor[(11, 3, 16), bool] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %764 = greater(%762, %763) /* ty=Tensor[(11, 3, 16), bool] */;
  %765 = cast(%764, dtype="float32") /* ty=Tensor[(11, 3, 16), float32] */;
  %766 = shape_of(%759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%759, dtype="float32") /* ty=Tensor[(11, 3, 16), float32] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %769 = cast(%var_5821, dtype="float32") /* ty=Tensor[(256), float32] */;
  %770 = reshape(%769, newshape=[256]) /* ty=Tensor[(256), float32] */;
  %771 = @func_4705(%770) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(9, 11, 13), float32], Tensor[(429, 3), float32]) */;
  %772 = cast(meta[relay.Constant][46] /* ty=Tensor[(2100, 1), uint32] */, dtype="uint32") /* ty=Tensor[(2100, 1), uint32] */;
  %773 = reshape(%772, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), uint32] */;
  %774 = @func_5554(%773) /* ty=(Tensor[(14, 10, 15), uint32],) */;
  %775 = cast(%var_5836, dtype="uint16") /* ty=Tensor[(11, 3, 16), uint16] */;
  %776 = shape_of(%764, dtype="int32") /* ty=Tensor[(3), int32] */;
  %777 = cast(%764, dtype="uint16") /* ty=Tensor[(11, 3, 16), uint16] */;
  %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %779 = @func_3569() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(256), float32]) */;
  %780 = @func_3929() /* ty=Tensor[(12, 9, 9), float64] */;
  %781 = %757.0;
  %782 = floor_divide(%767, %768) /* ty=Tensor[(11, 3, 16), float32] */;
  %783 = %771.2;
  %784 = %774.0;
  %785 = right_shift(%777, %778) /* ty=Tensor[(11, 3, 16), uint16] */;
  %786 = %779.1;
  (%780, %781, %782, %783, %var_5821, %784, meta[relay.Constant][46] /* ty=Tensor[(2100, 1), uint32] */, %785, %786)
}

def @func_3146(%var_3137: Tensor[(429, 3), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(429, 3), float32], Tensor[(9, 11, 13), float64], Tensor[(12, 9, 9), float64]) {
  %787 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %788 = cast(%var_3137, dtype="float32") /* ty=Tensor[(429, 3), float32] */;
  %789 = reshape(%788, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %790 = @func_83(%789) /* ty=Tensor[(9, 11, 13), float32] */;
  %791 = cast(%790, dtype="float64") /* ty=Tensor[(9, 11, 13), float64] */;
  %792 = %787.1;
  %793 = atan(%791) /* ty=Tensor[(9, 11, 13), float64] */;
  %794 = @func_2547() /* ty=Tensor[(12, 9, 9), float64] */;
  (%792, %var_3137, %793, %794)
}

def @func_2248() -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool], Tensor[(12, 9, 9), float64]) {
  %795 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %796 = @func_1821() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %797 = cast(meta[relay.Constant][47] /* ty=Tensor[(1456), bool] */, dtype="bool") /* ty=Tensor[(1456), bool] */;
  %798 = cast(meta[relay.Constant][47] /* ty=Tensor[(1456), bool] */, dtype="bool") /* ty=Tensor[(1456), bool] */;
  %799 = reshape(%797, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), bool] */;
  %800 = reshape(%798, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), bool] */;
  %801 = @func_853(%799, %800) /* ty=(Tensor[(13, 7, 16), bool], Tensor[(13, 7, 16), float64]) */;
  %802 = @func_1821() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %803 = @func_1868() /* ty=Tensor[(12, 9, 9), float64] */;
  %804 = %795.1;
  %805 = %796.0;
  %806 = %801.0;
  %807 = %802.0;
  (%803, %804, %805, %806, meta[relay.Constant][47] /* ty=Tensor[(1456), bool] */, %807)
}

def @func_7684() -> (Tensor[(12, 9, 9), float64], Tensor[(16, 12, 9), bool], Tensor[(1728), uint64], Tensor[(12, 9, 9), float64], Tensor[(18, 18), float32], Tensor[(12), float32], Tensor[(3, 15, 1), float64]) {
  %808 = cast(meta[relay.Constant][48] /* ty=Tensor[(1728), uint64] */, dtype="uint64") /* ty=Tensor[(1728), uint64] */;
  %809 = cast(meta[relay.Constant][48] /* ty=Tensor[(1728), uint64] */, dtype="uint64") /* ty=Tensor[(1728), uint64] */;
  %810 = reshape(%808, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), uint64] */;
  %811 = reshape(%809, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), uint64] */;
  %812 = @func_5628() /* ty=(Tensor[(12, 9, 9), bool], Tensor[(5, 2, 4), bool], Tensor[(18, 18), float32]) */;
  %813 = @func_3212() /* ty=(Tensor[(12), float32],) */;
  %814 = cast(meta[relay.Constant][49] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %815 = reshape(%814, newshape=[]) /* ty=uint64 */;
  %816 = @func_6688(%815) /* ty=(Tensor[(3, 15, 1), uint64],) */;
  %817 = %816.0;
  %818 = cast(%817, dtype="int8") /* ty=Tensor[(3, 15, 1), int8] */;
  %819 = cast(meta[relay.Constant][49] /* ty=uint64 */, dtype="int8") /* ty=int8 */;
  %820 = right_shift(%818, %819) /* ty=Tensor[(3, 15, 1), int8] */;
  %821 = cast(%820, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
  %822 = @func_7116() /* ty=Tensor[(12, 9, 9), float64] */;
  %823 = @func_2531(%810, %811) /* ty=Tensor[(16, 12, 9), bool] */;
  %824 = @func_6739() /* ty=Tensor[(12, 9, 9), float64] */;
  %825 = %812.2;
  %826 = %813.0;
  %827 = rsqrt(%821) /* ty=Tensor[(3, 15, 1), float64] */;
  (%822, %823, meta[relay.Constant][48] /* ty=Tensor[(1728), uint64] */, %824, %825, %826, %827)
}

def @func_2096() -> Tensor[(12, 9, 9), float64] {
  %828 = @func_1821() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %828.0
}

def @func_5301(%var_5280: Tensor[(16, 11, 11), uint8], %var_5281: Tensor[(16, 11, 11), uint8]) -> (Tensor[(16, 11, 11), uint8], Tensor[(12, 9, 9), uint16]) {
  %829 = cast(%var_5281, dtype="uint8") /* ty=Tensor[(16, 11, 11), uint8] */;
  %830 = shape_of(%var_5280, dtype="int32") /* ty=Tensor[(3), int32] */;
  %831 = cast(%var_5280, dtype="uint8") /* ty=Tensor[(16, 11, 11), uint8] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %833 = @func_3484() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %834 = bitwise_or(%831, %832) /* ty=Tensor[(16, 11, 11), uint8] */;
  %835 = %833.0;
  (%834, %835)
}

def @func_4939(%var_4913: Tensor[(14, 5, 14), float32]) -> (Tensor[(5, 2, 4), bool], Tensor[(40), uint16], Tensor[(14, 5, 14), float32]) {
  %836 = cast(meta[relay.Constant][50] /* ty=Tensor[(40), uint16] */, dtype="uint16") /* ty=Tensor[(40), uint16] */;
  %837 = cast(meta[relay.Constant][50] /* ty=Tensor[(40), uint16] */, dtype="uint16") /* ty=Tensor[(40), uint16] */;
  %838 = reshape(%836, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), uint16] */;
  %839 = reshape(%837, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), uint16] */;
  %840 = @func_2573(%838, %839) /* ty=(Tensor[(5, 2, 4), bool],) */;
  %841 = cast(%var_4913, dtype="float32") /* ty=Tensor[(14, 5, 14), float32] */;
  %842 = tan(%841) /* ty=Tensor[(14, 5, 14), float32] */;
  %843 = cast(meta[relay.Constant][51] /* ty=Tensor[(14, 5, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 5, 14), float32] */;
  %844 = shape_of(%842, dtype="int32") /* ty=Tensor[(3), int32] */;
  %845 = cast(%842, dtype="float32") /* ty=Tensor[(14, 5, 14), float32] */;
  %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %847 = %840.0;
  %848 = power(%845, %846) /* ty=Tensor[(14, 5, 14), float32] */;
  (%847, meta[relay.Constant][50] /* ty=Tensor[(40), uint16] */, %848)
}

def @func_4028(%var_3974: Tensor[(300), uint8]) -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool], Tensor[(300), uint8]) {
  %849 = @func_2248() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool], Tensor[(12, 9, 9), float64]) */;
  %850 = cast(%var_3974, dtype="uint8") /* ty=Tensor[(300), uint8] */;
  %851 = %849.5;
  %852 = cast(%851, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %853 = reshape(%850, newshape=[150, 2]) /* ty=Tensor[(150, 2), uint8] */;
  %854 = reshape(%852, newshape=[12, 9, 9]) /* ty=Tensor[(12, 9, 9), float64] */;
  %855 = @func_3814(%853, %854) /* ty=(Tensor[(2, 15, 10), uint8], Tensor[(12), float32], Tensor[(12, 9, 9), bool], Tensor[(150, 2), float64]) */;
  %856 = %855.2;
  (%851, %856, %var_3974)
}

def @func_3212() -> (Tensor[(12), float32],) {
  %857 = @func_2446() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32]) */;
  %858 = %857.2;
  (%858,)
}

def @func_7550() -> (Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool]) {
  %859 = @func_2707() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %860 = cast(meta[relay.Constant][52] /* ty=Tensor[(1456), bool] */, dtype="bool") /* ty=Tensor[(1456), bool] */;
  %861 = cast(meta[relay.Constant][52] /* ty=Tensor[(1456), bool] */, dtype="bool") /* ty=Tensor[(1456), bool] */;
  %862 = reshape(%860, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), bool] */;
  %863 = reshape(%861, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), bool] */;
  %864 = @func_853(%862, %863) /* ty=(Tensor[(13, 7, 16), bool], Tensor[(13, 7, 16), float64]) */;
  %865 = %859.0;
  %866 = %864.0;
  (%865, %866, meta[relay.Constant][52] /* ty=Tensor[(1456), bool] */)
}

def @func_2165(%var_2156: Tensor[(6, 3, 4), float32], %var_2157: Tensor[(6, 3, 4), float32]) -> (Tensor[(6, 3, 4), int32],) {
  %867 = cast(%var_2157, dtype="float32") /* ty=Tensor[(6, 3, 4), float32] */;
  %868 = shape_of(%var_2156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %869 = cast(%var_2156, dtype="float32") /* ty=Tensor[(6, 3, 4), float32] */;
  %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %871 = minimum(%869, %870) /* ty=Tensor[(6, 3, 4), float32] */;
  %872 = cast(%var_2156, dtype="int32") /* ty=Tensor[(6, 3, 4), int32] */;
  %873 = shape_of(%871, dtype="int32") /* ty=Tensor[(3), int32] */;
  %874 = cast(%871, dtype="int32") /* ty=Tensor[(6, 3, 4), int32] */;
  %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %876 = add(%874, %875) /* ty=Tensor[(6, 3, 4), int32] */;
  (%876,)
}

def @func_7835() -> (Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float64]) {
  %877 = @func_3449() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool]) */;
  %878 = @func_6176() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(12), float32]) */;
  %879 = %877.1;
  %880 = %878.0;
  (%879, %880)
}

def @func_6352() -> (Tensor[(12, 9, 9), uint16],) {
  %881 = @func_4850() /* ty=(Tensor[(12, 9, 9), uint16], Tensor[(12), float32], Tensor[(2, 360), int64], Tensor[(429, 3), float32], Tensor[(1287), float32]) */;
  %882 = %881.0;
  (%882,)
}

def @func_3115() -> Tensor[(12, 9, 9), float64] {
  %883 = @func_2248() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool], Tensor[(12, 9, 9), float64]) */;
  %883.2
}

def @func_3569() -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(256), float32]) {
  %884 = @func_3484() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %885 = %884.0;
  %886 = @func_3197() /* ty=Tensor[(12, 9, 9), float64] */;
  %887 = cast(%886, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %888 = shape_of(%885, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(%885, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %891 = @func_3449() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool]) */;
  %892 = @func_2686() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %893 = @func_3344() /* ty=(Tensor[(256), float32],) */;
  %894 = @func_1868() /* ty=Tensor[(12, 9, 9), float64] */;
  %895 = mod(%889, %890) /* ty=Tensor[(12, 9, 9), float64] */;
  %896 = %891.0;
  %897 = %892.0;
  %898 = %893.0;
  (%894, %895, %896, %897, %898)
}

def @func_1967(%var_1932: Tensor[(12, 7, 12), float32]) -> (Tensor[(12, 7, 12), float32],) {
  %899 = cast(%var_1932, dtype="float32") /* ty=Tensor[(12, 7, 12), float32] */;
  %900 = log2(%899) /* ty=Tensor[(12, 7, 12), float32] */;
  %901 = cast(%var_1932, dtype="int64") /* ty=Tensor[(12, 7, 12), int64] */;
  %902 = shape_of(%900, dtype="int32") /* ty=Tensor[(3), int32] */;
  %903 = cast(%900, dtype="int64") /* ty=Tensor[(12, 7, 12), int64] */;
  %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %905 = bitwise_xor(%903, %904) /* ty=Tensor[(12, 7, 12), int64] */;
  %906 = cast(%905, dtype="float32") /* ty=Tensor[(12, 7, 12), float32] */;
  %907 = shape_of(%var_1932, dtype="int32") /* ty=Tensor[(3), int32] */;
  %908 = cast(%var_1932, dtype="float32") /* ty=Tensor[(12, 7, 12), float32] */;
  %909 = dyn.reshape(%906, %907, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %910 = floor_mod(%908, %909) /* ty=Tensor[(12, 7, 12), float32] */;
  (%910,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2761() -> Tensor[(12, 9, 9), float64] {
  @func_2096() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_5416(%var_5413: Tensor[(160), bool], %var_5414: Tensor[(4, 10, 4), float64], %var_5415: Tensor[(1287), float32]) -> (Tensor[(12), float32], Tensor[(160), bool], Tensor[(12), float32], Tensor[(4, 10, 4), bool], Tensor[(1287), float32], Tensor[(1287), float32]) {
  @func_5411(%var_5413, %var_5414, %var_5415) /* ty=(Tensor[(12), float32], Tensor[(160), bool], Tensor[(12), float32], Tensor[(4, 10, 4), bool], Tensor[(1287), float32], Tensor[(1287), float32]) */
}

def @func_5434() -> (Tensor[(12, 9, 9), float64],) {
  @func_5432() /* ty=(Tensor[(12, 9, 9), float64],) */
}

def @func_1029(%var_1026: Tensor[(5, 1, 6), float32], %var_1027: Tensor[(143, 9), float32], %var_1028: Tensor[(273, 1), uint8]) -> (Tensor[(12, 140), float64], Tensor[(5, ?, 6), uint16], Tensor[(143, 9), bool], Tensor[(143, 9), float32], Tensor[(7, 13, 3), bool], Tensor[(273, 1), uint8]) {
  @func_1024(%var_1026, %var_1027, %var_1028) /* ty=(Tensor[(12, 140), float64], Tensor[(5, ?, 6), uint16], Tensor[(143, 9), bool], Tensor[(143, 9), float32], Tensor[(7, 13, 3), bool], Tensor[(273, 1), uint8]) */
}

def @func_5432() -> (Tensor[(12, 9, 9), float64],) {
  %0 = @func_2707() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %1 = %0.0;
  (%1,)
}

def @func_853(%var_845: Tensor[(13, 7, 16), bool], %var_846: Tensor[(13, 7, 16), bool]) -> (Tensor[(13, 7, 16), bool], Tensor[(13, 7, 16), float64]) {
  %2 = cast(%var_846, dtype="bool") /* ty=Tensor[(13, 7, 16), bool] */;
  %3 = shape_of(%var_845, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%var_845, dtype="bool") /* ty=Tensor[(13, 7, 16), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %6 = cast(%var_845, dtype="float64") /* ty=Tensor[(13, 7, 16), float64] */;
  %7 = logical_or(%4, %5) /* ty=Tensor[(13, 7, 16), bool] */;
  %8 = asinh(%6) /* ty=Tensor[(13, 7, 16), float64] */;
  (%7, %8)
}

def @func_2688() -> (Tensor[(12, 9, 9), float64],) {
  @func_2686() /* ty=(Tensor[(12, 9, 9), float64],) */
}

def @func_4042() -> (Tensor[(12), float32],) {
  %11 = fn () -> (Tensor[(12), float32],) {
    %9 = @func_3212() /* ty=(Tensor[(12), float32],) */;
    %10 = %9.0;
    (%10,)
  };
  %11() /* ty=(Tensor[(12), float32],) */
}

def @func_1451(%var_1450: Tensor[(2, 1, 6), float32]) -> (Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(2, 1, 6), float64], Tensor[(1287), float64]) {
  %24 = fn (%var_1433: Tensor[(2, 1, 6), float32]) -> (Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(2, 1, 6), float64], Tensor[(1287), float64]) {
    %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
    %14 = reshape(%12, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float64] */;
    %15 = reshape(%13, newshape=[143, 9]) /* ty=Tensor[(143, 9), float32] */;
    %16 = @func_348(%14, %15) /* ty=(Tensor[(8, 14, 15), float64], Tensor[(9, 11, 13), float32], Tensor[(143, 9), float32], Tensor[(9, 11, 13), float32]) */;
    %17 = cast(%var_1433, dtype="float32") /* ty=Tensor[(2, 1, 6), float32] */;
    %18 = log2(%17) /* ty=Tensor[(2, 1, 6), float32] */;
    %19 = cast(%18, dtype="float64") /* ty=Tensor[(2, 1, 6), float64] */;
    %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(1287), float32] */, dtype="float64") /* ty=Tensor[(1287), float64] */;
    %21 = %16.1;
    %22 = sin(%19) /* ty=Tensor[(2, 1, 6), float64] */;
    %23 = tan(%20) /* ty=Tensor[(1287), float64] */;
    (%21, meta[relay.Constant][0] /* ty=Tensor[(1680), float64] */, %22, %23)
  };
  %24(%var_1450) /* ty=(Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(2, 1, 6), float64], Tensor[(1287), float64]) */
}

def @func_6871(%var_6870: Tensor[(936), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(6, 13, 12), float32], Tensor[(936), float32]) {
  %31 = fn (%var_6864: Tensor[(936), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(6, 13, 12), float32], Tensor[(936), float32]) {
    %25 = @func_2707() /* ty=(Tensor[(12, 9, 9), float64],) */;
    %26 = cast(%var_6864, dtype="float32") /* ty=Tensor[(936), float32] */;
    %27 = reshape(%26, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float32] */;
    %28 = @func_6146(%27) /* ty=(Tensor[(6, 13, 12), float32],) */;
    %29 = %25.0;
    %30 = %28.0;
    (%29, %30, %var_6864)
  };
  %31(%var_6870) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(6, 13, 12), float32], Tensor[(936), float32]) */
}

def @func_85(%var_84: Tensor[(9, 11, 13), float32]) -> Tensor[(9, 11, 13), float32] {
  %33 = fn (%var_80: Tensor[(9, 11, 13), float32]) -> Tensor[(9, 11, 13), float32] {
    %32 = cast(%var_80, dtype="float32") /* ty=Tensor[(9, 11, 13), float32] */;
    sinh(%32) /* ty=Tensor[(9, 11, 13), float32] */
  };
  %33(%var_84) /* ty=Tensor[(9, 11, 13), float32] */
}

def @func_3307(%var_3306: Tensor[(1008, 1), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(12, 7, 12), float32], Tensor[(1008, 1), float32]) {
  %40 = fn (%var_3303: Tensor[(1008, 1), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(12, 7, 12), float32], Tensor[(1008, 1), float32]) {
    %34 = @func_2707() /* ty=(Tensor[(12, 9, 9), float64],) */;
    %35 = cast(%var_3303, dtype="float32") /* ty=Tensor[(1008, 1), float32] */;
    %36 = reshape(%35, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), float32] */;
    %37 = @func_1967(%36) /* ty=(Tensor[(12, 7, 12), float32],) */;
    %38 = %34.0;
    %39 = %37.0;
    (%38, %39, %var_3303)
  };
  %40(%var_3306) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 7, 12), float32], Tensor[(1008, 1), float32]) */
}

def @func_3569() -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(256), float32]) {
  %41 = @func_3484() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %42 = %41.0;
  %43 = @func_3197() /* ty=Tensor[(12, 9, 9), float64] */;
  %44 = cast(%43, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %45 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%42, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %48 = @func_3449() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool]) */;
  %49 = @func_2686() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %50 = @func_3344() /* ty=(Tensor[(256), float32],) */;
  %51 = @func_1868() /* ty=Tensor[(12, 9, 9), float64] */;
  %52 = mod(%46, %47) /* ty=Tensor[(12, 9, 9), float64] */;
  %53 = %48.0;
  %54 = %49.0;
  %55 = %50.0;
  (%51, %52, %53, %54, %55)
}

def @func_2970() -> (Tensor[(12, 9, 9), float64],) {
  %58 = fn () -> (Tensor[(12, 9, 9), float64],) {
    %56 = @func_2686() /* ty=(Tensor[(12, 9, 9), float64],) */;
    %57 = %56.0;
    (%57,)
  };
  %58() /* ty=(Tensor[(12, 9, 9), float64],) */
}

def @func_6594(%var_6584: Tensor[(882, 2), int32]) -> (Tensor[(256), float32], Tensor[(9, 14, 14), uint16], Tensor[(882, 2), int32], Tensor[(12, 9, 9), uint16]) {
  %59 = @func_3344() /* ty=(Tensor[(256), float32],) */;
  %60 = cast(%var_6584, dtype="int32") /* ty=Tensor[(882, 2), int32] */;
  %61 = cast(%var_6584, dtype="bool") /* ty=Tensor[(882, 2), bool] */;
  %62 = reshape(%60, newshape=[9, 14, 14]) /* ty=Tensor[(9, 14, 14), int32] */;
  %63 = reshape(%61, newshape=[9, 14, 14]) /* ty=Tensor[(9, 14, 14), bool] */;
  %64 = @func_2383(%62, %63) /* ty=(Tensor[(9, 14, 14), uint16],) */;
  %65 = @func_6352() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %66 = %59.0;
  %67 = %64.0;
  %68 = %65.0;
  (%66, %67, %var_6584, %68)
}

def @func_7117() -> Tensor[(12, 9, 9), float64] {
  %69 = fn () -> Tensor[(12, 9, 9), float64] {
    @func_2547() /* ty=Tensor[(12, 9, 9), float64] */
  };
  %69() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_5446() -> (Tensor[(12, 9, 9), uint16],) {
  @func_5444() /* ty=(Tensor[(12, 9, 9), uint16],) */
}

def @func_1823() -> (Tensor[(12, 9, 9), float64],) {
  @func_1821() /* ty=(Tensor[(12, 9, 9), float64],) */
}

def @func_6148(%var_6147: Tensor[(6, 13, 12), float32]) -> (Tensor[(6, 13, 12), float32],) {
  %72 = fn (%var_6137: Tensor[(6, 13, 12), float32]) -> (Tensor[(6, 13, 12), float32],) {
    %70 = cast(%var_6137, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
    %71 = atanh(%70) /* ty=Tensor[(6, 13, 12), float32] */;
    (%71,)
  };
  %72(%var_6147) /* ty=(Tensor[(6, 13, 12), float32],) */
}

def @func_3281() -> Tensor[(12, 9, 9), float64] {
  %73 = @func_2707() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %73.0
}

def @func_2213(%var_2212: Tensor[(143, 9), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(5, ?, 6), uint16], Tensor[(30), float32], Tensor[(143, 9), float32], Tensor[(273), uint8]) {
  %89 = fn (%var_2208: Tensor[(143, 9), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(5, ?, 6), uint16], Tensor[(30), float32], Tensor[(143, 9), float32], Tensor[(273), uint8]) {
    %74 = @func_1821() /* ty=(Tensor[(12, 9, 9), float64],) */;
    %75 = %74.0;
    %76 = cast(meta[relay.Constant][2] /* ty=Tensor[(12, 9, 9), float64] */, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
    %77 = shape_of(%75, dtype="int32") /* ty=Tensor[(3), int32] */;
    %78 = cast(%75, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
    %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %80 = cast(meta[relay.Constant][3] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
    %81 = cast(%var_2208, dtype="float32") /* ty=Tensor[(143, 9), float32] */;
    %82 = cast(meta[relay.Constant][4] /* ty=Tensor[(273), uint8] */, dtype="uint8") /* ty=Tensor[(273), uint8] */;
    %83 = reshape(%80, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
    %84 = reshape(%81, newshape=[143, 9]) /* ty=Tensor[(143, 9), float32] */;
    %85 = reshape(%82, newshape=[273, 1]) /* ty=Tensor[(273, 1), uint8] */;
    %86 = @func_1024(%83, %84, %85) /* ty=(Tensor[(12, 140), float64], Tensor[(5, ?, 6), uint16], Tensor[(143, 9), bool], Tensor[(143, 9), float32], Tensor[(7, 13, 3), bool], Tensor[(273, 1), uint8]) */;
    %87 = add(%78, %79) /* ty=Tensor[(12, 9, 9), float64] */;
    %88 = %86.1;
    (%87, %88, meta[relay.Constant][3] /* ty=Tensor[(30), float32] */, %var_2208, meta[relay.Constant][4] /* ty=Tensor[(273), uint8] */)
  };
  %89(%var_2212) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(5, ?, 6), uint16], Tensor[(30), float32], Tensor[(143, 9), float32], Tensor[(273), uint8]) */
}

def @func_5628() -> (Tensor[(12, 9, 9), bool], Tensor[(5, 2, 4), bool], Tensor[(18, 18), float32]) {
  %90 = cast(meta[relay.Constant][5] /* ty=Tensor[(18, 18), float32] */, dtype="float32") /* ty=Tensor[(18, 18), float32] */;
  %91 = reshape(%90, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), float32] */;
  %92 = @func_4883(%91) /* ty=(Tensor[(12, 9, 3), bool], Tensor[(5, 2, 4), bool], uint16, Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %93 = @func_3657() /* ty=Tensor[(12, 9, 9), bool] */;
  %94 = %92.1;
  (%93, %94, meta[relay.Constant][5] /* ty=Tensor[(18, 18), float32] */)
}

def @func_7815() -> (Tensor[(12, 9, 9), float64],) {
  @func_7813() /* ty=(Tensor[(12, 9, 9), float64],) */
}

def @func_6688(%var_6664: uint64) -> (Tensor[(3, 15, 1), uint64],) {
  %95 = cast(%var_6664, dtype="uint64") /* ty=uint64 */;
  %96 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 15, 1), uint64] */, dtype="uint64") /* ty=Tensor[(3, 15, 1), uint64] */;
  %97 = bitwise_and(%95, %96) /* ty=Tensor[(3, 15, 1), uint64] */;
  (%97,)
}

def @func_3659() -> Tensor[(12, 9, 9), bool] {
  @func_3657() /* ty=Tensor[(12, 9, 9), bool] */
}

def @func_5466(%var_5465: Tensor[(1764), int32]) -> (Tensor[(2, 1, 6), float64], Tensor[(9, 14, 14), uint16], Tensor[(1764), int32]) {
  %106 = fn (%var_5455: Tensor[(1764), int32]) -> (Tensor[(2, 1, 6), float64], Tensor[(9, 14, 14), uint16], Tensor[(1764), int32]) {
    %98 = @func_2757() /* ty=(Tensor[(2, 1, 6), float64],) */;
    %99 = cast(%var_5455, dtype="int32") /* ty=Tensor[(1764), int32] */;
    %100 = cast(%var_5455, dtype="bool") /* ty=Tensor[(1764), bool] */;
    %101 = reshape(%99, newshape=[9, 14, 14]) /* ty=Tensor[(9, 14, 14), int32] */;
    %102 = reshape(%100, newshape=[9, 14, 14]) /* ty=Tensor[(9, 14, 14), bool] */;
    %103 = @func_2383(%101, %102) /* ty=(Tensor[(9, 14, 14), uint16],) */;
    %104 = %98.0;
    %105 = %103.0;
    (%104, %105, %var_5455)
  };
  %106(%var_5465) /* ty=(Tensor[(2, 1, 6), float64], Tensor[(9, 14, 14), uint16], Tensor[(1764), int32]) */
}

def @main(%var_7859: Tensor[(1680), float64]) -> (Tensor[(12, 9, 9), uint16], Tensor[(273), uint8], Tensor[(1680), float64], Tensor[(?, 1287), bool], Tensor[(4, 10, 4), bool], Tensor[(160), bool], Tensor[(?, 1287), float32]) {
  %107 = @func_5144() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %108 = cast(meta[relay.Constant][7] /* ty=Tensor[(273), uint8] */, dtype="uint8") /* ty=Tensor[(273), uint8] */;
  %109 = cast(%var_7859, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %110 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 1287), float32] */, dtype="float32") /* ty=Tensor[(1, 1287), float32] */;
  %111 = reshape(%108, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), uint8] */;
  %112 = reshape(%109, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %113 = reshape(%110, newshape=[1, 1287]) /* ty=Tensor[(1, 1287), float32] */;
  %114 = @func_507(%111, %112, %113) /* ty=(Tensor[(7, 13, 3), bool], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1, 1287), float32]) */;
  %115 = %114.3;
  %116 = cast(%115, dtype="float32") /* ty=Tensor[(1, 1287), float32] */;
  %117 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(1, 1287), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %118 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 1287), float32] */, dtype="float32") /* ty=Tensor[(1, 1287), float32] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %120 = divide(%118, %119) /* ty=Tensor[(?, 1287), float32] */;
  %121 = cast(%120, dtype="bool") /* ty=Tensor[(?, 1287), bool] */;
  %122 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(1, 1287), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %123 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 1287), float32] */, dtype="bool") /* ty=Tensor[(1, 1287), bool] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %125 = cast(meta[relay.Constant][9] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %126 = reshape(%125, newshape=[4, 10, 4]) /* ty=Tensor[(4, 10, 4), bool] */;
  %127 = @func_1246(%126) /* ty=(Tensor[(4, 10, 4), bool],) */;
  %128 = cast(%120, dtype="int32") /* ty=Tensor[(?, 1287), int32] */;
  %129 = shape_of(%115, dtype="int32") /* ty=Tensor[(2), int32] */;
  %130 = cast(%115, dtype="int32") /* ty=Tensor[(1, 1287), int32] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %132 = subtract(%130, %131) /* ty=Tensor[(?, 1287), int32] */;
  %133 = cast(%132, dtype="float32") /* ty=Tensor[(?, 1287), float32] */;
  %134 = %107.0;
  %135 = greater_equal(%123, %124) /* ty=Tensor[(?, 1287), bool] */;
  %136 = %127.0;
  %137 = erf(%133) /* ty=Tensor[(?, 1287), float32] */;
  (%134, meta[relay.Constant][7] /* ty=Tensor[(273), uint8] */, %var_7859, %135, %136, meta[relay.Constant][9] /* ty=Tensor[(160), bool] */, %137)
}

def @func_5515() -> (Tensor[(12, 9, 9), uint16], Tensor[(12, 9, 9), float64]) {
  %142 = fn () -> (Tensor[(12, 9, 9), uint16], Tensor[(12, 9, 9), float64]) {
    %138 = @func_3008() /* ty=(Tensor[(12, 9, 9), uint16],) */;
    %139 = @func_2707() /* ty=(Tensor[(12, 9, 9), float64],) */;
    %140 = %138.0;
    %141 = %139.0;
    (%140, %141)
  };
  %142() /* ty=(Tensor[(12, 9, 9), uint16], Tensor[(12, 9, 9), float64]) */
}

def @func_4159(%var_4157: Tensor[(8, 182), bool], %var_4158: Tensor[(150, 2), uint8]) -> (Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), uint8], Tensor[(8, 182), bool], Tensor[(12, 9, 9), uint16], Tensor[(12, 9, 9), uint16], Tensor[(2, 15, 10), uint8], Tensor[(150, 2), uint8]) {
  %158 = fn (%var_4104: Tensor[(8, 182), bool], %var_4151: Tensor[(150, 2), uint8]) -> (Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), uint8], Tensor[(8, 182), bool], Tensor[(12, 9, 9), uint16], Tensor[(12, 9, 9), uint16], Tensor[(2, 15, 10), uint8], Tensor[(150, 2), uint8]) {
    %143 = @func_2707() /* ty=(Tensor[(12, 9, 9), float64],) */;
    %144 = cast(%var_4104, dtype="bool") /* ty=Tensor[(8, 182), bool] */;
    %145 = cast(%var_4104, dtype="bool") /* ty=Tensor[(8, 182), bool] */;
    %146 = reshape(%144, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), bool] */;
    %147 = reshape(%145, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), bool] */;
    %148 = @func_3008() /* ty=(Tensor[(12, 9, 9), uint16],) */;
    %149 = cast(%var_4151, dtype="uint8") /* ty=Tensor[(150, 2), uint8] */;
    %150 = cast(%var_4151, dtype="uint8") /* ty=Tensor[(150, 2), uint8] */;
    %151 = reshape(%149, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
    %152 = reshape(%150, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
    %153 = %143.0;
    %154 = @func_2649(%146, %147) /* ty=Tensor[(13, 7, 16), uint8] */;
    %155 = @func_2732() /* ty=Tensor[(12, 9, 9), uint16] */;
    %156 = %148.0;
    %157 = @func_1797(%151, %152) /* ty=Tensor[(2, 15, 10), uint8] */;
    (%153, %154, %var_4104, %155, %156, %157, %var_4151)
  };
  %158(%var_4157, %var_4158) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), uint8], Tensor[(8, 182), bool], Tensor[(12, 9, 9), uint16], Tensor[(12, 9, 9), uint16], Tensor[(2, 15, 10), uint8], Tensor[(150, 2), uint8]) */
}

def @func_857(%var_855: Tensor[(13, 7, 16), bool], %var_856: Tensor[(13, 7, 16), bool]) -> (Tensor[(13, 7, 16), bool], Tensor[(13, 7, 16), float64]) {
  @func_853(%var_855, %var_856) /* ty=(Tensor[(13, 7, 16), bool], Tensor[(13, 7, 16), float64]) */
}

def @func_2387(%var_2385: Tensor[(9, 14, 14), int32], %var_2386: Tensor[(9, 14, 14), bool]) -> (Tensor[(9, 14, 14), uint16],) {
  @func_2383(%var_2385, %var_2386) /* ty=(Tensor[(9, 14, 14), uint16],) */
}

def @func_3036() -> (Tensor[(13, 7, 16), bool],) {
  %159 = @func_2248() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool], Tensor[(12, 9, 9), float64]) */;
  %160 = %159.3;
  (%160,)
}

def @func_6176() -> (Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(12), float32]) {
  %161 = @func_2686() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %162 = @func_5718() /* ty=(Tensor[(13, 7, 16), bool],) */;
  %163 = @func_4041() /* ty=(Tensor[(12), float32],) */;
  %164 = %161.0;
  %165 = %162.0;
  %166 = %163.0;
  (%164, %165, %166)
}

def @func_6244() -> (Tensor[(13, 7, 16), bool], Tensor[(12, 9, 9), float64]) {
  @func_6242() /* ty=(Tensor[(13, 7, 16), bool], Tensor[(12, 9, 9), float64]) */
}

def @func_3753(%var_3737: Tensor[(720), int64]) -> (Tensor[(12), float32], Tensor[(12, 9, 9), uint16], Tensor[(15, 4, 12), float32], Tensor[(720), int64], Tensor[(12, 9, 9), float64]) {
  %167 = @func_3212() /* ty=(Tensor[(12), float32],) */;
  %168 = @func_3008() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %169 = cast(%var_3737, dtype="int64") /* ty=Tensor[(720), int64] */;
  %170 = cast(%var_3737, dtype="int64") /* ty=Tensor[(720), int64] */;
  %171 = reshape(%169, newshape=[15, 4, 12]) /* ty=Tensor[(15, 4, 12), int64] */;
  %172 = reshape(%170, newshape=[15, 4, 12]) /* ty=Tensor[(15, 4, 12), int64] */;
  %173 = @func_3598(%171, %172) /* ty=(Tensor[(15, 4, 12), int64], Tensor[(15, 4, 12), float32]) */;
  %174 = %167.0;
  %175 = %168.0;
  %176 = %173.1;
  %177 = @func_2547() /* ty=Tensor[(12, 9, 9), float64] */;
  (%174, %175, %176, %var_3737, %177)
}

def @func_2547() -> Tensor[(12, 9, 9), float64] {
  %178 = @func_2248() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool], Tensor[(12, 9, 9), float64]) */;
  %178.2
}

def @func_6597(%var_6595: Tensor[(882, 2), int32]) -> (Tensor[(256), float32], Tensor[(9, 14, 14), uint16], Tensor[(882, 2), int32], Tensor[(12, 9, 9), uint16]) {
  @func_6594(%var_6595) /* ty=(Tensor[(256), float32], Tensor[(9, 14, 14), uint16], Tensor[(882, 2), int32], Tensor[(12, 9, 9), uint16]) */
}

def @func_5953(%var_5951: Tensor[(3, 14, 7), float32]) -> (Tensor[(3, 14, 7), float32],) {
  @func_5950(%var_5951) /* ty=(Tensor[(3, 14, 7), float32],) */
}

def @func_1990(%var_1988: Tensor[(8, 4, 7), float64]) -> (Tensor[(8, 4, 7), float64],) {
  @func_1987(%var_1988) /* ty=(Tensor[(8, 4, 7), float64],) */
}

def @func_3184() -> (Tensor[(12, 9, 9), uint16],) {
  @func_3182() /* ty=(Tensor[(12, 9, 9), uint16],) */
}

def @func_2165(%var_2156: Tensor[(6, 3, 4), float32], %var_2157: Tensor[(6, 3, 4), float32]) -> (Tensor[(6, 3, 4), int32],) {
  %179 = cast(%var_2157, dtype="float32") /* ty=Tensor[(6, 3, 4), float32] */;
  %180 = shape_of(%var_2156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%var_2156, dtype="float32") /* ty=Tensor[(6, 3, 4), float32] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %183 = minimum(%181, %182) /* ty=Tensor[(6, 3, 4), float32] */;
  %184 = cast(%var_2156, dtype="int32") /* ty=Tensor[(6, 3, 4), int32] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%183, dtype="int32") /* ty=Tensor[(6, 3, 4), int32] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %188 = add(%186, %187) /* ty=Tensor[(6, 3, 4), int32] */;
  (%188,)
}

def @func_6771() -> (Tensor[(256), float32], Tensor[(13, 7, 16), float64]) {
  %195 = fn () -> (Tensor[(256), float32], Tensor[(13, 7, 16), float64]) {
    %189 = @func_3569() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(256), float32]) */;
    %190 = %189.4;
    %191 = cast(%190, dtype="float32") /* ty=Tensor[(256), float32] */;
    %192 = reshape(%191, newshape=[16, 16]) /* ty=Tensor[(16, 16), float32] */;
    %193 = @func_1918(%192) /* ty=(Tensor[(16, 16), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), bool]) */;
    %194 = %193.1;
    (%190, %194)
  };
  %195() /* ty=(Tensor[(256), float32], Tensor[(13, 7, 16), float64]) */
}

def @func_1921(%var_1919: Tensor[(16, 16), float32]) -> (Tensor[(16, 16), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), bool]) {
  @func_1918(%var_1919) /* ty=(Tensor[(16, 16), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), bool]) */
}

def @func_3657() -> Tensor[(12, 9, 9), bool] {
  %196 = @func_3449() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool]) */;
  %196.1
}

def @func_7492(%var_7489: Tensor[(15, 15, 11), float32], %var_7490: Tensor[(40), uint16], %var_7491: Tensor[(560), uint16]) -> (Tensor[(5, 2, 4), bool], Tensor[(40), uint16], Tensor[(14, 8, 5), uint16], Tensor[(560), uint16], Tensor[(15, 15, 11), float64]) {
  @func_7487(%var_7489, %var_7490, %var_7491) /* ty=(Tensor[(5, 2, 4), bool], Tensor[(40), uint16], Tensor[(14, 8, 5), uint16], Tensor[(560), uint16], Tensor[(15, 15, 11), float64]) */
}

def @func_5582(%var_5568: Tensor[(9, 8, 8), float64]) -> (Tensor[(9, 8, 8), float64], Tensor[(12, 9, 9), float64]) {
  %197 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 8, 8), float64] */;
  %198 = shape_of(%var_5568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%var_5568, dtype="float64") /* ty=Tensor[(9, 8, 8), float64] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %201 = divide(%199, %200) /* ty=Tensor[(9, 8, 8), float64] */;
  %202 = @func_4571() /* ty=Tensor[(12, 9, 9), float64] */;
  (%201, %202)
}

def @func_2355(%var_2319: Tensor[(1287), float32], %var_2320: Tensor[(273), uint8], %var_2325: Tensor[(30), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(143, 9), bool], Tensor[(1287), float32], Tensor[(273), uint8], Tensor[(30), uint8], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float32]) {
  %203 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %204 = %203.1;
  %205 = cast(%204, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %206 = cast(meta[relay.Constant][11] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %207 = cast(%var_2319, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %208 = cast(%var_2320, dtype="uint8") /* ty=Tensor[(273), uint8] */;
  %209 = reshape(%206, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
  %210 = reshape(%207, newshape=[143, 9]) /* ty=Tensor[(143, 9), float32] */;
  %211 = reshape(%208, newshape=[273, 1]) /* ty=Tensor[(273, 1), uint8] */;
  %212 = @func_1024(%209, %210, %211) /* ty=(Tensor[(12, 140), float64], Tensor[(5, ?, 6), uint16], Tensor[(143, 9), bool], Tensor[(143, 9), float32], Tensor[(7, 13, 3), bool], Tensor[(273, 1), uint8]) */;
  %213 = cast(%var_2325, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %214 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(30), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %215 = cast(meta[relay.Constant][11] /* ty=Tensor[(30), float32] */, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %217 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %218 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %219 = %218.1;
  %220 = cast(%219, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %221 = sigmoid(%205) /* ty=Tensor[(12, 9, 9), float64] */;
  %222 = %212.2;
  %223 = right_shift(%215, %216) /* ty=Tensor[(30), uint8] */;
  %224 = %217.0;
  %225 = @func_1868() /* ty=Tensor[(12, 9, 9), float64] */;
  %226 = log2(%220) /* ty=Tensor[(12, 9, 9), float32] */;
  (%221, %222, %var_2319, %var_2320, %223, %224, %225, %226)
}

def @func_2708() -> (Tensor[(12, 9, 9), float64],) {
  %229 = fn () -> (Tensor[(12, 9, 9), float64],) {
    %227 = @func_2686() /* ty=(Tensor[(12, 9, 9), float64],) */;
    %228 = %227.0;
    (%228,)
  };
  %229() /* ty=(Tensor[(12, 9, 9), float64],) */
}

def @func_7414(%var_7412: Tensor[(14, 11, 10), uint64]) -> Tensor[(14, 11, 10), uint64] {
  @func_7411(%var_7412) /* ty=Tensor[(14, 11, 10), uint64] */
}

def @func_7722() -> (Tensor[(12, 9, 9), uint16],) {
  %230 = @func_2732() /* ty=Tensor[(12, 9, 9), uint16] */;
  (%230,)
}

def @func_1918(%var_1902: Tensor[(16, 16), float32]) -> (Tensor[(16, 16), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), bool]) {
  %231 = cast(%var_1902, dtype="float32") /* ty=Tensor[(16, 16), float32] */;
  %232 = cast(meta[relay.Constant][12] /* ty=Tensor[(1456), bool] */, dtype="bool") /* ty=Tensor[(1456), bool] */;
  %233 = cast(meta[relay.Constant][12] /* ty=Tensor[(1456), bool] */, dtype="bool") /* ty=Tensor[(1456), bool] */;
  %234 = reshape(%232, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), bool] */;
  %235 = reshape(%233, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), bool] */;
  %236 = @func_853(%234, %235) /* ty=(Tensor[(13, 7, 16), bool], Tensor[(13, 7, 16), float64]) */;
  %237 = sin(%231) /* ty=Tensor[(16, 16), float32] */;
  %238 = %236.1;
  (%237, %238, meta[relay.Constant][12] /* ty=Tensor[(1456), bool] */)
}

def @func_6353() -> (Tensor[(12, 9, 9), uint16],) {
  %241 = fn () -> (Tensor[(12, 9, 9), uint16],) {
    %239 = @func_4850() /* ty=(Tensor[(12, 9, 9), uint16], Tensor[(12), float32], Tensor[(2, 360), int64], Tensor[(429, 3), float32], Tensor[(1287), float32]) */;
    %240 = %239.0;
    (%240,)
  };
  %241() /* ty=(Tensor[(12, 9, 9), uint16],) */
}

def @func_6529() -> (Tensor[(12, 9, 9), float64], Tensor[(256), float32], Tensor[(1287), float32]) {
  %242 = @func_2248() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool], Tensor[(12, 9, 9), float64]) */;
  %243 = cast(meta[relay.Constant][13] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %244 = reshape(%243, newshape=[1287]) /* ty=Tensor[(1287), float32] */;
  %245 = @func_4462(%244) /* ty=(Tensor[(256), float32], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1287), float32], Tensor[(12, 9, 9), float64]) */;
  %246 = %242.5;
  %247 = %245.0;
  (%246, %247, meta[relay.Constant][13] /* ty=Tensor[(1287), float32] */)
}

def @func_2250() -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool], Tensor[(12, 9, 9), float64]) {
  @func_2248() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool], Tensor[(12, 9, 9), float64]) */
}

def @func_7836() -> (Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float64]) {
  %252 = fn () -> (Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float64]) {
    %248 = @func_3449() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool]) */;
    %249 = @func_6176() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(12), float32]) */;
    %250 = %248.1;
    %251 = %249.0;
    (%250, %251)
  };
  %252() /* ty=(Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float64]) */
}

def @func_4572() -> Tensor[(12, 9, 9), float64] {
  %253 = fn () -> Tensor[(12, 9, 9), float64] {
    @func_2096() /* ty=Tensor[(12, 9, 9), float64] */
  };
  %253() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_3451() -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool]) {
  @func_3449() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool]) */
}

def @func_3182() -> (Tensor[(12, 9, 9), uint16],) {
  %254 = @func_2732() /* ty=Tensor[(12, 9, 9), uint16] */;
  (%254,)
}

def @func_348(%var_336: Tensor[(8, 14, 15), float64], %var_341: Tensor[(143, 9), float32]) -> (Tensor[(8, 14, 15), float64], Tensor[(9, 11, 13), float32], Tensor[(143, 9), float32], Tensor[(9, 11, 13), float32]) {
  %255 = cast(%var_336, dtype="float64") /* ty=Tensor[(8, 14, 15), float64] */;
  %256 = cast(%var_341, dtype="float32") /* ty=Tensor[(143, 9), float32] */;
  %257 = reshape(%256, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %258 = cast(%var_341, dtype="float32") /* ty=Tensor[(143, 9), float32] */;
  %259 = reshape(%258, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %260 = sigmoid(%255) /* ty=Tensor[(8, 14, 15), float64] */;
  %261 = @func_83(%257) /* ty=Tensor[(9, 11, 13), float32] */;
  %262 = @func_83(%259) /* ty=Tensor[(9, 11, 13), float32] */;
  (%260, %261, %var_341, %262)
}

def @func_3038() -> (Tensor[(13, 7, 16), bool],) {
  @func_3036() /* ty=(Tensor[(13, 7, 16), bool],) */
}

def @func_3817(%var_3815: Tensor[(150, 2), uint8], %var_3816: Tensor[(12, 9, 9), float64]) -> (Tensor[(2, 15, 10), uint8], Tensor[(12), float32], Tensor[(12, 9, 9), bool], Tensor[(150, 2), float64]) {
  %279 = fn (%var_3785: Tensor[(150, 2), uint8], %var_3797: Tensor[(12, 9, 9), float64]) -> (Tensor[(2, 15, 10), uint8], Tensor[(12), float32], Tensor[(12, 9, 9), bool], Tensor[(150, 2), float64]) {
    %263 = cast(%var_3785, dtype="uint8") /* ty=Tensor[(150, 2), uint8] */;
    %264 = cast(%var_3785, dtype="uint8") /* ty=Tensor[(150, 2), uint8] */;
    %265 = reshape(%263, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
    %266 = reshape(%264, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), uint8] */;
    %267 = @func_3212() /* ty=(Tensor[(12), float32],) */;
    %268 = @func_2969() /* ty=(Tensor[(12, 9, 9), float64],) */;
    %269 = %268.0;
    %270 = cast(%var_3797, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
    %271 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
    %272 = cast(%269, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
    %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %274 = cast(%var_3785, dtype="float64") /* ty=Tensor[(150, 2), float64] */;
    %275 = @func_1797(%265, %266) /* ty=Tensor[(2, 15, 10), uint8] */;
    %276 = %267.0;
    %277 = less_equal(%272, %273) /* ty=Tensor[(12, 9, 9), bool] */;
    %278 = tan(%274) /* ty=Tensor[(150, 2), float64] */;
    (%275, %276, %277, %278)
  };
  %279(%var_3815, %var_3816) /* ty=(Tensor[(2, 15, 10), uint8], Tensor[(12), float32], Tensor[(12, 9, 9), bool], Tensor[(150, 2), float64]) */
}

def @func_6924(%var_6923: Tensor[(1764, 1), int32]) -> (Tensor[(2, 1, 6), float64], Tensor[(4, 10, 4), float32], Tensor[(1764, 1), int32], Tensor[(160), bool], Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), uint16]) {
  %302 = fn (%var_6881: Tensor[(1764, 1), int32]) -> (Tensor[(2, 1, 6), float64], Tensor[(4, 10, 4), float32], Tensor[(1764, 1), int32], Tensor[(160), bool], Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), uint16]) {
    %280 = @func_2757() /* ty=(Tensor[(2, 1, 6), float64],) */;
    %281 = cast(%var_6881, dtype="int32") /* ty=Tensor[(1764, 1), int32] */;
    %282 = cast(meta[relay.Constant][14] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
    %283 = cast(%var_6881, dtype="float32") /* ty=Tensor[(1764, 1), float32] */;
    %284 = cast(meta[relay.Constant][14] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
    %285 = reshape(%281, newshape=[1764]) /* ty=Tensor[(1764), int32] */;
    %286 = reshape(%282, newshape=[160]) /* ty=Tensor[(160), bool] */;
    %287 = reshape(%283, newshape=[1764]) /* ty=Tensor[(1764), float32] */;
    %288 = reshape(%284, newshape=[4, 10, 4]) /* ty=Tensor[(4, 10, 4), bool] */;
    %289 = @func_4309(%285, %286, %287, %288) /* ty=(Tensor[(12), float32], Tensor[(12, 9, 9), float64], Tensor[(9, 14, 14), uint64], Tensor[(256), float32], Tensor[(16, 16), float32], Tensor[(160), bool], Tensor[(1764), bool], Tensor[(4, 10, 4), float32]) */;
    %290 = @func_5142() /* ty=(Tensor[(12, 9, 9), uint16],) */;
    %291 = %290.0;
    %292 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 9, 9), uint16] */, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
    %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
    %294 = cast(%291, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
    %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %296 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 9, 9), uint16] */, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
    %297 = reshape(%296, newshape=[12, 9, 9]) /* ty=Tensor[(12, 9, 9), float64] */;
    %298 = %280.0;
    %299 = %289.7;
    %300 = equal(%294, %295) /* ty=Tensor[(12, 9, 9), bool] */;
    %301 = @func_2815(%297) /* ty=Tensor[(12, 9, 9), uint16] */;
    (%298, %299, %var_6881, meta[relay.Constant][14] /* ty=Tensor[(160), bool] */, %300, %301)
  };
  %302(%var_6923) /* ty=(Tensor[(2, 1, 6), float64], Tensor[(4, 10, 4), float32], Tensor[(1764, 1), int32], Tensor[(160), bool], Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), uint16]) */
}

def @func_1969(%var_1968: Tensor[(12, 7, 12), float32]) -> (Tensor[(12, 7, 12), float32],) {
  %315 = fn (%var_1932: Tensor[(12, 7, 12), float32]) -> (Tensor[(12, 7, 12), float32],) {
    %303 = cast(%var_1932, dtype="float32") /* ty=Tensor[(12, 7, 12), float32] */;
    %304 = log2(%303) /* ty=Tensor[(12, 7, 12), float32] */;
    %305 = cast(%var_1932, dtype="int64") /* ty=Tensor[(12, 7, 12), int64] */;
    %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
    %307 = cast(%304, dtype="int64") /* ty=Tensor[(12, 7, 12), int64] */;
    %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %309 = bitwise_xor(%307, %308) /* ty=Tensor[(12, 7, 12), int64] */;
    %310 = cast(%309, dtype="float32") /* ty=Tensor[(12, 7, 12), float32] */;
    %311 = shape_of(%var_1932, dtype="int32") /* ty=Tensor[(3), int32] */;
    %312 = cast(%var_1932, dtype="float32") /* ty=Tensor[(12, 7, 12), float32] */;
    %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %314 = floor_mod(%312, %313) /* ty=Tensor[(12, 7, 12), float32] */;
    (%314,)
  };
  %315(%var_1968) /* ty=(Tensor[(12, 7, 12), float32],) */
}

def @func_2884() -> Tensor[(256), float32] {
  @func_2882() /* ty=Tensor[(256), float32] */
}

def @func_4527() -> Tensor[(12, 9, 9), float64] {
  @func_4525() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_2248() -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool], Tensor[(12, 9, 9), float64]) {
  %316 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %317 = @func_1821() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %318 = cast(meta[relay.Constant][16] /* ty=Tensor[(1456), bool] */, dtype="bool") /* ty=Tensor[(1456), bool] */;
  %319 = cast(meta[relay.Constant][16] /* ty=Tensor[(1456), bool] */, dtype="bool") /* ty=Tensor[(1456), bool] */;
  %320 = reshape(%318, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), bool] */;
  %321 = reshape(%319, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), bool] */;
  %322 = @func_853(%320, %321) /* ty=(Tensor[(13, 7, 16), bool], Tensor[(13, 7, 16), float64]) */;
  %323 = @func_1821() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %324 = @func_1868() /* ty=Tensor[(12, 9, 9), float64] */;
  %325 = %316.1;
  %326 = %317.0;
  %327 = %322.0;
  %328 = %323.0;
  (%324, %325, %326, %327, meta[relay.Constant][16] /* ty=Tensor[(1456), bool] */, %328)
}

def @func_5304(%var_5302: Tensor[(16, 11, 11), uint8], %var_5303: Tensor[(16, 11, 11), uint8]) -> (Tensor[(16, 11, 11), uint8], Tensor[(12, 9, 9), uint16]) {
  %336 = fn (%var_5280: Tensor[(16, 11, 11), uint8], %var_5281: Tensor[(16, 11, 11), uint8]) -> (Tensor[(16, 11, 11), uint8], Tensor[(12, 9, 9), uint16]) {
    %329 = cast(%var_5281, dtype="uint8") /* ty=Tensor[(16, 11, 11), uint8] */;
    %330 = shape_of(%var_5280, dtype="int32") /* ty=Tensor[(3), int32] */;
    %331 = cast(%var_5280, dtype="uint8") /* ty=Tensor[(16, 11, 11), uint8] */;
    %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %333 = @func_3484() /* ty=(Tensor[(12, 9, 9), uint16],) */;
    %334 = bitwise_or(%331, %332) /* ty=Tensor[(16, 11, 11), uint8] */;
    %335 = %333.0;
    (%334, %335)
  };
  %336(%var_5302, %var_5303) /* ty=(Tensor[(16, 11, 11), uint8], Tensor[(12, 9, 9), uint16]) */
}

def @func_2383(%var_2365: Tensor[(9, 14, 14), int32], %var_2375: Tensor[(9, 14, 14), bool]) -> (Tensor[(9, 14, 14), uint16],) {
  %337 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 14, 14), int32] */, dtype="int32") /* ty=Tensor[(9, 14, 14), int32] */;
  %338 = shape_of(%var_2365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%var_2365, dtype="int32") /* ty=Tensor[(9, 14, 14), int32] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %341 = left_shift(%339, %340) /* ty=Tensor[(9, 14, 14), int32] */;
  %342 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 14, 14), int32] */, dtype="bool") /* ty=Tensor[(9, 14, 14), bool] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="bool") /* ty=Tensor[(9, 14, 14), bool] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %346 = less_equal(%344, %345) /* ty=Tensor[(9, 14, 14), bool] */;
  %347 = cast(%var_2375, dtype="uint16") /* ty=Tensor[(9, 14, 14), uint16] */;
  %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%346, dtype="uint16") /* ty=Tensor[(9, 14, 14), uint16] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %351 = bitwise_and(%349, %350) /* ty=Tensor[(9, 14, 14), uint16] */;
  (%351,)
}

def @func_6328(%var_6327: Tensor[(18, 18), float32]) -> Tensor[(18, 18), int32] {
  %358 = fn (%var_6306: Tensor[(18, 18), float32]) -> Tensor[(18, 18), int32] {
    %352 = @func_5628() /* ty=(Tensor[(12, 9, 9), bool], Tensor[(5, 2, 4), bool], Tensor[(18, 18), float32]) */;
    %353 = %352.2;
    %354 = cast(%var_6306, dtype="int32") /* ty=Tensor[(18, 18), int32] */;
    %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(2), int32] */;
    %356 = cast(%353, dtype="int32") /* ty=Tensor[(18, 18), int32] */;
    %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    logical_xor(%356, %357) /* ty=Tensor[(18, 18), int32] */
  };
  %358(%var_6327) /* ty=Tensor[(18, 18), int32] */
}

def @func_6751() -> Tensor[(12, 9, 9), float64] {
  %360 = fn () -> Tensor[(12, 9, 9), float64] {
    %359 = @func_3569() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(256), float32]) */;
    %359.2
  };
  %360() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_2649(%var_2624: Tensor[(13, 7, 16), bool], %var_2636: Tensor[(13, 7, 16), bool]) -> Tensor[(13, 7, 16), uint8] {
  %361 = @func_2248() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool], Tensor[(12, 9, 9), float64]) */;
  %362 = %361.3;
  %363 = cast(%var_2624, dtype="bool") /* ty=Tensor[(13, 7, 16), bool] */;
  %364 = shape_of(%362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%362, dtype="bool") /* ty=Tensor[(13, 7, 16), bool] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %367 = logical_and(%365, %366) /* ty=Tensor[(13, 7, 16), bool] */;
  %368 = cast(%var_2636, dtype="uint8") /* ty=Tensor[(13, 7, 16), uint8] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%367, dtype="uint8") /* ty=Tensor[(13, 7, 16), uint8] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  subtract(%370, %371) /* ty=Tensor[(13, 7, 16), uint8] */
}

def @func_2360(%var_2357: Tensor[(1287), float32], %var_2358: Tensor[(273), uint8], %var_2359: Tensor[(30), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(143, 9), bool], Tensor[(1287), float32], Tensor[(273), uint8], Tensor[(30), uint8], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float32]) {
  @func_2355(%var_2357, %var_2358, %var_2359) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(143, 9), bool], Tensor[(1287), float32], Tensor[(273), uint8], Tensor[(30), uint8], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float32]) */
}

def @func_3009() -> (Tensor[(12, 9, 9), uint16],) {
  %373 = fn () -> (Tensor[(12, 9, 9), uint16],) {
    %372 = @func_2732() /* ty=Tensor[(12, 9, 9), uint16] */;
    (%372,)
  };
  %373() /* ty=(Tensor[(12, 9, 9), uint16],) */
}

def @func_3214() -> (Tensor[(12), float32],) {
  @func_3212() /* ty=(Tensor[(12), float32],) */
}

def @func_3283() -> Tensor[(12, 9, 9), float64] {
  @func_3281() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_6024(%var_6021: uint64, %var_6022: Tensor[(7, 8, 3), uint64], %var_6023: Tensor[(13, 21), uint8]) -> (Tensor[(7, 8, 3), bool], Tensor[(1680), float64], Tensor[(13, 21), uint8], Tensor[(1680), float64], Tensor[(1287), float32]) {
  @func_6019(%var_6021, %var_6022, %var_6023) /* ty=(Tensor[(7, 8, 3), bool], Tensor[(1680), float64], Tensor[(13, 21), uint8], Tensor[(1680), float64], Tensor[(1287), float32]) */
}

def @func_4705(%var_4674: Tensor[(256), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(9, 11, 13), float32], Tensor[(429, 3), float32]) {
  %374 = @func_3913() /* ty=(Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float64]) */;
  %375 = %374.1;
  %376 = cast(%375, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %377 = cast(%var_4674, dtype="float32") /* ty=Tensor[(256), float32] */;
  %378 = reshape(%377, newshape=[16, 16]) /* ty=Tensor[(16, 16), float32] */;
  %379 = @func_1918(%378) /* ty=(Tensor[(16, 16), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), bool]) */;
  %380 = cast(meta[relay.Constant][18] /* ty=Tensor[(429, 3), float32] */, dtype="float32") /* ty=Tensor[(429, 3), float32] */;
  %381 = reshape(%380, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %382 = @func_1868() /* ty=Tensor[(12, 9, 9), float64] */;
  %383 = tan(%376) /* ty=Tensor[(12, 9, 9), float32] */;
  %384 = %379.0;
  %385 = @func_83(%381) /* ty=Tensor[(9, 11, 13), float32] */;
  (%382, %383, %384, %var_4674, %385, meta[relay.Constant][18] /* ty=Tensor[(429, 3), float32] */)
}

def @func_6691(%var_6689: uint64) -> (Tensor[(3, 15, 1), uint64],) {
  @func_6688(%var_6689) /* ty=(Tensor[(3, 15, 1), uint64],) */
}

def @func_6242() -> (Tensor[(13, 7, 16), bool], Tensor[(12, 9, 9), float64]) {
  %386 = @func_3036() /* ty=(Tensor[(13, 7, 16), bool],) */;
  %387 = @func_3388() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %388 = %386.0;
  %389 = %387.0;
  (%388, %389)
}

def @func_2734() -> Tensor[(12, 9, 9), uint16] {
  @func_2732() /* ty=Tensor[(12, 9, 9), uint16] */
}

def @func_7159() -> (Tensor[(12, 9, 9), float64],) {
  %390 = @func_4796() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %391 = %390.0;
  (%391,)
}

def @func_7487(%var_7424: Tensor[(15, 15, 11), float32], %var_7448: Tensor[(40), uint16], %var_7455: Tensor[(560), uint16]) -> (Tensor[(5, 2, 4), bool], Tensor[(40), uint16], Tensor[(14, 8, 5), uint16], Tensor[(560), uint16], Tensor[(15, 15, 11), float64]) {
  %392 = cast(%var_7448, dtype="uint16") /* ty=Tensor[(40), uint16] */;
  %393 = cast(%var_7448, dtype="uint16") /* ty=Tensor[(40), uint16] */;
  %394 = reshape(%392, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), uint16] */;
  %395 = reshape(%393, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), uint16] */;
  %396 = @func_2573(%394, %395) /* ty=(Tensor[(5, 2, 4), bool],) */;
  %397 = cast(%var_7455, dtype="uint16") /* ty=Tensor[(560), uint16] */;
  %398 = cast(%var_7455, dtype="uint16") /* ty=Tensor[(560), uint16] */;
  %399 = reshape(%397, newshape=[14, 8, 5]) /* ty=Tensor[(14, 8, 5), uint16] */;
  %400 = reshape(%398, newshape=[14, 8, 5]) /* ty=Tensor[(14, 8, 5), uint16] */;
  %401 = @func_4721(%399, %400) /* ty=(Tensor[(14, 8, 5), uint16],) */;
  %402 = cast(%var_7424, dtype="float32") /* ty=Tensor[(15, 15, 11), float32] */;
  %403 = log(%402) /* ty=Tensor[(15, 15, 11), float32] */;
  %404 = cast(%var_7424, dtype="float64") /* ty=Tensor[(15, 15, 11), float64] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%403, dtype="float64") /* ty=Tensor[(15, 15, 11), float64] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %408 = %396.0;
  %409 = %401.0;
  %410 = floor_divide(%406, %407) /* ty=Tensor[(15, 15, 11), float64] */;
  (%408, %var_7448, %409, %var_7455, %410)
}

def @func_4798() -> (Tensor[(12, 9, 9), float64],) {
  @func_4796() /* ty=(Tensor[(12, 9, 9), float64],) */
}

def @func_5144() -> (Tensor[(12, 9, 9), uint16],) {
  @func_5142() /* ty=(Tensor[(12, 9, 9), uint16],) */
}

def @func_7330() -> (Tensor[(12), float32],) {
  %413 = fn () -> (Tensor[(12), float32],) {
    %411 = @func_5523() /* ty=(Tensor[(12), float32],) */;
    %412 = %411.0;
    (%412,)
  };
  %413() /* ty=(Tensor[(12), float32],) */
}

def @func_3345() -> (Tensor[(256), float32],) {
  %415 = fn () -> (Tensor[(256), float32],) {
    %414 = @func_2882() /* ty=Tensor[(256), float32] */;
    (%414,)
  };
  %415() /* ty=(Tensor[(256), float32],) */
}

def @func_7724() -> (Tensor[(12, 9, 9), uint16],) {
  @func_7722() /* ty=(Tensor[(12, 9, 9), uint16],) */
}

def @func_2169(%var_2167: Tensor[(6, 3, 4), float32], %var_2168: Tensor[(6, 3, 4), float32]) -> (Tensor[(6, 3, 4), int32],) {
  @func_2165(%var_2167, %var_2168) /* ty=(Tensor[(6, 3, 4), int32],) */
}

def @func_7021() -> (Tensor[(12, 9, 9), float64], Tensor[(12), float32], Tensor[(12, 9, 9), float64]) {
  %416 = @func_2969() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %417 = @func_6176() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(12), float32]) */;
  %418 = %416.0;
  %419 = %417.2;
  %420 = @func_1868() /* ty=Tensor[(12, 9, 9), float64] */;
  (%418, %419, %420)
}

def @func_7411(%var_7388: Tensor[(14, 11, 10), uint64]) -> Tensor[(14, 11, 10), uint64] {
  %421 = cast(%var_7388, dtype="uint64") /* ty=Tensor[(14, 11, 10), uint64] */;
  %422 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(14, 11, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 11, 10), uint64] */, dtype="uint64") /* ty=Tensor[(14, 11, 10), uint64] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%423, %424) /* ty=Tensor[(14, 11, 10), uint64] */
}

def @func_7083(%var_7081: float64, %var_7082: Tensor[(15, 11, 3), float64]) -> (Tensor[(15, 11, 3), float64], Tensor[(1680), float64], Tensor[(168), uint64], Tensor[(273), uint8]) {
  %436 = fn (%var_7038: float64, %var_7039: Tensor[(15, 11, 3), float64]) -> (Tensor[(15, 11, 3), float64], Tensor[(1680), float64], Tensor[(168), uint64], Tensor[(273), uint8]) {
    %425 = cast(%var_7038, dtype="float64") /* ty=float64 */;
    %426 = cast(%var_7039, dtype="float64") /* ty=Tensor[(15, 11, 3), float64] */;
    %427 = cast(%var_7038, dtype="uint64") /* ty=uint64 */;
    %428 = cast(meta[relay.Constant][20] /* ty=Tensor[(168), uint64] */, dtype="uint64") /* ty=Tensor[(168), uint64] */;
    %429 = cast(meta[relay.Constant][21] /* ty=Tensor[(273), uint8] */, dtype="uint8") /* ty=Tensor[(273), uint8] */;
    %430 = reshape(%427, newshape=[]) /* ty=uint64 */;
    %431 = reshape(%428, newshape=[7, 8, 3]) /* ty=Tensor[(7, 8, 3), uint64] */;
    %432 = reshape(%429, newshape=[13, 21]) /* ty=Tensor[(13, 21), uint8] */;
    %433 = @func_6019(%430, %431, %432) /* ty=(Tensor[(7, 8, 3), bool], Tensor[(1680), float64], Tensor[(13, 21), uint8], Tensor[(1680), float64], Tensor[(1287), float32]) */;
    %434 = divide(%425, %426) /* ty=Tensor[(15, 11, 3), float64] */;
    %435 = %433.3;
    (%434, %435, meta[relay.Constant][20] /* ty=Tensor[(168), uint64] */, meta[relay.Constant][21] /* ty=Tensor[(273), uint8] */)
  };
  %436(%var_7081, %var_7082) /* ty=(Tensor[(15, 11, 3), float64], Tensor[(1680), float64], Tensor[(168), uint64], Tensor[(273), uint8]) */
}

def @func_6392() -> (Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), uint16]) {
  @func_6390() /* ty=(Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), uint16]) */
}

def @func_1858() -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) {
  %437 = @func_1821() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %438 = @func_1821() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %439 = %437.0;
  %440 = %438.0;
  (%439, %440)
}

def @func_7744() -> (Tensor[(12, 9, 9), float64],) {
  @func_7742() /* ty=(Tensor[(12, 9, 9), float64],) */
}

def @func_5101(%var_5100: Tensor[(2, 16, 6), float64]) -> Tensor[(2, 16, 6), float64] {
  %445 = fn (%var_5090: Tensor[(2, 16, 6), float64]) -> Tensor[(2, 16, 6), float64] {
    %441 = @func_2757() /* ty=(Tensor[(2, 1, 6), float64],) */;
    %442 = %441.0;
    %443 = cast(%442, dtype="float64") /* ty=Tensor[(2, 1, 6), float64] */;
    %444 = cast(%var_5090, dtype="float64") /* ty=Tensor[(2, 16, 6), float64] */;
    floor_divide(%443, %444) /* ty=Tensor[(2, 16, 6), float64] */
  };
  %445(%var_5100) /* ty=Tensor[(2, 16, 6), float64] */
}

def @func_4314(%var_4310: Tensor[(1764), int32], %var_4311: Tensor[(160), bool], %var_4312: Tensor[(1764), float32], %var_4313: Tensor[(4, 10, 4), bool]) -> (Tensor[(12), float32], Tensor[(12, 9, 9), float64], Tensor[(9, 14, 14), uint64], Tensor[(256), float32], Tensor[(16, 16), float32], Tensor[(160), bool], Tensor[(1764), bool], Tensor[(4, 10, 4), float32]) {
  %481 = fn (%var_4257: Tensor[(1764), int32], %var_4290: Tensor[(160), bool], %var_4292: Tensor[(1764), float32], %var_4296: Tensor[(4, 10, 4), bool]) -> (Tensor[(12), float32], Tensor[(12, 9, 9), float64], Tensor[(9, 14, 14), uint64], Tensor[(256), float32], Tensor[(16, 16), float32], Tensor[(160), bool], Tensor[(1764), bool], Tensor[(4, 10, 4), float32]) {
    %446 = @func_4041() /* ty=(Tensor[(12), float32],) */;
    %447 = cast(%var_4257, dtype="int32") /* ty=Tensor[(1764), int32] */;
    %448 = cast(%var_4257, dtype="bool") /* ty=Tensor[(1764), bool] */;
    %449 = reshape(%447, newshape=[9, 14, 14]) /* ty=Tensor[(9, 14, 14), int32] */;
    %450 = reshape(%448, newshape=[9, 14, 14]) /* ty=Tensor[(9, 14, 14), bool] */;
    %451 = @func_2383(%449, %450) /* ty=(Tensor[(9, 14, 14), uint16],) */;
    %452 = %451.0;
    %453 = cast(%var_4257, dtype="uint64") /* ty=Tensor[(1764), uint64] */;
    %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
    %455 = cast(%452, dtype="uint64") /* ty=Tensor[(9, 14, 14), uint64] */;
    %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %457 = @func_2882() /* ty=Tensor[(256), float32] */;
    %458 = cast(%457, dtype="float32") /* ty=Tensor[(256), float32] */;
    %459 = reshape(%458, newshape=[16, 16]) /* ty=Tensor[(16, 16), float32] */;
    %460 = @func_1918(%459) /* ty=(Tensor[(16, 16), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), bool]) */;
    %461 = cast(%var_4257, dtype="float32") /* ty=Tensor[(1764), float32] */;
    %462 = sinh(%461) /* ty=Tensor[(1764), float32] */;
    %463 = cast(%var_4292, dtype="bool") /* ty=Tensor[(1764), bool] */;
    %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(1), int32] */;
    %465 = cast(%462, dtype="bool") /* ty=Tensor[(1764), bool] */;
    %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?), bool] */;
    %467 = cast(%var_4290, dtype="bool") /* ty=Tensor[(160), bool] */;
    %468 = reshape(%467, newshape=[4, 10, 4]) /* ty=Tensor[(4, 10, 4), bool] */;
    %469 = @func_1244(%468) /* ty=(Tensor[(4, 10, 4), bool],) */;
    %470 = %469.0;
    %471 = cast(%var_4296, dtype="float32") /* ty=Tensor[(4, 10, 4), float32] */;
    %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
    %473 = cast(%470, dtype="float32") /* ty=Tensor[(4, 10, 4), float32] */;
    %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %475 = %446.0;
    %476 = @func_2547() /* ty=Tensor[(12, 9, 9), float64] */;
    %477 = right_shift(%455, %456) /* ty=Tensor[(9, 14, 14), uint64] */;
    %478 = %460.0;
    %479 = less(%465, %466) /* ty=Tensor[(1764), bool] */;
    %480 = floor_divide(%473, %474) /* ty=Tensor[(4, 10, 4), float32] */;
    (%475, %476, %477, %457, %478, %var_4290, %479, %480)
  };
  %481(%var_4310, %var_4311, %var_4312, %var_4313) /* ty=(Tensor[(12), float32], Tensor[(12, 9, 9), float64], Tensor[(9, 14, 14), uint64], Tensor[(256), float32], Tensor[(16, 16), float32], Tensor[(160), bool], Tensor[(1764), bool], Tensor[(4, 10, 4), float32]) */
}

def @func_5356(%var_5345: Tensor[(256), float32]) -> (Tensor[(12, 9, 9), uint16], Tensor[(15, 4, 12), float32], Tensor[(720), int64], Tensor[(13, 7, 16), float64], Tensor[(256), float32]) {
  %482 = @func_5142() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %483 = cast(meta[relay.Constant][22] /* ty=Tensor[(720), int64] */, dtype="int64") /* ty=Tensor[(720), int64] */;
  %484 = cast(meta[relay.Constant][22] /* ty=Tensor[(720), int64] */, dtype="int64") /* ty=Tensor[(720), int64] */;
  %485 = reshape(%483, newshape=[15, 4, 12]) /* ty=Tensor[(15, 4, 12), int64] */;
  %486 = reshape(%484, newshape=[15, 4, 12]) /* ty=Tensor[(15, 4, 12), int64] */;
  %487 = @func_3598(%485, %486) /* ty=(Tensor[(15, 4, 12), int64], Tensor[(15, 4, 12), float32]) */;
  %488 = cast(%var_5345, dtype="float32") /* ty=Tensor[(256), float32] */;
  %489 = reshape(%488, newshape=[16, 16]) /* ty=Tensor[(16, 16), float32] */;
  %490 = @func_1918(%489) /* ty=(Tensor[(16, 16), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), bool]) */;
  %491 = %482.0;
  %492 = %487.1;
  %493 = %490.1;
  (%491, %492, meta[relay.Constant][22] /* ty=Tensor[(720), int64] */, %493, %var_5345)
}

def @func_1870() -> Tensor[(12, 9, 9), float64] {
  @func_1868() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_4618(%var_4615: Tensor[(13, 9, 2), int64], %var_4616: Tensor[(13, 9, 2), bool], %var_4617: Tensor[(972), float64]) -> (Tensor[(13, 9, 2), float32], Tensor[(12, 9, 9), uint16], Tensor[(972), float64], Tensor[(12, 9, 9), float64]) {
  @func_4613(%var_4615, %var_4616, %var_4617) /* ty=(Tensor[(13, 9, 2), float32], Tensor[(12, 9, 9), uint16], Tensor[(972), float64], Tensor[(12, 9, 9), float64]) */
}

def @func_5556(%var_5555: Tensor[(14, 10, 15), uint32]) -> (Tensor[(14, 10, 15), uint32],) {
  %497 = fn (%var_5545: Tensor[(14, 10, 15), uint32]) -> (Tensor[(14, 10, 15), uint32],) {
    %494 = cast(meta[relay.Constant][23] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %495 = cast(%var_5545, dtype="uint32") /* ty=Tensor[(14, 10, 15), uint32] */;
    %496 = right_shift(%494, %495) /* ty=Tensor[(14, 10, 15), uint32] */;
    (%496,)
  };
  %497(%var_5555) /* ty=(Tensor[(14, 10, 15), uint32],) */
}

def @func_6178() -> (Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(12), float32]) {
  @func_6176() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(12), float32]) */
}

def @func_1821() -> (Tensor[(12, 9, 9), float64],) {
  %498 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 9, 9), float64] */, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %499 = log(%498) /* ty=Tensor[(12, 9, 9), float64] */;
  (%499,)
}

def @func_5359(%var_5357: Tensor[(256), float32]) -> (Tensor[(12, 9, 9), uint16], Tensor[(15, 4, 12), float32], Tensor[(720), int64], Tensor[(13, 7, 16), float64], Tensor[(256), float32]) {
  @func_5356(%var_5357) /* ty=(Tensor[(12, 9, 9), uint16], Tensor[(15, 4, 12), float32], Tensor[(720), int64], Tensor[(13, 7, 16), float64], Tensor[(256), float32]) */
}

def @func_6209(%var_6207: Tensor[(6, 7, 11), float32], %var_6208: Tensor[(6, 7, 11), float32]) -> (Tensor[(6, 7, 11), int16],) {
  %510 = fn (%var_6179: Tensor[(6, 7, 11), float32], %var_6180: Tensor[(6, 7, 11), float32]) -> (Tensor[(6, 7, 11), int16],) {
    %500 = cast(%var_6180, dtype="float32") /* ty=Tensor[(6, 7, 11), float32] */;
    %501 = shape_of(%var_6179, dtype="int32") /* ty=Tensor[(3), int32] */;
    %502 = cast(%var_6179, dtype="float32") /* ty=Tensor[(6, 7, 11), float32] */;
    %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %504 = floor_divide(%502, %503) /* ty=Tensor[(6, 7, 11), float32] */;
    %505 = cast(%var_6180, dtype="int16") /* ty=Tensor[(6, 7, 11), int16] */;
    %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
    %507 = cast(%504, dtype="int16") /* ty=Tensor[(6, 7, 11), int16] */;
    %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %509 = bitwise_or(%507, %508) /* ty=Tensor[(6, 7, 11), int16] */;
    (%509,)
  };
  %510(%var_6207, %var_6208) /* ty=(Tensor[(6, 7, 11), int16],) */
}

def @func_4613(%var_4577: Tensor[(13, 9, 2), int64], %var_4583: Tensor[(13, 9, 2), bool], %var_4591: Tensor[(972), float64]) -> (Tensor[(13, 9, 2), float32], Tensor[(12, 9, 9), uint16], Tensor[(972), float64], Tensor[(12, 9, 9), float64]) {
  %511 = cast(%var_4577, dtype="bool") /* ty=Tensor[(13, 9, 2), bool] */;
  %512 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(13, 9, 2), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 9, 2), int64] */, dtype="bool") /* ty=Tensor[(13, 9, 2), bool] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %515 = less(%513, %514) /* ty=Tensor[(13, 9, 2), bool] */;
  %516 = cast(%var_4583, dtype="float32") /* ty=Tensor[(13, 9, 2), float32] */;
  %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%515, dtype="float32") /* ty=Tensor[(13, 9, 2), float32] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %520 = cast(%var_4591, dtype="float64") /* ty=Tensor[(972), float64] */;
  %521 = reshape(%520, newshape=[12, 9, 9]) /* ty=Tensor[(12, 9, 9), float64] */;
  %522 = power(%518, %519) /* ty=Tensor[(13, 9, 2), float32] */;
  %523 = @func_2815(%521) /* ty=Tensor[(12, 9, 9), uint16] */;
  %524 = @func_3929() /* ty=Tensor[(12, 9, 9), float64] */;
  (%522, %523, %var_4591, %524)
}

def @func_5860(%var_5857: Tensor[(11, 3, 16), float64], %var_5858: Tensor[(256), float32], %var_5859: Tensor[(11, 3, 16), bool]) -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), uint16], Tensor[(11, 3, 16), float32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(14, 10, 15), uint32], Tensor[(2100, 1), uint32], Tensor[(11, 3, 16), uint16], Tensor[(12, 9, 9), float64]) {
  %555 = fn (%var_5783: Tensor[(11, 3, 16), float64], %var_5821: Tensor[(256), float32], %var_5836: Tensor[(11, 3, 16), bool]) -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), uint16], Tensor[(11, 3, 16), float32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(14, 10, 15), uint32], Tensor[(2100, 1), uint32], Tensor[(11, 3, 16), uint16], Tensor[(12, 9, 9), float64]) {
    %525 = @func_3484() /* ty=(Tensor[(12, 9, 9), uint16],) */;
    %526 = cast(%var_5783, dtype="float64") /* ty=Tensor[(11, 3, 16), float64] */;
    %527 = asin(%526) /* ty=Tensor[(11, 3, 16), float64] */;
    %528 = cast(%527, dtype="bool") /* ty=Tensor[(11, 3, 16), bool] */;
    %529 = shape_of(%var_5783, dtype="int32") /* ty=Tensor[(3), int32] */;
    %530 = cast(%var_5783, dtype="bool") /* ty=Tensor[(11, 3, 16), bool] */;
    %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %532 = greater(%530, %531) /* ty=Tensor[(11, 3, 16), bool] */;
    %533 = cast(%532, dtype="float32") /* ty=Tensor[(11, 3, 16), float32] */;
    %534 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
    %535 = cast(%527, dtype="float32") /* ty=Tensor[(11, 3, 16), float32] */;
    %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %537 = cast(%var_5821, dtype="float32") /* ty=Tensor[(256), float32] */;
    %538 = reshape(%537, newshape=[256]) /* ty=Tensor[(256), float32] */;
    %539 = @func_4705(%538) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(9, 11, 13), float32], Tensor[(429, 3), float32]) */;
    %540 = cast(meta[relay.Constant][26] /* ty=Tensor[(2100, 1), uint32] */, dtype="uint32") /* ty=Tensor[(2100, 1), uint32] */;
    %541 = reshape(%540, newshape=[14, 10, 15]) /* ty=Tensor[(14, 10, 15), uint32] */;
    %542 = @func_5554(%541) /* ty=(Tensor[(14, 10, 15), uint32],) */;
    %543 = cast(%var_5836, dtype="uint16") /* ty=Tensor[(11, 3, 16), uint16] */;
    %544 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
    %545 = cast(%532, dtype="uint16") /* ty=Tensor[(11, 3, 16), uint16] */;
    %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %547 = @func_3569() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(256), float32]) */;
    %548 = @func_3929() /* ty=Tensor[(12, 9, 9), float64] */;
    %549 = %525.0;
    %550 = floor_divide(%535, %536) /* ty=Tensor[(11, 3, 16), float32] */;
    %551 = %539.2;
    %552 = %542.0;
    %553 = right_shift(%545, %546) /* ty=Tensor[(11, 3, 16), uint16] */;
    %554 = %547.1;
    (%548, %549, %550, %551, %var_5821, %552, meta[relay.Constant][26] /* ty=Tensor[(2100, 1), uint32] */, %553, %554)
  };
  %555(%var_5857, %var_5858, %var_5859) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), uint16], Tensor[(11, 3, 16), float32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(14, 10, 15), uint32], Tensor[(2100, 1), uint32], Tensor[(11, 3, 16), uint16], Tensor[(12, 9, 9), float64]) */
}

def @func_2139(%var_2138: Tensor[(12, 9, 9), float64]) -> (Tensor[(12, 9, 9), int64], Tensor[(12, 9, 9), float32]) {
  %568 = fn (%var_2112: Tensor[(12, 9, 9), float64]) -> (Tensor[(12, 9, 9), int64], Tensor[(12, 9, 9), float32]) {
    %556 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
    %557 = %556.0;
    %558 = cast(%var_2112, dtype="int64") /* ty=Tensor[(12, 9, 9), int64] */;
    %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
    %560 = cast(%557, dtype="int64") /* ty=Tensor[(12, 9, 9), int64] */;
    %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %562 = cast(%557, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
    %563 = shape_of(%var_2112, dtype="int32") /* ty=Tensor[(3), int32] */;
    %564 = cast(%var_2112, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
    %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %566 = maximum(%560, %561) /* ty=Tensor[(12, 9, 9), int64] */;
    %567 = floor_mod(%564, %565) /* ty=Tensor[(12, 9, 9), float32] */;
    (%566, %567)
  };
  %568(%var_2138) /* ty=(Tensor[(12, 9, 9), int64], Tensor[(12, 9, 9), float32]) */
}

def @func_3212() -> (Tensor[(12), float32],) {
  %569 = @func_2446() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32]) */;
  %570 = %569.2;
  (%570,)
}

def @func_3930() -> Tensor[(12, 9, 9), float64] {
  %572 = fn () -> Tensor[(12, 9, 9), float64] {
    %571 = @func_2686() /* ty=(Tensor[(12, 9, 9), float64],) */;
    %571.0
  };
  %572() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_2097() -> Tensor[(12, 9, 9), float64] {
  %574 = fn () -> Tensor[(12, 9, 9), float64] {
    %573 = @func_1821() /* ty=(Tensor[(12, 9, 9), float64],) */;
    %573.0
  };
  %574() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_5411(%var_5384: Tensor[(160), bool], %var_5398: Tensor[(4, 10, 4), float64], %var_5407: Tensor[(1287), float32]) -> (Tensor[(12), float32], Tensor[(160), bool], Tensor[(12), float32], Tensor[(4, 10, 4), bool], Tensor[(1287), float32], Tensor[(1287), float32]) {
  %575 = @func_4850() /* ty=(Tensor[(12, 9, 9), uint16], Tensor[(12), float32], Tensor[(2, 360), int64], Tensor[(429, 3), float32], Tensor[(1287), float32]) */;
  %576 = @func_4850() /* ty=(Tensor[(12, 9, 9), uint16], Tensor[(12), float32], Tensor[(2, 360), int64], Tensor[(429, 3), float32], Tensor[(1287), float32]) */;
  %577 = cast(%var_5384, dtype="bool") /* ty=Tensor[(160), bool] */;
  %578 = reshape(%577, newshape=[4, 10, 4]) /* ty=Tensor[(4, 10, 4), bool] */;
  %579 = @func_1244(%578) /* ty=(Tensor[(4, 10, 4), bool],) */;
  %580 = %579.0;
  %581 = cast(%580, dtype="float64") /* ty=Tensor[(4, 10, 4), float64] */;
  %582 = log(%581) /* ty=Tensor[(4, 10, 4), float64] */;
  %583 = cast(%var_5398, dtype="bool") /* ty=Tensor[(4, 10, 4), bool] */;
  %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%582, dtype="bool") /* ty=Tensor[(4, 10, 4), bool] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %587 = cast(%var_5407, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %588 = reshape(%587, newshape=[1287]) /* ty=Tensor[(1287), float32] */;
  %589 = @func_4462(%588) /* ty=(Tensor[(256), float32], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1287), float32], Tensor[(12, 9, 9), float64]) */;
  %590 = %575.1;
  %591 = %576.1;
  %592 = less_equal(%585, %586) /* ty=Tensor[(4, 10, 4), bool] */;
  %593 = %589.3;
  (%590, %var_5384, %591, %592, %593, %var_5407)
}

def @func_7292(%var_7274: Tensor[(14, 11, 2), int64], %var_7275: Tensor[(14, 11, 2), int64]) -> (Tensor[(13, 7, 16), bool], Tensor[(14, 11, 2), bool]) {
  %594 = @func_3036() /* ty=(Tensor[(13, 7, 16), bool],) */;
  %595 = cast(%var_7275, dtype="int64") /* ty=Tensor[(14, 11, 2), int64] */;
  %596 = shape_of(%var_7274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%var_7274, dtype="int64") /* ty=Tensor[(14, 11, 2), int64] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %599 = bitwise_xor(%597, %598) /* ty=Tensor[(14, 11, 2), int64] */;
  %600 = cast(%599, dtype="bool") /* ty=Tensor[(14, 11, 2), bool] */;
  %601 = shape_of(%var_7274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%var_7274, dtype="bool") /* ty=Tensor[(14, 11, 2), bool] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %604 = %594.0;
  %605 = not_equal(%602, %603) /* ty=Tensor[(14, 11, 2), bool] */;
  (%604, %605)
}

def @func_2763() -> Tensor[(12, 9, 9), float64] {
  @func_2761() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_5779(%var_5778: Tensor[(2, 2, 8), float64]) -> (Tensor[(2, 2, 8), float64], Tensor[(3, 15, 12), int32], Tensor[(540), int32]) {
  %617 = fn (%var_5768: Tensor[(2, 2, 8), float64]) -> (Tensor[(2, 2, 8), float64], Tensor[(3, 15, 12), int32], Tensor[(540), int32]) {
    %606 = cast(%var_5768, dtype="float64") /* ty=Tensor[(2, 2, 8), float64] */;
    %607 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(2, 2, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %608 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 2, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 8), float64] */;
    %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %610 = cast(meta[relay.Constant][28] /* ty=Tensor[(540), int32] */, dtype="int32") /* ty=Tensor[(540), int32] */;
    %611 = cast(meta[relay.Constant][28] /* ty=Tensor[(540), int32] */, dtype="int32") /* ty=Tensor[(540), int32] */;
    %612 = reshape(%610, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), int32] */;
    %613 = reshape(%611, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), int32] */;
    %614 = @func_4964(%612, %613) /* ty=(Tensor[(3, 15, 12), int32],) */;
    %615 = floor_mod(%608, %609) /* ty=Tensor[(2, 2, 8), float64] */;
    %616 = %614.0;
    (%615, %616, meta[relay.Constant][28] /* ty=Tensor[(540), int32] */)
  };
  %617(%var_5778) /* ty=(Tensor[(2, 2, 8), float64], Tensor[(3, 15, 12), int32], Tensor[(540), int32]) */
}

def @func_3116() -> Tensor[(12, 9, 9), float64] {
  %619 = fn () -> Tensor[(12, 9, 9), float64] {
    %618 = @func_2248() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool], Tensor[(12, 9, 9), float64]) */;
    %618.2
  };
  %619() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_2653(%var_2651: Tensor[(13, 7, 16), bool], %var_2652: Tensor[(13, 7, 16), bool]) -> Tensor[(13, 7, 16), uint8] {
  @func_2649(%var_2651, %var_2652) /* ty=Tensor[(13, 7, 16), uint8] */
}

def @func_5630() -> (Tensor[(12, 9, 9), bool], Tensor[(5, 2, 4), bool], Tensor[(18, 18), float32]) {
  @func_5628() /* ty=(Tensor[(12, 9, 9), bool], Tensor[(5, 2, 4), bool], Tensor[(18, 18), float32]) */
}

def @func_5950(%var_5938: Tensor[(3, 14, 7), float32]) -> (Tensor[(3, 14, 7), float32],) {
  %620 = cast(%var_5938, dtype="float32") /* ty=Tensor[(3, 14, 7), float32] */;
  %621 = asinh(%620) /* ty=Tensor[(3, 14, 7), float32] */;
  %622 = cast(%621, dtype="float32") /* ty=Tensor[(3, 14, 7), float32] */;
  %623 = exp(%622) /* ty=Tensor[(3, 14, 7), float32] */;
  (%623,)
}

def @func_3146(%var_3137: Tensor[(429, 3), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(429, 3), float32], Tensor[(9, 11, 13), float64], Tensor[(12, 9, 9), float64]) {
  %624 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %625 = cast(%var_3137, dtype="float32") /* ty=Tensor[(429, 3), float32] */;
  %626 = reshape(%625, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %627 = @func_83(%626) /* ty=Tensor[(9, 11, 13), float32] */;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(9, 11, 13), float64] */;
  %629 = %624.1;
  %630 = atan(%628) /* ty=Tensor[(9, 11, 13), float64] */;
  %631 = @func_2547() /* ty=Tensor[(12, 9, 9), float64] */;
  (%629, %var_3137, %630, %631)
}

def @func_6739() -> Tensor[(12, 9, 9), float64] {
  %632 = @func_2707() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %632.0
}

def @func_3601(%var_3599: Tensor[(15, 4, 12), int64], %var_3600: Tensor[(15, 4, 12), int64]) -> (Tensor[(15, 4, 12), int64], Tensor[(15, 4, 12), float32]) {
  %640 = fn (%var_3572: Tensor[(15, 4, 12), int64], %var_3573: Tensor[(15, 4, 12), int64]) -> (Tensor[(15, 4, 12), int64], Tensor[(15, 4, 12), float32]) {
    %633 = cast(%var_3573, dtype="int64") /* ty=Tensor[(15, 4, 12), int64] */;
    %634 = shape_of(%var_3572, dtype="int32") /* ty=Tensor[(3), int32] */;
    %635 = cast(%var_3572, dtype="int64") /* ty=Tensor[(15, 4, 12), int64] */;
    %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %637 = cast(%var_3573, dtype="float32") /* ty=Tensor[(15, 4, 12), float32] */;
    %638 = logical_xor(%635, %636) /* ty=Tensor[(15, 4, 12), int64] */;
    %639 = rsqrt(%637) /* ty=Tensor[(15, 4, 12), float32] */;
    (%638, %639)
  };
  %640(%var_3599, %var_3600) /* ty=(Tensor[(15, 4, 12), int64], Tensor[(15, 4, 12), float32]) */
}

def @func_1987(%var_1984: Tensor[(8, 4, 7), float64]) -> (Tensor[(8, 4, 7), float64],) {
  %641 = cast(%var_1984, dtype="float64") /* ty=Tensor[(8, 4, 7), float64] */;
  %642 = cosh(%641) /* ty=Tensor[(8, 4, 7), float64] */;
  (%642,)
}

def @func_6421() -> (Tensor[(12), float32], Tensor[(13, 7, 16), bool]) {
  %647 = fn () -> (Tensor[(12), float32], Tensor[(13, 7, 16), bool]) {
    %643 = @func_4041() /* ty=(Tensor[(12), float32],) */;
    %644 = @func_5718() /* ty=(Tensor[(13, 7, 16), bool],) */;
    %645 = %643.0;
    %646 = %644.0;
    (%645, %646)
  };
  %647() /* ty=(Tensor[(12), float32], Tensor[(13, 7, 16), bool]) */
}

def @func_3449() -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool]) {
  %648 = @func_2686() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %649 = @func_2446() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32]) */;
  %650 = %649.0;
  %651 = cast(%650, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %652 = sqrt(%651) /* ty=Tensor[(12, 9, 9), float32] */;
  %653 = cast(%650, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%652, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %657 = %648.0;
  %658 = greater_equal(%655, %656) /* ty=Tensor[(12, 9, 9), bool] */;
  (%657, %658)
}

def @func_7161() -> (Tensor[(12, 9, 9), float64],) {
  @func_7159() /* ty=(Tensor[(12, 9, 9), float64],) */
}

def @func_7551() -> (Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool]) {
  %667 = fn () -> (Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool]) {
    %659 = @func_2707() /* ty=(Tensor[(12, 9, 9), float64],) */;
    %660 = cast(meta[relay.Constant][29] /* ty=Tensor[(1456), bool] */, dtype="bool") /* ty=Tensor[(1456), bool] */;
    %661 = cast(meta[relay.Constant][29] /* ty=Tensor[(1456), bool] */, dtype="bool") /* ty=Tensor[(1456), bool] */;
    %662 = reshape(%660, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), bool] */;
    %663 = reshape(%661, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), bool] */;
    %664 = @func_853(%662, %663) /* ty=(Tensor[(13, 7, 16), bool], Tensor[(13, 7, 16), float64]) */;
    %665 = %659.0;
    %666 = %664.0;
    (%665, %666, meta[relay.Constant][29] /* ty=Tensor[(1456), bool] */)
  };
  %667() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool]) */
}

def @func_1246(%var_1245: Tensor[(4, 10, 4), bool]) -> (Tensor[(4, 10, 4), bool],) {
  %673 = fn (%var_1237: Tensor[(4, 10, 4), bool]) -> (Tensor[(4, 10, 4), bool],) {
    %668 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 10, 4), bool] */, dtype="bool") /* ty=Tensor[(4, 10, 4), bool] */;
    %669 = shape_of(%var_1237, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(%var_1237, dtype="bool") /* ty=Tensor[(4, 10, 4), bool] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %672 = logical_and(%670, %671) /* ty=Tensor[(4, 10, 4), bool] */;
    (%672,)
  };
  %673(%var_1245) /* ty=(Tensor[(4, 10, 4), bool],) */
}

def @func_3389() -> (Tensor[(12, 9, 9), float64],) {
  %675 = fn () -> (Tensor[(12, 9, 9), float64],) {
    %674 = @func_3281() /* ty=Tensor[(12, 9, 9), float64] */;
    (%674,)
  };
  %675() /* ty=(Tensor[(12, 9, 9), float64],) */
}

def @func_7600(%var_7580: Tensor[(1764), int32], %var_7592: Tensor[(462), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(1764, 1), int32], Tensor[(1764), int32], Tensor[(14, 8, 5), uint64], Tensor[(12), float32], Tensor[(6, 7, 11), int16], Tensor[(462), float32]) {
  %676 = @func_7159() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %677 = cast(%var_7580, dtype="int32") /* ty=Tensor[(1764), int32] */;
  %678 = reshape(%677, newshape=[1764, 1]) /* ty=Tensor[(1764, 1), int32] */;
  %679 = @func_6922(%678) /* ty=(Tensor[(2, 1, 6), float64], Tensor[(4, 10, 4), float32], Tensor[(1764, 1), int32], Tensor[(160), bool], Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), uint16]) */;
  %680 = cast(meta[relay.Constant][31] /* ty=Tensor[(8, 70), uint16] */, dtype="uint16") /* ty=Tensor[(8, 70), uint16] */;
  %681 = cast(meta[relay.Constant][31] /* ty=Tensor[(8, 70), uint16] */, dtype="uint16") /* ty=Tensor[(8, 70), uint16] */;
  %682 = reshape(%680, newshape=[14, 8, 5]) /* ty=Tensor[(14, 8, 5), uint16] */;
  %683 = reshape(%681, newshape=[14, 8, 5]) /* ty=Tensor[(14, 8, 5), uint16] */;
  %684 = @func_4721(%682, %683) /* ty=(Tensor[(14, 8, 5), uint16],) */;
  %685 = %684.0;
  %686 = cast(meta[relay.Constant][31] /* ty=Tensor[(8, 70), uint16] */, dtype="uint64") /* ty=Tensor[(8, 70), uint64] */;
  %687 = shape_of(%685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %688 = cast(%685, dtype="uint64") /* ty=Tensor[(14, 8, 5), uint64] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %690 = @func_7329() /* ty=(Tensor[(12), float32],) */;
  %691 = cast(%var_7592, dtype="float32") /* ty=Tensor[(462), float32] */;
  %692 = cast(%var_7592, dtype="float32") /* ty=Tensor[(462), float32] */;
  %693 = reshape(%691, newshape=[6, 7, 11]) /* ty=Tensor[(6, 7, 11), float32] */;
  %694 = reshape(%692, newshape=[6, 7, 11]) /* ty=Tensor[(6, 7, 11), float32] */;
  %695 = @func_6206(%693, %694) /* ty=(Tensor[(6, 7, 11), int16],) */;
  %696 = %676.0;
  %697 = %679.2;
  %698 = add(%688, %689) /* ty=Tensor[(14, 8, 5), uint64] */;
  %699 = %690.0;
  %700 = %695.0;
  (%696, %697, %var_7580, %698, %699, %700, %var_7592)
}

def @func_5525() -> (Tensor[(12), float32],) {
  @func_5523() /* ty=(Tensor[(12), float32],) */
}

def @func_7604(%var_7602: Tensor[(1764), int32], %var_7603: Tensor[(462), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(1764, 1), int32], Tensor[(1764), int32], Tensor[(14, 8, 5), uint64], Tensor[(12), float32], Tensor[(6, 7, 11), int16], Tensor[(462), float32]) {
  @func_7600(%var_7602, %var_7603) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(1764, 1), int32], Tensor[(1764), int32], Tensor[(14, 8, 5), uint64], Tensor[(12), float32], Tensor[(6, 7, 11), int16], Tensor[(462), float32]) */
}

def @func_2815(%var_2808: Tensor[(12, 9, 9), float64]) -> Tensor[(12, 9, 9), uint16] {
  %701 = @func_2096() /* ty=Tensor[(12, 9, 9), float64] */;
  %702 = cast(%var_2808, dtype="uint16") /* ty=Tensor[(12, 9, 9), uint16] */;
  %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%701, dtype="uint16") /* ty=Tensor[(12, 9, 9), uint16] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  subtract(%704, %705) /* ty=Tensor[(12, 9, 9), uint16] */
}

def @func_3484() -> (Tensor[(12, 9, 9), uint16],) {
  %706 = @func_2732() /* ty=Tensor[(12, 9, 9), uint16] */;
  (%706,)
}

def @func_1800(%var_1798: Tensor[(2, 15, 10), uint8], %var_1799: Tensor[(2, 15, 10), uint8]) -> Tensor[(2, 15, 10), uint8] {
  %711 = fn (%var_1789: Tensor[(2, 15, 10), uint8], %var_1790: Tensor[(2, 15, 10), uint8]) -> Tensor[(2, 15, 10), uint8] {
    %707 = cast(%var_1790, dtype="uint8") /* ty=Tensor[(2, 15, 10), uint8] */;
    %708 = shape_of(%var_1789, dtype="int32") /* ty=Tensor[(3), int32] */;
    %709 = cast(%var_1789, dtype="uint8") /* ty=Tensor[(2, 15, 10), uint8] */;
    %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    maximum(%709, %710) /* ty=Tensor[(2, 15, 10), uint8] */
  };
  %711(%var_1798, %var_1799) /* ty=Tensor[(2, 15, 10), uint8] */
}

def @func_1024(%var_974: Tensor[(5, 1, 6), float32], %var_1001: Tensor[(143, 9), float32], %var_1022: Tensor[(273, 1), uint8]) -> (Tensor[(12, 140), float64], Tensor[(5, ?, 6), uint16], Tensor[(143, 9), bool], Tensor[(143, 9), float32], Tensor[(7, 13, 3), bool], Tensor[(273, 1), uint8]) {
  %712 = cast(%var_974, dtype="float32") /* ty=Tensor[(5, 1, 6), float32] */;
  %713 = sqrt(%712) /* ty=Tensor[(5, 1, 6), float32] */;
  %714 = cast(%var_974, dtype="uint16") /* ty=Tensor[(5, 1, 6), uint16] */;
  %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%713, dtype="uint16") /* ty=Tensor[(5, 1, 6), uint16] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %718 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 140), float64] */, dtype="float64") /* ty=Tensor[(12, 140), float64] */;
  %719 = cast(meta[relay.Constant][33] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %720 = reshape(%718, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float64] */;
  %721 = reshape(%719, newshape=[143, 9]) /* ty=Tensor[(143, 9), float32] */;
  %722 = @func_348(%720, %721) /* ty=(Tensor[(8, 14, 15), float64], Tensor[(9, 11, 13), float32], Tensor[(143, 9), float32], Tensor[(9, 11, 13), float32]) */;
  %723 = %722.2;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(143, 9), float32] */;
  %725 = acos(%724) /* ty=Tensor[(143, 9), float32] */;
  %726 = cast(%725, dtype="float32") /* ty=Tensor[(143, 9), float32] */;
  %727 = log2(%726) /* ty=Tensor[(143, 9), float32] */;
  %728 = cast(%var_1001, dtype="bool") /* ty=Tensor[(143, 9), bool] */;
  %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(2), int32] */;
  %730 = cast(%727, dtype="bool") /* ty=Tensor[(143, 9), bool] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %732 = cast(meta[relay.Constant][33] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %733 = shape_of(%727, dtype="int32") /* ty=Tensor[(2), int32] */;
  %734 = cast(%727, dtype="float32") /* ty=Tensor[(143, 9), float32] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %736 = floor_divide(%734, %735) /* ty=Tensor[(143, 9), float32] */;
  %737 = cast(%736, dtype="float32") /* ty=Tensor[(143, 9), float32] */;
  %738 = cast(%var_1022, dtype="uint8") /* ty=Tensor[(273, 1), uint8] */;
  %739 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 140), float64] */, dtype="float64") /* ty=Tensor[(12, 140), float64] */;
  %740 = cast(%723, dtype="float32") /* ty=Tensor[(143, 9), float32] */;
  %741 = reshape(%738, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), uint8] */;
  %742 = reshape(%739, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %743 = reshape(%740, newshape=[1, 1287]) /* ty=Tensor[(1, 1287), float32] */;
  %744 = @func_502(%741, %742, %743) /* ty=(Tensor[(7, 13, 3), bool], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1, 1287), float32]) */;
  %745 = bitwise_and(%716, %717) /* ty=Tensor[(5, ?, 6), uint16] */;
  %746 = less_equal(%730, %731) /* ty=Tensor[(143, 9), bool] */;
  %747 = cosh(%737) /* ty=Tensor[(143, 9), float32] */;
  %748 = %744.0;
  (meta[relay.Constant][32] /* ty=Tensor[(12, 140), float64] */, %745, %746, %747, %748, %var_1022)
}

def @func_3486() -> (Tensor[(12, 9, 9), uint16],) {
  @func_3484() /* ty=(Tensor[(12, 9, 9), uint16],) */
}

def @func_6961() -> Tensor[(12, 9, 9), uint16] {
  %750 = fn () -> Tensor[(12, 9, 9), uint16] {
    %749 = @func_6352() /* ty=(Tensor[(12, 9, 9), uint16],) */;
    %749.0
  };
  %750() /* ty=Tensor[(12, 9, 9), uint16] */
}

def @func_7742() -> (Tensor[(12, 9, 9), float64],) {
  %751 = @func_7550() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool]) */;
  %752 = %751.0;
  (%752,)
}

def @func_2576(%var_2574: Tensor[(5, 2, 4), uint16], %var_2575: Tensor[(5, 2, 4), uint16]) -> (Tensor[(5, 2, 4), bool],) {
  %758 = fn (%var_2550: Tensor[(5, 2, 4), uint16], %var_2551: Tensor[(5, 2, 4), uint16]) -> (Tensor[(5, 2, 4), bool],) {
    %753 = cast(%var_2551, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
    %754 = shape_of(%var_2550, dtype="int32") /* ty=Tensor[(3), int32] */;
    %755 = cast(%var_2550, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
    %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %757 = not_equal(%755, %756) /* ty=Tensor[(5, 2, 4), bool] */;
    (%757,)
  };
  %758(%var_2574, %var_2575) /* ty=(Tensor[(5, 2, 4), bool],) */
}

def @func_5718() -> (Tensor[(13, 7, 16), bool],) {
  %759 = @func_3036() /* ty=(Tensor[(13, 7, 16), bool],) */;
  %760 = %759.0;
  (%760,)
}

def @func_4048() -> (Tensor[(12, 9, 9), float64],) {
  %762 = fn () -> (Tensor[(12, 9, 9), float64],) {
    %761 = @func_2096() /* ty=Tensor[(12, 9, 9), float64] */;
    (%761,)
  };
  %762() /* ty=(Tensor[(12, 9, 9), float64],) */
}

def @func_6110(%var_6085: Tensor[(30), float32], %var_6086: Tensor[(1287), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(30), float32], Tensor[(1287), float32], Tensor[(273), bool]) {
  %763 = @func_4047() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %764 = cast(%var_6085, dtype="float32") /* ty=Tensor[(30), float32] */;
  %765 = cast(%var_6086, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %766 = cast(meta[relay.Constant][34] /* ty=Tensor[(273), uint8] */, dtype="uint8") /* ty=Tensor[(273), uint8] */;
  %767 = reshape(%764, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
  %768 = reshape(%765, newshape=[143, 9]) /* ty=Tensor[(143, 9), float32] */;
  %769 = reshape(%766, newshape=[273, 1]) /* ty=Tensor[(273, 1), uint8] */;
  %770 = @func_1024(%767, %768, %769) /* ty=(Tensor[(12, 140), float64], Tensor[(5, ?, 6), uint16], Tensor[(143, 9), bool], Tensor[(143, 9), float32], Tensor[(7, 13, 3), bool], Tensor[(273, 1), uint8]) */;
  %771 = %770.5;
  %772 = cast(%771, dtype="float32") /* ty=Tensor[(273, 1), float32] */;
  %773 = cos(%772) /* ty=Tensor[(273, 1), float32] */;
  %774 = cast(%773, dtype="float32") /* ty=Tensor[(273, 1), float32] */;
  %775 = atan(%774) /* ty=Tensor[(273, 1), float32] */;
  %776 = cast(%775, dtype="bool") /* ty=Tensor[(273, 1), bool] */;
  %777 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(273), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %778 = cast(meta[relay.Constant][34] /* ty=Tensor[(273), uint8] */, dtype="bool") /* ty=Tensor[(273), bool] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?), bool] */;
  %780 = %763.0;
  %781 = not_equal(%778, %779) /* ty=Tensor[(273), bool] */;
  (%780, %var_6085, %var_6086, %781)
}

def @func_4525() -> Tensor[(12, 9, 9), float64] {
  @func_1868() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_6390() -> (Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), uint16]) {
  %782 = @func_6352() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %783 = @func_3657() /* ty=Tensor[(12, 9, 9), bool] */;
  %784 = %782.0;
  (%783, %784)
}

def @func_2534(%var_2532: Tensor[(16, 12, 9), uint64], %var_2533: Tensor[(16, 12, 9), uint64]) -> Tensor[(16, 12, 9), bool] {
  %789 = fn (%var_2521: Tensor[(16, 12, 9), uint64], %var_2522: Tensor[(16, 12, 9), uint64]) -> Tensor[(16, 12, 9), bool] {
    %785 = cast(%var_2522, dtype="bool") /* ty=Tensor[(16, 12, 9), bool] */;
    %786 = shape_of(%var_2521, dtype="int32") /* ty=Tensor[(3), int32] */;
    %787 = cast(%var_2521, dtype="bool") /* ty=Tensor[(16, 12, 9), bool] */;
    %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%787, %788) /* ty=Tensor[(16, 12, 9), bool] */
  };
  %789(%var_2532, %var_2533) /* ty=Tensor[(16, 12, 9), bool] */
}

def @func_3915() -> (Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float64]) {
  @func_3913() /* ty=(Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float64]) */
}

def @func_6114(%var_6112: Tensor[(30), float32], %var_6113: Tensor[(1287), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(30), float32], Tensor[(1287), float32], Tensor[(273), bool]) {
  @func_6110(%var_6112, %var_6113) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(30), float32], Tensor[(1287), float32], Tensor[(273), bool]) */
}

def @func_2493() -> (Tensor[(12, 9, 9), float64], Tensor[(16, 16), float32], Tensor[(256), float32]) {
  %790 = cast(meta[relay.Constant][35] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %791 = reshape(%790, newshape=[16, 16]) /* ty=Tensor[(16, 16), float32] */;
  %792 = @func_1918(%791) /* ty=(Tensor[(16, 16), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), bool]) */;
  %793 = @func_1868() /* ty=Tensor[(12, 9, 9), float64] */;
  %794 = %792.0;
  (%793, %794, meta[relay.Constant][35] /* ty=Tensor[(256), float32] */)
}

def @func_4095(%var_4094: uint16) -> (Tensor[(2, 10, 2), uint16], Tensor[(5, 2, 4), bool]) {
  %804 = fn (%var_4082: uint16) -> (Tensor[(2, 10, 2), uint16], Tensor[(5, 2, 4), bool]) {
    %795 = cast(%var_4082, dtype="uint16") /* ty=uint16 */;
    %796 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 10, 2), uint16] */, dtype="uint16") /* ty=Tensor[(2, 10, 2), uint16] */;
    %797 = add(%795, %796) /* ty=Tensor[(2, 10, 2), uint16] */;
    %798 = cast(%797, dtype="uint16") /* ty=Tensor[(2, 10, 2), uint16] */;
    %799 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 10, 2), uint16] */, dtype="uint16") /* ty=Tensor[(2, 10, 2), uint16] */;
    %800 = reshape(%798, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), uint16] */;
    %801 = reshape(%799, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), uint16] */;
    %802 = @func_2573(%800, %801) /* ty=(Tensor[(5, 2, 4), bool],) */;
    %803 = %802.0;
    (%797, %803)
  };
  %804(%var_4094) /* ty=(Tensor[(2, 10, 2), uint16], Tensor[(5, 2, 4), bool]) */
}

def @func_5444() -> (Tensor[(12, 9, 9), uint16],) {
  %805 = @func_3182() /* ty=(Tensor[(12, 9, 9), uint16],) */;
  %806 = %805.0;
  (%806,)
}

def @func_7376() -> (Tensor[(12), float32], Tensor[(12), float32]) {
  %811 = fn () -> (Tensor[(12), float32], Tensor[(12), float32]) {
    %807 = @func_7021() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12), float32], Tensor[(12, 9, 9), float64]) */;
    %808 = @func_4041() /* ty=(Tensor[(12), float32],) */;
    %809 = %807.1;
    %810 = %808.0;
    (%809, %810)
  };
  %811() /* ty=(Tensor[(12), float32], Tensor[(12), float32]) */
}

def @func_4493() -> (Tensor[(16, 16), float32], Tensor[(12, 9, 9), float64], Tensor[(1287), float32], Tensor[(12, 7, 12), float32], Tensor[(1008), float32]) {
  %822 = fn () -> (Tensor[(16, 16), float32], Tensor[(12, 9, 9), float64], Tensor[(1287), float32], Tensor[(12, 7, 12), float32], Tensor[(1008), float32]) {
    %812 = @func_2493() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(16, 16), float32], Tensor[(256), float32]) */;
    %813 = cast(meta[relay.Constant][37] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
    %814 = reshape(%813, newshape=[429, 3]) /* ty=Tensor[(429, 3), float32] */;
    %815 = @func_3146(%814) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(429, 3), float32], Tensor[(9, 11, 13), float64], Tensor[(12, 9, 9), float64]) */;
    %816 = cast(meta[relay.Constant][38] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %817 = reshape(%816, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), float32] */;
    %818 = @func_1967(%817) /* ty=(Tensor[(12, 7, 12), float32],) */;
    %819 = %812.1;
    %820 = %815.0;
    %821 = %818.0;
    (%819, %820, meta[relay.Constant][37] /* ty=Tensor[(1287), float32] */, %821, meta[relay.Constant][38] /* ty=Tensor[(1008), float32] */)
  };
  %822() /* ty=(Tensor[(16, 16), float32], Tensor[(12, 9, 9), float64], Tensor[(1287), float32], Tensor[(12, 7, 12), float32], Tensor[(1008), float32]) */
}

def @func_6019(%var_5994: uint64, %var_5995: Tensor[(7, 8, 3), uint64], %var_6010: Tensor[(13, 21), uint8]) -> (Tensor[(7, 8, 3), bool], Tensor[(1680), float64], Tensor[(13, 21), uint8], Tensor[(1680), float64], Tensor[(1287), float32]) {
  %823 = cast(%var_5994, dtype="bool") /* ty=bool */;
  %824 = cast(%var_5995, dtype="bool") /* ty=Tensor[(7, 8, 3), bool] */;
  %825 = cast(%var_6010, dtype="uint8") /* ty=Tensor[(13, 21), uint8] */;
  %826 = cast(meta[relay.Constant][39] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %827 = cast(meta[relay.Constant][40] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %828 = reshape(%825, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), uint8] */;
  %829 = reshape(%826, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %830 = reshape(%827, newshape=[1, 1287]) /* ty=Tensor[(1, 1287), float32] */;
  %831 = @func_502(%828, %829, %830) /* ty=(Tensor[(7, 13, 3), bool], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1, 1287), float32]) */;
  %832 = greater_equal(%823, %824) /* ty=Tensor[(7, 8, 3), bool] */;
  %833 = %831.2;
  (%832, %833, %var_6010, meta[relay.Constant][39] /* ty=Tensor[(1680), float64] */, meta[relay.Constant][40] /* ty=Tensor[(1287), float32] */)
}

def @func_4851() -> (Tensor[(12, 9, 9), uint16], Tensor[(12), float32], Tensor[(2, 360), int64], Tensor[(429, 3), float32], Tensor[(1287), float32]) {
  %844 = fn () -> (Tensor[(12, 9, 9), uint16], Tensor[(12), float32], Tensor[(2, 360), int64], Tensor[(429, 3), float32], Tensor[(1287), float32]) {
    %834 = @func_3484() /* ty=(Tensor[(12, 9, 9), uint16],) */;
    %835 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 360), int64] */, dtype="int64") /* ty=Tensor[(2, 360), int64] */;
    %836 = reshape(%835, newshape=[720]) /* ty=Tensor[(720), int64] */;
    %837 = @func_3753(%836) /* ty=(Tensor[(12), float32], Tensor[(12, 9, 9), uint16], Tensor[(15, 4, 12), float32], Tensor[(720), int64], Tensor[(12, 9, 9), float64]) */;
    %838 = cast(meta[relay.Constant][42] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
    %839 = reshape(%838, newshape=[429, 3]) /* ty=Tensor[(429, 3), float32] */;
    %840 = @func_3146(%839) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(429, 3), float32], Tensor[(9, 11, 13), float64], Tensor[(12, 9, 9), float64]) */;
    %841 = %834.0;
    %842 = %837.0;
    %843 = %840.1;
    (%841, %842, meta[relay.Constant][41] /* ty=Tensor[(2, 360), int64] */, %843, meta[relay.Constant][42] /* ty=Tensor[(1287), float32] */)
  };
  %844() /* ty=(Tensor[(12, 9, 9), uint16], Tensor[(12), float32], Tensor[(2, 360), int64], Tensor[(429, 3), float32], Tensor[(1287), float32]) */
}

def @func_5142() -> (Tensor[(12, 9, 9), uint16],) {
  %845 = @func_2732() /* ty=Tensor[(12, 9, 9), uint16] */;
  (%845,)
}

def @func_1868() -> Tensor[(12, 9, 9), float64] {
  %846 = @func_1821() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %846.0
}

def @func_5523() -> (Tensor[(12), float32],) {
  %847 = @func_4041() /* ty=(Tensor[(12), float32],) */;
  %848 = %847.0;
  (%848,)
}

def @func_2818(%var_2816: Tensor[(12, 9, 9), float64]) -> Tensor[(12, 9, 9), uint16] {
  @func_2815(%var_2816) /* ty=Tensor[(12, 9, 9), uint16] */
}

def @func_4885(%var_4884: Tensor[(12, 9, 3), float32]) -> (Tensor[(12, 9, 3), bool], Tensor[(5, 2, 4), bool], uint16, Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) {
  %863 = fn (%var_4865: Tensor[(12, 9, 3), float32]) -> (Tensor[(12, 9, 3), bool], Tensor[(5, 2, 4), bool], uint16, Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) {
    %849 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 9, 3), float32] */, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
    %850 = rsqrt(%849) /* ty=Tensor[(12, 9, 3), float32] */;
    %851 = cast(%var_4865, dtype="bool") /* ty=Tensor[(12, 9, 3), bool] */;
    %852 = shape_of(%850, dtype="int32") /* ty=Tensor[(3), int32] */;
    %853 = cast(%850, dtype="bool") /* ty=Tensor[(12, 9, 3), bool] */;
    %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %855 = cast(meta[relay.Constant][44] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %856 = reshape(%855, newshape=[]) /* ty=uint16 */;
    %857 = @func_4093(%856) /* ty=(Tensor[(2, 10, 2), uint16], Tensor[(5, 2, 4), bool]) */;
    %858 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
    %859 = logical_or(%853, %854) /* ty=Tensor[(12, 9, 3), bool] */;
    %860 = %857.1;
    %861 = @func_4525() /* ty=Tensor[(12, 9, 9), float64] */;
    %862 = %858.0;
    (%859, %860, meta[relay.Constant][44] /* ty=uint16 */, %861, %862)
  };
  %863(%var_4884) /* ty=(Tensor[(12, 9, 3), bool], Tensor[(5, 2, 4), bool], uint16, Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */
}

def @func_4967(%var_4965: Tensor[(3, 15, 12), int32], %var_4966: Tensor[(3, 15, 12), int32]) -> (Tensor[(3, 15, 12), int32],) {
  %869 = fn (%var_4955: Tensor[(3, 15, 12), int32], %var_4956: Tensor[(3, 15, 12), int32]) -> (Tensor[(3, 15, 12), int32],) {
    %864 = cast(%var_4956, dtype="int32") /* ty=Tensor[(3, 15, 12), int32] */;
    %865 = shape_of(%var_4955, dtype="int32") /* ty=Tensor[(3), int32] */;
    %866 = cast(%var_4955, dtype="int32") /* ty=Tensor[(3, 15, 12), int32] */;
    %867 = dyn.reshape(%864, %865, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %868 = multiply(%866, %867) /* ty=Tensor[(3, 15, 12), int32] */;
    (%868,)
  };
  %869(%var_4965, %var_4966) /* ty=(Tensor[(3, 15, 12), int32],) */
}

def @func_4708(%var_4706: Tensor[(256), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(9, 11, 13), float32], Tensor[(429, 3), float32]) {
  @func_4705(%var_4706) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float32], Tensor[(16, 16), float32], Tensor[(256), float32], Tensor[(9, 11, 13), float32], Tensor[(429, 3), float32]) */
}

def @func_3571() -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(256), float32]) {
  @func_3569() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(256), float32]) */
}

def @func_2758() -> (Tensor[(2, 1, 6), float64],) {
  %872 = fn () -> (Tensor[(2, 1, 6), float64],) {
    %870 = @func_2446() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32]) */;
    %871 = %870.1;
    (%871,)
  };
  %872() /* ty=(Tensor[(2, 1, 6), float64],) */
}

def @func_2549() -> Tensor[(12, 9, 9), float64] {
  @func_2547() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_7296(%var_7294: Tensor[(14, 11, 2), int64], %var_7295: Tensor[(14, 11, 2), int64]) -> (Tensor[(13, 7, 16), bool], Tensor[(14, 11, 2), bool]) {
  @func_7292(%var_7294, %var_7295) /* ty=(Tensor[(13, 7, 16), bool], Tensor[(14, 11, 2), bool]) */
}

def @func_2686() -> (Tensor[(12, 9, 9), float64],) {
  %873 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %874 = %873.0;
  %875 = cast(%874, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %876 = asinh(%875) /* ty=Tensor[(12, 9, 9), float64] */;
  (%876,)
}

def @func_3756(%var_3754: Tensor[(720), int64]) -> (Tensor[(12), float32], Tensor[(12, 9, 9), uint16], Tensor[(15, 4, 12), float32], Tensor[(720), int64], Tensor[(12, 9, 9), float64]) {
  @func_3753(%var_3754) /* ty=(Tensor[(12), float32], Tensor[(12, 9, 9), uint16], Tensor[(15, 4, 12), float32], Tensor[(720), int64], Tensor[(12, 9, 9), float64]) */
}

def @func_502(%var_487: Tensor[(7, 13, 3), uint8], %var_497: Tensor[(1680), float64], %var_498: Tensor[(1, 1287), float32]) -> (Tensor[(7, 13, 3), bool], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1, 1287), float32]) {
  %877 = cast(%var_487, dtype="bool") /* ty=Tensor[(7, 13, 3), bool] */;
  %878 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(7, 13, 3), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %879 = cast(meta[relay.Constant][45] /* ty=Tensor[(7, 13, 3), uint8] */, dtype="bool") /* ty=Tensor[(7, 13, 3), bool] */;
  %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %881 = cast(%var_497, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %882 = cast(%var_498, dtype="float32") /* ty=Tensor[(1, 1287), float32] */;
  %883 = reshape(%881, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float64] */;
  %884 = reshape(%882, newshape=[143, 9]) /* ty=Tensor[(143, 9), float32] */;
  %885 = @func_348(%883, %884) /* ty=(Tensor[(8, 14, 15), float64], Tensor[(9, 11, 13), float32], Tensor[(143, 9), float32], Tensor[(9, 11, 13), float32]) */;
  %886 = equal(%879, %880) /* ty=Tensor[(7, 13, 3), bool] */;
  %887 = %885.3;
  (%886, %887, %var_497, %var_498)
}

def @func_4796() -> (Tensor[(12, 9, 9), float64],) {
  %888 = @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */;
  %889 = %888.1;
  (%889,)
}

def @func_5585(%var_5583: Tensor[(9, 8, 8), float64]) -> (Tensor[(9, 8, 8), float64], Tensor[(12, 9, 9), float64]) {
  @func_5582(%var_5583) /* ty=(Tensor[(9, 8, 8), float64], Tensor[(12, 9, 9), float64]) */
}

def @func_7023() -> (Tensor[(12, 9, 9), float64], Tensor[(12), float32], Tensor[(12, 9, 9), float64]) {
  @func_7021() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12), float32], Tensor[(12, 9, 9), float64]) */
}

def @func_3913() -> (Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float64]) {
  %890 = @func_1821() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %891 = @func_3657() /* ty=Tensor[(12, 9, 9), bool] */;
  %892 = %890.0;
  (%891, %892)
}

def @func_6531() -> (Tensor[(12, 9, 9), float64], Tensor[(256), float32], Tensor[(1287), float32]) {
  @func_6529() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(256), float32], Tensor[(1287), float32]) */
}

def @func_352(%var_350: Tensor[(8, 14, 15), float64], %var_351: Tensor[(143, 9), float32]) -> (Tensor[(8, 14, 15), float64], Tensor[(9, 11, 13), float32], Tensor[(143, 9), float32], Tensor[(9, 11, 13), float32]) {
  @func_348(%var_350, %var_351) /* ty=(Tensor[(8, 14, 15), float64], Tensor[(9, 11, 13), float32], Tensor[(143, 9), float32], Tensor[(9, 11, 13), float32]) */
}

def @func_4941(%var_4940: Tensor[(14, 5, 14), float32]) -> (Tensor[(5, 2, 4), bool], Tensor[(40), uint16], Tensor[(14, 5, 14), float32]) {
  %906 = fn (%var_4913: Tensor[(14, 5, 14), float32]) -> (Tensor[(5, 2, 4), bool], Tensor[(40), uint16], Tensor[(14, 5, 14), float32]) {
    %893 = cast(meta[relay.Constant][46] /* ty=Tensor[(40), uint16] */, dtype="uint16") /* ty=Tensor[(40), uint16] */;
    %894 = cast(meta[relay.Constant][46] /* ty=Tensor[(40), uint16] */, dtype="uint16") /* ty=Tensor[(40), uint16] */;
    %895 = reshape(%893, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), uint16] */;
    %896 = reshape(%894, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), uint16] */;
    %897 = @func_2573(%895, %896) /* ty=(Tensor[(5, 2, 4), bool],) */;
    %898 = cast(%var_4913, dtype="float32") /* ty=Tensor[(14, 5, 14), float32] */;
    %899 = tan(%898) /* ty=Tensor[(14, 5, 14), float32] */;
    %900 = cast(meta[relay.Constant][47] /* ty=Tensor[(14, 5, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 5, 14), float32] */;
    %901 = shape_of(%899, dtype="int32") /* ty=Tensor[(3), int32] */;
    %902 = cast(%899, dtype="float32") /* ty=Tensor[(14, 5, 14), float32] */;
    %903 = dyn.reshape(%900, %901, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %904 = %897.0;
    %905 = power(%902, %903) /* ty=Tensor[(14, 5, 14), float32] */;
    (%904, meta[relay.Constant][46] /* ty=Tensor[(40), uint16] */, %905)
  };
  %906(%var_4940) /* ty=(Tensor[(5, 2, 4), bool], Tensor[(40), uint16], Tensor[(14, 5, 14), float32]) */
}

def @func_3198() -> Tensor[(12, 9, 9), float64] {
  %907 = fn () -> Tensor[(12, 9, 9), float64] {
    @func_2547() /* ty=Tensor[(12, 9, 9), float64] */
  };
  %907() /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_2732() -> Tensor[(12, 9, 9), uint16] {
  %908 = @func_2686() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %909 = %908.0;
  %910 = cast(meta[relay.Constant][48] /* ty=Tensor[(12, 9, 9), float64] */, dtype="uint16") /* ty=Tensor[(12, 9, 9), uint16] */;
  %911 = shape_of(%909, dtype="int32") /* ty=Tensor[(3), int32] */;
  %912 = cast(%909, dtype="uint16") /* ty=Tensor[(12, 9, 9), uint16] */;
  %913 = dyn.reshape(%910, %911, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  minimum(%912, %913) /* ty=Tensor[(12, 9, 9), uint16] */
}

def @func_2882() -> Tensor[(256), float32] {
  %914 = @func_2493() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(16, 16), float32], Tensor[(256), float32]) */;
  %914.2
}

def @func_4030(%var_4029: Tensor[(300), uint8]) -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool], Tensor[(300), uint8]) {
  %923 = fn (%var_3974: Tensor[(300), uint8]) -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool], Tensor[(300), uint8]) {
    %915 = @func_2248() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64], Tensor[(13, 7, 16), bool], Tensor[(1456), bool], Tensor[(12, 9, 9), float64]) */;
    %916 = cast(%var_3974, dtype="uint8") /* ty=Tensor[(300), uint8] */;
    %917 = %915.5;
    %918 = cast(%917, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
    %919 = reshape(%916, newshape=[150, 2]) /* ty=Tensor[(150, 2), uint8] */;
    %920 = reshape(%918, newshape=[12, 9, 9]) /* ty=Tensor[(12, 9, 9), float64] */;
    %921 = @func_3814(%919, %920) /* ty=(Tensor[(2, 15, 10), uint8], Tensor[(12), float32], Tensor[(12, 9, 9), bool], Tensor[(150, 2), float64]) */;
    %922 = %921.2;
    (%917, %922, %var_3974)
  };
  %923(%var_4029) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool], Tensor[(300), uint8]) */
}

def @func_4464(%var_4463: Tensor[(1287), float32]) -> (Tensor[(256), float32], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1287), float32], Tensor[(12, 9, 9), float64]) {
  %934 = fn (%var_4443: Tensor[(1287), float32]) -> (Tensor[(256), float32], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1287), float32], Tensor[(12, 9, 9), float64]) {
    %924 = @func_3344() /* ty=(Tensor[(256), float32],) */;
    %925 = cast(meta[relay.Constant][49] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %926 = cast(%var_4443, dtype="float32") /* ty=Tensor[(1287), float32] */;
    %927 = reshape(%925, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float64] */;
    %928 = reshape(%926, newshape=[143, 9]) /* ty=Tensor[(143, 9), float32] */;
    %929 = @func_348(%927, %928) /* ty=(Tensor[(8, 14, 15), float64], Tensor[(9, 11, 13), float32], Tensor[(143, 9), float32], Tensor[(9, 11, 13), float32]) */;
    %930 = @func_2969() /* ty=(Tensor[(12, 9, 9), float64],) */;
    %931 = %924.0;
    %932 = %929.1;
    %933 = %930.0;
    (%931, %932, meta[relay.Constant][49] /* ty=Tensor[(1680), float64] */, %var_4443, %933)
  };
  %934(%var_4463) /* ty=(Tensor[(256), float32], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1287), float32], Tensor[(12, 9, 9), float64]) */
}

def @func_4724(%var_4722: Tensor[(14, 8, 5), uint16], %var_4723: Tensor[(14, 8, 5), uint16]) -> (Tensor[(14, 8, 5), uint16],) {
  %940 = fn (%var_4716: Tensor[(14, 8, 5), uint16], %var_4717: Tensor[(14, 8, 5), uint16]) -> (Tensor[(14, 8, 5), uint16],) {
    %935 = cast(%var_4717, dtype="uint16") /* ty=Tensor[(14, 8, 5), uint16] */;
    %936 = shape_of(%var_4716, dtype="int32") /* ty=Tensor[(3), int32] */;
    %937 = cast(%var_4716, dtype="uint16") /* ty=Tensor[(14, 8, 5), uint16] */;
    %938 = dyn.reshape(%935, %936, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %939 = subtract(%937, %938) /* ty=Tensor[(14, 8, 5), uint16] */;
    (%939,)
  };
  %940(%var_4722, %var_4723) /* ty=(Tensor[(14, 8, 5), uint16],) */
}

def @func_2495() -> (Tensor[(12, 9, 9), float64], Tensor[(16, 16), float32], Tensor[(256), float32]) {
  @func_2493() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(16, 16), float32], Tensor[(256), float32]) */
}

def @func_5720() -> (Tensor[(13, 7, 16), bool],) {
  @func_5718() /* ty=(Tensor[(13, 7, 16), bool],) */
}

def @func_7813() -> (Tensor[(12, 9, 9), float64],) {
  %941 = @func_2969() /* ty=(Tensor[(12, 9, 9), float64],) */;
  %942 = %941.0;
  (%942,)
}

def @func_2911(%var_2909: uint16, %var_2910: Tensor[(10, 3, 10), uint16]) -> Tensor[(10, 3, 10), bool] {
  %945 = fn (%var_2898: uint16, %var_2899: Tensor[(10, 3, 10), uint16]) -> Tensor[(10, 3, 10), bool] {
    %943 = cast(%var_2898, dtype="bool") /* ty=bool */;
    %944 = cast(%var_2899, dtype="bool") /* ty=Tensor[(10, 3, 10), bool] */;
    less(%943, %944) /* ty=Tensor[(10, 3, 10), bool] */
  };
  %945(%var_2909, %var_2910) /* ty=Tensor[(10, 3, 10), bool] */
}

def @func_507(%var_504: Tensor[(7, 13, 3), uint8], %var_505: Tensor[(1680), float64], %var_506: Tensor[(1, 1287), float32]) -> (Tensor[(7, 13, 3), bool], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1, 1287), float32]) {
  @func_502(%var_504, %var_505, %var_506) /* ty=(Tensor[(7, 13, 3), bool], Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(1, 1287), float32]) */
}

def @func_2446() -> (Tensor[(12, 9, 9), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32]) {
  %946 = cast(meta[relay.Constant][50] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
  %947 = reshape(%946, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float32] */;
  %948 = @func_1449(%947) /* ty=(Tensor[(9, 11, 13), float32], Tensor[(1680), float64], Tensor[(2, 1, 6), float64], Tensor[(1287), float64]) */;
  %949 = @func_2096() /* ty=Tensor[(12, 9, 9), float64] */;
  %950 = %948.2;
  (%949, %950, meta[relay.Constant][50] /* ty=Tensor[(12), float32] */)
}

def @func_3149(%var_3147: Tensor[(429, 3), float32]) -> (Tensor[(12, 9, 9), float64], Tensor[(429, 3), float32], Tensor[(9, 11, 13), float64], Tensor[(12, 9, 9), float64]) {
  @func_3146(%var_3147) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(429, 3), float32], Tensor[(9, 11, 13), float64], Tensor[(12, 9, 9), float64]) */
}

def @func_2448() -> (Tensor[(12, 9, 9), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32]) {
  @func_2446() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32]) */
}

def @func_1860() -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) {
  @func_1858() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */
}

def @func_7685() -> (Tensor[(12, 9, 9), float64], Tensor[(16, 12, 9), bool], Tensor[(1728), uint64], Tensor[(12, 9, 9), float64], Tensor[(18, 18), float32], Tensor[(12), float32], Tensor[(3, 15, 1), float64]) {
  %971 = fn () -> (Tensor[(12, 9, 9), float64], Tensor[(16, 12, 9), bool], Tensor[(1728), uint64], Tensor[(12, 9, 9), float64], Tensor[(18, 18), float32], Tensor[(12), float32], Tensor[(3, 15, 1), float64]) {
    %951 = cast(meta[relay.Constant][51] /* ty=Tensor[(1728), uint64] */, dtype="uint64") /* ty=Tensor[(1728), uint64] */;
    %952 = cast(meta[relay.Constant][51] /* ty=Tensor[(1728), uint64] */, dtype="uint64") /* ty=Tensor[(1728), uint64] */;
    %953 = reshape(%951, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), uint64] */;
    %954 = reshape(%952, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), uint64] */;
    %955 = @func_5628() /* ty=(Tensor[(12, 9, 9), bool], Tensor[(5, 2, 4), bool], Tensor[(18, 18), float32]) */;
    %956 = @func_3212() /* ty=(Tensor[(12), float32],) */;
    %957 = cast(meta[relay.Constant][52] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %958 = reshape(%957, newshape=[]) /* ty=uint64 */;
    %959 = @func_6688(%958) /* ty=(Tensor[(3, 15, 1), uint64],) */;
    %960 = %959.0;
    %961 = cast(%960, dtype="int8") /* ty=Tensor[(3, 15, 1), int8] */;
    %962 = cast(meta[relay.Constant][52] /* ty=uint64 */, dtype="int8") /* ty=int8 */;
    %963 = right_shift(%961, %962) /* ty=Tensor[(3, 15, 1), int8] */;
    %964 = cast(%963, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
    %965 = @func_7116() /* ty=Tensor[(12, 9, 9), float64] */;
    %966 = @func_2531(%953, %954) /* ty=Tensor[(16, 12, 9), bool] */;
    %967 = @func_6739() /* ty=Tensor[(12, 9, 9), float64] */;
    %968 = %955.2;
    %969 = %956.0;
    %970 = rsqrt(%964) /* ty=Tensor[(3, 15, 1), float64] */;
    (%965, %966, meta[relay.Constant][51] /* ty=Tensor[(1728), uint64] */, %967, %968, %969, %970)
  };
  %971() /* ty=(Tensor[(12, 9, 9), float64], Tensor[(16, 12, 9), bool], Tensor[(1728), uint64], Tensor[(12, 9, 9), float64], Tensor[(18, 18), float32], Tensor[(12), float32], Tensor[(3, 15, 1), float64]) */
}

def @func_6741() -> Tensor[(12, 9, 9), float64] {
  @func_6739() /* ty=Tensor[(12, 9, 9), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen283/build/output.py", line 2608, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:03:30] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

