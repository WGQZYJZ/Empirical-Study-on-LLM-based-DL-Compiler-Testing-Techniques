==========mod==========
#[version = "0.0.5"]
def @func_4664() -> Tensor[(105), uint16] {
  %0 = @func_3337() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %0.1
}

def @func_4932(%var_4919: Tensor[(1440), float64]) -> (Tensor[(315), float32], Tensor[(315), float32], Tensor[(1440), float64]) {
  %1 = cast(%var_4919, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %2 = reshape(%1, newshape=[2, 720]) /* ty=Tensor[(2, 720), float64] */;
  %3 = @func_3449(%2) /* ty=(Tensor[(315), float32], Tensor[(12, 15, 8), int8], Tensor[(2, 720), float64]) */;
  %4 = @func_2890() /* ty=Tensor[(315), float32] */;
  %5 = %3.0;
  (%4, %5, %var_4919)
}

def @func_608() -> (Tensor[(105), uint16], Tensor[(105), uint16]) {
  %6 = @func_575() /* ty=Tensor[(105), uint16] */;
  %7 = @func_575() /* ty=Tensor[(105), uint16] */;
  (%6, %7)
}

def @func_537() -> (Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) {
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 16, 3), float32] */, dtype="float32") /* ty=Tensor[(5, 16, 3), float32] */;
  %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(105), uint16] */, dtype="uint16") /* ty=Tensor[(105), uint16] */;
  %10 = cast(meta[relay.Constant][2] /* ty=Tensor[(315), uint16] */, dtype="uint16") /* ty=Tensor[(315), uint16] */;
  %11 = reshape(%9, newshape=[15, 1, 7]) /* ty=Tensor[(15, 1, 7), uint16] */;
  %12 = reshape(%10, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint16] */;
  %13 = @func_307(%11, %12) /* ty=(Tensor[(15, 3, 7), uint16], Tensor[(15, 1, 7), float32]) */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(105), uint16] */, dtype="uint16") /* ty=Tensor[(105), uint16] */;
  %15 = %13.0;
  %16 = cast(%15, dtype="uint16") /* ty=Tensor[(15, 3, 7), uint16] */;
  %17 = reshape(%14, newshape=[15, 1, 7]) /* ty=Tensor[(15, 1, 7), uint16] */;
  %18 = reshape(%16, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint16] */;
  %19 = @func_307(%17, %18) /* ty=(Tensor[(15, 3, 7), uint16], Tensor[(15, 1, 7), float32]) */;
  %20 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 16, 3), float32] */, dtype="float64") /* ty=Tensor[(5, 16, 3), float64] */;
  %21 = log(%20) /* ty=Tensor[(5, 16, 3), float64] */;
  %22 = cast(%21, dtype="float64") /* ty=Tensor[(5, 16, 3), float64] */;
  %23 = exp(%8) /* ty=Tensor[(5, 16, 3), float32] */;
  %24 = %19.0;
  %25 = log2(%22) /* ty=Tensor[(5, 16, 3), float64] */;
  (%23, %15, meta[relay.Constant][1] /* ty=Tensor[(105), uint16] */, meta[relay.Constant][2] /* ty=Tensor[(315), uint16] */, %24, %25)
}

def @func_793() -> (Tensor[(105), uint64],) {
  %26 = @func_638() /* ty=(Tensor[(5, 16, 3), float64], Tensor[(105), uint64]) */;
  %27 = %26.1;
  (%27,)
}

def @func_5193() -> (Tensor[(8, 13, 11), float64], Tensor[(105), float64]) {
  %28 = @func_2049() /* ty=(Tensor[(9, 3, 2), uint32], Tensor[(9, 3, 2), float64], Tensor[(105), uint64], Tensor[(720, 2), float64]) */;
  %29 = %28.2;
  %30 = @func_2771() /* ty=(Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(3, 5, 8), float32], Tensor[(120), float32], Tensor[(105), uint16]) */;
  %31 = %30.0;
  %32 = cast(%31, dtype="float64") /* ty=Tensor[(105), float64] */;
  %33 = shape_of(%29, dtype="int32") /* ty=Tensor[(1), int32] */;
  %34 = cast(%29, dtype="float64") /* ty=Tensor[(105), float64] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?), float64] */;
  %36 = @func_4475() /* ty=Tensor[(8, 13, 11), float64] */;
  %37 = add(%34, %35) /* ty=Tensor[(105), float64] */;
  (%36, %37)
}

def @func_5295() -> (Tensor[(105), float32],) {
  %38 = @func_3963() /* ty=Tensor[(105), float32] */;
  (%38,)
}

def @func_5894(%var_5764: Tensor[(105), uint16], %var_5822: Tensor[(700), float32]) -> (Tensor[(105), float64], Tensor[(105), bool], Tensor[(10, 10, 7), float64], Tensor[(70), float64], Tensor[(3, 4, 8), uint16], Tensor[(96), uint16], Tensor[(12, 15, 8), int8], Tensor[(1440), float64], Tensor[(105), float32], Tensor[(315), float32], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), uint16], Tensor[(105), float64], Tensor[(700), uint64]) {
  %39 = @func_5193() /* ty=(Tensor[(8, 13, 11), float64], Tensor[(105), float64]) */;
  %40 = @func_3416() /* ty=(Tensor[(105), uint16], Tensor[(315), float32]) */;
  %41 = %40.0;
  %42 = cast(%var_5764, dtype="bool") /* ty=Tensor[(105), bool] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(1), int32] */;
  %44 = cast(%41, dtype="bool") /* ty=Tensor[(105), bool] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?), bool] */;
  %46 = cast(meta[relay.Constant][3] /* ty=Tensor[(70), float64] */, dtype="float64") /* ty=Tensor[(70), float64] */;
  %47 = cast(meta[relay.Constant][4] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %48 = reshape(%46, newshape=[1, 10, 7]) /* ty=Tensor[(1, 10, 7), float64] */;
  %49 = reshape(%47, newshape=[10, 10, 7]) /* ty=Tensor[(10, 10, 7), float64] */;
  %50 = @func_5373(%48, %49) /* ty=(Tensor[(10, 10, 7), float64],) */;
  %51 = cast(meta[relay.Constant][5] /* ty=Tensor[(96), uint16] */, dtype="uint16") /* ty=Tensor[(96), uint16] */;
  %52 = cast(meta[relay.Constant][5] /* ty=Tensor[(96), uint16] */, dtype="uint16") /* ty=Tensor[(96), uint16] */;
  %53 = reshape(%51, newshape=[3, 4, 8]) /* ty=Tensor[(3, 4, 8), uint16] */;
  %54 = reshape(%52, newshape=[3, 4, 8]) /* ty=Tensor[(3, 4, 8), uint16] */;
  %55 = @func_3648(%53, %54) /* ty=(Tensor[(3, 4, 8), uint16], Tensor[(105), uint64], Tensor[(105), uint16]) */;
  %56 = cast(meta[relay.Constant][6] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %57 = reshape(%56, newshape=[12, 15, 8]) /* ty=Tensor[(12, 15, 8), float64] */;
  %58 = @func_709(%57) /* ty=(Tensor[(12, 15, 8), int8],) */;
  %59 = @func_4863() /* ty=(Tensor[(105), uint16], Tensor[(105), float32], Tensor[(105), uint64]) */;
  %60 = @func_5193() /* ty=(Tensor[(8, 13, 11), float64], Tensor[(105), float64]) */;
  %61 = cast(meta[relay.Constant][4] /* ty=Tensor[(700), float64] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %62 = acosh(%61) /* ty=Tensor[(700), float32] */;
  %63 = cast(%var_5822, dtype="float64") /* ty=Tensor[(700), float64] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(1), int32] */;
  %65 = cast(%62, dtype="float64") /* ty=Tensor[(700), float64] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?), float64] */;
  %67 = floor_mod(%65, %66) /* ty=Tensor[(700), float64] */;
  %68 = cast(%62, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(1), int32] */;
  %70 = cast(%67, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %72 = %39.1;
  %73 = logical_and(%44, %45) /* ty=Tensor[(105), bool] */;
  %74 = %50.0;
  %75 = %55.0;
  %76 = %58.0;
  %77 = %59.1;
  %78 = @func_2890() /* ty=Tensor[(315), float32] */;
  %79 = @func_2956() /* ty=Tensor[(315), float32] */;
  %80 = @func_1879() /* ty=Tensor[(315), float32] */;
  %81 = @func_4641() /* ty=Tensor[(105), uint16] */;
  %82 = %60.1;
  %83 = left_shift(%70, %71) /* ty=Tensor[(700), uint64] */;
  (%72, %73, %74, meta[relay.Constant][3] /* ty=Tensor[(70), float64] */, %75, meta[relay.Constant][5] /* ty=Tensor[(96), uint16] */, %76, meta[relay.Constant][6] /* ty=Tensor[(1440), float64] */, %77, %78, %79, %80, %81, %82, %83)
}

def @func_5250() -> (Tensor[(105), uint64], Tensor[(5, 16, 3), float64]) {
  %84 = @func_3559() /* ty=(Tensor[(105), uint64], Tensor[(105), uint16]) */;
  %85 = @func_638() /* ty=(Tensor[(5, 16, 3), float64], Tensor[(105), uint64]) */;
  %86 = %84.0;
  %87 = %85.0;
  (%86, %87)
}

def @func_3449(%var_3447: Tensor[(2, 720), float64]) -> (Tensor[(315), float32], Tensor[(12, 15, 8), int8], Tensor[(2, 720), float64]) {
  %88 = @func_2437() /* ty=(Tensor[(315), float32], Tensor[(105), uint16]) */;
  %89 = cast(%var_3447, dtype="float64") /* ty=Tensor[(2, 720), float64] */;
  %90 = reshape(%89, newshape=[12, 15, 8]) /* ty=Tensor[(12, 15, 8), float64] */;
  %91 = @func_709(%90) /* ty=(Tensor[(12, 15, 8), int8],) */;
  %92 = %88.0;
  %93 = %91.0;
  (%92, %93, %var_3447)
}

def @func_2465() -> Tensor[(315), float32] {
  %94 = @func_1394() /* ty=(Tensor[(315), float32],) */;
  %94.0
}

def @func_1617(%var_1579: Tensor[(7, 5, 9), uint32]) -> (Tensor[(7, 5, 9), float32],) {
  %95 = cast(%var_1579, dtype="uint32") /* ty=Tensor[(7, 5, 9), uint32] */;
  %96 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(7, 5, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 5, 9), uint32] */, dtype="uint32") /* ty=Tensor[(7, 5, 9), uint32] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %99 = maximum(%97, %98) /* ty=Tensor[(7, 5, 9), uint32] */;
  %100 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 5, 9), uint32] */, dtype="uint16") /* ty=Tensor[(7, 5, 9), uint16] */;
  %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%99, dtype="uint16") /* ty=Tensor[(7, 5, 9), uint16] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %104 = bitwise_xor(%102, %103) /* ty=Tensor[(7, 5, 9), uint16] */;
  %105 = cast(%var_1579, dtype="float32") /* ty=Tensor[(7, 5, 9), float32] */;
  %106 = shape_of(%104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%104, dtype="float32") /* ty=Tensor[(7, 5, 9), float32] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %109 = power(%107, %108) /* ty=Tensor[(7, 5, 9), float32] */;
  (%109,)
}

def @func_5735() -> (Tensor[(20, 72), float64],) {
  %110 = @func_1972() /* ty=(Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) */;
  %111 = %110.1;
  (%111,)
}

def @func_5477() -> (Tensor[(315), int8], Tensor[(8, 13, 11), float64]) {
  %112 = @func_4154() /* ty=Tensor[(315), float32] */;
  %113 = cast(meta[relay.Constant][8] /* ty=Tensor[(315), float32] */, dtype="int8") /* ty=Tensor[(315), int8] */;
  %114 = shape_of(%112, dtype="int32") /* ty=Tensor[(1), int32] */;
  %115 = cast(%112, dtype="int8") /* ty=Tensor[(315), int8] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?), int8] */;
  %117 = subtract(%115, %116) /* ty=Tensor[(315), int8] */;
  %118 = @func_4475() /* ty=Tensor[(8, 13, 11), float64] */;
  (%117, %118)
}

def @func_4188() -> (Tensor[(105), uint64],) {
  %119 = @func_638() /* ty=(Tensor[(5, 16, 3), float64], Tensor[(105), uint64]) */;
  %120 = %119.1;
  (%120,)
}

def @func_6225() -> (Tensor[(105), uint16],) {
  %121 = @func_3337() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %122 = %121.0;
  (%122,)
}

def @func_4729() -> (Tensor[(105), uint16], Tensor[(105), int32]) {
  %123 = @func_1835() /* ty=(Tensor[(105), int32],) */;
  %124 = @func_891() /* ty=Tensor[(105), uint16] */;
  %125 = %123.0;
  (%124, %125)
}

def @func_719() -> Tensor[(105), uint16] {
  @func_575() /* ty=Tensor[(105), uint16] */
}

def @func_1800(%var_1795: Tensor[(3, 5, 8), float32], %var_1796: Tensor[(3, 5, 8), float32]) -> Tensor[(3, 5, 8), float32] {
  %126 = cast(%var_1796, dtype="float32") /* ty=Tensor[(3, 5, 8), float32] */;
  %127 = shape_of(%var_1795, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%var_1795, dtype="float32") /* ty=Tensor[(3, 5, 8), float32] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%128, %129) /* ty=Tensor[(3, 5, 8), float32] */
}

def @func_575() -> Tensor[(105), uint16] {
  %130 = @func_537() /* ty=(Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) */;
  %130.2
}

def @func_4154() -> Tensor[(315), float32] {
  %131 = @func_3307() /* ty=(Tensor[(105), uint16], Tensor[(315), float32]) */;
  %131.1
}

def @func_6030() -> (Tensor[(105), uint16], Tensor[(315), float32]) {
  %132 = @func_2771() /* ty=(Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(3, 5, 8), float32], Tensor[(120), float32], Tensor[(105), uint16]) */;
  %133 = @func_1186() /* ty=(Tensor[(315), float32],) */;
  %134 = %132.0;
  %135 = %133.0;
  (%134, %135)
}

def @func_4020() -> (Tensor[(105), uint64],) {
  %136 = @func_1097() /* ty=Tensor[(105), uint64] */;
  (%136,)
}

def @func_4507() -> Tensor[(315), float32] {
  %137 = @func_2437() /* ty=(Tensor[(315), float32], Tensor[(105), uint16]) */;
  %137.0
}

def @func_5487() -> (Tensor[(20, 72), float64],) {
  %138 = @func_3514() /* ty=(Tensor[(20, 72), float64],) */;
  %139 = %138.0;
  (%139,)
}

def @func_1286() -> (Tensor[(105), uint16],) {
  %140 = @func_927() /* ty=Tensor[(105), uint16] */;
  (%140,)
}

def @func_4712(%var_4680: Tensor[(15, 9, 4), int8]) -> (Tensor[(15, 9, 4), int8], Tensor[(105), uint16], Tensor[(105), float32]) {
  %141 = cast(meta[relay.Constant][9] /* ty=Tensor[(15, 9, 4), int8] */, dtype="int8") /* ty=Tensor[(15, 9, 4), int8] */;
  %142 = shape_of(%var_4680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%var_4680, dtype="int8") /* ty=Tensor[(15, 9, 4), int8] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %145 = @func_2834() /* ty=(Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %146 = @func_2409() /* ty=(Tensor[(105), float32],) */;
  %147 = multiply(%143, %144) /* ty=Tensor[(15, 9, 4), int8] */;
  %148 = %145.3;
  %149 = %146.0;
  (%147, %148, %149)
}

def @func_6392() -> Tensor[(105), uint64] {
  %150 = @func_793() /* ty=(Tensor[(105), uint64],) */;
  %150.0
}

def @func_1143(%var_1128: Tensor[(6, 16, 9), bool]) -> (Tensor[(6, 16, 9), bool], Tensor[(6, 16, 9), float64]) {
  %151 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 16, 9), bool] */, dtype="bool") /* ty=Tensor[(6, 16, 9), bool] */;
  %152 = shape_of(%var_1128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%var_1128, dtype="bool") /* ty=Tensor[(6, 16, 9), bool] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %155 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 16, 9), bool] */, dtype="float64") /* ty=Tensor[(6, 16, 9), float64] */;
  %156 = acosh(%155) /* ty=Tensor[(6, 16, 9), float64] */;
  %157 = cast(%156, dtype="float64") /* ty=Tensor[(6, 16, 9), float64] */;
  %158 = logical_or(%153, %154) /* ty=Tensor[(6, 16, 9), bool] */;
  %159 = asin(%157) /* ty=Tensor[(6, 16, 9), float64] */;
  (%158, %159)
}

def @func_5309(%var_5304: Tensor[(12, 15, 12), int64], %var_5305: Tensor[(12, 15, 12), int64]) -> Tensor[(12, 15, 12), int64] {
  %160 = cast(%var_5305, dtype="int64") /* ty=Tensor[(12, 15, 12), int64] */;
  %161 = shape_of(%var_5304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%var_5304, dtype="int64") /* ty=Tensor[(12, 15, 12), int64] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_and(%162, %163) /* ty=Tensor[(12, 15, 12), int64] */
}

def @func_5073(%var_5062: Tensor[(2, 10, 9), float32]) -> (Tensor[(2, 10, 9), float32], Tensor[(9, 8, 3), uint64], Tensor[(2, 108), uint64]) {
  %164 = cast(%var_5062, dtype="float32") /* ty=Tensor[(2, 10, 9), float32] */;
  %165 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 108), uint64] */, dtype="uint64") /* ty=Tensor[(2, 108), uint64] */;
  %166 = reshape(%165, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), uint64] */;
  %167 = @func_4632(%166) /* ty=(Tensor[(9, 8, 3), uint64],) */;
  %168 = erf(%164) /* ty=Tensor[(2, 10, 9), float32] */;
  %169 = %167.0;
  (%168, %169, meta[relay.Constant][11] /* ty=Tensor[(2, 108), uint64] */)
}

def @func_3559() -> (Tensor[(105), uint64], Tensor[(105), uint16]) {
  %170 = @func_1097() /* ty=Tensor[(105), uint64] */;
  %171 = @func_3194() /* ty=Tensor[(105), uint16] */;
  (%170, %171)
}

def @func_1879() -> Tensor[(315), float32] {
  %172 = @func_1195() /* ty=Tensor[(315), uint16] */;
  %173 = cast(%172, dtype="float32") /* ty=Tensor[(315), float32] */;
  exp(%173) /* ty=Tensor[(315), float32] */
}

def @func_4641() -> Tensor[(105), uint16] {
  @func_575() /* ty=Tensor[(105), uint16] */
}

def @func_5373(%var_5366: Tensor[(1, 10, 7), float64], %var_5367: Tensor[(10, 10, 7), float64]) -> (Tensor[(10, 10, 7), float64],) {
  %174 = cast(%var_5366, dtype="float64") /* ty=Tensor[(1, 10, 7), float64] */;
  %175 = cast(%var_5367, dtype="float64") /* ty=Tensor[(10, 10, 7), float64] */;
  %176 = add(%174, %175) /* ty=Tensor[(10, 10, 7), float64] */;
  (%176,)
}

def @func_2049() -> (Tensor[(9, 3, 2), uint32], Tensor[(9, 3, 2), float64], Tensor[(105), uint64], Tensor[(720, 2), float64]) {
  %177 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 2), float64] */;
  %178 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(9, 3, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 2), float64] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %181 = divide(%179, %180) /* ty=Tensor[(9, 3, 2), float64] */;
  %182 = cast(%181, dtype="uint32") /* ty=Tensor[(9, 3, 2), uint32] */;
  %183 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(9, 3, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 3, 2), float64] */, dtype="uint32") /* ty=Tensor[(9, 3, 2), uint32] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %186 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 2), float64] */;
  %187 = @func_638() /* ty=(Tensor[(5, 16, 3), float64], Tensor[(105), uint64]) */;
  %188 = @func_1972() /* ty=(Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) */;
  %189 = minimum(%184, %185) /* ty=Tensor[(9, 3, 2), uint32] */;
  %190 = asin(%186) /* ty=Tensor[(9, 3, 2), float64] */;
  %191 = %187.1;
  %192 = %188.0;
  (%189, %190, %191, %192)
}

def @func_3117() -> Tensor[(105), uint64] {
  %193 = @func_2548() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(7, 5, 9), float32], Tensor[(1, 315), uint32], Tensor[(105), uint64]) */;
  %193.4
}

def @func_2548() -> (Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(7, 5, 9), float32], Tensor[(1, 315), uint32], Tensor[(105), uint64]) {
  %194 = @func_1359() /* ty=(Tensor[(105), float64], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %195 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 315), uint32] */, dtype="uint32") /* ty=Tensor[(1, 315), uint32] */;
  %196 = reshape(%195, newshape=[7, 5, 9]) /* ty=Tensor[(7, 5, 9), uint32] */;
  %197 = @func_1617(%196) /* ty=(Tensor[(7, 5, 9), float32],) */;
  %198 = @func_793() /* ty=(Tensor[(105), uint64],) */;
  %199 = %194.2;
  %200 = @func_1232() /* ty=Tensor[(105), uint16] */;
  %201 = %197.0;
  %202 = %198.0;
  (%199, %200, %201, meta[relay.Constant][14] /* ty=Tensor[(1, 315), uint32] */, %202)
}

def @func_2363(%var_2226: Tensor[(5, 11, 13), float32]) -> (Tensor[(105), uint16], Tensor[(5, 11, 13), int16], Tensor[(5, 11, 13), uint8], Tensor[(5, 11, 13), float64], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(5, 11, 13), float32]) {
  %203 = @func_1866() /* ty=(Tensor[(105), uint16],) */;
  %204 = cast(%var_2226, dtype="float32") /* ty=Tensor[(5, 11, 13), float32] */;
  %205 = log10(%204) /* ty=Tensor[(5, 11, 13), float32] */;
  %206 = cast(%var_2226, dtype="float32") /* ty=Tensor[(5, 11, 13), float32] */;
  %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%205, dtype="float32") /* ty=Tensor[(5, 11, 13), float32] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %210 = floor_divide(%208, %209) /* ty=Tensor[(5, 11, 13), float32] */;
  %211 = cast(%210, dtype="float64") /* ty=Tensor[(5, 11, 13), float64] */;
  %212 = asin(%211) /* ty=Tensor[(5, 11, 13), float64] */;
  %213 = cast(%212, dtype="float32") /* ty=Tensor[(5, 11, 13), float32] */;
  %214 = sin(%213) /* ty=Tensor[(5, 11, 13), float32] */;
  %215 = cast(%212, dtype="int16") /* ty=Tensor[(5, 11, 13), int16] */;
  %216 = shape_of(%214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%214, dtype="int16") /* ty=Tensor[(5, 11, 13), int16] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %219 = cast(%var_2226, dtype="uint8") /* ty=Tensor[(5, 11, 13), uint8] */;
  %220 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%210, dtype="uint8") /* ty=Tensor[(5, 11, 13), uint8] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %223 = cast(%var_2226, dtype="float64") /* ty=Tensor[(5, 11, 13), float64] */;
  %224 = cast(%210, dtype="bool") /* ty=Tensor[(5, 11, 13), bool] */;
  %225 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%212, dtype="bool") /* ty=Tensor[(5, 11, 13), bool] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %228 = greater_equal(%226, %227) /* ty=Tensor[(5, 11, 13), bool] */;
  %229 = cast(%228, dtype="float64") /* ty=Tensor[(5, 11, 13), float64] */;
  %230 = atanh(%229) /* ty=Tensor[(5, 11, 13), float64] */;
  %231 = cast(%230, dtype="float32") /* ty=Tensor[(5, 11, 13), float32] */;
  %232 = tan(%231) /* ty=Tensor[(5, 11, 13), float32] */;
  %233 = cast(%214, dtype="int8") /* ty=Tensor[(5, 11, 13), int8] */;
  %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%232, dtype="int8") /* ty=Tensor[(5, 11, 13), int8] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %237 = logical_xor(%235, %236) /* ty=Tensor[(5, 11, 13), int8] */;
  %238 = cast(%237, dtype="float32") /* ty=Tensor[(5, 11, 13), float32] */;
  %239 = %203.0;
  %240 = right_shift(%217, %218) /* ty=Tensor[(5, 11, 13), int16] */;
  %241 = bitwise_xor(%221, %222) /* ty=Tensor[(5, 11, 13), uint8] */;
  %242 = acosh(%223) /* ty=Tensor[(5, 11, 13), float64] */;
  %243 = @func_1097() /* ty=Tensor[(105), uint64] */;
  %244 = @func_719() /* ty=Tensor[(105), uint16] */;
  %245 = atan(%238) /* ty=Tensor[(5, 11, 13), float32] */;
  (%239, %240, %241, %242, %243, %244, %245)
}

def @func_3395() -> (Tensor[(315), float32], Tensor[(20, 72), float64]) {
  %246 = @func_1972() /* ty=(Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) */;
  %247 = @func_1879() /* ty=Tensor[(315), float32] */;
  %248 = %246.1;
  (%247, %248)
}

def @func_927() -> Tensor[(105), uint16] {
  @func_891() /* ty=Tensor[(105), uint16] */
}

def @func_3514() -> (Tensor[(20, 72), float64],) {
  %249 = @func_1972() /* ty=(Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) */;
  %250 = %249.1;
  (%250,)
}

def @func_3262(%var_3209: Tensor[(10, 13, 16), float64]) -> (Tensor[(105), uint16], Tensor[(10, 13, 16), bool], Tensor[(10, 13, 16), float64], Tensor[(105), float32]) {
  %251 = cast(%var_3209, dtype="float64") /* ty=Tensor[(10, 13, 16), float64] */;
  %252 = erf(%251) /* ty=Tensor[(10, 13, 16), float64] */;
  %253 = cast(%var_3209, dtype="float32") /* ty=Tensor[(10, 13, 16), float32] */;
  %254 = cosh(%253) /* ty=Tensor[(10, 13, 16), float32] */;
  %255 = cast(%254, dtype="bool") /* ty=Tensor[(10, 13, 16), bool] */;
  %256 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%252, dtype="bool") /* ty=Tensor[(10, 13, 16), bool] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %259 = cast(%var_3209, dtype="float64") /* ty=Tensor[(10, 13, 16), float64] */;
  %260 = @func_1972() /* ty=(Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) */;
  %261 = @func_927() /* ty=Tensor[(105), uint16] */;
  %262 = logical_or(%257, %258) /* ty=Tensor[(10, 13, 16), bool] */;
  %263 = tan(%259) /* ty=Tensor[(10, 13, 16), float64] */;
  %264 = %260.5;
  (%261, %262, %263, %264)
}

def @func_4235() -> (Tensor[(105), uint64], Tensor[(720, 2), float64], Tensor[(1440), float64]) {
  %265 = @func_4020() /* ty=(Tensor[(105), uint64],) */;
  %266 = cast(meta[relay.Constant][15] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %267 = reshape(%266, newshape=[1440, 1]) /* ty=Tensor[(1440, 1), float64] */;
  %268 = @func_2105(%267) /* ty=(Tensor[(315), float32], Tensor[(9, 3, 2), uint32], Tensor[(720, 2), float64], Tensor[(1440, 1), float64]) */;
  %269 = %265.0;
  %270 = %268.2;
  (%269, %270, meta[relay.Constant][15] /* ty=Tensor[(1440), float64] */)
}

def @func_638() -> (Tensor[(5, 16, 3), float64], Tensor[(105), uint64]) {
  %271 = @func_537() /* ty=(Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) */;
  %272 = @func_608() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %273 = %272.0;
  %274 = cast(meta[relay.Constant][16] /* ty=Tensor[(105), uint16] */, dtype="uint64") /* ty=Tensor[(105), uint64] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(1), int32] */;
  %276 = cast(%273, dtype="uint64") /* ty=Tensor[(105), uint64] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %278 = %271.5;
  %279 = bitwise_or(%276, %277) /* ty=Tensor[(105), uint64] */;
  (%278, %279)
}

def @func_5605(%var_5542: Tensor[(18, 30), int8]) -> (Tensor[(315), float32], Tensor[(105), float32], Tensor[(105), uint16], Tensor[(18, 30), int16], Tensor[(105), float32], Tensor[(105), uint16], Tensor[(18, 30), uint64], Tensor[(105), uint16], Tensor[(18, 30), float32], Tensor[(315), float32]) {
  %280 = @func_3395() /* ty=(Tensor[(315), float32], Tensor[(20, 72), float64]) */;
  %281 = cast(meta[relay.Constant][17] /* ty=Tensor[(18, 30), int8] */, dtype="int8") /* ty=Tensor[(18, 30), int8] */;
  %282 = reshape(%281, newshape=[15, 9, 4]) /* ty=Tensor[(15, 9, 4), int8] */;
  %283 = @func_4712(%282) /* ty=(Tensor[(15, 9, 4), int8], Tensor[(105), uint16], Tensor[(105), float32]) */;
  %284 = @func_1685() /* ty=(Tensor[(105), uint16],) */;
  %285 = cast(%var_5542, dtype="int16") /* ty=Tensor[(18, 30), int16] */;
  %286 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(18, 30), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %287 = cast(meta[relay.Constant][17] /* ty=Tensor[(18, 30), int8] */, dtype="int16") /* ty=Tensor[(18, 30), int16] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %289 = @func_5295() /* ty=(Tensor[(105), float32],) */;
  %290 = @func_2548() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(7, 5, 9), float32], Tensor[(1, 315), uint32], Tensor[(105), uint64]) */;
  %291 = cast(meta[relay.Constant][18] /* ty=Tensor[(18, 30), int8] */, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %292 = shape_of(%var_5542, dtype="int32") /* ty=Tensor[(2), int32] */;
  %293 = cast(%var_5542, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %295 = power(%293, %294) /* ty=Tensor[(18, 30), float64] */;
  %296 = cast(%295, dtype="bool") /* ty=Tensor[(18, 30), bool] */;
  %297 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(18, 30), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %298 = cast(meta[relay.Constant][17] /* ty=Tensor[(18, 30), int8] */, dtype="bool") /* ty=Tensor[(18, 30), bool] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %300 = not_equal(%298, %299) /* ty=Tensor[(18, 30), bool] */;
  %301 = cast(%var_5542, dtype="uint64") /* ty=Tensor[(18, 30), uint64] */;
  %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(2), int32] */;
  %303 = cast(%300, dtype="uint64") /* ty=Tensor[(18, 30), uint64] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %305 = cast(%var_5542, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %306 = atan(%305) /* ty=Tensor[(18, 30), float64] */;
  %307 = cast(%306, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %308 = log2(%307) /* ty=Tensor[(18, 30), float64] */;
  %309 = cast(%308, dtype="float32") /* ty=Tensor[(18, 30), float32] */;
  %310 = %280.0;
  %311 = %283.2;
  %312 = %284.0;
  %313 = left_shift(%287, %288) /* ty=Tensor[(18, 30), int16] */;
  %314 = %289.0;
  %315 = %290.0;
  %316 = add(%303, %304) /* ty=Tensor[(18, 30), uint64] */;
  %317 = @func_4641() /* ty=Tensor[(105), uint16] */;
  %318 = sinh(%309) /* ty=Tensor[(18, 30), float32] */;
  %319 = @func_2890() /* ty=Tensor[(315), float32] */;
  (%310, %311, %312, %313, %314, %315, %316, %317, %318, %319)
}

def @func_5629(%var_5624: Tensor[(14, 15, 15), uint8], %var_5625: Tensor[(14, 15, 15), uint8]) -> (Tensor[(14, 15, 15), uint8],) {
  %320 = cast(%var_5625, dtype="uint8") /* ty=Tensor[(14, 15, 15), uint8] */;
  %321 = shape_of(%var_5624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%var_5624, dtype="uint8") /* ty=Tensor[(14, 15, 15), uint8] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %324 = right_shift(%322, %323) /* ty=Tensor[(14, 15, 15), uint8] */;
  (%324,)
}

def @func_6090(%var_6085: Tensor[(315), float32]) -> Tensor[(315), uint8] {
  %325 = @func_4507() /* ty=Tensor[(315), float32] */;
  %326 = cast(%var_6085, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %327 = shape_of(%325, dtype="int32") /* ty=Tensor[(1), int32] */;
  %328 = cast(%325, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?), uint8] */;
  add(%328, %329) /* ty=Tensor[(315), uint8] */
}

def @func_1835() -> (Tensor[(105), int32],) {
  %330 = @func_793() /* ty=(Tensor[(105), uint64],) */;
  %331 = %330.0;
  %332 = cast(meta[relay.Constant][19] /* ty=Tensor[(105), uint64] */, dtype="int32") /* ty=Tensor[(105), int32] */;
  %333 = shape_of(%331, dtype="int32") /* ty=Tensor[(1), int32] */;
  %334 = cast(%331, dtype="int32") /* ty=Tensor[(105), int32] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?), int32] */;
  %336 = maximum(%334, %335) /* ty=Tensor[(105), int32] */;
  (%336,)
}

def @func_2771() -> (Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(3, 5, 8), float32], Tensor[(120), float32], Tensor[(105), uint16]) {
  %337 = @func_1866() /* ty=(Tensor[(105), uint16],) */;
  %338 = cast(meta[relay.Constant][20] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %339 = cast(meta[relay.Constant][20] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %340 = reshape(%338, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float32] */;
  %341 = reshape(%339, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float32] */;
  %342 = @func_1866() /* ty=(Tensor[(105), uint16],) */;
  %343 = %337.0;
  %344 = @func_1097() /* ty=Tensor[(105), uint64] */;
  %345 = @func_1800(%340, %341) /* ty=Tensor[(3, 5, 8), float32] */;
  %346 = %342.0;
  (%343, %344, %345, meta[relay.Constant][20] /* ty=Tensor[(120), float32] */, %346)
}

def @func_2956() -> Tensor[(315), float32] {
  @func_2465() /* ty=Tensor[(315), float32] */
}

def @func_5974() -> Tensor[(105), uint16] {
  %347 = @func_1866() /* ty=(Tensor[(105), uint16],) */;
  %347.0
}

def @func_5684(%var_5664: Tensor[(11, 10, 2), float32]) -> (Tensor[(11, 10, 2), float32],) {
  %348 = cast(%var_5664, dtype="float32") /* ty=Tensor[(11, 10, 2), float32] */;
  %349 = sin(%348) /* ty=Tensor[(11, 10, 2), float32] */;
  %350 = cast(%349, dtype="float64") /* ty=Tensor[(11, 10, 2), float64] */;
  %351 = sinh(%350) /* ty=Tensor[(11, 10, 2), float64] */;
  %352 = cast(%351, dtype="float32") /* ty=Tensor[(11, 10, 2), float32] */;
  %353 = asin(%352) /* ty=Tensor[(11, 10, 2), float32] */;
  (%353,)
}

def @func_1866() -> (Tensor[(105), uint16],) {
  %354 = @func_927() /* ty=Tensor[(105), uint16] */;
  (%354,)
}

def @func_4193() -> (Tensor[(105), uint16],) {
  %355 = @func_719() /* ty=Tensor[(105), uint16] */;
  (%355,)
}

def @func_980(%var_965: Tensor[(720, 2), float64]) -> (Tensor[(105), float32], Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(720, 2), float64]) {
  %356 = @func_793() /* ty=(Tensor[(105), uint64],) */;
  %357 = %356.0;
  %358 = cast(%357, dtype="float32") /* ty=Tensor[(105), float32] */;
  %359 = cast(%var_965, dtype="float64") /* ty=Tensor[(720, 2), float64] */;
  %360 = reshape(%359, newshape=[12, 15, 8]) /* ty=Tensor[(12, 15, 8), float64] */;
  %361 = @func_709(%360) /* ty=(Tensor[(12, 15, 8), int8],) */;
  %362 = cast(%var_965, dtype="float64") /* ty=Tensor[(720, 2), float64] */;
  %363 = log(%358) /* ty=Tensor[(105), float32] */;
  %364 = @func_575() /* ty=Tensor[(105), uint16] */;
  %365 = %361.0;
  %366 = cos(%362) /* ty=Tensor[(720, 2), float64] */;
  (%363, %364, %365, %366)
}

def @func_4784() -> (Tensor[(105), uint16], Tensor[(315), float32]) {
  %367 = @func_4641() /* ty=Tensor[(105), uint16] */;
  %368 = @func_2890() /* ty=Tensor[(315), float32] */;
  (%367, %368)
}

def @func_5348() -> (Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(315), float32], Tensor[(315), float32]) {
  %369 = @func_4145() /* ty=(Tensor[(105), uint16],) */;
  %370 = %369.0;
  %371 = @func_927() /* ty=Tensor[(105), uint16] */;
  %372 = @func_1879() /* ty=Tensor[(315), float32] */;
  %373 = @func_2956() /* ty=Tensor[(315), float32] */;
  (%370, %371, %372, %373)
}

def @func_4328() -> (Tensor[(105), uint64], Tensor[(105), uint64]) {
  %374 = @func_793() /* ty=(Tensor[(105), uint64],) */;
  %375 = @func_4188() /* ty=(Tensor[(105), uint64],) */;
  %376 = %374.0;
  %377 = %375.0;
  (%376, %377)
}

def @func_2220(%var_2146: Tensor[(9, 3, 2), float64]) -> (Tensor[(105), uint16], Tensor[(720, 2), float64], Tensor[(9, 3, 2), bool], Tensor[(105), float32], Tensor[(315), float32], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(108, 8), bool], Tensor[(6, 16, 9), int16], Tensor[(7, 5, 9), float64], Tensor[(105), uint16]) {
  %378 = @func_1685() /* ty=(Tensor[(105), uint16],) */;
  %379 = @func_2049() /* ty=(Tensor[(9, 3, 2), uint32], Tensor[(9, 3, 2), float64], Tensor[(105), uint64], Tensor[(720, 2), float64]) */;
  %380 = @func_2049() /* ty=(Tensor[(9, 3, 2), uint32], Tensor[(9, 3, 2), float64], Tensor[(105), uint64], Tensor[(720, 2), float64]) */;
  %381 = %380.1;
  %382 = cast(%var_2146, dtype="bool") /* ty=Tensor[(9, 3, 2), bool] */;
  %383 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%381, dtype="bool") /* ty=Tensor[(9, 3, 2), bool] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %386 = %379.3;
  %387 = cast(%386, dtype="float64") /* ty=Tensor[(720, 2), float64] */;
  %388 = reshape(%387, newshape=[720, 2]) /* ty=Tensor[(720, 2), float64] */;
  %389 = @func_980(%388) /* ty=(Tensor[(105), float32], Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(720, 2), float64]) */;
  %390 = @func_1394() /* ty=(Tensor[(315), float32],) */;
  %391 = cast(meta[relay.Constant][21] /* ty=Tensor[(108, 8), bool] */, dtype="bool") /* ty=Tensor[(108, 8), bool] */;
  %392 = reshape(%391, newshape=[432, 2]) /* ty=Tensor[(432, 2), bool] */;
  %393 = @func_1318(%392) /* ty=(Tensor[(105), uint16], Tensor[(6, 16, 9), float64], Tensor[(432, 2), bool], Tensor[(15, 3, 7), uint16]) */;
  %394 = %393.1;
  %395 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 16, 9), float64] */, dtype="int16") /* ty=Tensor[(6, 16, 9), int16] */;
  %396 = shape_of(%394, dtype="int32") /* ty=Tensor[(3), int32] */;
  %397 = cast(%394, dtype="int16") /* ty=Tensor[(6, 16, 9), int16] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %399 = @func_1195() /* ty=Tensor[(315), uint16] */;
  %400 = cast(%399, dtype="uint32") /* ty=Tensor[(315), uint32] */;
  %401 = reshape(%400, newshape=[7, 5, 9]) /* ty=Tensor[(7, 5, 9), uint32] */;
  %402 = @func_1617(%401) /* ty=(Tensor[(7, 5, 9), float32],) */;
  %403 = %402.0;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %405 = %378.0;
  %406 = logical_or(%384, %385) /* ty=Tensor[(9, 3, 2), bool] */;
  %407 = %389.0;
  %408 = %390.0;
  %409 = @func_575() /* ty=Tensor[(105), uint16] */;
  %410 = right_shift(%397, %398) /* ty=Tensor[(6, 16, 9), int16] */;
  %411 = asin(%404) /* ty=Tensor[(7, 5, 9), float64] */;
  %412 = @func_927() /* ty=Tensor[(105), uint16] */;
  (%405, %386, %406, %407, %408, %409, %399, meta[relay.Constant][21] /* ty=Tensor[(108, 8), bool] */, %410, %411, %412)
}

def @func_3337() -> (Tensor[(105), uint16], Tensor[(105), uint16]) {
  %413 = @func_1866() /* ty=(Tensor[(105), uint16],) */;
  %414 = @func_719() /* ty=Tensor[(105), uint16] */;
  %415 = %413.0;
  (%414, %415)
}

def @func_5432() -> (Tensor[(105), uint16],) {
  %416 = @func_4664() /* ty=Tensor[(105), uint16] */;
  (%416,)
}

def @func_4475() -> Tensor[(8, 13, 11), float64] {
  %417 = @func_4079() /* ty=(Tensor[(8, 13, 11), float64],) */;
  %417.0
}

def @func_691(%var_680: Tensor[(3, 15, 6), float32], %var_688: Tensor[(1, 105), uint16]) -> (Tensor[(3, 15, 6), float32], Tensor[(15, 3, 7), uint16], Tensor[(1, 105), uint16], Tensor[(315), uint16]) {
  %418 = cast(%var_680, dtype="float32") /* ty=Tensor[(3, 15, 6), float32] */;
  %419 = cast(%var_688, dtype="uint16") /* ty=Tensor[(1, 105), uint16] */;
  %420 = cast(meta[relay.Constant][23] /* ty=Tensor[(315), uint16] */, dtype="uint16") /* ty=Tensor[(315), uint16] */;
  %421 = reshape(%419, newshape=[15, 1, 7]) /* ty=Tensor[(15, 1, 7), uint16] */;
  %422 = reshape(%420, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint16] */;
  %423 = @func_307(%421, %422) /* ty=(Tensor[(15, 3, 7), uint16], Tensor[(15, 1, 7), float32]) */;
  %424 = cos(%418) /* ty=Tensor[(3, 15, 6), float32] */;
  %425 = %423.0;
  (%424, %425, %var_688, meta[relay.Constant][23] /* ty=Tensor[(315), uint16] */)
}

def @func_4552(%var_4527: Tensor[(5, 16, 3), float32]) -> (Tensor[(5, 16, 3), bool], Tensor[(105), float32], Tensor[(105), bool], Tensor[(105), uint64], Tensor[(105), uint16]) {
  %426 = @func_537() /* ty=(Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) */;
  %427 = %426.0;
  %428 = cast(%var_4527, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%427, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %432 = @func_4485() /* ty=(Tensor[(105), float32],) */;
  %433 = %432.0;
  %434 = cast(%433, dtype="uint16") /* ty=Tensor[(105), uint16] */;
  %435 = reshape(%434, newshape=[105]) /* ty=Tensor[(105), uint16] */;
  %436 = @func_4328() /* ty=(Tensor[(105), uint64], Tensor[(105), uint64]) */;
  %437 = @func_1286() /* ty=(Tensor[(105), uint16],) */;
  %438 = equal(%430, %431) /* ty=Tensor[(5, 16, 3), bool] */;
  %439 = @func_4100(%435) /* ty=Tensor[(105), bool] */;
  %440 = %436.0;
  %441 = %437.0;
  (%438, %433, %439, %440, %441)
}

def @func_3163(%var_3150: Tensor[(4, 11, 10), uint8], %var_3151: Tensor[(4, 11, 10), uint8]) -> (Tensor[(4, 11, 10), bool], Tensor[(4, 11, 10), bool]) {
  %442 = cast(%var_3151, dtype="bool") /* ty=Tensor[(4, 11, 10), bool] */;
  %443 = shape_of(%var_3150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%var_3150, dtype="bool") /* ty=Tensor[(4, 11, 10), bool] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %446 = cast(%var_3150, dtype="bool") /* ty=Tensor[(4, 11, 10), bool] */;
  %447 = shape_of(%var_3151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%var_3151, dtype="bool") /* ty=Tensor[(4, 11, 10), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %450 = equal(%444, %445) /* ty=Tensor[(4, 11, 10), bool] */;
  %451 = not_equal(%448, %449) /* ty=Tensor[(4, 11, 10), bool] */;
  (%450, %451)
}

def @func_3307() -> (Tensor[(105), uint16], Tensor[(315), float32]) {
  %452 = @func_2437() /* ty=(Tensor[(315), float32], Tensor[(105), uint16]) */;
  %453 = %452.1;
  %454 = @func_2890() /* ty=Tensor[(315), float32] */;
  (%453, %454)
}

def @func_2494(%var_2487: Tensor[(5, 16, 3), float64]) -> Tensor[(5, 16, 3), float32] {
  %455 = @func_638() /* ty=(Tensor[(5, 16, 3), float64], Tensor[(105), uint64]) */;
  %456 = %455.0;
  %457 = cast(%var_2487, dtype="float32") /* ty=Tensor[(5, 16, 3), float32] */;
  %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%456, dtype="float32") /* ty=Tensor[(5, 16, 3), float32] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%459, %460) /* ty=Tensor[(5, 16, 3), float32] */
}

def @func_1394() -> (Tensor[(315), float32],) {
  %461 = @func_1186() /* ty=(Tensor[(315), float32],) */;
  %462 = %461.0;
  (%462,)
}

def @func_1438(%var_1419: Tensor[(9, 16), bool], %var_1420: Tensor[(9, 16), bool]) -> Tensor[(9, 16), bool] {
  %463 = cast(%var_1420, dtype="bool") /* ty=Tensor[(9, 16), bool] */;
  %464 = shape_of(%var_1419, dtype="int32") /* ty=Tensor[(2), int32] */;
  %465 = cast(%var_1419, dtype="bool") /* ty=Tensor[(9, 16), bool] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  logical_or(%465, %466) /* ty=Tensor[(9, 16), bool] */
}

def @func_6320() -> (Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(105), float32]) {
  %467 = @func_4188() /* ty=(Tensor[(105), uint64],) */;
  %468 = @func_2409() /* ty=(Tensor[(105), float32],) */;
  %469 = %467.0;
  %470 = @func_927() /* ty=Tensor[(105), uint16] */;
  %471 = @func_575() /* ty=Tensor[(105), uint16] */;
  %472 = %468.0;
  (%469, %470, %471, %472)
}

def @func_4567() -> (Tensor[(105), uint16], Tensor[(20, 72), float32]) {
  %473 = @func_3559() /* ty=(Tensor[(105), uint64], Tensor[(105), uint16]) */;
  %474 = @func_3514() /* ty=(Tensor[(20, 72), float64],) */;
  %475 = %474.0;
  %476 = cast(%475, dtype="float32") /* ty=Tensor[(20, 72), float32] */;
  %477 = %473.1;
  %478 = cosh(%476) /* ty=Tensor[(20, 72), float32] */;
  (%477, %478)
}

def @func_6328() -> Tensor[(105), uint64] {
  %479 = @func_4328() /* ty=(Tensor[(105), uint64], Tensor[(105), uint64]) */;
  %479.1
}

def @func_891() -> Tensor[(105), uint16] {
  @func_719() /* ty=Tensor[(105), uint16] */
}

def @func_3416() -> (Tensor[(105), uint16], Tensor[(315), float32]) {
  %480 = @func_1866() /* ty=(Tensor[(105), uint16],) */;
  %481 = %480.0;
  %482 = @func_1879() /* ty=Tensor[(315), float32] */;
  (%481, %482)
}

def @func_4145() -> (Tensor[(105), uint16],) {
  %483 = @func_2548() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(7, 5, 9), float32], Tensor[(1, 315), uint32], Tensor[(105), uint64]) */;
  %484 = %483.1;
  (%484,)
}

def @func_6468() -> (Tensor[(105), uint16],) {
  %485 = @func_891() /* ty=Tensor[(105), uint16] */;
  (%485,)
}

def @func_5944(%var_5922: Tensor[(8, 13, 11), float64]) -> (Tensor[(8, 13, 11), bool], Tensor[(105), uint64]) {
  %486 = @func_5193() /* ty=(Tensor[(8, 13, 11), float64], Tensor[(105), float64]) */;
  %487 = %486.0;
  %488 = cast(%var_5922, dtype="bool") /* ty=Tensor[(8, 13, 11), bool] */;
  %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%487, dtype="bool") /* ty=Tensor[(8, 13, 11), bool] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %492 = @func_2834() /* ty=(Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %493 = less_equal(%490, %491) /* ty=Tensor[(8, 13, 11), bool] */;
  %494 = %492.0;
  (%493, %494)
}

def @func_2105(%var_2103: Tensor[(1440, 1), float64]) -> (Tensor[(315), float32], Tensor[(9, 3, 2), uint32], Tensor[(720, 2), float64], Tensor[(1440, 1), float64]) {
  %495 = @func_2049() /* ty=(Tensor[(9, 3, 2), uint32], Tensor[(9, 3, 2), float64], Tensor[(105), uint64], Tensor[(720, 2), float64]) */;
  %496 = cast(%var_2103, dtype="float64") /* ty=Tensor[(1440, 1), float64] */;
  %497 = reshape(%496, newshape=[720, 2]) /* ty=Tensor[(720, 2), float64] */;
  %498 = @func_980(%497) /* ty=(Tensor[(105), float32], Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(720, 2), float64]) */;
  %499 = @func_1879() /* ty=Tensor[(315), float32] */;
  %500 = %495.0;
  %501 = %498.3;
  (%499, %500, %501, %var_2103)
}

def @func_5046() -> (Tensor[(105), uint16], Tensor[(105), uint16]) {
  %502 = @func_2674() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(315), float32], Tensor[(315), bool]) */;
  %503 = @func_719() /* ty=Tensor[(105), uint16] */;
  %504 = %502.0;
  (%503, %504)
}

def @func_865(%var_855: Tensor[(105), uint16]) -> (Tensor[(105), float32], Tensor[(105), float32]) {
  %505 = @func_575() /* ty=Tensor[(105), uint16] */;
  %506 = cast(%505, dtype="float32") /* ty=Tensor[(105), float32] */;
  %507 = cast(%var_855, dtype="float32") /* ty=Tensor[(105), float32] */;
  %508 = shape_of(%505, dtype="int32") /* ty=Tensor[(1), int32] */;
  %509 = cast(%505, dtype="float32") /* ty=Tensor[(105), float32] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?), float32] */;
  %511 = erf(%506) /* ty=Tensor[(105), float32] */;
  %512 = floor_divide(%509, %510) /* ty=Tensor[(105), float32] */;
  (%511, %512)
}

def @func_1359() -> (Tensor[(105), float64], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16]) {
  %513 = @func_608() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %514 = %513.0;
  %515 = cast(%514, dtype="float64") /* ty=Tensor[(105), float64] */;
  %516 = @func_1286() /* ty=(Tensor[(105), uint16],) */;
  %517 = sqrt(%515) /* ty=Tensor[(105), float64] */;
  %518 = @func_1097() /* ty=Tensor[(105), uint64] */;
  %519 = %516.0;
  %520 = @func_1232() /* ty=Tensor[(105), uint16] */;
  (%517, %518, %519, %520)
}

def @func_1559(%var_1557: Tensor[(1440), float64]) -> (Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(1440), float64]) {
  %521 = @func_1359() /* ty=(Tensor[(105), float64], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %522 = cast(%var_1557, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %523 = reshape(%522, newshape=[12, 15, 8]) /* ty=Tensor[(12, 15, 8), float64] */;
  %524 = @func_709(%523) /* ty=(Tensor[(12, 15, 8), int8],) */;
  %525 = %521.3;
  %526 = %524.0;
  (%525, %526, %var_1557)
}

def @func_3648(%var_3607: Tensor[(3, 4, 8), uint16], %var_3608: Tensor[(3, 4, 8), uint16]) -> (Tensor[(3, 4, 8), uint16], Tensor[(105), uint64], Tensor[(105), uint16]) {
  %527 = cast(%var_3608, dtype="uint16") /* ty=Tensor[(3, 4, 8), uint16] */;
  %528 = shape_of(%var_3607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %529 = cast(%var_3607, dtype="uint16") /* ty=Tensor[(3, 4, 8), uint16] */;
  %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %531 = bitwise_xor(%529, %530) /* ty=Tensor[(3, 4, 8), uint16] */;
  %532 = @func_1097() /* ty=Tensor[(105), uint64] */;
  %533 = @func_719() /* ty=Tensor[(105), uint16] */;
  (%531, %532, %533)
}

def @func_3194() -> Tensor[(105), uint16] {
  %534 = @func_1286() /* ty=(Tensor[(105), uint16],) */;
  %534.0
}

def @func_6672(%var_6582: Tensor[(315), float32], %var_6667: Tensor[(240), float64]) -> (Tensor[(105), float32], Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), int32], Tensor[(315), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float64]) {
  %535 = @func_6320() /* ty=(Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(105), float32]) */;
  %536 = @func_1719() /* ty=(Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(1440), float64], Tensor[(105), uint16]) */;
  %537 = @func_1835() /* ty=(Tensor[(105), int32],) */;
  %538 = cast(%var_6582, dtype="float32") /* ty=Tensor[(315), float32] */;
  %539 = reshape(%538, newshape=[315]) /* ty=Tensor[(315), float32] */;
  %540 = @func_6090(%539) /* ty=Tensor[(315), uint8] */;
  %541 = cast(%540, dtype="float64") /* ty=Tensor[(315), float64] */;
  %542 = tan(%541) /* ty=Tensor[(315), float64] */;
  %543 = cast(%var_6582, dtype="int32") /* ty=Tensor[(315), int32] */;
  %544 = shape_of(%540, dtype="int32") /* ty=Tensor[(1), int32] */;
  %545 = cast(%540, dtype="int32") /* ty=Tensor[(315), int32] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?), int32] */;
  %547 = bitwise_or(%545, %546) /* ty=Tensor[(315), int32] */;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(315), float32] */;
  %549 = shape_of(%542, dtype="int32") /* ty=Tensor[(1), int32] */;
  %550 = cast(%542, dtype="float32") /* ty=Tensor[(315), float32] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?), float32] */;
  %552 = cast(%var_6667, dtype="float64") /* ty=Tensor[(240), float64] */;
  %553 = reshape(%552, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float64] */;
  %554 = %535.3;
  %555 = @func_927() /* ty=Tensor[(105), uint16] */;
  %556 = @func_3117() /* ty=Tensor[(105), uint64] */;
  %557 = %536.3;
  %558 = %537.0;
  %559 = power(%550, %551) /* ty=Tensor[(315), float32] */;
  %560 = @func_2494(%553) /* ty=Tensor[(5, 16, 3), float32] */;
  (%554, %555, %556, %557, %558, %559, %560, %var_6667)
}

def @func_1186() -> (Tensor[(315), float32],) {
  %561 = @func_537() /* ty=(Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) */;
  %562 = %561.3;
  %563 = cast(%562, dtype="float32") /* ty=Tensor[(315), float32] */;
  %564 = sigmoid(%563) /* ty=Tensor[(315), float32] */;
  (%564,)
}

def @func_3102(%var_3034: Tensor[(16, 3, 16), uint32], %var_3035: Tensor[(16, 3, 16), uint32]) -> (Tensor[(105), float32], Tensor[(16, 3, 16), uint16], Tensor[(105), uint16], Tensor[(15, 1, 7), float32], Tensor[(315), uint16], Tensor[(105), uint16]) {
  %565 = @func_1972() /* ty=(Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) */;
  %566 = cast(%var_3035, dtype="uint32") /* ty=Tensor[(16, 3, 16), uint32] */;
  %567 = shape_of(%var_3034, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%var_3034, dtype="uint32") /* ty=Tensor[(16, 3, 16), uint32] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %570 = right_shift(%568, %569) /* ty=Tensor[(16, 3, 16), uint32] */;
  %571 = cast(%var_3034, dtype="uint16") /* ty=Tensor[(16, 3, 16), uint16] */;
  %572 = shape_of(%570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%570, dtype="uint16") /* ty=Tensor[(16, 3, 16), uint16] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %575 = @func_608() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %576 = %575.0;
  %577 = cast(%576, dtype="uint16") /* ty=Tensor[(105), uint16] */;
  %578 = cast(meta[relay.Constant][24] /* ty=Tensor[(315), uint16] */, dtype="uint16") /* ty=Tensor[(315), uint16] */;
  %579 = reshape(%577, newshape=[15, 1, 7]) /* ty=Tensor[(15, 1, 7), uint16] */;
  %580 = reshape(%578, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint16] */;
  %581 = @func_307(%579, %580) /* ty=(Tensor[(15, 3, 7), uint16], Tensor[(15, 1, 7), float32]) */;
  %582 = @func_1532() /* ty=(Tensor[(105), uint16],) */;
  %583 = %565.5;
  %584 = multiply(%573, %574) /* ty=Tensor[(16, 3, 16), uint16] */;
  %585 = %581.1;
  %586 = %582.0;
  (%583, %584, %576, %585, meta[relay.Constant][24] /* ty=Tensor[(315), uint16] */, %586)
}

def @func_4390(%var_4333: Tensor[(5, 16, 3), float32]) -> (Tensor[(5, 16, 3), bool], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(315), float32]) {
  %587 = @func_537() /* ty=(Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) */;
  %588 = %587.0;
  %589 = cast(%var_4333, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%588, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %593 = @func_1866() /* ty=(Tensor[(105), uint16],) */;
  %594 = @func_1972() /* ty=(Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) */;
  %595 = greater(%591, %592) /* ty=Tensor[(5, 16, 3), bool] */;
  %596 = @func_3117() /* ty=Tensor[(105), uint64] */;
  %597 = %593.0;
  %598 = @func_1097() /* ty=Tensor[(105), uint64] */;
  %599 = @func_927() /* ty=Tensor[(105), uint16] */;
  %600 = %594.3;
  (%595, %596, %597, %598, %599, %600)
}

def @func_6143() -> (Tensor[(105), uint16], Tensor[(105), uint16]) {
  %601 = @func_608() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %602 = @func_2771() /* ty=(Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(3, 5, 8), float32], Tensor[(120), float32], Tensor[(105), uint16]) */;
  %603 = %601.0;
  %604 = %602.4;
  (%603, %604)
}

def @func_6361() -> (Tensor[(105), float32], Tensor[(105), float32]) {
  %605 = @func_3963() /* ty=Tensor[(105), float32] */;
  %606 = @func_3963() /* ty=Tensor[(105), float32] */;
  (%605, %606)
}

def @func_1318(%var_1301: Tensor[(432, 2), bool]) -> (Tensor[(105), uint16], Tensor[(6, 16, 9), float64], Tensor[(432, 2), bool], Tensor[(15, 3, 7), uint16]) {
  %607 = cast(%var_1301, dtype="bool") /* ty=Tensor[(432, 2), bool] */;
  %608 = reshape(%607, newshape=[6, 16, 9]) /* ty=Tensor[(6, 16, 9), bool] */;
  %609 = @func_1143(%608) /* ty=(Tensor[(6, 16, 9), bool], Tensor[(6, 16, 9), float64]) */;
  %610 = @func_537() /* ty=(Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) */;
  %611 = @func_719() /* ty=Tensor[(105), uint16] */;
  %612 = %609.1;
  %613 = %610.4;
  (%611, %612, %var_1301, %613)
}

def @func_2834() -> (Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(105), uint16]) {
  %614 = @func_2771() /* ty=(Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(3, 5, 8), float32], Tensor[(120), float32], Tensor[(105), uint16]) */;
  %615 = @func_1719() /* ty=(Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(1440), float64], Tensor[(105), uint16]) */;
  %616 = @func_2771() /* ty=(Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(3, 5, 8), float32], Tensor[(120), float32], Tensor[(105), uint16]) */;
  %617 = %614.1;
  %618 = @func_891() /* ty=Tensor[(105), uint16] */;
  %619 = %615.0;
  %620 = %616.4;
  (%617, %618, %619, %620)
}

def @func_5095() -> (Tensor[(105), uint16],) {
  %621 = @func_719() /* ty=Tensor[(105), uint16] */;
  (%621,)
}

def @func_1532() -> (Tensor[(105), uint16],) {
  %622 = @func_927() /* ty=Tensor[(105), uint16] */;
  (%622,)
}

def @func_4485() -> (Tensor[(105), float32],) {
  %623 = @func_2409() /* ty=(Tensor[(105), float32],) */;
  %624 = %623.0;
  (%624,)
}

def @func_5501() -> (Tensor[(105), uint16], Tensor[(105), uint16]) {
  %625 = @func_3194() /* ty=Tensor[(105), uint16] */;
  %626 = @func_1232() /* ty=Tensor[(105), uint16] */;
  (%625, %626)
}

def @func_3963() -> Tensor[(105), float32] {
  %627 = @func_2409() /* ty=(Tensor[(105), float32],) */;
  %627.0
}

def @func_2437() -> (Tensor[(315), float32], Tensor[(105), uint16]) {
  %628 = @func_608() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %629 = @func_1879() /* ty=Tensor[(315), float32] */;
  %630 = %628.0;
  (%629, %630)
}

def @func_1232() -> Tensor[(105), uint16] {
  @func_575() /* ty=Tensor[(105), uint16] */
}

def @func_6742(%var_6705: Tensor[(5, 14, 10), uint64], %var_6722: Tensor[(240), float32]) -> (Tensor[(5, 14, 10), bool], Tensor[(105), uint64], Tensor[(240), float32]) {
  %631 = cast(%var_6705, dtype="bool") /* ty=Tensor[(5, 14, 10), bool] */;
  %632 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(5, 14, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 14, 10), uint64] */, dtype="bool") /* ty=Tensor[(5, 14, 10), bool] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %635 = cast(%var_6722, dtype="float32") /* ty=Tensor[(240), float32] */;
  %636 = reshape(%635, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
  %637 = @func_4390(%636) /* ty=(Tensor[(5, 16, 3), bool], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(315), float32]) */;
  %638 = greater_equal(%633, %634) /* ty=Tensor[(5, 14, 10), bool] */;
  %639 = %637.3;
  (%638, %639, %var_6722)
}

def @main() -> (Tensor[(105), float32], Tensor[(105), uint16], Tensor[(864), int8], Tensor[(6, 16, 9), bool]) {
  %640 = @func_6361() /* ty=(Tensor[(105), float32], Tensor[(105), float32]) */;
  %641 = @func_5046() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %642 = cast(meta[relay.Constant][26] /* ty=Tensor[(864), bool] */, dtype="bool") /* ty=Tensor[(864), bool] */;
  %643 = reshape(%642, newshape=[6, 16, 9]) /* ty=Tensor[(6, 16, 9), bool] */;
  %644 = @func_1143(%643) /* ty=(Tensor[(6, 16, 9), bool], Tensor[(6, 16, 9), float64]) */;
  %645 = %644.0;
  %646 = cast(%645, dtype="int8") /* ty=Tensor[(6, 16, 9), int8] */;
  %647 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(864), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %648 = cast(meta[relay.Constant][26] /* ty=Tensor[(864), bool] */, dtype="int8") /* ty=Tensor[(864), int8] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?), int8] */;
  %650 = cast(meta[relay.Constant][26] /* ty=Tensor[(864), bool] */, dtype="bool") /* ty=Tensor[(864), bool] */;
  %651 = shape_of(%645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%645, dtype="bool") /* ty=Tensor[(6, 16, 9), bool] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %654 = %640.1;
  %655 = %641.0;
  %656 = bitwise_and(%648, %649) /* ty=Tensor[(864), int8] */;
  %657 = equal(%652, %653) /* ty=Tensor[(6, 16, 9), bool] */;
  (%654, %655, %656, %657)
}

def @func_2409() -> (Tensor[(105), float32],) {
  %658 = @func_1685() /* ty=(Tensor[(105), uint16],) */;
  %659 = %658.0;
  %660 = cast(%659, dtype="float32") /* ty=Tensor[(105), float32] */;
  %661 = log2(%660) /* ty=Tensor[(105), float32] */;
  (%661,)
}

def @func_1097() -> Tensor[(105), uint64] {
  %662 = @func_793() /* ty=(Tensor[(105), uint64],) */;
  %662.0
}

def @func_6563() -> (Tensor[(315), float64],) {
  %663 = @func_2465() /* ty=Tensor[(315), float32] */;
  %664 = cast(%663, dtype="float64") /* ty=Tensor[(315), float64] */;
  %665 = cos(%664) /* ty=Tensor[(315), float64] */;
  (%665,)
}

def @func_3911(%var_3869: Tensor[(315), float32], %var_3891: Tensor[(315), float32]) -> (Tensor[(315), uint64], Tensor[(315), bool], Tensor[(105), uint16], Tensor[(315), float64], Tensor[(315), float64]) {
  %666 = @func_1879() /* ty=Tensor[(315), float32] */;
  %667 = cast(%var_3869, dtype="uint64") /* ty=Tensor[(315), uint64] */;
  %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(1), int32] */;
  %669 = cast(%666, dtype="uint64") /* ty=Tensor[(315), uint64] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %671 = cast(%var_3869, dtype="bool") /* ty=Tensor[(315), bool] */;
  %672 = shape_of(%666, dtype="int32") /* ty=Tensor[(1), int32] */;
  %673 = cast(%666, dtype="bool") /* ty=Tensor[(315), bool] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?), bool] */;
  %675 = @func_1532() /* ty=(Tensor[(105), uint16],) */;
  %676 = cast(%var_3869, dtype="float64") /* ty=Tensor[(315), float64] */;
  %677 = shape_of(%666, dtype="int32") /* ty=Tensor[(1), int32] */;
  %678 = cast(%666, dtype="float64") /* ty=Tensor[(315), float64] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?), float64] */;
  %680 = cast(%var_3891, dtype="float64") /* ty=Tensor[(315), float64] */;
  %681 = shape_of(%666, dtype="int32") /* ty=Tensor[(1), int32] */;
  %682 = cast(%666, dtype="float64") /* ty=Tensor[(315), float64] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?), float64] */;
  %684 = logical_xor(%669, %670) /* ty=Tensor[(315), uint64] */;
  %685 = not_equal(%673, %674) /* ty=Tensor[(315), bool] */;
  %686 = %675.0;
  %687 = multiply(%678, %679) /* ty=Tensor[(315), float64] */;
  %688 = floor_mod(%682, %683) /* ty=Tensor[(315), float64] */;
  (%684, %685, %686, %687, %688)
}

def @func_1719() -> (Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(1440), float64], Tensor[(105), uint16]) {
  %689 = @func_608() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %690 = cast(meta[relay.Constant][27] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %691 = reshape(%690, newshape=[12, 15, 8]) /* ty=Tensor[(12, 15, 8), float64] */;
  %692 = @func_709(%691) /* ty=(Tensor[(12, 15, 8), int8],) */;
  %693 = @func_1532() /* ty=(Tensor[(105), uint16],) */;
  %694 = %689.1;
  %695 = %692.0;
  %696 = %693.0;
  (%694, %695, meta[relay.Constant][27] /* ty=Tensor[(1440), float64] */, %696)
}

def @func_1685() -> (Tensor[(105), uint16],) {
  %697 = @func_927() /* ty=Tensor[(105), uint16] */;
  (%697,)
}

def @func_4079() -> (Tensor[(8, 13, 11), float64],) {
  %698 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 13, 11), float64] */, dtype="float64") /* ty=Tensor[(8, 13, 11), float64] */;
  %699 = log10(%698) /* ty=Tensor[(8, 13, 11), float64] */;
  (%699,)
}

def @func_4863() -> (Tensor[(105), uint16], Tensor[(105), float32], Tensor[(105), uint64]) {
  %700 = @func_608() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %701 = @func_2409() /* ty=(Tensor[(105), float32],) */;
  %702 = @func_2580() /* ty=(Tensor[(105), uint16], Tensor[(105), uint64]) */;
  %703 = %700.1;
  %704 = %701.0;
  %705 = %702.1;
  (%703, %704, %705)
}

def @func_4100(%var_4094: Tensor[(105), uint16]) -> Tensor[(105), bool] {
  %706 = @func_1232() /* ty=Tensor[(105), uint16] */;
  %707 = cast(%var_4094, dtype="bool") /* ty=Tensor[(105), bool] */;
  %708 = shape_of(%706, dtype="int32") /* ty=Tensor[(1), int32] */;
  %709 = cast(%706, dtype="bool") /* ty=Tensor[(105), bool] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?), bool] */;
  equal(%709, %710) /* ty=Tensor[(105), bool] */
}

def @func_6690() -> Tensor[(105), uint16] {
  @func_927() /* ty=Tensor[(105), uint16] */
}

def @func_1972() -> (Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) {
  %711 = cast(meta[relay.Constant][29] /* ty=Tensor[(20, 72), float64] */, dtype="float64") /* ty=Tensor[(20, 72), float64] */;
  %712 = reshape(%711, newshape=[720, 2]) /* ty=Tensor[(720, 2), float64] */;
  %713 = @func_980(%712) /* ty=(Tensor[(105), float32], Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(720, 2), float64]) */;
  %714 = @func_1186() /* ty=(Tensor[(315), float32],) */;
  %715 = %714.0;
  %716 = cast(%715, dtype="float32") /* ty=Tensor[(315), float32] */;
  %717 = log10(%716) /* ty=Tensor[(315), float32] */;
  %718 = cast(%717, dtype="float64") /* ty=Tensor[(315), float64] */;
  %719 = acos(%718) /* ty=Tensor[(315), float64] */;
  %720 = cast(%715, dtype="bool") /* ty=Tensor[(315), bool] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(1), int32] */;
  %722 = cast(%719, dtype="bool") /* ty=Tensor[(315), bool] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?), bool] */;
  %724 = logical_and(%722, %723) /* ty=Tensor[(315), bool] */;
  %725 = cast(%724, dtype="uint16") /* ty=Tensor[(315), uint16] */;
  %726 = reshape(%725, newshape=[315]) /* ty=Tensor[(315), uint16] */;
  %727 = cast(%717, dtype="float64") /* ty=Tensor[(315), float64] */;
  %728 = cosh(%727) /* ty=Tensor[(315), float64] */;
  %729 = cast(%728, dtype="float32") /* ty=Tensor[(315), float32] */;
  %730 = %713.3;
  %731 = cast(%730, dtype="float64") /* ty=Tensor[(720, 2), float64] */;
  %732 = reshape(%731, newshape=[720, 2]) /* ty=Tensor[(720, 2), float64] */;
  %733 = @func_980(%732) /* ty=(Tensor[(105), float32], Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(720, 2), float64]) */;
  %734 = @func_1500(%726) /* ty=Tensor[(315), float32] */;
  %735 = log(%729) /* ty=Tensor[(315), float32] */;
  %736 = %733.0;
  (%730, meta[relay.Constant][29] /* ty=Tensor[(20, 72), float64] */, %724, %734, %735, %736)
}

def @func_2890() -> Tensor[(315), float32] {
  %737 = @func_1394() /* ty=(Tensor[(315), float32],) */;
  %737.0
}

def @func_2580() -> (Tensor[(105), uint16], Tensor[(105), uint64]) {
  %738 = @func_1532() /* ty=(Tensor[(105), uint16],) */;
  %739 = %738.0;
  %740 = @func_1097() /* ty=Tensor[(105), uint64] */;
  (%739, %740)
}

def @func_3698() -> (Tensor[(20, 72), float64],) {
  %741 = @func_3666() /* ty=Tensor[(20, 72), float64] */;
  (%741,)
}

def @func_709(%var_700: Tensor[(12, 15, 8), float64]) -> (Tensor[(12, 15, 8), int8],) {
  %742 = cast(%var_700, dtype="float64") /* ty=Tensor[(12, 15, 8), float64] */;
  %743 = log2(%742) /* ty=Tensor[(12, 15, 8), float64] */;
  %744 = cast(%var_700, dtype="int8") /* ty=Tensor[(12, 15, 8), int8] */;
  %745 = shape_of(%743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %746 = cast(%743, dtype="int8") /* ty=Tensor[(12, 15, 8), int8] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %748 = subtract(%746, %747) /* ty=Tensor[(12, 15, 8), int8] */;
  (%748,)
}

def @func_4632(%var_4626: Tensor[(9, 8, 3), uint64]) -> (Tensor[(9, 8, 3), uint64],) {
  %749 = cast(%var_4626, dtype="uint64") /* ty=Tensor[(9, 8, 3), uint64] */;
  %750 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(9, 8, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 8, 3), uint64] */, dtype="uint64") /* ty=Tensor[(9, 8, 3), uint64] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %753 = multiply(%751, %752) /* ty=Tensor[(9, 8, 3), uint64] */;
  (%753,)
}

def @func_2674() -> (Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(315), float32], Tensor[(315), bool]) {
  %754 = @func_608() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %755 = @func_1186() /* ty=(Tensor[(315), float32],) */;
  %756 = @func_1972() /* ty=(Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) */;
  %757 = @func_891() /* ty=Tensor[(105), uint16] */;
  %758 = %754.0;
  %759 = %755.0;
  %760 = %756.2;
  (%757, %758, %759, %760)
}

def @func_1195() -> Tensor[(315), uint16] {
  %761 = @func_537() /* ty=(Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) */;
  %761.3
}

def @func_3666() -> Tensor[(20, 72), float64] {
  %762 = @func_3514() /* ty=(Tensor[(20, 72), float64],) */;
  %762.0
}

def @func_1500(%var_1492: Tensor[(315), uint16]) -> Tensor[(315), float32] {
  %763 = @func_1195() /* ty=Tensor[(315), uint16] */;
  %764 = cast(%var_1492, dtype="float32") /* ty=Tensor[(315), float32] */;
  %765 = shape_of(%763, dtype="int32") /* ty=Tensor[(1), int32] */;
  %766 = cast(%763, dtype="float32") /* ty=Tensor[(315), float32] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?), float32] */;
  divide(%766, %767) /* ty=Tensor[(315), float32] */
}

def @func_307(%var_291: Tensor[(15, 1, 7), uint16], %var_292: Tensor[(15, 3, 7), uint16]) -> (Tensor[(15, 3, 7), uint16], Tensor[(15, 1, 7), float32]) {
  %768 = cast(%var_291, dtype="uint16") /* ty=Tensor[(15, 1, 7), uint16] */;
  %769 = cast(%var_292, dtype="uint16") /* ty=Tensor[(15, 3, 7), uint16] */;
  %770 = cast(%var_291, dtype="float32") /* ty=Tensor[(15, 1, 7), float32] */;
  %771 = bitwise_and(%768, %769) /* ty=Tensor[(15, 3, 7), uint16] */;
  %772 = exp(%770) /* ty=Tensor[(15, 1, 7), float32] */;
  (%771, %772)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4190() -> (Tensor[(105), uint64],) {
  @func_4188() /* ty=(Tensor[(105), uint64],) */
}

def @func_1196() -> Tensor[(315), uint16] {
  %1 = fn () -> Tensor[(315), uint16] {
    %0 = @func_537() /* ty=(Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) */;
    %0.3
  };
  %1() /* ty=Tensor[(315), uint16] */
}

def @func_2439() -> (Tensor[(315), float32], Tensor[(105), uint16]) {
  @func_2437() /* ty=(Tensor[(315), float32], Tensor[(105), uint16]) */
}

def @func_4642() -> Tensor[(105), uint16] {
  %2 = fn () -> Tensor[(105), uint16] {
    @func_575() /* ty=Tensor[(105), uint16] */
  };
  %2() /* ty=Tensor[(105), uint16] */
}

def @func_4081() -> (Tensor[(8, 13, 11), float64],) {
  @func_4079() /* ty=(Tensor[(8, 13, 11), float64],) */
}

def @func_4712(%var_4680: Tensor[(15, 9, 4), int8]) -> (Tensor[(15, 9, 4), int8], Tensor[(105), uint16], Tensor[(105), float32]) {
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 9, 4), int8] */, dtype="int8") /* ty=Tensor[(15, 9, 4), int8] */;
  %4 = shape_of(%var_4680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%var_4680, dtype="int8") /* ty=Tensor[(15, 9, 4), int8] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %7 = @func_2834() /* ty=(Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %8 = @func_2409() /* ty=(Tensor[(105), float32],) */;
  %9 = multiply(%5, %6) /* ty=Tensor[(15, 9, 4), int8] */;
  %10 = %7.3;
  %11 = %8.0;
  (%9, %10, %11)
}

def @func_576() -> Tensor[(105), uint16] {
  %13 = fn () -> Tensor[(105), uint16] {
    %12 = @func_537() /* ty=(Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) */;
    %12.2
  };
  %13() /* ty=Tensor[(105), uint16] */
}

def @func_1620(%var_1618: Tensor[(7, 5, 9), uint32]) -> (Tensor[(7, 5, 9), float32],) {
  @func_1617(%var_1618) /* ty=(Tensor[(7, 5, 9), float32],) */
}

def @func_4328() -> (Tensor[(105), uint64], Tensor[(105), uint64]) {
  %14 = @func_793() /* ty=(Tensor[(105), uint64],) */;
  %15 = @func_4188() /* ty=(Tensor[(105), uint64],) */;
  %16 = %14.0;
  %17 = %15.0;
  (%16, %17)
}

def @func_2772() -> (Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(3, 5, 8), float32], Tensor[(120), float32], Tensor[(105), uint16]) {
  %28 = fn () -> (Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(3, 5, 8), float32], Tensor[(120), float32], Tensor[(105), uint16]) {
    %18 = @func_1866() /* ty=(Tensor[(105), uint16],) */;
    %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %21 = reshape(%19, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float32] */;
    %22 = reshape(%20, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float32] */;
    %23 = @func_1866() /* ty=(Tensor[(105), uint16],) */;
    %24 = %18.0;
    %25 = @func_1097() /* ty=Tensor[(105), uint64] */;
    %26 = @func_1800(%21, %22) /* ty=Tensor[(3, 5, 8), float32] */;
    %27 = %23.0;
    (%24, %25, %26, meta[relay.Constant][1] /* ty=Tensor[(120), float32] */, %27)
  };
  %28() /* ty=(Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(3, 5, 8), float32], Tensor[(120), float32], Tensor[(105), uint16]) */
}

def @func_3264(%var_3263: Tensor[(10, 13, 16), float64]) -> (Tensor[(105), uint16], Tensor[(10, 13, 16), bool], Tensor[(10, 13, 16), float64], Tensor[(105), float32]) {
  %43 = fn (%var_3209: Tensor[(10, 13, 16), float64]) -> (Tensor[(105), uint16], Tensor[(10, 13, 16), bool], Tensor[(10, 13, 16), float64], Tensor[(105), float32]) {
    %29 = cast(%var_3209, dtype="float64") /* ty=Tensor[(10, 13, 16), float64] */;
    %30 = erf(%29) /* ty=Tensor[(10, 13, 16), float64] */;
    %31 = cast(%var_3209, dtype="float32") /* ty=Tensor[(10, 13, 16), float32] */;
    %32 = cosh(%31) /* ty=Tensor[(10, 13, 16), float32] */;
    %33 = cast(%32, dtype="bool") /* ty=Tensor[(10, 13, 16), bool] */;
    %34 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
    %35 = cast(%30, dtype="bool") /* ty=Tensor[(10, 13, 16), bool] */;
    %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %37 = cast(%var_3209, dtype="float64") /* ty=Tensor[(10, 13, 16), float64] */;
    %38 = @func_1972() /* ty=(Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) */;
    %39 = @func_927() /* ty=Tensor[(105), uint16] */;
    %40 = logical_or(%35, %36) /* ty=Tensor[(10, 13, 16), bool] */;
    %41 = tan(%37) /* ty=Tensor[(10, 13, 16), float64] */;
    %42 = %38.5;
    (%39, %40, %41, %42)
  };
  %43(%var_3263) /* ty=(Tensor[(105), uint16], Tensor[(10, 13, 16), bool], Tensor[(10, 13, 16), float64], Tensor[(105), float32]) */
}

def @func_1533() -> (Tensor[(105), uint16],) {
  %45 = fn () -> (Tensor[(105), uint16],) {
    %44 = @func_927() /* ty=Tensor[(105), uint16] */;
    (%44,)
  };
  %45() /* ty=(Tensor[(105), uint16],) */
}

def @main() -> (Tensor[(105), float32], Tensor[(105), uint16], Tensor[(864), int8], Tensor[(6, 16, 9), bool]) {
  %46 = @func_6362() /* ty=(Tensor[(105), float32], Tensor[(105), float32]) */;
  %47 = @func_5048() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %48 = cast(meta[relay.Constant][2] /* ty=Tensor[(864), bool] */, dtype="bool") /* ty=Tensor[(864), bool] */;
  %49 = reshape(%48, newshape=[6, 16, 9]) /* ty=Tensor[(6, 16, 9), bool] */;
  %50 = @func_1145(%49) /* ty=(Tensor[(6, 16, 9), bool], Tensor[(6, 16, 9), float64]) */;
  %51 = %50.0;
  %52 = cast(%51, dtype="int8") /* ty=Tensor[(6, 16, 9), int8] */;
  %53 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(864), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %54 = cast(meta[relay.Constant][2] /* ty=Tensor[(864), bool] */, dtype="int8") /* ty=Tensor[(864), int8] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?), int8] */;
  %56 = cast(meta[relay.Constant][2] /* ty=Tensor[(864), bool] */, dtype="bool") /* ty=Tensor[(864), bool] */;
  %57 = shape_of(%51, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%51, dtype="bool") /* ty=Tensor[(6, 16, 9), bool] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %60 = %46.1;
  %61 = %47.0;
  %62 = bitwise_and(%54, %55) /* ty=Tensor[(864), int8] */;
  %63 = equal(%58, %59) /* ty=Tensor[(6, 16, 9), bool] */;
  (%60, %61, %62, %63)
}

def @func_3163(%var_3150: Tensor[(4, 11, 10), uint8], %var_3151: Tensor[(4, 11, 10), uint8]) -> (Tensor[(4, 11, 10), bool], Tensor[(4, 11, 10), bool]) {
  %64 = cast(%var_3151, dtype="bool") /* ty=Tensor[(4, 11, 10), bool] */;
  %65 = shape_of(%var_3150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%var_3150, dtype="bool") /* ty=Tensor[(4, 11, 10), bool] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %68 = cast(%var_3150, dtype="bool") /* ty=Tensor[(4, 11, 10), bool] */;
  %69 = shape_of(%var_3151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%var_3151, dtype="bool") /* ty=Tensor[(4, 11, 10), bool] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %72 = equal(%66, %67) /* ty=Tensor[(4, 11, 10), bool] */;
  %73 = not_equal(%70, %71) /* ty=Tensor[(4, 11, 10), bool] */;
  (%72, %73)
}

def @func_2105(%var_2103: Tensor[(1440, 1), float64]) -> (Tensor[(315), float32], Tensor[(9, 3, 2), uint32], Tensor[(720, 2), float64], Tensor[(1440, 1), float64]) {
  %74 = @func_2049() /* ty=(Tensor[(9, 3, 2), uint32], Tensor[(9, 3, 2), float64], Tensor[(105), uint64], Tensor[(720, 2), float64]) */;
  %75 = cast(%var_2103, dtype="float64") /* ty=Tensor[(1440, 1), float64] */;
  %76 = reshape(%75, newshape=[720, 2]) /* ty=Tensor[(720, 2), float64] */;
  %77 = @func_980(%76) /* ty=(Tensor[(105), float32], Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(720, 2), float64]) */;
  %78 = @func_1879() /* ty=Tensor[(315), float32] */;
  %79 = %74.0;
  %80 = %77.3;
  (%78, %79, %80, %var_2103)
}

def @func_5976() -> Tensor[(105), uint16] {
  @func_5974() /* ty=Tensor[(105), uint16] */
}

def @func_4103(%var_4101: Tensor[(105), uint16]) -> Tensor[(105), bool] {
  @func_4100(%var_4101) /* ty=Tensor[(105), bool] */
}

def @func_1719() -> (Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(1440), float64], Tensor[(105), uint16]) {
  %81 = @func_608() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %82 = cast(meta[relay.Constant][3] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %83 = reshape(%82, newshape=[12, 15, 8]) /* ty=Tensor[(12, 15, 8), float64] */;
  %84 = @func_709(%83) /* ty=(Tensor[(12, 15, 8), int8],) */;
  %85 = @func_1532() /* ty=(Tensor[(105), uint16],) */;
  %86 = %81.1;
  %87 = %84.0;
  %88 = %85.0;
  (%86, %87, meta[relay.Constant][3] /* ty=Tensor[(1440), float64] */, %88)
}

def @func_892() -> Tensor[(105), uint16] {
  %89 = fn () -> Tensor[(105), uint16] {
    @func_719() /* ty=Tensor[(105), uint16] */
  };
  %89() /* ty=Tensor[(105), uint16] */
}

def @func_868(%var_866: Tensor[(105), uint16]) -> (Tensor[(105), float32], Tensor[(105), float32]) {
  @func_865(%var_866) /* ty=(Tensor[(105), float32], Tensor[(105), float32]) */
}

def @func_1880() -> Tensor[(315), float32] {
  %92 = fn () -> Tensor[(315), float32] {
    %90 = @func_1195() /* ty=Tensor[(315), uint16] */;
    %91 = cast(%90, dtype="float32") /* ty=Tensor[(315), float32] */;
    exp(%91) /* ty=Tensor[(315), float32] */
  };
  %92() /* ty=Tensor[(315), float32] */
}

def @func_4485() -> (Tensor[(105), float32],) {
  %93 = @func_2409() /* ty=(Tensor[(105), float32],) */;
  %94 = %93.0;
  (%94,)
}

def @func_6330() -> Tensor[(105), uint64] {
  @func_6328() /* ty=Tensor[(105), uint64] */
}

def @func_719() -> Tensor[(105), uint16] {
  @func_575() /* ty=Tensor[(105), uint16] */
}

def @func_4021() -> (Tensor[(105), uint64],) {
  %96 = fn () -> (Tensor[(105), uint64],) {
    %95 = @func_1097() /* ty=Tensor[(105), uint64] */;
    (%95,)
  };
  %96() /* ty=(Tensor[(105), uint64],) */
}

def @func_6362() -> (Tensor[(105), float32], Tensor[(105), float32]) {
  %99 = fn () -> (Tensor[(105), float32], Tensor[(105), float32]) {
    %97 = @func_3963() /* ty=Tensor[(105), float32] */;
    %98 = @func_3963() /* ty=Tensor[(105), float32] */;
    (%97, %98)
  };
  %99() /* ty=(Tensor[(105), float32], Tensor[(105), float32]) */
}

def @func_4188() -> (Tensor[(105), uint64],) {
  %100 = @func_638() /* ty=(Tensor[(5, 16, 3), float64], Tensor[(105), uint64]) */;
  %101 = %100.1;
  (%101,)
}

def @func_3418() -> (Tensor[(105), uint16], Tensor[(315), float32]) {
  @func_3416() /* ty=(Tensor[(105), uint16], Tensor[(315), float32]) */
}

def @func_1234() -> Tensor[(105), uint16] {
  @func_1232() /* ty=Tensor[(105), uint16] */
}

def @func_5046() -> (Tensor[(105), uint16], Tensor[(105), uint16]) {
  %102 = @func_2674() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(315), float32], Tensor[(315), bool]) */;
  %103 = @func_719() /* ty=Tensor[(105), uint16] */;
  %104 = %102.0;
  (%103, %104)
}

def @func_4100(%var_4094: Tensor[(105), uint16]) -> Tensor[(105), bool] {
  %105 = @func_1232() /* ty=Tensor[(105), uint16] */;
  %106 = cast(%var_4094, dtype="bool") /* ty=Tensor[(105), bool] */;
  %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(1), int32] */;
  %108 = cast(%105, dtype="bool") /* ty=Tensor[(105), bool] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?), bool] */;
  equal(%108, %109) /* ty=Tensor[(105), bool] */
}

def @func_2581() -> (Tensor[(105), uint16], Tensor[(105), uint64]) {
  %113 = fn () -> (Tensor[(105), uint16], Tensor[(105), uint64]) {
    %110 = @func_1532() /* ty=(Tensor[(105), uint16],) */;
    %111 = %110.0;
    %112 = @func_1097() /* ty=Tensor[(105), uint64] */;
    (%111, %112)
  };
  %113() /* ty=(Tensor[(105), uint16], Tensor[(105), uint64]) */
}

def @func_4932(%var_4919: Tensor[(1440), float64]) -> (Tensor[(315), float32], Tensor[(315), float32], Tensor[(1440), float64]) {
  %114 = cast(%var_4919, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %115 = reshape(%114, newshape=[2, 720]) /* ty=Tensor[(2, 720), float64] */;
  %116 = @func_3449(%115) /* ty=(Tensor[(315), float32], Tensor[(12, 15, 8), int8], Tensor[(2, 720), float64]) */;
  %117 = @func_2890() /* ty=Tensor[(315), float32] */;
  %118 = %116.0;
  (%117, %118, %var_4919)
}

def @func_1804(%var_1802: Tensor[(3, 5, 8), float32], %var_1803: Tensor[(3, 5, 8), float32]) -> Tensor[(3, 5, 8), float32] {
  @func_1800(%var_1802, %var_1803) /* ty=Tensor[(3, 5, 8), float32] */
}

def @func_1867() -> (Tensor[(105), uint16],) {
  %120 = fn () -> (Tensor[(105), uint16],) {
    %119 = @func_927() /* ty=Tensor[(105), uint16] */;
    (%119,)
  };
  %120() /* ty=(Tensor[(105), uint16],) */
}

def @func_3308() -> (Tensor[(105), uint16], Tensor[(315), float32]) {
  %124 = fn () -> (Tensor[(105), uint16], Tensor[(315), float32]) {
    %121 = @func_2437() /* ty=(Tensor[(315), float32], Tensor[(105), uint16]) */;
    %122 = %121.1;
    %123 = @func_2890() /* ty=Tensor[(315), float32] */;
    (%122, %123)
  };
  %124() /* ty=(Tensor[(105), uint16], Tensor[(315), float32]) */
}

def @func_3416() -> (Tensor[(105), uint16], Tensor[(315), float32]) {
  %125 = @func_1866() /* ty=(Tensor[(105), uint16],) */;
  %126 = %125.0;
  %127 = @func_1879() /* ty=Tensor[(315), float32] */;
  (%126, %127)
}

def @func_2675() -> (Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(315), float32], Tensor[(315), bool]) {
  %135 = fn () -> (Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(315), float32], Tensor[(315), bool]) {
    %128 = @func_608() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
    %129 = @func_1186() /* ty=(Tensor[(315), float32],) */;
    %130 = @func_1972() /* ty=(Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) */;
    %131 = @func_891() /* ty=Tensor[(105), uint16] */;
    %132 = %128.0;
    %133 = %129.0;
    %134 = %130.2;
    (%131, %132, %133, %134)
  };
  %135() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(315), float32], Tensor[(315), bool]) */
}

def @func_1232() -> Tensor[(105), uint16] {
  @func_575() /* ty=Tensor[(105), uint16] */
}

def @func_5736() -> (Tensor[(20, 72), float64],) {
  %138 = fn () -> (Tensor[(20, 72), float64],) {
    %136 = @func_1972() /* ty=(Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) */;
    %137 = %136.1;
    (%137,)
  };
  %138() /* ty=(Tensor[(20, 72), float64],) */
}

def @func_2496(%var_2495: Tensor[(5, 16, 3), float64]) -> Tensor[(5, 16, 3), float32] {
  %145 = fn (%var_2487: Tensor[(5, 16, 3), float64]) -> Tensor[(5, 16, 3), float32] {
    %139 = @func_638() /* ty=(Tensor[(5, 16, 3), float64], Tensor[(105), uint64]) */;
    %140 = %139.0;
    %141 = cast(%var_2487, dtype="float32") /* ty=Tensor[(5, 16, 3), float32] */;
    %142 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
    %143 = cast(%140, dtype="float32") /* ty=Tensor[(5, 16, 3), float32] */;
    %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%143, %144) /* ty=Tensor[(5, 16, 3), float32] */
  };
  %145(%var_2495) /* ty=Tensor[(5, 16, 3), float32] */
}

def @func_3698() -> (Tensor[(20, 72), float64],) {
  %146 = @func_3666() /* ty=Tensor[(20, 72), float64] */;
  (%146,)
}

def @func_4785() -> (Tensor[(105), uint16], Tensor[(315), float32]) {
  %149 = fn () -> (Tensor[(105), uint16], Tensor[(315), float32]) {
    %147 = @func_4641() /* ty=Tensor[(105), uint16] */;
    %148 = @func_2890() /* ty=Tensor[(315), float32] */;
    (%147, %148)
  };
  %149() /* ty=(Tensor[(105), uint16], Tensor[(315), float32]) */
}

def @func_5073(%var_5062: Tensor[(2, 10, 9), float32]) -> (Tensor[(2, 10, 9), float32], Tensor[(9, 8, 3), uint64], Tensor[(2, 108), uint64]) {
  %150 = cast(%var_5062, dtype="float32") /* ty=Tensor[(2, 10, 9), float32] */;
  %151 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 108), uint64] */, dtype="uint64") /* ty=Tensor[(2, 108), uint64] */;
  %152 = reshape(%151, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), uint64] */;
  %153 = @func_4632(%152) /* ty=(Tensor[(9, 8, 3), uint64],) */;
  %154 = erf(%150) /* ty=Tensor[(2, 10, 9), float32] */;
  %155 = %153.0;
  (%154, %155, meta[relay.Constant][4] /* ty=Tensor[(2, 108), uint64] */)
}

def @func_6320() -> (Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(105), float32]) {
  %156 = @func_4188() /* ty=(Tensor[(105), uint64],) */;
  %157 = @func_2409() /* ty=(Tensor[(105), float32],) */;
  %158 = %156.0;
  %159 = @func_927() /* ty=Tensor[(105), uint16] */;
  %160 = @func_575() /* ty=Tensor[(105), uint16] */;
  %161 = %157.0;
  (%158, %159, %160, %161)
}

def @func_2466() -> Tensor[(315), float32] {
  %163 = fn () -> Tensor[(315), float32] {
    %162 = @func_1394() /* ty=(Tensor[(315), float32],) */;
    %162.0
  };
  %163() /* ty=Tensor[(315), float32] */
}

def @func_3451(%var_3450: Tensor[(2, 720), float64]) -> (Tensor[(315), float32], Tensor[(12, 15, 8), int8], Tensor[(2, 720), float64]) {
  %170 = fn (%var_3447: Tensor[(2, 720), float64]) -> (Tensor[(315), float32], Tensor[(12, 15, 8), int8], Tensor[(2, 720), float64]) {
    %164 = @func_2437() /* ty=(Tensor[(315), float32], Tensor[(105), uint16]) */;
    %165 = cast(%var_3447, dtype="float64") /* ty=Tensor[(2, 720), float64] */;
    %166 = reshape(%165, newshape=[12, 15, 8]) /* ty=Tensor[(12, 15, 8), float64] */;
    %167 = @func_709(%166) /* ty=(Tensor[(12, 15, 8), int8],) */;
    %168 = %164.0;
    %169 = %167.0;
    (%168, %169, %var_3447)
  };
  %170(%var_3450) /* ty=(Tensor[(315), float32], Tensor[(12, 15, 8), int8], Tensor[(2, 720), float64]) */
}

def @func_609() -> (Tensor[(105), uint16], Tensor[(105), uint16]) {
  %173 = fn () -> (Tensor[(105), uint16], Tensor[(105), uint16]) {
    %171 = @func_575() /* ty=Tensor[(105), uint16] */;
    %172 = @func_575() /* ty=Tensor[(105), uint16] */;
    (%171, %172)
  };
  %173() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */
}

def @func_6676(%var_6674: Tensor[(315), float32], %var_6675: Tensor[(240), float64]) -> (Tensor[(105), float32], Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), int32], Tensor[(315), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float64]) {
  @func_6672(%var_6674, %var_6675) /* ty=(Tensor[(105), float32], Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), int32], Tensor[(315), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float64]) */
}

def @func_6328() -> Tensor[(105), uint64] {
  %174 = @func_4328() /* ty=(Tensor[(105), uint64], Tensor[(105), uint64]) */;
  %174.1
}

def @func_4568() -> (Tensor[(105), uint16], Tensor[(20, 72), float32]) {
  %181 = fn () -> (Tensor[(105), uint16], Tensor[(20, 72), float32]) {
    %175 = @func_3559() /* ty=(Tensor[(105), uint64], Tensor[(105), uint16]) */;
    %176 = @func_3514() /* ty=(Tensor[(20, 72), float64],) */;
    %177 = %176.0;
    %178 = cast(%177, dtype="float32") /* ty=Tensor[(20, 72), float32] */;
    %179 = %175.1;
    %180 = cosh(%178) /* ty=Tensor[(20, 72), float32] */;
    (%179, %180)
  };
  %181() /* ty=(Tensor[(105), uint16], Tensor[(20, 72), float32]) */
}

def @func_1186() -> (Tensor[(315), float32],) {
  %182 = @func_537() /* ty=(Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) */;
  %183 = %182.3;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(315), float32] */;
  %185 = sigmoid(%184) /* ty=Tensor[(315), float32] */;
  (%185,)
}

def @func_5348() -> (Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(315), float32], Tensor[(315), float32]) {
  %186 = @func_4145() /* ty=(Tensor[(105), uint16],) */;
  %187 = %186.0;
  %188 = @func_927() /* ty=Tensor[(105), uint16] */;
  %189 = @func_1879() /* ty=Tensor[(315), float32] */;
  %190 = @func_2956() /* ty=Tensor[(315), float32] */;
  (%187, %188, %189, %190)
}

def @func_4665() -> Tensor[(105), uint16] {
  %192 = fn () -> Tensor[(105), uint16] {
    %191 = @func_3337() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
    %191.1
  };
  %192() /* ty=Tensor[(105), uint16] */
}

def @func_5194() -> (Tensor[(8, 13, 11), float64], Tensor[(105), float64]) {
  %203 = fn () -> (Tensor[(8, 13, 11), float64], Tensor[(105), float64]) {
    %193 = @func_2049() /* ty=(Tensor[(9, 3, 2), uint32], Tensor[(9, 3, 2), float64], Tensor[(105), uint64], Tensor[(720, 2), float64]) */;
    %194 = %193.2;
    %195 = @func_2771() /* ty=(Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(3, 5, 8), float32], Tensor[(120), float32], Tensor[(105), uint16]) */;
    %196 = %195.0;
    %197 = cast(%196, dtype="float64") /* ty=Tensor[(105), float64] */;
    %198 = shape_of(%194, dtype="int32") /* ty=Tensor[(1), int32] */;
    %199 = cast(%194, dtype="float64") /* ty=Tensor[(105), float64] */;
    %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?), float64] */;
    %201 = @func_4475() /* ty=Tensor[(8, 13, 11), float64] */;
    %202 = add(%199, %200) /* ty=Tensor[(105), float64] */;
    (%201, %202)
  };
  %203() /* ty=(Tensor[(8, 13, 11), float64], Tensor[(105), float64]) */
}

def @func_5296() -> (Tensor[(105), float32],) {
  %205 = fn () -> (Tensor[(105), float32],) {
    %204 = @func_3963() /* ty=Tensor[(105), float32] */;
    (%204,)
  };
  %205() /* ty=(Tensor[(105), float32],) */
}

def @func_4635(%var_4633: Tensor[(9, 8, 3), uint64]) -> (Tensor[(9, 8, 3), uint64],) {
  @func_4632(%var_4633) /* ty=(Tensor[(9, 8, 3), uint64],) */
}

def @func_310(%var_308: Tensor[(15, 1, 7), uint16], %var_309: Tensor[(15, 3, 7), uint16]) -> (Tensor[(15, 3, 7), uint16], Tensor[(15, 1, 7), float32]) {
  %211 = fn (%var_291: Tensor[(15, 1, 7), uint16], %var_292: Tensor[(15, 3, 7), uint16]) -> (Tensor[(15, 3, 7), uint16], Tensor[(15, 1, 7), float32]) {
    %206 = cast(%var_291, dtype="uint16") /* ty=Tensor[(15, 1, 7), uint16] */;
    %207 = cast(%var_292, dtype="uint16") /* ty=Tensor[(15, 3, 7), uint16] */;
    %208 = cast(%var_291, dtype="float32") /* ty=Tensor[(15, 1, 7), float32] */;
    %209 = bitwise_and(%206, %207) /* ty=Tensor[(15, 3, 7), uint16] */;
    %210 = exp(%208) /* ty=Tensor[(15, 1, 7), float32] */;
    (%209, %210)
  };
  %211(%var_308, %var_309) /* ty=(Tensor[(15, 3, 7), uint16], Tensor[(15, 1, 7), float32]) */
}

def @func_983(%var_981: Tensor[(720, 2), float64]) -> (Tensor[(105), float32], Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(720, 2), float64]) {
  @func_980(%var_981) /* ty=(Tensor[(105), float32], Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(720, 2), float64]) */
}

def @func_2108(%var_2106: Tensor[(1440, 1), float64]) -> (Tensor[(315), float32], Tensor[(9, 3, 2), uint32], Tensor[(720, 2), float64], Tensor[(1440, 1), float64]) {
  @func_2105(%var_2106) /* ty=(Tensor[(315), float32], Tensor[(9, 3, 2), uint32], Tensor[(720, 2), float64], Tensor[(1440, 1), float64]) */
}

def @func_3338() -> (Tensor[(105), uint16], Tensor[(105), uint16]) {
  %215 = fn () -> (Tensor[(105), uint16], Tensor[(105), uint16]) {
    %212 = @func_1866() /* ty=(Tensor[(105), uint16],) */;
    %213 = @func_719() /* ty=Tensor[(105), uint16] */;
    %214 = %212.0;
    (%213, %214)
  };
  %215() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */
}

def @func_4730() -> (Tensor[(105), uint16], Tensor[(105), int32]) {
  %219 = fn () -> (Tensor[(105), uint16], Tensor[(105), int32]) {
    %216 = @func_1835() /* ty=(Tensor[(105), int32],) */;
    %217 = @func_891() /* ty=Tensor[(105), uint16] */;
    %218 = %216.0;
    (%217, %218)
  };
  %219() /* ty=(Tensor[(105), uint16], Tensor[(105), int32]) */
}

def @func_5076(%var_5074: Tensor[(2, 10, 9), float32]) -> (Tensor[(2, 10, 9), float32], Tensor[(9, 8, 3), uint64], Tensor[(2, 108), uint64]) {
  @func_5073(%var_5074) /* ty=(Tensor[(2, 10, 9), float32], Tensor[(9, 8, 3), uint64], Tensor[(2, 108), uint64]) */
}

def @func_5250() -> (Tensor[(105), uint64], Tensor[(5, 16, 3), float64]) {
  %220 = @func_3559() /* ty=(Tensor[(105), uint64], Tensor[(105), uint16]) */;
  %221 = @func_638() /* ty=(Tensor[(5, 16, 3), float64], Tensor[(105), uint64]) */;
  %222 = %220.0;
  %223 = %221.0;
  (%222, %223)
}

def @func_5633(%var_5631: Tensor[(14, 15, 15), uint8], %var_5632: Tensor[(14, 15, 15), uint8]) -> (Tensor[(14, 15, 15), uint8],) {
  @func_5629(%var_5631, %var_5632) /* ty=(Tensor[(14, 15, 15), uint8],) */
}

def @func_5096() -> (Tensor[(105), uint16],) {
  %225 = fn () -> (Tensor[(105), uint16],) {
    %224 = @func_719() /* ty=Tensor[(105), uint16] */;
    (%224,)
  };
  %225() /* ty=(Tensor[(105), uint16],) */
}

def @func_4863() -> (Tensor[(105), uint16], Tensor[(105), float32], Tensor[(105), uint64]) {
  %226 = @func_608() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %227 = @func_2409() /* ty=(Tensor[(105), float32],) */;
  %228 = @func_2580() /* ty=(Tensor[(105), uint16], Tensor[(105), uint64]) */;
  %229 = %226.1;
  %230 = %227.0;
  %231 = %228.1;
  (%229, %230, %231)
}

def @func_3667() -> Tensor[(20, 72), float64] {
  %233 = fn () -> Tensor[(20, 72), float64] {
    %232 = @func_3514() /* ty=(Tensor[(20, 72), float64],) */;
    %232.0
  };
  %233() /* ty=Tensor[(20, 72), float64] */
}

def @func_2365(%var_2364: Tensor[(5, 11, 13), float32]) -> (Tensor[(105), uint16], Tensor[(5, 11, 13), int16], Tensor[(5, 11, 13), uint8], Tensor[(5, 11, 13), float64], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(5, 11, 13), float32]) {
  %277 = fn (%var_2226: Tensor[(5, 11, 13), float32]) -> (Tensor[(105), uint16], Tensor[(5, 11, 13), int16], Tensor[(5, 11, 13), uint8], Tensor[(5, 11, 13), float64], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(5, 11, 13), float32]) {
    %234 = @func_1866() /* ty=(Tensor[(105), uint16],) */;
    %235 = cast(%var_2226, dtype="float32") /* ty=Tensor[(5, 11, 13), float32] */;
    %236 = log10(%235) /* ty=Tensor[(5, 11, 13), float32] */;
    %237 = cast(%var_2226, dtype="float32") /* ty=Tensor[(5, 11, 13), float32] */;
    %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
    %239 = cast(%236, dtype="float32") /* ty=Tensor[(5, 11, 13), float32] */;
    %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %241 = floor_divide(%239, %240) /* ty=Tensor[(5, 11, 13), float32] */;
    %242 = cast(%241, dtype="float64") /* ty=Tensor[(5, 11, 13), float64] */;
    %243 = asin(%242) /* ty=Tensor[(5, 11, 13), float64] */;
    %244 = cast(%243, dtype="float32") /* ty=Tensor[(5, 11, 13), float32] */;
    %245 = sin(%244) /* ty=Tensor[(5, 11, 13), float32] */;
    %246 = cast(%243, dtype="int16") /* ty=Tensor[(5, 11, 13), int16] */;
    %247 = shape_of(%245, dtype="int32") /* ty=Tensor[(3), int32] */;
    %248 = cast(%245, dtype="int16") /* ty=Tensor[(5, 11, 13), int16] */;
    %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %250 = cast(%var_2226, dtype="uint8") /* ty=Tensor[(5, 11, 13), uint8] */;
    %251 = shape_of(%241, dtype="int32") /* ty=Tensor[(3), int32] */;
    %252 = cast(%241, dtype="uint8") /* ty=Tensor[(5, 11, 13), uint8] */;
    %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %254 = cast(%var_2226, dtype="float64") /* ty=Tensor[(5, 11, 13), float64] */;
    %255 = cast(%241, dtype="bool") /* ty=Tensor[(5, 11, 13), bool] */;
    %256 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
    %257 = cast(%243, dtype="bool") /* ty=Tensor[(5, 11, 13), bool] */;
    %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %259 = greater_equal(%257, %258) /* ty=Tensor[(5, 11, 13), bool] */;
    %260 = cast(%259, dtype="float64") /* ty=Tensor[(5, 11, 13), float64] */;
    %261 = atanh(%260) /* ty=Tensor[(5, 11, 13), float64] */;
    %262 = cast(%261, dtype="float32") /* ty=Tensor[(5, 11, 13), float32] */;
    %263 = tan(%262) /* ty=Tensor[(5, 11, 13), float32] */;
    %264 = cast(%245, dtype="int8") /* ty=Tensor[(5, 11, 13), int8] */;
    %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
    %266 = cast(%263, dtype="int8") /* ty=Tensor[(5, 11, 13), int8] */;
    %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %268 = logical_xor(%266, %267) /* ty=Tensor[(5, 11, 13), int8] */;
    %269 = cast(%268, dtype="float32") /* ty=Tensor[(5, 11, 13), float32] */;
    %270 = %234.0;
    %271 = right_shift(%248, %249) /* ty=Tensor[(5, 11, 13), int16] */;
    %272 = bitwise_xor(%252, %253) /* ty=Tensor[(5, 11, 13), uint8] */;
    %273 = acosh(%254) /* ty=Tensor[(5, 11, 13), float64] */;
    %274 = @func_1097() /* ty=Tensor[(105), uint64] */;
    %275 = @func_719() /* ty=Tensor[(105), uint16] */;
    %276 = atan(%269) /* ty=Tensor[(5, 11, 13), float32] */;
    (%270, %271, %272, %273, %274, %275, %276)
  };
  %277(%var_2364) /* ty=(Tensor[(105), uint16], Tensor[(5, 11, 13), int16], Tensor[(5, 11, 13), uint8], Tensor[(5, 11, 13), float64], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(5, 11, 13), float32]) */
}

def @func_5897(%var_5895: Tensor[(105), uint16], %var_5896: Tensor[(700), float32]) -> (Tensor[(105), float64], Tensor[(105), bool], Tensor[(10, 10, 7), float64], Tensor[(70), float64], Tensor[(3, 4, 8), uint16], Tensor[(96), uint16], Tensor[(12, 15, 8), int8], Tensor[(1440), float64], Tensor[(105), float32], Tensor[(315), float32], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), uint16], Tensor[(105), float64], Tensor[(700), uint64]) {
  %323 = fn (%var_5764: Tensor[(105), uint16], %var_5822: Tensor[(700), float32]) -> (Tensor[(105), float64], Tensor[(105), bool], Tensor[(10, 10, 7), float64], Tensor[(70), float64], Tensor[(3, 4, 8), uint16], Tensor[(96), uint16], Tensor[(12, 15, 8), int8], Tensor[(1440), float64], Tensor[(105), float32], Tensor[(315), float32], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), uint16], Tensor[(105), float64], Tensor[(700), uint64]) {
    %278 = @func_5193() /* ty=(Tensor[(8, 13, 11), float64], Tensor[(105), float64]) */;
    %279 = @func_3416() /* ty=(Tensor[(105), uint16], Tensor[(315), float32]) */;
    %280 = %279.0;
    %281 = cast(%var_5764, dtype="bool") /* ty=Tensor[(105), bool] */;
    %282 = shape_of(%280, dtype="int32") /* ty=Tensor[(1), int32] */;
    %283 = cast(%280, dtype="bool") /* ty=Tensor[(105), bool] */;
    %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?), bool] */;
    %285 = cast(meta[relay.Constant][5] /* ty=Tensor[(70), float64] */, dtype="float64") /* ty=Tensor[(70), float64] */;
    %286 = cast(meta[relay.Constant][6] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
    %287 = reshape(%285, newshape=[1, 10, 7]) /* ty=Tensor[(1, 10, 7), float64] */;
    %288 = reshape(%286, newshape=[10, 10, 7]) /* ty=Tensor[(10, 10, 7), float64] */;
    %289 = @func_5373(%287, %288) /* ty=(Tensor[(10, 10, 7), float64],) */;
    %290 = cast(meta[relay.Constant][7] /* ty=Tensor[(96), uint16] */, dtype="uint16") /* ty=Tensor[(96), uint16] */;
    %291 = cast(meta[relay.Constant][7] /* ty=Tensor[(96), uint16] */, dtype="uint16") /* ty=Tensor[(96), uint16] */;
    %292 = reshape(%290, newshape=[3, 4, 8]) /* ty=Tensor[(3, 4, 8), uint16] */;
    %293 = reshape(%291, newshape=[3, 4, 8]) /* ty=Tensor[(3, 4, 8), uint16] */;
    %294 = @func_3648(%292, %293) /* ty=(Tensor[(3, 4, 8), uint16], Tensor[(105), uint64], Tensor[(105), uint16]) */;
    %295 = cast(meta[relay.Constant][8] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
    %296 = reshape(%295, newshape=[12, 15, 8]) /* ty=Tensor[(12, 15, 8), float64] */;
    %297 = @func_709(%296) /* ty=(Tensor[(12, 15, 8), int8],) */;
    %298 = @func_4863() /* ty=(Tensor[(105), uint16], Tensor[(105), float32], Tensor[(105), uint64]) */;
    %299 = @func_5193() /* ty=(Tensor[(8, 13, 11), float64], Tensor[(105), float64]) */;
    %300 = cast(meta[relay.Constant][6] /* ty=Tensor[(700), float64] */, dtype="float32") /* ty=Tensor[(700), float32] */;
    %301 = acosh(%300) /* ty=Tensor[(700), float32] */;
    %302 = cast(%var_5822, dtype="float64") /* ty=Tensor[(700), float64] */;
    %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(1), int32] */;
    %304 = cast(%301, dtype="float64") /* ty=Tensor[(700), float64] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?), float64] */;
    %306 = floor_mod(%304, %305) /* ty=Tensor[(700), float64] */;
    %307 = cast(%301, dtype="uint64") /* ty=Tensor[(700), uint64] */;
    %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(1), int32] */;
    %309 = cast(%306, dtype="uint64") /* ty=Tensor[(700), uint64] */;
    %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %311 = %278.1;
    %312 = logical_and(%283, %284) /* ty=Tensor[(105), bool] */;
    %313 = %289.0;
    %314 = %294.0;
    %315 = %297.0;
    %316 = %298.1;
    %317 = @func_2890() /* ty=Tensor[(315), float32] */;
    %318 = @func_2956() /* ty=Tensor[(315), float32] */;
    %319 = @func_1879() /* ty=Tensor[(315), float32] */;
    %320 = @func_4641() /* ty=Tensor[(105), uint16] */;
    %321 = %299.1;
    %322 = left_shift(%309, %310) /* ty=Tensor[(700), uint64] */;
    (%311, %312, %313, meta[relay.Constant][5] /* ty=Tensor[(70), float64] */, %314, meta[relay.Constant][7] /* ty=Tensor[(96), uint16] */, %315, meta[relay.Constant][8] /* ty=Tensor[(1440), float64] */, %316, %317, %318, %319, %320, %321, %322)
  };
  %323(%var_5895, %var_5896) /* ty=(Tensor[(105), float64], Tensor[(105), bool], Tensor[(10, 10, 7), float64], Tensor[(70), float64], Tensor[(3, 4, 8), uint16], Tensor[(96), uint16], Tensor[(12, 15, 8), int8], Tensor[(1440), float64], Tensor[(105), float32], Tensor[(315), float32], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), uint16], Tensor[(105), float64], Tensor[(700), uint64]) */
}

def @func_2411() -> (Tensor[(105), float32],) {
  @func_2409() /* ty=(Tensor[(105), float32],) */
}

def @func_3652(%var_3650: Tensor[(3, 4, 8), uint16], %var_3651: Tensor[(3, 4, 8), uint16]) -> (Tensor[(3, 4, 8), uint16], Tensor[(105), uint64], Tensor[(105), uint16]) {
  @func_3648(%var_3650, %var_3651) /* ty=(Tensor[(3, 4, 8), uint16], Tensor[(105), uint64], Tensor[(105), uint16]) */
}

def @func_1394() -> (Tensor[(315), float32],) {
  %324 = @func_1186() /* ty=(Tensor[(315), float32],) */;
  %325 = %324.0;
  (%325,)
}

def @func_5252() -> (Tensor[(105), uint64], Tensor[(5, 16, 3), float64]) {
  @func_5250() /* ty=(Tensor[(105), uint64], Tensor[(5, 16, 3), float64]) */
}

def @func_6322() -> (Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(105), float32]) {
  @func_6320() /* ty=(Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(105), float32]) */
}

def @func_4235() -> (Tensor[(105), uint64], Tensor[(720, 2), float64], Tensor[(1440), float64]) {
  %326 = @func_4020() /* ty=(Tensor[(105), uint64],) */;
  %327 = cast(meta[relay.Constant][9] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %328 = reshape(%327, newshape=[1440, 1]) /* ty=Tensor[(1440, 1), float64] */;
  %329 = @func_2105(%328) /* ty=(Tensor[(315), float32], Tensor[(9, 3, 2), uint32], Tensor[(720, 2), float64], Tensor[(1440, 1), float64]) */;
  %330 = %326.0;
  %331 = %329.2;
  (%330, %331, meta[relay.Constant][9] /* ty=Tensor[(1440), float64] */)
}

def @func_1800(%var_1795: Tensor[(3, 5, 8), float32], %var_1796: Tensor[(3, 5, 8), float32]) -> Tensor[(3, 5, 8), float32] {
  %332 = cast(%var_1796, dtype="float32") /* ty=Tensor[(3, 5, 8), float32] */;
  %333 = shape_of(%var_1795, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%var_1795, dtype="float32") /* ty=Tensor[(3, 5, 8), float32] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%334, %335) /* ty=Tensor[(3, 5, 8), float32] */
}

def @func_6691() -> Tensor[(105), uint16] {
  %336 = fn () -> Tensor[(105), uint16] {
    @func_927() /* ty=Tensor[(105), uint16] */
  };
  %336() /* ty=Tensor[(105), uint16] */
}

def @func_1836() -> (Tensor[(105), int32],) {
  %344 = fn () -> (Tensor[(105), int32],) {
    %337 = @func_793() /* ty=(Tensor[(105), uint64],) */;
    %338 = %337.0;
    %339 = cast(meta[relay.Constant][10] /* ty=Tensor[(105), uint64] */, dtype="int32") /* ty=Tensor[(105), int32] */;
    %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(1), int32] */;
    %341 = cast(%338, dtype="int32") /* ty=Tensor[(105), int32] */;
    %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?), int32] */;
    %343 = maximum(%341, %342) /* ty=Tensor[(105), int32] */;
    (%343,)
  };
  %344() /* ty=(Tensor[(105), int32],) */
}

def @func_3119() -> Tensor[(105), uint64] {
  @func_3117() /* ty=Tensor[(105), uint64] */
}

def @func_5629(%var_5624: Tensor[(14, 15, 15), uint8], %var_5625: Tensor[(14, 15, 15), uint8]) -> (Tensor[(14, 15, 15), uint8],) {
  %345 = cast(%var_5625, dtype="uint8") /* ty=Tensor[(14, 15, 15), uint8] */;
  %346 = shape_of(%var_5624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%var_5624, dtype="uint8") /* ty=Tensor[(14, 15, 15), uint8] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %349 = right_shift(%347, %348) /* ty=Tensor[(14, 15, 15), uint8] */;
  (%349,)
}

def @func_5502() -> (Tensor[(105), uint16], Tensor[(105), uint16]) {
  %352 = fn () -> (Tensor[(105), uint16], Tensor[(105), uint16]) {
    %350 = @func_3194() /* ty=Tensor[(105), uint16] */;
    %351 = @func_1232() /* ty=Tensor[(105), uint16] */;
    (%350, %351)
  };
  %352() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */
}

def @func_3117() -> Tensor[(105), uint64] {
  %353 = @func_2548() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(7, 5, 9), float32], Tensor[(1, 315), uint32], Tensor[(105), uint64]) */;
  %353.4
}

def @func_6564() -> (Tensor[(315), float64],) {
  %357 = fn () -> (Tensor[(315), float64],) {
    %354 = @func_2465() /* ty=Tensor[(315), float32] */;
    %355 = cast(%354, dtype="float64") /* ty=Tensor[(315), float64] */;
    %356 = cos(%355) /* ty=Tensor[(315), float64] */;
    (%356,)
  };
  %357() /* ty=(Tensor[(315), float64],) */
}

def @func_2549() -> (Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(7, 5, 9), float32], Tensor[(1, 315), uint32], Tensor[(105), uint64]) {
  %367 = fn () -> (Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(7, 5, 9), float32], Tensor[(1, 315), uint32], Tensor[(105), uint64]) {
    %358 = @func_1359() /* ty=(Tensor[(105), float64], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16]) */;
    %359 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 315), uint32] */, dtype="uint32") /* ty=Tensor[(1, 315), uint32] */;
    %360 = reshape(%359, newshape=[7, 5, 9]) /* ty=Tensor[(7, 5, 9), uint32] */;
    %361 = @func_1617(%360) /* ty=(Tensor[(7, 5, 9), float32],) */;
    %362 = @func_793() /* ty=(Tensor[(105), uint64],) */;
    %363 = %358.2;
    %364 = @func_1232() /* ty=Tensor[(105), uint16] */;
    %365 = %361.0;
    %366 = %362.0;
    (%363, %364, %365, meta[relay.Constant][11] /* ty=Tensor[(1, 315), uint32] */, %366)
  };
  %367() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(7, 5, 9), float32], Tensor[(1, 315), uint32], Tensor[(105), uint64]) */
}

def @func_6672(%var_6582: Tensor[(315), float32], %var_6667: Tensor[(240), float64]) -> (Tensor[(105), float32], Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), int32], Tensor[(315), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float64]) {
  %368 = @func_6320() /* ty=(Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(105), float32]) */;
  %369 = @func_1719() /* ty=(Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(1440), float64], Tensor[(105), uint16]) */;
  %370 = @func_1835() /* ty=(Tensor[(105), int32],) */;
  %371 = cast(%var_6582, dtype="float32") /* ty=Tensor[(315), float32] */;
  %372 = reshape(%371, newshape=[315]) /* ty=Tensor[(315), float32] */;
  %373 = @func_6090(%372) /* ty=Tensor[(315), uint8] */;
  %374 = cast(%373, dtype="float64") /* ty=Tensor[(315), float64] */;
  %375 = tan(%374) /* ty=Tensor[(315), float64] */;
  %376 = cast(%var_6582, dtype="int32") /* ty=Tensor[(315), int32] */;
  %377 = shape_of(%373, dtype="int32") /* ty=Tensor[(1), int32] */;
  %378 = cast(%373, dtype="int32") /* ty=Tensor[(315), int32] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?), int32] */;
  %380 = bitwise_or(%378, %379) /* ty=Tensor[(315), int32] */;
  %381 = cast(%380, dtype="float32") /* ty=Tensor[(315), float32] */;
  %382 = shape_of(%375, dtype="int32") /* ty=Tensor[(1), int32] */;
  %383 = cast(%375, dtype="float32") /* ty=Tensor[(315), float32] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?), float32] */;
  %385 = cast(%var_6667, dtype="float64") /* ty=Tensor[(240), float64] */;
  %386 = reshape(%385, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float64] */;
  %387 = %368.3;
  %388 = @func_927() /* ty=Tensor[(105), uint16] */;
  %389 = @func_3117() /* ty=Tensor[(105), uint64] */;
  %390 = %369.3;
  %391 = %370.0;
  %392 = power(%383, %384) /* ty=Tensor[(315), float32] */;
  %393 = @func_2494(%386) /* ty=Tensor[(5, 16, 3), float32] */;
  (%387, %388, %389, %390, %391, %392, %393, %var_6667)
}

def @func_5488() -> (Tensor[(20, 72), float64],) {
  %396 = fn () -> (Tensor[(20, 72), float64],) {
    %394 = @func_3514() /* ty=(Tensor[(20, 72), float64],) */;
    %395 = %394.0;
    (%395,)
  };
  %396() /* ty=(Tensor[(20, 72), float64],) */
}

def @func_3648(%var_3607: Tensor[(3, 4, 8), uint16], %var_3608: Tensor[(3, 4, 8), uint16]) -> (Tensor[(3, 4, 8), uint16], Tensor[(105), uint64], Tensor[(105), uint16]) {
  %397 = cast(%var_3608, dtype="uint16") /* ty=Tensor[(3, 4, 8), uint16] */;
  %398 = shape_of(%var_3607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%var_3607, dtype="uint16") /* ty=Tensor[(3, 4, 8), uint16] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %401 = bitwise_xor(%399, %400) /* ty=Tensor[(3, 4, 8), uint16] */;
  %402 = @func_1097() /* ty=Tensor[(105), uint64] */;
  %403 = @func_719() /* ty=Tensor[(105), uint16] */;
  (%401, %402, %403)
}

def @func_6093(%var_6091: Tensor[(315), float32]) -> Tensor[(315), uint8] {
  @func_6090(%var_6091) /* ty=Tensor[(315), uint8] */
}

def @func_1617(%var_1579: Tensor[(7, 5, 9), uint32]) -> (Tensor[(7, 5, 9), float32],) {
  %404 = cast(%var_1579, dtype="uint32") /* ty=Tensor[(7, 5, 9), uint32] */;
  %405 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(7, 5, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 5, 9), uint32] */, dtype="uint32") /* ty=Tensor[(7, 5, 9), uint32] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %408 = maximum(%406, %407) /* ty=Tensor[(7, 5, 9), uint32] */;
  %409 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 5, 9), uint32] */, dtype="uint16") /* ty=Tensor[(7, 5, 9), uint16] */;
  %410 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%408, dtype="uint16") /* ty=Tensor[(7, 5, 9), uint16] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %413 = bitwise_xor(%411, %412) /* ty=Tensor[(7, 5, 9), uint16] */;
  %414 = cast(%var_1579, dtype="float32") /* ty=Tensor[(7, 5, 9), float32] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="float32") /* ty=Tensor[(7, 5, 9), float32] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %418 = power(%416, %417) /* ty=Tensor[(7, 5, 9), float32] */;
  (%418,)
}

def @func_1098() -> Tensor[(105), uint64] {
  %420 = fn () -> Tensor[(105), uint64] {
    %419 = @func_793() /* ty=(Tensor[(105), uint64],) */;
    %419.0
  };
  %420() /* ty=Tensor[(105), uint64] */
}

def @func_4154() -> Tensor[(315), float32] {
  %421 = @func_3307() /* ty=(Tensor[(105), uint16], Tensor[(315), float32]) */;
  %421.1
}

def @func_3194() -> Tensor[(105), uint16] {
  %422 = @func_1286() /* ty=(Tensor[(105), uint16],) */;
  %422.0
}

def @func_1288() -> (Tensor[(105), uint16],) {
  @func_1286() /* ty=(Tensor[(105), uint16],) */
}

def @func_1559(%var_1557: Tensor[(1440), float64]) -> (Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(1440), float64]) {
  %423 = @func_1359() /* ty=(Tensor[(105), float64], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %424 = cast(%var_1557, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %425 = reshape(%424, newshape=[12, 15, 8]) /* ty=Tensor[(12, 15, 8), float64] */;
  %426 = @func_709(%425) /* ty=(Tensor[(12, 15, 8), int8],) */;
  %427 = %423.3;
  %428 = %426.0;
  (%427, %428, %var_1557)
}

def @func_4554(%var_4553: Tensor[(5, 16, 3), float32]) -> (Tensor[(5, 16, 3), bool], Tensor[(105), float32], Tensor[(105), bool], Tensor[(105), uint64], Tensor[(105), uint16]) {
  %445 = fn (%var_4527: Tensor[(5, 16, 3), float32]) -> (Tensor[(5, 16, 3), bool], Tensor[(105), float32], Tensor[(105), bool], Tensor[(105), uint64], Tensor[(105), uint16]) {
    %429 = @func_537() /* ty=(Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) */;
    %430 = %429.0;
    %431 = cast(%var_4527, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
    %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
    %433 = cast(%430, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
    %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %435 = @func_4485() /* ty=(Tensor[(105), float32],) */;
    %436 = %435.0;
    %437 = cast(%436, dtype="uint16") /* ty=Tensor[(105), uint16] */;
    %438 = reshape(%437, newshape=[105]) /* ty=Tensor[(105), uint16] */;
    %439 = @func_4328() /* ty=(Tensor[(105), uint64], Tensor[(105), uint64]) */;
    %440 = @func_1286() /* ty=(Tensor[(105), uint16],) */;
    %441 = equal(%433, %434) /* ty=Tensor[(5, 16, 3), bool] */;
    %442 = @func_4100(%438) /* ty=Tensor[(105), bool] */;
    %443 = %439.0;
    %444 = %440.0;
    (%441, %436, %442, %443, %444)
  };
  %445(%var_4553) /* ty=(Tensor[(5, 16, 3), bool], Tensor[(105), float32], Tensor[(105), bool], Tensor[(105), uint64], Tensor[(105), uint16]) */
}

def @func_2891() -> Tensor[(315), float32] {
  %447 = fn () -> Tensor[(315), float32] {
    %446 = @func_1394() /* ty=(Tensor[(315), float32],) */;
    %446.0
  };
  %447() /* ty=Tensor[(315), float32] */
}

def @func_3196() -> Tensor[(105), uint16] {
  @func_3194() /* ty=Tensor[(105), uint16] */
}

def @func_2437() -> (Tensor[(315), float32], Tensor[(105), uint16]) {
  %448 = @func_608() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %449 = @func_1879() /* ty=Tensor[(315), float32] */;
  %450 = %448.0;
  (%449, %450)
}

def @func_1503(%var_1501: Tensor[(315), uint16]) -> Tensor[(315), float32] {
  @func_1500(%var_1501) /* ty=Tensor[(315), float32] */
}

def @func_538() -> (Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) {
  %469 = fn () -> (Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) {
    %451 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 16, 3), float32] */, dtype="float32") /* ty=Tensor[(5, 16, 3), float32] */;
    %452 = cast(meta[relay.Constant][14] /* ty=Tensor[(105), uint16] */, dtype="uint16") /* ty=Tensor[(105), uint16] */;
    %453 = cast(meta[relay.Constant][15] /* ty=Tensor[(315), uint16] */, dtype="uint16") /* ty=Tensor[(315), uint16] */;
    %454 = reshape(%452, newshape=[15, 1, 7]) /* ty=Tensor[(15, 1, 7), uint16] */;
    %455 = reshape(%453, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint16] */;
    %456 = @func_307(%454, %455) /* ty=(Tensor[(15, 3, 7), uint16], Tensor[(15, 1, 7), float32]) */;
    %457 = cast(meta[relay.Constant][14] /* ty=Tensor[(105), uint16] */, dtype="uint16") /* ty=Tensor[(105), uint16] */;
    %458 = %456.0;
    %459 = cast(%458, dtype="uint16") /* ty=Tensor[(15, 3, 7), uint16] */;
    %460 = reshape(%457, newshape=[15, 1, 7]) /* ty=Tensor[(15, 1, 7), uint16] */;
    %461 = reshape(%459, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint16] */;
    %462 = @func_307(%460, %461) /* ty=(Tensor[(15, 3, 7), uint16], Tensor[(15, 1, 7), float32]) */;
    %463 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 16, 3), float32] */, dtype="float64") /* ty=Tensor[(5, 16, 3), float64] */;
    %464 = log(%463) /* ty=Tensor[(5, 16, 3), float64] */;
    %465 = cast(%464, dtype="float64") /* ty=Tensor[(5, 16, 3), float64] */;
    %466 = exp(%451) /* ty=Tensor[(5, 16, 3), float32] */;
    %467 = %462.0;
    %468 = log2(%465) /* ty=Tensor[(5, 16, 3), float64] */;
    (%466, %458, meta[relay.Constant][14] /* ty=Tensor[(105), uint16] */, meta[relay.Constant][15] /* ty=Tensor[(315), uint16] */, %467, %468)
  };
  %469() /* ty=(Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) */
}

def @func_1359() -> (Tensor[(105), float64], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16]) {
  %470 = @func_608() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
  %471 = %470.0;
  %472 = cast(%471, dtype="float64") /* ty=Tensor[(105), float64] */;
  %473 = @func_1286() /* ty=(Tensor[(105), uint16],) */;
  %474 = sqrt(%472) /* ty=Tensor[(105), float64] */;
  %475 = @func_1097() /* ty=Tensor[(105), uint64] */;
  %476 = %473.0;
  %477 = @func_1232() /* ty=Tensor[(105), uint16] */;
  (%474, %475, %476, %477)
}

def @func_4935(%var_4933: Tensor[(1440), float64]) -> (Tensor[(315), float32], Tensor[(315), float32], Tensor[(1440), float64]) {
  @func_4932(%var_4933) /* ty=(Tensor[(315), float32], Tensor[(315), float32], Tensor[(1440), float64]) */
}

def @func_2222(%var_2221: Tensor[(9, 3, 2), float64]) -> (Tensor[(105), uint16], Tensor[(720, 2), float64], Tensor[(9, 3, 2), bool], Tensor[(105), float32], Tensor[(315), float32], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(108, 8), bool], Tensor[(6, 16, 9), int16], Tensor[(7, 5, 9), float64], Tensor[(105), uint16]) {
  %513 = fn (%var_2146: Tensor[(9, 3, 2), float64]) -> (Tensor[(105), uint16], Tensor[(720, 2), float64], Tensor[(9, 3, 2), bool], Tensor[(105), float32], Tensor[(315), float32], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(108, 8), bool], Tensor[(6, 16, 9), int16], Tensor[(7, 5, 9), float64], Tensor[(105), uint16]) {
    %478 = @func_1685() /* ty=(Tensor[(105), uint16],) */;
    %479 = @func_2049() /* ty=(Tensor[(9, 3, 2), uint32], Tensor[(9, 3, 2), float64], Tensor[(105), uint64], Tensor[(720, 2), float64]) */;
    %480 = @func_2049() /* ty=(Tensor[(9, 3, 2), uint32], Tensor[(9, 3, 2), float64], Tensor[(105), uint64], Tensor[(720, 2), float64]) */;
    %481 = %480.1;
    %482 = cast(%var_2146, dtype="bool") /* ty=Tensor[(9, 3, 2), bool] */;
    %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
    %484 = cast(%481, dtype="bool") /* ty=Tensor[(9, 3, 2), bool] */;
    %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %486 = %479.3;
    %487 = cast(%486, dtype="float64") /* ty=Tensor[(720, 2), float64] */;
    %488 = reshape(%487, newshape=[720, 2]) /* ty=Tensor[(720, 2), float64] */;
    %489 = @func_980(%488) /* ty=(Tensor[(105), float32], Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(720, 2), float64]) */;
    %490 = @func_1394() /* ty=(Tensor[(315), float32],) */;
    %491 = cast(meta[relay.Constant][16] /* ty=Tensor[(108, 8), bool] */, dtype="bool") /* ty=Tensor[(108, 8), bool] */;
    %492 = reshape(%491, newshape=[432, 2]) /* ty=Tensor[(432, 2), bool] */;
    %493 = @func_1318(%492) /* ty=(Tensor[(105), uint16], Tensor[(6, 16, 9), float64], Tensor[(432, 2), bool], Tensor[(15, 3, 7), uint16]) */;
    %494 = %493.1;
    %495 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 16, 9), float64] */, dtype="int16") /* ty=Tensor[(6, 16, 9), int16] */;
    %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
    %497 = cast(%494, dtype="int16") /* ty=Tensor[(6, 16, 9), int16] */;
    %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %499 = @func_1195() /* ty=Tensor[(315), uint16] */;
    %500 = cast(%499, dtype="uint32") /* ty=Tensor[(315), uint32] */;
    %501 = reshape(%500, newshape=[7, 5, 9]) /* ty=Tensor[(7, 5, 9), uint32] */;
    %502 = @func_1617(%501) /* ty=(Tensor[(7, 5, 9), float32],) */;
    %503 = %502.0;
    %504 = cast(%503, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
    %505 = %478.0;
    %506 = logical_or(%484, %485) /* ty=Tensor[(9, 3, 2), bool] */;
    %507 = %489.0;
    %508 = %490.0;
    %509 = @func_575() /* ty=Tensor[(105), uint16] */;
    %510 = right_shift(%497, %498) /* ty=Tensor[(6, 16, 9), int16] */;
    %511 = asin(%504) /* ty=Tensor[(7, 5, 9), float64] */;
    %512 = @func_927() /* ty=Tensor[(105), uint16] */;
    (%505, %486, %506, %507, %508, %509, %499, meta[relay.Constant][16] /* ty=Tensor[(108, 8), bool] */, %510, %511, %512)
  };
  %513(%var_2221) /* ty=(Tensor[(105), uint16], Tensor[(720, 2), float64], Tensor[(9, 3, 2), bool], Tensor[(105), float32], Tensor[(315), float32], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(108, 8), bool], Tensor[(6, 16, 9), int16], Tensor[(7, 5, 9), float64], Tensor[(105), uint16]) */
}

def @func_1562(%var_1560: Tensor[(1440), float64]) -> (Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(1440), float64]) {
  @func_1559(%var_1560) /* ty=(Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(1440), float64]) */
}

def @func_711(%var_710: Tensor[(12, 15, 8), float64]) -> (Tensor[(12, 15, 8), int8],) {
  %521 = fn (%var_700: Tensor[(12, 15, 8), float64]) -> (Tensor[(12, 15, 8), int8],) {
    %514 = cast(%var_700, dtype="float64") /* ty=Tensor[(12, 15, 8), float64] */;
    %515 = log2(%514) /* ty=Tensor[(12, 15, 8), float64] */;
    %516 = cast(%var_700, dtype="int8") /* ty=Tensor[(12, 15, 8), int8] */;
    %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
    %518 = cast(%515, dtype="int8") /* ty=Tensor[(12, 15, 8), int8] */;
    %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %520 = subtract(%518, %519) /* ty=Tensor[(12, 15, 8), int8] */;
    (%520,)
  };
  %521(%var_710) /* ty=(Tensor[(12, 15, 8), int8],) */
}

def @func_5312(%var_5310: Tensor[(12, 15, 12), int64], %var_5311: Tensor[(12, 15, 12), int64]) -> Tensor[(12, 15, 12), int64] {
  %526 = fn (%var_5304: Tensor[(12, 15, 12), int64], %var_5305: Tensor[(12, 15, 12), int64]) -> Tensor[(12, 15, 12), int64] {
    %522 = cast(%var_5305, dtype="int64") /* ty=Tensor[(12, 15, 12), int64] */;
    %523 = shape_of(%var_5304, dtype="int32") /* ty=Tensor[(3), int32] */;
    %524 = cast(%var_5304, dtype="int64") /* ty=Tensor[(12, 15, 12), int64] */;
    %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    bitwise_and(%524, %525) /* ty=Tensor[(12, 15, 12), int64] */
  };
  %526(%var_5310, %var_5311) /* ty=Tensor[(12, 15, 12), int64] */
}

def @func_865(%var_855: Tensor[(105), uint16]) -> (Tensor[(105), float32], Tensor[(105), float32]) {
  %527 = @func_575() /* ty=Tensor[(105), uint16] */;
  %528 = cast(%527, dtype="float32") /* ty=Tensor[(105), float32] */;
  %529 = cast(%var_855, dtype="float32") /* ty=Tensor[(105), float32] */;
  %530 = shape_of(%527, dtype="int32") /* ty=Tensor[(1), int32] */;
  %531 = cast(%527, dtype="float32") /* ty=Tensor[(105), float32] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?), float32] */;
  %533 = erf(%528) /* ty=Tensor[(105), float32] */;
  %534 = floor_divide(%531, %532) /* ty=Tensor[(105), float32] */;
  (%533, %534)
}

def @func_5974() -> Tensor[(105), uint16] {
  %535 = @func_1866() /* ty=(Tensor[(105), uint16],) */;
  %535.0
}

def @func_4865() -> (Tensor[(105), uint16], Tensor[(105), float32], Tensor[(105), uint64]) {
  @func_4863() /* ty=(Tensor[(105), uint16], Tensor[(105), float32], Tensor[(105), uint64]) */
}

def @func_721() -> Tensor[(105), uint16] {
  @func_719() /* ty=Tensor[(105), uint16] */
}

def @func_4156() -> Tensor[(315), float32] {
  @func_4154() /* ty=Tensor[(315), float32] */
}

def @func_1361() -> (Tensor[(105), float64], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16]) {
  @func_1359() /* ty=(Tensor[(105), float64], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16]) */
}

def @func_3396() -> (Tensor[(315), float32], Tensor[(20, 72), float64]) {
  %539 = fn () -> (Tensor[(315), float32], Tensor[(20, 72), float64]) {
    %536 = @func_1972() /* ty=(Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) */;
    %537 = @func_1879() /* ty=Tensor[(315), float32] */;
    %538 = %536.1;
    (%537, %538)
  };
  %539() /* ty=(Tensor[(315), float32], Tensor[(20, 72), float64]) */
}

def @func_639() -> (Tensor[(5, 16, 3), float64], Tensor[(105), uint64]) {
  %549 = fn () -> (Tensor[(5, 16, 3), float64], Tensor[(105), uint64]) {
    %540 = @func_537() /* ty=(Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) */;
    %541 = @func_608() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
    %542 = %541.0;
    %543 = cast(meta[relay.Constant][18] /* ty=Tensor[(105), uint16] */, dtype="uint64") /* ty=Tensor[(105), uint64] */;
    %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(1), int32] */;
    %545 = cast(%542, dtype="uint64") /* ty=Tensor[(105), uint64] */;
    %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %547 = %540.5;
    %548 = bitwise_or(%545, %546) /* ty=Tensor[(105), uint64] */;
    (%547, %548)
  };
  %549() /* ty=(Tensor[(5, 16, 3), float64], Tensor[(105), uint64]) */
}

def @func_6031() -> (Tensor[(105), uint16], Tensor[(315), float32]) {
  %554 = fn () -> (Tensor[(105), uint16], Tensor[(315), float32]) {
    %550 = @func_2771() /* ty=(Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(3, 5, 8), float32], Tensor[(120), float32], Tensor[(105), uint16]) */;
    %551 = @func_1186() /* ty=(Tensor[(315), float32],) */;
    %552 = %550.0;
    %553 = %551.0;
    (%552, %553)
  };
  %554() /* ty=(Tensor[(105), uint16], Tensor[(315), float32]) */
}

def @func_5605(%var_5542: Tensor[(18, 30), int8]) -> (Tensor[(315), float32], Tensor[(105), float32], Tensor[(105), uint16], Tensor[(18, 30), int16], Tensor[(105), float32], Tensor[(105), uint16], Tensor[(18, 30), uint64], Tensor[(105), uint16], Tensor[(18, 30), float32], Tensor[(315), float32]) {
  %555 = @func_3395() /* ty=(Tensor[(315), float32], Tensor[(20, 72), float64]) */;
  %556 = cast(meta[relay.Constant][19] /* ty=Tensor[(18, 30), int8] */, dtype="int8") /* ty=Tensor[(18, 30), int8] */;
  %557 = reshape(%556, newshape=[15, 9, 4]) /* ty=Tensor[(15, 9, 4), int8] */;
  %558 = @func_4712(%557) /* ty=(Tensor[(15, 9, 4), int8], Tensor[(105), uint16], Tensor[(105), float32]) */;
  %559 = @func_1685() /* ty=(Tensor[(105), uint16],) */;
  %560 = cast(%var_5542, dtype="int16") /* ty=Tensor[(18, 30), int16] */;
  %561 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(18, 30), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %562 = cast(meta[relay.Constant][19] /* ty=Tensor[(18, 30), int8] */, dtype="int16") /* ty=Tensor[(18, 30), int16] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %564 = @func_5295() /* ty=(Tensor[(105), float32],) */;
  %565 = @func_2548() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(7, 5, 9), float32], Tensor[(1, 315), uint32], Tensor[(105), uint64]) */;
  %566 = cast(meta[relay.Constant][20] /* ty=Tensor[(18, 30), int8] */, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %567 = shape_of(%var_5542, dtype="int32") /* ty=Tensor[(2), int32] */;
  %568 = cast(%var_5542, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %570 = power(%568, %569) /* ty=Tensor[(18, 30), float64] */;
  %571 = cast(%570, dtype="bool") /* ty=Tensor[(18, 30), bool] */;
  %572 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(18, 30), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %573 = cast(meta[relay.Constant][19] /* ty=Tensor[(18, 30), int8] */, dtype="bool") /* ty=Tensor[(18, 30), bool] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %575 = not_equal(%573, %574) /* ty=Tensor[(18, 30), bool] */;
  %576 = cast(%var_5542, dtype="uint64") /* ty=Tensor[(18, 30), uint64] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(2), int32] */;
  %578 = cast(%575, dtype="uint64") /* ty=Tensor[(18, 30), uint64] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %580 = cast(%var_5542, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %581 = atan(%580) /* ty=Tensor[(18, 30), float64] */;
  %582 = cast(%581, dtype="float64") /* ty=Tensor[(18, 30), float64] */;
  %583 = log2(%582) /* ty=Tensor[(18, 30), float64] */;
  %584 = cast(%583, dtype="float32") /* ty=Tensor[(18, 30), float32] */;
  %585 = %555.0;
  %586 = %558.2;
  %587 = %559.0;
  %588 = left_shift(%562, %563) /* ty=Tensor[(18, 30), int16] */;
  %589 = %564.0;
  %590 = %565.0;
  %591 = add(%578, %579) /* ty=Tensor[(18, 30), uint64] */;
  %592 = @func_4641() /* ty=Tensor[(105), uint16] */;
  %593 = sinh(%584) /* ty=Tensor[(18, 30), float32] */;
  %594 = @func_2890() /* ty=Tensor[(315), float32] */;
  (%585, %586, %587, %588, %589, %590, %591, %592, %593, %594)
}

def @func_5479() -> (Tensor[(315), int8], Tensor[(8, 13, 11), float64]) {
  @func_5477() /* ty=(Tensor[(315), int8], Tensor[(8, 13, 11), float64]) */
}

def @func_4194() -> (Tensor[(105), uint16],) {
  %596 = fn () -> (Tensor[(105), uint16],) {
    %595 = @func_719() /* ty=Tensor[(105), uint16] */;
    (%595,)
  };
  %596() /* ty=(Tensor[(105), uint16],) */
}

def @func_1687() -> (Tensor[(105), uint16],) {
  @func_1685() /* ty=(Tensor[(105), uint16],) */
}

def @func_3559() -> (Tensor[(105), uint64], Tensor[(105), uint16]) {
  %597 = @func_1097() /* ty=Tensor[(105), uint64] */;
  %598 = @func_3194() /* ty=Tensor[(105), uint16] */;
  (%597, %598)
}

def @func_5048() -> (Tensor[(105), uint16], Tensor[(105), uint16]) {
  @func_5046() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */
}

def @func_4330() -> (Tensor[(105), uint64], Tensor[(105), uint64]) {
  @func_4328() /* ty=(Tensor[(105), uint64], Tensor[(105), uint64]) */
}

def @func_6468() -> (Tensor[(105), uint16],) {
  %599 = @func_891() /* ty=Tensor[(105), uint16] */;
  (%599,)
}

def @func_6745(%var_6743: Tensor[(5, 14, 10), uint64], %var_6744: Tensor[(240), float32]) -> (Tensor[(5, 14, 10), bool], Tensor[(105), uint64], Tensor[(240), float32]) {
  %609 = fn (%var_6705: Tensor[(5, 14, 10), uint64], %var_6722: Tensor[(240), float32]) -> (Tensor[(5, 14, 10), bool], Tensor[(105), uint64], Tensor[(240), float32]) {
    %600 = cast(%var_6705, dtype="bool") /* ty=Tensor[(5, 14, 10), bool] */;
    %601 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(5, 14, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %602 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 14, 10), uint64] */, dtype="bool") /* ty=Tensor[(5, 14, 10), bool] */;
    %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %604 = cast(%var_6722, dtype="float32") /* ty=Tensor[(240), float32] */;
    %605 = reshape(%604, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
    %606 = @func_4390(%605) /* ty=(Tensor[(5, 16, 3), bool], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(315), float32]) */;
    %607 = greater_equal(%602, %603) /* ty=Tensor[(5, 14, 10), bool] */;
    %608 = %606.3;
    (%607, %608, %var_6722)
  };
  %609(%var_6743, %var_6744) /* ty=(Tensor[(5, 14, 10), bool], Tensor[(105), uint64], Tensor[(240), float32]) */
}

def @func_4146() -> (Tensor[(105), uint16],) {
  %612 = fn () -> (Tensor[(105), uint16],) {
    %610 = @func_2548() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(7, 5, 9), float32], Tensor[(1, 315), uint32], Tensor[(105), uint64]) */;
    %611 = %610.1;
    (%611,)
  };
  %612() /* ty=(Tensor[(105), uint16],) */
}

def @func_5373(%var_5366: Tensor[(1, 10, 7), float64], %var_5367: Tensor[(10, 10, 7), float64]) -> (Tensor[(10, 10, 7), float64],) {
  %613 = cast(%var_5366, dtype="float64") /* ty=Tensor[(1, 10, 7), float64] */;
  %614 = cast(%var_5367, dtype="float64") /* ty=Tensor[(10, 10, 7), float64] */;
  %615 = add(%613, %614) /* ty=Tensor[(10, 10, 7), float64] */;
  (%615,)
}

def @func_5946(%var_5945: Tensor[(8, 13, 11), float64]) -> (Tensor[(8, 13, 11), bool], Tensor[(105), uint64]) {
  %625 = fn (%var_5922: Tensor[(8, 13, 11), float64]) -> (Tensor[(8, 13, 11), bool], Tensor[(105), uint64]) {
    %616 = @func_5193() /* ty=(Tensor[(8, 13, 11), float64], Tensor[(105), float64]) */;
    %617 = %616.0;
    %618 = cast(%var_5922, dtype="bool") /* ty=Tensor[(8, 13, 11), bool] */;
    %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
    %620 = cast(%617, dtype="bool") /* ty=Tensor[(8, 13, 11), bool] */;
    %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %622 = @func_2834() /* ty=(Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(105), uint16]) */;
    %623 = less_equal(%620, %621) /* ty=Tensor[(8, 13, 11), bool] */;
    %624 = %622.0;
    (%623, %624)
  };
  %625(%var_5945) /* ty=(Tensor[(8, 13, 11), bool], Tensor[(105), uint64]) */
}

def @func_1973() -> (Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) {
  %652 = fn () -> (Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) {
    %626 = cast(meta[relay.Constant][22] /* ty=Tensor[(20, 72), float64] */, dtype="float64") /* ty=Tensor[(20, 72), float64] */;
    %627 = reshape(%626, newshape=[720, 2]) /* ty=Tensor[(720, 2), float64] */;
    %628 = @func_980(%627) /* ty=(Tensor[(105), float32], Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(720, 2), float64]) */;
    %629 = @func_1186() /* ty=(Tensor[(315), float32],) */;
    %630 = %629.0;
    %631 = cast(%630, dtype="float32") /* ty=Tensor[(315), float32] */;
    %632 = log10(%631) /* ty=Tensor[(315), float32] */;
    %633 = cast(%632, dtype="float64") /* ty=Tensor[(315), float64] */;
    %634 = acos(%633) /* ty=Tensor[(315), float64] */;
    %635 = cast(%630, dtype="bool") /* ty=Tensor[(315), bool] */;
    %636 = shape_of(%634, dtype="int32") /* ty=Tensor[(1), int32] */;
    %637 = cast(%634, dtype="bool") /* ty=Tensor[(315), bool] */;
    %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?), bool] */;
    %639 = logical_and(%637, %638) /* ty=Tensor[(315), bool] */;
    %640 = cast(%639, dtype="uint16") /* ty=Tensor[(315), uint16] */;
    %641 = reshape(%640, newshape=[315]) /* ty=Tensor[(315), uint16] */;
    %642 = cast(%632, dtype="float64") /* ty=Tensor[(315), float64] */;
    %643 = cosh(%642) /* ty=Tensor[(315), float64] */;
    %644 = cast(%643, dtype="float32") /* ty=Tensor[(315), float32] */;
    %645 = %628.3;
    %646 = cast(%645, dtype="float64") /* ty=Tensor[(720, 2), float64] */;
    %647 = reshape(%646, newshape=[720, 2]) /* ty=Tensor[(720, 2), float64] */;
    %648 = @func_980(%647) /* ty=(Tensor[(105), float32], Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(720, 2), float64]) */;
    %649 = @func_1500(%641) /* ty=Tensor[(315), float32] */;
    %650 = log(%644) /* ty=Tensor[(315), float32] */;
    %651 = %648.0;
    (%645, meta[relay.Constant][22] /* ty=Tensor[(20, 72), float64] */, %639, %649, %650, %651)
  };
  %652() /* ty=(Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) */
}

def @func_4715(%var_4713: Tensor[(15, 9, 4), int8]) -> (Tensor[(15, 9, 4), int8], Tensor[(105), uint16], Tensor[(105), float32]) {
  @func_4712(%var_4713) /* ty=(Tensor[(15, 9, 4), int8], Tensor[(105), uint16], Tensor[(105), float32]) */
}

def @func_2957() -> Tensor[(315), float32] {
  %653 = fn () -> Tensor[(315), float32] {
    @func_2465() /* ty=Tensor[(315), float32] */
  };
  %653() /* ty=Tensor[(315), float32] */
}

def @func_3167(%var_3165: Tensor[(4, 11, 10), uint8], %var_3166: Tensor[(4, 11, 10), uint8]) -> (Tensor[(4, 11, 10), bool], Tensor[(4, 11, 10), bool]) {
  @func_3163(%var_3165, %var_3166) /* ty=(Tensor[(4, 11, 10), bool], Tensor[(4, 11, 10), bool]) */
}

def @func_1396() -> (Tensor[(315), float32],) {
  @func_1394() /* ty=(Tensor[(315), float32],) */
}

def @func_1441(%var_1439: Tensor[(9, 16), bool], %var_1440: Tensor[(9, 16), bool]) -> Tensor[(9, 16), bool] {
  %658 = fn (%var_1419: Tensor[(9, 16), bool], %var_1420: Tensor[(9, 16), bool]) -> Tensor[(9, 16), bool] {
    %654 = cast(%var_1420, dtype="bool") /* ty=Tensor[(9, 16), bool] */;
    %655 = shape_of(%var_1419, dtype="int32") /* ty=Tensor[(2), int32] */;
    %656 = cast(%var_1419, dtype="bool") /* ty=Tensor[(9, 16), bool] */;
    %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    logical_or(%656, %657) /* ty=Tensor[(9, 16), bool] */
  };
  %658(%var_1439, %var_1440) /* ty=Tensor[(9, 16), bool] */
}

def @func_6470() -> (Tensor[(105), uint16],) {
  @func_6468() /* ty=(Tensor[(105), uint16],) */
}

def @func_5608(%var_5606: Tensor[(18, 30), int8]) -> (Tensor[(315), float32], Tensor[(105), float32], Tensor[(105), uint16], Tensor[(18, 30), int16], Tensor[(105), float32], Tensor[(105), uint16], Tensor[(18, 30), uint64], Tensor[(105), uint16], Tensor[(18, 30), float32], Tensor[(315), float32]) {
  @func_5605(%var_5606) /* ty=(Tensor[(315), float32], Tensor[(105), float32], Tensor[(105), uint16], Tensor[(18, 30), int16], Tensor[(105), float32], Tensor[(105), uint16], Tensor[(18, 30), uint64], Tensor[(105), uint16], Tensor[(18, 30), float32], Tensor[(315), float32]) */
}

def @func_3700() -> (Tensor[(20, 72), float64],) {
  @func_3698() /* ty=(Tensor[(20, 72), float64],) */
}

def @func_1286() -> (Tensor[(105), uint16],) {
  %659 = @func_927() /* ty=Tensor[(105), uint16] */;
  (%659,)
}

def @func_6394() -> Tensor[(105), uint64] {
  @func_6392() /* ty=Tensor[(105), uint64] */
}

def @func_3515() -> (Tensor[(20, 72), float64],) {
  %662 = fn () -> (Tensor[(20, 72), float64],) {
    %660 = @func_1972() /* ty=(Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) */;
    %661 = %660.1;
    (%661,)
  };
  %662() /* ty=(Tensor[(20, 72), float64],) */
}

def @func_6392() -> Tensor[(105), uint64] {
  %663 = @func_793() /* ty=(Tensor[(105), uint64],) */;
  %663.0
}

def @func_794() -> (Tensor[(105), uint64],) {
  %666 = fn () -> (Tensor[(105), uint64],) {
    %664 = @func_638() /* ty=(Tensor[(5, 16, 3), float64], Tensor[(105), uint64]) */;
    %665 = %664.1;
    (%665,)
  };
  %666() /* ty=(Tensor[(105), uint64],) */
}

def @func_4237() -> (Tensor[(105), uint64], Tensor[(720, 2), float64], Tensor[(1440), float64]) {
  @func_4235() /* ty=(Tensor[(105), uint64], Tensor[(720, 2), float64], Tensor[(1440), float64]) */
}

def @func_2409() -> (Tensor[(105), float32],) {
  %667 = @func_1685() /* ty=(Tensor[(105), uint16],) */;
  %668 = %667.0;
  %669 = cast(%668, dtype="float32") /* ty=Tensor[(105), float32] */;
  %670 = log2(%669) /* ty=Tensor[(105), float32] */;
  (%670,)
}

def @func_695(%var_693: Tensor[(3, 15, 6), float32], %var_694: Tensor[(1, 105), uint16]) -> (Tensor[(3, 15, 6), float32], Tensor[(15, 3, 7), uint16], Tensor[(1, 105), uint16], Tensor[(315), uint16]) {
  @func_691(%var_693, %var_694) /* ty=(Tensor[(3, 15, 6), float32], Tensor[(15, 3, 7), uint16], Tensor[(1, 105), uint16], Tensor[(315), uint16]) */
}

def @func_3561() -> (Tensor[(105), uint64], Tensor[(105), uint16]) {
  @func_3559() /* ty=(Tensor[(105), uint64], Tensor[(105), uint16]) */
}

def @func_4477() -> Tensor[(8, 13, 11), float64] {
  @func_4475() /* ty=Tensor[(8, 13, 11), float64] */
}

def @func_980(%var_965: Tensor[(720, 2), float64]) -> (Tensor[(105), float32], Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(720, 2), float64]) {
  %671 = @func_793() /* ty=(Tensor[(105), uint64],) */;
  %672 = %671.0;
  %673 = cast(%672, dtype="float32") /* ty=Tensor[(105), float32] */;
  %674 = cast(%var_965, dtype="float64") /* ty=Tensor[(720, 2), float64] */;
  %675 = reshape(%674, newshape=[12, 15, 8]) /* ty=Tensor[(12, 15, 8), float64] */;
  %676 = @func_709(%675) /* ty=(Tensor[(12, 15, 8), int8],) */;
  %677 = cast(%var_965, dtype="float64") /* ty=Tensor[(720, 2), float64] */;
  %678 = log(%673) /* ty=Tensor[(105), float32] */;
  %679 = @func_575() /* ty=Tensor[(105), uint16] */;
  %680 = %676.0;
  %681 = cos(%677) /* ty=Tensor[(720, 2), float64] */;
  (%678, %679, %680, %681)
}

def @func_3914(%var_3912: Tensor[(315), float32], %var_3913: Tensor[(315), float32]) -> (Tensor[(315), uint64], Tensor[(315), bool], Tensor[(105), uint16], Tensor[(315), float64], Tensor[(315), float64]) {
  %705 = fn (%var_3869: Tensor[(315), float32], %var_3891: Tensor[(315), float32]) -> (Tensor[(315), uint64], Tensor[(315), bool], Tensor[(105), uint16], Tensor[(315), float64], Tensor[(315), float64]) {
    %682 = @func_1879() /* ty=Tensor[(315), float32] */;
    %683 = cast(%var_3869, dtype="uint64") /* ty=Tensor[(315), uint64] */;
    %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(1), int32] */;
    %685 = cast(%682, dtype="uint64") /* ty=Tensor[(315), uint64] */;
    %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %687 = cast(%var_3869, dtype="bool") /* ty=Tensor[(315), bool] */;
    %688 = shape_of(%682, dtype="int32") /* ty=Tensor[(1), int32] */;
    %689 = cast(%682, dtype="bool") /* ty=Tensor[(315), bool] */;
    %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?), bool] */;
    %691 = @func_1532() /* ty=(Tensor[(105), uint16],) */;
    %692 = cast(%var_3869, dtype="float64") /* ty=Tensor[(315), float64] */;
    %693 = shape_of(%682, dtype="int32") /* ty=Tensor[(1), int32] */;
    %694 = cast(%682, dtype="float64") /* ty=Tensor[(315), float64] */;
    %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?), float64] */;
    %696 = cast(%var_3891, dtype="float64") /* ty=Tensor[(315), float64] */;
    %697 = shape_of(%682, dtype="int32") /* ty=Tensor[(1), int32] */;
    %698 = cast(%682, dtype="float64") /* ty=Tensor[(315), float64] */;
    %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?), float64] */;
    %700 = logical_xor(%685, %686) /* ty=Tensor[(315), uint64] */;
    %701 = not_equal(%689, %690) /* ty=Tensor[(315), bool] */;
    %702 = %691.0;
    %703 = multiply(%694, %695) /* ty=Tensor[(315), float64] */;
    %704 = floor_mod(%698, %699) /* ty=Tensor[(315), float64] */;
    (%700, %701, %702, %703, %704)
  };
  %705(%var_3912, %var_3913) /* ty=(Tensor[(315), uint64], Tensor[(315), bool], Tensor[(105), uint16], Tensor[(315), float64], Tensor[(315), float64]) */
}

def @func_2050() -> (Tensor[(9, 3, 2), uint32], Tensor[(9, 3, 2), float64], Tensor[(105), uint64], Tensor[(720, 2), float64]) {
  %722 = fn () -> (Tensor[(9, 3, 2), uint32], Tensor[(9, 3, 2), float64], Tensor[(105), uint64], Tensor[(720, 2), float64]) {
    %706 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 2), float64] */;
    %707 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(9, 3, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %708 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 2), float64] */;
    %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %710 = divide(%708, %709) /* ty=Tensor[(9, 3, 2), float64] */;
    %711 = cast(%710, dtype="uint32") /* ty=Tensor[(9, 3, 2), uint32] */;
    %712 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(9, 3, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %713 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 3, 2), float64] */, dtype="uint32") /* ty=Tensor[(9, 3, 2), uint32] */;
    %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %715 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 2), float64] */;
    %716 = @func_638() /* ty=(Tensor[(5, 16, 3), float64], Tensor[(105), uint64]) */;
    %717 = @func_1972() /* ty=(Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) */;
    %718 = minimum(%713, %714) /* ty=Tensor[(9, 3, 2), uint32] */;
    %719 = asin(%715) /* ty=Tensor[(9, 3, 2), float64] */;
    %720 = %716.1;
    %721 = %717.0;
    (%718, %719, %720, %721)
  };
  %722() /* ty=(Tensor[(9, 3, 2), uint32], Tensor[(9, 3, 2), float64], Tensor[(105), uint64], Tensor[(720, 2), float64]) */
}

def @func_3964() -> Tensor[(105), float32] {
  %724 = fn () -> Tensor[(105), float32] {
    %723 = @func_2409() /* ty=(Tensor[(105), float32],) */;
    %723.0
  };
  %724() /* ty=Tensor[(105), float32] */
}

def @func_4392(%var_4391: Tensor[(5, 16, 3), float32]) -> (Tensor[(5, 16, 3), bool], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(315), float32]) {
  %739 = fn (%var_4333: Tensor[(5, 16, 3), float32]) -> (Tensor[(5, 16, 3), bool], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(315), float32]) {
    %725 = @func_537() /* ty=(Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) */;
    %726 = %725.0;
    %727 = cast(%var_4333, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
    %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
    %729 = cast(%726, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
    %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %731 = @func_1866() /* ty=(Tensor[(105), uint16],) */;
    %732 = @func_1972() /* ty=(Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) */;
    %733 = greater(%729, %730) /* ty=Tensor[(5, 16, 3), bool] */;
    %734 = @func_3117() /* ty=Tensor[(105), uint64] */;
    %735 = %731.0;
    %736 = @func_1097() /* ty=Tensor[(105), uint64] */;
    %737 = @func_927() /* ty=Tensor[(105), uint16] */;
    %738 = %732.3;
    (%733, %734, %735, %736, %737, %738)
  };
  %739(%var_4391) /* ty=(Tensor[(5, 16, 3), bool], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(315), float32]) */
}

def @func_5350() -> (Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(315), float32], Tensor[(315), float32]) {
  @func_5348() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(315), float32], Tensor[(315), float32]) */
}

def @func_5377(%var_5375: Tensor[(1, 10, 7), float64], %var_5376: Tensor[(10, 10, 7), float64]) -> (Tensor[(10, 10, 7), float64],) {
  @func_5373(%var_5375, %var_5376) /* ty=(Tensor[(10, 10, 7), float64],) */
}

def @func_4632(%var_4626: Tensor[(9, 8, 3), uint64]) -> (Tensor[(9, 8, 3), uint64],) {
  %740 = cast(%var_4626, dtype="uint64") /* ty=Tensor[(9, 8, 3), uint64] */;
  %741 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(9, 8, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 8, 3), uint64] */, dtype="uint64") /* ty=Tensor[(9, 8, 3), uint64] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %744 = multiply(%742, %743) /* ty=Tensor[(9, 8, 3), uint64] */;
  (%744,)
}

def @func_5433() -> (Tensor[(105), uint16],) {
  %746 = fn () -> (Tensor[(105), uint16],) {
    %745 = @func_4664() /* ty=Tensor[(105), uint16] */;
    (%745,)
  };
  %746() /* ty=(Tensor[(105), uint16],) */
}

def @func_4507() -> Tensor[(315), float32] {
  %747 = @func_2437() /* ty=(Tensor[(315), float32], Tensor[(105), uint16]) */;
  %747.0
}

def @func_1320(%var_1319: Tensor[(432, 2), bool]) -> (Tensor[(105), uint16], Tensor[(6, 16, 9), float64], Tensor[(432, 2), bool], Tensor[(15, 3, 7), uint16]) {
  %755 = fn (%var_1301: Tensor[(432, 2), bool]) -> (Tensor[(105), uint16], Tensor[(6, 16, 9), float64], Tensor[(432, 2), bool], Tensor[(15, 3, 7), uint16]) {
    %748 = cast(%var_1301, dtype="bool") /* ty=Tensor[(432, 2), bool] */;
    %749 = reshape(%748, newshape=[6, 16, 9]) /* ty=Tensor[(6, 16, 9), bool] */;
    %750 = @func_1143(%749) /* ty=(Tensor[(6, 16, 9), bool], Tensor[(6, 16, 9), float64]) */;
    %751 = @func_537() /* ty=(Tensor[(5, 16, 3), float32], Tensor[(15, 3, 7), uint16], Tensor[(105), uint16], Tensor[(315), uint16], Tensor[(15, 3, 7), uint16], Tensor[(5, 16, 3), float64]) */;
    %752 = @func_719() /* ty=Tensor[(105), uint16] */;
    %753 = %750.1;
    %754 = %751.4;
    (%752, %753, %var_1301, %754)
  };
  %755(%var_1319) /* ty=(Tensor[(105), uint16], Tensor[(6, 16, 9), float64], Tensor[(432, 2), bool], Tensor[(15, 3, 7), uint16]) */
}

def @func_927() -> Tensor[(105), uint16] {
  @func_891() /* ty=Tensor[(105), uint16] */
}

def @func_6144() -> (Tensor[(105), uint16], Tensor[(105), uint16]) {
  %760 = fn () -> (Tensor[(105), uint16], Tensor[(105), uint16]) {
    %756 = @func_608() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
    %757 = @func_2771() /* ty=(Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(3, 5, 8), float32], Tensor[(120), float32], Tensor[(105), uint16]) */;
    %758 = %756.0;
    %759 = %757.4;
    (%758, %759)
  };
  %760() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */
}

def @func_1685() -> (Tensor[(105), uint16],) {
  %761 = @func_927() /* ty=Tensor[(105), uint16] */;
  (%761,)
}

def @func_5477() -> (Tensor[(315), int8], Tensor[(8, 13, 11), float64]) {
  %762 = @func_4154() /* ty=Tensor[(315), float32] */;
  %763 = cast(meta[relay.Constant][26] /* ty=Tensor[(315), float32] */, dtype="int8") /* ty=Tensor[(315), int8] */;
  %764 = shape_of(%762, dtype="int32") /* ty=Tensor[(1), int32] */;
  %765 = cast(%762, dtype="int8") /* ty=Tensor[(315), int8] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?), int8] */;
  %767 = subtract(%765, %766) /* ty=Tensor[(315), int8] */;
  %768 = @func_4475() /* ty=Tensor[(8, 13, 11), float64] */;
  (%767, %768)
}

def @func_4487() -> (Tensor[(105), float32],) {
  @func_4485() /* ty=(Tensor[(105), float32],) */
}

def @func_1188() -> (Tensor[(315), float32],) {
  @func_1186() /* ty=(Tensor[(315), float32],) */
}

def @func_4475() -> Tensor[(8, 13, 11), float64] {
  %769 = @func_4079() /* ty=(Tensor[(8, 13, 11), float64],) */;
  %769.0
}

def @func_4509() -> Tensor[(315), float32] {
  @func_4507() /* ty=Tensor[(315), float32] */
}

def @func_929() -> Tensor[(105), uint16] {
  @func_927() /* ty=Tensor[(105), uint16] */
}

def @func_3105(%var_3103: Tensor[(16, 3, 16), uint32], %var_3104: Tensor[(16, 3, 16), uint32]) -> (Tensor[(105), float32], Tensor[(16, 3, 16), uint16], Tensor[(105), uint16], Tensor[(15, 1, 7), float32], Tensor[(315), uint16], Tensor[(105), uint16]) {
  %792 = fn (%var_3034: Tensor[(16, 3, 16), uint32], %var_3035: Tensor[(16, 3, 16), uint32]) -> (Tensor[(105), float32], Tensor[(16, 3, 16), uint16], Tensor[(105), uint16], Tensor[(15, 1, 7), float32], Tensor[(315), uint16], Tensor[(105), uint16]) {
    %770 = @func_1972() /* ty=(Tensor[(720, 2), float64], Tensor[(20, 72), float64], Tensor[(315), bool], Tensor[(315), float32], Tensor[(315), float32], Tensor[(105), float32]) */;
    %771 = cast(%var_3035, dtype="uint32") /* ty=Tensor[(16, 3, 16), uint32] */;
    %772 = shape_of(%var_3034, dtype="int32") /* ty=Tensor[(3), int32] */;
    %773 = cast(%var_3034, dtype="uint32") /* ty=Tensor[(16, 3, 16), uint32] */;
    %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %775 = right_shift(%773, %774) /* ty=Tensor[(16, 3, 16), uint32] */;
    %776 = cast(%var_3034, dtype="uint16") /* ty=Tensor[(16, 3, 16), uint16] */;
    %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
    %778 = cast(%775, dtype="uint16") /* ty=Tensor[(16, 3, 16), uint16] */;
    %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %780 = @func_608() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
    %781 = %780.0;
    %782 = cast(%781, dtype="uint16") /* ty=Tensor[(105), uint16] */;
    %783 = cast(meta[relay.Constant][27] /* ty=Tensor[(315), uint16] */, dtype="uint16") /* ty=Tensor[(315), uint16] */;
    %784 = reshape(%782, newshape=[15, 1, 7]) /* ty=Tensor[(15, 1, 7), uint16] */;
    %785 = reshape(%783, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint16] */;
    %786 = @func_307(%784, %785) /* ty=(Tensor[(15, 3, 7), uint16], Tensor[(15, 1, 7), float32]) */;
    %787 = @func_1532() /* ty=(Tensor[(105), uint16],) */;
    %788 = %770.5;
    %789 = multiply(%778, %779) /* ty=Tensor[(16, 3, 16), uint16] */;
    %790 = %786.1;
    %791 = %787.0;
    (%788, %789, %781, %790, meta[relay.Constant][27] /* ty=Tensor[(315), uint16] */, %791)
  };
  %792(%var_3103, %var_3104) /* ty=(Tensor[(105), float32], Tensor[(16, 3, 16), uint16], Tensor[(105), uint16], Tensor[(15, 1, 7), float32], Tensor[(315), uint16], Tensor[(105), uint16]) */
}

def @func_1500(%var_1492: Tensor[(315), uint16]) -> Tensor[(315), float32] {
  %793 = @func_1195() /* ty=Tensor[(315), uint16] */;
  %794 = cast(%var_1492, dtype="float32") /* ty=Tensor[(315), float32] */;
  %795 = shape_of(%793, dtype="int32") /* ty=Tensor[(1), int32] */;
  %796 = cast(%793, dtype="float32") /* ty=Tensor[(315), float32] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?), float32] */;
  divide(%796, %797) /* ty=Tensor[(315), float32] */
}

def @func_6090(%var_6085: Tensor[(315), float32]) -> Tensor[(315), uint8] {
  %798 = @func_4507() /* ty=Tensor[(315), float32] */;
  %799 = cast(%var_6085, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(1), int32] */;
  %801 = cast(%798, dtype="uint8") /* ty=Tensor[(315), uint8] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?), uint8] */;
  add(%801, %802) /* ty=Tensor[(315), uint8] */
}

def @func_1145(%var_1144: Tensor[(6, 16, 9), bool]) -> (Tensor[(6, 16, 9), bool], Tensor[(6, 16, 9), float64]) {
  %812 = fn (%var_1128: Tensor[(6, 16, 9), bool]) -> (Tensor[(6, 16, 9), bool], Tensor[(6, 16, 9), float64]) {
    %803 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 16, 9), bool] */, dtype="bool") /* ty=Tensor[(6, 16, 9), bool] */;
    %804 = shape_of(%var_1128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %805 = cast(%var_1128, dtype="bool") /* ty=Tensor[(6, 16, 9), bool] */;
    %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %807 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 16, 9), bool] */, dtype="float64") /* ty=Tensor[(6, 16, 9), float64] */;
    %808 = acosh(%807) /* ty=Tensor[(6, 16, 9), float64] */;
    %809 = cast(%808, dtype="float64") /* ty=Tensor[(6, 16, 9), float64] */;
    %810 = logical_or(%805, %806) /* ty=Tensor[(6, 16, 9), bool] */;
    %811 = asin(%809) /* ty=Tensor[(6, 16, 9), float64] */;
    (%810, %811)
  };
  %812(%var_1144) /* ty=(Tensor[(6, 16, 9), bool], Tensor[(6, 16, 9), float64]) */
}

def @func_691(%var_680: Tensor[(3, 15, 6), float32], %var_688: Tensor[(1, 105), uint16]) -> (Tensor[(3, 15, 6), float32], Tensor[(15, 3, 7), uint16], Tensor[(1, 105), uint16], Tensor[(315), uint16]) {
  %813 = cast(%var_680, dtype="float32") /* ty=Tensor[(3, 15, 6), float32] */;
  %814 = cast(%var_688, dtype="uint16") /* ty=Tensor[(1, 105), uint16] */;
  %815 = cast(meta[relay.Constant][29] /* ty=Tensor[(315), uint16] */, dtype="uint16") /* ty=Tensor[(315), uint16] */;
  %816 = reshape(%814, newshape=[15, 1, 7]) /* ty=Tensor[(15, 1, 7), uint16] */;
  %817 = reshape(%815, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint16] */;
  %818 = @func_307(%816, %817) /* ty=(Tensor[(15, 3, 7), uint16], Tensor[(15, 1, 7), float32]) */;
  %819 = cos(%813) /* ty=Tensor[(3, 15, 6), float32] */;
  %820 = %818.0;
  (%819, %820, %var_688, meta[relay.Constant][29] /* ty=Tensor[(315), uint16] */)
}

def @func_6226() -> (Tensor[(105), uint16],) {
  %823 = fn () -> (Tensor[(105), uint16],) {
    %821 = @func_3337() /* ty=(Tensor[(105), uint16], Tensor[(105), uint16]) */;
    %822 = %821.0;
    (%822,)
  };
  %823() /* ty=(Tensor[(105), uint16],) */
}

def @func_4079() -> (Tensor[(8, 13, 11), float64],) {
  %824 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 13, 11), float64] */, dtype="float64") /* ty=Tensor[(8, 13, 11), float64] */;
  %825 = log10(%824) /* ty=Tensor[(8, 13, 11), float64] */;
  (%825,)
}

def @func_2835() -> (Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(105), uint16]) {
  %833 = fn () -> (Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(105), uint16]) {
    %826 = @func_2771() /* ty=(Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(3, 5, 8), float32], Tensor[(120), float32], Tensor[(105), uint16]) */;
    %827 = @func_1719() /* ty=(Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(1440), float64], Tensor[(105), uint16]) */;
    %828 = @func_2771() /* ty=(Tensor[(105), uint16], Tensor[(105), uint64], Tensor[(3, 5, 8), float32], Tensor[(120), float32], Tensor[(105), uint16]) */;
    %829 = %826.1;
    %830 = @func_891() /* ty=Tensor[(105), uint16] */;
    %831 = %827.0;
    %832 = %828.4;
    (%829, %830, %831, %832)
  };
  %833() /* ty=(Tensor[(105), uint64], Tensor[(105), uint16], Tensor[(105), uint16], Tensor[(105), uint16]) */
}

def @func_5686(%var_5685: Tensor[(11, 10, 2), float32]) -> (Tensor[(11, 10, 2), float32],) {
  %840 = fn (%var_5664: Tensor[(11, 10, 2), float32]) -> (Tensor[(11, 10, 2), float32],) {
    %834 = cast(%var_5664, dtype="float32") /* ty=Tensor[(11, 10, 2), float32] */;
    %835 = sin(%834) /* ty=Tensor[(11, 10, 2), float32] */;
    %836 = cast(%835, dtype="float64") /* ty=Tensor[(11, 10, 2), float64] */;
    %837 = sinh(%836) /* ty=Tensor[(11, 10, 2), float64] */;
    %838 = cast(%837, dtype="float32") /* ty=Tensor[(11, 10, 2), float32] */;
    %839 = asin(%838) /* ty=Tensor[(11, 10, 2), float32] */;
    (%839,)
  };
  %840(%var_5685) /* ty=(Tensor[(11, 10, 2), float32],) */
}

def @func_1721() -> (Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(1440), float64], Tensor[(105), uint16]) {
  @func_1719() /* ty=(Tensor[(105), uint16], Tensor[(12, 15, 8), int8], Tensor[(1440), float64], Tensor[(105), uint16]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen43/build/output.py", line 2507, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:45:59] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

