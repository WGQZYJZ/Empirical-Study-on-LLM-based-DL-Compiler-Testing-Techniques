==========mod==========
#[version = "0.0.5"]
def @func_6018(%var_6008: Tensor[(10, 3, 13), float64], %var_6009: Tensor[(10, 3, 13), float64], %var_6014: Tensor[(12, 18), float64]) -> (Tensor[(10, 3, 13), float64], Tensor[(9, 4, 6), uint16], Tensor[(12, 18), float64]) {
  %0 = cast(%var_6009, dtype="float64") /* ty=Tensor[(10, 3, 13), float64] */;
  %1 = shape_of(%var_6008, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_6008, dtype="float64") /* ty=Tensor[(10, 3, 13), float64] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %4 = cast(%var_6014, dtype="float64") /* ty=Tensor[(12, 18), float64] */;
  %5 = reshape(%4, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), float64] */;
  %6 = @func_1908(%5) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), uint16]) */;
  %7 = mod(%2, %3) /* ty=Tensor[(10, 3, 13), float64] */;
  %8 = %6.2;
  (%7, %8, %var_6014)
}

def @func_1515() -> (Tensor[(15, 4, 6), float32], Tensor[(168), float32], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool]) {
  %9 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
  %10 = @func_319() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %11 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %12 = %9.3;
  %13 = @func_1336() /* ty=Tensor[(168), float32] */;
  %14 = %10.1;
  %15 = %11.0;
  (%12, %13, %14, %15)
}

def @func_4143(%var_4088: Tensor[(10, 2, 7), uint8]) -> (Tensor[(10, 2, 7), uint8], Tensor[(168), bool], Tensor[(3, 6, 16), bool], Tensor[(72, 4), float64], Tensor[(3, 6, 16), bool], Tensor[(5, 13, 7), uint16], Tensor[(65, 7), float32], Tensor[(168, ?), uint64]) {
  %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 2, 1), uint8] */, dtype="uint8") /* ty=Tensor[(10, 2, 1), uint8] */;
  %17 = cast(%var_4088, dtype="uint8") /* ty=Tensor[(10, 2, 7), uint8] */;
  %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(168, 1), bool] */, dtype="bool") /* ty=Tensor[(168, 1), bool] */;
  %19 = reshape(%18, newshape=[168]) /* ty=Tensor[(168), bool] */;
  %20 = @func_2564(%19) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(360), float32], Tensor[(168), bool]) */;
  %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(72, 4), float64] */, dtype="float64") /* ty=Tensor[(72, 4), float64] */;
  %22 = reshape(%21, newshape=[3, 6, 16]) /* ty=Tensor[(3, 6, 16), float64] */;
  %23 = @func_3124(%22) /* ty=(Tensor[(168), float32], Tensor[(3, 6, 16), bool]) */;
  %24 = cast(meta[relay.Constant][2] /* ty=Tensor[(72, 4), float64] */, dtype="float64") /* ty=Tensor[(72, 4), float64] */;
  %25 = reshape(%24, newshape=[3, 6, 16]) /* ty=Tensor[(3, 6, 16), float64] */;
  %26 = @func_3124(%25) /* ty=(Tensor[(168), float32], Tensor[(3, 6, 16), bool]) */;
  %27 = cast(meta[relay.Constant][3] /* ty=Tensor[(65, 7), float32] */, dtype="float32") /* ty=Tensor[(65, 7), float32] */;
  %28 = reshape(%27, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), float32] */;
  %29 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %30 = %29.1;
  %31 = cast(%30, dtype="uint64") /* ty=Tensor[(168), uint64] */;
  %32 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(168, 1), bool] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(168, 1), bool] */, dtype="uint64") /* ty=Tensor[(168, 1), uint64] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %35 = add(%16, %17) /* ty=Tensor[(10, 2, 7), uint8] */;
  %36 = %20.2;
  %37 = %23.1;
  %38 = %26.1;
  %39 = @func_3601(%28) /* ty=Tensor[(5, 13, 7), uint16] */;
  %40 = right_shift(%33, %34) /* ty=Tensor[(168, ?), uint64] */;
  (%35, %36, %37, meta[relay.Constant][2] /* ty=Tensor[(72, 4), float64] */, %38, %39, meta[relay.Constant][3] /* ty=Tensor[(65, 7), float32] */, %40)
}

def @func_7588() -> Tensor[(9, 4, 6), bool] {
  %41 = @func_1388() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %41.0
}

def @func_6509() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  %42 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %43 = @func_5063() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(84, 2), float32], Tensor[(6, 4, 7), bool], Tensor[(455, ?), bool]) */;
  %44 = @func_6168() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %45 = %42.1;
  %46 = %43.0;
  %47 = %44.0;
  (%45, %46, %47)
}

def @func_3050() -> (Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32]) {
  %48 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %49 = @func_319() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %50 = %48.1;
  %51 = @func_1230() /* ty=Tensor[(168), float32] */;
  %52 = %49.2;
  (%50, %51, %52)
}

def @func_3387(%var_3350: Tensor[(15, 2, 6), uint16], %var_3351: Tensor[(15, 2, 6), uint16]) -> (Tensor[(15, 2, 6), int64], Tensor[(9, 4, 6), float64], Tensor[(1080), float64], Tensor[(15, 2, 6), bool], Tensor[(9, 4, 6), bool]) {
  %53 = cast(%var_3351, dtype="uint16") /* ty=Tensor[(15, 2, 6), uint16] */;
  %54 = shape_of(%var_3350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%var_3350, dtype="uint16") /* ty=Tensor[(15, 2, 6), uint16] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %57 = bitwise_and(%55, %56) /* ty=Tensor[(15, 2, 6), uint16] */;
  %58 = cast(%57, dtype="int64") /* ty=Tensor[(15, 2, 6), int64] */;
  %59 = shape_of(%var_3350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%var_3350, dtype="int64") /* ty=Tensor[(15, 2, 6), int64] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %62 = cast(meta[relay.Constant][4] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %63 = reshape(%62, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
  %64 = @func_1435(%63) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(1080), float64]) */;
  %65 = cast(%var_3350, dtype="bool") /* ty=Tensor[(15, 2, 6), bool] */;
  %66 = shape_of(%57, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%57, dtype="bool") /* ty=Tensor[(15, 2, 6), bool] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %69 = cast(meta[relay.Constant][4] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %71 = reshape(%69, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %72 = reshape(%70, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %73 = @func_1210(%71, %72) /* ty=(Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) */;
  %74 = right_shift(%60, %61) /* ty=Tensor[(15, 2, 6), int64] */;
  %75 = %64.1;
  %76 = equal(%67, %68) /* ty=Tensor[(15, 2, 6), bool] */;
  %77 = %73.3;
  (%74, %75, meta[relay.Constant][4] /* ty=Tensor[(1080), float64] */, %76, %77)
}

def @func_1960(%var_1942: Tensor[(168, 1), float32]) -> (Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168, 1), float32], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(1080), float64]) {
  %78 = @func_1270() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %79 = cast(%var_1942, dtype="float32") /* ty=Tensor[(168, 1), float32] */;
  %80 = reshape(%79, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %81 = @func_1077(%80) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), float64]) */;
  %82 = cast(meta[relay.Constant][5] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %83 = reshape(%82, newshape=[15, 4, 6]) /* ty=Tensor[(15, 4, 6), float32] */;
  %84 = cast(meta[relay.Constant][5] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %85 = reshape(%84, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %86 = @func_1302(%85) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(9, 12, 10), float64], Tensor[(1080), float64], Tensor[(15, 4, 6), float32]) */;
  %87 = %78.0;
  %88 = %81.1;
  %89 = @func_455(%83) /* ty=Tensor[(15, 4, 6), float32] */;
  %90 = %86.4;
  (%87, %88, %var_1942, %89, meta[relay.Constant][5] /* ty=Tensor[(360), float32] */, %90)
}

def @func_6932() -> Tensor[(9, 4, 6), float64] {
  %91 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %91.1
}

def @func_1137() -> (Tensor[(9, 4, 6), float64], Tensor[(168), float32]) {
  %92 = @func_723() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %93 = %92.0;
  %94 = cast(%93, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
  %95 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %96 = cosh(%94) /* ty=Tensor[(9, 4, 6), float64] */;
  %97 = %95.1;
  (%96, %97)
}

def @func_3124(%var_3115: Tensor[(3, 6, 16), float64]) -> (Tensor[(168), float32], Tensor[(3, 6, 16), bool]) {
  %98 = @func_2094() /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) */;
  %99 = cast(%var_3115, dtype="float64") /* ty=Tensor[(3, 6, 16), float64] */;
  %100 = asin(%99) /* ty=Tensor[(3, 6, 16), float64] */;
  %101 = cast(%var_3115, dtype="bool") /* ty=Tensor[(3, 6, 16), bool] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%100, dtype="bool") /* ty=Tensor[(3, 6, 16), bool] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %105 = %98.0;
  %106 = equal(%103, %104) /* ty=Tensor[(3, 6, 16), bool] */;
  (%105, %106)
}

def @func_6848() -> (Tensor[(9, 4, 6), bool],) {
  %107 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %108 = %107.1;
  (%108,)
}

def @func_2306(%var_2300: Tensor[(1, 168), bool]) -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(1, 168), bool]) {
  %109 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
  %110 = @func_288() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %111 = cast(%var_2300, dtype="bool") /* ty=Tensor[(1, 168), bool] */;
  %112 = reshape(%111, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), bool] */;
  %113 = @func_635(%112) /* ty=(Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), bool]) */;
  %114 = %109.4;
  %115 = %110.0;
  %116 = %113.0;
  (%114, %115, %116, %var_2300)
}

def @func_5412() -> Tensor[(9, 4, 6), float64] {
  %117 = @func_4900() /* ty=(Tensor[(9, 4, 6), float64],) */;
  %117.0
}

def @func_8050(%var_8037: Tensor[(15, 2, 6), int16], %var_8038: Tensor[(15, 2, 6), int16]) -> (Tensor[(15, 2, 6), int16],) {
  %118 = cast(%var_8038, dtype="int16") /* ty=Tensor[(15, 2, 6), int16] */;
  %119 = shape_of(%var_8037, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%var_8037, dtype="int16") /* ty=Tensor[(15, 2, 6), int16] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %122 = minimum(%120, %121) /* ty=Tensor[(15, 2, 6), int16] */;
  (%122,)
}

def @func_7833(%var_7822: Tensor[(1080), float64]) -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(1080), float32]) {
  %123 = @func_5389() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(5, 13, 7), uint16], Tensor[(455, 1), float32]) */;
  %124 = cast(meta[relay.Constant][6] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %125 = cast(meta[relay.Constant][6] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %126 = reshape(%124, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %127 = reshape(%125, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %128 = @func_1210(%126, %127) /* ty=(Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) */;
  %129 = cast(%var_7822, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %130 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(1080), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %131 = cast(meta[relay.Constant][6] /* ty=Tensor[(1080), float64] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?), float32] */;
  %133 = %123.0;
  %134 = %128.3;
  %135 = floor_mod(%131, %132) /* ty=Tensor[(1080), float32] */;
  (%133, %134, %135)
}

def @func_7019() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  %136 = @func_1270() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %137 = @func_6848() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %138 = %136.0;
  %139 = %137.0;
  (%138, %139)
}

def @func_84() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  %140 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  %141 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  (%140, %141)
}

def @func_924(%var_863: Tensor[(9, 4, 6), bool], %var_891: Tensor[(168), float32]) -> (Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), float64]) {
  %142 = cast(%var_891, dtype="float32") /* ty=Tensor[(168), float32] */;
  %143 = reshape(%142, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %144 = @func_782(%143) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %145 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %146 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  %147 = cast(%var_863, dtype="float32") /* ty=Tensor[(9, 4, 6), float32] */;
  %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%146, dtype="float32") /* ty=Tensor[(9, 4, 6), float32] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %151 = mod(%149, %150) /* ty=Tensor[(9, 4, 6), float32] */;
  %152 = cast(%151, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
  %153 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  %154 = %144.2;
  %155 = %145.3;
  %156 = sqrt(%152) /* ty=Tensor[(9, 4, 6), float64] */;
  (%153, %154, %var_891, %155, %156)
}

def @func_1805(%var_1784: Tensor[(9, 4, 6), bool]) -> (Tensor[(9, 4, 6), bool],) {
  %157 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %158 = %157.1;
  %159 = cast(%var_1784, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %160 = shape_of(%158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%158, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %163 = not_equal(%161, %162) /* ty=Tensor[(9, 4, 6), bool] */;
  (%163,)
}

def @func_5063() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(84, 2), float32], Tensor[(6, 4, 7), bool], Tensor[(455, ?), bool]) {
  %164 = @func_3050() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32]) */;
  %165 = @func_3343() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float32]) */;
  %166 = %164.0;
  %167 = cast(%166, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %168 = reshape(%167, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %169 = @func_1626(%168) /* ty=(Tensor[(6, 4, 7), uint16], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool]) */;
  %170 = @func_288() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %171 = cast(meta[relay.Constant][7] /* ty=Tensor[(84, 2), float32] */, dtype="float32") /* ty=Tensor[(84, 2), float32] */;
  %172 = cast(meta[relay.Constant][7] /* ty=Tensor[(84, 2), float32] */, dtype="float32") /* ty=Tensor[(84, 2), float32] */;
  %173 = reshape(%171, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %174 = reshape(%172, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %175 = @func_188(%173, %174) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
  %176 = cast(meta[relay.Constant][7] /* ty=Tensor[(84, 2), float32] */, dtype="float32") /* ty=Tensor[(84, 2), float32] */;
  %177 = cast(meta[relay.Constant][7] /* ty=Tensor[(84, 2), float32] */, dtype="float32") /* ty=Tensor[(84, 2), float32] */;
  %178 = reshape(%176, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %179 = reshape(%177, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %180 = @func_188(%178, %179) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
  %181 = cast(meta[relay.Constant][8] /* ty=Tensor[(455, 1), float32] */, dtype="float32") /* ty=Tensor[(455, 1), float32] */;
  %182 = reshape(%181, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), float32] */;
  %183 = @func_3601(%182) /* ty=Tensor[(5, 13, 7), uint16] */;
  %184 = cast(%183, dtype="bool") /* ty=Tensor[(5, 13, 7), bool] */;
  %185 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(455, 1), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %186 = cast(meta[relay.Constant][8] /* ty=Tensor[(455, 1), float32] */, dtype="bool") /* ty=Tensor[(455, 1), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %188 = %165.0;
  %189 = %169.2;
  %190 = %170.0;
  %191 = %175.0;
  %192 = %180.0;
  %193 = greater_equal(%186, %187) /* ty=Tensor[(455, ?), bool] */;
  (%166, %188, %189, %190, %191, meta[relay.Constant][7] /* ty=Tensor[(84, 2), float32] */, %192, %193)
}

def @func_2485() -> (Tensor[(168), float32], Tensor[(360), float32]) {
  %194 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %195 = %194.1;
  %196 = @func_1774() /* ty=Tensor[(360), float32] */;
  (%195, %196)
}

def @func_4713() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  %197 = @func_1743() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %198 = @func_723() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %199 = %197.2;
  %200 = %198.0;
  %201 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  (%199, %200, %201)
}

def @func_3447() -> (Tensor[(360), float32], Tensor[(360), float32], Tensor[(6, 28), bool], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), float32]) {
  %202 = @func_2173() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool]) */;
  %203 = @func_2485() /* ty=(Tensor[(168), float32], Tensor[(360), float32]) */;
  %204 = @func_2547() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), int8], Tensor[(9, 4, 6), bool]) */;
  %205 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 28), bool] */, dtype="bool") /* ty=Tensor[(6, 28), bool] */;
  %206 = reshape(%205, newshape=[1, 168]) /* ty=Tensor[(1, 168), bool] */;
  %207 = @func_2306(%206) /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(1, 168), bool]) */;
  %208 = %207.2;
  %209 = cast(%208, dtype="float32") /* ty=Tensor[(6, 4, 7), float32] */;
  %210 = %202.0;
  %211 = %203.1;
  %212 = %204.0;
  %213 = @func_2211() /* ty=Tensor[(9, 4, 6), bool] */;
  %214 = exp(%209) /* ty=Tensor[(6, 4, 7), float32] */;
  (%210, %211, meta[relay.Constant][9] /* ty=Tensor[(6, 28), bool] */, %212, %213, %214)
}

def @func_4320() -> (Tensor[(360), float32], Tensor[(15, 4, 6), float32]) {
  %215 = @func_3662() /* ty=(Tensor[(360), float32],) */;
  %216 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
  %217 = %215.0;
  %218 = %216.3;
  (%217, %218)
}

def @func_6310() -> Tensor[(168), float32] {
  %219 = @func_3050() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32]) */;
  %219.2
}

def @func_6630() -> Tensor[(360), float32] {
  %220 = @func_4047() /* ty=(Tensor[(360), float32], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %220.0
}

def @func_7130(%var_7125: Tensor[(15, 9, 3), float32]) -> (Tensor[(15, 9, 3), float32],) {
  %221 = cast(%var_7125, dtype="float32") /* ty=Tensor[(15, 9, 3), float32] */;
  %222 = cosh(%221) /* ty=Tensor[(15, 9, 3), float32] */;
  (%222,)
}

def @func_7421(%var_7392: Tensor[(21), int64], %var_7405: Tensor[(819), int16]) -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(21), int64], Tensor[(231), int64], Tensor[(819), int16], Tensor[(9, 7, 13), float32]) {
  %223 = cast(%var_7392, dtype="int64") /* ty=Tensor[(21), int64] */;
  %224 = cast(meta[relay.Constant][10] /* ty=Tensor[(231), int64] */, dtype="int64") /* ty=Tensor[(231), int64] */;
  %225 = reshape(%223, newshape=[3, 1, 7]) /* ty=Tensor[(3, 1, 7), int64] */;
  %226 = reshape(%224, newshape=[3, 11, 7]) /* ty=Tensor[(3, 11, 7), int64] */;
  %227 = @func_4864(%225, %226) /* ty=(Tensor[(3, 11, 7), bool], Tensor[(13, 4, 15), float64], Tensor[(780), float64], Tensor[(9, 4, 6), bool], Tensor[(1080), float64]) */;
  %228 = cast(%var_7405, dtype="int16") /* ty=Tensor[(819), int16] */;
  %229 = cast(%var_7405, dtype="int16") /* ty=Tensor[(819), int16] */;
  %230 = reshape(%228, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), int16] */;
  %231 = reshape(%229, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), int16] */;
  %232 = @func_3877(%230, %231) /* ty=(Tensor[(9, 7, 13), uint16], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 7, 13), int32], Tensor[(168), float64], Tensor[(9, 12, 10), float64], Tensor[(1080), float64], Tensor[(6, 4, 7), int8]) */;
  %233 = %232.3;
  %234 = cast(%233, dtype="float32") /* ty=Tensor[(9, 7, 13), float32] */;
  %235 = @func_4835() /* ty=Tensor[(9, 4, 6), float64] */;
  %236 = %227.3;
  %237 = sinh(%234) /* ty=Tensor[(9, 7, 13), float32] */;
  (%235, %236, %var_7392, meta[relay.Constant][10] /* ty=Tensor[(231), int64] */, %var_7405, %237)
}

def @func_1908(%var_1903: Tensor[(9, 4, 6), float64]) -> (Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), uint16]) {
  %238 = cast(meta[relay.Constant][11] /* ty=Tensor[(117), float32] */, dtype="float32") /* ty=Tensor[(117), float32] */;
  %239 = reshape(%238, newshape=[13, 9, 1]) /* ty=Tensor[(13, 9, 1), float32] */;
  %240 = @func_1834(%239) /* ty=(Tensor[(13, 9, 1), float64], Tensor[(9, 4, 6), bool]) */;
  %241 = @func_1763() /* ty=Tensor[(9, 4, 6), float64] */;
  %242 = cast(%var_1903, dtype="uint16") /* ty=Tensor[(9, 4, 6), uint16] */;
  %243 = shape_of(%241, dtype="int32") /* ty=Tensor[(3), int32] */;
  %244 = cast(%241, dtype="uint16") /* ty=Tensor[(9, 4, 6), uint16] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %246 = %240.1;
  %247 = minimum(%244, %245) /* ty=Tensor[(9, 4, 6), uint16] */;
  (%246, meta[relay.Constant][11] /* ty=Tensor[(117), float32] */, %247)
}

def @func_6826() -> Tensor[(9, 4, 6), bool] {
  @func_2118() /* ty=Tensor[(9, 4, 6), bool] */
}

def @func_7567() -> (Tensor[(360), float32],) {
  %248 = @func_5886() /* ty=Tensor[(360), float32] */;
  (%248,)
}

def @func_5389() -> (Tensor[(9, 4, 6), float64], Tensor[(5, 13, 7), uint16], Tensor[(455, 1), float32]) {
  %249 = @func_5063() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(84, 2), float32], Tensor[(6, 4, 7), bool], Tensor[(455, ?), bool]) */;
  %250 = cast(meta[relay.Constant][12] /* ty=Tensor[(455, 1), float32] */, dtype="float32") /* ty=Tensor[(455, 1), float32] */;
  %251 = reshape(%250, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), float32] */;
  %252 = %249.1;
  %253 = @func_3601(%251) /* ty=Tensor[(5, 13, 7), uint16] */;
  (%252, %253, meta[relay.Constant][12] /* ty=Tensor[(455, 1), float32] */)
}

def @func_3304() -> Tensor[(360), float32] {
  @func_2668() /* ty=Tensor[(360), float32] */
}

def @func_39() -> Tensor[(9, 4, 6), bool] {
  %254 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 4, 6), bool] */, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %255 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(9, 4, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 4, 6), bool] */, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%256, %257) /* ty=Tensor[(9, 4, 6), bool] */
}

def @func_4682() -> (Tensor[(9, 4, 6), float64],) {
  %258 = @func_427() /* ty=Tensor[(9, 4, 6), float64] */;
  (%258,)
}

def @func_5518() -> Tensor[(1, 180), uint16] {
  %259 = @func_5184() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(1080), float64], Tensor[(1, 180), uint16]) */;
  %259.2
}

def @func_5985(%var_5976: Tensor[(16, 4, 2), bool], %var_5977: Tensor[(16, 4, 2), bool]) -> (Tensor[(16, 4, 2), bool],) {
  %260 = cast(%var_5977, dtype="bool") /* ty=Tensor[(16, 4, 2), bool] */;
  %261 = shape_of(%var_5976, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%var_5976, dtype="bool") /* ty=Tensor[(16, 4, 2), bool] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %264 = logical_or(%262, %263) /* ty=Tensor[(16, 4, 2), bool] */;
  (%264,)
}

def @func_1210(%var_1154: Tensor[(9, 12, 10), float64], %var_1183: Tensor[(9, 12, 10), float64]) -> (Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) {
  %265 = cast(%var_1154, dtype="float64") /* ty=Tensor[(9, 12, 10), float64] */;
  %266 = cast(%var_1183, dtype="bool") /* ty=Tensor[(9, 12, 10), bool] */;
  %267 = shape_of(%var_1154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%var_1154, dtype="bool") /* ty=Tensor[(9, 12, 10), bool] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %270 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %271 = atanh(%265) /* ty=Tensor[(9, 12, 10), float64] */;
  %272 = @func_427() /* ty=Tensor[(9, 4, 6), float64] */;
  %273 = equal(%268, %269) /* ty=Tensor[(9, 12, 10), bool] */;
  %274 = %270.2;
  (%271, %272, %273, %274)
}

def @func_1230() -> Tensor[(168), float32] {
  %275 = @func_319() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %275.2
}

def @func_7877(%var_7868: Tensor[(16, 10, 13), float32]) -> (Tensor[(16, 10, 13), float32],) {
  %276 = cast(%var_7868, dtype="float32") /* ty=Tensor[(16, 10, 13), float32] */;
  %277 = sqrt(%276) /* ty=Tensor[(16, 10, 13), float32] */;
  (%277,)
}

def @func_6220() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(288), float64], Tensor[(24, 12), float64]) {
  %278 = @func_4422() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool]) */;
  %279 = @func_5798() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %280 = cast(meta[relay.Constant][15] /* ty=Tensor[(24, 12), float64] */, dtype="float64") /* ty=Tensor[(24, 12), float64] */;
  %281 = reshape(%280, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %282 = @func_4548(%281) /* ty=(Tensor[(168), float32], Tensor[(3, 6, 16), bool], Tensor[(288), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32]) */;
  %283 = %278.1;
  %284 = %279.0;
  %285 = %282.2;
  (%283, %284, %285, meta[relay.Constant][15] /* ty=Tensor[(24, 12), float64] */)
}

def @func_5136() -> (Tensor[(9, 4, 6), bool], Tensor[(360), float32]) {
  %286 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
  %287 = @func_4422() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool]) */;
  %288 = %286.2;
  %289 = %287.0;
  (%288, %289)
}

def @main(%var_8173: Tensor[(13, 35), float32], %var_8176: Tensor[(180), float32], %var_8181: Tensor[(1080), float64]) -> (Tensor[(9, 4, 6), bool], Tensor[(5, 13, 7), uint16], Tensor[(13, 35), float32], Tensor[(15, 3, 4), float32], Tensor[(180), float32], Tensor[(1080), float64]) {
  %290 = @func_7019() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %291 = cast(%var_8173, dtype="float32") /* ty=Tensor[(13, 35), float32] */;
  %292 = reshape(%291, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), float32] */;
  %293 = cast(%var_8176, dtype="float32") /* ty=Tensor[(180), float32] */;
  %294 = reshape(%293, newshape=[15, 3, 4]) /* ty=Tensor[(15, 3, 4), float32] */;
  %295 = @func_5569(%294) /* ty=(Tensor[(15, 3, 4), float32], Tensor[(455, 1), float32], Tensor[(9, 4, 6), uint16], Tensor[(216), float64]) */;
  %296 = @func_7858() /* ty=(Tensor[(1080), float64],) */;
  %297 = %296.0;
  %298 = cast(%var_8181, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(1), int32] */;
  %300 = cast(%297, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?), float64] */;
  %302 = %290.1;
  %303 = @func_3601(%292) /* ty=Tensor[(5, 13, 7), uint16] */;
  %304 = %295.0;
  %305 = floor_divide(%300, %301) /* ty=Tensor[(1080), float64] */;
  (%302, %303, %var_8173, %304, %var_8176, %305)
}

def @func_8147() -> Tensor[(9, 4, 6), bool] {
  @func_39() /* ty=Tensor[(9, 4, 6), bool] */
}

def @func_6168() -> (Tensor[(9, 4, 6), bool],) {
  %306 = @func_55() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %307 = %306.1;
  (%307,)
}

def @func_2547() -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), int8], Tensor[(9, 4, 6), bool]) {
  %308 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %309 = %308.0;
  %310 = @func_2173() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool]) */;
  %311 = %310.2;
  %312 = cast(%311, dtype="int8") /* ty=Tensor[(9, 4, 6), int8] */;
  %313 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%309, dtype="int8") /* ty=Tensor[(9, 4, 6), int8] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %316 = @func_1763() /* ty=Tensor[(9, 4, 6), float64] */;
  %317 = subtract(%314, %315) /* ty=Tensor[(9, 4, 6), int8] */;
  %318 = @func_2211() /* ty=Tensor[(9, 4, 6), bool] */;
  (%316, %317, %318)
}

def @func_3268(%var_3212: Tensor[(8, 7, 1), float32], %var_3232: Tensor[(8, 7, 5), float32], %var_3237: Tensor[(216), bool]) -> (Tensor[(8, 7, 5), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(8, 7, 5), uint32]) {
  %319 = cast(%var_3212, dtype="float32") /* ty=Tensor[(8, 7, 1), float32] */;
  %320 = cosh(%319) /* ty=Tensor[(8, 7, 1), float32] */;
  %321 = cast(%320, dtype="bool") /* ty=Tensor[(8, 7, 1), bool] */;
  %322 = cast(%var_3232, dtype="bool") /* ty=Tensor[(8, 7, 5), bool] */;
  %323 = cast(%var_3237, dtype="bool") /* ty=Tensor[(216), bool] */;
  %324 = reshape(%323, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %325 = @func_1626(%324) /* ty=(Tensor[(6, 4, 7), uint16], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool]) */;
  %326 = @func_1743() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %327 = cast(%var_3212, dtype="float32") /* ty=Tensor[(8, 7, 1), float32] */;
  %328 = asinh(%327) /* ty=Tensor[(8, 7, 1), float32] */;
  %329 = cast(%328, dtype="bool") /* ty=Tensor[(8, 7, 1), bool] */;
  %330 = cast(%var_3232, dtype="bool") /* ty=Tensor[(8, 7, 5), bool] */;
  %331 = greater(%329, %330) /* ty=Tensor[(8, 7, 5), bool] */;
  %332 = cast(%331, dtype="uint32") /* ty=Tensor[(8, 7, 5), uint32] */;
  %333 = cast(%320, dtype="uint32") /* ty=Tensor[(8, 7, 1), uint32] */;
  %334 = logical_and(%321, %322) /* ty=Tensor[(8, 7, 5), bool] */;
  %335 = %325.2;
  %336 = %326.0;
  %337 = @func_2453() /* ty=Tensor[(168), float32] */;
  %338 = multiply(%332, %333) /* ty=Tensor[(8, 7, 5), uint32] */;
  (%334, %335, %var_3237, %336, %337, %338)
}

def @func_6687() -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(6, 4, 7), bool]) {
  %339 = @func_4953() /* ty=(Tensor[(360), float32],) */;
  %340 = @func_55() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %341 = @func_2173() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool]) */;
  %342 = %341.3;
  %343 = cast(%342, dtype="float32") /* ty=Tensor[(6, 4, 7), float32] */;
  %344 = reshape(%343, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %345 = @func_782(%344) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %346 = %339.0;
  %347 = %340.1;
  %348 = %345.1;
  (%346, %347, %342, %348)
}

def @func_5446() -> Tensor[(9, 4, 6), float64] {
  %349 = @func_3089() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool]) */;
  %349.0
}

def @func_6770() -> (Tensor[(168), float32], Tensor[(168), float32], Tensor[(216), bool], Tensor[(1080), float64], Tensor[(90, 12), float64], Tensor[(9, 4, 6), bool]) {
  %350 = @func_4047() /* ty=(Tensor[(360), float32], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %351 = cast(meta[relay.Constant][16] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %352 = %350.2;
  %353 = cast(%352, dtype="float32") /* ty=Tensor[(168), float32] */;
  %354 = reshape(%351, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), bool] */;
  %355 = reshape(%353, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %356 = @func_924(%354, %355) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), float64]) */;
  %357 = cast(meta[relay.Constant][17] /* ty=Tensor[(90, 12), float64] */, dtype="float64") /* ty=Tensor[(90, 12), float64] */;
  %358 = reshape(%357, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
  %359 = @func_2428(%358) /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(?, 13, 11), bool], Tensor[(9, 12, 10), bool], Tensor[(1080), float64]) */;
  %360 = @func_4214() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %361 = %356.3;
  %362 = %359.5;
  %363 = %360.0;
  (%352, %361, meta[relay.Constant][16] /* ty=Tensor[(216), bool] */, %362, meta[relay.Constant][17] /* ty=Tensor[(90, 12), float64] */, %363)
}

def @func_7098(%var_7094: Tensor[(16, 9, 9), float64]) -> Tensor[(16, 9, 9), float64] {
  %364 = cast(-4.54282f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %365 = cast(%var_7094, dtype="float64") /* ty=Tensor[(16, 9, 9), float64] */;
  subtract(%364, %365) /* ty=Tensor[(16, 9, 9), float64] */
}

def @func_5717() -> Tensor[(6, 28), float32] {
  %366 = @func_4162() /* ty=Tensor[(6, 28), float32] */;
  %367 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 28), float32] */, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(2), int32] */;
  %369 = cast(%366, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  divide(%369, %370) /* ty=Tensor[(6, 28), float32] */
}

def @func_1626(%var_1621: Tensor[(216), bool]) -> (Tensor[(6, 4, 7), uint16], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool]) {
  %371 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
  %372 = %371.5;
  %373 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 4, 7), bool] */, dtype="uint16") /* ty=Tensor[(6, 4, 7), uint16] */;
  %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%372, dtype="uint16") /* ty=Tensor[(6, 4, 7), uint16] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %377 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 4, 7), bool] */, dtype="float32") /* ty=Tensor[(6, 4, 7), float32] */;
  %378 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 4, 7), bool] */, dtype="float32") /* ty=Tensor[(6, 4, 7), float32] */;
  %379 = reshape(%377, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %380 = reshape(%378, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %381 = @func_188(%379, %380) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
  %382 = cast(%var_1621, dtype="bool") /* ty=Tensor[(216), bool] */;
  %383 = %381.0;
  %384 = cast(%383, dtype="float32") /* ty=Tensor[(6, 4, 7), float32] */;
  %385 = reshape(%382, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), bool] */;
  %386 = reshape(%384, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %387 = @func_924(%385, %386) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), float64]) */;
  %388 = minimum(%375, %376) /* ty=Tensor[(6, 4, 7), uint16] */;
  %389 = %387.4;
  (%388, %383, %389, %var_1621)
}

def @func_2871() -> Tensor[(9, 4, 6), bool] {
  %390 = @func_1388() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %390.0
}

def @func_1743() -> (Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) {
  %391 = @func_1515() /* ty=(Tensor[(15, 4, 6), float32], Tensor[(168), float32], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool]) */;
  %392 = @func_288() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %393 = @func_427() /* ty=Tensor[(9, 4, 6), float64] */;
  %394 = %391.1;
  %395 = %392.0;
  (%393, %394, %395)
}

def @func_635(%var_619: Tensor[(6, 4, 7), bool]) -> (Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), bool]) {
  %396 = @func_319() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %397 = %396.1;
  %398 = cast(%var_619, dtype="int8") /* ty=Tensor[(6, 4, 7), int8] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%397, dtype="int8") /* ty=Tensor[(6, 4, 7), int8] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %402 = @func_288() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %403 = right_shift(%400, %401) /* ty=Tensor[(6, 4, 7), int8] */;
  %404 = %402.0;
  (%403, %404)
}

def @func_2453() -> Tensor[(168), float32] {
  %405 = @func_319() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %405.2
}

def @func_4835() -> Tensor[(9, 4, 6), float64] {
  @func_1763() /* ty=Tensor[(9, 4, 6), float64] */
}

def @func_5184() -> (Tensor[(9, 4, 6), bool], Tensor[(1080), float64], Tensor[(1, 180), uint16]) {
  %406 = @func_2855() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(360), float32]) */;
  %407 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 180), uint16] */, dtype="uint16") /* ty=Tensor[(1, 180), uint16] */;
  %408 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 180), uint16] */, dtype="uint16") /* ty=Tensor[(1, 180), uint16] */;
  %409 = reshape(%407, newshape=[15, 2, 6]) /* ty=Tensor[(15, 2, 6), uint16] */;
  %410 = reshape(%408, newshape=[15, 2, 6]) /* ty=Tensor[(15, 2, 6), uint16] */;
  %411 = @func_3387(%409, %410) /* ty=(Tensor[(15, 2, 6), int64], Tensor[(9, 4, 6), float64], Tensor[(1080), float64], Tensor[(15, 2, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %412 = %406.2;
  %413 = %411.2;
  (%412, %413, meta[relay.Constant][20] /* ty=Tensor[(1, 180), uint16] */)
}

def @func_3567(%var_3531: Tensor[(12, 3, 16), float64], %var_3536: Tensor[(216), bool]) -> (Tensor[(9, 4, 6), uint16], Tensor[(216), bool], Tensor[(12, 3, 16), uint32], Tensor[(168), float32]) {
  %414 = cast(%var_3536, dtype="bool") /* ty=Tensor[(216), bool] */;
  %415 = reshape(%414, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), bool] */;
  %416 = @func_2392(%415) /* ty=(Tensor[(9, 4, 6), uint16], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32]) */;
  %417 = cast(%var_3531, dtype="float64") /* ty=Tensor[(12, 3, 16), float64] */;
  %418 = log(%417) /* ty=Tensor[(12, 3, 16), float64] */;
  %419 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 3, 16), float64] */, dtype="uint32") /* ty=Tensor[(12, 3, 16), uint32] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%418, dtype="uint32") /* ty=Tensor[(12, 3, 16), uint32] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %423 = @func_3050() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32]) */;
  %424 = %416.0;
  %425 = add(%421, %422) /* ty=Tensor[(12, 3, 16), uint32] */;
  %426 = %423.2;
  (%424, %var_3536, %425, %426)
}

def @func_7606() -> (Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) {
  %427 = cast(meta[relay.Constant][22] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %428 = cast(meta[relay.Constant][22] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %429 = reshape(%427, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %430 = reshape(%428, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %431 = @func_188(%429, %430) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
  %432 = @func_2211() /* ty=Tensor[(9, 4, 6), bool] */;
  %433 = %431.0;
  (%432, %433, meta[relay.Constant][22] /* ty=Tensor[(168), float32] */)
}

def @func_3407(%var_3402: Tensor[(14, 11, 13), int32]) -> Tensor[(14, 11, 13), bool] {
  %434 = cast(%var_3402, dtype="bool") /* ty=Tensor[(14, 11, 13), bool] */;
  %435 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(14, 11, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 11, 13), int32] */, dtype="bool") /* ty=Tensor[(14, 11, 13), bool] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%436, %437) /* ty=Tensor[(14, 11, 13), bool] */
}

def @func_1763() -> Tensor[(9, 4, 6), float64] {
  %438 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  %439 = cast(%438, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
  acos(%439) /* ty=Tensor[(9, 4, 6), float64] */
}

def @func_2428(%var_2426: Tensor[(1080), float64]) -> (Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(?, 13, 11), bool], Tensor[(9, 12, 10), bool], Tensor[(1080), float64]) {
  %440 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %441 = @func_1270() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %442 = @func_1137() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32]) */;
  %443 = @func_2010() /* ty=(Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool], Tensor[(6, 28), float32], Tensor[(?, 13, 11), bool]) */;
  %444 = cast(%var_2426, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %445 = cast(%var_2426, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %446 = reshape(%444, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %447 = reshape(%445, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %448 = @func_1210(%446, %447) /* ty=(Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) */;
  %449 = %440.1;
  %450 = %441.0;
  %451 = %442.1;
  %452 = %443.3;
  %453 = %448.2;
  (%449, %450, %451, %452, %453, %var_2426)
}

def @func_5003() -> (Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(1080), float64], Tensor[(9, 4, 6), bool], Tensor[(819), int16], Tensor[(9, 4, 6), float32], Tensor[(168), float32]) {
  %454 = cast(meta[relay.Constant][24] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %455 = cast(meta[relay.Constant][24] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %456 = reshape(%454, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %457 = reshape(%455, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %458 = @func_1210(%456, %457) /* ty=(Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) */;
  %459 = cast(meta[relay.Constant][25] /* ty=Tensor[(819), int16] */, dtype="int16") /* ty=Tensor[(819), int16] */;
  %460 = cast(meta[relay.Constant][25] /* ty=Tensor[(819), int16] */, dtype="int16") /* ty=Tensor[(819), int16] */;
  %461 = reshape(%459, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), int16] */;
  %462 = reshape(%460, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), int16] */;
  %463 = @func_3877(%461, %462) /* ty=(Tensor[(9, 7, 13), uint16], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 7, 13), int32], Tensor[(168), float64], Tensor[(9, 12, 10), float64], Tensor[(1080), float64], Tensor[(6, 4, 7), int8]) */;
  %464 = @func_3343() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float32]) */;
  %465 = @func_1336() /* ty=Tensor[(168), float32] */;
  %466 = cast(%465, dtype="float32") /* ty=Tensor[(168), float32] */;
  %467 = reshape(%466, newshape=[168, 1]) /* ty=Tensor[(168, 1), float32] */;
  %468 = @func_1960(%467) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168, 1), float32], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(1080), float64]) */;
  %469 = %458.3;
  %470 = %463.2;
  %471 = %464.1;
  %472 = %468.1;
  (%465, %469, meta[relay.Constant][24] /* ty=Tensor[(1080), float64] */, %470, meta[relay.Constant][25] /* ty=Tensor[(819), int16] */, %471, %472)
}

def @func_980() -> (Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) {
  %473 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %474 = %473.3;
  %475 = cast(%474, dtype="float32") /* ty=Tensor[(168), float32] */;
  %476 = reshape(%475, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %477 = @func_782(%476) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %478 = @func_723() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %479 = %477.2;
  %480 = %478.0;
  (%474, %479, %480)
}

def @func_4619() -> (Tensor[(6, 28), float32],) {
  %481 = @func_4162() /* ty=Tensor[(6, 28), float32] */;
  (%481,)
}

def @func_8120() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) {
  %482 = @func_5003() /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(1080), float64], Tensor[(9, 4, 6), bool], Tensor[(819), int16], Tensor[(9, 4, 6), float32], Tensor[(168), float32]) */;
  %483 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
  %484 = %482.1;
  %485 = %483.0;
  (%484, %485)
}

def @func_7770() -> Tensor[(?, 180), uint8] {
  %486 = @func_5518() /* ty=Tensor[(1, 180), uint16] */;
  %487 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 180), uint16] */, dtype="uint8") /* ty=Tensor[(1, 180), uint8] */;
  %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(2), int32] */;
  %489 = cast(%486, dtype="uint8") /* ty=Tensor[(1, 180), uint8] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  bitwise_and(%489, %490) /* ty=Tensor[(?, 180), uint8] */
}

def @func_3877(%var_3757: Tensor[(9, 7, 13), int16], %var_3758: Tensor[(9, 7, 13), int16]) -> (Tensor[(9, 7, 13), uint16], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 7, 13), int32], Tensor[(168), float64], Tensor[(9, 12, 10), float64], Tensor[(1080), float64], Tensor[(6, 4, 7), int8]) {
  %491 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 7, 13), int16] */, dtype="uint16") /* ty=Tensor[(9, 7, 13), uint16] */;
  %492 = shape_of(%var_3757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%var_3757, dtype="uint16") /* ty=Tensor[(9, 7, 13), uint16] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %495 = cast(meta[relay.Constant][28] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %496 = reshape(%495, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %497 = @func_1597(%496) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(9, 4, 6), float64]) */;
  %498 = cast(%var_3758, dtype="int16") /* ty=Tensor[(9, 7, 13), int16] */;
  %499 = shape_of(%var_3757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%var_3757, dtype="int16") /* ty=Tensor[(9, 7, 13), int16] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %502 = logical_xor(%500, %501) /* ty=Tensor[(9, 7, 13), int16] */;
  %503 = cast(%502, dtype="uint64") /* ty=Tensor[(9, 7, 13), uint64] */;
  %504 = shape_of(%var_3757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%var_3757, dtype="uint64") /* ty=Tensor[(9, 7, 13), uint64] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %507 = minimum(%505, %506) /* ty=Tensor[(9, 7, 13), uint64] */;
  %508 = cast(%var_3758, dtype="int32") /* ty=Tensor[(9, 7, 13), int32] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%507, dtype="int32") /* ty=Tensor[(9, 7, 13), int32] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %512 = cast(meta[relay.Constant][28] /* ty=Tensor[(168), float32] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %513 = cast(meta[relay.Constant][29] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %514 = cast(meta[relay.Constant][29] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %515 = reshape(%513, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %516 = reshape(%514, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %517 = @func_1210(%515, %516) /* ty=(Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) */;
  %518 = cast(meta[relay.Constant][28] /* ty=Tensor[(168), float32] */, dtype="bool") /* ty=Tensor[(168), bool] */;
  %519 = reshape(%518, newshape=[1, 168]) /* ty=Tensor[(1, 168), bool] */;
  %520 = @func_2306(%519) /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(1, 168), bool]) */;
  %521 = subtract(%493, %494) /* ty=Tensor[(9, 7, 13), uint16] */;
  %522 = @func_2264() /* ty=Tensor[(9, 4, 6), bool] */;
  %523 = %497.3;
  %524 = right_shift(%510, %511) /* ty=Tensor[(9, 7, 13), int32] */;
  %525 = asin(%512) /* ty=Tensor[(168), float64] */;
  %526 = %517.0;
  %527 = %520.2;
  (%521, %522, %523, %524, %525, %526, meta[relay.Constant][29] /* ty=Tensor[(1080), float64] */, %527)
}

def @func_723() -> (Tensor[(9, 4, 6), bool],) {
  %528 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %529 = %528.0;
  %530 = @func_288() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %531 = %530.0;
  %532 = cast(%531, dtype="int8") /* ty=Tensor[(9, 4, 6), int8] */;
  %533 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%529, dtype="int8") /* ty=Tensor[(9, 4, 6), int8] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %536 = bitwise_xor(%534, %535) /* ty=Tensor[(9, 4, 6), int8] */;
  %537 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %538 = %537.1;
  %539 = cast(%538, dtype="float32") /* ty=Tensor[(9, 4, 6), float32] */;
  %540 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%529, dtype="float32") /* ty=Tensor[(9, 4, 6), float32] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %543 = floor_mod(%541, %542) /* ty=Tensor[(9, 4, 6), float32] */;
  %544 = cast(%543, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %545 = shape_of(%536, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%536, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %548 = less_equal(%546, %547) /* ty=Tensor[(9, 4, 6), bool] */;
  (%548,)
}

def @func_2564(%var_2555: Tensor[(168), bool]) -> (Tensor[(9, 4, 6), float64], Tensor[(360), float32], Tensor[(168), bool]) {
  %549 = cast(%var_2555, dtype="bool") /* ty=Tensor[(168), bool] */;
  %550 = reshape(%549, newshape=[1, 168]) /* ty=Tensor[(1, 168), bool] */;
  %551 = @func_2306(%550) /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(1, 168), bool]) */;
  %552 = @func_427() /* ty=Tensor[(9, 4, 6), float64] */;
  %553 = %551.0;
  (%552, %553, %var_2555)
}

def @func_7080() -> (Tensor[(9, 4, 6), bool],) {
  %554 = @func_6375() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %555 = %554.0;
  (%555,)
}

def @func_1388() -> (Tensor[(9, 4, 6), bool],) {
  %556 = @func_723() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %557 = %556.0;
  (%557,)
}

def @func_7858() -> (Tensor[(1080), float64],) {
  %558 = @func_7370() /* ty=(Tensor[(360), float32], Tensor[(168), float32], Tensor[(1080), float64]) */;
  %559 = %558.2;
  (%559,)
}

def @func_4422() -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool]) {
  %560 = @func_1270() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %561 = %560.0;
  %562 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 4, 6), bool] */, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%561, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %566 = @func_2668() /* ty=Tensor[(360), float32] */;
  %567 = greater(%564, %565) /* ty=Tensor[(9, 4, 6), bool] */;
  (%566, %567)
}

def @func_2748(%var_2714: Tensor[(13, 10, 11), float32], %var_2715: Tensor[(13, 10, 11), float32]) -> (Tensor[(13, 10, 11), float32],) {
  %568 = cast(%var_2715, dtype="float32") /* ty=Tensor[(13, 10, 11), float32] */;
  %569 = shape_of(%var_2714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%var_2714, dtype="float32") /* ty=Tensor[(13, 10, 11), float32] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %572 = floor_divide(%570, %571) /* ty=Tensor[(13, 10, 11), float32] */;
  (%572,)
}

def @func_1270() -> (Tensor[(9, 4, 6), bool],) {
  %573 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  (%573,)
}

def @func_3601(%var_3581: Tensor[(5, 13, 7), float32]) -> Tensor[(5, 13, 7), uint16] {
  %574 = cast(%var_3581, dtype="float32") /* ty=Tensor[(5, 13, 7), float32] */;
  %575 = log(%574) /* ty=Tensor[(5, 13, 7), float32] */;
  %576 = cast(%575, dtype="float64") /* ty=Tensor[(5, 13, 7), float64] */;
  %577 = acos(%576) /* ty=Tensor[(5, 13, 7), float64] */;
  %578 = cast(%575, dtype="uint16") /* ty=Tensor[(5, 13, 7), uint16] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%577, dtype="uint16") /* ty=Tensor[(5, 13, 7), uint16] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  right_shift(%580, %581) /* ty=Tensor[(5, 13, 7), uint16] */
}

def @func_4214() -> (Tensor[(9, 4, 6), bool],) {
  %582 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %583 = %582.2;
  (%583,)
}

def @func_2264() -> Tensor[(9, 4, 6), bool] {
  %584 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %584.1
}

def @func_7294(%var_7282: Tensor[(4, 14, 13), float64]) -> (Tensor[(4, 14, 13), float64],) {
  %585 = cast(%var_7282, dtype="float64") /* ty=Tensor[(4, 14, 13), float64] */;
  %586 = log(%585) /* ty=Tensor[(4, 14, 13), float64] */;
  (%586,)
}

def @func_4345() -> (Tensor[(9, 4, 6), float64],) {
  %587 = @func_2855() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(360), float32]) */;
  %588 = %587.0;
  (%588,)
}

def @func_7370() -> (Tensor[(360), float32], Tensor[(168), float32], Tensor[(1080), float64]) {
  %589 = @func_3662() /* ty=(Tensor[(360), float32],) */;
  %590 = cast(meta[relay.Constant][31] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %591 = reshape(%590, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
  %592 = @func_2428(%591) /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(?, 13, 11), bool], Tensor[(9, 12, 10), bool], Tensor[(1080), float64]) */;
  %593 = %589.0;
  %594 = %592.2;
  (%593, %594, meta[relay.Constant][31] /* ty=Tensor[(1080), float64] */)
}

def @func_2916(%var_2893: int64, %var_2894: Tensor[(15, 8, 15), int64]) -> (Tensor[(15, 8, 15), bool],) {
  %595 = cast(%var_2893, dtype="int64") /* ty=int64 */;
  %596 = cast(%var_2894, dtype="int64") /* ty=Tensor[(15, 8, 15), int64] */;
  %597 = bitwise_or(%595, %596) /* ty=Tensor[(15, 8, 15), int64] */;
  %598 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 8, 15), int64] */, dtype="bool") /* ty=Tensor[(15, 8, 15), bool] */;
  %599 = shape_of(%597, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(%597, dtype="bool") /* ty=Tensor[(15, 8, 15), bool] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %602 = greater(%600, %601) /* ty=Tensor[(15, 8, 15), bool] */;
  (%602,)
}

def @func_2392(%var_2367: Tensor[(9, 4, 6), bool]) -> (Tensor[(9, 4, 6), uint16], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32]) {
  %603 = @func_2264() /* ty=Tensor[(9, 4, 6), bool] */;
  %604 = cast(%var_2367, dtype="uint16") /* ty=Tensor[(9, 4, 6), uint16] */;
  %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%603, dtype="uint16") /* ty=Tensor[(9, 4, 6), uint16] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %608 = cast(%603, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %609 = reshape(%608, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), bool] */;
  %610 = @func_1805(%609) /* ty=(Tensor[(9, 4, 6), bool],) */;
  %611 = @func_1270() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %612 = %611.0;
  %613 = cast(%612, dtype="float32") /* ty=Tensor[(9, 4, 6), float32] */;
  %614 = multiply(%606, %607) /* ty=Tensor[(9, 4, 6), uint16] */;
  %615 = %610.0;
  %616 = cos(%613) /* ty=Tensor[(9, 4, 6), float32] */;
  (%614, %615, %616)
}

def @func_5569(%var_5540: Tensor[(15, 3, 4), float32]) -> (Tensor[(15, 3, 4), float32], Tensor[(455, 1), float32], Tensor[(9, 4, 6), uint16], Tensor[(216), float64]) {
  %617 = cast(%var_5540, dtype="float32") /* ty=Tensor[(15, 3, 4), float32] */;
  %618 = @func_5389() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(5, 13, 7), uint16], Tensor[(455, 1), float32]) */;
  %619 = cast(meta[relay.Constant][33] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %620 = reshape(%619, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), float64] */;
  %621 = @func_1908(%620) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), uint16]) */;
  %622 = log10(%617) /* ty=Tensor[(15, 3, 4), float32] */;
  %623 = %618.2;
  %624 = %621.2;
  (%622, %623, %624, meta[relay.Constant][33] /* ty=Tensor[(216), float64] */)
}

def @func_7634() -> Tensor[(360), float32] {
  @func_6630() /* ty=Tensor[(360), float32] */
}

def @func_1435(%var_1423: Tensor[(1080), float64]) -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(1080), float64]) {
  %625 = @func_55() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %626 = cast(%var_1423, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %627 = cast(%var_1423, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %628 = reshape(%626, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %629 = reshape(%627, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %630 = @func_1210(%628, %629) /* ty=(Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) */;
  %631 = %625.1;
  %632 = %630.1;
  (%631, %632, %var_1423)
}

def @func_3662() -> (Tensor[(360), float32],) {
  %633 = @func_1774() /* ty=Tensor[(360), float32] */;
  (%633,)
}

def @func_2010() -> (Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool], Tensor[(6, 28), float32], Tensor[(?, 13, 11), bool]) {
  %634 = @func_288() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %635 = %634.0;
  %636 = cast(%635, dtype="float32") /* ty=Tensor[(9, 4, 6), float32] */;
  %637 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 28), float32] */, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %638 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 28), float32] */, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %639 = reshape(%637, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %640 = reshape(%638, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %641 = @func_188(%639, %640) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
  %642 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 13, 11), float32] */, dtype="float32") /* ty=Tensor[(1, 13, 11), float32] */;
  %643 = log2(%642) /* ty=Tensor[(1, 13, 11), float32] */;
  %644 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 13, 11), float32] */, dtype="bool") /* ty=Tensor[(1, 13, 11), bool] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="bool") /* ty=Tensor[(1, 13, 11), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %648 = exp(%636) /* ty=Tensor[(9, 4, 6), float32] */;
  %649 = %641.0;
  %650 = less_equal(%646, %647) /* ty=Tensor[(?, 13, 11), bool] */;
  (%648, %649, meta[relay.Constant][34] /* ty=Tensor[(6, 28), float32] */, %650)
}

def @func_4047() -> (Tensor[(360), float32], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) {
  %651 = cast(meta[relay.Constant][36] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %652 = reshape(%651, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %653 = @func_1077(%652) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), float64]) */;
  %654 = @func_3304() /* ty=Tensor[(360), float32] */;
  %655 = %653.0;
  (%654, %655, meta[relay.Constant][36] /* ty=Tensor[(168), float32] */)
}

def @func_2211() -> Tensor[(9, 4, 6), bool] {
  %656 = @func_2173() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool]) */;
  %656.1
}

def @func_4805() -> Tensor[(6, 28), int64] {
  %657 = @func_4730() /* ty=(Tensor[(6, 28), int64],) */;
  %657.0
}

def @func_6877(%var_6872: Tensor[(12, 10, 1), float64]) -> Tensor[(12, 10, 10), float64] {
  %658 = cast(%var_6872, dtype="float64") /* ty=Tensor[(12, 10, 1), float64] */;
  %659 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 10, 10), float64] */, dtype="float64") /* ty=Tensor[(12, 10, 10), float64] */;
  floor_mod(%658, %659) /* ty=Tensor[(12, 10, 10), float64] */
}

def @func_7322(%var_7304: Tensor[(455, 7), float32]) -> (Tensor[(455, 7), uint16], Tensor[(455, 7), bool], Tensor[(455, 1), float32]) {
  %660 = @func_5389() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(5, 13, 7), uint16], Tensor[(455, 1), float32]) */;
  %661 = %660.2;
  %662 = cast(%661, dtype="uint16") /* ty=Tensor[(455, 1), uint16] */;
  %663 = cast(%var_7304, dtype="uint16") /* ty=Tensor[(455, 7), uint16] */;
  %664 = cast(%661, dtype="bool") /* ty=Tensor[(455, 1), bool] */;
  %665 = cast(%var_7304, dtype="bool") /* ty=Tensor[(455, 7), bool] */;
  %666 = cast(%661, dtype="float32") /* ty=Tensor[(455, 1), float32] */;
  %667 = bitwise_or(%662, %663) /* ty=Tensor[(455, 7), uint16] */;
  %668 = less(%664, %665) /* ty=Tensor[(455, 7), bool] */;
  %669 = log2(%666) /* ty=Tensor[(455, 1), float32] */;
  (%667, %668, %669)
}

def @func_55() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  %670 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  %671 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  (%670, %671)
}

def @func_1774() -> Tensor[(360), float32] {
  %672 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
  %672.4
}

def @func_2855() -> (Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(360), float32]) {
  %673 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %674 = @func_1743() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %675 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %676 = %674.1;
  %677 = cast(%676, dtype="float32") /* ty=Tensor[(168), float32] */;
  %678 = reshape(%677, newshape=[168, 1]) /* ty=Tensor[(168, 1), float32] */;
  %679 = @func_1960(%678) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168, 1), float32], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(1080), float64]) */;
  %680 = @func_2485() /* ty=(Tensor[(168), float32], Tensor[(360), float32]) */;
  %681 = %673.1;
  %682 = %675.2;
  %683 = %679.1;
  %684 = %680.1;
  (%681, %676, %682, %683, %684)
}

def @func_4796() -> (Tensor[(360), float32], Tensor[(6, 4, 7), uint16], Tensor[(216), bool], Tensor[(9, 4, 6), float64], Tensor[(1080, 1), float64]) {
  %685 = cast(meta[relay.Constant][38] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %686 = reshape(%685, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %687 = @func_1626(%686) /* ty=(Tensor[(6, 4, 7), uint16], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool]) */;
  %688 = cast(meta[relay.Constant][39] /* ty=Tensor[(1080, 1), float64] */, dtype="float64") /* ty=Tensor[(1080, 1), float64] */;
  %689 = reshape(%688, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
  %690 = @func_1435(%689) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(1080), float64]) */;
  %691 = @func_3304() /* ty=Tensor[(360), float32] */;
  %692 = %687.0;
  %693 = %690.1;
  (%691, %692, meta[relay.Constant][38] /* ty=Tensor[(216), bool] */, %693, meta[relay.Constant][39] /* ty=Tensor[(1080, 1), float64] */)
}

def @func_6458() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 28), int64]) {
  %694 = @func_2547() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), int8], Tensor[(9, 4, 6), bool]) */;
  %695 = @func_4730() /* ty=(Tensor[(6, 28), int64],) */;
  %696 = %695.0;
  %697 = cast(%696, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %698 = atanh(%697) /* ty=Tensor[(6, 28), float32] */;
  %699 = cast(%698, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %700 = sigmoid(%699) /* ty=Tensor[(6, 28), float32] */;
  %701 = cast(%696, dtype="int64") /* ty=Tensor[(6, 28), int64] */;
  %702 = shape_of(%700, dtype="int32") /* ty=Tensor[(2), int32] */;
  %703 = cast(%700, dtype="int64") /* ty=Tensor[(6, 28), int64] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %705 = @func_5099() /* ty=Tensor[(9, 4, 6), bool] */;
  %706 = %694.0;
  %707 = multiply(%703, %704) /* ty=Tensor[(6, 28), int64] */;
  (%705, %706, %707)
}

def @func_5099() -> Tensor[(9, 4, 6), bool] {
  @func_2118() /* ty=Tensor[(9, 4, 6), bool] */
}

def @func_4864(%var_4840: Tensor[(3, 1, 7), int64], %var_4841: Tensor[(3, 11, 7), int64]) -> (Tensor[(3, 11, 7), bool], Tensor[(13, 4, 15), float64], Tensor[(780), float64], Tensor[(9, 4, 6), bool], Tensor[(1080), float64]) {
  %708 = cast(%var_4840, dtype="bool") /* ty=Tensor[(3, 1, 7), bool] */;
  %709 = cast(%var_4841, dtype="bool") /* ty=Tensor[(3, 11, 7), bool] */;
  %710 = cast(meta[relay.Constant][40] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %711 = reshape(%710, newshape=[13, 4, 15]) /* ty=Tensor[(13, 4, 15), float64] */;
  %712 = @func_3168(%711) /* ty=(Tensor[(13, 4, 15), float64],) */;
  %713 = cast(meta[relay.Constant][41] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %714 = reshape(%713, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
  %715 = @func_1435(%714) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(1080), float64]) */;
  %716 = equal(%708, %709) /* ty=Tensor[(3, 11, 7), bool] */;
  %717 = %712.0;
  %718 = %715.0;
  (%716, %717, meta[relay.Constant][40] /* ty=Tensor[(780), float64] */, %718, meta[relay.Constant][41] /* ty=Tensor[(1080), float64] */)
}

def @func_272() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) {
  %719 = @func_55() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %720 = %719.1;
  %721 = cast(%720, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
  %722 = cast(meta[relay.Constant][42] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %723 = cast(meta[relay.Constant][42] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %724 = reshape(%722, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %725 = reshape(%723, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %726 = @func_188(%724, %725) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
  %727 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  %728 = log10(%721) /* ty=Tensor[(9, 4, 6), float64] */;
  %729 = %726.0;
  (%727, %728, %729, meta[relay.Constant][42] /* ty=Tensor[(168), float32] */)
}

def @func_3168(%var_3164: Tensor[(13, 4, 15), float64]) -> (Tensor[(13, 4, 15), float64],) {
  %730 = cast(%var_3164, dtype="float64") /* ty=Tensor[(13, 4, 15), float64] */;
  %731 = cosh(%730) /* ty=Tensor[(13, 4, 15), float64] */;
  (%731,)
}

def @func_4586(%var_4572: Tensor[(56), float32], %var_4573: Tensor[(280), float32]) -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(8, 7, 5), bool], Tensor[(56), float32], Tensor[(280), float32], Tensor[(9, 4, 6), float64]) {
  %732 = @func_2547() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), int8], Tensor[(9, 4, 6), bool]) */;
  %733 = cast(%var_4572, dtype="float32") /* ty=Tensor[(56), float32] */;
  %734 = cast(%var_4573, dtype="float32") /* ty=Tensor[(280), float32] */;
  %735 = %732.2;
  %736 = cast(%735, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %737 = reshape(%733, newshape=[8, 7, 1]) /* ty=Tensor[(8, 7, 1), float32] */;
  %738 = reshape(%734, newshape=[8, 7, 5]) /* ty=Tensor[(8, 7, 5), float32] */;
  %739 = reshape(%736, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %740 = @func_3268(%737, %738, %739) /* ty=(Tensor[(8, 7, 5), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(8, 7, 5), uint32]) */;
  %741 = @func_2264() /* ty=Tensor[(9, 4, 6), bool] */;
  %742 = %740.0;
  %743 = @func_1763() /* ty=Tensor[(9, 4, 6), float64] */;
  (%735, %741, %742, %var_4572, %var_4573, %743)
}

def @func_319() -> (Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) {
  %744 = @func_288() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %745 = cast(meta[relay.Constant][43] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %746 = cast(meta[relay.Constant][43] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %747 = reshape(%745, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %748 = reshape(%746, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %749 = @func_188(%747, %748) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
  %750 = %744.0;
  %751 = %749.2;
  (%750, %751, meta[relay.Constant][43] /* ty=Tensor[(168), float32] */)
}

def @func_6375() -> (Tensor[(9, 4, 6), bool],) {
  %752 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  (%752,)
}

def @func_5910() -> (Tensor[(9, 4, 6), bool],) {
  %753 = @func_5798() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %754 = %753.1;
  (%754,)
}

def @func_603() -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) {
  %755 = @func_319() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %756 = cast(meta[relay.Constant][44] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %757 = reshape(%756, newshape=[15, 4, 6]) /* ty=Tensor[(15, 4, 6), float32] */;
  %758 = @func_319() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %759 = @func_427() /* ty=Tensor[(9, 4, 6), float64] */;
  %760 = @func_427() /* ty=Tensor[(9, 4, 6), float64] */;
  %761 = %755.0;
  %762 = @func_455(%757) /* ty=Tensor[(15, 4, 6), float32] */;
  %763 = %758.1;
  (%759, %760, %761, %762, meta[relay.Constant][44] /* ty=Tensor[(360), float32] */, %763)
}

def @func_2094() -> (Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) {
  %764 = cast(meta[relay.Constant][45] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %765 = reshape(%764, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %766 = @func_1626(%765) /* ty=(Tensor[(6, 4, 7), uint16], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool]) */;
  %767 = cast(meta[relay.Constant][45] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %768 = reshape(%767, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), bool] */;
  %769 = @func_1805(%768) /* ty=(Tensor[(9, 4, 6), bool],) */;
  %770 = @func_1336() /* ty=Tensor[(168), float32] */;
  %771 = cast(%770, dtype="float32") /* ty=Tensor[(168), float32] */;
  %772 = reshape(%771, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %773 = @func_1077(%772) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), float64]) */;
  %774 = %766.2;
  %775 = %769.0;
  %776 = %773.4;
  (%770, %774, meta[relay.Constant][45] /* ty=Tensor[(216), bool] */, %775, %776)
}

def @func_2668() -> Tensor[(360), float32] {
  @func_1774() /* ty=Tensor[(360), float32] */
}

def @func_5489() -> (Tensor[(9, 4, 6), float64], Tensor[(168), float32]) {
  %777 = @func_2094() /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) */;
  %778 = @func_5412() /* ty=Tensor[(9, 4, 6), float64] */;
  %779 = %777.0;
  (%778, %779)
}

def @func_7947() -> Tensor[(360), float32] {
  @func_6630() /* ty=Tensor[(360), float32] */
}

def @func_3089() -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool]) {
  %780 = @func_2547() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), int8], Tensor[(9, 4, 6), bool]) */;
  %781 = %780.0;
  %782 = cast(%781, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
  %783 = reshape(%782, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), float64] */;
  %784 = @func_1908(%783) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), uint16]) */;
  %785 = %784.0;
  (%781, %785)
}

def @func_7175(%var_7171: Tensor[(576, 1), float64]) -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), uint16], Tensor[(576, 1), float64]) {
  %786 = @func_2855() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(360), float32]) */;
  %787 = cast(%var_7171, dtype="float64") /* ty=Tensor[(576, 1), float64] */;
  %788 = %786.0;
  %789 = cast(%788, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %790 = reshape(%787, newshape=[12, 3, 16]) /* ty=Tensor[(12, 3, 16), float64] */;
  %791 = reshape(%789, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %792 = @func_3567(%790, %791) /* ty=(Tensor[(9, 4, 6), uint16], Tensor[(216), bool], Tensor[(12, 3, 16), uint32], Tensor[(168), float32]) */;
  %793 = @func_6826() /* ty=Tensor[(9, 4, 6), bool] */;
  %794 = %792.0;
  (%788, %793, %794, %var_7171)
}

def @func_2328() -> Tensor[(4, 5, 10), float64] {
  %795 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 5, 10), uint32] */, dtype="bool") /* ty=Tensor[(4, 5, 10), bool] */;
  %796 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(4, 5, 10), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 5, 10), uint32] */, dtype="bool") /* ty=Tensor[(4, 5, 10), bool] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %799 = greater_equal(%797, %798) /* ty=Tensor[(4, 5, 10), bool] */;
  %800 = cast(%799, dtype="float64") /* ty=Tensor[(4, 5, 10), float64] */;
  cos(%800) /* ty=Tensor[(4, 5, 10), float64] */
}

def @func_1077(%var_1004: Tensor[(168), float32]) -> (Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), float64]) {
  %801 = cast(%var_1004, dtype="float32") /* ty=Tensor[(168), float32] */;
  %802 = cast(%var_1004, dtype="float32") /* ty=Tensor[(168), float32] */;
  %803 = reshape(%801, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %804 = reshape(%802, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %805 = @func_188(%803, %804) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
  %806 = @func_723() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %807 = %805.2;
  %808 = cast(%807, dtype="bool") /* ty=Tensor[(6, 4, 7), bool] */;
  %809 = reshape(%808, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), bool] */;
  %810 = @func_635(%809) /* ty=(Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), bool]) */;
  %811 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %812 = %811.1;
  %813 = cast(%812, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
  %814 = acosh(%813) /* ty=Tensor[(9, 4, 6), float64] */;
  %815 = cast(%814, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
  %816 = %806.0;
  %817 = %810.0;
  %818 = tan(%815) /* ty=Tensor[(9, 4, 6), float64] */;
  (%807, %var_1004, %816, %817, %818)
}

def @func_427() -> Tensor[(9, 4, 6), float64] {
  %819 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  %820 = cast(meta[relay.Constant][48] /* ty=Tensor[(9, 4, 6), bool] */, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
  %821 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(%819, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%822, %823) /* ty=Tensor[(9, 4, 6), float64] */
}

def @func_3739(%var_3731: Tensor[(1, 12, 4), float32]) -> Tensor[(1, 12, 4), float32] {
  %824 = cast(%var_3731, dtype="float32") /* ty=Tensor[(1, 12, 4), float32] */;
  erf(%824) /* ty=Tensor[(1, 12, 4), float32] */
}

def @func_1302(%var_1288: Tensor[(360), float32]) -> (Tensor[(9, 4, 6), float64], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(9, 12, 10), float64], Tensor[(1080), float64], Tensor[(15, 4, 6), float32]) {
  %825 = @func_1137() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32]) */;
  %826 = cast(%var_1288, dtype="float32") /* ty=Tensor[(360), float32] */;
  %827 = reshape(%826, newshape=[15, 4, 6]) /* ty=Tensor[(15, 4, 6), float32] */;
  %828 = cast(meta[relay.Constant][49] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %829 = cast(meta[relay.Constant][49] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %830 = reshape(%828, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %831 = reshape(%829, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %832 = @func_1210(%830, %831) /* ty=(Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) */;
  %833 = @func_455(%827) /* ty=Tensor[(15, 4, 6), float32] */;
  %834 = cast(%833, dtype="float32") /* ty=Tensor[(15, 4, 6), float32] */;
  %835 = reshape(%834, newshape=[15, 4, 6]) /* ty=Tensor[(15, 4, 6), float32] */;
  %836 = %825.0;
  %837 = %832.0;
  %838 = @func_455(%835) /* ty=Tensor[(15, 4, 6), float32] */;
  (%836, %833, %var_1288, %837, meta[relay.Constant][49] /* ty=Tensor[(1080), float64] */, %838)
}

def @func_5798() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  %839 = @func_55() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %840 = %839.0;
  %841 = @func_2118() /* ty=Tensor[(9, 4, 6), bool] */;
  (%840, %841)
}

def @func_288() -> (Tensor[(9, 4, 6), bool],) {
  %842 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %843 = %842.1;
  (%843,)
}

def @func_6092() -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 12, 10), bool], Tensor[(18, 60), float64], Tensor[(13, 10, 11), float32], Tensor[(1430, 1), float32], Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(360), float32]) {
  %844 = cast(meta[relay.Constant][50] /* ty=Tensor[(18, 60), float64] */, dtype="float64") /* ty=Tensor[(18, 60), float64] */;
  %845 = cast(meta[relay.Constant][50] /* ty=Tensor[(18, 60), float64] */, dtype="float64") /* ty=Tensor[(18, 60), float64] */;
  %846 = reshape(%844, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %847 = reshape(%845, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %848 = @func_1210(%846, %847) /* ty=(Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) */;
  %849 = cast(meta[relay.Constant][51] /* ty=Tensor[(1430, 1), float32] */, dtype="float32") /* ty=Tensor[(1430, 1), float32] */;
  %850 = cast(meta[relay.Constant][51] /* ty=Tensor[(1430, 1), float32] */, dtype="float32") /* ty=Tensor[(1430, 1), float32] */;
  %851 = reshape(%849, newshape=[13, 10, 11]) /* ty=Tensor[(13, 10, 11), float32] */;
  %852 = reshape(%850, newshape=[13, 10, 11]) /* ty=Tensor[(13, 10, 11), float32] */;
  %853 = @func_2748(%851, %852) /* ty=(Tensor[(13, 10, 11), float32],) */;
  %854 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %855 = @func_2094() /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) */;
  %856 = @func_2668() /* ty=Tensor[(360), float32] */;
  %857 = @func_2871() /* ty=Tensor[(9, 4, 6), bool] */;
  %858 = %848.2;
  %859 = %853.0;
  %860 = %854.1;
  %861 = %855.4;
  %862 = @func_2668() /* ty=Tensor[(360), float32] */;
  (%856, %857, %858, meta[relay.Constant][50] /* ty=Tensor[(18, 60), float64] */, %859, meta[relay.Constant][51] /* ty=Tensor[(1430, 1), float32] */, %860, %861, %862)
}

def @func_7230(%var_7215: Tensor[(6, 28), int64]) -> (Tensor[(360), float32], Tensor[(6, 28), float32], Tensor[(6, 28), bool]) {
  %863 = @func_5136() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(360), float32]) */;
  %864 = @func_4805() /* ty=Tensor[(6, 28), int64] */;
  %865 = cast(%var_7215, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %866 = shape_of(%864, dtype="int32") /* ty=Tensor[(2), int32] */;
  %867 = cast(%864, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %868 = dyn.reshape(%865, %866, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %869 = cast(meta[relay.Constant][52] /* ty=Tensor[(6, 28), int64] */, dtype="int32") /* ty=Tensor[(6, 28), int32] */;
  %870 = shape_of(%864, dtype="int32") /* ty=Tensor[(2), int32] */;
  %871 = cast(%864, dtype="int32") /* ty=Tensor[(6, 28), int32] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %873 = bitwise_or(%871, %872) /* ty=Tensor[(6, 28), int32] */;
  %874 = cast(meta[relay.Constant][52] /* ty=Tensor[(6, 28), int64] */, dtype="bool") /* ty=Tensor[(6, 28), bool] */;
  %875 = shape_of(%873, dtype="int32") /* ty=Tensor[(2), int32] */;
  %876 = cast(%873, dtype="bool") /* ty=Tensor[(6, 28), bool] */;
  %877 = dyn.reshape(%874, %875, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %878 = %863.1;
  %879 = floor_divide(%867, %868) /* ty=Tensor[(6, 28), float32] */;
  %880 = less(%876, %877) /* ty=Tensor[(6, 28), bool] */;
  (%878, %879, %880)
}

def @func_6129(%var_6126: Tensor[(10, 8, 5), float32]) -> Tensor[(10, 8, 5), float32] {
  %881 = cast(%var_6126, dtype="float32") /* ty=Tensor[(10, 8, 5), float32] */;
  exp(%881) /* ty=Tensor[(10, 8, 5), float32] */
}

def @func_1336() -> Tensor[(168), float32] {
  %882 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %882.3
}

def @func_4900() -> (Tensor[(9, 4, 6), float64],) {
  %883 = @func_2094() /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) */;
  %884 = %883.4;
  (%884,)
}

def @func_5235(%var_5187: Tensor[(10, 16, 8), float64]) -> (Tensor[(360), float32], Tensor[(10, 16, 8), bool], Tensor[(10, 16, 8), float64]) {
  %885 = cast(%var_5187, dtype="float64") /* ty=Tensor[(10, 16, 8), float64] */;
  %886 = acos(%885) /* ty=Tensor[(10, 16, 8), float64] */;
  %887 = cast(%886, dtype="float32") /* ty=Tensor[(10, 16, 8), float32] */;
  %888 = sqrt(%887) /* ty=Tensor[(10, 16, 8), float32] */;
  %889 = cast(%886, dtype="bool") /* ty=Tensor[(10, 16, 8), bool] */;
  %890 = shape_of(%888, dtype="int32") /* ty=Tensor[(3), int32] */;
  %891 = cast(%888, dtype="bool") /* ty=Tensor[(10, 16, 8), bool] */;
  %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %893 = cast(%886, dtype="float64") /* ty=Tensor[(10, 16, 8), float64] */;
  %894 = @func_3198() /* ty=Tensor[(360), float32] */;
  %895 = less(%891, %892) /* ty=Tensor[(10, 16, 8), bool] */;
  %896 = sigmoid(%893) /* ty=Tensor[(10, 16, 8), float64] */;
  (%894, %895, %896)
}

def @func_4953() -> (Tensor[(360), float32],) {
  %897 = @func_2485() /* ty=(Tensor[(168), float32], Tensor[(360), float32]) */;
  %898 = %897.1;
  (%898,)
}

def @func_188(%var_147: Tensor[(6, 4, 7), float32], %var_148: Tensor[(6, 4, 7), float32]) -> (Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) {
  %899 = cast(%var_148, dtype="bool") /* ty=Tensor[(6, 4, 7), bool] */;
  %900 = shape_of(%var_147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %901 = cast(%var_147, dtype="bool") /* ty=Tensor[(6, 4, 7), bool] */;
  %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %903 = @func_55() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %904 = cast(%var_147, dtype="bool") /* ty=Tensor[(6, 4, 7), bool] */;
  %905 = shape_of(%var_148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %906 = cast(%var_148, dtype="bool") /* ty=Tensor[(6, 4, 7), bool] */;
  %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %908 = not_equal(%901, %902) /* ty=Tensor[(6, 4, 7), bool] */;
  %909 = %903.0;
  %910 = logical_or(%906, %907) /* ty=Tensor[(6, 4, 7), bool] */;
  (%908, %909, %910)
}

def @func_1109(%var_1104: Tensor[(1, 360), float32]) -> (Tensor[(6, 4, 7), float32], Tensor[(15, 4, 6), float32], Tensor[(1, 360), float32]) {
  %911 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %912 = %911.2;
  %913 = cast(%912, dtype="float32") /* ty=Tensor[(6, 4, 7), float32] */;
  %914 = cast(%var_1104, dtype="float32") /* ty=Tensor[(1, 360), float32] */;
  %915 = reshape(%914, newshape=[15, 4, 6]) /* ty=Tensor[(15, 4, 6), float32] */;
  %916 = sin(%913) /* ty=Tensor[(6, 4, 7), float32] */;
  %917 = @func_455(%915) /* ty=Tensor[(15, 4, 6), float32] */;
  (%916, %917, %var_1104)
}

def @func_782(%var_772: Tensor[(168), float32]) -> (Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) {
  %918 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
  %919 = cast(%var_772, dtype="float32") /* ty=Tensor[(168), float32] */;
  %920 = cast(%var_772, dtype="float32") /* ty=Tensor[(168), float32] */;
  %921 = reshape(%919, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %922 = reshape(%920, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %923 = @func_188(%921, %922) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
  %924 = @func_319() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %925 = %918.1;
  %926 = %923.2;
  %927 = %924.0;
  (%925, %926, %var_772, %927)
}

def @func_5329() -> (Tensor[(9, 4, 6), uint8], Tensor[(9, 4, 6), float64]) {
  %928 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
  %929 = %928.1;
  %930 = cast(meta[relay.Constant][53] /* ty=Tensor[(9, 4, 6), float64] */, dtype="uint8") /* ty=Tensor[(9, 4, 6), uint8] */;
  %931 = shape_of(%929, dtype="int32") /* ty=Tensor[(3), int32] */;
  %932 = cast(%929, dtype="uint8") /* ty=Tensor[(9, 4, 6), uint8] */;
  %933 = dyn.reshape(%930, %931, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %934 = @func_2094() /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) */;
  %935 = bitwise_or(%932, %933) /* ty=Tensor[(9, 4, 6), uint8] */;
  %936 = %934.1;
  (%935, %936)
}

def @func_4548(%var_4463: Tensor[(288), float64]) -> (Tensor[(168), float32], Tensor[(3, 6, 16), bool], Tensor[(288), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32]) {
  %937 = @func_2485() /* ty=(Tensor[(168), float32], Tensor[(360), float32]) */;
  %938 = cast(%var_4463, dtype="float64") /* ty=Tensor[(288), float64] */;
  %939 = reshape(%938, newshape=[3, 6, 16]) /* ty=Tensor[(3, 6, 16), float64] */;
  %940 = @func_3124(%939) /* ty=(Tensor[(168), float32], Tensor[(3, 6, 16), bool]) */;
  %941 = @func_3343() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float32]) */;
  %942 = @func_1388() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %943 = %941.0;
  %944 = cast(%943, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
  %945 = reshape(%944, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), float64] */;
  %946 = @func_1908(%945) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), uint16]) */;
  %947 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
  %948 = %937.0;
  %949 = %940.1;
  %950 = %942.0;
  %951 = %946.1;
  %952 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  %953 = %947.3;
  (%948, %949, %var_4463, %943, %950, %951, %952, %953)
}

def @func_3343() -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float32]) {
  %954 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
  %955 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  %956 = cast(%955, dtype="float32") /* ty=Tensor[(9, 4, 6), float32] */;
  %957 = %954.0;
  %958 = asinh(%956) /* ty=Tensor[(9, 4, 6), float32] */;
  (%957, %958)
}

def @func_5886() -> Tensor[(360), float32] {
  %959 = @func_3662() /* ty=(Tensor[(360), float32],) */;
  %959.0
}

def @func_2118() -> Tensor[(9, 4, 6), bool] {
  @func_39() /* ty=Tensor[(9, 4, 6), bool] */
}

def @func_1597(%var_1550: Tensor[(168), float32]) -> (Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(9, 4, 6), float64]) {
  %960 = cast(%var_1550, dtype="float32") /* ty=Tensor[(168), float32] */;
  %961 = reshape(%960, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %962 = @func_782(%961) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %963 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  %964 = cast(%963, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %965 = %962.2;
  %966 = cast(%965, dtype="float32") /* ty=Tensor[(168), float32] */;
  %967 = reshape(%964, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), bool] */;
  %968 = reshape(%966, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %969 = @func_924(%967, %968) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), float64]) */;
  %970 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %971 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %972 = %969.0;
  %973 = %970.1;
  %974 = %971.1;
  (%963, %965, %var_1550, %972, %973, %974)
}

def @func_5692() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  %975 = @func_2547() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), int8], Tensor[(9, 4, 6), bool]) */;
  %976 = @func_1388() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %977 = %975.2;
  %978 = %976.0;
  (%977, %978)
}

def @func_455(%var_432: Tensor[(15, 4, 6), float32]) -> Tensor[(15, 4, 6), float32] {
  %979 = cast(%var_432, dtype="float32") /* ty=Tensor[(15, 4, 6), float32] */;
  sigmoid(%979) /* ty=Tensor[(15, 4, 6), float32] */
}

def @func_2632(%var_2597: Tensor[(11, 3, 7), uint64]) -> (Tensor[(168), float32], Tensor[(11, 3, 7), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(360), float32], Tensor[(9, 4, 6), bool]) {
  %980 = cast(%var_2597, dtype="uint64") /* ty=Tensor[(11, 3, 7), uint64] */;
  %981 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(11, 3, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %982 = cast(meta[relay.Constant][54] /* ty=Tensor[(11, 3, 7), uint64] */, dtype="uint64") /* ty=Tensor[(11, 3, 7), uint64] */;
  %983 = dyn.reshape(%980, %981, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %984 = right_shift(%982, %983) /* ty=Tensor[(11, 3, 7), uint64] */;
  %985 = cast(%984, dtype="float64") /* ty=Tensor[(11, 3, 7), float64] */;
  %986 = @func_1388() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %987 = @func_2173() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool]) */;
  %988 = @func_723() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %989 = @func_2453() /* ty=Tensor[(168), float32] */;
  %990 = sqrt(%985) /* ty=Tensor[(11, 3, 7), float64] */;
  %991 = @func_427() /* ty=Tensor[(9, 4, 6), float64] */;
  %992 = %986.0;
  %993 = %987.0;
  %994 = %988.0;
  (%989, %990, %991, %992, %993, %994)
}

def @func_4162() -> Tensor[(6, 28), float32] {
  %995 = @func_2010() /* ty=(Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool], Tensor[(6, 28), float32], Tensor[(?, 13, 11), bool]) */;
  %995.2
}

def @func_3198() -> Tensor[(360), float32] {
  %996 = @func_2173() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool]) */;
  %996.0
}

def @func_5122() -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool]) {
  %997 = @func_55() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %998 = @func_2668() /* ty=Tensor[(360), float32] */;
  %999 = %997.1;
  (%998, %999)
}

def @func_2173() -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool]) {
  %1000 = cast(meta[relay.Constant][55] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %1001 = reshape(%1000, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), float64] */;
  %1002 = @func_1908(%1001) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), uint16]) */;
  %1003 = cast(meta[relay.Constant][55] /* ty=Tensor[(216), float64] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %1004 = reshape(%1003, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), bool] */;
  %1005 = @func_1805(%1004) /* ty=(Tensor[(9, 4, 6), bool],) */;
  %1006 = %1005.0;
  %1007 = cast(meta[relay.Constant][55] /* ty=Tensor[(216), float64] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %1008 = shape_of(%1006, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1009 = cast(%1006, dtype="float32") /* ty=Tensor[(9, 4, 6), float32] */;
  %1010 = dyn.reshape(%1007, %1008, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1011 = @func_1515() /* ty=(Tensor[(15, 4, 6), float32], Tensor[(168), float32], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool]) */;
  %1012 = @func_1774() /* ty=Tensor[(360), float32] */;
  %1013 = %1002.0;
  %1014 = power(%1009, %1010) /* ty=Tensor[(9, 4, 6), float32] */;
  %1015 = %1011.2;
  (%1012, %1013, %1014, %1015)
}

def @func_7460(%var_7451: float64, %var_7452: Tensor[(2, 13, 2), float64]) -> (Tensor[(2, 13, 2), float64],) {
  %1016 = cast(%var_7451, dtype="float64") /* ty=float64 */;
  %1017 = cast(%var_7452, dtype="float64") /* ty=Tensor[(2, 13, 2), float64] */;
  %1018 = power(%1016, %1017) /* ty=Tensor[(2, 13, 2), float64] */;
  (%1018,)
}

def @func_1834(%var_1811: Tensor[(13, 9, 1), float32]) -> (Tensor[(13, 9, 1), float64], Tensor[(9, 4, 6), bool]) {
  %1019 = cast(%var_1811, dtype="float32") /* ty=Tensor[(13, 9, 1), float32] */;
  %1020 = log10(%1019) /* ty=Tensor[(13, 9, 1), float32] */;
  %1021 = cast(%1020, dtype="float64") /* ty=Tensor[(13, 9, 1), float64] */;
  %1022 = @func_1515() /* ty=(Tensor[(15, 4, 6), float32], Tensor[(168), float32], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool]) */;
  %1023 = acos(%1021) /* ty=Tensor[(13, 9, 1), float64] */;
  %1024 = %1022.3;
  (%1023, %1024)
}

def @func_6253(%var_6238: Tensor[(16, 12, 3), uint8], %var_6239: Tensor[(16, 12, 3), uint8]) -> (Tensor[(16, 12, 3), uint8],) {
  %1025 = cast(%var_6239, dtype="uint8") /* ty=Tensor[(16, 12, 3), uint8] */;
  %1026 = shape_of(%var_6238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1027 = cast(%var_6238, dtype="uint8") /* ty=Tensor[(16, 12, 3), uint8] */;
  %1028 = dyn.reshape(%1025, %1026, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1029 = right_shift(%1027, %1028) /* ty=Tensor[(16, 12, 3), uint8] */;
  (%1029,)
}

def @func_4730() -> (Tensor[(6, 28), int64],) {
  %1030 = @func_2010() /* ty=(Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool], Tensor[(6, 28), float32], Tensor[(?, 13, 11), bool]) */;
  %1031 = %1030.2;
  %1032 = cast(%1031, dtype="bool") /* ty=Tensor[(6, 28), bool] */;
  %1033 = reshape(%1032, newshape=[1, 168]) /* ty=Tensor[(1, 168), bool] */;
  %1034 = @func_2306(%1033) /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(1, 168), bool]) */;
  %1035 = %1034.3;
  %1036 = cast(%1035, dtype="int64") /* ty=Tensor[(1, 168), int64] */;
  %1037 = shape_of(%1031, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1038 = cast(%1031, dtype="int64") /* ty=Tensor[(6, 28), int64] */;
  %1039 = dyn.reshape(%1036, %1037, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %1040 = logical_xor(%1038, %1039) /* ty=Tensor[(6, 28), int64] */;
  (%1040,)
}

def @func_6947() -> Tensor[(9, 4, 6), float64] {
  %1041 = @func_5389() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(5, 13, 7), uint16], Tensor[(455, 1), float32]) */;
  %1041.0
}

def @func_7995(%var_7971: Tensor[(231, 1), uint64], %var_7988: int64, %var_7989: Tensor[(1800), int64]) -> (Tensor[(360), float32], Tensor[(168), float32], Tensor[(231, 1), uint64], Tensor[(9, 4, 6), float64], Tensor[(15, 8, 15), bool], int64, Tensor[(1800), int64], Tensor[(9, 4, 6), bool]) {
  %1042 = cast(%var_7971, dtype="uint64") /* ty=Tensor[(231, 1), uint64] */;
  %1043 = reshape(%1042, newshape=[11, 3, 7]) /* ty=Tensor[(11, 3, 7), uint64] */;
  %1044 = @func_2632(%1043) /* ty=(Tensor[(168), float32], Tensor[(11, 3, 7), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(360), float32], Tensor[(9, 4, 6), bool]) */;
  %1045 = cast(%var_7988, dtype="int64") /* ty=int64 */;
  %1046 = cast(%var_7989, dtype="int64") /* ty=Tensor[(1800), int64] */;
  %1047 = reshape(%1045, newshape=[]) /* ty=int64 */;
  %1048 = reshape(%1046, newshape=[15, 8, 15]) /* ty=Tensor[(15, 8, 15), int64] */;
  %1049 = @func_2916(%1047, %1048) /* ty=(Tensor[(15, 8, 15), bool],) */;
  %1050 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %1051 = @func_1774() /* ty=Tensor[(360), float32] */;
  %1052 = %1044.0;
  %1053 = @func_1763() /* ty=Tensor[(9, 4, 6), float64] */;
  %1054 = %1049.0;
  %1055 = %1050.0;
  (%1051, %1052, %var_7971, %1053, %1054, %var_7988, %var_7989, %1055)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6631() -> Tensor[(360), float32] {
  %1 = fn () -> Tensor[(360), float32] {
    %0 = @func_4047() /* ty=(Tensor[(360), float32], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
    %0.0
  };
  %1() /* ty=Tensor[(360), float32] */
}

def @func_8053(%var_8051: Tensor[(15, 2, 6), int16], %var_8052: Tensor[(15, 2, 6), int16]) -> (Tensor[(15, 2, 6), int16],) {
  %7 = fn (%var_8037: Tensor[(15, 2, 6), int16], %var_8038: Tensor[(15, 2, 6), int16]) -> (Tensor[(15, 2, 6), int16],) {
    %2 = cast(%var_8038, dtype="int16") /* ty=Tensor[(15, 2, 6), int16] */;
    %3 = shape_of(%var_8037, dtype="int32") /* ty=Tensor[(3), int32] */;
    %4 = cast(%var_8037, dtype="int16") /* ty=Tensor[(15, 2, 6), int16] */;
    %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %6 = minimum(%4, %5) /* ty=Tensor[(15, 2, 6), int16] */;
    (%6,)
  };
  %7(%var_8051, %var_8052) /* ty=(Tensor[(15, 2, 6), int16],) */
}

def @func_1962(%var_1961: Tensor[(168, 1), float32]) -> (Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168, 1), float32], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(1080), float64]) {
  %21 = fn (%var_1942: Tensor[(168, 1), float32]) -> (Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168, 1), float32], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(1080), float64]) {
    %8 = @func_1270() /* ty=(Tensor[(9, 4, 6), bool],) */;
    %9 = cast(%var_1942, dtype="float32") /* ty=Tensor[(168, 1), float32] */;
    %10 = reshape(%9, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %11 = @func_1077(%10) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), float64]) */;
    %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
    %13 = reshape(%12, newshape=[15, 4, 6]) /* ty=Tensor[(15, 4, 6), float32] */;
    %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
    %15 = reshape(%14, newshape=[360]) /* ty=Tensor[(360), float32] */;
    %16 = @func_1302(%15) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(9, 12, 10), float64], Tensor[(1080), float64], Tensor[(15, 4, 6), float32]) */;
    %17 = %8.0;
    %18 = %11.1;
    %19 = @func_455(%13) /* ty=Tensor[(15, 4, 6), float32] */;
    %20 = %16.4;
    (%17, %18, %var_1942, %19, meta[relay.Constant][0] /* ty=Tensor[(360), float32] */, %20)
  };
  %21(%var_1961) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168, 1), float32], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(1080), float64]) */
}

def @func_6312() -> Tensor[(168), float32] {
  @func_6310() /* ty=Tensor[(168), float32] */
}

def @func_6094() -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 12, 10), bool], Tensor[(18, 60), float64], Tensor[(13, 10, 11), float32], Tensor[(1430, 1), float32], Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(360), float32]) {
  @func_6092() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 12, 10), bool], Tensor[(18, 60), float64], Tensor[(13, 10, 11), float32], Tensor[(1430, 1), float32], Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(360), float32]) */
}

def @func_3663() -> (Tensor[(360), float32],) {
  %23 = fn () -> (Tensor[(360), float32],) {
    %22 = @func_1774() /* ty=Tensor[(360), float32] */;
    (%22,)
  };
  %23() /* ty=(Tensor[(360), float32],) */
}

def @func_274() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) {
  @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */
}

def @func_4901() -> (Tensor[(9, 4, 6), float64],) {
  %26 = fn () -> (Tensor[(9, 4, 6), float64],) {
    %24 = @func_2094() /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) */;
    %25 = %24.4;
    (%25,)
  };
  %26() /* ty=(Tensor[(9, 4, 6), float64],) */
}

def @func_927(%var_925: Tensor[(9, 4, 6), bool], %var_926: Tensor[(168), float32]) -> (Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), float64]) {
  %42 = fn (%var_863: Tensor[(9, 4, 6), bool], %var_891: Tensor[(168), float32]) -> (Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), float64]) {
    %27 = cast(%var_891, dtype="float32") /* ty=Tensor[(168), float32] */;
    %28 = reshape(%27, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %29 = @func_782(%28) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
    %30 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
    %31 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
    %32 = cast(%var_863, dtype="float32") /* ty=Tensor[(9, 4, 6), float32] */;
    %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
    %34 = cast(%31, dtype="float32") /* ty=Tensor[(9, 4, 6), float32] */;
    %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %36 = mod(%34, %35) /* ty=Tensor[(9, 4, 6), float32] */;
    %37 = cast(%36, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
    %38 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
    %39 = %29.2;
    %40 = %30.3;
    %41 = sqrt(%37) /* ty=Tensor[(9, 4, 6), float64] */;
    (%38, %39, %var_891, %40, %41)
  };
  %42(%var_925, %var_926) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), float64]) */
}

def @func_3344() -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float32]) {
  %48 = fn () -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float32]) {
    %43 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
    %44 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
    %45 = cast(%44, dtype="float32") /* ty=Tensor[(9, 4, 6), float32] */;
    %46 = %43.0;
    %47 = asinh(%45) /* ty=Tensor[(9, 4, 6), float32] */;
    (%46, %47)
  };
  %48() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float32]) */
}

def @func_2212() -> Tensor[(9, 4, 6), bool] {
  %50 = fn () -> Tensor[(9, 4, 6), bool] {
    %49 = @func_2173() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool]) */;
    %49.1
  };
  %50() /* ty=Tensor[(9, 4, 6), bool] */
}

def @func_5329() -> (Tensor[(9, 4, 6), uint8], Tensor[(9, 4, 6), float64]) {
  %51 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
  %52 = %51.1;
  %53 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 4, 6), float64] */, dtype="uint8") /* ty=Tensor[(9, 4, 6), uint8] */;
  %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%52, dtype="uint8") /* ty=Tensor[(9, 4, 6), uint8] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %57 = @func_2094() /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) */;
  %58 = bitwise_or(%55, %56) /* ty=Tensor[(9, 4, 6), uint8] */;
  %59 = %57.1;
  (%58, %59)
}

def @func_6221() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(288), float64], Tensor[(24, 12), float64]) {
  %68 = fn () -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(288), float64], Tensor[(24, 12), float64]) {
    %60 = @func_4422() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool]) */;
    %61 = @func_5798() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
    %62 = cast(meta[relay.Constant][2] /* ty=Tensor[(24, 12), float64] */, dtype="float64") /* ty=Tensor[(24, 12), float64] */;
    %63 = reshape(%62, newshape=[288]) /* ty=Tensor[(288), float64] */;
    %64 = @func_4548(%63) /* ty=(Tensor[(168), float32], Tensor[(3, 6, 16), bool], Tensor[(288), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32]) */;
    %65 = %60.1;
    %66 = %61.0;
    %67 = %64.2;
    (%65, %66, %67, meta[relay.Constant][2] /* ty=Tensor[(24, 12), float64] */)
  };
  %68() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(288), float64], Tensor[(24, 12), float64]) */
}

def @func_4730() -> (Tensor[(6, 28), int64],) {
  %69 = @func_2010() /* ty=(Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool], Tensor[(6, 28), float32], Tensor[(?, 13, 11), bool]) */;
  %70 = %69.2;
  %71 = cast(%70, dtype="bool") /* ty=Tensor[(6, 28), bool] */;
  %72 = reshape(%71, newshape=[1, 168]) /* ty=Tensor[(1, 168), bool] */;
  %73 = @func_2306(%72) /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(1, 168), bool]) */;
  %74 = %73.3;
  %75 = cast(%74, dtype="int64") /* ty=Tensor[(1, 168), int64] */;
  %76 = shape_of(%70, dtype="int32") /* ty=Tensor[(2), int32] */;
  %77 = cast(%70, dtype="int64") /* ty=Tensor[(6, 28), int64] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %79 = logical_xor(%77, %78) /* ty=Tensor[(6, 28), int64] */;
  (%79,)
}

def @func_5694() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  @func_5692() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */
}

def @func_1272() -> (Tensor[(9, 4, 6), bool],) {
  @func_1270() /* ty=(Tensor[(9, 4, 6), bool],) */
}

def @func_6170() -> (Tensor[(9, 4, 6), bool],) {
  @func_6168() /* ty=(Tensor[(9, 4, 6), bool],) */
}

def @func_290() -> (Tensor[(9, 4, 6), bool],) {
  @func_288() /* ty=(Tensor[(9, 4, 6), bool],) */
}

def @func_605() -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) {
  @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */
}

def @func_3090() -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool]) {
  %86 = fn () -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool]) {
    %80 = @func_2547() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), int8], Tensor[(9, 4, 6), bool]) */;
    %81 = %80.0;
    %82 = cast(%81, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
    %83 = reshape(%82, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), float64] */;
    %84 = @func_1908(%83) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), uint16]) */;
    %85 = %84.0;
    (%81, %85)
  };
  %86() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool]) */
}

def @func_4550(%var_4549: Tensor[(288), float64]) -> (Tensor[(168), float32], Tensor[(3, 6, 16), bool], Tensor[(288), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32]) {
  %104 = fn (%var_4463: Tensor[(288), float64]) -> (Tensor[(168), float32], Tensor[(3, 6, 16), bool], Tensor[(288), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32]) {
    %87 = @func_2485() /* ty=(Tensor[(168), float32], Tensor[(360), float32]) */;
    %88 = cast(%var_4463, dtype="float64") /* ty=Tensor[(288), float64] */;
    %89 = reshape(%88, newshape=[3, 6, 16]) /* ty=Tensor[(3, 6, 16), float64] */;
    %90 = @func_3124(%89) /* ty=(Tensor[(168), float32], Tensor[(3, 6, 16), bool]) */;
    %91 = @func_3343() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float32]) */;
    %92 = @func_1388() /* ty=(Tensor[(9, 4, 6), bool],) */;
    %93 = %91.0;
    %94 = cast(%93, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
    %95 = reshape(%94, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), float64] */;
    %96 = @func_1908(%95) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), uint16]) */;
    %97 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
    %98 = %87.0;
    %99 = %90.1;
    %100 = %92.0;
    %101 = %96.1;
    %102 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
    %103 = %97.3;
    (%98, %99, %var_4463, %93, %100, %101, %102, %103)
  };
  %104(%var_4549) /* ty=(Tensor[(168), float32], Tensor[(3, 6, 16), bool], Tensor[(288), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32]) */
}

def @func_5186() -> (Tensor[(9, 4, 6), bool], Tensor[(1080), float64], Tensor[(1, 180), uint16]) {
  @func_5184() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(1080), float64], Tensor[(1, 180), uint16]) */
}

def @func_7463(%var_7461: float64, %var_7462: Tensor[(2, 13, 2), float64]) -> (Tensor[(2, 13, 2), float64],) {
  %108 = fn (%var_7451: float64, %var_7452: Tensor[(2, 13, 2), float64]) -> (Tensor[(2, 13, 2), float64],) {
    %105 = cast(%var_7451, dtype="float64") /* ty=float64 */;
    %106 = cast(%var_7452, dtype="float64") /* ty=Tensor[(2, 13, 2), float64] */;
    %107 = power(%105, %106) /* ty=Tensor[(2, 13, 2), float64] */;
    (%107,)
  };
  %108(%var_7461, %var_7462) /* ty=(Tensor[(2, 13, 2), float64],) */
}

def @func_7949() -> Tensor[(360), float32] {
  @func_7947() /* ty=Tensor[(360), float32] */
}

def @func_1437(%var_1436: Tensor[(1080), float64]) -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(1080), float64]) {
  %117 = fn (%var_1423: Tensor[(1080), float64]) -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(1080), float64]) {
    %109 = @func_55() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
    %110 = cast(%var_1423, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %111 = cast(%var_1423, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %112 = reshape(%110, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
    %113 = reshape(%111, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
    %114 = @func_1210(%112, %113) /* ty=(Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) */;
    %115 = %109.1;
    %116 = %114.1;
    (%115, %116, %var_1423)
  };
  %117(%var_1436) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(1080), float64]) */
}

def @func_4049() -> (Tensor[(360), float32], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) {
  @func_4047() /* ty=(Tensor[(360), float32], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */
}

def @func_3409(%var_3408: Tensor[(14, 11, 13), int32]) -> Tensor[(14, 11, 13), bool] {
  %122 = fn (%var_3402: Tensor[(14, 11, 13), int32]) -> Tensor[(14, 11, 13), bool] {
    %118 = cast(%var_3402, dtype="bool") /* ty=Tensor[(14, 11, 13), bool] */;
    %119 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(14, 11, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %120 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 11, 13), int32] */, dtype="bool") /* ty=Tensor[(14, 11, 13), bool] */;
    %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%120, %121) /* ty=Tensor[(14, 11, 13), bool] */
  };
  %122(%var_3408) /* ty=Tensor[(14, 11, 13), bool] */
}

def @func_7177(%var_7176: Tensor[(576, 1), float64]) -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), uint16], Tensor[(576, 1), float64]) {
  %132 = fn (%var_7171: Tensor[(576, 1), float64]) -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), uint16], Tensor[(576, 1), float64]) {
    %123 = @func_2855() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(360), float32]) */;
    %124 = cast(%var_7171, dtype="float64") /* ty=Tensor[(576, 1), float64] */;
    %125 = %123.0;
    %126 = cast(%125, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
    %127 = reshape(%124, newshape=[12, 3, 16]) /* ty=Tensor[(12, 3, 16), float64] */;
    %128 = reshape(%126, newshape=[216]) /* ty=Tensor[(216), bool] */;
    %129 = @func_3567(%127, %128) /* ty=(Tensor[(9, 4, 6), uint16], Tensor[(216), bool], Tensor[(12, 3, 16), uint32], Tensor[(168), float32]) */;
    %130 = @func_6826() /* ty=Tensor[(9, 4, 6), bool] */;
    %131 = %129.0;
    (%125, %130, %131, %var_7171)
  };
  %132(%var_7176) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), uint16], Tensor[(576, 1), float64]) */
}

def @func_4347() -> (Tensor[(9, 4, 6), float64],) {
  @func_4345() /* ty=(Tensor[(9, 4, 6), float64],) */
}

def @func_1807(%var_1806: Tensor[(9, 4, 6), bool]) -> (Tensor[(9, 4, 6), bool],) {
  %140 = fn (%var_1784: Tensor[(9, 4, 6), bool]) -> (Tensor[(9, 4, 6), bool],) {
    %133 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
    %134 = %133.1;
    %135 = cast(%var_1784, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
    %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
    %137 = cast(%134, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
    %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %139 = not_equal(%137, %138) /* ty=Tensor[(9, 4, 6), bool] */;
    (%139,)
  };
  %140(%var_1806) /* ty=(Tensor[(9, 4, 6), bool],) */
}

def @func_7294(%var_7282: Tensor[(4, 14, 13), float64]) -> (Tensor[(4, 14, 13), float64],) {
  %141 = cast(%var_7282, dtype="float64") /* ty=Tensor[(4, 14, 13), float64] */;
  %142 = log(%141) /* ty=Tensor[(4, 14, 13), float64] */;
  (%142,)
}

def @func_5238(%var_5236: Tensor[(10, 16, 8), float64]) -> (Tensor[(360), float32], Tensor[(10, 16, 8), bool], Tensor[(10, 16, 8), float64]) {
  @func_5235(%var_5236) /* ty=(Tensor[(360), float32], Tensor[(10, 16, 8), bool], Tensor[(10, 16, 8), float64]) */
}

def @func_1270() -> (Tensor[(9, 4, 6), bool],) {
  %143 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  (%143,)
}

def @func_5490() -> (Tensor[(9, 4, 6), float64], Tensor[(168), float32]) {
  %147 = fn () -> (Tensor[(9, 4, 6), float64], Tensor[(168), float32]) {
    %144 = @func_2094() /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) */;
    %145 = @func_5412() /* ty=Tensor[(9, 4, 6), float64] */;
    %146 = %144.0;
    (%145, %146)
  };
  %147() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32]) */
}

def @func_4589(%var_4587: Tensor[(56), float32], %var_4588: Tensor[(280), float32]) -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(8, 7, 5), bool], Tensor[(56), float32], Tensor[(280), float32], Tensor[(9, 4, 6), float64]) {
  %160 = fn (%var_4572: Tensor[(56), float32], %var_4573: Tensor[(280), float32]) -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(8, 7, 5), bool], Tensor[(56), float32], Tensor[(280), float32], Tensor[(9, 4, 6), float64]) {
    %148 = @func_2547() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), int8], Tensor[(9, 4, 6), bool]) */;
    %149 = cast(%var_4572, dtype="float32") /* ty=Tensor[(56), float32] */;
    %150 = cast(%var_4573, dtype="float32") /* ty=Tensor[(280), float32] */;
    %151 = %148.2;
    %152 = cast(%151, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
    %153 = reshape(%149, newshape=[8, 7, 1]) /* ty=Tensor[(8, 7, 1), float32] */;
    %154 = reshape(%150, newshape=[8, 7, 5]) /* ty=Tensor[(8, 7, 5), float32] */;
    %155 = reshape(%152, newshape=[216]) /* ty=Tensor[(216), bool] */;
    %156 = @func_3268(%153, %154, %155) /* ty=(Tensor[(8, 7, 5), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(8, 7, 5), uint32]) */;
    %157 = @func_2264() /* ty=Tensor[(9, 4, 6), bool] */;
    %158 = %156.0;
    %159 = @func_1763() /* ty=Tensor[(9, 4, 6), float64] */;
    (%151, %157, %158, %var_4572, %var_4573, %159)
  };
  %160(%var_4587, %var_4588) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(8, 7, 5), bool], Tensor[(56), float32], Tensor[(280), float32], Tensor[(9, 4, 6), float64]) */
}

def @func_7880(%var_7878: Tensor[(16, 10, 13), float32]) -> (Tensor[(16, 10, 13), float32],) {
  @func_7877(%var_7878) /* ty=(Tensor[(16, 10, 13), float32],) */
}

def @func_5101() -> Tensor[(9, 4, 6), bool] {
  @func_5099() /* ty=Tensor[(9, 4, 6), bool] */
}

def @func_7835(%var_7834: Tensor[(1080), float64]) -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(1080), float32]) {
  %174 = fn (%var_7822: Tensor[(1080), float64]) -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(1080), float32]) {
    %161 = @func_5389() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(5, 13, 7), uint16], Tensor[(455, 1), float32]) */;
    %162 = cast(meta[relay.Constant][4] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %163 = cast(meta[relay.Constant][4] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %164 = reshape(%162, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
    %165 = reshape(%163, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
    %166 = @func_1210(%164, %165) /* ty=(Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) */;
    %167 = cast(%var_7822, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %168 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(1080), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %169 = cast(meta[relay.Constant][4] /* ty=Tensor[(1080), float64] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?), float32] */;
    %171 = %161.0;
    %172 = %166.3;
    %173 = floor_mod(%169, %170) /* ty=Tensor[(1080), float32] */;
    (%171, %172, %173)
  };
  %174(%var_7834) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(1080), float32]) */
}

def @func_2266() -> Tensor[(9, 4, 6), bool] {
  @func_2264() /* ty=Tensor[(9, 4, 6), bool] */
}

def @func_982() -> (Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) {
  @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */
}

def @func_1745() -> (Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) {
  @func_1743() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */
}

def @func_7370() -> (Tensor[(360), float32], Tensor[(168), float32], Tensor[(1080), float64]) {
  %175 = @func_3662() /* ty=(Tensor[(360), float32],) */;
  %176 = cast(meta[relay.Constant][5] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %177 = reshape(%176, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
  %178 = @func_2428(%177) /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(?, 13, 11), bool], Tensor[(9, 12, 10), bool], Tensor[(1080), float64]) */;
  %179 = %175.0;
  %180 = %178.2;
  (%179, %180, meta[relay.Constant][5] /* ty=Tensor[(1080), float64] */)
}

def @func_1302(%var_1288: Tensor[(360), float32]) -> (Tensor[(9, 4, 6), float64], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(9, 12, 10), float64], Tensor[(1080), float64], Tensor[(15, 4, 6), float32]) {
  %181 = @func_1137() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32]) */;
  %182 = cast(%var_1288, dtype="float32") /* ty=Tensor[(360), float32] */;
  %183 = reshape(%182, newshape=[15, 4, 6]) /* ty=Tensor[(15, 4, 6), float32] */;
  %184 = cast(meta[relay.Constant][6] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %185 = cast(meta[relay.Constant][6] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %186 = reshape(%184, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %187 = reshape(%185, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %188 = @func_1210(%186, %187) /* ty=(Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) */;
  %189 = @func_455(%183) /* ty=Tensor[(15, 4, 6), float32] */;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(15, 4, 6), float32] */;
  %191 = reshape(%190, newshape=[15, 4, 6]) /* ty=Tensor[(15, 4, 6), float32] */;
  %192 = %181.0;
  %193 = %188.0;
  %194 = @func_455(%191) /* ty=Tensor[(15, 4, 6), float32] */;
  (%192, %189, %var_1288, %193, meta[relay.Constant][6] /* ty=Tensor[(1080), float64] */, %194)
}

def @func_5988(%var_5986: Tensor[(16, 4, 2), bool], %var_5987: Tensor[(16, 4, 2), bool]) -> (Tensor[(16, 4, 2), bool],) {
  %200 = fn (%var_5976: Tensor[(16, 4, 2), bool], %var_5977: Tensor[(16, 4, 2), bool]) -> (Tensor[(16, 4, 2), bool],) {
    %195 = cast(%var_5977, dtype="bool") /* ty=Tensor[(16, 4, 2), bool] */;
    %196 = shape_of(%var_5976, dtype="int32") /* ty=Tensor[(3), int32] */;
    %197 = cast(%var_5976, dtype="bool") /* ty=Tensor[(16, 4, 2), bool] */;
    %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %199 = logical_or(%197, %198) /* ty=Tensor[(16, 4, 2), bool] */;
    (%199,)
  };
  %200(%var_5986, %var_5987) /* ty=(Tensor[(16, 4, 2), bool],) */
}

def @func_7132(%var_7131: Tensor[(15, 9, 3), float32]) -> (Tensor[(15, 9, 3), float32],) {
  %203 = fn (%var_7125: Tensor[(15, 9, 3), float32]) -> (Tensor[(15, 9, 3), float32],) {
    %201 = cast(%var_7125, dtype="float32") /* ty=Tensor[(15, 9, 3), float32] */;
    %202 = cosh(%201) /* ty=Tensor[(15, 9, 3), float32] */;
    (%202,)
  };
  %203(%var_7131) /* ty=(Tensor[(15, 9, 3), float32],) */
}

def @func_2394(%var_2393: Tensor[(9, 4, 6), bool]) -> (Tensor[(9, 4, 6), uint16], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32]) {
  %218 = fn (%var_2367: Tensor[(9, 4, 6), bool]) -> (Tensor[(9, 4, 6), uint16], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32]) {
    %204 = @func_2264() /* ty=Tensor[(9, 4, 6), bool] */;
    %205 = cast(%var_2367, dtype="uint16") /* ty=Tensor[(9, 4, 6), uint16] */;
    %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
    %207 = cast(%204, dtype="uint16") /* ty=Tensor[(9, 4, 6), uint16] */;
    %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %209 = cast(%204, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
    %210 = reshape(%209, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), bool] */;
    %211 = @func_1805(%210) /* ty=(Tensor[(9, 4, 6), bool],) */;
    %212 = @func_1270() /* ty=(Tensor[(9, 4, 6), bool],) */;
    %213 = %212.0;
    %214 = cast(%213, dtype="float32") /* ty=Tensor[(9, 4, 6), float32] */;
    %215 = multiply(%207, %208) /* ty=Tensor[(9, 4, 6), uint16] */;
    %216 = %211.0;
    %217 = cos(%214) /* ty=Tensor[(9, 4, 6), float32] */;
    (%215, %216, %217)
  };
  %218(%var_2393) /* ty=(Tensor[(9, 4, 6), uint16], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32]) */
}

def @func_5719() -> Tensor[(6, 28), float32] {
  @func_5717() /* ty=Tensor[(6, 28), float32] */
}

def @func_6933() -> Tensor[(9, 4, 6), float64] {
  %220 = fn () -> Tensor[(9, 4, 6), float64] {
    %219 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
    %219.1
  };
  %220() /* ty=Tensor[(9, 4, 6), float64] */
}

def @func_1210(%var_1154: Tensor[(9, 12, 10), float64], %var_1183: Tensor[(9, 12, 10), float64]) -> (Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) {
  %221 = cast(%var_1154, dtype="float64") /* ty=Tensor[(9, 12, 10), float64] */;
  %222 = cast(%var_1183, dtype="bool") /* ty=Tensor[(9, 12, 10), bool] */;
  %223 = shape_of(%var_1154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%var_1154, dtype="bool") /* ty=Tensor[(9, 12, 10), bool] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %226 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %227 = atanh(%221) /* ty=Tensor[(9, 12, 10), float64] */;
  %228 = @func_427() /* ty=Tensor[(9, 4, 6), float64] */;
  %229 = equal(%224, %225) /* ty=Tensor[(9, 12, 10), bool] */;
  %230 = %226.2;
  (%227, %228, %229, %230)
}

def @func_2855() -> (Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(360), float32]) {
  %231 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %232 = @func_1743() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %233 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %234 = %232.1;
  %235 = cast(%234, dtype="float32") /* ty=Tensor[(168), float32] */;
  %236 = reshape(%235, newshape=[168, 1]) /* ty=Tensor[(168, 1), float32] */;
  %237 = @func_1960(%236) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168, 1), float32], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(1080), float64]) */;
  %238 = @func_2485() /* ty=(Tensor[(168), float32], Tensor[(360), float32]) */;
  %239 = %231.1;
  %240 = %233.2;
  %241 = %237.1;
  %242 = %238.1;
  (%239, %234, %240, %241, %242)
}

def @func_2175() -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool]) {
  @func_2173() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool]) */
}

def @func_2485() -> (Tensor[(168), float32], Tensor[(360), float32]) {
  %243 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %244 = %243.1;
  %245 = @func_1774() /* ty=Tensor[(360), float32] */;
  (%244, %245)
}

def @func_4422() -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool]) {
  %246 = @func_1270() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %247 = %246.0;
  %248 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 4, 6), bool] */, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%247, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %252 = @func_2668() /* ty=Tensor[(360), float32] */;
  %253 = greater(%250, %251) /* ty=Tensor[(9, 4, 6), bool] */;
  (%252, %253)
}

def @func_1138() -> (Tensor[(9, 4, 6), float64], Tensor[(168), float32]) {
  %260 = fn () -> (Tensor[(9, 4, 6), float64], Tensor[(168), float32]) {
    %254 = @func_723() /* ty=(Tensor[(9, 4, 6), bool],) */;
    %255 = %254.0;
    %256 = cast(%255, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
    %257 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
    %258 = cosh(%256) /* ty=Tensor[(9, 4, 6), float64] */;
    %259 = %257.1;
    (%258, %259)
  };
  %260() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32]) */
}

def @func_3739(%var_3731: Tensor[(1, 12, 4), float32]) -> Tensor[(1, 12, 4), float32] {
  %261 = cast(%var_3731, dtype="float32") /* ty=Tensor[(1, 12, 4), float32] */;
  erf(%261) /* ty=Tensor[(1, 12, 4), float32] */
}

def @func_56() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  %264 = fn () -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
    %262 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
    %263 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
    (%262, %263)
  };
  %264() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */
}

def @func_1517() -> (Tensor[(15, 4, 6), float32], Tensor[(168), float32], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool]) {
  @func_1515() /* ty=(Tensor[(15, 4, 6), float32], Tensor[(168), float32], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool]) */
}

def @func_1764() -> Tensor[(9, 4, 6), float64] {
  %267 = fn () -> Tensor[(9, 4, 6), float64] {
    %265 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
    %266 = cast(%265, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
    acos(%266) /* ty=Tensor[(9, 4, 6), float64] */
  };
  %267() /* ty=Tensor[(9, 4, 6), float64] */
}

def @func_7859() -> (Tensor[(1080), float64],) {
  %270 = fn () -> (Tensor[(1080), float64],) {
    %268 = @func_7370() /* ty=(Tensor[(360), float32], Tensor[(168), float32], Tensor[(1080), float64]) */;
    %269 = %268.2;
    (%269,)
  };
  %270() /* ty=(Tensor[(1080), float64],) */
}

def @func_6131(%var_6130: Tensor[(10, 8, 5), float32]) -> Tensor[(10, 8, 5), float32] {
  %272 = fn (%var_6126: Tensor[(10, 8, 5), float32]) -> Tensor[(10, 8, 5), float32] {
    %271 = cast(%var_6126, dtype="float32") /* ty=Tensor[(10, 8, 5), float32] */;
    exp(%271) /* ty=Tensor[(10, 8, 5), float32] */
  };
  %272(%var_6130) /* ty=Tensor[(10, 8, 5), float32] */
}

def @func_5391() -> (Tensor[(9, 4, 6), float64], Tensor[(5, 13, 7), uint16], Tensor[(455, 1), float32]) {
  @func_5389() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(5, 13, 7), uint16], Tensor[(455, 1), float32]) */
}

def @func_2096() -> (Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) {
  @func_2094() /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) */
}

def @func_4864(%var_4840: Tensor[(3, 1, 7), int64], %var_4841: Tensor[(3, 11, 7), int64]) -> (Tensor[(3, 11, 7), bool], Tensor[(13, 4, 15), float64], Tensor[(780), float64], Tensor[(9, 4, 6), bool], Tensor[(1080), float64]) {
  %273 = cast(%var_4840, dtype="bool") /* ty=Tensor[(3, 1, 7), bool] */;
  %274 = cast(%var_4841, dtype="bool") /* ty=Tensor[(3, 11, 7), bool] */;
  %275 = cast(meta[relay.Constant][8] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %276 = reshape(%275, newshape=[13, 4, 15]) /* ty=Tensor[(13, 4, 15), float64] */;
  %277 = @func_3168(%276) /* ty=(Tensor[(13, 4, 15), float64],) */;
  %278 = cast(meta[relay.Constant][9] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %279 = reshape(%278, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
  %280 = @func_1435(%279) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(1080), float64]) */;
  %281 = equal(%273, %274) /* ty=Tensor[(3, 11, 7), bool] */;
  %282 = %277.0;
  %283 = %280.0;
  (%281, %282, meta[relay.Constant][8] /* ty=Tensor[(780), float64] */, %283, meta[relay.Constant][9] /* ty=Tensor[(1080), float64] */)
}

def @func_5413() -> Tensor[(9, 4, 6), float64] {
  %285 = fn () -> Tensor[(9, 4, 6), float64] {
    %284 = @func_4900() /* ty=(Tensor[(9, 4, 6), float64],) */;
    %284.0
  };
  %285() /* ty=Tensor[(9, 4, 6), float64] */
}

def @func_2632(%var_2597: Tensor[(11, 3, 7), uint64]) -> (Tensor[(168), float32], Tensor[(11, 3, 7), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(360), float32], Tensor[(9, 4, 6), bool]) {
  %286 = cast(%var_2597, dtype="uint64") /* ty=Tensor[(11, 3, 7), uint64] */;
  %287 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(11, 3, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 3, 7), uint64] */, dtype="uint64") /* ty=Tensor[(11, 3, 7), uint64] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %290 = right_shift(%288, %289) /* ty=Tensor[(11, 3, 7), uint64] */;
  %291 = cast(%290, dtype="float64") /* ty=Tensor[(11, 3, 7), float64] */;
  %292 = @func_1388() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %293 = @func_2173() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool]) */;
  %294 = @func_723() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %295 = @func_2453() /* ty=Tensor[(168), float32] */;
  %296 = sqrt(%291) /* ty=Tensor[(11, 3, 7), float64] */;
  %297 = @func_427() /* ty=Tensor[(9, 4, 6), float64] */;
  %298 = %292.0;
  %299 = %293.0;
  %300 = %294.0;
  (%295, %296, %297, %298, %299, %300)
}

def @func_2857() -> (Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(360), float32]) {
  @func_2855() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(360), float32]) */
}

def @func_2748(%var_2714: Tensor[(13, 10, 11), float32], %var_2715: Tensor[(13, 10, 11), float32]) -> (Tensor[(13, 10, 11), float32],) {
  %301 = cast(%var_2715, dtype="float32") /* ty=Tensor[(13, 10, 11), float32] */;
  %302 = shape_of(%var_2714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%var_2714, dtype="float32") /* ty=Tensor[(13, 10, 11), float32] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %305 = floor_divide(%303, %304) /* ty=Tensor[(13, 10, 11), float32] */;
  (%305,)
}

def @func_1911(%var_1909: Tensor[(9, 4, 6), float64]) -> (Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), uint16]) {
  @func_1908(%var_1909) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), uint16]) */
}

def @func_5005() -> (Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(1080), float64], Tensor[(9, 4, 6), bool], Tensor[(819), int16], Tensor[(9, 4, 6), float32], Tensor[(168), float32]) {
  @func_5003() /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(1080), float64], Tensor[(9, 4, 6), bool], Tensor[(819), int16], Tensor[(9, 4, 6), float32], Tensor[(168), float32]) */
}

def @func_4954() -> (Tensor[(360), float32],) {
  %308 = fn () -> (Tensor[(360), float32],) {
    %306 = @func_2485() /* ty=(Tensor[(168), float32], Tensor[(360), float32]) */;
    %307 = %306.1;
    (%307,)
  };
  %308() /* ty=(Tensor[(360), float32],) */
}

def @func_5235(%var_5187: Tensor[(10, 16, 8), float64]) -> (Tensor[(360), float32], Tensor[(10, 16, 8), bool], Tensor[(10, 16, 8), float64]) {
  %309 = cast(%var_5187, dtype="float64") /* ty=Tensor[(10, 16, 8), float64] */;
  %310 = acos(%309) /* ty=Tensor[(10, 16, 8), float64] */;
  %311 = cast(%310, dtype="float32") /* ty=Tensor[(10, 16, 8), float32] */;
  %312 = sqrt(%311) /* ty=Tensor[(10, 16, 8), float32] */;
  %313 = cast(%310, dtype="bool") /* ty=Tensor[(10, 16, 8), bool] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="bool") /* ty=Tensor[(10, 16, 8), bool] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %317 = cast(%310, dtype="float64") /* ty=Tensor[(10, 16, 8), float64] */;
  %318 = @func_3198() /* ty=Tensor[(360), float32] */;
  %319 = less(%315, %316) /* ty=Tensor[(10, 16, 8), bool] */;
  %320 = sigmoid(%317) /* ty=Tensor[(10, 16, 8), float64] */;
  (%318, %319, %320)
}

def @func_6948() -> Tensor[(9, 4, 6), float64] {
  %322 = fn () -> Tensor[(9, 4, 6), float64] {
    %321 = @func_5389() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(5, 13, 7), uint16], Tensor[(455, 1), float32]) */;
    %321.0
  };
  %322() /* ty=Tensor[(9, 4, 6), float64] */
}

def @func_7567() -> (Tensor[(360), float32],) {
  %323 = @func_5886() /* ty=Tensor[(360), float32] */;
  (%323,)
}

def @func_7607() -> (Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) {
  %331 = fn () -> (Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) {
    %324 = cast(meta[relay.Constant][11] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %325 = cast(meta[relay.Constant][11] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %326 = reshape(%324, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %327 = reshape(%325, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %328 = @func_188(%326, %327) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
    %329 = @func_2211() /* ty=Tensor[(9, 4, 6), bool] */;
    %330 = %328.0;
    (%329, %330, meta[relay.Constant][11] /* ty=Tensor[(168), float32] */)
  };
  %331() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */
}

def @func_1774() -> Tensor[(360), float32] {
  %332 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
  %332.4
}

def @func_2566(%var_2565: Tensor[(168), bool]) -> (Tensor[(9, 4, 6), float64], Tensor[(360), float32], Tensor[(168), bool]) {
  %338 = fn (%var_2555: Tensor[(168), bool]) -> (Tensor[(9, 4, 6), float64], Tensor[(360), float32], Tensor[(168), bool]) {
    %333 = cast(%var_2555, dtype="bool") /* ty=Tensor[(168), bool] */;
    %334 = reshape(%333, newshape=[1, 168]) /* ty=Tensor[(1, 168), bool] */;
    %335 = @func_2306(%334) /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(1, 168), bool]) */;
    %336 = @func_427() /* ty=Tensor[(9, 4, 6), float64] */;
    %337 = %335.0;
    (%336, %337, %var_2555)
  };
  %338(%var_2565) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(360), float32], Tensor[(168), bool]) */
}

def @func_2094() -> (Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) {
  %339 = cast(meta[relay.Constant][12] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %340 = reshape(%339, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %341 = @func_1626(%340) /* ty=(Tensor[(6, 4, 7), uint16], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool]) */;
  %342 = cast(meta[relay.Constant][12] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %343 = reshape(%342, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), bool] */;
  %344 = @func_1805(%343) /* ty=(Tensor[(9, 4, 6), bool],) */;
  %345 = @func_1336() /* ty=Tensor[(168), float32] */;
  %346 = cast(%345, dtype="float32") /* ty=Tensor[(168), float32] */;
  %347 = reshape(%346, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %348 = @func_1077(%347) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), float64]) */;
  %349 = %341.2;
  %350 = %344.0;
  %351 = %348.4;
  (%345, %349, meta[relay.Constant][12] /* ty=Tensor[(216), bool] */, %350, %351)
}

def @func_8148() -> Tensor[(9, 4, 6), bool] {
  %352 = fn () -> Tensor[(9, 4, 6), bool] {
    @func_39() /* ty=Tensor[(9, 4, 6), bool] */
  };
  %352() /* ty=Tensor[(9, 4, 6), bool] */
}

def @func_3168(%var_3164: Tensor[(13, 4, 15), float64]) -> (Tensor[(13, 4, 15), float64],) {
  %353 = cast(%var_3164, dtype="float64") /* ty=Tensor[(13, 4, 15), float64] */;
  %354 = cosh(%353) /* ty=Tensor[(13, 4, 15), float64] */;
  (%354,)
}

def @func_4345() -> (Tensor[(9, 4, 6), float64],) {
  %355 = @func_2855() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(360), float32]) */;
  %356 = %355.0;
  (%356,)
}

def @func_5692() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  %357 = @func_2547() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), int8], Tensor[(9, 4, 6), bool]) */;
  %358 = @func_1388() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %359 = %357.2;
  %360 = %358.0;
  (%359, %360)
}

def @func_1232() -> Tensor[(168), float32] {
  @func_1230() /* ty=Tensor[(168), float32] */
}

def @func_3199() -> Tensor[(360), float32] {
  %362 = fn () -> Tensor[(360), float32] {
    %361 = @func_2173() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool]) */;
    %361.0
  };
  %362() /* ty=Tensor[(360), float32] */
}

def @func_1389() -> (Tensor[(9, 4, 6), bool],) {
  %365 = fn () -> (Tensor[(9, 4, 6), bool],) {
    %363 = @func_723() /* ty=(Tensor[(9, 4, 6), bool],) */;
    %364 = %363.0;
    (%364,)
  };
  %365() /* ty=(Tensor[(9, 4, 6), bool],) */
}

def @func_7101(%var_7099: Tensor[(16, 9, 9), float64]) -> Tensor[(16, 9, 9), float64] {
  @func_7098(%var_7099) /* ty=Tensor[(16, 9, 9), float64] */
}

def @func_39() -> Tensor[(9, 4, 6), bool] {
  %366 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 4, 6), bool] */, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %367 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(9, 4, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 4, 6), bool] */, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%368, %369) /* ty=Tensor[(9, 4, 6), bool] */
}

def @func_2309(%var_2307: Tensor[(1, 168), bool]) -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(1, 168), bool]) {
  @func_2306(%var_2307) /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(1, 168), bool]) */
}

def @func_7019() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  %370 = @func_1270() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %371 = @func_6848() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %372 = %370.0;
  %373 = %371.0;
  (%372, %373)
}

def @func_7635() -> Tensor[(360), float32] {
  %374 = fn () -> Tensor[(360), float32] {
    @func_6630() /* ty=Tensor[(360), float32] */
  };
  %374() /* ty=Tensor[(360), float32] */
}

def @func_6772() -> (Tensor[(168), float32], Tensor[(168), float32], Tensor[(216), bool], Tensor[(1080), float64], Tensor[(90, 12), float64], Tensor[(9, 4, 6), bool]) {
  @func_6770() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(216), bool], Tensor[(1080), float64], Tensor[(90, 12), float64], Tensor[(9, 4, 6), bool]) */
}

def @func_7425(%var_7423: Tensor[(21), int64], %var_7424: Tensor[(819), int16]) -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(21), int64], Tensor[(231), int64], Tensor[(819), int16], Tensor[(9, 7, 13), float32]) {
  @func_7421(%var_7423, %var_7424) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(21), int64], Tensor[(231), int64], Tensor[(819), int16], Tensor[(9, 7, 13), float32]) */
}

def @func_5184() -> (Tensor[(9, 4, 6), bool], Tensor[(1080), float64], Tensor[(1, 180), uint16]) {
  %375 = @func_2855() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(360), float32]) */;
  %376 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 180), uint16] */, dtype="uint16") /* ty=Tensor[(1, 180), uint16] */;
  %377 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 180), uint16] */, dtype="uint16") /* ty=Tensor[(1, 180), uint16] */;
  %378 = reshape(%376, newshape=[15, 2, 6]) /* ty=Tensor[(15, 2, 6), uint16] */;
  %379 = reshape(%377, newshape=[15, 2, 6]) /* ty=Tensor[(15, 2, 6), uint16] */;
  %380 = @func_3387(%378, %379) /* ty=(Tensor[(15, 2, 6), int64], Tensor[(9, 4, 6), float64], Tensor[(1080), float64], Tensor[(15, 2, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %381 = %375.2;
  %382 = %380.2;
  (%381, %382, meta[relay.Constant][15] /* ty=Tensor[(1, 180), uint16] */)
}

def @func_3390(%var_3388: Tensor[(15, 2, 6), uint16], %var_3389: Tensor[(15, 2, 6), uint16]) -> (Tensor[(15, 2, 6), int64], Tensor[(9, 4, 6), float64], Tensor[(1080), float64], Tensor[(15, 2, 6), bool], Tensor[(9, 4, 6), bool]) {
  %408 = fn (%var_3350: Tensor[(15, 2, 6), uint16], %var_3351: Tensor[(15, 2, 6), uint16]) -> (Tensor[(15, 2, 6), int64], Tensor[(9, 4, 6), float64], Tensor[(1080), float64], Tensor[(15, 2, 6), bool], Tensor[(9, 4, 6), bool]) {
    %383 = cast(%var_3351, dtype="uint16") /* ty=Tensor[(15, 2, 6), uint16] */;
    %384 = shape_of(%var_3350, dtype="int32") /* ty=Tensor[(3), int32] */;
    %385 = cast(%var_3350, dtype="uint16") /* ty=Tensor[(15, 2, 6), uint16] */;
    %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %387 = bitwise_and(%385, %386) /* ty=Tensor[(15, 2, 6), uint16] */;
    %388 = cast(%387, dtype="int64") /* ty=Tensor[(15, 2, 6), int64] */;
    %389 = shape_of(%var_3350, dtype="int32") /* ty=Tensor[(3), int32] */;
    %390 = cast(%var_3350, dtype="int64") /* ty=Tensor[(15, 2, 6), int64] */;
    %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %392 = cast(meta[relay.Constant][16] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %393 = reshape(%392, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
    %394 = @func_1435(%393) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(1080), float64]) */;
    %395 = cast(%var_3350, dtype="bool") /* ty=Tensor[(15, 2, 6), bool] */;
    %396 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
    %397 = cast(%387, dtype="bool") /* ty=Tensor[(15, 2, 6), bool] */;
    %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %399 = cast(meta[relay.Constant][16] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %400 = cast(meta[relay.Constant][16] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %401 = reshape(%399, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
    %402 = reshape(%400, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
    %403 = @func_1210(%401, %402) /* ty=(Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) */;
    %404 = right_shift(%390, %391) /* ty=Tensor[(15, 2, 6), int64] */;
    %405 = %394.1;
    %406 = equal(%397, %398) /* ty=Tensor[(15, 2, 6), bool] */;
    %407 = %403.3;
    (%404, %405, meta[relay.Constant][16] /* ty=Tensor[(1080), float64] */, %406, %407)
  };
  %408(%var_3388, %var_3389) /* ty=(Tensor[(15, 2, 6), int64], Tensor[(9, 4, 6), float64], Tensor[(1080), float64], Tensor[(15, 2, 6), bool], Tensor[(9, 4, 6), bool]) */
}

def @func_3273(%var_3270: Tensor[(8, 7, 1), float32], %var_3271: Tensor[(8, 7, 5), float32], %var_3272: Tensor[(216), bool]) -> (Tensor[(8, 7, 5), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(8, 7, 5), uint32]) {
  @func_3268(%var_3270, %var_3271, %var_3272) /* ty=(Tensor[(8, 7, 5), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(8, 7, 5), uint32]) */
}

def @func_7297(%var_7295: Tensor[(4, 14, 13), float64]) -> (Tensor[(4, 14, 13), float64],) {
  @func_7294(%var_7295) /* ty=(Tensor[(4, 14, 13), float64],) */
}

def @func_2120() -> Tensor[(9, 4, 6), bool] {
  @func_2118() /* ty=Tensor[(9, 4, 6), bool] */
}

def @func_4215() -> (Tensor[(9, 4, 6), bool],) {
  %411 = fn () -> (Tensor[(9, 4, 6), bool],) {
    %409 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
    %410 = %409.2;
    (%410,)
  };
  %411() /* ty=(Tensor[(9, 4, 6), bool],) */
}

def @func_6092() -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 12, 10), bool], Tensor[(18, 60), float64], Tensor[(13, 10, 11), float32], Tensor[(1430, 1), float32], Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(360), float32]) {
  %412 = cast(meta[relay.Constant][17] /* ty=Tensor[(18, 60), float64] */, dtype="float64") /* ty=Tensor[(18, 60), float64] */;
  %413 = cast(meta[relay.Constant][17] /* ty=Tensor[(18, 60), float64] */, dtype="float64") /* ty=Tensor[(18, 60), float64] */;
  %414 = reshape(%412, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %415 = reshape(%413, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %416 = @func_1210(%414, %415) /* ty=(Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) */;
  %417 = cast(meta[relay.Constant][18] /* ty=Tensor[(1430, 1), float32] */, dtype="float32") /* ty=Tensor[(1430, 1), float32] */;
  %418 = cast(meta[relay.Constant][18] /* ty=Tensor[(1430, 1), float32] */, dtype="float32") /* ty=Tensor[(1430, 1), float32] */;
  %419 = reshape(%417, newshape=[13, 10, 11]) /* ty=Tensor[(13, 10, 11), float32] */;
  %420 = reshape(%418, newshape=[13, 10, 11]) /* ty=Tensor[(13, 10, 11), float32] */;
  %421 = @func_2748(%419, %420) /* ty=(Tensor[(13, 10, 11), float32],) */;
  %422 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %423 = @func_2094() /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) */;
  %424 = @func_2668() /* ty=Tensor[(360), float32] */;
  %425 = @func_2871() /* ty=Tensor[(9, 4, 6), bool] */;
  %426 = %416.2;
  %427 = %421.0;
  %428 = %422.1;
  %429 = %423.4;
  %430 = @func_2668() /* ty=Tensor[(360), float32] */;
  (%424, %425, %426, meta[relay.Constant][17] /* ty=Tensor[(18, 60), float64] */, %427, meta[relay.Constant][18] /* ty=Tensor[(1430, 1), float32] */, %428, %429, %430)
}

def @func_7021() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  @func_7019() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */
}

def @func_85() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  %433 = fn () -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
    %431 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
    %432 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
    (%431, %432)
  };
  %433() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */
}

def @func_2549() -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), int8], Tensor[(9, 4, 6), bool]) {
  @func_2547() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), int8], Tensor[(9, 4, 6), bool]) */
}

def @func_1836(%var_1835: Tensor[(13, 9, 1), float32]) -> (Tensor[(13, 9, 1), float64], Tensor[(9, 4, 6), bool]) {
  %440 = fn (%var_1811: Tensor[(13, 9, 1), float32]) -> (Tensor[(13, 9, 1), float64], Tensor[(9, 4, 6), bool]) {
    %434 = cast(%var_1811, dtype="float32") /* ty=Tensor[(13, 9, 1), float32] */;
    %435 = log10(%434) /* ty=Tensor[(13, 9, 1), float32] */;
    %436 = cast(%435, dtype="float64") /* ty=Tensor[(13, 9, 1), float64] */;
    %437 = @func_1515() /* ty=(Tensor[(15, 4, 6), float32], Tensor[(168), float32], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool]) */;
    %438 = acos(%436) /* ty=Tensor[(13, 9, 1), float64] */;
    %439 = %437.3;
    (%438, %439)
  };
  %440(%var_1835) /* ty=(Tensor[(13, 9, 1), float64], Tensor[(9, 4, 6), bool]) */
}

def @func_2454() -> Tensor[(168), float32] {
  %442 = fn () -> Tensor[(168), float32] {
    %441 = @func_319() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
    %441.2
  };
  %442() /* ty=Tensor[(168), float32] */
}

def @func_2547() -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), int8], Tensor[(9, 4, 6), bool]) {
  %443 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %444 = %443.0;
  %445 = @func_2173() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool]) */;
  %446 = %445.2;
  %447 = cast(%446, dtype="int8") /* ty=Tensor[(9, 4, 6), int8] */;
  %448 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%444, dtype="int8") /* ty=Tensor[(9, 4, 6), int8] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %451 = @func_1763() /* ty=Tensor[(9, 4, 6), float64] */;
  %452 = subtract(%449, %450) /* ty=Tensor[(9, 4, 6), int8] */;
  %453 = @func_2211() /* ty=Tensor[(9, 4, 6), bool] */;
  (%451, %452, %453)
}

def @func_5331() -> (Tensor[(9, 4, 6), uint8], Tensor[(9, 4, 6), float64]) {
  @func_5329() /* ty=(Tensor[(9, 4, 6), uint8], Tensor[(9, 4, 6), float64]) */
}

def @func_5910() -> (Tensor[(9, 4, 6), bool],) {
  %454 = @func_5798() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %455 = %454.1;
  (%455,)
}

def @func_2871() -> Tensor[(9, 4, 6), bool] {
  %456 = @func_1388() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %456.0
}

def @func_3603(%var_3602: Tensor[(5, 13, 7), float32]) -> Tensor[(5, 13, 7), uint16] {
  %465 = fn (%var_3581: Tensor[(5, 13, 7), float32]) -> Tensor[(5, 13, 7), uint16] {
    %457 = cast(%var_3581, dtype="float32") /* ty=Tensor[(5, 13, 7), float32] */;
    %458 = log(%457) /* ty=Tensor[(5, 13, 7), float32] */;
    %459 = cast(%458, dtype="float64") /* ty=Tensor[(5, 13, 7), float64] */;
    %460 = acos(%459) /* ty=Tensor[(5, 13, 7), float64] */;
    %461 = cast(%458, dtype="uint16") /* ty=Tensor[(5, 13, 7), uint16] */;
    %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
    %463 = cast(%460, dtype="uint16") /* ty=Tensor[(5, 13, 7), uint16] */;
    %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    right_shift(%463, %464) /* ty=Tensor[(5, 13, 7), uint16] */
  };
  %465(%var_3602) /* ty=Tensor[(5, 13, 7), uint16] */
}

def @func_7947() -> Tensor[(360), float32] {
  @func_6630() /* ty=Tensor[(360), float32] */
}

def @func_6168() -> (Tensor[(9, 4, 6), bool],) {
  %466 = @func_55() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %467 = %466.1;
  (%467,)
}

def @func_1305(%var_1303: Tensor[(360), float32]) -> (Tensor[(9, 4, 6), float64], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(9, 12, 10), float64], Tensor[(1080), float64], Tensor[(15, 4, 6), float32]) {
  @func_1302(%var_1303) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(9, 12, 10), float64], Tensor[(1080), float64], Tensor[(15, 4, 6), float32]) */
}

def @func_7098(%var_7094: Tensor[(16, 9, 9), float64]) -> Tensor[(16, 9, 9), float64] {
  %468 = cast(-4.54282f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %469 = cast(%var_7094, dtype="float64") /* ty=Tensor[(16, 9, 9), float64] */;
  subtract(%468, %469) /* ty=Tensor[(16, 9, 9), float64] */
}

def @func_319() -> (Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) {
  %470 = @func_288() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %471 = cast(meta[relay.Constant][19] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %472 = cast(meta[relay.Constant][19] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %473 = reshape(%471, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %474 = reshape(%472, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %475 = @func_188(%473, %474) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
  %476 = %470.0;
  %477 = %475.2;
  (%476, %477, meta[relay.Constant][19] /* ty=Tensor[(168), float32] */)
}

def @func_1628(%var_1627: Tensor[(216), bool]) -> (Tensor[(6, 4, 7), uint16], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool]) {
  %497 = fn (%var_1621: Tensor[(216), bool]) -> (Tensor[(6, 4, 7), uint16], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool]) {
    %478 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
    %479 = %478.5;
    %480 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 4, 7), bool] */, dtype="uint16") /* ty=Tensor[(6, 4, 7), uint16] */;
    %481 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
    %482 = cast(%479, dtype="uint16") /* ty=Tensor[(6, 4, 7), uint16] */;
    %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %484 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 4, 7), bool] */, dtype="float32") /* ty=Tensor[(6, 4, 7), float32] */;
    %485 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 4, 7), bool] */, dtype="float32") /* ty=Tensor[(6, 4, 7), float32] */;
    %486 = reshape(%484, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %487 = reshape(%485, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %488 = @func_188(%486, %487) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
    %489 = cast(%var_1621, dtype="bool") /* ty=Tensor[(216), bool] */;
    %490 = %488.0;
    %491 = cast(%490, dtype="float32") /* ty=Tensor[(6, 4, 7), float32] */;
    %492 = reshape(%489, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), bool] */;
    %493 = reshape(%491, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %494 = @func_924(%492, %493) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), float64]) */;
    %495 = minimum(%482, %483) /* ty=Tensor[(6, 4, 7), uint16] */;
    %496 = %494.4;
    (%495, %490, %496, %var_1621)
  };
  %497(%var_1627) /* ty=(Tensor[(6, 4, 7), uint16], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool]) */
}

def @func_5099() -> Tensor[(9, 4, 6), bool] {
  @func_2118() /* ty=Tensor[(9, 4, 6), bool] */
}

def @func_603() -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) {
  %498 = @func_319() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %499 = cast(meta[relay.Constant][21] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %500 = reshape(%499, newshape=[15, 4, 6]) /* ty=Tensor[(15, 4, 6), float32] */;
  %501 = @func_319() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %502 = @func_427() /* ty=Tensor[(9, 4, 6), float64] */;
  %503 = @func_427() /* ty=Tensor[(9, 4, 6), float64] */;
  %504 = %498.0;
  %505 = @func_455(%500) /* ty=Tensor[(15, 4, 6), float32] */;
  %506 = %501.1;
  (%502, %503, %504, %505, meta[relay.Constant][21] /* ty=Tensor[(360), float32] */, %506)
}

def @func_5123() -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool]) {
  %510 = fn () -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool]) {
    %507 = @func_55() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
    %508 = @func_2668() /* ty=Tensor[(360), float32] */;
    %509 = %507.1;
    (%508, %509)
  };
  %510() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool]) */
}

def @func_4619() -> (Tensor[(6, 28), float32],) {
  %511 = @func_4162() /* ty=Tensor[(6, 28), float32] */;
  (%511,)
}

def @func_2430(%var_2429: Tensor[(1080), float64]) -> (Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(?, 13, 11), bool], Tensor[(9, 12, 10), bool], Tensor[(1080), float64]) {
  %526 = fn (%var_2426: Tensor[(1080), float64]) -> (Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(?, 13, 11), bool], Tensor[(9, 12, 10), bool], Tensor[(1080), float64]) {
    %512 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
    %513 = @func_1270() /* ty=(Tensor[(9, 4, 6), bool],) */;
    %514 = @func_1137() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32]) */;
    %515 = @func_2010() /* ty=(Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool], Tensor[(6, 28), float32], Tensor[(?, 13, 11), bool]) */;
    %516 = cast(%var_2426, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %517 = cast(%var_2426, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %518 = reshape(%516, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
    %519 = reshape(%517, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
    %520 = @func_1210(%518, %519) /* ty=(Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) */;
    %521 = %512.1;
    %522 = %513.0;
    %523 = %514.1;
    %524 = %515.3;
    %525 = %520.2;
    (%521, %522, %523, %524, %525, %var_2426)
  };
  %526(%var_2429) /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(?, 13, 11), bool], Tensor[(9, 12, 10), bool], Tensor[(1080), float64]) */
}

def @func_784(%var_783: Tensor[(168), float32]) -> (Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) {
  %537 = fn (%var_772: Tensor[(168), float32]) -> (Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) {
    %527 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
    %528 = cast(%var_772, dtype="float32") /* ty=Tensor[(168), float32] */;
    %529 = cast(%var_772, dtype="float32") /* ty=Tensor[(168), float32] */;
    %530 = reshape(%528, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %531 = reshape(%529, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %532 = @func_188(%530, %531) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
    %533 = @func_319() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
    %534 = %527.1;
    %535 = %532.2;
    %536 = %533.0;
    (%534, %535, %var_772, %536)
  };
  %537(%var_783) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */
}

def @func_3880(%var_3878: Tensor[(9, 7, 13), int16], %var_3879: Tensor[(9, 7, 13), int16]) -> (Tensor[(9, 7, 13), uint16], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 7, 13), int32], Tensor[(168), float64], Tensor[(9, 12, 10), float64], Tensor[(1080), float64], Tensor[(6, 4, 7), int8]) {
  %575 = fn (%var_3757: Tensor[(9, 7, 13), int16], %var_3758: Tensor[(9, 7, 13), int16]) -> (Tensor[(9, 7, 13), uint16], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 7, 13), int32], Tensor[(168), float64], Tensor[(9, 12, 10), float64], Tensor[(1080), float64], Tensor[(6, 4, 7), int8]) {
    %538 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 7, 13), int16] */, dtype="uint16") /* ty=Tensor[(9, 7, 13), uint16] */;
    %539 = shape_of(%var_3757, dtype="int32") /* ty=Tensor[(3), int32] */;
    %540 = cast(%var_3757, dtype="uint16") /* ty=Tensor[(9, 7, 13), uint16] */;
    %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %542 = cast(meta[relay.Constant][23] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %543 = reshape(%542, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %544 = @func_1597(%543) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(9, 4, 6), float64]) */;
    %545 = cast(%var_3758, dtype="int16") /* ty=Tensor[(9, 7, 13), int16] */;
    %546 = shape_of(%var_3757, dtype="int32") /* ty=Tensor[(3), int32] */;
    %547 = cast(%var_3757, dtype="int16") /* ty=Tensor[(9, 7, 13), int16] */;
    %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %549 = logical_xor(%547, %548) /* ty=Tensor[(9, 7, 13), int16] */;
    %550 = cast(%549, dtype="uint64") /* ty=Tensor[(9, 7, 13), uint64] */;
    %551 = shape_of(%var_3757, dtype="int32") /* ty=Tensor[(3), int32] */;
    %552 = cast(%var_3757, dtype="uint64") /* ty=Tensor[(9, 7, 13), uint64] */;
    %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %554 = minimum(%552, %553) /* ty=Tensor[(9, 7, 13), uint64] */;
    %555 = cast(%var_3758, dtype="int32") /* ty=Tensor[(9, 7, 13), int32] */;
    %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
    %557 = cast(%554, dtype="int32") /* ty=Tensor[(9, 7, 13), int32] */;
    %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %559 = cast(meta[relay.Constant][23] /* ty=Tensor[(168), float32] */, dtype="float64") /* ty=Tensor[(168), float64] */;
    %560 = cast(meta[relay.Constant][24] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %561 = cast(meta[relay.Constant][24] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %562 = reshape(%560, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
    %563 = reshape(%561, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
    %564 = @func_1210(%562, %563) /* ty=(Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) */;
    %565 = cast(meta[relay.Constant][23] /* ty=Tensor[(168), float32] */, dtype="bool") /* ty=Tensor[(168), bool] */;
    %566 = reshape(%565, newshape=[1, 168]) /* ty=Tensor[(1, 168), bool] */;
    %567 = @func_2306(%566) /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(1, 168), bool]) */;
    %568 = subtract(%540, %541) /* ty=Tensor[(9, 7, 13), uint16] */;
    %569 = @func_2264() /* ty=Tensor[(9, 4, 6), bool] */;
    %570 = %544.3;
    %571 = right_shift(%557, %558) /* ty=Tensor[(9, 7, 13), int32] */;
    %572 = asin(%559) /* ty=Tensor[(168), float64] */;
    %573 = %564.0;
    %574 = %567.2;
    (%568, %569, %570, %571, %572, %573, meta[relay.Constant][24] /* ty=Tensor[(1080), float64] */, %574)
  };
  %575(%var_3878, %var_3879) /* ty=(Tensor[(9, 7, 13), uint16], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 7, 13), int32], Tensor[(168), float64], Tensor[(9, 12, 10), float64], Tensor[(1080), float64], Tensor[(6, 4, 7), int8]) */
}

def @func_4868(%var_4866: Tensor[(3, 1, 7), int64], %var_4867: Tensor[(3, 11, 7), int64]) -> (Tensor[(3, 11, 7), bool], Tensor[(13, 4, 15), float64], Tensor[(780), float64], Tensor[(9, 4, 6), bool], Tensor[(1080), float64]) {
  @func_4864(%var_4866, %var_4867) /* ty=(Tensor[(3, 11, 7), bool], Tensor[(13, 4, 15), float64], Tensor[(780), float64], Tensor[(9, 4, 6), bool], Tensor[(1080), float64]) */
}

def @func_7999(%var_7996: Tensor[(231, 1), uint64], %var_7997: int64, %var_7998: Tensor[(1800), int64]) -> (Tensor[(360), float32], Tensor[(168), float32], Tensor[(231, 1), uint64], Tensor[(9, 4, 6), float64], Tensor[(15, 8, 15), bool], int64, Tensor[(1800), int64], Tensor[(9, 4, 6), bool]) {
  %590 = fn (%var_7971: Tensor[(231, 1), uint64], %var_7988: int64, %var_7989: Tensor[(1800), int64]) -> (Tensor[(360), float32], Tensor[(168), float32], Tensor[(231, 1), uint64], Tensor[(9, 4, 6), float64], Tensor[(15, 8, 15), bool], int64, Tensor[(1800), int64], Tensor[(9, 4, 6), bool]) {
    %576 = cast(%var_7971, dtype="uint64") /* ty=Tensor[(231, 1), uint64] */;
    %577 = reshape(%576, newshape=[11, 3, 7]) /* ty=Tensor[(11, 3, 7), uint64] */;
    %578 = @func_2632(%577) /* ty=(Tensor[(168), float32], Tensor[(11, 3, 7), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(360), float32], Tensor[(9, 4, 6), bool]) */;
    %579 = cast(%var_7988, dtype="int64") /* ty=int64 */;
    %580 = cast(%var_7989, dtype="int64") /* ty=Tensor[(1800), int64] */;
    %581 = reshape(%579, newshape=[]) /* ty=int64 */;
    %582 = reshape(%580, newshape=[15, 8, 15]) /* ty=Tensor[(15, 8, 15), int64] */;
    %583 = @func_2916(%581, %582) /* ty=(Tensor[(15, 8, 15), bool],) */;
    %584 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
    %585 = @func_1774() /* ty=Tensor[(360), float32] */;
    %586 = %578.0;
    %587 = @func_1763() /* ty=Tensor[(9, 4, 6), float64] */;
    %588 = %583.0;
    %589 = %584.0;
    (%585, %586, %var_7971, %587, %588, %var_7988, %var_7989, %589)
  };
  %590(%var_7996, %var_7997, %var_7998) /* ty=(Tensor[(360), float32], Tensor[(168), float32], Tensor[(231, 1), uint64], Tensor[(9, 4, 6), float64], Tensor[(15, 8, 15), bool], int64, Tensor[(1800), int64], Tensor[(9, 4, 6), bool]) */
}

def @func_5446() -> Tensor[(9, 4, 6), float64] {
  %591 = @func_3089() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool]) */;
  %591.0
}

def @func_5800() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  @func_5798() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */
}

def @func_7421(%var_7392: Tensor[(21), int64], %var_7405: Tensor[(819), int16]) -> (Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(21), int64], Tensor[(231), int64], Tensor[(819), int16], Tensor[(9, 7, 13), float32]) {
  %592 = cast(%var_7392, dtype="int64") /* ty=Tensor[(21), int64] */;
  %593 = cast(meta[relay.Constant][25] /* ty=Tensor[(231), int64] */, dtype="int64") /* ty=Tensor[(231), int64] */;
  %594 = reshape(%592, newshape=[3, 1, 7]) /* ty=Tensor[(3, 1, 7), int64] */;
  %595 = reshape(%593, newshape=[3, 11, 7]) /* ty=Tensor[(3, 11, 7), int64] */;
  %596 = @func_4864(%594, %595) /* ty=(Tensor[(3, 11, 7), bool], Tensor[(13, 4, 15), float64], Tensor[(780), float64], Tensor[(9, 4, 6), bool], Tensor[(1080), float64]) */;
  %597 = cast(%var_7405, dtype="int16") /* ty=Tensor[(819), int16] */;
  %598 = cast(%var_7405, dtype="int16") /* ty=Tensor[(819), int16] */;
  %599 = reshape(%597, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), int16] */;
  %600 = reshape(%598, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), int16] */;
  %601 = @func_3877(%599, %600) /* ty=(Tensor[(9, 7, 13), uint16], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 7, 13), int32], Tensor[(168), float64], Tensor[(9, 12, 10), float64], Tensor[(1080), float64], Tensor[(6, 4, 7), int8]) */;
  %602 = %601.3;
  %603 = cast(%602, dtype="float32") /* ty=Tensor[(9, 7, 13), float32] */;
  %604 = @func_4835() /* ty=Tensor[(9, 4, 6), float64] */;
  %605 = %596.3;
  %606 = sinh(%603) /* ty=Tensor[(9, 7, 13), float32] */;
  (%604, %605, %var_7392, meta[relay.Constant][25] /* ty=Tensor[(231), int64] */, %var_7405, %606)
}

def @func_8121() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) {
  %611 = fn () -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) {
    %607 = @func_5003() /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(1080), float64], Tensor[(9, 4, 6), bool], Tensor[(819), int16], Tensor[(9, 4, 6), float32], Tensor[(168), float32]) */;
    %608 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
    %609 = %607.1;
    %610 = %608.0;
    (%609, %610)
  };
  %611() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) */
}

def @func_3305() -> Tensor[(360), float32] {
  %612 = fn () -> Tensor[(360), float32] {
    @func_2668() /* ty=Tensor[(360), float32] */
  };
  %612() /* ty=Tensor[(360), float32] */
}

def @func_3571(%var_3569: Tensor[(12, 3, 16), float64], %var_3570: Tensor[(216), bool]) -> (Tensor[(9, 4, 6), uint16], Tensor[(216), bool], Tensor[(12, 3, 16), uint32], Tensor[(168), float32]) {
  @func_3567(%var_3569, %var_3570) /* ty=(Tensor[(9, 4, 6), uint16], Tensor[(216), bool], Tensor[(12, 3, 16), uint32], Tensor[(168), float32]) */
}

def @func_6770() -> (Tensor[(168), float32], Tensor[(168), float32], Tensor[(216), bool], Tensor[(1080), float64], Tensor[(90, 12), float64], Tensor[(9, 4, 6), bool]) {
  %613 = @func_4047() /* ty=(Tensor[(360), float32], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %614 = cast(meta[relay.Constant][26] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %615 = %613.2;
  %616 = cast(%615, dtype="float32") /* ty=Tensor[(168), float32] */;
  %617 = reshape(%614, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), bool] */;
  %618 = reshape(%616, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %619 = @func_924(%617, %618) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), float64]) */;
  %620 = cast(meta[relay.Constant][27] /* ty=Tensor[(90, 12), float64] */, dtype="float64") /* ty=Tensor[(90, 12), float64] */;
  %621 = reshape(%620, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
  %622 = @func_2428(%621) /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(?, 13, 11), bool], Tensor[(9, 12, 10), bool], Tensor[(1080), float64]) */;
  %623 = @func_4214() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %624 = %619.3;
  %625 = %622.5;
  %626 = %623.0;
  (%615, %624, meta[relay.Constant][26] /* ty=Tensor[(216), bool] */, %625, meta[relay.Constant][27] /* ty=Tensor[(90, 12), float64] */, %626)
}

def @func_1111(%var_1110: Tensor[(1, 360), float32]) -> (Tensor[(6, 4, 7), float32], Tensor[(15, 4, 6), float32], Tensor[(1, 360), float32]) {
  %634 = fn (%var_1104: Tensor[(1, 360), float32]) -> (Tensor[(6, 4, 7), float32], Tensor[(15, 4, 6), float32], Tensor[(1, 360), float32]) {
    %627 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
    %628 = %627.2;
    %629 = cast(%628, dtype="float32") /* ty=Tensor[(6, 4, 7), float32] */;
    %630 = cast(%var_1104, dtype="float32") /* ty=Tensor[(1, 360), float32] */;
    %631 = reshape(%630, newshape=[15, 4, 6]) /* ty=Tensor[(15, 4, 6), float32] */;
    %632 = sin(%629) /* ty=Tensor[(6, 4, 7), float32] */;
    %633 = @func_455(%631) /* ty=Tensor[(15, 4, 6), float32] */;
    (%632, %633, %var_1104)
  };
  %634(%var_1110) /* ty=(Tensor[(6, 4, 7), float32], Tensor[(15, 4, 6), float32], Tensor[(1, 360), float32]) */
}

def @func_3268(%var_3212: Tensor[(8, 7, 1), float32], %var_3232: Tensor[(8, 7, 5), float32], %var_3237: Tensor[(216), bool]) -> (Tensor[(8, 7, 5), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(8, 7, 5), uint32]) {
  %635 = cast(%var_3212, dtype="float32") /* ty=Tensor[(8, 7, 1), float32] */;
  %636 = cosh(%635) /* ty=Tensor[(8, 7, 1), float32] */;
  %637 = cast(%636, dtype="bool") /* ty=Tensor[(8, 7, 1), bool] */;
  %638 = cast(%var_3232, dtype="bool") /* ty=Tensor[(8, 7, 5), bool] */;
  %639 = cast(%var_3237, dtype="bool") /* ty=Tensor[(216), bool] */;
  %640 = reshape(%639, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %641 = @func_1626(%640) /* ty=(Tensor[(6, 4, 7), uint16], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool]) */;
  %642 = @func_1743() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %643 = cast(%var_3212, dtype="float32") /* ty=Tensor[(8, 7, 1), float32] */;
  %644 = asinh(%643) /* ty=Tensor[(8, 7, 1), float32] */;
  %645 = cast(%644, dtype="bool") /* ty=Tensor[(8, 7, 1), bool] */;
  %646 = cast(%var_3232, dtype="bool") /* ty=Tensor[(8, 7, 5), bool] */;
  %647 = greater(%645, %646) /* ty=Tensor[(8, 7, 5), bool] */;
  %648 = cast(%647, dtype="uint32") /* ty=Tensor[(8, 7, 5), uint32] */;
  %649 = cast(%636, dtype="uint32") /* ty=Tensor[(8, 7, 1), uint32] */;
  %650 = logical_and(%637, %638) /* ty=Tensor[(8, 7, 5), bool] */;
  %651 = %641.2;
  %652 = %642.0;
  %653 = @func_2453() /* ty=Tensor[(168), float32] */;
  %654 = multiply(%648, %649) /* ty=Tensor[(8, 7, 5), uint32] */;
  (%650, %651, %var_3237, %652, %653, %654)
}

def @func_6310() -> Tensor[(168), float32] {
  %655 = @func_3050() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32]) */;
  %655.2
}

def @func_5389() -> (Tensor[(9, 4, 6), float64], Tensor[(5, 13, 7), uint16], Tensor[(455, 1), float32]) {
  %656 = @func_5063() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(84, 2), float32], Tensor[(6, 4, 7), bool], Tensor[(455, ?), bool]) */;
  %657 = cast(meta[relay.Constant][28] /* ty=Tensor[(455, 1), float32] */, dtype="float32") /* ty=Tensor[(455, 1), float32] */;
  %658 = reshape(%657, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), float32] */;
  %659 = %656.1;
  %660 = @func_3601(%658) /* ty=Tensor[(5, 13, 7), uint16] */;
  (%659, %660, meta[relay.Constant][28] /* ty=Tensor[(455, 1), float32] */)
}

def @func_7569() -> (Tensor[(360), float32],) {
  @func_7567() /* ty=(Tensor[(360), float32],) */
}

def @func_7082() -> (Tensor[(9, 4, 6), bool],) {
  @func_7080() /* ty=(Tensor[(9, 4, 6), bool],) */
}

def @func_1597(%var_1550: Tensor[(168), float32]) -> (Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(9, 4, 6), float64]) {
  %661 = cast(%var_1550, dtype="float32") /* ty=Tensor[(168), float32] */;
  %662 = reshape(%661, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %663 = @func_782(%662) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %664 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  %665 = cast(%664, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %666 = %663.2;
  %667 = cast(%666, dtype="float32") /* ty=Tensor[(168), float32] */;
  %668 = reshape(%665, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), bool] */;
  %669 = reshape(%667, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %670 = @func_924(%668, %669) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), float64]) */;
  %671 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %672 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %673 = %670.0;
  %674 = %671.1;
  %675 = %672.1;
  (%664, %666, %var_1550, %673, %674, %675)
}

def @func_1336() -> Tensor[(168), float32] {
  %676 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %676.3
}

def @func_6376() -> (Tensor[(9, 4, 6), bool],) {
  %678 = fn () -> (Tensor[(9, 4, 6), bool],) {
    %677 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
    (%677,)
  };
  %678() /* ty=(Tensor[(9, 4, 6), bool],) */
}

def @func_3448() -> (Tensor[(360), float32], Tensor[(360), float32], Tensor[(6, 28), bool], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), float32]) {
  %692 = fn () -> (Tensor[(360), float32], Tensor[(360), float32], Tensor[(6, 28), bool], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), float32]) {
    %679 = @func_2173() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool]) */;
    %680 = @func_2485() /* ty=(Tensor[(168), float32], Tensor[(360), float32]) */;
    %681 = @func_2547() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), int8], Tensor[(9, 4, 6), bool]) */;
    %682 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 28), bool] */, dtype="bool") /* ty=Tensor[(6, 28), bool] */;
    %683 = reshape(%682, newshape=[1, 168]) /* ty=Tensor[(1, 168), bool] */;
    %684 = @func_2306(%683) /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(1, 168), bool]) */;
    %685 = %684.2;
    %686 = cast(%685, dtype="float32") /* ty=Tensor[(6, 4, 7), float32] */;
    %687 = %679.0;
    %688 = %680.1;
    %689 = %681.0;
    %690 = @func_2211() /* ty=Tensor[(9, 4, 6), bool] */;
    %691 = exp(%686) /* ty=Tensor[(6, 4, 7), float32] */;
    (%687, %688, meta[relay.Constant][29] /* ty=Tensor[(6, 28), bool] */, %689, %690, %691)
  };
  %692() /* ty=(Tensor[(360), float32], Tensor[(360), float32], Tensor[(6, 28), bool], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), float32]) */
}

def @func_1776() -> Tensor[(360), float32] {
  @func_1774() /* ty=Tensor[(360), float32] */
}

def @func_7877(%var_7868: Tensor[(16, 10, 13), float32]) -> (Tensor[(16, 10, 13), float32],) {
  %693 = cast(%var_7868, dtype="float32") /* ty=Tensor[(16, 10, 13), float32] */;
  %694 = sqrt(%693) /* ty=Tensor[(16, 10, 13), float32] */;
  (%694,)
}

def @func_5572(%var_5570: Tensor[(15, 3, 4), float32]) -> (Tensor[(15, 3, 4), float32], Tensor[(455, 1), float32], Tensor[(9, 4, 6), uint16], Tensor[(216), float64]) {
  @func_5569(%var_5570) /* ty=(Tensor[(15, 3, 4), float32], Tensor[(455, 1), float32], Tensor[(9, 4, 6), uint16], Tensor[(216), float64]) */
}

def @func_7372() -> (Tensor[(360), float32], Tensor[(168), float32], Tensor[(1080), float64]) {
  @func_7370() /* ty=(Tensor[(360), float32], Tensor[(168), float32], Tensor[(1080), float64]) */
}

def @func_2264() -> Tensor[(9, 4, 6), bool] {
  %695 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %695.1
}

def @func_7324(%var_7323: Tensor[(455, 7), float32]) -> (Tensor[(455, 7), uint16], Tensor[(455, 7), bool], Tensor[(455, 1), float32]) {
  %706 = fn (%var_7304: Tensor[(455, 7), float32]) -> (Tensor[(455, 7), uint16], Tensor[(455, 7), bool], Tensor[(455, 1), float32]) {
    %696 = @func_5389() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(5, 13, 7), uint16], Tensor[(455, 1), float32]) */;
    %697 = %696.2;
    %698 = cast(%697, dtype="uint16") /* ty=Tensor[(455, 1), uint16] */;
    %699 = cast(%var_7304, dtype="uint16") /* ty=Tensor[(455, 7), uint16] */;
    %700 = cast(%697, dtype="bool") /* ty=Tensor[(455, 1), bool] */;
    %701 = cast(%var_7304, dtype="bool") /* ty=Tensor[(455, 7), bool] */;
    %702 = cast(%697, dtype="float32") /* ty=Tensor[(455, 1), float32] */;
    %703 = bitwise_or(%698, %699) /* ty=Tensor[(455, 7), uint16] */;
    %704 = less(%700, %701) /* ty=Tensor[(455, 7), bool] */;
    %705 = log2(%702) /* ty=Tensor[(455, 1), float32] */;
    (%703, %704, %705)
  };
  %706(%var_7323) /* ty=(Tensor[(455, 7), uint16], Tensor[(455, 7), bool], Tensor[(455, 1), float32]) */
}

def @func_5717() -> Tensor[(6, 28), float32] {
  %707 = @func_4162() /* ty=Tensor[(6, 28), float32] */;
  %708 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 28), float32] */, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(2), int32] */;
  %710 = cast(%707, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  divide(%710, %711) /* ty=Tensor[(6, 28), float32] */
}

def @func_3127(%var_3125: Tensor[(3, 6, 16), float64]) -> (Tensor[(168), float32], Tensor[(3, 6, 16), bool]) {
  @func_3124(%var_3125) /* ty=(Tensor[(168), float32], Tensor[(3, 6, 16), bool]) */
}

def @func_4047() -> (Tensor[(360), float32], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) {
  %712 = cast(meta[relay.Constant][31] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %713 = reshape(%712, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %714 = @func_1077(%713) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), float64]) */;
  %715 = @func_3304() /* ty=Tensor[(360), float32] */;
  %716 = %714.0;
  (%715, %716, meta[relay.Constant][31] /* ty=Tensor[(168), float32] */)
}

def @func_6827() -> Tensor[(9, 4, 6), bool] {
  %717 = fn () -> Tensor[(9, 4, 6), bool] {
    @func_2118() /* ty=Tensor[(9, 4, 6), bool] */
  };
  %717() /* ty=Tensor[(9, 4, 6), bool] */
}

def @func_272() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) {
  %718 = @func_55() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %719 = %718.1;
  %720 = cast(%719, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
  %721 = cast(meta[relay.Constant][32] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %722 = cast(meta[relay.Constant][32] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %723 = reshape(%721, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %724 = reshape(%722, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %725 = @func_188(%723, %724) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
  %726 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  %727 = log10(%720) /* ty=Tensor[(9, 4, 6), float64] */;
  %728 = %725.0;
  (%726, %727, %728, meta[relay.Constant][32] /* ty=Tensor[(168), float32] */)
}

def @func_1600(%var_1598: Tensor[(168), float32]) -> (Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(9, 4, 6), float64]) {
  @func_1597(%var_1598) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(9, 4, 6), float64]) */
}

def @func_7771() -> Tensor[(?, 180), uint8] {
  %734 = fn () -> Tensor[(?, 180), uint8] {
    %729 = @func_5518() /* ty=Tensor[(1, 180), uint16] */;
    %730 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 180), uint16] */, dtype="uint8") /* ty=Tensor[(1, 180), uint8] */;
    %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(2), int32] */;
    %732 = cast(%729, dtype="uint8") /* ty=Tensor[(1, 180), uint8] */;
    %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    bitwise_and(%732, %733) /* ty=Tensor[(?, 180), uint8] */
  };
  %734() /* ty=Tensor[(?, 180), uint8] */
}

def @func_4683() -> (Tensor[(9, 4, 6), float64],) {
  %736 = fn () -> (Tensor[(9, 4, 6), float64],) {
    %735 = @func_427() /* ty=Tensor[(9, 4, 6), float64] */;
    (%735,)
  };
  %736() /* ty=(Tensor[(9, 4, 6), float64],) */
}

def @func_2487() -> (Tensor[(168), float32], Tensor[(360), float32]) {
  @func_2485() /* ty=(Tensor[(168), float32], Tensor[(360), float32]) */
}

def @func_2306(%var_2300: Tensor[(1, 168), bool]) -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(1, 168), bool]) {
  %737 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
  %738 = @func_288() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %739 = cast(%var_2300, dtype="bool") /* ty=Tensor[(1, 168), bool] */;
  %740 = reshape(%739, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), bool] */;
  %741 = @func_635(%740) /* ty=(Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), bool]) */;
  %742 = %737.4;
  %743 = %738.0;
  %744 = %741.0;
  (%742, %743, %744, %var_2300)
}

def @func_2873() -> Tensor[(9, 4, 6), bool] {
  @func_2871() /* ty=Tensor[(9, 4, 6), bool] */
}

def @func_5003() -> (Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(1080), float64], Tensor[(9, 4, 6), bool], Tensor[(819), int16], Tensor[(9, 4, 6), float32], Tensor[(168), float32]) {
  %745 = cast(meta[relay.Constant][34] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %746 = cast(meta[relay.Constant][34] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %747 = reshape(%745, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %748 = reshape(%746, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float64] */;
  %749 = @func_1210(%747, %748) /* ty=(Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) */;
  %750 = cast(meta[relay.Constant][35] /* ty=Tensor[(819), int16] */, dtype="int16") /* ty=Tensor[(819), int16] */;
  %751 = cast(meta[relay.Constant][35] /* ty=Tensor[(819), int16] */, dtype="int16") /* ty=Tensor[(819), int16] */;
  %752 = reshape(%750, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), int16] */;
  %753 = reshape(%751, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), int16] */;
  %754 = @func_3877(%752, %753) /* ty=(Tensor[(9, 7, 13), uint16], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 7, 13), int32], Tensor[(168), float64], Tensor[(9, 12, 10), float64], Tensor[(1080), float64], Tensor[(6, 4, 7), int8]) */;
  %755 = @func_3343() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float32]) */;
  %756 = @func_1336() /* ty=Tensor[(168), float32] */;
  %757 = cast(%756, dtype="float32") /* ty=Tensor[(168), float32] */;
  %758 = reshape(%757, newshape=[168, 1]) /* ty=Tensor[(168, 1), float32] */;
  %759 = @func_1960(%758) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168, 1), float32], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(1080), float64]) */;
  %760 = %749.3;
  %761 = %754.2;
  %762 = %755.1;
  %763 = %759.1;
  (%756, %760, meta[relay.Constant][34] /* ty=Tensor[(1080), float64] */, %761, meta[relay.Constant][35] /* ty=Tensor[(819), int16] */, %762, %763)
}

def @func_4621() -> (Tensor[(6, 28), float32],) {
  @func_4619() /* ty=(Tensor[(6, 28), float32],) */
}

def @func_1214(%var_1212: Tensor[(9, 12, 10), float64], %var_1213: Tensor[(9, 12, 10), float64]) -> (Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) {
  @func_1210(%var_1212, %var_1213) /* ty=(Tensor[(9, 12, 10), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 12, 10), bool], Tensor[(9, 4, 6), bool]) */
}

def @func_2118() -> Tensor[(9, 4, 6), bool] {
  @func_39() /* ty=Tensor[(9, 4, 6), bool] */
}

def @func_288() -> (Tensor[(9, 4, 6), bool],) {
  %764 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %765 = %764.1;
  (%765,)
}

def @func_4162() -> Tensor[(6, 28), float32] {
  %766 = @func_2010() /* ty=(Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool], Tensor[(6, 28), float32], Tensor[(?, 13, 11), bool]) */;
  %766.2
}

def @func_4836() -> Tensor[(9, 4, 6), float64] {
  %767 = fn () -> Tensor[(9, 4, 6), float64] {
    @func_1763() /* ty=Tensor[(9, 4, 6), float64] */
  };
  %767() /* ty=Tensor[(9, 4, 6), float64] */
}

def @func_724() -> (Tensor[(9, 4, 6), bool],) {
  %789 = fn () -> (Tensor[(9, 4, 6), bool],) {
    %768 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
    %769 = %768.0;
    %770 = @func_288() /* ty=(Tensor[(9, 4, 6), bool],) */;
    %771 = %770.0;
    %772 = cast(%771, dtype="int8") /* ty=Tensor[(9, 4, 6), int8] */;
    %773 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
    %774 = cast(%769, dtype="int8") /* ty=Tensor[(9, 4, 6), int8] */;
    %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %776 = bitwise_xor(%774, %775) /* ty=Tensor[(9, 4, 6), int8] */;
    %777 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
    %778 = %777.1;
    %779 = cast(%778, dtype="float32") /* ty=Tensor[(9, 4, 6), float32] */;
    %780 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
    %781 = cast(%769, dtype="float32") /* ty=Tensor[(9, 4, 6), float32] */;
    %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %783 = floor_mod(%781, %782) /* ty=Tensor[(9, 4, 6), float32] */;
    %784 = cast(%783, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
    %785 = shape_of(%776, dtype="int32") /* ty=Tensor[(3), int32] */;
    %786 = cast(%776, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
    %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %788 = less_equal(%786, %787) /* ty=Tensor[(9, 4, 6), bool] */;
    (%788,)
  };
  %789() /* ty=(Tensor[(9, 4, 6), bool],) */
}

def @func_4806() -> Tensor[(6, 28), int64] {
  %791 = fn () -> Tensor[(6, 28), int64] {
    %790 = @func_4730() /* ty=(Tensor[(6, 28), int64],) */;
    %790.0
  };
  %791() /* ty=Tensor[(6, 28), int64] */
}

def @func_1515() -> (Tensor[(15, 4, 6), float32], Tensor[(168), float32], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool]) {
  %792 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
  %793 = @func_319() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %794 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %795 = %792.3;
  %796 = @func_1336() /* ty=Tensor[(168), float32] */;
  %797 = %793.1;
  %798 = %794.0;
  (%795, %796, %797, %798)
}

def @func_41() -> Tensor[(9, 4, 6), bool] {
  @func_39() /* ty=Tensor[(9, 4, 6), bool] */
}

def @func_321() -> (Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) {
  @func_319() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */
}

def @func_5887() -> Tensor[(360), float32] {
  %800 = fn () -> Tensor[(360), float32] {
    %799 = @func_3662() /* ty=(Tensor[(360), float32],) */;
    %799.0
  };
  %800() /* ty=Tensor[(360), float32] */
}

def @func_2173() -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool]) {
  %801 = cast(meta[relay.Constant][36] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %802 = reshape(%801, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), float64] */;
  %803 = @func_1908(%802) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), uint16]) */;
  %804 = cast(meta[relay.Constant][36] /* ty=Tensor[(216), float64] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %805 = reshape(%804, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), bool] */;
  %806 = @func_1805(%805) /* ty=(Tensor[(9, 4, 6), bool],) */;
  %807 = %806.0;
  %808 = cast(meta[relay.Constant][36] /* ty=Tensor[(216), float64] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %809 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(%807, dtype="float32") /* ty=Tensor[(9, 4, 6), float32] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %812 = @func_1515() /* ty=(Tensor[(15, 4, 6), float32], Tensor[(168), float32], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool]) */;
  %813 = @func_1774() /* ty=Tensor[(360), float32] */;
  %814 = %803.0;
  %815 = power(%810, %811) /* ty=Tensor[(9, 4, 6), float32] */;
  %816 = %812.2;
  (%813, %814, %815, %816)
}

def @func_980() -> (Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) {
  %817 = @func_272() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %818 = %817.3;
  %819 = cast(%818, dtype="float32") /* ty=Tensor[(168), float32] */;
  %820 = reshape(%819, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %821 = @func_782(%820) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %822 = @func_723() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %823 = %821.2;
  %824 = %822.0;
  (%818, %823, %824)
}

def @func_1338() -> Tensor[(168), float32] {
  @func_1336() /* ty=Tensor[(168), float32] */
}

def @func_5912() -> (Tensor[(9, 4, 6), bool],) {
  @func_5910() /* ty=(Tensor[(9, 4, 6), bool],) */
}

def @func_6510() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  %831 = fn () -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
    %825 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
    %826 = @func_5063() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(84, 2), float32], Tensor[(6, 4, 7), bool], Tensor[(455, ?), bool]) */;
    %827 = @func_6168() /* ty=(Tensor[(9, 4, 6), bool],) */;
    %828 = %825.1;
    %829 = %826.0;
    %830 = %827.0;
    (%828, %829, %830)
  };
  %831() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */
}

def @func_2669() -> Tensor[(360), float32] {
  %832 = fn () -> Tensor[(360), float32] {
    @func_1774() /* ty=Tensor[(360), float32] */
  };
  %832() /* ty=Tensor[(360), float32] */
}

def @func_2329() -> Tensor[(4, 5, 10), float64] {
  %839 = fn () -> Tensor[(4, 5, 10), float64] {
    %833 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 5, 10), uint32] */, dtype="bool") /* ty=Tensor[(4, 5, 10), bool] */;
    %834 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(4, 5, 10), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %835 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 5, 10), uint32] */, dtype="bool") /* ty=Tensor[(4, 5, 10), bool] */;
    %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %837 = greater_equal(%835, %836) /* ty=Tensor[(4, 5, 10), bool] */;
    %838 = cast(%837, dtype="float64") /* ty=Tensor[(4, 5, 10), float64] */;
    cos(%838) /* ty=Tensor[(4, 5, 10), float64] */
  };
  %839() /* ty=Tensor[(4, 5, 10), float64] */
}

def @func_4145(%var_4144: Tensor[(10, 2, 7), uint8]) -> (Tensor[(10, 2, 7), uint8], Tensor[(168), bool], Tensor[(3, 6, 16), bool], Tensor[(72, 4), float64], Tensor[(3, 6, 16), bool], Tensor[(5, 13, 7), uint16], Tensor[(65, 7), float32], Tensor[(168, ?), uint64]) {
  %865 = fn (%var_4088: Tensor[(10, 2, 7), uint8]) -> (Tensor[(10, 2, 7), uint8], Tensor[(168), bool], Tensor[(3, 6, 16), bool], Tensor[(72, 4), float64], Tensor[(3, 6, 16), bool], Tensor[(5, 13, 7), uint16], Tensor[(65, 7), float32], Tensor[(168, ?), uint64]) {
    %840 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 2, 1), uint8] */, dtype="uint8") /* ty=Tensor[(10, 2, 1), uint8] */;
    %841 = cast(%var_4088, dtype="uint8") /* ty=Tensor[(10, 2, 7), uint8] */;
    %842 = cast(meta[relay.Constant][40] /* ty=Tensor[(168, 1), bool] */, dtype="bool") /* ty=Tensor[(168, 1), bool] */;
    %843 = reshape(%842, newshape=[168]) /* ty=Tensor[(168), bool] */;
    %844 = @func_2564(%843) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(360), float32], Tensor[(168), bool]) */;
    %845 = cast(meta[relay.Constant][41] /* ty=Tensor[(72, 4), float64] */, dtype="float64") /* ty=Tensor[(72, 4), float64] */;
    %846 = reshape(%845, newshape=[3, 6, 16]) /* ty=Tensor[(3, 6, 16), float64] */;
    %847 = @func_3124(%846) /* ty=(Tensor[(168), float32], Tensor[(3, 6, 16), bool]) */;
    %848 = cast(meta[relay.Constant][41] /* ty=Tensor[(72, 4), float64] */, dtype="float64") /* ty=Tensor[(72, 4), float64] */;
    %849 = reshape(%848, newshape=[3, 6, 16]) /* ty=Tensor[(3, 6, 16), float64] */;
    %850 = @func_3124(%849) /* ty=(Tensor[(168), float32], Tensor[(3, 6, 16), bool]) */;
    %851 = cast(meta[relay.Constant][42] /* ty=Tensor[(65, 7), float32] */, dtype="float32") /* ty=Tensor[(65, 7), float32] */;
    %852 = reshape(%851, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), float32] */;
    %853 = @func_980() /* ty=(Tensor[(168), float32], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
    %854 = %853.1;
    %855 = cast(%854, dtype="uint64") /* ty=Tensor[(168), uint64] */;
    %856 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(168, 1), bool] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %857 = cast(meta[relay.Constant][40] /* ty=Tensor[(168, 1), bool] */, dtype="uint64") /* ty=Tensor[(168, 1), uint64] */;
    %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %859 = add(%840, %841) /* ty=Tensor[(10, 2, 7), uint8] */;
    %860 = %844.2;
    %861 = %847.1;
    %862 = %850.1;
    %863 = @func_3601(%852) /* ty=Tensor[(5, 13, 7), uint16] */;
    %864 = right_shift(%857, %858) /* ty=Tensor[(168, ?), uint64] */;
    (%859, %860, %861, meta[relay.Constant][41] /* ty=Tensor[(72, 4), float64] */, %862, %863, meta[relay.Constant][42] /* ty=Tensor[(65, 7), float32] */, %864)
  };
  %865(%var_4144) /* ty=(Tensor[(10, 2, 7), uint8], Tensor[(168), bool], Tensor[(3, 6, 16), bool], Tensor[(72, 4), float64], Tensor[(3, 6, 16), bool], Tensor[(5, 13, 7), uint16], Tensor[(65, 7), float32], Tensor[(168, ?), uint64]) */
}

def @func_3567(%var_3531: Tensor[(12, 3, 16), float64], %var_3536: Tensor[(216), bool]) -> (Tensor[(9, 4, 6), uint16], Tensor[(216), bool], Tensor[(12, 3, 16), uint32], Tensor[(168), float32]) {
  %866 = cast(%var_3536, dtype="bool") /* ty=Tensor[(216), bool] */;
  %867 = reshape(%866, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), bool] */;
  %868 = @func_2392(%867) /* ty=(Tensor[(9, 4, 6), uint16], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32]) */;
  %869 = cast(%var_3531, dtype="float64") /* ty=Tensor[(12, 3, 16), float64] */;
  %870 = log(%869) /* ty=Tensor[(12, 3, 16), float64] */;
  %871 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 3, 16), float64] */, dtype="uint32") /* ty=Tensor[(12, 3, 16), uint32] */;
  %872 = shape_of(%870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %873 = cast(%870, dtype="uint32") /* ty=Tensor[(12, 3, 16), uint32] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %875 = @func_3050() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32]) */;
  %876 = %868.0;
  %877 = add(%873, %874) /* ty=Tensor[(12, 3, 16), uint32] */;
  %878 = %875.2;
  (%876, %var_3536, %877, %878)
}

def @func_3742(%var_3740: Tensor[(1, 12, 4), float32]) -> Tensor[(1, 12, 4), float32] {
  @func_3739(%var_3740) /* ty=Tensor[(1, 12, 4), float32] */
}

def @func_4424() -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool]) {
  @func_4422() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool]) */
}

def @func_4164() -> Tensor[(6, 28), float32] {
  @func_4162() /* ty=Tensor[(6, 28), float32] */
}

def @func_4320() -> (Tensor[(360), float32], Tensor[(15, 4, 6), float32]) {
  %879 = @func_3662() /* ty=(Tensor[(360), float32],) */;
  %880 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
  %881 = %879.0;
  %882 = %880.3;
  (%881, %882)
}

def @func_638(%var_636: Tensor[(6, 4, 7), bool]) -> (Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), bool]) {
  @func_635(%var_636) /* ty=(Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), bool]) */
}

def @func_1908(%var_1903: Tensor[(9, 4, 6), float64]) -> (Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), uint16]) {
  %883 = cast(meta[relay.Constant][44] /* ty=Tensor[(117), float32] */, dtype="float32") /* ty=Tensor[(117), float32] */;
  %884 = reshape(%883, newshape=[13, 9, 1]) /* ty=Tensor[(13, 9, 1), float32] */;
  %885 = @func_1834(%884) /* ty=(Tensor[(13, 9, 1), float64], Tensor[(9, 4, 6), bool]) */;
  %886 = @func_1763() /* ty=Tensor[(9, 4, 6), float64] */;
  %887 = cast(%var_1903, dtype="uint16") /* ty=Tensor[(9, 4, 6), uint16] */;
  %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(%886, dtype="uint16") /* ty=Tensor[(9, 4, 6), uint16] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %891 = %885.1;
  %892 = minimum(%889, %890) /* ty=Tensor[(9, 4, 6), uint16] */;
  (%891, meta[relay.Constant][44] /* ty=Tensor[(117), float32] */, %892)
}

def @func_1079(%var_1078: Tensor[(168), float32]) -> (Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), float64]) {
  %911 = fn (%var_1004: Tensor[(168), float32]) -> (Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), float64]) {
    %893 = cast(%var_1004, dtype="float32") /* ty=Tensor[(168), float32] */;
    %894 = cast(%var_1004, dtype="float32") /* ty=Tensor[(168), float32] */;
    %895 = reshape(%893, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %896 = reshape(%894, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %897 = @func_188(%895, %896) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
    %898 = @func_723() /* ty=(Tensor[(9, 4, 6), bool],) */;
    %899 = %897.2;
    %900 = cast(%899, dtype="bool") /* ty=Tensor[(6, 4, 7), bool] */;
    %901 = reshape(%900, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), bool] */;
    %902 = @func_635(%901) /* ty=(Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), bool]) */;
    %903 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
    %904 = %903.1;
    %905 = cast(%904, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
    %906 = acosh(%905) /* ty=Tensor[(9, 4, 6), float64] */;
    %907 = cast(%906, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
    %908 = %898.0;
    %909 = %902.0;
    %910 = tan(%907) /* ty=Tensor[(9, 4, 6), float64] */;
    (%899, %var_1004, %908, %909, %910)
  };
  %911(%var_1078) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), float64]) */
}

def @func_455(%var_432: Tensor[(15, 4, 6), float32]) -> Tensor[(15, 4, 6), float32] {
  %912 = cast(%var_432, dtype="float32") /* ty=Tensor[(15, 4, 6), float32] */;
  sigmoid(%912) /* ty=Tensor[(15, 4, 6), float32] */
}

def @func_1230() -> Tensor[(168), float32] {
  %913 = @func_319() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %913.2
}

def @func_7080() -> (Tensor[(9, 4, 6), bool],) {
  %914 = @func_6375() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %915 = %914.0;
  (%915,)
}

def @func_191(%var_189: Tensor[(6, 4, 7), float32], %var_190: Tensor[(6, 4, 7), float32]) -> (Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) {
  %928 = fn (%var_147: Tensor[(6, 4, 7), float32], %var_148: Tensor[(6, 4, 7), float32]) -> (Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) {
    %916 = cast(%var_148, dtype="bool") /* ty=Tensor[(6, 4, 7), bool] */;
    %917 = shape_of(%var_147, dtype="int32") /* ty=Tensor[(3), int32] */;
    %918 = cast(%var_147, dtype="bool") /* ty=Tensor[(6, 4, 7), bool] */;
    %919 = dyn.reshape(%916, %917, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %920 = @func_55() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
    %921 = cast(%var_147, dtype="bool") /* ty=Tensor[(6, 4, 7), bool] */;
    %922 = shape_of(%var_148, dtype="int32") /* ty=Tensor[(3), int32] */;
    %923 = cast(%var_148, dtype="bool") /* ty=Tensor[(6, 4, 7), bool] */;
    %924 = dyn.reshape(%921, %922, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %925 = not_equal(%918, %919) /* ty=Tensor[(6, 4, 7), bool] */;
    %926 = %920.0;
    %927 = logical_or(%923, %924) /* ty=Tensor[(6, 4, 7), bool] */;
    (%925, %926, %927)
  };
  %928(%var_189, %var_190) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */
}

def @main(%var_8173: Tensor[(13, 35), float32], %var_8176: Tensor[(180), float32], %var_8181: Tensor[(1080), float64]) -> (Tensor[(9, 4, 6), bool], Tensor[(5, 13, 7), uint16], Tensor[(13, 35), float32], Tensor[(15, 3, 4), float32], Tensor[(180), float32], Tensor[(1080), float64]) {
  %929 = @func_7021() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %930 = cast(%var_8173, dtype="float32") /* ty=Tensor[(13, 35), float32] */;
  %931 = reshape(%930, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), float32] */;
  %932 = cast(%var_8176, dtype="float32") /* ty=Tensor[(180), float32] */;
  %933 = reshape(%932, newshape=[15, 3, 4]) /* ty=Tensor[(15, 3, 4), float32] */;
  %934 = @func_5572(%933) /* ty=(Tensor[(15, 3, 4), float32], Tensor[(455, 1), float32], Tensor[(9, 4, 6), uint16], Tensor[(216), float64]) */;
  %935 = @func_7859() /* ty=(Tensor[(1080), float64],) */;
  %936 = %935.0;
  %937 = cast(%var_8181, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %938 = shape_of(%936, dtype="int32") /* ty=Tensor[(1), int32] */;
  %939 = cast(%936, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?), float64] */;
  %941 = %929.1;
  %942 = @func_3601(%931) /* ty=Tensor[(5, 13, 7), uint16] */;
  %943 = %934.0;
  %944 = floor_divide(%939, %940) /* ty=Tensor[(1080), float64] */;
  (%941, %942, %var_8173, %943, %var_8176, %944)
}

def @func_6849() -> (Tensor[(9, 4, 6), bool],) {
  %947 = fn () -> (Tensor[(9, 4, 6), bool],) {
    %945 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
    %946 = %945.1;
    (%946,)
  };
  %947() /* ty=(Tensor[(9, 4, 6), bool],) */
}

def @func_7589() -> Tensor[(9, 4, 6), bool] {
  %949 = fn () -> Tensor[(9, 4, 6), bool] {
    %948 = @func_1388() /* ty=(Tensor[(9, 4, 6), bool],) */;
    %948.0
  };
  %949() /* ty=Tensor[(9, 4, 6), bool] */
}

def @func_2919(%var_2917: int64, %var_2918: Tensor[(15, 8, 15), int64]) -> (Tensor[(15, 8, 15), bool],) {
  %958 = fn (%var_2893: int64, %var_2894: Tensor[(15, 8, 15), int64]) -> (Tensor[(15, 8, 15), bool],) {
    %950 = cast(%var_2893, dtype="int64") /* ty=int64 */;
    %951 = cast(%var_2894, dtype="int64") /* ty=Tensor[(15, 8, 15), int64] */;
    %952 = bitwise_or(%950, %951) /* ty=Tensor[(15, 8, 15), int64] */;
    %953 = cast(meta[relay.Constant][45] /* ty=Tensor[(15, 8, 15), int64] */, dtype="bool") /* ty=Tensor[(15, 8, 15), bool] */;
    %954 = shape_of(%952, dtype="int32") /* ty=Tensor[(3), int32] */;
    %955 = cast(%952, dtype="bool") /* ty=Tensor[(15, 8, 15), bool] */;
    %956 = dyn.reshape(%953, %954, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %957 = greater(%955, %956) /* ty=Tensor[(15, 8, 15), bool] */;
    (%957,)
  };
  %958(%var_2917, %var_2918) /* ty=(Tensor[(15, 8, 15), bool],) */
}

def @func_2635(%var_2633: Tensor[(11, 3, 7), uint64]) -> (Tensor[(168), float32], Tensor[(11, 3, 7), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(360), float32], Tensor[(9, 4, 6), bool]) {
  @func_2632(%var_2633) /* ty=(Tensor[(168), float32], Tensor[(11, 3, 7), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(360), float32], Tensor[(9, 4, 6), bool]) */
}

def @func_6256(%var_6254: Tensor[(16, 12, 3), uint8], %var_6255: Tensor[(16, 12, 3), uint8]) -> (Tensor[(16, 12, 3), uint8],) {
  %964 = fn (%var_6238: Tensor[(16, 12, 3), uint8], %var_6239: Tensor[(16, 12, 3), uint8]) -> (Tensor[(16, 12, 3), uint8],) {
    %959 = cast(%var_6239, dtype="uint8") /* ty=Tensor[(16, 12, 3), uint8] */;
    %960 = shape_of(%var_6238, dtype="int32") /* ty=Tensor[(3), int32] */;
    %961 = cast(%var_6238, dtype="uint8") /* ty=Tensor[(16, 12, 3), uint8] */;
    %962 = dyn.reshape(%959, %960, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %963 = right_shift(%961, %962) /* ty=Tensor[(16, 12, 3), uint8] */;
    (%963,)
  };
  %964(%var_6254, %var_6255) /* ty=(Tensor[(16, 12, 3), uint8],) */
}

def @func_5569(%var_5540: Tensor[(15, 3, 4), float32]) -> (Tensor[(15, 3, 4), float32], Tensor[(455, 1), float32], Tensor[(9, 4, 6), uint16], Tensor[(216), float64]) {
  %965 = cast(%var_5540, dtype="float32") /* ty=Tensor[(15, 3, 4), float32] */;
  %966 = @func_5389() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(5, 13, 7), uint16], Tensor[(455, 1), float32]) */;
  %967 = cast(meta[relay.Constant][46] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %968 = reshape(%967, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), float64] */;
  %969 = @func_1908(%968) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), uint16]) */;
  %970 = log10(%965) /* ty=Tensor[(15, 3, 4), float32] */;
  %971 = %966.2;
  %972 = %969.2;
  (%970, %971, %972, meta[relay.Constant][46] /* ty=Tensor[(216), float64] */)
}

def @func_4732() -> (Tensor[(6, 28), int64],) {
  @func_4730() /* ty=(Tensor[(6, 28), int64],) */
}

def @func_635(%var_619: Tensor[(6, 4, 7), bool]) -> (Tensor[(6, 4, 7), int8], Tensor[(9, 4, 6), bool]) {
  %973 = @func_319() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
  %974 = %973.1;
  %975 = cast(%var_619, dtype="int8") /* ty=Tensor[(6, 4, 7), int8] */;
  %976 = shape_of(%974, dtype="int32") /* ty=Tensor[(3), int32] */;
  %977 = cast(%974, dtype="int8") /* ty=Tensor[(6, 4, 7), int8] */;
  %978 = dyn.reshape(%975, %976, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %979 = @func_288() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %980 = right_shift(%977, %978) /* ty=Tensor[(6, 4, 7), int8] */;
  %981 = %979.0;
  (%980, %981)
}

def @func_4715() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  @func_4713() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */
}

def @func_3051() -> (Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32]) {
  %987 = fn () -> (Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32]) {
    %982 = @func_84() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
    %983 = @func_319() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(168), float32]) */;
    %984 = %982.1;
    %985 = @func_1230() /* ty=Tensor[(168), float32] */;
    %986 = %983.2;
    (%984, %985, %986)
  };
  %987() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32]) */
}

def @func_1743() -> (Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) {
  %988 = @func_1515() /* ty=(Tensor[(15, 4, 6), float32], Tensor[(168), float32], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool]) */;
  %989 = @func_288() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %990 = @func_427() /* ty=Tensor[(9, 4, 6), float64] */;
  %991 = %988.1;
  %992 = %989.0;
  (%990, %991, %992)
}

def @func_6459() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 28), int64]) {
  %1007 = fn () -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 28), int64]) {
    %993 = @func_2547() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), int8], Tensor[(9, 4, 6), bool]) */;
    %994 = @func_4730() /* ty=(Tensor[(6, 28), int64],) */;
    %995 = %994.0;
    %996 = cast(%995, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
    %997 = atanh(%996) /* ty=Tensor[(6, 28), float32] */;
    %998 = cast(%997, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
    %999 = sigmoid(%998) /* ty=Tensor[(6, 28), float32] */;
    %1000 = cast(%995, dtype="int64") /* ty=Tensor[(6, 28), int64] */;
    %1001 = shape_of(%999, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1002 = cast(%999, dtype="int64") /* ty=Tensor[(6, 28), int64] */;
    %1003 = dyn.reshape(%1000, %1001, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %1004 = @func_5099() /* ty=Tensor[(9, 4, 6), bool] */;
    %1005 = %993.0;
    %1006 = multiply(%1002, %1003) /* ty=Tensor[(6, 28), int64] */;
    (%1004, %1005, %1006)
  };
  %1007() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(6, 28), int64]) */
}

def @func_5138() -> (Tensor[(9, 4, 6), bool], Tensor[(360), float32]) {
  @func_5136() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(360), float32]) */
}

def @func_5448() -> Tensor[(9, 4, 6), float64] {
  @func_5446() /* ty=Tensor[(9, 4, 6), float64] */
}

def @func_5136() -> (Tensor[(9, 4, 6), bool], Tensor[(360), float32]) {
  %1008 = @func_603() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(15, 4, 6), float32], Tensor[(360), float32], Tensor[(6, 4, 7), bool]) */;
  %1009 = @func_4422() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool]) */;
  %1010 = %1008.2;
  %1011 = %1009.0;
  (%1010, %1011)
}

def @func_7232(%var_7231: Tensor[(6, 28), int64]) -> (Tensor[(360), float32], Tensor[(6, 28), float32], Tensor[(6, 28), bool]) {
  %1030 = fn (%var_7215: Tensor[(6, 28), int64]) -> (Tensor[(360), float32], Tensor[(6, 28), float32], Tensor[(6, 28), bool]) {
    %1012 = @func_5136() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(360), float32]) */;
    %1013 = @func_4805() /* ty=Tensor[(6, 28), int64] */;
    %1014 = cast(%var_7215, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
    %1015 = shape_of(%1013, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1016 = cast(%1013, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
    %1017 = dyn.reshape(%1014, %1015, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %1018 = cast(meta[relay.Constant][47] /* ty=Tensor[(6, 28), int64] */, dtype="int32") /* ty=Tensor[(6, 28), int32] */;
    %1019 = shape_of(%1013, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1020 = cast(%1013, dtype="int32") /* ty=Tensor[(6, 28), int32] */;
    %1021 = dyn.reshape(%1018, %1019, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %1022 = bitwise_or(%1020, %1021) /* ty=Tensor[(6, 28), int32] */;
    %1023 = cast(meta[relay.Constant][47] /* ty=Tensor[(6, 28), int64] */, dtype="bool") /* ty=Tensor[(6, 28), bool] */;
    %1024 = shape_of(%1022, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1025 = cast(%1022, dtype="bool") /* ty=Tensor[(6, 28), bool] */;
    %1026 = dyn.reshape(%1023, %1024, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %1027 = %1012.1;
    %1028 = floor_divide(%1016, %1017) /* ty=Tensor[(6, 28), float32] */;
    %1029 = less(%1025, %1026) /* ty=Tensor[(6, 28), bool] */;
    (%1027, %1028, %1029)
  };
  %1030(%var_7231) /* ty=(Tensor[(360), float32], Tensor[(6, 28), float32], Tensor[(6, 28), bool]) */
}

def @func_6688() -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(6, 4, 7), bool]) {
  %1041 = fn () -> (Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(6, 4, 7), bool]) {
    %1031 = @func_4953() /* ty=(Tensor[(360), float32],) */;
    %1032 = @func_55() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
    %1033 = @func_2173() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool]) */;
    %1034 = %1033.3;
    %1035 = cast(%1034, dtype="float32") /* ty=Tensor[(6, 4, 7), float32] */;
    %1036 = reshape(%1035, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %1037 = @func_782(%1036) /* ty=(Tensor[(9, 4, 6), float64], Tensor[(6, 4, 7), bool], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
    %1038 = %1031.0;
    %1039 = %1032.1;
    %1040 = %1037.1;
    (%1038, %1039, %1034, %1040)
  };
  %1041() /* ty=(Tensor[(360), float32], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(6, 4, 7), bool]) */
}

def @func_428() -> Tensor[(9, 4, 6), float64] {
  %1047 = fn () -> Tensor[(9, 4, 6), float64] {
    %1042 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
    %1043 = cast(meta[relay.Constant][48] /* ty=Tensor[(9, 4, 6), bool] */, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
    %1044 = shape_of(%1042, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1045 = cast(%1042, dtype="float64") /* ty=Tensor[(9, 4, 6), float64] */;
    %1046 = dyn.reshape(%1043, %1044, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%1045, %1046) /* ty=Tensor[(9, 4, 6), float64] */
  };
  %1047() /* ty=Tensor[(9, 4, 6), float64] */
}

def @func_2752(%var_2750: Tensor[(13, 10, 11), float32], %var_2751: Tensor[(13, 10, 11), float32]) -> (Tensor[(13, 10, 11), float32],) {
  @func_2748(%var_2750, %var_2751) /* ty=(Tensor[(13, 10, 11), float32],) */
}

def @func_3124(%var_3115: Tensor[(3, 6, 16), float64]) -> (Tensor[(168), float32], Tensor[(3, 6, 16), bool]) {
  %1048 = @func_2094() /* ty=(Tensor[(168), float32], Tensor[(9, 4, 6), float64], Tensor[(216), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64]) */;
  %1049 = cast(%var_3115, dtype="float64") /* ty=Tensor[(3, 6, 16), float64] */;
  %1050 = asin(%1049) /* ty=Tensor[(3, 6, 16), float64] */;
  %1051 = cast(%var_3115, dtype="bool") /* ty=Tensor[(3, 6, 16), bool] */;
  %1052 = shape_of(%1050, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1053 = cast(%1050, dtype="bool") /* ty=Tensor[(3, 6, 16), bool] */;
  %1054 = dyn.reshape(%1051, %1052, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1055 = %1048.0;
  %1056 = equal(%1053, %1054) /* ty=Tensor[(3, 6, 16), bool] */;
  (%1055, %1056)
}

def @func_4713() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  %1057 = @func_1743() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(168), float32], Tensor[(9, 4, 6), bool]) */;
  %1058 = @func_723() /* ty=(Tensor[(9, 4, 6), bool],) */;
  %1059 = %1057.2;
  %1060 = %1058.0;
  %1061 = @func_39() /* ty=Tensor[(9, 4, 6), bool] */;
  (%1059, %1060, %1061)
}

def @func_5520() -> Tensor[(1, 180), uint16] {
  @func_5518() /* ty=Tensor[(1, 180), uint16] */
}

def @func_6879(%var_6878: Tensor[(12, 10, 1), float64]) -> Tensor[(12, 10, 10), float64] {
  %1064 = fn (%var_6872: Tensor[(12, 10, 1), float64]) -> Tensor[(12, 10, 10), float64] {
    %1062 = cast(%var_6872, dtype="float64") /* ty=Tensor[(12, 10, 1), float64] */;
    %1063 = cast(meta[relay.Constant][49] /* ty=Tensor[(12, 10, 10), float64] */, dtype="float64") /* ty=Tensor[(12, 10, 10), float64] */;
    floor_mod(%1062, %1063) /* ty=Tensor[(12, 10, 10), float64] */
  };
  %1064(%var_6878) /* ty=Tensor[(12, 10, 10), float64] */
}

def @func_3171(%var_3169: Tensor[(13, 4, 15), float64]) -> (Tensor[(13, 4, 15), float64],) {
  @func_3168(%var_3169) /* ty=(Tensor[(13, 4, 15), float64],) */
}

def @func_5064() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(84, 2), float32], Tensor[(6, 4, 7), bool], Tensor[(455, ?), bool]) {
  %1095 = fn () -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(84, 2), float32], Tensor[(6, 4, 7), bool], Tensor[(455, ?), bool]) {
    %1065 = @func_3050() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(168), float32], Tensor[(168), float32]) */;
    %1066 = @func_3343() /* ty=(Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float32]) */;
    %1067 = %1065.0;
    %1068 = cast(%1067, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
    %1069 = reshape(%1068, newshape=[216]) /* ty=Tensor[(216), bool] */;
    %1070 = @func_1626(%1069) /* ty=(Tensor[(6, 4, 7), uint16], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool]) */;
    %1071 = @func_288() /* ty=(Tensor[(9, 4, 6), bool],) */;
    %1072 = cast(meta[relay.Constant][50] /* ty=Tensor[(84, 2), float32] */, dtype="float32") /* ty=Tensor[(84, 2), float32] */;
    %1073 = cast(meta[relay.Constant][50] /* ty=Tensor[(84, 2), float32] */, dtype="float32") /* ty=Tensor[(84, 2), float32] */;
    %1074 = reshape(%1072, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %1075 = reshape(%1073, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %1076 = @func_188(%1074, %1075) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
    %1077 = cast(meta[relay.Constant][50] /* ty=Tensor[(84, 2), float32] */, dtype="float32") /* ty=Tensor[(84, 2), float32] */;
    %1078 = cast(meta[relay.Constant][50] /* ty=Tensor[(84, 2), float32] */, dtype="float32") /* ty=Tensor[(84, 2), float32] */;
    %1079 = reshape(%1077, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %1080 = reshape(%1078, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %1081 = @func_188(%1079, %1080) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
    %1082 = cast(meta[relay.Constant][51] /* ty=Tensor[(455, 1), float32] */, dtype="float32") /* ty=Tensor[(455, 1), float32] */;
    %1083 = reshape(%1082, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), float32] */;
    %1084 = @func_3601(%1083) /* ty=Tensor[(5, 13, 7), uint16] */;
    %1085 = cast(%1084, dtype="bool") /* ty=Tensor[(5, 13, 7), bool] */;
    %1086 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(455, 1), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1087 = cast(meta[relay.Constant][51] /* ty=Tensor[(455, 1), float32] */, dtype="bool") /* ty=Tensor[(455, 1), bool] */;
    %1088 = dyn.reshape(%1085, %1086, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %1089 = %1066.0;
    %1090 = %1070.2;
    %1091 = %1071.0;
    %1092 = %1076.0;
    %1093 = %1081.0;
    %1094 = greater_equal(%1087, %1088) /* ty=Tensor[(455, ?), bool] */;
    (%1067, %1089, %1090, %1091, %1092, meta[relay.Constant][50] /* ty=Tensor[(84, 2), float32] */, %1093, %1094)
  };
  %1095() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), float64], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool], Tensor[(84, 2), float32], Tensor[(6, 4, 7), bool], Tensor[(455, ?), bool]) */
}

def @func_458(%var_456: Tensor[(15, 4, 6), float32]) -> Tensor[(15, 4, 6), float32] {
  @func_455(%var_456) /* ty=Tensor[(15, 4, 6), float32] */
}

def @func_4322() -> (Tensor[(360), float32], Tensor[(15, 4, 6), float32]) {
  @func_4320() /* ty=(Tensor[(360), float32], Tensor[(15, 4, 6), float32]) */
}

def @func_5518() -> Tensor[(1, 180), uint16] {
  %1096 = @func_5184() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(1080), float64], Tensor[(1, 180), uint16]) */;
  %1096.2
}

def @func_5798() -> (Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) {
  %1097 = @func_55() /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), bool]) */;
  %1098 = %1097.0;
  %1099 = @func_2118() /* ty=Tensor[(9, 4, 6), bool] */;
  (%1098, %1099)
}

def @func_2011() -> (Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool], Tensor[(6, 28), float32], Tensor[(?, 13, 11), bool]) {
  %1117 = fn () -> (Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool], Tensor[(6, 28), float32], Tensor[(?, 13, 11), bool]) {
    %1100 = @func_288() /* ty=(Tensor[(9, 4, 6), bool],) */;
    %1101 = %1100.0;
    %1102 = cast(%1101, dtype="float32") /* ty=Tensor[(9, 4, 6), float32] */;
    %1103 = cast(meta[relay.Constant][52] /* ty=Tensor[(6, 28), float32] */, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
    %1104 = cast(meta[relay.Constant][52] /* ty=Tensor[(6, 28), float32] */, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
    %1105 = reshape(%1103, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %1106 = reshape(%1104, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %1107 = @func_188(%1105, %1106) /* ty=(Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), bool], Tensor[(6, 4, 7), bool]) */;
    %1108 = cast(meta[relay.Constant][53] /* ty=Tensor[(1, 13, 11), float32] */, dtype="float32") /* ty=Tensor[(1, 13, 11), float32] */;
    %1109 = log2(%1108) /* ty=Tensor[(1, 13, 11), float32] */;
    %1110 = cast(meta[relay.Constant][53] /* ty=Tensor[(1, 13, 11), float32] */, dtype="bool") /* ty=Tensor[(1, 13, 11), bool] */;
    %1111 = shape_of(%1109, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1112 = cast(%1109, dtype="bool") /* ty=Tensor[(1, 13, 11), bool] */;
    %1113 = dyn.reshape(%1110, %1111, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1114 = exp(%1102) /* ty=Tensor[(9, 4, 6), float32] */;
    %1115 = %1107.0;
    %1116 = less_equal(%1112, %1113) /* ty=Tensor[(?, 13, 11), bool] */;
    (%1114, %1115, meta[relay.Constant][52] /* ty=Tensor[(6, 28), float32] */, %1116)
  };
  %1117() /* ty=(Tensor[(9, 4, 6), float32], Tensor[(6, 4, 7), bool], Tensor[(6, 28), float32], Tensor[(?, 13, 11), bool]) */
}

def @func_6022(%var_6019: Tensor[(10, 3, 13), float64], %var_6020: Tensor[(10, 3, 13), float64], %var_6021: Tensor[(12, 18), float64]) -> (Tensor[(10, 3, 13), float64], Tensor[(9, 4, 6), uint16], Tensor[(12, 18), float64]) {
  %1127 = fn (%var_6008: Tensor[(10, 3, 13), float64], %var_6009: Tensor[(10, 3, 13), float64], %var_6014: Tensor[(12, 18), float64]) -> (Tensor[(10, 3, 13), float64], Tensor[(9, 4, 6), uint16], Tensor[(12, 18), float64]) {
    %1118 = cast(%var_6009, dtype="float64") /* ty=Tensor[(10, 3, 13), float64] */;
    %1119 = shape_of(%var_6008, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1120 = cast(%var_6008, dtype="float64") /* ty=Tensor[(10, 3, 13), float64] */;
    %1121 = dyn.reshape(%1118, %1119, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1122 = cast(%var_6014, dtype="float64") /* ty=Tensor[(12, 18), float64] */;
    %1123 = reshape(%1122, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), float64] */;
    %1124 = @func_1908(%1123) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(117), float32], Tensor[(9, 4, 6), uint16]) */;
    %1125 = mod(%1120, %1121) /* ty=Tensor[(10, 3, 13), float64] */;
    %1126 = %1124.2;
    (%1125, %1126, %var_6014)
  };
  %1127(%var_6019, %var_6020, %var_6021) /* ty=(Tensor[(10, 3, 13), float64], Tensor[(9, 4, 6), uint16], Tensor[(12, 18), float64]) */
}

def @func_4797() -> (Tensor[(360), float32], Tensor[(6, 4, 7), uint16], Tensor[(216), bool], Tensor[(9, 4, 6), float64], Tensor[(1080, 1), float64]) {
  %1137 = fn () -> (Tensor[(360), float32], Tensor[(6, 4, 7), uint16], Tensor[(216), bool], Tensor[(9, 4, 6), float64], Tensor[(1080, 1), float64]) {
    %1128 = cast(meta[relay.Constant][54] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
    %1129 = reshape(%1128, newshape=[216]) /* ty=Tensor[(216), bool] */;
    %1130 = @func_1626(%1129) /* ty=(Tensor[(6, 4, 7), uint16], Tensor[(6, 4, 7), bool], Tensor[(9, 4, 6), float64], Tensor[(216), bool]) */;
    %1131 = cast(meta[relay.Constant][55] /* ty=Tensor[(1080, 1), float64] */, dtype="float64") /* ty=Tensor[(1080, 1), float64] */;
    %1132 = reshape(%1131, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
    %1133 = @func_1435(%1132) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(9, 4, 6), float64], Tensor[(1080), float64]) */;
    %1134 = @func_3304() /* ty=Tensor[(360), float32] */;
    %1135 = %1130.0;
    %1136 = %1133.1;
    (%1134, %1135, meta[relay.Constant][54] /* ty=Tensor[(216), bool] */, %1136, meta[relay.Constant][55] /* ty=Tensor[(1080, 1), float64] */)
  };
  %1137() /* ty=(Tensor[(360), float32], Tensor[(6, 4, 7), uint16], Tensor[(216), bool], Tensor[(9, 4, 6), float64], Tensor[(1080, 1), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen247/build/output.py", line 3211, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:00:42] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

