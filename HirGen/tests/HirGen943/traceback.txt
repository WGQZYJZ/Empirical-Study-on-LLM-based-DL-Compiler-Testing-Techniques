==========mod==========
#[version = "0.0.5"]
def @func_6910() -> (Tensor[(5, 9, 5), float64], Tensor[(5, 9, 5), bool]) {
  %0 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(5, 9, 5), float64] */;
  %3 = sin(%2) /* ty=Tensor[(5, 9, 5), float64] */;
  %4 = @func_6812() /* ty=Tensor[(5, 9, 5), bool] */;
  (%3, %4)
}

def @func_7836() -> (Tensor[(2, 2, 1), float32],) {
  %5 = @func_3625() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %6 = %5.0;
  (%6,)
}

def @func_10463(%var_10451: Tensor[(12), float32], %var_10452: Tensor[(480), uint16], %var_10456: Tensor[(140), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(864, 2), float32], float32, Tensor[(140), float32]) {
  %7 = cast(%var_10451, dtype="float32") /* ty=Tensor[(12), float32] */;
  %8 = cast(%var_10452, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %9 = reshape(%7, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %10 = reshape(%8, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %11 = @func_6571(%9, %10) /* ty=(Tensor[(2, 2, ?), bool], Tensor[(48), float32], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(1728), float32]) */;
  %12 = %11.3;
  %13 = cast(%12, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %14 = cast(9.90881f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %15 = cast(%var_10456, dtype="float32") /* ty=Tensor[(140), float32] */;
  %16 = reshape(%13, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %17 = reshape(%14, newshape=[]) /* ty=float32 */;
  %18 = reshape(%15, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %19 = @func_5095(%16, %17, %18) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(864, 2), float32], Tensor[(480), uint16], float32, Tensor[(1728), float32], Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(140), float32], Tensor[(?, 9, 15), int32]) */;
  %20 = @func_7426() /* ty=Tensor[(2, 2, 1), float32] */;
  %21 = %19.2;
  (%20, %12, %var_10451, %var_10452, %21, 9.90881f /* ty=float32 */, %var_10456)
}

def @func_9076(%var_9005: float32, %var_9006: Tensor[(3, 45), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(3, 45), int16], Tensor[(2, 2, ?), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  %22 = @func_6101() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %23 = cast(%var_9005, dtype="float32") /* ty=float32 */;
  %24 = cast(%var_9006, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
  %25 = reshape(%23, newshape=[]) /* ty=float32 */;
  %26 = reshape(%24, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %27 = @func_4545(%25, %26) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(135), float32], Tensor[(2, 2, 1), float32]) */;
  %28 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 45), float32] */, dtype="int16") /* ty=Tensor[(3, 45), int16] */;
  %29 = shape_of(%var_9006, dtype="int32") /* ty=Tensor[(2), int32] */;
  %30 = cast(%var_9006, dtype="int16") /* ty=Tensor[(3, 45), int16] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %32 = @func_8490() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %33 = @func_8216() /* ty=(Tensor[(120, 4), uint16], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32]) */;
  %34 = %22.0;
  %35 = %27.1;
  %36 = bitwise_xor(%30, %31) /* ty=Tensor[(3, 45), int16] */;
  %37 = @func_7913() /* ty=Tensor[(2, 2, ?), bool] */;
  %38 = %32.0;
  %39 = %33.3;
  (%34, %35, %var_9005, %36, %37, %38, %39)
}

def @func_3523(%var_3507: Tensor[(1728), float32], %var_3508: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float64], Tensor[(140), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) {
  %40 = @func_2899() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %41 = %40.0;
  %42 = cast(%41, dtype="float64") /* ty=Tensor[(2, 2, 1), float64] */;
  %43 = cast(%var_3507, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %44 = cast(%var_3508, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %45 = reshape(%43, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float32] */;
  %46 = reshape(%44, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %47 = @func_2912(%45, %46) /* ty=(Tensor[(9, 16, 12), float32], Tensor[(140), float32], Tensor[(480), uint16]) */;
  %48 = cast(%var_3508, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %49 = cast(%var_3507, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %50 = reshape(%48, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %51 = reshape(%49, newshape=[24, 72]) /* ty=Tensor[(24, 72), float32] */;
  %52 = @func_3260(%50, %51) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) */;
  %53 = cos(%42) /* ty=Tensor[(2, 2, 1), float64] */;
  %54 = %47.1;
  %55 = %52.1;
  (%53, %54, %var_3507, %var_3508, %55)
}

def @func_10726(%var_10708: Tensor[(15, 12, 11), uint8], %var_10709: Tensor[(15, 12, 11), uint8]) -> (Tensor[(15, 12, 11), bool], Tensor[(15, 12, 11), float32]) {
  %56 = cast(%var_10709, dtype="bool") /* ty=Tensor[(15, 12, 11), bool] */;
  %57 = shape_of(%var_10708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%var_10708, dtype="bool") /* ty=Tensor[(15, 12, 11), bool] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %60 = cast(%var_10708, dtype="float32") /* ty=Tensor[(15, 12, 11), float32] */;
  %61 = not_equal(%58, %59) /* ty=Tensor[(15, 12, 11), bool] */;
  %62 = exp(%60) /* ty=Tensor[(15, 12, 11), float32] */;
  (%61, %62)
}

def @func_10792() -> (Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(2, 2, 1), float32], float32) {
  %63 = @func_8216() /* ty=(Tensor[(120, 4), uint16], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32]) */;
  %64 = cast(meta[relay.Constant][1] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %65 = reshape(%64, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %66 = @func_5211(%65) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(9, 16, 12), float32], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(2, 2, 1), float32]) */;
  %67 = @func_7447() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %68 = @func_5324() /* ty=(float32,) */;
  %69 = %63.1;
  %70 = %66.2;
  %71 = %67.0;
  %72 = %68.0;
  (%69, %70, meta[relay.Constant][1] /* ty=Tensor[(480), uint16] */, %71, %72)
}

def @func_3906() -> (Tensor[(5, 9, 5), bool],) {
  %73 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %74 = %73.0;
  (%74,)
}

def @func_13164() -> Tensor[(2, 2, 1), float32] {
  %75 = @func_11789() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %75.1
}

def @func_14238(%var_14222: bool) -> (Tensor[(1, 9, 13), bool], Tensor[(2, 2, ?), int8], Tensor[(2, 2, 2), bool], Tensor[(8), float32]) {
  %76 = cast(%var_14222, dtype="bool") /* ty=bool */;
  %77 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 9, 13), bool] */, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %78 = @func_14201() /* ty=(Tensor[(2, 2, ?), int8],) */;
  %79 = cast(meta[relay.Constant][3] /* ty=Tensor[(8), float32] */, dtype="float32") /* ty=Tensor[(8), float32] */;
  %80 = reshape(%79, newshape=[2, 2, 2]) /* ty=Tensor[(2, 2, 2), float32] */;
  %81 = @func_7267(%80) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(?, 9, 15), float64], Tensor[(2, 2, 2), bool], Tensor[(5, 9, 5), bool]) */;
  %82 = logical_or(%76, %77) /* ty=Tensor[(1, 9, 13), bool] */;
  %83 = %78.0;
  %84 = %81.2;
  (%82, %83, %84, meta[relay.Constant][3] /* ty=Tensor[(8), float32] */)
}

def @func_5858(%var_5776: Tensor[(2, 2, 3), float32], %var_5791: Tensor[(480), uint16], %var_5792: Tensor[(1728), float32]) -> (Tensor[(2, 2, 3), uint32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 12), int8], Tensor[(48), float32]) {
  %85 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %86 = %85.0;
  %87 = cast(%86, dtype="uint32") /* ty=Tensor[(2, 2, 1), uint32] */;
  %88 = cast(%var_5776, dtype="uint32") /* ty=Tensor[(2, 2, 3), uint32] */;
  %89 = cast(%var_5791, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %90 = cast(%var_5792, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %91 = reshape(%89, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %92 = reshape(%90, newshape=[24, 72]) /* ty=Tensor[(24, 72), float32] */;
  %93 = @func_3260(%91, %92) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) */;
  %94 = @func_4518() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, ?), float64]) */;
  %95 = @func_3906() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %96 = cast(%86, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
  %97 = cast(meta[relay.Constant][4] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %98 = reshape(%97, newshape=[2, 2, 12]) /* ty=Tensor[(2, 2, 12), float32] */;
  %99 = right_shift(%87, %88) /* ty=Tensor[(2, 2, 3), uint32] */;
  %100 = %93.3;
  %101 = %94.0;
  %102 = %95.0;
  %103 = atanh(%96) /* ty=Tensor[(2, 2, 1), float32] */;
  %104 = @func_4936(%98) /* ty=Tensor[(2, 2, 12), int8] */;
  (%99, %100, %var_5791, %var_5792, %101, %102, %103, %104, meta[relay.Constant][4] /* ty=Tensor[(48), float32] */)
}

def @func_7913() -> Tensor[(2, 2, ?), bool] {
  %105 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %106 = %105.0;
  %107 = @func_4603() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %108 = %107.0;
  %109 = cast(%108, dtype="bool") /* ty=Tensor[(2, 2, 1), bool] */;
  %110 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%106, dtype="bool") /* ty=Tensor[(2, 2, 1), bool] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%111, %112) /* ty=Tensor[(2, 2, ?), bool] */
}

def @func_5572() -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  %113 = @func_3906() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %114 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %115 = @func_4093() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %116 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %117 = %113.0;
  %118 = %114.0;
  %119 = %115.0;
  %120 = %116.0;
  (%117, %118, %119, %120)
}

def @func_9492() -> (Tensor[(5, 9, 5), bool], float32) {
  %121 = @func_3906() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %122 = @func_7153() /* ty=(float32,) */;
  %123 = %121.0;
  %124 = %122.0;
  (%123, %124)
}

def @func_4792() -> float32 {
  %125 = @func_4161() /* ty=(float32,) */;
  %125.0
}

def @func_12983() -> (Tensor[(2, 2, 1), float32],) {
  %126 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %127 = %126.0;
  (%127,)
}

def @func_5457() -> (float32, Tensor[(2, 2, 1), float32]) {
  %128 = @func_4161() /* ty=(float32,) */;
  %129 = @func_4843() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %130 = %128.0;
  %131 = %129.0;
  (%130, %131)
}

def @func_8490() -> (Tensor[(5, 9, 5), bool],) {
  %132 = @func_6101() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %133 = %132.0;
  (%133,)
}

def @func_8638(%var_8625: Tensor[(10, 3, 8), float64]) -> Tensor[(10, 3, 8), float64] {
  %134 = cast(%var_8625, dtype="float64") /* ty=Tensor[(10, 3, 8), float64] */;
  tan(%134) /* ty=Tensor[(10, 3, 8), float64] */
}

def @func_5515() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %135 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %136 = @func_4213() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %137 = %135.0;
  %138 = %136.0;
  (%137, %138)
}

def @func_3608() -> Tensor[(5, 9, 5), bool] {
  %139 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %139.0
}

def @func_2912(%var_2905: Tensor[(9, 16, 12), float32], %var_2910: Tensor[(480), uint16]) -> (Tensor[(9, 16, 12), float32], Tensor[(140), float32], Tensor[(480), uint16]) {
  %140 = cast(%var_2905, dtype="float32") /* ty=Tensor[(9, 16, 12), float32] */;
  %141 = cast(%var_2910, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %142 = reshape(%141, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), uint16] */;
  %143 = @func_493(%142) /* ty=(Tensor[(4, 10, 12), uint16], Tensor[(14, 10, ?), float64], Tensor[(140), float32]) */;
  %144 = acosh(%140) /* ty=Tensor[(9, 16, 12), float32] */;
  %145 = %143.2;
  (%144, %145, %var_2910)
}

def @func_4843() -> (Tensor[(2, 2, 1), float32],) {
  %146 = @func_3625() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %147 = %146.0;
  (%147,)
}

def @func_11750() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  %148 = @func_11047() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */;
  %149 = @func_11116() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %150 = %148.1;
  %151 = %149.1;
  (%150, %151)
}

def @func_15412(%var_15378: Tensor[(2, 2, 4), float32]) -> Tensor[(2, 2, 4), int32] {
  %152 = @func_6736() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) */;
  %153 = %152.0;
  %154 = cast(%153, dtype="int32") /* ty=Tensor[(2, 2, 1), int32] */;
  %155 = cast(%var_15378, dtype="int32") /* ty=Tensor[(2, 2, 4), int32] */;
  bitwise_and(%154, %155) /* ty=Tensor[(2, 2, 4), int32] */
}

def @func_13833() -> Tensor[(2, 2, 1), float32] {
  @func_12892() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_13580() -> (Tensor[(2, 2, 10), float64],) {
  %156 = @func_8130() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) */;
  %157 = %156.1;
  %158 = cast(%157, dtype="float64") /* ty=Tensor[(2, 2, 10), float64] */;
  %159 = log(%158) /* ty=Tensor[(2, 2, 10), float64] */;
  (%159,)
}

def @func_3260(%var_3229: Tensor[(480), uint16], %var_3250: Tensor[(24, 72), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) {
  %160 = @func_2921() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %161 = @func_2899() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %162 = cast(%var_3229, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %163 = reshape(%162, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), uint16] */;
  %164 = @func_493(%163) /* ty=(Tensor[(4, 10, 12), uint16], Tensor[(14, 10, ?), float64], Tensor[(140), float32]) */;
  %165 = cast(%var_3250, dtype="float32") /* ty=Tensor[(24, 72), float32] */;
  %166 = cast(%var_3229, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %167 = reshape(%165, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float32] */;
  %168 = reshape(%166, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %169 = @func_2912(%167, %168) /* ty=(Tensor[(9, 16, 12), float32], Tensor[(140), float32], Tensor[(480), uint16]) */;
  %170 = %160.0;
  %171 = %161.1;
  %172 = %164.2;
  %173 = %169.0;
  (%170, %171, %172, %var_3229, %173, %var_3250)
}

def @func_15589() -> (float32,) {
  %174 = @func_13387() /* ty=(float32,) */;
  %175 = %174.0;
  (%175,)
}

def @func_6484() -> (Tensor[(2, 2, 1), float32],) {
  %176 = @func_4843() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %177 = %176.0;
  (%177,)
}

def @func_15263() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %178 = @func_4817() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %179 = @func_4843() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %180 = %178.0;
  %181 = %179.0;
  (%180, %181)
}

def @func_15038() -> (Tensor[(2, 2, 10), float64],) {
  %182 = @func_14268() /* ty=(Tensor[(2, 2, 10), float64],) */;
  %183 = %182.0;
  (%183,)
}

def @func_13007() -> Tensor[(5, 9, 5), bool] {
  %184 = @func_11789() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %184.0
}

def @func_14404() -> (Tensor[(2, 2, 1), float32],) {
  %185 = @func_11116() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %186 = %185.1;
  (%186,)
}

def @func_6652() -> Tensor[(2, 2, 1), float32] {
  %187 = @func_6484() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %187.0
}

def @func_13653() -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  %188 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
  %189 = @func_6134() /* ty=Tensor[(5, 9, 5), bool] */;
  %190 = @func_10855() /* ty=Tensor[(5, 9, 5), bool] */;
  (%188, %189, %190)
}

def @func_13730(%var_13719: Tensor[(12, 4), float32]) -> (Tensor[(2, 2, ?), int32], Tensor[(2, 2, 1), float32], Tensor[(12, 4), float32]) {
  %191 = cast(%var_13719, dtype="float32") /* ty=Tensor[(12, 4), float32] */;
  %192 = reshape(%191, newshape=[2, 2, 12]) /* ty=Tensor[(2, 2, 12), float32] */;
  %193 = @func_12197(%192) /* ty=(Tensor[(2, 2, 12), int64], Tensor[(2, 2, 1), float32]) */;
  %194 = @func_12105() /* ty=Tensor[(2, 2, ?), int32] */;
  %195 = %193.1;
  (%194, %195, %var_13719)
}

def @func_14553(%var_14544: int8, %var_14545: Tensor[(1, 2, 7), int8]) -> (Tensor[(1, 2, 7), int8], Tensor[(1, 2, 7), uint8]) {
  %196 = cast(%var_14544, dtype="int8") /* ty=int8 */;
  %197 = cast(%var_14545, dtype="int8") /* ty=Tensor[(1, 2, 7), int8] */;
  %198 = cast(%var_14545, dtype="uint8") /* ty=Tensor[(1, 2, 7), uint8] */;
  %199 = cast(%var_14544, dtype="uint8") /* ty=uint8 */;
  %200 = left_shift(%196, %197) /* ty=Tensor[(1, 2, 7), int8] */;
  %201 = bitwise_xor(%198, %199) /* ty=Tensor[(1, 2, 7), uint8] */;
  (%200, %201)
}

def @func_3045() -> Tensor[(2, 2, 1), float32] {
  %202 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %202.0
}

def @func_14591() -> Tensor[(2, 2, 1), float32] {
  %203 = @func_7493() /* ty=(Tensor[(40, 12), uint16], Tensor[(2, 2, 1), float32]) */;
  %203.1
}

def @func_5095(%var_5032: Tensor[(480), uint16], %var_5041: float32, %var_5075: Tensor[(140), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(864, 2), float32], Tensor[(480), uint16], float32, Tensor[(1728), float32], Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(140), float32], Tensor[(?, 9, 15), int32]) {
  %204 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %205 = cast(meta[relay.Constant][5] /* ty=Tensor[(864, 2), float32] */, dtype="float32") /* ty=Tensor[(864, 2), float32] */;
  %206 = cast(%var_5032, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %207 = reshape(%205, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float32] */;
  %208 = reshape(%206, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %209 = @func_2912(%207, %208) /* ty=(Tensor[(9, 16, 12), float32], Tensor[(140), float32], Tensor[(480), uint16]) */;
  %210 = cast(%var_5032, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %211 = reshape(%210, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %212 = @func_3961(%211) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) */;
  %213 = @func_4843() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %214 = cast(%var_5075, dtype="float32") /* ty=Tensor[(140), float32] */;
  %215 = reshape(%214, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
  %216 = cast(%var_5041, dtype="float32") /* ty=float32 */;
  %217 = cast(meta[relay.Constant][6] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %218 = reshape(%216, newshape=[]) /* ty=float32 */;
  %219 = reshape(%217, newshape=[1, 9, 15]) /* ty=Tensor[(1, 9, 15), float32] */;
  %220 = @func_1819(%218, %219) /* ty=(Tensor[(1, 9, 15), bool], Tensor[(1, 9, 15), bool]) */;
  %221 = %220.1;
  %222 = cast(meta[relay.Constant][6] /* ty=Tensor[(135), float32] */, dtype="int32") /* ty=Tensor[(135), int32] */;
  %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%221, dtype="int32") /* ty=Tensor[(1, 9, 15), int32] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %226 = %204.0;
  %227 = %209.2;
  %228 = %212.3;
  %229 = %213.0;
  %230 = @func_126(%215) /* ty=Tensor[(14, 10, ?), float64] */;
  %231 = add(%224, %225) /* ty=Tensor[(?, 9, 15), int32] */;
  (%226, %227, meta[relay.Constant][5] /* ty=Tensor[(864, 2), float32] */, %var_5032, %var_5041, %228, %229, %230, %var_5075, %231)
}

def @func_6571(%var_6567: Tensor[(12), float32], %var_6568: Tensor[(480), uint16]) -> (Tensor[(2, 2, ?), bool], Tensor[(48), float32], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(1728), float32]) {
  %232 = @func_5620() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(40, 12), uint16]) */;
  %233 = %232.0;
  %234 = @func_4518() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, ?), float64]) */;
  %235 = %234.1;
  %236 = cast(%235, dtype="bool") /* ty=Tensor[(2, 2, ?), bool] */;
  %237 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%233, dtype="bool") /* ty=Tensor[(2, 2, 1), bool] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %240 = cast(%var_6567, dtype="float32") /* ty=Tensor[(12), float32] */;
  %241 = cast(%var_6568, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %242 = cast(meta[relay.Constant][7] /* ty=Tensor[(1728), float32] */, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %243 = reshape(%240, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float32] */;
  %244 = reshape(%241, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %245 = reshape(%242, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %246 = @func_5858(%243, %244, %245) /* ty=(Tensor[(2, 2, 3), uint32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 12), int8], Tensor[(48), float32]) */;
  %247 = equal(%238, %239) /* ty=Tensor[(2, 2, ?), bool] */;
  %248 = %246.8;
  (%247, %248, %var_6567, %var_6568, meta[relay.Constant][7] /* ty=Tensor[(1728), float32] */)
}

def @func_7562() -> (Tensor[(?, 9, 15), float64],) {
  %249 = @func_5489() /* ty=Tensor[(?, 9, 15), float64] */;
  (%249,)
}

def @func_11789() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  %250 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %251 = @func_7447() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %252 = %250.0;
  %253 = %251.0;
  (%252, %253)
}

def @func_15803(%var_15791: Tensor[(16), float32]) -> (Tensor[(8, 16, 9), float64], Tensor[(2, 2, 1), float32], Tensor[(16), float32], Tensor[(2, 2, 1), float32]) {
  %254 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 16, 9), float64] */, dtype="float64") /* ty=Tensor[(8, 16, 9), float64] */;
  %255 = asin(%254) /* ty=Tensor[(8, 16, 9), float64] */;
  %256 = cast(%255, dtype="float64") /* ty=Tensor[(8, 16, 9), float64] */;
  %257 = cast(%var_15791, dtype="float32") /* ty=Tensor[(16), float32] */;
  %258 = reshape(%257, newshape=[16]) /* ty=Tensor[(16), float32] */;
  %259 = @func_11944(%258) /* ty=(Tensor[(?, 9, 15), float64], Tensor[(5, 9, 5), bool], Tensor[(10, 3, 8), float64], Tensor[(4, 60), float64], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 4), uint8], Tensor[(16), float32]) */;
  %260 = sinh(%256) /* ty=Tensor[(8, 16, 9), float64] */;
  %261 = %259.4;
  %262 = @func_10859() /* ty=Tensor[(2, 2, 1), float32] */;
  (%260, %261, %var_15791, %262)
}

def @func_13483(%var_13441: Tensor[(2, 2, 1), bool], %var_13460: float32, %var_13461: Tensor[(135), float32]) -> (Tensor[(2, 2, ?), bool], Tensor[(2, 2, ?), float64], Tensor[(2, 2, ?), int32], Tensor[(5, 9, 5), bool], float32, Tensor[(135), float32]) {
  %263 = @func_13425() /* ty=Tensor[(2, 2, ?), bool] */;
  %264 = cast(%var_13441, dtype="bool") /* ty=Tensor[(2, 2, 1), bool] */;
  %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%263, dtype="bool") /* ty=Tensor[(2, 2, ?), bool] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %268 = cast(%263, dtype="float64") /* ty=Tensor[(2, 2, ?), float64] */;
  %269 = cast(%var_13460, dtype="float32") /* ty=float32 */;
  %270 = cast(%var_13461, dtype="float32") /* ty=Tensor[(135), float32] */;
  %271 = reshape(%269, newshape=[]) /* ty=float32 */;
  %272 = reshape(%270, newshape=[3, 45]) /* ty=Tensor[(3, 45), float32] */;
  %273 = @func_9076(%271, %272) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(3, 45), int16], Tensor[(2, 2, ?), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */;
  %274 = logical_and(%266, %267) /* ty=Tensor[(2, 2, ?), bool] */;
  %275 = log(%268) /* ty=Tensor[(2, 2, ?), float64] */;
  %276 = @func_12105() /* ty=Tensor[(2, 2, ?), int32] */;
  %277 = %273.0;
  (%274, %275, %276, %277, %var_13460, %var_13461)
}

def @func_15122(%var_15115: Tensor[(1728), float32], %var_15116: Tensor[(4, 120), uint16]) -> (Tensor[(2, 2, 10), float64], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(4, 120), uint16]) {
  %278 = @func_13580() /* ty=(Tensor[(2, 2, 10), float64],) */;
  %279 = @func_14660() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %280 = cast(%var_15115, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %281 = cast(%var_15116, dtype="uint16") /* ty=Tensor[(4, 120), uint16] */;
  %282 = reshape(%280, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %283 = reshape(%281, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %284 = @func_3523(%282, %283) /* ty=(Tensor[(2, 2, 1), float64], Tensor[(140), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) */;
  %285 = %278.0;
  %286 = %279.2;
  %287 = %284.3;
  (%285, %286, %287, %var_15115, %var_15116)
}

def @func_14920(%var_14916: Tensor[(65), uint8]) -> (Tensor[(2, 2, 1), float32], Tensor[(4, 13, 5), bool], Tensor[(65), uint8]) {
  %288 = cast(%var_14916, dtype="uint8") /* ty=Tensor[(65), uint8] */;
  %289 = reshape(%288, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), uint8] */;
  %290 = @func_14069(%289) /* ty=(Tensor[(4, 13, 5), bool],) */;
  %291 = @func_14591() /* ty=Tensor[(2, 2, 1), float32] */;
  %292 = %290.0;
  (%291, %292, %var_14916)
}

def @func_14201() -> (Tensor[(2, 2, ?), int8],) {
  %293 = @func_11344() /* ty=(float32, Tensor[(2, 2, ?), float64]) */;
  %294 = %293.1;
  %295 = @func_4093() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %296 = %295.3;
  %297 = cast(%296, dtype="int8") /* ty=Tensor[(2, 2, 1), int8] */;
  %298 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%294, dtype="int8") /* ty=Tensor[(2, 2, ?), int8] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %301 = bitwise_or(%299, %300) /* ty=Tensor[(2, 2, ?), int8] */;
  (%301,)
}

def @func_12414(%var_12399: Tensor[(2, 2, 16), float32]) -> (Tensor[(2, 2, 16), uint64],) {
  %302 = @func_4093() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %303 = %302.2;
  %304 = cast(%303, dtype="uint64") /* ty=Tensor[(2, 2, 1), uint64] */;
  %305 = cast(%var_12399, dtype="uint64") /* ty=Tensor[(2, 2, 16), uint64] */;
  %306 = minimum(%304, %305) /* ty=Tensor[(2, 2, 16), uint64] */;
  (%306,)
}

def @func_11344() -> (float32, Tensor[(2, 2, ?), float64]) {
  %307 = @func_11246() /* ty=(Tensor[(2, 2, ?), int32],) */;
  %308 = %307.0;
  %309 = cast(%308, dtype="float64") /* ty=Tensor[(2, 2, ?), float64] */;
  %310 = @func_8510() /* ty=float32 */;
  %311 = asin(%309) /* ty=Tensor[(2, 2, ?), float64] */;
  (%310, %311)
}

def @func_9178() -> (Tensor[(5, 9, 5), bool],) {
  %312 = @func_5145() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %313 = %312.0;
  (%313,)
}

def @func_16405() -> (Tensor[(5, 9, 5), bool],) {
  %314 = @func_9844() /* ty=(Tensor[(2, 2, 10), int32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */;
  %315 = %314.3;
  (%315,)
}

def @func_16172(%var_16150: uint16, %var_16151: Tensor[(10, 6, 1), uint16], %var_16157: Tensor[(4, 16), float32]) -> (Tensor[(10, 6, 1), uint16], Tensor[(2, 2, 16), uint64], Tensor[(4, 16), float32]) {
  %316 = cast(%var_16150, dtype="uint16") /* ty=uint16 */;
  %317 = cast(%var_16151, dtype="uint16") /* ty=Tensor[(10, 6, 1), uint16] */;
  %318 = cast(%var_16157, dtype="float32") /* ty=Tensor[(4, 16), float32] */;
  %319 = reshape(%318, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), float32] */;
  %320 = @func_12414(%319) /* ty=(Tensor[(2, 2, 16), uint64],) */;
  %321 = bitwise_and(%316, %317) /* ty=Tensor[(10, 6, 1), uint16] */;
  %322 = %320.0;
  (%321, %322, %var_16157)
}

def @func_7985() -> (Tensor[(2, 2, 1), float32],) {
  %323 = @func_4843() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %324 = %323.0;
  (%324,)
}

def @func_2846() -> (Tensor[(2, 2, 1), float32],) {
  %325 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
  %326 = log2(%325) /* ty=Tensor[(2, 2, 1), float32] */;
  (%326,)
}

def @func_4093() -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %327 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %328 = @func_2921() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %329 = %328.0;
  %330 = cast(%329, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
  %331 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %332 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
  %333 = %327.0;
  %334 = acosh(%330) /* ty=Tensor[(2, 2, 1), float32] */;
  %335 = %331.0;
  (%332, %333, %334, %335)
}

def @func_6414(%var_6406: Tensor[(15, 8, 11), bool], %var_6407: Tensor[(15, 8, 11), bool]) -> Tensor[(15, 8, 11), bool] {
  %336 = cast(%var_6407, dtype="bool") /* ty=Tensor[(15, 8, 11), bool] */;
  %337 = shape_of(%var_6406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%var_6406, dtype="bool") /* ty=Tensor[(15, 8, 11), bool] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%338, %339) /* ty=Tensor[(15, 8, 11), bool] */
}

def @func_10092() -> Tensor[(2, 2, 1), float32] {
  %340 = @func_4843() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %340.0
}

def @func_4875(%var_4853: Tensor[(14, 6, 4), int32], %var_4854: Tensor[(14, 6, 4), int32]) -> Tensor[(14, 6, 4), int32] {
  %341 = cast(%var_4854, dtype="int32") /* ty=Tensor[(14, 6, 4), int32] */;
  %342 = shape_of(%var_4853, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%var_4853, dtype="int32") /* ty=Tensor[(14, 6, 4), int32] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  left_shift(%343, %344) /* ty=Tensor[(14, 6, 4), int32] */
}

def @func_12028(%var_12025: Tensor[(4, 432), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(4, 432), float32]) {
  %345 = @func_6736() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) */;
  %346 = cast(meta[relay.Constant][10] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %347 = cast(%var_12025, dtype="float32") /* ty=Tensor[(4, 432), float32] */;
  %348 = reshape(%346, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %349 = reshape(%347, newshape=[24, 72]) /* ty=Tensor[(24, 72), float32] */;
  %350 = @func_3260(%348, %349) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) */;
  %351 = %345.0;
  %352 = %350.1;
  (%351, %352, meta[relay.Constant][10] /* ty=Tensor[(480), uint16] */, %var_12025)
}

def @func_7447() -> (Tensor[(2, 2, 1), float32],) {
  %353 = @func_6484() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %354 = %353.0;
  (%354,)
}

def @func_3673() -> (Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) {
  %355 = cast(-2.35917f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %356 = cast(meta[relay.Constant][11] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %357 = reshape(%355, newshape=[]) /* ty=float32 */;
  %358 = reshape(%356, newshape=[1, 9, 15]) /* ty=Tensor[(1, 9, 15), float32] */;
  %359 = @func_1819(%357, %358) /* ty=(Tensor[(1, 9, 15), bool], Tensor[(1, 9, 15), bool]) */;
  %360 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
  %361 = %359.1;
  (%360, %361, -2.35917f /* ty=float32 */, meta[relay.Constant][11] /* ty=Tensor[(135), float32] */)
}

def @func_15469(%var_15455: Tensor[(3, 8, 4), int8], %var_15456: Tensor[(3, 8, 4), int8]) -> (Tensor[(3, 8, 4), int8], Tensor[(15, 12, 11), float32], Tensor[(1980), uint8], Tensor[(3, 8, 4), float64]) {
  %362 = cast(%var_15456, dtype="int8") /* ty=Tensor[(3, 8, 4), int8] */;
  %363 = shape_of(%var_15455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%var_15455, dtype="int8") /* ty=Tensor[(3, 8, 4), int8] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %366 = cast(meta[relay.Constant][12] /* ty=Tensor[(1980), uint8] */, dtype="uint8") /* ty=Tensor[(1980), uint8] */;
  %367 = cast(meta[relay.Constant][12] /* ty=Tensor[(1980), uint8] */, dtype="uint8") /* ty=Tensor[(1980), uint8] */;
  %368 = reshape(%366, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), uint8] */;
  %369 = reshape(%367, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), uint8] */;
  %370 = @func_10726(%368, %369) /* ty=(Tensor[(15, 12, 11), bool], Tensor[(15, 12, 11), float32]) */;
  %371 = cast(%var_15455, dtype="float64") /* ty=Tensor[(3, 8, 4), float64] */;
  %372 = left_shift(%364, %365) /* ty=Tensor[(3, 8, 4), int8] */;
  %373 = %370.1;
  %374 = atan(%371) /* ty=Tensor[(3, 8, 4), float64] */;
  (%372, %373, meta[relay.Constant][12] /* ty=Tensor[(1980), uint8] */, %374)
}

def @func_16392() -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) {
  %375 = @func_13683() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) */;
  %376 = @func_13833() /* ty=Tensor[(2, 2, 1), float32] */;
  %377 = %375.1;
  (%376, %377)
}

def @func_8414(%var_8386: int8, %var_8387: Tensor[(13, 14, 10), int8]) -> (Tensor[(13, 14, 10), int8], Tensor[(13, 14, 10), float64], Tensor[(13, 14, 10), float64]) {
  %378 = cast(%var_8386, dtype="int8") /* ty=int8 */;
  %379 = cast(%var_8387, dtype="int8") /* ty=Tensor[(13, 14, 10), int8] */;
  %380 = cast(%var_8386, dtype="float64") /* ty=float64 */;
  %381 = cast(%var_8387, dtype="float64") /* ty=Tensor[(13, 14, 10), float64] */;
  %382 = cast(%var_8387, dtype="float64") /* ty=Tensor[(13, 14, 10), float64] */;
  %383 = bitwise_and(%378, %379) /* ty=Tensor[(13, 14, 10), int8] */;
  %384 = divide(%380, %381) /* ty=Tensor[(13, 14, 10), float64] */;
  %385 = atanh(%382) /* ty=Tensor[(13, 14, 10), float64] */;
  (%383, %384, %385)
}

def @func_16503() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  %386 = @func_16405() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %387 = @func_12983() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %388 = %386.0;
  %389 = %387.0;
  (%388, %389)
}

def @func_11047() -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  %390 = @func_10855() /* ty=Tensor[(5, 9, 5), bool] */;
  %391 = @func_10855() /* ty=Tensor[(5, 9, 5), bool] */;
  (%390, %391)
}

def @func_16106() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  %392 = @func_7985() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %393 = @func_10632() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %394 = @func_4263() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) */;
  %395 = @func_12297() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %396 = @func_11806() /* ty=Tensor[(2, 2, 1), float32] */;
  %397 = %392.0;
  %398 = %393.2;
  %399 = %394.0;
  %400 = %395.0;
  (%396, %397, %398, %399, %400)
}

def @func_6286(%var_6261: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(96, 18), float32], Tensor[(480), uint16], float32) {
  %401 = @func_5515() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %402 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %403 = cast(meta[relay.Constant][13] /* ty=Tensor[(96, 18), float32] */, dtype="float32") /* ty=Tensor[(96, 18), float32] */;
  %404 = cast(%var_6261, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %405 = reshape(%403, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %406 = reshape(%404, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %407 = @func_3523(%405, %406) /* ty=(Tensor[(2, 2, 1), float64], Tensor[(140), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) */;
  %408 = %401.0;
  %409 = %402.0;
  %410 = %407.4;
  %411 = @func_5286() /* ty=float32 */;
  (%408, %409, %410, meta[relay.Constant][13] /* ty=Tensor[(96, 18), float32] */, %var_6261, %411)
}

def @func_3590() -> (Tensor[(2, 2, 1), float32],) {
  %412 = @func_2899() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %413 = %412.0;
  (%413,)
}

def @func_5174() -> Tensor[(2, 2, 1), float64] {
  %414 = @func_2899() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %415 = %414.1;
  %416 = cast(%415, dtype="float64") /* ty=Tensor[(2, 2, 1), float64] */;
  sin(%416) /* ty=Tensor[(2, 2, 1), float64] */
}

def @func_14156(%var_14120: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), float64], Tensor[(140), float32], Tensor[(480), uint16]) {
  %417 = cast(%var_14120, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %418 = reshape(%417, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), uint16] */;
  %419 = @func_493(%418) /* ty=(Tensor[(4, 10, 12), uint16], Tensor[(14, 10, ?), float64], Tensor[(140), float32]) */;
  %420 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
  %421 = @func_6950() /* ty=Tensor[(5, 9, 5), float64] */;
  %422 = %419.2;
  (%420, %421, %422, %var_14120)
}

def @func_16468() -> (Tensor[(2, 2, 1), float32], float32, float32, Tensor[(15, 9), float32], Tensor[(2, 2, 1), float32]) {
  %423 = @func_10211() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %424 = @func_9430() /* ty=(float32, float32) */;
  %425 = %423.0;
  %426 = cast(%425, dtype="bool") /* ty=Tensor[(2, 2, 1), bool] */;
  %427 = %424.1;
  %428 = cast(%427, dtype="float32") /* ty=float32 */;
  %429 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
  %430 = reshape(%426, newshape=[2, 2, 1]) /* ty=Tensor[(2, 2, 1), bool] */;
  %431 = reshape(%428, newshape=[]) /* ty=float32 */;
  %432 = reshape(%429, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %433 = @func_13483(%430, %431, %432) /* ty=(Tensor[(2, 2, ?), bool], Tensor[(2, 2, ?), float64], Tensor[(2, 2, ?), int32], Tensor[(5, 9, 5), bool], float32, Tensor[(135), float32]) */;
  %434 = @func_11116() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %435 = %433.4;
  %436 = %434.1;
  (%425, %427, %435, meta[relay.Constant][14] /* ty=Tensor[(15, 9), float32] */, %436)
}

def @func_16980() -> (Tensor[(2, 2, 1), float32],) {
  %437 = @func_15431() /* ty=Tensor[(2, 2, 1), float32] */;
  (%437,)
}

def @func_13909(%var_13884: float32) -> (Tensor[(?, 9, 15), float64], Tensor[(5, 9, 5), bool], Tensor[(1, 9, 15), bool], float32, Tensor[(2, 2, ?), bool], Tensor[(15, 8, 11), bool], Tensor[(1320), bool]) {
  %438 = @func_8281() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(?, 9, 15), float64], float32, Tensor[(2, 2, ?), float64]) */;
  %439 = @func_11750() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %440 = cast(%var_13884, dtype="float32") /* ty=float32 */;
  %441 = %438.1;
  %442 = cast(%441, dtype="float32") /* ty=Tensor[(?, 9, 15), float32] */;
  %443 = reshape(%440, newshape=[]) /* ty=float32 */;
  %444 = reshape(%442, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %445 = @func_3797(%443, %444) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) */;
  %446 = cast(meta[relay.Constant][15] /* ty=Tensor[(1320), bool] */, dtype="bool") /* ty=Tensor[(1320), bool] */;
  %447 = cast(meta[relay.Constant][15] /* ty=Tensor[(1320), bool] */, dtype="bool") /* ty=Tensor[(1320), bool] */;
  %448 = reshape(%446, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), bool] */;
  %449 = reshape(%447, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), bool] */;
  %450 = %439.0;
  %451 = %445.1;
  %452 = @func_7913() /* ty=Tensor[(2, 2, ?), bool] */;
  %453 = @func_6414(%448, %449) /* ty=Tensor[(15, 8, 11), bool] */;
  (%441, %450, %451, %var_13884, %452, %453, meta[relay.Constant][15] /* ty=Tensor[(1320), bool] */)
}

def @func_12953() -> (Tensor[(2, 2, ?), bool],) {
  %454 = @func_7913() /* ty=Tensor[(2, 2, ?), bool] */;
  (%454,)
}

def @func_8879() -> Tensor[(2, 2, 1), float32] {
  @func_6192() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_5489() -> Tensor[(?, 9, 15), float64] {
  %455 = @func_3673() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) */;
  %456 = %455.1;
  %457 = cast(%456, dtype="float32") /* ty=Tensor[(1, 9, 15), float32] */;
  %458 = log2(%457) /* ty=Tensor[(1, 9, 15), float32] */;
  %459 = cast(%456, dtype="float64") /* ty=Tensor[(1, 9, 15), float64] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%458, dtype="float64") /* ty=Tensor[(1, 9, 15), float64] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%461, %462) /* ty=Tensor[(?, 9, 15), float64] */
}

def @func_15533(%var_15513: Tensor[(1, 12), float32]) -> (Tensor[(1, 12), float32], Tensor[(2, 2, 1728), float32]) {
  %463 = cast(%var_15513, dtype="float32") /* ty=Tensor[(1, 12), float32] */;
  %464 = reshape(%463, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %465 = @func_9583(%464) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(2, 240), uint16], Tensor[(1728), float32]) */;
  %466 = %465.7;
  %467 = @func_11806() /* ty=Tensor[(2, 2, 1), float32] */;
  %468 = cast(%466, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %469 = cast(%467, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
  %470 = add(%468, %469) /* ty=Tensor[(2, 2, 1728), float32] */;
  (%var_15513, %470)
}

def @func_3092() -> (Tensor[(2, 2, 1), float32],) {
  %471 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %472 = %471.0;
  (%472,)
}

def @func_5145() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  %473 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %474 = @func_4817() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %475 = %473.0;
  %476 = %474.0;
  (%475, %476)
}

def @func_3347() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  %477 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %478 = @func_3092() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %479 = %477.0;
  %480 = %478.0;
  (%479, %480)
}

def @func_16018() -> (Tensor[(96, 18), float32],) {
  %481 = @func_12873() /* ty=(Tensor[(96, 18), float32],) */;
  %482 = %481.0;
  (%482,)
}

def @func_10211() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %483 = @func_3369() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %484 = @func_7447() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %485 = %483.0;
  %486 = %484.0;
  (%485, %486)
}

def @func_4161() -> (float32,) {
  %487 = @func_3673() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) */;
  %488 = %487.2;
  (%488,)
}

def @func_6389() -> (Tensor[(5, 9, 5), bool],) {
  %489 = @func_5145() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %490 = %489.0;
  (%490,)
}

def @func_8060(%var_8042: Tensor[(12), float32], %var_8044: Tensor[(1728), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(1728), float32], float32, Tensor[(2, 2, ?), bool]) {
  %491 = @func_7832() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], float32) */;
  %492 = cast(%var_8042, dtype="float32") /* ty=Tensor[(12), float32] */;
  %493 = cast(meta[relay.Constant][16] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %494 = cast(%var_8044, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %495 = reshape(%492, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float32] */;
  %496 = reshape(%493, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %497 = reshape(%494, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %498 = @func_5858(%495, %496, %497) /* ty=(Tensor[(2, 2, 3), uint32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 12), int8], Tensor[(48), float32]) */;
  %499 = @func_7090() /* ty=(float32,) */;
  %500 = %491.0;
  %501 = %498.2;
  %502 = %499.0;
  %503 = @func_7913() /* ty=Tensor[(2, 2, ?), bool] */;
  (%500, %501, %var_8042, meta[relay.Constant][16] /* ty=Tensor[(480), uint16] */, %var_8044, %502, %503)
}

def @func_7197() -> (Tensor[(2, 2, 1), float32],) {
  %504 = @func_4029() /* ty=Tensor[(2, 2, 1), float32] */;
  (%504,)
}

def @func_8701(%var_8689: Tensor[(2, 2, 4), float32]) -> Tensor[(2, 2, 4), uint8] {
  %505 = @func_6652() /* ty=Tensor[(2, 2, 1), float32] */;
  %506 = cast(%505, dtype="uint8") /* ty=Tensor[(2, 2, 1), uint8] */;
  %507 = cast(%var_8689, dtype="uint8") /* ty=Tensor[(2, 2, 4), uint8] */;
  multiply(%506, %507) /* ty=Tensor[(2, 2, 4), uint8] */
}

def @func_2899() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %508 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %509 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %510 = %508.0;
  %511 = %509.0;
  (%510, %511)
}

def @func_126(%var_65: Tensor[(14, 10, 1), float32]) -> Tensor[(14, 10, ?), float64] {
  %512 = cast(%var_65, dtype="float32") /* ty=Tensor[(14, 10, 1), float32] */;
  %513 = atan(%512) /* ty=Tensor[(14, 10, 1), float32] */;
  %514 = cast(%513, dtype="float32") /* ty=Tensor[(14, 10, 1), float32] */;
  %515 = shape_of(%var_65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%var_65, dtype="float32") /* ty=Tensor[(14, 10, 1), float32] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %518 = minimum(%516, %517) /* ty=Tensor[(14, 10, ?), float32] */;
  %519 = cast(%var_65, dtype="int8") /* ty=Tensor[(14, 10, 1), int8] */;
  %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%518, dtype="int8") /* ty=Tensor[(14, 10, ?), int8] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %523 = right_shift(%521, %522) /* ty=Tensor[(14, 10, ?), int8] */;
  %524 = cast(%523, dtype="float64") /* ty=Tensor[(14, 10, ?), float64] */;
  asinh(%524) /* ty=Tensor[(14, 10, ?), float64] */
}

def @func_12340() -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  %525 = @func_12297() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %526 = @func_5572() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %527 = %525.0;
  %528 = %526.0;
  (%527, %528)
}

def @func_15347(%var_15338: Tensor[(140), float32]) -> (float32, Tensor[(2, 2, 1), float32], Tensor[(120, 4), float32], Tensor[(864, 2), float32], Tensor[(12, 1), float32], Tensor[(140), float32], Tensor[(5, 9, 5), bool]) {
  %529 = @func_5457() /* ty=(float32, Tensor[(2, 2, 1), float32]) */;
  %530 = @func_4263() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) */;
  %531 = @func_8216() /* ty=(Tensor[(120, 4), uint16], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32]) */;
  %532 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 1), float32] */;
  %533 = %531.4;
  %534 = cast(%533, dtype="uint16") /* ty=Tensor[(120, 4), uint16] */;
  %535 = cast(%var_15338, dtype="float32") /* ty=Tensor[(140), float32] */;
  %536 = reshape(%532, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %537 = reshape(%534, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %538 = reshape(%535, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %539 = @func_10463(%536, %537, %538) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(864, 2), float32], float32, Tensor[(140), float32]) */;
  %540 = %529.0;
  %541 = %530.1;
  %542 = %539.4;
  %543 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
  (%540, %541, %533, %542, meta[relay.Constant][17] /* ty=Tensor[(12, 1), float32] */, %var_15338, %543)
}

def @func_5324() -> (float32,) {
  %544 = @func_4161() /* ty=(float32,) */;
  %545 = %544.0;
  (%545,)
}

def @func_7426() -> Tensor[(2, 2, 1), float32] {
  @func_4029() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_9583(%var_9579: Tensor[(12), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(2, 240), uint16], Tensor[(1728), float32]) {
  %546 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %547 = @func_7832() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], float32) */;
  %548 = @func_5572() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %549 = @func_5572() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %550 = cast(%var_9579, dtype="float32") /* ty=Tensor[(12), float32] */;
  %551 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 240), uint16] */, dtype="uint16") /* ty=Tensor[(2, 240), uint16] */;
  %552 = cast(meta[relay.Constant][19] /* ty=Tensor[(1728), float32] */, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %553 = reshape(%550, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float32] */;
  %554 = reshape(%551, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %555 = reshape(%552, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %556 = @func_5858(%553, %554, %555) /* ty=(Tensor[(2, 2, 3), uint32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 12), int8], Tensor[(48), float32]) */;
  %557 = %546.1;
  %558 = %547.0;
  %559 = %548.1;
  %560 = %549.1;
  %561 = %556.2;
  (%557, %558, %559, %560, %561, %var_9579, meta[relay.Constant][18] /* ty=Tensor[(2, 240), uint16] */, meta[relay.Constant][19] /* ty=Tensor[(1728), float32] */)
}

def @func_13979() -> float32 {
  %562 = @func_9430() /* ty=(float32, float32) */;
  %562.1
}

def @func_9314() -> Tensor[(2, 2, 1), float32] {
  @func_6867() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_8216() -> (Tensor[(120, 4), uint16], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32]) {
  %563 = @func_5369() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(4, 10, 12), uint16], Tensor[(120, 4), uint16], Tensor[(2, 2, 1), float32]) */;
  %564 = %563.2;
  %565 = cast(meta[relay.Constant][20] /* ty=Tensor[(120, 4), uint16] */, dtype="uint16") /* ty=Tensor[(120, 4), uint16] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(2), int32] */;
  %567 = cast(%564, dtype="uint16") /* ty=Tensor[(120, 4), uint16] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %569 = @func_6389() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %570 = cast(meta[relay.Constant][20] /* ty=Tensor[(120, 4), uint16] */, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
  %571 = log10(%570) /* ty=Tensor[(120, 4), float64] */;
  %572 = cast(%571, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %573 = cast(%571, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %574 = multiply(%567, %568) /* ty=Tensor[(120, 4), uint16] */;
  %575 = %569.0;
  %576 = exp(%572) /* ty=Tensor[(120, 4), float32] */;
  %577 = @func_6134() /* ty=Tensor[(5, 9, 5), bool] */;
  %578 = rsqrt(%573) /* ty=Tensor[(120, 4), float32] */;
  (%574, %575, %576, %577, %578)
}

def @func_12782(%var_12754: Tensor[(480), uint16]) -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(2, 2, ?), int32]) {
  %579 = @func_11034() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 4), uint8], Tensor[(16), float32], Tensor[(5, 9, 5), bool], float32, Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %580 = cast(%var_12754, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %581 = reshape(%580, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %582 = @func_5211(%581) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(9, 16, 12), float32], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(2, 2, 1), float32]) */;
  %583 = %579.5;
  %584 = %582.4;
  %585 = @func_12105() /* ty=Tensor[(2, 2, ?), int32] */;
  (%583, %584, %var_12754, %585)
}

def @func_2921() -> (Tensor[(2, 2, 1), float32],) {
  %586 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %587 = %586.0;
  (%587,)
}

def @func_8510() -> float32 {
  %588 = @func_7153() /* ty=(float32,) */;
  %588.0
}

def @func_6631() -> Tensor[(5, 9, 5), bool] {
  %589 = @func_4093() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %589.1
}

def @func_7153() -> (float32,) {
  %590 = @func_5457() /* ty=(float32, Tensor[(2, 2, 1), float32]) */;
  %591 = %590.0;
  (%591,)
}

def @func_8815() -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  %592 = @func_5145() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %593 = @func_4263() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) */;
  %594 = %592.0;
  %595 = %593.0;
  (%594, %595)
}

def @func_7670(%var_7660: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), float64], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(480), uint16]) {
  %596 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %597 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
  %598 = cast(%597, dtype="float64") /* ty=Tensor[(5, 9, 5), float64] */;
  %599 = @func_6389() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %600 = cast(%var_7660, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %601 = reshape(%600, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %602 = @func_3961(%601) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) */;
  %603 = %596.0;
  %604 = sigmoid(%598) /* ty=Tensor[(5, 9, 5), float64] */;
  %605 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
  %606 = %599.0;
  %607 = %602.2;
  (%603, %604, %605, %606, %607, %var_7660)
}

def @func_12873() -> (Tensor[(96, 18), float32],) {
  %608 = @func_7832() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], float32) */;
  %609 = %608.5;
  (%609,)
}

def @func_15993(%var_15963: Tensor[(13, 9, 2), float64]) -> (Tensor[(13, 9, 2), float64], Tensor[(2, 2, 1), float32]) {
  %610 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 9, 2), float64] */, dtype="float64") /* ty=Tensor[(13, 9, 2), float64] */;
  %611 = shape_of(%var_15963, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%var_15963, dtype="float64") /* ty=Tensor[(13, 9, 2), float64] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %614 = divide(%612, %613) /* ty=Tensor[(13, 9, 2), float64] */;
  %615 = @func_11581() /* ty=Tensor[(2, 2, 1), float32] */;
  (%614, %615)
}

def @func_6101() -> (Tensor[(5, 9, 5), bool],) {
  %616 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %617 = %616.0;
  (%617,)
}

def @func_14536(%var_14528: Tensor[(336), int32]) -> (float32, Tensor[(2, 2, 1), float32], Tensor[(14, 6, 4), int32], Tensor[(336), int32]) {
  %618 = cast(%var_14528, dtype="int32") /* ty=Tensor[(336), int32] */;
  %619 = cast(%var_14528, dtype="int32") /* ty=Tensor[(336), int32] */;
  %620 = reshape(%618, newshape=[14, 6, 4]) /* ty=Tensor[(14, 6, 4), int32] */;
  %621 = reshape(%619, newshape=[14, 6, 4]) /* ty=Tensor[(14, 6, 4), int32] */;
  %622 = @func_5286() /* ty=float32 */;
  %623 = @func_7003() /* ty=Tensor[(2, 2, 1), float32] */;
  %624 = @func_4875(%620, %621) /* ty=Tensor[(14, 6, 4), int32] */;
  (%622, %623, %624, %var_14528)
}

def @func_4936(%var_4925: Tensor[(2, 2, 12), float32]) -> Tensor[(2, 2, 12), int8] {
  %625 = @func_2921() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %626 = %625.0;
  %627 = cast(%626, dtype="int8") /* ty=Tensor[(2, 2, 1), int8] */;
  %628 = cast(%var_4925, dtype="int8") /* ty=Tensor[(2, 2, 12), int8] */;
  bitwise_and(%627, %628) /* ty=Tensor[(2, 2, 12), int8] */
}

def @func_9741(%var_9733: Tensor[(48), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 12), int8], Tensor[(48), float32]) {
  %629 = @func_4817() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %630 = cast(%var_9733, dtype="float32") /* ty=Tensor[(48), float32] */;
  %631 = reshape(%630, newshape=[2, 2, 12]) /* ty=Tensor[(2, 2, 12), float32] */;
  %632 = %629.0;
  %633 = @func_4936(%631) /* ty=Tensor[(2, 2, 12), int8] */;
  (%632, %633, %var_9733)
}

def @func_12836(%var_12821: Tensor[(120, 4), float32]) -> (Tensor[(120, 4), float64], Tensor[(120, 4), float32], Tensor[(120, 4), uint32], Tensor[(2, 2, 1), float32]) {
  %634 = @func_8216() /* ty=(Tensor[(120, 4), uint16], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32]) */;
  %635 = %634.4;
  %636 = cast(%635, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %637 = acosh(%636) /* ty=Tensor[(120, 4), float32] */;
  %638 = cast(%637, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %639 = sqrt(%638) /* ty=Tensor[(120, 4), float32] */;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
  %641 = cast(%635, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %642 = cast(%var_12821, dtype="uint32") /* ty=Tensor[(120, 4), uint32] */;
  %643 = shape_of(%639, dtype="int32") /* ty=Tensor[(2), int32] */;
  %644 = cast(%639, dtype="uint32") /* ty=Tensor[(120, 4), uint32] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %646 = erf(%640) /* ty=Tensor[(120, 4), float64] */;
  %647 = sigmoid(%641) /* ty=Tensor[(120, 4), float32] */;
  %648 = bitwise_xor(%644, %645) /* ty=Tensor[(120, 4), uint32] */;
  %649 = @func_6652() /* ty=Tensor[(2, 2, 1), float32] */;
  (%646, %647, %648, %649)
}

def @func_11654() -> (Tensor[(2, 2, 1), float32],) {
  %650 = @func_11628() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %651 = %650.0;
  (%651,)
}

def @func_8446() -> (float32,) {
  %652 = @func_8281() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(?, 9, 15), float64], float32, Tensor[(2, 2, ?), float64]) */;
  %653 = %652.2;
  (%653,)
}

def @func_8750() -> (float32,) {
  %654 = @func_8281() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(?, 9, 15), float64], float32, Tensor[(2, 2, ?), float64]) */;
  %655 = %654.2;
  (%655,)
}

def @func_16890() -> float32 {
  %656 = @func_8607() /* ty=(float32, Tensor[(2, 2, 1), float32]) */;
  %656.0
}

def @func_15012(%var_15009: Tensor[(48), float32], %var_15010: Tensor[(1728), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(1728), float32], Tensor[(48), float32], Tensor[(1728), float32]) {
  %657 = @func_5515() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %658 = cast(%var_15009, dtype="float32") /* ty=Tensor[(48), float32] */;
  %659 = cast(%var_15010, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %660 = reshape(%658, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %661 = reshape(%659, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %662 = @func_8373(%660, %661) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 12), int8], Tensor[(48), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(480, 1), uint16], Tensor[(1728), float32]) */;
  %663 = %657.1;
  %664 = %662.7;
  (%663, %664, %var_15009, %var_15010)
}

def @func_12247() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, ?), bool], Tensor[(2, 2, 1), float32]) {
  %665 = @func_7832() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], float32) */;
  %666 = %665.1;
  %667 = @func_7913() /* ty=Tensor[(2, 2, ?), bool] */;
  %668 = @func_11581() /* ty=Tensor[(2, 2, 1), float32] */;
  (%666, %667, %668)
}

def @func_12892() -> Tensor[(2, 2, 1), float32] {
  %669 = @func_11789() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %669.1
}

def @func_12506() -> (Tensor[(2, 2, 1), float32],) {
  %670 = @func_9314() /* ty=Tensor[(2, 2, 1), float32] */;
  (%670,)
}

def @func_16128(%var_16110: Tensor[(15, 12, 1), int8], %var_16111: Tensor[(15, 12, 13), int8], %var_16122: Tensor[(15, 12, 13), int8]) -> (Tensor[(15, 12, 13), int8], Tensor[(15, 12, 13), bool], float32) {
  %671 = cast(%var_16110, dtype="int8") /* ty=Tensor[(15, 12, 1), int8] */;
  %672 = cast(%var_16111, dtype="int8") /* ty=Tensor[(15, 12, 13), int8] */;
  %673 = cast(%var_16122, dtype="bool") /* ty=Tensor[(15, 12, 13), bool] */;
  %674 = shape_of(%var_16111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%var_16111, dtype="bool") /* ty=Tensor[(15, 12, 13), bool] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %677 = @func_7153() /* ty=(float32,) */;
  %678 = subtract(%671, %672) /* ty=Tensor[(15, 12, 13), int8] */;
  %679 = logical_or(%675, %676) /* ty=Tensor[(15, 12, 13), bool] */;
  %680 = %677.0;
  (%678, %679, %680)
}

def @func_9783(%var_9780: Tensor[(480), uint16]) -> (Tensor[(5, 9, 5), bool], float32, float32, Tensor[(480), uint16], Tensor[(140, 1), float32]) {
  %681 = @func_8815() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */;
  %682 = @func_8750() /* ty=(float32,) */;
  %683 = cast(%var_9780, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %684 = %682.0;
  %685 = cast(%684, dtype="float32") /* ty=float32 */;
  %686 = cast(meta[relay.Constant][22] /* ty=Tensor[(140, 1), float32] */, dtype="float32") /* ty=Tensor[(140, 1), float32] */;
  %687 = reshape(%683, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %688 = reshape(%685, newshape=[]) /* ty=float32 */;
  %689 = reshape(%686, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %690 = @func_5095(%687, %688, %689) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(864, 2), float32], Tensor[(480), uint16], float32, Tensor[(1728), float32], Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(140), float32], Tensor[(?, 9, 15), int32]) */;
  %691 = %681.1;
  %692 = %690.4;
  (%691, %684, %692, %var_9780, meta[relay.Constant][22] /* ty=Tensor[(140, 1), float32] */)
}

def @func_11707() -> (Tensor[(120, 4), float32], Tensor[(480), uint16], float32) {
  %693 = @func_8216() /* ty=(Tensor[(120, 4), uint16], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32]) */;
  %694 = %693.0;
  %695 = cast(%694, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %696 = cos(%695) /* ty=Tensor[(120, 4), float32] */;
  %697 = cast(%696, dtype="uint16") /* ty=Tensor[(120, 4), uint16] */;
  %698 = reshape(%697, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %699 = @func_6286(%698) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(96, 18), float32], Tensor[(480), uint16], float32) */;
  %700 = @func_5457() /* ty=(float32, Tensor[(2, 2, 1), float32]) */;
  %701 = %699.4;
  %702 = %700.0;
  (%696, %701, %702)
}

def @func_11154() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %703 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %704 = @func_6484() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %705 = @func_3092() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %706 = @func_11116() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %707 = %703.0;
  %708 = %704.0;
  %709 = %705.0;
  %710 = %706.1;
  (%707, %708, %709, %710)
}

def @func_11558(%var_11530: Tensor[(120, 4), float32]) -> (Tensor[(120, 4), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) {
  %711 = @func_8216() /* ty=(Tensor[(120, 4), uint16], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32]) */;
  %712 = %711.2;
  %713 = cast(%var_11530, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %714 = shape_of(%712, dtype="int32") /* ty=Tensor[(2), int32] */;
  %715 = cast(%712, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %717 = cast(%712, dtype="uint16") /* ty=Tensor[(120, 4), uint16] */;
  %718 = reshape(%717, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %719 = @func_9651(%718) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16]) */;
  %720 = @func_4603() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %721 = maximum(%715, %716) /* ty=Tensor[(120, 4), float32] */;
  %722 = %719.2;
  %723 = %720.0;
  (%721, %722, %723)
}

def @func_493(%var_482: Tensor[(4, 10, 12), uint16]) -> (Tensor[(4, 10, 12), uint16], Tensor[(14, 10, ?), float64], Tensor[(140), float32]) {
  %724 = cast(%var_482, dtype="uint16") /* ty=Tensor[(4, 10, 12), uint16] */;
  %725 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(4, 10, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 10, 12), uint16] */, dtype="uint16") /* ty=Tensor[(4, 10, 12), uint16] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %728 = cast(meta[relay.Constant][24] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %729 = reshape(%728, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
  %730 = bitwise_xor(%726, %727) /* ty=Tensor[(4, 10, 12), uint16] */;
  %731 = @func_126(%729) /* ty=Tensor[(14, 10, ?), float64] */;
  (%730, %731, meta[relay.Constant][24] /* ty=Tensor[(140), float32] */)
}

def @func_12636() -> Tensor[(2, 2, 1), int16] {
  %732 = @func_5457() /* ty=(float32, Tensor[(2, 2, 1), float32]) */;
  %733 = %732.0;
  %734 = @func_6867() /* ty=Tensor[(2, 2, 1), float32] */;
  %735 = cast(%733, dtype="int16") /* ty=int16 */;
  %736 = cast(%734, dtype="int16") /* ty=Tensor[(2, 2, 1), int16] */;
  bitwise_and(%735, %736) /* ty=Tensor[(2, 2, 1), int16] */
}

def @func_9844() -> (Tensor[(2, 2, 10), int32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  %737 = @func_7547() /* ty=(Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) */;
  %738 = @func_4518() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, ?), float64]) */;
  %739 = %737.0;
  %740 = %738.0;
  %741 = @func_6812() /* ty=Tensor[(5, 9, 5), bool] */;
  %742 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
  (%739, %740, %741, %742)
}

def @func_13299() -> Tensor[(120, 4), float32] {
  %743 = @func_11707() /* ty=(Tensor[(120, 4), float32], Tensor[(480), uint16], float32) */;
  %744 = %743.0;
  %745 = cast(%744, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  log2(%745) /* ty=Tensor[(120, 4), float32] */
}

def @func_11806() -> Tensor[(2, 2, 1), float32] {
  @func_7426() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_13226() -> float32 {
  %746 = @func_9430() /* ty=(float32, float32) */;
  %746.0
}

def @func_8553(%var_8527: Tensor[(3, 16, 7), uint32], %var_8540: Tensor[(12), float32]) -> (Tensor[(3, 16, 7), uint32], Tensor[(1728), float32], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) {
  %747 = cast(%var_8527, dtype="uint32") /* ty=Tensor[(3, 16, 7), uint32] */;
  %748 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(3, 16, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 16, 7), uint32] */, dtype="uint32") /* ty=Tensor[(3, 16, 7), uint32] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %751 = cast(%var_8540, dtype="float32") /* ty=Tensor[(12), float32] */;
  %752 = cast(meta[relay.Constant][26] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %753 = reshape(%751, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %754 = reshape(%752, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %755 = @func_6571(%753, %754) /* ty=(Tensor[(2, 2, ?), bool], Tensor[(48), float32], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(1728), float32]) */;
  %756 = @func_7197() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %757 = bitwise_and(%749, %750) /* ty=Tensor[(3, 16, 7), uint32] */;
  %758 = %755.4;
  %759 = %756.0;
  (%757, %758, %var_8540, meta[relay.Constant][26] /* ty=Tensor[(480), uint16] */, %759)
}

def @func_8130() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) {
  %760 = @func_7547() /* ty=(Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) */;
  %761 = @func_7836() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %762 = @func_4029() /* ty=Tensor[(2, 2, 1), float32] */;
  %763 = %760.0;
  %764 = %761.0;
  (%762, %763, %764)
}

def @func_13425() -> Tensor[(2, 2, ?), bool] {
  %765 = @func_12247() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, ?), bool], Tensor[(2, 2, 1), float32]) */;
  %765.1
}

def @func_9430() -> (float32, float32) {
  %766 = @func_4263() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) */;
  %767 = @func_5286() /* ty=float32 */;
  %768 = %766.2;
  (%767, %768)
}

def @func_8018() -> Tensor[(2, 2, 1), float32] {
  %769 = @func_3369() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %769.0
}

def @func_11971() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %770 = @func_5515() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %771 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %772 = %770.0;
  %773 = %771.0;
  (%772, %773)
}

def @func_14069(%var_14062: Tensor[(1, 13, 5), uint8]) -> (Tensor[(4, 13, 5), bool],) {
  %774 = cast(%var_14062, dtype="bool") /* ty=Tensor[(1, 13, 5), bool] */;
  %775 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 13, 5), uint8] */, dtype="bool") /* ty=Tensor[(4, 13, 5), bool] */;
  %776 = less_equal(%774, %775) /* ty=Tensor[(4, 13, 5), bool] */;
  (%776,)
}

def @func_15192() -> Tensor[(2, 2, 1), float32] {
  %777 = @func_12506() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %777.0
}

def @func_16782() -> (float32, Tensor[(5, 9, 5), bool]) {
  %778 = @func_7153() /* ty=(float32,) */;
  %779 = %778.0;
  %780 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
  (%779, %780)
}

def @main(%var_17017: Tensor[(96, 18), float32]) -> (Tensor[(96, 18), bool], Tensor[(2, 2, 1), float32], Tensor[(96, 18), uint8]) {
  %781 = @func_16018() /* ty=(Tensor[(96, 18), float32],) */;
  %782 = %781.0;
  %783 = cast(%var_17017, dtype="bool") /* ty=Tensor[(96, 18), bool] */;
  %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(2), int32] */;
  %785 = cast(%782, dtype="bool") /* ty=Tensor[(96, 18), bool] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %787 = greater_equal(%785, %786) /* ty=Tensor[(96, 18), bool] */;
  %788 = cast(%787, dtype="uint32") /* ty=Tensor[(96, 18), uint32] */;
  %789 = shape_of(%782, dtype="int32") /* ty=Tensor[(2), int32] */;
  %790 = cast(%782, dtype="uint32") /* ty=Tensor[(96, 18), uint32] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %792 = add(%790, %791) /* ty=Tensor[(96, 18), uint32] */;
  %793 = cast(%792, dtype="float32") /* ty=Tensor[(96, 18), float32] */;
  %794 = asin(%793) /* ty=Tensor[(96, 18), float32] */;
  %795 = cast(%787, dtype="bool") /* ty=Tensor[(96, 18), bool] */;
  %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(2), int32] */;
  %797 = cast(%794, dtype="bool") /* ty=Tensor[(96, 18), bool] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %799 = @func_4603() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %800 = cast(%782, dtype="uint8") /* ty=Tensor[(96, 18), uint8] */;
  %801 = shape_of(%794, dtype="int32") /* ty=Tensor[(2), int32] */;
  %802 = cast(%794, dtype="uint8") /* ty=Tensor[(96, 18), uint8] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %804 = logical_and(%797, %798) /* ty=Tensor[(96, 18), bool] */;
  %805 = %799.0;
  %806 = bitwise_or(%802, %803) /* ty=Tensor[(96, 18), uint8] */;
  (%804, %805, %806)
}

def @func_7090() -> (float32,) {
  %807 = @func_4161() /* ty=(float32,) */;
  %808 = %807.0;
  (%808,)
}

def @func_14973() -> (Tensor[(2, 2, 1), float32],) {
  %809 = @func_11116() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %810 = %809.1;
  (%810,)
}

def @func_7003() -> Tensor[(2, 2, 1), float32] {
  %811 = @func_3673() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) */;
  %811.0
}

def @func_16743() -> float32 {
  %812 = @func_8607() /* ty=(float32, Tensor[(2, 2, 1), float32]) */;
  %812.0
}

def @func_8957(%var_8938: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(96, 18), float32], Tensor[(480), uint16]) {
  %813 = @func_6484() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %814 = @func_8490() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %815 = @func_4263() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) */;
  %816 = cast(%var_8938, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %817 = reshape(%816, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %818 = @func_4382(%817) /* ty=(Tensor[(135), float32], Tensor[(5, 9, 5), float64], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], Tensor[(480), uint16]) */;
  %819 = %813.0;
  %820 = %814.0;
  %821 = %815.1;
  %822 = %818.4;
  (%819, %820, %821, %822, %var_8938)
}

def @func_12297() -> (Tensor[(5, 9, 5), bool],) {
  %823 = @func_8490() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %824 = %823.0;
  (%824,)
}

def @func_6867() -> Tensor[(2, 2, 1), float32] {
  %825 = @func_3369() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %825.0
}

def @func_11581() -> Tensor[(2, 2, 1), float32] {
  %826 = @func_10632() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %826.1
}

def @func_6323(%var_6311: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(14, 6, 4), int32], Tensor[(336), int32]) {
  %827 = cast(%var_6311, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %828 = reshape(%827, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %829 = @func_6286(%828) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(96, 18), float32], Tensor[(480), uint16], float32) */;
  %830 = cast(meta[relay.Constant][28] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %831 = cast(meta[relay.Constant][28] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %832 = reshape(%830, newshape=[14, 6, 4]) /* ty=Tensor[(14, 6, 4), int32] */;
  %833 = reshape(%831, newshape=[14, 6, 4]) /* ty=Tensor[(14, 6, 4), int32] */;
  %834 = @func_6192() /* ty=Tensor[(2, 2, 1), float32] */;
  %835 = %829.4;
  %836 = @func_4875(%832, %833) /* ty=Tensor[(14, 6, 4), int32] */;
  (%834, %835, %var_6311, %836, meta[relay.Constant][28] /* ty=Tensor[(336), int32] */)
}

def @func_7832() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], float32) {
  %837 = @func_6484() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %838 = @func_5369() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(4, 10, 12), uint16], Tensor[(120, 4), uint16], Tensor[(2, 2, 1), float32]) */;
  %839 = cast(meta[relay.Constant][29] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %840 = cast(meta[relay.Constant][30] /* ty=Tensor[(96, 18), float32] */, dtype="float32") /* ty=Tensor[(96, 18), float32] */;
  %841 = reshape(%839, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %842 = reshape(%840, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %843 = @func_3442(%841, %842) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) */;
  %844 = @func_4161() /* ty=(float32,) */;
  %845 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
  %846 = %837.0;
  %847 = %838.0;
  %848 = %843.3;
  %849 = %844.0;
  (%845, %846, %847, %848, meta[relay.Constant][29] /* ty=Tensor[(480), uint16] */, meta[relay.Constant][30] /* ty=Tensor[(96, 18), float32] */, %849)
}

def @func_4263() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) {
  %850 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %851 = @func_3625() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %852 = @func_4161() /* ty=(float32,) */;
  %853 = %850.0;
  %854 = %851.0;
  %855 = %852.0;
  (%853, %854, %855)
}

def @func_16221() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %856 = @func_7547() /* ty=(Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) */;
  %857 = @func_7547() /* ty=(Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) */;
  %858 = %856.1;
  %859 = %857.1;
  (%858, %859)
}

def @func_3797(%var_3793: float32, %var_3794: Tensor[(135), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) {
  %860 = @func_2899() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %861 = %860.0;
  %862 = cast(%861, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
  %863 = cast(%var_3793, dtype="float32") /* ty=float32 */;
  %864 = cast(%var_3794, dtype="float32") /* ty=Tensor[(135), float32] */;
  %865 = reshape(%863, newshape=[]) /* ty=float32 */;
  %866 = reshape(%864, newshape=[1, 9, 15]) /* ty=Tensor[(1, 9, 15), float32] */;
  %867 = @func_1819(%865, %866) /* ty=(Tensor[(1, 9, 15), bool], Tensor[(1, 9, 15), bool]) */;
  %868 = acos(%862) /* ty=Tensor[(2, 2, 1), float32] */;
  %869 = %867.0;
  (%868, %869, %var_3793, %var_3794)
}

def @func_7119() -> Tensor[(5, 9, 5), float64] {
  %870 = @func_6910() /* ty=(Tensor[(5, 9, 5), float64], Tensor[(5, 9, 5), bool]) */;
  %870.0
}

def @func_15844() -> (Tensor[(2, 2, 1), float32],) {
  %871 = @func_3137() /* ty=(Tensor[(2, 2, ?), int32], Tensor[(2, 2, 1), float32]) */;
  %872 = %871.1;
  (%872,)
}

def @func_9929(%var_9883: float32) -> (Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], float32, float32, Tensor[(15, 9), float32], Tensor[(2, 2, 480), int8]) {
  %873 = @func_6736() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) */;
  %874 = cast(meta[relay.Constant][31] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %875 = reshape(%874, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), uint16] */;
  %876 = @func_493(%875) /* ty=(Tensor[(4, 10, 12), uint16], Tensor[(14, 10, ?), float64], Tensor[(140), float32]) */;
  %877 = cast(meta[relay.Constant][31] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %878 = reshape(%877, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %879 = @func_9783(%878) /* ty=(Tensor[(5, 9, 5), bool], float32, float32, Tensor[(480), uint16], Tensor[(140, 1), float32]) */;
  %880 = cast(%var_9883, dtype="float32") /* ty=float32 */;
  %881 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
  %882 = reshape(%880, newshape=[]) /* ty=float32 */;
  %883 = reshape(%881, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %884 = @func_3797(%882, %883) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) */;
  %885 = @func_7447() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %886 = %885.0;
  %887 = cast(meta[relay.Constant][31] /* ty=Tensor[(480), uint16] */, dtype="int8") /* ty=Tensor[(480), int8] */;
  %888 = cast(%886, dtype="int8") /* ty=Tensor[(2, 2, 1), int8] */;
  %889 = %873.0;
  %890 = %876.2;
  %891 = %879.3;
  %892 = %884.2;
  %893 = right_shift(%887, %888) /* ty=Tensor[(2, 2, 480), int8] */;
  (%889, %890, %891, %892, %var_9883, meta[relay.Constant][32] /* ty=Tensor[(15, 9), float32] */, %893)
}

def @func_3625() -> (Tensor[(2, 2, 1), float32],) {
  %894 = @func_2921() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %895 = %894.0;
  (%895,)
}

def @func_10873() -> (Tensor[(5, 9, 5), bool],) {
  %896 = @func_6812() /* ty=Tensor[(5, 9, 5), bool] */;
  (%896,)
}

def @func_16080() -> (Tensor[(2, 2, ?), float64],) {
  %897 = @func_10859() /* ty=Tensor[(2, 2, 1), float32] */;
  %898 = @func_14660() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %899 = %898.2;
  %900 = cast(%899, dtype="float64") /* ty=Tensor[(2, 2, 1), float64] */;
  %901 = shape_of(%897, dtype="int32") /* ty=Tensor[(3), int32] */;
  %902 = cast(%897, dtype="float64") /* ty=Tensor[(2, 2, 1), float64] */;
  %903 = dyn.reshape(%900, %901, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %904 = floor_mod(%902, %903) /* ty=Tensor[(2, 2, ?), float64] */;
  (%904,)
}

def @func_14268() -> (Tensor[(2, 2, 10), float64],) {
  %905 = @func_13580() /* ty=(Tensor[(2, 2, 10), float64],) */;
  %906 = %905.0;
  (%906,)
}

def @func_7417() -> (Tensor[(2, 2, 1), float32],) {
  %907 = @func_6652() /* ty=Tensor[(2, 2, 1), float32] */;
  (%907,)
}

def @func_6192() -> Tensor[(2, 2, 1), float32] {
  %908 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %908.0
}

def @func_8916() -> (Tensor[(2, 2, 1), float32],) {
  %909 = @func_7426() /* ty=Tensor[(2, 2, 1), float32] */;
  (%909,)
}

def @func_6812() -> Tensor[(5, 9, 5), bool] {
  @func_6631() /* ty=Tensor[(5, 9, 5), bool] */
}

def @func_4817() -> (Tensor[(2, 2, 1), float32],) {
  %910 = @func_3625() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %911 = %910.0;
  (%911,)
}

def @func_10855() -> Tensor[(5, 9, 5), bool] {
  %912 = @func_9492() /* ty=(Tensor[(5, 9, 5), bool], float32) */;
  %912.0
}

def @func_11441(%var_11376: Tensor[(2, 2, 15), float32]) -> (Tensor[(2, 2, 15), uint64], Tensor[(2, 2, ?), float64]) {
  %913 = @func_11154() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %914 = %913.2;
  %915 = cast(%914, dtype="uint64") /* ty=Tensor[(2, 2, 1), uint64] */;
  %916 = cast(%var_11376, dtype="uint64") /* ty=Tensor[(2, 2, 15), uint64] */;
  %917 = @func_4518() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, ?), float64]) */;
  %918 = subtract(%915, %916) /* ty=Tensor[(2, 2, 15), uint64] */;
  %919 = %917.1;
  (%918, %919)
}

def @func_4382(%var_4351: Tensor[(480), uint16]) -> (Tensor[(135), float32], Tensor[(5, 9, 5), float64], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], Tensor[(480), uint16]) {
  %920 = @func_3673() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) */;
  %921 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %922 = %921.0;
  %923 = cast(%922, dtype="float64") /* ty=Tensor[(5, 9, 5), float64] */;
  %924 = cast(%var_4351, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %925 = cast(meta[relay.Constant][33] /* ty=Tensor[(96, 18), float32] */, dtype="float32") /* ty=Tensor[(96, 18), float32] */;
  %926 = reshape(%924, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %927 = reshape(%925, newshape=[24, 72]) /* ty=Tensor[(24, 72), float32] */;
  %928 = @func_3260(%926, %927) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) */;
  %929 = cast(meta[relay.Constant][33] /* ty=Tensor[(96, 18), float32] */, dtype="float32") /* ty=Tensor[(96, 18), float32] */;
  %930 = cast(meta[relay.Constant][33] /* ty=Tensor[(96, 18), float32] */, dtype="float32") /* ty=Tensor[(96, 18), float32] */;
  %931 = cast(%var_4351, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %932 = reshape(%930, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %933 = reshape(%931, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %934 = @func_3523(%932, %933) /* ty=(Tensor[(2, 2, 1), float64], Tensor[(140), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) */;
  %935 = %920.3;
  %936 = acosh(%923) /* ty=Tensor[(5, 9, 5), float64] */;
  %937 = %928.2;
  %938 = cosh(%929) /* ty=Tensor[(96, 18), float32] */;
  %939 = %934.3;
  (%935, %936, %937, %var_4351, %938, %939)
}

def @func_3069() -> (Tensor[(5, 9, 5), bool],) {
  %940 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 9, 5), uint8] */, dtype="bool") /* ty=Tensor[(5, 9, 5), bool] */;
  %941 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(5, 9, 5), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %942 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 9, 5), uint8] */, dtype="bool") /* ty=Tensor[(5, 9, 5), bool] */;
  %943 = dyn.reshape(%940, %941, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %944 = greater(%942, %943) /* ty=Tensor[(5, 9, 5), bool] */;
  (%944,)
}

def @func_8607() -> (float32, Tensor[(2, 2, 1), float32]) {
  %945 = @func_5457() /* ty=(float32, Tensor[(2, 2, 1), float32]) */;
  %946 = @func_5286() /* ty=float32 */;
  %947 = %945.1;
  (%946, %947)
}

def @func_8373(%var_8320: Tensor[(48), float32], %var_8362: Tensor[(1728), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 12), int8], Tensor[(48), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(480, 1), uint16], Tensor[(1728), float32]) {
  %948 = @func_6736() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) */;
  %949 = cast(%var_8320, dtype="float32") /* ty=Tensor[(48), float32] */;
  %950 = reshape(%949, newshape=[2, 2, 12]) /* ty=Tensor[(2, 2, 12), float32] */;
  %951 = @func_3906() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %952 = @func_6389() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %953 = cast(meta[relay.Constant][36] /* ty=Tensor[(480, 1), uint16] */, dtype="uint16") /* ty=Tensor[(480, 1), uint16] */;
  %954 = cast(%var_8362, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %955 = reshape(%953, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %956 = reshape(%954, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %957 = @func_3442(%955, %956) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) */;
  %958 = %948.1;
  %959 = @func_4936(%950) /* ty=Tensor[(2, 2, 12), int8] */;
  %960 = %951.0;
  %961 = %952.0;
  %962 = %957.0;
  (%958, %959, %var_8320, %960, %961, %962, meta[relay.Constant][36] /* ty=Tensor[(480, 1), uint16] */, %var_8362)
}

def @func_3369() -> (Tensor[(2, 2, 1), float32],) {
  %963 = @func_3137() /* ty=(Tensor[(2, 2, ?), int32], Tensor[(2, 2, 1), float32]) */;
  %964 = %963.1;
  (%964,)
}

def @func_12720(%var_12674: Tensor[(2, 2, 4), float32], %var_12684: Tensor[(336, 1), uint32]) -> (Tensor[(2, 2, 1), float32], Tensor[(336, 1), uint32], Tensor[(12), float32], Tensor[(2, 2, 4), float32], Tensor[(5, 9, 5), float64]) {
  %965 = cast(%var_12684, dtype="uint32") /* ty=Tensor[(336, 1), uint32] */;
  %966 = cast(meta[relay.Constant][37] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
  %967 = reshape(%965, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %968 = reshape(%966, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %969 = @func_8553(%967, %968) /* ty=(Tensor[(3, 16, 7), uint32], Tensor[(1728), float32], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) */;
  %970 = @func_11581() /* ty=Tensor[(2, 2, 1), float32] */;
  %971 = cast(%970, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
  %972 = cast(%var_12674, dtype="float32") /* ty=Tensor[(2, 2, 4), float32] */;
  %973 = add(%971, %972) /* ty=Tensor[(2, 2, 4), float32] */;
  %974 = cast(%973, dtype="float32") /* ty=Tensor[(2, 2, 4), float32] */;
  %975 = %969.4;
  %976 = cos(%974) /* ty=Tensor[(2, 2, 4), float32] */;
  %977 = @func_6950() /* ty=Tensor[(5, 9, 5), float64] */;
  (%975, %var_12684, meta[relay.Constant][37] /* ty=Tensor[(12), float32] */, %976, %977)
}

def @func_12105() -> Tensor[(2, 2, ?), int32] {
  %978 = @func_11246() /* ty=(Tensor[(2, 2, ?), int32],) */;
  %978.0
}

def @func_12930() -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  %979 = @func_6101() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %980 = %979.0;
  %981 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
  (%980, %981)
}

def @func_10414(%var_10389: Tensor[(8), float32]) -> (float32, Tensor[(5, 9, 5), bool], Tensor[(8), float32]) {
  %982 = @func_8750() /* ty=(float32,) */;
  %983 = cast(%var_10389, dtype="float32") /* ty=Tensor[(8), float32] */;
  %984 = reshape(%983, newshape=[2, 2, 2]) /* ty=Tensor[(2, 2, 2), float32] */;
  %985 = @func_7267(%984) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(?, 9, 15), float64], Tensor[(2, 2, 2), bool], Tensor[(5, 9, 5), bool]) */;
  %986 = %982.0;
  %987 = %985.0;
  (%986, %987, %var_10389)
}

def @func_13806(%var_13798: Tensor[(12), float32]) -> (Tensor[(2, 2, ?), uint32], Tensor[(5, 9, 5), bool], Tensor[(12), float32], Tensor[(2, 2, 1), float32]) {
  %988 = @func_11154() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %989 = %988.1;
  %990 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %991 = %990.1;
  %992 = cast(%991, dtype="uint32") /* ty=Tensor[(2, 2, 1), uint32] */;
  %993 = shape_of(%989, dtype="int32") /* ty=Tensor[(3), int32] */;
  %994 = cast(%989, dtype="uint32") /* ty=Tensor[(2, 2, 1), uint32] */;
  %995 = dyn.reshape(%992, %993, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %996 = cast(%var_13798, dtype="float32") /* ty=Tensor[(12), float32] */;
  %997 = reshape(%996, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %998 = @func_9583(%997) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(2, 240), uint16], Tensor[(1728), float32]) */;
  %999 = right_shift(%994, %995) /* ty=Tensor[(2, 2, ?), uint32] */;
  %1000 = %998.3;
  %1001 = @func_11581() /* ty=Tensor[(2, 2, 1), float32] */;
  (%999, %1000, %var_13798, %1001)
}

def @func_4603() -> (Tensor[(2, 2, 1), float32],) {
  %1002 = @func_4263() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) */;
  %1003 = %1002.1;
  (%1003,)
}

def @func_6763() -> (Tensor[(2, 2, 1), float32],) {
  %1004 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1005 = %1004.0;
  (%1005,)
}

def @func_13928(%var_13923: Tensor[(1980), uint8]) -> (Tensor[(5, 9, 5), bool], Tensor[(15, 12, 11), float32], Tensor[(1980), uint8]) {
  %1006 = @func_8815() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */;
  %1007 = cast(%var_13923, dtype="uint8") /* ty=Tensor[(1980), uint8] */;
  %1008 = cast(%var_13923, dtype="uint8") /* ty=Tensor[(1980), uint8] */;
  %1009 = reshape(%1007, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), uint8] */;
  %1010 = reshape(%1008, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), uint8] */;
  %1011 = @func_10726(%1009, %1010) /* ty=(Tensor[(15, 12, 11), bool], Tensor[(15, 12, 11), float32]) */;
  %1012 = %1006.1;
  %1013 = %1011.1;
  (%1012, %1013, %var_13923)
}

def @func_6950() -> Tensor[(5, 9, 5), float64] {
  %1014 = @func_6631() /* ty=Tensor[(5, 9, 5), bool] */;
  %1015 = cast(%1014, dtype="float64") /* ty=Tensor[(5, 9, 5), float64] */;
  sqrt(%1015) /* ty=Tensor[(5, 9, 5), float64] */
}

def @func_14778() -> (Tensor[(5, 9, 5), bool],) {
  %1016 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
  (%1016,)
}

def @func_11944(%var_11937: Tensor[(16), float32]) -> (Tensor[(?, 9, 15), float64], Tensor[(5, 9, 5), bool], Tensor[(10, 3, 8), float64], Tensor[(4, 60), float64], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 4), uint8], Tensor[(16), float32]) {
  %1017 = @func_7562() /* ty=(Tensor[(?, 9, 15), float64],) */;
  %1018 = @func_6101() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %1019 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 60), float64] */, dtype="float64") /* ty=Tensor[(4, 60), float64] */;
  %1020 = reshape(%1019, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), float64] */;
  %1021 = @func_11628() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1022 = cast(%var_11937, dtype="float32") /* ty=Tensor[(16), float32] */;
  %1023 = reshape(%1022, newshape=[2, 2, 4]) /* ty=Tensor[(2, 2, 4), float32] */;
  %1024 = %1017.0;
  %1025 = %1018.0;
  %1026 = @func_8638(%1020) /* ty=Tensor[(10, 3, 8), float64] */;
  %1027 = %1021.0;
  %1028 = @func_8701(%1023) /* ty=Tensor[(2, 2, 4), uint8] */;
  (%1024, %1025, %1026, meta[relay.Constant][38] /* ty=Tensor[(4, 60), float64] */, %1027, %1028, %var_11937)
}

def @func_14887(%var_14842: Tensor[(12), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(12), float32], Tensor[(120, 4), float32], Tensor[(2, 2, ?), int16]) {
  %1029 = cast(%var_14842, dtype="float32") /* ty=Tensor[(12), float32] */;
  %1030 = reshape(%1029, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %1031 = @func_13806(%1030) /* ty=(Tensor[(2, 2, ?), uint32], Tensor[(5, 9, 5), bool], Tensor[(12), float32], Tensor[(2, 2, 1), float32]) */;
  %1032 = @func_11707() /* ty=(Tensor[(120, 4), float32], Tensor[(480), uint16], float32) */;
  %1033 = %1032.0;
  %1034 = cast(%1033, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %1035 = @func_14591() /* ty=Tensor[(2, 2, 1), float32] */;
  %1036 = @func_4603() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1037 = %1036.0;
  %1038 = cast(%1037, dtype="int16") /* ty=Tensor[(2, 2, 1), int16] */;
  %1039 = shape_of(%1035, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1040 = cast(%1035, dtype="int16") /* ty=Tensor[(2, 2, 1), int16] */;
  %1041 = dyn.reshape(%1038, %1039, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1042 = %1031.1;
  %1043 = asinh(%1034) /* ty=Tensor[(120, 4), float32] */;
  %1044 = add(%1040, %1041) /* ty=Tensor[(2, 2, ?), int16] */;
  (%1042, %var_14842, %1043, %1044)
}

def @func_15431() -> Tensor[(2, 2, 1), float32] {
  %1045 = @func_4843() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1045.0
}

def @func_15700(%var_15688: float32, %var_15689: Tensor[(135), float32]) -> (Tensor[(5, 9, 5), float64], Tensor[(2, 2, 1), float32], float32, Tensor[(2, 2, 135), int8]) {
  %1046 = @func_11971() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %1047 = cast(%var_15688, dtype="float32") /* ty=float32 */;
  %1048 = cast(%var_15689, dtype="float32") /* ty=Tensor[(135), float32] */;
  %1049 = reshape(%1047, newshape=[]) /* ty=float32 */;
  %1050 = reshape(%1048, newshape=[3, 45]) /* ty=Tensor[(3, 45), float32] */;
  %1051 = @func_9076(%1049, %1050) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(3, 45), int16], Tensor[(2, 2, ?), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */;
  %1052 = %1051.4;
  %1053 = cast(%1052, dtype="int8") /* ty=Tensor[(2, 2, ?), int8] */;
  %1054 = cast(%var_15689, dtype="int8") /* ty=Tensor[(135), int8] */;
  %1055 = @func_7119() /* ty=Tensor[(5, 9, 5), float64] */;
  %1056 = %1046.1;
  %1057 = minimum(%1053, %1054) /* ty=Tensor[(2, 2, 135), int8] */;
  (%1055, %1056, %var_15688, %1057)
}

def @func_8281() -> (Tensor[(2, 2, 1), float32], Tensor[(?, 9, 15), float64], float32, Tensor[(2, 2, ?), float64]) {
  %1058 = @func_4603() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1059 = @func_7562() /* ty=(Tensor[(?, 9, 15), float64],) */;
  %1060 = @func_5324() /* ty=(float32,) */;
  %1061 = @func_4518() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, ?), float64]) */;
  %1062 = %1058.0;
  %1063 = %1059.0;
  %1064 = %1060.0;
  %1065 = %1061.1;
  (%1062, %1063, %1064, %1065)
}

def @func_15777() -> (Tensor[(5, 9, 5), bool],) {
  %1066 = @func_4518() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, ?), float64]) */;
  %1067 = %1066.0;
  (%1067,)
}

def @func_1819(%var_1809: float32, %var_1810: Tensor[(1, 9, 15), float32]) -> (Tensor[(1, 9, 15), bool], Tensor[(1, 9, 15), bool]) {
  %1068 = cast(%var_1809, dtype="bool") /* ty=bool */;
  %1069 = cast(%var_1810, dtype="bool") /* ty=Tensor[(1, 9, 15), bool] */;
  %1070 = cast(%var_1810, dtype="bool") /* ty=Tensor[(1, 9, 15), bool] */;
  %1071 = cast(%var_1809, dtype="bool") /* ty=bool */;
  %1072 = less(%1068, %1069) /* ty=Tensor[(1, 9, 15), bool] */;
  %1073 = greater_equal(%1070, %1071) /* ty=Tensor[(1, 9, 15), bool] */;
  (%1072, %1073)
}

def @func_11628() -> (Tensor[(2, 2, 1), float32],) {
  %1074 = @func_7836() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1075 = %1074.0;
  (%1075,)
}

def @func_14660() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %1076 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1077 = @func_10632() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %1078 = %1076.0;
  %1079 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
  %1080 = %1077.2;
  %1081 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
  (%1078, %1079, %1080, %1081)
}

def @func_5369() -> (Tensor[(2, 2, 1), float32], Tensor[(4, 10, 12), uint16], Tensor[(120, 4), uint16], Tensor[(2, 2, 1), float32]) {
  %1082 = @func_4093() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %1083 = cast(meta[relay.Constant][39] /* ty=Tensor[(120, 4), uint16] */, dtype="uint16") /* ty=Tensor[(120, 4), uint16] */;
  %1084 = reshape(%1083, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), uint16] */;
  %1085 = @func_493(%1084) /* ty=(Tensor[(4, 10, 12), uint16], Tensor[(14, 10, ?), float64], Tensor[(140), float32]) */;
  %1086 = @func_3369() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1087 = %1082.3;
  %1088 = %1085.0;
  %1089 = %1086.0;
  (%1087, %1088, meta[relay.Constant][39] /* ty=Tensor[(120, 4), uint16] */, %1089)
}

def @func_10238() -> (Tensor[(2, 2, 1), float32],) {
  %1090 = @func_3369() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1091 = %1090.0;
  (%1091,)
}

def @func_3137() -> (Tensor[(2, 2, ?), int32], Tensor[(2, 2, 1), float32]) {
  %1092 = @func_2921() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1093 = %1092.0;
  %1094 = cast(%1093, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
  %1095 = atan(%1094) /* ty=Tensor[(2, 2, 1), float32] */;
  %1096 = cast(%1095, dtype="float64") /* ty=Tensor[(2, 2, 1), float64] */;
  %1097 = erf(%1096) /* ty=Tensor[(2, 2, 1), float64] */;
  %1098 = cast(%1095, dtype="float64") /* ty=Tensor[(2, 2, 1), float64] */;
  %1099 = asinh(%1098) /* ty=Tensor[(2, 2, 1), float64] */;
  %1100 = cast(%1099, dtype="int32") /* ty=Tensor[(2, 2, 1), int32] */;
  %1101 = shape_of(%1097, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1102 = cast(%1097, dtype="int32") /* ty=Tensor[(2, 2, 1), int32] */;
  %1103 = dyn.reshape(%1100, %1101, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1104 = subtract(%1102, %1103) /* ty=Tensor[(2, 2, ?), int32] */;
  %1105 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
  (%1104, %1105)
}

def @func_8573() -> float32 {
  @func_8510() /* ty=float32 */
}

def @func_15568(%var_15543: Tensor[(7, 13, 9), uint16], %var_15561: Tensor[(64), float32]) -> (Tensor[(7, 13, 9), uint16], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 16), uint64], Tensor[(64), float32], Tensor[(5, 9, 5), bool]) {
  %1106 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 13, 9), uint16] */, dtype="uint16") /* ty=Tensor[(7, 13, 9), uint16] */;
  %1107 = shape_of(%var_15543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1108 = cast(%var_15543, dtype="uint16") /* ty=Tensor[(7, 13, 9), uint16] */;
  %1109 = dyn.reshape(%1106, %1107, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1110 = cast(%var_15561, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1111 = reshape(%1110, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), float32] */;
  %1112 = @func_12414(%1111) /* ty=(Tensor[(2, 2, 16), uint64],) */;
  %1113 = @func_12930() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */;
  %1114 = bitwise_or(%1108, %1109) /* ty=Tensor[(7, 13, 9), uint16] */;
  %1115 = @func_7003() /* ty=Tensor[(2, 2, 1), float32] */;
  %1116 = %1112.0;
  %1117 = %1113.1;
  (%1114, %1115, %1116, %var_15561, %1117)
}

def @func_6134() -> Tensor[(5, 9, 5), bool] {
  %1118 = @func_5572() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %1118.2
}

def @func_10575(%var_10567: Tensor[(1820), int8]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(13, 14, 10), float64], int8, Tensor[(1820), int8], float32) {
  %1119 = @func_2921() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1120 = @func_9844() /* ty=(Tensor[(2, 2, 10), int32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */;
  %1121 = cast(meta[relay.Constant][41] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %1122 = cast(%var_10567, dtype="int8") /* ty=Tensor[(1820), int8] */;
  %1123 = reshape(%1121, newshape=[]) /* ty=int8 */;
  %1124 = reshape(%1122, newshape=[13, 14, 10]) /* ty=Tensor[(13, 14, 10), int8] */;
  %1125 = @func_8414(%1123, %1124) /* ty=(Tensor[(13, 14, 10), int8], Tensor[(13, 14, 10), float64], Tensor[(13, 14, 10), float64]) */;
  %1126 = @func_8750() /* ty=(float32,) */;
  %1127 = %1119.0;
  %1128 = %1120.3;
  %1129 = %1125.1;
  %1130 = %1126.0;
  (%1127, %1128, %1129, meta[relay.Constant][41] /* ty=int8 */, %var_10567, %1130)
}

def @func_7493() -> (Tensor[(40, 12), uint16], Tensor[(2, 2, 1), float32]) {
  %1131 = @func_5620() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(40, 12), uint16]) */;
  %1132 = @func_4263() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) */;
  %1133 = %1131.2;
  %1134 = %1132.1;
  (%1133, %1134)
}

def @func_13387() -> (float32,) {
  %1135 = @func_11344() /* ty=(float32, Tensor[(2, 2, ?), float64]) */;
  %1136 = %1135.0;
  (%1136,)
}

def @func_4518() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, ?), float64]) {
  %1137 = @func_3906() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %1138 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1139 = %1138.0;
  %1140 = cast(%1139, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
  %1141 = sinh(%1140) /* ty=Tensor[(2, 2, 1), float32] */;
  %1142 = cast(%1139, dtype="bool") /* ty=Tensor[(2, 2, 1), bool] */;
  %1143 = shape_of(%1141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1144 = cast(%1141, dtype="bool") /* ty=Tensor[(2, 2, 1), bool] */;
  %1145 = dyn.reshape(%1142, %1143, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1146 = greater(%1144, %1145) /* ty=Tensor[(2, 2, ?), bool] */;
  %1147 = cast(%1141, dtype="float64") /* ty=Tensor[(2, 2, 1), float64] */;
  %1148 = shape_of(%1146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1149 = cast(%1146, dtype="float64") /* ty=Tensor[(2, 2, ?), float64] */;
  %1150 = dyn.reshape(%1147, %1148, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1151 = %1137.0;
  %1152 = floor_divide(%1149, %1150) /* ty=Tensor[(2, 2, ?), float64] */;
  (%1151, %1152)
}

def @func_5620() -> (Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(40, 12), uint16]) {
  %1153 = cast(meta[relay.Constant][42] /* ty=Tensor[(40, 12), uint16] */, dtype="uint16") /* ty=Tensor[(40, 12), uint16] */;
  %1154 = reshape(%1153, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), uint16] */;
  %1155 = @func_493(%1154) /* ty=(Tensor[(4, 10, 12), uint16], Tensor[(14, 10, ?), float64], Tensor[(140), float32]) */;
  %1156 = @func_4029() /* ty=Tensor[(2, 2, 1), float32] */;
  %1157 = %1155.1;
  (%1156, %1157, meta[relay.Constant][42] /* ty=Tensor[(40, 12), uint16] */)
}

def @func_16640() -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(480), uint16]) {
  %1158 = cast(meta[relay.Constant][43] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %1159 = reshape(%1158, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %1160 = @func_9783(%1159) /* ty=(Tensor[(5, 9, 5), bool], float32, float32, Tensor[(480), uint16], Tensor[(140, 1), float32]) */;
  %1161 = @func_6192() /* ty=Tensor[(2, 2, 1), float32] */;
  %1162 = %1160.0;
  (%1161, %1162, meta[relay.Constant][43] /* ty=Tensor[(480), uint16] */)
}

def @func_10859() -> Tensor[(2, 2, 1), float32] {
  %1163 = @func_4843() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1163.0
}

def @func_11246() -> (Tensor[(2, 2, ?), int32],) {
  %1164 = @func_3137() /* ty=(Tensor[(2, 2, ?), int32], Tensor[(2, 2, 1), float32]) */;
  %1165 = %1164.0;
  (%1165,)
}

def @func_3442(%var_3432: Tensor[(480), uint16], %var_3433: Tensor[(1728), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) {
  %1166 = cast(%var_3432, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %1167 = cast(%var_3433, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %1168 = reshape(%1166, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %1169 = reshape(%1167, newshape=[24, 72]) /* ty=Tensor[(24, 72), float32] */;
  %1170 = @func_3260(%1168, %1169) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) */;
  %1171 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
  %1172 = %1170.1;
  (%1171, %1172, %var_3432, %var_3433)
}

def @func_10945(%var_10938: Tensor[(8, 42), int32]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, ?), int8], Tensor[(2, 4), float32], Tensor[(5, 9, 5), int32], Tensor[(14, 6, 4), int32], Tensor[(8, 42), int32], Tensor[(5, 9, 5), bool]) {
  %1173 = @func_7447() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1174 = %1173.0;
  %1175 = @func_6484() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1176 = %1175.0;
  %1177 = cast(%1176, dtype="int8") /* ty=Tensor[(2, 2, 1), int8] */;
  %1178 = shape_of(%1174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1179 = cast(%1174, dtype="int8") /* ty=Tensor[(2, 2, 1), int8] */;
  %1180 = dyn.reshape(%1177, %1178, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1181 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 4), float32] */, dtype="float32") /* ty=Tensor[(2, 4), float32] */;
  %1182 = reshape(%1181, newshape=[2, 2, 2]) /* ty=Tensor[(2, 2, 2), float32] */;
  %1183 = @func_7267(%1182) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(?, 9, 15), float64], Tensor[(2, 2, 2), bool], Tensor[(5, 9, 5), bool]) */;
  %1184 = %1183.3;
  %1185 = cast(meta[relay.Constant][45] /* ty=Tensor[(5, 9, 5), bool] */, dtype="int32") /* ty=Tensor[(5, 9, 5), int32] */;
  %1186 = shape_of(%1184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1187 = cast(%1184, dtype="int32") /* ty=Tensor[(5, 9, 5), int32] */;
  %1188 = dyn.reshape(%1185, %1186, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1189 = cast(%var_10938, dtype="int32") /* ty=Tensor[(8, 42), int32] */;
  %1190 = cast(%var_10938, dtype="int32") /* ty=Tensor[(8, 42), int32] */;
  %1191 = reshape(%1189, newshape=[14, 6, 4]) /* ty=Tensor[(14, 6, 4), int32] */;
  %1192 = reshape(%1190, newshape=[14, 6, 4]) /* ty=Tensor[(14, 6, 4), int32] */;
  %1193 = @func_6910() /* ty=(Tensor[(5, 9, 5), float64], Tensor[(5, 9, 5), bool]) */;
  %1194 = @func_9314() /* ty=Tensor[(2, 2, 1), float32] */;
  %1195 = minimum(%1179, %1180) /* ty=Tensor[(2, 2, ?), int8] */;
  %1196 = subtract(%1187, %1188) /* ty=Tensor[(5, 9, 5), int32] */;
  %1197 = @func_4875(%1191, %1192) /* ty=Tensor[(14, 6, 4), int32] */;
  %1198 = %1193.1;
  (%1194, %1195, meta[relay.Constant][44] /* ty=Tensor[(2, 4), float32] */, %1196, %1197, %var_10938, %1198)
}

def @func_5286() -> float32 {
  @func_4792() /* ty=float32 */
}

def @func_5717(%var_5623: Tensor[(7, 14, 9), float64], %var_5635: Tensor[(480), uint16], %var_5636: float32) -> (Tensor[(7, 14, 9), float64], Tensor[(5, 9, 5), bool], float32, Tensor[(140), float32], Tensor[(14, 10, ?), float64], Tensor[(?, 9, 15), float64], Tensor[(2, 2, 480), float64], Tensor[(135), float32], Tensor[(5, 9, 5), bool]) {
  %1199 = cast(%var_5623, dtype="float64") /* ty=Tensor[(7, 14, 9), float64] */;
  %1200 = cast(%var_5635, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %1201 = cast(%var_5636, dtype="float32") /* ty=float32 */;
  %1202 = cast(meta[relay.Constant][46] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %1203 = reshape(%1200, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %1204 = reshape(%1201, newshape=[]) /* ty=float32 */;
  %1205 = reshape(%1202, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %1206 = @func_5095(%1203, %1204, %1205) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(864, 2), float32], Tensor[(480), uint16], float32, Tensor[(1728), float32], Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(140), float32], Tensor[(?, 9, 15), int32]) */;
  %1207 = @func_5620() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(40, 12), uint16]) */;
  %1208 = @func_4213() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1209 = %1208.0;
  %1210 = cast(%var_5635, dtype="float64") /* ty=Tensor[(480), float64] */;
  %1211 = cast(%1209, dtype="float64") /* ty=Tensor[(2, 2, 1), float64] */;
  %1212 = cast(%var_5636, dtype="float32") /* ty=float32 */;
  %1213 = @func_5489() /* ty=Tensor[(?, 9, 15), float64] */;
  %1214 = cast(%1213, dtype="float32") /* ty=Tensor[(?, 9, 15), float32] */;
  %1215 = reshape(%1212, newshape=[]) /* ty=float32 */;
  %1216 = reshape(%1214, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %1217 = @func_4545(%1215, %1216) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(135), float32], Tensor[(2, 2, 1), float32]) */;
  %1218 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %1219 = acos(%1199) /* ty=Tensor[(7, 14, 9), float64] */;
  %1220 = %1206.0;
  %1221 = %1207.1;
  %1222 = floor_divide(%1210, %1211) /* ty=Tensor[(2, 2, 480), float64] */;
  %1223 = %1217.3;
  %1224 = %1218.0;
  (%1219, %1220, %var_5636, meta[relay.Constant][46] /* ty=Tensor[(140), float32] */, %1221, %1213, %1222, %1223, %1224)
}

def @func_11116() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %1225 = @func_6484() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1226 = %1225.0;
  %1227 = @func_10859() /* ty=Tensor[(2, 2, 1), float32] */;
  (%1226, %1227)
}

def @func_13683() -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) {
  %1228 = @func_11971() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %1229 = @func_6101() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %1230 = %1228.0;
  %1231 = %1229.0;
  (%1230, %1231)
}

def @func_7547() -> (Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) {
  %1232 = @func_3137() /* ty=(Tensor[(2, 2, ?), int32], Tensor[(2, 2, 1), float32]) */;
  %1233 = %1232.0;
  %1234 = cast(%1233, dtype="int32") /* ty=Tensor[(2, 2, ?), int32] */;
  %1235 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 2, 10), int32] */, dtype="int32") /* ty=Tensor[(2, 2, 10), int32] */;
  %1236 = @func_3092() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1237 = bitwise_xor(%1234, %1235) /* ty=Tensor[(2, 2, 10), int32] */;
  %1238 = %1236.0;
  (%1237, %1238)
}

def @func_6736() -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) {
  %1239 = @func_2899() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %1240 = @func_3906() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %1241 = %1239.0;
  %1242 = %1240.0;
  (%1241, %1242)
}

def @func_10331(%var_10293: float32, %var_10294: Tensor[(135), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(96, 18), float32], Tensor[(5, 9, 5), bool]) {
  %1243 = @func_7547() /* ty=(Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) */;
  %1244 = cast(%var_10293, dtype="float32") /* ty=float32 */;
  %1245 = cast(%var_10294, dtype="float32") /* ty=Tensor[(135), float32] */;
  %1246 = reshape(%1244, newshape=[]) /* ty=float32 */;
  %1247 = reshape(%1245, newshape=[1, 9, 15]) /* ty=Tensor[(1, 9, 15), float32] */;
  %1248 = @func_1819(%1246, %1247) /* ty=(Tensor[(1, 9, 15), bool], Tensor[(1, 9, 15), bool]) */;
  %1249 = cast(meta[relay.Constant][48] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %1250 = cast(meta[relay.Constant][49] /* ty=Tensor[(1728), float32] */, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %1251 = reshape(%1249, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %1252 = reshape(%1250, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %1253 = @func_3442(%1251, %1252) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) */;
  %1254 = %1253.2;
  %1255 = cast(%1254, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %1256 = reshape(%1255, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %1257 = @func_6286(%1256) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(96, 18), float32], Tensor[(480), uint16], float32) */;
  %1258 = @func_4093() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %1259 = %1243.1;
  %1260 = %1248.1;
  %1261 = %1257.3;
  %1262 = %1258.1;
  (%1259, %1260, %var_10293, %var_10294, %1254, meta[relay.Constant][48] /* ty=Tensor[(480), uint16] */, meta[relay.Constant][49] /* ty=Tensor[(1728), float32] */, %1261, %1262)
}

def @func_10632() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %1263 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %1264 = @func_10211() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %1265 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
  %1266 = %1263.1;
  %1267 = %1264.0;
  (%1265, %1266, %1267)
}

def @func_5211(%var_5197: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(9, 16, 12), float32], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(2, 2, 1), float32]) {
  %1268 = @func_4603() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1269 = cast(%var_5197, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %1270 = cast(meta[relay.Constant][50] /* ty=Tensor[(1728), float32] */, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %1271 = reshape(%1269, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %1272 = reshape(%1270, newshape=[24, 72]) /* ty=Tensor[(24, 72), float32] */;
  %1273 = @func_3260(%1271, %1272) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) */;
  %1274 = @func_2921() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1275 = %1268.0;
  %1276 = %1273.4;
  %1277 = %1274.0;
  (%1275, %1276, %var_5197, meta[relay.Constant][50] /* ty=Tensor[(1728), float32] */, %1277)
}

def @func_4029() -> Tensor[(2, 2, 1), float32] {
  %1278 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1278.0
}

def @func_14390() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, ?), bool]) {
  %1279 = @func_2899() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %1280 = @func_12953() /* ty=(Tensor[(2, 2, ?), bool],) */;
  %1281 = %1279.0;
  %1282 = %1280.0;
  (%1281, %1282)
}

def @func_3961(%var_3934: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) {
  %1283 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1284 = cast(%var_3934, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %1285 = cast(meta[relay.Constant][51] /* ty=Tensor[(1728), float32] */, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %1286 = reshape(%1284, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %1287 = reshape(%1285, newshape=[24, 72]) /* ty=Tensor[(24, 72), float32] */;
  %1288 = @func_3260(%1286, %1287) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) */;
  %1289 = %1283.0;
  %1290 = %1288.1;
  (%1289, %1290, %var_3934, meta[relay.Constant][51] /* ty=Tensor[(1728), float32] */)
}

def @func_4213() -> (Tensor[(2, 2, 1), float32],) {
  %1291 = @func_4029() /* ty=Tensor[(2, 2, 1), float32] */;
  (%1291,)
}

def @func_11034() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 4), uint8], Tensor[(16), float32], Tensor[(5, 9, 5), bool], float32, Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  %1292 = cast(meta[relay.Constant][52] /* ty=Tensor[(16), float32] */, dtype="float32") /* ty=Tensor[(16), float32] */;
  %1293 = reshape(%1292, newshape=[2, 2, 4]) /* ty=Tensor[(2, 2, 4), float32] */;
  %1294 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %1295 = @func_4161() /* ty=(float32,) */;
  %1296 = @func_8916() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1297 = @func_10859() /* ty=Tensor[(2, 2, 1), float32] */;
  %1298 = @func_8701(%1293) /* ty=Tensor[(2, 2, 4), uint8] */;
  %1299 = %1294.0;
  %1300 = %1295.0;
  %1301 = @func_6812() /* ty=Tensor[(5, 9, 5), bool] */;
  %1302 = %1296.0;
  (%1297, %1298, meta[relay.Constant][52] /* ty=Tensor[(16), float32] */, %1299, %1300, %1301, %1302)
}

def @func_12197(%var_12178: Tensor[(2, 2, 12), float32]) -> (Tensor[(2, 2, 12), int64], Tensor[(2, 2, 1), float32]) {
  %1303 = @func_9314() /* ty=Tensor[(2, 2, 1), float32] */;
  %1304 = cast(%1303, dtype="int64") /* ty=Tensor[(2, 2, 1), int64] */;
  %1305 = cast(%var_12178, dtype="int64") /* ty=Tensor[(2, 2, 12), int64] */;
  %1306 = @func_4213() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1307 = bitwise_or(%1304, %1305) /* ty=Tensor[(2, 2, 12), int64] */;
  %1308 = %1306.0;
  (%1307, %1308)
}

def @func_12579(%var_12518: Tensor[(8), float32], %var_12551: Tensor[(3, 45), float32]) -> (Tensor[(480), uint16], float32, Tensor[(8), float32], float32, Tensor[(2, 2, 1), float32], Tensor[(3, 45), float32]) {
  %1309 = @func_10792() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(2, 2, 1), float32], float32) */;
  %1310 = cast(%var_12518, dtype="float32") /* ty=Tensor[(8), float32] */;
  %1311 = reshape(%1310, newshape=[8]) /* ty=Tensor[(8), float32] */;
  %1312 = @func_10414(%1311) /* ty=(float32, Tensor[(5, 9, 5), bool], Tensor[(8), float32]) */;
  %1313 = @func_8607() /* ty=(float32, Tensor[(2, 2, 1), float32]) */;
  %1314 = %1312.0;
  %1315 = cast(%1314, dtype="float32") /* ty=float32 */;
  %1316 = cast(%var_12551, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
  %1317 = reshape(%1315, newshape=[]) /* ty=float32 */;
  %1318 = reshape(%1316, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %1319 = @func_4545(%1317, %1318) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(135), float32], Tensor[(2, 2, 1), float32]) */;
  %1320 = %1309.2;
  %1321 = %1313.0;
  %1322 = %1319.4;
  (%1320, %1314, %var_12518, %1321, %1322, %var_12551)
}

def @func_15307() -> float32 {
  %1323 = @func_7090() /* ty=(float32,) */;
  %1323.0
}

def @func_14465() -> Tensor[(2, 2, 1), float32] {
  @func_13164() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_9140() -> (Tensor[(2, 2, 1), float32],) {
  %1324 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
  (%1324,)
}

def @func_7267(%var_7246: Tensor[(2, 2, 2), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(?, 9, 15), float64], Tensor[(2, 2, 2), bool], Tensor[(5, 9, 5), bool]) {
  %1325 = @func_5572() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %1326 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
  %1327 = cast(%1326, dtype="bool") /* ty=Tensor[(2, 2, 1), bool] */;
  %1328 = cast(%var_7246, dtype="bool") /* ty=Tensor[(2, 2, 2), bool] */;
  %1329 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %1330 = %1325.2;
  %1331 = @func_5489() /* ty=Tensor[(?, 9, 15), float64] */;
  %1332 = greater_equal(%1327, %1328) /* ty=Tensor[(2, 2, 2), bool] */;
  %1333 = %1329.0;
  (%1330, %1331, %1332, %1333)
}

def @func_4545(%var_4538: float32, %var_4539: Tensor[(135), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(135), float32], Tensor[(2, 2, 1), float32]) {
  %1334 = cast(%var_4538, dtype="float32") /* ty=float32 */;
  %1335 = cast(%var_4539, dtype="float32") /* ty=Tensor[(135), float32] */;
  %1336 = reshape(%1334, newshape=[]) /* ty=float32 */;
  %1337 = reshape(%1335, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %1338 = @func_3797(%1336, %1337) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) */;
  %1339 = @func_2921() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1340 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
  %1341 = %1338.0;
  %1342 = %1339.0;
  (%1340, %1341, %var_4538, %var_4539, %1342)
}

def @func_15711() -> Tensor[(5, 9, 5), bool] {
  @func_6134() /* ty=Tensor[(5, 9, 5), bool] */
}

def @func_9651(%var_9644: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16]) {
  %1343 = @func_6736() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) */;
  %1344 = cast(%var_9644, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %1345 = reshape(%1344, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %1346 = @func_4382(%1345) /* ty=(Tensor[(135), float32], Tensor[(5, 9, 5), float64], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], Tensor[(480), uint16]) */;
  %1347 = %1343.0;
  %1348 = %1346.2;
  (%1347, %1348, %var_9644)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6484() -> (Tensor[(2, 2, 1), float32],) {
  %0 = @func_4843() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1 = %0.0;
  (%1,)
}

def @func_5324() -> (float32,) {
  %2 = @func_4161() /* ty=(float32,) */;
  %3 = %2.0;
  (%3,)
}

def @func_8283() -> (Tensor[(2, 2, 1), float32], Tensor[(?, 9, 15), float64], float32, Tensor[(2, 2, ?), float64]) {
  @func_8281() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(?, 9, 15), float64], float32, Tensor[(2, 2, ?), float64]) */
}

def @func_8957(%var_8938: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(96, 18), float32], Tensor[(480), uint16]) {
  %4 = @func_6484() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %5 = @func_8490() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %6 = @func_4263() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) */;
  %7 = cast(%var_8938, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %8 = reshape(%7, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %9 = @func_4382(%8) /* ty=(Tensor[(135), float32], Tensor[(5, 9, 5), float64], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], Tensor[(480), uint16]) */;
  %10 = %4.0;
  %11 = %5.0;
  %12 = %6.1;
  %13 = %9.4;
  (%10, %11, %12, %13, %var_8938)
}

def @func_9743(%var_9742: Tensor[(48), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 12), int8], Tensor[(48), float32]) {
  %19 = fn (%var_9733: Tensor[(48), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 12), int8], Tensor[(48), float32]) {
    %14 = @func_4817() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %15 = cast(%var_9733, dtype="float32") /* ty=Tensor[(48), float32] */;
    %16 = reshape(%15, newshape=[2, 2, 12]) /* ty=Tensor[(2, 2, 12), float32] */;
    %17 = %14.0;
    %18 = @func_4936(%16) /* ty=Tensor[(2, 2, 12), int8] */;
    (%17, %18, %var_9733)
  };
  %19(%var_9742) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 12), int8], Tensor[(48), float32]) */
}

def @func_9586(%var_9584: Tensor[(12), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(2, 240), uint16], Tensor[(1728), float32]) {
  @func_9583(%var_9584) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(2, 240), uint16], Tensor[(1728), float32]) */
}

def @func_14780() -> (Tensor[(5, 9, 5), bool],) {
  @func_14778() /* ty=(Tensor[(5, 9, 5), bool],) */
}

def @func_8510() -> float32 {
  %20 = @func_7153() /* ty=(float32,) */;
  %20.0
}

def @func_2899() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %21 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %22 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %23 = %21.0;
  %24 = %22.0;
  (%23, %24)
}

def @main(%var_17017: Tensor[(96, 18), float32]) -> (Tensor[(96, 18), bool], Tensor[(2, 2, 1), float32], Tensor[(96, 18), uint8]) {
  %25 = @func_16020() /* ty=(Tensor[(96, 18), float32],) */;
  %26 = %25.0;
  %27 = cast(%var_17017, dtype="bool") /* ty=Tensor[(96, 18), bool] */;
  %28 = shape_of(%26, dtype="int32") /* ty=Tensor[(2), int32] */;
  %29 = cast(%26, dtype="bool") /* ty=Tensor[(96, 18), bool] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %31 = greater_equal(%29, %30) /* ty=Tensor[(96, 18), bool] */;
  %32 = cast(%31, dtype="uint32") /* ty=Tensor[(96, 18), uint32] */;
  %33 = shape_of(%26, dtype="int32") /* ty=Tensor[(2), int32] */;
  %34 = cast(%26, dtype="uint32") /* ty=Tensor[(96, 18), uint32] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %36 = add(%34, %35) /* ty=Tensor[(96, 18), uint32] */;
  %37 = cast(%36, dtype="float32") /* ty=Tensor[(96, 18), float32] */;
  %38 = asin(%37) /* ty=Tensor[(96, 18), float32] */;
  %39 = cast(%31, dtype="bool") /* ty=Tensor[(96, 18), bool] */;
  %40 = shape_of(%38, dtype="int32") /* ty=Tensor[(2), int32] */;
  %41 = cast(%38, dtype="bool") /* ty=Tensor[(96, 18), bool] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %43 = @func_4604() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %44 = cast(%26, dtype="uint8") /* ty=Tensor[(96, 18), uint8] */;
  %45 = shape_of(%38, dtype="int32") /* ty=Tensor[(2), int32] */;
  %46 = cast(%38, dtype="uint8") /* ty=Tensor[(96, 18), uint8] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %48 = logical_and(%41, %42) /* ty=Tensor[(96, 18), bool] */;
  %49 = %43.0;
  %50 = bitwise_or(%46, %47) /* ty=Tensor[(96, 18), uint8] */;
  (%48, %49, %50)
}

def @func_5288() -> float32 {
  @func_5286() /* ty=float32 */
}

def @func_7154() -> (float32,) {
  %53 = fn () -> (float32,) {
    %51 = @func_5457() /* ty=(float32, Tensor[(2, 2, 1), float32]) */;
    %52 = %51.0;
    (%52,)
  };
  %53() /* ty=(float32,) */
}

def @func_12784(%var_12783: Tensor[(480), uint16]) -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(2, 2, ?), int32]) {
  %61 = fn (%var_12754: Tensor[(480), uint16]) -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(2, 2, ?), int32]) {
    %54 = @func_11034() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 4), uint8], Tensor[(16), float32], Tensor[(5, 9, 5), bool], float32, Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
    %55 = cast(%var_12754, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %56 = reshape(%55, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %57 = @func_5211(%56) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(9, 16, 12), float32], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(2, 2, 1), float32]) */;
    %58 = %54.5;
    %59 = %57.4;
    %60 = @func_12105() /* ty=Tensor[(2, 2, ?), int32] */;
    (%58, %59, %var_12754, %60)
  };
  %61(%var_12783) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(2, 2, ?), int32]) */
}

def @func_16394() -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) {
  @func_16392() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) */
}

def @func_12931() -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  %65 = fn () -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
    %62 = @func_6101() /* ty=(Tensor[(5, 9, 5), bool],) */;
    %63 = %62.0;
    %64 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
    (%63, %64)
  };
  %65() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */
}

def @func_6192() -> Tensor[(2, 2, 1), float32] {
  %66 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %66.0
}

def @func_7119() -> Tensor[(5, 9, 5), float64] {
  %67 = @func_6910() /* ty=(Tensor[(5, 9, 5), float64], Tensor[(5, 9, 5), bool]) */;
  %67.0
}

def @func_2915(%var_2913: Tensor[(9, 16, 12), float32], %var_2914: Tensor[(480), uint16]) -> (Tensor[(9, 16, 12), float32], Tensor[(140), float32], Tensor[(480), uint16]) {
  %74 = fn (%var_2905: Tensor[(9, 16, 12), float32], %var_2910: Tensor[(480), uint16]) -> (Tensor[(9, 16, 12), float32], Tensor[(140), float32], Tensor[(480), uint16]) {
    %68 = cast(%var_2905, dtype="float32") /* ty=Tensor[(9, 16, 12), float32] */;
    %69 = cast(%var_2910, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %70 = reshape(%69, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), uint16] */;
    %71 = @func_493(%70) /* ty=(Tensor[(4, 10, 12), uint16], Tensor[(14, 10, ?), float64], Tensor[(140), float32]) */;
    %72 = acosh(%68) /* ty=Tensor[(9, 16, 12), float32] */;
    %73 = %71.2;
    (%72, %73, %var_2910)
  };
  %74(%var_2913, %var_2914) /* ty=(Tensor[(9, 16, 12), float32], Tensor[(140), float32], Tensor[(480), uint16]) */
}

def @func_5213(%var_5212: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(9, 16, 12), float32], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(2, 2, 1), float32]) {
  %85 = fn (%var_5197: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(9, 16, 12), float32], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(2, 2, 1), float32]) {
    %75 = @func_4603() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %76 = cast(%var_5197, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %77 = cast(meta[relay.Constant][0] /* ty=Tensor[(1728), float32] */, dtype="float32") /* ty=Tensor[(1728), float32] */;
    %78 = reshape(%76, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %79 = reshape(%77, newshape=[24, 72]) /* ty=Tensor[(24, 72), float32] */;
    %80 = @func_3260(%78, %79) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) */;
    %81 = @func_2921() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %82 = %75.0;
    %83 = %80.4;
    %84 = %81.0;
    (%82, %83, %var_5197, meta[relay.Constant][0] /* ty=Tensor[(1728), float32] */, %84)
  };
  %85(%var_5212) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(9, 16, 12), float32], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(2, 2, 1), float32]) */
}

def @func_8491() -> (Tensor[(5, 9, 5), bool],) {
  %88 = fn () -> (Tensor[(5, 9, 5), bool],) {
    %86 = @func_6101() /* ty=(Tensor[(5, 9, 5), bool],) */;
    %87 = %86.0;
    (%87,)
  };
  %88() /* ty=(Tensor[(5, 9, 5), bool],) */
}

def @func_12579(%var_12518: Tensor[(8), float32], %var_12551: Tensor[(3, 45), float32]) -> (Tensor[(480), uint16], float32, Tensor[(8), float32], float32, Tensor[(2, 2, 1), float32], Tensor[(3, 45), float32]) {
  %89 = @func_10792() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(2, 2, 1), float32], float32) */;
  %90 = cast(%var_12518, dtype="float32") /* ty=Tensor[(8), float32] */;
  %91 = reshape(%90, newshape=[8]) /* ty=Tensor[(8), float32] */;
  %92 = @func_10414(%91) /* ty=(float32, Tensor[(5, 9, 5), bool], Tensor[(8), float32]) */;
  %93 = @func_8607() /* ty=(float32, Tensor[(2, 2, 1), float32]) */;
  %94 = %92.0;
  %95 = cast(%94, dtype="float32") /* ty=float32 */;
  %96 = cast(%var_12551, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
  %97 = reshape(%95, newshape=[]) /* ty=float32 */;
  %98 = reshape(%96, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %99 = @func_4545(%97, %98) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(135), float32], Tensor[(2, 2, 1), float32]) */;
  %100 = %89.2;
  %101 = %93.0;
  %102 = %99.4;
  (%100, %94, %var_12518, %101, %102, %var_12551)
}

def @func_4520() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, ?), float64]) {
  @func_4518() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, ?), float64]) */
}

def @func_11344() -> (float32, Tensor[(2, 2, ?), float64]) {
  %103 = @func_11246() /* ty=(Tensor[(2, 2, ?), int32],) */;
  %104 = %103.0;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(2, 2, ?), float64] */;
  %106 = @func_8510() /* ty=float32 */;
  %107 = asin(%105) /* ty=Tensor[(2, 2, ?), float64] */;
  (%106, %107)
}

def @func_12297() -> (Tensor[(5, 9, 5), bool],) {
  %108 = @func_8490() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %109 = %108.0;
  (%109,)
}

def @func_10873() -> (Tensor[(5, 9, 5), bool],) {
  %110 = @func_6812() /* ty=Tensor[(5, 9, 5), bool] */;
  (%110,)
}

def @func_3961(%var_3934: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) {
  %111 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %112 = cast(%var_3934, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %113 = cast(meta[relay.Constant][1] /* ty=Tensor[(1728), float32] */, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %114 = reshape(%112, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %115 = reshape(%113, newshape=[24, 72]) /* ty=Tensor[(24, 72), float32] */;
  %116 = @func_3260(%114, %115) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) */;
  %117 = %111.0;
  %118 = %116.1;
  (%117, %118, %var_3934, meta[relay.Constant][1] /* ty=Tensor[(1728), float32] */)
}

def @func_10239() -> (Tensor[(2, 2, 1), float32],) {
  %121 = fn () -> (Tensor[(2, 2, 1), float32],) {
    %119 = @func_3369() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %120 = %119.0;
    (%120,)
  };
  %121() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_7673(%var_7671: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), float64], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(480), uint16]) {
  @func_7670(%var_7671) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), float64], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(480), uint16]) */
}

def @func_9432() -> (float32, float32) {
  @func_9430() /* ty=(float32, float32) */
}

def @func_12342() -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  @func_12340() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */
}

def @func_14778() -> (Tensor[(5, 9, 5), bool],) {
  %122 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
  (%122,)
}

def @func_14890(%var_14888: Tensor[(12), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(12), float32], Tensor[(120, 4), float32], Tensor[(2, 2, ?), int16]) {
  @func_14887(%var_14888) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(12), float32], Tensor[(120, 4), float32], Tensor[(2, 2, ?), int16]) */
}

def @func_5517() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  @func_5515() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */
}

def @func_4385(%var_4383: Tensor[(480), uint16]) -> (Tensor[(135), float32], Tensor[(5, 9, 5), float64], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], Tensor[(480), uint16]) {
  @func_4382(%var_4383) /* ty=(Tensor[(135), float32], Tensor[(5, 9, 5), float64], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], Tensor[(480), uint16]) */
}

def @func_4031() -> Tensor[(2, 2, 1), float32] {
  @func_4029() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_11973() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  @func_11971() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */
}

def @func_5326() -> (float32,) {
  @func_5324() /* ty=(float32,) */
}

def @func_11155() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %131 = fn () -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
    %123 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %124 = @func_6484() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %125 = @func_3092() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %126 = @func_11116() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %127 = %123.0;
    %128 = %124.0;
    %129 = %125.0;
    %130 = %126.1;
    (%127, %128, %129, %130)
  };
  %131() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */
}

def @func_5095(%var_5032: Tensor[(480), uint16], %var_5041: float32, %var_5075: Tensor[(140), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(864, 2), float32], Tensor[(480), uint16], float32, Tensor[(1728), float32], Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(140), float32], Tensor[(?, 9, 15), int32]) {
  %132 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %133 = cast(meta[relay.Constant][2] /* ty=Tensor[(864, 2), float32] */, dtype="float32") /* ty=Tensor[(864, 2), float32] */;
  %134 = cast(%var_5032, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %135 = reshape(%133, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float32] */;
  %136 = reshape(%134, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %137 = @func_2912(%135, %136) /* ty=(Tensor[(9, 16, 12), float32], Tensor[(140), float32], Tensor[(480), uint16]) */;
  %138 = cast(%var_5032, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %139 = reshape(%138, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %140 = @func_3961(%139) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) */;
  %141 = @func_4843() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %142 = cast(%var_5075, dtype="float32") /* ty=Tensor[(140), float32] */;
  %143 = reshape(%142, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
  %144 = cast(%var_5041, dtype="float32") /* ty=float32 */;
  %145 = cast(meta[relay.Constant][3] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %146 = reshape(%144, newshape=[]) /* ty=float32 */;
  %147 = reshape(%145, newshape=[1, 9, 15]) /* ty=Tensor[(1, 9, 15), float32] */;
  %148 = @func_1819(%146, %147) /* ty=(Tensor[(1, 9, 15), bool], Tensor[(1, 9, 15), bool]) */;
  %149 = %148.1;
  %150 = cast(meta[relay.Constant][3] /* ty=Tensor[(135), float32] */, dtype="int32") /* ty=Tensor[(135), int32] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%149, dtype="int32") /* ty=Tensor[(1, 9, 15), int32] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %154 = %132.0;
  %155 = %137.2;
  %156 = %140.3;
  %157 = %141.0;
  %158 = @func_126(%143) /* ty=Tensor[(14, 10, ?), float64] */;
  %159 = add(%152, %153) /* ty=Tensor[(?, 9, 15), int32] */;
  (%154, %155, meta[relay.Constant][2] /* ty=Tensor[(864, 2), float32] */, %var_5032, %var_5041, %156, %157, %158, %var_5075, %159)
}

def @func_10417(%var_10415: Tensor[(8), float32]) -> (float32, Tensor[(5, 9, 5), bool], Tensor[(8), float32]) {
  @func_10414(%var_10415) /* ty=(float32, Tensor[(5, 9, 5), bool], Tensor[(8), float32]) */
}

def @func_7548() -> (Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) {
  %167 = fn () -> (Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) {
    %160 = @func_3137() /* ty=(Tensor[(2, 2, ?), int32], Tensor[(2, 2, 1), float32]) */;
    %161 = %160.0;
    %162 = cast(%161, dtype="int32") /* ty=Tensor[(2, 2, ?), int32] */;
    %163 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 2, 10), int32] */, dtype="int32") /* ty=Tensor[(2, 2, 10), int32] */;
    %164 = @func_3092() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %165 = bitwise_xor(%162, %163) /* ty=Tensor[(2, 2, 10), int32] */;
    %166 = %164.0;
    (%165, %166)
  };
  %167() /* ty=(Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) */
}

def @func_5100(%var_5097: Tensor[(480), uint16], %var_5098: float32, %var_5099: Tensor[(140), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(864, 2), float32], Tensor[(480), uint16], float32, Tensor[(1728), float32], Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(140), float32], Tensor[(?, 9, 15), int32]) {
  @func_5095(%var_5097, %var_5098, %var_5099) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(864, 2), float32], Tensor[(480), uint16], float32, Tensor[(1728), float32], Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(140), float32], Tensor[(?, 9, 15), int32]) */
}

def @func_5622() -> (Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(40, 12), uint16]) {
  @func_5620() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(40, 12), uint16]) */
}

def @func_6737() -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) {
  %172 = fn () -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) {
    %168 = @func_2899() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %169 = @func_3906() /* ty=(Tensor[(5, 9, 5), bool],) */;
    %170 = %168.0;
    %171 = %169.0;
    (%170, %171)
  };
  %172() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) */
}

def @func_10575(%var_10567: Tensor[(1820), int8]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(13, 14, 10), float64], int8, Tensor[(1820), int8], float32) {
  %173 = @func_2921() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %174 = @func_9844() /* ty=(Tensor[(2, 2, 10), int32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */;
  %175 = cast(meta[relay.Constant][5] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %176 = cast(%var_10567, dtype="int8") /* ty=Tensor[(1820), int8] */;
  %177 = reshape(%175, newshape=[]) /* ty=int8 */;
  %178 = reshape(%176, newshape=[13, 14, 10]) /* ty=Tensor[(13, 14, 10), int8] */;
  %179 = @func_8414(%177, %178) /* ty=(Tensor[(13, 14, 10), int8], Tensor[(13, 14, 10), float64], Tensor[(13, 14, 10), float64]) */;
  %180 = @func_8750() /* ty=(float32,) */;
  %181 = %173.0;
  %182 = %174.3;
  %183 = %179.1;
  %184 = %180.0;
  (%181, %182, %183, meta[relay.Constant][5] /* ty=int8 */, %var_10567, %184)
}

def @func_10414(%var_10389: Tensor[(8), float32]) -> (float32, Tensor[(5, 9, 5), bool], Tensor[(8), float32]) {
  %185 = @func_8750() /* ty=(float32,) */;
  %186 = cast(%var_10389, dtype="float32") /* ty=Tensor[(8), float32] */;
  %187 = reshape(%186, newshape=[2, 2, 2]) /* ty=Tensor[(2, 2, 2), float32] */;
  %188 = @func_7267(%187) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(?, 9, 15), float64], Tensor[(2, 2, 2), bool], Tensor[(5, 9, 5), bool]) */;
  %189 = %185.0;
  %190 = %188.0;
  (%189, %190, %var_10389)
}

def @func_10793() -> (Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(2, 2, 1), float32], float32) {
  %201 = fn () -> (Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(2, 2, 1), float32], float32) {
    %191 = @func_8216() /* ty=(Tensor[(120, 4), uint16], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32]) */;
    %192 = cast(meta[relay.Constant][6] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %193 = reshape(%192, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %194 = @func_5211(%193) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(9, 16, 12), float32], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(2, 2, 1), float32]) */;
    %195 = @func_7447() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %196 = @func_5324() /* ty=(float32,) */;
    %197 = %191.1;
    %198 = %194.2;
    %199 = %195.0;
    %200 = %196.0;
    (%197, %198, meta[relay.Constant][6] /* ty=Tensor[(480), uint16] */, %199, %200)
  };
  %201() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(2, 2, 1), float32], float32) */
}

def @func_15778() -> (Tensor[(5, 9, 5), bool],) {
  %204 = fn () -> (Tensor[(5, 9, 5), bool],) {
    %202 = @func_4518() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, ?), float64]) */;
    %203 = %202.0;
    (%203,)
  };
  %204() /* ty=(Tensor[(5, 9, 5), bool],) */
}

def @func_8608() -> (float32, Tensor[(2, 2, 1), float32]) {
  %208 = fn () -> (float32, Tensor[(2, 2, 1), float32]) {
    %205 = @func_5457() /* ty=(float32, Tensor[(2, 2, 1), float32]) */;
    %206 = @func_5286() /* ty=float32 */;
    %207 = %205.1;
    (%206, %207)
  };
  %208() /* ty=(float32, Tensor[(2, 2, 1), float32]) */
}

def @func_11629() -> (Tensor[(2, 2, 1), float32],) {
  %211 = fn () -> (Tensor[(2, 2, 1), float32],) {
    %209 = @func_7836() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %210 = %209.0;
    (%210,)
  };
  %211() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_9932(%var_9930: float32) -> (Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], float32, float32, Tensor[(15, 9), float32], Tensor[(2, 2, 480), int8]) {
  @func_9929(%var_9930) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], float32, float32, Tensor[(15, 9), float32], Tensor[(2, 2, 480), int8]) */
}

def @func_14922(%var_14921: Tensor[(65), uint8]) -> (Tensor[(2, 2, 1), float32], Tensor[(4, 13, 5), bool], Tensor[(65), uint8]) {
  %217 = fn (%var_14916: Tensor[(65), uint8]) -> (Tensor[(2, 2, 1), float32], Tensor[(4, 13, 5), bool], Tensor[(65), uint8]) {
    %212 = cast(%var_14916, dtype="uint8") /* ty=Tensor[(65), uint8] */;
    %213 = reshape(%212, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), uint8] */;
    %214 = @func_14069(%213) /* ty=(Tensor[(4, 13, 5), bool],) */;
    %215 = @func_14591() /* ty=Tensor[(2, 2, 1), float32] */;
    %216 = %214.0;
    (%215, %216, %var_14916)
  };
  %217(%var_14921) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(4, 13, 5), bool], Tensor[(65), uint8]) */
}

def @func_10729(%var_10727: Tensor[(15, 12, 11), uint8], %var_10728: Tensor[(15, 12, 11), uint8]) -> (Tensor[(15, 12, 11), bool], Tensor[(15, 12, 11), float32]) {
  %225 = fn (%var_10708: Tensor[(15, 12, 11), uint8], %var_10709: Tensor[(15, 12, 11), uint8]) -> (Tensor[(15, 12, 11), bool], Tensor[(15, 12, 11), float32]) {
    %218 = cast(%var_10709, dtype="bool") /* ty=Tensor[(15, 12, 11), bool] */;
    %219 = shape_of(%var_10708, dtype="int32") /* ty=Tensor[(3), int32] */;
    %220 = cast(%var_10708, dtype="bool") /* ty=Tensor[(15, 12, 11), bool] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %222 = cast(%var_10708, dtype="float32") /* ty=Tensor[(15, 12, 11), float32] */;
    %223 = not_equal(%220, %221) /* ty=Tensor[(15, 12, 11), bool] */;
    %224 = exp(%222) /* ty=Tensor[(15, 12, 11), float32] */;
    (%223, %224)
  };
  %225(%var_10727, %var_10728) /* ty=(Tensor[(15, 12, 11), bool], Tensor[(15, 12, 11), float32]) */
}

def @func_6286(%var_6261: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(96, 18), float32], Tensor[(480), uint16], float32) {
  %226 = @func_5515() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %227 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %228 = cast(meta[relay.Constant][7] /* ty=Tensor[(96, 18), float32] */, dtype="float32") /* ty=Tensor[(96, 18), float32] */;
  %229 = cast(%var_6261, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %230 = reshape(%228, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %231 = reshape(%229, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %232 = @func_3523(%230, %231) /* ty=(Tensor[(2, 2, 1), float64], Tensor[(140), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) */;
  %233 = %226.0;
  %234 = %227.0;
  %235 = %232.4;
  %236 = @func_5286() /* ty=float32 */;
  (%233, %234, %235, meta[relay.Constant][7] /* ty=Tensor[(96, 18), float32] */, %var_6261, %236)
}

def @func_16744() -> float32 {
  %238 = fn () -> float32 {
    %237 = @func_8607() /* ty=(float32, Tensor[(2, 2, 1), float32]) */;
    %237.0
  };
  %238() /* ty=float32 */
}

def @func_13582() -> (Tensor[(2, 2, 10), float64],) {
  @func_13580() /* ty=(Tensor[(2, 2, 10), float64],) */
}

def @func_10335(%var_10333: float32, %var_10334: Tensor[(135), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(96, 18), float32], Tensor[(5, 9, 5), bool]) {
  @func_10331(%var_10333, %var_10334) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(96, 18), float32], Tensor[(5, 9, 5), bool]) */
}

def @func_7838() -> (Tensor[(2, 2, 1), float32],) {
  @func_7836() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_3264(%var_3262: Tensor[(480), uint16], %var_3263: Tensor[(24, 72), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) {
  @func_3260(%var_3262, %var_3263) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) */
}

def @func_10947(%var_10946: Tensor[(8, 42), int32]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, ?), int8], Tensor[(2, 4), float32], Tensor[(5, 9, 5), int32], Tensor[(14, 6, 4), int32], Tensor[(8, 42), int32], Tensor[(5, 9, 5), bool]) {
  %265 = fn (%var_10938: Tensor[(8, 42), int32]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, ?), int8], Tensor[(2, 4), float32], Tensor[(5, 9, 5), int32], Tensor[(14, 6, 4), int32], Tensor[(8, 42), int32], Tensor[(5, 9, 5), bool]) {
    %239 = @func_7447() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %240 = %239.0;
    %241 = @func_6484() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %242 = %241.0;
    %243 = cast(%242, dtype="int8") /* ty=Tensor[(2, 2, 1), int8] */;
    %244 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
    %245 = cast(%240, dtype="int8") /* ty=Tensor[(2, 2, 1), int8] */;
    %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %247 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 4), float32] */, dtype="float32") /* ty=Tensor[(2, 4), float32] */;
    %248 = reshape(%247, newshape=[2, 2, 2]) /* ty=Tensor[(2, 2, 2), float32] */;
    %249 = @func_7267(%248) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(?, 9, 15), float64], Tensor[(2, 2, 2), bool], Tensor[(5, 9, 5), bool]) */;
    %250 = %249.3;
    %251 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 9, 5), bool] */, dtype="int32") /* ty=Tensor[(5, 9, 5), int32] */;
    %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
    %253 = cast(%250, dtype="int32") /* ty=Tensor[(5, 9, 5), int32] */;
    %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %255 = cast(%var_10938, dtype="int32") /* ty=Tensor[(8, 42), int32] */;
    %256 = cast(%var_10938, dtype="int32") /* ty=Tensor[(8, 42), int32] */;
    %257 = reshape(%255, newshape=[14, 6, 4]) /* ty=Tensor[(14, 6, 4), int32] */;
    %258 = reshape(%256, newshape=[14, 6, 4]) /* ty=Tensor[(14, 6, 4), int32] */;
    %259 = @func_6910() /* ty=(Tensor[(5, 9, 5), float64], Tensor[(5, 9, 5), bool]) */;
    %260 = @func_9314() /* ty=Tensor[(2, 2, 1), float32] */;
    %261 = minimum(%245, %246) /* ty=Tensor[(2, 2, ?), int8] */;
    %262 = subtract(%253, %254) /* ty=Tensor[(5, 9, 5), int32] */;
    %263 = @func_4875(%257, %258) /* ty=Tensor[(14, 6, 4), int32] */;
    %264 = %259.1;
    (%260, %261, meta[relay.Constant][8] /* ty=Tensor[(2, 4), float32] */, %262, %263, %var_10938, %264)
  };
  %265(%var_10946) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, ?), int8], Tensor[(2, 4), float32], Tensor[(5, 9, 5), int32], Tensor[(14, 6, 4), int32], Tensor[(8, 42), int32], Tensor[(5, 9, 5), bool]) */
}

def @func_14661() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %272 = fn () -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
    %266 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %267 = @func_10632() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %268 = %266.0;
    %269 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
    %270 = %267.2;
    %271 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
    (%268, %269, %270, %271)
  };
  %272() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */
}

def @func_14405() -> (Tensor[(2, 2, 1), float32],) {
  %275 = fn () -> (Tensor[(2, 2, 1), float32],) {
    %273 = @func_11116() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %274 = %273.1;
    (%274,)
  };
  %275() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_14269() -> (Tensor[(2, 2, 10), float64],) {
  %278 = fn () -> (Tensor[(2, 2, 10), float64],) {
    %276 = @func_13580() /* ty=(Tensor[(2, 2, 10), float64],) */;
    %277 = %276.0;
    (%277,)
  };
  %278() /* ty=(Tensor[(2, 2, 10), float64],) */
}

def @func_13389() -> (float32,) {
  @func_13387() /* ty=(float32,) */
}

def @func_12985() -> (Tensor[(2, 2, 1), float32],) {
  @func_12983() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_16018() -> (Tensor[(96, 18), float32],) {
  %279 = @func_12873() /* ty=(Tensor[(96, 18), float32],) */;
  %280 = %279.0;
  (%280,)
}

def @func_6571(%var_6567: Tensor[(12), float32], %var_6568: Tensor[(480), uint16]) -> (Tensor[(2, 2, ?), bool], Tensor[(48), float32], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(1728), float32]) {
  %281 = @func_5620() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(40, 12), uint16]) */;
  %282 = %281.0;
  %283 = @func_4518() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, ?), float64]) */;
  %284 = %283.1;
  %285 = cast(%284, dtype="bool") /* ty=Tensor[(2, 2, ?), bool] */;
  %286 = shape_of(%282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(%282, dtype="bool") /* ty=Tensor[(2, 2, 1), bool] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %289 = cast(%var_6567, dtype="float32") /* ty=Tensor[(12), float32] */;
  %290 = cast(%var_6568, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %291 = cast(meta[relay.Constant][10] /* ty=Tensor[(1728), float32] */, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %292 = reshape(%289, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float32] */;
  %293 = reshape(%290, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %294 = reshape(%291, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %295 = @func_5858(%292, %293, %294) /* ty=(Tensor[(2, 2, 3), uint32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 12), int8], Tensor[(48), float32]) */;
  %296 = equal(%287, %288) /* ty=Tensor[(2, 2, ?), bool] */;
  %297 = %295.8;
  (%296, %297, %var_6567, %var_6568, meta[relay.Constant][10] /* ty=Tensor[(1728), float32] */)
}

def @func_16172(%var_16150: uint16, %var_16151: Tensor[(10, 6, 1), uint16], %var_16157: Tensor[(4, 16), float32]) -> (Tensor[(10, 6, 1), uint16], Tensor[(2, 2, 16), uint64], Tensor[(4, 16), float32]) {
  %298 = cast(%var_16150, dtype="uint16") /* ty=uint16 */;
  %299 = cast(%var_16151, dtype="uint16") /* ty=Tensor[(10, 6, 1), uint16] */;
  %300 = cast(%var_16157, dtype="float32") /* ty=Tensor[(4, 16), float32] */;
  %301 = reshape(%300, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), float32] */;
  %302 = @func_12414(%301) /* ty=(Tensor[(2, 2, 16), uint64],) */;
  %303 = bitwise_and(%298, %299) /* ty=Tensor[(10, 6, 1), uint16] */;
  %304 = %302.0;
  (%303, %304, %var_16157)
}

def @func_15122(%var_15115: Tensor[(1728), float32], %var_15116: Tensor[(4, 120), uint16]) -> (Tensor[(2, 2, 10), float64], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(4, 120), uint16]) {
  %305 = @func_13580() /* ty=(Tensor[(2, 2, 10), float64],) */;
  %306 = @func_14660() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %307 = cast(%var_15115, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %308 = cast(%var_15116, dtype="uint16") /* ty=Tensor[(4, 120), uint16] */;
  %309 = reshape(%307, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %310 = reshape(%308, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %311 = @func_3523(%309, %310) /* ty=(Tensor[(2, 2, 1), float64], Tensor[(140), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) */;
  %312 = %305.0;
  %313 = %306.2;
  %314 = %311.3;
  (%312, %313, %314, %var_15115, %var_15116)
}

def @func_6912() -> (Tensor[(5, 9, 5), float64], Tensor[(5, 9, 5), bool]) {
  @func_6910() /* ty=(Tensor[(5, 9, 5), float64], Tensor[(5, 9, 5), bool]) */
}

def @func_16223() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  @func_16221() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */
}

def @func_16405() -> (Tensor[(5, 9, 5), bool],) {
  %315 = @func_9844() /* ty=(Tensor[(2, 2, 10), int32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */;
  %316 = %315.3;
  (%316,)
}

def @func_8512() -> float32 {
  @func_8510() /* ty=float32 */
}

def @func_11806() -> Tensor[(2, 2, 1), float32] {
  @func_7426() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_5490() -> Tensor[(?, 9, 15), float64] {
  %325 = fn () -> Tensor[(?, 9, 15), float64] {
    %317 = @func_3673() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) */;
    %318 = %317.1;
    %319 = cast(%318, dtype="float32") /* ty=Tensor[(1, 9, 15), float32] */;
    %320 = log2(%319) /* ty=Tensor[(1, 9, 15), float32] */;
    %321 = cast(%318, dtype="float64") /* ty=Tensor[(1, 9, 15), float64] */;
    %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
    %323 = cast(%320, dtype="float64") /* ty=Tensor[(1, 9, 15), float64] */;
    %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%323, %324) /* ty=Tensor[(?, 9, 15), float64] */
  };
  %325() /* ty=Tensor[(?, 9, 15), float64] */
}

def @func_2847() -> (Tensor[(2, 2, 1), float32],) {
  %328 = fn () -> (Tensor[(2, 2, 1), float32],) {
    %326 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
    %327 = log2(%326) /* ty=Tensor[(2, 2, 1), float32] */;
    (%327,)
  };
  %328() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_3908() -> (Tensor[(5, 9, 5), bool],) {
  @func_3906() /* ty=(Tensor[(5, 9, 5), bool],) */
}

def @func_13981() -> float32 {
  @func_13979() /* ty=float32 */
}

def @func_7494() -> (Tensor[(40, 12), uint16], Tensor[(2, 2, 1), float32]) {
  %333 = fn () -> (Tensor[(40, 12), uint16], Tensor[(2, 2, 1), float32]) {
    %329 = @func_5620() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(40, 12), uint16]) */;
    %330 = @func_4263() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) */;
    %331 = %329.2;
    %332 = %330.1;
    (%331, %332)
  };
  %333() /* ty=(Tensor[(40, 12), uint16], Tensor[(2, 2, 1), float32]) */
}

def @func_15040() -> (Tensor[(2, 2, 10), float64],) {
  @func_15038() /* ty=(Tensor[(2, 2, 10), float64],) */
}

def @func_8447() -> (float32,) {
  %336 = fn () -> (float32,) {
    %334 = @func_8281() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(?, 9, 15), float64], float32, Tensor[(2, 2, ?), float64]) */;
    %335 = %334.2;
    (%335,)
  };
  %336() /* ty=(float32,) */
}

def @func_10578(%var_10576: Tensor[(1820), int8]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(13, 14, 10), float64], int8, Tensor[(1820), int8], float32) {
  @func_10575(%var_10576) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(13, 14, 10), float64], int8, Tensor[(1820), int8], float32) */
}

def @func_8704(%var_8702: Tensor[(2, 2, 4), float32]) -> Tensor[(2, 2, 4), uint8] {
  @func_8701(%var_8702) /* ty=Tensor[(2, 2, 4), uint8] */
}

def @func_10875() -> (Tensor[(5, 9, 5), bool],) {
  @func_10873() /* ty=(Tensor[(5, 9, 5), bool],) */
}

def @func_15703(%var_15701: float32, %var_15702: Tensor[(135), float32]) -> (Tensor[(5, 9, 5), float64], Tensor[(2, 2, 1), float32], float32, Tensor[(2, 2, 135), int8]) {
  %349 = fn (%var_15688: float32, %var_15689: Tensor[(135), float32]) -> (Tensor[(5, 9, 5), float64], Tensor[(2, 2, 1), float32], float32, Tensor[(2, 2, 135), int8]) {
    %337 = @func_11971() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %338 = cast(%var_15688, dtype="float32") /* ty=float32 */;
    %339 = cast(%var_15689, dtype="float32") /* ty=Tensor[(135), float32] */;
    %340 = reshape(%338, newshape=[]) /* ty=float32 */;
    %341 = reshape(%339, newshape=[3, 45]) /* ty=Tensor[(3, 45), float32] */;
    %342 = @func_9076(%340, %341) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(3, 45), int16], Tensor[(2, 2, ?), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */;
    %343 = %342.4;
    %344 = cast(%343, dtype="int8") /* ty=Tensor[(2, 2, ?), int8] */;
    %345 = cast(%var_15689, dtype="int8") /* ty=Tensor[(135), int8] */;
    %346 = @func_7119() /* ty=Tensor[(5, 9, 5), float64] */;
    %347 = %337.1;
    %348 = minimum(%344, %345) /* ty=Tensor[(2, 2, 135), int8] */;
    (%346, %347, %var_15688, %348)
  };
  %349(%var_15701, %var_15702) /* ty=(Tensor[(5, 9, 5), float64], Tensor[(2, 2, 1), float32], float32, Tensor[(2, 2, 135), int8]) */
}

def @func_15038() -> (Tensor[(2, 2, 10), float64],) {
  %350 = @func_14268() /* ty=(Tensor[(2, 2, 10), float64],) */;
  %351 = %350.0;
  (%351,)
}

def @func_5572() -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  %352 = @func_3906() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %353 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %354 = @func_4093() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %355 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %356 = %352.0;
  %357 = %353.0;
  %358 = %354.0;
  %359 = %355.0;
  (%356, %357, %358, %359)
}

def @func_8750() -> (float32,) {
  %360 = @func_8281() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(?, 9, 15), float64], float32, Tensor[(2, 2, ?), float64]) */;
  %361 = %360.2;
  (%361,)
}

def @func_3609() -> Tensor[(5, 9, 5), bool] {
  %363 = fn () -> Tensor[(5, 9, 5), bool] {
    %362 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
    %362.0
  };
  %363() /* ty=Tensor[(5, 9, 5), bool] */
}

def @func_6134() -> Tensor[(5, 9, 5), bool] {
  %364 = @func_5572() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %364.2
}

def @func_7269(%var_7268: Tensor[(2, 2, 2), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(?, 9, 15), float64], Tensor[(2, 2, 2), bool], Tensor[(5, 9, 5), bool]) {
  %374 = fn (%var_7246: Tensor[(2, 2, 2), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(?, 9, 15), float64], Tensor[(2, 2, 2), bool], Tensor[(5, 9, 5), bool]) {
    %365 = @func_5572() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
    %366 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
    %367 = cast(%366, dtype="bool") /* ty=Tensor[(2, 2, 1), bool] */;
    %368 = cast(%var_7246, dtype="bool") /* ty=Tensor[(2, 2, 2), bool] */;
    %369 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
    %370 = %365.2;
    %371 = @func_5489() /* ty=Tensor[(?, 9, 15), float64] */;
    %372 = greater_equal(%367, %368) /* ty=Tensor[(2, 2, 2), bool] */;
    %373 = %369.0;
    (%370, %371, %372, %373)
  };
  %374(%var_7268) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(?, 9, 15), float64], Tensor[(2, 2, 2), bool], Tensor[(5, 9, 5), bool]) */
}

def @func_12030(%var_12029: Tensor[(4, 432), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(4, 432), float32]) {
  %383 = fn (%var_12025: Tensor[(4, 432), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(4, 432), float32]) {
    %375 = @func_6736() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) */;
    %376 = cast(meta[relay.Constant][12] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %377 = cast(%var_12025, dtype="float32") /* ty=Tensor[(4, 432), float32] */;
    %378 = reshape(%376, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %379 = reshape(%377, newshape=[24, 72]) /* ty=Tensor[(24, 72), float32] */;
    %380 = @func_3260(%378, %379) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) */;
    %381 = %375.0;
    %382 = %380.1;
    (%381, %382, meta[relay.Constant][12] /* ty=Tensor[(480), uint16] */, %var_12025)
  };
  %383(%var_12029) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(4, 432), float32]) */
}

def @func_9583(%var_9579: Tensor[(12), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(2, 240), uint16], Tensor[(1728), float32]) {
  %384 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %385 = @func_7832() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], float32) */;
  %386 = @func_5572() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %387 = @func_5572() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %388 = cast(%var_9579, dtype="float32") /* ty=Tensor[(12), float32] */;
  %389 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 240), uint16] */, dtype="uint16") /* ty=Tensor[(2, 240), uint16] */;
  %390 = cast(meta[relay.Constant][14] /* ty=Tensor[(1728), float32] */, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %391 = reshape(%388, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float32] */;
  %392 = reshape(%389, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %393 = reshape(%390, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %394 = @func_5858(%391, %392, %393) /* ty=(Tensor[(2, 2, 3), uint32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 12), int8], Tensor[(48), float32]) */;
  %395 = %384.1;
  %396 = %385.0;
  %397 = %386.1;
  %398 = %387.1;
  %399 = %394.2;
  (%395, %396, %397, %398, %399, %var_9579, meta[relay.Constant][13] /* ty=Tensor[(2, 240), uint16] */, meta[relay.Constant][14] /* ty=Tensor[(1728), float32] */)
}

def @func_15713() -> Tensor[(5, 9, 5), bool] {
  @func_15711() /* ty=Tensor[(5, 9, 5), bool] */
}

def @func_4604() -> (Tensor[(2, 2, 1), float32],) {
  %402 = fn () -> (Tensor[(2, 2, 1), float32],) {
    %400 = @func_4263() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) */;
    %401 = %400.1;
    (%401,)
  };
  %402() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_3046() -> Tensor[(2, 2, 1), float32] {
  %404 = fn () -> Tensor[(2, 2, 1), float32] {
    %403 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %403.0
  };
  %404() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_495(%var_494: Tensor[(4, 10, 12), uint16]) -> (Tensor[(4, 10, 12), uint16], Tensor[(14, 10, ?), float64], Tensor[(140), float32]) {
  %413 = fn (%var_482: Tensor[(4, 10, 12), uint16]) -> (Tensor[(4, 10, 12), uint16], Tensor[(14, 10, ?), float64], Tensor[(140), float32]) {
    %405 = cast(%var_482, dtype="uint16") /* ty=Tensor[(4, 10, 12), uint16] */;
    %406 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(4, 10, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %407 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 10, 12), uint16] */, dtype="uint16") /* ty=Tensor[(4, 10, 12), uint16] */;
    %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %409 = cast(meta[relay.Constant][16] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
    %410 = reshape(%409, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
    %411 = bitwise_xor(%407, %408) /* ty=Tensor[(4, 10, 12), uint16] */;
    %412 = @func_126(%410) /* ty=Tensor[(14, 10, ?), float64] */;
    (%411, %412, meta[relay.Constant][16] /* ty=Tensor[(140), float32] */)
  };
  %413(%var_494) /* ty=(Tensor[(4, 10, 12), uint16], Tensor[(14, 10, ?), float64], Tensor[(140), float32]) */
}

def @func_12105() -> Tensor[(2, 2, ?), int32] {
  %414 = @func_11246() /* ty=(Tensor[(2, 2, ?), int32],) */;
  %414.0
}

def @func_8879() -> Tensor[(2, 2, 1), float32] {
  @func_6192() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_12955() -> (Tensor[(2, 2, ?), bool],) {
  @func_12953() /* ty=(Tensor[(2, 2, ?), bool],) */
}

def @func_3591() -> (Tensor[(2, 2, 1), float32],) {
  %417 = fn () -> (Tensor[(2, 2, 1), float32],) {
    %415 = @func_2899() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %416 = %415.0;
    (%416,)
  };
  %417() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_9783(%var_9780: Tensor[(480), uint16]) -> (Tensor[(5, 9, 5), bool], float32, float32, Tensor[(480), uint16], Tensor[(140, 1), float32]) {
  %418 = @func_8815() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */;
  %419 = @func_8750() /* ty=(float32,) */;
  %420 = cast(%var_9780, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %421 = %419.0;
  %422 = cast(%421, dtype="float32") /* ty=float32 */;
  %423 = cast(meta[relay.Constant][17] /* ty=Tensor[(140, 1), float32] */, dtype="float32") /* ty=Tensor[(140, 1), float32] */;
  %424 = reshape(%420, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %425 = reshape(%422, newshape=[]) /* ty=float32 */;
  %426 = reshape(%423, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %427 = @func_5095(%424, %425, %426) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(864, 2), float32], Tensor[(480), uint16], float32, Tensor[(1728), float32], Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(140), float32], Tensor[(?, 9, 15), int32]) */;
  %428 = %418.1;
  %429 = %427.4;
  (%428, %421, %429, %var_9780, meta[relay.Constant][17] /* ty=Tensor[(140, 1), float32] */)
}

def @func_11444(%var_11442: Tensor[(2, 2, 15), float32]) -> (Tensor[(2, 2, 15), uint64], Tensor[(2, 2, ?), float64]) {
  @func_11441(%var_11442) /* ty=(Tensor[(2, 2, 15), uint64], Tensor[(2, 2, ?), float64]) */
}

def @func_9178() -> (Tensor[(5, 9, 5), bool],) {
  %430 = @func_5145() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %431 = %430.0;
  (%431,)
}

def @func_3800(%var_3798: float32, %var_3799: Tensor[(135), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) {
  %442 = fn (%var_3793: float32, %var_3794: Tensor[(135), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) {
    %432 = @func_2899() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %433 = %432.0;
    %434 = cast(%433, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
    %435 = cast(%var_3793, dtype="float32") /* ty=float32 */;
    %436 = cast(%var_3794, dtype="float32") /* ty=Tensor[(135), float32] */;
    %437 = reshape(%435, newshape=[]) /* ty=float32 */;
    %438 = reshape(%436, newshape=[1, 9, 15]) /* ty=Tensor[(1, 9, 15), float32] */;
    %439 = @func_1819(%437, %438) /* ty=(Tensor[(1, 9, 15), bool], Tensor[(1, 9, 15), bool]) */;
    %440 = acos(%434) /* ty=Tensor[(2, 2, 1), float32] */;
    %441 = %439.0;
    (%440, %441, %var_3793, %var_3794)
  };
  %442(%var_3798, %var_3799) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) */
}

def @func_14592() -> Tensor[(2, 2, 1), float32] {
  %444 = fn () -> Tensor[(2, 2, 1), float32] {
    %443 = @func_7493() /* ty=(Tensor[(40, 12), uint16], Tensor[(2, 2, 1), float32]) */;
    %443.1
  };
  %444() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_13387() -> (float32,) {
  %445 = @func_11344() /* ty=(float32, Tensor[(2, 2, ?), float64]) */;
  %446 = %445.0;
  (%446,)
}

def @func_12107() -> Tensor[(2, 2, ?), int32] {
  @func_12105() /* ty=Tensor[(2, 2, ?), int32] */
}

def @func_13009() -> Tensor[(5, 9, 5), bool] {
  @func_13007() /* ty=Tensor[(5, 9, 5), bool] */
}

def @func_13300() -> Tensor[(120, 4), float32] {
  %450 = fn () -> Tensor[(120, 4), float32] {
    %447 = @func_11707() /* ty=(Tensor[(120, 4), float32], Tensor[(480), uint16], float32) */;
    %448 = %447.0;
    %449 = cast(%448, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
    log2(%449) /* ty=Tensor[(120, 4), float32] */
  };
  %450() /* ty=Tensor[(120, 4), float32] */
}

def @func_10467(%var_10464: Tensor[(12), float32], %var_10465: Tensor[(480), uint16], %var_10466: Tensor[(140), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(864, 2), float32], float32, Tensor[(140), float32]) {
  %466 = fn (%var_10451: Tensor[(12), float32], %var_10452: Tensor[(480), uint16], %var_10456: Tensor[(140), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(864, 2), float32], float32, Tensor[(140), float32]) {
    %451 = cast(%var_10451, dtype="float32") /* ty=Tensor[(12), float32] */;
    %452 = cast(%var_10452, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %453 = reshape(%451, newshape=[12]) /* ty=Tensor[(12), float32] */;
    %454 = reshape(%452, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %455 = @func_6571(%453, %454) /* ty=(Tensor[(2, 2, ?), bool], Tensor[(48), float32], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(1728), float32]) */;
    %456 = %455.3;
    %457 = cast(%456, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %458 = cast(9.90881f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %459 = cast(%var_10456, dtype="float32") /* ty=Tensor[(140), float32] */;
    %460 = reshape(%457, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %461 = reshape(%458, newshape=[]) /* ty=float32 */;
    %462 = reshape(%459, newshape=[140]) /* ty=Tensor[(140), float32] */;
    %463 = @func_5095(%460, %461, %462) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(864, 2), float32], Tensor[(480), uint16], float32, Tensor[(1728), float32], Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(140), float32], Tensor[(?, 9, 15), int32]) */;
    %464 = @func_7426() /* ty=Tensor[(2, 2, 1), float32] */;
    %465 = %463.2;
    (%464, %456, %var_10451, %var_10452, %465, 9.90881f /* ty=float32 */, %var_10456)
  };
  %466(%var_10464, %var_10465, %var_10466) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(864, 2), float32], float32, Tensor[(140), float32]) */
}

def @func_16642() -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(480), uint16]) {
  @func_16640() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(480), uint16]) */
}

def @func_6289(%var_6287: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(96, 18), float32], Tensor[(480), uint16], float32) {
  @func_6286(%var_6287) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(96, 18), float32], Tensor[(480), uint16], float32) */
}

def @func_7563() -> (Tensor[(?, 9, 15), float64],) {
  %468 = fn () -> (Tensor[(?, 9, 15), float64],) {
    %467 = @func_5489() /* ty=Tensor[(?, 9, 15), float64] */;
    (%467,)
  };
  %468() /* ty=(Tensor[(?, 9, 15), float64],) */
}

def @func_10633() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %474 = fn () -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
    %469 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
    %470 = @func_10211() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %471 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
    %472 = %469.1;
    %473 = %470.0;
    (%471, %472, %473)
  };
  %474() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */
}

def @func_3627() -> (Tensor[(2, 2, 1), float32],) {
  @func_3625() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_4792() -> float32 {
  %475 = @func_4161() /* ty=(float32,) */;
  %475.0
}

def @func_8418(%var_8416: int8, %var_8417: Tensor[(13, 14, 10), int8]) -> (Tensor[(13, 14, 10), int8], Tensor[(13, 14, 10), float64], Tensor[(13, 14, 10), float64]) {
  @func_8414(%var_8416, %var_8417) /* ty=(Tensor[(13, 14, 10), int8], Tensor[(13, 14, 10), float64], Tensor[(13, 14, 10), float64]) */
}

def @func_6326(%var_6324: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(14, 6, 4), int32], Tensor[(336), int32]) {
  @func_6323(%var_6324) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(14, 6, 4), int32], Tensor[(336), int32]) */
}

def @func_4265() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) {
  @func_4263() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) */
}

def @func_3675() -> (Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) {
  @func_3673() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) */
}

def @func_14391() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, ?), bool]) {
  %480 = fn () -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, ?), bool]) {
    %476 = @func_2899() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %477 = @func_12953() /* ty=(Tensor[(2, 2, ?), bool],) */;
    %478 = %476.0;
    %479 = %477.0;
    (%478, %479)
  };
  %480() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, ?), bool]) */
}

def @func_15533(%var_15513: Tensor[(1, 12), float32]) -> (Tensor[(1, 12), float32], Tensor[(2, 2, 1728), float32]) {
  %481 = cast(%var_15513, dtype="float32") /* ty=Tensor[(1, 12), float32] */;
  %482 = reshape(%481, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %483 = @func_9583(%482) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(2, 240), uint16], Tensor[(1728), float32]) */;
  %484 = %483.7;
  %485 = @func_11806() /* ty=Tensor[(2, 2, 1), float32] */;
  %486 = cast(%484, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %487 = cast(%485, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
  %488 = add(%486, %487) /* ty=Tensor[(2, 2, 1728), float32] */;
  (%var_15513, %488)
}

def @func_15571(%var_15569: Tensor[(7, 13, 9), uint16], %var_15570: Tensor[(64), float32]) -> (Tensor[(7, 13, 9), uint16], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 16), uint64], Tensor[(64), float32], Tensor[(5, 9, 5), bool]) {
  %501 = fn (%var_15543: Tensor[(7, 13, 9), uint16], %var_15561: Tensor[(64), float32]) -> (Tensor[(7, 13, 9), uint16], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 16), uint64], Tensor[(64), float32], Tensor[(5, 9, 5), bool]) {
    %489 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 13, 9), uint16] */, dtype="uint16") /* ty=Tensor[(7, 13, 9), uint16] */;
    %490 = shape_of(%var_15543, dtype="int32") /* ty=Tensor[(3), int32] */;
    %491 = cast(%var_15543, dtype="uint16") /* ty=Tensor[(7, 13, 9), uint16] */;
    %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %493 = cast(%var_15561, dtype="float32") /* ty=Tensor[(64), float32] */;
    %494 = reshape(%493, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), float32] */;
    %495 = @func_12414(%494) /* ty=(Tensor[(2, 2, 16), uint64],) */;
    %496 = @func_12930() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */;
    %497 = bitwise_or(%491, %492) /* ty=Tensor[(7, 13, 9), uint16] */;
    %498 = @func_7003() /* ty=Tensor[(2, 2, 1), float32] */;
    %499 = %495.0;
    %500 = %496.1;
    (%497, %498, %499, %var_15561, %500)
  };
  %501(%var_15569, %var_15570) /* ty=(Tensor[(7, 13, 9), uint16], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 16), uint64], Tensor[(64), float32], Tensor[(5, 9, 5), bool]) */
}

def @func_8557(%var_8555: Tensor[(3, 16, 7), uint32], %var_8556: Tensor[(12), float32]) -> (Tensor[(3, 16, 7), uint32], Tensor[(1728), float32], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) {
  @func_8553(%var_8555, %var_8556) /* ty=(Tensor[(3, 16, 7), uint32], Tensor[(1728), float32], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) */
}

def @func_3906() -> (Tensor[(5, 9, 5), bool],) {
  %502 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %503 = %502.0;
  (%503,)
}

def @func_14974() -> (Tensor[(2, 2, 1), float32],) {
  %506 = fn () -> (Tensor[(2, 2, 1), float32],) {
    %504 = @func_11116() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %505 = %504.1;
    (%505,)
  };
  %506() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_16982() -> (Tensor[(2, 2, 1), float32],) {
  @func_16980() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_16221() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %507 = @func_7547() /* ty=(Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) */;
  %508 = @func_7547() /* ty=(Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) */;
  %509 = %507.1;
  %510 = %508.1;
  (%509, %510)
}

def @func_13979() -> float32 {
  %511 = @func_9430() /* ty=(float32, float32) */;
  %511.1
}

def @func_5286() -> float32 {
  @func_4792() /* ty=float32 */
}

def @func_7003() -> Tensor[(2, 2, 1), float32] {
  %512 = @func_3673() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) */;
  %512.0
}

def @func_8130() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) {
  %513 = @func_7547() /* ty=(Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) */;
  %514 = @func_7836() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %515 = @func_4029() /* ty=Tensor[(2, 2, 1), float32] */;
  %516 = %513.0;
  %517 = %514.0;
  (%515, %516, %517)
}

def @func_15472(%var_15470: Tensor[(3, 8, 4), int8], %var_15471: Tensor[(3, 8, 4), int8]) -> (Tensor[(3, 8, 4), int8], Tensor[(15, 12, 11), float32], Tensor[(1980), uint8], Tensor[(3, 8, 4), float64]) {
  %531 = fn (%var_15455: Tensor[(3, 8, 4), int8], %var_15456: Tensor[(3, 8, 4), int8]) -> (Tensor[(3, 8, 4), int8], Tensor[(15, 12, 11), float32], Tensor[(1980), uint8], Tensor[(3, 8, 4), float64]) {
    %518 = cast(%var_15456, dtype="int8") /* ty=Tensor[(3, 8, 4), int8] */;
    %519 = shape_of(%var_15455, dtype="int32") /* ty=Tensor[(3), int32] */;
    %520 = cast(%var_15455, dtype="int8") /* ty=Tensor[(3, 8, 4), int8] */;
    %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %522 = cast(meta[relay.Constant][19] /* ty=Tensor[(1980), uint8] */, dtype="uint8") /* ty=Tensor[(1980), uint8] */;
    %523 = cast(meta[relay.Constant][19] /* ty=Tensor[(1980), uint8] */, dtype="uint8") /* ty=Tensor[(1980), uint8] */;
    %524 = reshape(%522, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), uint8] */;
    %525 = reshape(%523, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), uint8] */;
    %526 = @func_10726(%524, %525) /* ty=(Tensor[(15, 12, 11), bool], Tensor[(15, 12, 11), float32]) */;
    %527 = cast(%var_15455, dtype="float64") /* ty=Tensor[(3, 8, 4), float64] */;
    %528 = left_shift(%520, %521) /* ty=Tensor[(3, 8, 4), int8] */;
    %529 = %526.1;
    %530 = atan(%527) /* ty=Tensor[(3, 8, 4), float64] */;
    (%528, %529, meta[relay.Constant][19] /* ty=Tensor[(1980), uint8] */, %530)
  };
  %531(%var_15470, %var_15471) /* ty=(Tensor[(3, 8, 4), int8], Tensor[(15, 12, 11), float32], Tensor[(1980), uint8], Tensor[(3, 8, 4), float64]) */
}

def @func_12839(%var_12837: Tensor[(120, 4), float32]) -> (Tensor[(120, 4), float64], Tensor[(120, 4), float32], Tensor[(120, 4), uint32], Tensor[(2, 2, 1), float32]) {
  @func_12836(%var_12837) /* ty=(Tensor[(120, 4), float64], Tensor[(120, 4), float32], Tensor[(120, 4), uint32], Tensor[(2, 2, 1), float32]) */
}

def @func_6390() -> (Tensor[(5, 9, 5), bool],) {
  %534 = fn () -> (Tensor[(5, 9, 5), bool],) {
    %532 = @func_5145() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
    %533 = %532.0;
    (%533,)
  };
  %534() /* ty=(Tensor[(5, 9, 5), bool],) */
}

def @func_7833() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], float32) {
  %548 = fn () -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], float32) {
    %535 = @func_6484() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %536 = @func_5369() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(4, 10, 12), uint16], Tensor[(120, 4), uint16], Tensor[(2, 2, 1), float32]) */;
    %537 = cast(meta[relay.Constant][20] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %538 = cast(meta[relay.Constant][21] /* ty=Tensor[(96, 18), float32] */, dtype="float32") /* ty=Tensor[(96, 18), float32] */;
    %539 = reshape(%537, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %540 = reshape(%538, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
    %541 = @func_3442(%539, %540) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) */;
    %542 = @func_4161() /* ty=(float32,) */;
    %543 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
    %544 = %535.0;
    %545 = %536.0;
    %546 = %541.3;
    %547 = %542.0;
    (%543, %544, %545, %546, meta[relay.Constant][20] /* ty=Tensor[(480), uint16] */, meta[relay.Constant][21] /* ty=Tensor[(96, 18), float32] */, %547)
  };
  %548() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], float32) */
}

def @func_3673() -> (Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) {
  %549 = cast(-2.35917f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %550 = cast(meta[relay.Constant][22] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %551 = reshape(%549, newshape=[]) /* ty=float32 */;
  %552 = reshape(%550, newshape=[1, 9, 15]) /* ty=Tensor[(1, 9, 15), float32] */;
  %553 = @func_1819(%551, %552) /* ty=(Tensor[(1, 9, 15), bool], Tensor[(1, 9, 15), bool]) */;
  %554 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
  %555 = %553.1;
  (%554, %555, -2.35917f /* ty=float32 */, meta[relay.Constant][22] /* ty=Tensor[(135), float32] */)
}

def @func_2901() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  @func_2899() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */
}

def @func_12299() -> (Tensor[(5, 9, 5), bool],) {
  @func_12297() /* ty=(Tensor[(5, 9, 5), bool],) */
}

def @func_4878(%var_4876: Tensor[(14, 6, 4), int32], %var_4877: Tensor[(14, 6, 4), int32]) -> Tensor[(14, 6, 4), int32] {
  %560 = fn (%var_4853: Tensor[(14, 6, 4), int32], %var_4854: Tensor[(14, 6, 4), int32]) -> Tensor[(14, 6, 4), int32] {
    %556 = cast(%var_4854, dtype="int32") /* ty=Tensor[(14, 6, 4), int32] */;
    %557 = shape_of(%var_4853, dtype="int32") /* ty=Tensor[(3), int32] */;
    %558 = cast(%var_4853, dtype="int32") /* ty=Tensor[(14, 6, 4), int32] */;
    %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    left_shift(%558, %559) /* ty=Tensor[(14, 6, 4), int32] */
  };
  %560(%var_4876, %var_4877) /* ty=Tensor[(14, 6, 4), int32] */
}

def @func_15309() -> float32 {
  @func_15307() /* ty=float32 */
}

def @func_12637() -> Tensor[(2, 2, 1), int16] {
  %566 = fn () -> Tensor[(2, 2, 1), int16] {
    %561 = @func_5457() /* ty=(float32, Tensor[(2, 2, 1), float32]) */;
    %562 = %561.0;
    %563 = @func_6867() /* ty=Tensor[(2, 2, 1), float32] */;
    %564 = cast(%562, dtype="int16") /* ty=int16 */;
    %565 = cast(%563, dtype="int16") /* ty=Tensor[(2, 2, 1), int16] */;
    bitwise_and(%564, %565) /* ty=Tensor[(2, 2, 1), int16] */
  };
  %566() /* ty=Tensor[(2, 2, 1), int16] */
}

def @func_6950() -> Tensor[(5, 9, 5), float64] {
  %567 = @func_6631() /* ty=Tensor[(5, 9, 5), bool] */;
  %568 = cast(%567, dtype="float64") /* ty=Tensor[(5, 9, 5), float64] */;
  sqrt(%568) /* ty=Tensor[(5, 9, 5), float64] */
}

def @func_14887(%var_14842: Tensor[(12), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(12), float32], Tensor[(120, 4), float32], Tensor[(2, 2, ?), int16]) {
  %569 = cast(%var_14842, dtype="float32") /* ty=Tensor[(12), float32] */;
  %570 = reshape(%569, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %571 = @func_13806(%570) /* ty=(Tensor[(2, 2, ?), uint32], Tensor[(5, 9, 5), bool], Tensor[(12), float32], Tensor[(2, 2, 1), float32]) */;
  %572 = @func_11707() /* ty=(Tensor[(120, 4), float32], Tensor[(480), uint16], float32) */;
  %573 = %572.0;
  %574 = cast(%573, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %575 = @func_14591() /* ty=Tensor[(2, 2, 1), float32] */;
  %576 = @func_4603() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %577 = %576.0;
  %578 = cast(%577, dtype="int16") /* ty=Tensor[(2, 2, 1), int16] */;
  %579 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%575, dtype="int16") /* ty=Tensor[(2, 2, 1), int16] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %582 = %571.1;
  %583 = asinh(%574) /* ty=Tensor[(120, 4), float32] */;
  %584 = add(%580, %581) /* ty=Tensor[(2, 2, ?), int16] */;
  (%582, %var_14842, %583, %584)
}

def @func_9141() -> (Tensor[(2, 2, 1), float32],) {
  %586 = fn () -> (Tensor[(2, 2, 1), float32],) {
    %585 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
    (%585,)
  };
  %586() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_11656() -> (Tensor[(2, 2, 1), float32],) {
  @func_11654() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_7914() -> Tensor[(2, 2, ?), bool] {
  %595 = fn () -> Tensor[(2, 2, ?), bool] {
    %587 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %588 = %587.0;
    %589 = @func_4603() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %590 = %589.0;
    %591 = cast(%590, dtype="bool") /* ty=Tensor[(2, 2, 1), bool] */;
    %592 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
    %593 = cast(%588, dtype="bool") /* ty=Tensor[(2, 2, 1), bool] */;
    %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%593, %594) /* ty=Tensor[(2, 2, ?), bool] */
  };
  %595() /* ty=Tensor[(2, 2, ?), bool] */
}

def @func_5458() -> (float32, Tensor[(2, 2, 1), float32]) {
  %600 = fn () -> (float32, Tensor[(2, 2, 1), float32]) {
    %596 = @func_4161() /* ty=(float32,) */;
    %597 = @func_4843() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %598 = %596.0;
    %599 = %597.0;
    (%598, %599)
  };
  %600() /* ty=(float32, Tensor[(2, 2, 1), float32]) */
}

def @func_13580() -> (Tensor[(2, 2, 10), float64],) {
  %601 = @func_8130() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) */;
  %602 = %601.1;
  %603 = cast(%602, dtype="float64") /* ty=Tensor[(2, 2, 10), float64] */;
  %604 = log(%603) /* ty=Tensor[(2, 2, 10), float64] */;
  (%604,)
}

def @func_3371() -> (Tensor[(2, 2, 1), float32],) {
  @func_3369() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_12199(%var_12198: Tensor[(2, 2, 12), float32]) -> (Tensor[(2, 2, 12), int64], Tensor[(2, 2, 1), float32]) {
  %611 = fn (%var_12178: Tensor[(2, 2, 12), float32]) -> (Tensor[(2, 2, 12), int64], Tensor[(2, 2, 1), float32]) {
    %605 = @func_9314() /* ty=Tensor[(2, 2, 1), float32] */;
    %606 = cast(%605, dtype="int64") /* ty=Tensor[(2, 2, 1), int64] */;
    %607 = cast(%var_12178, dtype="int64") /* ty=Tensor[(2, 2, 12), int64] */;
    %608 = @func_4213() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %609 = bitwise_or(%606, %607) /* ty=Tensor[(2, 2, 12), int64] */;
    %610 = %608.0;
    (%609, %610)
  };
  %611(%var_12198) /* ty=(Tensor[(2, 2, 12), int64], Tensor[(2, 2, 1), float32]) */
}

def @func_6765() -> (Tensor[(2, 2, 1), float32],) {
  @func_6763() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_3526(%var_3524: Tensor[(1728), float32], %var_3525: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float64], Tensor[(140), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) {
  %628 = fn (%var_3507: Tensor[(1728), float32], %var_3508: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float64], Tensor[(140), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) {
    %612 = @func_2899() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %613 = %612.0;
    %614 = cast(%613, dtype="float64") /* ty=Tensor[(2, 2, 1), float64] */;
    %615 = cast(%var_3507, dtype="float32") /* ty=Tensor[(1728), float32] */;
    %616 = cast(%var_3508, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %617 = reshape(%615, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float32] */;
    %618 = reshape(%616, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %619 = @func_2912(%617, %618) /* ty=(Tensor[(9, 16, 12), float32], Tensor[(140), float32], Tensor[(480), uint16]) */;
    %620 = cast(%var_3508, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %621 = cast(%var_3507, dtype="float32") /* ty=Tensor[(1728), float32] */;
    %622 = reshape(%620, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %623 = reshape(%621, newshape=[24, 72]) /* ty=Tensor[(24, 72), float32] */;
    %624 = @func_3260(%622, %623) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) */;
    %625 = cos(%614) /* ty=Tensor[(2, 2, 1), float64] */;
    %626 = %619.1;
    %627 = %624.1;
    (%625, %626, %var_3507, %var_3508, %627)
  };
  %628(%var_3524, %var_3525) /* ty=(Tensor[(2, 2, 1), float64], Tensor[(140), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) */
}

def @func_10856() -> Tensor[(5, 9, 5), bool] {
  %630 = fn () -> Tensor[(5, 9, 5), bool] {
    %629 = @func_9492() /* ty=(Tensor[(5, 9, 5), bool], float32) */;
    %629.0
  };
  %630() /* ty=Tensor[(5, 9, 5), bool] */
}

def @func_8281() -> (Tensor[(2, 2, 1), float32], Tensor[(?, 9, 15), float64], float32, Tensor[(2, 2, ?), float64]) {
  %631 = @func_4603() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %632 = @func_7562() /* ty=(Tensor[(?, 9, 15), float64],) */;
  %633 = @func_5324() /* ty=(float32,) */;
  %634 = @func_4518() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, ?), float64]) */;
  %635 = %631.0;
  %636 = %632.0;
  %637 = %633.0;
  %638 = %634.1;
  (%635, %636, %637, %638)
}

def @func_11750() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  %639 = @func_11047() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */;
  %640 = @func_11116() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %641 = %639.1;
  %642 = %640.1;
  (%641, %642)
}

def @func_13684() -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) {
  %647 = fn () -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) {
    %643 = @func_11971() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %644 = @func_6101() /* ty=(Tensor[(5, 9, 5), bool],) */;
    %645 = %643.0;
    %646 = %644.0;
    (%645, %646)
  };
  %647() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) */
}

def @func_15844() -> (Tensor[(2, 2, 1), float32],) {
  %648 = @func_3137() /* ty=(Tensor[(2, 2, ?), int32], Tensor[(2, 2, 1), float32]) */;
  %649 = %648.1;
  (%649,)
}

def @func_4518() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, ?), float64]) {
  %650 = @func_3906() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %651 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %652 = %651.0;
  %653 = cast(%652, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
  %654 = sinh(%653) /* ty=Tensor[(2, 2, 1), float32] */;
  %655 = cast(%652, dtype="bool") /* ty=Tensor[(2, 2, 1), bool] */;
  %656 = shape_of(%654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%654, dtype="bool") /* ty=Tensor[(2, 2, 1), bool] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %659 = greater(%657, %658) /* ty=Tensor[(2, 2, ?), bool] */;
  %660 = cast(%654, dtype="float64") /* ty=Tensor[(2, 2, 1), float64] */;
  %661 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%659, dtype="float64") /* ty=Tensor[(2, 2, ?), float64] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %664 = %650.0;
  %665 = floor_divide(%662, %663) /* ty=Tensor[(2, 2, ?), float64] */;
  (%664, %665)
}

def @func_6194() -> Tensor[(2, 2, 1), float32] {
  @func_6192() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_12508() -> (Tensor[(2, 2, 1), float32],) {
  @func_12506() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_5862(%var_5859: Tensor[(2, 2, 3), float32], %var_5860: Tensor[(480), uint16], %var_5861: Tensor[(1728), float32]) -> (Tensor[(2, 2, 3), uint32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 12), int8], Tensor[(48), float32]) {
  %686 = fn (%var_5776: Tensor[(2, 2, 3), float32], %var_5791: Tensor[(480), uint16], %var_5792: Tensor[(1728), float32]) -> (Tensor[(2, 2, 3), uint32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 12), int8], Tensor[(48), float32]) {
    %666 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %667 = %666.0;
    %668 = cast(%667, dtype="uint32") /* ty=Tensor[(2, 2, 1), uint32] */;
    %669 = cast(%var_5776, dtype="uint32") /* ty=Tensor[(2, 2, 3), uint32] */;
    %670 = cast(%var_5791, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %671 = cast(%var_5792, dtype="float32") /* ty=Tensor[(1728), float32] */;
    %672 = reshape(%670, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %673 = reshape(%671, newshape=[24, 72]) /* ty=Tensor[(24, 72), float32] */;
    %674 = @func_3260(%672, %673) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) */;
    %675 = @func_4518() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, ?), float64]) */;
    %676 = @func_3906() /* ty=(Tensor[(5, 9, 5), bool],) */;
    %677 = cast(%667, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
    %678 = cast(meta[relay.Constant][23] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %679 = reshape(%678, newshape=[2, 2, 12]) /* ty=Tensor[(2, 2, 12), float32] */;
    %680 = right_shift(%668, %669) /* ty=Tensor[(2, 2, 3), uint32] */;
    %681 = %674.3;
    %682 = %675.0;
    %683 = %676.0;
    %684 = atanh(%677) /* ty=Tensor[(2, 2, 1), float32] */;
    %685 = @func_4936(%679) /* ty=Tensor[(2, 2, 12), int8] */;
    (%680, %681, %var_5791, %var_5792, %682, %683, %684, %685, meta[relay.Constant][23] /* ty=Tensor[(48), float32] */)
  };
  %686(%var_5859, %var_5860, %var_5861) /* ty=(Tensor[(2, 2, 3), uint32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 12), int8], Tensor[(48), float32]) */
}

def @func_6136() -> Tensor[(5, 9, 5), bool] {
  @func_6134() /* ty=Tensor[(5, 9, 5), bool] */
}

def @func_7427() -> Tensor[(2, 2, 1), float32] {
  %687 = fn () -> Tensor[(2, 2, 1), float32] {
    @func_4029() /* ty=Tensor[(2, 2, 1), float32] */
  };
  %687() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_6323(%var_6311: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(14, 6, 4), int32], Tensor[(336), int32]) {
  %688 = cast(%var_6311, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %689 = reshape(%688, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %690 = @func_6286(%689) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(96, 18), float32], Tensor[(480), uint16], float32) */;
  %691 = cast(meta[relay.Constant][24] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %692 = cast(meta[relay.Constant][24] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %693 = reshape(%691, newshape=[14, 6, 4]) /* ty=Tensor[(14, 6, 4), int32] */;
  %694 = reshape(%692, newshape=[14, 6, 4]) /* ty=Tensor[(14, 6, 4), int32] */;
  %695 = @func_6192() /* ty=Tensor[(2, 2, 1), float32] */;
  %696 = %690.4;
  %697 = @func_4875(%693, %694) /* ty=Tensor[(14, 6, 4), int32] */;
  (%695, %696, %var_6311, %697, meta[relay.Constant][24] /* ty=Tensor[(336), int32] */)
}

def @func_15307() -> float32 {
  %698 = @func_7090() /* ty=(float32,) */;
  %698.0
}

def @func_8553(%var_8527: Tensor[(3, 16, 7), uint32], %var_8540: Tensor[(12), float32]) -> (Tensor[(3, 16, 7), uint32], Tensor[(1728), float32], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) {
  %699 = cast(%var_8527, dtype="uint32") /* ty=Tensor[(3, 16, 7), uint32] */;
  %700 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(3, 16, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 16, 7), uint32] */, dtype="uint32") /* ty=Tensor[(3, 16, 7), uint32] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %703 = cast(%var_8540, dtype="float32") /* ty=Tensor[(12), float32] */;
  %704 = cast(meta[relay.Constant][26] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %705 = reshape(%703, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %706 = reshape(%704, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %707 = @func_6571(%705, %706) /* ty=(Tensor[(2, 2, ?), bool], Tensor[(48), float32], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(1728), float32]) */;
  %708 = @func_7197() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %709 = bitwise_and(%701, %702) /* ty=Tensor[(3, 16, 7), uint32] */;
  %710 = %707.4;
  %711 = %708.0;
  (%709, %710, %var_8540, meta[relay.Constant][26] /* ty=Tensor[(480), uint16] */, %711)
}

def @func_11971() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %712 = @func_5515() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %713 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %714 = %712.0;
  %715 = %713.0;
  (%714, %715)
}

def @func_16081() -> (Tensor[(2, 2, ?), float64],) {
  %724 = fn () -> (Tensor[(2, 2, ?), float64],) {
    %716 = @func_10859() /* ty=Tensor[(2, 2, 1), float32] */;
    %717 = @func_14660() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %718 = %717.2;
    %719 = cast(%718, dtype="float64") /* ty=Tensor[(2, 2, 1), float64] */;
    %720 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
    %721 = cast(%716, dtype="float64") /* ty=Tensor[(2, 2, 1), float64] */;
    %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %723 = floor_mod(%721, %722) /* ty=Tensor[(2, 2, ?), float64] */;
    (%723,)
  };
  %724() /* ty=(Tensor[(2, 2, ?), float64],) */
}

def @func_16107() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  %734 = fn () -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
    %725 = @func_7985() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %726 = @func_10632() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %727 = @func_4263() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) */;
    %728 = @func_12297() /* ty=(Tensor[(5, 9, 5), bool],) */;
    %729 = @func_11806() /* ty=Tensor[(2, 2, 1), float32] */;
    %730 = %725.0;
    %731 = %726.2;
    %732 = %727.0;
    %733 = %728.0;
    (%729, %730, %731, %732, %733)
  };
  %734() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */
}

def @func_6867() -> Tensor[(2, 2, 1), float32] {
  %735 = @func_3369() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %735.0
}

def @func_16132(%var_16129: Tensor[(15, 12, 1), int8], %var_16130: Tensor[(15, 12, 13), int8], %var_16131: Tensor[(15, 12, 13), int8]) -> (Tensor[(15, 12, 13), int8], Tensor[(15, 12, 13), bool], float32) {
  %746 = fn (%var_16110: Tensor[(15, 12, 1), int8], %var_16111: Tensor[(15, 12, 13), int8], %var_16122: Tensor[(15, 12, 13), int8]) -> (Tensor[(15, 12, 13), int8], Tensor[(15, 12, 13), bool], float32) {
    %736 = cast(%var_16110, dtype="int8") /* ty=Tensor[(15, 12, 1), int8] */;
    %737 = cast(%var_16111, dtype="int8") /* ty=Tensor[(15, 12, 13), int8] */;
    %738 = cast(%var_16122, dtype="bool") /* ty=Tensor[(15, 12, 13), bool] */;
    %739 = shape_of(%var_16111, dtype="int32") /* ty=Tensor[(3), int32] */;
    %740 = cast(%var_16111, dtype="bool") /* ty=Tensor[(15, 12, 13), bool] */;
    %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %742 = @func_7153() /* ty=(float32,) */;
    %743 = subtract(%736, %737) /* ty=Tensor[(15, 12, 13), int8] */;
    %744 = logical_or(%740, %741) /* ty=Tensor[(15, 12, 13), bool] */;
    %745 = %742.0;
    (%743, %744, %745)
  };
  %746(%var_16129, %var_16130, %var_16131) /* ty=(Tensor[(15, 12, 13), int8], Tensor[(15, 12, 13), bool], float32) */
}

def @func_16783() -> (float32, Tensor[(5, 9, 5), bool]) {
  %750 = fn () -> (float32, Tensor[(5, 9, 5), bool]) {
    %747 = @func_7153() /* ty=(float32,) */;
    %748 = %747.0;
    %749 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
    (%748, %749)
  };
  %750() /* ty=(float32, Tensor[(5, 9, 5), bool]) */
}

def @func_3445(%var_3443: Tensor[(480), uint16], %var_3444: Tensor[(1728), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) {
  %758 = fn (%var_3432: Tensor[(480), uint16], %var_3433: Tensor[(1728), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) {
    %751 = cast(%var_3432, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %752 = cast(%var_3433, dtype="float32") /* ty=Tensor[(1728), float32] */;
    %753 = reshape(%751, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %754 = reshape(%752, newshape=[24, 72]) /* ty=Tensor[(24, 72), float32] */;
    %755 = @func_3260(%753, %754) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) */;
    %756 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
    %757 = %755.1;
    (%756, %757, %var_3432, %var_3433)
  };
  %758(%var_3443, %var_3444) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) */
}

def @func_5515() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %759 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %760 = @func_4213() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %761 = %759.0;
  %762 = %760.0;
  (%761, %762)
}

def @func_15805(%var_15804: Tensor[(16), float32]) -> (Tensor[(8, 16, 9), float64], Tensor[(2, 2, 1), float32], Tensor[(16), float32], Tensor[(2, 2, 1), float32]) {
  %772 = fn (%var_15791: Tensor[(16), float32]) -> (Tensor[(8, 16, 9), float64], Tensor[(2, 2, 1), float32], Tensor[(16), float32], Tensor[(2, 2, 1), float32]) {
    %763 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 16, 9), float64] */, dtype="float64") /* ty=Tensor[(8, 16, 9), float64] */;
    %764 = asin(%763) /* ty=Tensor[(8, 16, 9), float64] */;
    %765 = cast(%764, dtype="float64") /* ty=Tensor[(8, 16, 9), float64] */;
    %766 = cast(%var_15791, dtype="float32") /* ty=Tensor[(16), float32] */;
    %767 = reshape(%766, newshape=[16]) /* ty=Tensor[(16), float32] */;
    %768 = @func_11944(%767) /* ty=(Tensor[(?, 9, 15), float64], Tensor[(5, 9, 5), bool], Tensor[(10, 3, 8), float64], Tensor[(4, 60), float64], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 4), uint8], Tensor[(16), float32]) */;
    %769 = sinh(%765) /* ty=Tensor[(8, 16, 9), float64] */;
    %770 = %768.4;
    %771 = @func_10859() /* ty=Tensor[(2, 2, 1), float32] */;
    (%769, %770, %var_15791, %771)
  };
  %772(%var_15804) /* ty=(Tensor[(8, 16, 9), float64], Tensor[(2, 2, 1), float32], Tensor[(16), float32], Tensor[(2, 2, 1), float32]) */
}

def @func_6486() -> (Tensor[(2, 2, 1), float32],) {
  @func_6484() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_4263() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) {
  %773 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %774 = @func_3625() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %775 = @func_4161() /* ty=(float32,) */;
  %776 = %773.0;
  %777 = %774.0;
  %778 = %775.0;
  (%776, %777, %778)
}

def @func_14536(%var_14528: Tensor[(336), int32]) -> (float32, Tensor[(2, 2, 1), float32], Tensor[(14, 6, 4), int32], Tensor[(336), int32]) {
  %779 = cast(%var_14528, dtype="int32") /* ty=Tensor[(336), int32] */;
  %780 = cast(%var_14528, dtype="int32") /* ty=Tensor[(336), int32] */;
  %781 = reshape(%779, newshape=[14, 6, 4]) /* ty=Tensor[(14, 6, 4), int32] */;
  %782 = reshape(%780, newshape=[14, 6, 4]) /* ty=Tensor[(14, 6, 4), int32] */;
  %783 = @func_5286() /* ty=float32 */;
  %784 = @func_7003() /* ty=Tensor[(2, 2, 1), float32] */;
  %785 = @func_4875(%781, %782) /* ty=Tensor[(14, 6, 4), int32] */;
  (%783, %784, %785, %var_14528)
}

def @func_14069(%var_14062: Tensor[(1, 13, 5), uint8]) -> (Tensor[(4, 13, 5), bool],) {
  %786 = cast(%var_14062, dtype="bool") /* ty=Tensor[(1, 13, 5), bool] */;
  %787 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 13, 5), uint8] */, dtype="bool") /* ty=Tensor[(4, 13, 5), bool] */;
  %788 = less_equal(%786, %787) /* ty=Tensor[(4, 13, 5), bool] */;
  (%788,)
}

def @func_4382(%var_4351: Tensor[(480), uint16]) -> (Tensor[(135), float32], Tensor[(5, 9, 5), float64], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], Tensor[(480), uint16]) {
  %789 = @func_3673() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) */;
  %790 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %791 = %790.0;
  %792 = cast(%791, dtype="float64") /* ty=Tensor[(5, 9, 5), float64] */;
  %793 = cast(%var_4351, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %794 = cast(meta[relay.Constant][29] /* ty=Tensor[(96, 18), float32] */, dtype="float32") /* ty=Tensor[(96, 18), float32] */;
  %795 = reshape(%793, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %796 = reshape(%794, newshape=[24, 72]) /* ty=Tensor[(24, 72), float32] */;
  %797 = @func_3260(%795, %796) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) */;
  %798 = cast(meta[relay.Constant][29] /* ty=Tensor[(96, 18), float32] */, dtype="float32") /* ty=Tensor[(96, 18), float32] */;
  %799 = cast(meta[relay.Constant][29] /* ty=Tensor[(96, 18), float32] */, dtype="float32") /* ty=Tensor[(96, 18), float32] */;
  %800 = cast(%var_4351, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %801 = reshape(%799, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %802 = reshape(%800, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %803 = @func_3523(%801, %802) /* ty=(Tensor[(2, 2, 1), float64], Tensor[(140), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) */;
  %804 = %789.3;
  %805 = acosh(%792) /* ty=Tensor[(5, 9, 5), float64] */;
  %806 = %797.2;
  %807 = cosh(%798) /* ty=Tensor[(96, 18), float32] */;
  %808 = %803.3;
  (%804, %805, %806, %var_4351, %807, %808)
}

def @func_5721(%var_5718: Tensor[(7, 14, 9), float64], %var_5719: Tensor[(480), uint16], %var_5720: float32) -> (Tensor[(7, 14, 9), float64], Tensor[(5, 9, 5), bool], float32, Tensor[(140), float32], Tensor[(14, 10, ?), float64], Tensor[(?, 9, 15), float64], Tensor[(2, 2, 480), float64], Tensor[(135), float32], Tensor[(5, 9, 5), bool]) {
  %835 = fn (%var_5623: Tensor[(7, 14, 9), float64], %var_5635: Tensor[(480), uint16], %var_5636: float32) -> (Tensor[(7, 14, 9), float64], Tensor[(5, 9, 5), bool], float32, Tensor[(140), float32], Tensor[(14, 10, ?), float64], Tensor[(?, 9, 15), float64], Tensor[(2, 2, 480), float64], Tensor[(135), float32], Tensor[(5, 9, 5), bool]) {
    %809 = cast(%var_5623, dtype="float64") /* ty=Tensor[(7, 14, 9), float64] */;
    %810 = cast(%var_5635, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %811 = cast(%var_5636, dtype="float32") /* ty=float32 */;
    %812 = cast(meta[relay.Constant][30] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
    %813 = reshape(%810, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %814 = reshape(%811, newshape=[]) /* ty=float32 */;
    %815 = reshape(%812, newshape=[140]) /* ty=Tensor[(140), float32] */;
    %816 = @func_5095(%813, %814, %815) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(864, 2), float32], Tensor[(480), uint16], float32, Tensor[(1728), float32], Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(140), float32], Tensor[(?, 9, 15), int32]) */;
    %817 = @func_5620() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(40, 12), uint16]) */;
    %818 = @func_4213() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %819 = %818.0;
    %820 = cast(%var_5635, dtype="float64") /* ty=Tensor[(480), float64] */;
    %821 = cast(%819, dtype="float64") /* ty=Tensor[(2, 2, 1), float64] */;
    %822 = cast(%var_5636, dtype="float32") /* ty=float32 */;
    %823 = @func_5489() /* ty=Tensor[(?, 9, 15), float64] */;
    %824 = cast(%823, dtype="float32") /* ty=Tensor[(?, 9, 15), float32] */;
    %825 = reshape(%822, newshape=[]) /* ty=float32 */;
    %826 = reshape(%824, newshape=[135]) /* ty=Tensor[(135), float32] */;
    %827 = @func_4545(%825, %826) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(135), float32], Tensor[(2, 2, 1), float32]) */;
    %828 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
    %829 = acos(%809) /* ty=Tensor[(7, 14, 9), float64] */;
    %830 = %816.0;
    %831 = %817.1;
    %832 = floor_divide(%820, %821) /* ty=Tensor[(2, 2, 480), float64] */;
    %833 = %827.3;
    %834 = %828.0;
    (%829, %830, %var_5636, meta[relay.Constant][30] /* ty=Tensor[(140), float32] */, %831, %823, %832, %833, %834)
  };
  %835(%var_5718, %var_5719, %var_5720) /* ty=(Tensor[(7, 14, 9), float64], Tensor[(5, 9, 5), bool], float32, Tensor[(140), float32], Tensor[(14, 10, ?), float64], Tensor[(?, 9, 15), float64], Tensor[(2, 2, 480), float64], Tensor[(135), float32], Tensor[(5, 9, 5), bool]) */
}

def @func_12583(%var_12581: Tensor[(8), float32], %var_12582: Tensor[(3, 45), float32]) -> (Tensor[(480), uint16], float32, Tensor[(8), float32], float32, Tensor[(2, 2, 1), float32], Tensor[(3, 45), float32]) {
  @func_12579(%var_12581, %var_12582) /* ty=(Tensor[(480), uint16], float32, Tensor[(8), float32], float32, Tensor[(2, 2, 1), float32], Tensor[(3, 45), float32]) */
}

def @func_13483(%var_13441: Tensor[(2, 2, 1), bool], %var_13460: float32, %var_13461: Tensor[(135), float32]) -> (Tensor[(2, 2, ?), bool], Tensor[(2, 2, ?), float64], Tensor[(2, 2, ?), int32], Tensor[(5, 9, 5), bool], float32, Tensor[(135), float32]) {
  %836 = @func_13425() /* ty=Tensor[(2, 2, ?), bool] */;
  %837 = cast(%var_13441, dtype="bool") /* ty=Tensor[(2, 2, 1), bool] */;
  %838 = shape_of(%836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(%836, dtype="bool") /* ty=Tensor[(2, 2, ?), bool] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %841 = cast(%836, dtype="float64") /* ty=Tensor[(2, 2, ?), float64] */;
  %842 = cast(%var_13460, dtype="float32") /* ty=float32 */;
  %843 = cast(%var_13461, dtype="float32") /* ty=Tensor[(135), float32] */;
  %844 = reshape(%842, newshape=[]) /* ty=float32 */;
  %845 = reshape(%843, newshape=[3, 45]) /* ty=Tensor[(3, 45), float32] */;
  %846 = @func_9076(%844, %845) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(3, 45), int16], Tensor[(2, 2, ?), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */;
  %847 = logical_and(%839, %840) /* ty=Tensor[(2, 2, ?), bool] */;
  %848 = log(%841) /* ty=Tensor[(2, 2, ?), float64] */;
  %849 = @func_12105() /* ty=Tensor[(2, 2, ?), int32] */;
  %850 = %846.0;
  (%847, %848, %849, %850, %var_13460, %var_13461)
}

def @func_128(%var_127: Tensor[(14, 10, 1), float32]) -> Tensor[(14, 10, ?), float64] {
  %864 = fn (%var_65: Tensor[(14, 10, 1), float32]) -> Tensor[(14, 10, ?), float64] {
    %851 = cast(%var_65, dtype="float32") /* ty=Tensor[(14, 10, 1), float32] */;
    %852 = atan(%851) /* ty=Tensor[(14, 10, 1), float32] */;
    %853 = cast(%852, dtype="float32") /* ty=Tensor[(14, 10, 1), float32] */;
    %854 = shape_of(%var_65, dtype="int32") /* ty=Tensor[(3), int32] */;
    %855 = cast(%var_65, dtype="float32") /* ty=Tensor[(14, 10, 1), float32] */;
    %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %857 = minimum(%855, %856) /* ty=Tensor[(14, 10, ?), float32] */;
    %858 = cast(%var_65, dtype="int8") /* ty=Tensor[(14, 10, 1), int8] */;
    %859 = shape_of(%857, dtype="int32") /* ty=Tensor[(3), int32] */;
    %860 = cast(%857, dtype="int8") /* ty=Tensor[(14, 10, ?), int8] */;
    %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %862 = right_shift(%860, %861) /* ty=Tensor[(14, 10, ?), int8] */;
    %863 = cast(%862, dtype="float64") /* ty=Tensor[(14, 10, ?), float64] */;
    asinh(%863) /* ty=Tensor[(14, 10, ?), float64] */
  };
  %864(%var_127) /* ty=Tensor[(14, 10, ?), float64] */
}

def @func_13653() -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  %865 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
  %866 = @func_6134() /* ty=Tensor[(5, 9, 5), bool] */;
  %867 = @func_10855() /* ty=Tensor[(5, 9, 5), bool] */;
  (%865, %866, %867)
}

def @func_12893() -> Tensor[(2, 2, 1), float32] {
  %869 = fn () -> Tensor[(2, 2, 1), float32] {
    %868 = @func_11789() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
    %868.1
  };
  %869() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_15193() -> Tensor[(2, 2, 1), float32] {
  %871 = fn () -> Tensor[(2, 2, 1), float32] {
    %870 = @func_12506() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %870.0
  };
  %871() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_7121() -> Tensor[(5, 9, 5), float64] {
  @func_7119() /* ty=Tensor[(5, 9, 5), float64] */
}

def @func_13733(%var_13731: Tensor[(12, 4), float32]) -> (Tensor[(2, 2, ?), int32], Tensor[(2, 2, 1), float32], Tensor[(12, 4), float32]) {
  @func_13730(%var_13731) /* ty=(Tensor[(2, 2, ?), int32], Tensor[(2, 2, 1), float32], Tensor[(12, 4), float32]) */
}

def @func_3347() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  %872 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %873 = @func_3092() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %874 = %872.0;
  %875 = %873.0;
  (%874, %875)
}

def @func_3964(%var_3962: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) {
  @func_3961(%var_3962) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) */
}

def @func_8373(%var_8320: Tensor[(48), float32], %var_8362: Tensor[(1728), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 12), int8], Tensor[(48), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(480, 1), uint16], Tensor[(1728), float32]) {
  %876 = @func_6736() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) */;
  %877 = cast(%var_8320, dtype="float32") /* ty=Tensor[(48), float32] */;
  %878 = reshape(%877, newshape=[2, 2, 12]) /* ty=Tensor[(2, 2, 12), float32] */;
  %879 = @func_3906() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %880 = @func_6389() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %881 = cast(meta[relay.Constant][31] /* ty=Tensor[(480, 1), uint16] */, dtype="uint16") /* ty=Tensor[(480, 1), uint16] */;
  %882 = cast(%var_8362, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %883 = reshape(%881, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %884 = reshape(%882, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %885 = @func_3442(%883, %884) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) */;
  %886 = %876.1;
  %887 = @func_4936(%878) /* ty=Tensor[(2, 2, 12), int8] */;
  %888 = %879.0;
  %889 = %880.0;
  %890 = %885.0;
  (%886, %887, %var_8320, %888, %889, %890, meta[relay.Constant][31] /* ty=Tensor[(480, 1), uint16] */, %var_8362)
}

def @func_16980() -> (Tensor[(2, 2, 1), float32],) {
  %891 = @func_15431() /* ty=Tensor[(2, 2, 1), float32] */;
  (%891,)
}

def @func_3138() -> (Tensor[(2, 2, ?), int32], Tensor[(2, 2, 1), float32]) {
  %906 = fn () -> (Tensor[(2, 2, ?), int32], Tensor[(2, 2, 1), float32]) {
    %892 = @func_2921() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %893 = %892.0;
    %894 = cast(%893, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
    %895 = atan(%894) /* ty=Tensor[(2, 2, 1), float32] */;
    %896 = cast(%895, dtype="float64") /* ty=Tensor[(2, 2, 1), float64] */;
    %897 = erf(%896) /* ty=Tensor[(2, 2, 1), float64] */;
    %898 = cast(%895, dtype="float64") /* ty=Tensor[(2, 2, 1), float64] */;
    %899 = asinh(%898) /* ty=Tensor[(2, 2, 1), float64] */;
    %900 = cast(%899, dtype="int32") /* ty=Tensor[(2, 2, 1), int32] */;
    %901 = shape_of(%897, dtype="int32") /* ty=Tensor[(3), int32] */;
    %902 = cast(%897, dtype="int32") /* ty=Tensor[(2, 2, 1), int32] */;
    %903 = dyn.reshape(%900, %901, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %904 = subtract(%902, %903) /* ty=Tensor[(2, 2, ?), int32] */;
    %905 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
    (%904, %905)
  };
  %906() /* ty=(Tensor[(2, 2, ?), int32], Tensor[(2, 2, 1), float32]) */
}

def @func_11035() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 4), uint8], Tensor[(16), float32], Tensor[(5, 9, 5), bool], float32, Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  %918 = fn () -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 4), uint8], Tensor[(16), float32], Tensor[(5, 9, 5), bool], float32, Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
    %907 = cast(meta[relay.Constant][32] /* ty=Tensor[(16), float32] */, dtype="float32") /* ty=Tensor[(16), float32] */;
    %908 = reshape(%907, newshape=[2, 2, 4]) /* ty=Tensor[(2, 2, 4), float32] */;
    %909 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
    %910 = @func_4161() /* ty=(float32,) */;
    %911 = @func_8916() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %912 = @func_10859() /* ty=Tensor[(2, 2, 1), float32] */;
    %913 = @func_8701(%908) /* ty=Tensor[(2, 2, 4), uint8] */;
    %914 = %909.0;
    %915 = %910.0;
    %916 = @func_6812() /* ty=Tensor[(5, 9, 5), bool] */;
    %917 = %911.0;
    (%912, %913, meta[relay.Constant][32] /* ty=Tensor[(16), float32] */, %914, %915, %916, %917)
  };
  %918() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 4), uint8], Tensor[(16), float32], Tensor[(5, 9, 5), bool], float32, Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */
}

def @func_13912(%var_13910: float32) -> (Tensor[(?, 9, 15), float64], Tensor[(5, 9, 5), bool], Tensor[(1, 9, 15), bool], float32, Tensor[(2, 2, ?), bool], Tensor[(15, 8, 11), bool], Tensor[(1320), bool]) {
  @func_13909(%var_13910) /* ty=(Tensor[(?, 9, 15), float64], Tensor[(5, 9, 5), bool], Tensor[(1, 9, 15), bool], float32, Tensor[(2, 2, ?), bool], Tensor[(15, 8, 11), bool], Tensor[(1320), bool]) */
}

def @func_6812() -> Tensor[(5, 9, 5), bool] {
  @func_6631() /* ty=Tensor[(5, 9, 5), bool] */
}

def @func_15995(%var_15994: Tensor[(13, 9, 2), float64]) -> (Tensor[(13, 9, 2), float64], Tensor[(2, 2, 1), float32]) {
  %925 = fn (%var_15963: Tensor[(13, 9, 2), float64]) -> (Tensor[(13, 9, 2), float64], Tensor[(2, 2, 1), float32]) {
    %919 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 9, 2), float64] */, dtype="float64") /* ty=Tensor[(13, 9, 2), float64] */;
    %920 = shape_of(%var_15963, dtype="int32") /* ty=Tensor[(3), int32] */;
    %921 = cast(%var_15963, dtype="float64") /* ty=Tensor[(13, 9, 2), float64] */;
    %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %923 = divide(%921, %922) /* ty=Tensor[(13, 9, 2), float64] */;
    %924 = @func_11581() /* ty=Tensor[(2, 2, 1), float32] */;
    (%923, %924)
  };
  %925(%var_15994) /* ty=(Tensor[(13, 9, 2), float64], Tensor[(2, 2, 1), float32]) */
}

def @func_11117() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %929 = fn () -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
    %926 = @func_6484() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %927 = %926.0;
    %928 = @func_10859() /* ty=Tensor[(2, 2, 1), float32] */;
    (%927, %928)
  };
  %929() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */
}

def @func_9786(%var_9784: Tensor[(480), uint16]) -> (Tensor[(5, 9, 5), bool], float32, float32, Tensor[(480), uint16], Tensor[(140, 1), float32]) {
  @func_9783(%var_9784) /* ty=(Tensor[(5, 9, 5), bool], float32, float32, Tensor[(480), uint16], Tensor[(140, 1), float32]) */
}

def @func_12249() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, ?), bool], Tensor[(2, 2, 1), float32]) {
  @func_12247() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, ?), bool], Tensor[(2, 2, 1), float32]) */
}

def @func_3625() -> (Tensor[(2, 2, 1), float32],) {
  %930 = @func_2921() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %931 = %930.0;
  (%931,)
}

def @func_13655() -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  @func_13653() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */
}

def @func_13909(%var_13884: float32) -> (Tensor[(?, 9, 15), float64], Tensor[(5, 9, 5), bool], Tensor[(1, 9, 15), bool], float32, Tensor[(2, 2, ?), bool], Tensor[(15, 8, 11), bool], Tensor[(1320), bool]) {
  %932 = @func_8281() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(?, 9, 15), float64], float32, Tensor[(2, 2, ?), float64]) */;
  %933 = @func_11750() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %934 = cast(%var_13884, dtype="float32") /* ty=float32 */;
  %935 = %932.1;
  %936 = cast(%935, dtype="float32") /* ty=Tensor[(?, 9, 15), float32] */;
  %937 = reshape(%934, newshape=[]) /* ty=float32 */;
  %938 = reshape(%936, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %939 = @func_3797(%937, %938) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) */;
  %940 = cast(meta[relay.Constant][34] /* ty=Tensor[(1320), bool] */, dtype="bool") /* ty=Tensor[(1320), bool] */;
  %941 = cast(meta[relay.Constant][34] /* ty=Tensor[(1320), bool] */, dtype="bool") /* ty=Tensor[(1320), bool] */;
  %942 = reshape(%940, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), bool] */;
  %943 = reshape(%941, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), bool] */;
  %944 = %933.0;
  %945 = %939.1;
  %946 = @func_7913() /* ty=Tensor[(2, 2, ?), bool] */;
  %947 = @func_6414(%942, %943) /* ty=Tensor[(15, 8, 11), bool] */;
  (%935, %944, %945, %var_13884, %946, %947, meta[relay.Constant][34] /* ty=Tensor[(1320), bool] */)
}

def @func_14201() -> (Tensor[(2, 2, ?), int8],) {
  %948 = @func_11344() /* ty=(float32, Tensor[(2, 2, ?), float64]) */;
  %949 = %948.1;
  %950 = @func_4093() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %951 = %950.3;
  %952 = cast(%951, dtype="int8") /* ty=Tensor[(2, 2, 1), int8] */;
  %953 = shape_of(%949, dtype="int32") /* ty=Tensor[(3), int32] */;
  %954 = cast(%949, dtype="int8") /* ty=Tensor[(2, 2, ?), int8] */;
  %955 = dyn.reshape(%952, %953, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %956 = bitwise_or(%954, %955) /* ty=Tensor[(2, 2, ?), int8] */;
  (%956,)
}

def @func_6952() -> Tensor[(5, 9, 5), float64] {
  @func_6950() /* ty=Tensor[(5, 9, 5), float64] */
}

def @func_8377(%var_8375: Tensor[(48), float32], %var_8376: Tensor[(1728), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 12), int8], Tensor[(48), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(480, 1), uint16], Tensor[(1728), float32]) {
  @func_8373(%var_8375, %var_8376) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 12), int8], Tensor[(48), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(480, 1), uint16], Tensor[(1728), float32]) */
}

def @func_15415(%var_15413: Tensor[(2, 2, 4), float32]) -> Tensor[(2, 2, 4), int32] {
  @func_15412(%var_15413) /* ty=Tensor[(2, 2, 4), int32] */
}

def @func_6575(%var_6573: Tensor[(12), float32], %var_6574: Tensor[(480), uint16]) -> (Tensor[(2, 2, ?), bool], Tensor[(48), float32], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(1728), float32]) {
  @func_6571(%var_6573, %var_6574) /* ty=(Tensor[(2, 2, ?), bool], Tensor[(48), float32], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(1728), float32]) */
}

def @func_8640(%var_8639: Tensor[(10, 3, 8), float64]) -> Tensor[(10, 3, 8), float64] {
  %958 = fn (%var_8625: Tensor[(10, 3, 8), float64]) -> Tensor[(10, 3, 8), float64] {
    %957 = cast(%var_8625, dtype="float64") /* ty=Tensor[(10, 3, 8), float64] */;
    tan(%957) /* ty=Tensor[(10, 3, 8), float64] */
  };
  %958(%var_8639) /* ty=Tensor[(10, 3, 8), float64] */
}

def @func_9079(%var_9077: float32, %var_9078: Tensor[(3, 45), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(3, 45), int16], Tensor[(2, 2, ?), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  %977 = fn (%var_9005: float32, %var_9006: Tensor[(3, 45), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(3, 45), int16], Tensor[(2, 2, ?), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
    %959 = @func_6101() /* ty=(Tensor[(5, 9, 5), bool],) */;
    %960 = cast(%var_9005, dtype="float32") /* ty=float32 */;
    %961 = cast(%var_9006, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
    %962 = reshape(%960, newshape=[]) /* ty=float32 */;
    %963 = reshape(%961, newshape=[135]) /* ty=Tensor[(135), float32] */;
    %964 = @func_4545(%962, %963) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(135), float32], Tensor[(2, 2, 1), float32]) */;
    %965 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 45), float32] */, dtype="int16") /* ty=Tensor[(3, 45), int16] */;
    %966 = shape_of(%var_9006, dtype="int32") /* ty=Tensor[(2), int32] */;
    %967 = cast(%var_9006, dtype="int16") /* ty=Tensor[(3, 45), int16] */;
    %968 = dyn.reshape(%965, %966, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %969 = @func_8490() /* ty=(Tensor[(5, 9, 5), bool],) */;
    %970 = @func_8216() /* ty=(Tensor[(120, 4), uint16], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32]) */;
    %971 = %959.0;
    %972 = %964.1;
    %973 = bitwise_xor(%967, %968) /* ty=Tensor[(3, 45), int16] */;
    %974 = @func_7913() /* ty=Tensor[(2, 2, ?), bool] */;
    %975 = %969.0;
    %976 = %970.3;
    (%971, %972, %var_9005, %973, %974, %975, %976)
  };
  %977(%var_9077, %var_9078) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(3, 45), int16], Tensor[(2, 2, ?), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */
}

def @func_12983() -> (Tensor[(2, 2, 1), float32],) {
  %978 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %979 = %978.0;
  (%979,)
}

def @func_4819() -> (Tensor[(2, 2, 1), float32],) {
  @func_4817() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_3070() -> (Tensor[(5, 9, 5), bool],) {
  %985 = fn () -> (Tensor[(5, 9, 5), bool],) {
    %980 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 9, 5), uint8] */, dtype="bool") /* ty=Tensor[(5, 9, 5), bool] */;
    %981 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(5, 9, 5), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %982 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 9, 5), uint8] */, dtype="bool") /* ty=Tensor[(5, 9, 5), bool] */;
    %983 = dyn.reshape(%980, %981, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %984 = greater(%982, %983) /* ty=Tensor[(5, 9, 5), bool] */;
    (%984,)
  };
  %985() /* ty=(Tensor[(5, 9, 5), bool],) */
}

def @func_6869() -> Tensor[(2, 2, 1), float32] {
  @func_6867() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_4844() -> (Tensor[(2, 2, 1), float32],) {
  %988 = fn () -> (Tensor[(2, 2, 1), float32],) {
    %986 = @func_3625() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %987 = %986.0;
    (%987,)
  };
  %988() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_7670(%var_7660: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), float64], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(480), uint16]) {
  %989 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %990 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
  %991 = cast(%990, dtype="float64") /* ty=Tensor[(5, 9, 5), float64] */;
  %992 = @func_6389() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %993 = cast(%var_7660, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %994 = reshape(%993, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %995 = @func_3961(%994) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) */;
  %996 = %989.0;
  %997 = sigmoid(%991) /* ty=Tensor[(5, 9, 5), float64] */;
  %998 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
  %999 = %992.0;
  %1000 = %995.2;
  (%996, %997, %998, %999, %1000, %var_7660)
}

def @func_13834() -> Tensor[(2, 2, 1), float32] {
  %1001 = fn () -> Tensor[(2, 2, 1), float32] {
    @func_12892() /* ty=Tensor[(2, 2, 1), float32] */
  };
  %1001() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_12340() -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  %1002 = @func_12297() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %1003 = @func_5572() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %1004 = %1002.0;
  %1005 = %1003.0;
  (%1004, %1005)
}

def @func_11048() -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  %1008 = fn () -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
    %1006 = @func_10855() /* ty=Tensor[(5, 9, 5), bool] */;
    %1007 = @func_10855() /* ty=Tensor[(5, 9, 5), bool] */;
    (%1006, %1007)
  };
  %1008() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */
}

def @func_14203() -> (Tensor[(2, 2, ?), int8],) {
  @func_14201() /* ty=(Tensor[(2, 2, ?), int8],) */
}

def @func_11582() -> Tensor[(2, 2, 1), float32] {
  %1010 = fn () -> Tensor[(2, 2, 1), float32] {
    %1009 = @func_10632() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %1009.1
  };
  %1010() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_16891() -> float32 {
  %1012 = fn () -> float32 {
    %1011 = @func_8607() /* ty=(float32, Tensor[(2, 2, 1), float32]) */;
    %1011.0
  };
  %1012() /* ty=float32 */
}

def @func_8816() -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  %1017 = fn () -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
    %1013 = @func_5145() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
    %1014 = @func_4263() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) */;
    %1015 = %1013.0;
    %1016 = %1014.0;
    (%1015, %1016)
  };
  %1017() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */
}

def @func_11247() -> (Tensor[(2, 2, ?), int32],) {
  %1020 = fn () -> (Tensor[(2, 2, ?), int32],) {
    %1018 = @func_3137() /* ty=(Tensor[(2, 2, ?), int32], Tensor[(2, 2, 1), float32]) */;
    %1019 = %1018.0;
    (%1019,)
  };
  %1020() /* ty=(Tensor[(2, 2, ?), int32],) */
}

def @func_13809(%var_13807: Tensor[(12), float32]) -> (Tensor[(2, 2, ?), uint32], Tensor[(5, 9, 5), bool], Tensor[(12), float32], Tensor[(2, 2, 1), float32]) {
  @func_13806(%var_13807) /* ty=(Tensor[(2, 2, ?), uint32], Tensor[(5, 9, 5), bool], Tensor[(12), float32], Tensor[(2, 2, 1), float32]) */
}

def @func_7986() -> (Tensor[(2, 2, 1), float32],) {
  %1023 = fn () -> (Tensor[(2, 2, 1), float32],) {
    %1021 = @func_4843() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1022 = %1021.0;
    (%1022,)
  };
  %1023() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_13928(%var_13923: Tensor[(1980), uint8]) -> (Tensor[(5, 9, 5), bool], Tensor[(15, 12, 11), float32], Tensor[(1980), uint8]) {
  %1024 = @func_8815() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */;
  %1025 = cast(%var_13923, dtype="uint8") /* ty=Tensor[(1980), uint8] */;
  %1026 = cast(%var_13923, dtype="uint8") /* ty=Tensor[(1980), uint8] */;
  %1027 = reshape(%1025, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), uint8] */;
  %1028 = reshape(%1026, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), uint8] */;
  %1029 = @func_10726(%1027, %1028) /* ty=(Tensor[(15, 12, 11), bool], Tensor[(15, 12, 11), float32]) */;
  %1030 = %1024.1;
  %1031 = %1029.1;
  (%1030, %1031, %var_13923)
}

def @func_14072(%var_14070: Tensor[(1, 13, 5), uint8]) -> (Tensor[(4, 13, 5), bool],) {
  @func_14069(%var_14070) /* ty=(Tensor[(4, 13, 5), bool],) */
}

def @func_4214() -> (Tensor[(2, 2, 1), float32],) {
  %1033 = fn () -> (Tensor[(2, 2, 1), float32],) {
    %1032 = @func_4029() /* ty=Tensor[(2, 2, 1), float32] */;
    (%1032,)
  };
  %1033() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_8574() -> float32 {
  %1034 = fn () -> float32 {
    @func_8510() /* ty=float32 */
  };
  %1034() /* ty=float32 */
}

def @func_9430() -> (float32, float32) {
  %1035 = @func_4263() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) */;
  %1036 = @func_5286() /* ty=float32 */;
  %1037 = %1035.2;
  (%1036, %1037)
}

def @func_15015(%var_15013: Tensor[(48), float32], %var_15014: Tensor[(1728), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(1728), float32], Tensor[(48), float32], Tensor[(1728), float32]) {
  %1046 = fn (%var_15009: Tensor[(48), float32], %var_15010: Tensor[(1728), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(1728), float32], Tensor[(48), float32], Tensor[(1728), float32]) {
    %1038 = @func_5515() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %1039 = cast(%var_15009, dtype="float32") /* ty=Tensor[(48), float32] */;
    %1040 = cast(%var_15010, dtype="float32") /* ty=Tensor[(1728), float32] */;
    %1041 = reshape(%1039, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %1042 = reshape(%1040, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
    %1043 = @func_8373(%1041, %1042) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 12), int8], Tensor[(48), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(480, 1), uint16], Tensor[(1728), float32]) */;
    %1044 = %1038.1;
    %1045 = %1043.7;
    (%1044, %1045, %var_15009, %var_15010)
  };
  %1046(%var_15013, %var_15014) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1728), float32], Tensor[(48), float32], Tensor[(1728), float32]) */
}

def @func_8132() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) {
  @func_8130() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) */
}

def @func_13730(%var_13719: Tensor[(12, 4), float32]) -> (Tensor[(2, 2, ?), int32], Tensor[(2, 2, 1), float32], Tensor[(12, 4), float32]) {
  %1047 = cast(%var_13719, dtype="float32") /* ty=Tensor[(12, 4), float32] */;
  %1048 = reshape(%1047, newshape=[2, 2, 12]) /* ty=Tensor[(2, 2, 12), float32] */;
  %1049 = @func_12197(%1048) /* ty=(Tensor[(2, 2, 12), int64], Tensor[(2, 2, 1), float32]) */;
  %1050 = @func_12105() /* ty=Tensor[(2, 2, ?), int32] */;
  %1051 = %1049.1;
  (%1050, %1051, %var_13719)
}

def @func_11560(%var_11559: Tensor[(120, 4), float32]) -> (Tensor[(120, 4), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) {
  %1065 = fn (%var_11530: Tensor[(120, 4), float32]) -> (Tensor[(120, 4), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) {
    %1052 = @func_8216() /* ty=(Tensor[(120, 4), uint16], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32]) */;
    %1053 = %1052.2;
    %1054 = cast(%var_11530, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
    %1055 = shape_of(%1053, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1056 = cast(%1053, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
    %1057 = dyn.reshape(%1054, %1055, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %1058 = cast(%1053, dtype="uint16") /* ty=Tensor[(120, 4), uint16] */;
    %1059 = reshape(%1058, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %1060 = @func_9651(%1059) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16]) */;
    %1061 = @func_4603() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1062 = maximum(%1056, %1057) /* ty=Tensor[(120, 4), float32] */;
    %1063 = %1060.2;
    %1064 = %1061.0;
    (%1062, %1063, %1064)
  };
  %1065(%var_11559) /* ty=(Tensor[(120, 4), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) */
}

def @func_11791() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  @func_11789() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */
}

def @func_12874() -> (Tensor[(96, 18), float32],) {
  %1068 = fn () -> (Tensor[(96, 18), float32],) {
    %1066 = @func_7832() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], float32) */;
    %1067 = %1066.5;
    (%1067,)
  };
  %1068() /* ty=(Tensor[(96, 18), float32],) */
}

def @func_3260(%var_3229: Tensor[(480), uint16], %var_3250: Tensor[(24, 72), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(9, 16, 12), float32], Tensor[(24, 72), float32]) {
  %1069 = @func_2921() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1070 = @func_2899() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %1071 = cast(%var_3229, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %1072 = reshape(%1071, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), uint16] */;
  %1073 = @func_493(%1072) /* ty=(Tensor[(4, 10, 12), uint16], Tensor[(14, 10, ?), float64], Tensor[(140), float32]) */;
  %1074 = cast(%var_3250, dtype="float32") /* ty=Tensor[(24, 72), float32] */;
  %1075 = cast(%var_3229, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %1076 = reshape(%1074, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float32] */;
  %1077 = reshape(%1075, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %1078 = @func_2912(%1076, %1077) /* ty=(Tensor[(9, 16, 12), float32], Tensor[(140), float32], Tensor[(480), uint16]) */;
  %1079 = %1069.0;
  %1080 = %1070.1;
  %1081 = %1073.2;
  %1082 = %1078.0;
  (%1079, %1080, %1081, %var_3229, %1082, %var_3250)
}

def @func_6910() -> (Tensor[(5, 9, 5), float64], Tensor[(5, 9, 5), bool]) {
  %1083 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %1084 = %1083.0;
  %1085 = cast(%1084, dtype="float64") /* ty=Tensor[(5, 9, 5), float64] */;
  %1086 = sin(%1085) /* ty=Tensor[(5, 9, 5), float64] */;
  %1087 = @func_6812() /* ty=Tensor[(5, 9, 5), bool] */;
  (%1086, %1087)
}

def @func_6632() -> Tensor[(5, 9, 5), bool] {
  %1089 = fn () -> Tensor[(5, 9, 5), bool] {
    %1088 = @func_4093() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %1088.1
  };
  %1089() /* ty=Tensor[(5, 9, 5), bool] */
}

def @func_11947(%var_11945: Tensor[(16), float32]) -> (Tensor[(?, 9, 15), float64], Tensor[(5, 9, 5), bool], Tensor[(10, 3, 8), float64], Tensor[(4, 60), float64], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 4), uint8], Tensor[(16), float32]) {
  @func_11944(%var_11945) /* ty=(Tensor[(?, 9, 15), float64], Tensor[(5, 9, 5), bool], Tensor[(10, 3, 8), float64], Tensor[(4, 60), float64], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 4), uint8], Tensor[(16), float32]) */
}

def @func_14553(%var_14544: int8, %var_14545: Tensor[(1, 2, 7), int8]) -> (Tensor[(1, 2, 7), int8], Tensor[(1, 2, 7), uint8]) {
  %1090 = cast(%var_14544, dtype="int8") /* ty=int8 */;
  %1091 = cast(%var_14545, dtype="int8") /* ty=Tensor[(1, 2, 7), int8] */;
  %1092 = cast(%var_14545, dtype="uint8") /* ty=Tensor[(1, 2, 7), uint8] */;
  %1093 = cast(%var_14544, dtype="uint8") /* ty=uint8 */;
  %1094 = left_shift(%1090, %1091) /* ty=Tensor[(1, 2, 7), int8] */;
  %1095 = bitwise_xor(%1092, %1093) /* ty=Tensor[(1, 2, 7), uint8] */;
  (%1094, %1095)
}

def @func_6417(%var_6415: Tensor[(15, 8, 11), bool], %var_6416: Tensor[(15, 8, 11), bool]) -> Tensor[(15, 8, 11), bool] {
  %1100 = fn (%var_6406: Tensor[(15, 8, 11), bool], %var_6407: Tensor[(15, 8, 11), bool]) -> Tensor[(15, 8, 11), bool] {
    %1096 = cast(%var_6407, dtype="bool") /* ty=Tensor[(15, 8, 11), bool] */;
    %1097 = shape_of(%var_6406, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1098 = cast(%var_6406, dtype="bool") /* ty=Tensor[(15, 8, 11), bool] */;
    %1099 = dyn.reshape(%1096, %1097, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%1098, %1099) /* ty=Tensor[(15, 8, 11), bool] */
  };
  %1100(%var_6415, %var_6416) /* ty=Tensor[(15, 8, 11), bool] */
}

def @func_10212() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %1105 = fn () -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
    %1101 = @func_3369() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1102 = @func_7447() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1103 = %1101.0;
    %1104 = %1102.0;
    (%1103, %1104)
  };
  %1105() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */
}

def @func_11752() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  @func_11750() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */
}

def @func_5175() -> Tensor[(2, 2, 1), float64] {
  %1109 = fn () -> Tensor[(2, 2, 1), float64] {
    %1106 = @func_2899() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %1107 = %1106.1;
    %1108 = cast(%1107, dtype="float64") /* ty=Tensor[(2, 2, 1), float64] */;
    sin(%1108) /* ty=Tensor[(2, 2, 1), float64] */
  };
  %1109() /* ty=Tensor[(2, 2, 1), float64] */
}

def @func_16505() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  @func_16503() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */
}

def @func_4548(%var_4546: float32, %var_4547: Tensor[(135), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(135), float32], Tensor[(2, 2, 1), float32]) {
  %1119 = fn (%var_4538: float32, %var_4539: Tensor[(135), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(135), float32], Tensor[(2, 2, 1), float32]) {
    %1110 = cast(%var_4538, dtype="float32") /* ty=float32 */;
    %1111 = cast(%var_4539, dtype="float32") /* ty=Tensor[(135), float32] */;
    %1112 = reshape(%1110, newshape=[]) /* ty=float32 */;
    %1113 = reshape(%1111, newshape=[135]) /* ty=Tensor[(135), float32] */;
    %1114 = @func_3797(%1112, %1113) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) */;
    %1115 = @func_2921() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1116 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
    %1117 = %1114.0;
    %1118 = %1115.0;
    (%1116, %1117, %var_4538, %var_4539, %1118)
  };
  %1119(%var_4546, %var_4547) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32, Tensor[(135), float32], Tensor[(2, 2, 1), float32]) */
}

def @func_9493() -> (Tensor[(5, 9, 5), bool], float32) {
  %1124 = fn () -> (Tensor[(5, 9, 5), bool], float32) {
    %1120 = @func_3906() /* ty=(Tensor[(5, 9, 5), bool],) */;
    %1121 = @func_7153() /* ty=(float32,) */;
    %1122 = %1120.0;
    %1123 = %1121.0;
    (%1122, %1123)
  };
  %1124() /* ty=(Tensor[(5, 9, 5), bool], float32) */
}

def @func_5620() -> (Tensor[(2, 2, 1), float32], Tensor[(14, 10, ?), float64], Tensor[(40, 12), uint16]) {
  %1125 = cast(meta[relay.Constant][38] /* ty=Tensor[(40, 12), uint16] */, dtype="uint16") /* ty=Tensor[(40, 12), uint16] */;
  %1126 = reshape(%1125, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), uint16] */;
  %1127 = @func_493(%1126) /* ty=(Tensor[(4, 10, 12), uint16], Tensor[(14, 10, ?), float64], Tensor[(140), float32]) */;
  %1128 = @func_4029() /* ty=Tensor[(2, 2, 1), float32] */;
  %1129 = %1127.1;
  (%1128, %1129, meta[relay.Constant][38] /* ty=Tensor[(40, 12), uint16] */)
}

def @func_13931(%var_13929: Tensor[(1980), uint8]) -> (Tensor[(5, 9, 5), bool], Tensor[(15, 12, 11), float32], Tensor[(1980), uint8]) {
  @func_13928(%var_13929) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(15, 12, 11), float32], Tensor[(1980), uint8]) */
}

def @func_15591() -> (float32,) {
  @func_15589() /* ty=(float32,) */
}

def @func_6814() -> Tensor[(5, 9, 5), bool] {
  @func_6812() /* ty=Tensor[(5, 9, 5), bool] */
}

def @func_11654() -> (Tensor[(2, 2, 1), float32],) {
  %1130 = @func_11628() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1131 = %1130.0;
  (%1131,)
}

def @func_5146() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  %1136 = fn () -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
    %1132 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
    %1133 = @func_4817() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1134 = %1132.0;
    %1135 = %1133.0;
    (%1134, %1135)
  };
  %1136() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */
}

def @func_4094() -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %1146 = fn () -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
    %1137 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
    %1138 = @func_2921() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1139 = %1138.0;
    %1140 = cast(%1139, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
    %1141 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1142 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
    %1143 = %1137.0;
    %1144 = acosh(%1140) /* ty=Tensor[(2, 2, 1), float32] */;
    %1145 = %1141.0;
    (%1142, %1143, %1144, %1145)
  };
  %1146() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */
}

def @func_15349(%var_15348: Tensor[(140), float32]) -> (float32, Tensor[(2, 2, 1), float32], Tensor[(120, 4), float32], Tensor[(864, 2), float32], Tensor[(12, 1), float32], Tensor[(140), float32], Tensor[(5, 9, 5), bool]) {
  %1162 = fn (%var_15338: Tensor[(140), float32]) -> (float32, Tensor[(2, 2, 1), float32], Tensor[(120, 4), float32], Tensor[(864, 2), float32], Tensor[(12, 1), float32], Tensor[(140), float32], Tensor[(5, 9, 5), bool]) {
    %1147 = @func_5457() /* ty=(float32, Tensor[(2, 2, 1), float32]) */;
    %1148 = @func_4263() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], float32) */;
    %1149 = @func_8216() /* ty=(Tensor[(120, 4), uint16], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32]) */;
    %1150 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 1), float32] */;
    %1151 = %1149.4;
    %1152 = cast(%1151, dtype="uint16") /* ty=Tensor[(120, 4), uint16] */;
    %1153 = cast(%var_15338, dtype="float32") /* ty=Tensor[(140), float32] */;
    %1154 = reshape(%1150, newshape=[12]) /* ty=Tensor[(12), float32] */;
    %1155 = reshape(%1152, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %1156 = reshape(%1153, newshape=[140]) /* ty=Tensor[(140), float32] */;
    %1157 = @func_10463(%1154, %1155, %1156) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(864, 2), float32], float32, Tensor[(140), float32]) */;
    %1158 = %1147.0;
    %1159 = %1148.1;
    %1160 = %1157.4;
    %1161 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
    (%1158, %1159, %1151, %1160, meta[relay.Constant][39] /* ty=Tensor[(12, 1), float32] */, %var_15338, %1161)
  };
  %1162(%var_15348) /* ty=(float32, Tensor[(2, 2, 1), float32], Tensor[(120, 4), float32], Tensor[(864, 2), float32], Tensor[(12, 1), float32], Tensor[(140), float32], Tensor[(5, 9, 5), bool]) */
}

def @func_7198() -> (Tensor[(2, 2, 1), float32],) {
  %1164 = fn () -> (Tensor[(2, 2, 1), float32],) {
    %1163 = @func_4029() /* ty=Tensor[(2, 2, 1), float32] */;
    (%1163,)
  };
  %1164() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_7448() -> (Tensor[(2, 2, 1), float32],) {
  %1167 = fn () -> (Tensor[(2, 2, 1), float32],) {
    %1165 = @func_6484() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1166 = %1165.0;
    (%1166,)
  };
  %1167() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_8019() -> Tensor[(2, 2, 1), float32] {
  %1169 = fn () -> Tensor[(2, 2, 1), float32] {
    %1168 = @func_3369() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1168.0
  };
  %1169() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_16392() -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) {
  %1170 = @func_13683() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) */;
  %1171 = @func_13833() /* ty=Tensor[(2, 2, 1), float32] */;
  %1172 = %1170.1;
  (%1171, %1172)
}

def @func_12723(%var_12721: Tensor[(2, 2, 4), float32], %var_12722: Tensor[(336, 1), uint32]) -> (Tensor[(2, 2, 1), float32], Tensor[(336, 1), uint32], Tensor[(12), float32], Tensor[(2, 2, 4), float32], Tensor[(5, 9, 5), float64]) {
  %1186 = fn (%var_12674: Tensor[(2, 2, 4), float32], %var_12684: Tensor[(336, 1), uint32]) -> (Tensor[(2, 2, 1), float32], Tensor[(336, 1), uint32], Tensor[(12), float32], Tensor[(2, 2, 4), float32], Tensor[(5, 9, 5), float64]) {
    %1173 = cast(%var_12684, dtype="uint32") /* ty=Tensor[(336, 1), uint32] */;
    %1174 = cast(meta[relay.Constant][40] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
    %1175 = reshape(%1173, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
    %1176 = reshape(%1174, newshape=[12]) /* ty=Tensor[(12), float32] */;
    %1177 = @func_8553(%1175, %1176) /* ty=(Tensor[(3, 16, 7), uint32], Tensor[(1728), float32], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(2, 2, 1), float32]) */;
    %1178 = @func_11581() /* ty=Tensor[(2, 2, 1), float32] */;
    %1179 = cast(%1178, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
    %1180 = cast(%var_12674, dtype="float32") /* ty=Tensor[(2, 2, 4), float32] */;
    %1181 = add(%1179, %1180) /* ty=Tensor[(2, 2, 4), float32] */;
    %1182 = cast(%1181, dtype="float32") /* ty=Tensor[(2, 2, 4), float32] */;
    %1183 = %1177.4;
    %1184 = cos(%1182) /* ty=Tensor[(2, 2, 4), float32] */;
    %1185 = @func_6950() /* ty=Tensor[(5, 9, 5), float64] */;
    (%1183, %var_12684, meta[relay.Constant][40] /* ty=Tensor[(12), float32] */, %1184, %1185)
  };
  %1186(%var_12721, %var_12722) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(336, 1), uint32], Tensor[(12), float32], Tensor[(2, 2, 4), float32], Tensor[(5, 9, 5), float64]) */
}

def @func_10331(%var_10293: float32, %var_10294: Tensor[(135), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(96, 18), float32], Tensor[(5, 9, 5), bool]) {
  %1187 = @func_7547() /* ty=(Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) */;
  %1188 = cast(%var_10293, dtype="float32") /* ty=float32 */;
  %1189 = cast(%var_10294, dtype="float32") /* ty=Tensor[(135), float32] */;
  %1190 = reshape(%1188, newshape=[]) /* ty=float32 */;
  %1191 = reshape(%1189, newshape=[1, 9, 15]) /* ty=Tensor[(1, 9, 15), float32] */;
  %1192 = @func_1819(%1190, %1191) /* ty=(Tensor[(1, 9, 15), bool], Tensor[(1, 9, 15), bool]) */;
  %1193 = cast(meta[relay.Constant][41] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %1194 = cast(meta[relay.Constant][42] /* ty=Tensor[(1728), float32] */, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %1195 = reshape(%1193, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %1196 = reshape(%1194, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %1197 = @func_3442(%1195, %1196) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32]) */;
  %1198 = %1197.2;
  %1199 = cast(%1198, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %1200 = reshape(%1199, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %1201 = @func_6286(%1200) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(96, 18), float32], Tensor[(480), uint16], float32) */;
  %1202 = @func_4093() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %1203 = %1187.1;
  %1204 = %1192.1;
  %1205 = %1201.3;
  %1206 = %1202.1;
  (%1203, %1204, %var_10293, %var_10294, %1198, meta[relay.Constant][41] /* ty=Tensor[(480), uint16] */, meta[relay.Constant][42] /* ty=Tensor[(1728), float32] */, %1205, %1206)
}

def @func_12836(%var_12821: Tensor[(120, 4), float32]) -> (Tensor[(120, 4), float64], Tensor[(120, 4), float32], Tensor[(120, 4), uint32], Tensor[(2, 2, 1), float32]) {
  %1207 = @func_8216() /* ty=(Tensor[(120, 4), uint16], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32]) */;
  %1208 = %1207.4;
  %1209 = cast(%1208, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %1210 = acosh(%1209) /* ty=Tensor[(120, 4), float32] */;
  %1211 = cast(%1210, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %1212 = sqrt(%1211) /* ty=Tensor[(120, 4), float32] */;
  %1213 = cast(%1212, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
  %1214 = cast(%1208, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %1215 = cast(%var_12821, dtype="uint32") /* ty=Tensor[(120, 4), uint32] */;
  %1216 = shape_of(%1212, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1217 = cast(%1212, dtype="uint32") /* ty=Tensor[(120, 4), uint32] */;
  %1218 = dyn.reshape(%1215, %1216, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %1219 = erf(%1213) /* ty=Tensor[(120, 4), float64] */;
  %1220 = sigmoid(%1214) /* ty=Tensor[(120, 4), float32] */;
  %1221 = bitwise_xor(%1217, %1218) /* ty=Tensor[(120, 4), uint32] */;
  %1222 = @func_6652() /* ty=Tensor[(2, 2, 1), float32] */;
  (%1219, %1220, %1221, %1222)
}

def @func_13806(%var_13798: Tensor[(12), float32]) -> (Tensor[(2, 2, ?), uint32], Tensor[(5, 9, 5), bool], Tensor[(12), float32], Tensor[(2, 2, 1), float32]) {
  %1223 = @func_11154() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %1224 = %1223.1;
  %1225 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %1226 = %1225.1;
  %1227 = cast(%1226, dtype="uint32") /* ty=Tensor[(2, 2, 1), uint32] */;
  %1228 = shape_of(%1224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1229 = cast(%1224, dtype="uint32") /* ty=Tensor[(2, 2, 1), uint32] */;
  %1230 = dyn.reshape(%1227, %1228, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1231 = cast(%var_13798, dtype="float32") /* ty=Tensor[(12), float32] */;
  %1232 = reshape(%1231, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %1233 = @func_9583(%1232) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(2, 240), uint16], Tensor[(1728), float32]) */;
  %1234 = right_shift(%1229, %1230) /* ty=Tensor[(2, 2, ?), uint32] */;
  %1235 = %1233.3;
  %1236 = @func_11581() /* ty=Tensor[(2, 2, 1), float32] */;
  (%1234, %1235, %var_13798, %1236)
}

def @func_8064(%var_8062: Tensor[(12), float32], %var_8063: Tensor[(1728), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(1728), float32], float32, Tensor[(2, 2, ?), bool]) {
  @func_8060(%var_8062, %var_8063) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(1728), float32], float32, Tensor[(2, 2, ?), bool]) */
}

def @func_15412(%var_15378: Tensor[(2, 2, 4), float32]) -> Tensor[(2, 2, 4), int32] {
  %1237 = @func_6736() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) */;
  %1238 = %1237.0;
  %1239 = cast(%1238, dtype="int32") /* ty=Tensor[(2, 2, 1), int32] */;
  %1240 = cast(%var_15378, dtype="int32") /* ty=Tensor[(2, 2, 4), int32] */;
  bitwise_and(%1239, %1240) /* ty=Tensor[(2, 2, 4), int32] */
}

def @func_13426() -> Tensor[(2, 2, ?), bool] {
  %1242 = fn () -> Tensor[(2, 2, ?), bool] {
    %1241 = @func_12247() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, ?), bool], Tensor[(2, 2, 1), float32]) */;
    %1241.1
  };
  %1242() /* ty=Tensor[(2, 2, ?), bool] */
}

def @func_3093() -> (Tensor[(2, 2, 1), float32],) {
  %1245 = fn () -> (Tensor[(2, 2, 1), float32],) {
    %1243 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1244 = %1243.0;
    (%1244,)
  };
  %1245() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_13488(%var_13485: Tensor[(2, 2, 1), bool], %var_13486: float32, %var_13487: Tensor[(135), float32]) -> (Tensor[(2, 2, ?), bool], Tensor[(2, 2, ?), float64], Tensor[(2, 2, ?), int32], Tensor[(5, 9, 5), bool], float32, Tensor[(135), float32]) {
  @func_13483(%var_13485, %var_13486, %var_13487) /* ty=(Tensor[(2, 2, ?), bool], Tensor[(2, 2, ?), float64], Tensor[(2, 2, ?), int32], Tensor[(5, 9, 5), bool], float32, Tensor[(135), float32]) */
}

def @func_13228() -> float32 {
  @func_13226() /* ty=float32 */
}

def @func_8917() -> (Tensor[(2, 2, 1), float32],) {
  %1247 = fn () -> (Tensor[(2, 2, 1), float32],) {
    %1246 = @func_7426() /* ty=Tensor[(2, 2, 1), float32] */;
    (%1246,)
  };
  %1247() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_11441(%var_11376: Tensor[(2, 2, 15), float32]) -> (Tensor[(2, 2, 15), uint64], Tensor[(2, 2, ?), float64]) {
  %1248 = @func_11154() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %1249 = %1248.2;
  %1250 = cast(%1249, dtype="uint64") /* ty=Tensor[(2, 2, 1), uint64] */;
  %1251 = cast(%var_11376, dtype="uint64") /* ty=Tensor[(2, 2, 15), uint64] */;
  %1252 = @func_4518() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, ?), float64]) */;
  %1253 = subtract(%1250, %1251) /* ty=Tensor[(2, 2, 15), uint64] */;
  %1254 = %1252.1;
  (%1253, %1254)
}

def @func_9929(%var_9883: float32) -> (Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16], float32, float32, Tensor[(15, 9), float32], Tensor[(2, 2, 480), int8]) {
  %1255 = @func_6736() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) */;
  %1256 = cast(meta[relay.Constant][43] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %1257 = reshape(%1256, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), uint16] */;
  %1258 = @func_493(%1257) /* ty=(Tensor[(4, 10, 12), uint16], Tensor[(14, 10, ?), float64], Tensor[(140), float32]) */;
  %1259 = cast(meta[relay.Constant][43] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %1260 = reshape(%1259, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %1261 = @func_9783(%1260) /* ty=(Tensor[(5, 9, 5), bool], float32, float32, Tensor[(480), uint16], Tensor[(140, 1), float32]) */;
  %1262 = cast(%var_9883, dtype="float32") /* ty=float32 */;
  %1263 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
  %1264 = reshape(%1262, newshape=[]) /* ty=float32 */;
  %1265 = reshape(%1263, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %1266 = @func_3797(%1264, %1265) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) */;
  %1267 = @func_7447() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1268 = %1267.0;
  %1269 = cast(meta[relay.Constant][43] /* ty=Tensor[(480), uint16] */, dtype="int8") /* ty=Tensor[(480), int8] */;
  %1270 = cast(%1268, dtype="int8") /* ty=Tensor[(2, 2, 1), int8] */;
  %1271 = %1255.0;
  %1272 = %1258.2;
  %1273 = %1261.3;
  %1274 = %1266.2;
  %1275 = right_shift(%1269, %1270) /* ty=Tensor[(2, 2, 480), int8] */;
  (%1271, %1272, %1273, %1274, %var_9883, meta[relay.Constant][44] /* ty=Tensor[(15, 9), float32] */, %1275)
}

def @func_8701(%var_8689: Tensor[(2, 2, 4), float32]) -> Tensor[(2, 2, 4), uint8] {
  %1276 = @func_6652() /* ty=Tensor[(2, 2, 1), float32] */;
  %1277 = cast(%1276, dtype="uint8") /* ty=Tensor[(2, 2, 1), uint8] */;
  %1278 = cast(%var_8689, dtype="uint8") /* ty=Tensor[(2, 2, 4), uint8] */;
  multiply(%1277, %1278) /* ty=Tensor[(2, 2, 4), uint8] */
}

def @func_4936(%var_4925: Tensor[(2, 2, 12), float32]) -> Tensor[(2, 2, 12), int8] {
  %1279 = @func_2921() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1280 = %1279.0;
  %1281 = cast(%1280, dtype="int8") /* ty=Tensor[(2, 2, 1), int8] */;
  %1282 = cast(%var_4925, dtype="int8") /* ty=Tensor[(2, 2, 12), int8] */;
  bitwise_and(%1281, %1282) /* ty=Tensor[(2, 2, 12), int8] */
}

def @func_8217() -> (Tensor[(120, 4), uint16], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32]) {
  %1299 = fn () -> (Tensor[(120, 4), uint16], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32]) {
    %1283 = @func_5369() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(4, 10, 12), uint16], Tensor[(120, 4), uint16], Tensor[(2, 2, 1), float32]) */;
    %1284 = %1283.2;
    %1285 = cast(meta[relay.Constant][45] /* ty=Tensor[(120, 4), uint16] */, dtype="uint16") /* ty=Tensor[(120, 4), uint16] */;
    %1286 = shape_of(%1284, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1287 = cast(%1284, dtype="uint16") /* ty=Tensor[(120, 4), uint16] */;
    %1288 = dyn.reshape(%1285, %1286, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %1289 = @func_6389() /* ty=(Tensor[(5, 9, 5), bool],) */;
    %1290 = cast(meta[relay.Constant][45] /* ty=Tensor[(120, 4), uint16] */, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
    %1291 = log10(%1290) /* ty=Tensor[(120, 4), float64] */;
    %1292 = cast(%1291, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
    %1293 = cast(%1291, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
    %1294 = multiply(%1287, %1288) /* ty=Tensor[(120, 4), uint16] */;
    %1295 = %1289.0;
    %1296 = exp(%1292) /* ty=Tensor[(120, 4), float32] */;
    %1297 = @func_6134() /* ty=Tensor[(5, 9, 5), bool] */;
    %1298 = rsqrt(%1293) /* ty=Tensor[(120, 4), float32] */;
    (%1294, %1295, %1296, %1297, %1298)
  };
  %1299() /* ty=(Tensor[(120, 4), uint16], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32]) */
}

def @func_8752() -> (float32,) {
  @func_8750() /* ty=(float32,) */
}

def @func_8960(%var_8958: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(96, 18), float32], Tensor[(480), uint16]) {
  @func_8957(%var_8958) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(96, 18), float32], Tensor[(480), uint16]) */
}

def @func_8060(%var_8042: Tensor[(12), float32], %var_8044: Tensor[(1728), float32]) -> (Tensor[(5, 9, 5), bool], Tensor[(480), uint16], Tensor[(12), float32], Tensor[(480), uint16], Tensor[(1728), float32], float32, Tensor[(2, 2, ?), bool]) {
  %1300 = @func_7832() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], float32) */;
  %1301 = cast(%var_8042, dtype="float32") /* ty=Tensor[(12), float32] */;
  %1302 = cast(meta[relay.Constant][46] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %1303 = cast(%var_8044, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %1304 = reshape(%1301, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float32] */;
  %1305 = reshape(%1302, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %1306 = reshape(%1303, newshape=[1728]) /* ty=Tensor[(1728), float32] */;
  %1307 = @func_5858(%1304, %1305, %1306) /* ty=(Tensor[(2, 2, 3), uint32], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 12), int8], Tensor[(48), float32]) */;
  %1308 = @func_7090() /* ty=(float32,) */;
  %1309 = %1300.0;
  %1310 = %1307.2;
  %1311 = %1308.0;
  %1312 = @func_7913() /* ty=Tensor[(2, 2, ?), bool] */;
  (%1309, %1310, %var_8042, meta[relay.Constant][46] /* ty=Tensor[(480), uint16] */, %var_8044, %1311, %1312)
}

def @func_12953() -> (Tensor[(2, 2, ?), bool],) {
  %1313 = @func_7913() /* ty=Tensor[(2, 2, ?), bool] */;
  (%1313,)
}

def @func_11346() -> (float32, Tensor[(2, 2, ?), float64]) {
  @func_11344() /* ty=(float32, Tensor[(2, 2, ?), float64]) */
}

def @func_9180() -> (Tensor[(5, 9, 5), bool],) {
  @func_9178() /* ty=(Tensor[(5, 9, 5), bool],) */
}

def @func_6763() -> (Tensor[(2, 2, 1), float32],) {
  %1314 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1315 = %1314.0;
  (%1315,)
}

def @func_4817() -> (Tensor[(2, 2, 1), float32],) {
  %1316 = @func_3625() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1317 = %1316.0;
  (%1317,)
}

def @func_3349() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */
}

def @func_6653() -> Tensor[(2, 2, 1), float32] {
  %1319 = fn () -> Tensor[(2, 2, 1), float32] {
    %1318 = @func_6484() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1318.0
  };
  %1319() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_7005() -> Tensor[(2, 2, 1), float32] {
  @func_7003() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_15711() -> Tensor[(5, 9, 5), bool] {
  @func_6134() /* ty=Tensor[(5, 9, 5), bool] */
}

def @func_16020() -> (Tensor[(96, 18), float32],) {
  @func_16018() /* ty=(Tensor[(96, 18), float32],) */
}

def @func_12247() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, ?), bool], Tensor[(2, 2, 1), float32]) {
  %1320 = @func_7832() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(1728), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], float32) */;
  %1321 = %1320.1;
  %1322 = @func_7913() /* ty=Tensor[(2, 2, ?), bool] */;
  %1323 = @func_11581() /* ty=Tensor[(2, 2, 1), float32] */;
  (%1321, %1322, %1323)
}

def @func_14467() -> Tensor[(2, 2, 1), float32] {
  @func_14465() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_12417(%var_12415: Tensor[(2, 2, 16), float32]) -> (Tensor[(2, 2, 16), uint64],) {
  @func_12414(%var_12415) /* ty=(Tensor[(2, 2, 16), uint64],) */
}

def @func_5370() -> (Tensor[(2, 2, 1), float32], Tensor[(4, 10, 12), uint16], Tensor[(120, 4), uint16], Tensor[(2, 2, 1), float32]) {
  %1332 = fn () -> (Tensor[(2, 2, 1), float32], Tensor[(4, 10, 12), uint16], Tensor[(120, 4), uint16], Tensor[(2, 2, 1), float32]) {
    %1324 = @func_4093() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %1325 = cast(meta[relay.Constant][47] /* ty=Tensor[(120, 4), uint16] */, dtype="uint16") /* ty=Tensor[(120, 4), uint16] */;
    %1326 = reshape(%1325, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), uint16] */;
    %1327 = @func_493(%1326) /* ty=(Tensor[(4, 10, 12), uint16], Tensor[(14, 10, ?), float64], Tensor[(140), float32]) */;
    %1328 = @func_3369() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1329 = %1324.3;
    %1330 = %1327.0;
    %1331 = %1328.0;
    (%1329, %1330, meta[relay.Constant][47] /* ty=Tensor[(120, 4), uint16] */, %1331)
  };
  %1332() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(4, 10, 12), uint16], Tensor[(120, 4), uint16], Tensor[(2, 2, 1), float32]) */
}

def @func_11808() -> Tensor[(2, 2, 1), float32] {
  @func_11806() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_15846() -> (Tensor[(2, 2, 1), float32],) {
  @func_15844() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_3369() -> (Tensor[(2, 2, 1), float32],) {
  %1333 = @func_3137() /* ty=(Tensor[(2, 2, ?), int32], Tensor[(2, 2, 1), float32]) */;
  %1334 = %1333.1;
  (%1334,)
}

def @func_11944(%var_11937: Tensor[(16), float32]) -> (Tensor[(?, 9, 15), float64], Tensor[(5, 9, 5), bool], Tensor[(10, 3, 8), float64], Tensor[(4, 60), float64], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 4), uint8], Tensor[(16), float32]) {
  %1335 = @func_7562() /* ty=(Tensor[(?, 9, 15), float64],) */;
  %1336 = @func_6101() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %1337 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 60), float64] */, dtype="float64") /* ty=Tensor[(4, 60), float64] */;
  %1338 = reshape(%1337, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), float64] */;
  %1339 = @func_11628() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1340 = cast(%var_11937, dtype="float32") /* ty=Tensor[(16), float32] */;
  %1341 = reshape(%1340, newshape=[2, 2, 4]) /* ty=Tensor[(2, 2, 4), float32] */;
  %1342 = %1335.0;
  %1343 = %1336.0;
  %1344 = @func_8638(%1338) /* ty=Tensor[(10, 3, 8), float64] */;
  %1345 = %1339.0;
  %1346 = @func_8701(%1341) /* ty=Tensor[(2, 2, 4), uint8] */;
  (%1342, %1343, %1344, meta[relay.Constant][48] /* ty=Tensor[(4, 60), float64] */, %1345, %1346, %var_11937)
}

def @func_9653(%var_9652: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16]) {
  %1353 = fn (%var_9644: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16]) {
    %1347 = @func_6736() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool]) */;
    %1348 = cast(%var_9644, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %1349 = reshape(%1348, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %1350 = @func_4382(%1349) /* ty=(Tensor[(135), float32], Tensor[(5, 9, 5), float64], Tensor[(140), float32], Tensor[(480), uint16], Tensor[(96, 18), float32], Tensor[(480), uint16]) */;
    %1351 = %1347.0;
    %1352 = %1350.2;
    (%1351, %1352, %var_9644)
  };
  %1353(%var_9652) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(140), float32], Tensor[(480), uint16]) */
}

def @func_15536(%var_15534: Tensor[(1, 12), float32]) -> (Tensor[(1, 12), float32], Tensor[(2, 2, 1728), float32]) {
  @func_15533(%var_15534) /* ty=(Tensor[(1, 12), float32], Tensor[(2, 2, 1728), float32]) */
}

def @func_10093() -> Tensor[(2, 2, 1), float32] {
  %1355 = fn () -> Tensor[(2, 2, 1), float32] {
    %1354 = @func_4843() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1354.0
  };
  %1355() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_2922() -> (Tensor[(2, 2, 1), float32],) {
  %1358 = fn () -> (Tensor[(2, 2, 1), float32],) {
    %1356 = @func_2846() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1357 = %1356.0;
    (%1357,)
  };
  %1358() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_13007() -> Tensor[(5, 9, 5), bool] {
  %1359 = @func_11789() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %1359.0
}

def @func_14240(%var_14239: bool) -> (Tensor[(1, 9, 13), bool], Tensor[(2, 2, ?), int8], Tensor[(2, 2, 2), bool], Tensor[(8), float32]) {
  %1369 = fn (%var_14222: bool) -> (Tensor[(1, 9, 13), bool], Tensor[(2, 2, ?), int8], Tensor[(2, 2, 2), bool], Tensor[(8), float32]) {
    %1360 = cast(%var_14222, dtype="bool") /* ty=bool */;
    %1361 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 9, 13), bool] */, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
    %1362 = @func_14201() /* ty=(Tensor[(2, 2, ?), int8],) */;
    %1363 = cast(meta[relay.Constant][50] /* ty=Tensor[(8), float32] */, dtype="float32") /* ty=Tensor[(8), float32] */;
    %1364 = reshape(%1363, newshape=[2, 2, 2]) /* ty=Tensor[(2, 2, 2), float32] */;
    %1365 = @func_7267(%1364) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(?, 9, 15), float64], Tensor[(2, 2, 2), bool], Tensor[(5, 9, 5), bool]) */;
    %1366 = logical_or(%1360, %1361) /* ty=Tensor[(1, 9, 13), bool] */;
    %1367 = %1362.0;
    %1368 = %1365.2;
    (%1366, %1367, %1368, meta[relay.Constant][50] /* ty=Tensor[(8), float32] */)
  };
  %1369(%var_14239) /* ty=(Tensor[(1, 9, 13), bool], Tensor[(2, 2, ?), int8], Tensor[(2, 2, 2), bool], Tensor[(8), float32]) */
}

def @func_13226() -> float32 {
  %1370 = @func_9430() /* ty=(float32, float32) */;
  %1370.0
}

def @func_14465() -> Tensor[(2, 2, 1), float32] {
  @func_13164() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_14557(%var_14555: int8, %var_14556: Tensor[(1, 2, 7), int8]) -> (Tensor[(1, 2, 7), int8], Tensor[(1, 2, 7), uint8]) {
  @func_14553(%var_14555, %var_14556) /* ty=(Tensor[(1, 2, 7), int8], Tensor[(1, 2, 7), uint8]) */
}

def @func_7092() -> (float32,) {
  @func_7090() /* ty=(float32,) */
}

def @func_7418() -> (Tensor[(2, 2, 1), float32],) {
  %1372 = fn () -> (Tensor[(2, 2, 1), float32],) {
    %1371 = @func_6652() /* ty=Tensor[(2, 2, 1), float32] */;
    (%1371,)
  };
  %1372() /* ty=(Tensor[(2, 2, 1), float32],) */
}

def @func_15589() -> (float32,) {
  %1373 = @func_13387() /* ty=(float32,) */;
  %1374 = %1373.0;
  (%1374,)
}

def @func_4162() -> (float32,) {
  %1377 = fn () -> (float32,) {
    %1375 = @func_3673() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(1, 9, 15), bool], float32, Tensor[(135), float32]) */;
    %1376 = %1375.2;
    (%1376,)
  };
  %1377() /* ty=(float32,) */
}

def @func_15264() -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
  %1382 = fn () -> (Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) {
    %1378 = @func_4817() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1379 = @func_4843() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1380 = %1378.0;
    %1381 = %1379.0;
    (%1380, %1381)
  };
  %1382() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */
}

def @func_11708() -> (Tensor[(120, 4), float32], Tensor[(480), uint16], float32) {
  %1393 = fn () -> (Tensor[(120, 4), float32], Tensor[(480), uint16], float32) {
    %1383 = @func_8216() /* ty=(Tensor[(120, 4), uint16], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32], Tensor[(5, 9, 5), bool], Tensor[(120, 4), float32]) */;
    %1384 = %1383.0;
    %1385 = cast(%1384, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
    %1386 = cos(%1385) /* ty=Tensor[(120, 4), float32] */;
    %1387 = cast(%1386, dtype="uint16") /* ty=Tensor[(120, 4), uint16] */;
    %1388 = reshape(%1387, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %1389 = @func_6286(%1388) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(96, 18), float32], Tensor[(480), uint16], float32) */;
    %1390 = @func_5457() /* ty=(float32, Tensor[(2, 2, 1), float32]) */;
    %1391 = %1389.4;
    %1392 = %1390.0;
    (%1386, %1391, %1392)
  };
  %1393() /* ty=(Tensor[(120, 4), float32], Tensor[(480), uint16], float32) */
}

def @func_4029() -> Tensor[(2, 2, 1), float32] {
  %1394 = @func_3590() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1394.0
}

def @func_10860() -> Tensor[(2, 2, 1), float32] {
  %1396 = fn () -> Tensor[(2, 2, 1), float32] {
    %1395 = @func_4843() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1395.0
  };
  %1396() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_4794() -> float32 {
  @func_4792() /* ty=float32 */
}

def @func_16407() -> (Tensor[(5, 9, 5), bool],) {
  @func_16405() /* ty=(Tensor[(5, 9, 5), bool],) */
}

def @func_6102() -> (Tensor[(5, 9, 5), bool],) {
  %1399 = fn () -> (Tensor[(5, 9, 5), bool],) {
    %1397 = @func_3069() /* ty=(Tensor[(5, 9, 5), bool],) */;
    %1398 = %1397.0;
    (%1398,)
  };
  %1399() /* ty=(Tensor[(5, 9, 5), bool],) */
}

def @func_1822(%var_1820: float32, %var_1821: Tensor[(1, 9, 15), float32]) -> (Tensor[(1, 9, 15), bool], Tensor[(1, 9, 15), bool]) {
  %1406 = fn (%var_1809: float32, %var_1810: Tensor[(1, 9, 15), float32]) -> (Tensor[(1, 9, 15), bool], Tensor[(1, 9, 15), bool]) {
    %1400 = cast(%var_1809, dtype="bool") /* ty=bool */;
    %1401 = cast(%var_1810, dtype="bool") /* ty=Tensor[(1, 9, 15), bool] */;
    %1402 = cast(%var_1810, dtype="bool") /* ty=Tensor[(1, 9, 15), bool] */;
    %1403 = cast(%var_1809, dtype="bool") /* ty=bool */;
    %1404 = less(%1400, %1401) /* ty=Tensor[(1, 9, 15), bool] */;
    %1405 = greater_equal(%1402, %1403) /* ty=Tensor[(1, 9, 15), bool] */;
    (%1404, %1405)
  };
  %1406(%var_1820, %var_1821) /* ty=(Tensor[(1, 9, 15), bool], Tensor[(1, 9, 15), bool]) */
}

def @func_9315() -> Tensor[(2, 2, 1), float32] {
  %1407 = fn () -> Tensor[(2, 2, 1), float32] {
    @func_6867() /* ty=Tensor[(2, 2, 1), float32] */
  };
  %1407() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_8414(%var_8386: int8, %var_8387: Tensor[(13, 14, 10), int8]) -> (Tensor[(13, 14, 10), int8], Tensor[(13, 14, 10), float64], Tensor[(13, 14, 10), float64]) {
  %1408 = cast(%var_8386, dtype="int8") /* ty=int8 */;
  %1409 = cast(%var_8387, dtype="int8") /* ty=Tensor[(13, 14, 10), int8] */;
  %1410 = cast(%var_8386, dtype="float64") /* ty=float64 */;
  %1411 = cast(%var_8387, dtype="float64") /* ty=Tensor[(13, 14, 10), float64] */;
  %1412 = cast(%var_8387, dtype="float64") /* ty=Tensor[(13, 14, 10), float64] */;
  %1413 = bitwise_and(%1408, %1409) /* ty=Tensor[(13, 14, 10), int8] */;
  %1414 = divide(%1410, %1411) /* ty=Tensor[(13, 14, 10), float64] */;
  %1415 = atanh(%1412) /* ty=Tensor[(13, 14, 10), float64] */;
  (%1413, %1414, %1415)
}

def @func_13165() -> Tensor[(2, 2, 1), float32] {
  %1417 = fn () -> Tensor[(2, 2, 1), float32] {
    %1416 = @func_11789() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
    %1416.1
  };
  %1417() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_8881() -> Tensor[(2, 2, 1), float32] {
  @func_8879() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_15126(%var_15124: Tensor[(1728), float32], %var_15125: Tensor[(4, 120), uint16]) -> (Tensor[(2, 2, 10), float64], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(4, 120), uint16]) {
  @func_15122(%var_15124, %var_15125) /* ty=(Tensor[(2, 2, 10), float64], Tensor[(2, 2, 1), float32], Tensor[(480), uint16], Tensor[(1728), float32], Tensor[(4, 120), uint16]) */
}

def @func_9845() -> (Tensor[(2, 2, 10), int32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
  %1424 = fn () -> (Tensor[(2, 2, 10), int32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) {
    %1418 = @func_7547() /* ty=(Tensor[(2, 2, 10), int32], Tensor[(2, 2, 1), float32]) */;
    %1419 = @func_4518() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, ?), float64]) */;
    %1420 = %1418.0;
    %1421 = %1419.0;
    %1422 = @func_6812() /* ty=Tensor[(5, 9, 5), bool] */;
    %1423 = @func_3608() /* ty=Tensor[(5, 9, 5), bool] */;
    (%1420, %1421, %1422, %1423)
  };
  %1424() /* ty=(Tensor[(2, 2, 10), int32], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool]) */
}

def @func_14158(%var_14157: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), float64], Tensor[(140), float32], Tensor[(480), uint16]) {
  %1431 = fn (%var_14120: Tensor[(480), uint16]) -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), float64], Tensor[(140), float32], Tensor[(480), uint16]) {
    %1425 = cast(%var_14120, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %1426 = reshape(%1425, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), uint16] */;
    %1427 = @func_493(%1426) /* ty=(Tensor[(4, 10, 12), uint16], Tensor[(14, 10, ?), float64], Tensor[(140), float32]) */;
    %1428 = @func_3045() /* ty=Tensor[(2, 2, 1), float32] */;
    %1429 = @func_6950() /* ty=Tensor[(5, 9, 5), float64] */;
    %1430 = %1427.2;
    (%1428, %1429, %1430, %var_14120)
  };
  %1431(%var_14157) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), float64], Tensor[(140), float32], Tensor[(480), uint16]) */
}

def @func_4939(%var_4937: Tensor[(2, 2, 12), float32]) -> Tensor[(2, 2, 12), int8] {
  @func_4936(%var_4937) /* ty=Tensor[(2, 2, 12), int8] */
}

def @func_7090() -> (float32,) {
  %1432 = @func_4161() /* ty=(float32,) */;
  %1433 = %1432.0;
  (%1433,)
}

def @func_16177(%var_16174: uint16, %var_16175: Tensor[(10, 6, 1), uint16], %var_16176: Tensor[(4, 16), float32]) -> (Tensor[(10, 6, 1), uint16], Tensor[(2, 2, 16), uint64], Tensor[(4, 16), float32]) {
  @func_16172(%var_16174, %var_16175, %var_16176) /* ty=(Tensor[(10, 6, 1), uint16], Tensor[(2, 2, 16), uint64], Tensor[(4, 16), float32]) */
}

def @func_15432() -> Tensor[(2, 2, 1), float32] {
  %1435 = fn () -> Tensor[(2, 2, 1), float32] {
    %1434 = @func_4843() /* ty=(Tensor[(2, 2, 1), float32],) */;
    %1434.0
  };
  %1435() /* ty=Tensor[(2, 2, 1), float32] */
}

def @func_12414(%var_12399: Tensor[(2, 2, 16), float32]) -> (Tensor[(2, 2, 16), uint64],) {
  %1436 = @func_4093() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
  %1437 = %1436.2;
  %1438 = cast(%1437, dtype="uint64") /* ty=Tensor[(2, 2, 1), uint64] */;
  %1439 = cast(%var_12399, dtype="uint64") /* ty=Tensor[(2, 2, 16), uint64] */;
  %1440 = minimum(%1438, %1439) /* ty=Tensor[(2, 2, 16), uint64] */;
  (%1440,)
}

def @func_16640() -> (Tensor[(2, 2, 1), float32], Tensor[(5, 9, 5), bool], Tensor[(480), uint16]) {
  %1441 = cast(meta[relay.Constant][51] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %1442 = reshape(%1441, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %1443 = @func_9783(%1442) /* ty=(Tensor[(5, 9, 5), bool], float32, float32, Tensor[(480), uint16], Tensor[(140, 1), float32]) */;
  %1444 = @func_6192() /* ty=Tensor[(2, 2, 1), float32] */;
  %1445 = %1443.0;
  (%1444, %1445, meta[relay.Constant][51] /* ty=Tensor[(480), uint16] */)
}

def @func_7836() -> (Tensor[(2, 2, 1), float32],) {
  %1446 = @func_3625() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1447 = %1446.0;
  (%1447,)
}

def @func_14539(%var_14537: Tensor[(336), int32]) -> (float32, Tensor[(2, 2, 1), float32], Tensor[(14, 6, 4), int32], Tensor[(336), int32]) {
  @func_14536(%var_14537) /* ty=(float32, Tensor[(2, 2, 1), float32], Tensor[(14, 6, 4), int32], Tensor[(336), int32]) */
}

def @func_16469() -> (Tensor[(2, 2, 1), float32], float32, float32, Tensor[(15, 9), float32], Tensor[(2, 2, 1), float32]) {
  %1462 = fn () -> (Tensor[(2, 2, 1), float32], float32, float32, Tensor[(15, 9), float32], Tensor[(2, 2, 1), float32]) {
    %1448 = @func_10211() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %1449 = @func_9430() /* ty=(float32, float32) */;
    %1450 = %1448.0;
    %1451 = cast(%1450, dtype="bool") /* ty=Tensor[(2, 2, 1), bool] */;
    %1452 = %1449.1;
    %1453 = cast(%1452, dtype="float32") /* ty=float32 */;
    %1454 = cast(meta[relay.Constant][52] /* ty=Tensor[(15, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
    %1455 = reshape(%1451, newshape=[2, 2, 1]) /* ty=Tensor[(2, 2, 1), bool] */;
    %1456 = reshape(%1453, newshape=[]) /* ty=float32 */;
    %1457 = reshape(%1454, newshape=[135]) /* ty=Tensor[(135), float32] */;
    %1458 = @func_13483(%1455, %1456, %1457) /* ty=(Tensor[(2, 2, ?), bool], Tensor[(2, 2, ?), float64], Tensor[(2, 2, ?), int32], Tensor[(5, 9, 5), bool], float32, Tensor[(135), float32]) */;
    %1459 = @func_11116() /* ty=(Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32]) */;
    %1460 = %1458.4;
    %1461 = %1459.1;
    (%1450, %1452, %1460, meta[relay.Constant][52] /* ty=Tensor[(15, 9), float32] */, %1461)
  };
  %1462() /* ty=(Tensor[(2, 2, 1), float32], float32, float32, Tensor[(15, 9), float32], Tensor[(2, 2, 1), float32]) */
}

def @func_16503() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  %1463 = @func_16405() /* ty=(Tensor[(5, 9, 5), bool],) */;
  %1464 = @func_12983() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1465 = %1463.0;
  %1466 = %1464.0;
  (%1465, %1466)
}

def @func_11789() -> (Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  %1467 = @func_3347() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */;
  %1468 = @func_7447() /* ty=(Tensor[(2, 2, 1), float32],) */;
  %1469 = %1467.0;
  %1470 = %1468.0;
  (%1469, %1470)
}

def @func_5574() -> (Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) {
  @func_5572() /* ty=(Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(5, 9, 5), bool], Tensor[(2, 2, 1), float32]) */
}

def @func_12506() -> (Tensor[(2, 2, 1), float32],) {
  %1471 = @func_9314() /* ty=Tensor[(2, 2, 1), float32] */;
  (%1471,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen943/build/output.py", line 4790, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:54:51] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

