==========mod==========
#[version = "0.0.5"]
def @func_1526() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) {
  %0 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %1 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %2 = @func_314() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %3 = @func_314() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %4 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %5 = %0.1;
  %6 = cast(%5, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %7 = reshape(%6, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), float32] */;
  %8 = @func_1011(%7) /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64]) */;
  %9 = @func_314() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %10 = %1.1;
  %11 = %2.0;
  %12 = @func_1074() /* ty=Tensor[(5, 11, 11), float32] */;
  %13 = %3.0;
  %14 = %4.0;
  %15 = %8.0;
  %16 = %9.0;
  (%5, %10, %11, %12, %13, %14, %15, %16)
}

def @func_12164() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
  %17 = @func_2550() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %18 = @func_2697() /* ty=Tensor[(5, 11, 11), uint64] */;
  %19 = %17.0;
  (%18, %19)
}

def @func_6438() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %20 = @func_4822() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %21 = @func_5158() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(15, 2, 16), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %22 = %20.0;
  %23 = %21.2;
  %24 = @func_889() /* ty=Tensor[(5, 11, 11), float32] */;
  (%22, %23, %24)
}

def @func_3659() -> Tensor[(5, 11, 11), float32] {
  @func_1074() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_10854() -> (Tensor[(5, 11, 11), float32],) {
  %25 = @func_2550() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %26 = %25.0;
  (%26,)
}

def @func_5938() -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) {
  %27 = @func_246() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
  %28 = @func_5818() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */;
  %29 = %27.2;
  %30 = %28.1;
  (%29, %30)
}

def @func_2882() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %31 = @func_1074() /* ty=Tensor[(5, 11, 11), float32] */;
  %32 = @func_1074() /* ty=Tensor[(5, 11, 11), float32] */;
  (%31, %32)
}

def @func_353() -> Tensor[(5, 11, 11), float32] {
  @func_133() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_1800() -> Tensor[(5, 11, 11), float32] {
  @func_889() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_3056(%var_3031: Tensor[(5, 11, 11), float32]) -> (Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(15, 2, 16), float64]) {
  %33 = @func_2976() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(10, 10, 1), float32], Tensor[(100), float32], Tensor[(15, 2, 16), float64]) */;
  %34 = %33.1;
  %35 = cast(%var_3031, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%34, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %39 = @func_2501() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %40 = less_equal(%37, %38) /* ty=Tensor[(5, 11, 11), bool] */;
  %41 = %39.0;
  %42 = @func_1881() /* ty=Tensor[(5, 11, 11), uint64] */;
  %43 = @func_1363() /* ty=Tensor[(15, 2, 16), float64] */;
  (%40, %41, %42, %43)
}

def @func_9328() -> (Tensor[(5, 11, 11), bool],) {
  %44 = @func_5659() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), bool]) */;
  %45 = %44.0;
  (%45,)
}

def @func_1761() -> (Tensor[(5, 11, 11), float32],) {
  %46 = @func_919() /* ty=Tensor[(5, 11, 11), float32] */;
  (%46,)
}

def @func_2093(%var_2046: Tensor[(9, 2, 6), float32]) -> (Tensor[(5, 11, 11), float32], Tensor[(9, 2, 6), float64]) {
  %47 = @func_818() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %48 = cast(%var_2046, dtype="float32") /* ty=Tensor[(9, 2, 6), float32] */;
  %49 = log10(%48) /* ty=Tensor[(9, 2, 6), float32] */;
  %50 = cast(%49, dtype="float64") /* ty=Tensor[(9, 2, 6), float64] */;
  %51 = %47.1;
  %52 = asinh(%50) /* ty=Tensor[(9, 2, 6), float64] */;
  (%51, %52)
}

def @func_3755() -> Tensor[(5, 11, 11), uint64] {
  %53 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %53.1
}

def @func_6865() -> (Tensor[(5, 11, 11), float32],) {
  %54 = @func_651() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) */;
  %55 = %54.5;
  (%55,)
}

def @func_7989(%var_7984: Tensor[(13, 14, 13), uint64], %var_7985: Tensor[(13, 14, 13), uint64]) -> (Tensor[(13, 14, 13), uint64],) {
  %56 = cast(%var_7985, dtype="uint64") /* ty=Tensor[(13, 14, 13), uint64] */;
  %57 = shape_of(%var_7984, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%var_7984, dtype="uint64") /* ty=Tensor[(13, 14, 13), uint64] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %60 = bitwise_or(%58, %59) /* ty=Tensor[(13, 14, 13), uint64] */;
  (%60,)
}

def @func_12191(%var_12169: Tensor[(13, 6, 12), float32], %var_12176: Tensor[(77), float32], %var_12177: Tensor[(480), int32]) -> (Tensor[(13, 6, 12), float32], Tensor[(11, 12, 2), bool], Tensor[(77), float32], Tensor[(480), int32], Tensor[(4, 14, 13), bool], Tensor[(728), int32]) {
  %61 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 6, 12), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %62 = shape_of(%var_12169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%var_12169, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %65 = cast(%var_12176, dtype="float32") /* ty=Tensor[(77), float32] */;
  %66 = cast(%var_12177, dtype="int32") /* ty=Tensor[(480), int32] */;
  %67 = reshape(%65, newshape=[77]) /* ty=Tensor[(77), float32] */;
  %68 = reshape(%66, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %69 = @func_8724(%67, %68) /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32], Tensor[(13, 3, 8), uint8], Tensor[(11, 12, 2), bool], Tensor[(77), float32], Tensor[(264), bool], Tensor[(480), int32]) */;
  %70 = cast(meta[relay.Constant][1] /* ty=Tensor[(728), int32] */, dtype="int32") /* ty=Tensor[(728), int32] */;
  %71 = reshape(%70, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), int32] */;
  %72 = @func_10580(%71) /* ty=(Tensor[(4, 14, 13), bool], Tensor[(4, 14, 13), int16]) */;
  %73 = minimum(%63, %64) /* ty=Tensor[(13, 6, 12), float32] */;
  %74 = %69.3;
  %75 = %72.0;
  (%73, %74, %var_12176, %var_12177, %75, meta[relay.Constant][1] /* ty=Tensor[(728), int32] */)
}

def @func_5056() -> Tensor[(5, 11, 11), float32] {
  @func_919() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_8175() -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) {
  %76 = @func_5938() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %77 = @func_2501() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %78 = %76.0;
  %79 = %77.0;
  (%78, %79)
}

def @func_2422(%var_2408: Tensor[(1170, 1), int64]) -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(15, 6, 13), int64], Tensor[(1170, 1), int64], Tensor[(5, 11, 11), float32]) {
  %80 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %81 = cast(%var_2408, dtype="int64") /* ty=Tensor[(1170, 1), int64] */;
  %82 = reshape(%81, newshape=[15, 6, 13]) /* ty=Tensor[(15, 6, 13), int64] */;
  %83 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %84 = %80.1;
  %85 = @func_798() /* ty=Tensor[(5, 11, 11), float32] */;
  %86 = @func_1110(%82) /* ty=Tensor[(15, 6, 13), int64] */;
  %87 = %83.0;
  (%84, %85, %86, %var_2408, %87)
}

def @func_10355() -> (Tensor[(5, 11, 11), float32],) {
  %88 = @func_2389() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %89 = %88.0;
  (%89,)
}

def @func_133() -> Tensor[(5, 11, 11), float32] {
  %90 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 11, 11), float32] */, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  log(%90) /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_5158() -> (Tensor[(5, 11, 11), uint64], Tensor[(15, 2, 16), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %91 = @func_1363() /* ty=Tensor[(15, 2, 16), float64] */;
  %92 = cast(%91, dtype="float32") /* ty=Tensor[(15, 2, 16), float32] */;
  %93 = @func_2697() /* ty=Tensor[(5, 11, 11), uint64] */;
  %94 = sin(%92) /* ty=Tensor[(15, 2, 16), float32] */;
  %95 = @func_4267() /* ty=Tensor[(5, 11, 11), float32] */;
  %96 = @func_133() /* ty=Tensor[(5, 11, 11), float32] */;
  (%93, %94, %95, %96)
}

def @func_3190() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %97 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %98 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %99 = %97.0;
  %100 = %98.0;
  (%99, %100)
}

def @func_4418() -> (Tensor[(5, 11, 11), float32],) {
  %101 = @func_3190() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %102 = %101.0;
  (%102,)
}

def @func_4822() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %103 = @func_1940() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
  %104 = @func_841() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %105 = @func_1210() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %106 = %103.0;
  %107 = %104.0;
  %108 = %105.0;
  (%106, %107, %108)
}

def @func_4878() -> Tensor[(5, 11, 11), float32] {
  %109 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %109.0
}

def @func_5359(%var_5347: Tensor[(3, 14, 2), float32]) -> (Tensor[(3, 14, 2), float64],) {
  %110 = cast(%var_5347, dtype="float32") /* ty=Tensor[(3, 14, 2), float32] */;
  %111 = erf(%110) /* ty=Tensor[(3, 14, 2), float32] */;
  %112 = cast(%111, dtype="float64") /* ty=Tensor[(3, 14, 2), float64] */;
  %113 = cos(%112) /* ty=Tensor[(3, 14, 2), float64] */;
  (%113,)
}

def @func_5327() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int64]) {
  %114 = @func_4489() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %115 = @func_1940() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
  %116 = @func_4138() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), int64]) */;
  %117 = %114.0;
  %118 = %115.1;
  %119 = %116.1;
  (%117, %118, %119)
}

def @func_9408() -> Tensor[(5, 11, 11), float32] {
  %120 = @func_2550() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %120.0
}

def @func_3284() -> (Tensor[(5, 11, 11), float32],) {
  %121 = @func_818() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %122 = %121.1;
  (%122,)
}

def @func_9720() -> Tensor[(5, 11, 11), float32] {
  %123 = @func_2389() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %123.0
}

def @func_603() -> (Tensor[(5, 11, 11), float32],) {
  %124 = @func_353() /* ty=Tensor[(5, 11, 11), float32] */;
  (%124,)
}

def @func_4379(%var_4366: Tensor[(4, 14, 9), float32], %var_4367: Tensor[(4, 14, 9), float32]) -> (Tensor[(4, 14, 9), float32], Tensor[(5, 11, 11), uint64]) {
  %125 = cast(%var_4367, dtype="float32") /* ty=Tensor[(4, 14, 9), float32] */;
  %126 = shape_of(%var_4366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%var_4366, dtype="float32") /* ty=Tensor[(4, 14, 9), float32] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %129 = mod(%127, %128) /* ty=Tensor[(4, 14, 9), float32] */;
  %130 = @func_2697() /* ty=Tensor[(5, 11, 11), uint64] */;
  (%129, %130)
}

def @func_10580(%var_10566: Tensor[(4, 14, 13), int32]) -> (Tensor[(4, 14, 13), bool], Tensor[(4, 14, 13), int16]) {
  %131 = cast(%var_10566, dtype="bool") /* ty=Tensor[(4, 14, 13), bool] */;
  %132 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(4, 14, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 14, 13), int32] */, dtype="bool") /* ty=Tensor[(4, 14, 13), bool] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %135 = cast(%var_10566, dtype="int16") /* ty=Tensor[(4, 14, 13), int16] */;
  %136 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(4, 14, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 14, 13), int32] */, dtype="int16") /* ty=Tensor[(4, 14, 13), int16] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %139 = equal(%133, %134) /* ty=Tensor[(4, 14, 13), bool] */;
  %140 = right_shift(%137, %138) /* ty=Tensor[(4, 14, 13), int16] */;
  (%139, %140)
}

def @func_7828() -> Tensor[(13, 3, 8), float64] {
  %141 = @func_4346() /* ty=(Tensor[(13, 3, 8), float64],) */;
  %141.0
}

def @func_560(%var_554: bool, %var_555: Tensor[(14, 14, 9), bool]) -> (Tensor[(14, 14, 9), bool],) {
  %142 = cast(%var_554, dtype="bool") /* ty=bool */;
  %143 = cast(%var_555, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
  %144 = logical_or(%142, %143) /* ty=Tensor[(14, 14, 9), bool] */;
  (%144,)
}

def @func_5659() -> (Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), bool]) {
  %145 = @func_4138() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), int64]) */;
  %146 = @func_4138() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), int64]) */;
  %147 = %145.0;
  %148 = %146.0;
  (%147, %148)
}

def @func_2474(%var_2445: Tensor[(3, 588), float64]) -> (Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), float32], Tensor[(1764), int32], Tensor[(3, 588), float64], Tensor[(5, 11, 11), uint64]) {
  %149 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %150 = @func_1940() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
  %151 = cast(%var_2445, dtype="float64") /* ty=Tensor[(3, 588), float64] */;
  %152 = reshape(%151, newshape=[1764]) /* ty=Tensor[(1764), float64] */;
  %153 = @func_1996(%152) /* ty=(Tensor[(1764), int32], Tensor[(1764), bool], Tensor[(5, 11, 11), int64]) */;
  %154 = %150.0;
  %155 = cast(%154, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %156 = reshape(%155, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), float32] */;
  %157 = @func_1011(%156) /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64]) */;
  %158 = %149.0;
  %159 = %153.0;
  %160 = %157.1;
  (%158, %154, %159, %var_2445, %160)
}

def @func_1996(%var_1976: Tensor[(1764), float64]) -> (Tensor[(1764), int32], Tensor[(1764), bool], Tensor[(5, 11, 11), int64]) {
  %161 = @func_1718() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(1764), uint8], Tensor[(1764), float64], Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) */;
  %162 = %161.3;
  %163 = cast(%var_1976, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(1), int32] */;
  %165 = cast(%162, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?), bool] */;
  %167 = greater(%165, %166) /* ty=Tensor[(1764), bool] */;
  %168 = cast(%167, dtype="float32") /* ty=Tensor[(1764), float32] */;
  %169 = acosh(%168) /* ty=Tensor[(1764), float32] */;
  %170 = cast(%162, dtype="int32") /* ty=Tensor[(1764), int32] */;
  %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(1), int32] */;
  %172 = cast(%169, dtype="int32") /* ty=Tensor[(1764), int32] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?), int32] */;
  %174 = @func_651() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) */;
  %175 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %176 = bitwise_or(%172, %173) /* ty=Tensor[(1764), int32] */;
  %177 = %174.2;
  %178 = %175.0;
  (%176, %177, %178)
}

def @func_8425(%var_8374: Tensor[(2, 4, 5), float64], %var_8394: Tensor[(2, 4, 5), float64]) -> (Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), float32], Tensor[(2, 4, 5), float64], Tensor[(2, 4, 5), float64], Tensor[(2, 4, 5), float32]) {
  %179 = @func_7311() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), int64]) */;
  %180 = cast(%var_8374, dtype="float64") /* ty=Tensor[(2, 4, 5), float64] */;
  %181 = cast(%var_8374, dtype="float64") /* ty=Tensor[(2, 4, 5), float64] */;
  %182 = sinh(%181) /* ty=Tensor[(2, 4, 5), float64] */;
  %183 = cast(%var_8394, dtype="float64") /* ty=Tensor[(2, 4, 5), float64] */;
  %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%182, dtype="float64") /* ty=Tensor[(2, 4, 5), float64] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %187 = cast(%182, dtype="float32") /* ty=Tensor[(2, 4, 5), float32] */;
  %188 = %179.1;
  %189 = @func_3260() /* ty=Tensor[(5, 11, 11), float32] */;
  %190 = asinh(%180) /* ty=Tensor[(2, 4, 5), float64] */;
  %191 = mod(%185, %186) /* ty=Tensor[(2, 4, 5), float64] */;
  %192 = sigmoid(%187) /* ty=Tensor[(2, 4, 5), float32] */;
  (%188, %189, %190, %191, %192)
}

def @func_3260() -> Tensor[(5, 11, 11), float32] {
  %193 = @func_818() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %193.1
}

def @func_8120() -> (Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) {
  %194 = @func_7311() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), int64]) */;
  %195 = %194.0;
  %196 = @func_5056() /* ty=Tensor[(5, 11, 11), float32] */;
  (%195, %196)
}

def @func_6681() -> (Tensor[(5, 11, 11), float32],) {
  %197 = @func_3260() /* ty=Tensor[(5, 11, 11), float32] */;
  (%197,)
}

def @func_2264(%var_2235: Tensor[(2, 13, 6), float32], %var_2244: Tensor[(2, 13, 6), float32]) -> Tensor[(2, 13, 6), uint64] {
  %198 = cast(%var_2235, dtype="float32") /* ty=Tensor[(2, 13, 6), float32] */;
  %199 = sigmoid(%198) /* ty=Tensor[(2, 13, 6), float32] */;
  %200 = cast(%199, dtype="float64") /* ty=Tensor[(2, 13, 6), float64] */;
  %201 = sinh(%200) /* ty=Tensor[(2, 13, 6), float64] */;
  %202 = cast(%var_2244, dtype="bool") /* ty=Tensor[(2, 13, 6), bool] */;
  %203 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%199, dtype="bool") /* ty=Tensor[(2, 13, 6), bool] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %206 = less_equal(%204, %205) /* ty=Tensor[(2, 13, 6), bool] */;
  %207 = cast(%206, dtype="uint64") /* ty=Tensor[(2, 13, 6), uint64] */;
  %208 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%201, dtype="uint64") /* ty=Tensor[(2, 13, 6), uint64] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_and(%209, %210) /* ty=Tensor[(2, 13, 6), uint64] */
}

def @func_3852() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) {
  %211 = @func_2780() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %212 = @func_1319() /* ty=Tensor[(5, 11, 11), float32] */;
  %213 = cast(%212, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
  %214 = %211.0;
  %215 = @func_2527() /* ty=Tensor[(5, 11, 11), float32] */;
  %216 = atanh(%213) /* ty=Tensor[(5, 11, 11), float64] */;
  (%214, %215, %216)
}

def @func_7005(%var_7000: Tensor[(6, 14, 6), float32]) -> Tensor[(6, 14, 6), float32] {
  %217 = cast(%var_7000, dtype="float32") /* ty=Tensor[(6, 14, 6), float32] */;
  sin(%217) /* ty=Tensor[(6, 14, 6), float32] */
}

def @func_3558() -> Tensor[(5, 11, 11), float32] {
  %218 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %218.0
}

def @func_8093(%var_8047: Tensor[(6, 84), float32], %var_8058: Tensor[(3, 104), float64], %var_8081: Tensor[(4, 120), int32]) -> (Tensor[(5, 11, 11), float32], Tensor[(6, 14, 6), float32], Tensor[(6, 84), float32], Tensor[(2, 13, 6), uint64], Tensor[(156), float32], Tensor[(3, 104), int32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(4, 120), float32], Tensor[(5, 11, 11), float64]) {
  %219 = @func_3489() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %220 = cast(%var_8047, dtype="float32") /* ty=Tensor[(6, 84), float32] */;
  %221 = reshape(%220, newshape=[6, 14, 6]) /* ty=Tensor[(6, 14, 6), float32] */;
  %222 = cast(meta[relay.Constant][4] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %223 = cast(meta[relay.Constant][4] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %224 = reshape(%222, newshape=[2, 13, 6]) /* ty=Tensor[(2, 13, 6), float32] */;
  %225 = reshape(%223, newshape=[2, 13, 6]) /* ty=Tensor[(2, 13, 6), float32] */;
  %226 = cast(%var_8058, dtype="float64") /* ty=Tensor[(3, 104), float64] */;
  %227 = cast(%var_8058, dtype="float64") /* ty=Tensor[(3, 104), float64] */;
  %228 = reshape(%226, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float64] */;
  %229 = reshape(%227, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float64] */;
  %230 = @func_7531(%228, %229) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(13, 8, 3), float64]) */;
  %231 = %230.1;
  %232 = cast(%231, dtype="int32") /* ty=Tensor[(13, 8, 3), int32] */;
  %233 = shape_of(%var_8058, dtype="int32") /* ty=Tensor[(2), int32] */;
  %234 = cast(%var_8058, dtype="int32") /* ty=Tensor[(3, 104), int32] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %236 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 120), int32] */, dtype="int32") /* ty=Tensor[(4, 120), int32] */;
  %237 = reshape(%236, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %238 = @func_4551(%237) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(480), int32], Tensor[(480), int32], Tensor[(5, 11, 11), bool]) */;
  %239 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %240 = cast(%var_8081, dtype="float32") /* ty=Tensor[(4, 120), float32] */;
  %241 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(4, 120), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %242 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 120), int32] */, dtype="float32") /* ty=Tensor[(4, 120), float32] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %244 = @func_5327() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int64]) */;
  %245 = %219.2;
  %246 = @func_7005(%221) /* ty=Tensor[(6, 14, 6), float32] */;
  %247 = @func_2264(%224, %225) /* ty=Tensor[(2, 13, 6), uint64] */;
  %248 = bitwise_xor(%234, %235) /* ty=Tensor[(3, 104), int32] */;
  %249 = %238.3;
  %250 = @func_8009() /* ty=Tensor[(5, 11, 11), float32] */;
  %251 = %239.6;
  %252 = mod(%242, %243) /* ty=Tensor[(4, 120), float32] */;
  %253 = %244.1;
  (%245, %246, %var_8047, %247, meta[relay.Constant][4] /* ty=Tensor[(156), float32] */, %248, %249, %250, %251, %252, %253)
}

def @func_9110() -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float64]) {
  %254 = @func_8175() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %255 = @func_5938() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %256 = %254.0;
  %257 = %255.0;
  (%256, %257)
}

def @func_10394() -> (Tensor[(5, 11, 11), uint64],) {
  %258 = @func_7931() /* ty=(Tensor[(5, 11, 11), uint64],) */;
  %259 = %258.0;
  (%259,)
}

def @func_1881() -> Tensor[(5, 11, 11), uint64] {
  %260 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %260.1
}

def @func_4962() -> (Tensor[(5, 11, 11), bool], Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) {
  %261 = @func_4138() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), int64]) */;
  %262 = @func_2501() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %263 = %261.0;
  %264 = @func_1538() /* ty=Tensor[(15, 2, 16), float64] */;
  %265 = %262.0;
  (%263, %264, %265)
}

def @func_6313(%var_6252: Tensor[(7, 11, 1), float32], %var_6260: Tensor[(6, 44), bool], %var_6307: Tensor[(480), int32]) -> (Tensor[(11, 12, 2), bool], Tensor[(6, 44), bool], Tensor[(7, 11, 1), float64], Tensor[(5, 11, 11), int32], Tensor[(605), float32], Tensor[(480), int32], Tensor[(480), int32]) {
  %266 = cast(%var_6260, dtype="bool") /* ty=Tensor[(6, 44), bool] */;
  %267 = cast(%var_6260, dtype="bool") /* ty=Tensor[(6, 44), bool] */;
  %268 = reshape(%266, newshape=[11, 12, 2]) /* ty=Tensor[(11, 12, 2), bool] */;
  %269 = reshape(%267, newshape=[11, 12, 2]) /* ty=Tensor[(11, 12, 2), bool] */;
  %270 = @func_2143(%268, %269) /* ty=(Tensor[(11, 12, 2), bool], Tensor[(5, 11, 11), float32]) */;
  %271 = cast(%var_6252, dtype="float32") /* ty=Tensor[(7, 11, 1), float32] */;
  %272 = rsqrt(%271) /* ty=Tensor[(7, 11, 1), float32] */;
  %273 = cast(%272, dtype="float64") /* ty=Tensor[(7, 11, 1), float64] */;
  %274 = cast(meta[relay.Constant][6] /* ty=Tensor[(605), float32] */, dtype="float32") /* ty=Tensor[(605), float32] */;
  %275 = reshape(%274, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), float32] */;
  %276 = @func_5092(%275) /* ty=(Tensor[(5, 11, 11), int32], Tensor[(5, 11, 11), float32]) */;
  %277 = cast(%var_6307, dtype="int32") /* ty=Tensor[(480), int32] */;
  %278 = reshape(%277, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %279 = @func_4551(%278) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(480), int32], Tensor[(480), int32], Tensor[(5, 11, 11), bool]) */;
  %280 = %270.0;
  %281 = log2(%273) /* ty=Tensor[(7, 11, 1), float64] */;
  %282 = %276.0;
  %283 = %279.1;
  (%280, %var_6260, %281, %282, meta[relay.Constant][6] /* ty=Tensor[(605), float32] */, %283, %var_6307)
}

def @func_2976() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(10, 10, 1), float32], Tensor[(100), float32], Tensor[(15, 2, 16), float64]) {
  %284 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %285 = cast(meta[relay.Constant][7] /* ty=Tensor[(100), float32] */, dtype="float32") /* ty=Tensor[(100), float32] */;
  %286 = reshape(%285, newshape=[10, 10, 1]) /* ty=Tensor[(10, 10, 1), float32] */;
  %287 = @func_2816(%286) /* ty=(Tensor[(10, 10, 1), float32],) */;
  %288 = %284.1;
  %289 = @func_2527() /* ty=Tensor[(5, 11, 11), float32] */;
  %290 = %287.0;
  %291 = @func_1363() /* ty=Tensor[(15, 2, 16), float64] */;
  (%288, %289, %290, meta[relay.Constant][7] /* ty=Tensor[(100), float32] */, %291)
}

def @func_2816(%var_2794: Tensor[(10, 10, 1), float32]) -> (Tensor[(10, 10, 1), float32],) {
  %292 = cast(%var_2794, dtype="float32") /* ty=Tensor[(10, 10, 1), float32] */;
  %293 = cos(%292) /* ty=Tensor[(10, 10, 1), float32] */;
  (%293,)
}

def @func_8926() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
  %294 = @func_3067() /* ty=(Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) */;
  %295 = @func_5378() /* ty=Tensor[(5, 11, 11), float32] */;
  %296 = @func_8232() /* ty=Tensor[(5, 11, 11), uint64] */;
  %297 = %294.1;
  (%295, %296, %297)
}

def @func_4267() -> Tensor[(5, 11, 11), float32] {
  %298 = @func_1800() /* ty=Tensor[(5, 11, 11), float32] */;
  %299 = cast(%298, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  cos(%299) /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_1727() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %300 = @func_1319() /* ty=Tensor[(5, 11, 11), float32] */;
  %301 = @func_889() /* ty=Tensor[(5, 11, 11), float32] */;
  (%300, %301)
}

def @func_1110(%var_1095: Tensor[(15, 6, 13), int64]) -> Tensor[(15, 6, 13), int64] {
  %302 = cast(%var_1095, dtype="int64") /* ty=Tensor[(15, 6, 13), int64] */;
  %303 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(15, 6, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(meta[relay.Constant][8] /* ty=Tensor[(15, 6, 13), int64] */, dtype="int64") /* ty=Tensor[(15, 6, 13), int64] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  left_shift(%304, %305) /* ty=Tensor[(15, 6, 13), int64] */
}

def @func_9890(%var_9862: Tensor[(12, 15, 11), float32]) -> (Tensor[(12, 15, 11), float32], Tensor[(5, 11, 11), float32]) {
  %306 = cast(%var_9862, dtype="float32") /* ty=Tensor[(12, 15, 11), float32] */;
  %307 = @func_841() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %308 = sigmoid(%306) /* ty=Tensor[(12, 15, 11), float32] */;
  %309 = %307.0;
  (%308, %309)
}

def @func_9293() -> (Tensor[(15, 2, 16), float64],) {
  %310 = @func_2289() /* ty=(Tensor[(15, 2, 16), float64],) */;
  %311 = %310.0;
  (%311,)
}

def @func_10046() -> (Tensor[(5, 11, 11), uint64],) {
  %312 = @func_4002() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */;
  %313 = %312.0;
  (%313,)
}

def @func_808() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool]) {
  %314 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %315 = @func_782() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
  %316 = %314.0;
  %317 = %315.0;
  (%316, %317)
}

def @func_7049() -> (Tensor[(5, 11, 11), bool],) {
  %318 = @func_4138() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), int64]) */;
  %319 = %318.0;
  (%319,)
}

def @func_1319() -> Tensor[(5, 11, 11), float32] {
  %320 = @func_1210() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %320.1
}

def @func_8232() -> Tensor[(5, 11, 11), uint64] {
  %321 = @func_3650() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64]) */;
  %321.1
}

def @func_4002() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
  %322 = @func_1718() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(1764), uint8], Tensor[(1764), float64], Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) */;
  %323 = @func_2389() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %324 = %322.0;
  %325 = %323.0;
  (%324, %325)
}

def @func_8837() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(504), float32], Tensor[(5, 11, 11), float32]) {
  %326 = @func_4822() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %327 = @func_3650() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64]) */;
  %328 = %326.1;
  %329 = cast(%328, dtype="int64") /* ty=Tensor[(5, 11, 11), int64] */;
  %330 = reshape(%329, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), int64] */;
  %331 = @func_3128(%330) /* ty=(Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32]) */;
  %332 = cast(meta[relay.Constant][9] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %333 = cast(meta[relay.Constant][9] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %334 = reshape(%332, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), float32] */;
  %335 = reshape(%333, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), float32] */;
  %336 = @func_4379(%334, %335) /* ty=(Tensor[(4, 14, 9), float32], Tensor[(5, 11, 11), uint64]) */;
  %337 = @func_1881() /* ty=Tensor[(5, 11, 11), uint64] */;
  %338 = %327.0;
  %339 = %331.1;
  %340 = %336.1;
  %341 = @func_889() /* ty=Tensor[(5, 11, 11), float32] */;
  (%337, %328, %338, %339, %340, meta[relay.Constant][9] /* ty=Tensor[(504), float32] */, %341)
}

def @func_919() -> Tensor[(5, 11, 11), float32] {
  %342 = @func_353() /* ty=Tensor[(5, 11, 11), float32] */;
  %343 = cast(%342, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  rsqrt(%343) /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_1011(%var_1001: Tensor[(5, 11, 11), float32]) -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64]) {
  %344 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %345 = %344.0;
  %346 = cast(%345, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %347 = erf(%346) /* ty=Tensor[(5, 11, 11), float32] */;
  %348 = @func_741() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], bool, Tensor[(1764), float64]) */;
  %349 = %348.2;
  %350 = cast(%347, dtype="uint64") /* ty=Tensor[(5, 11, 11), uint64] */;
  %351 = cast(%349, dtype="uint64") /* ty=uint64 */;
  %352 = cast(%var_1001, dtype="uint64") /* ty=Tensor[(5, 11, 11), uint64] */;
  %353 = shape_of(%345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%345, dtype="uint64") /* ty=Tensor[(5, 11, 11), uint64] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %356 = maximum(%350, %351) /* ty=Tensor[(5, 11, 11), uint64] */;
  %357 = right_shift(%354, %355) /* ty=Tensor[(5, 11, 11), uint64] */;
  (%356, %357)
}

def @func_7113(%var_7087: Tensor[(16, 1, 2), bool], %var_7088: Tensor[(16, 14, 2), bool]) -> (Tensor[(16, 14, 2), bool],) {
  %358 = cast(%var_7087, dtype="bool") /* ty=Tensor[(16, 1, 2), bool] */;
  %359 = cast(%var_7088, dtype="bool") /* ty=Tensor[(16, 14, 2), bool] */;
  %360 = logical_or(%358, %359) /* ty=Tensor[(16, 14, 2), bool] */;
  (%360,)
}

def @func_9853() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(126, 14), float64]) {
  %361 = @func_7704() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %362 = cast(meta[relay.Constant][10] /* ty=Tensor[(126, 14), float64] */, dtype="float64") /* ty=Tensor[(126, 14), float64] */;
  %363 = reshape(%362, newshape=[3, 588]) /* ty=Tensor[(3, 588), float64] */;
  %364 = @func_2474(%363) /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), float32], Tensor[(1764), int32], Tensor[(3, 588), float64], Tensor[(5, 11, 11), uint64]) */;
  %365 = %361.1;
  %366 = %364.4;
  (%365, %366, meta[relay.Constant][10] /* ty=Tensor[(126, 14), float64] */)
}

def @func_10231() -> (Tensor[(5, 11, 11), float32], Tensor[(10, 10, 1), float32], Tensor[(100), float32]) {
  %367 = @func_6404() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %368 = cast(meta[relay.Constant][11] /* ty=Tensor[(100), float32] */, dtype="float32") /* ty=Tensor[(100), float32] */;
  %369 = reshape(%368, newshape=[10, 10, 1]) /* ty=Tensor[(10, 10, 1), float32] */;
  %370 = @func_2816(%369) /* ty=(Tensor[(10, 10, 1), float32],) */;
  %371 = %367.0;
  %372 = %370.0;
  (%371, %372, meta[relay.Constant][11] /* ty=Tensor[(100), float32] */)
}

def @func_10977() -> (Tensor[(5, 11, 11), float32], Tensor[(13, 3, 8), float64]) {
  %373 = @func_4489() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %374 = @func_4346() /* ty=(Tensor[(13, 3, 8), float64],) */;
  %375 = %373.0;
  %376 = %374.0;
  (%375, %376)
}

def @func_11242() -> (Tensor[(5, 11, 11), bool],) {
  %377 = @func_314() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %378 = %377.0;
  (%378,)
}

def @func_12375() -> (Tensor[(5, 11, 11), bool],) {
  %379 = @func_5598() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), bool]) */;
  %380 = %379.1;
  (%380,)
}

def @func_12214() -> (Tensor[(5, 11, 11), bool], Tensor[(13, 3, 8), float64]) {
  %381 = @func_11406() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %382 = @func_4346() /* ty=(Tensor[(13, 3, 8), float64],) */;
  %383 = %381.0;
  %384 = %382.0;
  (%383, %384)
}

def @func_6220(%var_6169: Tensor[(14, 12, 2), float64]) -> (Tensor[(14, 12, 2), float64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %385 = cast(%var_6169, dtype="float64") /* ty=Tensor[(14, 12, 2), float64] */;
  %386 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %387 = @func_4489() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %388 = sinh(%385) /* ty=Tensor[(14, 12, 2), float64] */;
  %389 = %386.0;
  %390 = @func_133() /* ty=Tensor[(5, 11, 11), float32] */;
  %391 = %387.0;
  %392 = @func_5056() /* ty=Tensor[(5, 11, 11), float32] */;
  (%388, %389, %390, %391, %392)
}

def @func_8009() -> Tensor[(5, 11, 11), float32] {
  %393 = @func_1761() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %393.0
}

def @func_3321(%var_3310: Tensor[(108), float32]) -> (Tensor[(5, 11, 11), bool], Tensor[(9, 2, 6), float64], Tensor[(108), float32]) {
  %394 = @func_314() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %395 = cast(%var_3310, dtype="float32") /* ty=Tensor[(108), float32] */;
  %396 = reshape(%395, newshape=[9, 2, 6]) /* ty=Tensor[(9, 2, 6), float32] */;
  %397 = @func_2093(%396) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(9, 2, 6), float64]) */;
  %398 = %394.0;
  %399 = %397.1;
  (%398, %399, %var_3310)
}

def @func_5507(%var_5497: Tensor[(12, 18), float32]) -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int64], Tensor[(3, 9, 8), float32], Tensor[(12, 18), float32]) {
  %400 = @func_782() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
  %401 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %402 = cast(%var_5497, dtype="float32") /* ty=Tensor[(12, 18), float32] */;
  %403 = cast(%var_5497, dtype="float32") /* ty=Tensor[(12, 18), float32] */;
  %404 = reshape(%402, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), float32] */;
  %405 = reshape(%403, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), float32] */;
  %406 = %400.1;
  %407 = %401.0;
  %408 = @func_4858(%404, %405) /* ty=Tensor[(3, 9, 8), float32] */;
  (%406, %407, %408, %var_5497)
}

def @func_6597() -> (Tensor[(5, 11, 11), float32],) {
  %409 = @func_3852() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
  %410 = %409.0;
  (%410,)
}

def @func_1267() -> (Tensor[(5, 11, 11), float32],) {
  %411 = @func_889() /* ty=Tensor[(5, 11, 11), float32] */;
  (%411,)
}

def @func_798() -> Tensor[(5, 11, 11), float32] {
  @func_133() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_5733() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float64], Tensor[(12, ?, 15), uint32]) {
  %412 = @func_2882() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %413 = @func_3650() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64]) */;
  %414 = @func_2289() /* ty=(Tensor[(15, 2, 16), float64],) */;
  %415 = cast(meta[relay.Constant][12] /* ty=Tensor[(12, 1, 15), float32] */, dtype="float32") /* ty=Tensor[(12, 1, 15), float32] */;
  %416 = log10(%415) /* ty=Tensor[(12, 1, 15), float32] */;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(12, 1, 15), float64] */;
  %418 = cos(%417) /* ty=Tensor[(12, 1, 15), float64] */;
  %419 = cast(meta[relay.Constant][12] /* ty=Tensor[(12, 1, 15), float32] */, dtype="uint32") /* ty=Tensor[(12, 1, 15), uint32] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%418, dtype="uint32") /* ty=Tensor[(12, 1, 15), uint32] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %423 = %412.0;
  %424 = %413.0;
  %425 = %414.0;
  %426 = bitwise_xor(%421, %422) /* ty=Tensor[(12, ?, 15), uint32] */;
  (%423, %424, %425, %426)
}

def @func_8322() -> Tensor[(5, 11, 11), uint64] {
  %427 = @func_4002() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */;
  %427.0
}

def @func_889() -> Tensor[(5, 11, 11), float32] {
  %428 = @func_841() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %428.0
}

def @func_8724(%var_8720: Tensor[(77), float32], %var_8722: Tensor[(480), int32]) -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32], Tensor[(13, 3, 8), uint8], Tensor[(11, 12, 2), bool], Tensor[(77), float32], Tensor[(264), bool], Tensor[(480), int32]) {
  %429 = @func_246() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
  %430 = @func_6404() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %431 = @func_7828() /* ty=Tensor[(13, 3, 8), float64] */;
  %432 = @func_7828() /* ty=Tensor[(13, 3, 8), float64] */;
  %433 = cast(%432, dtype="uint8") /* ty=Tensor[(13, 3, 8), uint8] */;
  %434 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%431, dtype="uint8") /* ty=Tensor[(13, 3, 8), uint8] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %437 = cast(%var_8720, dtype="float32") /* ty=Tensor[(77), float32] */;
  %438 = cast(meta[relay.Constant][13] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %439 = cast(%var_8722, dtype="int32") /* ty=Tensor[(480), int32] */;
  %440 = reshape(%437, newshape=[7, 11, 1]) /* ty=Tensor[(7, 11, 1), float32] */;
  %441 = reshape(%438, newshape=[6, 44]) /* ty=Tensor[(6, 44), bool] */;
  %442 = reshape(%439, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %443 = @func_6313(%440, %441, %442) /* ty=(Tensor[(11, 12, 2), bool], Tensor[(6, 44), bool], Tensor[(7, 11, 1), float64], Tensor[(5, 11, 11), int32], Tensor[(605), float32], Tensor[(480), int32], Tensor[(480), int32]) */;
  %444 = %429.2;
  %445 = %430.0;
  %446 = minimum(%435, %436) /* ty=Tensor[(13, 3, 8), uint8] */;
  %447 = %443.0;
  (%444, %445, %446, %447, %var_8720, meta[relay.Constant][13] /* ty=Tensor[(264), bool] */, %var_8722)
}

def @func_7497() -> (Tensor[(5, 11, 11), int16],) {
  %448 = @func_2976() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(10, 10, 1), float32], Tensor[(100), float32], Tensor[(15, 2, 16), float64]) */;
  %449 = %448.0;
  %450 = @func_5158() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(15, 2, 16), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %451 = %450.3;
  %452 = cast(%451, dtype="int16") /* ty=Tensor[(5, 11, 11), int16] */;
  %453 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%449, dtype="int16") /* ty=Tensor[(5, 11, 11), int16] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %456 = add(%454, %455) /* ty=Tensor[(5, 11, 11), int16] */;
  (%456,)
}

def @func_651() -> (Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) {
  %457 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %458 = cast(meta[relay.Constant][14] /* ty=Tensor[(1764), bool] */, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %459 = reshape(%457, newshape=[]) /* ty=bool */;
  %460 = reshape(%458, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), bool] */;
  %461 = @func_560(%459, %460) /* ty=(Tensor[(14, 14, 9), bool],) */;
  %462 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 13, 7), float32] */, dtype="float32") /* ty=Tensor[(6, 13, 7), float32] */;
  %463 = sigmoid(%462) /* ty=Tensor[(6, 13, 7), float32] */;
  %464 = cast(%463, dtype="float64") /* ty=Tensor[(6, 13, 7), float64] */;
  %465 = cast(True /* ty=bool */, dtype="float64") /* ty=float64 */;
  %466 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %467 = @func_353() /* ty=Tensor[(5, 11, 11), float32] */;
  %468 = %461.0;
  %469 = @func_133() /* ty=Tensor[(5, 11, 11), float32] */;
  %470 = multiply(%464, %465) /* ty=Tensor[(6, 13, 7), float64] */;
  %471 = %466.0;
  (%467, %468, meta[relay.Constant][14] /* ty=Tensor[(1764), bool] */, %469, %470, %471)
}

def @func_8293(%var_8261: Tensor[(7, 7, 6), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32], Tensor[(336), float64]) {
  %472 = cast(%var_8261, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %473 = cast(meta[relay.Constant][16] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %474 = reshape(%473, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), float64] */;
  %475 = @func_6220(%474) /* ty=(Tensor[(14, 12, 2), float64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %476 = cosh(%472) /* ty=Tensor[(7, 7, 6), float32] */;
  %477 = @func_1538() /* ty=Tensor[(15, 2, 16), float64] */;
  %478 = %475.1;
  (%476, %477, %478, meta[relay.Constant][16] /* ty=Tensor[(336), float64] */)
}

def @func_10308() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
  %479 = @func_2501() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %480 = %479.0;
  %481 = @func_1881() /* ty=Tensor[(5, 11, 11), uint64] */;
  %482 = @func_9720() /* ty=Tensor[(5, 11, 11), float32] */;
  (%480, %481, %482)
}

def @func_2289() -> (Tensor[(15, 2, 16), float64],) {
  %483 = @func_1363() /* ty=Tensor[(15, 2, 16), float64] */;
  (%483,)
}

def @func_3650() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64]) {
  %484 = @func_1319() /* ty=Tensor[(5, 11, 11), float32] */;
  %485 = cast(%484, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %486 = reshape(%485, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), float32] */;
  %487 = @func_3056(%486) /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(15, 2, 16), float64]) */;
  %488 = %487.2;
  (%484, %488)
}

def @func_3230() -> (Tensor[(5, 11, 11), float32],) {
  %489 = @func_1800() /* ty=Tensor[(5, 11, 11), float32] */;
  (%489,)
}

def @func_7704() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %490 = @func_1210() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %491 = @func_6597() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %492 = @func_4418() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %493 = %490.0;
  %494 = %491.0;
  %495 = %492.0;
  %496 = @func_919() /* ty=Tensor[(5, 11, 11), float32] */;
  (%493, %494, %495, %496)
}

def @func_9142() -> (Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), bool], Tensor[(264), bool]) {
  %497 = @func_2289() /* ty=(Tensor[(15, 2, 16), float64],) */;
  %498 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %499 = @func_6570() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32], Tensor[(264), bool], Tensor[(1764), float64]) */;
  %500 = %497.0;
  %501 = %498.2;
  %502 = %499.3;
  (%500, %501, %502)
}

def @func_12324() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %503 = @func_4674() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
  %504 = @func_4674() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
  %505 = %503.0;
  %506 = @func_1074() /* ty=Tensor[(5, 11, 11), float32] */;
  %507 = %504.0;
  (%505, %506, %507)
}

def @func_2389() -> (Tensor[(5, 11, 11), float32],) {
  %508 = @func_818() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %509 = %508.1;
  (%509,)
}

def @func_11510(%var_11494: Tensor[(15, 2, 16), float64]) -> Tensor[(15, 2, 16), uint64] {
  %510 = @func_1538() /* ty=Tensor[(15, 2, 16), float64] */;
  %511 = cast(%var_11494, dtype="uint64") /* ty=Tensor[(15, 2, 16), uint64] */;
  %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%510, dtype="uint64") /* ty=Tensor[(15, 2, 16), uint64] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%513, %514) /* ty=Tensor[(15, 2, 16), uint64] */
}

def @func_8556() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(1764), float64], Tensor[(13, 14, 13), uint64], Tensor[(15, 2, 16), float64], Tensor[(2366), float64]) {
  %515 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %516 = @func_4962() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) */;
  %517 = @func_7311() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), int64]) */;
  %518 = cast(meta[relay.Constant][17] /* ty=Tensor[(2366), uint64] */, dtype="uint64") /* ty=Tensor[(2366), uint64] */;
  %519 = cast(meta[relay.Constant][17] /* ty=Tensor[(2366), uint64] */, dtype="uint64") /* ty=Tensor[(2366), uint64] */;
  %520 = reshape(%518, newshape=[13, 14, 13]) /* ty=Tensor[(13, 14, 13), uint64] */;
  %521 = reshape(%519, newshape=[13, 14, 13]) /* ty=Tensor[(13, 14, 13), uint64] */;
  %522 = @func_7989(%520, %521) /* ty=(Tensor[(13, 14, 13), uint64],) */;
  %523 = cast(meta[relay.Constant][17] /* ty=Tensor[(2366), uint64] */, dtype="float64") /* ty=Tensor[(2366), float64] */;
  %524 = %515.1;
  %525 = %516.2;
  %526 = %517.0;
  %527 = %522.0;
  %528 = @func_1538() /* ty=Tensor[(15, 2, 16), float64] */;
  %529 = exp(%523) /* ty=Tensor[(2366), float64] */;
  (%524, %525, %526, %527, %528, %529)
}

def @func_1417() -> (Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) {
  %530 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %531 = %530.0;
  %532 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 11, 11), float32] */, dtype="int64") /* ty=Tensor[(5, 11, 11), int64] */;
  %533 = shape_of(%531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%531, dtype="int64") /* ty=Tensor[(5, 11, 11), int64] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %536 = multiply(%534, %535) /* ty=Tensor[(5, 11, 11), int64] */;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %538 = reshape(%537, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), float32] */;
  %539 = @func_1011(%538) /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64]) */;
  %540 = %539.1;
  (%536, %540)
}

def @func_4858(%var_4850: Tensor[(3, 9, 8), float32], %var_4851: Tensor[(3, 9, 8), float32]) -> Tensor[(3, 9, 8), float32] {
  %541 = cast(%var_4851, dtype="float32") /* ty=Tensor[(3, 9, 8), float32] */;
  %542 = shape_of(%var_4850, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%var_4850, dtype="float32") /* ty=Tensor[(3, 9, 8), float32] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  subtract(%543, %544) /* ty=Tensor[(3, 9, 8), float32] */
}

def @func_5218() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), int64], Tensor[(1764), float64], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) {
  %545 = cast(meta[relay.Constant][19] /* ty=Tensor[(1764), float64] */, dtype="float64") /* ty=Tensor[(1764), float64] */;
  %546 = reshape(%545, newshape=[1764]) /* ty=Tensor[(1764), float64] */;
  %547 = @func_1996(%546) /* ty=(Tensor[(1764), int32], Tensor[(1764), bool], Tensor[(5, 11, 11), int64]) */;
  %548 = cast(meta[relay.Constant][20] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %549 = reshape(%548, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), float64] */;
  %550 = @func_2913(%549) /* ty=(Tensor[(15, 2, 16), float32],) */;
  %551 = @func_133() /* ty=Tensor[(5, 11, 11), float32] */;
  %552 = %547.2;
  %553 = %550.0;
  (%551, %552, meta[relay.Constant][19] /* ty=Tensor[(1764), float64] */, %553, meta[relay.Constant][20] /* ty=Tensor[(480), float64] */)
}

def @func_7578(%var_7573: Tensor[(3, 1, 6), uint64]) -> Tensor[(3, ?, 6), uint64] {
  %554 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 1, 6), uint64] */, dtype="uint64") /* ty=Tensor[(3, 1, 6), uint64] */;
  %555 = shape_of(%var_7573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%var_7573, dtype="uint64") /* ty=Tensor[(3, 1, 6), uint64] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%556, %557) /* ty=Tensor[(3, ?, 6), uint64] */
}

def @func_11872() -> (Tensor[(16, 11, 16), float64], Tensor[(5, 11, 11), uint64]) {
  %558 = cast(meta[relay.Constant][22] /* ty=Tensor[(16, 11, 16), float64] */, dtype="float64") /* ty=Tensor[(16, 11, 16), float64] */;
  %559 = @func_10394() /* ty=(Tensor[(5, 11, 11), uint64],) */;
  %560 = log(%558) /* ty=Tensor[(16, 11, 16), float64] */;
  %561 = %559.0;
  (%560, %561)
}

def @func_5818() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
  %562 = @func_3650() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64]) */;
  %563 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %564 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %565 = @func_2780() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %566 = %562.1;
  %567 = %563.0;
  %568 = @func_1074() /* ty=Tensor[(5, 11, 11), float32] */;
  %569 = %564.6;
  %570 = %565.0;
  (%566, %567, %568, %569, %570)
}

def @func_9760(%var_9758: Tensor[(294, 1), float32]) -> (Tensor[(5, 11, 11), bool], Tensor[(3, ?, 6), uint64], Tensor[(18), uint64], Tensor[(7, 7, 6), float32], Tensor[(294, 1), float32]) {
  %571 = @func_4962() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) */;
  %572 = cast(meta[relay.Constant][23] /* ty=Tensor[(18), uint64] */, dtype="uint64") /* ty=Tensor[(18), uint64] */;
  %573 = reshape(%572, newshape=[3, 1, 6]) /* ty=Tensor[(3, 1, 6), uint64] */;
  %574 = cast(%var_9758, dtype="float32") /* ty=Tensor[(294, 1), float32] */;
  %575 = reshape(%574, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
  %576 = @func_8293(%575) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32], Tensor[(336), float64]) */;
  %577 = %571.0;
  %578 = @func_7578(%573) /* ty=Tensor[(3, ?, 6), uint64] */;
  %579 = %576.0;
  (%577, %578, meta[relay.Constant][23] /* ty=Tensor[(18), uint64] */, %579, %var_9758)
}

def @func_4451() -> Tensor[(5, 11, 11), float32] {
  %580 = @func_3230() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %580.0
}

def @func_543(%var_518: Tensor[(4, 8, 15), int32], %var_519: Tensor[(4, 8, 15), int32]) -> (Tensor[(4, 8, 15), int32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), bool]) {
  %581 = cast(%var_519, dtype="int32") /* ty=Tensor[(4, 8, 15), int32] */;
  %582 = shape_of(%var_518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%var_518, dtype="int32") /* ty=Tensor[(4, 8, 15), int32] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %585 = @func_246() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
  %586 = @func_314() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %587 = logical_xor(%583, %584) /* ty=Tensor[(4, 8, 15), int32] */;
  %588 = %585.2;
  %589 = %586.0;
  (%587, %588, %589)
}

def @func_2780() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %590 = @func_651() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) */;
  %591 = @func_651() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) */;
  %592 = %590.3;
  %593 = %591.3;
  (%592, %593)
}

def @func_5092(%var_5081: Tensor[(5, 11, 11), float32]) -> (Tensor[(5, 11, 11), int32], Tensor[(5, 11, 11), float32]) {
  %594 = @func_1074() /* ty=Tensor[(5, 11, 11), float32] */;
  %595 = cast(%var_5081, dtype="int32") /* ty=Tensor[(5, 11, 11), int32] */;
  %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%594, dtype="int32") /* ty=Tensor[(5, 11, 11), int32] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %599 = left_shift(%597, %598) /* ty=Tensor[(5, 11, 11), int32] */;
  %600 = @func_4267() /* ty=Tensor[(5, 11, 11), float32] */;
  (%599, %600)
}

def @func_7971(%var_7947: Tensor[(12, 2, 8), uint16], %var_7948: Tensor[(12, 2, 8), uint16]) -> (Tensor[(12, 2, 8), uint16], Tensor[(12, 2, 8), float32]) {
  %601 = cast(%var_7948, dtype="uint16") /* ty=Tensor[(12, 2, 8), uint16] */;
  %602 = shape_of(%var_7947, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%var_7947, dtype="uint16") /* ty=Tensor[(12, 2, 8), uint16] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %605 = cast(%var_7948, dtype="float32") /* ty=Tensor[(12, 2, 8), float32] */;
  %606 = maximum(%603, %604) /* ty=Tensor[(12, 2, 8), uint16] */;
  %607 = tan(%605) /* ty=Tensor[(12, 2, 8), float32] */;
  (%606, %607)
}

def @func_10699(%var_10692: Tensor[(12, 2, 11), uint16], %var_10693: Tensor[(12, 2, 11), uint16]) -> (Tensor[(12, 2, 11), uint16],) {
  %608 = cast(%var_10693, dtype="uint16") /* ty=Tensor[(12, 2, 11), uint16] */;
  %609 = shape_of(%var_10692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%var_10692, dtype="uint16") /* ty=Tensor[(12, 2, 11), uint16] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %612 = bitwise_and(%610, %611) /* ty=Tensor[(12, 2, 11), uint16] */;
  (%612,)
}

def @func_2231(%var_2173: Tensor[(10, 1, 13), uint64]) -> (Tensor[(10, 13, 13), uint64], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
  %613 = cast(%var_2173, dtype="uint64") /* ty=Tensor[(10, 1, 13), uint64] */;
  %614 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 13, 13), uint64] */, dtype="uint64") /* ty=Tensor[(10, 13, 13), uint64] */;
  %615 = @func_782() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
  %616 = multiply(%613, %614) /* ty=Tensor[(10, 13, 13), uint64] */;
  %617 = %615.1;
  %618 = @func_1881() /* ty=Tensor[(5, 11, 11), uint64] */;
  %619 = @func_1800() /* ty=Tensor[(5, 11, 11), float32] */;
  (%616, %617, %618, %619)
}

def @func_3128(%var_3116: Tensor[(5, 11, 11), int64]) -> (Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32]) {
  %620 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %621 = %620.0;
  %622 = cast(%var_3116, dtype="int8") /* ty=Tensor[(5, 11, 11), int8] */;
  %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%621, dtype="int8") /* ty=Tensor[(5, 11, 11), int8] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %626 = cast(%var_3116, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %627 = bitwise_or(%624, %625) /* ty=Tensor[(5, 11, 11), int8] */;
  %628 = sqrt(%626) /* ty=Tensor[(5, 11, 11), float32] */;
  (%627, %628)
}

def @func_7336() -> (Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) {
  %629 = @func_1718() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(1764), uint8], Tensor[(1764), float64], Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) */;
  %630 = %629.2;
  %631 = @func_1800() /* ty=Tensor[(5, 11, 11), float32] */;
  (%630, %631)
}

def @func_9273() -> Tensor[(5, 11, 11), float32] {
  %632 = @func_3650() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64]) */;
  %632.0
}

def @func_4984() -> (Tensor[(5, 11, 11), float32],) {
  %633 = @func_2550() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %634 = %633.0;
  (%634,)
}

def @func_2550() -> (Tensor[(5, 11, 11), float32],) {
  %635 = @func_651() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) */;
  %636 = %635.5;
  (%636,)
}

def @func_6404() -> (Tensor[(5, 11, 11), float32],) {
  %637 = @func_1800() /* ty=Tensor[(5, 11, 11), float32] */;
  (%637,)
}

def @func_12366(%var_12331: Tensor[(1, 2, 6), float64]) -> (Tensor[(5, 11, 11), float32], Tensor[(1, 2, 6), float32]) {
  %638 = cast(%var_12331, dtype="float64") /* ty=Tensor[(1, 2, 6), float64] */;
  %639 = cos(%638) /* ty=Tensor[(1, 2, 6), float64] */;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(1, 2, 6), float64] */;
  %641 = cosh(%640) /* ty=Tensor[(1, 2, 6), float64] */;
  %642 = cast(%641, dtype="float32") /* ty=Tensor[(1, 2, 6), float32] */;
  %643 = @func_5892() /* ty=Tensor[(5, 11, 11), float32] */;
  %644 = rsqrt(%642) /* ty=Tensor[(1, 2, 6), float32] */;
  (%643, %644)
}

def @func_7531(%var_7500: Tensor[(13, 8, 3), float64], %var_7501: Tensor[(13, 8, 3), float64]) -> (Tensor[(5, 11, 11), float32], Tensor[(13, 8, 3), float64]) {
  %645 = @func_4489() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %646 = cast(%var_7501, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %647 = shape_of(%var_7500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%var_7500, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %650 = divide(%648, %649) /* ty=Tensor[(13, 8, 3), float64] */;
  %651 = cast(%650, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %652 = atan(%651) /* ty=Tensor[(13, 8, 3), float64] */;
  %653 = cast(%650, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%652, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %657 = %645.0;
  %658 = mod(%655, %656) /* ty=Tensor[(13, 8, 3), float64] */;
  (%657, %658)
}

def @func_7034(%var_7026: Tensor[(5, 2, 3), float64]) -> (Tensor[(5, 2, 3), uint32],) {
  %659 = cast(%var_7026, dtype="float64") /* ty=Tensor[(5, 2, 3), float64] */;
  %660 = sigmoid(%659) /* ty=Tensor[(5, 2, 3), float64] */;
  %661 = cast(%var_7026, dtype="uint32") /* ty=Tensor[(5, 2, 3), uint32] */;
  %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%660, dtype="uint32") /* ty=Tensor[(5, 2, 3), uint32] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %665 = bitwise_and(%663, %664) /* ty=Tensor[(5, 2, 3), uint32] */;
  (%665,)
}

def @func_4346() -> (Tensor[(13, 3, 8), float64],) {
  %666 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 3, 8), float64] */;
  %667 = acos(%666) /* ty=Tensor[(13, 3, 8), float64] */;
  (%667,)
}

def @func_5892() -> Tensor[(5, 11, 11), float32] {
  %668 = @func_1761() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %668.0
}

def @func_3489() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %669 = @func_3067() /* ty=(Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) */;
  %670 = @func_2389() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %671 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %672 = %669.1;
  %673 = %670.0;
  %674 = %671.0;
  (%672, %673, %674)
}

def @func_4219() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %675 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %676 = @func_3284() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %677 = %675.0;
  %678 = @func_353() /* ty=Tensor[(5, 11, 11), float32] */;
  %679 = %676.0;
  (%677, %678, %679)
}

def @func_4674() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) {
  %680 = @func_3911() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) */;
  %681 = @func_1940() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
  %682 = %680.0;
  %683 = %681.1;
  (%682, %683)
}

def @func_1210() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %684 = @func_841() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %685 = @func_889() /* ty=Tensor[(5, 11, 11), float32] */;
  %686 = %684.0;
  (%685, %686)
}

def @func_8756() -> (Tensor[(5, 11, 11), float32],) {
  %687 = @func_2037() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %688 = %687.0;
  (%688,)
}

def @func_10603() -> (Tensor[(5, 11, 11), float32],) {
  %689 = @func_10308() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */;
  %690 = %689.2;
  (%690,)
}

def @func_4551(%var_4538: Tensor[(480), int32]) -> (Tensor[(5, 11, 11), float32], Tensor[(480), int32], Tensor[(480), int32], Tensor[(5, 11, 11), bool]) {
  %691 = @func_818() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %692 = cast(%var_4538, dtype="int32") /* ty=Tensor[(480), int32] */;
  %693 = reshape(%692, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %694 = @func_2656(%693) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(480), int32], Tensor[(5, 11, 11), int8]) */;
  %695 = @func_314() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %696 = %691.1;
  %697 = %694.2;
  %698 = %695.0;
  (%696, %697, %var_4538, %698)
}

def @func_818() -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) {
  %699 = @func_246() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
  %700 = @func_808() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool]) */;
  %701 = %699.2;
  %702 = %700.0;
  (%701, %702)
}

def @func_9250() -> Tensor[(5, 11, 11), float32] {
  %703 = @func_2882() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %703.1
}

def @func_10750(%var_10742: Tensor[(77), float32]) -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), int64], Tensor[(7, 11, 1), float64], Tensor[(77), float32], Tensor[(1, 264), bool], Tensor[(480, 1), int32]) {
  %704 = @func_10176() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %705 = @func_5327() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int64]) */;
  %706 = cast(%var_10742, dtype="float32") /* ty=Tensor[(77), float32] */;
  %707 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 264), bool] */, dtype="bool") /* ty=Tensor[(1, 264), bool] */;
  %708 = cast(meta[relay.Constant][27] /* ty=Tensor[(480, 1), int32] */, dtype="int32") /* ty=Tensor[(480, 1), int32] */;
  %709 = reshape(%706, newshape=[7, 11, 1]) /* ty=Tensor[(7, 11, 1), float32] */;
  %710 = reshape(%707, newshape=[6, 44]) /* ty=Tensor[(6, 44), bool] */;
  %711 = reshape(%708, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %712 = @func_6313(%709, %710, %711) /* ty=(Tensor[(11, 12, 2), bool], Tensor[(6, 44), bool], Tensor[(7, 11, 1), float64], Tensor[(5, 11, 11), int32], Tensor[(605), float32], Tensor[(480), int32], Tensor[(480), int32]) */;
  %713 = %704.0;
  %714 = %705.2;
  %715 = %712.2;
  (%713, %714, %715, %var_10742, meta[relay.Constant][26] /* ty=Tensor[(1, 264), bool] */, meta[relay.Constant][27] /* ty=Tensor[(480, 1), int32] */)
}

def @func_246() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) {
  %716 = @func_133() /* ty=Tensor[(5, 11, 11), float32] */;
  %717 = cast(%716, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
  %718 = acosh(%717) /* ty=Tensor[(5, 11, 11), float64] */;
  %719 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 11, 11), float64] */, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %720 = shape_of(%718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%718, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %723 = cast(%718, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %724 = atan(%723) /* ty=Tensor[(5, 11, 11), float32] */;
  %725 = cast(%724, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
  %726 = acos(%725) /* ty=Tensor[(5, 11, 11), float64] */;
  %727 = cast(%726, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
  %728 = @func_133() /* ty=Tensor[(5, 11, 11), float32] */;
  %729 = equal(%721, %722) /* ty=Tensor[(5, 11, 11), bool] */;
  %730 = exp(%727) /* ty=Tensor[(5, 11, 11), float64] */;
  (%728, %729, %730)
}

def @func_4328() -> Tensor[(5, 11, 11), float32] {
  %731 = @func_4219() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %731.2
}

def @func_10007() -> (Tensor[(5, 11, 11), uint64],) {
  %732 = @func_5818() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */;
  %733 = %732.0;
  (%733,)
}

def @func_9950() -> (Tensor[(5, 11, 11), uint64],) {
  %734 = @func_8232() /* ty=Tensor[(5, 11, 11), uint64] */;
  (%734,)
}

def @func_1074() -> Tensor[(5, 11, 11), float32] {
  @func_353() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_4138() -> (Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), int64]) {
  %735 = @func_314() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %736 = @func_919() /* ty=Tensor[(5, 11, 11), float32] */;
  %737 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 11, 11), float32] */, dtype="int64") /* ty=Tensor[(5, 11, 11), int64] */;
  %738 = shape_of(%736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(%736, dtype="int64") /* ty=Tensor[(5, 11, 11), int64] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %741 = %735.0;
  %742 = bitwise_and(%739, %740) /* ty=Tensor[(5, 11, 11), int64] */;
  (%741, %742)
}

def @func_3067() -> (Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) {
  %743 = @func_2882() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %744 = @func_1363() /* ty=Tensor[(15, 2, 16), float64] */;
  %745 = %743.1;
  (%744, %745)
}

def @func_11040() -> (Tensor[(5, 11, 11), float32],) {
  %746 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %747 = %746.0;
  (%747,)
}

def @func_11232() -> Tensor[(1764), float64] {
  %748 = @func_5598() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), bool]) */;
  %748.0
}

def @func_5378() -> Tensor[(5, 11, 11), float32] {
  %749 = @func_4418() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %749.0
}

def @func_2697() -> Tensor[(5, 11, 11), uint64] {
  %750 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %750.6
}

def @func_9472() -> Tensor[(5, 11, 11), float32] {
  %751 = @func_4674() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
  %751.0
}

def @func_3911() -> (Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) {
  %752 = @func_2389() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %753 = cast(meta[relay.Constant][30] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %754 = reshape(%753, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), float64] */;
  %755 = @func_2913(%754) /* ty=(Tensor[(15, 2, 16), float32],) */;
  %756 = %752.0;
  %757 = %755.0;
  (%756, %757, meta[relay.Constant][30] /* ty=Tensor[(480), float64] */)
}

def @func_6979() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %758 = @func_3350() /* ty=Tensor[(5, 11, 11), float32] */;
  %759 = @func_5056() /* ty=Tensor[(5, 11, 11), float32] */;
  (%758, %759)
}

def @func_2656(%var_2594: Tensor[(480), int32]) -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(480), int32], Tensor[(5, 11, 11), int8]) {
  %760 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %761 = cast(%var_2594, dtype="int32") /* ty=Tensor[(480), int32] */;
  %762 = cast(%var_2594, dtype="int32") /* ty=Tensor[(480), int32] */;
  %763 = reshape(%761, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), int32] */;
  %764 = reshape(%762, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), int32] */;
  %765 = @func_543(%763, %764) /* ty=(Tensor[(4, 8, 15), int32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), bool]) */;
  %766 = @func_1319() /* ty=Tensor[(5, 11, 11), float32] */;
  %767 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 11, 11), float32] */, dtype="int8") /* ty=Tensor[(5, 11, 11), int8] */;
  %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%766, dtype="int8") /* ty=Tensor[(5, 11, 11), int8] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %771 = %760.0;
  %772 = %765.2;
  %773 = bitwise_xor(%769, %770) /* ty=Tensor[(5, 11, 11), int8] */;
  (%771, %772, %var_2594, %773)
}

def @func_7204() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %774 = @func_4489() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %775 = %774.0;
  %776 = @func_1319() /* ty=Tensor[(5, 11, 11), float32] */;
  %777 = @func_3350() /* ty=Tensor[(5, 11, 11), float32] */;
  (%775, %776, %777)
}

def @func_7311() -> (Tensor[(1764), float64], Tensor[(5, 11, 11), int64]) {
  %778 = @func_5218() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), int64], Tensor[(1764), float64], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) */;
  %779 = %778.2;
  %780 = cast(%779, dtype="float64") /* ty=Tensor[(1764), float64] */;
  %781 = reshape(%780, newshape=[3, 588]) /* ty=Tensor[(3, 588), float64] */;
  %782 = @func_2474(%781) /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), float32], Tensor[(1764), int32], Tensor[(3, 588), float64], Tensor[(5, 11, 11), uint64]) */;
  %783 = %782.0;
  (%779, %783)
}

def @func_2143(%var_2132: Tensor[(11, 12, 2), bool], %var_2133: Tensor[(11, 12, 2), bool]) -> (Tensor[(11, 12, 2), bool], Tensor[(5, 11, 11), float32]) {
  %784 = cast(%var_2133, dtype="bool") /* ty=Tensor[(11, 12, 2), bool] */;
  %785 = shape_of(%var_2132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%var_2132, dtype="bool") /* ty=Tensor[(11, 12, 2), bool] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %788 = @func_2037() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %789 = logical_or(%786, %787) /* ty=Tensor[(11, 12, 2), bool] */;
  %790 = %788.0;
  (%789, %790)
}

def @func_10176() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %791 = @func_8926() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */;
  %792 = %791.2;
  %793 = @func_3659() /* ty=Tensor[(5, 11, 11), float32] */;
  (%792, %793)
}

def @func_11718() -> Tensor[(5, 11, 11), float32] {
  %794 = @func_2389() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %794.0
}

def @func_11833(%var_11831: Tensor[(480), float64]) -> (Tensor[(5, 11, 11), int16], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) {
  %795 = @func_7497() /* ty=(Tensor[(5, 11, 11), int16],) */;
  %796 = @func_10603() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %797 = @func_4674() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
  %798 = @func_2389() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %799 = cast(%var_11831, dtype="float64") /* ty=Tensor[(480), float64] */;
  %800 = reshape(%799, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), float64] */;
  %801 = @func_2913(%800) /* ty=(Tensor[(15, 2, 16), float32],) */;
  %802 = %795.0;
  %803 = %796.0;
  %804 = %797.1;
  %805 = %798.0;
  %806 = %801.0;
  (%802, %803, %804, %805, %806, %var_11831)
}

def @func_12254() -> Tensor[(5, 11, 11), float32] {
  @func_133() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_10682() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) {
  %807 = @func_2037() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %808 = @func_5158() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(15, 2, 16), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %809 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %810 = @func_1074() /* ty=Tensor[(5, 11, 11), float32] */;
  %811 = %807.0;
  %812 = @func_798() /* ty=Tensor[(5, 11, 11), float32] */;
  %813 = %808.0;
  %814 = %809.4;
  (%810, %811, %812, %813, %814)
}

def @func_4489() -> (Tensor[(5, 11, 11), float32],) {
  %815 = @func_1800() /* ty=Tensor[(5, 11, 11), float32] */;
  (%815,)
}

def @func_1718() -> (Tensor[(5, 11, 11), uint64], Tensor[(1764), uint8], Tensor[(1764), float64], Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) {
  %816 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %817 = @func_741() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], bool, Tensor[(1764), float64]) */;
  %818 = %817.3;
  %819 = cast(meta[relay.Constant][32] /* ty=Tensor[(1764), float64] */, dtype="uint8") /* ty=Tensor[(1764), uint8] */;
  %820 = shape_of(%818, dtype="int32") /* ty=Tensor[(1), int32] */;
  %821 = cast(%818, dtype="uint8") /* ty=Tensor[(1764), uint8] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %823 = cast(%818, dtype="float64") /* ty=Tensor[(1764), float64] */;
  %824 = cast(%818, dtype="float32") /* ty=Tensor[(1764), float32] */;
  %825 = acos(%824) /* ty=Tensor[(1764), float32] */;
  %826 = cast(%825, dtype="float64") /* ty=Tensor[(1764), float64] */;
  %827 = @func_818() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %828 = %816.1;
  %829 = bitwise_xor(%821, %822) /* ty=Tensor[(1764), uint8] */;
  %830 = log10(%823) /* ty=Tensor[(1764), float64] */;
  %831 = sqrt(%826) /* ty=Tensor[(1764), float64] */;
  %832 = %827.1;
  (%828, %829, %830, %831, %832)
}

def @func_5550() -> Tensor[(15, 2, 16), float64] {
  %833 = @func_2289() /* ty=(Tensor[(15, 2, 16), float64],) */;
  %833.0
}

def @func_10136() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %834 = @func_7931() /* ty=(Tensor[(5, 11, 11), uint64],) */;
  %835 = @func_8926() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */;
  %836 = %834.0;
  %837 = @func_9472() /* ty=Tensor[(5, 11, 11), float32] */;
  %838 = %835.0;
  (%836, %837, %838)
}

def @func_11396() -> (Tensor[(5, 11, 11), bool],) {
  %839 = @func_808() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool]) */;
  %840 = %839.1;
  (%840,)
}

def @func_11592() -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), uint64]) {
  %841 = @func_6570() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32], Tensor[(264), bool], Tensor[(1764), float64]) */;
  %842 = @func_10394() /* ty=(Tensor[(5, 11, 11), uint64],) */;
  %843 = %841.0;
  %844 = %842.0;
  (%843, %844)
}

def @func_9924(%var_9897: Tensor[(2, 7, 6), float64]) -> (Tensor[(2, 7, 6), float64], Tensor[(5, 11, 11), float32]) {
  %845 = cast(%var_9897, dtype="float64") /* ty=Tensor[(2, 7, 6), float64] */;
  %846 = log2(%845) /* ty=Tensor[(2, 7, 6), float64] */;
  %847 = @func_9408() /* ty=Tensor[(5, 11, 11), float32] */;
  (%846, %847)
}

def @main(%var_12509: Tensor[(11, 2, 6), float32]) -> (Tensor[(11, 2, 6), float32], Tensor[(5, 11, 11), float32], Tensor[(11, 2, 6), float32]) {
  %848 = cast(%var_12509, dtype="float32") /* ty=Tensor[(11, 2, 6), float32] */;
  %849 = sinh(%848) /* ty=Tensor[(11, 2, 6), float32] */;
  %850 = cast(%849, dtype="float32") /* ty=Tensor[(11, 2, 6), float32] */;
  %851 = @func_6681() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %852 = cast(%var_12509, dtype="float32") /* ty=Tensor[(11, 2, 6), float32] */;
  %853 = shape_of(%849, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%849, dtype="float32") /* ty=Tensor[(11, 2, 6), float32] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %856 = sin(%850) /* ty=Tensor[(11, 2, 6), float32] */;
  %857 = %851.0;
  %858 = mod(%854, %855) /* ty=Tensor[(11, 2, 6), float32] */;
  (%856, %857, %858)
}

def @func_2501() -> (Tensor[(5, 11, 11), float32],) {
  %859 = @func_651() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) */;
  %860 = %859.5;
  (%860,)
}

def @func_10431() -> (Tensor[(5, 11, 11), float32],) {
  %861 = @func_3708() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float64], Tensor[(1764), bool], Tensor[(5, 11, 11), float32]) */;
  %862 = %861.3;
  (%862,)
}

def @func_314() -> (Tensor[(5, 11, 11), bool],) {
  %863 = @func_246() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
  %864 = %863.1;
  (%864,)
}

def @func_6570() -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32], Tensor[(264), bool], Tensor[(1764), float64]) {
  %865 = @func_5327() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int64]) */;
  %866 = %865.1;
  %867 = cast(%866, dtype="int64") /* ty=Tensor[(5, 11, 11), int64] */;
  %868 = reshape(%867, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), int64] */;
  %869 = @func_3128(%868) /* ty=(Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32]) */;
  %870 = cast(meta[relay.Constant][33] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %871 = cast(meta[relay.Constant][33] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %872 = reshape(%870, newshape=[11, 12, 2]) /* ty=Tensor[(11, 12, 2), bool] */;
  %873 = reshape(%871, newshape=[11, 12, 2]) /* ty=Tensor[(11, 12, 2), bool] */;
  %874 = @func_2143(%872, %873) /* ty=(Tensor[(11, 12, 2), bool], Tensor[(5, 11, 11), float32]) */;
  %875 = @func_5598() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), bool]) */;
  %876 = %869.0;
  %877 = %874.1;
  %878 = %875.0;
  (%866, %876, %877, meta[relay.Constant][33] /* ty=Tensor[(264), bool] */, %878)
}

def @func_7290(%var_7274: Tensor[(4, 1), bool]) -> (Tensor[(4, 1), bool],) {
  %879 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %880 = cast(%var_7274, dtype="bool") /* ty=Tensor[(4, 1), bool] */;
  %881 = logical_and(%879, %880) /* ty=Tensor[(4, 1), bool] */;
  (%881,)
}

def @func_2527() -> Tensor[(5, 11, 11), float32] {
  %882 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %882.0
}

def @func_2037() -> (Tensor[(5, 11, 11), float32],) {
  %883 = @func_1319() /* ty=Tensor[(5, 11, 11), float32] */;
  (%883,)
}

def @func_1940() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) {
  %884 = @func_818() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %885 = @func_919() /* ty=Tensor[(5, 11, 11), float32] */;
  %886 = %884.0;
  (%885, %886)
}

def @func_3708() -> (Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float64], Tensor[(1764), bool], Tensor[(5, 11, 11), float32]) {
  %887 = @func_651() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) */;
  %888 = @func_2037() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %889 = @func_1074() /* ty=Tensor[(5, 11, 11), float32] */;
  %890 = @func_1538() /* ty=Tensor[(15, 2, 16), float64] */;
  %891 = %887.2;
  %892 = %888.0;
  (%889, %890, %891, %892)
}

def @func_4051() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %893 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %894 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %895 = %893.0;
  %896 = %894.0;
  (%895, %896)
}

def @func_5598() -> (Tensor[(1764), float64], Tensor[(5, 11, 11), bool]) {
  %897 = @func_5218() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), int64], Tensor[(1764), float64], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) */;
  %898 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %899 = %897.2;
  %900 = %898.2;
  (%899, %900)
}

def @func_741() -> (Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], bool, Tensor[(1764), float64]) {
  %901 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %902 = cast(meta[relay.Constant][34] /* ty=Tensor[(1764), bool] */, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %903 = reshape(%901, newshape=[]) /* ty=bool */;
  %904 = reshape(%902, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), bool] */;
  %905 = @func_560(%903, %904) /* ty=(Tensor[(14, 14, 9), bool],) */;
  %906 = cast(meta[relay.Constant][34] /* ty=Tensor[(1764), bool] */, dtype="float64") /* ty=Tensor[(1764), float64] */;
  %907 = @func_353() /* ty=Tensor[(5, 11, 11), float32] */;
  %908 = %905.0;
  %909 = asin(%906) /* ty=Tensor[(1764), float64] */;
  (%907, %908, True /* ty=bool */, %909)
}

def @func_6060() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %910 = @func_4674() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
  %911 = @func_2882() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %912 = @func_5818() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */;
  %913 = %910.0;
  %914 = %911.0;
  %915 = @func_919() /* ty=Tensor[(5, 11, 11), float32] */;
  %916 = %912.4;
  (%913, %914, %915, %916)
}

def @func_841() -> (Tensor[(5, 11, 11), float32],) {
  %917 = @func_133() /* ty=Tensor[(5, 11, 11), float32] */;
  (%917,)
}

def @func_9043() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(312, ?), uint8], Tensor[(312, ?), bool]) {
  %918 = cast(meta[relay.Constant][35] /* ty=Tensor[(312, 1), float64] */, dtype="float64") /* ty=Tensor[(312, 1), float64] */;
  %919 = cast(meta[relay.Constant][35] /* ty=Tensor[(312, 1), float64] */, dtype="float64") /* ty=Tensor[(312, 1), float64] */;
  %920 = reshape(%918, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float64] */;
  %921 = reshape(%919, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float64] */;
  %922 = @func_7531(%920, %921) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(13, 8, 3), float64]) */;
  %923 = %922.1;
  %924 = cast(%923, dtype="uint8") /* ty=Tensor[(13, 8, 3), uint8] */;
  %925 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(312, 1), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %926 = cast(meta[relay.Constant][35] /* ty=Tensor[(312, 1), float64] */, dtype="uint8") /* ty=Tensor[(312, 1), uint8] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %928 = cast(%923, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %929 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(312, 1), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %930 = cast(meta[relay.Constant][35] /* ty=Tensor[(312, 1), float64] */, dtype="float64") /* ty=Tensor[(312, 1), float64] */;
  %931 = dyn.reshape(%928, %929, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %932 = power(%930, %931) /* ty=Tensor[(312, ?), float64] */;
  %933 = cast(%923, dtype="bool") /* ty=Tensor[(13, 8, 3), bool] */;
  %934 = shape_of(%932, dtype="int32") /* ty=Tensor[(2), int32] */;
  %935 = cast(%932, dtype="bool") /* ty=Tensor[(312, ?), bool] */;
  %936 = dyn.reshape(%933, %934, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %937 = @func_2697() /* ty=Tensor[(5, 11, 11), uint64] */;
  %938 = @func_8009() /* ty=Tensor[(5, 11, 11), float32] */;
  %939 = subtract(%926, %927) /* ty=Tensor[(312, ?), uint8] */;
  %940 = logical_or(%935, %936) /* ty=Tensor[(312, ?), bool] */;
  (%937, %938, %939, %940)
}

def @func_12434() -> Tensor[(5, 11, 11), uint64] {
  %941 = @func_10046() /* ty=(Tensor[(5, 11, 11), uint64],) */;
  %941.0
}

def @func_11732(%var_11727: Tensor[(16, 5, 1), uint32], %var_11728: Tensor[(16, 5, 15), uint32]) -> (Tensor[(16, 5, 15), uint32],) {
  %942 = cast(%var_11727, dtype="uint32") /* ty=Tensor[(16, 5, 1), uint32] */;
  %943 = cast(%var_11728, dtype="uint32") /* ty=Tensor[(16, 5, 15), uint32] */;
  %944 = bitwise_xor(%942, %943) /* ty=Tensor[(16, 5, 15), uint32] */;
  (%944,)
}

def @func_10888() -> (Tensor[(5, 11, 11), bool], Tensor[(15, 2, 16), float64]) {
  %945 = @func_4138() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), int64]) */;
  %946 = @func_9142() /* ty=(Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), bool], Tensor[(264), bool]) */;
  %947 = %945.0;
  %948 = %946.0;
  (%947, %948)
}

def @func_1538() -> Tensor[(15, 2, 16), float64] {
  @func_1363() /* ty=Tensor[(15, 2, 16), float64] */
}

def @func_4779(%var_4753: Tensor[(15, 2, 16), float64]) -> (Tensor[(15, 2, 16), int64], Tensor[(5, 11, 11), float32]) {
  %949 = @func_3067() /* ty=(Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) */;
  %950 = %949.0;
  %951 = cast(%var_4753, dtype="int64") /* ty=Tensor[(15, 2, 16), int64] */;
  %952 = shape_of(%950, dtype="int32") /* ty=Tensor[(3), int32] */;
  %953 = cast(%950, dtype="int64") /* ty=Tensor[(15, 2, 16), int64] */;
  %954 = dyn.reshape(%951, %952, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %955 = @func_3650() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64]) */;
  %956 = bitwise_or(%953, %954) /* ty=Tensor[(15, 2, 16), int64] */;
  %957 = %955.0;
  (%956, %957)
}

def @func_1363() -> Tensor[(15, 2, 16), float64] {
  %958 = cast(meta[relay.Constant][36] /* ty=Tensor[(15, 2, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 16), float64] */;
  %959 = exp(%958) /* ty=Tensor[(15, 2, 16), float64] */;
  %960 = cast(%959, dtype="float64") /* ty=Tensor[(15, 2, 16), float64] */;
  %961 = log10(%960) /* ty=Tensor[(15, 2, 16), float64] */;
  %962 = cast(%961, dtype="float64") /* ty=Tensor[(15, 2, 16), float64] */;
  asin(%962) /* ty=Tensor[(15, 2, 16), float64] */
}

def @func_2913(%var_2889: Tensor[(15, 2, 16), float64]) -> (Tensor[(15, 2, 16), float32],) {
  %963 = @func_1538() /* ty=Tensor[(15, 2, 16), float64] */;
  %964 = cast(%var_2889, dtype="bool") /* ty=Tensor[(15, 2, 16), bool] */;
  %965 = shape_of(%963, dtype="int32") /* ty=Tensor[(3), int32] */;
  %966 = cast(%963, dtype="bool") /* ty=Tensor[(15, 2, 16), bool] */;
  %967 = dyn.reshape(%964, %965, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %968 = greater_equal(%966, %967) /* ty=Tensor[(15, 2, 16), bool] */;
  %969 = cast(%968, dtype="float32") /* ty=Tensor[(15, 2, 16), float32] */;
  %970 = acos(%969) /* ty=Tensor[(15, 2, 16), float32] */;
  (%970,)
}

def @func_782() -> (Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) {
  %971 = @func_246() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
  %972 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %973 = %972.0;
  %974 = cast(%973, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
  %975 = %971.1;
  %976 = log10(%974) /* ty=Tensor[(5, 11, 11), float64] */;
  (%975, %976)
}

def @func_10957() -> (Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), bool]) {
  %977 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %978 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %979 = %977.7;
  %980 = %978.7;
  (%979, %980)
}

def @func_11374() -> Tensor[(5, 11, 11), bool] {
  %981 = @func_10888() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(15, 2, 16), float64]) */;
  %981.0
}

def @func_8510() -> Tensor[(5, 11, 11), float32] {
  %982 = @func_6865() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %982.0
}

def @func_11309() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %983 = @func_2389() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %984 = @func_3489() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %985 = %983.0;
  %986 = @func_9408() /* ty=Tensor[(5, 11, 11), float32] */;
  %987 = %984.0;
  (%985, %986, %987)
}

def @func_10926() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), int64]) {
  %988 = @func_3489() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %989 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %990 = @func_7311() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), int64]) */;
  %991 = %988.0;
  %992 = %989.0;
  %993 = %990.1;
  (%991, %992, %993)
}

def @func_7931() -> (Tensor[(5, 11, 11), uint64],) {
  %994 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %995 = %994.1;
  (%995,)
}

def @func_11406() -> (Tensor[(5, 11, 11), bool],) {
  %996 = @func_9328() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %997 = %996.0;
  (%997,)
}

def @func_3350() -> Tensor[(5, 11, 11), float32] {
  %998 = @func_2501() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %998.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3131(%var_3129: Tensor[(5, 11, 11), int64]) -> (Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32]) {
  @func_3128(%var_3129) /* ty=(Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32]) */
}

def @func_2502() -> (Tensor[(5, 11, 11), float32],) {
  %2 = fn () -> (Tensor[(5, 11, 11), float32],) {
    %0 = @func_651() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) */;
    %1 = %0.5;
    (%1,)
  };
  %2() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_3284() -> (Tensor[(5, 11, 11), float32],) {
  %3 = @func_818() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %4 = %3.1;
  (%4,)
}

def @func_3350() -> Tensor[(5, 11, 11), float32] {
  %5 = @func_2501() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %5.0
}

def @func_2527() -> Tensor[(5, 11, 11), float32] {
  %6 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %6.0
}

def @func_2699() -> Tensor[(5, 11, 11), uint64] {
  @func_2697() /* ty=Tensor[(5, 11, 11), uint64] */
}

def @func_3913() -> (Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) {
  @func_3911() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) */
}

def @func_6404() -> (Tensor[(5, 11, 11), float32],) {
  %7 = @func_1800() /* ty=Tensor[(5, 11, 11), float32] */;
  (%7,)
}

def @func_10176() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %8 = @func_8926() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */;
  %9 = %8.2;
  %10 = @func_3659() /* ty=Tensor[(5, 11, 11), float32] */;
  (%9, %10)
}

def @func_11244() -> (Tensor[(5, 11, 11), bool],) {
  @func_11242() /* ty=(Tensor[(5, 11, 11), bool],) */
}

def @func_2264(%var_2235: Tensor[(2, 13, 6), float32], %var_2244: Tensor[(2, 13, 6), float32]) -> Tensor[(2, 13, 6), uint64] {
  %11 = cast(%var_2235, dtype="float32") /* ty=Tensor[(2, 13, 6), float32] */;
  %12 = sigmoid(%11) /* ty=Tensor[(2, 13, 6), float32] */;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(2, 13, 6), float64] */;
  %14 = sinh(%13) /* ty=Tensor[(2, 13, 6), float64] */;
  %15 = cast(%var_2244, dtype="bool") /* ty=Tensor[(2, 13, 6), bool] */;
  %16 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%12, dtype="bool") /* ty=Tensor[(2, 13, 6), bool] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %19 = less_equal(%17, %18) /* ty=Tensor[(2, 13, 6), bool] */;
  %20 = cast(%19, dtype="uint64") /* ty=Tensor[(2, 13, 6), uint64] */;
  %21 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%14, dtype="uint64") /* ty=Tensor[(2, 13, 6), uint64] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_and(%22, %23) /* ty=Tensor[(2, 13, 6), uint64] */
}

def @func_1881() -> Tensor[(5, 11, 11), uint64] {
  %24 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %24.1
}

def @func_10046() -> (Tensor[(5, 11, 11), uint64],) {
  %25 = @func_4002() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */;
  %26 = %25.0;
  (%26,)
}

def @func_11396() -> (Tensor[(5, 11, 11), bool],) {
  %27 = @func_808() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool]) */;
  %28 = %27.1;
  (%28,)
}

def @func_1417() -> (Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) {
  %29 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %30 = %29.0;
  %31 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 11, 11), float32] */, dtype="int64") /* ty=Tensor[(5, 11, 11), int64] */;
  %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%30, dtype="int64") /* ty=Tensor[(5, 11, 11), int64] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %35 = multiply(%33, %34) /* ty=Tensor[(5, 11, 11), int64] */;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %37 = reshape(%36, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), float32] */;
  %38 = @func_1011(%37) /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64]) */;
  %39 = %38.1;
  (%35, %39)
}

def @func_4861(%var_4859: Tensor[(3, 9, 8), float32], %var_4860: Tensor[(3, 9, 8), float32]) -> Tensor[(3, 9, 8), float32] {
  %44 = fn (%var_4850: Tensor[(3, 9, 8), float32], %var_4851: Tensor[(3, 9, 8), float32]) -> Tensor[(3, 9, 8), float32] {
    %40 = cast(%var_4851, dtype="float32") /* ty=Tensor[(3, 9, 8), float32] */;
    %41 = shape_of(%var_4850, dtype="int32") /* ty=Tensor[(3), int32] */;
    %42 = cast(%var_4850, dtype="float32") /* ty=Tensor[(3, 9, 8), float32] */;
    %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    subtract(%42, %43) /* ty=Tensor[(3, 9, 8), float32] */
  };
  %44(%var_4859, %var_4860) /* ty=Tensor[(3, 9, 8), float32] */
}

def @func_1419() -> (Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) {
  @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */
}

def @func_1210() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %45 = @func_841() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %46 = @func_889() /* ty=Tensor[(5, 11, 11), float32] */;
  %47 = %45.0;
  (%46, %47)
}

def @func_3190() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %48 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %49 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %50 = %48.0;
  %51 = %49.0;
  (%50, %51)
}

def @func_4002() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
  %52 = @func_1718() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(1764), uint8], Tensor[(1764), float64], Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) */;
  %53 = @func_2389() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %54 = %52.0;
  %55 = %53.0;
  (%54, %55)
}

def @func_9144() -> (Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), bool], Tensor[(264), bool]) {
  @func_9142() /* ty=(Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), bool], Tensor[(264), bool]) */
}

def @func_2697() -> Tensor[(5, 11, 11), uint64] {
  %56 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %56.6
}

def @func_6222(%var_6221: Tensor[(14, 12, 2), float64]) -> (Tensor[(14, 12, 2), float64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %65 = fn (%var_6169: Tensor[(14, 12, 2), float64]) -> (Tensor[(14, 12, 2), float64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
    %57 = cast(%var_6169, dtype="float64") /* ty=Tensor[(14, 12, 2), float64] */;
    %58 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %59 = @func_4489() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %60 = sinh(%57) /* ty=Tensor[(14, 12, 2), float64] */;
    %61 = %58.0;
    %62 = @func_133() /* ty=Tensor[(5, 11, 11), float32] */;
    %63 = %59.0;
    %64 = @func_5056() /* ty=Tensor[(5, 11, 11), float32] */;
    (%60, %61, %62, %63, %64)
  };
  %65(%var_6221) /* ty=(Tensor[(14, 12, 2), float64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_5599() -> (Tensor[(1764), float64], Tensor[(5, 11, 11), bool]) {
  %70 = fn () -> (Tensor[(1764), float64], Tensor[(5, 11, 11), bool]) {
    %66 = @func_5218() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), int64], Tensor[(1764), float64], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) */;
    %67 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
    %68 = %66.2;
    %69 = %67.2;
    (%68, %69)
  };
  %70() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), bool]) */
}

def @func_1539() -> Tensor[(15, 2, 16), float64] {
  %71 = fn () -> Tensor[(15, 2, 16), float64] {
    @func_1363() /* ty=Tensor[(15, 2, 16), float64] */
  };
  %71() /* ty=Tensor[(15, 2, 16), float64] */
}

def @func_5660() -> (Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), bool]) {
  %76 = fn () -> (Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), bool]) {
    %72 = @func_4138() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), int64]) */;
    %73 = @func_4138() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), int64]) */;
    %74 = %72.0;
    %75 = %73.0;
    (%74, %75)
  };
  %76() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), bool]) */
}

def @func_6317(%var_6314: Tensor[(7, 11, 1), float32], %var_6315: Tensor[(6, 44), bool], %var_6316: Tensor[(480), int32]) -> (Tensor[(11, 12, 2), bool], Tensor[(6, 44), bool], Tensor[(7, 11, 1), float64], Tensor[(5, 11, 11), int32], Tensor[(605), float32], Tensor[(480), int32], Tensor[(480), int32]) {
  %95 = fn (%var_6252: Tensor[(7, 11, 1), float32], %var_6260: Tensor[(6, 44), bool], %var_6307: Tensor[(480), int32]) -> (Tensor[(11, 12, 2), bool], Tensor[(6, 44), bool], Tensor[(7, 11, 1), float64], Tensor[(5, 11, 11), int32], Tensor[(605), float32], Tensor[(480), int32], Tensor[(480), int32]) {
    %77 = cast(%var_6260, dtype="bool") /* ty=Tensor[(6, 44), bool] */;
    %78 = cast(%var_6260, dtype="bool") /* ty=Tensor[(6, 44), bool] */;
    %79 = reshape(%77, newshape=[11, 12, 2]) /* ty=Tensor[(11, 12, 2), bool] */;
    %80 = reshape(%78, newshape=[11, 12, 2]) /* ty=Tensor[(11, 12, 2), bool] */;
    %81 = @func_2143(%79, %80) /* ty=(Tensor[(11, 12, 2), bool], Tensor[(5, 11, 11), float32]) */;
    %82 = cast(%var_6252, dtype="float32") /* ty=Tensor[(7, 11, 1), float32] */;
    %83 = rsqrt(%82) /* ty=Tensor[(7, 11, 1), float32] */;
    %84 = cast(%83, dtype="float64") /* ty=Tensor[(7, 11, 1), float64] */;
    %85 = cast(meta[relay.Constant][1] /* ty=Tensor[(605), float32] */, dtype="float32") /* ty=Tensor[(605), float32] */;
    %86 = reshape(%85, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), float32] */;
    %87 = @func_5092(%86) /* ty=(Tensor[(5, 11, 11), int32], Tensor[(5, 11, 11), float32]) */;
    %88 = cast(%var_6307, dtype="int32") /* ty=Tensor[(480), int32] */;
    %89 = reshape(%88, newshape=[480]) /* ty=Tensor[(480), int32] */;
    %90 = @func_4551(%89) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(480), int32], Tensor[(480), int32], Tensor[(5, 11, 11), bool]) */;
    %91 = %81.0;
    %92 = log2(%84) /* ty=Tensor[(7, 11, 1), float64] */;
    %93 = %87.0;
    %94 = %90.1;
    (%91, %var_6260, %92, %93, meta[relay.Constant][1] /* ty=Tensor[(605), float32] */, %94, %var_6307)
  };
  %95(%var_6314, %var_6315, %var_6316) /* ty=(Tensor[(11, 12, 2), bool], Tensor[(6, 44), bool], Tensor[(7, 11, 1), float64], Tensor[(5, 11, 11), int32], Tensor[(605), float32], Tensor[(480), int32], Tensor[(480), int32]) */
}

def @func_9045() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(312, ?), uint8], Tensor[(312, ?), bool]) {
  @func_9043() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(312, ?), uint8], Tensor[(312, ?), bool]) */
}

def @func_3262() -> Tensor[(5, 11, 11), float32] {
  @func_3260() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_10603() -> (Tensor[(5, 11, 11), float32],) {
  %96 = @func_10308() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */;
  %97 = %96.2;
  (%97,)
}

def @func_6866() -> (Tensor[(5, 11, 11), float32],) {
  %100 = fn () -> (Tensor[(5, 11, 11), float32],) {
    %98 = @func_651() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) */;
    %99 = %98.5;
    (%99,)
  };
  %100() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_11874() -> (Tensor[(16, 11, 16), float64], Tensor[(5, 11, 11), uint64]) {
  @func_11872() /* ty=(Tensor[(16, 11, 16), float64], Tensor[(5, 11, 11), uint64]) */
}

def @func_1011(%var_1001: Tensor[(5, 11, 11), float32]) -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64]) {
  %101 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %102 = %101.0;
  %103 = cast(%102, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %104 = erf(%103) /* ty=Tensor[(5, 11, 11), float32] */;
  %105 = @func_741() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], bool, Tensor[(1764), float64]) */;
  %106 = %105.2;
  %107 = cast(%104, dtype="uint64") /* ty=Tensor[(5, 11, 11), uint64] */;
  %108 = cast(%106, dtype="uint64") /* ty=uint64 */;
  %109 = cast(%var_1001, dtype="uint64") /* ty=Tensor[(5, 11, 11), uint64] */;
  %110 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%102, dtype="uint64") /* ty=Tensor[(5, 11, 11), uint64] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %113 = maximum(%107, %108) /* ty=Tensor[(5, 11, 11), uint64] */;
  %114 = right_shift(%111, %112) /* ty=Tensor[(5, 11, 11), uint64] */;
  (%113, %114)
}

def @func_8429(%var_8427: Tensor[(2, 4, 5), float64], %var_8428: Tensor[(2, 4, 5), float64]) -> (Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), float32], Tensor[(2, 4, 5), float64], Tensor[(2, 4, 5), float64], Tensor[(2, 4, 5), float32]) {
  @func_8425(%var_8427, %var_8428) /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), float32], Tensor[(2, 4, 5), float64], Tensor[(2, 4, 5), float64], Tensor[(2, 4, 5), float32]) */
}

def @func_9855() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(126, 14), float64]) {
  @func_9853() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(126, 14), float64]) */
}

def @func_8324() -> Tensor[(5, 11, 11), uint64] {
  @func_8322() /* ty=Tensor[(5, 11, 11), uint64] */
}

def @func_4138() -> (Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), int64]) {
  %115 = @func_314() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %116 = @func_919() /* ty=Tensor[(5, 11, 11), float32] */;
  %117 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 11, 11), float32] */, dtype="int64") /* ty=Tensor[(5, 11, 11), int64] */;
  %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%116, dtype="int64") /* ty=Tensor[(5, 11, 11), int64] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %121 = %115.0;
  %122 = bitwise_and(%119, %120) /* ty=Tensor[(5, 11, 11), int64] */;
  (%121, %122)
}

def @func_10684() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) {
  @func_10682() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */
}

def @func_7829() -> Tensor[(13, 3, 8), float64] {
  %124 = fn () -> Tensor[(13, 3, 8), float64] {
    %123 = @func_4346() /* ty=(Tensor[(13, 3, 8), float64],) */;
    %123.0
  };
  %124() /* ty=Tensor[(13, 3, 8), float64] */
}

def @func_8839() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(504), float32], Tensor[(5, 11, 11), float32]) {
  @func_8837() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(504), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_10977() -> (Tensor[(5, 11, 11), float32], Tensor[(13, 3, 8), float64]) {
  %125 = @func_4489() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %126 = @func_4346() /* ty=(Tensor[(13, 3, 8), float64],) */;
  %127 = %125.0;
  %128 = %126.0;
  (%127, %128)
}

def @func_3067() -> (Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) {
  %129 = @func_2882() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %130 = @func_1363() /* ty=Tensor[(15, 2, 16), float64] */;
  %131 = %129.1;
  (%130, %131)
}

def @func_2884() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  @func_2882() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_4986() -> (Tensor[(5, 11, 11), float32],) {
  @func_4984() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_316() -> (Tensor[(5, 11, 11), bool],) {
  @func_314() /* ty=(Tensor[(5, 11, 11), bool],) */
}

def @func_2978() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(10, 10, 1), float32], Tensor[(100), float32], Tensor[(15, 2, 16), float64]) {
  @func_2976() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(10, 10, 1), float32], Tensor[(100), float32], Tensor[(15, 2, 16), float64]) */
}

def @func_3323(%var_3322: Tensor[(108), float32]) -> (Tensor[(5, 11, 11), bool], Tensor[(9, 2, 6), float64], Tensor[(108), float32]) {
  %138 = fn (%var_3310: Tensor[(108), float32]) -> (Tensor[(5, 11, 11), bool], Tensor[(9, 2, 6), float64], Tensor[(108), float32]) {
    %132 = @func_314() /* ty=(Tensor[(5, 11, 11), bool],) */;
    %133 = cast(%var_3310, dtype="float32") /* ty=Tensor[(108), float32] */;
    %134 = reshape(%133, newshape=[9, 2, 6]) /* ty=Tensor[(9, 2, 6), float32] */;
    %135 = @func_2093(%134) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(9, 2, 6), float64]) */;
    %136 = %132.0;
    %137 = %135.1;
    (%136, %137, %var_3310)
  };
  %138(%var_3322) /* ty=(Tensor[(5, 11, 11), bool], Tensor[(9, 2, 6), float64], Tensor[(108), float32]) */
}

def @func_2233(%var_2232: Tensor[(10, 1, 13), uint64]) -> (Tensor[(10, 13, 13), uint64], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
  %146 = fn (%var_2173: Tensor[(10, 1, 13), uint64]) -> (Tensor[(10, 13, 13), uint64], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
    %139 = cast(%var_2173, dtype="uint64") /* ty=Tensor[(10, 1, 13), uint64] */;
    %140 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 13, 13), uint64] */, dtype="uint64") /* ty=Tensor[(10, 13, 13), uint64] */;
    %141 = @func_782() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
    %142 = multiply(%139, %140) /* ty=Tensor[(10, 13, 13), uint64] */;
    %143 = %141.1;
    %144 = @func_1881() /* ty=Tensor[(5, 11, 11), uint64] */;
    %145 = @func_1800() /* ty=Tensor[(5, 11, 11), float32] */;
    (%142, %143, %144, %145)
  };
  %146(%var_2232) /* ty=(Tensor[(10, 13, 13), uint64], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */
}

def @func_6598() -> (Tensor[(5, 11, 11), float32],) {
  %149 = fn () -> (Tensor[(5, 11, 11), float32],) {
    %147 = @func_3852() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
    %148 = %147.0;
    (%148,)
  };
  %149() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_10605() -> (Tensor[(5, 11, 11), float32],) {
  @func_10603() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_5159() -> (Tensor[(5, 11, 11), uint64], Tensor[(15, 2, 16), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %156 = fn () -> (Tensor[(5, 11, 11), uint64], Tensor[(15, 2, 16), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
    %150 = @func_1363() /* ty=Tensor[(15, 2, 16), float64] */;
    %151 = cast(%150, dtype="float32") /* ty=Tensor[(15, 2, 16), float32] */;
    %152 = @func_2697() /* ty=Tensor[(5, 11, 11), uint64] */;
    %153 = sin(%151) /* ty=Tensor[(15, 2, 16), float32] */;
    %154 = @func_4267() /* ty=Tensor[(5, 11, 11), float32] */;
    %155 = @func_133() /* ty=Tensor[(5, 11, 11), float32] */;
    (%152, %153, %154, %155)
  };
  %156() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(15, 2, 16), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_11233() -> Tensor[(1764), float64] {
  %158 = fn () -> Tensor[(1764), float64] {
    %157 = @func_5598() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), bool]) */;
    %157.0
  };
  %158() /* ty=Tensor[(1764), float64] */
}

def @func_4268() -> Tensor[(5, 11, 11), float32] {
  %161 = fn () -> Tensor[(5, 11, 11), float32] {
    %159 = @func_1800() /* ty=Tensor[(5, 11, 11), float32] */;
    %160 = cast(%159, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
    cos(%160) /* ty=Tensor[(5, 11, 11), float32] */
  };
  %161() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_3231() -> (Tensor[(5, 11, 11), float32],) {
  %163 = fn () -> (Tensor[(5, 11, 11), float32],) {
    %162 = @func_1800() /* ty=Tensor[(5, 11, 11), float32] */;
    (%162,)
  };
  %163() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_10136() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %164 = @func_7931() /* ty=(Tensor[(5, 11, 11), uint64],) */;
  %165 = @func_8926() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */;
  %166 = %164.0;
  %167 = @func_9472() /* ty=Tensor[(5, 11, 11), float32] */;
  %168 = %165.0;
  (%166, %167, %168)
}

def @func_2477(%var_2475: Tensor[(3, 588), float64]) -> (Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), float32], Tensor[(1764), int32], Tensor[(3, 588), float64], Tensor[(5, 11, 11), uint64]) {
  @func_2474(%var_2475) /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), float32], Tensor[(1764), int32], Tensor[(3, 588), float64], Tensor[(5, 11, 11), uint64]) */
}

def @func_1526() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) {
  %169 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %170 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %171 = @func_314() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %172 = @func_314() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %173 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %174 = %169.1;
  %175 = cast(%174, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %176 = reshape(%175, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), float32] */;
  %177 = @func_1011(%176) /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64]) */;
  %178 = @func_314() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %179 = %170.1;
  %180 = %171.0;
  %181 = @func_1074() /* ty=Tensor[(5, 11, 11), float32] */;
  %182 = %172.0;
  %183 = %173.0;
  %184 = %177.0;
  %185 = %178.0;
  (%174, %179, %180, %181, %182, %183, %184, %185)
}

def @func_2289() -> (Tensor[(15, 2, 16), float64],) {
  %186 = @func_1363() /* ty=Tensor[(15, 2, 16), float64] */;
  (%186,)
}

def @func_8927() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
  %191 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
    %187 = @func_3067() /* ty=(Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) */;
    %188 = @func_5378() /* ty=Tensor[(5, 11, 11), float32] */;
    %189 = @func_8232() /* ty=Tensor[(5, 11, 11), uint64] */;
    %190 = %187.1;
    (%188, %189, %190)
  };
  %191() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */
}

def @func_11309() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %192 = @func_2389() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %193 = @func_3489() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %194 = %192.0;
  %195 = @func_9408() /* ty=Tensor[(5, 11, 11), float32] */;
  %196 = %193.0;
  (%194, %195, %196)
}

def @func_1761() -> (Tensor[(5, 11, 11), float32],) {
  %197 = @func_919() /* ty=Tensor[(5, 11, 11), float32] */;
  (%197,)
}

def @func_810() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool]) {
  @func_808() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool]) */
}

def @func_9110() -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float64]) {
  %198 = @func_8175() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %199 = @func_5938() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %200 = %198.0;
  %201 = %199.0;
  (%200, %201)
}

def @func_12165() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
  %205 = fn () -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
    %202 = @func_2550() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %203 = @func_2697() /* ty=Tensor[(5, 11, 11), uint64] */;
    %204 = %202.0;
    (%203, %204)
  };
  %205() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */
}

def @func_2529() -> Tensor[(5, 11, 11), float32] {
  @func_2527() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_783() -> (Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) {
  %212 = fn () -> (Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) {
    %206 = @func_246() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
    %207 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %208 = %207.0;
    %209 = cast(%208, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
    %210 = %206.1;
    %211 = log10(%209) /* ty=Tensor[(5, 11, 11), float64] */;
    (%210, %211)
  };
  %212() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */
}

def @func_2819(%var_2817: Tensor[(10, 10, 1), float32]) -> (Tensor[(10, 10, 1), float32],) {
  @func_2816(%var_2817) /* ty=(Tensor[(10, 10, 1), float32],) */
}

def @func_9473() -> Tensor[(5, 11, 11), float32] {
  %214 = fn () -> Tensor[(5, 11, 11), float32] {
    %213 = @func_4674() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
    %213.0
  };
  %214() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_10394() -> (Tensor[(5, 11, 11), uint64],) {
  %215 = @func_7931() /* ty=(Tensor[(5, 11, 11), uint64],) */;
  %216 = %215.0;
  (%216,)
}

def @func_9250() -> Tensor[(5, 11, 11), float32] {
  %217 = @func_2882() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %217.1
}

def @func_889() -> Tensor[(5, 11, 11), float32] {
  %218 = @func_841() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %218.0
}

def @func_7116(%var_7114: Tensor[(16, 1, 2), bool], %var_7115: Tensor[(16, 14, 2), bool]) -> (Tensor[(16, 14, 2), bool],) {
  %222 = fn (%var_7087: Tensor[(16, 1, 2), bool], %var_7088: Tensor[(16, 14, 2), bool]) -> (Tensor[(16, 14, 2), bool],) {
    %219 = cast(%var_7087, dtype="bool") /* ty=Tensor[(16, 1, 2), bool] */;
    %220 = cast(%var_7088, dtype="bool") /* ty=Tensor[(16, 14, 2), bool] */;
    %221 = logical_or(%219, %220) /* ty=Tensor[(16, 14, 2), bool] */;
    (%221,)
  };
  %222(%var_7114, %var_7115) /* ty=(Tensor[(16, 14, 2), bool],) */
}

def @func_5219() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), int64], Tensor[(1764), float64], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) {
  %232 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), int64], Tensor[(1764), float64], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) {
    %223 = cast(meta[relay.Constant][4] /* ty=Tensor[(1764), float64] */, dtype="float64") /* ty=Tensor[(1764), float64] */;
    %224 = reshape(%223, newshape=[1764]) /* ty=Tensor[(1764), float64] */;
    %225 = @func_1996(%224) /* ty=(Tensor[(1764), int32], Tensor[(1764), bool], Tensor[(5, 11, 11), int64]) */;
    %226 = cast(meta[relay.Constant][5] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %227 = reshape(%226, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), float64] */;
    %228 = @func_2913(%227) /* ty=(Tensor[(15, 2, 16), float32],) */;
    %229 = @func_133() /* ty=Tensor[(5, 11, 11), float32] */;
    %230 = %225.2;
    %231 = %228.0;
    (%229, %230, meta[relay.Constant][4] /* ty=Tensor[(1764), float64] */, %231, meta[relay.Constant][5] /* ty=Tensor[(480), float64] */)
  };
  %232() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), int64], Tensor[(1764), float64], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) */
}

def @func_7531(%var_7500: Tensor[(13, 8, 3), float64], %var_7501: Tensor[(13, 8, 3), float64]) -> (Tensor[(5, 11, 11), float32], Tensor[(13, 8, 3), float64]) {
  %233 = @func_4489() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %234 = cast(%var_7501, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %235 = shape_of(%var_7500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%var_7500, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %238 = divide(%236, %237) /* ty=Tensor[(13, 8, 3), float64] */;
  %239 = cast(%238, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %240 = atan(%239) /* ty=Tensor[(13, 8, 3), float64] */;
  %241 = cast(%238, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %242 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%240, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %245 = %233.0;
  %246 = mod(%243, %244) /* ty=Tensor[(13, 8, 3), float64] */;
  (%245, %246)
}

def @func_10979() -> (Tensor[(5, 11, 11), float32], Tensor[(13, 3, 8), float64]) {
  @func_10977() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(13, 3, 8), float64]) */
}

def @func_11311() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  @func_11309() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_12366(%var_12331: Tensor[(1, 2, 6), float64]) -> (Tensor[(5, 11, 11), float32], Tensor[(1, 2, 6), float32]) {
  %247 = cast(%var_12331, dtype="float64") /* ty=Tensor[(1, 2, 6), float64] */;
  %248 = cos(%247) /* ty=Tensor[(1, 2, 6), float64] */;
  %249 = cast(%248, dtype="float64") /* ty=Tensor[(1, 2, 6), float64] */;
  %250 = cosh(%249) /* ty=Tensor[(1, 2, 6), float64] */;
  %251 = cast(%250, dtype="float32") /* ty=Tensor[(1, 2, 6), float32] */;
  %252 = @func_5892() /* ty=Tensor[(5, 11, 11), float32] */;
  %253 = rsqrt(%251) /* ty=Tensor[(1, 2, 6), float32] */;
  (%252, %253)
}

def @func_5940() -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) {
  @func_5938() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */
}

def @func_7581(%var_7579: Tensor[(3, 1, 6), uint64]) -> Tensor[(3, ?, 6), uint64] {
  @func_7578(%var_7579) /* ty=Tensor[(3, ?, 6), uint64] */
}

def @func_10232() -> (Tensor[(5, 11, 11), float32], Tensor[(10, 10, 1), float32], Tensor[(100), float32]) {
  %260 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(10, 10, 1), float32], Tensor[(100), float32]) {
    %254 = @func_6404() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %255 = cast(meta[relay.Constant][6] /* ty=Tensor[(100), float32] */, dtype="float32") /* ty=Tensor[(100), float32] */;
    %256 = reshape(%255, newshape=[10, 10, 1]) /* ty=Tensor[(10, 10, 1), float32] */;
    %257 = @func_2816(%256) /* ty=(Tensor[(10, 10, 1), float32],) */;
    %258 = %254.0;
    %259 = %257.0;
    (%258, %259, meta[relay.Constant][6] /* ty=Tensor[(100), float32] */)
  };
  %260() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(10, 10, 1), float32], Tensor[(100), float32]) */
}

def @func_4382(%var_4380: Tensor[(4, 14, 9), float32], %var_4381: Tensor[(4, 14, 9), float32]) -> (Tensor[(4, 14, 9), float32], Tensor[(5, 11, 11), uint64]) {
  %267 = fn (%var_4366: Tensor[(4, 14, 9), float32], %var_4367: Tensor[(4, 14, 9), float32]) -> (Tensor[(4, 14, 9), float32], Tensor[(5, 11, 11), uint64]) {
    %261 = cast(%var_4367, dtype="float32") /* ty=Tensor[(4, 14, 9), float32] */;
    %262 = shape_of(%var_4366, dtype="int32") /* ty=Tensor[(3), int32] */;
    %263 = cast(%var_4366, dtype="float32") /* ty=Tensor[(4, 14, 9), float32] */;
    %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %265 = mod(%263, %264) /* ty=Tensor[(4, 14, 9), float32] */;
    %266 = @func_2697() /* ty=Tensor[(5, 11, 11), uint64] */;
    (%265, %266)
  };
  %267(%var_4380, %var_4381) /* ty=(Tensor[(4, 14, 9), float32], Tensor[(5, 11, 11), uint64]) */
}

def @func_11376() -> Tensor[(5, 11, 11), bool] {
  @func_11374() /* ty=Tensor[(5, 11, 11), bool] */
}

def @func_4779(%var_4753: Tensor[(15, 2, 16), float64]) -> (Tensor[(15, 2, 16), int64], Tensor[(5, 11, 11), float32]) {
  %268 = @func_3067() /* ty=(Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) */;
  %269 = %268.0;
  %270 = cast(%var_4753, dtype="int64") /* ty=Tensor[(15, 2, 16), int64] */;
  %271 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%269, dtype="int64") /* ty=Tensor[(15, 2, 16), int64] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %274 = @func_3650() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64]) */;
  %275 = bitwise_or(%272, %273) /* ty=Tensor[(15, 2, 16), int64] */;
  %276 = %274.0;
  (%275, %276)
}

def @func_8758() -> (Tensor[(5, 11, 11), float32],) {
  @func_8756() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_11242() -> (Tensor[(5, 11, 11), bool],) {
  %277 = @func_314() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %278 = %277.0;
  (%278,)
}

def @func_354() -> Tensor[(5, 11, 11), float32] {
  %279 = fn () -> Tensor[(5, 11, 11), float32] {
    @func_133() /* ty=Tensor[(5, 11, 11), float32] */
  };
  %279() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_11513(%var_11511: Tensor[(15, 2, 16), float64]) -> Tensor[(15, 2, 16), uint64] {
  @func_11510(%var_11511) /* ty=Tensor[(15, 2, 16), uint64] */
}

def @func_7499() -> (Tensor[(5, 11, 11), int16],) {
  @func_7497() /* ty=(Tensor[(5, 11, 11), int16],) */
}

def @func_8837() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(504), float32], Tensor[(5, 11, 11), float32]) {
  %280 = @func_4822() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %281 = @func_3650() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64]) */;
  %282 = %280.1;
  %283 = cast(%282, dtype="int64") /* ty=Tensor[(5, 11, 11), int64] */;
  %284 = reshape(%283, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), int64] */;
  %285 = @func_3128(%284) /* ty=(Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32]) */;
  %286 = cast(meta[relay.Constant][7] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %287 = cast(meta[relay.Constant][7] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %288 = reshape(%286, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), float32] */;
  %289 = reshape(%287, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), float32] */;
  %290 = @func_4379(%288, %289) /* ty=(Tensor[(4, 14, 9), float32], Tensor[(5, 11, 11), uint64]) */;
  %291 = @func_1881() /* ty=Tensor[(5, 11, 11), uint64] */;
  %292 = %281.0;
  %293 = %285.1;
  %294 = %290.1;
  %295 = @func_889() /* ty=Tensor[(5, 11, 11), float32] */;
  (%291, %282, %292, %293, %294, meta[relay.Constant][7] /* ty=Tensor[(504), float32] */, %295)
}

def @func_5328() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int64]) {
  %302 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int64]) {
    %296 = @func_4489() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %297 = @func_1940() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
    %298 = @func_4138() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), int64]) */;
    %299 = %296.0;
    %300 = %297.1;
    %301 = %298.1;
    (%299, %300, %301)
  };
  %302() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int64]) */
}

def @func_6683() -> (Tensor[(5, 11, 11), float32],) {
  @func_6681() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_547(%var_545: Tensor[(4, 8, 15), int32], %var_546: Tensor[(4, 8, 15), int32]) -> (Tensor[(4, 8, 15), int32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), bool]) {
  @func_543(%var_545, %var_546) /* ty=(Tensor[(4, 8, 15), int32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), bool]) */
}

def @func_11720() -> Tensor[(5, 11, 11), float32] {
  @func_11718() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_8121() -> (Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) {
  %306 = fn () -> (Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) {
    %303 = @func_7311() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), int64]) */;
    %304 = %303.0;
    %305 = @func_5056() /* ty=Tensor[(5, 11, 11), float32] */;
    (%304, %305)
  };
  %306() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) */
}

def @func_3911() -> (Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) {
  %307 = @func_2389() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %308 = cast(meta[relay.Constant][8] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %309 = reshape(%308, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), float64] */;
  %310 = @func_2913(%309) /* ty=(Tensor[(15, 2, 16), float32],) */;
  %311 = %307.0;
  %312 = %310.0;
  (%311, %312, meta[relay.Constant][8] /* ty=Tensor[(480), float64] */)
}

def @func_11407() -> (Tensor[(5, 11, 11), bool],) {
  %315 = fn () -> (Tensor[(5, 11, 11), bool],) {
    %313 = @func_9328() /* ty=(Tensor[(5, 11, 11), bool],) */;
    %314 = %313.0;
    (%314,)
  };
  %315() /* ty=(Tensor[(5, 11, 11), bool],) */
}

def @func_5733() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float64], Tensor[(12, ?, 15), uint32]) {
  %316 = @func_2882() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %317 = @func_3650() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64]) */;
  %318 = @func_2289() /* ty=(Tensor[(15, 2, 16), float64],) */;
  %319 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 1, 15), float32] */, dtype="float32") /* ty=Tensor[(12, 1, 15), float32] */;
  %320 = log10(%319) /* ty=Tensor[(12, 1, 15), float32] */;
  %321 = cast(%320, dtype="float64") /* ty=Tensor[(12, 1, 15), float64] */;
  %322 = cos(%321) /* ty=Tensor[(12, 1, 15), float64] */;
  %323 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 1, 15), float32] */, dtype="uint32") /* ty=Tensor[(12, 1, 15), uint32] */;
  %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%322, dtype="uint32") /* ty=Tensor[(12, 1, 15), uint32] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %327 = %316.0;
  %328 = %317.0;
  %329 = %318.0;
  %330 = bitwise_xor(%325, %326) /* ty=Tensor[(12, ?, 15), uint32] */;
  (%327, %328, %329, %330)
}

def @func_10702(%var_10700: Tensor[(12, 2, 11), uint16], %var_10701: Tensor[(12, 2, 11), uint16]) -> (Tensor[(12, 2, 11), uint16],) {
  %336 = fn (%var_10692: Tensor[(12, 2, 11), uint16], %var_10693: Tensor[(12, 2, 11), uint16]) -> (Tensor[(12, 2, 11), uint16],) {
    %331 = cast(%var_10693, dtype="uint16") /* ty=Tensor[(12, 2, 11), uint16] */;
    %332 = shape_of(%var_10692, dtype="int32") /* ty=Tensor[(3), int32] */;
    %333 = cast(%var_10692, dtype="uint16") /* ty=Tensor[(12, 2, 11), uint16] */;
    %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %335 = bitwise_and(%333, %334) /* ty=Tensor[(12, 2, 11), uint16] */;
    (%335,)
  };
  %336(%var_10700, %var_10701) /* ty=(Tensor[(12, 2, 11), uint16],) */
}

def @func_742() -> (Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], bool, Tensor[(1764), float64]) {
  %346 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], bool, Tensor[(1764), float64]) {
    %337 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %338 = cast(meta[relay.Constant][10] /* ty=Tensor[(1764), bool] */, dtype="bool") /* ty=Tensor[(1764), bool] */;
    %339 = reshape(%337, newshape=[]) /* ty=bool */;
    %340 = reshape(%338, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), bool] */;
    %341 = @func_560(%339, %340) /* ty=(Tensor[(14, 14, 9), bool],) */;
    %342 = cast(meta[relay.Constant][10] /* ty=Tensor[(1764), bool] */, dtype="float64") /* ty=Tensor[(1764), float64] */;
    %343 = @func_353() /* ty=Tensor[(5, 11, 11), float32] */;
    %344 = %341.0;
    %345 = asin(%342) /* ty=Tensor[(1764), float64] */;
    (%343, %344, True /* ty=bool */, %345)
  };
  %346() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], bool, Tensor[(1764), float64]) */
}

def @func_6681() -> (Tensor[(5, 11, 11), float32],) {
  %347 = @func_3260() /* ty=Tensor[(5, 11, 11), float32] */;
  (%347,)
}

def @func_10178() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  @func_10176() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_4451() -> Tensor[(5, 11, 11), float32] {
  %348 = @func_3230() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %348.0
}

def @func_12369(%var_12367: Tensor[(1, 2, 6), float64]) -> (Tensor[(5, 11, 11), float32], Tensor[(1, 2, 6), float32]) {
  @func_12366(%var_12367) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(1, 2, 6), float32]) */
}

def @func_10753(%var_10751: Tensor[(77), float32]) -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), int64], Tensor[(7, 11, 1), float64], Tensor[(77), float32], Tensor[(1, 264), bool], Tensor[(480, 1), int32]) {
  @func_10750(%var_10751) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), int64], Tensor[(7, 11, 1), float64], Tensor[(77), float32], Tensor[(1, 264), bool], Tensor[(480, 1), int32]) */
}

def @func_8097(%var_8094: Tensor[(6, 84), float32], %var_8095: Tensor[(3, 104), float64], %var_8096: Tensor[(4, 120), int32]) -> (Tensor[(5, 11, 11), float32], Tensor[(6, 14, 6), float32], Tensor[(6, 84), float32], Tensor[(2, 13, 6), uint64], Tensor[(156), float32], Tensor[(3, 104), int32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(4, 120), float32], Tensor[(5, 11, 11), float64]) {
  %384 = fn (%var_8047: Tensor[(6, 84), float32], %var_8058: Tensor[(3, 104), float64], %var_8081: Tensor[(4, 120), int32]) -> (Tensor[(5, 11, 11), float32], Tensor[(6, 14, 6), float32], Tensor[(6, 84), float32], Tensor[(2, 13, 6), uint64], Tensor[(156), float32], Tensor[(3, 104), int32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(4, 120), float32], Tensor[(5, 11, 11), float64]) {
    %349 = @func_3489() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
    %350 = cast(%var_8047, dtype="float32") /* ty=Tensor[(6, 84), float32] */;
    %351 = reshape(%350, newshape=[6, 14, 6]) /* ty=Tensor[(6, 14, 6), float32] */;
    %352 = cast(meta[relay.Constant][11] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
    %353 = cast(meta[relay.Constant][11] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
    %354 = reshape(%352, newshape=[2, 13, 6]) /* ty=Tensor[(2, 13, 6), float32] */;
    %355 = reshape(%353, newshape=[2, 13, 6]) /* ty=Tensor[(2, 13, 6), float32] */;
    %356 = cast(%var_8058, dtype="float64") /* ty=Tensor[(3, 104), float64] */;
    %357 = cast(%var_8058, dtype="float64") /* ty=Tensor[(3, 104), float64] */;
    %358 = reshape(%356, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float64] */;
    %359 = reshape(%357, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float64] */;
    %360 = @func_7531(%358, %359) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(13, 8, 3), float64]) */;
    %361 = %360.1;
    %362 = cast(%361, dtype="int32") /* ty=Tensor[(13, 8, 3), int32] */;
    %363 = shape_of(%var_8058, dtype="int32") /* ty=Tensor[(2), int32] */;
    %364 = cast(%var_8058, dtype="int32") /* ty=Tensor[(3, 104), int32] */;
    %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %366 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 120), int32] */, dtype="int32") /* ty=Tensor[(4, 120), int32] */;
    %367 = reshape(%366, newshape=[480]) /* ty=Tensor[(480), int32] */;
    %368 = @func_4551(%367) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(480), int32], Tensor[(480), int32], Tensor[(5, 11, 11), bool]) */;
    %369 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
    %370 = cast(%var_8081, dtype="float32") /* ty=Tensor[(4, 120), float32] */;
    %371 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(4, 120), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %372 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 120), int32] */, dtype="float32") /* ty=Tensor[(4, 120), float32] */;
    %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %374 = @func_5327() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int64]) */;
    %375 = %349.2;
    %376 = @func_7005(%351) /* ty=Tensor[(6, 14, 6), float32] */;
    %377 = @func_2264(%354, %355) /* ty=Tensor[(2, 13, 6), uint64] */;
    %378 = bitwise_xor(%364, %365) /* ty=Tensor[(3, 104), int32] */;
    %379 = %368.3;
    %380 = @func_8009() /* ty=Tensor[(5, 11, 11), float32] */;
    %381 = %369.6;
    %382 = mod(%372, %373) /* ty=Tensor[(4, 120), float32] */;
    %383 = %374.1;
    (%375, %376, %var_8047, %377, meta[relay.Constant][11] /* ty=Tensor[(156), float32] */, %378, %379, %380, %381, %382, %383)
  };
  %384(%var_8094, %var_8095, %var_8096) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(6, 14, 6), float32], Tensor[(6, 84), float32], Tensor[(2, 13, 6), uint64], Tensor[(156), float32], Tensor[(3, 104), int32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(4, 120), float32], Tensor[(5, 11, 11), float64]) */
}

def @func_8177() -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) {
  @func_8175() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */
}

def @func_2551() -> (Tensor[(5, 11, 11), float32],) {
  %387 = fn () -> (Tensor[(5, 11, 11), float32],) {
    %385 = @func_651() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) */;
    %386 = %385.5;
    (%386,)
  };
  %387() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_11735(%var_11733: Tensor[(16, 5, 1), uint32], %var_11734: Tensor[(16, 5, 15), uint32]) -> (Tensor[(16, 5, 15), uint32],) {
  %391 = fn (%var_11727: Tensor[(16, 5, 1), uint32], %var_11728: Tensor[(16, 5, 15), uint32]) -> (Tensor[(16, 5, 15), uint32],) {
    %388 = cast(%var_11727, dtype="uint32") /* ty=Tensor[(16, 5, 1), uint32] */;
    %389 = cast(%var_11728, dtype="uint32") /* ty=Tensor[(16, 5, 15), uint32] */;
    %390 = bitwise_xor(%388, %389) /* ty=Tensor[(16, 5, 15), uint32] */;
    (%390,)
  };
  %391(%var_11733, %var_11734) /* ty=(Tensor[(16, 5, 15), uint32],) */
}

def @func_1528() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) {
  @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */
}

def @func_11835(%var_11834: Tensor[(480), float64]) -> (Tensor[(5, 11, 11), int16], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) {
  %404 = fn (%var_11831: Tensor[(480), float64]) -> (Tensor[(5, 11, 11), int16], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) {
    %392 = @func_7497() /* ty=(Tensor[(5, 11, 11), int16],) */;
    %393 = @func_10603() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %394 = @func_4674() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
    %395 = @func_2389() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %396 = cast(%var_11831, dtype="float64") /* ty=Tensor[(480), float64] */;
    %397 = reshape(%396, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), float64] */;
    %398 = @func_2913(%397) /* ty=(Tensor[(15, 2, 16), float32],) */;
    %399 = %392.0;
    %400 = %393.0;
    %401 = %394.1;
    %402 = %395.0;
    %403 = %398.0;
    (%399, %400, %401, %402, %403, %var_11831)
  };
  %404(%var_11834) /* ty=(Tensor[(5, 11, 11), int16], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) */
}

def @func_9043() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(312, ?), uint8], Tensor[(312, ?), bool]) {
  %405 = cast(meta[relay.Constant][13] /* ty=Tensor[(312, 1), float64] */, dtype="float64") /* ty=Tensor[(312, 1), float64] */;
  %406 = cast(meta[relay.Constant][13] /* ty=Tensor[(312, 1), float64] */, dtype="float64") /* ty=Tensor[(312, 1), float64] */;
  %407 = reshape(%405, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float64] */;
  %408 = reshape(%406, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float64] */;
  %409 = @func_7531(%407, %408) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(13, 8, 3), float64]) */;
  %410 = %409.1;
  %411 = cast(%410, dtype="uint8") /* ty=Tensor[(13, 8, 3), uint8] */;
  %412 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(312, 1), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %413 = cast(meta[relay.Constant][13] /* ty=Tensor[(312, 1), float64] */, dtype="uint8") /* ty=Tensor[(312, 1), uint8] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %415 = cast(%410, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %416 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(312, 1), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %417 = cast(meta[relay.Constant][13] /* ty=Tensor[(312, 1), float64] */, dtype="float64") /* ty=Tensor[(312, 1), float64] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %419 = power(%417, %418) /* ty=Tensor[(312, ?), float64] */;
  %420 = cast(%410, dtype="bool") /* ty=Tensor[(13, 8, 3), bool] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(2), int32] */;
  %422 = cast(%419, dtype="bool") /* ty=Tensor[(312, ?), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %424 = @func_2697() /* ty=Tensor[(5, 11, 11), uint64] */;
  %425 = @func_8009() /* ty=Tensor[(5, 11, 11), float32] */;
  %426 = subtract(%413, %414) /* ty=Tensor[(312, ?), uint8] */;
  %427 = logical_or(%422, %423) /* ty=Tensor[(312, ?), bool] */;
  (%424, %425, %426, %427)
}

def @func_5893() -> Tensor[(5, 11, 11), float32] {
  %429 = fn () -> Tensor[(5, 11, 11), float32] {
    %428 = @func_1761() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %428.0
  };
  %429() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_3260() -> Tensor[(5, 11, 11), float32] {
  %430 = @func_818() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %430.1
}

def @func_8295(%var_8294: Tensor[(7, 7, 6), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32], Tensor[(336), float64]) {
  %438 = fn (%var_8261: Tensor[(7, 7, 6), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32], Tensor[(336), float64]) {
    %431 = cast(%var_8261, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
    %432 = cast(meta[relay.Constant][14] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %433 = reshape(%432, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), float64] */;
    %434 = @func_6220(%433) /* ty=(Tensor[(14, 12, 2), float64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
    %435 = cosh(%431) /* ty=Tensor[(7, 7, 6), float32] */;
    %436 = @func_1538() /* ty=Tensor[(15, 2, 16), float64] */;
    %437 = %434.1;
    (%435, %436, %437, meta[relay.Constant][14] /* ty=Tensor[(336), float64] */)
  };
  %438(%var_8294) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32], Tensor[(336), float64]) */
}

def @func_4824() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  @func_4822() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_7337() -> (Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) {
  %442 = fn () -> (Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) {
    %439 = @func_1718() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(1764), uint8], Tensor[(1764), float64], Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) */;
    %440 = %439.2;
    %441 = @func_1800() /* ty=Tensor[(5, 11, 11), float32] */;
    (%440, %441)
  };
  %442() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) */
}

def @func_4140() -> (Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), int64]) {
  @func_4138() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), int64]) */
}

def @func_3755() -> Tensor[(5, 11, 11), uint64] {
  %443 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %443.1
}

def @func_4328() -> Tensor[(5, 11, 11), float32] {
  %444 = @func_4219() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %444.2
}

def @func_12325() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %450 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
    %445 = @func_4674() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
    %446 = @func_4674() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
    %447 = %445.0;
    %448 = @func_1074() /* ty=Tensor[(5, 11, 11), float32] */;
    %449 = %446.0;
    (%447, %448, %449)
  };
  %450() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_5379() -> Tensor[(5, 11, 11), float32] {
  %452 = fn () -> Tensor[(5, 11, 11), float32] {
    %451 = @func_4418() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %451.0
  };
  %452() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_8510() -> Tensor[(5, 11, 11), float32] {
  %453 = @func_6865() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %453.0
}

def @func_5058() -> Tensor[(5, 11, 11), float32] {
  @func_5056() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_1720() -> (Tensor[(5, 11, 11), uint64], Tensor[(1764), uint8], Tensor[(1764), float64], Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) {
  @func_1718() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(1764), uint8], Tensor[(1764), float64], Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) */
}

def @func_10583(%var_10581: Tensor[(4, 14, 13), int32]) -> (Tensor[(4, 14, 13), bool], Tensor[(4, 14, 13), int16]) {
  @func_10580(%var_10581) /* ty=(Tensor[(4, 14, 13), bool], Tensor[(4, 14, 13), int16]) */
}

def @func_6440() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  @func_6438() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_1801() -> Tensor[(5, 11, 11), float32] {
  %454 = fn () -> Tensor[(5, 11, 11), float32] {
    @func_889() /* ty=Tensor[(5, 11, 11), float32] */
  };
  %454() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_246() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) {
  %455 = @func_133() /* ty=Tensor[(5, 11, 11), float32] */;
  %456 = cast(%455, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
  %457 = acosh(%456) /* ty=Tensor[(5, 11, 11), float64] */;
  %458 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 11, 11), float64] */, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%457, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %462 = cast(%457, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %463 = atan(%462) /* ty=Tensor[(5, 11, 11), float32] */;
  %464 = cast(%463, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
  %465 = acos(%464) /* ty=Tensor[(5, 11, 11), float64] */;
  %466 = cast(%465, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
  %467 = @func_133() /* ty=Tensor[(5, 11, 11), float32] */;
  %468 = equal(%460, %461) /* ty=Tensor[(5, 11, 11), bool] */;
  %469 = exp(%466) /* ty=Tensor[(5, 11, 11), float64] */;
  (%467, %468, %469)
}

def @func_5938() -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) {
  %470 = @func_246() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
  %471 = @func_5818() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */;
  %472 = %470.2;
  %473 = %471.1;
  (%472, %473)
}

def @func_9853() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(126, 14), float64]) {
  %474 = @func_7704() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %475 = cast(meta[relay.Constant][16] /* ty=Tensor[(126, 14), float64] */, dtype="float64") /* ty=Tensor[(126, 14), float64] */;
  %476 = reshape(%475, newshape=[3, 588]) /* ty=Tensor[(3, 588), float64] */;
  %477 = @func_2474(%476) /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), float32], Tensor[(1764), int32], Tensor[(3, 588), float64], Tensor[(5, 11, 11), uint64]) */;
  %478 = %474.1;
  %479 = %477.4;
  (%478, %479, meta[relay.Constant][16] /* ty=Tensor[(126, 14), float64] */)
}

def @func_3708() -> (Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float64], Tensor[(1764), bool], Tensor[(5, 11, 11), float32]) {
  %480 = @func_651() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) */;
  %481 = @func_2037() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %482 = @func_1074() /* ty=Tensor[(5, 11, 11), float32] */;
  %483 = @func_1538() /* ty=Tensor[(15, 2, 16), float64] */;
  %484 = %480.2;
  %485 = %481.0;
  (%482, %483, %484, %485)
}

def @func_7975(%var_7973: Tensor[(12, 2, 8), uint16], %var_7974: Tensor[(12, 2, 8), uint16]) -> (Tensor[(12, 2, 8), uint16], Tensor[(12, 2, 8), float32]) {
  @func_7971(%var_7973, %var_7974) /* ty=(Tensor[(12, 2, 8), uint16], Tensor[(12, 2, 8), float32]) */
}

def @func_9273() -> Tensor[(5, 11, 11), float32] {
  %486 = @func_3650() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64]) */;
  %486.0
}

def @func_11374() -> Tensor[(5, 11, 11), bool] {
  %487 = @func_10888() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(15, 2, 16), float64]) */;
  %487.0
}

def @func_8425(%var_8374: Tensor[(2, 4, 5), float64], %var_8394: Tensor[(2, 4, 5), float64]) -> (Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), float32], Tensor[(2, 4, 5), float64], Tensor[(2, 4, 5), float64], Tensor[(2, 4, 5), float32]) {
  %488 = @func_7311() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), int64]) */;
  %489 = cast(%var_8374, dtype="float64") /* ty=Tensor[(2, 4, 5), float64] */;
  %490 = cast(%var_8374, dtype="float64") /* ty=Tensor[(2, 4, 5), float64] */;
  %491 = sinh(%490) /* ty=Tensor[(2, 4, 5), float64] */;
  %492 = cast(%var_8394, dtype="float64") /* ty=Tensor[(2, 4, 5), float64] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%491, dtype="float64") /* ty=Tensor[(2, 4, 5), float64] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %496 = cast(%491, dtype="float32") /* ty=Tensor[(2, 4, 5), float32] */;
  %497 = %488.1;
  %498 = @func_3260() /* ty=Tensor[(5, 11, 11), float32] */;
  %499 = asinh(%489) /* ty=Tensor[(2, 4, 5), float64] */;
  %500 = mod(%494, %495) /* ty=Tensor[(2, 4, 5), float64] */;
  %501 = sigmoid(%496) /* ty=Tensor[(2, 4, 5), float32] */;
  (%497, %498, %499, %500, %501)
}

def @func_12255() -> Tensor[(5, 11, 11), float32] {
  %502 = fn () -> Tensor[(5, 11, 11), float32] {
    @func_133() /* ty=Tensor[(5, 11, 11), float32] */
  };
  %502() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_4052() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %507 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
    %503 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %504 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %505 = %503.0;
    %506 = %504.0;
    (%505, %506)
  };
  %507() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_9924(%var_9897: Tensor[(2, 7, 6), float64]) -> (Tensor[(2, 7, 6), float64], Tensor[(5, 11, 11), float32]) {
  %508 = cast(%var_9897, dtype="float64") /* ty=Tensor[(2, 7, 6), float64] */;
  %509 = log2(%508) /* ty=Tensor[(2, 7, 6), float64] */;
  %510 = @func_9408() /* ty=Tensor[(5, 11, 11), float32] */;
  (%509, %510)
}

def @func_10138() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  @func_10136() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_7312() -> (Tensor[(1764), float64], Tensor[(5, 11, 11), int64]) {
  %517 = fn () -> (Tensor[(1764), float64], Tensor[(5, 11, 11), int64]) {
    %511 = @func_5218() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), int64], Tensor[(1764), float64], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) */;
    %512 = %511.2;
    %513 = cast(%512, dtype="float64") /* ty=Tensor[(1764), float64] */;
    %514 = reshape(%513, newshape=[3, 588]) /* ty=Tensor[(3, 588), float64] */;
    %515 = @func_2474(%514) /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), float32], Tensor[(1764), int32], Tensor[(3, 588), float64], Tensor[(5, 11, 11), uint64]) */;
    %516 = %515.0;
    (%512, %516)
  };
  %517() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), int64]) */
}

def @func_841() -> (Tensor[(5, 11, 11), float32],) {
  %518 = @func_133() /* ty=Tensor[(5, 11, 11), float32] */;
  (%518,)
}

def @func_1075() -> Tensor[(5, 11, 11), float32] {
  %519 = fn () -> Tensor[(5, 11, 11), float32] {
    @func_353() /* ty=Tensor[(5, 11, 11), float32] */
  };
  %519() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_543(%var_518: Tensor[(4, 8, 15), int32], %var_519: Tensor[(4, 8, 15), int32]) -> (Tensor[(4, 8, 15), int32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), bool]) {
  %520 = cast(%var_519, dtype="int32") /* ty=Tensor[(4, 8, 15), int32] */;
  %521 = shape_of(%var_518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%var_518, dtype="int32") /* ty=Tensor[(4, 8, 15), int32] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %524 = @func_246() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
  %525 = @func_314() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %526 = logical_xor(%522, %523) /* ty=Tensor[(4, 8, 15), int32] */;
  %527 = %524.2;
  %528 = %525.0;
  (%526, %527, %528)
}

def @func_5551() -> Tensor[(15, 2, 16), float64] {
  %530 = fn () -> Tensor[(15, 2, 16), float64] {
    %529 = @func_2289() /* ty=(Tensor[(15, 2, 16), float64],) */;
    %529.0
  };
  %530() /* ty=Tensor[(15, 2, 16), float64] */
}

def @func_7971(%var_7947: Tensor[(12, 2, 8), uint16], %var_7948: Tensor[(12, 2, 8), uint16]) -> (Tensor[(12, 2, 8), uint16], Tensor[(12, 2, 8), float32]) {
  %531 = cast(%var_7948, dtype="uint16") /* ty=Tensor[(12, 2, 8), uint16] */;
  %532 = shape_of(%var_7947, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%var_7947, dtype="uint16") /* ty=Tensor[(12, 2, 8), uint16] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %535 = cast(%var_7948, dtype="float32") /* ty=Tensor[(12, 2, 8), float32] */;
  %536 = maximum(%533, %534) /* ty=Tensor[(12, 2, 8), uint16] */;
  %537 = tan(%535) /* ty=Tensor[(12, 2, 8), float32] */;
  (%536, %537)
}

def @func_2147(%var_2145: Tensor[(11, 12, 2), bool], %var_2146: Tensor[(11, 12, 2), bool]) -> (Tensor[(11, 12, 2), bool], Tensor[(5, 11, 11), float32]) {
  @func_2143(%var_2145, %var_2146) /* ty=(Tensor[(11, 12, 2), bool], Tensor[(5, 11, 11), float32]) */
}

def @func_3710() -> (Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float64], Tensor[(1764), bool], Tensor[(5, 11, 11), float32]) {
  @func_3708() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float64], Tensor[(1764), bool], Tensor[(5, 11, 11), float32]) */
}

def @func_6438() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %538 = @func_4822() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %539 = @func_5158() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(15, 2, 16), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %540 = %538.0;
  %541 = %539.2;
  %542 = @func_889() /* ty=Tensor[(5, 11, 11), float32] */;
  (%540, %541, %542)
}

def @func_4962() -> (Tensor[(5, 11, 11), bool], Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) {
  %543 = @func_4138() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), int64]) */;
  %544 = @func_2501() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %545 = %543.0;
  %546 = @func_1538() /* ty=Tensor[(15, 2, 16), float64] */;
  %547 = %544.0;
  (%545, %546, %547)
}

def @func_808() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool]) {
  %548 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %549 = @func_782() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
  %550 = %548.0;
  %551 = %549.0;
  (%550, %551)
}

def @func_7050() -> (Tensor[(5, 11, 11), bool],) {
  %554 = fn () -> (Tensor[(5, 11, 11), bool],) {
    %552 = @func_4138() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), int64]) */;
    %553 = %552.0;
    (%553,)
  };
  %554() /* ty=(Tensor[(5, 11, 11), bool],) */
}

def @func_1268() -> (Tensor[(5, 11, 11), float32],) {
  %556 = fn () -> (Tensor[(5, 11, 11), float32],) {
    %555 = @func_889() /* ty=Tensor[(5, 11, 11), float32] */;
    (%555,)
  };
  %556() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_9252() -> Tensor[(5, 11, 11), float32] {
  @func_9250() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_3757() -> Tensor[(5, 11, 11), uint64] {
  @func_3755() /* ty=Tensor[(5, 11, 11), uint64] */
}

def @func_10310() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
  @func_10308() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */
}

def @func_10308() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
  %557 = @func_2501() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %558 = %557.0;
  %559 = @func_1881() /* ty=Tensor[(5, 11, 11), uint64] */;
  %560 = @func_9720() /* ty=Tensor[(5, 11, 11), float32] */;
  (%558, %559, %560)
}

def @func_799() -> Tensor[(5, 11, 11), float32] {
  %561 = fn () -> Tensor[(5, 11, 11), float32] {
    @func_133() /* ty=Tensor[(5, 11, 11), float32] */
  };
  %561() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_10926() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), int64]) {
  %562 = @func_3489() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %563 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %564 = @func_7311() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), int64]) */;
  %565 = %562.0;
  %566 = %563.0;
  %567 = %564.1;
  (%565, %566, %567)
}

def @func_4004() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
  @func_4002() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */
}

def @func_6406() -> (Tensor[(5, 11, 11), float32],) {
  @func_6404() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_7497() -> (Tensor[(5, 11, 11), int16],) {
  %568 = @func_2976() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(10, 10, 1), float32], Tensor[(100), float32], Tensor[(15, 2, 16), float64]) */;
  %569 = %568.0;
  %570 = @func_5158() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(15, 2, 16), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %571 = %570.3;
  %572 = cast(%571, dtype="int16") /* ty=Tensor[(5, 11, 11), int16] */;
  %573 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%569, dtype="int16") /* ty=Tensor[(5, 11, 11), int16] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %576 = add(%574, %575) /* ty=Tensor[(5, 11, 11), int16] */;
  (%576,)
}

def @func_4675() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) {
  %581 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) {
    %577 = @func_3911() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float32], Tensor[(480), float64]) */;
    %578 = @func_1940() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
    %579 = %577.0;
    %580 = %578.1;
    (%579, %580)
  };
  %581() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */
}

def @func_8728(%var_8726: Tensor[(77), float32], %var_8727: Tensor[(480), int32]) -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32], Tensor[(13, 3, 8), uint8], Tensor[(11, 12, 2), bool], Tensor[(77), float32], Tensor[(264), bool], Tensor[(480), int32]) {
  @func_8724(%var_8726, %var_8727) /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32], Tensor[(13, 3, 8), uint8], Tensor[(11, 12, 2), bool], Tensor[(77), float32], Tensor[(264), bool], Tensor[(480), int32]) */
}

def @func_8558() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(1764), float64], Tensor[(13, 14, 13), uint64], Tensor[(15, 2, 16), float64], Tensor[(2366), float64]) {
  @func_8556() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(1764), float64], Tensor[(13, 14, 13), uint64], Tensor[(15, 2, 16), float64], Tensor[(2366), float64]) */
}

def @func_2976() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(10, 10, 1), float32], Tensor[(100), float32], Tensor[(15, 2, 16), float64]) {
  %582 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %583 = cast(meta[relay.Constant][17] /* ty=Tensor[(100), float32] */, dtype="float32") /* ty=Tensor[(100), float32] */;
  %584 = reshape(%583, newshape=[10, 10, 1]) /* ty=Tensor[(10, 10, 1), float32] */;
  %585 = @func_2816(%584) /* ty=(Tensor[(10, 10, 1), float32],) */;
  %586 = %582.1;
  %587 = @func_2527() /* ty=Tensor[(5, 11, 11), float32] */;
  %588 = %585.0;
  %589 = @func_1363() /* ty=Tensor[(15, 2, 16), float64] */;
  (%586, %587, %588, meta[relay.Constant][17] /* ty=Tensor[(100), float32] */, %589)
}

def @func_12215() -> (Tensor[(5, 11, 11), bool], Tensor[(13, 3, 8), float64]) {
  %594 = fn () -> (Tensor[(5, 11, 11), bool], Tensor[(13, 3, 8), float64]) {
    %590 = @func_11406() /* ty=(Tensor[(5, 11, 11), bool],) */;
    %591 = @func_4346() /* ty=(Tensor[(13, 3, 8), float64],) */;
    %592 = %590.0;
    %593 = %591.0;
    (%592, %593)
  };
  %594() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(13, 3, 8), float64]) */
}

def @func_11872() -> (Tensor[(16, 11, 16), float64], Tensor[(5, 11, 11), uint64]) {
  %595 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 11, 16), float64] */, dtype="float64") /* ty=Tensor[(16, 11, 16), float64] */;
  %596 = @func_10394() /* ty=(Tensor[(5, 11, 11), uint64],) */;
  %597 = log(%595) /* ty=Tensor[(16, 11, 16), float64] */;
  %598 = %596.0;
  (%597, %598)
}

def @func_9951() -> (Tensor[(5, 11, 11), uint64],) {
  %600 = fn () -> (Tensor[(5, 11, 11), uint64],) {
    %599 = @func_8232() /* ty=Tensor[(5, 11, 11), uint64] */;
    (%599,)
  };
  %600() /* ty=(Tensor[(5, 11, 11), uint64],) */
}

def @func_11592() -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), uint64]) {
  %601 = @func_6570() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32], Tensor[(264), bool], Tensor[(1764), float64]) */;
  %602 = @func_10394() /* ty=(Tensor[(5, 11, 11), uint64],) */;
  %603 = %601.0;
  %604 = %602.0;
  (%603, %604)
}

def @func_9927(%var_9925: Tensor[(2, 7, 6), float64]) -> (Tensor[(2, 7, 6), float64], Tensor[(5, 11, 11), float32]) {
  @func_9924(%var_9925) /* ty=(Tensor[(2, 7, 6), float64], Tensor[(5, 11, 11), float32]) */
}

def @func_891() -> Tensor[(5, 11, 11), float32] {
  @func_889() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_5094(%var_5093: Tensor[(5, 11, 11), float32]) -> (Tensor[(5, 11, 11), int32], Tensor[(5, 11, 11), float32]) {
  %612 = fn (%var_5081: Tensor[(5, 11, 11), float32]) -> (Tensor[(5, 11, 11), int32], Tensor[(5, 11, 11), float32]) {
    %605 = @func_1074() /* ty=Tensor[(5, 11, 11), float32] */;
    %606 = cast(%var_5081, dtype="int32") /* ty=Tensor[(5, 11, 11), int32] */;
    %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
    %608 = cast(%605, dtype="int32") /* ty=Tensor[(5, 11, 11), int32] */;
    %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %610 = left_shift(%608, %609) /* ty=Tensor[(5, 11, 11), int32] */;
    %611 = @func_4267() /* ty=Tensor[(5, 11, 11), float32] */;
    (%610, %611)
  };
  %612(%var_5093) /* ty=(Tensor[(5, 11, 11), int32], Tensor[(5, 11, 11), float32]) */
}

def @func_2268(%var_2266: Tensor[(2, 13, 6), float32], %var_2267: Tensor[(2, 13, 6), float32]) -> Tensor[(2, 13, 6), uint64] {
  @func_2264(%var_2266, %var_2267) /* ty=Tensor[(2, 13, 6), uint64] */
}

def @func_4782(%var_4780: Tensor[(15, 2, 16), float64]) -> (Tensor[(15, 2, 16), int64], Tensor[(5, 11, 11), float32]) {
  @func_4779(%var_4780) /* ty=(Tensor[(15, 2, 16), int64], Tensor[(5, 11, 11), float32]) */
}

def @func_7037(%var_7035: Tensor[(5, 2, 3), float64]) -> (Tensor[(5, 2, 3), uint32],) {
  @func_7034(%var_7035) /* ty=(Tensor[(5, 2, 3), uint32],) */
}

def @func_4964() -> (Tensor[(5, 11, 11), bool], Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) {
  @func_4962() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) */
}

def @func_3058(%var_3057: Tensor[(5, 11, 11), float32]) -> (Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(15, 2, 16), float64]) {
  %624 = fn (%var_3031: Tensor[(5, 11, 11), float32]) -> (Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(15, 2, 16), float64]) {
    %613 = @func_2976() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(10, 10, 1), float32], Tensor[(100), float32], Tensor[(15, 2, 16), float64]) */;
    %614 = %613.1;
    %615 = cast(%var_3031, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
    %616 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
    %617 = cast(%614, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
    %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %619 = @func_2501() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %620 = less_equal(%617, %618) /* ty=Tensor[(5, 11, 11), bool] */;
    %621 = %619.0;
    %622 = @func_1881() /* ty=Tensor[(5, 11, 11), uint64] */;
    %623 = @func_1363() /* ty=Tensor[(15, 2, 16), float64] */;
    (%620, %621, %622, %623)
  };
  %624(%var_3057) /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(15, 2, 16), float64]) */
}

def @func_9408() -> Tensor[(5, 11, 11), float32] {
  %625 = @func_2550() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %625.0
}

def @func_4878() -> Tensor[(5, 11, 11), float32] {
  %626 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %626.0
}

def @func_9329() -> (Tensor[(5, 11, 11), bool],) {
  %629 = fn () -> (Tensor[(5, 11, 11), bool],) {
    %627 = @func_5659() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), bool]) */;
    %628 = %627.0;
    (%628,)
  };
  %629() /* ty=(Tensor[(5, 11, 11), bool],) */
}

def @func_563(%var_561: bool, %var_562: Tensor[(14, 14, 9), bool]) -> (Tensor[(14, 14, 9), bool],) {
  %633 = fn (%var_554: bool, %var_555: Tensor[(14, 14, 9), bool]) -> (Tensor[(14, 14, 9), bool],) {
    %630 = cast(%var_554, dtype="bool") /* ty=bool */;
    %631 = cast(%var_555, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
    %632 = logical_or(%630, %631) /* ty=Tensor[(14, 14, 9), bool] */;
    (%632,)
  };
  %633(%var_561, %var_562) /* ty=(Tensor[(14, 14, 9), bool],) */
}

def @func_7008(%var_7006: Tensor[(6, 14, 6), float32]) -> Tensor[(6, 14, 6), float32] {
  @func_7005(%var_7006) /* ty=Tensor[(6, 14, 6), float32] */
}

def @func_8724(%var_8720: Tensor[(77), float32], %var_8722: Tensor[(480), int32]) -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32], Tensor[(13, 3, 8), uint8], Tensor[(11, 12, 2), bool], Tensor[(77), float32], Tensor[(264), bool], Tensor[(480), int32]) {
  %634 = @func_246() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
  %635 = @func_6404() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %636 = @func_7828() /* ty=Tensor[(13, 3, 8), float64] */;
  %637 = @func_7828() /* ty=Tensor[(13, 3, 8), float64] */;
  %638 = cast(%637, dtype="uint8") /* ty=Tensor[(13, 3, 8), uint8] */;
  %639 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%636, dtype="uint8") /* ty=Tensor[(13, 3, 8), uint8] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %642 = cast(%var_8720, dtype="float32") /* ty=Tensor[(77), float32] */;
  %643 = cast(meta[relay.Constant][19] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %644 = cast(%var_8722, dtype="int32") /* ty=Tensor[(480), int32] */;
  %645 = reshape(%642, newshape=[7, 11, 1]) /* ty=Tensor[(7, 11, 1), float32] */;
  %646 = reshape(%643, newshape=[6, 44]) /* ty=Tensor[(6, 44), bool] */;
  %647 = reshape(%644, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %648 = @func_6313(%645, %646, %647) /* ty=(Tensor[(11, 12, 2), bool], Tensor[(6, 44), bool], Tensor[(7, 11, 1), float64], Tensor[(5, 11, 11), int32], Tensor[(605), float32], Tensor[(480), int32], Tensor[(480), int32]) */;
  %649 = %634.2;
  %650 = %635.0;
  %651 = minimum(%640, %641) /* ty=Tensor[(13, 3, 8), uint8] */;
  %652 = %648.0;
  (%649, %650, %651, %652, %var_8720, meta[relay.Constant][19] /* ty=Tensor[(264), bool] */, %var_8722)
}

def @func_10432() -> (Tensor[(5, 11, 11), float32],) {
  %655 = fn () -> (Tensor[(5, 11, 11), float32],) {
    %653 = @func_3708() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float64], Tensor[(1764), bool], Tensor[(5, 11, 11), float32]) */;
    %654 = %653.3;
    (%654,)
  };
  %655() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_11510(%var_11494: Tensor[(15, 2, 16), float64]) -> Tensor[(15, 2, 16), uint64] {
  %656 = @func_1538() /* ty=Tensor[(15, 2, 16), float64] */;
  %657 = cast(%var_11494, dtype="uint64") /* ty=Tensor[(15, 2, 16), uint64] */;
  %658 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%656, dtype="uint64") /* ty=Tensor[(15, 2, 16), uint64] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%659, %660) /* ty=Tensor[(15, 2, 16), uint64] */
}

def @func_11594() -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), uint64]) {
  @func_11592() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), uint64]) */
}

def @func_4984() -> (Tensor[(5, 11, 11), float32],) {
  %661 = @func_2550() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %662 = %661.0;
  (%662,)
}

def @func_5819() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
  %672 = fn () -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) {
    %663 = @func_3650() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64]) */;
    %664 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %665 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
    %666 = @func_2780() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
    %667 = %663.1;
    %668 = %664.0;
    %669 = @func_1074() /* ty=Tensor[(5, 11, 11), float32] */;
    %670 = %665.6;
    %671 = %666.0;
    (%667, %668, %669, %670, %671)
  };
  %672() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */
}

def @func_9720() -> Tensor[(5, 11, 11), float32] {
  %673 = @func_2389() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %673.0
}

def @func_1320() -> Tensor[(5, 11, 11), float32] {
  %675 = fn () -> Tensor[(5, 11, 11), float32] {
    %674 = @func_1210() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
    %674.1
  };
  %675() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_3853() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) {
  %682 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) {
    %676 = @func_2780() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
    %677 = @func_1319() /* ty=Tensor[(5, 11, 11), float32] */;
    %678 = cast(%677, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
    %679 = %676.0;
    %680 = @func_2527() /* ty=Tensor[(5, 11, 11), float32] */;
    %681 = atanh(%678) /* ty=Tensor[(5, 11, 11), float64] */;
    (%679, %680, %681)
  };
  %682() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */
}

def @func_314() -> (Tensor[(5, 11, 11), bool],) {
  %683 = @func_246() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
  %684 = %683.1;
  (%684,)
}

def @func_2882() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %685 = @func_1074() /* ty=Tensor[(5, 11, 11), float32] */;
  %686 = @func_1074() /* ty=Tensor[(5, 11, 11), float32] */;
  (%685, %686)
}

def @func_1763() -> (Tensor[(5, 11, 11), float32],) {
  @func_1761() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_3560() -> Tensor[(5, 11, 11), float32] {
  @func_3558() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_843() -> (Tensor[(5, 11, 11), float32],) {
  @func_841() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_11718() -> Tensor[(5, 11, 11), float32] {
  %687 = @func_2389() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %687.0
}

def @func_9722() -> Tensor[(5, 11, 11), float32] {
  @func_9720() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_10855() -> (Tensor[(5, 11, 11), float32],) {
  %690 = fn () -> (Tensor[(5, 11, 11), float32],) {
    %688 = @func_2550() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %689 = %688.0;
    (%689,)
  };
  %690() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_2039() -> (Tensor[(5, 11, 11), float32],) {
  @func_2037() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_9410() -> Tensor[(5, 11, 11), float32] {
  @func_9408() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_3069() -> (Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) {
  @func_3067() /* ty=(Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) */
}

def @main(%var_12509: Tensor[(11, 2, 6), float32]) -> (Tensor[(11, 2, 6), float32], Tensor[(5, 11, 11), float32], Tensor[(11, 2, 6), float32]) {
  %691 = cast(%var_12509, dtype="float32") /* ty=Tensor[(11, 2, 6), float32] */;
  %692 = sinh(%691) /* ty=Tensor[(11, 2, 6), float32] */;
  %693 = cast(%692, dtype="float32") /* ty=Tensor[(11, 2, 6), float32] */;
  %694 = @func_6683() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %695 = cast(%var_12509, dtype="float32") /* ty=Tensor[(11, 2, 6), float32] */;
  %696 = shape_of(%692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%692, dtype="float32") /* ty=Tensor[(11, 2, 6), float32] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %699 = sin(%693) /* ty=Tensor[(11, 2, 6), float32] */;
  %700 = %694.0;
  %701 = mod(%697, %698) /* ty=Tensor[(11, 2, 6), float32] */;
  (%699, %700, %701)
}

def @func_5361(%var_5360: Tensor[(3, 14, 2), float32]) -> (Tensor[(3, 14, 2), float64],) {
  %706 = fn (%var_5347: Tensor[(3, 14, 2), float32]) -> (Tensor[(3, 14, 2), float64],) {
    %702 = cast(%var_5347, dtype="float32") /* ty=Tensor[(3, 14, 2), float32] */;
    %703 = erf(%702) /* ty=Tensor[(3, 14, 2), float32] */;
    %704 = cast(%703, dtype="float64") /* ty=Tensor[(3, 14, 2), float64] */;
    %705 = cos(%704) /* ty=Tensor[(3, 14, 2), float64] */;
    (%705,)
  };
  %706(%var_5360) /* ty=(Tensor[(3, 14, 2), float64],) */
}

def @func_10957() -> (Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), bool]) {
  %707 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %708 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %709 = %707.7;
  %710 = %708.7;
  (%709, %710)
}

def @func_7205() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %715 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
    %711 = @func_4489() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %712 = %711.0;
    %713 = @func_1319() /* ty=Tensor[(5, 11, 11), float32] */;
    %714 = @func_3350() /* ty=Tensor[(5, 11, 11), float32] */;
    (%712, %713, %714)
  };
  %715() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_248() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) {
  @func_246() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */
}

def @func_12191(%var_12169: Tensor[(13, 6, 12), float32], %var_12176: Tensor[(77), float32], %var_12177: Tensor[(480), int32]) -> (Tensor[(13, 6, 12), float32], Tensor[(11, 12, 2), bool], Tensor[(77), float32], Tensor[(480), int32], Tensor[(4, 14, 13), bool], Tensor[(728), int32]) {
  %716 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 6, 12), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %717 = shape_of(%var_12169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %718 = cast(%var_12169, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %720 = cast(%var_12176, dtype="float32") /* ty=Tensor[(77), float32] */;
  %721 = cast(%var_12177, dtype="int32") /* ty=Tensor[(480), int32] */;
  %722 = reshape(%720, newshape=[77]) /* ty=Tensor[(77), float32] */;
  %723 = reshape(%721, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %724 = @func_8724(%722, %723) /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32], Tensor[(13, 3, 8), uint8], Tensor[(11, 12, 2), bool], Tensor[(77), float32], Tensor[(264), bool], Tensor[(480), int32]) */;
  %725 = cast(meta[relay.Constant][21] /* ty=Tensor[(728), int32] */, dtype="int32") /* ty=Tensor[(728), int32] */;
  %726 = reshape(%725, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), int32] */;
  %727 = @func_10580(%726) /* ty=(Tensor[(4, 14, 13), bool], Tensor[(4, 14, 13), int16]) */;
  %728 = minimum(%718, %719) /* ty=Tensor[(13, 6, 12), float32] */;
  %729 = %724.3;
  %730 = %727.0;
  (%728, %729, %var_12176, %var_12177, %730, meta[relay.Constant][21] /* ty=Tensor[(728), int32] */)
}

def @func_9112() -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float64]) {
  @func_9110() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float64]) */
}

def @func_1996(%var_1976: Tensor[(1764), float64]) -> (Tensor[(1764), int32], Tensor[(1764), bool], Tensor[(5, 11, 11), int64]) {
  %731 = @func_1718() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(1764), uint8], Tensor[(1764), float64], Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) */;
  %732 = %731.3;
  %733 = cast(%var_1976, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(1), int32] */;
  %735 = cast(%732, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?), bool] */;
  %737 = greater(%735, %736) /* ty=Tensor[(1764), bool] */;
  %738 = cast(%737, dtype="float32") /* ty=Tensor[(1764), float32] */;
  %739 = acosh(%738) /* ty=Tensor[(1764), float32] */;
  %740 = cast(%732, dtype="int32") /* ty=Tensor[(1764), int32] */;
  %741 = shape_of(%739, dtype="int32") /* ty=Tensor[(1), int32] */;
  %742 = cast(%739, dtype="int32") /* ty=Tensor[(1764), int32] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?), int32] */;
  %744 = @func_651() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) */;
  %745 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %746 = bitwise_or(%742, %743) /* ty=Tensor[(1764), int32] */;
  %747 = %744.2;
  %748 = %745.0;
  (%746, %747, %748)
}

def @func_3651() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64]) {
  %754 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64]) {
    %749 = @func_1319() /* ty=Tensor[(5, 11, 11), float32] */;
    %750 = cast(%749, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
    %751 = reshape(%750, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), float32] */;
    %752 = @func_3056(%751) /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(15, 2, 16), float64]) */;
    %753 = %752.2;
    (%749, %753)
  };
  %754() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64]) */
}

def @func_1014(%var_1012: Tensor[(5, 11, 11), float32]) -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64]) {
  @func_1011(%var_1012) /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64]) */
}

def @func_10008() -> (Tensor[(5, 11, 11), uint64],) {
  %757 = fn () -> (Tensor[(5, 11, 11), uint64],) {
    %755 = @func_5818() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */;
    %756 = %755.0;
    (%756,)
  };
  %757() /* ty=(Tensor[(5, 11, 11), uint64],) */
}

def @func_11398() -> (Tensor[(5, 11, 11), bool],) {
  @func_11396() /* ty=(Tensor[(5, 11, 11), bool],) */
}

def @func_4553(%var_4552: Tensor[(480), int32]) -> (Tensor[(5, 11, 11), float32], Tensor[(480), int32], Tensor[(480), int32], Tensor[(5, 11, 11), bool]) {
  %766 = fn (%var_4538: Tensor[(480), int32]) -> (Tensor[(5, 11, 11), float32], Tensor[(480), int32], Tensor[(480), int32], Tensor[(5, 11, 11), bool]) {
    %758 = @func_818() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
    %759 = cast(%var_4538, dtype="int32") /* ty=Tensor[(480), int32] */;
    %760 = reshape(%759, newshape=[480]) /* ty=Tensor[(480), int32] */;
    %761 = @func_2656(%760) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(480), int32], Tensor[(5, 11, 11), int8]) */;
    %762 = @func_314() /* ty=(Tensor[(5, 11, 11), bool],) */;
    %763 = %758.1;
    %764 = %761.2;
    %765 = %762.0;
    (%763, %764, %var_4538, %765)
  };
  %766(%var_4552) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(480), int32], Tensor[(480), int32], Tensor[(5, 11, 11), bool]) */
}

def @func_1718() -> (Tensor[(5, 11, 11), uint64], Tensor[(1764), uint8], Tensor[(1764), float64], Tensor[(1764), float64], Tensor[(5, 11, 11), float32]) {
  %767 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %768 = @func_741() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], bool, Tensor[(1764), float64]) */;
  %769 = %768.3;
  %770 = cast(meta[relay.Constant][22] /* ty=Tensor[(1764), float64] */, dtype="uint8") /* ty=Tensor[(1764), uint8] */;
  %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(1), int32] */;
  %772 = cast(%769, dtype="uint8") /* ty=Tensor[(1764), uint8] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %774 = cast(%769, dtype="float64") /* ty=Tensor[(1764), float64] */;
  %775 = cast(%769, dtype="float32") /* ty=Tensor[(1764), float32] */;
  %776 = acos(%775) /* ty=Tensor[(1764), float32] */;
  %777 = cast(%776, dtype="float64") /* ty=Tensor[(1764), float64] */;
  %778 = @func_818() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %779 = %767.1;
  %780 = bitwise_xor(%772, %773) /* ty=Tensor[(1764), uint8] */;
  %781 = log10(%774) /* ty=Tensor[(1764), float64] */;
  %782 = sqrt(%777) /* ty=Tensor[(1764), float64] */;
  %783 = %778.1;
  (%779, %780, %781, %782, %783)
}

def @func_7292(%var_7291: Tensor[(4, 1), bool]) -> (Tensor[(4, 1), bool],) {
  %787 = fn (%var_7274: Tensor[(4, 1), bool]) -> (Tensor[(4, 1), bool],) {
    %784 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %785 = cast(%var_7274, dtype="bool") /* ty=Tensor[(4, 1), bool] */;
    %786 = logical_and(%784, %785) /* ty=Tensor[(4, 1), bool] */;
    (%786,)
  };
  %787(%var_7291) /* ty=(Tensor[(4, 1), bool],) */
}

def @func_10682() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) {
  %788 = @func_2037() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %789 = @func_5158() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(15, 2, 16), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %790 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %791 = @func_1074() /* ty=Tensor[(5, 11, 11), float32] */;
  %792 = %788.0;
  %793 = @func_798() /* ty=Tensor[(5, 11, 11), float32] */;
  %794 = %789.0;
  %795 = %790.4;
  (%791, %792, %793, %794, %795)
}

def @func_12376() -> (Tensor[(5, 11, 11), bool],) {
  %798 = fn () -> (Tensor[(5, 11, 11), bool],) {
    %796 = @func_5598() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), bool]) */;
    %797 = %796.1;
    (%797,)
  };
  %798() /* ty=(Tensor[(5, 11, 11), bool],) */
}

def @func_2913(%var_2889: Tensor[(15, 2, 16), float64]) -> (Tensor[(15, 2, 16), float32],) {
  %799 = @func_1538() /* ty=Tensor[(15, 2, 16), float64] */;
  %800 = cast(%var_2889, dtype="bool") /* ty=Tensor[(15, 2, 16), bool] */;
  %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %802 = cast(%799, dtype="bool") /* ty=Tensor[(15, 2, 16), bool] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %804 = greater_equal(%802, %803) /* ty=Tensor[(15, 2, 16), bool] */;
  %805 = cast(%804, dtype="float32") /* ty=Tensor[(15, 2, 16), float32] */;
  %806 = acos(%805) /* ty=Tensor[(15, 2, 16), float32] */;
  (%806,)
}

def @func_10357() -> (Tensor[(5, 11, 11), float32],) {
  @func_10355() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_4822() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %807 = @func_1940() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
  %808 = @func_841() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %809 = @func_1210() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %810 = %807.0;
  %811 = %808.0;
  %812 = %809.0;
  (%810, %811, %812)
}

def @func_12196(%var_12193: Tensor[(13, 6, 12), float32], %var_12194: Tensor[(77), float32], %var_12195: Tensor[(480), int32]) -> (Tensor[(13, 6, 12), float32], Tensor[(11, 12, 2), bool], Tensor[(77), float32], Tensor[(480), int32], Tensor[(4, 14, 13), bool], Tensor[(728), int32]) {
  @func_12191(%var_12193, %var_12194, %var_12195) /* ty=(Tensor[(13, 6, 12), float32], Tensor[(11, 12, 2), bool], Tensor[(77), float32], Tensor[(480), int32], Tensor[(4, 14, 13), bool], Tensor[(728), int32]) */
}

def @func_5509(%var_5508: Tensor[(12, 18), float32]) -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int64], Tensor[(3, 9, 8), float32], Tensor[(12, 18), float32]) {
  %822 = fn (%var_5497: Tensor[(12, 18), float32]) -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int64], Tensor[(3, 9, 8), float32], Tensor[(12, 18), float32]) {
    %813 = @func_782() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
    %814 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
    %815 = cast(%var_5497, dtype="float32") /* ty=Tensor[(12, 18), float32] */;
    %816 = cast(%var_5497, dtype="float32") /* ty=Tensor[(12, 18), float32] */;
    %817 = reshape(%815, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), float32] */;
    %818 = reshape(%816, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), float32] */;
    %819 = %813.1;
    %820 = %814.0;
    %821 = @func_4858(%817, %818) /* ty=Tensor[(3, 9, 8), float32] */;
    (%819, %820, %821, %var_5497)
  };
  %822(%var_5508) /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int64], Tensor[(3, 9, 8), float32], Tensor[(12, 18), float32]) */
}

def @func_4330() -> Tensor[(5, 11, 11), float32] {
  @func_4328() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_5056() -> Tensor[(5, 11, 11), float32] {
  @func_919() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_7931() -> (Tensor[(5, 11, 11), uint64],) {
  %823 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %824 = %823.1;
  (%824,)
}

def @func_2781() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %829 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
    %825 = @func_651() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) */;
    %826 = @func_651() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) */;
    %827 = %825.3;
    %828 = %826.3;
    (%827, %828)
  };
  %829() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_8556() -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(1764), float64], Tensor[(13, 14, 13), uint64], Tensor[(15, 2, 16), float64], Tensor[(2366), float64]) {
  %830 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %831 = @func_4962() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) */;
  %832 = @func_7311() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), int64]) */;
  %833 = cast(meta[relay.Constant][23] /* ty=Tensor[(2366), uint64] */, dtype="uint64") /* ty=Tensor[(2366), uint64] */;
  %834 = cast(meta[relay.Constant][23] /* ty=Tensor[(2366), uint64] */, dtype="uint64") /* ty=Tensor[(2366), uint64] */;
  %835 = reshape(%833, newshape=[13, 14, 13]) /* ty=Tensor[(13, 14, 13), uint64] */;
  %836 = reshape(%834, newshape=[13, 14, 13]) /* ty=Tensor[(13, 14, 13), uint64] */;
  %837 = @func_7989(%835, %836) /* ty=(Tensor[(13, 14, 13), uint64],) */;
  %838 = cast(meta[relay.Constant][23] /* ty=Tensor[(2366), uint64] */, dtype="float64") /* ty=Tensor[(2366), float64] */;
  %839 = %830.1;
  %840 = %831.2;
  %841 = %832.0;
  %842 = %837.0;
  %843 = @func_1538() /* ty=Tensor[(15, 2, 16), float64] */;
  %844 = exp(%838) /* ty=Tensor[(2366), float64] */;
  (%839, %840, %841, %842, %843, %844)
}

def @func_3352() -> Tensor[(5, 11, 11), float32] {
  @func_3350() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_1940() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) {
  %845 = @func_818() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %846 = @func_919() /* ty=Tensor[(5, 11, 11), float32] */;
  %847 = %845.0;
  (%846, %847)
}

def @func_135() -> Tensor[(5, 11, 11), float32] {
  @func_133() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_10750(%var_10742: Tensor[(77), float32]) -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), int64], Tensor[(7, 11, 1), float64], Tensor[(77), float32], Tensor[(1, 264), bool], Tensor[(480, 1), int32]) {
  %848 = @func_10176() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
  %849 = @func_5327() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int64]) */;
  %850 = cast(%var_10742, dtype="float32") /* ty=Tensor[(77), float32] */;
  %851 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 264), bool] */, dtype="bool") /* ty=Tensor[(1, 264), bool] */;
  %852 = cast(meta[relay.Constant][25] /* ty=Tensor[(480, 1), int32] */, dtype="int32") /* ty=Tensor[(480, 1), int32] */;
  %853 = reshape(%850, newshape=[7, 11, 1]) /* ty=Tensor[(7, 11, 1), float32] */;
  %854 = reshape(%851, newshape=[6, 44]) /* ty=Tensor[(6, 44), bool] */;
  %855 = reshape(%852, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %856 = @func_6313(%853, %854, %855) /* ty=(Tensor[(11, 12, 2), bool], Tensor[(6, 44), bool], Tensor[(7, 11, 1), float64], Tensor[(5, 11, 11), int32], Tensor[(605), float32], Tensor[(480), int32], Tensor[(480), int32]) */;
  %857 = %848.0;
  %858 = %849.2;
  %859 = %856.2;
  (%857, %858, %859, %var_10742, meta[relay.Constant][24] /* ty=Tensor[(1, 264), bool] */, meta[relay.Constant][25] /* ty=Tensor[(480, 1), int32] */)
}

def @func_2474(%var_2445: Tensor[(3, 588), float64]) -> (Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), float32], Tensor[(1764), int32], Tensor[(3, 588), float64], Tensor[(5, 11, 11), uint64]) {
  %860 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %861 = @func_1940() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
  %862 = cast(%var_2445, dtype="float64") /* ty=Tensor[(3, 588), float64] */;
  %863 = reshape(%862, newshape=[1764]) /* ty=Tensor[(1764), float64] */;
  %864 = @func_1996(%863) /* ty=(Tensor[(1764), int32], Tensor[(1764), bool], Tensor[(5, 11, 11), int64]) */;
  %865 = %861.0;
  %866 = cast(%865, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %867 = reshape(%866, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), float32] */;
  %868 = @func_1011(%867) /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64]) */;
  %869 = %860.0;
  %870 = %864.0;
  %871 = %868.1;
  (%869, %865, %870, %var_2445, %871)
}

def @func_11041() -> (Tensor[(5, 11, 11), float32],) {
  %874 = fn () -> (Tensor[(5, 11, 11), float32],) {
    %872 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %873 = %872.0;
    (%873,)
  };
  %874() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_8010() -> Tensor[(5, 11, 11), float32] {
  %876 = fn () -> Tensor[(5, 11, 11), float32] {
    %875 = @func_1761() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %875.0
  };
  %876() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_3490() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %883 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
    %877 = @func_3067() /* ty=(Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) */;
    %878 = @func_2389() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %879 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %880 = %877.1;
    %881 = %878.0;
    %882 = %879.0;
    (%880, %881, %882)
  };
  %883() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_10889() -> (Tensor[(5, 11, 11), bool], Tensor[(15, 2, 16), float64]) {
  %888 = fn () -> (Tensor[(5, 11, 11), bool], Tensor[(15, 2, 16), float64]) {
    %884 = @func_4138() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), int64]) */;
    %885 = @func_9142() /* ty=(Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), bool], Tensor[(264), bool]) */;
    %886 = %884.0;
    %887 = %885.0;
    (%886, %887)
  };
  %888() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(15, 2, 16), float64]) */
}

def @func_9293() -> (Tensor[(15, 2, 16), float64],) {
  %889 = @func_2289() /* ty=(Tensor[(15, 2, 16), float64],) */;
  %890 = %889.0;
  (%890,)
}

def @func_921() -> Tensor[(5, 11, 11), float32] {
  @func_919() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_3192() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  @func_3190() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_9762(%var_9761: Tensor[(294, 1), float32]) -> (Tensor[(5, 11, 11), bool], Tensor[(3, ?, 6), uint64], Tensor[(18), uint64], Tensor[(7, 7, 6), float32], Tensor[(294, 1), float32]) {
  %900 = fn (%var_9758: Tensor[(294, 1), float32]) -> (Tensor[(5, 11, 11), bool], Tensor[(3, ?, 6), uint64], Tensor[(18), uint64], Tensor[(7, 7, 6), float32], Tensor[(294, 1), float32]) {
    %891 = @func_4962() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32]) */;
    %892 = cast(meta[relay.Constant][26] /* ty=Tensor[(18), uint64] */, dtype="uint64") /* ty=Tensor[(18), uint64] */;
    %893 = reshape(%892, newshape=[3, 1, 6]) /* ty=Tensor[(3, 1, 6), uint64] */;
    %894 = cast(%var_9758, dtype="float32") /* ty=Tensor[(294, 1), float32] */;
    %895 = reshape(%894, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
    %896 = @func_8293(%895) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), float32], Tensor[(336), float64]) */;
    %897 = %891.0;
    %898 = @func_7578(%893) /* ty=Tensor[(3, ?, 6), uint64] */;
    %899 = %896.0;
    (%897, %898, meta[relay.Constant][26] /* ty=Tensor[(18), uint64] */, %899, %var_9758)
  };
  %900(%var_9761) /* ty=(Tensor[(5, 11, 11), bool], Tensor[(3, ?, 6), uint64], Tensor[(18), uint64], Tensor[(7, 7, 6), float32], Tensor[(294, 1), float32]) */
}

def @func_4346() -> (Tensor[(13, 3, 8), float64],) {
  %901 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 3, 8), float64] */;
  %902 = acos(%901) /* ty=Tensor[(13, 3, 8), float64] */;
  (%902,)
}

def @func_4419() -> (Tensor[(5, 11, 11), float32],) {
  %905 = fn () -> (Tensor[(5, 11, 11), float32],) {
    %903 = @func_3190() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
    %904 = %903.0;
    (%904,)
  };
  %905() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_3558() -> Tensor[(5, 11, 11), float32] {
  %906 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %906.0
}

def @func_2916(%var_2914: Tensor[(15, 2, 16), float64]) -> (Tensor[(15, 2, 16), float32],) {
  @func_2913(%var_2914) /* ty=(Tensor[(15, 2, 16), float32],) */
}

def @func_1942() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) {
  @func_1940() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */
}

def @func_7933() -> (Tensor[(5, 11, 11), uint64],) {
  @func_7931() /* ty=(Tensor[(5, 11, 11), uint64],) */
}

def @func_1113(%var_1111: Tensor[(15, 6, 13), int64]) -> Tensor[(15, 6, 13), int64] {
  @func_1110(%var_1111) /* ty=Tensor[(15, 6, 13), int64] */
}

def @func_820() -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) {
  @func_818() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */
}

def @func_9275() -> Tensor[(5, 11, 11), float32] {
  @func_9273() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_8232() -> Tensor[(5, 11, 11), uint64] {
  %907 = @func_3650() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64]) */;
  %907.1
}

def @func_2391() -> (Tensor[(5, 11, 11), float32],) {
  @func_2389() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_9295() -> (Tensor[(15, 2, 16), float64],) {
  @func_9293() /* ty=(Tensor[(15, 2, 16), float64],) */
}

def @func_1364() -> Tensor[(15, 2, 16), float64] {
  %913 = fn () -> Tensor[(15, 2, 16), float64] {
    %908 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 2, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 16), float64] */;
    %909 = exp(%908) /* ty=Tensor[(15, 2, 16), float64] */;
    %910 = cast(%909, dtype="float64") /* ty=Tensor[(15, 2, 16), float64] */;
    %911 = log10(%910) /* ty=Tensor[(15, 2, 16), float64] */;
    %912 = cast(%911, dtype="float64") /* ty=Tensor[(15, 2, 16), float64] */;
    asin(%912) /* ty=Tensor[(15, 2, 16), float64] */
  };
  %913() /* ty=Tensor[(15, 2, 16), float64] */
}

def @func_7578(%var_7573: Tensor[(3, 1, 6), uint64]) -> Tensor[(3, ?, 6), uint64] {
  %914 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 1, 6), uint64] */, dtype="uint64") /* ty=Tensor[(3, 1, 6), uint64] */;
  %915 = shape_of(%var_7573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %916 = cast(%var_7573, dtype="uint64") /* ty=Tensor[(3, 1, 6), uint64] */;
  %917 = dyn.reshape(%914, %915, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%916, %917) /* ty=Tensor[(3, ?, 6), uint64] */
}

def @func_2143(%var_2132: Tensor[(11, 12, 2), bool], %var_2133: Tensor[(11, 12, 2), bool]) -> (Tensor[(11, 12, 2), bool], Tensor[(5, 11, 11), float32]) {
  %918 = cast(%var_2133, dtype="bool") /* ty=Tensor[(11, 12, 2), bool] */;
  %919 = shape_of(%var_2132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %920 = cast(%var_2132, dtype="bool") /* ty=Tensor[(11, 12, 2), bool] */;
  %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %922 = @func_2037() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %923 = logical_or(%920, %921) /* ty=Tensor[(11, 12, 2), bool] */;
  %924 = %922.0;
  (%923, %924)
}

def @func_2816(%var_2794: Tensor[(10, 10, 1), float32]) -> (Tensor[(10, 10, 1), float32],) {
  %925 = cast(%var_2794, dtype="float32") /* ty=Tensor[(10, 10, 1), float32] */;
  %926 = cos(%925) /* ty=Tensor[(10, 10, 1), float32] */;
  (%926,)
}

def @func_818() -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) {
  %927 = @func_246() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float64]) */;
  %928 = @func_808() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool]) */;
  %929 = %927.2;
  %930 = %928.0;
  (%929, %930)
}

def @func_9892(%var_9891: Tensor[(12, 15, 11), float32]) -> (Tensor[(12, 15, 11), float32], Tensor[(5, 11, 11), float32]) {
  %935 = fn (%var_9862: Tensor[(12, 15, 11), float32]) -> (Tensor[(12, 15, 11), float32], Tensor[(5, 11, 11), float32]) {
    %931 = cast(%var_9862, dtype="float32") /* ty=Tensor[(12, 15, 11), float32] */;
    %932 = @func_841() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %933 = sigmoid(%931) /* ty=Tensor[(12, 15, 11), float32] */;
    %934 = %932.0;
    (%933, %934)
  };
  %935(%var_9891) /* ty=(Tensor[(12, 15, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_652() -> (Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) {
  %951 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) {
    %936 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %937 = cast(meta[relay.Constant][30] /* ty=Tensor[(1764), bool] */, dtype="bool") /* ty=Tensor[(1764), bool] */;
    %938 = reshape(%936, newshape=[]) /* ty=bool */;
    %939 = reshape(%937, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), bool] */;
    %940 = @func_560(%938, %939) /* ty=(Tensor[(14, 14, 9), bool],) */;
    %941 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 13, 7), float32] */, dtype="float32") /* ty=Tensor[(6, 13, 7), float32] */;
    %942 = sigmoid(%941) /* ty=Tensor[(6, 13, 7), float32] */;
    %943 = cast(%942, dtype="float64") /* ty=Tensor[(6, 13, 7), float64] */;
    %944 = cast(True /* ty=bool */, dtype="float64") /* ty=float64 */;
    %945 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %946 = @func_353() /* ty=Tensor[(5, 11, 11), float32] */;
    %947 = %940.0;
    %948 = @func_133() /* ty=Tensor[(5, 11, 11), float32] */;
    %949 = multiply(%943, %944) /* ty=Tensor[(6, 13, 7), float64] */;
    %950 = %945.0;
    (%946, %947, meta[relay.Constant][30] /* ty=Tensor[(1764), bool] */, %948, %949, %950)
  };
  %951() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(14, 14, 9), bool], Tensor[(1764), bool], Tensor[(5, 11, 11), float32], Tensor[(6, 13, 7), float64], Tensor[(5, 11, 11), float32]) */
}

def @func_1110(%var_1095: Tensor[(15, 6, 13), int64]) -> Tensor[(15, 6, 13), int64] {
  %952 = cast(%var_1095, dtype="int64") /* ty=Tensor[(15, 6, 13), int64] */;
  %953 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(15, 6, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %954 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 6, 13), int64] */, dtype="int64") /* ty=Tensor[(15, 6, 13), int64] */;
  %955 = dyn.reshape(%952, %953, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  left_shift(%954, %955) /* ty=Tensor[(15, 6, 13), int64] */
}

def @func_1999(%var_1997: Tensor[(1764), float64]) -> (Tensor[(1764), int32], Tensor[(1764), bool], Tensor[(5, 11, 11), int64]) {
  @func_1996(%var_1997) /* ty=(Tensor[(1764), int32], Tensor[(1764), bool], Tensor[(5, 11, 11), int64]) */
}

def @func_4880() -> Tensor[(5, 11, 11), float32] {
  @func_4878() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_8234() -> Tensor[(5, 11, 11), uint64] {
  @func_8232() /* ty=Tensor[(5, 11, 11), uint64] */
}

def @func_919() -> Tensor[(5, 11, 11), float32] {
  %956 = @func_353() /* ty=Tensor[(5, 11, 11), float32] */;
  %957 = cast(%956, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  rsqrt(%957) /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_133() -> Tensor[(5, 11, 11), float32] {
  %958 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 11, 11), float32] */, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  log(%958) /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_7535(%var_7533: Tensor[(13, 8, 3), float64], %var_7534: Tensor[(13, 8, 3), float64]) -> (Tensor[(5, 11, 11), float32], Tensor[(13, 8, 3), float64]) {
  @func_7531(%var_7533, %var_7534) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(13, 8, 3), float64]) */
}

def @func_10355() -> (Tensor[(5, 11, 11), float32],) {
  %959 = @func_2389() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %960 = %959.0;
  (%960,)
}

def @func_2424(%var_2423: Tensor[(1170, 1), int64]) -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(15, 6, 13), int64], Tensor[(1170, 1), int64], Tensor[(5, 11, 11), float32]) {
  %969 = fn (%var_2408: Tensor[(1170, 1), int64]) -> (Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(15, 6, 13), int64], Tensor[(1170, 1), int64], Tensor[(5, 11, 11), float32]) {
    %961 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
    %962 = cast(%var_2408, dtype="int64") /* ty=Tensor[(1170, 1), int64] */;
    %963 = reshape(%962, newshape=[15, 6, 13]) /* ty=Tensor[(15, 6, 13), int64] */;
    %964 = @func_603() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %965 = %961.1;
    %966 = @func_798() /* ty=Tensor[(5, 11, 11), float32] */;
    %967 = @func_1110(%963) /* ty=Tensor[(15, 6, 13), int64] */;
    %968 = %964.0;
    (%965, %966, %967, %var_2408, %968)
  };
  %969(%var_2423) /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(15, 6, 13), int64], Tensor[(1170, 1), int64], Tensor[(5, 11, 11), float32]) */
}

def @func_604() -> (Tensor[(5, 11, 11), float32],) {
  %971 = fn () -> (Tensor[(5, 11, 11), float32],) {
    %970 = @func_353() /* ty=Tensor[(5, 11, 11), float32] */;
    (%970,)
  };
  %971() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_6571() -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32], Tensor[(264), bool], Tensor[(1764), float64]) {
  %986 = fn () -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32], Tensor[(264), bool], Tensor[(1764), float64]) {
    %972 = @func_5327() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int64]) */;
    %973 = %972.1;
    %974 = cast(%973, dtype="int64") /* ty=Tensor[(5, 11, 11), int64] */;
    %975 = reshape(%974, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), int64] */;
    %976 = @func_3128(%975) /* ty=(Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32]) */;
    %977 = cast(meta[relay.Constant][34] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
    %978 = cast(meta[relay.Constant][34] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
    %979 = reshape(%977, newshape=[11, 12, 2]) /* ty=Tensor[(11, 12, 2), bool] */;
    %980 = reshape(%978, newshape=[11, 12, 2]) /* ty=Tensor[(11, 12, 2), bool] */;
    %981 = @func_2143(%979, %980) /* ty=(Tensor[(11, 12, 2), bool], Tensor[(5, 11, 11), float32]) */;
    %982 = @func_5598() /* ty=(Tensor[(1764), float64], Tensor[(5, 11, 11), bool]) */;
    %983 = %976.0;
    %984 = %981.1;
    %985 = %982.0;
    (%973, %983, %984, meta[relay.Constant][34] /* ty=Tensor[(264), bool] */, %985)
  };
  %986() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32], Tensor[(264), bool], Tensor[(1764), float64]) */
}

def @func_4220() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %992 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
    %987 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %988 = @func_3284() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %989 = %987.0;
    %990 = @func_353() /* ty=Tensor[(5, 11, 11), float32] */;
    %991 = %988.0;
    (%989, %990, %991)
  };
  %992() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_7705() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %1000 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
    %993 = @func_1210() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
    %994 = @func_6597() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %995 = @func_4418() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %996 = %993.0;
    %997 = %994.0;
    %998 = %995.0;
    %999 = @func_919() /* ty=Tensor[(5, 11, 11), float32] */;
    (%996, %997, %998, %999)
  };
  %1000() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_2389() -> (Tensor[(5, 11, 11), float32],) {
  %1001 = @func_818() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %1002 = %1001.1;
  (%1002,)
}

def @func_2037() -> (Tensor[(5, 11, 11), float32],) {
  %1003 = @func_1319() /* ty=Tensor[(5, 11, 11), float32] */;
  (%1003,)
}

def @func_2658(%var_2657: Tensor[(480), int32]) -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(480), int32], Tensor[(5, 11, 11), int8]) {
  %1018 = fn (%var_2594: Tensor[(480), int32]) -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(480), int32], Tensor[(5, 11, 11), int8]) {
    %1004 = @func_1267() /* ty=(Tensor[(5, 11, 11), float32],) */;
    %1005 = cast(%var_2594, dtype="int32") /* ty=Tensor[(480), int32] */;
    %1006 = cast(%var_2594, dtype="int32") /* ty=Tensor[(480), int32] */;
    %1007 = reshape(%1005, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), int32] */;
    %1008 = reshape(%1006, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), int32] */;
    %1009 = @func_543(%1007, %1008) /* ty=(Tensor[(4, 8, 15), int32], Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), bool]) */;
    %1010 = @func_1319() /* ty=Tensor[(5, 11, 11), float32] */;
    %1011 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 11, 11), float32] */, dtype="int8") /* ty=Tensor[(5, 11, 11), int8] */;
    %1012 = shape_of(%1010, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1013 = cast(%1010, dtype="int8") /* ty=Tensor[(5, 11, 11), int8] */;
    %1014 = dyn.reshape(%1011, %1012, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %1015 = %1004.0;
    %1016 = %1009.2;
    %1017 = bitwise_xor(%1013, %1014) /* ty=Tensor[(5, 11, 11), int8] */;
    (%1015, %1016, %var_2594, %1017)
  };
  %1018(%var_2657) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(480), int32], Tensor[(5, 11, 11), int8]) */
}

def @func_3286() -> (Tensor[(5, 11, 11), float32],) {
  @func_3284() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_10959() -> (Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), bool]) {
  @func_10957() /* ty=(Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), bool]) */
}

def @func_10580(%var_10566: Tensor[(4, 14, 13), int32]) -> (Tensor[(4, 14, 13), bool], Tensor[(4, 14, 13), int16]) {
  %1019 = cast(%var_10566, dtype="bool") /* ty=Tensor[(4, 14, 13), bool] */;
  %1020 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(4, 14, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1021 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 14, 13), int32] */, dtype="bool") /* ty=Tensor[(4, 14, 13), bool] */;
  %1022 = dyn.reshape(%1019, %1020, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1023 = cast(%var_10566, dtype="int16") /* ty=Tensor[(4, 14, 13), int16] */;
  %1024 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(4, 14, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1025 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 14, 13), int32] */, dtype="int16") /* ty=Tensor[(4, 14, 13), int16] */;
  %1026 = dyn.reshape(%1023, %1024, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1027 = equal(%1021, %1022) /* ty=Tensor[(4, 14, 13), bool] */;
  %1028 = right_shift(%1025, %1026) /* ty=Tensor[(4, 14, 13), int16] */;
  (%1027, %1028)
}

def @func_1212() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  @func_1210() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_8175() -> (Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) {
  %1029 = @func_5938() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
  %1030 = @func_2501() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %1031 = %1029.0;
  %1032 = %1030.0;
  (%1031, %1032)
}

def @func_8756() -> (Tensor[(5, 11, 11), float32],) {
  %1033 = @func_2037() /* ty=(Tensor[(5, 11, 11), float32],) */;
  %1034 = %1033.0;
  (%1034,)
}

def @func_2095(%var_2094: Tensor[(9, 2, 6), float32]) -> (Tensor[(5, 11, 11), float32], Tensor[(9, 2, 6), float64]) {
  %1041 = fn (%var_2046: Tensor[(9, 2, 6), float32]) -> (Tensor[(5, 11, 11), float32], Tensor[(9, 2, 6), float64]) {
    %1035 = @func_818() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), float32]) */;
    %1036 = cast(%var_2046, dtype="float32") /* ty=Tensor[(9, 2, 6), float32] */;
    %1037 = log10(%1036) /* ty=Tensor[(9, 2, 6), float32] */;
    %1038 = cast(%1037, dtype="float64") /* ty=Tensor[(9, 2, 6), float64] */;
    %1039 = %1035.1;
    %1040 = asinh(%1038) /* ty=Tensor[(9, 2, 6), float64] */;
    (%1039, %1040)
  };
  %1041(%var_2094) /* ty=(Tensor[(5, 11, 11), float32], Tensor[(9, 2, 6), float64]) */
}

def @func_8512() -> Tensor[(5, 11, 11), float32] {
  @func_8510() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_8322() -> Tensor[(5, 11, 11), uint64] {
  %1042 = @func_4002() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */;
  %1042.0
}

def @func_5735() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float64], Tensor[(12, ?, 15), uint32]) {
  @func_5733() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(15, 2, 16), float64], Tensor[(12, ?, 15), uint32]) */
}

def @func_9142() -> (Tensor[(15, 2, 16), float64], Tensor[(5, 11, 11), bool], Tensor[(264), bool]) {
  %1043 = @func_2289() /* ty=(Tensor[(15, 2, 16), float64],) */;
  %1044 = @func_1526() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), bool], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), bool]) */;
  %1045 = @func_6570() /* ty=(Tensor[(5, 11, 11), float64], Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32], Tensor[(264), bool], Tensor[(1764), float64]) */;
  %1046 = %1043.0;
  %1047 = %1044.2;
  %1048 = %1045.3;
  (%1046, %1047, %1048)
}

def @func_2291() -> (Tensor[(15, 2, 16), float64],) {
  @func_2289() /* ty=(Tensor[(15, 2, 16), float64],) */
}

def @func_1728() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %1051 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
    %1049 = @func_1319() /* ty=Tensor[(5, 11, 11), float32] */;
    %1050 = @func_889() /* ty=Tensor[(5, 11, 11), float32] */;
    (%1049, %1050)
  };
  %1051() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_6980() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %1054 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
    %1052 = @func_3350() /* ty=Tensor[(5, 11, 11), float32] */;
    %1053 = @func_5056() /* ty=Tensor[(5, 11, 11), float32] */;
    (%1052, %1053)
  };
  %1054() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_3660() -> Tensor[(5, 11, 11), float32] {
  %1055 = fn () -> Tensor[(5, 11, 11), float32] {
    @func_1074() /* ty=Tensor[(5, 11, 11), float32] */
  };
  %1055() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_6061() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
  %1063 = fn () -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) {
    %1056 = @func_4674() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float64]) */;
    %1057 = @func_2882() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */;
    %1058 = @func_5818() /* ty=(Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), uint64], Tensor[(5, 11, 11), float32]) */;
    %1059 = %1056.0;
    %1060 = %1057.0;
    %1061 = @func_919() /* ty=Tensor[(5, 11, 11), float32] */;
    %1062 = %1058.4;
    (%1059, %1060, %1061, %1062)
  };
  %1063() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32]) */
}

def @func_4453() -> Tensor[(5, 11, 11), float32] {
  @func_4451() /* ty=Tensor[(5, 11, 11), float32] */
}

def @func_7034(%var_7026: Tensor[(5, 2, 3), float64]) -> (Tensor[(5, 2, 3), uint32],) {
  %1064 = cast(%var_7026, dtype="float64") /* ty=Tensor[(5, 2, 3), float64] */;
  %1065 = sigmoid(%1064) /* ty=Tensor[(5, 2, 3), float64] */;
  %1066 = cast(%var_7026, dtype="uint32") /* ty=Tensor[(5, 2, 3), uint32] */;
  %1067 = shape_of(%1065, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1068 = cast(%1065, dtype="uint32") /* ty=Tensor[(5, 2, 3), uint32] */;
  %1069 = dyn.reshape(%1066, %1067, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1070 = bitwise_and(%1068, %1069) /* ty=Tensor[(5, 2, 3), uint32] */;
  (%1070,)
}

def @func_12435() -> Tensor[(5, 11, 11), uint64] {
  %1072 = fn () -> Tensor[(5, 11, 11), uint64] {
    %1071 = @func_10046() /* ty=(Tensor[(5, 11, 11), uint64],) */;
    %1071.0
  };
  %1072() /* ty=Tensor[(5, 11, 11), uint64] */
}

def @func_7992(%var_7990: Tensor[(13, 14, 13), uint64], %var_7991: Tensor[(13, 14, 13), uint64]) -> (Tensor[(13, 14, 13), uint64],) {
  %1078 = fn (%var_7984: Tensor[(13, 14, 13), uint64], %var_7985: Tensor[(13, 14, 13), uint64]) -> (Tensor[(13, 14, 13), uint64],) {
    %1073 = cast(%var_7985, dtype="uint64") /* ty=Tensor[(13, 14, 13), uint64] */;
    %1074 = shape_of(%var_7984, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1075 = cast(%var_7984, dtype="uint64") /* ty=Tensor[(13, 14, 13), uint64] */;
    %1076 = dyn.reshape(%1073, %1074, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1077 = bitwise_or(%1075, %1076) /* ty=Tensor[(13, 14, 13), uint64] */;
    (%1077,)
  };
  %1078(%var_7990, %var_7991) /* ty=(Tensor[(13, 14, 13), uint64],) */
}

def @func_3128(%var_3116: Tensor[(5, 11, 11), int64]) -> (Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32]) {
  %1079 = @func_1417() /* ty=(Tensor[(5, 11, 11), int64], Tensor[(5, 11, 11), uint64]) */;
  %1080 = %1079.0;
  %1081 = cast(%var_3116, dtype="int8") /* ty=Tensor[(5, 11, 11), int8] */;
  %1082 = shape_of(%1080, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1083 = cast(%1080, dtype="int8") /* ty=Tensor[(5, 11, 11), int8] */;
  %1084 = dyn.reshape(%1081, %1082, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1085 = cast(%var_3116, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %1086 = bitwise_or(%1083, %1084) /* ty=Tensor[(5, 11, 11), int8] */;
  %1087 = sqrt(%1085) /* ty=Tensor[(5, 11, 11), float32] */;
  (%1086, %1087)
}

def @func_7005(%var_7000: Tensor[(6, 14, 6), float32]) -> Tensor[(6, 14, 6), float32] {
  %1088 = cast(%var_7000, dtype="float32") /* ty=Tensor[(6, 14, 6), float32] */;
  sin(%1088) /* ty=Tensor[(6, 14, 6), float32] */
}

def @func_10396() -> (Tensor[(5, 11, 11), uint64],) {
  @func_10394() /* ty=(Tensor[(5, 11, 11), uint64],) */
}

def @func_10048() -> (Tensor[(5, 11, 11), uint64],) {
  @func_10046() /* ty=(Tensor[(5, 11, 11), uint64],) */
}

def @func_4490() -> (Tensor[(5, 11, 11), float32],) {
  %1090 = fn () -> (Tensor[(5, 11, 11), float32],) {
    %1089 = @func_1800() /* ty=Tensor[(5, 11, 11), float32] */;
    (%1089,)
  };
  %1090() /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_1883() -> Tensor[(5, 11, 11), uint64] {
  @func_1881() /* ty=Tensor[(5, 11, 11), uint64] */
}

def @func_4348() -> (Tensor[(13, 3, 8), float64],) {
  @func_4346() /* ty=(Tensor[(13, 3, 8), float64],) */
}

def @func_10928() -> (Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), int64]) {
  @func_10926() /* ty=(Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), float32], Tensor[(5, 11, 11), int64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen455/build/output.py", line 3951, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:19:34] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

