==========mod==========
#[version = "0.0.5"]
def @func_13514(%var_13492: Tensor[(104), float32], %var_13509: Tensor[(288), uint16]) -> (Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), float64], Tensor[(104), float32], Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16], Tensor[(288), uint16]) {
  %0 = @func_8879() /* ty=(Tensor[(4, 6, ?), float64],) */;
  %1 = cast(%var_13492, dtype="float32") /* ty=Tensor[(104), float32] */;
  %2 = reshape(%1, newshape=[26, 4]) /* ty=Tensor[(26, 4), float32] */;
  %3 = @func_9857(%2) /* ty=(Tensor[(4, 6, ?), float64], Tensor[(26, 4), float64]) */;
  %4 = cast(%var_13509, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %5 = reshape(%4, newshape=[72, 4]) /* ty=Tensor[(72, 4), uint16] */;
  %6 = @func_10381(%5) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(140), float32], Tensor[(72, 4), uint16], Tensor[(78), float32]) */;
  %7 = %0.0;
  %8 = %3.0;
  %9 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  %10 = %6.3;
  (%7, %8, %var_13492, %9, %10, %var_13509)
}

def @func_13164() -> Tensor[(4, 6, ?), int64] {
  @func_12525() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_15854() -> Tensor[(4, 6, ?), int64] {
  %11 = @func_13595() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %11.0
}

def @func_15979(%var_15969: Tensor[(196), bool]) -> (Tensor[(4, 6, ?), int64], Tensor[(10), float32], Tensor[(196), bool], Tensor[(4, 6, ?), int64]) {
  %12 = @func_12126() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %13 = cast(%var_15969, dtype="bool") /* ty=Tensor[(196), bool] */;
  %14 = reshape(%13, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), bool] */;
  %15 = @func_12622(%14) /* ty=(Tensor[(2, 14, 7), bool], Tensor[(10), float32]) */;
  %16 = @func_12172() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) */;
  %17 = %12.0;
  %18 = %15.1;
  %19 = %16.1;
  (%17, %18, %var_15969, %19)
}

def @func_14355() -> Tensor[(4, 6, ?), int64] {
  %20 = @func_7523() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64]) */;
  %20.1
}

def @func_7744() -> (Tensor[(4, 6, ?), int64],) {
  %21 = @func_7366() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %22 = %21.0;
  (%22,)
}

def @func_9252() -> (Tensor[(4, 6, ?), int64],) {
  %23 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %24 = %23.0;
  (%24,)
}

def @func_10668() -> (Tensor[(4, 6, ?), float64], Tensor[(72, 4), float32], Tensor[(10), float32]) {
  %25 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  %26 = cast(%25, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
  %27 = acos(%26) /* ty=Tensor[(4, 6, ?), float64] */;
  %28 = @func_10524() /* ty=Tensor[(72, 4), float32] */;
  %29 = @func_9536() /* ty=Tensor[(10), float32] */;
  (%27, %28, %29)
}

def @func_10318(%var_10298: Tensor[(5, 2), float32], %var_10303: Tensor[(28, 2), float64]) -> (Tensor[(4, 6, ?), float64], Tensor[(5, 2), float32], Tensor[(28, 2), uint16]) {
  %30 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %31 = %30.0;
  %32 = cast(%31, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
  %33 = cast(%var_10298, dtype="float32") /* ty=Tensor[(5, 2), float32] */;
  %34 = reshape(%33, newshape=[10, 1]) /* ty=Tensor[(10, 1), float32] */;
  %35 = @func_9923(%34) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(2880), int16], Tensor[(28, 2), float64], Tensor[(10, 1), float32], Tensor[(4, 6, ?), float64], Tensor[(104), float32], Tensor[(10, 2, 144), float64]) */;
  %36 = %35.2;
  %37 = cast(%var_10303, dtype="bool") /* ty=Tensor[(28, 2), bool] */;
  %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(2), int32] */;
  %39 = cast(%36, dtype="bool") /* ty=Tensor[(28, 2), bool] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %41 = less_equal(%39, %40) /* ty=Tensor[(28, 2), bool] */;
  %42 = cast(%36, dtype="uint16") /* ty=Tensor[(28, 2), uint16] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(2), int32] */;
  %44 = cast(%41, dtype="uint16") /* ty=Tensor[(28, 2), uint16] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %46 = sinh(%32) /* ty=Tensor[(4, 6, ?), float64] */;
  %47 = bitwise_xor(%44, %45) /* ty=Tensor[(28, 2), uint16] */;
  (%46, %var_10298, %47)
}

def @func_9536() -> Tensor[(10), float32] {
  %48 = @func_8911() /* ty=(Tensor[(10), float32],) */;
  %48.0
}

def @func_13904() -> (Tensor[(4, 6, ?), float32],) {
  %49 = @func_13589() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float64]) */;
  %50 = %49.0;
  %51 = cast(%50, dtype="float32") /* ty=Tensor[(4, 6, ?), float32] */;
  %52 = cosh(%51) /* ty=Tensor[(4, 6, ?), float32] */;
  (%52,)
}

def @func_7665() -> (Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) {
  %53 = @func_7523() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64]) */;
  %54 = %53.1;
  %55 = cast(%54, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
  %56 = acosh(%55) /* ty=Tensor[(4, 6, ?), float64] */;
  %57 = @func_7407() /* ty=Tensor[(4, 6, ?), int64] */;
  (%56, %57)
}

def @func_7459(%var_7445: uint8) -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool]) {
  %58 = cast(%var_7445, dtype="uint8") /* ty=uint8 */;
  %59 = reshape(%58, newshape=[]) /* ty=uint8 */;
  %60 = @func_569(%59) /* ty=(Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) */;
  %61 = %60.1;
  %62 = cast(%61, dtype="bool") /* ty=Tensor[(12, 7, 6), bool] */;
  %63 = cast(%var_7445, dtype="bool") /* ty=bool */;
  %64 = @func_7407() /* ty=Tensor[(4, 6, ?), int64] */;
  %65 = not_equal(%62, %63) /* ty=Tensor[(12, 7, 6), bool] */;
  (%64, %65)
}

def @func_12084() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float32], Tensor[(10), float32]) {
  %66 = @func_11858() /* ty=(Tensor[(6, 11, 16), float64],) */;
  %67 = %66.0;
  %68 = cast(%67, dtype="float32") /* ty=Tensor[(6, 11, 16), float32] */;
  %69 = @func_7253() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) */;
  %70 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  %71 = @func_11868() /* ty=Tensor[(4, 6, ?), int64] */;
  %72 = acos(%68) /* ty=Tensor[(6, 11, 16), float32] */;
  %73 = %69.2;
  (%70, %71, %72, %73)
}

def @func_12209(%var_12199: Tensor[(140), float32], %var_12200: Tensor[(288), uint16], %var_12201: Tensor[(78), float32], %var_12204: Tensor[(56), float64], %var_12205: Tensor[(2880), int16]) -> (Tensor[(6, 11, 16), float64], Tensor[(5, 2), float32], Tensor[(140), float32], Tensor[(288), uint16], Tensor[(78), float32], Tensor[(2880), int16], Tensor[(56), float64], Tensor[(2880), int16]) {
  %74 = cast(%var_12199, dtype="float32") /* ty=Tensor[(140), float32] */;
  %75 = cast(%var_12200, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %76 = cast(%var_12201, dtype="float32") /* ty=Tensor[(78), float32] */;
  %77 = reshape(%74, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), float32] */;
  %78 = reshape(%75, newshape=[288]) /* ty=Tensor[(288), uint16] */;
  %79 = reshape(%76, newshape=[1, 78]) /* ty=Tensor[(1, 78), float32] */;
  %80 = @func_8593(%77, %78, %79) /* ty=(Tensor[(5, 14, 2), int64], Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(288), uint16], Tensor[(14, 1, 10), uint16], Tensor[(4, 6, 78), float32]) */;
  %81 = cast(%var_12201, dtype="float32") /* ty=Tensor[(78), float32] */;
  %82 = cast(%var_12204, dtype="float64") /* ty=Tensor[(56), float64] */;
  %83 = cast(%var_12205, dtype="int16") /* ty=Tensor[(2880), int16] */;
  %84 = reshape(%81, newshape=[13, 1, 6]) /* ty=Tensor[(13, 1, 6), float32] */;
  %85 = reshape(%82, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %86 = reshape(%83, newshape=[2880]) /* ty=Tensor[(2880), int16] */;
  %87 = @func_6631(%84, %85, %86) /* ty=(Tensor[(13, 1, 6), float32], Tensor[(12, 7, 6), float64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(2880), int16]) */;
  %88 = @func_8186() /* ty=Tensor[(6, 11, 16), float64] */;
  %89 = %80.2;
  %90 = %87.4;
  (%88, %89, %var_12199, %var_12200, %var_12201, %90, %var_12204, %var_12205)
}

def @func_10443() -> Tensor[(4, 6, ?), int64] {
  @func_9692() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_10336() -> (Tensor[(6, 11, 16), float64],) {
  %91 = @func_8186() /* ty=Tensor[(6, 11, 16), float64] */;
  (%91,)
}

def @func_12670() -> (Tensor[(4, 6, ?), int64],) {
  %92 = @func_7071() /* ty=Tensor[(4, 6, ?), int64] */;
  (%92,)
}

def @func_13589() -> (Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float64]) {
  %93 = @func_11276() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %94 = @func_10543() /* ty=(Tensor[(6, 11, 16), float64],) */;
  %95 = %93.0;
  %96 = %94.0;
  (%95, %96)
}

def @func_15672() -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool]) {
  %97 = @func_12172() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) */;
  %98 = @func_11464() /* ty=(Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), int64]) */;
  %99 = %97.1;
  %100 = %98.0;
  (%99, %100)
}

def @func_6082(%var_6073: Tensor[(15, 11, 9), float64], %var_6077: Tensor[(10), float32]) -> (Tensor[(15, 11, 9), float64], Tensor[(9, 16, 2), bool], Tensor[(10), float32], Tensor[(2880), int16]) {
  %101 = cast(%var_6073, dtype="float64") /* ty=Tensor[(15, 11, 9), float64] */;
  %102 = cast(%var_6077, dtype="float32") /* ty=Tensor[(10), float32] */;
  %103 = cast(meta[relay.Constant][0] /* ty=Tensor[(2880), int16] */, dtype="int16") /* ty=Tensor[(2880), int16] */;
  %104 = reshape(%102, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float32] */;
  %105 = reshape(%103, newshape=[10, 2, 144]) /* ty=Tensor[(10, 2, 144), int16] */;
  %106 = @func_4149(%104, %105) /* ty=(int32, Tensor[(288), uint16], Tensor[(9, 16, 2), bool], Tensor[(10, 2, 144), float32], Tensor[(10, 2, 144), float64]) */;
  %107 = sqrt(%101) /* ty=Tensor[(15, 11, 9), float64] */;
  %108 = %106.2;
  (%107, %108, %var_6077, meta[relay.Constant][0] /* ty=Tensor[(2880), int16] */)
}

def @func_15609(%var_15559: uint16) -> (Tensor[(10), float32], Tensor[(14, 1, 10), uint16], uint16, Tensor[(9, 16, 2), bool], Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float64]) {
  %109 = @func_9226() /* ty=(Tensor[(10), float32],) */;
  %110 = cast(%var_15559, dtype="uint16") /* ty=uint16 */;
  %111 = reshape(%110, newshape=[]) /* ty=uint16 */;
  %112 = @func_11645(%111) /* ty=(Tensor[(5, 14, 2), float32], Tensor[(14, 1, 10), uint16], uint16) */;
  %113 = cast(%var_15559, dtype="uint8") /* ty=uint8 */;
  %114 = reshape(%113, newshape=[]) /* ty=uint8 */;
  %115 = @func_8149(%114) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(9, 16, 2), bool], Tensor[(288), uint16], Tensor[(4, 6, ?), int64], uint8, Tensor[(140), bool], uint8, Tensor[(4, 6, ?), int64]) */;
  %116 = @func_9740() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %117 = @func_13589() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float64]) */;
  %118 = %109.0;
  %119 = %112.1;
  %120 = %115.1;
  %121 = %116.0;
  %122 = %117.1;
  (%118, %119, %var_15559, %120, %121, %122)
}

def @func_14496() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  %123 = @func_9198() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16]) */;
  %124 = @func_12126() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %125 = %123.0;
  %126 = %124.0;
  (%125, %126)
}

def @func_1525(%var_1513: Tensor[(5, 14, 2), bool], %var_1514: Tensor[(5, 14, 2), bool], %var_1523: uint8) -> (Tensor[(5, 14, 2), float32], Tensor[(12, 7, 6), bool], uint8) {
  %127 = cast(%var_1514, dtype="bool") /* ty=Tensor[(5, 14, 2), bool] */;
  %128 = shape_of(%var_1513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%var_1513, dtype="bool") /* ty=Tensor[(5, 14, 2), bool] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %131 = logical_and(%129, %130) /* ty=Tensor[(5, 14, 2), bool] */;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(5, 14, 2), float32] */;
  %133 = cast(%var_1523, dtype="uint8") /* ty=uint8 */;
  %134 = reshape(%133, newshape=[]) /* ty=uint8 */;
  %135 = @func_569(%134) /* ty=(Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) */;
  %136 = erf(%132) /* ty=Tensor[(5, 14, 2), float32] */;
  %137 = %135.0;
  (%136, %137, %var_1523)
}

def @func_11711() -> (Tensor[(10), float32], Tensor[(4, 6, ?), int64]) {
  %138 = @func_9226() /* ty=(Tensor[(10), float32],) */;
  %139 = @func_7898() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %140 = %138.0;
  %141 = %139.0;
  (%140, %141)
}

def @func_11970() -> (Tensor[(4, 6, ?), int64],) {
  %142 = @func_9692() /* ty=Tensor[(4, 6, ?), int64] */;
  (%142,)
}

def @func_13663(%var_13631: Tensor[(4, 6, 4), int64], %var_13637: Tensor[(132), int64]) -> (Tensor[(4, 6, 4), float64], Tensor[(4, 6, 132), uint32]) {
  %143 = @func_11825() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(140), uint16]) */;
  %144 = %143.0;
  %145 = cast(%144, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
  %146 = cast(%var_13631, dtype="float64") /* ty=Tensor[(4, 6, 4), float64] */;
  %147 = cast(%var_13637, dtype="int64") /* ty=Tensor[(132), int64] */;
  %148 = reshape(%147, newshape=[132]) /* ty=Tensor[(132), int64] */;
  %149 = @func_6842(%148) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(6, 11, 2), int64], Tensor[(132), int64]) */;
  %150 = %149.2;
  %151 = cast(%144, dtype="uint64") /* ty=Tensor[(4, 6, ?), uint64] */;
  %152 = cast(%150, dtype="uint64") /* ty=Tensor[(132), uint64] */;
  %153 = bitwise_or(%151, %152) /* ty=Tensor[(4, 6, 132), uint64] */;
  %154 = cast(%var_13637, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %155 = cast(%153, dtype="uint32") /* ty=Tensor[(4, 6, 132), uint32] */;
  %156 = divide(%145, %146) /* ty=Tensor[(4, 6, 4), float64] */;
  %157 = left_shift(%154, %155) /* ty=Tensor[(4, 6, 132), uint32] */;
  (%156, %157)
}

def @func_7600() -> (Tensor[(10), float32], Tensor[(4, 6, 16), float64], Tensor[(4, 6, 16), float32], Tensor[(72, 4), uint16]) {
  %158 = @func_7253() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) */;
  %159 = @func_7152() /* ty=Tensor[(4, 6, ?), int64] */;
  %160 = cast(%159, dtype="float32") /* ty=Tensor[(4, 6, ?), float32] */;
  %161 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 6, 16), int64] */, dtype="float32") /* ty=Tensor[(4, 6, 16), float32] */;
  %162 = floor_mod(%160, %161) /* ty=Tensor[(4, 6, 16), float32] */;
  %163 = cast(%162, dtype="float64") /* ty=Tensor[(4, 6, 16), float64] */;
  %164 = cast(%159, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
  %165 = cast(%162, dtype="float32") /* ty=Tensor[(4, 6, 16), float32] */;
  %166 = @func_7523() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64]) */;
  %167 = %158.2;
  %168 = floor_divide(%163, %164) /* ty=Tensor[(4, 6, 16), float64] */;
  %169 = sigmoid(%165) /* ty=Tensor[(4, 6, 16), float32] */;
  %170 = %166.0;
  (%167, %168, %169, %170)
}

def @func_11611(%var_11607: Tensor[(432), float32]) -> (uint8, bool, Tensor[(12, 2, 4), float32], Tensor[(96), float32], Tensor[(432), float32]) {
  %171 = @func_11081() /* ty=(uint8, Tensor[(5, 14, 2), float32]) */;
  %172 = %171.0;
  %173 = cast(%172, dtype="bool") /* ty=bool */;
  %174 = reshape(%173, newshape=[]) /* ty=bool */;
  %175 = @func_9337(%174) /* ty=(Tensor[(4, 6, ?), float64], Tensor[(10), float32], bool) */;
  %176 = cast(meta[relay.Constant][2] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %177 = cast(%var_11607, dtype="float32") /* ty=Tensor[(432), float32] */;
  %178 = reshape(%176, newshape=[12, 2, 4]) /* ty=Tensor[(12, 2, 4), float32] */;
  %179 = reshape(%177, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %180 = @func_11243(%178, %179) /* ty=(Tensor[(12, 2, 4), bool], Tensor[(12, 2, 4), float32], Tensor[(9, 8, 6), bool], float32, Tensor[(432), float32], Tensor[(4, 6, ?), int64]) */;
  %181 = %175.2;
  %182 = %180.1;
  (%172, %181, %182, meta[relay.Constant][2] /* ty=Tensor[(96), float32] */, %var_11607)
}

def @func_14158() -> (Tensor[(140), uint16],) {
  %183 = @func_11825() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(140), uint16]) */;
  %184 = %183.2;
  (%184,)
}

def @func_10160(%var_10129: Tensor[(2, 216), float32], %var_10138: Tensor[(2, 216), float32]) -> (Tensor[(5, 14, 2), float32], Tensor[(13, 13, 16), float64], Tensor[(288), uint16], Tensor[(2, 216), uint16], Tensor[(2, 216), float32], Tensor[(2, 216), float32]) {
  %185 = @func_7824() /* ty=(Tensor[(5, 14, 2), float32],) */;
  %186 = cast(meta[relay.Constant][3] /* ty=Tensor[(288), uint16] */, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %187 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 216), float32] */, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %188 = reshape(%186, newshape=[144, 2]) /* ty=Tensor[(144, 2), uint16] */;
  %189 = reshape(%187, newshape=[2, 216]) /* ty=Tensor[(2, 216), float32] */;
  %190 = @func_6041(%188, %189) /* ty=(Tensor[(9, 16, 2), bool], Tensor[(144, 2), uint16], Tensor[(13, 13, 16), float64], float32, Tensor[(2, 216), float32], Tensor[(9, 8, 6), float32]) */;
  %191 = cast(%var_10129, dtype="uint16") /* ty=Tensor[(2, 216), uint16] */;
  %192 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(2, 216), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %193 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 216), float32] */, dtype="uint16") /* ty=Tensor[(2, 216), uint16] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %195 = cast(%var_10138, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %196 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(2, 216), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %197 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 216), float32] */, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %199 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 216), float32] */, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %200 = %185.0;
  %201 = %190.2;
  %202 = bitwise_and(%193, %194) /* ty=Tensor[(2, 216), uint16] */;
  %203 = mod(%197, %198) /* ty=Tensor[(2, 216), float32] */;
  %204 = log(%199) /* ty=Tensor[(2, 216), float32] */;
  (%200, %201, meta[relay.Constant][3] /* ty=Tensor[(288), uint16] */, %202, %203, %204)
}

def @func_7152() -> Tensor[(4, 6, ?), int64] {
  @func_7071() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_15805() -> (Tensor[(4, 6, ?), int64],) {
  %205 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %206 = %205.0;
  (%206,)
}

def @func_609(%var_591: Tensor[(9, 16, 2), uint16], %var_592: Tensor[(9, 16, 2), uint16]) -> Tensor[(9, 16, 2), bool] {
  %207 = cast(%var_592, dtype="bool") /* ty=Tensor[(9, 16, 2), bool] */;
  %208 = shape_of(%var_591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%var_591, dtype="bool") /* ty=Tensor[(9, 16, 2), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%209, %210) /* ty=Tensor[(9, 16, 2), bool] */
}

def @func_12362(%var_12351: Tensor[(4, 6, 15), float64]) -> (Tensor[(72, 4), uint16], Tensor[(4, 6, 15), int64]) {
  %211 = @func_8879() /* ty=(Tensor[(4, 6, ?), float64],) */;
  %212 = %211.0;
  %213 = cast(%212, dtype="int64") /* ty=Tensor[(4, 6, ?), int64] */;
  %214 = cast(%var_12351, dtype="int64") /* ty=Tensor[(4, 6, 15), int64] */;
  %215 = @func_7614() /* ty=Tensor[(72, 4), uint16] */;
  %216 = bitwise_or(%213, %214) /* ty=Tensor[(4, 6, 15), int64] */;
  (%215, %216)
}

def @func_10089() -> Tensor[(4, 6, ?), int64] {
  %217 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %217.0
}

def @func_12981(%var_12965: uint8) -> (Tensor[(5, 14, 2), float32], Tensor[(26), float32], uint8, Tensor[(10), float32]) {
  %218 = cast(%var_12965, dtype="uint8") /* ty=uint8 */;
  %219 = reshape(%218, newshape=[]) /* ty=uint8 */;
  %220 = @func_8636(%219) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(13, 2, 1), float32], Tensor[(26), float32], Tensor[(5, 14, 2), float32], Tensor[(140), bool], uint8) */;
  %221 = @func_9226() /* ty=(Tensor[(10), float32],) */;
  %222 = @func_9444() /* ty=Tensor[(5, 14, 2), float32] */;
  %223 = %220.2;
  %224 = %221.0;
  (%222, %223, %var_12965, %224)
}

def @func_4149(%var_4086: Tensor[(10, 1, 1), float32], %var_4139: Tensor[(10, 2, 144), int16]) -> (int32, Tensor[(288), uint16], Tensor[(9, 16, 2), bool], Tensor[(10, 2, 144), float32], Tensor[(10, 2, 144), float64]) {
  %225 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %226 = cast(meta[relay.Constant][5] /* ty=Tensor[(288), uint16] */, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %227 = reshape(%225, newshape=[]) /* ty=int32 */;
  %228 = reshape(%226, newshape=[2, 144]) /* ty=Tensor[(2, 144), uint16] */;
  %229 = @func_3012(%227, %228) /* ty=(Tensor[(10, 15, 3), float32], Tensor[(12, 7, 6), float64], Tensor[(9, 16, 2), bool], Tensor[(2, 144), uint16]) */;
  %230 = %229.3;
  %231 = cast(%230, dtype="uint16") /* ty=Tensor[(2, 144), uint16] */;
  %232 = cast(%230, dtype="uint16") /* ty=Tensor[(2, 144), uint16] */;
  %233 = reshape(%231, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %234 = reshape(%232, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %235 = cast(%var_4086, dtype="float32") /* ty=Tensor[(10, 1, 1), float32] */;
  %236 = atanh(%235) /* ty=Tensor[(10, 1, 1), float32] */;
  %237 = cast(%230, dtype="int16") /* ty=Tensor[(2, 144), int16] */;
  %238 = cast(%236, dtype="int16") /* ty=Tensor[(10, 1, 1), int16] */;
  %239 = right_shift(%237, %238) /* ty=Tensor[(10, 2, 144), int16] */;
  %240 = cast(%239, dtype="int8") /* ty=Tensor[(10, 2, 144), int8] */;
  %241 = cast(%var_4086, dtype="int8") /* ty=Tensor[(10, 1, 1), int8] */;
  %242 = left_shift(%240, %241) /* ty=Tensor[(10, 2, 144), int8] */;
  %243 = cast(%242, dtype="float32") /* ty=Tensor[(10, 2, 144), float32] */;
  %244 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%239, dtype="float32") /* ty=Tensor[(10, 2, 144), float32] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %247 = cast(%var_4139, dtype="float64") /* ty=Tensor[(10, 2, 144), float64] */;
  %248 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%239, dtype="float64") /* ty=Tensor[(10, 2, 144), float64] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %251 = @func_609(%233, %234) /* ty=Tensor[(9, 16, 2), bool] */;
  %252 = floor_mod(%245, %246) /* ty=Tensor[(10, 2, 144), float32] */;
  %253 = divide(%249, %250) /* ty=Tensor[(10, 2, 144), float64] */;
  (-2 /* ty=int32 */, meta[relay.Constant][5] /* ty=Tensor[(288), uint16] */, %251, %252, %253)
}

def @func_4876(%var_4839: Tensor[(14, 4, 1), float64], %var_4851: Tensor[(1, 10), float32], %var_4852: Tensor[(2880), int16]) -> (Tensor[(12, 7, 6), float64], uint8, Tensor[(9, 16, 2), bool], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(14, 4, ?), bool]) {
  %254 = cast(meta[relay.Constant][6] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %255 = reshape(%254, newshape=[]) /* ty=uint8 */;
  %256 = @func_569(%255) /* ty=(Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) */;
  %257 = cast(%var_4851, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %258 = cast(%var_4852, dtype="int16") /* ty=Tensor[(2880), int16] */;
  %259 = reshape(%257, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float32] */;
  %260 = reshape(%258, newshape=[10, 2, 144]) /* ty=Tensor[(10, 2, 144), int16] */;
  %261 = @func_4149(%259, %260) /* ty=(int32, Tensor[(288), uint16], Tensor[(9, 16, 2), bool], Tensor[(10, 2, 144), float32], Tensor[(10, 2, 144), float64]) */;
  %262 = cast(%var_4839, dtype="float64") /* ty=Tensor[(14, 4, 1), float64] */;
  %263 = sqrt(%262) /* ty=Tensor[(14, 4, 1), float64] */;
  %264 = cast(%var_4839, dtype="bool") /* ty=Tensor[(14, 4, 1), bool] */;
  %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%263, dtype="bool") /* ty=Tensor[(14, 4, 1), bool] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %268 = %256.1;
  %269 = %261.2;
  %270 = equal(%266, %267) /* ty=Tensor[(14, 4, ?), bool] */;
  (%268, meta[relay.Constant][6] /* ty=uint8 */, %269, %var_4851, %var_4852, %270)
}

def @func_13595() -> (Tensor[(4, 6, ?), int64],) {
  %271 = @func_10089() /* ty=Tensor[(4, 6, ?), int64] */;
  (%271,)
}

def @func_12172() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  %272 = @func_7253() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) */;
  %273 = @func_11868() /* ty=Tensor[(4, 6, ?), int64] */;
  %274 = %272.0;
  (%273, %274)
}

def @func_9829(%var_9818: Tensor[(4, 6, 11), int64]) -> (Tensor[(4, 6, 11), bool], Tensor[(4, 6, 11), float64]) {
  %275 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  %276 = cast(%275, dtype="bool") /* ty=Tensor[(4, 6, ?), bool] */;
  %277 = cast(%var_9818, dtype="bool") /* ty=Tensor[(4, 6, 11), bool] */;
  %278 = cast(%var_9818, dtype="float64") /* ty=Tensor[(4, 6, 11), float64] */;
  %279 = less(%276, %277) /* ty=Tensor[(4, 6, 11), bool] */;
  %280 = asin(%278) /* ty=Tensor[(4, 6, 11), float64] */;
  (%279, %280)
}

def @func_15140(%var_15137: Tensor[(432), float32]) -> (Tensor[(10), float32], uint8, Tensor[(432), float32]) {
  %281 = @func_9226() /* ty=(Tensor[(10), float32],) */;
  %282 = cast(%var_15137, dtype="float32") /* ty=Tensor[(432), float32] */;
  %283 = reshape(%282, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %284 = @func_11611(%283) /* ty=(uint8, bool, Tensor[(12, 2, 4), float32], Tensor[(96), float32], Tensor[(432), float32]) */;
  %285 = %281.0;
  %286 = %284.0;
  (%285, %286, %var_15137)
}

def @func_11265() -> (Tensor[(12, 11, 16), float64], Tensor[(12, 11, 16), float64]) {
  %287 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 11, 16), float64] */, dtype="float64") /* ty=Tensor[(12, 11, 16), float64] */;
  %288 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 11, 16), float64] */, dtype="float64") /* ty=Tensor[(12, 11, 16), float64] */;
  %289 = acosh(%287) /* ty=Tensor[(12, 11, 16), float64] */;
  %290 = tan(%288) /* ty=Tensor[(12, 11, 16), float64] */;
  (%289, %290)
}

def @func_10585() -> (Tensor[(4, 6, ?), int64], Tensor[(13, 2, 1), float32], Tensor[(13, 2), float32]) {
  %291 = @func_7665() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) */;
  %292 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 2), float32] */, dtype="float32") /* ty=Tensor[(13, 2), float32] */;
  %293 = reshape(%292, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float32] */;
  %294 = %291.1;
  %295 = @func_5085(%293) /* ty=Tensor[(13, 2, 1), float32] */;
  (%294, %295, meta[relay.Constant][8] /* ty=Tensor[(13, 2), float32] */)
}

def @func_11276() -> (Tensor[(4, 6, ?), int64],) {
  %296 = @func_9740() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %297 = %296.0;
  (%297,)
}

def @func_6041(%var_6018: Tensor[(144, 2), uint16], %var_6026: Tensor[(2, 216), float32]) -> (Tensor[(9, 16, 2), bool], Tensor[(144, 2), uint16], Tensor[(13, 13, 16), float64], float32, Tensor[(2, 216), float32], Tensor[(9, 8, 6), float32]) {
  %298 = cast(%var_6018, dtype="uint16") /* ty=Tensor[(144, 2), uint16] */;
  %299 = cast(%var_6018, dtype="uint16") /* ty=Tensor[(144, 2), uint16] */;
  %300 = reshape(%298, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %301 = reshape(%299, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %302 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 13, 16), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
  %303 = atanh(%302) /* ty=Tensor[(13, 13, 16), float32] */;
  %304 = cast(%303, dtype="float64") /* ty=Tensor[(13, 13, 16), float64] */;
  %305 = cast(4.20189f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %306 = cast(%var_6026, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %307 = cast(%var_6026, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %308 = reshape(%305, newshape=[]) /* ty=float32 */;
  %309 = reshape(%306, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float32] */;
  %310 = reshape(%307, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float32] */;
  %311 = @func_4039(%308, %309, %310) /* ty=Tensor[(9, 8, 6), bool] */;
  %312 = cast(%311, dtype="float32") /* ty=Tensor[(9, 8, 6), float32] */;
  %313 = @func_609(%300, %301) /* ty=Tensor[(9, 16, 2), bool] */;
  %314 = asinh(%304) /* ty=Tensor[(13, 13, 16), float64] */;
  %315 = asin(%312) /* ty=Tensor[(9, 8, 6), float32] */;
  (%313, %var_6018, %314, 4.20189f /* ty=float32 */, %var_6026, %315)
}

def @func_9692() -> Tensor[(4, 6, ?), int64] {
  %316 = @func_9066() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float64]) */;
  %316.1
}

def @func_7824() -> (Tensor[(5, 14, 2), float32],) {
  %317 = @func_7045() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(12, 7, 6), bool], uint8, Tensor[(5, 14, 2), float32], Tensor[(5, 28), bool], Tensor[(13, 2, 1), float32], Tensor[(26, 1), float32]) */;
  %318 = %317.3;
  (%318,)
}

def @func_8506(%var_8494: Tensor[(140), uint16]) -> (Tensor[(10), float32], Tensor[(14, 1, 10), uint16], uint16, Tensor[(140), uint16]) {
  %319 = @func_7253() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) */;
  %320 = cast(meta[relay.Constant][10] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %321 = cast(%var_8494, dtype="uint16") /* ty=Tensor[(140), uint16] */;
  %322 = reshape(%320, newshape=[]) /* ty=uint16 */;
  %323 = reshape(%321, newshape=[14, 1, 10]) /* ty=Tensor[(14, 1, 10), uint16] */;
  %324 = %319.2;
  %325 = @func_3688(%322, %323) /* ty=Tensor[(14, 1, 10), uint16] */;
  (%324, %325, meta[relay.Constant][10] /* ty=uint16 */, %var_8494)
}

def @func_7330() -> Tensor[(4, 6, ?), int64] {
  %326 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %326.0
}

def @func_7898() -> (Tensor[(4, 6, ?), int64],) {
  %327 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %328 = %327.0;
  (%328,)
}

def @func_16136() -> (Tensor[(4, 6, ?), int64],) {
  %329 = @func_13408() /* ty=Tensor[(4, 6, ?), int64] */;
  (%329,)
}

def @func_9995(%var_9961: Tensor[(10, 2, 13), int64], %var_9980: Tensor[(288), uint16]) -> (Tensor[(10, 2, 13), int64], Tensor[(9, 16, 2), bool], Tensor[(288), uint16]) {
  %330 = cast(%var_9961, dtype="int64") /* ty=Tensor[(10, 2, 13), int64] */;
  %331 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(10, 2, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 2, 13), int64] */, dtype="int64") /* ty=Tensor[(10, 2, 13), int64] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %334 = cast(%var_9980, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %335 = cast(%var_9980, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %336 = reshape(%334, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %337 = reshape(%335, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %338 = bitwise_xor(%332, %333) /* ty=Tensor[(10, 2, 13), int64] */;
  %339 = @func_609(%336, %337) /* ty=Tensor[(9, 16, 2), bool] */;
  (%338, %339, %var_9980)
}

def @func_11425(%var_11413: Tensor[(70, 2), uint16]) -> (Tensor[(6, 11, 16), float64], Tensor[(14, 1, 10), uint16], uint16, Tensor[(70, 2), uint16], Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) {
  %340 = @func_10543() /* ty=(Tensor[(6, 11, 16), float64],) */;
  %341 = cast(meta[relay.Constant][12] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %342 = cast(%var_11413, dtype="uint16") /* ty=Tensor[(70, 2), uint16] */;
  %343 = reshape(%341, newshape=[]) /* ty=uint16 */;
  %344 = reshape(%342, newshape=[14, 1, 10]) /* ty=Tensor[(14, 1, 10), uint16] */;
  %345 = @func_8879() /* ty=(Tensor[(4, 6, ?), float64],) */;
  %346 = @func_7665() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) */;
  %347 = %340.0;
  %348 = @func_3688(%343, %344) /* ty=Tensor[(14, 1, 10), uint16] */;
  %349 = %345.0;
  %350 = %346.1;
  (%347, %348, meta[relay.Constant][12] /* ty=uint16 */, %var_11413, %349, %350)
}

def @func_8149(%var_8130: uint8) -> (Tensor[(4, 6, ?), int64], Tensor[(9, 16, 2), bool], Tensor[(288), uint16], Tensor[(4, 6, ?), int64], uint8, Tensor[(140), bool], uint8, Tensor[(4, 6, ?), int64]) {
  %351 = @func_7898() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %352 = cast(meta[relay.Constant][13] /* ty=Tensor[(288), uint16] */, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %353 = cast(meta[relay.Constant][13] /* ty=Tensor[(288), uint16] */, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %354 = reshape(%352, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %355 = reshape(%353, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %356 = cast(meta[relay.Constant][14] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %357 = cast(meta[relay.Constant][14] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %358 = cast(%var_8130, dtype="uint8") /* ty=uint8 */;
  %359 = reshape(%356, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), bool] */;
  %360 = reshape(%357, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), bool] */;
  %361 = reshape(%358, newshape=[]) /* ty=uint8 */;
  %362 = @func_1525(%359, %360, %361) /* ty=(Tensor[(5, 14, 2), float32], Tensor[(12, 7, 6), bool], uint8) */;
  %363 = @func_7366() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %364 = %351.0;
  %365 = @func_609(%354, %355) /* ty=Tensor[(9, 16, 2), bool] */;
  %366 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  %367 = %362.2;
  %368 = %363.0;
  (%364, %365, meta[relay.Constant][13] /* ty=Tensor[(288), uint16] */, %366, %367, meta[relay.Constant][14] /* ty=Tensor[(140), bool] */, %var_8130, %368)
}

def @func_11243(%var_11170: Tensor[(12, 2, 4), float32], %var_11210: Tensor[(432), float32]) -> (Tensor[(12, 2, 4), bool], Tensor[(12, 2, 4), float32], Tensor[(9, 8, 6), bool], float32, Tensor[(432), float32], Tensor[(4, 6, ?), int64]) {
  %369 = cast(%var_11170, dtype="float32") /* ty=Tensor[(12, 2, 4), float32] */;
  %370 = sqrt(%369) /* ty=Tensor[(12, 2, 4), float32] */;
  %371 = cast(%var_11170, dtype="bool") /* ty=Tensor[(12, 2, 4), bool] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="bool") /* ty=Tensor[(12, 2, 4), bool] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %375 = cast(%370, dtype="float32") /* ty=Tensor[(12, 2, 4), float32] */;
  %376 = cast(-6.58204f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %377 = cast(%var_11210, dtype="float32") /* ty=Tensor[(432), float32] */;
  %378 = cast(%var_11210, dtype="float32") /* ty=Tensor[(432), float32] */;
  %379 = reshape(%376, newshape=[]) /* ty=float32 */;
  %380 = reshape(%377, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float32] */;
  %381 = reshape(%378, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float32] */;
  %382 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %383 = greater_equal(%373, %374) /* ty=Tensor[(12, 2, 4), bool] */;
  %384 = log2(%375) /* ty=Tensor[(12, 2, 4), float32] */;
  %385 = @func_4039(%379, %380, %381) /* ty=Tensor[(9, 8, 6), bool] */;
  %386 = %382.0;
  (%383, %384, %385, -6.58204f /* ty=float32 */, %var_11210, %386)
}

def @func_15340() -> (Tensor[(4, 6, ?), int64],) {
  %387 = @func_7523() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64]) */;
  %388 = %387.1;
  (%388,)
}

def @func_13408() -> Tensor[(4, 6, ?), int64] {
  %389 = @func_12670() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %389.0
}

def @func_12126() -> (Tensor[(4, 6, ?), int64],) {
  %390 = @func_11711() /* ty=(Tensor[(10), float32], Tensor[(4, 6, ?), int64]) */;
  %391 = %390.1;
  (%391,)
}

def @func_10251() -> Tensor[(4, 6, ?), int64] {
  %392 = @func_7898() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %392.0
}

def @func_9604(%var_9583: Tensor[(4, 6, 1), int64], %var_9591: Tensor[(56), float64], %var_9592: Tensor[(10), float32]) -> (Tensor[(4, 6, ?), uint16], Tensor[(2880), int16], Tensor[(56), float64], Tensor[(10), float32], Tensor[(2880), int16]) {
  %393 = @func_8460() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %394 = %393.0;
  %395 = cast(%var_9583, dtype="uint16") /* ty=Tensor[(4, 6, 1), uint16] */;
  %396 = shape_of(%394, dtype="int32") /* ty=Tensor[(3), int32] */;
  %397 = cast(%394, dtype="uint16") /* ty=Tensor[(4, 6, ?), uint16] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %399 = cast(%var_9591, dtype="float64") /* ty=Tensor[(56), float64] */;
  %400 = cast(%var_9592, dtype="float32") /* ty=Tensor[(10), float32] */;
  %401 = cast(meta[relay.Constant][15] /* ty=Tensor[(2880), int16] */, dtype="int16") /* ty=Tensor[(2880), int16] */;
  %402 = reshape(%399, newshape=[14, 4, 1]) /* ty=Tensor[(14, 4, 1), float64] */;
  %403 = reshape(%400, newshape=[1, 10]) /* ty=Tensor[(1, 10), float32] */;
  %404 = reshape(%401, newshape=[2880]) /* ty=Tensor[(2880), int16] */;
  %405 = @func_4876(%402, %403, %404) /* ty=(Tensor[(12, 7, 6), float64], uint8, Tensor[(9, 16, 2), bool], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(14, 4, ?), bool]) */;
  %406 = right_shift(%397, %398) /* ty=Tensor[(4, 6, ?), uint16] */;
  %407 = %405.4;
  (%406, %407, %var_9591, %var_9592, meta[relay.Constant][15] /* ty=Tensor[(2880), int16] */)
}

def @func_8460() -> (Tensor[(4, 6, ?), int64],) {
  %408 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  (%408,)
}

def @func_7045() -> (Tensor[(4, 6, ?), float64], Tensor[(12, 7, 6), bool], uint8, Tensor[(5, 14, 2), float32], Tensor[(5, 28), bool], Tensor[(13, 2, 1), float32], Tensor[(26, 1), float32]) {
  %409 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %410 = %409.0;
  %411 = cast(%410, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
  %412 = cast(meta[relay.Constant][16] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %413 = reshape(%412, newshape=[]) /* ty=uint8 */;
  %414 = @func_569(%413) /* ty=(Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) */;
  %415 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 28), bool] */, dtype="bool") /* ty=Tensor[(5, 28), bool] */;
  %416 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 28), bool] */, dtype="bool") /* ty=Tensor[(5, 28), bool] */;
  %417 = cast(meta[relay.Constant][16] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %418 = reshape(%415, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), bool] */;
  %419 = reshape(%416, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), bool] */;
  %420 = reshape(%417, newshape=[]) /* ty=uint8 */;
  %421 = @func_1525(%418, %419, %420) /* ty=(Tensor[(5, 14, 2), float32], Tensor[(12, 7, 6), bool], uint8) */;
  %422 = cast(meta[relay.Constant][18] /* ty=Tensor[(26, 1), float32] */, dtype="float32") /* ty=Tensor[(26, 1), float32] */;
  %423 = reshape(%422, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float32] */;
  %424 = atanh(%411) /* ty=Tensor[(4, 6, ?), float64] */;
  %425 = %414.0;
  %426 = %421.0;
  %427 = @func_5085(%423) /* ty=Tensor[(13, 2, 1), float32] */;
  (%424, %425, meta[relay.Constant][16] /* ty=uint8 */, %426, meta[relay.Constant][17] /* ty=Tensor[(5, 28), bool] */, %427, meta[relay.Constant][18] /* ty=Tensor[(26, 1), float32] */)
}

def @func_11293() -> Tensor[(6, 11, 16), float64] {
  %428 = @func_10543() /* ty=(Tensor[(6, 11, 16), float64],) */;
  %428.0
}

def @func_14755() -> (Tensor[(4, 6, ?), int64],) {
  %429 = @func_11868() /* ty=Tensor[(4, 6, ?), int64] */;
  (%429,)
}

def @func_9135(%var_9128: Tensor[(72, 4), uint16]) -> (Tensor[(72, 4), uint32],) {
  %430 = @func_7492() /* ty=(Tensor[(72, 4), uint16],) */;
  %431 = %430.0;
  %432 = cast(%var_9128, dtype="uint32") /* ty=Tensor[(72, 4), uint32] */;
  %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(2), int32] */;
  %434 = cast(%431, dtype="uint32") /* ty=Tensor[(72, 4), uint32] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %436 = add(%434, %435) /* ty=Tensor[(72, 4), uint32] */;
  (%436,)
}

def @main() -> (Tensor[(72, 4), uint16], int32, Tensor[(4, 6, 10), bool]) {
  %437 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %438 = reshape(%437, newshape=[]) /* ty=int32 */;
  %439 = @func_8162(%438) /* ty=(Tensor[(72, 4), uint16], Tensor[(12, 7, 6), float64], int32) */;
  %440 = @func_10443() /* ty=Tensor[(4, 6, ?), int64] */;
  %441 = @func_9740() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %442 = %441.0;
  %443 = cast(%442, dtype="bool") /* ty=Tensor[(4, 6, ?), bool] */;
  %444 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%440, dtype="bool") /* ty=Tensor[(4, 6, ?), bool] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %447 = equal(%445, %446) /* ty=Tensor[(4, 6, ?), bool] */;
  %448 = cast(%447, dtype="bool") /* ty=Tensor[(4, 6, ?), bool] */;
  %449 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 6, 10), bool] */, dtype="bool") /* ty=Tensor[(4, 6, 10), bool] */;
  %450 = %439.0;
  %451 = less(%448, %449) /* ty=Tensor[(4, 6, 10), bool] */;
  (%450, -2 /* ty=int32 */, %451)
}

def @func_7071() -> Tensor[(4, 6, ?), int64] {
  %452 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %452.0
}

def @func_12484() -> Tensor[(4, 6, ?), int64] {
  @func_7071() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_12379() -> (Tensor[(10), float32],) {
  %453 = @func_9226() /* ty=(Tensor[(10), float32],) */;
  %454 = %453.0;
  (%454,)
}

def @func_9198() -> (Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16]) {
  %455 = @func_7492() /* ty=(Tensor[(72, 4), uint16],) */;
  %456 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  %457 = %455.0;
  (%456, %457)
}

def @func_6631(%var_6607: Tensor[(13, 1, 6), float32], %var_6614: Tensor[(56), float64], %var_6616: Tensor[(2880), int16]) -> (Tensor[(13, 1, 6), float32], Tensor[(12, 7, 6), float64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(2880), int16]) {
  %458 = cast(%var_6607, dtype="float32") /* ty=Tensor[(13, 1, 6), float32] */;
  %459 = cast(%var_6614, dtype="float64") /* ty=Tensor[(56), float64] */;
  %460 = cast(meta[relay.Constant][20] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
  %461 = cast(%var_6616, dtype="int16") /* ty=Tensor[(2880), int16] */;
  %462 = reshape(%459, newshape=[14, 4, 1]) /* ty=Tensor[(14, 4, 1), float64] */;
  %463 = reshape(%460, newshape=[1, 10]) /* ty=Tensor[(1, 10), float32] */;
  %464 = reshape(%461, newshape=[2880]) /* ty=Tensor[(2880), int16] */;
  %465 = @func_4876(%462, %463, %464) /* ty=(Tensor[(12, 7, 6), float64], uint8, Tensor[(9, 16, 2), bool], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(14, 4, ?), bool]) */;
  %466 = asinh(%458) /* ty=Tensor[(13, 1, 6), float32] */;
  %467 = %465.0;
  (%466, %467, %var_6614, meta[relay.Constant][20] /* ty=Tensor[(10), float32] */, %var_6616)
}

def @func_7523() -> (Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64]) {
  %468 = @func_7492() /* ty=(Tensor[(72, 4), uint16],) */;
  %469 = %468.0;
  %470 = @func_7071() /* ty=Tensor[(4, 6, ?), int64] */;
  (%469, %470)
}

def @func_9226() -> (Tensor[(10), float32],) {
  %471 = @func_8911() /* ty=(Tensor[(10), float32],) */;
  %472 = %471.0;
  (%472,)
}

def @func_13040(%var_13006: Tensor[(56, 1), float64]) -> (Tensor[(4, 6, ?), int64], Tensor[(9, 16, 2), bool], Tensor[(56, 1), float64], Tensor[(10), float32], Tensor[(2880), int16], Tensor[(4, 6, ?), int64]) {
  %473 = @func_8460() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %474 = cast(%var_13006, dtype="float64") /* ty=Tensor[(56, 1), float64] */;
  %475 = cast(meta[relay.Constant][21] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
  %476 = cast(meta[relay.Constant][22] /* ty=Tensor[(2880), int16] */, dtype="int16") /* ty=Tensor[(2880), int16] */;
  %477 = reshape(%474, newshape=[14, 4, 1]) /* ty=Tensor[(14, 4, 1), float64] */;
  %478 = reshape(%475, newshape=[1, 10]) /* ty=Tensor[(1, 10), float32] */;
  %479 = reshape(%476, newshape=[2880]) /* ty=Tensor[(2880), int16] */;
  %480 = @func_4876(%477, %478, %479) /* ty=(Tensor[(12, 7, 6), float64], uint8, Tensor[(9, 16, 2), bool], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(14, 4, ?), bool]) */;
  %481 = %473.0;
  %482 = %480.2;
  %483 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  (%481, %482, %var_13006, meta[relay.Constant][21] /* ty=Tensor[(10), float32] */, meta[relay.Constant][22] /* ty=Tensor[(2880), int16] */, %483)
}

def @func_12255() -> (Tensor[(4, 6, 9), bool],) {
  %484 = @func_7071() /* ty=Tensor[(4, 6, ?), int64] */;
  %485 = cast(%484, dtype="bool") /* ty=Tensor[(4, 6, ?), bool] */;
  %486 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 6, 9), int64] */, dtype="bool") /* ty=Tensor[(4, 6, 9), bool] */;
  %487 = logical_and(%485, %486) /* ty=Tensor[(4, 6, 9), bool] */;
  (%487,)
}

def @func_569(%var_559: uint8) -> (Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) {
  %488 = cast(%var_559, dtype="bool") /* ty=bool */;
  %489 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 7, 6), uint8] */, dtype="bool") /* ty=Tensor[(12, 7, 6), bool] */;
  %490 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 7, 6), uint8] */, dtype="float64") /* ty=Tensor[(12, 7, 6), float64] */;
  %491 = less(%488, %489) /* ty=Tensor[(12, 7, 6), bool] */;
  %492 = cos(%490) /* ty=Tensor[(12, 7, 6), float64] */;
  (%491, %492)
}

def @func_7366() -> (Tensor[(4, 6, ?), int64],) {
  %493 = @func_7253() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) */;
  %494 = %493.0;
  (%494,)
}

def @func_11645(%var_11639: uint16) -> (Tensor[(5, 14, 2), float32], Tensor[(14, 1, 10), uint16], uint16) {
  %495 = @func_11081() /* ty=(uint8, Tensor[(5, 14, 2), float32]) */;
  %496 = %495.1;
  %497 = cast(%496, dtype="float32") /* ty=Tensor[(5, 14, 2), float32] */;
  %498 = cast(%var_11639, dtype="uint16") /* ty=uint16 */;
  %499 = sigmoid(%497) /* ty=Tensor[(5, 14, 2), float32] */;
  %500 = cast(%499, dtype="uint16") /* ty=Tensor[(5, 14, 2), uint16] */;
  %501 = reshape(%498, newshape=[]) /* ty=uint16 */;
  %502 = reshape(%500, newshape=[14, 1, 10]) /* ty=Tensor[(14, 1, 10), uint16] */;
  %503 = @func_3688(%501, %502) /* ty=Tensor[(14, 1, 10), uint16] */;
  (%499, %503, %var_11639)
}

def @func_15777() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  %504 = @func_7366() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %505 = %504.0;
  %506 = @func_7152() /* ty=Tensor[(4, 6, ?), int64] */;
  (%505, %506)
}

def @func_5085(%var_5081: Tensor[(13, 2, 1), float32]) -> Tensor[(13, 2, 1), float32] {
  %507 = cast(%var_5081, dtype="float32") /* ty=Tensor[(13, 2, 1), float32] */;
  sqrt(%507) /* ty=Tensor[(13, 2, 1), float32] */
}

def @func_10543() -> (Tensor[(6, 11, 16), float64],) {
  %508 = @func_8186() /* ty=Tensor[(6, 11, 16), float64] */;
  (%508,)
}

def @func_10207(%var_10195: Tensor[(36, 12), float32]) -> (Tensor[(10), float32], Tensor[(144, 2), uint16], Tensor[(288), uint16], Tensor[(36, 12), float32]) {
  %509 = @func_7600() /* ty=(Tensor[(10), float32], Tensor[(4, 6, 16), float64], Tensor[(4, 6, 16), float32], Tensor[(72, 4), uint16]) */;
  %510 = cast(meta[relay.Constant][25] /* ty=Tensor[(288), uint16] */, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %511 = cast(%var_10195, dtype="float32") /* ty=Tensor[(36, 12), float32] */;
  %512 = reshape(%510, newshape=[144, 2]) /* ty=Tensor[(144, 2), uint16] */;
  %513 = reshape(%511, newshape=[2, 216]) /* ty=Tensor[(2, 216), float32] */;
  %514 = @func_6041(%512, %513) /* ty=(Tensor[(9, 16, 2), bool], Tensor[(144, 2), uint16], Tensor[(13, 13, 16), float64], float32, Tensor[(2, 216), float32], Tensor[(9, 8, 6), float32]) */;
  %515 = %509.0;
  %516 = %514.1;
  (%515, %516, meta[relay.Constant][25] /* ty=Tensor[(288), uint16] */, %var_10195)
}

def @func_7292(%var_7277: Tensor[(78, 1), float32]) -> (Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(2880), int16], Tensor[(78, 56), float32]) {
  %517 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %518 = cast(%var_7277, dtype="float32") /* ty=Tensor[(78, 1), float32] */;
  %519 = cast(meta[relay.Constant][26] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %520 = cast(meta[relay.Constant][27] /* ty=Tensor[(2880), int16] */, dtype="int16") /* ty=Tensor[(2880), int16] */;
  %521 = reshape(%518, newshape=[13, 1, 6]) /* ty=Tensor[(13, 1, 6), float32] */;
  %522 = reshape(%519, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %523 = reshape(%520, newshape=[2880]) /* ty=Tensor[(2880), int16] */;
  %524 = @func_6631(%521, %522, %523) /* ty=(Tensor[(13, 1, 6), float32], Tensor[(12, 7, 6), float64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(2880), int16]) */;
  %525 = %524.2;
  %526 = cast(%var_7277, dtype="float32") /* ty=Tensor[(78, 1), float32] */;
  %527 = cast(%525, dtype="float32") /* ty=Tensor[(56), float32] */;
  %528 = %517.0;
  %529 = power(%526, %527) /* ty=Tensor[(78, 56), float32] */;
  (%528, meta[relay.Constant][26] /* ty=Tensor[(56), float64] */, meta[relay.Constant][27] /* ty=Tensor[(2880), int16] */, %529)
}

def @func_12882() -> (Tensor[(10), float32],) {
  %530 = @func_12379() /* ty=(Tensor[(10), float32],) */;
  %531 = %530.0;
  (%531,)
}

def @func_10381(%var_10378: Tensor[(72, 4), uint16]) -> (Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(140), float32], Tensor[(72, 4), uint16], Tensor[(78), float32]) {
  %532 = @func_9740() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %533 = cast(meta[relay.Constant][28] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %534 = cast(%var_10378, dtype="uint16") /* ty=Tensor[(72, 4), uint16] */;
  %535 = cast(meta[relay.Constant][29] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %536 = reshape(%533, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), float32] */;
  %537 = reshape(%534, newshape=[288]) /* ty=Tensor[(288), uint16] */;
  %538 = reshape(%535, newshape=[1, 78]) /* ty=Tensor[(1, 78), float32] */;
  %539 = @func_8593(%536, %537, %538) /* ty=(Tensor[(5, 14, 2), int64], Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(288), uint16], Tensor[(14, 1, 10), uint16], Tensor[(4, 6, 78), float32]) */;
  %540 = %532.0;
  %541 = %539.2;
  (%540, %541, meta[relay.Constant][28] /* ty=Tensor[(140), float32] */, %var_10378, meta[relay.Constant][29] /* ty=Tensor[(78), float32] */)
}

def @func_14208() -> (Tensor[(4, 6, ?), int64],) {
  %542 = @func_12525() /* ty=Tensor[(4, 6, ?), int64] */;
  (%542,)
}

def @func_7614() -> Tensor[(72, 4), uint16] {
  %543 = @func_7523() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64]) */;
  %543.0
}

def @func_15401() -> (Tensor[(6, 11, 16), float64], Tensor[(6, 11, 16), float64], Tensor[(6, 11, 16), float64], Tensor[(4, 6, ?), float64], Tensor[(104), float32]) {
  %544 = @func_10336() /* ty=(Tensor[(6, 11, 16), float64],) */;
  %545 = cast(meta[relay.Constant][30] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %546 = reshape(%545, newshape=[26, 4]) /* ty=Tensor[(26, 4), float32] */;
  %547 = @func_9857(%546) /* ty=(Tensor[(4, 6, ?), float64], Tensor[(26, 4), float64]) */;
  %548 = @func_11293() /* ty=Tensor[(6, 11, 16), float64] */;
  %549 = @func_8186() /* ty=Tensor[(6, 11, 16), float64] */;
  %550 = %544.0;
  %551 = %547.0;
  (%548, %549, %550, %551, meta[relay.Constant][30] /* ty=Tensor[(104), float32] */)
}

def @func_14387() -> (Tensor[(6, 11, 16), float64],) {
  %552 = @func_11293() /* ty=Tensor[(6, 11, 16), float64] */;
  (%552,)
}

def @func_15885() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  %553 = @func_14208() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %554 = @func_7366() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %555 = %553.0;
  %556 = %554.0;
  (%555, %556)
}

def @func_13983(%var_13922: Tensor[(36, 12), float32], %var_13925: Tensor[(4, 6, 7), float32], %var_13941: Tensor[(36, 12), float32], %var_13947: Tensor[(36, 12), float32]) -> (Tensor[(144, 2), uint16], Tensor[(4, 6, 7), uint32], Tensor[(4, 6, ?), int64], Tensor[(36, 12), int32]) {
  %557 = cast(%var_13922, dtype="float32") /* ty=Tensor[(36, 12), float32] */;
  %558 = reshape(%557, newshape=[36, 12]) /* ty=Tensor[(36, 12), float32] */;
  %559 = @func_10207(%558) /* ty=(Tensor[(10), float32], Tensor[(144, 2), uint16], Tensor[(288), uint16], Tensor[(36, 12), float32]) */;
  %560 = @func_13904() /* ty=(Tensor[(4, 6, ?), float32],) */;
  %561 = %560.0;
  %562 = cast(%561, dtype="uint32") /* ty=Tensor[(4, 6, ?), uint32] */;
  %563 = cast(%var_13925, dtype="uint32") /* ty=Tensor[(4, 6, 7), uint32] */;
  %564 = @func_9740() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %565 = cast(%var_13941, dtype="float32") /* ty=Tensor[(36, 12), float32] */;
  %566 = erf(%565) /* ty=Tensor[(36, 12), float32] */;
  %567 = cast(%var_13941, dtype="float32") /* ty=Tensor[(36, 12), float32] */;
  %568 = shape_of(%var_13922, dtype="int32") /* ty=Tensor[(2), int32] */;
  %569 = cast(%var_13922, dtype="float32") /* ty=Tensor[(36, 12), float32] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %571 = subtract(%569, %570) /* ty=Tensor[(36, 12), float32] */;
  %572 = cast(%var_13947, dtype="bool") /* ty=Tensor[(36, 12), bool] */;
  %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(2), int32] */;
  %574 = cast(%571, dtype="bool") /* ty=Tensor[(36, 12), bool] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %576 = less(%574, %575) /* ty=Tensor[(36, 12), bool] */;
  %577 = cast(%576, dtype="int32") /* ty=Tensor[(36, 12), int32] */;
  %578 = shape_of(%566, dtype="int32") /* ty=Tensor[(2), int32] */;
  %579 = cast(%566, dtype="int32") /* ty=Tensor[(36, 12), int32] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %581 = %559.1;
  %582 = subtract(%562, %563) /* ty=Tensor[(4, 6, 7), uint32] */;
  %583 = %564.0;
  %584 = left_shift(%579, %580) /* ty=Tensor[(36, 12), int32] */;
  (%581, %582, %583, %584)
}

def @func_13777() -> (Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float32], Tensor[(6, 11, 16), int16], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  %585 = @func_11825() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(140), uint16]) */;
  %586 = @func_11858() /* ty=(Tensor[(6, 11, 16), float64],) */;
  %587 = %586.0;
  %588 = cast(%587, dtype="float64") /* ty=Tensor[(6, 11, 16), float64] */;
  %589 = log(%588) /* ty=Tensor[(6, 11, 16), float64] */;
  %590 = cast(%589, dtype="float32") /* ty=Tensor[(6, 11, 16), float32] */;
  %591 = cast(%587, dtype="int16") /* ty=Tensor[(6, 11, 16), int16] */;
  %592 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%589, dtype="int16") /* ty=Tensor[(6, 11, 16), int16] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %595 = %585.0;
  %596 = log2(%590) /* ty=Tensor[(6, 11, 16), float32] */;
  %597 = maximum(%593, %594) /* ty=Tensor[(6, 11, 16), int16] */;
  %598 = @func_7407() /* ty=Tensor[(4, 6, ?), int64] */;
  %599 = @func_10443() /* ty=Tensor[(4, 6, ?), int64] */;
  (%595, %596, %597, %598, %599)
}

def @func_14171(%var_14166: Tensor[(6, 8, 12), float64]) -> (Tensor[(6, 8, 12), float64],) {
  %600 = cast(%var_14166, dtype="float64") /* ty=Tensor[(6, 8, 12), float64] */;
  %601 = asin(%600) /* ty=Tensor[(6, 8, 12), float64] */;
  (%601,)
}

def @func_15039() -> Tensor[(4, 6, ?), int64] {
  @func_7152() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_12852() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  %602 = @func_9740() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %603 = @func_7407() /* ty=Tensor[(4, 6, ?), int64] */;
  %604 = %602.0;
  (%603, %604)
}

def @func_16047() -> Tensor[(72, 4), uint16] {
  %605 = @func_9198() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16]) */;
  %605.1
}

def @func_8953(%var_8946: Tensor[(432), float32]) -> (Tensor[(72, 4), uint16], Tensor[(9, 8, 6), bool], float32, Tensor[(432), float32]) {
  %606 = cast(3.08351f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %607 = cast(%var_8946, dtype="float32") /* ty=Tensor[(432), float32] */;
  %608 = cast(%var_8946, dtype="float32") /* ty=Tensor[(432), float32] */;
  %609 = reshape(%606, newshape=[]) /* ty=float32 */;
  %610 = reshape(%607, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float32] */;
  %611 = reshape(%608, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float32] */;
  %612 = @func_7614() /* ty=Tensor[(72, 4), uint16] */;
  %613 = @func_4039(%609, %610, %611) /* ty=Tensor[(9, 8, 6), bool] */;
  (%612, %613, 3.08351f /* ty=float32 */, %var_8946)
}

def @func_9923(%var_9888: Tensor[(10, 1), float32]) -> (Tensor[(4, 6, ?), int64], Tensor[(2880), int16], Tensor[(28, 2), float64], Tensor[(10, 1), float32], Tensor[(4, 6, ?), float64], Tensor[(104), float32], Tensor[(10, 2, 144), float64]) {
  %614 = @func_7396() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %615 = %614.0;
  %616 = cast(%615, dtype="int64") /* ty=Tensor[(4, 6, ?), int64] */;
  %617 = cast(meta[relay.Constant][31] /* ty=Tensor[(28, 2), float64] */, dtype="float64") /* ty=Tensor[(28, 2), float64] */;
  %618 = cast(%var_9888, dtype="float32") /* ty=Tensor[(10, 1), float32] */;
  %619 = reshape(%616, newshape=[4, 6, 1]) /* ty=Tensor[(4, 6, 1), int64] */;
  %620 = reshape(%617, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %621 = reshape(%618, newshape=[10]) /* ty=Tensor[(10), float32] */;
  %622 = @func_9604(%619, %620, %621) /* ty=(Tensor[(4, 6, ?), uint16], Tensor[(2880), int16], Tensor[(56), float64], Tensor[(10), float32], Tensor[(2880), int16]) */;
  %623 = cast(meta[relay.Constant][32] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %624 = reshape(%623, newshape=[26, 4]) /* ty=Tensor[(26, 4), float32] */;
  %625 = @func_9857(%624) /* ty=(Tensor[(4, 6, ?), float64], Tensor[(26, 4), float64]) */;
  %626 = cast(%var_9888, dtype="float32") /* ty=Tensor[(10, 1), float32] */;
  %627 = %622.4;
  %628 = cast(%627, dtype="int16") /* ty=Tensor[(2880), int16] */;
  %629 = reshape(%626, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float32] */;
  %630 = reshape(%628, newshape=[10, 2, 144]) /* ty=Tensor[(10, 2, 144), int16] */;
  %631 = @func_4149(%629, %630) /* ty=(int32, Tensor[(288), uint16], Tensor[(9, 16, 2), bool], Tensor[(10, 2, 144), float32], Tensor[(10, 2, 144), float64]) */;
  %632 = %625.0;
  %633 = %631.4;
  (%615, %627, meta[relay.Constant][31] /* ty=Tensor[(28, 2), float64] */, %var_9888, %632, meta[relay.Constant][32] /* ty=Tensor[(104), float32] */, %633)
}

def @func_14656() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float32]) {
  %634 = @func_13072() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %635 = @func_12598() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), float64]) */;
  %636 = %635.2;
  %637 = cast(%636, dtype="float32") /* ty=Tensor[(4, 6, ?), float32] */;
  %638 = %634.0;
  %639 = atan(%637) /* ty=Tensor[(4, 6, ?), float32] */;
  (%638, %639)
}

def @func_16234() -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), float64], Tensor[(78), float32], Tensor[(56), float64], Tensor[(2880), int16]) {
  %640 = cast(meta[relay.Constant][33] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %641 = cast(meta[relay.Constant][34] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %642 = cast(meta[relay.Constant][35] /* ty=Tensor[(2880), int16] */, dtype="int16") /* ty=Tensor[(2880), int16] */;
  %643 = reshape(%640, newshape=[13, 1, 6]) /* ty=Tensor[(13, 1, 6), float32] */;
  %644 = reshape(%641, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %645 = reshape(%642, newshape=[2880]) /* ty=Tensor[(2880), int16] */;
  %646 = @func_6631(%643, %644, %645) /* ty=(Tensor[(13, 1, 6), float32], Tensor[(12, 7, 6), float64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(2880), int16]) */;
  %647 = @func_12484() /* ty=Tensor[(4, 6, ?), int64] */;
  %648 = %646.1;
  (%647, %648, meta[relay.Constant][33] /* ty=Tensor[(78), float32] */, meta[relay.Constant][34] /* ty=Tensor[(56), float64] */, meta[relay.Constant][35] /* ty=Tensor[(2880), int16] */)
}

def @func_14913() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  %649 = @func_14446() /* ty=(Tensor[(10), float32], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) */;
  %650 = @func_9066() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float64]) */;
  %651 = %649.2;
  %652 = %650.1;
  (%651, %652)
}

def @func_7407() -> Tensor[(4, 6, ?), int64] {
  %653 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %653.0
}

def @func_15794() -> (Tensor[(6, 11, 16), float64], Tensor[(4, 6, ?), int64]) {
  %654 = @func_14387() /* ty=(Tensor[(6, 11, 16), float64],) */;
  %655 = %654.0;
  %656 = @func_10251() /* ty=Tensor[(4, 6, ?), int64] */;
  (%655, %656)
}

def @func_9740() -> (Tensor[(4, 6, ?), int64],) {
  %657 = @func_9692() /* ty=Tensor[(4, 6, ?), int64] */;
  (%657,)
}

def @func_11400(%var_11394: Tensor[(4, 6, 12), float32]) -> (Tensor[(6, 11, 2), int64], Tensor[(132), int64], Tensor[(4, 6, ?), float64], Tensor[(4, 6, 12), bool]) {
  %658 = cast(meta[relay.Constant][36] /* ty=Tensor[(132), int64] */, dtype="int64") /* ty=Tensor[(132), int64] */;
  %659 = reshape(%658, newshape=[132]) /* ty=Tensor[(132), int64] */;
  %660 = @func_6842(%659) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(6, 11, 2), int64], Tensor[(132), int64]) */;
  %661 = @func_8879() /* ty=(Tensor[(4, 6, ?), float64],) */;
  %662 = @func_9252() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %663 = %662.0;
  %664 = cast(%663, dtype="float32") /* ty=Tensor[(4, 6, ?), float32] */;
  %665 = exp(%664) /* ty=Tensor[(4, 6, ?), float32] */;
  %666 = cast(%665, dtype="bool") /* ty=Tensor[(4, 6, ?), bool] */;
  %667 = cast(%var_11394, dtype="bool") /* ty=Tensor[(4, 6, 12), bool] */;
  %668 = %660.1;
  %669 = %661.0;
  %670 = less(%666, %667) /* ty=Tensor[(4, 6, 12), bool] */;
  (%668, meta[relay.Constant][36] /* ty=Tensor[(132), int64] */, %669, %670)
}

def @func_7724(%var_7722: uint8) -> (Tensor[(13, 2, 1), float32], Tensor[(66, 2), uint64], Tensor[(12, 7, 6), bool], uint8) {
  %671 = @func_7045() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(12, 7, 6), bool], uint8, Tensor[(5, 14, 2), float32], Tensor[(5, 28), bool], Tensor[(13, 2, 1), float32], Tensor[(26, 1), float32]) */;
  %672 = cast(meta[relay.Constant][37] /* ty=Tensor[(66, 2), int64] */, dtype="int64") /* ty=Tensor[(66, 2), int64] */;
  %673 = reshape(%672, newshape=[132]) /* ty=Tensor[(132), int64] */;
  %674 = @func_6842(%673) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(6, 11, 2), int64], Tensor[(132), int64]) */;
  %675 = %674.1;
  %676 = cast(%675, dtype="uint64") /* ty=Tensor[(6, 11, 2), uint64] */;
  %677 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(66, 2), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %678 = cast(meta[relay.Constant][37] /* ty=Tensor[(66, 2), int64] */, dtype="uint64") /* ty=Tensor[(66, 2), uint64] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %680 = cast(%var_7722, dtype="uint8") /* ty=uint8 */;
  %681 = reshape(%680, newshape=[]) /* ty=uint8 */;
  %682 = @func_569(%681) /* ty=(Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) */;
  %683 = %671.5;
  %684 = maximum(%678, %679) /* ty=Tensor[(66, 2), uint64] */;
  %685 = %682.0;
  (%683, %684, %685, %var_7722)
}

def @func_8186() -> Tensor[(6, 11, 16), float64] {
  %686 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 11, 16), float64] */, dtype="float64") /* ty=Tensor[(6, 11, 16), float64] */;
  asin(%686) /* ty=Tensor[(6, 11, 16), float64] */
}

def @func_10910() -> (Tensor[(4, 6, ?), int64],) {
  %687 = @func_9692() /* ty=Tensor[(4, 6, ?), int64] */;
  (%687,)
}

def @func_14226() -> Tensor[(6, 11, 16), int16] {
  %688 = @func_13777() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float32], Tensor[(6, 11, 16), int16], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) */;
  %688.2
}

def @func_8332(%var_8295: uint8) -> (Tensor[(4, 6, ?), float32], Tensor[(66, 2), uint64], uint8, Tensor[(4, 6, ?), int64], Tensor[(2880), int16], Tensor[(1, 1485), float64], Tensor[(10), float32]) {
  %689 = @func_7071() /* ty=Tensor[(4, 6, ?), int64] */;
  %690 = cast(%689, dtype="float32") /* ty=Tensor[(4, 6, ?), float32] */;
  %691 = cast(%var_8295, dtype="uint8") /* ty=uint8 */;
  %692 = reshape(%691, newshape=[]) /* ty=uint8 */;
  %693 = @func_7724(%692) /* ty=(Tensor[(13, 2, 1), float32], Tensor[(66, 2), uint64], Tensor[(12, 7, 6), bool], uint8) */;
  %694 = @func_7396() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %695 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 1485), float64] */, dtype="float64") /* ty=Tensor[(1, 1485), float64] */;
  %696 = cast(meta[relay.Constant][40] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
  %697 = reshape(%695, newshape=[15, 11, 9]) /* ty=Tensor[(15, 11, 9), float64] */;
  %698 = reshape(%696, newshape=[10]) /* ty=Tensor[(10), float32] */;
  %699 = @func_6082(%697, %698) /* ty=(Tensor[(15, 11, 9), float64], Tensor[(9, 16, 2), bool], Tensor[(10), float32], Tensor[(2880), int16]) */;
  %700 = asin(%690) /* ty=Tensor[(4, 6, ?), float32] */;
  %701 = %693.1;
  %702 = %694.0;
  %703 = %699.3;
  (%700, %701, %var_8295, %702, %703, meta[relay.Constant][39] /* ty=Tensor[(1, 1485), float64] */, meta[relay.Constant][40] /* ty=Tensor[(10), float32] */)
}

def @func_15541() -> Tensor[(4, 6, ?), int64] {
  %704 = @func_10585() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(13, 2, 1), float32], Tensor[(13, 2), float32]) */;
  %704.0
}

def @func_11825() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(140), uint16]) {
  %705 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %706 = cast(meta[relay.Constant][41] /* ty=Tensor[(140), uint16] */, dtype="uint16") /* ty=Tensor[(140), uint16] */;
  %707 = reshape(%706, newshape=[70, 2]) /* ty=Tensor[(70, 2), uint16] */;
  %708 = @func_11425(%707) /* ty=(Tensor[(6, 11, 16), float64], Tensor[(14, 1, 10), uint16], uint16, Tensor[(70, 2), uint16], Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) */;
  %709 = %705.0;
  %710 = %708.5;
  (%709, %710, meta[relay.Constant][41] /* ty=Tensor[(140), uint16] */)
}

def @func_7253() -> (Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) {
  %711 = cast(meta[relay.Constant][42] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
  %712 = cast(meta[relay.Constant][43] /* ty=Tensor[(72, 4), uint16] */, dtype="uint16") /* ty=Tensor[(72, 4), uint16] */;
  %713 = reshape(%711, newshape=[1, 10]) /* ty=Tensor[(1, 10), float32] */;
  %714 = reshape(%712, newshape=[288]) /* ty=Tensor[(288), uint16] */;
  %715 = @func_6921(%713, %714) /* ty=(Tensor[(4, 6, ?), int64], uint8, Tensor[(56), float64], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(9, 16, 2), bool], Tensor[(288), uint16]) */;
  %716 = cast(meta[relay.Constant][44] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %717 = reshape(%716, newshape=[]) /* ty=uint8 */;
  %718 = @func_569(%717) /* ty=(Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) */;
  %719 = @func_7071() /* ty=Tensor[(4, 6, ?), int64] */;
  %720 = %715.2;
  %721 = %718.0;
  (%719, %720, meta[relay.Constant][42] /* ty=Tensor[(10), float32] */, meta[relay.Constant][43] /* ty=Tensor[(72, 4), uint16] */, %721, meta[relay.Constant][44] /* ty=uint8 */)
}

def @func_14546() -> Tensor[(6, 11, 16), float64] {
  @func_8186() /* ty=Tensor[(6, 11, 16), float64] */
}

def @func_10485(%var_10469: Tensor[(10), float32]) -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), float64], bool, Tensor[(56, 10), bool]) {
  %722 = @func_9740() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %723 = cast(%var_10469, dtype="float32") /* ty=Tensor[(10), float32] */;
  %724 = cast(meta[relay.Constant][45] /* ty=Tensor[(56, 1), float64] */, dtype="float64") /* ty=Tensor[(56, 1), float64] */;
  %725 = reshape(%723, newshape=[5, 2]) /* ty=Tensor[(5, 2), float32] */;
  %726 = reshape(%724, newshape=[28, 2]) /* ty=Tensor[(28, 2), float64] */;
  %727 = @func_10318(%725, %726) /* ty=(Tensor[(4, 6, ?), float64], Tensor[(5, 2), float32], Tensor[(28, 2), uint16]) */;
  %728 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %729 = reshape(%728, newshape=[]) /* ty=bool */;
  %730 = @func_9337(%729) /* ty=(Tensor[(4, 6, ?), float64], Tensor[(10), float32], bool) */;
  %731 = cast(%var_10469, dtype="bool") /* ty=Tensor[(10), bool] */;
  %732 = cast(meta[relay.Constant][45] /* ty=Tensor[(56, 1), float64] */, dtype="bool") /* ty=Tensor[(56, 1), bool] */;
  %733 = %722.0;
  %734 = %727.0;
  %735 = %730.0;
  %736 = greater(%731, %732) /* ty=Tensor[(56, 10), bool] */;
  (%733, %734, %735, True /* ty=bool */, %736)
}

def @func_8593(%var_8528: Tensor[(5, 14, 2), float32], %var_8536: Tensor[(288), uint16], %var_8551: Tensor[(1, 78), float32]) -> (Tensor[(5, 14, 2), int64], Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(288), uint16], Tensor[(14, 1, 10), uint16], Tensor[(4, 6, 78), float32]) {
  %737 = @func_7824() /* ty=(Tensor[(5, 14, 2), float32],) */;
  %738 = %737.0;
  %739 = cast(%var_8528, dtype="int64") /* ty=Tensor[(5, 14, 2), int64] */;
  %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%738, dtype="int64") /* ty=Tensor[(5, 14, 2), int64] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %743 = cast(meta[relay.Constant][46] /* ty=Tensor[(5, 2), float32] */, dtype="float32") /* ty=Tensor[(5, 2), float32] */;
  %744 = cast(%var_8536, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %745 = reshape(%743, newshape=[1, 10]) /* ty=Tensor[(1, 10), float32] */;
  %746 = reshape(%744, newshape=[288]) /* ty=Tensor[(288), uint16] */;
  %747 = @func_6921(%745, %746) /* ty=(Tensor[(4, 6, ?), int64], uint8, Tensor[(56), float64], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(9, 16, 2), bool], Tensor[(288), uint16]) */;
  %748 = cast(%var_8528, dtype="uint16") /* ty=Tensor[(5, 14, 2), uint16] */;
  %749 = reshape(%748, newshape=[140]) /* ty=Tensor[(140), uint16] */;
  %750 = @func_8506(%749) /* ty=(Tensor[(10), float32], Tensor[(14, 1, 10), uint16], uint16, Tensor[(140), uint16]) */;
  %751 = cast(%var_8551, dtype="float32") /* ty=Tensor[(1, 78), float32] */;
  %752 = reshape(%751, newshape=[78, 1]) /* ty=Tensor[(78, 1), float32] */;
  %753 = @func_7292(%752) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(2880), int16], Tensor[(78, 56), float32]) */;
  %754 = %753.0;
  %755 = cast(%754, dtype="float32") /* ty=Tensor[(4, 6, ?), float32] */;
  %756 = cast(%var_8551, dtype="float32") /* ty=Tensor[(1, 78), float32] */;
  %757 = right_shift(%741, %742) /* ty=Tensor[(5, 14, 2), int64] */;
  %758 = %747.0;
  %759 = %750.1;
  %760 = floor_mod(%755, %756) /* ty=Tensor[(4, 6, 78), float32] */;
  (%757, %758, meta[relay.Constant][46] /* ty=Tensor[(5, 2), float32] */, %var_8536, %759, %760)
}

def @func_12622(%var_12614: Tensor[(2, 14, 7), bool]) -> (Tensor[(2, 14, 7), bool], Tensor[(10), float32]) {
  %761 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 14, 7), bool] */, dtype="bool") /* ty=Tensor[(2, 14, 7), bool] */;
  %762 = shape_of(%var_12614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%var_12614, dtype="bool") /* ty=Tensor[(2, 14, 7), bool] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %765 = logical_and(%763, %764) /* ty=Tensor[(2, 14, 7), bool] */;
  %766 = @func_9536() /* ty=Tensor[(10), float32] */;
  (%765, %766)
}

def @func_12525() -> Tensor[(4, 6, ?), int64] {
  %767 = @func_10910() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %767.0
}

def @func_15827() -> (Tensor[(4, 6, ?), int64],) {
  %768 = @func_13589() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float64]) */;
  %769 = %768.0;
  (%769,)
}

def @func_14330() -> Tensor[(4, 6, ?), int64] {
  %770 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %770.0
}

def @func_9066() -> (Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float64]) {
  %771 = @func_7898() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %772 = %771.0;
  %773 = cast(%772, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
  %774 = @func_7614() /* ty=Tensor[(72, 4), uint16] */;
  %775 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  %776 = log2(%773) /* ty=Tensor[(4, 6, ?), float64] */;
  (%774, %775, %776)
}

def @func_14012() -> (Tensor[(2880), int16],) {
  %777 = @func_13867() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), float64], Tensor[(2880), int16], Tensor[(56, 10), uint16]) */;
  %778 = %777.2;
  (%778,)
}

def @func_10871(%var_10749: Tensor[(432), float32], %var_10769: uint8, %var_10807: Tensor[(288, 1), uint16], %var_10824: Tensor[(13, 11, 13), uint8]) -> (Tensor[(6, 11, 16), float64], Tensor[(4, 6, ?), int64], Tensor[(9, 8, 6), bool], Tensor[(432), float32], Tensor[(4, 6, ?), float32], Tensor[(72, 4), uint32], Tensor[(288, 1), uint16], Tensor[(4, 6, ?), int64], Tensor[(13, 11, 13), uint64], Tensor[(10), float32], Tensor[(66, 2), float32], Tensor[(72, 4), uint16], Tensor[(13, 12, 1), uint16]) {
  %779 = cast(%var_10749, dtype="float32") /* ty=Tensor[(432), float32] */;
  %780 = reshape(%779, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %781 = @func_8953(%780) /* ty=(Tensor[(72, 4), uint16], Tensor[(9, 8, 6), bool], float32, Tensor[(432), float32]) */;
  %782 = @func_9692() /* ty=Tensor[(4, 6, ?), int64] */;
  %783 = cast(%782, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
  %784 = erf(%783) /* ty=Tensor[(4, 6, ?), float64] */;
  %785 = cast(%784, dtype="float32") /* ty=Tensor[(4, 6, ?), float32] */;
  %786 = cast(%var_10769, dtype="float32") /* ty=float32 */;
  %787 = cast(%var_10807, dtype="uint16") /* ty=Tensor[(288, 1), uint16] */;
  %788 = reshape(%787, newshape=[72, 4]) /* ty=Tensor[(72, 4), uint16] */;
  %789 = @func_9135(%788) /* ty=(Tensor[(72, 4), uint32],) */;
  %790 = cast(%var_10769, dtype="uint64") /* ty=uint64 */;
  %791 = cast(%var_10824, dtype="uint64") /* ty=Tensor[(13, 11, 13), uint64] */;
  %792 = %781.1;
  %793 = cast(%792, dtype="float32") /* ty=Tensor[(9, 8, 6), float32] */;
  %794 = reshape(%793, newshape=[36, 12]) /* ty=Tensor[(36, 12), float32] */;
  %795 = @func_10207(%794) /* ty=(Tensor[(10), float32], Tensor[(144, 2), uint16], Tensor[(288), uint16], Tensor[(36, 12), float32]) */;
  %796 = cast(%var_10769, dtype="uint8") /* ty=uint8 */;
  %797 = reshape(%796, newshape=[]) /* ty=uint8 */;
  %798 = @func_7724(%797) /* ty=(Tensor[(13, 2, 1), float32], Tensor[(66, 2), uint64], Tensor[(12, 7, 6), bool], uint8) */;
  %799 = %798.1;
  %800 = cast(%799, dtype="float32") /* ty=Tensor[(66, 2), float32] */;
  %801 = cast(%var_10769, dtype="int32") /* ty=int32 */;
  %802 = reshape(%801, newshape=[]) /* ty=int32 */;
  %803 = @func_8162(%802) /* ty=(Tensor[(72, 4), uint16], Tensor[(12, 7, 6), float64], int32) */;
  %804 = cast(%var_10769, dtype="uint16") /* ty=uint16 */;
  %805 = reshape(%804, newshape=[]) /* ty=uint16 */;
  %806 = @func_8186() /* ty=Tensor[(6, 11, 16), float64] */;
  %807 = @func_7152() /* ty=Tensor[(4, 6, ?), int64] */;
  %808 = mod(%785, %786) /* ty=Tensor[(4, 6, ?), float32] */;
  %809 = %789.0;
  %810 = @func_7152() /* ty=Tensor[(4, 6, ?), int64] */;
  %811 = bitwise_xor(%790, %791) /* ty=Tensor[(13, 11, 13), uint64] */;
  %812 = %795.0;
  %813 = log10(%800) /* ty=Tensor[(66, 2), float32] */;
  %814 = %803.0;
  %815 = @func_9765(%805) /* ty=Tensor[(13, 12, 1), uint16] */;
  (%806, %807, %792, %var_10749, %808, %809, %var_10807, %810, %811, %812, %813, %814, %815)
}

def @func_15063() -> Tensor[(10), float32] {
  %816 = @func_7600() /* ty=(Tensor[(10), float32], Tensor[(4, 6, 16), float64], Tensor[(4, 6, 16), float32], Tensor[(72, 4), uint16]) */;
  %816.0
}

def @func_15239(%var_15233: Tensor[(288), uint16], %var_15234: Tensor[(78), float32]) -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), uint64], Tensor[(4, 6, 78), float32], Tensor[(140), float32], Tensor[(288), uint16], Tensor[(78), float32]) {
  %817 = @func_12598() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), float64]) */;
  %818 = @func_12598() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), float64]) */;
  %819 = %818.0;
  %820 = @func_11970() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %821 = %820.0;
  %822 = cast(%821, dtype="bool") /* ty=Tensor[(4, 6, ?), bool] */;
  %823 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%819, dtype="bool") /* ty=Tensor[(4, 6, ?), bool] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %826 = not_equal(%824, %825) /* ty=Tensor[(4, 6, ?), bool] */;
  %827 = cast(%819, dtype="uint64") /* ty=Tensor[(4, 6, ?), uint64] */;
  %828 = shape_of(%826, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(%826, dtype="uint64") /* ty=Tensor[(4, 6, ?), uint64] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %831 = cast(meta[relay.Constant][48] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %832 = cast(%var_15233, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %833 = cast(%var_15234, dtype="float32") /* ty=Tensor[(78), float32] */;
  %834 = reshape(%831, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), float32] */;
  %835 = reshape(%832, newshape=[288]) /* ty=Tensor[(288), uint16] */;
  %836 = reshape(%833, newshape=[1, 78]) /* ty=Tensor[(1, 78), float32] */;
  %837 = @func_8593(%834, %835, %836) /* ty=(Tensor[(5, 14, 2), int64], Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(288), uint16], Tensor[(14, 1, 10), uint16], Tensor[(4, 6, 78), float32]) */;
  %838 = %817.0;
  %839 = logical_xor(%829, %830) /* ty=Tensor[(4, 6, ?), uint64] */;
  %840 = %837.5;
  (%838, %839, %840, meta[relay.Constant][48] /* ty=Tensor[(140), float32] */, %var_15233, %var_15234)
}

def @func_3012(%var_2977: int32, %var_2999: Tensor[(2, 144), uint16]) -> (Tensor[(10, 15, 3), float32], Tensor[(12, 7, 6), float64], Tensor[(9, 16, 2), bool], Tensor[(2, 144), uint16]) {
  %841 = cast(%var_2977, dtype="int32") /* ty=int32 */;
  %842 = cast(meta[relay.Constant][49] /* ty=Tensor[(10, 15, 3), int32] */, dtype="int32") /* ty=Tensor[(10, 15, 3), int32] */;
  %843 = logical_xor(%841, %842) /* ty=Tensor[(10, 15, 3), int32] */;
  %844 = cast(%843, dtype="float32") /* ty=Tensor[(10, 15, 3), float32] */;
  %845 = cast(%var_2977, dtype="uint8") /* ty=uint8 */;
  %846 = reshape(%845, newshape=[]) /* ty=uint8 */;
  %847 = @func_569(%846) /* ty=(Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) */;
  %848 = cast(%var_2999, dtype="uint16") /* ty=Tensor[(2, 144), uint16] */;
  %849 = cast(%var_2999, dtype="uint16") /* ty=Tensor[(2, 144), uint16] */;
  %850 = reshape(%848, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %851 = reshape(%849, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %852 = erf(%844) /* ty=Tensor[(10, 15, 3), float32] */;
  %853 = %847.1;
  %854 = @func_609(%850, %851) /* ty=Tensor[(9, 16, 2), bool] */;
  (%852, %853, %854, %var_2999)
}

def @func_8780(%var_8770: uint8, %var_8776: Tensor[(140), uint16]) -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], uint8, Tensor[(14, 1, 10), uint16], Tensor[(140), uint16]) {
  %855 = cast(%var_8770, dtype="uint8") /* ty=uint8 */;
  %856 = reshape(%855, newshape=[]) /* ty=uint8 */;
  %857 = @func_7459(%856) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool]) */;
  %858 = cast(%var_8770, dtype="uint16") /* ty=uint16 */;
  %859 = cast(%var_8776, dtype="uint16") /* ty=Tensor[(140), uint16] */;
  %860 = reshape(%858, newshape=[]) /* ty=uint16 */;
  %861 = reshape(%859, newshape=[14, 1, 10]) /* ty=Tensor[(14, 1, 10), uint16] */;
  %862 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  %863 = %857.0;
  %864 = @func_3688(%860, %861) /* ty=Tensor[(14, 1, 10), uint16] */;
  (%862, %863, %var_8770, %864, %var_8776)
}

def @func_13867() -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), float64], Tensor[(2880), int16], Tensor[(56, 10), uint16]) {
  %865 = cast(meta[relay.Constant][50] /* ty=Tensor[(56, 1), float64] */, dtype="float64") /* ty=Tensor[(56, 1), float64] */;
  %866 = cast(meta[relay.Constant][51] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
  %867 = cast(meta[relay.Constant][52] /* ty=Tensor[(2880), int16] */, dtype="int16") /* ty=Tensor[(2880), int16] */;
  %868 = reshape(%865, newshape=[14, 4, 1]) /* ty=Tensor[(14, 4, 1), float64] */;
  %869 = reshape(%866, newshape=[1, 10]) /* ty=Tensor[(1, 10), float32] */;
  %870 = reshape(%867, newshape=[2880]) /* ty=Tensor[(2880), int16] */;
  %871 = @func_4876(%868, %869, %870) /* ty=(Tensor[(12, 7, 6), float64], uint8, Tensor[(9, 16, 2), bool], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(14, 4, ?), bool]) */;
  %872 = cast(meta[relay.Constant][50] /* ty=Tensor[(56, 1), float64] */, dtype="float32") /* ty=Tensor[(56, 1), float32] */;
  %873 = log2(%872) /* ty=Tensor[(56, 1), float32] */;
  %874 = cast(%873, dtype="uint16") /* ty=Tensor[(56, 1), uint16] */;
  %875 = cast(meta[relay.Constant][51] /* ty=Tensor[(10), float32] */, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %876 = @func_7152() /* ty=Tensor[(4, 6, ?), int64] */;
  %877 = %871.0;
  %878 = bitwise_and(%874, %875) /* ty=Tensor[(56, 10), uint16] */;
  (%876, %877, meta[relay.Constant][52] /* ty=Tensor[(2880), int16] */, %878)
}

def @func_12598() -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), float64]) {
  %879 = @func_11464() /* ty=(Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), int64]) */;
  %880 = @func_8879() /* ty=(Tensor[(4, 6, ?), float64],) */;
  %881 = @func_7071() /* ty=Tensor[(4, 6, ?), int64] */;
  %882 = %879.0;
  %883 = %880.0;
  (%881, %882, %883)
}

def @func_8162(%var_8160: int32) -> (Tensor[(72, 4), uint16], Tensor[(12, 7, 6), float64], int32) {
  %884 = @func_7600() /* ty=(Tensor[(10), float32], Tensor[(4, 6, 16), float64], Tensor[(4, 6, 16), float32], Tensor[(72, 4), uint16]) */;
  %885 = cast(%var_8160, dtype="int32") /* ty=int32 */;
  %886 = %884.3;
  %887 = cast(%886, dtype="uint16") /* ty=Tensor[(72, 4), uint16] */;
  %888 = reshape(%885, newshape=[]) /* ty=int32 */;
  %889 = reshape(%887, newshape=[2, 144]) /* ty=Tensor[(2, 144), uint16] */;
  %890 = @func_3012(%888, %889) /* ty=(Tensor[(10, 15, 3), float32], Tensor[(12, 7, 6), float64], Tensor[(9, 16, 2), bool], Tensor[(2, 144), uint16]) */;
  %891 = %890.1;
  (%886, %891, %var_8160)
}

def @func_11868() -> Tensor[(4, 6, ?), int64] {
  @func_10089() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_14446() -> (Tensor[(10), float32], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  %892 = @func_9226() /* ty=(Tensor[(10), float32],) */;
  %893 = @func_8460() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %894 = %892.0;
  %895 = %893.0;
  %896 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  %897 = @func_12525() /* ty=Tensor[(4, 6, ?), int64] */;
  (%894, %895, %896, %897)
}

def @func_9337(%var_9331: bool) -> (Tensor[(4, 6, ?), float64], Tensor[(10), float32], bool) {
  %898 = @func_7665() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) */;
  %899 = cast(%var_9331, dtype="bool") /* ty=bool */;
  %900 = reshape(%899, newshape=[]) /* ty=bool */;
  %901 = @func_7180(%900) /* ty=(Tensor[(5, 15, 14), bool], int32, Tensor[(10), float32], Tensor[(96, 30), int16]) */;
  %902 = %898.0;
  %903 = %901.2;
  (%902, %903, %var_9331)
}

def @func_3688(%var_3681: uint16, %var_3682: Tensor[(14, 1, 10), uint16]) -> Tensor[(14, 1, 10), uint16] {
  %904 = cast(%var_3681, dtype="uint16") /* ty=uint16 */;
  %905 = cast(%var_3682, dtype="uint16") /* ty=Tensor[(14, 1, 10), uint16] */;
  bitwise_or(%904, %905) /* ty=Tensor[(14, 1, 10), uint16] */
}

def @func_14821() -> (Tensor[(4, 6, ?), int64],) {
  %906 = @func_11868() /* ty=Tensor[(4, 6, ?), int64] */;
  (%906,)
}

def @func_3608(%var_3592: Tensor[(6, 11, 2), int64]) -> Tensor[(6, 11, 2), int64] {
  %907 = cast(meta[relay.Constant][53] /* ty=Tensor[(6, 11, 2), int64] */, dtype="int64") /* ty=Tensor[(6, 11, 2), int64] */;
  %908 = shape_of(%var_3592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %909 = cast(%var_3592, dtype="int64") /* ty=Tensor[(6, 11, 2), int64] */;
  %910 = dyn.reshape(%907, %908, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  multiply(%909, %910) /* ty=Tensor[(6, 11, 2), int64] */
}

def @func_8879() -> (Tensor[(4, 6, ?), float64],) {
  %911 = @func_7045() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(12, 7, 6), bool], uint8, Tensor[(5, 14, 2), float32], Tensor[(5, 28), bool], Tensor[(13, 2, 1), float32], Tensor[(26, 1), float32]) */;
  %912 = %911.0;
  (%912,)
}

def @func_13197() -> (Tensor[(72, 4), uint16],) {
  %913 = @func_7492() /* ty=(Tensor[(72, 4), uint16],) */;
  %914 = %913.0;
  (%914,)
}

def @func_9765(%var_9757: uint16) -> Tensor[(13, 12, 1), uint16] {
  %915 = cast(%var_9757, dtype="uint16") /* ty=uint16 */;
  %916 = cast(meta[relay.Constant][54] /* ty=Tensor[(13, 12, 1), uint16] */, dtype="uint16") /* ty=Tensor[(13, 12, 1), uint16] */;
  bitwise_and(%915, %916) /* ty=Tensor[(13, 12, 1), uint16] */
}

def @func_11081() -> (uint8, Tensor[(5, 14, 2), float32]) {
  %917 = @func_7045() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(12, 7, 6), bool], uint8, Tensor[(5, 14, 2), float32], Tensor[(5, 28), bool], Tensor[(13, 2, 1), float32], Tensor[(26, 1), float32]) */;
  %918 = @func_7824() /* ty=(Tensor[(5, 14, 2), float32],) */;
  %919 = %917.2;
  %920 = %918.0;
  (%919, %920)
}

def @func_7180(%var_7160: bool) -> (Tensor[(5, 15, 14), bool], int32, Tensor[(10), float32], Tensor[(96, 30), int16]) {
  %921 = cast(%var_7160, dtype="bool") /* ty=bool */;
  %922 = cast(meta[relay.Constant][55] /* ty=Tensor[(5, 15, 14), bool] */, dtype="bool") /* ty=Tensor[(5, 15, 14), bool] */;
  %923 = cast(meta[relay.Constant][56] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
  %924 = cast(meta[relay.Constant][57] /* ty=Tensor[(96, 30), int16] */, dtype="int16") /* ty=Tensor[(96, 30), int16] */;
  %925 = reshape(%923, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float32] */;
  %926 = reshape(%924, newshape=[10, 2, 144]) /* ty=Tensor[(10, 2, 144), int16] */;
  %927 = @func_4149(%925, %926) /* ty=(int32, Tensor[(288), uint16], Tensor[(9, 16, 2), bool], Tensor[(10, 2, 144), float32], Tensor[(10, 2, 144), float64]) */;
  %928 = logical_or(%921, %922) /* ty=Tensor[(5, 15, 14), bool] */;
  %929 = %927.0;
  (%928, %929, meta[relay.Constant][56] /* ty=Tensor[(10), float32] */, meta[relay.Constant][57] /* ty=Tensor[(96, 30), int16] */)
}

def @func_14598() -> (Tensor[(6, 11, 16), float64],) {
  %930 = @func_10543() /* ty=(Tensor[(6, 11, 16), float64],) */;
  %931 = %930.0;
  (%931,)
}

def @func_10714(%var_10690: Tensor[(11, 5, 2), float64]) -> (Tensor[(11, 5, 2), bool],) {
  %932 = cast(%var_10690, dtype="float64") /* ty=Tensor[(11, 5, 2), float64] */;
  %933 = exp(%932) /* ty=Tensor[(11, 5, 2), float64] */;
  %934 = cast(%var_10690, dtype="bool") /* ty=Tensor[(11, 5, 2), bool] */;
  %935 = shape_of(%933, dtype="int32") /* ty=Tensor[(3), int32] */;
  %936 = cast(%933, dtype="bool") /* ty=Tensor[(11, 5, 2), bool] */;
  %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %938 = not_equal(%936, %937) /* ty=Tensor[(11, 5, 2), bool] */;
  (%938,)
}

def @func_14992(%var_14968: Tensor[(7, 5, 8), int32], %var_14975: Tensor[(288), uint16]) -> (Tensor[(7, 5, 8), int32], Tensor[(4, 6, ?), int64], Tensor[(288), uint16], Tensor[(10), float32]) {
  %939 = cast(%var_14968, dtype="int32") /* ty=Tensor[(7, 5, 8), int32] */;
  %940 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(7, 5, 8), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %941 = cast(meta[relay.Constant][58] /* ty=Tensor[(7, 5, 8), int32] */, dtype="int32") /* ty=Tensor[(7, 5, 8), int32] */;
  %942 = dyn.reshape(%939, %940, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %943 = cast(%var_14975, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %944 = reshape(%943, newshape=[72, 4]) /* ty=Tensor[(72, 4), uint16] */;
  %945 = @func_10381(%944) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(140), float32], Tensor[(72, 4), uint16], Tensor[(78), float32]) */;
  %946 = @func_12882() /* ty=(Tensor[(10), float32],) */;
  %947 = bitwise_xor(%941, %942) /* ty=Tensor[(7, 5, 8), int32] */;
  %948 = %945.0;
  %949 = %946.0;
  (%947, %948, %var_14975, %949)
}

def @func_16108() -> (Tensor[(4, 6, ?), int64],) {
  %950 = @func_14330() /* ty=Tensor[(4, 6, ?), int64] */;
  (%950,)
}

def @func_11464() -> (Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), int64]) {
  %951 = @func_7045() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(12, 7, 6), bool], uint8, Tensor[(5, 14, 2), float32], Tensor[(5, 28), bool], Tensor[(13, 2, 1), float32], Tensor[(26, 1), float32]) */;
  %952 = @func_9740() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %953 = %951.1;
  %954 = %952.0;
  (%953, %954)
}

def @func_7396() -> (Tensor[(4, 6, ?), int64],) {
  %955 = @func_7071() /* ty=Tensor[(4, 6, ?), int64] */;
  (%955,)
}

def @func_4039(%var_4016: float32, %var_4017: Tensor[(9, 8, 6), float32], %var_4023: Tensor[(9, 8, 6), float32]) -> Tensor[(9, 8, 6), bool] {
  %956 = cast(%var_4016, dtype="float32") /* ty=float32 */;
  %957 = cast(%var_4017, dtype="float32") /* ty=Tensor[(9, 8, 6), float32] */;
  %958 = divide(%956, %957) /* ty=Tensor[(9, 8, 6), float32] */;
  %959 = cast(%var_4023, dtype="bool") /* ty=Tensor[(9, 8, 6), bool] */;
  %960 = shape_of(%958, dtype="int32") /* ty=Tensor[(3), int32] */;
  %961 = cast(%958, dtype="bool") /* ty=Tensor[(9, 8, 6), bool] */;
  %962 = dyn.reshape(%959, %960, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%961, %962) /* ty=Tensor[(9, 8, 6), bool] */
}

def @func_6842(%var_6820: Tensor[(132), int64]) -> (Tensor[(4, 6, ?), int64], Tensor[(6, 11, 2), int64], Tensor[(132), int64]) {
  %963 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %964 = cast(%var_6820, dtype="int64") /* ty=Tensor[(132), int64] */;
  %965 = reshape(%964, newshape=[6, 11, 2]) /* ty=Tensor[(6, 11, 2), int64] */;
  %966 = %963.0;
  %967 = @func_3608(%965) /* ty=Tensor[(6, 11, 2), int64] */;
  (%966, %967, %var_6820)
}

def @func_14291(%var_14256: Tensor[(4, 6, 8), int64]) -> (Tensor[(4, 6, 8), int64], Tensor[(6, 8, 12), float64], Tensor[(144, 4), float64], Tensor[(72, 4), float32]) {
  %968 = @func_7744() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %969 = %968.0;
  %970 = cast(%969, dtype="int64") /* ty=Tensor[(4, 6, ?), int64] */;
  %971 = cast(%var_14256, dtype="int64") /* ty=Tensor[(4, 6, 8), int64] */;
  %972 = cast(meta[relay.Constant][59] /* ty=Tensor[(144, 4), float64] */, dtype="float64") /* ty=Tensor[(144, 4), float64] */;
  %973 = reshape(%972, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), float64] */;
  %974 = @func_14171(%973) /* ty=(Tensor[(6, 8, 12), float64],) */;
  %975 = @func_10668() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(72, 4), float32], Tensor[(10), float32]) */;
  %976 = left_shift(%970, %971) /* ty=Tensor[(4, 6, 8), int64] */;
  %977 = %974.0;
  %978 = %975.1;
  (%976, %977, meta[relay.Constant][59] /* ty=Tensor[(144, 4), float64] */, %978)
}

def @func_8741(%var_8735: Tensor[(140), uint16]) -> (Tensor[(72, 4), uint32], Tensor[(5, 15, 14), bool], bool, Tensor[(9, 16, 2), bool], Tensor[(72, 4), uint32], Tensor[(4, 6, ?), float64], uint16, Tensor[(140), uint16]) {
  %979 = @func_7614() /* ty=Tensor[(72, 4), uint16] */;
  %980 = cast(meta[relay.Constant][60] /* ty=Tensor[(72, 4), uint16] */, dtype="uint32") /* ty=Tensor[(72, 4), uint32] */;
  %981 = shape_of(%979, dtype="int32") /* ty=Tensor[(2), int32] */;
  %982 = cast(%979, dtype="uint32") /* ty=Tensor[(72, 4), uint32] */;
  %983 = dyn.reshape(%980, %981, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %984 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %985 = reshape(%984, newshape=[]) /* ty=bool */;
  %986 = @func_7180(%985) /* ty=(Tensor[(5, 15, 14), bool], int32, Tensor[(10), float32], Tensor[(96, 30), int16]) */;
  %987 = bitwise_xor(%982, %983) /* ty=Tensor[(72, 4), uint32] */;
  %988 = cast(%987, dtype="uint16") /* ty=Tensor[(72, 4), uint16] */;
  %989 = cast(%987, dtype="uint16") /* ty=Tensor[(72, 4), uint16] */;
  %990 = reshape(%988, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %991 = reshape(%989, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %992 = cast(%979, dtype="uint16") /* ty=Tensor[(72, 4), uint16] */;
  %993 = cast(%987, dtype="uint16") /* ty=Tensor[(72, 4), uint16] */;
  %994 = reshape(%992, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %995 = reshape(%993, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %996 = @func_609(%994, %995) /* ty=Tensor[(9, 16, 2), bool] */;
  %997 = cast(%996, dtype="uint32") /* ty=Tensor[(9, 16, 2), uint32] */;
  %998 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(72, 4), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %999 = cast(meta[relay.Constant][60] /* ty=Tensor[(72, 4), uint16] */, dtype="uint32") /* ty=Tensor[(72, 4), uint32] */;
  %1000 = dyn.reshape(%997, %998, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %1001 = @func_7665() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) */;
  %1002 = cast(%var_8735, dtype="uint16") /* ty=Tensor[(140), uint16] */;
  %1003 = reshape(%1002, newshape=[140]) /* ty=Tensor[(140), uint16] */;
  %1004 = @func_8506(%1003) /* ty=(Tensor[(10), float32], Tensor[(14, 1, 10), uint16], uint16, Tensor[(140), uint16]) */;
  %1005 = %986.0;
  %1006 = @func_609(%990, %991) /* ty=Tensor[(9, 16, 2), bool] */;
  %1007 = bitwise_or(%999, %1000) /* ty=Tensor[(72, 4), uint32] */;
  %1008 = %1001.0;
  %1009 = %1004.2;
  (%987, %1005, True /* ty=bool */, %1006, %1007, %1008, %1009, %var_8735)
}

def @func_14568(%var_14561: Tensor[(288), uint16], %var_14562: Tensor[(78), float32]) -> (Tensor[(4, 6, 140), int64], Tensor[(14, 1, 10), uint16], Tensor[(288), uint16], Tensor[(78), float32]) {
  %1010 = @func_7152() /* ty=Tensor[(4, 6, ?), int64] */;
  %1011 = @func_11825() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(140), uint16]) */;
  %1012 = %1011.2;
  %1013 = cast(%1010, dtype="int64") /* ty=Tensor[(4, 6, ?), int64] */;
  %1014 = cast(%1012, dtype="int64") /* ty=Tensor[(140), int64] */;
  %1015 = cast(%1012, dtype="float32") /* ty=Tensor[(140), float32] */;
  %1016 = cast(%var_14561, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %1017 = cast(%var_14562, dtype="float32") /* ty=Tensor[(78), float32] */;
  %1018 = reshape(%1015, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), float32] */;
  %1019 = reshape(%1016, newshape=[288]) /* ty=Tensor[(288), uint16] */;
  %1020 = reshape(%1017, newshape=[1, 78]) /* ty=Tensor[(1, 78), float32] */;
  %1021 = @func_8593(%1018, %1019, %1020) /* ty=(Tensor[(5, 14, 2), int64], Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(288), uint16], Tensor[(14, 1, 10), uint16], Tensor[(4, 6, 78), float32]) */;
  %1022 = maximum(%1013, %1014) /* ty=Tensor[(4, 6, 140), int64] */;
  %1023 = %1021.4;
  (%1022, %1023, %var_14561, %var_14562)
}

def @func_15492() -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool], uint8) {
  %1024 = cast(meta[relay.Constant][61] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1025 = reshape(%1024, newshape=[]) /* ty=uint8 */;
  %1026 = @func_7459(%1025) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool]) */;
  %1027 = @func_7407() /* ty=Tensor[(4, 6, ?), int64] */;
  %1028 = %1026.1;
  (%1027, %1028, meta[relay.Constant][61] /* ty=uint8 */)
}

def @func_9444() -> Tensor[(5, 14, 2), float32] {
  %1029 = @func_7824() /* ty=(Tensor[(5, 14, 2), float32],) */;
  %1029.0
}

def @func_10524() -> Tensor[(72, 4), float32] {
  %1030 = @func_7614() /* ty=Tensor[(72, 4), uint16] */;
  %1031 = cast(%1030, dtype="float32") /* ty=Tensor[(72, 4), float32] */;
  sigmoid(%1031) /* ty=Tensor[(72, 4), float32] */
}

def @func_8636(%var_8624: uint8) -> (Tensor[(4, 6, ?), int64], Tensor[(13, 2, 1), float32], Tensor[(26), float32], Tensor[(5, 14, 2), float32], Tensor[(140), bool], uint8) {
  %1032 = @func_7744() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %1033 = cast(meta[relay.Constant][62] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %1034 = reshape(%1033, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float32] */;
  %1035 = cast(meta[relay.Constant][63] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %1036 = cast(meta[relay.Constant][63] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %1037 = cast(%var_8624, dtype="uint8") /* ty=uint8 */;
  %1038 = reshape(%1035, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), bool] */;
  %1039 = reshape(%1036, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), bool] */;
  %1040 = reshape(%1037, newshape=[]) /* ty=uint8 */;
  %1041 = @func_1525(%1038, %1039, %1040) /* ty=(Tensor[(5, 14, 2), float32], Tensor[(12, 7, 6), bool], uint8) */;
  %1042 = %1032.0;
  %1043 = @func_5085(%1034) /* ty=Tensor[(13, 2, 1), float32] */;
  %1044 = %1041.0;
  (%1042, %1043, meta[relay.Constant][62] /* ty=Tensor[(26), float32] */, %1044, meta[relay.Constant][63] /* ty=Tensor[(140), bool] */, %var_8624)
}

def @func_6921(%var_6914: Tensor[(1, 10), float32], %var_6919: Tensor[(288), uint16]) -> (Tensor[(4, 6, ?), int64], uint8, Tensor[(56), float64], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(9, 16, 2), bool], Tensor[(288), uint16]) {
  %1045 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %1046 = cast(meta[relay.Constant][64] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %1047 = cast(%var_6914, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %1048 = cast(meta[relay.Constant][65] /* ty=Tensor[(2880), int16] */, dtype="int16") /* ty=Tensor[(2880), int16] */;
  %1049 = reshape(%1046, newshape=[14, 4, 1]) /* ty=Tensor[(14, 4, 1), float64] */;
  %1050 = reshape(%1047, newshape=[1, 10]) /* ty=Tensor[(1, 10), float32] */;
  %1051 = reshape(%1048, newshape=[2880]) /* ty=Tensor[(2880), int16] */;
  %1052 = @func_4876(%1049, %1050, %1051) /* ty=(Tensor[(12, 7, 6), float64], uint8, Tensor[(9, 16, 2), bool], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(14, 4, ?), bool]) */;
  %1053 = cast(%var_6919, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %1054 = cast(%var_6919, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %1055 = reshape(%1053, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %1056 = reshape(%1054, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %1057 = %1045.0;
  %1058 = %1052.1;
  %1059 = @func_609(%1055, %1056) /* ty=Tensor[(9, 16, 2), bool] */;
  (%1057, %1058, meta[relay.Constant][64] /* ty=Tensor[(56), float64] */, %var_6914, meta[relay.Constant][65] /* ty=Tensor[(2880), int16] */, %1059, %var_6919)
}

def @func_16075() -> (Tensor[(4, 6, ?), float64],) {
  %1060 = @func_10910() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %1061 = %1060.0;
  %1062 = cast(%1061, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
  %1063 = log10(%1062) /* ty=Tensor[(4, 6, ?), float64] */;
  (%1063,)
}

def @func_13072() -> (Tensor[(4, 6, ?), int64],) {
  %1064 = @func_9252() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %1065 = %1064.0;
  (%1065,)
}

def @func_12950() -> (Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16]) {
  %1066 = @func_12126() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %1067 = @func_9198() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16]) */;
  %1068 = %1066.0;
  %1069 = %1067.1;
  (%1068, %1069)
}

def @func_8911() -> (Tensor[(10), float32],) {
  %1070 = @func_7253() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) */;
  %1071 = %1070.2;
  (%1071,)
}

def @func_6751() -> (Tensor[(4, 6, ?), int64],) {
  %1072 = cast(meta[relay.Constant][67] /* ty=Tensor[(4, 6, 1), int64] */, dtype="int64") /* ty=Tensor[(4, 6, 1), int64] */;
  %1073 = shape_of(meta[relay.Constant][66] /* ty=Tensor[(4, 6, 1), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1074 = cast(meta[relay.Constant][66] /* ty=Tensor[(4, 6, 1), int64] */, dtype="int64") /* ty=Tensor[(4, 6, 1), int64] */;
  %1075 = dyn.reshape(%1072, %1073, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1076 = multiply(%1074, %1075) /* ty=Tensor[(4, 6, ?), int64] */;
  (%1076,)
}

def @func_11858() -> (Tensor[(6, 11, 16), float64],) {
  %1077 = @func_10336() /* ty=(Tensor[(6, 11, 16), float64],) */;
  %1078 = %1077.0;
  (%1078,)
}

def @func_6520(%var_6503: float32, %var_6504: Tensor[(6, 6, 9), float32]) -> (Tensor[(6, 6, 9), float32], Tensor[(2, 144), uint16], Tensor[(24, 12), uint16]) {
  %1079 = cast(%var_6503, dtype="float32") /* ty=float32 */;
  %1080 = cast(%var_6504, dtype="float32") /* ty=Tensor[(6, 6, 9), float32] */;
  %1081 = cast(%var_6503, dtype="int32") /* ty=int32 */;
  %1082 = cast(meta[relay.Constant][68] /* ty=Tensor[(24, 12), uint16] */, dtype="uint16") /* ty=Tensor[(24, 12), uint16] */;
  %1083 = reshape(%1081, newshape=[]) /* ty=int32 */;
  %1084 = reshape(%1082, newshape=[2, 144]) /* ty=Tensor[(2, 144), uint16] */;
  %1085 = @func_3012(%1083, %1084) /* ty=(Tensor[(10, 15, 3), float32], Tensor[(12, 7, 6), float64], Tensor[(9, 16, 2), bool], Tensor[(2, 144), uint16]) */;
  %1086 = mod(%1079, %1080) /* ty=Tensor[(6, 6, 9), float32] */;
  %1087 = %1085.3;
  (%1086, %1087, meta[relay.Constant][68] /* ty=Tensor[(24, 12), uint16] */)
}

def @func_7492() -> (Tensor[(72, 4), uint16],) {
  %1088 = @func_7253() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) */;
  %1089 = %1088.3;
  (%1089,)
}

def @func_9857(%var_9839: Tensor[(26, 4), float32]) -> (Tensor[(4, 6, ?), float64], Tensor[(26, 4), float64]) {
  %1090 = @func_9066() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float64]) */;
  %1091 = @func_7045() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(12, 7, 6), bool], uint8, Tensor[(5, 14, 2), float32], Tensor[(5, 28), bool], Tensor[(13, 2, 1), float32], Tensor[(26, 1), float32]) */;
  %1092 = %1091.6;
  %1093 = cast(%1092, dtype="float64") /* ty=Tensor[(26, 1), float64] */;
  %1094 = cast(%var_9839, dtype="float64") /* ty=Tensor[(26, 4), float64] */;
  %1095 = %1090.2;
  %1096 = divide(%1093, %1094) /* ty=Tensor[(26, 4), float64] */;
  (%1095, %1096)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_14546() -> Tensor[(6, 11, 16), float64] {
  @func_8186() /* ty=Tensor[(6, 11, 16), float64] */
}

def @func_9832(%var_9830: Tensor[(4, 6, 11), int64]) -> (Tensor[(4, 6, 11), bool], Tensor[(4, 6, 11), float64]) {
  @func_9829(%var_9830) /* ty=(Tensor[(4, 6, 11), bool], Tensor[(4, 6, 11), float64]) */
}

def @func_12624(%var_12623: Tensor[(2, 14, 7), bool]) -> (Tensor[(2, 14, 7), bool], Tensor[(10), float32]) {
  %6 = fn (%var_12614: Tensor[(2, 14, 7), bool]) -> (Tensor[(2, 14, 7), bool], Tensor[(10), float32]) {
    %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 14, 7), bool] */, dtype="bool") /* ty=Tensor[(2, 14, 7), bool] */;
    %1 = shape_of(%var_12614, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_12614, dtype="bool") /* ty=Tensor[(2, 14, 7), bool] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %4 = logical_and(%2, %3) /* ty=Tensor[(2, 14, 7), bool] */;
    %5 = @func_9536() /* ty=Tensor[(10), float32] */;
    (%4, %5)
  };
  %6(%var_12623) /* ty=(Tensor[(2, 14, 7), bool], Tensor[(10), float32]) */
}

def @func_14600() -> (Tensor[(6, 11, 16), float64],) {
  @func_14598() /* ty=(Tensor[(6, 11, 16), float64],) */
}

def @func_7727(%var_7725: uint8) -> (Tensor[(13, 2, 1), float32], Tensor[(66, 2), uint64], Tensor[(12, 7, 6), bool], uint8) {
  @func_7724(%var_7725) /* ty=(Tensor[(13, 2, 1), float32], Tensor[(66, 2), uint64], Tensor[(12, 7, 6), bool], uint8) */
}

def @func_8335(%var_8333: uint8) -> (Tensor[(4, 6, ?), float32], Tensor[(66, 2), uint64], uint8, Tensor[(4, 6, ?), int64], Tensor[(2880), int16], Tensor[(1, 1485), float64], Tensor[(10), float32]) {
  @func_8332(%var_8333) /* ty=(Tensor[(4, 6, ?), float32], Tensor[(66, 2), uint64], uint8, Tensor[(4, 6, ?), int64], Tensor[(2880), int16], Tensor[(1, 1485), float64], Tensor[(10), float32]) */
}

def @func_9068() -> (Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float64]) {
  @func_9066() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float64]) */
}

def @func_8780(%var_8770: uint8, %var_8776: Tensor[(140), uint16]) -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], uint8, Tensor[(14, 1, 10), uint16], Tensor[(140), uint16]) {
  %7 = cast(%var_8770, dtype="uint8") /* ty=uint8 */;
  %8 = reshape(%7, newshape=[]) /* ty=uint8 */;
  %9 = @func_7459(%8) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool]) */;
  %10 = cast(%var_8770, dtype="uint16") /* ty=uint16 */;
  %11 = cast(%var_8776, dtype="uint16") /* ty=Tensor[(140), uint16] */;
  %12 = reshape(%10, newshape=[]) /* ty=uint16 */;
  %13 = reshape(%11, newshape=[14, 1, 10]) /* ty=Tensor[(14, 1, 10), uint16] */;
  %14 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  %15 = %9.0;
  %16 = @func_3688(%12, %13) /* ty=Tensor[(14, 1, 10), uint16] */;
  (%14, %15, %var_8770, %16, %var_8776)
}

def @func_15885() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  %17 = @func_14208() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %18 = @func_7366() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %19 = %17.0;
  %20 = %18.0;
  (%19, %20)
}

def @func_11825() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(140), uint16]) {
  %21 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(140), uint16] */, dtype="uint16") /* ty=Tensor[(140), uint16] */;
  %23 = reshape(%22, newshape=[70, 2]) /* ty=Tensor[(70, 2), uint16] */;
  %24 = @func_11425(%23) /* ty=(Tensor[(6, 11, 16), float64], Tensor[(14, 1, 10), uint16], uint16, Tensor[(70, 2), uint16], Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) */;
  %25 = %21.0;
  %26 = %24.5;
  (%25, %26, meta[relay.Constant][1] /* ty=Tensor[(140), uint16] */)
}

def @func_3688(%var_3681: uint16, %var_3682: Tensor[(14, 1, 10), uint16]) -> Tensor[(14, 1, 10), uint16] {
  %27 = cast(%var_3681, dtype="uint16") /* ty=uint16 */;
  %28 = cast(%var_3682, dtype="uint16") /* ty=Tensor[(14, 1, 10), uint16] */;
  bitwise_or(%27, %28) /* ty=Tensor[(14, 1, 10), uint16] */
}

def @func_9254() -> (Tensor[(4, 6, ?), int64],) {
  @func_9252() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_12598() -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), float64]) {
  %29 = @func_11464() /* ty=(Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), int64]) */;
  %30 = @func_8879() /* ty=(Tensor[(4, 6, ?), float64],) */;
  %31 = @func_7071() /* ty=Tensor[(4, 6, ?), int64] */;
  %32 = %29.0;
  %33 = %30.0;
  (%31, %32, %33)
}

def @func_9198() -> (Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16]) {
  %34 = @func_7492() /* ty=(Tensor[(72, 4), uint16],) */;
  %35 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  %36 = %34.0;
  (%35, %36)
}

def @func_10911() -> (Tensor[(4, 6, ?), int64],) {
  %38 = fn () -> (Tensor[(4, 6, ?), int64],) {
    %37 = @func_9692() /* ty=Tensor[(4, 6, ?), int64] */;
    (%37,)
  };
  %38() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_12951() -> (Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16]) {
  %43 = fn () -> (Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16]) {
    %39 = @func_12126() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %40 = @func_9198() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16]) */;
    %41 = %39.0;
    %42 = %40.1;
    (%41, %42)
  };
  %43() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16]) */
}

def @func_14446() -> (Tensor[(10), float32], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  %44 = @func_9226() /* ty=(Tensor[(10), float32],) */;
  %45 = @func_8460() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %46 = %44.0;
  %47 = %45.0;
  %48 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  %49 = @func_12525() /* ty=Tensor[(4, 6, ?), int64] */;
  (%46, %47, %48, %49)
}

def @func_8151(%var_8150: uint8) -> (Tensor[(4, 6, ?), int64], Tensor[(9, 16, 2), bool], Tensor[(288), uint16], Tensor[(4, 6, ?), int64], uint8, Tensor[(140), bool], uint8, Tensor[(4, 6, ?), int64]) {
  %68 = fn (%var_8130: uint8) -> (Tensor[(4, 6, ?), int64], Tensor[(9, 16, 2), bool], Tensor[(288), uint16], Tensor[(4, 6, ?), int64], uint8, Tensor[(140), bool], uint8, Tensor[(4, 6, ?), int64]) {
    %50 = @func_7898() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %51 = cast(meta[relay.Constant][2] /* ty=Tensor[(288), uint16] */, dtype="uint16") /* ty=Tensor[(288), uint16] */;
    %52 = cast(meta[relay.Constant][2] /* ty=Tensor[(288), uint16] */, dtype="uint16") /* ty=Tensor[(288), uint16] */;
    %53 = reshape(%51, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
    %54 = reshape(%52, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
    %55 = cast(meta[relay.Constant][3] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
    %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
    %57 = cast(%var_8130, dtype="uint8") /* ty=uint8 */;
    %58 = reshape(%55, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), bool] */;
    %59 = reshape(%56, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), bool] */;
    %60 = reshape(%57, newshape=[]) /* ty=uint8 */;
    %61 = @func_1525(%58, %59, %60) /* ty=(Tensor[(5, 14, 2), float32], Tensor[(12, 7, 6), bool], uint8) */;
    %62 = @func_7366() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %63 = %50.0;
    %64 = @func_609(%53, %54) /* ty=Tensor[(9, 16, 2), bool] */;
    %65 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
    %66 = %61.2;
    %67 = %62.0;
    (%63, %64, meta[relay.Constant][2] /* ty=Tensor[(288), uint16] */, %65, %66, meta[relay.Constant][3] /* ty=Tensor[(140), bool] */, %var_8130, %67)
  };
  %68(%var_8150) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(9, 16, 2), bool], Tensor[(288), uint16], Tensor[(4, 6, ?), int64], uint8, Tensor[(140), bool], uint8, Tensor[(4, 6, ?), int64]) */
}

def @func_11614(%var_11612: Tensor[(432), float32]) -> (uint8, bool, Tensor[(12, 2, 4), float32], Tensor[(96), float32], Tensor[(432), float32]) {
  @func_11611(%var_11612) /* ty=(uint8, bool, Tensor[(12, 2, 4), float32], Tensor[(96), float32], Tensor[(432), float32]) */
}

def @func_16077() -> (Tensor[(4, 6, ?), float64],) {
  @func_16075() /* ty=(Tensor[(4, 6, ?), float64],) */
}

def @func_16110() -> (Tensor[(4, 6, ?), int64],) {
  @func_16108() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_11466() -> (Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), int64]) {
  @func_11464() /* ty=(Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), int64]) */
}

def @func_15063() -> Tensor[(10), float32] {
  %69 = @func_7600() /* ty=(Tensor[(10), float32], Tensor[(4, 6, 16), float64], Tensor[(4, 6, 16), float32], Tensor[(72, 4), uint16]) */;
  %69.0
}

def @func_7724(%var_7722: uint8) -> (Tensor[(13, 2, 1), float32], Tensor[(66, 2), uint64], Tensor[(12, 7, 6), bool], uint8) {
  %70 = @func_7045() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(12, 7, 6), bool], uint8, Tensor[(5, 14, 2), float32], Tensor[(5, 28), bool], Tensor[(13, 2, 1), float32], Tensor[(26, 1), float32]) */;
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(66, 2), int64] */, dtype="int64") /* ty=Tensor[(66, 2), int64] */;
  %72 = reshape(%71, newshape=[132]) /* ty=Tensor[(132), int64] */;
  %73 = @func_6842(%72) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(6, 11, 2), int64], Tensor[(132), int64]) */;
  %74 = %73.1;
  %75 = cast(%74, dtype="uint64") /* ty=Tensor[(6, 11, 2), uint64] */;
  %76 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(66, 2), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %77 = cast(meta[relay.Constant][4] /* ty=Tensor[(66, 2), int64] */, dtype="uint64") /* ty=Tensor[(66, 2), uint64] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %79 = cast(%var_7722, dtype="uint8") /* ty=uint8 */;
  %80 = reshape(%79, newshape=[]) /* ty=uint8 */;
  %81 = @func_569(%80) /* ty=(Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) */;
  %82 = %70.5;
  %83 = maximum(%77, %78) /* ty=Tensor[(66, 2), uint64] */;
  %84 = %81.0;
  (%82, %83, %84, %var_7722)
}

def @func_9252() -> (Tensor[(4, 6, ?), int64],) {
  %85 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %86 = %85.0;
  (%86,)
}

def @func_8784(%var_8782: uint8, %var_8783: Tensor[(140), uint16]) -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], uint8, Tensor[(14, 1, 10), uint16], Tensor[(140), uint16]) {
  @func_8780(%var_8782, %var_8783) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], uint8, Tensor[(14, 1, 10), uint16], Tensor[(140), uint16]) */
}

def @func_14159() -> (Tensor[(140), uint16],) {
  %89 = fn () -> (Tensor[(140), uint16],) {
    %87 = @func_11825() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(140), uint16]) */;
    %88 = %87.2;
    (%88,)
  };
  %89() /* ty=(Tensor[(140), uint16],) */
}

def @func_15543() -> Tensor[(4, 6, ?), int64] {
  @func_15541() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_13989(%var_13985: Tensor[(36, 12), float32], %var_13986: Tensor[(4, 6, 7), float32], %var_13987: Tensor[(36, 12), float32], %var_13988: Tensor[(36, 12), float32]) -> (Tensor[(144, 2), uint16], Tensor[(4, 6, 7), uint32], Tensor[(4, 6, ?), int64], Tensor[(36, 12), int32]) {
  @func_13983(%var_13985, %var_13986, %var_13987, %var_13988) /* ty=(Tensor[(144, 2), uint16], Tensor[(4, 6, 7), uint32], Tensor[(4, 6, ?), int64], Tensor[(36, 12), int32]) */
}

def @func_11611(%var_11607: Tensor[(432), float32]) -> (uint8, bool, Tensor[(12, 2, 4), float32], Tensor[(96), float32], Tensor[(432), float32]) {
  %90 = @func_11081() /* ty=(uint8, Tensor[(5, 14, 2), float32]) */;
  %91 = %90.0;
  %92 = cast(%91, dtype="bool") /* ty=bool */;
  %93 = reshape(%92, newshape=[]) /* ty=bool */;
  %94 = @func_9337(%93) /* ty=(Tensor[(4, 6, ?), float64], Tensor[(10), float32], bool) */;
  %95 = cast(meta[relay.Constant][5] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %96 = cast(%var_11607, dtype="float32") /* ty=Tensor[(432), float32] */;
  %97 = reshape(%95, newshape=[12, 2, 4]) /* ty=Tensor[(12, 2, 4), float32] */;
  %98 = reshape(%96, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %99 = @func_11243(%97, %98) /* ty=(Tensor[(12, 2, 4), bool], Tensor[(12, 2, 4), float32], Tensor[(9, 8, 6), bool], float32, Tensor[(432), float32], Tensor[(4, 6, ?), int64]) */;
  %100 = %94.2;
  %101 = %99.1;
  (%91, %100, %101, meta[relay.Constant][5] /* ty=Tensor[(96), float32] */, %var_11607)
}

def @func_4152(%var_4150: Tensor[(10, 1, 1), float32], %var_4151: Tensor[(10, 2, 144), int16]) -> (int32, Tensor[(288), uint16], Tensor[(9, 16, 2), bool], Tensor[(10, 2, 144), float32], Tensor[(10, 2, 144), float64]) {
  %131 = fn (%var_4086: Tensor[(10, 1, 1), float32], %var_4139: Tensor[(10, 2, 144), int16]) -> (int32, Tensor[(288), uint16], Tensor[(9, 16, 2), bool], Tensor[(10, 2, 144), float32], Tensor[(10, 2, 144), float64]) {
    %102 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %103 = cast(meta[relay.Constant][6] /* ty=Tensor[(288), uint16] */, dtype="uint16") /* ty=Tensor[(288), uint16] */;
    %104 = reshape(%102, newshape=[]) /* ty=int32 */;
    %105 = reshape(%103, newshape=[2, 144]) /* ty=Tensor[(2, 144), uint16] */;
    %106 = @func_3012(%104, %105) /* ty=(Tensor[(10, 15, 3), float32], Tensor[(12, 7, 6), float64], Tensor[(9, 16, 2), bool], Tensor[(2, 144), uint16]) */;
    %107 = %106.3;
    %108 = cast(%107, dtype="uint16") /* ty=Tensor[(2, 144), uint16] */;
    %109 = cast(%107, dtype="uint16") /* ty=Tensor[(2, 144), uint16] */;
    %110 = reshape(%108, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
    %111 = reshape(%109, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
    %112 = cast(%var_4086, dtype="float32") /* ty=Tensor[(10, 1, 1), float32] */;
    %113 = atanh(%112) /* ty=Tensor[(10, 1, 1), float32] */;
    %114 = cast(%107, dtype="int16") /* ty=Tensor[(2, 144), int16] */;
    %115 = cast(%113, dtype="int16") /* ty=Tensor[(10, 1, 1), int16] */;
    %116 = right_shift(%114, %115) /* ty=Tensor[(10, 2, 144), int16] */;
    %117 = cast(%116, dtype="int8") /* ty=Tensor[(10, 2, 144), int8] */;
    %118 = cast(%var_4086, dtype="int8") /* ty=Tensor[(10, 1, 1), int8] */;
    %119 = left_shift(%117, %118) /* ty=Tensor[(10, 2, 144), int8] */;
    %120 = cast(%119, dtype="float32") /* ty=Tensor[(10, 2, 144), float32] */;
    %121 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
    %122 = cast(%116, dtype="float32") /* ty=Tensor[(10, 2, 144), float32] */;
    %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %124 = cast(%var_4139, dtype="float64") /* ty=Tensor[(10, 2, 144), float64] */;
    %125 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
    %126 = cast(%116, dtype="float64") /* ty=Tensor[(10, 2, 144), float64] */;
    %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %128 = @func_609(%110, %111) /* ty=Tensor[(9, 16, 2), bool] */;
    %129 = floor_mod(%122, %123) /* ty=Tensor[(10, 2, 144), float32] */;
    %130 = divide(%126, %127) /* ty=Tensor[(10, 2, 144), float64] */;
    (-2 /* ty=int32 */, meta[relay.Constant][6] /* ty=Tensor[(288), uint16] */, %128, %129, %130)
  };
  %131(%var_4150, %var_4151) /* ty=(int32, Tensor[(288), uint16], Tensor[(9, 16, 2), bool], Tensor[(10, 2, 144), float32], Tensor[(10, 2, 144), float64]) */
}

def @func_12854() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  @func_12852() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) */
}

def @func_8461() -> (Tensor[(4, 6, ?), int64],) {
  %133 = fn () -> (Tensor[(4, 6, ?), int64],) {
    %132 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
    (%132,)
  };
  %133() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_14356() -> Tensor[(4, 6, ?), int64] {
  %135 = fn () -> Tensor[(4, 6, ?), int64] {
    %134 = @func_7523() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64]) */;
    %134.1
  };
  %135() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_7744() -> (Tensor[(4, 6, ?), int64],) {
  %136 = @func_7366() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %137 = %136.0;
  (%137,)
}

def @func_8881() -> (Tensor[(4, 6, ?), float64],) {
  @func_8879() /* ty=(Tensor[(4, 6, ?), float64],) */
}

def @func_15856() -> Tensor[(4, 6, ?), int64] {
  @func_15854() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_9829(%var_9818: Tensor[(4, 6, 11), int64]) -> (Tensor[(4, 6, 11), bool], Tensor[(4, 6, 11), float64]) {
  %138 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  %139 = cast(%138, dtype="bool") /* ty=Tensor[(4, 6, ?), bool] */;
  %140 = cast(%var_9818, dtype="bool") /* ty=Tensor[(4, 6, 11), bool] */;
  %141 = cast(%var_9818, dtype="float64") /* ty=Tensor[(4, 6, 11), float64] */;
  %142 = less(%139, %140) /* ty=Tensor[(4, 6, 11), bool] */;
  %143 = asin(%141) /* ty=Tensor[(4, 6, 11), float64] */;
  (%142, %143)
}

def @func_9137(%var_9136: Tensor[(72, 4), uint16]) -> (Tensor[(72, 4), uint32],) {
  %151 = fn (%var_9128: Tensor[(72, 4), uint16]) -> (Tensor[(72, 4), uint32],) {
    %144 = @func_7492() /* ty=(Tensor[(72, 4), uint16],) */;
    %145 = %144.0;
    %146 = cast(%var_9128, dtype="uint32") /* ty=Tensor[(72, 4), uint32] */;
    %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(2), int32] */;
    %148 = cast(%145, dtype="uint32") /* ty=Tensor[(72, 4), uint32] */;
    %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %150 = add(%148, %149) /* ty=Tensor[(72, 4), uint32] */;
    (%150,)
  };
  %151(%var_9136) /* ty=(Tensor[(72, 4), uint32],) */
}

def @func_9767(%var_9766: uint16) -> Tensor[(13, 12, 1), uint16] {
  %154 = fn (%var_9757: uint16) -> Tensor[(13, 12, 1), uint16] {
    %152 = cast(%var_9757, dtype="uint16") /* ty=uint16 */;
    %153 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 12, 1), uint16] */, dtype="uint16") /* ty=Tensor[(13, 12, 1), uint16] */;
    bitwise_and(%152, %153) /* ty=Tensor[(13, 12, 1), uint16] */
  };
  %154(%var_9766) /* ty=Tensor[(13, 12, 1), uint16] */
}

def @func_11294() -> Tensor[(6, 11, 16), float64] {
  %156 = fn () -> Tensor[(6, 11, 16), float64] {
    %155 = @func_10543() /* ty=(Tensor[(6, 11, 16), float64],) */;
    %155.0
  };
  %156() /* ty=Tensor[(6, 11, 16), float64] */
}

def @func_9692() -> Tensor[(4, 6, ?), int64] {
  %157 = @func_9066() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float64]) */;
  %157.1
}

def @func_10321(%var_10319: Tensor[(5, 2), float32], %var_10320: Tensor[(28, 2), float64]) -> (Tensor[(4, 6, ?), float64], Tensor[(5, 2), float32], Tensor[(28, 2), uint16]) {
  %176 = fn (%var_10298: Tensor[(5, 2), float32], %var_10303: Tensor[(28, 2), float64]) -> (Tensor[(4, 6, ?), float64], Tensor[(5, 2), float32], Tensor[(28, 2), uint16]) {
    %158 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %159 = %158.0;
    %160 = cast(%159, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
    %161 = cast(%var_10298, dtype="float32") /* ty=Tensor[(5, 2), float32] */;
    %162 = reshape(%161, newshape=[10, 1]) /* ty=Tensor[(10, 1), float32] */;
    %163 = @func_9923(%162) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(2880), int16], Tensor[(28, 2), float64], Tensor[(10, 1), float32], Tensor[(4, 6, ?), float64], Tensor[(104), float32], Tensor[(10, 2, 144), float64]) */;
    %164 = %163.2;
    %165 = cast(%var_10303, dtype="bool") /* ty=Tensor[(28, 2), bool] */;
    %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(2), int32] */;
    %167 = cast(%164, dtype="bool") /* ty=Tensor[(28, 2), bool] */;
    %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %169 = less_equal(%167, %168) /* ty=Tensor[(28, 2), bool] */;
    %170 = cast(%164, dtype="uint16") /* ty=Tensor[(28, 2), uint16] */;
    %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(2), int32] */;
    %172 = cast(%169, dtype="uint16") /* ty=Tensor[(28, 2), uint16] */;
    %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %174 = sinh(%160) /* ty=Tensor[(4, 6, ?), float64] */;
    %175 = bitwise_xor(%172, %173) /* ty=Tensor[(28, 2), uint16] */;
    (%174, %var_10298, %175)
  };
  %176(%var_10319, %var_10320) /* ty=(Tensor[(4, 6, ?), float64], Tensor[(5, 2), float32], Tensor[(28, 2), uint16]) */
}

def @func_11647(%var_11646: uint16) -> (Tensor[(5, 14, 2), float32], Tensor[(14, 1, 10), uint16], uint16) {
  %186 = fn (%var_11639: uint16) -> (Tensor[(5, 14, 2), float32], Tensor[(14, 1, 10), uint16], uint16) {
    %177 = @func_11081() /* ty=(uint8, Tensor[(5, 14, 2), float32]) */;
    %178 = %177.1;
    %179 = cast(%178, dtype="float32") /* ty=Tensor[(5, 14, 2), float32] */;
    %180 = cast(%var_11639, dtype="uint16") /* ty=uint16 */;
    %181 = sigmoid(%179) /* ty=Tensor[(5, 14, 2), float32] */;
    %182 = cast(%181, dtype="uint16") /* ty=Tensor[(5, 14, 2), uint16] */;
    %183 = reshape(%180, newshape=[]) /* ty=uint16 */;
    %184 = reshape(%182, newshape=[14, 1, 10]) /* ty=Tensor[(14, 1, 10), uint16] */;
    %185 = @func_3688(%183, %184) /* ty=Tensor[(14, 1, 10), uint16] */;
    (%181, %185, %var_11639)
  };
  %186(%var_11646) /* ty=(Tensor[(5, 14, 2), float32], Tensor[(14, 1, 10), uint16], uint16) */
}

def @func_14757() -> (Tensor[(4, 6, ?), int64],) {
  @func_14755() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_9226() -> (Tensor[(10), float32],) {
  %187 = @func_8911() /* ty=(Tensor[(10), float32],) */;
  %188 = %187.0;
  (%188,)
}

def @func_10871(%var_10749: Tensor[(432), float32], %var_10769: uint8, %var_10807: Tensor[(288, 1), uint16], %var_10824: Tensor[(13, 11, 13), uint8]) -> (Tensor[(6, 11, 16), float64], Tensor[(4, 6, ?), int64], Tensor[(9, 8, 6), bool], Tensor[(432), float32], Tensor[(4, 6, ?), float32], Tensor[(72, 4), uint32], Tensor[(288, 1), uint16], Tensor[(4, 6, ?), int64], Tensor[(13, 11, 13), uint64], Tensor[(10), float32], Tensor[(66, 2), float32], Tensor[(72, 4), uint16], Tensor[(13, 12, 1), uint16]) {
  %189 = cast(%var_10749, dtype="float32") /* ty=Tensor[(432), float32] */;
  %190 = reshape(%189, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %191 = @func_8953(%190) /* ty=(Tensor[(72, 4), uint16], Tensor[(9, 8, 6), bool], float32, Tensor[(432), float32]) */;
  %192 = @func_9692() /* ty=Tensor[(4, 6, ?), int64] */;
  %193 = cast(%192, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
  %194 = erf(%193) /* ty=Tensor[(4, 6, ?), float64] */;
  %195 = cast(%194, dtype="float32") /* ty=Tensor[(4, 6, ?), float32] */;
  %196 = cast(%var_10769, dtype="float32") /* ty=float32 */;
  %197 = cast(%var_10807, dtype="uint16") /* ty=Tensor[(288, 1), uint16] */;
  %198 = reshape(%197, newshape=[72, 4]) /* ty=Tensor[(72, 4), uint16] */;
  %199 = @func_9135(%198) /* ty=(Tensor[(72, 4), uint32],) */;
  %200 = cast(%var_10769, dtype="uint64") /* ty=uint64 */;
  %201 = cast(%var_10824, dtype="uint64") /* ty=Tensor[(13, 11, 13), uint64] */;
  %202 = %191.1;
  %203 = cast(%202, dtype="float32") /* ty=Tensor[(9, 8, 6), float32] */;
  %204 = reshape(%203, newshape=[36, 12]) /* ty=Tensor[(36, 12), float32] */;
  %205 = @func_10207(%204) /* ty=(Tensor[(10), float32], Tensor[(144, 2), uint16], Tensor[(288), uint16], Tensor[(36, 12), float32]) */;
  %206 = cast(%var_10769, dtype="uint8") /* ty=uint8 */;
  %207 = reshape(%206, newshape=[]) /* ty=uint8 */;
  %208 = @func_7724(%207) /* ty=(Tensor[(13, 2, 1), float32], Tensor[(66, 2), uint64], Tensor[(12, 7, 6), bool], uint8) */;
  %209 = %208.1;
  %210 = cast(%209, dtype="float32") /* ty=Tensor[(66, 2), float32] */;
  %211 = cast(%var_10769, dtype="int32") /* ty=int32 */;
  %212 = reshape(%211, newshape=[]) /* ty=int32 */;
  %213 = @func_8162(%212) /* ty=(Tensor[(72, 4), uint16], Tensor[(12, 7, 6), float64], int32) */;
  %214 = cast(%var_10769, dtype="uint16") /* ty=uint16 */;
  %215 = reshape(%214, newshape=[]) /* ty=uint16 */;
  %216 = @func_8186() /* ty=Tensor[(6, 11, 16), float64] */;
  %217 = @func_7152() /* ty=Tensor[(4, 6, ?), int64] */;
  %218 = mod(%195, %196) /* ty=Tensor[(4, 6, ?), float32] */;
  %219 = %199.0;
  %220 = @func_7152() /* ty=Tensor[(4, 6, ?), int64] */;
  %221 = bitwise_xor(%200, %201) /* ty=Tensor[(13, 11, 13), uint64] */;
  %222 = %205.0;
  %223 = log10(%210) /* ty=Tensor[(66, 2), float32] */;
  %224 = %213.0;
  %225 = @func_9765(%215) /* ty=Tensor[(13, 12, 1), uint16] */;
  (%216, %217, %202, %var_10749, %218, %219, %var_10807, %220, %221, %222, %223, %224, %225)
}

def @func_5087(%var_5086: Tensor[(13, 2, 1), float32]) -> Tensor[(13, 2, 1), float32] {
  %227 = fn (%var_5081: Tensor[(13, 2, 1), float32]) -> Tensor[(13, 2, 1), float32] {
    %226 = cast(%var_5081, dtype="float32") /* ty=Tensor[(13, 2, 1), float32] */;
    sqrt(%226) /* ty=Tensor[(13, 2, 1), float32] */
  };
  %227(%var_5086) /* ty=Tensor[(13, 2, 1), float32] */
}

def @func_16108() -> (Tensor[(4, 6, ?), int64],) {
  %228 = @func_14330() /* ty=Tensor[(4, 6, ?), int64] */;
  (%228,)
}

def @func_12983(%var_12982: uint8) -> (Tensor[(5, 14, 2), float32], Tensor[(26), float32], uint8, Tensor[(10), float32]) {
  %236 = fn (%var_12965: uint8) -> (Tensor[(5, 14, 2), float32], Tensor[(26), float32], uint8, Tensor[(10), float32]) {
    %229 = cast(%var_12965, dtype="uint8") /* ty=uint8 */;
    %230 = reshape(%229, newshape=[]) /* ty=uint8 */;
    %231 = @func_8636(%230) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(13, 2, 1), float32], Tensor[(26), float32], Tensor[(5, 14, 2), float32], Tensor[(140), bool], uint8) */;
    %232 = @func_9226() /* ty=(Tensor[(10), float32],) */;
    %233 = @func_9444() /* ty=Tensor[(5, 14, 2), float32] */;
    %234 = %231.2;
    %235 = %232.0;
    (%233, %234, %var_12965, %235)
  };
  %236(%var_12982) /* ty=(Tensor[(5, 14, 2), float32], Tensor[(26), float32], uint8, Tensor[(10), float32]) */
}

def @func_14210() -> (Tensor[(4, 6, ?), int64],) {
  @func_14208() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_7367() -> (Tensor[(4, 6, ?), int64],) {
  %239 = fn () -> (Tensor[(4, 6, ?), int64],) {
    %237 = @func_7253() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) */;
    %238 = %237.0;
    (%238,)
  };
  %239() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_13778() -> (Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float32], Tensor[(6, 11, 16), int16], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  %255 = fn () -> (Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float32], Tensor[(6, 11, 16), int16], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
    %240 = @func_11825() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(140), uint16]) */;
    %241 = @func_11858() /* ty=(Tensor[(6, 11, 16), float64],) */;
    %242 = %241.0;
    %243 = cast(%242, dtype="float64") /* ty=Tensor[(6, 11, 16), float64] */;
    %244 = log(%243) /* ty=Tensor[(6, 11, 16), float64] */;
    %245 = cast(%244, dtype="float32") /* ty=Tensor[(6, 11, 16), float32] */;
    %246 = cast(%242, dtype="int16") /* ty=Tensor[(6, 11, 16), int16] */;
    %247 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
    %248 = cast(%244, dtype="int16") /* ty=Tensor[(6, 11, 16), int16] */;
    %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %250 = %240.0;
    %251 = log2(%245) /* ty=Tensor[(6, 11, 16), float32] */;
    %252 = maximum(%248, %249) /* ty=Tensor[(6, 11, 16), int16] */;
    %253 = @func_7407() /* ty=Tensor[(4, 6, ?), int64] */;
    %254 = @func_10443() /* ty=Tensor[(4, 6, ?), int64] */;
    (%250, %251, %252, %253, %254)
  };
  %255() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float32], Tensor[(6, 11, 16), int16], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) */
}

def @func_15142(%var_15141: Tensor[(432), float32]) -> (Tensor[(10), float32], uint8, Tensor[(432), float32]) {
  %262 = fn (%var_15137: Tensor[(432), float32]) -> (Tensor[(10), float32], uint8, Tensor[(432), float32]) {
    %256 = @func_9226() /* ty=(Tensor[(10), float32],) */;
    %257 = cast(%var_15137, dtype="float32") /* ty=Tensor[(432), float32] */;
    %258 = reshape(%257, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %259 = @func_11611(%258) /* ty=(uint8, bool, Tensor[(12, 2, 4), float32], Tensor[(96), float32], Tensor[(432), float32]) */;
    %260 = %256.0;
    %261 = %259.0;
    (%260, %261, %var_15137)
  };
  %262(%var_15141) /* ty=(Tensor[(10), float32], uint8, Tensor[(432), float32]) */
}

def @func_15242(%var_15240: Tensor[(288), uint16], %var_15241: Tensor[(78), float32]) -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), uint64], Tensor[(4, 6, 78), float32], Tensor[(140), float32], Tensor[(288), uint16], Tensor[(78), float32]) {
  %287 = fn (%var_15233: Tensor[(288), uint16], %var_15234: Tensor[(78), float32]) -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), uint64], Tensor[(4, 6, 78), float32], Tensor[(140), float32], Tensor[(288), uint16], Tensor[(78), float32]) {
    %263 = @func_12598() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), float64]) */;
    %264 = @func_12598() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), float64]) */;
    %265 = %264.0;
    %266 = @func_11970() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %267 = %266.0;
    %268 = cast(%267, dtype="bool") /* ty=Tensor[(4, 6, ?), bool] */;
    %269 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
    %270 = cast(%265, dtype="bool") /* ty=Tensor[(4, 6, ?), bool] */;
    %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %272 = not_equal(%270, %271) /* ty=Tensor[(4, 6, ?), bool] */;
    %273 = cast(%265, dtype="uint64") /* ty=Tensor[(4, 6, ?), uint64] */;
    %274 = shape_of(%272, dtype="int32") /* ty=Tensor[(3), int32] */;
    %275 = cast(%272, dtype="uint64") /* ty=Tensor[(4, 6, ?), uint64] */;
    %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %277 = cast(meta[relay.Constant][8] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
    %278 = cast(%var_15233, dtype="uint16") /* ty=Tensor[(288), uint16] */;
    %279 = cast(%var_15234, dtype="float32") /* ty=Tensor[(78), float32] */;
    %280 = reshape(%277, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), float32] */;
    %281 = reshape(%278, newshape=[288]) /* ty=Tensor[(288), uint16] */;
    %282 = reshape(%279, newshape=[1, 78]) /* ty=Tensor[(1, 78), float32] */;
    %283 = @func_8593(%280, %281, %282) /* ty=(Tensor[(5, 14, 2), int64], Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(288), uint16], Tensor[(14, 1, 10), uint16], Tensor[(4, 6, 78), float32]) */;
    %284 = %263.0;
    %285 = logical_xor(%275, %276) /* ty=Tensor[(4, 6, ?), uint64] */;
    %286 = %283.5;
    (%284, %285, %286, meta[relay.Constant][8] /* ty=Tensor[(140), float32] */, %var_15233, %var_15234)
  };
  %287(%var_15240, %var_15241) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), uint64], Tensor[(4, 6, 78), float32], Tensor[(140), float32], Tensor[(288), uint16], Tensor[(78), float32]) */
}

def @func_15981(%var_15980: Tensor[(196), bool]) -> (Tensor[(4, 6, ?), int64], Tensor[(10), float32], Tensor[(196), bool], Tensor[(4, 6, ?), int64]) {
  %296 = fn (%var_15969: Tensor[(196), bool]) -> (Tensor[(4, 6, ?), int64], Tensor[(10), float32], Tensor[(196), bool], Tensor[(4, 6, ?), int64]) {
    %288 = @func_12126() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %289 = cast(%var_15969, dtype="bool") /* ty=Tensor[(196), bool] */;
    %290 = reshape(%289, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), bool] */;
    %291 = @func_12622(%290) /* ty=(Tensor[(2, 14, 7), bool], Tensor[(10), float32]) */;
    %292 = @func_12172() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) */;
    %293 = %288.0;
    %294 = %291.1;
    %295 = %292.1;
    (%293, %294, %var_15969, %295)
  };
  %296(%var_15980) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(10), float32], Tensor[(196), bool], Tensor[(4, 6, ?), int64]) */
}

def @func_6085(%var_6083: Tensor[(15, 11, 9), float64], %var_6084: Tensor[(10), float32]) -> (Tensor[(15, 11, 9), float64], Tensor[(9, 16, 2), bool], Tensor[(10), float32], Tensor[(2880), int16]) {
  %305 = fn (%var_6073: Tensor[(15, 11, 9), float64], %var_6077: Tensor[(10), float32]) -> (Tensor[(15, 11, 9), float64], Tensor[(9, 16, 2), bool], Tensor[(10), float32], Tensor[(2880), int16]) {
    %297 = cast(%var_6073, dtype="float64") /* ty=Tensor[(15, 11, 9), float64] */;
    %298 = cast(%var_6077, dtype="float32") /* ty=Tensor[(10), float32] */;
    %299 = cast(meta[relay.Constant][9] /* ty=Tensor[(2880), int16] */, dtype="int16") /* ty=Tensor[(2880), int16] */;
    %300 = reshape(%298, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float32] */;
    %301 = reshape(%299, newshape=[10, 2, 144]) /* ty=Tensor[(10, 2, 144), int16] */;
    %302 = @func_4149(%300, %301) /* ty=(int32, Tensor[(288), uint16], Tensor[(9, 16, 2), bool], Tensor[(10, 2, 144), float32], Tensor[(10, 2, 144), float64]) */;
    %303 = sqrt(%297) /* ty=Tensor[(15, 11, 9), float64] */;
    %304 = %302.2;
    (%303, %304, %var_6077, meta[relay.Constant][9] /* ty=Tensor[(2880), int16] */)
  };
  %305(%var_6083, %var_6084) /* ty=(Tensor[(15, 11, 9), float64], Tensor[(9, 16, 2), bool], Tensor[(10), float32], Tensor[(2880), int16]) */
}

def @func_14822() -> (Tensor[(4, 6, ?), int64],) {
  %307 = fn () -> (Tensor[(4, 6, ?), int64],) {
    %306 = @func_11868() /* ty=Tensor[(4, 6, ?), int64] */;
    (%306,)
  };
  %307() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_8332(%var_8295: uint8) -> (Tensor[(4, 6, ?), float32], Tensor[(66, 2), uint64], uint8, Tensor[(4, 6, ?), int64], Tensor[(2880), int16], Tensor[(1, 1485), float64], Tensor[(10), float32]) {
  %308 = @func_7071() /* ty=Tensor[(4, 6, ?), int64] */;
  %309 = cast(%308, dtype="float32") /* ty=Tensor[(4, 6, ?), float32] */;
  %310 = cast(%var_8295, dtype="uint8") /* ty=uint8 */;
  %311 = reshape(%310, newshape=[]) /* ty=uint8 */;
  %312 = @func_7724(%311) /* ty=(Tensor[(13, 2, 1), float32], Tensor[(66, 2), uint64], Tensor[(12, 7, 6), bool], uint8) */;
  %313 = @func_7396() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %314 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 1485), float64] */, dtype="float64") /* ty=Tensor[(1, 1485), float64] */;
  %315 = cast(meta[relay.Constant][11] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
  %316 = reshape(%314, newshape=[15, 11, 9]) /* ty=Tensor[(15, 11, 9), float64] */;
  %317 = reshape(%315, newshape=[10]) /* ty=Tensor[(10), float32] */;
  %318 = @func_6082(%316, %317) /* ty=(Tensor[(15, 11, 9), float64], Tensor[(9, 16, 2), bool], Tensor[(10), float32], Tensor[(2880), int16]) */;
  %319 = asin(%309) /* ty=Tensor[(4, 6, ?), float32] */;
  %320 = %312.1;
  %321 = %313.0;
  %322 = %318.3;
  (%319, %320, %var_8295, %321, %322, meta[relay.Constant][10] /* ty=Tensor[(1, 1485), float64] */, meta[relay.Constant][11] /* ty=Tensor[(10), float32] */)
}

def @func_7601() -> (Tensor[(10), float32], Tensor[(4, 6, 16), float64], Tensor[(4, 6, 16), float32], Tensor[(72, 4), uint16]) {
  %336 = fn () -> (Tensor[(10), float32], Tensor[(4, 6, 16), float64], Tensor[(4, 6, 16), float32], Tensor[(72, 4), uint16]) {
    %323 = @func_7253() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) */;
    %324 = @func_7152() /* ty=Tensor[(4, 6, ?), int64] */;
    %325 = cast(%324, dtype="float32") /* ty=Tensor[(4, 6, ?), float32] */;
    %326 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 6, 16), int64] */, dtype="float32") /* ty=Tensor[(4, 6, 16), float32] */;
    %327 = floor_mod(%325, %326) /* ty=Tensor[(4, 6, 16), float32] */;
    %328 = cast(%327, dtype="float64") /* ty=Tensor[(4, 6, 16), float64] */;
    %329 = cast(%324, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
    %330 = cast(%327, dtype="float32") /* ty=Tensor[(4, 6, 16), float32] */;
    %331 = @func_7523() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64]) */;
    %332 = %323.2;
    %333 = floor_divide(%328, %329) /* ty=Tensor[(4, 6, 16), float64] */;
    %334 = sigmoid(%330) /* ty=Tensor[(4, 6, 16), float32] */;
    %335 = %331.0;
    (%332, %333, %334, %335)
  };
  %336() /* ty=(Tensor[(10), float32], Tensor[(4, 6, 16), float64], Tensor[(4, 6, 16), float32], Tensor[(72, 4), uint16]) */
}

def @func_10717(%var_10715: Tensor[(11, 5, 2), float64]) -> (Tensor[(11, 5, 2), bool],) {
  @func_10714(%var_10715) /* ty=(Tensor[(11, 5, 2), bool],) */
}

def @func_15795() -> (Tensor[(6, 11, 16), float64], Tensor[(4, 6, ?), int64]) {
  %340 = fn () -> (Tensor[(6, 11, 16), float64], Tensor[(4, 6, ?), int64]) {
    %337 = @func_14387() /* ty=(Tensor[(6, 11, 16), float64],) */;
    %338 = %337.0;
    %339 = @func_10251() /* ty=Tensor[(4, 6, ?), int64] */;
    (%338, %339)
  };
  %340() /* ty=(Tensor[(6, 11, 16), float64], Tensor[(4, 6, ?), int64]) */
}

def @func_3015(%var_3013: int32, %var_3014: Tensor[(2, 144), uint16]) -> (Tensor[(10, 15, 3), float32], Tensor[(12, 7, 6), float64], Tensor[(9, 16, 2), bool], Tensor[(2, 144), uint16]) {
  %355 = fn (%var_2977: int32, %var_2999: Tensor[(2, 144), uint16]) -> (Tensor[(10, 15, 3), float32], Tensor[(12, 7, 6), float64], Tensor[(9, 16, 2), bool], Tensor[(2, 144), uint16]) {
    %341 = cast(%var_2977, dtype="int32") /* ty=int32 */;
    %342 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 15, 3), int32] */, dtype="int32") /* ty=Tensor[(10, 15, 3), int32] */;
    %343 = logical_xor(%341, %342) /* ty=Tensor[(10, 15, 3), int32] */;
    %344 = cast(%343, dtype="float32") /* ty=Tensor[(10, 15, 3), float32] */;
    %345 = cast(%var_2977, dtype="uint8") /* ty=uint8 */;
    %346 = reshape(%345, newshape=[]) /* ty=uint8 */;
    %347 = @func_569(%346) /* ty=(Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) */;
    %348 = cast(%var_2999, dtype="uint16") /* ty=Tensor[(2, 144), uint16] */;
    %349 = cast(%var_2999, dtype="uint16") /* ty=Tensor[(2, 144), uint16] */;
    %350 = reshape(%348, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
    %351 = reshape(%349, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
    %352 = erf(%344) /* ty=Tensor[(10, 15, 3), float32] */;
    %353 = %347.1;
    %354 = @func_609(%350, %351) /* ty=Tensor[(9, 16, 2), bool] */;
    (%352, %353, %354, %var_2999)
  };
  %355(%var_3013, %var_3014) /* ty=(Tensor[(10, 15, 3), float32], Tensor[(12, 7, 6), float64], Tensor[(9, 16, 2), bool], Tensor[(2, 144), uint16]) */
}

def @func_13666(%var_13664: Tensor[(4, 6, 4), int64], %var_13665: Tensor[(132), int64]) -> (Tensor[(4, 6, 4), float64], Tensor[(4, 6, 132), uint32]) {
  %371 = fn (%var_13631: Tensor[(4, 6, 4), int64], %var_13637: Tensor[(132), int64]) -> (Tensor[(4, 6, 4), float64], Tensor[(4, 6, 132), uint32]) {
    %356 = @func_11825() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(140), uint16]) */;
    %357 = %356.0;
    %358 = cast(%357, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
    %359 = cast(%var_13631, dtype="float64") /* ty=Tensor[(4, 6, 4), float64] */;
    %360 = cast(%var_13637, dtype="int64") /* ty=Tensor[(132), int64] */;
    %361 = reshape(%360, newshape=[132]) /* ty=Tensor[(132), int64] */;
    %362 = @func_6842(%361) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(6, 11, 2), int64], Tensor[(132), int64]) */;
    %363 = %362.2;
    %364 = cast(%357, dtype="uint64") /* ty=Tensor[(4, 6, ?), uint64] */;
    %365 = cast(%363, dtype="uint64") /* ty=Tensor[(132), uint64] */;
    %366 = bitwise_or(%364, %365) /* ty=Tensor[(4, 6, 132), uint64] */;
    %367 = cast(%var_13637, dtype="uint32") /* ty=Tensor[(132), uint32] */;
    %368 = cast(%366, dtype="uint32") /* ty=Tensor[(4, 6, 132), uint32] */;
    %369 = divide(%358, %359) /* ty=Tensor[(4, 6, 4), float64] */;
    %370 = left_shift(%367, %368) /* ty=Tensor[(4, 6, 132), uint32] */;
    (%369, %370)
  };
  %371(%var_13664, %var_13665) /* ty=(Tensor[(4, 6, 4), float64], Tensor[(4, 6, 132), uint32]) */
}

def @func_14388() -> (Tensor[(6, 11, 16), float64],) {
  %373 = fn () -> (Tensor[(6, 11, 16), float64],) {
    %372 = @func_11293() /* ty=Tensor[(6, 11, 16), float64] */;
    (%372,)
  };
  %373() /* ty=(Tensor[(6, 11, 16), float64],) */
}

def @func_16075() -> (Tensor[(4, 6, ?), float64],) {
  %374 = @func_10910() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %375 = %374.0;
  %376 = cast(%375, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
  %377 = log10(%376) /* ty=Tensor[(4, 6, ?), float64] */;
  (%377,)
}

def @func_15494() -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool], uint8) {
  @func_15492() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool], uint8) */
}

def @func_15887() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  @func_15885() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) */
}

def @func_9860(%var_9858: Tensor[(26, 4), float32]) -> (Tensor[(4, 6, ?), float64], Tensor[(26, 4), float64]) {
  @func_9857(%var_9858) /* ty=(Tensor[(4, 6, ?), float64], Tensor[(26, 4), float64]) */
}

def @func_11402(%var_11401: Tensor[(4, 6, 12), float32]) -> (Tensor[(6, 11, 2), int64], Tensor[(132), int64], Tensor[(4, 6, ?), float64], Tensor[(4, 6, 12), bool]) {
  %391 = fn (%var_11394: Tensor[(4, 6, 12), float32]) -> (Tensor[(6, 11, 2), int64], Tensor[(132), int64], Tensor[(4, 6, ?), float64], Tensor[(4, 6, 12), bool]) {
    %378 = cast(meta[relay.Constant][14] /* ty=Tensor[(132), int64] */, dtype="int64") /* ty=Tensor[(132), int64] */;
    %379 = reshape(%378, newshape=[132]) /* ty=Tensor[(132), int64] */;
    %380 = @func_6842(%379) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(6, 11, 2), int64], Tensor[(132), int64]) */;
    %381 = @func_8879() /* ty=(Tensor[(4, 6, ?), float64],) */;
    %382 = @func_9252() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %383 = %382.0;
    %384 = cast(%383, dtype="float32") /* ty=Tensor[(4, 6, ?), float32] */;
    %385 = exp(%384) /* ty=Tensor[(4, 6, ?), float32] */;
    %386 = cast(%385, dtype="bool") /* ty=Tensor[(4, 6, ?), bool] */;
    %387 = cast(%var_11394, dtype="bool") /* ty=Tensor[(4, 6, 12), bool] */;
    %388 = %380.1;
    %389 = %381.0;
    %390 = less(%386, %387) /* ty=Tensor[(4, 6, 12), bool] */;
    (%388, meta[relay.Constant][14] /* ty=Tensor[(132), int64] */, %389, %390)
  };
  %391(%var_11401) /* ty=(Tensor[(6, 11, 2), int64], Tensor[(132), int64], Tensor[(4, 6, ?), float64], Tensor[(4, 6, 12), bool]) */
}

def @func_13590() -> (Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float64]) {
  %396 = fn () -> (Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float64]) {
    %392 = @func_11276() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %393 = @func_10543() /* ty=(Tensor[(6, 11, 16), float64],) */;
    %394 = %392.0;
    %395 = %393.0;
    (%394, %395)
  };
  %396() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float64]) */
}

def @func_12172() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  %397 = @func_7253() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) */;
  %398 = @func_11868() /* ty=Tensor[(4, 6, ?), int64] */;
  %399 = %397.0;
  (%398, %399)
}

def @func_15806() -> (Tensor[(4, 6, ?), int64],) {
  %402 = fn () -> (Tensor[(4, 6, ?), int64],) {
    %400 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %401 = %400.0;
    (%401,)
  };
  %402() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_11713() -> (Tensor[(10), float32], Tensor[(4, 6, ?), int64]) {
  @func_11711() /* ty=(Tensor[(10), float32], Tensor[(4, 6, ?), int64]) */
}

def @func_14657() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float32]) {
  %409 = fn () -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float32]) {
    %403 = @func_13072() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %404 = @func_12598() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), float64]) */;
    %405 = %404.2;
    %406 = cast(%405, dtype="float32") /* ty=Tensor[(4, 6, ?), float32] */;
    %407 = %403.0;
    %408 = atan(%406) /* ty=Tensor[(4, 6, ?), float32] */;
    (%407, %408)
  };
  %409() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float32]) */
}

def @func_7153() -> Tensor[(4, 6, ?), int64] {
  %410 = fn () -> Tensor[(4, 6, ?), int64] {
    @func_7071() /* ty=Tensor[(4, 6, ?), int64] */
  };
  %410() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_6520(%var_6503: float32, %var_6504: Tensor[(6, 6, 9), float32]) -> (Tensor[(6, 6, 9), float32], Tensor[(2, 144), uint16], Tensor[(24, 12), uint16]) {
  %411 = cast(%var_6503, dtype="float32") /* ty=float32 */;
  %412 = cast(%var_6504, dtype="float32") /* ty=Tensor[(6, 6, 9), float32] */;
  %413 = cast(%var_6503, dtype="int32") /* ty=int32 */;
  %414 = cast(meta[relay.Constant][15] /* ty=Tensor[(24, 12), uint16] */, dtype="uint16") /* ty=Tensor[(24, 12), uint16] */;
  %415 = reshape(%413, newshape=[]) /* ty=int32 */;
  %416 = reshape(%414, newshape=[2, 144]) /* ty=Tensor[(2, 144), uint16] */;
  %417 = @func_3012(%415, %416) /* ty=(Tensor[(10, 15, 3), float32], Tensor[(12, 7, 6), float64], Tensor[(9, 16, 2), bool], Tensor[(2, 144), uint16]) */;
  %418 = mod(%411, %412) /* ty=Tensor[(6, 6, 9), float32] */;
  %419 = %417.3;
  (%418, %419, meta[relay.Constant][15] /* ty=Tensor[(24, 12), uint16] */)
}

def @func_7462(%var_7460: uint8) -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool]) {
  @func_7459(%var_7460) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool]) */
}

def @func_6524(%var_6522: float32, %var_6523: Tensor[(6, 6, 9), float32]) -> (Tensor[(6, 6, 9), float32], Tensor[(2, 144), uint16], Tensor[(24, 12), uint16]) {
  @func_6520(%var_6522, %var_6523) /* ty=(Tensor[(6, 6, 9), float32], Tensor[(2, 144), uint16], Tensor[(24, 12), uint16]) */
}

def @func_15673() -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool]) {
  %424 = fn () -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool]) {
    %420 = @func_12172() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) */;
    %421 = @func_11464() /* ty=(Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), int64]) */;
    %422 = %420.1;
    %423 = %421.0;
    (%422, %423)
  };
  %424() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool]) */
}

def @func_8744(%var_8742: Tensor[(140), uint16]) -> (Tensor[(72, 4), uint32], Tensor[(5, 15, 14), bool], bool, Tensor[(9, 16, 2), bool], Tensor[(72, 4), uint32], Tensor[(4, 6, ?), float64], uint16, Tensor[(140), uint16]) {
  @func_8741(%var_8742) /* ty=(Tensor[(72, 4), uint32], Tensor[(5, 15, 14), bool], bool, Tensor[(9, 16, 2), bool], Tensor[(72, 4), uint32], Tensor[(4, 6, ?), float64], uint16, Tensor[(140), uint16]) */
}

def @func_13165() -> Tensor[(4, 6, ?), int64] {
  %425 = fn () -> Tensor[(4, 6, ?), int64] {
    @func_12525() /* ty=Tensor[(4, 6, ?), int64] */
  };
  %425() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_13983(%var_13922: Tensor[(36, 12), float32], %var_13925: Tensor[(4, 6, 7), float32], %var_13941: Tensor[(36, 12), float32], %var_13947: Tensor[(36, 12), float32]) -> (Tensor[(144, 2), uint16], Tensor[(4, 6, 7), uint32], Tensor[(4, 6, ?), int64], Tensor[(36, 12), int32]) {
  %426 = cast(%var_13922, dtype="float32") /* ty=Tensor[(36, 12), float32] */;
  %427 = reshape(%426, newshape=[36, 12]) /* ty=Tensor[(36, 12), float32] */;
  %428 = @func_10207(%427) /* ty=(Tensor[(10), float32], Tensor[(144, 2), uint16], Tensor[(288), uint16], Tensor[(36, 12), float32]) */;
  %429 = @func_13904() /* ty=(Tensor[(4, 6, ?), float32],) */;
  %430 = %429.0;
  %431 = cast(%430, dtype="uint32") /* ty=Tensor[(4, 6, ?), uint32] */;
  %432 = cast(%var_13925, dtype="uint32") /* ty=Tensor[(4, 6, 7), uint32] */;
  %433 = @func_9740() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %434 = cast(%var_13941, dtype="float32") /* ty=Tensor[(36, 12), float32] */;
  %435 = erf(%434) /* ty=Tensor[(36, 12), float32] */;
  %436 = cast(%var_13941, dtype="float32") /* ty=Tensor[(36, 12), float32] */;
  %437 = shape_of(%var_13922, dtype="int32") /* ty=Tensor[(2), int32] */;
  %438 = cast(%var_13922, dtype="float32") /* ty=Tensor[(36, 12), float32] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %440 = subtract(%438, %439) /* ty=Tensor[(36, 12), float32] */;
  %441 = cast(%var_13947, dtype="bool") /* ty=Tensor[(36, 12), bool] */;
  %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(2), int32] */;
  %443 = cast(%440, dtype="bool") /* ty=Tensor[(36, 12), bool] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %445 = less(%443, %444) /* ty=Tensor[(36, 12), bool] */;
  %446 = cast(%445, dtype="int32") /* ty=Tensor[(36, 12), int32] */;
  %447 = shape_of(%435, dtype="int32") /* ty=Tensor[(2), int32] */;
  %448 = cast(%435, dtype="int32") /* ty=Tensor[(36, 12), int32] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %450 = %428.1;
  %451 = subtract(%431, %432) /* ty=Tensor[(4, 6, 7), uint32] */;
  %452 = %433.0;
  %453 = left_shift(%448, %449) /* ty=Tensor[(36, 12), int32] */;
  (%450, %451, %452, %453)
}

def @func_12671() -> (Tensor[(4, 6, ?), int64],) {
  %455 = fn () -> (Tensor[(4, 6, ?), int64],) {
    %454 = @func_7071() /* ty=Tensor[(4, 6, ?), int64] */;
    (%454,)
  };
  %455() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_10485(%var_10469: Tensor[(10), float32]) -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), float64], bool, Tensor[(56, 10), bool]) {
  %456 = @func_9740() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %457 = cast(%var_10469, dtype="float32") /* ty=Tensor[(10), float32] */;
  %458 = cast(meta[relay.Constant][16] /* ty=Tensor[(56, 1), float64] */, dtype="float64") /* ty=Tensor[(56, 1), float64] */;
  %459 = reshape(%457, newshape=[5, 2]) /* ty=Tensor[(5, 2), float32] */;
  %460 = reshape(%458, newshape=[28, 2]) /* ty=Tensor[(28, 2), float64] */;
  %461 = @func_10318(%459, %460) /* ty=(Tensor[(4, 6, ?), float64], Tensor[(5, 2), float32], Tensor[(28, 2), uint16]) */;
  %462 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %463 = reshape(%462, newshape=[]) /* ty=bool */;
  %464 = @func_9337(%463) /* ty=(Tensor[(4, 6, ?), float64], Tensor[(10), float32], bool) */;
  %465 = cast(%var_10469, dtype="bool") /* ty=Tensor[(10), bool] */;
  %466 = cast(meta[relay.Constant][16] /* ty=Tensor[(56, 1), float64] */, dtype="bool") /* ty=Tensor[(56, 1), bool] */;
  %467 = %456.0;
  %468 = %461.0;
  %469 = %464.0;
  %470 = greater(%465, %466) /* ty=Tensor[(56, 10), bool] */;
  (%467, %468, %469, True /* ty=bool */, %470)
}

def @func_12086() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float32], Tensor[(10), float32]) {
  @func_12084() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float32], Tensor[(10), float32]) */
}

def @func_12380() -> (Tensor[(10), float32],) {
  %473 = fn () -> (Tensor[(10), float32],) {
    %471 = @func_9226() /* ty=(Tensor[(10), float32],) */;
    %472 = %471.0;
    (%472,)
  };
  %473() /* ty=(Tensor[(10), float32],) */
}

def @func_11425(%var_11413: Tensor[(70, 2), uint16]) -> (Tensor[(6, 11, 16), float64], Tensor[(14, 1, 10), uint16], uint16, Tensor[(70, 2), uint16], Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) {
  %474 = @func_10543() /* ty=(Tensor[(6, 11, 16), float64],) */;
  %475 = cast(meta[relay.Constant][17] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %476 = cast(%var_11413, dtype="uint16") /* ty=Tensor[(70, 2), uint16] */;
  %477 = reshape(%475, newshape=[]) /* ty=uint16 */;
  %478 = reshape(%476, newshape=[14, 1, 10]) /* ty=Tensor[(14, 1, 10), uint16] */;
  %479 = @func_8879() /* ty=(Tensor[(4, 6, ?), float64],) */;
  %480 = @func_7665() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) */;
  %481 = %474.0;
  %482 = @func_3688(%477, %478) /* ty=Tensor[(14, 1, 10), uint16] */;
  %483 = %479.0;
  %484 = %480.1;
  (%481, %482, meta[relay.Constant][17] /* ty=uint16 */, %var_11413, %483, %484)
}

def @func_14291(%var_14256: Tensor[(4, 6, 8), int64]) -> (Tensor[(4, 6, 8), int64], Tensor[(6, 8, 12), float64], Tensor[(144, 4), float64], Tensor[(72, 4), float32]) {
  %485 = @func_7744() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %486 = %485.0;
  %487 = cast(%486, dtype="int64") /* ty=Tensor[(4, 6, ?), int64] */;
  %488 = cast(%var_14256, dtype="int64") /* ty=Tensor[(4, 6, 8), int64] */;
  %489 = cast(meta[relay.Constant][18] /* ty=Tensor[(144, 4), float64] */, dtype="float64") /* ty=Tensor[(144, 4), float64] */;
  %490 = reshape(%489, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), float64] */;
  %491 = @func_14171(%490) /* ty=(Tensor[(6, 8, 12), float64],) */;
  %492 = @func_10668() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(72, 4), float32], Tensor[(10), float32]) */;
  %493 = left_shift(%487, %488) /* ty=Tensor[(4, 6, 8), int64] */;
  %494 = %491.0;
  %495 = %492.1;
  (%493, %494, meta[relay.Constant][18] /* ty=Tensor[(144, 4), float64] */, %495)
}

def @func_13597() -> (Tensor[(4, 6, ?), int64],) {
  @func_13595() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_12486() -> Tensor[(4, 6, ?), int64] {
  @func_12484() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_6842(%var_6820: Tensor[(132), int64]) -> (Tensor[(4, 6, ?), int64], Tensor[(6, 11, 2), int64], Tensor[(132), int64]) {
  %496 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %497 = cast(%var_6820, dtype="int64") /* ty=Tensor[(132), int64] */;
  %498 = reshape(%497, newshape=[6, 11, 2]) /* ty=Tensor[(6, 11, 2), int64] */;
  %499 = %496.0;
  %500 = @func_3608(%498) /* ty=Tensor[(6, 11, 2), int64] */;
  (%499, %500, %var_6820)
}

def @func_11265() -> (Tensor[(12, 11, 16), float64], Tensor[(12, 11, 16), float64]) {
  %501 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 11, 16), float64] */, dtype="float64") /* ty=Tensor[(12, 11, 16), float64] */;
  %502 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 11, 16), float64] */, dtype="float64") /* ty=Tensor[(12, 11, 16), float64] */;
  %503 = acosh(%501) /* ty=Tensor[(12, 11, 16), float64] */;
  %504 = tan(%502) /* ty=Tensor[(12, 11, 16), float64] */;
  (%503, %504)
}

def @func_11081() -> (uint8, Tensor[(5, 14, 2), float32]) {
  %505 = @func_7045() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(12, 7, 6), bool], uint8, Tensor[(5, 14, 2), float32], Tensor[(5, 28), bool], Tensor[(13, 2, 1), float32], Tensor[(26, 1), float32]) */;
  %506 = @func_7824() /* ty=(Tensor[(5, 14, 2), float32],) */;
  %507 = %505.2;
  %508 = %506.0;
  (%507, %508)
}

def @func_13868() -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), float64], Tensor[(2880), int16], Tensor[(56, 10), uint16]) {
  %523 = fn () -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), float64], Tensor[(2880), int16], Tensor[(56, 10), uint16]) {
    %509 = cast(meta[relay.Constant][20] /* ty=Tensor[(56, 1), float64] */, dtype="float64") /* ty=Tensor[(56, 1), float64] */;
    %510 = cast(meta[relay.Constant][21] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
    %511 = cast(meta[relay.Constant][22] /* ty=Tensor[(2880), int16] */, dtype="int16") /* ty=Tensor[(2880), int16] */;
    %512 = reshape(%509, newshape=[14, 4, 1]) /* ty=Tensor[(14, 4, 1), float64] */;
    %513 = reshape(%510, newshape=[1, 10]) /* ty=Tensor[(1, 10), float32] */;
    %514 = reshape(%511, newshape=[2880]) /* ty=Tensor[(2880), int16] */;
    %515 = @func_4876(%512, %513, %514) /* ty=(Tensor[(12, 7, 6), float64], uint8, Tensor[(9, 16, 2), bool], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(14, 4, ?), bool]) */;
    %516 = cast(meta[relay.Constant][20] /* ty=Tensor[(56, 1), float64] */, dtype="float32") /* ty=Tensor[(56, 1), float32] */;
    %517 = log2(%516) /* ty=Tensor[(56, 1), float32] */;
    %518 = cast(%517, dtype="uint16") /* ty=Tensor[(56, 1), uint16] */;
    %519 = cast(meta[relay.Constant][21] /* ty=Tensor[(10), float32] */, dtype="uint16") /* ty=Tensor[(10), uint16] */;
    %520 = @func_7152() /* ty=Tensor[(4, 6, ?), int64] */;
    %521 = %515.0;
    %522 = bitwise_and(%518, %519) /* ty=Tensor[(56, 10), uint16] */;
    (%520, %521, meta[relay.Constant][22] /* ty=Tensor[(2880), int16] */, %522)
  };
  %523() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), float64], Tensor[(2880), int16], Tensor[(56, 10), uint16]) */
}

def @func_7525() -> (Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64]) {
  @func_7523() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64]) */
}

def @func_6752() -> (Tensor[(4, 6, ?), int64],) {
  %529 = fn () -> (Tensor[(4, 6, ?), int64],) {
    %524 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 6, 1), int64] */, dtype="int64") /* ty=Tensor[(4, 6, 1), int64] */;
    %525 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(4, 6, 1), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %526 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 6, 1), int64] */, dtype="int64") /* ty=Tensor[(4, 6, 1), int64] */;
    %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %528 = multiply(%526, %527) /* ty=Tensor[(4, 6, ?), int64] */;
    (%528,)
  };
  %529() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_10336() -> (Tensor[(6, 11, 16), float64],) {
  %530 = @func_8186() /* ty=Tensor[(6, 11, 16), float64] */;
  (%530,)
}

def @func_11827() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(140), uint16]) {
  @func_11825() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(140), uint16]) */
}

def @func_10669() -> (Tensor[(4, 6, ?), float64], Tensor[(72, 4), float32], Tensor[(10), float32]) {
  %536 = fn () -> (Tensor[(4, 6, ?), float64], Tensor[(72, 4), float32], Tensor[(10), float32]) {
    %531 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
    %532 = cast(%531, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
    %533 = acos(%532) /* ty=Tensor[(4, 6, ?), float64] */;
    %534 = @func_10524() /* ty=Tensor[(72, 4), float32] */;
    %535 = @func_9536() /* ty=Tensor[(10), float32] */;
    (%533, %534, %535)
  };
  %536() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(72, 4), float32], Tensor[(10), float32]) */
}

def @func_12255() -> (Tensor[(4, 6, 9), bool],) {
  %537 = @func_7071() /* ty=Tensor[(4, 6, ?), int64] */;
  %538 = cast(%537, dtype="bool") /* ty=Tensor[(4, 6, ?), bool] */;
  %539 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 6, 9), int64] */, dtype="bool") /* ty=Tensor[(4, 6, 9), bool] */;
  %540 = logical_and(%538, %539) /* ty=Tensor[(4, 6, 9), bool] */;
  (%540,)
}

def @func_6924(%var_6922: Tensor[(1, 10), float32], %var_6923: Tensor[(288), uint16]) -> (Tensor[(4, 6, ?), int64], uint8, Tensor[(56), float64], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(9, 16, 2), bool], Tensor[(288), uint16]) {
  %556 = fn (%var_6914: Tensor[(1, 10), float32], %var_6919: Tensor[(288), uint16]) -> (Tensor[(4, 6, ?), int64], uint8, Tensor[(56), float64], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(9, 16, 2), bool], Tensor[(288), uint16]) {
    %541 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %542 = cast(meta[relay.Constant][26] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
    %543 = cast(%var_6914, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
    %544 = cast(meta[relay.Constant][27] /* ty=Tensor[(2880), int16] */, dtype="int16") /* ty=Tensor[(2880), int16] */;
    %545 = reshape(%542, newshape=[14, 4, 1]) /* ty=Tensor[(14, 4, 1), float64] */;
    %546 = reshape(%543, newshape=[1, 10]) /* ty=Tensor[(1, 10), float32] */;
    %547 = reshape(%544, newshape=[2880]) /* ty=Tensor[(2880), int16] */;
    %548 = @func_4876(%545, %546, %547) /* ty=(Tensor[(12, 7, 6), float64], uint8, Tensor[(9, 16, 2), bool], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(14, 4, ?), bool]) */;
    %549 = cast(%var_6919, dtype="uint16") /* ty=Tensor[(288), uint16] */;
    %550 = cast(%var_6919, dtype="uint16") /* ty=Tensor[(288), uint16] */;
    %551 = reshape(%549, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
    %552 = reshape(%550, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
    %553 = %541.0;
    %554 = %548.1;
    %555 = @func_609(%551, %552) /* ty=Tensor[(9, 16, 2), bool] */;
    (%553, %554, meta[relay.Constant][26] /* ty=Tensor[(56), float64] */, %var_6914, meta[relay.Constant][27] /* ty=Tensor[(2880), int16] */, %555, %var_6919)
  };
  %556(%var_6922, %var_6923) /* ty=(Tensor[(4, 6, ?), int64], uint8, Tensor[(56), float64], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(9, 16, 2), bool], Tensor[(288), uint16]) */
}

def @func_14496() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  %557 = @func_9198() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16]) */;
  %558 = @func_12126() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %559 = %557.0;
  %560 = %558.0;
  (%559, %560)
}

def @func_14568(%var_14561: Tensor[(288), uint16], %var_14562: Tensor[(78), float32]) -> (Tensor[(4, 6, 140), int64], Tensor[(14, 1, 10), uint16], Tensor[(288), uint16], Tensor[(78), float32]) {
  %561 = @func_7152() /* ty=Tensor[(4, 6, ?), int64] */;
  %562 = @func_11825() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(140), uint16]) */;
  %563 = %562.2;
  %564 = cast(%561, dtype="int64") /* ty=Tensor[(4, 6, ?), int64] */;
  %565 = cast(%563, dtype="int64") /* ty=Tensor[(140), int64] */;
  %566 = cast(%563, dtype="float32") /* ty=Tensor[(140), float32] */;
  %567 = cast(%var_14561, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %568 = cast(%var_14562, dtype="float32") /* ty=Tensor[(78), float32] */;
  %569 = reshape(%566, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), float32] */;
  %570 = reshape(%567, newshape=[288]) /* ty=Tensor[(288), uint16] */;
  %571 = reshape(%568, newshape=[1, 78]) /* ty=Tensor[(1, 78), float32] */;
  %572 = @func_8593(%569, %570, %571) /* ty=(Tensor[(5, 14, 2), int64], Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(288), uint16], Tensor[(14, 1, 10), uint16], Tensor[(4, 6, 78), float32]) */;
  %573 = maximum(%564, %565) /* ty=Tensor[(4, 6, 140), int64] */;
  %574 = %572.4;
  (%573, %574, %var_14561, %var_14562)
}

def @func_11711() -> (Tensor[(10), float32], Tensor[(4, 6, ?), int64]) {
  %575 = @func_9226() /* ty=(Tensor[(10), float32],) */;
  %576 = @func_7898() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %577 = %575.0;
  %578 = %576.0;
  (%577, %578)
}

def @func_9857(%var_9839: Tensor[(26, 4), float32]) -> (Tensor[(4, 6, ?), float64], Tensor[(26, 4), float64]) {
  %579 = @func_9066() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float64]) */;
  %580 = @func_7045() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(12, 7, 6), bool], uint8, Tensor[(5, 14, 2), float32], Tensor[(5, 28), bool], Tensor[(13, 2, 1), float32], Tensor[(26, 1), float32]) */;
  %581 = %580.6;
  %582 = cast(%581, dtype="float64") /* ty=Tensor[(26, 1), float64] */;
  %583 = cast(%var_9839, dtype="float64") /* ty=Tensor[(26, 4), float64] */;
  %584 = %579.2;
  %585 = divide(%582, %583) /* ty=Tensor[(26, 4), float64] */;
  (%584, %585)
}

def @func_14913() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  %586 = @func_14446() /* ty=(Tensor[(10), float32], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) */;
  %587 = @func_9066() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float64]) */;
  %588 = %586.2;
  %589 = %587.1;
  (%588, %589)
}

def @func_10445() -> Tensor[(4, 6, ?), int64] {
  @func_10443() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_9694() -> Tensor[(4, 6, ?), int64] {
  @func_9692() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_9537() -> Tensor[(10), float32] {
  %591 = fn () -> Tensor[(10), float32] {
    %590 = @func_8911() /* ty=(Tensor[(10), float32],) */;
    %590.0
  };
  %591() /* ty=Tensor[(10), float32] */
}

def @func_11083() -> (uint8, Tensor[(5, 14, 2), float32]) {
  @func_11081() /* ty=(uint8, Tensor[(5, 14, 2), float32]) */
}

def @func_10543() -> (Tensor[(6, 11, 16), float64],) {
  %592 = @func_8186() /* ty=Tensor[(6, 11, 16), float64] */;
  (%592,)
}

def @func_7492() -> (Tensor[(72, 4), uint16],) {
  %593 = @func_7253() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) */;
  %594 = %593.3;
  (%594,)
}

def @func_9742() -> (Tensor[(4, 6, ?), int64],) {
  @func_9740() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_12128() -> (Tensor[(4, 6, ?), int64],) {
  @func_12126() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_7665() -> (Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) {
  %595 = @func_7523() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64]) */;
  %596 = %595.1;
  %597 = cast(%596, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
  %598 = acosh(%597) /* ty=Tensor[(4, 6, ?), float64] */;
  %599 = @func_7407() /* ty=Tensor[(4, 6, ?), int64] */;
  (%598, %599)
}

def @func_13040(%var_13006: Tensor[(56, 1), float64]) -> (Tensor[(4, 6, ?), int64], Tensor[(9, 16, 2), bool], Tensor[(56, 1), float64], Tensor[(10), float32], Tensor[(2880), int16], Tensor[(4, 6, ?), int64]) {
  %600 = @func_8460() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %601 = cast(%var_13006, dtype="float64") /* ty=Tensor[(56, 1), float64] */;
  %602 = cast(meta[relay.Constant][28] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
  %603 = cast(meta[relay.Constant][29] /* ty=Tensor[(2880), int16] */, dtype="int16") /* ty=Tensor[(2880), int16] */;
  %604 = reshape(%601, newshape=[14, 4, 1]) /* ty=Tensor[(14, 4, 1), float64] */;
  %605 = reshape(%602, newshape=[1, 10]) /* ty=Tensor[(1, 10), float32] */;
  %606 = reshape(%603, newshape=[2880]) /* ty=Tensor[(2880), int16] */;
  %607 = @func_4876(%604, %605, %606) /* ty=(Tensor[(12, 7, 6), float64], uint8, Tensor[(9, 16, 2), bool], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(14, 4, ?), bool]) */;
  %608 = %600.0;
  %609 = %607.2;
  %610 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  (%608, %609, %var_13006, meta[relay.Constant][28] /* ty=Tensor[(10), float32] */, meta[relay.Constant][29] /* ty=Tensor[(2880), int16] */, %610)
}

def @func_10253() -> Tensor[(4, 6, ?), int64] {
  @func_10251() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_9998(%var_9996: Tensor[(10, 2, 13), int64], %var_9997: Tensor[(288), uint16]) -> (Tensor[(10, 2, 13), int64], Tensor[(9, 16, 2), bool], Tensor[(288), uint16]) {
  %621 = fn (%var_9961: Tensor[(10, 2, 13), int64], %var_9980: Tensor[(288), uint16]) -> (Tensor[(10, 2, 13), int64], Tensor[(9, 16, 2), bool], Tensor[(288), uint16]) {
    %611 = cast(%var_9961, dtype="int64") /* ty=Tensor[(10, 2, 13), int64] */;
    %612 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(10, 2, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %613 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 2, 13), int64] */, dtype="int64") /* ty=Tensor[(10, 2, 13), int64] */;
    %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %615 = cast(%var_9980, dtype="uint16") /* ty=Tensor[(288), uint16] */;
    %616 = cast(%var_9980, dtype="uint16") /* ty=Tensor[(288), uint16] */;
    %617 = reshape(%615, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
    %618 = reshape(%616, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
    %619 = bitwise_xor(%613, %614) /* ty=Tensor[(10, 2, 13), int64] */;
    %620 = @func_609(%617, %618) /* ty=Tensor[(9, 16, 2), bool] */;
    (%619, %620, %var_9980)
  };
  %621(%var_9996, %var_9997) /* ty=(Tensor[(10, 2, 13), int64], Tensor[(9, 16, 2), bool], Tensor[(288), uint16]) */
}

def @func_7825() -> (Tensor[(5, 14, 2), float32],) {
  %624 = fn () -> (Tensor[(5, 14, 2), float32],) {
    %622 = @func_7045() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(12, 7, 6), bool], uint8, Tensor[(5, 14, 2), float32], Tensor[(5, 28), bool], Tensor[(13, 2, 1), float32], Tensor[(26, 1), float32]) */;
    %623 = %622.3;
    (%623,)
  };
  %624() /* ty=(Tensor[(5, 14, 2), float32],) */
}

def @func_12257() -> (Tensor[(4, 6, 9), bool],) {
  @func_12255() /* ty=(Tensor[(4, 6, 9), bool],) */
}

def @func_10443() -> Tensor[(4, 6, ?), int64] {
  @func_9692() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_7616() -> Tensor[(72, 4), uint16] {
  @func_7614() /* ty=Tensor[(72, 4), uint16] */
}

def @func_7254() -> (Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) {
  %636 = fn () -> (Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) {
    %625 = cast(meta[relay.Constant][31] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
    %626 = cast(meta[relay.Constant][32] /* ty=Tensor[(72, 4), uint16] */, dtype="uint16") /* ty=Tensor[(72, 4), uint16] */;
    %627 = reshape(%625, newshape=[1, 10]) /* ty=Tensor[(1, 10), float32] */;
    %628 = reshape(%626, newshape=[288]) /* ty=Tensor[(288), uint16] */;
    %629 = @func_6921(%627, %628) /* ty=(Tensor[(4, 6, ?), int64], uint8, Tensor[(56), float64], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(9, 16, 2), bool], Tensor[(288), uint16]) */;
    %630 = cast(meta[relay.Constant][33] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %631 = reshape(%630, newshape=[]) /* ty=uint8 */;
    %632 = @func_569(%631) /* ty=(Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) */;
    %633 = @func_7071() /* ty=Tensor[(4, 6, ?), int64] */;
    %634 = %629.2;
    %635 = %632.0;
    (%633, %634, meta[relay.Constant][31] /* ty=Tensor[(10), float32] */, meta[relay.Constant][32] /* ty=Tensor[(72, 4), uint16] */, %635, meta[relay.Constant][33] /* ty=uint8 */)
  };
  %636() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) */
}

def @func_9445() -> Tensor[(5, 14, 2), float32] {
  %638 = fn () -> Tensor[(5, 14, 2), float32] {
    %637 = @func_7824() /* ty=(Tensor[(5, 14, 2), float32],) */;
    %637.0
  };
  %638() /* ty=Tensor[(5, 14, 2), float32] */
}

def @func_12365(%var_12363: Tensor[(4, 6, 15), float64]) -> (Tensor[(72, 4), uint16], Tensor[(4, 6, 15), int64]) {
  @func_12362(%var_12363) /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, 15), int64]) */
}

def @func_10714(%var_10690: Tensor[(11, 5, 2), float64]) -> (Tensor[(11, 5, 2), bool],) {
  %639 = cast(%var_10690, dtype="float64") /* ty=Tensor[(11, 5, 2), float64] */;
  %640 = exp(%639) /* ty=Tensor[(11, 5, 2), float64] */;
  %641 = cast(%var_10690, dtype="bool") /* ty=Tensor[(11, 5, 2), bool] */;
  %642 = shape_of(%640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%640, dtype="bool") /* ty=Tensor[(11, 5, 2), bool] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %645 = not_equal(%643, %644) /* ty=Tensor[(11, 5, 2), bool] */;
  (%645,)
}

def @func_13074() -> (Tensor[(4, 6, ?), int64],) {
  @func_13072() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_8508(%var_8507: Tensor[(140), uint16]) -> (Tensor[(10), float32], Tensor[(14, 1, 10), uint16], uint16, Tensor[(140), uint16]) {
  %653 = fn (%var_8494: Tensor[(140), uint16]) -> (Tensor[(10), float32], Tensor[(14, 1, 10), uint16], uint16, Tensor[(140), uint16]) {
    %646 = @func_7253() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) */;
    %647 = cast(meta[relay.Constant][34] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %648 = cast(%var_8494, dtype="uint16") /* ty=Tensor[(140), uint16] */;
    %649 = reshape(%647, newshape=[]) /* ty=uint16 */;
    %650 = reshape(%648, newshape=[14, 1, 10]) /* ty=Tensor[(14, 1, 10), uint16] */;
    %651 = %646.2;
    %652 = @func_3688(%649, %650) /* ty=Tensor[(14, 1, 10), uint16] */;
    (%651, %652, meta[relay.Constant][34] /* ty=uint16 */, %var_8494)
  };
  %653(%var_8507) /* ty=(Tensor[(10), float32], Tensor[(14, 1, 10), uint16], uint16, Tensor[(140), uint16]) */
}

def @func_609(%var_591: Tensor[(9, 16, 2), uint16], %var_592: Tensor[(9, 16, 2), uint16]) -> Tensor[(9, 16, 2), bool] {
  %654 = cast(%var_592, dtype="bool") /* ty=Tensor[(9, 16, 2), bool] */;
  %655 = shape_of(%var_591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%var_591, dtype="bool") /* ty=Tensor[(9, 16, 2), bool] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%656, %657) /* ty=Tensor[(9, 16, 2), bool] */
}

def @func_9926(%var_9924: Tensor[(10, 1), float32]) -> (Tensor[(4, 6, ?), int64], Tensor[(2880), int16], Tensor[(28, 2), float64], Tensor[(10, 1), float32], Tensor[(4, 6, ?), float64], Tensor[(104), float32], Tensor[(10, 2, 144), float64]) {
  @func_9923(%var_9924) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(2880), int16], Tensor[(28, 2), float64], Tensor[(10, 1), float32], Tensor[(4, 6, ?), float64], Tensor[(104), float32], Tensor[(10, 2, 144), float64]) */
}

def @func_613(%var_611: Tensor[(9, 16, 2), uint16], %var_612: Tensor[(9, 16, 2), uint16]) -> Tensor[(9, 16, 2), bool] {
  @func_609(%var_611, %var_612) /* ty=Tensor[(9, 16, 2), bool] */
}

def @func_7047() -> (Tensor[(4, 6, ?), float64], Tensor[(12, 7, 6), bool], uint8, Tensor[(5, 14, 2), float32], Tensor[(5, 28), bool], Tensor[(13, 2, 1), float32], Tensor[(26, 1), float32]) {
  @func_7045() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(12, 7, 6), bool], uint8, Tensor[(5, 14, 2), float32], Tensor[(5, 28), bool], Tensor[(13, 2, 1), float32], Tensor[(26, 1), float32]) */
}

def @func_8638(%var_8637: uint8) -> (Tensor[(4, 6, ?), int64], Tensor[(13, 2, 1), float32], Tensor[(26), float32], Tensor[(5, 14, 2), float32], Tensor[(140), bool], uint8) {
  %671 = fn (%var_8624: uint8) -> (Tensor[(4, 6, ?), int64], Tensor[(13, 2, 1), float32], Tensor[(26), float32], Tensor[(5, 14, 2), float32], Tensor[(140), bool], uint8) {
    %658 = @func_7744() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %659 = cast(meta[relay.Constant][35] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
    %660 = reshape(%659, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float32] */;
    %661 = cast(meta[relay.Constant][36] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
    %662 = cast(meta[relay.Constant][36] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
    %663 = cast(%var_8624, dtype="uint8") /* ty=uint8 */;
    %664 = reshape(%661, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), bool] */;
    %665 = reshape(%662, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), bool] */;
    %666 = reshape(%663, newshape=[]) /* ty=uint8 */;
    %667 = @func_1525(%664, %665, %666) /* ty=(Tensor[(5, 14, 2), float32], Tensor[(12, 7, 6), bool], uint8) */;
    %668 = %658.0;
    %669 = @func_5085(%660) /* ty=Tensor[(13, 2, 1), float32] */;
    %670 = %667.0;
    (%668, %669, meta[relay.Constant][35] /* ty=Tensor[(26), float32] */, %670, meta[relay.Constant][36] /* ty=Tensor[(140), bool] */, %var_8624)
  };
  %671(%var_8637) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(13, 2, 1), float32], Tensor[(26), float32], Tensor[(5, 14, 2), float32], Tensor[(140), bool], uint8) */
}

def @func_8165(%var_8163: int32) -> (Tensor[(72, 4), uint16], Tensor[(12, 7, 6), float64], int32) {
  @func_8162(%var_8163) /* ty=(Tensor[(72, 4), uint16], Tensor[(12, 7, 6), float64], int32) */
}

def @func_11858() -> (Tensor[(6, 11, 16), float64],) {
  %672 = @func_10336() /* ty=(Tensor[(6, 11, 16), float64],) */;
  %673 = %672.0;
  (%673,)
}

def @func_10526() -> Tensor[(72, 4), float32] {
  @func_10524() /* ty=Tensor[(72, 4), float32] */
}

def @func_14755() -> (Tensor[(4, 6, ?), int64],) {
  %674 = @func_11868() /* ty=Tensor[(4, 6, ?), int64] */;
  (%674,)
}

def @func_14572(%var_14570: Tensor[(288), uint16], %var_14571: Tensor[(78), float32]) -> (Tensor[(4, 6, 140), int64], Tensor[(14, 1, 10), uint16], Tensor[(288), uint16], Tensor[(78), float32]) {
  @func_14568(%var_14570, %var_14571) /* ty=(Tensor[(4, 6, 140), int64], Tensor[(14, 1, 10), uint16], Tensor[(288), uint16], Tensor[(78), float32]) */
}

def @func_8186() -> Tensor[(6, 11, 16), float64] {
  %675 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 11, 16), float64] */, dtype="float64") /* ty=Tensor[(6, 11, 16), float64] */;
  asin(%675) /* ty=Tensor[(6, 11, 16), float64] */
}

def @func_11267() -> (Tensor[(12, 11, 16), float64], Tensor[(12, 11, 16), float64]) {
  @func_11265() /* ty=(Tensor[(12, 11, 16), float64], Tensor[(12, 11, 16), float64]) */
}

def @func_12174() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  @func_12172() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) */
}

def @func_8188() -> Tensor[(6, 11, 16), float64] {
  @func_8186() /* ty=Tensor[(6, 11, 16), float64] */
}

def @func_14598() -> (Tensor[(6, 11, 16), float64],) {
  %676 = @func_10543() /* ty=(Tensor[(6, 11, 16), float64],) */;
  %677 = %676.0;
  (%677,)
}

def @func_9200() -> (Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16]) {
  @func_9198() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16]) */
}

def @func_11428(%var_11426: Tensor[(70, 2), uint16]) -> (Tensor[(6, 11, 16), float64], Tensor[(14, 1, 10), uint16], uint16, Tensor[(70, 2), uint16], Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) {
  @func_11425(%var_11426) /* ty=(Tensor[(6, 11, 16), float64], Tensor[(14, 1, 10), uint16], uint16, Tensor[(70, 2), uint16], Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) */
}

def @func_10384(%var_10382: Tensor[(72, 4), uint16]) -> (Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(140), float32], Tensor[(72, 4), uint16], Tensor[(78), float32]) {
  @func_10381(%var_10382) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(140), float32], Tensor[(72, 4), uint16], Tensor[(78), float32]) */
}

def @func_12484() -> Tensor[(4, 6, ?), int64] {
  @func_7071() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_8912() -> (Tensor[(10), float32],) {
  %680 = fn () -> (Tensor[(10), float32],) {
    %678 = @func_7253() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) */;
    %679 = %678.2;
    (%679,)
  };
  %680() /* ty=(Tensor[(10), float32],) */
}

def @func_8741(%var_8735: Tensor[(140), uint16]) -> (Tensor[(72, 4), uint32], Tensor[(5, 15, 14), bool], bool, Tensor[(9, 16, 2), bool], Tensor[(72, 4), uint32], Tensor[(4, 6, ?), float64], uint16, Tensor[(140), uint16]) {
  %681 = @func_7614() /* ty=Tensor[(72, 4), uint16] */;
  %682 = cast(meta[relay.Constant][38] /* ty=Tensor[(72, 4), uint16] */, dtype="uint32") /* ty=Tensor[(72, 4), uint32] */;
  %683 = shape_of(%681, dtype="int32") /* ty=Tensor[(2), int32] */;
  %684 = cast(%681, dtype="uint32") /* ty=Tensor[(72, 4), uint32] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %686 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %687 = reshape(%686, newshape=[]) /* ty=bool */;
  %688 = @func_7180(%687) /* ty=(Tensor[(5, 15, 14), bool], int32, Tensor[(10), float32], Tensor[(96, 30), int16]) */;
  %689 = bitwise_xor(%684, %685) /* ty=Tensor[(72, 4), uint32] */;
  %690 = cast(%689, dtype="uint16") /* ty=Tensor[(72, 4), uint16] */;
  %691 = cast(%689, dtype="uint16") /* ty=Tensor[(72, 4), uint16] */;
  %692 = reshape(%690, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %693 = reshape(%691, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %694 = cast(%681, dtype="uint16") /* ty=Tensor[(72, 4), uint16] */;
  %695 = cast(%689, dtype="uint16") /* ty=Tensor[(72, 4), uint16] */;
  %696 = reshape(%694, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %697 = reshape(%695, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %698 = @func_609(%696, %697) /* ty=Tensor[(9, 16, 2), bool] */;
  %699 = cast(%698, dtype="uint32") /* ty=Tensor[(9, 16, 2), uint32] */;
  %700 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(72, 4), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %701 = cast(meta[relay.Constant][38] /* ty=Tensor[(72, 4), uint16] */, dtype="uint32") /* ty=Tensor[(72, 4), uint32] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %703 = @func_7665() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) */;
  %704 = cast(%var_8735, dtype="uint16") /* ty=Tensor[(140), uint16] */;
  %705 = reshape(%704, newshape=[140]) /* ty=Tensor[(140), uint16] */;
  %706 = @func_8506(%705) /* ty=(Tensor[(10), float32], Tensor[(14, 1, 10), uint16], uint16, Tensor[(140), uint16]) */;
  %707 = %688.0;
  %708 = @func_609(%692, %693) /* ty=Tensor[(9, 16, 2), bool] */;
  %709 = bitwise_or(%701, %702) /* ty=Tensor[(72, 4), uint32] */;
  %710 = %703.0;
  %711 = %706.2;
  (%689, %707, True /* ty=bool */, %708, %709, %710, %711, %var_8735)
}

def @func_13408() -> Tensor[(4, 6, ?), int64] {
  %712 = @func_12670() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %712.0
}

def @func_7494() -> (Tensor[(72, 4), uint16],) {
  @func_7492() /* ty=(Tensor[(72, 4), uint16],) */
}

def @func_13904() -> (Tensor[(4, 6, ?), float32],) {
  %713 = @func_13589() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float64]) */;
  %714 = %713.0;
  %715 = cast(%714, dtype="float32") /* ty=Tensor[(4, 6, ?), float32] */;
  %716 = cosh(%715) /* ty=Tensor[(4, 6, ?), float32] */;
  (%716,)
}

def @func_16048() -> Tensor[(72, 4), uint16] {
  %718 = fn () -> Tensor[(72, 4), uint16] {
    %717 = @func_9198() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16]) */;
    %717.1
  };
  %718() /* ty=Tensor[(72, 4), uint16] */
}

def @func_1525(%var_1513: Tensor[(5, 14, 2), bool], %var_1514: Tensor[(5, 14, 2), bool], %var_1523: uint8) -> (Tensor[(5, 14, 2), float32], Tensor[(12, 7, 6), bool], uint8) {
  %719 = cast(%var_1514, dtype="bool") /* ty=Tensor[(5, 14, 2), bool] */;
  %720 = shape_of(%var_1513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%var_1513, dtype="bool") /* ty=Tensor[(5, 14, 2), bool] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %723 = logical_and(%721, %722) /* ty=Tensor[(5, 14, 2), bool] */;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(5, 14, 2), float32] */;
  %725 = cast(%var_1523, dtype="uint8") /* ty=uint8 */;
  %726 = reshape(%725, newshape=[]) /* ty=uint8 */;
  %727 = @func_569(%726) /* ty=(Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) */;
  %728 = erf(%724) /* ty=Tensor[(5, 14, 2), float32] */;
  %729 = %727.0;
  (%728, %729, %var_1523)
}

def @func_10209(%var_10208: Tensor[(36, 12), float32]) -> (Tensor[(10), float32], Tensor[(144, 2), uint16], Tensor[(288), uint16], Tensor[(36, 12), float32]) {
  %738 = fn (%var_10195: Tensor[(36, 12), float32]) -> (Tensor[(10), float32], Tensor[(144, 2), uint16], Tensor[(288), uint16], Tensor[(36, 12), float32]) {
    %730 = @func_7600() /* ty=(Tensor[(10), float32], Tensor[(4, 6, 16), float64], Tensor[(4, 6, 16), float32], Tensor[(72, 4), uint16]) */;
    %731 = cast(meta[relay.Constant][39] /* ty=Tensor[(288), uint16] */, dtype="uint16") /* ty=Tensor[(288), uint16] */;
    %732 = cast(%var_10195, dtype="float32") /* ty=Tensor[(36, 12), float32] */;
    %733 = reshape(%731, newshape=[144, 2]) /* ty=Tensor[(144, 2), uint16] */;
    %734 = reshape(%732, newshape=[2, 216]) /* ty=Tensor[(2, 216), float32] */;
    %735 = @func_6041(%733, %734) /* ty=(Tensor[(9, 16, 2), bool], Tensor[(144, 2), uint16], Tensor[(13, 13, 16), float64], float32, Tensor[(2, 216), float32], Tensor[(9, 8, 6), float32]) */;
    %736 = %730.0;
    %737 = %735.1;
    (%736, %737, meta[relay.Constant][39] /* ty=Tensor[(288), uint16] */, %var_10195)
  };
  %738(%var_10208) /* ty=(Tensor[(10), float32], Tensor[(144, 2), uint16], Tensor[(288), uint16], Tensor[(36, 12), float32]) */
}

def @func_14294(%var_14292: Tensor[(4, 6, 8), int64]) -> (Tensor[(4, 6, 8), int64], Tensor[(6, 8, 12), float64], Tensor[(144, 4), float64], Tensor[(72, 4), float32]) {
  @func_14291(%var_14292) /* ty=(Tensor[(4, 6, 8), int64], Tensor[(6, 8, 12), float64], Tensor[(144, 4), float64], Tensor[(72, 4), float32]) */
}

def @func_14995(%var_14993: Tensor[(7, 5, 8), int32], %var_14994: Tensor[(288), uint16]) -> (Tensor[(7, 5, 8), int32], Tensor[(4, 6, ?), int64], Tensor[(288), uint16], Tensor[(10), float32]) {
  %750 = fn (%var_14968: Tensor[(7, 5, 8), int32], %var_14975: Tensor[(288), uint16]) -> (Tensor[(7, 5, 8), int32], Tensor[(4, 6, ?), int64], Tensor[(288), uint16], Tensor[(10), float32]) {
    %739 = cast(%var_14968, dtype="int32") /* ty=Tensor[(7, 5, 8), int32] */;
    %740 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(7, 5, 8), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %741 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 5, 8), int32] */, dtype="int32") /* ty=Tensor[(7, 5, 8), int32] */;
    %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %743 = cast(%var_14975, dtype="uint16") /* ty=Tensor[(288), uint16] */;
    %744 = reshape(%743, newshape=[72, 4]) /* ty=Tensor[(72, 4), uint16] */;
    %745 = @func_10381(%744) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(140), float32], Tensor[(72, 4), uint16], Tensor[(78), float32]) */;
    %746 = @func_12882() /* ty=(Tensor[(10), float32],) */;
    %747 = bitwise_xor(%741, %742) /* ty=Tensor[(7, 5, 8), int32] */;
    %748 = %745.0;
    %749 = %746.0;
    (%747, %748, %var_14975, %749)
  };
  %750(%var_14993, %var_14994) /* ty=(Tensor[(7, 5, 8), int32], Tensor[(4, 6, ?), int64], Tensor[(288), uint16], Tensor[(10), float32]) */
}

def @func_9923(%var_9888: Tensor[(10, 1), float32]) -> (Tensor[(4, 6, ?), int64], Tensor[(2880), int16], Tensor[(28, 2), float64], Tensor[(10, 1), float32], Tensor[(4, 6, ?), float64], Tensor[(104), float32], Tensor[(10, 2, 144), float64]) {
  %751 = @func_7396() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %752 = %751.0;
  %753 = cast(%752, dtype="int64") /* ty=Tensor[(4, 6, ?), int64] */;
  %754 = cast(meta[relay.Constant][41] /* ty=Tensor[(28, 2), float64] */, dtype="float64") /* ty=Tensor[(28, 2), float64] */;
  %755 = cast(%var_9888, dtype="float32") /* ty=Tensor[(10, 1), float32] */;
  %756 = reshape(%753, newshape=[4, 6, 1]) /* ty=Tensor[(4, 6, 1), int64] */;
  %757 = reshape(%754, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %758 = reshape(%755, newshape=[10]) /* ty=Tensor[(10), float32] */;
  %759 = @func_9604(%756, %757, %758) /* ty=(Tensor[(4, 6, ?), uint16], Tensor[(2880), int16], Tensor[(56), float64], Tensor[(10), float32], Tensor[(2880), int16]) */;
  %760 = cast(meta[relay.Constant][42] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %761 = reshape(%760, newshape=[26, 4]) /* ty=Tensor[(26, 4), float32] */;
  %762 = @func_9857(%761) /* ty=(Tensor[(4, 6, ?), float64], Tensor[(26, 4), float64]) */;
  %763 = cast(%var_9888, dtype="float32") /* ty=Tensor[(10, 1), float32] */;
  %764 = %759.4;
  %765 = cast(%764, dtype="int16") /* ty=Tensor[(2880), int16] */;
  %766 = reshape(%763, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float32] */;
  %767 = reshape(%765, newshape=[10, 2, 144]) /* ty=Tensor[(10, 2, 144), int16] */;
  %768 = @func_4149(%766, %767) /* ty=(int32, Tensor[(288), uint16], Tensor[(9, 16, 2), bool], Tensor[(10, 2, 144), float32], Tensor[(10, 2, 144), float64]) */;
  %769 = %762.0;
  %770 = %768.4;
  (%752, %764, meta[relay.Constant][41] /* ty=Tensor[(28, 2), float64] */, %var_9888, %769, meta[relay.Constant][42] /* ty=Tensor[(104), float32] */, %770)
}

def @func_8162(%var_8160: int32) -> (Tensor[(72, 4), uint16], Tensor[(12, 7, 6), float64], int32) {
  %771 = @func_7600() /* ty=(Tensor[(10), float32], Tensor[(4, 6, 16), float64], Tensor[(4, 6, 16), float32], Tensor[(72, 4), uint16]) */;
  %772 = cast(%var_8160, dtype="int32") /* ty=int32 */;
  %773 = %771.3;
  %774 = cast(%773, dtype="uint16") /* ty=Tensor[(72, 4), uint16] */;
  %775 = reshape(%772, newshape=[]) /* ty=int32 */;
  %776 = reshape(%774, newshape=[2, 144]) /* ty=Tensor[(2, 144), uint16] */;
  %777 = @func_3012(%775, %776) /* ty=(Tensor[(10, 15, 3), float32], Tensor[(12, 7, 6), float64], Tensor[(9, 16, 2), bool], Tensor[(2, 144), uint16]) */;
  %778 = %777.1;
  (%773, %778, %var_8160)
}

def @func_12852() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  %779 = @func_9740() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %780 = @func_7407() /* ty=Tensor[(4, 6, ?), int64] */;
  %781 = %779.0;
  (%780, %781)
}

def @func_11276() -> (Tensor[(4, 6, ?), int64],) {
  %782 = @func_9740() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %783 = %782.0;
  (%783,)
}

def @func_7295(%var_7293: Tensor[(78, 1), float32]) -> (Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(2880), int16], Tensor[(78, 56), float32]) {
  @func_7292(%var_7293) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(2880), int16], Tensor[(78, 56), float32]) */
}

def @func_16138() -> (Tensor[(4, 6, ?), int64],) {
  @func_16136() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_15403() -> (Tensor[(6, 11, 16), float64], Tensor[(6, 11, 16), float64], Tensor[(6, 11, 16), float64], Tensor[(4, 6, ?), float64], Tensor[(104), float32]) {
  @func_15401() /* ty=(Tensor[(6, 11, 16), float64], Tensor[(6, 11, 16), float64], Tensor[(6, 11, 16), float64], Tensor[(4, 6, ?), float64], Tensor[(104), float32]) */
}

def @func_11278() -> (Tensor[(4, 6, ?), int64],) {
  @func_11276() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_13198() -> (Tensor[(72, 4), uint16],) {
  %786 = fn () -> (Tensor[(72, 4), uint16],) {
    %784 = @func_7492() /* ty=(Tensor[(72, 4), uint16],) */;
    %785 = %784.0;
    (%785,)
  };
  %786() /* ty=(Tensor[(72, 4), uint16],) */
}

def @func_8879() -> (Tensor[(4, 6, ?), float64],) {
  %787 = @func_7045() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(12, 7, 6), bool], uint8, Tensor[(5, 14, 2), float32], Tensor[(5, 28), bool], Tensor[(13, 2, 1), float32], Tensor[(26, 1), float32]) */;
  %788 = %787.0;
  (%788,)
}

def @func_7899() -> (Tensor[(4, 6, ?), int64],) {
  %791 = fn () -> (Tensor[(4, 6, ?), int64],) {
    %789 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %790 = %789.0;
    (%790,)
  };
  %791() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_7746() -> (Tensor[(4, 6, ?), int64],) {
  @func_7744() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_4880(%var_4877: Tensor[(14, 4, 1), float64], %var_4878: Tensor[(1, 10), float32], %var_4879: Tensor[(2880), int16]) -> (Tensor[(12, 7, 6), float64], uint8, Tensor[(9, 16, 2), bool], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(14, 4, ?), bool]) {
  %809 = fn (%var_4839: Tensor[(14, 4, 1), float64], %var_4851: Tensor[(1, 10), float32], %var_4852: Tensor[(2880), int16]) -> (Tensor[(12, 7, 6), float64], uint8, Tensor[(9, 16, 2), bool], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(14, 4, ?), bool]) {
    %792 = cast(meta[relay.Constant][43] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %793 = reshape(%792, newshape=[]) /* ty=uint8 */;
    %794 = @func_569(%793) /* ty=(Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) */;
    %795 = cast(%var_4851, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
    %796 = cast(%var_4852, dtype="int16") /* ty=Tensor[(2880), int16] */;
    %797 = reshape(%795, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float32] */;
    %798 = reshape(%796, newshape=[10, 2, 144]) /* ty=Tensor[(10, 2, 144), int16] */;
    %799 = @func_4149(%797, %798) /* ty=(int32, Tensor[(288), uint16], Tensor[(9, 16, 2), bool], Tensor[(10, 2, 144), float32], Tensor[(10, 2, 144), float64]) */;
    %800 = cast(%var_4839, dtype="float64") /* ty=Tensor[(14, 4, 1), float64] */;
    %801 = sqrt(%800) /* ty=Tensor[(14, 4, 1), float64] */;
    %802 = cast(%var_4839, dtype="bool") /* ty=Tensor[(14, 4, 1), bool] */;
    %803 = shape_of(%801, dtype="int32") /* ty=Tensor[(3), int32] */;
    %804 = cast(%801, dtype="bool") /* ty=Tensor[(14, 4, 1), bool] */;
    %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %806 = %794.1;
    %807 = %799.2;
    %808 = equal(%804, %805) /* ty=Tensor[(14, 4, ?), bool] */;
    (%806, meta[relay.Constant][43] /* ty=uint8 */, %807, %var_4851, %var_4852, %808)
  };
  %809(%var_4877, %var_4878, %var_4879) /* ty=(Tensor[(12, 7, 6), float64], uint8, Tensor[(9, 16, 2), bool], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(14, 4, ?), bool]) */
}

def @func_10089() -> Tensor[(4, 6, ?), int64] {
  %810 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %810.0
}

def @func_14228() -> Tensor[(6, 11, 16), int16] {
  @func_14226() /* ty=Tensor[(6, 11, 16), int16] */
}

def @func_15854() -> Tensor[(4, 6, ?), int64] {
  %811 = @func_13595() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %811.0
}

def @func_9066() -> (Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float64]) {
  %812 = @func_7898() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %813 = %812.0;
  %814 = cast(%813, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
  %815 = @func_7614() /* ty=Tensor[(72, 4), uint16] */;
  %816 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  %817 = log2(%814) /* ty=Tensor[(4, 6, ?), float64] */;
  (%815, %816, %817)
}

def @func_7180(%var_7160: bool) -> (Tensor[(5, 15, 14), bool], int32, Tensor[(10), float32], Tensor[(96, 30), int16]) {
  %818 = cast(%var_7160, dtype="bool") /* ty=bool */;
  %819 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 15, 14), bool] */, dtype="bool") /* ty=Tensor[(5, 15, 14), bool] */;
  %820 = cast(meta[relay.Constant][45] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
  %821 = cast(meta[relay.Constant][46] /* ty=Tensor[(96, 30), int16] */, dtype="int16") /* ty=Tensor[(96, 30), int16] */;
  %822 = reshape(%820, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), float32] */;
  %823 = reshape(%821, newshape=[10, 2, 144]) /* ty=Tensor[(10, 2, 144), int16] */;
  %824 = @func_4149(%822, %823) /* ty=(int32, Tensor[(288), uint16], Tensor[(9, 16, 2), bool], Tensor[(10, 2, 144), float32], Tensor[(10, 2, 144), float64]) */;
  %825 = logical_or(%818, %819) /* ty=Tensor[(5, 15, 14), bool] */;
  %826 = %824.0;
  (%825, %826, meta[relay.Constant][45] /* ty=Tensor[(10), float32] */, meta[relay.Constant][46] /* ty=Tensor[(96, 30), int16] */)
}

def @func_6845(%var_6843: Tensor[(132), int64]) -> (Tensor[(4, 6, ?), int64], Tensor[(6, 11, 2), int64], Tensor[(132), int64]) {
  @func_6842(%var_6843) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(6, 11, 2), int64], Tensor[(132), int64]) */
}

def @func_15778() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  %830 = fn () -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
    %827 = @func_7366() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %828 = %827.0;
    %829 = @func_7152() /* ty=Tensor[(4, 6, ?), int64] */;
    (%828, %829)
  };
  %830() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) */
}

def @func_12084() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float32], Tensor[(10), float32]) {
  %831 = @func_11858() /* ty=(Tensor[(6, 11, 16), float64],) */;
  %832 = %831.0;
  %833 = cast(%832, dtype="float32") /* ty=Tensor[(6, 11, 16), float32] */;
  %834 = @func_7253() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(72, 4), uint16], Tensor[(12, 7, 6), bool], uint8) */;
  %835 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
  %836 = @func_11868() /* ty=Tensor[(4, 6, ?), int64] */;
  %837 = acos(%833) /* ty=Tensor[(6, 11, 16), float32] */;
  %838 = %834.2;
  (%835, %836, %837, %838)
}

def @func_10877(%var_10873: Tensor[(432), float32], %var_10874: uint8, %var_10875: Tensor[(288, 1), uint16], %var_10876: Tensor[(13, 11, 13), uint8]) -> (Tensor[(6, 11, 16), float64], Tensor[(4, 6, ?), int64], Tensor[(9, 8, 6), bool], Tensor[(432), float32], Tensor[(4, 6, ?), float32], Tensor[(72, 4), uint32], Tensor[(288, 1), uint16], Tensor[(4, 6, ?), int64], Tensor[(13, 11, 13), uint64], Tensor[(10), float32], Tensor[(66, 2), float32], Tensor[(72, 4), uint16], Tensor[(13, 12, 1), uint16]) {
  @func_10871(%var_10873, %var_10874, %var_10875, %var_10876) /* ty=(Tensor[(6, 11, 16), float64], Tensor[(4, 6, ?), int64], Tensor[(9, 8, 6), bool], Tensor[(432), float32], Tensor[(4, 6, ?), float32], Tensor[(72, 4), uint32], Tensor[(288, 1), uint16], Tensor[(4, 6, ?), int64], Tensor[(13, 11, 13), uint64], Tensor[(10), float32], Tensor[(66, 2), float32], Tensor[(72, 4), uint16], Tensor[(13, 12, 1), uint16]) */
}

def @func_9608(%var_9605: Tensor[(4, 6, 1), int64], %var_9606: Tensor[(56), float64], %var_9607: Tensor[(10), float32]) -> (Tensor[(4, 6, ?), uint16], Tensor[(2880), int16], Tensor[(56), float64], Tensor[(10), float32], Tensor[(2880), int16]) {
  %854 = fn (%var_9583: Tensor[(4, 6, 1), int64], %var_9591: Tensor[(56), float64], %var_9592: Tensor[(10), float32]) -> (Tensor[(4, 6, ?), uint16], Tensor[(2880), int16], Tensor[(56), float64], Tensor[(10), float32], Tensor[(2880), int16]) {
    %839 = @func_8460() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %840 = %839.0;
    %841 = cast(%var_9583, dtype="uint16") /* ty=Tensor[(4, 6, 1), uint16] */;
    %842 = shape_of(%840, dtype="int32") /* ty=Tensor[(3), int32] */;
    %843 = cast(%840, dtype="uint16") /* ty=Tensor[(4, 6, ?), uint16] */;
    %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %845 = cast(%var_9591, dtype="float64") /* ty=Tensor[(56), float64] */;
    %846 = cast(%var_9592, dtype="float32") /* ty=Tensor[(10), float32] */;
    %847 = cast(meta[relay.Constant][47] /* ty=Tensor[(2880), int16] */, dtype="int16") /* ty=Tensor[(2880), int16] */;
    %848 = reshape(%845, newshape=[14, 4, 1]) /* ty=Tensor[(14, 4, 1), float64] */;
    %849 = reshape(%846, newshape=[1, 10]) /* ty=Tensor[(1, 10), float32] */;
    %850 = reshape(%847, newshape=[2880]) /* ty=Tensor[(2880), int16] */;
    %851 = @func_4876(%848, %849, %850) /* ty=(Tensor[(12, 7, 6), float64], uint8, Tensor[(9, 16, 2), bool], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(14, 4, ?), bool]) */;
    %852 = right_shift(%843, %844) /* ty=Tensor[(4, 6, ?), uint16] */;
    %853 = %851.4;
    (%852, %853, %var_9591, %var_9592, meta[relay.Constant][47] /* ty=Tensor[(2880), int16] */)
  };
  %854(%var_9605, %var_9606, %var_9607) /* ty=(Tensor[(4, 6, ?), uint16], Tensor[(2880), int16], Tensor[(56), float64], Tensor[(10), float32], Tensor[(2880), int16]) */
}

def @func_569(%var_559: uint8) -> (Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) {
  %855 = cast(%var_559, dtype="bool") /* ty=bool */;
  %856 = cast(meta[relay.Constant][48] /* ty=Tensor[(12, 7, 6), uint8] */, dtype="bool") /* ty=Tensor[(12, 7, 6), bool] */;
  %857 = cast(meta[relay.Constant][48] /* ty=Tensor[(12, 7, 6), uint8] */, dtype="float64") /* ty=Tensor[(12, 7, 6), float64] */;
  %858 = less(%855, %856) /* ty=Tensor[(12, 7, 6), bool] */;
  %859 = cos(%857) /* ty=Tensor[(12, 7, 6), float64] */;
  (%858, %859)
}

def @func_10091() -> Tensor[(4, 6, ?), int64] {
  @func_10089() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_14226() -> Tensor[(6, 11, 16), int16] {
  %860 = @func_13777() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float32], Tensor[(6, 11, 16), int16], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) */;
  %860.2
}

def @func_13517(%var_13515: Tensor[(104), float32], %var_13516: Tensor[(288), uint16]) -> (Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), float64], Tensor[(104), float32], Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16], Tensor[(288), uint16]) {
  %872 = fn (%var_13492: Tensor[(104), float32], %var_13509: Tensor[(288), uint16]) -> (Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), float64], Tensor[(104), float32], Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16], Tensor[(288), uint16]) {
    %861 = @func_8879() /* ty=(Tensor[(4, 6, ?), float64],) */;
    %862 = cast(%var_13492, dtype="float32") /* ty=Tensor[(104), float32] */;
    %863 = reshape(%862, newshape=[26, 4]) /* ty=Tensor[(26, 4), float32] */;
    %864 = @func_9857(%863) /* ty=(Tensor[(4, 6, ?), float64], Tensor[(26, 4), float64]) */;
    %865 = cast(%var_13509, dtype="uint16") /* ty=Tensor[(288), uint16] */;
    %866 = reshape(%865, newshape=[72, 4]) /* ty=Tensor[(72, 4), uint16] */;
    %867 = @func_10381(%866) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(140), float32], Tensor[(72, 4), uint16], Tensor[(78), float32]) */;
    %868 = %861.0;
    %869 = %864.0;
    %870 = @func_7330() /* ty=Tensor[(4, 6, ?), int64] */;
    %871 = %867.3;
    (%868, %869, %var_13492, %870, %871, %var_13509)
  };
  %872(%var_13515, %var_13516) /* ty=(Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), float64], Tensor[(104), float32], Tensor[(4, 6, ?), int64], Tensor[(72, 4), uint16], Tensor[(288), uint16]) */
}

def @func_8597(%var_8594: Tensor[(5, 14, 2), float32], %var_8595: Tensor[(288), uint16], %var_8596: Tensor[(1, 78), float32]) -> (Tensor[(5, 14, 2), int64], Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(288), uint16], Tensor[(14, 1, 10), uint16], Tensor[(4, 6, 78), float32]) {
  %897 = fn (%var_8528: Tensor[(5, 14, 2), float32], %var_8536: Tensor[(288), uint16], %var_8551: Tensor[(1, 78), float32]) -> (Tensor[(5, 14, 2), int64], Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(288), uint16], Tensor[(14, 1, 10), uint16], Tensor[(4, 6, 78), float32]) {
    %873 = @func_7824() /* ty=(Tensor[(5, 14, 2), float32],) */;
    %874 = %873.0;
    %875 = cast(%var_8528, dtype="int64") /* ty=Tensor[(5, 14, 2), int64] */;
    %876 = shape_of(%874, dtype="int32") /* ty=Tensor[(3), int32] */;
    %877 = cast(%874, dtype="int64") /* ty=Tensor[(5, 14, 2), int64] */;
    %878 = dyn.reshape(%875, %876, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %879 = cast(meta[relay.Constant][49] /* ty=Tensor[(5, 2), float32] */, dtype="float32") /* ty=Tensor[(5, 2), float32] */;
    %880 = cast(%var_8536, dtype="uint16") /* ty=Tensor[(288), uint16] */;
    %881 = reshape(%879, newshape=[1, 10]) /* ty=Tensor[(1, 10), float32] */;
    %882 = reshape(%880, newshape=[288]) /* ty=Tensor[(288), uint16] */;
    %883 = @func_6921(%881, %882) /* ty=(Tensor[(4, 6, ?), int64], uint8, Tensor[(56), float64], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(9, 16, 2), bool], Tensor[(288), uint16]) */;
    %884 = cast(%var_8528, dtype="uint16") /* ty=Tensor[(5, 14, 2), uint16] */;
    %885 = reshape(%884, newshape=[140]) /* ty=Tensor[(140), uint16] */;
    %886 = @func_8506(%885) /* ty=(Tensor[(10), float32], Tensor[(14, 1, 10), uint16], uint16, Tensor[(140), uint16]) */;
    %887 = cast(%var_8551, dtype="float32") /* ty=Tensor[(1, 78), float32] */;
    %888 = reshape(%887, newshape=[78, 1]) /* ty=Tensor[(78, 1), float32] */;
    %889 = @func_7292(%888) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(2880), int16], Tensor[(78, 56), float32]) */;
    %890 = %889.0;
    %891 = cast(%890, dtype="float32") /* ty=Tensor[(4, 6, ?), float32] */;
    %892 = cast(%var_8551, dtype="float32") /* ty=Tensor[(1, 78), float32] */;
    %893 = right_shift(%877, %878) /* ty=Tensor[(5, 14, 2), int64] */;
    %894 = %883.0;
    %895 = %886.1;
    %896 = floor_mod(%891, %892) /* ty=Tensor[(4, 6, 78), float32] */;
    (%893, %894, meta[relay.Constant][49] /* ty=Tensor[(5, 2), float32] */, %var_8536, %895, %896)
  };
  %897(%var_8594, %var_8595, %var_8596) /* ty=(Tensor[(5, 14, 2), int64], Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(288), uint16], Tensor[(14, 1, 10), uint16], Tensor[(4, 6, 78), float32]) */
}

def @func_11247(%var_11245: Tensor[(12, 2, 4), float32], %var_11246: Tensor[(432), float32]) -> (Tensor[(12, 2, 4), bool], Tensor[(12, 2, 4), float32], Tensor[(9, 8, 6), bool], float32, Tensor[(432), float32], Tensor[(4, 6, ?), int64]) {
  @func_11243(%var_11245, %var_11246) /* ty=(Tensor[(12, 2, 4), bool], Tensor[(12, 2, 4), float32], Tensor[(9, 8, 6), bool], float32, Tensor[(432), float32], Tensor[(4, 6, ?), int64]) */
}

def @func_14012() -> (Tensor[(2880), int16],) {
  %898 = @func_13867() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), float64], Tensor[(2880), int16], Tensor[(56, 10), uint16]) */;
  %899 = %898.2;
  (%899,)
}

def @func_10251() -> Tensor[(4, 6, ?), int64] {
  %900 = @func_7898() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %900.0
}

def @func_12600() -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), float64]) {
  @func_12598() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), float64]) */
}

def @func_13906() -> (Tensor[(4, 6, ?), float32],) {
  @func_13904() /* ty=(Tensor[(4, 6, ?), float32],) */
}

def @func_11860() -> (Tensor[(6, 11, 16), float64],) {
  @func_11858() /* ty=(Tensor[(6, 11, 16), float64],) */
}

def @func_11464() -> (Tensor[(12, 7, 6), bool], Tensor[(4, 6, ?), int64]) {
  %901 = @func_7045() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(12, 7, 6), bool], uint8, Tensor[(5, 14, 2), float32], Tensor[(5, 28), bool], Tensor[(13, 2, 1), float32], Tensor[(26, 1), float32]) */;
  %902 = @func_9740() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %903 = %901.1;
  %904 = %902.0;
  (%903, %904)
}

def @func_10338() -> (Tensor[(6, 11, 16), float64],) {
  @func_10336() /* ty=(Tensor[(6, 11, 16), float64],) */
}

def @func_14173(%var_14172: Tensor[(6, 8, 12), float64]) -> (Tensor[(6, 8, 12), float64],) {
  %907 = fn (%var_14166: Tensor[(6, 8, 12), float64]) -> (Tensor[(6, 8, 12), float64],) {
    %905 = cast(%var_14166, dtype="float64") /* ty=Tensor[(6, 8, 12), float64] */;
    %906 = asin(%905) /* ty=Tensor[(6, 8, 12), float64] */;
    (%906,)
  };
  %907(%var_14172) /* ty=(Tensor[(6, 8, 12), float64],) */
}

def @func_6635(%var_6632: Tensor[(13, 1, 6), float32], %var_6633: Tensor[(56), float64], %var_6634: Tensor[(2880), int16]) -> (Tensor[(13, 1, 6), float32], Tensor[(12, 7, 6), float64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(2880), int16]) {
  %918 = fn (%var_6607: Tensor[(13, 1, 6), float32], %var_6614: Tensor[(56), float64], %var_6616: Tensor[(2880), int16]) -> (Tensor[(13, 1, 6), float32], Tensor[(12, 7, 6), float64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(2880), int16]) {
    %908 = cast(%var_6607, dtype="float32") /* ty=Tensor[(13, 1, 6), float32] */;
    %909 = cast(%var_6614, dtype="float64") /* ty=Tensor[(56), float64] */;
    %910 = cast(meta[relay.Constant][50] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
    %911 = cast(%var_6616, dtype="int16") /* ty=Tensor[(2880), int16] */;
    %912 = reshape(%909, newshape=[14, 4, 1]) /* ty=Tensor[(14, 4, 1), float64] */;
    %913 = reshape(%910, newshape=[1, 10]) /* ty=Tensor[(1, 10), float32] */;
    %914 = reshape(%911, newshape=[2880]) /* ty=Tensor[(2880), int16] */;
    %915 = @func_4876(%912, %913, %914) /* ty=(Tensor[(12, 7, 6), float64], uint8, Tensor[(9, 16, 2), bool], Tensor[(1, 10), float32], Tensor[(2880), int16], Tensor[(14, 4, ?), bool]) */;
    %916 = asinh(%908) /* ty=Tensor[(13, 1, 6), float32] */;
    %917 = %915.0;
    (%916, %917, %var_6614, meta[relay.Constant][50] /* ty=Tensor[(10), float32] */, %var_6616)
  };
  %918(%var_6632, %var_6633, %var_6634) /* ty=(Tensor[(13, 1, 6), float32], Tensor[(12, 7, 6), float64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(2880), int16]) */
}

def @func_7667() -> (Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) {
  @func_7665() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) */
}

def @func_7045() -> (Tensor[(4, 6, ?), float64], Tensor[(12, 7, 6), bool], uint8, Tensor[(5, 14, 2), float32], Tensor[(5, 28), bool], Tensor[(13, 2, 1), float32], Tensor[(26, 1), float32]) {
  %919 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %920 = %919.0;
  %921 = cast(%920, dtype="float64") /* ty=Tensor[(4, 6, ?), float64] */;
  %922 = cast(meta[relay.Constant][51] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %923 = reshape(%922, newshape=[]) /* ty=uint8 */;
  %924 = @func_569(%923) /* ty=(Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) */;
  %925 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 28), bool] */, dtype="bool") /* ty=Tensor[(5, 28), bool] */;
  %926 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 28), bool] */, dtype="bool") /* ty=Tensor[(5, 28), bool] */;
  %927 = cast(meta[relay.Constant][51] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %928 = reshape(%925, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), bool] */;
  %929 = reshape(%926, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), bool] */;
  %930 = reshape(%927, newshape=[]) /* ty=uint8 */;
  %931 = @func_1525(%928, %929, %930) /* ty=(Tensor[(5, 14, 2), float32], Tensor[(12, 7, 6), bool], uint8) */;
  %932 = cast(meta[relay.Constant][53] /* ty=Tensor[(26, 1), float32] */, dtype="float32") /* ty=Tensor[(26, 1), float32] */;
  %933 = reshape(%932, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float32] */;
  %934 = atanh(%921) /* ty=Tensor[(4, 6, ?), float64] */;
  %935 = %924.0;
  %936 = %931.0;
  %937 = @func_5085(%933) /* ty=Tensor[(13, 2, 1), float32] */;
  (%934, %935, meta[relay.Constant][51] /* ty=uint8 */, %936, meta[relay.Constant][52] /* ty=Tensor[(5, 28), bool] */, %937, meta[relay.Constant][53] /* ty=Tensor[(26, 1), float32] */)
}

def @func_7523() -> (Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64]) {
  %938 = @func_7492() /* ty=(Tensor[(72, 4), uint16],) */;
  %939 = %938.0;
  %940 = @func_7071() /* ty=Tensor[(4, 6, ?), int64] */;
  (%939, %940)
}

def @func_7398() -> (Tensor[(4, 6, ?), int64],) {
  @func_7396() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_15611(%var_15610: uint16) -> (Tensor[(10), float32], Tensor[(14, 1, 10), uint16], uint16, Tensor[(9, 16, 2), bool], Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float64]) {
  %955 = fn (%var_15559: uint16) -> (Tensor[(10), float32], Tensor[(14, 1, 10), uint16], uint16, Tensor[(9, 16, 2), bool], Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float64]) {
    %941 = @func_9226() /* ty=(Tensor[(10), float32],) */;
    %942 = cast(%var_15559, dtype="uint16") /* ty=uint16 */;
    %943 = reshape(%942, newshape=[]) /* ty=uint16 */;
    %944 = @func_11645(%943) /* ty=(Tensor[(5, 14, 2), float32], Tensor[(14, 1, 10), uint16], uint16) */;
    %945 = cast(%var_15559, dtype="uint8") /* ty=uint8 */;
    %946 = reshape(%945, newshape=[]) /* ty=uint8 */;
    %947 = @func_8149(%946) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(9, 16, 2), bool], Tensor[(288), uint16], Tensor[(4, 6, ?), int64], uint8, Tensor[(140), bool], uint8, Tensor[(4, 6, ?), int64]) */;
    %948 = @func_9740() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %949 = @func_13589() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float64]) */;
    %950 = %941.0;
    %951 = %944.1;
    %952 = %947.1;
    %953 = %948.0;
    %954 = %949.1;
    (%950, %951, %var_15559, %952, %953, %954)
  };
  %955(%var_15610) /* ty=(Tensor[(10), float32], Tensor[(14, 1, 10), uint16], uint16, Tensor[(9, 16, 2), bool], Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float64]) */
}

def @func_14448() -> (Tensor[(10), float32], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  @func_14446() /* ty=(Tensor[(10), float32], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) */
}

def @func_14915() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  @func_14913() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) */
}

def @func_15492() -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool], uint8) {
  %956 = cast(meta[relay.Constant][54] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %957 = reshape(%956, newshape=[]) /* ty=uint8 */;
  %958 = @func_7459(%957) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool]) */;
  %959 = @func_7407() /* ty=Tensor[(4, 6, ?), int64] */;
  %960 = %958.1;
  (%959, %960, meta[relay.Constant][54] /* ty=uint8 */)
}

def @main() -> (Tensor[(72, 4), uint16], int32, Tensor[(4, 6, 10), bool]) {
  %961 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %962 = reshape(%961, newshape=[]) /* ty=int32 */;
  %963 = @func_8165(%962) /* ty=(Tensor[(72, 4), uint16], Tensor[(12, 7, 6), float64], int32) */;
  %964 = @func_10443() /* ty=Tensor[(4, 6, ?), int64] */;
  %965 = @func_9742() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %966 = %965.0;
  %967 = cast(%966, dtype="bool") /* ty=Tensor[(4, 6, ?), bool] */;
  %968 = shape_of(%964, dtype="int32") /* ty=Tensor[(3), int32] */;
  %969 = cast(%964, dtype="bool") /* ty=Tensor[(4, 6, ?), bool] */;
  %970 = dyn.reshape(%967, %968, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %971 = equal(%969, %970) /* ty=Tensor[(4, 6, ?), bool] */;
  %972 = cast(%971, dtype="bool") /* ty=Tensor[(4, 6, ?), bool] */;
  %973 = cast(meta[relay.Constant][55] /* ty=Tensor[(4, 6, 10), bool] */, dtype="bool") /* ty=Tensor[(4, 6, 10), bool] */;
  %974 = %963.0;
  %975 = less(%972, %973) /* ty=Tensor[(4, 6, 10), bool] */;
  (%974, -2 /* ty=int32 */, %975)
}

def @func_9337(%var_9331: bool) -> (Tensor[(4, 6, ?), float64], Tensor[(10), float32], bool) {
  %976 = @func_7665() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) */;
  %977 = cast(%var_9331, dtype="bool") /* ty=bool */;
  %978 = reshape(%977, newshape=[]) /* ty=bool */;
  %979 = @func_7180(%978) /* ty=(Tensor[(5, 15, 14), bool], int32, Tensor[(10), float32], Tensor[(96, 30), int16]) */;
  %980 = %976.0;
  %981 = %979.2;
  (%980, %981, %var_9331)
}

def @func_10545() -> (Tensor[(6, 11, 16), float64],) {
  @func_10543() /* ty=(Tensor[(6, 11, 16), float64],) */
}

def @func_14498() -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) {
  @func_14496() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), int64]) */
}

def @func_12215(%var_12210: Tensor[(140), float32], %var_12211: Tensor[(288), uint16], %var_12212: Tensor[(78), float32], %var_12213: Tensor[(56), float64], %var_12214: Tensor[(2880), int16]) -> (Tensor[(6, 11, 16), float64], Tensor[(5, 2), float32], Tensor[(140), float32], Tensor[(288), uint16], Tensor[(78), float32], Tensor[(2880), int16], Tensor[(56), float64], Tensor[(2880), int16]) {
  %999 = fn (%var_12199: Tensor[(140), float32], %var_12200: Tensor[(288), uint16], %var_12201: Tensor[(78), float32], %var_12204: Tensor[(56), float64], %var_12205: Tensor[(2880), int16]) -> (Tensor[(6, 11, 16), float64], Tensor[(5, 2), float32], Tensor[(140), float32], Tensor[(288), uint16], Tensor[(78), float32], Tensor[(2880), int16], Tensor[(56), float64], Tensor[(2880), int16]) {
    %982 = cast(%var_12199, dtype="float32") /* ty=Tensor[(140), float32] */;
    %983 = cast(%var_12200, dtype="uint16") /* ty=Tensor[(288), uint16] */;
    %984 = cast(%var_12201, dtype="float32") /* ty=Tensor[(78), float32] */;
    %985 = reshape(%982, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), float32] */;
    %986 = reshape(%983, newshape=[288]) /* ty=Tensor[(288), uint16] */;
    %987 = reshape(%984, newshape=[1, 78]) /* ty=Tensor[(1, 78), float32] */;
    %988 = @func_8593(%985, %986, %987) /* ty=(Tensor[(5, 14, 2), int64], Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(288), uint16], Tensor[(14, 1, 10), uint16], Tensor[(4, 6, 78), float32]) */;
    %989 = cast(%var_12201, dtype="float32") /* ty=Tensor[(78), float32] */;
    %990 = cast(%var_12204, dtype="float64") /* ty=Tensor[(56), float64] */;
    %991 = cast(%var_12205, dtype="int16") /* ty=Tensor[(2880), int16] */;
    %992 = reshape(%989, newshape=[13, 1, 6]) /* ty=Tensor[(13, 1, 6), float32] */;
    %993 = reshape(%990, newshape=[56]) /* ty=Tensor[(56), float64] */;
    %994 = reshape(%991, newshape=[2880]) /* ty=Tensor[(2880), int16] */;
    %995 = @func_6631(%992, %993, %994) /* ty=(Tensor[(13, 1, 6), float32], Tensor[(12, 7, 6), float64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(2880), int16]) */;
    %996 = @func_8186() /* ty=Tensor[(6, 11, 16), float64] */;
    %997 = %988.2;
    %998 = %995.4;
    (%996, %997, %var_12199, %var_12200, %var_12201, %998, %var_12204, %var_12205)
  };
  %999(%var_12210, %var_12211, %var_12212, %var_12213, %var_12214) /* ty=(Tensor[(6, 11, 16), float64], Tensor[(5, 2), float32], Tensor[(140), float32], Tensor[(288), uint16], Tensor[(78), float32], Tensor[(2880), int16], Tensor[(56), float64], Tensor[(2880), int16]) */
}

def @func_9228() -> (Tensor[(10), float32],) {
  @func_9226() /* ty=(Tensor[(10), float32],) */
}

def @func_14548() -> Tensor[(6, 11, 16), float64] {
  @func_14546() /* ty=Tensor[(6, 11, 16), float64] */
}

def @func_9740() -> (Tensor[(4, 6, ?), int64],) {
  %1000 = @func_9692() /* ty=Tensor[(4, 6, ?), int64] */;
  (%1000,)
}

def @func_6045(%var_6043: Tensor[(144, 2), uint16], %var_6044: Tensor[(2, 216), float32]) -> (Tensor[(9, 16, 2), bool], Tensor[(144, 2), uint16], Tensor[(13, 13, 16), float64], float32, Tensor[(2, 216), float32], Tensor[(9, 8, 6), float32]) {
  @func_6041(%var_6043, %var_6044) /* ty=(Tensor[(9, 16, 2), bool], Tensor[(144, 2), uint16], Tensor[(13, 13, 16), float64], float32, Tensor[(2, 216), float32], Tensor[(9, 8, 6), float32]) */
}

def @func_10488(%var_10486: Tensor[(10), float32]) -> (Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), float64], bool, Tensor[(56, 10), bool]) {
  @func_10485(%var_10486) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), float64], bool, Tensor[(56, 10), bool]) */
}

def @func_14331() -> Tensor[(4, 6, ?), int64] {
  %1002 = fn () -> Tensor[(4, 6, ?), int64] {
    %1001 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %1001.0
  };
  %1002() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_16235() -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), float64], Tensor[(78), float32], Tensor[(56), float64], Tensor[(2880), int16]) {
  %1012 = fn () -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), float64], Tensor[(78), float32], Tensor[(56), float64], Tensor[(2880), int16]) {
    %1003 = cast(meta[relay.Constant][56] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
    %1004 = cast(meta[relay.Constant][57] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
    %1005 = cast(meta[relay.Constant][58] /* ty=Tensor[(2880), int16] */, dtype="int16") /* ty=Tensor[(2880), int16] */;
    %1006 = reshape(%1003, newshape=[13, 1, 6]) /* ty=Tensor[(13, 1, 6), float32] */;
    %1007 = reshape(%1004, newshape=[56]) /* ty=Tensor[(56), float64] */;
    %1008 = reshape(%1005, newshape=[2880]) /* ty=Tensor[(2880), int16] */;
    %1009 = @func_6631(%1006, %1007, %1008) /* ty=(Tensor[(13, 1, 6), float32], Tensor[(12, 7, 6), float64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(2880), int16]) */;
    %1010 = @func_12484() /* ty=Tensor[(4, 6, ?), int64] */;
    %1011 = %1009.1;
    (%1010, %1011, meta[relay.Constant][56] /* ty=Tensor[(78), float32] */, meta[relay.Constant][57] /* ty=Tensor[(56), float64] */, meta[relay.Constant][58] /* ty=Tensor[(2880), int16] */)
  };
  %1012() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), float64], Tensor[(78), float32], Tensor[(56), float64], Tensor[(2880), int16]) */
}

def @func_7292(%var_7277: Tensor[(78, 1), float32]) -> (Tensor[(4, 6, ?), int64], Tensor[(56), float64], Tensor[(2880), int16], Tensor[(78, 56), float32]) {
  %1013 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %1014 = cast(%var_7277, dtype="float32") /* ty=Tensor[(78, 1), float32] */;
  %1015 = cast(meta[relay.Constant][59] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %1016 = cast(meta[relay.Constant][60] /* ty=Tensor[(2880), int16] */, dtype="int16") /* ty=Tensor[(2880), int16] */;
  %1017 = reshape(%1014, newshape=[13, 1, 6]) /* ty=Tensor[(13, 1, 6), float32] */;
  %1018 = reshape(%1015, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %1019 = reshape(%1016, newshape=[2880]) /* ty=Tensor[(2880), int16] */;
  %1020 = @func_6631(%1017, %1018, %1019) /* ty=(Tensor[(13, 1, 6), float32], Tensor[(12, 7, 6), float64], Tensor[(56), float64], Tensor[(10), float32], Tensor[(2880), int16]) */;
  %1021 = %1020.2;
  %1022 = cast(%var_7277, dtype="float32") /* ty=Tensor[(78, 1), float32] */;
  %1023 = cast(%1021, dtype="float32") /* ty=Tensor[(56), float32] */;
  %1024 = %1013.0;
  %1025 = power(%1022, %1023) /* ty=Tensor[(78, 56), float32] */;
  (%1024, meta[relay.Constant][59] /* ty=Tensor[(56), float64] */, meta[relay.Constant][60] /* ty=Tensor[(2880), int16] */, %1025)
}

def @func_13043(%var_13041: Tensor[(56, 1), float64]) -> (Tensor[(4, 6, ?), int64], Tensor[(9, 16, 2), bool], Tensor[(56, 1), float64], Tensor[(10), float32], Tensor[(2880), int16], Tensor[(4, 6, ?), int64]) {
  @func_13040(%var_13041) /* ty=(Tensor[(4, 6, ?), int64], Tensor[(9, 16, 2), bool], Tensor[(56, 1), float64], Tensor[(10), float32], Tensor[(2880), int16], Tensor[(4, 6, ?), int64]) */
}

def @func_11972() -> (Tensor[(4, 6, ?), int64],) {
  @func_11970() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_7331() -> Tensor[(4, 6, ?), int64] {
  %1027 = fn () -> Tensor[(4, 6, ?), int64] {
    %1026 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %1026.0
  };
  %1027() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_3610(%var_3609: Tensor[(6, 11, 2), int64]) -> Tensor[(6, 11, 2), int64] {
  %1032 = fn (%var_3592: Tensor[(6, 11, 2), int64]) -> Tensor[(6, 11, 2), int64] {
    %1028 = cast(meta[relay.Constant][61] /* ty=Tensor[(6, 11, 2), int64] */, dtype="int64") /* ty=Tensor[(6, 11, 2), int64] */;
    %1029 = shape_of(%var_3592, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1030 = cast(%var_3592, dtype="int64") /* ty=Tensor[(6, 11, 2), int64] */;
    %1031 = dyn.reshape(%1028, %1029, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    multiply(%1030, %1031) /* ty=Tensor[(6, 11, 2), int64] */
  };
  %1032(%var_3609) /* ty=Tensor[(6, 11, 2), int64] */
}

def @func_14208() -> (Tensor[(4, 6, ?), int64],) {
  %1033 = @func_12525() /* ty=Tensor[(4, 6, ?), int64] */;
  (%1033,)
}

def @func_7073() -> Tensor[(4, 6, ?), int64] {
  @func_7071() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_9340(%var_9338: bool) -> (Tensor[(4, 6, ?), float64], Tensor[(10), float32], bool) {
  @func_9337(%var_9338) /* ty=(Tensor[(4, 6, ?), float64], Tensor[(10), float32], bool) */
}

def @func_7614() -> Tensor[(72, 4), uint16] {
  %1034 = @func_7523() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64]) */;
  %1034.0
}

def @func_10381(%var_10378: Tensor[(72, 4), uint16]) -> (Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(140), float32], Tensor[(72, 4), uint16], Tensor[(78), float32]) {
  %1035 = @func_9740() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %1036 = cast(meta[relay.Constant][62] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %1037 = cast(%var_10378, dtype="uint16") /* ty=Tensor[(72, 4), uint16] */;
  %1038 = cast(meta[relay.Constant][63] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %1039 = reshape(%1036, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), float32] */;
  %1040 = reshape(%1037, newshape=[288]) /* ty=Tensor[(288), uint16] */;
  %1041 = reshape(%1038, newshape=[1, 78]) /* ty=Tensor[(1, 78), float32] */;
  %1042 = @func_8593(%1039, %1040, %1041) /* ty=(Tensor[(5, 14, 2), int64], Tensor[(4, 6, ?), int64], Tensor[(5, 2), float32], Tensor[(288), uint16], Tensor[(14, 1, 10), uint16], Tensor[(4, 6, 78), float32]) */;
  %1043 = %1035.0;
  %1044 = %1042.2;
  (%1043, %1044, meta[relay.Constant][62] /* ty=Tensor[(140), float32] */, %var_10378, meta[relay.Constant][63] /* ty=Tensor[(78), float32] */)
}

def @func_15541() -> Tensor[(4, 6, ?), int64] {
  %1045 = @func_10585() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(13, 2, 1), float32], Tensor[(13, 2), float32]) */;
  %1045.0
}

def @func_12126() -> (Tensor[(4, 6, ?), int64],) {
  %1046 = @func_11711() /* ty=(Tensor[(10), float32], Tensor[(4, 6, ?), int64]) */;
  %1047 = %1046.1;
  (%1047,)
}

def @func_7396() -> (Tensor[(4, 6, ?), int64],) {
  %1048 = @func_7071() /* ty=Tensor[(4, 6, ?), int64] */;
  (%1048,)
}

def @func_11970() -> (Tensor[(4, 6, ?), int64],) {
  %1049 = @func_9692() /* ty=Tensor[(4, 6, ?), int64] */;
  (%1049,)
}

def @func_7459(%var_7445: uint8) -> (Tensor[(4, 6, ?), int64], Tensor[(12, 7, 6), bool]) {
  %1050 = cast(%var_7445, dtype="uint8") /* ty=uint8 */;
  %1051 = reshape(%1050, newshape=[]) /* ty=uint8 */;
  %1052 = @func_569(%1051) /* ty=(Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) */;
  %1053 = %1052.1;
  %1054 = cast(%1053, dtype="bool") /* ty=Tensor[(12, 7, 6), bool] */;
  %1055 = cast(%var_7445, dtype="bool") /* ty=bool */;
  %1056 = @func_7407() /* ty=Tensor[(4, 6, ?), int64] */;
  %1057 = not_equal(%1054, %1055) /* ty=Tensor[(12, 7, 6), bool] */;
  (%1056, %1057)
}

def @func_16136() -> (Tensor[(4, 6, ?), int64],) {
  %1058 = @func_13408() /* ty=Tensor[(4, 6, ?), int64] */;
  (%1058,)
}

def @func_15829() -> (Tensor[(4, 6, ?), int64],) {
  @func_15827() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_13595() -> (Tensor[(4, 6, ?), int64],) {
  %1059 = @func_10089() /* ty=Tensor[(4, 6, ?), int64] */;
  (%1059,)
}

def @func_10586() -> (Tensor[(4, 6, ?), int64], Tensor[(13, 2, 1), float32], Tensor[(13, 2), float32]) {
  %1065 = fn () -> (Tensor[(4, 6, ?), int64], Tensor[(13, 2, 1), float32], Tensor[(13, 2), float32]) {
    %1060 = @func_7665() /* ty=(Tensor[(4, 6, ?), float64], Tensor[(4, 6, ?), int64]) */;
    %1061 = cast(meta[relay.Constant][64] /* ty=Tensor[(13, 2), float32] */, dtype="float32") /* ty=Tensor[(13, 2), float32] */;
    %1062 = reshape(%1061, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float32] */;
    %1063 = %1060.1;
    %1064 = @func_5085(%1062) /* ty=Tensor[(13, 2, 1), float32] */;
    (%1063, %1064, meta[relay.Constant][64] /* ty=Tensor[(13, 2), float32] */)
  };
  %1065() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(13, 2, 1), float32], Tensor[(13, 2), float32]) */
}

def @func_15041() -> Tensor[(4, 6, ?), int64] {
  @func_15039() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_14014() -> (Tensor[(2880), int16],) {
  @func_14012() /* ty=(Tensor[(2880), int16],) */
}

def @func_3692(%var_3690: uint16, %var_3691: Tensor[(14, 1, 10), uint16]) -> Tensor[(14, 1, 10), uint16] {
  @func_3688(%var_3690, %var_3691) /* ty=Tensor[(14, 1, 10), uint16] */
}

def @func_7071() -> Tensor[(4, 6, ?), int64] {
  %1066 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %1066.0
}

def @func_10524() -> Tensor[(72, 4), float32] {
  %1067 = @func_7614() /* ty=Tensor[(72, 4), uint16] */;
  %1068 = cast(%1067, dtype="float32") /* ty=Tensor[(72, 4), float32] */;
  sigmoid(%1068) /* ty=Tensor[(72, 4), float32] */
}

def @func_7183(%var_7181: bool) -> (Tensor[(5, 15, 14), bool], int32, Tensor[(10), float32], Tensor[(96, 30), int16]) {
  @func_7180(%var_7181) /* ty=(Tensor[(5, 15, 14), bool], int32, Tensor[(10), float32], Tensor[(96, 30), int16]) */
}

def @func_12362(%var_12351: Tensor[(4, 6, 15), float64]) -> (Tensor[(72, 4), uint16], Tensor[(4, 6, 15), int64]) {
  %1069 = @func_8879() /* ty=(Tensor[(4, 6, ?), float64],) */;
  %1070 = %1069.0;
  %1071 = cast(%1070, dtype="int64") /* ty=Tensor[(4, 6, ?), int64] */;
  %1072 = cast(%var_12351, dtype="int64") /* ty=Tensor[(4, 6, 15), int64] */;
  %1073 = @func_7614() /* ty=Tensor[(72, 4), uint16] */;
  %1074 = bitwise_or(%1071, %1072) /* ty=Tensor[(4, 6, 15), int64] */;
  (%1073, %1074)
}

def @func_15065() -> Tensor[(10), float32] {
  @func_15063() /* ty=Tensor[(10), float32] */
}

def @func_12526() -> Tensor[(4, 6, ?), int64] {
  %1076 = fn () -> Tensor[(4, 6, ?), int64] {
    %1075 = @func_10910() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %1075.0
  };
  %1076() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_1530(%var_1527: Tensor[(5, 14, 2), bool], %var_1528: Tensor[(5, 14, 2), bool], %var_1529: uint8) -> (Tensor[(5, 14, 2), float32], Tensor[(12, 7, 6), bool], uint8) {
  @func_1525(%var_1527, %var_1528, %var_1529) /* ty=(Tensor[(5, 14, 2), float32], Tensor[(12, 7, 6), bool], uint8) */
}

def @func_15341() -> (Tensor[(4, 6, ?), int64],) {
  %1079 = fn () -> (Tensor[(4, 6, ?), int64],) {
    %1077 = @func_7523() /* ty=(Tensor[(72, 4), uint16], Tensor[(4, 6, ?), int64]) */;
    %1078 = %1077.1;
    (%1078,)
  };
  %1079() /* ty=(Tensor[(4, 6, ?), int64],) */
}

def @func_7408() -> Tensor[(4, 6, ?), int64] {
  %1081 = fn () -> Tensor[(4, 6, ?), int64] {
    %1080 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
    %1080.0
  };
  %1081() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_12883() -> (Tensor[(10), float32],) {
  %1084 = fn () -> (Tensor[(10), float32],) {
    %1082 = @func_12379() /* ty=(Tensor[(10), float32],) */;
    %1083 = %1082.0;
    (%1083,)
  };
  %1084() /* ty=(Tensor[(10), float32],) */
}

def @func_10163(%var_10161: Tensor[(2, 216), float32], %var_10162: Tensor[(2, 216), float32]) -> (Tensor[(5, 14, 2), float32], Tensor[(13, 13, 16), float64], Tensor[(288), uint16], Tensor[(2, 216), uint16], Tensor[(2, 216), float32], Tensor[(2, 216), float32]) {
  %1105 = fn (%var_10129: Tensor[(2, 216), float32], %var_10138: Tensor[(2, 216), float32]) -> (Tensor[(5, 14, 2), float32], Tensor[(13, 13, 16), float64], Tensor[(288), uint16], Tensor[(2, 216), uint16], Tensor[(2, 216), float32], Tensor[(2, 216), float32]) {
    %1085 = @func_7824() /* ty=(Tensor[(5, 14, 2), float32],) */;
    %1086 = cast(meta[relay.Constant][65] /* ty=Tensor[(288), uint16] */, dtype="uint16") /* ty=Tensor[(288), uint16] */;
    %1087 = cast(meta[relay.Constant][66] /* ty=Tensor[(2, 216), float32] */, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
    %1088 = reshape(%1086, newshape=[144, 2]) /* ty=Tensor[(144, 2), uint16] */;
    %1089 = reshape(%1087, newshape=[2, 216]) /* ty=Tensor[(2, 216), float32] */;
    %1090 = @func_6041(%1088, %1089) /* ty=(Tensor[(9, 16, 2), bool], Tensor[(144, 2), uint16], Tensor[(13, 13, 16), float64], float32, Tensor[(2, 216), float32], Tensor[(9, 8, 6), float32]) */;
    %1091 = cast(%var_10129, dtype="uint16") /* ty=Tensor[(2, 216), uint16] */;
    %1092 = shape_of(meta[relay.Constant][66] /* ty=Tensor[(2, 216), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1093 = cast(meta[relay.Constant][66] /* ty=Tensor[(2, 216), float32] */, dtype="uint16") /* ty=Tensor[(2, 216), uint16] */;
    %1094 = dyn.reshape(%1091, %1092, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %1095 = cast(%var_10138, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
    %1096 = shape_of(meta[relay.Constant][66] /* ty=Tensor[(2, 216), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1097 = cast(meta[relay.Constant][66] /* ty=Tensor[(2, 216), float32] */, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
    %1098 = dyn.reshape(%1095, %1096, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %1099 = cast(meta[relay.Constant][66] /* ty=Tensor[(2, 216), float32] */, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
    %1100 = %1085.0;
    %1101 = %1090.2;
    %1102 = bitwise_and(%1093, %1094) /* ty=Tensor[(2, 216), uint16] */;
    %1103 = mod(%1097, %1098) /* ty=Tensor[(2, 216), float32] */;
    %1104 = log(%1099) /* ty=Tensor[(2, 216), float32] */;
    (%1100, %1101, meta[relay.Constant][65] /* ty=Tensor[(288), uint16] */, %1102, %1103, %1104)
  };
  %1105(%var_10161, %var_10162) /* ty=(Tensor[(5, 14, 2), float32], Tensor[(13, 13, 16), float64], Tensor[(288), uint16], Tensor[(2, 216), uint16], Tensor[(2, 216), float32], Tensor[(2, 216), float32]) */
}

def @func_15401() -> (Tensor[(6, 11, 16), float64], Tensor[(6, 11, 16), float64], Tensor[(6, 11, 16), float64], Tensor[(4, 6, ?), float64], Tensor[(104), float32]) {
  %1106 = @func_10336() /* ty=(Tensor[(6, 11, 16), float64],) */;
  %1107 = cast(meta[relay.Constant][67] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %1108 = reshape(%1107, newshape=[26, 4]) /* ty=Tensor[(26, 4), float32] */;
  %1109 = @func_9857(%1108) /* ty=(Tensor[(4, 6, ?), float64], Tensor[(26, 4), float64]) */;
  %1110 = @func_11293() /* ty=Tensor[(6, 11, 16), float64] */;
  %1111 = @func_8186() /* ty=Tensor[(6, 11, 16), float64] */;
  %1112 = %1106.0;
  %1113 = %1109.0;
  (%1110, %1111, %1112, %1113, meta[relay.Constant][67] /* ty=Tensor[(104), float32] */)
}

def @func_4043(%var_4040: float32, %var_4041: Tensor[(9, 8, 6), float32], %var_4042: Tensor[(9, 8, 6), float32]) -> Tensor[(9, 8, 6), bool] {
  %1121 = fn (%var_4016: float32, %var_4017: Tensor[(9, 8, 6), float32], %var_4023: Tensor[(9, 8, 6), float32]) -> Tensor[(9, 8, 6), bool] {
    %1114 = cast(%var_4016, dtype="float32") /* ty=float32 */;
    %1115 = cast(%var_4017, dtype="float32") /* ty=Tensor[(9, 8, 6), float32] */;
    %1116 = divide(%1114, %1115) /* ty=Tensor[(9, 8, 6), float32] */;
    %1117 = cast(%var_4023, dtype="bool") /* ty=Tensor[(9, 8, 6), bool] */;
    %1118 = shape_of(%1116, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1119 = cast(%1116, dtype="bool") /* ty=Tensor[(9, 8, 6), bool] */;
    %1120 = dyn.reshape(%1117, %1118, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%1119, %1120) /* ty=Tensor[(9, 8, 6), bool] */
  };
  %1121(%var_4040, %var_4041, %var_4042) /* ty=Tensor[(9, 8, 6), bool] */
}

def @func_15827() -> (Tensor[(4, 6, ?), int64],) {
  %1122 = @func_13589() /* ty=(Tensor[(4, 6, ?), int64], Tensor[(6, 11, 16), float64]) */;
  %1123 = %1122.0;
  (%1123,)
}

def @func_8956(%var_8954: Tensor[(432), float32]) -> (Tensor[(72, 4), uint16], Tensor[(9, 8, 6), bool], float32, Tensor[(432), float32]) {
  @func_8953(%var_8954) /* ty=(Tensor[(72, 4), uint16], Tensor[(9, 8, 6), bool], float32, Tensor[(432), float32]) */
}

def @func_572(%var_570: uint8) -> (Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) {
  @func_569(%var_570) /* ty=(Tensor[(12, 7, 6), bool], Tensor[(12, 7, 6), float64]) */
}

def @func_13410() -> Tensor[(4, 6, ?), int64] {
  @func_13408() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_6041(%var_6018: Tensor[(144, 2), uint16], %var_6026: Tensor[(2, 216), float32]) -> (Tensor[(9, 16, 2), bool], Tensor[(144, 2), uint16], Tensor[(13, 13, 16), float64], float32, Tensor[(2, 216), float32], Tensor[(9, 8, 6), float32]) {
  %1124 = cast(%var_6018, dtype="uint16") /* ty=Tensor[(144, 2), uint16] */;
  %1125 = cast(%var_6018, dtype="uint16") /* ty=Tensor[(144, 2), uint16] */;
  %1126 = reshape(%1124, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %1127 = reshape(%1125, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint16] */;
  %1128 = cast(meta[relay.Constant][68] /* ty=Tensor[(13, 13, 16), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
  %1129 = atanh(%1128) /* ty=Tensor[(13, 13, 16), float32] */;
  %1130 = cast(%1129, dtype="float64") /* ty=Tensor[(13, 13, 16), float64] */;
  %1131 = cast(4.20189f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1132 = cast(%var_6026, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %1133 = cast(%var_6026, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %1134 = reshape(%1131, newshape=[]) /* ty=float32 */;
  %1135 = reshape(%1132, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float32] */;
  %1136 = reshape(%1133, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float32] */;
  %1137 = @func_4039(%1134, %1135, %1136) /* ty=Tensor[(9, 8, 6), bool] */;
  %1138 = cast(%1137, dtype="float32") /* ty=Tensor[(9, 8, 6), float32] */;
  %1139 = @func_609(%1126, %1127) /* ty=Tensor[(9, 16, 2), bool] */;
  %1140 = asinh(%1130) /* ty=Tensor[(13, 13, 16), float64] */;
  %1141 = asin(%1138) /* ty=Tensor[(9, 8, 6), float32] */;
  (%1139, %var_6018, %1140, 4.20189f /* ty=float32 */, %var_6026, %1141)
}

def @func_15039() -> Tensor[(4, 6, ?), int64] {
  @func_7152() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_11869() -> Tensor[(4, 6, ?), int64] {
  %1142 = fn () -> Tensor[(4, 6, ?), int64] {
    @func_10089() /* ty=Tensor[(4, 6, ?), int64] */
  };
  %1142() /* ty=Tensor[(4, 6, ?), int64] */
}

def @func_13072() -> (Tensor[(4, 6, ?), int64],) {
  %1143 = @func_9252() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %1144 = %1143.0;
  (%1144,)
}

def @func_8953(%var_8946: Tensor[(432), float32]) -> (Tensor[(72, 4), uint16], Tensor[(9, 8, 6), bool], float32, Tensor[(432), float32]) {
  %1145 = cast(3.08351f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1146 = cast(%var_8946, dtype="float32") /* ty=Tensor[(432), float32] */;
  %1147 = cast(%var_8946, dtype="float32") /* ty=Tensor[(432), float32] */;
  %1148 = reshape(%1145, newshape=[]) /* ty=float32 */;
  %1149 = reshape(%1146, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float32] */;
  %1150 = reshape(%1147, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float32] */;
  %1151 = @func_7614() /* ty=Tensor[(72, 4), uint16] */;
  %1152 = @func_4039(%1148, %1149, %1150) /* ty=Tensor[(9, 8, 6), bool] */;
  (%1151, %1152, 3.08351f /* ty=float32 */, %var_8946)
}

def @func_11243(%var_11170: Tensor[(12, 2, 4), float32], %var_11210: Tensor[(432), float32]) -> (Tensor[(12, 2, 4), bool], Tensor[(12, 2, 4), float32], Tensor[(9, 8, 6), bool], float32, Tensor[(432), float32], Tensor[(4, 6, ?), int64]) {
  %1153 = cast(%var_11170, dtype="float32") /* ty=Tensor[(12, 2, 4), float32] */;
  %1154 = sqrt(%1153) /* ty=Tensor[(12, 2, 4), float32] */;
  %1155 = cast(%var_11170, dtype="bool") /* ty=Tensor[(12, 2, 4), bool] */;
  %1156 = shape_of(%1154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1157 = cast(%1154, dtype="bool") /* ty=Tensor[(12, 2, 4), bool] */;
  %1158 = dyn.reshape(%1155, %1156, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1159 = cast(%1154, dtype="float32") /* ty=Tensor[(12, 2, 4), float32] */;
  %1160 = cast(-6.58204f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1161 = cast(%var_11210, dtype="float32") /* ty=Tensor[(432), float32] */;
  %1162 = cast(%var_11210, dtype="float32") /* ty=Tensor[(432), float32] */;
  %1163 = reshape(%1160, newshape=[]) /* ty=float32 */;
  %1164 = reshape(%1161, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float32] */;
  %1165 = reshape(%1162, newshape=[9, 8, 6]) /* ty=Tensor[(9, 8, 6), float32] */;
  %1166 = @func_6751() /* ty=(Tensor[(4, 6, ?), int64],) */;
  %1167 = greater_equal(%1157, %1158) /* ty=Tensor[(12, 2, 4), bool] */;
  %1168 = log2(%1159) /* ty=Tensor[(12, 2, 4), float32] */;
  %1169 = @func_4039(%1163, %1164, %1165) /* ty=Tensor[(9, 8, 6), bool] */;
  %1170 = %1166.0;
  (%1167, %1168, %1169, -6.58204f /* ty=float32 */, %var_11210, %1170)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen788/build/output.py", line 3520, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:12:40] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

